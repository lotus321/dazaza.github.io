[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1004266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u4e00\u9875\u4e0b\u4e00\u9875\u5faa\u73af\u53cc\u5411\u94fe\u8868\u662f\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u4ee5\u8282\u70b9\u7684\u5f62\u5f0f\u5b58\u50a8\u3002\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e09\u4e2a\u5b50\u5143\u7d20\u3002\u5b58\u50a8\u5143\u7d20\u503c\u7684\u6570\u636e\u90e8\u5206\u3001\u5b58\u50a8\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u7684\u4e0a\u4e00\u4e2a\u90e8\u5206\u548c\u5b58\u50a8\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\u7b2c\u4e00\u4e2a\u8282\u70b9(\u4e5f\u79f0\u4e3aHead)\u59cb\u7ec8\u7528\u4f5c\u904d\u5386\u5217\u8868\u7684\u5f15\u7528\u3002\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u6307\u5411\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u94fe\u63a5\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u94fe\u63a5\u3002\u53ef\u4ee5\u5c06\u53cc\u5411\u94fe\u63a5\u7684\u5706\u5f62\u53ef\u89c6\u5316\u4e3a\u8282\u70b9\u94fe\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u548c\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\n\u5728C\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528Structure\u521b\u5efa\u8282\u70b9\u3002\u5728C++\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u521b\u5efa\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4f7f\u7528\u7ed3\u6784\u521b\u5efa\u8282\u70b9\u3002LinkedList\u7c7b\u5305\u542b\u4f5c\u4e3a\u7c7b\u6210\u5458\u7684Node\u3002\n\u5728Java\u3001Python\u3001C#\u548cPHP\u4e2d\uff0c\u5faa\u73af\u53cc\u5411\u94fe\u8868\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u7c7b\uff0c\u8282\u70b9\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\u3002LinkedList\u7c7b\u5305\u542bNode\u7c7b\u7c7b\u578b\u7684\u5f15\u7528\u3002\n//node structurestruct Node{int data\uff1bNode*Next\uff1bNode*Prev\uff1b}\uff1b\u7c7bLinkedList{public\uff1anode*head\uff1bpublic\uff1a//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b\n#node structureclass Node\uff1a#\u521b\u5efa\u65b0\u8282\u70b9\u7684\u6784\u9020\u51fd\u6570def__init__(self\uff0cdata)\uff1aself.data=data self.next=None self.prev=None#class LinkedList\uff1a#\u521b\u5efa\u7a7a\u7684LinkedList\u7684\u6784\u9020\u51fd\u6570def__init__(Self)\uff1aself.head=None\u3002\n//\u8282\u70b9\u7ed3\u6784\u7c7bNode{int data\uff1bNode Next\uff1bNode Prev\uff1b}\uff1b\u7c7bLinkedList{Node Head\uff1b//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b\n//node structureclass Node{public int data\uff1bpublic Node Next\uff1bpublic Node prev\uff1b}\uff1bclass LinkedList{public Node head\uff1b//\u521b\u5efa\u7a7aLinkedList public LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b\n//node structureclass Node{public$data\uff1bpublic$next\uff1bpublic$prev\uff1b}\u7c7bLinkedList{public$head\uff1b//\u521b\u5efa\u7a7aLinkedList public\u51fd\u6570\u7684\u6784\u9020\u51fd\u6570__Construction(){$this-&gt\uff1bhead=null\uff1b}}\uff1b\n#include&lt\uff1biostream&gt\uff1busing\u547d\u540d\u7a7a\u95f4std\uff1b//node structurestruct Node{int data\uff1bNode*Next\uff1bNode*prev\uff1b}\uff1bclass LinkedList{public\uff1anode*head\uff1bpublic\uff1a//\u521b\u5efa\u7a7a\u7684LinkedList(){head=null\uff1b}}\uff1b//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u7a7a\u7684LinkedList LinkedList MyList\uff1b//add first\u3002node*first=new Node()\uff1bfirst-gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first\uff1b//\u94fe\u63a5\u5934\u90e8first\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9-&gt\uff1bnext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=first\uff1b//\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Node*Second=new Node()\uff1bSecond-&gt\uff1bData=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u94fe\u63a5\u7b2c\u4e00\u4e2a\u8282\u70b9Second-&gt\uff1bprev=first\uff1bFirst-&gt\uff1bNext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=Second\uff1b//\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002\u8282\u70b9*Third=new Node()\uff1bThird-&gt\uff1bData=30\uff1bThird-&gt\uff1bNext=NULL\uff1b//\u6b63\u5728\u94fe\u63a5\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&gt\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aThird-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bPrev=Third\uff1bReturn 0\uff1b}\u3002\n#include&lt\uff1bstdio.h&gt\uff1b#include&lt\uff1bstdlib.h&gt\uff1b//node structurestruct Node{int data\uff1bstruct Node*next\uff1bstruct Node*prev\uff1b}\uff1b//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u540d\u4e3aMyList struct Node*MyList=null\u7684\u5934\u8282\u70b9\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002struct Node*first\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9first=(struct Node*)malloc(sizeof(Struct Node))\uff1bfirst-&gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u6b63\u5728\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList=first\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9first-&gt\uff1bnext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList-&gt\uff1bstruct Node*Second\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9Second=(struct Node*)malloc(sizeof(Struct Node))\uff1bSecond-&gt\uff1bdata=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u6b63\u5728\u4e0e\u7b2c\u4e00\u4e2a\u8282\u70b9Second\u94fe\u63a5-&&gt;\uff1bprev=first\uff1bfirst-&gt;\uff1bnext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList\u7684\u4e0a\u4e00\u4e2a-\u3002struct Node*Third\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9Third=(struct Node*)malloc(sizeof(Struct Node))\uff1bThird-&gt\uff1bdata=30\uff1bThird-&gt\uff1bNext=null\uff1b//\u4e0e\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&gt;\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u4e3aThird\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&&gt;\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934MyList\u7684\u4e0a\u4e00\u4e2a-\u3002\n#node structureclass Node\uff1a#\u521b\u5efa\u65b0\u8282\u70b9\u7684\u6784\u9020\u51fd\u6570def__init__(self\uff0cdata)\uff1aself.data=data self.next=None self.prev=None#class LinkedList\uff1a#\u521b\u5efa\u7a7a\u7684LinkedList def__init__(Self)\uff1aself.head=None#\u6d4b\u8bd5\u4ee3\u7801#\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684LinkedList MyList=LinkedList()#add first nokedList\u3002#\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Second=Node(20)#\u4f7f\u7528\u7b2c\u4e00\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=firstfirst.next=Second#\u94fe\u63a5\u5934\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u5934\u7684\u524d\u4e00\u4e2aMyList.head.prev=Second\uff1b#\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002Third=Node(30)#\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=Second\u3002Next=Third#\u94fe\u63a5\u5934\u4e09\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u4e0a\u4e00\u4e2a\u3002\n//node structureclass Node{int data\uff1bNode Next\uff1bNode Prev\uff1b}\uff1bclass LinkedList{Node head\uff1b//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b//\u6d4b\u8bd5\u4ee3\u7801\u516c\u5171\u7c7b\u5b9e\u73b0{public static void main(string[]args){//\u521b\u5efa\u7a7aLinkedList LinkedList MyList=new LinkedList()\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002Node First=new Node()\uff1bfirst.data=10\uff1bfirst.next=null\uff1bfirst.prev=null\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3afirst\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9.next=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head.prev=first\uff1b//\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Node Second=new Node()\uff1bSecond d.data=20\uff1bSecd.next=null\uff1b//\u94fe\u63a5\u7b2c\u4e00\u4e2a\u8282\u70b9Second\u3002prev=first\uff1bfirst.next=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u3002next=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head.prev=Second\uff1b//\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002Node Third=new Node()\uff1bThird d.data=30\uff1bThird d.next=null\uff1b//\u94fe\u63a5\u7b2c\u4e8c\u4e2a\u8282\u70b9Third.prev=Second\uff1bSecd.Next=Third\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aThird\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a.Next=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head.prev=Third\uff1b}}\u3002\n\u4f7f\u7528system\uff1b//node structureclass Node{public int data\uff1bpublic Node Next\uff1bpublic Node prev\uff1b}\uff1bclass LinkedList{public Node head\uff1b//\u6784\u9020\u51fd\u6570\u521b\u5efa\u7a7a\u7684LinkedList public LinkedList(){head=null\uff1b}}\uff1b//\u6d4b\u8bd5\u4ee3\u7801\u7c7b\u5b9e\u73b0\n#include&lt\uff1biostream&&gt;\u4f7f\u7528\u547d\u540d\u7a7a\u95f4std\uff1b//node structurestruct Node{int data\uff1bNode*Next\uff1bNode*prev\uff1b}\uff1bclass LinkedList{public\uff1anode*head\uff1bpublic\uff1a//\u521b\u5efa\u7a7a\u7684LinkedList LinkedList(){head=null\uff1b}//\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9void PrintList(){Node*temp=head\uff1bif(temp\uff01=null){cout\u3002data&lt\uff1b&lt\uff1b&#34\uff1b&#34\uff1b\uff1btemp=temp-&gt\uff1bnext\uff1bif(temp==head)Break\uff1b}}Else{cout&lt\uff1b&lt\uff1b&#34\uff1b\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b\uff1b}\uff1b//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u7a7a\u7684LinkedList LinkedList MyList\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002node*first=new Node()\uff1bfirst-gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first\uff1b//\u94fe\u63a5\u5934\u90e8first\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9-&gt\uff1bnext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=first\uff1b//\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Node*Second=new Node()\uff1bSecond-&gt\uff1bData=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u94fe\u63a5\u7b2c\u4e00\u4e2a\u8282\u70b9Second-&gt\uff1bprev=first\uff1bFirst-&gt\uff1bNext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=Second\uff1b//\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002\u8282\u70b9*Third=new Node()\uff1bThird-&gt\uff1bData=30\uff1bThird-&gt\uff1bNext=null\uff1b//\u6b63\u5728\u94fe\u63a5\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&&gt;\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aThird-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bPrev=Third\uff1b//\u6253\u5370\u5217\u8868MyList.PrintList()\u7684\u5185\u5bb9\u3002\n#include&lt\uff1bstdio.h&gt\uff1b#include&lt\uff1bstdlib.h&gt\uff1b//node structurestruct Node{int data\uff1bstruct Node*Next\uff1bstruct Node*prev\uff1b}\uff1b//\u663e\u793alistvoid PrintList(struct Node*head_ref){struct Node*temp=head_ref\uff1bif(head_ref\uff01=null){printf(&#34\uff1b\\n\u3002temp=temp-&gt\uff1bnext\uff1bif(temp==head_ref)Break\uff1b}}Else{printf(&#34\uff1b)\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b)\uff1b}//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u540d\u4e3aMyList struct Node*MyList=null\u7684\u5934\u8282\u70b9\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002struct Node*first\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9first=(struct Node*)malloc(sizeof(Struct Node))\uff1bfirst-&gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u6b63\u5728\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList=first\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9first-&gt\uff1bnext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList-&gt\uff1bstruct Node*Second\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9Second=(struct Node*)malloc(sizeof(Struct Node))\uff1bSecond-&gt\uff1bdata=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u6b63\u5728\u4e0e\u7b2c\u4e00\u4e2a\u8282\u70b9Second\u94fe\u63a5-&&gt;\uff1bprev=first\uff1bfirst-&gt;\uff1bnext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList\u7684\u4e0a\u4e00\u4e2a-\u3002struct Node*Third\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9Third=(struct Node*)malloc(sizeof(Struct Node))\uff1bThird-&gt\uff1bdata=30\uff1bThird-&gt\uff1bNext=null\uff1b//\u4e0e\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&gt;\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u4e3aThird\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&&gt;\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934MyList\u7684\u4e0a\u4e00\u4e2a-\u3002\n#node structureclass Node\uff1a#\u521b\u5efa\u65b0\u8282\u70b9\u7684\u6784\u9020\u51fd\u6570def__init__(self\uff0cdata)\uff1aself.data=data self.next=one self.prev=None#class LinkedList\uff1a#\u521b\u5efa\u7a7a\u7684LinkedList def__init__(Self)\uff1aself.head=None#\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9def PrintList(Self)\uff1atemp=self.head if(temp\u3002)While(True)\uff1aprint(temp.data\uff0cend=&#34\uff1b&#34\uff1b)temp=temp.next if(temp==self.head)\uff1aBreak Else\uff1a\u6253\u5370(&#34\uff1b\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b)#\u6d4b\u8bd5\u4ee3\u7801#\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684LinkedList MyList=LinkedList()#\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002first=Node(10)#\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first#\u94fe\u63a5\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002#\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Second=Node(20)#\u4f7f\u7528\u7b2c\u4e00\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=firstfirst.next=Second#\u94fe\u63a5\u5934\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u5934\u7684\u524d\u4e00\u4e2aMyList.head.prev=Second\uff1b#\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002Third=Node(30)#\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=Second\u3002Next=Third#\u94fe\u63a5\u5934\u4e09\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u4e0a\u4e00\u4e2a\u3002\n//\u8282\u70b9\u7ed3\u6784\u7c7bNode{int data\uff1bNode Next\uff1bNode Prev\uff1b}\uff1b\u7c7bLinkedList{Node Head\uff1b//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}//\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9void PrintList(){Node temp=new Node()\uff1btemp=this.head\uff1bif(temp\uff01=null){System.out.print(&#34\uff1b\\n\u5217\u8868\u3002temp=temp.next\uff1bif(temp==this.head)Break\uff1b}}Else{System.out.print(&#34\uff1b)\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b)\uff1b}\uff1b//\u6d4b\u8bd5\u4ee3\u7801\u516c\u5171\u7c7b\u5b9e\u73b0", "note_en": "Previous Page Next Page  A circular doubly linked list is a linear data structure, in which the elements are stored in the form of a node. Each node contains three sub-elements. A data part that stores the value of the element, the previous part that stores the pointer to the previous node, and the next part that stores the pointer to the next node as shown in the below image:\n  The first node also known as HEAD is always used as a reference to traverse the list. Last element contains link to the first element as next and the first element contains link of the last element as previous. A circular doubly linked can be visualized as a chain of nodes, where every node points to previous and next node.\n    In C, a node can be created using structure. In C++, circular doubly linked list can be created using a class and a Node using structures. The LinkedList class contains Node as class member.\n In Java, Python, C# and PHP, circular doubly linked list can be represented as a class and a Node as a separate class. The LinkedList class contains a reference of Node class type.\n  //node structurestruct Node { int data; Node* next; Node* prev;};class LinkedList { public: Node* head; public: //constructor to create an empty LinkedList LinkedList(){ head = NULL; }};\n    # node structureclass Node: #constructor to create a new node def __init__(self, data): self.data = data self.next = None self.prev = None#class Linked Listclass LinkedList: #constructor to create an empty LinkedList def __init__(self): self.head = None\n  //node structureclass Node { int data; Node next; Node prev;};class LinkedList { Node head; //constructor to create an empty LinkedList LinkedList(){ head = null; }};\n  //node structureclass Node { public int data; public Node next; public Node prev;};class LinkedList { public Node head; //constructor to create an empty LinkedList public LinkedList(){ head = null; } };\n  //node structureclass Node { public $data; public $next; public $prev;}class LinkedList { public $head; //constructor to create an empty LinkedList public function __construct(){ $this-&gt;head = null; }};\n     #include &lt;iostream&gt;using namespace std;//node structurestruct Node { int data; Node* next; Node* prev;};class LinkedList { public: Node* head; public: //constructor to create an empty LinkedList LinkedList(){ head = NULL; } };//test the code int main() { //create an empty LinkedList LinkedList MyList; //Add first node. Node* first = new Node(); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList.head = first; //linking next of the node with head first-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = first; //Add second node. Node* second = new Node(); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = second; //Add third node. Node* third = new Node(); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = third; return 0;}\n  #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;//node structurestruct Node { int data; struct Node* next; struct Node* prev;};// test the code int main() { //create the head node with name MyList struct Node* MyList = NULL; //Add first node. struct Node* first; //allocate second node in the heap first = (struct Node*)malloc(sizeof(struct Node)); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList = first; //linking next of the node with head first-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = first; //Add second node. struct Node* second; //allocate second node in the heap second = (struct Node*)malloc(sizeof(struct Node)); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = second; //Add third node. struct Node* third; //allocate third node in the heap third = (struct Node*)malloc(sizeof(struct Node)); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = third; return 0; }\n  # node structureclass Node: #constructor to create a new node def __init__(self, data): self.data = data self.next = None self.prev = None#class Linked Listclass LinkedList: #constructor to create an empty LinkedList def __init__(self): self.head = None # test the code # create an empty LinkedList MyList = LinkedList()#Add first node.first = Node(10)#linking with head nodeMyList.head = first#linking next of the node with headfirst.next = MyList.head #linking prev of the head MyList.head.prev = first;#Add second node.second = Node(20)#linking with first nodesecond.prev = firstfirst.next = second#linking next of the node with headsecond.next = MyList.head #linking prev of the head MyList.head.prev = second;#Add third node.third = Node(30)#linking with second nodethird.prev = secondsecond.next = third#linking next of the node with headthird.next = MyList.head #linking prev of the head MyList.head.prev = third;\n  //node structureclass Node { int data; Node next; Node prev;};class LinkedList { Node head; //constructor to create an empty LinkedList LinkedList(){ head = null; } };// test the code public class Implementation { public static void main(String[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; }}\n  using System;//node structureclass Node { public int data; public Node next; public Node prev;};class LinkedList { public Node head; //constructor to create an empty LinkedList public LinkedList(){ head = null; } };// test the code class Implementation { static void Main(string[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; }}\n  &lt;?php//node structureclass Node { public $data; public $next; public $prev;}class LinkedList { public $head; //constructor to create an empty LinkedList public function __construct(){ $this-&gt;head = null; } };// test the code //create an empty LinkedList $MyList = new LinkedList();//Add first node.$first = new Node();$first-&gt;data = 10;$first-&gt;next = null;$first-&gt;prev = null;//linking with head node$MyList-&gt;head = $first;//linking next of the node with head$first-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $first;//Add second node.$second = new Node();$second-&gt;data = 20;$second-&gt;next = null;//linking with first node$second-&gt;prev = $first;$first-&gt;next = $second;//linking next of the node with head$second-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $second;//Add third node.$third = new Node();$third-&gt;data = 30;$third-&gt;next = null;//linking with second node$third-&gt;prev = $second;$second-&gt;next = $third;//linking next of the node with head$third-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $third;?&gt;\n   A circular doubly linked list can be traversed from any node of the list using a temp node. Keep on moving the temp node to the next one and displaying its content. Stop the traversal, after reaching the starting node.\n  #include &lt;iostream&gt;using namespace std;//node structurestruct Node { int data; Node* next; Node* prev;};class LinkedList { public: Node* head; public: //constructor to create an empty LinkedList LinkedList(){ head = NULL; } //display the content of the list void PrintList() { Node* temp = head; if(temp != NULL) { cout&lt;&lt;&#34;\\nThe list contains: &#34;; while(true) { cout&lt;&lt;temp-&gt;data&lt;&lt;&#34; &#34;; temp = temp-&gt;next; if(temp == head) break; } } else { cout&lt;&lt;&#34;\\nThe list is empty.&#34;; } } };// test the code int main() { //create an empty LinkedList LinkedList MyList; //Add first node. Node* first = new Node(); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList.head = first; //linking next of the node with head first-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = first; //Add second node. Node* second = new Node(); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = second; //Add third node. Node* third = new Node(); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = third; //print the content of list MyList.PrintList(); return 0; }\n  #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;//node structurestruct Node { int data; struct Node* next; struct Node* prev;};//display the content of the listvoid PrintList(struct Node* head_ref) { struct Node* temp = head_ref; if(head_ref != NULL) { printf(&#34;\\nThe list contains: &#34;); while (1) { printf(&#34;%i &#34;,temp-&gt;data); temp = temp-&gt;next; if(temp == head_ref) break; } } else { printf(&#34;\\nThe list is empty.&#34;); } }// test the code int main() { //create the head node with name MyList struct Node* MyList = NULL; //Add first node. struct Node* first; //allocate second node in the heap first = (struct Node*)malloc(sizeof(struct Node)); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList = first; //linking next of the node with head first-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = first; //Add second node. struct Node* second; //allocate second node in the heap second = (struct Node*)malloc(sizeof(struct Node)); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = second; //Add third node. struct Node* third; //allocate third node in the heap third = (struct Node*)malloc(sizeof(struct Node)); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = third; //print the content of list PrintList(MyList); return 0; }\n  # node structureclass Node: #constructor to create a new node def __init__(self, data): self.data = data self.next = None self.prev = None#class Linked Listclass LinkedList: #constructor to create an empty LinkedList def __init__(self): self.head = None #display the content of the list def PrintList(self): temp = self.head if(temp != None): print(&#34;\\nThe list contains:&#34;, end=&#34; &#34;) while (True): print(temp.data, end=&#34; &#34;) temp = temp.next if(temp == self.head): break else: print(&#34;\\nThe list is empty.&#34;)# test the code # create an empty LinkedList MyList = LinkedList()#Add first node.first = Node(10)#linking with head nodeMyList.head = first#linking next of the node with headfirst.next = MyList.head #linking prev of the head MyList.head.prev = first;#Add second node.second = Node(20)#linking with first nodesecond.prev = firstfirst.next = second#linking next of the node with headsecond.next = MyList.head #linking prev of the head MyList.head.prev = second;#Add third node.third = Node(30)#linking with second nodethird.prev = secondsecond.next = third#linking next of the node with headthird.next = MyList.head #linking prev of the head MyList.head.prev = third;#print the content of list MyList.PrintList()\n  //node structureclass Node { int data; Node next; Node prev;};class LinkedList { Node head; //constructor to create an empty LinkedList LinkedList(){ head = null; } //display the content of the list void PrintList() { Node temp = new Node(); temp = this.head; if(temp != null) { System.out.print(&#34;\\nThe list contains: &#34;); while(true) { System.out.print(temp.data + &#34; &#34;); temp = temp.next; if(temp == this.head) break; } } else { System.out.print(&#34;\\nThe list is empty.&#34;); } } };// test the code public class Implementation { public static void main(String[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; //print the content of list MyList.PrintList(); }}\n  using System;//node structureclass Node { public int data; public Node next; public Node prev;};class LinkedList { public Node head; //constructor to create an empty LinkedList public LinkedList(){ head = null; } //display the content of the list public void PrintList() { Node temp = new Node(); temp = this.head; if(temp != null) { Console.Write(&#34;\\nThe list contains: &#34;); while(true) { Console.Write(temp.data + &#34; &#34;); temp = temp.next; if(temp == this.head) break; } } else { Console.Write(&#34;\\nThe list is empty.&#34;); } } };// test the code class Implementation { static void Main(string[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; //print the content of list MyList.PrintList(); }}\n  &lt;?php//node structureclass Node { public $data; public $next; public $prev;}class LinkedList { public $head; //constructor to create an empty LinkedList public function __construct(){ $this-&gt;head = null; } //display the content of the list public function PrintList() { $temp = new Node(); $temp = $this-&gt;head; if($temp != null) { echo &#34;\\nThe list contains: &#34;; while(true) { echo $temp-&gt;data.&#34; &#34;; $temp = $temp-&gt;next; if($temp == $this-&gt;head) break; } } else { echo &#34;\\nThe list is empty.&#34;; } } };// test the code //create an empty LinkedList $MyList = new LinkedList();//Add first node.$first = new Node();$first-&gt;data = 10;$first-&gt;next = null;$first-&gt;prev = null;//linking with head node$MyList-&gt;head = $first;//linking next of the node with head$first-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $first;//Add second node.$second = new Node();$second-&gt;data = 20;$second-&gt;next = null;//linking with first node$second-&gt;prev = $first;$first-&gt;next = $second;//linking next of the node with head$second-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $second;//Add third node.$third = new Node();$third-&gt;data = 30;$third-&gt;next = null;//linking with second node$third-&gt;prev = $second;$second-&gt;next = $third;//linking next of the node with head$third-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $third;//print the content of list$MyList-&gt;PrintList(); ?&gt;\n      Previous Page Next Page", "posttime": "2020-05-29 23:41:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53cc\u5411,doubly,\u8282\u70b9", "title": "\u5faa\u73af\u53cc\u5411\u94fe\u8868", "title_en": "Circular Doubly Linked List", "transed": 1, "url": "https://www.alphacodingskills.com/ds/circular-doubly-linked-list.php", "via": "", "real_tags": ["\u53cc\u5411", "doubly", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004265, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u201c1\u201d\u4f4d\u7f6e\u5f00\u59cb\uff0c\u6211\u4eec\u52a06+6=12\uff0c\u5199\u4e0b2\uff0c\u8fdb\u4f4d1\u3002\u6211\u4eec\u5411\u5de6\u524d\u8fdb\uff0c\u4e00\u6b21\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u6570\u5b57\u8981\u52a0\u3002\n\u5728\u5b9e\u73b0\u5927\u6574\u6570(\u4f8b\u5982\uff0c2 64\u53ca\u4ee5\u4e0a)\u7684\u52a0\u6cd5\u65f6\uff0c\u901a\u5e38\u4f1a\u7f16\u5199\u4e0e\u6b64\u7b97\u6cd5\u975e\u5e38\u76f8\u4f3c\u7684\u4ee3\u7801\u3002\u6709\u8da3\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6280\u5de7\u53ef\u4ee5\u5728\u73b0\u4ee3CPU\u4e0a\u6781\u5927\u5730\u52a0\u901f\u8fd9\u4e00\u8fc7\u7a0b\u3002\n\u4f46\u9996\u5148\uff0c\u6211\u8981\u95ee\u4e00\u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u4ece\u201c1\u201d\u5f00\u59cb\u957f\u76f8\u52a0\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u4ece\u5de6\u8fb9\u5f00\u59cb\u5462\uff1f\n\u7b54\u6848\u5f53\u7136\u662f\u8fdb\u4f4d\uff0c\u6211\u4eec\u4e0d\u80fd\u786e\u5b9a\u7b54\u6848\u7684\u7ed9\u5b9a\u6570\u5b57\u662f\u591a\u5c11\uff0c\u76f4\u5230\u6211\u4eec\u5b8c\u6210\u4e86\u8be5\u6570\u5b57\u53f3\u8fb9\u7684\u6240\u6709\u52a0\u6cd5\u3002\n6+3=9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u6570\u5b57\u662f9.8+4=12\uff0c\u597d\u7684\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u662f2\u2026\u3002\u4f46\u662f\u643a\u5e261\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u6570\u5b57\u5b9e\u9645\u4e0a\u662f9+1=10\u2026\u3002\u73b0\u5728\u5e26\u56de1\u4e2a\u2026\u3002\n\u5bf9\u4e8e\u5fc3\u7b97\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f\u592a\u7cdf\u7cd5(\u6709\u4e9b\u4eba\u5728\u5904\u7406\u8db3\u591f\u5c0f\u7684\u6570\u5b57\u65f6\u5b9e\u9645\u4e0a\u66f4\u559c\u6b22\u5b83)\u3002\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u79cd\u7b97\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u9650\u5236\uff0c\u5728\u5904\u7406\u8f83\u5927\u7684\u6570\u5b57\u65f6\u4f1a\u53d8\u5f97\u660e\u663e\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u56e0\u4e3a\u8ba1\u7b97\u7684\u540e\u671f\u90e8\u5206\u4f9d\u8d56\u4e8e\u8ba1\u7b97\u65e9\u671f\u90e8\u5206\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5f88\u96be\u5bf9\u5de5\u4f5c\u8fdb\u884c\u62c6\u5206\u548c\u5e76\u884c\u5316\u3002\n\u5f53\u7136\uff0c\u8ba1\u7b97\u673a\u4e0d\u80fd\u5728\u57fa\u657010\u4e0b\u8fd0\u884c\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u73b0\u4ee3\u7684\u53f0\u5f0f\u673a\u548c\u670d\u52a1\u5668CPU\u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3\u6765\u64cd\u4f5c(\u5927\u90e8\u5206)64\u4f4d\u6574\u6570\u3002\n\uff1b\u5c06B\u4e2d\u768464\u4f4d\u503c\u52a0\u5230A\u4e2d\u768464\u4f4d\u503c\u4e2d\u6dfb\u52a0A\uff0cB\uff1b\u6ce8\u610f\uff1a\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u5c06\u4f7f\u7528\u5b57\u6bcd\u800c\u4e0d\u662f\u771f\u5b9e\u7684\u5bc4\u5b58\u5668\u540d\u79f0\n\u53ea\u8981\u6211\u4eec\u7684\u6570\u5b57\u7b26\u5408\u5355\u4e2a64\u4f4d\u7684\u503c\uff0c\u4e8b\u60c5\u5c31\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u60f3\u8981\u6dfb\u52a0(\u6bd4\u65b9\u8bf4)\u4e24\u4e2a256\u4f4d\u7684\u6574\u6570x\u548cy\u600e\u4e48\u529e\uff1f\n\u663e\u800c\u6613\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u6bcf\u4e2a256\u4f4d\u7684\u6570\u5b57\u5206\u6210\u56db\u4e2a64\u4f4d\u7684\u90e8\u5206(\u901a\u5e38\u79f0\u4e3a\u201c\u80a2\u4f53\u201d)\u3002\u5c06x\u7684\u6700\u9ad864\u4f4d\u653e\u5165\u5bc4\u5b58\u5668A\uff0c\u5c06\u63a5\u4e0b\u6765\u768464\u4f4d\u653e\u5165\u5bc4\u5b58\u5668B\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u5c06\u5bc4\u5b58\u5668C\u548cD\u653e\u5165\u3002\u5bf9\u4e8e\u5bc4\u5b58\u5668E\u3001F\u3001G\u3001H\uff0cy\u4e5f\u662f\u5982\u6b64\u3002\n\u4f46\u662f\u7b49\u7b49\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u6211\u4eec\u9519\u8bef\u7684\u7ed3\u679c\uff01\u5982\u679c\u6700\u540e\u4e09\u4e2a\u52a0\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6ea2\u51fa\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5c06\u989d\u5916\u76841\u201c\u8fdb\u4f4d\u201d\u5230\u4e0b\u4e00\u4e2a64\u4f4d\u5757\u3002\u54e6\uff0c\u563f\uff0c\u8fd9\u542c\u8d77\u6765\u719f\u6089\u5417\uff1f\n\u5e78\u8fd0\u7684\u662f\uff0cx86\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u6307\u4ee4\uff0c\u79f0\u4e3a\u201c\u5e26\u8fdb\u4f4d\u52a0\u6cd5\u201d\u3002ADC\u5c06\u81ea\u52a8\u68c0\u67e5\u524d\u4e00\u64cd\u4f5c\u662f\u5426\u6ea2\u51fa\uff0c\u5982\u679c\u9700\u8981\u5219\u52a01\u3002\u4ee5\u4e0b\u662f\u6b63\u786e\u4ee3\u7801\u7684\u5916\u89c2\uff1a\n\u5c06D\uff0cH ADC C\uff0cG\u76f8\u52a0\uff1b\u5305\u62ec\u6765\u81ea\u524d\u4e00\u8fd0\u7b97ADC B\uff0cF\u8fdb\u4f4d\uff1b\u5305\u62ec\u6765\u81ea\u524d\u4e00\u8fd0\u7b97ADC A\uff0cE\u7684\u8fdb\u4f4d\uff1b\u5305\u62ec\u6765\u81ea\u524d\u4e00\u8fd0\u7b97\u7684\u8fdb\u4f4d\u3002\n\u5c31\u50cf\u57fa\u657010\u4e2d\u7684\u957f\u52a0\u6cd5\u4e00\u6837\uff0c\u6211\u4eec\u4ece\u6700\u4e0d\u91cd\u8981\u7684\u201c\u6570\u5b57\u201d(D\u548cH)\u5f00\u59cb\uff0c\u4e00\u76f4\u5230\u6700\u91cd\u8981\u7684\u201c\u6570\u5b57\u201d(A\u548cE)\uff0c\u4e00\u8def\u4e0a\u6839\u636e\u9700\u8981\u643a\u5e261\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u56fa\u5b9a\u7684\u4ee3\u7801\u6bd4\u539f\u59cb\u7684(\u4e0d\u6b63\u786e\u7684)\u4ee3\u7801\u6162\u5f97\u591a\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\n\u7b2c\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u5728\u6700\u6d41\u884c\u7684x86CPU\u4e0a\uff0cADC\u7684\u6267\u884c\u901f\u5ea6\u53ea\u662f\u6bd4\u666e\u901a\u52a0\u6cd5\u6162\u3002\u56e0\u4e3aADC\u6709\u7b2c\u4e09\u4e2a\u8f93\u5165(\u8fdb\u4f4d\u6807\u5fd7)\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u6761\u6bd4ADD\u66f4\u590d\u6742\u7684\u6307\u4ee4\u3002\u800c\u4e14ADC\u7684\u4f7f\u7528\u9891\u7387\u4e5f\u4f4e\u4e8eADD\uff0c\u6240\u4ee5CPU\u8bbe\u8ba1\u8005\u5728\u4f18\u5316ADC\u6027\u80fd\u4e0a\u82b1\u8d39\u82af\u7247\u9762\u79ef\u7684\u52a8\u673a\u8f83\u5c0f\u3002\n\u7b2c\u4e8c\u4e2a\u539f\u56e0\u66f4\u6709\u8da3\uff0c\u8ba9\u6211\u4eec\u4ee5Intel Haswell\u5fae\u4f53\u7cfb\u7ed3\u6784\u4e3a\u4f8b\u3002\n\u5728Haswell CPU\u4e0a\uff0c\u4e00\u6761\u52a0\u6cd5\u6307\u4ee4\u9700\u89811\u4e2a\u5468\u671f\u6765\u6267\u884c\uff0c\u4f46\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0cHaswell CPU\u5728\u4e00\u4e2a\u5468\u671f\u5185\u6700\u591a\u53ef\u4ee5\u6267\u884c4\u6761\u52a0\u6cd5\u6307\u4ee4\uff0c\u8fd9\u662f\u600e\u4e48\u53ef\u80fd\u7684\u5462\uff1f\u5e76\u884c\u6027\u3002\u73b0\u4ee3\u5904\u7406\u5668\u9884\u6d4b\u5373\u5c06\u51fa\u73b0\u7684\u6307\u4ee4\uff0c\u5e76\u5c1d\u8bd5\u8c03\u5ea6\u5b83\u4eec\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u80fd\u7684\u65f6\u5019\u5e76\u884c\u6267\u884c\u3002\u7531\u4e8e\u54c8\u65af\u97e6\u5c14CPU\u67098\u4e2a\u6267\u884c\u7aef\u53e3\uff0c\u5176\u4e2d4\u4e2a\u7aef\u53e3\u53ef\u4ee5\u6267\u884c\u6574\u6570\u52a0\u6cd5\u6307\u4ee4\uff0c\u56e0\u6b64\u4e00\u4e2a\u54c8\u65af\u97e6\u5c14\u5904\u7406\u5668\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u6700\u591a4\u4e2a\u52a0\u6cd5\u6307\u4ee4\u3002\n\u5728\u6211\u4eec\u6700\u521d\u7684\u52a0\u6cd5\u4ee3\u7801\u4e2d\uff0c\u6240\u67094\u6761\u52a0\u6cd5\u6307\u4ee4\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u5904\u7406\u5668\u5f88\u5bb9\u6613\u5e76\u884c\u8fd0\u884c\u5b83\u4eec\u3002\u73b0\u5728\uff0c\u6709\u4e86ADC\uff0c\u6bcf\u6761\u6307\u4ee4\u90fd\u4f9d\u8d56\u4e8e\u524d\u4e00\u6761\u6307\u4ee4\u7684\u8f93\u51fa\uff0c\u5904\u7406\u5668\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u4e32\u884c\u5730\u9010\u6761\u6267\u884c\u6307\u4ee4\uff0c\u800c\u4e0d\u662f\u5e76\u884c\u6267\u884c\u3002\n\u5982\u679c\u6211\u4eec\u4f7f\u7528SIMD(SingleInstruction\uff0cMultiple Data\uff0c\u5355\u6307\u4ee4\u591a\u6570\u636e)\u6307\u4ee4\uff0c\u5219\u6027\u80fd\u5dee\u5f02\u4f1a\u66f4\u52a0\u663e\u8457\u3002\u4f8b\u5982\uff0c\u4e00\u6761vpaddq(\u5411\u91cf\u6253\u5305\u52a0\u6cd5\u56db\u5b57)\u6307\u4ee4\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u56db\u4e2a64\u4f4d\u52a0\u6cd5\u8fd0\u7b97\u3002\u518d\u52a0\u4e0aHaswell\u5904\u7406\u5668\u53ef\u4ee5\u6267\u884c\u4e24\u4e2avpaddqsper\u5468\u671f\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u4e3a\u4e86\u6b63\u786e\u5904\u7406\u8fdb\u4f4d\uff0c\u6211\u4eec\u91c7\u53d6\u4e86\u5f88\u5927\u7684\u6027\u80fd\u6539\u8fdb\u63aa\u65bd\u3002\n\u8ba9\u6211\u4eec\u5bf9\u6570\u5b57\u7cfb\u7edf\u7684\u5de5\u4f5c\u65b9\u5f0f\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6269\u5927\u53ef\u7528\u7684\u6570\u5b57\u8303\u56f4\u3002\u6211\u4eec\u5c06\u4f7f\u75280-9\u800c\u4e0d\u662f0-9\u3001A-Z\u548c*\uff1a\n(\u662f\u7684\uff0c\u6211\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u7b26\u624d\u80fd\u5f88\u597d\u5730\u8ba1\u7b97\u51fa\u6570\u5b57\u3002\u542c\u6211\u8bf4\u3002)\u3002\n\u867d\u7136\u6211\u4eec\u670937\u4f4d\u6570\u5b57\uff0c\u4f46\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u57fa\u657037\u3002\u6570\u5b57\u4ecd\u7136\u4f1a\u6709\u201c1\u201d\u3001\u201c10\u201d\u548c\u201c\u6570\u767e\u201d\u4f4d\uff0c\u5c31\u50cf\u6b63\u5e38\u7684\u57fa\u657010\u7cfb\u7edf\u4e00\u6837\u300229\u4ecd\u7136\u662f29\uff0c29+1\u4ecd\u7136\u662f30\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u78b0\u5de79\uff1a29+1\u4ee5\u4e0a\u7684\u6570\u5b57\u4e5f\u53ef\u4ee5\u5199\u62102A\u30011K\u751a\u81f3U\u3002\n\u6b64\u6280\u5de7\u4e0d\u9002\u7528\u4e8e\u6211\u4eec\u7684\u6570\u5b57\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u6570\u5b57(\u4f8b\u5982\uff0c9+W\u5c06\u9700\u8981\u8fdb\u4f4d)\uff0c\u4f46\u5982\u679c\u6211\u4eec\u8981\u6dfb\u52a0\u7684\u6570\u5b57\u662f\u89c4\u8303\u5316\u7684\uff0c\u5373\u5b83\u4eec\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f9\u6216\u66f4\u4f4e\uff0c\u5b83\u5c06\u6709\u6548\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u4efb\u4f55\u8fdb\u4f4d\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u8bb0\u6570\u6cd5\u4e2d\u6dfb\u52a0\u6700\u591a\u56db\u4e2a\u89c4\u8303\u5316\u7684\u6570\u5b57\uff1a\n999&lt\uff1b--\u53ef\u80fd\u7684\u6700\u5927\u5f52\u4e00\u53163\u4f4d\u6570\u6570\u5b57999 999+999-*&lt\uff1b--\u6709\u6548\u76843\u4f4d\u6570\u7ed3\u679c\uff0c\u65e0\u8fdb\u4f4d(\u8bf7\u8bb0\u4f4f*\u662f\u6700\u9ad8\u6570\u5b57)\u3002\n\u56e0\u6b64\uff0c\u901a\u8fc7\u5bf9\u6570\u5b57\u7cfb\u7edf\u8fdb\u884c\u4e00\u4e9b\u5de7\u5999\u7684\u8c03\u6574\uff0c\u6211\u4eec\u6b3a\u9a97\u4e86\u4e00\u4e9b\u8fdb\u4f4d\u3002\u5f53\u7136\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4ece37\u4f4d\u7684\u57fa\u657010\u7cfb\u7edf\u8f6c\u6362\u56de\u6b63\u5e38\u7684\u57fa\u657010\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89c4\u8303\u5316\u4e00\u4e2a\u6570\u5b57\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f7f\u5176\u6bcf\u4e2a\u6570\u5b57\u90fd\u57280\u52309\u4e4b\u95f4\uff1a\n\u00abDA8A1B=1409021\u6ce8\uff1aD=10+3A=10+0B=10+1\u3002\n\u6211\u4eec\u4ece\u53f3\u8fb9\u5f00\u59cb\u6807\u51c6\u5316\u4e00\u4e2a\u6570\u5b57\uff0c\u786e\u5b9a\u6bcf\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u4e2a\u201c\u5341\u201d\uff0c\u51cf\u53bb\u8fd9\u4e9b\u201c\u5341\u201d\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u8fdb\u4f4d\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002672415\u548c736606\u5b9e\u9645\u4e0a\u52a0\u8d77\u6765\u7b49\u4e8e1409021\uff0c\u6240\u4ee5\u7cfb\u7edf\u53ef\u4ee5\u5de5\u4f5c\uff01\n\u8fd9\u91cc\u7684\u5173\u952e\u89c2\u70b9\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u5c06\u8fdb\u4f4d\u4f20\u64ad\u5ef6\u8fdf\u5230\u7ed3\u675f\uff0c\u6211\u4eec\u4e0d\u80fd\u5b8c\u5168\u907f\u514d\u8fdb\u4f4d\u4f20\u64ad\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u907f\u514d\u5b83\uff0c\u5982\u679c\u6211\u4eec\u4fdd\u5b58\u4e2d\u95f4\u76f8\u52a0\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8fdb\u4f4d\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u8fc7\u5c06\u5b83\u4eec\u5168\u90e8\u4f20\u64ad\u51fa\u53bb\u3002\n\u8fdb\u4f4d\u4f20\u64ad\u662f\u6211\u4eec\u65e9\u5148\u9047\u5230\u7684\u6027\u80fd\u95ee\u9898\u7684\u6838\u5fc3\u3002\u6b63\u5982\u60a8\u73b0\u5728\u53ef\u80fd\u5df2\u7ecf\u9884\u6599\u5230\u7684\u90a3\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u6280\u672f\u6765\u5e2e\u52a9\u52a0\u901f\u5927\u6570\u8fd0\u7b97\uff01\n\u4ee5\u524d\uff0c\u7531\u4e8ex86_64\u5904\u7406\u5668\u5bf964\u4f4d\u6574\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u4e00\u4e2a256\u4f4d\u7684\u6570\u5b57\u5206\u6210\u56db\u4e2a64\u4f4d\u7684\u90e8\u5206\u3002\u7406\u89e3\u8fd9\u4e00\u70b9\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u8fd9\u4e9b\u90e8\u5206\u89c6\u4e3a\u57fa\u65702 64\u4e2d\u7684\u201c\u6570\u5b57\u201d\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6570\u5b57\u90fd\u6709\u4e00\u4e2a\u4ecb\u4e8e0\u548c2 64-1(\u5305\u62ec0\u548c2 64-1)\u4e4b\u95f4\u7684\u503c\u3002\n\u5728\u57fa\u657010\u4e2d\uff0c\u6211\u4eec\u4fdd\u6301\u57fa\u6570\u4e0d\u53d8\uff0c\u4f46\u4e3a\u4e86\u9632\u6b62\u8fdb\u4f4d\uff0c\u6211\u4eec\u6269\u5c55\u4e86\u5141\u8bb8\u7684\u4f4d\u6570\u8303\u56f4\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u80fd\u8fd9\u6837\u505a-64\u4f4d\u6574\u6570\u53ea\u6709\u8fd9\u4e48\u591a\u53ef\u80fd\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u4e0d\u80fd\u66f4\u6539\u786c\u4ef6\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f\u57fa\u6570\u7684\u5927\u5c0f\u6765\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002\n\u6211\u4eec\u4e0d\u628a256\u4f4d\u5206\u62104\u4e2a\u57fa\u65702 64\u4f4d\uff0c\u800c\u662f\u628a256\u4f4d\u5206\u62105\u4e2a\u57fa\u65702 51\u4f4d\u3002\u6bcf\u4e2a\u6570\u5b57\u7684\u8303\u56f4\u4ecd\u7136\u662f\u4ece0\u52302 64-1\uff0c\u4f46\u8f83\u5c0f\u7684\u57fa\u6570\u7ed9\u4e86\u6211\u4eec\u907f\u514d\u6570\u5b57\u9700\u8981\u8fdb\u4f4d\u6240\u9700\u7684\u7075\u6d3b\u6027\u3002\u8fd9\u79cd\u6280\u672f\u5728\u5bc6\u7801\u5b66\u6587\u732e\u4e2d\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u57fa\u65702 51\u8868\u793a\u6cd5\u201d\u3002\n\u4e0b\u9762\u662f\u6211\u4eec\u5c06256\u4f4d\u5206\u6210\u4e94\u4e2a\u80a2\u4f53(\u5373\u6570\u5b57)\u65f6\u7684\u60c5\u51b5\uff1a\n\u3002-]||[-51\u4f4d-||[-|\u3002\n\u6bcf\u4e2a\u5206\u652f\u90fd\u6709\u539f\u59cb256\u4f4d\u6570\u5b57\u768451\u4f4d(\u621652\u4f4d)\uff0c\u5269\u4e0b\u768412\u4f4d\u621613\u4f4d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u9884\u9632\u8fdb\u4f4d\u6240\u9700\u7684\u989d\u5916\u201c\u6570\u5b57\u201d\uff0c\u6709\u6548\u5730\uff0c\u6bcf\u4e2a\u5206\u652f\u7684\u6700\u9ad8\u4f4d\u88ab\u4fdd\u7559\u4f5c\u4e3a\u8ba1\u7b97\u671f\u95f4\u53d1\u751f\u7684\u4efb\u4f55\u8fdb\u4f4d\u7684\u5b58\u50a8\u3002\n\u5728\u6211\u4eec\u7684\u4ee510\u4e3a\u57fa\u6570\u7684\u793a\u4f8b\u4e2d\uff0c37\u4f4d\u5141\u8bb8\u6211\u4eec\u5728\u9700\u8981\u4f20\u64ad\u8fdb\u4f4d\u4e4b\u524d\u5c06\u6700\u591a4\u4e2a\u89c4\u683c\u5316\u6570\u5b57\u76f8\u52a0\uff1b\u5728\u57fa\u65702 51\u8868\u793a\u4e2d\uff0c2 64\u4f4d\u5141\u8bb8\u6211\u4eec\u5728\u9700\u8981\u62c5\u5fc3\u9ad813\u4f4d\u6ea2\u51fa\u4e4b\u524d\u5c06\u6700\u591a2 13\u4e2a\u89c4\u683c\u5316\u6570\u5b57\u76f8\u52a0\u3002\n\u65c1\u767d\uff1a\u4e3a\u4ec0\u4e48\u662f13\u4f4d\u800c\u4e0d\u662f12\u4f4d\uff1f\u51fa\u4e8e\u6211\u4eec\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u5ffd\u7565\u6700\u6709\u6548\u5206\u652f\u4e2d\u7684\u8fdb\u4f4d\uff0c\u5141\u8bb8\u6570\u5b57\u5728\u6ea2\u51fa\u8d85\u8fc72256-1\u65f6\u6362\u884c(\u5c31\u50cf\u5728C\u4e2d\u4f7f\u7528\u6b63\u5e38\u5927\u5c0f\u6574\u6570\u7c7b\u578b\u7684\u65e0\u7b26\u53f7\u52a0\u6cd5\u4e00\u6837)\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c0652\u4f4d\u5206\u914d\u7ed9\u6700\u6709\u6548\u5206\u652f\uff0c\u800c\u5ffd\u7565\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5b83\u5c06\u5728\u5176\u4ed6\u5206\u652f\u4e4b\u524d\u7528\u5b8c\u8fdb\u4f4d\u7a7a\u95f4\u3002\n\u5047\u8bbex\u5728A\uff0cB\uff0cC\uff0cD\uff0cE\u4e0a\u5206\u88c2(A=\u6700\u9ad8\u6709\u6548)\uff1b\u5047\u8bbey\u5728F\uff0cG\uff0cH\uff0cI\uff0cJ(F=\u6700\u9ad8\u6709\u6548)\u4e0a\u5206\u88c2\uff0c\u52a0A\uff0cF\u52a0B\uff0cG\u52a0C\uff0cH\u52a0D\uff0cI\u52a0E\uff0cJ\uff1b\u5e73\u884c\u597d\uff0c\u8036\uff01\n\u5c3d\u7ba1\u6211\u4eec\u73b0\u5728\u9700\u89815\u4e2a\u52a0\u6cd5\u800c\u4e0d\u662f4\u4e2a\u52a0\u6cd5\uff0c\u4f46\u7531\u4e8e\u7f3a\u5c11\u8fdb\u4f4d\uff0c\u52a0\u6cd5\u901f\u5ea6\u8981\u5feb\u5f97\u591a\u3002\n\u3002\u5c06D\u4e2d\u7684\u8fdb\u4f4d\u6e05\u96f6T\uff0cC\uff1b\u5c06C\u590d\u5236\u5230T shr T\uff0c51\uff1b\u79fb\u51fa\u9664\u8fdb\u4f4dAdd B\uff0cT\u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\uff1b\u5c06C\u4e2d\u7684\u8fdb\u4f4d\u6dfb\u52a0\u5230B\u548cC\uff0c0x0007FFFFFFFFFFFFF\uff1b\u5c06C mov T\uff0cB\u4e2d\u7684\u8fdb\u4f4d\u6e05\u96f6\uff1b\u5c06B\u590d\u5236\u5230T shr T\uff0c51\uff1b\u79fb\u51fa\u9664\u8fdb\u4f4dAdd A\uff0cT\u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\uff1b\u5c06B\u4e2d\u7684\u8fdb\u4f4d\u6dfb\u52a0\u5230A\u548cB\uff0c0x0007FFFFFFFFFFFFF\uff1b\u5c06\u8fdb\u4f4d\u8f93\u5165\u6e05\u96f6\u3002\n\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u4e00\u4e9b\u5feb\u901f\u800c\u80ae\u810f\u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\uff0c\u5728\u6211\u7684Haswell CPU\u4e0a\uff0c\u57fa\u65702-51\u52a0\u6cd5\u7684\u6027\u80fd\u5df2\u7ecf\u8d85\u8fc7\u57fa\u65702-64\u52a0\u6cd5\uff0c\u53ea\u9700\u89813\u6b21\u52a0\u6cd5--\u8fd9\u8fd8\u5305\u62ec\u5728\u57fa\u65702-51\u8868\u793a\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u6210\u672c\u3002\u968f\u7740\u52a0\u6cd5\u6570\u91cf\u7684\u589e\u52a0\uff0c\u6027\u80fd\u8282\u7ea6\u4f1a\u76f8\u5e94\u5730\u589e\u52a0\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u7814\u7a76\u4e86\u52a0\u6cd5\uff0c\u5c06\u8fd9\u4e00\u6280\u672f\u6269\u5c55\u5230\u51cf\u6cd5\u662f\u5f88\u7b80\u5355\u7684\uff0c\u52a0\u6cd5\u548c\u51cf\u6cd5\u7684\u4e3b\u8981\u533a\u522b\u662f\u51cf\u6cd5\u6709\u8d1f\u8fdb\u4f4d\u3002\n\u4ee5\u524d\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u80a2\u4f53(\u53ca\u5176\u8fdb\u4f4d)\u89c6\u4e3a\u65e0\u7b26\u53f7\u8fdb\u4f4d\uff0c\u4e3a\u4e86\u652f\u6301\u51cf\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u80a2\u4f53\u89c6\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5141\u8bb8\u5355\u4e2a\u6570\u5b57\u4e3a\u6b63\u6216\u8d1f\uff0c\u8fd9\u6837\u6bcf\u6761\u80a2\u4f53\u5c31\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a\u6b63\u8fdb\u4f4d\u6216\u8d1f\u8fdb\u4f4d\u3002\n\u8fd9\u6837\u505a\u7684\u4e00\u4e2a\u526f\u4f5c\u7528\u662f\uff0c\u6bcf\u6761\u80a2\u4f53\u7684\u6700\u9ad8\u6709\u6548\u4f4d\u73b0\u5728\u88ab\u4fdd\u7559\u4e3a\u7b26\u53f7\u4f4d\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728\u5f52\u4e00\u5316\u4e4b\u95f4\u6267\u884c\u7684\u64cd\u4f5c\u6b21\u6570\u4ece213\u51cf\u5c11\u5230212\uff0c\u8fd9\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u4e00\u4e2a\u5c0f\u727a\u7272\u3002\n\u6211\u89c9\u5f97\u8fd9\u9879\u6280\u672f\u76f8\u5f53\u5438\u5f15\u4eba\uff0c\u56e0\u4e3a\u5b83\u975e\u5e38\u8fdd\u53cd\u76f4\u89c9\uff1a\u901a\u8fc7\u8de8\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u548c\u4f7f\u7528\u66f4\u591a\u7684\u64cd\u4f5c\u5206\u5e03\u6570\u636e\uff0c\u6027\u80fd\u5b9e\u9645\u4e0a\u5f97\u5230\u4e86\u63d0\u9ad8\u3002\u6211\u5e0c\u671b\u60a8\u548c\u6211\u4e00\u6837\u89c9\u5f97\u5b83\u5f88\u6709\u8da3\uff01", "note_en": "Starting from the \u201cones\u201d position, we add 6 + 6 = 12, write down a 2 and carry a 1.We proceed to the left, one position at a time, until there are no more digitsto add.\n When implementing addition for large integers (e.g. 2 64 and above), it\u2019s common to writecode that looks quite similar to this algorithm.Interestingly, there\u2019s a straightforward trick that can speed up thisprocess enormously on modern CPUs.\n But first, a question: why do we start long addition with the \u201cones\u201d?Why not start on the left?\n The answer, of course, is the carries.We can\u2019t figure out for sure what a given digit of the answer will beuntil we\u2019ve completed all of the additions to the right of that digit.\n  6 + 3 = 9. So the first digit is 9. 8 + 4 = 12. OK, the second digit is 2\u2026 but carry a 1, so the first digitwas actually 9 + 1 = 10\u2026 now carry back  that 1\u2026\n For mental math, this isn\u2019t too bad (and some people actually prefer itwhen working with small enough numbers).As an algorithm, however, this approach has some fundamental limitations thatbecome clear when working with larger numbers.Most importantly, because the later parts of the computation rely oninformation from the earlier parts of the computation,it\u2019s hard to split up and parallelize the work.\n  Computers don\u2019t work in base 10, of course.Instead, modern desktop and server CPUs expose an interface for operating on(for the most part) 64-bit integers.\n ; Add the 64-bit value in B to the 64-bit value in A add  A ,  B ; Note: I&#39;ll use letters instead of real register names to keep things simple\n As long as our numbers fit within a single 64-bit value, things are easy.But what if we want to add, say, two 256-bit integers,  x and  y?\n The obvious solution would be to break up each 256-bit number into four 64-bitpieces (commonly referred to as \u201climbs\u201d).Place the highest 64 bits of  x into register A,the next 64 bits into register B,and so on for registers C and D.Do the same for  y with registers E, F, G, H.\n   But wait, this might give us the wrong result!If one of the last three additions overflow,then we need to \u201ccarry\u201d that extra 1 up to the next 64-bit piece.Oh hey, does that sound familiar?\n Fortunately, x86 has a dedicated instruction for this called \u201cadd with carry\u201d. adc will automatically check if the previous operation overflowed, adding 1if needed.Here\u2019s how the proper code would look:\n add  D ,  H adc  C ,  G  ; include carry from previous op adc  B ,  F  ; include carry from previous op adc  A ,  E  ; include carry from previous op\n Just like with long addition in base 10,we start with the least-significant \u201cdigits\u201d (D and H)and work our way up to the most-significant \u201cdigits\u201d (A and E),carrying 1s as needed along the way.\n  Interestingly, our fixed code is slower than the original (incorrect) code.Much slower. Why is this?\n The first reason is that  adc is just slower to execute than a normal  add onmost popular x86 CPUs.Since  adc has a third input (the carry flag),it\u2019s a more complex instruction than  add.It\u2019s also used less often than  add,so there is less incentive for CPU designers to spend chip area on optimizing adc performance.\n The second reason is more interesting.Let\u2019s look at the Intel Haswell microarchitecture as an example.\n On a Haswell CPU, a single  add instruction takes 1 cycle to execute.However, in ideal conditions, Haswell CPUs can execute up to 4  addinstructions in a single cycle.How is this possible? Parallelism.Modern processors look ahead at what instructions are coming up and try toschedule them so that they can be executed in parallel whenever possible.Since Haswell CPUs have 8 execution ports, and 4 of those ports can execute aninteger  add instruction, a Haswell processor can execute up to 4  addinstructions at once.\n In our original adding code, all 4  add instructions were independent of oneanother, so it was straightforward for the processor to run them in parallel. Now, with  adc, each instruction depends on an output from the previousinstruction.The processor has no choice but to execute the instructions serially, one afterthe other, instead of in parallel.\n The performance difference is even more dramatic if we use SIMD (SingleInstruction, Multiple Data) instructions.For example, a single  vpaddq (Vector Packed Add Quadword) instruction doesfour 64-bit adds simultaneously.Combine that with the fact that Haswell processors can execute two  vpaddqsper cycle, and you can see that we\u2019re taking a serious performance hitin order to handle carries properly.\n   Let\u2019s make some changes to how the number system works.First, we\u2019ll extend the range of digits available.Instead of 0-9, we will use 0-9, A-Z, and *:\n  (Yeah, I needed an extra character to make the numbers work out nicely. Bearwith me.)\n Although we have 37 digits, we are  not using base 37.Numbers will still have \u201cones\u201d, \u201ctens\u201d, and \u201chundreds\u201d positions,just like a normal base 10 system.29 still means 29, and 29 + 1 is still 30.The only difference is thatdigits happen to be capable of counting past 9:29 + 1 could also be written as 2A, 1K, or even U.\n   This trick won\u2019t work for all numbers in our number system (e.g. 9 + W willneed a carry),but it will work if the numbers we are adding are normalized, i.e. all of their digits are 9 or below.In fact, we can add up to four normalized numbers in this notation before anycarries are possible:\n 999 &lt;-- largest possible normalized 3-digit number 999 999+ 999----- *** &lt;-- valid 3-digit result, no carries (recall that * is the highest digit)\n So, with some clever tweaks to the number system, we\u2019ve cheated our way out ofsome carries.Of course, at some point, we will need to convert from the37-digit base 10 system back to normal base 10.We can do that by  normalizing a number such that each of its digits isbetween 0 and 9:\n \u00b9\u00b9 \u00b9 \u00b9 DA8A1B= 1409021note:D = 10 + 3A = 10 + 0B = 10 + 1\n We normalize a number starting at the right,determining how many \u201ctens\u201d are in each digit,subtracting those \u201ctens\u201d,and carrying them to the next digit.672415 and 736606 do in fact sum to 1409021, so the system works!\n The key insight here is that we can use this technique to delay carrypropagation until the end.We can\u2019t avoid carry propagation altogether, but we can avoid it temporarily.If we save up the carries that occur during the intermediate additions,we can propagate them all in one go at the end.\n  Carry propagation was at the heart of the performance problems we encountered earlier.As you\u2019ve probably anticipated by now, we can use this technique to help speedup big number arithmetic!\n Previously, we split a 256-bit number into four 64-bit pieces,since x86_64 processors operate on 64-bit integers.One way to understand this is to view the pieces as \u201cdigits\u201din base 2 64, since each digit has a valuebetween 0 and 2 64 - 1 (inclusive).\n In base 10, we kept the same base, but extended the range of digits that wereallowed in order to prevent carries from occurring.Unfortunately, we can\u2019t do that here \u2013 a 64-bit integer only has so manypossible values, and we can\u2019t change the hardware.Instead, we can get the same effect by reducing the size of the base.\n Instead of splitting 256 bits into four base 2 64 digits,we\u2019ll split 256 bits into five base 2 51 digits.Each digit can still range from 0 to 2 64 - 1,but the smaller base gives us the flexibility needed to prevent digits fromneeding a carry.This technique is generally referred to as \u201cradix 2 51representation\u201d in the cryptography literature.\n Here\u2019s how it will look when we split 256 bits across five limbs (i.e.digits):\n | [--------------------- 52 bits --------------------]|| [-------------------- 51 bits --------------------]|| [-------------------- 51 bits --------------------]|| [-------------------- 51 bits --------------------]|| [-------------------- 51 bits --------------------]|\n Each limb has 51 (or 52) bits of the original 256-bit number.The remaining 12 or 13 bits give us the extra \u201cdigits\u201d we need for preventingcarries.Effectively, the highest bits of each limb are reserved as storage for anycarries that occur during the computation.\n In our base 10 example,37 digits allowed us to add up to four normalized numbers before needing topropagate carries.In radix 2 51 representation,2 64 digits allow us to add up to 2 13 normalizednumbers before we need to worry about the high 13 bits overflowing.\n Aside: Why 13 bits instead of 12?For our purposes, we\u2019re going to ignore the carries in the most significant limb,allowing numbers to wrap when they overflow past 2 256 - 1 (just likehow unsigned addition works in C with normal size integer types).As a result, we can assign 52 bits to the most significant limb and ignore thefact that it will run out of room for carries before the other limbs do.\n  ; Assume x is split across A, B, C, D, E (A = most significant) ; and assume y is split across F, G, H, I, J (F = most significant) add  A ,  F add  B ,  G add  C ,  H add  D ,  I add  E ,  J ; Parallel goodness, yay!\n Despite the fact that we now need 5  adds instead of 4,addition is much faster due to the lack of carries.\n  ; Assume x is split across A, B, C, D, E (A = most significant) ; Register T is for temporary storage mov  T ,  E  ; Copy E into T shr  T ,  51  ; Shift out everything except the carries add  D ,  T  ; Add carries from E into D and  E ,  0x0007FFFFFFFFFFFF  ; Zero out the carries in E mov  T ,  D  ; Copy D into T shr  T ,  51  ; Shift out everything except the carries add  C ,  T  ; Add carries from D into C and  D ,  0x0007FFFFFFFFFFFF  ; Zero the carries in D mov  T ,  C  ; Copy C into T shr  T ,  51  ; Shift out everything except the carries add  B ,  T  ; Add carries from C into B and  C ,  0x0007FFFFFFFFFFFF  ; Zero the carries in C mov  T ,  B  ; Copy B into T shr  T ,  51  ; Shift out everything except the carries add  A ,  T  ; Add carries from B into A and  B ,  0x0007FFFFFFFFFFFF  ; Zero the carries in B and  A ,  0x000FFFFFFFFFFFFF  ; Zero the carries in A\n Amazingly, some quick and dirty benchmarks show that radix 2 51 addition already outperforms radix 2 64addition on my Haswell CPU for as few as three additions \u2013 and that\u2019sincluding the cost of converting to and fromradix 2 51 representation.The performance savings scale up appropriately as the number of additionsincreases.\n  So far we\u2019ve only looked at addition.It\u2019s straightforward though to extend this technique to subtraction.The main difference between addition and subtraction is that subtraction has negative carries.\n Previously, we treated all limbs (and their carries) as unsignedintegers.To support subtraction, we can treat limbs as  signed integers,allowing individual digits to be either positive or negative.With this change, each limb can store either a positive or negative carry.\n A side effect of this is that the most significant bit of each limb is nowreserved as a sign bit.This lowers the number of operations we can perform between normalizations from2 13 to 2 12 \u2013 a small sacrifice in most cases.\n I find this technique rather fascinating because of how counterintuitive it is:by spreading data across more registers and using more operations, performanceis actually improved.I hope you found it as interesting as I did!", "posttime": "2020-05-29 23:41:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u6570,radix,\u8fdb\u4f4d", "title": "\u57fa\u65702^51\u7684\u628a\u620f", "title_en": "The radix 2^51 trick", "transed": 1, "url": "https://www.chosenplaintext.ca/articles/radix-2-51-trick.html", "via": "", "real_tags": ["\u57fa\u6570", "radix", "\u8fdb\u4f4d"]}, {"category": "", "categoryclass": "", "imagename": "7c1d625302748dbc16b708502eba8b0e.png", "infoid": 1004264, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u4f7f\u7528Gmail\u6216\u9891\u7e41\u53d1\u9001\u90ae\u4ef6\u5217\u8868\u7535\u5b50\u90ae\u4ef6\uff0c\u60a8\u53ef\u80fd\u77e5\u9053Gmail\u6709\u4e00\u4e2a\u5185\u8054\u7684\u81ea\u52a8\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u3002\u5982\u679c\u4f60\u70b9\u51fb\u8fd9\u4e2a\u6309\u94ae\uff0cGmail\u5c31\u4f1a\u795e\u5947\u5730\u5c06\u4f60\u4ece\u8be5\u90ae\u4ef6\u5217\u8868\u4e2d\u53d6\u6d88\u8ba2\u9605\u3002\n\u6211\u4ee5\u524d\u5728\u63a8\u7279\u4e0a\u8c08\u8fc7\u8fd9\u4ef6\u4e8b\uff0c\u4f46\u5c3d\u7ba1\u8fd9\u4f3c\u4e4e\u6709\u8fdd\u76f4\u89c9\uff0c\u4f46\u5141\u8bb8\u4eba\u4eec\u8f7b\u677e\u53d6\u6d88\u8ba2\u9605\u662f\u4fdd\u6301\u5065\u5eb7\u90ae\u4ef6\u5217\u8868\u7684\u6700\u4f73\u65b9\u5f0f\u3002\n\u6240\u4ee5\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u786e\u5207\u5730\u89e3\u91ca\u4e00\u4e0bGmail\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5982\u679c\u4f60\u662f\u90ae\u4ef6\u5217\u8868\u7684\u6240\u6709\u8005\uff0c\u5982\u4f55\u786e\u4fdd\u5b83\u603b\u662f\u51fa\u73b0\u5728\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\u3002\n\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u63d0\u4f9b\u9000\u8ba2\u94fe\u63a5\uff0c\u5f53\u4f7f\u7528\u5f97\u5f53\u65f6\uff0c\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba9\u6bcf\u79cd\u7c7b\u578b\u7684\u5ba2\u6237\u7aef\u8f7b\u677e\u9000\u8ba2\u6765\u76f8\u4e92\u8865\u5145\u3002\u4ece\u6700\u660e\u663e\u7684(\u901a\u5e38\u4e5f\u662f\u4ee4\u4eba\u6c14\u6124\u7684)..\u3002\n\u4f60\u968f\u5904\u53ef\u89c1\u7684\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u5728\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u4e2d\u76f4\u63a5\u63d0\u4f9b\u4e00\u4e2a\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\uff0c\u901a\u5e38\u9690\u85cf\u5728\u7535\u5b50\u90ae\u4ef6\u7684\u5e95\u90e8\u3002\nGmail\u4f3c\u4e4e\u4f1a\u5904\u7406\u5176\u4e2d\u7684\u4e00\u4e9b\u94fe\u63a5\uff0c\u7279\u522b\u662f\u5f53\u94fe\u63a5\u5305\u542b\u201c\u53d6\u6d88\u8ba2\u9605\u201d\u4e00\u8bcd\u65f6\u3002\u5728\u4f7f\u7528\u4e0a\u8ff0\u60c5\u51b5\u5355\u51fbGmail\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u65f6\uff0c\u5c06\u663e\u793a\u4ee5\u4e0b\u63d0\u793a\uff1a\n\u4f46\u6211\u53d1\u73b0\uff0c\u5982\u679c\u94fe\u63a5\u5305\u542b\u4e0d\u5bfb\u5e38\u7684\u63aa\u8f9e\u6216\u683c\u5f0f\uff0c\u90a3\u4e48Gmail\u5c31\u65e0\u6cd5\u6b63\u786e\u627e\u5230\u5b83\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u89e3\u91ca\u662f\uff0c\u4ed6\u4eec\u6b63\u5728\u4f7f\u7528\u4e00\u7ec4\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u89e3\u6790\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9-\u8fd9\u662f\u4e00\u79cd\u76f8\u5f53\u8106\u5f31\u7684\u65b9\u6cd5\u3002\n\u5728\u6211\u4eec\u5c1d\u8bd5\u7684\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u5b9e\u9645\u8bbf\u95ee\u8be5\u94fe\u63a5\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9650\u5236\u4e86\u5b83\u7684\u5b9e\u7528\u6027\u3002\u8fd9\u6bd4\u627e\u5230\u5e76\u70b9\u51fb\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u5c0f\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u8981\u7b80\u5355\u4e0d\u4e86\u591a\u5c11\u3002\n(\u8fd9\u4e00\u70b9\u73b0\u5728\u53ef\u80fd\u5df2\u7ecf\u5f88\u660e\u663e\u4e86--\u6211\u786e\u5b9e\u5bf9\u9690\u85cf\u5728\u7535\u5b50\u90ae\u4ef6\u9875\u811a\u5e95\u90e8\u7684\u5fae\u5c0f\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u6709\u4e00\u4e9b\u5f3a\u70c8\u7684\u611f\u89c9\uff0c\u4f46\u8fd9\u662f\u6539\u5929\u518d\u8ba8\u8bba\u7684\u8bdd\u9898\u3002)\u3002\n\u66f4\u53ef\u9884\u6d4b\u7684\u65b9\u6cd5\u662f\u4f7f\u7528List-Unscribe\u62a5\u5934(RFC 2369)\u3002\u6807\u9898\u9644\u52a0\u5728\u7535\u5b50\u90ae\u4ef6\u7684\u5143\u6570\u636e\u4e0a\uff0c\u65e8\u5728\u63d0\u4f9b\u4ee5\u673a\u5668\u53ef\u8bfb\u683c\u5f0f\u53d6\u6d88\u8ba2\u9605\u7684\u65b9\u6cd5\u3002\n\u6807\u5934\u53ef\u4ee5\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u683c\u5f0f\uff0c\u4f46\u6700\u5e38\u89c1\u7684\u662f\u63d0\u4f9b\u4e00\u4e2amailto\u548cURL\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u50cfSendGrid\u6216Mailchinp\u8fd9\u6837\u7684\u90ae\u4ef6\u5217\u8868\u63d0\u4f9b\u5546\uff0c\u90a3\u4e48\u4ed6\u4eec\u5e94\u8be5\u5df2\u7ecf\u4e3a\u60a8\u5c06\u8fd9\u4e9b\u6807\u9898\u63d2\u5165\u5230\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0c\u56e0\u6b64\u60a8\u4e0d\u9700\u8981\u4e3a\u6b64\u505a\u4efb\u4f55\u989d\u5916\u7684\u64cd\u4f5c\u3002\n\u6d4b\u8bd5\u8868\u660e\uff0cGmail\u4f3c\u4e4e\u4f1a\u504f\u7231mailto\u65b9\u6cd5\uff0c\u5411\u63d0\u4f9b\u7684\u5730\u5740\u53d1\u9001\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u60a8\u7684\u5df2\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u6587\u4ef6\u5939\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u8be5\u6587\u4ef6\u5939\u5c06\u5305\u542b\u5982\u4e0b\u9879\u76ee\uff1b\n\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u6bd5\u7adf\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u624d\u662fGmail\u7684\u5f3a\u9879\u3002\u7136\u800c\uff0c\u6211\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u7684\u6709\u6548\u6027\u6709\u4e9b\u6000\u7591\uff0c\u6216\u8005\u53ea\u662f\u89c9\u5f97\u592a\u5bb9\u6613\u4e86\u3002\n\u636e\u6211\u6240\u77e5\uff0cGmail\u5bf9\u5f85\u5217\u8868\u4e2d\u7684URL-\u53d6\u6d88\u8ba2\u9605\u6807\u9898\u4e0e\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u4e2d\u7684unsubscrbe\u94fe\u63a5\u76f8\u540c\uff0c\u8fd9\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u662f\u76f8\u540c\u7684URL\u3002\n\u5217\u8868-\u53d6\u6d88\u8ba2\u9605\u6216\u5185\u5bb9\u94fe\u63a5\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u628a\u4f60\u5e26\u5230\u4e00\u4e2a\u9700\u8981\u989d\u5916\u6b65\u9aa4\u7684\u9875\u9762\uff0c\u6bd4\u5982\u767b\u5f55\u6216\u8f93\u5165\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u4e0d\u7ba1\u4f60\u5bf9\u6b64\u6709\u4ec0\u4e48\u611f\u89c9(\u6211\u975e\u5e38\u4e0d\u559c\u6b22\u5b83)\uff0c\u5b83\u8ba9\u4e8b\u60c5\u53d8\u5f97\u975e\u5e38\u56f0\u96be\uff0c\u5c31\u50cfGmail\u8bd5\u56fe\u505a\u7684\u90a3\u6837\uff0c\u8ba9\u53d6\u6d88\u8ba2\u9605\u53d8\u5f97\u975e\u5e38\u56f0\u96be\u3002\n\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u8f83\u65b0\u53d6\u6d88\u8ba2\u9605\u6807\u51c6\u62a5\u5934\uff0c\u79f0\u4e3aList-Unscribe-Post\uff0c\u5b83\u6307\u5b9a\u4e86\u5355\u8bf7\u6c42\u53d6\u6d88\u8ba2\u9605\u529f\u80fd(RFC 8058)\u3002\u5982\u679c\u7535\u5b50\u90ae\u4ef6\u5305\u542b\u6b64\u6807\u9898\uff0c\u5219\u53ea\u9700\u5411URL\u53d1\u9001\u4e00\u4e2aPOST\u8bf7\u6c42\u5373\u53ef\u6fc0\u6d3b\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u6bd4LIST-\u53d6\u6d88\u8ba2\u9605\u5728\u91ce\u5916\u770b\u5230\u7684\u8981\u5c11\u5f97\u591a\u3002\u6211\u5b9e\u9645\u4e0a\u53ea\u80fd\u5728\u6211\u7684\u6536\u4ef6\u7bb1\u91cc\u627e\u5230\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50(\u5411Substack\u558a\u51fa\u6765\uff0c\u5e72\u5f97\u597d\u7684\u670b\u53cb\u4eec)\u3002\n\u636e\u6211\u6240\u77e5\uff0cGmail\u5bf9\u8fd9\u4e2a\u6807\u9898\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u8986\u76d6\u6240\u6709\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u90a3\u4e48\u5728\u4f60\u7684\u90ae\u4ef6\u5217\u8868\u4e2d\u4f7f\u7528\u5b83\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\u6211\u4eec\u7684\u9000\u8ba2\u9009\u9879\u5230\u6b64\u7ed3\u675f\u3002\u5982\u679c\u4f60\u6b63\u5728\u8fd0\u884c\u4e00\u4e2a\u90ae\u4ef6\u5217\u8868\uff0c\u5e76\u4e14\u60f3\u8ba9\u4f60\u7684\u6536\u4ef6\u4eba\u5f88\u5bb9\u6613\u53d6\u6d88\u8ba2\u9605(\u4f60\u5e94\u8be5)\uff0c\u90a3\u4e48\u5b9e\u65bd\u8fd9\u4e9b\u4e8b\u60c5\u5c06\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8865\u5145\uff0c\u5e76\u4ece\u957f\u8fdc\u6765\u770b\u5e2e\u52a9\u4f60\u4fdd\u6301\u4e00\u4e2a\u5065\u5eb7\u7684\u5217\u8868\uff1a\n\u4f7f\u7528\u7b80\u5355\u7684\u8bed\u8a00\uff0c\u4ee5\u6e05\u6670\u6613\u8bfb\u7684\u65b9\u5f0f\u5728\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u4e2d\u5305\u542b\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u3002\u5728\u94fe\u63a5\u4e2d\u4f7f\u7528\u201c\u53d6\u6d88\u8ba2\u9605\u201d\u4e00\u8bcd\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\u3002\n\u5305\u62ec\u5177\u6709mailto\u548cURL\u5217\u8868-\u53d6\u6d88\u8ba2\u9605\u62a5\u5934\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u90ae\u4ef6\u670d\u52a1\uff0c\u8bf7\u786e\u4fdd\u5b83\u4eec\u4f1a\u81ea\u52a8\u5305\u542b\u6b64\u5185\u5bb9\u3002\u4f60\u53ef\u4ee5\u68c0\u67e5\u7535\u5b50\u90ae\u4ef6\u7684\u6765\u6e90\u6765\u505a\u5230\u8fd9\u4e00\u70b9-\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u6307\u5357\u3002\n\u6211\u53d1\u73b0\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0cGmail\u4f3c\u4e4e\u4e0d\u4f1a\u663e\u793a\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\uff0c\u76f4\u5230\u4f60\u6536\u5230\u51e0\u5c01\u6765\u81ea\u7279\u5b9a\u53d1\u4ef6\u4eba\u7684\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u4f46\u4f3c\u4e4e\u8868\u73b0\u5f97\u76f8\u5f53\u4e0d\u53ef\u9884\u6d4b\u3002\n\u53e6\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u7535\u5b50\u90ae\u4ef6\uff0c\u5b83\u53ea\u662f\u76f4\u63a5\u6ca1\u6709\u663e\u793a\u6309\u94ae\uff0c\u6211\u627e\u4e0d\u5230\u4e00\u4e2a\u89e3\u91ca\u3002\u4e5f\u8bb8\u5728\u5e55\u540e\u6709\u4e00\u4e9b\u989d\u5916\u7684\u6b65\u9aa4\u5728\u8fdb\u884c\uff0c\u6216\u8005\u6211\u9057\u6f0f\u4e86\u4ec0\u4e48\u3002\n\u5982\u679c\u60a8\u77e5\u9053\u8fd9\u4e24\u4e2a\u672a\u77e5\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u8bf7\u5728HN\u5e16\u5b50\u4e0a\u544a\u8bc9\u6211\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u4fe1\u4efb\u60a8\uff1a)\u3002\n\u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u4e00\u79cd\u66f4\u6709\u6548\u7684\u6279\u91cf\u53d6\u6d88\u8ba2\u9605\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u6211\u8fd0\u884c\u4e00\u9879\u540d\u4e3a\u201c\u8ba9\u6211\u4e00\u4e2a\u4eba\u5446\u7740\u201d\u7684\u670d\u52a1\u3002\u6709\u4e86\u5b83\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u5730\u65b9\u770b\u5230\u6240\u6709\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u53ea\u9700\u70b9\u51fb\u4e00\u4e0b\u5c31\u53ef\u4ee5\u53d6\u6d88\u8ba2\u9605\u3002\n\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u5217\u51fa\u7684\u6240\u6709\u65b9\u6cd5\u4ee5\u53ca\u66f4\u591a\u7684\u65b9\u6cd5\u6765\u53d6\u6d88\u8ba2\u9605\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6bd4Gmail\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u66f4\u6709\u6548\u3002)\u3002\n\u514d\u8d39\u8bd5\u7528\u4e00\u4e0b", "note_en": "If you use Gmail or frequently send mailing list emails you probably know that Gmail has an inline automatic unsubscribe button. If you hit this button then Gmail magically unsubscribes you from that mailing list.\n  I&#39;ve spoken about this before  on Twitter but although it seems counterintuative, allowing people to easily unsubscribe is  the best  way to maintain a healthy mailing list.\n So in this post I want to disect exactly how the Gmail unsubscribe button works, and if you&#39;re a mailing-list owner, how to make sure it  always shows up for your emails.\n  There are a few ways to provide unsubscribe links, when used properly they compliment each other by letting every type of client unsubscribe easily. Starting with the most obvious (and often infuriating)...\n  The most common method you&#39;ll see everywhere is to provide an unsubscribe link directly within the email content, usually hidden away at the bottom of the email.\n  Gmail seems to handle some of these links, specifically when the link contains the word &#34;Unsubscribe&#34;. \u00a0Clicking the Gmail unsubscribe link using the case above shows the following prompt:\n  But I found if the link contains unusual wording or formatting then Gmail doesn&#39;t find it correctly. A likely explanation is they&#39;re using a set of regular expressions to parse the email content - quite a brittle approach.\n You&#39;re also still required to actually visit the link in most cases we tried, which limits it&#39;s usefulness somewhat. It&#39;s barely easier than finding and clicking the small unsubscribe link in the email.\n (It&#39;s probably obvious by now - I do have some strong feelings about tiny unsubscribe links skulking right at the bottom of email footers, but that&#39;s a topic for another day.)\n   A more predictable approach is to use the  List-Unsubscribe header ( RFC 2369). Attached to the metadata of an email, the header is designed to provide the method to unsubscribe in a machine readable format.\n  The header can have a number of different formats, but the most common is to provide a  mailto and URL like this:\n  If you&#39;re using a mailing list provider such as Sendgrid or Mailchimp then they should already insert these headers into the email for you, so you shouldn&#39;t need to do anything extra with this.\n It appears from testing that Gmail will favour the  mailto method, sending an email to the address provided. You can verify this by checking your sent email folder, which will contain items like this;\n  This is by far the simplest approach, sending an email is what Gmail is good at after all. However, I&#39;m somewhat sceptical of the effectiveness of this method, or maybe it just feels too easy.\n As far as I can tell Gmail treats URLs in the List-Unsubscribe header identically to unsubscrbe links in the content of emails, which makes sense as they should be the same URL in most cases.\n  One problem with List-Unsubscribe or content links is they could take you to a page that requires extra steps, such as logging in or entering your email address. Despite how you feel about this (I dislike it a lot), it makes things very difficult to automate an unsubscribe like Gmail is trying to do.\n However, there&#39;s a newer unsubscribe standard header called  List-Unsubscribe-Post that designates  single-request unsubscribe functionality ( RFC 8058). If an email contains this header then the unsubscribe link can simply be activated by sending a single POST request to the URL.\n  Unfortunately it&#39;s much less common than List-Unsubscribe to see in the wild. I could actually only find one example of this in my inbox (shout out to  Substack, nice work folks).\n As far as I can tell Gmail does nothing with this header, but it&#39;s a nice-to-have on your mailing list if you want to cover all the bases.\n  That about wraps it up for our unsubscribe options. If you&#39;re running a mailing list and want to make it easy for your recipients to unsubscribe (you should), then implementing these things will be a great addition and help you maintain a healthy list in the long run:\n Include an unsubscribe link in the content of the email in a clear, legible way, using simple language. Using the word &#34;Unsubscribe&#34; in the link is probably a good idea.\n Include a List-Unsubscribe header with a mailto and URL. If you&#39;re using a mail service, make sure they are including this automatically. You can check the source of an email to do this - here&#39;s a guide on how to do that.\n   One extra thing I found out was that Gmail doesn&#39;t seem to show the unsubscribe button until you&#39;ve received a few emails from a particular sender. This makes sense I suppose, but seemed to behave quite unpredicably.\n Also for some emails it just straight up doesn&#39;t show the button and I couldn&#39;t find an explanation. Perhaps there&#39;s some extra step going on behind the scenes or something I&#39;m missing.\n If you know the answer to either of these unknowns then let me know on the  HN thread and I&#39;ll credit you here :)\n  If you&#39;re looking for a more effective way to unsubscribe in bulk then I run a service called  Leave Me Alone. With it you can see all your mailing lists in one place and unsubscribe from them with a single click.\n  We use all the methods listed above and more to unsubscribe, meaning we&#39;re much more effective than the Gmail unsubscribe button ;)\n  Try it out for free", "posttime": "2020-05-29 23:40:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d6\u6d88,unsubscribe,\u7535\u5b50\u90ae\u4ef6", "title": "Gmail\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f", "title_en": "How does the Gmail unsubscribe button work?", "transed": 1, "url": "https://blog.leavemealone.app/how-does-the-gmail-unsubscribe-button-work/", "via": "", "real_tags": ["\u53d6\u6d88", "\u7535\u5b50\u90ae\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "213a6e0d6c3c2b3c81673b0feee73e3f.jpg", "infoid": 1004263, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u7684\u865a\u62df\u73b0\u5b9e(VR)\u4f53\u9a8c\u6218\u4e89\u9057\u9ab8\u5c06\u89c2\u4f17\u5e26\u5230\u4e86\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u7684\u524d\u7ebf\uff0c\u5728\u6240\u6709\u7684\u6ce5\u6cde\u548c\u5927\u5c60\u6740\u4e2d\u3002\u672c\u5468\uff0cMicroProse\u5ba3\u5e03\u4e86\u5b83\u7684\u7b2c\u4e00\u4e2aVR\u6e38\u620f\uff0c\u4ee5Might Eight\u7684\u5f62\u5f0f\uff0c\u5728\u4e8c\u6218\u7684\u5929\u7a7a\u4e2d\u5c06\u591a\u8fbe10\u540d\u73a9\u5bb6\u653e\u5165\u4e00\u67b6B-17\u8f70\u70b8\u673a\u3002\n\u5982\u679cMicroProse\u8fd9\u4e2a\u540d\u5b57\u542c\u8d77\u6765\u50cf\u662f\u6765\u81ea\u8fc7\u53bb\u7684\u7206\u70b8\uff0c\u90a3\u4e48\u4f60\u5c31\u662f\u5bf9\u7684\u3002\u8be5\u5de5\u4f5c\u5ba4\u572820\u4e16\u7eaa80\u5e74\u4ee3\u548c90\u5e74\u4ee3\u4ee5\u5927\u91cf\u7684\u6807\u9898\u9009\u62e9\u800c\u95fb\u540d\uff0c\u572821\u4e16\u7eaa\u521d\u8d70\u4e0a\u4e86\u6e21\u6e21\u9e1f\u7684\u9053\u8def\u3002\u76f4\u5230\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u8be5\u54c1\u724c\u4ece\u9057\u5fd8\u4e2d\u6062\u590d\u8fc7\u6765\uff0c\u53d1\u5e03\u4e86\u4e09\u6b3e\u89c6\u9891\u6e38\u620f\uff1a\u7279\u9063\u90e8\u961f\u6d77\u519b\u4e0a\u5c06(Task Force Admiral)\u3001\u7b2c\u4e8c\u9635\u7ebf(Second Front)\u548c\u6d77\u6d0b\u529b\u91cf(Sea Power)\u3002\u7d27\u968f\u5176\u540e\u7684\u662f\u672c\u5468\u7684\u7b2c8\u540d\u3002\nMight Eight\u4e13\u4e3aVR\u8bbe\u8ba1-\u4f46\u4e5f\u53ef\u4ee5\u5728\u6ca1\u6709VR\u8033\u673a\u7684\u60c5\u51b5\u4e0b\u64ad\u653e-Might Eight\u5c06\u662fB-17\u98de\u884c\u5821\u5792\uff1aMight Eight(2000)\u7684\u91cd\u542f\uff0c\u5141\u8bb8\u73a9\u5bb6\u5728\u6267\u884c\u5927\u80c6\u4efb\u52a1\u7684\u540c\u65f6\u9a7e\u9a76\u8f70\u70b8\u673a\u3001\u64cd\u4f5c\u67aa\u652f\u548c\u6295\u63b7\u70b8\u5f39\u3002\n\u8fd9\u4e2a\u6e38\u620f\u7684\u8bbe\u8ba1\u662f\u5408\u4f5c\u7684\uff0c\u5141\u8bb810\u540d\u73a9\u5bb6\u4e00\u8d77\u5de5\u4f5c\uff0c\u8ba9\u98de\u673a\u4fdd\u6301\u5728\u7a7a\u4e2d\uff0c\u5e76\u8ba9\u5b83\u56de\u5bb6\u80dc\u5229\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u8ba9\u4eba\u7c7b\u73a9\u5bb6\u5750\u6ee1\u6240\u6709\u7684\u5ea7\u4f4d\uff0c\u4eba\u5de5\u667a\u80fd\u673a\u7ec4\u4eba\u5458\u5c06\u80fd\u591f\u4ecb\u5165\u3002\u7531\u4e8e\u89d2\u8272\u7684\u6df7\u5408\uff0c\u5c06\u4f1a\u6709\u76f8\u5f53\u591a\u7684\u6e38\u620f\u6df7\u5408\uff0c\u9a7e\u9a76\u6216\u526f\u9a7e\u9a76\u8fd9\u4e2a\u82cd\u8747\u5821\u5792\uff0c\u5e2e\u52a9\u673a\u7ec4\u6210\u5458\u901a\u8fc7\u65e5\u591c\u7a81\u88ad\uff0c\u76d1\u63a7\u65e0\u7ebf\u7535\u548c\u901a\u4fe1\uff0c\u4ee5\u53ca\u51fb\u843d\u654c\u4eba\u7684\u6218\u6597\u673a\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u53d1\u5e03\u6e38\u620f\u7247\u6bb5\uff0c\u4f46\u4eceMicroProse\u516c\u5e03\u7684\u4fe1\u606f\u6765\u770b\uff0cMight Eight\u5c06\u662f\u4e00\u6b21\u4e0e\u771f\u5b9e\u4e16\u754c\u975e\u5e38\u76f8\u4f3c\u7684\u6fc0\u70c8\u4f53\u9a8c\u3002\u800c\u4e14\uff0c\u5f53B-24\u89e3\u653e\u8005\u5c06\u9732\u9762\u65f6\uff0c\u5c06\u4e0d\u4ec5\u4ec5\u662fB-17\u7403\u5458\u4ecb\u5165\u3002\u5de5\u4f5c\u5ba4\u6307\u51fa\uff1a\u201c\u4f60\u5c06\u80fd\u591f\u5728\u4e24\u67b6\u4f20\u5947\u8f70\u70b8\u673a\u4e0a\u6267\u884c\u98de\u884c\u4efb\u52a1\uff0c\u6bcf\u67b6\u8f70\u70b8\u673a\u90fd\u662f\u5728\u4ed4\u7ec6\u5173\u6ce8\u7ec6\u8282\u7684\u60c5\u51b5\u4e0b\u91cd\u73b0\u7684\u3002\u201d\nMicroprose\u8fd8\u6ca1\u6709\u5ba3\u5e03Might Eight\u5c06\u652f\u6301\u54ea\u4e9b\u8033\u673a\uff0c\u4ee5\u53ca\u53d1\u5e03\u65e5\u671f\u662f\u4ec0\u4e48\u65f6\u5019\u3002\u5f53\u8fdb\u4e00\u6b65\u7684\u7ec6\u8282\u53ef\u7528\u65f6\uff0cVRFocus\u4f1a\u8ba9\u60a8\u77e5\u9053\u3002", "note_en": "Recent virtual reality (VR) experience   War Remains took viewers to the front line of WWI, in among all the mud and carnage. This week MicroProse has announced its first VR title in the form of  The Mighty Eighth, putting up to 10-players into a B-17 bomber in the skies of WWII.\n   If the name MicroProse sounds like a blast from the past then you\u2019d be right. Known for a massive selection of titles during the \u201980s and \u201990s, the studio went the way of the dodo in the early 2000s. That was until earlier this month when  the brand reemerged from oblivion to announce three videogames,  Task Force Admiral, Second Front and  Sea Power. They were then followed by   The Mighty Eighth this week.\n Being built with VR specifically in mind \u2013 but also playable without a VR headset \u2013  The Mighty Eighth will be a reboot of  B-17 Flying Fortress: The Mighty 8th (2000), allowing players to fly the bomber, operate the guns and drop bombs as they carry out daring missions.\n The title is designed to be cooperative, allowing 10 players to work together to keep the plane in the air and make it home victorious. If it\u2019s not possible to fill all those seats with human players AI crew will be able to step in. There\u2019s going to be quite the mix of gameplay due to the mixture of roles, piloting or co-piloting this fly fortress, helping crew mates through day/night raids, monitoring radios and communications, and taking down enemy fighters.\n  No gameplay footage has been released as of yet but from the information MicroProse has unveiled  The Mighty Eighth will be an intense experience to closely resemble the real thing. And it won\u2019t be solely the B-17 players will step into as the B-24 Liberator will make an appearance. \u201cYou will be able to fly missions in both the legendary bombers, each recreated with meticulous attention to detail,\u201d notes the studio.\n MicroProse has yet to announce which headsets  The Mighty Eighth will support or when the release date will be. When further details are made available   VRFocus will let you know.", "posttime": "2020-05-29 23:40:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microprose,returns,\u73a9\u5bb6", "title": "Microprose\u643a10\u4eba\u4e8c\u6218B-17\u6a21\u62df\u5668Might Eight\u56de\u5f52", "title_en": "MicroProse Returns with the Mighty Eighth, a 10-Player WWII B-17 Simulator", "transed": 1, "url": "https://www.vrfocus.com/2020/05/microprose-returns-with-the-mighty-eighth-a-10-player-wwii-b-17-simulator/", "via": "", "real_tags": ["returns", "\u73a9\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004262, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u91cc\uff0c\u6211\u5df2\u7ecf2020\u5e74\u4e86\uff0c\u6211\u4eec\u6b63\u5904\u4e8e\u4e00\u573a\u761f\u75ab\u4e4b\u4e2d\uff0c\u6211\u6b63\u5728\u5b66\u4e60PHP\u3002\n\u6211\u751f\u6d3b\u5728\u9009\u62e9\u4e00\u79cd\u6280\u672f\uff0c\u5b66\u4e60\u5b83\uff0c\u540e\u6094\u9009\u62e9\uff0c\u7136\u540e\u91cd\u65b0\u5f00\u59cb\u7684\u5faa\u73af\u4e2d\u3002\u6211\u538c\u5026\u4e86\uff0c\u6211\u9700\u8981\u5b8c\u6210\u6211\u7684\u9879\u76ee\uff0c\u8d70\u51fa\u8fd9\u4e2a\u8ba9\u6211\u53d1\u75af\u7684\u65e0\u9650\u5faa\u73af\u3002\u6240\u4ee5\u6211\u505c\u6b62\u4e86\u4e00\u5207\uff0c\u5f00\u59cb\u601d\u8003\u5982\u4f55\u505a\u51fa\u9009\u62e9\u5e76\u575a\u6301\u4e0b\u53bb\uff0c\u53d7\u8fd9\u7bc7\u6587\u7ae0\u7684\u5f71\u54cd\uff0c\u6211\u51b3\u5b9a\u9009\u62e9\u4e00\u79cd\u67af\u71e5\u7684\u6280\u672f\uff0c\u4f46\u54ea\u79cd\u5462\uff1f\u5e02\u573a\u4e0a\u6709\u8fd9\u4e48\u591a\u9009\u62e9\u3002\n\u6211\u505a\u4e86\u4e00\u4e9b\u7814\u7a76\uff0c\u5217\u51fa\u4e86\u4e00\u4e9b\u4e3b\u6d41\u8bed\u8a00/\u6846\u67b6\uff0c\u5982Java/Spring\uff0cC#/.NET Core\uff0cPython/Django\uff0cRuby/Rails\uff0cPHP/Laravel\uff0c\u7136\u540e\u6211\u5f00\u59cb\u5220\u9664\u4e00\u4e9b\u6211\u4e0d\u592a\u559c\u6b22\u7684\u9009\u9879\uff0c\u5217\u8868\u4e2d\u8fd8\u67093\u4e2a\u9009\u9879\uff0c\u4e0b\u4e00\u4e2a\u51b3\u5b9a\u56e0\u7d20\u662f\u9009\u62e9\u4e00\u4e9b\u5206\u6570\u8f83\u5c11\u7684\u5e76\u4e14\u6211\u89c9\u5f97\u8212\u670d\u7684\u4e1c\u897f\u5f00\u59cb\u5b66\u4e60\uff0c\u6700\u540e\u6211\u9009\u62e9\u4e86\u4e24\u4e2a\u9009\u9879\uff0cPython\u548cPHP\uff0c\u4e0b\u4e00\u4e2a\u56e0\u7d20\u662f&#34\uff1b\u5982\u679c\u60c5\u51b5\u53d8\u5f97\u7cdf\u7cd5\uff0c\u6211\u80fd\u7528\u5b83\u8d5a\u94b1\u5417\uff1f&#34\uff1b\uff0c\u8fd9\u4e24\u79cd\u8bed\u8a00\u5728\u5e02\u573a\u4e0a\u7684\u4f7f\u7528\u91cf\u90fd\u5f88\u5927\uff0c\u673a\u4f1a\u4e5f\u5f88\u591a\uff0c\u6240\u4ee5\u90fd\u7559\u5728\u4e86\u6e38\u620f\u4e2d\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6000\u65e7\u7684\u611f\u89c9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u56e0\u7d20\u3002\u6211\u5b66\u4e60\u7684\u7b2c\u4e00\u79cd\u7f51\u7edc\u8bed\u8a00\u662fPHP\uff0c\u5728\u90a3\u6bb5\u65f6\u95f4\u91cc\uff0c\u6211\u7684\u7ecf\u5386\u662f\u795e\u5947\u7684\uff0c\u4e00\u4e2a\u65b0\u7684\u53ef\u80fd\u6027\u4e16\u754c\u4e3a\u6211\u6253\u5f00\u4e86\u673a\u4f1a\u3002\u6211\u975e\u5e38\u559c\u6b22\u8fd9\u79cd\u7ecf\u5386\u3002\u4e5f\u8bb8\u8fd9\u79cd\u611f\u89c9\u4f1a\u56de\u6765\u5462\uff1f\u55ef\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u4e8b\u60c5\u4f1a\u53d8\u7684\uff0c\u5bf9\u5427\uff1f\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6709\u4ec0\u4e48\u53d8\u5316\uff0cPHP 7\uff1f\u9177\u5417\uff0c\u62c9\u5a01\u5c14\uff1f\u9177\uff0c\u8fd9\u4e2a\u73b0\u4ee3\u7684PHP\u542c\u8d77\u6765\u4e0d\u9519\uff0c\u6211\u600e\u4e48\u624d\u80fd\u5b66\u4f1a\u5462\uff1f\u55ef\uff0c\u6211\u4eec\u6709\u62c9\u5361\u65af\u7279\uff0c\u4ed6\u4eec\u770b\u8d77\u6765\u4e0d\u9519\u3002\u6211\u52a0\u5165\u4e86\uff01\n\u4f60\u77e5\u9053\uff0c\u6211\u5bf9\u5f53\u524dPHP\u4e0a\u7684\u6279\u8bc4\u548c\u7b11\u8bdd\u4e00\u70b9\u4e5f\u4e0d\u5728\u610f\uff0c\u6211\u4e5f\u4f1a\u5bf9\u8fd9\u4e9b\u7b11\u8bdd\u53d1\u7b11\u3002\u6211\u552f\u4e00\u9700\u8981\u7684\u5c31\u662f\u6709\u4e00\u4e2a\u53ef\u9760\u7684\u5e73\u53f0\u6765\u521b\u5efa\u6211\u7684\u9879\u76ee\uff0c\u4e00\u4e2a\u80fd\u6b63\u5e38\u5de5\u4f5c\u3001\u4e0d\u4f1a\u8ba9\u6211\u5934\u75bc\u7684\u4e1c\u897f\uff0c\u6211\u7684\u6ce8\u610f\u529b\u9700\u8981\u653e\u5728\u521b\u9020\u4e00\u4e2a\u597d\u7684\u4ea7\u54c1\u4e0a\uff0c\u800c\u5728\u6211\u7684\u5ba2\u6237\u8eab\u4e0a\uff0c\u5e55\u540e\u7684\u4e1c\u897f\u53ea\u9700\u8981\u53d1\u6325\u4f5c\u7528\uff0c\u4e0d\u8981\u65e0\u7f18\u65e0\u6545\u5730\u5d29\u6e83\u3002\u6211\u662fKISS\u539f\u5219\u7684\u7c89\u4e1d\uff0c\u5728\u6211\u505a\u7684\u5927\u591a\u6570\u4e8b\u60c5\u4e2d\u6211\u90fd\u4f1a\u52aa\u529b\u9075\u5faa\u5b83\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u53c8\u56de\u5230\u4e86\u706f\u6808\u7684\u539f\u56e0\u3002\n\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u6211\u4e0d\u4f1a\u505c\u6b62\u5b66\u4e60\u65b0\u4e8b\u7269\uff0c\u5982\u679c\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u65b0\u7684\u6709\u8da3\u7684\u6280\u672f\uff0c\u6211\u4f1a\u53ea\u662f\u4e3a\u4e86\u597d\u73a9\u800c\u5b66\u4e60\u3002\u65e0\u5fe7\u65e0\u8651\u5730\u4e71\u641e\u6280\u672f\u662f\u975e\u5e38\u6709\u8da3\u7684\uff0c\u6211\u63a8\u8350\u7ed9\u5927\u5bb6\u3002\nPHP\u6ca1\u6709\u6b7b\uff0c\u4e5f\u4e0d\u4f1a\u6b7b\u3002\u6211\u8ba4\u4e3aPHP\u662f\u4e2a\u50f5\u5c38\u3002", "note_en": "Here I&#39;m, it&#39;s 2020, we are in the middle of a plague and I&#39;m learning PHP.\n  I live in a loop of choosing a technology, learning it, regret the choice and start over. I&#39;m tired of it, I need to get my projects done and get out of this infinite cycle that is driving me mad. So I stopped everything and started thinking on how to make a choice and stick to it, influenced by  this essay I decided to choose a boring technology, but wich one? There are so many options in the market.\n  I did some research and listed some mainstream languages/frameworks like Java/Spring, C#/.NET Core, Python/Django, Ruby/Rails, PHP/Laravel, next I started removing some options that I dont like so much, 3 options remained in the list, the next factor of decision was choosing something with the less fraction to start learning and that I feel comfortable with, I ended up with two options, Python and PHP, next factor was &#34;if things get ugly can I make money with it?&#34;, both languages have a huge usage in the market and a lot of opportunities, so both stayed in the game. At this point the nostalgic feeling was a important factor. The first web language that I learned was PHP, in that time the experience was magical, a new world of possibilities have oppened for me. I liked so much the experience. Perhaps this feeling will came back? Well, I don&#39;t know, things change right? Let&#39;s check what changed, PHP 7? Cool, Laravel? Cool, this modern PHP thing sounds good, how can I learn it? Hum, we have Laracasts and they seem nice. I&#39;m In!\n  You know, I don&#39;t give a shit about the current criticism and jokes on PHP, I also laugh at the jokes. The only thing that I need is a reliable stack to create my projects, something that just works and dont give me headaches, my focus need to be in creating a good product and in my clients, the things behind the scenes just need to be working and don&#39;t crashing for no reason, i&#39;m a fan of the  KISS principle and I try to follow it in most things that I do, that&#39;s why i&#39;m back in the LAMP stack.\n  An important point is that I will not stop learning new things, if I discover some new interesting technology I will learn it just for shits and giggles. Mess with technology without worry is very fun, and I recommend it to everyone.\n  PHP is not dead and will not die. I think that PHP is a zombie.", "posttime": "2020-05-29 23:40:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,php", "title": "\u5728\u761f\u75ab\u4e2d\u5b66\u4e60PHP", "title_en": "Learning PHP in the Middle of a Plague", "transed": 1, "url": "https://www.sabaini.org/blog/learning-php.html", "via": "", "real_tags": ["\u5b66\u4e60", "php"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004261, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u822c\u6765\u8bf4\uff0cSSH(\u534f\u8bae)\u548cOpenSSH(\u534f\u8bae\u7684\u4e3b\u8981\u5b9e\u73b0)\u62e5\u6709(\u6216\u66fe\u7ecf\u62e5\u6709)\u56db\u79cd\u4e0d\u540c\u7c7b\u578b\u7684SSH\u5bc6\u94a5\uff1aRSA\u3001DSA(\u73b0\u5728\u5df2\u88ab\u63a8\u8350)\u3001ECDSA\u548cED25519\uff0c\u8fd9\u91cc\u6309\u7167\u5b83\u4eec\u88ab\u6dfb\u52a0\u5230SSH\u7684\u987a\u5e8f\u5217\u51fa(ED25519\u662f\u6700\u65b0\u7684)\u3002\u7531\u4e8eRSA\u662f\u6700\u65e7\u7684\uff0c\u60a8\u53ef\u4ee5\u5408\u7406\u5730\u8ba4\u4e3a\u5b83\u662f\u4ecd\u7136\u53d7\u5230\u79ef\u6781\u652f\u6301\u7684\u4e09\u4e2a\u7248\u672c\u4e2d\u4f7f\u7528\u6700\u5c11\u7684\u4e00\u4e2a\u3002\u76f8\u53cd\uff0c\u4f7f\u7528RSA\u5bc6\u94a5\u4ecd\u7136\u975e\u5e38\u5e38\u89c1\uff0c\u65e2\u6709\u65e7\u5bc6\u94a5\uff0c\u4e5f\u6709\u65b0\u751f\u6210\u7684\u5bc6\u94a5\u3002\u8fd9\u6709\u5f88\u591a\u539f\u56e0\uff0c\u4f46\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3aRSA\u662f\u6bcf\u4e2aSSH\u5b9e\u73b0\u90fd\u652f\u6301\u7684\u901a\u7528\u9ed8\u8ba4\u5bc6\u94a5\u7c7b\u578b\uff0c\u800c\u4e14SSH\u5b9e\u73b0\u7684\u6570\u91cf\u6bd4\u60a8\u9884\u671f\u7684\u8981\u591a\u3002\n\u4e00\u4e2a\u5c0f\u539f\u56e0\u662f\uff0c\u4eba\u4eec\u901a\u5e38\u4e0d\u4f1a\u6539\u53d8\u6709\u6548\u7684\u5bc6\u7801\uff0c\u7279\u522b\u662f\u5728\u4ed6\u4eec\u5bf9\u4e8b\u7269\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u5f0f\u4e0a(\u53ea\u8981\u770b\u770b\u6240\u6709\u7684\u65e7\u5bc6\u7801\u5c31\u77e5\u9053\u4e86)\u3002\u73b0\u6709\u7684RSA\u5bc6\u94a5\u7ec4\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u6240\u4ee5\u5f88\u591a\u4eba\u89c9\u5f97\u6ca1\u4ec0\u4e48\u9700\u8981\u66f4\u6539\u5b83\u4eec\u3002\u7136\u800c\uff0c\u8fd9\u4ec5\u9002\u7528\u4e8e\u8001\u5e74\u4eba\u4f7f\u7528\u65e7\u5bc6\u94a5\u7684\u73af\u5883(\u53ef\u4ee5\u5305\u62ec\u4e2a\u4eba\u673a\u5668\u4e0a\u4f7f\u7528\u7684\u5bc6\u94a5\u548c\u7528\u4e8e\u4e2a\u4eba\u7269\u54c1\u7684\u5bc6\u94a5\uff0c\u5982\u60a8\u7684\u4e2a\u4ebaGithub\u5e10\u6237)\u3002\n\u63a5\u4e0b\u6765\uff0c\u4ecd\u7136\u6709\u4e00\u5b9a\u6570\u91cf\u7684SSH\u52a9\u624b\u8f6f\u4ef6\u4e0d\u652f\u6301\u5168\u7cfb\u5217\u7684SSH\u5bc6\u94a5\u7c7b\u578b\u3002\u5b83\u6709\u4e9b\u4e0d\u652f\u6301Ed25519\u5bc6\u94a5(\u901a\u5e38\u662f\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u9009\u62e9\u7684\u5bc6\u94a5\u7c7b\u578b)\uff0c\u6709\u4e9b\u53ea\u652f\u6301RSA\u5bc6\u94a5\uff0c\u751a\u81f3\u4e0d\u652f\u6301ECDSA\u5bc6\u94a5\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u65e2\u4e0d\u53ef\u80fd\u53c8\u8352\u8c2c\uff0c\u90a3\u4e48\uff0c\u76f4\u52302017\u5e74\uff0cGnome Keyring\u624d\u652f\u6301ECDSA\u5bc6\u94a5(\u53c2\u89c1bug#641082)\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u5e76\u4e0d\u662f\u4e16\u754c\u4e0a\u6240\u6709\u7684\u5730\u65b9\u90fd\u662fOpenSSH(\u4ee5\u53ca\u4e0e\u4e4b\u5bf9\u8bdd\u7684\u4e1c\u897f)\uff1b\u8fd8\u6709\u5404\u79cd\u9644\u52a0\u7684SSH\u5e93\u548c\u5b8c\u6574\u7684\u5b9e\u73b0\uff0c\u65e0\u8bba\u662f\u7528(\u548c\u7528\u4e8e)C\u8bed\u8a00\u8fd8\u662f\u5176\u4ed6\u8bed\u8a00\u3002\u8fd9\u4e9b\u5b9e\u73b0\u90fd\u652f\u6301RSA\uff0c\u56e0\u4e3aRSA\u5b9e\u9645\u4e0a\u662fSSH\u7684\u901a\u7528\u5bc6\u94a5\u7c7b\u578b(\u6bcf\u4e2a\u4eba\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u90fd\u652f\u6301\u5b83)\uff0c\u4f46\u5b83\u4eec\u5bf9\u5176\u4ed6\u5bc6\u94a5\u7c7b\u578b\u7684\u652f\u6301\u5f80\u5f80\u53c2\u5dee\u4e0d\u9f50\u3002\u60a8\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a\u5bc6\u94a5\u7c7b\u578b\uff0c\u5b83\u5c06\u7528\u4e8eBersa\uff1b\u60a8\u4e0d\u80fd\u5b9e\u73b0\u66f4\u591a\u3002\u7136\u540e\uff0c\u4e00\u65e6\u60a8\u5904\u4e8e\u67d0\u4e9b\u4e1c\u897f(\u65e0\u8bba\u662f\u5ba2\u6237\u7aef\u8fd8\u662f\u670d\u52a1\u5668)\u53ea\u5904\u7406RSA\u5bc6\u94a5\u7684\u73af\u5883\u4e2d\uff0c\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u60a8\u5f00\u59cb\u9ed8\u8ba4\u4f7f\u7528RSA\u5bc6\u94a5\u3002\n\u8fd9\u5c31\u662f\u6211\u81ea\u5df1\u5982\u4f55\u5f97\u5230\u6700\u8fd1\u7684RSA\u5bc6\u94a5\u7684\u3002\u6211\u7684iOS toUnix\u6587\u4ef6\u590d\u5236\u73af\u5883\u53ea\u80fd\u5728\u6211\u7684iOS\u8bbe\u5907\u4e0a\u751f\u6210RSA\u5bc6\u94a5(\u4e0d\u7ba1\u662f\u4ec0\u4e48\u539f\u56e0)\uff0c\u800c\u6211\u7684Yubikey4\u4e0d\u652f\u6301Ed25519\u5bc6\u94a5(\u5982\u679c\u6211\u5fc5\u987b\u5728RSA\u548cECDSA\u4e4b\u95f4\u9009\u62e9\uff0c\u6211\u66f4\u559c\u6b22RSA)\u3002\n\u597d\u6d88\u606f\u662f\u5bf9Ed25519\u952e\u7684\u652f\u6301\u8d8a\u6765\u8d8a\u666e\u904d\u3002\u5b83\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u901a\u7528\uff0c\u4f46\u6211\u5e0c\u671b\u8d8a\u6765\u8d8a\u591a\u7684\u7a0b\u5e8f\u4f1a\u89c9\u5f97\u5b83\u4eec\u53ef\u4ee5\u9ed8\u8ba4\u751f\u6210Ed25519\u5bc6\u94a5\uff0c\u7136\u540e\u4e3a\u4eba\u4eec\u63d0\u4f9b\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5982\u679c\u8fd9\u5728\u60a8\u7684\u65e7SSH\u8bbe\u5907\u4e0a\u4e0d\u8d77\u4f5c\u7528\uff0c\u8bf7\u9009\u62e9RSA\u9009\u9879\u3002\nPS\uff1a\u56e0\u4e3a\u6211\u67e5\u5230\u4e86\u8fd9\u4e00\u70b9\uff0cECDSA\u5bc6\u94a5\u88ab\u6dfb\u52a0\u5230OpenSSH5.7\u4e2d\uff0c\u5b83\u57282011\u5e741\u6708\u53d1\u5e03\u4e86\u6700\u65b0\u7248\u672c(VIA)\u3002\u8fd9\u662f\u4e0d\u5230\u5341\u5e74\u7684\u5386\u53f2\uff0c\u6240\u4ee5\u4ed6\u4eec\u6ca1\u6709\u53d6\u4ee3RSA\u5bc6\u94a5\u53ef\u80fd\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\uff0c\u7279\u522b\u662f\u56e0\u4e3aEd25519\u5bc6\u94a5\u652f\u6301\u662f\u5728\u51e0\u5e74\u540e\u624d\u51fa\u73b0\u7684\u3002", "note_en": "Generally speaking, SSH the protocol and OpenSSH the leadingimplementation of it have (or have had)  four different types ofSSH keys: RSA, DSA (which has now beendeprecated), ECDSA, and Ed25519, listed here in the order of whenthey were added to SSH (with Ed25519 being the most recent). SinceRSA is the oldest, you might reasonably expect that it was the leastused of the three that are still actively supported. Instead itremains extremely common to see RSA keys in use, both old ones andeven newly generated ones. There are a number of reasons for this,but a good part of it boils down to that  RSA is the universaldefault key type that every SSH implementation supports, and thereare more SSH implementations out there than you might expect.\n The small reason is that people often don&#39;t change what works,especially in how they authenticate to things (just look at all ofthe old passwords out there). Existing RSA keypairs work, so manypeople feel little need to change them. However, this only appliesin environments where old people are using old keys (which caninclude keys used on personal machines and for personal things,like your personal Github account).\n Next, there is still a certain amount of SSH helper software outthere that doesn&#39;t support the full range of SSH key types. Someof it doesn&#39;t support Ed25519 keys (which are generally everyone&#39;spreferred choice of key types), and some of it only supports RSAkeys, not even ECDSA keys. If this sounds impossible and absurd,well, it took until 2017 for Gnome Keyring to support ECDSA keys(cf  bug #641082).\n Beyond this, not all of the world is OpenSSH (and things that talkto it); there are a variety of additional SSH libraries and fullimplementations, both in (and for) C and in other languages. Theseimplementations all support RSA, because RSA is effectively theuniversal key type for SSH (everyone supports it on both the clientand server side), but their support of other key types is oftenspotty. You have to implement one key type and it&#39;s going to beRSA; you may not implement more than that. Then once you&#39;re in anecology where some things (either clients or servers) only dealwith RSA keys, you start defaulting to RSA keys for safety.\n This is how I&#39;ve wound up with recent RSA keys myself.  My iOS toUnix file copy environment could only generateRSA keys on my iOS devices (for whatever reasons), and my Yubikey4 doesn&#39;t support Ed25519 keys (and if I have to pick between RSAand ECDSA, I prefer RSA).\n The good news is that support for Ed25519 keys is increasinglycommon. It will probably never be completely universal, but I&#39;m hopingthat an increasing number of programs will feel that they can default togenerating Ed25519 keys and then offer people an &#39;if this doesn&#39;t workon your ancient SSH device, pick RSA&#39; option.\n PS: Because I looked this up, ECDSA keys were added in  OpenSSH5.7, which had its upstreamrelease in January of 2011 ( via). That&#39;s lessthan a decade old so it&#39;s probably not surprising that they didn&#39;tsupplant RSA keys, especially since Ed25519 key support came alongonly a few years later.", "posttime": "2020-05-29 23:39:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u94a5,persistence", "title": "RSA\u5bc6\u94a5\u5728SSH\u4e2d\u7684\u60ca\u4eba\u6301\u4e45\u6027", "title_en": "The surprising persistence of RSA keys in SSH", "transed": 1, "url": "https://utcc.utoronto.ca/~cks/space/blog/tech/SSHRSAKeysPersistence", "via": "", "real_tags": ["\u5bc6\u94a5"]}, {"category": "", "categoryclass": "", "imagename": "61ccd594b640342fab83ccc613fb1a44.jpg", "infoid": 1004260, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b27\u7a7a\u5c40\u7684\u592a\u9633\u8f68\u9053\u98de\u884c\u5668\u5c06\u5728\u672a\u6765\u51e0\u5929\u7a7f\u8fc7ATLAS\u5f57\u661f\u7684\u5c3e\u5df4\u3002\u867d\u7136\u6700\u8fd1\u53d1\u5c04\u7684\u822a\u5929\u5668\u6b64\u65f6\u4e0d\u4f1a\u91c7\u96c6\u79d1\u5b66\u6570\u636e\uff0c\u4f46\u4efb\u52a1\u4e13\u5bb6\u5df2\u7ecf\u52aa\u529b\u786e\u4fdd\u5728\u8fd9\u6b21\u72ec\u7279\u7684\u76f8\u9047\u671f\u95f4\u6253\u5f00\u56db\u53f0\u6700\u76f8\u5173\u7684\u4eea\u5668\u3002\n\u592a\u9633\u8f68\u9053\u5668\u4e8e2020\u5e742\u670810\u65e5\u53d1\u5c04\u5347\u7a7a\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u9664\u4e86\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u800c\u77ed\u6682\u5173\u95ed\u5916\uff0c\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u4eec\u4e00\u76f4\u5728\u8fdb\u884c\u4e00\u7cfb\u5217\u6d4b\u8bd5\u548c\u8bbe\u7f6e\u7a0b\u5e8f\uff0c\u79f0\u4e3a\u8c03\u8bd5\u3002\n\u8fd9\u4e00\u9636\u6bb5\u7684\u5b8c\u6210\u65e5\u671f\u5b9a\u57286\u670815\u65e5\uff0c\u8fd9\u6837\u98de\u8239\u5c31\u53ef\u4ee5\u57286\u6708\u4e2d\u65ec\u7b2c\u4e00\u6b21\u8fd1\u65e5\u70b9\u5b8c\u5168\u53d1\u6325\u4f5c\u7528\u3002\u7136\u800c\uff0c\u4e0e\u5f57\u661f\u5076\u7136\u76f8\u9047\u7684\u53d1\u73b0\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u7d27\u8feb\u3002\n\u610f\u5916\u5730\u98de\u8d8a\u5f57\u661f\u5c3e\u5df4\u662f\u592a\u7a7a\u4efb\u52a1\u4e2d\u7f55\u89c1\u7684\u4e8b\u4ef6\uff0c\u79d1\u5b66\u5bb6\u4eec\u77e5\u9053\uff0c\u8fd9\u79cd\u60c5\u51b5\u4ee5\u524d\u53ea\u53d1\u751f\u8fc7\u516d\u6b21\uff0c\u5bf9\u4e8e\u4e0d\u662f\u4e13\u95e8\u8ffd\u9010\u5f57\u661f\u7684\u4efb\u52a1\u3002\u6240\u6709\u8fd9\u6837\u7684\u906d\u9047\u90fd\u662f\u5728\u4e8b\u4ef6\u53d1\u751f\u540e\u7684\u822a\u5929\u5668\u6570\u636e\u4e2d\u53d1\u73b0\u7684\u3002\u592a\u9633\u8f68\u9053\u5668\u5373\u5c06\u5230\u6765\u7684\u7a7f\u8d8a\u662f\u7b2c\u4e00\u4e2a\u63d0\u524d\u9884\u6d4b\u7684\u3002\n\u82f1\u56fd\u4f26\u6566\u5927\u5b66\u5b66\u9662\u7a46\u62c9\u5fb7\u7a7a\u95f4\u79d1\u5b66\u5b9e\u9a8c\u5ba4\u7684\u6770\u4f26\u7279\u00b7\u743c\u65af(Geraint Jones)\u6ce8\u610f\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4ed6\u670920\u5e74\u7684\u7814\u7a76\u6b64\u7c7b\u906d\u9047\u7684\u5386\u53f2\u3002\u4ed6\u57282000\u5e74\u53d1\u73b0\u4e86\u7b2c\u4e00\u6b21\u610f\u5916\u7684\u5c3e\u5df4\u4ea4\u53c9\uff0c\u5f53\u65f6\u4ed6\u6b63\u5728\u8c03\u67e51996\u5e74\u6b27\u7a7a\u5c40/\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5c24\u5229\u897f\u65af\u592a\u9633\u7814\u7a76\u822a\u5929\u5668\u8bb0\u5f55\u7684\u6570\u636e\u4e2d\u7684\u4e00\u4e2a\u5947\u602a\u7684\u6270\u52a8\u3002\u8fd9\u9879\u7814\u7a76\u663e\u793a\uff0c\u5b87\u5b99\u98de\u8239\u7a7f\u8fc7\u4e86\u96c5\u5e93\u5854\u5f57\u661f(\u4e5f\u88ab\u79f0\u4e3a\u201c1996\u5e74\u7684\u5927\u5f57\u661f\u201d)\u7684\u5c3e\u5df4\u3002\u6d88\u606f\u516c\u5e03\u540e\u4e0d\u4e45\uff0c\u5c24\u5229\u897f\u65af\u7a7f\u8fc7\u4e86\u53e6\u4e00\u9897\u5f57\u661f\u7684\u5c3e\u5df4\uff0c\u7136\u540e\u57282007\u5e74\u7a7f\u8fc7\u4e86\u7b2c\u4e09\u9897\u5f57\u661f\u7684\u5c3e\u5df4\u3002\n\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u610f\u8bc6\u5230\u592a\u9633\u8f68\u9053\u5668\u5c06\u5728\u77ed\u77ed\u51e0\u5468\u5185\u5230\u8fbe\u5f57\u661fC/2019\u5e74Y4(ATLAS)\u4e0b\u6e384400\u4e07\u516c\u91cc\uff0cGeraint\u7acb\u5373\u901a\u77e5\u4e86\u6b27\u7a7a\u5c40\u56e2\u961f\u3002\n\u592a\u9633\u8f68\u9053\u5668\u914d\u5907\u4e86\u4e00\u595710\u53f0\u539f\u4f4d\u548c\u9065\u611f\u4eea\u5668\u6765\u8c03\u67e5\u592a\u9633\u53ca\u5176\u91ca\u653e\u5230\u592a\u7a7a\u7684\u5e26\u7535\u7c92\u5b50\u6d41-\u592a\u9633\u98ce\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u56db\u53f0\u539f\u4f4d\u4eea\u5668\u4e5f\u662f\u63a2\u6d4b\u5f57\u661f\u5c3e\u5df4\u7684\u5b8c\u7f8e\u4eea\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u6d4b\u91cf\u4e86\u822a\u5929\u5668\u5468\u56f4\u7684\u6761\u4ef6\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u8fd4\u56de\u5173\u4e8e\u5f57\u661f\u53d1\u51fa\u7684\u5c18\u57c3\u9897\u7c92\u548c\u5e26\u7535\u7c92\u5b50\u7684\u6570\u636e\u3002\u8fd9\u4e9b\u6392\u653e\u5f62\u6210\u4e86\u5f57\u661f\u7684\u4e24\u4e2a\u5c3e\u5df4\uff1a\u7559\u5728\u5f57\u661f\u8f68\u9053\u4e0a\u7684\u5c18\u57c3\u5c3e\u5df4\u548c\u76f4\u63a5\u6307\u5411\u592a\u9633\u7684\u79bb\u5b50\u5c3e\u5df4\u3002\n\u592a\u9633\u8f68\u9053\u5668\u5c06\u4e8e5\u670831\u65e5\u81f36\u67081\u65e5\u7a7f\u8fc7ATLAS\u5f57\u661f\u7684\u79bb\u5b50\u5c3e\u5df4\uff0c6\u67086\u65e5\u7a7f\u8fc7\u5c18\u57c3\u5c3e\u5df4\u3002\u5982\u679c\u79bb\u5b50\u5c3e\u5df4\u8db3\u591f\u5bc6\u96c6\uff0c\u592a\u9633\u8f68\u9053\u5668\u7684\u78c1\u5f3a\u8ba1(MAG)\u53ef\u4ee5\u63a2\u6d4b\u5230\u884c\u661f\u9645\u78c1\u573a\u7684\u53d8\u5316\uff0c\u56e0\u4e3a\u5b83\u4e0e\u5f57\u661f\u5c3e\u90e8\u7684\u79bb\u5b50\u76f8\u4e92\u4f5c\u7528\uff0c\u800c\u592a\u9633\u98ce\u5206\u6790\u4eea(SWA)\u53ef\u4ee5\u76f4\u63a5\u6355\u83b7\u4e00\u4e9b\u5c3e\u5df4\u7c92\u5b50\u3002\n\u5f53\u592a\u9633\u8f68\u9053\u5668\u7a7f\u8fc7\u5c18\u57c3\u5c3e\u5df4\u65f6\uff0c\u53d6\u51b3\u4e8e\u5b83\u7684\u5bc6\u5ea6-\u8fd9\u662f\u6781\u5176\u96be\u4ee5\u9884\u6d4b\u7684-\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5fae\u5c0f\u7684\u5c18\u57c3\u9897\u7c92\u4ee5\u6bcf\u79d2\u6570\u5341\u516c\u91cc\u7684\u901f\u5ea6\u649e\u51fb\u822a\u5929\u5668\u3002\u867d\u7136\u8fd9\u5bf9\u822a\u5929\u5668\u6ca1\u6709\u91cd\u5927\u98ce\u9669\uff0c\u4f46\u5c18\u57c3\u9897\u7c92\u672c\u8eab\u4f1a\u5728\u649e\u51fb\u65f6\u84b8\u53d1\uff0c\u5f62\u6210\u5fae\u5c0f\u7684\u5e26\u7535\u6c14\u4f53\u6216\u7b49\u79bb\u5b50\u4f53\u4e91\uff0c\u53ef\u4ee5\u7531\u65e0\u7ebf\u7535\u548c\u7b49\u79bb\u5b50\u6ce2(RPW)\u4eea\u5668\u63a2\u6d4b\u5230\u3002\n\u201c\u50cf\u8fd9\u6837\u7684\u610f\u5916\u76f8\u9047\u4e3a\u4efb\u52a1\u63d0\u4f9b\u4e86\u72ec\u7279\u7684\u673a\u9047\u548c\u6311\u6218\uff0c\u4f46\u8fd9\u5f88\u597d\uff01\u50cf\u8fd9\u6837\u7684\u673a\u4f1a\u90fd\u662f\u79d1\u5b66\u5192\u9669\u7684\u4e00\u90e8\u5206\uff0c\u201c\u6b27\u7a7a\u5c40\u79d1\u5b66\u4e3b\u4efb\u91d1\u745f\u00b7\u54c8\u8f9b\u683c(G\u00fcnther Hasinger)\u8bf4\u3002\n\u5176\u4e2d\u4e00\u4e2a\u6311\u6218\u662f\uff0c\u7531\u4e8e\u8c03\u8bd5\uff0c\u4eea\u5668\u4f3c\u4e4e\u4e0d\u592a\u53ef\u80fd\u5168\u90e8\u53ca\u65f6\u51c6\u5907\u5c31\u7eea\u3002\u73b0\u5728\uff0c\u7531\u4e8e\u4eea\u5668\u56e2\u961f\u548c\u6b27\u7a7a\u5c40\u98de\u884c\u4efb\u52a1\u64cd\u4f5c\u56e2\u961f\u7684\u7279\u522b\u52aa\u529b\uff0c\u6240\u6709\u56db\u53f0\u73b0\u573a\u4eea\u5668\u90fd\u5c06\u5f00\u542f\u5e76\u6536\u96c6\u6570\u636e\uff0c\u5c3d\u7ba1\u5728\u67d0\u4e9b\u65f6\u95f4\u9700\u8981\u5c06\u4eea\u5668\u5207\u6362\u56de\u8c03\u8bd5\u6a21\u5f0f\uff0c\u4ee5\u786e\u4fdd\u57286\u670815\u65e5\u7684\u6700\u540e\u671f\u9650\u524d\u5b8c\u6210\u4efb\u52a1\u3002\n\u201c\u6709\u4e86\u8fd9\u4e9b\u8b66\u544a\uff0c\u6211\u4eec\u5df2\u7ecf\u4e3aATLAS\u5f57\u661f\u544a\u8bc9\u6211\u4eec\u7684\u4e00\u5207\u505a\u597d\u4e86\u51c6\u5907\uff0c\u201d\u6b27\u7a7a\u5c40\u592a\u9633\u8f68\u9053\u5668\u9879\u76ee\u79d1\u5b66\u5bb6\u4e39\u5c3c\u5c14\u00b7\u7a46\u52d2(Daniel M\u00fcller)\u8bf4\u3002\n\u53e6\u4e00\u4e2a\u6311\u6218\u662f\u5f57\u661f\u7684\u884c\u4e3a\u3002ATLAS\u5f57\u661f\u4e8e2019\u5e7412\u670828\u65e5\u88ab\u53d1\u73b0\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u5b83\u53d8\u5f97\u5982\u6b64\u660e\u4eae\uff0c\u4ee5\u81f3\u4e8e\u5929\u6587\u5b66\u5bb6\u4eec\u60f3\u77e5\u9053\u5b83\u662f\u5426\u4f1a\u57285\u6708\u4efd\u53d8\u5f97\u8089\u773c\u53ef\u89c1\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u56db\u6708\u521d\uff0c\u5f57\u661f\u788e\u88c2\u4e86\u3002\u7ed3\u679c\uff0c\u5b83\u7684\u4eae\u5ea6\u4e5f\u660e\u663e\u964d\u4f4e\uff0c\u5265\u593a\u4e86\u5929\u7a7a\u89c2\u6d4b\u8005\u7684\u89c6\u91ce\u30025\u6708\u4e2d\u65ec\u7684\u8fdb\u4e00\u6b65\u788e\u88c2\u8fdb\u4e00\u6b65\u524a\u5f31\u4e86\u8fd9\u9897\u5f57\u661f\uff0c\u4f7f\u5176\u4e0d\u592a\u53ef\u80fd\u88ab\u592a\u9633\u8f68\u9053\u5668\u63a2\u6d4b\u5230\u3002\n\u6839\u636eGeraint\u7684\u8bf4\u6cd5\uff0c\u5c3d\u7ba1\u68c0\u6d4b\u5230\u7684\u673a\u4f1a\u5df2\u7ecf\u51cf\u5c11\uff0c\u4f46\u8fd9\u4e00\u52aa\u529b\u4ecd\u7136\u662f\u503c\u5f97\u7684\u3002\n\u201c\u6bcf\u4e00\u6b21\u4e0e\u5f57\u661f\u76f8\u9047\uff0c\u6211\u4eec\u90fd\u4f1a\u5bf9\u8fd9\u4e9b\u6709\u8da3\u7684\u7269\u4f53\u6709\u66f4\u591a\u7684\u4e86\u89e3\u3002\u4ed6\u89e3\u91ca\u8bf4\uff1a\u201c\u5982\u679c\u592a\u9633\u8f68\u9053\u5668\u63a2\u6d4b\u5230\u5f57\u661fATLAS\u7684\u5b58\u5728\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u66f4\u591a\u5730\u4e86\u89e3\u5f57\u661f\u5982\u4f55\u4e0e\u592a\u9633\u98ce\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u68c0\u67e5\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u5bf9\u5c18\u57c3\u5c3e\u5df4\u884c\u4e3a\u7684\u9884\u671f\u662f\u5426\u4e0e\u6211\u4eec\u7684\u6a21\u578b\u76f8\u7b26\u3002\u201d\u201c\u6240\u6709\u4e0e\u5f57\u661f\u76f8\u9047\u7684\u4efb\u52a1\u90fd\u63d0\u4f9b\u4e86\u62fc\u56fe\u7684\u788e\u7247\u3002\u201d\nGeraint\u662f\u6b27\u7a7a\u5c40\u672a\u6765\u5f57\u661f\u62e6\u622a\u4efb\u52a1\u7684\u9996\u5e2d\u7814\u7a76\u5458\uff0c\u8be5\u4efb\u52a1\u7531\u4e09\u4e2a\u822a\u5929\u5668\u7ec4\u6210\uff0c\u8ba1\u5212\u4e8e2028\u5e74\u53d1\u5c04\u3002\u5b83\u5c06\u5bf9\u4e00\u9897\u672a\u77e5\u7684\u5f57\u661f\u8fdb\u884c\u66f4\u8fd1\u8ddd\u79bb\u7684\u98de\u8d8a\uff0c\u8fd9\u9897\u5f57\u661f\u5c06\u4ece\u65b0\u53d1\u73b0\u7684\u5f57\u661f\u4e2d\u6311\u9009\u51fa\u6765\uff0c\u8ddd\u79bb\u53d1\u5c04\u65f6\u95f4\u66f4\u8fd1(\u751a\u81f3\u66f4\u665a)\u3002\n\u592a\u9633\u8f68\u9053\u5668\u76ee\u524d\u6b63\u5728\u91d1\u661f\u548c\u6c34\u661f\u8f68\u9053\u4e4b\u95f4\u7ed5\u7740\u6211\u4eec\u7684\u6bcd\u661f\u8fd0\u884c\uff0c\u5b83\u7684\u7b2c\u4e00\u6b21\u8fd1\u65e5\u70b9\u53d1\u751f\u57286\u670815\u65e5\uff0c\u8ddd\u79bb\u592a\u9633\u7ea67700\u4e07\u516c\u91cc\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u5b83\u5c06\u5728\u6c34\u661f\u8f68\u9053\u5185\u53d8\u5f97\u66f4\u8fd1\uff0c\u8ddd\u79bb\u592a\u9633\u8868\u9762\u7ea64200\u4e07\u516c\u91cc\u3002\u4e0e\u6b64\u540c\u65f6\uff0cATLAS\u5f57\u661f\u5df2\u7ecf\u5728\u90a3\u91cc\uff0c\u63a5\u8fd1\u5b83\u81ea\u5df1\u7684\u8fd1\u65e5\u70b9\uff0c\u9884\u8ba15\u670831\u65e5\uff0c\u8ddd\u79bb\u592a\u9633\u7ea63700\u4e07\u516c\u91cc\u3002\n\u6b27\u7a7a\u5c40\u592a\u9633\u8f68\u9053\u5668\u9879\u76ee\u526f\u79d1\u5b66\u5bb6Yannis Zouganelis\u8bf4\uff1a\u201c\u8fd9\u6b21\u5c3e\u90e8\u7a7f\u8d8a\u4e5f\u662f\u4ee4\u4eba\u5174\u594b\u7684\uff0c\u56e0\u4e3a\u5b83\u5c06\u7b2c\u4e00\u6b21\u53d1\u751f\u5728\u79bb\u592a\u9633\u5982\u6b64\u8fd1\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u5f57\u6838\u4f4d\u4e8e\u6c34\u661f\u7684\u8f68\u9053\u5185\u201d\uff0c\u6b27\u7a7a\u5c40\u592a\u9633\u8f68\u9053\u5668\u9879\u76ee\u526f\u79d1\u5b66\u5bb6\u96c5\u5c3c\u65af\u00b7\u4f50\u52a0\u5185\u5229\u65af(Yannis Zouganelis)\u8bf4\u3002\n\u4e86\u89e3\u592a\u9633\u7cfb\u6700\u5185\u5c42\u7684\u5c18\u57c3\u73af\u5883\u662f\u592a\u9633\u8f68\u9053\u5668\u7684\u79d1\u5b66\u76ee\u6807\u4e4b\u4e00\u3002\nYannis\u8865\u5145\u8bf4\uff1a\u201c\u50cfATLAS\u5f57\u661f\u8fd9\u6837\u7684\u8fd1\u592a\u9633\u5f57\u661f\u662f\u5185\u65e5\u5149\u5c42\u5c18\u57c3\u7684\u6765\u6e90\uff0c\u56e0\u6b64\u8fd9\u9879\u7814\u7a76\u4e0d\u4ec5\u6709\u52a9\u4e8e\u6211\u4eec\u4e86\u89e3\u8fd9\u9897\u5f57\u661f\uff0c\u800c\u4e14\u8fd8\u6709\u52a9\u4e8e\u6211\u4eec\u4e86\u89e3\u6052\u661f\u7684\u5c18\u57c3\u73af\u5883\u3002\u201d\n\u5bf9\u4e8e\u592a\u9633\u8f68\u9053\u5668\u6765\u8bf4\uff0c\u89c2\u5bdf\u4e00\u4e2a\u7ed3\u51b0\u7684\u7269\u4f53\u800c\u4e0d\u662f\u707c\u70ed\u7684\u592a\u9633\uff0c\u5f53\u7136\u662f\u4e00\u79cd\u4ee4\u4eba\u5174\u594b\u548c\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u6765\u5f00\u59cb\u5b83\u7684\u79d1\u5b66\u4efb\u52a1\uff0c\u4f46\u8fd9\u662f\u79d1\u5b66\u7684\u672c\u8d28\u3002\n\u201c\u79d1\u5b66\u53d1\u73b0\u662f\u5efa\u7acb\u5728\u826f\u597d\u7684\u8ba1\u5212\u548c\u610f\u5916\u53d1\u73b0\u7684\u57fa\u7840\u4e0a\u7684\u3002\u5728\u53d1\u5c04\u540e\u7684\u4e09\u4e2a\u6708\u91cc\uff0c\u592a\u9633\u8f68\u9053\u5668\u56e2\u961f\u5df2\u7ecf\u8bc1\u660e\u5b83\u5df2\u7ecf\u4e3a\u8fd9\u4e24\u79cd\u60c5\u51b5\u505a\u597d\u4e86\u51c6\u5907\uff0c\u201c\u4e39\u5c3c\u5c14\u8bf4\u3002\nG.Jones\u7b49\u4eba(2020)\u7684\u201c\u592a\u9633\u8f68\u9053\u5668\u539f\u4f4d\u63a2\u6d4b\u5f57\u661fC/2019 Y4 ATLAS\u7684\u524d\u666f\u201d\u53d1\u8868\u5728\u201c\u7f8e\u56fd\u79d1\u5b66\u4fc3\u8fdb\u4f1a\u201d\u7684\u201c\u7814\u7a76\u7b14\u8bb0\u201d\u4e0a\u3002\n\u592a\u9633\u8f68\u9053\u5668\u662f\u6b27\u7a7a\u5c40\u9886\u5bfc\u7684\u4e00\u9879\u4efb\u52a1\uff0c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u6709\u5f88\u5f3a\u7684\u53c2\u4e0e\u3002\u8fd9\u662f\u6b27\u6d32\u822a\u5929\u5c40\u7a7a\u95f4\u79d1\u5b66\u4efb\u52a1\u7684\u5f53\u524d\u89c4\u5212\u5468\u671f--\u5b87\u5b99\u613f\u666f2015-25\u5e74\u8ba1\u5212\u4e2d\u5b9e\u65bd\u7684\u7b2c\u4e00\u4e2a\u201c\u4e2d\u7b49\u201d\u7ea7\u4efb\u52a1\u3002", "note_en": "ESA\u2019s Solar Orbiter will cross through the tails of Comet ATLAS during the next few days. Although the recently launched spacecraft was not due to be taking science data at this time, mission experts have worked to ensure that the four most relevant instruments will be switched on during the unique encounter.\n Solar Orbiter was  launched on 10 February 2020. Since then, and with the exception of a  brief shutdown due to the coronavirus pandemic, scientists and engineers have been conducting a series of tests and set-up routines known as commissioning.\n  The completion date for this phase was set at 15 June, so that the spacecraft could be fully functional for its first close pass of the Sun, or perihelion, in mid-June. However, the discovery of the chance encounter with the comet made things more urgent.\n Serendipitously flying through a comet\u2019s tail is a rare event for a space mission, something scientists know to have happened only six times before for missions that were not specifically chasing comets. All such encounters have been discovered in the spacecraft data after the event. Solar Orbiter\u2019s upcoming crossing is the first to be predicted in advance.\n It was noticed by Geraint Jones of the UCL Mullard Space Science Laboratory, UK, who has a 20-year history of investigating such encounters. He discovered the first accidental tail crossing in 2000, while investigating a strange disturbance in data recorded by the ESA/NASA Ulysses Sun-studying spacecraft in 1996. This study revealed that the spacecraft had  passed through the tail of Comet Hyakutake, also known as \u2018The Great Comet of 1996\u2019. Soon after the announcement, Ulysses crossed the tail of  another comet, and then a  third one in 2007.\n Earlier this month, realising that Solar Orbiter was going to be 44 million kilometres downstream of Comet C/2019 Y4 (ATLAS) in just a matter of weeks, Geraint immediately alerted the ESA team.\n  Solar Orbiter is equipped with a suite of 10 in-situ and remote-sensing instruments to investigate the Sun and the flow of charged particles it releases into space \u2013 the solar wind. Fortuitously, the four in-situ instruments are also perfect for detecting the comet\u2019s tails because they measure the conditions around the spacecraft, and so they could return data about the dust grains and the electrically charged particles given off by the comet. These emissions create the comet\u2019s two tails: the dust tail that is left behind in the comet\u2019s orbit and the ion tail that points straight away from the Sun.\n  Solar Orbiter will cross the ion tail of Comet ATLAS on 31\u00a0May\u20131\u00a0June, and the dust tail on 6\u00a0June. If the ion tail is dense enough, Solar Orbiter\u2019s magnetometer (MAG) might detect the variation of the interplanetary magnetic field because of its interaction with ions in the comet\u2019s tail, while the Solar Wind Analyser (SWA) could directly capture some of the tail particles.\n When Solar Orbiter crosses the dust tail, depending on its density \u2013 which is extremely difficult to predict \u2013 it is possible that one or more tiny dust grains may hit the spacecraft at speeds of tens of kilometres per second. While there is no significant risk to the spacecraft from this, the dust grains themselves will be vaporised on impact, forming tiny clouds of electrically charged gas, or plasma, which could be detected by the Radio and Plasma Waves (RPW) instrument.\n \u201cAn unexpected encounter like this provides a mission with unique opportunities and challenges, but that\u2019s good! Chances like this are all part of the adventure of science,\u201d says G\u00fcnther Hasinger, ESA Director of Science.\n One of those challenges was that the instruments seemed unlikely to all be ready in time because of the commissioning. Now, thanks to a special effort by the instrument teams and ESA\u2019s mission operations team, all four in-situ instruments will be on and collecting data, even though at certain times the instruments will need to be switched back into commissioning mode to ensure that the 15 June deadline is met.\n \u201cWith these caveats, we are ready for whatever Comet ATLAS has to tell us,\u201d says Daniel M\u00fcller, ESA Project Scientist for Solar Orbiter.\n  Another challenge entails the comet\u2019s behaviour. Comet ATLAS was discovered on 28 December 2019. During the next few months, it brightened so much that astronomers wondered whether it would become visible to the naked eye in May.\n Unfortunately, in early April  the comet fragmented. As a result, its brightness dropped significantly too, robbing sky watchers of the view. A further fragmentation in mid-May has diminished the comet even more, making it less likely to be detectable by Solar Orbiter.\n Although the chances of detection have reduced, the effort is still worth making according to Geraint.\n \u201cWith each encounter with a comet, we learn more about these intriguing objects. If Solar Orbiter detects Comet ATLAS&#39;s presence, then we&#39;ll learn more about how comets interact with the solar wind, and we can check, for example, whether our expectations of dust tail behaviour agree with our models,\u201d he explains. \u201cAll missions that encounter comets provide pieces of the jigsaw puzzle.\u201d\n Geraint is the principal investigator of ESA\u2019s future  Comet Interceptor mission, which consists of three spacecraft and is scheduled for launch in 2028. It will make a much closer flyby of an as yet unknown comet that will be selected from the newly discovered comets nearer the time of launch (or even after that).\n  Solar Orbiter is  currently circling our parent star between the orbits of Venus and Mercury, with its first perihelion to take place on 15 June, around 77 million kilometres from the Sun. In coming years, it will get much closer, within the orbit of Mercury, around 42 million kilometres from the solar surface. Meanwhile, Comet ATLAS is already there, approaching its own perihelion, which is expected on 31 May, around 37 million kilometres from the Sun.\n \u201cThis tail crossing is also exciting because it will happen for the first time at such close distances from the Sun, with the comet nucleus being inside the orbit of Mercury,\u201d says Yannis Zouganelis, ESA Deputy Project Scientist for Solar Orbiter.\n Understanding the dust environment in the innermost region of the Solar System is one of Solar Orbiter\u2019s  scientific objectives.\n \u201cNear-Sun comets like Comet ATLAS are sources of dust in the inner heliosphere and so this study will not only help us understand the comet, but also the dust environment of our star,\u201d adds Yannis.\n Looking at an icy object rather than the scorching Sun is certainly an exciting \u2013 and unexpected \u2013 way for Solar Orbiter to start its scientific mission, but that\u2019s the nature of science.\n \u201cScientific discovery is built on good planning and serendipity. In the three months since launch, the Solar Orbiter team has already proved that it\u2019s ready for both,\u201d says Daniel.\n  \u2018 Prospects for the In Situ detection of Comet C/2019 Y4 ATLAS by Solar Orbiter\u2019 by G. Jones et al (2020) is published in the  Research Notes of the AAS.\n Solar Orbiter is an ESA-led mission with strong NASA participation. It is the first \u2018medium\u2019-class mission implemented in the  Cosmic Vision 2015-25 programme, the current planning cycle for ESA\u2019s space science missions.", "posttime": "2020-05-29 23:39:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u9633,atlas,\u5f57\u661f", "title": "\u6b27\u7a7a\u5c40\u7684\u592a\u9633\u8f68\u9053\u5668\u5c06\u4e8e5\u670831\u65e5-6\u67081\u65e5\u7a7f\u8fc7ATLAS\u5f57\u661f\u7684\u5c3e\u5df4", "title_en": "ESA's Solar Orbiter will pass through comet ATLAS' tail on May 31-June 1", "transed": 1, "url": "http://www.esa.int/Science_Exploration/Space_Science/Solar_Orbiter/Solar_Orbiter_to_pass_through_the_tails_of_Comet_ATLAS", "via": "", "real_tags": ["\u592a\u9633", "atlas", "\u5f57\u661f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ed1\u5ba2\u30021.n.\u6700\u521d\uff0c\u4e00\u9879\u5feb\u901f\u7684\u5de5\u4f5c\uff0c\u751f\u4ea7\u6240\u9700\u7684\u4e1c\u897f\uff0c\u4f46\u4e0d\u662f\u5f88\u597d\u30022.n.\u4e00\u9879\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u5de5\u4f5c\uff0c\u4e5f\u8bb8\u662f\u975e\u5e38\u8017\u65f6\u7684\u5de5\u4f5c\uff0c\u5b83\u80fd\u51c6\u786e\u5730\u4ea7\u751f\u6240\u9700\u7684\u5185\u5bb9\u3002(\u4ee5\u6b64\u7c7b\u63a8\u3002)\u3002\n\u5982\u679c\u4f60\u8bfb\u4e86\u8fd9\u7bc7\u72c2\u70ed\u7684\u6587\u7ae0\uff0c\u5f88\u660e\u663e\uff0c\u5c3d\u7ba1\u8fd9\u7bc7\u6587\u7ae0\u5173\u6ce8\u7684\u662f\u9ed1\u5ba2\uff0c\u9ed1\u5ba2\uff0c\u5728\u8ba1\u7b97\u673a\u548c\u7f16\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u7684\u9ed1\u5ba2\uff0c\u4f46\u4e0e\u8ba1\u7b97\u673a\u548c\u7f16\u7a0b\u7684\u5173\u7cfb\u662f\u76f8\u5f53\u6b66\u65ad\u7684\u3002\u9ed1\u5ba2\u653b\u51fb\u7684\u771f\u6b63\u672c\u8d28\u5728\u522b\u5904\u3002\n\u4ee5hack\u5f00\u5934\u7684\u8bcd\u5927\u591a\u662f\u7531\u6070\u597d\u559c\u6b22\u7535\u8111\u6216\u7f16\u7a0b\u7684\u4eba\u4f7f\u7528\u7684\u3002\u56e0\u6b64\uff0c\u5f53\u884c\u8bdd\u6587\u4ef6\u63cf\u8ff0\u9ed1\u5ba2\u65f6\uff0c\u6240\u6709\u7684\u4f8b\u5b50\u90fd\u4e0e\u8fd9\u4e9b\u9886\u57df\u76f8\u5173\u3002\u4f46\u662f\uff0c\u6b63\u5982\u57c3\u91cc\u514b\u00b7S\u00b7\u96f7\u8499\u5fb7\u5728\u201c\u5927\u6559\u5802\u548c\u96c6\u5e02\u201d\u4e2d\u6307\u51fa\u7684\u90a3\u6837\uff0c\u4f5c\u4e3a\u4e00\u540d\u9ed1\u5ba2\u6839\u672c\u4e0d\u9700\u8981\u4e0e\u8ba1\u7b97\u673a\u548c\u7f16\u7a0b\u6253\u4ea4\u9053\u3002\n[\u2026]\u30026.\u4efb\u4f55\u79cd\u7c7b\u7684\u4e13\u5bb6\u6216\u70ed\u5fc3\u4eba\u58eb\u3002\u4f8b\u5982\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ef\u80fd\u662f\u5929\u6587\u5b66\u9ed1\u5ba2\u30027.\u559c\u6b22\u521b\u9020\u6027\u5730\u514b\u670d\u6216\u7ed5\u8fc7\u9650\u5236\u7684\u667a\u529b\u6311\u6218\u7684\u4eba\u3002\n\u5982\u679c\u6211\u4eec\u575a\u6301\u9ed1\u5ba2\u7684\u539f\u59cb\u610f\u4e49\uff0c\u5f3a\u8c03\u5982\u4f55\u63cf\u8ff0\u9ed1\u5ba2\u7684\u4f8b\u5b506\u548c7\uff0c\u6211\u8ba4\u4e3a\u5927\u591a\u65707\u5c81\u7684\u5b69\u5b50\u6bd4\u5927\u591a\u6570\u6210\u5e74\u4eba\u90fd\u662f\u66f4\u597d\u7684\u9ed1\u5ba2\u3002\n\u6211\u5c06\u89e3\u91ca\u5982\u4f55\u4ee5\u53ca\u4e3a\u4ec0\u4e48\uff0c\u6211\u5c06\u7528\u6211\u4f5c\u4e3a\u7236\u4eb2\u7684\u7ecf\u5386\u4e2d\u7684\u8f76\u4e8b\u6765\u8bc1\u660e\u6211\u7684\u89c2\u70b9\u3002\u662f\u7684\uff0c\u8fd9\u786e\u5b9e\u5c06\u6211\u7684\u6240\u6709\u8bba\u70b9\u5f52\u7c7b\u4e3a\u8f76\u4e8b\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u8f6f\u5f31\u7684\u3002\u901a\u5e38\u662f\u8fd9\u6837\u7684\uff0c\u81f3\u5c11\u662f\u8fd9\u6837--\u4f46\u5b83\u603b\u662f\u6b63\u786e\u7684\u5417\uff1f\n\u6211\u513f\u5b50\u548c\u6211\u7ecf\u5e38\u5728\u4e00\u8d77\u753b\u753b\u3002\u753b\u753b\u65f6\uff0c\u4ed6\u5c3d\u91cf\u753b\u5f97\u597d\uff0c\u4f46\u4ed6\u5e76\u4e0d\u592a\u5728\u610f\u81ea\u5df1\u662f\u5426\u5931\u8d25\u3002\n\u6211\u60f3\uff0c\u4ed6\u60f3\u66f4\u597d\u5730\u753b\u753b\uff0c\u4ee5\u4fbf\u6709\u5de5\u5177\u6765\u5b9e\u73b0\u4ed6\u7684\u60f3\u6cd5\u3002\u56e0\u6b64\uff0c\u5f53\u4ed6\u5bf9\u7ed3\u679c\u4e0d\u6ee1\u610f\u65f6\uff0c\u6709\u65f6\u4f1a\u611f\u5230\u60b2\u4f24\u6216\u6124\u6012\u3002\u5931\u8d25\u5bf9\u4ed6\u6765\u8bf4\u662f\u7167\u5e38\u7684\u4e8b\uff0c\u4ed6\u5e76\u4e0d\u4ecb\u610f\u3002\u5927\u591a\u6570\u5b69\u5b50\u90fd\u5f88\u5584\u4e8e\u4ece\u5931\u8d25\u4e2d\u5b66\u4e60\u3002\u6210\u5e74\u4eba\u662f\u8fd9\u6837\u5417\uff1f\n\u90a3\u6211\u5462\uff1f\u6211\u559c\u6b22\u753b\u753b\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u505a\u5176\u4ed6\u7684\u4e8b\u60c5\u3002\u5982\u679c\u4e0d\u662f\u56e0\u4e3a\u4ed6\uff0c\u6211\u6c38\u8fdc\u4e0d\u4f1a\u753b\u753b\u3002\u4f46\u6211\u7684\u7ecf\u9a8c\u662f\uff0c\u5149\u505a\u4e8b\u60c5\u5f88\u65e0\u804a\u3002\u56e0\u6b64\uff0c\u6211\u4ece\u548c\u6211\u4e03\u5c81\u7684\u513f\u5b50\u4e00\u8d77\u51fa\u53bb\u73a9\u4e2d\u83b7\u5f97\u80fd\u91cf\uff0c\u4ece\u4ed6\u7684\u521b\u9020\u529b\u548c\u597d\u5947\u5fc3\u4e2d\u83b7\u5f97\u80fd\u91cf\u3002\n\u6211\u8bd5\u7740\u5728\u7ed8\u753b\u65f6\u8fd0\u7528\u4e03\u5c81\u5c0f\u5b69\u7684\u5fc3\u6001\uff0c\u8fd9\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u6211\u7684\u7ed8\u753b\u6280\u5de7\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u5f15\u53d1\u4e86\u5bf9\u66f4\u591a\u7684\u6e34\u671b\u3002\u4e00\u79cd\u5feb\u4e50\u3002\u6211\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u5f97\u5f88\u597d\uff0c\u4f46\u6211\u4f1a\u53d8\u5f97\u66f4\u597d\u3002\u6b64\u5916\uff0c\u8fd9\u4e5f\u65e0\u5173\u7d27\u8981\u3002\n\u5f53\u6211\u4eec\u5bf9\u4e8b\u60c5\u5145\u6ee1\u70ed\u60c5\u65f6\uff0c\u6211\u4eec\u5c31\u4f1a\u8fdb\u6b65\u5f88\u5feb\u3002\u4f5c\u4e3a\u6210\u5e74\u4eba\uff0c\u6211\u4eec\u4e0d\u80fd\u50cf\u5b69\u5b50\u4e00\u6837\u8fdb\u6b65\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u65b0\u4e8b\u7269\uff0c\u5373\u4f7f\u662f\u5728\u5e74\u8001\u7684\u65f6\u5019\u3002\u60f3\u8981\u53d8\u5f97\u66f4\u597d\uff0c\u901a\u5e38\u53ea\u662f\u4e00\u4e2a\u60f3\u529e\u6cd5\u5f15\u8d77\u5174\u8da3\u7684\u95ee\u9898\u3002\u91ca\u653e\u521b\u9020\u529b\u7684\u65b9\u6cd5\u3002\n\u521b\u9020\u529b\u9700\u8981\u52c7\u6c14\u3002\u5982\u679c\u4f60\u4e0d\u5c55\u793a\u81ea\u5df1\u7684\u6240\u4f5c\u6240\u4e3a\u4e0d\u8981\u7d27\uff0c\u8fd9\u4ecd\u7136\u9700\u8981\u52c7\u6c14\uff0c\u56e0\u4e3a\u81f3\u5c11\u4f60\u4f1a\u770b\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u4f60\u4f1a\u81ea\u5df1\u5224\u65ad\u7684\u3002\u4e5f\u8bb8\u4e0d\u662f\u5f88\u523b\u8584\uff0c\u4e5f\u8bb8\u53ea\u662f\u5e26\u7740\u8bbd\u523a\u548c\u5a31\u4e50\u3002\u4f46\u4f60\u4f1a\u5224\u65ad\u51fa\u6765\u7684\u3002\u5982\u679c\u4f60\u4e0d\u5728\u4e4e\uff0c\u4f60\u5c31\u4e0d\u4f1a\u753b\u753b\uff0c\u4e0d\u4f1a\u5199\u6587\u5b57\uff0c\u4e0d\u4f1a\u5199\u97f3\u4e50\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u5df1\u52a8\u624b\u505a\u7535\u8111\u7a0b\u5e8f\u3002\n\u4f5c\u4e3a\u6210\u5e74\u4eba\uff0c\u6211\u4eec\u4e0d\u80fd\u63a5\u8fd17\u5c81\u7684\u5b69\u5b50\u63a2\u7d22\u4e16\u754c\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u3002\u6211\u4eec\u53ea\u9700\u8981\u50cf\u4e00\u4e2a7\u5c81\u7684\u5b69\u5b50\u4e00\u6837\u66f4\u597d\u5730\u7834\u89e3\u8fd9\u4e2a\u4e16\u754c\u3002\n\u542c\u8d77\u6765\uff0c\u6211\u4eec\u7684\u5b69\u5b50\u628a\u6211\u4eec\u8fd9\u4e9b\u6210\u5e74\u4eba\u5f53\u4f5c\u699c\u6837\uff0c\u4ed6\u4eec\u88ab\u6211\u4eec\u3001\u6211\u4eec\u7684\u6240\u4f5c\u6240\u4e3a\u3001\u6211\u4eec\u7684\u8a00\u8bba\u548c\u6211\u4eec\u7684\u884c\u4e3a\u6240\u6fc0\u52b1\u3002\u7136\u800c\uff0c\u5c31\u521b\u9020\u529b\u548c\u9ed1\u5ba2\u884c\u4e3a\u800c\u8a00\uff0c\u4f60\u4e0d\u5fc5\u82b1\u592a\u591a\u65f6\u95f4\u7528\u4e50\u9ad8\u79ef\u6728\u3001\u753b\u753b\u3001\u73a9\u800d\u548c\u8ba8\u8bba\uff0c\u5c31\u4f1a\u610f\u8bc6\u5230\u5728\u5b8c\u6210\u4e8b\u60c5\u3001\u89e3\u51b3\u4e0e\u521b\u9020\u6027\u4efb\u52a1\u76f8\u5173\u7684\u95ee\u9898\u65b9\u9762\uff0c\u4f60\u5c06\u6bd4\u4e0d\u4e0a\u4f607\u5c81\u7684\u5b69\u5b50\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u6210\u5e74\u4eba\uff0c\u4f60\u53ef\u80fd\u4f1a\u505a\u51fa\u4e00\u4ef6\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u4f5c\u54c1\uff0c\u800c\u4e14\u53ef\u80fd\u975e\u5e38\u8017\u65f6\uff0c\u80fd\u751f\u4ea7\u51fa\u4f60\u6240\u9700\u8981\u7684\u4e1c\u897f(\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u662f\u9ed1\u5ba2)\uff0c\u4f46\u4f60\u4e0d\u592a\u53ef\u80fd\u5728\u751f\u4ea7\u6240\u9700\u4e1c\u897f\u7684\u5feb\u901f\u5de5\u4f5c\u65b9\u9762\u8d76\u4e0a\u4f607\u5c81\u7684\u5b69\u5b50\u3002(\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u662f\u9ed1\u5ba2\u653b\u51fb\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50)\uff0c\u4f60\u53ef\u80fd\u4f1a\u505a\u51fa\u4e00\u4ef6\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u4f5c\u54c1\uff0c\u4e5f\u8bb8\u975e\u5e38\u8017\u65f6\uff0c\u4f46\u4f60\u4e0d\u592a\u53ef\u80fd\u50cf\u4f607\u5c81\u7684\u5b69\u5b50\u90a3\u6837\u5feb\u901f\u5730\u751f\u4ea7\u51fa\u6240\u9700\u7684\u4e1c\u897f\u3002(\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u662f\u9ed1\u5ba2\u653b\u51fb\u4f60\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50)\uff0c\u4f60\u53ef\u80fd\u4f1a\u505a\u51fa\u4e00\u4ef6\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u4f5c\u54c1\uff0c\u800c\u4e14\u53ef\u80fd\u975e\u5e38\u8017\u65f6\u3002\n\u6211\u8d8a\u662f\u53cd\u601d\u827e\u4f26\u00b7\u51ef(Alan Kay)\u65e9\u671f\u7684\u9879\u76ee\uff0c\u4ee5\u53ca\u4ed6\u5173\u4e8e\u6559\u80b2\u548c\u52a8\u6001\u4e16\u754c(Dynamicland)\u7684\u601d\u60f3(\u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u540d\u5b57\u6709\u70b9\u50cf\u51ef\u7684\u201c\u52a8\u6001\u56fe\u4e66\u201d(DynaBook)\u6982\u5ff5)\uff0c\u6211\u5c31\u8d8a\u786e\u4fe1\u6211\u4eec\u9700\u8981\u91cd\u65b0\u601d\u8003\u6559\u80b2\u3002\n\u672a\u6765\u9700\u8981\u66f4\u591a\u7684\u9ed1\u5ba2\uff0c\u800c\u4e0d\u662f\u66f4\u5c11\u3002\u4f5c\u4e3a\u4e00\u540d\u5bb6\u957f\uff0c\u4f60\u4e0d\u4f1a\u60f3\u8981\u62c5\u5fc3\u4f607\u5c81\u7684\u5b69\u5b50\u5728\u957f\u5927\u548c\u63a5\u53d7\u66f4\u8ba4\u771f\u7684\u6559\u80b2\u540e\uff0c\u521b\u9020\u529b\u4f1a\u67af\u840e\u548c\u6d88\u5931\u3002\n\u8001\u5b9e\u8bf4\uff0c\u5f53\u6211\u4eec\u4f5c\u4e3a\u6210\u5e74\u4eba\u56de\u60f3\u8d77\u6765\u7684\u65f6\u5019\uff0c\u6211\u4eec\u80fd\u8bf4\u6211\u4eec\u73b0\u5728\u548c\u8fc7\u53bb\u4e00\u6837\u6709\u521b\u9020\u529b\u5417\uff1f\u6211\u4e00\u4e2a\u4eba\u90fd\u4e0d\u80fd\u3002\u6211\u73b0\u5728\u4e0d\u50cf\u4e03\u5c81\u65f6\u90a3\u6837\u662f\u4e2a\u9ed1\u5ba2\u4e86\u3002\n\u6210\u5e74\u4eba\u5931\u8d25\u4e86\uff0c7\u5c81\u7684\u5b69\u5b50(\u5728\u6b64\u523b)\u53ea\u662f\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u80fd\u5b9e\u73b0\u4e00\u4e9b\u5b8f\u4f1f\u7684\u613f\u666f\u800c\u60b2\u4f24\u3002\u8fd9\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u4f53\u9a8c\uff1b\u4e5f\u8bb8\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e487\u5c81\u7684\u5b69\u5b50\u6bd4\u6210\u5e74\u4eba\u66f4\u64c5\u957f\u9ed1\u5ba2\u3002\u2026\u3002\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u4f1a\u771f\u7684\u5931\u8d25\u5417\uff1f", "note_en": "HACK. 1. n. Originally, a quick job that produces what is needed, but not well. 2. n. An incredibly good, and perhaps very time-consuming, piece of work that produces exactly what is needed. ( And so on.)\n If you read this cult text it&#39;s clear that even though this text focus hack, hacker, hackish in the context of computers and programming the relation to computers and programming is quite arbitrary. The true essence of hacking lies elsewhere.\n Words beginning with hack mostly are used by people who happen to enjoy computers or programming. And therefore when The Jargon File describes a &#39;hacker&#39; all examples are related to such areas. But as  Eric S. Raymond notes in The Cathedral and the Bazaar, being a hacker doesn&#39;t have to do anything at all with computers and programming.\n  [\u2026] 6. An expert or enthusiast of any kind. One might be an astronomy hacker, for example. 7. One who enjoys the intellectual challenge of creatively overcoming or circumventing limitations.\n If we hold by the original sense of a hack, emphasize examples 6 and 7 of how to describe a hacker, I argue that most seven-year-olds are better hackers than most adults.\n I will explain how and why, and I will use anecdotes from my experience as a father as a &#39;proof&#39; for my point. And yes, this does classify all my arguments as  &#39;anecdotical&#39; and they should, therefore, be considered weak. Often true, at least -  but is it always true though?\n My son and I draw a lot together. When drawing, he tries to draw as good as he can, but he doesn&#39;t care much if he &#39;fails&#39;.\n He wants to get better at drawing to have tools to materialize his ideas, I guess. And therefore he sometimes gets sad or angry a short while when he is not satisfied with the result. &#39;Failing&#39; is business as usual for him, he doesn&#39;t mind. Most kids are great at learning from failure. Is this true for adults?\n And me? I like to draw, but I like doing other things more. If it weren&#39;t for him, I would never draw. But my experience is that &#39;just doing things&#39; is boring. Therefore I get energy from hanging out with my seven-year-old, from his creativity and curiosity.\n I&#39;ve tried to apply the mindset of a seven-year-old when drawing, and this has vastly improved my drawing skills. More importantly, it has triggered a hunger for more. A joy. I will never get very good, but I will get better. Also, it doesn&#39;t matter.\n   When we&#39;re passionate about things we make progress quickly. As adults, we can&#39;t progress at the same speed as kids, but we can learn new things, even at an old age. Often &#39;getting better&#39; is only a question of finding ways of getting intrigued. Ways of unlocking creativity.\n Creativity takes courage. It doesn&#39;t matter if you don&#39;t show what you do, it still takes courage because at least you will see the end product. You will judge it yourself. Perhaps not harsly, perhaps only with irony and amusement. But judge it you will. If you didn&#39;t care, you would not draw, write a text, a piece of music, or an DIY computer program.\n As adults, we can&#39;t get close to seven-year-olds exploring the world. But we can try. We just have to get better at hacking the world like a seven-year-old.\n   It&#39;s sound that our children have us, adults, as role models, that they are inspired by us, by what we do, what we say, and by how we act. However, with regard to creativity and hacking, you don&#39;t have to spend much time building with lego, drawing, playing and discussing to realize that you won&#39;t match your seven-year-old in terms of getting things done, solving problems related to creative tasks.\n As an adult, you may make &#39;[a]n incredibly good, and perhaps very time-consuming, piece of work that produces exactly what is needed&#39; (the second example of &#39;hack&#39;), but it&#39;s unlikely that you&#39;ll match your seven-year-old in &#39;a quick job that produces what is needed&#39;.\n      The more I reflect on the early projects of Alan Kay and his ideas on education and  Dynamicland (a name flirting with Kay&#39;s  notion of a &#39;dynabook&#39;, I think), the more convinced I get that we need to  rethink education.\n The future needs more hackers, not less. And as a parent, you don&#39;t want to be anxious that the creativity of your seven-year-old, when older and more seriously schooled, will wither and vanish.\n Honestly, when we as adults think back, can we say we&#39;re as creative now as we used to be? I can&#39;t for one. I am less of a hacker now than I was seven years old.\n  Adults fail, seven-year-olds are just sad (in the moment) because they were not able to materialize some grande vision. This is two separate experiences; and perhaps this is precisely why seven-year-olds are better hackers than adults? \u2026because they don&#39;t really fail?", "posttime": "2020-05-29 23:39:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed1\u5ba2,olds", "title": "7\u5c81\u7684\u5b69\u5b50\u662f\u9ed1\u5ba2\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u6a21\u4eff\u4ed6\u4eec", "title_en": "Seven-year-olds as hackers, and why we should imitate them", "transed": 1, "url": "https://herebeseaswines.net/essays/2020-05-29-seven-year-olds-as-hackers-and-why-we-should-imitate-them", "via": "", "real_tags": ["\u9ed1\u5ba2", "olds"]}, {"category": "", "categoryclass": "", "imagename": "b749239fede2de70bc371ce330360235.jpg", "infoid": 1004257, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9Dropbox\u7684\u4ea7\u54c1\u8bbe\u8ba1\u611f\u5174\u8da3\u5417\uff1f\u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u7528\u6765\u89e3\u51b3\u95ee\u9898\u3001\u505a\u51fa\u51b3\u7b56\u548c\u4ea4\u6d41\u60f3\u6cd5\u7684\u5de5\u5177\u3002", "note_en": "Curious about product design at Dropbox? Here\u2019s a look at tools we use for solving problems, making decisions, and communicating ideas. ", "posttime": "2020-05-29 23:38:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u5fc3\u667a,models,\u4ea7\u54c1\u8bbe\u8ba1", "title": "\u8bbe\u8ba1\u5e08\u5fc3\u667a\u6a21\u578b(2019)", "title_en": "Mental models for designers (2019)", "transed": 1, "url": "https://dropbox.design/article/mental-models-for-designers", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u5fc3\u667a", "models", "\u4ea7\u54c1\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "2bd8776b22ac6709b4b656fd199fc5d1.jpg", "infoid": 1004255, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Android\u4e0a\u7684\u8c37\u6b4c\u5730\u56fe\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u70b9\u51fb\u4ee3\u8868\u4ed6\u4eec\u5f53\u524d\u4f4d\u7f6e\u7684\u84dd\u70b9\u6765\u67e5\u770b\u5e76\u4e0e\u670b\u53cb\u5206\u4eab\u4ed6\u4eec\u72ec\u7279\u7684\u516d\u4f4d\u6570\u5750\u6807\u3002\u4efb\u4f55\u6709\u4ee3\u7801\u7684\u4eba\u90fd\u53ef\u4ee5\u5728\u8c37\u6b4c\u5730\u56fe\u6216\u8c37\u6b4c\u641c\u7d22\u4e0a\u67e5\u627e\uff0c\u4ee5\u83b7\u5f97\u76ee\u7684\u5730\u7684\u51c6\u786e\u4f4d\u7f6e\u3002\n\u4ee3\u7801\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1aG6G4+CJ\u5fb7\u91cc\uff0c\u5370\u5ea6\u3002\u8c37\u6b4c\u8868\u793a\uff0c\u5b83\u5c06\u4e16\u754c\u7684\u5730\u7406\u8868\u9762\u5212\u5206\u4e3a\u5e73\u94fa\u533a\u57df\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u533a\u57df\u8d4b\u4e88\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u516d\u4e2a\u5b57\u6bcd\u7684\u4ee3\u7801\u4ee5\u53ca\u57ce\u5e02\u548c\u56fd\u5bb6\u7684\u540d\u79f0\u3002\n\u5730\u7403\u4e0a\u8d85\u8fc720\u4ebf\u4eba\u8981\u4e48\u6ca1\u6709\u5730\u5740\uff0c\u8981\u4e48\u6709\u4e00\u4e2a\u4e0d\u5bb9\u6613\u627e\u5230\u7684\u5730\u5740\u3002\u8fd9\u4e00\u6311\u6218\u5728\u5370\u5ea6\u7b49\u53d1\u8fbe\u5e02\u573a\u66f4\u4e3a\u666e\u904d\uff0c\u5728\u90a3\u91cc\uff0c\u8857\u9053\u5730\u5740\u5f80\u5f80\u4e0e\u4e00\u6bb5\u6587\u5b57\u4e00\u6837\u957f\uff0c\u4eba\u4eec\u5f80\u5f80\u4f9d\u8d56\u9644\u8fd1\u7684\u5730\u6807\u6765\u5bfc\u822a\u3002\n\u8c37\u6b4c\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u5bb6\u8bd5\u56fe\u7b80\u5316\u5bfb\u5740\u7cfb\u7edf\u7684\u516c\u53f8\u3002\u603b\u90e8\u4f4d\u4e8e\u4f26\u6566\u7684What3Words\u5c06\u4e16\u754c\u5212\u5206\u4e3a57\u4e07\u4ebf\u4e2a\u65b9\u5757\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u65b9\u5757\u5206\u914d\u4e86\u4e09\u4e2a\u968f\u673a\u7ec4\u5408\u7684\u5355\u8bcd\uff0c\u5982toddler.geologist.Animated\uff0c\u8fd9\u4e9b\u5355\u8bcd\u66f4\u5bb9\u6613\u7834\u8bd1\u548c\u5206\u4eab\u3002\u8be5\u516c\u53f8\u65e9\u4e9b\u65f6\u5019\u544a\u8bc9TechCrunch\uff0c\u5b83\u5df2\u7ecf\u4e0e\u5305\u62ec\u51e0\u5bb6\u6c7d\u8f66\u5236\u9020\u5546\u5728\u5185\u7684\u591a\u5bb6\u516c\u53f8\u5408\u4f5c\uff0c\u4ee5\u6269\u5927\u5176\u8986\u76d6\u8303\u56f4\u3002\n\u4f46What 3Words\u548c\u5df2\u67095\u5e74\u5386\u53f2\u7684Project Plus\u4ee3\u7801\u90fd\u96be\u4ee5\u83b7\u5f97\u66f4\u5e7f\u6cdb\u7684\u5438\u5f15\u529b\u3002\u5f53\u8c37\u6b4c\u5728\u5370\u5ea6\u5ba3\u5e03\u8fd9\u4e00\u9879\u76ee\u65f6\uff0c\u5176\u9ad8\u7ba1\u544a\u8bc9\u672c\u62a5\u8bb0\u8005\uff0c\u4ed6\u4eec\u6b63\u5728\u63a2\u7d22\u4e0e\u7269\u6d41\u516c\u53f8\u548c\u653f\u5e9c\u673a\u6784(\u5982\u90ae\u653f\u90e8\u95e8)\u5408\u4f5c\u7684\u65b9\u6cd5\uff0c\u4ee5\u83b7\u5f97\u66f4\u5e7f\u6cdb\u7684\u91c7\u7528-\u5c3d\u7ba1\u8fd9\u4e9b\u90fd\u8fd8\u6ca1\u6709\u5b9e\u73b0\u3002\u8fd9\u4e9b\u9ad8\u7ba1\u8bf4\uff0c\u5f53\u65f6\uff0c\u8be5\u516c\u53f8\u8fd8\u5728\u5370\u5ea6\u7684\u4e00\u4e9b\u6f14\u5531\u4f1a\u4e0a\u6d4b\u8bd5\u4e86Plus\u4ee3\u7801\u3002\n\u4e3a\u4e86\u83b7\u5f97\u66f4\u5e7f\u6cdb\u7684\u91c7\u7528\uff0c\u8c37\u6b4c\u57282018\u5e74\u5f00\u6e90Plus\u4ee3\u7801\uff0c\u4ee5\u4fbf\u5f00\u53d1\u4eba\u5458\u548c\u4f01\u4e1a\u53ef\u4ee5\u627e\u5230\u81ea\u5df1\u7684\u7528\u4f8b\u3002\u201c\u5982\u679c\u4f60\u66fe\u7ecf\u9047\u5230\u8fc7\u7d27\u6025\u60c5\u51b5\uff0c\u4f60\u77e5\u9053\u80fd\u591f\u5206\u4eab\u4f60\u7684\u4f4d\u7f6e\u4ee5\u5bfb\u6c42\u5e2e\u52a9\u6765\u8f7b\u677e\u627e\u5230\u4f60\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u7136\u800c\uff0c\u5728\u4e16\u754c\u4e0a\u7684\u8bb8\u591a\u5730\u65b9\uff0c\u7ec4\u7ec7\u6bcf\u5929\u90fd\u5728\u52aa\u529b\u5e94\u5bf9\u8fd9\u4e00\u6311\u6218\uff0c\u201c\u8be5\u516c\u53f8\u4eca\u5929\u8868\u793a\u3002", "note_en": "Google   Maps users on  Android   can now tap the blue dot that represents their current location to view and share their unique six-digit coordinate with friends. Anyone with the code can look it up on Google Maps or Google Search to get the precise location of the destination.\n The codes look like this:  G6G4+CJ Delhi, India. Google says it divides the geographical surface of the world into tiled areas and attributes a unique six-letter code and the name of the city and country to each of them.\n   More than 2 billion people on the planet either don\u2019t have an address or have an address that isn\u2019t easy to locate. This challenge is more prevalent in developed markets such as India where a street address could often be as long as a paragraph, and where people often rely on nearby landmarks to navigate their way.\n Google is not the only firm that is attempting to simplify the addressing system. London-based  what3words has broken the world into 57 trillion squares and assigned each of those blocks with  three randomly combined words, such as toddler.geologist.animated that are easier to decipher and share. The company told TechCrunch earlier that it had partnered with a number of firms, including several carmakers, to expand its reach.\n But  what3words   and five-year-old project Plus Codes have both struggled to gain wider traction. When Google announced this project in India, its executives told this correspondent that they were exploring ways to work with logistics firms and government agencies such as the postal department to get wider adoption \u2014 though none of it has materialized yet. At the time, the company had also tested Plus Codes at some concerts in India, the executives said.\n To get wider adoption, Google open-sourced Plus Codes in 2018 so that developers and businesses could find their own use cases. \u201cIf you\u2019ve ever been in an emergency, you know that being able to share your location for help to easily find you is critical. Yet in many places in the world, organizations struggle with this challenge on a daily basis,\u201d the company  said today.", "posttime": "2020-05-29 23:22:25", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4ee3\u7801,google,\u8c37\u6b4c,sharing", "title": "\u8c37\u6b4c\u5728\u5168\u7403\u7b80\u5316\u5bfb\u5740\u7cfb\u7edf\u7684\u52aa\u529b\u4e2d\u4f7f\u5171\u4eabPlus\u4ee3\u7801\u53d8\u5f97\u66f4\u5bb9\u6613", "title_en": "Google Makes Sharing Plus Codes Easier in a Push To Simplify Addressing System Globally", "transed": 1, "url": "https://techcrunch.com/2020/05/28/google-makes-sharing-plus-codes-easier-in-a-push-to-simply-addressing-system-globally/", "via": "", "real_tags": ["\u4ee3\u7801", "google", "\u8c37\u6b4c", "sharing"]}, {"category": "", "categoryclass": "", "imagename": "fe0470b0840ffa5f37eea274a41a7c80.jpg", "infoid": 1004254, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u5de5\u667a\u80fd(AI)\u4f3c\u4e4e\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u806a\u660e\u3002\u6bcf\u90e8iPhone\u90fd\u6bd4\u4e0a\u4e00\u90e8\u66f4\u597d\u5730\u5b66\u4e60\u4f60\u7684\u8138\u3001\u58f0\u97f3\u548c\u4e60\u60ef\uff0c\u4eba\u5de5\u667a\u80fd\u5bf9\u9690\u79c1\u548c\u5de5\u4f5c\u6784\u6210\u7684\u5a01\u80c1\u4e5f\u5728\u7ee7\u7eed\u589e\u957f\u3002\u8fd9\u4e00\u6fc0\u589e\u53cd\u6620\u4e86\u66f4\u5feb\u7684\u82af\u7247\u3001\u66f4\u591a\u7684\u6570\u636e\u548c\u66f4\u597d\u7684\u7b97\u6cd5\u3002\u9ebb\u7701\u7406\u5de5\u5b66\u9662(MIT)\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u751f\u6234\u7ef4\u65af\u00b7\u5e03\u62c9\u6d1b\u514b(Davis Blalock)\u8868\u793a\uff0c\u4e00\u4e9b\u6539\u8fdb\u6765\u81ea\u4e8e\u5fae\u8c03\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u7684\u53d1\u660e\u8005\u58f0\u79f0\u7684\u6838\u5fc3\u521b\u65b0-\u5176\u4e2d\u4e00\u4e9b\u6536\u76ca\u53ef\u80fd\u6839\u672c\u4e0d\u5b58\u5728\u3002\u5e03\u62c9\u6d1b\u514b\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u6bd4\u8f83\u4e86\u6570\u5341\u79cd\u6539\u5584\u795e\u7ecf\u7f51\u7edc\u7684\u65b9\u6cd5\uff0c\u795e\u7ecf\u7f51\u7edc\u662f\u4e00\u79cd\u677e\u6563\u5730\u6a21\u4eff\u5927\u8111\u7684\u8f6f\u4ef6\u67b6\u6784\u3002\u201c50\u7bc7\u8bba\u6587\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u5f88\u660e\u663e\uff0c\u5b83\u751a\u81f3\u4e0d\u662f\u5f88\u660e\u663e\u7684\u827a\u672f\u72b6\u6001\u662f\u4ec0\u4e48\u3002\u201d\n\u7814\u7a76\u4eba\u5458\u8bc4\u4f30\u4e8681\u79cd\u4fee\u526a\u7b97\u6cd5\uff0c\u8fd9\u4e9b\u7b97\u6cd5\u901a\u8fc7\u4fee\u526a\u4e0d\u9700\u8981\u7684\u8fde\u63a5\u6765\u63d0\u9ad8\u795e\u7ecf\u7f51\u7edc\u7684\u6548\u7387\u3002\u6240\u6709\u4eba\u90fd\u4ee5\u7565\u6709\u4e0d\u540c\u7684\u65b9\u5f0f\u58f0\u79f0\u4f18\u8d8a\u3002\u4f46\u5f88\u5c11\u6709\u4eba\u5bf9\u5b83\u4eec\u8fdb\u884c\u9002\u5f53\u7684\u6bd4\u8f83-\u5f53\u7814\u7a76\u4eba\u5458\u8bd5\u56fe\u5e76\u6392\u8bc4\u4f30\u5b83\u4eec\u65f6\uff0c\u6ca1\u6709\u660e\u786e\u7684\u8bc1\u636e\u8868\u660e\u572810\u5e74\u7684\u65f6\u95f4\u91cc\u8868\u73b0\u6709\u6240\u6539\u5584\u3002\u8fd9\u4e00\u7ed3\u679c\u57283\u6708\u4efd\u7684\u673a\u5668\u5b66\u4e60\u548c\u7cfb\u7edf\u4f1a\u8bae\u4e0a\u516c\u5e03\uff0c\u8fd9\u8ba9\u5e03\u62c9\u6d1b\u514b\u7684\u535a\u58eb\u5bfc\u5e08\u3001\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u53e4\u5854\u683c\u611f\u5230\u60ca\u8bb6\uff0c\u4ed6\u8bf4\uff0c\u4e0d\u5747\u5300\u7684\u6bd4\u8f83\u672c\u8eab\u53ef\u80fd\u89e3\u91ca\u4e86\u505c\u6ede\u4e0d\u524d\u7684\u539f\u56e0\u3002\u201c\u8fd9\u662f\u8001\u751f\u5e38\u8c08\uff0c\u5bf9\u5417\uff1f\u201d\u53e4\u5854\u683c\u8bf4\u3002\u201c\u5982\u679c\u4f60\u4e0d\u80fd\u8861\u91cf\u67d0\u4ef6\u4e8b\uff0c\u90a3\u5c31\u5f88\u96be\u628a\u5b83\u505a\u5f97\u66f4\u597d.\u201d\n\u7814\u7a76\u4eba\u5458\u5f00\u59cb\u610f\u8bc6\u5230\u4eba\u5de5\u667a\u80fd\u8bb8\u591a\u5b50\u9886\u57df\u8fdb\u5c55\u4e0d\u7a33\u7684\u8ff9\u8c61\u30022019\u5e74\u5bf9\u641c\u7d22\u5f15\u64ce\u4e2d\u4f7f\u7528\u7684\u4fe1\u606f\u68c0\u7d22\u7b97\u6cd5\u8fdb\u884c\u7684\u835f\u8403\u5206\u6790\u5f97\u51fa\u4e86\u201c\u9ad8\u6c34\u4f4d\u7ebf\u2026\u201d\u7684\u7ed3\u8bba\u3002\u5b9e\u9645\u4e0a\u8bbe\u5b9a\u57282009\u5e74\u3002\u201c\u30022019\u5e74\u7684\u53e6\u4e00\u9879\u7814\u7a76\u590d\u5236\u4e86\u4e03\u4e2a\u795e\u7ecf\u7f51\u7edc\u63a8\u8350\u7cfb\u7edf\uff0c\u5c5e\u4e8e\u5a92\u4f53\u6d41\u5a92\u4f53\u670d\u52a1\u4f7f\u7528\u7684\u90a3\u79cd\u7cfb\u7edf\u3002\u7814\u7a76\u53d1\u73b0\uff0cSix\u672a\u80fd\u8d85\u8d8a\u51e0\u5e74\u524d\u5f00\u53d1\u7684\u7b80\u5355\u5f97\u591a\u7684\u975e\u795e\u7ecf\u7b97\u6cd5\uff0c\u5f53\u65f6\u65e9\u671f\u7684\u6280\u672f\u8fdb\u884c\u4e86\u5fae\u8c03\uff0c\u63ed\u793a\u4e86\u8be5\u9886\u57df\u7684\u201c\u5e7b\u5f71\u8fdb\u5c55\u201d\u3002\u57283\u6708\u4efd\u53d1\u5e03\u5728arxiv\u4e0a\u7684\u53e6\u4e00\u7bc7\u8bba\u6587\u4e2d\uff0c\u5eb7\u5948\u5c14\u5927\u5b66(Cornell University)\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u51ef\u6587\u00b7\u9a6c\u65af\u683c\u96f7\u592b(Kevin MusGrave)\u7814\u7a76\u4e86\u635f\u5931\u51fd\u6570\uff0c\u8fd9\u662f\u4e00\u79cd\u4ece\u6570\u5b66\u4e0a\u6307\u5b9a\u76ee\u6807\u7684\u7b97\u6cd5\u7684\u4e00\u90e8\u5206\u3002\u9a6c\u65af\u683c\u96f7\u592b\u5728\u4e00\u9879\u6d89\u53ca\u56fe\u50cf\u68c0\u7d22\u7684\u4efb\u52a1\u4e2d\uff0c\u5e73\u7b49\u5730\u6bd4\u8f83\u4e86\u5176\u4e2d\u7684\u5341\u51e0\u4e2a\u4eba\uff0c\u53d1\u73b0\u4e0e\u4ed6\u4eec\u7684\u5f00\u53d1\u8005\u7684\u8bf4\u6cd5\u76f8\u53cd\uff0c\u51c6\u786e\u6027\u81ea2006\u5e74\u4ee5\u6765\u5e76\u6ca1\u6709\u63d0\u9ad8\u3002\u9a6c\u65af\u683c\u96f7\u592b\u8bf4\uff1a\u201c\u603b\u662f\u6709\u8fd9\u6837\u4e00\u6ce2\u53c8\u4e00\u6ce2\u7684\u7092\u4f5c\u3002\u201d\n\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u6536\u76ca\u53ef\u4ee5\u6765\u81ea\u5176\u4f53\u7cfb\u7ed3\u6784\u3001\u635f\u5931\u51fd\u6570\u6216\u4f18\u5316\u7b56\u7565\u7684\u6839\u672c\u6539\u53d8-\u5b83\u4eec\u5982\u4f55\u4f7f\u7528\u53cd\u9988\u6765\u6539\u8fdb\u3002\u4f46\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66(Carnegie Mellon University)\u7814\u7a76\u56fe\u50cf\u8bc6\u522b\u6a21\u578b\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u9f50\u79d1\u00b7\u79d1\u5c14\u7279(Zico Kolter)\u8868\u793a\uff0c\u5bf9\u8fd9\u4e9b\u6a21\u578b\u8fdb\u884c\u5fae\u5999\u7684\u8c03\u6574\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u4ed6\u7814\u7a76\u7684\u56fe\u50cf\u8bc6\u522b\u6a21\u578b\u88ab\u8bad\u7ec3\u6210\u5bf9\u9ed1\u5ba2\u7684\u201c\u654c\u610f\u653b\u51fb\u201d\u5177\u6709\u514d\u75ab\u529b\u3002\u65e9\u671f\u7684\u4e00\u79cd\u79f0\u4e3a\u6295\u5f71\u68af\u5ea6\u4e0b\u964d(PGD)\u7684\u5bf9\u6297\u6027\u8bad\u7ec3\u65b9\u6cd5\uff0c\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6a21\u578b\u53ea\u5728\u771f\u5b9e\u548c\u6b3a\u9a97\u6027\u7684\u4f8b\u5b50\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u4f3c\u4e4e\u5df2\u7ecf\u88ab\u66f4\u590d\u6742\u7684\u65b9\u6cd5\u6240\u8d85\u8d8a\u3002\u4f46\u57282\u6708\u4efd\u7684\u4e00\u7bc7arxiv\u8bba\u6587\u4e2d\uff0c\u79d1\u5c14\u7279\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u53d1\u73b0\uff0c\u5f53\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6280\u5de7\u6765\u589e\u5f3a\u5b83\u4eec\u65f6\uff0c\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u53d6\u5f97\u4e86\u5927\u81f4\u76f8\u540c\u7684\u6548\u679c\u3002\n\u79d1\u5c14\u7279\u7684\u535a\u58eb\u751f\u83b1\u65af\u5229\u00b7\u8d56\u65af(Leslie Rice)\u8bf4\uff1a\u201c\u8fd9\u662f\u975e\u5e38\u4ee4\u4eba\u60ca\u8bb6\u7684\uff0c\u8fd9\u662f\u4ee5\u524d\u6ca1\u6709\u88ab\u53d1\u73b0\u7684\u3002\u201d\u79d1\u5c14\u7279\u8bf4\uff0c\u4ed6\u7684\u53d1\u73b0\u8868\u660e\uff0c\u50cfPGD\u8fd9\u6837\u7684\u521b\u65b0\u5f88\u96be\u83b7\u5f97\uff0c\u800c\u4e14\u5f88\u5c11\u6709\u5b9e\u8d28\u6027\u7684\u6539\u5584\u3002\u201c\u5f88\u660e\u663e\uff0cPGD\u5b9e\u9645\u4e0a\u5c31\u662f\u6b63\u786e\u7684\u7b97\u6cd5\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u8fd9\u662f\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\uff0c\u4eba\u4eec\u5e0c\u671b\u627e\u5230\u8fc7\u4e8e\u590d\u6742\u7684\u89e3\u51b3\u65b9\u6848\u3002\u201d\n\u5176\u4ed6\u4e3b\u8981\u7684\u7b97\u6cd5\u8fdb\u6b65\u4f3c\u4e4e\u4e5f\u7ecf\u53d7\u4f4f\u4e86\u65f6\u95f4\u7684\u8003\u9a8c\u30021997\u5e74\uff0c\u8bed\u8a00\u7ffb\u8bd1\u4e2d\u4f7f\u7528\u4e86\u4e00\u79cd\u540d\u4e3a\u957f\u77ed\u671f\u8bb0\u5fc6(LSTM)\u7684\u4f53\u7cfb\u7ed3\u6784\uff0c\u8fd9\u662f\u4e00\u4e2a\u91cd\u5927\u7a81\u7834\u3002\u7ecf\u8fc7\u9002\u5f53\u7684\u57f9\u8bad\u540e\uff0cLSTM\u7684\u6027\u80fd\u4e0e20\u5e74\u540e\u5f00\u53d1\u51fa\u7684\u7406\u5e94\u66f4\u5148\u8fdb\u7684\u4f53\u7cfb\u7ed3\u6784\u7684\u6027\u80fd\u76f8\u5f53\u3002\u673a\u5668\u5b66\u4e60\u7684\u53e6\u4e00\u4e2a\u7a81\u7834\u51fa\u73b0\u57282014\u5e74\uff0c\u51fa\u73b0\u4e86\u751f\u6210\u6027\u5bf9\u624b\u7f51\u7edc(GANS)\uff0c\u4f8b\u5982\uff0c\u5b83\u5728\u521b\u5efa\u548c\u6279\u8bc4\u5faa\u73af\u4e2d\u5c06\u7f51\u7edc\u914d\u5bf9\uff0c\u4ee5\u63d0\u9ad8\u5b83\u4eec\u4ea7\u751f\u56fe\u50cf\u7684\u80fd\u529b\u30022018\u5e74\u7684\u4e00\u7bc7\u8bba\u6587\u62a5\u9053\uff0c\u7ecf\u8fc7\u8db3\u591f\u7684\u8ba1\u7b97\uff0c\u6700\u521d\u7684GaN\u65b9\u6cd5\u53ef\u4ee5\u4e0e\u540e\u6765\u51e0\u5e74\u7684\u65b9\u6cd5\u7684\u80fd\u529b\u76f8\u5339\u914d\u3002\n\u79d1\u5c14\u7279\u8bf4\uff0c\u4e0e\u8c03\u6574\u73b0\u6709\u7684\u7b97\u6cd5\u76f8\u6bd4\uff0c\u7814\u7a76\u4eba\u5458\u66f4\u6709\u52a8\u529b\u521b\u9020\u4e00\u79cd\u65b0\u7684\u7b97\u6cd5\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u8c03\u6574\uff0c\u76f4\u5230\u5b83\u8fbe\u5230\u6700\u5148\u8fdb\u7684\u6c34\u5e73\u3002\u4ed6\u6307\u51fa\uff0c\u540e\u8005\u53ef\u80fd\u770b\u8d77\u6765\u4e0d\u90a3\u4e48\u65b0\u5947\uff0c\u8fd9\u4f7f\u5f97\u201c\u5f88\u96be\u4ece\u90a3\u91cc\u62ff\u5230\u4e00\u4efd\u8bba\u6587\u201d\u3002\n\u53e4\u5854\u683c\u8bf4\uff0c\u5bf9\u4e8e\u7b97\u6cd5\u7684\u53d1\u660e\u8005\u6765\u8bf4\uff0c\u4e0e\u5176\u4ed6\u7b97\u6cd5\u7684\u53d1\u660e\u8005\u5f7b\u5e95\u6bd4\u8f83\u5176\u6027\u80fd\u4e5f\u662f\u4e00\u79cd\u963b\u788d--\u7ed3\u679c\u53d1\u73b0\u4ed6\u4eec\u7684\u7a81\u7834\u5e76\u4e0d\u662f\u4ed6\u4eec\u60f3\u8c61\u7684\u90a3\u6837\u3002\u201c\u8fc7\u4e8e\u4ed4\u7ec6\u5730\u6bd4\u8f83\u662f\u6709\u98ce\u9669\u7684\u3002\u201d\u8fd9\u4e5f\u662f\u4e00\u9879\u8270\u5de8\u7684\u5de5\u4f5c\uff1a\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u636e\u96c6\u3001\u8c03\u4f18\u65b9\u6cd5\u3001\u6027\u80fd\u5ea6\u91cf\u548c\u57fa\u7ebf\u3002\u201c\u505a\u6240\u6709\u7684\u82f9\u679c\u5bf9\u82f9\u679c\u7684\u6bd4\u8f83\u5e76\u4e0d\u662f\u771f\u7684\u53ef\u884c\u3002\u201d\n\u4e00\u4e9b\u5938\u5927\u4e1a\u7ee9\u7684\u8bf4\u6cd5\u53ef\u4ee5\u5f52\u56e0\u4e8e\u8be5\u9886\u57df\u7684\u7206\u70b8\u6027\u589e\u957f\uff0c\u90a3\u91cc\u7684\u8bba\u6587\u6570\u91cf\u8d85\u8fc7\u4e86\u7ecf\u9a8c\u4e30\u5bcc\u7684\u8bc4\u8bba\u5bb6\u3002\u201c\u8fd9\u5176\u4e2d\u5f88\u591a\u4f3c\u4e4e\u90fd\u662f\u6210\u957f\u7684\u70e6\u607c\uff0c\u201dBlalock\u8bf4\u3002\u4ed6\u6566\u4fc3\u5ba1\u67e5\u8005\u575a\u6301\u4e0e\u57fa\u51c6\u8fdb\u884c\u66f4\u597d\u7684\u6bd4\u8f83\uff0c\u5e76\u8868\u793a\u66f4\u597d\u7684\u5de5\u5177\u5c06\u6709\u6240\u5e2e\u52a9\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u5e03\u62c9\u6d1b\u514b\u7684\u5408\u8457\u8005\u3001\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7814\u7a76\u5458\u4f55\u585e\u00b7\u5188\u8428\u96f7\u65af\u00b7\u5965\u5c14\u8482\u65af(Jose Gonzalez Ortiz)\u53d1\u5e03\u4e86\u4e00\u6b3e\u540d\u4e3aShrinkBench\u7684\u8f6f\u4ef6\uff0c\u5b83\u4f7f\u5f97\u6bd4\u8f83\u4fee\u526a\u7b97\u6cd5\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\n\u7814\u7a76\u4eba\u5458\u6307\u51fa\uff0c\u5373\u4f7f\u65b0\u65b9\u6cd5\u5728\u6839\u672c\u4e0a\u5e76\u4e0d\u6bd4\u65e7\u65b9\u6cd5\u66f4\u597d\uff0c\u4ed6\u4eec\u5b9e\u65bd\u7684\u8c03\u6574\u4e5f\u53ef\u4ee5\u5e94\u7528\u5230\u4ed6\u4eec\u7684\u7956\u5148\u8eab\u4e0a\u3002\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u4e00\u79cd\u65b0\u7684\u7b97\u6cd5\u5c31\u4f1a\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u7a81\u7834\u3002\u201c\u8fd9\u51e0\u4e4e\u5c31\u50cf\u662f\u4e00\u4e2a\u98ce\u9669\u6295\u8d44\u7ec4\u5408\uff0c\u201d\u5e03\u62c9\u6d1b\u514b\u8bf4\uff0c\u201c\u6709\u4e9b\u4e1a\u52a1\u5e76\u4e0d\u662f\u771f\u7684\u5728\u8fd0\u4f5c\uff0c\u4f46\u6709\u4e9b\u4e1a\u52a1\u505a\u5f97\u975e\u5e38\u597d\u3002\u201d", "note_en": "Artificial intelligence (AI) just seems to get smarter and smarter. Each iPhone learns your face, voice, and habits better than the last, and the threats AI poses to privacy and jobs continue to grow. The surge reflects faster chips, more data, and better algorithms. But some of the improvement comes from tweaks rather than  the core innovations their inventors claim\u2014and some of the gains may not exist at all, says Davis Blalock, a computer science graduate student at the Massachusetts Institute of Technology (MIT). Blalock and his colleagues compared dozens of approaches to improving neural networks\u2014software architectures that loosely mimic the brain. \u201cFifty papers in,\u201d he says, \u201cit became clear that it wasn\u2019t obvious what the state of the art even was.\u201d\n The researchers evaluated 81 pruning algorithms, programs that make neural networks more efficient by trimming unneeded connections. All claimed superiority in slightly different ways. But they were rarely compared properly\u2014and when the researchers tried to evaluate them side by side, there was no clear evidence of performance improvements over a 10-year period.  The result, presented in March at the Machine Learning and Systems conference, surprised Blalock\u2019s Ph.D. adviser, MIT computer scientist John Guttag, who says the uneven comparisons themselves may explain the stagnation. \u201cIt\u2019s the old saw, right?\u201d Guttag said. \u201cIf you can\u2019t measure something, it\u2019s hard to make it better.\u201d\n Researchers are waking up to the signs of shaky progress across many subfields of AI. A  2019 meta-analysis of information retrieval algorithms used in search engines concluded the \u201chigh-water mark \u2026 was actually set in 2009.\u201d  Another study in 2019 reproduced seven neural network recommendation systems, of the kind used by media streaming services. It found that six failed to outperform much simpler, nonneural algorithms developed years before, when the earlier techniques were fine-tuned, revealing \u201cphantom progress\u201d in the field. In  another paper posted on arXiv in March, Kevin Musgrave, a computer scientist at Cornell University, took a look at loss functions, the part of an algorithm that mathematically specifies its objective. Musgrave compared a dozen of them on equal footing, in a task involving image retrieval, and found that, contrary to their developers\u2019 claims, accuracy had not improved since 2006. \u201cThere\u2019s always been these waves of hype,\u201d Musgrave says.\n Gains in machine-learning algorithms can come from fundamental changes in their architecture, loss function, or optimization strategy\u2014how they use feedback to improve. But subtle tweaks to any of these can also boost performance, says Zico Kolter, a computer scientist at Carnegie Mellon University who studies image-recognition models trained to be immune to \u201c adversarial attacks\u201d by a hacker. An early adversarial training method known as projected gradient descent (PGD), in which a model is simply trained on both real and deceptive examples, seemed to have been surpassed by more complex methods. But in a  February arXiv paper, Kolter and his colleagues found that all of the methods performed about the same when a simple trick was used to enhance them.\n    \u201cThat was very surprising, that this hadn\u2019t been discovered before,\u201d says Leslie Rice, Kolter\u2019s Ph.D. student. Kolter says his findings suggest innovations such as PGD are hard to come by, and are rarely improved in a substantial way. \u201cIt\u2019s pretty clear that PGD is actually just the right algorithm,\u201d he says. \u201cIt\u2019s the obvious thing, and people want to find overly complex solutions.\u201d\n Other major algorithmic advances also seem to have stood the test of time. A big breakthrough came in 1997 with an architecture called long short-term memory (LSTM), used in language translation. When properly trained, LSTMs  matched the performance of supposedly more advanced architectures developed 2 decades later. Another machine-learning breakthrough came in 2014 with generative adversarial networks (GANs), which pair networks in a create-and-critique cycle to sharpen their ability to produce images, for example.  A 2018 paper reported that with enough computation, the original GAN method matches the abilities of methods from later years.\n Kolter says researchers are more motivated to produce a new algorithm and tweak it until it\u2019s state-of-the-art than to tune an existing one. The latter can appear less novel, he notes, making it \u201cmuch harder to get a paper from.\u201d\n Guttag says there\u2019s also a disincentive for inventors of an algorithm to thoroughly compare its performance with others\u2014only to find that their breakthrough is not what they thought it was. \u201cThere\u2019s a risk to comparing too carefully.\u201d  It\u2019s also hard work: AI researchers use different data sets, tuning methods, performance metrics, and baselines. \u201cIt\u2019s just not really feasible to do all the apples-to-apples comparisons.\u201d\n Some of the overstated performance claims can be chalked up to the explosive growth of the field, where papers outnumber experienced reviewers. \u201cA lot of this seems to  be growing pains,\u201d Blalock says. He urges reviewers to insist on better comparisons to benchmarks and says better tools will help. Earlier this year, Blalock\u2019s co-author, MIT researcher Jose Gonzalez Ortiz, released software called ShrinkBench that makes it easier to compare pruning algorithms.\n Researchers point out that even if new methods aren\u2019t fundamentally better than old ones, the tweaks they implement can be applied to their forebears. And every once in a while, a new algorithm will be an actual breakthrough. \u201cIt\u2019s almost like a venture capital portfolio,\u201d Blalock says, \u201cwhere some of the businesses are not really working, but some are working spectacularly well.\u201d", "posttime": "2020-05-29 23:21:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,\u9886\u57df,catching,\u7b97\u6cd5", "title": "\u4e00\u4e9b\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u5f15\u4eba\u6ce8\u76ee\u7684\u8fdb\u6b65\u5e76\u4e0d\u662f\u771f\u7684", "title_en": "Eye-catching advances in some AI fields are not real", "transed": 1, "url": "https://www.sciencemag.org/news/2020/05/eye-catching-advances-some-ai-fields-are-not-real", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u9886\u57df", "catching", "\u7b97\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "e0dc15f7bf496b794d57b4de6f8d41c1.jpg", "infoid": 1004253, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "3\u6708\u4e2d\u65ec\uff0c\u968f\u7740\u65e7\u91d1\u5c71\u5e02\u957f\u4f26\u6566\u5e03\u8d56\u5fb7\u53d1\u5e03\u4e86\u4e00\u9879\u5168\u5e02\u8303\u56f4\u7684\u5c45\u5bb6\u547d\u4ee4\uff0c\u4f69\u5409\u00b7\u897f\u7c73\u5c14\u5f00\u59cb\u505a\u51c6\u5907\u3002Cmiel\u662f\u65e7\u91d1\u5c71\u72b9\u592a\u4eba\u751f\u6d3b\u4e2d\u5fc3(SFCJL)\u7684\u4e34\u5e8a\u8fd0\u8425\u603b\u76d1\uff0c\u8fd9\u662f\u4e00\u4e2a\u5360\u57309\u82f1\u4ea9\u7684\u8001\u5e74\u4f4f\u623f\u7efc\u5408\u4f53\uff0c\u4f4d\u4e8eExcelsior\u793e\u533a\uff0c\u5305\u62ec\u957f\u671f\u62a4\u7406\u8bbe\u65bd\u3001\u77ed\u671f\u5eb7\u590d\u4f4f\u623f\u548c\u4e00\u4e2a\u8bb0\u5fc6\u62a4\u7406\u4fa7\u7ffc\u3002\u6821\u56ed\u91cc\u4f4f\u7740300\u591a\u540d\u8001\u5e74\u5c45\u6c11\uff0c\u4ed6\u4eec\u662f\u6700\u5bb9\u6613\u53d7\u5230\u8fd9\u79cd\u81f4\u547d\u548c\u9ad8\u4f20\u67d3\u6027\u51a0\u72b6\u75c5\u6bd2\u5f71\u54cd\u7684\u4eba\u7fa4\u4e4b\u4e00\u3002\u8fd9\u79cd\u51a0\u72b6\u75c5\u6bd2\u5df2\u7ecf\u8513\u5ef6\u5230\u5168\u7403\u5404\u5730\u3002\nCmiel\u7684\u5de5\u4f5c\u4eba\u5458\u4e3a\u5de5\u4eba\u548c\u5c45\u6c11\u50a8\u5907\u4e86\u4e2a\u4eba\u9632\u62a4\u88c5\u5907\u548c\u53e3\u7f69\uff1b\u5bf9\u6bcf\u4e00\u4e2a\u8d70\u8fdb\u95e8\u7684\u4eba\u8fdb\u884c\u4e86\u75c7\u72b6\u7b5b\u67e5\uff1b\u96c7\u4f63\u4e86\u66f4\u591a\u7684\u5de5\u4f5c\u4eba\u5458\u6765\u6253\u626b\u6d74\u5ba4\u548c\u516c\u5171\u533a\u57df\uff1b\u5e76\u5f00\u59cb\u5411\u6bcf\u4e2a\u4eba\u8fdb\u884c\u5173\u4e8e\u63a7\u5236\u75c5\u6bd2\u7684\u6700\u4f73\u505a\u6cd5\u7684\u6559\u80b2\uff0c\u6bd4\u5982\u6d17\u624b\uff0c\u907f\u514d\u8fd1\u8ddd\u79bb\u63a5\u89e6\uff0c\u5e76\u5bc6\u5207\u5173\u6ce8\u53d1\u70e7\u6216\u54b3\u55fd\u7b49\u75c7\u72b6\u3002\u867d\u7136\u7597\u517b\u9662\u5360\u52a0\u5dde\u51a0\u72b6\u75c5\u6bd2\u6b7b\u4ea1\u4eba\u6570\u7684\u8fd1\u4e00\u534a\uff0c\u4f46\u5728SFCJL\uff0c\u6ca1\u6709\u4e00\u4e2a\u5c45\u6c11\u7684\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\u3002\u201c\u65e9\u70b9\u51fa\u53d1\u771f\u7684\u662f\u6211\u4eec\u505a\u7684\u6700\u6709\u5e2e\u52a9\u7684\u4e8b\u60c5\uff0c\u201dCmiel\u8bf4\u3002\u201c\u8fd9\u4e2a\u8bbe\u65bd\u7684\u95e8\u628a\u624b\u4ee5\u524d\u4ece\u6765\u6ca1\u6709\u8fd9\u4e48\u5e72\u51c0\u8fc7\u3002\u201d\n\u5e76\u4e0d\u662f\u6bcf\u4e2a\u5bb6\u5ead\u90fd\u8fd9\u4e48\u5e78\u8fd0\uff0c\u51c6\u5907\u5f97\u8fd9\u4e48\u5145\u5206\u3002\u7f8e\u56fd\u5404\u5730\u7684\u7597\u517b\u9662\u90fd\u88ab\u65b0\u51a0\u80ba\u708e\u6467\u6bc1\u4e86\u3002\u5728\u5305\u62ec\u79d1\u7f57\u62c9\u591a\u5dde\u3001\u9a6c\u8428\u8bf8\u585e\u5dde\u548c\u5f17\u5409\u5c3c\u4e9a\u5dde\u5728\u5185\u7684\u8bb8\u591a\u5dde\uff0c\u7597\u517b\u9662\u5c45\u6c11\u7684\u6b7b\u4ea1\u5360\u51a0\u72b6\u75c5\u6bd2\u6b7b\u4ea1\u768450%\u6216\u66f4\u591a\u3002\u4f46\u50cfSFCJL\u8fd9\u6837\u7684\u5c11\u6570\u51e0\u4e2a\u5bb6\u5ead\u7684\u6210\u529f\uff0c\u53ef\u80fd\u4f1a\u4e3a\u4ed6\u4eec\u7684\u540c\u4e8b\u63d0\u4f9b\u4e00\u4e9b\u7ebf\u7d22\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u5728\u56fd\u5bb6\u51c6\u5907\u5e94\u5bf9\u6f5c\u5728\u7684\u7b2c\u4e8c\u6ce2\u611f\u67d3\u65f6\uff0c\u5982\u4f55\u4fdd\u969c\u5c45\u6c11\u7684\u5b89\u5168\u3002\n\u8001\u5e74\u533b\u751f\u548c\u7597\u517b\u9662\u7ecf\u8425\u8005\u660e\u767d\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u7a7a\u95f4\u5982\u6b64\u8106\u5f31\u3002\u957f\u671f\u62a4\u7406\u8bbe\u65bd\u5728\u5f88\u591a\u65b9\u9762\u90fd\u662f\u5b8c\u7f8e\u7684\u75c5\u6bd2\u5b75\u5316\u5668\u3002\u5c45\u6c11\u5e74\u9f84\u8f83\u5927\uff0c\u8eab\u4f53\u865a\u5f31\uff0c\u7ecf\u5e38\u60a3\u6709\u5fc3\u810f\u75c5\u6216\u7cd6\u5c3f\u75c5\u7b49\u5408\u5e76\u75c7\uff0c\u66f4\u5bb9\u6613\u53d7\u5230\u4e25\u91cd\u7684\u65b0\u51a0\u80ba\u708e\u611f\u67d3\u3002\u8bb8\u591a\u4eba\u9700\u8981\u5e2e\u52a9\u6267\u884c\u57fa\u672c\u7684\u4efb\u52a1\uff0c\u5982\u5403\u996d\u3001\u7a7f\u8863\u6216\u6d17\u6fa1\uff0c\u800c\u8fd9\u4e9b\u5de5\u4f5c\u4e0d\u80fd\u901a\u8fc7\u89c6\u9891\u9884\u7ea6\u63d0\u4f9b\uff0c\u8fd9\u4f7f\u5f97\u4ed6\u4eec\u66f4\u6709\u53ef\u80fd\u4ece\u5e2e\u52a9\u4ed6\u4eec\u7684\u52a9\u624b\u90a3\u91cc\u611f\u67d3\uff0c\u6216\u8005\u5c06\u75c5\u6bd2\u4f20\u67d3\u7ed9\u4ed6\u4eec\u7684\u7167\u987e\u8005\u3002\u8fd9\u4e9b\u52a9\u624b\u53ef\u80fd\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u8bbe\u65bd\u5de5\u4f5c\uff0c\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u628a\u5b83\u4ece\u4e00\u4e2a\u5bb6\u642c\u5230\u53e6\u4e00\u4e2a\u5bb6\u3002\n\u8fd9\u4e9b\u8bbe\u65bd\u7684\u5e03\u5c40\u4e5f\u52a0\u5f3a\u4e86\u5404\u4e2a\u9886\u57df\u7684\u8054\u7cfb\u3002\u5927\u591a\u6570\u5c45\u6c11\u5171\u7528\u5367\u5ba4\u3001\u536b\u751f\u95f4\u3001\u6d3b\u52a8\u5ba4\u548c\u9910\u5385\uff0c\u5458\u5de5\u5171\u7528\u4f11\u606f\u5ba4\u3002\u8fd9\u4e9b\u56e2\u4f53\u7a7a\u95f4\u7684\u8bbe\u8ba1\u90e8\u5206\u662f\u4e3a\u4e86\u524a\u51cf\u6210\u672c\uff0c\u4e5f\u662f\u4e3a\u4e86\u9f13\u52b1\u793e\u4ea4\u3002\u4f46\u5171\u4eab\u7a7a\u95f4\u4e5f\u5e2e\u52a9\u4f20\u64ad\u4e86\u75c5\u6bd2\u3002\u9ad8\u7ea7\u8bbe\u65bd\u786e\u5b9e\u6709\u5e94\u5bf9\u6d41\u611f\u7b49\u75ab\u60c5\u7684\u65b9\u6848\uff0c\u4f46\u5927\u6d41\u884c\u6765\u5f97\u5982\u6b64\u4e4b\u5feb\uff0cSARS-CoV-2\u75c5\u6bd2\u7684\u4f20\u67d3\u6027\u5982\u6b64\u4e4b\u5f3a\uff0c\u4ee5\u81f3\u4e8e\u8bb8\u591a\u8bbe\u65bd\u5728\u6beb\u65e0\u51c6\u5907\u7684\u60c5\u51b5\u4e0b\u88ab\u53d1\u73b0\u3002\u201c\u8fd9\u79cd\u75c5\u6bd2\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5360\u4e0a\u98ce\uff0c\u201d\u52a0\u5dde\u5927\u5b66\u65e7\u91d1\u5c71\u5206\u6821\u7684\u8001\u5e74\u75c5\u5b66\u5bb6\u5b89\u5a1c\u00b7\u4e54\u591a\u65af(Anna Chodos)\u8bf4\u3002\u4e0e\u533b\u9662\u4e0d\u540c\u7684\u662f\uff0c\u5927\u591a\u6570\u7597\u517b\u9662\u901a\u5e38\u6ca1\u6709\u5145\u8db3\u7684\u88c5\u5907\uff0c\u5982\u53e3\u7f69\u548c\u957f\u888d\uff0c\u8fd9\u4e9b\u5728\u63a7\u5236\u6d41\u611f\u65f6\u662f\u4e0d\u5fc5\u8981\u7684\u3002\n\u73b0\u5728\uff0c\u968f\u7740\u5404\u5dde\u6162\u6162\u5f00\u59cb\u91cd\u65b0\u5f00\u653e\uff0c\u8001\u5e74\u62a4\u7406\u8bbe\u65bd\u9762\u4e34\u7740\u4e00\u9879\u66f4\u590d\u6742\u7684\u52aa\u529b\uff1a\u5728\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u6301\u7eed\u7684\u60c5\u51b5\u4e0b\uff0c\u5f04\u6e05\u695a\u5982\u4f55\u4fdd\u969c\u5c45\u6c11\u7684\u5b89\u5168\uff0c\u4fdd\u6301\u4ed6\u4eec\u7684\u751f\u6d3b\u8d28\u91cf\u3002\u5373\u4f7f\u662f\u50cfSFCJL\u8fd9\u6837\u7684\u8bbe\u65bd\uff0c\u524d\u8fdb\u7684\u9053\u8def\u4e5f\u8fdc\u4e0d\u660e\u6717\u3002\u201c\u6211\u4eec\u5982\u4f55\u5b89\u5168\u3001\u7f13\u6162\u5730\u5f15\u5165\u63a2\u8bbf\u548c\u5c0f\u7ec4\u6d3b\u52a8\uff1f\u5b83\u4f1a\u975e\u5e38\u5c0f\u5fc3\uff0c\u975e\u5e38\u8c28\u614e\uff0c\u201cCmiel\u8bf4\u3002\u201c\u91cd\u65b0\u5f00\u59cb\u628a\u4eba\u4eec\u5e26\u56de\u793e\u533a\u5c06\u662f\u975e\u5e38\u53ef\u6015\u7684\u3002\u201d\n\u4e0e\u533b\u9662\u4e0d\u540c\uff0c\u5927\u591a\u6570\u7597\u517b\u9662\u5c45\u6c11\u957f\u671f\u5c45\u4f4f\u5728\u8fd9\u4e9b\u8bbe\u65bd\u4e2d\uff0c\u56e0\u6b64\u5de5\u4f5c\u4eba\u5458\u5fc5\u987b\u4e3a\u4eba\u4eec\u7684\u957f\u671f\u60c5\u611f\u3001\u793e\u4f1a\u548c\u8eab\u4f53\u5065\u5eb7\u521b\u9020\u8212\u9002\u7684\u73af\u5883\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u4f7f\u8fd9\u4e9b\u91cd\u8981\u7684\u5fc3\u7406\u670d\u52a1\u88ab\u6401\u7f6e\u3002\u201c\u7597\u517b\u9662\u91cc\u7684\u751f\u6d3b\u65b9\u5f0f\u88ab\u6253\u4e71\u4e86\uff0c\u201d\u5370\u7b2c\u5b89\u7eb3\u5927\u5b66\u8001\u5e74\u75c5\u5b66\u52a9\u7406\u6559\u6388\u51ef\u745f\u7433\u00b7\u6602\u7f57(Kathleen Unroe)\u8bf4\u3002\u201c\u8fd9\u91cc\u662f\u4eba\u4eec\u5c45\u4f4f\u7684\u5730\u65b9\u3002\u8fd9\u4e9b\u90fd\u662f\u793e\u4ea4\u573a\u6240\u3002\u201c\u3002\n\u6216\u8005\u81f3\u5c11\u4ed6\u4eec\u66fe\u7ecf\u662f\u3002\u76ee\u524d\uff0c\u8bb8\u591a\u8bbe\u65bd\u90fd\u5728\u5c3d\u53ef\u80fd\u5730\u9650\u5236\u6d3b\u52a8\uff0c\u8ba9\u4eba\u4eec\u5446\u5728\u81ea\u5df1\u7684\u623f\u95f4\u91cc\uff0c\u8fdc\u79bb\u5171\u4eab\u7a7a\u95f4\u3002Unroe\u54a8\u8be2\u4e86\u51e0\u5bb6\u62a4\u7406\u673a\u6784\uff0c\u5e76\u8bf4\u5176\u4e2d\u4e00\u5bb6\u7684\u5bb6\u4eba\u5df2\u7ecf\u4e24\u4e2a\u6708\u6ca1\u6709\u88ab\u5141\u8bb8\u8bbf\u95ee\u4e86\u3002\u201c\u6211\u6709\u8fd9\u4e9b\u5bb6\u5ead\u6210\u5458\u5bf9\u6211\u8bf4\uff0c\u2018\u6211\u4e00\u751f\u4e2d\u4ece\u672a\u79bb\u5f00\u8fc795\u5c81\u7684\u6bcd\u4eb2\u8fd9\u4e48\u957f\u65f6\u95f4\uff0c\u2019\u201d\u5979\u8865\u5145\u9053\u3002\u201c\u8fd9\u662f\u5f88\u6df1\u523b\u7684\u3002\u201d\n\u6602\u7f57\u8fd8\u6307\u51fa\uff0c\u5728\u4e00\u4e9b\u8bbe\u65bd\u4e2d\uff0c\u5373\u4f7f\u662f\u4ece\u65b0\u51a0\u80ba\u708e\u5eb7\u590d\u7684\u4eba\u4e5f\u4e0d\u80fd\u603b\u662f\u56de\u5230\u81ea\u5df1\u7684\u623f\u95f4\u3002\u5982\u679c\u4ed6\u4eec\u5728\u75c7\u72b6\u7f13\u89e3\u540e\u51e0\u5468\u5185\u7ee7\u7eed\u8131\u6bd2\u5e76\u68c0\u6d4b\u5448\u9633\u6027\uff0c\u4ed6\u4eec\u5c31\u5fc5\u987b\u4fdd\u6301\u9694\u79bb\uff0c\u8fd9\u53ef\u80fd\u662f\u53ef\u6015\u548c\u4ee4\u4eba\u6cae\u4e27\u7684\u3002\u6709\u4e9b\u4eba\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u56de\u5230\u81ea\u5df1\u5e73\u5e38\u7684\u623f\u95f4\uff1b\u201c\u6709\u4e9b\u4eba\u53ea\u662f\u89c9\u5f97\u88ab\u9057\u5f03\u4e86\uff0c\u53ea\u662f\u611f\u5230\u56f0\u60d1\u6216\u751f\u6c14\u3002\u201d\n\u90a3\u4e48\uff0c\u662f\u4ec0\u4e48\u8ba9SFCJL\u7684\u8868\u73b0\u6bd4\u8bb8\u591a\u540c\u884c\u66f4\u597d\u5462\uff1f\u8fd9\u5f88\u53ef\u80fd\u662f\u65e9\u671f\u884c\u52a8\u548c\u8fd0\u6c14\u7684\u7ed3\u5408\u3002\u8be5\u8bbe\u65bd\u662f\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u9996\u6279\u5728\u6e38\u5ba2\u8fdb\u5165\u573a\u6240\u4e4b\u524d\u5f00\u59cb\u5bf9\u4ed6\u4eec\u8fdb\u884c\u7b5b\u67e5\u7684\u8bbe\u65bd\u4e4b\u4e00\u3002\u4ed6\u4eec\u56e4\u79ef\u4e86\u9632\u62a4\u8bbe\u5907\uff0c\u5e76\u51c6\u5907\u5411\u6bcf\u4e00\u4f4d\u5c45\u6c11\u548c\u5de5\u4f5c\u4eba\u5458\u5206\u53d1\u53e3\u7f69\u3002\u62c9\u53e4\u7eb3\u672c\u7530\u533b\u9662\u548c\u5eb7\u590d\u4e2d\u5fc3\u662f\u65e7\u91d1\u5c71\u7684\u53e6\u4e00\u5bb6\u957f\u671f\u62a4\u7406\u673a\u6784\uff0c\u5f88\u65e9\u5c31\u88ab\u9694\u79bb\u4e86\uff0c\u5b83\u6709700\u591a\u5f20\u5e8a\u4f4d\uff0c\u4e5f\u53d6\u5f97\u4e86\u7c7b\u4f3c\u7684\u6210\u529f-\u636e\u62a5\u9053\uff0c\u5c45\u6c11\u548c\u5de5\u4f5c\u4eba\u5458\u4e2d\u53ea\u670929\u4f8b\u3002\u624e\u514b\u4f2f\u683cSF\u603b\u533b\u9662\u548c\u521b\u4f24\u4e2d\u5fc3(Zuckerberg SF General Hospital And Trauma Center)\u9996\u5e2d\u8d28\u91cf\u5b98\u7279\u6d1b\u4f0a\u00b7\u5a01\u5ec9\u59c6\u65af(Troy Williams)\u8868\u793a\uff1a\u201c\u65e7\u91d1\u5c71\u7684\u884c\u52a8\u975e\u5e38\u65e9\uff0c\u6240\u4ee5\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u5076\u7136\u7684\u3002\u201d\u4ed6\u4e00\u76f4\u8d1f\u8d23\u672c\u7530\u62c9\u53e4\u7eb3(Laguna Honda)\u5e94\u5bf9\u75ab\u60c5\u7684\u5de5\u4f5c\u3002\n\u52a0\u5dde\u5927\u5b66\u65e7\u91d1\u5c71\u5206\u6821\u7684\u4e54\u591a\u65af\u540c\u610f\uff0c\u672c\u7530\u62c9\u53e4\u7eb3\u65e9\u671f\u5c01\u9501\u8bbe\u65bd\u548c\u9694\u79bb\u53d7\u611f\u67d3\u5c45\u6c11\u7684\u884c\u52a8\u662f\u7f13\u89e3\u75ab\u60c5\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002\u201c\u4ed6\u4eec\u628a\u5b83\u50cf\u866b\u5b50\u4e00\u6837\u538b\u788e\u4e86\uff0c\u201d\u5979\u8bf4\u3002\u4f46\u5979\u8bf4\uff0c\u65e7\u91d1\u5c71\u7684\u5de5\u5382\u4e5f\u5f88\u5e78\u8fd0\uff1a\u201c\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u6709\u4f1f\u5927\u7684\u9886\u5bfc\u5c42\u3002\u5e78\u8fd0\u7684\u662f\u6211\u4eec\u7684\u75c5\u6bd2\u8f83\u5c11\u3002\u201c\u3002\u4e0e\u7f8e\u56fd\u5176\u4ed6\u5730\u533a\u76f8\u6bd4\uff0c\u65e7\u91d1\u5c71\u53d1\u5e03\u5728\u5bb6\u547d\u4ee4\u7684\u65f6\u95f4\u66f4\u65e9\uff0c\u611f\u67d3\u7387\u4e5f\u76f8\u5bf9\u8f83\u4f4e\u3002\u968f\u7740\u75c5\u6bd2\u5728\u793e\u533a\u4e2d\u4f20\u64ad\u7684\u51cf\u5c11\uff0c\u5de5\u4f5c\u4eba\u5458\u4e0d\u592a\u53ef\u80fd\u610f\u5916\u5730\u5c06\u75c5\u6bd2\u5f15\u5165\u8bbe\u65bd\u3002\n\u53e6\u4e00\u4e2a\u56e0\u7d20\u53ef\u80fd\u662f\uff0c\u62c9\u53e4\u7eb3\u672c\u7530\u548cSFCJL\u90fd\u53c2\u4e0e\u4e86\u65e7\u91d1\u5c71\u7684\u666e\u904d\u6d4b\u8bd5\u8ba1\u5212\uff0c\u8be5\u8ba1\u5212\u7531\u5e02\u957f\u6388\u6743\uff0c\u5e76\u7531\u8be5\u5e02\u516c\u5171\u536b\u751f\u90e8\u5e26\u5934\u5b9e\u65bd\u3002\u8fd9\u4e24\u4e2a\u8bbe\u65bd\u5c06\u7ee7\u7eed\u6bcf\u9694\u51e0\u5468\u5bf9\u6240\u6709\u5de5\u4f5c\u4eba\u5458\u548c\u5c45\u6c11\u8fdb\u884c\u4e00\u6b21\u6d4b\u8bd5\uff0c\u5982\u679c\u4ed6\u4eec\u5f00\u59cb\u770b\u5230\u66f4\u79ef\u6781\u7684\u7ed3\u679c\uff0c\u6d4b\u8bd5\u5c31\u4f1a\u66f4\u9891\u7e41\u3002(\u5de5\u4f5c\u4eba\u5458\u6bcf\u5929\u665a\u4e0a\u56de\u5bb6\uff0c\u6bcf\u5929\u7531\u7269\u7406\u548c\u547c\u5438\u6cbb\u7597\u5e08\u3001\u52a9\u624b\u3001\u62a4\u58eb\u548c\u5176\u4ed6\u5de5\u4f5c\u4eba\u5458\u7ec4\u6210\u7684\u56e2\u961f\u91cd\u65b0\u8fdb\u5165\u8fd9\u4e9b\u5efa\u7b51\u7fa4\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u65b0\u7684\u611f\u67d3\u3002)\u3002\u201c\u6211\u4eec\u5fc5\u987b\u5168\u529b\u4ee5\u8d74\uff0c\u201d\u5a01\u5ec9\u59c6\u65af\u8bf4\uff0c\u201c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\u201d\n\u4ed6\u4eec\u8fd8\u5728\u7814\u7a76\u5176\u4ed6\u964d\u4f4e\u98ce\u9669\u7684\u6218\u7565\u3002\u4f8b\u5982\uff0cSFCJL\u5f00\u8bbe\u4e86\u4e00\u4e2a\u65b0\u7ffc\uff0c\u63a5\u6536\u5f53\u5730\u533b\u9662\u7684\u65b0\u51a0\u80ba\u708e\u5eb7\u590d\u60a3\u8005\uff0c\u4ed6\u4eec\u9700\u8981\u77ed\u671f\u5eb7\u590d\u62a4\u7406\u624d\u80fd\u518d\u6b21\u56de\u5bb6\u3002\u90a3\u4e2a\u5355\u4f4d\u6709\u4e00\u652f\u5b8c\u5168\u72ec\u7acb\u7684\u533b\u7597\u3001\u62a4\u7406\u548c\u6e05\u6d01\u4eba\u5458\u3002\u75c5\u4eba\u4f7f\u7528\u4e0d\u540c\u7684\u5165\u53e3\uff0c\u5de5\u4f5c\u4eba\u5458\u5728\u4ed6\u4eec\u88ab\u5e26\u5230\u623f\u95f4\u540e\u7acb\u5373\u6e05\u6d01\u7535\u68af\u3002\n\u5bf9\u4e8e\u7597\u517b\u9662\u7684\u6240\u6709\u8001\u5e74\u4eba\u6765\u8bf4\uff0c\u65e0\u8bba\u662f\u5426\u7206\u53d1\u75c5\u6bd2\u75ab\u60c5\uff0c\u5367\u5e8a\u4e0d\u4e0e\u4eb2\u4eba\u8fdb\u884c\u4efb\u4f55\u8eab\u4f53\u63a5\u89e6\u90fd\u5bf9\u8eab\u5fc3\u5065\u5eb7\u4e0d\u5229\u3002\u901a\u5e38\uff0c\u8bbe\u65bd\u6709\u5f88\u591a\u6d3b\u52a8\u548c\u8bbf\u5ba2\uff1b\u5fd7\u613f\u8005\u6f14\u594f\u97f3\u4e50\uff0c\u5e26\u7740\u6cbb\u7597\u72ac\uff0c\u6216\u8005\u4e0e\u5c45\u6c11\u73a9\u7eb8\u724c\u6e38\u620f\u3002\u4e3a\u4e86\u9002\u5e94\u5927\u6d41\u884c\u671f\u95f4\u7684\u60c5\u51b5\uff0c\u62c9\u53e4\u7eb3\u672c\u7530\u548cSFCJL\u7684\u5de5\u4f5c\u4eba\u5458\u90fd\u8d2d\u4e70\u4e86iPad\uff0c\u8fd9\u6837\u5c45\u6c11\u5c31\u53ef\u4ee5\u89c6\u9891\u547c\u53eb\u5bb6\u4eba\u3002\u62c9\u53e4\u7eb3\u672c\u7530\u73b0\u5728\u5f00\u59cb\u4e3e\u529e\u4e00\u4e9b\u793e\u4ea4\u8ddd\u79bb\u7684\u6d3b\u52a8\uff0c\u6bd4\u5982\u5bbe\u679c\u6e38\u620f\u548c\u827a\u672f\u8bfe\u7a0b\uff0c\u53c2\u4e0e\u8005\u53ef\u4ee5\u76f8\u8ddd6\u82f1\u5c3a\uff0c\u6234\u7740\u53e3\u7f69\u3002\n\u4e54\u591a\u65af\u8bf4\uff0c\u8fd9\u4e9b\u63aa\u65bd\u53ef\u4ee5\u5e2e\u52a9\u963b\u6b62\u75c5\u6bd2\u4ece\u65e0\u75c7\u72b6\u643a\u5e26\u8005\u90a3\u91cc\u4f20\u64ad\u3002\u5979\u8865\u5145\u8bf4\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u4f20\u67d3\u6027\u7684\u75c5\u6bd2\uff0c\u201c\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u6ca1\u6709\u591a\u4f59\u7684\u9884\u9632\u63aa\u65bd\u3002\u201d\n\u4f46\u6839\u636eUnroe\u7684\u8bf4\u6cd5\uff0c\u8fd9\u4e9b\u9884\u9632\u63aa\u65bd\u53ea\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6709\u5e2e\u52a9\u3002\u5979\u8bf4\uff1a\u201c\u8fd9\u4e9b\u75ab\u60c5\u4ecd\u5728\u7ee7\u7eed\uff0c\u5b83\u4eec\u5c06\u5728\u7597\u517b\u9662\u7ee7\u7eed\u3002\u201d\u5173\u4e8e\u75c5\u6bd2\u662f\u5982\u4f55\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5728\u4e00\u4e9b\u5bb6\u5ead\u4f20\u64ad\u5f97\u5982\u6b64\u4e4b\u5feb\uff0c\u800c\u5728\u53e6\u4e00\u4e9b\u5bb6\u5ead\u4e2d\u5374\u6ca1\u6709\uff0c\u4ecd\u6709\u8bb8\u591a\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u3002\u6839\u636e\u65e9\u671f\u7684\u6570\u636e\uff0c\u5979\u8bf4\uff1a\u201c\u8fd9\u662f\u5173\u4e8e\u8bbe\u65bd\u7684\u5927\u5c0f\u548c\u5728\u4f60\u7684\u793e\u533a\u4e2d\u4f20\u64ad\u7684\u6570\u91cf\u3002\u201d\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6602\u7f57\u8b66\u544a\u8bf4\uff0c\u5c3d\u7ba1\u7814\u7a76\u4eba\u5458\u6b63\u5728\u52aa\u529b\u5bfb\u627e\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u4ed6\u4eec\u4ecd\u7136\u6ca1\u6709\u5f97\u5230\u6240\u6709\u7684\u7b54\u6848\uff1a\u201c\u8fd9\u662f\u4e00\u4e2a\u52a8\u8361\u7684\u65f6\u4ee3\uff0c\u6211\u4eec\u6b63\u8bd5\u56fe\u5728\u4fe1\u606f\u4e0d\u5b8c\u6574\u7684\u60c5\u51b5\u4e0b\u505a\u51fa\u4e34\u5e8a\u548c\u624b\u672f\u51b3\u7b56\u3002\u201d\n\u968f\u7740\u65e7\u91d1\u5c71\u5f00\u59cb\u91cd\u65b0\u5f00\u653e\uff0cSFCJL\u7684Cmiel\u611f\u5230\u7d27\u5f20\u3002\u201c\u8fd9\u628a\u6211\u5413\u6b7b\u4e86\uff0c\u201d\u5979\u8bf4\u3002\u201c\u6211\u5b9e\u9645\u4e0a\u8ba4\u4e3a\uff0c\u65e2\u7136\u8fd9\u5ea7\u57ce\u5e02\u6b63\u5728\u91cd\u65b0\u5f00\u653e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6536\u7d27\u653f\u7b56\u3002\u201d\u5982\u679c\u75c5\u6bd2\u5728\u57ce\u5e02\u4e2d\u7684\u793e\u533a\u4f20\u64ad\u5f00\u59cb\u589e\u52a0\uff0c\u517b\u8001\u9662\u5c45\u6c11\u5c06\u9762\u4e34\u66f4\u5927\u7684\u98ce\u9669\u3002\u4f46\u662f\uff0c\u4eba\u4eec\u53ef\u4ee5\u5728\u6ca1\u6709\u89c1\u5230\u4eb2\u4eba\u3001\u6ca1\u6709\u5f97\u5230\u953b\u70bc\u6216\u667a\u529b\u523a\u6fc0\u7684\u60c5\u51b5\u4e0b\u751f\u6d3b\u591a\u4e45\u5462\uff1f\u201c\u8fd9\u662f\u6211\u4eec\u5c45\u6c11\u7684\u5b89\u5168\u3001\u5065\u5eb7\u548c\u5bb6\u5ead\u9700\u6c42\u4e4b\u95f4\u7684\u6301\u7eed\u5e73\u8861\uff0c\u201dCmiel\u8865\u5145\u9053\u3002\n\u4fdd\u62a4\u8001\u5e74\u4eba\u4e0d\u53d7\u65b0\u51a0\u80ba\u708e\u4f24\u5bb3\u7684\u4e00\u4e2a\u66f4\u6df1\u8fdc\u7684\u65b9\u6cd5\u662f\u5728\u5bb6\u91cc\u7167\u987e\u4ed6\u4eec\uff0c\u8ba9\u4ed6\u4eec\u8fdc\u79bb\u957f\u671f\u5c45\u4f4f\u7684\u73af\u5883\u3002\u52a0\u5dde\u7684\u4e24\u9879\u5021\u8bae\uff0c\u57fa\u4e8e\u793e\u533a\u7684\u6210\u4eba\u670d\u52a1\u548c\u591a\u529f\u80fd\u8001\u5e74\u4eba\u670d\u52a1\u8ba1\u5212(CBAS\u548cMSSP)\uff0c\u5206\u522b\u4e3a\u6570\u5343\u540d\u4f4e\u6536\u5165\u8001\u5e74\u4eba\u63d0\u4f9b\u670d\u52a1-\u5176\u4e2d\u5927\u591a\u6570\u662f\u6709\u8272\u4eba\u79cd\u3002\u8fd9\u4e9b\u8ba1\u5212\u63d0\u4f9b\u57fa\u672c\u670d\u52a1\uff0c\u5982\u5bb6\u5ead\u62a4\u7406\u3001\u7269\u7406\u548c\u60c5\u611f\u6cbb\u7597\u3001\u9910\u996e\u548c\u4ea4\u901a\uff0c\u8fd9\u4e9b\u670d\u52a1\u4e0e\u517b\u8001\u9662\u5c45\u6c11\u83b7\u5f97\u7684\u652f\u6301\u4e0d\u76f8\u4e0a\u4e0b\u3002\n\u5728MSSP\u670d\u52a1\u7684\u8fd110,000\u540d\u8001\u5e74\u4eba\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u53ea\u67093\u4eba\u6b7b\u4e8e\u65b0\u51a0\u80ba\u708e\uff0c\u514b\u83b1\u5c14\u00b7\u62c9\u59c6\u9f50(Claire Ramsey)\u8bf4\uff0c\u5979\u662f\u8001\u5e74\u6b63\u4e49\u7ec4\u7ec7(Justice In Aging)\u7684\u9ad8\u7ea7\u804c\u5458\u5f8b\u5e08\uff0c\u8be5\u7ec4\u7ec7\u662f\u4e00\u5bb6\u5021\u5bfc\u4f4e\u6536\u5165\u8001\u5e74\u4eba\u7684\u975e\u8425\u5229\u7ec4\u7ec7\u3002\u201c\u8fd9\u662f\u4e00\u79cd\u66f4\u5b89\u5168\u7684\u63d0\u4f9b\u62a4\u7406\u7684\u65b9\u5f0f\uff0c\u201d\u5979\u8bc4\u8bba\u8bf4\u3002\u4e54\u591a\u65af\u6307\u51fa\uff0c\u5728\u5bb6\u4e2d\u63a5\u53d7\u62a4\u7406\u7684\u8001\u5e74\u4eba\u6291\u90c1\u75c7\u7684\u53d1\u751f\u7387\u4e5f\u8f83\u4f4e\uff0c\u8ba4\u77e5\u548c\u8eab\u4f53\u8870\u9000\u7684\u901f\u5ea6\u4e5f\u8f83\u6162\u3002\u6602\u7f57\u8bf4\uff0c\u5bb6\u5ead\u62a4\u7406\u901a\u5e38\u4e5f\u662f\u8001\u5e74\u4eba\u66f4\u559c\u6b22\u7684\uff1a\u201c\u4eba\u4eec\u5e94\u8be5\u5728\u4ed6\u4eec\u60f3\u8981\u5f97\u5230\u7167\u987e\u7684\u5730\u65b9\u5f97\u5230\u7167\u987e\u3002\u51e0\u4e4e\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u8bf4\u8fd9\u662f\u5728\u4ed6\u4eec\u7684\u5bb6\u91cc\u3002\u201c\u3002\n\u5021\u5bfc\u8005\u8868\u793a\uff0c\u517b\u8001\u9662\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5b83\u4eec\u4e0d\u5e94\u8be5\u6210\u4e3a\u9700\u8981\u5e2e\u52a9\u7684\u8001\u5e74\u4eba\u7684\u9ed8\u8ba4\u62a4\u7406\u89e3\u51b3\u65b9\u6848\u3002\u62c9\u59c6\u9f50\u8bf4\uff1a\u201c\u5e94\u8be5\u6709\u4e00\u4e2a\u8fde\u7eed\u7684\u62a4\u7406\u4f53\u7cfb\uff0c\u673a\u6784\u62a4\u7406\u5e94\u8be5\u771f\u6b63\u4fdd\u7559\u7ed9\u9700\u8981\u5b83\u7684\u4eba\uff0c\u4ed6\u4eec\u4e0d\u53ef\u80fd\u5728\u81ea\u5df1\u7684\u5bb6\u91cc\u53d6\u5f97\u6210\u529f\u548c\u5b89\u5168\u3002\u201d\n\u4f46\u65b0\u51a0\u80ba\u708e\u7684\u7ecf\u6d4e\u6548\u5e94\u6b63\u8feb\u4f7f\u5404\u5dde\u524a\u51cf\u9884\u7b97\uff1b\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u548c\u7ebd\u7ea6\u5dde\u90fd\u63d0\u8bae\u524a\u51cf\u4e3a\u4f4e\u6536\u5165\u8001\u5e74\u4eba\u63d0\u4f9b\u5bb6\u52a1\u5e2e\u52a9\u7684\u9879\u76ee\uff0c\u8fd9\u4e9b\u9879\u76ee\u4f7f\u4ed6\u4eec\u65e0\u6cd5\u8fdb\u5165\u673a\u6784\u3002\u5728\u91d1\u5dde\uff0c\u5dde\u957f\u52a0\u6587\u00b7\u7ebd\u745f\u59c6(Gavin Newsom)\u4fee\u8ba2\u540e\u7684\u9884\u7b97\u5c06\u53d6\u6d88CBAS\u548cMSSP\uff0c\u5e76\u5c06\u5bb6\u5ead\u62a4\u7406\u533b\u7597\u57fa\u91d1\u7684\u5de5\u4f5c\u65f6\u95f4\u51cf\u5c117%\u3002\u7ebd\u7ea6\u5dde\u5df2\u7ecf\u51b3\u5b9a\u9650\u5236\u6d88\u8d39\u8005\u5bfc\u5411\u4e2a\u4eba\u63f4\u52a9\u8ba1\u5212(Consumer Directed Personal Assistant Program)\u7684\u8d44\u683c\uff0c\u8be5\u8ba1\u5212\u4e3a\u6b8b\u75be\u6216\u6162\u6027\u75c5\u7684\u7ebd\u7ea6\u4eba\u652f\u4ed8\u5bb6\u5ead\u62a4\u7406\u52a9\u624b\u7684\u8d39\u7528\u3002\u62c9\u59c6\u9f50\u8bf4\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e9b\u8ba1\u5212\uff0c\u8bb8\u591a\u8001\u5e74\u4eba\u5c06\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u5165\u4f4f\u957f\u671f\u62a4\u7406\u673a\u6784\u3002\u5979\u8865\u5145\u8bf4\uff1a\u201c\u5982\u679c\u4f60\u8fd9\u6837\u505a\uff0c\u5b9e\u9645\u4e0a\u4f1a\u6709\u66f4\u591a\u7684\u4eba\u6b7b\u4ea1\u3002\u201d\n\u53e6\u4e00\u4e2a\u4ee4\u4eba\u62c5\u5fe7\u7684\u95ee\u9898\u662f\uff0c\u5373\u4f7f\u8001\u5e74\u4eba\u4e0d\u4f1a\u88ab\u8feb\u8fdb\u5165\u9ad8\u98ce\u9669\u7684\u751f\u6d3b\u73af\u5883\uff0c\u5176\u4ed6\u524a\u51cf\u4e5f\u53ef\u80fd\u5371\u53ca\u4ed6\u4eec\u7684\u6574\u4f53\u5065\u5eb7\u3002\u52a0\u5dde\u7684\u62df\u8bae\u9884\u7b97\u8fd8\u5c06\u524a\u51cf\u4eab\u53d7\u533b\u7597\u670d\u52a1\u7684\u8d44\u683c\uff0c\u5e76\u53d6\u6d88\u53ef\u9009\u7684\u533b\u7597\u798f\u5229\uff0c\u5982\u8db3\u7597\u3001\u7269\u7406\u6cbb\u7597\u548c\u7cd6\u5c3f\u75c5\u9884\u9632\u8ba1\u5212\u3002\u65e0\u8bba\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u7684\u5a01\u80c1\u662f\u4ec0\u4e48\uff0c\u8fd9\u4e9b\u597d\u5904\u5bf9\u4e8e\u4fdd\u6301\u4eba\u4eec\u7684\u5065\u5eb7\u548c\u751f\u547d\u90fd\u5f88\u91cd\u8981\u3002\u62c9\u59c6\u9f50\u8bf4\uff1a\u201c\u6211\u4eec\u975e\u5e38\u62c5\u5fc3\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u8fd9\u4e9b\u75be\u75c5\u5bf9\u4eba\u4eec\u7684\u7d2f\u79ef\u5371\u5bb3\u6709\u591a\u5927\u3002\u201d\u201c\u8fd9\u771f\u7684\u662f\u6b7b\u4e861000\u5200\u3002\u201d\n\u201c\u8fde\u7ebf\u201d\u6b63\u5728\u514d\u8d39\u63d0\u4f9b\u6709\u5173\u516c\u5171\u536b\u751f\u4ee5\u53ca\u5982\u4f55\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u671f\u95f4\u4fdd\u62a4\u81ea\u5df1\u7684\u62a5\u9053\u3002\u8ba2\u9605\u6211\u4eec\u7684\u51a0\u72b6\u75c5\u6bd2\u66f4\u65b0\u65f6\u4e8b\u901a\u8baf\u4ee5\u83b7\u53d6\u6700\u65b0\u66f4\u65b0\uff0c\u5e76\u8ba2\u9605\u4ee5\u652f\u6301\u6211\u4eec\u7684\u65b0\u95fb\u3002\n\u201c\u4f60\u5e76\u4e0d\u5b64\u5355\u201d\uff1a\u4e00\u540d\u62a4\u58eb\u5982\u4f55\u9762\u5bf9\u5927\u6d41\u884c", "note_en": "In mid-March, as San Francisco mayor London Breed issued a citywide stay-at-home order, Peggy Cmiel started getting prepared. Cmiel is the director of clinical operations at the San Francisco Center for Jewish Living, or SFCJL, a 9-acre senior housing complex in the Excelsior neighborhood that includes long-term care facilities, short-term rehab housing, and a memory care wing. The campus houses over 300 elderly residents, members of one of the populations most vulnerable to the deadly and highly infectious  coronavirus that has spread across the globe.\n  Cmiel\u2019s staff stocked up on personal protective equipment and masks for workers and residents; screened everyone who walked in the door for symptoms; hired more staff to clean bathrooms and common areas; and started educating everyone on best practices for containing the virus, like washing hands, avoiding close contact, and keeping an eye out for  symptoms like fevers or coughs. And while nursing homes account for  nearly half of California\u2019s coronavirus fatalities, at the SFCJL not a single resident has tested positive for the virus. \u201cGetting an early start was really the most helpful thing we did,\u201d says Cmiel. \u201cThe doorknobs in this facility have never been more clean before.\u201d\n  Not every home was so lucky and so well prepared. Nursing homes across the US have been devastated by  Covid-19. In many states including  Colorado,  Massachusetts, and  Virginia, nursing home resident deaths account for  50 percent or more of coronavirus deaths. But the success of a handful of homes, like SFCJL, might offer their colleagues some clues about how to keep residents safe as the nation braces for a potential second wave of infections.\n Geriatricians and nursing home operators understand why these spaces are so vulnerable. Long-term care facilities are, in many ways, perfect virus incubators. Residents, who are older, frail, and often have comorbidities like heart disease or diabetes, are  more susceptible to severe Covid-19 infections. Many need help performing basic tasks like eating, dressing, or bathing\u2014care that can\u2019t be delivered through a video appointment, making it more likely they could get an infection from the aides who help them, or pass the virus along to their caretakers. Those aides may work at several different facilities, and unknowingly carry it from one home to another.\n  The layout of these facilities also furthers contact in various areas. Most residents share bedrooms, bathrooms, activity rooms, and dining rooms\u2014and staffers share a break room. Those group spaces are designed partly to cut costs, and also to encourage socializing. But shared spaces have also helped spread the virus. Senior facilities do have protocols to handle outbreaks like the flu, but the pandemic arrived so quickly and the SARS-CoV-2 virus is so contagious that many facilities were caught unprepared. \u201cThere\u2019s an extent to which this virus just had the upper hand,\u201d says Anna Chodos, a geriatrician at the UCSF. Unlike hospitals, most nursing homes aren&#39;t ordinarily well stocked with gear like masks and gowns, which aren\u2019t necessary when containing the flu.\n  Now, as states slowly start to reopen, senior care facilities are facing a more complicated endeavor: figuring out how to keep residents safe and maintain their quality of life as the Covid-19 pandemic stretches on. Even for facilities like SFCJL, the path forward is far from clear. \u201cHow do we safely and slowly introduce visitation and group activities? It\u2019s going to be very careful and very cautious,\u201d says Cmiel. \u201cIt will just be very scary to start bringing people back into the community again.\u201d\n Unlike hospitals, most nursing home residents live in these facilities permanently, so staff have to create environments that are comfortable for people\u2019s long-term emotional, social, and physical well-being. But the novel coronavirus has put those important psychological services on hold. \u201cThe way of life inside nursing homes is so disrupted,\u201d says Kathleen Unroe, an assistant professor of geriatrics at the University of Indiana. \u201cThis is where people live. These are social places.\u201d\n  Or at least they used to be. Many facilities currently are restricting movement as much as possible, keeping people in their rooms and out of shared spaces. Unroe consults for several nursing facilities, and says that at one of them, family members haven\u2019t been allowed to visit for two months. \u201cI have these family members who say to me, \u2018I have never been away from my 95-year-old mother for this long in my life,\u2019\u201d she adds. \u201cIt\u2019s profound.\u201d\n Unroe also points out that at some facilities, even people who have recovered from Covid-19 can\u2019t always go back to their own rooms. If they continue to shed virus and test positive for weeks after their symptoms have resolved, they have to stay in isolation, which can be scary and upsetting. Some don\u2019t understand why they can\u2019t go back to their usual rooms; \u201cothers just feel abandoned and are just confused or mad.\u201d\n  So what helped the SFCJL fare better than many of its counterparts? It\u2019s likely a combination of early action and luck. The facility was one of the first in California to start screening visitors before they entered the premises. They stocked up on protective equipment and were ready to hand out masks to every single resident and staff member. Laguna Honda Hospital and Rehabilitation Center, another long-term care facility in San Francisco that quarantined early, has over 700 beds and has had similar success\u2014reporting only 29 cases among residents and staff. \u201cSan Francisco acted really early, so I don\u2019t think it\u2019s by chance,\u201d says Troy Williams, the chief quality officer at Zuckerberg SF General Hospital and Trauma Center, who has been in charge of Laguna Honda&#39;s response to the pandemic.\n UCSF\u2019s Chodos agrees that Laguna Honda\u2019s early moves to lock down the facility and isolate infected residents were integral in abating the outbreak. \u201cThey crushed it like a bug,\u201d she says. But she says facilities in San Francisco also got lucky: \u201cGot lucky in that we had great leadership. Got lucky in that we had less virus.\u201d San Francisco issued stay-at-home orders early compared with the rest of the nation, and has seen relatively low infection rates. With less viral spread in the community, it\u2019s less likely that staff would accidentally introduce it into the facility.\n Another factor is likely that both Laguna Honda and SFCJL participated in San Francisco\u2019s universal testing program, mandated by the mayor and spearheaded by the city\u2019s Department of Public Health. Both facilities will continue to test all staff and residents every few weeks, testing more often if they start to see more positive results. (Staff go home every night, and each day teams of physical and respiratory therapists, aides, nurses, and other staff reenter these complexes, potentially bringing new infections with them.) \u201cWe have to keep our pedal to the metal,\u201d Williams says, \u201cbecause it could change.\u201d\n They are also working on other strategies to reduce risk. For example, SFCJL has opened a new wing that accepts patients from local hospitals who are recovering from Covid-19, and who need short-term rehab care before they can go home again. That unit has an entirely separate medical, nursing, and cleaning staff. Patients use a different entrance, and staffers clean the elevator immediately after they are taken to their rooms.\n  For all seniors in nursing homes, whether or not there is a viral outbreak, staying in bed without any physical contact with loved ones is bad for mental and physical health. Normally, facilities have lots of activities and visitors; volunteers play music, bring therapy dogs, or play card games with residents. To adapt during the pandemic, both Laguna Honda and SFCJL staff bought iPads so residents can video call their families. Laguna Honda is now starting to run a few socially distanced activities like bingo games and art classes where participants can be six feet apart and wear masks.\n  Chodos says these measures can help stem the spread of the virus from asymptomatic carriers. With a virus this infectious, she adds, \u201cno precaution is superfluous in any circumstance.\u201d\n But those precautions are only helpful to a point, according to Unroe. \u201cThese outbreaks are continuing and they\u2019re going to continue in nursing homes,\u201d she says. There are still a lot of unanswered questions about how and why the virus has spread so quickly in some homes, but not in others. Based on  early data, she says: \u201cIt\u2019s about the size of the facility and the amount of spread in your community.\u201d\n Nevertheless, Unroe warns that while researchers are working furiously to figure out solutions, they still don\u2019t have all the answers: \u201cIt&#39;s a turbulent time and we&#39;re trying to make clinical and operational decisions with incomplete information.\u201d\n As San Francisco starts to reopen, SFCJL\u2019s Cmiel is nervous. \u201cThis scares me to death,\u201d she says. \u201cI actually think we need to tighten up now that the city is reopening.\u201d If community transmission of the virus starts to increase in the city, nursing home residents will be at an even greater risk. But how long can people go without seeing their loved ones, or getting exercise or intellectual stimulation? \u201cIt\u2019s this constant balance,\u201d adds Cmiel, \u201cbetween the safety and health of our residents and the needs of the families.\u201d\n   A much more far-reaching approach to keep older people safe from Covid-19 would be to care for them in their homes, keeping them out of long-term residential settings. Two initiatives in California, Community-Based Adult Services and Multipurpose Senior Services Program (CBAS and MSSP, respectively), serve thousands of low-income seniors\u2014the majority of whom are people of color. The programs provide essential services like at-home nursing care, physical and emotional therapy, meals, and transportation that are on-par with the support received by residents in senior homes.\n Out of the nearly 10,000 seniors served by MSSP, only three have died of Covid-19 so far, says Claire Ramsey, a senior staff attorney at Justice in Aging, a nonprofit that advocates for low-income seniors. \u201cThis is a way safer way to provide care,\u201d she comments. Chodos notes that seniors who receive care in their homes also have  lower rates of depression, and experience slower  cognitive and  physical decline. And home care is also usually what seniors would prefer, says Unroe: \u201cPeople should be cared for where they want to be cared for. Almost anyone would say that is in their homes.\u201d\n Advocates say that nursing homes are necessary, but they shouldn\u2019t be the default care solution for seniors who need some assistance. \u201cThere should be a continuum of care, and institutional care should really be reserved for people who need it, who can\u2019t be successful and safe in their own homes,\u201d says Ramsey.\n  But the economic effects of Covid-19 are forcing states to cut budgets; both California and New York have proposed cuts to programs that provide low-income seniors with at-home help that keeps them out of institutions. In the Golden State, Governor Gavin Newsom\u2019s revised budget will eliminate both CBAS and MSSP and reduce the hours of in-home care MediCal funds by 7 percent. New York state already has decided to limit eligibility to the Consumer Directed Personal Assistance Program, which pays for home nursing aides for disabled or chronically ill New Yorkers. Ramsey says that without these programs, many seniors will have no choice but to move into long-term care facilities. \u201cYou are literally going to have more people die if you do this,\u201d she adds.\n Another worry is that even if seniors aren\u2019t forced into high-risk living situations, other cuts could jeopardize their overall health. California\u2019s proposed budget would also cut eligibility for MediCal and eliminate optional MediCal benefits like podiatry, physical therapy, and diabetes prevention programs. Those benefits are important for keeping people healthy and alive, regardless of the threat from the novel coronavirus. \u201cOne of the things we\u2019re very worried about is how bad these are cumulatively for people,\u201d says Ramsey. \u201cIt\u2019s really death by 1,000 cuts.\u201d\n  WIRED is providing  free access to stories about public health and how to protect yourself during the  coronavirus pandemic. Sign up for our  Coronavirus Update newsletter for the latest updates, and  subscribe to support our journalism.\n   \u201cYou\u2019re Not Alone\u201d: How one nurse is  confronting the pandemic", "posttime": "2020-05-29 23:04:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9003\u8131,homes,\u5c45\u6c11", "title": "\u4e00\u4e9b\u7597\u517b\u9662\u9003\u8131\u4e86\u65b0\u51a0\u80ba\u708e\u7684\u8ffd\u6355--\u4ed6\u4eec\u8fd9\u6837\u505a\u662f\u5bf9\u7684", "title_en": "Some Nursing Homes Escaped Covid-19\u2013Here's What They Did Right", "transed": 1, "url": "https://www.wired.com/story/some-nursing-homes-escaped-covid-19-heres-what-they-did-right/", "via": "", "real_tags": ["\u9003\u8131", "homes", "\u5c45\u6c11"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004252, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "DuckDuckGo\u5e7f\u544a\u724c", "note_en": "DuckDuckGo Billboards", "posttime": "2020-05-29 22:49:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e7f\u544a,duckduckgo", "title": "DuckDuckGo\u5e7f\u544a\u724c", "title_en": "DuckDuckGo Billboards", "transed": 1, "url": "https://duckduckgo.com/billboards/", "via": "", "real_tags": ["\u5e7f\u544a"]}, {"category": "", "categoryclass": "", "imagename": "40017bcd42c7d2139a70fa651df20947.png", "infoid": 1004251, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u4f7f\u7528Home Assistant\u548cNode-RED\u6b63\u5e38\u5316\u6240\u6709media_player\u97f3\u91cf\u7ea7\u522b\u3002\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\uff0c\u6211\u5efa\u8bae\u60a8\u9605\u8bfb\u6211\u4e0a\u4e00\u7bc7\u5173\u4e8e\u53d1\u9001\u6587\u672c\u5230\u8bed\u97f3\u901a\u77e5\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u5176\u4e2d\u66f4\u6df1\u5165\u5730\u4ecb\u7ecd\u4e86\u6b64\u6d41\u6d88\u8017\u7684\u53ef\u9009\u8f85\u52a9\u529f\u80fd\u5b50\u6d41\u3002\n\u4f7f\u7528Amazon Alexa\u5a92\u4f53\u64ad\u653e\u5668\u96c6\u6210\u529f\u80fd\uff0c\u6b64\u81ea\u52a8\u5316\u529f\u80fd\u53ef\u6839\u636e\u4e00\u5929\u4e2d\u7684\u4e0d\u540c\u65f6\u95f4\u5bf9\u6211\u5bb6\u4e2d\u7684\u6240\u6709\u97f3\u91cf\u7ea7\u522b\u8fdb\u884c\u6807\u51c6\u5316\uff0c\u4ee5\u4fbf\u5c06\u6211\u6240\u6709\u7684Amazon Echoand Ecobe Switch+\u8bbe\u5907\u5e26\u5165Home Assistant\u3002\n\u8fd9\u662f\u6211\u5bb6\u91cc\u6211\u6700\u559c\u6b22\u7684\u81ea\u52a8\u5316\u4ea7\u54c1\u4e4b\u4e00\uff0c\u6211\u60f3\u4f60\u4e5f\u4f1a\u559c\u6b22\u7684\uff01\u6211\u5199\u8fd9\u4e2a\u81ea\u52a8\u5316\u6709\u51e0\u4e2a\u539f\u56e0\uff1a\n\u6211\u5e0c\u671b\u6240\u6709\u7684\u6f14\u8bb2\u8005\u5728\u5c31\u5bdd\u65f6\u95f4\u90fd\u4fdd\u6301\u5b89\u9759\u3002\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u6709\u4eba\u5728\u51cc\u66682\u70b9\u88ab\u70b8\u6b7b\u3002\n\u65e9\u4e0a\u559d\u5b8c\u5496\u5561\u540e\uff0c\u6211\u60f3\u628a\u97f3\u91cf\u8c03\u5230\u53ef\u4ee5\u63a5\u53d7\u7684\u6c34\u5e73\u3002\n\u81ea\u52a8\u5316\u5141\u8bb8\u901a\u8fc7\u5b50\u6d41\u8fdb\u884c\u91cd\u7528\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u89e6\u53d1\u5b83\uff0c\u6bd4\u5982\u670b\u53cb\u7ed3\u675f\u4e86\uff0c\u97f3\u4e50\u6b63\u5728\u64ad\u653e\uff0c\u589e\u52a0\u97f3\u91cf\u6216\u964d\u4f4e\u97f3\u91cf\u3002\n\u5c11\u4e86\u4e00\u4ef6\u6211\u5fc5\u987b\u601d\u8003\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u4e0d\u65ad\u89e6\u6478\u624d\u80fd\u6539\u53d8\u7684\u4e8b\u60c5\u3002\u5728\u5927\u6d41\u884c\u7684\u4eca\u5929\uff0c\u8fd9\u4e5f\u662f\u4f60\u53ef\u80fd\u8981\u6e05\u7406\u7684\u4e00\u4ef6\u4e8b\uff01\n\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u5b89\u88c5Alexa Media Player\u81ea\u5b9a\u4e49\u7ec4\u4ef6\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fAlexa\uff0c\u8bf7\u5b89\u88c5\u8be5\u7ec4\u4ef6\uff0c\u5426\u5219\u8df3\u8fc7\u6b64\u90e8\u5206\u3002\n\u8fd9\u4e2a\u63d2\u4ef6\u4ee4\u4eba\u60ca\u53f9\uff0c\u56e0\u4e3a\u5b83\u5c06\u6240\u6709\u652f\u6301Alexa\u7684\u8bbe\u5907(\u5982Amazon Echoor ecobe Switch+)\u6b63\u5e38\u5316\u4e3a\u53ef\u4f9b\u5bb6\u5ead\u52a9\u7406\u4f7f\u7528\u7684\u5a92\u4f53\u64ad\u653e\u5668\u3002\n\u6b64\u81ea\u52a8\u5316\u6d41\u901a\u8fc7\u8c03\u7528media_player.volume_set\u670d\u52a1\u63a7\u5236\u97f3\u91cf\u7ea7\u522b\u3002\u6211\u5efa\u8bae\u60a8\u5148\u6253\u5f00Home Assistant\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u5e76\u5bfc\u822a\u5230\u201c\u670d\u52a1\u201d\u9009\u9879\u5361\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u3002\n\u63a5\u4e0b\u6765\uff0c\u5f00\u59cb\u5728media_player\u4e0a\u64ad\u653e\u4e00\u4e9b\u97f3\u4e50\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u6709\u6548\u8d1f\u8f7d\u8c03\u7528media_player.volume_set\u670d\u52a1\uff1a\n\u5982\u679c\u60a8\u6ca1\u6709\u542c\u5230\u97f3\u91cf\u53d8\u5316\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528\u4e0d\u540c\u7684VOLUME_LEVEL\uff0c\u4ee5\u9632\u8bbe\u5907\u5df2\u5904\u4e8e\u8be5\u97f3\u91cf\u7ea7\u522b\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219\u505c\u6b62\u5e76\u68c0\u67e5\u65e5\u5fd7\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u8bca\u65ad\u8bbe\u5907\u65e0\u6cd5\u5de5\u4f5c\u7684\u539f\u56e0\uff0c\u5e76\u5728\u7ee7\u7eed\u4e4b\u524d\u4e3a\u60a8\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002\n\u6211\u5f3a\u70c8\u5efa\u8bae\u6dfb\u52a0\u591a\u4e2a\u8f93\u5165\u5e03\u5c14\u6765\u63a7\u5236\u7279\u5b9a\u81ea\u52a8\u5316\u6216\u6240\u6709\u81ea\u52a8\u5316\u662f\u5426\u53ef\u4ee5\u8fd0\u884c\u3002\u5728\u7ef4\u62a4\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u6253\u5f00\u6216\u5173\u95ed\u7279\u5b9a\u7684\u81ea\u52a8\u5316\u6216\u6240\u6709\u7684\u81ea\u52a8\u5316\u603b\u662f\u5f88\u597d\u7684\u3002\u4e0b\u9762\u662f\u6b64Automation\u6d41\u4e2d\u4f7f\u7528\u7684\u4e09\u4e2aINPUT_BOOLEAN\u3002\nAUTOMATION_ENABLE\uff1a\u540d\u79f0\uff1a\u542f\u7528\u81ea\u52a8\u5316\u56fe\u6807\uff1amdi:home-automationautomation_normalize_volume\uff1a\u540d\u79f0\uff1aAUTOMATION-\u5168\u5929\u81ea\u52a8\u89c4\u683c\u5316\u97f3\u91cf\u56fe\u6807\uff1amdi\uff1aVOLUME-HUTOMATION_NOTIFICATIONS\uff1a\u540d\u79f0\uff1a\u89e6\u53d1\u81ea\u52a8\u5316\u65f6\u901a\u77e5\u56fe\u6807\uff1amdi\uff1aHOME-AUTOMANIZATION\u3002\n\u6b64\u5b50\u6d41\u7a0b\u5c06\u83b7\u5f97\u5f53\u524d\u8bbe\u5907\u7684\u97f3\u91cf\u7ea7\u522b\uff0c\u6bd4\u8f83\u5f53\u524d\u72b6\u6001\u548c\u6240\u9700\u72b6\u6001\u3002\u5982\u679c\u9700\u8981\u66f4\u6539\uff0c\u5b83\u5c06\u8c03\u7528\u6240\u9700\u7684\u670d\u52a1\u6765\u66f4\u6539\u8bbe\u5907\u97f3\u91cf\u7ea7\u522b\u3002\n\u7136\u540e\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u6709\u72b6\u6001\u8282\u70b9\u3001\u4e00\u4e2a\u8f93\u5165\u548c\u4e00\u4e2a\u8f93\u51fa\u7684\u65b0\u5b50\u6d41\u3002\u6b64\u5b50\u6d41\u7a0b(\u53ef\u9009)\u53d6\u51b3\u4e8e\u201c\u53d1\u9001\u81ea\u52a8\u8bed\u97f3\u901a\u77e5\u201d\u5b50\u6d41\u7a0b\u3002\nGraph TDInputNode(Input)--&gt\uff1bACurrentStateNode(FAS\uff1aFA-\u6570\u636e\u5e93\u83b7\u53d6\u5f53\u524d\u97f3\u91cf\u7ea7\u522b)ACurrentStateNode--&gt\uff1bBFunctionNode(FAS\uff1aFA-\u4ee3\u7801\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\u6709\u6548\u8d1f\u8f7d)BFunctionNode--&gt\uff1bCCallServiceNode(FAS\uff1aFA-PLAY\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b)BFunctionNode--&gt\uff1bDCallSubflowNode\u3002StatusOutputNode(Status)style StatusNode Fill\uff1a#ECF5Fstyle StatusOutputNode Fill\uff1a#FAFBstyle InputNode Fill\uff1a#FAFBstyle ACurrentStateNode Fill\uff1a#66ACFDstyle BFunctionNode Fill\uff1a#FBB68Fstyle CCallServiceNode Fill\uff1a#66ACFDstyle DCallSubflowNode Fill\uff1a#FF75A1 style OutputNode Fill\uff1a#FAFAFB\u3002\n\u8ba9\u6211\u4eec\u5206\u89e3\u4e00\u4e0b\u5b50\u6d41\u3002\u4f20\u5165\u7684\u6d88\u606f\u88ab\u4f20\u9012\u5230Get Current Volume Level Current State\u8282\u70b9\uff0c\u4ee5\u4f7f\u7528\u5b9e\u4f53\u586b\u5145msg.data\u3002\u7136\u540e\u5c06\u5176\u4f20\u9012\u5230\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\u6709\u6548\u8d1f\u8f7d\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u68c0\u67e5\u662f\u5426\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\u4ee5\u6ee1\u8db3\u6240\u9700\u7684\u97f3\u91cf\u7ea7\u522b\uff0c\u5e76\u8f93\u51fa\u6587\u672c\u5230\u8bed\u97f3(TTS)\u72b6\u6001\u6d88\u606f\u3002\u5982\u679c\u9700\u8981\u66f4\u6539\uff0c\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\u8282\u70b9\u5c06\u8c03\u7528media_player.volume_set\u670d\u52a1\u3002\n\u4ee5\u4e0b\u662fSet Volume Level PayloadFunction\u8282\u70b9\u4e2d\u5305\u542b\u7684JavaScript\u4ee3\u7801\uff0c\u7528\u4e8e\u4ec5\u5728\u9700\u8981\u65f6\u667a\u80fd\u8c03\u6574\u97f3\u91cf\u3002\nconst entity=msg.payload&amp\uff1b&amp\uff1bmsg.payload.entity_id\uff1bconst Attributes=msg.data&amp\uff1b&amp\uff1bmsg.data.tributesif(\uff01entity||\uff01tributes){node.status({Fill\uff1a&#34\uff1bred&#34\uff1b\uff0cShape\uff1a&#34\uff1bdot&#34\uff1b\uff0ctext\uff1a&#34\uff1bInvalid Volume payload&#34\uff1b})\uff1b\u8fd4\u56de[null\uff0cnull]\uff1b}const desired_({\u586b\u5145\uff1a&#34\uff1b\u7ea2\u8272&#34\uff1b\uff0c\u5f62\u72b6\uff1a&#34\uff1b\u70b9&#34\uff1b\uff0c\u6587\u672c\uff1a&#34\uff1b\u65e0\u6548\u5377\u6709\u6548\u8d1f\u8f7d&#34\uff1b})\uff1b\u8fd4\u56de[null\uff0cnull]\uff1b}const desired_\u30020.0||desired_volume_level&gt\uff1b1.0){let message=&#34\uff1b\u97f3\u91cf\u7ea7\u522b\u5fc5\u987b\u57280\u52301\u4e4b\u95f4\u3002&#34\uff1b\uff1bnode.status({Fill\uff1a&#34\uff1bred&#34\uff1b\uff0cShape\uff1a&#34\uff1bdot&#34\uff1b\uff0ctext\uff1amessage})\uff1bnode.error(Message)\uff1breturn[null\uff0c{payload\uff1a{entity_id\uff1aentity\uff0cmessage\uff1amessage}}]\uff1b}if(desired_volume_level==\u5c5e\u6027.volume_level)\u3002\u97f3\u91cf\u7ea7\u522b\u5df2\u5904\u4e8e\u6240\u9700\u7ea7\u522b\u3002&#34\uff1b\uff1bnode.status({\u586b\u5145\uff1a&#34\uff1b\u7070\u8272&#34\uff1b\uff0c\u5f62\u72b6\uff1a&#34\uff1b\u70b9&#34\uff1b\uff0c\u6587\u672c\uff1a\u6d88\u606f})\uff1bnode.log(Message)\uff1breturn[null\uff0c{payload\uff1a{entity_id\uff1aentity\uff0cmessage\uff1amessage}}]\uff1b}const volumePayload={payload\uff1a{data\uff1a{entity_id\uff1aentity\uff0cvolume_level\uff1adesired_volume_level}\uff1blet message=\u3002+(RESENDED_VOLUME_LEVEL*100)+&#34\uff1b\u767e\u5206\u6bd4.&#34\uff1b\uff1bconst Speech Payload={payload\uff1a{entity_id\uff1aentity\uff0cmessage\uff1amessage}}\uff1bnode.status({Fill\uff1a&#34\uff1bgreen&#34\uff1b\uff0cform\uff1a&#34\uff1bdot&#34\uff1b\uff0ctext\uff1amessage})\uff1breturn[volumePayload\uff0ctalk Payload]\uff1b\n\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u5b83\u5c06\u8f93\u51fa\u4e00\u4e2a\u53cb\u597d\u7684\u8bed\u97f3\u901a\u77e5\u6709\u6548\u8d1f\u8f7d\uff0c\u8be5\u8d1f\u8f7d\u5c06\u88ab\u53d1\u9001\u5230Send Automation Speech Notification\u5b50\u6d41\u3002\u5982\u679c\u60a8\u6ca1\u6709\u4f7f\u7528Alexa_MEDIA_Player Home Assistant\u63d2\u4ef6\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u66f4\u65b0\u201c\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\u6709\u6548\u8d1f\u8f7d\u201d\u529f\u80fd\u8282\u70b9\u4ee5\u83b7\u53d6\u60a8\u671f\u671b\u7684\u97f3\u91cf\u8303\u56f4\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5177\u6709\u4ee5\u4e0b\u6709\u6548\u8d1f\u8f7d\u7684\u6d88\u606f\u5bf9\u8c61\u6765\u89e6\u53d1\u6b64\u5b50\u6d41\u3002\u6211\u5efa\u8bae\u4f7f\u7528Inject Node\u6765\u6d4b\u8bd5\u8fd9\u4e00\u70b9\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u6211\u7684Alexa\u6f14\u8bb2\u8005\u3002\u6211\u4f7f\u7528\u4ecb\u4e8e[0.0..0.10]\u4e4b\u95f4\u7684\u97f3\u91cf\u7ea7\u522b\u3002\u8981\u9759\u97f3\uff0c\u8bf7\u4f20\u90120.0\u3002\n\u8be5\u5b50\u6d41\u7a0b\u5c06\u83b7\u53d6\u6240\u6709MEDIA_Player\u2018\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u9010\u4e2a\u53d1\u9001\u5230\u8bbe\u7f6e\u7684\u97f3\u91cf\u7ea7\u5b50\u6d41\u7a0b\u3002\n\u5982\u679c\u60a8\u6ca1\u6709\u4f7f\u7528Alexa\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8c03\u6574\u83b7\u53d6\u6240\u6709\u5a92\u4f53\u64ad\u653e\u5668\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u5c06\u8fd4\u56de\u5177\u6709\u7279\u5b9a\u529f\u80fd\u5c5e\u6027\u7684\u6240\u6709\u8bbe\u5907\uff0c\u8be5\u5c5e\u6027\u8868\u793a\u6211\u652f\u6301\u66f4\u6539\u97f3\u91cf\u7ea7\u522b\u3002\nGraph TDInputNode(Input)--&gt\uff1bAFunctionNode(FAS\uff1aFA\u4ee3\u7801\u89e3\u6790\u97f3\u91cf\u7ea7\u522b)AFunctionNode--&gt\uff1bBGetEntiesNode(FAS\uff1aFA-\u641c\u7d22\u83b7\u53d6\u6240\u6709\u5a92\u4f53\u64ad\u653e\u5668)BGetEntiesNode--&gt\uff1bCChangeNode(FAS\uff1aFA-\u968f\u673a\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\u6709\u6548\u8d1f\u8f7d)CChangeNode--&gt\uff1bDSubflowNode(FAS\uff1aFA-\u968f\u673a\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\u6709\u6548\u8d1f\u8f7d)CChangeNode--&gt\uff1bDSubflowNode(FAS\uff1aFA-\u968f\u673a\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\u6709\u6548\u8d1f\u8f7d)CChangeNode--&gt\uff1bDSubflowNode(FAS\u3002StatusOutputNode(Status)style StatusNode Fill\uff1a#ECF5Fstyle StatusOutputNode Fill\uff1a#FAFBstyle InputNode Fill\uff1a#FAFBstyle AFunctionNode Fill\uff1a#FBB68Fstyle BGetEntiesNode Fill\uff1a#66ACFDstyle CChangeNode Fill\uff1a#FEA530style DSubflowNode Fill\uff1a#FF75A1 style OutputNode Fill\uff1a#FAFAFBlinkStingNode Fill\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5177\u6709\u4ee5\u4e0b\u6d6e\u70b9(\u4f8b\u59820.1)\u6709\u6548\u8d1f\u8f7d\u7684\u6d88\u606f\u5bf9\u8c61\u6765\u89e6\u53d1\u6b64\u5b50\u6d41\u3002\u6211\u5efa\u8bae\u4f7f\u7528Inject Node\u6765\u6d4b\u8bd5\u8fd9\u4e00\u70b9\u3002\n\u6b64\u6d41\u5c06\u524d\u9762\u7684\u4e24\u4e2a\u5b50\u6d41\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4ee5\u57fa\u4e8e\u4e00\u5929\u4e2d\u7684\u65f6\u95f4\u5c06\u6240\u6709\u6210\u4ea4\u91cf\u7ea7\u522b\u6b63\u5e38\u5316\u3002\u5728\u6211\u5bb6\uff0c\u6211\u628a\u65e9\u4e0a9\u70b9\u5230\u665a\u4e0a9\u70b9\u7684\u6c34\u5e73\u8bbe\u7f6e\u4e3a30%\uff0c\u5426\u5219\u6211\u8bbe\u7f6e\u4e3a10%\u3002\n\u4e3a\u4e86\u8ba9\u6d41\u5728\u4e00\u5929\u4e2d\u7684\u4e0d\u540c\u65f6\u95f4\u8bbe\u7f6e\u97f3\u91cf\u7ea7\u522b\uff0c\u6211\u4f7f\u7528BigTimer\u8282\u70b9\uff0c\u6253\u5f00\u65f6\u95f4\u4e3a09\uff1a00\uff0c\u5173\u95ed\u65f6\u95f4\u4e3a21\uff1a00\u3002\u7136\u540e\u6211\u5c06\u5f00\u5473\u7cbe\u8bbe\u4e3a0.3\uff0c\u5173\u5473\u7cbe\u8bbe\u4e3a1\u3002\u5f53\u8ba1\u65f6\u5668\u6253\u5f00\u548c\u5173\u95ed\u65f6\uff0c\u5b83\u5c06\u68c0\u67e5\u6211\u7684\u81ea\u52a8\u5316\u6807\u5fd7\u662f\u5426\u6253\u5f00\u3002\u5982\u679c\u662f\uff0c\u5b83\u5c06\u679a\u4e3e\u6240\u6709\u5a92\u4f53\u8bbe\u5907\uff0c\u5e76\u6839\u636e\u8ba1\u65f6\u5668\u8f93\u51fa\u6d88\u606f(\u4f8b\u5982\uff0c.1\u6216.3)\u8bbe\u7f6e\u97f3\u91cf\u3002\nGraph TDABigTimerNode(FAS\uff1aFA-Clock Normize Volume)--&gt\uff1bB CurrentStateNode(FAS\uff1aFA-\u542f\u7528\u6570\u636e\u5e93\u81ea\u52a8\u5316\uff1f)B CurrentStateNode--&gt\uff1bCCurrentStateNode(FAS\uff1aFA-\u6570\u636e\u5e93\u6807\u51c6\u5316\u97f3\u91cf\u7ea7\u522b\uff1f)CCurrentStateNode--&gt\uff1bDRbeNode(FAS\uff1aFA-\u6eda\u52a8\u53ea\u5141\u8bb8\u66f4\u6539\u7684\u503c)DRbeNode--&\u3002StatusOutputNode(Status)style StatusNode Fill\uff1a#ECF5FFstyle StatusOutputNode Fill\uff1a#FAFBstyle ABigTimerNode Fill\uff1a#3DB39Fstyle B CurrentStateNode Fill\uff1a#66ACFDstyle CCurrentStateNode Fill\uff1a#66ACFDDbeNode Fill\uff1a#FEB95Estyle ECallSubflow Fill\uff1a#FF75A1 linkStyle\u9ed8\u8ba4\u7b14\u5212\u5bbd\u5ea6\uff1a2px\uff0cFill\u3002\n[{&#34\uff1bid&#34\uff1b\uff1a&#34\uff1b7a62a2d3.c0f4a4&#34\uff1b\uff0c&#34\uff1b\u7c7b\u578b&#34\uff1b\u5b50\u6d41&#34\uff1b\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u53d1\u9001\u81ea\u52a8\u5316\u8bed\u97f3\u901a\u77e5&#34\uff1b\uff0c&#34\uff1b\u4fe1\u606f&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\u7c7b\u522b&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&\u3002\uff1a[{&#34\uff1bx&#34\uff1b\uff1a60\uff0c&#34\uff1by&#34\uff1b\uff1a100\uff0c&#34\uff1by&#34\uff1b\uff1a[{&#34\uff1bid&#34\uff1b\uff1a&#34\uff1b87411254.a6ed18&#34\uff1b}]}]\uff0c&#34\uff1bout&#34\uff1b\uff1a[{&#34\uff1bx&#34\uff1b\uff1a1120\uff0c&#34\uff1by&#34\uff1b\uff1a100\uff0c&#34\uff1bwire&#34\uff1b\uff1a[{&#34\uff1bid&#34\uff1b\uff1a&#34\uff1bd44cc51a.be0668&#34\uff1b\uff0c&#34\uff1bport&#34\uff1b\uff1a0}]}]\uff0c&#34\uff1b\u72b6\u6001&#34\uff1b\uff1a{&#34\uff1bx&#34\uff1b\uff1a220\uff0c&#34\uff1by&#34\uff1b\uff1a40\uff0c&#34\uff1bwire&#34\uff1b\uff1a\uff1a[{&#34\uff1bid&#34\uff1b\uff1a&#34\uff1baef53056.742438\u3002port&#34\uff1b\uff1a0}]}}\uff0c{&#34\uff1bid&#34\uff1b\uff1a&#34\uff1b89300b1.595bcf8&#34\uff1b\uff0c&#34\uff1b\u7c7b\u578b&#34\uff1b\uff1a&#34\uff1b\u51fd\u6570&#34\uff1b\uff0c&#34\uff1bz&#34\uff1b\uff1a\uff1a&#34\uff1b7a62a2d3.c0f4a4&#34\uff1b\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u8bbe\u7f6e\u8bed\u97f3\u8d1f\u8f7d&#34\uff1b\uff0c&\u3002Const Entity=flow.get(\\&#34\uff1b$parent.speech_entity_id\\&#34\uff1b)||(msg.payload&amp\uff1b&amp\uff1bmsg.payload.entity_id)||\\&#34\uff1bmedia_player.office_echo_plus\\&#34\uff1b\uff1b\\nconst\u6d88\u606f=(msg.payload&amp\uff1b&amp\uff1bmsg.payload.message)||\\&#34\uff1b\u81ea\u52a8\u5316\u672a\u63d0\u4f9b\u6d88\u606f\\&#34\uff1b\uff1b\\nconst\u516c\u544a=msg.payload&amp\uff1b&amp\uff1bmsg.payload.\u5ba3\u544a\uff1b\\n\\n\u5982\u679c(\u516c\u544a){\\n node.status({\u586b\u5145\uff1a\\&#34\uff1b\u7eff\u8272\\&#34\uff1b\uff0c\u5f62\u72b6\uff1a\\&#34\uff1b\u70b9\\&#34\uff1b\uff0c\u6587\u672c\uff1a\\&#34\uff1b\u516c\u544a\u6d88\u606f\uff1a\\&#34\uff1b+\u6d88\u606f})\uff1b\\n\u8fd4\u56de{\\n\u6709\u6548\u8d1f\u8f7d\uff1a{\\n\u6570\u636e\uff1a{\\n\u6d88\u606f\uff1a\u6d88\u606f\uff0c\\n\u6570\u636e\uff1a{\\&#34\uff1b\u7c7b\u578b\\&#34\uff1b\uff1a\\&#34\uff1b\u516c\u544a\\&#34\uff1b\uff0c\\&#34\uff1b\u65b9\u6cd5\\&#34\uff1b\uff1a\\&#34\uff1b\u5168\u90e8\\&#34\uff1b}\uff0c\\n\u76ee\u6807\uff1a\uff01\uff01\u5b9e\u4f53\uff1f[\u5b9e\u4f53]\uff1a[]\\n}\\n}\\n}\uff1b\\n}\\n\\nnode.status({\u586b\u5145\uff1a\\&#34\uff1b\u7eff\u8272\\&#34\uff1b\uff0c\u5f62\u72b6\uff1a\\&#34\uff1b\u70b9\\&#34\uff1b\uff0c\u6587\u672c\uff1a\\&#34\uff1bTTS\u6d88\u606f\uff1a\\&#34\uff1b+\u6d88\u606f})\uff1b\\n\u8fd4\u56de{\\n\u8d1f\u8f7d\uff1a{\\n\u6570\u636e\uff1a{\\n\u6d88\u606f\uff1a\u6d88\u606f\uff0c\\n\u6570\u636e\uff1a{type\uff1a\\&#34\uff1bTTS\\&#34\uff1b}\uff0c\\n\u76ee\u6807\uff1a[\u5b9e\u4f53]\\n}\\n}\\n}\uff1b&#34\uff1b\uff0c&#34\uff1b\u8f93\u51fa&#34\uff1b\uff1a1\uff0c&#34\uff1bnoerr&#34\uff1b\uff1a0\uff0c&#34\uff1bx&#34\uff1b\uff1a700\uff0c&#34\uff1by&#34\uff1b\uff1a100\uff0c&#34\uff1bwire&#34\uff1b\uff1a[[&#34\uff1bd44cc51a.be0668&#34\uff1b]]}\uff0c{&#34\uff1bid&#34\uff1b\uff1ad44cc51a.be0668&#34\uff1b\uff0c&#34\uff1b\u7c7b\u578b&#34\uff1b\uff1a&#34\uff1bapi-call-service&#34\uff1b\uff0c&#34\uff1b7a62a2d3.c0f4a4&#34\uff1b\uff0c&#34\uff1bname&#34\uff1b\uff1a&#34\uff1b\u53d1\u9001\u8bed\u97f3\u901a\u77e5&#34\uff1b\uff0c&#34\uff1bserver&#34\uff1b\uff1a&#34\uff1b61956bd4.93dff\u3002\uff1afalse\uff0c&#34\uff1bservice_domain&#34\uff1b\uff1a&#34\uff1bNotify&#34\uff1b\uff0c&#34\uff1bservice&#34\uff1b\uff1a&#34\uff1bAlexa_media&#34\uff1b\uff0c&#34\uff1bentityId&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1bdata&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1bdataType&#34\uff1b\uff1a&#34\uff1bjson&#34\uff1b\uff0c&#34\uff1bmergecontext\u3002&#34\uff1b\uff0c&#34\uff1boutput_location&#34\uff1b\uff1a&#34\uff1bpayload&#34\uff1b\uff0c&#34\uff1boutput_location_type&#34\uff1b\uff1a&#34\uff1bmsg&#34\uff1b\uff0c&#34\uff1bmustack heAltTags&#34\uff1b\uff1afalse\uff0c&#34\uff1bx&#34\uff1b\uff1a950\uff0c&#34\uff1by&#34\uff1b\uff1a100\uff0c&#34\uff1bwire&#34\uff1b\uff1a[[]]}\uff0c{&#34\uff1bid&34\uff1b\uff1a&#34\uff1b6add9bc6.4c3624&#34\uff1b\uff0c&#34\uff1b\u7c7b\u578b&#34\uff1b\uff1a&#34\uff1bapi-c", "note_en": "This post is going to cover normalizing all  media_player volume levels with Home Assistant and  Node-RED.If you haven\u2019t already, I\u2019d recommend reading my previous blog post on sending Text-to-Speech notifications whichdives a bit deeper on the optional accessibility Subflow this Flow consumes.\n This automation normalizes all volume levels in my home based on the time of dayusing the Amazon Alexa Media Player Integrationto bring in all my Amazon Echoand  ecobee Switch+devices into Home Assistant.\n This is one of my favorite automations in my house and I think you will enjoyit too! I wrote this automation for several reasons:\n I wanted all speakers to be quiet at bed time. This prevents someone fromgetting blasted at 2:00 am in the morning.\n In the morning after I\u2019ve had my cup of coffee, I want to increase the volumeto an acceptable level.\n Automation allows for reuse via sub-flows. This means you can trigger it forother use cases like friends are over and music is playing, increase ordecrease the volume.\n One less thing I have to think about, or constantly touch to change. Intodays pandemic, this is also one less thing you potentially have to clean!\n   If you haven\u2019t done so already, install the Alexa Media Player Custom Componentif you are using Alexa, otherwise skip this section.\n This addon is amazing as it normalizes all of your Alexa enabled devices suchas the Amazon Echoor  ecobee Switch+into a  media_player that can be used by Home Assistant.\n  This Automation Flow controls the volume levels by calling the media_player.volume_set service. I\u2019d recommend testing it first by openingthe Home Assistant Developer tools and navigating to the Services tab.\n Next, start playing some music on your  media_player and call the media_player.volume_set service with a payload of:\n  If you don\u2019t hear a volume change, try a different  volume_level in case thethe device is already at that level. If it\u2019s not then stop and check the logs.This will help diagnose why the device isn\u2019t working and save you lots of timebefore continuing.\n  I highly recommend adding multiple Input Booleansthat controls if a specific automation or all automations can run. It\u2019s alwaysnice to be able to turn on or off a specific automation or all in the case ofmaintenance. Here are the three  input_booleans that are used in thisAutomation Flow.\n  automation_enable: name: Enable Automations icon: mdi:home-automationautomation_normalize_volume: name: Automation - Automatically Normalize Volume throughout the day icon: mdi:volume-highautomation_notifications: name: Notify when an automation is triggered icon: mdi:home-automation\n  This Subflow will get the current devices volume level, compare the current anddesired state. If changes are required, it will call the required service tochange the devices volume level.\n I then create a new Subflow with a status node, one input and one output. ThisSubflow optionally depends on the  Send Automation Speech Notification Subflow.\n graph TDInputNode(Input) --&gt; ACurrentStateNode(fas:fa-database Get Current Volume Level)ACurrentStateNode --&gt; BFunctionNode(fas:fa-code Set Volume Level Payload)BFunctionNode --&gt; CCallServiceNode(fas:fa-play Set Volume Level)BFunctionNode --&gt; DCallSubflowNode(fas:fa-sliders-h Send Automation Speech Notification)CCallServiceNode --&gt; OutputNode(Output 1)StatusNode(fas:fa-heartbeat Status: All) --&gt; StatusOutputNode(Status)style StatusNode fill:#ECF5FFstyle StatusOutputNode fill:#FAFAFBstyle InputNode fill:#FAFAFBstyle ACurrentStateNode fill:#66ACFDstyle BFunctionNode fill:#FBB68Fstyle CCallServiceNode fill:#66ACFDstyle DCallSubflowNode fill:#FF75A1style OutputNode fill:#FAFAFBlinkStyle default stroke-width:2px,fill:none,stroke:#CCD0D4\n Let\u2019s break down the Subflow. The incoming message gets passed to the Get Current Volume Level Current State node to populate  msg.data with theentity. This is then passed to the  Set Volume Level Payload node which checksto see if any changes are required to meet the desired volume level and outputsText-to-Speech (TTS) status messages. If changes are required, the Set Volume Level node will call the  media_player.volume_set service.\n Here is the JavaScript code contained in the  Set Volume Level PayloadFunction node to smartly adjust the volume only if it is needed.\n const entity = msg.payload &amp;&amp; msg.payload.entity_id;const attributes = msg.data &amp;&amp; msg.data.attributesif (!entity || !attributes) { node.status({ fill: &#34;red&#34;, shape: &#34;dot&#34;, text: &#34;Invalid volume payload&#34; }); return [null, null];}const desired_volume_level = msg.payload.volume_level || 0;if (desired_volume_level &lt; 0.0 || desired_volume_level &gt; 1.0) { let message = &#34;Volume level must be between 0 and 1.&#34;; node.status({ fill: &#34;red&#34;, shape: &#34;dot&#34;, text: message }); node.error(message); return [null, { payload: { entity_id: entity, message: message } }];}if (desired_volume_level === attributes.volume_level) { let message = &#34;Volume level is already at the desired level.&#34;; node.status({ fill: &#34;grey&#34;, shape: &#34;dot&#34;, text: message }); node.log(message); return [null, { payload: { entity_id: entity, message: message } }];}const volumePayload = { payload: { data: { entity_id: entity, volume_level: desired_volume_level } }};let message = &#34;Setting Volume Level to &#34; + (desired_volume_level * 100) + &#34; percent.&#34;;const speechPayload = { payload: { entity_id: entity, message: message }};node.status({ fill: &#34;green&#34;, shape: &#34;dot&#34;, text: message });return [volumePayload, speechPayload];\n As you an see it will output a friendly speech notification payload that willbe sent to the  Send Automation Speech Notification Subflow. If you are notusing the  alexa_media_player Home Assistant addon, you may want to update theyou\u2019ll want to update  Set Volume Level Payload Function node to take in avolume range you are expecting.\n You can trigger this Subflow by passing a message object with thefollowing payload. I recommend using a  Inject Nodeto test this out.\n  Please note, for my Alexa speakers. I use a volume level between the range of [0.0..0.10). To mute, pass  0.0.\n  This subflow will get all  media_player\u2019 and then send them one by one to the Set Volume Level Subflow.\n If you are not using Alexa, you may need to tweak the  Get All Media Playersnode as it\u2019s returning all devices that have a specific feature attributewhich says I support changing the volume level.\n graph TDInputNode(Input) --&gt; AFunctionNode(fas:fa-code Parse Volume Level)AFunctionNode --&gt; BGetEntitiesNode(fas:fa-search Get All Media Players)BGetEntitiesNode --&gt; CChangeNode(fas:fa-random Set Volume Level Payload)CChangeNode --&gt; DSubflowNode(fas:fa-sliders-h Set Volume Level)DSubflowNode --&gt; OutputNode(Output)StatusNode(fas:fa-heartbeat Status: All) --&gt; StatusOutputNode(Status)style StatusNode fill:#ECF5FFstyle StatusOutputNode fill:#FAFAFBstyle InputNode fill:#FAFAFBstyle AFunctionNode fill:#FBB68Fstyle BGetEntitiesNode fill:#66ACFDstyle CChangeNode fill:#FEA530style DSubflowNode fill:#FF75A1style OutputNode fill:#FAFAFBlinkStyle default stroke-width:2px,fill:none,stroke:#CCD0D4\n You can trigger this Subflow by passing a message object with thefollowing  float (e.g.  0.1) payload. I recommend using a  Inject Nodeto test this out.\n  This flow brings the two previous sub flows together to normalize all volumelevels based on the time of the day. In my home, I set the level to 30% from9:00am to 9:00pm, otherwise I set to 10%.\n To have the flow set the volume levels at different times of the day, I use the BigTimer Nodewith an  On Time of  09:00 and a  Off Time of  21:00. Then I set the ON Msg to  .3 and a  OFF Msg to  .1. When the timer turns on and turns off,it will check to see if my automation flags are turned on. If they are, it willenumerate over all media devices and set the volume based on the timers outputmessage (e.g.,  .1 or  .3).\n graph TDABigTimerNode(fas:fa-clock Normalize Volume) --&gt; BCurrentStateNode(fas:fa-database Automations Enabled?)BCurrentStateNode --&gt; CCurrentStateNode(fas:fa-database Normalize Volume Levels?)CCurrentStateNode --&gt; DRbeNode(fas:fa-scroll Only allow changed values)DRbeNode --&gt; ECallSubflow(fas:fa-sliders-h Set Volume Level on All Media Devices Subflow)StatusNode(fas:fa-heartbeat Status: All) --&gt; StatusOutputNode(Status)style StatusNode fill:#ECF5FFstyle StatusOutputNode fill:#FAFAFBstyle ABigTimerNode fill:#3DB39Fstyle BCurrentStateNode fill:#66ACFDstyle CCurrentStateNode fill:#66ACFDstyle DRbeNode fill:#FEB95Estyle ECallSubflow fill:#FF75A1linkStyle default stroke-width:2px,fill:none,stroke:#CCD0D4\n  [ { &#34;id&#34;: &#34;7a62a2d3.c0f4a4&#34;, &#34;type&#34;: &#34;Subflow&#34;, &#34;name&#34;: &#34;Send Automation Speech Notification&#34;, &#34;info&#34;: &#34;&#34;, &#34;category&#34;: &#34;&#34;, &#34;in&#34;: [ { &#34;x&#34;: 60, &#34;y&#34;: 100, &#34;wires&#34;: [ { &#34;id&#34;: &#34;87411254.a6ed18&#34; } ] } ], &#34;out&#34;: [ { &#34;x&#34;: 1120, &#34;y&#34;: 100, &#34;wires&#34;: [ { &#34;id&#34;: &#34;d44cc51a.be0668&#34;, &#34;port&#34;: 0 } ] } ], &#34;status&#34;: { &#34;x&#34;: 220, &#34;y&#34;: 40, &#34;wires&#34;: [ { &#34;id&#34;: &#34;aef53056.742438&#34;, &#34;port&#34;: 0 } ] } }, { &#34;id&#34;: &#34;89300b1.595bcf8&#34;, &#34;type&#34;: &#34;function&#34;, &#34;z&#34;: &#34;7a62a2d3.c0f4a4&#34;, &#34;name&#34;: &#34;Set Speech Payload&#34;, &#34;func&#34;: &#34;const entity = flow.get(\\&#34;$parent.speech_entity_id\\&#34;) || (msg.payload &amp;&amp; msg.payload.entity_id) || \\&#34;media_player.office_echo_plus\\&#34;;\\nconst message = (msg.payload &amp;&amp; msg.payload.message) || \\&#34;Automation provided no message\\&#34;;\\nconst announcement = msg.payload &amp;&amp; msg.payload.announcement;\\n\\nif (announcement) {\\n node.status({ fill: \\&#34;green\\&#34;, shape: \\&#34;dot\\&#34;, text: \\&#34;Announce message:\\&#34; + message });\\n return {\\n payload:{\\n data: {\\n message: message,\\n data: { \\&#34;type\\&#34;: \\&#34;announce\\&#34;, \\&#34;method\\&#34;: \\&#34;all\\&#34; },\\n target: !!entity ? [entity] : []\\n }\\n }\\n };\\n}\\n\\nnode.status({ fill: \\&#34;green\\&#34;, shape: \\&#34;dot\\&#34;, text: \\&#34;TTS message:\\&#34; + message });\\nreturn {\\n payload:{\\n data: {\\n message: message,\\n data: { type: \\&#34;tts\\&#34; },\\n target: [entity]\\n }\\n }\\n};&#34;, &#34;outputs&#34;: 1, &#34;noerr&#34;: 0, &#34;x&#34;: 700, &#34;y&#34;: 100, &#34;wires&#34;: [ [ &#34;d44cc51a.be0668&#34; ] ] }, { &#34;id&#34;: &#34;d44cc51a.be0668&#34;, &#34;type&#34;: &#34;api-call-service&#34;, &#34;z&#34;: &#34;7a62a2d3.c0f4a4&#34;, &#34;name&#34;: &#34;Send Speech Notification&#34;, &#34;server&#34;: &#34;61956bd4.93df44&#34;, &#34;version&#34;: 1, &#34;debugenabled&#34;: false, &#34;service_domain&#34;: &#34;notify&#34;, &#34;service&#34;: &#34;alexa_media&#34;, &#34;entityId&#34;: &#34;&#34;, &#34;data&#34;: &#34;&#34;, &#34;dataType&#34;: &#34;json&#34;, &#34;mergecontext&#34;: &#34;&#34;, &#34;output_location&#34;: &#34;payload&#34;, &#34;output_location_type&#34;: &#34;msg&#34;, &#34;mustacheAltTags&#34;: false, &#34;x&#34;: 950, &#34;y&#34;: 100, &#34;wires&#34;: [ [] ] }, { &#34;id&#34;: &#34;6add9bc6.4c3624&#34;, &#34;type&#34;: &#34;api-current-state&#34;, &#34;z&#34;: &#34;7a62a2d3.c0f4a4&#34;, &#34;name&#34;: &#34;Speech Notifications?&#34;, &#34;server&#34;: &#34;61956bd4.93df44&#34;, &#34;version&#34;: 1, &#34;outputs&#34;: 2, &#34;halt_if&#34;: &#34;true&#34;, &#34;halt_if_type&#34;: &#34;bool&#34;, &#34;halt_if_compare&#34;: &#34;is&#34;, &#34;override_topic&#34;: false, &#34;entity_id&#34;: &#34;input_boolean.automation_notifications&#34;, &#34;state_type&#34;: &#34;habool&#34;, &#34;state_location&#34;: &#34;&#34;, &#34;override_payload&#34;: &#34;none&#34;, &#34;entity_location&#34;: &#34;&#34;, &#34;override_data&#34;: &#34;none&#34;, &#34;blockInputOverrides&#34;: false, &#34;x&#34;: 440, &#34;y&#34;: 140, &#34;wires&#34;: [ [ &#34;89300b1.595bcf8&#34; ], [] ], &#34;outputLabels&#34;: [ &#34;&#34;, &#34;enabled&#34; ] }, { &#34;id&#34;: &#34;aef53056.742438&#34;, &#34;type&#34;: &#34;status&#34;, &#34;z&#34;: &#34;7a62a2d3.c0f4a4&#34;, &#34;name&#34;: &#34;&#34;, &#34;scope&#34;: null, &#34;x&#34;: 100, &#34;y&#34;: 40, &#34;wires&#34;: [ [] ] }, { &#34;id&#34;: &#34;87411254.a6ed18&#34;, &#34;type&#34;: &#34;function&#34;, &#34;z&#34;: &#34;7a62a2d3.c0f4a4&#34;, &#34;name&#34;: &#34;Check for overrides&#34;, &#34;func&#34;: &#34;const alwaysSpeak = msg.payload &amp;&amp; msg.payload.announcement\\nif (alwaysSpeak) {\\n return [msg, null];\\n} else {\\n return [null, msg];\\n}&#34;, &#34;outputs&#34;: 2, &#34;noerr&#34;: 0, &#34;x&#34;: 210, &#34;y&#34;: 100, &#34;wires&#34;: [ [ &#34;89300b1.595bcf8&#34; ], [ &#34;6add9bc6.4c3624&#34; ] ], &#34;outputLabels&#34;: [ &#34;Bypass notification&#34;, &#34;Check for notifications&#34; ] }, { &#34;id&#34;: &#34;974adda.d2ea92&#34;, &#34;type&#34;: &#34;Subflow&#34;, &#34;name&#34;: &#34;Set Volume Level&#34;, &#34;info&#34;: &#34;Set Volume Level&#34;, &#34;category&#34;: &#34;&#34;, &#34;in&#34;: [ { &#34;x&#34;: 80, &#34;y&#34;: 120, &#34;wires&#34;: [ { &#34;id&#34;: &#34;4c86fd47.0875e4&#34; } ] } ], &#34;out&#34;: [ { &#34;x&#34;: 960, &#34;y&#34;: 100, &#34;wires&#34;: [ { &#34;id&#34;: &#34;263d05a1.5b6672&#34;, &#34;port&#34;: 0 } ] } ], &#34;status&#34;: { &#34;x&#34;: 240, &#34;y&#34;: 40, &#34;wires&#34;: [ { &#34;id&#34;: &#34;7a662cd5.162a24&#34;, &#34;port&#34;: 0 } ] } }, { &#34;id&#34;: &#34;563c252e.ce31e4&#34;, &#34;type&#34;: &#34;function&#34;, &#34;z&#34;: &#34;974adda.d2ea92&#34;, &#34;name&#34;: &#34;Set Volume Level Payload&#34;, &#34;func&#34;: &#34;const entity = msg.payload &amp;&amp; msg.payload.entity_id;\\nconst attributes = msg.data &amp;&amp; msg.data.attributes\\nif (!entity || !attributes) {\\n node.status({ fill: \\&#34;red\\&#34;, shape: \\&#34;dot\\&#34;, text: \\&#34;Invalid volume payload\\&#34; });\\n return [null, null];\\n}\\n\\nconst desired_volume_level = msg.payload.volume_level || 0;\\nif (desired_volume_level &lt; 0.0 || desired_volume_level &gt; 1.0) {\\n let message = \\&#34;Volume level must be between 0 and 1.\\&#34;; \\n node.status({ fill: \\&#34;red\\&#34;, shape: \\&#34;dot\\&#34;, text: message });\\n node.error(message);\\n \\n return [null, { \\n payload: {\\n entity_id: entity,\\n message: message\\n }\\n }];\\n}\\n\\nif (desired_volume_level === attributes.volume_level) {\\n let message = \\&#34;Volume level is already at the desired level.\\&#34;; \\n node.status({ fill: \\&#34;grey\\&#34;, shape: \\&#34;dot\\&#34;, text: message });\\n node.log(message);\\n return [null, { \\n payload: {\\n entity_id: entity,\\n message: message\\n }\\n }];\\n}\\n\\nconst volumePayload = { \\n payload: {\\n data: {\\n entity_id: entity,\\n volume_level: desired_volume_level\\n } \\n }\\n};\\n\\nlet message = \\&#34;Setting Volume Level to \\&#34; + (desired_volume_level * 100) + \\&#34; percent.\\&#34;;\\nconst speechPayload = { \\n payload: {\\n entity_id: entity,\\n message: message\\n }\\n};\\n\\nnode.status({ fill: \\&#34;green\\&#34;, shape: \\&#34;dot\\&#34;, text: message });\\nreturn [volumePayload, speechPayload];&#34;, &#34;outputs&#34;: 2, &#34;noerr&#34;: 0, &#34;x&#34;: 510, &#34;y&#34;: 120, &#34;wires&#34;: [ [ &#34;263d05a1.5b6672&#34; ], [ &#34;b41308c0.f41e9&#34; ] ], &#34;inputLabels&#34;: [ &#34;Volume Percentage&#34; ], &#34;outputLabels&#34;: [ &#34;Volume Level Payload&#34;, &#34;Speech Notification Payload&#34; ] }, { &#34;id&#34;: &#34;263d05a1.5b6672&#34;, &#34;type&#34;: &#34;api-call-service&#34;, &#34;z&#34;: &#34;974adda.d2ea92&#34;, &#34;name&#34;: &#34;Set Volume Level&#34;, &#34;server&#34;: &#34;61956bd4.93df44&#34;, &#34;version&#34;: 1, &#34;debugenabled&#34;: false, &#34;service_domain&#34;: &#34;media_player&#34;, &#34;service&#34;: &#34;volume_set&#34;, &#34;entityId&#34;: &#34;&#34;, &#34;data&#34;: &#34;&#34;, &#34;dataType&#34;: &#34;json&#34;, &#34;mergecontext&#34;: &#34;&#34;, &#34;output_location&#34;: &#34;payload&#34;, &#34;output_location_type&#34;: &#34;msg&#34;, &#34;mustacheAltTags&#34;: false, &#34;x&#34;: 770, &#34;y&#34;: 100, &#34;wires&#34;: [ [] ] }, { &#34;id&#34;: &#34;b41308c0.f41e9&#34;, &#34;type&#34;: &#34;Subflow:7a62a2d3.c0f4a4&#34;, &#34;z&#34;: &#34;974adda.d2ea92&#34;, &#34;name&#34;: &#34;&#34;, &#34;env&#34;: [], &#34;x&#34;: 830, &#34;y&#34;: 160, &#34;wires&#34;: [ [] ] }, { &#34;id&#34;: &#34;4c86fd47.0875e4&#34;, &#34;type&#34;: &#34;api-current-state&#34;, &#34;z&#34;: &#34;974adda.d2ea92&#34;, &#34;name&#34;: &#34;Get Current Volume Level&#34;, &#34;server&#34;: &#34;61956bd4.93df44&#34;, &#34;version&#34;: 1, &#34;outputs&#34;: 1, &#34;halt_if&#34;: &#34;&#34;, &#34;halt_if_type&#34;: &#34;str&#34;, &#34;halt_if_compare&#34;: &#34;is&#34;, &#34;override_topic&#34;: true, &#34;entity_id&#34;: &#34;&#34;, &#34;state_type&#34;: &#34;str&#34;, &#34;state_location&#34;: &#34;&#34;, &#34;override_payload&#34;: &#34;none&#34;, &#34;entity_location&#34;: &#34;data&#34;, &#34;override_data&#34;: &#34;msg&#34;, &#34;blockInputOverrides&#34;: false, &#34;x&#34;: 250, &#34;y&#34;: 120, &#34;wires&#34;: [ [ &#34;563c252e.ce31e4&#34; ] ] }, { &#34;id&#34;: &#34;7a662cd5.162a24&#34;, &#34;type&#34;: &#34;status&#34;, &#34;z&#34;: &#34;974adda.d2ea92&#34;, &#34;name&#34;: &#34;&#34;, &#34;scope&#34;: null, &#34;x&#34;: 120, &#34;y&#34;: 40, &#34;wires&#34;: [ [] ] }, { &#34;id&#34;: &#34;76be143e.dbb0e4&#34;, &#34;type&#34;: &#34;Subflow&#34;, &#34;name&#34;: &#34;Set Volume Level on All Media Devices&#34;, &#34;info&#34;: &#34;&#34;, &#34;category&#34;: &#34;&#34;, &#34;in&#34;: [ { &#34;x&#34;: 100, &#34;y&#34;: 120, &#34;wires&#34;: [ { &#34;id&#34;: &#34;642c5f33.bd92a8&#34; } ] } ], &#34;out&#34;: [ { &#34;x&#34;: 1120, &#34;y&#34;: 120, &#34;wires&#34;: [ { &#34;id&#34;: &#34;15d5ddae.8f64c2&#34;, &#34;port&#34;: 0 } ] } ], &#34;env&#34;: [], &#34;color&#34;: &#34;#DDAA99&#34;, &#34;status&#34;: { &#34;x&#34;: 1120, &#34;y&#34;: 40, &#34;wires&#34;: [ { &#34;id&#34;: &#34;ba88f8d5.b5d648&#34;, &#34;port&#34;: 0 }, { &#34;id&#34;: &#34;15d5ddae.8f64c2&#34;, &#34;port&#34;: 0 } ] } }, { &#34;id&#34;: &#34;f467a711.24ca3&#34;, &#34;type&#34;: &#34;ha-get-entities&#34;, &#34;z&#34;: &#34;76be143e.dbb0e4&#34;, &#34;server&#34;: &#34;61956bd4.93df44&#34;, &#34;name&#34;: &#34;Get All Media Players&#34;, &#34;rules&#34;: [ { &#34;property&#34;: &#34;attributes.supported_features&#34;, &#34;logic&#34;: &#34;is&#34;, &#34;value&#34;: &#34;56253&#34;, &#34;valueType&#34;: &#34;num&#34; }, { &#34;property&#34;: &#34;attributes.available&#34;, &#34;logic&#34;: &#34;is&#34;, &#34;value&#34;: &#34;true&#34;, &#34;valueType&#34;: &#34;bool&#34; } ], &#34;output_type&#34;: &#34;split&#34;, &#34;output_empty_results&#34;: true, &#34;output_location_type&#34;: &#34;msg&#34;, &#34;output_location&#34;: &#34;payload&#34;, &#34;output_results_count&#34;: 1, &#34;x&#34;: 480, &#34;y&#34;: 120, &#34;wires&#34;: [ [ &#34;1fe46c89.0e0543&#34; ] ] }, { &#34;id&#34;: &#34;1fe46c89.0e0543&#34;, &#34;type&#34;: &#34;change&#34;, &#34;z&#34;: &#34;76be143e.dbb0e4&#34;, &#34;name&#34;: &#34;Set Volume Level Payload&#34;, &#34;rules&#34;: [ { &#34;t&#34;: &#34;set&#34;, &#34;p&#34;: &#34;payload.volume_level&#34;, &#34;pt&#34;: &#34;msg&#34;, &#34;to&#34;: &#34;volume_level&#34;, &#34;tot&#34;: &#34;flow&#34; } ], &#34;action&#34;: &#34;&#34;, &#34;property&#34;: &#34;&#34;, &#34;from&#34;: &#34;&#34;, &#34;to&#34;: &#34;&#34;, &#34;reg&#34;: false, &#34;x&#34;: 730, &#34;y&#34;: 120, &#34;wires&#34;: [ [ &#34;15d5ddae.8f64c2&#34; ] ] }, { &#34;id&#34;: &#34;642c5f33.bd92a8&#34;, &#34;type&#34;: &#34;function&#34;, &#34;z&#34;: &#34;76be143e.dbb0e4&#34;, &#34;name&#34;: &#34;Parse Volume Level&#34;, &#34;func&#34;: &#34;const volumeLevel = parseFloat(msg.payload);\\nnode.status({ fill: \\&#34;green\\&#34;, shape: \\&#34;dot\\&#34;, text: \\&#34;Volume Level: \\&#34; + volumeLevel });\\nflow.set(\\&#34\n......", "posttime": "2020-05-29 22:48:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "node,home,fill", "title": "\u5982\u4f55\u4f7f\u7528Node-RED\u5c06\u5bb6\u5ead\u97f3\u91cf\u7ea7\u522b\u6b63\u5e38\u5316", "title_en": "How-to normalize home volume levels with Node-RED", "transed": 1, "url": "https://blakeniemyjski.com/blog/how-to-normalize-home-volume-levels-with-node-red/", "via": "", "real_tags": ["node", "home", "fill"]}, {"category": "", "categoryclass": "", "imagename": "21947a8813f36b4bf869d7fe5756747c.png", "infoid": 1004250, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60f3\u77e5\u9053\u5982\u4f55\u5728\u65b0\u51a0\u80ba\u708e\u5927\u6d41\u884c\u671f\u95f4\u5b89\u5168\u6295\u7968\uff1f\u6211\u4eec\u5c06\u6307\u5bfc\u60a8\u5b8c\u6210\u90ae\u5bc4\u6295\u7968\u7684\u8fc7\u7a0b\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5728\u5373\u5c06\u5230\u6765\u7684\u9009\u4e3e\u4e2d\u5b89\u5168\u6295\u7968\u5e76\u8282\u7701\u65f6\u95f4\u3002\n\u6211\u4eec\u5c06\u6307\u5bfc\u60a8\u5b8c\u6210\u90ae\u5bc4\u6295\u7968\u7684\u8fc7\u7a0b\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5728\u5373\u5c06\u5230\u6765\u7684\u9009\u4e3e\u4e2d\u5b89\u5168\u6295\u7968\u5e76\u8282\u7701\u65f6\u95f4\u3002", "note_en": "Wondering how to vote safely during the COVID-19 pandemic? We\u2019ll guide you through the vote by mail process so that you can vote safely and save time in the upcoming elections.\n We\u2019ll guide you through the vote by mail process so that you can vote safely and save time in the upcoming elections.", "posttime": "2020-05-29 22:48:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u767b\u8bb0,vote,\u6295\u7968", "title": "2\u5206\u949f\u5185\u767b\u8bb0\u90ae\u5bc4\u6295\u7968", "title_en": "Register to Vote by Mail in 2 Minutes", "transed": 1, "url": "https://mustvote.org/", "via": "", "real_tags": ["\u767b\u8bb0", "vote", "\u6295\u7968"]}]