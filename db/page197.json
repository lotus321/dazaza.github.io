[{"category": "", "categoryclass": "", "imagename": "e9818845d0fcc5908cf465d08a328aaf.jpeg", "infoid": 1004888, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8054\u90a6\u653f\u5e9c\u4e3a\u8861\u91cf\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u5bf9\u7597\u517b\u9662\u7684\u81f4\u547d\u5f71\u54cd\u800c\u8fdb\u884c\u7684\u9996\u6b21\u91cd\u5927\u52aa\u529b\u53d1\u73b0\uff0c\u7ea6\u67092.6\u4e07\u4eba\u6b7b\u4ea1\uff0c\u8fd9\u4e00\u603b\u6570\u53ef\u80fd\u65e0\u6cd5\u663e\u793a\u4e00\u4e9b\u6700\u8106\u5f31\u7684\u7f8e\u56fd\u4eba\u7684\u5168\u90e8\u6b7b\u4ea1\u4eba\u6570\u3002\n\u5468\u4e00\uff0c\u533b\u7597\u4fdd\u9669\u548c\u533b\u7597\u8865\u52a9\u670d\u52a1\u4e2d\u5fc3\u53d1\u5e03\u7684\u8fd9\u9879\u9488\u5bf9\u7597\u517b\u9662\u7684\u65b0\u8c03\u67e5\u663e\u793a\uff0c25,923\u540d\u5c45\u6c11\u6b7b\u4ea1\u4e0e\u65b0\u51a0\u80ba\u708e\u75c5\u6bd2\u5f15\u8d77\u7684\u75be\u75c5\u6709\u5173\uff0c\u8bbe\u65bd\u5de5\u4f5c\u4eba\u5458\u4e2d\u6709449\u4eba\u6b7b\u4ea1\u3002\u8c03\u67e5\u8fd8\u53d1\u73b0\uff0c\u572849\u4e2a\u56fd\u5bb6\u7684\u7597\u517b\u9662\u4e2d\uff0c\u7ea6\u67099.5\u4e07\u4f8b\u611f\u67d3\u75c5\u4f8b\u3002", "note_en": "The first major federal effort to measure the deadly impact of the new coronavirus in nursing homes found around 26,000 deaths, a total that likely falls short of showing the full toll on some of the most vulnerable Americans.\n  The new survey of nursing homes, released Monday by the Centers for Medicare and Medicaid Services, showed 25,923 resident deaths tied to Covid-19, the disease caused by the virus, and 449 deaths among the facilities\u2019 staff. The survey also found about 95,000 infection cases at nursing homes across 49...", "posttime": "2020-06-03 03:49:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6b7b\u4ea1,deaths", "title": "\u56db\u5206\u4e4b\u4e00\u7684Covid\u6b7b\u4ea1\u53d1\u751f\u5728\u7597\u517b\u9662", "title_en": "1/4 Covid Deaths Are in Nursing Homes", "transed": 1, "url": "https://www.wsj.com/articles/nearly-26-000-nursing-home-residents-died-of-covid-19-federal-tally-shows-11591053033", "via": "", "real_tags": ["\u6b7b\u4ea1", "deaths"]}, {"category": "", "categoryclass": "", "imagename": "c59c02624c7dca5b8dd5f355ef54d009.jpg", "infoid": 1004886, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e7\u91d1\u5c71--\u5468\u4e8c\uff0cFacebook\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c(Mark Zuckerberg)\u575a\u51b3\u652f\u6301\u4ed6\u4e0d\u5bf9\u7279\u6717\u666e\u603b\u7edf\u5728\u8be5\u793e\u4ea4\u7f51\u7edc\u4e0a\u7684\u717d\u52a8\u6027\u5e16\u5b50\u91c7\u53d6\u4efb\u4f55\u884c\u52a8\u7684\u51b3\u5b9a\uff0c\u79f0\u4ed6\u505a\u51fa\u4e86\u4e00\u4e2a\u201c\u8270\u96be\u7684\u51b3\u5b9a\u201d\uff0c\u4f46\u201c\u76f8\u5f53\u5f7b\u5e95\u201d\u3002\n\u5728\u901a\u8fc7\u89c6\u9891\u804a\u5929\u8f6f\u4ef6\u4e0e\u5458\u5de5\u8fdb\u884c\u7684\u95ee\u7b54\u73af\u8282\u4e2d\uff0c\u624e\u514b\u4f2f\u683c\u8bd5\u56fe\u8bc1\u660e\u81ea\u5df1\u5bf9\u7279\u6717\u666e\u4fe1\u606f\u7684\u7acb\u573a\u662f\u5408\u7406\u7684\uff0c\u7279\u6717\u666e\u7684\u4fe1\u606f\u5728\u5185\u90e8\u5f15\u53d1\u4e86\u6fc0\u70c8\u7684\u5f02\u8bae\u3002\u4f1a\u8bae\u539f\u5b9a\u4e8e\u5468\u56db\u4e3e\u884c\uff0c\u4f46\u5728\u6570\u767e\u540d\u5458\u5de5\u5468\u4e00\u4e3e\u884c\u4e86\u4e00\u573a\u865a\u62df\u7684\u201c\u7f62\u5de5\u201d\uff0c\u4ee5\u6297\u8bae\u516c\u53f8\u7684\u4e0d\u4f5c\u4e3a\u540e\uff0c\u4f1a\u8bae\u88ab\u63d0\u524d\u5230\u4e86\u5468\u4e8c\u3002\n\u624e\u514b\u4f2f\u683c\u5728\u7535\u8bdd\u4f1a\u8bae\u4e0a\u8bf4\uff0cFacebook\u56f4\u7ed5\u8a00\u8bba\u81ea\u7531\u7684\u539f\u5219\u548c\u653f\u7b56\u201c\u8868\u660e\uff0c\u6211\u4eec\u76ee\u524d\u7684\u6b63\u786e\u884c\u52a8\u662f\u6401\u7f6e\u8fd9\u4ef6\u4e8b\u201d\u3002\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\u542c\u5230\u4e86\u901a\u8bdd\u7684\u97f3\u9891\u3002\n\u4ed6\u8865\u5145\u8bf4\uff0c\u5c3d\u7ba1\u4ed6\u77e5\u9053\u8bb8\u591a\u4eba\u4f1a\u5bf9\u8be5\u516c\u53f8\u611f\u5230\u4e0d\u5b89\uff0c\u4f46\u5bf9\u5176\u653f\u7b56\u7684\u5ba1\u67e5\u652f\u6301\u4e86\u4ed6\u7684\u51b3\u5b9a\u3002\u201c\u6211\u77e5\u9053\u6211\u5fc5\u987b\u628a\u6211\u7684\u4e2a\u4eba\u610f\u89c1\u5206\u5f00\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u6211\u4eec\u77e5\u9053\uff0c\u5f53\u6211\u4eec\u505a\u51fa\u8fd9\u4e00\u51b3\u5b9a\u65f6\uff0c\u516c\u53f8\u5185\u90e8\u4f1a\u6709\u5f88\u591a\u4eba\u611f\u5230\u4e0d\u5b89\uff0c\u5a92\u4f53\u4e5f\u4f1a\u5bf9\u6211\u4eec\u63d0\u51fa\u6279\u8bc4\u3002\u201d\n\u5c3d\u7ba1\u8981\u6c42\u624e\u514b\u4f2f\u683c\u5bf9\u7279\u6717\u666e\u7684\u4fe1\u606f\u91c7\u53d6\u884c\u52a8\u7684\u538b\u529b\u52a0\u5927\uff0c\u4f46\u4ed6\u4ecd\u575a\u5b9a\u4e0d\u79fb\u3002\u5468\u4e00\u665a\u4e9b\u65f6\u5019\uff0c\u6c11\u6743\u7ec4\u7ec7\u5728\u4e0e\u4ed6\u548cFacebook\u9996\u5e2d\u8fd0\u8425\u5b98\u8c22\u4e3d\u5c14\u00b7\u6851\u5fb7\u4f2f\u683c(Sheryl Sandberg)\u4f1a\u9762\u540e\u8868\u793a\uff0c\u8be5\u516c\u53f8\u6ca1\u6709\u5bf9\u7279\u6717\u666e\u597d\u6218\u7684\u5e16\u5b50\u91c7\u53d6\u66f4\u5f3a\u786c\u7684\u7acb\u573a\uff0c\u8fd9\u201c\u5b8c\u5168\u4ee4\u4eba\u56f0\u60d1\u201d\u3002\u6700\u8fd1\u51e0\u5929\uff0c\u8fd9\u4e9b\u5e16\u5b50\u52a9\u957f\u4e86\u56f4\u7ed5\u8b66\u5bdf\u66b4\u529b\u7684\u6297\u8bae\u6d3b\u52a8\u7684\u8a00\u8bba\u3002Facebook\u7684\u51e0\u540d\u5458\u5de5\u5df2\u7ecf\u516c\u5f00\u8f9e\u804c\uff0c\u5176\u4e2d\u4e00\u4eba\u8868\u793a\uff0c\u516c\u53f8\u6700\u7ec8\u5c06\u201c\u7ad9\u5728\u5386\u53f2\u7684\u9519\u8bef\u4e00\u8fb9\u201d\u3002\nFacebook\u7684\u5185\u90e8\u5f02\u8bae\u4e0a\u5468\u5f00\u59cb\u915d\u917f\uff0c\u539f\u56e0\u662f\u8fd9\u5bb6\u793e\u4ea4\u7f51\u7edc\u7684\u7ade\u4e89\u5bf9\u624bTwitter\u7ed9\u7279\u6717\u666e\u7684\u63a8\u6587\u6dfb\u52a0\u4e86\u6807\u7b7e\uff0c\u8868\u660e\u603b\u7edf\u6b63\u5728\u7f8e\u5316\u66b4\u529b\uff0c\u53d1\u8868\u4e0d\u51c6\u786e\u7684\u58f0\u660e\u3002\u6765\u81ea\u7279\u6717\u666e\u7684\u76f8\u540c\u4fe1\u606f\u4e5f\u51fa\u73b0\u5728Facebook\u4e0a\u3002\u4f46\u4e0eTwitter\u4e0d\u540c\u7684\u662f\uff0cFacebook\u6ca1\u6709\u89e6\u53ca\u603b\u7edf\u7684\u5e16\u5b50\uff0c\u5305\u62ec\u7279\u6717\u666e\u5728\u8c08\u5230\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u7684\u6297\u8bae\u6d3b\u52a8\u65f6\u8bf4\uff1a\u201c\u62a2\u52ab\u5f00\u59cb\u4e86\uff0c\u67aa\u51fb\u5c31\u5f00\u59cb\u4e86\u3002\u201d\n\u8fd9\u62db\u81f4\u4e86\u5185\u90e8\u6279\u8bc4\uff0cFacebook\u5458\u5de5\u8fa9\u79f0\uff0c\u653e\u5f03\u7279\u6717\u666e\u717d\u52a8\u66b4\u529b\u7684\u4fe1\u606f\u662f\u7ad9\u4e0d\u4f4f\u811a\u7684\u3002\u4ed6\u4eec\u8bf4\uff0c\u624e\u514b\u4f2f\u683c\u662f\u5728\u5411\u5171\u548c\u515a\u4eba\u5351\u8eac\u5c48\u819d\uff0c\u56e0\u4e3a\u4ed6\u5bb3\u6015\u53d7\u5230\u76d1\u7ba1\u6216\u5206\u5d29\u79bb\u6790\u3002\n\u624e\u514b\u4f2f\u683c\u548c\u6851\u5fb7\u4f2f\u683c\u5728\u8fc7\u53bb\u4e94\u5929\u91cc\u4e00\u76f4\u5728\u4e0e\u5458\u5de5\u3001\u6c11\u6743\u9886\u8896\u548c\u5176\u4ed6\u6124\u6012\u7684\u5404\u65b9\u4f1a\u9762\uff0c\u89e3\u91ca\u516c\u53f8\u7684\u7acb\u573a\u3002\u624e\u514b\u4f2f\u683c\u66fe\u8868\u793a\uff0cFacebook\u4e0d\u60f3\u6210\u4e3a\u201c\u771f\u76f8\u7684\u4ef2\u88c1\u8005\u201d\u3002\u4ed6\u8fd8\u8868\u793a\uff0c\u4ed6\u652f\u6301\u8a00\u8bba\u81ea\u7531\uff0c\u4e16\u754c\u5404\u56fd\u9886\u5bfc\u4eba\u5728\u7f51\u4e0a\u53d1\u5e03\u7684\u5185\u5bb9\u7b26\u5408\u516c\u4f17\u5229\u76ca\uff0c\u5177\u6709\u65b0\u95fb\u4ef7\u503c\u3002\n\u4f46\u5728\u8bd5\u56fe\u5b89\u629a\u6240\u6709\u4eba\u7684\u8fc7\u7a0b\u4e2d\uff0c\u624e\u514b\u4f2f\u683c\u672a\u80fd\u5b89\u629a\u4efb\u4f55\u4eba\u3002\u5458\u5de5\u4eec\u7ee7\u7eed\u53cd\u6297\uff0c\u5728Twitter\u3001LinkedIn\u548c\u4ed6\u4eec\u7684Facebook\u4e2a\u4eba\u4e3b\u9875\u4e0a\u53d1\u8868\u4e86\u6279\u8bc4\u7684\u516c\u5f00\u58f0\u660e\u3002\u653f\u754c\u4eba\u58eb\u548c\u6c11\u6743\u7ec4\u7ec7\u4e5f\u6279\u8bc4\u4e86\u624e\u514b\u4f2f\u683c\u7684\u7acb\u573a\u3002\n\u8fc8\u514b\u00b7\u827e\u8428\u514b(Mike Isaac)\u4ece\u65e7\u91d1\u5c71\u62a5\u9053\uff0c\u585e\u897f\u8389\u4e9a\u00b7\u5eb7(Cecilia Kang)\u4ece\u534e\u76db\u987f\u62a5\u9053\uff0c\u5e0c\u62c9\u00b7\u5f17\u5170\u514b\u5c14(Sheera Frenkel)\u4ece\u52a0\u5dde\u5965\u514b\u5170\u62a5\u9053\u3002", "note_en": "SAN FRANCISCO \u2014 Mark Zuckerberg, Facebook\u2019s chief executive, on Tuesday stood firmly behind his decision to not do anything about President Trump\u2019s inflammatory posts on the social network, saying that he had made a \u201ctough decision\u201d but that it \u201cwas pretty thorough.\u201d\n In a question-and-answer session with employees conducted over video chat software, Mr. Zuckerberg sought to justify his position on Mr. Trump\u2019s messages, which has led to fierce internal dissent. The meeting, which had been scheduled for Thursday, was moved up to Tuesday after hundreds of  employees protested the inaction by staging a virtual \u201cwalkout\u201d of sorts on Monday.\n Facebook\u2019s principles and policies around free speech \u201cshow that the right action where we are right now is to leave this up,\u201d Mr. Zuckerberg said on the call, the audio of which was heard by The New York Times.\n He added that though he knew many people would be upset with the company, a review of its policies backed up his decision. \u201cI knew that I would have to separate out my personal opinion,\u201d he said. \u201cKnowing that when we made this decision we made, it was going to lead to a lot of people upset inside the company, and the media criticism we were going to get.\u201d\n Mr. Zuckerberg held firm even as the pressure on him to take action on Mr. Trump\u2019s messages intensified. Civil rights groups said late Monday after meeting with him and Sheryl Sandberg, Facebook\u2019s chief operating officer, that it was \u201ctotally confounding\u201d that the company was not taking a tougher stand on Mr. Trump\u2019s belligerent posts, which have contributed to the rhetoric around the  protests over police violence in recent days. And several Facebook employees have publicly resigned, with one saying the company would end up \u201con the wrong side of history.\u201d\n Facebook\u2019s internal dissent began brewing last week after the social network\u2019s rival, Twitter, added labels to Mr. Trump\u2019s tweets that indicated  the president was glorifying violence and making inaccurate statements. The same messages from Mr. Trump also appeared on Facebook. But unlike Twitter,  Facebook did not touch the president\u2019s posts, including one in which Mr. Trump said of the protests in Minneapolis: \u201cwhen the looting starts, the shooting starts.\u201d\n That led to internal criticism, with Facebook employees arguing it was untenable to leave up Mr. Trump\u2019s messages that incited violence. They said Mr. Zuckerberg was kowtowing to Republicans out of fear of being regulated or broken up.\n Mr. Zuckerberg and Ms. Sandberg have spent the past five days meeting with employees, civil rights leaders and other angry parties to explain the company\u2019s stance. Mr. Zuckerberg has said Facebook does not want to be an \u201carbiter of truth.\u201d He has also said that he is for free speech and that what world leaders post online is in the public interest and newsworthy.\n But in trying to placate everyone, Mr. Zuckerberg has failed to appease anyone. Employees have continued to revolt, making critical public statements on Twitter, LinkedIn and their personal Facebook pages. And politicians and civil rights organizations have also criticized Mr. Zuckerberg\u2019s position.\n Mike Isaac reported from San Francisco, Cecilia Kang from Washington and Sheera Frenkel from Oakland, Calif.", "posttime": "2020-06-03 03:30:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u505a\u6cd5,defends,\u7279\u6717\u666e", "title": "\u624e\u514b\u4f2f\u683c\u4e3a\u5bf9\u7279\u6717\u666e\u5e16\u5b50\u7684\u4e0d\u63d2\u624b\u505a\u6cd5\u8fdb\u884c\u8fa9\u62a4", "title_en": "Zuckerberg Defends Hands-Off Approach to Trump\u2019s Posts", "transed": 1, "url": "https://www.nytimes.com/2020/06/02/technology/zuckerberg-defends-facebook-trump-posts.html", "via": "", "real_tags": ["app", "\u505a\u6cd5", "defends", "\u7279\u6717\u666e"]}, {"category": "", "categoryclass": "", "imagename": "4c22323cb9be05172d978c5d33ba3c3b.jpeg", "infoid": 1004884, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e3a\u4f60\u7684\u52c7\u6c14\u9f13\u638c\uff0c\u63d0\u6469\u897f\u3002\u7136\u800c\uff0c\u8981\u8ba4\u8bc6\u5230\uff0c\u4f60(\u4ee5\u7279\u6743)\u56e2\u7ed3\u4e00\u81f4\u7684\u52aa\u529b\u4e0d\u4f1a\u8ba9Facebook\u6bd4\u4ed6\u4eec\u66f4\u591a\u5730\u503e\u542c\u9ed1\u4eba\u793e\u533a\u7684\u610f\u89c1\u3002\u8fd9\u4e00\u6b21\u771f\u6b63\u7684\u6539\u53d8\u5c06\u6765\u81ea\u4e8e\u8ba4\u8bc6\u5230\u4f60\u7684\u6743\u529b\u548c\u7279\u6743\u5730\u4f4d\uff0c\u5e76\u6559\u80b2\u4f60\u5468\u56f4\u7684\u4eba\u5982\u4f55\u5728\u4f60\u53d7\u96c7\u7684\u7cfb\u7edf\u4e2d\u4e0e\u79cd\u65cf\u4e3b\u4e49\u4f5c\u6597\u4e89\u3002\u6211\u4eec\u9700\u8981\u4ece\u5916\u90e8\u548c\u5185\u90e8\u8fdb\u884c\u6539\u53d8\u3002\u4e00\u4e9b\u9ed1\u4eba\u793e\u533a\u548cPOC\u6c38\u8fdc\u4e0d\u4f1a\u4ee5\u5458\u5de5\u7684\u8eab\u4efd\u8e0f\u5165Facebook\u3002\u4ed6\u4eec\u9700\u8981\u4f60\u6765\u4e3a\u4ed6\u4eec\u53d1\u58f0\u3002", "note_en": "I applaud you for your courage Timothy. However realize that your effort to stand in solidarity (with privilege) will not make facebook listen to the black community any more than they have. Real change this time around will come from realizing your positions of power and privilege and educating those around you on how to fight racism in the very systems you are employed in. We need change from the outside AND the inside. Some of the black community and POC\u2019s will never get to step foot into Facebook as an employee. They need you to be their voice.", "posttime": "2020-06-03 02:57:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,\u8138\u4e66,submitted,\u7279\u6743", "title": "\u201c\u4eca\u5929\uff0c\u6211\u5411\u8138\u4e66\u9012\u4ea4\u4e86\u8f9e\u5448\u3002\u201d", "title_en": "\u201cToday, I submitted my resignation to Facebook\u201d", "transed": 1, "url": "https://www.linkedin.com/posts/timothy-j-aveni_blacklivesmatter-activity-6673316720993824768-q_dU/", "via": "", "real_tags": ["facebook", "\u8138\u4e66", "submitted", "\u7279\u6743"]}, {"category": "", "categoryclass": "", "imagename": "2a38cf3b366a38d28220fe72243edc63.jpg", "infoid": 1004883, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "RIKEN\u9ad8\u7ea7\u5149\u5b50\u5b66\u4e2d\u5fc3\u7684\u7814\u7a76\u4eba\u5458\u53ca\u5176\u5408\u4f5c\u8005\u53d1\u73b0\uff0c\u592a\u8d6b\u5179\u8f90\u5c04\u4e0e\u4f20\u7edf\u89c2\u5ff5\u76f8\u77db\u76fe\uff0c\u53ef\u4ee5\u7834\u574f\u6d3b\u7ec6\u80de\u4e2d\u7684\u86cb\u767d\u8d28\uff0c\u800c\u4e0d\u4f1a\u6740\u6b7b\u5b83\u4eec\u3002\u8fd9\u4e00\u53d1\u73b0\u610f\u5473\u7740\uff0c\u957f\u671f\u4ee5\u6765\u88ab\u8ba4\u4e3a\u4e0d\u5207\u5b9e\u9645\u7684\u4f7f\u7528\uff0c\u53ef\u80fd\u4f1a\u5728\u64cd\u7eb5\u65b9\u9762\u6709\u5e94\u7528\uff0c\u4f8b\u5982\uff0c\u4f46\u4e5f\u53ef\u80fd\u5b58\u5728\u503c\u5f97\u8003\u8651\u7684\u95ee\u9898\u3002\u592a\u8d6b\u5179\u8f90\u5c04\u662f\u5fae\u6ce2\u548c\u4e4b\u95f4\u7535\u78c1\u9891\u8c31\u7684\u4e00\u90e8\u5206\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a\u592a\u8d6b\u5179\u95f4\u9699\uff0c\u56e0\u4e3a\u76ee\u524d\u7f3a\u4e4f\u6709\u6548\u5730\u64cd\u7eb5\u5b83\u7684\u6280\u672f\u3002\u56e0\u4e3a\u592a\u8d6b\u5179\u8f90\u5c04\u662f\u7531\u6db2\u4f53\u963b\u6b62\u7684\uff0c\u800c\u4e14\u662f\u975e\u7535\u79bb\u7684-\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u4f1a\u50cfX\u5c04\u7ebf\u90a3\u6837\u7834\u574fDNA-\u6b63\u5728\u8fdb\u884c\u5de5\u4f5c\uff0c\u5c06\u5176\u7528\u4e8e\u673a\u573a\u884c\u674e\u68c0\u67e5\u7b49\u9886\u57df\u3002\u5b83\u901a\u5e38\u88ab\u8ba4\u4e3a\u5728\u7ec4\u7ec7\u4e2d\u4f7f\u7528\u662f\u5b89\u5168\u7684\u3002\u7136\u800c\uff0c\u6700\u8fd1\u7684\u4e00\u4e9b\u7814\u7a76\u53d1\u73b0\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bf9DNA\u4ea7\u751f\u4e00\u4e9b\u76f4\u63a5\u5f71\u54cd\uff0c\u5c3d\u7ba1\u5b83\u51e0\u4e4e\u6ca1\u6709\u80fd\u529b\u771f\u6b63\u6e17\u900f\u5230\u7ec4\u7ec7\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u79cd\u5f71\u54cd\u53ea\u4f1a\u53d1\u751f\u5728\u76ae\u80a4\u8868\u9762\u7684\u7ec6\u80de\u4e0a\u3002\n\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u4ecd\u7136\u6ca1\u6709\u88ab\u63a2\u7d22\uff0c\u90a3\u5c31\u662f\u592a\u8d6b\u5179\u8f90\u5c04\u5373\u4f7f\u5728\u505c\u6b62\u540e\uff0c\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u80fd\u91cf\u6ce2\u4f20\u64ad\u5230\u751f\u7269\u7ec4\u7ec7\u4e2d\u6765\u5f71\u54cd\u751f\u7269\u7ec4\u7ec7\u3002\u6765\u81eaRAP\u7684\u7814\u7a76\u5c0f\u7ec4\u6700\u8fd1\u53d1\u73b0\uff0c\u6765\u81ea\u5149\u7684\u80fd\u91cf\u53ef\u4ee5\u4ee5\u51b2\u51fb\u6ce2\u7684\u5f62\u5f0f\u8fdb\u5165\u6c34\u4e2d\u3002\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8be5\u5c0f\u7ec4\u51b3\u5b9a\u8c03\u67e5\u592a\u8d6b\u5179\u5149\u662f\u5426\u4e5f\u4f1a\u5bf9\u7ec4\u7ec7\u4ea7\u751f\u8fd9\u6837\u7684\u5f71\u54cd\u3002\n\u4ed6\u4eec\u9009\u62e9\u4f7f\u7528\u4e00\u79cd\u540d\u4e3a\u808c\u52a8\u86cb\u767d\u7684\u86cb\u767d\u8d28\u8fdb\u884c\u7814\u7a76\uff0c\u808c\u52a8\u86cb\u767d\u662f\u4e3a\u6d3b\u7ec6\u80de\u63d0\u4f9b\u7ed3\u6784\u7684\u5173\u952e\u5143\u7d20\u3002\u5b83\u53ef\u4ee5\u4ee5\u4e24\u79cd\u6784\u8c61\u5b58\u5728\uff0c\u5373(G)-\u808c\u52a8\u86cb\u767d\u548c(F)-\u808c\u52a8\u86cb\u767d\uff0c\u5b83\u4eec\u5177\u6709\u4e0d\u540c\u7684\u7ed3\u6784\u548c\u529f\u80fd\u3002(F)-\u808c\u52a8\u86cb\u767d\u662f\u7531\u86cb\u767d\u8d28\u805a\u5408\u94fe\u7ec4\u6210\u7684\u957f\u4e1d\u3002\u4f7f\u7528\u592a\u8d6b\u5179\u8f90\u5c04\uff0c\u4ed6\u4eec\u89c2\u5bdf\u4e86\u592a\u8d6b\u5179\u8f90\u5c04\u5bf9\u808c\u52a8\u86cb\u767d\u6c34\u6eb6\u6db2\u4e2d\u7684\u94fe\u751f\u957f\u7684\u5f71\u54cd\uff0c\u5e76\u53d1\u73b0\u5b83\u5bfc\u81f4\u4e86\u7ec6\u4e1d\u7684\u51cf\u5c11\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u592a\u8d6b\u5179\u5149\u4ee5\u67d0\u79cd\u65b9\u5f0f\u963b\u6b62\u4e86(G)-\u808c\u52a8\u86cb\u767d\u5f62\u6210\u94fe\uff0c\u5e76\u6210\u4e3a(F)-\u808c\u52a8\u86cb\u767d\u3002\u4ed6\u4eec\u8003\u8651\u4e86\u6c14\u6e29\u4e0a\u5347\u9020\u6210\u7684\u53ef\u80fd\u6027\uff0c\u4f46\u53d1\u73b01.4\u6444\u6c0f\u5ea6\u5de6\u53f3\u7684\u5c0f\u5e45\u4e0a\u5347\u4e0d\u8db3\u4ee5\u89e3\u91ca\u8fd9\u79cd\u53d8\u5316\u3002\u7814\u7a76\u4eba\u5458\u5f97\u51fa\u7ed3\u8bba\uff0c\u5b83\u6700\u6709\u53ef\u80fd\u662f\u7531\u51b2\u51fb\u6ce2\u5f15\u8d77\u7684\u3002\u4e3a\u4e86\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u8fd9\u4e00\u5047\u8bbe\uff0c\u4ed6\u4eec\u5728\u6d3b\u7ec6\u80de\u4e2d\u8fdb\u884c\u4e86\u5b9e\u9a8c\uff0c\u53d1\u73b0\u5728\u7ec6\u80de\u4e2d\uff0c\u5c31\u50cf\u5728\u6eb6\u6db2\u4e2d\u4e00\u6837\uff0c\u808c\u52a8\u86cb\u767d\u7ec6\u4e1d\u7684\u5f62\u6210\u53d7\u5230\u4e86\u7834\u574f\u3002\u7136\u800c\uff0c\u6ca1\u6709\u8ff9\u8c61\u8868\u660e\u8f90\u5c04\u5bfc\u81f4\u7ec6\u80de\u6b7b\u4ea1\u3002\n\u53d1\u8868\u5728\u201c\u79d1\u5b66\u62a5\u544a\u201d\u4e0a\u7684\u8fd9\u9879\u7814\u7a76\u7684\u7b2c\u4e00\u4f5c\u8005\u5c71\u5d0e\u4fee(Shota Yamazaki)\u8bf4\uff0c\u6211\u4eec\u5f88\u611f\u5174\u8da3\u7684\u662f\uff0c\u5b83\u53ef\u4ee5\u5728\u4e0d\u6740\u6b7b\u7ec6\u80de\u5185\u86cb\u767d\u8d28\u7684\u60c5\u51b5\u4e0b\u5bf9\u5b83\u4eec\u4ea7\u751f\u5f71\u54cd\u3002\u6211\u4eec\u5c06\u6709\u5174\u8da3\u5bfb\u627e\u5728\u764c\u75c7\u548c\u5176\u4ed6\u75be\u75c5\u65b9\u9762\u7684\u6f5c\u5728\u5e94\u7528\u3002\n\u7814\u7a76\u5c0f\u7ec4\u7ec4\u957f\u5927\u8c37\u5343\u5b50\u8bf4\uff0c\u592a\u8d6b\u5179\u8f90\u5c04\u4eca\u5929\u6b63\u5728\u8fdb\u5165\u5404\u79cd\u5e94\u7528\u9886\u57df\uff0c\u5145\u5206\u4e86\u89e3\u5b83\u5bf9\u751f\u7269\u7ec4\u7ec7\u7684\u5f71\u54cd\u662f\u5f88\u91cd\u8981\u7684\uff0c\u8fd9\u65e2\u53ef\u4ee5\u8bc4\u4f30\u4efb\u4f55\u98ce\u9669\uff0c\u4e5f\u53ef\u4ee5\u5bfb\u627e\u6f5c\u5728\u7684\u5e94\u7528\u3002\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeShota Yamazaki\u7b49\u4eba\u3002\u592a\u8d6b\u5179\u8f90\u5c04\u80fd\u91cf\u901a\u8fc7\u6c34\u5c42\u7684\u4f20\u64ad\uff1a\u6d3b\u7ec6\u80de\u4e2d\u808c\u52a8\u86cb\u767d\u7ec6\u4e1d\u7684\u7834\u574f\uff0c\u79d1\u5b66\u62a5\u544a(2020)\u3002\u7535\u8bdd\uff1a10.1038/s4159820-65955-5", "note_en": "Researchers from the RIKEN Center for Advanced Photonics and collaborators have discovered that terahertz radiation, contradicting conventional belief, can disrupt proteins in living cells without killing them.    This finding implies that    , which was long considered impractical to use, may have applications in manipulating   for the  , for example, but also that there may be   to consider. Terahertz radiation is a portion of the electromagnetic spectrum between microwaves and  , which is often known as the &#34;terahertz gap&#34; because of the current lack of technology to manipulate it efficiently. Because terahertz radiation is stopped by liquids and is non-ionizing\u2014meaning that it does not damage DNA in the way that X-rays do\u2014work is ongoing to put it to use in areas such as airport baggage inspections. It has generally been considered to be safe for use in tissues. However, some recent studies have found that it may have some direct effect on DNA, though it has little ability to actually penetrate into tissues, meaning that this effect would only be on surface skin cells.\n  One issue that has remained unexplored, however, is whether terahertz radiation can affect biological tissues even after it has been stopped, through the propagation of energy waves into the tissue. The research group from RAP recently discovered that the energy from the light could enter into water as a shockwave. Considering this, the group decided to investigate whether terahertz light could also have an effect like this on tissue.\n  They chose to investigate using a protein called actin, which is a key element that provides structure to living cells. It can exist in two conformations known as (G)-actin and (F)-actin, which have different structures and functions. The (F)-actin is a long filament made up of polymer chains of proteins. Using  , they looked at the effect of terahertz radiation on the growth of chains in an aqueous solution of actin, and found that it led to a decrease in filaments. In other words, the terahertz light was somehow preventing the (G)-actin from forming chains and becoming (F)-actin. They considered the possibility that it was caused by a rise in temperature, but found that the small rise, of around 1.4 degrees Celsius, was not sufficient to explain the change. The researchers concluded that it was most likely caused by a shockwave. To further test the hypothesis, they performed experiments in living cells, and found that in the cells, as in the solution, the formation of actin filaments was disrupted. However, there was no sign that the radiation caused cells to die.\n  Shota Yamazaki, the first author of the study published in  Scientific Reports, says, &#34;It was quite interesting for us to see that   can have an effect on proteins inside cells without killing them   themselves. We will be interested in looking for potential applications in cancer and other diseases.&#34;\n  Chiko Otani, the leader of the research groups, says, &#34;Terahertz radiation is coming into a variety of applications today, and it is important to come to a full understanding of its effect on biological tissues, both to gauge any risks and to look for potential applications.&#34;        More information:\t\t\t\t\t\t\t\t\t\t\t\tShota Yamazaki et al. Propagation of THz irradiation energy through aqueous layers: Demolition of actin filaments in living cells,  Scientific Reports (2020).  DOI: 10.1038/s41598-020-65955-5", "posttime": "2020-06-03 02:57:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f90\u5c04,radiation,\u808c\u52a8\u86cb\u767d", "title": "\u592a\u8d6b\u5179\u8f90\u5c04\u53ef\u4ee5\u7834\u574f\u6d3b\u7ec6\u80de\u4e2d\u7684\u86cb\u767d\u8d28", "title_en": "Terahertz radiation can disrupt proteins in living cells", "transed": 1, "url": "https://phys.org/news/2020-06-terahertz-disrupt-proteins-cells.html", "via": "", "real_tags": ["\u8f90\u5c04", "radiation", "\u808c\u52a8\u86cb\u767d"]}, {"category": "", "categoryclass": "", "imagename": "ab5feb52dbde9d8eae28778890813f1e.jpg", "infoid": 1004882, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f18\u6b65\u9996\u5e2d\u6267\u884c\u5b98Dara Khosrowshahi\u5728\u7ed9\u5458\u5de5\u7684\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u8868\u793a\uff0c\u5728\u65b0\u51a0\u80ba\u708e\u542f\u53d1\u7684\u6700\u65b0\u4e00\u8f6e\u6210\u672c\u524a\u51cf\u4e2d\uff0c\u4f18\u6b65\u5c06\u88c1\u54583,000\u4eba\u3002\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d(The Wall Street Journal)\u4e0a\u5468\u672b\u6700\u5148\u62a5\u9053\u4e86\u8fd9\u4e00\u6d88\u606f\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\uff0c\u8fd9\u5bb6\u53eb\u8f66\u516c\u53f8\u7684\u53eb\u8f66\u4e1a\u52a1\u4e0b\u964d\u4e8680%\u3002\nKhosrowshahi\u5728\u7535\u5b50\u90ae\u4ef6\u4e2d\u8bf4\uff1a\u201c\u6211\u4eec\u5fc5\u987b\u91c7\u53d6\u8fd9\u4e9b\u8270\u96be\u7684\u884c\u52a8\uff0c\u624d\u80fd\u7ad9\u7a33\u811a\u8ddf\uff0c\u786e\u4fdd\u6211\u4eec\u7684\u672a\u6765\uff0c\u5e76\u7ee7\u7eed\u6211\u4eec\u7684\u4f7f\u547d\u3002\u201d\n\u201c\u6211\u4eec\u5fc5\u987b\u91c7\u53d6\u8fd9\u4e9b\u5f3a\u786c\u884c\u52a8\uff0c\u624d\u80fd\u7ad9\u7a33\u811a\u8ddf.\u201d\n\u4e0d\u5230\u4e24\u5468\u524d\uff0c\u4f18\u6b65\u89e3\u96c7\u4e863700\u540d\u5458\u5de5\uff0c\u5360\u5176\u5168\u7403\u5458\u5de5\u603b\u6570\u768414%\u3002\u5728\u4e0d\u5230\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u91cc\uff0c\u8be5\u516c\u53f8\u603b\u5171\u88c1\u5458\u7ea6\u56db\u5206\u4e4b\u4e00\u3002\n\u9664\u4e86\u88c1\u5458\u6570\u5343\u4eba\u5916\uff0c\u4f18\u6b65\u8fd8\u5c06\u5173\u95ed\u5168\u740345\u4e2a\u529e\u4e8b\u5904\u3002Khosrowshahi\u8bf4\uff0c\u5b83\u5c06\u5bf9\u4e00\u4e9b\u90e8\u95e8\u8fdb\u884c\u6539\u7ec4\uff0c\u4ee5\u201c\u5c06\u6211\u4eec\u7684\u52aa\u529b\u91cd\u65b0\u96c6\u4e2d\u5728\u6211\u4eec\u7684\u6838\u5fc3\u4e0a\u201d\uff0c\u4ed6\u5c06\u5176\u5b9a\u4e49\u4e3a\u201c\u5e2e\u52a9\u4eba\u4eec\u642c\u5bb6\uff0c\u5e76\u4ea4\u4ed8\u4e1c\u897f\u201d\u3002\n\u56e0\u6b64\uff0c\u4f18\u6b65\u6b63\u5728\u9010\u6b65\u5173\u95ed\u53bb\u5e749\u6708\u63a8\u51fa\u7684\u79d1\u6280\u5b75\u5316\u5668\u548c\u4eba\u5de5\u667a\u80fd\u5b9e\u9a8c\u5ba4\u3002\u8be5\u516c\u53f8\u8fd8\u5c06\u201c\u4e3aUber Works\u5bfb\u627e\u6218\u7565\u9009\u62e9\u201d\uff0c\u8fd9\u662f\u5176\u5de5\u4f5c\u627e\u73ed\u5668\u5e94\u7528\u7a0b\u5e8f\u3002Khosrowshahi\u8bf4\uff0c\u8be5\u516c\u53f8\u8d1f\u8d23\u5ba2\u6237\u53c2\u4e0e\u548c\u4e1a\u52a1\u6218\u7565\u7684\u526f\u603b\u88c1Zhenya Lindgardt\u5c06\u79bb\u5f00\u516c\u53f8\u3002\n\u8be5\u516c\u53f8\u7684\u5916\u5356\u670d\u52a1\u4f18\u6b65Eats(Uber Eats)\u98d9\u5347\uff0c\u800c\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u5730\u533a\u90fd\u5728\u539f\u5730\u907f\u96be\u3002\u4e0a\u5468\uff0c\u8be5\u516c\u53f8\u62a5\u544a\u79f0\uff0c\u5176\u4f18\u6b65Eats\u90e8\u95e8\u7684\u9884\u8ba2\u91cf\u540c\u6bd4\u589e\u957f\u4e8654%\u4ee5\u4e0a\u3002\u4f46Khosrowshahi\u6307\u51fa\uff0c\u8fd9\u4e9b\u6536\u76ca\u4e0d\u8db3\u4ee5\u5f25\u8865\u4f18\u6b65\u6838\u5fc3\u4e1a\u52a1\u53eb\u8f66\u4e1a\u52a1\u4e0b\u6ed1\u5e26\u6765\u7684\u4e25\u91cd\u635f\u5931\u3002\nKhosrowshahi\u8bf4\uff1a\u201c\u6211\u8981\u63d0\u9192\u7684\u662f\uff0c\u867d\u7136Eats\u7684\u589e\u957f\u6b63\u5728\u52a0\u901f\uff0c\u4f46\u4eca\u5929\u7684\u4e1a\u52a1\u8fd8\u4e0d\u8db3\u4ee5\u652f\u4ed8\u6211\u4eec\u7684\u8d39\u7528\u3002\u201d\u201c\u6211\u5b8c\u5168\u76f8\u4fe1\uff0c\u6211\u4eec\u6b63\u5728\u91c7\u53d6\u7684\u4e3e\u63aa\u5c06\u4f7fEats\u5b9e\u73b0\u76c8\u5229\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u6e38\u4e50\u8bbe\u65bd\u6240\u505a\u7684\u90a3\u6837\uff0c\u4f46\u8fd9\u4e0d\u4f1a\u5728\u4e00\u591c\u4e4b\u95f4\u53d1\u751f\u3002\u201d\n\u4f18\u6b65\u5e76\u6ca1\u6709\u653e\u5f03\u6240\u6709\u6210\u672c\u5bc6\u96c6\u578b\u7684\u526f\u4e1a\u3002\u8be5\u516c\u53f8\u8d1f\u8d23\u76d1\u7763\u5176\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u9879\u76ee\u7684\u5148\u8fdb\u6280\u672f\u96c6\u56e2(Advanced Technologies Group)\u5c06\u7ee7\u7eed\u8fd0\u8425--\u5c3d\u7ba1\u4e00\u4e9bATG\u5458\u5de5\u6b63\u5728\u88c1\u5458\u3002\u4e0a\u5468\uff0cKhosrowshahi\u8868\u793a\uff0c\u4f18\u6b65\u5bf9\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u7684\u8ffd\u6c42\u201c\u4e00\u76f4\u662f\u4e00\u9879\u957f\u671f\u6295\u8d44\u201d\u3002\n\u6574\u4e2a\u7f51\u7ea6\u8f66\u884c\u4e1a\u90fd\u5728\u611f\u53d7\u5230\u65b0\u51a0\u80ba\u708e\u7684\u75db\u82e6\u3002\u4f18\u6b65\u7684\u4e3b\u8981\u7ade\u4e89\u5bf9\u624bLyft\u6700\u8fd1\u5ba3\u5e03\u5c06\u88c1\u5458\u8fd11000\u4eba\uff0c\u7ea6\u5360\u5458\u5de5\u603b\u6570\u768417%\u3002\u4f18\u6b65\u7684\u4e2d\u4e1c\u5b50\u516c\u53f8Careem\u88c1\u5458\u8d85\u8fc730%\uff0c\u5e76\u6682\u505c\u4e86\u5176\u516c\u4ea4\u8fd0\u8f93\u5e94\u7528\u7a0b\u5e8f\u3002\n\u57283\u6708\u4efd\u7684\u7535\u8bdd\u4f1a\u8bae\u4e2d\uff0cKhosrowshahi\u8868\u793a\uff0c\u8be5\u516c\u53f8\u5efa\u7acb\u4e86\u201c\u6781\u7aef\u8fb9\u7f18\u60c5\u51b5\u201d\u7684\u6a21\u578b\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u51fa\u884c\u91cf\u66b4\u8dcc\u4e8680%\u3002\u5373\u4f7f\u5728\u8fd9\u79cd\u53ef\u6015\u7684\u60c5\u51b5\u4e0b-\u540e\u6765\u53d1\u751f\u4e86-\u4f18\u6b65\u4ecd\u7136\u4f1a\u5728\u5e74\u5e95\u62e5\u670940\u4ebf\u7f8e\u5143\u7684\u65e0\u9650\u5236\u73b0\u91d1\uff0c\u5916\u52a020\u4ebf\u7f8e\u5143\u7684\u5faa\u73af\u4fe1\u8d37\u3002\n\u4f46\u5728\u53d1\u7ed9\u5458\u5de5\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0cKhosrowshahi\u8868\u793a\uff0c\u4ed6\u5e0c\u671b\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u5df2\u7ecf\u8fc7\u53bb\u3002\n\u4ed6\u5199\u9053\uff1a\u201c\u5728\u4ece\u65b0\u51a0\u80ba\u708e\u8eab\u4e0a\u5b66\u5230\u4e86\u5173\u4e8e\u4e16\u754c\u4e0d\u53ef\u9884\u6d4b\u6027\u7684\u4e2a\u4eba\u6559\u8bad\u540e\uff0c\u6211\u4e0d\u4f1a\u7edd\u5bf9\u80af\u5b9a\u5730\u5bf9\u6211\u4eec\u7684\u672a\u6765\u505a\u51fa\u4efb\u4f55\u4e3b\u5f20\u3002\u201d\u4ed6\u5199\u9053\uff1a\u201c\u6211\u4ece\u65b0\u51a0\u80ba\u708e\u8eab\u4e0a\u5b66\u5230\u4e86\u5173\u4e8e\u4e16\u754c\u4e0d\u53ef\u9884\u6d4b\u6027\u7684\u4e2a\u4eba\u6559\u8bad\uff0c\u6211\u4e0d\u4f1a\u7edd\u5bf9\u80af\u5b9a\u5730\u5bf9\u6211\u4eec\u7684\u672a\u6765\u505a\u51fa\u4efb\u4f55\u4e3b\u5f20\u3002\u201d\u201c\u7136\u800c\uff0c\u6211\u8981\u544a\u8bc9\u4f60\u4eec\uff0c\u6211\u4eec\u73b0\u5728\u6b63\u5728\u505a\u51fa\u975e\u5e38\u975e\u5e38\u8270\u96be\u7684\u9009\u62e9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u544a\u522b\uff0c\u5c3d\u53ef\u80fd\u5730\u660e\u786e\uff0c\u7ee7\u7eed\u524d\u8fdb\uff0c\u5145\u6ee1\u4fe1\u5fc3\u5730\u91cd\u65b0\u5f00\u59cb\u5efa\u8bbe\u3002\u201d", "note_en": "Uber is laying off 3,000 employees in the latest round of COVID-19-inspired cost-cutting, CEO Dara Khosrowshahi said in an email to staff. The news, which was first reported over  the weekend by  The Wall Street Journal, comes as the ride-hailing company has seen an  80 percent drop in its ride-hailing business as a result of the coronavirus pandemic.\n \u201cWe have to take these hard actions to stand strong on our own two feet, to secure our future, and to continue on our mission,\u201d Khosrowshahi said in the email.\n \u201cWe have to take these hard actions to stand strong on our own two feet.\u201d\n The move comes less than two weeks after  Uber laid off 3,700 employees, or 14 percent of its global workforce. In total, the company has eliminated around a quarter of its staff in less than a month.\n In addition to laying off thousands of employees, Uber will also close 45 offices globally. And it will reshuffle some of its divisions, Khosrowshahi said, to \u201cre-focus our efforts on our core,\u201d which he defines as \u201chelping people move, and delivering things.\u201d\n As such, Uber is winding down its  tech incubator and AI labs, which it launched last September. The company will also \u201cpursue strategic alternatives for Uber Works,\u201d  its work shift-finder app. And  Zhenya Lindgardt, the company\u2019s vice president of customer engagement and business strategy, will be leaving the company, Khosrowshahi said.\n Uber Eats, the company\u2019s food delivery serviced, has soared while much of the world is sheltering in place. Last week, the company reported that bookings in its Uber Eats division were up more than 54 percent year over year. But Khosrowshahi notes those gains won\u2019t cover the severe losses brought by the drop in ride-hailing, Uber\u2019s core business.\n \u201cI will caution that while Eats growth is accelerating, the business today doesn\u2019t come close to covering our expenses,\u201d Khosrowshahi said. \u201cI have every belief that the moves we are making will get Eats to profitability, just as we did with Rides, but it\u2019s not going to happen overnight.\u201d\n  Uber isn\u2019t abandoning all of its cost-intensive side businesses. The company\u2019s Advanced Technologies Group, which oversees its self-driving car program, will remain operational \u2014 although some ATG employees are being laid off. Last week, Khosrowshahi said Uber\u2019s pursuit of self-driving cars \u201chas always been a long-term investment.\u201d\n The pain of COVID-19 is being felt across the ride-hailing industry. Lyft, Uber\u2019s main rival, recently announced that it would be  laying off nearly 1,000 employees, or about 17 percent of its workforce. Careem, Uber\u2019s Middle Eastern subsidiary, slashed headcount by more than 30 percent and suspended its bus transport app.\n In the March call, Khosrowshahi said the company modeled \u201can extreme edge case\u201d in which trip volume plummeted 80 percent. Even in that dire circumstance \u2014 which has since come to pass \u2014 Uber would still end the year with $4 billion in unrestricted cash, plus $2 billion in revolving credit.\n But in his email to employees, Khosrowshahi said he hoped the worst was behind them.\n \u201cHaving learned my own personal lesson about the unpredictability of the world from the punch-in-the-gut called COVID-19, I will not make any claims with absolute certainty regarding our future,\u201d he wrote. \u201cI will tell you, however, that we are making really, really hard choices now, so that we can say our goodbyes, have as much clarity as we can, move forward, and start to build again with confidence.\u201d", "posttime": "2020-06-03 02:56:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65b0\u51a0,latest,\u4f18\u6b65", "title": "\u4f18\u6b65\u5728\u65b0\u51a0\u80ba\u708e\u542f\u53d1\u7684\u6700\u65b0\u4e00\u8f6e\u88c1\u5458\u4e2d\u518d\u88c1\u54583000\u4eba", "title_en": "Uber lays off 3k more employees in latest round of Covid-19-inspired cuts", "transed": 1, "url": "https://www.theverge.com/2020/5/18/21262337/uber-layoff-3000-employees-covid-19-coronavirus", "via": "", "real_tags": ["\u65b0\u51a0", "latest", "\u4f18\u6b65"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004881, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e5f\u8bb8\u6211\u53ea\u662f\u5728\u6b64\u4e4b\u524d\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u4f46\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u5de6\u53f3\uff0c\u56f4\u7ed5NIX\u5305\u7ba1\u7406\u5668\u7684\u8ba8\u8bba\u4f3c\u4e4e\u6709\u6240\u589e\u52a0\u3002\u8fd9\u4e5f\u662f\u8ba9\u6211\u6700\u7ec8\u5c1d\u8bd5\u7684\u539f\u56e0\uff0c\u6211\u5bf9\u7ed3\u679c\u975e\u5e38\u6ee1\u610f\uff0c\u5c3d\u7ba1\u9053\u8def\u6709\u70b9\u98a0\u7c38\u3002\n\u6211\u4e0d\u76f8\u4fe1\u6211\u662f\u552f\u4e00\u4e00\u4e2a\u63d0\u5230\u6587\u6863\u7f3a\u5c11\u4e00\u70b9\u5b8c\u6210\u7684\u4eba\u3002\u6211\u4e2a\u4eba\u53d1\u73b0\uff0c\u5c3c\u514b\u65af\u5141\u8bb8\u4f60\u505a\u7684\u4e8b\u60c5\u592a\u591a\u4e86\uff0c\u6ca1\u6709\u4e24\u4e2a\u4eba\u505a\u4e8b\u60c5\u7684\u65b9\u5f0f\u662f\u4e00\u6837\u7684\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b98\u65b9\u7684Nix\u624b\u518c\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u6559\u4f60\u4e00\u5927\u5806\u4f60\u5728\u5b9e\u8df5\u4e2d\u4e0d\u4f1a\u7528\u5230\u7684\u4e1c\u897f\u3002\n\u8fd9\u7bc7\u5e16\u5b50\u662f\u4e00\u79cd\u5c1d\u8bd5\uff0c\u8bd5\u56fe\u5e2e\u52a9\u5e73\u6574\u4e00\u4e0b\u9053\u8def\u3002\u6211\u5c06\u5c1d\u8bd5\u505a\u7684\u662f\u81ea\u4e0b\u800c\u4e0a\u5730\u68c0\u67e5NIX\u672f\u8bed\uff0c\u5e76\u5e0c\u671b\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u89e3\u91ca\u6982\u5ff5\u3002\u4f46\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4ece\u6211\u7684\u89d2\u5ea6\u6765\u770b\u7684\uff0c\u4e5f\u4f1a\u5305\u542b\u4e00\u4e9b\u89c2\u70b9\u3002\n\u8bbe\u7f6e\u627f\u8f7d\u53ef\u516c\u5f00\u8bbf\u95ee\u7684Portier\u9879\u76ee\u5e94\u7528\u7a0b\u5e8f\u7684NixOS\u670d\u52a1\u5668\uff0c\u5176\u4e2d\u5305\u62ec\u6253\u5305Rust\u548cPython\u5de5\u5177\u548c\u5e94\u7528\u7a0b\u5e8f\u3002\u6b64\u914d\u7f6e\u662f\u516c\u5171\u7684\uff0c\u53ef\u4ee5\u5728GitHub\u4e0a\u7684Portier/public-Infrastructure\u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u3002\n\u4f7f\u7528nix-darwinand home-manager\u8bbe\u7f6e\u6211\u81ea\u5df1\u7684MacBook\uff0c\u66ff\u6362\u6211\u7684\u79c1\u6709dotfile repo\u3001vimlug\u3001oh-my-zsh\uff0c\u4ee5\u53ca\u6211\u4ee5\u524d\u4f7f\u7528Homebrew\u6240\u505a\u7684\u51e0\u4e4e\u6240\u6709\u4e8b\u60c5\u3002(\u6211\u4ecd\u7136\u4f7f\u7528\u81ea\u5236\u7684\u6728\u6876\u3002)\u3002\n\u4f46\u662f\uff0c\u6211\u4ecd\u7136\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e2a\u65b0\u624b\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u8bb0\u4f4f\u8fd9\u91cc\u53ef\u80fd\u4f1a\u6709\u9519\u8bef\u548c\u4e0d\u51c6\u786e\u7684\u5730\u65b9\uff01\nNIX\u901a\u5e38\u88ab\u79f0\u4e3a\u5305\u7ba1\u7406\u5668\uff0c\u56e0\u4e3a\u4e0e\u5176\u4ed6\u5305\u7ba1\u7406\u5668\u4e00\u6837\uff0c\u5b83\u7684\u76ee\u7684\u662f\u7ba1\u7406\u60a8\u9700\u8981\u7684\u6240\u6709\u5de5\u5177\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u88c5\u3002\u60a8\u4f1a\u53d1\u73b0Nix\u7a0d\u5fae\u6269\u5c55\u4e86\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u5b83\u4e0d\u4ec5\u7528\u4e8e\u7ba1\u7406\u8f6f\u4ef6\u5305\u5b89\u88c5\uff0c\u8fd8\u7528\u4e8e\u66f4\u5c0f\u548c\u66f4\u5927\u7684\u4efb\u52a1\u3002\nNIX\u672c\u8eab\u7684\u4e00\u90e8\u5206\u662fNIX\u8868\u8fbe\u5f0f\u8bed\u8a00\u548c\u4e00\u7ec4\u547d\u4ee4\u884c\u5de5\u5177\u3002\n\u8fd9\u662f\u7528\u6765\u63cf\u8ff0\u5305\u6784\u5efa\u7684\u8bed\u8a00\uff0c\u5b83\u5305\u542b\u4e00\u4e9b\u72ec\u7279\u7684\u8bed\u8a00\u7ed3\u6784\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u540c\u6837\u91cd\u8981\u7684\u662f\u8981\u77e5\u9053\uff0c\u8bed\u8a00\u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f\u4e0d\u53d8\u7684\uff0c\u5e76\u4e14\u8bed\u8a00\u672c\u8eab\u4e0d\u5141\u8bb8\u526f\u4f5c\u7528(\u6240\u6709\u4ee3\u7801\u548c\u51fd\u6570\u90fd\u662f\u7eaf\u7684)\u3002\n\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u4f5c\u4e3a\u7528\u6237\u4f7f\u7528NIX\uff0c80%\u662f\u7528NIX\u8868\u8fbe\u5f0f\u8bed\u8a00\u505a\u6709\u8da3\u7684\u4e8b\u60c5\uff0c20%\u662f\u5305\u7ba1\u7406\u3002\n\u5b57\u9762\u610f\u601d\u662fNIX\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u8868\u8fbe\uff0c\u4f46\u8fd9\u4e2a\u672f\u8bed\u7ecf\u5e38\u5728\u4f20\u9012\u65f6\u4f7f\u7528\u3002\n\u5728NIX\u8bed\u8a00\u4e2d\uff0c\u8868\u8fbe\u5f0f\u662f\u9876\u7ea7\u8bed\u8a00\u7ed3\u6784\u3002(\u4f8b\u5982\uff0c\u4e0eJavaScript/Python\u4e2d\u7684\u8bed\u53e5\u6216C\u548cFriends\u4e2d\u7684\u5b9a\u4e49\u76f8\u53cd\u3002)\u3002\n\u672f\u8bedNIX\u8868\u8fbe\u5f0f\u6709\u65f6\u4e5f\u7528\u4e8e\u63cf\u8ff0\u5305\u542b\u5b83\u4eec\u7684\u6587\u4ef6\uff0c\u5e76\u5e26\u6709.nix\u540e\u7f00\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c.nix\u6587\u4ef6\u4e0d\u662f\u6307&#39\uff1b\u5e93\u6216&#39\uff1b\u6a21\u5757\uff0c\u800c\u662f\u66f4\u591a\u5730\u6307\u7528\u4e8e\u52a0\u8f7d\u5b83\u4eec\u7684\u5185\u7f6e\u51fd\u6570\u4e4b\u540e\u7684&#39\uff1b\u5bfc\u5165&#39\uff1b\u3002(\u4f8b\u5982\uff1a&#34\uff1b\u4ecefoo.nix.&#34\uff1b\u5bfc\u5165Nix\u8868\u8fbe\u5f0f)\u3002\n\u4e00\u7ec4\u540d\u79f0/\u503c\u5bf9\u3002\u975e\u5e38\u7c7b\u4f3c\u4e8ePython\u4e2d\u7684\u5b57\u5178\u6216JavaScript\u4e2d\u7684\u5bf9\u8c61\u3002\n\u867d\u7136\u8fd9\u662f\u4e00\u4e2a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u4f46\u6211\u89c9\u5f97\u6211\u9700\u8981\u7279\u522b\u5f3a\u8c03\u5b83\u7684\u672f\u8bed\uff0c\u56e0\u4e3a\u5728\u6d4f\u89c8\u624b\u518c\u65f6\u5f88\u5bb9\u6613\u9057\u6f0f\u5b83\u3002\nNIX\u8bed\u8a00\u4e2d\u7684\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u503c\uff0c\u672c\u8d28\u4e0a\u7528\u4e8e\u63cf\u8ff0\u6784\u5efa\u6b65\u9aa4\u3002\n\u6d3e\u751f\u662f\u5c5e\u6027\u96c6\u7684\u5b50\u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u8bed\u8a00\u5185\u7f6e\u51fd\u6570\u6d3e\u751f\u521b\u5efa\u3002(\u4e0d\u8fc7\uff0c\u60a8\u6700\u7ec8\u901a\u5e38\u4f1a\u5bf9\u5176\u4f7f\u7528\u5305\u88c5\u5668\u3002)\u3002\n\u6d3e\u751f\u63a5\u53d7\u4e00\u4e9b\u8f93\u5165\u5e76\u4ea7\u751f\u4e00\u4e9b\u8f93\u51fa\u3002\u7531\u4e8e\u5ef6\u8fdf\u6c42\u503c\uff0c\u4ec5\u5f53\u7528NIX\u8bed\u8a00\u6c42\u503c\u5176\u4e2d\u4e00\u4e2a\u8f93\u51fa\u65f6\u624d\u5b9e\u9645\u6784\u5efa\u6d3e\u751f\u3002\u5f53\u7136\uff0c\u8fd9\u4e5f\u4f1a\u5bfc\u81f4\u8f93\u5165\u88ab\u6c42\u503c\uff0c\u800c\u8fd9\u53c8\u53ef\u80fd\u662f\u66f4\u591a\u7684\u6d3e\u751f\u3002\u8fd9\u5c31\u662f\u5305\u5728NIX\u4e2d\u76f8\u4e92\u4f9d\u8d56\u7684\u65b9\u5f0f\u3002\n\u4e3aNIX\u6253\u5305\u65f6\uff0c\u6700\u5e38\u89c1\u7684\u573a\u666f\u662f\u6d3e\u751f\u6709\u4e00\u4e2a\u540d\u4e3aout\u7684\u8f93\u51fa(\u7f3a\u7701\u8bbe\u7f6e)\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u8981\u6253\u5305\u7684\u4efb\u4f55\u5de5\u5177\u7684\u5b89\u88c5\u524d\u7f00\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u5c06\u4ee5$out/bin\u7ed3\u675f\u3002\n\u540c\u6837\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u6d3e\u751f\u4e0d\u4ec5\u7528\u4e8e\u6784\u5efa\u5305\uff0c\u8fd8\u7528\u4e8e\u6784\u5efa\u4efb\u4f55\u4e1c\u897f\uff0c\u4f8b\u5982\u914d\u7f6e\u6587\u4ef6\u3002\n\u6d3e\u751f\u6240\u9700\u7684\u8f93\u5165\u4e4b\u4e00\u662f\u6784\u5efa\u5668\uff0c\u5b83\u8d1f\u8d23\u5b9e\u9645\u751f\u6210\u8f93\u51fa\u3002\u8fd9\u901a\u5e38\u53ea\u662f\u4e00\u4e2ashell\u811a\u672c\u3002\n\u6d3e\u751f{=&#34\uff1bhello-world&#34\uff1b\uff1b=&#34\uff1bx86_64-linux&#34\uff1b\uff1b=[&#34\uff1bout&#34\uff1b]\uff1b#\u9ed8\u8ba4\uff0c\u53ef\u4ee5\u7701\u7565\u3002=&#34\uff1b${pkgs.bash}/bin/bash&#34\uff1b\uff1b=[&#34\uff1b-c&#34\uff1b&#34\uff1becho&#39\uff1bHello World\uff01&#39\uff1b&gt\uff1b$out&#34\uff1b]\uff1b}\u3002\n\u4e3a\u6784\u5efa\u5668\u5206\u914d\u4e86\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u4e00\u4e9b\u8f93\u51fa\u8def\u5f84\uff0c\u6bcf\u4e2a\u58f0\u660e\u7684\u8f93\u51fa\u5bf9\u5e94\u4e00\u4e2a\u8def\u5f84\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u6709out\uff0c\u7136\u540e\u8be5\u8f93\u51fa\u7684\u8def\u5f84\u5728$out\u73af\u5883\u53d8\u91cf\u4e2d\u53ef\u7528\u3002\u6784\u5efa\u5668\u53ef\u4ee5\u5728\u90a3\u91cc\u521b\u5efa\u76ee\u5f55\uff0c\u4f46\u4e5f\u53ef\u4ee5\u53ea\u5199\u5165\u5355\u4e2a\u6587\u4ef6\u3002\n\u901a\u8fc7\u5185\u5bb9\u6563\u5217\u63d0\u524d\u77e5\u9053\u5176\u8f93\u51fa\u7684\u6d3e\u751f\u3002\n\u5982\u679c\u6253\u5305\u7684\u57fa\u672c\u6b65\u9aa4\u662f\u4e0b\u8f7d\u60a8\u8981\u6253\u5305\u7684\u4efb\u4f55\u5de5\u5177\u7684\u6e90\u4ee3\u7801\uff0c\u90a3\u5c31\u662f\u4e00\u79cd\u3002\u5728NIX\u4e2d\uff0c\u8fd9\u4e9b\u6b65\u9aa4\u53ea\u662f\u66f4\u591a\u7684\u6d3e\u751f\uff0c\u7531FetChurl\u7b49\u5305\u88c5\u5668\u51fd\u6570\u521b\u5efa\u3002\n\u5728\u6ca1\u6709\u4efb\u4f55\u9a8c\u8bc1\u7684\u60c5\u51b5\u4e0b\u7b80\u5355\u5730\u83b7\u53d6URL\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3aURL\u7684\u5185\u5bb9\u53ef\u80fd\u4f1a\u66f4\u6539\uff0c\u4ece\u800c\u7834\u574fNix\u8bd5\u56fe\u5b9e\u73b0\u7684\u4e0d\u53ef\u53d8\u7684\u6784\u5efa\u3002\u66f4\u4e0d\u7528\u8bf4\uff1a\u4e0d\u9a8c\u8bc1\u4e0b\u8f7d\u7684\u5305\u7ba1\u7406\u5668\u5c06\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u5b89\u5168\u98ce\u9669\u3002\nNIX\u901a\u8fc7\u6dfb\u52a0\u5185\u5bb9\u6563\u5217\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u5c31\u662f\u56fa\u5b9a\u8f93\u51fa\u6240\u6307\u7684\u5185\u5bb9\u6563\u5217\u3002\u8fd9\u770b\u8d77\u6765\u50cf\u662f\uff1a\n(\u8fd9\u5c06\u8c03\u7528\u51fd\u6570FETCHULL\uff0c\u5e76\u5c06\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u5176\u53c2\u6570\u3002FETFLULL\u7684\u8fd4\u56de\u503c\u662f\u6d3e\u751f\u7684\u3002)\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u6d3e\u751f\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u4ea7\u751f\u8f93\u51fa\uff0c\u4f46\u662f\u8fd9\u4e9b\u8f93\u51fa\u5728NIX\u8bed\u8a00\u4e2d\u4e5f\u662f\u4e0d\u53d8\u7684\u503c\u3002\u8fd9\u4e9b\u503c\u53ea\u662f\u4ee5\u4e0b\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u8def\u5f84\uff1a\nNIX\u5728\u8bc4\u4f30\u5b8c\u6240\u6709\u8f93\u5165\u4e4b\u540e\uff0c\u751a\u81f3\u5728\u6784\u5efa\u5668\u5f00\u59cb\u8fd0\u884c\u4e4b\u524d\u5c31\u786e\u5b9a\u4e86\u8fd9\u4e9b\u8def\u5f84\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u9762\u7684\u6784\u5efa\u5668\u811a\u672c\u4e2d\u7684$out\u53d8\u91cf\u5df2\u7ecf\u662f\u6700\u7ec8\u7684/nix/store\u8def\u5f84\u3002\n\u4e00\u65e6\u8bc4\u4f30\uff0c\u8def\u5f84\u4e2d\u7684\u6563\u5217\u5c31\u662f\u6240\u6709\u8f93\u5165\u7684\u5185\u5bb9\u6563\u5217\u3002\u8fd9\u610f\u5473\u7740\u6563\u5217\u4e0d\u4ec5\u5305\u542b\u6240\u4f7f\u7528\u7684\u4f9d\u8d56\u9879\u548c\u7248\u672c\uff0c\u8fd8\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u4f9d\u8d56\u9879\u7684\u7279\u5b9a\u6784\u5efa\u3002\u4f8b\u5982\uff0c\u5373\u4f7f\u53ea\u6709\u7528\u4e8e\u6784\u5efa\u5305\u7684\u7f16\u8bd1\u5668\u6709\u8f83\u5c0f\u7684\u7248\u672c\u63d0\u5347\uff0c\u5b83\u4e5f\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u5305\u5c31\u4f7f\u7528\u5b8c\u6574\u7684/nix/store\u8def\u5f84\u5f15\u7528\u4f9d\u8d56\u9879\u3002NIX\u5b9e\u9645\u4e0a\u4e0d\u9057\u4f59\u529b\u5730\u4fee\u8865\u4e0a\u6e38\u5de5\u5177\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u4ee5\u4fbf\u5c06\u5176\u5e94\u7528\u5230\u6240\u6709\u5730\u65b9\u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5728NixOS\u7cfb\u7edf\u4e0a\u8fd0\u884c\u8bf8\u5982ldd$(\u5176\u4e2dbash)\u4e4b\u7c7b\u7684\u547d\u4ee4\uff0c\u60a8\u53ef\u4ee5\u5728\u5171\u4eab\u5e93\u4e2d\u770b\u5230\u8fd9\u4e00\u70b9\uff1a\nlinux-vdso.so.1(0x00007fffc547e000)libreadline.so.7=&gt\uff1b/nix/store/ms1ris36xzyx9rzyss4h7pir759adc2d-readline-7.0p5/lib/libreadline.so.7(0x000071e760ba4000)libhistory.so.7=&gt\uff1b/nix/store/ms1ris36xzyx9rzyss4h7pir759adc2d-readline-7.0p5/lib/libhistory.so.7(0x000071e760b97000)libncursesw.so.6=&gt\uff1b/nix/store/kpw4kmc74djprg3bjc5rxblij46jdmnf-ncurses-6.1-20190112/lib/libncursesw.so.6(0x000071e760b26000)libdl.so.2=&gt\uff1b/nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib/libdl.so.2(0x000071e760b21000)libc.so.6=&gt\uff1b/nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib/libc.so.6(0x000071e760962000)/nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib/ld-linux-x86-64.so.2=&gt\uff1b/nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib64/ld-linux-x86-64.so.2(0x000071e760bf4000)\u3002\n\u8bed\u8a00\u4e2d\u7684\u4e0d\u53ef\u53d8\u503c\u548c/nix/store\u4e2d\u7684\u4e0d\u53ef\u53d8\u6587\u4ef6\u4e4b\u95f4\u7684\u8fd9\u79cd\u5339\u914d\u4f7fNIX\u80fd\u591f\u7cbe\u786e\u5730\u63cf\u8ff0\u5305\u7684\u975e\u5e38\u5177\u4f53\u7684\u6784\u5efa\uff0c\u751a\u81f3\u6574\u4e2a\u7cfb\u7edf\uff0c\u5305\u62ec\u5b83\u7684\u6240\u6709\u4f9d\u8d56\u9879\u3002\u5b83\u8fd8\u81ea\u7136\u5730\u63d0\u4f9b\u4e86\u53ef\u91cd\u73b0\u7684\u6784\u5efa\u3002\n\u8fd9\u4e9b\u53ea\u662f\u6258\u7ba1Nix\u53ef\u4ee5\u4e0b\u8f7d\u5e76\u76f4\u63a5\u590d\u5236\u5230/nix/store\u7684\u9884\u7f6e\u6d3e\u751f\u8f93\u51fa\u3002\u5bf9\u4e8e\u50cfglibc\u6216GCC\u8fd9\u6837\u6784\u5efa\u6210\u672c\u9ad8\u6602\u7684\u5927\u578b\u8f6f\u4ef6\u5305\u6765\u8bf4\u5c24\u5176\u6709\u7528\uff0c\u4f46\u662f\u60a8\u4f1a\u53d1\u73b0\u5b98\u65b9\u6253\u5305\u7684\u5305\u4e2d\u53ef\u80fd\u670990%\u4ee5\u4e0a\u90fd\u6709\u53ef\u7528\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u4e00\u7ec4\u53ef\u4f9b\u7528\u6237\u4f7f\u7528\u7684\u8f6f\u4ef6\u5305\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5728shell\u4e2d\u6b63\u5e38\u4f7f\u7528\u3002\u6709\u65f6\u4e5f\u79f0\u4e3a\u7528\u6237\u73af\u5883\u3002\n\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528NIX\u9644\u5e26\u7684nix-env\u5de5\u5177\u8fdb\u884c\u7ba1\u7406\uff0c\u4f46\u662f\u8bb8\u591aNIX\u7528\u6237\u9009\u62e9\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u3002(\u50cfNixOS\u3001nix-Darwin\u6216home-manager\uff0c\u56e0\u4e3a\u5b83\u4eec\u5141\u8bb8\u60a8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\u6027\u5730\u5199\u51fa\u6240\u9700\u7684\u5305\u3002)\u3002\n\u7528\u6237\u7684shell\u8def\u5f84\u4e2d\u6709$HOME/.nix-profile/bin\u3002\u7136\u540e\uff0c\u6700\u7ec8\u7684\u7528\u6237\u73af\u5883\u76ee\u5f55\u5305\u542b\u6240\u6709\u5b89\u88c5\u7684\u8f6f\u4ef6\u5305\u7684\u7ec4\u5408\u76ee\u5f55\u6811\u3002\n\u7f16\u53f7\u7b26\u53f7\u94fe\u63a5\u7f16\u7801&#39\uff1b\u4ee3&#39\uff1b\u3002\u8fd9\u6837\uff0c\u53ea\u9700\u5207\u6362\u7b26\u53f7\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5207\u6362\u56de\u4ee5\u524d\u7684\u72b6\u6001\u3002(NIX-ENV-G&lt\uff1bNUM&gt\uff1b)\u3002\n\u540c\u6837\uff0c\u5728NixOS\u4e0a\uff0c\u60a8\u4f1a\u53d1\u73b0\u6709\u4e00\u4e2a\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\uff0c\u5176\u4e2d\u5b89\u88c5\u4e86\u6240\u6709\u8f6f\u4ef6\u5305\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u7cfb\u7edf\u8303\u56f4\u5185/\u5bf9\u6240\u6709\u7528\u6237\u4f7f\u7528\u3002\n\u5f53\u4f60\u7ee7\u7eed\u4f7f\u7528Nix\u65f6\uff0c\u5b83\u5c06\u7ee7\u7eed\u5728\u5546\u5e97\u4e2d\u5efa\u7acb\u6587\u4ef6\uff0c\u5e76\u7ee7\u7eed\u5efa\u7acb\u8001\u4e00\u4ee3\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u8fd9\u4e9b\u9700\u8981\u901a\u8fc7nix-store--gc\u6216\u5176\u5305\u88c5\u5668nix-Collect-\u5783\u573e\u6e05\u7406\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u4ee5\u4e00\u5b9a\u7684\u95f4\u9694(\u901a\u5e38\u662f\u6bcf\u5929)\u8fd0\u884c\u5176\u4e2d\u4e00\u4e2a\u6765\u5b9e\u73b0\u81ea\u52a8\u5316\u3002\n\u8fd9\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\uff1aNIX\u626b\u63cf/nix/var/nix\u4e2d\u7684\u7b26\u53f7\u94fe\u63a5\uff0c\u5e76\u5220\u9664\u4e0d\u518d\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u7b26\u53f7\u94fe\u63a5\u8bbf\u95ee\u7684\u4efb\u4f55\u5b58\u50a8\u9879\u3002\u8be5\u76ee\u5f55\u5305\u542bProfiles\u5b50\u76ee\u5f55\uff0c\u4f46\u4e5f\u5305\u542b\u4e00\u4e2agcroots\u5b50\u76ee\u5f55\uff0c\u8be5\u76ee\u5f55\u53ef\u7531\u6784\u5efa\u5728Nix\u4e4b\u4e0a\u7684\u5de5\u5177\u4f7f\u7528\u3002\u6240\u6709\u8fd9\u4e9b\u7b26\u53f7\u94fe\u63a5\u90fd\u79f0\u4e3a\u5783\u573e\u6536\u96c6\u6839\u6216GC\u6839\u3002\n\u4ece\u5916\u90e8\u6e90\u83b7\u53d6\u7684NIX\u8868\u8fbe\u5f0f\u7684\u96c6\u5408\u3002\u53ef\u4e0e\u5176\u4ed6\u5305\u7ba1\u7406\u5668\u4e2d\u7684\u5305\u6ce8\u518c\u8868/\u5b58\u50a8\u5e93\u76f8\u5ab2\u7f8e\u3002\nNIX\u901a\u9053\u7531NIX\u9644\u5e26\u7684NIX\u901a\u9053\u5de5\u5177\u7ba1\u7406\u3002\u6b64\u5de5\u5177\u53ea\u9700\u4e0b\u8f7d\u5e76\u89e3\u538b\u7f29tarball\uff0c\u5b83\u5fc5\u987b\u5305\u542b\u8981\u5bfc\u5165\u7684default.nix\u3002\n\u901a\u5e38\uff0c\u60a8\u4f1a\u53d1\u73b0\u9891\u9053\u662f\u76f4\u63a5\u4eceGitHub\u5b58\u50a8\u5e93\u4e2d\u63d0\u53d6\u7684\uff0c\u4f7f\u7528\u7279\u6b8a\u7684GitHub URL\u4ece\u4e3b\u5206\u652f\u4e0b\u8f7dtarball\u3002\u5373\u4f7f\u662f\u5b98\u65b9\u7684Nixpkgs\u9891\u9053\u4e5f\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff0c\u5c3d\u7ba1\u6807\u51c6\u7684Nix\u5b89\u88c5\u4f7f\u7528\u7684\u662fnixos.org\u955c\u50cf\u3002\nNIX-CHANNEL\u5de5\u5177\u91cd\u590d\u4f7f\u7528\u8f6e\u5ed3\u529f\u80fd\u3002\u6bcf\u4e2a\u7528\u6237\u7684\u7b26\u53f7\u94fe\u63a5\u94fe\u53c8\u4e00\u6b21\u51fa\u73b0\u4e86\uff1a\n\u5728\u6700\u7ec8\u7684\u7528\u6237\u73af\u5883\u76ee\u5f55\u4e2d\uff0c\u60a8\u5c06\u6309\u540d\u79f0\u627e\u5230\u6bcf\u4e2a\u9891\u9053\u7684\u7b26\u53f7\u94fe\u63a5\uff0c\u6307\u5411\u5b83\u4eec\u63d0\u53d6\u7684\u5185\u5bb9\u3002\n\u7c7b\u4f3c\u4e8eshell\u4e2d\u7684\u8def\u5f84\uff0c\u4f46\u7528\u4e8eNix\u8bed\u8a00\u5bfc\u5165\u3002\u4ee5\u5206\u53f7\u5206\u9694\u7684\u641c\u7d22\u8def\u5f84\u5217\u8868\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNIX_PATH\u81f3\u5c11\u5305\u542b/nix/var/nix/profile/per-user/root/channel\uff0c\u8fd9\u610f\u5473\u7740\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528root\u6ce8\u518c\u7684\u9891\u9053\u3002(\u8fd9\u6837\uff0croot\u7528\u6237\u8d1f\u8d23\u7ba1\u7406\u7cfb\u7edf\u4e0a\u7684nixpkgs\u7684\u4e3b\u526f\u672c\u3002)\u3002\n\u7136\u540e\u641c\u7d22nix_path\u4e2d\u7684\u6bcf\u4e2a\u76ee\u5f55\u4ee5\u67e5\u627enixpkgs\uff0c\u5e76\u4f7f\u7528\u7b2c\u4e00\u4e2a\u547d\u4e2d\u3002\n\u5f53\u7136\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u4f46\u6700\u5e38\u88ab\u50cfNixOS\u8fd9\u6837\u7684\u7cfb\u7edf\u7528\u6765\u5bf9\u914d\u7f6e\u4f4d\u7f6e\u8fdb\u884c\u7f16\u7801\uff1a\nNIX\u5305\u7684\u5b98\u65b9\u96c6\u5408\u3002Fresh Nix\u5b89\u88c5\u5c06\u6709\u4e00\u4e2a\u9488\u5bf9Nixpkgs\u7684\u901a\u9053\u8bbe\u7f6e\uff0c\u901a\u5e38\u4f4d\u4e8eroot\u7528\u6237\u5e10\u6237\u4e2d\u3002\n\u624b\u52a8\u5bfc\u5165\u65f6\uff0c\u60a8\u5c06\u83b7\u5f97\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u5305\u542b\u53ef\u9009\u914d\u7f6e\u7684\u5c5e\u6027\u96c6\u3002\u4f8b\u5982\uff0c\u6b64\u914d\u7f6e\u7528\u4e8e\u6253\u5f00/\u5173\u95ed\u975e\u514d\u8d39\u5957\u9910\u3002\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5305\u542b\u6240\u6709\u53ef\u7528\u5305\u7684\u5c5e\u6027\u96c6\u3002(\u61d2\u60f0\u7684\u8bc4\u4f30\u8ba9\u8fd9\u53d8\u5f97\u5f88\u4fbf\u5b9c\u3002)\u3002\n\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u5fc5\u624b\u52a8\u5bfc\u5165Nixpkg\uff0c\u56e0\u4e3a\u5b83\u662f\u5728\u5176\u4ed6\u5730\u65b9\u914d\u7f6e\u7684\u3002\u67e5\u627e\u540d\u4e3apkgs\u7684\u53c2\u6570\u6216\u53d8\u91cf\uff0c\u5b83\u5c06\u5305\u542b\u5df2\u914d\u7f6e\u7684Nixpkgs\u3002\nNixpkgs\u8fd8\u7528\u4f5cNix\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u3002Nix\u8bed\u8a00\u672c\u8eab\u6709\u4e00\u4e9b\u5185\u7f6e\u51fd\u6570\uff0c\u4f46\u662fNixpkgs\u5728lib\u5c5e\u6027\u4e2d\u63d0\u4f9b\u4e86\u8bb8\u591a\u6709\u7528\u7684\u6269\u5c55\u3002\n\u8fd9\u4e9b\u662f\u81ea\u5b9a\u4e49Nixpkgs\u7684\u65b9\u6cd5\u3002\u8986\u76d6\u662f\u5f53\u524d\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u800cFLACKS\u662f\u4e00\u79cd\u65b0\u65b9\u6cd5\uff0c\u5176\u5b9e\u73b0\u5728\u64b0\u5199\u672c\u6587\u65f6\u4ecd\u5904\u4e8e\u5b9e\u9a8c\u9636\u6bb5\u3002\n\u901a\u5e38\uff0c\u8fd9\u4e9b\u5141\u8bb8\u6dfb\u52a0\u65b0\u5305\u6216\u81ea\u5b9a\u4e49\u73b0\u6709\u5305\u3002\u8981\u4f7f\u7528\u7684\u8986\u76d6\u96c6\u662f\u63d0\u4f9b\u7ed9Nixpkgs\u5de5\u5382\u51fd\u6570\u7684\u914d\u7f6e\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u6709\u66f4\u591a\u65b9\u6cd5\u53ef\u4ee5\u8bbe\u7f6e\u5b83\u3002\n\u6b64\u5b88\u62a4\u7a0b\u5e8f\u4ee5root\u7528\u6237\u8eab\u4efd\u8fd0\u884c\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u8ba1\u7b97Nix\u8bed\u8a00\u4ee3\u7801\u3002\u4f46\u662f\uff0c\u5b83\u786e\u5b9e\u6267\u884c\u5b9e\u9645\u7684\u6d3e\u751f\u6784\u5efa\u3002\u5373\u4f7f\u6784\u5efa\u88ab\u6c99\u7bb1\u4fdd\u62a4\uff0c\u901a\u5e38\u53ea\u6709\u4e00\u7ec4\u9009\u5b9a\u7684\u7528\u6237\u88ab\u5141\u8bb8\u5728\u7cfb\u7edf\u4e0a\u4f7f\u7528NIX\u3002\nNixOS\u63a5\u53d7configation.nix\uff0c\u5e76\u4f7f\u7528\u6d3e\u751f\u4e3a\u5b8c\u6574\u7684Linux\u7cfb\u7edf\u751f\u6210\u5b9e\u9645\u914d\u7f6e\u3002\u8fc7\u5ea6\u7b80\u5316\u540e\uff0c\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a/etc\u7684\u5927\u578b\u6784\u5efa\u6b65\u9aa4\u3002\u6b64\u6784\u5efa\u6b65\u9aa4\u4f1a\u81ea\u52a8\u5f15\u5165\u5b9e\u73b0\u7cfb\u7edf\u914d\u7f6e\u6240\u9700\u7684\u4efb\u4f55\u5305\uff0c\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u4f9d\u8d56\u9879\u4e00\u6837\u3002\n\u6700\u597d\u5c06configation.nix\u7684\u5904\u7406\u770b\u4f5c\u662f\u5728Nix\u5305\u6784\u5efa\u4e4b\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u5168\u65b0\u7684\u5c42\uff0c\u8fd9\u5f15\u5165\u4e86\u6240\u6709\u65b0\u6982\u5ff5\u3002\u4f46\u662f\u8fd9\u4e2a\u65b0\u7684\u5c42\u53ef\u4ee5\u4f7f\u7528\u548c\u4fee\u6539\u5305\u88c5\u6784\u5efa\u7684\u8f83\u4f4e\u5c42\u3002\n\u8fd9\u91cc\u770b\u4e0d\u5230\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u94fe\u8df3\u8fc7\u4e86\u4e00\u4e2a\u6b65\u9aa4\uff0c\u4f46\u662f/nix/store\u4e2d\u7684\u8fd9\u4e2a\u5185\u7f6e\u5b9e\u9645\u4e0a\u662f\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\u7684\u4e00\u90e8\u5206\u3002\u56e0\u4e3a\u5b83\u4f7f\u7528\u4e0b\u9762\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6240\u4ee5\u5b83\u6709\u53ef\u4ee5\u56de\u6eda\u5230\u7684\u5c42\u4ee3\u3002(NIXOS-REBUILD\u5f00\u5173--\u56de\u6eda)\u3002\nNixOS\u8fd8\u53ef\u4ee5\u4e3a\u7cfb\u7edf\u4e0a\u7684\u5355\u4e2a\u7528\u6237\u7ba1\u7406\u8f6f\u4ef6\u5305\u3002\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u7684\u5de5\u4f5c\u539f\u7406\u6709\u70b9\u7c7b\u4f3c\u4e8enix-env\u914d\u7f6e\u6587\u4ef6\uff0c\u4f46\u662f\u5b83\u4eec\u5206\u522b\u4f4d\u4e8e/etc/profile\u4e2d\u3002\n\u81f3\u5173\u91cd\u8981\u7684\u662f\uff0cNixpkgs\u4e2d\u7684\u8f6f\u4ef6\u5305\u53ea\u662f\u8f6f\u4ef6\u7684\u6784\u5efa\u7248\u672c\uff0c\u5e76\u4e14\u4e0d\u5305\u542bsystemd\u5355\u5143\u6587\u4ef6\u3002\u8fd9\u5c31\u662f\u6a21\u5757\u7684\u7528\u6b66\u4e4b\u5730\u3002\n\u6a21\u5757\u662f\u5728\u5904\u7406NixOS configuration ation.nix\u65f6\u52a0\u8f7d\u7684NIX\u8868\u8fbe\u5f0f\uff0c\u5e76\u63d0\u4f9b\u65b0\u7684\u9009\u9879\u3002NixOS\u9884\u52a0\u8f7d\u7684\u6807\u51c6\u6a21\u5757\u901a\u5e38\u6709\u4e00\u4e2a\u542f\u7528\u9009\u9879\u6765\u6fc0\u6d3b\u5b83\u4eec\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528Imports=[.]\u52a0\u8f7d\u81ea\u5b9a\u4e49\u6a21\u5757\u3002\u5728\u914d\u7f6e\u4e2d\u5217\u51fa\u3002(\u4e0d\u662f\u8bed\u8a00\u7ea7\u5bfc\u5165\u3002)\n\u542f\u7528\u540e\uff0c\u6a21\u5757\u53ef\u4ee5\u4fee\u6539NixOS\u914d\u7f6e\u7684\u5404\u4e2a\u90e8\u5206\u4ee5\u53ca\u60a8\u81ea\u5df1\u7684configation.nix\uff0c\u4f8b\u5982\u521b\u5efa/etc\u6587\u4ef6\u548c\u6dfb\u52a0\u65b0\u7684systemd\u5355\u5143\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u901a\u5e38\u4f1a\u62c9\u8fdb\u5305\u88f9\u3002\u4f8b\u5982\uff0cNginx\u6a21\u5757\u62c9\u5165Nginx\u5305\uff0c\u5e76\u521b\u5efa\u5fc5\u8981\u7684systemd\u670d\u52a1\u5355\u5143\u3002\n(\u60a8\u4f1a\u53d1\u73b0home-manager\u548cnix-darwin(\u7a0d\u540e\u8ba8\u8bba)\u4e5f\u4f7f\u7528\u6a21\u5757\u6982\u5ff5\uff0c\u4f46\u8be5\u4ee3\u7801\u4e0d\u5728Nixpkgs\u4e2d\u3002)\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u4e86\u6784\u5efa\u65f6\u6982\u5ff5\u3002\u4f8b\u5982\uff0cNix\u4e4b\u4e0a\u7684NixOS\u5c42\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8fd0\u884c\u65f6\u5143\u7d20\uff0c\u56e0\u4e3a\u670d\u52a1\u9700\u8981\u542f\u52a8/\u505c\u6b62\u3002NixOS\u4f7f\u7528\u6fc0\u6d3b\u8fd9\u4e2a\u672f\u8bed\u6765\u8868\u793anixos-rebuild\u5f00\u5173\u5728\u5207\u6362\u914d\u7f6e\u65f6\u6240\u505a\u7684\u6240\u6709\u989d\u5916\u7684\u8fd0\u884c\u65f6\u5de5\u4f5c\u3002\n\u5176\u4e2d\u4e00\u90e8\u5206\u662f\u540d\u4e3a\u9010\u5b57\u6fc0\u6d3b\u7684\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\u7684TopLevel\u76ee\u5f55\u4e2d\u627e\u5230\u8be5\u811a\u672c\u3002\u8be5\u811a\u672c\u7531NixOS\u548c\u901a\u8fc7system.activate ationScriptsconfiguration\u9009\u9879\u542f\u7528\u7684\u5404\u79cd\u6a21\u5757\u7ec4\u6210\u3002(\u67e5\u627e\u8be5\u811a\u672c\u7684\u4e00\u79cd\u5feb\u6377\u65b9\u6cd5\u662f\u4f7f\u7528/run/current-system\u7b26\u53f7\u94fe\u63a5\uff0c\u8be5\u7b26\u53f7\u94fe\u63a5\u8fd8\u6307\u5411\u5f53\u524d\u7684systemprofile\u751f\u6210\u3002)\u3002\n\u4e0d\u8fc7\uff0c\u5b9e\u9645\u4e0a\u542f\u52a8/\u505c\u6b62\u670d\u52a1\u662f\u7531\u4e00\u4e9bPerl\u4ee3\u7801\u4f5c\u4e3aNixOS\u5de5\u5177\u7684\u4e00\u90e8\u5206\u6765\u5904\u7406\u7684\u3002\nnix-Darwin\u7684\u7ed3\u6784\u7c7b\u4f3c\u4e8eNixOS\uff1a\u4f7f\u7528Darwin\u914d\u7f6e.nix\uff0c\u7531\u6a21\u5757\u7ec4\u6210\uff0c\u4f7f\u7528\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u6fc0\u6d3b\u6b65\u9aa4\u3002(\u8fbe\u5c14\u6587-\u91cd\u5efa\u4ea4\u6362\u673a)\u3002\nnix-darwin\u4e2d\u7684\u6a21\u5757\u5141\u8bb8\u60a8\u6709\u9009\u62e9\u5730\u63a5\u7ba1\u90e8\u5206MacOS\u914d\u7f6e\uff0c\u6dfb\u52a0\u65b0\u7684\u542f\u52a8\u670d\u52a1\uff0c\u5f53\u7136\u8fd8\u6709\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8981\u542f\u52a8\u5e76\u8fd0\u884cnix-Darwin\uff0c\u60a8\u9996\u5148\u9700\u8981\u6309\u7167\u624b\u518c\u4e2d\u7684\u8bf4\u660e\u8fdb\u884c\u591a\u7528\u6237\u5b89\u88c5\u3002\u4f46\u662fNIX-\u8fbe\u5c14\u6587\u4e4b\u540e\u5c06\u63a5\u7ba1\u8fd9\u4e2a\u88c5\u7f6e\u7684\u7ba1\u7406\uff0c\u5b83\u7684\u6548\u679c\u8981\u597d\u5f97\u591a\u3002\u4e0d\u8fc7\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728MacOS\u4e0a\u8bbe\u7f6eNIX\u65f6\u51fa\u9519\u3002\u5feb\u901f\u63d0\u793a\uff1a\u4e86\u89e3\u5982\u4f55\u4e3a/nix\u8bbe\u7f6eAPFS\u5377\uff0c\u5173\u95ed\u8be5\u5377\u7684Spotlight\u7d22\u5f15\uff0c\u5e76\u6ce8\u610f\u5b89\u88c5\u7a0b\u5e8f\u53d1\u51fa\u7684\u6709\u5173/etc\u4e2d\u672a\u89e6\u53ca\u7684\u6587\u4ef6\u7684\u8b66\u544a\u3002(\u8fd9\u4e9b\u9700\u8981\u7279\u522b\u6ce8\u610f\u3002)\n\u540c\u6837\uff0c\u5176\u7ed3\u6784\u7c7b\u4f3c\u4e8eNixOS\uff1a\u4f7f\u7528home.nix\uff0c\u7531\u6a21\u5757\u7ec4\u6210\uff0c\u4f7f\u7528\u4e3b\u7ba1\u7406\u5668\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u6fc0\u6d3b\u6b65\u9aa4\u3002(\u5bb6\u5ead\u7ba1\u7406\u5458\u4ea4\u6362\u673a)\u3002\nhome-manager\u4e2d\u7684\u6a21\u5757\u5141\u8bb8\u60a8\u6709\u9009\u62e9\u5730\u63a5\u7ba1git\u3001zsh\u3001vim\u3001Firefox\u7b49\u5de5\u5177\u7684\u914d\u7f6e\uff0c\u4ec5\u4e3e\u51e0\u4f8b\uff0c\u4f46\u5217\u8868\u5f88\u957f\u3002Home-Manager\u8fd8\u53ef\u4ee5\u4e3a\u60a8\u8bbe\u7f6esystemd\u7528\u6237\u670d\u52a1\uff0c\u5f53\u7136\u8fd8\u53ef\u4ee5\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002\nHome-Manager\u540c\u65f6\u652f\u6301Linux\u548cMacOS\uff0c\u5c3d\u7ba1\u5728\u64b0\u5199\u672c\u6587\u65f6\u5bf9MacOS\u7684\u652f\u6301\u8fd8\u4e0d\u5b8c\u5168\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8bb8\u591a\u542f\u52a8\u7528\u6237\u670d\u52a1\u7684\u6a21\u5757\u8fd8\u4e0d\u77e5\u9053\u542f\u52a8\u3002\n\u5728\u5355\u7528\u6237\u7cfb\u7edf\u4e0a\u771f\u6b63\u6709\u7528\u7684\u662f\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u5bb6\u5ead\u7ba1\u7406\u5668\u914d\u7f6e\u5d4c\u5165\u5230\u60a8\u7684NixOS\u6216nix-Darwin\u914d\u7f6e\u4e2d\u3002\u8fd9\u4e5f\u7ed3\u5408\u4e86\u6fc0\u6d3b\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u6839\u672c\u4e0d\u5fc5\u89e6\u6478\u4e3b\u7ba1\u7406\u5668\u547d\u4ee4\u884c\u5de5\u5177\u3002\n\u6211\u60f3\u8981\u6709\u4e00\u4e2a\u7ae0\u8282\u6765\u8ba8\u8bbaNIX\u5b98\u65b9\u624b\u518c\u4e2d\u63d0\u5230\u7684(\u975eNixOS)\u5b89\u88c5\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e00\u4ef6\u4e8b\uff0c\u4f46\u5b83\u4eec\u662f\u4e0d\u53ef\u9760\u7684\u3002\u5728MacOS\u4e0a\uff0c\u60a8\u5fc5\u987b\u7ecf\u8fc7\u8fd9\u4e9b\u6b65\u9aa4\u624d\u80fd\u5347\u7ea7\u5230nix-Darwin\uff0c\u6211\u76f8\u4fe1\u5728\u5176\u4ed6Linux\u53d1\u884c\u7248\u4e0a\uff0c\u5b83\u4eec\u53ef\u80fd\u662f\u552f\u4e00\u53d7\u652f\u6301\u7684\u65b9\u6cd5\u3002\n\u5176\u4e2d\u4e00\u4e2a\u9009\u9879\u662f\u5355\u7528\u6237nix\u5b89\u88c5\uff0c\u8fd9\u610f\u5473\u7740\u6ca1\u6709nix\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5e76\u4e14/nix\u4e0d\u5c5e\u4e8eroot\u7528\u6237\uff0c\u800c\u5c5e\u4e8e\u666e\u901a\u7528\u6237\u3002\u624b\u518c\u672c\u8eab\u5df2\u7ecf\u5efa\u8bae\u4e0d\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3aNix\u53ef\u4ee5\u5728\u6b64\u8bbe\u7f6e\u4e2d\u6784\u5efa\u6c99\u7bb1\u3002\n\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u591a\u7528\u6237\u5b89\u88c5\uff0c\u5b83\u4ee5root\u8eab\u4efd\u6b63\u786e\u8fd0\u884cnix-daemon\u3002\u4e0d\u8fc7\uff0c\u5b89\u88c5\u7a0b\u5e8f\u505a\u8fd9\u4ef6\u4e8b\u7684\u65b9\u5f0f\u6709\u70b9\u4e00\u6b21\u6027\uff0c\u81f3\u5c11\u5728MacOS\u4e0a\u662f\u8fd9\u6837\u3002\u4e00\u65e6\u5b89\u88c5\uff0c\u5b9e\u9645\u4e0a\u5347\u7ea7Nix\u672c\u8eab\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u975e\u5e38\u624b\u52a8\u4e14\u4ee4\u4eba\u56f0\u60d1\u7684\u8fc7\u7a0b\u3002\n\u8fd9\u91cc\u6709\u5f88\u591a\u4e1c\u897f\u6211\u6839\u672c\u6ca1\u78b0\u8fc7\uff0c\u6bd4\u5982NixOps\u6216\u8fdc\u7a0b\u6784\u5efa\u3002\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u81ea\u5df1\u8fd8\u6ca1\u6709\u7528\u8fc7\u5b83\u4eec\uff0c\u6211\u60f3\u77e5\u9053\u6211\u4f1a\u4e0d\u4f1a\u7528\uff01\u4f46\u5e0c\u671b\u8fd9\u4e5f\u610f\u5473\u7740\u8fd9\u4e2a\u5217\u8868\u662f\u65b0\u7528\u6237\u611f\u5174\u8da3\u7684\u4e00\u4e2a\u66f4\u8212\u9002\u7684\u5b50\u96c6\u3002\n\u6211\u4e2a\u4eba\u53d1\u73b0\u771f\u6b63\u5f3a\u5927\u7684\u662f\u5c06NixOS\u7528\u4e8e\u5177\u6709\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u4e2a\u670d\u52a1\u5668\u3002\u6211\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u5728Debian\u4e0a\u6253\u5305\uff0c\u4f46\u662fNixOS\u6253\u5305\u76f8\u5bf9\u5bb9\u6613\uff0c\u5c3d\u7ba1\u6709\u8bed\u8a00\u5b66\u4e60\u66f2\u7ebf\u3002\u7ed5\u8fc7Debian\u4e0a\u7684\u6253\u5305\u603b\u662f\u8ba9\u6211\u611f\u5230\u7591\u60d1\uff1a&#34\uff1b\u5982\u679c\u65e0\u4eba\u53c2\u4e0e\u7684\u5347\u7ea7\u63a8\u51fa\u4e86\u91cd\u8981\u4f9d\u8d56\u9879(\u5982OpenSSL\u6216Node.js)\u7684\u65b0\u7248\u672c\uff0c\u6211\u5982\u4f55\u81ea\u52a8\u91cd\u65b0\u542f\u52a8\u6211\u7684\u670d\u52a1\uff1f\u6b64\u5916\uff0cNixOS\u4e2d\u7684systemd\u96c6\u6210\u4ee4\u4eba\u60ca\u53f9\uff0c\u4f7f\u81ea\u5b9a\u4e49chroot\u53d8\u5f97\u8f7b\u800c\u6613\u4e3e\u3002\n\u6211\u8ba4\u4e3a\u5bf9\u6211\u6765\u8bf4\uff0cNIX\u6700\u5927\u7684\u969c\u788d\u662fMacOS\u7684\u5b89\u88c5\u8fc7\u7a0b\u3002\u4e5f\u8bb8\u5728\u5176\u4ed6Linux\u53d1\u884c\u7248\u4e0a\u8bd5\u7528NIX\u4e5f\u5b58\u5728\u540c\u6837\u7684\u95ee\u9898\uff1f\u6211\u89c9\u5f97\u5728NixOS\u4e4b\u5916\u7684\u7b2c\u4e00\u6b21\u5f88\u68d2\u7684\u4f53\u9a8c\u53ef\u80fd\u771f\u7684\u6709\u52a9\u4e8e\u57f9\u517b\u66f4\u591a\u7684\u5174\u8da3\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u8ba4\u4e3aNix-Darwin\u5e94\u8be5\u6709\u4e00\u4e2a\u7ec4\u5408\u5b89\u88c5\u7a0b\u5e8f\uff0c\u72ec\u7acb\u5b89\u88c5\u65b9\u6cd5\u5e94\u8be5\u6ce8\u9500\u4e3a\u9ad8\u7ea7\u3002\n\u6211\u7684\u53e6\u4e00\u4e2a\u62b1\u6028\u662f\u9488\u5bf9\u6bcf\u4e2a\u7528\u6237\u7684\u9891\u9053\u7ba1\u7406\u3002\u8fd9\u5f88\u597d\uff0c\u4f46\u662f\u9ed8\u8ba4\u8bbe\u7f6e\u5e94\u8be5\u4e3a\u53ea\u6709\u4e00\u4e2a\u7528\u6237\u7684\u7cfb\u7edf\u91cf\u8eab\u5b9a\u505a\uff0c\u56e0\u4e3a\u6211\u89c9\u5f97\u8fd9\u5c06\u662f\u5927\u591a\u6570\u5b89\u88c5\uff1f\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u5728Mac\u4e0a\u5c06Nixpkgs\u9891\u9053\u79fb\u5230\u4e86\u6211\u81ea\u5df1\u7684\u7528\u6237\uff0c\u800c\u4e0d\u662froot\u7528\u6237\u3002\u4e0d\u5f97\u4e0d\u5207\u6362\u5230root\u6765\u5347\u7ea7nix\u548cnixpkgs\u771f\u7684\u5f88\u70e6\u4eba\u3002\u73b0\u5728\uff0c\u6211\u6839\u672c\u4e0d\u9700\u8981sudo\uff0c\u800c\u4e14\u53ea\u6709\u8fbe\u5c14\u6587-rebuild\u5f00\u5173\u4f1a\u5411\u6211\u7d22\u8981\u5bc6\u7801\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u771f\u8bda\u5730\u5e0c\u671b\u8fd9\u4e00\u5207\u90fd\u4e0d\u4f1a\u8ba9\u4f60\u8fdc\u79bb\u5c3c\u514b\u65af\uff0c\u56e0\u4e3a\u6211\u88ab\u7092\u4f5c\u4e86\u3002\u5c31\u8f6f\u4ef6\u5305\u548c\u7cfb\u7edf\u7ba1\u7406\u800c\u8a00\uff0c\u5b83\u662f\u672a\u6765\u4e3b\u4e49\u7684\u3002\u5728\u6211\u770b\u6765\uff0c\u82b1\u5728\u5b66\u4e60\u4e0a\u7684\u65f6\u95f4\u662f\u503c\u5f97\u7684\uff01", "note_en": "Maybe I just haven&#39;t been paying attention before, but in the last year or so, there seems to have been an increase in discussion around the Nix package manager. This is also what got me to finally try it, and I&#39;m very happy with the results, even if the road is a little bumpy.\n I don&#39;t believe I&#39;m the only one to mention the documentation is lacking a little finish. What I personally find is that there&#39;s just a lot Nix allows you to do, and no two people do things the same way. On top of this, the  official Nix manual may try to teach you a whole bunch of things you won&#39;t be using in practice.\n This post is an attempt to help smooth the road a bit. What I will try to do is go through Nix terminology bottom-up, and hopefully explain concepts that way. But this will be very much from my perspective, and will contain some opinion as well.\n  Setup the NixOS server hosting the publicly accessible applications of the Portier project, which includes packaging Rust and Python tools and applications. The configuration for this is public and can be found in the portier/public-infrarepository on GitHub.\n Setup my own MacBook using  nix-darwinand  home-manager, replacing my private dotfiles repo, vimplug, oh-my-zsh, and almost everything I did with Homebrew before. (I still use homebrew-cask.)\n But, I still consider myself quite new, so do keep in mind there are probably mistakes and inaccuracies here!\n   Nix is often called a package manager, because like other package managers, its intended purposes is to manage installations of all the tools and applications you need. You&#39;ll find Nix stretches this definition a bit, and is used for both smaller and larger tasks than just managing package installation.\n Part of Nix itself are the Nix expression language, and a set of command-line tools.\n   This is the language used to describe package builds, and it contains some unique language constructs to make that work. Also important to know is that all values in the language are immutable, and the language itself does not allow side-effects (all code and functions are &#39;pure&#39;).\n I&#39;d personally argue that working with Nix as a user is 80% doing interesting things with the Nix expression language, and 20% package management.\n   Literally an expression in the Nix language, but a term very often used in passing.\n In the Nix language, expressions are  the top-level language construct. (As opposed to, for example, statements in JavaScript / Python, or definitions in C and friends.)\n The term &#39;Nix expression&#39; is also sometimes used to describe files containing them, with the  .nix suffix. Notably,  .nix files are  not referred to as &#39;libraries&#39; or &#39;modules&#39;, but more often as &#39;imports&#39;, after the built-in function used to load them. (For example: &#34;Import the Nix expression from foo.nix.&#34;)\n  A set of name/value pairs. Very similar to a dictionary in Python or an object in JavaScript.\n  While this is an incredibly basic concept, I felt like I needed to highlight the term for it specifically, because it can be easily missed when skimming ahead through manuals.\n  A special type of value in the Nix language to describe, essentially, a build step.\n Derivations are a subtype of an attribute set, and created using the language built-in function  derivation. (Though, you&#39;ll often end up using a wrapper for it.)\n A derivation takes some inputs and produces some outputs. Because of lazy evaluation, the derivation is only actually built when one of the outputs is evaluated in the Nix language. Of course, this will also cause inputs to be evaluated, which may in turn be more derivations. This is how packages depend on eachother in Nix.\n The most common scenario when packaging for Nix is for a derivation to have a single output called  out (the default), and to use that as the installation prefix for whatever tool you are packaging. So, executables would end up in $out/bin, for example.\n It is also important to note that derivations are not just used to build packages, but anything really, like configuration files for example.\n   One of the required inputs of a derivation is the builder, responsible for actually producing the outputs. This is often simply a shell script.\n  derivation {   =  &#34;hello-world&#34;;   =  &#34;x86_64-linux&#34;;   = [  &#34;out&#34; ];  # This is the default, and can be omitted.   =  &#34; ${pkgs.bash}/bin/bash&#34;;   = [  &#34;-c&#34;  &#34;echo &#39;Hello world!&#39; &gt; $out&#34; ];}\n The builder is assigned some output paths on the filesystem, one for each output declared. Here, we only have  out, and the path for that output is then made available in the  $out environment variable. The builder can create a directory there, but may also just write a single file.\n  A derivation for which the output is known ahead of time, via a content hash.\n One if the basic steps in packaging is to download the source code of whatever tool you are packaging. In Nix these steps are just more derivations, created by wrapper functions like  fetchurl.\n Simply fetching a URL without any verification is a bad idea, because the contents of the URL may change, breaking the immutable builds Nix tries to achieve. Not to mention: a package manager that doesn&#39;t verify downloads would be a huge security risk.\n Nix solves this by adding a content hash, which is what &#39;fixed-output&#39; refers to. This looks like:\n  (This calls the function  fetchurl with an attribute set as its argument. The return value of  fetchurl is a derivation.)\n   So we&#39;ve established derivations produce output on the filesystem, but these outputs are  also immutable values in the Nix language. These values are simply string paths in the format:\n  Nix determines these paths once all inputs have been evaluated, and  beforethe builder even starts running. In fact, the  $out variable in the builder script above is already the final  /nix/store path.\n The hash in the path is a content hash of all inputs, once evaluated. This means the hash encompasses not just what dependencies and versions are used, but the  specific build of all those dependencies. It changes even if only the compiler used to build your package had a minor version bump, for example.\n Whenever possible, packages refer to dependencies using the full  /nix/storepaths. Nix actually goes through lengths to patch various parts of upstream tools to apply this everywhere. For example, you can see this with shared libraries by running something like  ldd $(which bash) on a NixOS system:\n linux-vdso.so.1 (0x00007fffc547e000)libreadline.so.7 =&gt; /nix/store/ms1ris36xzyx9rzyss4h7pir759adc2d-readline-7.0p5/lib/libreadline.so.7 (0x000071e760ba4000)libhistory.so.7 =&gt; /nix/store/ms1ris36xzyx9rzyss4h7pir759adc2d-readline-7.0p5/lib/libhistory.so.7 (0x000071e760b97000)libncursesw.so.6 =&gt; /nix/store/kpw4kmc74djprg3bjc5rxblij46jdmnf-ncurses-6.1-20190112/lib/libncursesw.so.6 (0x000071e760b26000)libdl.so.2 =&gt; /nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib/libdl.so.2 (0x000071e760b21000)libc.so.6 =&gt; /nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib/libc.so.6 (0x000071e760962000)/nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib/ld-linux-x86-64.so.2 =&gt; /nix/store/9hy6c2hv8lcwc6clnc1p2jf09cs5q9dp-glibc-2.30/lib64/ld-linux-x86-64.so.2 (0x000071e760bf4000)\n    This match between immutable values in the language, and immutable files in /nix/store, is what allows Nix to  precisely describe a very specific build of a package or even complete system, encompassing all its dependencies. It also naturally provides reproducable builds.\n   These simply host prebuilt derivation outputs that Nix can download and copy straight to  /nix/store. Especially useful for large, expensive to build packages like glibc or gcc, but you&#39;ll find probably more than 90% of what&#39;s packaged officially has a binary available.\n  A set of packages to make available to the user, so they can be used normally from a shell. Also sometimes called &#39;user environments&#39;.\n Profiles can be managed with the  nix-env tool included with Nix, but many Nix users opt for different solutions. (Like NixOS, nix-darwin, or home-manager, because they allow you to write out the desired packages declaratively, in a configuration file.)\n   The user has  $HOME/.nix-profile/bin in their shell  PATH. The final user-environment directory then contains a combined directory tree of all packages installed.\n The numbered symlink encodes &#39;generations&#39;. This way, it&#39;s easy to switch back to a previous state, simply by switching the symlink. ( nix-env -G &lt;NUM&gt;)\n Similarly, on NixOS you&#39;ll find there is a  system profile with all packages installed and available system-wide / to all users.\n   As you keep using Nix, it will continue building up files in the store, and continue building up old generations of profiles. These need to be cleaned up via  nix-store --gc or its wrapper  nix-collect-garbage. This can be automated by simply running one of them at an interval (usually daily).\n The process is actually quite simple: Nix scans the symlinks in  /nix/var/nixand deletes any store items no longer reachable through those symlinks. This directory contains the  profiles subdirectory, but also a  gcrootssubdirectory that can be used by tools built on top of Nix. All of these symlinks are called &#39;garbage collection roots&#39; or &#39;GC roots&#39;.\n  Collections of Nix expressions fetched from an external source. Comparable to a package registry / repository in other package managers.\n Nix channels are managed by the  nix-channel tool included with Nix. This tool simply downloads and extracts tarballs, which must contain a  default.nix to be imported.\n Very often, you&#39;ll find channels are pulled directly from a GitHub repository, using the special GitHub URL to download a tarball from the master branch. Even the official Nixpkgs channel can be used this way, though standard Nix installations use a nixos.org mirror.\n The  nix-channel tool reuses the profiles functionality. There&#39;s again a chain of symlinks for each user:\n  In the final  user-environment directory, you&#39;ll find symlinks for each channel by name, pointing to their extracted contents.\n  Like  PATH in a shell, but for Nix language imports. A semi-colon seperated list of search paths.\n By default, NIX_PATH contains at least /nix/var/nix/profiles/per-user/root/channels, which means channels registered by  root are available to everyone. (This way, the root user is responsible for managing the main copy of Nixpkgs on the system.)\n   Each directory in NIX_PATH is then searched in order for  nixpkgs, and the first hit is used.\n   This can be used for any purpose, of course, but is most often used by systems like NixOS to encode the location of configuration:\n   The official collection of Nix packages. Fresh Nix installations will have a channel setup for Nixpkgs, usually in the root user account.\n When manually imported, you get a factory function that takes an attribute set containing optional configuration. This configuration is used to switch on/off non-free packages, for example. The return value of that function is an attribute set containing  all of the available packages. (Lazy evaluation makes this cheap.)\n   But more often than not, you don&#39;t have to import Nixpkgs manually, because it is configured elsewhere. Look for an argument or variable called  pkgs, which will contain an already-configured Nixpkgs.\n Nixpkgs also functions as a standard library for the Nix language. The Nix language itself has some built-in functions, but Nixpkgs provides many useful extensions in the  lib attribute.\n  These are methods to customize Nixpkgs. Overlays is the currently used method, while flakes is new, and its implementation is still experimental at the time of writing.\n In general, these allow adding new packages or customizing existing packages. The set of overlays to use are part of the configuration provided to the Nixpkgs factory function, but there are  more ways to set this.\n   This daemon runs as  root, but does not actually evaluate Nix language code. It does, however, perform the actual derivation builds. Even though builds are sandboxed, usually only a select group of users will be allowed to use Nix on a system.\n   NixOS takes a  configuration.nix, and uses derivations to generate real configuration for a  complete Linux system. Over-simplified, it can be seen as a large build step for  /etc. This build step automatically pulls in any packages it needs to realize your system configuration, just like any other dependency.\n Processing of  configuration.nix is best seen as adding an entire new layer on top of Nix package builds, that introduces all new concepts. But this new layer can use and modify the &#39;lower&#39; layer of package building.\n   Not visible here, because this chain skips a step, but this build in /nix/store is actually part of the  system profile. Because it uses a profile underneath, it has generations you can rollback to. ( nixos-rebuild switch --rollback)\n NixOS can also manage packages for individual users on the system. These work a bit like  nix-env profiles, but live separately in  /etc/profiles.\n   Crucially, packages in Nixpkgs are just builds of software, and don&#39;t include systemd unit files. That&#39;s where modules come in.\n Modules are Nix expressions that are loaded while processing NixOS configuration.nix, and which provide new options. Standard modules preloaded by NixOS often have an  enable option to activate them, and custom modules can be loaded using the  imports = [ ... ] list in configuration. ( Not a language-level  import.)\n When enabled, modules may modify various parts of NixOS configuration alongside your own  configuration.nix, such as creating  /etc files and adding new systemd units. These often pull in packages as a consequence. For example, an Nginx module pulls in the Nginx package, and creates the necessary systemd service unit.\n  (You&#39;ll find home-manager and nix-darwin, discussed later, also use the modules concept, but that code does not live in Nixpkgs.)\n   So far, we&#39;ve only discussed build-time concepts. The NixOS layer on top of Nix also adds a run-time element, because services need to be started/stopped, for example. NixOS uses the term &#39;activation&#39; for all of the additional run-time stuff  nixos-rebuild switch does when switching configuration.\n One part of this is a script called literally  activate, which can be found in toplevel directory of your  system profile. This script is composed by NixOS and various modules that were enabled, through the  system.activationScriptsconfiguration option. (A quick way to find the script is to use the /run/current-system symlink, which also points to the current  systemprofile generation.)\n Actually starting/stopping services is handled by some Perl code as part of NixOS tooling, though.\n   The structure of nix-darwin is similar to NixOS: uses a darwin-configuration.nix, is composed of modules, uses a  system profile, and has an activation step. ( darwin-rebuild switch)\n The modules in nix-darwin allow you to have it selectively take over parts of macOS configuration, add new launchd services, and of course install packages.\n Note that to get up and running with nix-darwin, you first need to do a &#39;multi-user install&#39; as described by the manual. But nix-darwin will afterwards take over management of this installation, which works far better. Though, you probably  will stumble setting up Nix on macOS. Quick tips: figure out how to setup an APFS volume for  /nix, turn off Spotlight indexing for that volume, and heed warnings from the installer about files in  /etc that it didn&#39;t touch. (Those require special attention.)\n   Again, the structure is similar to NixOS: uses a  home.nix, is composed of modules, uses a  home-manager profile, and has an activation step. ( home-manager switch)\n The modules in home-manager allow you to have it selectively take over configuration of tools like git, zsh, vim, firefox, just to name a few, but the list is long. Home-manager can also setup systemd user services for you, and of course install packages.\n Home-manager has support for both Linux and macOS, though the macOS support is not as complete at the time of writing. Notably, many modules that start user services don&#39;t yet know about launchd.\n Really useful on single-user systems is that you can embed your home-manager configuration inside your NixOS or nix-darwin configuration. This also combines activation, meaning you don&#39;t have to touch the  home-manager command-line tool at all.\n  I wanted to have a section to talk about the (non-NixOS) installation methods mentioned in the official Nix manual, because they&#39;re a thing, but they&#39;re wonky. On macOS, you have to go through these to &#39;move up&#39; to nix-darwin, and I believe on other Linux distributions they may be the only supported method.\n One of these options is a single-user Nix install, which means there is no nix-daemon, and  /nix is owned not by  root but by a regular user. This is already recommended against by the manual itself, because Nix can&#39;t sandbox builds in this setup.\n The other option is a multi-user install, which runs  nix-daemon properly as root. The way the installer does this is a bit &#39;one-off&#39;, though, at least on macOS. Once installed, actually upgrading Nix itself becomes a very manual and confusing process.\n  There&#39;s a bunch of stuff I haven&#39;t touched here at all, like NixOps or remote builds. Mainly because I haven&#39;t used them myself yet at all, and I wonder if I ever will! But hopefully that also means this list is a more comfortable subset of things interesting to new users.\n What I personally found really powerful is using NixOS for individual servers with custom applications. I was never able to figure out packaging on Debian, but NixOS packaging is comparatively  easy, despite the language learning curve. Bypassing packaging on Debian always meant I was left wondering: &#34;How do I restart my service automatically if unattended upgrades roll out a new version of an important dependency, like OpenSSL or Node.js?&#34; Also, the systemd integration in NixOS is  amazing, and makes custom chroots a breeze.\n I think the biggest hurdle to Nix for me was really the macOS installation process. Maybe the same problem exists trying out Nix on other Linux distributions? I feel like a great first-time experience outside of NixOS may really help build more interest.\n Specifically, I think  nix-darwin should have a combined installer, and the stand-alone install methods should be written off as &#39;advanced&#39;.\n Another gripe I have is with per-user channel management. It&#39;s fine, but the default should be tailored to systems with just one user, because I feel like that&#39;ll be the majority of installations? Specifically, I moved the Nixpkgs channel to my own user on my Mac, instead of  root. Having to switch to  rootjust to upgrade Nix and Nixpkgs is  really annoying. Now, I don&#39;t  sudo at all, and only  darwin-rebuild switch ever asks for my password.\n Still, I sincerely hope none of this has turned you away from Nix, because I am hyped. As far as package and system management goes, it is futuristic. Time spent learning Nix is time spent well, in my opinion!", "posttime": "2020-06-03 02:40:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nix,terminology", "title": "\u521d\u6765\u4e4d\u5230\u7684NIX\u672f\u8bed\u5165\u95e8\u8bfb\u7269", "title_en": "A Nix terminology primer by a newcomer", "transed": 1, "url": "https://stephank.nl/p/2020-06-01-a-nix-primer-by-a-newcomer.html", "via": "", "real_tags": ["nix"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004879, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "AWK\u5904\u7406\u6d77\u91cf\u6570\u636e\uff1b\u9ad8\u6027\u80fd\u8ba1\u7b97(HPC)\u811a\u672c\u540c\u65f6\u8c03\u7528AWK\u3002\u5728\u52a0\u8102\u673a\u4e0a\u63d0\u4f9b\u5feb\u901f\u4e14\u53ef\u6269\u5c55\u7684\u5185\u5b58\u89e3\u51b3\u65b9\u6848\u3002\n\u5411\u7ec4\u7ec7\u5728\u5de5\u4f5c\u4e2d\u7684\u6570\u636e\u6311\u6218\u5c55\u793a\u6211\u57282018\u5e74\u5f00\u53d1\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6211\u89e3\u51b3\u4e86\u75315\u4e2a\u95ee\u9898\u7ec4\u6210\u7684\u79d1\u5b66\u51fa\u7248\u7269\u6316\u6398\u6311\u6218(\u7b2c4\u9898)\u3002\u6211\u4f7f\u7528\u7ecf\u5178\u7684Unix\u5de5\u5177\u548c\u73b0\u4ee3\u53ef\u4f38\u7f29\u7684HPC\u811a\u672c\u5de5\u5177\u6765\u5236\u5b9a\u89e3\u51b3\u65b9\u6848\u3002\u8be5\u9879\u76ee\u6258\u7ba1\u5728GitHub\u4e0a\u3002\u5927\u7ea6\u670912\u652f\u961f\u4f0d\u53c2\u52a0\u4e86\u6bd4\u8d5b\u3002\n\u963f\u8d21\u56fd\u5bb6\u5b9e\u9a8c\u5ba4\u5f00\u53d1\u7684\u540d\u4e3aSWIFT(\u4e0d\u662fApple SWIFT)\u7684HPC\u811a\u672c\u5de5\u5177\u7528\u4e8e\u5728\u6570\u636e\u96c6\u4e0a\u5e76\u53d1\u8fd0\u884cAwk\u7a0b\u5e8f\uff0c\u4ece\u800c\u4ece\u6839\u672c\u4e0a\u63d0\u9ad8\u6027\u80fd\u3002SWIFT\u4f7f\u7528\u57fa\u4e8eMPI\u7684\u901a\u4fe1\u6765\u5e76\u884c\u548c\u540c\u6b65\u72ec\u7acb\u7684\u4efb\u52a1\u3002\n\u8fd8\u4f7f\u7528\u4e86\u5176\u4ed6Unix\u5de5\u5177\uff0c\u5982SORT\u3001grep\u3001tr\u3001sed\u548cbash\u3002\u6b64\u5916\uff0c\u8fd8\u4f7f\u7528\u4e86jq\u3001d3\u3001dot/raphviz\u548cffmpeg\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528512\u6838Intel Xeon(2.5 GHz)CPU\u7684\u5927\u5185\u5b58(24T)SGI\u7cfb\u7edf\u3002\u6240\u6709IO\u90fd\u4e0e\u5185\u5b58(/dev/shm)\u7ed1\u5b9a\uff0c\u5373\u3002\u4ece/dev/shm\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u5c06\u6570\u636e\u5199\u5165/dev/shm\u3002\nAWK\u662f\u8f7b\u91cf\u7ea7\u7684\u3001\u7b80\u6d01\u7684\u3001\u5bcc\u6709\u8868\u73b0\u529b\u7684\u548c\u5feb\u901f\u7684-\u7279\u522b\u662f\u5bf9\u4e8e\u6587\u672c\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u3002\u6709\u4e9b\u4eba\u89c9\u5f97Awk\u7a0b\u5e8f\u7b80\u6d01\u660e\u4e86\uff0c\u5f88\u96be\u8bfb\u61c2\u3002\u6211\u5fc5\u987b\u6ce8\u610f\u4f7f\u4ee3\u7801\u53ef\u8bfb\u3002\u6211\u60f3\u770b\u770b\u6211\u548cAwk\u80fd\u8d70\u591a\u8fdc(\u5929\u54ea\uff0c\u6211\u771f\u7684\u8d70\u4e86\u5f88\u8fdc\uff01)\u3002\u66ff\u4ee3\u5de5\u5177\uff0c\u5982\u73b0\u4ee3Python\u5e93\uff0c\u6709\u65f6\u4f1a\u6709\u53ef\u4f38\u7f29\u6027\u9650\u5236\u548c\u53ef\u79fb\u690d\u6027\u95ee\u9898\u3002\u6709\u4e9b\u4eba\u8fd8\u5728\u72b9\u8c6b\u3002\u4e4b\u6240\u4ee5\u4f7f\u7528SWIFT\uff0c\u53ea\u662f\u56e0\u4e3a\u6211\u719f\u6089\u5b83\uff0c\u5e76\u4e14\u76f8\u4fe1\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u4f1a\u5f88\u597d\u5730\u6269\u5c55\u3002\n\u539f\u59cb\u6570\u636e\u5206\u6210\u4e24\u7ec4(amine\u548cmag)\uff0c\u6bcf\u7ec4322\u4e2ajson\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5305\u542b\u4e00\u767e\u4e07\u6761\u8bb0\u5f55\u3002\u6709\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u96c6\u5408\u4e2d\u51fa\u73b0\u7684\u516c\u5171\u8bb0\u5f55\u5217\u8868\u7684\u6587\u4ef6\u53ef\u7528\u3002awk\u811a\u672c(src/filterdup.awk)\u7528\u4e8e\u4eceamineDataSet\u4e2d\u6392\u9664\u8fd9\u4e9b\u91cd\u590d\u8bb0\u5f55\u3002\u7ed3\u679c\uff0c\u5b83\u4ea7\u751f\u4e86\u5927\u7ea62.56\u4ebf\u6761(\u51c6\u786e\u5730\u8bf4\u662f256,382,605\u6761)\u9700\u8981\u5904\u7406\u7684\u552f\u4e00\u8bb0\u5f55\u3002\u603b\u6570\u636e\u5927\u5c0f\u4e3a329 GB\u3002\u6570\u636e\u4e2d\u7684\u67d0\u4e9b\u5b57\u6bb5\u4e3a\u7a7a\u3002\u5728\u76f8\u5173\u7684\u5730\u65b9\uff0c\u8fd9\u4e9b\u8bb0\u5f55\u88ab\u907f\u514d\u3002\u6b64\u5916\uff0c\u4e0e\u975e\u82f1\u6587\u51fa\u7248\u7269\u6709\u5173\u7684\u8bb0\u5f55\u5728\u9700\u8981\u65f6\u4e5f\u88ab\u907f\u514d\u3002\u8868\u683c\u6570\u636e\u7684\u5feb\u7167\u53ef\u7528\u3002\u9009\u62e9\u5b57\u7b26\u4e32qwqw\u4f5c\u4e3a\u5217\u5206\u9694\u7b26\uff0c\u4ee5\u5c06\u5176\u4e0e\u6570\u636e\u4e2d\u5df2\u627e\u5230\u7684\u6587\u672c\u533a\u5206\u5f00\u6765\u3002\u6240\u6709\u5176\u4ed63\u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u7b26\u7ec4\u5408\u5df2\u5b58\u5728\u4e8e\u7981\u6b62\u5c06\u5176\u7528\u4f5c\u5206\u9694\u7b26\u7684\u6570\u636e\u4e2d\u3002\n#\uff01/usr/bin/env awk-f#$1 Magid#$2 amineid#\u6839\u636e\u94fe\u63a5\u5173\u7cfbBEGIN{FS=ofs=&#34\uff1bqwqw&#34\uff1b}nr==fnr{a[$2]=$1}\uff01(a\u4e2d\u7684$1)&amp\uff1b&amp\uff1b\u6587\u4ef6\u540d~/amier/{print}\nnr==fnr\u662f\u4e00\u4e2a\u5f88\u9177\u7684Awk\u4e60\u60ef\u7528\u6cd5\uff0c\u5b83\u786e\u4fdd\u53ea\u6709\u7b2c\u4e00\u4e2a\u6587\u4ef6\u7684\u6761\u4ef6\u4e3a\u771f\u3002\u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u5904\u7406\u7684\u6bcf\u4e2a\u6587\u4ef6\uff0cFNR(\u6587\u4ef6\u8bb0\u5f55\u53f7)\u4f1a\u88ab\u91cd\u7f6e\uff0c\u4f46NR\u4e0d\u4f1a\u3002\u8fd9\u610f\u5473\u7740\u6761\u4ef6NR==FNR\u4ec5\u5bf9\u7b2c\u4e00\u4e2a\u6587\u4ef6\u4ea7\u751fTRUE\u3002\njq\u7528\u4e8e\u5c06json\u6570\u636e\u8f6c\u6362\u4e3a\u8868\u683c\u683c\u5f0f(src/json2tabular.sh)\u3002\u8f6c\u6362\u540e\u7684\u8868\u683c\u6587\u4ef6\u670919\u4e2a\u539f\u59cb\u5217(id\u3001\u6807\u9898\u3001\u4f5c\u8005\u3001\u5e74\u4efd\u3001\u5f15\u6587\u7b49)\u548c\u4e00\u4e2a\u540d\u4e3anum_Authors\u7684\u9644\u52a0\u5217\uff0c\u8be5\u5217\u663e\u793a\u4e86\u4e00\u4e2a\u51fa\u7248\u7269\u8bb0\u5f55\u7684\u4f5c\u8005\u6570\u91cf\u3002Authors\u5217\u5177\u6709\u5206\u53f7\u5206\u9694\u7b26\u516c\u5f0fAuthors\u3002\u8868\u683c\u6570\u636e\u7684\u8fdb\u4e00\u6b65\u7cbe\u9009\u662f\u901a\u8fc7\u4f7f\u7528sed\u5220\u9664\u65e0\u5173\u7684\u7a7a\u683c\u3001\u65b9\u62ec\u53f7\u3001\u8f6c\u4e49\u5b57\u7b26\u548c\u5f15\u53f7\u6765\u5b9e\u73b0\u7684\u3002\n\u83b7\u5f97\u7684\u4e00\u4e9b\u7ed3\u679c\u88ab\u540e\u5904\u7406\uff0c\u4ee5\u4fbf\u4f7f\u7528D3\u56fe\u5f62\u6846\u67b6\u8fdb\u884c\u53ef\u89c6\u5316\u3002ffmpeg\u7528\u4e8e\u7f1d\u5408\u6d41\u884c\u672f\u8bed\u7684\u56fe\u50cf\u4ee5\u521b\u5efa\u52a8\u753b\u3002\u4f7f\u7528Dot/Graphviz\u6784\u5efa\u6700\u597d\u7684\u8bba\u6587\u7684\u6d77\u91cf\u57ce\u5e02\u7f51\u7edc\u56fe\u3002\n\u6bcf\u4e2a\u89e3\u51b3\u65b9\u6848\u90fd\u4f7f\u7528SWIFT\u5bf9322\u4e2aCPU\u6838\u5fc3\u4e0a\u7684322\u4e2a\u6570\u636e\u6587\u4ef6\u540c\u65f6\u8fd0\u884cAWK\u4ee3\u7801\u3002\u8fd9\u5bfc\u81f4\u5927\u89c4\u6a21\u52a0\u901f\u3002\u6240\u6709\u7684\u89e3\u51b3\u65b9\u6848\u90fd\u6ca1\u6709\u8d85\u8fc7\u4e00\u4e2a\u5c0f\u65f6\u7684\u8fd0\u884c\u65f6\u95f4--\u5927\u591a\u6570\u90fd\u4e0d\u5230\u4e00\u5206\u949f\u3002\n\u786e\u5b9a\u4f3c\u4e4e\u662f\u7279\u5b9a\u9886\u57df\u6216\u5b50\u9886\u57df\u7684\u4e13\u5bb6\u7684\u4e2a\u4eba\u6216\u4e2a\u4eba\u7ec4\u3002\n\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u89e3\u51b3\u3002\u7b2c\u4e00\u79cd\u65b9\u6cd5\u8bc6\u522b\u7ed9\u5b9a\u641c\u7d22\u4e3b\u9898(Results/Meditation_Highly_cited.txt)\u7684\u5f15\u6587\u91cf\u9ad8\u4e8e500\u7684\u6240\u6709\u6761\u76ee\u3002\n#\uff01/usr/bin/env awk-fBEGIN{#\u5b57\u6bb5\u5206\u9694\u7b26FS=&#34\uff1bqwqw&#34\uff1b#\u8f93\u51fa\u5b57\u6bb5\u5206\u9694\u7b26ofs=&#34\uff1b\\t&#34\uff1bIGNORECASE=1#\u53ef\u8bfb\u6027\u5b57\u6bb5\u540d\u79f0id=1\uff1btitle=2\uff1bnum_Authors=3\uff1bDOI=4\uff1bFOS_ISBN=5\uff1bdoctype_issn=6\uff1blang=7\uff1bn_citing=8\uff1bIssue=9\u3002Publisher_pdf=16\uff1b\u53c2\u8003=17\uff1b\u5173\u952e\u5b57=18\uff1b\u6458\u8981=19\uff1b\u4f5c\u8005=20\uff1b}($0~Theme&amp\uff1b&amp\uff1b$num_Authors&gt\uff1b0&amp\uff1b&amp\uff1b$n_citing\uff01~/null/&amp\uff1b&amp\uff1b$n_citing&gt\uff1b500){print$n_citing\uff0c$title\uff0c$Authors\uff0c$Year}#\u5982\u4f55\u8fd0\u884c\uff1a#awk-v Theme=\u51a5\u60f3-f src/pro1_p.\u3002\n\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u67e5\u627e\u59d3\u540d\u91cd\u590d\u4f2a\u9020\u4e3b\u9898\u7684\u4f5c\u8005\u59d3\u540d\uff0c\u6bcf\u4e2a\u6761\u76ee\u4e2d\u81f3\u5c11\u6709\u4e00\u5b9a\u6570\u91cf\u7684\u5f15\u7528\u3002\u8fd9\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5408\u7406\u7684\u60f3\u6cd5\uff0c\u8c01\u662f\u7ed9\u5b9a\u7814\u7a76\u9886\u57df\u7684\u4e13\u5bb6\u4eba\u7269\u3002Results/Cancer_Research_topauths.txt\u4e2d\u7684\u4e00\u4e2a\u8fd9\u6837\u7684\u7ed3\u679c\u663e\u793a\u4e86\u4f5c\u8005\u5728\u591a\u4e2a\u51fa\u7248\u7269\u4e2d\u8fdb\u884c\u7684\u764c\u75c7\u7814\u7a76\uff0c\u81f3\u5c11\u67091,000\u6b21\u5f15\u7528\u3002\n#\uff01/usr/bin/env awk-fBEGIN{#\u5b57\u6bb5\u5206\u9694\u7b26FS=&#34\uff1bqwqw&#34\uff1bOFS=&#34\uff1b\\t&#34\uff1bIGNORECASE=1#\u5b57\u6bb5\u540d\u79f0id=1\uff1b\u6807\u9898=2\uff1bnum_Authors=3\uff1bDOI=4\uff1bFOS_ISBN=5\uff1bdoctype_ISSN=6\uff1blang=7\uff1bn_citing=8\uff1bIssue=9\uff1burl=10\uff1bVolume=11\u3002\u5173\u952e\u5b57=18\uff1b\u6458\u8981=19\uff1b\u4f5c\u8005=20\uff1b}($0~TOPIC&amp\uff1b&amp\uff1b$Num_Authors&gt\uff1b0&amp\uff1b&amp\uff1b$n_citing\uff01~/null/&amp\uff1b&amp\uff1b$n_citing&gt\uff1b1000){#\u67e5\u627e\u7279\u5b9a\u4e3b\u9898\u59d3\u540d\u91cd\u590d\u7684\u4f5c\u8005\u3002#\u8fd9\u4e9b\u4f5c\u8005\u5c06\u88ab\u89c6\u4e3a\u4e13\u5bb6\u3002Gsub(&#34\uff1b\\&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\uff0c$Authors)Split($Authors\uff0ca\uff0c&#34\uff1b\uff1b&#34\uff1b)(I In A){Split(a[i]\uff0cb\uff0c&#34\uff1b\uff0c&#34\uff1b)#auths\u6570\u7ec4\u5c06\u6709\u5173\u952e\u5b57\u4f5c\u4e3a\u8eab\u4efd\u9a8c\u8bc1\u540d\u79f0\uff0c\u5982\u679c\u5173\u952e\u5b57\u91cd\u590dif(b[1]\uff01~/null/)auths[b[1]]++}}end{for(K In Auths)if(auths[k]&gt\uff1b1)print auths[k]\uff0ck}#How to run\uff1a#awk-v title=Cancer-f src/pro1_p2.awk data/mag_Papers_sample.allcols.txt\u3002\n\u65c1\u8fb9\u662f\u8fd9\u4e2a\u56fe\u8868\u4e2d\u88ab\u5f15\u7528\u6700\u591a\u7684\u8bba\u6587\u7684\u5f15\u6587\u7f51\u7edc\u56fe(\u592a\u5927\u4e86\uff0c\u8fd9\u91cc\u653e\u4e0d\u4e0b)\u3002\u67e5\u8be2\u9608\u503c\u4e3a20,000\u7684\u6700\u591a\u88ab\u5f15\u7528\u8bba\u6587\u7684\u5386\u53f2\u5217\u8868\u7684\u7ed3\u679c\u5728Results/top_Paps.txt\u4e2d\u3002\n\u8fd9\u662f\u901a\u8fc7\u8bc6\u522b\u96c6\u5408\u4e2d\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5355\u8bcd\u6765\u89e3\u51b3\u7684\u3002\u5206\u6790\u4e86\u6807\u9898\u3001\u6458\u8981\u548c\u5173\u952e\u5b57\uff0c\u627e\u5230\u4e86\u6574\u4e2a\u96c6\u5408\u4e2d\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u76841000\u4e2a\u5355\u8bcd\u3002\u4ece\u7ed3\u679c\u4e2d\u8fc7\u6ee4\u4e86\u51e0\u4e2a\u5e38\u7528\u8bcd(\u4e5f\u79f0\u4e3a\u505c\u7528\u8bcd)\u3002\u57282300\u4e07\u4eba\u4ee5\u4e0a\uff0c\u201c\u75c5\u4eba\u201d\u4e00\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u6700\u9ad8\u3002\u524d1,000\u4e2a\u5355\u8bcd\u7684\u5b8c\u6574\u5217\u8868\u53ef\u5728/Results/top_1K_word_kw_abs_title.txt\u4e2d\u627e\u5230\u3002\u51fa\u7248\u7269\u7684\u76ee\u6807\u96c6\u5408\u53ef\u4ee5\u7f29\u5c0f\u5230\u8bf8\u5982\u5e74\u4efd\u8303\u56f4\u4e4b\u7c7b\u7684\u6807\u51c6\u3002\n#\uff01/usr/bin/env awk-f#\u95ee\u9898\u9648\u8ff0#\u786e\u5b9a\u6240\u6709\u51fa\u7248\u7269\u7814\u7a76\u8fc7\u7684\u4e3b\u9898\u3002#\u89e3\u51b3\u65b9\u6848\uff1a#\u6b65\u9aa41\u3002\u8fc7\u6ee4\u5bf9\u82f1\u8bed\u8bb0\u5f55#Step2\u7684\u8f93\u5165\u3002\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u5185\u5bb9\uff0c\u5982\u6807\u70b9\u7b26\u53f7\u3001#\u4e0d\u53ef\u6253\u5370\u5b57\u7b26\u548c\u5c0f\u5355\u8bcd\uff0c\u5982#1\u4e2a\u5b57\u6bcd\u548c2\u4e2a\u5b57\u6bcd\u5355\u8bcd#step3\u3002\u6458\u5f55\u5173\u952e\u8bcd\u3001\u6807\u9898\u548c\u6458\u8981\u4e2d\u4f7f\u7528\u7684\u8bcd\u8bed#\u6b65\u9aa44\u3002\u67e5\u627e\u6700\u5e38\u7528\u7684\u5355\u8bcdBEGIN{FS=&#34\uff1bqwqw&#34\uff1bIGNORECASE=1#\u5b57\u6bb5\u540did=1\uff1btitle=2\uff1bnum_Authors=3\uff1bDOI=4\uff1bFOS_ISBN=5\uff1bdoctype_ISSN=6\uff1blang=7\uff1bn_citing=8\uff1bIssue=9\uff1burl=10\uff1bvolume=11\uff1bpage_start=12\uff1bpage_end=13\uff1byear=14\uff1bVenue=15\uff1bPublisher_pdf=16\u3002}#Collect Stop WordsNR==fnr{x[$1]\uff1bNext}$lang~/en/&amp\uff1b&amp\uff1b($\u5173\u952e\u5b57\uff01~/null/||$\u62bd\u8c61\uff01~/null/){#Treat Titles$title=tolower($title\uff0ca\uff0c&34\uff1b&#34\uff1b)for(I In A)if(length(a[i])&amp\uff1b2&amp\uff1b)for(I In A)if(length(a[i])&amp\uff1b2&amp\uff1b)for(I In A)if(Length(a[i])&amp\uff1b2&/amp\uff1b\u5339\u914d(a[i]\uff0c/[a-z]/)&amp\uff1b&amp\uff1ba[i]in x==0)kw[a[i]]++#\u5bf9\u5f85\u5173\u952e\u5b57$KEYWORKS=tolower($KEYOYS)Split($KEYWORKS\uff0cb\uff0cb\uff0c&34\uff1b\uff0c&#34\uff1b)for(I In B)if(Length(b[i])&gt\uff1b2&amp\uff1b&amp\uff1bMatch(b[i]\uff0c/[a-z]/)&amp\uff1b&amp\uff1bb[i]in x==0)kw[b[i]++#\u5bf9\u5f85\u6458\u8981(\u8ba1\u7b97\u5f00\u9500\u5f88\u5927\uff0c\u7ed3\u679c\u5728\uff1a#top_1000_words_from_kw_abstract_title_by_freq.txt)$ACTRICAL=tolower($ASTRAGE)gsub(&#34\uff1b\\&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\uff0c$ASTAL)gsub(&#34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b\uff0c$ASTAL)Split($ASTERAL\uff0cc\uff0c&#34\uff1b\uff1b&#34\uff1b)for(I In C)if(length(c[i])&gt\uff1b2&amp\uff1b&amp\uff1bMatch(c[i]\uff0c/[a-z]/)&amp\uff1b&amp\uff1bc[i]in x==0)kw[c[i]]++}end{for(K In Kw){if(kw[k]&gt\uff1b1000)\u6253\u5370kw[k]\uff0ck}}#\u5982\u4f55\u8fd0\u884c\uff1alc_all=C awk-f pro2.awk stop_words.txt\\../miner_Papers_allols_excl/amer_Papers_*.allcols.excl.txt\\../mag_Papers_allols/mag_Papers_*.allcols.txt\\|sorte-nr&gt\uff1bfreq.txt\u3002\n\u5bfc\u5165\u6587\u4ef6\uff1b\u5bfc\u5165Unix\uff1b/*app\u5b9a\u4e49\u6211\u4eec\u8981\u8fd0\u884c\u7684\u5185\u5bb9\u3001\u8f93\u5165\u53c2\u6570\u3001stdout\u5e94\u8be5\u653e\u5230\u7684\u4f4d\u7f6e\u7b49\u3002*/app(File Out)myawk(FILE BUCKPRG\uff0cFILE STOP_WORD\uff0cFILE INFILE){&#34\uff1b/usr/bin/awk&#34\uff1b&#34\uff1b-f&#34\uff1bjauprog stop_word infile@stdout=out}/*\u586b\u5145\u8f93\u5165\u6570\u636e*/file miner[]=glob(&#34\uff1b/dev/shm/miner_mag_Papers/*.txt&#34\uff1b)\uff1b/*\u6b64\u5904\u5c06\u6536\u96c6\u6bcf\u4e2a\u8c03\u7528\u7684\u8f93\u51fa*/file outfiles[]\uff1bforeach v\uff0ci in miner{outfiles[i]=myawk(input(&#34\uff1b/home/km0/SMC18/src/pro2.awk&#34\uff1b)\uff0cinput(&#34\uff1b/home/km0/smc18/data/stop_words.tx\uff1b)\uff0cinput(&#34\uff1b/home/km0/smc18/data/stop_words.tx.)\uff0cinput(&#34\uff1b/home/km0/smc18/data/stop_words.tx.)\u3002}/*\u5c06\u6240\u6709\u8f93\u51fa\u5408\u5e76\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d*/FILE JOINED&lt\uff1b&#34\uff1bjoined.txt&#34\uff1b&gt\uff1b=cat(Outfiles)\uff1b/*\u8fd0\u884c\u6b64\u5feb\u901f\u5e94\u7528\u540e\uff1aawk&#39\uff1b{a[$2]+=$1}end{for(K In A)print a[k]\uff0ck}&#39\uff1bjoined.txt|ort-nr&gt\uff1bfreq.txt*/\u3002\n\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8bc6\u522b\u5176\u4e2d\u5305\u542b\u641c\u7d22\u4e3b\u9898\u7684\u8bb0\u5f55\u7684\u4f5c\u8005\u4ece\u5c5e\u5173\u7cfb\u6765\u89e3\u51b3\u3002\u5728\u57ce\u5e02\u3001\u5927\u5b66\u548c\u56fd\u5bb6\u8fd9\u4e09\u4e2a\u6570\u636e\u5e93\u4e2d\u641c\u7d22\u4ece\u5c5e\u5173\u7cfb\uff0c\u4ee5\u627e\u51fa\u8be5\u7814\u7a76\u7684\u5730\u7406\u4f4d\u7f6e\u3002\u5c06\u7ed3\u679c\u6c47\u603b\u5230\u5370\u5237\u673a\n\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u622a\u7136\u4e0d\u540c\u7684\u65b9\u5f0f\u89e3\u51b3\u3002\u7b2c\u4e00\u79cd\u65b9\u6cd5\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u627e\u51fa\u4efb\u4f55\u7ed9\u5b9a\u7684\u4e24\u4e2a\u4e3b\u9898\u6bcf\u5e74\u4e00\u8d77\u51fa\u73b0\u7684\u60c5\u51b5\u3002\u5b83\u4f1a\u751f\u6210\u4e00\u4efd\u5e74\u4efd\u5217\u8868\uff0c\u5e76\u5217\u51fa\u8fd9\u4e24\u4e2a\u4e3b\u9898\u5728\u8be5\u5e74\u7684\u5355\u4e2a\u51fa\u7248\u7269\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u56fe\u8868\u663e\u793a\u4e86\u591a\u5e74\u6765\u201c\u80a5\u80d6\u201d\u548c\u201c\u7cd6\u201d\u8fd9\u4e24\u4e2a\u672f\u8bed\u5728\u51fa\u7248\u7269\u4e2d\u662f\u5982\u4f55\u7ed3\u5408\u5728\u4e00\u8d77\u7684\u3002\n#\uff01/usr/bin/env awk-f#\u95ee\u9898\u9648\u8ff0#\u786e\u5b9a\u4e3b\u9898\u5982\u4f55\u968f\u65f6\u95f4\u53d8\u5316\u3002#\u4e0b\u9762\u7684\u89e3\u51b3\u65b9\u68481\u5c06\u641c\u7d22\u63d0\u5230\u7684\u4efb\u610f\u4e24\u4e2a\u4e3b\u9898#\u5e76\u663e\u793a\u8fd9\u4e24\u4e2a\u4e3b\u9898\u6309\u5e74\u51fa\u73b0\u7684\u6b21\u6570BEGIN{#Field Separator FS=&#34\uff1bqwqw&#34\uff1bIGNORECASE=1#Field Names id=1\uff1bTitle=2\uff1bNum_Authors=3\uff1bDOI=4\uff1bFOS_ISBN=5\uff1bdoctype_ISSN=6\uff1blang=7\uff1bn_citing=8\uff1bIssue=9\uff1burl=10\uff1bVolume=11\u3002\u5173\u952e\u8bcd=18\uff1b\u6458\u8981=19\uff1b\u4f5c\u8005=20\uff1b}$lang~/en/&amp\uff1b&amp\uff1b$0~topic1&amp\uff1b&amp\uff1b$0~topic1&amp\uff1b&amp\uff1b$0~topic2{a[$Year]++}end{n=asorti(a\uff0cb)printf(&#34\uff1b\u4e3b\u9898\u8d8b\u52bf\uff1a%s\uff0c%s\\n&34\uff1b\uff0ctopic1\uff0ctopic2)(i=1\uff1bi&lt\u3002%d\uff1a-%d\\n&#34\uff1b\uff0cb[i]\uff0ca[b[i]])}#\u6309\u5982\u4e0b\u65b9\u5f0f\u8fd0\u884c\uff1a#awk-v topic1=\u80a5\u80d6-v topic2=\u7cd6-f\u4ee3\u7801/pro4.awk miner_mag_Papers/*.txt\u3002\n\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u627e\u5230\u6bcf\u5e74\u5f71\u54cd\u6700\u5927\u7684\u8bba\u6587\uff0c\u5e76\u63d0\u53d6\u8fd9\u4e9b\u8bba\u6587\u4e2d\u7684\u5173\u952e\u8bcd\u3002\u5f71\u54cd\u662f\u6839\u636e\u90a3\u4e00\u5e74\u88ab\u5f15\u7528\u6700\u591a\u7684\u8bba\u6587\u8ba1\u7b97\u51fa\u6765\u7684\u3002\u6b64\u4efb\u52a1\u7684\u7ed3\u679c\u4ee5\u5e74\u4efd\u3001\u5173\u952e\u5b57\u3001\u5f15\u7528\u4e09\u5143\u7ec4\u7684\u5f62\u5f0f\u5b58\u50a8\u5728Results/Year_Trending_keywords.txt\u4e2d\u3002\n#\uff01/usr/bin/env awk-f#\u95ee\u9898\u9648\u8ff0#\u786e\u5b9a\u4e3b\u9898\u5982\u4f55\u968f\u65f6\u95f4\u53d8\u5316\u3002#\u89e3\u51b3\u65b9\u68482\u662f\u6839\u636eBEGIN{FS=OFS=&#34\uff1bqwqw&#34\uff1bIGNORECASE=1#\u5b57\u6bb5\u540d\u79f0id=1\uff1b\u6807\u9898=2\uff1bnum_Authors=3\uff1bDOI=4\uff1bFOS_ISBN=5\uff1bdoctype_issn=6\uff1blang=7\uff1bn_citing=8\uff1bIssue=9\uff1burl=10\uff1bVolume=11\uff1bpage_start=8\u627e\u51fa\u88ab\u5f15\u7528\u6b21\u6570\u6700\u9ad8\u7684\u8bba\u6587#\u5e74\uff0c\u5e76\u8ba1\u7b97\u51fa\u8be5\u8bba\u6587\u6240\u57fa\u4e8e\u7684\u4e3b\u9898{FS=ofs=&#34\uff1bqwqw&#34\uff1bIGNORECASE=1#Field Names=1\uff1bTitle=2\uff1bnum_Authors=3\uff1bDOI=4\u3002\u6458\u8981=19\uff1b\u4f5c\u8005=20\uff1b}$lang~/en/&amp\uff1b&amp\uff1b$Year\uff01~/NULL/&amp\uff1b&amp\uff1b$Year&lt\uff1b2020&amp\uff1b&amp\uff1b$KEYENTS\uff01~/NULL/&amp\uff1b&amp\uff1b$n_CITION\uff01~/NULL/&amp\uff1b&amp\uff1bMAX[$Year]{MAX[$Year]=$n_CITIONS\uff1ba[$Year]=$KEYOYES}end{n=asorti\u3002i++)\u901a\u8fc7SWIFT\u5e76\u884c\u8fd0\u884c\u6253\u5370b[i]\uff0ca[b[i]]\uff0cmax[b[i]]}#\u3002\u5982\u679c\u662f\u4e32\u884c\u7684\uff0c\u8bf7\u6309\u5982\u4e0b\u65b9\u5f0f\u8fd0\u884c\uff1a#awk-f code/pro4_p2.awk miner_mag_Papers/*.txt&gt\uff1bYear Way_Trending_keywords.txt\u3002\n\u7b2c\u4e09\u79cd\u65b9\u6cd5\u627e\u51fa\u6bcf\u5e74\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u768410\u4e2a\u672f\u8bed\uff0c\u4ee5\u627e\u51fa\u8fd9\u4e9b\u5e74\u6765\u8fd9\u4e9b\u8bdd\u9898\u662f\u5982\u4f55\u6d41\u884c\u548c\u8fc7\u65f6\u7684\u3002\u6b64\u5904\u662f\u4e00\u6bb5MKV\u52a8\u753b\u89c6\u9891\uff0c\u663e\u793a\u4e861800\u81f32017\u5e74\u95f4\u5355\u8bcd\u7684\u6ce1\u6cab\u56fe\u3002\u6240\u6709\u5355\u8bcd\u7684\u6587\u4ef6\u5217\u8868\u53ef\u5728Results/Trending_Words_by_Year\u4e2d\u627e\u5230\u30022002\u5e74\u7684\u70ed\u95e8\u8bcd\u6c47\u6ce1\u6cab\u5316\u622a\u56fe\u5982\u4e0b\u6240\u793a\uff1a\n#\uff01/usr/bin/env awk-f#\u67e5\u627e\u6bcf\u5e74\u6700\u70ed\u95e8\u768410\u4e2a\u4e3b\u9898\uff0c\u770b\u770b\u5b83\u4eec\u5728\u8d8b\u52bf\u4e2d\u5982\u4f55\u51fa\u73b0/\u6d88\u5931#\u6211\u4eec\u901a\u8fc7\u5c06\u5173\u952e\u5b57\u3001\u6807\u9898\u548c\u6458\u8981\u5199\u5165\u4ee5\u5b83\u4eec\u51fa\u73b0\u7684\u5e74\u4efd\u547d\u540d\u7684\u6587\u4ef6\u5e76\u5bf9\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c\u540e\u5904\u7406\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9BEGIN{FS=&#34\uff1bqwqw&#34\uff1bIGNORECASE=1#\u5b57\u6bb5\u540d\u79f0id=1\uff1btitle=2\uff1bnum_Authors=3\uff1bDOI=4\uff1bFOS_ISBN=5\uff1bpage_start=12\uff1bpage_end=13\uff1b\u5e74\u4efd=14\uff1b\u5730\u70b9=15\uff1bPublisher_pdf=16\uff1b\u53c2\u8003=17\uff1b\u5173\u952e\u5b57=18\uff1b\u6458\u8981=19\uff1b\u4f5c\u8005=20\uff1b}#\u6536\u96c6\u505c\u7528\u8bcdNR==fnr{x[$1]\uff1bNext}$lang~/en/&amp\uff1b&amp\uff1b$n_citing&gt\uff1b0&amp\uff1b&amp\uff1b$Year=yr&amp\uff1b&amp\uff1b$\u5173\u952e\u5b57\uff01~/null/{#\u5c06\u6807\u9898\u3001\u5173\u952e\u5b57\u548c\u6458\u8981\u5199\u5165\u6309\u51fa\u73b0\u5e74\u4efd\u547d\u540d\u7684\u6587\u4ef6#\u5bf9\u5f85\u6807\u9898$TITLE=tolower($TITLE\uff0ca\uff0ca\uff0c&#34\uff1b&#34\uff1b)for(I In A)if(length(a[i])&gt\uff1b2&amp\uff1bMatch(a[i]\uff0c/[a-z]/)&amp\uff1b&amp\uff1b)(I In A)if(length(a[i])&gt\uff1b2&amp\uff1bMatch(a[i]\uff0c/[a-z]/)&amp\uff1b&amp\uff1ba[i]in x==0)\u5982\u679c(I In B)if(Length(b[i])&gt\uff1b2&amp\uff1b&amp\uff1bMatch(b[i])&amp\uff1b&amp\uff1b\u5339\u914d(b[i]\uff0c/[a-z]/)&amp\uff1b&amp\uff1b\uff0c\u6253\u5370(i]in x==0)\u7684[i]#Treat Keypes$Keyons=tolower($Keyons)gsub(&#34\uff1b\\&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b\uff0c$Keyons)Split($Keyons\uff0cb\uff0c&34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b)\u3002b[i]in x==0)\u4e3a(I In C)\u6253\u5370b[i]#Treat Abstral$Abstra=tolower($Summary)gsub(&#34\uff1b\\&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b\uff0c&#34\uff1b\uff0c$Summary)\u62c6\u5206($Summary\uff0cc\uff0c&#34\uff1b&#34\uff1b)if(Length(c[i])&gt\uff1b2&amp\u3002Match(c[i]\uff0c/[a-z]/)&amp\uff1b&amp\uff1bc[i]in x==0)\u6253\u5370c[i]}#\u8fdb\u884c\u4ee5\u4e0b\u540e\u5904\u7406\uff1a#for i in 18\uff1f\uff1f19\uff1f\uff1f20\uff1f\uff1f#do(grep-o-E&#39\uff1b\\w+&#39\uff1b$i|TR[A-Z][a-z]\\#|sed-e&#39\uff1bs/null//g&#39\uff1b-e&#39\uff1bs/^.$//g&#39\uff1b-e/^..$//g&#39\uff1b-e&#39\uff1bs/^[0-9]*$//g&#39\uff1b\\#|awk NF|fgrep-v-w-f stop_words.txt\\#|SORT|uniq-c|SORT-nr\\#|head-1\n\u8fd9\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u627e\u5230\u65b0\u63d0\u6848\u4e0a\u7684\u5173\u952e\u5b57\u3002\u5982\u679c\u8fd9\u4e9b\u5173\u952e\u5b57\u51fa\u73b0\u5728\u73b0\u6709\u53d1\u5e03\u8bb0\u5f55\u4e2d\uff0c\u5219\u5b83\u662f\u53ef\u7591\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u5173\u952e\u5b57\u4e4b\u95f4\u7684\u903b\u8f91OR\u627e\u5230\u5e7f\u6cdb\u7684\u5acc\u7591\u4eba\u5217\u8868\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53ef\u4ee5\u7528\u903b\u8f91AND\u7f29\u5c0f\u8303\u56f4\u3002\u5173\u952e\u5b57\u53ef\u4ee5\u5728OR\u548cAND\u4e2d\u4efb\u610f\u7ec4\u5408\u3002\u7ed3\u679c\u6587\u4ef6/Results/Suspects.txt\u663e\u793a\u4e861400\u591a\u540d\u6765\u81ea\u82f1\u6587\u62a5\u7eb8\u7684\u7591\u4f3c\u5173\u952e\u8bcd\u53ca\u5176\u7ec4\u5408\uff1a\u7535\u6c60\u3001\u7535\u5b50\u3001\u9502\u548c\u80fd\u6e90\u3002HPC\u5b9e\u65bd\u5c06\u572826\u79d2\u5185\u5b8c\u6210\u3002\u4e0b\u9762\u7684AWK\u4ee3\u7801\u3002\n#\uff01/usr/bin/env awk-f#\u95ee\u9898\u9648\u8ff0#\u7ed9\u51fa\u7814\u7a76\u5efa\u8bae\uff0c\u786e\u5b9a\u63d0\u8bae\u7684\u5de5\u4f5c\u4ee5\u524d\u662f\u5426#\u5df2\u5b8c\u6210\u3002#\u89e3\u51b3\u65b9\u6848\uff1a\u627e\u5230\u65b0\u63d0\u6848\u4e2d\u7684\u5173\u952e\u5b57\u3002#\u5982\u679c\u8fd9\u4e9b\u5173\u952e\u5b57\u51fa\u73b0\u5728\u73b0\u6709\u51fa\u7248\u7269\u8bb0\u5f55\u4e2d\uff0c\u5219\u4e3a\u53ef\u7591\u3002BEGIN{FS=&#34\uff1bqwqw&#34\uff1bIGNORECASE=1#\u5b57\u6bb5\u540did=1\uff1b\u6807\u9898=2\uff1bnum_Authors=3\uff1bDOI=4\uff1bFOS_ISBN=5\uff1bdoctype_ISSN=6\uff1blang=7\uff1bn_citing=8\uff1bIssue=9\uff1burl=10\uff1bvolume=11\uff1bpage_start=12\uff1bpage_end=13\uff1bYear\u3002}#topic1..\u3002topic4\u5728\u547d\u4ee4\u884c$0~topic1&amp\uff1b&amp\uff1b$0~topic2&amp\uff1b&amp\uff1b$0~topic3&amp\uff1b&amp\uff1b$0~topic4&amp\uff1b&amp\uff1b$lang~/en/&amp\uff1b&amp\uff1b$Authors\uff01~/null/{print$id\uff0c$title\uff0c$Authors\uff0c$Year}\u4e2d\u63d0\u4f9b\u3002\n\u6211\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u7ecf\u5178\u7684Unix\u5de5\u5177\u6765\u89e3\u51b3\u73b0\u4ee3\u95ee\u9898\uff0c\u6570\u767e\u4e07\u6761\u8bb0\u5f55\u53ef\u4ee5\u5728\u4e0d\u5230\u4e00\u5206\u949f\u7684\u65f6\u95f4\u5185\u5927\u89c4\u6a21\u5904\u7406\u3002\u5c31\u6570\u636e\u672c\u8eab\u800c\u8a00\uff0c\u4f3c\u4e4e\u751f\u7269\u79d1\u5b66\u7814\u7a76\u5728PU\u4e2d\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002\n..", "note_en": "Awk crunches massive data; a High Performance Computing (HPC) script callshundreds of Awk concurrently. Fast and scalable in-memory solution on a fatmachine.\n  Presenting the solution I worked on in 2018, to a  DataChallenge organized atwork. I solve the Scientific Publications Mining challenge (no.4) that consistsof 5 problems. I use classic Unix tools with a modern scalable HPC scriptingtool to work out the solutions. The project is hosted on github. About 12 teams entered thecontest.\n    Argonne National Laboratory developed HPC scripting tool called Swift ( NOT the Apple Swift) is used to runthe Awk programs concurrently over the dataset to radically improveperformance. Swift uses MPI based communication to parallelize and synchronizeindependent tasks.\n Other Unix tools such as  sort,  grep,  tr,  sed and  bash are used aswell. Additionally,  jq,  D3,  dot/graphviz, and  ffmpeg are used.\n  Fortunately, I had access to a large-memory (24 T) SGI system with 512-coreIntel Xeon (2.5GHz) CPUs. All the IO is memory ( /dev/shm) bound ie. the datais read from and written to  /dev/shm.\n  Awk is lightweight, concise, expressive, and fast \u2013 especially for text processingapplications. Some people find Awk programs terse and hard to read. I havetaken care to make the code readable. I wanted to see how far can I go with Awk(and boy did I go far!). Alternative tools such as modern Python librariessometimes have scaling limitations, portability concerns. Some are stillevolving. Swift is used simply because I was familiar with it and confidentthat it will scale well in this case.\n  The original  data was in two sets ( aminerand  mag) of 322  json files \u2013 each containing a million records. A filewith a list of common records appearing in both sets was available. An Awk script( src/filterdup.awk) is used to exclude these duplicate records from the aminerdataset. As a result, it came out about  256 million (256,382,605 to beexact) unique records to be processed. The total data size is 329GB. Somefields in the data are  null. Those records are avoided where relevant.Additionally, records related to non-English publications were avoided asneeded. A snapshotof tabular data is available. String  qwqw is chosen as a column separator todistinguish it from text already found in data. All other 3 or less charactercombinations already existed in data prohibiting them to be used as separators.\n #!/usr/bin/env awk -f # $1 magid # $2 aminerid # Filter duplicate papers and remove them # from aminer database based on the linking relationship BEGIN  {FS  = OFS  =  &#34;qwqw&#34; }NR  == FNR  {a[ $2 ]  =  $1 } !( $1  in a )  &amp;&amp; FILENAME ~ /aminer/  { print  }\n NR == FNR is a cool Awk idiom that ensures the condition is true only for the first file. This is because for each file that is processed the FNR (File Record Number) gets reset but the NR does not. This means the condition  NR == FNR yields true only for the first file.\n     jq is used to transform the json data to tabular format( src/json2tabular.sh). The converted tabular files have 19 original columns( id,  title,  authors,  year,  citations, etc) and oneadditional column called  num_authors showing the number of authors for agiven publication record. The authors column has a semi-colon separator formultiple authors. Further curation of tabular data is done by removingextraneous space, square brackets, escape characters and quotes using  sed.\n Some of the results obtained were postprocessed for visulization using the  D3graphics framework.  ffmpeg is used to stitch images of trending terms tocreate an animation.  dot/graphviz is used to build the massive citationnetwork graph of the best paper.\n  Each solution has Awk code run concurrently over the 322 data files on 322 CPUcores using Swift. This resulted in radical speedup at scale. None of thesolution has taken more than an hour of runtime\u2013most took less than a minute.\n  Identify the individual or group of individuals who appear to be the expert in a particular field or sub-field.\n This is solved in two ways. First approach identifies all the entries withcitations higher than 500 for a given search topic( results/meditation_highly_cited.txt).\n #!/usr/bin/env awk -fBEGIN  {  # Field Separator FS  =  &#34;qwqw&#34;  # Output field separator OFS  =  &#34; \\t &#34; IGNORECASE  = 1  # Field names for readability  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ;  lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } ( $0~topic  &amp;&amp;  $num_authors  &gt; 0  &amp;&amp;  $n_citation !~/null/  &amp;&amp;  $n_citation &gt;500 ){ print  $n_citation,  $title,  $authors,  $year } # How to run: # awk -v topic=meditation -f src/prob1_p1.awk data/mag_papers_sample.allcols.txt\n The second approach finds the names of authors whose names are repeating forqueried topic with at least a certain number of citations in each entry. Thisgives a reasonable idea of who are the expert figures in a given research area.One such result in  results/cancer_research_topauths.txt shows authors incancer research with more than one publication with at least 1,000 citations.\n #!/usr/bin/env awk -fBEGIN  {  # Field separator FS  =  &#34;qwqw&#34; OFS  =  &#34; \\t &#34; IGNORECASE  = 1  # Field names  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ;  lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } ( $0~topic  &amp;&amp;  $num_authors &gt;0  &amp;&amp;  $n_citation !~/null/  &amp;&amp;  $n_citation &gt;1000 )  {  # find the authors whose names are repeating for a particular topic.  # Those authors will be considered experts.  gsub ( &#34; \\&#34; &#34;, &#34;&#34;, $authors )  split ( $authors, a,  &#34;;&#34; )  for  (i  in a )  {  split (a[i], b,  &#34;,&#34; )  # auths array will have keys as auth names and the   # element value increases if the key repeats  if (b[1]!~/null/ ) auths[b[1]]++  } }END  {  for  (k  in auths )  if (auths[k]&gt;1 ) print auths[k], k  } #How to run: # awk -v topic=cancer -f src/prob1_p2.awk data/mag_papers_sample.allcols.txt # sort the results\n  Alongside is the citation  network graph of the most cited paper in this diagram(too big to fit here). The result of a query for all-time list of most citedpapers with a threshold of 20,000 is in  results/top_papers.txt.\n   This is solved by identifying most frequently appearing words in thecollection. Title, abstract and keywords are parsed and top 1,000 frequentlyoccurring words across the whole collection is found. Several common words (aka stop-words) are filtered from the results. At over 23 million, the word\u201cpatients\u201d occurs the most frequently. The full list of top 1,000 words isfound in  /results/top_1K_words_kw_abs_title.txt. The target collection ofpublications may be narrowed down to criteria such as years range.\n #!/usr/bin/env awk -f # Problem Statement # Identify topics that have been researched across all publications.  # Solution: # step1. Filter the input to English language records  # step2. Eliminate unnecessary content such as punctuation, # non-printable chars and small words such as  # 1 letter and 2 letter words # step3. Extract words used in keywords, title and abstract # step4. Find most frequently used words BEGIN  { FS  =  &#34;qwqw&#34; IGNORECASE  = 1  # Field names  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ; lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } #collect stop wordsNR  == FNR  {x[ $1 ] ;next } $lang~/en/  &amp;&amp;  ( $keywords !~/null/  ||  $title !~/null/  ||  $abstract !~/null/ )  {  # treat titles  $title  = tolower ( $title )  split ( $title, a,  &#34; &#34; )  for  (i  in a )  if (length (a[i] )&gt;2  &amp;&amp; match (a[i],/[a-z]/ )  &amp;&amp; a[i]  in x  == 0 ) kw[a[i]]++  # treat keywords  $keywords  = tolower ( $keywords )  split ( $keywords, b,  &#34;,&#34; )  for  (i  in b )  if (length (b[i] )&gt;2  &amp;&amp; match (b[i],/[a-z]/ )  &amp;&amp; b[i]  in x  == 0 ) kw[b[i]]++  # treat abstracts (Computationally expensive, results are in:  # top_1000_words_from_kw_abstract_title_by_freq.txt)  $abstract  = tolower ( $abstract ) gsub ( &#34; \\&#34; &#34;, &#34;&#34;, $abstract ) gsub ( &#34;,&#34;, &#34;&#34;, $abstract )  split ( $abstract, c,  &#34; &#34; )  for  (i  in c )  if (length (c[i] )&gt;2  &amp;&amp; match (c[i],/[a-z]/ )  &amp;&amp; c[i]  in x  == 0 ) kw[c[i]]++ }END  {  for (k  in kw ){  if  (kw[k]&gt;1000 ) print kw[k], k  } } # HOW TO RUN: LC_ALL=C awk -f prob2.awk stop_words.txt \\ ../aminer_papers_allcols_excl/aminer_papers_ *.allcols.excl.txt  \\ ../mag_papers_allcols/mag_papers_ *.allcols.txt  \\ |  sort  -nr  &gt; freq.txt\n  import  files ; import  unix ; /* app defines what we want to run, the input parameters, where the stdout should go, etc.*/ app  ( file  out )  myawk  ( file  awkprog ,  file  stop_words ,  file  infile ){  &#34;/usr/bin/awk&#34;  &#34;-f&#34;  awkprog  stop_words  infile  @ stdout = out } /* populate the input data */ file  aminer []  =  glob ( &#34;/dev/shm/aminer_mag_papers/*.txt&#34; ); /* output for each call will be collected here */ file  outfiles [];  foreach  v ,  i  in  aminer  {  outfiles [ i ]  =  myawk ( input ( &#34;/home/km0/SMC18/src/prob2.awk&#34; ),  input ( &#34;/home/km0/SMC18/data/stop_words.txt&#34; ),  v ); } /* Combine all output in one file */ file  joined  &lt; &#34;joined.txt&#34; &gt;  =  cat ( outfiles ); /* After running this swift app: awk &#39;{a[$2]+=$1} END {for (k in a) print a[k],k}&#39; joined.txt | sort -nr &gt; freq.txt*/\n   This is solved by identifying the author affiliations for the records that hasthe search topic in them. The affiliation is searched against threedatabases\u2013cities, universities and countries to find out the geographiclocations for that research. The results are aggregated to present a list ofcenters for which a given keyword appears most frequently. For cities, theresults are plotted on world map. One such result is shown below for the topicof research on \u201cbirds\u201d.\n  The  results/ directory contains other similar results such as epilepsy,opioid, meditation research by universities and by countries. The HPCimplementation finishes in  25 seconds. The Awk code is shown below.\n #!/usr/bin/env awk -f # problem statement # visualize the geographic distribution of the topics in the publications.BEGIN  {  # Field separator FS  = OFS  =  &#34;qwqw&#34; IGNORECASE  = 1  # Field names  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ;  lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } #collect the countries/cities/univs dataNR  == FNR  {a[ $1 ] ;next }  #treat records with authors whose affiliation is available $0~topic  &amp;&amp;  $num_authors !~/null/  &amp;&amp;  $authors~/ \\,/  {  # extract words from author affiliation and compare with the countries.  # If a match is found increment that array entry. w  =  split ( $authors, b,  &#34;,&#34; )  for  ( i =0 ;i&lt;w ;i++ ){ gsub ( &#34;;&#34;, &#34; &#34;,b[i] )  if  (b[i]  in a ) a[b[i]]++  } }END  {  for (k  in a ){  if (a[k] ) print a[k], k  } } # HOW TO RUN: # awk -v topic=birds -f prob3.awk cities.txt \\ ../mag_papers_allcols/mag_papers_ *.allcols.txt  \\ ../aminer_papers_allcols_excl/aminer_papers_ *.allcols.excl.txt # awk -v topic=birds -f prob3.awk countries.txt ... # awk -v topic=birds -f prob3.awk universities.txt ...  # Run the following pipeline on the results: # sort -nr -k 1 citywise_papers.txt &gt; tmp &amp;&amp; mv tmp citywise_papers.txt  # OR # After running the swift app: # awk -F: &#39;{a[$2]+=$1} END {for (k in a) print a[k],k}&#39; joined_cities.txt \\ |  sort  -nr  &gt; tmp  &amp;&amp;  mv tmp joined_cities.txt\n   This problem may be solved in three distinct ways. The first approach processesthe database to find out year-wise occurrence of any given two topics together. It generates a list of years and the number of times  both topicshas occurred in a single publication in that year. For example, the plot shownbelow shows how the terms \u201cobesity\u201d and \u201csugar\u201d have trended together inpublications over the years.\n   #!/usr/bin/env awk -f # Problem Statement # Identify how topics have shifted over time. # Solution 1 below will search for any two topics # mentioned and show the number of occurrence of both the topics year-wiseBEGIN  {  # Field Separator FS  =  &#34;qwqw&#34; IGNORECASE  = 1  # Field names  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ;  lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } $lang~/en/  &amp;&amp;  $year !~/null/  &amp;&amp;  $0~topic1  &amp;&amp;  $0~topic2  { a[ $year ]++ }END  { n  = asorti (a,b )  printf ( &#34;Trend for topics: %s, %s \\n &#34;, topic1, topic2 )  for  ( i =1 ;i&lt; =n ;i++ )  printf ( &#34;%d :- %d \\n &#34;, b[i], a[b[i]] ) } # Run as follows: # awk -v topic1=obesity -v topic2=sugar -f code/prob4.awk aminer_mag_papers/*.txt\n The second approach finds the papers that has highest impact in each year andextracts the keywords in those papers. The impact is computed by the paper thatis cited the most in that year. The result for this task are in results/yearwise_trending_keywords.txt in the form of year, keywords,citations triplet.\n #!/usr/bin/env awk -f # Problem Statement # Identify how topics have shifted over time. # Solution 2 is to find the highest cited paper # year-wise and figure out the topics it was based onBEGIN  { FS  = OFS  =  &#34;qwqw&#34; IGNORECASE  = 1  # Field names  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ;  lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } $lang~/en/  &amp;&amp;  $year !~/null/  &amp;&amp;  $year&lt;2020  &amp;&amp;  $keywords !~/null/  &amp;&amp;  $n_citation !~/null/  &amp;&amp;  $n_citation &gt;max[ $year ]  { max[ $year ]  =  $n_citation ; a[ $year ]= $keywords }END  { n  = asorti (a,b )  for  ( i =1 ;i&lt; =n ;i++ ) print b[i], a[b[i]], max[b[i]] } # Run via Swift in parallel. If serial, run like so: # awk -f code/prob4_p2.awk aminer_mag_papers/*.txt &gt; yearwise_trending_keywords.txt\n The third approach finds the top 10 most frequently occurring terms each yearto find how the topics get in and out of trend over the years. An mkv animationvideo showing a bubble plot of words trending between the year 1800 and 2017 is here.A file list of all the words is found in  results/trending_words_by_year. Asnapshot trending words bubble in 2002 is shown below:\n   #!/usr/bin/env awk -f # find the top 10 trending topics year-wise and see how they appear/disappear in the trend # We achieve this by writing keywords, titles and abstract to files named after  # the year they appeared and do postprocessing on those filesBEGIN  { FS  =  &#34;qwqw&#34; IGNORECASE  = 1  # Field names  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ;  lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } #collect stop wordsNR  == FNR  {x[ $1 ] ;next } $lang~/en/  &amp;&amp;  $n_citation &gt;0  &amp;&amp;  $year ==yr  &amp;&amp;  $keywords !~/null/ {  # write title, keywords and abstract to a file   # titled by the year in which they appear  # treat title  $title  = tolower ( $title )  split ( $title, a,  &#34; &#34; )  for  (i  in a )  if (length (a[i] )&gt;2  &amp;&amp; match (a[i],/[a-z]/ )  &amp;&amp; a[i]  in x  == 0 ) print a[i]  # treat keywords  $keywords  = tolower ( $keywords ) gsub ( &#34; \\&#34; &#34;, &#34;&#34;, $keywords )  split ( $keywords, b,  &#34;,&#34; )  for  (i  in b )  if (length (b[i] )&gt;2  &amp;&amp; match (b[i],/[a-z]/ )  &amp;&amp; b[i]  in x  == 0 ) print b[i]  # treat abstract  $abstract  = tolower ( $abstract ) gsub ( &#34; \\&#34; &#34;, &#34;&#34;, $abstract ) gsub ( &#34;,&#34;, &#34; &#34;, $abstract )  split ( $abstract, c,  &#34; &#34; )  for  (i  in c )  if (length (c[i] )&gt;2  &amp;&amp; match (c[i],/[a-z]/ )  &amp;&amp; c[i]  in x  == 0 ) print c[i] } #Do the following for postprocessing: #for i in 18?? 19?? 20?? # do (grep -o -E &#39;\\w+&#39; $i | tr [A-Z] [a-z] \\ # | sed -e &#39;s/null//g&#39; -e &#39;s/^.$//g&#39; -e &#39;s/^..$//g&#39; -e &#39;s/^[0-9]*$//g&#39; \\ # | awk NF | fgrep -v -w -f stop_words.txt \\ # | sort | uniq -c | sort -nr \\ # | head -10 &gt; trending/trending.$i.txt) &amp; done\n Parallelizing the third approach was challenging as it involved a two-levelnested foreach loop. The outer loop iterates over the years and the inner loopiterates over the input files. The HPC implementation finishes in  48minutes. Swift code for this shown below.\n import  files ; import  io ; import  unix ; import  string ; app  ( file  out )  myawk  ( file  awkprog ,  file  infile ,  file  stopwords ,  string  yr ){  &#34;/usr/bin/awk&#34;  &#34;-v&#34;  yr  &#34;-f&#34;  awkprog  stopwords  infile  @ stdout = out } file  aminer []  =  glob ( &#34;/dev/shm/aminer_mag_papers/*.txt&#34; ); foreach  y  in  [ 1800 : 2017 : 1 ]{  file  yearfiles [];  foreach  v ,  i  in  aminer {  yearfiles [ i ]  =  myawk ( input ( &#34;/home/km0/SMC18/src/prob4_p3.awk&#34; ),  v ,  input ( &#34;/home/km0/SMC18/data/stop_words.txt&#34; ),  sprintf ( &#34;yr=%s&#34; , toString ( y )));  }  file  joined  &lt; sprintf ( &#34;year%s.txt&#34; , toString ( y )) &gt;  =  cat ( yearfiles ); }\n   This has a simple solution: Find the keywords on a new proposal. If thosekeywords appear in an existing publication record, it is a suspect. A broadlist of suspects may be found with logical  OR between keywords which couldbe narrowed down with logical  AND. The keywords may be arbitrarily combinedin ORs and ANDs. The results file  /results/suspects.txt shows over 1,400suspects for an  AND combination of keywords:  battery,  electronics, lithium, and  energy from English language papers. The HPC implementationfinishes in  26 seconds. Awk code below.\n #!/usr/bin/env awk -f # Problem Statement # Given a research proposal, determine whether the proposed work has been # accomplished previously. # Solution: Find the keywords in the new proposal.  # If those keywords appear in an existing publication record, it is a suspect.BEGIN  { FS  =  &#34;qwqw&#34; IGNORECASE  = 1  # Field names  id =1 ;  title =2 ;  num_authors =3 ;  doi =4 ;  fos_isbn =5 ;  doctype_issn =6 ;  lang =7 ;  n_citation =8 ;  issue =9 ;  url =10 ;  volume =11 ;  page_start =12 ;  page_end =13 ;  year =14 ;  venue =15 ;  publisher_pdf =16 ;  references =17 ;  keywords =18 ;  abstract =19 ;  authors =20 ; } # topic1 .. topic4 are provided at command line $0~topic1  &amp;&amp;  $0~topic2  &amp;&amp;  $0~topic3  &amp;&amp;  $0~topic4  &amp;&amp;  $lang~/en/  &amp;&amp;  $authors !~/null/ { print  $id,  $title,  $authors,  $year }\n  I show how the classic Unix tools may be leveraged to solve modern problemsand that millions of records may be processed in under a minute at scale.About the data itself, it seems the biosciences research dominatesthe pu\n......", "posttime": "2020-06-03 02:39:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8fd0\u884c,awk", "title": "\u5e76\u884c\u8fd0\u884cAWK\u4ee5\u5904\u74062.56\u4ebf\u6761\u8bb0\u5f55", "title_en": "Running Awk in parallel to process 256M records", "transed": 1, "url": "https://ketancmaheshwari.github.io/posts/2020/05/24/SMC18-Data-Challenge-4.html", "via": "", "real_tags": ["\u8fd0\u884c", "awk"]}, {"category": "", "categoryclass": "", "imagename": "c3f0187519479516880e5375c7ab0f1f.jpg", "infoid": 1004878, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u53ef\u80fd\u542c\u8bf4\u8fc7\u7f16\u8bd1\u5668\u5728\u89e3\u6790\u7a0b\u5e8f\u65f6\u4f7f\u7528\u79f0\u4e3a\u62bd\u8c61\u8bed\u6cd5\u6811(AST)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u5f88\u5c11\u6709\u4eba\u77e5\u9053\u901a\u5e38\u5728\u7f16\u8bd1\u5f00\u59cb\u65f6\u5c31\u4f7f\u7528AST\uff0c\u800c\u529f\u80fd\u5f3a\u5927\u7684\u7f16\u8bd1\u5668\u901a\u5e38\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\u4f5c\u4e3a\u5176\u4e2d\u95f4\u8868\u793a\uff0c\u4ee5\u4f18\u5316\u60a8\u7684\u7a0b\u5e8f\u5e76\u5728\u7f16\u8bd1\u7684\u540e\u671f\u9636\u6bb5\u5c06\u5176\u8f6c\u6362\u4e3a\u673a\u5668\u7801\u3002\u4ee5\u6211\u4eec\u5728Shopify\u5de5\u4f5c\u7684Ruby\u7684\u5373\u65f6\u7f16\u8bd1\u5668TruffleRuby\u4e3a\u4f8b\uff0c\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u88ab\u79f0\u4e3a\u8282\u70b9\u6d77\u56fe\u5f62\u3002\u6211\u60f3\u5411\u60a8\u5c55\u793a\u8fd9\u79cd\u8282\u70b9\u6d77\u56fe\u5f62\u6570\u636e\u7ed3\u6784\u662f\u4ec0\u4e48\u6837\u5b50\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6211\u8ba4\u4e3a\u51fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u539f\u56e0\uff0c\u8fd9\u6837\u505a\u662f\u503c\u5f97\u7684\u3002\u9996\u5148\uff0c\u6211\u53ea\u662f\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u548c\u6f02\u4eae\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u4e5f\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u7ed3\u6784\u3002\u4e3a\u4e86\u901a\u8fc7\u6211\u4eec\u884c\u4e1a\u7684\u9762\u8bd5\uff0c\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u538b\u529b\u5f88\u5927\uff0c\u80fd\u5c55\u793a\u4e00\u4e9b\u6211\u4eec\u5728Shopify\u5e94\u7528\u7684\u975e\u5e38\u5b9e\u7528\u7684\u4e1c\u897f\u662f\u5f88\u68d2\u7684\u3002\u6b64\u5916\uff0c\u8282\u70b9\u6d77\u4e2d\u7684\u56fe\u5f62\u5728\u89c6\u89c9\u4e0a\u5bf9\u6211\u975e\u5e38\u6709\u5438\u5f15\u529b\uff0c\u6211\u60f3\u4e0e\u60a8\u5206\u4eab\u5b83\u4eec\u3002\u5176\u6b21\uff0c\u5bf9\u6b64\u6570\u636e\u7ed3\u6784\u7565\u77e5\u4e00\u4e8c\u53ef\u4ee5\u8ba9\u60a8\u6df1\u5165\u4e86\u89e3\u7a0b\u5e8f\u7684\u771f\u6b63\u542b\u4e49\u4ee5\u53ca\u7f16\u8bd1\u5668\u5982\u4f55\u7406\u89e3\u5b83\uff0c\u56e0\u6b64\u6211\u8ba4\u4e3a\u5b83\u53ef\u4ee5\u589e\u52a0\u60a8\u5bf9\u7a0b\u5e8f\u5982\u4f55\u8fd0\u884c\u7684\u7406\u89e3\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5e94\u8be5\u544a\u8bc9\u60a8\uff0c\u6211\u6050\u6015\u5b9e\u9645\u4e0a\u8981\u4f7f\u7528Java\u6765\u5c55\u793a\u6211\u7684\u793a\u4f8b\uff0c\u4ee5\u4fbf\u4f7f\u5b83\u4eec\u66f4\u7b80\u5355\u3001\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u8fd9\u662f\u56e0\u4e3a\u4e0eRuby\u76f8\u6bd4\uff0cJava\u5177\u6709\u66f4\u7b80\u5355\u7684\u8bed\u4e49-\u66f4\u7b80\u5355\u7684\u8bed\u8a00\u5de5\u4f5c\u89c4\u5219-\u4ee5\u53ca\u66f4\u7b80\u5355\u7684\u56fe\u5f62\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728Java\u4e2d\u7d22\u5f15\u4e00\u4e2a\u6570\u7ec4\uff0c\u90a3\u4e48\u7b80\u5355\u7684\u7d22\u5f15\u51e0\u4e4e\u5c31\u662f\u5b83\u7684\u5168\u90e8\u529f\u80fd\u3002\u5982\u679c\u5728Ruby\u4e2d\u4e3a\u6570\u7ec4\u7f16\u5236\u7d22\u5f15\uff0c\u53ef\u80fd\u4f1a\u6709\u6b63\u7d22\u5f15\u3001\u8d1f\u7d22\u5f15\u3001\u8303\u56f4\u3001\u8f6c\u6362\u3001\u5f3a\u5236\u548c\u66f4\u591a-\u53ea\u662f\u66f4\u590d\u6742\u3002\u4f46\u662f\u4e0d\u7528\u62c5\u5fc3\uff0c\u5b83\u90fd\u662f\u8d85\u57fa\u672c\u7684Java\u4ee3\u7801\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u6765\u81eaRuby\u6216\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\uff0c\u90fd\u53ef\u4ee5\u5047\u88c5\u5b83\u662f\u4f2a\u4ee3\u7801\u3002\u9605\u8bfb\u8282\u70b9\u6d77GraphsLets\u901a\u8fc7\u663e\u793a\u4e00\u4e9b\u4ee3\u7801\u548c\u76f8\u5e94\u7684\u8282\u70b9\u6d77\u56fe\u76f4\u63a5\u8fdb\u5165\u3002\u4e0b\u9762\u662f\u4e00\u4e2aJava\u65b9\u6cd5\u3002\u6b63\u5982\u6211\u6240\u8bf4\u7684\uff0c\u5b83\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u9ad8\u7ea7Java\u7279\u6027\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u613f\u610f\uff0c\u60a8\u53ef\u4ee5\u5047\u88c5\u5b83\u662f\u4f2a\u4ee3\u7801\u3002\u5b83\u4f7f\u7528\u7b80\u5355\u7684\u9012\u5f52\u65b9\u6cd5\u4ece\u79f0\u4e3a\u6590\u6ce2\u90a3\u5951\u5e8f\u5217\u7684\u6570\u5b66\u5e8f\u5217\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6570\u5b57\u3002\u4ee5\u4e0b\u662f\u8be5\u7a0b\u5e8f\u7684\u4f20\u7edfAST\u6570\u636e\u7ed3\u6784\u3002\u5b83\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u76f4\u63a5\u6620\u5c04\u5230\u6587\u672c\u6e90\u4ee3\u7801\uff0c\u4e0d\u6dfb\u52a0\u548c\u5220\u9664\u4efb\u4f55\u5185\u5bb9\u3002\u8981\u8fd0\u884c\u5b83\uff0c\u60a8\u9700\u8981\u6cbf\u7740\u6811\u4e2d\u7684\u4e00\u6761\u8def\u5f84\uff0c\u4ece\u9876\u90e8\u5f00\u59cb\uff0c\u6309\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5b83\u3002\u62bd\u8c61\u6590\u6ce2\u7eb3\u5951\u5e8f\u5217\u7a0b\u5e8f\u7684\u8bed\u6cd5\u6811\uff0c\u4e0b\u9762\u662f\u540c\u4e00\u7a0b\u5e8f\u7684\u8282\u70b9\u6d77\u56fe\u3002\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u636e\u7ed3\u6784\u8f6c\u50a8\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u524d\u9762\u5c55\u793a\u7684\u7f16\u8bd1\u6590\u6ce2\u7eb3\u5951\u5e8f\u5217\u7684Java\u65b9\u6cd5\u65f6\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u4e00\u6837\uff0c\u8282\u70b9\u6d77\u56fe\u8868\u662f\u6590\u6ce2\u7eb3\u5951\u5e8f\u5217\u7a0b\u5e8f\u7684\u8282\u70b9\u6d77\u56fe\u8868\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a\uff0c\u4f46\u6211\u4f1a\u5c06\u5176\u5206\u89e3\u3002\u6211\u4eec\u6709\u65b9\u6846\u548c\u7bad\u5934\uff0c\u6240\u4ee5\u5b83\u5c31\u50cf\u6d41\u7a0b\u56fe\u4e00\u6837\u3002\u6846\u662f\u64cd\u4f5c\uff0c\u7bad\u5934\u662f\u64cd\u4f5c\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u4e00\u4e2a\u64cd\u4f5c\u53ea\u6709\u5728\u6240\u6709\u5e26\u7bad\u5934\u7684\u64cd\u4f5c\u90fd\u8fd0\u884c\u5b8c\u4e4b\u540e\u624d\u80fd\u8fd0\u884c\u3002\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\u662f\uff0c\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u7bad\u5934\uff0c\u5b83\u4eec\u975e\u5e38\u4e0d\u540c\u3002\u7c97\u7ea2\u8272\u7bad\u5934\u663e\u793a\u63a7\u4ef6\u5728\u7a0b\u5e8f\u4e2d\u7684\u6d41\u52a8\u65b9\u5f0f\u3002\u7eff\u8272\u7ec6\u7bad\u5934\u663e\u793a\u6570\u636e\u5728\u7a0b\u5e8f\u4e2d\u7684\u6d41\u52a8\u65b9\u5f0f\u3002\u865a\u7ebf\u7684\u9ed1\u8272\u7bad\u5934\u662f\u5143\u4fe1\u606f\u3002\u6709\u4e9b\u4eba\u753b\u4e86\u6307\u5411\u4e0a\u65b9\u7684\u7eff\u8272\u7bad\u5934\uff0c\u4f46\u5728\u6211\u4eec\u56e2\u961f\u4e2d\uff0c\u6211\u4eec\u8ba4\u4e3a\u663e\u793a\u5411\u4e0b\u6d41\u52a8\u7684\u6570\u636e\u4f1a\u66f4\u7b80\u5355\u3002\u8fd8\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u64cd\u4f5c\u6846\u3002\u65b9\u5f62\u7684\u7ea2\u8272\u76d2\u5b50\u505a\u4e86\u4e00\u4e9b\u4e8b\u60c5\uff1b\u5b83\u4eec\u6709\u526f\u4f5c\u7528\uff0c\u6216\u8005\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u5fc5\u987b\u7684\u3002\u83f1\u5f62\u7eff\u8272\u65b9\u6846\u8ba1\u7b97\u4e00\u4e9b\u4e1c\u897f(\u5b83\u4eec\u662f\u7eaf\u7684\uff0c\u6216\u65e0\u526f\u4f5c\u7528\u7684)\uff0c\u7eff\u8272\u8868\u793a\u5b89\u5168\u6267\u884c\uff0cP(0)\u8868\u793a\u53c2\u65700\uff0c\u5373\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002C(2)\u8868\u793a\u5e38\u91cf\u503c2\u3002\u5927\u591a\u6570\u5176\u4ed6\u8282\u70b9\u5e94\u8be5\u53ef\u4ee5\u4ece\u5b83\u4eec\u7684\u6807\u7b7e\u4e2d\u7406\u89e3\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4fbf\u4e8e\u53c2\u8003\u7684\u6570\u5b57\u3002\u8981\u5728\u60a8\u7684\u5934\u8111\u4e2d\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8bf7\u4ece\u9876\u90e8\u7684\u5f00\u59cb\u8282\u70b9\u5f00\u59cb\uff0c\u7136\u540e\u5411\u4e0b\u5411\u4e0b\u79fb\u52a8\u7ea2\u8272\u7c97\u7bad\u5934\uff0c\u6307\u5411\u5e95\u90e8\u7684\u4e00\u4e2a\u8fd4\u56de\u8282\u70b9\u3002\u5982\u679c\u60a8\u7684\u6b63\u65b9\u5f62\u7ea2\u8272\u65b9\u6846\u6709\u4e00\u4e2a\u7bad\u5934\u4ece\u692d\u5706\u5f62\u6216\u83f1\u5f62\u7eff\u8272\u65b9\u6846\u6307\u5411\u5b83\uff0c\u90a3\u4e48\u60a8\u9996\u5148\u8fd0\u884c\u90a3\u4e2a\u7eff\u8272\u65b9\u6846\uff0c\u4ee5\u53ca\u6307\u5411\u8be5\u7eff\u8272\u65b9\u6846\u7684\u4efb\u4f55\u5176\u4ed6\u7eff\u8272\u65b9\u6846\u3002\u6211\u8ba4\u4e3a\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u4e00\u4e2a\u4e3b\u8981\u7279\u70b9\u662f\u975e\u5e38\u68d2\u7684\u3002\u7ea2\u8272\u90e8\u5206\u662f\u5fc5\u5907\u7a0b\u5e8f\uff0c\u7eff\u8272\u90e8\u5206\u662f\u5c0f\u529f\u80fd\u7a0b\u5e8f\u3002\u6211\u4eec\u5df2\u7ecf\u4ece\u5355\u4e2aJava\u7a0b\u5e8f\u4e2d\u5206\u79bb\u51fa\u8fd9\u4e24\u4e2a\u3002\u4ed6\u4eec\u662f\u5728\u91cd\u8981\u7684\u5730\u65b9\u52a0\u5165\u7684\uff0c\u800c\u4e0d\u662f\u5728\u4e0d\u91cd\u8981\u7684\u5730\u65b9\u52a0\u5165\u7684\u3002\u8fd9\u5c06\u5728\u7a0d\u540e\u53d8\u5f97\u6709\u7528\u3002\u6211\u901a\u8fc7\u56fe\u8868\u7406\u89e3\u4e86\u6211\u8bf4\u7684\uff0c\u6211\u8ba4\u4e3a\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u56fe\u8868\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u4f60\u7684\u7a0b\u5e8f\u7684\u89c1\u89e3\u3002\u8fd9\u5c31\u662f\u6211\u6240\u8bf4\u7684\u610f\u601d\u3002\u5f53\u4f60\u7528\u6587\u672c\u7f16\u5199\u7a0b\u5e8f\u65f6\uff0c\u4f60\u662f\u5728\u7528\u7ebf\u6027\u683c\u5f0f\u7f16\u5199\uff0c\u8fd9\u610f\u5473\u7740\u5f88\u591a\u4e1c\u897f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f", "note_en": "You may have heard that a compiler uses a data structure called an abstract-syntax-tree, or AST, when it parses your program, but it\u2019s less common knowledge that an AST is normally used just at the very start of compilation, and a powerful compiler generally uses a more advanced type of data structure as its intermediate representation to optimize your program and translate it to machine code in the later phases of compilation. In the case of TruffleRuby, the just-in-time compiler for Ruby that we\u2019re working on at Shopify, this data structure is something called a sea-of-nodes graph.I want to show you a little of what this sea-of-nodes graph data structure looks like and how it works, and I think it\u2019s worth doing this for this for a couple of reasons. First of all, I just think it\u2019s a really interesting and beautiful data structure, but also a practical one. There\u2019s a lot of pressure to learn about data structures and algorithms in order to pass interviews in our industry, and it\u2019s nice to show something really practical that we\u2019re applying here at Shopify. Also, the graphs in sea-of-nodes are just really visually appealing to me and I wanted to share them.Secondly, knowing just a little about this data structure can give you some pretty deep insights into what your program really means and how the compiler understands it, so I think it can increase your understanding of how your programs run.\u00a0I should tell you at this point that I\u2019m afraid I\u2019m actually going to be using Java to show my examples, in order to keep them simpler and easier to understand. This is because compared to Ruby, Java has much simpler semantics\u2014simpler rules for how the language works\u2014and so much simpler graphs. For example, if you index an array in Java that\u2019s pretty much all there is to it, simple indexing. If you index an array in Ruby you could have a positive index, a negative index, a range, conversion, coercion, and lots more\u2014it\u2019s just more complicated. But don\u2019t worry, it\u2019s all super-basic Java code, so you can just pretend it\u2019s pseudo code if you\u2019re coming from Ruby or any other language.Reading Sea-of-nodes GraphsLets dive straight in by showing some code and the corresponding sea-of-nodes graph.Here\u2019s a Java method. As I said, it\u2019s not using any advanced Java features so you can just pretend it\u2019s pseudo code if you want to. It returns a number from a mathematical sequence known as the Fibonacci sequence, using a simple recursive approach.Here\u2019s the traditional AST data structure for this program. It\u2019s a tree, and it directly maps to the textual source code, adding and removing nothing. To run it you\u2019d follow a path in the tree, starting at the top and moving through it depth-first.Abstract syntax tree for the Fibonacci sequence programAnd here\u2019s the sea-of-nodes graph for the same program. This is a real dump of the data structure as used in practice to compile the Java method for the Fibonacci sequence we showed earlier.Sea-of-nodes graph\u00a0for the Fibonacci sequence programThere\u2019s quite a lot going on here, but I\u2019ll break it down.We\u2019ve got boxes and arrows, so it\u2019s like a flowchart. The boxes are operations, and the arrows are connections between operations. An operation can only run after all the operations with arrows into it have run.A really important concept is that there are two main kinds of arrows that are very different. Thick red arrows show how the control flows in your program. Thin green arrows show how the data flows in your program. The dashed black arrows are meta-information. Some people draw the green arrows pointing upwards, but in our team we think it\u2019s simpler to show data flowing downwards.There are also two major kinds of boxes for operations. Square red boxes do something; they have a side-effect or are imperative in some way. Diamond green boxes compute something (they\u2019re pure, or side-effect free), and green for safe to execute whenever.P(0) means parameter 0, or the first parameter. C(2) means a constant value of 2. Most of the other nodes should be understandable from their labels. Each node has a number for easy reference.To run the program in your head, start at the Start node at the top and move down thick red arrows towards one of the Return nodes at the bottom. If your square red box has an arrow into it from an oval or diamond green box, then you run that green box, and any other green boxes pointing into that green box, first.Here\u2019s one major thing that I think is really great about this data structure. The red parts are an imperative program, and the green parts are mini functional programs. We\u2019ve separated the two out of the single Java program. They\u2019re joined where it matters, and not where it doesn\u2019t. This will get useful later on.Understanding Through GraphsI said that I think you can learn some insights about your program using these graphs. Here\u2019s what I mean by that.When you write a program in text, you\u2019re writing in a linear format that implies lots of things that aren\u2019t really there. When we get the program into a graph format, we can encode only the actual precise rules of the language and relax everything else.I know that\u2019s a bit abstract, so here\u2019s a concrete example.Based on a three-way if-statement it does some arithmetic. Notice that b * c is common to two of the three branches.Sea-of-nodes graph for a three-way if-statement-programWhen we look at the graph for this we can see a really clear division between the imperative parts of the program and the functional parts. Notice in particular that there is only one multiplication operation. The value of a * b is the same on whichever branch you compute it, so we have just one value node in the graph to compute it. It doesn\u2019t matter that it appeared twice in the textual source code\u2014it has been de-duplicated by a process known as global value numbering. Also, the multiplication node isn\u2019t fixed in either of the branches, because it\u2019s a functional operation and it could happen at any point and it makes no change to what the program achieves.When you look at the source code you think that you pick a branch and only then you may execute a * b, but looking at the graph we can see that the computation a * b is really free from which branch you pick. You can run it before the branch if you want to, and then just ignore it if you take the branch which doesn\u2019t need it. Maybe doing that produces smaller machine code because you only have the code for the multiplication once, and maybe it\u2019s faster to do the multiplication before the branch because your processor can then be busy doing the multiplication while it decides which branch to go to.As long as the multiplication node\u2019s result is ready when we need it, we\u2019re free to put it wherever we want it.You may look at the original code and say that you could refactor it to have the common expression pulled out in a local variable. We can see here that doing that makes no difference to how the compiler understands the code. It may still be worth it for readability, but the compiler sees through your variable names and moves the expression to where it thinks it makes sense. We would say that it floats the expression.Graphs With LoopsHere\u2019s another example. This one has a loop.It adds the parameter a to an accumulator n times.Sea-of-nodes graph for a program with loopsThis graph has something new, an extra thick red arrow backward now. That closes the loop, it\u2019s the jump back to the start of the loop for a new iteration.The program is written in an imperative way, with a traditional iterative looping construct as you\u2019d use in C, but if we look at the little isolated functional part, we can see the repeated addition on its own very clearly. There\u2019s literally a little loop showing that the + 1 operation runs repeatedly on its own result.Isolated functional part of sea-of-nodes graphThat phi node (the little circle with the line in it is a Greek letter) is a slightly complicated concept with a traditional name. It means that the value at that point may be one of multiple possibilities.Should We Program Using Graphs?Every few years someone writes a new PhD thesis on how we should all be programming graphically instead of using text. I think you can possibly see the potential benefits and the practical drawbacks of doing that by looking at these graphs.One benefit is that you\u2019re free to reshape, restructure, and optimize your program by manipulating the graph. As long as you maintain a set of rules, the rules for the language you\u2019re compiling, you can do whatever you want.A drawback is that it\u2019s not exactly compact. This is a 6 line method but it\u2019s a full-screen to draw it as a graph, and it already has 21 nodes and 22 arrows in it. As we get bigger graphs it becomes impossible to draw them without the arrows starting to cross and they become so long that they have no context\u2014you can\u2019t see where they\u2019re going to or coming from, and then it becomes much harder to understand.Using Sea-of-nodes Graphs at ShopifyAt Shopify we\u2019re working on ways to understand these graphs at Shopify-scale. The graphs for idiomatic Ruby code in a codebase like our Storefront Renderer can get very large and very complicated\u2014for example this is the Ruby equivalent to the Java Fibonacci example.Sea-of-nodes graph for the Java Fibonacci example in RubyOne tool we\u2019re building is the program to draw these graphs that I\u2019ve been showing you. It takes compiler debug dumps and produces these illustrations. We\u2019re also working on a tool to decompile the graphs back to Ruby code, so that we can understand how Ruby code is optimized, by printing the optimized Ruby code. That means that developers who just know Ruby can use Ruby to understand what the compiler is doing.SummaryIn summary, this sea-of-nodes graph data structure allows us to represent a program in a way that relaxes what doesn\u2019t matter and encodes the underlying connections between parts of the program. The compiler uses it to optimize your program. You may think of your program as a linear sequence of instructions, but really your compiler is able to see through that to something simpler and more pure, and in TruffleRuby it does that using sea-of-nodes.Sea-of-nodes graphs are an interesting and, for most people, novel way to look at your program.Additional InformationA simple graph-based intermediate representation, Cliff Click, Michael Paleczny, 1995An intermediate representation for speculative optimizations in a dynamic compiler, Gilles Duboscq, Thomas W\u00fcrthinger, Lukas Stadler, Christian Wimmer, Doug Simon, Hanspeter M\u00f6ssenb\u00f6ck, 2013If this sounds like the kind of problems you'd enjoy solving, come work for us. Check out the\u00a0Software Development at Shopify (Expression of Interest) career posting\u00a0and apply specifying an interest in Developer Acceleration.\u00a0", "posttime": "2020-06-03 02:38:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u56fe\u5f62,programs", "title": "\u4f7f\u7528\u56fe\u5f62\u7406\u89e3\u7a0b\u5e8f", "title_en": "Understanding Programs Using Graphs", "transed": 1, "url": "https://engineering.shopify.com/blogs/engineering/understanding-programs-using-graphs", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u56fe\u5f62", "programs"]}, {"category": "", "categoryclass": "", "imagename": "3878eae83a677de05b12902d8d537938.png", "infoid": 1004877, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4e3ahttps://p2p.riot.im\u53d1\u5e03\u4e86\u4e00\u4e2a\u91cd\u5927\u66f4\u65b0--\u5728\u975e\u79c1\u4eba\u6d4f\u89c8\u6a21\u5f0f\u4e0b\u542f\u52a8\u684c\u9762Chrome\u6216Firefox\uff0c\u8bd5\u4e00\u8bd5\u5427\uff01\n\u6b63\u5982\u8bb8\u591a\u4eba\u73b0\u5728\u77e5\u9053\u7684\u90a3\u6837\uff0c\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u81ea12\u6708\u4e2d\u65ec\u4ee5\u6765\u4e00\u76f4\u5728\u8bd5\u9a8c\u5728\u5bf9\u7b49\u4f53\u7cfb\u7ed3\u6784\u4e2d\u8fd0\u884cMatrix-\u5728\u8fd9\u79cd\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u6bcf\u4e2a\u7528\u6237\u90fd\u62e5\u6709\u7edd\u5bf9\u7684\u81ea\u4e3b\u6743\u548c\u5bf9\u4ed6\u4eec\u7684\u5bf9\u8bdd\u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u5bf9\u8bdd\u552f\u4e00\u5b58\u5728\u7684\u5730\u65b9\u5c31\u662f\u4ed6\u4eec\u81ea\u5df1\u7684\u8bbe\u5907\u3002\n\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u8fd9\u662fMatrix\u5408\u4e4e\u903b\u8f91\u7684\u6700\u7ec8\u76ee\u6807\uff1a\u6211\u4eec\u7684\u76ee\u6807\u4e00\u76f4\u662f\u8d4b\u4e88\u7528\u6237\u5bf9\u5176\u901a\u4fe1\u7684\u5b8c\u5168\u63a7\u5236\u6743\uff0c\u800c\u4e0d\u662f\u53d7\u5236\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u670d\u52a1\u63d0\u4f9b\u5546\uff0c\u5728P2P\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u5b8c\u5168\u5c06\u5b89\u5168\u901a\u4fe1\u7684\u6743\u529b\u8fd8\u7ed9\u4eba\u4eec\u3002\nP2P Matrix\u4e0d\u4ec5\u4ec5\u662f\u8ba9\u7528\u6237\u5b58\u50a8\u4ed6\u4eec\u81ea\u5df1\u7684\u5bf9\u8bdd\uff1a\u5b83\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5728\u672c\u5730\u7f51\u7edc\u3001\u7f51\u72b6\u7f51\u7edc\u6216\u4e92\u8054\u7f51\u88ab\u5207\u65ad\u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\u6765\u907f\u514d\u5bf9\u4e92\u8054\u7f51\u672c\u8eab\u7684\u4f9d\u8d56\u3002\u66f4\u6709\u8da3\u7684\u662f\uff0c\u6ca1\u6709\u5bb6\u5ead\u670d\u52a1\u8005\uff0c\u5c31\u6ca1\u6709\u5730\u65b9\u79ef\u7d2f\u5173\u4e8e\u8c01\u5728\u4e0e\u8c01\u4ea4\u8c08\u3001\u4f55\u65f6\u4e0e\u8c01\u4ea4\u8c08\u7684\u5143\u6570\u636e-\u8fd9\u662f\u5bf9\u5f53\u4ecaMatrix\u7f51\u7edc\u7684\u5408\u7406\u62b1\u6028\uff0c\u56e0\u4e3a\u5728\u7ed9\u5b9a\u7684\u5bf9\u8bdd\u4e2d\uff0c\u6240\u6709\u7528\u6237\u7684\u5bb6\u5ead\u670d\u52a1\u8005\u90fd\u5fc5\u987b\u5b58\u50a8\u8be5\u4f1a\u8bdd\u7684\u5143\u6570\u636e\u3002P2P\u8fd8\u8ba9\u6211\u4eec\u4ece\u6839\u672c\u4e0a\u7b80\u5316\u4e86\u65b0\u7528\u6237\u7684\u6ce8\u518c\uff0c\u5982\u679c\u4ed6\u4eec\u4e0d\u9700\u8981\u9009\u62e9\u4e00\u53f0\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fd0\u884c-\u800c\u4e14\u6211\u4eec\u907f\u514d\u4e86\u65e0\u610f\u4e2d\u5c06\u7528\u6237\u96c6\u4e2d\u5230\u516c\u5171\u670d\u52a1\u5668\u4e0a\u3002\nP2P\u8fd8\u8feb\u4f7f\u6211\u4eec\u89e3\u51b3Matrix\u4e2d\u8bb8\u591a\u6700\u96be\u89e3\u51b3\u7684\u9057\u7559\u95ee\u9898\uff1a\u4f8b\u5982\uff0c\u8003\u8651\u5230\u591a\u8bbe\u5907P2P\u8981\u6c42\u60a8\u7684\u5e10\u6237\u5b58\u5728\u4e8e\u591a\u4e2a\u5730\u65b9\uff0c\u56e0\u6b64\u591a\u5bbf\u4e3b\u5e10\u6237\u3002\u8fd9\u53cd\u8fc7\u6765\u53c8\u4e3a\u4eca\u5929\u7684Matrix\u7f51\u7edc\u4e0a\u7684\u5e10\u6237\u91ca\u653e\u4e86\u9ad8\u53ef\u7528\u6027\u548c\u5730\u7406\u5197\u4f59(\u60f3\u8c61\u4e00\u4e0b\uff0c\u62e5\u6709\u4e00\u4e2a\u795e\u5947\u5730\u505a\u4e86\u6b63\u786e\u4e8b\u60c5\u7684\u4e3b\u548c\u5907\u4efd\u4e3b\u670d\u52a1\u5668\uff01)\uff0c\u4ee5\u53ca\u5e10\u6237\u7684\u53ef\u79fb\u690d\u6027\uff0c\u4ece\u800c\u8fd8\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u4e4b\u95f4\u6258\u7ba1\u548c\u8d1f\u8f7d\u5e73\u8861\u5e10\u6237\uff0c\u751a\u81f3\u6539\u8fdb\u4e86GDPR\u9075\u4ece\u6027(\u56e0\u4e3a\u5982\u679c\u60a8\u7684\u7528\u6237ID\u662f\u77ed\u6682\u7684\uff0c\u4ed6\u4eec\u5c06\u4e0d\u518d\u4eb2\u81ea\u8bc6\u522b\u5b58\u50a8\u5728Matrix\u623f\u95f4\u4e2d\u7684\u4fe1\u606f)\u3002\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u597d\u7684\u5b89\u5168\u673a\u5236\uff0c\u4ee5\u907f\u514d\u4eba\u4eec\u5229\u7528\u7f51\u7edc\u7684\u533f\u540d\u6027\u8d28\u8fdb\u884c\u6ee5\u7528\uff0c\u4ece\u800c\u52a0\u5feb\u6211\u4eec\u4e3a\u4eca\u5929\u7684Matrix\u7f51\u7edc\u6240\u505a\u7684\u5de5\u4f5c\u3002\n\u6211\u4eec\u5bf9\u5f85P2P\u7684\u65b9\u5f0f\u662f\u201c\u7b28\u624b\u7b28\u811a\u4f46\u53c8\u5929\u624d\u201d\u7684\u65b9\u6cd5\uff0c\u5373\u5728Matrix\u5ba2\u6237\u7aef\u65c1\u8fb9\u6216\u5185\u90e8\u4f7f\u7528\u5bb6\u5ead\u670d\u52a1\u5668\u5e76\u5728\u5ba2\u6237\u673a\u4e0a\u8fd0\u884c\u5b83\u4eec-\u8fd9\u610f\u5473\u7740\u4efb\u4f55Matrix\u5ba2\u6237\u7aef\u90fd\u4e0d\u9700\u8981\u4efb\u4f55\u66f4\u6539\u5c31\u53ef\u4ee5\u4e0eP2P Matrix\u5bf9\u8bdd\uff0c\u56e0\u6b64P2P Matrix\u53ef\u4ee5\u7acb\u5373\u4eceRiot\u548c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u5de5\u4f5c\u4e2d\u53d7\u76ca\u3002\u56e0\u6b64\uff0cP2P\u4e5f\u662f\u5f00\u53d1\u80fd\u591f\u5728\u5ba2\u6237\u7aef\u9ad8\u6548\u8fd0\u884c\u7684\u5c0f\u5f97\u591a\u7684\u5bb6\u5ead\u670d\u52a1\u5668\u7684\u5de8\u5927\u52a8\u529b(\u4f8b\u5982Dendrite\uff01)--\u8fd9\u5bf9Matrix\u6574\u4f53\u6765\u8bf4\u5f53\u7136\u662f\u4e2a\u597d\u6d88\u606f\u3002\u5b83\u8fd8\u8feb\u4f7f\u6211\u4eec\u5f00\u53d1\u66f4\u5177\u4f38\u7f29\u6027\u7684\u8def\u7531\u7b97\u6cd5(\u56e0\u4e3a\u60a8\u4e0d\u5e0c\u671b\u60a8\u7684\u5ba2\u6237\u7aef\u5728\u6bcf\u6b21\u53d1\u9001\u6d88\u606f\u65f6\u90fd\u5fc5\u987b\u4e0e\u623f\u95f4\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u8bbe\u5907\u4ea4\u8c08\uff01)\u3002\u8fd9\u4e5f\u523a\u6fc0\u4e86\u4f4e\u5e26\u5bbd\u77e9\u9635\u4f20\u8f93\u7684\u53d1\u5c55(\u56e0\u4e3a\u60a8\u4e0d\u5e0c\u671b\u4e0e\u591a\u4e2a\u5bf9\u7b49\u70b9\u4ea4\u8c08\u7684\u989d\u5916\u558b\u558b\u4e0d\u4f11\u4f1a\u5360\u7528\u60a8\u7684\u6240\u6709\u5e26\u5bbd)\u3002\u6700\u540e\uff0c\u5b83\u8feb\u4f7f\u6211\u4eec\u771f\u6b63\u52a0\u56fa\u8054\u90a6\uff0c\u56e0\u4e3a\u8282\u70b9\u4e0d\u65ad\u51fa\u73b0\u548c\u6d88\u5931\uff0c\u8fd9\u7ed9\u8054\u90a6\u5e26\u6765\u4e86\u6bd4\u6211\u4eec\u4eca\u5929\u770b\u5230\u7684\u76f8\u5bf9\u9759\u6001\u7684\u4e3b\u670d\u52a1\u5668\u66f4\u591a\u7684\u538b\u529b\u6d4b\u8bd5\u3002\n\u56e0\u6b64\uff0c\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0cP2P\u4e00\u76f4\u5728\u4e3a\u6211\u4eec\u7684\u8bb8\u591a\u957f\u671fMatrix\u5de5\u4f5c\u63d0\u4f9b\u71c3\u6599\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5df2\u7ecf\u8fdb\u884c\u4e86\u4e09\u4e2a\u4e3b\u8981\u7684\u5b9e\u9a8c\uff1a\u5728FOSDEM\u4e0a\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u4f7f\u7528HTTP over libp2p\u4f5c\u4e3a\u4f20\u8f93\u6765\u8fd0\u884c\u6211\u4eec\u7684\u4e0b\u4e00\u4ee3Dendrite\u4e3b\u670d\u52a1\u5668\u8fd0\u884c\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u8fd8\u91cd\u70b9\u4ecb\u7ecd\u4e86Timoth\u00e9e Flowe\u5728EPFL\u7684\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u5c1d\u8bd5\u4f7f\u7528Synapse\u901a\u8fc7Yggdrasil\u4e0eP2P CoAP\u5bf9\u8bdd\uff0c\u4f5c\u4e3a\u901a\u8fc7\u4ee3\u7406\u7684\u4f20\u8f93\u3002\n\u7136\u800c\uff0c\u6700\u8fd1\u6211\u4eec\u4e00\u76f4\u5728\u8bd5\u9a8c\u5c06Dendrite\u7f16\u8bd1\u6210Web Assembly\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u670d\u52a1\u5de5\u4f5c\u8005\u5d4c\u5165\u5230Riot Web\u4e2d\u8fd0\u884c\uff0c\u4f7f\u7528HTTP over libp2p\u7684websocket\u4f20\u8f93(\u901a\u8fc7websocket\u96c6\u5408\u670d\u52a1\u5668\u8fdb\u884c\u534f\u8c03)\u3002\u4ece\u67b6\u6784\u4e0a\u770b\uff0c\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a\n\u4eca\u5929\uff0c\u6211\u4eec\u5728https://p2p.riot.im\u4e0a\u53d1\u5e03\u4e86\u8fd9\u4e2aP2P\u6f14\u793a\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u65b0\u7684Alpha\u7248\u672c(\u9700\u8981\u684c\u9762Chrome\u6216\u706b\u72d0\u5728\u975e\u79c1\u4eba\u6d4f\u89c8\u6a21\u5f0f\u4e0b)--\u5e0c\u671b\u5b83\u80fd\u7ed9\u6211\u4eec\u4e00\u4e2a\u771f\u6b63\u6709\u7528\u548c\u5177\u4f53\u7684\u4f53\u9a8c\u3002\n\u60a8\u7684\u5bf9\u8bdd\u73b0\u5728\u4fdd\u5b58\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u5b58\u50a8\u4e2d(\u901a\u8fc7IndexedDB)\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u8981\u53c2\u4e0e\u7ed9\u5b9a\u5bf9\u8bdd\u7684\u6240\u6709\u6d4f\u89c8\u5668\u4e0d\u6e05\u9664\u5176\u672c\u5730\u5b58\u50a8\uff0cP2P\u7f51\u7edc\u4e0a\u7684\u623f\u95f4\u5c31\u4f1a\u4e00\u76f4\u5b58\u5728\uff01\n\u60a8\u7684\u623f\u95f4\u76ee\u5f55\u5217\u51fa\u4e86\u7f51\u7edc\u4e0a\u6d3b\u52a8\u8282\u70b9\u53d1\u5e03\u7684\u6240\u6709\u623f\u95f4\u7684\u6240\u6709\u522b\u540d\u3002\u6b64\u5916\uff0c\u6211\u4eec\u73b0\u5728\u4f1a\u5728\u60a8\u52a0\u5165\u516c\u5171\u623f\u95f4\u65f6\u81ea\u52a8\u53d1\u5e03\u672c\u5730\u623f\u95f4\u522b\u540d\uff0c\u8fd9\u6837\u5373\u4f7f\u6700\u521d\u521b\u5efa\u522b\u540d\u7684\u670d\u52a1\u5668\u5df2\u7ecf\u6d88\u5931\uff0c\u5176\u4ed6\u4eba\u4e5f\u53ef\u4ee5\u901a\u8fc7\u60a8\u53d1\u73b0\u8be5\u623f\u95f4\u3002\n\u8282\u70b9\u4e4b\u95f4\u7684\u8054\u5408\u6539\u8fdb\u975e\u5e38\u591a-\u4f8b\u5982\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u8054\u673a\u65f6\uff0c\u5176\u4ed6\u8282\u70b9\u73b0\u5728\u5e94\u8be5\u81ea\u52a8\u68c0\u6d4b\u5e76\u5411\u5176\u53d1\u9001\u56de\u6eda\u3002\u9080\u8bf7\u5e94\u8be5\u4f1a\u8d77\u4f5c\u7528\uff0c\u800c\u4e14\u5e94\u8be5\u4e0d\u4f1a\u518d\u6709\u4efb\u4f55\u610f\u5916\u7684\u5bc6\u6587\u3002\n\u4e0d\u7528\u8bf4\uff0c\u8fd9\u65b9\u9762\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662fApache\u8bb8\u53ef\u4e0b\u7684\u5f00\u6e90\u4ee3\u7801\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u7279\u522b\u5192\u9669\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528https://github.com/matrix-org/dendrite/blob/master/build/docker/DendriteJS.Dockerfile\u4e0a\u7684Docker\u6587\u4ef6\u6216\u9075\u5faahttps://github.com/matrix-org/dendrite/blob/master/docs/p2p.md.\u4e0a\u7684\u8bf4\u660e\u5c06\u60a8\u81ea\u5df1\u7684P2P Dendrite\u5d4c\u5165\u5230Riot Web\u4e2d\u3002\n\u6700\u540e\uff0c\u8bf7\u7406\u89e3\uff0c\u6f14\u793a\u5f88\u53ef\u80fd\u4e0d\u662fP2P Matrix\u6700\u7ec8\u7248\u672c\u7684\u6837\u5b50-\u8fd9\u53ea\u662f\u6211\u4eec\u8c03\u67e5\u6700\u4f73\u524d\u8fdb\u9014\u5f84\u7684\u4e00\u7cfb\u5217\u5b9e\u9a8c\u4e2d\u7684\u4e00\u4e2a\u6b65\u9aa4\uff1a)\u3002\n\u66f4\u591a\u7684\u8054\u90a6\u8c03\u8bd5(\u4ee5\u53ca\u6302\u63a5\u5728Tardis\u4e2d\uff0c\u5e76\u5199\u4e0b\u6211\u4eec\u5728Dendrite\u4e2d\u5b9e\u73b0\u8054\u90a6\u7684\u6240\u6709\u77e5\u8bc6\uff01)\u3002\n\u5728Dendrite\u4e2d\u8fde\u63a5E2E\u52a0\u5bc6API(\u8fd9\u5e76\u4e0d\u662f\u8bf4\u5728\u7eafP2P\u4e16\u754c\u4e2d\u5b83\u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u5f88\u591a\u597d\u5904)\nWebRTC\u4f20\u8f93\u3002\u539f\u6765\u670d\u52a1\u4eba\u5458\u4e0d\u5141\u8bb8\u4f7f\u7528WebRTC\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u901a\u8fc7\u586b\u9699\u8fde\u63a5\u5230Riot\u624d\u80fd\u4f7f\u7528\u771f\u6b63\u7684\u70b9\u5bf9\u70b9WebRTC\u6570\u636e\u901a\u9053\uff0c\u800c\u4e0d\u662f\u901a\u8fc7WebSocket\u96c6\u5408\u670d\u52a1\u5668\u4e2d\u7ee7\u6240\u6709\u6d41\u91cf\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u5728\u672a\u6765\u7684\u5b9e\u9a8c\u4e2d\u8fd8\u6709\u4e00\u4e9b\u66f4\u5927\u7684\u95ee\u9898\u6709\u5f85\u56de\u7b54\u3002\n\u9996\u5148\uff1a\u6211\u4eec\u8fd8\u6ca1\u6709\u4e00\u4e2a\u201c\u5b58\u50a8\u8f6c\u53d1\u201d\u8282\u70b9\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u5728\u6240\u6709\u53c2\u4e0e\u8bbe\u5907\u90fd\u79bb\u7ebf\u7684\u60c5\u51b5\u4e0b\u4ee3\u8868\u623f\u95f4\u4e2d\u7ee7\u6d88\u606f\u3002\u7b2c\u4e00\u6b65\u662f\u8fd0\u884c\u652f\u6301P2P\u7684\u5bb6\u5ead\u670d\u52a1\u5668\u7aef\uff0c\u4f46\u968f\u540e\u5143\u6570\u636e\u5c06\u5f00\u59cb\u4e3a\u5176\u6258\u7ba1\u7684\u4f1a\u8bdd\u79ef\u7d2f\u670d\u52a1\u5668\u7aef\u3002\u4e00\u79cd\u66f4\u6709\u8da3\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u5b58\u50a8\u8f6c\u53d1\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u6df7\u6dc6\u4e86\u8c01\u5728\u4e0e\u8c01\u4ea4\u8c08\uff0c\u4f8b\u5982\u6df7\u5408\u7f51\u7edc\uff0c\u751a\u81f3\u53ef\u80fd\u63d0\u4f9b\u5bf9\u7f51\u7edc\u6d41\u91cf\u6a21\u5f0f\u5206\u6790\u7684\u963b\u529b\u3002\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4e00\u4e2a\u975e\u5e38\u5f00\u653e\u7684\u7814\u7a76\u9886\u57df\uff0c\u4f46\u6211\u4eec\u6b63\u5728\u8fdb\u5165\uff1ad\u3002\n\u5176\u6b21\uff1a\u6211\u4eec\u5e0c\u671b\u66f4\u591a\u5730\u5c1d\u8bd5\u5176\u4ed6\u4f20\u8f93\u65b9\u5f0f\uff0c\u5e76\u627e\u51fa\u54ea\u79cd\u65b9\u5f0f\u6700\u9002\u5408Matrix\u3002libp2p\u6709\u4e00\u4e9b\u975e\u5e38\u4ee4\u4eba\u5174\u594b\u7684\u65b0\u4e1c\u897f\uff0c\u5b83\u7684\u5f62\u5f0f\u662fGossipsubv1.1--\u5728libp2p\u4e2d\u4e3apubsub\u6d41\u91cf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u667a\u80fd\u7684\u8def\u7531\u7b97\u6cd5\uff0cDavid Dias\u5728\u7b2c\u4e00\u5c4aOpen Tech Will Save us Meetup\u4e0a\u7ed9\u6211\u4eec\u505a\u4e86\u4e00\u4e2a\u8d35\u5bbe\u4e4b\u65c5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06libp2p\u4f20\u8f93\u91cd\u65b0\u6784\u9020\u4e3apubsub\uff0c\u770b\u770b\u5b83\u5728\u5b9e\u8df5\u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u60f3\u5c1d\u8bd5\u5c06Yggdrasil(\u52a0\u5bc6\u8986\u76d6\u7f51\u7edc)\u4f5c\u4e3a\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u4f20\u8f93\u65b9\u5f0f--Yggdrasil\u5f88\u5bb9\u6613\u8ba9\u6211\u4eec\u8de8\u8d8a\u4e0d\u540c\u7684\u5e95\u5c42\u7f51\u7edc\u4f20\u8f93\uff0c\u4f46\u4e5f\u6709\u4e0d\u540c\u7684\u6743\u8861(\u4f8b\u5982\uff0c\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u6d4f\u89c8\u5668)\u3002\u6211\u4eec\u8fd8\u60f3\u770b\u770bDAT/\u8d85\u7ea7\u6838\u5fc3/\u8d85\u7ea7\u6838\u5fc3/\u8d85\u6e29\u6696/\u9634\u8c0b\u751f\u6001\u7cfb\u7edf\uff0c\u770b\u770b\u662f\u5426\u5b58\u5728\u5339\u914d\u9879\uff1a)\u3002\n\u7b2c\u4e09\uff0c\u4e5f\u662f\u6700\u540e\u4e00\u70b9\uff1a\u6211\u4eec\u663e\u7136\u5e0c\u671b\u5c06\u65b0\u7684P2P\u77e9\u9635\u7f51\u7edc\u4e0e\u4eca\u5929\u7684\u8054\u5408\u7f51\u7edc\u7edf\u4e00\u8d77\u6765\u3002\u7406\u60f3\u7684\u7ed3\u679c\u662f\u5efa\u7acb\u4e00\u79cd\u6df7\u5408\u6a21\u5f0f\uff0c\u5e0c\u671b\u7528\u6237\u62e5\u6709\u4e13\u95e8\u7684\u5bb6\u5ead\u670d\u52a1\u5668(\u5728\u53ef\u7528\u6027\u3001IT\u7b56\u7565\u7b49\u65b9\u9762)\u7684\u56e2\u961f\u53ef\u4ee5\u50cf\u4eca\u5929\u4e00\u6837\u7ee7\u7eed\u62e5\u6709\u4e00\u4e2a--\u4f46\u521a\u521a\u5b89\u88c5\u4e86Riot\u7684\u65b0\u624b\u5c06\u4f1a\u5728P2P\u4e0a\u56db\u5904\u6f02\u6d6e\uff0c\u9664\u975e\u4ed6\u4eec\u51b3\u5b9a\u6709\u610f\u8bc6\u5730\u5728\u4e00\u4e24\u53f0\u670d\u52a1\u5668\u4e0a\u624e\u6839\u3002\u6700\u68d2\u7684\u662f\uff0c\u5b83\u5c06\u8ba9\u6211\u4eec\u5173\u95edmatrix.org home server\uff1a\u6700\u597d\u7684\u516c\u5171home server\u662f\u60a8\u81ea\u5df1\u5728\u81ea\u5df1\u7684\u624b\u673a\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u5668\uff1b)\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u6211\u4eec\u8fde\u63a5P2P\u548c\u4eca\u5929\u7684Matrix\u6240\u91c7\u53d6\u7684\u65b9\u6cd5\u5c06\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u6211\u4eec\u4e3aP2P\u9009\u62e9\u7684\u4f20\u8f93\u65b9\u5f0f\uff0c\u4f46\u4eca\u5929\u7684home server\u5f88\u53ef\u80fd\u4f1a\u6d8c\u73b0\u51fa\u8fde\u63a5\u7f51\u7edc\u7684P2P\u7f51\u5173\u3002\n\u6240\u4ee5\uff0c\u73b0\u5728\u4f60\u5c31\u77e5\u9053\u4e86\u3002P2P Matrix\u7684\u5b58\u5728\uff0c\u6b63\u5728\u4ee5\u60ca\u4eba\u7684\u901f\u5ea6\u53d1\u5c55\uff0c\u5e76\u63a8\u52a8\u7740\u6811\u679d\u6676\u7684\u53d1\u5c55\u3002\u6700\u4ee4\u4eba\u5174\u594b\u7684\u662f\uff0cP2P\u7684Matrix\u89c4\u8303\u8fd8\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\uff1b\u6211\u4eec\u53ea\u662f\u5c06https\u66ff\u6362\u4e3ahttp-over-libp2p\u4f5c\u4e3a\u4f20\u8f93\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728P2P\u4e16\u754c\u4e2d\u8ba9Dendrite\u5de5\u4f5c\u7684\u6240\u6709\u5de5\u4f5c\u90fd\u76f4\u63a5\u8f6c\u5316\u4e3a\u8ba9Dendrite\u5728\u4eca\u5929\u7684Matrix\u4e0a\u5de5\u4f5c\u3002\u73b0\u5728\u4f60\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2aDendrite\uff0c\u8ba9\u5b83\u4e0e\u66f4\u5e7f\u6cdb\u7684Matrix\u7f51\u7edc\u76f8\u5f53\u53ef\u9760\u5730\u8054\u5408\u8d77\u6765\uff0c\u5c3d\u7ba1\u6211\u4eec\u4ecd\u5728\u5306\u5fd9\u5b9e\u73b0API(\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u4e86\u9ad8\u8fbe35%\u7684\u7cfb\u7edf\u6d4b\u8bd5\u8986\u76d6-\u5c3d\u7ba1\u8fd935%\u786e\u5b9e\u5305\u542b\u4e86\u5927\u591a\u6570\u91cd\u8981\u7684\u6d4b\u8bd5\uff1a)\u3002\n\u6700\u540e\uff0c\u5982\u679c\u60a8\u62c5\u5fc3Matrix\u6838\u5fc3\u56e2\u961f\u4e3a\u4ec0\u4e48\u4e0d\u53bb\u8ffd\u9010P2P\u68a6\u60f3\uff0c\u800c\u4e0d\u662f\u6539\u8fdbRiot\u7684UX\uff0c\u6216\u5b9e\u73b0\u793e\u533a\uff0c\u6216\u53ef\u6269\u5c55\u914d\u7f6e\u6587\u4ef6\uff0c\u6216\u5904\u7406MSC\u79ef\u538b\u5de5\u4f5c\u7b49\u3002\u5b9e\u9645\u4e0a\uff0c\u53ea\u6709\u4e24\u4e2a\u4eba(\u5ffd\u7565\u4e86Matthew)\u4e00\u76f4\u81f4\u529b\u4e8eP2P-Neil Alexander(\u6700\u521dFOSDEM\u6f14\u793a\u7684\u4f5c\u8005\uff0cDendrite wrangler\u548cYggdrasil\u8054\u5408\u7ef4\u62a4\u8005)\u548cKegan Dougal(\u6700\u521dMatrix\u5f00\u53d1\u56e2\u961f\u7684\u6210\u5458\uff0cDendrite\u7684\u539f\u59cb\u4f5c\u8005\u4e4b\u4e00\uff0c\u73b0\u5728\u4e5f\u5728\u4e3aWASM P2P\u5de5\u4f5c\u4e89\u5435)\u3002\u975e\u5e38\u611f\u8c22Kegan&Amp\uff1bNeil\u63a8\u52a8P2P\u5411\u524d\u53d1\u5c55-\u4e5f\u975e\u5e38\u611f\u8c22\u6838\u5fc3\u56e2\u961f\u4e2d\u7684\u5176\u4ed6\u6bcf\u4e2a\u4eba\u548c\u66f4\u5e7f\u6cdb\u7684\u793e\u533a\uff0c\u8ba9\u4eca\u5929\u7684Matrix\u4fdd\u6301\u8fdb\u6b65\uff01\n\\\u5e0c\u671b\u8fd9\u80fd\u8ba9\u6211\u4eec\u5bf9\u5373\u5c06\u5230\u6765\u7684\u4e8b\u7269\u6709\u4e00\u4e2a\u8bf1\u4eba\u7684\u4e00\u77a5\u3002\u8001\u5b9e\u8bf4\uff0c\u5f53\u6211\u4eec\u57282014\u5e74\u521b\u529eMatrix\u65f6\uff0c\u4ece\u672a\u60f3\u8fc7\u6211\u4eec\u4f1a\u8d70\u5f97\u8fd9\u4e48\u8fdc\uff0c\u4f46\u6700\u7ec8\u8d76\u4e0a\u672a\u6765\u771f\u7684\u5f88\u6709\u8da3\uff1aD\n\u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u5728\u5c3c\u5c14\u00b7\u4e9a\u5386\u5c71\u5927\u7684\u535a\u5ba2\u4e0a\u4ece\u4ed6\u7684\u89c2\u70b9\u4e2d\u4e86\u89e3\u5230\u66f4\u591a\u5173\u4e8e\u8fd9\u4e00\u70b9\u7684\u4fe1\u606f(\u5305\u62ec\u66f4\u591a\u5173\u4e8eYggdrasil\u6f5c\u5728\u6f14\u793a\u7684\u60f3\u6cd5\uff01)", "note_en": "TL;DR: we shipped a major update to  https://p2p.riot.im - fire up a desktop Chrome or Firefox in not-private-browsing mode and give it a go!\n  As many know by now, a few of us have been working away since mid-December on experimenting with running Matrix in a peer-to-peer architecture - one where every user has absolute total autonomy and ownership of their conversations, because the only place their conversations exist is on the devices they own.\n In some ways this is the logical end goal of Matrix: our aim has always been to empower users to have full control over their communication rather than being beholden to any given service provider, and in a P2P world we completely return power over secure communication to the people.\n  P2P Matrix is about more than just letting users store their own conversations: it can also avoid dependencies on the Internet itself by working over local networks, mesh networks, or situations where the Internet has been cut off. Even more interestingly, without homeservers, there is nowhere for metadata to accumulate about who is talking to who, and when - which is a legitimate complaint about today\u2019s Matrix network, given the homeservers of all users in a given conversation necessarily have to store that conversation\u2019s metadata. P2P also lets us radically simplify signup for new users if they don\u2019t have to pick a server to get going - and we avoid the unintentional centralisation of users piling onto public servers.\n P2P also forces us to solve many of the hardest remaining problems in Matrix: e.g multi-homed accounts, given multi-device P2P requires your account to exist in multiple places. This in turn unlocks high availability and geo-redundancy for accounts on today\u2019s Matrix network (imagine having a primary and backup homeserver that magically did the right thing!), as well as account portability, and thus also vhosting and load-balancing accounts between servers, and even improved GDPR compliance (for if your user IDs are ephemeral they are no longer personally identifying information baked into your Matrix rooms). We\u2019ll also need better safety mechanisms to avoid folks exploiting the anonymous nature of the network for abuse, accelerating the work we\u2019re already doing for today\u2019s Matrix network.\n The way we\u2019ve been approaching P2P is the \u201c hamfisted but genius\u201d approach of taking homeservers and running them on the client, alongside or within your Matrix client - meaning that there are literally  no changes required for any Matrix client to talk P2P Matrix, and so P2P Matrix can instantly benefit from all the work which has gone into Riot and other apps. As a result, P2P is also a huge motivator towards developing much smaller homeservers which can run efficiently clientside (e.g. Dendrite!) - which is of course great news for Matrix as a whole. It also forces us to develop more scalable routing algorithms (as you don\u2019t want your client to have to talk to every other device in a room every time it sends a message!) and also spurs development of low bandwidth Matrix transports (as you don\u2019t want the additional chatter of talking to multiple peers to consume all your bandwidth). Finally, it forces us to really ruggedize federation, given nodes are constantly appearing and disappearing, giving the federation much more of a stress test than we see with today\u2019s relatively static homeservers.\n  So, P2P has been acting as fuel for a lot of our longer term Matrix work over the last few months. There have been three main experiments so far: at  FOSDEM we showed off running our next-gen Dendrite homeserver running clientside using HTTP over  libp2p as the transport. We also highlighted Timoth\u00e9e Floure\u2019s  project at EPFL experimenting with Synapse talking P2P CoAP over yggdrasil as the transport via a proxy.\n Most recently, however, we\u2019ve been experimenting with compiling Dendrite down to Web Assembly and running it embedded in Riot Web as a Service Worker, using HTTP over libp2p\u2019s websocket transport (coordinated via a websocket rendezvous server). Architecturally, it looks like this:\n  Today, we\u2019re shipping a major new alpha of this P2P demo up at  https://p2p.riot.im (requires desktop Chrome or Firefox in non-private-browsing mode) - which hopefully should give a really usable and concrete taste of the shape of things to come.\n  Your conversations are now persisted in your browser storage (via IndexedDB), meaning that as long as all the browsers participating in a given conversation don\u2019t clear their local storage, rooms on the P2P network are here to stay!\n Your room directory lists all the aliases for all the rooms published by active nodes on the network. Moreover, we now automatically publish a local room alias whenever you join a public room, so that others will be able to discover that room via you, even if the server who originally created the alias has disappeared.\n Lots and lots of federation improvements between the nodes - for instance, when a node comes online, others should now automatically detect and send scrollback to it. Invites should work, and there should no longer be any unexpectedly redacted messages.\n Needless to say, all the code for this is open source under the Apache license, and if you\u2019re feeling particularly adventurous you can embed your very own P2P Dendrite into Riot Web by using the Dockerfile at  https://github.com/matrix-org/dendrite/blob/master/build/docker/DendriteJS.Dockerfile or following the instructions at  https://github.com/matrix-org/dendrite/blob/master/docs/p2p.md.\n  Finally, please understand that the demo is very likely  not what the final version of P2P Matrix will look like - this is just one step in a series of experiments as we investigate the best paths forward :)\n   More federation debugging (and hooking in  tardis and writing up everything we\u2019ve learned about implementing federation in Dendrite!)\n  Hooking up E2E Encryption APIs in Dendrite (not that it buys us much in a pure P2P world)\n WebRTC transports. Turns out that service workers aren\u2019t allowed to speak WebRTC, so we\u2019ll have to shim through to Riot to speak true peer-to-peer WebRTC data channels rather than relaying all the traffic through the websocket rendezvous server.\n Beyond this, there are some bigger picture questions left to be answered in future experiments.\n Firstly: we do not yet have a solution for \u201cstore and forward\u201d nodes which can relay messages on behalf of a room if all the participating devices are offline. A first cut will be to run a P2P-capable homeserver server-side for this, but then metadata will start to accumulate server-side for the conversations it hosts. A more interesting approach would be to use a store and forward system which obfuscates who is talking to who, such as a mixnet, and could even provide resistance to network traffic pattern analysis. This is very much an open area of research, but one we are getting into :D\n Secondly: we want to experiment more with other transports, and find out which works best for Matrix. Libp2p has some really exciting new stuff in the form of  Gossipsub v1.1 - a much smarter routing algorithm for pubsub traffic in libp2p, which David Dias gave us a  VIP tour of at the first Open Tech Will Save Us meetup. So we\u2019ll need to restructure our libp2p transport as pubsub to see how it works in practice. Separately, we also want to play with hooking up  Yggdrasil (the encrypted overlay network) as a transport as a totally different approach - Yggdrasil will easily let us span different underlying network transports, but comes with different tradeoffs (e.g. no browser support yet). We also want to take a look at the  DAT /  hypercore /  hyperswarm /  Cabal ecosystem to see if there\u2019s a match :)\n Thirdly and finally: we obviously want to unify the new P2P Matrix network with today\u2019s federated one. The ideal outcome here would be to have a hybrid model, where teams who want their users to have a dedicated homeserver (for availability, IT policies, etc) can continue to have one as they do today - but newbies who have just installed Riot would float around on P2P unless they decided to consciously put down roots on a server or two. Best of all, it would let us turn off the matrix.org homeserver: the best public homeserver is one you run yourself on your own phone ;) The approach we take for linking P2P and today\u2019s Matrix will depend very much on the transport we select for P2P in the long run, but the likelihood is that today\u2019s homeservers will sprout P2P gateways to link the networks.\n  So, there you have it. P2P Matrix exists, and is developing at an alarming speed - and pushing Dendrite development along with it. Most excitingly, there have been no changes yet to the Matrix spec for P2P at all; we\u2019ve just swapped https for http-over-libp2p as the transport. So  all of the work we\u2019ve been doing making Dendrite work in a P2P world has directly translated into making Dendrite work on today\u2019s Matrix too You can now stand up a Dendrite and have it federate pretty reliably with the wider Matrix network, although we\u2019re still rushing through implementing APIs (we\u2019re up to 35% passing  sytest coverage - although that 35% does contain most of the important tests :)\n Finally, in case you\u2019re worried about why the Matrix core team is off chasing P2P dreams rather than improving Riot\u2019s UX, or implementing Communities, or Extensible Profiles, or working through the MSC backlog etc... in practice only two people (ignoring Matthew) have been working on P2P - Neil Alexander (author of the original FOSDEM demo, Dendrite wrangler and Yggdrasil co-maintainer) and Kegan Dougal (of the original Matrix dev team, one of the original authors of Dendrite, and now wrangling the WASM P2P work too). Huge thanks to Kegan &amp; Neil for pushing P2P forwards - and huge thanks to everyone else on the core team and the wider community for keeping today\u2019s Matrix advancing too!\n \\Hope this has given a tempting glimpse of the shape of things to come. Honestly we never thought we\u2019d get as far as P2P when we started Matrix back in 2014, but it\u2019s really fun to be finally catching up with the future :D\n  P.S. You can read more about this from Neil Alexander\u2019s point of view  over at his blog (including more thoughts on the potential Yggdrasil demo!)", "posttime": "2020-06-03 02:38:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "p2p", "title": "P2P\u77e9\u9635", "title_en": "P2P Matrix", "transed": 1, "url": "https://matrix.org/blog/2020/06/02/introducing-p-2-p-matrix", "via": "", "real_tags": ["p2p"]}, {"category": "", "categoryclass": "", "imagename": "99cb95cd21aaffe984209a58bbceda0b.jpg", "infoid": 1004876, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e00\uff0c\u4e09\u4f4d\u6c11\u6743\u9886\u8896\u5728\u4e0eFacebook\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\u548c\u5176\u4ed6\u9ad8\u7ba1\u4f1a\u9762\u540e\uff0c\u53d1\u8868\u4e86\u4e00\u4efd\u4e25\u5389\u7684\u58f0\u660e\uff0c\u8ba8\u8bba\u8fd9\u5bb6\u793e\u4ea4\u7f51\u7edc\u51b3\u5b9a\u4e0d\u63a5\u53d7\u7279\u6717\u666e\u603b\u7edf\u7684\u8a00\u8bba\uff0c\u4ed6\u4eec\u8868\u793a\uff0c\u8fd9\u76f8\u5f53\u4e8e\u547c\u5401\u66b4\u529b\u548c\u538b\u5236\u9009\u6c11\u3002\n\u91cd\u8981\u539f\u56e0\uff1a\u867d\u7136Twitter\u5df2\u7ecf\u6807\u8bb0\u4e86\u603b\u7edf\u7684\u4e24\u6761\u63a8\u6587\uff0c\u4e00\u6761\u662f\u5173\u4e8e\u90ae\u5bc4\u6295\u7968\u7a0b\u5e8f\u7684\u6f5c\u5728\u8bef\u5bfc\u6027\uff0c\u53e6\u4e00\u6761\u662f\u7f8e\u5316\u66b4\u529b\u7684\uff0c\u4f46Facebook\u6ca1\u6709\u53d1\u5e03\u8fd9\u4e9b\u5e16\u5b50\u548c\u5176\u4ed6\u5e16\u5b50\uff0c\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c(Mark Zuckerberg)\u8868\u793a\uff0c\u4ed6\u4e0d\u60f3\u6210\u4e3a\u771f\u76f8\u7684\u4ef2\u88c1\u8005\u3002\n\u8fd9\u6b21\u4f1a\u8bae\u662f\u5728\u5468\u4e00\u665a\u4e0a\u901a\u8fc7\u89c6\u9891\u901a\u8bdd\u4e3e\u884c\u7684\uff0c\u6b64\u524d\u4e00\u5929\uff0cFacebook\u7684\u5458\u5de5\u4e3e\u884c\u4e86\u4e00\u573a\u865a\u62df\u7f62\u5de5\uff0c\u8bb8\u591a\u4eba\u5728\u5185\u90e8\u7559\u8a00\u677f\u4e0a\u6279\u8bc4\u8be5\u516c\u53f8\uff0c\u76f8\u5f53\u591a\u7684\u4eba\u5728Twitter\u4e0a\u516c\u5f00\u6279\u8bc4\u8be5\u516c\u53f8\u3002\n\u4ed6\u4eec\u5728\u8bf4\u4ec0\u4e48\uff1a\u5728\u4e00\u4efd\u8054\u5408\u58f0\u660e\u4e2d\uff0c\u516c\u6c11\u4e0e\u4eba\u6743\u9886\u8896\u4f1a\u8bae\u3001NAACP\u6cd5\u5f8b\u8fa9\u62a4\u548c\u6559\u80b2\u57fa\u91d1\u4ee5\u53ca\u201c\u53d8\u9769\u4e4b\u8272\u201d\u7684\u8d1f\u8d23\u4eba\u8868\u793a\uff0c\u4ed6\u4eec\u5bf9\u9a6c\u514b\u5173\u4e8e\u5141\u8bb8\u7279\u6717\u666e\u5e16\u5b50\u7ee7\u7eed\u5b58\u5728\u7684\u4ee4\u4eba\u8d39\u89e3\u7684\u89e3\u91ca\u611f\u5230\u5931\u671b\u548c\u9707\u60ca\u3002\n\u4ed6\u6ca1\u6709\u8868\u73b0\u51fa\u5bf9\u5386\u53f2\u6216\u73b0\u4ee3\u9009\u6c11\u538b\u5236\u7684\u7406\u89e3\uff0c\u4ed6\u62d2\u7edd\u627f\u8ba4Facebook\u662f\u5982\u4f55\u4e3a\u7279\u6717\u666e\u547c\u5401\u5bf9\u6297\u8bae\u8005\u91c7\u53d6\u66b4\u529b\u884c\u52a8\u63d0\u4f9b\u4fbf\u5229\u7684\u3002\u9a6c\u514b\u5f00\u521b\u4e86\u4e00\u4e2a\u975e\u5e38\u5371\u9669\u7684\u5148\u4f8b\uff0c\u5176\u4ed6\u58f0\u97f3\u4e5f\u4f1a\u5728Facebook\u4e0a\u8bf4\u7c7b\u4f3c\u7684\u4f24\u5bb3\u6027\u8a00\u8bba\u3002\u201c\u3002\n-\u74e6\u59ae\u5854\u00b7\u53e4\u666e\u5854(Vanita Gupta)\u3001\u8c22\u91cc\u7433\u00b7\u4f0a\u83f2\u5c14(Sherrilyn Iill)\u548c\u62c9\u6c99\u5fb7\u00b7\u7f57\u5bbe\u900a(Rashad Robinson)\u5728\u4e00\u4efd\u8054\u5408\u58f0\u660e\u4e2d\u8868\u793a\uff0cFacebook\u5bf9\u6c11\u6743\u793e\u533a\u7684\u9886\u5bfc\u4eba\u82b1\u65f6\u95f4\u5206\u4eab\u5766\u7387\u3001\u8bda\u5b9e\u7684\u53cd\u9988\u8868\u793a\u611f\u8c22\uff0c\u5e76\u8868\u793a\u8fd9\u662f\u503e\u542c\u7684\u91cd\u8981\u65f6\u523b\uff0c\u6211\u4eec\u671f\u5f85\u7740\u7ee7\u7eed\u8fd9\u4e9b\u5bf9\u8bdd\u3002\n\u9664\u4e86\u624e\u514b\u4f2f\u683c\uff0cFacebook\u7684\u9996\u5e2d\u8fd0\u8425\u5b98\u8c22\u4e3d\u5c14\u00b7\u6851\u5fb7\u4f2f\u683c(Sheryl Sandberg)\u3001\u9996\u5e2d\u653f\u7b56\u5b98\u5c3c\u514b\u00b7\u514b\u83b1\u683c(Nick Clegg)\u4ee5\u53caDC\u653f\u7b56\u4e3b\u7ba1\u4e54\u5c14\u00b7\u5361\u666e\u5170(Joel Kaplan)\u548c\u5bf9\u5916\u4e8b\u52a1\u603b\u76d1\u6797\u8d5b\u00b7\u57c3\u6797(Lindsay Elin)\u4e5f\u5728\u7535\u8bdd\u4f1a\u8bae\u4e0a\u3002", "note_en": "A trio of civil rights leaders issued a blistering statement Monday following a meeting with Facebook CEO Mark Zuckerberg and other top executives to discuss the social network&#39;s decision to leave up  comments from President Trump they say amount to calls for violence and voter suppression.\n Why it matters: While Twitter has flagged two of the president&#39;s Tweets, one for being potentially misleading about mail-in ballot procedures and another for glorifying violence, Facebook has left those and other posts up, with CEO Mark Zuckerberg saying he doesn&#39;t want to be the &#34;arbiter of truth.&#34;\n The meeting, held via video call on Monday night, followed a day in which employees at Facebook  staged a virtual walkout, with many criticizing the company on internal message boards and a significant number doing so publicly on Twitter.\n What they&#39;re saying: In a joint statement, the heads of The Leadership Conference on Civil and Human Rights, the NAACP Legal Defense and Educational Fund and Color of Change said they were &#34;disappointed and stunned by Mark&#39;s incomprehensible explanations for allowing the Trump posts to remain up.&#34;\n &#34;He did not demonstrate understanding of historic or modern-day voter suppression and he refuses to acknowledge how Facebook is facilitating Trump&#39;s call for violence against protesters. Mark is setting a very dangerous precedent for other voices who would say similar harmful things on Facebook.\u201d\n \u2014 Vanita Gupta, Sherrilyn Ifill and Rashad Robinson, in a joint statement Facebook, for its part, said it was &#34;grateful that leaders in the civil rights community took the time to share candid, honest feedback&#34; and said &#34;it is an important moment to listen, and we look forward to continuing these conversations.&#34;\n In addition to Zuckerberg, also on the call for Facebook were COO Sheryl Sandberg,\u00a0policy chief Nick Clegg, along with DC policy executive Joel Kaplan and external affairs director Lindsay Elin.", "posttime": "2020-06-03 02:38:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,\u6c11\u6743,rights", "title": "\u6c11\u6743\u9886\u8896\u5728\u4e0e\u624e\u514b\u4f2f\u683c\u4f1a\u9762\u540e\u62a8\u51fbFacebook", "title_en": "Civil rights leaders blast Facebook after meeting with Zuckerberg", "transed": 1, "url": "https://www.axios.com/civil-rights-leaders-blast-facebook-after-meeting-with-zuckerberg-63daa9dd-0209-4420-85d3-805385825718.html", "via": "", "real_tags": ["facebook", "\u6c11\u6743", "rights"]}, {"category": "", "categoryclass": "", "imagename": "fc37a0b7cd69f91ae304c46d9548ba64.jpg", "infoid": 1004875, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u52a0\u5dde\u8fd9\u5ea7\u4f4e\u6536\u5165\u57ce\u5e02\u7684\u4e00\u9879\u5f00\u521b\u6027\u7684\u5168\u6c11\u57fa\u672c\u6536\u5165\u8bd5\u70b9\u8ba1\u5212\u5373\u5c06\u5230\u671f\u3002\u4f46\u51a0\u72b6\u75c5\u6bd2\u5371\u673a\u4e3a\u5ef6\u957f\u8fd9\u4e00\u671f\u9650\u63d0\u4f9b\u4e86\u7406\u7531\u3002", "note_en": "A pioneering universal basic income pilot in the low-income California city was scheduled to expire soon. But the coronavirus crisis made the case to extend it.", "posttime": "2020-06-03 02:38:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u652f\u4ed8,extends,\u5168\u6c11", "title": "\u65af\u6258\u514b\u987f\u5ef6\u957f\u4e86\u6bcf\u6708500\u7f8e\u5143\u7684UBI\u652f\u4ed8\u8bd5\u9a8c", "title_en": "Stockton Extends Its Monthly $500 UBI Payment Experiment", "transed": 1, "url": "https://www.citylab.com/equity/2020/06/ubi-stockton-universal-basic-income-coronavirus-economy/611191/", "via": "", "real_tags": ["\u652f\u4ed8", "extends", "\u5168\u6c11"]}, {"category": "", "categoryclass": "", "imagename": "2432570a222733c50f52f1c1f2027763.jpeg", "infoid": 1004874, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u867d\u7136\u5728\u67d0\u4e9b\u4e8b\u4ef6\u4e2d\uff0c\u8bb0\u8005\u53ef\u80fd\u88ab\u610f\u5916\u51fb\u4e2d\u6216\u5f71\u54cd\uff0c\u4f46\u5728\u6211\u4eec\u8bb0\u5f55\u7684\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8bb0\u8005\u663e\u7136\u53ef\u4ee5\u88ab\u8bc6\u522b\u4e3a\u5a92\u4f53\uff0c\u5f88\u660e\u663e\uff0c\u4ed6\u4eec\u662f\u6545\u610f\u6210\u4e3a\u76ee\u6807\u7684\u3002\u201d\n\u5728\u4e00\u540d\u767d\u4eba\u8b66\u5bdf\u6d89\u5acc\u8c0b\u6740\u9ed1\u4eba\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7\u4e00\u5468\u540e\uff0c\u9ed1\u4eba\u751f\u547d\u4e5f\u662f\u5982\u6b64\uff0c\u6297\u8bae\u6d3b\u52a8\u5728\u5168\u56fd\u8303\u56f4\u5185\u8513\u5ef6\uff0c\u5f88\u660e\u663e\uff0c\u8b66\u5bdf\u88ad\u51fb\u8bb0\u8005\u6b63\u5728\u6210\u4e3a\u4e00\u79cd\u666e\u904d\u7684\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u7684\u4e8b\u4ef6\u3002\u5c3d\u7ba1\u4e0e\u9488\u5bf9\u6b63\u5728\u6297\u8bae\u7684\u7f8e\u56fd\u516c\u6c11\u7684\u66b4\u529b\u76f8\u6bd4\uff0c\u9488\u5bf9\u62a5\u9053\u6297\u8bae\u6d3b\u52a8\u7684\u6709\u5a92\u4f53\u8d44\u683c\u7684\u8bb0\u8005\u7684\u66b4\u529b\u884c\u4e3a\u53ef\u80fd\u4ecd\u7136\u76f8\u5f62\u89c1\u7ecc\uff0c\u4f46\u4e8b\u4ef6\u6b63\u5728\u5806\u79ef\u5982\u5c71-\u800c\u4e14\u6b63\u5728\u5f97\u5230\u66f4\u591a\u7684\u5173\u6ce8\uff0c\u90e8\u5206\u539f\u56e0\u662f\u53d7\u5230\u653b\u51fb\u7684\u8bb0\u8005\u5305\u62ec\u6765\u81ea\u5927\u578b\u4e3b\u6d41\u65b0\u95fb\u673a\u6784\u7684\u8bb0\u8005\u3002\n\u76ee\u524d\u6b63\u5728\u8fdb\u884c\u4e00\u7cfb\u5217\u52aa\u529b\uff0c\u8bd5\u56fe\u8ffd\u8e2a\u9488\u5bf9\u8bb0\u8005\u7684\u88ad\u51fb\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u88ad\u51fb\u4e8b\u4ef6\u5f80\u5f80\u9996\u5148\u5728Twitter\u4e0a\u88ab\u8bb0\u5f55\u4e0b\u6765\u3002\u622a\u81f3\u5468\u4e8c\u4e0a\u5348\uff0cBellingcat\u9ad8\u7ea7\u8c03\u67e5\u5458\u5c3c\u514b\u00b7\u6c83\u7279\u65af(Nick Waters)\u5df2\u7ecf\u8bb0\u5f55\u4e86113\u8d77\u4e8b\u4ef6\u3002101\u53f7\u4e8b\u4ef6\u53d1\u751f\u5728\u767d\u5bab\u5916\uff0c\u5f53\u65f6\u8054\u90a6\u6267\u6cd5\u90e8\u95e8\u7528\u50ac\u6cea\u74e6\u65af\u88ad\u51fb\u4e86\u4e00\u7fa4\u6297\u8bae\u8005\u548c\u8bb0\u8005\uff0c\u8ba9\u603b\u7edf\u6709\u4e86\u4e00\u6761\u6e05\u6670\u7684\u9053\u8def\uff0c\u53ef\u4ee5\u8d70\u5230\u4ed6\u5728\u5723\u7ea6\u7ff0\u6559\u5802(St.John\u2018s Church)\u524d\u62ff\u7740\u4e00\u672c\u5723\u7ecf\u7684\u62cd\u7167\u673a\u4f1a\u3002Bellingcat\u7f51\u7ad9\u4e0a\u7684\u4e00\u7bc7\u540d\u4e3a\u201c\u7f8e\u56fd\u6267\u6cd5\u90e8\u95e8\u5728\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7\u6297\u8bae\u671f\u95f4\u6545\u610f\u9488\u5bf9\u8bb0\u8005\u201d\u7684\u62a5\u9053\uff0c\u4e3a\u4e00\u4e9b\u4e8b\u4ef6\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u6d1e\u5bdf\u529b\uff0c\u5e76\u6307\u51fa\uff1a\n\u867d\u7136\u5728\u4e00\u4e9b\u4e8b\u4ef6\u4e2d\uff0c\u8bb0\u8005\u53ef\u80fd\u88ab\u610f\u5916\u51fb\u4e2d\u6216\u5f71\u54cd\uff0c\u4f46\u5728\u6211\u4eec\u8bb0\u5f55\u7684\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8bb0\u8005\u663e\u7136\u662f\u8bb0\u8005\uff0c\u800c\u4e14\u5f88\u660e\u663e\uff0c\u4ed6\u4eec\u662f\u6545\u610f\u6210\u4e3a\u653b\u51fb\u76ee\u6807\u7684\u3002\u8fd9\u79cd\u9488\u5bf9\u8bb0\u8005\u7684\u66b4\u529b\u6a21\u5f0f\u5728\u51e0\u4e2a\u57ce\u5e02\u91cd\u590d\u51fa\u73b0\uff0c\u4f46\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u4f3c\u4e4e\u6700\u4e3a\u4e25\u91cd\u3002\n-\u81f3\u5c11\u670936\u540d\u8bb0\u8005\u62a5\u544a\u88ab\u8b66\u5bdf\u7528\u6a61\u76ae\u5b50\u5f39\u7b49\u6295\u5c04\u7269\u5c04\u51fb\u3002\u4ec5\u5728\u660e\u5c3c\u82cf\u8fbe\u5dde\u5c31\u670950%\u3002\n\u6211\u4eec\u516c\u5f00\u5206\u4eab\u6211\u4eec\u7684\u8ddf\u8e2a\u6587\u6863\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u65f6\u8bb0\u5f55\u5bf9\u8bb0\u8005\u7684\u653b\u51fb\u3002\u5728\u6587\u6863\u4e2d\u8fdb\u884c\u6ce8\u91ca\uff0c\u4ee5\u4fbf\u5728\u53d1\u751f\u66f4\u591a\u6848\u4f8b\u65f6\u63d0\u9192\u6211\u4eec\u3002https://t.co/73e9qJ0uLp\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u540d\u88ab\u902e\u6355\u3001\u88ab\u6bd2\u6c14\u6740\u5bb3\u6216\u88ab\u67aa\u6740\u7684\u8bb0\u8005\uff0c\u8bf7\u901a\u8fc7@USPressTracker\u4e0e\u6211\u4eec\u8054\u7cfb\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4f60\u7684\u6848\u4ef6\u3002\n\u5c31\u5728\u6211\u4eec\u8bf4\u8bdd\u7684\u540c\u65f6\uff0c\u6211\u4eec\u7684\u56e2\u961f\u6b63\u5728\u8c03\u67e5\u5168\u56fd\u5404\u5730\u6570\u5341\u8d77\u4fb5\u72af\u65b0\u95fb\u81ea\u7531\u7684\u4e8b\u4ef6\u3002https://t.co/nJcVsWAqLQ\n\u8b66\u5bdf\u90e8\u961f\u7ecf\u5e38\u5728\u8fd9\u4e2a\u56fd\u5bb6\u7684\u6297\u8bae\u6d3b\u52a8\u4e2d\u88ad\u51fb\u548c\u902e\u6355\u8bb0\u8005\u3002\u4f46\u5b83\u7ecf\u5e38\u662f\u6765\u81ea\u975e\u516c\u53f8\u5a92\u4f53\u7684\u4e0d\u77e5\u540d\u7684\u8bb0\u8005\uff0c\u6240\u4ee5\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u5b83\u3002\u73b0\u5728\uff0c\u8b66\u65b9\u4e5f\u5728\u523b\u610f\u548c\u6301\u7eed\u5730\u653b\u51fb\u4f01\u4e1a\u8bb0\u8005\u3002\n\u6211\u4ece\u6765\u6ca1\u6709\u5728\u4e0d\u540c\u7684\u57ce\u5e02\u770b\u5230\u8fc7\u8fd9\u4e48\u591a\u8b66\u5bdf\u548c\u8bb0\u8005\u540c\u65f6\u53d1\u751f\u7684\u4e8b\u4ef6\u3002\u8b66\u5bdf\u548c\u8bb0\u8005\u4e4b\u95f4\u7684\u7d27\u5f20\u5173\u7cfb\u5e76\u4e0d\u662f\u4ec0\u4e48\u65b0\u9c9c\u4e8b\u3002\u5728\u5168\u56fd\u8303\u56f4\u5185\u540c\u65f6\u5728\u591a\u4e2a\u5730\u70b9\u4fb5\u72af\u8bb0\u8005\u662f\u4e0d\u540c\u7684\u3002https://t.co/SA5s1Wy3DP\u3002\n\u6211\u4e3a\u6211\u7684\u7b2c\u4e00\u672c\u4e66\u7814\u7a76\u4e86\u65e0\u6570\u7684\u6297\u8bae\u6d3b\u52a8\u3002\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u5199\u4e86\u5f88\u591a\u5173\u4e8e\u8fd9\u65b9\u9762\u7684\u6587\u7ae0\u3002\u6211\u8ba4\u4e3a\u53ef\u4ee5\u80af\u5b9a\u5730\u8bf4\uff0c\u6211\u4eec\u4ece\u672a\u89c1\u8fc7\u8b66\u5bdf\u5728\u8fc7\u53bb\u51e0\u5929\u91cc\u5e7f\u6cdb\u3001\u84c4\u610f\u5730\u4ee5\u8bb0\u8005\u4e3a\u76ee\u6807\u3002\u6709\u4e9b\u4e8b\u60c5\u5df2\u7ecf\u6539\u53d8\u4e86\u3002\n\u6211\u5c06\u7ee7\u7eed\u8ffd\u8e2a\u5e76\u63d0\u4ea4\u201c\u4fe1\u606f\u81ea\u7531\u6cd5\u201d\u5bf9\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u88ab\u6355\u7684\u8bb0\u8005\u7684\u8981\u6c42\u3002\u6211\u4eca\u65e9\u63d0\u4ea4\u4e86CNN\u5de5\u4f5c\u4eba\u5458\u7684\u7533\u8bf7\u3002\u5982\u679c\u4f60\u542c\u5230\u4ec0\u4e48\u65b0\u6d88\u606f\uff0c\u8bf7\u544a\u8bc9\u6211\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u5c31\u662f\u611f\u89c9\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\u5728\u8fd9\u4e00\u884c\u52a8\u4e2d\uff0c\u8b66\u65b9\u5728\u65b0\u95fb\u81ea\u7531\u65b9\u9762\u8d8a\u8fc7\u4e86\u4e00\u6761\u7ebf\uff0c\u8fd9\u662f\u4ed6\u4eec\u57282014-2019\u5e74\u6297\u8bae\u6d3b\u52a8\u4e2d\u4ece\u672a\u7ecf\u5e38\u8d8a\u8fc7\u7684\u3002\u4f60\u7684\u201c\u65b0\u7684\u201d\u548c\u201c\u589e\u52a0\u7684\u201d\u53d9\u8ff0\u73b0\u5728\u662f\u51c6\u786e\u7684https://t.co/MNq3sCrvvl\u3002\n2020\u5e745\u670830\u65e5\uff0c\u5728\u4fc4\u4ea5\u4fc4\u5dde\u54e5\u4f26\u5e03\u5e02\uff0c\u9a6c\u91cc\u5170\u5927\u5b66\u7814\u7a76\u751f\u8bb0\u8005\u6731\u8389\u5a05\u00b7\u52d2\u7eb3(Julia Lerner)\u62cd\u6444\u4e86\u8fd9\u5f20\u7167\u7247\uff0c\u8bf4\u660e\u5979\u6b63\u5728\u88ab\u8b66\u5bdf\u8ffd\u8d76\u5e76\u5411\u5979\u55b7\u6d12\u80e1\u6912\u3002\u7248\u6743\u6240\u6709\u6731\u8389\u5a05\u00b7\u52d2\u7eb3\u3002", "note_en": "\u201cAlthough in some incidents it is possible the journalists were hit or affected accidentally, in the majority of the cases we have recorded the journalists are clearly identifiable as press, and it is clear that they are being deliberately targeted.\u201d\n    As Black Lives Matter protests spread across the country one week after a white police officer  allegedly murdered a black man, George Floyd, it\u2019s becoming clear that attacks by police on journalists are becoming a widespread pattern, not one-off incidents. While violence against press-credentialed reporters covering the protests may still be dwarfed by violence against the American citizens who are protesting, incidents are piling up \u2014 and are getting more attention in part because the journalists being attacked include those from large mainstream news organizations.\n A number of efforts are underway to try to track the attacks on journalists, which are often first documented on Twitter. Bellingcat senior investigator  Nick Waters  had documented 113 incidents by Tuesday morning.  #101 occurred outside the White House, when federal law enforcement  attacked a group of protestors and journalists with tear gas, allowing the president a clear path to walk to a photo opportunity in which he  held a Bible in front of St. John\u2019s Church. A story on Bellingcat\u2019s site, \u201cU.S. Law Enforcement Are Deliberately Targeting Journalists During George Floyd Protests,\u201d  provides more insight into some of the incidents, and notes:\n Although in some incidents it is possible the journalists were hit or affected accidentally, in the majority of the cases we have recorded the journalists are clearly identifiable as press, and it is clear that they are being deliberately targeted. This pattern of violence against journalists is replicated in several cities, but appears most intense in Minneapolis.\n    \u2014At least 36 journalists have reported being shot at by police with projectiles such as rubber bullets. 50% just in Minnesota.\n  We are publicly sharing our tracking document so you can help us log attacks on reporters in real time. Comment in the doc to alert us to more cases as they happen.  https://t.co/73e9qJ0uLp\n  If you&#39;re a journalist who&#39;s been arrested, gassed, or shot \u2014 get in touch with us at the  @USPressTracker so we can document your case.\n Our team is investigating literally dozens of press freedom violations across the country as we speak.  https://t.co/nJcVsWAqLQ\n  Police forces have regularly attacked and arrested journalists at protests in this country. But often it has been unfamous journalists from non-corporate outlets, so no one paid attention to it. Now, the police are deliberately &amp; consistently attacking corporate journalists too.\n  I\u2019ve never seen so many incidents with police and reporters simultaneously in different cities. Tension between cops and reporters is nothing new. Aggression on reporters in multiple locations nationally at same time is something different.  https://t.co/SA5s1Wy3DP\n  I researched countless protests for my first book. I\u2019ve written about many since. I think it\u2019s safe to say that we\u2019ve never seen the widespread, deliberate targeting of journalists by police that we\u2019ve seen over the last few days. Something has changed.\n  I&#39;ll continue to track and file FOIA requests for journalists arrested in Minneapolis. I filed requests for the CNN crew this morning. If you hear about something new, please let me know.\n  This is the thing, to me, that feels different. This is the action where the police are crossing a line in terms of press freedom that they hadn\u2019t routinely cross before at 2014-2019 protests. Your \u201cnew\u201d and \u201cincreasing\u201d narratives are now accurate  https://t.co/MNq3sCrvvl\n   Journalist Julia Lerner, a graduate student at the University of Maryland,  took the picture illustrating this post as she was being  chased and pepper-sprayed by police in Columbus, Ohio on May 30, 2020. Copyright  Julia Lerner.", "posttime": "2020-06-03 02:37:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,attacked,\u8bb0\u8005", "title": "\u81ea5\u670828\u65e5\u4ee5\u6765\uff0c\u7f8e\u56fd\u8b66\u65b9\u5df2\u5bf9\u8bb0\u8005\u53d1\u52a8\u4e86110\u591a\u6b21\u88ad\u51fb", "title_en": "U.S. police have attacked journalists more than 110 times since May 28", "transed": 1, "url": "https://www.niemanlab.org/2020/06/well-try-to-help-you-follow-the-police-attacks-on-journalists-across-the-country", "via": "", "real_tags": ["\u7f8e\u56fd", "attacked", "\u8bb0\u8005"]}, {"category": "", "categoryclass": "", "imagename": "3cd67f8c773c5df13d60d9d2e7f8918c.png", "infoid": 1004873, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0d\u7ba1\u6211\u4eec\u559c\u6b22\u4e0e\u5426\uff0cJava\u662f\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002\u7136\u800c\uff0c\u7531\u4e8eJava\u4e2d\u7684\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u8981\u4e48\u592a\u4e4f\u5473\uff0c\u8981\u4e48\u592a\u590d\u6742--\u5e76\u4e0d\u662f\u6bcf\u4e2aJava\u5f00\u53d1\u4eba\u5458\u90fd\u6709\u8db3\u591f\u7684\u597d\u5947\u5fc3\u53bb\u6df1\u5165\u4e86\u89e3JVM\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u5c1d\u8bd5\u7f16\u5199\u4e00\u4e2a\u73a9\u5177(\u548c\u4e0d\u5b8c\u6574\u7684)JVM\uff0c\u4ee5\u5c55\u793a\u5176\u80cc\u540e\u7684\u6838\u5fc3\u539f\u5219\uff0c\u5e76\u5e0c\u671b\u80fd\u6fc0\u53d1\u60a8\u8fdb\u4e00\u6b65\u5b66\u4e60\u5b83\u7684\u5174\u8da3\u3002\npublic class add{public static int add(int a\uff0cint b){return a+b\uff1b}}\u3002\n\u6211\u4eec\u7528javac Add.java\u7f16\u8bd1\u6211\u4eec\u7684\u7c7b\uff0c\u7ed3\u679c\u662fAdd.class\u3002\u8fd9\u4e2a\u7c7b\u6587\u4ef6\u662fJVM\u53ef\u4ee5\u6267\u884c\u7684\u5b9e\u9645\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u5269\u4e0b\u8981\u505a\u7684\u5c31\u662f\u5b9e\u73b0\u8fd9\u6837\u4e00\u4e2a\u80fd\u591f\u6b63\u786e\u6267\u884c\u5b83\u7684JVM\u3002\n\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u516d\u8fdb\u5236\u8f6c\u50a8\u6765\u67e5\u770bAdd.\u7c7b\u5185\u90e8-\u6211\u4eec\u53ef\u80fd\u4e0d\u4f1a\u5f97\u5230\u592a\u591a\u5370\u8c61\uff1a\n00000000 CAFE BA\u4e3a00 00 00 34 00 0f 0A 00 03 00 0C 07|.4.|00000010 00 0D 07 00 0E 01 00 06 3C 69 6E 69 74 3E 01 00|.&lt\uff1binit&gt\uff1b..|00000020 03 28 29 56 01 00 04 43 6f 64 65 01 00 0f 4c 69|.()V.\u4ee3\u7801.LI|00000030 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65 01 00 03|neNumberTable.|00000040 61 64 01 00 05 28 49 49 29 49 01 00 0A 53 6f|\u6dfb\u52a0.(Ii)i.SO|00000050 75 72 63 65 46 69 6c 65 01 00 08 41 64 2e 6a|\u8d44\u6e90\u6587\u4ef6.\u6dfb\u52a0j|00000060 61 76\u3002ava.add..|00000070 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63|.java/lang/objec|00000080 74 00 21 00 02 00 03 00 00 00 02 00 01 00|t.\uff01.|00000090 04 00 05 00 01 00 00 00 1d 00 01 00 01 00|.|000000a0 00 00 05 2a b7 00 01 b1 00 00 00 01 00 07 00\u3002.*.|000000b0 00 06 00 01 00 00 00 01 00 09 00 08 00 09 00 01|.|0000c0 00 06 00 00 00 1c 00 02 00 02 00 00 00 04 1a 1b|.|000000d0 60 ac 00 00 01 00 07 00 00 00 06 00 01 00 00|`.|000000e0 00 03\u300200 01 00 0a 00 00 00 02 00 0b|.|\u3002\n\u867d\u7136\u6211\u4eec\u5728\u8fd9\u91cc\u8fd8\u6ca1\u6709\u770b\u5230\u4e00\u4e2a\u6e05\u6670\u7684\u7ed3\u6784\uff0c\u4f46\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u6765\u89e3\u6790\u5b83\uff1a()V\u548c(Ii)I\u662f\u4ec0\u4e48\uff0c\u4ec0\u4e48\u662f&lt\uff1binit&gt\uff1b\uff0c\u4e3a\u4ec0\u4e48\u5b83\u4ee5\u201cCafe Babe\u201d\u5f00\u5934\uff1f\n\u60a8\u53ef\u80fd\u89c1\u8fc7\u53e6\u4e00\u79cd\u8f6c\u50a8\u7c7b\u6587\u4ef6\u7684\u65b9\u6cd5\uff0c\u5b83\u901a\u5e38\u66f4\u6709\u7528\uff1a\n$javap-c AddCompiled from&#34\uff1bAdd.java&#34\uff1bpublic class add{public add()\uff1bCode\uff1a0\uff1aaload_0 1\uff1ainvokSpecial#1//method java/lang/Object.&#34\uff1b&lt\uff1binit&gt\uff1b&#34\uff1b\uff1a()V4\uff1areturn public static int add(int\uff0cint)\uff1bCode\uff1a0\uff1aiLoad_0 1\uff1aiLoad_1 2\uff1aiadd 3\uff1aireturn}\u3002\n\u73b0\u5728\u6211\u4eec\u770b\u5230\u6211\u4eec\u7684\u7c7b\u3001\u5b83\u7684\u6784\u9020\u51fd\u6570\u548c\u4e00\u4e2a\u65b9\u6cd5\u3002\u6784\u9020\u51fd\u6570\u548c\u65b9\u6cd5\u90fd\u5305\u542b\u4e00\u4e9b\u6307\u4ee4\uff0c\u73b0\u5728\u6211\u4eec\u7684add()\u65b9\u6cd5\u7684\u4f5c\u7528\u6216\u591a\u6216\u5c11\u53d8\u5f97\u5f88\u6e05\u695a\u4e86\uff1a\u5b83\u52a0\u8f7d\u4e24\u4e2a\u53c2\u6570(iLoad_0\u548ciLoad_1)\uff0c\u5c06\u5b83\u4eec\u76f8\u52a0\uff0c\u7136\u540e\u8fd4\u56de\u7ed3\u679c\u3002JVM\u662f\u5806\u6808\u673a\u5668\uff0c\u6240\u4ee5\u6ca1\u6709\u5bc4\u5b58\u5668\uff0c\u6307\u4ee4\u7684\u6240\u6709\u53c2\u6570\u90fd\u5b58\u50a8\u5728\u5185\u90e8\u5806\u6808\u4e2d\uff0c\u7ed3\u679c\u4e5f\u4f1a\u88ab\u63a8\u9001\u5230\u5806\u6808\u4e0a\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u5982\u4f55\u5b9e\u73b0javap\u5728\u8fd9\u91cc\u6240\u505a\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u5982\u4f55\u89e3\u6790\u7c7b\u6587\u4ef6\uff1f\n\u5982\u679c\u6211\u4eec\u7814\u7a76JVM\u89c4\u8303\uff0c\u5c31\u4f1a\u4e86\u89e3\u7c7b\u6587\u4ef6\u7ed3\u6784\u3002\u5b83\u603b\u662f\u4ee54\u4e2a\u5b57\u8282\u7684\u7b7e\u540d(CAFEBABE)\u5f00\u5934\uff0c\u7136\u540e\u662f2+2\u4e2a\u5b57\u8282\u7684\u7248\u672c\uff0c\u542c\u8d77\u6765\u5f88\u7b80\u5355\u3002\n\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5b57\u8282\u3001\u77ed\u7801\u3001\u6574\u6570\u548c\u5b57\u8282\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5b9e\u73b0\u6211\u4eec\u7684\u52a0\u8f7d\u5668\uff0c\u5982\u4e0b\u6240\u793a\uff1a\ntype loader struct{r io.Reader Err Err}func(l*loader)bytes(N Int)[]byte{b\uff1a=make([]byte\uff0cn\uff0cn)//\u6211\u4eec\u4e0d\u4f7f\u7528&#39\uff1b\u5982\u679cl.err==nil{_\uff0cl.err=io.ReadFull(L.R\uff0cb)}return b}func(l*loader)u1()uint8{return l.bytes(1)[0]}func(l*loader)u2()uint16{return binary.BigEndian.Uint16(l.bytes(2))}func(l*loader)u4()uint32{return binary.BigEndian.Uint32(l.bytes(4))}func(l*loader)U8(\u3002Add.class&34\uff1b)loader\uff1a=&amp\uff1bloader{r\uff1af}afebabe\uff1a=loader.u4()\u4e3b\u8981\uff1a=loader.u2()\u6b21\u8981\uff1a=loader.u2()\u3002\n\u7136\u540e\u89c4\u8303\u544a\u8bc9\u6211\u4eec\u9700\u8981\u89e3\u6790\u5e38\u91cf\u6c60\u3002\u90a3\u662f\u4ec0\u4e48\uff1f\u5b83\u662f\u7c7b\u6587\u4ef6\u7684\u7279\u6b8a\u90e8\u5206\uff0c\u5305\u542b\u8fd0\u884c\u7c7b\u6240\u9700\u7684\u5e38\u91cf\u3002\u6240\u6709\u5b57\u7b26\u4e32\u3001\u6570\u503c\u5e38\u91cf\u548c\u5f15\u7528\u90fd\u5b58\u50a8\u5728\u90a3\u91cc\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b57\u7b26\u4e32\u3001\u6570\u503c\u5e38\u91cf\u548c\u5f15\u7528\u90fd\u6709\u4e00\u4e2a\u60df\u4e00\u7684uint16\u7d22\u5f15(\u56e0\u6b64\uff0c\u4e00\u4e2a\u7c7b\u6700\u591a\u53ef\u4ee5\u670964K\u5e38\u91cf)\u3002\n\u6c60\u4e2d\u6709\u51e0\u79cd\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u6bcf\u79cd\u7c7b\u578b\u90fd\u5305\u542b\u4e00\u7ec4\u4e0d\u540c\u7684\u503c\u3002\u6211\u4eec\u5c06\u611f\u5174\u8da3\u7684\u662f\uff1a\n\u540d\u79f0\u548c\u7c7b\u578b\uff1a\u7c7b\u578b\u540d\u79f0\u548c\u63cf\u8ff0\u7b26\u7684\u7d22\u5f15\uff0c\u7528\u4e8e\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002\n\u5982\u60a8\u6240\u89c1\uff0c\u6c60\u4e2d\u7684\u5e38\u91cf\u7ecf\u5e38\u76f8\u4e92\u5f15\u7528\u3002\u7531\u4e8e\u6211\u4eec\u5728GO\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2aJVM\uff0c\u5e76\u4e14\u6ca1\u6709\u8054\u5408\u7c7b\u578b\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u5404\u79cd\u53ef\u80fd\u7684\u5e38\u91cf\u5b57\u6bb5\u7684\u5e38\u91cf\u7c7b\u578b\uff1a\ntype const struct{Tag byte NameIndex uint16 ClassIndex uint16 NameAndTypeIndex uint16 StringIndex uint16 DescIndex uint16 String}type ConstPool[]const\u3002\nfunc(l*loader)cpinfo()(StPool ConstPool){stPoolCount\uff1a=l.u2()//i\uff1a=uint16(1)\uff1bi&lt\uff1bconPoolCount\uff1b\u7684\u6709\u6548\u5e38\u91cf\u6c60\u7d22\u5f15\u4ece1\u5f00\u59cb\uff1bi++{c\uff1a=const{tag\uff1al.u1()}\u5f00\u5173c.Tag{case 0x01\uff1a//utf8\u5b57\u7b26\u4e32\u6587\u5b57\uff0c2\u5b57\u8282\u957f\u5ea6+\u6570\u636ec.String=string(l.bytes(int(l.u2()case 0x07\uff1a//\u7c7b\u7d22\u5f15c.NameIndex=l.u2()case 0x08\uff1a//\u5b57\u7b26\u4e32\u5f15\u7528\u7d22\u5f15c.StringIndex=l.u2()case 0x09\uff0c0x0a\uff1a//\u5b57\u6bb5\u548c\u65b9\u6cd5\uff1a\u7c7b\u7d22\u5f15+NAT\u7d22\u5f15c.ClassIndex=l.u2()c.NameAndTypeIndex=l.u2()case 0x0c\uff1a//name-and-type c.NameIndex\uff0cc.DescIndex=l.u2()\uff0cl.u2()\u9ed8\u8ba4\uff1al.err=fmt.Errorf(&#34\uff1b\u4e0d\u652f\u6301\u7684\u6807\u8bb0\uff1a%d&#34\uff1b\uff0cc.Tag)}constPool=append(constPool\uff0cc)}return constPool}\u3002\n\u6211\u4eec\u5728\u8fd9\u91cc\u4fdd\u6301\u7b80\u5355\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u7684JVM\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u901a\u8fc7\u63d2\u5165\u4e00\u4e2a\u989d\u5916\u7684\u672a\u4f7f\u7528\u7684\u5e38\u91cf\u9879\u6765\u552f\u4e00\u5730\u5bf9\u5f85Long\u548cDouble\u5e38\u91cf\u7c7b\u578b\uff0c\u6b63\u5982JVM\u89c4\u8303\u544a\u8bc9\u6211\u4eec\u7684\u90a3\u6837(\u56e0\u4e3a\u5e38\u91cf\u9879\u88ab\u8ba4\u4e3a\u662f32\u4f4d\u7684)\u3002\n\u4e3a\u4e86\u66f4\u5bb9\u6613\u5730\u6309\u7d22\u5f15\u83b7\u53d6\u5b57\u7b26\u4e32\u6587\u5b57\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0Resolve(Index Uint16)String\u65b9\u6cd5\uff1a\nfunc(Cp ConstPool)Resolve(Index Uint16)String{if cp[index-1].Tag==0x01{return cp[index-1].String}return&#34\uff1b&#34\uff1b}\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u5fc5\u987b\u6dfb\u52a0\u7c7b\u4f3c\u7684\u5e2e\u52a9\u5668\u6765\u89e3\u6790\u7c7b\u63a5\u53e3\u3001\u5b57\u6bb5\u548c\u65b9\u6cd5\u53ca\u5176\u5c5e\u6027\u7684\u5217\u8868\uff1a\nfunc(l*loader)interface(Cp ConstPool)(interface[]string){interfaceCount\uff1a=l.u2()for i\uff1a=uint16(0)\uff1bi&lt\uff1binterfaceCount\uff1bi++{interface=append(interface\uff0ccp.Resolve(l.u2()}return interface}//field type\u540c\u65f6\u7528\u4e8efield\u548cmethod\u7c7b\u578bField struct{Flags uint16 Name String Descriptor String Attributes[]\u3002\u5c5e\u6027\uff0c\u5305\u542b\u5b9e\u9645\u5b57\u8282\u4ee3\u7801\u7c7b\u578b\u5c5e\u6027struct{name string data[]byte}func(l*loader)field(Cp ConstPool)(field[]field){fieldsCount\uff1a=l.u2()for i\uff1a=uint16(0)\uff1bi&lt\uff1bfieldsCount\uff1bi++{field=append(field\uff0cField{Flags\uff1al.u2()\uff0cName\uff1acp.Resolve(l.u2())\uff0cDescriptor\uff1acp.Resolve(l.u2())\uff0cAttributes\uff1al.attrs(Cp)\uff0c})}return field}func(l*loader)attrs(Cp ConstPool)(attrs[]Attribute){AttributesCount\uff1a=l.u2()for i\uff1a=uu\u3002i++{attrs=append(attrs\uff0cattribute{name\uff1acp.Resolve(l.u2())\uff0cdata\uff1al.bytes(int(l.u4()\uff0c})}return attrs}\u3002\n\u5b57\u6bb5\u548c\u65b9\u6cd5\u90fd\u8868\u793a\u4e3aFields\uff0c\u8fd9\u662f\u975e\u5e38\u5e78\u8fd0\u7684\uff0c\u5e76\u4e14\u4e3a\u6211\u4eec\u8282\u7701\u4e86\u4e00\u4e9b\u65f6\u95f4\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\u5e76\u89e3\u6790\u5b8c\u6574\u7684\u7c7b\uff1a\ntype Class struct{ConstPool ConstPool Name String Super String Flags uint16 Interfaces[]String Fields[]Field Methods[]Field Attributes[]Attribute}Funcc Load(r io.Reader)(Class\uff0cError){loader\uff1a=&amp\uff1b\u52a0\u8f7d\u5668{r\uff1ar}c\uff1a=Class{}loader.u8()//Magic(U32)\uff0cMinor(U16)\uff0cmain(U16)cp\uff1a=loader.cpinfo()//const\u6c60\u4fe1\u606fc.ConstPool=cp c.Flags=loader.u2()//\u8bbf\u95ee\u6807\u5fd7c.Name=cp.Resolve(loader.u2())//\u8fd9\u4e2a\u7c7bc.Super=cp.Resolve(loader.u2())//\u8d85\u7c7bc.Interfaces=loader.interface(Cp)c.Fields=loader.field(Cp)//field c.Methods=loader.field(Cp)loader.err}\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770b\u751f\u6210\u7684\u7c7b\u4fe1\u606f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u6ca1\u6709\u5b57\u6bb5\u548c\u4e24\u4e2a\u65b9\u6cd5-&lt\uff1binit&gt\uff1b\uff1a()V\u548cadd\uff1a(Ii)V\u3002\u8fd9\u4e9b\u770b\u8d77\u6765\u50cf\u5e26\u62ec\u53f7\u7684\u7f57\u9a6c\u6570\u5b57\u662f\u4ec0\u4e48\uff1f\u8fd9\u4e9b\u90fd\u662f\u63cf\u8ff0\u7b26\uff0c\u5b83\u4eec\u5b9a\u4e49\u65b9\u6cd5\u63a5\u53d7\u4ec0\u4e48\u7c7b\u578b\u7684\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u4ec0\u4e48\u3002\u5728\u672c\u4f8b\u4e2d\uff0c&lt\uff1binit&gt\uff1b(\u4e00\u79cd\u5408\u6210\u65b9\u6cd5\uff0c\u7528\u4e8e\u5728\u6784\u9020\u5bf9\u8c61\u65f6\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316)\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\uff0c\u4e5f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9(V=void)\uff0c\u800c\u201cadd\u201d\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2aint(i=int32)\uff0c\u4e5f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u3002\n\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6211\u4eec\u89e3\u6790\u7684\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u4e00\u4e2a\u540d\u4e3a\u201cCode\u201d\u7684\u5c5e\u6027\u3002\u6b64\u5c5e\u6027\u6709\u4e00\u6bb5\u5b57\u8282\u4f5c\u4e3a\u6709\u6548\u8d1f\u8f7d\u3002\u5b57\u8282\u5982\u4e0b\uff1a\n&lt\uff1binit&gt\uff1b\uff1a[0 1 0 1 0 0 5 42 183 0 1 177 0 0 1 0 7 0 0 0 6 0 1 0 0 0 1]add\uff1a[0 2 0 2 0 0 0 4 26 27 96 172 0 0 1 0 7 0 0 0 6 0 1 0 0 0 3]\u3002\n\u5982\u679c\u6211\u4eec\u770b\u4e00\u4e0b\u89c4\u8303\uff0c\u8fd9\u4e00\u6b21\u662f\u5728\u5b57\u8282\u7801\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u770b\u5230\u201cCode\u201d\u5c5e\u6027\u4ee5maxstack value(2\u5b57\u8282)\u5f00\u5934\uff0c\u7136\u540e\u662fmaxlocals(2\u5b57\u8282)\uff0c\u7136\u540e\u662f\u4ee3\u7801\u957f\u5ea6(4\u5b57\u8282)\uff0c\u7136\u540e\u662f\u5b9e\u9645\u4ee3\u7801\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u5c5e\u6027\u53ef\u4ee5\u8fd9\u6837\u89e3\u8bfb\uff1a\n&lt\uff1binit&gt\uff1b\uff1amaxstack\uff1a1\uff0cmaxlocals\uff1a1\uff0ccode\uff1a[42 183 0 1177]add\uff1amaxstack\uff1a2\uff0cmaxlocals\uff1a2\uff0ccode\uff1a[26 27 96172]\n\u662f\u7684\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u65b9\u6cd5\u4e2d\u53ea\u67094\u52305\u4e2a\u5b57\u8282\u7684\u4ee3\u7801\u3002\u8fd9\u4e9b\u5b57\u8282\u610f\u5473\u7740\u4ec0\u4e48\uff1f\n\u5c31\u50cf\u6211\u8bf4\u7684\uff0cJVM\u662f\u4e00\u53f0\u5806\u6808\u673a\u5668\u3002\u6bcf\u6761\u6307\u4ee4\u90fd\u7f16\u7801\u4e3a\u4e00\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u53ef\u80fd\u8ddf\u4e00\u4e9b\u989d\u5916\u7684\u53c2\u6570\u3002\u5982\u679c\u6211\u4eec\u67e5\u770b\u89c4\u8303\uff0c\u6211\u4eec\u5c06\u770b\u5230\u201cadd\u201d\u65b9\u6cd5\u5177\u6709\u4ee5\u4e0b\u8bf4\u660e\uff1a\n\u4e0e\u6211\u4eec\u5f00\u59cb\u65f6\u5728javap\u8f93\u51fa\u4e2d\u770b\u5230\u7684\u5b8c\u5168\u4e00\u6837\uff01\u4f46\u662f\u6211\u4eec\u8be5\u5982\u4f55\u6267\u884c\u5462\uff1f\n\u5f53\u65b9\u6cd5\u5728JVM\u5185\u6267\u884c\u65f6\uff0c\u5b83\u6709\u81ea\u5df1\u7684\u4e34\u65f6\u64cd\u4f5c\u6570\u5806\u6808\u3001\u81ea\u5df1\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u81ea\u5df1\u8981\u6267\u884c\u7684\u4ee3\u7801\u5757\u3002\u6240\u6709\u8fd9\u4e9b\u53c2\u6570\u90fd\u5b58\u50a8\u5728\u5355\u4e2a\u6267\u884c\u5e27\u4e2d\u3002\u6b64\u5916\uff0c\u5e27\u5305\u542b\u5f53\u524d\u6307\u4ee4\u6307\u9488(\u6211\u4eec\u5728\u6267\u884c\u5b57\u8282\u7801\u65f6\u524d\u8fdb\u4e86\u591a\u8fdc)\u548c\u6307\u5411\u5305\u542b\u8be5\u65b9\u6cd5\u7684\u7c7b\u7684\u6307\u9488\u3002\u540e\u8005\u662f\u8bbf\u95ee\u7c7b\u7684\u5e38\u91cf\u6c60\u4ee5\u53ca\u5176\u4ed6\u7ec6\u8282\u6240\u5fc5\u9700\u7684\u3002\n\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4e3a\u4f7f\u7528\u7ed9\u5b9a\u53c2\u6570\u8c03\u7528\u7684\u7ed9\u5b9a\u65b9\u6cd5\u6784\u9020\u4e00\u4e2a\u6846\u67b6\u3002\u8fd9\u91cc\u6211\u5c06\u4f7f\u7528interface{}\u7c7b\u578b\u4f5c\u4e3a\u503c\u7c7b\u578b\uff0c\u5c3d\u7ba1\u6b63\u786e\u7684\u8054\u5408\u7c7b\u578b\u5f53\u7136\u4f1a\u662f\u66f4\u5b89\u5168\u7684\u9009\u62e9\u3002\ntype frame struct{Class Class IP uint32 Code[]byte locals[]interface{}Stack[]interface{}}func(C Class)frame(method string\uff0cargs.interface{})frame{for_\uff0cm\uff1a=range c.Methods{if m.Name==method{for_\uff0ca\uff1a=range m.Attributes{if a.Name==&#34\uff1bCode&#34\uff1b&amp\uff1b&amp\uff1blen(a.Data)&gt\uff1b8{maxLocals\uff1a=binary.BigEndian.Uint16(a.Data[2\uff1a4])frame\uff1a=frame{Class\uff1ac\uff0cCode\uff1aa.Data[8\uff1a]\uff0clocals\uff1amake([]interface{}\uff0cmaxLocals\uff0cmaxLocals)\uff0c}for i\uff1a=0\uff1bi&lt\uff1blen(Args)\uff1bi++{frame.Locals[i]=args[i]}\u6b7b\u673a(&#34\uff1b\u627e\u4e0d\u5230\u65b9\u6cd5&#34\uff1b)}\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u6846\u67b6\uff0c\u5b83\u5177\u6709\u521d\u59cb\u5316\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u7a7a\u7684\u5806\u6808\u548c\u9884\u52a0\u8f7d\u7684\u5b57\u8282\u7801\u3002\u73b0\u5728\u662f\u6267\u884c\u5b57\u8282\u7801\u7684\u65f6\u5019\u4e86\uff1a\nFunc Exec(F Frame)\u63a5\u53e3{}{for{op\uff1a=f.Code[f.ip]log.Printf(&#34\uff1bop\uff1a%02x\u5806\u6808\uff1a%v&#34\uff1b\uff0cop\uff0cf.Stack)n\uff1a=len(f.Stack)\u5f00\u5173op{\u6848\u4f8b26\uff1a//iLoad_0 f.Stack=append(f.Stack\uff0cf.Locals[0])\u6848\u4f8b27\uff1a//iLoad_1 f.Stack=append(f.Stack\uff0cf.Locals[1])\u6848\u4f8b96\uff1aa\uff1a=f.Stack[n-1].(Int32)b\uff1a=f.Stack[n-2].(Int32)f.Stack[n-2]=a+b f.Stack=f.Stack[\uff1an-1]\u6848\u4f8b172\uff1a//i return v\uff1a=f.Stack[n-1]f.Stack=f.Stack[\uff1an-1]return v}f.ip++}}\nF\uff0c_\uff1a=os.Open(&#34\uff1bAdd.class&#34\uff1b)class\uff0c_\uff1a=\u52a0\u8f7d(F)Frame\uff1a=class.Frame(&#34\uff1badd&#34\uff1b\uff0cint32(2)\uff0cint32(3))\u7ed3\u679c\uff1a=Exec(Frame)\u65e5\u5fd7\u3002Println(Result)//\u8f93\u51fa\uff1aOP\uff1a1A\u5806\u6808\uff1a[]OP\uff1a1B\u5806\u6808\uff1a[2]OP\uff1a60\u5806\u6808\uff1a[2 3]OP\uff1aAC\u5806\u6808\uff1a[5]5\u3002\n\u6240\u4ee5\uff0c\u5b83\u8d77\u4f5c\u7528\u4e86\u3002\u662f\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u548c\u53ef\u601c\u7684JVM\uff0c\u4f46\u5b83\u4ecd\u7136\u505aJVM\u505a\u7684\u4e8b\u60c5-\u52a0\u8f7d\u5b57\u8282\u7801\u5e76\u89e3\u91ca\u5b83(\u5f53\u7136\uff0c\u771f\u6b63\u7684JVM\u505a\u7684\u8fdc\u8fdc\u4e0d\u6b62\u8fd9\u4e9b)\u3002\n\u53e6\u5916\u4e24\u767e\u6761\u6307\u4ee4\u3001\u8fd0\u884c\u5e93\u3001OOP\u7c7b\u578b\u7cfb\u7edf\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u4e1c\u897f\u3002\n\u5e38\u91cf(\u5c06\u6765\u81ea\u5e38\u91cf\u6c60\u7684\u7a7a\u503c\u6216\u5c0f\u6570\u6216\u503c\u653e\u5165\u5806\u6808)\u3002\n\u5ef6\u957f\u4e86\u3002\u4e4d\u4e00\u770b\u770b\u8d77\u6765\u50cf\u662f\u96be\u770b\u7684\u53d8\u901a\u65b9\u6cd5\u3002\u800c\u4e14\u5b83\u53ef\u80fd\u4e0d\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u6539\u53d8\u3002\n\u5927\u591a\u6570\u6307\u4ee4\u7684\u5b9e\u73b0\u90fd\u5f88\u7b80\u5355-\u5b83\u4eec\u4ece\u5806\u6808\u4e2d\u83b7\u53d6\u4e00\u4e2a\u6216\u4e24\u4e2a\u53c2\u6570\uff0c\u5bf9\u5b83\u4eec\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u7136\u540e\u63a8\u9001\u7ed3\u679c\u3002\u8fd9\u91cc\u8981\u8bb0\u4f4f\u7684\u552f\u4e00\u4e00\u4ef6\u4e8b\u662f\uff0c\u957f\u6307\u4ee4\u548c\u53cc\u7cbe\u5ea6\u6307\u4ee4\u671f\u671b\u6bcf\u4e2a\u503c\u5360\u7528\u5806\u6808\u4e0a\u7684\u4e24\u4e2a\u69fd\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u9700\u8981\u989d\u5916\u7684ush()\u548cop()\uff0c\u8fd9\u4f7f\u5f97\u5bf9\u6307\u4ee4\u8fdb\u884c\u5206\u7ec4\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\n\u5b9e\u73b0\u5f15\u7528\u9700\u8981\u8003\u8651\u5bf9\u8c61\u6a21\u578b-\u60a8\u5e0c\u671b\u5982\u4f55\u5b58\u50a8\u5bf9\u8c61\u53ca\u5176\u7c7b\uff0c\u5982\u4f55\u8868\u793a\u7ee7\u627f\uff0c\u5728\u54ea\u91cc\u5b58\u50a8\u5b9e\u4f8b\u5b57\u6bb5\u548c\u7c7b\u5b57\u6bb5\u3002\u6b64\u5916\uff0c\u8fd9\u4e5f\u662f\u60a8\u5fc5\u987b\u5c0f\u5fc3\u65b9\u6cd5\u5206\u6d3e\u7684\u5730\u65b9-\u6709\u591a\u4e2a\u201c\u8c03\u7528\u201d\u6307\u4ee4\uff0c\u5b83\u4eec\u7684\u884c\u4e3a\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\uff1a\ninvokSpecial\uff1a\u76f4\u63a5\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u5408\u6210\u65b9\u6cd5\uff0c\u5982&lt\uff1binit&gt\uff1b\u6216\u79c1\u6709\u65b9\u6cd5\u3002\ninvkedynamic\uff1a\u8c03\u7528\u52a8\u6001\u8ba1\u7b97\u7684\u8c03\u7528\u7ad9\u70b9\uff0c\u8fd9\u662fJava7\u4e2d\u7684\u65b0\u529f\u80fd\uff0c\u5bf9\u52a8\u6001\u65b9\u6cd5\u548c\u65b9\u6cd5\u53e5\u67c4\u975e\u5e38\u6709\u7528\u3002\n\u5982\u679c\u60a8\u5728\u6ca1\u6709\u5783\u573e\u6536\u96c6\u7684\u8bed\u8a00\u4e2d\u5b9e\u73b0JVM-\u8fd9\u4e5f\u662f\u60a8\u5e94\u8be5\u8003\u8651\u5982\u4f55\u6267\u884c\u5783\u573e\u6536\u96c6\u7684\u5730\u65b9\uff1a\u5f15\u7528\u8ba1\u6570\u3001\u6807\u8bb0\u548c\u6e05\u9664\u7b49\u3002\u901a\u8fc7\u5b9e\u73b0athrow\u6765\u5904\u7406\u5f02\u5e38\u3001\u5728\u6846\u67b6\u4e2d\u4f20\u64ad\u5b83\u4eec\u5e76\u4f7f\u7528\u5f02\u5e38\u8868\u6765\u5904\u7406\u5b83\u4eec\u662f\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u4e3b\u9898\u3002\n\u6700\u540e\uff0c\u5982\u679c\u6ca1\u6709\u8fd0\u884c\u65f6\u7c7b\uff0c\u60a8\u7684JVM\u4e5f\u5c06\u6beb\u65e0\u7528\u5904\u3002\u5982\u679c\u6ca1\u6709java/lang/object\uff0c\u60a8\u751a\u81f3\u4e0d\u53ef\u80fd\u901a\u8fc7\u6784\u9020\u65b0\u5bf9\u8c61\u6765\u770b\u5230\u65b0\u6307\u4ee4\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u60a8\u7684\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u4ecejava.lang\u3001java.io\u548cjava.util\u5305\u4e2d\u63d0\u4f9b\u4e00\u4e9b\u5e38\u89c1\u7684JRE\u7c7b\uff0c\u4e5f\u53ef\u80fd\u662f\u66f4\u7279\u5b9a\u4e8e\u9886\u57df\u7684\u7c7b\u3002\u6700\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u662f\uff0c\u7c7b\u4e2d\u7684\u67d0\u4e9b\u65b9\u6cd5\u5fc5\u987b\u5728\u672c\u5730\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u7528Java\u5b9e\u73b0\u3002\u8fd9\u5c06\u5f15\u53d1\u5982\u4f55\u67e5\u627e\u548c\u6267\u884c\u6b64\u7c7b\u65b9\u6cd5\u7684\u95ee\u9898\uff0c\u8fd9\u5c06\u6210\u4e3aJVM\u7684\u53e6\u4e00\u4e2a\u8fb9\u7f18\u6848\u4f8b\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u5408\u9002\u7684JVM\u5e76\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\uff0c\u7136\u800c\uff0c\u7406\u89e3\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u4e5f\u4e0d\u662f\u90a3\u4e48\u590d\u6742\u3002\n\u6211\u53ea\u6709\u4e00\u4e2a\u590f\u5929\u7684\u5468\u672b\u53ef\u4ee5\u817e\u51fa\u65f6\u95f4\uff0c\u800c\u4e14\u6211\u7684jvm\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\uff0c\u4f46\u662f\u7ed3\u6784\u770b\u8d77\u6765\u6216\u591a\u6216\u5c11\u5f88\u6e05\u695a\uff1ahttps://github.com/zserge/tojvm(\u603b\u662f\u6b22\u8fcePR\uff01)\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u7684\u5b9e\u9645\u4ee3\u7801\u7247\u6bb5\u751a\u81f3\u66f4\u5c0f\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u8981\u70b9\u4f7f\u7528\u3002\n\u5982\u679c\u60a8\u60f3\u66f4\u6df1\u5165\u5730\u63a2\u8ba8\u8fd9\u4e2a\u4e3b\u9898-\u60a8\u53ef\u4ee5\u8003\u8651\u770b\u770b\u5c0f\u578bJVM\uff1a\n\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u6ca1\u6709\u8ba9\u60a8\u8fdc\u79bbJava\u3002\u865a\u62df\u673a\u5f88\u6709\u8da3\uff0cJVM\u786e\u5b9e\u914d\u5f97\u4e0a\u5b83\u7684\u4f4d\u7f6e\u3002", "note_en": "Whether we like it or not, but Java is one of the most widely used programming languages. However, since most of the applications in Java are either too boring or too complex - not every Java developer has enough curiosity to look under the hood and see how JVM works.\n In this post I will try to write a toy (and incomplete) JVM to show the core principles behind it and hopefully sparkle some interest in you to learn it further.\n   public class Add { public static int add(int a, int b) { return a + b; }}\n We compile our class with  javac Add.java and it results in  Add.class. This class file is the actual binary file that JVM can execute. All that is left to do is to implement such a JVM that would execute it correctly.\n If we look inside the  Add.class with a hexdump - we probably won\u2019t get too impressed:\n 00000000 ca fe ba be 00 00 00 34 00 0f 0a 00 03 00 0c 07 |.......4........|00000010 00 0d 07 00 0e 01 00 06 3c 69 6e 69 74 3e 01 00 |........&lt;init&gt;..|00000020 03 28 29 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 |.()V...Code...Li|00000030 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65 01 00 03 |neNumberTable...|00000040 61 64 64 01 00 05 28 49 49 29 49 01 00 0a 53 6f |add...(II)I...So|00000050 75 72 63 65 46 69 6c 65 01 00 08 41 64 64 2e 6a |urceFile...Add.j|00000060 61 76 61 0c 00 04 00 05 01 00 03 41 64 64 01 00 |ava........Add..|00000070 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63 |.java/lang/Objec|00000080 74 00 21 00 02 00 03 00 00 00 00 00 02 00 01 00 |t.!.............|00000090 04 00 05 00 01 00 06 00 00 00 1d 00 01 00 01 00 |................|000000a0 00 00 05 2a b7 00 01 b1 00 00 00 01 00 07 00 00 |...*............|000000b0 00 06 00 01 00 00 00 01 00 09 00 08 00 09 00 01 |................|000000c0 00 06 00 00 00 1c 00 02 00 02 00 00 00 04 1a 1b |................|000000d0 60 ac 00 00 00 01 00 07 00 00 00 06 00 01 00 00 |`...............|000000e0 00 03 00 01 00 0a 00 00 00 02 00 0b |............|\n Although we don\u2019t see a clear structure here yet - we need to find a way how to parse it: what are these  ()V and  (II)I, what is  &lt;init&gt;, and why does it start with \u201ccafe babe\u201d?\n You probably have seen another way to dump class files, which is often more useful:\n $ javap -c AddCompiled from &#34;Add.java&#34;public class Add { public Add(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&#34;&lt;init&gt;&#34;:()V 4: return public static int add(int, int); Code: 0: iload_0 1: iload_1 2: iadd 3: ireturn}\n Now we see our class, its constructor, and a method. Both constructor and method contain a few instructions and it now becomes more or less clear what our add() method does: it loads two arguments ( iload_0 and  iload_1), adds them, and returns the result. JVM is a stack machine, so there are no registers, all arguments to the instructions are stored on the internal stack and the results are pushed on the stack as well.\n  Now, how can we achieve what javap did here, how do we parse the class file?\n If we look into the  JVM specification, we learn about  classfile structure. It always starts with 4 bytes signature (CAFEBABE), then 2+2 bytes for version, sounds simple.\n Since we would have to read bytes, shorts, ints, and byte sequences from the binary file, we can start implementing our loader like this:\n type loader struct {\tr io.Reader\terr error}func (l *loader) bytes(n int) []byte {\tb := make([]byte, n, n)\t// we don&#39;t want to handle errors in each step,\t// so simply store the first found error till the end\t// and do nothing if we entered an erroneous state\tif l.err == nil {\t\t_, l.err = io.ReadFull(l.r, b)\t}\treturn b}func (l *loader) u1() uint8 { return l.bytes(1)[0] }func (l *loader) u2() uint16 { return binary.BigEndian.Uint16(l.bytes(2)) }func (l *loader) u4() uint32 { return binary.BigEndian.Uint32(l.bytes(4)) }func (l *loader) u8() uint64 { return binary.BigEndian.Uint64(l.bytes(8)) }// Usage:f, _ := os.Open(&#34;Add.class&#34;)loader := &amp;loader{r: f}cafebabe := loader.u4()major := loader.u2()minor := loader.u2()\n And then the spec tells us that we need to parse the constant pool. What is it? It is a special part of the class file, that contains constants needed to run the class. All the strings, numerical constants, and references are stored there and each has a unique uint16 index (thus, a class may have up to 64K constants).\n There are several types of constants in the pool, each containing a different set of values. We would be interested in:\n Name and type: an index of a type name and descriptor, used for fields and methods\n As you see, constants in the pool are referring to each other a lot. Since we are implementing a JVM in Go and there are no union types, let\u2019s make a Const type that would contain various possible constant fields in it:\n type Const struct {\tTag byte\tNameIndex uint16\tClassIndex uint16\tNameAndTypeIndex uint16\tStringIndex uint16\tDescIndex uint16\tString string}type ConstPool []Const\n  func (l *loader) cpinfo() (constPool ConstPool) {\tconstPoolCount := l.u2()\t// Valid constant pool indices start from 1\tfor i := uint16(1); i &lt; constPoolCount; i++ {\t\tc := Const{Tag: l.u1()}\t\tswitch c.Tag {\t\tcase 0x01: // UTF8 string literal, 2 bytes length + data\t\t\tc.String = string(l.bytes(int(l.u2())))\t\tcase 0x07: // Class index\t\t\tc.NameIndex = l.u2()\t\tcase 0x08: // String reference index\t\t\tc.StringIndex = l.u2()\t\tcase 0x09, 0x0a: // Field and method: class index + NaT index\t\t\tc.ClassIndex = l.u2()\t\t\tc.NameAndTypeIndex = l.u2()\t\tcase 0x0c: // Name-and-type\t\t\tc.NameIndex, c.DescIndex = l.u2(), l.u2()\t\tdefault:\t\t\tl.err = fmt.Errorf(&#34;unsupported tag: %d&#34;, c.Tag)\t\t}\t\tconstPool = append(constPool, c)\t}\treturn constPool}\n We keep things simple here, but in real JVM we would have to treat long and double constant types uniquely, by inserting an additional unused const item, as JVM spec tells us (since const items are considered to be 32-bit).\n To easier get string literals by indices, we would implement a  Resolve(index uint16) string method:\n func (cp ConstPool) Resolve(index uint16) string {\tif cp[index-1].Tag == 0x01 {\t\treturn cp[index-1].String\t}\treturn &#34;&#34;}\n Now we have to add similar helpers to parse a list of class interfaces, fields and methods, and their attributes:\n func (l *loader) interfaces(cp ConstPool) (interfaces []string) {\tinterfaceCount := l.u2()\tfor i := uint16(0); i &lt; interfaceCount; i++ {\t\tinterfaces = append(interfaces, cp.Resolve(l.u2()))\t}\treturn interfaces}// Field type is used for both, fields and methodstype Field struct {\tFlags uint16\tName string\tDescriptor string \tAttributes []Attribute }// Attributes contain addition information about fields and classes// The most useful is &#34;Code&#34; attribute, which contains actual byte codetype Attribute struct {\tName string\tData []byte}func (l *loader) fields(cp ConstPool) (fields []Field) {\tfieldsCount := l.u2()\tfor i := uint16(0); i &lt; fieldsCount; i++ {\t\tfields = append(fields, Field{\t\t\tFlags: l.u2(),\t\t\tName: cp.Resolve(l.u2()),\t\t\tDescriptor: cp.Resolve(l.u2()),\t\t\tAttributes: l.attrs(cp),\t\t})\t}\treturn fields}func (l *loader) attrs(cp ConstPool) (attrs []Attribute) {\tattributesCount := l.u2()\tfor i := uint16(0); i &lt; attributesCount; i++ {\t\tattrs = append(attrs, Attribute{\t\t\tName: cp.Resolve(l.u2()),\t\t\tData: l.bytes(int(l.u4())),\t\t})\t}\treturn attrs}\n Both, fields and methods are represented as Fields, which is very fortunate and saves us some time. Finally, we can assemble it all together and parse our complete class:\n type Class struct {\tConstPool ConstPool\tName string\tSuper string\tFlags uint16\tInterfaces []string\tFields []Field\tMethods []Field\tAttributes []Attribute}func Load(r io.Reader) (Class, error) {\tloader := &amp;loader{r: r}\tc := Class{}\tloader.u8() // magic (u32), minor (u16), major (u16)\tcp := loader.cpinfo() // const pool info\tc.ConstPool = cp\tc.Flags = loader.u2() // access flags\tc.Name = cp.Resolve(loader.u2()) // this class\tc.Super = cp.Resolve(loader.u2()) // super class\tc.Interfaces = loader.interfaces(cp)\tc.Fields = loader.fields(cp) // fields\tc.Methods = loader.fields(cp) // methods\tc.Attributes = loader.attrs(cp) // methods\treturn c, loader.err}\n Now if we look into the resulting class info we will see that it has zero fields and two methods -  &lt;init&gt;:()V and  add:(II)V. What are these things that look like roman numbers with parens? Those are descriptors, they define what types of arguments a method takes and what it returns. In this case  &lt;init&gt; (a synthetic method, used to initialize objects when they are constructed) takes no arguments and returns nothing (V=void), while the \u201cadd\u201d method takes two ints (I=int32) and also returns nothing.\n  If we look closer, we\u2019ll see that each method in our parsed class has one attribute, named \u201cCode\u201d. This attribute has a slice of bytes as a payload.The bytes are the following:\n &lt;init&gt;:[0 1 0 1 0 0 0 5 42 183 0 1 177 0 0 0 1 0 7 0 0 0 6 0 1 0 0 0 1]add:[0 2 0 2 0 0 0 4 26 27 96 172 0 0 0 1 0 7 0 0 0 6 0 1 0 0 0 3]\n If we look at the spec, this time in the  bytecode section, we will see that \u201cCode\u201d attribute starts with maxstack value (2 bytes), then maxlocals (2 bytes), then code length (4 bytes), and then actual code. So our attributes can be read like this:\n &lt;init&gt;: maxstack: 1, maxlocals: 1, code: [42 183 0 1 177]add: maxstack: 2, maxlocals: 2, code: [26 27 96 172]\n Yes, we only have 4 and 5 bytes of code in each method. What do those bytes mean?\n Like I said, JVM is a stack machine. Each instruction is encoded as a single byte, which might be followed by some additional arguments. If we look at the spec, we will see that the \u201cadd\u201d method has the following instructions:\n  Exactly like we saw in javap output at the beginning! But how shall we execute it?\n  When a method is executed inside the JVM, it has its own stack for temporary operands, its own local variables, and its own chunk of code to execute. All these parameters are stored in a single execution frame. Additionally, frames contain the current instruction pointer (how far we have advanced while executing the bytecode) and a pointer to the class, which contained the method. The latter is needed to get access to the const pool of the class, as well as other details.\n Let\u2019s make a method that constructs a frame for the given method to be called with the given arguments. I will be using  interface{} type here as the Value type, although proper union types would of course be a safer choice.\n type Frame struct {\tClass Class\tIP uint32\tCode []byte\tLocals []interface{}\tStack []interface{}}func (c Class) Frame(method string, args ...interface{}) Frame {\tfor _, m := range c.Methods {\t\tif m.Name == method {\t\t\tfor _, a := range m.Attributes {\t\t\t\tif a.Name == &#34;Code&#34; &amp;&amp; len(a.Data) &gt; 8 {\t\t\t\t\tmaxLocals := binary.BigEndian.Uint16(a.Data[2:4])\t\t\t\t\tframe := Frame{\t\t\t\t\t\tClass: c,\t\t\t\t\t\tCode: a.Data[8:],\t\t\t\t\t\tLocals: make([]interface{}, maxLocals, maxLocals),\t\t\t\t\t}\t\t\t\t\tfor i := 0; i &lt; len(args); i++ {\t\t\t\t\t\tframe.Locals[i] = args[i]\t\t\t\t\t}\t\t\t\t\treturn frame\t\t\t\t}\t\t\t}\t\t}\t}\tpanic(&#34;method not found&#34;)}\n So, we got the Frame, with initialized locals, empty stack, and preloaded bytecode. Now it\u2019s time to execute the bytecode:\n func Exec(f Frame) interface{} {\tfor {\t\top := f.Code[f.IP]\t\tlog.Printf(&#34;OP:%02x STACK:%v&#34;, op, f.Stack)\t\tn := len(f.Stack)\t\tswitch op {\t\tcase 26: // iload_0\t\t\tf.Stack = append(f.Stack, f.Locals[0])\t\tcase 27: // iload_1\t\t\tf.Stack = append(f.Stack, f.Locals[1])\t\tcase 96:\t\t\ta := f.Stack[n-1].(int32)\t\t\tb := f.Stack[n-2].(int32)\t\t\tf.Stack[n-2] = a + b\t\t\tf.Stack = f.Stack[:n-1]\t\tcase 172: // ireturn\t\t\tv := f.Stack[n-1]\t\t\tf.Stack = f.Stack[:n-1]\t\t\treturn v\t\t}\t\tf.IP++\t}}\n  f, _ := os.Open(&#34;Add.class&#34;)class, _ := Load(f)frame := class.Frame(&#34;add&#34;, int32(2), int32(3))result := Exec(frame)log.Println(result)// OUTPUT:OP:1a STACK:[]OP:1b STACK:[2]OP:60 STACK:[2 3]OP:ac STACK:[5]5\n So, it works. Yes, it\u2019s a very lousy and pitiful JVM, but still, it does what JVM does - loads bytecode and interprets it (but of course, the real JVM does way more than that).\n  The other two hundred instructions, the runtime, OOP type system, and a few other things.\n  Constants (put a null or a small number or values from const pool on the stack).\n         Extended. Something that would look like an ugly workaround at a first glance. And it probably won\u2019t change over time.\n Most instructions are trivial to implement - they take one or two arguments from the stack, perform some operation on them, and push the result. The only thing to keep in mind here is that long and double instructions expect that each value takes two slots on the stack, so you may require additional push() and pop(), which makes it harder to group the instructions.\n Implementing References requires to think about the object model - how you would like to store Objects and their Classes, how to represent inheritance, where to store instance fields and class fields. Also, this is where you would have to be careful about method dispatching - there are multiple \u201cinvoke\u201d instructions and they behave in a slighly different manner:\n invokespecial: invoke an instance method directly, mostly used for synthetic methods, like  &lt;init&gt;, or private methods.\n   invokedynamic: invoke a dynamically-computed call site, new in Java 7, useful for dynamic methods and MethodHandles.\n If you implement a JVM in a language without garbage collection - this is also where you should think about how to perform the garbage collection: reference counting, mark-and-sweep, etc. Handling exceptions by implementing  athrow, propagating them through the frames and handling them with exception tables is another interesting topic.\n Finally, your JVM remains useless if there no runtime classes. Without  java/lang/Object you are unlikely to even see how  new instruction works by constructing new objects. Your runtime may provide some common JRE classes from java.lang, java.io, and java.util packages, or it may be something more domain-specific. Most likely some methods in the classes would have to be implemented natively and not in Java. This will raise the question of how to find and execute such methods and it becomes another edge case for your JVM.\n In other words, implementing a proper JVM is not so trivial, however, understanding how it is implemented is not so complex either.\n I only had one summer weekend to spare, and my JVM still has a long way to go, but the structure looks more or less clear:  https://github.com/zserge/tojvm (PRs are always welcome!)\n The actual code snippets from this blog post are even smaller and available as a  gist.\n If you would like to explore the topic deeper - you may consider looking at small JVMs:\n  I hope this article did not turn you away from Java. Virtual machines are fun, and JVM truly deserves its place.", "posttime": "2020-06-03 02:36:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u73a9\u5177,toy,\u65b9\u6cd5", "title": "\u5982\u4f55\u7f16\u5199(\u73a9\u5177)JVM", "title_en": "How to Write a (Toy) JVM", "transed": 1, "url": "https://zserge.com/posts/jvm/", "via": "", "real_tags": ["\u73a9\u5177", "toy", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "f8540ff7a13056e8ea2d89cd7fd5958a.png", "infoid": 1004872, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u98de\u884c\u65e5\u5fd7\uff0c\u6d77\u5173\u548c\u8fb9\u5883\u4fdd\u62a4\u5c40(CBP)\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u6b63\u5728\u8fdb\u884c\u7684\u53cd\u5bf9\u8b66\u5bdf\u66b4\u884c\u7684\u6297\u8bae\u6d3b\u52a8\u4e2d\u98de\u884c\u4e86\u4e00\u67b6\u6355\u98df\u8005\u65e0\u4eba\u673a\u3002\n\u4e0a\u534810\u70b910\u5206\u5de6\u53f3\uff0c\u4e00\u67b6\u4f7f\u7528\u547c\u53f7CBP-104\u7684\u98de\u673a\u4ece\u5317\u8fbe\u79d1\u4ed6\u5dde\u7684\u5927\u798f\u514b\u65af\u7a7a\u519b\u57fa\u5730\u8d77\u98de-CBP\u5728\u90a3\u91cc\u9a7b\u624e\u7740\u65e0\u4eba\u673a\u3002\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4\uff0c\u5230\u8fbe\u660e\u5c3c\u963f\u6ce2\u5229\u65af\uff0c\u5e76\u4e8e\u4e0a\u534811\u70b947\u5206\u5728\u57ce\u5e02\u4e0a\u7a7a2\u4e07\u82f1\u5c3a\u5904\u8fdb\u5165\u516d\u89d2\u5f62\u7b49\u5f85\u6a21\u5f0f\u3002\u57c3\u7279\u3002\u4e0b\u53481\u70b915\u5206\u5de6\u53f3\u3002\u4e1c\u90e8\u65f6\u95f4\uff0c\u5b83\u5f00\u59cb\u8fd4\u56de\u5927\u798f\u514b\u65af\u3002\n\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u4e0d\u5728CBP\u7ba1\u8f96\u7684100\u7a7a\u4e2d\u82f1\u91cc\u8fb9\u5883\u533a\u5185\uff0c\u8fd9\u4e00\u5730\u533a\u7684\u4eba\u53e3\u7565\u4f4e\u4e8e\u5168\u56fd\u4eba\u53e3\u7684\u4e09\u5206\u4e4b\u4e8c\u3002\u76ee\u524d\uff0c\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u8b66\u5bdf\u5c40\u9488\u5bf9\u66b4\u884c\u548c\u79cd\u65cf\u4e3b\u4e49\u7684\u5927\u89c4\u6a21\u6297\u8bae\u6d3b\u52a8\u9707\u64bc\u4e86\u8fd9\u5ea7\u57ce\u5e02\uff0c\u8fd9\u4e9b\u6297\u8bae\u6d3b\u52a8\u968f\u540e\u5f15\u53d1\u4e86\u5168\u56fd\u5404\u5730\u7684\u5176\u4ed6\u793a\u5a01\u6d3b\u52a8\u3002\u5468\u4e94\uff0c\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u5728\u53d1\u51fa\u4ee4\u4eba\u538c\u6076\u7684\u201c\u519b\u65b9\u201d\u4f7f\u7528\u81f4\u547d\u6b66\u529b\u5a01\u80c1\u7684\u540c\u65f6\uff0c\u5c06\u8be5\u5e02\u7684\u793a\u5a01\u8005\u79f0\u4e3a\u62a2\u52ab\u8005\u548c\u201c\u66b4\u5f92\u201d\u3002\n\u5468\u4e94\uff0c\u767d\u5bab\u8f6c\u53d1\u4e86\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u547c\u5401\u2026\u7684\u63a8\u6587\uff0c\u5632\u8bbd\u63a8\u7279\u3002\n\u591a\u8bfb\u3002\nCBP-104\u6700\u5148\u88ab\u98de\u884c\u89c2\u5bdf\u793e\u533aADB-S Exchange\u53d1\u73b0\uff0c\u5e76\u88ab\u8c03\u67e5\u8bb0\u8005Jason Paladino\u5728Twitter\u4e0a\u6807\u8bb0\u3002\u6355\u98df\u8005\u65e0\u4eba\u673a\u914d\u5907\u4e86\u5f3a\u5927\u7684\u6444\u50cf\u5934\uff0c\u53ef\u4ee5\u572825000\u82f1\u5c3a\u7684\u9ad8\u7a7a\u6355\u6349\u6e05\u6670\u7684\u89c6\u9891\uff0c\u5e76\u80fd\u591f\u5728\u7a7a\u4e2d\u505c\u7559\u6570\u5341\u4e2a\u5c0f\u65f6\u3002\n\u547c\u53f7CBP-104\u88ab\u8bb8\u591a\u6d88\u606f\u6765\u6e90\u786e\u8ba4\u4e3a\u8be5\u673a\u6784\u8fd0\u8425\u7684\u6355\u98df\u8005\u65e0\u4eba\u673a\uff0c\u5305\u62ec\u5236\u9020\u5546\u901a\u7528\u539f\u5b50\u516c\u53f82006\u5e74\u7684\u65b0\u95fb\u7a3f\uff0c2007\u5e74\u7684\u4e00\u7bc7\u79d1\u666e\u6587\u7ae0\uff0c\u4ee5\u53caCBP\u7684\u6f14\u793a\u6587\u7a3f\u548c\u65e0\u4eba\u673a\u98de\u884c\u65e5\u5fd7\u3002\u6240\u8ba8\u8bba\u7684\u786e\u5207\u578b\u53f7\u662f\u201c\u6355\u98df\u8005B\u201d\uff0c\u901a\u5e38\u7528\u578b\u53f7\u540d\u79f0MQ-9\u201c\u6536\u5272\u8005\u201d\u6765\u8bc6\u522b\u3002\nCBP\u65e0\u4eba\u4fa6\u5bdf\u673a\u83b7\u51c6\u5728\u8fb9\u5883100\u7a7a\u4e2d\u82f1\u91cc\u8303\u56f4\u5185\u884c\u52a8\uff0c\u8fb9\u5883\u6216\u591a\u6216\u5c11\u53d7\u5230\u6301\u7eed\u7684\u7a7a\u4e2d\u76d1\u89c6\u3002\u81f3\u5c11\u6839\u636eCityLab\u7684\u4e00\u4e2a\u5730\u56fe\u9879\u76ee\uff0cCBP-104\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u4e0a\u7a7a\u7684\u6574\u4e2a\u7b49\u5f85\u6a21\u5f0f\u90fd\u5728\u8be5\u533a\u57df\u4e4b\u5916\uff0c\u4e0a\u5468\u4e94\u7684\u5927\u90e8\u5206\u98de\u884c\u8def\u7ebf\u4e5f\u662f\u5982\u6b64\u3002\u7136\u800c\uff0cCBP\u7ecf\u5e38\u4e3b\u5f20\u6269\u5927\u6743\u529b\uff0c\u91cd\u65b0\u5b9a\u4e49\u5176\u7ba1\u8f96\u6743\u7684\u8fb9\u754c\uff0c\u4f8b\u5982\u56fd\u9645\u673a\u573a\u5468\u56f4\u7684\u533a\u57df\uff0c\u8fb9\u5883\u5de1\u903b\u961f\u53ef\u4ee5\u5728\u90a3\u91cc\u8bc1\u660e\u53d1\u751f\u4e86\u8d8a\u5883\u3002\n\u81ea\u7531\u610f\u5fd7\u4e3b\u4e49\u7684\u5361\u6258\u7814\u7a76\u6240(Cato Institute)2018\u5e74\u7684\u4e00\u9879\u5206\u6790\u53d1\u73b0\uff0c\u8be5\u673a\u6784\u8fd0\u8425\u7684\u6355\u98df\u8005B\u65e0\u4eba\u673a\u5bf9\u7f34\u83b7\u6bd2\u54c1\u548c\u902e\u6355\u8bd5\u56fe\u8fdb\u5165\u7f8e\u56fd\u7684\u4eba\u7b49\u884c\u52a8\u51e0\u4e4e\u6ca1\u6709\u8d21\u732e\uff0c\u4f46\u5b83\u4eec\u786e\u5b9e\u8d4b\u4e88\u4e86CBP\u672a\u7ecf\u6388\u6743\u7684\u76d1\u63a7\u6743\uff0c\u800cCBP\u66fe\u6570\u767e\u6b21\u501f\u7ed9\u5176\u4ed6\u673a\u6784\u3002\nACLU\u9ad8\u7ea7\u7acb\u6cd5\u987e\u95ee\u5c3c\u739b\u00b7\u8f9b\u683c\u00b7\u53e4\u5229\u4e9a\u5c3c(Neema Singh Guliani)\u5728\u7ed9Gizmodo\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\u5199\u9053\uff1a\u201c\u4efb\u4f55\u653f\u5e9c\u673a\u6784\u90fd\u4e0d\u5e94\u8be5\u4e3a\u9ed1\u4eba\u793e\u533a\u7684\u8fc7\u5ea6\u76d1\u7ba1\u63d0\u4f9b\u4fbf\u5229\uff0c\u5230\u6b64\u4e3a\u6b62\u3002\u201d\u201c\u800cCBP\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u53d1\u751f\u7684\u4e8b\u60c5\u4e2d\u6839\u672c\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002\u8fd9\u4e2a\u6d41\u6c13\u673a\u6784\u4f7f\u7528\u519b\u4e8b\u6280\u672f\u76d1\u89c6\u7f8e\u56fd\u5883\u5185\u7684\u6297\u8bae\u8005\u4ee4\u4eba\u6df1\u611f\u4e0d\u5b89\uff0c\u7279\u522b\u662f\u8003\u8651\u5230CBP\u7f3a\u4e4f\u660e\u786e\u800c\u5f3a\u6709\u529b\u7684\u653f\u7b56\u6765\u4fdd\u62a4\u9690\u79c1\u548c\u5baa\u6cd5\u6743\u5229\u3002\u8be5\u673a\u6784\u5728\u57ce\u5e02\u4e0a\u7a7a\u4f7f\u7528\u65e0\u4eba\u673a\u7684\u884c\u4e3a\u5e94\u8be5\u7acb\u5373\u505c\u6b62\u3002\u201c\u3002\n\u867d\u7136\u5f88\u660e\u663eCBP-104\u6b63\u5728\u76d1\u63a7\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u7684\u6297\u8bae\u6d3b\u52a8\uff0c\u4f46\u4e0d\u592a\u6e05\u695aCBP\u9a7e\u9a76\u65e0\u4eba\u673a\u662f\u51fa\u4e8e\u81ea\u613f\uff0c\u8fd8\u662f\u5e94\u5f53\u5730\u6267\u6cd5\u90e8\u95e8\u6216\u5176\u4ed6\u8054\u90a6\u673a\u6784\u7684\u8981\u6c42\u3002\u76ee\u524d\u4e5f\u4e0d\u6e05\u695a\u65e0\u4eba\u673a\u6536\u96c6\u7684\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u4fe1\u606f\uff0c\u76ee\u7684\u662f\u4ec0\u4e48\u3002CBP\u57282015\u5e74\u544a\u8bc9MPR\u65b0\u95fb\uff0c\u98de\u51fa\u5927\u798f\u514b\u65af\u57fa\u5730\u7684\u65e0\u4eba\u673a\u65e0\u6cd5\u8fdb\u884c\u8f66\u724c\u8bc6\u522b\u548c\u4eba\u8138\u8bc6\u522b\uff0c\u5c31\u57282020\u5e742\u6708\uff0cCBP\u544a\u8bc9Recode\uff0c\u5b83\u5728\u8fb9\u5883\u6ca1\u6709\u4f7f\u7528\u4eba\u8138\u8bc6\u522b\u3002\nCBP\u6ca1\u6709\u7acb\u5373\u56de\u590dGizmodo\u7684\u7f6e\u8bc4\u8bf7\u6c42\uff0c\u5982\u679c\u6709\u6d88\u606f\uff0c\u6211\u4eec\u4f1a\u66f4\u65b0\u8fd9\u7bc7\u5e16\u5b50\u3002\n\u66f4\u65b0\u65f6\u95f4\uff1a2020\u5e745\u670829\u65e5\u4e0b\u53483\uff1a00\u3002ET\uff1a\u8fd9\u7bc7\u5e16\u5b50\u5df2\u7ecf\u66f4\u65b0\uff0c\u5305\u62ec\u6765\u81ea\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u7684\u8bc4\u8bba\u3002\n\u66f4\u6b63\uff1a2020\u5e745\u670829\u65e5\u4e0b\u53485\uff1a29\u3002ET\uff1a\u8fd9\u7bc7\u6587\u7ae0\u7684\u524d\u4e00\u4e2a\u7248\u672c\u8bf4\uff0c\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u5728CBP\u98de\u673a\u83b7\u51c6\u8fd0\u8425\u7684\u8fb9\u5883\u5468\u56f4100\u82f1\u91cc\u7684\u7a7a\u57df\u5185\u3002\u4e8b\u5b9e\u4e0a\uff0cCBP-104\uff1b\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u4e0a\u7a7a\u7684\u6301\u6709\u6a21\u5f0f\u4f3c\u4e4e\u76f4\u63a5\u843d\u5728\u4e86\u8be5\u533a\u57df\u4e4b\u5916-\u8fd9\u4f7f\u5f97\u8fd9\u79cd\u5929\u6865\u66f4\u52a0\u4ee4\u4eba\u6000\u7591\u3002\u6211\u4eec\u5bf9\u8fd9\u4e2a\u9519\u8bef\u611f\u5230\u62b1\u6b49\u3002\n\u5728\u5bfb\u627e\u652f\u6301\u9ed1\u4eba\u751f\u6d3b\u7684\u65b9\u6cd5\u5417\uff1f\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u59ca\u59b9\u7f51\u7ad9Lifehacker\u63d0\u4f9b\u7684\u8d44\u6e90\u5217\u8868\uff0c\u4e86\u89e3\u53c2\u4e0e\u7684\u65b9\u5f0f\u3002", "note_en": "Customs and Border Protection (CBP) has flown a Predator drone above ongoing protests against police brutality in Minneapolis,   according to flight logs.\n  An aircraft using   the call sign CBP-104 took off from Grand Forks Air Force Base in North Dakota\u2014where CBP   has drones stationed\u2014at around 10:10 a.m. ET, reaching Minneapolis and entering a hexagon-shaped holding pattern at 20,000 feet over the city at 11:47 a.m. ET. At around 1:15 p.m. ET, it began heading back to Grand Forks.\n Minneapolis is not inside the 100 air mile border zone where CBP has jurisdiction, an area that encompasses   just shy of two-thirds of the nation\u2019s population. The city is currently being rocked by massive protests against   brutality and racism by the Minneapolis Police Department that have gone on to inspire other demonstrations around the country. Donald Trump referred to demonstrators in the city as looters and \u201cthugs\u201d while issuing a   disgusting threat of lethal force by \u201cthe Military\u201d on Friday.\n    The White House taunted Twitter on Friday by reposting Donald Trump\u2019s tweet calling for the\u2026\n Read more\n CBP-104 was first spotted by flight-watching community ADB-S Exchange,   according to Vice, and was flagged on Twitter by   investigative reporter Jason Paladino. Predator drones are equipped with powerful cameras designed to capture clear video from as far up as 25,000 feet in the air and are capable of remaining airborne for dozens of hours.\n   The call sign CBP-104 is identified by numerous sources as a Predator drone operated by the agency, including a   2006 press release by manufacturer General Atomics, a 2007   Popular Science article, and   CBP presentations and   drone flight logs. The exact model in question is a Predator B, which is more typically identified by the model name MQ-9 Reaper.\n CBP surveillance drones are cleared to operate   within 100 air miles of the border, which is under more or less   continual aerial surveillance. The entirety of CBP-104&#39;s holding pattern over Minneapolis falls outside of that zone, as does much of its flight path on Friday, at least according to a   CityLab mapping project. However, CBP has often asserted   expanded authority to redefine the boundaries of its jurisdiction, such as areas surrounding   an international airport where Border Patrol can demonstrate a crossing occurred.\n  An analysis by the libertarian Cato Institute in 2018 found that Predator B drones operated by the agency   contribute little to actions like drug seizures and apprehending people attempting to enter the U.S., but they do give CBP warrantless surveillance powers that it has lent to other agencies on hundreds of occasions.\n \u201cNo government agency should be facilitating the over-policing of the Black community, period,\u201d ACLU Senior Legislative Counsel Neema Singh Guliani wrote to Gizmodo in a statement. \u201cAnd CBP has no role in what\u2019s happening in Minneapolis at all. This rogue agency\u2019s use of military technology to surveil protesters inside U.S. borders is deeply disturbing, especially given CBP\u2019s lack of clear and strong policies to protect privacy and constitutional rights. This agency\u2019s use of drones over the city should be halted immediately.\u201d\n  While it is obvious that CBP-104 is monitoring the protests in Minneapolis, it is less clear whether CBP is flying the drone of its own volition or the fly-over was requested by local law enforcement or another federal agency. It is also not clear what type of information the drone is collecting and for what purpose. CBP   told MPR News in 2015 that drones flying out of the Grand Forks base are not capable license plate identification and face recognition, and as recently as February 2020   told Recode it is not using face recognition at the border.\n CBP didn\u2019t immediately respond to a request for comment from Gizmodo, and we\u2019ll update this post if we hear back.\n  Update: 5/29/2020 at 3:00 p.m. ET: This post has been updated to include comments from the ACLU.\n Correction: 5/29/2020 at 5:29 p.m. ET: A prior version of this article stated that Minneapolis was within the 100 air mile zone around the border where CBP aircraft are cleared to operate. In fact, CBP-104&#39;s holding pattern over Minneapolis appears to have fallen directly outside of that zone\u2014 which makes this fly-over even more questionable. We regret the error.\n  Looking for ways to advocate for black lives? Check out this    list of resources  by our sister site Lifehacker for ways to get involved.", "posttime": "2020-06-03 02:36:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8fb9\u5883,border,cbp", "title": "\u6d77\u5173\u548c\u8fb9\u5883\u4fdd\u62a4\u5c40\u9a7e\u9a76\u6355\u98df\u8005\u65e0\u4eba\u673a\u98de\u8d8a\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u6297\u8bae\u6d3b\u52a8", "title_en": "Customs and Border Protection Flew a Predator Drone over Minneapolis Protests", "transed": 1, "url": "https://gizmodo.com/customs-and-border-protection-flew-a-predator-surveilla-1843758034", "via": "", "real_tags": ["\u8fb9\u5883", "border", "cbp"]}, {"category": "", "categoryclass": "", "imagename": "c77ff936ca38e3f88f6690e3e761872e.jpeg", "infoid": 1004870, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u5bf9\u6d41\u5a92\u4f53\u672a\u6765\u7684\u8c6a\u8d4cHBO Max\u5c06\u4e0d\u53d7AT&amp\uff1bT\u7684\u79fb\u52a8\u6570\u636e\u4e0a\u9650\u9650\u5236\uff0c\u800cNetflix\u548cDisney Plus\u7b49\u7ade\u4e89\u5bf9\u624b\u5c06\u8017\u5c3d\u4f60\u7684\u6570\u636e\u3002\n\u8fd9\u662fVergecast\u4e0e\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u8d1f\u8d23HBO Max\u7684\u9ad8\u7ba1\u6258\u5c3c\u00b7\u8d21\u5361\u5c14\u7ef4\u65af(Tony Goncalves)\u8c08\u8bdd\u7684\u540e\u7eed\u5185\u5bb9\u3002\u5f53\u88ab\u95ee\u53caHBO Max\u662f\u5426\u4f1a\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u8d21\u5361\u5c14\u7ef4\u65af\u8bf4\u4ed6\u7684\u56e2\u961f\u201c\u8fdb\u884c\u4e86\u5bf9\u8bdd\u201d\uff0c\u4f46\u6ca1\u6709\u7b54\u6848\u3002\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u540e\u6765\u5411The Verge\u8bc1\u5b9e\uff0cHBO Max\u5c06\u514d\u9664\u8be5\u516c\u53f8\u7684\u4f20\u7edf\u6570\u636e\u4e0a\u9650\u548c\u65e0\u9650\u5236\u5957\u9910\u7684\u8f6f\u6570\u636e\u4e0a\u9650\u3002\n\u636e\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u4e00\u4f4d\u77e5\u60c5\u9ad8\u7ba1\u900f\u9732\uff0cHBO Max\u6b63\u5728\u4f7f\u7528AT&amp\uff1bT\u7684\u201c\u8d5e\u52a9\u6570\u636e\u201d\u7cfb\u7edf\uff0c\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8be5\u7cfb\u7edf\u5141\u8bb8\u4efb\u4f55\u516c\u53f8\u4ed8\u8d39\uff0c\u4ee5\u907f\u514d\u5176\u670d\u52a1\u53d7\u5230\u6570\u636e\u4e0a\u9650\u7684\u9650\u5236\u3002\u4f46\u7531\u4e8eAT&amp\uff1bT\u62e5\u6709HBO Max\uff0c\u5b83\u53ea\u662f\u5728\u652f\u4ed8\u81ea\u5df1\u7684\u8d39\u7528\uff1a\u6570\u636e\u8d39\u5728HBO Max\u7684\u8d26\u7c3f\u4e0a\u663e\u793a\u4e3a\u4e00\u9879\u8d39\u7528\uff0c\u5728AT&amp\uff1bT Mobility\u7684\u8d26\u7c3f\u4e0a\u663e\u793a\u4e3a\u6536\u5165\u3002\u5bf9\u4e8e\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6765\u8bf4\uff0c\u5b83\u662f\u5f52\u96f6\u7684\u3002\u4e0eNetflix\u8fd9\u6837\u7684\u7ade\u4e89\u5bf9\u624b\u76f8\u6bd4\uff0cNetflix\u7406\u8bba\u4e0a\u53ef\u4ee5\u5411\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u652f\u4ed8\u8d5e\u52a9\u6570\u636e\u8d39\u7528\uff0c\u4f46\u8fd9\u5c06\u662f\u7eaf\u7cb9\u7684\u6210\u672c\u3002\n\u7406\u8bba\u4e0a\uff0cNetflix\u53ef\u4ee5\u5411\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u652f\u4ed8\u8d5e\u52a9\u6570\u636e\u7684\u8d39\u7528\uff0c\u4f46\u8fd9\u5c06\u662f\u4e00\u9879\u7eaf\u7cb9\u7684\u6210\u672c\u3002\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e0a\u4e00\u6b21\u6211\u4eec\u67e5\u770bAT&amp\uff1b\u7684\u8d5e\u52a9\u6570\u636e\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u80fd\u627e\u5230\u7684\u4f7f\u7528\u5b83\u7684\u4ec5\u6709\u7684\u4e09\u5bb6\u6d41\u5a92\u4f53\u670d\u52a1\u2026\u2026\u3002\u90fd\u5f52AT&amp\uff1bT\u6240\u6709\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u8d5e\u52a9\u7684\u6570\u636e\u7cfb\u7edf\u8fdd\u53cd\u7f51\u7edc\u4e2d\u7acb\u539f\u5219\u7684\u539f\u56e0\u3002\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u7684\u6d41\u5a92\u4f53\u670d\u52a1\u76f8\u5bf9\u4e8e\u5176\u7ade\u4e89\u5bf9\u624b\u5177\u6709\u91cd\u5927\u4f18\u52bf\uff0c\u6240\u6709\u8fd9\u4e9b\u7ade\u4e89\u5bf9\u624b\u90fd\u9762\u4e34\u7740\u4e0a\u9650\u7684\u6311\u6218\u3002\u4f46\u7f8e\u56fd\u4e0d\u518d\u6709\u7f51\u7edc\u4e2d\u7acb\uff0c\u56e0\u6b64AT&T\u53ef\u4ee5\u81ea\u7531\u5730\u7ed9\u4e88\u81ea\u5df1\u4f18\u60e0\u5f85\u9047\u3002\n\u201c\u7f51\u7edc\u662f\u6c34\u7ba1\uff0c\u5185\u5bb9\u662f\u6c34\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u6c34\u548c\u6c34\u7ba1\u5728\u4e00\u8d77\uff0c\u201c\u8d21\u5361\u5c14\u7ef4\u65af\u8bf4\u3002", "note_en": "HBO Max, AT&amp;T\u2019s big bet on the future of streaming, will be excused from AT&amp;T\u2019s mobile data caps, while competing services like Netflix and Disney Plus will use up your data.\n That\u2019s the follow-up from a  Vergecast conversation with Tony Goncalves, the AT&amp;T executive in charge of HBO Max. Asked whether HBO Max would hit the cap, Goncalves said his team \u201chad the conversation\u201d but didn\u2019t have the answer. AT&amp;T later confirmed to  The Verge that HBO Max will be excused from the company\u2019s traditional data caps and the soft data caps on unlimited plans.\n  According to an AT&amp;T executive familiar with the matter, HBO Max is using AT&amp;T\u2019s \u201csponsored data\u201d system, which technically allows any company to pay to excuse its services from data caps. But since AT&amp;T owns HBO Max, it\u2019s just paying itself: the data fee shows up on the HBO Max books as an expense and on the AT&amp;T Mobility books as revenue. For AT&amp;T as a whole, it zeroes out. Compare that to a competitor like Netflix, which could theoretically pay AT&amp;T for sponsored data, but it would be a pure cost.\n Netflix could theoretically pay AT&amp;T for sponsored data, but it would be a pure cost\n That\u2019s why the last time we looked at AT&amp;T\u2019s sponsored data system, the only three streaming services we could find using it...  were owned by AT&amp;T. It\u2019s also why sponsored data systems fly in the face of net neutrality principles. AT&amp;T\u2019s streaming services have a major advantage over its competitors, all of which run up against the cap. But there\u2019s no net neutrality in the United States anymore, so AT&amp;T is free to give itself preferential treatment.\n \u201cThe network is the plumbing, and the content is the water. And you\u2019re seeing water and the plumbing kind of coming together,\u201d said Goncalves.", "posttime": "2020-06-03 01:51:53", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "max,\u6570\u636e", "title": "HBO Max\u4e0d\u4f1a\u51b2\u51fbAT&T\u6570\u636e\u4e0a\u9650\uff0c\u4f46Netflix\u548cDisney Plus\u4f1a", "title_en": "HBO Max Won't Hit AT&T Data Caps, But Netflix and Disney Plus Will", "transed": 1, "url": "https://www.theverge.com/2020/6/2/21277402/hbo-max-att-data-caps-netflix-disney-plus-streaming-services-net-neutrality", "via": "", "real_tags": ["max", "\u6570\u636e"]}]