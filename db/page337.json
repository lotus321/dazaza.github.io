[{"category": "", "categoryclass": "", "imagename": "622df3c2546708733aac681aac82090d.png", "infoid": 1002083, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b9a\u4e49\u81ea\u5b9a\u4e49\u8ba1\u5212\u7684\u7761\u7720\u5468\u671f\u3002\u4e00\u65e6\u6fc0\u6d3b\u4e86\u4fdd\u5b58\u6a21\u5f0f\uff0cMicrotica\u5c31\u4f1a\u8fdb\u5165\u81ea\u52a8\u9a7e\u9a76\u6a21\u5f0f\uff0c\u5e76\u8d1f\u8d23\u5176\u4f59\u7684\u5de5\u4f5c\u3002\u5982\u679c\u60a8\u5728\u67d0\u4e2a\u65f6\u523b\u9700\u8981\u4e91\uff0c\u60a8\u53ef\u4ee5\u7acb\u5373\u624b\u52a8\u5c06\u5176\u5e26\u56de\u3002\n\u5728\u4e00\u4e2a\u5730\u65b9\u89c2\u5bdf\u548c\u76d1\u63a7\u60a8\u7684\u50a8\u84c4\u3002\u7a81\u51fa\u663e\u793a\u60a8\u7684\u4e91\u5e10\u6237\u4e2d\u6700\u6602\u8d35\u7684\u8d44\u6e90\u3002\u83b7\u53d6\u4e91\u652f\u51fa\u9884\u6d4b\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u89c4\u5212\u60a8\u7684\u4e91\u9884\u7b97\u3002\n\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u548cSLACK\u63a5\u6536\u6bcf\u5468/\u6bcf\u6708\u7684\u50a8\u84c4\u62a5\u544a\u548c\u9884\u6d4b\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u65e0\u9700\u767b\u5f55AWS\u5e10\u6237\u5e76\u6267\u884c\u590d\u6742\u7684\u5206\u6790\uff0c\u5373\u53ef\u968f\u65f6\u4e86\u89e3\u60a8\u7684\u50a8\u84c4\u60c5\u51b5\u3002", "note_en": "Define custom-scheduled sleep cycles. Once saving mode is activated,\r Microtica goes in autopilot mode and takes care of the rest. If you need the cloud in a certain\r moment, you can bring it back manually right away.\n  Observe and monitor your savings in one place. Highlight the most expensive\r resources in your cloud account. Get a cloud spending forecast to better plan your cloud\r budget.\n      Receive weekly/monthly saving reports and forecasts on email and Slack.\r With this, you&#39;ll always be up-to-date with your savings without having to login to your AWS\r account and perform complex analysis.", "posttime": "2020-05-14 20:41:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "aws,\u50a8\u84c4", "title": "\u7ba1\u7406\u975e\u751f\u4ea7\u73af\u5883\u4e2d\u7684AWS\u6210\u672c", "title_en": "Manage AWS costs on non-production environments", "transed": 1, "url": "https://microtica.com/aws-cost/", "via": "", "real_tags": ["aws", "\u50a8\u84c4"]}, {"category": "", "categoryclass": "", "imagename": "41a1a61614c0edb7625aef8fd8765eb9.jpeg", "infoid": 1002082, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9a6c\u65af\u514b\u5728\u82f1\u56fd\u300a\u536b\u62a5\u300b\u83b7\u5f97\u7684\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u5199\u9053\uff1a\u201c\u5982\u679c\u4f60\u89c9\u5f97\u6765\u4e0a\u73ed\u4e0d\u8212\u670d\uff0c\u4f60\u53ef\u4ee5\u5446\u5728\u5bb6\u91cc\uff0c\u5e76\u5c06\u4f11\u65e0\u85aa\u5047\u671f\u3002\u201d", "note_en": "\u201cIf you do not feel comfortable coming into work, you can stay home and will be on unpaid leave,\u201d Musk wrote in an email obtained by The Guardian.", "posttime": "2020-05-14 20:41:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57c3\u9686\u00b7\u9a6c\u65af\u514b,\u9a6c\u65af\u514b,musk,\u89c9\u5f97", "title": "\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u81f4\u5de5\u4eba\uff1a\u8fdd\u53cd\u52a0\u5dde\u7684\u5bb6\u5ead\u4e3b\u5987\u547d\u4ee4\uff0c\u5426\u5219\u5c31\u5f97\u4e0d\u5230\u5de5\u8d44", "title_en": "Elon Musk to Workers: Violate California's Stay-at-Home Order or Don't Get Paid", "transed": 1, "url": "https://www.vice.com/en_us/article/3azzd8/elon-musk-is-offering-tesla-workers-a-deal-violate-californias-stay-at-home-order-or-dont-get-paid", "via": "", "real_tags": ["\u57c3\u9686\u00b7\u9a6c\u65af\u514b", "\u9a6c\u65af\u514b", "musk", "\u89c9\u5f97"]}, {"category": "", "categoryclass": "", "imagename": "bd1df1fbadbef1f22e5b9e3df922a84b.jpg", "infoid": 1002081, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u7684\u5927\u8111\u5728\u5904\u7406\u56f0\u96be\u548c\u610f\u60f3\u4e0d\u5230\u7684\u566a\u97f3\u65f6\u5fc5\u987b\u66f4\u52a0\u52aa\u529b\u5730\u5de5\u4f5c\u3002", "note_en": "Our brains have to work even harder when they're dealing with difficult and unexpected noise.", "posttime": "2020-05-14 19:58:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91c7\u53d6,fatigue,\u5904\u7406", "title": "\u53d8\u7126\u75b2\u52b3\u662f\u771f\u5b9e\u5b58\u5728\u7684\u3002\u4ee5\u4e0b\u662f\u5bf9\u6b64\u5e94\u91c7\u53d6\u7684\u63aa\u65bd", "title_en": "Zoom fatigue is real. Here\u2019s what to do about it", "transed": 1, "url": "https://www.popsci.com/story/technology/video-call-fatigue-tips/", "via": "", "real_tags": ["\u91c7\u53d6", "fatigue", "\u5904\u7406"]}, {"category": "", "categoryclass": "", "imagename": "9fac4c0d8bdde5878b8a352da4ae2bb4.png", "infoid": 1002079, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4f26\u6566\u4e00\u4e2a\u5bd2\u51b7\u9634\u51b7\u7684\u516d\u6708\uff0c\u4f4632\u4f4d\u5168\u65b0\u7684\u4f01\u4e1a\u5bb6\u5728\u6d77\u5fb7\u516c\u56ed\u9644\u8fd1\u7684\u4e00\u5bb6\u9152\u5e97\u505a\u4e8610\u5206\u949f\u7684\u5546\u4e1a\u6f14\u793a\uff0c\u8fd9\u8ba9\u4ed6\u4eec\u4ea7\u751f\u4e86\u4e00\u4e9b\u70ed\u5ea6\u3002\u4ed6\u4eec\u7684\u53d7\u4f17\uff1a\u6570\u767e\u540d\u6765\u81ea\u4e09\u5927\u6d32\u7684\u98ce\u9669\u8d44\u672c\u5bb6\uff0c\u6bcf\u4eba\u652f\u4ed81800\u7f8e\u5143\u6765\u8bc6\u522b\u4e0b\u4e00\u4e2a\u6bd4\u5c14\u00b7\u76d6\u8328\uff0c\u6216\u8005\u81f3\u5c11\u662f\u4e0b\u4e00\u4e2a\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u3002\n\u718a\u5f7c\u7279\u662f\u4e00\u4f4d\u5728\u5965\u5730\u5229\u63a5\u53d7\u57f9\u8bad\u7684\u7ecf\u6d4e\u5b66\u5bb6\u3001\u7ecf\u6d4e\u5386\u53f2\u5b66\u5bb6\u548c\u70ed\u5fc3\u7684\u8d44\u672c\u5bb6\uff0c\u4ed6\u53d1\u5c55\u4e86\u4e00\u79cd\u5177\u6709\u5361\u5c14\u00b7\u9a6c\u514b\u601d\u7684\u5e7f\u5ea6\u548c\u5b8f\u4f1f\u7684\u7406\u8bba\u3002\u4f46\u662f\uff0c\u9a6c\u514b\u601d\u5c06\u52b3\u52a8\u89c6\u4e3a\u7ecf\u6d4e\u4ef7\u503c\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5c06\u65e0\u4ea7\u9636\u7ea7\u89c6\u4e3a\u53d8\u9769\u7684\u5173\u952e\u63a8\u52a8\u8005\uff0c\u718a\u5f7c\u7279\u5219\u5c06\u4f01\u4e1a\u5bb6\u89c6\u4e3a\u8d44\u672c\u4e3b\u4e49\u7684\u57fa\u77f3\u3002\u867d\u7136\u718a\u5f7c\u7279\u572850\u5e74\u524d\u5c31\u53bb\u4e16\u4e86\uff0c\u4f46\u4ed6\u7684\u7406\u8bba\u9884\u8a00\u4e86\u4e00\u4e2a\u65f6\u4ee3\uff0c\u5c4a\u65f6\u50cf\u76d6\u8328\u8fd9\u6837\u7684\u4f01\u4e1a\u5bb6\u53ef\u4ee5\u50cf\u7f8e\u56fd\u603b\u7edf\u6216\u6700\u65b0\u7684\u6447\u6eda\u660e\u661f\u4e00\u6837\u83b7\u5f97\u5168\u7403\u8ba4\u53ef\u3002\n\u4f4d\u4e8e\u82f1\u56fd\u66fc\u5f7b\u65af\u7279\u7684\u66fc\u5f7b\u65af\u7279\u5927\u5b66\u521b\u65b0\u4e0e\u7ade\u4e89\u7814\u7a76\u4e2d\u5fc3\u7814\u7a76\u4e3b\u4efb\u3001\u56fd\u9645\u718a\u5f7c\u7279\u534f\u4f1a(International Schumpeter Society)\u4e3b\u5e2d\u65af\u5766\u5229\u00b7\u6885\u7279\u5361\u592b(Stanley Metcalfe)\u8bf4\uff0c\u718a\u5f7c\u7279\u672c\u53ef\u4ee5\u5b8c\u7f8e\u5730\u7406\u89e3\u6bd4\u5c14\u00b7\u76d6\u8328\u7684\u6545\u4e8b\u3002\u4ed6\u8ba4\u4e3a\u4f01\u4e1a\u5bb6\u7ecf\u5e38\u9762\u4e34\u6781\u5927\u7684\u654c\u610f\u3002\n\u718a\u5f7c\u7279\u7684\u7406\u8bba\u9610\u8ff0\u4e86\u8fd9\u6837\u4e00\u79cd\u89c2\u70b9\uff0c\u5373\u8d44\u672c\u4e3b\u4e49\u80cc\u540e\u7684\u751f\u547d\u529b\u662f\u521b\u65b0\uff0c\u4f01\u4e1a\u5bb6\u613f\u610f\u5f15\u5165\u521b\u65b0\u3002\u718a\u5f7c\u7279\u662f\u5927\u8427\u6761\u548c\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u540e\u5e2d\u5377\u6b27\u6d32\u7684\u7ecf\u6d4e\u4e0d\u7a33\u5b9a\u7684\u4ea7\u7269\uff0c\u4ed6\u4e5f\u5728\u52aa\u529b\u63ed\u793a\u7e41\u8363\u968f\u540e\u662f\u8427\u6761\u7684\u5546\u4e1a\u5468\u671f\u7684\u6839\u672c\u539f\u56e0\u3002\u4ed6\u7684\u8bba\u70b9\u662f\uff0c\u521b\u65b0\u7684\u5f15\u5165\u65e2\u662f\u8d44\u672c\u4e3b\u4e49\u8fdb\u6b65\u7684\u539f\u56e0\uff0c\u4e5f\u662f\u8d44\u672c\u4e3b\u4e49\u4e0d\u7a33\u5b9a\u7684\u539f\u56e0\u3002\n\u4ed6\u5c06\u8fd9\u4e9b\u4e0d\u7a33\u5b9a\u5f52\u56e0\u4e8e\u521b\u9020\u6027\u7834\u574f\u539f\u5219\uff0c\u5373\u65b0\u6280\u672f\u3001\u65b0\u4ea7\u54c1\u3001\u65b0\u751f\u4ea7\u65b9\u5f0f\u548c\u65b0\u5206\u914d\u624b\u6bb5\u4f7f\u65e7\u6280\u672f\u8fc7\u65f6\uff0c\u8feb\u4f7f\u73b0\u6709\u516c\u53f8\u8fc5\u901f\u9002\u5e94\u65b0\u73af\u5883\uff0c\u5426\u5219\u5c31\u4f1a\u5012\u95ed\u3002\n\u8fd9\u662f\u4e00\u4e2a\u88ab\u5305\u62ec\u592e\u884c\u884c\u957f\u5728\u5185\u7684\u7ecf\u6d4e\u5b66\u5bb6\u6293\u4f4f\u7684\u60f3\u6cd5\uff0c\u7528\u6765\u89e3\u91ca\u975e\u51e1\u7684\u589e\u957f\u901f\u5ea6\uff0c\u7279\u522b\u662f\u5728\u7f8e\u56fd\uff0c\u5e76\u8bc1\u660e\u80a1\u5e02\u7684\u975e\u51e1\u6da8\u5e45\u662f\u5408\u7406\u7684\u3002\n\u5982\u679c\u521b\u9020\u6027\u7684\u7834\u574f\u53ef\u4ee5\u5728\u4e0d\u4ea7\u751f\u4e25\u91cd\u901a\u80c0\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5feb\u901f\u7684\u7ecf\u6d4e\u589e\u957f\uff0c\u90a3\u4e48\u4f8b\u5982\uff0c\u5bf9\u5728\u8fd9\u79cd\u4e0d\u540c\u5bfb\u5e38\u7684\u73af\u5883\u4e2d\u8868\u73b0\u826f\u597d\u7684\u516c\u53f8\u80a1\u7968\u7ed9\u4e88\u9ad8\u4f30\u503c\u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\u3002\u653f\u5e9c\u4e5f\u7406\u5e94\u4e0d\u5e72\u9884\u8fd9\u79cd\u6fc0\u8fdb\u8d44\u672c\u4e3b\u4e49\u521b\u9020\u7e41\u8363\u7684\u6f5c\u529b\uff0c\u5373\u4f7f\u8fd9\u4e9b\u7834\u574f\u6027\u56e0\u7d20\u5bfc\u81f4\u8001\u724c\u516c\u53f8\u5012\u95ed\u5e76\u5bfc\u81f4\u5931\u4e1a\u3002\n\u5965\u5730\u5229\u683c\u62c9\u8328\u5927\u5b66(University Of Graz)\u793e\u4f1a\u5b66\u6559\u6388\u3001\u54c8\u4f5b\u5927\u5b66(Harvard University)\u524d\u7ea6\u745f\u592b\u00b7A\u00b7\u718a\u5f7c\u7279(Joseph A.Schumpeter)\u7814\u7a76\u5458\u66fc\u5f17\u96f7\u5fb7\u00b7\u666e\u91cc\u8f9b(Manfred Prisching)\u8868\u793a\uff0c\u4eca\u5929\uff0c\u6ca1\u6709\u4eba\u4e0d\u4f7f\u7528\u4f01\u4e1a\u5bb6\u548c\u521b\u9020\u6027\u7834\u574f\u8fd9\u4e24\u4e2a\u8bcd\u6765\u8c08\u8bba\u5e02\u573a\u793e\u4f1a\u3002\n\u718a\u5f7c\u7279\u672c\u4eba\u66fe\u5728\u683c\u62c9\u8328\u5927\u5b66\u548c\u54c8\u4f5b\u5927\u5b66\u4efb\u6559\u3002\u4ed6\u7684\u5927\u91cf\u8457\u4f5c\u663e\u793a\u51fa\u5bf9\u4ed6\u4e4b\u524d\u6240\u6709\u7ecf\u6d4e\u5b66\u5bb6\u7684\u6df1\u523b\u7406\u89e3\uff0c\u4f46\u666e\u91cc\u8f9b\u8868\u793a\uff0c\u4ed6\u5df2\u7ecf\u80cc\u79bb\u4e86\u4e3b\u6d41\u7406\u8bba\uff0c\u5373\u8ba4\u4e3a\u8d44\u672c\u4e3b\u4e49\u548c\u5e02\u573a\u662f\u7a33\u5b9a\u7684\u3002\n\u718a\u5f7c\u7279\u8ba4\u4e3a\uff0c\u4f01\u4e1a\u5bb6\u6270\u4e71\u4e86\u9759\u6b62\u7684\u79e9\u5e8f\uff0c\u4ed6\u8c03\u67e5\u4e86\u4f01\u4e1a\u5bb6\u7cbe\u795e\u7684\u6765\u6e90\uff0c\u666e\u91cc\u8f9b\u8bf4\u3002\u4ed6\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u4e0d\u540c\u7684\u4e16\u754c\u89c2\uff1a\u4e3a\u81ea\u5df1\u521b\u5efa\u5e1d\u56fd\u7684\u610f\u613f\u3002\u5b83\u662f\u4e00\u79cd\u52a8\u529b\uff0c\u6e90\u4e8e\u67d0\u4e9b\u4eba\u7684\u6027\u683c\u3002\u5e76\u4e0d\u662f\u8bf4\u4ed6\u4eec\u7279\u522b\u806a\u660e\u3002\u5b83\u4e0d\u662f\u8ba4\u77e5\u80fd\u529b\u3002\u4ed6\u4eec\u4e0d\u662f\u7ec6\u817b\u7684\u4eba\u3002\u4ed6\u4eec\u901a\u5e38\u975e\u5e38\u7c97\u9c81\uff0c\u4f46\u4ed6\u4eec\u60f3\u4ee5\u67d0\u79cd\u65b9\u5f0f\u653b\u51fb\u4e16\u754c\u3002\u5982\u679c\u4f60\u62ff\u90a3\u4e9b\u8001\u5192\u9669\u5bb6\u6765\u8bf4\uff0c\u8d44\u672c\u4e3b\u4e49\u5c31\u628a\u8fd9\u79cd\u7cbe\u6253\u7ec6\u7b97\u7684\u7cbe\u795e\u53d8\u6210\u4e86\u8fd9\u79cd\u7cbe\u6253\u7ec6\u7b97\u7684\u7cbe\u795e\u3002\n\u4e0d\u7ba1\u4f01\u4e1a\u5bb6\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff0c\u901a\u8fc7\u63a8\u52a8\u65b0\u4ea7\u54c1\u3001\u65b0\u6280\u672f\u6216\u65b0\u751f\u4ea7\u65b9\u5f0f\uff0c\u4ed6\u4eec\u63d0\u4f9b\u4e86\u53d8\u9769\u7684\u52a8\u529b\uff0c\u7528\u718a\u5f7c\u7279\u5728\u4ed61942\u5e74\u7684\u8457\u4f5c\u201c\u8d44\u672c\u4e3b\u4e49\u3001\u793e\u4f1a\u4e3b\u4e49\u548c\u6c11\u4e3b\u201d\u4e2d\u7684\u8bdd\u8bf4\uff0c\u8fd9\u662f\u4e00\u573a\u6301\u7eed\u4e0d\u65ad\u7684\u521b\u9020\u6027\u7834\u574f\u5927\u98ce\u3002\n\u5c3d\u7ba1\u718a\u5f7c\u7279\u7684\u7406\u8bba\u548c\u63aa\u8f9e\u5728\u4ed6\u7684\u6709\u751f\u4e4b\u5e74\u88ab\u82f1\u56fd\u7ecf\u6d4e\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u6885\u7eb3\u5fb7\u00b7\u51ef\u6069\u65af(John Maynard Keynes)\u9eef\u7136\u5931\u8272\uff0c\u4f46\u4ed6\u7684\u7406\u8bba\u548c\u63aa\u8f9e\u5982\u4eca\u5df2\u6210\u4e3a\u63cf\u8ff0\u5f53\u524d\u65f6\u4ee3\u7684\u4e3b\u6d41\uff0c\u5728\u8fd9\u4e2a\u65f6\u4ee3\uff0c\u65b0\u7ecf\u6d4e\u516c\u53f8\u6b63\u4ee5\u60ca\u4eba\u7684\u901f\u5ea6\u8bde\u751f\u3002\u7f8e\u56fd\u8054\u90a6\u50a8\u5907\u59d4\u5458\u4f1a(Federal Reserve Board)\u4e3b\u5e2d\u3001\u54c8\u4f5b\u5927\u5b66(Harvard)\u6bd5\u4e1a\u7684\u7ecf\u6d4e\u5b66\u5bb6\u827e\u4f26\u00b7\u683c\u6797\u65af\u6f58(Alan Greenspan)\u4e5f\u662f\u5efa\u5236\u6d3e\u4eba\u7269\uff0c\u4ed6\u4e00\u76f4\u5728\u7528\u718a\u5f7c\u7279\u7ecf\u6d4e\u5b66\u6765\u89e3\u91ca\u8fc7\u53bb\u516b\u5e74\u6765\u7f8e\u56fd\u975e\u540c\u5bfb\u5e38\u7684\u975e\u901a\u80c0\u6269\u5f20\u3002\n\u4e00\u5e74\u524d\uff0c\u683c\u6797\u65af\u6f58\u5728\u56fd\u4f1a\u8054\u5408\u7ecf\u6d4e\u59d4\u5458\u4f1a(Joint Economic Committee)\u4f5c\u8bc1\u65f6\u8bf4\uff0c\u4f34\u968f\u7740\u8fd9\u4e9b\u4e0d\u65ad\u6269\u5927\u7684\u521b\u65b0\uff0c\u8d44\u672c\u4ece\u5931\u8d25\u7684\u6280\u672f\u8f6c\u5411\u90a3\u4e9b\u5c16\u7aef\u6280\u672f\uff0c\u521b\u9020\u6027\u7834\u574f\u8fc7\u7a0b\u660e\u663e\u52a0\u901f\uff0c\u8fd9\u4e00\u70b9\u5f97\u5230\u4e86\u53cd\u6620\u3002\n\u683c\u6797\u65af\u6f58\u5148\u751f\u63cf\u8ff0\u7684\u521b\u65b0\u5305\u62ec\u5fae\u5904\u7406\u5668\u3001\u6fc0\u5149\u3001\u5149\u7ea4\u548c\u536b\u661f\u6280\u672f\u3002\u4f46\u4ed6\u8865\u5145\u8bf4\uff1a\u4fe1\u606f\u6280\u672f\u9886\u57df\u7684\u521b\u65b0--\u5373\u6240\u8c13\u7684IT--\u5df2\u7ecf\u5f00\u59cb\u6539\u53d8\u6211\u4eec\u505a\u751f\u610f\u548c\u521b\u9020\u4ef7\u503c\u7684\u65b9\u5f0f\uff0c\u5f80\u5f80\u662f\u4ee55\u5e74\u524d\u8fd8\u96be\u4ee5\u9884\u89c1\u7684\u65b9\u5f0f\u3002\u968f\u7740\u672c\u4e16\u7eaa\u7684\u7ed3\u675f\uff0c\u5f53\u524d\u6280\u672f\u6d6a\u6f6e\u7684\u51b3\u5b9a\u6027\u7279\u5f81\u662f\u4fe1\u606f\u7684\u4f5c\u7528\u3002\n\u521b\u65b0\u6d6a\u6f6e\u4e5f\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u65b0\u7ecf\u6d4e\u516c\u53f8\u3002\u683c\u6797\u65af\u6f58\u5148\u751f\u89e3\u91ca\u8bf4\uff0c\u8001\u724c\u5de5\u4e1a\u4e00\u76f4\u5728\u91c7\u7528\u65b0\u6280\u672f\u6765\u63d0\u9ad8\u751f\u4ea7\u7387\u3002\n\u4ed6\u8bf4\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u62e5\u6709\u767e\u5e74\u5386\u53f2\u7684\u673a\u52a8\u8f66\u884c\u4e1a\u5728\u8fc7\u53bb\u4e24\u5e74\u4e2d\u5e73\u5747\u6bcf\u5e74\u4ee5\u60ca\u4eba\u7684\u901f\u5ea6\u63d0\u9ad8\u6bcf\u5c0f\u65f64.5%\u7684\u4ea7\u91cf\uff0c\u800c\u672c\u4e16\u7eaa\u521d\u5e73\u5747\u53ea\u67091.5%\u7684\u5e73\u6de1\u65e0\u5947\u7684\u589e\u957f\u3002\u8bb8\u591a\u6210\u719f\u7684\u884c\u4e1a\u4e5f\u662f\u5982\u6b64\uff0c\u5982\u94a2\u94c1\u3001\u7eba\u7ec7\u548c\u5176\u4ed6\u8f83\u65e9\u65f6\u4ee3\u7684\u4e2d\u575a\u529b\u91cf\u3002\n\u5728\u8fd9\u4e9b\u4fe1\u606f\u4e2d\uff0c\u683c\u6797\u65af\u6f58\u4f3c\u4e4e\u662f\u5728\u80af\u5b9a\u4ed6\u51e0\u5e74\u524d\u6c89\u601d\u8fc7\u7684\u4e00\u4e2a\u96be\u9898\u7684\u7b54\u6848\u3002\n\u4ed6\u63a5\u7740\u8bf4\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\uff0c\u6211\u4e5f\u4e0d\u6000\u7591\u6709\u8c01\u80fd\u77e5\u9053\uff0c\u5f53\u524d\u7684\u4e8b\u6001\u53d1\u5c55\u662f\u4e00\u4e2a\u4e16\u7eaa\u4e00\u5230\u4e24\u6b21\u7684\u73b0\u8c61\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u5c06\u628a\u5168\u56fd\u548c\u5168\u7403\u7684\u751f\u4ea7\u7387\u8d8b\u52bf\u63a8\u5411\u4e00\u4e2a\u65b0\u7684\u66f4\u9ad8\u8f68\u9053\uff0c\u8fd8\u662f\u6211\u4eec\u53ea\u662f\u89c2\u5bdf\u5230\u4e86\u4e00\u4e9b\u4e0d\u5bfb\u5e38\u7684\u53d8\u5316\u3002(\u6ce8\uff1a\u6211\u4eec\u4e0d\u77e5\u9053\u5f53\u524d\u7684\u4e8b\u6001\u53d1\u5c55\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u4e16\u7eaa\u4e00\u5230\u4e24\u6b21\u7684\u73b0\u8c61\uff0c\u8fd9\u79cd\u73b0\u8c61\u5c06\u628a\u5168\u56fd\u548c\u5168\u7403\u7684\u751f\u4ea7\u7387\u8d8b\u52bf\u63a8\u5411\u4e00\u4e2a\u65b0\u7684\u66f4\u9ad8\u7684\u8f68\u9053)\uff0c\u6216\u8005\u6211\u4eec\u53ea\u662f\u5728\u89c2\u5bdf\u4e00\u4e9b\u4e0d\u540c\u5bfb\u5e38\u7684\u53d8\u5316\u3002\n\u6bcf50\u5e74\u6216100\u5e74\u51fa\u73b0\u4e00\u6b21\u91cd\u5927\u8fdb\u6b65\u7684\u60f3\u6cd5\u4e0e\u718a\u5f7c\u7279\u5bf9\u7ecf\u6d4e\u5468\u671f\u7684\u5206\u6790\u76f8\u547c\u5e94\u3002\u4ed6\u8bbe\u60f3\u8d44\u672c\u4e3b\u4e49\u4e0d\u5b89\u5b81\u7684\u5386\u53f2\u4e0d\u65f6\u4f1a\u6709\u957f\u6ce2\u548c\u77ed\u6ce2\u3002\u5f53\u4e00\u5957\u65b0\u7684\u6280\u672f\u548c\u4ea7\u4e1a\u51fa\u73b0\u65f6\uff0c\u5c31\u4f1a\u523a\u6fc0\u957f\u671f\u7684\u4e0a\u6da8\u3002\n\u718a\u5f7c\u7279\u5199\u9053\uff0c19\u4e16\u7eaa\u521d\u7684\u7e41\u8363\u662f\u7531\u7eba\u7ec7\u54c1\u3001\u94a2\u94c1\u3001\u7164\u70ad\u548c\u84b8\u6c7d\u673a\u7684\u5d1b\u8d77\u70b9\u71c3\u7684\u3002\u4ed6\u8bf4\uff0c19\u4e16\u7eaa\u4e2d\u671f\u7684\u6269\u5f20\u4e0e\u94a2\u94c1\u751f\u4ea7\u548c\u94c1\u8def\u5efa\u8bbe\u6709\u5173\uff0c20\u4e16\u7eaa\u521d\u7684\u7e41\u8363\u662f\u7531\u6c7d\u8f66\u3001\u7535\u529b\u548c\u76f8\u5173\u4ea7\u54c1\u63a8\u52a8\u7684\u3002\n\u718a\u5f7c\u7279\u7ecf\u5e38\u628a\u94c1\u8def\u4f5c\u4e3a\u7ecf\u6d4e\u4e2d\u5f3a\u5927\u7684\u53d8\u9769\u529b\u91cf\uff0c\u5728\u6e05\u7406\u65e7\u7684\u6d3b\u52a8\u9886\u57df\u548c\u884c\u4e3a\u65b9\u5f0f\u7684\u540c\u65f6\uff0c\u6253\u5f00\u673a\u4f1a\u3002\u4ed6\u6307\u51fa\uff0c\u968f\u7740\u94c1\u8def\u904d\u5e03\u7f8e\u56fd\uff0c\u8fd0\u8d39\u964d\u81f3\u6bcf\u5428\u82f1\u91cc2\u81f33\u7f8e\u5206\uff0c\u65e7\u7684\u8fd0\u6cb3\u548c\u6536\u8d39\u516c\u8def\u7cfb\u7edf\u6fd2\u4e34\u706d\u7edd\u3002\u5728\u793e\u4f1a\u65b9\u9762\uff0c\u94c1\u8def\u516c\u53f8\u4e3a\u4e2d\u897f\u90e8\u548c\u897f\u90e8\u7684\u5b9a\u5c45\u94fa\u5e73\u4e86\u9053\u8def\uff0c\u7ecf\u5e38\u5efa\u9020\u8c37\u7269\u5347\u964d\u673a\uff0c\u5e76\u4e3a\u6f5c\u5728\u519c\u6c11\u51c6\u5907\u4e86\u8bb8\u591a\u4e1c\u897f\u3002\n\u7136\u800c\uff0c\u82f1\u56fd\u534e\u5a01\u5927\u5b66(University Of Warwick)\u6280\u672f\u521b\u65b0\u7814\u7a76\u90e8\u8d1f\u8d23\u4eba\u4fdd\u7f57\u00b7\u65af\u901a\u66fc(Paul Stoneman)\u8868\u793a\uff0c\u718a\u5f7c\u7279\u7684\u7e41\u8363\u8574\u542b\u7740\u81ea\u6211\u6bc1\u706d\u7684\u79cd\u5b50\u3002\n\u8fd9\u4f4d\u4f01\u4e1a\u5bb6\u5e26\u6765\u4e86\u4e00\u4e9b\u65b0\u4e1c\u897f\uff0c\u4ed6\u8bf4\u3002\u90a3\u662f\u5229\u6da6\u7684\u6765\u6e90\u3002\u53e6\u4e00\u4e9b\u4eba\u8fdb\u5165\u5e02\u573a\uff0c\u8695\u98df\u5229\u6da6\u3002\u5f53\u4ed6\u4eec\u590d\u5236\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u5f97\u5230\u66f4\u591a\u7684\u6295\u8d44\u3002\u4f60\u4f1a\u5f97\u5230\u6295\u8d44\u4e0a\u7684\u53d8\u5316\u3002\u4f60\u7684\u5229\u6da6\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5b83\u5f00\u542f\u4e86\u4e00\u4e2a\u6295\u673a\u5faa\u73af\u3002\u5f88\u591a\u4eba\u5728\u5e02\u573a\u4e0a\u6295\u673a\uff0c\u5e02\u573a\u5f00\u59cb\u7e41\u8363\u3002\u4f46\u5b83\u5fc5\u987b\u84b8\u53d1\u6389\u3002\n\u6700\u7ec8\uff0c\u4ed6\u8865\u5145\u8bf4\uff0c\u65e0\u8bba\u662f\u4ec0\u4e48\u5f15\u53d1\u4e86\u8fd9\u573a\u7e41\u8363\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u3002\u4e00\u65e6\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e86\u8f66\uff0c\u5c31\u53ea\u6709\u66f4\u6362\u9700\u6c42\u4e86\u3002\u4e00\u65e6\u6bcf\u4e2a\u4eba\u90fd\u80fd\u4e0a\u7f51\uff0c\u4ed6\u4eec\u5c31\u4e0d\u518d\u8d2d\u4e70\u673a\u5668\u6765\u4e0a\u7f51\u3002\n\u76d6\u8328\u548c\u5fae\u8f6f\u516c\u53f8\u7684\u634d\u536b\u8005\u559c\u6b22\u5f15\u7528\u718a\u5f7c\u7279\u5173\u4e8e\u5784\u65ad\u7684\u7406\u8bba\u3002\u718a\u5f7c\u7279\u8ba4\u4e3a\uff0c\u5784\u65ad\u6ca1\u6709\u4ec0\u4e48\u9519\uff0c\u5b83\u4eec\u53ef\u4ee5\u6bd4\u8bb8\u591a\u521d\u521b\u516c\u53f8\u66f4\u6709\u6548\u5730\u63d0\u4f9b\u521b\u65b0\u3002\n\u6885\u7279\u5361\u592b\u8bf4\uff0c\u4f60\u5f80\u5f80\u4f1a\u83b7\u5f97\u5784\u65ad\u5730\u4f4d\uff0c\u56e0\u4e3a\u4f60\u975e\u5e38\u4f18\u79c0\u3002\u718a\u5f7c\u7279\u5f53\u7136\u8ba4\u4e3a\uff0c\u4f60\u5e94\u8be5\u6839\u636e\u5784\u65ad\u4f01\u4e1a\u7684\u521b\u65b0\u8bb0\u5f55\u6765\u5224\u65ad\u5b83\u4eec\uff0c\u800c\u4e0d\u662f\u770b\u5b83\u662f\u5426\u6709\u5784\u65ad\u5229\u6da6\u3002\n\u4f46\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u53ea\u8981\u6709\u5f00\u653e\u7684\u5e02\u573a\uff0c\u4ed6\u5c31\u8ba4\u4e3a\u6240\u6709\u7684\u5784\u65ad\u90fd\u662f\u6682\u65f6\u7684\uff0c\u4ed6\u8865\u5145\u9053\u3002\u8d44\u672c\u4e3b\u4e49\u7126\u8e81\u4e0d\u5b89\uff0c\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u6709\u4e00\u4e2a\u5c0f\u5b69\u5b50\u5728\u5bc6\u8c0b\u6bd4\u5c14\u00b7\u76d6\u8328\u7684\u57ae\u53f0\u3002\n\u5982\u679c\u718a\u5f7c\u7279\u5f04\u9519\u4e86\u4ec0\u4e48\uff0c\u90a3\u5c31\u662f\u4ed6\u5bf9\u8d44\u672c\u4e3b\u4e49\u7ec8\u6781\u76ee\u6807\u7684\u770b\u6cd5\u3002\u4ed6\u9884\u6d4b\u8d44\u672c\u4e3b\u4e49\u5c06\u53d8\u5f97\u5b98\u50da\u4e3b\u4e49\uff0c\u6392\u6324\u4e2a\u4f53\u4f01\u4e1a\u5bb6\uff0c\u4f7f\u521b\u65b0\u6210\u4e3a\u4f8b\u884c\u516c\u4e8b\uff0c\u670d\u4ece\u96c6\u4e2d\u7ba1\u7406\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8bc1\u636e\u90fd\u4e0e\u8fd9\u4e00\u5047\u8bbe\u80cc\u9053\u800c\u9a70\u3002\u5982\u679c\u8bf4\u6709\u4ec0\u4e48\u4e0d\u540c\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u8d44\u672c\u4e3b\u4e49\u548c\u4f01\u4e1a\u5bb6\u4e3b\u4e49\u6b63\u5728\u8513\u5ef6\u3002\u5373\u4f7f\u662f\u5728\u957f\u671f\u7531\u5927\u578b\u5b98\u50da\u4f01\u4e1a\u96c6\u56e2\u4e3b\u5bfc\u7684\u97e9\u56fd\uff0c\u4f01\u4e1a\u5bb6\u548c\u98ce\u9669\u8d44\u672c\u5bb6\u4e5f\u6b63\u5728\u6210\u4e3a\u82f1\u96c4\u3002\n\u4e09\u661f\u5168\u7403\u7b56\u7565\u5e08\u96c6\u56e2\u6210\u5458\u6768\u97e9\u8bf4\uff0c\u76ee\u524d\u97e9\u56fd\u5927\u7ea6\u67096000\u5bb6\u6b63\u5f0f\u7684\u521d\u521b\u4f01\u4e1a\uff0c\u4ed6\u5f53\u65f6\u6b63\u5728\u4f26\u6566\u53c2\u52a0\u8fd9\u4f4d\u4f01\u4e1a\u5bb6\u7684\u4f1a\u8bae\uff0c\u5e0c\u671b\u627e\u5230\u4e09\u661f\u53ef\u80fd\u60f3\u8981\u652f\u6301\u7684\u65b0\u7684\u6b27\u6d32\u516c\u53f8\u3002\u6240\u6709\u7684\u5e74\u8f7b\u4eba\u90fd\u5bf9\u521d\u521b\u516c\u53f8\u7740\u8ff7\u3002\u6211\u4eec\u73b0\u5728\u6709140\u5bb6\u98ce\u9669\u6295\u8d44\u516c\u53f8\uff0c\u800c\u51e0\u5e74\u524d\u6211\u4eec\u53ea\u670920\u591a\u5bb6\u3002\n\u97e9\u5148\u751f\u95ee\uff1a\u4f60\u77e5\u9053\u73b0\u5728\u8c01\u662f\u97e9\u56fd\u7684\u82f1\u96c4\u4e4b\u4e00\u5417\uff1f\u8f6f\u94f6\u9996\u5e2d\u6267\u884c\u5b98\u5b59\u6b63\u4e49(Masayoshi Son)\u8868\u793a\u3002\u4ed6\u7684\u516c\u53f8\u5728\u65e5\u672c\uff0c\u4f46\u4ed6\u7684\u8840\u7edf\u662f\u97e9\u56fd\u4eba\u3002", "note_en": "IT IS A COLD, grim June day in London, but 32 brand-new entrepreneurs are generating some heat as they make 10-minute business presentations in a hotel just off Hyde Park. Their audience: Several hundred venture capitalists who have gathered from three continents and paid $1,800 each to identify the next Bill Gates, or at least the next Jeff Bezos.\n Schumpeter was an Austrian-trained economist, economic historian and ardent capitalist who developed a theory with the breadth and grandeur of that of Karl Marx. But where Marx viewed labor as the fundamental unit of economic value and the proletariat as the key agent of change, Schumpeter saw the entrepreneur as the cornerstone of capitalism. Although he died 50 years ago, Schumpeter&#39;s theories anticipated an age when an entrepreneur such as Mr. Gates could command as much global recognition as the president of the United States or the latest rock star.\n &#34;Schumpeter would have understood the Bill Gates story perfectly,&#34; said Stanley Metcalfe, director of research at the Center for Research on Innovation and Competition at the University of Manchester, in Manchester, England, and president of the International Schumpeter Society. &#34;He saw the entrepreneur as often facing great hostility.&#34;\n Schumpeter&#39;s theory sets forth the idea that the vital force behind capitalism is innovation and the entrepreneur willing to introduce it. A product of the Depression and the economic instabilities that gripped Europe after World War I, Schumpeter also grappled with uncovering the fundamental causes for the business cycle of booms followed by busts. His thesis was that the introduction of innovations was responsible for both the progress and the instabilities of capitalism.\n Those instabilities he attributed to the principle of &#34;creative destruction,&#34; a process in which new technologies, new kinds of products, new methods of production and new means of distribution make old ones obsolete, forcing existing companies to quickly adapt to a new environment or fail.\n It is an idea that has been seized upon by economists, including central bankers, to explain the remarkable pace of growth, especially in the United States, and to justify the extraordinary gains in the stock market.\n If creative destruction allows fast economic growth without generating serious inflation, then it might make sense, for example, to put high values on the shares of companies that will do well in such an unusual environment. It would also behoove governments not to interfere with the prosperity-creating potential of this radical kind of capitalism, even if the destructive elements bring down established companies and lead to job losses.\n &#34;Today, nobody can speak about the market society without using these words &#39;entrepreneur&#39; and &#39;creative destruction,&#34;&#39; said Manfred Prisching, professor of sociology at the University of Graz in Austria and a former Joseph A. Schumpeter fellow at Harvard University.\n Schumpeter himself taught at both the University of Graz and at Harvard University. His extensive writings display a great understanding of all economists before him, but Mr. Prisching said he had departed from mainstream theory, which viewed capitalism and the market as stable.\n &#34;Schumpeter believed the static order is disturbed by the entrepreneur, and he investigated where that entrepreneurial spirit came from,&#34; Mr. Prisching said. &#34;He saw it as a different way of looking at the world: The will to create an empire for one&#39;s self. It is a dynamic force that stems from the disposition of some people. Not that they are particularly intelligent. It is not cognitive ability. They are not subtle people. They are often very crude, but they want to attack the world in a certain way. If you take the old adventurers, capitalism turned that into this calculating spirit.&#34;\n  Whatever their nature, entrepreneurs, by advancing new products, technology or production methods, provide an impulse for change and, in Schumpeter&#39;s words in his 1942 book, &#34;Capitalism, Socialism and Democracy,&#34; &#34;a perennial gale of creative destruction.&#34;\n Although overshadowed by the British economist John Maynard Keynes during his lifetime, Schumpeter&#39;s theory and phraseology have become mainstream today for describing the current era, in which new-economy companies are being created at an astounding rate. No less an establishment figure as Alan Greenspan, chairman of the U.S. Federal Reserve Board and a Harvard-trained economist, has been using Schumpeterian economics to explain the remarkable noninflationary expansion in the United States over the past eight years.\n Testifying before the Joint Economic Committee of Congress a year ago, Mr. Greenspan said the &#34;evident acceleration of the process of creative destruction, which has accompanied these expanding innovations and which has been reflected in the shifting of capital from failing technologies into those technologies at the cutting edge, has been remarkable.&#34;\n The innovations Mr. Greenspan was describing included the microprocessor, the laser, fiber optics and satellite technologies. But he added: &#34;The innovations in information technology \u2014 so called IT \u2014 have begun to alter the manner in which we do business and create value, often in ways that were not readily foreseeable even five years ago. As this century comes to an end, the defining characteristic of the current wave of technology is the role of information.&#34;\n Nor is the wave of innovation limited to new-economy companies. Mr. Greenspan explained that established industries had been adapting the new technologies to enhance their productivity.\n &#34;Our century-old motor vehicle industry, for example, has raised output per hour by a dramatic 4.5 percent annually on average in the past two years, compared with a lackluster 1.5 percent on average earlier this decade,&#34; he said. &#34;Much the same is true of many mature industries such as steel, textiles and other stalwarts of an earlier age.&#34;\n In these messages, Mr. Greenspan seems to be affirming the answer to a puzzle over which he had brooded several years before.\n &#34;We do not know,&#34; he then stated, &#34;nor do I suspect anyone can know, whether current developments are part of a once-or-twice-in-a-century phenomenon that will carry productivity trends nationally and globally to a new higher track, or whether we are merely observing some unusual variations.&#34;\n The idea of major advances occurring every 50 or 100 years echoes Schumpeter&#39;s analysis of economic cycles. He conceived of capitalism&#39;s restless history as punctuated by long and short waves. A long upswing is stimulated when a new set of technologies and industries comes into existence.\n Schumpeter wrote that the boom in the early 19th century had been ignited by the rise of textiles, iron, coal and steam engines. The expansion in the mid-19th century, he said, was related to steel production and the construction of railroads, and the early-20th-century boom was driven by automobiles, electric power and associated products.\n Schumpeter often used the example of the railroad as a powerful transforming agent in the economy, opening up opportunities while clearing out old areas of activity and ways of behaving. As railroads spread across the United States and freight rates fell to 2 to 3 cents per ton mile, he noted, the old canal and turnpike system suffered to the point of extinction. On the social front, the railroad companies paved the way for the settlement of the Midwest and West, often building grain elevators and preparing many things for would-be farmers.\n Schumpeter&#39;s booms, however, &#34;contain seeds of their own destruction,&#34; said Paul Stoneman, head of the Technological Innovation Research Unit at the University of Warwick in England.\n &#34;The entrepreneur brings along something new,&#34; he said. &#34;That&#39;s the source of profit. Others come into the market and whittle the profit away. As they copy, you get more investment. You get changes in investment. You get changes in profit. It starts a speculation cycle. Lots of people speculate on the markets and the market starts to boom. But it has to evaporate.&#34;\n &#34;Eventually,&#34; he added, &#34;whatever started the boom, everyone has it. Once everyone has a car, there is only replacement demand. Once everyone has Internet access, they stop buying machines to access them.&#34;\n Defenders of Mr. Gates and Microsoft Corp. like to cite Schumpeter&#39;s theories on monopoly. Schumpeter believed there was nothing wrong with monopolies and that they could be more effective purveyors of innovation than many start-ups.\n &#34;You tend to get a monopoly position because you are very good,&#34; Mr. Metcalfe said. &#34;Schumpeter certainly believed that you should judge monopolies by their innovation record, not by whether or not it has monopoly profits.&#34;\n &#34;But the important point is that as long as there are open markets, he sees all monopolies as transient,&#34; he added. &#34;Capitalism is restless, and somewhere in California, there is a young kid plotting Bill Gates&#39;s downfall.&#34;\n If Schumpeter got something wrong, it was in his vision of capitalism&#39;s endgame. He predicted that capitalism would become bureaucratic, squeezing out the individual entrepreneur and making innovation routine and subject to centralized management.\n So far, the evidence points against this hypothesis. If anything, capitalism and entrepreneurialism are spreading. Even in South Korea, long dominated by huge bureaucratic conglomerates, entrepreneurs and venture capitalists are emerging as heroes.\n &#34;There are now about 6,000 official start-ups in South Korea,&#34; said Young Han, a member of the Samsung Global Strategist Group, who was attending the entrepreneur&#39;s meeting in London in the hope of finding new European firms that Samsung might want to back. &#34;All the young people are crazy about start-up companies. We now have 140 venture-capital companies where we had two dozen a few years ago.&#34;\n Asked Mr. Han: &#34;Do you know who is now one of the heroes in Korea? Masayoshi Son, the CEO of Softbank. His company is in Japan, but his origins are Korean.&#34;", "posttime": "2020-05-14 15:54:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u574f,creative,\u4f01\u4e1a\u5bb6", "title": "\u534a\u4e2a\u4e16\u7eaa\u540e\uff0c\u201c\u521b\u9020\u6027\u7834\u574f\u201d\u7406\u8bba\u9002\u7528\u4e8e\u7f51\u7edc\u65f6\u4ee3", "title_en": "Half a Century Later, 'Creative Destruction' Theory Is Apt for the Internet Age", "transed": 1, "url": "https://www.nytimes.com/2000/06/10/your-money/IHT-half-a-century-later-economists-creative-destruction-theory-is.html", "via": "", "real_tags": ["\u7834\u574f", "creative", "\u4f01\u4e1a\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002077, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e86\u89e3\u5982\u4f55\u4e3a\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u8c03\u914d\u3001\u4fdd\u62a4\u3001\u8fde\u63a5\u548c\u8fd0\u884c\u4efb\u4f55\u57fa\u7840\u8bbe\u65bd\u3002", "note_en": "Learn how to provision, secure, connect, and run any infrastructure for any application.", "posttime": "2020-05-14 15:24:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,learn,\u5e94\u7528\u7a0b\u5e8f", "title": "HashiCorp\u5b66\u4e60\u95e8\u6237", "title_en": "HashiCorp Learn Portal", "transed": 1, "url": "https://learn.hashicorp.com/", "via": "", "real_tags": ["\u5b66\u4e60", "learn", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "9f12c73d3461cfde5b0d43fe8e9c9f44.png", "infoid": 1002076, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Saltpack\u662f\u4e00\u79cd\u6d41\u7ebf\u578b\u3001\u73b0\u4ee3\u5316\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u8bbe\u8ba1\u65f6\u8003\u8651\u5230\u4e86\u7b80\u5355\u6027\u3002\u5b83\u6613\u4e8e\u5b9e\u73b0\u548c\u96c6\u6210\u3002\u6211\u4eec\u51e0\u4e4e\u6ca1\u6709\u505a\u51fa\u52a0\u5bc6\u51b3\u5b9a\uff0c\u800c\u662f\u628a\u51e0\u4e4e\u6240\u6709\u7684\u7e41\u91cd\u5de5\u4f5c\u90fd\u7559\u7ed9\u4e86NaCl\u5e93\u3002\nSaltpack\u662f\u4e8c\u8fdb\u5236\u6d88\u606f\u683c\u5f0f\uff0c\u4f7f\u7528MessagePack\u683c\u5f0f\u7f16\u7801\u3002\u6d88\u606f\u88ab\u5206\u89e3\u6210\u5408\u7406\u7684(1MB)\u5757\uff0c\u5728\u8fd9\u4e9b\u5757\u4e0a\u6267\u884c\u5e38\u89c4\u7684NaCl\u64cd\u4f5c\u3002\u6211\u4eec\u5df2\u5c3d\u529b\u89e3\u51b3\u5f53\u524d\u6d88\u606f\u683c\u5f0f\u7684\u8bb8\u591a\u7f3a\u70b9\uff1a(1)\u4ec5\u8f93\u51fa\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e\uff1b(2)\u5c3d\u53ef\u80fd\u4f7f\u7528\u53ef\u5426\u8ba4\u7684\u9a8c\u8bc1\uff1b(3)\u4e0d\u80fd\u5bf9\u5757\u8fdb\u884c\u91cd\u65b0\u6392\u5e8f\u6216\u5c06\u5176\u4e0e\u5176\u4ed6\u4f20\u8f93\u7ec4\u5408\uff1b(4)\u53ef\u4ee5\u9690\u85cf\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u516c\u94a5\uff1b\u4ee5\u53ca(5)\u53ef\u4ee5\u68c0\u6d4b\u5230\u6d88\u606f\u622a\u65ad\u3002\n\u5f00\u59cbSALTPACK\u7b7e\u540d\u90ae\u4ef6\u3002kXR7VktZdyH7rvq v5wcIkHbs7XwHpbnPtLcF6vE5yY63t aHF62jiEC1zHGqD inx5YqK0nf5W9Lp TvUmM2zBwxgd3NwkvzZ96W7ZfDdTVg F5Y99c2l5EsCy1I xVNl0nY1TP25vsX 2cRXXPUrM2UKtWqUK2HG2ifBSOED4w xArcORHfFeiEZxF CqestMqLSCCE6lT HFcdvt1QX9JjmWLo5AAqPiECnoHiSA bPHhz2JnSCyDIOz ZET1BWzttbMDL4N pcyQLmsGqYpxhG6uvdBxdt55w9xQvQ hDPuOsKF05Hsml6 z7h9TS2msJcNwtz vxGIQR7sbB19UOtboM1hlolmMB3loP 0KexlROFBTDC6MR nBvd9sZUxA8Z7i5 a6Dk5yFU3WEYQAoDqqjXcp0yBoHO5O KEMqkZlyMf1PKiB 2n9wE6jwxAN1xws ccthT6X3iRYk0BrgHW6QRXzAHLy6Ib LgY6b3UcQAoDo8b XyaExxinVuM5Ftk 75BJOWoyLGFhZS7EfKR8jQQexvyjDM rJLxYtjvaLX7joS 2q1VcUlqGfZDhAa 4vxJQAyu57beOuxoobLhI47iZf9bxK PmYrVQ5PsC6pY1J KTQQexvlvp2yicx K4su2AFCjihbzNIyZgKM4NHN1KZapS O3iB9SlhVfTfFcR FoQoSViTkbtDtTt 6I0jrTRHkv9XVQQeeeuzR7qYu1Grm3 zDPyj7JgK2mDidw HchOZnfOn59QLnM nH7ErnPRXgHuWHGDBidjQPakJHuWsk 2ftpIyZd2NLYEFS Mqcbo6QeCdk7LA1 uobl4NXzpvi8amOPe8xAl1OzUCoD34 MbCwtTAe1JNymvs okufV8lHU0jVnbj u4no9QB9aP2WkjxPfeqIH2fEtOjmFP gPMhGWslkU0M7FL QP77gPHbgjPLSD8 yIRTrbgzpAPut5RQhIdqVlHbUOa9sI v7gSqOi0GbUlhSM 183LxZI8pIlvgn9 Ms1WNzt5Xkv0W1QQf419ZmuQVPQDOk 0hffDmUk71TlfVx XZCF3voC2ysgl3g YdLz4rDRzMJgd2m01HIbfdsoZpAMty O27WtUNRLV1iyC9 tK5ApCyekI4nWcf 2OvTHnC8ma7bloWXAG.\u3002\u7ed3\u675fSALTPACK\u7b7e\u540d\u90ae\u4ef6\u3002\n\u8fd9\u91cc\u7684\u53d8\u5316\u5f88\u5c0f\uff1a\u6211\u4eec\u5df2\u7ecf\u5c06\u6211\u4eec\u7684\u5b57\u7b26\u51cf\u5c11\u5230\u57fa\u657062\u52a0\u4e0a\u4e00\u4e9b\u53e5\u53f7\u6807\u8bb0\uff0c\u800c\u4e14\u53ea\u5728\u5355\u8bcd\u7684\u672b\u5c3e\u3002PGP\u6d88\u606f\u7ecf\u5e38\u88ab\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u3001\u7f51\u7ad9\u548c\u667a\u80fd\u6587\u672c\u5904\u7406\u5668\u7834\u574f\u3002\n\u5f53\u7136\uff0csaltpack\u4e5f\u53ef\u4ee5\u8f93\u51fa\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u5b83\u90fd\u662f\u683c\u5f0f\u5185\u90e8\u6700\u91cd\u8981\u7684\u4e1c\u897f\u3002\u4f60\u53ef\u4ee5\u9605\u8bfb\u8bf4\u660e\u4e66\u4e86\u89e3\u8be6\u7ec6\u60c5\u51b5\u3002", "note_en": "saltpack is a streamlined, modern solution, designed with simplicity in mind. It is easy to implement &amp; integrate. We&#39;ve made few crypto decisions and instead leave almost all of the heavy lifting to the  NaCl library.\n saltpack is a binary message format, encoded using the  MessagePack format. Messages are broken up into reasonable (1MB) chunks, over which regular  NaCl operations are performed. We have taken pains to address many of the  shortcomings of current message formats: (1) only authenticated data is output; (2) repudiable authentication is used wherever possible; (3) chunks cannot be reordered or combined with other transmissions; (4) the public keys of senders and recipients can be hidden; and (5) message truncation is detectable.\n   BEGIN SALTPACK SIGNED MESSAGE. kXR7VktZdyH7rvq v5wcIkHbs7XwHpbnPtLcF6vE5yY63t aHF62jiEC1zHGqD inx5YqK0nf5W9Lp TvUmM2zBwxgd3NwkvzZ96W7ZfDdTVg F5Y99c2l5EsCy1I xVNl0nY1TP25vsX 2cRXXPUrM2UKtWqUK2HG2ifBSOED4w xArcORHfFeiEZxF CqestMqLSCCE6lT HFcdvt1QX9JjmWLo5AAqPiECnoHiSA bPHhz2JnSCyDIOz ZET1BWzttbMDL4N pcyQLmsGqYpxhG6uvdBxdt55w9xQvQ hDPuOsKF05Hsml6 z7h9TS2msJcNwtz vxGIQR7sbB19UOtboM1hlolmMB3loP 0KexlROFBTDC6MR nBvd9sZUxA8Z7i5 a6Dk5yFU3WEYQAoDqqjXcp0yBoHO5O KEMqkZlyMf1PKiB 2n9wE6jwxAN1xws ccthT6X3iRYk0BrgHW6QRXzAHLy6Ib LgY6b3UcQAoDo8b XyaExxinVuM5Ftk 75BJOWoyLGFhZS7EfKR8jQQexvyjDM rJLxYtjvaLX7joS 2q1VcUlqGfZDhAa 4vxJQAyu57beOuxoobLhI47iZf9bxK PmYrVQ5PsC6pY1J KTQQexvlvp2yicx K4su2AFCjihbzNIyZgKM4NHN1KZapS O3iB9SlhVfTfFcR FoQoSViTkbtDtTt 6I0jrTRHkv9XVQQeeeuzR7qYu1Grm3 zDPyj7JgK2mDidw HchOZnfOn59QLnM nH7ErnPRXgHuWHGDBidjQPakJHuWsk 2ftpIyZd2NLYEFS Mqcbo6QeCdk7LA1 uobl4NXzpvi8amOPe8xAl1OzUCoD34 MbCwtTAe1JNymvs okufV8lHU0jVnbj u4no9QB9aP2WkjxPfeqIH2fEtOjmFP gPMhGWslkU0M7FL QP77gPHbgjPLSD8 yIRTrbgzpAPut5RQhIdqVlHbUOa9sI v7gSqOi0GbUlhSM 183LxZI8pIlvgn9 Ms1WNzt5Xkv0W1QQf419ZmuQVPQDOk 0hffDmUk71TlfVx XZCF3voC2ysgl3g YdLz4rDRzMJgd2m01HIbfdsoZpAMty O27WtUNRLV1iyC9 tK5ApCyekI4nWcf 2OvTHnC8ma7bloWXAG. END SALTPACK SIGNED MESSAGE.\n   The changes here are small: we&#39;ve reduced our characters to base62 plus some period markers, and only at the ends of words. PGP messages often get mangled by different apps, websites, and smart text processors.\n Of course,  saltpack can output binary, too. Either way, it&#39;s what&#39;s inside the format that matters. You can read the  spec for the details.", "posttime": "2020-05-14 15:23:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u52a0\u5bc6,modern,\u6d88\u606f", "title": "Saltpack-\u4e00\u79cd\u73b0\u4ee3\u52a0\u5bc6\u6d88\u606f\u683c\u5f0f", "title_en": "Saltpack \u2013 a modern crypto messaging format", "transed": 1, "url": "https://github.com/keybase/saltpack", "via": "", "real_tags": ["\u52a0\u5bc6", "modern", "\u6d88\u606f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002075, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "//\u6765\u81ea&#34\uff1b\u7684@deno-types=&#34\uff1bhttps://servestjs.org/@v1.0.0-rc4/types/react/index.d.ts&#34\uff1bimport Reaction\u6765\u81ea&#34\uff1bhttps://dev.jspm.io/react/index.js&#34\uff1b\uff1b//@deno-types=&#34\uff1bhttps://servestjs.org/@v1.0.0-rc4/types/react-dom/server/index.d.ts&#34\uff1bimport ReactDOMServer\uff1bhttps://dev.jspm.io/react-dom/server.js&#34\uff1b\uff1bimport{CreateApp}\u6765\u81ea&#34\uff1bhttps://servestjs.org/@v1.0.0-rc4/mod.ts&#34\uff1b\uff1bconst APP=CreateApp()\uff1bapp.Handle(&#34\uff1b/&#34\uff1b\uff0cAsync(Req)=&gt\uff1b{\u7b49\u5f85\u8bf7\u6c42.Response({\u72b6\u6001\uff1a200\uff0c\u6807\u9898\uff1a\u65b0\u6807\u9898({&#34\uff1b\u5185\u5bb9\u7c7b\u578b&#34\uff1b\uff1a&#34\uff1b\u6587\u672c/HTML\uff1b\u5b57\u7b26\u96c6=UTF-8&#34\uff1b\uff0c})\uff0cBody\uff1aReactDOMServer.renderToString(&lt\uff1bhtml&gt\uff1b&lt\uff1bhead&gt\uff1b&lt\uff1bmeta charset=&#34\uff1butf-8&#34\uff1b/&gt\uff1b&lt\uff1btitle&gt\uff1bServest&lt\uff1b/title&gt\uff1b&lt\uff1b/head&gt\uff1b&lt\uff1bbody&gt\uff1bHello Servest\uff01&lt\uff1b/body&gt\uff1b&lt", "note_en": "// @deno-types=&#34;https://servestjs.org/@v1.0.0-rc4/types/react/index.d.ts&#34;import React from &#34;https://dev.jspm.io/react/index.js&#34;;// @deno-types=&#34;https://servestjs.org/@v1.0.0-rc4/types/react-dom/server/index.d.ts&#34;import ReactDOMServer from &#34;https://dev.jspm.io/react-dom/server.js&#34;;import { createApp } from &#34;https://servestjs.org/@v1.0.0-rc4/mod.ts&#34;;const app = createApp();app.handle(&#34;/&#34;, async (req) =&gt; { await req.respond({ status: 200, headers: new Headers({ &#34;content-type&#34;: &#34;text/html; charset=UTF-8&#34;, }), body: ReactDOMServer.renderToString( &lt;html&gt; &lt;head&gt; &lt;meta charSet=&#34;utf-8&#34; /&gt; &lt;title&gt;servest&lt;/title&gt; &lt;/head&gt; &lt;body&gt;Hello Servest!&lt;/body&gt; &lt;/html&gt;, ), });});app.listen({ port: 8899 });", "posttime": "2020-05-14 15:23:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "deno,progressive,gt", "title": "Servest\uff1a\u4e00\u79cd\u7528\u4e8eDeno\u7684\u6e10\u8fdb\u5f0fHTTP\u670d\u52a1\u5668", "title_en": "Servest: A progressive HTTP server for Deno", "transed": 1, "url": "https://servestjs.org/", "via": "", "real_tags": ["deno", "gt"]}, {"category": "", "categoryclass": "", "imagename": "03289bff08e0bbe92d0ea6755b2ca4ae.png", "infoid": 1002074, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Tundra\u662f\u4e00\u4e2a\u7528\u4e8eNodeJS\u7684\u5c0f\u578b\u3001\u5feb\u901f\u3001\u53ef\u5b9a\u5236\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u6a21\u677f\u5f15\u64ce\u3002\u5b83\u53ef\u4ee5\u5b8c\u7f8e\u96c6\u6210\u4efb\u4f55Js\u5236\u9020\u7684\u540e\u7aef\uff0c\u751a\u81f3\u662f\u7eafNodeJS\u3002\n{{PRINT_VARIABLE}}{\uff01PRINT_VARIABLE_WITH_ESPRING_IT\uff01}{#COMMENT#}{%var CODE_INSIDE_THIS_TAG=TRUE%}~{{ESPEND_TEMPLATE_TAG}}@require(imported_view.html)@spread(hello){[Swike Hello]}{[Endspend]}@Extensions(Parent_View.html){[\u5757\u540d]}{[Parent BLOCK_NAME]}{[Endblock]}\u3002\nvar http=Required(&#39\uff1bhttp&#39\uff1b)\uff1bvar Tundra=Required(&#39\uff1btundrajs&39\uff1b)\uff1bvar view=new Tundra()\uff1bhttp\u3002createServer((req\uff0cres)=&gt\uff1b{let data={title\uff1a&#39\uff1bTundra&39\uff1b\uff0cmsg\uff1a&#39\uff1bHello World\uff01&#39\uff1b}\uff1b\u67e5\u770b\u3002\u6e32\u67d3(res\uff0c#39\uff1bhome.html\uff1b\uff0cdata)\uff1bres\u3002end()\uff1b})\u3002\u8046\u542c(8080)\uff1b\n\u4efb\u4f55\u4ee5\u95ee\u9898\u3001\u62c9\u5f0f\u8bf7\u6c42\u6216\u6d88\u606f\u7684\u5f62\u5f0f\u5bf9\u6b64\u9879\u76ee\u7684\u8d21\u732e\u6216\u652f\u6301\u90fd\u5c06\u53d7\u5230\u9ad8\u5ea6\u8d5e\u8d4f\u3002\u2764\ufe0f", "note_en": "Tundra is a small, fast, customizable and easy to use template engine for Nodejs. It perfectly integrates with any back-end made in Js, even pure Nodejs.\n    {{ print_variable }}{! print_variable_without_escaping_it !}{# comment #}{% var code_inside_this_tags = true %}~{{ escape_template_tags }}@require(imported_view.html)@spread(hello){[ spread hello ]}{[ endspread ]}@extends(parent_view.html){[ block name ]} {[ parent block_name ]}{[ endblock ]}\n    var  http  =  require ( &#39;http&#39; ) ; var  Tundra  =  require ( &#39;tundrajs&#39; ) ; var  view  =  new  Tundra ( ) ; http . createServer ( ( req ,  res )  =&gt;  {  let  data  =  {  title:  &#39;Tundra&#39; ,  msg:  &#39;Hello World!&#39;  } ;  view . render ( res ,  &#39;home.html&#39; ,  data ) ;  res . end ( ) ; } ) . listen ( 8080 ) ;\n          Any contribution or support to this project in the form of a issue, pull request or message will be highly appreciated.  \u2764\ufe0f", "posttime": "2020-05-14 15:23:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b9a\u5236,powerful,var", "title": "Tundra-\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u4e14\u53ef\u5b9a\u5236\u7684\u6a21\u677f\u5f15\u64ce", "title_en": "Tundra \u2013 A powerful and customizable template engine", "transed": 1, "url": "https://github.com/Usbac/tundra", "via": "", "real_tags": ["\u5b9a\u5236", "powerful", "var"]}, {"category": "", "categoryclass": "", "imagename": "620dae4229626ee37a27475f04dbbf53.png", "infoid": 1002073, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u6b3e\u5c06\u60a8\u7684\u65e5\u5e38\u5de5\u4f5c\u5e94\u7528\u7a0b\u5e8f\u878d\u5408\u4e3a\u4e00\u4f53\u7684\u65b0\u5de5\u5177\u3002\u5b83\u662f\u60a8\u548c\u60a8\u7684\u56e2\u961f\u7684\u4e00\u4f53\u5316\u5de5\u4f5c\u533a", "note_en": "A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team", "posttime": "2020-05-14 15:22:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b80\u5386,resume", "title": "\u6211\u7684\u7b80\u5386\u662f\u5173\u4e8e\u89c2\u5ff5\u7684", "title_en": "My Resume on Notion", "transed": 1, "url": "https://www.notion.so/Hi-I-m-Bosky-d943244bf5e5407d8717233ddb082f25", "via": "", "real_tags": ["\u7b80\u5386", "resume"]}, {"category": "", "categoryclass": "", "imagename": "b024843265ae5fd8956afb7aaa9c02b0.png", "infoid": 1002072, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u79d1\u5b66\u5bb6\u8bf4\uff0c\u957f\u671f\u4ee5\u6765\uff0c\u4eba\u4eec\u4e00\u76f4\u8ba4\u4e3a\u86fe\u5b50\u662f\u4ee4\u4eba\u8ba8\u538c\u7684\u751f\u7269\uff0c\u4f1a\u5728\u4f60\u7684\u8863\u670d\u4e0a\u7559\u4e0b\u6d1e\uff0c\u4f46\u5b83\u4eec\u88ab\u4e25\u91cd\u8bef\u5224\u4e86\u3002\n\u65b0\u7684\u7814\u7a76\u8868\u660e\uff0c\u5b83\u4eec\u4f5c\u4e3a\u5404\u79cd\u82b1\u5349\u548c\u690d\u7269\u7684\u8fc7\u591c\u6388\u7c89\u8005\u53d1\u6325\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\u3002\n\u7814\u7a76\u79f0\uff0c\u98de\u86fe\u7684\u8fd0\u8f93\u7f51\u7edc\u6bd4\u871c\u8702\u7b49\u65e5\u95f4\u4f20\u7c89\u7684\u8fd0\u8f93\u7f51\u7edc\u66f4\u5927\u3001\u66f4\u590d\u6742\u3002\n\u5728\u8fc7\u53bb\u7684\u5341\u5e74\u91cc\uff0c\u516c\u4f17\u5bf9\u4f20\u7c89\u8005\u89d2\u8272\u7684\u7126\u8651\u5b8c\u5168\u96c6\u4e2d\u5728\u871c\u8702\u8eab\u4e0a\u3002\n\u5b83\u4eec\u6570\u91cf\u7684\u51cf\u5c11\uff0c\u4e0e\u571f\u5730\u7684\u53d8\u5316\u548c\u6740\u866b\u5242\u7684\u5e7f\u6cdb\u4f7f\u7528\u6709\u5173\uff0c\u6709\u52a9\u4e8e\u63d0\u9ad8\u73af\u5883\u5bf9\u8fd9\u4e9b\u751f\u7269\u5728\u98df\u7269\u94fe\u4e2d\u53d1\u6325\u5173\u952e\u4f5c\u7528\u7684\u8ba4\u8bc6\u3002\n\u6709\u4e00\u79cd\u5f88\u5927\u7684\u8bef\u89e3\uff0c\u8ba4\u4e3a\u6240\u6709\u7684\u86fe\u5b50\u90fd\u4f1a\u6765\u5403\u6211\u7684\u8863\u670d\u3002\u8fd9\u9879\u65b0\u7814\u7a76\u7684\u4e3b\u8981\u4f5c\u8005\u3001\u6765\u81ea\u4f26\u6566\u5927\u5b66\u5b66\u9662(UCL)\u7684\u7406\u67e5\u5fb7\u00b7\u6c83\u5c14\u987f(Richard Walton)\u535a\u58eb\u8bf4\uff0c\u8fd9\u6839\u672c\u4e0d\u662f\u4e8b\u5b9e\u3002\n\u5b83\u4eec\u4e2d\u7684\u4e00\u4e9b\u78b0\u5de7\u662f\u8bbf\u82b1\uff0c\u53ef\u80fd\u662f\u6388\u7c89\u8fc7\u7a0b\u4e2d\u7684\u91cd\u8981\u90e8\u5206\u3002\n\u4e3a\u4e86\u627e\u51fa\u98de\u86fe\u626e\u6f14\u7684\u91cd\u8981\u89d2\u8272\uff0c\u6c83\u5c14\u987f\u535a\u58eb\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u76d1\u6d4b\u4e86\u8bfa\u798f\u514b\u519c\u4e1a\u533a\u6c60\u5858\u5468\u56f4\u7684\u98de\u86fe\u6d3b\u52a8\u3002\n\u4ed6\u4eec\u53d1\u73b0\uff0c\u4ed6\u4eec\u6d4b\u8bd5\u7684\u98de\u86fe\u4e2d\u670945%\u643a\u5e26\u82b1\u7c89\uff0c\u82b1\u7c89\u6765\u81ea47\u79cd\u4e0d\u540c\u7684\u690d\u7269\uff0c\u5176\u4e2d\u5305\u62ec\u51e0\u79cd\u871c\u8702\u3001\u98de\u8747\u548c\u8774\u8776\u5f88\u5c11\u5149\u987e\u7684\u7269\u79cd\u3002\n\u79d1\u5b66\u5bb6\u4eec\u53d1\u73b0\uff0c\u867d\u7136\u5927\u9ec4\u8702\u548c\u871c\u8702\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5b83\u4eec\u5f80\u5f80\u7784\u51c6\u6700\u591a\u4ea7\u7684\u82b1\u871c\u548c\u82b1\u7c89\u6765\u6e90\u3002\u4f46\u5bf9\u86fe\u5b50\u6765\u8bf4\u5c31\u4e0d\u662f\u8fd9\u6837\u4e86\u3002\n\u6c83\u5c14\u987f\u535a\u58eb\u8bf4\uff0c\u4ece\u6211\u4eec\u7684\u7814\u7a76\u6765\u770b\uff0c\u86fe\u5b50\u5f80\u5f80\u662f\u591a\u9762\u624b\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5e76\u4e0d\u662f\u4e13\u95e8\u62dc\u8bbf\u4e00\u5c0f\u7fa4\u82b1\u3002\n\u4ed6\u4eec\u4f1a\u53c2\u89c2\u4efb\u4f55\u4e00\u79cd\u4ed6\u4eec\u80fd\u63a5\u89e6\u5230\u7684\u82b1\u3002\u8fd9\u4e9b\u5f80\u5f80\u662f\u50cf\u8346\u68d8\u4e00\u6837\u5f00\u653e\u7684\u676f\u72b6\u82b1\u6735\uff0c\u5b83\u4eec\u53ef\u4ee5\u63a5\u89e6\u5230\u8c46\u79d1\u690d\u7269\u4e2d\u7684\u4e1c\u897f\uff0c\u4e09\u53f6\u8349\u5bb6\u65cf\u4e5f\u975e\u5e38\u91cd\u8981\u3002\n\u4ee5\u524d\u5bf9\u86fe\u5b50\u7684\u7814\u7a76\u5f80\u5f80\u96c6\u4e2d\u5728\u5b83\u4eec\u901a\u8fc7\u9f3b\u5b50\u6216\u9f3b\u5b50\u8fd0\u8f93\u82b1\u7c89\u7684\u80fd\u529b\u4e0a\u3002\u8fd9\u9879\u65b0\u5de5\u4f5c\u89c2\u5bdf\u4e86\u98de\u86fe\u5728\u8fdb\u98df\u65f6\u5750\u5728\u82b1\u6735\u4e0a\u65f6\u6536\u96c6\u5230\u7684\u82b1\u7c89\uff0c\u5b83\u4eec\u8eab\u4e0a\u6709\u660e\u663e\u7684\u6bdb\u8338\u8338\u7684\u8eab\u4f53\u3002\n\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c\u4ed6\u4eec\u7684\u7814\u7a76\u8868\u660e\uff0c\u86fe\u5b50\u8865\u5145\u4e86\u767d\u5929\u4f20\u7c89\u8005\u7684\u5de5\u4f5c\uff0c\u6709\u52a9\u4e8e\u4fdd\u6301\u690d\u7269\u79cd\u7fa4\u7684\u591a\u6837\u6027\u548c\u4e30\u5bcc\u6027\u3002\u5b83\u4eec\u4f5c\u4e3a\u751f\u7269\u591a\u6837\u6027\u7684\u4e00\u79cd\u540e\u5907\u5f62\u5f0f\uff0c\u53cd\u8fc7\u6765\u53c8\u652f\u6301\u4f5c\u7269\u4ea7\u91cf\u3002\n\u81ea\u4ece20\u4e16\u7eaa70\u5e74\u4ee3\u4ee5\u6765\uff0c\u98de\u86fe\u7684\u6570\u91cf\u6025\u5267\u4e0b\u964d\uff0c\u5b83\u4eec\u626e\u6f14\u7684\u91cd\u8981\u89d2\u8272\u53d7\u5230\u4e86\u8d8a\u6765\u8d8a\u5927\u7684\u5a01\u80c1\u3002\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u7531\u4e8e\u571f\u5730\u5229\u7528\u7684\u53d8\u5316\u548c\u6740\u866b\u5242\u4f7f\u7528\u91cf\u7684\u589e\u52a0\u3002\n\u8fd9\u5bf9\u4ee5\u98de\u86fe\u4e3a\u98df\u7684\u9e1f\u7c7b\u6709\u8fde\u9501\u53cd\u5e94\uff0c\u6bd4\u5982\u675c\u9e43\u3002\u6c83\u5c14\u987f\u535a\u58eb\u8bf4\uff0c\u5b83\u7684\u4e0b\u964d\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e0e\u86fe\u5b50\u7684\u51cf\u5c11\u6709\u5173\u3002\n\u8759\u8760\u4e5f\u4f1a\u4ee5\u86fe\u5b50\u4e3a\u98df\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0e\u5176\u4ed6\u751f\u7269\u7684\u8054\u7cfb\u4e5f\u5728\u51cf\u5c11\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u98df\u7269\u4f9b\u5e94--\u86fe\u5b50--\u4e5f\u5728\u51cf\u5c11\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u79cd\u8054\u7cfb\u6b63\u5728\u4e0a\u6f14\u3002\n\u5e2e\u52a9\u98de\u86fe\u5c06\u9700\u8981\u4f7f\u7528\u66f4\u5c11\u7684\u6740\u866b\u5242\uff0c\u5e76\u9f13\u52b1\u666f\u89c2\u4e2d\u66f4\u5e7f\u6cdb\u7684\u690d\u7269\u591a\u6837\u6027\u3002\n\u6211\u4eec\u53ea\u662f\u5728\u767d\u5929\u770b\u5230\u871c\u8702\uff0c\u6211\u4eec\u770b\u5230\u5b83\u4eec\u9020\u8bbf\u82b1\u6735\uff0c\u6240\u4ee5\u5728\u5de5\u4f5c\u65f6\uff0c\u5c31\u53ef\u89c1\u6027\u800c\u8a00\uff0c\u5b83\u4eec\u6709\u4e86\u66f4\u597d\u7684\u8f6e\u73ed\u3002\n\u4f46\u86fe\u5b50\u7684\u91cd\u8981\u6027\u4e1d\u6beb\u4e0d\u4e9a\u4e8e\u6b64\u3002\u6211\u8ba4\u4e3a\u63d0\u9ad8\u86fe\u5b50\u7684\u5f62\u8c61\u4ee5\u5e2e\u52a9\u5e7f\u5927\u516c\u4f17\u8ba4\u8bc6\u5230\u5b83\u4eec\u5728\u6211\u4eec\u7684\u751f\u6001\u4e2d\u626e\u6f14\u7684\u91cd\u8981\u89d2\u8272\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002", "note_en": "Long seen as annoying creatures that can leave holes in your clothes, moths have been badly misjudged, say scientists.\n New  research suggests they play a vital role as overnight pollinators of a wide range of flowers and plants.\n The study says that the moths&#39; transport networks are larger and more complex than those of daytime pollinators like bees.\n   Over the past decade, public anxiety about the role of our pollinators has focused squarely on bees.\n  The fall-off in their numbers, linked to changes in land and widespread use of pesticides, has helped raise environmental awareness of the critical role these creatures play in the food chain.\n  &#34;There&#39;s this big misconception that all moths come and eat my clothes. That&#39;s not what happens at all,&#34; said Dr Richard Walton, from University College London (UCL), the lead author of the new study.\n  &#34;Some of them happen to be visiting flowers and can be an important part of the pollination process.&#34;\n To find out how vital a part the moths play, Dr Walton and colleagues monitored moth activity around ponds in agricultural areas of Norfolk.\n They found that 45% of the moths they tested were transporting pollen, which originated from 47 different plant species, including several that were rarely visited by bees, hoverflies and butterflies.\n The scientists found that while bumblebees and honeybees are critically important, they tended to target the most prolific nectar and pollen sources. Not so with moths.\n &#34;From what we see from our work, moths tend to be generalists, meaning they&#39;re not specifically visiting a narrow group of flowers,&#34; said Dr Walton.\n &#34;They&#39;re kind of visiting any type of flower that they can access. These tend to be the open cup-shaped flowers like bramble, they can access things from the legume family, the clover family was also very important.&#34;\n  Previous studies on moths have tended to focus on their ability to transport pollen via their proboscis or nose. This new work looked at the pollen collected on the moths&#39; distinctly hairy bodies when they sit on flowers while feeding.\n  The researchers believe their study shows that moths complement the work of daytime pollinators and help keep plant populations diverse and abundant. They serve as a form of back-up for biodiversity, which in turn supports crop yields.\n The vital role played by the moths has come under increasing threat as they have suffered steep declines in numbers since the 1970s. This is largely due to changes in land use and the increasing use of pesticides.\n &#34;This has a knock-on effect for birds that feed on moths, such as the cuckoo. Its decline is kind of tied to moth declines,&#34; said Dr Walton.\n &#34;Bats will feed on moths as well, so there&#39;s ties to other creatures having declines in their own populations, because their food supply, the moths, are going down as well. You can see this kind of linkage play out.&#34;\n Helping the moths will require the use of less pesticide and encouraging a wider diversity of plants in the landscape.\n    &#34;We just see bees in the daytime and we see them visiting the flower so they&#39;ve got the better shift when when it comes to work, in terms of being visible.&#34;\n &#34;But moths are by no means less important. I think it&#39;s vital to raise the profile of moths to help the public at large see the important part they play in our ecology.&#34;", "posttime": "2020-05-14 15:08:52", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u53d1\u73b0,secret,\u98de\u86fe", "title": "\u7814\u7a76\u53d1\u73b0\uff0c\u86fe\u5b50\u4f5c\u4e3a\u91cd\u8981\u7684\u4f20\u7c89\u8005\u626e\u6f14\u7740\u201c\u79d8\u5bc6\u89d2\u8272\u201d", "title_en": "Moths Have 'Secret Role' As Crucial Pollinators, Research Finds", "transed": 1, "url": "https://www.bbc.com/news/science-environment-52630991", "via": "", "real_tags": ["\u53d1\u73b0", "secret", "\u98de\u86fe"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002070, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u8054\u90a6\u8c03\u67e5\u5c40\u610f\u5916\u6cc4\u9732\u4e86\u4e00\u540d\u6c99\u7279\u5916\u4ea4\u5b98\u7684\u540d\u5b57\uff0c\u8fd9\u540d\u5916\u4ea4\u5b98\u6d89\u5acc\u4e3a2001\u5e749\u670811\u65e5\u7684\u4e24\u540d\u52ab\u673a\u8005\u63d0\u4f9b\u652f\u6301\u3002\n\u5728\u8054\u90a6\u8c03\u67e5\u5c40\u53cd\u6050\u90e8\u95e8\u52a9\u7406\u5c40\u957f\u5409\u5c14\u00b7\u6851\u4f2f\u6069(Jill Sanborn)\u63d0\u4ea4\u7684\u4e00\u4efd\u8054\u90a6\u6cd5\u9662\u6587\u4ef6\u4e2d\uff0c\u8fd9\u540d\u5916\u4ea4\u5b98\u7684\u540d\u5b57\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u88ab\u5220\u6389\u4e86\uff0c\u53ea\u6709\u4e00\u6b21\u9664\u5916\u3002\u636e\u96c5\u864e\u65b0\u95fb\u5468\u4e8c\u62a5\u9053\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6851\u4f2f\u6069\u7684\u6587\u4ef6\u63d0\u5230\u4e86\u4e00\u540d\u66fe\u9a7b\u624e\u5728\u6c99\u7279\u9a7b\u7f8e\u56fd\u5927\u4f7f\u9986\u7684\u5916\u4ea4\u5b98\u540d\u53eb\u201c\u8d3e\u62c9\u201d(Jarrah)\u3002\n\u8fd9\u4e2a\u540d\u5b57\u6307\u7684\u662f1999\u5e74\u81f32000\u5e74\u5728\u6c99\u7279\u5927\u4f7f\u9986\u670d\u52a1\u7684\u7a46\u8428\u4f0a\u5fb7\u00b7\u827e\u54c8\u8fc8\u5fb7\u00b7\u8d3e\u62c9(Mussaed Ahmed al-Jarrah)\u3002\u6839\u636e\u524d\u8054\u90a6\u8c03\u67e5\u5c40\u7279\u5de5\u51ef\u745f\u7433\u00b7\u4ea8\u7279(Catherine Hunt)\u7684\u4e00\u4efd\u58f0\u660e\uff0cal-Jarrah\u201c\u8d1f\u8d23\u5b89\u7f6e\u4f0a\u65af\u5170\u4e8b\u52a1\u90e8\u5458\u5de5\uff0c\u5373\u9a7b\u624e\u5728\u7f8e\u56fd\u7684\u5bfc\u6e38\u548c\u5ba3\u4f20\u5458\uff0c\u5305\u62ec\u6cd5\u54c8\u5fb7\u00b7\u963f\u5c14\u00b7\u56fe\u7c73(Fahad Al Thumary)\u201d\u3002\u4ea8\u7279\u66fe\u5e2e\u52a9\u8fc79/11\u9047\u96be\u8005\u7684\u4e00\u4e9b\u5bb6\u5c5e\u3002\n\u963f\u5c14-\u56fe\u7c73\u662f\u4e00\u540d\u6c99\u7279\u795e\u804c\u4eba\u5458\uff0c\u66fe\u62c5\u4efb\u6d1b\u6749\u77f6\u4e00\u5ea7\u6e05\u771f\u5bfa\u7684\u4f0a\u739b\u76ee\u3002\u7f8e\u56fd\u8054\u90a6\u8c03\u67e5\u5c402012\u5e74\u53d1\u5e03\u7684\u62a5\u544a\u663e\u793a\uff0cAl-Thumyy\u548c\u53e6\u4e00\u4eba\u88ab\u6000\u7591\u53d7\u547d\u534f\u52a9\u4e24\u540d9\u00b711\u52ab\u673a\u8005\uff0c\u5c3d\u7ba1\u7279\u5de5\u65e0\u6cd5\u786e\u51ff\u5730\u8bc1\u660e\u8fd9\u4e00\u6000\u7591\u3002\n\u4e00\u4e9b9/11\u9047\u96be\u8005\u7684\u5bb6\u5c5e\u6293\u4f4f\u8fd9\u4e00\u62ab\u9732\u4f5c\u4e3a\u6c99\u7279\u653f\u5e9c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53c2\u4e0e\u4e86\u88ad\u51fb\u7684\u786e\u51ff\u8bc1\u636e\u3002\n\u8fd9\u4e9b\u5bb6\u5c5e\u7684\u53d1\u8a00\u4ebaBrett Eagleson\u5bf9\u96c5\u864e\u8868\u793a\uff1a\u201c\u8fd9\u8868\u660e\u653f\u5e9c\u5b8c\u5168\u63a9\u76d6\u4e86\u6c99\u7279\u7684\u53c2\u4e0e\u3002\u201dEagleson\u6307\u51fa\uff0c\u53f8\u6cd5\u90e8\u5df2\u57282019\u5e749\u6708\u901a\u77e5\u5bb6\u5c5eal-Jarrah\u7684\u8eab\u4efd\uff0c\u540c\u65f6\u7981\u6b62\u5411\u516c\u4f17\u62a5\u9053al-Jarrah\u7684\u540d\u5b57\u3002\n\u7f8e\u56fd\u4e0e\u6c99\u7279\u963f\u62c9\u4f2f\u4fdd\u6301\u7740\u8054\u76df\u5173\u7cfb\uff0c\u968f\u7740\u4e24\u56fd\u5728\u6574\u4e2a\u4e2d\u4e1c\u5730\u533a\u5411\u4f0a\u6717\u519b\u961f\u65bd\u52a0\u538b\u529b\uff0c\u8fd9\u79cd\u8054\u76df\u8fd1\u5e74\u6765\u6709\u6240\u52a0\u6df1\u3002\u6c99\u7279\u653f\u5e9c\u4e00\u518d\u5426\u8ba4\u5176\u4efb\u4f55\u4ee3\u8868\u53c2\u4e0e\u4e869/11\u52ab\u673a\u4e8b\u4ef6\u3002", "note_en": "The FBI has accidentally revealed the name of a Saudi diplomat who is suspected of directing support to two of the September 11, 2001, plane hijackers.\n In a federal court filing by Jill Sanborn, the assistant director of the FBI\u2019s counterterrorism division, the diplomat\u2019s name was redacted in all instances except one. In that instance, Sanborn\u2019s document refers to a diplomat formerly stationed at the Saudi embassy in the U.S. as \u201cJarrah,\u201d   Yahoo News reported on Tuesday.\n The name refers to Mussaed Ahmed al-Jarrah, who served at the Saudi embassy from 1999 to 2000. Al-Jarrah \u201cwas responsible for the placement of Ministry of Islamic Affairs employees known as guides and propagators posted to the United States, including Fahad Al Thumairy,\u201d according to a declaration by former FBI agent Catherine Hunt, who has assisted some of the families of 9/11 victims.\n Al-Thumairy is a Saudi cleric who served as imam of a Los Angeles mosque. FBI reports released in 2012 revealed that Al-Thumairy and another individual were suspected of being \u201ctasked\u201d with aiding two 9/11 hijackers, although agents could not prove the suspicion conclusively.\n Some families of 9/11 victims have seized on the disclosure as hard evidence that the Saudi government had some level of involvement in the attacks.\n \u201cThis shows there is a complete government cover-up of the Saudi involvement,\u201d Brett Eagleson, a spokesman for the families, told\u00c2\u00a0 Yahoo. Eagleson noted that the Justice Department had informed families of al-Jarrah\u2019s identity in September 2019, it had done so while forbidding the reporting of al-Jarrah\u2019s name to the public.\n The U.S. maintains an alliance with Saudi Arabia that has deepened in recent years as the two countries have placed pressure on Iranian forces throughout the Middle East. The Saudi government has repeatedly denied that any of its representatives were involved in the 9/11 hijackings.", "posttime": "2020-05-14 14:08:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d89\u5acc,accidentally,al", "title": "FBI\u610f\u5916\u6cc4\u9732\u6d89\u5acc\u652f\u63019/11\u7684\u6c99\u7279\u5916\u4ea4\u5b98\u59d3\u540d", "title_en": "FBI Accidentally Reveals Name of Saudi Diplomat Suspected of Supporting 9/11", "transed": 1, "url": "https://news.yahoo.com/fbi-accidentally-reveals-name-saudi-144557177.html", "via": "", "real_tags": ["\u6d89\u5acc", "al"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002069, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u60a8\u5728\u7f51\u7ad9\u4e2d\u5bfc\u822a\u65f6\uff0c\u6b64\u7f51\u7ad9\u4f7f\u7528Cookie\u6765\u6539\u5584\u60a8\u7684\u4f53\u9a8c\u3002\u5728\u8fd9\u4e9bcookie\u4e2d\uff0c\u88ab\u5f52\u7c7b\u4e3a\u5fc5\u8981\u7684cookie\u5b58\u50a8\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u4e0a\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u4e8e\u7f51\u7ad9\u7684\u57fa\u672c\u529f\u80fd\u7684\u5de5\u4f5c\u81f3\u5173\u91cd\u8981\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u7b2c\u4e09\u65b9cookie\u6765\u5e2e\u52a9\u6211\u4eec\u5206\u6790\u548c\u4e86\u89e3\u60a8\u5982\u4f55\u4f7f\u7528\u672c\u7f51\u7ad9\u3002\u53ea\u6709\u7ecf\u8fc7\u60a8\u7684\u540c\u610f\uff0c\u8fd9\u4e9bCookie\u624d\u4f1a\u5b58\u50a8\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u4e2d\u3002\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u9000\u51fa\u8fd9\u4e9bcookie\u3002\u4f46\u662f\u9009\u62e9\u4e0d\u4f7f\u7528\u8fd9\u4e9bcookie\u53ef\u80fd\u4f1a\u5bf9\u60a8\u7684\u6d4f\u89c8\u4f53\u9a8c\u4ea7\u751f\u5f71\u54cd\u3002", "note_en": "This website uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.", "posttime": "2020-05-14 13:39:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u5f00\u53d1,\u534e\u4e3a,huawei,cookie", "title": "\u534e\u4e3a\u5f00\u53d1\u56e2\u961f\u90ae\u5bc4\u5e26\u6709\u540e\u95e8\u7684Linux\u8865\u4e01\uff0c\u534e\u4e3a\u5426\u8ba4\u53c2\u4e0e", "title_en": "Huawei dev team mails a Linux patch with a backdoor, Huawei denies involvement", "transed": 1, "url": "https://androidrookies.com/huawei-dev-team-sends-a-buggy-hksp-patch-with-backdoor-to-linux-foundation/", "via": "", "real_tags": ["linux", "\u5f00\u53d1", "\u534e\u4e3a", "huawei", "cookie"]}, {"category": "", "categoryclass": "", "imagename": "4b7d9ecba1881eda1176c27aaa7da297.png", "infoid": 1002068, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\nBosque\u7f16\u7a0b\u8bed\u8a00\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\u4e00\u9879\u7a81\u7834\u6027\u7814\u7a76\u9879\u76ee\u3002Bosque\u540c\u65f6\u652f\u6301\u73b0\u4ee3\u4e91\u5f00\u53d1\u4eba\u5458\u671f\u671b\u7684\u9ad8\u751f\u4ea7\u529b\u5f00\u53d1\u4f53\u9a8c(\u4f8b\u5982\u6765\u81eaTypeScript/Node\u5806\u6808)\uff0c\u540c\u65f6\u8fd8\u63d0\u4f9b\u8d44\u6e90\u9ad8\u6548\u4e14\u53ef\u9884\u6d4b\u7684\u8fd0\u884c\u65f6\uff0c\u5176\u6027\u80fd\u914d\u7f6e\u7c7b\u4f3c\u4e8e\u672c\u673aC++\u5e94\u7528\u7a0b\u5e8f\u3002\u9664\u4e86\u7528\u4e00\u79cd\u8bed\u8a00\u652f\u6301\u8fd9\u4e9b\u4ee5\u524d\u76f8\u4e92\u51b2\u7a81\u7684\u76ee\u6807\u4e4b\u5916\uff0cBosque\u8fd8\u5e26\u6765\u4e86\u524d\u6240\u672a\u6709\u7684\u5de5\u5177\u751f\u6001\u7cfb\u7edf\uff0c\u5305\u62ec\u96f6\u5de5\u4f5c\u9a8c\u8bc1\u3001\u7b26\u53f7\u6d4b\u8bd5\u3001\u4f9d\u8d56\u9879\u7ba1\u7406\u9a8c\u8bc1\u3001\u65f6\u95f4\u65c5\u884c\u8c03\u8bd5\u7b49\u3002\n\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u548c\u5de5\u5177\u90e8\u5206\u63d0\u4f9b\u4e86\u5c0f\u7684\u4ee3\u7801\u793a\u4f8b\u548c\u72ec\u7279\u7684\u535a\u65af\u514b\u5de5\u5177\u3002\u8bed\u8a00\u6982\u8ff0\u90e8\u52060\u4e2d\u63d0\u4f9b\u4e86\u535a\u65af\u514b\u8bed\u663e\u8457\u548c/\u6216\u72ec\u7279\u529f\u80fd\u7684\u6982\u8981\u3002\u6709\u5173\u8be5\u8bed\u8a00\u5982\u4f55\u5de5\u4f5c\u548c\u6d41\u52a8\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7b80\u5355tic-tac-toe\u7a0b\u5e8f\u7684\u4ee3\u7801\u3002\n\u6ce8\u610f\uff1a\u6b64\u5b58\u50a8\u5e93\u548c\u4ee3\u7801\u76ee\u524d\u4ecd\u5904\u4e8e\u5b9e\u9a8c\u9636\u6bb5\u3002\u8fd9\u610f\u5473\u7740\u8be5\u8bed\u8a00\u9700\u8981\u4fee\u6539\uff0c\u5b58\u5728\u9519\u8bef\u548c\u529f\u80fd\u7f3a\u5931\uff0c\u6027\u80fd\u53d7\u5230\u9650\u5236\u3002\n2020\u5e745\u6708\uff1a\u6211\u4eec\u5c06\u57285\u670814\u65e5\u4e3e\u529e\u4e00\u573a\u73b0\u573a\u95ee\u7b54\u7684\u535a\u65af\u514b\u7f51\u7edc\u7814\u8ba8\u4f1a(\u6ce8\u518c\u8bf7\u70b9\u51fb\u6b64\u5904)\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u80fd\u53c2\u52a0\u73b0\u573a\u6d3b\u52a8\u7684\u4eba\uff0c\u4e5f\u5c06\u63d0\u4f9b\u70b9\u64ad\u5f55\u5236\u3002\n\u51fd\u6570add2(x\uff1aint\uff0cy\uff1aint)\uff1aint{return x+y\uff1b}add2(2\uff0c3)//5add2(x=2\uff0cy=3)//5add2(y=2\uff0c5)//7\u3002\n\u51fd\u6570doit(tup\uff1a[int\uff0cbool]\uff0crec\uff1a{f\uff1astring\uff0cg\uff1aint})\uff1aint{return tup.0+rec.g\uff1b}doit([1\uff0cfalse]\uff0c{f=&#34\uff1bok&#34\uff1b\uff0cg=3})//4\n\u51fd\u6570sign(x\uff1f\uff1aint)\uff1aint{var y\uff1aint\uff1bif(x==None||x==0){y=0\uff1b}Else{y=(x&gt\uff1b0)\uff1f1\uff1a-1\uff1b}return y\uff1b}sign(5)//1sign(-5)//-1sign()//0\u3002\nConcept WithName{Constant$Name\uff01=&#34\uff1b&#34\uff1b\uff1b\u5b57\u6bb5\u540d\u79f0\uff1aString\uff1b}Concept Greeting{\u62bd\u8c61\u65b9\u6cd5sayHello()\uff1aString\uff1b\u865a\u65b9\u6cd5sayGoodbai()\uff1aString{return&#34\uff1b\u544a\u522b&#34\uff1b\uff1b}}\u5b9e\u4f53GenericGreeting\u63d0\u4f9b\u95ee\u5019\u8bed{const\u5b9e\u4f8b\uff1aGenericGreeting=GenericGreeting@{}\uff1b\u8986\u76d6\u65b9\u6cd5sayHello()\uff1aString{return&#34\uff1bhello world&#34\uff1b\uff1b}}\u5b9e\u4f53NamedGreeting{const instance\uff1aGenericGreeting=GenericGreeting@{}\uff1b\u8986\u76d6\u65b9\u6cd5sayHello()\uff1astring{return&#34\uff1bhello world&#34\uff1b\uff1b}}\u5b9e\u4f53NamedGreeting\u3002&#34\uff1b\uff0cthis.name)\uff1b}}GenericGreeting@{}-&gt\uff1bsayhello()//&#34\uff1bhello world&#34\uff1bGenericGreeting\uff1a\uff1ainstance-&gt\uff1bsayHello()//&#34\uff1bhello world&#34\uff1bNamedGreeting@{}-&gt\uff1bsayHello()//\u7c7b\u578b\u9519\u8bef&\u6ca1\u6709\u4e3a&#34\uff1bName&#34\uff1bfieldNamedGreeting@{name=&#34\uff1b&#34\uff1b}-&gt\uff1bsayHello()//\u56fa\u5b9a\u9519\u8bef\u540d\u79f0Greeting@{Name=&#34\uff1bbob&#34\uff1b}-&gt\uff1bsayhello()//&34\uff1bhello bob&#34\uff1b\ntyfinf Letter=/^\\w$/\uff1btyfinf digit=/^\\d$/\uff1b\u51fd\u6570fss(s1\uff1aSafeString&lt\uff1bdigit&gt\uff1b)\uff1abool{return s1-&gt\uff1bstring()==&#34\uff1b3&#34\uff1b\uff1b}digit\uff1a\uff1aAccept(&#34\uff1ba&#34\uff1b)\uff1b//false seDigit\uff1a\uff1aAccept(&#34\uff1b2&#34\uff1b)\uff1b//truefss(&#34\uff1b1234&\u3002\u7528\u6cd5\uff1aFROM(&#34\uff1ba&#34\uff1b))//\u7c7b\u578b\u9519\u8bef\u4e0d\u517c\u5bb9\u5b89\u5168\u5b57\u7b26\u4e32\u7c7b\u578bfss(\u6570\u5b57&#39\uff1ba&#39\uff1b)//\u7c7b\u578b\u9519\u8bef&#39\uff1ba&#39\uff1b\u4e0e\u6570\u5b57fss(SafeString&lt\uff1bDigit&gt\uff1b\uff1a\uff1afrom(&#34\uff1ba&#34\uff1b))\u4e0d\u517c\u5bb9//\u8fd0\u884c\u65f6\u9519\u8bef&#39\uff1ba&#39\uff1b\u4e0eDigitfss(SafeString&lt\uff1bDigit&gt\uff1b\uff1a\uff1afrom(&#34\uff1b3&#34\uff1b))\u4e0d\u517c\u5bb9//TRUE\u3002\n\u5b9e\u4f53StatusCode\u63d0\u4f9b\u53ef\u89e3\u6790\u7684{field code\uff1aint\uff1bfield name\uff1astring\uff1bOverride static tryParse(name\uff1astring)\uff1aresult&lt\uff1bStatusCode\uff0cstring&gt\uff1b{return switch(Name){case&#34\uff1bIO&#34\uff1b=&gt\uff1bok(StatusCode@{1\uff0cname})case&#34\uff1bNetwork&#34\uff1b=&gt\uff1bok(StatusCode@{2\uff0cname})case_=&gt\uff1bErr(&#34\uff1b\u672a\u77e5\u3002)\uff1abool{Return s==StatusCode&#39\uff1bIO&#39\uff1b\uff1b}isIOCode(&#34\uff1bIO&#34\uff1b)\uff1b//\u7c7b\u578b\u9519\u8bef\u4e0d\u662fStringOf&lt\uff1bStatusCode&gt\uff1bisIOCode(StatusCode&#39\uff1bInput&#39\uff1b)//\u7c7b\u578b\u9519\u8bef\u4e0d\u662f\u6709\u6548\u7684\u72b6\u6001\u4ee3\u7801\u5b57\u7b26\u4e32//\u8fd0\u884c\u65f6\u9519\u8bef\u4e0d\u662f\u6709\u6548\u7684\u72b6\u6001\u4ee3\u7801\u5b57\u7b26\u4e32IOCode(StatusCode&39\uff1bAssert&39\uff1b)//FalseIOCode(stringisIOCode(StringOf&lt\uff1bStatusCode&gt\uff1b\uff1a\uff1afrom(&#34\uff1bInput&#34\uff1b))of&lt\uff1bStatusCode&gt\uff1b\uff1a\uff1aFROM(&#34\uff1bIO&#34\uff1b))//trulet EC\uff1aStatusCode=StatusCode@&#39\uff1bIO&#39\uff1bAssert(ec.code==1)\uff1b//true\u3002\n\u5b9e\u4f53\u4eba{field name\uff1astring\uff1b}\u51fd\u6570foo(arg\uff1f\uff1a{f\uff1aint\uff0cn\uff1f\uff1astring}|string|Person)\uff1astring{if(arg==None){return&#34\uff1bBlank&#34\uff1b\uff1b}Else{Return Switch(Arg){type Record=&gt\uff1bARG.N\uff1f|&#34\uff1bBlank&#34\uff1btype String=&gt\uff1barg type Person=&gt\uff1barg.name}\uff1b}}foo()//&#34\u3002foo(\u65e0)//\u7c7b\u578b\u9519\u8bef-\u65e0\u4e0d\u5141\u8bb8foo(&#34\uff1bBob&#34\uff1b)//Bobfoo(Person@{name=&#34\uff1bBob&#34\uff1b})//Bobfoo({f=5})//&#34\uff1b\u7a7a\u767d&#34\uff1bfoo({f=1\uff0cn=&#34\uff1bBob&#34\uff1b})//&#34\uff1bBob&#34\uff1bfoo({g=1\uff0cn=&#34\u3002\n\u5b9e\u4f53\u52a8\u7269{\u4e0d\u53d8$Said\uff01=&#34\uff1b&#34\uff1b\uff1b\u5b57\u6bb5\u8868\u793a\uff1aString\uff1b}\u51fd\u6570createAnimal(\u6807\u8bed\uff1aString)\uff1aAnimal{return Animal@{say=catchPhrase}\uff1b}\u51fd\u6570createAnimal(\u6807\u8bed\uff1aString)\uff1a\u52a8\u7269\u9700\u8981\u6807\u8bed\uff01=&#34\uff1b&#34\uff1b\uff1b{return Animal@{say=\u6807\u8bed}\uff1b}\u51fd\u6570createAnimalPreSafe(\u6807\u8bed\uff1aString)\uff1a\u52a8\u7269\u9700\u8981\u91ca\u653e\u6807\u8bed\uff01=\u3002\u5165\u53e3\u70b9\u51fd\u6570getSays(Animal\uff1aString\uff0cCatchPhase\uff1aString)\uff1aResult&lt\uff1bString\uff0cErrData\uff1f&gt\uff1b\u6216\u8fd4\u56de\u7ed3\u679c&lt\uff1bString\uff0cErrData&gt\uff1b\uff1a\uff1aErr({msg=&#34\uff1b\u65e0\u6548\u52a8\u7269&#34\uff1b})\uff1b\u9a8c\u8bc1\u4e3b\u9898\u77ed\u8bed\uff01=&#34\uff1b&#34\uff1b\u6216\u8fd4\u56de\u7ed3\u679c&lt\uff1bString\uff0cErrData&gt\uff1b\uff1a\uff1aErr(\u3002\uff0cAnimal\uff0c&#34\uff1bsay&#34\uff1b\uff0ccreateAnimal\uff1a\uff1a(catchPhrase).says)\uff1b}createAnimal(&#34\uff1bwoof Woof&34\uff1b)//\u786e\u5b9a\u603b\u662f\u5728debugcreateAnimalPre(&#34\uff1b&#34\uff1b)//\u5728debugcreateAnimalPre(&#34\uff1b&#34\uff1b)//\u5728\u8c03\u8bd5\u4e2d\u4e0d\u901a\u8fc7\u524d\u63d0\u6761\u4ef6*\u800c\u4e0d\u662f*RelasecreateAnimalPreSafe(&#34\uff1b&#34\uff1b)//\u5728\u6240\u6709\u6784\u5efa\u98ce\u683c\u4e2d\u90fd\u4e0d\u901a\u8fc7\u524d\u63d0\u6761\u4ef6(&#34\uff1bDog&#34\uff1b\u5b57\u7b26\u4e32\uff0cErrData&&gt;\uff1b@{value=&#34\uff1b}getSays(&#34\uff1b&#34\uff1b\uff0c&#34\uff1bWoof&34\uff1b)//err&lt\uff1b\u5b57\u7b26\u4e32\uff0cErrData&gt\uff1b@{error={msg=&#34\uff1b\u65e0\u6548\u52a8\u7269&34\uff1b}}getSays(&#34\uff1b\u72d7&#34\uff1b\uff0c&#34\uff1b&#34\uff1b)//err&lt\uff1b\n\u535a\u65af\u514b\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f3a\u5927\u7684\u65b0\u65b9\u6cd5\u6765\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5355\u5143\u6d4b\u8bd5\u662f\u786e\u4fdd\u4ee3\u7801\u6309\u9884\u671f\u5de5\u4f5c\u5e76\u9632\u6b62\u5728\u6dfb\u52a0\u65b0\u529f\u80fd\u6216\u4fee\u590d\u9519\u8bef\u65f6\u610f\u5916\u66f4\u6539\u884c\u4e3a\u7684\u597d\u65b9\u6cd5\u3002\u4f46\u662f\uff0c\u7f16\u5199\u548c\u7ef4\u62a4\u5927\u91cf\u6d4b\u8bd5\u53ef\u80fd\u662f\u4e00\u9879\u4e4f\u5473\u4e14\u8017\u65f6\u7684\u4efb\u52a1\u3002\u4e3a\u5e2e\u52a9\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0cBosque\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b26\u53f7\u6d4b\u8bd5\u5de5\u5177\uff0c\u8be5\u5de5\u5177\u589e\u5f3a\u4e86\u5355\u5143\u6d4b\u8bd5\uff0c\u5e76\u4e3a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6545\u969c\u7684\u9519\u8bef\u63d0\u4f9b\u4e86\u5f88\u9ad8\u7684\u8986\u76d6\u7387--\u8fd9\u4e9b\u9519\u8bef\u8981\u4e48\u662f\u7531\u4e8e\u5185\u7f6e\u8bed\u8a00\u9519\u8bef\uff0c\u8981\u4e48\u662f\u7531\u4e8e\u5931\u8d25\u7684\u7528\u6237\u63d0\u4f9b\u7684Pre/Post/Ininvaria\n\u547d\u540d\u7a7a\u95f4NSMain\uff1b\u5168\u5c40\u64cd\u4f5c\uff1aset&lt\uff1bstring&gt\uff1b=set&lt\uff1bstring&gt\uff1b@{&#34\uff1bNegate&#34\uff1b\uff0c&#34\uff1badd&#34\uff1b\uff0c&#34\uff1bsub&#34\uff1b}\uff1b\u5165\u53e3\u70b9\u51fd\u6570processOp(op\uff1astring\uff0carg1\uff1aint\uff0carg2\uff1aint\uff1f)\uff1aint\u9700\u8981\u91ca\u653eNSMain\uff1a\uff1aops-&gt\uff1bhas(Op)\uff1b//\u9700\u8981\u91ca\u653e(op=&#34\uff1badd\u3002{if(op==&#34\uff1b\u5426\u5b9a&#34\uff1b){Return-arg1\uff1b}Else{assert(arg2\uff01=None)\uff1bif(op=&#34\uff1badd&#34\uff1b){return arg1+arg2\uff1b}Else{return arg1-arg2\uff1b}\u3002\n\u5047\u8bbe\u6b64\u4ee3\u7801\u4f4d\u4e8e\u540d\u4e3aprocess_op.bsq\u7684\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u68c0\u67e5\u9519\u8bef\uff1a\n\u5c06\u62a5\u544a\u5f53op==&#34\uff1bNegate&#34\uff1b\u548carg2==NONE\u65f6\u53ef\u80fd\u51fa\u73b0\u9519\u8bef\u3002\u6ce8\u610f\uff0c\u6d4b\u8bd5\u4eba\u5458\u77e5\u9053\u524d\u7f6e\u6761\u4ef6REQUIRED_ops.has(Op)\uff0c\u56e0\u6b64\u6ca1\u6709\u751f\u6210\u4efb\u4f55\u865a\u5047\u7684\u5931\u8d25\u6d4b\u8bd5\u8f93\u5165(\u4f8b\u5982op=&#34\uff1b&#34\uff1b)\u3002\n\u53d6\u6d88\u6ce8\u91ca\u7b2c\u4e8c\u4e2aREQUIES\u884c\u544a\u8bc9\u6d4b\u8bd5\u4eba\u5458API\u5b9a\u4e49\u6392\u9664\u4e86\u6b64\u9519\u8bef\u548c\u7c7b\u4f3c\u7684\u9519\u8bef\uff0c\u91cd\u65b0\u8fd0\u884c\u6d4b\u8bd5\u7a0b\u5e8f\u73b0\u5728\u5c06\u62a5\u544a\u4ee3\u7801\u5df2\u9a8c\u8bc1\u5230\u6781\u9650\u3002\n\u6ce8\u610f\uff1a\u6211\u4eec\u5efa\u8bae\u5728\u5165\u53e3\u70b9\u51fd\u6570\u4e0a\u6307\u5b9a\u524d\u63d0\u6761\u4ef6\u603b\u662f\u9009\u4e2d\u7684\uff0c\u9700\u8981\u91ca\u653e\u7684\uff0c\u4ee5\u786e\u4fdd\u8fd9\u4e9b\u5916\u90e8\u516c\u5f00\u7684API\u7aef\u70b9\u4e0d\u4f1a\u88ab\u8bef\u7528\u3002\n\u4e3a\u4e86\u63d0\u4f9b\u6700\u4f73\u6027\u80fd\uff0cBosque\u652f\u6301\u901a\u8fc7ExeGen\u5de5\u5177\u751f\u6210\u72ec\u7acb\u7684\u547d\u4ee4\u884c\u53ef\u6267\u884c\u6587\u4ef6\u3002\u6b64\u5de5\u5177\u548cBosque\u8fd0\u884c\u65f6\u7684\u8bbe\u8ba1\u65e8\u5728\u63d0\u4f9b\uff1a\n\u5c3d\u53ef\u80fd\u76f4\u63a5\u5c06\u542f\u52a8\u903b\u8f91\u9884\u7f16\u8bd1\u4e3a\u5e38\u91cf\u503c\uff0c\u5e76\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u5f00\u59cb\u5904\u7406\u7528\u6237\u8f93\u5165\u6240\u9700\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4ece\u800c\u52a0\u5feb\u51b7\u542f\u52a8\u54cd\u5e94\u65f6\u95f4\u3002\n\u968f\u65f6\u95f4\u548c\u53ef\u80fd\u7684\u8f93\u5165\u4fdd\u6301\u7a33\u5b9a\u7684\u6267\u884c\u884c\u4e3a\u3002GC\u662f\u4e00\u79cd\u65b0\u9896\u5f15\u7528\u8ba1\u6570\uff0c\u5177\u6709\u6025\u5207\u7684\u81ea\u7531\u5b9e\u73b0\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u5185\u5b58\u5360\u7528\u5e76\u9632\u6b62\u4efb\u4f55\u4e0d\u786e\u5b9a\u7684GC\u6296\u52a8\u3002\n\u8fd0\u884c\u5e93\u672c\u8eab\u5bf9Set/Map\u4f7f\u7528\u6392\u5e8f\u7684\u5bb9\u5668\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u6700\u5c0f\u5316\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u64cd\u4f5c\u6210\u672c\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5e76\u9632\u6b62\u75c5\u6001\u884c\u4e3a(\u5982\u6781\u7aef\u7684\u6563\u5217\u4ee3\u7801\u51b2\u7a81)\u3002\n\u4f7f\u7528[TODO]\u6807\u5fd7\u53ef\u4ee5\u8fdb\u884c\u5b89\u5168\u9012\u5f52\u3002\u8fd9\u5c06\u9012\u5f52\u51fd\u6570\u7f16\u8bd1\u6210\u4f7f\u7528\u5e38\u91cf\u5806\u6808\u7a7a\u95f4\u7684CPS\u5f62\u5f0f\uff0c\u6d88\u9664\u4e86\u4efb\u4f55\u53ef\u80fd\u7684\u5806\u6808\u5916\u95ee\u9898\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u5728\u6240\u6709\u8c03\u8bd5\u7248\u672c\u4e2d\u4fdd\u7559\u5b8c\u6574\u7684\u8c03\u7528\u5806\u6808\u3002\n\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u7528\u6cd5\u662f\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u540d\u4e3a&#34\uff1bmax.bsq&#34\uff1b\u7684\u6587\u4ef6\uff1a\n\u547d\u540d\u7a7a\u95f4NSMain\uff1b\u5165\u53e3\u70b9\u51fd\u6570main(x\uff1aint\uff0cy\uff1aint)\uff1aint{return(x&gt\uff1by)\uff1fX\uff1aY\uff1b}\u3002\n\u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u751f\u6210max.exe(\u5728Windows\u53ef\u6267\u884c\u6587\u4ef6\u4e0a)\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8c03\u7528\u8be5\u6587\u4ef6\uff1a\nBosque\u9879\u76ee\u76ee\u524d\u7684\u91cd\u70b9\u662f\u6838\u5fc3\u8bed\u8a00\u8bbe\u8ba1\u3002\u56e0\u6b64\uff0c\u4e0d\u652f\u6301\u6253\u5305\u3001\u90e8\u7f72\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u7b49\u3002\nimpl\u76ee\u5f55\u5305\u542b\u5f15\u7528\u5b9e\u73b0\u89e3\u6790\u5668\u3001\u7c7b\u578b\u68c0\u67e5\u5668\u3001\u89e3\u91ca\u5668\u548c\u547d\u4ee4\u884c\u8fd0\u884c\u5668\u3002\u5728\u6b64\u76ee\u5f55\u4e2d\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6784\u5efa\u5e76\u6d4b\u8bd5Bosque\u53c2\u8003\u5b9e\u73b0\uff1a\n\u6ce8\u610f\uff1aZ3\u5b9a\u7406\u8bc1\u660e\u5668\u662f\u901a\u8fc7GIT LFS\u5728repo\u4e2d\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u4f9d\u8d56\u9879\u63d0\u4f9b\u7684\u3002\u8981\u786e\u4fdd\u8fd9\u4e9b\u90fd\u5b58\u5728\uff0c\u60a8\u9700\u8981\u5b89\u88c5git LFS\uff0c\u8fd0\u884cgit LFS install\u6765\u8bbe\u7f6e\u6240\u9700\u7684\u94a9\u5b50\uff0c\u7136\u540e\u62c9\u5165\u3002\n\u8be5\u5b58\u50a8\u5e93\u4e3aBosque\u8bed\u8a00\u63d0\u4f9b\u57fa\u672c\u7684Visual Studio\u4ee3\u7801IDE\u652f\u6301(\u5f53\u524d\u4ec5\u9650\u4e8e\u8bed\u6cd5\u548c\u5927\u62ec\u53f7\u7a81\u51fa\u663e\u793a)\u3002\u5b89\u88c5\u9700\u8981\u624b\u52a8\u5c06\u5b8c\u6574\u7684Bosque-Language-Tools/\u6587\u4ef6\u5939\u590d\u5236\u5230\u60a8\u7684\u7528\u6237.vscode/tensions/\u76ee\u5f55\u4e2d\uff0c\u7136\u540e\u91cd\u65b0\u542f\u52a8VSCode\u3002\n\u6b64\u9879\u76ee\u5df2\u91c7\u7528Microsoft\u5f00\u653e\u6e90\u4ee3\u7801\u51c6\u5219\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u884c\u4e3a\u51c6\u5219\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\uff0c\u6216\u8054\u7cfbopencode@microsoft.com\u63d0\u51fa\u4efb\u4f55\u5176\u4ed6\u95ee\u9898\u6216\u610f\u89c1\u3002", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n       The Bosque programming language is a breakthrough research project from   Microsoft Research. Bosque simultaneously supports a high productivity development experience expected by modern cloud developers, coming from say a TypeScript/Node stack, while also providing a resource efficient and predictable runtime with a performance profile similar to a native C++ application. Beyond supporting these, previously conflicting objectives in one language, Bosque also brings an unprecedented tooling ecosystem including zero-effort verification, symbolic testing, dependency management validation, time-travel debugging, and more.\n Small samples of code and unique Bosque tooling are below in the  Code Snippets and  Tooling sections. A rundown of notable and/or unique features in the Bosque language is provided in the  language overview section 0.For a look at how the language works and flows  in the large please see the code for a  simple tic-tac-toe program.\n Note: This repository and code are currently still experimental. This means that the language is subject to revision, there are bugs and missing functionality, and the performance is limited.\n  May 2020: We will be running a Bosque Webinar with Live Q&amp;A on May 14th (registration is  here). An on demand recording will be available as well for those that cannot make the live event.\n     function add2(x: Int, y: Int): Int { return x + y;}add2(2, 3) //5add2(x=2, y=3) //5add2(y=2, 5) //7\n    function doit(tup: [Int, Bool], rec: {f: String, g: Int}): Int { return tup.0 + rec.g;}doit([1, false], {f=&#34;ok&#34;, g=3}) //4\n  function sign(x?: Int): Int { var y: Int; if(x == none || x == 0) { y = 0; } else { y = (x &gt; 0) ? 1 : -1; } return y;}sign(5) //1sign(-5) //-1sign() //0\n  concept WithName { invariant $name != &#34;&#34;; field name: String;}concept Greeting { abstract method sayHello(): String; virtual method sayGoodbye(): String { return &#34;goodbye&#34;; }}entity GenericGreeting provides Greeting { const instance: GenericGreeting = GenericGreeting@{}; override method sayHello(): String { return &#34;hello world&#34;; }}entity NamedGreeting provides WithName, Greeting { override method sayHello(): String { return String::concat(&#34;hello&#34;, &#34; &#34;, this.name); }}GenericGreeting@{}-&gt;sayHello() //&#34;hello world&#34;GenericGreeting::instance-&gt;sayHello() //&#34;hello world&#34;NamedGreeting@{}-&gt;sayHello() //type error no value provided for &#34;name&#34; fieldNamedGreeting@{name=&#34;&#34;}-&gt;sayHello() //invariant errorNamedGreeting@{name=&#34;bob&#34;}-&gt;sayHello() //&#34;hello bob&#34;\n  typedef Letter = /^\\w$/;typedef Digit = /^\\d$/;function fss(s1: SafeString&lt;Digit&gt;): Bool { return s1-&gt;string() == &#34;3&#34;;}Digit::accepts(&#34;a&#34;); //falseDigit::accepts(&#34;2&#34;); //truefss(&#34;1234&#34;) //type error String is not a SafeStringfss(SafeString&lt;Letter&gt;::from(&#34;a&#34;)) //type error incompatible SafeString typesfss(Digit&#39;a&#39;) //type error &#39;a&#39; is incompatible with Digit fss(SafeString&lt;Digit&gt;::from(&#34;a&#34;)) //runtime error &#39;a&#39; is incompatible with Digitfss(SafeString&lt;Digit&gt;::from(&#34;3&#34;)) //true\n entity StatusCode provides Parsable { field code: Int; field name: String; override static tryParse(name: String): Result&lt;StatusCode, String&gt; { return switch(name) { case &#34;IO&#34; =&gt; ok(StatusCode@{1, name}) case &#34;Network&#34; =&gt; ok(StatusCode@{2, name}) case _ =&gt; err(&#34;Unknown code&#34;) }; }}function isIOCode(s: StringOf&lt;StatusCode&gt;): Bool { return s == StatusCode&#39;IO&#39;;}isIOCode(&#34;IO&#34;); //type error not a StringOf&lt;StatusCode&gt;isIOCode(StatusCode&#39;Input&#39;) //type error not a valid StatusCode stringisIOCode(StringOf&lt;StatusCode&gt;::from(&#34;Input&#34;)) //runtime error not a valid StatusCode stringisIOCode(StatusCode&#39;Assert&#39;) //falseisIOCode(StringOf&lt;StatusCode&gt;::from(&#34;IO&#34;)) //truelet ec: StatusCode = StatusCode@&#39;IO&#39;;assert(ec.code == 1); //true\n  entity Person { field name: String; }function foo(arg?: {f: Int, n?: String} | String | Person): String { if(arg == none) { return &#34;Blank&#34;; } else { return switch(arg) { type Record =&gt; arg.n ?| &#34;Blank&#34; type String =&gt; arg type Person =&gt; arg.name }; }}foo() //&#34;Blank&#34;foo(none) //Type error - none not allowedfoo(&#34;Bob&#34;) //Bobfoo(Person@{name=&#34;Bob&#34;}) //Bobfoo({f=5}) //&#34;Blank&#34;foo({f=1, n=&#34;Bob&#34;}) //&#34;Bob&#34;foo({g=1, n=&#34;Bob&#34;}) //Type error - Missing f property\n  entity Animal { invariant $says != &#34;&#34;; field says: String;}function createAnimal(catchPhrase: String): Animal{ return Animal@{says=catchPhrase};}function createAnimal(catchPhrase: String): Animal requires catchPhrase != &#34;&#34;;{ return Animal@{says=catchPhrase};}function createAnimalPreSafe(catchPhrase: String): Animal requires release catchPhrase != &#34;&#34;;{ return Animal@{says=catchPhrase};}typedef ErrData = {msg: String, data?: Any};entrypoint function getSays(animal: String, catchPhrase: String): Result&lt;String, ErrData?&gt; validate animal != &#34;&#34; or return Result&lt;String, ErrData&gt;::err({ msg=&#34;Invalid animal&#34; }); validate catchPhrase != &#34;&#34; or return Result&lt;String, ErrData&gt;::err({ msg=&#34;Invalid catchPhrase&#34; });{ return String::concat(&#34;The &#34;, animal, &#34; says &#34;, createAnimal::(catchPhrase).says);}createAnimal(&#34;woof woof&#34;) //ok alwayscreateAnimal(&#34;&#34;) //fails invariant in debugcreateAnimalPre(&#34;&#34;) //fails precondition in debug *but not* releasecreateAnimalPreSafe(&#34;&#34;) //fails precondition in all build flavorsgetSays(&#34;dog&#34;, &#34;woof&#34;) //Ok&lt;String, ErrData&gt;@{value=&#34;The dog says woof&#34;}getSays(&#34;&#34;, &#34;woof&#34;) //Err&lt;String, ErrData&gt;@{error={ msg=&#34;Invalid animal&#34; }}getSays(&#34;dog&#34;, &#34;&#34;) //Err&lt;String, ErrData&gt;@{error={ msg=&#34;Invalid catchPhrase&#34; }}\n     Bosque provides a powerful new way to test your applications. Unit-testing is a great way to ensure that code works as expected and to prevent accidental changes to behavior when adding new features or fixing bugs. However, writing and maintaining large numbers of tests can be a tedious and time consuming task. To help with this Bosque provides a  symbolic testing harness that augments unit-testing and provides high coverage for bugs that result in runtime failures -- arising either as builtin language errors or from failed user provided pre/post/invariant/assert conditions.\n The  symtest tool implements the symbolic testing algorithm and works as follows. Given the application shown below:\n namespace NSMain;global ops: Set&lt;String&gt; = Set&lt;String&gt;@{ &#34;negate&#34;, &#34;add&#34;, &#34;sub&#34;};entrypoint function processOp(op: String, arg1: Int, arg2: Int?): Int requires release NSMain::ops-&gt;has(op); //requires release (op == &#34;add&#34; || op == &#34;sub&#34;) ==&gt; arg2 != none;{ if(op == &#34;negate&#34;) { return -arg1; } else { assert(arg2 != none); if(op == &#34;add&#34;) { return arg1 + arg2; } else { return arg1 - arg2; } }}\n Assuming this code is in a file called  process_op.bsq then we can run the following command to check for errors:\n     Will report that an error is possible when  op == &#34;negate&#34; and  arg2 == none. Note that the tester was aware of the precondition  requires _ops.has(op) and so did not generate any  spurious failing test inputs (such as  op=&#34;&#34;).\n Un-commenting the second requires line tells the tester that this, and similar errors are excluded by the API definition, and re-running the tester will now report that the code has been verified up to the bound.\n Note: we recommend specifying preconditions as always checked,  requires release, on entrypoint functions to ensure that these externally exposed API endpdoints are not misused.\n   To provide the best performance Bosque supports the generation of standalone command-line executables via the  ExeGen tool. This tool, and the design of the Bosque runtime, are designed to provide:\n Fast cold start response time by precompiling startup logic directly into constant values whenever possible and minimizing the number of operations required to start handling user input.\n Stable execution behavior over time and possible inputs. The GC is a novel reference counting with eager free implementation to minimize memory footprint and prevent any indeterminate GC jitter.\n The runtime itself uses sorted container implementations for Sets/Maps so that the variance between average and worst case costs of operations is minimized and to protect against pathological behaviors (like extreme hash-code collisions).\n Safe recursion is available with the [TODO] flag. This compiles recursive functions into a CPS form that uses constant stack space, eliminating any possible Out-of-Stack issues, and allows us to preserve the full call-stack in all debug builds.\n A simple example use is to create a file called &#34;max.bsq&#34; with the following code:\n namespace NSMain;entrypoint function main(x: Int, y: Int): Int { return (x &gt; y) ? x : y;}\n Then run the following command to produce the  max.exe (on Windows executable) which can then be invoked with:\n        The current focus of the Bosque project is core language design. As a result there is  no support for packaging, deployment, lifecycle management, etc.\n     The  impl directory contains the reference implementation parser, type checker, interpreter, and command line runner. In this directory, build and test the Bosque reference implementation with:\n  Note: the Z3 theorem prover is provided as a binary dependency in the repo via git LFS. To ensure these are present you will need to have  git LFS installed, run  git lfs install to setup the needed hooks, and pull.\n  This repository provides basic  Visual Studio Code IDE support for the Bosque language (currently limited to syntax and brace highlighting). The installation requires manually copying the full  bosque-language-tools/ folder into your user  .vscode/extensions/ directory and restarting VSCode.\n    This project has adopted the  Microsoft Open Source Code of Conduct.For more information see the  Code of Conduct FAQ orcontact  opencode@microsoft.com with any additional questions or comments.", "posttime": "2020-05-14 13:24:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microsoft,\u535a\u65af\u514b,language,string", "title": "\u535a\u65af\u514b\u8bed(Microsoft)", "title_en": "Bosque Language (Microsoft)", "transed": 1, "url": "https://github.com/microsoft/BosqueLanguage/blob/master/README.md", "via": "", "real_tags": ["microsoft", "\u535a\u65af\u514b", "language", "string"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002067, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f46\u662f\uff0c\u4e5f\u8bb8\u60a8\u7684\u95ee\u9898\u662f\u53d7CPU\u9650\u5236\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b-\u60a8\u4ecd\u7136\u4e0d\u5e94\u8be5\u4f7f\u7528\u7ebf\u7a0b\uff01\u8bf7\u8003\u8651\u6539\u7528\u591a\u4e2a\u8fdb\u7a0b\u3002\u4e00\u4e2a\u597d\u7684\u6a21\u578b\u662f\u4e00\u4e2a\u76d1\u7763\u7a0b\u5e8f\uff0c\u5b83\u7ec4\u7ec7\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u5e76\u805a\u5408\u7ed3\u679c\uff0c\u4ea7\u751f\u8fd0\u884c\u5b9e\u9645\u8ba1\u7b97\u7684\u5de5\u4f5c\u7a0b\u5e8f\u3002\u8fd9\u4e0d\u4ec5\u66f4\u52a0\u5065\u58ee\uff0c\u800c\u4e14\u4f38\u7f29\u6027\u66f4\u597d\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u7a0d\u540e\u5c06\u8fd9\u4e9b\u7a0b\u5e8f\u5206\u5e03\u5728\u591a\u53f0\u8ba1\u7b97\u673a\u4e0a\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u66f4\u6709\u7528\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u7684\u7528\u6237\u901a\u5e38\u53ef\u80fd\u5bf9\u5982\u4f55\u5206\u914d\u5de5\u4f5c\u6709\u4e00\u4e2a\u66f4\u65b0\u9896\u7684\u60f3\u6cd5\uff0c\u5982\u679c\u4ed6\u4eec\u53ef\u4ee5\u81ea\u5df1\u8c03\u7528\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u91cd\u65b0\u6388\u6743\u5c1d\u8bd54\u3002\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff0c\u8fd9\u66f4\u5bb9\u6613\u6d4b\u8bd5\u548c\u8c03\u8bd5\u3002\u800c\u4e14\uff0c\u9664\u4e86\u6240\u6709\u8fd9\u4e9b\u597d\u5904\u4e4b\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u5168\u65b0\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u4ed6\u5988\u7684\u8981\u96be\u5f97\u591a\u3002\u4f46\u662f\uff0c\u4e5f\u8bb8\u60a8\u4f7f\u7528\u7684\u8bed\u8a00\u58f0\u79f0\u53ef\u4ee5\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002\u9996\u5148\uff0c\u8bf7\u53c2\u8003\u4e0a\u4e00\u6bb5\u4e2d\u63d0\u4f9b\u7684\u591a\u5904\u7406\u4f18\u70b9\u5217\u8868\uff0c\u8fd9\u4e9b\u4f18\u70b9\u751a\u81f3\u6bd4\u7b80\u5355\u7684\u201c\u5b83\u5b89\u5168\u5417\u201d\u66f4\u6709\u7528\u3002\u7b2c\u4e8c\uff0c\u4f60\u7684\u8bed\u8a00\u8bbe\u8ba1\u8005\u5728\u6b3a\u9a97\u4f60\u3002\u5728\u8db3\u591f\u957f\u7684\u65f6\u95f4\u8303\u56f4\u5185\uff0c\u6240\u6709\u7a0b\u5e8f\u90fd\u5c06\u88ab\u8bc1\u660e\u662f\u4e0d\u6b63\u786e\u7684\u3002\u6240\u6709\u4ee3\u7801\u90fd\u6709\u9519\u8bef\uff0c\u5305\u62ec\u60a8\u7684\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u8fd0\u884c\u65f6\u3002\u7a0b\u5e8f\u8d8a\u590d\u6742\uff0c\u5b83\u5d29\u6e83\u7684\u9891\u7387\u5c31\u8d8a\u9ad8\uff0c\u5931\u8d25\u7684\u60c5\u51b5\u4e5f\u5c31\u8d8a\u4e25\u91cd\u3002\u4f60\u4e5f\u8bb8\u53ef\u4ee5\u628a\u8d23\u4efb\u5f52\u548e\u4e8e\u5176\u4ed6\u4eba\uff0c\u4f46\u6700\u7ec8\u8fd8\u662f\u4f60\u7684\u7a0b\u5e8f\u4f1a\u88ab\u7834\u574f\u3002\u4e0d\u8981\u4f7f\u7528\u7ebf\u7a0b\uff01\u8fd9\u662f\u4e2a\u9677\u9631\uff01", "note_en": "But, perhaps your problem  is CPU bound. In that case \u2014 you still shouldn&#39;t use threads! Consider using multiple processes instead. A good model is an overseer program, which organizes the work to be done and aggregates the results, spawning worker programs to run the actual computations. This is not only much more robust, but it scales better, since you could distribute these programs across multiple computers later on. This approach is more useful, too, because often the user of the program may have a more novel idea about how to distribute work, and if they can invoke the worker processes themselves, they&#39;re empowered to try it out  4. This is easier to test and debug for the same reasons. And, in addition to all of these benefits, you get a brand new address space which is much more difficult to fuck up.  But,  maybe, you use a language which claims to guarantee the safety of multithreaded code. First of all, consult the list of advantages of multiprocessing provided given in the previous paragraph, which are useful even beyond the simple case of &#34;is it safe&#34;. Second,  your language designers are lying to you. On a long enough time-scale, all programs will be proven incorrect. All code has bugs, including your compiler and language runtime. The more complex the program, the more often it will break and the worse those failures will be. You might be able to point the blame at someone else, but ultimately it&#39;s your program that&#39;s going to be broken.  Don&#39;t use threads! It&#39;s a trap!", "posttime": "2020-05-14 13:24:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "threads", "title": "\u6211\u5e94\u8be5\u4f7f\u7528\u87ba\u7eb9\u5417\uff1f", "title_en": "Should I Use Threads?", "transed": 1, "url": "https://shouldiusethreads.com/", "via": "", "real_tags": ["threads"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002066, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51a0\u72b6\u75c5\u6bd2\u4f7f\u82f1\u56fd\u5404\u5730\u8003\u53e4\u9057\u5740\u7684\u6316\u6398\u5de5\u4f5c\u9677\u5165\u4e86\u98a4\u6296\u7684\u505c\u987f\uff0c\u4f46\u4e00\u7fa4\u4e1a\u4f59\u7231\u597d\u8005\u5728\u5bb6\u4e2d\u8fdb\u884c\u7684\u7814\u7a76\u6b63\u5728\u5e2e\u52a9\u91cd\u65b0\u7ed8\u5236\u7f57\u9a6c\u65f6\u4ee3\u82f1\u56fd\u897f\u5357\u90e8\u7684\u5730\u56fe\u3002\n\u5fd7\u613f\u8005\u4eec\u4ed4\u7ec6\u7814\u7a76\u5eb7\u6c83\u5c14\u548c\u5fb7\u6587\u90e1\u4e4b\u95f4\u8fb9\u754c\u7684\u8be6\u7ec6\u822a\u7a7a\u6d4b\u91cf\uff0c\u53d1\u73b0\u4e86\u6570\u5341\u4e2a\u4ee5\u524d\u4e0d\u4e3a\u4eba\u77e5\u7684\u5b9a\u5c45\u70b9\u548c\u8fde\u63a5\u7f57\u9a6c\u5821\u5792\u7684\u6570\u82f1\u91cc\u9053\u8def\u7684\u8ff9\u8c61\u3002\n\u8be5\u9879\u76ee\u8868\u660e\uff0c\u5305\u62ec\u5eb7\u6c83\u5c14\u7684\u535a\u5fb7\u660e\u00b7\u6469\u5c14(Bodmin Moor)\u548c\u5fb7\u6587\u90e1\u7684\u8fbe\u7279\u7a46\u5c14(Dartmoor)\u5728\u5185\u7684\u5730\u533a\u7684\u4eba\u53e3\u6bd4\u4e4b\u524d\u60f3\u8c61\u7684\u8981\u591a\u5f97\u591a\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5bf9\u73b0\u6709\u6750\u6599\u7684\u7814\u7a76\u8fd8\u4e0d\u5230\u5341\u5206\u4e4b\u4e00\uff0c\u4f46\u5df2\u7ecf\u53d1\u73b0\u4e8630\u4e2a\u636e\u4fe1\u53ef\u4ee5\u8ffd\u6eaf\u5230\u516c\u5143\u524d300\u5e74\u81f3\u516c\u5143300\u5e74\u4e4b\u95f4\u7684\u4ee5\u524d\u4e0d\u4e3a\u4eba\u77e5\u7684\u5b9a\u5c45\u70b9\uff0c\u4ee5\u53ca\u8d85\u8fc720\u82f1\u91cc\u7684\u7f57\u9a6c\u9053\u8def\u3002\n\u4e00\u65e6\u5c01\u9501\u7ed3\u675f\uff0c\u7cbe\u786e\u5b9a\u4f4d\u7684\u5730\u70b9\u5c06\u63a5\u53d7\u4eb2\u81ea\u68c0\u67e5\uff0c\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u5b83\u4eec\u7684\u4f4d\u7f6e\u4e00\u76f4\u4fdd\u5bc6\uff0c\u56e0\u4e3a\u62c5\u5fc3\u8086\u65e0\u5fcc\u60ee\u7684\u91d1\u5c5e\u63a2\u6d4b\u5668\u53ef\u80fd\u4f1a\u524d\u5f80\u90a3\u91cc\u5bfb\u627e\u6587\u7269\u3002\n\u6307\u5bfc\u5fd7\u613f\u8005\u7684\u57c3\u514b\u585e\u7279\u5927\u5b66\u666f\u89c2\u8003\u53e4\u5b66\u5bb6\u514b\u91cc\u65af\u00b7\u65af\u9a6c\u7279\u535a\u58eb\u8bf4\uff0c\u7ed3\u679c\u4ee4\u4eba\u9707\u60ca\u3002\n\u201c\u6211\u77e5\u9053\u6211\u4eec\u4f1a\u627e\u5230\u4e00\u4e9b\u4e1c\u897f\uff0c\u4f46\u6211\u6ca1\u60f3\u5230\u4f1a\u6709\u8fd9\u4e48\u591a\u3002\u9057\u5740\u7684\u7c7b\u578b\u662f\u4f60\u5728\u8fd9\u4e2a\u5730\u533a\u6240\u671f\u671b\u7684\uff0c\u4f46\u5b83\u7684\u6570\u91cf\u662f\u5982\u6b64\u4ee4\u4eba\u60ca\u8bb6\u3002\u5df2\u7ecf\u627e\u5230\u4e86\u51e0\u5341\u4e2a\u5730\u70b9\uff0c\u4f46\u5f53\u5fd7\u613f\u8005\u4eec\u5b8c\u6210\u5de5\u4f5c\u65f6\uff0c\u5c06\u6709\u6570\u767e\u4e2a\u5730\u70b9\u3002\u6211\u4eec\u770b\u5230\u7684\u4eba\u53e3\u5bc6\u5ea6\u6bd4\u6211\u4eec\u60f3\u8c61\u7684\u8981\u5927\u5f97\u591a\u3002\u201c\u3002\n\u8be5\u5021\u8bae\u662f\u7531\u56fd\u5bb6\u5f69\u7968\u9057\u4ea7\u57fa\u91d1\u8d44\u52a9\u7684\u540d\u4e3a\u4e86\u89e3\u666f\u89c2\u7684\u9879\u76ee\u7684\u4e00\u90e8\u5206\u3002\u901a\u5e38\uff0c\u8be5\u9879\u76ee\u4f1a\u6709\u5fd7\u613f\u8005\u5728\u5b9e\u5730\u5f00\u5c55\u8c03\u67e5\u5de5\u4f5c\u6216\u6316\u6398\u9057\u5740\u3002\n\u56e0\u4e3a\u505a\u4e0d\u5230\u8fd9\u4e00\u70b9\uff0c\u5fd7\u613f\u8005(\u53ea\u67098\u4eba)\u88ab\u95ee\u53ca\u662f\u5426\u613f\u610f\u7814\u7a76\u6dfb\u9a6c\u8230\u5c71\u8c37(\u5eb7\u6c83\u5c14\u548c\u5fb7\u6587\u90e1\u4e4b\u95f4\u7684\u8fb9\u754c)\u53ca\u5176\u5468\u56f4\u5730\u533a\u7684\u9ad8\u5ea6\u8be6\u7ec6\u7684\u5730\u5f62\u626b\u63cf\u3002\n\u626b\u63cf\u8986\u76d64000\u5e73\u65b9\u516c\u91cc(1540\u5e73\u65b9\u82f1\u91cc)\uff0cSmart\u5df2\u7ecf\u5c06\u5b83\u4eec\u5212\u5206\u4e3a1000\u4e2a\u7f51\u683c\u3002\u4ed6\u5411\u5fd7\u613f\u8005\u5206\u53d1\u4e86\u4e00\u4e9b\u7f51\u683c\uff0c\u7136\u540e\u5fd7\u613f\u8005\u4eec\u5728\u7a7a\u95f2\u65f6\u7814\u7a76\u8fd9\u4e9b\u7f51\u683c\uff0c\u5e76\u8bd5\u56fe\u6311\u51fa\u9690\u85cf\u5728\u666f\u89c2\u4e2d\u7684\u4eba\u4e3a\u7279\u5f81\uff0c\u6bd4\u5982\u5c01\u95ed\u7684\u5c45\u6c11\u70b9\u3002\u4ed6\u4eec\u4ea4\u53c9\u53c2\u8003\u5df2\u77e5\u8003\u53e4\u5b66\u7684\u8bb0\u5f55\u548c\u5386\u53f2\u5730\u56fe\uff0c\u4ee5\u5bfb\u627e\u4ee5\u524d\u9057\u6f0f\u7684\u9057\u5740\u3002\n\u65af\u9a6c\u7279\u8bf4\uff1a\u201c\u6211\u77e5\u9053\u6211\u4eec\u7684\u5fd7\u613f\u8005\u56e2\u961f\u5728\u5c01\u9501\u671f\u95f4\u4f1a\u6709\u7ee7\u7eed\u5de5\u4f5c\u7684\u70ed\u60c5\uff0c\u4f46\u6211\u8ba4\u4e3a\u4ed6\u4eec\u6ca1\u6709\u610f\u8bc6\u5230\u4ed6\u4eec\u4f1a\u6709\u591a\u5c11\u65b0\u53d1\u73b0\u3002\u201d\n\u4ed6\u4eec\u53d1\u73b0\u4e86\u5927\u7ea620\u4e2a\u53f2\u524d\u5893\u4e18\uff0c\u4ee5\u53ca\u6570\u767e\u4e2a\u4e2d\u4e16\u7eaa\u519c\u573a\u3001\u519c\u7530\u7cfb\u7edf\u548c\u91c7\u77f3\u573a\u7684\u9057\u8ff9\u3002\n\u4f46\u4e5f\u8bb8\u6700\u6709\u8da3\u7684\u662f\u636e\u4fe1\u6765\u81ea\u7f57\u9a6c-\u4e0d\u5217\u98a0\u65f6\u4ee3\u4e4b\u524d\u548c\u671f\u95f4\u7684\u5b9a\u5c45\u70b9\u548c\u9053\u8def\u3002\n\u6700\u4ee4\u4eba\u5174\u594b\u7684\u53d1\u73b0\u4e4b\u4e00\u662f\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\u66fe\u7ecf\u8fde\u63a5\u5854\u7ef4\u65af\u6258\u514b\u9644\u8fd1\u7684\u5361\u5c14\u65af\u6258\u514b\u8981\u585e\u548c\u535a\u5fb7\u660e\u9644\u8fd1\u7684\u96f7\u65af\u6258\u6885\u5c14\u7684\u4e00\u6761\u7f57\u9a6c\u9053\u8def\u7684\u9057\u8ff9\u3002\n\u5728\u822a\u62cd\u56fe\u50cf\u4e0a\uff0c\u9053\u8def\u7684\u6b8b\u8ff9\u770b\u8d77\u6765\u50cf\u662f\u6a21\u7cca\u7684\u767d\u8272\u8bb0\u53f7\u3002\u9644\u8fd1\u6709\u4e00\u6392\u9ed1\u70b9\uff0c\u53ef\u80fd\u662f\u91c7\u77f3\u5751\u3002\n\u65af\u9a6c\u7279\u8bf4\uff1a\u201c\u6211\u4eec\u4e00\u76f4\u77e5\u9053\u4f1a\u6709\u7f57\u9a6c\u9053\u8def\u8fde\u63a5\u4e3b\u8981\u519b\u4e8b\u8bbe\u65bd\u3002\u4f46\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u4ed6\u4eec\u7684\u786e\u5207\u4f4d\u7f6e\u3002\u201c\n\u4ed6\u8865\u5145\u8bf4\uff1a\u201c\u6211\u4eec\u5f88\u96be\u4e0d\u6267\u884c\u6211\u4eec\u4eca\u5e74\u590f\u5929\u8ba1\u5212\u7684\u5de5\u4f5c--\u5305\u62ec\u5728\u5361\u5c14\u65af\u6258\u514b\u7684\u6316\u6398--\u4f46\u5e0c\u671b\u8fd9\u53ea\u662f\u4e00\u4e2a\u6682\u65f6\u7684\u73b0\u8c61\uff0c\u4e00\u65e6\u5b89\u5168\u4e86\uff0c\u6211\u4eec\u5c31\u4f1a\u548c\u5fd7\u613f\u8005\u4e00\u8d77\u56de\u5230\u4e61\u4e0b\u3002\u201d\n\u6b63\u5728\u4f7f\u7528\u7684\u56fe\u50cf\u662f\u7531\u4e00\u79cd\u540d\u4e3a\u6fc0\u5149\u96f7\u8fbe(Lidar)\u7684\u6280\u672f\u4ea7\u751f\u7684\uff0c\u8fd9\u662f\u4e00\u79cd\u5730\u5f62\u626b\u63cf\uff0c\u4f7f\u7528\u8fde\u63a5\u5230\u56fa\u5b9a\u7ffc\u98de\u673a\u7684\u8bbe\u5907\u6536\u96c6\u7684\u6fc0\u5149\u8fdb\u884c\u5730\u5f62\u626b\u63cf\u3002\n\u53c2\u52a0\u8be5\u9879\u76ee\u7684\u5fd7\u613f\u8005\u4e2d\u670964\u5c81\u7684\u5f17\u5170\u00b7\u65af\u73c0\u6797(Fran Sperring)\uff0c\u5979\u662f\u7ebd\u57fa\u7684\u4e00\u540d\u9000\u4f11\u62a4\u58eb\u3002\n\u5979\u8bf4\uff1a\u201c\u8fd9\u771f\u662f\u592a\u5438\u5f15\u4eba\u4e86\u3002\u201d\u201c\u6211\u4eec\u53ea\u662f\u8bd5\u7740\u627e\u51fa\u4efb\u4f55\u770b\u8d77\u6765\u50cf\u662f\u4eba\u9020\u7684\uff0c\u4ee5\u524d\u6ca1\u6709\u88ab\u8ba1\u7b97\u5728\u5185\u7684\u4e1c\u897f\u3002\u201d\u5982\u679c\u6211\u4eec\u770b\u5230\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u6807\u8bb0\u7ed9\u514b\u91cc\u65af\u3002\n\u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5df2\u7ecf\u53d1\u73b0\u4e86\u663e\u7136\u662f\u4e00\u6bb5\u7f57\u9a6c\u9053\u8def\u548c\u4e00\u4e2a\u56f4\u5899\u5efa\u7b51\u7fa4\uff0c\u53ef\u80fd\u662f\u94c1\u5668\u65f6\u4ee3\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u7f57\u9a6c-\u4e0d\u5217\u98a0\u5f0f\u7684\u3002\u201d\n\u65af\u73c0\u6797\u9009\u62e9\u628a\u91cd\u70b9\u653e\u5728\u6b63\u5728\u7814\u7a76\u7684\u5730\u533a\u7684\u897f\u90e8\uff0c\u56e0\u4e3a\u5979\u4f4f\u5f97\u5f88\u8fd1\u3002\u201c\u770b\u5230\u535a\u5fb7\u660e\u00b7\u6469\u5c14\u6709\u591a\u5fd9\uff0c\u771f\u662f\u592a\u6709\u8da3\u4e86\u3002\u771f\u8ba9\u4eba\u5927\u5f00\u773c\u754c\u3002\u5728\u6211\u770b\u6765\uff0c\u90a3\u65f6\u5019\u4f3c\u4e4e\u6bd4\u73b0\u5728\u5fd9\u5f97\u591a\u3002\u201c", "note_en": "Digging at archaeological sites around the UK  has been brought to a shuddering halt by the coronavirus, but research being undertaken from home by a group of amateurs is helping to redraw the map of the south-west of Britain in Roman times.\n Volunteers poring over detailed aerial surveys of the borderlands between  Cornwall and Devon spotted telltale signs of dozens of previously unknown settlements and miles of roads linking Roman forts.\n The project suggests areas including Bodmin Moor, in Cornwall, and Dartmoor, in  Devon, were much more populous than previously had been thought.\n So far, less than a tenth of the material available has been studied but already 30 previously unknown settlements believed to date from between 300BC and AD300 have been found, as well as more than 20 miles of Roman road.\n  Once the lockdown ends, the pinpointed sites will be examined in person, but until then their locations are being kept secret for fear that unscrupulous metal detectorists may head there and search for artefacts.\n Dr  Chris Smart , a landscape archaeologist at the University of Exeter who is guiding the volunteers, said the results were astounding.\n \u201cI knew we\u2019d find some things but I didn\u2019t think it would be so many. The types of sites are what you would expect in this region but it\u2019s the number that is so surprising. Dozens of sites have been found already, but it will be hundreds by the time the volunteers are finished. We\u2019re seeing a much greater density of population than we thought.\u201d\n The initiative is part of a project funded by the National Lottery Heritage Fund called  Understanding Landscapes. Usually the project would involve volunteers out in the field carrying out survey work or excavating sites.\n Because this could not be done, the volunteers (just eight of them) were asked if they would like to study highly detailed topographical scans of the Tamar Valley \u2013 the border between Cornwall and Devon \u2013 and surrounding areas.\n The scans cover 4,000 sq km (1,540 sq miles) and Smart has broken them up into 1,000 grids. He hands out a number of grids to the volunteers, who then study them at their leisure and try to pick out human-made features hidden in the landscapes, such as enclosed settlements. They cross-refer them to records of known archaeology and historic maps to find sites previously missed.\n Smart said: \u201cI knew there would be enthusiasm within our volunteer group to continue working during lockdown, but I don\u2019t think they realised how many new discoveries they would make.\u201d\n They have found about 20 prehistoric burial mounds, as well as the remains of hundreds of medieval farms, field systems and quarries.\n  But perhaps the most interesting are the settlements and roads believed to come from just before and during Romano-British times.\n One of the most exciting discoveries is the remains of a Roman road the researchers believe would have once linked the forts of Calstock, near Tavistock, and Restormel, near Bodmin.\n The vestiges of the road appear as faint white marks on the aerial image. Close by is a line of black dots, which would have been quarry pits.\n Smart said: \u201cWe\u2019ve always known there would be Roman roads connecting major military installations. But we haven\u2019t known exactly where they are.\u201d\n He added: \u201cIt\u2019s hard for us not to be able to carry out the work we had planned this summer \u2013 including an excavation at Calstock \u2013 but hopefully this is only a temporary blip and we will be back out in the countryside with volunteers as soon as it is safe to do so.\u201d\n The images being used are produced by a technique known as Lidar \u2013 a topographical scan using laser light collected by a device connected to a fixed-wing plane.\n Among the volunteers taking part in the project is Fran Sperring, 64, a retired nurse from Newquay.\n \u201cIt has been totally engrossing,\u201d she said. \u201cWe simply try to spot anything that looks manmade and has not been accounted for before. If we see something interesting we flag it up to Chris.\n \u201cSo far I\u2019ve spotted what is apparently a stretch of Roman road and an enclosure complex that could be iron age or Romano-British.\u201d\n Sperring has chosen to focus on the west of the area being studied because she lives close by. \u201cIt\u2019s fascinating to see how busy Bodmin Moor was. It\u2019s a real eye-opener. It seems to me it was much busier back then than it is now.\u201d", "posttime": "2020-05-14 13:09:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f57\u9a6c,archaeologists,\u5fd7\u613f\u8005", "title": "\u4e1a\u4f59\u8003\u53e4\u5b66\u5bb6\u5728\u5bb6\u91cd\u65b0\u7ed8\u5236\u7f57\u9a6c\u4e0d\u5217\u98a0\u5730\u56fe", "title_en": "Amateur archaeologists redraw map of Roman Britain from home", "transed": 1, "url": "https://www.theguardian.com/science/2020/may/13/amateur-archaeologists-redraw-map-of-roman-britain-from-home", "via": "", "real_tags": ["\u7f57\u9a6c", "\u5fd7\u613f\u8005"]}]