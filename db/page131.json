[{"category": "", "categoryclass": "", "imagename": "3eda4eb64fbd9ce2537a148dfc5496a4.png", "infoid": 1006153, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53bb\u5e74\uff0c\u6211\u5199\u4e86\u4e00\u7bc7\u5173\u4e8e\u5982\u4f55\u5728\u4e00\u5929(\u5b9e\u9645\u4e0a\u662f3\u5c0f\u65f6)\u5185\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684(\u57fa\u4e8e\u64cd\u4f5c\u7b26\u91cd\u8f7d\u7684)\u81ea\u52a8\u533a\u5206(AD)\u7684\u535a\u5ba2\u6587\u7ae0\u3002\u5e7f\u544a\u6709\u65f6\u770b\u8d77\u6765\u50cf\u9b54\u672f\uff0c\u4f46\u8fd9\u6b21\u6211\u8981\u8c08\u8c08\u4e00\u4e9b\u9ed1\u9b54\u6cd5\uff1a\u6e90\u5230\u6e90\u81ea\u52a8\u533a\u5206\u3002\u5728Mike Inness\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u5728JuliaCon 2019 hackthon\u4e0a\u5199\u4e0b\u4e86\u8fd9\u7bc7\u6587\u7ae0\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5199\u4e00\u7bc7\u535a\u5ba2\u5e16\u5b50\u6bd4\u5199\u4e00\u7bc7\u6e90AD\uff1b-)\u8981\u82b1\u66f4\u957f\u7684\u65f6\u95f4\u3002\u8fd9\u57fa\u672c\u4e0a\u53ea\u662fZygote\u7684\u7b80\u5355\u7248\u672c\u3002\n\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u8be6\u7ec6\u7684\u5b9e\u73b0\uff0c\u6211\u5728\u8fd9\u91cc\u5c06\u5176\u5305\u88c5\u4e3a\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u5305\uff1aYASSAD.jl\u3002\n\u5982\u679c\u60a8\u4f7f\u7528\u8fc7\u57fa\u4e8e\u8fd0\u7b97\u7b26\u91cd\u8f7d\u7684AD\uff0c\u5982PyTorch\u3001Flux/Tracker\u3001AutoGrad\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u5b83\u4eec\u6709\u4e00\u4e9b\u9650\u5236\uff1a\n\u5fc5\u987b\u4f7f\u7528\u5305\u63d0\u4f9b\u7684\u5f20\u91cf\u7c7b\u578b\u6216\u53d8\u91cf\u7c7b\u578b\u6765\u8ddf\u8e2a\u51fd\u6570\u8c03\u7528\u3002\n\u5b83\u4eec\u4e00\u822c\u4e0d\u80fd\u5904\u7406\u63a7\u5236\u6d41\uff0c\u5373\u4f7f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u91c7\u53d6\u4e00\u4e9b\u89e3\u51b3\u529e\u6cd5\u3002\n\u4f46\u662f\uff0c\u6ca1\u6709\u63a7\u5236\u6d41\u7684\u7f16\u7a0b\u4e0d\u662f\u7f16\u7a0b\uff01\u800c\u4e14\uff0c\u4f7f\u7528\u8ddf\u8e2a\u7c7b\u578b\u91cd\u5199\u5927\u91cf\u4ee3\u7801\u901a\u5e38\u975e\u5e38\u70e6\u4eba\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u50cf\u4e25\u4e50\u6751\u8fd9\u6837\u7684\u4eba\u6240\u63d0\u8bae\u7684\u90a3\u6837\u6709\u4e00\u4e2a\u53ef\u533a\u5206\u7f16\u7a0b\u7684\u6846\u67b6\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u4ee5\u4e0a\u4e24\u4e2a\u95ee\u9898\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e9b\u95ee\u9898\u4ece\u6e90\u5934\u5230\u6e90\u5934\u7684\u81ea\u52a8\u533a\u5206\u89e3\u51b3\u8d77\u6765\u662f\u76f8\u5f53\u7b80\u5355\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u57fa\u672c\u4e0a\u77e5\u9053\u4e00\u5207\u90fd\u4f1a\u53d1\u751f\u3002\u6211\u5c06\u5728\u4e0d\u5904\u7406\u63a7\u5236\u6d41\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684AD\u6e90\u4ee3\u7801\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728Zygote.jl\u4e2d\u68c0\u67e5\u5b8c\u6574\u7684\u5b9e\u73b0\u3002\nJulia\u89e3\u6790\u5668\u5c06\u9996\u5148\u89e3\u6790\u5b57\u7b26\u4e32\u4ee5\u83b7\u5f97\u62bd\u8c61\u8bed\u6cd5\u6811(AST)\n\u8fd9\u4e2aAST\u4e2d\u7684\u4e00\u4e9b\u8282\u70b9\u662f\u5b8f\uff0c\u5b8f\u5c31\u50cf\u8868\u8fbe\u5f0f\u4e0a\u7684\u7f16\u8bd1\u65f6\u95f4\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u5c55\u5f00\u5b8f\u3002\u7136\u540e\u6211\u4eec\u5f97\u5230AST\u7684\u6269\u5c55\u7248\u672c\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u5b8f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528@MACROEXPAND\u68c0\u67e5\u7ed3\u679c\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u964d\u4f4eAST\uff0c\u53bb\u6389\u8bed\u6cd5\u7cd6\uff0c\u5e76\u4ee5\u9759\u6001\u5355\u4e00\u8d4b\u503c\u5f62\u5f0f(SSA)\u8868\u793a\u5b83\u4eec\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528@code_lowed\u83b7\u5f97\u5b83\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u4f7f\u7528Julia\u5b8f\u6765\u4fee\u6539\u6b64\u8fc7\u7a0b\u3002\n\u5f53\u53d1\u751f\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u7b7e\u540d\u5c06\u51fd\u6570\u5206\u6d3e\u7ed9\u67d0\u4e2a\u65b9\u6cd5\uff0c\u5e76\u5f00\u59cb\u8fdb\u884c\u7c7b\u578b\u63a8\u7406\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528@Generated\u51fd\u6570\u4fee\u6539\u6b64\u8fc7\u7a0b\uff0c\u5e76\u4f7f\u7528@code_type\u68c0\u67e5\u7ed3\u679c\u3002\n\u5728\u6211\u4eec\u62e5\u6709llvm IR\u4e4b\u540e\uff0cJulia\u5c06\u4f7f\u7528llvm\u751f\u6210\u672c\u673a\u4ee3\u7801\u6765\u5b9e\u9645\u6267\u884c\u6b64\u51fd\u6570\u3002\n\u901a\u8fc7\u6267\u884c\u8be5\u51fd\u6570\uff0c\u6211\u4eec\u5c06\u9047\u5230\u53e6\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u8fd4\u56de\u5230\u6b65\u9aa45\u3002\n\u5982\u4f60\u6240\u89c1\u3002Julia\u4e0d\u662f\u9759\u6001\u7f16\u8bd1\u8bed\u8a00\uff0c\u5b83\u4ee5\u51fd\u6570\u4f5c\u4e3a\u7f16\u8bd1\u7684\u8fb9\u754c\u3002\n\u4e00\u672c\u5173\u4e8eSSA\u7684\u5b8c\u6574\u4ecb\u7ecd\u53ef\u4ee5\u662f\u4e00\u672c\u4e66\u3002\u4f46\u662f\u8981\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684\u6e90\u5230\u6e90AD\uff0c\u53ea\u9700\u8981\u4e09\u4e2a\u7b80\u5355\u7684\u6982\u5ff5\uff1a\n\u5982\u679c\u4f60\u8bfb\u8fc7\u6211\u4e0a\u4e00\u7bc7\u6587\u7ae0\uff0c\u6211\u76f8\u4fe1\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u4ec0\u4e48\u662f\u8ba1\u7b97\u56fe\uff0c\u4f46\u73b0\u5728\u8ba9\u6211\u4eec\u518d\u770b\u770b\u8fd9\u4e2a\u56fe\uff1a\u8fd9\u4e2a\u8ba1\u7b97\u56fe\u5230\u5e95\u662f\u4ec0\u4e48\uff1f\n\u5728\u8fdb\u884c\u81ea\u52a8\u5fae\u5206\u65f6\uff0c\u6211\u4eec\u5c06\u8ba1\u7b97\u8fc7\u7a0b\u7528\u56fe\u8868\u793a\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5177\u6709\u4e2d\u95f4\u503c\u7684\u8fd0\u7b97\u7b26\u3002\u5e76\u4e14\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u8fd8\u5177\u6709\u5c06\u5728\u53cd\u5411\u4f20\u9012\u4e2d\u4f7f\u7528\u7684\u4f34\u968f\u8fd0\u7b97\u7b26\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u8282\u70b9\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u5c06\u53ea\u5206\u914d\u4e00\u6b21\u3002\u8fd9\u53ea\u662fSSA\u8868\u5355\u7684\u4e00\u4e2a\u7b80\u5355\u7248\u672c\uff0c\u5bf9\u5417\uff1f\n\u7136\u540e\uff0c\u8be5\u68af\u5ea6\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u539f\u59cb\u7a0b\u5e8f\u7684\u4f34\u968f\u7a0b\u5e8f\u3002\u6211\u4eec\u552f\u4e00\u9700\u8981\u505a\u7684\u5c31\u662f\u751f\u6210\u4f34\u968f\u7a0b\u5e8f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a\u6e29\u683c\u7279\u5217\u8868\u3001\u78c1\u5e26\u6216\u56fe\u8868\uff0c\u6b63\u5982Zygote\u7684\u8bba\u6587\u4e2d\u6240\u63cf\u8ff0\u7684\uff1a\u4e0d\u8981\u5c55\u5f00\u4f34\u968f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528SSA\u5f62\u5f0f\u4f5c\u4e3a\u6211\u4eec\u7684\u8ba1\u7b97\u56fe\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u5728Julia\u4e2d\u964d\u4f4e\u4e86SSA\u5f62\u5f0fIR\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u6211\u4eec\u53ea\u9700\u8981\u5b9a\u4e49\u51e0\u4e2a\u57fa\u672c\u4f8b\u7a0b\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u5927\u91cf\u8fd0\u7b97\u7b26\u3002\n\u7531\u4e8e\u5411\u540e\u4f20\u9012\u53ea\u662f\u539f\u59cb\u7a0b\u5e8f\u7684\u9644\u52a0\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7f16\u5199\u4e3a\u95ed\u5305\u3002\nFunction Forward(\uff1a\uff1aTypeof(Your_Function)\uff0cXs.)#Function\u58f0\u660eOUTPUT=#Function OUTPUT OUTPUT\uff0cFunction(\u0394)#a\u95ed\u5305\u7ed3\u675f\u3002\n\u5c06\u5176\u5b9a\u4e49\u4e3a\u95ed\u5305\u7684\u597d\u5904\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u7f16\u8bd1\u5668\u81ea\u5df1\u5904\u7406\u4f34\u968f\u7a0b\u5e8f\u548c\u539f\u59cb\u7a0b\u5e8f\u4e4b\u95f4\u7684\u5171\u4eab\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u81ea\u5df1\u7ba1\u7406\u5b83(\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u6240\u505a\u7684\u90a3\u6837)\u3002\u6211\u4eec\u79f0\u8fd9\u4e9b\u95ed\u5408\u4e3a\u56de\u8c03\u3002\n\u51fd\u6570FORWARD(\uff1a\uff1aTYPEOF(FOO)\uff0cx)x1\uff0cBACK1=FORWARD(BAZ\uff0cx)x2\uff0cBACK2=FORWARD(BAR\uff0cx1)\u8fd4\u56dex2\uff0c\u51fd\u6570(\u0394)dx1=BACK2(\u0394)DX2=BACK1(DX1)\u8fd4\u56deDX2 END\u3002\n\u901a\u5e38\uff0c\u6ca1\u6709\u63a7\u5236\u6d41\u7684\u4f34\u968f\u7a0b\u5e8f\u53ea\u662f\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u7531\u5b83\u4eec\u7684\u524d\u8fdb\u51fd\u6570\u751f\u6210\u7684\u56de\u8c03\u3002\u4f46\u662f\u6211\u4eec\u5982\u4f55\u81ea\u52a8\u505a\u5230\u8fd9\u4e00\u70b9\u5462\uff1f\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\uff1a\u8ba9\u6211\u4eec\u4f7f\u7528\u5b8f\u5427\uff01\u5443\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002\u4f46\u662f\u6211\u4eec\u7684\u76ee\u6807\u662f\u533a\u5206\u522b\u4eba\u5b9a\u4e49\u7684\u4efb\u610f\u51fd\u6570\uff0c\u8fd9\u6837\u4e1c\u897f\u5c31\u53ef\u4ee5\u7ec4\u5408\u8d77\u6765\u3002\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u6574IR\uff0cJulia\u4e2d\u751f\u6210\u7684\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4ece\u7c7b\u578b\u4fe1\u606f\u8fd4\u56de\u4fee\u6539\u540e\u7684AST\uff0c\u8fd8\u53ef\u4ee5\u8fd4\u56deIR\u3002\n\u5b83\u770b\u8d77\u6765\u4e5f\u50cf\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5728\u51fd\u6570\u5185\u90e8\uff0c\u6bcf\u4e2a\u51fd\u6570\u53c2\u6570a\u3001b\u3001ci\u7684\u503c\u90fd\u662f\u5b83\u4eec\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u6ca1\u6709\u5b83\u4eec\u7684\u503c\u3002\n\u4e3a\u4e86\u64cd\u7eb5\u7ea2\u5916\u7ebf\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u5de5\u5177\u3002\u5e78\u8fd0\u7684\u662f\uff0cIRTools\u4e2d\u6709\u4e00\u4e9b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e2a\u5305\u6765\u751f\u6210IR\u4ee3\u7801\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528@code_ir\u83b7\u53d6IRTools\u5904\u7406\u7684IR\u5bf9\u8c61\u3002\u5176\u7c7b\u578b\u4e3aIR\u3002\u4e0e\u60a8\u4ece@CODE_LOWERED\u5f97\u5230\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4e0d\u4f1a\u5b58\u50a8\u53c2\u6570\u540d\u79f0\uff0c\u6240\u6709\u53d8\u91cf\u90fd\u7528\u6570\u5b57\u8868\u793a\uff0c\u5e76\u4e14\u4e3a\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u51fd\u6570\u3002\n\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\uff0c\u6bcf\u4e00\u884c\u4ee3\u7801\u90fd\u7ed1\u5b9a\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u79f0\u4e3a\u53f3\u624b\u8bed\u53e5\u548c\u5de6\u624b\u53d8\u91cf\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8edict\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u6b64\u5bf9\u8c61\uff0c\u4f8b\u5982\u3002\n\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2aStatement\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5b58\u50a8\u6b64\u8bed\u53e5\u7684\u8868\u8fbe\u5f0f\u3001\u63a8\u65ad\u7684\u7c7b\u578b(\u56e0\u4e3a\u6211\u4eec\u5728\u7c7b\u578b\u63a8\u65ad\u4e4b\u524d\u4f7f\u7528IR\uff0c\u6240\u4ee5\u8fd9\u662fANY)\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4e0d\u4f7f\u7528\u7c7b\u578b\u5316IR(\u56e0\u4e3a\u539f\u5219\u4e0a\uff0c\u5b83\u4eec\u7684\u5b9e\u73b0\u662f\u76f8\u4f3c\u7684)\u3002\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u884c\u53f7\u3002\n\u6574\u4e2a\u8857\u533a\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u662f\u4ec0\u4e48\uff1f\u5b83\u7684\u610f\u601d\u662f\u4ee3\u7801\u5757\uff0c\u5728SSA\u5f62\u5f0f\u4e2d\uff0c\u6211\u4eec\u7528\u5b83\u6765\u8868\u793a\u5206\u652f\uff0c\u4f8b\u5982\u3002\nJulia&gt\uff1b\u51fd\u6570foo(X)if x&gt\uff1b1 bar(X)\u5426\u5219baz(X)end end foo(\u5177\u67091\u4e2a\u65b9\u6cd5\u7684\u6cdb\u578b\u51fd\u6570)julia&gt\uff1bfoo(1.0)1\uff1a(%1\uff0c%2)%3=%2&gt\uff1b1 br 3\u9664\u975e%3 2\uff1a%4=(Main.bar)(%2)\u8fd4\u56de%4 3\uff1a%5=(Main.baz)(%2)\u8fd4\u56de%5\u3002\nifElse\u53ea\u662f\u964d\u4f4e\u4e86SSA\u5f62\u5f0f\u7684\u5206\u652f\u8bed\u53e5\uff0c\u4e8b\u5b9e\u4e0a\uff0cfor\u5faa\u73af\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002Julia\u7684for\u5faa\u73af\u53ea\u662f\u8fed\u4ee3\u51fd\u6570\u7684\u8bed\u6cd5\u7cd6\u3002\u53ea\u8981\u6211\u4eec\u80fd\u901a\u8fc7br\u5b9e\u73b0\u5dee\u5f02\u5316\uff0c\u6211\u4eec\u5c31\u80fd\u901a\u8fc7\u63a7\u5236\u6d41\u5b9e\u73b0\u5dee\u5f02\u5316\u3002\njulia&gt\uff1b\u51fd\u6570foo(X)\uff0c\u5176\u4e2dx\u57281\uff1a10 bar(X)end baz(X)end foo(\u5177\u67091\u4e2a\u65b9\u6cd5\u7684\u6cdb\u578b\u51fd\u6570)julia&gt\uff1bfoo(1.0)1\uff1a(%1\uff0c%2)%3=1\uff1a10%4=(Base.iterate)(%3)%5=%4==\u65e0%6=(Base.not_int)(%5)br 3\u9664\u975e%6 br 2(%4)2\uff1a(%7)%8=(Core.getfield)(%7\uff0c1)%9=(Core.getfield)(%7\uff0c2)%10=(Main.bar)(%8)%11=(Base.iterate)(%3\uff0c%9)%12=%11==\u65e0%13=(Base.not_int)(%12)br 3\u9664\u975e%13 br 2(%11)3\uff1a%14=(Main.baz)(%2)\u8fd4\u56de%14\n\u90a3\u6211\u4eec\u600e\u4e48\u62ff\u5230\u7ea2\u5916\u7ebf\u5462\uff1f\u4e3a\u4e86\u83b7\u5f97IR\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e3a\u8be5\u6cdb\u578b\u51fd\u6570\u8c03\u5ea6\u54ea\u4e2a\u65b9\u6cd5\u3002Julia\u4e2d\u7684\u6bcf\u4e2a\u6cdb\u578b\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u65b9\u6cd5\u8868\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u7684\u7c7b\u578b\u7b7e\u540d\u6765\u83b7\u53d6\u6b64\u65b9\u6cd5\uff0c\u4f8b\u5982\u5f53\u60a8\u8c03\u7528foo(1.0)\u65f6\uff0cJulia\u5c06\u751f\u6210Tuple{typeof(Foo)\uff0cFloat64}\u6765\u8c03\u7528\u76f8\u5173\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u5177\u6709\u6b64\u7c7b\u578b\u7b7e\u540d\u7684IRTools.meta\u51fd\u6570\u6765\u83b7\u53d6\u6b64\u65b9\u6cd5\u7684\u5143\u4fe1\u606f\u3002\nJulia&&gt;\u63a8\u9001\uff01(ir\uff0c\uff1a(1+1))%5 Julia&&gt;IR 1\uff1a(%1\uff0c%2)%3=(Main.baz)(%2)%4=(Main.bar)(%3)%5=1+1\u8fd4\u56de%4\u3002\nIRTools\u5c06\u5728\u6b64\u81ea\u52a8\u4e3a\u60a8\u6dfb\u52a0\u53d8\u91cf\u540d\u79f0\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528INSERT\uff01\u8981\u5728\u7b2c\u56db\u4e2a\u53d8\u91cf\u4e4b\u524d\u63d2\u5165\u8bed\u53e5\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\nJulia&&gt;\u4f7f\u7528IRTools\uff1avar Julia&&gt;Insert\uff01(ir\uff0cvar(4)\uff0c\uff1a(1+1))%5 Julia&&gt;IR 1\uff1a(%1\uff0c%2)%3=(Main.baz)(%2)%5=1+1%4=(Main.bar)(%3)\u8fd4\u56de%4\u3002\nJulia&gt\uff1b\u4f7f\u7528IRTools\uff1a\u63d2\u5165\uff01Julia&&gt;\u63d2\u5165\u540e\uff01(ir\uff0cvar(4)\uff0c\uff1a(2+2))%6 Julia&gt\uff1bir 1\uff1a(%1\uff0c%2)%3=(Main.baz)(%2)%5=1+1%4=(Main.bar)(%3)%6=2+2\u8fd4\u56de%4\u3002\n\u6709\u4e86\u8fd9\u4e9b\u5de5\u5177\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u8fdb\u884c\u5411\u524d\u4f20\u7403\u7684\u8f6c\u6362\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c06\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u66ff\u6362\u4e3a\u5bf9Forward\u51fd\u6570\u7684\u51fd\u6570\u8c03\u7528\uff0c\u7136\u540e\u6536\u96c6Forward\u51fd\u6570\u8fd4\u56de\u7684\u6240\u6709\u56de\u8c03\u4ee5\u751f\u6210\u95ed\u5305\u3002\u4f46\u662f\u7b49\u7b49\uff01\u6211\u6ca1\u6709\u63d0\u5230\u95ed\u5408\uff0cSSA IR\u4e2d\u7684\u95ed\u5408\u662f\u4ec0\u4e48\uff1f\u6211\u4eec\u7a0d\u540e\u518d\u8003\u8651\u8fd9\u4e00\u70b9\uff0c\u5148\u5b9e\u73b0\u524d\u5411\u90e8\u5206\u7684\u8f6c\u6362\u3002\nJulia&gt\uff1bdump(ir[var(3)])IRTools.Statement expr\uff1aexpr head\uff1aSymbol Call args\uff1aarray{any}((2\uff0c))1\uff1aGlobalRef mod\uff1a\u6a21\u5757\u4e3b\u540d\uff1aSymbol Baz 2\uff1aIRTools.Variable id\uff1aInt64 2\u7c7b\u578b\uff1aAnyline\uff1aInt64 1\u3002\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u68c0\u67e5\u5176\u8868\u8fbe\u5f0f\u7684\u7b7e\u540d\u662f\u5426\u4e3acall\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528IRTools\u4e2d\u7684\u7ba1\u9053\u5bf9\u8c61\u8fdb\u884c\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u679c\u5b58\u50a8\u5728\u5176\u6210\u5458to\u4e2d\u3002\n\u6211\u4eec\u5c06\u6b64\u51fd\u6570\u547d\u540d\u4e3aREGISTER\uff0c\u56e0\u4e3a\u5b83\u5177\u6709\u4e0e\u6211\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u7684\u65e7REGISTER\u51fd\u6570\u7c7b\u4f3c\u7684\u529f\u80fd\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff1a\u73b0\u5728\u60a8\u4e0d\u9700\u8981\u4e3a\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u624b\u52a8\u7f16\u5199\u6b64\u5bc4\u5b58\u5668\u51fd\u6570\uff01\u6211\u4eec\u5c06\u81ea\u52a8\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n\u8b66\u544a\uff1a\u56e0\u4e3a\u6211\u662f\u7528REPL\u505a\u8fd9\u4e2a\u6f14\u793a\uff0c\u6240\u4ee5\u6211\u76f4\u63a5\u4f7f\u7528main\u6a21\u5757\uff0c\u5982\u679c\u60a8\u5c06\u4ee3\u7801\u653e\u5728\u60a8\u81ea\u5df1\u7684\u6a21\u5757\u4e2d\uff0c\u8bf7\u5c06\u5176\u66ff\u6362\u4e3a\u60a8\u7684\u6a21\u5757\u540d\u79f0\u3002\n\u51fd\u6570\u5bc4\u5b58\u5668(Ir)pr=\u7ba1\u9053(Ir)\u53c2\u6570\uff01(pr\uff0cat=1)for(v\uff0cst)in pr ex=st.expr if Meta.isexpr(ex\uff0c\uff1acall)yj=insert\uff01(pr\uff0cv\uff0cstmt(xcall(main\uff0c\uff1award\uff0cex.args.)\uff0cline=ir[v].line))pr[v]=xgetindex(yj\uff0c1)end Finish(Pr)end\u3002\n\u6211\u5c06\u5728\u8fd9\u91cc\u89e3\u91ca\u6211\u7684\u5de5\u4f5c\uff1a\u9996\u5148\uff0c\u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u4e3aFORWARD\u51fd\u6570\u751f\u6210IR\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u8fed\u4ee3\u6240\u6709\u7684\u53d8\u91cf\u548c\u8bed\u53e5\uff0c\u5982\u679c\u8bed\u53e5\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u6211\u4eec\u7528Callto Forward\u51fd\u6570\u66ff\u6362\u5b83\u3002\u8bb0\u4f4f\u5728\u8fd9\u91cc\u4fdd\u7559\u884c\u53f7\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u9519\u8bef\u6d88\u606f\u3002\u7531\u4e8eForward\u7684\u8fd4\u56de\u503c\u662f\u5b9e\u9645\u6b63\u5411\u6c42\u503c\u548c\u56de\u8c03\u7684\u5143\u7ec4\uff0c\u4e3a\u4e86\u83b7\u5f97\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6b64\u5143\u7ec4\u8fdb\u884c\u7d22\u5f15\uff0c\u5e76\u7528\u65b0\u53d8\u91cf\u66ff\u6362\u539f\u59cb\u53d8\u91cf\u3002\u8fd9\u91cc\u7684xgetindex\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u751f\u6210getindex\u7684\u8868\u8fbe\u5f0f\u3002\nJulia&&gt;\u5bc4\u5b58\u5668(Ir)1\uff1a(%3\uff0c%1\uff0c%2)%4=(Main.Forward)(Main.baz\uff0c%2)%5=(Base.getindex)(%4\uff0c1)%6=(Main.Forward)(Main.bar\uff0c%5)%7=(Base.getindex)(%6\uff0c1)\u8fd4\u56de%7\u3002\n\u73b0\u5728\uff0c\u662f\u8003\u8651\u95ed\u5408\u95ee\u9898\u7684\u65f6\u5019\u4e86\u3002\u662f\u7684\uff0c\u5728\u8fd9\u4e2a\u8f83\u4f4e\u7684\u5f62\u5f0f\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u95ed\u5305\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\u4e2d\uff01\n\u6b64\u5bf9\u8c61\u8fd8\u5c06\u5b58\u50a8\u51fd\u6570\u7b7e\u540d\uff0c\u56e0\u6b64\u5f53\u6211\u4eec\u8c03\u7528Pull Back\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u539f\u59cb\u8c03\u7528\u7684IR\u4ee5\u751f\u6210\u6b64Pull Back\u7684IR\u3002\u8fd9\u91cc\u7684\u6210\u5458\u6570\u636e\u5c06\u5b58\u50a8\u6240\u6709\u56de\u8c03\u7684\u5143\u7ec4\u53ca\u5176\u524d\u5411\u8c03\u7528\u7684\u987a\u5e8f\u3002\u4e3a\u4e86\u6784\u9020\u56de\u8c03\uff0c\u6211\u4eec\u9700\u8981\u51fd\u6570\u8c03\u7528\u7684\u7b7e\u540d\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4fee\u6539\u6211\u4eec\u7684\u5b9e\u73b0\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\u51fd\u6570\u5bc4\u5b58\u5668(ir\uff0cF)pr=\u7ba1\u9053(Ir)pbs=\u53d8\u91cf[]\u53c2\u6570\uff01(pr\uff0cat=1)for(v\uff0cst)in pr ex=st.expr if Meta.isexpr(ex\uff0c\uff1acall)yj=insert\uff01(pr\uff0cv\uff0cstmt(xcall(main\uff0c\uff1award\uff0cex.args.)\uff0cline=ir[v].line))pr[v]=xgetindex(yj\uff0c1)J=insert tafter\uff01(\u3002line=ir[v].line))PUSH\uff01(PBS\uff0cSUBPLACE(Pr\uff0cJ))End End Pr=Finish(Pr)v=Push\uff01(Pr\uff0cxtuple(PBS.))\u3002pbv=\u63a8\u9001\uff01(pr\uff0cexpr(\uff1acall\uff0ccallback{F}\uff0cv))return pr end\u3002\n\u4e3a\u4e86\u5b58\u50a8\u56de\u8c03\uff0c\u6211\u4eec\u9700\u8981\u4eceForward\u8fd4\u56de\u7684\u5143\u7ec4\u4e2d\u83b7\u53d6\u56de\u8c03\uff0c\u5e76\u5206\u914d\u4e00\u4e2a\u5217\u8868\u6765\u8bb0\u5f55\u6240\u6709\u56de\u8c03\u3002\n\u8fd9\u91ccxtuple\u7c7b\u4f3c\u4e8exgetindex\uff0c\u7528\u6765\u751f\u6210\u6784\u9020\u5143\u7ec4\u7684\u8868\u8fbe\u5f0f\u3002\n\u8ba9\u6211\u4eec\u5c06\u56de\u8c03\u548c\u539f\u59cb\u8fd4\u56de\u503c\u6253\u5305\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff0c\u7136\u540e\u8fd4\u56de\u5b83\uff01\n\u51fd\u6570\u5bc4\u5b58\u5668(ir\uff0cF)pr=\u7ba1\u9053(Ir)pbs=\u53d8\u91cf[]\u53c2\u6570\uff01(pr\uff0cat=1)for(v\uff0cst)in pr ex=st.expr if Meta.isexpr(ex\uff0c\uff1acall)yj=insert\uff01(pr\uff0cv\uff0cstmt(xcall(main\uff0c\uff1award\uff0cex.args.)\uff0cline=ir[v].line))pr[v]=xgetindex(yj\uff0c1)J=insert tafter\uff01(\u3002line=ir[v].line))PUSH\uff01(PBS\uff0cSUBPLACE(Pr\uff0cJ))End End Pr=Finish(Pr)v=Push\uff01(Pr\uff0cxtuple(PBS.))\u3002pbv=PUSH\uff01(pr\uff0cexpr(\uff1acall\uff0cbackback{F}\uff0cv))ret=pr.block[end].Branch[end].args[1]ret=Push\uff01(pr\uff0cxtuple(ret\uff0cpbv))pr.block[end].Branch[end].args[1]=ret return pr\uff0cpbs end\u3002\nRETURN\u8bed\u53e5\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u652f\uff0c\u5b83\u662f\u6700\u540e\u4e00\u4e2a\u4ee3\u7801\u5757\u7684\u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u7684\u6700\u540e\u4e00\u4e2a\u5206\u652f\u3002\nJulia&GT\uff1b\u5bc4\u5b58\u5668(ir\uff0cTuple{typeof(Foo)\uff0cFloat64})1\uff1a(%3\uff0c%1\uff0c%2)%4=(Main.Forward)(Main.baz\uff0c%2)%5=(Base.getindex)(%4\uff0c1)%6=(Base.getindex)(%4\uff0c2)%7=(Main.Forward)(Main.bar\uff0c%5)%8=(Base.getindex)(%7\uff0c1)%9=(Base.getindex)(%7\uff0c2)%10=(Core.tuple)(%9\uff0c%6)%11=(\u56de\u8c03{Tuple{typeof(Foo)\uff0cFloat64}\uff0cT}\u5176\u4e2dT)(%10)%12=(Core.tuple)(%8\uff0c%11)\u8fd4\u56de%12\u3002\n\u51fd\u6570\u6b63\u5411(f\uff0cxs.)\u3002t=\u5143\u7ec4{f\uff0cxs.}m=IRTools.meta(T)m==\u7a7a&amp\uff1b&amp\uff1b\u8fd4\u56de\u7aef\n\u6211\u4eec\u4f1a\u5148\u5f97\u5230\u5143\uff0c\u5982\u679c\u5143\u4e0d\u662f\u4ec0\u4e48\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u5230\u6b64\u4e3a\u6b62\u3002\u5982\u679c\u6211\u4eec\u6709\u5143\u6570\u636e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u4e2d\u83b7\u53d6IR\u5e76\u5c06\u5176\u6ce8\u518c\u3002\n\u51fd\u6570\u6b63\u5411(f\uff0cxs.)\u3002t=\u5143\u7ec4{f\uff0cxs.}m=IRTools.meta(T)m==\u7a7a&amp\uff1b&amp\uff1breturn frw=register(IR(M)\uff0cT)end\u3002\n\u4f46\u662f\uff0c\u5bf9\u8c61frw\u7684\u7c7b\u578b\u662fIR\u800c\u4e0d\u662fCodeInfo\uff0c\u8981\u4e3aJulia\u7f16\u8bd1\u5668\u751f\u6210CodeInfo\uff0c\u6211\u4eec\u9700\u8981\u5c06\u53c2\u6570\u540d\u79f0\u653e\u56de\u3002\n\u7531\u4e8e\u8f6c\u53d1\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fvararg\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u6807\u8bb0\u4ee5\u8ba9\u7f16\u8bd1\u5668\u77e5\u9053\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u5411\u7b2c\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u63d0\u4f9bTuple\u3002\n\u51fd\u6570\u6b63\u5411(f\uff0cxs.)\u3002t=tuple{f\uff0cxs.}m=IRTools.meta(T)m==\u7a7a&amp\uff1b&amp\uff1breturn frw=register(IR(M)\uff0cT)argname\uff01(M\uff0cSymbol(&#34\uff1b#self#&#34\uff1b)\uff0c\uff1af\uff0c\uff1axs)frw=varargs\uff01(M\uff0cfrw\uff0c2)return IRTools.update\uff01(M\uff0cfrw)end\u3002\nJulia&GT\uff1b\u8f6c\u53d1(Foo\uff0c1.0)1\uff1a(%1\uff0c%2\uff0c%3)%4=(Base.getfield)(%3\uff0c1)%5=(Main.Forward)(Main.baz\uff0c%4)%6=(Base.getindex)(%5\uff0c1)%7=(Base.getindex)(%5\uff0c2)%8=(Main.Forward)(Main.bar\uff0c%6)%9=(Base.getindex)(%8\uff0c1)%10=(Base.getindex)(%8\uff0c2)%11=(Core.tuple)(%10\uff0c%7)%12=(Main.Pull{Tuple{typeof(Foo)\uff0cFloat64}\uff0cT}\u5176\u4e2dT)(%11)%13=(Core.tuple)(%9\uff0c%12)\u8fd4\u56de%13\u3002\nJulia&GT\uff1bForward(foo\uff0c1.0)\u9519\u8bef\uff1aMethodError\uff1a\u6ca1\u6709\u4e0egetIndex(\uff1a\uff1aNothing\uff0c\uff1a\uff1aInt64)\u5339\u914d\u7684\u65b9\u6cd5\u3002\u5806\u6808\u8ddf\u8e2a\uff1a[1]*at./float.jl\uff1a399[inline][2]Forward(\uff1a\uff1aTypeof(*)\uff0c\uff1a\uff1aFloat64\uff0c\uff1a\uff1aFloat64)\u4f4d\u4e8e/Users/roger/.julia/dev/YASSAD/src/compiler.jl\uff1a0[3]baz at./repl[4]\uff1a1[inlined][4]Forward(\uff1a\uff1aTypeof(Baz)\uff0c\uff1a\uff1aFloat64)\u4f4d\u4e8e/Users/roger/.julia/dev/YASSAD/src/compiler.jl\uff1a0[5]Foo at./repl[2]\uff1a1[\u5185\u8054][6]Forward(\uff1a\uff1aTypeOf(Foo)\uff0c\uff1a\uff1aFloat64)\u4f4d\u4e8e/Users/roger/.julia/dev/YASSAD/src/compiler.jl\uff1a0[7]\u9876\u7ea7\u4f5c\u7528\u57dfNone\uff1a0\u3002\n\u8fd9\u662f\u56e0\u4e3aForward\u5c06\u88ab\u9012\u5f52\u8c03\u7528\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u91cd\u8f7dForward\u51fd\u6570\u6765\u5b9a\u4e49\u6700\u5185\u90e8\u7684(\u539f\u8bed)\u64cd\u4f5c\u7b26\uff0c\u4f8b\u5982\uff0c\u5728\u672c\u4f8b\u4e2d\u6211\u4eec\u53ef\u4ee5\u91cd\u8f7d*\u64cd\u4f5c\u7b26\nJulia&gt\uff1bForward(\uff1a\uff1aTypeof(*)\uff0ca\uff1a\uff1aReal\uff0cb\uff1a\uff1aReal)=a*b\uff0c\u0394-&gt\uff1b(\u0394*b\uff0ca*\u0394)Julia&gt\uff1bForward(FOO\uff0c1.0)(1.0\uff0cYASSAD.Pull Back{.}\u3002\n\u4f46\u8fd9\u4e00\u56de\u8c03\u76ee\u524d\u8fd8\u4e0d\u80fd\u8d4e\u56de\u3002\u8ba9\u6211\u4eec\u751f\u6210\u7528\u4e8e\u56de\u8c03\u7684IR\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u3002\n\u51fd\u6570(\uff1a\uff1aPULLBACK{S})(Delta)\u5176\u4e2dSm=IRTools.meta(S)m=\u7a7a&amp\uff1b&amp\uff1breturn ir=IR(M)_\uff0cPbs=register(ir\uff0cS)back=\u4f34\u968f(ir\uff0cPBS)argname\uff01(M\uff0cSymbol(&#34\uff1b#self#&#34\uff1b)\uff0c\uff1aDelta)return IRTools.update\uff01(M\uff0cback)end\u3002\n\u56e0\u4e3a\u540e\u5411\u4f20\u9012\u662f\u5355\u72ec\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u518d\u6709\u524d\u5411IR\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fd9\u91cc\u518d\u6b21\u8c03\u7528register\uff0c\u4f46\u662f\u4e0d\u7528\u62c5\u5fc3\uff0c\u8fd9\u53ea\u4f1a\u5728\u7f16\u8bd1\u65f6\u53d1\u751f\u4e00\u6b21\u3002\u5728\u4e3a\u4f34\u968f\u7a0b\u5e8f\u751f\u6210IR\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053\u54ea\u4e2a\u53d8\u91cf\u6709\u56de\u8c03\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2aDICT\u6765\u5b58\u50a8\u5b83\uff0c\u5e76\u5c06\u5176\u8fd4\u56de\u5230\u56de\u8c03\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5217\u8868\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u6211\u4eec\u7684\u767b\u8bb0\u518c\u5982\u4e0b\u3002\n\u51fd\u6570\u5bc4\u5b58\u5668(ir\uff0cF)pr=\u7ba1\u9053(Ir)pbs=dict{\u53d8\u91cf\uff0c\u53d8\u91cf}()\u53c2\u6570\uff01(pr\uff0cat=1)for(v\uff0cst)in pr ex=st.expr if Meta.isexpr(ex\uff0c\uff1acall)yj=insert\uff01(pr\uff0cv\uff0cstmt(xcall(main\uff0c\uff1award\uff0cex.args.)\uff0cline=ir[v].line))pr[v]=xgetindex(yj\uff0c1)J=\u30022)\uff0cline=ir[v].line))Pbs[v]=\u66ff\u6362(Pr\uff0cJ)End End Pr=Finish(Pr)v=Push\uff01(Pr\uff0cxtuple(Values(Pbs).))\u3002pbv=PUSH\uff01(pr\uff0cexpr(\uff1acall\uff0cbackback{F}\uff0cv))ret=pr.block[end].Branch[end].args[1]ret=Push\uff01(pr\uff0cxtuple(ret\uff0cpbv))pr.block[end].Branch[end].args[1]=ret return pr\uff0cpbs end\u3002\n\u56e0\u4e3a\u4f34\u968f\u7a0b\u5e8f\u4e0e\u539f\u59cbIR\u7684\u987a\u5e8f\u76f8\u53cd\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u4f1a\u4f7f\u7528\u7ba1\u9053\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684IR\u5bf9\u8c61\uff0c\u5e76\u5728\u8fd9\u91cc\u5411\u5176\u6dfb\u52a0\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u62c9\u56de\u5bf9\u8c61\u672c\u8eab\uff0c\u53e6\u4e00\u4e2a\u662f\u5411\u540e\u4f20\u9012(\u62c9\u56de)\u7684\u8f93\u5165\u6e10\u53d8\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u56de\u8c03\u4e00\u4e0b\u3002\u6211\u5728\u8fd9\u91cc\u8c03\u7528\u7684getfield\u51fd\u6570\u662f\u8bed\u6cd5SUGER\u7684\u4f4e\u7ea7\u5f62\u5f0f\u3002\u5bf9\u4e8e\u83b7\u53d6\u6210\u5458\uff0c\u8fd9\u7b49\u540c\u4e8eself.data\u3002\nvars=\u957f\u5ea6\u4e3ak\u7684\u5bc6\u94a5(Ir)(Vars)\uff1a-1\uff1a1 v=vars[k]ex=ir[v].expr if Haskey(pbs\uff0cv)pbv=insert\uff01(adj\uff0ccalllback\uff0cxcall(\uff1agetindex\uff0cbacklback\uff0ck))g=\u63a8\u9001\uff01(adj\uff0cexpr(\uff1acall\uff0cpbv\uff0cv))end\n\u5982\u679c\u6b64\u53d8\u91cf\u5b58\u5728\u4e8e\u6211\u4eec\u7684\u56de\u8c03\u5b57\u5178\u4e2d\uff0c\u6211\u4eec\u5c06\u83b7\u53d6\u5b83\u5e76\u4f7f\u7528\u6b64\u53d8\u91cf\u8c03\u7528\u5b83\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u5b9e\u73b0\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u6709\u591a\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b83\u4eec\u7d2f\u52a0\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u9700\u8981\u8bb0\u5f55\u8fd9\u4e9b\u53d8\u91cf\u7684\u68af\u5ea6\u3002\nxaccum\u4e0e\u524d\u9762\u7684xgetindex\u76f8\u540c\uff0c\u4f46\u662fJulia\u4e2d\u7684\u5185\u7f6e\u7d2f\u52a0\u51fd\u6570\u5b9a\u4e49\u5728\u6570\u7ec4\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u6765\u7d2f\u52a0\u53d8\u91cf\uff0c\u8ba9\u6211\u4eec\u81ea\u5df1\u6765\u505a\u5427\u3002\nxaccum(Ir)=\u65e0xaccum(ir\uff0cx)=x xaccum(ir\uff0cxs.)=Push\uff01(ir\uff0cxcall(YASSAD\uff0c\uff1aACCUM\uff0cXs.))\u3002accum()=Nothing accum(X)=x accum(x\uff0cy)=x=Nothing\uff1fY\uff1aY==\u4ec0\u4e48\u90fd\u6ca1\u6709\uff1fx\uff1ax+y accum(x\uff0cy\uff0czs.)=accum(accum(x\uff0cy)\uff0czs.)\u3002accum(x\uff1a\uff1atuple\uff0cy\uff1a\uff1atuple)=accum.(x\uff0cy)accum(x\uff1a\uff1aAbstractArray\uff0cy\uff1a\uff1aAbstractArray)=accum.(x\uff0cy)\u3002\n\u6700\u540e\uff0c\u56de\u8c03\u5c06\u8fd4\u56de\u539f\u59cb\u7a0b\u5e8f\u7684\u6bcf\u4e2a\u8f93\u5165\u53d8\u91cf\u7684\u68af\u5ea6\u3002\u8fd9\u610f\u5473\u7740\u5b83\u603b\u662f\u6709\u4e0e\u8f93\u5165\u53d8\u91cf\u76f8\u540c\u6570\u91cf\u7684\u68af\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u7684\u524d\u5411\u51fd\u6570\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53d8\u91cf\uff0c\u90a3\u5c31\u662f\u51fd\u6570\uff0c\u6211\u4eec\u4e5f\u4f1a\u8fd4\u56de\u5b83\u7684\u68af\u5ea6\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u662f\u96f6\uff0c\u4f46\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u95ed\u5305\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u80fd\u4e0d\u662f\u96f6\u3002\n\u51fd\u6570ADJE(ir\uff0cpbs)adj=Empty(Ir)Self=Argument\uff01(Adj)Delta=Argument\uff01(adj\uff0cxcall(\uff1agetfield\uff0cself\uff0cQuoteNode(\uff1aData)grads=dict()grad(x\uff0cx\u0304)=Push\uff01(Get\uff01(grads\uff0cx\uff0c[])\uff0cx\u0304)grad(X)=xaccum(adj\uff0cGet(grads\uff0cx\uff0c[]))\u3002grad(last(key(Ir))\uff0c\u589e\u91cf)vars=k\u957f\u5ea6(Vars)\u7684\u5bc6\u94a5(Ir)\uff1a-1\uff1a1 v=vars[k]ex=ir[v].expr if Haskey(pbs\uff0cv)pbv=insert tter\uff01(adj\uff0ccalllback\uff0cxcall(\uff1agetindex\uff0cbacklback\uff0ck))g=Push\uff01(adj\uff0cexpr(\uff1acall\uff0cpbv\uff0cgrad(V)(i\uff0cx)in\u3002PUSH\uff01(adj\uff0cxgetindex(g\uff0ci))END GS=[\u53c2\u6570x\u7684grad(X)(Ir)]\u0394=Push\uff01(adj\uff0cxtuple(gs.))\u3002RETURN\uff01(adj\uff0c\u0394)RETURN ADJ END\u3002\n\u56de\u987e\u4e00\u4e0b\u6211\u4eec\u521a\u521a\u5b9e\u73b0\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u3002\n..", "note_en": "I wrote a blog post about how to implement your own (operator overloading based) automatic differentiation (AD) in one day (actually 3 hrs) last year. AD looks like magic sometimes, but I\u2019m going to talk about some black magic this time: the sourceto source automatic differentiation. I wrote this during JuliaCon 2019 hackthon with help from  Mike Innes.It turns out that writing a blog post takes longer than writing a source to source AD ;-). This is basically just simple version of Zygote.\n I wrap this thing as a very simple package here, if you want to look at more detailed implementation:  YASSAD.jl.\n If you have used operator overloading based AD like  PyTorch,  Flux/Tracker,  AutoGrad, you may find they have some limitations:\n A  Tensor type or  Variable type provided by the package has to be used for tracing the function calls\n They cannot handle control flows in general, even in some cases, some workarounds can be taken\n However, programming without control flow is not programming! And it is usually very annoying to rewrite a lot code with tracked types. If we want to have a framework for  Differentiable Programming as what people like  Yan LeCun has been proposing, we need to solve these two problems above.\n In fact, these problems are quite straight forward to solve in source to source automatic differentiation, since we basically know everything happens. I will implement a very simple source to source AD without handling control flows, you can also check the complete implementation as  Zygote.jl.\n     the Julia parser will parse the strings first to get an Abstract Syntax Tree (AST)\n some of the nodes in this AST are macros, macros are like compiled time functions on expressions, the compiler will expand the macros. Then we get an expanded version of AST, which do not have any macros. You can inspect the results with  @macroexpand.\n Now, we will lower the AST, get rid of syntax sugars and represent them in Static Single Assignment Form (SSA), you can get it with  @code_lowered, and you can modify this process with Julia  macros.\n When function call happens, we use the function signature to dispatch the function to a certain method, and start doing type inference. You can modify this process with  @generated functions, and check the results with  @code_typed.\n  After we have llvm IR, Julia will use llvm to generate native code to actually exectute this function.\n By executing the function, we will meet another function call, so we go back to step 5\n   As you can see. Julia is not a static compiled language, and it uses function as boundary of compilation.\n  A complete introduction of SSA can be  a book. But to implement your own sourceto source AD only require three simple concept:\n  If you have read my last post, I believe you have understand what is computation graph, but now let\u2019s look at this diagram again: what is this computation graph exactly?\n  While doing the automatic differentiation, we represent the process of computation as a diagram. Each node is an operator with a intermediate value. And each operator also have an  adjoint operator which will be used in backward pass. Which means each variablein each node will only be assigned once. This is just a simple version of SSA Form right?\n The gradient can be then considered as an adjoint program of the original program. And the only thing we need to do is to generate the adjoint program. In fact, this is often called Wengert list, tape or graph as described in  Zygote\u2019s paper: Don\u2019t Unroll Adjoint. Thus we can directly use the SSA form as our computational graph. Moreover, since in Julia the SSA form IR is lowered, it also means we only need to defined a few primitive routines instead of defining a lot operators.\n Since the backward pass is just an adjoint of the original program, we can just write it as a closure\n function forward(::typeof(your_function), xs...)    # function declaration   output =  # function output   output,  function (\u0394)    # a closure    end   end\n The advantage of defining this as closure is that we can let the compiler itself handle shared variable between the adjoint programand the original program instead of managing it ourselves (like what we do in my last post). We call these closures  pullbacks.\n    function forward(::typeof(foo), x)   x1, back1 = forward(baz, x)   x2, back2 = forward(bar, x1)    return x2,  function (\u0394)   dx1 = back2(\u0394)   dx2 = back1(dx1)    return dx2    end   end\n In general, an adjoint program without control flow is just applying these pullbacks generated by their  forward function in reversed order. But how do we do this automatically? Someone may say: let\u2019s use macros! Err, we can do that. But our goal is to differentiate arbitrary function defined by someone else, so things can be composable. This is not what we want. Instead, we can tweak the IR, the  generated functions in Julia can not only return a modified AST from type information, it can also return the IR.\n   It looks like a function as well, but the difference is that inside the function, the value of each function argument  a,  b,  cis their type since we do not have their values during compile time.\n  In order to manipulate the IR, we need some tools. Fortunately, there are some in  IRTools, we will use this package to generate the IR code.\n First, we can use  @code_ir to get the  IR object processed by  IRTools. Its type is  IR. The difference between the one you get from  @code_lowered is that this will not store the argument name, all the variables are represented by numbers, and there are some useful function implemented for this type.\n  In this form, each line of code is binded to a variable, we call the right hand statement, and left hand variable. You use a dict-like interface to use this object, e.g\n  It will return a statement object, which stores the expression of this statement, the inferred type (since we are using the IR before type inference, this is  Any). For simplicity, we will not use typed IR in this post (since in principal, their implementations are similar). The last number is the line number.\n What is the first number  1 in the whole block? It means code block, in SSA form we use this to represent branches, e.g\n julia&gt;  function foo(x)    if x &gt;  1   bar(x)    else   baz(x)    end    end  foo (generic  function with  1 method)    julia&gt;   foo( 1.0)   1: (% 1, % 2)   % 3 = % 2 &gt;  1   br  3 unless % 3   2:   % 4 = (Main.bar)(% 2)    return % 4   3:   % 5 = (Main.baz)(% 2)    return % 5\n ifelse is just branch statement in lowered SSA form, and in fact,  for loops are similar. Julia\u2019s for loop is just a syntax sugar of  iterate function. As long as we can differentiate through  br, we will be able to differentiate through control flows.\n julia&gt;  function foo(x)    for x  in  1: 10   bar(x)    end   baz(x)    end  foo (generic  function with  1 method)    julia&gt;   foo( 1.0)   1: (% 1, % 2)   % 3 =  1: 10   % 4 = (Base.iterate)(% 3)   % 5 = % 4 ===  nothing   % 6 = (Base.not_int)(% 5)   br  3 unless % 6   br  2 (% 4)   2: (% 7)   % 8 = (Core.getfield)(% 7,  1)   % 9 = (Core.getfield)(% 7,  2)   % 10 = (Main.bar)(% 8)   % 11 = (Base.iterate)(% 3, % 9)   % 12 = % 11 ===  nothing   % 13 = (Base.not_int)(% 12)   br  3 unless % 13   br  2 (% 11)   3:   % 14 = (Main.baz)(% 2)    return % 14\n So how do we get the IR? In order to get the IR, we need to know which method is dispatched for this generic function. Each genericfunction in Julia has a method table, you can use the type signature of the function call to get this method, e.g when you call  foo(1.0), Julia will generate  Tuple{typeof(foo), Float64} to call the related method. We can get the meta information of this method by providing the  IRTools.meta function with this type signature\n   julia&gt; push!(ir, :( 1+ 1))  % 5    julia&gt; ir   1: (% 1, % 2)   % 3 = (Main.baz)(% 2)   % 4 = (Main.bar)(% 3)   % 5 =  1 +  1    return % 4\n IRTools will add the variable name for you automatically here. Similarly, we can use  insert! to insert a statement before the 4th variable:\n julia&gt;  using IRTools: var    julia&gt; insert!(ir, var( 4), :( 1+ 1))  % 5    julia&gt; ir   1: (% 1, % 2)   % 3 = (Main.baz)(% 2)   % 5 =  1 +  1   % 4 = (Main.bar)(% 3)    return % 4\n  julia&gt;  using IRTools: insertafter!    julia&gt; insertafter!(ir, var( 4), :( 2+ 2))  % 6    julia&gt; ir   1: (% 1, % 2)   % 3 = (Main.baz)(% 2)   % 5 =  1 +  1   % 4 = (Main.bar)(% 3)   % 6 =  2 +  2    return % 4\n With these tools, we can now do the transformation of forward pass. Our goal is to replace each function call with the function call to  forward function and then collect all the pullbacks returned by  forward function to generate a closure. But wait! I didn\u2019t mention closure, what is the closure in SSA IR? Let\u2019s consider this later, and implement the transformation of forward part first.\n  julia&gt; dump(ir[var( 3)])  IRTools.Statement   expr:  Expr   head:  Symbol call   args:  Array{ Any}(( 2,))    1:  GlobalRef   mod:  Module Main   name:  Symbol baz    2: IRTools.Variable   id:  Int64  2    type:  Any   line:  Int64  1\n In fact, we only need to check whether the signature of its expression is  call. We can use the  Pipe object in  IRTools to do the transformation, the transformation results are stored in its member  to.\n    We name this function as  register since it has similar functionality as our old  register function in my last post. The only difference is: you don\u2019t need to write this  register function manually for each operator now! We are going to do this automatically.\n Warning: since I\u2019m doing this demo in REPL, I use  Main module directly, if you put the code in your own module, replace it with your module name.\n function register(ir)   pr =  Pipe(ir)   argument!(pr, at =  1)    for (v, st)  in pr   ex = st.expr    if Meta.isexpr(ex, :call)   yJ = insert!(pr, v, stmt(xcall(Main, :forward, ex.args...), line = ir[v].line))   pr[v] = xgetindex(yJ,  1)    end    end   finish(pr)   end\n I\u2019ll explain what I do here: first since we are generating the IR for the  forward function, we have an extra argument now\n   Then, we need to iterate through all the variables and statements, if the statement is a function call then we replace it with the callto  forward function. Remember to keep the line number here, since we still want some error message. Since the returned value of  forward is a tuple of actually forward evaluation and the pullback, to get the correct result we need to index this tuple, and replacethe original variable with the new one. The  xgetindex here is a convenient function that generates the expression of  getindex\n   julia&gt; register(ir)   1: (% 3, % 1, % 2)   % 4 = (Main.forward)(Main.baz, % 2)   % 5 = (Base.getindex)(% 4,  1)   % 6 = (Main.forward)(Main.bar, % 5)   % 7 = (Base.getindex)(% 6,  1)    return % 7\n  Now, it\u2019s time to consider the closure problem. Yes, in this lowered form, we don\u2019t have closures. But we can instead store them in a callable object!\n  This object will also store the function signature, so when we call pullback, we can look up the IR of the original call to generate the IR of this pullback. The member  data here will store a  Tuple of all pullbacks with the order of their  forward call. In order to construct the  Pullback we need the signature of our function call, so we need to revise our implementation as following.\n function register(ir, F)   pr =  Pipe(ir)   pbs = Variable[]   argument!(pr, at =  1)    for (v, st)  in pr   ex = st.expr    if Meta.isexpr(ex, :call)   yJ = insert!(pr, v, stmt(xcall(Main, :forward, ex.args...), line = ir[v].line))   pr[v] = xgetindex(yJ,  1)   J = insertafter!(pr, v, stmt(xgetindex(yJ,  2), line = ir[v].line))   push!(pbs, substitute(pr, J))    end    end   pr = finish(pr)   v = push!(pr, xtuple(pbs...))   pbv = push!(pr,  Expr(:call, Pullback{F}, v))    return pr   end\n In order to store the pullbacks, we need to get the pullback from the tuple returned by  forward and allocate a list to record all pullbacks.\n Here  xtuple is similar to  xgetindex, it is used to generate the expression of constructing a tuple.\n  Let\u2019s pack the pullback and the original returned value as a tuple together, and return it!\n function register(ir, F)   pr =  Pipe(ir)   pbs = Variable[]   argument!(pr, at =  1)    for (v, st)  in pr   ex = st.expr    if Meta.isexpr(ex, :call)   yJ = insert!(pr, v, stmt(xcall(Main, :forward, ex.args...), line = ir[v].line))   pr[v] = xgetindex(yJ,  1)   J = insertafter!(pr, v, stmt(xgetindex(yJ,  2), line = ir[v].line))   push!(pbs, substitute(pr, J))    end    end   pr = finish(pr)   v = push!(pr, xtuple(pbs...))   pbv = push!(pr,  Expr(:call, Pullback{F}, v))   ret = pr.blocks[ end].branches[ end].args[ 1]   ret = push!(pr, xtuple(ret, pbv))   pr.blocks[ end].branches[ end].args[ 1] = ret    return pr, pbs   end\n The  return statement is actually a simple branch, it is the last branch of the last statement of the last code block.\n  julia&gt; register(ir,  Tuple{typeof(foo),  Float64})   1: (% 3, % 1, % 2)   % 4 = (Main.forward)(Main.baz, % 2)   % 5 = (Base.getindex)(% 4,  1)   % 6 = (Base.getindex)(% 4,  2)   % 7 = (Main.forward)(Main.bar, % 5)   % 8 = (Base.getindex)(% 7,  1)   % 9 = (Base.getindex)(% 7,  2)   % 10 = (Core.tuple)(% 9, % 6)   % 11 = (Pullback{ Tuple{typeof(foo), Float64},T}  where T)(% 10)   % 12 = (Core.tuple)(% 8, % 11)    return % 12\n  function forward(f, xs...)   T =  Tuple{f, xs...}   m = IRTools.meta(T)   m ===  nothing &amp;&amp;  return   end\n We will get the meta first, if the meta is  nothing, it means this method doesn\u2019t exist, so we just stop here. If we have the meta, thenwe can get the  IR from it and put it to  register\n function forward(f, xs...)   T =  Tuple{f, xs...}   m = IRTools.meta(T)   m ===  nothing &amp;&amp;  return   frw = register(IR(m), T)   end\n However, the object  frw has type  IR instead of  CodeInfo, to generate the  CodeInfo for Julia compiler, we need to put argument names back with\n  And since the second argument of our  forward function is a vararg, we need to tag it to let our compiler know, so the compiler will not feed the first function call with a  Tuple.\n   function forward(f, xs...)   T =  Tuple{f, xs...}   m = IRTools.meta(T)   m ===  nothing &amp;&amp;  return   frw = register(IR(m), T)   argnames!(m,  Symbol( &#34;#self#&#34;), :f, :xs)   frw = varargs!(m, frw,  2)    return IRTools.update!(m, frw)   end\n  julia&gt;   forward(foo,  1.0)   1: (% 1, % 2, % 3)   % 4 = (Base.getfield)(% 3,  1)   % 5 = (Main.forward)(Main.baz, % 4)   % 6 = (Base.getindex)(% 5,  1)   % 7 = (Base.getindex)(% 5,  2)   % 8 = (Main.forward)(Main.bar, % 6)   % 9 = (Base.getindex)(% 8,  1)   % 10 = (Base.getindex)(% 8,  2)   % 11 = (Core.tuple)(% 10, % 7)   % 12 = (Main.Pullback{ Tuple{typeof(foo), Float64},T}  where T)(% 11)   % 13 = (Core.tuple)(% 9, % 12)    return % 13\n  julia&gt; forward(foo,  1.0)  ERROR:  MethodError: no method matching getindex(::Nothing, :: Int64)  Stacktrace:   [ 1] * at ./float.jl: 399 [inlined]   [ 2] forward(::typeof(*), :: Float64, :: Float64) at /Users/roger/.julia/dev/YASSAD/src/compiler.jl: 0   [ 3] baz at ./REPL[ 4]: 1 [inlined]   [ 4] forward(::typeof(baz), :: Float64) at /Users/roger/.julia/dev/YASSAD/src/compiler.jl: 0   [ 5] foo at ./REPL[ 2]: 1 [inlined]   [ 6] forward(::typeof(foo), :: Float64) at /Users/roger/.julia/dev/YASSAD/src/compiler.jl: 0   [ 7] top-level scope at none: 0\n This is because the  forward will be recursively called, which also means we only need to define the inner most (primitive) operators by overloading the  forward functions, e.g we can overload the  * operator in this case\n julia&gt; forward(::typeof(*), a:: Real, b:: Real) = a * b, \u0394-&gt;(\u0394*b, a*\u0394)    julia&gt; forward(foo,  1.0)  ( 1.0, YASSAD.Pullback{.....}\n  But this pullback is not callable yet. Let\u2019s generate the IR for pullback. Similarly, we can define\n function (::Pullback{S})(delta)  where S   m = IRTools.meta(S)   m ===  nothing &amp;&amp;  return   ir = IR(m)   _, pbs = register(ir, S)   back = adjoint(ir, pbs)   argnames!(m,  Symbol( &#34;#self#&#34;), :delta)    return IRTools.update!(m, back)   end\n Because the backward pass is called separately, we don\u2019t have the forward IR anymore, unfortunately we need to call  register again here, but no worries, this will only happen once during compile time. Before we generate the IR for adjoint program, we also need to know which variable has pullback, thus instead of using a list, we need a dict to store this, and return it to pullback. Therefore, we need to revise our  register as following\n function register(ir, F)   pr =  Pipe(ir)   pbs =  Dict{Variable, Variable}()   argument!(pr, at =  1)    for (v, st)  in pr   ex = st.expr    if Meta.isexpr(ex, :call)   yJ = insert!(pr, v, stmt(xcall(Main, :forward, ex.args...), line = ir[v].line))   pr[v] = xgetindex(yJ,  1)   J = insertafter!(pr, v, stmt(xgetindex(yJ,  2), line = ir[v].line))   pbs[v] = substitute(pr, J)    end    end   pr = finish(pr)   v = push!(pr, xtuple(values(pbs)...))   pbv = push!(pr,  Expr(:call, Pullback{F}, v))   ret = pr.blocks[ end].branches[ end].args[ 1]   ret = push!(pr, xtuple(ret, pbv))   pr.blocks[ end].branches[ end].args[ 1] = ret    return pr, pbs   end\n since the adjoint program has the reversed order with the original IR, we will not use  Pipe here, we can create an empty  IR object,and add two argument to it here, one is the  Pullback object itself, the other is the input gradient of the backward pass (pullback).\n  First, let\u2019s get our pullbacks. The  getfield function I call here is the lowered form of syntax sugar  . for getting members, this is equivalent to  self.data.\n   vars = keys(ir)   for k  in length(vars):- 1: 1   v = vars[k]   ex = ir[v].expr    if haskey(pbs, v)   pbv = insertafter!(adj, pullbacks, xcall(:getindex, pullbacks, k))   g = push!(adj,  Expr(:call, pbv, v))    end   end\n if this variable exists in our dict of pullbacks, we get it and call it with this variable. However, there is a problem of this implementation, if one variable has multiple gradient, we need to accumulate them together, thus we need to record these variables\u2019gradietns as well.\n       The  xaccum is the same as previous  xgetindex, but the builtin  accumulate function in Julia is defined on arrays, we need one to accumulate variant variables, let\u2019s do it ourselves\n xaccum(ir) =  nothing  xaccum(ir, x) = x  xaccum(ir, xs...) = push!(ir, xcall(YASSAD, :accum, xs...))  accum() =  nothing  accum(x) = x  accum(x, y) =   x ==  nothing ? y :   y ==  nothing ? x :   x + y    accum(x, y, zs...) = accum(accum(x, y), zs...)    accum(x:: Tuple, y:: Tuple) = accum.(x, y)  accum(x:: AbstractArray, y:: AbstractArray) = accum.(x, y)\n In the end, the pullback will return each input variable\u2019s gradient of the original program. Which means it always hasthe same number of gradients as input variables. But our  forward function has one extra variable which is the function,we will return its gradient as well, in most cases, it is  nothing, but if it is a closure, or a callable object, it maynot be  nothing.\n  function adjoint(ir, pbs)   adj = empty(ir)   self = argument!(adj)   delta = argument!(adj)   pullbacks = pushfirst!(adj, xcall(:getfield, self,  QuoteNode(:data)))     grads =  Dict()   grad(x, x\u0304) = push!(get!(grads, x, []), x\u0304)   grad(x) = xaccum(adj, get(grads, x, [])...)   grad(last(keys(ir)), delta)     vars = keys(ir)    for k  in length(vars):- 1: 1   v = vars[k]   ex = ir[v].expr    if haskey(pbs, v)   pbv = insertafter!(adj, pullbacks, xcall(:getindex, pullbacks, k))   g = push!(adj,  Expr(:call, pbv, grad(v)))      for (i, x)  in enumerate(ex.args)   x  isa Variable ||  continue   grad(x, push!(adj, xgetindex(g, i)))    end    end    end   gs = [grad(x)  for x  in arguments(ir)]   \u0394 = push!(adj, xtuple(gs...))    return!(adj, \u0394)    return adj   end\n  Reviewing what we just implemented above, we can find \n......", "posttime": "2020-06-12 00:14:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "julia,\u4ee3\u7801,\u5e7f\u544a,source,ir", "title": "\u4f7f\u7528Julia\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684\u6e90\u4ee3\u7801\u8f6c\u6362\u5e7f\u544a", "title_en": "Implement your own source transformation AD with Julia", "transed": 1, "url": "http://blog.rogerluo.me/2019/07/27/yassad/", "via": "", "real_tags": ["julia", "\u4ee3\u7801", "\u5e7f\u544a", "source", "ir"]}, {"category": "", "categoryclass": "", "imagename": "192f094615fe29e7d32a40a22025450c.png", "infoid": 1006152, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u66f4\u597d\u7684PSD\u652f\u6301\uff1a\u73b0\u5728\u53ef\u4ee5\u5bfc\u51fa16\u4f4d\u6587\u4ef6\uff0c\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8bfb/\u5199\u901a\u9053\u3002\n\u5728\u4e0a\u4e00\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u542c\u53d6\u4e86\u7528\u6237\u5173\u4e8e\u5728\u5de5\u5177\u7bb1\u4e2d\u5f15\u5165\u5de5\u5177\u7ec4\u7684\u53cd\u9988\u3002\u5f88\u591a\u4eba\u544a\u8bc9\u6211\u4eec\uff0c\u4ed6\u4eec\u603b\u4f53\u4e0a\u5f88\u6b23\u8d4f\u8fd9\u4e2a\u6539\u53d8\uff0c\u4f46\u662f\u4ed6\u4eec\u975e\u5e38\u53cd\u5bf9\u5728\u4e00\u4e2a\u7ec4\u4e2d\u70b9\u51fb\u6253\u5f00\u5de5\u5177\u5217\u8868\u3002\u65b0\u7248\u672c\u589e\u52a0\u4e86\u4e00\u5c06\u9f20\u6807\u60ac\u505c\u5728\u5de5\u5177\u7bb1\u6309\u94ae\u4e0a\u5c31\u663e\u793a\u5de5\u5177\u7ec4\u83dc\u5355\u7684\u9009\u9879\uff0c\u800c\u4e0d\u5fc5\u5355\u51fb\u5b83\u3002\u5f53\u5de5\u5177\u7bb1\u6392\u5217\u5728\u5355\u4e2a\u5217\u4e2d\u65f6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u542f\u7528\u6b64\u9009\u9879\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u9996\u9009\u9879\u5bf9\u8bdd\u6846\u7684\u5de5\u5177\u7bb1\u9875\u9762\u4e3a\u4efb\u610f\u5de5\u5177\u7bb1\u5e03\u5c40\u542f\u7528\u8be5\u9009\u9879\uff0c\u6216\u5b8c\u5168\u7981\u7528\u8be5\u9009\u9879\u3002\n\u6b64\u5916\uff0c\u5f53\u4e0d\u4f7f\u7528\u65b0\u884c\u4e3a\u65f6\uff0c\u5de5\u5177\u7bb1\u5de5\u5177\u63d0\u793a\u73b0\u5728\u4f1a\u5217\u51fa\u4e00\u7ec4\u4e2d\u7684\u6240\u6709\u5de5\u5177\uff0c\u4ee5\u63d0\u9ad8\u5b83\u4eec\u7684\u53ef\u53d1\u73b0\u6027\u3002\nGIMP\u73b0\u5728\u9ed8\u8ba4\u63d0\u4f9b\u4e00\u79cd\u975e\u7834\u574f\u6027\u7684\u88c1\u526a\u884c\u4e3a\u3002\u5b83\u4e0d\u4f1a\u5220\u9664\u88c1\u526a\u51fa\u6765\u7684\u50cf\u7d20\uff0c\u56e0\u6b64\u4e0d\u4f1a\u540c\u65f6\u66f4\u6539\u56fe\u5c42\u548c\u753b\u5e03\uff0c\u800c\u53ea\u662f\u8c03\u6574\u753b\u5e03\u7684\u5927\u5c0f\u3002\u5982\u679c\u5bfc\u51fa\u6b64\u7c7b\u56fe\u50cf\uff0c\u5219\u751f\u6210\u7684\u6587\u4ef6\u5c06\u4ec5\u5305\u542b\u60a8\u5728\u753b\u5e03\u8fb9\u754c\u5185\u770b\u5230\u7684\u5185\u5bb9\u3002\n\u901a\u8fc7\u8f6c\u5230\u56fe\u50cf-\u4f7f\u753b\u5e03\u9002\u5408\u56fe\u5c42\uff0c\u60a8\u53ef\u4ee5\u6062\u590d\u4e3a\u539f\u59cb\u7684\u672a\u88c1\u526a\u7248\u672c(&gt\uff1bFit Canvas to Layers)\u3002\u60a8\u5728\u88c1\u526a\u548c\u53d6\u6d88\u88c1\u526a\u4e4b\u95f4\u6240\u505a\u7684\u4efb\u4f55\u7f16\u8f91\u90fd\u4e0d\u4f1a\u6d88\u5931\u3002\n\u5982\u679c\u5c06\u9879\u76ee\u53e6\u5b58\u4e3aXCF\u6587\u4ef6\uff0c\u5219\u53ef\u4ee5\u5173\u95ed\u8be5\u6587\u4ef6\uff0c\u751a\u81f3\u9000\u51faGIMP\uff0c\u5e76\u4e14\u4ecd\u7136\u53ef\u4ee5\u5220\u9664\u88c1\u526a\uff0c\u7136\u540e\u968f\u65f6\u4ee5\u4e0d\u540c\u65b9\u5f0f\u8fdb\u884c\u88c1\u526a\u3002\n\u5f53\u60a8\u5bf9\u88c1\u526a\u51b3\u5b9a\u72b9\u8c6b\u4e0d\u51b3\u65f6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8f6c\u5230\u67e5\u770b-&gt;\u5168\u90e8\u663e\u793a\u6765\u67e5\u770b\u88c1\u526a\u51fa\u6765\u7684\u50cf\u7d20\u3002\n\u5982\u679c\u4f60\u60f3\u8981\u6062\u590d\u65e7\u7684\u201c\u7834\u574f\u6027\u201d\u884c\u4e3a\uff0c\u53ea\u9700\u5728\u88c1\u526a\u5de5\u5177\u7684\u8bbe\u7f6e\u4e2d\u52fe\u9009\u201c\u5220\u9664\u88c1\u526a\u7684\u50cf\u7d20\u201d\u590d\u9009\u6846\u5373\u53ef\u3002\nVignette\u6ee4\u955c\u73b0\u5728\u6709\u753b\u5e03\u4e0a\u7684\u63a7\u4ef6\uff0c\u53ef\u4ee5\u76f4\u89c2\u5730\u64cd\u4f5cVignette\u7684\u51e0\u4f55\u4f53\uff0c\u800c\u4e0d\u662f\u5728\u5bf9\u8bdd\u6846\u4e2d\u8f93\u5165\u6570\u5b57\u503c\u3002\n\u65e0\u8bba\u60a8\u9009\u62e9\u54ea\u79cd\u6655\u5708\u5f62\u72b6\uff0c\u60a8\u59cb\u7ec8\u53ef\u4ee5\u63a7\u5236\u4fdd\u6301\u4e0d\u53d8\u7684\u5185\u90e8\u533a\u57df\u3001\u6655\u5708\u8fb9\u754c(\u50cf\u7d20\u505c\u6b62\u53d8\u5316\u7684\u4f4d\u7f6e)\u4ee5\u53ca\u4e24\u8005\u4e4b\u95f4\u7684\u4e2d\u70b9\u3002\u5c06\u9f20\u6807\u6307\u9488\u62d6\u52a8\u5230\u5916\u90e8\u63a7\u4ef6\u4e4b\u5916\u7684\u4efb\u4f55\u4f4d\u7f6e\u90fd\u4f1a\u5bfc\u81f4Gignette\u5f62\u72b6\u65cb\u8f6c\u3002\n\u6b64\u5916\uff0c\u8fd8\u6709\u4e24\u4e2a\u65b0\u7684\u5f62\u72b6\uff0c\u201c\u6c34\u5e73\u201d\u548c\u201c\u5782\u76f4\u201d\u3002\nVariable Blur\u5c06\u56fe\u5c42\u6216\u901a\u9053\u4f5c\u4e3a\u8f93\u5165\u8499\u7248\uff0c\u4ee5\u786e\u5b9a\u54ea\u4e9b\u50cf\u7d20\u5e94\u8be5\u6a21\u7cca(\u5728\u7528\u6237\u5b9a\u4e49\u7684\u6700\u5927\u6a21\u7cca\u5f3a\u5ea6\u7684\u767e\u5206\u6bd4)\uff0c\u54ea\u4e9b\u50cf\u7d20\u5e94\u8be5\u4fdd\u6301\u4e0d\u53d8\uff0c\u7136\u540e\u4f7f\u7528\u9ad8\u65af\u6a21\u7cca\u6765\u6a21\u7cca\u50cf\u7d20\u3002\n\u955c\u5934\u6a21\u7cca\u7684\u529f\u80fd\u4e0e\u6b64\u76f8\u540c\uff0c\u4f46\u63d0\u4f9b\u4e86\u66f4\u903c\u771f\u7684\u7126\u5916\u6a21\u7cca\u6a21\u62df\uff0c\u5305\u62ec\u901a\u8fc7\u80cc\u666f\u4e2d\u6a21\u7cca\u7684\u9ad8\u5149\u90e8\u5206\u906e\u6321\u9510\u5229\u7684\u524d\u666f\u5bf9\u8c61\u3002\u60a8\u8fd8\u53ef\u4ee5\u63a7\u5236\u9ad8\u5149\u53d7\u5f71\u54cd\u7684\u7a0b\u5ea6\u3002\n\u7126\u70b9\u6a21\u7cca\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u6237\u754c\u9762\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0e\u66f4\u65b0\u7684\u6655\u5708\u6ee4\u955c\u76f8\u540c\u7684\u753b\u5e03\u4e0a\u63a7\u4ef6\u8fdb\u884c\u7126\u5916\u6a21\u7cca\u3002\u53ef\u4ee5\u9009\u62e9\u9ad8\u65af\u6a21\u7cca\u548c\u955c\u5934\u6a21\u7cca\u4f5c\u4e3a\u6a21\u7cca\u65b9\u6cd5\u3002\u6ee4\u955c\u7684\u7528\u9014\u4e4b\u4e00\u662f\u4ece\u666e\u901a\u7167\u7247\u4e2d\u5236\u4f5c\u5fae\u578b\u8d5d\u54c1-\u8fd9\u4e00\u6548\u679c\u6700\u521d\u662f\u901a\u8fc7\u4f7f\u7528\u503e\u659c\u79fb\u4f4d\u955c\u5934\u6539\u53d8\u7126\u9762\u5b9e\u73b0\u7684\u3002\n\u65b0\u7684\u5e03\u9686\u6ee4\u955c\u5e94\u7528\u7684\u6548\u679c\u770b\u8d77\u6765\u4e0e\u4f7f\u7528\u67d4\u548c\u8f89\u5149\u6ee4\u955c\u83b7\u5f97\u7684\u6548\u679c\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u4e0e\u67d4\u548c\u8f89\u5149\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u4e0d\u4f1a\u964d\u4f4e\u9971\u548c\u5ea6\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0cBloom\u9694\u79bb\u9ad8\u5149\u533a\u57df\uff0c\u5bf9\u5176\u8fdb\u884c\u7fbd\u5316\uff0c\u7136\u540e\u5c06\u5176\u4e0e\u539f\u59cb\u56fe\u7247\u91cd\u65b0\u7ec4\u5408\u3002\nGEGL\u6ee4\u955c\u7684\u9009\u9879\u5bf9\u8bdd\u6846\u73b0\u5728\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684\u6df7\u5408\u9009\u9879\u90e8\u5206\uff0c\u5141\u8bb8\u63a7\u5236\u5e94\u7528\u6ee4\u955c\u7684\u6df7\u5408\u6a21\u5f0f\u548c\u4e0d\u900f\u660e\u5ea6\u3002\u8fd9\u53d6\u4ee3\u4e862.10.10\u7248\u4e2d\u5220\u9664\u7684\u6de1\u5165\u6de1\u51fa\u529f\u80fd\u3002\n\u8fc7\u6ee4\u5668\u9884\u89c8\u73b0\u5728\u5373\u4f7f\u5728\u5173\u95ed\u65f6\u4e5f\u4f1a\u4fdd\u6301\u7f13\u5b58\u72b6\u6001\uff0c\u5141\u8bb8\u5728\u539f\u59cb\u89c6\u56fe\u548c\u8fc7\u6ee4\u540e\u7684\u89c6\u56fe\u4e4b\u95f4\u5feb\u901f\u5207\u6362\u3002\n\u867d\u7136GIMP\u5df2\u7ecf\u53ef\u4ee5\u52a0\u8f7d16\u4f4d/\u901a\u9053\u7684PSD\u6587\u4ef6\uff0c\u4f46\u73b0\u5728\u4e5f\u53ef\u4ee5\u4f7f\u752816\u4f4d/\u901a\u9053\u5bfc\u51fa\u9ad8\u4f4d\u6df1\u5ea6\u56fe\u50cf\u3002\n\u6b64\u5916\uff0c\u73b0\u5728\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u5bfc\u51fa\u901a\u9053\uff0c\u5e76\u4f7f\u7528\u5176\u539f\u59cb\u989c\u8272\u3002\n\u4f73\u80fdCR3\u6587\u4ef6\u73b0\u5728\u53ef\u4ee5\u88abGIMP\u6b63\u786e\u8bc6\u522b\uff0c\u5e76\u53d1\u9001\u5230\u60a8\u9009\u62e9\u7684\u539f\u59cb\u5f00\u53d1\u8f6f\u4ef6\u3002\n\u7528\u4e8e\u901a\u8fc7\u626b\u63cf\u4eea\u83b7\u53d6\u56fe\u50cf\u7684TWAIN\u63d2\u4ef6\u5df2\u7a0d\u4f5c\u91cd\u6784\uff0c\u73b0\u5728\u652f\u630116\u4f4dRGB/\u7070\u5ea6\u56fe\u50cf\u3002\n\u5f53Alpha\u901a\u9053\u5b58\u5728\u4e14\u672c\u8eab\u4e3a0\u65f6\uff0cPNG\u548cTIFF\u63d2\u4ef6\u73b0\u5728\u9ed8\u8ba4\u4e0d\u4fdd\u5b58\u989c\u8272\u503c\u3002\u8fd9\u662f\u4e3a\u4e86\u89e3\u51b3\u4f7f\u7528\u7b80\u5355\u526a\u5207\u6765\u5220\u9664\u654f\u611f\u4fe1\u606f\u7684\u5b89\u5168\u987e\u8651\u3002\nPDF\u63d2\u4ef6\u73b0\u5728\u4ee5\u81ea\u4e0b\u800c\u4e0a\u7684\u987a\u5e8f\u5bfc\u5165\u591a\u9875\u6587\u6863\uff0c\u7c7b\u4f3c\u4e8e\u52a8\u753b\u683c\u5f0f\uff0c\u4e5f\u7c7b\u4f3c\u4e8ePDF\u5bfc\u51fa\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u8fd9\u5e26\u6765\u4e86\u4e00\u81f4\u6027\uff0c\u4f46\u6253\u7834\u4e86\u7b2c\u4e09\u65b9\u811a\u672c\u4e2d\u7684\u73b0\u6709\u884c\u4e3a\u3002\n\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u65b0\u7684GIMP\u7248\u672c\u4f34\u968f\u7740BABL\u548cGEGL\u5e93\u7684\u65b0\u7248\u672c\u3002\n\u65b0\u7248\u672c\u7684BABL\u4e3b\u8981\u6709\u9519\u8bef\u4fee\u590d\u548c\u6027\u80fd\u6539\u8fdb\uff0c\u6bd4\u5982\u4f7f\u7528AVX2\u6307\u4ee4\u5c06Gamma U8\u6570\u636e\u8f6c\u6362\u4e3a\u7ebf\u6027\u6d6e\u70b9\u6570(\u4f7f\u8fd9\u4e9b\u8f6c\u6362\u901f\u5ea6\u57281.25x\u52302.2x\u4e4b\u95f4\u66f4\u5feb)\u3002\u5b83\u8fd8\u4e3aVala\u96c6\u6210\u751f\u6210VAPI\u6587\u4ef6\uff0c\u56e0\u4e3aGIMP\u7684\u4e0d\u7a33\u5b9a\u5206\u652f\u73b0\u5728\u652f\u6301\u4f7f\u7528Vala\u521b\u5efa\u65b0\u7684\u63d2\u4ef6\u3002\n\u65b0\u7684\u5143\u6570\u636eAPI\uff0c\u5141\u8bb8\u4ee5\u901a\u7528\u7684\u65b9\u5f0f\u5728\u4e0d\u540c\u7684\u6587\u4ef6\u52a0\u8f7d\u5668\u548c\u4fdd\u5b58\u5668\u4e2d\u5904\u7406\u975eExif\u5143\u6570\u636e\u3002\nDropdow\u64cd\u4f5c\u73b0\u5728\u53ef\u4ee5\u9009\u62e9\u589e\u957f\u9634\u5f71\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4f7f\u7528\u96f6\u4f4d\u79fb\u548c\u8f83\u5927\u7684\u9634\u5f71\uff0c\u60a8\u53ef\u4ee5\u5728\u56fe\u5c42\u4e2d\u63cf\u8fb9\u6587\u672c\u6216\u4f4d\u56fe\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0cGEGL\u83b7\u5f97\u4e86\u51e0\u4e2a\u65b0\u64cd\u4f5c\uff0c\u5176\u4e2d\u4e00\u4e9b\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u9762\u63cf\u8ff0\u8fc7\u4e86\u3002\u5176\u4ed6\u5305\u62ec\uff1a\n\u5206\u6bb5\u6df7\u5408\uff1a\u4f7f\u7528\u7070\u5ea6\u8d34\u56fe\u4f5c\u4e3a\u4f5c\u4e3aLUT\u4f7f\u7528\u7684\u7f13\u51b2\u533a\u6570\u7ec4\u7684\u7d22\u5f15(\u65b0\u7684\u6a21\u7cca\u6ee4\u955c\u9700\u8981)\u3002\n\u8fd9\u4e00\u7248\u672c\u7684\u8d21\u732e\u8005\u6709\uff1aEll\uff0cJehan\uff0cJernej Simon\u010dI\u010d\uff0clillollo\uff0cLuz.paz\uff0cMarco Ciampa\uff0cMichael Natterer\uff0cMichael Schumacher\uff0cNikc\uff0c\u00e4yvind Kol\u00e7s\uff0cPesder\uff0cSabri\u00dcnel\uff0cSalamandar\uff0cSergio Jim\u00e9nez Herena\uff0cSimon Budigi\uff0cT Collins\uff0cEwob\u3002\n\u7ffb\u8bd1\uff1aAlexandre Prokoudine\uff0cAnders Jonsson\uff0cBruce Cowan\uff0cCristian Secar\u0103\uff0cDaniel Korostil\uff0cDaniel\u0218erb\u0103Nescu\uff0cDimitris Spingos\uff0cJiri Gr\u00f6nroos\uff0cJordan i Mas\uff0cNathan Folens\uff0cPiotr Dr\u0105g\uff0cRodrigo Iled\u00f3Milanca\uff0cSabri\u00dcnel\uff0cSeong-ho Cho\uff0cTim Sbusch\uff0cYuri Chornoivan\uff0cGeorgy\u3002\n\u6211\u4eec\u8fd8\u611f\u8c22Lillollo\u3001nmat\u548cMichael Schumacher\u5bf9\u9519\u8bef\u62a5\u544a\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u611f\u8c22Julien Hardelin\u66f4\u65b0\u7528\u6237\u624b\u518c\u3002\n\u6211\u4eec\u6b63\u5728\u5b8c\u62102.99.2\u7248\u7684\u4e3b\u5206\u652f\u7684\u5f00\u53d1\uff0c\u8fd9\u662f2.99\u7cfb\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\u7248\u672c\uff0c\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u5019\u4f1a\u5347\u7ea7\u52303.0\u7248\u3002\n\u6211\u4eec\u77e5\u9053\uff0c\u4ece\u505a\u6570\u5b57\u7ed8\u753b\u7684\u4eba(\u4f60\u73b0\u5728\u53ef\u4ee5\u70ed\u63d2\u62d4\u56fe\u5f62\u5e73\u677f\u7535\u8111)\u5230\u4f7f\u75284K\u663e\u793a\u5c4f\u7684\u6444\u5f71\u5e08(\u56fe\u6807\u5927\u5c0f\u73b0\u5728\u9002\u5408\u4ed6\u4eec)\uff0c\u518d\u5230\u666e\u904d\u5e0c\u671b\u4ece\u4ed6\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5220\u9664GTK2\u548cPython 2\u7684\u4eba\uff0c\u6211\u4eec\u90fd\u77e5\u9053\u8fd9\u6b21\u53d1\u5e03\u662f\u6211\u4eec\u7528\u6237\u7684\u9884\u671f\u3002\n\u867d\u7136\u6211\u4eec\u671f\u5f85\u53cd\u9988\u548c\u9519\u8bef\u62a5\u544a\uff0c\u4f46\u6211\u4eec\u4e0d\u63a8\u8350\u5373\u5c06\u53d1\u5e03\u76842.99.2\u7248\u7528\u4e8e\u751f\u4ea7\u30022.10.x\u7cfb\u5217\u65e2\u6709\u6539\u8fdb\uff0c\u4e5f\u6709\u5012\u9000\u3002\u5168\u90e8\u7ec6\u8282\u5c06\u5728\u53d1\u5e03\u540e(\u5f88\u5feb)\u516c\u5e03\u3002\n\u6682\u65f6\u522b\u5fd8\u4e86\uff0c\u4f60\u53ef\u4ee5\u6350\u94b1\u7ed9\u8fd9\u4e2a\u9879\u76ee\uff0c\u4e2a\u4eba\u8d44\u52a9\u51e0\u4e2aGIMP\u5f00\u53d1\u8005\uff0c\u4f5c\u4e3a\u56de\u62a5\u548c\u52a0\u901fGIMP\u5f00\u53d1\u7684\u4e00\u79cd\u65b9\u5f0f\u3002", "note_en": "Better  PSD support: exporting of 16-bit files now available, reading/writing channels in the right\u00a0order\n   We listened to users\u2019 feedback on introducing tool groups in the toolbox in the previous release. A lot of people told us they appreciated the change in general but were quite averse to having to click to open the list of tools in a group. The new release adds the option to show the tool-group menu as soon as the mouse hovers over the toolbox button, without having to click it. This option is enabled by default when the toolbox is arranged in a single column, but it can be enabled for arbitrary toolbox layouts, or disabled entirely, through the  Toolbox page of the  Preferences\u00a0dialog.\n Additionally, when not using the new behavior, toolbox tooltips now list all the tools in a group, to improve their\u00a0discoverability.\n   GIMP now provides a kind of a non-destructive cropping behavior by default. Instead of deleting pixels that you cropped out and thus changing both the layer and the canvas, it will simply resize the canvas. If you export such an image, the resulted file will only have what you see within canvas\u00a0boundaries.\n   You can revert to the original uncropped version by going to  Image -&gt; Fit Canvas to Layers. None of your edits between cropping and uncropping will\u00a0disappear.\n If you save your project as an  XCF file, you can close the file and even quit  GIMP and still be able to remove cropping and then crop differently at any time\u00a0later.\n When you are on the fence about your cropping decision, you can view pixels that you cropped out by going to  View -&gt; Show All.\n If you want the old \u201cdestructive\u201d behavior back, simply tick the \u2018Delete cropped pixels\u2019 checkbox in  Crop tool\u2019s\u00a0settings.\n  The  Vignette filter now has on-canvas controls to visually manipulate the geometry of the vignette rather than enter numeric values in a\u00a0dialog.\n Whichever vignette shape you pick, you will always have control for the inner area that stays unchanged, the border of the vignette where pixels stop changing, and the medium point between the two. Dragging the mouse pointer anywhere outside of the outer control will result in rotating the vignette\u00a0shape.\n In addition, there are two new shapes, \u2018Horizontal\u2019 and\u00a0\u2018Vertical\u2019.\n   Variable Blur takes a layer or channel as an input mask to decide which pixels should be blurred (at what percentage of user-defined maximum blur intensity) and what pixels should stay unchanged, and then blurs pixels with Gaussian\u00a0Blur.\n  Lens Blur does the same but provides a far more realistic imitation of the out-of-focus blur, including the partial occlusion of sharp foreground objects by highlights blurred in the background. You also have control of how much highlights are\u00a0affected.\n  Focus Blur provides a simple user interface to out-of-focus blurring using the same on-canvas controls that the updated  Vignette filter has. You can choose between  Gaussian Blur and  Lens Blur as blurring methods. One of the uses for the filter is creating miniature fakes out of regular photos \u2014 the effect originally achieved by using a tilt-shift lens that changes the plane of\u00a0focus.\n  New  Bloom filter applies an effect that looks a lot like what you can get with the  Soft Glow filter but, unlike,  Soft Glow, it doesn\u2019t decrease saturation. Technically,  Bloom isolates the highlights region, feathers it, and then recombines it with the original\u00a0image.\n   The options dialog of  GEGL filters now provides a new  Blending Options section, which allows controlling the blending-mode and opacity with which the filter is applied.This replaces the  Fade functionality, which was removed in version\u00a02.10.10.\n Filter previews now remain cached even when toggled off, allowing for quickly switching between the original and filtered\u00a0views.\n  While  GIMP could already load 16-bits-per-channel  PSD files, high-bit-depth images can now be exported using 16-bits per channel as\u00a0well.\n In addition, channels are now exported in the correct order, and with their original\u00a0colors.\n  Canon  CR3 files are now properly recognized by  GIMP and sent to your raw developer software of\u00a0choice.\n The  TWAIN plug-in used for acquiring images via scanners has been slightly refactored and now supports 16-bit  RGB/grayscale\u00a0images.\n PNG and  TIFF plug-ins now default to not saving color values when alpha channel is present and 0 itself. This is to address security concerns about using simple cutting to remove sensitive\u00a0information.\n The  PDF plug-in now imports multi-page documents in bottom-first order, similar to animated formats, and also similar to defaults for  PDF exporting. This brings consistency but breaks existing behavior in 3rd party\u00a0scripts.\n  As usual, new  GIMP release is accompanied by new releases of  babl and   GEGL\u00a0libraries.\n The new version of babl comes mostly with bug fixes and performance improvements like the use of  AVX2 instructions to convert gamma u8 data to linear float (making those conversions between 1.25x and 2.2x faster). It also features  VAPI file generation for Vala integration as the unstable branch of  GIMP now supports creating new plug-ins with\u00a0Vala.\n  New meta-data  API that permits handling non-Exif metadata in different file loadersand savers in a generic\u00a0manner\n    The  dropshadow operation now has an option to grow the shadow. This means, with zero shift and larger shadow, you can stroke a text or a bitmap\u00a0layer.\n On top of that,  GEGL got several new operations, some of which we already described above. Others\u00a0are:\n piecewise-blend: uses a grayscale map as index into array of buffers used as  LUT (required by new blur\u00a0filters)\n  Contributors to this release are: Ell, Jehan, Jernej Simon\u010di\u010d, lillolollo, luz.paz, Marco Ciampa, Michael Natterer, Michael Schumacher, Nikc, \u00d8yvind Kol\u00e5s, pesder, Sabri \u00dcnal, Salamandar, Sergio Jim\u00e9nez Herena, Simon Budig, T Collins,\u00a0woob.\n Translators: Alexandre Prokoudine, Anders Jonsson, Bruce Cowan, Cristian Secar\u0103, Daniel Korostil, Daniel \u0218erb\u0103nescu, Dimitris Spingos, Jiri Gr\u00f6nroos, Jordi Mas, Nathan Follens, Piotr Dr\u0105g, Rodrigo Lled\u00f3 Milanca, Sabri \u00dcnal, Seong-ho Cho, Tim Sabsch, Yuri Chornoivan, Georgy\u00a0Timofeevsky.\n We also thank lillolollo, nmat, and Michael Schumacher for triaging bug reports, and Julien Hardelin for updating the user\u00a0manual.\n  We are wrapping up the development in the  master branch for v2.99.2, the first unstable release in the 2.99 series leading up to v3.0 some time in the\u00a0future.\n We know that this release is anticipated by various demographics of our users, from people doing digital painting (you can hotplug a graphic tablet now) to photographers using a 4K display (the icon size is right for them now) to people generally wishing to drop  GTK2 and Python 2 from their operating\u00a0systems.\n  While we are looking forward to feedback and bug reports, we do not recommend upcoming v2.99.2 for use in production. There are both improvements and regressions from the 2.10.x series. Full details will be published when the release is out\u00a0(soon).\n For the time being, don\u2019t forget you can  donate to the project and personallyfund several  GIMP developers, as a way to giveback, and to accelerate the development of  GIMP.", "posttime": "2020-06-12 00:14:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,gimp,\u73b0\u5728", "title": "GIMP 2.10.20\u53d1\u5e03", "title_en": "Gimp 2.10.20 Released", "transed": 1, "url": "https://www.gimp.org/news/2020/06/11/gimp-2-10-20-released/", "via": "", "real_tags": ["\u53d1\u5e03", "gimp", "\u73b0\u5728"]}, {"category": "", "categoryclass": "", "imagename": "87676dc6c59dbfcbab766a9dcb42bc42.jpg", "infoid": 1006151, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u56db\uff0c\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df(American Civil Liberties Union)\u8d77\u8bc9\u9762\u90e8\u8bc6\u522b\u521d\u521b\u516c\u53f8Clearview AI\uff0c\u8be5\u516c\u53f8\u58f0\u79f0\u5e2e\u52a9\u6570\u767e\u5bb6\u6267\u6cd5\u673a\u6784\u4f7f\u7528\u5728\u7ebf\u7167\u7247\u7834\u6848\uff0c\u6307\u63a7\u8be5\u516c\u53f8\u201c\u975e\u6cd5\u7684\u3001\u7834\u574f\u9690\u79c1\u7684\u76d1\u63a7\u6d3b\u52a8\u201d\u3002\n\u5728\u4f0a\u5229\u8bfa\u4f0a\u5dde\u63d0\u8d77\u7684\u8bc9\u8bbc\u4e2d\uff0c\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u8868\u793a\uff0cClearview\u8fdd\u53cd\u4e86\u4e00\u9879\u5dde\u6cd5\u5f8b\uff0c\u8be5\u6cd5\u5f8b\u7981\u6b62\u516c\u53f8\u5728\u672a\u7ecf\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5c45\u6c11\u7684\u6307\u7eb9\u6216\u9762\u90e8\u626b\u63cf\u3002\u6839\u636e\u8fd9\u9879\u6cd5\u5f8b\uff0c\u5c45\u6c11\u6709\u6743\u8d77\u8bc9\u516c\u53f8\uff0c\u6bcf\u6b21\u4fb5\u72af\u9690\u79c1\u7684\u8d54\u507f\u6700\u9ad8\u53ef\u8fbe5000\u7f8e\u5143\u3002\n\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u7684\u5f8b\u5e08\u5185\u68ee\u00b7\u5f17\u91cc\u5fb7\u00b7\u97e6\u65af\u52d2(Nathan Freed Wessler)\u8bf4\uff0c\u201c\u5e95\u7ebf\u662f\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u63a7\u5236\uff0cClearview\u7684\u4ea7\u54c1\u5c06\u7ec8\u7ed3\u6211\u4eec\u6240\u77e5\u7684\u9690\u79c1\uff0c\u6211\u4eec\u5c06\u628a\u516c\u53f8\u544a\u4e0a\u6cd5\u5ead\uff0c\u4ee5\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u3002\u201d\n\u8fd9\u8d77\u5411\u5e93\u514b\u53bf\u5de1\u56de\u6cd5\u9662\u63d0\u8d77\u7684\u8bc9\u8bbc\uff0c\u52a0\u5267\u4e86\u81ea\u4eca\u5e741\u6708\u4ee5\u6765\u5bf9Clearview\u65e5\u76ca\u589e\u957f\u7684\u53cd\u5f39\uff0c\u5f53\u65f6\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u62a5\u9053\u79f0\uff0cClearview\u5728\u4e92\u8054\u7f51\u4e0a\u79ef\u7d2f\u4e8630\u591a\u4ebf\u5f20\u7167\u7247\u7684\u6570\u636e\u5e93\uff0c\u5176\u4e2d\u5305\u62ecFacebook\u3001YouTube\u3001Twitter\u548cVenmo\u3002\u8fd9\u4e2a\u7167\u7247\u5b9d\u5e93\u4f7f\u4efb\u4f55\u4f7f\u7528Clearview\u5e94\u7528\u7a0b\u5e8f\u7684\u4eba\u90fd\u53ef\u4ee5\u5c06\u4e00\u4e2a\u4eba\u4e0e\u4ed6\u4eec\u7684\u5728\u7ebf\u7167\u7247\u8fdb\u884c\u5339\u914d\uff0c\u5e76\u627e\u5230\u6307\u5411\u56fe\u50cf\u6765\u6e90\u7f51\u7ad9\u7684\u94fe\u63a5\u3002\n\u8fd1\u51e0\u4e2a\u6708\u6765\uff0c\u7ebd\u7ea6\u548c\u4f5b\u8499\u7279\u5dde\u7684\u4eba\u4eec\u4e5f\u5bf9\u8be5\u516c\u53f8\u63d0\u8d77\u4e86\u8bc9\u8bbc\uff0c\u4f5b\u8499\u7279\u5dde\u548c\u65b0\u6cfd\u897f\u5dde\u7684\u603b\u68c0\u5bdf\u957f\u5df2\u7ecf\u547d\u4ee4Clearview\u505c\u6b62\u6536\u96c6\u5c45\u6c11\u7684\u7167\u7247\u3002\n\u6839\u636e\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u7684\u8d77\u8bc9\u4e66\uff0c\u201cClearview\u5df2\u7ecf\u5f00\u59cb\u505a\u8bb8\u591a\u516c\u53f8\u51fa\u4e8e\u9053\u5fb7\u8003\u8651\u800c\u6545\u610f\u907f\u514d\u7684\u4e8b\u60c5\uff1a\u521b\u5efa\u4e00\u4e2a\u6d77\u91cf\u6570\u636e\u5e93\uff0c\u91cc\u9762\u6709\u6570\u5341\u4ebf\u4eba\u7684\u9762\u90e8\u6307\u7eb9\uff0c\u5176\u4e2d\u5305\u62ec\u6570\u767e\u4e07\u4f0a\u5229\u8bfa\u4f0a\u5dde\u4eba\uff0c\u8fd9\u4e9b\u4eba\u5b8c\u5168\u4e0d\u77e5\u9053\uff0c\u5e76\u5411\u4e16\u754c\u5404\u5730\u7684\u79c1\u4eba\u548c\u653f\u5e9c\u884c\u4e3a\u8005\u63d0\u4f9b\u5bf9\u8be5\u6570\u636e\u5e93\u7684\u4ed8\u8d39\u8bbf\u95ee\u3002\u201d\n\u8d77\u8bc9\u4e66\u79f0\uff0c\u8be5\u516c\u53f8\u7684\u5546\u4e1a\u6a21\u5f0f\u201c\u4f3c\u4e4e\u4f53\u73b0\u4e86\u5669\u68a6\u822c\u7684\u573a\u666f\u201d\uff0c\u201c\u79c1\u4eba\u516c\u53f8\u5728\u6ca1\u6709\u901a\u77e5\u53d7\u5f71\u54cd\u7684\u4e2a\u4eba\u7684\u60c5\u51b5\u4e0b\uff0c\u6355\u83b7\u4e86\u65e0\u6570\u6570\u91cf\u7684\u751f\u7269\u8bc6\u522b\u6570\u636e\uff0c\u7528\u4e8e\u76d1\u63a7\u548c\u8ffd\u8e2a\uff0c\u66f4\u4e0d\u7528\u8bf4\u4ed6\u4eec\u7684\u540c\u610f\u4e86\u3002\u201d\nClearview\u7684\u5f8b\u5e08\u6258\u5c14\u00b7\u57c3\u514b\u5170(Tor Ekeland)\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201cClearview AI\u662f\u4e00\u4e2a\u641c\u7d22\u5f15\u64ce\uff0c\u5b83\u53ea\u4f7f\u7528\u4e92\u8054\u7f51\u4e0a\u53ef\u8bbf\u95ee\u7684\u516c\u5f00\u56fe\u50cf\u3002\u201d\u201c\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u60f3\u8981\u5ba1\u67e5\u4eba\u4eec\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u641c\u7d22\u5f15\u64ce\u6765\u83b7\u53d6\u4e92\u8054\u7f51\u4e0a\u7684\u516c\u5171\u4fe1\u606f\uff0c\u8fd9\u662f\u8352\u8c2c\u7684\u3002\u7b2c\u4e00\u4fee\u6b63\u6848\u7981\u6b62\u8fd9\u6837\u505a\u3002\u201c\n\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u7684\u97e6\u65af\u52d2\u5148\u751f\u8bf4\uff0c\u7b2c\u4e00\u4fee\u6b63\u6848\u201c\u6ca1\u6709\u4fdd\u62a4Clearview\u7684\u975e\u6cd5\u884c\u4e3a\u201d\u3002\n\u4ed6\u8bf4\uff1a\u201c\u6211\u4eec\u7684\u8bc9\u8bbc\u5e76\u4e0d\u6311\u6218Clearview\u4ece\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u4e0a\u6293\u53d6\u56fe\u7247\u7684\u884c\u4e3a\u3002\u201d\u201c\u5b83\u6311\u6218\u4e86\u4ece\u8fd9\u4e9b\u56fe\u50cf\u4e2d\u79d8\u5bc6\u3001\u975e\u53cc\u65b9\u540c\u610f\u548c\u975e\u6cd5\u6355\u83b7\u4e2a\u4eba\u751f\u7269\u8bc6\u522b\u8eab\u4efd\u7684\u884c\u4e3a\u3002\u6355\u6349\u9762\u90e8\u6307\u7eb9\u662f\u4e00\u79cd\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u8a00\u8bed\u3002\u201c\u3002\n\u4f0a\u5229\u8bfa\u4f0a\u5dde\u7684\u8bc9\u8bbc\u662f\u7531\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u3001\u4f0a\u5229\u8bfa\u4f0a\u5dde\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u548c\u57c3\u5fb7\u68ee\u00b7PC\u5f8b\u5e08\u4e8b\u52a1\u6240(Edelson PC)\u51c6\u5907\u7684\uff0c\u540e\u8005\u4e13\u95e8\u9488\u5bf9\u4fb5\u72af\u9690\u79c1\u7684\u79d1\u6280\u516c\u53f8\u63d0\u8d77\u96c6\u4f53\u8bc9\u8bbc\u3002\u8be5\u516c\u53f8\u5377\u5165\u4e86\u4e00\u8d77\u8bc9\u8bbc\uff0c\u6700\u7ec8\u4e0eFacebook\u5c31\u8fd9\u5bb6\u79d1\u6280\u5de8\u5934\u5728\u4f0a\u5229\u8bfa\u4f0a\u5dde\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u6280\u672f\u8fbe\u6210\u4e865.5\u4ebf\u7f8e\u5143\u7684\u548c\u89e3\u3002\n\u7b7e\u7f72\u8fd9\u9879\u6cd5\u5f8b\u884c\u52a8\u7684\u5176\u4ed6\u7ec4\u7ec7\u5305\u62ec\u829d\u52a0\u54e5\u53cd\u6027\u5265\u524a\u8054\u76df\u3001\u6027\u5de5\u4f5c\u8005\u5916\u8054\u9879\u76ee\u548c\u4f0a\u5229\u8bfa\u4f0a\u5dde\u516c\u5171\u5229\u76ca\u7814\u7a76\u5c0f\u7ec4\u3002\n\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u8868\u793a\uff0c\u8fd9\u8d77\u8bc9\u8bbc\u5c06\u8feb\u4f7f\u4e00\u5bb6\u9762\u90e8\u8bc6\u522b\u516c\u53f8\u5bf9\u4ee3\u8868\u6027\u4fb5\u5e78\u5b58\u8005\u3001\u975e\u6cd5\u79fb\u6c11\u548c\u5176\u4ed6\u53d7\u5230\u76d1\u63a7\u72ec\u7279\u4f24\u5bb3\u7684\u5f31\u52bf\u793e\u533a\u7684\u56e2\u4f53\u505a\u51fa\u56de\u5e94\u3002\n\u7814\u7a76\u4eba\u5458\u8d8a\u6765\u8d8a\u591a\u5730\u8ba4\u8bc6\u5230\uff0c\u9762\u90e8\u8bc6\u522b\u7cfb\u7edf\u5728\u51c6\u786e\u8bc6\u522b\u6709\u8272\u4eba\u79cd\u9762\u5b54\u65b9\u9762\u505a\u5f97\u66f4\u5dee\u3002\u53bb\u5e7412\u6708\uff0c\u8054\u90a6\u653f\u5e9c\u53d1\u5e03\u4e86\u4e00\u9879\u540c\u7c7b\u7814\u7a76\u4e2d\u89c4\u6a21\u6700\u5927\u7684\u4e00\u9879\u7814\u7a76\uff0c\u53d1\u73b0\u5927\u591a\u6570\u5546\u7528\u9762\u90e8\u8bc6\u522b\u7cfb\u7edf\u8868\u73b0\u51fa\u504f\u89c1\uff0c\u9519\u8bef\u8bc6\u522b\u975e\u6d32\u88d4\u548c\u4e9a\u88d4\u9762\u5b54\u7684\u6bd4\u4f8b\u662f\u767d\u4eba\u9762\u5b54\u768410\u5230100\u500d\u3002\n\u829d\u52a0\u54e5\u975e\u8425\u5229\u7ec4\u7ec7\u829d\u52a0\u54e5\u53cd\u6027\u5265\u524a\u8054\u76df\u7684\u9a6c\u6d1b\u91cc\u00b7\u5229\u7279\u5c14\u7ea6\u7ff0(Mallory Littlejohn)\u8bf4\uff0c\u201c\u6211\u4eec\u53ef\u4ee5\u66f4\u6539\u59d3\u540d\u548c\u5730\u5740\uff0c\u4ee5\u4fdd\u62a4\u81ea\u5df1\u7684\u4e0b\u843d\u548c\u8eab\u4efd\u4e0d\u53d7\u8ddf\u8e2a\u8005\u548c\u65bd\u8650\u4f34\u4fa3\u7684\u4f24\u5bb3\uff0c\u4f46\u6211\u4eec\u4e0d\u80fd\u6539\u53d8\u81ea\u5df1\u7684\u8138\u3002\u201d\n\u5979\u8bf4\uff0cClearview\u201c\u8ba9\u5e78\u5b58\u8005\u4e0d\u65ad\u62c5\u5fc3\u88ab\u90a3\u4e9b\u8bd5\u56fe\u4f24\u5bb3\u4ed6\u4eec\u7684\u4eba\u8ffd\u8e2a\uff0c\u5e76\u5bf9\u6211\u4eec\u7684\u5b89\u5168\u548c\u798f\u7949\u6784\u6210\u5a01\u80c1\u3002\u201d", "note_en": "The American Civil Liberties Union on Thursday sued the facial recognition start-up Clearview AI, which claims to have helped hundreds of law enforcement agencies use online photos to solve crimes, accusing the company of \u201cunlawful, privacy-destroying surveillance activities.\u201d\n In a suit filed in Illinois, the  A.C.L.U. said that Clearview violated a state law that forbids companies from using a resident\u2019s fingerprints or face scans without consent. Under the law, residents have the right to sue companies for up to $5,000 per privacy violation.\n \u201cThe bottom line is that, if left unchecked, Clearview\u2019s product is going to end privacy as we know it,\u201d said Nathan Freed Wessler, a lawyer at the  A.C.L.U., \u201cand we\u2019re taking the company to court to prevent that from happening.\u201d\n The suit, filed in the Circuit Court of Cook County, adds to the growing backlash against Clearview since January, when  The New York Times reported that the company had amassed a database of more than three billion photos across the internet, including from Facebook, YouTube, Twitter and Venmo. This trove of photos enables anyone with the Clearview app to match a person to their online photos and find links back to the sites where the images originated.\n People in New York and Vermont have also filed suits in against the company in recent months, and the state attorneys general of Vermont and New Jersey have ordered Clearview to stop collecting residents\u2019 photos.\n According to the A.C.L.U.  suit, \u201cClearview has set out to do what many companies have intentionally avoided out of ethical concerns: create a mass database of billions of face prints of people, including millions of Illinoisans, entirely unbeknownst to those people, and offer paid access to that database to private and governmental actors worldwide.\u201d\n The company\u2019s business model, the complaint said, \u201cappears to embody the nightmare scenario\u201d of a \u201cprivate company capturing untold quantities of biometric data for purposes of surveillance and tracking without notice to the individuals affected, much less their consent.\u201d\n \u201cClearview AI is a search engine that uses only publicly available images accessible on the internet,\u201d Tor Ekeland, a lawyer for Clearview, said in a statement. \u201cIt is absurd that the A.C.L.U. wants to censor which search engines people can use to access public information on the internet. The First Amendment forbids this.\u201d\n Mr. Wessler of the A.C.L.U. said the First Amendment \u201cdoes not shield Clearview\u2019s unlawful conducts.\u201d\n \u201cOur lawsuit does not challenge Clearview\u2019s scraping of images off of social media platforms,\u201d he said. \u201cIt challenges the secret, nonconsensual and unlawful capture of individuals\u2019 biometric identifiers from those images. Capturing a face print is conduct, not speech.\u201d\n The Illinois suit was prepared by the A.C.L.U., the A.C.L.U. of Illinois and the law firm Edelson PC, which has specialized in class action suits against technology companies for privacy violations. The firm was involved in a suit that ended in a  $550 million settlement with Facebook for the tech giant\u2019s use of facial recognition technology in Illinois.\n Other organizations that have signed on to the legal action include the Chicago Alliance Against Sexual Exploitation, the Sex Workers Outreach Project and the Illinois State Public Interest Research Group.\n The A.C.L.U. said the lawsuit would compel a facial recognition company to answer to groups representing sexual assault survivors, undocumented immigrants and other vulnerable communities uniquely harmed by surveillance.\n There is a growing understanding among researchers that facial recognition systems are worse at accurately identifying the faces of people of color. Last December, the federal government released a study, one of the largest of its kind, that found that most commercial facial recognition systems exhibited bias,  falsely identifying African-American and Asian faces 10 to 100 times more than Caucasian faces.\n Mallory Littlejohn from the Chicago Alliance Against Sexual Exploitation, a Chicago-based nonprofit, said, \u201cWe can change our names and addresses to shield our whereabouts and identities from stalkers and abusive partners, but we can\u2019t change our faces.\u201d\n Clearview, she said, \u201cput survivors in constant fear of being tracked by those who seek to harm them, and are a threat to our security, safety and well-being.\u201d", "posttime": "2020-06-12 00:13:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u516c\u6c11\u81ea\u7531,accuses,clearview", "title": "\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u6307\u8d23Clearview AI\u9690\u79c1\u662f\u201c\u5669\u68a6\u573a\u666f\u201d", "title_en": "ACLU accuses Clearview AI of privacy \u201cnightmare scenario\u201d", "transed": 1, "url": "https://www.nytimes.com/2020/05/28/technology/clearview-ai-privacy-lawsuit.html", "via": "", "real_tags": ["\u516c\u6c11\u81ea\u7531", "accuses", "clearview"]}, {"category": "", "categoryclass": "", "imagename": "ecfd76ec5844cbc65d4402a1c6c4f01e.jpg", "infoid": 1006149, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53bb\u5e74\u6625\u5929\uff0c\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u673a\u6784OpenAI\u8868\u793a\uff0c\u5b83\u5df2\u7ecf\u8ba9\u8f6f\u4ef6\u975e\u5e38\u64c5\u957f\u751f\u6210\u6587\u672c-\u5305\u62ec\u5047\u65b0\u95fb\u6587\u7ae0-\u4ee5\u81f3\u4e8e\u53d1\u5e03\u8d77\u6765\u592a\u5371\u9669\u4e86\u3002\u5f53\u4e24\u540d\u521a\u6bd5\u4e1a\u7684\u7855\u58eb\u91cd\u65b0\u521b\u5efa\u4e86\u8fd9\u6b3e\u8f6f\u4ef6\uff0cOpenAI\u53d1\u5e03\u4e86\u539f\u7248\u8f6f\u4ef6\u65f6\uff0c\u8fd9\u6761\u6c99\u5b50\u4e0a\u7684\u7ebf\u5f88\u5feb\u5c31\u88ab\u62b9\u53bb\u4e86\uff0cOpenAI\u8868\u793a\uff0c\u4eba\u4eec\u5bf9\u98ce\u9669\u7684\u610f\u8bc6\u5df2\u7ecf\u589e\u5f3a\uff0c\u6ca1\u6709\u770b\u5230\u6ee5\u7528\u7684\u8bc1\u636e\u3002\n\u73b0\u5728\uff0c\u5b9e\u9a8c\u5ba4\u5e26\u7740\u4e00\u4e2a\u66f4\u5f3a\u5927\u7684\u6587\u672c\u751f\u6210\u5668\u548c\u4e00\u4e2a\u65b0\u7684\u63a8\u4ecb\u56de\u6765\u4e86\uff1a\u4ed8\u94b1\u7ed9\u6211\u4eec\uff0c\u8ba9\u6211\u4eec\u628a\u5b83\u6295\u5165\u5230\u4f60\u7684\u4e1a\u52a1\u4e2d\u53bb\u3002\u5468\u56db\uff0cOpenAI\u63a8\u51fa\u4e86\u4e00\u9879\u4e91\u670d\u52a1\uff0c\u4e00\u4e9b\u516c\u53f8\u5df2\u7ecf\u5728\u4f7f\u7528\u8fd9\u9879\u670d\u52a1\u6765\u6539\u8fdb\u641c\u7d22\u6216\u5bf9\u6570\u5b66\u95ee\u9898\u7684\u7b54\u6848\u63d0\u4f9b\u53cd\u9988\u3002\u8fd9\u662f\u5bf9\u4e00\u79cd\u65b0\u7684\u4eba\u5de5\u667a\u80fd\u7f16\u7a0b\u65b9\u5f0f\u548c\u5b9e\u9a8c\u5ba4\u4e0d\u540c\u5bfb\u5e38\u7684\u5546\u4e1a\u6a21\u5f0f\u7684\u6d4b\u8bd5\u3002\nOpenAI\u662f\u7531\u57c3\u9686\u00b7\u9a6c\u65af\u514b(Elon Musk)\u548c\u5176\u4ed6\u7845\u8c37\u77e5\u540d\u4eba\u58eb\u4e8e2015\u5e74\u521b\u7acb\u7684\u975e\u8425\u5229\u7ec4\u7ec7\uff0c\u4ee5\u786e\u4fdd\u672a\u6765\uff0c\u8d85\u4eba\u4eba\u5de5\u667a\u80fd\u662f\u4e00\u80a1\u826f\u6027\u7684\u529b\u91cf\u3002\u8fd9\u4f4d\u7279\u65af\u62c9\u9996\u5e2d\u6267\u884c\u5b98\u57282018\u5e74\u4e0e\u5b9e\u9a8c\u5ba4\u5206\u9053\u626c\u9573\uff0c\u53bb\u5e74\u6210\u4e3a\u4e00\u5bb6\u8425\u5229\u6027\u516c\u53f8\uff0c\u5e76\u63a5\u53d7\u4e86\u5fae\u8f6f10\u4ebf\u7f8e\u5143\u7684\u6295\u8d44\u3002OpenAI\u7684\u9886\u5bfc\u4eba\u58f0\u79f0\uff0c\u53ea\u6709\u5c06\u5176\u7814\u7a76\u5546\u4e1a\u5316\uff0c\u9020\u798f\u4e8e\u6295\u8d44\u8005\uff0c\u5b83\u624d\u80fd\u7b79\u96c6\u5230\u8ddf\u4e0a\u4eba\u5de5\u667a\u80fd\u524d\u6cbf\u6b65\u4f10\u6240\u9700\u7684\u6570\u5341\u4ebf\u7f8e\u5143\u3002\n\u5468\u56db\u53d1\u5e03\u7684OpenAI\u7b2c\u4e00\u6b3e\u5546\u4e1a\u4ea7\u54c1\u5b8c\u6210\u4e86\u8715\u53d8\u3002\u4e3a\u4e86\u5728\u8d85\u4eba\u4eba\u5de5\u667a\u80fd\u9886\u57df\u4e0e\u79d1\u6280\u5de8\u5934\u7ade\u4e89\u800c\u6210\u7acb\u7684\u4e00\u5bb6\u7814\u7a76\u673a\u6784\uff0c\u73b0\u5728\u6b63\u5728\u66f4\u5e73\u51e1\u7684\u9886\u57df\u5411\u4f01\u4e1a\u51fa\u552e\u4e91\u670d\u52a1\uff0c\u6311\u6218\u4ed6\u4eec\u3002\nOpenAI\u7684\u670d\u52a1\u5efa\u7acb\u5728\u673a\u5668\u5b66\u4e60\u6280\u672f\u7684\u57fa\u7840\u4e0a\uff0c\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u8fd9\u9879\u6280\u672f\u8ba9\u8ba1\u7b97\u673a\u7684\u8bed\u8a00\u80fd\u529b\u5927\u5927\u63d0\u9ad8\u3002\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u76ee\u7684\u662f\u5206\u6790\u4ece\u7f51\u7edc\u4e0a\u6536\u96c6\u7684\u5927\u91cf\u6587\u672c\uff0c\u4ee5\u53d1\u73b0\u8bed\u8a00\u4f7f\u7528\u4e2d\u7684\u7edf\u8ba1\u6a21\u5f0f\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u5bf9\u8f6f\u4ef6\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u6267\u884c\u8bf8\u5982\u56de\u7b54\u4e8b\u5b9e\u95ee\u9898\u6216\u6c47\u603b\u6587\u6863\u7b49\u4efb\u52a1\u3002\n\u8c37\u6b4c\u5df2\u7ecf\u5f00\u53d1\u4e86\u8fd9\u9879\u6280\u672f\u6765\u6539\u8fdb\u5176\u641c\u7d22\u5f15\u64ce\u5904\u7406\u957f\u67e5\u8be2\u7684\u65b9\u5f0f\uff0c\u5fae\u8f6fOffice\u4f7f\u7528\u5b83\u6765\u53d1\u73b0\u8bed\u6cd5\u6545\u969c\u3002OpenAI\u4e13\u6ce8\u4e8e\u5c06\u8fd9\u9879\u6280\u672f\u63a8\u5411\u66f4\u5927\u7684\u89c4\u6a21\uff0c\u5e76\u5236\u4f5c\u751f\u6210\u6587\u672c\u7684\u8f6f\u4ef6\u3002\u7ed9\u51fa\u4e00\u5c0f\u6bb5\u6587\u5b57\uff0c\u5b83\u5c31\u5efa\u7acb\u5728\u5b83\u7684\u57fa\u7840\u4e0a\uff0c\u89e3\u5f00\u5177\u6709\u76f8\u4f3c\u7edf\u8ba1\u7279\u6027\u7684\u53e5\u5b50\u7684\u5047\u8131\u673a\u3002\u7ed3\u679c\u53ef\u80fd\u4f1a\u51fa\u5947\u5730\u987a\u5229\uff0c\u5373\u4f7f\u6709\u65f6\u8131\u79bb\u73b0\u5b9e\u3002\n\u50cf\u8fd9\u6837\u7684\u6587\u672c\u751f\u6210\u5668\u53ef\u80fd\u4f1a\u5f88\u6709\u8da3-\u5728\u8fd9\u91cc\u8bd5\u8bd5-\u4f46\u4ee5\u524d\u6ca1\u6709\u770b\u5230\u8fc7\u592a\u591a\u7684\u5546\u4e1a\u7528\u9014\u3002OpenAI\u7684\u9996\u5e2d\u6267\u884c\u5b98\u5c71\u59c6\u00b7\u5965\u5c14\u7279\u66fc\u8868\u793a\uff0c\u6700\u65b0\u4e00\u4ee3\u7684\u4ea7\u54c1\u529f\u80fd\u5f3a\u5927\uff0c\u7075\u6d3b\u6027\u5f3a\uff0c\u53ef\u4ee5\u8fdb\u884c\u771f\u6b63\u7684\u5de5\u4f5c\u3002\u201c\u8fd9\u662f\u6211\u4eec\u7b2c\u4e00\u6b21\u6709\u6211\u4eec\u8ba4\u4e3a\u8db3\u591f\u597d\u7684\u4e1c\u897f\u53ef\u4ee5\u505a\u6210\u4ea7\u54c1\uff0c\u201d\u4ed6\u8bf4\u3002\nOpenAI\u7684\u65b0\u6587\u672c\u751f\u6210\u5668\u4f7f\u7528\u4ece\u7f51\u7edc\u548c\u6570\u5b57\u5316\u4e66\u7c4d\u4e2d\u6536\u96c6\u7684\u8fd11\u4e07\u4ebf\u4e2a\u5355\u8bcd\uff0c\u5728\u4e00\u53f0\u8d85\u7ea7\u8ba1\u7b97\u673a\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u8d85\u7ea7\u8ba1\u7b97\u673a\u4e0a\u6709\u8be5\u516c\u53f8\u652f\u4ed8\u7ed9\u5fae\u8f6f\u7684\u6570\u5341\u4e07\u4e2a\u5904\u7406\u5668\uff0c\u6709\u6548\u5730\u5c06\u8be5\u516c\u53f810\u4ebf\u7f8e\u5143\u6295\u8d44\u7684\u4e00\u90e8\u5206\u8fd4\u8fd8\u7ed9\u4e86\u5b83\u7684\u6765\u6e90\u3002\n\u4e0e\u5927\u591a\u6570\u4eba\u5de5\u667a\u80fd\u4e91\u670d\u52a1\u76f8\u6bd4\uff0c\u8fd9\u9879\u670d\u52a1\u66f4\u52a0\u5f00\u653e\uff0c\u540e\u8005\u901a\u5e38\u6267\u884c\u4e00\u9879\u4efb\u52a1\uff0c\u5982\u7ffb\u8bd1\u6216\u56fe\u50cf\u6807\u8bb0\uff0c\u5e76\u901a\u8fc7\u7279\u5b9a\u7684\u547d\u4ee4\u8fdb\u884c\u63a7\u5236\u3002\u60f3\u8981\u5229\u7528OpenAI\u6280\u672f\u7684\u7a0b\u5e8f\u5458\u53ea\u9700\u63d0\u4ea4\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u672c\uff0c\u5e76\u5c06\u65b0\u751f\u6210\u7684\u6587\u672c\u53d6\u56de\u3002\n\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u6709\u5c40\u9650\u6027\uff0c\u4f46\u901a\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u6b63\u786e\u7684\u8f93\u5165\uff0c\u5c31\u6709\u53ef\u80fd\u5f15\u5bfc\u8f6f\u4ef6\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c1d\u8bd5\u548c\u6309\u6469\u5b83\uff0c\u4ee5\u6a21\u4eff\u4e92\u8054\u7f51\u4e0a\u7279\u5b9a\u90e8\u5206\u7684\u7edf\u8ba1\u8bed\u8a00\u6a21\u5f0f\u3002\n\u63d0\u4ea4\u4e3a\u5c0f\u5b66\u751f\u91cd\u5199\u7684\u6bb5\u843d\u793a\u4f8b\uff0c\u7136\u540e\u662f\u4e00\u6bb5\u7b80\u5355\u7684\u6bb5\u843d\uff0c\u4f1a\u4fc3\u4f7f\u8be5\u670d\u52a1\u91cd\u5199\u6bb5\u843d\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u9605\u8bfb\u3002\u8be5\u670d\u52a1\u53ef\u4ee5\u56de\u7b54\u4e8b\u5b9e\u95ee\u9898\u6216\u5145\u5f53\u804a\u5929\u673a\u5668\u4eba\uff0c\u5982\u679c\u63d0\u4f9b\u793a\u4f8bQ&amp\uff1bA\u5bf9\u6216\u8f6e\u6d41\u5bf9\u8bdd\uff0c\u8fd9\u4e9b\u5bf9\u8bdd\u53ef\u80fd\u4f1a\u6307\u5bfc\u8f6f\u4ef6\u5229\u7528\u5176\u5728\u4e8b\u5b9e\u9648\u8ff0\u6216\u5bf9\u8bdd\u65b9\u9762\u7684\u7ecf\u9a8c\u3002\nOpenAI\u7684\u9996\u5e2d\u6280\u672f\u5b98\u683c\u96f7\u683c\u00b7\u5e03\u7f57\u514b\u66fc(Greg Brockman)\u8868\u793a\uff1a\u201c\u5de8\u5927\u7684\u5fc3\u7406\u53d8\u5316\u662f\uff0c\u5b83\u66f4\u50cf\u662f\u4e0e\u4eba\u4ea4\u8c08\uff0c\u800c\u4e0d\u662f\u4e3a\u673a\u5668\u683c\u5f0f\u5316\u4e1c\u897f\u3002\u201d\u201c\u4f60\u7ed9\u5b83\u51e0\u4e2a\u95ee\u9898\u548c\u7b54\u6848\uff0c\u5b83\u5c31\u4f1a\u7a81\u7136\u8fdb\u5165\u95ee\u7b54\u6a21\u5f0f\u3002\u201d\n\u5c3c\u514b\u00b7\u5f17\u7f57\u65af\u7279(Nick Frosst)\u662f\u4e00\u540d\u81f4\u529b\u4e8e\u8bed\u8a00\u673a\u5668\u5b66\u4e60\u7684\u7814\u7a76\u5458\uff0c\u66fe\u5728\u8c37\u6b4c\u5de5\u4f5c\u3002\u4ed6\u8868\u793a\uff0c\u4e0e\u4eba\u5de5\u667a\u80fd\u5408\u4f5c\u7684\u65b0\u9896\u65b9\u5f0f\u53ef\u80fd\u4f1a\u6269\u5927\u8bed\u8a00\u6280\u672f\u5b9e\u9a8c\u7684\u4eba\u7fa4\u3002\u201c\u4f60\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u662f\u4ee4\u4eba\u5174\u594b\u7684\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u8fd9\u662f\u5927\u591a\u6570\u4eba\u8ba4\u4e3a\u4eba\u5de5\u667a\u80fd\u5e94\u8be5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u201d\nOpenAI\u5728\u4e24\u4e2a\u6708\u5185\u514d\u8d39\u63d0\u4f9b\u670d\u52a1\uff0c\u76ee\u524d\u5df2\u7ecf\u6709\u4e00\u4e9b\u7528\u6237\u3002Algolia\u662f\u4e00\u5bb6\u4e3a\u5e94\u7528\u7a0b\u5e8f\u548c\u7f51\u7ad9\u6784\u5efa\u5185\u90e8\u641c\u7d22\u5f15\u64ce\u7684\u521d\u521b\u516c\u53f8\uff0c\u5b83\u5229\u7528\u5b83\u6765\u63d0\u9ad8\u5bf9\u590d\u6742\u641c\u7d22\u5b57\u7b26\u4e32\u7684\u7406\u89e3\u3002\n\u5176\u4ed6\u4eba\u5219\u5728\u4f7f\u7528\u4e00\u9879\u9644\u52a0\u670d\u52a1\uff0c\u5373OpenAI\u901a\u8fc7\u9644\u52a0\u6570\u636e\u5c06\u8f6f\u4ef6\u7684\u4e00\u4e2a\u7248\u672c\u201c\u5fae\u8c03\u201d\u5230\u7279\u5b9a\u7684\u4efb\u52a1\u3002\u6570\u5b66\u6559\u80b2\u7f51\u7ad9Art of Problem Solving\u4f7f\u7528\u5b83\u6765\u5efa\u8bae\u8bc4\u8bba\uff0c\u5411\u5b66\u751f\u53d1\u9001\u4ed6\u4eec\u63d0\u4ea4\u7684\u610f\u89c1\uff0c\u4ece\u800c\u52a0\u5feb\u4e86\u8bc4\u5206\u5458\u7684\u5de5\u4f5c\u3002\n\u5c3d\u7ba1\u5f88\u65e9\u5c31\u6709\u5174\u8da3\uff0c\u4f46OpenAI\u7684\u9886\u5bfc\u4eba\u5766\u7387\u5730\u627f\u8ba4\uff0c\u76ee\u524d\u8fd8\u8fdc\u4e0d\u6e05\u695a\u8fd9\u79cd\u65b0\u7684\u4eba\u5de5\u667a\u80fd\u7f16\u7a0b\u6a21\u578b\u80fd\u6709\u591a\u5927\u7684\u7528\u5904\u3002\n\u4e00\u4e2a\u672a\u77e5\u6570\u662f\u5b83\u7684\u53ef\u9760\u6027\u3002\u201c\u8fd9\u4e9b\u6a21\u578b\u6709\u4e9b\u4e0d\u53ef\u9884\u6d4b\uff0c\u201d\u54a8\u8be2\u516c\u53f8\u8bed\u8a00\u6280\u672f\u96c6\u56e2(Language Technology Group)\u7684\u7f57\u4f2f\u7279\u00b7\u6234\u5c14(Robert Dale)\u8bf4\u3002OpenAI\u7684\u8f6f\u4ef6\u53ef\u4ee5\u91cd\u5efa\u6587\u672c\u6a21\u5f0f\uff0c\u4f46\u5bf9\u4e16\u754c\u6ca1\u6709\u5e38\u8bc6\u7406\u89e3\u3002\u5b83\u7684\u591a\u529f\u80fd\u6027\u65e2\u53ef\u4ee5\u662f\u8d44\u4ea7\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u503a\u3002\u5076\u5c14\u7684\u53ee\u5f53\u58f0\u5bf9\u67d0\u4e9b\u7528\u9014(\u5982\u9884\u6d4b\u6027\u6587\u672c)\u5f71\u54cd\u4e0d\u5927\uff0c\u4f46\u5728\u5176\u4ed6\u7528\u9014(\u5982\u5ba2\u6237\u652f\u6301\u804a\u5929\u673a\u5668\u4eba)\u4e2d\u53ef\u80fd\u4f1a\u7834\u574f\u4ea4\u6613\u3002\n\u5173\u4e8eOpenAI\u7684\u6280\u672f\uff0c\u6709\u4e00\u70b9\u662f\u80af\u5b9a\u7684\uff0c\u90a3\u5c31\u662f\u5b83\u53ef\u4ee5\u8bf4\u810f\u8bdd\u3002\u5b83\u5728\u5927\u7247\u4e92\u8054\u7f51\u4e0a\u7684\u8bad\u7ec3\u4f7f\u8be5\u8f6f\u4ef6\u7cbe\u901a\u4ee4\u4eba\u4e0d\u5feb\u7684\u8bed\u8a00\uff0c\u5982\u968f\u610f\u6216\u5484\u5484\u903c\u4eba\u7684\u79cd\u65cf\u4e3b\u4e49\uff0c\u5e76\u53ef\u4ee5\u4fc3\u4f7f\u5b83\u91cd\u65b0\u521b\u5efa\u8fd9\u4e9b\u8bed\u8a00\u3002\u8fd9\u4e00\u7ed3\u679c\u8ba9\u4eba\u60f3\u8d77Twitter\u7528\u6237\u662f\u5982\u4f55\u6002\u607f\u81ed\u540d\u662d\u8457\u7684\u5fae\u8f6f\u673a\u5668\u4ebaTay\u53d1\u8868\u79cd\u65cf\u4e3b\u4e49\u8a00\u8bba\u7684\u3002\n\u5f53\u201c\u8fde\u7ebf\u201d\u7528\u7559\u8a00\u677f4chan\u7684\u4e24\u53e5\u8bdd\u63d0\u4f9b\u8fd9\u9879\u670d\u52a1\u65f6\uff0c\u4ed6\u4eec\u6307\u8d23\u5171\u548c\u515a\u4eba\u201c\u6ca1\u6709\u9aa8\u6c14\u201d\uff0c\u6ca1\u6709\u5bf9\u201c\u514b\u6797\u987f\u3001\u4f69\u591a\u65af\u3001\u5ba1\u67e5\u6216\u9a9a\u4e71\u201d\u91c7\u53d6\u884c\u52a8\uff0cOpenAI\u7684\u670d\u52a1\u5347\u7ea7\uff0c\u5632\u8bbd\u8bf4\u201c\u6211\u4eec\u6b63\u5728\u88ab\u6bb4\u6253\u548c\u5f3a\u5978\u2026\u3002\u5927\u91cf\u79fb\u6c11\u59cb\u4e8e60\u5e74\u4ee3\uff0c\u800c\u4e14\u4ece\u672a\u505c\u6b62\u8fc7\u3002\u201c\u3002\nOpenAI\u8868\u793a\uff0c\u5b83\u5c06\u5bf9\u5ba2\u6237\u8fdb\u884c\u5ba1\u67e5\uff0c\u4ee5\u9632\u6b62\u4eba\u4eec\u4f7f\u7528\u8fd9\u9879\u670d\u52a1\u6765\u5904\u7406\u5783\u573e\u90ae\u4ef6\u6216\u9a9a\u6270\u7b49\u4e8b\u60c5\u3002\u4e00\u4e9b\u5ba2\u6237\u5df2\u7ecf\u5efa\u9020\u4e86\u8fc7\u6ee4\u5668\u6765\u963b\u6b62\u8fd9\u9879\u6280\u672f\u4ea7\u751f\u6709\u6bd2\u8bed\u8a00\uff0cOpenAI\u6b63\u5728\u7814\u7a76\u81ea\u5df1\u7684\u5b89\u5168\u529f\u80fd\u3002\nAltman\u9884\u8ba1OpenAI\u7684\u4ea7\u54c1\u4e0d\u4f1a\u9a6c\u4e0a\u6709\u5229\u53ef\u56fe\uff0c\u4f46\u4ed6\u8868\u793a\uff0c\u968f\u7740\u5b9e\u9a8c\u5ba4\u7684\u6539\u8fdb\uff0c\u5b83\u53ef\u80fd\u4f1a\u5728\u51e0\u5e74\u5185\u53d1\u5c55\u6210\u4e3a\u4e00\u4e2a\u91cd\u8981\u7684\u6536\u5165\u6765\u6e90\u3002\u5fae\u8f6f\u5728\u8be5\u5b9e\u9a8c\u5ba4\u7684\u80a1\u4efd\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002OpenAI\u5728\u5fae\u8f6f\u7684Azure\u4e91\u5e73\u53f0\u4e0a\u6784\u5efa\u4e86\u5b83\u7684\u65b0\u670d\u52a1\uff1b\u5982\u679c\u5fae\u8f6f\u5c06\u5176\u4f5c\u4e3a\u4eba\u5de5\u667a\u80fd\u670d\u52a1\u63d0\u4f9b\uff0c\u5b83\u5c06\u770b\u5230\u66f4\u5e7f\u6cdb\u7684\u7528\u9014\u3002\nAltman\u63a5\u53d7\u4e86\u4e0e\u5fae\u8f6f\u5efa\u7acb\u66f4\u7d27\u5bc6\u5173\u7cfb\u7684\u53ef\u80fd\u6027\uff0c\u4f46\u62d2\u7edd\u8be6\u7ec6\u8bf4\u660e\u3002\u5f53\u300a\u8fde\u7ebf\u300b\u6742\u5fd7\u63d0\u793a\u5b9e\u9a8c\u5ba4\u7684\u65b0\u8f6f\u4ef6\u586b\u5199\u300aOpenAI\u548c\u5fae\u8f6f\u7b2c\u4e00\u4e2a\u5546\u4e1a\u5408\u4f5c\u9879\u76ee\u300b\u7684\u7ec6\u8282\u65f6\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u6b3e\u540d\u4e3aCopilot\u7684\u6e38\u620f\uff0c\u5b83\u5141\u8bb8\u4e24\u4e2a\u4eba\u73a9\u4e00\u6b3e\u8d5b\u8f66\u6e38\u620f\uff0c\u4e00\u4e2a\u4eba\u63a7\u5236\u6cb9\u95e8\u8e0f\u677f\uff0c\u53e6\u4e00\u4e2a\u4eba\u63a7\u5236\u5239\u8f66\u3002\n\u2728\u4f7f\u7528\u6211\u4eec\u9f7f\u8f6e\u56e2\u961f\u7684\u6700\u4f73\u9009\u62e9\u4f18\u5316\u60a8\u7684\u5bb6\u5ead\u751f\u6d3b\uff0c\u4ece\u673a\u5668\u4eba\u5438\u5c18\u5668\u5230\u4ef7\u683c\u5b9e\u60e0\u7684\u5e8a\u57ab\u518d\u5230\u667a\u80fd\u626c\u58f0\u5668", "note_en": "Last spring, artificial intelligence research institute  OpenAI said it had made software so good at generating text\u2014including fake news articles\u2014that it was  too dangerous to release. That line in the sand was soon erased when two recent master\u2019s grads  recreated the software and OpenAI released the original, saying awareness of the risks had grown and it hadn\u2019t seen evidence of misuse.\n Now the lab is back with a more powerful text generator and a new pitch: Pay us to put it to work in your business. Thursday, OpenAI launched a cloud service that a handful of companies are already using to improve search or provide feedback on answers to math problems. It\u2019s a test of a new way of programming  AI, and the lab\u2019s unusual business model.\n OpenAI was founded as a nonprofit  in 2015 by  Elon Musk and other Silicon Valley notables to ensure future, superhuman AI was a benign force. The Tesla CEO parted ways with the lab in 2018, and last year it  became a for-profit company and took a  $1 billion investment from Microsoft. OpenAI\u2019s leaders claim that only by commercializing its research for the benefit of investors can it raise the billions needed to keep pace on the frontiers of AI.\n  Thursday\u2019s launch of OpenAI\u2019s first commercial product completes the metamorphosis. A research institute created to compete with tech giants on superhuman AI is now challenging them in the more mundane arena of selling  cloud services to businesses.\n  OpenAI\u2019s service is built on a  machine learning technique that has made computers  much better with language over the past two years. Machine learning algorithms are directed to analyze vast collections of text scraped from the web to discover the statistical patterns in language use. The software can then be tuned to perform tasks like answering factual questions, or summarizing documents.\n  Google has tapped the technology to improve how its search engine handles long queries, and Microsoft Office uses it to spot grammar glitches. OpenAI has focused on pushing the technique to greater scale and making software that generates text. Given a snatch of writing, it builds on it, unspooling sentences with similar statistical properties. The results can be uncannily smooth, if sometimes  unmoored from reality.\n  Text generators like that can be fun\u2014 try one here\u2014but haven\u2019t previously seen much commercial use. OpenAI\u2019s CEO Sam Altman says the latest generation is powerful and flexible enough for real work. \u201cThis is the first time we\u2019ve got something we think is good enough to make into a product,\u201d he says.\n OpenAI\u2019s  new text generators are trained using a collection of almost a trillion words collected from the web and digitized books, on a  supercomputer with hundreds of thousands of processors the company paid Microsoft to build, effectively returning some of the company\u2019s $1 billion investment to its source.\n  The service is more open-ended than most AI cloud services, which usually perform one task, such as translation or image tagging, and are controlled with specific commands. Programmers who want to tap OpenAI\u2019s technology simply submit human-readable text and get newly generated text back.\n That may sound limiting, but by crafting the right input it\u2019s possible to steer the software to perform different tasks. The goal is to try and massage it to riff on the statistical language patterns from a particular part of the internet.\n Submitting examples of paragraphs rewritten for elementary schoolers followed by an unsimplified passage prompts the service to rewrite it to be easier to read. The service can answer factual questions or function as a chatbot if supplied with example Q&amp;A pairs or turns of dialog that might direct the software to draw on its experience of factual statements or conversations.\n  \u201cThe big mental shift is it\u2019s much more like talking to a human than formatting things for a machine,\u201d says Greg Brockman, OpenAI\u2019s chief technology officer. \u201cYou give it a few questions and answers and suddenly it\u2019s in Q&amp;A mode.\u201d\n Nick Frosst, a researcher working on language machine learning who  previously worked at Google, says that novel way of working with AI could widen the pool of people experimenting with language technology. \u201cIt\u2019s exciting that you can do that,\u201d he says. \u201cIt\u2019s how most people think AI should work.\u201d\n  OpenAI is offering its service for free for two months, and already has some users. Algolia, a startup that builds internal search engines for apps and websites, uses it to improve its understanding of complex search strings.\n Others are using an additional service in which OpenAI \u201cfine tunes\u201d a version of the software to a specific task with additional data. Math education site Art of Problem Solving uses that to suggest comments to send students on their submissions, speeding up the work of graders.\n Despite that early interest, OpenAI\u2019s leaders freely admit that it\u2019s far from clear how widely useful this new model of AI programming can be.\n  One unknown is its reliability. \u201cThese models are somewhat unpredictable,\u201d says Robert Dale, of consultants Language Technology Group. OpenAI\u2019s software can recreate the patterns of text but doesn\u2019t have a common sense understanding of the world. Its versatility can be a liability as well as an asset. Occasional clangers are of little consequence for some uses, such as predictive text, but could be deal breakers in others, such as a customer support chatbot.\n One certainty about OpenAI\u2019s technology is that it can talk dirty and nasty. Its training on vast swaths of the internet makes the software well-versed in unsavory language such as casual or aggressive racism, and it can be prompted to recreate them. The results can be reminiscent of how Twitter users prodded a notorious Microsoft  bot called Tay to make racist comments.\n When WIRED provided the service with two sentences from message board 4chan accusing Republicans of being \u201cspineless\u201d and not taking action on \u201cClinton, Pedos, Censorship or Riots,\u201d OpenAI\u2019s service escalated, riffing that \u201cWe are being beaten and raped \u2026 vast immigration started in the &#39;60s and never stopped.\u201d\n OpenAI says it will vet customers to prevent people from using the service for things like spam or harassment. Some customers have built filters to block the technology from producing toxic language, and OpenAI is working on its safety features of its own.\n Altman doesn\u2019t expect OpenAI\u2019s product to be lucrative right away but says it could develop into a significant revenue source in a few years as the lab makes improvements. Microsoft\u2019s stake in the lab could help. OpenAI built its new service on Microsoft\u2019s Azure cloud platform; it could see much wider use if Microsoft offered it as an AI service.\n  Altman accepted closer relations with Microsoft as a possibility but declined to elaborate. When WIRED prompted the lab\u2019s new software to fill out the details on \u201cOpenAI and Microsoft\u2019s first joint commercial venture\u201d it described a \u201cgame called Copilot that allows two people to play a racing game with one person controlling the gas pedal and the other the brakes.\u201d\n   \u2728 Optimize your home life with our Gear team\u2019s best picks, from  robot vacuums to  affordable mattresses to  smart speakers", "posttime": "2020-06-11 23:55:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5546\u4e1a,\u6587\u672c,text,openai", "title": "OpenAI\u6587\u672c\u751f\u6210\u5668\u5373\u5c06\u5546\u4e1a\u5316", "title_en": "OpenAI's Text Generator Is Going Commercial", "transed": 1, "url": "https://www.wired.com/story/openai-text-generator-going-commercial/", "via": "", "real_tags": ["\u5546\u4e1a", "\u6587\u672c", "text", "openai"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006148, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "OpenAI API", "note_en": "OpenAI API", "posttime": "2020-06-11 23:55:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "openai", "title": "OpenAI API", "title_en": "OpenAI API", "transed": 1, "url": "https://beta.openai.com/", "via": "", "real_tags": ["openai"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006147, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9009\u62e9\u8d2d\u4e70\u8bd5\u7528\u8ba2\u9605\u6e2f\u5e0110\u5143\uff0c\u8bd5\u7528\u671f4\u5468\uff0c\u8bd5\u7528\u7ed3\u675f\u540e\u6bcf\u6708\u6536\u8d39\u6e2f\u5e01495.00\u5143\u3002\n4\u5468\u5185\u53ef\u65e0\u9650\u5236\u4eab\u53d7\u82f1\u56fd\u201c\u91d1\u878d\u65f6\u62a5\u201d\u503c\u5f97\u4fe1\u8d56\u3001\u5c61\u83b7\u6b8a\u8363\u7684\u5546\u4e1a\u65b0\u95fb\u7684\u65e0\u9650\u91cf\u9ad8\u7ea7\u6570\u5b57\u8bbf\u95ee\u3002\n\u9009\u62e9\u8d2d\u4e70\u6570\u7801\u8ba2\u9605\uff0c\u6bcf\u5468\u6e2f\u5e01\u4e09\u5341\u516d\u70b9\u4e8c\u4e94\u5143\uff0c\u8bd5\u7528\u7ed3\u675f\u540e\u6bcf\u6708\u6536\u8d39\u6e2f\u5e01305.00\u5143\u3002\n\u793c\u54c1-\u6bcf\u6708\u4e0e\u5bb6\u4eba\u3001\u670b\u53cb\u548c\u540c\u4e8b\u5206\u4eab\u591a\u8fbe10\u7bc7\u6587\u7ae0", "note_en": "Select  Purchase a Trial subscription for HK$10.00 for 4 weeks   You will be billed HK$495.00 per month after the trial ends\n  For 4 weeks receive unlimited Premium digital access to the FT&#39;s trusted, award-winning business news\n  Select  Purchase a Digital subscription for HK$36.25 per week   You will be billed HK$305.00 per month after the trial ends\n  Gift Article \u2013 share up to 10 articles a month with family, friends and colleagues", "posttime": "2020-06-11 23:55:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "losing,\u8bd5\u7528", "title": "\u7f8e\u56fd\u6b63\u5728\u5931\u53bb\u5bf9\u6297\u65b0\u51a0\u80ba\u708e\u7684\u52c7\u6c14", "title_en": "America is losing the stomach to fight Covid-19", "transed": 1, "url": "https://www.ft.com/content/b223f1cb-a6ed-4c40-8352-4a065ff084fb", "via": "", "real_tags": ["losing", "\u8bd5\u7528"]}, {"category": "", "categoryclass": "", "imagename": "aa3947824b12e18bf53463c700514bf1.jpg", "infoid": 1006145, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d\u5468\u56db\u62a5\u9053\uff0c\u6b27\u76df\u6b63\u51c6\u5907\u5c31\u7535\u5546\u5de8\u5934\u4e9a\u9a6c\u900a\u5728\u5176\u7f51\u7ad9\u4e0a\u5bf9\u5f85\u7b2c\u4e09\u65b9\u5356\u5bb6\u7684\u884c\u4e3a\u5bf9\u5176\u63d0\u8d77\u53cd\u5784\u65ad\u8bc9\u8bbc\u3002\n\u636e\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d\u62a5\u9053\uff0c\u6b27\u76df\u6700\u9ad8\u53cd\u5784\u65ad\u76d1\u7ba1\u673a\u6784\u6b27\u76df\u59d4\u5458\u4f1a(European Commission)\u6700\u65e9\u53ef\u80fd\u5728\u4e0b\u5468\u63d0\u51fa\u6b63\u5f0f\u6307\u63a7\u3002\u636e\u62a5\u9053\uff0c\u8fd9\u4e9b\u6307\u63a7\u5c06\u6307\u63a7\u4e9a\u9a6c\u900a\u5229\u7528\u5176\u5e73\u53f0\u4e0a\u72ec\u7acb\u5356\u5bb6\u7684\u4e2a\u4eba\u6570\u636e\u63a8\u51fa\u7ade\u4e89\u4ea7\u54c1\u3002\n\u4e3a\u6211\u4eec\u7684\u7f16\u8f91\u8ba2\u9605CNET Now\u65f6\u4e8b\u901a\u8baf\uff0c\u7cbe\u9009\u5f53\u5929\u6700\u91cd\u8981\u7684\u65b0\u95fb\u3002\n\u6b27\u76df\u59d4\u5458\u4f1a\u7684\u4e00\u4f4d\u5973\u53d1\u8a00\u4eba\u62d2\u7edd\u7f6e\u8bc4\uff0c\u5e76\u8865\u5145\u8bf4\uff0c\u8c03\u67e5\u6b63\u5728\u8fdb\u884c\u4e2d\u3002\u4e9a\u9a6c\u900a\u4e5f\u62d2\u7edd\u7f6e\u8bc4\u3002\n\u6b27\u76df\u53cd\u5784\u65ad\u76d1\u7ba1\u673a\u6784\u4e8e2019\u5e747\u6708\u5bf9\u4e9a\u9a6c\u900a\u5c55\u5f00\u8c03\u67e5\u3002\u76ee\u7684\u662f\u8c03\u67e5\u8fd9\u5bb6\u7535\u5546\u5de8\u5934\u4f7f\u7528\u72ec\u7acb\u96f6\u552e\u5546\u7684\u6570\u636e\u662f\u5426\u8fdd\u53cd\u4e86\u6b27\u76df\u7684\u7ade\u4e89\u89c4\u5219\u3002\u8d1f\u8d23\u6b27\u76df\u7ade\u4e89\u653f\u7b56\u7684\u4e13\u5458\u739b\u683c\u4e3d\u7279\u00b7\u7ef4\u65af\u7279\u683c(Margrethe Vestager)\u5f53\u65f6\u8868\u793a\uff0c\u6b27\u6d32\u6d88\u8d39\u8005\u5728\u7f51\u4e0a\u8d2d\u4e70\u9009\u62e9\u548c\u5b9a\u4ef7\u3002\n\u7ef4\u65af\u7279\u683c\u8bf4\uff1a\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5927\u578b\u5728\u7ebf\u5e73\u53f0\u4e0d\u4f1a\u901a\u8fc7\u53cd\u7ade\u4e89\u884c\u4e3a\u6d88\u9664\u8fd9\u4e9b\u597d\u5904\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u975e\u5e38\u4ed4\u7ec6\u5730\u89c2\u5bdf\u4e9a\u9a6c\u900a\u7684\u5546\u4e1a\u5b9e\u8df5\u53ca\u5176\u4f5c\u4e3a\u5e02\u573a\u548c\u96f6\u552e\u5546\u7684\u53cc\u91cd\u89d2\u8272\uff0c\u4ee5\u8bc4\u4f30\u5176\u5bf9\u6b27\u76df\u7ade\u4e89\u89c4\u5219\u7684\u9075\u5b88\u60c5\u51b5\u3002\n\u4e9a\u9a6c\u900a\u4e4b\u524d\u66fe\u8868\u793a\uff0c\u5728\u5f00\u53d1\u81ea\u5df1\u7684\u4ea7\u54c1\u65f6\uff0c\u5b83\u4e0d\u4f1a\u4f7f\u7528\u4ece\u7b2c\u4e09\u65b9\u5356\u5bb6\u90a3\u91cc\u6536\u96c6\u7684\u4fe1\u606f\u3002\u7136\u800c\uff0c\u534e\u5c14\u8857\u65e5\u62a5\u57284\u6708\u4efd\u62a5\u9053\u79f0\uff0c\u4e9a\u9a6c\u900a\u4ece\u7b2c\u4e09\u65b9\u5356\u5bb6\u90a3\u91cc\u6536\u96c6\u4e86\u6570\u636e\uff0c\u4ee5\u5e2e\u52a9\u5176\u786e\u5b9a\u81ea\u5df1\u4ea7\u54c1\u7684\u5b9a\u4ef7\uff0c\u54ea\u4e9b\u529f\u80fd\u9700\u8981\u590d\u5236\uff0c\u6216\u8005\u662f\u5426\u53c2\u4e0e\u67d0\u4e2a\u4ea7\u54c1\u7c7b\u522b\u3002\n\u5c0a\u91cd\u4ed6\u4eba\uff0c\u4fdd\u6301\u6587\u660e\u793c\u8c8c\uff0c\u4e0d\u79bb\u9898\u3002\u6211\u4eec\u5220\u9664\u8fdd\u53cd\u6211\u4eec\u653f\u7b56\u7684\u8bc4\u8bba\uff0c\u6211\u4eec\u9f13\u52b1\u60a8\u9605\u8bfb\u8fd9\u4e9b\u8bc4\u8bba\u3002\u6211\u4eec\u53ef\u4ee5\u968f\u65f6\u5173\u95ed\u8ba8\u8bba\u7ebf\u7a0b\u3002", "note_en": "The European Union is preparing to file antitrust charges against  Amazon over the e-commerce giant&#39;s treatment of third-party sellers on its site, according to a report Thursday from  The Wall Street Journal.\n The European Commission, the union&#39;s top antitrust regulator, could file official charges as early as next week, according to the Journal. The charges will reportedly accuse Amazon of using\u00a0  data on independent sellers on its platform to launch competing products.\n  Subscribe to the CNET Now newsletter for our editors&#39; picks for the most important stories of the day.\n A spokeswoman for the European Commission declined to comment, adding that its investigation is ongoing. Amazon also declined to comment.\n The European Union&#39;s antitrust regulators   opened an investigation into Amazon in July 2019. The goal is to explore whether the e-commerce giant breached the EU&#39;s competition rules with its use of data from independent retailers. Commissioner Margrethe Vestager, who is in charge of the EU&#39;s competition policy, said at the time that European customers shop online for the selection and pricing.\n &#34;We need to ensure that large online platforms don&#39;t eliminate these benefits through anti-competitive behaviour,&#34; Vestager said. &#34;I have therefore decided to take a very close look at Amazon&#39;s business practices and its dual role as marketplace and retailer, to assess its compliance with EU competition rules.&#34;\n Amazon has said previously that it doesn&#39;t use information collected from third-party sellers when developing its own products. However, the Journal reported in April that Amazon scooped up data from third-party sellers to help it determine pricing of its own products, which features to replicate or whether to get involved in a product category.\n  Be respectful, keep it civil and stay on topic. We delete comments that violate  our policy, which we encourage you to read. Discussion threads can be closed at any time at our discretion.", "posttime": "2020-06-11 23:38:01", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4e9a\u9a6c\u900a,amazon,rust,\u53cd\u5784\u65ad,hit", "title": "\u62a5\u9053\u79f0\uff0c\u6b27\u76df\u5c06\u5c31\u7b2c\u4e09\u65b9\u5356\u5bb6\u5f85\u9047\u5bf9\u4e9a\u9a6c\u900a\u63d0\u51fa\u53cd\u5784\u65ad\u6307\u63a7", "title_en": "EU To Hit Amazon With Antitrust Charges Over Treatment of Third-Party Sellers, Report Says", "transed": 1, "url": "https://www.cnet.com/news/eu-to-hit-amazon-with-antitrust-charges-over-treatment-of-third-party-sellers-report-says/", "via": "", "real_tags": ["\u4e9a\u9a6c\u900a", "amazon", "rust", "\u53cd\u5784\u65ad", "hit"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006144, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0d\u4e45\u524d\uff0c\u6709\u4e00\u4ef6\u4e8b\u8ba9\u6211\u5f88\u607c\u706b\uff0c\u90a3\u5c31\u662f\u6709\u4eba\u8bf4\u8981\u6bcf\u5468\u548c\u4ed6\u7684\u59bb\u5b50\u8fdb\u884c\u4e00\u5bf9\u4e00\u3002\u6211\u5173\u4e8e\u8fd9\u4ef6\u4e8b\u7684\u5e16\u5b50\u662f\u8fd9\u6837\u5199\u7684\uff1a\n\u8001\u5b9e\u8bf4\uff0c\u6211\u8ba4\u4e3a\u8fd9\u542c\u8d77\u6765\u662f\u4e2a\u4e0d\u9519\u7684\u4e3b\u610f--\u7ed3\u6784\u5316\u6c9f\u901a\u5f88\u68d2\uff0c\u4e0e\u5408\u4f5c\u4f19\u4f34\u66f4\u597d\u7684\u6c9f\u901a\u4e5f\u5f88\u68d2\u3002\u5373\u4f7f\u5b83\u6700\u7ec8\u8bc1\u660e\u4e0d\u8d77\u4f5c\u7528\uff0c\u5b83\u81f3\u5c11\u770b\u8d77\u6765\u662f\u5408\u7406\u7684\u5c1d\u8bd5\u3002\n\u4e0d\u7ba1\u5b83\u662f\u597d\u662f\u574f\uff0c\u6211\u5b9e\u9645\u4e0a\u5bf9\u6bcf\u4e2a\u53d6\u7b11\u5b83\u7684\u4eba\u90fd\u5f88\u751f\u6c14\u3002\u6211\u6765\u8fd9\u91cc\u5e76\u4e0d\u662f\u56e0\u4e3a\u4f60\u5632\u7b11\u67d0\u4eba\u8bd5\u56fe\u6539\u5584\u4ed6\u4eec\u5728\u4eba\u9645\u5173\u7cfb\u4e2d\u7684\u6c9f\u901a\uff0c\u56e0\u4e3a\u4f60\u8ba4\u4e3a\u4ed6\u4eec\u8fd9\u6837\u505a\u7684\u65b9\u5f0f\u5f88\u5947\u602a\u3002\n\u662f\u7684\uff0c\u5b83\u662f\u7528\u4e00\u79cd\u975e\u5e38\u5546\u4e1a\u5316\u7684\u8bed\u8a00\u67b6\u6784\u8d77\u6765\u7684\u3002\u90a3\u53c8\u600e\u4e48\u6837\uff1f\u4eba\u4eec\u628a\u5728\u4e00\u79cd\u73af\u5883\u4e2d\u5b66\u5230\u7684\u6709\u4ef7\u503c\u7684\u6c9f\u901a\u6280\u5de7\u62ff\u6765\uff0c\u770b\u770b\u4ed6\u4eec\u662f\u5426\u80fd\u7528\u5b83\u4eec\u6765\u4f7f\u4ed6\u4eec\u751f\u6d3b\u4e2d\u7684\u5176\u4ed6\u6c9f\u901a\u53d8\u5f97\u66f4\u4ee4\u4eba\u9707\u60ca\uff01\n\u6211\u4e0d\u77e5\u9053\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4ed6\u4eec\u5904\u7406\u6d6a\u6f2b\u5173\u7cfb\u7684\u65b9\u5f0f\u662f\u5426\u5065\u5eb7\u6709\u6548\uff0c\u4f46\u4f60\u6240\u505a\u7684\u5c31\u662f\u53d6\u7b11\u90a3\u4e9b\u4e0e\u4f60\u8ba4\u53ef\u7684\u4eba\u4e0d\u540c\u7684\u602a\u4eba\uff0c\u8fd9\u4e0d\u662f\u4e00\u79cd\u597d\u7684\u5f62\u8c61\u3002(\u8bd1\u8005\u6ce8\uff1a\u6211\u4e0d\u77e5\u9053\u4ed6\u4eec\u5904\u7406\u604b\u7231\u5173\u7cfb\u7684\u65b9\u5f0f\u662f\u5426\u5065\u5eb7\u6709\u6548\uff0c\u4f46\u4f60\u6240\u505a\u7684\u5c31\u662f\u53d6\u7b11\u90a3\u4e9b\u4e0e\u4f60\u8ba4\u53ef\u7684\u4eba\u4e0d\u540c\u7684\u602a\u4eba)\uff0c\u8fd9\u4e0d\u662f\u4e00\u79cd\u597d\u7684\u5f62\u8c61\u3002\n\u6700\u8fd1\uff0c\u6211\u53c2\u52a0\u4e86\u4e00\u4e2a\u89e3\u653e\u7ed3\u6784\u7684\u6d3b\u52a8\uff0c\u548c\u6211\u4e00\u8d77\u5de5\u4f5c\u7684\u4e00\u4e2a\u4eba\u8bb2\u8ff0\u4e86\u4e00\u4ef6\u8da3\u4e8b\uff0c\u4ed6\u5728\u5176\u4e2d\u5c1d\u8bd5\u4e86\u4e00\u4e2a\u805a\u4f1a\u6e38\u620f\u6765\u6253\u7834\u50f5\u5c40\u3002\u5176\u4e2d\u5f88\u591a\u90fd\u5f88\u4ee4\u4eba\u754f\u7f29\uff0c\u4f46\u8fd9\u4e00\u6b21\u542c\u8d77\u6765\u5f88\u6709\u8da3\uff0c\u800c\u4e14\u6ca1\u6709\u5192\u72af\u6027(\u8fd9\u662f\u4e00\u79cd\u53e5\u5b50\u63a5\u7eed\u6e38\u620f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5728\u524d\u4e00\u4e2a\u5355\u8bcd\u4e4b\u540e\u8bf4\u4e00\u4e2a\u8bcd\uff0c\u8bd5\u56fe\u6784\u5efa\u51fa\u542c\u8d77\u6765\u50cf\u683c\u8a00\u7684\u4e1c\u897f)\u3002\u5927\u591a\u6570\u4eba\u4e00\u5f00\u59cb\u90fd\u4e0d\u60c5\u613f\uff0c\u4f46\u540e\u6765\u6295\u5165\u5230\u4e8b\u60c5\u7684\u6447\u6446\u4e2d\uff0c\u4f46\u4e5f\u6709\u5c11\u6570\u4eba\u53ea\u662f\u56fa\u6267\u5df1\u89c1\uff0c\u4e0d\u613f\u53c2\u4e0e\u5176\u4e2d\u3002(\u8fd9\u662f\u4e00\u4e2a\u53e5\u5b50\u5ef6\u7eed\u6e38\u620f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5728\u524d\u4e00\u4e2a\u5355\u8bcd\u4e4b\u540e\u8bf4\u4e00\u4e2a\u8bcd\uff0c\u8bd5\u56fe\u6784\u5efa\u542c\u8d77\u6765\u50cf\u683c\u8a00\u7684\u4e1c\u897f)\u3002\u5927\u591a\u6570\u4eba\u4e00\u5f00\u59cb\u90fd\u4e0d\u60c5\u613f\uff0c\u4f46\u4e5f\u6709\u51e0\u4e2a\u4eba\u53ea\u662f\u56fa\u6267\u5df1\u89c1\uff0c\u4e0d\u613f\u53c2\u4e0e\u3002\n\u4f46\u662f\u5c1d\u8bd5\u4e00\u4e9b\u65b0\u7684\u4e1c\u897f\uff0c\u6216\u8005\u5728\u4e0d\u540c\u7684\u80cc\u666f\u4e0b\u5c1d\u8bd5\uff0c\u603b\u662f\u4f1a\u770b\u8d77\u6765\u5f88\u5947\u602a\u3002\n\u5f53\u6709\u4eba\u8bd5\u56fe\u505a\u597d\u4e8b\u800c\u6211\u4eec\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u6b63\u786e\u7684\u4e8b\u60c5\u65f6\uff0c\u6211\u4eec\u4f1a\u60e9\u7f5a\u4ed6\u4eec\u3002\u5f53\u6709\u4eba\u8bd5\u56fe\u505a\u67d0\u4e8b\u4f46\u5931\u8d25\u65f6\uff0c\u6211\u4eec\u4f1a\u5632\u7b11\u4ed6\u4eec\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u60f3\u907f\u514d\u60e9\u7f5a\uff0c\u552f\u4e00\u7684\u65b9\u6cd5\u5c31\u662f\u5728\u4f60\u786e\u5b9a\u81ea\u5df1\u505a\u7684\u662f\u6b63\u786e\u7684\u4e8b\u60c5\u5e76\u4e14\u4f1a\u6210\u529f\u4e4b\u524d\u4e0d\u8981\u5c1d\u8bd5\uff0c\u4f46\u5b66\u4e60\u4e1c\u897f\u7684\u6700\u5feb\u65b9\u6cd5\u662f\u5c1d\u8bd5\u4e00\u4e9b\u4e1c\u897f\u3002(\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u5982\u679c\u4f60\u60f3\u9003\u907f\u60e9\u7f5a\uff0c\u552f\u4e00\u7684\u529e\u6cd5\u5c31\u662f\u4e0d\u53bb\u5c1d\u8bd5\uff0c\u76f4\u5230\u4f60\u786e\u5b9a\u81ea\u5df1\u505a\u7684\u662f\u6b63\u786e\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14\u4f1a\u6210\u529f\uff0c\u4f46\u5b66\u4e60\u4e1c\u897f\u7684\u6700\u5feb\u65b9\u6cd5\u662f\u5c1d\u8bd5\u3002)\n\u5f53\u4f60\u8bf4\u4f60\u64c5\u957f\u67d0\u4e8b\u65f6\uff0c\u90a3\u662f\u50b2\u6162\u3002\u5f53\u4f60\u8bf4\u4f60\u5728\u67d0\u4e8b\u4e0a\u505a\u5f97\u4e0d\u597d\u65f6\uff0c\u4eba\u4eec\u4f1a\u544a\u8bc9\u4f60\u4f60\u4e0d\u662f\uff0c\u6216\u8005\u628a\u5b83\u5f53\u4f5c\u5f31\u70b9\u3002\u8fd9\u4f7f\u5f97\u4eba\u4eec\u5f88\u96be\u5766\u8bda\u5730\u8c08\u8bba\u4f60\u6709\u591a\u64c5\u957f\u67d0\u4ef6\u4e8b\uff0c\u4eba\u4eec\u4e5f\u5f88\u96be\u5224\u65ad\u81ea\u5df1\u6709\u591a\u64c5\u957f\uff0c\u6240\u4ee5\u5f88\u96be\u5728\u4e0d\u8c08\u8bba\u7684\u60c5\u51b5\u4e0b\u77e5\u9053\u4f60\u6709\u591a\u597d\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5bf9\u81ea\u5df1\u80fd\u529b\u7684\u81ea\u6211\u8ba4\u8bc6\u4e5f\u662f\u505a\u597d\u8fd9\u4ef6\u4e8b\u7684\u5173\u952e\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5982\u679c\u4f60\u6210\u529f\u4e86\uff0c\u6211\u4eec\u628a\u4f60\u5949\u4e3a\u795e\u575b\uff0c\u5d07\u62dc\u4f60\uff0c\u7136\u540e\u4e00\u65e6\u4f60\u4e0d\u53ef\u907f\u514d\u5730\u50cf\u5176\u4ed6\u4eba\u4e00\u6837\u88ab\u8bc1\u660e\u662f\u4e00\u4e2a\u6709\u7f3a\u9677\u7684\u4eba\uff0c\u6211\u4eec\u5c31\u4f1a\u6467\u6bc1\u4f60\uff0c\u6467\u6bc1\u4f60\u3002\n\u5982\u679c\u6211\u5750\u4e0b\u6765\uff0c\u8bd5\u56fe\u8bbe\u8ba1\u4e00\u5957\u793e\u4f1a\u89c4\u8303\u6765\u963b\u6b62\u4eba\u4eec\u505a\u6700\u597d\u7684\u81ea\u5df1\uff0c\u8001\u5b9e\u8bf4\uff0c\u6211\u8ba4\u4e3a\u6211\u4e0d\u53ef\u80fd\u505a\u5f97\u6bd4\u8fd9\u66f4\u597d\u4e86\u3002", "note_en": "A thing I got pissed off at a while ago was reactions to someone talking about having weekly one-on-ones with his wife. My thread about it went as follows:\n I honestly think this sounds like a pretty good idea - structured communication is great, and better communication with partners is also great. Even if it turns out not to work, it&#39;s something that seems at least reasonable to try.\n Regardless of whether it&#39;s good or not, I&#39;m actually pretty pissed off at everyone who has been making fun of it. I am very much not here for your mocking someone&#39;s attempts to improve their communication in their relationships because you think the way they&#39;re doing it is weird.\n And yes it&#39;s framed in a very business speak language. So what? Person in taking valuable communication skills learned in one context and seeing if they can use them to make other communication in their life better shocker!\n I don&#39;t know the OP and I don&#39;t know if the way they are handling their romantic relationship(s) is healthy and productive, but what you&#39;re doing is making fun of people for being a different sort of weird than the one you approve of and it&#39;s not a good look\n I was at a  liberating structures event recently,and one of the people I was working with related an anecdote in which he tried a party game as an ice breaker.Many of those are cringe, but this one sounded fun and inoffensive (it was a sentence continuation game where each person said a word following on from a previous one, in an attempt to construct something that sounded like an aphorism).Most people were reluctant initially but got into the swing of things, but a few people just dug their heels in and would not engage properly with it because of concern over looking weird.\n But trying something new, or in a different context, is always going to look weird.\n When someone tries to do something good and we don&#39;t think it&#39;s the right thing, we punish them.When someone tries to do something and fails, we laugh at them.This means that if you want to avoid punishment the only way is to not try until you are certain that you are doing the right thing and will succeed at it, but  the fastest way to learn something is to try something.\n When you say you are good at something, that&#39;s arrogant. When you say you&#39;re bad at something, people tell you that you&#39;re not, or treat it as weakness. This makes it very hard to talk honestly about how good you are about things,and people are very bad at judging how good they are at things so it&#39;s very hard to know how good you are without talking about it.Unfortunately, self-knowledge of your own abilities is also essential for getting good at it.\n If, despite all of this, you succeed, we put you on a pedestal, and worship you, and then as soon as you inevitably turn out to be a flawed human being like everyone else,we tear you down and destroy you.\n   If I sat down and tried to design a set of social norms for discouraging people from being their best selves,I honestly don&#39;t think I could have done a better job than this.", "posttime": "2020-06-11 23:36:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u574f\u4e8b,obligation,\u8bd5\u56fe", "title": "\u505a\u574f\u4e8b\u7684\u793e\u4f1a\u4e49\u52a1", "title_en": "The social obligation to be bad at things", "transed": 1, "url": "https://notebook.drmaciver.com/posts/2020-02-29-10:30.html", "via": "", "real_tags": ["\u574f\u4e8b", "\u8bd5\u56fe"]}, {"category": "", "categoryclass": "", "imagename": "e9f8f193a3ccdcf3c4c030d15dec688b.png", "infoid": 1006143, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u88ab\u79f0\u4e3a\u73bb\u8272-\u7231\u56e0\u65af\u5766\u51dd\u805a\u4f53(BEC)\u7684\u7269\u8d28\u72b6\u6001\u6700\u65e9\u662f\u572825\u5e74\u524d1\uff0c2\u5e74\u524d\u89c2\u6d4b\u5230\u7684\uff0c\u4ece\u90a3\u65f6\u8d77\uff0c\u8fd9\u4e9b\u91cf\u5b50\u7269\u4f53\u5c31\u6210\u4e3a\u7814\u7a76\u91cf\u5b50\u7269\u7406\u7684\u5173\u952e\u5de5\u5177\uff0c\u5b83\u4eec\u901a\u5e38\u5728\u4e16\u754c\u5404\u5730\u7684\u6570\u767e\u4e2a\u5b9e\u9a8c\u5ba4\u751f\u4ea7\u3002Aveline\u7b49\u4eba\u5728\u201c\u81ea\u7136\u201d\u6742\u5fd7\u4e0a\u64b0\u6587\u30023\u62a5\u9053\u4e86\u5728\u7ed5\u5730\u7403\u8f68\u9053\u8fd0\u884c\u7684\u56fd\u9645\u7a7a\u95f4\u7ad9\u4e0a\u4ea7\u751f\u7684\u94f7BEC\u3002\u7a7a\u95f4\u7ad9\u4e0a\u6c38\u4e45\u81ea\u7531\u843d\u4f53\u7684\u6761\u4ef6\u4e3a\u63a2\u6d4bBEC\u548c\u8fdb\u884c\u5e7f\u6cdb\u7684\u9ad8\u7cbe\u5ea6\u6d4b\u91cf\u63d0\u4f9b\u4e86\u65b0\u7684\u65b9\u6cd5\u3002\n\u5f53\u88ab\u6355\u83b7\u7684\u73bb\u8272\u5b50\u539f\u5b50(\u8d28\u5b50\u548c\u4e2d\u5b50\u603b\u6570\u4e3a\u5076\u6570\u7684\u539f\u5b50)\u7684\u5bc6\u96c6\u4e91\u51b7\u5374\u5230\u7edd\u5bf9\u96f6\u5ea64\uff0c5\u9644\u8fd1\u7684\u6e29\u5ea6\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751fBEC\u3002\u5728\u8fd9\u4e9b\u8d85\u51b7\u7684\u7cfb\u7efc\u4e2d\uff0c\u539f\u5b50\u4e3b\u8981\u5360\u636e\u9677\u9631\u7684\u6700\u4f4e\u80fd\u6001\u3002\u91cf\u5b50\u529b\u5b66\u7684\u4e00\u4e2a\u4e2d\u5fc3\u539f\u5219\u662f\u6ce2-\u7c92\u5b50\u4e8c\u5143\u6027\uff0c\u5373\u6bcf\u4e2a\u7c92\u5b50\u90fd\u53ef\u4ee5\u63cf\u8ff0\u4e3a\u7269\u8d28\u6ce2\u3002BEC\u662f\u6d4b\u8bd5\u91cf\u5b50\u529b\u5b66\u7684\u6709\u7528\u7269\u4f53\uff0c\u56e0\u4e3a\u6574\u4e2a\u539f\u5b50\u4e91\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5355\u4e00\u7684\u7269\u8d28\u6ce2\u3002\u8fd9\u4e00\u6027\u8d28\u79f0\u4e3a\u91cf\u5b50\u7b80\u5e76\u3002\n\u73bb\u8272-\u7231\u56e0\u65af\u5766\u51dd\u805a\u662f\u901a\u8fc7\u4f7f\u7528\u51e0\u79cd\u6d89\u53ca\u5149\u573a\u548c\u78c1\u573a\u7ec4\u5408\u7684\u65b9\u6cd5\u51b7\u5374\u539f\u5b50\u4e91\u6765\u5b9e\u73b0\u7684\u3002\u901a\u5e38\u4f7f\u7528\u7684\u6700\u540e\u4e00\u6b65\u88ab\u79f0\u4e3a\u84b8\u53d1\u51b7\u53746\u3002\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u539f\u5b50\u88ab\u9650\u5236\u5728\u78c1\u9631\u4e2d\uff0c\u800c\u90a3\u4e9b\u52a8\u80fd\u6700\u9ad8\u7684\u539f\u5b50(\u6700\u70ed\u7684\u539f\u5b50)\u5229\u7528\u5c04\u9891\u8f90\u5c04\u88ab\u8d76\u51fa\u9677\u9631\u3002\u5269\u4e0b\u7684\u539f\u5b50\u76f8\u4e92\u78b0\u649e\uff0c\u5728\u4f4e\u4e8e\u521d\u59cb\u6e29\u5ea6\u7684\u5e73\u5747\u6e29\u5ea6\u4e0b\u8fbe\u5230\u70ed\u5e73\u8861\u3002\u91cd\u590d\u8be5\u8fc7\u7a0b\uff0c\u76f4\u5230\u5f62\u6210BEC\u3002\n\u6b63\u5982\u6240\u8ba8\u8bba\u7684\uff0c\u73bb\u8272-\u7231\u56e0\u65af\u5766\u51dd\u805a\u9700\u8981\u4f4e\u6e29\uff0c\u5728\u4f4e\u6e29\u4e0b\u539f\u5b50\u51e0\u4e4e\u4e0d\u4f1a\u8fd0\u52a8\u3002\u7136\u800c\uff0c\u5f53BEC\u4ece\u78c1\u9631\u4e2d\u91ca\u653e\u51fa\u6765\u4ee5\u4fbf\u8fdb\u884c\u5b9e\u9a8c\u65f6\uff0c\u539f\u5b50\u4e4b\u95f4\u7684\u6392\u65a5\u76f8\u4e92\u4f5c\u7528\u4f1a\u5bfc\u81f4\u4e91\u56e2\u81a8\u80c0\u3002\u5728\u51e0\u79d2\u949f\u5185\uff0cBEC\u53d8\u5f97\u592a\u7a00\u800c\u4e0d\u80fd\u88ab\u68c0\u6d4b\u5230\u3002\u901a\u8fc7\u51cf\u5c0f\u9677\u9631\u7684\u6df1\u5ea6\uff0c\u4ece\u800c\u51cf\u5c0f\u9677\u9631\u4e2d\u7684\u539f\u5b50\u5bc6\u5ea6\uff0c\u53ef\u4ee5\u964d\u4f4e\u6269\u5f20\u7387\u3002\n\u5728\u5730\u7403\u4e0a\uff0c\u884c\u661f\u7684\u5f15\u529b\u9650\u5236\u4e86\u53ef\u80fd\u7684\u78c1\u9631\u7684\u5f62\u72b6\uff0c\u4ee5\u81f3\u4e8e\u9700\u8981\u4e00\u4e2a\u6df1\u9677\u9631\u6765\u9650\u5236BEC(\u56fe1A\uff0cb)\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cAveline\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u53d1\u73b0\uff0c\u56fd\u9645\u7a7a\u95f4\u7ad9\u4e0a\u6781\u5f31\u7684\u91cd\u529b(\u5fae\u91cd\u529b)\u5141\u8bb8\u4f7f\u7528\u6d45\u9677\u9631\u521b\u5efa\u94f7BEC\u3002\u56e0\u6b64\uff0c\u4f5c\u8005\u53ef\u4ee5\u5728\u5927\u7ea6\u4e00\u79d2\u7684\u81a8\u80c0\u540e\u7814\u7a76BEC\uff0c\u800c\u4e0d\u9700\u8981\u8fdb\u4e00\u6b65\u64cd\u7eb5\u539f\u5b50\u3002\n\u5728\u53d1\u5e03BEC\u4e4b\u524d\uff0cAveline\u7b49\u4eba\u3002\u89c2\u5bdf\u5230\u7d27\u5bc6\u6355\u83b7\u7684\u51dd\u805a\u6db2\u88ab\u6655\u72b6\u7684\u94f7\u539f\u5b50\u4e91\u5305\u56f4\uff0c\u5e76\u4e0e\u4e4b\u76f8\u4e92\u4f5c\u7528\u3002\u5728\u84b8\u53d1\u51b7\u5374\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u539f\u5b50\u88ab\u8f6c\u79fb\u5230\u5bf9\u78c1\u573a\u4e0d\u654f\u611f\u7684\u72b6\u6001\u3002\u7531\u4e8e\u4e00\u79cd\u540d\u4e3a\u4e8c\u9636\u585e\u66fc\u6548\u5e947\u7684\u73b0\u8c61\uff0c\u8fd9\u4e9b\u539f\u5b50\u901a\u8fc7\u5b83\u4eec\u7684\u91cf\u5b50\u529b\u5b66\u6027\u8d28\u4e0e\u9677\u9631\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u5f88\u5f31\u3002\u5728\u5730\u7403\u4e0a\uff0c\u8fd9\u4e9b\u539f\u5b50\u5c06\u88ab\u4e3b\u5bfc\u7684\u91cd\u529b\u4ece\u9677\u9631\u4e2d\u79fb\u8d70\u3002\u7136\u800c\uff0c\u5728\u8f68\u9053\u4e0a\uff0c\u5b83\u4eec\u4ecd\u7136\u7559\u5728\u9677\u9631\u4e2d\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u7528\u6765\u76f4\u63a5\u751f\u4ea7\u5bc6\u5ea6\u6781\u4f4e\u7684\u8d85\u51b7\u539f\u5b50\u6837\u54c1\u3002\n\u4f5c\u8005\u7684\u5b9e\u9a8c\u4ec5\u4ec5\u6807\u5fd7\u7740\u8bb8\u591a\u5173\u4e8e\u91cf\u5b50\u7b80\u5e76\u6c14\u4f53\u7684\u6fc0\u52a8\u4eba\u5fc3\u7684\u7814\u7a76\u7684\u5f00\u59cb\u3002\u4f8b\u5982\uff0c\u5fae\u91cd\u529b\u5141\u8bb8\u4f7f\u7528\u5730\u7403\u4e0a\u4e0d\u80fd\u6b63\u786e\u4f7f\u7528\u7684\u9677\u9631\u5f62\u72b6(\u5982\u6c14\u6ce18\u7684\u5f62\u72b6)\u6765\u7ea6\u675f\u6216\u5f15\u5bfc\u539f\u5b50(\u56fe1C)\u3002\u672a\u6765\u5173\u4e8e\u8fd9\u79cd\u539f\u5b50\u6f14\u5316\u7684\u5de5\u4f5c\u5c06\u4e3a\u6211\u4eec\u63d0\u4f9b\u5bf9\u5c11\u4f53\u7269\u7406\u7684\u6d1e\u5bdf\u529b\u3002\u6b64\u5916\uff0c\u8fd8\u8ba1\u5212\u5bf9\u94be\u548c\u94f79\u7684\u91cf\u5b50\u6c14\u4f53\u6df7\u5408\u7269\u8fdb\u884c\u5b9e\u9a8c\u3002\n\u7ed5\u5730\u7403\u8f68\u9053\u8fd0\u884c\u7684BECs\u8fd8\u53ef\u4ee5\u63a8\u8fdb\u539f\u5b50\u5e72\u6d89\u6d4b\u91cf-\u4e00\u79cd\u57fa\u4e8e\u7269\u8d28\u6ce2\u4e4b\u95f4\u5e72\u6d89\u7684\u6d4b\u91cf\u6280\u672f\u3002\u539f\u5b50\u5e72\u6d89\u4eea\u5bf9\u60ef\u6027\u529b\u7684\u7075\u654f\u5ea6\u4e0e\u539f\u5b50\u5728\u5e72\u6d89\u4eea10\u4e2d\u505c\u7559\u65f6\u95f4\u7684\u5e73\u65b9\u6210\u6b63\u6bd4\uff0c\u5728\u5730\u9762\u4e0a\uff0c\u8fd9\u4e00\u65f6\u95f4\u53d7\u81ea\u7531\u843d\u4f53\u65f6\u95f4\u7684\u9650\u5236\u3002\u5fae\u91cd\u529b\u8bbe\u65bd\uff0c\u5982\u706b\u7bad10\u3001\u98de\u673a11\u548c\u201c\u964d\u843d\u5854\u201d12\u4ee5\u524d\u66fe\u88ab\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u7ed5\u5730\u7403\u8f68\u9053\u8fd0\u884c\u7684\u539f\u5b50\u5e72\u6d89\u4eea\u5c06\u5b9e\u73b0\u66f4\u591a\u7684\u5b9e\u9a8c\u5468\u671f\u3002\n\u5bf9\u4e8e\u672a\u6765\u7a7a\u95f4\u9ad8\u7cbe\u5ea6\u6d4b\u91cf\u7684\u76ee\u6807\uff0c\u5bf9\u6240\u6709\u7cfb\u7edf\u6548\u5e94\u7684\u900f\u5f7b\u5206\u6790\u548c\u5730\u9762\u5f00\u53d1\u6280\u672f\u7684\u5b9e\u65bd\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u8fd9\u6837\u7684\u6d4b\u91cf\u53ef\u4ee5\u63d0\u4f9b\u5bf9\u81ea\u7531\u843d\u4f53\u666e\u9002\u6027(\u6240\u6709\u7269\u4f53\u5728\u5916\u90e8\u5f15\u529b\u573a\u4e2d\u52a0\u901f\u76f8\u540c\u7684\u539f\u7406)\u548c\u6697\u80fd\u91cf\u7406\u8bba(\u88ab\u8ba4\u4e3a\u5bfc\u81f4\u5b87\u5b99\u52a0\u901f\u81a8\u80c0\u7684\u672a\u77e5\u80fd\u91cf)\u7684\u4e25\u683c\u6d4b\u8bd5\u3002\u9884\u671f\u7684\u7075\u654f\u5ea6\u4e5f\u5c06\u4f7fBEC\u5e72\u6d89\u672f\u5728\u536b\u661f\u5bfc\u822a\u3001\u63a2\u6d4b\u548c\u5bf9\u5730\u89c2\u6d4b\u65b9\u9762\u5f15\u8d77\u4eba\u4eec\u7684\u5174\u8da3\u3002\nAveline\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u7684\u6280\u672f\u6210\u5c31\u4ee4\u4eba\u77a9\u76ee\u3002\u4ed6\u4eec\u7684\u8bbe\u5907\u9700\u8981\u6ee1\u8db3\u56fd\u9645\u7a7a\u95f4\u7ad9\u5bf9\u8d28\u91cf\u3001\u4f53\u79ef\u548c\u529f\u8017\u7684\u4e25\u683c\u8981\u6c42\uff0c\u5e76\u4e14\u8db3\u591f\u575a\u56fa\uff0c\u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u7ef4\u4fee\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u6570\u5e74\u3002\u4f5c\u8005\u7684\u5730\u7403\u8f68\u9053BEC\u4e3a\u91cf\u5b50\u6c14\u4f53\u548c\u539f\u5b50\u5e72\u6d89\u6d4b\u91cf\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u65b0\u7684\u673a\u4f1a\uff0c\u5e76\u4e3a\u66f4\u96c4\u5fc3\u52c3\u52c3\u7684\u4efb\u52a1\u94fa\u5e73\u4e86\u9053\u8def\u3002", "note_en": "States of matter known as Bose\u2013Einstein condensates (BECs) were first observed 25 years ago  1 ,  2. Since then, these quantum objects have become a key tool in the study of quantum physics, and they are routinely produced in hundreds of laboratories around the world.  Writing in  Nature, Aveline  et al.  3 report the generation of rubidium BECs aboard the International Space Station, which is in orbit around Earth. The condition of perpetual free fall on the station offers new methods for probing BECs and for making a wide range of high-precision measurements.\n  A BEC is produced when a dense cloud of trapped bosonic atoms (atoms that have an even total number of protons and neutrons) is cooled to temperatures near absolute zero  4 ,  5. In these ultracold ensembles, the atoms mainly populate the lowest energy state of the trap. A central tenet of quantum mechanics is wave\u2013particle duality, whereby every particle can be described as a wave of matter. BECs are useful objects for testing quantum mechanics because the entire cloud of atoms can be regarded as a single matter wave. This property is called quantum degeneracy.\n Bose\u2013Einstein condensation is achieved by cooling the atomic cloud using several methods that involve combinations of light and magnetic fields. A commonly used final step is known as evaporative cooling  6. In this approach, the atoms are confined in a magnetic trap, and those that have the highest kinetic energy (the \u2018hottest\u2019 atoms) are driven from the trap using radio-frequency radiation. The remaining atoms collide with each other and reach thermal equilibrium at a lower mean temperature than the initial temperature. This process is repeated until a BEC is formed.\n As discussed, Bose\u2013Einstein condensation requires low temperatures, at which atoms hardly move. However, when a BEC is released from a magnetic trap so that experiments can be carried out, repulsive interactions between the atoms cause the cloud to expand. Within a few seconds, the BEC becomes too dilute to be detected. The expansion rate can be reduced by decreasing the depth of the trap, and, thereby, the density of atoms in the trap.\n On Earth, the planet\u2019s gravitational pull restricts the shape of possible magnetic traps in such a way that a deep trap is needed to confine a BEC (Fig. 1a,b). By contrast, Aveline and colleagues found that the extremely weak gravity (microgravity) on the International Space Station allowed rubidium BECs to be created using shallow traps. As a result, the authors could study the BECs after about one second of expansion, without needing to manipulate the atoms further.\n  Before releasing a BEC, Aveline  et al. observed that the tightly trapped condensate was surrounded by, and interacting with, a halo-shaped cloud of rubidium atoms. During evaporative cooling, these atoms had been transferred to a state that is insensitive to magnetic fields. The atoms then interacted only weakly with the trap through their quantum-mechanical properties, owing to a phenomenon called the second-order Zeeman effect  7. On Earth, such atoms would be removed from the trap by the dominant force of gravity. However, in orbit, they remain in the trap and could be used, for example, to directly produce ultracold atomic samples that have an extremely low density.\n The authors\u2019 experiments mark just the beginning of many exciting studies on quantum-degenerate gases. For example, microgravity allows atoms to be confined or guided using trap shapes, such as that of a bubble  8, that cannot be used properly on Earth (Fig. 1c). Future work on the evolution of such atoms will provide insight into few-body physics. Moreover, there are planned experiments on quantum-gas mixtures of potassium and rubidium  9.\n  Earth-orbiting BECs could also advance atom interferometry \u2014 a measurement technique based on the interference between matter waves. The sensitivity of an atom interferometer to inertial forces is proportional to the square of the time that atoms spend in the interferometer  10. On the ground, this time is restricted by the limited free-fall time. Microgravity facilities such as rockets  10, aeroplanes  11 and \u2018drop towers\u2019  12 have been used previously to address this problem, but Earth-orbiting atom interferometers would enable many more experimental cycles.\n For the future goal of high-precision measurements in space, a thorough analysis of all systematic effects and the implementation of techniques developed on the ground are essential. Such measurements could provide stringent tests of the universality of free fall (the principle that all objects accelerate identically in an external gravitational field) and theories of dark energy (the unknown energy that is thought to be causing the expansion of the Universe to accelerate). The expected sensitivities would also make BEC interferometry of interest for satellite navigation, exploration and Earth observation.\n Aveline and colleagues\u2019 technological achievement is remarkable. Their apparatus needed to satisfy the strict mass, volume and power-consumption requirements of the International Space Station, and be robust enough to operate for years without needing to be serviced. The authors\u2019 Earth-orbiting BECs provide new opportunities for research on quantum gases, as well as for atom interferometry, and pave the way for missions that are even more ambitious.", "posttime": "2020-06-11 23:02:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7269\u8d28,matter,\u539f\u5b50", "title": "\u91cf\u5b50\u7269\u8d28\u7ed5\u5730\u7403\u8fd0\u884c", "title_en": "Quantum Matter Orbits Earth", "transed": 1, "url": "https://www.nature.com/articles/d41586-020-01653-6", "via": "", "real_tags": ["\u7269\u8d28", "matter", "\u539f\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "61ae89f0f748721ace72bc31f2807992.jpg", "infoid": 1006142, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u4e0a\u9762\u7684\u63cf\u8ff0\uff0c\u6211\u4eec\u786e\u4fe1\u60a8\u4e5f\u540c\u610f\uff0c\u8fd9\u53ef\u80fd\u4e0d\u4ec5\u4ec5\u662f\u51e0\u4e2a\u670b\u53cb\u4e4b\u95f4\u7684\u9879\u76ee\u3002\u8fd9\u662f\u4e00\u573a\u8fd0\u52a8\u3002\nMike Szczys-hackaday.com\u3002\n\u6211\u4eec\u5f88\u81ea\u8c6a\u80fd\u5bf9\u4ed6\u4eec\u7684SatNOGS\u9879\u76ee\u4ea7\u751f\u5f71\u54cd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5730\u9762\u7ad9\u548c\u7f51\u7edc\uff0c\u9488\u5bf9\u6a21\u5757\u5316\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u4f7f\u7528\u8d1f\u62c5\u5f97\u8d77\u7684\u5de5\u5177\u548c\u8d44\u6e90\u6784\u5efa\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0cSatNOGS\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u7684\u6a21\u5757\u5316\u5e73\u53f0\u6765\u4e0e\u536b\u661f\u901a\u4fe1\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8bbf\u95ee\u3002\nLulzbot", "note_en": "From the description above we\u2019re sure you agree that this has the potential to be much more than a project between a few friends. This is a movement.\n  Mike Szczys - Hackaday.com\n  We are proud to have had an influence on their SatNOGS project, which is an open source ground station and network, optimized for modularity, and built using affordable tools and resources. Essentially, SatNOGS provides a scalable and modular platform to communicate with satellites, accessible to anyone.\n  LulzBot", "posttime": "2020-06-11 23:01:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u536b\u661f,satnogs", "title": "\u536b\u661fNOGS", "title_en": "SatNOGS", "transed": 1, "url": "https://satnogs.org/", "via": "", "real_tags": ["\u536b\u661f", "satnogs"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006141, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u73b0\u5728\u66f4\u591a\u7684\u5149\u7ebf\u8ddf\u8e2a\u662f\u901a\u8fc7\u773c\u775b\u5b8c\u6210\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u91cd\u65b0\u5b66\u4e60\u7684\u8bfe\u7a0b\uff1a\u5982\u679c\u50cf\u7d20\u7684\u4e2d\u5fc3\u662f\u5206\u6570(0.5\uff0c0.5)\uff0c\u4ee3\u7801\u4f1a\u66f4\u597d\uff0c\u751f\u6d3b\u4e5f\u66f4\u5bb9\u6613\u3002\u5982\u679c\u4f60\u786e\u5b9a\u4f60\u8fd9\u6837\u505a\u662f\u5bf9\u7684\uff0c\u90a3\u5c31\u592a\u597d\u4e86\uff1b\u5f80\u524d\u8d70\uff0c\u8fd9\u91cc\u6ca1\u4ec0\u4e48\u53ef\u770b\u7684\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4eab\u53d7\u8fd9\u4e2a\u3002\n\u5c06\u50cf\u7d20\u4e2d\u5fc3\u6620\u5c04\u5230(0.5\uff0c0.5)\u662f\u4fdd\u7f57\u00b7\u8d6b\u514b\u4f2f\u7279(Paul Heckbert)\u7684\u4e00\u7bc7\u53ef\u7231\u7684\u5c0f\u6587\u7ae0\u201c\u50cf\u7d20\u7684\u5750\u6807\u662f\u4ec0\u4e48\uff1f\u201d(What Are of a Pixel\uff1f)\u6700\u5148\u89e3\u91ca\u7684(\u81f3\u5c11\u5bf9\u6211\u6765\u8bf4\u662f\u8fd9\u6837)\uff0c\u201c\u56fe\u5f62\u5b9d\u77f3\u201d(The Graphics Gems)\uff0c\u7b2c246-248\u9875\uff0c1990\u5e74\u3002\n\u90a3\u7bc7\u6587\u7ae0\u73b0\u5728\u5f88\u96be\u627e\u5230\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e2a\u8981\u70b9\u3002\u5047\u8bbe\u60a8\u7684\u5c4f\u5e55\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4e3a1000\u3002\u6211\u4eec\u6765\u8c08\u8c08X\u8f74\u5427\u3002\u53ef\u80fd\u5f88\u5bb9\u6613\u8bf40.0\u662f\u4e00\u884c\u6700\u5de6\u8fb9\u50cf\u7d20\u7684\u4e2d\u5fc3\uff0c1.0\u662f\u5b83\u65c1\u8fb9\u7684\u4e2d\u5fc3\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u60a8\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u56db\u820d\u4e94\u5165\uff0c\u5176\u4e2d\u6d6e\u70b9\u5750\u680773.6\u548c74.4\u90fd\u4f1a\u8f6c\u5230\u4e2d\u5fc374.0\u3002\n\u7136\u800c\uff0c\u8bf7\u4e09\u601d\u800c\u540e\u884c\u3002\u4f7f\u7528\u6b64\u8d34\u56fe\uff0c\u5de6\u8fb9\u7f18\u4e3a-0.5%\uff0c\u53f3\u8fb9\u7f18\u4e3a999.5\u3002\u8fd9\u4e0d\u662f\u4e00\u4ef6\u4ee4\u4eba\u6109\u5feb\u7684\u5de5\u4f5c\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5982\u679c\u5728\u50cf\u7d20\u5750\u6807\u503c\u4e0a\u4f7f\u7528abs()\u6216mod()\u7b49\u5404\u79cd\u8fd0\u7b97\u7b26\uff0c\u6b64\u6620\u5c04\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6cbf\u8fb9\u7f18\u7684\u7ec6\u5fae\u9519\u8bef\u3002\n\u8303\u56f4\u4e3a0.0%\u52301000.0\u66f4\u5bb9\u6613\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u50cf\u7d20\u7684\u4e2d\u5fc3\u5728\u5206\u65700.5\u65f6\u3002\u4f8b\u5982\uff0c\u6574\u6570\u50cf\u7d2043\u7136\u540e\u5bf9\u4e8e\u5176\u5185\u90e8\u7684\u5b50\u50cf\u7d20\u503c\u5177\u670943.0%\u523043.99999\u7684\u654f\u611f\u8303\u56f4\u3002\u4ee5\u4e0b\u662f\u4fdd\u7f57\u7684\u60f3\u8c61\uff1a\nOpenGL\u4e00\u76f4\u5c06\u5206\u6570(0.5\uff0c0.5)\u89c6\u4e3a\u50cf\u7d20\u4e2d\u5fc3\u3002DirectX\u8d77\u521d\u6ca1\u6709\uff0c\u4f46\u6700\u7ec8\u968f\u7740DirectX 10\u7684\u63a8\u51fa\u800c\u4e0e\u8be5\u7a0b\u5e8f\u6253\u4ea4\u9053\u3002\n\u4ece\u6574\u578b\u5230\u6d6e\u70b9\u578b\u50cf\u7d20\u5750\u6807\u7684\u6b63\u786e\u8f6c\u6362\u64cd\u4f5c\u662f\u52a00.5\uff1b\u6d6e\u70b9\u578b\u5230\u6574\u578b\u7684\u64cd\u4f5c\u662f\u4f7f\u7528FLOOR()\u3002\n\u8fd9\u5df2\u7ecf\u662f\u8001\u751f\u5e38\u8c08\u4e86\u3002\u6bcf\u4e2a\u4eba\u90fd\u662f\u8fd9\u6837\u505a\u7684\uff0c\u5bf9\u5417\uff1f\u6211\u4e4b\u6240\u4ee5\u63d0\u51fa\u5b83\uff0c\u662f\u56e0\u4e3a\u6211\u5f00\u59cb\u5728\u4e00\u4e9b\u5149\u7ebf\u8ddf\u8e2a\u793a\u4f8b(\u4f2a)\u4ee3\u7801\u4e2d\u770b\u5230\uff0c\u8fd9\u4e9b\u4ee3\u7801\u7528\u4e8e\u751f\u6210\u900f\u89c6\u6444\u5f71\u673a\u7684\u65b9\u5411\uff1a\nfloat3 ray_Origin=Camera-&gt\uff1bEyes\uff1bfloat2 d=2.0*(float2(idx.x\uff0cidx.y)/float2(\u5bbd\u5ea6\uff0c\u9ad8\u5ea6))-1.0\uff1bfloat3 ray_direction=d.x*Camera-&gt\uff1bU+D.y*Camera-&gt\uff1bV+Camera-&gt\uff1bW\uff1b\n\u77e2\u91cfidx\u662f\u50cf\u7d20\u7684\u6574\u6570\u4f4d\u7f6e\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u662f\u5c4f\u5e55\u5206\u8fa8\u7387\u3002\u901a\u8fc7\u5c06\u77e2\u91cfD\u4e58\u4ee5U\u548cV\u8fd9\u4e24\u4e2a\u77e2\u91cf\uff0c\u8ba1\u7b97\u77e2\u91cfD\u5e76\u5c06\u5176\u7528\u4e8e\u751f\u6210\u4e16\u754c\u7a7a\u95f4\u77e2\u91cf\u3002\u5c06\u6444\u50cf\u673a\u5728\u4e16\u754c\u7a7a\u95f4\u4e2d\u7684\u65b9\u5411W\u77e2\u91cf\u76f8\u52a0\u3002U\u548cV\u8868\u793a\u89c6\u56fe\u5e73\u9762\u5728\u8ddd\u773c\u775bW\u7684\u8ddd\u79bb\u5904\u7684\u6b63X\u8f74\u548cY\u8f74\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6240\u6709\u8fd9\u4e9b\u770b\u8d77\u6765\u90fd\u5f88\u6f02\u4eae\u548c\u5bf9\u79f0\uff0c\u800c\u4e14\u5927\u90e8\u5206\u90fd\u662f\u5bf9\u79f0\u7684\u3002\n\u77e2\u91cfd_1\u5e94\u8be5\u8868\u793a\u5c4f\u5e55\u4e0a\u5404\u70b9\u7684\u5f52\u4e00\u5316\u8bbe\u5907\u5750\u6807(NDC)\u4e2d\u4ece-1.0\u52301.0\u7684\u4e00\u5bf9\u503c\u3002\u4f46\u662f\uff0c\u4ee3\u7801\u5931\u8d25\u3002\u7ee7\u7eed\u6211\u4eec\u7684\u793a\u4f8b\uff0c\u6574\u6570\u50cf\u7d20\u4f4d\u7f6e(0\uff0c0)\u4e3a(-1.0\uff0c-1.0)\u3002\u542c\u8d77\u6765\u4e0d\u9519\uff0c\u5bf9\u5427\uff1f\u4f46\u662f\u6211\u4eec\u7684\u6700\u9ad8\u6574\u6570\u50cf\u7d20\u4f4d\u7f6e\u662f(999,999)\uff0c\u5b83\u8f6c\u6362\u4e3a(0.998\uff0c0.998)\u30020.002\u7684\u603b\u5dee\u5f02\u662f\u56e0\u4e3a\u8fd9\u4e2a\u7cdf\u7cd5\u7684\u8d34\u56fe\u5c06\u6574\u4e2a\u89c6\u56fe\u79fb\u52a8\u4e86\u534a\u4e2a\u50cf\u7d20\u3002\u8fd9\u4e9b\u50cf\u7d20\u4e2d\u5fc3\u5e94\u4e0e\u6bcf\u8fb9\u7684\u8fb9\u7f18\u76f8\u8ddd0.001\u3002\nFloat2 d=2.0*((Float2(idx.x\uff0cidx.y)+Float2(0.5\uff0c0.5))/Float2(\u5bbd\uff0c\u9ad8))-1.0\uff1b\n\u8fd9\u5c31\u7ed9\u51fa\u4e86\u50cf\u7d20\u4e2d\u5fc3\u7684\u6b63\u786endc\u8303\u56f4\uff0c\u4ece-0.999\u52300.999\u3002\u5982\u679c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u8f6c\u6362\u8f6c\u6362\u6d6e\u70b9\u89d2\u70b9\u503c(0.0\uff0c0.0)\u548c(1000.0,1000.0)(\u6211\u4eec\u4e0d\u6dfb\u52a00.5\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5904\u4e8e\u6d6e\u70b9\u72b6\u6001)\uff0c\u6211\u4eec\u5c31\u4f1a\u5f97\u5230\u4ece-1.0\u52301.0\u7684\u6574\u4e2aNDC\u8303\u56f4\uff0c\u4ece\u8fb9\u5230\u8fb9\uff0c\u8bc1\u660e\u4ee3\u7801\u662f\u6b63\u786e\u7684\u3002\n\u5982\u679c0.5\u8ba9\u60a8\u611f\u5230\u607c\u706b\uff0c\u5e76\u4e14\u60a8\u9519\u8fc7\u4e86\u5bf9\u79f0\u6027\uff0c\u5219\u5728\u50cf\u7d20\u5185\u90e8\u751f\u6210\u968f\u673a\u503c\u65f6(\u5373\uff0c\u901a\u8fc7\u901a\u8fc7\u6bcf\u4e2a\u50cf\u7d20\u968f\u673a\u6295\u5c04\u66f4\u591a\u5149\u7ebf\u8fdb\u884c\u6297\u952f\u9f7f)\uff0c\u6b64\u516c\u5f0f\u975e\u5e38\u5408\u9002\uff1a\nFloat2 d=2.0*((Float2(idx.x\uff0cidx.y)+Float2(\u5170\u5fb7(\u79cd\u5b50)\uff0c\u5170\u5fb7(\u79cd\u5b50))/Float2(\u5bbd\uff0c\u9ad8))-1.0\uff1b\n\u60a8\u53ea\u9700\u5c06\u8303\u56f4[0.0\uff0c1.0]\u4e2d\u7684\u4e00\u4e2a\u968f\u673a\u6570\u6dfb\u52a0\u5230\u6bcf\u4e2a\u6574\u6570\u50cf\u7d20\u4f4d\u7f6e\u503c\u5373\u53ef\u3002\u6b64\u968f\u673a\u503c\u7684\u5e73\u5747\u503c\u4e3a0.5\uff0c\u4f4d\u4e8e\u50cf\u7d20\u7684\u4e2d\u5fc3\u3002\n\u957f\u8bdd\u77ed\u8bf4\uff1a\u5f53\u5fc3\u3002\u628a\u90a3\u534a\u4e2a\u50cf\u7d20\u5f04\u5bf9\u3002\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u8fd9\u4e9b\u534a\u50cf\u7d20\u7684\u8bef\u5dee\u5076\u5c14\u4f1a\u51fa\u73b0\u5728\u4e0d\u540c\u7684\u5730\u65b9(\u76f8\u673a\u3001\u7eb9\u7406\u91c7\u6837\u7b49)\u3002\u591a\u5e74\u6765\uff0c\u6211\u5728Autodesk\u4ece\u4e8b\u4e0e\u5149\u6805\u5316\u76f8\u5173\u7684\u4ee3\u7801\u5de5\u4f5c\u3002\u4ed6\u4eec\u7684\u6240\u4f5c\u6240\u4e3a\u53ea\u4f1a\u5e26\u6765\u75db\u82e6\u3002\u5982\u679c\u6211\u4eec\u4e0d\u5c0f\u5fc3\u7684\u8bdd\u5b83\u4eec\u4f1a\u518d\u6b21\u51fa\u73b0\u5728\u5149\u7ebf\u8ffd\u8e2a\u5668\u4e0a\u3002", "note_en": "With ray tracing being done from the eye much more now, this is a lesson to be relearned: code\u2019s better and life\u2019s easier if the center of the pixel is the fraction (0.5, 0.5). If you are sure you\u2019re doing this right, great; move on, nothing to see here. Enjoy  this instead.\n Mapping the pixel center to (0.5,0.5) is something first explained (at least first for me) in Paul Heckbert\u2019s lovely little article \u201cWhat Are the Coordinates of a Pixel?\u201d,\u00a0 Graphics Gems, p. 246-248, 1990.\n That article is hard to find nowadays, so here\u2019s the gist. Say you have a screen width and height of 1000. Let\u2019s just talk about the X axis. It might be tempting to say 0.0 is the center of the leftmost pixel in a row, 1.0 is the center next to it, etc. You can even then use rounding, where a floating-point coordinate of 73.6 and 74.4 both then go to the center 74.0.\n However, think again. Using this mapping gives -0.5 as the left edge, 999.5 as the right. This is unpleasant to work with. Worse yet, if various operators such as abs() or mod() get used on the pixel coordinate values, this mapping can lead to subtle errors along the edges.\n Easier is the range 0.0 to 1000.0, meaning the center each pixel is at the fraction 0.5. For example, integer pixel 43 then has the sensible range of 43.0 to 43.99999 for subpixel values within it. Here\u2019s Paul\u2019s visualization:\n  OpenGL has always considered the fraction (0.5,0.5) the pixel center. DirectX didn\u2019t, at first, but eventually  got with the program\u00a0with DirectX 10.\n The operations for proper conversion from integer to float pixel coordinates is to add 0.5; float to integer is to use floor().\n This is old news. Everyone does it this way, right? I bring it up because I\u2019m starting to see in some ray tracing samples (pseudo)code like this for generating the direction for a perspective camera:\n float3 ray_origin = camera-&gt;eye;\r float2 d = 2.0 * \r ( float2(idx.x, idx.y) / \r float2(width, height) ) - 1.0;\r float3 ray_direction =\r d.x*camera-&gt;U + d.y*camera-&gt;V + camera-&gt;W;\n The vector  idx is the integer location of the pixel,  width and  height the screen resolution. The vector\u00a0 d is computed and used to generate a world-space vector by multiplying it by two vectors,  U and  V. The  W vector, the camera\u2019s direction in world space, is added in.  U and  V\u00a0represent the positive  X and  Y axes of a view plane at the distance of  W from the eye. It all looks nice and symmetric in the code above, and it mostly is.\n  The vector  d\u00a0is supposed to represent a pair of values from -1.0 to 1.0 in  Normalized Device Coordinates\u00a0(NDC) for points on the screen. However,  the code fails. Continuing our example, integer pixel location (0,0) goes to (-1.0,-1.0). That sounds good, right? But our highest integer pixel location is (999,999), which converts to (0.998,0.998). The total difference of 0.002 is because this bad mapping shifts the whole view over half a pixel. These pixel centers should be 0.001 away from the edge on each side.\n  float2 d = 2.0 *\r ( ( float2(idx.x, idx.y) + float2(0.5,0.5) ) / \r float2(width, height) ) - 1.0;\n This then gives the proper NDC range for the centers of pixels, -0.999 to 0.999. If we instead transform the floating-point corner values (0.0,0.0) and (1000.0,1000.0) through this transform (we don\u2019t add the 0.5 since we\u2019re already in floating point), we get the full NDC range, -1.0 to 1.0, edge to edge, proving the code correct.\n If the 0.5 annoys you and you miss symmetry, this formulation is elegant when generating random values inside a pixel, i.e., for when you\u2019re antialiasing by shooting more rays at random through each pixel:\n float2 d = 2.0 *\r ( ( float2(idx.x, idx.y) + \r float2( rand(seed), rand(seed) ) ) /\r float2(width, height) ) - 1.0;\n You simply add a random number from the range [0.0,1.0) to each integer pixel location value. The average of this random value will be 0.5, at the center of the pixel.\n Long and short: beware. Get that half pixel right. In my experience, these half-pixel errors would occasionally crop up in various places (cameras, texture sampling, etc.) over the years when I worked on rasterizer-related code at Autodesk. They caused nothing but pain on down the line. They\u2019ll appear again in ray tracers if we\u2019re not careful.", "posttime": "2020-06-11 23:01:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u50cf\u7d20,center", "title": "\u50cf\u7d20\u7684\u4e2d\u5fc3\u662f(0.5\uff0c0.5)", "title_en": "The Center of the Pixel is (0.5,0.5)", "transed": 1, "url": "http://www.realtimerendering.com/blog/the-center-of-the-pixel-is-0-50-5/", "via": "", "real_tags": ["\u50cf\u7d20", "center"]}, {"category": "", "categoryclass": "", "imagename": "98c4313828bc90bf0f25636ffd1f4dfe.jpg", "infoid": 1006140, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8003\u53e4\u5b66\u5bb6\u8bf4\uff0c\u4f26\u6566\u6700\u65e9\u7684\u6e38\u4e50\u573a\u53ef\u80fd\u662f\u5728\u6000\u7279\u67e5\u666e\u5c14\u7684\u4e00\u4e2a\u4f4f\u623f\u91cd\u5efa\u9879\u76ee\u4e2d\u53d1\u73b0\u7684\u3002\n\u7ea2\u72ee\u5267\u9662\u88ab\u8ba4\u4e3a\u662f\u4f0a\u4e3d\u838e\u767d\u65f6\u4ee3\u7b2c\u4e00\u4e2a\u4e13\u95e8\u5efa\u9020\u7684\u5267\u9662\uff0c\u4f46\u5b83\u7684\u4f4d\u7f6e\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u5b58\u5728\u4e89\u8bae\u3002\n\u53bb\u5e74\uff0c\u5728\u4f26\u6566\u4e1c\u90e8\u65af\u7279\u666e\u5c3c\u8def\u7684\u6316\u6398\u8fc7\u7a0b\u4e2d\uff0c\u4eba\u4eec\u53d1\u73b0\u4e86\u6728\u7ed3\u6784\u3001\u6587\u7269\u548c\u5efa\u7b51\u3002\n\u201c\u7ea2\u72ee\u201d\u88ab\u8ba4\u4e3a\u662f\u7ea6\u7ff0\u00b7\u5e03\u8d56\u6069\u4e8e1567\u5e74\u5de6\u53f3\u5efa\u9020\u7684\uff0c\u5f53\u65f6\u4ed6\u4e0e\u8a79\u59c6\u65af\u00b7\u4f2f\u8d1d\u5947\u4e8e1576\u5e74\u5728\u8096\u5c14\u8fea\u5947(Shoreditch)\u5efa\u9020\u4e86\u5267\u9662\u3002\n\u4f2f\u8d1d\u5947\u662f\u5f20\u4f2f\u4f26\u52cb\u7235\u5267\u56e2\u7684\u6210\u5458\uff0c\u5267\u9662\u662f\u8868\u6f14\u56e2\u7684\u7b2c\u4e00\u4e2a\u6c38\u4e45\u4f4f\u6240\uff0c\u572815\u4e16\u7eaa90\u5e74\u4ee3\u4e0a\u6f14\u4e86\u5e74\u8f7b\u7684\u5a01\u5ec9\u00b7\u838e\u58eb\u6bd4\u4e9a\u7684\u620f\u5267\u3002\n\u4eba\u4eec\u5bf9\u7ea2\u72ee\u77e5\u4e4b\u751a\u5c11\uff0c\u5f53\u4ee3\u7684\u7ec6\u8282\u4ec5\u9650\u4e8e1567\u5e74\u548c1569\u5e74\u7684\u4e24\u8d77\u8bc9\u8bbc\uff0c\u8fd9\u4e24\u8d77\u8bc9\u8bbc\u90fd\u63d0\u5230\u4e86\u7ea2\u8272\u7684\u91cc\u6602\u548c\u4e00\u5ea7\u6709\u6237\u5916\u821e\u53f0\u548c\u5ea7\u4f4d\u7684\u6cd5\u5c14\u59c6\u623f\u5b50\u3002\n2019\u5e741\u6708\uff0c\u8003\u53e4\u5b66\u5bb6\u5f00\u59cb\u53d1\u73b0\u4e00\u5ea7\u957f\u65b9\u5f62\u6728\u7ed3\u6784\uff0c\u7531144\u6839\u5e78\u5b58\u7684\u6728\u6750\u7ec4\u6210\uff0c\u5468\u56f4\u6709\u540e\u6d1e\uff0c\u53ef\u80fd\u662f\u811a\u624b\u67b6\u6216\u5e26\u8d70\u5eca\u7684\u5ea7\u6905\u3002\n\u4e13\u5bb6\u8bf4\uff0c\u8be5\u9057\u5740\u957f12.3\u7c73(40\u82f1\u5c3a)\uff0c\u5bbd9.3\u7c73(31\u82f1\u5c3a)\uff0c\u4e0e\u8bc9\u8bbc\u4e2d\u63d0\u5230\u7684\u5c3a\u5bf8\u975e\u5e38\u543b\u5408\u3002\n\u53d1\u6398\u5de5\u4f5c\u662f\u7531\u4f26\u6566\u5927\u5b66\u5b66\u9662\u8003\u53e4\u7814\u7a76\u6240\u4e1c\u5357\u90e8\u7684\u8003\u53e4\u90e8\u95e8\u8fdb\u884c\u7684\uff0c\u4e4b\u540e\u5728\u65af\u7279\u666e\u5c3c\u8def85\u53f7\u5f00\u59cb\u65bd\u5de5\u3002\n\u8fd9\u90e8\u4f5c\u54c1\u7684\u5bfc\u6f14\u6000\u7279\u5148\u751f\u8bf4\uff1a\u8fd1500\u5e74\u540e\uff0c\u6807\u5fd7\u7740\u4f0a\u4e3d\u838e\u767d\u620f\u5267\u9ece\u660e\u7684\u7ea2\u72ee\u5267\u573a\u7684\u9057\u8ff9\u53ef\u80fd\u7ec8\u4e8e\u88ab\u53d1\u73b0\u4e86\u3002\n\u7efc\u5408\u8bc1\u636e(\u4f4d\u4e8e\u6b63\u786e\u4f4d\u7f6e\u3001\u6b63\u786e\u65f6\u671f\u7684\u5efa\u7b51\u8003\u53e4\u9057\u8ff9)\u7684\u5f3a\u5ea6\u4f3c\u4e4e\u4e0e\u65e9\u671f\u6587\u732e\u4e2d\u8bb0\u5f55\u7684\u5267\u573a\u7279\u5f81\u76f8\u5339\u914d\u3002\n\u5728\u9057\u5740\u7684\u4e1c\u5317\u89d2\u4e5f\u53d1\u73b0\u4e8615\u4e16\u7eaa\u548c16\u4e16\u7eaa\u7684\u5efa\u7b51\uff0c\u8fd9\u4e9b\u5efa\u7b51\u5728\u63a5\u4e0b\u6765\u7684100\u5e74\u91cc\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u53d1\u5c55\u3002\n\u4e13\u5bb6\u8bf4\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u53ef\u80fd\u662f\u7ea2\u72ee\u5ba2\u6808\u7684\u4e00\u90e8\u5206\uff0c\u7ea2\u72ee\u5ba2\u6808\u88ab\u8ba4\u4e3a\u662f\u4ece\u8be5\u9057\u5740\u7684\u4e00\u4e2a\u519c\u5e84\u53d1\u5c55\u800c\u6765\u7684\u3002\n\u5267\u9662\u548c\u7a97\u5e18\u5267\u573a\u662f\u5728\u8fc7\u53bb\u5341\u5e74\u5728\u8096\u5c14\u8fea\u5947\u7684\u6316\u6398\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u7684\uff0c\u800c\u91ce\u732a\u7684\u5934\u9885\u5219\u662f\u5728\u5965\u5c14\u5fb7\u76d6\u7279\u53d1\u73b0\u7684\u3002\n\u5979\u8865\u5145\u8bf4\uff0c\u8be5\u7ec4\u7ec7\u5c06\u7ee7\u7eed\u4e0e\u5f00\u53d1\u5546\u5bc6\u5207\u5408\u4f5c\uff0c\u89e3\u91ca\u8fd9\u4e9b\u8003\u53e4\u9057\u8ff9\u5e76\u5c55\u793a\u5b83\u4eec\u3002", "note_en": "London&#39;s earliest playhouse may have been discovered at a housing redevelopment in Whitechapel, archaeologists have said.\n The Red Lion was thought to be the first purpose-built theatre of the Elizabethan era but its location has long been disputed.\n Timber structures, artefacts and buildings were found during excavations in Stepney Way, east London, last year.\n   The Red Lion is thought to have been built in about 1567 by John Brayne, ahead of his construction of The Theatre in Shoreditch, which he completed with James Burbage in 1576.\n  Burbage was a member of acting company The Lord Chamberlain&#39;s Men and The Theatre was the first permanent home for acting troupes, staging a young William Shakespeare&#39;s plays in the 1590s.\n   Little is known about the Red Lion, with contemporary details limited to two lawsuits in 1567 and 1569 that mentioned &#34;the red lyon&#34; and &#34;a farme house&#34;, which had an outdoor stage and seating.\n In January 2019, archaeologists began to uncover a rectangular timber structure made up of 144 surviving timbers, with postholes around it, which could have been &#34;scaffolds&#34; or galleried seating.\n The site measures 12.3m (40ft) by 9.3m (31ft) and closely matches the dimensions mentioned in the lawsuits, experts said.\n The excavations were carried out by Archaeology South-East, part of UCL&#39;s Institute of Archaeology, before building work began at 85 Stepney Way.\n  Mr White, who directed the work, said: &#34;After nearly 500 years, the remains of the Red Lion playhouse, which marked the dawn of Elizabethan theatre, may have finally been found.\n &#34;The strength of the combined evidence - archaeological remains of buildings, in the right location, of the right period - seem to match up with characteristics of the playhouse recorded in early documents.&#34;\n Buildings from the 15th and 16th Century that were further developed over the next 100 years were also found in the north-east corner of the site.\n Experts said they believed these could have been part of the Red Lion Inn, which is thought to have been developed from a farmstead on the site.\n   The Theatre and  The Curtain playhouses were discovered during the past decade during excavations in Shoreditch, while the Boar&#39;s Head has been found in Aldgate.\n  She added the group would &#34;continue to work closely with the developer to interpret these archaeological remains and display them&#34;.", "posttime": "2020-06-11 23:00:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8003\u53e4\u5b66\u5bb6,lion,\u7ea2\u72ee", "title": "\u7ea2\u72ee\uff1a\u8003\u53e4\u5b66\u5bb6\u201c\u53d1\u73b0\u4f26\u6566\u6700\u65e9\u7684\u5267\u9662\u201d", "title_en": "Red Lion: Archaeologists 'find London's earliest theatre'", "transed": 1, "url": "https://www.bbc.com/news/uk-england-london-52983008", "via": "", "real_tags": ["\u8003\u53e4\u5b66\u5bb6", "lion", "\u7ea2\u72ee"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006139, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u8fd9\u5bf9\u60a8\u6765\u8bf4\u8fd8\u4e0d\u591f\uff0c\u60a8\u53ef\u4ee5\u8003\u8651Alveo\u7cfb\u5217\uff0c\u4f8b\u5982Alveo U250\uff0c\u5b83\u67091.3\u4e2aMLUT\uff0c\u5728INT8\u64cd\u4f5c\u4e2d\u7684\u5cf0\u503c\u541e\u5410\u91cf\u4e3a33\u4e2aTOP\u548c64 GB\u7684DDR4\u5185\u5b58(77 GB/s\u5e26\u5bbd)\u3002\u5bf9\u4e8e\u5185\u5b58\u5e26\u5bbd\u9700\u6c42\u8bbe\u8ba1\uff0cAlveo U280\u63d0\u4f9b\u4e868 GB HBM2\u5185\u5b58(460 GB/s\u5e26\u5bbd)\u548c32 GB DDR4\u5185\u5b58(38 GB/s\u5e26\u5bbd)\uff0c\u4ee3\u4ef7\u662f\u201c\u53ea\u201d\u62e5\u670924.5\u4e2aINT8\u9876\u5c42\u548c1M LUT\u3002\u8fd9\u4e24\u79cd\u578b\u53f7\u90fd\u53ef\u4ee5\u5728\u6613\u8da3\u4e0a\u4ee53000\u7f8e\u5143\u7684\u4ef7\u683c\u4e70\u5230\uff0c\u7528\u8fc7\u7684\u3002\u771f\u5212\u7b97\uff1aD\uff01\nLinux\u73b0\u5728\u786e\u5b9e\u5f97\u5230\u4e86\u4e1a\u754c\u4e3b\u8981\u53c2\u4e0e\u8005\u7684\u652f\u6301\u3002Xilinx\u7684\u652f\u6301\u662f\u7b2c\u4e00\u4f4d\u7684(2005)\uff0c\u800cAltera\u662f\u57282009\u5e74\u52a0\u5165\u4ff1\u4e50\u90e8\u7684\u3002\u7136\u800c\uff0c\u4e24\u8005\u90fd\u662f\u81c3\u80bf\u7684\u5b9a\u4e49\uff0c\u5de5\u5177\u94fe\u91cd\u8fbe\u6570GB(Altera\u5927\u7ea66 GB\uff0c\u800cXilinx\u9ad8\u8fbe27 GB)\uff01\nIceStorm\u9879\u76ee\u4e3aLattice\u768440\u4e2aFPGA\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u529f\u80fd\u3001\u5168\u5f00\u6e90\u7684\u5de5\u5177\u94fe\u3002\u5176\u89c4\u5219\u7684\u7ed3\u6784\u4f7f\u5f97\u9006\u5411\u5de5\u7a0b\u548c\u5de5\u5177\u94fe\u7684\u7f16\u5199\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u66f4\u590d\u6742\u7684Lattice ECP5 FPGA\u5f97\u5230\u4e86\u5168\u9762\u652f\u6301\uff0cXilinx\u76847\u7cfb\u5217\u6b63\u5728\u8fdb\u884c\u4e2d\u3002\u6240\u6709\u8fd9\u4e9b\u9879\u76ee\u73b0\u5728\u90fd\u5728Symbenlow\u7684\u4fdd\u62a4\u4f1e\u4e0b\u8fdb\u884c\uff0c\u76ee\u6807\u662f\u6210\u4e3aFPGA\u7684GCC\u3002\nVHDL/Verilog\u5bb9\u6613\u51fa\u9519\uff0c\u4e0d\u4f1a\u4f7f\u81ea\u5df1\u9677\u5165\u590d\u6742\u7684\u53c2\u6570\u5316\u3002\u8fd9\u964d\u4f4e\u4e86\u6a21\u5757\u7684\u53ef\u91cd\u7528\u6027\u3002\u76f8\u53cd\uff0cPython\u8bed\u8a00\u64c5\u957f\u5143\u7f16\u7a0b\uff0c\u800cMogen\u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u76f8\u5bf9\u7b80\u5355\u7684Python\u6784\u9020\u751f\u6210verilog\u7684\u65b9\u6cd5\u3002\n\u5728Migen\u4e4b\u4e0a\uff0cLitex\u63d0\u4f9b\u6613\u4e8e\u4f7f\u7528\u548c\u8282\u7701\u7a7a\u95f4\u7684\u6a21\u5757\uff0c\u5728\u4e0d\u5230\u4e00\u5c0f\u65f6\u7684\u65f6\u95f4\u5185\u521b\u5efa\u60a8\u81ea\u5df1\u7684\u7247\u4e0a\u7cfb\u7edf(SoC)\uff01\u5b83\u5df2\u7ecf\u652f\u630116\u4e2a\u4ee5\u4e0a\u7684\u6d41\u884c\u677f\u5361\uff0c\u4e3a\u60a8\u751f\u6210verilog\u3001\u6784\u5efa\u548c\u52a0\u8f7d\u6bd4\u7279\u6d41\u3002\u7136\u800c\uff0c\u6587\u6863\u975e\u5e38\u7a00\u5c11\uff0c\u4f46\u662f\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\uff0c\u6211\u5efa\u8bae\u60a8\u9605\u8bfbLitex for Hardware EngineersGuide(Litex For Hardware EngineersGuide)\u3002\n\u5bf9\u4e8e\u590d\u6742\u7684\u7b97\u6cd5\uff0cMigen/VHDL/Verilog\u4e0d\u662f\u6700\u6709\u6548\u7684\u8bed\u8a00\uff0c\u56e0\u4e3a\u5b83\u4eec\u592a\u4f4e\u7ea7\uff0c\u7c7b\u4f3c\u4e8e\u7528\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u56fe\u50cf\u8bc6\u522b\u5e94\u7528\u7a0b\u5e8f\u3002\n\u76f8\u53cd\uff0c\u9ad8\u7ea7\u7efc\u5408\u53ef\u4ee5\u7528C\u8bed\u8a00\u7f16\u5199\u4e0d\u5b9a\u65f6\u7684\u8bbe\u8ba1\u6a21\u578b\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u6548\u7684Verilog/VHDL\u6a21\u5757\u3002\u8fd9\u4f7f\u5f97\u9a8c\u8bc1\u6a21\u578b\u53d8\u5f97\u5f88\u5bb9\u6613\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u4ee3\u7801\u7784\u51c6\u591a\u4e2aFPGA\u4f9b\u5e94\u5546\uff0c\u800c\u65e0\u9700\u6602\u8d35\u7684\u6a21\u5757\u91cd\u5199\u3002\u6b64\u5916\uff0c\u7b97\u6cd5\u6216\u5ef6\u8fdf\u8981\u6c42\u7684\u6539\u53d8\u4e0d\u9700\u8981\u6602\u8d35\u7684\u91cd\u5199\u548c\u91cd\u65b0\u9a8c\u8bc1\u3002\u5bf9\u6211\u6765\u8bf4\u542c\u8d77\u6765\u592a\u68d2\u4e86\uff01\n\u7f3a\u70b9\u662f\uff0c\u5927\u591a\u6570\u4e0eC/C++\u517c\u5bb9\u7684HLS\u5de5\u5177\u90fd\u662f\u4e13\u6709\u7684\uff0c\u800c\u5f00\u6e90\u5de5\u5177\u8981\u4e48\u57fa\u4e8eScala(Chisel\uff0cSpinalHDL)\uff0c\u8981\u4e48\u770b\u8d77\u6765\u50cf\u662f\u5b66\u672f\u73a9\u5177\u9879\u76ee\u3002\u4e0d\u8fc7\u6211\u5e0c\u671b\u6211\u662f\u9519\u7684\uff0c\u6240\u4ee5\u6211\u9700\u8981\u66f4\u591a\u5730\u8c03\u67e5\u4ed6\u4eec\uff0c\u56e0\u4e3a\u524d\u666f\u592a\u597d\u4e86\uff0c\u4e0d\u80fd\u9519\u8fc7\uff01\u5728\u8bc4\u8bba\u4e2d\u8ba9\u6211\u77e5\u9053\u54ea\u4e9b\u9879\u76ee\u662f\u4f60\u6700\u559c\u6b22\u7684\uff01\n\u6700\u521d\uff0cFPGA\u53ea\u7531\u5927\u91cf\u7684\u95e8/LUT\u6784\u6210\uff0c\u8bbe\u8ba1\u5c06\u5b8c\u5168\u4f7f\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u4e00\u4e9b\u529f\u80fd\u53ef\u4ee5\u66f4\u597d\u5730\u5b9e\u73b0\u4e3a\u5feb\u901f\u9ad8\u6548\u7684\u56fa\u5b9a\u529f\u80fd\uff1a\u5757\u5b58\u50a8\u5668\u3001\u4e32\u884c\u5668/\u89e3\u4e32\u5668(\u5e76\u884c\u5230\u4e32\u884c\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u901a\u5e38\u79f0\u4e3aSerDes)\u3001PLL(\u65f6\u949f\u53d1\u751f\u5668)\u3001\u5b58\u50a8\u5668\u63a7\u5236\u5668\u3001PCIE\u3001\u2026\u3002\n\u8fd9\u4e9b\u56fa\u5b9a\u529f\u80fd\u5757\u79f0\u4e3a\u786cIP\uff0c\u800c\u4f7f\u7528FPGA Isby\u6269\u5c55\u7684\u53ef\u7f16\u7a0b\u90e8\u5206\u5b9e\u73b0\u7684\u90e8\u5206\u79f0\u4e3a\u8f6fIP\u3002\u786cIP\u8fc7\u53bb\u662f\u4e3a\u9ad8\u7aef\u90e8\u4ef6\u4fdd\u7559\u7684\uff0c\u4f46\u73b0\u5728\u5927\u591a\u6570FPGA\u4e0a\u90fd\u6709\u786cIP\uff0c\u9664\u4e86\u6700\u4fbf\u5b9c\u548c\u6700\u5c0f\u7684\u90a3\u4e9b\u4e13\u4e3a\u4f4e\u529f\u8017\u548c\u81ea\u529b\u66f4\u751f\u800c\u8bbe\u8ba1\u7684\u3002\n\u4f8b\u5982\uff0c\u524d\u9762\u63d0\u5230\u7684100\u7f8e\u5143\u90e8\u5206\u5305\u62ec\u8db3\u4ee5\u5b9e\u73b0HDMI 1.4\u517c\u5bb9\u7684\u591a\u4e2aSERDE\u3001\u4e00\u4e2a\u5e264\u901a\u9053\u5757\u7684PCIe 2.0\u548c\u4e00\u4e2aDDR3\u5185\u5b58\u63a7\u5236\u5668\u3002\u8fd9\u8db3\u4ee5\u5b9e\u73b0\u5177\u6709\u591a\u4e2a\u8f93\u51fa\u548c\u8f93\u5165\u7684\u663e\u793a\u63a7\u5236\u5668\uff0c\u5982NeTV2\u5f00\u653e\u786c\u4ef6\u677f\u4e0a\u6240\u793a\u3002\n\u786cIP\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e13\u6709\u8f6fIP\u7684\u57fa\u7840\u3002\u4f8b\u5982\uff0cXilinx\u9500\u552e\u4f7f\u7528SERDES\u786cIP\u7684HDMI 1.4/2.0\u63a5\u6536\u5668IP\uff0c\u4ee5\u83b7\u5f97\u5b9e\u73b0HDMI\u5408\u89c4\u6027\u6240\u9700\u7684\u5fc5\u898118 Gb/s\u5e26\u5bbd\u3002\n\u6709\u4eba\u53ef\u80fd\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528FPGA\u6765\u5b9e\u73b0CPU\u3002\u4e8b\u5b9e\u4e0a\uff0c\u975e\u5e38\u4fbf\u5b9c\u548c\u6027\u80fd\u66f4\u597d\u7684\u7269\u7406CPU\u53ef\u4ee5\u7b80\u5355\u5730\u4e0eFPGA\u4e00\u8d77\u5b89\u88c5\uff01\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u5728CPU\u4e0a\u6d6a\u8d39LUT\u5462\uff1f\u8fd9\u7bc7\u6587\u7ae0\u6bd4\u6211\u66f4\u597d\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u5b83\u7684\u8981\u70b9\u662f\uff0c\u5b83\u4eec\u786e\u5b9e\u5f88\u597d\u5730\u5b8c\u6210\u4e86\u9762\u5411\u8f83\u5c11\u5ef6\u8fdf\u7684\u90e8\u5206\u7684\u56fa\u5b9a\u903b\u8f91\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u5f88\u5927\u7684\u4ef7\u503c\u3002\u4e0d\u65b9\u4fbf\u7684\u662f\uff0cSoC\u9700\u8981\u989d\u5916\u7684\u56fa\u4ef6\uff0c\u4f46\u8fd9\u4e0e\u62e5\u6709\u5916\u90e8CPU\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\n\u5df2\u7ecf\u6709\u76f8\u5f53\u591a\u7684\u7528\u4e8eFPGA\u7684\u5f00\u6e90\u73a9\u5177\u8f6fCPU\uff0c\u4e5f\u6709\u4e00\u4e9b\u4e13\u6709\u7684\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u3002\u95ee\u9898\u662f\u4ed6\u4eec\u7684\u5de5\u5177\u94fe\u7ecf\u5e38\u4e0d\u5728\u6811\u4e0a\uff0c\u548c/\u6216Linux\u4e0d\u80fd\u5728\u4ed6\u4eec\u8eab\u4e0a\u8fd0\u884c\u3002\u968f\u7740RISC V\u7684\u5f15\u5165\uff0c\u8fd9\u4e00\u70b9\u771f\u6b63\u6539\u53d8\u4e86\uff0c\u5b83\u975e\u5e38\u9ad8\u6548\uff0c\u5728\u4e3b\u7ebfLinux\u548cGCC\u4e2d\u90fd\u5f97\u5230\u4e86\u652f\u6301\uff0c\u751a\u81f3\u53ef\u4ee5\u8212\u9002\u5730\u5b89\u88c5\u5728Altera\u548cXilinx\u7684\u6700\u5c0f\u7684FPGA\u4e2d\u3002\u6709\u4ec0\u4e48\u4e0d\u7231\u7684\u5462\uff1f\n\u6240\u4ee5\uff0cFPGA\u548c\u4ed6\u4eec\u7684\u793e\u533a\u4e2d\u7684\u6240\u6709\u8fd9\u4e9b\u5f88\u597d\u7684\u6539\u8fdb\u90fd\u5f88\u68d2\uff0c\u4f46\u5982\u679c\u4e0d\u662f\u5bf9\u4e8e\u6240\u6709\u4f7f\u7528\u5b83\u4eec\u7684\u521b\u65b0\u8bbe\u8ba1\u7684\u5ec9\u4ef7\u5f00\u653e\u786c\u4ef6\u677f\u6765\u8bf4\uff0c\u5b83\u5c31\u4e0d\u4f1a\u90a3\u4e48\u6709\u5438\u5f15\u529b\u4e86\uff1a\nFomu(50\u7f8e\u5143)\uff1a\u4e00\u4e2a\u57fa\u4e8eice40\u7684FPGA\uff0c\u9002\u5408\u60a8\u7684USB\u7aef\u53e3\uff0c\u4f7f\u7528\u5168\u5f00\u6e90\u5de5\u5177\u94fe\u53ef\u4ee5\u5f88\u597d\u5730\u4f7f\u7528RISC V\u548c\u51e0\u4e2aiOS\uff01\n\u7834\u51b0\u8005(69\u7f8e\u5143)\uff1a\u4e00\u4e2a\u66f4\u4f20\u7edf\u7684\u57fa\u4e8eice40\u7684\u4e3b\u677f\uff0c\u9762\u5411iOS\uff0c\u4f4e\u6210\u672c\uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u5b8c\u5168\u5f00\u6e90\u7684\u5de5\u5177\u94fe\u3002\nULX3S(115-200\u7f8e\u5143)\uff1a\u57fa\u4e8eECP5\u7684\u7ec8\u6781\u4e3b\u677f\uff1f\u5b83\u53ef\u7528\u4f5c\u529f\u80fd\u9f50\u5168\u7684\u624b\u6301\u6216\u9759\u6001\u6e38\u620f\u673a(\u5305\u62ec\u65e0\u7ebf\u63a7\u5236\u5668)\u3001USB/\u65e0\u7ebf\u663e\u793a\u63a7\u5236\u5668\u3001\u4e0eArduino\u517c\u5bb9\u7684\u5bb6\u5ead\u81ea\u52a8\u5316\u7f51\u5173(\u5305\u62ec\u76d1\u63a7\u6444\u50cf\u5934)\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u901a\u8fc7\u4e00\u4e2a\u5b8c\u5168\u5f00\u6e90\u7684\u5de5\u5177\u94fe\u5b9e\u73b0\u7684\u3002\nNeTV2\uff1a\u9762\u5411\u89c6\u9891\u7684\u5e73\u53f0\uff0c\u5177\u67092\u4e2aHDMI\u8f93\u5165\u548c2\u4e2aHDMI\u8f93\u51fa\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u5177\u6709USB\u548c\u4ee5\u592a\u7f51\u8fde\u63a5\u7684\u72ec\u7acb\u8bbe\u5907\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4f7f\u7528PCIe 2.0 4x\u63a5\u53e3\u7684\u52a0\u901f\u5668\u8fd0\u884c\u3002\u6700\u6602\u8d35\u7684\u4e3b\u677f\u6709\u8db3\u591f\u7684\u95f8\u95e8\u8fdb\u5165\u771f\u6b63\u7684\u8ba1\u7b97\u80fd\u529b\uff0c\u8fd9\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u901f\u5ea6\u5f88\u6162\u7684GPU\uff0c\u5e26\u6709\u4e00\u4e2a\u76f8\u5f53\u4e0d\u9519\u7684\u663e\u793a\u63a7\u5236\u5668\uff01\u4f5c\u4e3aXilinx\u7684\u57fa\u4e8eArtix7\u7684\u5de5\u5177\uff0c\u5f00\u6e90\u5de5\u5177\u94fe\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u4f46\u662f\u5f53\u60a8\u5b8c\u6210\u8bbe\u8ba1\u5b9e\u73b0\u65f6\uff0c\u6211\u76f8\u4fe1\u5de5\u5177\u94fe\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff01\n\u5f52\u6839\u7ed3\u5e95\uff0c\u8fd9\u4e9b\u7248\u5757\u4e3a\u4efb\u4f55\u7c7b\u578b\u7684\u9879\u76ee\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5e73\u53f0\uff0c\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e86\u8fdb\u5165\u7231\u597d/\u5e02\u573a\u7684\u6210\u672c\uff0c\u5e76\u63d0\u4f9b\u4e86\u73b0\u6210\u7684\u8bbe\u8ba1\u6765\u6574\u5408\u5230\u60a8\u7684\u9879\u76ee\u4e2d\u3002\u786c\u4ef6\u65b9\u9762\u770b\u8d77\u6765\u90fd\u5f88\u4e0d\u9519\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u56f4\u7ed5\u4e00\u4e2a\u63d0\u4f9bArduinos\u7075\u6d3b\u6027\u4f46\u5177\u6709Raspberry-PI\u7c7b\u529f\u80fd\u96c6\u7684\u4e3b\u677f\u6765\u521b\u5efa\u4e00\u4e2a\u5de8\u5927\u7684\u793e\u533a\u5462\uff1f\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u7535\u8def\u677f\u7684\u53ef\u7528\u6027\u3001\u5de5\u5177\u94fe\u3001\u8bed\u8a00\u3001\u901f\u5ea6\u548c\u4ef7\u683c\u90fd\u5728\u9650\u5236\u7740\u4e1a\u4f59\u7231\u597d\u8005\u4ece\u4e8b\u786c\u4ef6\u8bbe\u8ba1\u3002\u6240\u4ee5\uff0c\u4e00\u5b9a\u8981\u6709\u5f00\u653e\u7684\u8857\u533a\uff0c\u53ef\u4ee5\u878d\u5165\u5230\u8bbe\u8ba1\u4e2d\uff0c\u5bf9\u5427\uff1f\n\u7b54\u6848\u662f\u54cd\u4eae\u7684\u201c\u662f\u201d\uff01\u6211\u60f3\u8c08\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\u662fLitex\uff0c\u5b83\u662f\u4e00\u79cd\u5305\u542b\u7535\u6c60\u7684HDL\u8bed\u8a00(\u5982Python)\u3002\u4ee5\u4e0b\u662f\u5b83\u63d0\u4f9b\u7684\u4e0d\u540c\u533a\u5757\u7684\u7cbe\u7b80\u7248\u672c\uff1a\nLitex Wishbone\u603b\u7ebf\uff1a\u652f\u6301\u8f6fCPU\u6216\u901a\u8fc7\u4e0d\u540c\u603b\u7ebf(PCIE\u3001USB\u3001\u4ee5\u592a\u7f51\u3001\u2026)\u8bbf\u95ee\u4e0d\u540cIP\u3002\nLiteDRAM\uff1a\u7528\u4e8eXilinx\u7684DDR/LPDDR/DDR2/DDR3/DDR4\u786cIP\u6216\u7528\u4e8eECP5\u7684DDR3\u7684SDRAM\u63a7\u5236\u5668\u8f6fIP\u6216\u5305\u88c5\u5668\u3002\nLiteEth\uff1a10/100/1000\u4ee5\u592a\u7f51\u8f6fIP\uff0c\u8fd8\u5141\u8bb8\u60a8\u901a\u8fc7\u5b83\u8bbf\u95eeWishbonebus\uff01\nLiteSATA/LiteSD\u5361\uff1a\u7528\u4e8e\u8bbf\u95eeSATA\u9a71\u52a8\u5668/SD\u5361\u7684\u8f6fIP\uff0c\u4e3a\u60a8\u7684\u8f6fCPU\u63d0\u4f9b\u5e7f\u6cdb\u7684\u5b58\u50a8\u529f\u80fd\u3002\n\u4f7f\u7528Litex\uff0c\u4eba\u4eec\u53ef\u4ee5\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u82af\u7247\u7cfb\u7edf\u3002\u6dfb\u52a0\u5757\u5c31\u50cf\u5411SoC\u6dfb\u52a0\u4e24\u884c\u4ee3\u7801\u4e00\u6837\u7b80\u5355\uff1a\u4e00\u884c\u7528\u4e8e\u5b9e\u4f8b\u5316\u5757(\u5c31\u50cf\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e00\u6837)\uff0c\u53e6\u4e00\u884c\u7528\u4e8e\u901a\u8fc7Wishbone\u603b\u7ebf\u516c\u5f00\u5b83\u3002\u5982\u679c\u8fd9\u8fd8\u4e0d\u591f\uff0c\u770b\u770b\u65b0\u7684Open WiFi\u9879\u76ee\uff0c\u6216\u8005OpenCores\u9879\u76ee\uff0c\u5b83\u4f3c\u4e4e\u62e5\u6709\u51e0\u4e4e\u6240\u6709\u4f60\u6240\u5e0c\u671b\u7684\u4e1c\u897f\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u5177\u6709\u529f\u80fd\u5f3a\u5927\u7684FPGA\u548c\u6709\u7528\u7684IO\u7684\u5f00\u653e\u5f0f\u786c\u4ef6\u4e3b\u677f\u5373\u4f7f\u5bf9\u4e8e\u4e1a\u4f59\u7231\u597d\u8005\u6765\u8bf4\u4e5f\u662f\u8d1f\u62c5\u5f97\u8d77\u7684\u3002\u6211\u4eec\u4e5f\u770b\u5230\u521b\u5efaSoC\u53ef\u4ee5\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u5b8c\u6210\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u4e3a\u6240\u6709\u7684SoC\u90fd\u63d0\u4f9b\u9a71\u52a8\u7a0b\u5e8f\u5462\uff1f\n\u6211\u7684\u610f\u601d\u662f\uff0c\u6211\u4eec\u6709\u4e00\u4e2aFPGA\u5b50\u7cfb\u7edf\uff0c\u5b83\u4e13\u6ce8\u4e8e\u5728\u5f15\u5bfc\u65f6\u52a0\u8f7d\u6bd4\u7279\u6d41\uff0c\u751a\u81f3\u652f\u6301\u52a8\u6001\u91cd\u65b0\u914d\u7f6eFPGA\u3002\u6211\u4eec\u652f\u6301\u5927\u591a\u6570\u786cIP\uff0c\u4f46\u4ec5\u5f53\u901a\u8fc7\u67d0\u4e9bFPGA\u7684\u96c6\u6210ARM\u5904\u7406\u5668\u8bbf\u95ee\u65f6\u624d\u652f\u6301\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u6ca1\u6709\u8f6fIP\u7684\u9a71\u52a8\u7a0b\u5e8f\u5462\uff1f\u4f1a\u4e0d\u4f1a\u662f\u4ed6\u4eec\u7684\u5f00\u53d1\u4eba\u5458\u4e0d\u60f3\u8981ToupStream\u9a71\u52a8\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u8be5\u5757\u7684\u63a5\u53e3\u548c\u57fa\u5730\u5740\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff1f\u770b\u8d77\u6765\u786e\u5b9e\u5f88\u50cf\uff01\n\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u63a5\u53e3\u6765\u5217\u51fa\u8fd9\u4e9b\u5757\u3001\u5b83\u4eec\u63a5\u53e3\u7684\u5f53\u524d\u7248\u672c\u4ee5\u53ca\u5b83\u4eec\u7684\u57fa\u5730\u5740\uff0c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u8fd9\u57fa\u672c\u4e0a\u7c7b\u4f3c\u4e8e\u8bbe\u5907\u6811\uff0c\u4f46\u4e0d\u9700\u8981\u5c06\u60a8\u521b\u5efa\u7684SoC\u7684\u7f51\u8868\u53d1\u9001\u7ed9\u6bcf\u4e2a\u7528\u6237\u3002\u8fd9\u5c06\u5141\u8bb8\u4e3a\u6240\u6709\u7248\u672c\u7684\u8f6fIP\u548c\u6240\u6709\u4f7f\u7528\u5b83\u4eec\u7684\u677f\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u4e0a\u6e38\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4ece\u800c\u4f7f\u5f00\u6e90\u7684\u8f6fIP\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\n\u6d88\u9664\u5bf9\u5f00\u653e\u5185\u6838\u4e2dABI\u4e0d\u7a33\u5b9a\u7684\u6050\u60e7\u662f\u6211\u7684\u65b0\u9879\u76eeLiteDIP\u7684\u6838\u5fc3\u3002\u4e3a\u4e86\u8bc1\u660e\u5176\u6709\u6548\u6027\uff0c\u6211\u60f3\u5c55\u793aNeTV 2(HDMI\u8f93\u5165/\u8f93\u51fa\u300110/100\u4ee5\u592a\u7f51\u3001SD\u5361\u8bfb\u5361\u5668\u3001\u98ce\u6247\u3001\u6e29\u5ea6\u3001\u7535\u538b)\u548cULX3S(HDMI\u8f93\u5165/\u8f93\u51fa\u3001WIFI\u3001\u84dd\u7259\u3001SD\u5361\u8bfb\u5361\u5668\u3001LED\u3001GPIO\u3001\u6a21\u6570\u8f6c\u6362\u5668\u3001\u6309\u94ae\u3001\u97f3\u9891\u3001FM/AM\u6536\u97f3\u673a\u3001\u2026)\u4e0a\u53ef\u7528\u7684\u6240\u6709\u786c\u4ef6\u3002\u4f7f\u7528\u76f8\u540c\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002\u7528\u6237\u53ef\u4ee5\u6311\u9009\u6a21\u5757\uff0c\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u8fdb\u884c\u914d\u7f6e\uff0c\u4e0d\u9700\u8981\u66f4\u6539\u9a71\u52a8\u7a0b\u5e8f\u3002\u8fd9\u542c\u8d77\u6765\u96c4\u5fc3\u52c3\u52c3\uff0c\u4f46\u4f3c\u4e4e\u4e5f\u662f\u4e00\u4e2a\u6709\u4ef7\u503c\u7684\u6311\u6218\uff01\u6211\u4e0d\u4ec5\u53ef\u4ee5\u4eab\u53d7\u4e00\u79cd\u65b0\u7684\u7231\u597d\uff0c\u8fd8\u53ef\u4ee5\u5c06\u8f6f\u4ef6\u548c\u786c\u4ef6\u5f00\u53d1\u4eba\u5458\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u4f7f\u7528\u4e00\u79cd\u5c3a\u5bf8\u9002\u5408\u6240\u6709\u5f00\u653e\u786c\u4ef6\u677f\u7684\u73b0\u4ee3\u98ce\u683c\u7684\u8ba1\u7b97\u673a\u6216\u52a0\u901f\u5668\u3002\n\u6211\u662f\u552f\u4e00\u4e00\u4e2a\u5bf9\u524d\u666f\u611f\u5230\u5174\u594b\u7684\u4eba\u5417\uff1f\u656c\u8bf7\u5173\u6ce8\u9879\u76ee\u7684\u6700\u65b0\u6d88\u606f\uff01", "note_en": "Field-Programmable Gate Arrays (FPGA) have been an interest of mine for well over a decade now. Being able to generatecomplex signals in the tens of MHz range with nanosecond accuracy, dealing with fast data streams, and doing all of thisat a fraction of the power consumption of fast CPUs, they really have a lot of potential for fun. However, theirprohibitive cost, proprietary toolchains (some running only on Windows), and the insanely-long bitstream generation madethem look more like a curiosity to me rather than a practical solution. Finally, writing verilog / VHDL directly feltlike the equivalent of writing an OS in assembly and thus felt more like torture than fun for the young C/C++ developerthat I was. Little did I know that 10+ years later, I would find HW development to be the most amazing thing ever!\n The first thing that changed is that I got involved in reverse engineering NVIDIA GPUs\u2019 power management in order to writean open source driver, writing in a reverse-engineed assembly to implement automatic power management for this driver,creating my own smart wireless modems which detects the PHY parameters of incoming transmissions on the fly (modulation,center frequency) by using software-defined radio, and having fun with arduinos, single-board computers, and designing mycustom PCBs.\n The second thing that changed is that Moore\u2019s law has grinded to a halt, leading to a more architecture-centric insteadof a fab-oriented world. This reduced the advantage ASICs had on FPGAs, by creating a software eco-system that is moregeared towards parallelism rather than high-frequency single-thread performance.\n Finally, FPGAs along with their community have gotten a whole lot more attractive! From the FPGAs themselves to theirtoolchains, let\u2019s review what changed, and then ask ourselves why this has not translated to upstream Linux drivers forFPGA-based open source designs.\n  Programmable logic elements have  gone through multiple agesthroughout their life. Since their humble beginning, they have always excelled at low-volune designs by spreading thecost of creating a new ASIC onto as many customers as possible. This has enabled start-ups and hobbyists to create theirown niche and get into the market without breaking the bank.\n Nowadays, FPGAs are all based around Lookup Tables (LUT) rather than a set of logic gates as they can re-create anylogic function and can also serve as flip-flops (memory unit). Let\u2019s have a quick look at what changed throughout the\u201cstack\u201d that makes designing FPGA-based HW designs so approachable even to hobbyists.\n  Historically, FPGAs have compared negatively to ASICs due to their increased latency (limiting the maximum frequency ofthe design), and power efficiency. However, just like CPUs and GPUs, one can compensate for these limitations by makinga wider/parallel design operating at a lower frequency. Wider designs however require more logic elements / LUTs.\n Fortunately, the price per LUT has fallen dramatically since the introduction of FPGAs, to the point that pretty much all butthe biggest designs would fit in them. Since then, the focus has shifted on providing hard IPs (fixed functions) instead.This enables a  $37 part( XCA712T)to be able to fit over 3 Linux-worthy RISC-V processors running at 180 MHz, with 720 kB of block RAM available for caches,FIFOs, or anything else. By raising the budget to the $100 mark, the specs improvedramatically with an FPGA capable of running 40 Linux-worthy RISC-V CPUs and almost 5 MB of block RAM available forcaches!\n And just in case this would not be enough for you, you could consider the Alveo line up such as the Alveo U250 which has 1.3MLUTs and a peak throughput in INT8 operations of 33 TOPs and 64 GB of DDR4 memory (77 GB/s bandwidth). For memory-bandwidth-hungrydesigns, the  Alveo U280brings 8 GB of HBM2 memory to the table (460GB/s bandwidth) and 32 GB of DDR4 memory (38 GB/s of bandwidth), at theexpense of having \u201conly\u201d 24.5 INT8 TOPs and 1M LUTs. Both models can be found for ~$3000 on ebay, used. What a bargain :D !\n   Linux is now really supported by the major players of the industry. Xilinx\u2019s support came first (2005), while Altera joined the club in 2009.Both are however the definition of bloated, with toolchains weighing multiple GB( ~6GB for Altera,while Xilinx is  at a whooping 27 GB)!\n  Project icestorm created a fully-functional fully-opensource toolchain for Lattice\u2019sice40 FPGAs. Its regular structure made the reverse engineering and writing the toolchain easier. Since then, the morecomplex Lattice ECP5 FPGA got full support, and Xilinx\u2019s 7-series is under way. All these projects are now workingunder the  Symbiflow umbrella, which aims to become the GCC of FPGAs.\n   VHDL/Verilog are error-prone and do not land themselves to complex parametrization. This reduces the re-usability ofmodules. On the contrary, the Python language excels at meta-programming, and  Migenprovides a way to generate verilog from relatively-simple python constructs.\n On top of Migen,  LiteX provides easy-to-use and space-efficient modules tocreate your own System On Chip (SoC) in less than an hour! It already has support for 16+ popular boards, generatesverilog, builds, and loads the bitstream for you. Documentation is however quite sparse, but I would suggest youread the  LiteX for Hardware Engineersguide if you want to learn more.\n  For complex algorithms, Migen/VHDL/Verilog are not the most efficient languages as they are too low-level and are akinto writing image recognition applications in assembly.\n Instead, high-level synthesis enables writing an untimed model of the design in C, and convert it in an efficientVerilog/VHDL module. This makes it easy to validate the model, and to target multiple FPGA vendors with the same codewithout an expensive rewrite of the module. Moreover, changes in the algorithm or latency requirements will not requirean expensive rewrite and re-validation. Sounds amazing to me!\n The bad part is that most of C/C++-compatible HLS tools are proprietary, and open source ones are either Scala-based(Chisel, SpinalHDL) or seem to be academic toy projects. I hope I am wrong though, so I\u2019ll need to look more into themas the prospects are just too good to pass! Let me know in the comments which projects are your favourite!\n  Initially, FPGAs were only made of a ton of gates / LUTs, and designs would be fully implemented using them. However,some functions could be better implemented as a fast and efficient fixed function: block memory, Serializer/Deserializer(parallel to serial and vice versa, often call SERDES), PLLs (clock generators), memory controlers, PCIe, \u2026\n These fixed-function blocks are called Hard IPs, while the part implemented using the programmable part of the FPGA isby extension called a soft IP. Hard IPs used to be reserved to higher-end parts, but they are nowadays found on mostFPGAs, save the cheapest and smallest ones which are designed for low-power and self-reliance.\n For example, the  $100 partmentioned earlier includes multiple SERDES that are sufficient to achieve HDMI 1.4 compliance, a PCIe 2.0 with4 lanes block, and a DDR3 memory controler. This makes it sufficient for implementing display controlers with multipleoutputs and inputs, as seen on the  NeTV2 open hardware board.\n Hard IPs can also be the basis of proprietary soft IPs. For instance, Xilinx sells HDMI 1.4/2.0 receivers IPs that use the SERDES hardIPs to achieve the necessary 18Gb/s bandwidth needed to achieve HDMI compliance.\n  One might wonder why use an FPGA to implement a CPU. Indeed, physical CPUs which are dirt-cheap and better-performingcould simply be installed alongside the FPGA! So, why waste LUTs on a CPU? This article addresses it better than I could, but the gist of it isthat they really completement fixed-logic well for less latency-oriented parts and provide a lot of value. Theinconvenients are that an additional firmware is needed for the SoC, but that is no different from having external CPUs.\n There has been quite a few open source toy soft-CPUs for FPGAs, and some proprietary vendor-provided ones. The problem has beenthat their toolchain was often out of tree, and/or Linux couldn\u2019t run on them. This really changed with the introductionof RISC V, which is pretty efficient, is  supported in mainline Linuxand  GCC, and can fit comfortably in even the smallest FPGAs from Altera and Xilinx. What\u2019sthere not to love?\n  So, all of these nice improvements in FPGAs and their community is great, but it wouldn\u2019t be as attractive if not forall the cheap open hardware boards with their inovative designs using them:\n Fomu ($50): an ice40-based FPGA that fits in your USB port and issufficient to play with RISC V and a couple of IOs using a full-opensource toolchain!\n IceBreaker ($69): a more traditional ice40-based boardthat is oriented towards IOs, low-cost, and a full-opensource toolchain.\n ULX3S ($115-200): the ultimate ECP5-based board? It can be used as acomplete handheld or static game console (including wireless controlers) with over-the-air updates, a USB/Wirelessdisplay controler, an arduino-compatible home-automation gateway including surveillance cameras. All of that witha full-opensource toolchain.\n NeTV2: Video-oriented platform with 2 HDMI inputs and 2 HDMI outputswhich can run as a standalone device with USB and Ethernet connectivity, or as an accelerator using the PCIe 2.0 4xconnector. The most expensive board has enough gates to get into serious computing power which could be used tocreate a slow GPU, with a pretty-decent display controler! Being Xilinx\u2019s Artix7-based, the opensource toolchains isnot yet complete, but by the time you will be done implementing your design, I am sure the toolchain will be ready!\n Ultimately, these boards provide a good platform for any sort of project, further reducing the cost of entry in thehobby / market, and providing ready-made designs to be incorporated in your projects. All seem pretty good on thehardware side, so why don\u2019t we have a huge community around a board that would provide the flexibility of arduinos butwith Raspberry-Pi-like feature set?\n  We have seen that board availability, toolchains, languages, speed, nor price are limiting even hobbyists from gettinginto hardware design. So, there must be open blocks that could be incorporated in designs, right?\n The answer is a resounding YES! The first project I would like to talk about is LiteX, which is a HDL language with batteries included (like Python). Here is atrimmed-down version of the different blocks it provides:\n LiteX Wishbone bus: Enable MMIO access to the different IPs for the soft-CPUs, or throughdifferent buses (PCIe, USB, ethernet, \u2026)\n LiteDRAM: A SDRAM controller soft IP, or wrapper for DDR/LPDDR/DDR2/DDR3/DDR4 hardIPs of Xilinx or DDR3 for the ECP5.\n LiteEth: A 10/100/1000 ethernet soft IP which also allows you to access the wishbonebus through it!\n  LiteSATA /  LiteSDCard:Soft IP to access SATA drives / SD Cards, providing extensive storage capabilities to your soft CPU.\n Using LiteX, one may create a complete System of Chip in a matter of hours. Adding a block is as simple as adding twolines of code to the SoC: One line to instanciate the block (like one would instanciate an object), and one to expose itthrough the wishbone bus. And if this isn\u2019t enough, check out the new  Open WiFi project,or the  OpenCores project which seems to have pretty much everything one could hope for.\n  We have seen that open hardware boards with capable FPGAs and useful IOs are affordable even to hobbyists. Wehave also seen that creating SoCs can be done in a matter of hours, so why don\u2019t we have drivers for all of them?\n I mean, we have a  FPGA subsystem that isfocused on loading bitstreams at boot, or even supporting on-the-fly FPGA reconfiguration. We have support for  most hardIPs, but only when accessed through the integratedARM processor of some FPGAs. So, why don\u2019t we have drivers for soft IPs? Could it be their developers would not want toupstream drivers for them because the interface and the base address of the block is subject to change? It certainly lookslike it!\n But what if we could create an interface that would allow listing these blocks, the current version of theirinterface, and their base address? This would basically be akin to the  Device Tree,but without the need to ship to every single user the netlist for the SoC you created. This would enable the creationof a generic upstream driver for all the versions of a soft IPs and all the boards using them, and thus make open sourcesoft IPs more usable.\n Removing the fear of ABI instability in open cores is at the core of my new project, LiteDIP. To demonstrate its effectiveness, I would like to expose allthe hardware available on the  NeTV2 (HDMI IN/OUT, 10/100 ethernet,SD Card reader, Fan, temperature, voltages), and the  ULX3S (HDMI IN/OUT,WiFi, Bluetooth, SD Card reader, LEDs, GPIOs, ADC, buttons, Audio, FM/AM radio, \u2026) using the same driver. Users couldpick and chose modules, configure them to their liking, and no driver changes would be necessary. It sounds ambitious,but also seems like a worthy challenge! Not only do I get to enjoy a new hobby, but it would bring together software andhardware developers, enabling the creation of modern-ish computers or accelerators using one size fits all open hardwareboards.\n Am I the only one excited by the prospect? Stay tuned for updates on the project!", "posttime": "2020-06-11 23:00:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u786c\u4ef6,\u5f00\u6e90,\u5f00\u653e,open", "title": "FPGA\uff1a\u4e3a\u4ec0\u4e48\u5f00\u653e\u786c\u4ef6\u7684\u5f00\u6e90\u9a71\u52a8\u7a0b\u5e8f\u5982\u6b64\u4e4b\u5c11\uff1f", "title_en": "FPGA: Why So Few Open Source Drivers for Open Hardware?", "transed": 1, "url": "https://mupuf.org/blog/2020/06/09/FPGA-why-so-few-drivers/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u786c\u4ef6", "\u5f00\u6e90", "\u5f00\u653e", "open"]}, {"category": "", "categoryclass": "", "imagename": "027151b65ae970e50686b8eab6c5492b.jpg", "infoid": 1006138, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u4fe1\u5b88\u5176\u63d0\u4f9b\u516c\u5e73\u548c\u5f00\u653e\u7684\u5b66\u672f\u673a\u4f1a\u7684\u627f\u8bfa\uff0c\u7ed3\u675f\u4e86\u4e0e\u7231\u601d\u552f\u5c14\u5c31\u4e00\u4efd\u65b0\u7684\u671f\u520a\u5408\u540c\u8fdb\u884c\u7684\u8c08\u5224\u3002\u7231\u601d\u552f\u5c14\u672a\u80fd\u63d0\u4ea4\u4e00\u4efd\u7b26\u5408\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u51fa\u7248\u5546\u5408\u540c\u6846\u67b6\u539f\u5219\u7684\u63d0\u6848\u3002\n\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u56fe\u4e66\u9986\u4e8e2019\u5e7410\u6708\u4e0e\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7814\u7a76\u5f00\u653e\u83b7\u53d6\u7279\u8bbe\u5de5\u4f5c\u7ec4\u548c\u56fe\u4e66\u9986\u7cfb\u7edf\u5168\u7403\u59d4\u5458\u4f1a\u5408\u4f5c\u5f00\u53d1\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6846\u67b6\u57fa\u4e8e\u8fd9\u6837\u7684\u4fe1\u5ff5\uff0c\u5373\u516c\u5f00\u5206\u4eab\u7814\u7a76\u548c\u6559\u80b2\u6750\u6599\u662f\u7814\u7a76\u6240\u63a8\u8fdb\u77e5\u8bc6\u5e76\u5c06\u8fd9\u4e9b\u77e5\u8bc6\u5e94\u7528\u4e8e\u4e16\u754c\u4e0a\u6700\u5927\u6311\u6218\u7684\u4f7f\u547d\u7684\u5173\u952e\u3002\u5b83\u786e\u8ba4\u4e86\u5b66\u672f\u53ca\u5176\u4f20\u64ad\u7684\u63a7\u5236\u6743\u5e94\u8be5\u638c\u63e1\u5728\u5b66\u8005\u53ca\u5176\u673a\u6784\u624b\u4e2d\u7684\u9996\u8981\u539f\u5219\uff0c\u65e8\u5728\u786e\u4fdd\u5b66\u672f\u7814\u7a76\u6210\u679c\u80fd\u591f\u516c\u5f00\u548c\u516c\u5e73\u5730\u63d0\u4f9b\u7ed9\u5c3d\u53ef\u80fd\u5e7f\u6cdb\u7684\u53d7\u4f17\uff0c\u540c\u65f6\u4e5f\u4e3a\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u793e\u533a\u63d0\u4f9b\u6709\u4ef7\u503c\u7684\u670d\u52a1\u3002\n\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u56fe\u4e66\u9986\u9986\u957f\u514b\u91cc\u65af\u00b7\u5e03\u5c14\u683c(Chris Bourg)\u8868\u793a\uff1a\u201c\u6211\u4eec\u672a\u80fd\u4e0e\u7231\u601d\u552f\u5c14\u8fbe\u6210\u9075\u5b88\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6846\u67b6\u539f\u5219\u7684\u5408\u540c\uff0c\u6211\u5bf9\u6b64\u611f\u5230\u5931\u671b\uff0c\u4f46\u6211\u5f88\u81ea\u8c6a\u5730\u77e5\u9053\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u793e\u533a--\u4ee5\u53ca\u5168\u56fd\u6570\u767e\u540d\u540c\u4e8b--\u575a\u6301\u8fd9\u4e9b\u539f\u5219\u5bf9\u4fc3\u8fdb\u516c\u5171\u5229\u76ca\u548c\u79d1\u5b66\u8fdb\u6b65\u7684\u91cd\u8981\u6027\uff0c\u201d\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u56fe\u4e66\u9986\u9986\u957f\u514b\u91cc\u65af\u00b7\u5e03\u5c14\u683c(Chris Bourg)\u8bf4\u3002\u201c\u9762\u5bf9\u8fd9\u4e9b\u53f2\u65e0\u524d\u4f8b\u7684\u5168\u7403\u6027\u6311\u6218\uff0c\u516c\u5e73\u3001\u5f00\u653e\u5730\u83b7\u53d6\u77e5\u8bc6\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u52a0\u91cd\u8981\u3002\u201d\n100\u591a\u5bb6\u673a\u6784\uff0c\u4ece\u591a\u673a\u6784\u8d22\u56e2\u5230\u5927\u578b\u7814\u7a76\u578b\u5927\u5b66\u518d\u5230\u6587\u79d1\u5b66\u9662\uff0c\u51b3\u5b9a\u652f\u6301\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6846\u67b6\uff0c\u4ee5\u627f\u8ba4\u5176\u63a8\u52a8\u5f00\u653e\u5b66\u672f\u548c\u516c\u5171\u5229\u76ca\u7684\u6f5c\u529b\u3002\n\u7f8e\u56fd\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u5927\u8111\u4e0e\u8ba4\u77e5\u79d1\u5b66\u7cfb\u526f\u6559\u6388\u3001\u56fe\u4e66\u9986\u7cfb\u7edf\u59d4\u5458\u4f1a(Committee on the Library System\uff0cCLS)\u4e3b\u5e2d\u7f57\u6770\u00b7\u5229\u7ef4(Roger Levy)\u8868\u793a\uff1a\u201c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u793e\u4f1a\u5404\u754c--\u6559\u804c\u5458\u5de5\u3001\u5b66\u751f\u3001\u535a\u58eb\u540e\u548c\u6559\u804c\u5458\u5de5--\u90fd\u5e7f\u6cdb\u652f\u6301\u8be5\u6846\u67b6\u7684\u6838\u5fc3\u57fa\u7840\uff1a\u5df2\u53d1\u8868\u5b66\u672f\u6210\u679c\u7684\u4ef7\u503c\u6765\u81ea\u6211\u4eec\u7684\u5de5\u4f5c\u548c\u652f\u6301\u6211\u4eec\u7684\u673a\u6784\uff0c\u201d\u7f57\u6770\u00b7\u5229\u7ef4(Roger Levy)\u8bf4\u3002\u4ed6\u4e5f\u662f\u56fe\u4e66\u9986\u7cfb\u7edf\u59d4\u5458\u4f1a(Committee On The Library System)\u4e3b\u5e2d\u3002\u201cCLS\u5728\u7ed3\u675f\u8c08\u5224\u7684\u5efa\u8bae\u4e0a\u662f\u4e00\u81f4\u7684\u3002\u6211\u4eec\u516c\u5f00\u627f\u8bfa\u652f\u6301\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u793e\u533a\u6210\u5458\u81ea\u7531\u5206\u4eab\u6211\u4eec\u521b\u5efa\u7684\u5b66\u672f\u6210\u679c\u7684\u6743\u5229\uff0c\u5e76\u575a\u6301\u5728\u6211\u4eec\u7684\u5efa\u8bae\u4e2d\u9610\u660e\u7684\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6846\u67b6\u7684\u539f\u5219\u3002\u201c\u3002\n\u201c\u5982\u679c\u7231\u601d\u552f\u5c14\u80fd\u591f\u63d0\u4f9b\u4e00\u4efd\u53cd\u6620\u6211\u4eec\u793e\u533a\u9700\u6c42\u548c\u4ef7\u503c\u89c2\u5e76\u63a8\u8fdb\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u4f7f\u547d\u7684\u5408\u540c\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u6062\u590d\u5bcc\u6709\u6210\u6548\u7684\u8c08\u5224\uff0c\u201dBourg\u8bf4\u3002\u201c\u5728\u6b64\u671f\u95f4\uff0c\u6211\u4eec\u4f1a\u7ee7\u7eed\u5229\u7528\u8fd9\u4e2a\u67b6\u6784\uff0c\u5bfb\u6c42\u65b0\u7684\u9014\u5f84\uff0c\u4ee5\u8fbe\u81f4\u5f00\u653e\u83b7\u53d6\u77e5\u8bc6\u7684\u76ee\u6807\u3002\u201d\u6211\u4eec\u4e0e\u7f8e\u56fd\u8ba1\u7b97\u673a\u68b0\u534f\u4f1a\u3001\u52a0\u5dde\u5927\u5b66\u3001\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u548c\u7231\u8377\u534e\u5dde\u7acb\u5927\u5b66\u5408\u4f5c\u8fbe\u6210\u7684\u5f00\u521b\u6027\u534f\u8bae\u5c31\u662f\u6784\u5efa\u672a\u6765\u5546\u4e1a\u6a21\u5f0f\u7684\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\u3002\u201c\u3002\n\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u5f00\u653e\u83b7\u53d6\u9886\u57df\u7684\u9886\u5148\u8005\u30022009\u5e74\u901a\u8fc7\u7684\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u5f00\u653e\u83b7\u53d6\u653f\u7b56\u5021\u8bae\u662f\u7f8e\u56fd\u9996\u6279\u4e5f\u662f\u5f71\u54cd\u6700\u6df1\u8fdc\u7684\u6b64\u7c7b\u5021\u8bae\u4e4b\u4e00\u3002\u81ea\u8be5\u653f\u7b56\u901a\u8fc7\u4ee5\u6765\uff0c\u53d1\u8868\u7684\u6559\u5e08\u671f\u520a\u6587\u7ae0\u4e2d\u670947%\u662f\u514d\u8d39\u5411\u4e16\u754c\u63d0\u4f9b\u7684\u30022017\u5e74\uff0c\u8be5\u7814\u7a76\u6240\u5ba3\u5e03\u4e86\u4e00\u9879\u5168\u65b0\u7684\u653f\u7b56\uff0c\u6839\u636e\u8be5\u653f\u7b56\uff0c\u6240\u6709\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u4f5c\u8005-\u5305\u62ec\u5b66\u751f\u3001\u535a\u58eb\u540e\u548c\u5de5\u4f5c\u4eba\u5458-\u90fd\u53ef\u4ee5\u9009\u62e9\u52a0\u5165\u5f00\u653e\u83b7\u53d6\u8bb8\u53ef\u8bc1\u3002\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7814\u7a76\u5f00\u653e\u83b7\u53d6\u7279\u8bbe\u5de5\u4f5c\u7ec4\u4e8e2017\u5e74\u9996\u6b21\u7531\u6559\u52a1\u957f\u9a6c\u4e01\u00b7\u65bd\u5bc6\u7279\u53ec\u96c6\uff0c\u5e76\u4e8e2019\u5e7410\u6708\u53d1\u5e03\u4e86\u6700\u7ec8\u5efa\u8bae\u3002\u7531\u5e03\u5c14\u683c\u9886\u5bfc\u7684\u4e00\u4e2a\u5b9e\u65bd\u5c0f\u7ec4\u6b63\u5728\u52aa\u529b\u786e\u5b9a\u7279\u522b\u5de5\u4f5c\u7ec4\u7684\u5efa\u8bae\u7684\u4f18\u5148\u987a\u5e8f\u5e76\u4e88\u4ee5\u5b9e\u65bd\uff0c\u8fd9\u4e9b\u5efa\u8bae\u7684\u8303\u56f4\u4ece\u653f\u7b56\u5230\u6fc0\u52b1\uff0c\u518d\u5230\u56fd\u5bb6\u548c\u5168\u7403\u7684\u5021\u5bfc\u3002\n\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u793e\u533a\u6709\u5173\u8bbf\u95ee\u7231\u601d\u552f\u5c14\u6587\u7ae0\u7684\u4fe1\u606f\u53ef\u4ee5\u5728\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u56fe\u4e66\u9986\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u3002", "note_en": "Standing by its commitment to provide equitable and open access to scholarship, MIT has ended negotiations with Elsevier for a new journals contract. Elsevier was not able to present a proposal that aligned with the principles of the\u00a0 MIT Framework for Publisher Contracts.\n Developed by the MIT Libraries in collaboration with the\u00a0 Ad Hoc Task Force on Open Access to MIT\u2019s Research and the\u00a0 Committee on the Library System\u00a0in October 2019, the MIT Framework is grounded in the conviction that openly sharing research and educational materials is key to the Institute\u2019s mission of advancing knowledge and bringing that knowledge to bear on the world\u2019s greatest challenges. It affirms the overarching principle that control of scholarship and its dissemination should reside with scholars and their institutions, and aims to ensure that scholarly research outputs are openly and equitably available to the broadest possible audience, while also providing valued services to the MIT community.\n \u201cI am disappointed that we were not able to reach a contract with Elsevier that honors the principles of the MIT Framework, but I am proud knowing that the MIT community \u2014 as well as hundreds of colleagues across the country \u2014 stand by the importance of these principles for advancing the public good and the progress of science,\u201d said Chris Bourg, director of the MIT Libraries. \u201cIn the face of these unprecedented global challenges, equitable and open access to knowledge is more critical than ever.\u201d\n More than 100 institutions, ranging from multi-institution consortia to large research universities to liberal arts colleges, decided to endorse the MIT Framework in recognition of its potential to advance open scholarship and the public good.\n \u201cWe&#39;ve seen widespread support in all quarters of the MIT community \u2014 faculty, students, postdocs, and staff alike \u2014 for the core grounding of the framework: that the value in published scholarship originates in our work and in the institutions that support us,\u201d says Roger Levy, associate professor in the Department of Brain and Cognitive Sciences and chair of the Committee on the Library System (CLS). \u201cCLS was unanimous in its recommendation to end negotiations. We are publicly committed to supporting the rights of MIT community members to freely share the scholarship we create, and stand by the principles articulated in the MIT Framework in our recommendation.\u201d\n \u201cWe hope to be able to resume productive negotiations if and when Elsevier is able to provide a contract that reflects our community\u2019s needs and values and advances MIT\u2019s mission,\u201d said Bourg. \u201cIn the meantime, we will continue to use the framework to pursue new paths to achieving open access to knowledge. The groundbreaking agreement we reached with the\u00a0 Association for Computing Machinery\u00a0in collaboration with the University of California, Carnegie Mellon University, and Iowa State University is one such example of building the business models of the future.\u201d\n MIT has long been a leader in open access. Adopted in 2009, the\u00a0 MIT Faculty Open Access Policy\u00a0was one of the first and most far-reaching initiatives of its kind in the United States. Forty-seven percent of faculty journal articles published since the adoption of the policy are freely available to the world. In 2017, the Institute announced a\u00a0 new policy\u00a0under which all MIT authors \u2014 including students, postdocs, and staff \u2014 can opt in to an open access license. The Ad Hoc Task Force on Open Access to MIT\u2019s Research, first convened by Provost Martin Schmidt in 2017,\u00a0 released its final recommendations\u00a0in October 2019. An implementation team, led by Bourg, is working to prioritize and enact the task force\u2019s recommendations, which range from policy to incentives to national and global advocacy.\n Information for the MIT community about access to Elsevier articles can be found on the  MIT Libraries\u2019 website.", "posttime": "2020-06-11 22:43:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ed3\u675f,ends,\u9ebb\u7701\u7406\u5de5\u5b66\u9662", "title": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7ed3\u675f\u7231\u601d\u552f\u5c14\u8c08\u5224", "title_en": "MIT Ends Elsevier Negotiations", "transed": 1, "url": "https://news.mit.edu/2020/guided-by-open-access-principles-mit-ends-elsevier-negotiations-0611", "via": "", "real_tags": ["\u7ed3\u675f", "ends", "\u9ebb\u7701\u7406\u5de5\u5b66\u9662"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006136, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Pyinfra\u4ee5\u8d85\u5feb\u7684\u901f\u5ea6\u5b9e\u73b0\u5927\u89c4\u6a21\u7684\u57fa\u7840\u8bbe\u65bd\u81ea\u52a8\u5316\u3002\u5b83\u53ef\u7528\u4e8e\u4e34\u65f6\u547d\u4ee4\u6267\u884c\u3001\u670d\u52a1\u90e8\u7f72\u3001\u914d\u7f6e\u7ba1\u7406\u7b49\u3002\u6838\u5fc3\u8bbe\u8ba1\u529f\u80fd\u5305\u62ec\uff1a\n\u9519\u8bef\u65f6\u4f7f\u7528\u6807\u51c6\u8f93\u51fa+\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u8fdb\u884c\ud83d\udea8\u5373\u65f6\u8c03\u8bd5\uff0c\u5e76\u4f7f\u7528-v\u5c06\u5176\u59cb\u7ec8\u6253\u5370\u51fa\u6765\u3002\n#\u6267\u884c\u4efb\u610fshell\u547d\u4ee4pyinfra my-server.net exec--echo&#34\uff1bhello world&#34\uff1b#\u5982\u679c\u4e0d\u5b58\u5728pyinfra my-server.net apt.Packages iftop sudo=true\uff0c\u8bf7\u5b89\u88c5iftop apt\u5305", "note_en": "pyinfra automates infrastructure super fast at massive scale. It can be used for ad-hoc command execution, service deployment, configuration management and more. Core design features include:\n  \ud83d\udea8  Instant debugging with stdout + stderr output on error, and  -v to print it always.\n             # Execute an abitrary shell commandpyinfra my-server.net  exec --  echo  &#34;hello world&#34; # Install iftop apt package if not presentpyinfra my-server.net apt.packages iftop  sudo = true", "posttime": "2020-06-11 22:08:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u7840\u67b6\u6784,automate,pyinfra", "title": "Pyinfra-\u5927\u89c4\u6a21\u5b9e\u73b0\u57fa\u7840\u67b6\u6784\u8d85\u5feb\u81ea\u52a8\u5316", "title_en": "Pyinfra \u2013 automate infrastructure super fast at scale", "transed": 1, "url": "https://pyinfra.com", "via": "", "real_tags": ["\u57fa\u7840\u67b6\u6784", "automate", "pyinfra"]}]