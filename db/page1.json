[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1008662, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6240\u4ee5\u6211\u4e2a\u4eba\u53ef\u4ee5\u5bf9\u6b64\u53d1\u8868\u610f\u89c1\u3002\u6211\u5bf9\u8fd9\u6b3e\u5e94\u7528\u8fdb\u884c\u4e86\u53cd\u5411\u5de5\u7a0b\uff0c\u5e76\u81ea\u4fe1\u5730\u8868\u793a\uff0c\u6211\u5bf9\u8fd9\u6b3e\u5e94\u7528\u7684\u64cd\u4f5c\u65b9\u5f0f(\u6216\u8005\u81f3\u5c11\u51e0\u4e2a\u6708\u524d\u7684\u64cd\u4f5c\u65b9\u5f0f)\u6709\u975e\u5e38\u6df1\u523b\u7684\u7406\u89e3\u3002\nTikTok\u662f\u4e00\u9879\u51e0\u4e4e\u4e0d\u52a0\u63a9\u9970\u7684\u793e\u4ea4\u7f51\u7edc\u6570\u636e\u6536\u96c6\u670d\u52a1\u3002\u5982\u679c\u6709API\u53ef\u4ee5\u83b7\u53d6\u6709\u5173\u60a8\u3001\u60a8\u7684\u8054\u7cfb\u4eba\u6216\u60a8\u7684\u8bbe\u5907\u7684\u4fe1\u606f.\u3002\u55ef\uff0c\u4ed6\u4eec\u6b63\u5728\u7528\u5b83\u3002\n\u7535\u8bdd\u786c\u4ef6(CPU\u7c7b\u578b\u3001\u8bfe\u7a0b\u6570\u91cf\u3001\u786c\u4ef6ID\u3001\u5c4f\u5e55\u5c3a\u5bf8\u3001dpi\u3001\u5185\u5b58\u4f7f\u7528\u91cf\u3001\u78c1\u76d8\u7a7a\u95f4\u7b49)\u3002\n\u4f60\u5b89\u88c5\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f(\u6211\u751a\u81f3\u770b\u5230\u8fc7\u4e00\u4e9b\u6211\u5df2\u7ecf\u5220\u9664\u7684\u5e94\u7528\u7a0b\u5e8f\u51fa\u73b0\u5728\u5b83\u4eec\u7684\u5206\u6790\u8d1f\u8f7d\u4e2d--\u53ef\u80fd\u4f1a\u7528\u4f5c\u7f13\u5b58\u503c\uff1f)\u3002\n\u8fd9\u6b3e\u5e94\u7528\u7684\u4e00\u4e9b\u53d8\u79cd\u5f53\u65f6\u542f\u7528\u4e86GPS ping\uff0c\u5927\u7ea6\u6bcf30\u79d2\u4e00\u6b21-\u5982\u679c\u60a8\u66fe\u7ecf\u5bf9\u5e16\u5b50IIRC\u8fdb\u884c\u4f4d\u7f6e\u6807\u8bb0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u542f\u7528\u8fd9\u4e00\u529f\u80fd\u3002\n\u4ed6\u4eec\u5728\u60a8\u7684\u8bbe\u5907\u4e0a\u8bbe\u7f6e\u4e86\u7528\u4e8e\u8f6c\u7801\u5a92\u4f53\u7684\u672c\u5730\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4f46\u8fd9\u5f88\u5bb9\u6613\u88ab\u6ee5\u7528\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u8eab\u4efd\u9a8c\u8bc1\u3002\n\u6240\u6709\u8fd9\u4e9b\u4e2d\u6700\u53ef\u6015\u7684\u90e8\u5206\u662f\uff0c\u4ed6\u4eec\u6b63\u5728\u505a\u7684\u5f88\u591a\u65e5\u5fd7\u8bb0\u5f55\u90fd\u662f\u53ef\u4ee5\u8fdc\u7a0b\u914d\u7f6e\u7684\uff0c\u9664\u975e\u60a8\u53cd\u8f6c\u4ed6\u4eec\u7684\u6bcf\u4e00\u4e2a\u672c\u5730\u5e93(\u9605\u8bfb\u6240\u6709\u7a0b\u5e8f\u96c6\u90fd\u5f88\u6709\u8da3\uff0c\u5047\u8bbe\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ed6\u4eec\u5b9a\u5236\u7684OLLVM\u5206\u652f\uff01)\u3002\u5e76\u4e14\u624b\u52a8\u68c0\u67e5\u6bcf\u4e2a\u5355\u72ec\u7684\u6a21\u7cca\u51fd\u6570\u3002\u4ed6\u4eec\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u4fdd\u62a4\u63aa\u65bd\uff0c\u53ef\u4ee5\u9632\u6b62\u4f60\u9006\u8f6c\u6216\u8c03\u8bd5\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u4f60\u6b63\u5728\u8bd5\u56fe\u5f04\u6e05\u695a\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a\u4f1a\u7565\u6709\u6539\u53d8\u3002\u5728Android\u7248\u672c\u4e0a\u4e5f\u6709\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\uff0c\u5141\u8bb8\u4e0b\u8f7d\u8fdc\u7a0bzip\u6587\u4ef6\u3001\u89e3\u538b\u7f29\u548c\u6267\u884c\u6240\u8ff0\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u6ca1\u6709\u7406\u7531\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u4f1a\u5408\u6cd5\u5730\u9700\u8981\u6b64\u529f\u80fd\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u4ed6\u4eec\u4f7f\u7528HTTPS\u7684\u65f6\u95f4\u751a\u81f3\u6700\u957f\u3002\u4ed6\u4eec\u5728HTTP rest API\u4e2d\u6cc4\u9732\u4e86\u7528\u6237\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u4ee5\u53ca\u7528\u4e8e\u5bc6\u7801\u91cd\u7f6e\u7684\u6b21\u8981\u7535\u5b50\u90ae\u4ef6\u3002\u4e0d\u8981\u5fd8\u8bb0\u7528\u6237\u7684\u771f\u5b9e\u59d3\u540d\u548c\u751f\u65e5\u3002\u51e0\u4e2a\u6708\u524d\uff0c\u5982\u679c\u4f60\u4e0b\u8f7d\u4e86\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u5c31\u53ef\u4ee5\u5168\u90e8\u516c\u5f00\u67e5\u770b\u4e86\u3002\n\u4ed6\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u75c5\u6bd2\u5f0f\u7684\u4f53\u9a8c\uff0c\u4ee5\u5438\u5f15\u4ed6\u4eec\u7559\u5728\u5e73\u53f0\u4e0a\u3002\u4f60\u7684\u7b2c\u4e00\u4e2aTikTok\u5e16\u5b50\u53ef\u80fd\u4f1a\u83b7\u5f97\u76f8\u5f53\u591a\u7684\u8d5e\uff0c\u65e0\u8bba\u5b83\u6709\u591a\u597d\u3002\u5047\u8bbe\u4f60\u901a\u8fc7\u4e86\u6700\u521d\u7684\u5ba1\u6838\u961f\u5217\uff0c\u5982\u679c\u8fd9\u8fd8\u662f\u4e00\u4ef6\u4e8b\u7684\u8bdd\u3002\u5927\u591a\u6570\u7528\u6237\u6700\u7ec8\u90fd\u4f1a\u8ffd\u9010\u8fd9\u6761\u9f99\u3002\u54e6\uff0c\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u8fd8\u6709\u4e00\u5927\u5806\u53ef\u4ee5\u76f4\u63a5\u63a5\u89e6\u5230\u5b69\u5b50\u4eec\u7684\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u8001\u4eba\uff0c\u6211\u4eb2\u773c\u770b\u5230(\u5e76\u62a5\u544a)\u4e86\u4e00\u4e9b\u975e\u5e38\u53ef\u7591\u7684\u4e1c\u897f\u300240-50\u5c81\u7684\u7537\u6027\u8ba98-10\u5c81\u7684\u5973\u5b69\u4e0e\u4ed6\u4eec\u4e00\u8d77\u5531\u5e26\u6709\u6027\u6697\u793a\u7684\u6b4c\u66f2\u8fdb\u884c\u4e8c\u91cd\u5531\u3002\u8fd9\u4e9b\u89c6\u9891\u90fd\u662f\u516c\u5f00\u53d1\u5e03\u7684\u3002TikTok\u5177\u6709\u76f4\u63a5\u6d88\u606f\u4f20\u9012\u529f\u80fd\u3002\n\u4e0d\u8fc7\uff0c\u4e8b\u60c5\u662f\u8fd9\u6837\u7684..\u3002\u4ed6\u4eec\u4e0d\u60f3\u8ba9\u4f60\u77e5\u9053\u4ed6\u4eec\u6536\u96c6\u4e86\u591a\u5c11\u5173\u4e8e\u4f60\u7684\u4fe1\u606f\uff0c\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u96c6\u4e2d\u5728\u4e00\u4e2a\u5730\u65b9\u7684\u5b89\u5168\u5f71\u54cd\u662f\u4ed6\u5988\u7684\u5de8\u5927\u7684\u3002\u4ed6\u4eec\u7528\u4e00\u79cd\u7b97\u6cd5\u52a0\u5bc6\u6240\u6709\u7684\u5206\u6790\u8bf7\u6c42\uff0c\u8be5\u7b97\u6cd5\u4f1a\u968f\u7740\u6bcf\u6b21\u66f4\u65b0\u800c\u6539\u53d8(\u81f3\u5c11\u5bc6\u94a5\u4f1a\u6539\u53d8)\uff0c\u8fd9\u6837\u4f60\u5c31\u770b\u4e0d\u5230\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\u4e86\u3002\u4ed6\u4eec\u8fd8\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u5982\u679c\u4f60\u5728DNS\u7ea7\u522b\u963b\u6b62\u4e0e\u4ed6\u4eec\u7684\u5206\u6790\u4e3b\u673a\u7684\u901a\u4fe1\uff0c\u4f60\u5c31\u6839\u672c\u65e0\u6cd5\u4f7f\u7528\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u3002\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6211\u5df2\u7ecf\u9006\u8f6c\u4e86Instagram\u3001Facebook\u3001Reddit\u548cTwitter\u5e94\u7528\u7a0b\u5e8f\u3002\u4ed6\u4eec\u6536\u96c6\u7684\u6570\u636e\u91cf\u4e0eTikTok\u76f8\u53bb\u751a\u8fdc\uff0c\u800c\u4e14\u4ed6\u4eec\u80af\u5b9a\u4e0d\u4f1a\u50cfTikTok\u90a3\u6837\u76f4\u63a5\u8bd5\u56fe\u9690\u85cf\u53d1\u9001\u7684\u5185\u5bb9\u3002\u8fd9\u5c31\u50cf\u628a\u4e00\u676f\u6c34\u6bd4\u4f5c\u6d77\u6d0b--\u5b83\u4eec\u6839\u672c\u65e0\u6cd5\u6bd4\u8f83\u3002\n\u6211\u662f\u4e00\u4e2a\u77e5\u9053\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u5de5\u4f5c\u7684\u4e66\u5446\u5b50\u3002\u79f0\u5176\u4e3a\u5e7f\u544a\u5e73\u53f0\u662f\u4e00\u79cd\u8f7b\u63cf\u6de1\u5199\u7684\u8bf4\u6cd5\u3002TikTok\u672c\u8d28\u4e0a\u662f\u9488\u5bf9\u513f\u7ae5\u7684\u6076\u610f\u8f6f\u4ef6\u3002\u4e0d\u8981\u4f7f\u7528TikTok\u3002\u4e0d\u8981\u8ba9\u4f60\u7684\u670b\u53cb\u548c\u5bb6\u4eba\u4f7f\u7528\u5b83\u3002\n\u7f16\u8f91\uff1a\u8fd9\u592a\u5938\u5f20\u4e86--\u62b1\u6b49\u6253\u9519\u4e86\uff0c\u6211\u5f88\u5feb\u5c31\u5199\u597d\u4e86\u8fd9\u6761\u8bc4\u8bba\u3002\u6211\u611f\u8c22\u91d1\u724c/\u5956\u52b1/\u7b49\u4eba\uff0c\u4f46\u8001\u5b9e\u8bf4\uff0c\u6211\u53ea\u662f\u5f88\u9ad8\u5174\u6211\u7ec8\u4e8e\u80fd\u591f\u628a\u8fd9\u4e9b\u4fe1\u606f\u653e\u5728\u4eba\u4eec\u9762\u524d(\u5373\u4f7f\u5b83\u53ef\u80fd\u4f1a\u8fc7\u65f6\u51e0\u4e2a\u6708)\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u540d\u5b89\u5168\u7814\u7a76\u5458\uff0c\u60f3\u770b\u770b\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u65b0\u7248\u672c\uff0c\u7ed9\u6211\u53d1\u4e2aPM\uff0c\u6211\u4f1a\u7ed9\u4f60\u6240\u6709\u7684\u4fe1\u606f\uff0c\u4f5c\u4e3a\u4f60\u505a\u4e8b\u60c5\u7684\u8df3\u8dc3\u70b9\u3002\n\u7f16\u8f913\uff1a\u66f4\u65b0\u4e86Penetrum\u94fe\u63a5\u5e76\u6dfb\u52a0\u4e86Zimperium\u7684\u62a5\u544a(\u9700\u8981\u60a8\u624b\u52a8\u7533\u8bf7)\u3002\n\u4e0a\u8ff0Penetrum\u94fe\u63a5\u4f3c\u4e4e\u5df2\u6d88\u5931\u3002\u5176\u4ed6\u4eba\u5728\u8fd9\u91cc\u94fe\u63a5\u4e86\u8fd9\u4efd\u62a5\u7eb8\uff1ahttps://penetrum.com/research", "note_en": "So I can personally weigh in on this. I reverse-engineered the app, and feel confident in stating that I have a very strong understanding for how the app operates (or at least operated as of a few months ago).\n TikTok is a data collection service that is thinly-veiled as a social network. If there is an API to get information on you, your contacts, or your device... well, they&#39;re using it.\n Phone hardware (cpu type, number of course, hardware ids, screen dimensions, dpi, memory usage, disk space, etc)\n Other apps you have installed (I&#39;ve even seen some I&#39;ve deleted show up in their analytics payload - maybe using as cached value?)\n   Some variants of the app had GPS pinging enabled at the time, roughly once every 30 seconds - this is enabled by default if you ever location-tag a post IIRC\n They set up a local proxy server on your device for &#34;transcoding media&#34;, but that can be abused very easily as it has zero authentication\n The scariest part of all of this is that much of the logging they&#39;re doing is remotely configurable, and unless you reverse every single one of their native libraries (have fun reading all of that assembly, assuming you can get past their customized fork of OLLVM!!!) and manually inspect every single obfuscated function. They have several different protections in place to prevent you from reversing or debugging the app as well. App behavior changes slightly if they know you&#39;re trying to figure out what they&#39;re doing. There&#39;s also a few snippets of code on the Android version that allows for the downloading of a remote zip file, unzipping it, and executing said binary. There is zero reason a mobile app would need this functionality legitimately.\n On top of all of the above, they weren&#39;t even using HTTPS for the longest time. They leaked users&#39; email addresses in their HTTP REST API, as well as their secondary emails used for password resets. Don&#39;t forget about users&#39; real names and birthdays, too. It was allllll publicly viewable a few months ago if you MITM&#39;d the application.\n They provide users with a taste of &#34;virality&#34; to entice them to stay on the platform. Your first TikTok post will likely garner quite a bit of likes, regardless of how good it is.. assuming you get past the initial moderation queue if thats still a thing. Most users end up chasing the dragon. Oh, there&#39;s also a ton of creepy old men who have direct access to children on the app, and I&#39;ve personally seen (and reported) some really suspect stuff. 40-50 year old men getting 8-10 year old girls to do &#34;duets&#34; with them with sexually suggestive songs. Those videos are posted publicly. TikTok has direct messaging functionality.\n Here&#39;s the thing though.. they don&#39;t want you to know how much information they&#39;re collecting on you, and the security implications of all of that data in one place, en masse, are fucking huge. They encrypt all of the analytics requests with an algorithm that changes with every update (at the very least the keys change) just so you can&#39;t see what they&#39;re doing. They also made it so you cannot use the app at all if you block communication to their analytics host off at the DNS-level.\n For what it&#39;s worth I&#39;ve reversed the Instagram, Facebook, Reddit, and Twitter apps. They don&#39;t collect anywhere near the same amount of data that TikTok does, and they sure as hell aren&#39;t outright trying to hide exactly whats being sent like TikTok is. It&#39;s like comparing a cup of water to the ocean - they just don&#39;t compare.\n tl;dr; I&#39;m a nerd who figures out how apps work for a job. Calling it an advertising platform is an understatement. TikTok is essentially malware that is targeting children. Don&#39;t use TikTok. Don&#39;t let your friends and family use it.\n  Edit: Well this blew up - sorry for the typos, I wrote this comment pretty quick. I appreciate the gold/rewards/etc people, but I&#39;m honestly just glad I&#39;m finally able to put this information in front of people (even if it may outdated by a few months).\n If you&#39;re a security researcher and want to take a look at the most recent versions of the app, send me a PM and I&#39;ll give you all of the information I have as a jumping point for you to do your thing.\n      Edit 3: Updated the Penetrum link + added Zimperium&#39;s report (requires you request it manually)\n The above Penetrum link appears to be gone. Someone else linked the paper here:  https://penetrum.com/research", "posttime": "2020-06-28 06:18:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "tiktiok,tbh,\u5e94\u7528\u7a0b\u5e8f", "title": "\u4e0d\u662f\u4ec0\u4e48\u65b0\u95fb\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709tiktiok\uff0c\u5c31\u628a\u5b83\u6254\u6389\u5427-\u89c6\u9891", "title_en": "Not new news, but tbh if you have tiktiok, just get rid of it \u2013 videos", "transed": 1, "url": "https://www.reddit.com/r/videos/comments/fxgi06/comment/fmuko1m", "via": "", "real_tags": ["tiktiok", "tbh", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "c0bcf38219fa264109efcdab190a1347.png", "infoid": 1008661, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u516c\u53f8\u5468\u4e09\u63a8\u51fa\u4e86\u4e9a\u9a6c\u900aHoneycode\uff0c\u8fd9\u662f\u4e00\u9879\u5b8c\u5168\u6258\u7ba1\u7684\u670d\u52a1\uff0c\u4f7f\u516c\u53f8\u80fd\u591f\u5728\u4e0d\u8fdb\u884c\u4efb\u4f55\u7f16\u7a0b\u7684\u60c5\u51b5\u4e0b\u6784\u5efa\u79fb\u52a8\u548c\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u3002\u5ba2\u6237\u53ef\u4ee5\u4f7f\u7528\u8be5\u670d\u52a1\u6784\u5efa\u5229\u7528AWS\u6784\u5efa\u7684\u6570\u636e\u5e93\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f8b\u5982\u7b80\u5355\u7684\u4efb\u52a1\u8ddf\u8e2a\u5e94\u7528\u7a0b\u5e8f\u6216\u66f4\u590d\u6742\u7684\u9879\u76ee\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u6765\u7ba1\u7406\u591a\u4e2a\u5de5\u4f5c\u6d41\u3002\nAWS\u526f\u603b\u88c1\u62c9\u91cc\u00b7\u5965\u53e4\u65af\u4e01\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff0c\u5ba2\u6237\u544a\u8bc9\u6211\u4eec\uff0c\u5b9a\u5236\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u6c42\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u5f00\u53d1\u4eba\u5458\u521b\u5efa\u5b83\u4eec\u7684\u80fd\u529b\u3002\n\u8fd1\u5e74\u6765\uff0c\u4f4e\u4ee3\u7801\u578b\u548c\u65e0\u4ee3\u7801\u578b\u5de5\u5177\u8d8a\u6765\u8d8a\u6d41\u884c\uff0c\u8fd9\u4f7f\u5f97\u51e0\u4e4e\u6ca1\u6709\u7f16\u7801\u7ecf\u9a8c\u7684\u4eba\u80fd\u591f\u6784\u5efa\u4ed6\u4eec\u9700\u8981\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5176\u4ed6\u4e3b\u8981\u7684\u4e91\u516c\u53f8\uff0c\u5982Salesforce\uff0c\u63d0\u4f9b\u4f4e\u4ee3\u7801\u7684\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u5668\u3002\u5728\u65b0\u51a0\u80ba\u708e\u5927\u6d41\u884c\u671f\u95f4\uff0cIT\u56e2\u961f\u6349\u895f\u89c1\u8098\uff0c\u4f4e\u7801\u5de5\u5177\u53ef\u4ee5\u8bc1\u660e\u7279\u522b\u6709\u7528\u3002\nAmazon Honeycode\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u719f\u6089\u7684\u7535\u5b50\u8868\u683c\u754c\u9762\uff0c\u7528\u4e8e\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u3002\u7528\u6237\u53ef\u4ee5\u4ece\u9884\u5148\u6784\u5efa\u7684\u6a21\u677f\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u4ee5\u5b9e\u73b0\u8bf8\u5982\u4f11\u5047\u62a5\u544a\u6216\u5e93\u5b58\u7ba1\u7406\u7b49\u529f\u80fd\u3002\u6216\u8005\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u5bfc\u5165\u7a7a\u767d\u5de5\u4f5c\u7c3f\uff0c\u4f7f\u7528\u754c\u9762\u5b9a\u4e49\u6570\u636e\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u5217\u8868\u3001\u6309\u94ae\u548c\u8f93\u5165\u5b57\u6bb5\u7b49\u5bf9\u8c61\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\u5c4f\u5e55\u3002\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u81ea\u52a8\u5316\u529f\u80fd\uff0c\u4ee5\u57fa\u4e8e\u6761\u4ef6\u9a71\u52a8\u901a\u77e5\u3001\u63d0\u9192\u3001\u5ba1\u6279\u6216\u5176\u4ed6\u64cd\u4f5c\u3002\n\u5728\u5e55\u540e\uff0c\u8be5\u670d\u52a1\u81ea\u52a8\u5316\u4e86\u6784\u5efa\u548c\u94fe\u63a5\u4e09\u4e2a\u5e38\u89c1\u529f\u80fd\u5c42--\u6570\u636e\u5e93\u3001\u4e1a\u52a1\u903b\u8f91\u548c\u7528\u6237\u754c\u9762--\u7684\u8fc7\u7a0b\u3002\u5f53\u5e95\u5c42\u6570\u636e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u7531Honeycode\u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b9e\u65f6\u66f4\u65b0\u89c6\u56fe\u548c\u4eea\u8868\u677f\u3002\n\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u540e\uff0c\u5ba2\u6237\u53ef\u4ee5\u5355\u51fb\u6309\u94ae\u4e0e\u56e2\u961f\u6210\u5458\u5171\u4eab\u8be5\u5e94\u7528\u7a0b\u5e8f\u3002AWS\u5c06\u5141\u8bb8\u7528\u6237\u4e0e\u6700\u591a20\u4e2a\u7528\u6237\u514d\u8d39\u5171\u4eab\u5e94\u7528\u7a0b\u5e8f\u3002\n\u4e9a\u9a6c\u900a\u7ed9\u51fa\u4e86\u51e0\u4e2a\u7528\u6237\u5982\u4f55\u90e8\u7f72\u8fd9\u9879\u670d\u52a1\u7684\u4f8b\u5b50\u3002\u4f8b\u5982\uff0c\u5ba2\u6237\u53ef\u4ee5\u6784\u5efa\u7528\u4e8e\u5ba2\u6237\u5173\u7cfb\u7ba1\u7406\u3001\u5f85\u529e\u4e8b\u9879\u5217\u8868\u3001\u5e93\u5b58\u8ddf\u8e2a\u6216\u4e8b\u4ef6\u5b89\u6392\u7684\u5e94\u7528\u7a0b\u5e8f\u3002", "note_en": "Amazon Web Services on Wednesday  launched Amazon Honeycode, a fully-managed service that enables companies to build mobile and web applications without any programming. Customers can use the service to build apps that leverage an   AWS-built database, such as a simple task-tracking application or a more complex project management app to manage multiple workflows.\n    &#34;Customers have told us that the need for custom applications far outstrips the capacity of developers to create them,&#34; AWS VP Larry Augustin said in a statement.\n Low-code and no-code tools have been growing in popularity in recent years, enabling people with little or no coding experience to be able to build the applications they need. Other major cloud companies like Salesforce  offer low-code app builders. With IT teams stretched thin during the COVID-19 pandemic,  low-code tools can prove particularly useful.\n Amazon Honeycode presents users with a familiar spreadsheet interface for building applications. Users can choose from pre-built templates for functions like time-off reporting or inventory management. Alternatively, they can import data into a blank workbook, use the interface to define the data model, and then design application screens with objects like lists, buttons, and input fields. They can also add automations to drive notifications, reminders, approvals, or other actions based on conditions.\n Behind the scenes, the service automates the process of building and linking three common tiers of functionality -- database, business logic, and user interface. As underlying data changes, a Honeycode-built app can update views and dashboards in real-time.\n   Once the application is built, customers can click a button to share it with team members. AWS will let users share applications with up to 20 users for free.\n Amazon gives several examples of how users could deploy the service. Customers could, for instance, build apps for customer relationship management, to-do lists, inventory tracking, or event scheduling.", "posttime": "2020-06-28 05:37:58", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "amazon,\u4ee3\u7801,launches,\u6784\u5efa", "title": "AWS\u63a8\u51fa\u201cAmazon Honeycode\u201d--\u4e00\u9879\u65e0\u4ee3\u7801\u5e94\u7528\u6784\u5efa\u670d\u52a1", "title_en": "AWS Launches 'Amazon Honeycode', a No-Code App Building Service", "transed": 1, "url": "https://www.zdnet.com/article/aws-launches-honeycode-a-no-code-app-building-service/", "via": "", "real_tags": ["amazon", "\u4ee3\u7801", "launches", "\u6784\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008660, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u91cc\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5c06\u6e38\u620f\u7684\u9ed1\u8272\u80cc\u666f\u66ff\u6362\u4e3a16\u79cd\u57fa\u672c\u989c\u8272\u7684\u6e10\u53d8\uff1a\n\u90a3\u4e48\uff0c0x5f70\u5730\u5740\u5728\u6b64\u6a21\u5f0f\u4e0b\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u73b0\u5728\uff0c\u6bcf\u4e2a\u4f4d\u786e\u5b9a\u8be5\u7279\u5b9a\u884c\u5c06\u4f7f\u7528\u76f8\u5e94\u76840x5f6n\u989c\u8272\u8fd8\u662f0x5f6n+1\u3002\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u5c06\u4ea7\u751f\u4ee5\u4e0b\u6548\u679c\uff1a\n\u4e4d\u4e00\u770b\uff0c\u8fd9\u4f3c\u4e4e\u6709\u70b9\u4e0d\u8d77\u773c\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u60a8\u53ef\u4ee5\u81ea\u7531\u4f7f\u7528\u6b64\u6e10\u53d8\u4e2d\u768432\u79cd\u989c\u8272\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u60a8\u5f53\u524d\u5728\u5c4f\u5e55\u4e0a\u4f7f\u7528\u7684\u989c\u8272\u3002\u4f8b\u5982\uff0c\u8fd9\u53ef\u4ee5\u7528\u6765\u4e3a\u5e73\u53f0\u80cc\u666f\u6216\u886c\u57ab\u4e2d\u7684\u80cc\u666f\u6548\u679c\u6dfb\u52a0\u989c\u8272\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5feb\u901f\u793a\u4f8b\uff1a\n\u5982\u679c\u4f60\u4ed4\u7ec6\u770b\uff0c\u8fd9\u6b3e\u6e38\u620f\u5728\u524d\u666f\u548cUI\u4e2d\u4f7f\u7528\u4e86\u9664\u4e86\u989c\u8272#12(\u6d45\u84dd\u8272)\u4e4b\u5916\u7684\u6240\u670915\u79cd\u989c\u8272\u3002\u6d45\u84dd\u8272\u7528\u4e8e\u6e10\u53d8\uff0c\u4f7f\u7528\u5e38\u89c4\u989c\u82720\u30011\u300112\u30016\u548c7\u4ee5\u53ca\u4ea4\u66ff\u8c03\u8272\u677f\u4e2d\u76840x81\u548c0x8c(\u603b\u517118\u79cd\u989c\u8272)\u3002\u4e0b\u9762\u662f\u4f7f\u752821\u79cd\u989c\u8272\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\uff1a\n\u4ee5\u4e0b\u662f\u6b64\u6e10\u53d8\u7684\u4ee3\u7801\u3002\u53ea\u9700\u5c06\u989c\u8272\u6362\u6210\u60a8\u559c\u6b22\u7684\u4efb\u4f55\u989c\u8272\u5373\u53ef\uff1a)\u3002\nPoke(0x5f2c\uff0c0x40)--\u75280x3c\u4ea4\u63620x3n\uff0c\u5176\u4e2dn\u662f\u8981\u4ea4\u6362\u4e3a\u68af\u5ea6\u7684\u989c\u8272Poke(0x5f5f\uff0c0x3c)\uff0ci=0\uff0c15 do--\u5c06\u6e10\u53d8\u989c\u8272\u653e\u5728\u4e0b\u8868\u4e2d\uff1apoke(0x5f60+i\uff0c({[0]=0x82\uff0c0x82\uff0c0x84\uff0c0x84\uff0c4\uff0c4\uff0c0x89\uff0c0x89\uff0c0x8e\uff0c0x8e\uff0c0x8f\uff0c0x8f\uff0c15\uff0c15\uff0c0x87\uff0c0x87})[i])endfor i=0\uff0c15 do poke(0x5f70+i\uff0c0xaa)end", "note_en": "Here the black background of the game was swapped for a gradient of the 16 basic colors, using the code below:\n  So what does the 0x5f70 address do in this mode? Now each bit determines if that particular line will use the corresponding 0x5f6n color or 0x5f6n+1. Adding the code below will produce the following effect:\n   This might seem a bit unimpressive at first, but remember that you are free to use any of the 32 colors in this gradient, not only the ones you&#39;re using currently on the screen. This can be used to add colors to a platformer background or background effects in a shmup for instance. Here is a quick example:\n  If you look closely the game uses all 15 colors in the foreground and UI except for color #12 (light blue). The light blue is used for the gradient, using the regular colors 0, 1, 12, 6 and 7 and also 0x81 and 0x8c from the alternate palette (18 total colors). Here&#39;s another example using 21 colors:\n  Here is the code for this gradient. Just swap the colors for whatever you like :)\n poke(0x5f2c,0x40)--swap 0x3c for 0x3n where n is the color that will be swapped for the gradientpoke(0x5f5f,0x3c)for i=0,15 do --put the gradient colors in the table below: poke(0x5f60+i,({[0]=0x82,0x82,0x84,0x84,4,4,0x89,0x89,0x8e,0x8e,0x8f,0x8f,15,15,0x87,0x87})[i])endfor i=0,15 do poke(0x5f70+i,0xaa)end", "posttime": "2020-06-28 05:36:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "pico,\u989c\u8272", "title": "Pico-8\uff1a\u5728\u5c4f\u5e55\u4e0a\u542f\u752816\u79cd\u4ee5\u4e0a\u7684\u989c\u8272", "title_en": "Pico-8: Enabling more than 16 colors on the screen", "transed": 1, "url": "https://www.lexaloffle.com/bbs/?tid=38565", "via": "", "real_tags": ["pico", "\u989c\u8272"]}, {"category": "", "categoryclass": "", "imagename": "b6dbb75df26be975a672c19a7c7849f9.jpeg", "infoid": 1008659, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "24a2\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6e38\u620f\u5f15\u64ce\uff0c\u53ef\u4ee5\u8ba9\u60a8\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u6784\u5efa\u4e00\u6b3e\u6e38\u620f\u3002\u5b83\u7684\u529f\u80fd\u975e\u5e38\u6709\u9650\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5f88\u5bb9\u6613\u5b66\u4e60\uff0c\u5e76\u9f13\u52b1\u60a8\u521b\u9020\u6027\u5730\u89e3\u51b3\u95ee\u9898\u3002\n24a2\u6e38\u620f\u662f\u7528JavaScript(\u6216\u6253\u5b57)\u7f16\u5199\u7684\uff0c\u5e76\u5728Web\u6d4f\u89c8\u5668\u4e2d\u64ad\u653e\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5206\u4eab\u60a8\u521b\u5efa\u7684\u5185\u5bb9\u3002", "note_en": "24a2 is a simple game engine that lets you to build a game in a few hours. It has a very limited set of features which makes it easy to learn, and encourages you to solve problems creatively.\n 24a2 games are written in JavaScript (or TypeScript) and are played in a web browser, so you can easily share what you\u2019ve created.", "posttime": "2020-06-28 05:35:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,ultra", "title": "24a2\uff1a\u4e00\u4e2a\u8d85\u6781\u7b80\u6e38\u620f\u5f15\u64ce", "title_en": "24a2: An ultra-minimalist game engine", "transed": 1, "url": "https://github.com/jamesroutley/24a2", "via": "", "real_tags": ["\u6e38\u620f", "ultra"]}, {"category": "", "categoryclass": "", "imagename": "124dce30f8f54d8d8f0e19f8031f371c.jpg", "infoid": 1008658, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f6f\u76d8\u590d\u5236\u4fdd\u62a4\u65b9\u6848\u591a\u79cd\u591a\u6837\uff0c\u4e5f\u5f88\u6709\u8da3\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u667a\u529b\u6311\u6218\uff1a\u53ef\u4ee5\u521b\u9020\u4ec0\u4e48\u65b9\u6848\uff0c\u8ba9\u5bb6\u7528\u8ba1\u7b97\u673a\u53ef\u4ee5\u53ef\u9760\u5730\u8bfb\u53d6\u7ed9\u5b9a\u7684\u5149\u76d8\uff0c\u4f46\u4e0d\u80fd\u8f7b\u677e(\u6216\u6839\u672c\u4e0d\u80fd)\u4ee5\u76f8\u540c\u7684\u683c\u5f0f\u5199\u56de\u6570\u636e\uff1f\u5728\u8c08\u5230\u8f6f\u76d8\u590d\u5236\u4fdd\u62a4\u4ee3\u7801\u65f6\uff0c\u6211\u53d1\u73b0\u5c06\u4ee3\u7801\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u90e8\u5206\u5f88\u6709\u7528\uff1a\n\u52a0\u8f7d\u5668\u4ee3\u7801\u6df7\u6dc6\u4e86\u76d8\u4e2d\u6bd4\u7279\u548c\u6e38\u620f\u4ee3\u7801\u7684\u68c0\u67e5\uff0c\u4f7f\u5f97\u68c0\u67e5\u96be\u4ee5\u4fee\u8865\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u4e0e\u524d\u8005\u6709\u5173\uff1a\u78c1\u76d8\u4e0a\u7684\u6bd4\u7279\u3002\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u5149\u76d8\u65b9\u6848\u5305\u62ec\u6240\u8c13\u7684\u87ba\u7eb9\u76d8\u4fdd\u62a4\u65b9\u6848\u548c\u5730\u4e0b\u57ce\u5927\u5e08\u4e3aAtari ST\u4f7f\u7528\u7684\u6a21\u7cca\u6bd4\u7279\u65b9\u6848\uff0c\u6b63\u5982\u672c\u6587\u4e2d\u975e\u5e38\u8be6\u7ec6\u5730\u89e3\u91ca\u7684\u90a3\u6837\u3002\u6211\u4e5f\u63a8\u8350\u8fd9\u4e2aCommodore 64\u5149\u76d8\u4fdd\u62a4\u65b9\u6848\u7684\u5f88\u597d\u7684\u6982\u8ff0\u3002\u4e3a\u4e86\u6148\u5584\u8d77\u89c1\uff0c\u6d77\u519b\u51c6\u5c0664\u53f7\u6709\u4e00\u4e2a\u2026\u2026\u3002&#34\uff1b\u53e4\u602a\u7684\u5149\u76d8\u9a71\u52a8\u5668\u8bbe\u7f6e\u3002\n\u6211\u6700\u8fd1\u5728\u4e00\u5f20BBC\u5fae\u578b\u5149\u76d8\u4e0a\u9047\u5230\u4e86\u4e00\u79cd\u5149\u76d8\u65b9\u6848\uff0c\u5b83\u6bd4\u6211\u9884\u671f\u7684\u8981\u590d\u6742\u5f97\u591a\uff1a\u5f31\u6bd4\u7279\u3002\u5f31\u4f4d\u548c\u7c7b\u4f3c\u7684\u65b9\u6848\u572816\u4f4d\u65f6\u4ee3\u5f88\u53d7\u6b22\u8fce\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u6709\u4e868\u4f4d\u65f6\u4ee3\u7684\u5f31\u4f4d\u548c\u7c7b\u4f3c\u65b9\u6848\u3002\n\u8f6f\u76d8\u9a71\u52a8\u5668\u548c\u63a7\u5236\u5668\u53ef\u80fd\u6bd4\u60a8\u60f3\u8c61\u7684\u8981\u7b80\u5355\u3002\u8f6f\u76d8\u9a71\u52a8\u5668\u7684\u5de5\u4f5c\u662f\u83b7\u53d6\u76d8\u8868\u9762\u4e0a\u7684\u6a21\u62df\u78c1\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u6210\u4e00\u7cfb\u5217\u6570\u5b57\u8109\u51b2\u3002\u8f6f\u76d8\u63a7\u5236\u5668\u7684\u5de5\u4f5c\u662f\u83b7\u53d6\u4e00\u7cfb\u5217\u6570\u5b57\u8109\u51b2\uff0c\u8bc6\u522b\u65f6\u5e8f\uff0c\u5e76\u751f\u6210\u6570\u636e\u5b57\u8282\u4e32\u3002\u8f6f\u76d8\u63a7\u5236\u5668\u901a\u5e38\u8fd8\u8d1f\u8d23\u53d1\u73b0\u8109\u51b2\u6d41\u4e2d\u7684\u7279\u6b8a\u6807\u8bb0\u5b57\u8282\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u8bc6\u522b\u4e0d\u540c\u7684\u6247\u533a\u3002\n\u84dd\u7ebf\u4e2d\u7684\u6bcf\u4e2a\u5cf0\u503c\u90fd\u662f\u9a71\u52a8\u5934\u611f\u6d4b\u78c1\u76d8\u8868\u9762\u4e0a\u7684\u78c1\u901a\u53cd\u8f6c\u3002\u4e0a\u5cf0\u548c\u4e0b\u5cf0\u88ab\u540c\u7b49\u5bf9\u5f85\uff0c\u5e76\u5bfc\u81f4\u6570\u5b57\u8109\u51b2\u88ab\u53d1\u9001\u5230\u76d8\u63a7\u5236\u5668\uff0c\u8be5\u6570\u5b57\u8109\u51b2\u662f\u9ec4\u7ebf\u3002\n\u8bf7\u6ce8\u610f\uff0cOmniFlop\u3001KryoFlux\u6216GreseWeazle\u7b49\u5de5\u5177\u53ef\u80fd\u5076\u5c14\u4f1a\u5f15\u7528\u539f\u59cb\u901a\u91cf\u8bfb\u53d6\u6216\u8f6c\u50a8\uff0c\u4f46\u8981\u6ce8\u610f\u5b83\u4eec\u53ea\u80fd\u770b\u5230\u4e0a\u9762\u8ddf\u8e2a\u4e2d\u7684\u9ec4\u7ebf\uff0c\u8fd9\u662f\u84dd\u7ebf\u7684\u6709\u635f\u89c6\u56fe\u3002\n\u770b\u7740\u9ec4\u7ebf\uff0c\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u5c71\u9876\u7684\u8282\u594f\u76f8\u5f53\u89c4\u5219\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6bcf\u96944\u5fae\u79d2\uff0c\u5c31\u6709\u4e00\u4e2a\u65f6\u9699\uff0c\u8981\u4e48\u6709\u8109\u51b2\uff0c\u8981\u4e48\u6ca1\u6709\u8109\u51b2\u3002\u5982\u679c\u6709\u8109\u51b2\uff0c\u90a3\u5c31\u662f1\u6bd4\u7279\u3002\u6ca1\u6709\u8109\u640f\uff0c\u90a3\u662f\u4e2a0\u6bd4\u7279\u3002\u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u5c31\u6709\u4e00\u4e2a\u6bd4\u7279\u6d41\u4f9b\u5149\u76d8\u63a7\u5236\u5668\u89e3\u91ca\u5e76\u79fb\u4ea4\u7ed9\u4e3b\u673a\u3002\n\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4f7f\u7528\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u6848\u3002\u6211\u4eec\u5c06\u91cd\u70b9\u653e\u5728BBC Micro\u8fd9\u7bc7\u6587\u7ae0\u4e0a\uff0c\u90a3\u91cc\u7684\u5927\u591a\u6570\u5149\u76d8\u90fd\u4f7f\u7528FM\u7f16\u7801\uff0c\u4e5f\u5c31\u662f\u8bf4\u3002\u5355\u4e00\u5bc6\u5ea6\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7f16\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u4f5c\u7528\u57df\u8f68\u8ff9\u4e2d\u76840\u548c1\u4f4d\u5c31\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9\u3002\u5728\u90a3\u4e2a\u65f6\u4ee3\uff0cMFM\u7f16\u7801\u901a\u5e38\u66f4\u4e3a\u666e\u904d\u3002\n\u76d8\u63a7\u5236\u5668\u83b7\u53d6\u8109\u51b2\u6d41\u5e76\u7406\u89e3\u5b83\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u5728FM(\u6709\u65f6\u79f0\u4e3aDFM)\u7f16\u7801\u4e2d\uff0c\u6bcf\u4e2a\u8109\u51b2\u6216\u975e\u8109\u51b2\u8868\u793a1\u62160\u4f4d\u3002\u8fd9\u4e9b\u4f4d\u662f\u65f6\u949f\u4f4d\u548c\u5b9e\u9645\u6570\u636e\u4f4d\u7684\u6df7\u5408\u3002\u51fa\u4e8e\u51e0\u4e2a\u539f\u56e0\u9700\u8981\u65f6\u949f\u4f4d\uff1a\u4f5c\u4e3a\u8981\u540c\u6b65\u5230\u7684\u5b9a\u65f6\u6e90\uff0c\u4ee5\u53ca\u8fd8\u4e3a\u4e86\u9632\u6b62\u76d8\u9a71\u52a8\u5668\u8ba4\u4e3a\u5b83\u5df2\u7ecf\u4e22\u5931\u4e86\u4fe1\u53f7\u3002\u5fc5\u987b\u81f3\u5c11\u6bcf8\u79d2\u6709\u4e00\u6b21\u8109\u640f\u624d\u80fd\u4fdd\u8bc1\u4e00\u5207\u53ef\u9760\u3002FM\u7f16\u7801\u91c7\u7528\u7b80\u5355\u7684\u8def\u7ebf\uff1a\u76d8\u4e0a\u6bcf\u9694\u4e00\u4e2a\u6bd4\u7279\u5c31\u662f\u4e00\u4e2a\u65f6\u949f\u6bd4\u7279\uff0c\u5b83\u4eec\u51e0\u4e4e\u5728\u6240\u6709\u65f6\u95f4\u90fd\u662f1\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u5982\u4f55\u5c06\u6570\u636e\u4f4d\u4e0e\u65f6\u949f\u4f4d\u5206\u5f00\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u4e86\u89e3\u4e00\u4e0b\u5149\u76d8\u8868\u9762\u7684\u6570\u636e\u5b57\u8282\u5e8f\u5217\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50\u30028271\u6570\u636e\u8868\u4e2d\u4ecb\u7ecd\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u63cf\u8ff0\u78c1\u76d8\u4e0a\u7684\u6247\u533a\uff0c\u79f0\u4e3aIBM\u8f6f\u76d8\u3002\nFF 00 00 00 FE 00 00 00 01 F1 D3 FF 00 00 00 FB 01 02 03 04 05.\u3002\n\u7eff\u8272\u6570\u636e\u5b57\u8282\u5728\u6247\u533a\u4e4b\u95f4\u6216\u5728\u6247\u533a\u62a5\u5934\u548c\u6247\u533a\u6570\u636e\u4e4b\u95f4\u586b\u5145\u3002\u5b83\u4eec\u5e2e\u52a9\u63a7\u5236\u5668\u4fdd\u6301\u6b63\u786e\u7684\u540c\u6b65\uff0c\u5e76\u5728\u6b63\u786e\u7684\u70b9\u91cd\u65b0\u83b7\u5f97\u540c\u6b65\u3002\u5728\u771f\u5b9e\u7684\u5149\u76d8\u4e0a\uff0c\u586b\u5145\u5e8f\u5217\u901a\u5e38\u8f83\u957f\uff0c\u4f46\u662f\u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u4e0a\u9762\u7f29\u77ed\u4e86\u586b\u5145\u5e8f\u5217\uff1b\u5b83\u4eec\u4ecd\u7136\u8db3\u591f\u3002\n\u6247\u533a\u62a5\u5934\u6807\u8bc6\u5b57\u8282\u662fFE\uff0c\u5176\u540e\u662f4\u5b57\u8282\u7684\u6247\u533a\u62a5\u5934\u548c2\u5b57\u8282\u7684CRC\u3002\u8be5\u6247\u533a\u58f0\u660e\u5b83\u5728\u78c1\u90530\u3001\u78c1\u59340\u4e0a\uff0c\u5e76\u4e14\u5b83\u662f\u6247\u533a0\uff0c\u5927\u5c0f\u4e3a256\u5b57\u8282\u3002CRC\u662f\u6b63\u786e\u7684\u3002\u672a\u5220\u9664\u6570\u636e\u7684\u6247\u533a\u6570\u636e\u6807\u8bc6\u5b57\u8282\u662fFB\uff0c\u9884\u8ba1\u968f\u540e\u662f256\u5b57\u8282\u7684\u6570\u636e\uff0c\u7136\u540e\u662f\u53e6\u4e00\u4e2a2\u5b57\u8282\u7684CRC\u3002\u5178\u578b\u7684\u8f68\u9053\u53ef\u4ee5\u5305\u542b10\u4e2a\u8fd9\u6837\u7684\u586b\u5145+\u6247\u533a\u62a5\u5934+\u586b\u5145+\u6247\u533a\u6570\u636e\u5e8f\u5217\u3002\n\u654f\u9510\u7684\u8bfb\u8005\u4f1a\u95ee\uff1a\u54e6\uff01\u4f46\u662f\uff0c\u5982\u679cFE\u6216FB\u5b57\u8282\u51fa\u73b0\u5728\u5b9e\u9645\u6247\u533a\u6570\u636e\u4e2d\uff0c\u5c31\u50cf\u5b83\u4eec\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u6837\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f&#34\uff1b\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u95ee\u9898\uff0c\u7b54\u6848\u5c31\u5728\u65f6\u949f\u4f4d\u4e0a\u3002\u4e0a\u8ff0\u6bcf\u4e2a\u5b57\u8282\u7684\u65f6\u949f\u4f4d\u5747\u4e3a0xFF(\u5168\u90e8\u8bbe\u7f6e)\uff0c\u4f460xFE\u548c0xFB\u9664\u5916\uff0c\u8fd9\u4e24\u4e2a\u5b57\u8282\u7684\u65f6\u949f\u4f4d\u5747\u4e3a0xC7\u3002\u5373\u4e00\u4e9b\u65f6\u949f\u4f4d\u4e22\u5931\uff01\u8fd9\u4f7f\u5f97\u80fd\u591f\u51c6\u786e\u5730\u8bc6\u522b\u6247\u533a\u62a5\u5934\u548c\u6247\u533a\u6570\u636e\u6807\u8bb0\u3002\u6ce8\u610f\uff0c\u9009\u62e9\u8fd9\u4e9b\u7279\u6b8a\u6570\u636e\u5b57\u8282\u52a0\u4e0a\u65f6\u949f\u5b57\u8282\u7684\u7ec4\u5408\uff0c\u4f7f\u5f97\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\uff0c\u5373\u5728\u76d8\u8868\u9762\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u6709\u8fde\u7eed\u768420\u4f4d\u3002\n\u82f1\u56fd\u5e7f\u64ad\u516c\u53f8\u7684\u5fae\u76d8\u4fdd\u62a4\u4e4b\u65c5\u662f\u4e00\u4e2a\u76f8\u5f53\u66f2\u6298\u7684\u65c5\u7a0b\u3002\u5b83\u4f3c\u4e4e\u662f\u57fa\u4e8e\u4e00\u79cd\u7ecf\u5178\u7684\u519b\u5907\u7ade\u8d5b\u65b9\u6cd5\uff1a\u8f6f\u4ef6\u51fa\u7248\u5546\u4f1a\u53d1\u5e03\u4e00\u5f20\u65b0\u7684\u5149\u76d8\uff0c\u4e0a\u9762\u6709\u4e00\u4e9b\u65b0\u7684\u5947\u7279\u4e4b\u5904\uff0c\u7136\u540e\u4f1a\u63a8\u51fa\u4e00\u4e2a\u65b0\u7684\u5149\u76d8\u590d\u5236\u7a0b\u5e8f\u6765\u7406\u89e3\u8fd9\u79cd\u5947\u7279\u4e4b\u5904\u3002\u7136\u540e\u91cd\u590d\u51e0\u6b21\u8fed\u4ee3\uff01\n\u8fd9\u4e00\u65c5\u7a0b\u4e5f\u56e0\u673a\u5668\u751f\u547d\u5468\u671f\u4e2d\u4f7f\u7528\u7684\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u78c1\u76d8\u63a7\u5236\u5668\u82af\u7247\u800c\u53d8\u5f97\u590d\u6742\uff1a\u82f1\u7279\u5c148271\u548c\u897f\u90e8\u6570\u636e1770/1772\u3002\u8fd9\u4e24\u79cd\u82af\u7247\u90fd\u6709\u4e0d\u540c\u7684\u529f\u80fd\u548c\u602a\u7656\u3002\u5728\u5176\u4e2d\u4e00\u4e2a\u82af\u7247\u4e0a\u8fdb\u884c\u826f\u597d\u7684\u590d\u5236\u4fdd\u62a4\u5bf9\u4e8e\u5728\u53e6\u4e00\u4e2a\u82af\u7247\u4e0a\u590d\u5236\u6765\u8bf4\u53ef\u80fd\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u6b64\u5916\uff0c\u4e00\u4e9b\u8f83\u65e9\u7684BBC\u5fae\u76d8\u6700\u7ec8\u4e0e\u57fa\u4e8e1770\u7684\u7cfb\u7edf\u4e0d\u517c\u5bb9\u3002\n\u65e9\u671f\u7684Micro Power\u6e38\u620f\uff0c\u5982Ghouls\uff0c\u5728\u8bb8\u591a\u78c1\u9053\u4e0a\u4f7f\u7528\u975e\u6807\u51c6\u6570\u91cf\u7684\u6247\u533a\uff0c\u4f8b\u5982\u6bcf\u4e2a512\u5b57\u8282\u76845\u4e2a\u6247\u533a\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a256\u5b57\u8282\u768410\u4e2a\u6247\u533a\u3002\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u590d\u5236\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u9996\u5148\u68c0\u67e5\u6247\u533a\u6807\u9898\uff0c\u7136\u540e\u6839\u636e\u6247\u533a\u6807\u9898\u51b3\u5b9a\u6247\u533a\u6807\u9898\u7684\u6570\u91cf\u548c\u5927\u5c0f\uff0c\u5219\u5f88\u5bb9\u6613\u590d\u5236\u3002\u4eba\u4eec\u5f88\u5bb9\u6613\u5632\u7b11\u8fd9\u79cd\u7b80\u5355\u7684\u4fdd\u62a4\uff0c\u4f46\u5b83\u5f88\u53ef\u80fd\u5728\u63a8\u51fa\u65f6\u505a\u4e86\u5b83\u9700\u8981\u505a\u7684\u4e8b\u60c5\uff1a\u4f7f\u7528\u5185\u7f6e\u7684DFS(\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf)\u547d\u4ee4*COPY\u6216*BACKUP\u9632\u6b62\u968f\u610f\u590d\u5236\u5149\u76d8(\u8fd9\u4e24\u4e2a\u547d\u4ee4\u90fd\u9700\u8981\u683c\u5f0f\u826f\u597d\u7684DFS\u5149\u76d8\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u78c1\u905310\u4e2a\u6247\u533a)\u3002\n\u9ad8\u7ea7\u8f6f\u4ef6\u7ecf\u5178\u4e4b\u4f5cCitadel\u4f7f\u7528\u5220\u9664\u4e86\u6570\u636e\u3002\u76d8\u4e0a\u7684\u6bcf\u4e2a\u6247\u533a\u53ef\u4ee5\u7531\u7d27\u63a5\u5728\u6247\u533a\u6570\u636e\u5b57\u8282\u4e4b\u524d\u7684\u4e00\u4e2a\u5b57\u8282\u6807\u8bb0\u6807\u8bb0\u4e3a\u6b63\u5e38\u6216\u5220\u9664\u3002\u8fd9\u4e5f\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4fdd\u62a4\uff0c\u53ea\u8981\u590d\u5370\u673a\u77e5\u9053\u5df2\u5220\u9664\u6570\u636e\u7684\u6982\u5ff5\uff0c\u5b83\u5c31\u53ef\u4ee5\u5904\u7406\u3002\u6709\u8da3\u7684\u662f\uff0cSuperior\u786e\u5b9e\u53d1\u884c\u4e86\u4e00\u4e9b\u62e5\u6709\u66f4\u9ad8\u7ea7\u4fdd\u62a4\u7684\u6e38\u620f--\u6700\u8457\u540d\u7684\u662f\u4f20\u8bf4\u4e2d\u7684\u6d41\u4ea1\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e\u4fdd\u62a4\u4e0d\u80fd\u6b63\u786e\u52a0\u8f7d\u7684\u6545\u4e8b\uff0c\u6240\u4ee5\u4ece\u90a3\u65f6\u8d77\uff0c\u53ea\u4f7f\u7528\u7b80\u5355\u7684\u5df2\u5220\u9664\u6570\u636e\u4fdd\u62a4\u5c31\u53ef\u4ee5\u770b\u5230\u66f4\u597d\u7684\u5149\u76d8\u3002\u5927\u6982\u662f\uff1a\u4e00\u6b21\u88ab\u54ac\uff0c\u4e24\u6b21\u5bb3\u7f9e\u3002\nBBC Micro\u4e0a\u6700\u5177\u6807\u5fd7\u6027\u7684\u6e38\u620f\u5f88\u53ef\u80fd\u662f\u201c\u7cbe\u82f1\u201d(Elite)\u3002\u5b83\u4f7f\u7528\u7684\u6280\u5de7\u4e4b\u4e00\u662f\u5728\u5149\u76d8\u4e2d\u95f4\u6709\u4e00\u4e2a\u672a\u683c\u5f0f\u5316\u7684\u66f2\u76ee\u3002\u672a\u683c\u5f0f\u5316\u7684\u8f68\u9053\u6ca1\u6709\u4efb\u4f55\u53ef\u8bc6\u522b\u7684\u6247\u533a\u6807\u9898\u3002\u8fd9\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u8ba9\u5149\u76d8\u590d\u5236\u7a0b\u5e8f\u6c57\u6d41\u6d43\u80cc\u7684\u4fdd\u62a4\u63aa\u65bd\u3002\u7279\u522b\u662f\u57288271\u8f6f\u76d8\u63a7\u5236\u5668\u4e0a\uff0c\u6ca1\u6709\u53d6\u6d88\u683c\u5f0f\u5316\u547d\u4ee4\uff0c\u53ea\u6709\u683c\u5f0f\u5316\u547d\u4ee4\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e00\u95ee\u9898\u6700\u7ec8\u4ee5\u6709\u5229\u4e8e\u5149\u76d8\u590d\u5236\u7a0b\u5e8f\u7684\u65b9\u5f0f\u5f97\u5230\u4e86\u51b3\u5b9a\u6027\u7684\u89e3\u51b3\uff0c\u5e76\u91c7\u7528\u4e86\u4e00\u4e2a\u806a\u660e\u7684\u6280\u5de7\uff1a\u5982\u679c\u5c06\u4e00\u9996\u66f2\u76ee\u683c\u5f0f\u5316\u4e3a\u4e00\u4e2a\u5de8\u5927\u76844096\u5b57\u8282\u6247\u533a\uff0c\u60a8\u5c06\u7acb\u5373\u83b7\u80dc\u3002\u53d1\u751f\u7684\u60c5\u51b5\u662f\uff0c\u5355\u4e2a\u6247\u533a\u6807\u9898\u5728\u78c1\u9053\u7684\u5f00\u59cb\u5904\u5199\u5165\uff0c\u4f46\u968f\u540e4096\u5b57\u8282\u7684\u6247\u533a\u6570\u636e\u5728\u78c1\u9053\u672b\u7aef(3125\u5b57\u8282\u957f)\u56de\u7ed5\uff0c\u5e76\u4e22\u5f03\u552f\u4e00\u7684\u6247\u533a\u6807\u9898\uff01\u56e0\u6b64\uff0c\u78c1\u9053\u5e76\u4e0d\u662f\u771f\u6b63\u672a\u683c\u5f0f\u5316\u7684\uff0c\u4f46\u6240\u9700\u8981\u7684\u5c31\u662f\u5149\u76d8\u63a7\u5236\u5668\u770b\u4e0d\u5230\u4efb\u4f55\u6247\u533a\u6807\u9898--\u4efb\u52a1\u5b8c\u6210\u4e86\u3002\n\u53e6\u4e00\u4e2a\u76f8\u5f53\u666e\u904d\u7684\u4fdd\u62a4\u662f\u6247\u533a\u5934\u90e8\u4e2d\u4e0d\u5339\u914d\u7684\u7269\u7406/\u903b\u8f91\u8f68\u9053ID\u3002\u8fd9\u4e5f\u88abElite\u4f7f\u7528\uff0c\u5b83\u4e5f\u4f7f\u7528\u5f02\u5e38\u5927\u7684\u903b\u8f91\u6247\u533aID\u3002\u5982\u679c\u4f60\u77e5\u9053\u4f60\u5728\u5bfb\u627e\u5408\u9002\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u5f88\u5bb9\u6613\u590d\u5236\u7684\u3002\u901a\u5e38\uff0c\u5982\u679c\u5149\u76d8\u63a7\u5236\u5668(\u7279\u522b\u662f8271)\u770b\u5230\u8f68\u9053\u4e0d\u5339\u914d\uff0c\u5b83\u4f1a\u611f\u5230\u4e0d\u5b89\uff0c\u4f46\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7279\u6b8a\u547d\u4ee4\u5c06\u5176\u5185\u90e8\u8f68\u9053\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u5339\u914d\u6765\u4f2a\u9020\u63a7\u5236\u5668\u3002\n\u540e\u6765\uff0c\u5728BBC Micro\u7684\u751f\u6d3b\u4e2d\uff0c\u4e00\u4e9b\u5149\u76d8\u8f6f\u4ef6\u51fa\u7248\u5546\u5347\u7ea7\u4e86\u4ed6\u4eec\u7684\u6e38\u620f\u3002\u5728\u6247\u533a\u4e4b\u95f4\u9690\u85cf\u989d\u5916\u7684\u6570\u636e\u5b57\u8282\u53d8\u5f97\u5f88\u5e38\u89c1\u3002\u901a\u8fc7\u91cd\u5199\u968f\u540e\u7684\u6247\u533a\uff0c\u590d\u5236\u8fd9\u4e9b\u5b57\u8282\u7684\u7b80\u5355\u5316\u5c1d\u8bd5\u5c06\u5931\u8d25\u3002\u9664\u975e\u57281770\u7684\u5199\u5165\u78c1\u9053\u534f\u8bae\u4e2d\u4fdd\u7559\u4e86\u9690\u85cf\u5b57\u8282\uff0c\u5426\u5219\u57fa\u4e8e1770\u7684\u78c1\u76d8\u590d\u5370\u673a\u53ef\u4ee5\u8f7b\u677e\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\u7528\u57fa\u4e8e8271\u62161770\u7684\u590d\u5370\u673a\u90fd\u53ef\u4ee5\u5f88\u597d\u5730\u590d\u5236\u8fd9\u4e9b\u60c5\u51b5\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u4e00\u53f0\u80fd\u591f\u505a\u51fa\u9002\u5f53\u52aa\u529b\u7684\u590d\u5370\u673a\u3002\u9700\u8981\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u5982\u76f4\u63a5\u63a7\u5236\u76d8\u63a7\u5236\u5668\u82af\u7247\uff0c\u5e76\u4ee5\u7cbe\u786e\u7684\u5b9a\u65f6\u53d1\u51fa\u547d\u4ee4\uff0c\u4ee5\u53ca\u4ee5\u7c7b\u4f3c\u7684\u7cbe\u786e\u5b9a\u65f6\u4e2d\u6b62\u63a7\u5236\u5668\u4e2d\u7684\u547d\u4ee4\u3002\n\u5149\u76d8\u4fdd\u62a4\u4f5c\u8005\u559c\u6b22\u7684\u53e6\u4e00\u79cd\u6d88\u9063\u65b9\u5f0f\u662f\u4e00\u79cd\u521b\u9020\u6027\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u51cf\u5c11\u590d\u5236\uff0c\u800c\u4e0d\u4e00\u5b9a\u6539\u8fdb\u57fa\u672c\u7684\u4fdd\u62a4\u673a\u5236\uff1a\u653b\u51fb\u590d\u5236\u7a0b\u5e8f\u672c\u8eab\u3002\u590d\u5236\u7a0b\u5e8f\u9700\u8981\u4e00\u5806\u903b\u8f91\u6765\u8ba1\u7b97\u51fa\u5b83\u4eec\u9047\u5230\u7684\u662f\u4ec0\u4e48\u6247\u533a\u8bbe\u7f6e\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5bb9\u6613\u7684\u903b\u8f91\uff0c\u6240\u4ee5\u6253\u7834\u5b83\u662f\u5353\u6709\u6210\u6548\u7684\u3002\u4ee5\u4e0b\u662f\u6d41\u4ea1\u6253\u7834\u77e2\u91cf2\u7684\u51e0\u4e2a\u955c\u5934(\u5728\u4eff\u771f\u4e0b\uff0c\u4f46\u771f\u5b9e\u786c\u4ef6\u7684\u884c\u4e3a\u662f\u76f8\u540c\u7684\uff1a)\uff1a\n\u8003\u8651\u5230\u4e0a\u9762\u4e3a\u6e38\u620f\u63cf\u8ff0\u7684\u7248\u6743\u4fdd\u62a4\u519b\u5907\u7ade\u8d5b\uff0c\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u53d1\u73b0\u4e00\u5bb6\u89c4\u6a21\u8f83\u5c0f\u7684\u6559\u80b2\u8f6f\u4ef6\u516c\u53f8\u62e5\u6709\u9886\u5148\u6570\u5149\u5e74\u7684\u5149\u76d8\u4fdd\u62a4\u683c\u5f0f\u3002\u820d\u65af\u987f\u8f6f\u4ef6\u516c\u53f8\u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u8f6f\u4ef6\u76ee\u5f55\uff0c\u6211\u7684\u5b69\u5b50\u4eec\u4eca\u5929\u4ecd\u7136\u5f88\u559c\u6b22\uff0c\u6211\u4eec\u73b0\u5728\u6700\u559c\u6b22\u7684\u662f\u592a\u7a7a\u4efb\u52a1Mada\u3002\n\u8bb8\u591aSherston\u8f6f\u4ef6\u5149\u76d8\u4f7f\u7528\u5f31\u4f4d\u4fdd\u62a4\u3002\u6211\u4eec\u5e94\u8be5\u7b80\u8981\u5730\u5b9a\u4e49\u672f\u8bed\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u662f\u4e00\u81f4\u4f7f\u7528\u7684\uff1b\u6700\u5408\u7406\u548c\u6700\u5e7f\u6cdb\u540c\u610f\u7684\u672f\u8bed\u4f3c\u4e4e\u662f\uff1a\n\u8584\u5f31\u73af\u8282\u3002\u7531\u76d8\u8868\u9762\u4e0a\u7684\u5f31\u4fe1\u53f7\u6216\u4e0d\u5b58\u5728\u7684\u78c1\u4fe1\u53f7\u5f15\u8d77\u7684\u7247\u72b6\u6bd4\u7279\u3002\u60a8\u53ef\u80fd\u8fd8\u4f1a\u770b\u5230\u672f\u8bed\u65e0\u901a\u91cf\u533a(NFA)\uff0c\u5b83\u4e0e\u4e0d\u5b58\u5728\u7684\u4fe1\u53f7\u76f8\u540c\u3002\u4e0e\u5f31\u4fe1\u53f7\u76f8\u53cd\uff0c\u5f31\u6bd4\u7279\u51e0\u4e4e\u603b\u662f\u4e0d\u5b58\u5728\u7684\u4fe1\u53f7\u3002\u5f31\u4f4d\u7684\u6613\u788e\u6027\u5b9e\u9645\u4e0a\u6765\u81ea\u9a71\u52a8\u5668\u7535\u5b50\u8bbe\u5907\uff1a\u5f53\u6ca1\u6709\u660e\u663e\u7684\u78c1\u901a\u53d8\u5316\u65f6\uff0c\u9a71\u52a8\u5668\u53ea\u662f\u653e\u5927\u5f97\u66f4\u5389\u5bb3\uff0c\u76f4\u5230\u5b83\u5f00\u59cb\u770b\u5230\u566a\u97f3\u4e2d\u7684\u9b3c\u9b42\u5e76\u53d1\u51fa\u4fe1\u53f7\u3002\n\u6a21\u7cca\u4f4d\u3002\u7531\u5f3a\u800c\u6e05\u6670\u7684\u4fe1\u53f7\u5f15\u8d77\u7684\u7247\u72b6\u6bd4\u7279\uff0c\u4f46\u662f\u5176\u4e2d\u8bfb\u8109\u51b2\u7684\u5b9a\u65f6\u5904\u4e8e\u8fb9\u7f18\u3002\u8fb9\u754c\u5b9a\u65f6\u610f\u5473\u7740\u76d8\u63a7\u5236\u5668\u82af\u7247\u4e0d\u80fd\u786e\u5b9a\u8109\u51b2\u5e94\u8be5\u662f1\u6bd4\u7279\u8fd8\u662f0\u6bd4\u7279\u3002\u5b83\u5c06\u6539\u53d8\u4e3b\u610f\uff0c\u4ece\u8bfb\u4e66\u53d8\u6210\u8bfb\u4e66\u3002\n\u5f31\u4f4d\u7684\u4f7f\u7528\u662f\u5148\u8fdb\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u60a8\u8fdb\u884c\u7b2c\u4e00\u539f\u7406\u5206\u6790\u65f6\u4ea7\u751f\u7684\u78c1\u76d8\u4fdd\u62a4\u4e4b\u4e00\uff1a\n\u5f31\u4f4d\u63d0\u4f9b\u53ef\u9760\u7684&#34\uff1b\u8bfb\u53d6\u7ed3\u679c\uff1a\u60a8\u53ef\u4ee5\u53ef\u9760\u5730\u4f9d\u8d56\u5b83\u4eec\u4ee5\u4e0d\u540c\u4e8e\u8bfb\u5230\u8bfb\u7684\u65b9\u5f0f\u56de\u8bfb\uff01\n\u5f31\u4f4d\u4e0d\u80fd\u7531\u6807\u51c6\u76d8\u63a7\u5236\u5668\u5199\u5165\u3002\u76d8\u63a7\u5236\u5668\u5c3d\u5176\u6240\u80fd\u5199\u4e0b\u786e\u5b9a\u6027\u8bfb\u56de\u7684\u4f4d\u3002\u90a3\u662f\u4ed6\u4eec\u7684\u5de5\u4f5c\uff01\u6709\u65e0\u5199\u5165\u5f31\u4fe1\u53f7\u6807\u5fd7\uff0c\u6709\u65e0\u5199\u5165\u65f6\u5e8f\u51b2\u7a81\u6807\u5fd7\u3002\uff1f\n\u6211\u5199\u4fe1\u7ed9\u201c\u592a\u7a7a\u4efb\u52a1\u9a6c\u8fbe\u201d\u7684\u4f5c\u8005\u897f\u8499\u00b7\u970d\u65af\u52d2\u3002\u539f\u6765\u4ed6\u8fd8\u548c\u4ed6\u9694\u58c1\u7684\u7535\u5b50\u6781\u5ba2\u4e00\u8d77\u8bbe\u8ba1\u4e86\u8106\u5f31\u7684\u6bd4\u7279\u4fdd\u62a4\u88c5\u7f6e\uff01\u7528\u897f\u8499\u7684\u8bdd\u8bf4\uff1a\n\u8f6f\u9501(\u6211\u4eec\u8fd9\u6837\u79f0\u547c\u5b83)\u5b9e\u9645\u4e0a\u662f\u6211\u7684\u7cfb\u7edf\uff0c\u6240\u4ee5\u6211\u8bb0\u5f97\u2026\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4f4f\u5728\u4e00\u4e2a\u7535\u5b50\u6781\u5ba2\u7684\u9694\u58c1\uff01\ud83d\ude0a\uff0c\u6240\u4ee5\u6253\u7834\u5e76\u884c\u78c1\u76d8\u7535\u7f06\u7684\u5199\u6570\u636e\u7ebf\u3002\u5728\u8fd9\u6761\u751f\u4ea7\u7ebf\u4e0a\u52a0\u4e00\u70b9\u7535\u5b50\u4ea7\u54c1\u3002(\u8c22\u8c22\u4f60\uff0c\u8fc8\u514b)\u5927\u591a\u6570\u65f6\u5019\uff0c\u8fd9\u4e2a\u7535\u5b50\u8bbe\u5907\u4ec0\u4e48\u4e5f\u4e0d\u505a-\u8ba9\u6570\u636e\u6b63\u5e38\u901a\u8fc7\u3002\u5982\u679c\u4f60\u6253\u5f00\u5b83(\u6211\u60f3\u6211\u662f\u901a\u8fc7\u4e32\u53e3\u5b8c\u6210\u7684)\u5e76\u5199\u5165\u5355\u4e2a\u6247\u533a-\u5b83\u4f1a\u8ba1\u7b97\u901a\u8fc7\u7684\u4f4d\u6570\uff0c\u6bd4\u5982\u8bf4256-\u7136\u540e\u505c\u6b62\u4e0b\u4e00\u4e2a256\u4f4d\u901a\u8fc7&#34\uff1b\n\u6211\u78b0\u5de7\u6709\u4e00\u5f20\u5e26\u6709\u5f31\u4f4d\u4fdd\u62a4\u7684\u539f\u7248Sherston\u5149\u76d8\uff0c\u201c\u52a8\u753b\u5b57\u6bcd\u8868\u201d(Animated Alphabet)\u3002\u4e0b\u9762\u662f\u5c06\u9a71\u52a8\u5668\u8fde\u63a5\u5230\u793a\u6ce2\u5668\u540e\uff0c\u78c1\u76d8\u7684\u5f31\u4f4d\u8865\u4e01\u662f\u4ec0\u4e48\u6837\u5b50\uff1a\n\u897f\u8499\u7684\u5c0f\u5de5\u5177\u5728\u521b\u5efa\u4e00\u6279\u5f31\u6bd4\u7279\u65b9\u9762\u7684\u6548\u679c\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u3002\u8fd9\u771f\u7684\u662f\u5f53\u65f6\u7684\u5929\u624d\uff0c\u662f\u65e9\u671f\u5728\u6ca1\u6709\u7279\u6b8a\u786c\u4ef6\u7684\u60c5\u51b5\u4e0b\u521b\u9020\u4ece\u6839\u672c\u4e0a\u4e0d\u53ef\u590d\u5236\u7684\u5149\u76d8\u8868\u9762\u7684\u6447\u6446\u4e4b\u4e00\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u5b83\u5728\u57fa\u4e8e8271\u548c1770\u7684\u7cfb\u7edf\u4e0a\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u9a71\u52a8\u7535\u5b50\u8bbe\u5907\u4ea7\u751f\u51c6\u968f\u673a\u6027\u7684\u8bf1\u56e0\u3002\u8fd9\u4f7f\u5f97\u8bbe\u7f6e\u66f4\u7b80\u5355\u3001\u66f4\u53ef\u9760\uff0c\u53ea\u9700\u4e00\u6761\u4ee3\u7801\u8def\u5f84\u3002\u5b83\u4e5f\u975e\u5e38\u517c\u5bb9\u6240\u6709\u65e0\u6570\u4e0d\u540c\u7684DFS(\u5149\u76d8\u5f52\u6863\u7cfb\u7edf)\u53d8\u4f53\uff0c\u56e0\u4e3a\u68c0\u67e5\u590d\u5236\u4fdd\u62a4\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u82b1\u54e8\u7684DFS\u8c03\u7528\u3002\u5b83\u53ea\u9700\u8981\u8bfb\u53d6\u4e00\u4e2a\u6247\u533a--\u975e\u5e38\u6807\u51c6\uff01--\u51e0\u6b21\uff0c\u770b\u770b\u8fd4\u56de\u7684\u5b57\u8282\u662f\u5426\u53d8\u5316\u3002\n\u6211\u4e0d\u77e5\u9053\u7b2c\u4e00\u4e2a\u57fa\u4e8e\u8584\u7247\u6bd4\u7279\u7684\u5149\u76d8\u4fdd\u62a4\u662f\u4ec0\u4e48\u65f6\u5019\u53d1\u5e03\u7684\u3002\u53ef\u80fd\u6709\u4eba\u53ef\u4ee5\u4e3e\u51fa20\u4e16\u7eaa70\u5e74\u4ee3\u7684\u4f8b\u5b50\uff01\u4f46\u503c\u5f97\u6bd4\u8f83\u4e00\u4e0b\u6211\u4eec\u786e\u5b9e\u77e5\u9053\u7684\u4e00\u4e9b\u4f8b\u5b50\u7684\u65e5\u671f\u3002\n\u786e\u5b9a\u7b2c\u4e00\u4e2a\u4f7f\u7528\u5f31\u4f4d\u4fdd\u62a4\u7684Sherston\u8f6f\u4ef6\u7684\u65e5\u671f\u662f\u5f88\u56f0\u96be\u7684\u3002\u6211\u6709\u4e00\u5f20Yog\u5148\u751f\u548c\u5976\u5634\u7684\u56fe\u50cf\uff0c1984\u5e74\uff0c\u5e26\u7740\u8106\u5f31\u7684\u6bd4\u7279\u4fdd\u62a4\u3002\u751a\u81f3\u8fd8\u6709\u4e00\u4e2a\u77ed\u5143\u97f3\u7684\u56fe\u50cf\uff0c(C)1983\uff0c\u5e26\u6709\u5f31\u4f4d\u4fdd\u62a4\u3002\u7136\u800c\uff0c\u6211\u4eec\u4e5f\u770b\u5230\u76f8\u540c\u7684Sherston\u56fe\u4e66\u53d1\u5e03\u4e86\u591a\u4e2a\u4e0d\u540c\u7684\u5149\u76d8\u7248\u672c\u548c\u4e0d\u540c\u7684\u7248\u6743\u4fdd\u62a4\u7cfb\u7edf\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5deb\u5e08\u7684\u590d\u4ec7\u6e38\u620f\u7684\u56fe\u50cf\u6765\u5efa\u7acb\u5f31\u4f4d\u4fdd\u62a4\u7684\u521d\u59cb\u6700\u65b0\u754c\u9650\uff0c\u8be5\u56fe\u50cf\u78b0\u5de7\u4f7f\u7528\u4e86\u5f31\u4f4d\u4fdd\u62a4\uff0c\u5e76\u4e14\u5728\u5176One-Past-the-End\u8f68\u9053\u4e0a\u8fd8\u5305\u62ec\u5546\u7528\u590d\u5370\u673a\u6307\u7eb9\uff0c\u5982\u6b64\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u89c6\u56fe\u4e2d\u6240\u793a\uff1a\n\u8fd9\u79cd\u6027\u8d28\u7684\u6307\u7eb9\u5305\u542b\u65e5\u671f\u548c\u65f6\u95f4\uff1a87 01 05\uff0c\u6216\u8005\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f1987\u5e741\u67085\u65e5\u3002\n\u56e0\u6b64\uff0c\u820d\u65af\u987f\u8584\u5f31\u7684\u94bb\u5934\u4f3c\u4e4e\u6bd4\u5730\u4e0b\u57ce\u5927\u5e08\u6a21\u7cca\u94bb\u5934\u81f3\u5c11\u65e9\u4e00\u5e74\u6295\u4ea7\u3002\u867d\u7136\u8fd9\u4e9b\u5149\u76d8\u4fdd\u62a4\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u5b83\u4eec\u5177\u6709\u975e\u5e38\u76f8\u4f3c\u7684\u5c5e\u6027\u548c\u529f\u80fd\u3002\n\u66f4\u6709\u8da3\u7684\u662f\uff0c\u5730\u4e0b\u57ce\u5927\u5e08\u7684\u6a21\u7cca\u6bd4\u7279\u662f1986\u5e74\u63d0\u4ea4\u7684\u4e00\u9879\u4e13\u5229\u7684\u4e3b\u9898\u3002\u8fd9\u53ef\u80fd\u662f\u5176\u4ed6\u806a\u660e\u4eba\u60f3\u51fa\u4ee5\u524d\u6280\u672f\u7684\u6848\u4f8b\u4e4b\u4e00\u3002\u8fd9\u79cd\u4e8b\u7ecf\u5e38\u53d1\u751f\u3002\n\u6ca1\u6709\u4e00\u9879\u590d\u53e4\u7814\u7a76\u662f\u5b8c\u6574\u7684\uff0c\u9664\u975e\u8bd5\u56fe\u5c06\u5f53\u65f6\u8ba4\u4e3a\u53ef\u80fd\u7684\u4e1c\u897f\u63a8\u5411\u524d\u53f0\u3002\u56e0\u6b64\uff0c\u6709\u53ef\u80fd\u521b\u5efa\u7eaf\u8f6f\u4ef6\u89e3\u51b3\u65b9\u6848\u6765\u5c06\u5f31\u4f4d\u5199\u5165\u76d8\u5417\uff1f\u95ee\u540c\u6837\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\uff1a\u662f\u5426\u6709\u53ef\u80fd\u521b\u9020\u51fa\u4e00\u53f0\u6b63\u786e\u590d\u5236\u5f31\u4f4d\u7684\u5149\u76d8\u590d\u5370\u673a\uff1f\n\u4e8b\u5b9e\u8bc1\u660e\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff01\u6216\u8005\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u7b54\u6848\u662f\u53cc\u91cd\u80af\u5b9a\u3002\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u6280\u5de7\uff0c\u53ef\u4ee5\u4f7f\u75288271\u76d8\u63a7\u5236\u5668\u521b\u5efa\u5b9e\u9645\u7684\u5f31\u4f4d\uff0c\u800c\u4f7f\u75281770\u76d8\u63a7\u5236\u5668\u521b\u5efa\u975e\u786e\u5b9a\u6027\u8bfb\u53d6(\u5bfc\u81f4\u4e0e\u5f31\u4f4d\u76f8\u540c\u7684\u8bfb\u53d6\u6548\u679c)\u3002\n8271\u662f\u4e00\u6b3e\u7f16\u7a0b\u7565\u663e\u964c\u751f\u7684\u82af\u7247\u3002\u5176\u4e2d\u4e00\u4ef6\u4e8b\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u7279\u6b8a\u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3002\u4e00\u4e2a\u8fd9\u6837\u7684\u7279\u6b8a\u5bc4\u5b58\u5668\u662f&#34\uff1b\u9a71\u52a8\u5668\u63a7\u5236\u8f93\u51fa\u7aef\u53e3&#34\uff1b\uff1a\n\u8fd9\u4e9b\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\u5728\u6570\u636e\u8868\u4e2d\u6ca1\u6709\u7279\u522b\u597d\u5730\u6db5\u76d6\uff0c\u4e5f\u8bb8\u662f\u56e0\u4e3a\u5b83\u4eec\u4e0d\u5e94\u8be5\u662f\u4f7f\u7528\u65f6\u6240\u5fc5\u9700\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5927\u591a\u65708271\u9a71\u52a8\u7a0b\u5e8f\u5b9e\u73b0\u5199\u5165\u6b64\u5bc4\u5b58\u5668\u4ee5\u542f\u52a8\u9a71\u52a8\u5668(\u901a\u8fc7\u8bbe\u7f6e\u52a0\u8f7d\u5934\u4f4d\u548c\u9002\u5f53\u7684\u9a71\u52a8\u5668\u9009\u62e9\u4f4d)\uff0c\u4ee5\u4fbf\u63a7\u52368271\u9a71\u52a8\u5668\u672a\u5c31\u7eea\u65f6\u8bfb/\u5199\u547d\u4ee4\u5931\u8d25\u7684\u503e\u5411\u3002\n\u8bc0\u7a8d\u5728\u4e8e\u4f7f\u7528\u8be5\u5bc4\u5b58\u5668\u6765\u8bbe\u7f6e\u5199\u4f7f\u80fd\u4f4d\u4ee5\u53ca\u52a0\u8f7d\u5934\u548c\u9009\u62e9\u4f4d\u3002\u8fd9\u53ea\u80fd\u5728\u4efb\u4f55\u5176\u4ed6\u547d\u4ee4\u4e4b\u5916\u5b8c\u6210\uff0c\u56e0\u4e3a\u5199\u5165\u7279\u6b8a\u5bc4\u5b58\u5668\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u9009\u62e9\u5b83\u5c06\u4e2d\u6b62\u4efb\u4f55\u5176\u4ed6\u6b63\u5728\u8fdb\u884c\u7684\u547d\u4ee4\u3002\u5f53\u5728\u547d\u4ee4\u4e4b\u5916\u6fc0\u6d3b\u5199\u542f\u7528\u65f6\uff0c\u76d8\u9a71\u52a8\u5668\u7684\u5199\u5934\u5c06\u88ab\u901a\u7535\uff0c\u4f46\u4e0d\u4f1a\u5728\u5199\u6570\u636e\u7ba1\u811a\u4e0a\u5c06\u6570\u636e\u8109\u51b2\u4f20\u8f93\u5230\u76d8\u9a71\u52a8\u5668\u3002\u7ed3\u679c\u662f\u5199\u78c1\u5934\u626b\u8fc7\u76d8\u8868\u9762\u7684\u78c1\u901a\u8f6c\u53d8\u3002\u8fd9\u4f1a\u4ea7\u751f\u5f31\u4f4d/a\u65e0\u78c1\u901a\u533a\u3002\u901a\u8fc7\u4e00\u70b9\u4ed4\u7ec6\u7684\u5b9a\u65f6\uff0c\u53ef\u4ee5\u7ed9\u5199\u78c1\u5934\u901a\u7535\u548c\u65ad\u7535\uff0c\u5e76\u4e14\u78c1\u9053\u4e0a\u7684\u4efb\u4f55\u70b9\u90fd\u9700\u8981\uff0c\u4ee5\u5728\u9700\u8981\u7684\u5730\u65b9\u521b\u5efa\u5f31\u4f4d\u3002\n1770\u7684\u8bc0\u7a8d\u662f\u4e0d\u540c\u7684\u3002\u901a\u8fc7\u521b\u9020\u6027\u5730\u5bf91770\u8fdb\u884c\u7f16\u7a0b\uff0c\u6216\u8bb8\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u5f31\u4f4d--\u4f46\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u5b83\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u653e\u5728BBC Micro\u76841770\u63a7\u5236\u5bc4\u5b58\u5668\u4e0a\u3002\u8fd9\u662f\u63a7\u5236\u5916\u90e81770\u5f15\u811a\u6240\u5fc5\u9700\u76841770\u5916\u90e8\u5bc4\u5b58\u5668\u3002\u4f8b\u5982\uff0c\u4e0e8271\u4e0d\u540c\uff0c1770\u901a\u8fc7\u5916\u90e8\u5f15\u811a\u9009\u62e9\u78c1\u76d8\u9a71\u52a8\u56680\u4e0e\u9a71\u52a8\u56681\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u4f20\u9012\u7ed9\u63a7\u5236\u5668\u547d\u4ee4\u7684\u53c2\u6570\u3002\u9a71\u52a8\u5668\u63a7\u5236\u5bc4\u5b58\u5668\u5728\u672c\u6587\u6863\u7684\u5e95\u90e8\u6709\u5f88\u597d\u7684\u8bf4\u660e\u3002\n\u7531\u4e8e\u8be5\u5bc4\u5b58\u5668\u4f4d\u4e8e1770\u5916\u90e8\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u5bf9\u5176\u8fdb\u884c\u5e72\u6270\u3002\u6211\u4eec\u4f7f\u7528\u7684\u5177\u4f53\u6280\u5de7\u662f\u542f\u52a8\u5355\u4e2a\u5bc6\u5ea6\u5199\u547d\u4ee4\uff0c\u7136\u540e\u7ffb\u8f6c\u5230\u53cc\u500d\u5bc6\u5ea6\uff0c\u8f93\u5165\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u3002\u53cc\u5bc6\u5ea6(MFM)\u5b9a\u65f6\u4e0e\u5355\u5bc6\u5ea6\u5b9a\u65f6\u5b8c\u5168\u4e0d\u540c\uff0c\u56e0\u6b64\u4f5c\u4e3a\u5355\u5bc6\u5ea6\u8bfb\u56de\u6240\u5f97\u5230\u7684\u56fe\u6848\u4f1a\u4e25\u91cd\u6df7\u6dc6\u76d8\u63a7\u5236\u5668\uff0c\u4ee5\u81f3\u4e8e\u8fd4\u56de\u4e0d\u786e\u5b9a\u7684\u8bfb\u7ed3\u679c\u3002\u8fd9\u4e0d\u662f\u5149\u76d8\u4e0a\u7684\u5f31\u4f4d\uff0c\u4f46\u5c31\u590d\u5236\u4fdd\u62a4\u68c0\u67e5\u800c\u8a00\uff0c\u6548\u679c\u662f\u76f8\u540c\u7684\uff1a\u8bfb\u53d6\u6247\u533a\u4e24\u6b21\uff0c\u7136\u540e\u68c0\u67e5\u7ed3\u679c\u4f1a\u6709\u6240\u4e0d\u540c\uff01\u8fd9\u4e9b\u6bd4\u7279\u6700\u7ec8\u80af\u5b9a\u4f1a\u53d8\u5f97\u8584\u7247\u72b6\u7684\u3002\n\u5b83\u8d77\u4f5c\u7528\u4e86\u5417\uff1f\u662f\u3002\u8fd9\u662f\u4e00\u6bb5\u6211\u4f7f\u7528\u6b63\u5728\u8fdb\u884c\u7684disbeast\u5b9e\u7528\u7a0b\u5e8f\u7684\u89c6\u9891\u3002\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u547d\u4ee4\u5728\u5149\u76d8\u4e0a\u7684\u6b63\u786e\u4f4d\u7f6e\u76f4\u63a5\u7cbe\u786e\u5730\u521b\u5efa\u8584\u7247\u6bd4\u7279\u6765\u4fee\u590dSherston\u5f31\u6bd4\u7279\u7684\u6545\u969c\u526f\u672c\u3002", "note_en": "Floppy disc copy protection schemes are varied and interesting. It&#39;s an interesting intellectual challenge: what schemes can be created whereby home computers could reliably read a given disc, but not be able to easily (or at all) write that data back in the same format?  When talking about floppy disc copy protection code, I find it useful to split into two separate pieces:\n The loader code that obfuscates the check of the on-disc bits and the game code, making the check hard to &#34;patch out&#34;.\n This post concerns the former: on-disc bits. Some of my favorite on-disc schemes include the so-called &#34; Spiradisc&#34; protection scheme and the fuzzy bits scheme used by Dungeon Master for the Atari ST, as  explained in excellent detail in this article. I also recommend this great overview of  Commodore 64 disc protection schemes. To be charitable, the Commodore 64 had a.... &#34;quirky&#34; disc drive setup.\n I recently encountered an on-disc scheme on a BBC Micro disc that was more sophisticated than I was expecting: weak bits. Weak bits and similar schemes were celebrated in the 16-bit era but here we have it in the 8-bit era.\n    Floppy disc drives and controllers are likely simpler than you think. The job of the floppy drive is to take the analog magnetic information on a disc surface and turn it into a series of digital pulses. The job of the floppy controller is to take the series of digital pulses, discern timing, and generate a string of data bytes. The floppy controller usually also has the responsibility of spotting special marker bytes in the pulse stream so that distinct sectors can be identified.\n      Every peak in the blue line is the drive head sensing a magnetic flux reversal on the disc surface. Upper and lower peaks are treated identically and result in a digital pulse getting sent to the disc controller, which is the yellow line.\n Note that tools such as an OmniFlop, KryoFlux or GreaseWeazle might occasionally refer to &#34;raw flux&#34; reads or dumps but beware they that only get to see the yellow line in the trace above, which is a lossy view of the blue line.\n  Looking at the yellow line, you may notice that there&#39;s a fairly regular cadence to the peaks. In fact, every 4 microseconds, there is a timing &#34;slot&#34; and there will either be a pulse or no pulse. If there&#39;s a pulse, that&#39;s a 1 bit. No pulse and that&#39;s a 0 bit. And as simple as that, there&#39;s a bit stream for the disc controller to interpret and hand off to the host computer.\n  Different computers use different encoding schemes. We&#39;re focusing on the BBC Micro this post, where most discs used FM encoding, aka. single density. This is a very simple encoding, an evidenced by the fact we can eyeball the 0 and 1 bits in the scope trace above.  MFM encoding was generally more common in the era.\n    The disc controller takes the pulse stream and makes sense of it. As mentioned above, in FM (sometimes called DFM) encoding, each pulse or non-pulse represents a 1 or 0 bit. These bits are a mix of clock bits and actual data bits. Clock bits are needed for a couple of reasons: as a source of timing to sync to, and also to prevent the disc drive from thinking it has lost the signal. There must be a pulse at least every 8us to keep everything reliable. FM encoding takes the simple route: every other on-disc bit is a clock bit and they will all be 1 almost all of the time.\n  So now we know how to separate data bits from clock bits, let&#39;s have a quick look at what a sequence of data bytes on the disc surface might look like. There&#39;s a simple protocol for describing sectors on the disc, called the &#34;IBM Diskette&#34;, which is described in the  8271 datasheet.\n    FF FF FF 00 00 00  FE  00 00 00 01  F1 D3  FF FF FF 00 00 00  FB  01 02 03 04 05 ..\n  The green data bytes are padding between sectors, or between sector headers and sector data. They help the controller maintain correct synchronization, and to re-gain synchronization at the correct point. The padding sequences are typically longer on a real disc, but are shortened above for clarity; they would still suffice.\n  The sector header identification byte is the  FE, which is followed by 4 bytes of sector header and a 2-byte CRC. The sector is declaring it is on track 0, head 0, and it is sector 0, sized 256 bytes. The CRC is correct. The sector data identification byte for non-deleted data is  FB, and 256 bytes of data are expected to follow, then another 2-byte CRC. A typical track might contain 10 such padding + sector header + padding + sector data sequences.\n  The astute reader would ask: &#34;oh! but what if the FE or FB bytes occur in actual sector data, as they are bound to do from time to time?&#34;\n That is a great question and the answer lies in the clock bits. Every byte above has 0xFF for its clock bits (all set) except 0xFE and 0xFB, which have 0xC7 for the clock bits. i.e. some of the clock bits are missing! That makes it possible to identify sector header and sector data markers accurately. Note that the combination of these special data bytes plus clock byte is chosen so that still, the invariant is keep that there are never 2 0 bits in a row on the disc surface.\n    The BBC Micro disc protection journey is a fairly meandering one. It seems to have been based on a classical arms race approach: a software publisher would publish a new disc with some new quirk on it, and then a new disc copy program would come out which understood the quirk. And repeat a few iterations!\n The journey is also complicated by two very different disc controller chips being used during the machine&#39;s lifetime: the Intel 8271 and the  Western Digital 1770/1772. Both chips had different capabilities and quirks. A good copy protection on one of the chips might be trivial to copy on the other. Also, some earlier BBC Micro discs were made that did not end up being compatible with 1770 based systems.\n   Early Micro Power titles, such as  Ghouls, used non-standard numbers of sectors on many tracks, such as 5 sectors of 512 bytes each instead of 10 sectors of 256 bytes each. This is easy to copy if you have a copy program that checks the sector headers first and then decides how many there are and what sizes based on that. It would be easy to scoff at such a simple protection but it&#39;s likely it did what it needed to at the time of launch: prevent casual disc copying using the built-in DFS (Disc Filing System) commands *COPY or *BACKUP (both of which expected well-formatted DFS discs, which meant 10 sectors per track).\n The Superior Software classic,  Citadel, used &#34;deleted data&#34;. Every sector on a disc can be marked as either normal or deleted by the one byte mark that occurs directly before the sector data bytes. This is again a simple protection that a copier can handle as long as it knows about the concept of deleted data. What&#39;s interesting is that Superior did release a few titles with more advanced protection -- most notably the legendary  Exile. However there are  stories about the protection not loading correctly with some setups, so Superior discs from then on can all be seen using just the simple deleted data protection. Presumably: once bitten, twice shy.\n The most iconic game on the BBC Micro may well be  Elite. One of the tricks it used was an &#34;unformatted track&#34; in the middle of the disc. An unformatted track does not have any recognizable sector headers. This is perhaps the first protection that made disc copy programs sweat. Particularly on the 8271 floppy controller, there is no &#34;unformat&#34; command, only a &#34;format&#34; command. This was resolved decisively in favor of the disc copy programs, though, with a clever trick: if you format a track as one giant 4096 byte sector, you win immediately. What happens is that the single sector header is written at the start of the track, but then the 4096 bytes of sector data  wrap around across the end of the track (which is 3125 bytes long) and trash the only sector header! So the track isn&#39;t really unformatted, but all that is needed is that the disc controller doesn&#39;t see any sector headers -- mission accomplished.\n Another fairly ubiquitous protection was mismatched physical / logical track IDs in the sector header. This was also used by Elite, which also used unusually large logical sector IDs. This is easy to copy if you know you&#39;re looking for the situation. Normally, the disc controller (particularly the 8271) will get upset if it sees a track mismatch but you can fake the controller out by setting its internal track register to match, with a special command.\n Later on in the BBC Micro&#39;s life, some publishers of software on disc upped their game. It became common to see extra data bytes &#34;hidden&#34; in between sectors. Simplistic attempts to copy these bytes would fail by overwriting a following sector. 1770-based disc copiers can handle this situation easily unless the hidden bytes are &#34;reserved&#34; in the 1770&#39;s write track protocol. It  is possible to copy these situations well with both an 8271 or 1770 based copier, but I haven&#39;t yet found one that makes a decent effort. It is necessary to do things like take direct control of the disc controller chip, and issue commands with precise timing, and abort the controller mid-command with similarly precise timing.\n Another favorite pastime of disc protection authors was a creative way of reducing copying without necessarily improving the underlying protection mechanism:  attack the copy program itself. The copy programs needed a bunch of logic to work out what sector setup they were encountering. It&#39;s not easy logic, so breaking it was fruitful. Here&#39;s a few shots (under emulation, but real hardware behaves identically :) of  Exile breaking Vector 2:\n          Given the copy protection arms race described for games above, it was a surprise to find a smaller educational software house with an on-disc protection format light years ahead. Sherston Software had a great catalog of software that my kids still enjoy today, with our current favorite being  Space Mission Mada.\n  Many Sherston Software discs use weak bits protection. We should briefly define terms because they are not consistently used; the most sensible and broadly agreed terms appear to be:\n Weak bits. Flaky bits caused by a weak signal or non-existent magnetic signal on the disc surface. You might also see the term no-flux area (NFA), which is the same as a non-existent signal. Weak bits are almost always a non-existent signal, as opposed to a weak signal. The flaky nature of weak bits actually comes out of the drive electronics: when there are no clear flux changes, the drive just amplifies harder until it starts seeing and signaling ghosts within the noise.\n Fuzzy bits. Flaky bits caused by a strong, clear signal but where the timings of the read pulses are borderline. The borderline timing means the disc controller chip cannot be sure whether a pulse is supposed to be a 1 bit or a 0 bit. It&#39;ll change its mind from read to read.\n The use of weak bits is advanced because it&#39;s one of the on-disc protections that arise when you do a first principles analysis:\n Weak bits give a &#34;reliable&#34; read result: you can reliably depend on them to read back differently from read-to-read!\n Weak bits  cannot be written by the standard disc controllers. The disc controllers do everything in their power to lay down bits that read back deterministically. That&#39;s their job! There&#39;s no &#34;write weak signal&#34; flag and there&#39;s no &#34;write timing violations&#34; flag.\n I wrote to the author of Space Mission Mada, Simon Hosler. It turns out he also devised the weak bits protection, along with his electronics geek next door neighbor! In Simon&#39;s words:\n  &#34; Soft lock (was what we called it) was actually my system, so what I remember\u2026 This came about because I lived next door to an electronics geek! \ud83d\ude0a So break the write data line of the parallel disk cable. Add a bit of electronics to this line. (thank you Mike) Most of the time this electronics does nothing \u2013 lets the data go through as normal. If you turn it on (I think I did this through the serial port) and write to a single sector - it would count the bits going through say 256 \u2013 and then stop the next 256 bits going through&#34;\n  I happen to have an original Sherston disc with weak bits protection,  Animated Alphabet. Here&#39;s what the weak bits patch of disc looks like with the drive wired up to an oscilloscope:\n    The effect of Simon&#39;s widget in creating batches of weak bits can clearly be seen. This really was genius for the time, being one of the earlier swings at creating disc surfaces fundamentally uncopyable without special hardware. Not only that, but it works the same on both 8271 and 1770 based systems since it&#39;s the drive electronics that are being induced to create the quasi-randomness. This leads to a simpler, more reliable setup with just a single code path. It is also very compatible with all the myriad of different DFS (Disc Filing System) variants because the code to check the copy protection doesn&#39;t need fancy DFS calls. It just needs to read a sector -- very standard! -- a few times and see if the bytes coming back vary or not.\n    I don&#39;t know when the first flaky bits based disc protection was released. There&#39;s probably someone out there who can point to an example from the 1970s! But it&#39;s worth comparing dates on some examples we do know about.\n  Dating the first Sherston Software title to use weak bits protection is tough. I have an image of  Mr. Yog and the Nippet,\u00a0(c) 1984, with weak bits protection. There&#39;s even an image of  Short Vowel Sounds, (c) 1983, with weak bits protection. However, we also have seen the same Sherston title released with multiple different disc revisions with different copy protection systems. We can establish an initial latest bound on the weak bits protection with an image of  The Wizard&#39;s Revenge\u00a0that happens to use the weak bits protection and also includes a commercial duplicator fingerprint on its one-past-the-end track, as seen here in this hex editor view:\n    Fingerprints of this nature contain a date and time: 87 01 05, or Jan 5th, 1987 in this case.\n    So it seems likely that the Sherston weak bits went to production at least a year prior to the Dungeon Master fuzzy bits. Although these disc protections are not identical, they have very similar properties and capabilities.\n  What&#39;s further interesting is that the Dungeon Master fuzzy bits were the subject of a  patent filed in 1986. This could be one of those cases where other clever people had come up with prior art. It happens a lot.\n    No retro research would be complete without an attempt to push the bounds of what was thought possible back in the day. Accordingly, would it be possible to create a  software only solution to write weak bits to discs? Another way to ask the same question is: would it have been possible to create a disc copier that copied weak bits correctly?\n  It turns out the answer is yes! Or more specifically, the answer is a double yes. Using two different tricks, it is possible to create actual weak bits with the 8271 disc controller, and non-deterministic reads (resulting in the same sort of read effects as weak bits) with the 1770 disc controller.\n    The 8271 is a slightly strange chip to program. One thing is has is the concept of &#34;special registers&#34; which can be read and written. One such special register is the &#34;Drive Control Output Port&#34;:\n    The special registers aren&#39;t particularly well covered in  the data sheet, perhaps because they aren&#39;t supposed to be necessary for usage. That said, most 8271 driver implementations write this register to spin up the drive (by setting the LOAD HEAD bit and appropriate drive SELECT bit) in order to control the 8271&#39;s propensity to fail read/write commands with &#34;drive not ready&#34;.\n  The trick is to use this register to set the WRITE ENABLE bit as well as the LOAD HEAD and SELECT bits. This can only be done outside any other command, because Write Special Register is itself a command and selecting it will abort any other in-progress command. When WRITE ENABLE is active outside of a command, the disc drive&#39;s write head will be energized but no data pulses will be transmitted on the write data pin to the disc drive. The result is that the write head sweeps the disc surface clean of flux transitions. That creates weak bits / a no flux area. With a bit of careful timing, the write head can be energized and de-energized and any point(s) needed on a track to create weak bits where desired.\n    The trick on the 1770 is different. It may be possible to directly create weak bits by creatively programming the 1770 -- but if it is, I haven&#39;t found it. Instead, we focus on the BBC Micro&#39;s 1770 control register. This is a register external to the 1770 that is necessary to control external 1770 pins. For example, unlike the 8271, the 1770 selects disc drive 0 vs. drive 1 via an external pin instead of as parameters passed to controller commands. The &#34;Drive Control Register&#34; is documented well  at the bottom of this document.\n  Since this register is external to the 1770, we can mess with it while a command is in progress. The specific trick we use is to start a single density write command and then flip to double density some number of bytes in. Double density (MFM) timing is completely different to single density timing, so reading back the resulting patterns as single density read confuses the disc controller significantly, to the point that non-deterministic read results are returned. This is not weak bits on the disc but the effect is the same as far as the copy protection check is concerned: read the sector twice and check the result varies! The bits definitely end up flaky.\n  Does it work? Yes. Here&#39;s a video of me using my work-in-progress &#34; discbeast&#34; utility. We fix a failed copy of Sherston weak bits by using commands to directly and precisely create flaky bits at the correct point on the disc.", "posttime": "2020-06-28 05:35:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u76d8,bits,\u5149\u76d8", "title": "\u5f31\u4f4d\u8f6f\u76d8\u4fdd\u62a4\uff1a\u5173\u4e8e8\u4f4d\u7684\u53e6\u4e00\u4e2a\u8d77\u6e90\u6545\u4e8b", "title_en": "Weak bits floppy disc protection: an alternate origins story on 8-bit", "transed": 1, "url": "https://scarybeastsecurity.blogspot.com/2020/06/weak-bits-floppy-disc-protection.html", "via": "", "real_tags": ["\u8f6f\u76d8", "bits", "\u5149\u76d8"]}, {"category": "", "categoryclass": "", "imagename": "df40dc2b0a569831caf0bfa645d8d5cb.jpg", "infoid": 1008657, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6628\u665a\uff0c\u5f53\u6211\u5728\u51cc\u66682\u70b943\u5206\uff0c\u5f53\u5168\u4e16\u754c\u7684\u6210\u5e74\u4eba\u90fd\u5728\u7761\u89c9\u7684\u65f6\u5019\uff0c\u5f53\u6211\u5728\u4e92\u8054\u7f51\u4e0a\u722c\u884c\u65f6\uff0c\u6211\u7684\u773c\u775b\u626b\u4e86\u4e00\u773c\uff0c\u6807\u9898\u662f\uff1a\u201c\u4e3a\u4ec0\u4e48\u6709\u4e1c\u897f\u800c\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\uff1f\u201d\u5728\u6211\u4e0a\u8fc7\u7684\u4e00\u4e2a\u7f51\u7ad9\u7684\u8fb9\u680f\u4e0a\u3002\u6211\u6ca1\u6709\u70b9\u51fb\u8fd9\u7bc7\u6587\u7ae0\u3002\n\u6211\u7ec8\u4e8e\u4e0a\u5e8a\u7761\u89c9\u4e86\uff0c\u8ba1\u5212\u7761\u516b\u4e2a\u5c0f\u65f6\uff0c\u4f46\u5728\u65e9\u4e0a7\u70b9\u6211\u51b3\u5b9a\uff0c\u5b9e\u9645\u4e0a\uff0c\u66f4\u597d\u7684\u8ba1\u5212\u662f\u8d77\u5e8a\u540e\u76ef\u7740\u5929\u82b1\u677f\u770b\u4e09\u4e2a\u5c0f\u65f6\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4ec0\u4e48\u4e1c\u897f\u3002\u800c\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\u3002\n\u6211\u4ee5\u524d\u542c\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u591a\u4eba\u90fd\u601d\u8003\u8fc7\u7684\u8001\u95ee\u9898\u3002\u4f46\u662f\u76f4\u5230\u4eca\u5929\u65e9\u4e0a7\u70b9\uff0c\u6211\u624d\u5b8c\u5168\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u591a\u4e48\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u95ee\u9898\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u800c\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u4f60\u60f3\u5f97\u8d8a\u591a\uff0c\u5b83\u5c31\u8d8a\u6ca1\u6709\u610f\u4e49\u3002\n\u9996\u5148\uff0c\u6211\u7684\u8111\u6d77\u4e2d\u6d6e\u73b0\u51fa\u201c\u7b49\u7b49--\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4efb\u4f55\u4e1c\u897f\uff1f\u201d\u4e3a\u4ec0\u4e48\u4f1a\u6709\u7a7a\u95f4\u3001\u65f6\u95f4\u3001\u7269\u8d28\u548c\u80fd\u91cf\u5462\uff1f\n\u7136\u540e\uff0c\u6211\u4f1a\u8003\u8651\u53e6\u4e00\u79cd\u9009\u62e9\u3002\u5982\u679c\u53ea\u6709\u2026\u4f1a\u600e\u4e48\u6837\u3002Nothing\u2026\u3002\u5728\u6240\u6709\u2026\u3002\u66fe\u7ecf\u7684\u2026\u3002\u54ea\u91cc\u90fd\u884c\uff1f\u5982\u679c\u4e00\u5f00\u59cb\u4ec0\u4e48\u90fd\u6ca1\u6709\u5462\uff1f\u4f46\u662f\u4ec0\u4e48\uff1f\u4e0d\u662f\u7684\u3002\u90a3\u4e0d\u53ef\u80fd-\u80af\u5b9a\u6709\u4ec0\u4e48\u4e1c\u897f\u3002\n\u6ca1\u6709\u4ec0\u4e48\u662f\u771f\u6b63\u75af\u72c2\u7684\u6982\u5ff5\u3002\u6211\u4f1a\u4e00\u76f4\u5728\u60f3\u4e00\u4e2a\u865a\u5047\u7684\u865a\u65e0-\u5c31\u50cf\u4e00\u4e2a\u5de8\u5927\u7684\u7a7a\u771f\u7a7a(\u8fd9\u662f\u4ec0\u4e48)\uff0c\u6216\u8005\u8fd9\u91cc\u4ec0\u4e48\u90fd\u4e0d\u662f\uff0c\u4f46\u5176\u4ed6\u7ef4\u5ea6\u7684\u5176\u4ed6\u5b87\u5b99(\u8fd9\u662f\u4ec0\u4e48)\uff0c\u6216\u8005\u73b0\u5728\u4ec0\u4e48\u90fd\u4e0d\u662f\uff0c\u4f46\u5728\u67d0\u4e2a\u65f6\u5019\uff0c\u5728\u73b0\u5728\u4e4b\u524d\u6216\u4e4b\u540e\uff0c\u6709\u4e00\u4e9b(\u8fd9\u662f\u4ec0\u4e48)\u3002\u751a\u81f3\u5728\u6211\u4e0a\u6bb5\u7684\u95ee\u9898\u4e2d\uff0c\u6211\u4e5f\u63d0\u5230\u4e86\u201c\u66fe\u7ecf\u201d\u548c\u201c\u4efb\u4f55\u5730\u65b9\u201d--\u8fd9\u4e24\u4e2a\u8bcd\u672c\u8eab\u53ea\u5b58\u5728\u4e8e\u67d0\u7269\u7684\u4e16\u754c\u4e2d\uff0c\u56e0\u4e3a\u65f6\u95f4\u548c\u7a7a\u95f4\u5c31\u662f\u67d0\u7269\u3002\n\u4eca\u5929\u65e9\u4e0a7\u70b9\u523010\u70b9\u4e4b\u95f4\uff0c\u5f53\u6211\u76ef\u7740\u5929\u82b1\u677f\u770b\u7684\u65f6\u5019\uff0c\u6211\u7684\u773c\u775b\u4e00\u76f4\u7741\u5f97\u683c\u5916\u5927\uff0c\u5c31\u662f\u8bd5\u56fe\u628a\u6211\u7684\u5934\u56f4\u7ed5\u5728\u771f\u5b9e\u7684\u4e1c\u897f\u4e0a\uff0c\u800c\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\u8bf4\u51fa\u6765\u3002\n\u4f46\u4e8b\u5b9e\u662f\uff0c\u5e76\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709--\u786e\u5b9e\u6709\u4e00\u4e9b\u4e1c\u897f\u3002\u6211\u4eec\u662f\u6709\u4ef7\u503c\u7684\u4eba\u3002\u5730\u7403\u662f\u4ec0\u4e48\u4e1c\u897f\u3002\u592a\u7a7a\u662f\u4e00\u79cd\u4e1c\u897f\u3002\u65f6\u95f4\u5f88\u91cd\u8981\u3002\u53ef\u89c2\u6d4b\u7684\u5b87\u5b99\u548c\u5b83\u76841000\u4ebf\u4e2a\u661f\u7cfb\u662f\u6709\u610f\u4e49\u7684\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u6211\u7684\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u6240\u6709\u8fd9\u4e9b\u4e1c\u897f\u90fd\u5b58\u5728\u5462\uff1f\u90a3\u6211\u4eec\u5230\u5e95\u5728\u54ea\u91cc\uff1f\u5982\u679c\u8fd9\u4e2a\u5b87\u5b99\u662f\u552f\u4e00\u5b58\u5728\u7684\u4e1c\u897f\uff0c\u90a3\u5c31\u6709\u70b9\u5947\u602a\u548c\u4e0d\u5408\u903b\u8f91\u4e86--\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5927\u7a7a\u95f4\u4f1a\u5728\u4e00\u4e2a\u4e00\u65e0\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u72ec\u81ea\u5b58\u5728\u5462\uff1f\u5bf9\u6211\u6765\u8bf4\uff0c\u66f4\u7b26\u5408\u903b\u8f91\u7684\u662f\u5192\u6ce1\u7684\u3001\u8d77\u6ce1\u7684\u591a\u5143\u5b87\u5b99\u7684\u60c5\u51b5-\u4f46\u597d\u5427\uff0c\u6211\u4eec\u4ecd\u7136\u6709\u540c\u6837\u7684\u95ee\u9898\u3002\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u5192\u6ce1\u7684\u4e8b\u60c5\uff1f\u5728\u54ea\u91cc\u53d1\u751f\u7684\uff1f\u5b83\u662f\u5728\u4ec0\u4e48\u80cc\u666f\u4e0b\u53d1\u751f\u7684\uff1f\n\u8fd9\u662f\u6211\u4eec\u7684\u4e3b\u8981\u95ee\u9898--\u6211\u4eec\u6ca1\u6709\u80cc\u666f\u3002\u8fd9\u5c31\u50cf\u662f\u653e\u5927\u4e86\u4e00\u4e2a\u5b57\u6bcd\uff0c\u800c\u4e0d\u77e5\u9053\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f--\u8fd9\u4e2a\u5b57\u6bcd\u662f\u4e66\u7684\u4e00\u90e8\u5206\u5417\uff1f\u5728\u67d0\u4e2a\u56fe\u4e66\u9986\u91cc\u5417\uff1f\u5b83\u662f\u72ec\u7acb\u5b58\u5728\u7684\u5355\u8bcd\u7684\u4e00\u90e8\u5206\u5417\uff1f\u8fd9\u662f\u5355\u72ec\u7684\u4e00\u5c01\u4fe1\u5417\uff1f\u8fd9\u662f\u4e0d\u662f\u6211\u4eec\u4e0d\u7406\u89e3\u7684\u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff1f\u6211\u4eec\u4ed6\u5988\u7684\u4e0d\u77e5\u9053\uff0c\u56e0\u4e3a\u6211\u4eec\u80fd\u770b\u5230\u7684\u53ea\u6709\u8fd9\u4e00\u5c01\u4fe1\u3002\u6211\u4eec\u5bf9\u4e0a\u4e0b\u6587\u4e00\u65e0\u6240\u77e5\u3002\n\u5b97\u6559\u4eba\u58eb\u5f88\u5feb\u5c31\u4f1a\u56de\u7b54\u201c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e1c\u897f\u800c\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\uff1f\u201d\u6211\u4e0d\u4fe1\u6559\uff0c\u4f46\u5f53\u6211\u4ed4\u7ec6\u601d\u8003\u540e\uff0c\u6211\u610f\u8bc6\u5230\uff0c\u5730\u7403\u4e0a\u7684\u751f\u547d\u662f\u7531\u5176\u4ed6\u667a\u6167\u751f\u547d\u521b\u9020\u7684\uff0c\u6216\u8005\u6211\u4eec\u662f\u6a21\u62df\u7684\u4e00\u90e8\u5206\uff0c\u6216\u8005\u4e00\u5806\u5176\u4ed6\u7684\u53ef\u80fd\u6027\u90fd\u9700\u8981\u6211\u4eec\u6709\u4e00\u4e2a\u521b\u9020\u8005\uff0c\u8fd9\u4e00\u70b9\u548c\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\u4e00\u6837\u6709\u53ef\u80fd\u3002\u4f46\u5728\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u521b\u9020\u8005\u7684\u5b58\u5728\u4ecd\u7136\u9700\u8981\u4e00\u4e2a\u89e3\u91ca-\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e00\u4e2a\u539f\u59cb\u521b\u9020\u8005\uff0c\u800c\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709-\u5bf9\u6211\u6765\u8bf4\uff0c\u4efb\u4f55\u5b97\u6559\u89e3\u91ca\u90fd\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u78b0\u58c1\u3002\n\u4eca\u5929\u65e9\u4e0a\u6211\u505a\u4e86\u4e00\u70b9\u9605\u8bfb\uff0c\u770b\u770b\u90a3\u4e9b\u5bf9\u8fd9\u4e2a\u95ee\u9898\u601d\u8003\u5f97\u6bd4\u6211\u591a\u5f97\u591a\u7684\u4eba\u662f\u5982\u4f55\u770b\u5f85\u8fd9\u4e2a\u95ee\u9898\u7684\u3002\u4e0d\u8db3\u4e3a\u5947\u7684\u662f\uff0c\u6ca1\u6709\u4eba\u6709\u5934\u7eea\u3002\n\u67d0\u4e9b\u79d1\u5b66\u5bb6\u8ba4\u4e3a\uff0c\u91cf\u5b50\u529b\u5b66\u8868\u660e\uff0c\u6ca1\u6709\u4ec0\u4e48\u662f\u5929\u751f\u7684\u201c\u4e0d\u7a33\u5b9a\u201d\u7684\uff0c\u65f6\u7a7a(\u67d0\u7269)\u7684\u5c0f\u6c14\u6ce1\u6709\u53ef\u80fd(\u4ece\u65e0\u5230\u6709)\u81ea\u53d1\u5f62\u6210\uff0c\u5982\u679c\u4e00\u4ef6\u4e8b\u6ca1\u6709\u88ab\u91cf\u5b50\u7269\u7406\u5b9a\u5f8b\u7981\u6b62\uff0c\u5b83\u80af\u5b9a\u4f1a\u53d1\u751f\u3002\u56e0\u6b64\uff0c\u91cf\u5b50\u7269\u7406\u5b66\u5bb6\u8bf4\uff0c\u201c\u67d0\u79cd\u4e1c\u897f\u201d\u7684\u51fa\u73b0\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u6211\u4f1a\u628a\u6574\u6bb5\u8bdd\u90fd\u653e\u5230\u4ed6\u5988\u7684\u6a71\u67dc\u91cc\u3002\n\u5176\u4ed6\u4eba\uff0c\u5982\u4e54\u5c14\u00b7\u963f\u80af\u5df4\u8d6b\uff0c\u5219\u8ba4\u4e3a\u6839\u672c\u5c31\u6ca1\u6709\u201c\u4e00\u65e0\u6240\u6709\u201d\u8fd9\u56de\u4e8b\u3002\u4ed6\u89e3\u91ca\u8bf4\uff1a\n\u5728\u6211\u770b\u6765\uff0c\u201c\u65e0\u201d\uff0c\u5c3d\u7ba1\u5b83\u7684\u7b80\u5355\u3001\u5bf9\u79f0\u548c\u7f3a\u4e4f\u4efb\u610f\u6027\uff0c\u4f46\u4ecd\u7136\u662f\u4e00\u79cd\u5b8c\u5168\u60f3\u8c61\u7684\u72b6\u6001\u6216\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u4fe1\u5730\u8bf4\uff0c\u5b83\u4ece\u6765\u6ca1\u6709\u5b58\u5728\u8fc7\u3002\u5728\u67d0\u4e2a\u65cb\u6da1\u661f\u7cfb\u4e2d\u56f4\u7ed5\u4e00\u9897\u666e\u901a\u9ec4\u8272\u6052\u661f\u8fd0\u884c\u7684\u4e00\u9897\u84dd\u8272\u5c0f\u884c\u661f\u4e0a\uff0c\u201c\u4ec0\u4e48\u90fd\u4e0d\u662f\u201d\u662f\u5728\u67d0\u4e2a\u4e8b\u7269\u7684\u4e16\u754c\u91cc\uff0c\u5728\u54f2\u5b66\u5bb6\u7684\u5927\u8111\u91cc\u7b49\u7b49\u3002\n\u6211\u4e0d\u592a\u660e\u767dAchenbach\u7684\u903b\u8f91\u3002\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u6709\u7269\u8d28\u4e16\u754c\u5462\uff1f\u4e3a\u4ec0\u4e48\u7269\u8d28\u4e16\u754c\u662f\u81ea\u7136\u800c\u7136\u7684\u4e1c\u897f\u5462\uff1f\u4f46\u662f\u2026\u3002\u5982\u679c\u6ca1\u6709\u7269\u8d28\u4e16\u754c-\u6c38\u8fdc-\u90a3\u4f1a\u600e\u6837\uff0c\u4ec0\u4e48\u90fd\u6ca1\u6709\u5417\uff1f\n\u5982\u679c\u4f60\u559c\u6b22\u7b49\u5f85\u4f46\u662f\u4e3a\u4ec0\u4e48\uff0c\u6ce8\u518c\u7535\u5b50\u90ae\u4ef6\u5217\u8868\uff0c\u6211\u4eec\u4f1a\u5728\u65b0\u5e16\u5b50\u51fa\u6765\u7684\u65f6\u5019\u7ed9\u4f60\u53d1\u9001\u65b0\u7684\u5e16\u5b50\u3002", "note_en": "Last night, as I was creeping around the internet at 2:43am while the adults of the world slept, my eyes glanced by the headline, \u201cWhy is there something instead of nothing?\u201d on the sidebar of a site I was on. I didn\u2019t click the article.\n I finally went to bed, planning to sleep eight hours, when at 7am I decide that actually, it was a better plan to wake up and stare at the ceiling for three hours thinking about why there was something. Instead of nothing.\n I had heard the question before. It\u2019s an old one that lots of people have pondered. But until 7am today, it hadn\u2019t fully  hit me how unbelievably boggling a question it was. It\u2019s not a question\u2014it\u2019s  the question\u2014and the more you think about it, the less sense it makes.\n First, my mind goes to \u201cWait\u2014 why is there anything at all?\u201d Why is there space and time and matter and energy at all?\n Then, I think about the alternative. What if there were just\u2026nothing\u2026at all\u2026ever\u2026anywhere? What if nothing ever  was in the first place? But what? No. That can\u2019t\u2014there  has to be  something.\n Nothing is truly a crazy concept. I\u2019d keep thinking about a false nothing\u2014like a vast empty vacuum (which is something) or nothing  here, but other universes elsewhere in other dimensions (which is something), or nothing  now, but at  some point, way before or after now, there being something (which is something). Even in my question in the paragraph above, I refer to \u201cever\u201d and \u201canywhere\u201d\u2014two words that themselves only exist in the world of something, because time and space are something.\n Trying to wrap my head around true, utter  nothing, is what kept my eyes extra wide as I stared at the ceiling between 7am and 10am this morning.\n But the fact is, there isn\u2019t nothing\u2014there\u2019s something. We\u2019re something. The Earth is something. Space is something. Time is something. The observable universe and its 100 billion galaxies are something.\n Which then leads me to,  Why? Why does all this something exist? And where the hell are we? If this universe is the only thing there is, that\u2019s kind of weird and illogical\u2014why would this big space just exist by itself in an otherwise nothing situation? More logical, to me, is the bubbling, frothing  multiverse situation\u2014but okay, we still then have the same problem. Why is this bubbling thing happening?  Where is it happening? In what  context is it happening?\n That\u2019s our main issue\u2014we have no  context. It\u2019s like being zoomed in on a single letter and not knowing anything else\u2014is the letter part of a book? In a library somewhere? Is it part of a word that exists by itself? Is it a single letter all alone? Is it part of some code we don\u2019t understand? We have no fucking idea, because all we can see is this one letter. We have no idea about the context.\n Religious people have a quick answer to \u201cWhy is there something instead of nothing?\u201d I\u2019m not religious, but when  I\u2019ve thought hard enough about it, I\u2019ve realized that it\u2019s as plausible as anything else that life on Earth was created by some other intelligent life, or that we\u2019re part of a simulation, or a bunch of other possibilities that would all entail us having a  creator. But in each possible case, the existence of the creator still needs an explanation\u2014 why was there an original creator instead of nothing\u2014and to me, any religious explanation inevitably hits the same wall.\n I did a little reading this morning to see how people who had thought about this a lot more than I had felt about the question. Not surprisingly, no one has a clue.\n Certain scientists believe that quantum mechanics suggests that  nothing is inherently \u201cunstable,\u201d that it\u2019s possible for little bubbles of space-time (something) to form spontaneously (out of nothing), and that if a thing is not forbidden by the laws of quantum physics, it is guaranteed to happen. 1 Therefore, say quantum physicists, the arising of \u201csomething\u201d was inevitable. I\u2019ll file this whole paragraph in the Whatever the Fuck That Means cabinet.\n Others, like Joel Achenbach,  believe that there\u2019s no such thing as nothing in the first place. He explains:\n Seems to me that \u201cnothing,\u201d for all its simplicity and symmetry and lack of arbitrariness, is nonetheless an entirely imaginary state, or condition, and we can say with confidence that it has never existed. \u201c Nothing\u201d is dreamed up in the world of something, in the brains of philosophers etc. on a little blue planet orbiting an ordinary yellow star in a certain spiral galaxy.\n I don\u2019t quite get Achenbach\u2019s logic. Why does there  have to be a physical world at all? Why is a physical world an automatic thing? But then\u2026if there  weren\u2019t a physical world\u2014ever\u2014then what, there\u2019s just fucking nothing at all?\n    If you like Wait But Why, sign up for the  email list and we\u2019ll send you new posts right when they come out.", "posttime": "2020-06-28 05:34:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e1c\u897f", "title": "\u4e3a\u4ec0\u4e48\u6709\u4e1c\u897f\u800c\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\uff1f(2015)", "title_en": "Why Is There Something Instead of Nothing? (2015)", "transed": 1, "url": "https://waitbutwhy.com/table/why-is-there-something-instead-of-nothing", "via": "", "real_tags": ["\u4e1c\u897f"]}, {"category": "", "categoryclass": "", "imagename": "3ad80ec0375e6897e4d2083fa18fcea2.png", "infoid": 1008656, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea3\u6708\u4efd\u4ee5\u6765\uff0c\u4e00\u4e9b\u5730\u533a\u62a5\u544a\u7684\u6b7b\u4ea1\u4eba\u6570\u662f\u5e73\u65f6\u7684\u4e09\u500d\uff0c\u4f46\u6b27\u6d32\u5927\u90e8\u5206\u5730\u533a\u90fd\u80fd\u591f\u5ea6\u8fc7\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u7684\u7b2c\u4e00\u6ce2\uff0c\u800c\u6ca1\u6709\u51fa\u73b0\u4efb\u4f55\u660e\u663e\u7684\u8d85\u989d\u6b7b\u4ea1\u3002\u6211\u4eec\u6536\u96c6\u4e86\u6765\u81ea500\u4e2a\u6b27\u6d32\u5730\u533a\u7684\u56fd\u5bb6\u4ee5\u4e0b\u6570\u636e\uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u75c5\u6bd2\u7684\u4f20\u64ad\u60c5\u51b5\u3002\n\u968f\u7740\u7b2c\u4e00\u6ce2\u51a0\u72b6\u75c5\u6bd2\u7684\u9010\u6e10\u6d88\u9000\uff0c\u8fb9\u5883\u6b63\u5728\u5f00\u653e\uff0c\u5c01\u9501\u653f\u7b56\u4e5f\u5728\u89e3\u9664\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5bf9\u5927\u6d41\u884c\u7684\u6b7b\u4ea1\u4eba\u6570\u4e5f\u6709\u4e86\u8d8a\u6765\u8d8a\u5168\u9762\u7684\u4e86\u89e3\u3002\n\u6765\u81ea20\u4e2a\u6b27\u6d32\u56fd\u5bb6\u7684\u6570\u636e\u663e\u793a\uff0c\u81ea3\u6708\u4efd\u4ee5\u6765\uff0c\u6b7b\u4ea1\u4eba\u6570\u6bd4\u5f80\u5e38\u591a\u4e8620\u4e07\u4eba\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u8fd9\u4e00\u989d\u5916\u7684\u6b7b\u4ea1\u4eba\u6570\u3002\n\u6211\u4eec\u7684\u5206\u6790\u8868\u660e\uff0c\u6b7b\u4ea1\u4eba\u6570\u5728\u5730\u7406\u4e0a\u5206\u5e03\u975e\u5e38\u4e0d\u5747\u5300\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u6211\u4eec\u6536\u96c6\u4e86500\u4e2a\u56fd\u5bb6\u4ee5\u4e0b\u5730\u533a\u7684\u989d\u5916\u6b7b\u4ea1\u6570\u636e\u3002\n\u53d7\u5f71\u54cd\u6700\u4e25\u91cd\u768450\u4e2a\u5730\u533a\u5360\u6240\u6709\u8d85\u989d\u6216\u201c\u975e\u6b63\u5e38\u201d\u6b7b\u4ea1\u4eba\u6570\u7684\u4e00\u534a\u4ee5\u4e0b\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u6211\u4eec\u770b\u5230\u4e86\u6570\u4ee5\u5428\u8ba1\u7684\u5168\u56fd\u6027\u51a0\u72b6\u75c5\u6bd2\u6bd4\u8f83\u3002\u4f46\u662f\uff0c\u6bd4\u8f83\u56fd\u5bb6\u5f88\u5bb9\u6613\u4ea7\u751f\u8bef\u5bfc\u3002\u5927\u6d41\u884c\u7684\u4f20\u64ad\u662f\u5730\u533a\u6027\u7684\uff0c\u800c\u4e0d\u662f\u5168\u56fd\u6027\u7684\u3002\n\u5f53\u6211\u4eec\u6bd4\u8f83\u6574\u4e2a\u6b27\u6d32\u7684\u5730\u533a\u8d85\u989d\u6b7b\u4ea1\u4eba\u6570\u65f6\uff0c\u610f\u5927\u5229\u7684\u51e0\u4e2a\u5730\u533a\u8131\u9896\u800c\u51fa\u3002\u610f\u5927\u5229\u5317\u90e8\u7684\u8d1d\u52a0\u83ab\u662f\u51a0\u72b6\u75c5\u6bd2\u5728\u6b27\u6d32\u6700\u65e9\u6d41\u884c\u7684\u5730\u65b9\u4e4b\u4e00\uff0c\u622a\u81f34\u6708\u5e95\uff0c\u8be5\u5730\u533a\u7684\u6b7b\u4ea1\u4eba\u6570\u6bd4\u5f80\u5e38\u9ad8\u51fa\u8bb8\u591a\u500d\u3002\n\u4f46\u65e5\u5195\u5728\u610f\u5927\u5229\u7684\u8513\u5ef6\u5728\u5730\u7406\u4e0a\u96c6\u4e2d\u5728\u8be5\u56fd\u5317\u90e8\uff0c\u8fd9\u8868\u660e\u5b83\u5df2\u7ecf\u5f97\u5230\u4e86\u63a7\u5236\u3002\u5357\u90e8\u8bb8\u591a\u5730\u533a\u7684\u6b7b\u4ea1\u4eba\u6570\u90fd\u5904\u4e8e\u6b63\u5e38\u6c34\u5e73\u3002\n\u745e\u5178\u7684\u60c5\u51b5\u4e5f\u7c7b\u4f3c\uff0c\u8be5\u56fd\u4e5f\u53d7\u5230\u51a0\u72b6\u75c5\u6bd2\u7684\u91cd\u521b\u3002\u8be5\u56fd\u5927\u90e8\u5206\u8d85\u989d\u6b7b\u4ea1\u53d1\u751f\u5728\u9996\u90fd\u5730\u533a\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u90a3\u91cc\uff0c\u4e0d\u5e78\u7684\u671f\u4e2d\u4f11\u606f\u610f\u5473\u7740\uff0c\u5c31\u5728\u65b0\u75be\u75c5\u5728\u90a3\u91cc\u4f20\u64ad\u7684\u65f6\u5019\uff0c\u6570\u5343\u4eba\u6b63\u4ece\u963f\u5c14\u5351\u65af\u5c71\u8fd4\u56de\u3002\n\u5728\u5927\u6d41\u884c\u671f\u95f4\uff0c\u65af\u5fb7\u54e5\u5c14\u6469\u7684\u6b7b\u4ea1\u4eba\u6570\u6bd4\u5f80\u5e38\u591a\u51fa71%\uff0c\u9ad8\u4e8e\u6211\u4eec\u5206\u6790\u7684500\u4e2a\u5730\u533a\u4e2d\u966431\u4e2a\u4ee5\u5916\u7684\u6240\u6709\u5730\u533a\uff0c\u4e0e\u52a0\u6cf0\u7f57\u5c3c\u4e9a\u548c\u5e03\u9c81\u585e\u5c14\u7684\u6c34\u5e73\u76f8\u4f3c\u3002\u7136\u800c\uff0c\u5728\u745e\u5178\u7684\u5927\u90e8\u5206\u5730\u533a\uff0c\u6b7b\u4ea1\u4eba\u6570\u4e00\u76f4\u662f\u6b63\u5e38\u7684\u6216\u63a5\u8fd1\u6b63\u5e38\u7684\u3002\n\u75be\u75c5\u4f20\u64ad\u76f8\u5f53\u5747\u5300\u7684\u4e00\u4e2a\u56fd\u5bb6\u662f\u82f1\u56fd\u3002\u9664\u4e00\u4e2a\u5730\u533a\u5916\uff0c\u6240\u6709\u5730\u533a\u90fd\u62a5\u544a\u4e86\u660e\u663e\u7684\u8d85\u989d\u6b7b\u4ea1\u4eba\u6570\u3002\n\u5728500\u4e2a\u5730\u533a\u4e2d\uff0c\u6709136\u4e2a\u5730\u533a(27%)\u62a5\u544a\u4e86\u76f8\u5f53\u591a\u7684\u8d85\u989d\u6b7b\u4ea1\u4eba\u6570\u3002\u8fd9\u6bd4\u5927\u6d41\u884c\u671f\u95f4\u7684\u6b7b\u4ea1\u4eba\u6570\u81f3\u5c11\u591a\u51fa25%\u3002\u53e6\u6709158\u4eba\u62a5\u544a\u7684\u6b7b\u4ea1\u4eba\u6570\u7565\u9ad8\u4e8e\u6b63\u5e38\u6c34\u5e73\u3002\n\u867d\u7136\u5df2\u6709\u6570\u5343\u4eba\u4e27\u751f\uff0c\u4f46\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5c3d\u7ba1\u53d1\u751f\u4e86\u5927\u6d41\u884c\uff0c\u4f46\u572820\u4e2a\u88ab\u5206\u6790\u56fd\u5bb6\u7684\u6240\u6709\u5730\u533a\u4e2d\uff0c\u6709\u8fd1\u4e00\u534a\u7684\u5730\u533a\u8bb0\u5f55\u4e86\u6216\u591a\u6216\u5c11\u6b63\u5e38\u7684\u6b7b\u4ea1\u4eba\u6570\u3002\n\u5728\u65af\u6d1b\u4f10\u514b\u3001\u7acb\u9676\u5b9b\u548c\u4fdd\u52a0\u5229\u4e9a\uff0c\u6240\u6709(\u6216\u51e0\u4e4e\u6240\u6709)\u5730\u533a\u7684\u6b7b\u4ea1\u7387\u90fd\u5904\u4e8e\u6b63\u5e38\u6c34\u5e73\u3002\u5373\u4f7f\u662f\u5728\u610f\u5927\u5229\u3001\u6cd5\u56fd\u548c\u745e\u5178\u7b49\u906d\u53d7\u91cd\u521b\u7684\u56fd\u5bb6\uff0c\u8fd9\u4e9b\u56fd\u5bb6\u7684\u76f8\u5f53\u4e00\u90e8\u5206\u5730\u533a\u4e5f\u6ca1\u6709\u989d\u5916\u7684\u6b7b\u4ea1\u4eba\u6570\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u53ca\u5176\u80cc\u540e\u7684\u7814\u7a76\u662f\u901a\u8fc7\u4e0e\u6b27\u6d32\u6570\u636e\u65b0\u95fb\u7f51\u7684\u5408\u4f5c\u5b9e\u73b0\u7684\u3002\u6839\u636e\u8f9b\u8fea\u52a0\u6307\u5bfc\u65b9\u9488\uff0c\u60a8\u53ef\u4ee5\u81ea\u7531\u91cd\u65b0\u53d1\u5e03\u77e5\u8bc6\u5171\u4eab\u4e0b\u7684\u6240\u6709\u6545\u4e8b\u548c\u53ef\u89c6\u5316\u5185\u5bb9\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6570\u636e\u3002\n\u6211\u4eec\u7684\u5206\u6790\u662f\u57fa\u4e8e\u6bcf\u4e2a\u5730\u533a\u6bcf\u5929\u6216\u6bcf\u5468\u5168\u56e0\u6b7b\u4ea1\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u662f\u4ece\u6b27\u76df\u7edf\u8ba1\u5c40\u548c\u56fd\u5bb6\u7edf\u8ba1\u673a\u6784\u6574\u7406\u51fa\u6765\u7684\u3002(\u82f1\u56fd\uff1aONS\uff0cNRS\u548cNISRA\uff0c\u5fb7\u56fd\uff1aDestatis\uff0c\u897f\u73ed\u7259\uff1aISCIII\uff0c\u8377\u5170\uff1aCBS)\n\u6211\u4eec\u6536\u96c6\u4e86\u5c3d\u53ef\u80fd\u591a\u7684\u5730\u7406\u7c92\u5ea6\u6570\u636e(\u4e3b\u8981\u662fNUTS3\u7ea7)\uff0c\u4f46\u5728\u5fb7\u56fd\u7b49\u56fd\u5bb6\u4ec5\u53d1\u5e03\u4e86NUTS1\u7ea7\u6570\u636e\uff0c\u5728\u8377\u5170\u4ec5\u53d1\u5e03\u4e86NUTS2\u7ea7\u6570\u636e\u3002\u4e2d\u6b27\u548c\u4e1c\u6b27\u7684\u4e00\u4e9b\u56fd\u5bb6\u6ca1\u6709\u62a5\u544a\u4efb\u4f55\u5173\u4e8e\u8d85\u6807\u7684\u533a\u57df\u7edf\u8ba1\u6570\u636e\u3002\u8fd9\u4e9b\u88ab\u6392\u9664\u5728\u672c\u5206\u6790\u4e4b\u5916\u3002\n\u591a\u51fa\u7684\u6b7b\u4ea1\u4eba\u6570\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a\u5730\u533a\u81ea\u5927\u6d41\u884c\u5f00\u59cb\u4ee5\u6765\u62a5\u544a\u7684\u6240\u6709\u6b7b\u4ea1\u4eba\u6570\u4e0e\u524d\u51e0\u5e74\u8fd9\u6bb5\u65f6\u95f4\u5185\u7684\u5e73\u5747\u6b7b\u4ea1\u4eba\u6570\u8fdb\u884c\u6bd4\u8f83\u6765\u8ba1\u7b97\u7684\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u56fd\u5bb6\u6765\u8bf4\uff0c\u5e73\u5747\u65f6\u95f4\u662f2015-2019\u5e74\u3002\u5176\u4ed6\u56fd\u5bb6\u7684\u53ef\u7528\u6570\u636e\u5e74\u4efd\u8f83\u5c11\uff0c\u4f46\u81f3\u5c11\u5df2\u7ecf\u4f7f\u7528\u4e86\u6574\u6574\u4e24\u5e74\u3002\u4e00\u4e9b\u56fd\u5bb6\uff0c\u5982\u897f\u73ed\u7259\uff0c\u5efa\u7acb\u4e862020\u5e74\u9884\u671f\u6b7b\u4ea1\u4eba\u6570\u7684\u6a21\u578b\uff0c\u800c\u4e0d\u662f\u63d0\u4f9b\u5386\u53f2\u6570\u636e\u3002\n\u5982\u679c\u62a5\u544a\u7684\u6b7b\u4ea1\u4eba\u6570\u81f3\u5c11\u6bd4\u9884\u671f\u9ad8\u51fa5%\u548c20%\uff0c\u90a3\u4e48\u4e00\u4e2a\u5730\u533a\u5c31\u88ab\u5b9a\u4e49\u4e3a\u6b7b\u4ea1\u4eba\u6570\u8fc7\u591a\u3002\u5982\u679c\u6b7b\u4ea1\u4eba\u6570\u81f3\u5c11\u6bd4\u9884\u671f\u9ad8\u51fa25%\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u5b9a\u4e49\u4e3a\u201c\u4e25\u91cd\u8fc7\u5269\u201d\u7684\u5730\u533a\u3002", "note_en": "Some regions report up to three times as many deaths as usual since March, but a large part of Europe has been able to live through the first wave of the coronavirus pandemic without any significant excess death.  We have gathered subnational data from 500 European regions to better understand the spread of the virus.\n Borders are being opened and lockdown policies are lifted as the first wave of the coronavirus peters out. We are also getting a more and more comprehensive picture of the death toll of the pandemic so far.\n Data from 20 European countries shows that over 200,000 more people than usual have died since March. In this article we will explore this  excess death toll.\n Our analysis shows that the deaths are very unevenly distributed geographically. To better understand the spread of the virus we have gathered data on excess deaths from   500 subnational regions.\n The 50 worst affected regions account for just under half of all the excess \u2014 or \u201cunnormal\u201d \u2014 deaths.\n We have seen tonnes of national coronavirus comparisons in the last couple of months. But comparing nations easily becomes misleading. The spread of the pandemic is   regional rather than national.\n    Several Italian regions stand out when we compare regional excess deaths across Europe. Bergamo, in northern Italy, is one of the first places coronavirus took hold in Europe, and, up to the end of April, the region has had deaths many times higher than usual.\n But corona\u2019s spread across Italy is geographically focused to the north of the country, suggesting it has been contained. Many regions in the south have had normal levels of deaths.\n   The picture is similar in Sweden, which has also been hit hard by coronavirus. The bulk of the country\u2019s excess deaths have occurred in the capital region, where an unfortunately timed half-term break meant thousands were returning from the Alps just as the new disease was spreading there.\n 71 percent more people than usual have died in Stockholm during the pandemic, higher than all but 31 of the 500 regions we\u2019ve analysed, and a similar level to Catalonia and Brussels. However, in large parts of Sweden the number of deaths has been normal or close to it.\n  A country that stands out with a rather uniform spread of the disease is the United Kingdom. Every region but one report significant excess deaths.\n   136 of the 500 regions (27 percent) report a significant number of excess deaths. That is at least 25 percent more deaths than usual during the pandemic. Another 158 report somewhat more deaths than normal.\n While thousands of lives have been lost, it is noteworthy that nearly half of all regions in the 20 analyzed countries have recorded more or less normal number of deaths, despite the pandemic.\n In Slovakia, Lithuania and Bulgaria all (or almost all) regions have had normal levels of death. And even in hard-hit countries like Italy and France and Sweden considerable parts of the countries have had no excess deaths.\n  This article and research behind it was made possible through a collaboration with the European Data Journalism Network. You are free to republish all stories and visualisations under Creative Commons, in line with the  syndication guidelines. You can find the data  here.\n  Our analysis is based on data showing daily or weekly all-cause deaths in each region, which has been collated from Eurostat and national statistical agencies. (UK: ONS, NRS and NISRA, Germany: Destatis, Spain: ISCIII, Netherlands: CBS)\n We have gathered as geographically granular data as possible (mostly at NUTS3 level), but in countries such as Germany only NUTS1 level data has been published, and in the Netherlands only NUTS2. A number of countries in Central and Eastern Europe have not reported any regional statistics on excess. These are excluded from this analysis.\n Excess deaths have been calculated by comparing all deaths reported in a region since the start of the pandemic with the average number of deaths during that time period in the previous couple of years.\n For most countries, the average period is 2015\u20132019. Others have fewer years of data available, but at least two full years have been used. Some, like Spain, have modelled the expected number of deaths for 2020 instead of providing historical figures.\n A region is defined as having had excess deaths if reported deaths were at least 5 percent higher and 20 more than expected. If deaths were at least 25 percent higher than expected, we have defined it as a region with \u201csignificant excess\u201d.", "posttime": "2020-06-28 05:33:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6b7b\u4ea1,european,\u5730\u533a", "title": "\u6b27\u6d32\u7684\u4e00\u5c0f\u90e8\u5206\u5730\u533a\u5360Covid\u6b7b\u4ea1\u4eba\u6570\u7684\u5927\u90e8\u5206", "title_en": "A fraction of European regions account for a majority of Covid deaths", "transed": 1, "url": "https://medium.com/newsworthy-se/a-fraction-of-european-regions-account-for-a-majority-of-covid-deaths-778e546765a9", "via": "", "real_tags": ["\u6b7b\u4ea1", "european", "\u5730\u533a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008655, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e4b\u524d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e3a\u4ec0\u4e48PlayStation2\u6ca1\u6709\u4efb\u4f55\u5f88\u597d\u7684\u5165\u53e3\u70b9\u8f6f\u4ef6\u6f0f\u6d1e\u6765\u542f\u52a8\u81ea\u5236\u8f6f\u4ef6\u3002\u60a8\u9700\u8981\u8d2d\u4e70\u9884\u5b89\u88c5\u4e86\u6f0f\u6d1e\u7684\u5b58\u50a8\u5361\uff0c\u6253\u5f00\u63a7\u5236\u53f0\u4ee5\u963b\u6b62\u5149\u76d8\u6258\u76d8\u4f20\u611f\u5668\uff0c\u6216\u8005\u5b89\u88c5ModChip\u3002\u4f5c\u4e3a\u6709\u53f2\u4ee5\u6765\u6700\u7545\u9500\u7684\u6e38\u620f\u673a\uff0c\u5b83\u7406\u5e94\u53d7\u5230\u66f4\u597d\u7684\u62a8\u51fb\u3002\n\u6211\u6700\u521d\u8bd5\u56fe\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u662f\u5229\u7528\u4e0e\u65e9\u671fPAL\u533a\u57dfPS2\u6346\u7ed1\u5728\u4e00\u8d77\u7684BASIC\u89e3\u91ca\u5668\u3002\u867d\u7136\u6211\u6210\u529f\u5730\u5236\u9020\u4e86\u7b2c\u4e00\u4e2a\u57fa\u4e8e\u8f6f\u4ef6\u7684\u5165\u53e3\u70b9\u653b\u51fb\uff0c\u4ec5\u4f7f\u7528\u63a7\u5236\u53f0\u9644\u5e26\u7684\u786c\u4ef6\u5c31\u53ef\u4ee5\u89e6\u53d1\uff0c\u4f46\u7531\u4e8e\u5fc5\u987b\u901a\u8fc7\u63a7\u5236\u5668\u6216\u952e\u76d8\u624b\u52a8\u8f93\u5165\u6709\u6548\u8d1f\u8f7d\u7684\u8981\u6c42\uff0c\u4ee5\u53ca\u4ec5\u9650PAL\u8eab\u4efd\u7684\u9650\u5236\uff0c\u653b\u51fb\u53d7\u5230\u4e86\u5f88\u5927\u6279\u8bc4\u3002\u6211\u51b3\u5b9a\u4ee5\u4e0d\u5207\u5b9e\u9645\u4e3a\u7531\u6ce8\u9500\u8fd9\u4e2a\u6f0f\u6d1e\uff0c\u56e0\u6b64\u7ee7\u7eed\u4e3aPlayStation2\u5bfb\u627e\u66f4\u597d\u7684\u653b\u51fb\u65b9\u6848\u3002\n\u6211\u4eec\u53ef\u4ee5\u653b\u51fbPlayStation2\u7684\u5176\u4ed6\u4e0d\u53ef\u4fe1\u8f93\u5165\u6765\u6e90\uff1b\u652f\u6301\u5728\u7ebf\u591a\u4eba\u6216USB\u5b58\u50a8\u7684\u6e38\u620f\u51e0\u4e4e\u80af\u5b9a\u4f1a\u88ab\u5229\u7528\u3002\u4f46\u4e0e\u4efb\u5929\u580264\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u901a\u8fc7\u8c03\u5236\u89e3\u8c03\u5668\u7b49\u63a5\u53e3\u5f00\u53d1\u6e38\u620f\uff0c\u800cPlayStation2\u6709\u4e00\u4e2a\u5173\u952e\u7684\u4e0d\u540c\u4e4b\u5904\uff1a\u5b83\u7684\u4e3b\u8981\u8f93\u5165\u662f\u5149\u5b66\u4ecb\u8d28(CD/DVD\u5149\u76d8)\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7528\u73b0\u6210\u7684\u6d88\u8d39\u786c\u4ef6\u523b\u5f55\u8fd9\u79cd\u683c\u5f0f\u3002\u8fd9\u5c31\u7559\u4e0b\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\uff0c\u6211\u4ece\u5c0f\u5c31\u60f3\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\n\u6709\u6ca1\u6709\u53ef\u80fd\u53ea\u70e7\u5f55\u6211\u4eec\u81ea\u5df1\u7684\u81ea\u5236\u6e38\u620f\uff0c\u7136\u540e\u50cf\u6211\u4eec\u542f\u52a8\u5b98\u65b9\u5149\u76d8\u4e00\u6837\uff0c\u5728\u672a\u7ecf\u4fee\u6539\u7684\u4e3b\u673a\u4e0a\u542f\u52a8\u5b83\u4eec(\u800c\u4e0d\u9700\u8981\u7ecf\u8fc7\u4efb\u4f55\u7528\u6237\u4ea4\u4e92\uff0c\u5982\u5149\u76d8\u4ea4\u6362\u6216\u5728\u6e38\u620f\u4e2d\u89e6\u53d1\u7f51\u7edc\u653b\u51fb)\uff1f\n\u6700\u7ec8\uff0c\u901a\u8fc7\u5229\u7528\u63a7\u5236\u53f0\u7684DVD\u64ad\u653e\u5668\u529f\u80fd\uff0c\u6211\u6210\u529f\u5730\u5b9e\u73b0\u4e86\u6211\u7684\u76ee\u6807\u3002\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u5c06\u63cf\u8ff0\u9006\u8f6c\u548c\u5229\u7528DVD\u64ad\u653e\u5668\u7684\u6280\u672f\u7ec6\u8282\u548c\u8fc7\u7a0b\u3002\u6211\u7684\u6240\u6709\u4ee3\u7801\u90fd\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002\n\u663e\u7136\uff0c\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u523b\u5f55\u5305\u542bELF\u6587\u4ef6\u7684\u5149\u76d8\uff0c\u7136\u540e\u6307\u671bPS2\u5f15\u5bfc\u5b83\uff1b\u6211\u4eec\u9700\u8981\u5229\u7528\u4e0e\u89e3\u6790\u53d7\u63a7\u6570\u636e\u76f8\u5173\u7684\u67d0\u79cd\u8f6f\u4ef6\u6f0f\u6d1e\u3002\u63a7\u5236\u53f0\u652f\u6301\u64ad\u653e\u70e7\u5f55\u7684DVD\u89c6\u9891\u5149\u76d8\uff0c\u8fd9\u66b4\u9732\u4e86\u6211\u4eec\u53ef\u80fd\u5229\u7528\u7684\u91cd\u5927\u653b\u51fb\u9762\u6765\u5b9e\u73b0\u6211\u4eec\u7684\u76ee\u6807\u3002\n\u5982\u679c\u6211\u4eec\u8003\u8651\u4e00\u4e0bDVD\u89c6\u9891\u7531\u4ec0\u4e48\u7ec4\u6210\uff0c\u5c31\u4f1a\u53d1\u73b0\u6709\u76f8\u5f53\u591a\u7684\u4e3b\u8981\u7ec4\u4ef6\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u6709\u6f5c\u5728\u7684\u6f0f\u6d1e\uff1a\n\u4e0d\u5e78\u7684\u662f\uff0c\u867d\u7136\u5b8c\u6574\u7684DVD\u89c6\u9891\u89c4\u8303\u662f\u5728\u4ed8\u8d39\u5899\u540e\u9762\uff0c\u4f46\u5b83\u4e3b\u8981\u7531MPEG\u7b49\u5f00\u653e\u683c\u5f0f\u7ec4\u6210\uff0c\u53ea\u662f\u4ee5\u4e13\u6709\u5bb9\u5668\u683c\u5f0f(VOB)\u6346\u7ed1\u5728\u4e00\u8d77\u3002\u5bf9\u4e8e\u4e13\u6709\u65b9\u9762\uff0c\u6709\u4e00\u4e9b\u53ef\u514d\u8d39\u8bbf\u95ee\u7684\u975e\u5b98\u65b9\u53c2\u8003\u3002\nIFO\u6587\u4ef6\u683c\u5f0f\u53ef\u80fd\u662f\u4f7f\u7528\u7684\u6700\u7b80\u5355\u7684\u683c\u5f0f\uff0c\u5b83\u8d1f\u8d23\u5b58\u50a8\u5c06\u89c6\u9891\u6587\u4ef6\u94fe\u63a5\u5728\u4e00\u8d77\u7684\u5143\u6570\u636e\u3002\n\u4e92\u52a8\u673a\u5668\u5141\u8bb8DVD\u89c6\u9891\u4e2d\u7684\u4e92\u52a8\u83dc\u5355\u548c\u6e38\u620f\u3002\u5b83\u670932\u7ec4\u6307\u4ee4\uff0c\u800c\u4e14\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u88ab\u7528\u6765\u52a8\u6001\u64cd\u7eb5\u5185\u90e8\u5b58\u50a8\u5668\u72b6\u6001\u6765\u542f\u52a8\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\uff0c\u6216\u8005\u5b83\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u5e26\u6709\u83dc\u5355\u7684\u901a\u7528DVD\uff0c\u8be5\u83dc\u5355\u5141\u8bb8\u60a8\u9009\u62e9\u56fa\u4ef6\u7248\u672c\u5e76\u89e6\u53d1\u9002\u5f53\u7684\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u3002\n\u663e\u7136\uff0c\u5728\u771f\u5b9e\u7684\u786c\u4ef6\u4e0a\u8fdb\u884c\u5927\u591a\u6570\u6d4b\u8bd5\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u56e0\u4e3a\u523b\u5f55\u6570\u767e\u5f20\u6d4b\u8bd5\u5149\u76d8\u5c06\u662f\u6d6a\u8d39\u548c\u65f6\u95f4\u6548\u7387\u4f4e\u4e0b\u7684\u3002\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5177\u6709\u8c03\u8bd5\u5668\u652f\u6301\u7684\u4eff\u771f\u5668\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u969c\u788d\uff1aPlayStation2\u6700\u6d41\u884c\u7684\u4eff\u771f\u5668PCSX2\u4e0d\u652f\u6301\u64ad\u653eDVD\u89c6\u9891\uff0c\u800c\u4e14\u6ca1\u6709\u4eba\u6709\u5174\u8da3\u6dfb\u52a0\u652f\u6301\u3002\n\u6211\u8981\u611f\u8c22KrHacken\u5e2e\u6211\u89e3\u51b3\u4e86\u7b2c\u4e00\u4e2a\u8def\u969c\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0cPCSX2\u786e\u5b9e\u652f\u6301DVD\u64ad\u653e\u5668\uff1b\u5b83\u53ea\u662f\u4e0d\u80fd\u81ea\u52a8\u52a0\u8f7d\u5b83\uff0c\u56e0\u4e3a\u5b83\u4f4d\u4e8e\u52a0\u5bc6\u5b58\u50a8\u4e2d\uff0c\u800cPCSX2\u4e0d\u652f\u6301\u89e3\u5bc6\u3002\u6709\u4e00\u4e9b\u516c\u5171\u5de5\u5177\u53ef\u4ee5\u4eceEROM\u5b58\u50a8\u4e2d\u89e3\u5bc6\u548c\u63d0\u53d6DVD\u64ad\u653e\u5668\u3002\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u91cd\u65b0\u6253\u5305\u6210ELF\uff0c\u4ee5\u4fbf\u8f7b\u677e\u52a0\u8f7d\u5230PCSX2\u4e2d\u3002\n\u7531\u4e8e\u53d1\u5e03\u4e86\u5927\u91cf\u4e0d\u540c\u7684PlayStation2\u578b\u53f7\uff0c\u6bcf\u4e2a\u578b\u53f7\u7684DVD\u64ad\u653e\u5668\u56fa\u4ef6(&gt\uff1b50.)\u90fd\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u6b64\u5728\u672c\u6587\u671f\u95f4\uff0c\u6211\u5c06\u91cd\u70b9\u4ecb\u7ecd\u4e00\u6b3eDVD\u64ad\u653e\u5668\uff1a3.10E\uff0c\u56e0\u4e3a\u5b83\u6070\u597d\u662f\u6211\u62e5\u6709\u7684\u63a7\u5236\u53f0\u7684\u56fa\u4ef6\u3002\n\u6211\u5c06\u7ee7\u7eed\u4f7f\u7528Ghidra\u8fdb\u884c\u53cd\u7f16\u8bd1\uff0c\u5c31\u50cf\u6211\u5728\u4ee5\u524d\u7684\u6587\u7ae0\u4e2d\u4e00\u76f4\u4f7f\u7528\u7684\u90a3\u6837\u3002DVD\u64ad\u653e\u5668\u4e0d\u5305\u542b\u4efb\u4f55\u7b26\u53f7\uff0c\u6240\u4ee5\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684\u6240\u6709\u540d\u79f0\u90fd\u662f\u6211\u901a\u8fc7\u9006\u5411\u5de5\u7a0b\u5206\u914d\u7684\u3002\nDVD\u64ad\u653e\u5668\u5c06\u5c1d\u8bd5\u8bfb\u53d6\u7684\u7b2c\u4e00\u4e2a\u6587\u4ef6\u662fVIDEO_TS.IFO\u3002\u5728\u5185\u5b58\u4e2d\u641c\u7d22\u6587\u4ef6\u5185\u5bb9\uff0c\u7136\u540e\u5728\u90a3\u91cc\u8bbe\u7f6e\u5185\u5b58\u5199\u5165\u65ad\u70b9\u4ee5\u8ddf\u8e2a\u6587\u4ef6\u7684\u5199\u5165\u4f4d\u7f6e\uff0c\u6211\u4eec\u4f1a\u5feb\u901f\u627e\u5230\u8bfb\u53d6IFO\u89e3\u6790\u4ee3\u7801\u4f7f\u7528\u7684\u5149\u76d8\u5185\u5bb9\u7684API getDiscByte\uff0c\u5730\u5740\u4e3a0x25c920\u3002\u5b83\u662f\u4e00\u79cd\u6d41\u8bfb\u53d6\u5668\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u6247\u533a\u7f13\u5b58\u5230RAM\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u5728\u9700\u8981\u65f6\u81ea\u52a8\u67e5\u627e\u66f4\u591a\u6570\u636e\uff1a\nbyte getDiscByte(Void){byte ret\uff1bif(currentDiscBytePointer&lt\uff1bendDiscBytePointer){ret=*currentDiscBytePointer\uff1b}Else{currentDiscBytePointer=&amp\uff1bBuffer\uff1bsetOffset=setOffset+number OfSectorsRead\uff1bgetDiscByteInternal()\uff1bret=*currentDiscBytePointer\uff1b}currentDiscBytePointer=currentDiscBytePointer\n\u901a\u8fc7\u641c\u7d22\u8c03\u7528\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u83b7\u53d6\u66f4\u5927\u6570\u636e\u7684\u5305\u88c5\u5668\uff1agetDiscU16(0x25c980)\u3001getDiscU32(0x25c9b8)\u548cgetDiscData(0x25c9f0)\uff0c\u8fd9\u662f\u6700\u6709\u8da3\u7684\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\uff1a\nvoid getDiscData(uint size\uff0cbyte*Destination){byte b\uff1buint i\uff1bi=0\uff1bif(size\uff01=0){do{i=i+1\uff1bb=getDiscByte()\uff1b*Destination=b\uff1bDestination=Destination+1\uff1b}While(i&lt\uff1bsize)\uff1b}return\uff1b}\u3002\n\u6211\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u641c\u7d22\u5bf9getDiscData\u7684\u8c03\u7528\uff0c\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u5927\u5c0f\u53ef\u63a7\u4e14\u6ca1\u6709\u8fb9\u754c\u68c0\u67e5\u7684\u8c03\u7528\u3002\n\u679c\u7136\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u53d1\u73b0\u4e86\u5927\u7ea64\u4e2a\u8fd9\u79cd\u6027\u8d28\u7684\u660e\u663e\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u3002\u56de\u5230IFO\u6587\u4ef6\u683c\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u89e3\u6790\u6587\u4ef6\u4e2d\u5927\u5c0f\u53ef\u53d8\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u8bb8\u591a16\u4f4d\u6570\u7ec4\u957f\u5ea6\u3002DVD\u64ad\u653e\u673a\u9519\u8bef\u5730\u53ea\u671f\u671b\u8fbe\u5230DVD\u89c4\u8303\u6240\u5141\u8bb8\u7684\u6700\u5927\u957f\u5ea6\uff0c\u56e0\u6b64\u5b83\u9519\u8fc7\u4e86\u62d2\u7edd\u957f\u5ea6\u8f83\u5927\u7684\u5149\u76d8\u7684\u68c0\u67e5\u3002\u7531\u4e8e\u6240\u6709\u590d\u5236\u90fd\u662f\u5728\u9759\u6001\u5206\u914d\u7684\u5185\u5b58\u7f13\u51b2\u533a\u4e0a\u5b8c\u6210\u7684\uff0c\u56e0\u6b64\u6307\u5b9a\u7684\u957f\u5ea6\u5927\u4e8e\u5141\u8bb8\u7684\u957f\u5ea6\u5c06\u5bfc\u81f4\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f0x25b3bc\u5904\u7684\u53cd\u7f16\u8bd1\uff1a\nlarge1=getDiscU16()\uff1blarge2=getDiscU16()\uff1blarge3=getDiscU16()\uff1bIgnred=getDiscU16()\uff1bgetDiscData(Uint)large1+(Uint)large2+(Uint)large3)*8\uff0c&amp\uff1bDAT_0140bdd4)\uff1b\n\u8fd9\u662f\u6700\u6709\u8da3\u7684\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6240\u6709getDiscData\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u6700\u5927\u590d\u5236\u5927\u5c0f(0xffff*3*8=0x17FFE8\u5b57\u8282)\u3002\u5b83\u590d\u5236\u5230\u4f4d\u4e8e0x0140bdd4\u7684\u9759\u6001\u5206\u914d\u7f13\u51b2\u533a\uff0c\u56e0\u6b64\u901a\u8fc7\u6307\u5b9a\u53ef\u80fd\u7684\u6700\u5927\u590d\u5236\u5927\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u4ece0x140bdd4\u52300x158BDBC(0x140bdd4+0x17FFE8)\u7684\u5730\u5740\u7a7a\u95f4\u3002\n\u5982\u60a8\u6240\u89c1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u6f0f\u6d1e\u63a7\u5236\u76f8\u5f53\u5927\u7684\u5185\u5b58\u533a\u57df\u3002\u7136\u800c\uff0c\u626b\u63cf\u5185\u5b58\u6700\u521d\u662f\u975e\u5e38\u4ee4\u4eba\u5931\u671b\u7684\uff1b\u6307\u9488\u975e\u5e38\u5c11\uff0c\u800c\u4e14\u5b83\u4eec\u770b\u8d77\u6765\u90fd\u4e0d\u662f\u5bf9Corrupt\u7279\u522b\u611f\u5174\u8da3\uff01\n\u867d\u7136\u8be5\u533a\u57df\u4e2d\u6ca1\u6709\u6709\u8da3\u7684\u6307\u9488\uff0c\u4f46\u6709\u4e00\u4e9b\u7d22\u5f15\uff0c\u5982\u679c\u635f\u574f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fdb\u4e00\u6b65\u7684\u8d8a\u754c\u5185\u5b58\u635f\u574f\u3002\n\u6ce8\u610f\uff0c\u50cf\u8fd9\u6837\u7684\u5927\u91cf\u8bfb\u53d6\u5e76\u4e0d\u603b\u662f\u4eceIFO\u6587\u4ef6\u590d\u5236\u8fde\u7eed\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u4e00\u65e6\u8d85\u8fc7\u6587\u4ef6\u5927\u5c0f\uff0c\u6247\u533a\u5c31\u4f1a\u5f00\u59cb\u91cd\u590d\uff0c\u4f46\u901a\u5e38\u5047\u8bbegetDiscData\u8c03\u7528\u5199\u5165\u7684\u6240\u6709\u6570\u636e\u90fd\u53ef\u4ee5\u63a7\u5236\uff0c\u56e0\u4e3a\u5b83\u6e90\u81ea\u5149\u76d8\u4e0a\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u6b64\u5916\uff0c\u5728\u5199\u5165\u4e00\u5b9a\u6570\u91cf\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6ea2\u51fa\u5230getDiscByte\u51fd\u6570\u4f7f\u7528\u7684\u5185\u90e8\u72b6\u6001\uff0c\u4f46\u6211\u4eec\u5c06\u5728\u7a0d\u540e\u8ba8\u8bba\u8fd9\u4e00\u70b9\u3002\n\u57280x25e388\u5904\uff0c\u6211\u4eec\u8c03\u7528\u51fd\u6570\u6307\u9488\u6570\u7ec4\u4e2d\u7684\u6761\u76ee\uff0c\u5176\u4e2d\u6211\u4eec\u53ef\u4ee5\u4ece\u6ea2\u51fa\u63a7\u52360x141284a\u5904\u768416\u4f4dfpIndex\uff1a\n\u8fd9\u5141\u8bb8\u6211\u4eec\u8df3\u8f6c\u5230\u5b58\u50a8\u57280x5b9d40\u81f30x5b9d40+0xffff*4=0x5F9D3C\u4e4b\u95f4\u7684\u4efb\u4f55\u5730\u5740\u3002\n\u8fd9\u4e2a\u539f\u8bed\u4e0d\u592a\u7406\u60f3\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u6ea2\u51fabug\u90fd\u4e0d\u5141\u8bb8\u6211\u4eec\u63a7\u5236\u4ece\u4e2d\u8bfb\u53d6\u8df3\u8f6c\u76ee\u6807\u7684\u5185\u5b58\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8be5\u5185\u5b58\u533a\u57df\u7684\u5927\u90e8\u5206\u662f\u4eceDVD\u64ad\u653e\u5668\u7684\u53ea\u8bfb\u90e8\u5206\u6620\u5c04\u800c\u6765\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u592a\u53ef\u80fd\u5728\u4e0d\u51fa\u73b0\u5176\u4ed6\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\u5f71\u54cd\u8be5\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9\u3002\n\u5728\u51fd\u6570\u6307\u9488\u4e4b\u540e\uff0c\u6211\u4eec\u786e\u5b9e\u770b\u5230\u4e86\u4e00\u4e9b\u5f00\u5173\u6848\u4f8b\u6807\u7b7e\u7684\u5730\u5740\uff0c\u8fd9\u6709\u70b9\u6709\u8da3\uff0c\u56e0\u4e3a\u8fd9\u5141\u8bb8\u6211\u4eec\u8df3\u5230\u51fd\u6570\u4e2d\u95f4\u5e76\u6267\u884c\u5176\u7ed3\u5c3e\uff0c\u800c\u65e0\u9700\u6267\u884c\u5176\u5e8f\u8a00\uff0c\u4ece\u800c\u5141\u8bb8\u6211\u4eec\u9519\u4f4d\u5806\u6808\u6307\u9488\u5e76\u8fd4\u56de\u5230\u5806\u6808\u4e0a\u7684\u610f\u60f3\u503c\u3002\u6211\u7ecf\u5386\u4e86\u6240\u6709\u8fd9\u4e9b\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u53ea\u80fd\u7528\u5b83\u8df3\u52300\u3002\n\u6211\u51b3\u5b9a\u8f6c\u50a8\u6574\u4e2a\u53ef\u80fd\u7684\u8df3\u8f6c\u76ee\u6807\u533a\u57df\uff0c\u5c06\u5b83\u4eec\u5206\u7ec4\u4e3a4\u4e2a\u5b57\u8282\uff0c\u770b\u770b\u5176\u4e2d\u662f\u5426\u6709\u4efb\u4f55\u4e00\u4e2a\u6307\u5411\u6211\u4eec\u901a\u8fc7\u6ea2\u51fa\u6f0f\u6d1e\u63a7\u5236\u7684\u5185\u5b58\u2026\u2026\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u7ed3\u679c\u662f\uff1a\u7d22\u5f150xe07e(\u5730\u57400x5f1f38)\u6307\u54110x1500014\uff0c\u8fd9\u5728\u6211\u4eec\u7684\u63a7\u5236\u8303\u56f4\u5185\uff01\u8fd9\u5e76\u4e0d\u5b8c\u7f8e\uff0c\u56e0\u4e3a\u5b83\u662f\u7f13\u5b58\u7684\u865a\u62df\u5730\u5740\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u80fd\u4f1a\u9047\u5230\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\uff0c\u4f46\u5b83\u53ef\u4ee5\u5de5\u4f5c\u3002\n\u975e\u5e38\u5e78\u8fd0\u7684\u662f\uff0c\u6070\u597d\u6709\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u6709\u6548\u8df3\u8f6c\u76ee\u6807\uff0c\u5b83\u5df2\u7ecf\u6307\u5411\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u8bb0\u5fc6\u3002\u7531\u4e8e\u5177\u6709\u4e0d\u540c\u5730\u5740\u7a7a\u95f4\u7684\u5176\u4ed6DVD\u64ad\u653e\u5668\u7248\u672c\u53ef\u80fd\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u5962\u4f88\uff0c\u6211\u5c06\u7b80\u8981\u4ecb\u7ecd\u53e6\u4e00\u4e2a\u635f\u574f\u539f\u8bed\uff0c\u4ee5\u9632\u5b83\u5bf9\u4efb\u4f55\u8bd5\u56fe\u5229\u7528\u81ea\u5df1\u7684\u6e38\u620f\u673a\u7248\u672c\u7684\u4eba\u6709\u7528\u3002\nIf(*(int*)(&amp\uff1bDAT_01411e54+indexForOOBW*4)==0){Error=getBuffer(\u6587\u4ef6\u540d\uff0c0\uff0c&amp\uff1bBuffer\uff0c1\uff0c0)\uff1bIf(Error&lt\uff1b0)Goto Lab_0025c79c\uff1blVar3=FUN_002161f8(0x140de40\uff0cpcVar4\uff0c0xc)\uff1bIf(lVar3==0){uVar2\u3002DAT_01411e54+indexForOOBW*4)\uff01=0)\u8f6c\u5230LAB_0025c7ac\uff1b}\u9519\u8bef=-3\uff1b}\n\u7531\u4e8eindexForOOBW\u662f\u4e00\u4e2a32\u4f4d\u503c\uff0c\u56e0\u6b64\u901a\u8fc7\u5927\u578b\u6ea2\u51fa\u635f\u574f\u5b83\u53ef\u80fd\u4f1a\u5141\u8bb8\u5199\u5165\u6b64\u8def\u5f84\u4e2d\u7684\u4efb\u610f\u5730\u5740\u3002\n\u6709\u4e00\u4e2a\u7ea6\u675f\uff0c\u5373\u5728\u60a8\u7f16\u5199\u5b83\u4e4b\u524d\uff0c\u503c\u5fc5\u987b\u4e3a0(\u6839\u636e\u8be5\u4ee3\u7801\u6bb5\u4e2d\u7684\u7b2c\u4e00\u884c)\uff0c\u4f46\u8fd9\u4e0d\u4f1a\u663e\u8457\u589e\u52a0\u5229\u7528\u5b83\u7684\u96be\u5ea6\u3002\u60a8\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c06\u67d0\u5904\u5ef6\u8fdf\u69fd\u4e2d\u7684NOP\u91cd\u5199\u5230\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u8df3\u8f6c\u4e2d\uff0c\u8be5\u5bc4\u5b58\u5668\u6070\u597d\u5728\u6267\u884c\u65f6\u53d7\u5230\u63a7\u5236\u3002\u6216\u8005\uff0c\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u7528\u4e0a\u9762\u63d0\u5230\u7684OOB\u8c03\u7528\u94fe\u63a5\u8fd9\u4e2aOOB\u5199\u5165\uff1b\u60a8\u53ef\u4ee5\u5c06\u6211\u4eec\u53ef\u4ee5\u7528\u4f5c\u8df3\u8f6c\u76ee\u6807\u7684\u5730\u5740\u4e4b\u4e00(\u6070\u597d\u662f0)\u8986\u76d6\u5230\u4efb\u610f\u7684\u65b0\u8df3\u8f6c\u76ee\u6807\u3002\n\u5f53\u6211\u77ed\u6682\u5730\u5c1d\u8bd5\u8fd9\u4e2a\u539f\u8bed\u65f6\uff0c\u5b83\u5728\u8c03\u7528getBuffer\u65f6\u5931\u8d25\u4e86\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u7684\u524d\u9762\uff0c\u5b83\u901a\u8fc7Sprintf(filename\uff0c&#34\uff1bvts_%02d_0.ifo&#34\uff1b\uff0cindexForOOBW)\u751f\u6210\u6587\u4ef6\u540d\uff0c\u800c\u6587\u4ef6&#34\uff1bvts_1364283729_0.ifo&#34\uff1b\u4e0d\u5b58\u5728\u3002\u6211\u4eec\u65e0\u6cd5\u6b63\u5e38\u521b\u5efa\u6b64\u6587\u4ef6\uff0c\u56e0\u4e3a\u4ee3\u7801\u6709\u4e00\u4e2a\u6700\u5927\u6587\u4ef6\u540d\u957f\u5ea6\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u50cf\u8fd9\u6837\u7684\u5927\u578b\u7d22\u5f15\u65f6\u4f1a\u9047\u5230\u8fd9\u4e2a\u957f\u5ea6(\u6211\u8ba4\u4e3a\u5b83\u53ef\u80fd\u662f15\u621616\u4e2a\u5b57\u8282)\u3002\u60a8\u53ef\u4ee5\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\uff0c\u4f46\u4ecd\u7136\u4f7f\u7528\u6b64\u9519\u8bef\u635f\u574f\u76f8\u5f53\u5927\u7684\u5185\u5b58\u533a\u57df\uff0c\u6216\u8005\u53ef\u80fd\u901a\u8fc7\u53e6\u4e00\u4e2a\u6ea2\u51fa\u635f\u574f\u8db3\u591f\u591a\u7684\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u4ece\u800c\u8bf1\u4f7f\u8c03\u7528\u8ba4\u4e3a\u8fd9\u4e9b\u5927\u578b\u7d22\u5f15\u6587\u4ef6\u5b58\u5728\u3002\u56e0\u4e3a\u6211\u7684\u63a7\u5236\u53f0\u4e0d\u9700\u8981\u5b83\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u5b8c\u5168\u5206\u6790\u8fd9\u79cd\u53ef\u80fd\u6027\uff0c\u53ea\u662f\u7ee7\u7eed\u5229\u7528OOB\u8c03\u7528\u3002\n\u6b64\u65f6\uff0c\u6211\u4eec\u6709\u4e86\u5229\u7528\u5927\u578b\u8bfb\u53d6\u6ea2\u51fa\u7684\u975e\u5e38\u6e05\u6670\u7684\u8def\u5f84\uff1a\u6211\u4eec\u5c06fpIndex\u91cd\u5199\u4e3a0xe07e\uff0c\u5e76\u5c06\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u6ea2\u51fa\u52300x1500014\u3002\u7136\u540e\uff0c\u5f53\u4ee3\u7801\u4f7f\u7528\u635f\u574f\u7684fpIndex\u7d22\u5f15\u5230\u51fd\u6570\u6307\u9488\u6570\u7ec4\u4e2d\u65f6\uff0c\u5b83\u5c06\u89e6\u53d1\u8df3\u8f6c\u5230\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u3002\n\u6211\u4eec\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u4eec\u8981\u635f\u574f\u7684\u7b2c\u4e00\u4e2a\u4e1c\u897ffpIndex(0x141284a)\u4f4d\u4e8e\u5185\u5b58\u4e2dcurrentDiscBytePointer(0x1411fe4)\u548cendDiscBytePointer(0x1411fe8)\u4e4b\u540e\uff0c\u56e0\u6b64\u90a3\u4e9b\u5f71\u54cdgetDiscByte\u8f93\u51fa\u7684\u503c\u5728\u6211\u4eec\u5c1d\u8bd5\u635f\u574ffpIndex\u65f6\u53ef\u80fd\u5df2\u7ecf\u635f\u574f\uff0c\u5e76\u4e14\u53ef\u80fd\u5df2\u88ab\u91cd\u5b9a\u5411\u5230\u4e0d\u518d\u6307\u5411\u8bbe\u7f6e\u4e3aIFO\u6587\u4ef6\u5185\u5bb9\u7684\u5185\u5b58\u3002\n\u89e3\u51b3\u65b9\u6848\u662f\u4e2d\u65ad\u5199\u5165currentDiscBytePointer\uff0c\u4ee5\u4fbf\u5728\u6211\u4eec\u5c06\u8981\u7834\u574f\u5b83\u7684\u65f6\u5019\u627e\u51fa\u5b83\u7684\u503c\uff0c\u5e76\u786e\u4fdd\u6211\u4eec\u53ea\u8986\u76d6\u5b83\u5df2\u7ecf\u62e5\u6709\u7684\u503c\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06endDiscBytePointer\u66f4\u6539\u4e3a0xffffffff\uff0c\u4ee5\u9632\u6b62\u8c03\u7528getDiscByteInternal\uff0c\u5982\u679c\u5728\u6211\u4eec\u5904\u4e8e\u534a\u635f\u574f\u72b6\u6001\u65f6\u8c03\u7528\u5b83\u4f1a\u5bfc\u81f4\u66f4\u591a\u6df7\u6dc6\u3002\n\u7531\u4e8e\u6ea2\u51fa\u73b0\u5728\u5df2\u5230\u8fbefpIndex\uff0c\u5e76\u4e14\u4ecd\u5728\u4eceIFO\u6587\u4ef6\u590d\u5236\u53d7\u63a7\u5185\u5bb9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u635f\u574fcurrentDiscBytePointer\u65f6\u4e2d\u65ad\u5e76\u67e5\u770b\u5b83\uff0c\u4ee5\u5b9a\u4f4d\u4eceIFO\u590d\u5236\u7684\u4f4d\u7f6e\u3002\u4e00\u65e6\u6211\u4eec\u53d1\u73b0\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6587\u4ef6\u4e2d\u7684\u90a3\u4e9b\u5b57\u8282\u4fee\u6539\u4e3a7E e0(0xe07e\u7684\u5c0f\u7aef\u8868\u793a)\uff0c\u4ee5\u6307\u5411\u6211\u4eec\u7684\u8df3\u8f6c\u76ee\u6807\u3002\n\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5199\u51650x1500014\u65f6\u4e2d\u65ad\uff0c\u4ee5\u8ba1\u7b97\u51fa\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u5c06\u4ece\u6587\u4ef6\u7684\u54ea\u4e2a\u4f4d\u7f6e\u590d\u5236\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u5360\u4f4d\u7b26\u7684\u503c\u3002\n\u73b0\u5728\u8fd0\u884c\u653b\u51fb\u5e76\u5728OOB\u8c03\u7528(0x25e388)\u4e2d\u65ad\uff0c\u6211\u4eec\u9762\u4e34\u4e00\u4e2a\u65b0\u95ee\u9898\uff1a\u7d22\u5f15\u5728\u6211\u4eec\u7684\u635f\u574f\u548c\u8c03\u7528\u4f7f\u7528\u4e4b\u95f4\u88ab\u91cd\u5199\u3002\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u907f\u514d\u8fd9\u79cd\u5199\u5165\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u53ef\u80fd\u4f1a\u8d70\u5165\u6b7b\u80e1\u540c\u3002\n\u5728\u6211\u4eec\u7684\u5927\u578b\u8bfb\u53d6\u4e4b\u540e\u4e2d\u65ad\u5199\u5165fpIndex\uff0c\u6211\u4eec\u770b\u5230\u5b83\u5199\u5728\u6b64\u51fd\u6570\u5185\u90e8\u76840x25E970\u5904\uff1a\nint setFpIndex(Void){IF(DAT_01412856\uff01=0){IF(DAT_0141284E==&#39\uff1b\\0&#39\uff1b){IF(DAT_01412854==0){fpIndex=3\uff1b}Else{fpIndex=4\uff1b}}Else{IF(DAT_01412854==0){fpIndex=5\uff1b}Else{fpIndex=6\uff1b}}\u8fd4\u56de0\uff1b}\u8fd4\u56de-1\uff1b}\u3002\n\u6ce8\u610f\u5230\u4e0d\u662f\u6240\u6709\u8def\u5f84\u90fd\u5199\u5165fpIndex\u5417\uff1f\u5982\u679c\u5c060x1412856\u5904\u768416\u4f4d\u503c(\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u6ea2\u51fa\u65f6\u7834\u574f\u5b83)\u8bbe\u7f6e\u4e3a0\uff0c\u5b83\u5c06\u4fdd\u7559fpIndex\u4e0d\u53d8\uff0c\u5e76\u8fd4\u56de-1\u4ee5\u6307\u793a\u5931\u8d25\u3002\n\u5bfc\u81f4setFpIndex\u7684\u8c03\u7528\u94fe\u7d27\u63a5\u5728OOB\u8c03\u7528\u672c\u8eab(0x25e378)\u4e4b\u524d\uff0c\u5e76\u4e14\u4e5f\u4e0d\u68c0\u67e5setFpIndex\uff01\u7684\u8fd4\u56de\u503c\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u7ed5\u8fc7fpIndex\u7684\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u4ecd\u7136\u53ef\u4ee5\u5230\u8fbeOOB\u8c03\u7528\uff0c\u800c\u5b83\u4ecd\u7136\u5305\u542b\u6211\u4eec\u635f\u574f\u7684\u503c\uff1a\ncallSetFpIndex(puVar6+((Uint)dat_01412841-1)*8)\uff1b(*(\u4ee3\u7801*)(&amp\uff1bPTR_LAB_005b9d40)[(uint)fpIndex])(puVar6+((Uint)dat_01412841-1)*8)\uff1b\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u8df3\u5230\u4e86\u53d7\u63a7\u5185\u5bb9\u7684\u8bb0\u5fc6\u4e2d\uff0c\u8fd9\u5e94\u8be5\u610f\u5473\u7740\u4efb\u610f\u4ee3\u7801\u7684\u6267\u884c\uff01\u4f46\u662f\uff0c\u6211\u4eec\u5c06\u6709\u6548\u8d1f\u8f7d\u5199\u5165\u7f13\u5b58\u7684\u865a\u62df\u5730\u5740\u6620\u5c04\uff0c\u5e76\u4ece\u90a3\u91cc\u6267\u884c\u5b83\uff0c\u8fd9\u4f1a\u5728\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u786c\u4ef6\u4e0a\u4ea7\u751f\u4e24\u4e2a\u6f5c\u5728\u7684\u6545\u969c\u6e90\uff1a\n\u6709\u6548\u8f7d\u8377\u5728\u6267\u884c\u65f6\u53ef\u80fd\u6ca1\u6709\u4ece\u6570\u636e\u9ad8\u901f\u7f13\u5b58\u8f6c\u50a8\u6e05\u9664\u5230\u4e3b\u5b58\u50a8\u5668\uff0c\n\u81ea\u4ece\u6709\u6548\u8d1f\u8f7d\u5230\u8fbe\u4e3b\u5b58\u50a8\u5668\u4ee5\u6765\uff0c\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u53ef\u80fd\u6ca1\u6709\u88ab\u5237\u65b0\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6539\u4e3a\u6267\u884c\u9648\u65e7\u7684\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\uff0c\n\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\u53ef\u4ee5\u89e3\u51b3\u7684\uff1a\u6211\u4eec\u53ef\u4ee5\u5c06\u5927\u526f\u672c\u6269\u5c55\u5230\u53ef\u80fd\u7684\u6700\u5927\u5927\u5c0f(0xffff*3*8)\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u4ed6\u5927\u526f\u672c\u5199\u5165\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\uff0c\u4ee5\u786e\u4fdd\u5c06\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u4ece\u6570\u636e\u7f13\u5b58\u4e2d\u6e05\u9664\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u5185\u5bb9\u3002\u5728\u6211\u7684\u6f0f\u6d1e\u653b\u51fb\u4e2d\uff0c\u6211\u575a\u6301\u4f7f\u7528\u8fd9\u4e2a\u6700\u5927\u53ef\u80fd\u5927\u5c0f\uff0c\u4f46\u662f\u5982\u679c\u60a8\u613f\u610f\u7684\u8bdd\uff0c\u60a8\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u6570\u5b57\u8fdb\u884c\u5fae\u8c03\uff0c\u5c06\u5f15\u5bfc\u65f6\u95f4\u4f18\u5316\u51e0\u5206\u4e4b\u4e00\u79d2\u3002\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5e76\u4e0d\u662f\u771f\u6b63\u53ef\u4ee5\u89e3\u51b3\u7684\u3002\u56e0\u4e3a\u6211\u4eec\u4e0d\u63a7\u5236\u76ee\u6807\u8df3\u8f6c\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u8df3\u8f6c\u5230\u672a\u7f13\u5b58\u7684\u865a\u62df\u5730\u5740\u6765\u7ed5\u8fc7\u6307\u4ee4\u7f13\u5b58\uff0c\u800c\u4e14\u636e\u6211\u6240\u77e5\uff0c\u5728\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u88ab\u5199\u5165\u4e4b\u540e\uff0c\u6ca1\u6709\u529e\u6cd5\u64cd\u7eb5\u7a0b\u5e8f\u52a8\u6001\u52a0\u8f7d\u65b0\u4ee3\u7801\uff0c\u4ece\u800c\u5bfc\u81f4\u6307\u4ee4\u7f13\u5b58\u5237\u65b0\u3002\u7136\u800c\uff0c\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u751a\u81f3\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u5728\u542f\u52a8\u671f\u95f4\u88ab\u5237\u65b0\uff0c\u5e76\u4e14\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u4e0d\u4f1a\u8986\u76d6\u4efb\u4f55\u73b0\u6709\u4ee3\u7801\uff0c\u56e0\u6b64\u4e0d\u4f1a\u6709\u4efb\u4f55\u8986\u76d6\u6709\u6548\u8d1f\u8f7d\u5730\u5740\u7684\u9648\u65e7\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58(PS2 CPU\u6ca1\u6709\u63a8\u6d4b\u6027\u6267\u884c\u6216\u4efb\u4f55\u5176\u4ed6\u4f1a\u5bfc\u81f4\u5728\u975e\u4f53\u7cfb\u7ed3\u6784\u6267\u884c\u8def\u5f84\u4e0a\u521b\u5efa\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u6761\u76ee\u7684\u60c5\u51b5)\u3002\n\u8003\u8651\u5230\u9ad8\u901f\u7f13\u5b58\u4e00\u81f4\u6027\u4f3c\u4e4e\u4e0d\u662f\u95ee\u9898\uff0c\u6211\u5c1d\u8bd5\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6709\u6548\u8d1f\u8f7d\uff0c\u5b83\u53ea\u662f\u91cd\u65b0\u542f\u52a8\u6d4f\u89c8\u5668\u83dc\u5355\u6765\u9a8c\u8bc1\u6709\u6548\u8d1f\u8f7d\u662f\u5426\u53ef\u4ee5\u5728\u786c\u4ef6\u4e0a\u6267\u884c\uff0c\u5e76\u523b\u5f55\u4e86\u4e00\u5f20\u6d4b\u8bd5\u5149\u76d8\uff1a\u6709\u6548\u8d1f\u8f7d\u5e94\u8be5\u4ece\u5149\u76d8\u8bfb\u53d6ELF\uff0c\u7136\u540e\u6267\u884c\u5b83\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u8003\u8651\u56e0\u7d20\uff1a\n\u6211\u4ece\u4e00\u4e2a\u57fa\u672c\u7684crt0.s\u5f00\u59cb\uff0c\u5b83\u5c06\u4f7f\u7528ExecPS2\u7cfb\u7edf\u8c03\u7528\u542f\u52a8main\uff0c\u91cd\u65b0\u521d\u59cb\u5316\u5185\u6838\u7684\u5185\u90e8\u72b6\u6001\uff0c\u4ece\u800c\u9500\u6bc1\u5176\u4ed6\u7ebf\u7a0b\uff0c\u4ee5\u9632\u6b62\u5b83\u4eec\u635f\u574f\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u4f7f\u7528\u7684\u4efb\u4f55\u5185\u5b58\uff1a\n.Section.text.Startup.global_start_start\uff1a#la$a0\uff0c0x7f#la$v1\uff0c0x01#syscall 0x01#ResetEE la$a0\uff0cmain la$a1\uff0c0 la$a2\uff0c0 la$a3\uff0c0.global ExecPS2ExecPS2\uff1ala$v1\uff0c7 syscall 7#ExecPS2\u3002\n\u6211\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u4ece\u78c1\u76d8\u52a0\u8f7dELF\u662f\u4f7f\u7528\u4e0e\u4eceIFO\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u76f8\u540c\u7684\u9ad8\u7ea7\u51fd\u6570\u8c03\u7528(pointToIFO(0x25c880)\uff0c\u7136\u540e\u662f\u6240\u9700\u5927\u5c0f\u7684getDiscData)\u3002\u5f53\u6211\u5c1d\u8bd5\u8fd9\u6837\u505a\u65f6\uff0c\u5b83\u53ea\u80fd\u83b7\u53d6\u5355\u4e2a\u6247\u533a(0x800\u5b57\u8282)\u7684\u6570\u636e\uff0c\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4e4b\u524d\u7f13\u51b2\u533a\u6ea2\u51fa\u9020\u6210\u7684\u635f\u574f\u3002\n\u6211\u6ca1\u6709\u5c1d\u8bd5\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u662f\u51b3\u5b9a\u4f7f\u7528\u6700\u4f4e\u7ea7\u522b\u7684\u51fd\u6570getBufferInternal(0x2986a0)\uff0c\u5b83\u53ea\u8c03\u7528SifCallRpc(0x2096e8)\u6765\u8bf7\u6c42IOP\u534f\u5904\u7406\u5668\u83b7\u53d6\u6570\u636e\uff0c\u7136\u540e\u7b49\u5f85\u5b8c\u6210\u3002\u8fd9\u4ef6\u4e8b\u8fd0\u4f5c\u5f97\u5f88\u5b8c\u7f8e\u3002\n\u4e0b\u4e00\u4e2a\u8003\u8651\u4e8b\u9879\u662f\u5c06ELF\u6587\u4ef6\u52a0\u8f7d\u5230\u4f55\u5904\u3002\u8fd0\u884creadelf-l\u5c06\u544a\u8bc9\u6211\u4eec\u76ee\u6807\u4e0d\u662f\u4f4d\u7f6e\u72ec\u7acb\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u9700\u8981\u5728\u7279\u5b9a\u4f4d\u7f6e\u52a0\u8f7d\uff1a\nreadelf-l BOOT.ELFElf\u6587\u4ef6\u7c7b\u578b\u4e3aEXEC(\u53ef\u6267\u884c\u6587\u4ef6)\u5165\u53e3\u70b90x1d00008\u67091\u4e2a\u7a0b\u5e8f\u5934\uff0c\u4ece\u504f\u79fb\u91cf52\u5f00\u59cb\u3002\u7a0b\u5e8f\u5934\uff1a\u7c7b\u578b\u504f\u79fb\u91cfVirtAddr PhysAddr FileSIz MemSiz FLG Align Load 0x000060 0x01ca1450 0x01ca1450 0x5ed6d 0x5ee30 RWE 0x10\u3002\n#\u5b9a\u4e49SifIopReset((void(*)(char*\uff0cint))0x84fe0)#\u5b9a\u4e49SifIopSync((int(*)(Void))0x85110)#\u5b9a\u4e49SifInitRpc((void(*)(Int))0x84180)#\u5b9a\u4e49SifExitRpc((void(*)(Void))0x84310)#\u5b9a\u4e49\u8d1f\u8f7d\u5927\u5c0f0x5ed6d#\u5b9a\u4e49MEM_SIZEInt lbaOffset=8338-285\uff1b\u5b57\u7b26\u5df2\u5ffd\u7565[]=&#34\uff1b&#34\uff1b\uff1bgetBufferInternal(\u5df2\u5ffd\u7565\uff0c0\uff0clbaOffset\uff0c(void*)Destination-0x60\uff0c(payload_size+0x60+0x7ff)/0x800\uff0c0)\uff1b//\u521d\u59cb\u5316(i=0\uff1bi&lt\uff1bMEM_SIZE-payload_size\uff1bi++){((char*)Destination+payload_size)[i]=0\uff1b}SifIopResp\u7684BSS\u6bb5\u3002la$a0\uff0c0\uff1bsyscall 0x64&#34\uff1b)\uff1b//FlushCache\u6570\u636e\u5199\u56deASM\u6613\u5931\u6027(&#34\uff1bla$v1\uff0c0x64\uff1bla$a0\uff0c2\uff1bsyscall 0x64&#34\uff1b)\uff1b//FlushCache\u6307\u4ee4\u5931\u6548//void ExecPS2(void*entry\uff0cvoid*gp\uff0cint argc\uff0cchar**argv)\uff1b//ExecPS2((void*)entry\uff0c0\uff0c0\uff0c0\u3002\n\u521d\u59cb\u6709\u6548\u8f7d\u8377\u6709\u8bb8\u591a\u4e0d\u7406\u60f3\u7684\u5730\u65b9\u3002\u5b83\u7684\u53ef\u79fb\u690d\u6027\u4e0d\u662f\u5f88\u597d\uff0c\u56e0\u4e3a\u6211\u4eec\u4f9d\u8d56\u4e8e\u786c\u7f16\u7801\u4eceIFO\u6587\u4ef6\u5230\u6709\u6548\u8d1f\u8f7d\u6587\u4ef6\u7684\u504f\u79fb\u91cf\uff0c\u4ee5\u53ca\u76ee\u6807ELF\u7684\u57fa\u5730\u5740\u3002\u6211\u4eec\u8fd8\u9700\u8981\u786e\u4fdd\u76ee\u6807ELF\u52a0\u8f7d\u5730\u5740\u4e0d\u4e0e\u6211\u4eec\u5728\u52a0\u8f7d\u548c\u5f15\u5bfc\u671f\u95f4\u4ecd\u7136\u8c03\u7528\u7684\u4efb\u4f55\u51fd\u6570\u91cd\u53e0\u3002\n\u4e3a\u4e86\u8fdb\u884c\u4e0a\u8ff0\u6539\u8fdb\uff0c\u6211\u4eec\u9700\u8981\u66f4\u591a\u7684\u7a7a\u95f4\u3002\u521d\u59cb\u6709\u6548\u8f7d\u8377(\u73b0\u5728\u79f0\u4e3a\u9636\u6bb51)\u4f4d\u4e8eIFO\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf0x2bb4\u5904\u3002\n..", "note_en": "I&#39;ve  previously discussed how the PlayStation 2 doesn&#39;t have any good entry-point software exploits for launching homebrew. You need to either purchase a memory card with an exploit pre-installed, open up the console to block the disc tray sensors, or install a modchip. For the best selling console of all time, it deserves better hacks.\n My initial attempt to solve this problem was to  exploit the BASIC interpreter that came bundeld with early PAL region PS2s. Although I was successful at producing the first software based entry-point exploit that can be triggered using only hardware that came with the console, the attack was largely criticized due to the requirement of having to enter the payload manually through the controller or keyboard, and limitation of being PAL only. I decided to write-off that exploit as being impractical, and so the hunt continued for a better attack scenario for the PlayStation 2.\n The PlayStation 2 has other sources of untrusted input that we could attack; games which support online multiplayer or USB storage could almost definitely be exploited. But unlike say the Nintendo 64, where we don&#39;t really have any other choice but to resort to  exploiting games over interfaces like modems, the PlayStation 2 has one key difference: its primary input is optical media (CD / DVD discs), a format which anyone can easily burn with readily available consumer hardware. This leaves an interesting question which I&#39;ve wanted to solve since I was a child:\n Is it possible to just burn our own homebrew games and launch them on an unmodified console the same way we would launch official discs (without going through any user interaction like disc swapping or triggering a network exploit in a game)?\n  Ultimately, I was successfully able to achieve my goal by exploiting the console&#39;s DVD player functionality. This blog post will describe the technical details and process of reversing and exploiting the DVD player. All of my code is  available on GitHub.\n    Obviously we can&#39;t just burn a disc containing an ELF file and expect the PS2 to boot it; we&#39;ll need to exploit some kind of software vulnerability related to parsing of controlled data. The console supports playing burned DVD video discs, which exposes significant attack surface we could potentially exploit to achieve our goal.\n If we think about what a DVD Video consists of there are quite a few main components, each with the potential for vulnerabilities:\n  Whilst the complete DVD Video specification is unfortunately behind a paywall, it is comprised largely of  open formats like MPEG, just bundled together in a proprietary container format (VOB). For the proprietary aspects there are some freely accessible unofficial references.\n The  IFO file format is probably the simplest format used, and is responsible for storing the metadata that links the video files together.\n The interaction machine is what allows for interactive menus and games in DVD Videos. It has  32 groups of instructions, and is interesting because it could potentially be used to dynamically manipulate internal memory state to prime an exploit, or it could be used to create a universal DVD with a menu which allows you to select your firmware version and trigger the appropriate exploit.\n   Clearly it&#39;s not practical to do most of our testing on the real hardware since burning hundreds of test discs would be wasteful and time inefficient. We need an emulator with some debugger support, which is where we hit our first roadblock: the most popular emulator for PlayStation 2, PCSX2,  does not support playing DVD Videos, and no one is interested in adding support.\n I&#39;d like to thank krHacken for helping me out with that first roadblock. It turns out that PCSX2 does support the DVD player; it just can&#39;t load it automatically since its located in encrypted storage and PCSX2 does not support the decryption. There are public tools which can  decrypt and  extract the DVD player from EROM storage. It can then be repacked into an ELF for easy loading into PCSX2.\n Due to the large number of different PlayStation 2 models released, each with slightly different DVD player firmwares (&gt; 50...), I will focus on a single DVD player for the duration of this article: 3.10E, as it happens to be the firmware for the console I own.\n I will continue to use Ghidra for decompilation as I&#39;ve been using throughout my  previous articles. The DVD player does not contain any symbols so all names in code snippets were assigned by me through reverse engineering.\n   The first file a DVD player will attempt to read is  VIDEO_TS.IFO. Searching memory for contents of the file and then setting memory write breakpoints there to track back where it was written we quickly locate the API that reads disc contents used by the IFO parsing code,  getDiscByte at  0x25c920. It&#39;s a stream reader which caches a number of sectors into a RAM buffer, and then automatically seeks more data once needed:\n byte getDiscByte(void) {\tbyte ret;\t\tif (currentDiscBytePointer &lt; endDiscBytePointer) {\t\tret = *currentDiscBytePointer;\t}\telse {\t\tcurrentDiscBytePointer = &amp;buffer;\t\tsetOffset = setOffset + numberOfSectorsRead;\t\tgetDiscByteInternal();\t\tret = *currentDiscBytePointer;\t}\tcurrentDiscBytePointer = currentDiscBytePointer + 1;\treturn ret;}\n  From searching calls to this, we can also quickly find wrappers that fetch data of larger sizes:  getDiscU16 ( 0x25c980),  getDiscU32 ( 0x25c9b8), and  getDiscData ( 0x25c9f0), which is the most interesting as it reads an arbitrary length of data:\n void getDiscData(uint size, byte *destination) {\tbyte b;\tuint i;\t\ti = 0;\tif (size != 0) {\t\tdo {\t\t\ti = i + 1;\t\t\tb = getDiscByte();\t\t\t*destination = b;\t\t\tdestination = destination + 1;\t\t} while (i &lt; size);\t}\treturn;}\n    The first thing I did was search for calls to  getDiscData in the hope of finding one with controllable size, and no bounds checking.\n Sure enough, we very quickly identify about 4 blatant buffer overflow vulnerabilities of this nature. Relating back to the  IFO file format, we can see that there are numerous 16-bit array lengths which are needed to parse the variably sized data structures in the file. The DVD player mistakenly only ever expects the maximum lengths allowed by the DVD specification, and so it is missing checks to reject discs with larger lengths. Since all of the copies are done on statically allocated memory buffers, specifying larger than allowed lengths will cause buffer overflows. For example, below is decompilation for the one at  0x25b3bc:\n large1 = getDiscU16();\t\tlarge2 = getDiscU16();\t\tlarge3 = getDiscU16();\t\tignored = getDiscU16();\t\tgetDiscData(((uint)large1 + (uint)large2 + (uint)large3) * 8, &amp;DAT_0140bdd4);\n  This one is the most interesting because it allows the largest possible copy size ( 0xffff * 3 * 8 = 0x17FFE8 bytes) of all the  getDiscData buffer overflows. It copies into the statically allocated buffer at  0x0140bdd4, and so by specifying the maximum possible copy size we gain control over the address space from  0x140bdd4 to  0x158BDBC ( 0x140bdd4 + 0x17FFE8).\n   As you can see, we can control quite a large region of memory using the above vulnerability. However, scanning through that memory is initially very disappointing; there are very few pointers, and none of them look particularly interesting to corrupt!\n Although there are no interesting pointers in this region, there are some indexes, which if corrupted could lead to further out of bounds memory corruption.\n Note that large reads like this won&#39;t always copy contiguous data from the IFO file, as sectors will start repeating once we exceed the file size, but generally assume that all data written by a  getDiscData call can be controlled as it originates from  somewhere on the disc. Also, after writing a certain amount, we may overflow into internal state used by  getDiscByte functions, but we will get to this later.\n   At  0x25e388 we have this call to an entry in a function pointer array, where we can control the 16-bit  fpIndex at  0x141284a from the overflow:\n   This allows us to jump to the address stored anywhere from  0x5b9d40 up to  0x5b9d40 + 0xffff * 4 = 0x5F9D3C.\n   This primitive is not quite ideal, as none of our overflow bugs allow us to control the memory where the jump targets are read from. Worse still, most of this memory region is mapped from a read-only section of the DVD Player, so it&#39;s unlikely that we can influence the contents of this memory region without another bug.\n After the function pointers, we do some see some addresses for  switch  case labels, which is slightly interesting because that allows us to jump into the middle of a function and execute its epilogue without having executed its prologue, allowing us to misalign the stack pointer and return to an unexpected value on the stack. I went through all of these and unfortunately I was only ever able to use that to jump to  0.\n I decided to dump the entire region of possible jump targets, group them into 4-bytes and see if any of them would point to memory that we control via the overflow vulnerability... Amazingly, there is a result: index  0xe07e (address  0x5f1f38) points to  0x1500014, which is within our controlled range! This isn&#39;t perfect, since it&#39;s the cached virtual address, and so we might run into cache coherency problems, but it could work.\n   It&#39;s amazingly lucky that there happens to be a valid jump target we can use which already points to memory we can control. Since other DVD Player versions with different address spaces probably won&#39;t have this same luxury, I&#39;ll briefly talk about one other corruption primitive, in case it turns out to be useful for anyone trying to exploit their own console&#39;s version.\n  if (*(int *)(&amp;DAT_01411e54 + indexForOOBW * 4) == 0) {\t\terror = getBuffer(filename,0,&amp;buffer,1,0);\t\tif (error &lt; 0) goto LAB_0025c79c;\t\tlVar3 = FUN_002161f8(0x140de40,pcVar4,0xc);\t\tif (lVar3 == 0) {\t\t\tuVar2 = getControlledValue();--&gt;\t\t\t*(undefined4 *)(&amp;DAT_01411e54 + indexForOOBW * 4) = uVar2;\t\t\tif (*(int *)(&amp;DAT_01411e54 + indexForOOBW * 4) != 0) goto LAB_0025c7ac;\t\t}\t\terror = -3;\t}\n  Since  indexForOOBW is a 32-bit value, corrupting it via the large overflow could potentially allow writing to an arbitrary address in this path.\n There&#39;s the constraint that the value must be  0 before you write it (per the first line in that snippet), but that shouldn&#39;t make exploitation significantly more difficult. You could easily overwrite a  NOP in a delay-slot somewhere into a jump to a register which happens to be controlled at time of execution. Alternatively, a better approach would be chaining this OOB write with the OOB call mentioned above; you overwrite one of the addresses we can use as a jump target which happens to be  0 into an arbitrary new jump target.\n When I briefly experimented with this primitive, it failed at the call to  getBuffer because earlier on in the function it generated the  filename via  sprintf(filename, &#34;VTS_%02d_0.IFO&#34;, indexForOOBW), and the file  &#34;VTS_1364283729_0.IFO&#34; didn&#39;t exist. We can&#39;t create this file normally because the code has a maximum filename length which we run into when we try large indexes like this (I think it&#39;s either  15 or  16 bytes). You could work around the length limitation, and still use this bug to corrupt quite a large region of memory, or it might be possible to corrupt enough internal data-structures through another overflow to trick the call into thinking these large index files exist. Since I didn&#39;t need it for my console, I didn&#39;t analyse this possibility fully, and proceeded with just exploiting the OOB call.\n   At this point, we have a pretty clear path for exploitation of the large read overflow: we overwrite the  fpIndex to  0xe07e, and overflow our payload into  0x1500014. When the code then indexes into the function pointer array using the corrupted  fpIndex, it will trigger a jump to our payload.\n   The first problem we run into is that the first thing we intend to corrupt,  fpIndex ( 0x141284a), is located after  currentDiscBytePointer ( 0x1411fe4) and  endDiscBytePointer ( 0x1411fe8) in memory, and so those values which affect the output of  getDiscByte will have already been corrupted by the time we are trying to corrupt  fpIndex, and may have been redirected to no longer point to memory set to the contents of our IFO file.\n The solution is to break at writing  currentDiscBytePointer to find out its value at the time we are about to corrupt it, and make sure we just overwrite the same value it already had. We can also change  endDiscBytePointer to  0xffffffff to prevent calling  getDiscByteInternal which would lead to more confusion if it was called whilst we are in half corrupted state.\n   With the overflow now reaching  fpIndex and still copying controlled contents from the IFO file, we can break and look at the  currentDiscBytePointer at the time of corrupting it to locate where from the IFO we are copying from. Once we&#39;ve found that, we can modify those bytes in the file to  7e e0 (little endian representation of  0xe07e) to point to our jump target.\n Similarly, we can break at writing  0x1500014 to work out where in the file our payload will be copied from and set it to some placeholder value.\n Now running the exploit and breaking at the OOB call ( 0x25e388), we&#39;re faced with a new problem: the index has been rewritten between our corruption and its usage for the call. If we can&#39;t avoid this write, it could be a dead end for this exploitation method.\n Breaking on writing  fpIndex after our large read, we see that its written inside this function at  0x25E970:\n int setFpIndex(void) {\tif (DAT_01412856 != 0) {\t\tif (DAT_0141284e == &#39;\\0&#39;) {\t\t\tif (DAT_01412854 == 0) {\t\t\t\tfpIndex = 3;\t\t\t}\t\t\telse {\t\t\t\tfpIndex = 4;\t\t\t}\t\t}\t\telse {\t\t\tif (DAT_01412854 == 0) {\t\t\t\tfpIndex = 5;\t\t\t}\t\t\telse {\t\t\t\tfpIndex = 6;\t\t\t}\t\t}\t\treturn 0;\t}\treturn -1;}\n  Notice how not all paths write  fpIndex? If the 16-bit value at  0x1412856 (which we can also corrupt with the overflow) is set to  0, it will leave  fpIndex alone and return  -1 to indicate failure.\n The call chain that leads to  setFpIndex is immediately before the OOB call itself ( 0x25e378), and there&#39;s also no checking of the return value of  setFpIndex! This means we can bypass the initialisation of  fpIndex and still reach the OOB call whilst it still contains our corrupted value:\n callSetFpIndex(puVar6 + ((uint)DAT_01412841 - 1) * 8);\t\t\t(*(code *)(&amp;PTR_LAB_005b9d40)[(uint)fpIndex])(puVar6 + ((uint)DAT_01412841 - 1) * 8);\n   At this point we are jumping to memory of controlled contents, which should mean arbitrary code execution! However, we write our payload to the cached virtual address mapping, and also execute it from there, which creates two potential sources of failure on the hardware we will need to consider:\n The payload may not have been flushed from data cache to main memory at the time of execution,\n  The instruction cache may not have been flushed since the payload reached main memory, so we may execute stale instruction cache instead,\n The first is solvable: we can extend our large copy to the maximum possible size ( 0xffff * 3 * 8), and maybe even make use of the other large copies to write as much data as possible, to ensure that our payload gets evicted from the data cache in place of something else. I stuck with this maxium possible size in my exploit, but you could potentially fine-tune this number to optimise boot time by a fraction of a second if you were so inclined.\n The second is not really solvable. Since we don&#39;t control the target jump address, we cannot instead jump to the uncached virtual address to bypass instruction cache, and to my knowledge there&#39;s no way of manipulating the program into dynamically loading new code causing an instruction cache flush after our payload has been written. However, it actually turns out to not even be an issue because the instruction cache is flushed during startup, and our payload doesn&#39;t overwrite any existing code, so there won&#39;t be any stale instruction cache covering the payload&#39;s address (PS2 CPU doesn&#39;t have speculative execution or anything else which would cause instruction cache entries to be created at non-architecturally executed paths).\n Given that cache coherency doesn&#39;t seem to be an issue, I tried a simple payload, which just boots back the browser menu to verify that the payload would execute on the hardware, and burned a test disc: The payload should read an ELF from the disc and then execute it. It seems simple, but there are a few different considerations:\n  I started with a basic  crt0.s which would use the  ExecPS2 system call to start  main, reinitialising the kernel&#39;s internal state, and thus destroying other threads to prevent them from corrupting any memory used by our payload:\n .section .text.startup.global _start_start:\t#la $a0, 0x7f\t#la $v1, 0x01\t#syscall 0x01 # ResetEE\tla $a0, main\tla $a1, 0\tla $a2, 0\tla $a3, 0.global ExecPS2ExecPS2:\tla $v1, 7\tsyscall 7 # ExecPS2\n  My first attempt to load an ELF from the disc was use the same high level function calls which were used to read data from the IFO file ( pointToIFO ( 0x25c880) followed by  getDiscData with the desired size). When I attempted this, it was only able to fetch a single sector ( 0x800 bytes) of data, likely due to the previous corruption from the buffer overflow.\n Instead of attempting to fix that, I decided to use the lowest level function,  getBufferInternal ( 0x2986a0), which just calls  SifCallRpc ( 0x2096e8) to request the IOP co-processor to fetch the data and then waits for completion. This worked perfectly.\n The next consideration is where to load the ELF file to. Running  readelf -l will tell us that the target is not a position-independent binary and needs to be loaded at a specific location:\n readelf -l BOOT.ELFElf file type is EXEC (Executable file)Entry point 0x1d00008There is 1 program header, starting at offset 52Program Headers:\tType\t\t\t\t\t Offset\t VirtAddr\t PhysAddr\t FileSiz MemSiz\tFlg Align\tLOAD\t\t\t\t\t 0x000060 0x01ca1450 0x01ca1450 0x5ed6d 0x5ee30 RWE 0x10\n   #define SifIopReset ((void (*)(char *, int))0x84fe0)#define SifIopSync ((int (*)(void))0x85110)#define SifInitRpc ((void (*)(int))0x84180)#define SifExitRpc ((void (*)(void))0x84310)#define PAYLOAD_SIZE 0x5ed6d#define MEM_SIZE 0x5ee30#define DESTINATION 0x01ca1450#define ENTRY 0x1d00008__attribute__((noreturn)) int main(void) {\t// Target relative to VIDEO_TS.IFO (starting DVDVIDEO-VMG...)\tint lbaOffset = 8338 - 285;\tchar ignored[] = &#34;&#34;;\tgetBufferInternal(ignored, 0, lbaOffset, (void *)DESTINATION - 0x60, (PAYLOAD_SIZE + 0x60 + 0x7ff) / 0x800, 0);\t// Init BSS section\tfor(i = 0; i &lt; MEM_SIZE - PAYLOAD_SIZE; i++) {\t\t((char *)DESTINATION + PAYLOAD_SIZE)[i] = 0;\t}\tSifIopReset(0, 0);\twhile(!SifIopSync());\tSifInitRpc(0);\tSifExitRpc();\tasm volatile(&#34;la $v1, 0x64; la $a0, 0; syscall 0x64&#34;); // FlushCache data writeback\tasm volatile(&#34;la $v1, 0x64; la $a0, 2; syscall 0x64&#34;); // FlushCache instruction invalidate\t//void ExecPS2(void* entry, void* gp, int argc, char** argv);\t//ExecPS2((void *)ENTRY, 0, 0, 0);\tasm volatile(&#34;la $a0, 0x1d00008; la $a1, 0; la $a2, 0; la $a3, 0; la $v1, 7; syscall 7&#34;);}\n    There are a number of things not ideal with the initial payload. It&#39;s not very portable because we rely on hardcoding both the offset from the IFO file to the payload file, and the base address of the target ELF. We also rely on the target ELF loading address not overlapping with any of the functions we still call during loading and booting.\n   In order to make the above improvements, we&#39;ll need more space. The initial payload (now referred to as stage 1) is located at offset  0x2bb4 within the IFO file, a\n......", "posttime": "2020-06-28 05:12:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,dvd,hacking,\u8c03\u7528", "title": "FreeDVDBoot-\u901a\u8fc7\u5176DVD\u64ad\u653e\u5668\u7834\u89e3PlayStation2", "title_en": "FreeDVDBoot \u2013 Hacking the Playstation 2 through its DVD player", "transed": 1, "url": "https://cturt.github.io/freedvdboot.html", "via": "", "real_tags": ["\u7834\u89e3", "dvd", "hacking", "\u8c03\u7528"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008654, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "JSON\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u6216\u64cd\u4f5c\u5458\u6240\u505a\u7684\u51e0\u4e4e\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u4f1a\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6d89\u53caJSON\u3002JSON\u89e3\u7801\u662f\u6602\u8d35\u7684\uff0c\u5982\u679c\u60a8\u7684\u4ea7\u54c1\u4f7f\u7528JSON\uff0c\u90a3\u4e48\u8fdb\u51faJSON\u7684\u6570\u636e\u7f16\u7ec4\u7684\u6027\u80fd\u5c31\u5f88\u91cd\u8981\u3002\u8fd9\u662f\u5173\u4e8e\u8bbe\u8ba1\u4e00\u79cd\u9ad8\u6548\u7684\u7f16\u7801/json.Decoder\u66ff\u4ee3\u65b9\u6848\u7684\u8ba8\u8bba\u3002\nJSON\u662f\u4e00\u79cd\u91cd\u8981\u7684\u6570\u636e\u4ea4\u6362\u683c\u5f0f\uff0c\u51e0\u4e4e\u6211\u4eec\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u6240\u505a\u7684\u4e00\u5207\u90fd\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6d89\u53ca\u5230JSON\u3002\n\u540c\u65f6\uff0cJSON\u89e3\u7801\u662f\u6602\u8d35\u7684\u3002\u6bcf\u6b21\u53d1\u5e03GO\u65f6\uff0c\u6211\u4eec\u90fd\u4f1a\u770b\u5230\u7f16\u7801/JSON\u5305\u6548\u7387\u7684\u63d0\u9ad8\u3002\u6709\u65f6\u8fd9\u4e9b\u90fd\u662f\u5f88\u5927\u7684\u6539\u8fdb\uff0c\u6bd4\u5982GO 1.3\u4e2d\u4e0d\u518d\u4f7f\u7528\u5206\u6bb5\u5806\u6808\uff0c\u6700\u8fd1\u8fd9\u4e9b\u6539\u8fdb\u662f\u9002\u5ea6\u7684\u3002\u57281.15\u5468\u671f\u4e2d\uff0c\u6211\u770b\u5230\u4e24\u4e2a\u6027\u80fd\u6539\u8fdb\u4e0d\u5f97\u4e0d\u56de\u6eda\uff0c\u56e0\u4e3a\u867d\u7136\u5b83\u4eec\u63d0\u9ad8\u4e86\u901f\u5ea6\uff0c\u4f46\u5b83\u4eec\u6253\u7834\u4e86\u4eba\u4eec\u4f9d\u8d56\u7684\u5fae\u5999\u7684\u9690\u542b\u884c\u4e3a\u3002\u6d77\u4f26\u5b9a\u5f8b\u3002[1]\u3002\n\u5728Go\u751f\u6001\u7cfb\u7edf\u4e2d\u6709\u8bb8\u591a\u66ff\u4ee3\u7684JSON\u5e93\uff0c\u901a\u5e38\u7531\u5c11\u6570\u4eba\u7ef4\u62a4\uff0c\u6240\u4ee5\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u5b83\u7684\u9aa8\u5934\u4e0a\u6709\u4e00\u4e9b\u8089\uff0c\u540c\u6837\uff0c\u4e5f\u4e0d\u662f\u65e0\u53ef\u6311\u5254\u7684\u3002\u6211\u60f3\u6211\u5e94\u8be5\u8bd5\u4e00\u8bd5\u3002\n\u5728\u6700\u4f4e\u7ea7\u522bpkg/json.scanner\u53ef\u4ee5\u5728\u4e0d\u5206\u914d\u7684\u60c5\u51b5\u4e0b\u6807\u8bb0\u6d41JSON(\u53ea\u8981\u63d0\u4f9b\u51e0\u5343\u5b57\u8282\u7684\u7f13\u51b2\u533a)\u3002\n\u57fa\u51c6\u626b\u63cf\u7a0b\u5e8f/\u52a0\u62ff\u5927-161561 3524005 ns/op 638.78 MB/s 0 B/op 0\u5206\u914d/opBenchmarkScanner/CITM_CATALOG-163556 1555322 ns/op 1110.51 MB/s 0 B/op 0\u5206\u914d/opBenchmarkScanner/twitter-167068 836031 ns/op 755.37 MB/s 0 B/op 0\u5206\u914d/opBenchmarkScanner/CODE-16 1543 3640425 ns/op 533.03 MB/s 0 B/op 0\u5206\u914d/opBenchmarkscanner\u3002-16 12771 467360 ns/op 1471.01 MB/s 0 B/op 0\u5206\u914d/op\u3002\n\u57fa\u51c6\u89e3\u7801\u4ee4\u724c/\u5206\u7ec4/\u52a0\u62ff\u5927-16267 22073095 ns/OP 101.98 MB/s 4402914 B/OP 222279 allocs/opBenchmarkDecoderToken/encodingjson/canada-16 86 67830737 ns/OP 33.19MB/s 17740387 B/OP 889106 allocs/opBenchmarkDecoderToken/pkgjson/citm_catalog-16 1114 5183226 ns/OP 333.23 MB/s 965992 B/OP 81995 allocs/opBenchmarkDecoderToken/encodingjson/citm_catalog-16 288 20882018 ns/OP 82.71MB/s 5661597 B/OP 324692 allocs/opBenchmarkDecoderToken/pkgjson/twitter-16 333.23 MB/OP 255.98 MB\u3002/s 768354 B/OP 38992 allocs/opBenchmarkDecoderToken/encodingjson/twitter-16 471 12606205 ns/OP 50.10MB/s 3584017 B/OP 187319 allocs/opBenchmarkDecoderToken/pkgjson/code-16 346 16877006 ns/OP 114.98 MB/s 4304233 B/OP 320235 allocs/opBenchmarkDecoderToken/encodingjson/code-16 73 80255994 ns/OP 24.18MB/s 23355962 B/OP 1319125 allocs/opBenchmarkDecoderToken/pkgjson/example-16 113912 53083 ns/OP 245.35 MB/s 16016 B/OP 914 allocs/opBenchmarkDecoderToken/encodingjson/example-16 21734 273991 ns/\u3002OP 47.53MB/s 82416 B/OP 4325 allocs/opBenchmarkDecoderToken/pkgjson/sample-16 213761 B/OP 871796 ns/OP 788.59 MB/s 213761 B/OP 5081 allocs/opBenchmarkDecoderToken/encodingjson/sample-16 1803 3287623 ns/OP 209.12 MB/s 723782 B/OP 26095\u5206\u914d/OP\u3002\n\u56e0\u4e3a\u5206\u914d\u5728Decoder.Token API\u4e2d\u5360\u5f88\u5927\u6bd4\u4f8b\uff0c\u6240\u4ee5pkg/json.Decoder\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66ff\u4ee3API\uff0c\u8be5API\u4ea7\u751f\u7684\u5206\u914d\u8981\u5c11\u5f97\u591a\uff0c\u5e76\u4e14\u901f\u5ea6\u5feb8-10\u500d\u3002\nBenchmarkDecoderNextToken/Pkgjson/Canada-161197 4825232 ns/op 466.52 MB/s 136 B/op 3 allocs/opBenchmarkDecoderNextToken/encodingjson/canada-16 90 65392440 ns/op 34.42MB/s 17740399 B/op 889106 allocs/opBenchmarkDecoderNextToken/pkgjson/citm_catalog-16 2709 2162849 ns/op 798.58 MB/s 136 B/op 3 allocs/opBenchmarkDecoderNextToken/encodingjson/citm_catalog-16 301 20064314 ns/op 86.08 MB/s 5661597 B/op 324692 allocs/opBenchmarkDecoderNextToken/pkgjson/twitter-16 5395 1068106 ns/op 591.25 MB\u3002/S 152 B/OP 4 allocs/opBenchmarkDecoderNextToken/encodingjson/twitter-16 494 12072956 ns/OP 52.31 MB/s 3584013 B/OP 187319 allocs/opBenchmarkDecoderNextToken/pkgjson/code-16 1135 5124666 ns/OP 378.65 MB/s 248 B/OP 6 allocs/opBenchmarkDecoderNextToken/encodingjson/code-16 74 77579973 ns/OP 25.01 MB/s 23355955 B/OP 1319125 allocs/opBenchmarkDecoderNextToken/pkgjson/example-16 269010 22323 ns/OP 583.43 MB/s 152 B/OP 4 allocs/opBenchmarkDecoderNextToken/encodingjson/example-16 22707 264078 ns/\u3002OP 49.32MB/s 82416 B/OP 4325 allocs/opBenchmarkDecoderNextToken/pkgjson/sample-16 10000 510445 ns/OP 1346.85 MB/s 114B/OP 9 allocs/opBenchmarkDecoderNextToken/encodingjson/sample-16 1836 3161804 ns/OP 217.44 MB/s 723781 B/OP 26095\u5206\u914d/OP\u3002\n\u5728\u6700\u9ad8\u7ea7\u522b\uff0cpkg/json\u53ef\u4ee5\u4f7f\u7528\u4e0ecoding/json\u76f8\u540c\u7684API\u5c06\u6570\u636e\u89e3\u7ec4\u5230Go\u5bf9\u8c61\u4e2d\u3002\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4e00\u9879\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\uff0c\u4f46\u5bf9\u4e8e\u5e0c\u671b\u4f7f\u7528\u8be5\u5305\u4f5c\u4e3a\u66ff\u4ee3\u5305\u7684\u4eba\u6765\u8bf4\uff0c\u7ed3\u679c\u662f\u5f88\u6709\u5e0c\u671b\u7684\u3002\nBenchmarkDecoderDecodeInterfaceAny/pkgjson/canada-16 217 27425893 ns/OP 82.08 MB/s 8747163 B/OP 281408 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/canada-16 153 38347477 ns/OP 58.70MB/s 20647616 B/OP 392553 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/citm_catalog-16 747 8008839 ns/OP 215.66 MB/s 5197853 B/OP 89673 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/citm_catalog-16 360 16607501 ns/OP 104.00 MB/s 9406809 B/OP 95389 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/twitter-16 1606 3714515 ns/OP 170.01 MB\u3002/s 2130731 B/OP 30182 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/twitter-16 862 6927998 ns/OP 91.15MB/s 4283407 B/OP 31278 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/code-16 333 17939351 ns/OP 108.17 MB/s 7331643 B/OP 232059 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/code-16 236 25324951 ns/OP 76.62MB/s 12332753 B/OP 271292 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/example-16 76874 78079 ns/OP 166.81 MB/s 50980 B/OP 739 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/example-16 40886 146685 ns/\u3002OP 88.79MB/s 82855 B/OP 782 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/sample-16 5240 1116081 ns/OP 615.99 MB/s 399970 B/OP 5542 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/sample-16 1123 5369313 ns/OP 128.04 MB/s 2661872 B/OP 7527\u5206\u914d/OP\u3002\n\u6211\u4f7f\u7528\u7684\u662f\u4ece\u6e90\u4ee3\u7801\u6784\u5efa\u7684GO 1.15\u7684\u9884\u53d1\u5e03\u7248\u672c\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u8f83\u65e7\u7684\u7248\u672c\uff0c\u60a8\u7684\u6570\u5b57\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u5f53Go 1.15\u53d1\u5e03\u65f6\uff0c\u4f60\u5e94\u8be5\u5347\u7ea7\u3002\n\u8fd9\u4e2a\u5305\u63d0\u4f9b\u4e86\u540c\u6837\u9ad8\u7ea7\u522b\u7684json.Decoder API\uff0c\u5177\u6709\u66f4\u9ad8\u7684\u541e\u5410\u91cf\u548c/\u6216\u66f4\u5c11\u7684\u5206\u914d\u3002\u8fd9\u4e2a\u5305\u7684\u6210\u529f\u6807\u51c6\u662f\u4f5c\u4e3a\u7f16\u7801/json\u7684\u66ff\u4ee3\u4ea7\u54c1\u3002\n\u5982\u679c\u60a8\u53ef\u4ee5\u5c06\u6574\u4e2a\u8f93\u5165\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u8fd9\u5f88\u597d\uff0c\u4f46\u8fd9\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\u8f93\u5165\u5927\u5c0f\u901a\u5e38\u662f\u672a\u77e5\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u6ca1\u6709\u9650\u5236\u3002\u5728\u5185\u5b58\u4e2d\u7f13\u51b2\u4f1a\u5e26\u6765\u53ef\u7528\u6027\u98ce\u9669\u3002\u5728\u5904\u7406\u4e4b\u524d\u7f13\u51b2\u4f1a\u5e26\u6765\u5ef6\u8fdf\uff0c\u6d41\u5f0f\u8bfb\u53d6\u5141\u8bb8\u60a8\u5728\u6570\u636e\u5230\u8fbe\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u5728\u903b\u8f91\u4e0a\u4e0e\u4f20\u8f93\u6216\u8bfb\u53d6\u91cd\u53e0\u3002\u6b64\u8f6f\u4ef6\u5305\u652f\u6301\u901a\u8fc7io.Reader\u8f93\u5165\u6e90\u6267\u884c\u6d41\u5f0f\u64cd\u4f5c(\u8fd9\u4e5f\u662f\u4e0e\u7f16\u7801/json\u517c\u5bb9\u6240\u5fc5\u9700\u7684)\u3002\n\u9664\u4e86\u7f16\u7801/json API\u4e4b\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u7528\u6700\u5c11\u7684(\u7406\u60f3\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u5206\u914d)\u64cd\u4f5c\u7684\u66ff\u4ee3API\u3002\n\u6211\u4eec\u90fd\u719f\u6089\u6982\u8981\u5206\u6790\u548c\u8ddf\u8e2a(GO\u5de5\u5177pprof\uff0cGO\u5de5\u5177\u8ddf\u8e2a)\uff0c\u5b83\u4eec\u662f\u6211\u4eec\u5728\u7f16\u5199\u7a0b\u5e8f\u540e\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u7a0b\u5e8f\u6027\u80fd\u7684\u6280\u672f\u3002\u6709\u6ca1\u6709\u5de5\u5177\u53ef\u4ee5\u7528\u6765\u5728\u6211\u4eec\u7f16\u5199\u7a0b\u5e8f\u4e4b\u524d\u8bc4\u4f30\u5b83\u7684\u6027\u80fd\u5462\uff1f\nJSON\u4e0d\u4f7f\u7528\u957f\u5ea6\u6807\u8bb0\uff1b\u8981\u77e5\u9053\u8981\u8bfb\u53d6\u591a\u5c11\uff0c\u6211\u4eec\u5fc5\u987b\u5168\u90e8\u8bfb\u53d6\u3002\u8fd9\u610f\u5473\u7740\u5904\u7406\u6587\u4ef6\u7684\u65f6\u95f4\u4e0b\u9650\u662f\u6587\u4ef6\u7684\u5927\u5c0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5904\u7406\u6bcf\u4e2a\u5b57\u8282\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\n\u4f46\u662f\u8bfb\u53d6\u6587\u4ef6\u662f\u4e0d\u591f\u7684\uff0c\u6211\u4eec\u5fc5\u987b\u9075\u5faaJSON\u72b6\u6001\u673a\u6765\u786e\u5b9a\u4ee4\u724c\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002\u73b0\u5728\uff0c\u4ec5\u8bfb\u53d6N\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406\u8fd9N\u4e2a\u5b57\u8282\uff0c\u56e0\u6b64\u6027\u80fd\u81f3\u5c11\u662fread(N)+parse(N)\u3002\u4f46\u662f\u8fd8\u6709\u5176\u4ed6\u5f00\u9500\uff0c\u5982\u679c\u6211\u4eec\u5fc5\u987b\u5206\u914d\u5185\u5b58\u6765\u8bfb\u53d6\u6216\u5904\u7406\u8fd9\u4e9b\u5b57\u8282\uff0c\u90a3\u4e48\u8fd9\u5c06\u8017\u8d39\u6211\u4eec\u7684\u6210\u672c\u3002\n\u6211\u4eec\u77e5\u9053\uff0c\u5f71\u54cd\u89e3\u6790\u6027\u80fd\u7684\u91cd\u8981\u56e0\u7d20\u662f\u8f93\u5165\u7684\u5927\u5c0f\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671bN\u662f\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a\u5b57\u8282\u53ea\u5904\u7406\u4e00\u6b21\u3002\u5982\u679c\u6211\u4eec\u591a\u6b21\u63a5\u89e6\u540c\u4e00\u5b57\u8282\uff0c\u5219\u4f1a\u589e\u52a0\u5f00\u9500\uff0c\u5e76\u4e14\u5982\u679c\u6211\u4eec\u5fc5\u987b\u4fdd\u7559\u8fd9\u4e9b\u5b57\u8282\u624d\u80fd\u8fd4\u56de\u5e76\u518d\u6b21\u67e5\u770b\u5b83\u4eec\uff0c\u5219\u4f1a\u4f7f\u5904\u7406\u53d8\u5f97\u590d\u6742\u3002\n\u5c31\u50cf\u6211\u4eec\u4e0d\u60f3\u591a\u6b21\u5904\u7406\u4e00\u4e2a\u5b57\u8282\u4e00\u6837\uff0c\u6211\u4eec\u5e0c\u671b\u907f\u514d\u591a\u6b21\u5904\u7406\u4e00\u4e2a\u4ee4\u724c\uff0c\u6211\u4eec\u5e0c\u671b\u9650\u5236\u51fd\u6570\u8c03\u7528\u7684\u6570\u91cf\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u662fO(\u4ee4\u724c)\uff0c\u800c\u4e0d\u662fO(\u5b57\u8282)\u3002\n\u9650\u5236\u626b\u63cf\u4eea\u6216\u89e3\u7801\u5668\u5185\u90e8\u70ed\u8def\u5f84\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u3002Coding/json\u5728\u6bcf\u4e2a\u5b57\u8282\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0cpkg/json\u5728\u6bcf\u4e2a\u4ee4\u724c\u4e00\u4e2a\u8c03\u7528\u4e0a\u505a\u5f97\u66f4\u597d\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u505a\u5176\u4ed6\u4e8b\u60c5\uff0c\u6211\u4eec\u5c31\u9886\u5148\u4e86\u3002\n\u9650\u5236\u590d\u5236\u3002\u5982\u679c\u6211\u4eec\u8bbe\u8ba1\u9650\u5236\u6570\u636e\u590d\u5236\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u9650\u5236\u91cd\u65b0\u8bbf\u95ee\u4e00\u4e2a\u5b57\u8282\u7684\u6b21\u6570\u3002\n\u9650\u5236\u5206\u914d\u3002\u5982\u679c\u60a8\u9650\u5236\u53ef\u4ee5\u4ece\u4e2d\u590d\u5236\u7684\u4f4d\u7f6e\u6570\uff0c\u5e76\u4e14\u7406\u60f3\u60c5\u51b5\u4e0b\u4ec5\u5728\u73b0\u6709\u7f13\u51b2\u533a\u5185\u590d\u5236\uff0c\u5219\u81ea\u7136\u4f1a\u9650\u5236\u5206\u914d\u3002\u9650\u5236\u5206\u914d\u4ee5\u4e24\u79cd\u65b9\u5f0f\u7f29\u77ed\u8fd0\u884c\u65f6\u95f4\uff1a\n\u51cf\u5c11\u8fdb\u884c\u5206\u914d\u7684\u5f00\u9500\u3002\u5806\u662f\u5171\u4eab\u8d44\u6e90\uff0c\u5728\u5806\u4e0a\u5206\u914d\u9700\u8981\u4f7f\u7528\u5171\u4eab\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u610f\u5473\u7740\u9501\u3001\u7f13\u5b58\u4e89\u7528\u7b49C.F.\u3002\u963f\u59c6\u8fbe\u5c14\u5b9a\u5f8b[2]\n\u51cf\u5c11\u6e05\u7406\u5206\u914d\u7684\u5f00\u9500\u3002\u60a8\u8fdb\u884c\u7684\u5206\u914d\u8d8a\u5c11\uff0c\u6d88\u8017\u7684\u5806\u5c31\u8d8a\u5c11\uff0c\u4ea7\u751f\u7684\u5783\u573e\u4e5f\u5c31\u8d8a\u5c11\u3002\u51cf\u5c11\u8fd9\u4e24\u4e2a\u56e0\u7d20\u53ef\u4ee5\u51cf\u5c11\u540e\u53f0\u548c\u524d\u53f0\u5783\u573e\u6536\u96c6\u7684\u5f00\u9500\u3002\nJSON\u662f\u4e00\u4e2a\u4ee4\u724c\u6d41\uff0c\u8981\u6784\u5efa\u9ad8\u7ea7\u7ec4\u4ef6\uff0c\u6bd4\u5982\u6f02\u4eae\u7684\u6253\u5370\u673a\u548c\u89e3\u7801\u5668\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6d41\u5206\u89e3\u6210\u4ee4\u724c\u3002\nJSON\u89e3\u7801\u5668\u6709\u4e24\u4e2a\u4e3b\u8981\u7ec4\u4ef61\u3002\u5c06\u5b57\u8282\u6d41\u8f6c\u6362\u4e3aJSON\u4ee4\u724c\u6d41\u7684\u626b\u63cf\u5668\u6216\u4ee4\u724c\u5668\u3002\u5c06JSON\u4ee4\u724c\u6d41\u5e94\u7528\u5230GO\u5bf9\u8c61\u7684\u89e3\u7ec4\u7a0b\u5e8f\u3002\u8ba9\u6211\u4eec\u9996\u5148\u8ba8\u8bba\u4e00\u4e0b\u6807\u8bb0\u5316\uff1a\nJSON\u662f\u4e00\u79cd\u89c4\u5219\u7684\u3001\u5b9a\u4e49\u826f\u597d\u7684\u8bed\u6cd5\uff0c\u5728json.org\u4e0a\u6709\u4e00\u7ec4\u5f88\u68d2\u7684\u56fe\u8868\u3002\n\uff1a\uff0c\u5192\u53f7\uff0c\u952e/\u503c\u5bf9\u4e2d\u952e\u548c\u503c\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u3002\nCoding/json\u4f7f\u7528Decoder.Token API\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u60a8\u58f0\u660e\u4e00\u4e2ajson.Decoder\uff0c\u7136\u540e\u8c03\u7528Token\uff0c\u76f4\u5230err\u4e3a\u975e\u96f6\u3002\n\u8f6f\u4ef6\u5305mainimport(&#34\uff1b\u7f16\u7801/json&#34\uff1b&#34\uff1bfmt&#34\uff1b&#34\uff1b)func main(){input\uff1a=`{&#34\uff1ba&#34\uff1b\uff1a1\uff0c&#34\uff1bb&#34\uff1b\uff1atrue\uff0c&#34\uff1bc&#34\uff1b\uff1a[1\uff0c&#34\uff1bTwo&#34\uff1b\uff0cnull]}`dec\uff1a=json.NewDecoder(string s.NewReader(Input))for{tok\uff0cerr\uff1a=dec.Token()if err\uff01=nil{Break}fmt.Printf(&#34\uff1b%v\\t(%T)\\n&#34\uff1b\uff0ctok\uff0ctok)}}\u3002\n\u8fd9\u76f8\u5f53\u65b9\u4fbf\uff0ctok\u662f\u4e00\u4e2a\u63a5\u53e3{}\u503c\uff0c\u56e0\u6b64\u5b83\u65e2\u53ef\u4ee5\u8868\u793a\u8fd4\u56de\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u8868\u793a\u5b83\u7684\u7c7b\u578b\uff1b\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\uff0c\u6570\u5b57\u662f\u6d6e\u70b964\uff0c\u5e03\u5c14\u503c\u662f\u771f\u6b63\u7684true\u548cfalse\uff0c\u751a\u81f3null\u4e5f\u8868\u793a\u4e3anil\u3002\n\u4f46\u662f\u8fd9\u79cd\u4fbf\u5229\u662f\u6709\u4ee3\u4ef7\u7684\u3002\u8981\u4e86\u89e3\u539f\u56e0\uff0c\u8ba9\u6211\u4eec\u6765\u8c08\u8c08\u5b57\u7b26\u4e32\u3002\u5f53\u6211\u4eec\u5199\u4e0b\u8fd9\u6761\u8bed\u53e5\u65f6\u3002\n\u7f16\u8bd1\u5668\u590d\u5236b\uff0c\u56e0\u4e3a\u56f4\u68cb\u89c4\u5219\u8bf4\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u5982\u679c\u5b57\u7b26\u4e32\u548c\u5b57\u8282\u7247\u5171\u4eab\u76f8\u540c\u7684\u540e\u5907\u6570\u636e\uff0c\u90a3\u4e48\u66f4\u6539b\u53ef\u80fd\u4f1a\u66f4\u6539s\u7684\u5185\u5bb9\u3002\u8fd9\u5c06\u662f\u4e0d\u597d\u7684\uff0c\u56e0\u6b64string(B)\u590d\u5236b\u7684\u7ade\u4e89\u3002\n%go doc coding/json NewDecoderpackage json//import&#34\uff1bcoding/json&#34\uff1bfunc NewDecoder(rio.Reader)*Decoder NewDecoder\u8fd4\u56de\u4ecer\u8bfb\u53d6\u7684\u65b0\u89e3\u7801\u5668\u3002\u89e3\u7801\u5668\u5f15\u5165\u81ea\u5df1\u7684\u7f13\u51b2\u533a\uff0c\u5e76\u53ef\u80fd\u4ecer\u8bfb\u53d6\u8bf7\u6c42\u7684JSON\u503c\u4ee5\u5916\u7684\u6570\u636e\u3002\n%go doc io Reader.Readpackage io//import&#34\uff1bio&#34\uff1b\u51fd\u6570\u8bfb\u53d6(p[]\u5b57\u8282)(n int\uff0c\u9519\u8bef)\u3002\n\u60a8\u7ed9read\u8bbe\u7f6e\u4e86\u4e00\u4e2a[]\u5b57\u8282\u7f13\u51b2\u533a\uff0cread\u8fd4\u56de\u5b83\u8bfb\u53d6\u5230\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u8282\u6570\uff0c\u53ef\u80fd\u8fd8\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u77e5\u9053\u8f93\u5165\u662f\u5b57\u8282\u6d41\uff0c\u8f93\u51fa\u662frunes\u3001float64\u3001bools\u548cstring\u3002\u8f93\u5165\u81f3\u5c11\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5b57\u8282\u5207\u7247{&#39\uff1bh&#39\uff1b\uff0c&#39\uff1be&#39\uff1b\uff0c&#39\uff1bl&#39\uff1b\uff0c&#39\uff1bl&#39\uff1b}\uff0c\u8be5\u5b57\u8282\u5207\u7247\u5c06\u88ab\u590d\u5236\u3002\n\u8f6f\u4ef6\u5305mainimport(&#34\uff1b\u7f16\u7801/json&#34\uff1b&#34\uff1bfmt&#34\uff1b&#34\uff1bio&#34\uff1b&#34\uff1bstring&#34\uff1b)func main(){input\uff1a=`&#34\uff1bhello&#34\uff1b`var rio.Reader=string\u3002NewReader(Input)//\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a[]byte Dec\uff1a=json.NewDecoder(R)tok\uff0c_\uff1a=dec.Token()fmt.Prk\u8bfb\u53d6\u4e3a[]byte dec\uff1a=json.NewDecoder(R)tok\uff0c_\uff1a=dec.Token()fmt.Pr.\u3002\u3001Tok\u3001Tok)}\u3002\n\u4ece\u6027\u80fd\u89d2\u5ea6\u6765\u770b\uff0c\u66f4\u4e25\u91cd\u7684\u95ee\u9898\u662f\u4e3a\u63a5\u53e3\u8d4b\u503c\u901a\u5e38\u4f1a\u5bfc\u81f4\u5206\u914d\u3002\u7531\u4e8eDecoder.Token API\u7684\u8bbe\u8ba1\uff0c\u5206\u914d\u7ed9\u6bcf\u4e2a\u4ee4\u724c\u7684\u5177\u4f53\u503c\u4f1a\u5bfc\u81f4\u8be5\u503c\u8f6c\u4e49\u5230\u5806\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u4ec5\u4e3a\u6bcf\u4e2a[]\u5b57\u8282\u5230\u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u5206\u914d\u4e86\u4e00\u4e2a\u5206\u914d\u503c\uff0c\u800c\u4e14\u6bcf\u4e2a\u4ee4\u724c\u90fd\u4f1a\u8f6c\u50a8\u5230\u5806\u4e2d\u3002\u5206\u914d\u7684\u6570\u91cf\u4e0e\u6587\u4ef6\u4e2d\u7684\u4ee4\u724c\u6570\u91cf\u76f8\u5173\uff0c\u800c\u8fd9\u4e9b\u5206\u914d\u7684\u5927\u5c0f\u5c06\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4e0e\n\u8fd9\u6709\u51e0\u4e2a\u539f\u56e0\uff0c\u5b83\u4eec\u90fd\u6709\u76f8\u540c\u7684\u6f5c\u5728\u539f\u56e0\uff0c\u5783\u573e\u6536\u96c6\u5668\u3002\u6211\u4eec\u90fd\u77e5\u9053\u63a5\u53e3\u503c\u662f\u4e00\u4e2a\u4e24\u4e2a\u5b57\u7684\u7ed3\u6784\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837[3]\u3002\n\u4e0a\u9762\u7684uintptr\u5e76\u4e0d\u662f\u8bf4\u7c7b\u578b\u548c\u6570\u636e\u662f\u6307\u9488(\u5c3d\u7ba1\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u6307\u9488)\uff0c\u53ea\u662f\u56e0\u4e3a\u8fd9\u4e9b\u5b57\u6bb5\u7684\u5927\u5c0f\u8db3\u4ee5\u5bb9\u7eb3\u6307\u9488\u5927\u5c0f\u7684\u5185\u5b58\u2009-\u2009\u4e2d\u7684\u503c\u7684\u5730\u5740\u3002\u5b83\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u56e0\u4e3a\u6709\u7b26\u53f7\u7684\u6307\u9488\u4f1a\u5c06\u5730\u5740\u7a7a\u95f4\u51cf\u534a\uff0c\u800c\u8d1f\u6307\u9488\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002\n\u63a5\u53e3\u503c\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u540c\u65f6\u8bb0\u5f55\u503c\u548c\u503c\u7684\u7c7b\u578b\u3002\u63a5\u53e3\u503c\u7684\u53e6\u4e00\u4e2a\u5c5e\u6027\u662f\u5b83\u4eec\u53ef\u4ee5\u4fdd\u5b58\u4efb\u4f55\u503c\uff0c\u800c\u4e0d\u9700\u8981\u5b83\u4eec\u7684\u7c7b\u578b\u3002\n\u5728\u65e9\u671f\u7684GO\u7248\u672c\u4e2d\uff0c\u63a5\u53e3\u53ef\u4ee5\u5c06uintptr\u6216\u66f4\u5c0f\u7684\u503c\u76f4\u63a5\u5b58\u50a8\u5728\u63a5\u53e3\u7684\u6570\u636e\u5b57\u6bb5\u4e2d\u3002\u4f46\u5728GO 1.6 TODO\u68c0\u67e5\u4e2d\uff0c\u8fd9\u4e00\u70b9\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u81ea\u52a8\u66f4\u6539\u4e24\u4e2a\u5b57\u6bb5\uff0c\u8fd9\u4f1a\u7ed9\u5e76\u53d1\u6536\u96c6\u5668\u5e26\u6765\u95ee\u9898\u3002\n\u4ece\u7f16\u8bd1\u5668\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u5fc5\u987b\u5c06\u5b58\u50a8\u5728x\u4e2d\u7684\u7c7b\u578b\u4eceint\u66f4\u6539\u4e3astring\uff0c\u5e76\u5c06\u503c\u4ece1\u66f4\u6539\u4e3a&#34\uff1b1&#34\uff1b\u3002\n\u4e3a\u6b64\uff0c\u7f16\u8bd1\u5668\u5728\u6570\u636e\u69fd\u4e2d\u5b58\u50a8\u4e00\u4e2a\u6307\u5411\u8be5\u503c\u7684\u6307\u9488\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u4ee4\u724c\u90fd\u4f1a\u8f6c\u4e49\u5230\u5806\u4e2d\uff0c\u4f46\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6211\u4eec\u77e5\u9053GO\u5b57\u7b26\u4e32\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5c0f\u7ed3\u6784\u3002\n\u56e0\u6b64\uff0c\u8981\u5c06[]\u5b57\u8282\u6807\u8bb0\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u9996\u5148\u590d\u5236\u5806\u4e2d\u7684[]\u5b57\u8282\uff0c\u7136\u540e\u521b\u5efa\u5b57\u7b26\u4e32\u5934\u5e76\u5c06\u5176\u653e\u5165\u5806\u4e2d\uff0c\u6700\u540e\u5c06\u6307\u5411\u8be5\u5934\u7684\u6307\u9488\u653e\u5165\u63a5\u53e3\u4e2d\u7684\u6570\u636e\u69fd\u3002\n\u8f6f\u4ef6\u5305mainimport(&#34\uff1b\u7f16\u7801/json&#34\uff1b&#34\uff1b\u5b57\u7b26\u4e32&#34\uff1b&#34\uff1b\u6d4b\u8bd5&#34\uff1b)func BenchmarkJSONDecodeHello(b*testing.B){input\uff1a=`&#34\uff1bhello&#34\uff1b`r\uff1a=string s.NewReader(Input)//\u4ee5[]byte dec\uff1a=json.NewDecoder(R)b.ReportAllocs()b.SetBytes(int.\u3002i++{r.Seek(0\uff0c0)tok\uff0c_\uff1a=dec.Token()if tok\uff01=&#34\uff1bhello&#34\uff1b{b.Ftal()}\n%\u8fdb\u884c\u6d4b\u8bd5-\u5de5\u4f5c\u53f0=\u3002-memprofile=M.P json/tok_test.gogoos\uff1adarwingoarch\uff1aamd64BenchmarkJSONDecodeHello-4 3523440 355 ns/op 19.73 MB/s 37 B/op 3 allocs/opPASSok\u547d\u4ee4\u884c\u53c2\u65701.951s\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6b64\u5305\u7684\u5927\u90e8\u5206\u52a0\u901f\u6765\u81ea\u51cf\u5c11\u5206\u914d\uff1b\u5177\u4f53\u5730\u8bf4\uff0c\u5806\u5206\u914d\u8def\u5f84\u4e2d\u672a\u82b1\u8d39\u7684\u65f6\u95f4\u548cGC\u5468\u671f\u4e2d\u672a\u82b1\u8d39\u7684\u65f6\u95f4\u53ef\u7528\u4e8e\u626b\u63cf\u3002\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u6784\u5efa\u4e00\u4e2a\u6bd4coding/json\u5206\u914d\u66f4\u5c11\u7684API\uff0c\u6211\u4eec\u5fc5\u987b\u89e3\u51b3\u6211\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u7684\u6bcf\u4e2a\u95ee\u9898\u3002\n\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u6807\u8bb0\u5e8f\u5217\uff1b{&#34\uff1ba&#34\uff1b\uff1a1\uff0c&#34\uff1bb&#34\uff1b\uff1atrue\uff0c&#34\uff1bc&#34\uff1b\uff1a[1\uff0c&#34\uff1bTwo&#34\uff1b\uff0cnull]\u548c}\u3002\n\u539f\u6765\uff0c\u4ee4\u724c\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u544a\u8bc9\u60a8\u4ee4\u724c\u662f\u4ec0\u4e48\u3002\n\u8fd9\u662fScaner.Next\u548cDecoder.NextToken API\u7684\u7b2c\u4e00\u4e2a\u6539\u8fdb\uff0c\u5b83\u4e0d\u662f\u5c06[]\u5b57\u8282\u8f6c\u6362\u4e3a\u503c\uff0c\u800c\u662f\u76f4\u63a5\u4ece\u8f93\u5165\u8fd4\u56de\u4ee4\u724c-\u200b\u4e00\u4e2a\u7b80\u5355\u7684\u5b50\u7247\u3002\n\u8f6f\u4ef6\u5305mainimport(&#34\uff1bfmt&#34\uff1b&#34\uff1bgithub.com/pkg/json&#34\uff1b&#34\uff1bstring&#34\uff1b)func main(){input\uff1a=`{&#34\uff1ba&#34\uff1b\uff1a1\uff0c&#34\uff1bb&#34\uff1b\uff1atrue\uff0c&#34\uff1bc&#34\uff1b\uff1a[1\uff0c&#34\uff1bTwo&#34\uff1b\uff0cnull]}`dec\uff1a=json.NewDecoder(string s.NewReader(Input))for{tok\uff0cerr\uff1a=dec.NextToken()if err\uff01=nil{Break}fmt.Printf(&#34\uff1b%s\\t(%T)\\n&#34\uff1b\uff0ctok\uff0ctok)}}\u3002\n\u56e0\u4e3a\u8f93\u51fa\u662f\u8f93\u5165\u5b50\u5207\u7247\uff0c\u800c\u4e0d\u662f\u526f\u672c\uff0c\u6240\u4ee5\u5bf9\u8f93\u51fa\u7684\u6709\u6548\u671f\u6709\u9650\u5236\uff0c\u8fd9\u7c7b\u4f3c\u4e8ebufio.Scanner API\u3002\n\u6709\u65f6\u4eba\u4eec\u60f3\u77e5\u9053\u4ee4\u724c\u7684\u7c7b\u578b\uff1b\u96c6\u5408\u3001\u6570\u7ec4\u3001\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u7b49\u7b49\uff0c\u6709\u65f6\u4ed6\u4eec\u60f3\u8981\u4ee4\u724c\u503c\u3001\u5b57\u7b26\u4e32\u3001\u6570\u5b57\uff0c\u4ee5\u4e00\u79cd\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u5f62\u5f0f\u3002Scaner.Next\u548cDecoder.NextToken\u5728\u8fd9\u65b9\u9762\u5e76\u4e0d\u65b9\u4fbf\uff0c\u4f46\u5b83\u4eec\u53ef\u4ee5\u7528\u6765\u66f4\u9ad8\u6548\u5730\u6784\u5efa\u66f4\u9ad8\u7ea7\u522b\u7684\u62bd\u8c61\u3002\n\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u8bfb\u53d6\u6570\u636e\u3002\u8fd9\u53ef\u80fd\u5f88\u96be\u6709\u6548\u5730\u5b8c\u6210\uff0c\u56e0\u4e3aJSON\u4e0d\u662f\u957f\u5ea6\u5206\u9694\u7684\uff0c\u60a8\u5fc5\u987b\u9605\u8bfb\u76f4\u5230\u627e\u5230\u6807\u8bb0\u7684\u672b\u5c3e\u3002\u4f20\u7edf\u7684\u65b9\u6cd5\u662f\u4f7f\u7528io.Reader\u3002\n\u60a8\u53ef\u4ee5\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\uff0c\u4f46\u60a8\u9700\u8981\u4e00\u4e2a\u5730\u65b9\u6765\u5b58\u50a8\u60a8\u9192\u6765\u7684\u4e1c\u897f\uff0c\u8fd8\u53ef\u80fd\u9700\u8981\u5c06\u8be5\u5b57\u8282\u653e\u56de\u539f\u5904\uff0c\n\u60a8\u53ef\u4ee5\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u7136\u540e\u5728\u7f13\u51b2\u533a\u4e2d\u67e5\u627e\u6807\u8bb0\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u3002\u5982\u679c\u7ed3\u675f\u6807\u8bb0\u4e0d\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u5219\u9700\u8981\u6267\u884c\u5927\u91cf\u7c3f\u8bb0\u548c\u590d\u5236\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u5728\u7f13\u51b2\u533a\u4e2d\u79fb\u52a8\u6570\u636e\u6216\u589e\u52a0\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u4e3a\u66f4\u591a\u6570\u636e\u817e\u51fa\u7a7a\u95f4\u3002\nCoding/json\u7ed3\u5408\u4e86\u8fd9\u4e9b\u529f\u80fd\uff0c\u901a\u5e38\u4f7f\u7528\u5c11\u91cf\u7684sync.pool\u6765\u5c1d\u8bd5\u900f\u660e\u5730\u91cd\u7528\u5c0f\u5bf9\u8c61\u3002\n\u53e6\u4e00\u79cd\u60f3\u6cd5\u7684\u7075\u611f\u6765\u81ea\u53f2\u8482\u82ac\u00b7\u65bd\u7ef4\u683c\u970d\u592b(Steven Schveighoffer)\u7684iopipe[4]\u548c\u83f2\u5c14\u00b7\u73c0\u5c14(Phil PEAR)[5]\u3002\n//byteReader\u5728io.Reader.type byteReader struct{data[]byte Offset int r io.Reader Err}//Release\u4e22\u5f03\u7a97\u53e3\u524d\u9762\u7684n\u4e2a\u5b57\u8282\u3002func(b*byteReader)release(N Int){b.Offset+=n}//Window\u8fd4\u56de\u5f53\u524d\u7a97\u53e3\u3002//\u8c03\u7528Release\u6216extend.func(b*byteReader)Window()[]reader.func(b*byteReader)Extension()int{\u3002\nJSON\u5305\u542b\u8bb0\u53f7\u548c\u7a7a\u683c\u7684\u6df7\u5408\u3002\u8bb0\u53f7\u4e4b\u95f4\u53ef\u4ee5\u51fa\u73b0\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u548c\u56de\u8f66\u7b26\uff0c\u5e76\u88ab\u5ffd\u7565\uff0c\u56e0\u6b64\u5bf9\u8bb0\u53f7\u7684\u641c\u7d22\u4ece\u641c\u7d22\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u5f00\u59cb\u3002\n\u73b0\u5728\u662f\u901a\u8fc7\u4f7f\u7528byteReader\u7684\u793a\u4f8b\u8ba8\u8bba\u4f18\u5316\u7a7a\u683c\u641c\u7d22\u7684\u597d\u65f6\u673a\u3002\n\u51fd\u6570countWhitespace(br*byteReader)int{n\uff1a=0 w\uff1a=br.window()for{for_\uff0cc\uff1a=range w{if isWhitespace(C){n++}}br.release(len(W))if br.add()==0{return n}w=br.window()}}\u3002\n\u8fd9\u6837\u505a\u6700\u5c11\uff0c\u8bbf\u95ee\u6bcf\u4e2a\u5b57\u7b26\u5e76\u8fdb\u884c\u4e00\u6b21\u51fd\u6570\u8c03\u7528(\u5185\u8054)\uff0c\u5e76\u8ba1\u7b97\u7a7a\u683c\u5b57\u7b26\u7684\u6570\u91cf\u3002\u4efb\u4f55(\u6709\u7528\u7684)JSON\u89e3\u7801\u5668\u4ee3\u7801\u90fd\u4e0d\u80fd\u6bd4\u8fd9\u66f4\u5feb\u3002\n\u5b9e\u73b0isWhitespace\u7684\u6700\u5feb\u65b9\u5f0f\u662f\u4ec0\u4e48\uff1f\n\u51fd\u6570isSpace(c\u5b57\u8282)bool{return c&lt\uff1b=&#39\uff1b&amp\uff1b&amp\uff1b(c==&#39\uff1b&#39\uff1b||c==&#39\uff1b\\t&#39\uff1b||c==&#39\uff1b\\r&#39\uff1b||c==&#39\uff1b\\n&#39\uff1b)}}\u3002\n\u540d\u79f0\u65f6\u95f4/opCountWhitespace/Canada-16 1.10ms\u00b12%CountWhitespace/citm_CATALOG-16 838\u00b5s\u00b11%CountWhitespace/Twitter-16 306\u00b5s\u00b11%CountWhitespace/code-16 937\u00b5s\u00b11%CountWhitespace/Example-16 6.40\u00b5s\u00b11%CountWhitespace/sample-16 333\u00b5s\u00b11%\u540d\u79f0\u901f\u5ea6CountWhitespace/Canada-16 2.04 GB/s\u3002\u793a\u4f8b-16 2.04 GB/s\u00b11%\u8ba1\u6570\u7a7a\u767d/\u793a\u4f8b-16 2.06 GB/s\u00b11%\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u533a\u5206\u54ea\u4e9b\u5b57\u7b26\u662f\u8bb0\u53f7\uff0c\u54ea\u4e9b\u662f\u7b80\u5355\u7684\u7a7a\u683c\uff0c\u8ba9\u6211\u4eec\u66f4\u4e0a\u4e00\u5c42\u697c\uff0c\u8ba8\u8bba\u5982\u4f55\u62c6\u5206\u8fd9\u4e9b\u8bb0\u53f7\u3002\n//Next\u8fd4\u56de\u5f15\u7528\u6d41\u4e2d\u4e0b\u4e00\u4e2a\u8bcd\u6cd5\u6807\u8bb0\u7684[]\u5b57\u8282\u3002//\u5728\u518d\u6b21\u8c03\u7528Next\u4e4b\u524d\uff0c[]\u5b57\u8282\u4e00\u76f4\u6709\u6548\u3002//\u5982\u679c\u6d41\u5728\u5176\u672b\u5c3e\u6216\u53d1\u751f\u9519\u8bef\uff0c\u5219Next\u8fd4\u56de\u96f6//Length[]\u5b57\u8282\u5207\u7247\u3002/\u6709\u6548\u7684\u6807\u8bb0\u4ee5\u4ee5\u4e0b\u5185\u5bb9\u4e4b\u4e00\u5f00\u5934\uff1a/{Object Start//[Array Start//}Object End//]Array End//\uff0c\u6587\u5b57\u9017\u53f7//\uff1a\u6587\u5b57\u5192\u53f7//t JSON TRUE//f JSON FALSE//n JSON NULL//&#34\uff1b\u53ef\u80fd\u5305\u542b\u53cd\u659c\u6760\u8f6c\u4e49\u5b9e\u4f53\u7684\u5b57\u7b26\u4e32\u3002//-\uff0c0-9 A number func(s*Scanner)Next()[]byte{//\u91ca\u653e\u4e0a\u4e00\u4e2a\u4ee4\u724c\u3002br.release(s.pos)s.pos=0 c\uff1a=s.Token()Length\uff1a=0\u5f00\u5173c{case ObjectStart\uff0cObjectEnd\uff0cColon\uff0cComma\uff0cArrayStart\uff0cArrayEnd\uff1a\n..", "note_en": "JSON is important, damn near everything that we do as programmers or operators involves JSON at some point.JSON decoding is expensive, if your product talks JSON then performance of marshalling data in and out of JSON is important.This is a talk about designing an efficient replacement for  encoding/json.Decoder.\n JSON is an important data interchange format.Damn near everything we do as programmers involves JSON in some way.\n At the same time, JSON decoding is expensive.Every Go release we see improvements in the efficiency of the  encoding/json package.Sometimes these are large improvements, like the move away from segmented stacks in Go 1.3, more recently these improvements have been moderate.In the 1.15 cycle I\u2019ve seen two performance improvement that had to be rolled back because, while they made it faster, they broke a subtle implicit behaviour that people were relying on.c.f. Hyrum\u2019s Law. [ 1]\n In the Go ecosystem there are a bunch of alternative JSON libraries, usually maintained by a small number of people, so this suggested to me that this is a problem with some meat on its bones, and equally, not impenetrable.I figured I\u2019d give it a try.\n At the lowest level  pkg/json.Scanner can tokenize streaming JSON without allocation (provided it is supplied a few kilobytes of buffer).\n BenchmarkScanner/canada-16 1561 3524005 ns/op 638.78 MB/s 0 B/op 0 allocs/opBenchmarkScanner/citm_catalog-16 3556 1555322 ns/op 1110.51 MB/s 0 B/op 0 allocs/opBenchmarkScanner/twitter-16 7068 836031 ns/op 755.37 MB/s 0 B/op 0 allocs/opBenchmarkScanner/code-16 1543 3640425 ns/op 533.03 MB/s 0 B/op 0 allocs/opBenchmarkScanner/example-16 341224 16362 ns/op 796.00 MB/s 0 B/op 0 allocs/opBenchmarkScanner/sample-16 12771 467360 ns/op 1471.01 MB/s 0 B/op 0 allocs/op\n  BenchmarkDecoderToken/pkgjson/canada-16 267 22073095 ns/op 101.98 MB/s 4402914 B/op 222279 allocs/opBenchmarkDecoderToken/encodingjson/canada-16 86 67830737 ns/op 33.19 MB/s 17740387 B/op 889106 allocs/opBenchmarkDecoderToken/pkgjson/citm_catalog-16 1114 5183226 ns/op 333.23 MB/s 965992 B/op 81995 allocs/opBenchmarkDecoderToken/encodingjson/citm_catalog-16 288 20882018 ns/op 82.71 MB/s 5661597 B/op 324692 allocs/opBenchmarkDecoderToken/pkgjson/twitter-16 2356 2467042 ns/op 255.98 MB/s 768354 B/op 38992 allocs/opBenchmarkDecoderToken/encodingjson/twitter-16 471 12606205 ns/op 50.10 MB/s 3584017 B/op 187319 allocs/opBenchmarkDecoderToken/pkgjson/code-16 346 16877006 ns/op 114.98 MB/s 4304233 B/op 320235 allocs/opBenchmarkDecoderToken/encodingjson/code-16 73 80255994 ns/op 24.18 MB/s 23355962 B/op 1319125 allocs/opBenchmarkDecoderToken/pkgjson/example-16 113912 53083 ns/op 245.35 MB/s 16016 B/op 914 allocs/opBenchmarkDecoderToken/encodingjson/example-16 21734 273991 ns/op 47.53 MB/s 82416 B/op 4325 allocs/opBenchmarkDecoderToken/pkgjson/sample-16 6642 871796 ns/op 788.59 MB/s 213761 B/op 5081 allocs/opBenchmarkDecoderToken/encodingjson/sample-16 1803 3287623 ns/op 209.12 MB/s 723782 B/op 26095 allocs/op\n Because allocations make up a large proportion of the  Decoder.Token API,  pkg/json.Decoder provides an alternative API that produces significantly fewer allocations and is 8-10x faster.\n BenchmarkDecoderNextToken/pkgjson/canada-16 1197 4825232 ns/op 466.52 MB/s 136 B/op 3 allocs/opBenchmarkDecoderNextToken/encodingjson/canada-16 90 65392440 ns/op 34.42 MB/s 17740399 B/op 889106 allocs/opBenchmarkDecoderNextToken/pkgjson/citm_catalog-16 2709 2162849 ns/op 798.58 MB/s 136 B/op 3 allocs/opBenchmarkDecoderNextToken/encodingjson/citm_catalog-16 301 20064314 ns/op 86.08 MB/s 5661597 B/op 324692 allocs/opBenchmarkDecoderNextToken/pkgjson/twitter-16 5395 1068106 ns/op 591.25 MB/s 152 B/op 4 allocs/opBenchmarkDecoderNextToken/encodingjson/twitter-16 494 12072956 ns/op 52.31 MB/s 3584013 B/op 187319 allocs/opBenchmarkDecoderNextToken/pkgjson/code-16 1135 5124666 ns/op 378.65 MB/s 248 B/op 6 allocs/opBenchmarkDecoderNextToken/encodingjson/code-16 74 77579973 ns/op 25.01 MB/s 23355955 B/op 1319125 allocs/opBenchmarkDecoderNextToken/pkgjson/example-16 269010 22323 ns/op 583.43 MB/s 152 B/op 4 allocs/opBenchmarkDecoderNextToken/encodingjson/example-16 22707 264078 ns/op 49.32 MB/s 82416 B/op 4325 allocs/opBenchmarkDecoderNextToken/pkgjson/sample-16 10000 510445 ns/op 1346.85 MB/s 1144 B/op 9 allocs/opBenchmarkDecoderNextToken/encodingjson/sample-16 1836 3161804 ns/op 217.44 MB/s 723781 B/op 26095 allocs/op\n At the highest level,  pkg/json can unmarshal data into a Go object with the same API as  encoding/json.This is very much a work in progress, but the results are promising for folks who want to use this package as a drop in replacement.\n BenchmarkDecoderDecodeInterfaceAny/pkgjson/canada-16 217 27425893 ns/op 82.08 MB/s 8747163 B/op 281408 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/canada-16 153 38347477 ns/op 58.70 MB/s 20647616 B/op 392553 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/citm_catalog-16 747 8008839 ns/op 215.66 MB/s 5197853 B/op 89673 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/citm_catalog-16 360 16607501 ns/op 104.00 MB/s 9406809 B/op 95389 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/twitter-16 1606 3714515 ns/op 170.01 MB/s 2130731 B/op 30182 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/twitter-16 862 6927998 ns/op 91.15 MB/s 4283407 B/op 31278 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/code-16 333 17939351 ns/op 108.17 MB/s 7331643 B/op 232059 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/code-16 236 25324951 ns/op 76.62 MB/s 12332753 B/op 271292 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/example-16 76874 78079 ns/op 166.81 MB/s 50980 B/op 739 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/example-16 40886 146685 ns/op 88.79 MB/s 82855 B/op 782 allocs/opBenchmarkDecoderDecodeInterfaceAny/pkgjson/sample-16 5240 1116081 ns/op 615.99 MB/s 399970 B/op 5542 allocs/opBenchmarkDecoderDecodeInterfaceAny/encodingjson/sample-16 1123 5369313 ns/op 128.04 MB/s 2661872 B/op 7527 allocs/op\n  I\u2019m using a pre release version of Go 1.15 built from source. If you\u2019re using an older version your numbers may vary. When Go 1.15 comes out, you should upgrade.\n This package offers the same high level  json.Decoder API with higher throughput and/or reduced allocations.A success criteria for this package would be as a drop in replacement for  encoding/json.\n  It\u2019s nice if you can have the entire input in memory but that\u2019s unrealistic.Input sizes are usually unknown and potentially unbounded.Buffering in memory is a availability risk.Buffering before processing introduces latency, streaming reads lets you process data as it arrives and logically overlap with transfer or read.This package supports streaming operation via  io.Reader input sources (which is also required for compatibility with  encoding/json)\n  In addition to the  encoding/json API, provide an alternative API that can operate with minimal, ideally no allocations.\n We\u2019re all familiar with profiling and tracing (go tool pprof, go tool trace) as techniques that we can use to examine the performance of a program once it is written.Are there tools that we can use to estimate the performance of a program before we write it?\n JSON doesn\u2019t use length markers; to know how much to read, we have to read it all.This means the lower bounds on the time to process the file is the size of the file.Specifically how long it takes to process each byte.\n But reading the file isn\u2019t enough, we have to follow the JSON state machine to figure out where the tokens start and end.Now, just reading  N bytes, we need to process those  N bytes, so the performance is at least  read(N)+parse(N).But there are other costs, if we have to allocate memory to read or process those bytes, then that will cost us.\n  We know that the big factor in the performance of a parse is the size of the input.Ideally we want  N to be the number of bytes in the input, that is, we want to process each byte only once.If we touch the same byte more than once, that adds overhead, and complicates processing if we have to keep those bytes around to come back and look at them again.\n Just like we don\u2019t want to process a byte more than once, we want to avoid processing a token more than once.We want to limit the number of function calls.Ideally  O(tokens), not  O(bytes).\n Limit function calls in the hot path inside the  Scanner or  Decoder. encoding/json uses one function call per byte,  pkg/json does better at one call per token.If we did nothing else we\u2019d be ahead.\n Limit copies.If we design to limit copying of data then we limit the number we revisit a byte.\n Limit allocations.If you limit the number of places you can copy from and too, ideally only copies within existing buffers, then you naturally limit allocations.Limiting allocations reduces runtime in two ways:\n Reduce the overhead in taking the allocation.The heap is a shared resource, allocating on the heap requires working with shared data structures.This means locks, cache contention, etc. c.f. Amdahl\u2019s Law  [ 2]\n Reduce the overhead of cleaning up allocations.The less allocations you make, the less heap you consume and the less garbage you produce.Reducing these two factors reduces the overhead of background and foreground garbage collection.\n JSON is a stream of tokens.To build higher level components like pretty printers and decoders we need to break the stream into tokens.\n A JSON decoder has two main components1. A scanner, or tokeniser, that converts a stream a bytes into a stream of JSON tokens.2. An unmarshaller that applies a stream of JSON tokens to a Go object.Let\u2019s talk about tokenization first:\n JSON is regular, well defined grammar.There is a great set of charts over on json.org.\n   :, a colon, the delimiter between the key and the value in the key/value pair.\n encoding/json does this with the  Decoder.Token API.You declare a  json.Decoder, then call  Token until  err is non  nil.\n package mainimport (\t&#34;encoding/json&#34;\t&#34;fmt&#34;\t&#34;strings&#34;)func main() {\tinput := `{&#34;a&#34;: 1, &#34;b&#34;: true, &#34;c&#34;: [1, &#34;two&#34;, null]}`\tdec := json.NewDecoder(strings.NewReader(input))\tfor {\t\ttok, err := dec.Token()\t\tif err != nil {\t\t\tbreak\t\t}\t\tfmt.Printf(&#34;%v\\t(%T)\\n&#34;, tok, tok)\t}}\n   This is rather convenient,  tok is an  interface{} value so it can represent both the value being returned, and also it\u2019s type; strings are  string, numbers are  float64, booleans are real  true and  false, even  null is represented as a  nil.\n But there is a cost to this convenience.To see why, let\u2019s talk about a string.When we write this statement\n  The compiler makes a copy of b, because the rules of Go say the strings are immutable.If the  string and the byte slice shared the same backing data, then changing  b could change the contents of  s.This would be bad so  string(b) copies the contest of  b.\n  % go doc encoding/json NewDecoderpackage json // import &#34;encoding/json&#34;func NewDecoder(r io.Reader) *Decoder NewDecoder returns a new decoder that reads from r. The decoder introduces its own buffering and may read data from r beyond the JSON values requested.\n  % go doc io Reader.Readpackage io // import &#34;io&#34;func Read(p []byte) (n int, err error)\n You give  Read a  []byte buffer,  Read returns to you the number of bytes it read  into the buffer, and possibly an error.\n So, now we know the input is a stream of bytes, and the output is runes, float64, bools, and strings.At a minimum the input  &#34;hello&#34; is going to result in a byte slice  []byte{&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;} and that byte slice is going to be be copied to a string.\n package mainimport (\t&#34;encoding/json&#34;\t&#34;fmt&#34;\t&#34;io&#34;\t&#34;strings&#34;)func main() {\tinput := `&#34;hello&#34;`\tvar r io.Reader = strings.NewReader(input) // reads strings as []byte\tdec := json.NewDecoder(r)\ttok, _ := dec.Token()\tfmt.Printf(&#34;%s\\t(%T)\\n&#34;, tok, tok)}\n A more seriously issue, from a performance point of view, is assigning a value to an interface  generally causes an allocation.Because of the design of the  Decoder.Token API, the concrete value assigned to each token token causes the value to escape to the heap.So not only do we have an allocation for every  []byte to  string conversion, but each token escapes to the heap.The number of allocations is tied to the number of tokens in the file, and the size of those allocations will be in part related to the size of the file.\n This is for several reasons, which all have the same underlying cause, the garbage collector.We all know that an interface value is a two word structure.It looks something like this  [ 3]\n  uintptr above is not to suggest that  type and  data are pointers (although in most cases they are) just that the  size of those fields is large enough to hold the address of a value in memory\u2009\u2014\u2009the size of a pointer.It\u2019s unsigned because a signed pointer would halve the address space, and a negative pointer doesn\u2019t make any sense.\n interface values are special in that they record both the value and the  type of the value.Another property of  interface values is they can hold  any value, reguardless of their type.\n In early Go versions it was possible for an interface to store a  uintptr or smaller value directly in the  data field of the interface.However this changed in Go 1.6  TODO check because it is not possible to change two fields atomically,which caused a problem for the concurrent collector.\n  From the point of view of the compiler, this must change the type stored in  x from  int to  string  and the value from  1 to  &#34;one&#34; atomically.\n To do this the compiler stores a  pointer to the value in the  data slot.This means,  each token escapes to the heap.But it gets worse, we know that a Go  string is itself a small struct.\n  So to convert a  []byte token to a  string first we copy the  []byte, that goes on the heap, then a string header is created, and that goes on the heap, and finally the pointer to that header goes into the  data slot in the interface.\n package mainimport (\t&#34;encoding/json&#34;\t&#34;strings&#34;\t&#34;testing&#34;)func BenchmarkJSONDecodeHello(b *testing.B) {\tinput := `&#34;hello&#34;`\tr := strings.NewReader(input) // reads strings as []byte\tdec := json.NewDecoder(r)\tb.ReportAllocs()\tb.SetBytes(int64(len(input)))\tb.ResetTimer()\tfor i := 0; i &lt; b.N; i++ {\t\tr.Seek(0, 0)\t\ttok, _ := dec.Token()\t\tif tok != &#34;hello&#34; {\t\t\tb.Fatal()\t\t}\t}}\n % go test -bench=. -memprofile=m.p json/tok_test.gogoos: darwingoarch: amd64BenchmarkJSONDecodeHello-4 3523440 355 ns/op 19.73 MB/s 37 B/op 3 allocs/opPASSok command-line-arguments 1.951s\n Spoiler alert, most of the speedups of this package come from reducing allocations; specifically the time  not spent in the heap allocation path, and the time not spent in GC cycles, is available for scanning.\n If we want to build an API that has lower allocations than  encoding/json, we have to address each of the problems I\u2019ve discussed.\n Let\u2019s look back at the sequence of tokens;  {  &#34;a&#34;  :  1  ,  &#34;b&#34;  :  true  ,  &#34;c&#34;  :  [  1  ,  &#34;two&#34;  ,  null  ] and  }.\n It turns out that the first character in the token tells you what the token is\n  This is the first improvement in the  Scanner.Next, and  Decoder.NextToken API\u2019s.Rather than converting the  []byte to a value, it just returns the token straight from the input\u2014\u200ba simple subslice.\n package mainimport (\t&#34;fmt&#34;\t&#34;github.com/pkg/json&#34;\t&#34;strings&#34;)func main() {\tinput := `{&#34;a&#34;: 1, &#34;b&#34;: true, &#34;c&#34;: [1, &#34;two&#34;, null]}`\tdec := json.NewDecoder(strings.NewReader(input))\tfor {\t\ttok, err := dec.NextToken()\t\tif err != nil {\t\t\tbreak\t\t}\t\tfmt.Printf(&#34;%s\\t(%T)\\n&#34;, tok, tok)\t}}\n   Because the output is a subslice of the input, not a copy, there are restrictions on how long the output is valid for.This is similar to the  bufio.Scanner API.\n Sometimes people want to know type of the token; collection, array, string, number, etc, sometimes they want the token  value,  the string, the  number, in a form they can work with. Scanner.Next and  Decoder.NextToken aren\u2019t convenient for that, but they can be used to build higher level abstractions more efficiently.\n Let\u2019s talk about reading data.This can be tricky to do efficiently because JSON is not length delimited, you have to read until you find the end of the token.The traditional way to do this is with an  io.Reader.\n You can read one  byte at a time, but you need a place to store store the thing your waking over, also might need to put the  byte back,\n You can read into a buffer, then look in buffer for start and end of token.If the end token isn\u2019t in the buffer need to do a lot of bookkeeping and copying to move the data around the the buffer or grow the buffer to make room for more data.\n encoding/json does a combination of these, often with a smattering of  sync.pool to try to reuse small objects transparently.\n The alternative is an idea inspired by Steven Schveighoffer\u2019s iopipe  [ 4] and Phil Pearl  [ 5].\n // A byteReader implements a sliding window over an io.Reader.type byteReader struct {\tdata []byte\toffset int\tr io.Reader\terr error}// release discards n bytes from the front of the window.func (b *byteReader) release(n int) {\tb.offset += n}// window returns the current window.// The window is invalidated by calls to release or extend.func (b *byteReader) window() []byte {\treturn b.data[b.offset:]}// extend extends the window with data from the underlying reader.func (b *byteReader) extend() int {\n JSON contains a mixture of tokens and whitespace.Space, tab, newline and carriage return can occur between tokens and are ignored, thus the search for a token begins with a search for the first  non whitespace character.\n  This is a good time to talk about optimising the search for whitespace with an example of using a  byteReader.\n func countWhitespace(br *byteReader) int {\tn := 0\tw := br.window()\tfor {\t\tfor _, c := range w {\t\t\tif isWhitespace(c) {\t\t\t\tn++\t\t\t}\t\t}\t\tbr.release(len(w))\t\tif br.extend() == 0 {\t\t\treturn n\t\t}\t\tw = br.window()\t}}\n This does the minimum, visit each character and makes one function call (which is inlined), and counts the number of whitespace characters.Any (useful) JSON decoder code cannot go faster that this.\n What is the fastest way to implement  isWhitespace?Here\u2019s the implementation that  encoding/json uses (with a different name)\n func isSpace(c byte) bool { return c &lt;= &#39; &#39; &amp;&amp; (c == &#39; &#39; || c == &#39;\\t&#39; || c == &#39;\\r&#39; || c == &#39;\\n&#39;)}\n    name time/opCountWhitespace/canada-16 1.10ms \u00b1 2%CountWhitespace/citm_catalog-16 838\u00b5s \u00b1 1%CountWhitespace/twitter-16 306\u00b5s \u00b1 1%CountWhitespace/code-16 937\u00b5s \u00b1 1%CountWhitespace/example-16 6.40\u00b5s \u00b1 1%CountWhitespace/sample-16 333\u00b5s \u00b1 1%name speedCountWhitespace/canada-16 2.04GB/s \u00b1 2%CountWhitespace/citm_catalog-16 2.06GB/s \u00b1 1%CountWhitespace/twitter-16 2.06GB/s \u00b1 1%CountWhitespace/code-16 2.07GB/s \u00b1 1%CountWhitespace/example-16 2.04GB/s \u00b1 1%CountWhitespace/sample-16 2.06GB/s \u00b1 1%\n Now we can tell which characters are tokens and which are simply whitespace, let\u2019s step up a level and talk about breaking up those tokens.\n // Next returns a []byte referencing the the next lexical token in the stream.// The []byte is valid until Next is called again.// If the stream is at its end, or an error has occured, Next returns a zero// length []byte slice.//// A valid token begins with one of the following://// { Object start// [ Array start// } Object end// ] Array End// , Literal comma// : Literal colon// t JSON true// f JSON false// n JSON null// &#34; A string, possibly containing backslash escaped entites.// -, 0-9 A numberfunc (s *Scanner) Next() []byte {\t// release the previous token\ts.br.release(s.pos)\ts.pos = 0\tc := s.token()\tlength := 0\tswitch c {\tcase ObjectStart, ObjectEnd, Colon, Comma, ArrayStart, ArrayEnd:\t\t\n......", "posttime": "2020-06-28 04:50:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,\u9ad8\u6027\u80fd,high,json", "title": "\u6784\u5efa\u9ad8\u6027\u80fd\u7684JSON\u89e3\u6790\u5668", "title_en": "Building a high performance JSON parser", "transed": 1, "url": "https://dave.cheney.net/high-performance-json.html", "via": "", "real_tags": ["\u6027\u80fd", "\u9ad8\u6027\u80fd", "high", "json"]}, {"category": "", "categoryclass": "", "imagename": "618f4f6a9facafc76bff80e45fded9b0.png", "infoid": 1008653, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u5230\u5bfc\u822a\u8df3\u8dc3\u641c\u7d22\u6208\u4e9a\u5c3c\u4e9a\u4e8b\u6545[\u0261OJ\u02c8j\u0250ni\u0250]\u662f\u4e00\u8d77\u653e\u5c04\u6027\u6c61\u67d3\u4e8b\u6545\uff0c\u4e8e1987\u5e749\u670813\u65e5\u53d1\u751f\u5728\u5df4\u897f\u6208\u4e9a\u65af\u5dde\u7684\u6208\u4e9a\u5c3c\u4e9a\uff0c\u5f53\u65f6\u4e00\u4e2a\u88ab\u9057\u5fd8\u7684\u653e\u5c04\u6e90\u88ab\u4ece\u8be5\u5e02\u4e00\u5904\u5e9f\u5f03\u7684\u533b\u9662\u53d6\u51fa\u3002\u540e\u6765\u6709\u5f88\u591a\u4eba\u5904\u7406\uff0c\u9020\u6210\u56db\u4eba\u6b7b\u4ea1\u3002\u5927\u7ea6\u670911.2\u4e07\u4eba\u63a5\u53d7\u4e86\u653e\u5c04\u6027\u6c61\u67d3\u68c0\u67e5\uff0c\u5176\u4e2d249\u4eba\u88ab\u53d1\u73b0\u53d7\u5230\u6c61\u67d3\u3002[1][2]\u3002\n\u5728\u6e05\u7406\u884c\u52a8\u4e2d\uff0c\u51e0\u4e2a\u5730\u70b9\u7684\u8868\u571f\u4e0d\u5f97\u4e0d\u88ab\u6e05\u9664\uff0c\u51e0\u5ea7\u623f\u5c4b\u88ab\u62c6\u9664\u3002\u8fd9\u4e9b\u623f\u5c4b\u5185\u7684\u6240\u6709\u7269\u54c1\uff0c\u5305\u62ec\u4e2a\u4eba\u8d22\u4ea7\uff0c\u90fd\u88ab\u6ca1\u6536\u5e76\u711a\u70e7\u3002\u201c\u65f6\u4ee3\u201d\u6742\u5fd7\u5df2\u7ecf\u786e\u8ba4\u8fd9\u8d77\u4e8b\u6545\u662f\u4e16\u754c\u4e0a\u6700\u4e25\u91cd\u7684\u6838\u707e\u96be\u4e4b\u4e00\uff0c\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784\u79f0\u5176\u4e3a\u4e16\u754c\u4e0a\u6700\u4e25\u91cd\u7684\u8f90\u5c04\u4e8b\u6545\u4e4b\u4e00\u3002[3][4]\u3002\n\u6208\u4e9a\u5c3c\u4e9a\u4e8b\u6545\u7684\u653e\u5c04\u6e90\u662f\u4e00\u4e2a\u5c0f\u80f6\u56ca\uff0c\u91cc\u9762\u88c5\u7740\u5927\u7ea693\u514b(3.3\u4ebf\u76ce\u53f8)\u9ad8\u653e\u5c04\u6027\u6c2f\u5316\u94ef(\u4e00\u79cd\u7528\u653e\u5c04\u6027\u540c\u4f4d\u7d20\u94ef-137\u5236\u6210\u7684\u94ef\u76d0)\uff0c\u88c5\u5728\u4e00\u4e2a\u7531\u94c5\u548c\u94a2\u94c1\u5236\u6210\u7684\u5c4f\u853d\u7f50\u4e2d\u3002\u6e90\u88ab\u653e\u7f6e\u5728\u8f6e\u5f0f\u5bb9\u5668\u4e2d\uff0c\u5176\u4e2d\u8f6e\u5b50\u5728\u5916\u58f3\u5185\u8f6c\u52a8\u4ee5\u5728\u5b58\u50a8\u4f4d\u7f6e\u548c\u7167\u5c04\u4f4d\u7f6e\u4e4b\u95f4\u79fb\u52a8\u6e90\u3002[1]\u3002\n1971\u5e74\uff0c\u6e90\u7684\u6d3b\u5ea6\u4e3a74\u592a\u8d1d\u514b\u52d2\u5c14(TBq)\u3002\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784(IAEA)\u5c06\u8be5\u96c6\u88c5\u7bb1\u63cf\u8ff0\u4e3a\u56fd\u9645\u6807\u51c6\u80f6\u56ca\u3002\u5b83\u7684\u76f4\u5f84\u4e3a51\u6beb\u7c73(2\u82f1\u5bf8)\uff0c\u957f48\u6beb\u7c73(1.8\u82f1\u5bf8)\u3002\u6d3b\u6027\u56fa\u4f53\u7684\u6bd4\u6d3b\u5ea6\u7ea6\u4e3a814TBq\u00b7kg\u22121(\u534a\u8870\u671f\u4e3a30\u5e74)\u3002\u8ddd\u6e901m\u5904\u5242\u91cf\u7387\u4e3a4.5 6Gy/h(456rad\u00b7h\u22121)\u3002\u867d\u7136\u8be5\u88c5\u7f6e\u7684\u5e8f\u5217\u53f7\u5c1a\u4e0d\u6e05\u695a\uff0c\u4ece\u800c\u963b\u788d\u4e86\u6700\u7ec8\u7684\u8bc6\u522b\uff0c\u4f46\u8be5\u88c5\u7f6e\u88ab\u8ba4\u4e3a\u662f\u5728\u7f8e\u56fd\u6a61\u6811\u5cad\u56fd\u5bb6\u5b9e\u9a8c\u5ba4\u5236\u9020\u7684\uff0c\u5e76\u88ab\u7528\u4f5c\u6208\u4f0a\u5c3c\u4e9a\u533b\u9662\u653e\u5c04\u6cbb\u7597\u7684\u653e\u5c04\u6e90\u3002[1]\u3002\n\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784\u8868\u793a\uff0c\u6765\u6e90\u5728\u62cd\u6444\u65f6\u542b\u670950.9 Tbq(1,380\u7acb\u65b9\u7c73)\uff0c\u5728\u6e05\u7406\u884c\u52a8\u4e2d\u5df2\u6062\u590d\u4e86\u7ea644 Tbq(1200\u7acb\u65b9\u7c73\uff0c87%)\u7684\u6c61\u67d3\u3002\u8fd9\u610f\u5473\u77407\u4ebfTbq(190 Tbq)\u4ecd\u7136\u7559\u5728\u73af\u5883\u4e2d\uff1b\u52302016\u5e74\uff0c\u5b83\u5c06\u8870\u51cf\u5230\u7ea63.5Tbq(95Tbq)\u3002\nGoiano de Raditerapia\u7814\u7a76\u6240(IGR)\u662f\u6208\u4f0a\u5c3c\u4e9a\u7684\u4e00\u5bb6\u79c1\u4eba\u653e\u5c04\u6cbb\u7597\u673a\u6784\uff0c[1]\u4f4d\u4e8e\u8be5\u5e02\u884c\u653f\u4e2d\u5fc3\u666e\u62c9\u8428\u00b7\u897f\u7ef4\u5361(Pra\u00e7a C\u00edvica)\u897f\u5317\u4ec51\u516c\u91cc(0.6\u82f1\u91cc)\u3002\u5b83\u57281985\u5e74\u642c\u5230\u4e86\u65b0\u7684\u529e\u516c\u573a\u6240\uff0c\u7559\u4e0b\u4e861977\u5e74\u8d2d\u4e70\u7684\u57fa\u4e8e\u94ef-137\u7684\u8fdc\u7a0b\u6cbb\u7597\u5355\u5143\u3002[5]IGR\u4e0e\u5723\u6587\u68ee\u7279\u00b7\u5fb7\u00b7\u4fdd\u7f57\u534f\u4f1a(\u5f53\u65f6\u7684\u623f\u4e3b)\u5728\u6cd5\u5ead\u4e0a\u5c31\u5e9f\u5f03\u5730\u70b9\u7684\u547d\u8fd0\u8fdb\u884c\u4e86\u4e89\u8bba\u3002[6]1986\u5e749\u670811\u65e5\uff0c\u6208\u4e9a\u65af\u6cd5\u9662\u58f0\u660e\uff0c\u5b83\u77e5\u9053\u5927\u697c\u91cc\u88ab\u9057\u5f03\u7684\u653e\u5c04\u6027\u7269\u8d28\u3002[6]\u3002\n\u5728\u5931\u7a83\u53d1\u751f\u7684\u56db\u4e2a\u6708\u524d\uff0c\u4e5f\u5c31\u662f1987\u5e745\u67084\u65e5\uff0c\u65f6\u4efbIpasgo\u516c\u52a1\u5458\u4fdd\u9669\u7814\u7a76\u6240\u6240\u957f\u7684Saura Taniguti\u52a8\u7528\u8b66\u529b\u963b\u6b62IGR\u7684\u6240\u6709\u8005\u5361\u6d1b\u65af\u00b7\u83f2\u683c\u96f7\u591a\u00b7\u8d1d\u6cfd\u91cc\u5c14(Carlos Figueido Bezerril)\u79fb\u8d70\u9057\u7559\u4e0b\u6765\u7684\u7269\u54c1\u3002[6]\u83f2\u683c\u96f7\u591a\u968f\u540e\u8b66\u544a\u4f0a\u5e15\u65af\u6208\u7684\u603b\u88c1\u5229\u897f\u5965\u00b7\u7279\u8c22\u62c9\u00b7\u535a\u5c14\u8d6b\u65af\uff0c\u4ed6\u5e94\u8be5\u4e3a\u94ef\u70b8\u5f39\u4f1a\u53d1\u751f\u7684\u4e8b\u60c5\u627f\u62c5\u8d23\u4efb\u3002[6]\u3002\n\u6cd5\u9662\u6d3e\u4e86\u4e00\u540d\u4fdd\u5b89\u6765\u4fdd\u62a4\u8fd9\u4e9b\u5371\u9669\u7684\u88ab\u9057\u5f03\u7684\u8bbe\u5907\u3002[7]\u4e0e\u6b64\u540c\u65f6\uff0cIGR\u7684\u6240\u6709\u8005\u7ed9\u56fd\u5bb6\u6838\u80fd\u59d4\u5458\u4f1a(CNEN)\u5199\u4e86\u51e0\u5c01\u4fe1\uff0c\u8b66\u544a\u4ed6\u4eec\u5728\u5e9f\u5f03\u7684\u5730\u70b9\u4fdd\u7559\u8fdc\u7a0b\u6cbb\u7597\u88c5\u7f6e\u7684\u5371\u9669\uff0c\u4f46\u4e00\u65e6\u6cd5\u9662\u547d\u4ee4\u963b\u6b62\u4ed6\u4eec\u8fd9\u6837\u505a\uff0c\u4ed6\u4eec\u5c31\u4e0d\u80fd\u81ea\u5df1\u79fb\u8d70\u8bbe\u5907\u3002[6][7]\n1987\u5e749\u670813\u65e5\uff0c\u7f57\u4f2f\u6258\u00b7\u591a\u65af\u6851\u6258\u65af\u00b7\u963f\u5c14\u7ef4\u65af(Roberto Dos Santos Alves)\u548c\u74e6\u683c\u7eb3\u00b7\u83ab\u5854\u00b7\u4f69\u96f7\u62c9(Wagner Mota Pereira)\u5229\u7528\u8b66\u536b\u4e0d\u5728\u7684\u673a\u4f1a\uff0c\u975e\u6cd5\u8fdb\u5165\u4e86\u90e8\u5206\u88ab\u6467\u6bc1\u7684\u8bbe\u65bd\u3002\u4ed6\u4eec\u90e8\u5206\u62c6\u5378\u4e86\u8fdc\u7a0b\u6cbb\u7597\u5355\u5143\uff0c\u5e76\u5c06\u6e90\u7ec4\u4ef6-\u4ed6\u4eec\u8ba4\u4e3a\u53ef\u80fd\u6709\u4e00\u4e9b\u5e9f\u54c1\u4ef7\u503c-\u653e\u5728\u4e00\u8f86\u624b\u63a8\u8f66\u91cc\uff0c\u5e26\u5230\u963f\u5c14\u7ef4\u65af\u7684\u5bb6\u91cc\u3002[1]\u5728\u90a3\u91cc\uff0c\u4ed6\u4eec\u5f00\u59cb\u62c6\u5378\u8bbe\u5907\u3002\u540c\u4e00\u5929\u665a\u4e0a\uff0c\u4ed6\u4eec\u90fd\u56e0\u8f90\u5c04\u75c5\u5f00\u59cb\u5455\u5410\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4ed6\u4eec\u4ecd\u5728\u7ee7\u7eed\u52aa\u529b\u3002\u7b2c\u4e8c\u5929\uff0c\u4f69\u96f7\u62c9\u5f00\u59cb\u8179\u6cfb\u548c\u5934\u6655\uff0c\u4ed6\u7684\u5de6\u624b\u5f00\u59cb\u80bf\u80c0\u3002\u4ed6\u5f88\u5feb\u5c31\u5728\u8fd9\u53ea\u624b\u4e0a\u5f62\u6210\u4e86\u4e00\u4e2a\u4e0e\u5b54\u53e3\u4e00\u6837\u5927\u5c0f\u548c\u5f62\u72b6\u7684\u70e7\u4f24--\u4ed6\u6700\u7ec8\u63a5\u53d7\u4e86\u51e0\u4e2a\u624b\u6307\u7684\u90e8\u5206\u622a\u80a2\u3002[8]\u3002\n9\u670815\u65e5\uff0c\u4f69\u96f7\u62c9\u53bb\u4e86\u5f53\u5730\u7684\u4e00\u5bb6\u8bca\u6240\uff0c\u5728\u90a3\u91cc\u4ed6\u7684\u75c7\u72b6\u88ab\u8bca\u65ad\u4e3a\u5403\u4e86\u4ec0\u4e48\u4e1c\u897f\uff0c\u4ed6\u88ab\u544a\u77e5\u56de\u5bb6\u4f11\u606f\u3002[1]\u7136\u800c\uff0c\u963f\u5c14\u7ef4\u65af\u7ee7\u7eed\u52aa\u529b\u62c6\u9664\u8fd9\u4e9b\u8bbe\u5907\u3002\u5728\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u6700\u7ec8\u5c06\u94ef\u80f6\u56ca\u4ece\u5176\u4fdd\u62a4\u6027\u7684\u65cb\u8f6c\u5934\u4e2d\u89e3\u8131\u51fa\u6765\u3002\u4ed6\u957f\u671f\u66b4\u9732\u5728\u653e\u5c04\u6027\u7269\u8d28\u4e2d\uff0c\u5bfc\u81f4\u53f3\u524d\u81c2\u6e83\u75a1\uff0c\u9700\u8981\u622a\u80a2\u3002[9]\u3002\n9\u670816\u65e5\uff0c\u963f\u5c14\u7ef4\u65af\u6210\u529f\u5730\u7528\u87ba\u4e1d\u5200\u523a\u7a7f\u4e86\u592a\u7a7a\u8231\u7684\u5c0f\u5b54\u7a97\u53e3\uff0c\u4f7f\u4ed6\u770b\u5230\u4e00\u9053\u6df1\u84dd\u8272\u7684\u5149\u4ece\u4ed6\u521b\u9020\u7684\u5fae\u5c0f\u5f00\u53e3\u4e2d\u5c04\u51fa\u3002[1]\u4ed6\u63d2\u4e0a\u87ba\u4e1d\u5200\uff0c\u6210\u529f\u5730\u6316\u51fa\u4e86\u4e00\u4e9b\u53d1\u5149\u7684\u7269\u8d28\u3002\u4ed6\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u4e00\u79cd\u706b\u836f\uff0c\u5c31\u8bd5\u7740\u70b9\u71c3\u5b83\uff0c\u4f46\u706b\u836f\u4e0d\u80fd\u70b9\u71c3\u3002\u5728\u64b0\u5199\u539f\u5b50\u80fd\u673a\u6784\u62a5\u544a\u65f6\uff0c\u4ea7\u751f\u8fd9\u79cd\u5149\u7684\u786e\u5207\u673a\u5236\u5c1a\u4e0d\u6e05\u695a\uff0c\u5c3d\u7ba1\u4eba\u4eec\u8ba4\u4e3a\u5b83\u53ef\u80fd\u662f\u4e0e\u5149\u6e90\u5438\u6536\u6c34\u5206\u6709\u5173\u7684\u7535\u79bb\u7a7a\u6c14\u53d1\u5149\u3001\u8367\u5149\u6216\u5207\u4f26\u79d1\u592b\u8f90\u5c04\uff1b1988\u5e74\u5728\u6a61\u6811\u5cad\u56fd\u5bb6\u5b9e\u9a8c\u5ba4\u62c6\u89e3137Cs\u6e90\u65f6\uff0c\u4e5f\u89c2\u5bdf\u5230\u4e86\u7c7b\u4f3c\u7684\u84dd\u5149\u3002[1]\u3002\n9\u670818\u65e5\uff0c\u963f\u5c14\u7ef4\u65af\u5c06\u8fd9\u4e9b\u7269\u54c1\u5356\u7ed9\u4e86\u9644\u8fd1\u7684\u4e00\u4e2a\u5e9f\u54c1\u573a\u3002\u90a3\u5929\u665a\u4e0a\uff0c\u5fb7\u74e6\u5c14\u00b7\u963f\u5c14\u7ef4\u65af\u00b7\u8d39\u96f7\u62c9(\u5e9f\u6599\u573a\u7684\u8001\u677f)\u6ce8\u610f\u5230\u4e86\u88ab\u523a\u7a7f\u7684\u592a\u7a7a\u8231\u53d1\u51fa\u7684\u84dd\u8272\u5149\u8292\u3002\u4ed6\u8ba4\u4e3a\u80f6\u56ca\u91cc\u7684\u4e1c\u897f\u5f88\u503c\u94b1\uff0c\u751a\u81f3\u662f\u8d85\u81ea\u7136\u7684\uff0c\u4ed6\u7acb\u5373\u628a\u5b83\u5e26\u8fdb\u4e86\u4ed6\u7684\u623f\u5b50\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e09\u5929\u91cc\uff0c\u4ed6\u9080\u8bf7\u670b\u53cb\u548c\u5bb6\u4eba\u89c2\u770b\u8fd9\u79cd\u5947\u602a\u7684\u53d1\u5149\u7269\u8d28\u3002\n9\u670821\u65e5\uff0c\u5728\u5e9f\u6599\u573a\uff0c\u8d39\u96f7\u62c9\u7684\u4e00\u4f4d\u670b\u53cb(\u5728\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784\u7684\u62a5\u544a\u4e2d\u88ab\u79f0\u4e3aEF1)\u4f7f\u7528\u87ba\u4e1d\u5200\u6210\u529f\u5730\u5c06\u51e0\u4e2a\u5927\u7c73\u5927\u5c0f\u7684\u53d1\u5149\u7269\u8d28\u9897\u7c92\u4ece\u592a\u7a7a\u8231\u4e2d\u91ca\u653e\u51fa\u6765\u3002\u8d39\u96f7\u62c9\u5f00\u59cb\u4e0e\u4e0d\u540c\u7684\u670b\u53cb\u548c\u5bb6\u4eba\u5206\u4eab\u5176\u4e2d\u7684\u4e00\u4e9b\u3002\u540c\u4e00\u5929\uff0c\u4ed6\u7684\u59bb\u5b50\uff0c37\u5c81\u7684\u52a0\u5e03\u91cc\u57c3\u62c9\u00b7\u739b\u4e3d\u4e9a\u00b7\u8d39\u96f7\u62c9(Gabriela Maria Ferreira)\u5f00\u59cb\u751f\u75c5\u30021987\u5e749\u670825\u65e5\uff0c\u5fb7\u74e6\u5c14\u00b7\u8d39\u96f7\u62c9(Devair Ferreira)\u5c06\u5e9f\u91d1\u5c5e\u5356\u7ed9\u4e86\u7b2c\u4e8c\u4e2a\u5e9f\u6599\u573a\u3002\n\u5728\u51fa\u552e\u5230\u7b2c\u4e8c\u4e2a\u5e9f\u6599\u573a\u7684\u524d\u4e00\u5929\uff0c\u4e5f\u5c31\u662f9\u670824\u65e5\uff0c\u5fb7\u74e6\u5c14\u7684\u5144\u5f1f\u4f0a\u6c83\u6210\u529f\u5730\u4ece\u6e90\u5934\u522e\u6389\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u7070\u5c18\uff0c\u5e76\u628a\u7070\u5c18\u5e26\u5230\u4e86\u4e0d\u8fdc\u7684\u4ed6\u5bb6\u3002\u5728\u90a3\u91cc\uff0c\u4ed6\u5728\u6df7\u51dd\u571f\u5730\u677f\u4e0a\u94fa\u4e86\u4e00\u4e9b\u3002\u4ed66\u5c81\u7684\u5973\u513f\u83b1\u5fb7\u00b7\u8fbe\u65af\u5185\u7ef4\u65af\u00b7\u8d39\u96f7\u62c9(Leide Das Neves Ferreira)\u540e\u6765\u5750\u5728\u8fd9\u5c42\u697c\u91cc\u5403\u4e86\u4e00\u4e2a\u4e09\u660e\u6cbb\u3002\u5979\u4e5f\u88ab\u7c89\u672b\u7684\u84dd\u8272\u5149\u8292\u8ff7\u4f4f\u4e86\uff0c\u628a\u5b83\u6d82\u5728\u81ea\u5df1\u7684\u8eab\u4f53\u4e0a\uff0c\u5e76\u5411\u5979\u7684\u6bcd\u4eb2\u70ab\u8000\u3002\u7c89\u672b\u4e2d\u7684\u7070\u5c18\u843d\u5728\u5979\u6b63\u5728\u98df\u7528\u7684\u4e09\u660e\u6cbb\u4e0a\uff1b\u5979\u6700\u7ec8\u5438\u6536\u4e861.0Gbq\uff0c\u5e76\u63a5\u53d7\u4e866.0Gy\u7684\u603b\u5242\u91cf\uff0c\u5373\u4f7f\u7ecf\u8fc7\u6cbb\u7597\uff0c\u4e5f\u8d85\u8fc7\u4e86\u81f4\u547d\u7684\u5242\u91cf\u3002[10]\u3002\n\u52a0\u5e03\u91cc\u57c3\u62c9\u00b7\u739b\u4e3d\u4e9a\u00b7\u8d39\u96f7\u62c9(Gabriela Maria Ferreira)\u662f\u7b2c\u4e00\u4e2a\u6ce8\u610f\u5230\u5979\u5468\u56f4\u7684\u8bb8\u591a\u4eba\u540c\u65f6\u60a3\u4e0a\u4e86\u91cd\u75c5\u7684\u4eba\u3002[11]1987\u5e749\u670828\u65e5\uff0c\u4e5f\u5c31\u662f\u53d1\u73b0\u7269\u54c1\u768415\u5929\u540e\uff0c\u5979\u4ece\u5bf9\u624b\u7684\u5e9f\u6599\u573a\u56de\u6536\u4e86\u8fd9\u4e9b\u6750\u6599\uff0c\u5e76\u5c06\u5b83\u4eec\u8fd0\u5230\u4e86\u4e00\u5bb6\u533b\u9662\u3002\u7531\u4e8e\u6c61\u67d3\u6e90\u7684\u6b8b\u9ab8\u4fdd\u5b58\u5728\u5851\u6599\u888b\u4e2d\uff0c\u533b\u9662\u7684\u6c61\u67d3\u6c34\u5e73\u5f88\u4f4e\u3002\n9\u670829\u65e5\u4e0a\u5348\uff0c\u4e00\u4f4d\u6765\u8bbf\u7684\u533b\u5b66\u7269\u7406\u5b66\u5bb6[12]\u4f7f\u7528\u95ea\u70c1\u8ba1\u6570\u5668\u786e\u8ba4\u4e86\u653e\u5c04\u6027\u7269\u8d28\u7684\u5b58\u5728\uff0c\u5e76\u8bf4\u670d\u5f53\u5c40\u7acb\u5373\u91c7\u53d6\u884c\u52a8\u3002\u5230\u5f53\u5929\u7ed3\u675f\u65f6\uff0c\u5e02\u3001\u5dde\u548c\u56fd\u5bb6\u653f\u5e9c\u90fd\u610f\u8bc6\u5230\u4e86\u8fd9\u4e00\u4e8b\u4ef6\u3002\n\u8f90\u5c04\u4e8b\u4ef6\u7684\u6d88\u606f\u5728\u5f53\u5730\u3001\u56fd\u5bb6\u548c\u56fd\u9645\u5a92\u4f53\u4e0a\u8fdb\u884c\u4e86\u5e7f\u64ad\u3002\u51e0\u5929\u5185\uff0c\u8fd113\u4e07\u4eba\u6d8c\u5165\u5f53\u5730\u533b\u9662\uff0c\u62c5\u5fc3\u4ed6\u4eec\u53ef\u80fd\u5df2\u7ecf\u63a5\u89e6\u5230\u75c5\u6bd2\u3002[2]\u5728\u8fd9\u4e9b\u4eba\u4e2d\uff0c\u786e\u5b9e\u6709250\u4eba\u901a\u8fc7\u4f7f\u7528\u76d6\u9769\u8ba1\u6570\u5668\u88ab\u53d1\u73b0\u53d7\u5230\u6c61\u67d3-\u5176\u4e2d\u4e00\u4e9b\u4eba\u7684\u76ae\u80a4\u4e0a\u4ecd\u6709\u653e\u5c04\u6027\u6b8b\u7559\u7269\u3002[2]\u6700\u7ec8\uff0c\u670920\u4eba\u51fa\u73b0\u4e86\u653e\u5c04\u75c5\u7684\u8ff9\u8c61\uff0c\u9700\u8981\u6cbb\u7597\u3002[2]\u3002\nAdmilson Alves de Souza\uff0c18\u5c81(5.3 Gy)\uff0c\u662fDevair Ferreira\u7684\u4e00\u540d\u5458\u5de5\uff0c\u8d1f\u8d23\u653e\u5c04\u6e90\u7684\u5de5\u4f5c\u3002\u4ed6\u51fa\u73b0\u4e86\u80ba\u635f\u4f24\u3001\u5185\u51fa\u8840\u548c\u5fc3\u810f\u635f\u4f24\uff0c\u5e76\u4e8e1987\u5e7410\u670818\u65e5\u53bb\u4e16\u3002\n\u83b1\u5fb7\u00b7\u8fbe\u65af\u00b7\u5185\u7ef4\u65af\u00b7\u8d39\u96f7\u62c9(Leide Das Neves Ferreira)\uff0c6\u5c81(6.0Gy)\uff0c\u662f\u4f0a\u6c83\u00b7\u8d39\u96f7\u62c9\u7684\u5973\u513f\u3002\u5f53\u4e00\u4e2a\u56fd\u9645\u5c0f\u7ec4\u8d76\u5230\u6cbb\u7597\u5979\u65f6\uff0c\u5979\u88ab\u53d1\u73b0\u88ab\u9650\u5236\u5728\u533b\u9662\u7684\u4e00\u4e2a\u5b64\u7acb\u7684\u623f\u95f4\u91cc\uff0c\u56e0\u4e3a\u5de5\u4f5c\u4eba\u5458\u4e0d\u6562\u9760\u8fd1\u5979\u3002\u5979\u9010\u6e10\u7ecf\u5386\u4e86\u4e0a\u534a\u8eab\u80bf\u80c0\uff0c\u8131\u53d1\uff0c\u80be\u548c\u80ba\u635f\u4f24\uff0c\u4ee5\u53ca\u5185\u51fa\u8840\u3002\u5979\u4e8e1987\u5e7410\u670823\u65e5\u6b7b\u4e8e\u91cc\u7ea6\u70ed\u5185\u5362\u7684Marcilio Dias\u6d77\u519b\u533b\u9662\uff0c\u6b7b\u4e8e\u8d25\u8840\u75c7\u548c\u5168\u8eab\u6027\u611f\u67d3\u3002[13]\u5979\u88ab\u57cb\u846c\u5728\u6208\u4f0a\u5c3c\u4e9a\u7684\u4e00\u4e2a\u666e\u901a\u516c\u5893\u91cc\uff0c\u5b89\u846c\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u73bb\u7483\u7ea4\u7ef4\u68fa\u6750\u91cc\uff0c\u68fa\u6750\u91cc\u886c\u7740\u94c5\uff0c\u4ee5\u9632\u6b62\u8f90\u5c04\u6269\u6563\u3002\u5c3d\u7ba1\u91c7\u53d6\u4e86\u8fd9\u4e9b\u63aa\u65bd\uff0c\u4f46\u5728\u5979\u4e0b\u846c\u5f53\u5929\uff0c\u5979\u5373\u5c06\u4e0b\u846c\u7684\u6d88\u606f\u5728\u5893\u5730\u5f15\u53d1\u4e862000\u591a\u4eba\u7684\u9a9a\u4e71\uff0c\u4ed6\u4eec\u90fd\u62c5\u5fc3\u5979\u7684\u8eab\u4f53\u4f1a\u6bd2\u5bb3\u5468\u56f4\u7684\u571f\u5730\u3002\u66b4\u5f92\u8bd5\u56fe\u7528\u77f3\u5934\u548c\u7816\u5757\u5c01\u9501\u5893\u5730\u7684\u9053\u8def\uff0c\u4ee5\u963b\u6b62\u5979\u7684\u57cb\u846c\u3002[14]\u5c3d\u7ba1\u6709\u8fd9\u79cd\u5e72\u6270\uff0c\u5979\u8fd8\u662f\u88ab\u57cb\u846c\u4e86\u3002\n\u52a0\u5e03\u91cc\u57c3\u62c9\u00b7\u739b\u4e3d\u4e9a\u00b7\u8d39\u96f7\u62c9(Gabriela Maria Ferreira)\uff0c37\u5c81(5.7Gy)\uff0c\u5e9f\u6599\u573a\u8001\u677f\u5fb7\u74e6\u5c14\u00b7\u8d39\u96f7\u62c9\u7684\u59bb\u5b50\uff0c\u5728\u63a5\u89e6\u8fd9\u79cd\u7269\u8d28\u5927\u7ea6\u4e09\u5929\u540e\u751f\u75c5\u3002\u5979\u7684\u75c5\u60c5\u6076\u5316\uff0c\u51fa\u73b0\u8131\u53d1\u548c\u5185\u51fa\u8840\uff0c\u7279\u522b\u662f\u56db\u80a2\u3001\u773c\u775b\u548c\u6d88\u5316\u9053\u3002\u5979\u7ecf\u5386\u4e86\u7cbe\u795e\u9519\u4e71\u3001\u8179\u6cfb\u548c\u6025\u6027\u80be\u529f\u80fd\u4e0d\u5168\uff0c1987\u5e7410\u670823\u65e5\uff0c\u4e5f\u5c31\u662f\u5979\u7684\u4f84\u5973\u5728\u66b4\u9732\u5927\u7ea6\u4e00\u4e2a\u6708\u540e\u6b7b\u4e8e\u8d25\u8840\u75c7\u548c\u5168\u8eab\u611f\u67d3\u7684\u540c\u4e00\u5929\u3002\n\u4ee5\u8272\u5217Baptista dos Santos\uff0c22\u5c81(4.5Gy)\uff0c\u4e5f\u662fDevair Ferreira\u7684\u4e00\u540d\u5458\u5de5\uff0c\u4ed6\u5728\u653e\u5c04\u6e90\u4e0a\u5de5\u4f5c\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u63d0\u53d6\u94c5\u3002\u4ed6\u51fa\u73b0\u4e86\u4e25\u91cd\u7684\u547c\u5438\u9053\u548c\u6dcb\u5df4\u5e76\u53d1\u75c7\uff0c\u6700\u7ec8\u5165\u9662\u6cbb\u7597\uff0c6\u5929\u540e\u4e8e1987\u5e7410\u670827\u65e5\u53bb\u4e16\u3002\n\u5c3d\u7ba1\u63a5\u53d7\u4e86700Gy\u7684\u8f90\u5c04\uff0c\u5fb7\u74e6\u5c14\u00b7\u8d39\u96f7\u62c9\u672c\u4eba\u8fd8\u662f\u6d3b\u4e86\u4e0b\u6765\u3002\u4ed6\u4e8e1994\u5e74\u6b7b\u4e8e\u809d\u786c\u5316\uff0c\u6291\u90c1\u75c7\u548c\u9157\u9152\u52a0\u5267\u4e86\u4ed6\u7684\u75c5\u60c5\u3002[16]2003\u5e74\uff0c\u4f0a\u6c83\u00b7\u8d39\u96f7\u62c9\u6b7b\u4e8e\u80ba\u6c14\u80bf\uff0c\u6b64\u524d\u4ed6\u4e5f\u60a3\u6709\u6291\u90c1\u75c7\u3002[17]\u3002\n\u4e0b\u9762\u7684\u6761\u5f62\u56fe\u663e\u793a\u4e8646\u540d\u53d7\u6c61\u67d3\u6700\u4e25\u91cd\u7684\u4eba\u7684\u7ed3\u679c\u3002\u6709\u51e0\u4e2a\u4eba\u5728\u9ad8\u5242\u91cf\u8f90\u5c04\u4e2d\u5e78\u5b58\u4e0b\u6765\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u88ab\u8ba4\u4e3a\u662f\u56e0\u4e3a\u5242\u91cf\u662f\u5206\u7ea7\u7684\u3002[1]\u5047\u4ee5\u65f6\u65e5\uff0c\u8eab\u4f53\u7684\u4fee\u590d\u673a\u5236\u5c06\u9006\u8f6c\u8f90\u5c04\u9020\u6210\u7684\u7ec6\u80de\u635f\u4f24\u3002\u5982\u679c\u5242\u91cf\u5206\u6563\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u8fd9\u4e9b\u673a\u5236\u53ef\u4ee5\u51cf\u8f7b\u8f90\u5c04\u4e2d\u6bd2\u7684\u5f71\u54cd\u3002\n\u4e4b\u540e\uff0c\u7ea6\u670911.2\u4e07\u4eba\u63a5\u53d7\u4e86\u653e\u5c04\u6027\u6c61\u67d3\u68c0\u67e5\uff1b249\u4eba\u88ab\u53d1\u73b0\u4f53\u5185\u6216\u8eab\u4e0a\u6709\u5927\u91cf\u653e\u5c04\u6027\u7269\u8d28\u3002[1]\u5728\u8fd9\u4e00\u7fa4\u4f53\u4e2d\uff0c129\u4eba\u6709\u5185\u90e8\u6c61\u67d3\u3002\u5927\u591a\u6570\u53d7\u5185\u90e8\u6c61\u67d3\u7684\u4eba\u53ea\u906d\u53d7\u5c0f\u5242\u91cf(&lt\uff1b50mSv\uff0c\u4e0d\u5230400%\u7684\u764c\u75c7\u98ce\u9669)\u30021000\u4eba\u88ab\u786e\u8ba4\u906d\u53d7\u4e86\u8d85\u8fc7\u4e00\u5e74\u7684\u80cc\u666f\u8f90\u5c04\u5242\u91cf\uff1b\u636e\u8ba4\u4e3a\uff0c\u8fd9\u4e9b\u4eba\u4e2d\u670997%\u7684\u4eba\u7684\u5242\u91cf\u572810\u5230200mSv\u4e4b\u95f4(\u7ed3\u679c\u662f\u6bcf2000\u4eba\u4e2d\u5c31\u67091\u4eba\u60a3\u764c\u75c7\u7684\u98ce\u9669\u5230100\u4eba\u4e2d\u5c31\u67091\u4eba\u60a3\u764c\u75c7)\u3002\n2007\u5e74\uff0c\u5965\u65af\u74e6\u5c14\u591a\u00b7\u514b\u9c81\u5179\u57fa\u91d1\u4f1a(Oswaldo Cruz Foundation)\u786e\u5b9a\uff0c\u6208\u4f0a\u5b89\u5c3c\u4e9a\u4e8b\u6545\u5e78\u5b58\u8005\u7684\u94ef-137\u76f8\u5173\u75be\u75c5\u7684\u53d1\u75c5\u7387\u4e0e\u666e\u901a\u4eba\u7fa4\u76f8\u540c\u3002\u7136\u800c\uff0c\u8865\u507f\u4ecd\u7136\u53d1\u653e\u7ed9\u5e78\u5b58\u8005\uff0c\u4ed6\u4eec\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u906d\u53d7\u4e0e\u8f90\u5c04\u6709\u5173\u7684\u504f\u89c1\u3002[18]\u3002\n\u9274\u4e8e\u9020\u6210\u7684\u6b7b\u4ea1\uff0c\u62e5\u6709\u548c\u64cd\u4f5cIGR\u7684\u4e09\u540d\u533b\u751f\u88ab\u6307\u63a7\u72af\u6709\u5211\u4e8b\u758f\u5ffd\u7f6a\u3002\u7531\u4e8e\u4e8b\u6545\u53d1\u751f\u57281988\u5e74\u8054\u90a6\u5baa\u6cd5\u9881\u5e03\u4e4b\u524d\uff0c\u800c\u4e14\u8be5\u7269\u8d28\u662f\u7531\u8bca\u6240\u83b7\u5f97\u7684\uff0c\u800c\u4e0d\u662f\u7531\u4e2a\u4eba\u6240\u6709\u8005\u83b7\u5f97\u7684\uff0c\u6cd5\u9662\u4e0d\u80fd\u5ba3\u5e03IGR\u7684\u6240\u6709\u8005\u627f\u62c5\u8d23\u4efb\u3002\u62e5\u6709IGR\u7684\u4e00\u540d\u533b\u751f\u548c\u8bca\u6240\u7684\u7269\u7406\u5b66\u5bb6\u88ab\u52d2\u4ee4\u4e3a\u5927\u697c\u7684\u5e9f\u5f03\u72b6\u51b5\u652f\u4ed810\u4e07\u96f7\u4e9a\u5c14\u3002\u8fd9\u4e24\u540d\u5c0f\u5077\u6ca1\u6709\u88ab\u5217\u4e3a\u8fd9\u8d77\u516c\u5f00\u6c11\u4e8b\u8bc9\u8bbc\u7684\u88ab\u544a\u3002\n2000\u5e74\uff0c\u6208\u4e9a\u65af\u7b2c8\u8054\u90a6\u6cd5\u9662\u547d\u4ee4CNEN\u652f\u4ed8130\u4e07\u96f7\u4e9a\u5c14(\u8fd175\u4e07\u7f8e\u5143)\u7684\u8d54\u507f\uff0c\u5e76\u4fdd\u8bc1\u4e3a\u4e8b\u6545\u7684\u76f4\u63a5\u548c\u95f4\u63a5\u53d7\u5bb3\u8005\u53ca\u5176\u540e\u4ee3\u63d0\u4f9b\u533b\u7597\u548c\u5fc3\u7406\u6cbb\u7597\uff0c\u76f4\u81f3\u7b2c\u4e09\u4ee3\u3002[19]\u3002\n\u8868\u5c42\u571f\u58e4\u4e0d\u5f97\u4e0d\u4ece\u51e0\u4e2a\u5730\u70b9\u79fb\u8d70\uff0c\u51e0\u5ea7\u623f\u5c4b\u88ab\u62c6\u9664\u3002\u8fd9\u4e9b\u623f\u5b50\u91cc\u7684\u6240\u6709\u7269\u54c1\u90fd\u88ab\u79fb\u8d70\u5e76\u8fdb\u884c\u4e86\u68c0\u67e5\u3002\u90a3\u4e9b\u88ab\u53d1\u73b0\u6ca1\u6709\u653e\u5c04\u6027\u7684\u4e1c\u897f\u88ab\u5305\u88f9\u5728\u5851\u6599\u888b\u91cc\uff0c\u800c\u90a3\u4e9b\u88ab\u6c61\u67d3\u7684\u4e1c\u897f\u8981\u4e48\u88ab\u51c0\u5316\uff0c\u8981\u4e48\u4f5c\u4e3a\u5e9f\u7269\u5904\u7406\u3002\u5728\u5de5\u4e1a\u4e2d\uff0c\u5728\u53bb\u6c61\u6216\u5904\u7f6e\u7269\u4f53\u4e4b\u95f4\u7684\u9009\u62e9\u4ec5\u57fa\u4e8e\u7269\u4f53\u7684\u7ecf\u6d4e\u4ef7\u503c\u548c\u53bb\u6c61\u7684\u96be\u6613\u7a0b\u5ea6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784\u8ba4\u8bc6\u5230\uff0c\u4e3a\u4e86\u51cf\u5c11\u4e8b\u4ef6\u7684\u5fc3\u7406\u5f71\u54cd\uff0c\u5e94\u8be5\u91c7\u53d6\u66f4\u5927\u7684\u52aa\u529b\u6765\u6e05\u7406\u4e2a\u4eba\u4ef7\u503c\u7684\u7269\u54c1\uff0c\u5982\u73e0\u5b9d\u548c\u7167\u7247\u3002\u4ece\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784\u7684\u62a5\u544a\u4e2d\u8fd8\u4e0d\u6e05\u695a\u8fd9\u662f\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\n\u623f\u5c4b\u6e05\u7a7a\u540e\uff0c\u4f7f\u7528\u771f\u7a7a\u5438\u5c18\u5668\u6e05\u9664\u7070\u5c18\uff0c\u5e76\u68c0\u67e5\u7ba1\u9053\u662f\u5426\u6709\u653e\u5c04\u6027\u3002\u6cb9\u6f06\u8868\u9762\u53ef\u4ee5\u522e\u6389\uff0c\u800c\u5730\u677f\u5219\u7528\u9178\u6027\u548c\u666e\u9c81\u58eb\u84dd\u7684\u6df7\u5408\u7269\u8fdb\u884c\u5904\u7406\u3002\u5c4b\u9876\u7528\u5438\u5c18\u5668\u5438\u5c18\u5e76\u7528\u8f6f\u7ba1\u51b2\u6d17\uff0c\u4f46\u6709\u4e24\u5ea7\u623f\u5b50\u7684\u5c4b\u9876\u4e0d\u5f97\u4e0d\u62c6\u6389\u3002\u6e05\u7406\u5de5\u4f5c\u4ea7\u751f\u7684\u5783\u573e\u88ab\u642c\u51fa\u4e86\u57ce\u5e02\uff0c\u5b58\u653e\u5728\u4e00\u4e2a\u504f\u8fdc\u7684\u5730\u65b9\u3002\n\u6eb6\u89e3\u5728\u76d0\u9178\u4e2d\u7684\u94be\u77fe\u88ab\u7528\u5728\u7c98\u571f\u3001\u6df7\u51dd\u571f\u3001\u571f\u58e4\u548c\u5c4b\u9876\u4e0a\u3002\u94ef\u5bf9\u8bb8\u591a\u7c98\u571f\u6709\u5f88\u9ad8\u7684\u4eb2\u548c\u529b\u3002\u6709\u673a\u6eb6\u5242\uff0c\u7136\u540e\u662f\u6eb6\u89e3\u5728\u76d0\u9178\u4e2d\u7684\u94be\u660e\u77fe\uff0c\u7528\u6765\u5904\u7406\u4e0a\u4e86\u8721/\u4e0a\u4e86\u6cb9\u7684\u5730\u677f\u548c\u684c\u5b50\u3002\u6c22\u6c27\u5316\u94a0\u6eb6\u6db2\uff0c\u968f\u540e\u8fd8\u6709\u6eb6\u89e3\u7684\u94be\u77fe\uff0c\u88ab\u7528\u6765\u5904\u7406\u5408\u6210\u5730\u677f\u3001\u673a\u5668\u548c\u6253\u5b57\u673a\u3002\n\u666e\u9c81\u58eb\u84dd\u88ab\u7528\u6765\u5bf9\u8bb8\u591a\u4eba\u8fdb\u884c\u5185\u90e8\u51c0\u5316\uff0c\u5c3d\u7ba1\u5f53\u5b83\u88ab\u5e94\u7528\u65f6\uff0c\u8bb8\u591a\u653e\u5c04\u6027\u7269\u8d28\u5df2\u7ecf\u4ece\u8840\u6db2\u8fc1\u79fb\u5230\u808c\u8089\u7ec4\u7ec7\uff0c\u6781\u5927\u5730\u963b\u788d\u4e86\u5b83\u7684\u6709\u6548\u6027\u3002\u53d7\u5bb3\u8005\u7684\u5c3f\u6db2\u7528\u79bb\u5b50\u4ea4\u6362\u6811\u8102\u5904\u7406\uff0c\u5c06\u5e9f\u7269\u538b\u5b9e\uff0c\u4fbf\u4e8e\u50a8\u5b58\u3002\n\u8fd9\u6b21\u6d3b\u52a8\u7684\u6e05\u7406\u5de5\u4f5c\u6bd4\u539f\u6765\u8981\u56f0\u96be\u5f97\u591a\uff0c\u56e0\u4e3a\u6c61\u67d3\u6e90\u662f\u5f00\u653e\u7684\uff0c\u800c\u4e14\u6d3b\u6027\u7269\u8d28\u662f\u6c34\u6eb6\u6027\u7684\u3002\u5bc6\u5c01\u6e90\u53ea\u9700\u8981\u88ab\u6361\u8d77\u6765\uff0c\u653e\u5728\u94c5\u5bb9\u5668\u91cc\uff0c\u7136\u540e\u8fd0\u8f93\u5230\u653e\u5c04\u6027\u5e9f\u7269\u4ed3\u5e93\u3002\u5728\u627e\u56de\u4e22\u5931\u7684\u6e90\u5934\u65f6\uff0c\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784\u5efa\u8bae\u4ed4\u7ec6\u89c4\u5212\u5e76\u4f7f\u7528\u8d77\u91cd\u673a\u6216\u5176\u4ed6\u88c5\u7f6e\u5728\u6e90\u5934\u9644\u8fd1\u653e\u7f6e\u5c4f\u853d(\u5982\u7816\u5757\u6258\u76d8\u6216\u6df7\u51dd\u571f\u5757)\uff0c\u4ee5\u4fdd\u62a4\u627e\u56de\u5de5\u4f5c\u4eba\u5458\u3002\n\u6208\u4e9a\u5c3c\u4e9a\u4e8b\u6545\u5c06\u4e25\u91cd\u7684\u653e\u5c04\u6027\u6c61\u67d3\u6269\u6563\u5230\u6574\u4e2a\u673a\u573a\u3001\u4e2d\u592e\u548c\u8d39\u7f57\u7ef4\u4e9a\u91cc\u5965\u65af\u5730\u533a\u3002\u5373\u4f7f\u5728\u6e05\u7406\u4e4b\u540e\uff0c700\u4e07\u6876\u7684\u653e\u5c04\u6027\u4ecd\u7136\u4e0b\u843d\u4e0d\u660e\u3002\n\u6208\u4e9a\u8bfa\u8f90\u5c04Terapia\u7814\u7a76\u6240(16\u00b040\u201829\u201cS 49\u00b015\u201951\u201dW\ufeff/\ufeff16.6746\u00b0S 49.2641\u00b0W\ufeff/-16.6746\uff1b-49.2641\ufeff(Goiano de Raditerapia\u7814\u7a76\u6240))[1]\u6ca1\u6709\u5b9e\u9645\u66b4\u9732\u6216\u7834\u574f\u653e\u5c04\u6027\u5185\u5bb9\uff0c\u4f46\u4f5c\u4e3a\u81f4\u547d\u7684\u3001\u4e0d\u5b89\u5168\u6750\u6599\u7684\u6765\u6e90\u503c\u5f97\u6ce8\u610f\u3002IGR\u5c06\u8bca\u6240\u642c\u5230\u4e86\u8be5\u5e02\u7684\u53e6\u4e00\u4e2a\u5730\u70b9[20]\uff0c\u539f\u6765\u7684\u5730\u70b9\u57282000\u5e74\u5de6\u53f3\u88ab\u73b0\u4ee3\u5316\u7684Goi\u00e2nia\u4f1a\u8bae\u4e2d\u5fc3(Goi\u00e2nia\u4f1a\u8bae\u4e2d\u5fc3)\u53d6\u4ee3\u3002\nRua 57\u4e0a\u7684\u7f57\u4f2f\u6258\u00b7\u591a\u65af\u6851\u6258\u65af\u623f\u5c4b(16\u00b040\u201807\u201cS 49\u00b015\u201948\u201dW\ufeff/\ufeff16.66848\u00b0S 49.26341\u00b0W\ufeff/-16.66848\uff1b-49.26341\ufeff(\u7f57\u4f2f\u6258\u00b7\u591a\u65af\u6851\u6258\u65af\u623f\u5c4b))[1]\u3002\u653e\u5c04\u6e90\u5728\u8fd9\u91cc\u653e\u7f6e\u4e86\u5927\u7ea6\u516d\u5929\uff0c\u90e8\u5206\u88ab\u7834\u95e8\u800c\u5165\u3002\n\u5fb7\u74e6\u5c14\u00b7\u8d39\u96f7\u62c9(Devair Ferreira)\u7684\u5e9f\u6599\u573a(16\u00b040\u201802\u201cS 49\u00b015\u201959\u201dW\ufeff/\ufeff16.66713\u00b0S 49.26652\u00b0W\ufeff/-16.66713\uff1b-49.26652\ufeff(\u5fb7\u74e6\u5c14\u00b7\u8d39\u96f7\u62c9\u7684\u5e9f\u6599\u573a))\uff0c[1]\u4f4d\u4e8e\u8be5\u5e02\u673a\u573a\u6bb5\u7684Rua15A(#34\uff1b\u5783\u573e\u573a)\uff0c\u62e5\u6709\u8fd9\u4e9b\u7269\u54c17\u5929\u3002\u94ef\u5bb9\u5668\u88ab\u5b8c\u5168\u62c6\u9664\uff0c\u6269\u6563\u4e86\u4e25\u91cd\u7684\u6c61\u67d3\u3002\u8c03\u67e5\u4eba\u5458\u5728\u5e9f\u6599\u573a\u4e2d\u592e\u53d1\u73b0\u4e86\u9ad8\u8fbe1.5Sv\u00b7h\u22121\u7684\u6781\u7aef\u8f90\u5c04\u6c34\u5e73\u3002\n\u4f0a\u6c83\u00b7\u8d39\u96f7\u62c9\u7684\u623f\u5b50(16\u00b039\u201850\u201cS 49\u00b016\u201909\u201dW\ufeff/\ufeff16.66401\u00b0S 49.26911\u00b0W\ufeff/-16.66401\uff1b-49.26911\ufeff(\u4f0a\u6c83\u00b7\u8d39\u96f7\u62c9\u7684\u623f\u5b50/\u5783\u573e\u573aII))[1](&#34\uff1b\u5783\u573e\u573aII&34\uff1b)\uff0c\u5728Rua6\u5c42\u3002\u4e00\u4e9b\u6c61\u67d3\u7269\u6269\u6563\u5230\u623f\u5b50\u5468\u56f4\uff0c\u5bfc\u81f4\u83b1\u5fb7\u00b7\u5185\u7ef4\u65af\u00b7\u8d39\u96f7\u62c9\u548c\u52a0\u5e03\u91cc\u57c3\u62c9\u00b7\u739b\u4e3d\u4e9a\u00b7\u8d39\u96f7\u62c9\u6b7b\u4ea1\u3002\u90bb\u8fd1\u7684\u5e9f\u6599\u573a\u4eceIGR\u8bbe\u65bd\u4e2d\u6e05\u7406\u4e86\u5269\u4f59\u7684\u90e8\u4ef6\u3002\u623f\u5c4b\u53d7\u5230\u4e25\u91cd\u6c61\u67d3\uff0c\u8f90\u5c04\u5242\u91cf\u7387\u9ad8\u8fbe2Sv\u00b7h\u22121\u3002\n\u5e9f\u6599\u573aIII(16\u00b040\u201809\u201cS 49\u00b016\u201948\u201dW\ufeff/\ufeff16.66915\u00b0S 49.28003\u00b0W\ufeff/-16.66915\uff1b-49.28003\ufeff(\u5783\u573e\u573aIII))\u3002[1]\u8fd9\u4e2a\u5e9f\u54c1\u573a\u62e5\u6709\u8fd9\u4e9b\u7269\u54c1\u4e09\u5929\uff0c\u76f4\u5230\u5b83\u4eec\u88ab\u8fd0\u8d70\u3002\nVgil\u00e2ncia Sanit\u00e1ria(16\u00b040\u201830\u201cS 49\u00b016\u201923\u201dW\ufeff/\ufeff16.675\u00b0S 49.273\u00b0W\ufeff/-16.675\uff1b-49.273\ufeff(Vigilancia Sanitaria))\u3002[1]\u5728\u8fd9\u91cc\uff0c\u8be5\u7269\u8d28\u88ab\u9694\u79bb\uff0c\u5e76\u5f00\u59cb\u4e86\u5b98\u65b9\u7684\u6e05\u7406\u54cd\u5e94\u3002\n\u6700\u521d\u7684\u8fdc\u7a0b\u6cbb\u7597\u80f6\u56ca\u4e00\u88ab\u53d1\u73b0\u5c31\u88ab\u5df4\u897f\u519b\u65b9\u67e5\u83b7\uff0c\u4ece\u90a3\u65f6\u8d77\uff0c\u8fd9\u4e2a\u7a7a\u7684\u80f6\u56ca\u5c31\u4e00\u76f4\u5728\u91cc\u7ea6\u70ed\u5185\u5362\u7684Escola de Instru\u00e7\u00e3o ESpecializada(\u4e13\u95e8\u6307\u5bfc\u5b66\u6821)\u5c55\u51fa\uff0c\u4ee5\u7eaa\u5ff5\u90a3\u4e9b\u53c2\u4e0e\u6e05\u7406\u53d7\u6c61\u67d3\u5730\u533a\u7684\u4eba\u3002\n1991\u5e74\uff0c\u4e00\u7ec4\u7814\u7a76\u4eba\u5458\u6536\u96c6\u4e86\u8fd9\u8d77\u4e8b\u4ef6\u9ad8\u5ea6\u66b4\u9732\u7684\u5e78\u5b58\u8005\u7684\u8840\u6db2\u6837\u672c\u3002\u968f\u540e\u7684\u5206\u6790\u5bfc\u81f4\u53d1\u8868\u4e86\u5927\u91cf\u7684\u79d1\u5b66\u6587\u7ae0\u3002[22][23][24][25]\u3002\n1990\u5e74\u7684\u7535\u5f71C\u00e9sio 137-O Pesadelo de Goi\u00e2nia(#34\uff1b\u94ef-137-\u6208\u4f0a\u4e9a\u5c3c\u4e9a\u7684\u5669\u68a6)\uff0c\u662f\u5bf9\u8fd9\u4e00\u4e8b\u4ef6\u7684\u620f\u5267\u5316\uff0c\u7531Roberto Pires\u5236\u4f5c\u3002[26]\u5b83\u57281990\u5e74\u7684\u5df4\u897f\u5229\u4e9a\u827a\u672f\u8282\u4e0a\u83b7\u5f97\u4e86\u51e0\u4e2a\u5956\u9879\u3002[27][27]\u3002\n1994\u5e74\u64ad\u51fa\u7684\u201c\u661f\u9645\u8ff7\u822a\uff1a\u4e0b\u4e00\u4ee3\u201d(Star Trek\uff1aThe Next Generation)\u4e00\u96c6\u201c\u4f60\u81ea\u5df1\u201d(You Own Self)\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53d7\u5230\u4e86\u6208\u4f0a\u4e9a\u5c3c\u4e9a\u4e8b\u6545\u7684\u542f\u53d1\u3002[28][\u9700\u8981\u66f4\u597d\u7684\u8d44\u6e90]\u3002\n1992\u5e74\u7684\u4e00\u96c6\u201c\u661f\u7403\u8239\u957f\u4e0e\u661f\u7403\u4eba\u201d\u5728\u201c\u81f4\u547d\u7684\u5149\u8292\u201d\u4e2d\u63cf\u8ff0\u4e86\u8fd9\u4e00\u4e8b\u4ef6\u7684\u4e00\u4e2a\u677e\u6563\u7248\u672c\uff0c\u5c3d\u7ba1\u6240\u6709\u53c2\u4e0e\u8005\u90fd\u6709\u4e86\u4e00\u4e2a\u66f4\u5e78\u798f\u7684\u7ed3\u5c40\uff0c\u5e76\u5c06\u5c0f\u9547\u7684\u6c61\u67d3\u5f52\u548e\u4e8e\u4e00\u4e2a\u751f\u6001\u6076\u68cd\u3002\u201c\u661f\u7403\u8239\u957f\u4e0e\u661f\u7403\u4eba\u201d\u57281992\u5e74\u7684\u4e00\u96c6\u4e2d\u5bf9\u8fd9\u4e00\u4e8b\u4ef6\u8fdb\u884c\u4e86\u677e\u6563\u7684\u63cf\u8ff0\uff0c\u5c3d\u7ba1\u6240\u6709\u53c2\u4e0e\u8005\u90fd\u6709\u4e86\u66f4\u597d\u7684\u7ed3\u5c40\uff0c\u5e76\u5c06\u8fd9\u5ea7\u5c0f\u9547\u7684\u6c61\u67d3\u5f52\u548e\u4e8e\u4e00\u4e2a\u751f\u6001\u6076\u68cd\u3002\u7136\u800c\uff0c\u5b83\u786e\u5b9e\u4ee5\u94ef-137\u4e3a\u653e\u5c04\u6027\u6c61\u67d3\u7269\uff0c\u5e76\u63cf\u7ed8\u4e86\u4e24\u4e2a\u5e74\u5e7c\u7684\u5b69\u5b50\u65e0\u610f\u4e2d\u73a9\u5f04\u94ef\u7684\u65b9\u5f0f\u4e0e\u83b1\u5fb7\u00b7\u8fbe\u65af\u5185\u7ef4\u65af\u00b7\u8d39\u96f7\u62c9(Leide Das Neves Ferreira)\u7c7b\u4f3c\uff0c\u540e\u8005\u4e0e\u6f2b\u753b\u4e2d\u7684\u5b69\u5b50\u4e0d\u540c\uff0c\u63a5\u53d7\u4e86\u81f4\u547d\u7684\u5242\u91cf\u3002\n\u6208\u4e9a\u65af\u5dde\u653f\u5e9c\u4e8e1988\u5e742\u6708\u6210\u7acb\u4e86\u83b1\u5fb7\u5185\u97e6\u65af\u00b7\u8d39\u96f7\u62c9\u57fa\u91d1\u4f1a\uff0c\u4ee5\u7814\u7a76\u8be5\u4e8b\u4ef6\u5bf9\u4eba\u53e3\u7684\u6c61\u67d3\u7a0b\u5ea6\uff0c\u5e76\u5411\u53d7\u5f71\u54cd\u7684\u4eba\u63d0\u4f9b\u63f4\u52a9\u3002[29][29]\u3002\n^a b c d e f g h i j k l m n p Goi\u00e2nia\u653e\u5c04\u4e8b\u6545(PDF)\u3002\u7ef4\u4e5f\u7eb3\uff1a\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784\u30021988\u5e74\u3002\u56fd\u9645\u6807\u51c6\u7535\u8bdd\u53f7\u7801\uff1a92-0-129088-8\u3002\u5b58\u6863\u65e5\u671f\u4e3a2016-03-12\u539f\u4ef6(PDF)\u3002\n^a bc d foderaro\uff0c\u4e3d\u838e(2010\u5e747\u67088\u65e5)\u3002\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u7684\u79d1\u5b66\u5bb6\u4eec\u6b63\u5728\u4e3a\u4e00\u79cd\u5a01\u80c1\u505a\u51c6\u5907\uff1a\u80ae\u810f\u7684\u70b8\u5f39\u3002\u7ebd\u7ea6\u65f6\u62a5\u30022017\u5e749\u670814\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n\u6700\u4e25\u91cd\u7684\u6838\u707e\u96be--\u56fe\u7247\u6563\u6587\u3002TIME.com\u3002\u4e8e2017\u5e7412\u67083\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n\u5929\u91ce\u4e4b\u5f25(2012\u5e743\u670826\u65e5)\u3002\u662f\u65f6\u5019\u66f4\u597d\u5730\u4fdd\u62a4\u653e\u5c04\u6027\u6750\u6599\u4e86\u3002\u534e\u76db\u987f\u90ae\u62a5\u3002\u4eceo\u5b58\u6863\u3002\n..", "note_en": "Jump to navigation  Jump to search  The  Goi\u00e2nia accident    [\u0261oj\u02c8j\u0250ni\u0250] was a  radioactive contamination accident that occurred on September 13, 1987, in  Goi\u00e2nia, in the  Brazilian state of  Goi\u00e1s, after a forgotten  radiotherapy source was taken from an abandoned hospital site in the city. It was subsequently handled by many people, resulting in four deaths. About 112,000 people were examined for radioactive contamination and 249 of them were found to have been contaminated.  [1]  [2]\n In the cleanup operation,  topsoil had to be removed from several sites, and several houses were demolished. All the objects from within those houses, including personal possessions, were seized and incinerated.   Time magazine has identified the accident as one of the world&#39;s &#34;worst  nuclear disasters&#34; and the  International Atomic Energy Agency called it &#34;one of the world&#39;s worst radiological incidents&#34;.  [3]  [4]\n   The radiation source in the Goi\u00e2nia accident was a small capsule containing about 93 grams (3.3\u00a0oz) of highly  radioactive  caesium chloride (a caesium salt made with a  radioisotope,  caesium-137) encased in a shielding canister made of  lead and  steel. The source was positioned in a container of the wheel type, where the wheel turns inside the casing to move the source between the storage and irradiation positions.  [1]\n   The activity of the source was 74  terabecquerels (TBq) in 1971. The  International Atomic Energy Agency (IAEA) describes the container as an &#34;international standard capsule&#34;. It was 51 millimeters (2 inches) in diameter and 48\u00a0mm (1.8 inches) long. The specific activity of the active solid was about 814\u00a0TBq\u00b7kg \u22121 of caesium-137 ( half life of 30 years). The dose rate at one meter from the source was 4.56  grays per hour (456\u00a0rad\u00b7h \u22121). While the serial number of the device was unknown, thus hindering definitive identification, the device was thought to have been made in the  U.S. at  Oak Ridge National Laboratory and was used as a radiation source for  radiation therapy at the Goi\u00e2nia hospital.  [1]\n The IAEA states that the source contained 50.9\u00a0TBq (1,380\u00a0Ci) when it was taken and that about 44\u00a0TBq (1200\u00a0Ci, 87%) of contamination had been recovered during the cleanup operation. This means that 7\u00a0TBq (190\u00a0Ci) remained in the environment; it would have decayed to about 3.5\u00a0TBq (95\u00a0Ci) by 2016.\n   The Instituto Goiano de Radioterapia (IGR), a private radiotherapy institute in Goi\u00e2nia,  [1] was just 1\u00a0km (0.6\u00a0mi) northwest of Pra\u00e7a C\u00edvica, the administrative center of the city. It moved to its new premises in 1985, leaving behind a caesium-137-based  teletherapy unit that had been purchased in 1977.  [5] The fate of the abandoned site was disputed in court between IGR and the  Society of Saint Vincent de Paul, then owner of the premises.  [6] On September 11, 1986, the Court of Goi\u00e1s stated it had knowledge of the abandoned radioactive material in the building.  [6]\n Four months before the theft, on May 4, 1987, Saura Taniguti, then director of Ipasgo, the institute of insurance for civil servants, used police force to prevent one of the owners of IGR, Carlos Figueiredo Bezerril, from removing the objects that were left behind.  [6] Figueiredo then warned the president of Ipasgo, L\u00edcio Teixeira Borges, that he should take responsibility &#34;for what would happen with the caesium bomb&#34;.  [6]\n The court posted a security guard to protect the hazardous abandoned equipment.  [7] Meanwhile, the owners of IGR wrote several letters to the  National Nuclear Energy Commission (CNEN), warning them about the danger of keeping a teletherapy unit at an abandoned site, but they could not remove the equipment by themselves once a court order prevented them from doing so.  [6]  [7]\n  On September 13, 1987, taking advantage of the absence of the guard,  [7] Roberto dos Santos Alves and Wagner Mota Pereira illegally entered the partially demolished facility. They partially disassembled the teletherapy unit, and placed the source assembly \u2013 which they thought might have some scrap value \u2013 in a wheelbarrow, taking it to Alves&#39;s home.  [1] There, they began dismantling the equipment. That same evening, they both began to vomit due to  radiation sickness. Nevertheless, they continued in their efforts. The following day, Pereira began to experience diarrhea and dizziness, and his left hand began to swell. He soon developed a burn on this hand in the same size and shape as the aperture \u2013 he eventually underwent partial  amputation of several fingers.  [8]\n On September 15, Pereira visited a local clinic where his symptoms were diagnosed as the result of something he had eaten, and he was told to return home and rest.  [1] Alves, however, continued with his efforts to dismantle the equipment. In the course of this effort, he eventually freed the caesium capsule from its protective rotating head. His prolonged exposure to the radioactive material led to his right forearm becoming  ulcerated, requiring amputation.  [9]\n  On September 16, Alves succeeded in puncturing the capsule&#39;s aperture window with a screwdriver, allowing him to see a deep blue light coming from the tiny opening he had created.  [1] He inserted the screwdriver and successfully scooped out some of the glowing substance. Thinking it was perhaps a type of  gunpowder, he tried to light it, but the powder would not ignite. The exact mechanism by which the light was generated was not known at the time the IAEA report was written, though it was thought to be either  ionized air glow,  fluorescence or  Cherenkov radiation associated with the absorption of moisture by the source; similar blue light was observed in 1988 at  Oak Ridge National Laboratory during the disencapsulation of a  137Cs source.  [1]\n  On September 18, Alves sold the items to a nearby  scrapyard. That night, Devair Alves Ferreira (the owner of the scrapyard) noticed the blue glow from the punctured capsule. Thinking the capsule&#39;s contents were valuable or even supernatural, he immediately brought it into his house. Over the next three days, he invited friends and family to view the strange glowing substance.\n On September 21, at the scrapyard, one of Ferreira&#39;s friends (given as EF1 in the IAEA report) succeeded in freeing several rice-sized grains of the glowing material from the capsule using a screwdriver. Ferreira began to share some of them with various friends and family members. That same day, his wife, 37-year-old Gabriela Maria Ferreira, began to fall ill. On September 25, 1987, Devair Ferreira sold the scrap metal to a second scrapyard.\n  The day before the sale to the second scrapyard, on September 24, Ivo, Devair&#39;s brother, successfully scraped some additional dust out of the source and took it to his house a short distance away. There he spread some of it on the concrete floor. His six-year-old daughter, Leide das Neves Ferreira, later ate a sandwich while sitting on this floor. She was also fascinated by the blue glow of the powder, applying it to her body and showing it off to her mother. Dust from the powder fell on the sandwich she was consuming; she eventually absorbed 1.0\u00a0 GBq and received a total dose of 6.0\u00a0 Gy, more than a fatal dose even with treatment.  [10]\n  Gabriela Maria Ferreira had been the first to notice that many people around her had become severely ill at the same time.  [11] On September 28, 1987 \u2013 fifteen days after the item was found \u2013 she reclaimed the materials from the rival scrapyard and transported them to a hospital. Because the remains of the source were kept in a plastic bag, the level of contamination at the hospital was low.\n  In the morning of September 29, a visiting medical physicist  [12] used a  scintillation counter to confirm the presence of  radioactivity and persuaded the authorities to take immediate action. The city, state, and national governments were all aware of the incident by the end of the day.\n  News of the radiation incident was broadcast on local, national, and international media. Within days, nearly 130,000 people swarmed local hospitals concerned that they might have been exposed.  [2] Of those, 250 were indeed found to be contaminated \u2013 some with radioactive residue still on their skin \u2013 through the use of  Geiger counters.  [2] Eventually, twenty people showed signs of radiation sickness and required treatment.  [2]\n   Admilson Alves de Souza, aged 18 (5.3\u00a0Gy), was an employee of Devair Ferreira who worked on the radioactive source. He developed lung damage, internal bleeding, and heart damage, and died October 18, 1987.\n Leide das Neves Ferreira, age 6 (6.0\u00a0Gy), was the daughter of Ivo Ferreira. When an international team arrived to treat her, she was discovered confined to an isolated room in the hospital because the staff were afraid to go near her. She gradually experienced swelling in the upper body, hair loss, kidney and lung damage, and internal bleeding. She died on October 23, 1987, of &#34; septicemia and generalized infection&#34; at the Marcilio Dias Navy Hospital, in  Rio de Janeiro.  [13] She was buried in a common cemetery in Goi\u00e2nia, in a special  fiberglass coffin lined with lead to prevent the spread of radiation. Despite these measures, news of her impending burial caused a  riot of more than 2,000 people in the cemetery on the day of her burial, all fearing that her corpse would poison the surrounding land. Rioters tried to prevent her burial by using stones and bricks to block the cemetery roadway.  [14] She was buried despite this interference.\n Gabriela Maria Ferreira, aged 37 (5.7\u00a0Gy), wife of scrapyard owner Devair Ferreira, became sick about three days after coming into contact with the substance. Her condition worsened, and she developed hair loss and internal bleeding, especially of the limbs, eyes, and digestive tract. She suffered mental confusion, diarrhea, and acute  renal insufficiency before also dying on October 23, 1987, the same day as her niece, of &#34;septicemia and generalized infection&#34;,  [13]  [15] about a month after exposure.\n Israel Baptista dos Santos, aged 22 (4.5\u00a0Gy), was also an employee of Devair Ferreira who worked on the radioactive source primarily to extract the lead. He developed serious respiratory and  lymphatic complications, was eventually admitted to hospital, and died six days later on October 27, 1987.\n Devair Ferreira himself survived despite receiving 7\u00a0Gy of radiation. He died in 1994 of  cirrhosis aggravated by  depression and  binge drinking.  [16] Ivo Ferreira died of  emphysema in 2003, after also being afflicted by depression.  [17]\n  The outcomes for the 46 most contaminated people are shown in the bar chart below. Several people survived high doses of radiation. This is thought in some cases to be because the  dose was fractionated.  [1] Given time, the body&#39;s repair mechanisms will reverse cell damage caused by radiation. If the dose is spread over a long time period, these mechanisms can mitigate the effects of radiation poisoning.\n   Afterwards, about 112,000 people were examined for radioactive contamination; 249 were found to have significant levels of radioactive material in or on their body.  [1] Of this group, 129 people had internal contamination. The majority of the internally contaminated people only suffered small doses ( &lt; 50  mSv, less than a 1 in 400 risk of getting  cancer as a result). A thousand people were identified as having suffered a dose which was greater than one year of  background radiation; it is thought that 97% of these people had a dose of between 10 and 200\u00a0mSv (between 1 in 2,000 and 1 in 100 risk of developing cancer as a result).\n In 2007, the  Oswaldo Cruz Foundation determined that the rate of caesium-137 related diseases are the same in Goi\u00e2nia accident survivors as they are in the population at large. Nevertheless, compensation is still distributed to survivors, who suffer radiation-related  prejudices in everyday life.  [18]\n  In light of the deaths caused, the three doctors who had owned and operated IGR were charged with  criminal negligence. Because the accidents occurred before the promulgation of the  Federal Constitution of 1988 and because the substance was acquired by the clinic and not by the individual owners, the court could not declare the owners of IGR  liable. One of the medical doctors owning IGR and the clinic&#39;s physicist were ordered to pay  R$100,000 for the derelict condition of the building. The two thieves were not included as  defendants in the public  civil suit.\n In 2000, CNEN was ordered by the 8th Federal Court of Goi\u00e1s to pay compensation of R$1.3 million (near US$750,000) and to guarantee medical and psychological treatment for the direct and indirect victims of the accident and their descendants down to the third generation.  [19]\n    Topsoil had to be removed from several sites, and several houses were demolished. All the objects from within those houses were removed and examined. Those that were found to be free of radioactivity were wrapped in plastic bags, while those that were contaminated were either  decontaminated or disposed of as waste. In industry, the choice between decontaminating or disposing objects is based on only the  economic value of the object and the ease of decontamination. In this case, the IAEA recognized that to reduce the  psychological impact of the event, greater effort should have been taken to clean up items of personal value, such as  jewelry and  photographs. It is not clear from the IAEA report to what degree this was practiced.\n  After the houses were emptied, vacuum cleaners were used to remove dust, and plumbing was examined for radioactivity. Painted surfaces could be scraped, while floors were treated with acid and  Prussian blue mixtures. Roofs were vacuumed and hosed, but two houses had to have their roofs removed. The waste from the cleanup was moved out of the city to a remote place for storage.\n Potassium alum dissolved in  hydrochloric acid was used on clay, concrete, soil, and roofs. Caesium has a high affinity for many clays.  Organic solvents, followed by potassium alum dissolved in hydrochloric acid, were used to treat waxed/greased floors and tables.  Sodium hydroxide solutions, also followed by dissolved potassium alum, were used to treat synthetic floors, machines and typewriters.\n Prussian blue was used to internally decontaminate many people, although by the time it was applied, much of the radioactive material had already migrated from the bloodstream to the muscle tissue, greatly hampering its effectiveness. Urine from victims was treated with  ion exchange resin to compact the waste for ease of storage.\n  The cleanup operation was much harder for this event than it could have been because the source was opened and the active material was water-soluble. A sealed source need only be picked up, placed in a lead container, and transported to the  radioactive waste storage. In the recovery of lost sources, the IAEA recommends careful planning and using a  crane or other device to place shielding (such as a pallet of bricks or a concrete block) near the source to protect recovery workers.\n  The Goi\u00e2nia accident spread significant radioactive contamination throughout the Aeroporto, Central, and Ferrovi\u00e1rios districts. Even after the cleanup, 7\u00a0TBq of radioactivity remained unaccounted for.\n   Goi\u00e2nia&#39;s Instituto Goiano de Radioterapia (IGR) (     16\u00b040\u203229\u2033S  49\u00b015\u203251\u2033W \ufeff / \ufeff   16.6746\u00b0S 49.2641\u00b0W \ufeff /  -16.6746; -49.2641 \ufeff ( Instituto Goiano de Radioterapia))  [1] suffered no actual exposure or breach of radioactive contents, but the site is noteworthy as the source of deadly, unsecured material. IGR moved its clinic to another location in the city,  [20] with the previous site having been replaced around 2000 with the modernized Centro de Conven\u00e7\u00f5es de Goi\u00e2nia (Goi\u00e2nia Convention Center).\n Roberto dos Santos&#39; house (     16\u00b040\u203207\u2033S  49\u00b015\u203248\u2033W \ufeff / \ufeff   16.66848\u00b0S 49.26341\u00b0W \ufeff /  -16.66848; -49.26341 \ufeff ( Roberto dos Santos&#39; house))  [1] on Rua 57. The radioactive source was here for about six days, and it was partially broken into.\n Devair Ferreira&#39;s scrapyard (     16\u00b040\u203202\u2033S  49\u00b015\u203259\u2033W \ufeff / \ufeff   16.66713\u00b0S 49.26652\u00b0W \ufeff /  -16.66713; -49.26652 \ufeff ( Devair Ferreira&#39;s scrapyard)),  [1] on Rua 15A (&#34;Junkyard I&#34;) in the Aeroporto section of the city, had possession of the items for seven days. The caesium container was entirely dismantled, spreading significant contamination. Extreme radiation levels of up to 1.5\u00a0Sv\u00b7h \u22121 were found by investigators in the middle of the scrapyard.\n Ivo Ferreira&#39;s house (     16\u00b039\u203250\u2033S  49\u00b016\u203209\u2033W \ufeff / \ufeff   16.66401\u00b0S 49.26911\u00b0W \ufeff /  -16.66401; -49.26911 \ufeff ( Ivo Ferreira&#39;s house/Junkyard II))  [1] (&#34;Junkyard II&#34;), at 1F Rua 6. Some of the contamination was spread about the house, causing the fatalities of Leide das Neves Ferreira and Gabriela Maria Ferreira. The adjacent junkyard scavenged the remainder of parts from the IGR facility. The premises were heavily contaminated, with radiation dose rates up to 2\u00a0Sv\u00b7h \u22121.\n Junkyard III (     16\u00b040\u203209\u2033S  49\u00b016\u203248\u2033W \ufeff / \ufeff   16.66915\u00b0S 49.28003\u00b0W \ufeff /  -16.66915; -49.28003 \ufeff ( Junkyard III)).  [1] This junkyard had possession of the items for three days until they were sent away.\n Vigil\u00e2ncia Sanit\u00e1ria (     16\u00b040\u203230\u2033S  49\u00b016\u203223\u2033W \ufeff / \ufeff   16.675\u00b0S 49.273\u00b0W \ufeff /  -16.675; -49.273 \ufeff ( Vigilancia Sanitaria)).  [1] Here, the substance was  quarantined, and an official cleanup response began.\n     The original teletherapy capsule was seized by the Brazilian military as soon as it was discovered, and since then the empty capsule has been on display at the  Escola de Instru\u00e7\u00e3o Especializada (&#34;School of Specialized Instruction&#34;) in Rio de Janeiro as a memento to those who participated in the cleanup of the contaminated area.\n  In 1991, a group of researchers collected blood samples from highly exposed survivors of the incident. Subsequent analysis resulted in the publication of numerous scientific articles.  [22]  [23]  [24]  [25]\n  A 1990 film  C\u00e9sio 137 \u2013 O Pesadelo de Goi\u00e2nia (&#34;Caesium-137 \u2013 The Nightmare of Goi\u00e2nia&#34;), a  dramatisation of the incident, was made by  Roberto Pires.  [26] It won several awards at the 1990  Festival de Bras\u00edlia.  [27]\n &#34; Thine Own Self&#34;, a 1994 episode of   Star Trek: The Next Generation, was partially inspired by the Goi\u00e2nia accident.  [28] [   better\u00a0source\u00a0needed]\n A 1992 episode of   Captain Planet and the Planeteers depicts a somewhat loosely-based version of this event in the episode &#34;A Deadly Glow,&#34; albeit with a happier ending for all involved, and blaming the contamination of the town on an eco-villain. However, it did feature cesium-137 as the radioactive contaminant, as well as portrayed two young children unwittingly playing with it in a similar manner to Leide das Neves Ferreira, who, unlike the children in the cartoon, received a fatal dose.\n  The state government of Goi\u00e1s established the Funda\u00e7\u00e3o Leide das Neves Ferreira in February 1988, both to study the extent of contamination of the population as a result of the incident and to render aid to those affected.  [29]\n     ^     a     b     c     d     e     f     g     h     i     j     k     l     m     n     o     p     The Radiological accident in Goi\u00e2nia  (PDF). Vienna: International Atomic Energy Agency. 1988.  ISBN\u00a0  92-0-129088-8.  Archived  (PDF) from the original on 2016-03-12 .\n ^     a     b     c     d   Foderaro, Lisa (July 8, 2010).  &#34;Columbia Scientists Prepare for a Threat: A Dirty Bomb&#34;.   The New York Times.  Archived from the original on September 14, 2017 .\n ^    &#34;The Worst Nuclear Disasters \u2013 Photo Essays&#34;.  Time.com.  Archived from the original on 3 December 2017 .\n ^    Yukiya Amano (March 26, 2012).  &#34;Time to better secure radioactive materials&#34;.  Washington Post.  Archived from the o\n......", "posttime": "2020-06-28 04:49:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6208\u4e9a\u5c3c,nia,\u8f90\u5c04", "title": "\u6208\u4e9a\u5c3c\u4e9a\u4e8b\u6545", "title_en": "Goi\u00e2nia Accident", "transed": 1, "url": "https://en.wikipedia.org/wiki/Goi\u00e2nia_accident", "via": "", "real_tags": ["\u6208\u4e9a\u5c3c", "nia", "\u8f90\u5c04"]}, {"category": "", "categoryclass": "", "imagename": "dfa14c15f723edbef2848223efeb076b.png", "infoid": 1008652, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u63a8\u7279\u611f\u89c9\u5c31\u50cf\u5f53\u5730\u7684\u56fe\u4e66\u9986\u3002\u6211\u7684\u6bcf\u4e00\u4e2a\u63a8\u7279\u670b\u53cb\u90fd\u5728\u5173\u6ce8\u4ed6\u4eec\u81ea\u5df1\u7684\u4e92\u8054\u7f51\u5c0f\u89d2\u843d\uff0c\u5206\u4eab\u4ed6\u4eec\u6700\u597d\u7684\u6750\u6599\uff0c\u5e76\u56de\u7b54\u6211\u968f\u673a\u63d0\u51fa\u7684\u7814\u7a76\u95ee\u9898\u3002\u5916\u9762\u6709\u5f88\u591a\u77e5\u8bc6\u6e0a\u535a\u7684\u4eba\uff0c\u4f46Visakan Veerasamy\u662f\u7ec8\u6781\u56fe\u4e66\u7ba1\u7406\u5458\u3002\u6211\u559c\u6b22\u628a\u4ed6\u60f3\u8c61\u6210\u4e66\u5446\u5b50\u63a8\u7279(Nerd Twitter)\u7684\u738b\u50a8-\u4e00\u4e2a\u4f5c\u5bb6\u3001\u521b\u4f5c\u8005\u548c\u7b56\u5c55\u4eba\uff0c\u4ed6\u7684\u4f5c\u54c1\u5982\u6b64\u4e4b\u591a\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u90fd\u8ba4\u4e0d\u51fa\u81ea\u5df1\u4e86\u3002Visa\u6b63\u5728\u4e00\u4e2a\u5168\u65b0\u7684\u5c42\u9762\u4e0a\u73a9Twitter\u6e38\u620f\u3002\u4ed6\u6b63\u5728\u6784\u5efa\u4ed6\u7684\u5927\u8111\u7684\u6570\u5b57\u7248\u672c\uff0c\u4ed6\u7684\u7ba1\u7406\u98ce\u683c\u611f\u89c9\u50cf\u662f\u67d0\u6837\u4e1c\u897f\u7684\u65e9\u671f\u8fed\u4ee3\uff0c\u6709\u4e00\u5929\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e3b\u6d41\u3002\u8fd9\u662f\u4e00\u79cd\u77e5\u8bc6\u521b\u9020\u548c\u63a2\u7d22\u7684\u7cbe\u795e\uff0c\u611f\u89c9\u66f4\u771f\u5b9e\u4e8e\u539f\u59cb\u7684\u201c\u7f51\u7edc\u201d\uff0c\u66f4\u7b26\u5408\u6211\u4eec\u7684\u601d\u7ef4\u65b9\u5f0f\u3002\n\u53d7\u5230\u4ed6\u5e9e\u5927\u7684\u77e5\u8bc6\u7f51\u7edc\u7684\u542f\u53d1\uff0c\u6211\u5728\u4e09\u4e2a\u6708\u524d\u53d1\u4e86\u4e00\u6761\u63a8\u6587\u8bf4\uff1a\u201c\u6211\u60f3\u6211\u4f1a\u5408\u6cd5\u5730\u4e3a@visakanv\u4ed8\u8d39\u4f5c\u4e3a\u4e00\u79cd\u670d\u52a1\u300210\u7f8e\u5143/\u6708\uff0c\u4ed6\u53ef\u4ee5\u7528\u81ea\u5df1\u7684\u60f3\u6cd5\u3001\u5185\u5bb9\u63a8\u8350\u548c\u76f8\u5173\u5e16\u5b50\u7684\u94fe\u63a5\u6765\u56de\u5e94\u6211\u6240\u6709\u7684\u968f\u673a\u601d\u8003\u3002\u8fd9\u9879\u670d\u52a1\u5c31\u50cf\u9a6c\u91cc\u5965\u8d5b\u8f66\u7684\u6da1\u8f6e\u52a9\u63a8\u5668\u4e00\u6837\u8ba9\u4eba\u7cbe\u795e\u632f\u594b\uff01\u201c\u3002\n\u4ee4\u6211\u60ca\u8bb6\u7684\u662f\uff0cVisa\u5728\u51e0\u5206\u949f\u5185\u5c31\u505a\u51fa\u4e86\u56de\u5e94\u3002\u201c\u5f88\u9ad8\u5174\u8fd9\u6837\u505a\uff0c\u201d\u4ed6\u8bf4\uff0c\u5e76\u5206\u4eab\u4e86\u4ed6\u7684\u5b88\u62a4\u4eba\u7684\u94fe\u63a5\u3002\nVisa\u7684\u6570\u5b57\u5927\u8111\u662f\u7531Twitter\u7ebf\u7a0b\u7ec4\u6210\u7684\u3002\u5a92\u4f53\u4e0d\u662f\u4ed6\u53d1\u660e\u7684\uff0c\u4f46\u4ed6\u628a\u5b83\u63a8\u5230\u4e86\u6781\u9650\u3002\n\u5f53\u9a6c\u514b\u00b7\u5b89\u5fb7\u68ee\u57282014\u5e74\u5f00\u59cb\u53d1\u63a8\u6587\u65f6\uff0c140\u5b57\u7684\u9650\u5236\u5e76\u6ca1\u6709\u963b\u6b62\u4ed6\u8be6\u7ec6\u5730\u53d1\u8868\u81ea\u5df1\u7684\u60f3\u6cd5\u3002\u4ed6\u6ca1\u6709\u7f29\u77ed\u4ed6\u7684\u63a8\u6587\uff0c\u800c\u662f\u5f00\u59cb\u901a\u8fc7\u56de\u590d\u81ea\u5df1\u7684\u65b9\u5f0f\u5c06\u5b83\u4eec\u4e32\u8fde\u5728\u4e00\u8d77\u3002\u4e8e\u662f\uff0c\u63a8\u7279\u98ce\u66b4\u5e94\u8fd0\u800c\u751f\u3002\u8d77\u521d\uff0c\u63a8\u7279\u98ce\u66b4\u662f\u4e00\u79cd\u9ed1\u5ba2\u884c\u4e3a\u3002\u800c\u4e14\u4ed6\u4eec\u4e5f\u6709\u4e9b\u8bb8\u4e89\u8bae\u3002Gawker\u66fe\u62a8\u51fb\u7279\u62c9\u7ef4\u65af\u00b7\u5361\u5170\u5c3c\u514b(Travis Kalanick)\u4f7f\u7528\u63a8\u7279\u98ce\u66b4\uff0c\u79f0\u5176\u4e3a\u201c\u4e00\u7cfb\u5217\u7ed9\u4eba\u4ee5\u5b9e\u8d28\u548c\u8c28\u614e\u7684\u9519\u89c9\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4ee5\u6570\u5b57\u987a\u5e8f\u5448\u73b0\u7684\u3002\u201d2014\u5e74\uff0c\u79d1\u6280\u535a\u5ba2\u4f5c\u8005\u517c\u6295\u8d44\u8005M.G.\u897f\u683c\u52d2(M.G.Siegler)\u5bf9\u4ed6\u4eec\u5927\u53d1\u96f7\u9706\uff1a\n1/\u7406\u8bba\u4e0a\uff0c2/\u6211\u559c\u6b22\u63a8\u7279\u98ce\u66b43/\u6211\u81ea\u5df1\u65e9\u5c31\u60f3\u8981\u8fd9\u6837\u7684\u529f\u80fd\u4e86\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u6211\u4ed6\u5988\u7684\u8ba8\u538c\u4ed6\u4eec\u30026/\u5b83\u4eec\u5728\u63a8\u6587\u6d41\u4e2d\u6d41\u52a8\u5f97\u51e0\u4e4e\u5c31\u50cf\u4ece\u98df\u9053\u91cc\u5410\u51fa\u6765\u7684\u4e1c\u897f\u4e00\u6837\u597d\u30027/\u4ed6\u4eec\u7834\u574f\u4e86Twitter\u662f\u4ec0\u4e48\uff0c8/\u8fd9\u662f\u4e00\u9879\u5feb\u901f\u5206\u4eab\u7b80\u77ed\u60f3\u6cd5\u7684\u670d\u52a19/\u5e76\u8ba9\u5176\u4ed6\u4eba\u4ee5\u67d0\u79cd\u5f62\u5f0f\u56de\u590d\u90a3\u4e9b\u770b\u4f3c\u6709\u5e8f\u7684\u4eba\uff0c\u4ece\u800c\u6bc1\u6389\u4e86\u6d41\u5a92\u4f53\u7684\u4f53\u9a8c\u3002\n\u8d77\u521d\uff0c\u521b\u5efa\u63a8\u7279\u98ce\u66b4\u662f\u4e00\u4e2a\u975e\u5e38\u624b\u52a8\u7684\u8fc7\u7a0b\uff0c\u800c\u4e14\u5b83\u4eec\u4e0d\u592a\u5bb9\u6613\u9605\u8bfb\u6216\u5206\u4eab\u3002\u5feb\u8fdb\u4e09\u5e74\uff1a2017\u5e74\uff0cTwitter\u6b63\u5f0f\u63a8\u51fatweestorms\uff0c\u5e76\u5c06\u5176\u66f4\u540d\u4e3a\u201c\u7ebf\u7a0b\u201d\u3002\u7a81\u7136\u4e4b\u95f4\uff0c\u5c06tweet\u4e32\u5728\u4e00\u8d77\u5e76\u5c06\u751f\u6210\u7684\u7ebf\u7a0b\u4f5c\u4e3a\u4e00\u4e2a\u5355\u5143\u5171\u4eab\u53d8\u5f97\u7b80\u5355\u591a\u4e86\u3002\u8fd9\u4e00\u4ea7\u54c1\u53d8\u5316\u521b\u9020\u4e86Visa\u548c\u5176\u4ed6\u516c\u53f8\u76ee\u524d\u5728\u5176\u4e0a\u7ec7\u7f51\u7684\u57fa\u7840\u8bbe\u65bd\u3002\n\u6211\u5728\u53bb\u5e74\u7684\u67d0\u4e2a\u65f6\u5019\u53d1\u73b0\u4e86Visa\u7684\u5e16\u5b50\uff0c\u4ece\u90a3\u4ee5\u540e\u6211\u5c31\u4e00\u76f4\u5728\u5b83\u4eec\u4e0a\u9762\u722c\u6765\u722c\u53bb\u3002\u9a6c\u514b\u00b7\u5b89\u5fb7\u68ee(Marc Anressen)\u7684\u5e16\u5b50\u5927\u591a\u662f\u81ea\u7ed9\u81ea\u8db3\u7684\uff0c\u800c\u7ef4\u8428(Visa)\u7684\u5e16\u5b50\u662f\u76f8\u4e92\u8054\u7cfb\u7684\u3002\u5b83\u4eec\u5f62\u6210\u4e86\u4e00\u5f20\u76f8\u4e92\u8054\u7cfb\u7684\u601d\u60f3\u7684\u5de8\u5927\u7f51\u7edc\u3002\u6ca1\u6709\u5f00\u59cb\uff0c\u6ca1\u6709\u7ed3\u675f\uff0c\u6ca1\u6709\u5730\u56fe\uff0c\u6ca1\u6709\u8def\u7ebf\uff0c\u4e5f\u6ca1\u6709\u4f60\u5728\u4ed6\u7684\u6302\u6bef\u4e2d\u7684\u4f4d\u7f6e\u3002\u53ea\u6709\u4e00\u4e32\u4e32\u7684\u7ebf\u7d22\u4f3c\u4e4e\u5ef6\u4f38\u5230\u65e0\u7a77\u65e0\u5c3d-\u8fd9\u662f\u4e00\u4e2a\u4e0d\u65ad\u6269\u5927\u7684Visa\u60f3\u6cd5\u548c\u53d1\u73b0\u7684\u7f51\u7edc\u3002\u5728\u6bcf\u4e2a\u8282\u70b9\uff0c\u4ed6\u7684\u8ffd\u968f\u8005\u4e4b\u95f4\u901a\u5e38\u4f1a\u8fdb\u884c\u4e00\u6b21\u5168\u9762\u7684\u8ba8\u8bba\u3002Visa\u5728Twitter\u7684\u57fa\u7840\u4e0a\u6784\u5efa\u4e86\u4e00\u79cd\u611f\u89c9\u50cf\u662f\u4e00\u79cd\u5168\u65b0\u7684\u5a92\u4f53\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6709\u4ee3\u8868\u6027\u7684\u5e16\u5b50\u4f9b\u4f60\u63a2\u7d22\uff1a\n\u6211\u5df2\u7ecf\u915d\u917f\u8fd9\u4e2a\u7406\u8bba1\u5e74\u4e86\uff1a\u5c31\u50cfWWE\u4e0d\u662f\u4e00\u4e2a\u6454\u8de4\u8282\u76ee\uff0c\u800c\u662f\u4e00\u4e2a\u5173\u4e8e\u6454\u8de4\u8282\u76ee\u7684\u8282\u76ee\u4e00\u6837\uff0c\u4e3b\u6d41\u5a92\u4f53\u4e0e\u5176\u8bf4\u662f\u5173\u4e8e\u65b0\u95fb\uff0c\u4e0d\u5982\u8bf4\u662f\u5173\u4e8e\u65b0\u95fb\u7684\u53c2\u4e0e\u5f0f\u4e92\u52a8\u7535\u89c6\u8282\u76ee\u6709\u7ebf\u65b0\u95fb\u7f51\u5b9e\u9645\u4e0a\u662f\u6709\u7ebf\u65b0\u95fb\u5a31\u4e50https://t.co/QZO2t8I9fI\u3002\n-Visa\u5728SF\u7684\u6709\u6548\u671f\u81f35\u67088\u65e5\uff01\ud83c\udf09(@visakanv)2018\u5e746\u67086\u65e5\u3002\nVisa\u7684\u7ebf\u7a0b\u5bf9Twitter\u7684\u5f71\u54cd\u5c31\u50cf\u8d85\u94fe\u63a5\u5bf9\u6b7b\u6811\u6587\u672c\u7684\u5f71\u54cd\u4e00\u6837\u3002\u5b83\u4eec\u8de8\u8d8a\u65f6\u95f4\u548c\u7a7a\u95f4\u5c06\u4e8b\u7269\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u5982\u679c\u6ca1\u6709\u7ebf\u7f51\uff0c\u5927\u591a\u6570\u63a8\u6587\u90fd\u4f1a\u88ab\u629b\u5728\u540e\u9762\u3002\u63a8\u7279\u7f51\u7edc\u53ef\u4ee5\u8ba9\u4eba\u4eec\u91cd\u65b0\u53d1\u73b0\u65e7\u7684\u60f3\u6cd5\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u65b0\u7684\u60f3\u6cd5\u8054\u7cfb\u8d77\u6765\u3002\n\u8fd9\u4e9b\u7ebf\u7d22\u4e0e20\u4e16\u7eaa\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u5148\u9a71\u4e07\u5c3c\u74e6\u5c14\u00b7\u5e03\u4ec0\u7684\u613f\u666f\u6709\u7740\u5bb6\u65cf\u76f8\u4f3c\u4e4b\u5904\u30021945\u5e74\uff0c\u4ed6\u5199\u4e86\u4e00\u7bc7\u73b0\u5728\u5f88\u6709\u540d\u7684\u6587\u7ae0\uff0c\u540d\u4e3a\u201c\u6b63\u5982\u6211\u4eec\u53ef\u80fd\u8ba4\u4e3a\u7684\u90a3\u6837\u201d\uff0c\u5176\u4e2d\u63cf\u8ff0\u4e86\u4e00\u79cd\u4ed6\u79f0\u4e4b\u4e3aMemex\u7684\u77e5\u8bc6\u88c5\u7f6e\uff1a\n\u4eba\u4e0d\u80fd\u6307\u671b\u5b8c\u5168\u4eba\u5de5\u590d\u5236[\u4ed6\u7684]\u5fc3\u7406\u8fc7\u7a0b\uff0c\u4f46\u4ed6\u80af\u5b9a\u5e94\u8be5\u80fd\u591f\u4ece\u4e2d\u5b66\u4e60\u3002\u5728\u8f83\u5c0f\u7684\u65b9\u9762\uff0c\u4ed6\u751a\u81f3\u53ef\u80fd\u6709\u6240\u63d0\u9ad8\uff0c\u56e0\u4e3a\u4ed6\u7684\u8bb0\u5f55\u5177\u6709\u76f8\u5bf9\u6c38\u4e45\u6027\u3002\u7136\u800c\uff0c\u4ece\u8fd9\u4e2a\u7c7b\u6bd4\u4e2d\u5f97\u51fa\u7684\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\u5173\u4e8e\u9009\u62e9\u7684\u3002\u901a\u8fc7\u5173\u8054\u800c\u4e0d\u662f\u7d22\u5f15\u8fdb\u884c\u9009\u62e9\u53ef\u4ee5\u662f\u673a\u68b0\u5316\u7684\u3002\u56e0\u6b64\uff0c\u4eba\u4eec\u4e0d\u80fd\u6307\u671b\u80fd\u8fbe\u5230\u5934\u8111\u8ddf\u968f\u8054\u60f3\u8f68\u8ff9\u7684\u7075\u6d3b\u6027\u901f\u5ea6\uff0c\u4f46\u5728\u4ece\u5b58\u50a8\u2026\u4e2d\u590d\u6d3b\u7684\u7269\u54c1\u7684\u6301\u4e45\u6027\u548c\u6e05\u6670\u5ea6\u65b9\u9762\uff0c\u5e94\u8be5\u6709\u53ef\u80fd\u679c\u65ad\u5730\u51fb\u8d25\u5934\u8111\u3002\u5168\u65b0\u7684\u767e\u79d1\u5168\u4e66\u5f62\u5f0f\u5c06\u4f1a\u51fa\u73b0\uff0c\u51c6\u5907\u597d\u7528\u4e00\u7f51\u5173\u8054\u7684\u5c0f\u5f84\u8d2f\u7a7f\u5176\u4e2d\uff0c\u51c6\u5907\u653e\u5165\u5907\u5fd8\u5f55\u4e2d\u5e76\u5728\u90a3\u91cc\u653e\u5927\u3002\n\u5e03\u4ec0\u7684\u8054\u60f3\u4e4b\u8def\u7684\u613f\u666f\u5df2\u7ecf\u5728\u7f51\u7edc\u7684\u4e00\u4e9b\u89d2\u843d\u5b9e\u73b0\u4e86\uff0c\u6bd4\u5982\u7ef4\u57fa\u767e\u79d1(Wikipedia)\u3002\u4f46\u662f\u5927\u591a\u6570\u5185\u5bb9\u662f\u6309\u65f6\u95f4\u5012\u5e8f\u7684\u6d41(\u4e5f\u79f0\u4e3a\u63d0\u8981\u6216\u65f6\u95f4\u7ebf)\u7ec4\u7ec7\u7684\u3002\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u4f7f\u4fe1\u606f\u6d88\u8d39\u6210\u4e3a\u4e00\u4e2a\u975e\u5e38\u7ebf\u6027\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u5411\u4e0b\u6eda\u52a8\u65e0\u9650\u957f\u7684\u9875\u9762\uff0c\u8fd9\u4e9b\u9875\u9762(\u5927\u81f4)\u6309\u7167\u4ece\u6700\u65b0\u5230\u6700\u65e7\u7684\u987a\u5e8f\u6392\u5217\u3002\u8d85\u8fc7\u4e00\u5468\u524d\u7684\u5185\u5bb9\u5728\u6ca1\u5b8c\u6ca1\u4e86\u7684\u65b0\u5e16\u5b50\u3001\u94fe\u63a5\u548c\u56fe\u7247\u7684\u503e\u5012\u4e0b\u53d8\u5f97\u50f5\u5316\u3002\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\uff0c\u65f6\u95f4\u662f\u4e3b\u8981\u7684\u6392\u5e8f\u539f\u5219\u3002\u521b\u9020\u65b0\u5185\u5bb9\u611f\u89c9\u5c31\u50cf\u628a\u6811\u53f6\u6254\u8fdb\u5486\u54ee\u7684\u6cb3\u91cc\u3002\u5b83\u4e0d\u4f9d\u9644\u4e8e\u4efb\u4f55\u4e1c\u897f--\u5b83\u53ea\u662f\u6f02\u6d6e\u800c\u8fc7\uff0c\u6ce8\u5b9a\u4f1a\u5728\u51e0\u79d2\u949f\u5185\u88ab\u9057\u5fd8\u3002\u6211\u4eec\u4e0d\u518d\u771f\u6b63\u5730\u5728\u7f51\u4e0a\u201c\u51b2\u6d6a\u201d\u4e86\u3002\u9664\u975e\u6211\u4eec\u662f\u7ef4\u57fa\u8d5b\u8f66\uff0c\u5426\u5219\u6211\u4eec\u4e0d\u4f1a\u5728\u4eba\u7c7b\u77e5\u8bc6\u7684\u60ca\u4eba\u65c5\u7a0b\u4e2d\u4ece\u4e00\u4e2a\u8d85\u94fe\u63a5\u8df3\u5230\u53e6\u4e00\u4e2a\u8d85\u94fe\u63a5\u3002\u6211\u4eec\u6eda\u52a8\uff0c\u70b9\u51fb\uff0c\u6eda\u52a8\u70b9\u51fb\u3002\n\u6211\u8ba4\u4e3aVisa\u7684\u63a8\u7279\u5e16\u5b50\u662f\u5bf9\u8fd9\u79cd\u65e0\u804a\u7684\u7ebf\u6027\u5173\u7cfb\u7684\u56de\u5e94-\u8bd5\u56fe\u8ba9\u4e8b\u60c5\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u6211\u4eec\u662f\u8054\u60f3\u751f\u7269\u3002\u6211\u4eec\u901a\u8fc7\u5c06\u4e8b\u7269\u4e0e\u5176\u4ed6\u4e8b\u7269\u8054\u7cfb\u8d77\u6765\u6765\u7406\u89e3\u4e8b\u7269\u3002\u6b63\u5982\u7ea6\u4e66\u4e9a\u00b7\u798f\u5c14\u5728\u4ed6\u7684\u201c\u4e0e\u7231\u56e0\u65af\u5766\u4e00\u8d77\u6708\u7403\u6f2b\u6b65\u201d\u4e00\u4e66\u4e2d\u6240\u5199\u7684\u90a3\u6837\uff1a\u201c\u83b7\u5f97\u77e5\u8bc6\u9700\u8981\u77e5\u8bc6\u3002\u8bb0\u5fc6\u5c31\u50cf\u4e00\u5f20\u6355\u6349\u4fe1\u606f\u7684\u8718\u86db\u7f51\u3002\u5b83\u9493\u5230\u7684\u9c7c\u8d8a\u591a\uff0c\u5b83\u5c31\u957f\u5f97\u8d8a\u5927\u3002\u800c\u4e14\u5b83\u957f\u5f97\u8d8a\u5927\uff0c\u9493\u5230\u7684\u9c7c\u5c31\u8d8a\u591a\u3002\u201c\u3002\n\u6211\u6ce8\u610f\u5230\u7ebf\u7a0b\u5316\u7684\u51b2\u52a8\u5f00\u59cb\u8d85\u8d8aTwitter\u3002\u5b83\u6b63\u51fa\u73b0\u5728\u8d8a\u6765\u8d8a\u591a\u7684\u7f51\u7edc\u89d2\u843d\u3002\u5728Ribbonfield\uff0cVenkatesh Rao\u6b63\u5728\u8bd5\u9a8c\u4e00\u79cd\u540d\u4e3a\u201c\u535a\u5ba2\u94fe\u201d\u7684\u65b0\u4f53\u88c1\uff0c\u5373\u4e00\u5806\u535a\u5ba2\u5e16\u5b50\u56f4\u7ed5\u4e00\u4e2a\u4e3b\u9898\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u5b83\u4e0e\u4f20\u7edf\u7684\u8fde\u7eed\u5267\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u201c\u662f\u5373\u5174\u521b\u4f5c\u7684\uff0c\u800c\u4e0d\u662f\u8ba1\u5212\u7684\uff0c\u5bf9\u73af\u5883\u4e2d\u7684\u91cd\u8981\u4e8b\u4ef6\u505a\u51fa\u53cd\u5e94\uff0c\u4ee5\u4e00\u5b9a\u7684\u8282\u594f\u53d1\u5c55\uff0c\u5728\u7ed3\u6784\u4e0a\u662f\u4e00\u79cd\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u5efa\u7acb\u7684\u65b9\u5f0f\uff0c\u9002\u5408\u591a\u4f5c\u8005\u534f\u4f5c\uff0c\u80fd\u591f\u652f\u6301\u4e0e\u76f8\u90bb\u535a\u5ba2\u94fe\u7684\u8fdb\u7a0b\u95f4\u6d88\u606f\u4f20\u9012\u534f\u8bae\uff0c\u6ca1\u6709\u5fc5\u8981\u6216\u811a\u672c\u4e0a\u7684\u2018\u7ed3\u5c3e\u2019\u3002\u201d\u535a\u5ba2\u94fe\u770b\u8d77\u6765\u50cf\u662fTwitter\u4e3b\u9898\u7684\u76f4\u7cfb\u540e\u4ee3--\u8bd5\u56fe\u5728Twitter\u66f4\u50f5\u5316\u7684\u5e73\u53f0\u4e4b\u5916\u5c1d\u8bd5\u5a92\u4f53\u3002\n\u5728\u201c\u7231\u666e\u897f\u9686\u7406\u8bba\u201d\u4e2d\uff0c\u672c\u00b7\u4ea8\u7279\u521b\u9020\u4e86\u4ed6\u6240\u8c13\u7684\u201c\u53d1\u73b0\u5730\u56fe\u201d\u3002\u8fd9\u662f\u4e00\u79cd\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\uff0c\u5c06\u4ed6\u7684\u5168\u90e8300\u7bc7\u535a\u5ba2\u5e16\u5b50\u4ee5\u7f51\u7edc\u56fe\u7684\u5f62\u5f0f\u663e\u793a\u51fa\u6765\u3002\u7f51\u7edc\u7684\u8282\u70b9\u88ab\u7ec4\u7ec7\u6210\u4e3b\u9898\u7fa4\u96c6\u3002\u4f60\u53ef\u4ee5\u6d4f\u89c8\u76f8\u5173\u7684\u5e16\u5b50\uff0c\u67e5\u770b\u4e0d\u540c\u65f6\u95f4\u7684\u8054\u7cfb\uff0c\u800c\u4e0d\u662f\u5411\u4e0b\u6eda\u52a8\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5217\u7684\u8ba2\u9605\u6e90\u3002\u8fd9\u611f\u89c9\u50cf\u662f\u4e00\u79cd\u4e0e\u535a\u5ba2\u5185\u5bb9\u4ea4\u4e92\u7684\u771f\u6b63\u65b0\u65b9\u5f0f\uff0c\u4e5f\u662f\u5bf9\u201c\u6211\u5e94\u8be5\u4ece\u54ea\u91cc\u5f00\u59cb\u201d\u8fd9\u4e2a\u95ee\u9898\u7684\u6709\u8da3\u56de\u7b54\u3002\n\u6211\u53d1\u73b0\u7684\u6700\u6709\u8da3\u7684\u975e\u7ebf\u6027\u7ebf\u7a0b\u4ea7\u54c1\u662fAre.na\u3002\u5c31\u50cfPinterest\u4e00\u6837\uff0c\u4e0d\u8fc7\u662f\u7ed9\u4e66\u5446\u5b50\u770b\u7684\u3002Are.na\u5141\u8bb8\u60a8\u5c06\u201c\u5757\u201d(\u6587\u672c\u3001\u94fe\u63a5\u3001\u7167\u7247)\u7ec4\u7ec7\u6210\u4e3b\u9898\u201c\u9891\u9053\u201d\u3002\u4f8b\u5982\uff0c\u6211\u76ee\u524d\u6b63\u5728\u4e3a\u540d\u4e3a\u201c\u6df1\u5c42\u5386\u53f2\u201d\u548c\u201c\u6587\u5316\u6218\u4e892.0\u201d\u7684\u9891\u9053\u6536\u96c6\u7d20\u6750\u3002\u5176\u4ed6\u4eba\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5411\u60a8\u7684\u9891\u9053\u6dfb\u52a0\u963b\u6b62\uff0c\u800c\u60a8\u53ef\u4ee5\u5c06\u4ed6\u4eec\u7684\u9891\u9053\u5305\u542b\u5728\u60a8\u81ea\u5df1\u7684\u9891\u9053\u4e2d\u3002\u9891\u9053\u53ef\u4ee5\u4ee5\u65b0\u9896\u7684\u65b9\u5f0f\u91cd\u65b0\u6392\u5217\u3001\u91cd\u547d\u540d\u3001\u8fde\u63a5\u3002\u5728Are.na\u4e0a\uff0c\u4f60\u662f\u4e00\u53ea\u8718\u86db\uff0c\u4e0e\u5176\u4ed6\u4e00\u7fa4\u597d\u5947\u7684\u8718\u86db\u4e00\u8d77\u7f16\u7ec7\u7740\u4e00\u5f20\u77e5\u8bc6\u7f51\u3002\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053\u4f60\u7684\u7f51\u662f\u5982\u4f55\u8fde\u63a5\u8d77\u6765\u7684\u3002\u6211\u5df2\u7ecf\u5f00\u59cb\u5728Are.na(\u800c\u4e0d\u662fGoogle)\u4e0a\u641c\u7d22\u4e1c\u897f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u533a\u5757\u90fd\u4f4d\u4e8e\u4e00\u4e2a\u9891\u9053\u4e2d\uff0c\u8be5\u9891\u9053\u4e0e\u8bb8\u591a\u76f8\u5173\u5185\u5bb9\u76f8\u8fde\u3002\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u611f\u89c9\u50cf\u662f\u6b7b\u80e1\u540c\uff0c\u800c\u7ade\u6280\u573a\u533a\u5757\u611f\u89c9\u50cf\u662f\u4e00\u4e2a\u610f\u60f3\u4e0d\u5230\u7684\u5f00\u59cb\u3002\n\u5199\u535a\u5ba2\u4ee4\u4eba\u6cae\u4e27\u7684\u662f\uff0c\u6bcf\u4e00\u7bc7\u5e16\u5b50\u90fd\u8ba9\u4eba\u611f\u89c9\u662f\u9759\u6001\u7684\u548c\u6700\u7ec8\u7684\u3002\u4f5c\u4e3a\u4e00\u79cd\u5a92\u4ecb\uff0c\u5b83\u5e76\u4e0d\u662f\u5f88\u6709\u751f\u547d\u529b\u3002\u6211\u5e0c\u671b\u5e16\u5b50\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u66f4\u5bb9\u6613\u6f14\u53d8\uff0c\u66f4\u5bb9\u6613\u840c\u53d1\u5206\u652f\uff0c\u66f4\u5bb9\u6613\u627e\u5230\u5408\u4f5c\u8005\u3002\u8d85\u94fe\u63a5\u662f\u4e00\u79cd\u5c06\u4e8b\u7269\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u76f8\u5f53\u7c97\u7cd9\u7684\u6280\u672f\u3002Visa\u7684\u5e16\u5b50\u3001Ribbonarm\u7684\u535a\u5ba2\u94fe\u3001Epsilon\u7406\u8bba\u7684\u63a2\u7d22\u5730\u56fe\u548cAre.na\u7684\u9891\u9053\u90fd\u6307\u5411\u4e86\u4e00\u79cd\u66f4\u9002\u5408\u6211\u4eec\u5927\u8111\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\u7684\u5185\u5bb9\u521b\u4f5c\u548c\u6d88\u8d39\u6a21\u5f0f\u3002\u87ba\u7eb9\u662f\u4e00\u79cd\u6d41\u52a8\u6027\u66f4\u5f3a\u3001\u5ef6\u5c55\u6027\u66f4\u597d\u7684\u4ecb\u8d28\u3002\u627e\u5230\u67d0\u4eba\u7684\u7ebf\u7f51\u611f\u89c9\u5c31\u50cf\u662f\u5728\u5bb6\u91cc\u4ed4\u7ec6\u9605\u8bfb\u4e66\u67b6\u7684\u6570\u5b57\u6548\u679c\u3002\u4f60\u4e0d\u5fc5\u77e5\u9053\u4f60\u8981\u627e\u7684\u662f\u4ec0\u4e48\uff0c\u4f46\u4f60\u901a\u5e38\u4f1a\u5bf9\u4f60\u53d1\u73b0\u7684\u4e1c\u897f\u611f\u5230\u60ca\u559c\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0cVisa\u4e00\u76f4\u5728\u56de\u590d\u6211\u7684\u63a8\u6587\uff0c\u5e76\u63d0\u4f9b\u4e86\u4ed6\u76f8\u5173\u7ebf\u7f51\u7684\u94fe\u63a5\u3002\u6211\u5728\u63a8\u7279\u4e0a\u53d1\u5e03\u7684\u6bcf\u4e00\u4e2a\u968f\u673a\u60f3\u6cd5\u90fd\u4f1a\u6210\u4e3a\u4ed6\u591a\u5e74\u6765\u4e00\u76f4\u5728\u7b56\u5212\u7684\u6536\u85cf\u7684\u4e00\u4e2a\u65b0\u7684\u5207\u5165\u70b9\u3002\u5982\u679c\u6211\u4e0d\u5728Patreon\u4e0a\u652f\u6301\u4ed6\uff0c\u4ed6\u53ef\u80fd\u4f1a\u8fd9\u4e48\u505a\uff0c\u4f46\u6211\u76f8\u4fe1\u4ed6\u7684\u7ebf\u7a0b\u5b9e\u9a8c\u662f\u4e00\u9879\u975e\u5e38\u6709\u4ef7\u503c\u7684\u670d\u52a1\u3002\u968f\u7740\u4e92\u8054\u7f51\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u6211\u4eec\u5c06\u9700\u8981\u80fd\u591f\u8de8\u8d8a\u65f6\u95f4\u5c06\u4e8b\u7269\u4e32\u5728\u4e00\u8d77\uff0c\u6311\u6218\u8fc7\u53bb20\u5e74\u6765\u4e3b\u5bfc\u5728\u7ebf\u5185\u5bb9\u521b\u4f5c\u7684\u7ebf\u6027\u5047\u8bbe\u7684\u4eba\u3002\n\u5982\u679c\u4f60\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\uff0c\u8bf7\u70b9\u51fb\u8fd9\u91cc\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\u3002\u8ba9\u6211\u4eec\u5f00\u59cb\u5bf9\u8bdd\u5427\u3002\n\u5728\u63a8\u7279\u4e0a\u53d1\u5e03\u4e86\u8fd9\u7bc7\u535a\u6587\u540e\uff0cVisa(\u81ea\u7136)\u56de\u590d\u4e86\u4e00\u4e2a\u94fe\u63a5\uff0c\u94fe\u63a5\u5230\u4ed6\u5173\u4e8e\u5e16\u5b50\u7684\u5e16\u5b50\u3002\u8fd9\u662f\u4e00\u4e2a\u503c\u5f97\u63a2\u7d22\u7684\u5154\u5b50\u6d1e\u3002", "note_en": "My Twitter feels like a local library. Each one of my Twitter friends is tending to their own little corner of the internet, sharing their best material, and responding to my random research questions. There are a lot of knowledgable folks out there, but  Visakan Veerasamy is the ultimate librarian. I like to think of him as the crown prince of Nerd Twitter \u2014\u00a0a writer, creator, and curator who\u2019s so prolific he doesn\u2019t recognize himself. Visa is playing the Twitter game on a whole new level. He\u2019s constructing a digital version of his brain, and his curation style feels like an early iteration of something that might one day go mainstream. It\u2019s a knowledge creation and exploration ethos that feels more true to the original \u201cweb\u201d and more fit for how we think.\n  Inspired by his huge web of knowledge, I sent out a tweet three months ago that said: \u201cI think I would legit pay for @visakanv as a service. $10/mo for him to respond to all of my random musings with his own thoughts, content recommendations, and links to relevant threads. This service would be like Mario racing turbo boost for the mind!\u201d\n To my surprise, Visa responded within a few minutes. \u201cHappy to do this,\u201d he said, and shared a link to his  Patreon.\n  Visa\u2019s digital brain is made up of Twitter threads. He didn\u2019t invent the medium, but he\u2019s pushed it to its limits.\n When Marc Andreessen started tweeting in 2014, he didn\u2019t let the 140-character limit stop him from posting his thoughts at length. Instead of shortening his tweets, he started stringing them together by replying to himself. Thus was born the tweetstorm. At first, tweetstorms were a hack. And they were mildly  controversial. Gawker once  slammed Travis Kalanick\u2019s use of a tweetstorm, calling it \u201ca series of thoughts that give the illusion of substance and circumspection because they are presented in a numerical order.\u201d Tech blogger/investor M.G. Siegler raged against them in 2014:\n 1/ In theory, 2/ I love Tweetstorms 3/ and have long wanted a feature like this myself. 4/ But in practice, 5/ I f*cking hate them. 6/ They flow in the tweet stream about as nicely as vomit out of an esophagus. 7/ They ruin the experience of the stream by breaking what Twitter is, 8/ a service to share short thoughts quickly 9/ and let others reply to those in some semblance of order.\n At first, creating tweetstorms was a  very manual process, and they weren\u2019t very easy to read or share. Fast-forward three years: in 2017, Twitter officially productized tweestorms and rebranded them as \u201cthreads.\u201d Suddenly, it was much simpler to string tweets together and share the resulting thread as a unit. This product change created the infrastructure on which Visa and others are currently spinning their webs.\n  I found Visa\u2019s threads sometime last year, and I\u2019ve been crawling across them ever since. Whereas Marc Andressen\u2019s threads were mostly self-contained, Visa\u2019s are linked together. They form a giant web of interconnected thoughts. There\u2019s no beginning or ending or map or wayfinding or sense of where you are in his tapestry. There are just threads of threads of threads that seem to extend into infinity \u2014\u00a0an ever-expanding network of Visa\u2019s ideas and discoveries. At each node, there\u2019s usually a full-on discussion taking place between his followers. Visa has constructed what feels like a whole new medium on top of the bedrock of Twitter. Here\u2019s a representative thread for you to explore:\n I\u2019ve been stewing this theory for 1 year +:  Just as how the WWE isn\u2019t a wrestling show, but a show ABOUT a wrestling show,  mainstream media is less about the news than a participatory interactive tv show ABOUT the news  Cable News Network is really Cable News Entertainment  https://t.co/QZO2t8I9fI\n\u2014 Visa is in SF until May 8! \ud83c\udf09 (@visakanv)  June 6, 2018\n Visa\u2019s threads are doing to Twitter what hyperlinks did to dead-tree text. They link things together across time and space. Without thread-webs, most tweets get left behind in the past. A web of tweets allows people to rediscover older thoughts and connect them with newer ones.\n These threads bear a family resemblance to the vision of an early 20th-century computer pioneer named Vannevar Bush. In 1945, he wrote a now-famous article called  As We May Think, which described a knowledge device he called the Memex:\n Man cannot hope fully to duplicate [his] mental process artificially, but he certainly ought to be able to learn from it. In minor ways, he may even improve, for his records have relative permanency. The first idea, however, to be drawn from the analogy concerns selection. Selection by association, rather than indexing, may be mechanized. One cannot hope thus to equal the speed of flexibility with which the mind follows an associative trail, but it should be possible to beat the mind decisively in regard to the permanence an clarity of the items resurrected from storage \u2026  Wholly new forms of encyclopedias will appear, ready made with a mesh of associative trails running through them, ready to be dropped into the memex and there amplified.\n  Bush\u2019s vision of associative trails has been realized in some corners of the web, like Wikipedia. But most content is organized in the reverse-chronological stream (also known as the feed or the timeline). Social media sites have made information consumption a very linear process. We scroll down infinitely long pages that are (roughly) organized from newest to oldest. Content that\u2019s more than a week old is fossilized under the endless dump of new posts, links, pictures. On social media, time is the main ordering principle. Creating new content feels like throwing a leaf into a roaring river. It\u2019s not attached to anything \u2014 it just floats on by, doomed to be forgotten within a matter of seconds. We don\u2019t really \u201csurf\u201d the web anymore. Unless we\u2019re  Wiki-racing, we\u2019re not hopping from hyperlink to hyperlink on a surprising journey across human knowledge. We scroll, click, scroll click.\n I see Visa\u2019s Twitter threads as a response to this boring linearity\u00a0\u2014 an attempt to make things hang together. We\u2019re associative beings. We make sense of things by relating them to other things. As Joshua Foer wrote in his book  Moonwalking With Einstein: \u201cIt takes knowledge to gain knowledge. Memory is like a spiderweb that catches information. The more it catches, the bigger it grows. And the bigger it grows, the more it catches.\u201d\n  I\u2019ve noticed that the threading impulse is beginning to expand beyond Twitter. It\u2019s popping up in more and more corners of the web. At Ribbonfarm, Venkatesh Rao is experimenting with a new genre called \u201c blogchains,\u201d in which a bunch of blog posts are linked together around a single theme. It\u2019s different than a traditional series because it\u2019s \u201cimprovised rather than planned, is responsive to salient events in the environment, evolves at a certain tempo, is structurally a way to  build over time, is suitable for multi-author collaboration, is capable of supporting an inter-process messaging protocol with adjacent blogchains, has no necessary or scripted \u2018ending.\u2019\u201d The blogchain seems like a direct descendant of the Twitter thread \u2014 an attempt to experiment with the medium outside the confines of Twitter\u2019s more rigid platform.\n At Epsilon Theory, Ben Hunt created what he calls a  Discovery Map. It\u2019s an interactive visualization that displays all 300 of his blog posts as a network graph. The nodes of the network are organized in thematic clusters. Instead of scrolling down a reverse-chronological feed, you can surf across related posts and see connections across time. This feels like a genuinely new way of interacting with blog content, and it serves as an interesting answer to the question \u201cWhere should I start?\u201d\n  The most interesting non-linear threading product I\u2019ve discovered is called  Are.na. It\u2019s like Pinterest, but for nerds. Are.na lets you organize \u201cBlocks\u201d (text, links, photos) into thematic \u201cChannels\u201d. For example, I\u2019m currently collecting material for channels called \u201c Deep history\u201d and \u201c Culture wars 2.0\u201d. Other people can easily add blocks to your channels, and you can include their channels inside your own. Channels can be rearranged, renamed, connected in novel ways. On Are.na, you\u2019re a spider spinning a knowledge web alongside a bunch of other curious spiders. You never know how your webs might connect. I\u2019ve started searching for things on Are.na (instead of Google) because every block lives inside a channel that\u2019s connected to a lot of related content. Whereas a Google search result feels like a dead-end, an Arena block feels like an unexpected beginning.\n What\u2019s frustrating about blogging is that each post feels static and final. It\u2019s not very alive as a medium. I wish it were easier for posts to evolve over time, sprout offshoots, find collaborators. The hyperlink is a pretty crude technology for connecting things together. Visa\u2019s threads, Ribbonfarm\u2019s blogchains, Epsilon Theory\u2019s Discovery Map, and Are.na\u2019s channels are all pointing to a model of content creation and consumption that\u2019s more fit for the way our minds actually work. Threads are a more fluid and malleable medium. Finding someone\u2019s thread-web feels like the digital equivalent of perusing the bookshelves in their home. You don\u2019t have to know what you\u2019re looking for, but you\u2019re usually pleasantly surprised by what you find.\n For the last few months, Visa has been replying to my tweets with links to his relevant thread-webs. Each random thought I tweet becomes a new entry point into the collection he\u2019s been curating for years. He\u2019d probably do this if I weren\u2019t supporting him on Patreon, but I believe his threading experiment is an extremely valuable service. As the internet grows more complex, we\u2019re going to need people who can string things together across time and challenge the linear assumptions that have dominated online content creation for the last two decades.\n If you liked this post,  click here to share your thoughts. Let\u2019s get a conversation going.\n  After tweeting this blog post, Visa (naturally) responded with a link to his  thread about threads. It\u2019s a rabbit hole worth exploring.", "posttime": "2020-06-28 04:23:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ebf\u6761,spreading,\u5e16\u5b50", "title": "\u7ebf\u6761\u7684\u4f20\u64ad(2019)", "title_en": "The Spreading of Threading (2019)", "transed": 1, "url": "https://aaronzlewis.com/blog/2019/05/01/spreading-threading/", "via": "", "real_tags": ["\u7ebf\u6761", "spreading", "\u5e16\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "69aef10d4962ebcacfbf8b7b112b4f93.jpeg", "infoid": 1008651, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Secretive\u662f\u4e00\u6b3e\u7528\u4e8e\u5728\u5b89\u5168\u98de\u5730\u4e2d\u5b58\u50a8\u548c\u7ba1\u7406SSH\u5bc6\u94a5\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u7684\u7075\u611f\u6765\u81easekey\u9879\u76ee\uff0c\u4f46\u5728SWIFT\u4e2d\u91cd\u5199\uff0c\u6ca1\u6709\u5916\u90e8\u4f9d\u8d56\u9879\uff0c\u5e76\u4e14\u4f7f\u7528\u4e86\u65b9\u4fbf\u7684\u672c\u673a\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u3002\nSSH\u5bc6\u94a5\u6700\u5e38\u89c1\u7684\u8bbe\u7f6e\u662f\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\uff0c\u7531\u9002\u5f53\u7684\u6743\u9650\u4fdd\u62a4\u3002\u8fd9\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u5f88\u597d\uff0c\u4f46\u6076\u610f\u7528\u6237\u6216\u6076\u610f\u8f6f\u4ef6\u590d\u5236\u60a8\u7684\u79c1\u94a5\u5e76\u4e0d\u662f\u7279\u522b\u56f0\u96be\u3002\u5982\u679c\u60a8\u5c06\u5bc6\u94a5\u5b58\u50a8\u5728\u5b89\u5168\u7684\u98de\u5730\u4e2d\uff0c\u90a3\u4e48\u6309\u7167\u8bbe\u8ba1\uff0c\u60a8\u4e0d\u53ef\u80fd\u5c06\u5176\u5bfc\u51fa\u3002\n\u5982\u679c\u4f60\u7684Mac\u6709\u4e00\u4e2a\u5b89\u5168\u7684\u98de\u5730\uff0c\u5b83\u8fd8\u652f\u6301\u5f3a\u5927\u7684\u8bbf\u95ee\u63a7\u5236\uff0c\u6bd4\u5982Touch ID\uff0c\u6216\u8005\u4f7f\u7528Apple Watch\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u60a8\u53ef\u4ee5\u914d\u7f6e\u60a8\u7684\u5bc6\u94a5\uff0c\u4f7f\u5b83\u4eec\u5728\u91cd\u65b0\u8bbf\u95ee\u4e4b\u524d\u9700\u8981Touch ID(\u6216Watch)\u8eab\u4efd\u9a8c\u8bc1\u3002\nSecretive\u8fd8\u4f1a\u5728\u60a8\u7684\u94a5\u5319\u88ab\u8bbf\u95ee\u65f6\u901a\u77e5\u60a8\uff0c\u56e0\u6b64\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u63aa\u624b\u4e0d\u53ca\u3002\n\u5bf9\u4e8e\u6ca1\u6709\u5b89\u5168\u98de\u5730\u7684Mac\uff0c\u60a8\u53ef\u4ee5\u914d\u7f6e\u667a\u80fd\u5361(\u5982YubiKey)\u5e76\u4f7f\u7528\u5b83\u8fdb\u884c\u7b7e\u540d\u3002\n\u6784\u5efa\u662f\u7531GitHub\u64cd\u4f5c\u901a\u8fc7\u53ef\u5ba1\u6838\u7684\u6784\u5efa\u548c\u53d1\u5e03\u751f\u6210\u8fc7\u7a0b\u751f\u6210\u7684\u3002\u6bcf\u4e2a\u6784\u5efa\u90fd\u6709\u4e00\u4e2a\u6587\u6863SHAs\u6b65\u9aa4\uff0c\u5b83\u5c06\u8f93\u51faGitHub Action\u751f\u6210\u7684\u6784\u5efa\u7684SHA\u6821\u9a8c\u548c\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u9a8c\u8bc1\u7ed9\u5b9a\u6784\u5efa\u7684\u6e90\u4ee3\u7801\u662f\u5426\u5bf9\u5e94\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7248\u672c\u3002\n\u867d\u7136Secure\u4f7f\u7528\u5b89\u5168\u98de\u5730\u8fdb\u884c\u5bc6\u94a5\u5b58\u50a8\uff0c\u4f46\u5b83\u4ecd\u7136\u4f9d\u8d56\u5bc6\u94a5\u94feAPI\u6765\u8bbf\u95ee\u5b83\u4eec\u3002keychain\u5c06\u5bc6\u94a5\u7684\u8bfb\u53d6\u9650\u5236\u4e3a\u521b\u5efa\u5b83\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f(\u5177\u4f53\u5730\u8bf4\uff0c\u662f\u6346\u7ed1\u5305ID)\u3002\u5982\u679c\u60a8\u4ece\u6e90\u4ee3\u7801\u6784\u5efaSecretive\uff0c\u8bf7\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u5305ID\u662f\u4e00\u81f4\u7684\uff0c\u4ee5\u4fbf\u5bc6\u94a5\u94fe\u80fd\u591f\u5b9a\u4f4d\u60a8\u7684\u5bc6\u94a5\u3002\n\u7531\u4e8e\u5b89\u5168\u98de\u5730\u4e2d\u7684\u673a\u5bc6\u4e0d\u53ef\u5bfc\u51fa\uff0c\u56e0\u6b64\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u5907\u4efd\uff0c\u60a8\u4e5f\u65e0\u6cd5\u5c06\u5176\u4f20\u8f93\u5230\u65b0\u8ba1\u7b97\u673a\u3002\u5982\u679c\u4f60\u4e70\u4e86\u4e00\u53f0\u65b0\u7684Mac\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u7ec4\u7279\u5b9a\u4e8e\u8be5Mac\u7684\u65b0\u79d8\u5bc6\u5373\u53ef\u3002\n\u5982\u679c\u60a8\u5728\u6b64\u9879\u76ee\u4e2d\u53d1\u73b0\u4efb\u4f55\u6f0f\u6d1e\uff0c\u8bf7\u4f7f\u7528\u5305\u542b\u4fdd\u5bc6\u5b89\u5168\u7684\u4e3b\u9898\u901a\u77e5max.goedjen@gmail.com\u3002", "note_en": "Secretive is an app for storing and managing SSH keys in the Secure Enclave. It is inspired by the  sekey project, but rewritten in Swift with no external dependencies and with a handy native management app.\n    The most common setup for SSH keys is just keeping them on disk, guarded by proper permissions. This is fine in most cases, but it&#39;s not super hard for malicious users or malware to copy your private key. If you store your keys in the Secure Enclave, it&#39;s impossible to export them, by design.\n  If your Mac has a Secure Enclave, it also has support for strong access controls like Touch ID, or authentication with Apple Watch. You can configure your key so that they require Touch ID (or Watch) authentication before they&#39;re accessed.\n   Secretive also notifies you whenever your keys are acceessed, so you&#39;re never caught off guard.\n   For Macs without Secure Enclaves, you can configure a Smart Card (such as a YubiKey) and use it for signing as well.\n     Builds are produced by GitHub Actions with an auditable build and release generation process. Each build has a &#34;Document SHAs&#34; step, which will output SHA checksums for the build produced by the GitHub Action, so you can verify that the source code for a given build corresponds to any given release.\n  While Secretive uses the Secure Enclave for key storage, it still relies on Keychain APIs to access them. Keychain restricts reads of keys to the app (and specifically, the bundle ID) that created them. If you build Secretive from source, make sure you are consistent in which bundle ID you use so that the Keychain is able to locate your keys.\n  Because secrets in the Secure Enclave are not exportable, they are not able to be backed up, and you will not be able to transfer them to a new machine. If you get a new Mac, just create a new set of secrets specific to that Mac.\n  If you discover any vulnerabilities in this project, please notify  max.goedjen@gmail.com with the subject containing &#34;SECRETIVE SECURITY.&#34;", "posttime": "2020-06-28 04:23:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,ssh,macos,\u5bc6\u94a5", "title": "\u79d8\u800c\u4e0d\u5ba3-MacOS\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u5728\u5b89\u5168\u98de\u5730\u4e2d\u5b58\u50a8SSH\u5bc6\u94a5", "title_en": "Secretive \u2013 macOS native app to store SSH keys in the Secure Enclave", "transed": 1, "url": "https://github.com/maxgoedjen/secretive", "via": "", "real_tags": ["\u7a0b\u5e8f", "ssh", "macos", "\u5bc6\u94a5"]}, {"category": "", "categoryclass": "", "imagename": "36603ac8e2e52e50d30d241dcd53f0d6.png", "infoid": 1008650, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u4e2a\u6708\u524d\uff0c\u6211\u5f00\u59cb\u56de\u7b54\u662f\u5426\u6709\u53ef\u80fd\u907f\u5f00\u79d1\u6280\u5de8\u5934\u7684\u95ee\u9898\u3002\u5728\u4e94\u5468\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u5c4f\u853d\u4e86\u4e9a\u9a6c\u900a\u3001Facebook\u3001\u8c37\u6b4c\u3001\u5fae\u8f6f\u548c\u82f9\u679c\uff0c\u4e00\u6b21\u5c4f\u853d\u4e86\u4e00\u4e2a\uff0c\u4ee5\u4e86\u89e3\u5982\u4f55\u5728\u6ca1\u6709\u5b83\u4eec\u7684\u73b0\u4ee3\u751f\u6d3b\u4e2d\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u6700\u521d\u53d1\u8868\u4e8e2019\u5e74\uff0c\u81ea\u6700\u521d\u53d1\u8868\u4ee5\u6765\u4e00\u76f4\u5728\u66f4\u65b0\u3002\n\u4e3a\u4e86\u7ed3\u675f\u6211\u7684\u5b9e\u9a8c\uff0c\u6211\u8981\u770b\u770b\u6211\u662f\u5426\u80fd\u540c\u65f6\u963b\u6b62\u6240\u6709\u4e94\u4e2a\u4eba\u3002\n\u6211\u4e0d\u4ec5\u62b5\u5236\u4ed6\u4eec\u7684\u4ea7\u54c1\uff0c\u4e00\u4f4d\u540d\u53eb\u5fb7\u9c81\u592b\u00b7\u6885\u8d6b\u7f57\u7279\u62c9(Dhruv Mehrotra)\u7684\u6280\u672f\u4e13\u5bb6\u8fd8\u8bbe\u8ba1\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u7f51\u7edc\u5de5\u5177\uff0c\u963b\u6b62\u6211\u7684\u8bbe\u5907\u4e0e\u79d1\u6280\u5de8\u5934\u7684\u670d\u52a1\u5668\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u610f\u5473\u7740\u6765\u81ea\u8c37\u6b4c\u7684\u5e7f\u544a\u548c\u5206\u6790\u5c06\u65e0\u6cd5\u5de5\u4f5c\uff0cFacebook\u65e0\u6cd5\u5728\u4e92\u8054\u7f51\u4e0a\u8ddf\u8e2a\u6211\uff0c\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1(Amazon Web Services\uff0c\u7b80\u79f0AWS)\u6258\u7ba1\u7684\u7f51\u7ad9\u5047\u8bbe\u4e5f\u65e0\u6cd5\u52a0\u8f7d\u3002\n\u6211\u4f7f\u7528\u7684\u662f\u4e00\u5bb6\u540d\u4e3aPurism\u7684\u516c\u53f8\u751f\u4ea7\u7684Linux\u7b14\u8bb0\u672c\u7535\u8111\u548c\u4e00\u90e8\u8bfa\u57fa\u4e9a\u529f\u80fd\u624b\u673a\uff0c\u6211\u6b63\u5728\u7528\u5b83\u91cd\u65b0\u5b66\u4e60\u4e22\u5931\u7684T9\u77ed\u4fe1\u827a\u672f\u3002\n\u6211\u60f3\u6211\u4e0d\u53ef\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u9700\u8981\u5728\u51c6\u5907\u9636\u6bb5\u6446\u8131\u5bf9\u5404\u79cd\u670d\u52a1\u7684\u4f9d\u8d56\uff0c\u5c31\u50cf\u4e00\u4e2a\u9157\u9152\u8005\u7ecf\u538612\u4e2a\u6b65\u9aa4\u4e00\u6837\u3002\u867d\u7136\u79d1\u6280\u5de8\u5934\u5728\u6570\u636e\u3001\u6743\u529b\u548c\u793e\u4f1a\u63a7\u5236\u65b9\u9762\u7684\u79ef\u7d2f\u4ee4\u4eba\u70e6\u607c\uff0c\u4f46\u5b83\u4eec\u63d0\u4f9b\u7684\u670d\u52a1\u786e\u5b9e\u8ba9\u6211\u4eec\u7684\u751f\u6d3b\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\n\u4f8b\u5982\uff0c\u5728\u5b9e\u9a8c\u7684\u65e9\u4e9b\u65f6\u5019\uff0c\u6211\u610f\u8bc6\u5230\u5982\u679c\u6ca1\u6709\u79d1\u6280\u5de8\u5934\uff0c\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u4e0e\u4eba\u8054\u7cfb\u3002\u8c37\u6b4c\u3001\u82f9\u679c\u548cFacebook\u63d0\u4f9b\u4e86\u6211\u7684\u6eda\u52a8Rolodex\u3002\n\u56e0\u6b64\uff0c\u5728\u4e3a\u672c\u5468\u505a\u51c6\u5907\u65f6\uff0c\u6211\u4ece\u8c37\u6b4c\u8f93\u51fa\u4e86\u6211\u6240\u6709\u7684\u8054\u7cfb\u4eba\uff0c\u603b\u6570\u8fbe\u5230\u4e86\u4ee4\u4eba\u9707\u60ca\u76848000\u4eba\u3002\u6211\u8fd8\u5c06\u6211iPhone\u4e2d\u76841500\u591a\u4e2a\u8054\u7cfb\u4eba\u51cf\u5c11\u5230143\u4e2a\u8bfa\u57fa\u4e9a\u4eba\uff0c\u4e5f\u5c31\u662f\u6211\u7ecf\u5e38\u4e0e\u4e4b\u4ea4\u8c08\u7684\u4eba\u6570\uff0c\u8fd9\u4e0e\u9093\u5df4\u7684\u6570\u5b57\u975e\u5e38\u63a5\u8fd1\uff0c\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u662f\uff0c\u6211\u7684\u8bfa\u57fa\u4e9a\u8054\u7cfb\u4eba\u4eba\u6570\u5df2\u7ecf\u51cf\u5c11\u5230143\u4eba\uff0c\u4e5f\u5c31\u662f\u6211\u7ecf\u5e38\u4e0e\u4e4b\u4ea4\u8c08\u7684\u4eba\u6570\uff0c\u8fd9\u4e0e\u9093\u5df4\u7684\u6570\u5b57\u975e\u5e38\u63a5\u8fd1\u3002\n\u8fd9\u5468\u6211\u6253\u4e86\u5f88\u591a\u7535\u8bdd\uff0c\u56e0\u4e3a\u5728\u8bfa\u57fa\u4e9a\u57fa\u4e8e\u6570\u5b57\u7684\u952e\u76d8\u4e0a\u53d1\u77ed\u4fe1\u592a\u70e6\u4eba\u4e86\u3002\u6211\u53d1\u73b0\u4eba\u4eec\u7ecf\u5e38\u56e0\u4e3a\u62c5\u5fc3\u800c\u7b2c\u4e00\u6b21\u63a5\u7535\u8bdd\uff1b\u4ed6\u4eec\u4e0d\u4e60\u60ef\u63a5\u5230\u6211\u7684\u7535\u8bdd\u3002\n\u5728\u8857\u533a\u7684\u7b2c\u4e00\u5929\uff0c\u6211\u9ed8\u9ed8\u5730\u5f00\u8f66\u53bb\u4e0a\u73ed\uff0c\u56e0\u4e3a\u6211\u79df\u7684\u798f\u7279\u878d\u5408(Ford Fusion)\u7684\u201c\u540c\u6b65\u201d\u5a31\u4e50\u7cfb\u7edf\u662f\u7531\u5fae\u8f6f\u63d0\u4f9b\u52a8\u529b\u7684\u3002\u672c\u5468\uff0c\u80cc\u666f\u566a\u97f3\u603b\u4f53\u4e0a\u6d88\u5931\u4e86\uff0c\u56e0\u4e3aYouTube\u3001Apple Music\u548c\u6211\u4eec\u7684Echo\u90fd\u88ab\u7981\u6b62\u4e86--Netflix\u3001Spotify\u548cHulu\u4e5f\u662f\u5982\u6b64\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f9d\u8d56AWS\u548c\u8c37\u6b4c\u4e91(Google Cloud)\u5c06\u5185\u5bb9\u63d0\u4f9b\u7ed9\u7528\u6237\u3002\n\u5bc2\u9759\u4f7f\u6211\u7684\u601d\u7eea\u6bd4\u5f80\u5e38\u66f4\u98d8\u5ffd\u4e0d\u5b9a\u3002\u6709\u65f6\u8fd9\u4f1a\u5f15\u53d1\u6211\u5199\u5b8c\u4e00\u534a\u7684\u50f5\u5c38\u5c0f\u8bf4\u7684\u60f3\u6cd5\uff0c\u6216\u8005\u5f15\u53d1\u4e00\u4e2a\u65b0\u7684\u8c03\u67e5\u95ee\u9898\u3002\u4f46\u66f4\u591a\u7684\u65f6\u5019\uff0c\u6211\u4f1a\u7ea0\u7ed3\u4e8e\u6211\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002\n\u7531\u4e8e\u5b9e\u9a8c\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u4e8b\u60c5\u4e2d\u7684\u8bb8\u591a\u90fd\u66f4\u5177\u6311\u6218\u6027\uff0c\u6bd4\u5982\u5f53\u6211\u5f55\u5236\u4e86\u5bf9\u64ad\u5ba2\u4e9a\u5386\u514b\u65af\u00b7\u6208\u5fb7\u66fc(Alex Goldman)\u7684\u91c7\u8bbf\u65f6\uff0c\u4ed6\u56de\u7b54\u4e86\u6240\u6709\u5173\u4e8eFacebook\u53ca\u5176\u9690\u79c1\u95ee\u9898\u7684\u95ee\u9898\u3002\n\u6211\u4f4f\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\uff0c\u4e9a\u5386\u514b\u65af\u5728\u7ebd\u7ea6\uff1b\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528Skype\uff0c\u4f46Skype\u5c5e\u4e8e\u5fae\u8f6f\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u7535\u8bdd\u4ea4\u8c08\uff0c\u6211\u7528\u624b\u6301\u53d8\u7126\u5f55\u97f3\u673a\u8bb0\u5f55\u6211\u7684\u7ed3\u675f\u3002\u8fd9\u5f88\u597d\u7528\uff0c\u4f46\u5f53\u6211\u8981\u5c06386MB\u7684\u97f3\u9891\u6587\u4ef6\u53d1\u9001\u7ed9Alex\u65f6\uff0c\u6211\u610f\u8bc6\u5230\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u901a\u8fc7\u4e92\u8054\u7f51\u53d1\u9001\u4e00\u4e2a\u5927\u6587\u4ef6\u3002\n\u6211\u7684Gmail\u66ff\u4ee3\u54c1-ProtonMail\u548cRiseup-\u544a\u8bc9\u6211\u6587\u4ef6\u592a\u5927\u4e86\uff0c\u5b83\u4eec\u53ea\u670925MB\u3002Google Drive\u548cDropbox\u4e0d\u662fDropbox\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u662f\u7531\u4e9a\u9a6c\u900a\u7684AWS\u6258\u7ba1\u7684\uff0c\u4f9d\u8d56\u8c37\u6b4c\u767b\u5f55\u3002\u5176\u4ed6\u6587\u4ef6\u5171\u4eab\u7f51\u7ad9\u4e5f\u4f9d\u8d56\u79d1\u6280\u5de8\u5934\u63d0\u4f9b\u7f51\u7edc\u6258\u7ba1\u670d\u52a1\u3002\n\u5728\u5c06\u6587\u4ef6\u653e\u5165U\u76d8\u5e76\u653e\u5165IRL\u90ae\u7bb1\u4e4b\u524d\uff0c\u6211\u7ed9\u6211\u7684\u6280\u672f\u81ea\u7531\u4e13\u5bb6\u8096\u6069\u00b7\u5965\u5e03\u83b1\u6069(Sean O\u2018Brien)\u6253\u4e86\u4e2a\u7535\u8bdd\uff0c\u4ed6\u662f\u8036\u9c81\u5927\u5b66\u6cd5\u5b66\u9662(Yale Law School)\u9690\u79c1\u5b9e\u9a8c\u5ba4(Privacy Lab)\u7684\u8d1f\u8d23\u4eba\u3002\u4ed6\u8fd8\u4e3a\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u5236\u9020\u5546Purism\u516c\u53f8\u505a\u8425\u9500\u5de5\u4f5c\u3002\u5965\u5e03\u83b1\u6069\u8bd5\u56fe\u907f\u5f00\u79d1\u6280\u5de8\u5934\uff0c\u8f6c\u800c\u9009\u62e9\u5f00\u6e90\u6280\u672f\uff0c\u6240\u4ee5\u6211\u60f3\u4ed6\u6216\u8bb8\u80fd\u5e2e\u4e0a\u5fd9\u3002\n\u5965\u5e03\u83b1\u6069\u9996\u5148\u5411\u6211\u4ecb\u7ecd\u4e86Send.Firefox.com\uff0c\u8fd9\u662f\u4e00\u5bb6\u7531Mozilla\u8fd0\u8425\u7684\u52a0\u5bc6\u6587\u4ef6\u5171\u4eab\u670d\u52a1\u3002\u4f46\u662f\u2026\u3002\u5b83\u4f7f\u7528\u7684\u662f\u8c37\u6b4c\u4e91\uff0c\u6240\u4ee5\u4e0d\u4f1a\u52a0\u8f7d\u3002\u7136\u540e\uff0c\u5965\u5e03\u83b1\u6069\u628a\u6211\u9001\u5230Share.Riseup.net\uff0c\u8fd9\u662f\u4e00\u4e2a\u6587\u4ef6\u5171\u4eab\u670d\u52a1\uff0c\u6765\u81ea\u540c\u4e00\u4e2a\u6fc0\u8fdb\u7684\u6280\u672f\u56e2\u4f53\uff0c\u4e5f\u662f\u6211\u7684\u4e2a\u4eba\u7535\u5b50\u90ae\u4ef6\u4e3b\u673a\uff0c\u4f46\u5b83\u53ea\u9002\u7528\u4e8e50MB\u4ee5\u4e0b\u7684\u6587\u4ef6\u3002\n\u5965\u5e03\u83b1\u6069\u7684\u6700\u540e\u4e00\u4e2a\u5efa\u8bae\u662fOnionShare\uff0c\u8fd9\u662f\u4e00\u4e2a\u901a\u8fc7\u201c\u6697\u7f51\u201d\u79c1\u4e0b\u5171\u4eab\u6587\u4ef6\u7684\u5de5\u5177\uff0c\u5373\u6ca1\u6709\u88ab\u8c37\u6b4c\u6293\u53d6\u7684\u90e8\u5206\uff0c\u9700\u8981Tor\u6d4f\u89c8\u5668\u624d\u80fd\u5230\u8fbe\u3002\u5b9e\u9645\u4e0a\u6211\u77e5\u9053\u8fd9\u4e2a\u3002\u6211\u7684\u670b\u53cb\u8fc8\u5361\u00b7\u674e(Micah Lee)\u662f\u201c\u62e6\u622a\u201d\u7684\u6280\u672f\u4e13\u5bb6\uff0c\u4ed6\u6210\u529f\u5730\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u6211\u53bbOnionshare.org\u4e0b\u8f7d\u65f6\uff0c\u7f51\u7ad9\u65e0\u6cd5\u52a0\u8f7d\u3002\n\u201c\u54c8\uff0c\u662f\u7684\uff0c\u201d\u5f53\u6211\u95ee\u8d77\u8fd9\u4ef6\u4e8b\u65f6\uff0c\u8fc8\u5361\u7ed9\u6211\u53d1\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\u201c\u76ee\u524d\u5b83\u662f\u7531AWS\u6258\u7ba1\u7684\u3002\u201d\n\u6b63\u5982\u6211\u5728\u5b9e\u9a8c\u4e4b\u521d\u9047\u5230\u7684\u90a3\u6837\uff0c\u4e9a\u9a6c\u900a\u6700\u8d5a\u94b1\u7684\u4e1a\u52a1\u4e0d\u662f\u96f6\u552e\uff0c\u800c\u662f\u7f51\u7edc\u6258\u7ba1\u3002\u65e0\u6570\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u7f51\u7ad9\u4f9d\u8d56\u4e8eAWS\u63d0\u4f9b\u7684\u6570\u5b57\u57fa\u7840\u8bbe\u65bd\uff0c\u672c\u5468\u6ca1\u6709\u4e00\u4e2a\u4e3a\u6211\u5de5\u4f5c\u3002\nMicah\u5efa\u8bae\u6211\u4eceGithub\u4e0b\u8f7d\uff0c\u4f46\u90a3\u662f\u5fae\u8f6f\u6240\u6709\u7684\u3002\u8c22\u5929\u8c22\u5730\uff0cO\u2018Brien\u544a\u8bc9\u6211\uff0c\u6211\u53ef\u4ee5\u901a\u8fc7Linux\u8ba1\u7b97\u673a\u4e0a\u7684\u547d\u4ee4\u884c\u76f4\u63a5\u4eceMicah\u7684\u670d\u52a1\u5668\u4e0b\u8f7dOnionShare\u7a0b\u5e8f\u3002\u4ed6\u5f97\u4e00\u6b65\u4e00\u6b65\u5730\u6559\u6211\uff0c\u4f46\u5f88\u7ba1\u7528\u3002\u6211\u53ef\u4ee5\u8fd0\u884cOnionShare\uff0c\u5c06\u6211\u7684\u6587\u4ef6\u653e\u5165\u5176\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6d0b\u8471\u7ad9\u70b9\uff1b\u6211\u5c06\u6d0b\u8471\u7ad9\u70b9\u7684URL\u53d1\u9001\u7ed9Alex\uff0c\u8fd9\u6837\u4ed6\u5c31\u53ef\u4ee5\u901a\u8fc7Tor\u6d4f\u89c8\u5668\u4e0b\u8f7d\u3002\u4e00\u65e6\u4ed6\u4e0b\u8f7d\u4e86\u5b83\uff0c\u6211\u5c31\u544a\u8bc9OnionShare\u201c\u505c\u6b62\u5171\u4eab\u201d\uff0c\u8fd9\u4f1a\u5173\u95ed\u6d0b\u8471\u7f51\u7ad9\uff0c\u4ece\u7f51\u7edc\u4e0a\u5220\u9664\u6587\u4ef6\u3002\n(\u6700\u540e\uff0cAlex\u751a\u81f3\u6ca1\u6709\u5728Reply All\u7684\u5e74\u7ec8\u7ed3\u5c40\u4e2d\u4f7f\u7528\u6211\u7684\u97f3\u9891\u3002(\u53f9\u606f\u3002)\u3002\n\u6211\u77e5\u9053\u5171\u4eab\u4e00\u4e2a\u6587\u4ef6\u8bf4\u6765\u8bdd\u957f\uff0c\u4f46\u8fd9\u662f\u5bf9\u672c\u5468\u5728\u7ebf\u4efb\u52a1\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u603b\u7ed3\u3002\u79d1\u6280\u5de8\u5934\u63d0\u4f9b\u7684\u670d\u52a1\u662f\u6709\u53d8\u901a\u529e\u6cd5\u7684\uff0c\u4f46\u5b83\u4eec\u9700\u8981\u989d\u5916\u7684\u7814\u7a76\u624d\u80fd\u627e\u5230\uff0c\u800c\u4e14\u5f80\u5f80\u66f4\u96be\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5728\u6211ixnay Google.com\u5e76\u610f\u8bc6\u5230DuckDuckGo\u662f\u7531AWS\u6258\u7ba1\u540e\uff0c\u6211\u6700\u7ec8\u6765\u5230\u4e86\u4e92\u8054\u7f51\u4e0a\u5947\u602a\u7684\u5730\u65b9\uff0c\u4f7f\u7528Ask.com(\u4ee5\u524d\u79f0\u4e3aAsk Jeeves)\u4f5c\u4e3a\u6211\u7684\u641c\u7d22\u5f15\u64ce\u3002\n\u4f46Ask.com\u4e0d\u4e00\u5b9a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u66ff\u4ee3\u54c1\uff1a\u5b83\u7684\u6240\u6709\u8005\u662f\u5a92\u4f53\u548c\u7ea6\u4f1a\u516c\u53f8\u5de8\u5934IAC\u3002\u6211\u521a\u521a\u4ea4\u6613\u4e86\u4e00\u5bb6\u5927\u516c\u53f8\uff0c\u8bd5\u56fe\u5c06\u6211\u7684\u641c\u7d22\u4e1a\u52a1\u8d27\u5e01\u5316\uff0c\u6362\u6210\u53e6\u4e00\u5bb6\u80fd\u529b\u8f83\u5f31\u7684\u516c\u53f8\u3002\n\u6709\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\u662f\u4ee4\u4eba\u6109\u5feb\u7684\uff1a\u6211\u53d1\u73b0\u6211\u7684\u8bfa\u57fa\u4e9a\u624b\u673a\u53ef\u4ee5\u64ad\u653e\u6536\u97f3\u673a\uff0c\u6240\u4ee5\u5f53\u6211\u8dd1\u6b65\u65f6\uff0c\u6211\u4f1a\u542cNPR\uff0c\u800c\u4e0d\u662f\u6211\u901a\u5e38\u7684\u9009\u62e9\uff1aSpotify\u3001\u64ad\u5ba2\u6216\u6709\u58f0\u8bfb\u7269\u3002\u6211\u8ba1\u5212\u53bb\u5357\u975e\u65c5\u884c\uff0c\u6700\u540e\u4e0e\u6211\u4e0d\u5f97\u4e0d\u6253\u7535\u8bdd\u6c42\u52a9\u7684\u65c5\u884c\u793e\u8fdb\u884c\u4e86\u6709\u8da3\u7684\u4ea4\u8c08\uff1b\u901a\u8fc7\u65c5\u884c\u793e\u9884\u8ba2\u66f4\u6602\u8d35\uff0c\u6548\u7387\u66f4\u4f4e\uff0c\u4f46\u8fd9\u662f\u552f\u4e00\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u65c5\u6e38\u9884\u8ba2\u7f51\u7ad9\u5bf9\u6211\u4e0d\u8d77\u4f5c\u7528\u3002\n\u4ee4\u4eba\u4e0d\u5feb\u7684\u662f\u6211\u7684\u8bfa\u57fa\u4e9a3310\u7684\u76f8\u673a\uff1b\u5b83\u62cd\u7684\u662f\u53ef\u6015\u7684\u3001\u9ed1\u6697\u7684\u7167\u7247\u3002\u6211\u6709\u4e00\u53f0\u65e7\u7684\u4f73\u80fd(Canon)\u70b9\u62cd\u6570\u7801\u76f8\u673a\uff0c\u4f46\u6211\u53d1\u73b0\u8fd9\u5468\u6211\u62cd\u7684\u7167\u7247\u4e0d\u591a-\u56e0\u4e3a\u6ca1\u6709Facebook\u548cInstagram\uff0c\u6211\u5c31\u6ca1\u6709\u5730\u65b9\u5206\u4eab\u8fd9\u4e9b\u7167\u7247\u3002\n\u6709\u65f6\u5019\u6211\u5c31\u662f\u627e\u4e0d\u5230\u6570\u7801\u66ff\u4ee3\u54c1\u3002\u6587\u83ab\u6ca1\u6709\u667a\u80fd\u624b\u673a\u5c31\u4e0d\u80fd\u5de5\u4f5c\uff0c\u6240\u4ee5\u6211\u4ed8\u94b1\u7ed9\u6211\u4eec\u7684\u4fdd\u59c6\u3002\u6211\u5f00\u59cb\u4f7f\u7528\u5b9e\u4f53\u65e5\u5386\u6765\u8bb0\u5f55\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u8bf4\u5230\u51fa\u884c\uff0c\u5927\u7406\u77f3\u5730\u56fe\u662f\u4e00\u4e2a\u9009\u62e9\uff0c\u4f46\u6211\u88ab\u754c\u9762\u641e\u7cca\u6d82\u4e86\uff0c\u6240\u4ee5\u6211\u575a\u6301\u53bb\u6211\u77e5\u9053\u7684\u5730\u65b9\uff0c\u4e70\u4e86\u4e00\u5f20\u5b9e\u7269\u5730\u56fe\u4f5c\u4e3a\u5907\u4efd\u3002\n\u6709\u4e00\u5929\uff0c\u5f53\u6211\u8c08\u5230\u6ca1\u6709\u5730\u56fe\u5e94\u7528\u7a0b\u5e8f\u7684\u9a7e\u9a76\u6709\u591a\u4e48\u56f0\u96be\u65f6\uff0c\u4e00\u4f4d\u6280\u672f\u4e13\u5bb6\u5bf9\u6211\u8bf4\uff1a\u201c\u8fd9\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u8bfa\u57fa\u4e9a\u66fe\u7ecf\u7528Navtech\u62e5\u6709\u4ee4\u4eba\u60ca\u53f9\u7684\u5bfc\u822a\u529f\u80fd\uff0c\u4f46\u540e\u6765\u4ed6\u4eec\u628a\u81ea\u5df1\u5356\u7ed9\u4e86\u5fae\u8f6f\u3002\u201d\n\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u867d\u7136\u5fae\u8f6f\u57282014\u5e74\u786e\u5b9e\u4ee572\u4ebf\u7f8e\u5143\u6536\u8d2d\u4e86\u8bfa\u57fa\u4e9a\u7684\u79fb\u52a8\u8bbe\u5907\u90e8\u95e8\uff0c\u4f46\u4e24\u5e74\u540e\uff0c\u5b83\u5c06\u8bfa\u57fa\u4e9a\u7684\u201c\u529f\u80fd\u624b\u673a\u8d44\u4ea7\u201d\u4ee53.5\u4ebf\u7f8e\u5143\u7684\u75db\u82e6\u51cf\u8bb0\u51fa\u552e\u7ed9\u4e86\u5bcc\u58eb\u5eb7(\u82f9\u679c\u5916\u5305\u6210\u540d\u7684\u5bcc\u58eb\u5eb7)\u548c\u4e00\u5bb6\u7531\u8bfa\u57fa\u4e9a\u524d\u9ad8\u7ba1\u6267\u638c\u7684\u82ac\u5170\u516c\u53f8HMD Global\u3002HMD Global\u73b0\u5728\u4f7f\u7528\u8bfa\u57fa\u4e9a\u7684\u201c\u77e5\u8bc6\u4ea7\u6743\u201d\uff0c\u5373\u54c1\u724c\u6765\u9500\u552e\u624b\u673a\u3002\u5927\u591a\u6570\u201c\u8bfa\u57fa\u4e9a\u201d\u624b\u673a\u90fd\u662fAndroid\u667a\u80fd\u624b\u673a\uff0c\u4f46\u4e5f\u6709\u4e00\u7cfb\u5217\u201c\u7ecf\u5178\u201d\u624b\u673a\uff0c\u5305\u62ec3310\uff0c\u5b83\u8fd0\u884c\u7684\u662f\u5bcc\u58eb\u5eb7\u5236\u9020\u7684\u4e00\u79cd\u540d\u4e3aFeatureOS\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u6211\u7684\u8bfa\u57fa\u4e9a3310\u4e0d\u662f\u4e00\u90e8\u79d1\u6280\u5de8\u5934\u7684\u624b\u673a\uff0c\u4f46\u5b83\u80af\u5b9a\u662f\u79d1\u6280\u5de8\u5934\u7684\u90bb\u5c45\u3002\n\u4e3a\u4e86\u627e\u51fa\u4e3a\u4ec0\u4e48HMD Global\u8fd8\u5728\u5356\u54d1\u673a\uff0c\u6211\u7ed9\u5b83\u5728\u9999\u6e2f\u7684\u9996\u5e2d\u4ea7\u54c1\u5b98Juho Sarvikas\u6253\u4e86\u4e2a\u7535\u8bdd\u3002\u8428\u7ef4\u5361\u65af\u544a\u8bc9\u6211\uff0c\u8be5\u516c\u53f8\u539f\u4ee5\u4e3a\u201c\u7ecf\u5178\u201d\u624b\u673a\u7684\u6838\u5fc3\u5e02\u573a\u5c06\u5728\u667a\u80fd\u624b\u673a\u4e0d\u90a3\u4e48\u6d41\u884c\u7684\u4e9a\u6d32\u548c\u975e\u6d32\uff0c\u4f46\u4ed6\u8bf4\uff0c\u8fd9\u4e9b\u8bbe\u5907\u5728\u7f8e\u56fd\u7684\u8868\u73b0\u51fa\u4eba\u610f\u6599\u5730\u597d\u3002\n\u201c\u6570\u5b57\u798f\u5229\u73b0\u5728\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u9886\u57df\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u5f53\u4f60\u60f3\u8981\u8fdb\u5165\u6212\u6bd2\u6a21\u5f0f\uff0c\u6216\u8005\u5982\u679c\u4f60\u60f3\u51cf\u5c11\u8054\u7cfb\uff0c\u6211\u4eec\u5e0c\u671b\u6210\u4e3a\u4e3a\u4f60\u63d0\u4f9b\u5de5\u5177\u5305\u7684\u516c\u53f8\u3002\u201d\n\u4ed6\u7b11\u7740\u8bf4\uff0c\u201c\u6211\u4ee5\u524d\u4ece\u6765\u6ca1\u6709\u8fd9\u4e48\u8bf4\u8fc7\uff0c\u4f46\u662f\u662f\u7684\u3002\u201d\n\u6211\u539f\u4ee5\u4e3a\u8fd9\u4e9b\u624b\u673a\u662f\u4e3a\u90a3\u4e9b\u60f3\u8ba9\u5b69\u5b50\u62e5\u6709\u624b\u673a\u7684\u7236\u6bcd\u51c6\u5907\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u8fde\u63a5\u793e\u4ea4\u5a92\u4f53\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u6e20\u9053\u3002\n\u6211\u91c7\u8bbf\u7684\u8bb8\u591a\u4eba\u90fd\u628a\u8fd9\u4e2a\u5b9e\u9a8c\u6bd4\u4f5c\u6570\u5b57\u7d20\u98df\u4e3b\u4e49\u3002\u6570\u5b57\u7d20\u98df\u8005\u4ee5\u4e0d\u9053\u5fb7\u4e3a\u7531\u62d2\u7edd\u67d0\u4e9b\u6280\u672f\u670d\u52a1\uff1b\u4ed6\u4eec\u6b67\u89c6\u4ed6\u4eec\u4f7f\u7528\u7684\u4ea7\u54c1\u4ee5\u53ca\u4ed6\u4eec\u6d88\u8d39\u548c\u5171\u4eab\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u4fe1\u606f\u5c31\u662f\u529b\u91cf\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u516c\u53f8\u4f3c\u4e4e\u62e5\u6709\u4e00\u5207\u3002\n\u4ed6\u5c06\u52a0\u5165\u793e\u4ea4\u7f51\u7edc\u79f0\u4e3a\u5f15\u8bf1\u4ed6\u4eba\u843d\u5165\u201c\u76d1\u63a7\u9677\u9631\u201d\u7684\u201c\u8bf1\u9975\u201d\u3002\n\u5f53\u6211\u9047\u5230\u8fd9\u79cd\u751f\u6d3b\u65b9\u5f0f\u7684\u5168\u804c\u5b9e\u8df5\u8005\u4e39\u5c3c\u5c14\u00b7\u5361\u6069\u00b7\u5409\u5c14\u83ab(Daniel Kahn Gillmor)\u65f6\uff0c\u4ed6\u662f\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df(ACLU)\u7684\u4e00\u540d\u6280\u672f\u4e13\u5bb6\uff0c\u5f53\u6211\u53d1\u73b0\u4ed6\u662f\u771f\u6b63\u7684\u7d20\u98df\u8005\u65f6\uff0c\u6211\u5e76\u4e0d\u5b8c\u5168\u60ca\u8bb6\u3002\u6211\u5bf9\u4ed6\u907f\u5f00\u79d1\u6280\u5de8\u5934\u7684\u505a\u6cd5\u611f\u5230\u60ca\u8bb6\uff1a\u4ed6\u6ca1\u6709\u624b\u673a\uff0c\u66f4\u559c\u6b22\u7528\u73b0\u91d1\u652f\u4ed8\u3002\n\u5409\u5c14\u83ab\u5728\u901a\u8fc7Jitsi\u804a\u5929\u65f6\u544a\u8bc9\u6211\uff1a\u201c\u6211\u4e3b\u8981\u62c5\u5fc3\u7684\u662f\u4eba\u4eec\u80fd\u591f\u8fc7\u4e0a\u4ed6\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u81ea\u4e3b\u5065\u5eb7\u7684\u751f\u6d3b\u3002\u201dJitsi\u662f\u4e00\u79cd\u5f00\u6e90\u89c6\u9891\u4f1a\u8bae\u670d\u52a1\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u7f51\u7edc\u6d4f\u89c8\u5668\u4e0a\u8fd0\u884c\u3002\u6ca1\u6709\u4f60\u5fc5\u987b\u4e0b\u8f7d\u7684\u4e13\u6709\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e5f\u4e0d\u9700\u8981\u4f60\u521b\u5efa\u8d26\u6237\u3002\nGillmor\u6258\u7ba1\u81ea\u5df1\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5e76\u907f\u5f00\u5927\u591a\u6570\u793e\u4ea4\u5a92\u4f53\u7f51\u7edc(\u4ed6\u5bf9Github\u548cSourceforge\u4f8b\u5916\uff0c\u56e0\u4e3a\u4ed6\u662f\u4e00\u4e2a\u5f00\u6e90\u5f00\u53d1\u4eba\u5458\uff0c\u5e0c\u671b\u4e0e\u4ed6\u4eba\u5171\u4eab\u4ed6\u7684\u4ee3\u7801)\u3002\u4ed6\u5c06\u52a0\u5165\u793e\u4ea4\u7f51\u7edc\u79f0\u4e3a\u5f15\u8bf1\u4ed6\u4eba\u843d\u5165\u201c\u76d1\u63a7\u9677\u9631\u201d\u7684\u201c\u8bf1\u9975\u201d\u3002\n\u5409\u5c14\u83ab\u8ba4\u4e3a\uff0c\u5982\u679c\u4eba\u4eec\u4e0d\u88ab\u65e5\u76ca\u63a7\u5236\u4fe1\u606f\u6d41\u7684\u516c\u53f8\u8fdb\u884c\u6570\u636e\u6316\u6398\u548c\u8d27\u5e01\u5316\uff0c\u4ed6\u4eec\u7684\u751f\u6d3b\u4f1a\u66f4\u597d\u3002\n\u4ed6\u8bf4\uff1a\u201c\u6211\u6709\u80fd\u529b\u4f5c\u51fa\u8fd9\u4e2a\u9009\u62e9\u3002\u4ed6\u544a\u8bc9\u6211\uff1a\u201c\u6211\u77e5\u9053\u5f88\u591a\u4eba\u90fd\u60f3\u7b7e\u5b57\uff0c\u4f46\u7531\u4e8e\u7ecf\u6d4e\u6216\u5b9e\u9645\u539f\u56e0\uff0c\u4ed6\u4eec\u4e0d\u80fd\u7b7e\u5b57\u3002\u201d\u201c\u6211\u4e0d\u60f3\u8ba9\u4eba\u89c9\u5f97\u6211\u5728\u8d23\u5907\u90a3\u4e9b\u6ca1\u6709\u505a\u51fa\u8fd9\u4e00\u9009\u62e9\u7684\u4eba\u3002\u201d\n\u800c\u4e14\u8fd9\u4e2a\u9009\u62e9\u80af\u5b9a\u662f\u8981\u4ed8\u51fa\u4ee3\u4ef7\u7684\u3002\u4ed6\u8bf4\uff1a\u201c\u4e8b\u60c5\u7684\u7ed3\u6784\u51b3\u5b9a\u4e86\u4eba\u4eec\u5728\u793e\u4ea4\u65b9\u9762\u53ef\u4ee5\u505a\u51fa\u7684\u51b3\u5b9a\u3002\u201d\u201c\u5c31\u50cf\u4f60\u6ca1\u6709(\u901a\u8fc7Facebook)\u88ab\u9080\u8bf7\u53c2\u52a0\u805a\u4f1a\u4e00\u6837\uff0c\u56e0\u4e3a\u4f60\u9009\u62e9\u4e0d\u6210\u4e3a\u76d1\u63a7\u7ecf\u6d4e\u7684\u4e00\u90e8\u5206\u3002\u201d\n\u5409\u5c14\u83ab\u6559\u6388\u6570\u5b57\u536b\u751f\u8bfe\u7a0b\uff0c\u4ed6\u8bd5\u56fe\u8ba9\u4eba\u4eec\u8003\u8651\u4ed6\u4eec\u7684\u9690\u79c1\u548c\u5b89\u5168\u3002\u4ed6\u901a\u5e38\u5728\u5f00\u8bfe\u65f6\u8be2\u95ee\u4eba\u4eec\u662f\u5426\u77e5\u9053\u4ed6\u4eec\u7684\u624b\u673a\u4f55\u65f6\u4e0e\u624b\u673a\u53d1\u5c04\u5854\u8fdb\u884c\u901a\u4fe1\u3002\u201c\u5927\u591a\u6570\u4eba\u8bf4\uff0c\u2018\u5f53\u6211\u4f7f\u7528\u5b83\u7684\u65f6\u5019\uff0c\u2019\u4f46\u7b54\u6848\u662f\uff0c\u2018\u53ea\u8981\u5b83\u5f00\u7740\uff0c\u2019\u201d\u4ed6\u8bf4\u3002\n\u4ed6\u5e0c\u671b\u4eba\u4eec\u5728\u4e3a\u5176\u4ed6\u4eba\u521b\u5efa\u6570\u636e\u8ddf\u8e2a\u65f6\u4e5f\u8981\u8003\u8651\u81ea\u5df1\u7684\u6570\u636e\u8ddf\u8e2a\uff0c\u6bd4\u5982\u5f53\u4e00\u4e2a\u4eba\u5c06\u4ed6\u4eec\u7684\u8054\u7cfb\u4eba\u4e0a\u4f20\u5230\u6280\u672f\u670d\u52a1\u65f6-\u4e0e\u90a3\u4e9b\u8054\u7cfb\u4eba\u53ef\u80fd\u4e0d\u60f3\u5171\u4eab\u7684\u670d\u52a1\u5171\u4eab\u4fe1\u606f\u3002\n\u4ed6\u8bf4\uff1a\u201c\u4e00\u65e6\u6570\u636e\u516c\u5f00\uff0c\u5b83\u53ef\u80fd\u4f1a\u4ee5\u6211\u4eec\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u88ab\u6ee5\u7528\u3002\u201d\n\u4f46\u4ed6\u8ba4\u4e3a\uff0c\u8fd9\u9700\u8981\u7684\u4e0d\u4ec5\u4ec5\u662f\u4e2a\u4eba\u7684\u884c\u52a8\u3002\u201c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u770b\u4f5c\u662f\u4e00\u4e2a\u96c6\u4f53\u884c\u52a8\u95ee\u9898\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u73af\u5883\u7684\u770b\u6cd5\u4e00\u6837\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u6211\u4eec\u7684\u793e\u4f1a\u7ed3\u6784\u5f88\u590d\u6742\uff0c\u5f88\u591a\u4eba\u90fd\u88ab\u56f0\u4f4f\u4e86\u3002\u5982\u679c\u4f60\u5fc5\u987b\u5728\u65f6\u95f4\u8868\u4e0a\u586b\u4e0a\u4e00\u6b3e\u53ea\u80fd\u5728iPhone\u6216Android\u4e0a\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u6700\u597d\u6709\u4e00\u6b3e\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u652f\u4ed8\u8d39\u7528\u3002\n\u5409\u5c14\u83ab\u5e0c\u671b\u7acb\u6cd5\u8005\u4ecb\u5165\uff0c\u4f46\u4ed6\u4e5f\u8ba4\u4e3a\u53ef\u4ee5\u901a\u8fc7\u63a8\u52a8\u50cf\u6211\u4eec\u5728\u7535\u8bdd\u53f7\u7801\u548c\u7535\u5b50\u90ae\u4ef6\u65b9\u9762\u7684\u4e92\u64cd\u4f5c\u7cfb\u7edf\u6765\u4ece\u6280\u672f\u4e0a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f60\u53ef\u4ee5\u7ed9\u4efb\u4f55\u4eba\u6253\u7535\u8bdd\uff1b\u4f60\u4e0d\u9700\u8981\u548c\u4ed6\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u7535\u8bdd\u8fd0\u8425\u5546\u3002\u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u53ef\u4ee5\u628a\u4f60\u7684\u7535\u8bdd\u53f7\u7801\u5e26\u5230\u4e0d\u540c\u7684\u8fd0\u8425\u5546(\u591a\u4e8f\u4e86\u7acb\u6cd5\u8005\u7684\u5e72\u9884)\u3002\n\u5f53\u516c\u53f8\u4e0d\u80fd\u5c06\u6211\u4eec\u9501\u5b9a\u5728\u4e13\u6709\u751f\u6001\u7cfb\u7edf\u4e2d\u65f6\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u66f4\u591a\u7684\u81ea\u7531\u3002\u4f46\u8fd9\u610f\u5473\u7740Facebook\u5c06\u4e0d\u5f97\u4e0d\u8ba9Pinterest\u7528\u6237\u5728\u5176\u7f51\u7ad9\u4e0a\u56de\u590d\u6d3b\u52a8\u3002\u82f9\u679c\u8fd8\u9700\u8981\u8ba9\u4f60\u4ee5Android\u7528\u6237\u7684\u8eab\u4efd\u4f7f\u7528Facetime\u3002\n\u6211\u7684\u670b\u53cb\u51ef\u8482\u662f\u4ece\u7ebd\u7ea6\u6765\u7684\uff1b\u6211\u4eec\u8ba1\u5212\u6709\u4e00\u5929\u665a\u4e0a\u5728\u6211\u5bb6\u9644\u8fd1\u7684\u4e00\u5bb6\u9910\u5385\u89c1\u9762\u5171\u8fdb\u665a\u9910\uff0c\u8fd9\u4ef6\u4e8b\u8bb0\u5728\u6211\u7684\u8eab\u4f53\u65e5\u5386\u4e0a\u3002\u5728\u6211\u4eec\u89c1\u9762\u7684\u90a3\u5929\u65e9\u4e0a\uff0c\u6211\u6536\u5230\u4e86\u5979\u7ed9\u6211\u7684Riseup\u8d26\u6237\u53d1\u6765\u7684\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u4e3b\u9898\u662f\u201c\u53d1\u751f\u4e86\u4ec0\u4e48\u201d\u3002\n\u51e0\u5929\u6765\uff0c\u51ef\u8482\u4e00\u76f4\u901a\u8fc7Signal\u7ed9\u6211\u53d1\u4fe1\u606f\uff0c\u4f46\u6211\u4e00\u76f4\u6ca1\u6709\u6536\u5230\uff0c\u56e0\u4e3aSignal\u662f\u7531AWS\u6258\u7ba1\u7684\u3002\u5f53\u5979\u6ca1\u6709\u6536\u5230\u6211\u7684\u6d88\u606f\u65f6\uff0c\u5979\u5411Gmail\u53d1\u9001\u4e86\u4e00\u5c01\u201c\u4f60\u6536\u5230\u6211\u7684\u77ed\u4fe1\u4e86\u5417\u201d\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5e76\u6536\u5230\u4e86\u6211\u7684\u79bb\u5f00\u6d88\u606f\uff0c\u5c06\u5979\u5f15\u5bfc\u5230\u6211\u7684Riseup\u8d26\u6237\u3002\n\u6211\u544a\u8bc9\u5979\u665a\u9910\u8fd8\u5728\u7ee7\u7eed\uff0c\u4f46\u8fd9\u63d0\u9192\u4e86\u5979\u79bb\u5f00\u8fd9\u4e9b\u670d\u52a1\u7684\u8d39\u7528\u3002\u6211\u53ef\u4ee5\u9009\u62e9\u9000\u51fa\uff0c\u4f46\u4eba\u4eec\u53ef\u80fd\u4e0d\u4f1a\u610f\u8bc6\u5230\u6211\u5df2\u7ecf\u79bb\u5f00\u4e86\uff0c\u6216\u8005\u53ef\u80fd\u4f1a\u5fd8\u8bb0\uff0c\u5373\u4f7f\u4ed6\u4eec\u77e5\u9053\u3002\n\u6709\u4e00\u5929\uff0c\u6211\u95ee\u6211\u7684\u4e08\u592b\u7279\u96f7\u5f17(Trevor)\uff0c\u4ed6\u62d2\u7edd\u548c\u6211\u4e00\u8d77\u505a\u8fd9\u4ef6\u4e8b\uff0c\u56e0\u4e3a\u4ed6\u6709\u201c\u4e00\u4efd\u771f\u6b63\u7684\u5de5\u4f5c\u201d\uff0c\u6211\u7684\u5b9e\u9a8c\u5bf9\u4ed6\u6765\u8bf4\u6700\u56f0\u96be\u7684\u662f\u4ec0\u4e48\u3002\u201c\u6211\u6c38\u8fdc\u4e0d\u77e5\u9053\u4f60\u662f\u5426\u4f1a\u56de\u590d\u6211\u7684\u77ed\u4fe1\uff0c\u201d\u4ed6\u8bf4\u3002\n\u201c\u4f60\u4ec0\u4e48\u610f\u601d\uff1f\u201d\u6211\u95ee\u4f60\u3002\u201c\u6709\u4ec0\u4e48\u6211\u6ca1\u6709\u56de\u5e94\u7684\uff1f\u201d\n\u201c\u6211\u7ed9\u4f60\u53d1\u4e86\u51e0\u6761\u4fe1\u53f7\uff0c\u201d\u7279\u96f7\u5f17\u8bf4\uff0c\u5fd8\u4e86\u6211\u5df2\u7ecf\u79bb\u5f00\u4e86\u3002\n\u8fd9\u4e2a\u8857\u533a\u63d0\u4f9b\u4e86\u6301\u7eed\u7684\u8c08\u8bdd\u7d20\u6750\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u66f4\u9891\u7e41\u5730\u8fdb\u884c\u5bf9\u8bdd\uff0c\u56e0\u4e3a\u5728\u793e\u4ea4\u805a\u4f1a\u4e0a\uff0c\u6211\u6ca1\u6709\u667a\u80fd\u624b\u673a\u53ef\u4ee5\u76ef\u7740\u770b\u3002\n\u5e38\u6625\u85e4\u76df\u6821\u7684\u4e00\u4f4d\u6559\u6388\u544a\u8bc9\u6211\uff0c\u4ed6\u7ecf\u5e38\u96c7\u4f63\u4e00\u540d\u8c37\u6b4c\u62e6\u622a\u5668\u3002\u4ed6\u8bf4\uff1a\u201c\u5f53\u6211\u7eb3\u7a0e\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u7981\u7528\u5b83\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u7f8e\u56fd\u56fd\u7a0e\u5c40\u7684\u7f51\u7ad9\u4e0a\u6709\u8c37\u6b4c\u5206\u6790\u3002\u201d\u201c\u8fd9\u6709\u70b9\u53ef\u6015\u3002\u201d\n35\u5c81\u4ee5\u4e0b\u7684\u4eba\u5bf9\u6ca1\u6709\u667a\u80fd\u624b\u673a\u7684\u751f\u6d3b\u5f88\u611f\u5174\u8da3(\u6709\u65f6\u8fd8\u4f1a\u5ac9\u5992)\uff1b35\u5c81\u4ee5\u4e0a\u7684\u4eba\u53ea\u662f\u770b\u8d77\u6765\u5f88\u6000\u65e7\u3002\n\u4e00\u5929\u665a\u4e0a\uff0c\u6211\u78b0\u89c1\u4e86\u4e92\u8054\u7f51\u6863\u6848\u9986\u7684\u521b\u59cb\u4eba\u5e03\u9c81\u65af\u7279\u00b7\u5361\u52d2\uff0c\u4ed6\u5f88\u9ad8\u5174\u542c\u5230\u8fd9\u4e2a\u8857\u533a\u7684\u6d88\u606f\u3002\u201c\u5f88\u96be\u6446\u8131\u79d1\u6280\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u4e00\u4f4d\u670b\u53cb\u521a\u521a\u544a\u8bc9\u6211\uff0c\u60f3\u4e70\u4e00\u53f0\u65e2\u4e0d\u667a\u80fd\u53c8\u6ca1\u6709\u9ea6\u514b\u98ce\u7684\u7535\u89c6\u3002\u90a3\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4ed6\u6700\u7ec8\u5f97\u5230\u4e86\u4e00\u53f027\u82f1\u5bf8\u7684(\u7535\u8111)\u663e\u793a\u5668\u3002\n\u6709\u65f6\u6211\u4eec\u4f1a\u9009\u62e9\u5c06\u79d1\u6280\u5e26\u5165\u6211\u4eec\u7684\u751f\u6d3b\uff0c\u4f46\u6709\u65f6\u5b83\u4f1a\u5f3a\u52a0\u4e8e\u6211\u4eec\u3002\u7535\u89c6\u5236\u9020\u5546\u5df2\u7ecf\u628a\u4ed6\u4eec\u7684\u4ea7\u54c1\u53d8\u6210\u4e86\u76d1\u89c6\u673a\u5668\uff0c\u53ef\u4ee5\u6536\u96c6\u6211\u4eec\u770b\u7684\u548c\u6ca1\u6709\u770b\u7684\uff0c\u6709\u65f6\u751a\u81f3\u6536\u96c6\u6211\u4eec\u8bf4\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u5927\u591a\u6570\u7535\u89c6\u73b0\u5728\u7684\u6837\u5b50\u3002\n\u8fd9\u5468\uff0c\u6211\u5b8c\u5168\u4e0d\u770b\u7535\u89c6\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u6709\u7ebf\u7535\u89c6\uff0c\u7f51\u7edc\u7535\u89c6\u4e5f\u4e0d\u662f\u4e00\u4e2a\u9009\u62e9\u3002\u6211\u5e76\u4e0d\u662f\u60f3\u8ba9\u8fd9\u4e2a\u5b9e\u9a8c\u6210\u4e3a\u201c\u62d2\u7edd\u6240\u6709\u6280\u672f\u201d--\u4f46\u5b83\u8fd8\u662f\u53d1\u751f\u4e86\uff0c\u5c3d\u7ba1\u6211\u6709\u8fd9\u6837\u7684\u610f\u56fe\u3002\n\u6211\u7684\u624b\u673a\u6700\u8ba9\u6211\u6cae\u4e27\u7684\u662f\u8fd9\u4e00\u70b9\u3002\u6211\u5f88\u60f3\u4f7f\u7528\u4e00\u6b3e\u79d1\u6280\u5de8\u5934\u7684\u514d\u8d39\u667a\u80fd\u624b\u673a\uff0c\u4f46\u5b83\u4eec\u8fd8\u6ca1\u6709\u771f\u6b63\u5546\u4e1a\u5316\u3002\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\uff0c\u4f60\u9700\u8981\u5728\u6280\u672f\u4e0a\u7cbe\u901a\uff0c\u5e76\u5728\u7279\u6b8a\u7684\u624b\u673a\u578b\u53f7\u4e0a\u5b89\u88c5\u4e00\u4e2a\u5b9a\u5236\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u968f\u7740Eelo\u548cPurism\u5373\u5c06\u63a8\u51fa\u5546\u4e1a\u4ea7\u54c1\uff0c\u8fd9\u79cd\u60c5\u51b5\u6709\u671b\u5f88\u5feb\u6539\u53d8\u3002\n\u5728\u8fc7\u53bb\uff0c\u6211\u4f1a\u8ba4\u4e3a\u50cf\u8fd9\u6837\u7684\u7406\u60f3\u4e3b\u4e49\u9879\u76ee\u6ce8\u5b9a\u8981\u5931\u8d25\uff0c\u4f46\u73b0\u5728\u4f3c\u4e4e\u5bf9\u79d1\u6280\u5de8\u5934\u5236\u9020\u7684\u53cd\u4e4c\u6258\u90a6\u6709\u4e86\u66f4\u9ad8\u7684\u8ba4\u8bc6\u3002\u65e0\u8bba\u6211\u5f80\u54ea\u91cc\u770b\uff0c\u6211\u90fd\u80fd\u770b\u5230\u5bf9\u53ef\u6015\u7684\u4e94\u4eba\u7684\u6279\u8bc4\u3002\n\u201c\u7f8e\u56fd\u7684\u79d1\u6280\u516c\u53f8\u662f\u81ea\u7531\u7684\u5de5\u5177\u8fd8\u662f\u63a7\u5236\u7684\u5de5\u5177\uff1f\u201d\n\u6211\u8ba4\u8bc6\u7684\u4e00\u4f4d\u4f5c\u5bb6\u5728\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\u4e0a\u53d1\u8868\u4e86\u4e00\u7bc7\u4e13\u680f\u6587\u7ae0\uff1a\u201c\u6068\u4e9a\u9a6c\u900a\uff1f\u8bd5\u7740\u5728\u6ca1\u6709\u5b83\u7684\u60c5\u51b5\u4e0b\u751f\u6d3b\u3002\u201c\u3002(\u5979\u5b9e\u9645\u4e0a\u6ca1\u6709\u5b83\u5c31\u6d3b\u4e0d\u4e0b\u53bb\u3002)\u3002CNBC\u7684\u4e00\u540d\u79d1\u6280\u8bb0\u8005\u900f\u9732\uff0c\u5979\u653e\u5f03Facebook\u548cInstagram\u957f\u8fbe\u4e09\u4e2a\u6708\u4e4b\u4e45\uff0c\u8fd9\u201c\u8ba9\u5979\u66f4\u5f00\u5fc3\u4e86\u3002\u201d\u54e5\u4f26\u6bd4\u4e9a\u5e7f\u64ad\u516c\u53f8(CBS)\u7684\u4e00\u540d\u8bb0\u8005\u8bd5\u56fe\u9000\u51fa\u8c37\u6b4c\uff0c\u4f46\u5931\u8d25\u4e86\u3002\u4e00\u4f4d\u526f\u4f5c\u5bb6\u8ba9\u6240\u6709\u7684\u5de8\u4eba\u90fd\u653e\u5f03\u4e00\u4e2a\u6708(\u4f46\u4e0d\u50cf\u6211\u90a3\u6837\u4e25\u683c)\u3002\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d(New York Times)\u5199\u9053\uff0c\u8ffd\u8e2a\u4eba\u4eec\u4f4d\u7f6e\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u89c4\u5f8b\u6027\u548c\u7cbe\u786e\u6027\u4ee4\u4eba\u9707\u60ca\u3002\n\u79d1\u6280\u5de8\u5934\u4eec\u4e3a\u6211\u4eec\u7684\u6570\u636e\u4ea4\u6613\u5960\u5b9a\u4e86\u6240\u6709\u7684\u57fa\u7840\u8bbe\u65bd\u3002\u4ed6\u4eec\u8ba9\u6211\u4eec\u5c06\u4fe1\u606f\u653e\u5165\u516c\u5171\u6863\u6848\uff0c\u5728\u53e3\u888b\u91cc\u643a\u5e26\u8ddf\u8e2a\u8bbe\u5907\uff0c\u5e76\u5c06\u5e94\u7528\u7a0b\u5e8f\u4e0b\u8f7d\u5230\u90a3\u4e9b\u79d8\u5bc6\u4ece\u4ed6\u4eec\u90a3\u91cc\u8679\u5438\u6570\u636e\u7684\u8ddf\u8e2a\u8bbe\u5907\u4e0a\u3002\n\u201c\u7f8e\u56fd\u7684\u79d1\u6280\u516c\u53f8\u662f\u81ea\u7531\u7684\u5de5\u5177\u8fd8\u662f\u63a7\u5236\u7684\u5de5\u5177\uff1f\u201d\u4e00\u4f4d\u52a0\u5dde\u653f\u5ba2\u95ee\u9053\u3002\n\u5b83\u5f25\u6f2b\u5728\u7a7a\u6c14\u4e2d\u3002\u957f\u671f\u4ee5\u6765\uff0c\u79d1\u6280\u5de8\u5934\u4eec\u56e0\u4f7f\u4e16\u754c\u66f4\u7d27\u5bc6\u5730\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u4f7f\u4fe1\u606f\u66f4\u5bb9\u6613\u83b7\u5f97\uff0c\u5e76\u4f7f\u5546\u4e1a\u66f4\u5bb9\u6613\u548c\u66f4\u4fbf\u5b9c\u800c\u5907\u53d7\u5c0a\u656c\u3002\u73b0\u5728\uff0c\u4ed6\u4eec\u7a81\u7136\u6210\u4e3a\u6124\u6012\u7684\u76ee\u6807\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5e2e\u52a9\u5ba3\u4f20\u548c\u9519\u8bef\u4fe1\u606f\u7684\u4f20\u64ad\uff0c\u4f7f\u6211\u4eec\u5371\u9669\u5730\u4f9d\u8d56\u4ed6\u4eec\u7684\u670d\u52a1\uff0c\u5e76\u5c06\u6211\u4eec\u7684\u4e2a\u4eba\u4fe1\u606f\u53d8\u6210\u76d1\u89c6\u7ecf\u6d4e\u7684\u8d27\u5e01\u3002\n\u4e16\u754c\u662f\u6709\u7f3a\u9677\u7684\uff0c\u4e0d\u7ba1\u516c\u5e73\u4e0e\u5426\uff0c\u79d1\u6280\u5de8\u5934\u8d8a\u6765\u8d8a\u591a\u5730\u53d7\u5230\u6307\u8d23\u3002\n\u54c8\u4f5b\u5546\u5b66\u9662(Harvard Business School)\u6559\u6388\u8096\u838e\u5a1c\u00b7\u7956\u535a\u592b(Shoshana Zuboff)\u7684\u4e00\u672c\u5173\u4e8e\u201c\u76d1\u89c6\u8d44\u672c\u4e3b\u4e49\u201d\u7684\u65b0\u4e66\u8ba4\u4e3a\uff0c\u4e3a\u4e86\u76c8\u5229\u800c\u5bf9\u6211\u4eec\u7684\u6570\u636e\u8fdb\u884c\u6781\u7aef\u7684\u6316\u6398\u548c\u64cd\u7eb5\uff0c\u6b63\u4f7f\u6211\u4eec\u6210\u4e3a\u4e0d\u53ef\u907f\u514d\u7684\u7ecf\u6d4e\u9a71\u52a8\u529b\u3002\nZuboff\u7684\u516c\u5173\u4eba\u5458\u7ed9\u4e86\u6211\u4e00\u672c\u9884\u89c8\u7248\u7684\u7535\u5b50\u4e66\uff0c\u6211\u771f\u7684\u5f88\u559c\u6b22\u5b83\uff0c\u4f46\u8fd9\u5468\u6211\u4e0d\u5f97\u4e0d\u628a\u5b83\u653e\u4e0b\uff0c\u56e0\u4e3a\u6211\u4e0d\u80fd\u5728\u6211\u7684Kindle\u4e0a\u9605\u8bfb\u5b83\u3002\u76f8\u53cd\uff0c\u6211\u5728\u8bfb\u4e00\u672c\u7eb8\u8d28\u4e66--\u4ea8\u5229\u00b7\u68ad\u7f57\u7684\u201c\u74e6\u5c14\u767b\u6e56\u201d\uff0c\u8fd9\u672c\u4e66\u662f\u6211\u4ece\u5df4\u8bfa\u4e66\u5e97\u8ba2\u8d2d\u7684\u3002\u5b83\u4e5f\u5145\u6ee1\u4e86\u8ba9\u6211\u4eec\u81ea\u5df1\u91cd\u65b0\u6c89\u6d78\u5728\u81ea\u7136\u4e16\u754c\u4e2d\uff0c\u4e0d\u8981\u592a\u9677\u5165\u73b0\u4ee3\u751f\u6d3b\u7684\u5206\u5fc3\u4e4b\u4e2d\u7684\u547c\u58f0\u3002\n\u4f46\u662f\uff0c\u56e0\u4e3a\u5b83\u51fa\u7248\u4e8e1854\u5e74\uff0c\u5b83\u8b66\u544a\u4eba\u4eec\u8fdc\u79bb\u5de5\u4f5c\u548c\u62a5\u7eb8\uff0c\u800c\u4e0d\u662f\u667a\u80fd\u8bbe\u5907\u548c\u5c4f\u5e55\u3002\n\u5173\u4e8e\u653f\u5e9c\u80fd\u5bf9\u8fd9\u4e00\u5207\u505a\u4e9b\u4ec0\u4e48\uff0c\u6211\u6253\u7535\u8bdd\u7ed9\u516c\u5f00\u5e02\u573a\u7814\u7a76\u6240(Open Markets Institute)\u7684\u7814\u7a76\u5458\u8389\u5a1c\u00b7\u6c57(Lina Khan)\uff0c\u5979\u5199\u4e86\u4e00\u7bc7\u8f70\u52a8\u4e00\u65f6\u7684\u8bba\u6587\uff0c\u9610\u8ff0\u4e86\u76d1\u7ba1\u4e9a\u9a6c\u900a\u5784\u65ad\u6743\u7684\u5fc5\u8981\u6027\u3002(\u81f3\u5c11\u4ece\u5b66\u672f\u6807\u51c6\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u90e8\u8f70\u52a8\u4e00\u65f6\u7684\u7535\u5f71\u3002)\u3002\n\u201c\u5982\u679c\u7528\u6237\u88ab\u544a\u77e5\u8bbf\u95ee\u7684\u8d39\u7528\u51e0\u4e4e\u662f\u5b8c\u5168\u76d1\u63a7\uff0c\u4ed6\u4eec\u4f1a\u540c\u610f\u5417\uff1f\u201d\n\u53ef\u6c57\u76ee\u524d\u5728\u7ebd\u7ea6\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66(Columbia University)\u83b7\u5f97\u5b66\u672f\u5956\u5b66\u91d1\uff0c\u5728\u90a3\u91cc\u5979\u6b63\u5728\u64b0\u5199\u66f4\u591a\u7684\u8bba\u6587\u3002\u53ef\u6c57\u6ca1\u6709Prime\u8d26\u6237\uff0c\u56e0\u6b64\u907f\u514d\u4f7f\u7528Gmail\u3002\u5c31\u5728\u6211\u6253\u7535\u8bdd\u7ed9\u5979\u4e4b\u524d\uff0c\u6211\u770b\u5230\u4e86\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d\u7684\u4e00\u4f4d\u89c6\u9891\u5236\u7247\u4eba\u53d1\u6765\u7684\u4e00\u6761\u63a8\u6587\uff0c\u5979\u5728\u6b7b\u4ea7\u540e\u906d\u5230\u4e86\u5a74\u513f\u5e7f\u544a\u7684\u8f70\u70b8\u3002\n\u5979\u5199\u9053\uff1a\u201c\u79d1\u6280\u516c\u53f8\u4eec\uff0c\u6211\u6073\u6c42\u4f60\u4eec\uff1a\u5982\u679c\u4f60\u4eec\u7684\u7b97\u6cd5\u8db3\u591f\u806a\u660e\uff0c\u80fd\u591f\u610f\u8bc6\u5230\u6211\u6000\u5b55\u4e86\uff0c\u6216\u8005\u6211\u5df2\u7ecf\u751f\u4e86\u5b69\u5b50\uff0c\u90a3\u4e48\u5b83\u4eec\u80af\u5b9a\u4e5f\u8db3\u591f\u806a\u660e\uff0c\u80fd\u591f\u610f\u8bc6\u5230\u6211\u7684\u5b69\u5b50\u6b7b\u4e86\uff0c\u5e76\u76f8\u5e94\u5730\u5411\u6211\u505a\u5e7f\u544a--\u6216\u8005\u53ef\u80fd\uff0c\u53ea\u662f\u53ef\u80fd\uff0c\u5b8c\u5168\u4e0d\u4f1a\u3002\u201d\u5979\u5728\u53c8\u4e00\u6b21\u63d0\u9192\u4eba\u4eec\u9690\u79c1\u4fb5\u72af\u5177\u6709\u771f\u6b63\u5371\u5bb3\u7684\u65f6\u5019\u5199\u9053\u3002\n\u6211\u5728\u901a\u8bdd\u5f00\u59cb\u65f6\u5411\u53ef\u6c57\u8bb2\u8ff0\u4e86\u8fd9\u4e2a\u6545\u4e8b\uff0c\u5e76\u8bf4\u8fd9\u79cd\u7c7b\u578b\u7684\u6124\u6012\u4f3c\u4e4e\u6b63\u5728\u4e0a\u5347\u3002\n\u201c\u79d1\u6280\u516c\u53f8\u81ea\u5df1\u7684\u884c\u52a8\u6b63\u5728\u4fc3\u4f7f\u6f6e\u6d41\u53d1\u751f\u9006\u8f6c\u3002\u8fd9\u662f\u4e00\u4e2a\u8fdf\u6765\u7684\u6e05\u7b97\uff0c\u4f46\u4f3c\u4e4e\u4ecd\u7136\u662f\u4e00\u4e2a\u6e05\u7b97\uff0c\u201c\u5979\u8bf4\u3002\u201c\u65e9\u5728\u5927\u591a\u6570\u7528\u6237\u610f\u8bc6\u5230\u4ed6\u4eec\u7684\u6570\u636e\u5f88\u6709\u4ef7\u503c\u4e4b\u524d\uff0c\u516c\u53f8\u5c31\u5f00\u59cb\u5c06\u7528\u6237\u6570\u636e\u8d27\u5e01\u5316\uff0c\u66f4\u4e0d\u7528\u8bf4\u88ab\u79c1\u4eba\u884c\u4e3a\u8005\u6536\u96c6\u4e86\u3002\u5982\u679c\u7528\u6237\u88ab\u544a\u77e5\u8bbf\u95ee\u7684\u8d39\u7528\u51e0\u4e4e\u662f\u5b8c\u5168\u76d1\u63a7\uff0c\u4ed6\u4eec\u4f1a\u540c\u610f\u5417\uff1f\u516c\u53f8\u4f1a\u88ab\u8feb\u63d0\u4f9b\u4e0d\u540c\u7684\u5546\u4e1a\u6a21\u5f0f\u5417\uff1f\n\u53ef\u6c57\u8ba4\u4e3a\uff0c\u6267\u6cd5\u8005\u9700\u8981\u53c2\u4e0e\u8fdb\u6765\uff0c\u4ee5\u9632\u6b62\u8fd9\u4e9b\u516c\u53f8\u4f7f\u7528\u53cd\u7ade\u4e89\u7b56\u7565\u6765\u4e3b\u5bfc\u5546\u4e1a\u683c\u5c40\uff0c\u5c31\u50cf\u653f\u5e9c\u5b98\u5458\u572890\u5e74\u4ee3\u9488\u5bf9\u5fae\u8f6f\u6240\u505a\u7684\u90a3\u6837\u3002\n\u5979\u8bf4\uff1a\u201c\u51e0\u5bb6\u5927\u578b\u79d1\u6280\u516c\u53f8\u5df2\u7ecf\u6536\u8d2d\u4e86\u7ade\u4e89\u5bf9\u624b\uff0c\u5e76\u901a\u8fc7\u63a0\u593a\u6027\u884c\u4e3a\u538b\u5236\u7ade\u4e89\u5bf9\u624b\u3002\u201d\u6700\u8fd1\uff0cFacebook\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\u5728\u7535\u5b50\u90ae\u4ef6\u4e2d\u8c08\u5230\u5207\u65ad\u5f53\u65f6\u75c5\u6bd2\u5f0f\u7684\u89c6\u9891\u670d\u52a1Vine\u8bbf\u95eeFacebook\u793e\u4ea4\u56fe\u7684\u9014\u5f84\uff0c\u8fd9\u4e00\u8bdd\u9898\u4e00\u76f4\u5728\u65b0\u95fb\u4e2d\u51fa\u73b0\u3002\u4ed6\u8bf4\uff1a\u201c\u4ed6\u4eec\u4ece\u4e8b\u7684\u505a\u6cd5\uff0c\u5728\u51e0\u5341\u5e74\u524d\u88ab\u5e7f\u6cdb\u8ba4\u4e3a\u662f\u5785\u65ad\u7684\u3002\u6211\u4eec\u9700\u8981\u53f8\u6cd5\u90e8\u3001\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u6216\u5dde\u603b\u68c0\u5bdf\u957f\u8fdb\u884c\u8c03\u67e5\u3002\u201c\u3002\n\u6b27\u6d32\u5728c\u533a\u3002\n..", "note_en": "A couple of months ago, I set out to answer the question of whether it\u2019s possible to avoid the tech giants. Over the course of five weeks, I blocked  Amazon,  Facebook,  Google,  Microsoft, and  Apple one at a time, to find out how to live in the modern age without each one.\n  This article was originally published in 2019 and has been updated since its original publication.\n To end my experiment, I\u2019m going to see if I can survive blocking all five at once.\n Not only am I boycotting their products, a technologist named Dhruv Mehrotra designed a special network tool that prevents my devices from communicating with the tech giants\u2019 servers, meaning that ads and analytics from Google won\u2019t work, Facebook can\u2019t track me across the internet, and websites hosted by Amazon Web Services, or AWS, hypothetically won\u2019t load.\n I am using a Linux laptop made by a company named Purism and a Nokia feature phone on which I am relearning the lost art of  T9 texting.\n I don\u2019t think I could have done this cold turkey. I needed to wean myself off various services in the lead-up, like an alcoholic going through the 12 steps. The tech giants, while troubling in their accumulation of data, power, and societal control, do offer services that make our lives a hell of a lot easier.\n Earlier in the experiment, for example, I realised I don\u2019t know how to get in touch with people without the tech giants. Google, Apple, and Facebook provide my rolling Rolodex.\n So in preparation for the week, I export all my contacts from Google, which amounts to a shocking 8,000 people. I have also whittled down the over 1,500 contacts in my iPhone to 143 people for my Nokia, or the number of people I actually talk to on a regular basis, which is incredibly close to  Dunbar\u2019s number.\n I wind up placing a lot of phone calls this week, because texting is so annoying on the Nokia\u2019s numbers-based keyboard. I find people often pick up on the first ring out of concern; they\u2019re not used to getting calls from me.\n  On the first day of the block, I drive to work in silence because my rented Ford Fusion\u2019s \u201cSYNC\u201d entertainment system is powered by Microsoft. Background noise in general disappears this week because YouTube, Apple Music, and our Echo are all banned\u2014as are Netflix, Spotify, and Hulu, because they rely on AWS and the Google Cloud to get their content to users.\n The silence causes my mind to wander more than usual. Sometimes this leads to ideas for my half-finished zombie novel or inspires a new question for investigation. But more often than not, I dwell on things I need to do.\n Many of these things are a lot more challenging as a result of the experiment, such as when I record an interview with Alex Goldman of the podcast  Reply All about Facebook and its privacy problems.\n I live in California, and Alex is in New York; we would normally use Skype, but that\u2019s owned by Microsoft, so instead we talk by phone and I record my end with a handheld Zoom recorder. That works fine, but when it comes time to send the 386 MB audio file to Alex, I realise I have no idea how to send a huge file over the internet.\n My Gmail alternatives\u2014ProtonMail and Riseup\u2014tell me the file is too large; they tap out at 25 MB. Google Drive and Dropbox aren\u2019t options, Dropbox because it\u2019s hosted by Amazon\u2019s AWS and relies on Google for sign-in. Other file-sharing sites also rely on the tech giants for web hosting services.\n Before resorting to putting the file on a thumb drive and dropping it in a IRL mailbox, I call up my tech freedom guru, Sean O\u2019Brien, who heads Yale Law School\u2019s Privacy Lab. He also does marketing work for Purism, the company that makes my laptop. O\u2019Brien tries to avoid tech giants in favour of open source technologies, so I figure he might be able to help.\n O\u2019Brien directs me first to  Send.Firefox.com, an encrypted file-sharing service operated by Mozilla. But\u2026 it uses the Google Cloud, so it won\u2019t load. O\u2019Brien then sends me to  Share.Riseup.net, a file-sharing service from the same radical tech collective that is hosting my personal email, but it only works for files up to 50 MB.\n O\u2019Brien\u2019s last suggestion is  Onionshare, a tool for sharing files privately via the \u201cdark web,\u201d i.e. the part of the web that\u2019s not crawled by Google and requires the Tor browser to get to. I know this one actually. My friend Micah Lee, a technologist for the Intercept,  made it. Unfortunately, when I go to  Onionshare.org to download it, the website won\u2019t load.\n \u201cHah, yes,\u201d emails Micah when I ask about it. \u201cRight now it\u2019s hosted by AWS.\u201d\n As I encountered at  the beginning of this experiment, Amazon\u2019s most profitable business isn\u2019t retail; it\u2019s web hosting. Countless apps and websites rely on the digital infrastructure provided by AWS, and none of them are working for me this week.\n Micah suggests I download it from Github, but that\u2019s owned by Microsoft. Thankfully, O\u2019Brien tells me I can download the Onionshare program directly from Micah\u2019s server via command line on my Linux computer. He has to walk me through it step-by-step, but it works. I\u2019m able to run Onionshare, drop my file into it, creating a temporary onion site; I send the URL for the onionsite to Alex so he can download it via the Tor browser. Once he downloads it, I tell Onionshare to \u201cstop sharing,\u201d which takes the onion site down, erasing the file from the web.\n (In the end, Alex doesn\u2019t even wind up using my audio for Reply All\u2019s year-end finale. Sigh.)\n I realise that\u2019s a long story about sharing one file, but it\u2019s a nice summation of what online tasks are like this week. There are workarounds for services offered by the tech giants, but they take extra research to find and are often more difficult to use. I wind up in strange parts of the internet, using Ask.com (formerly known as Ask Jeeves) as my search engine, for example, after I ixnay Google.com and realise DuckDuckGo is hosted by AWS.\n But Ask.com is not necessarily a great replacement: it\u2019s owned by IAC, the media and dating company behemoth. I\u2019ve just traded one huge corporation seeking to monetise my searches for another, less competent one.\n Some strange things are delightful: I discover that my Nokia phone can play the radio, so when I go running, I listen to NPR instead of my usual go-tos: Spotify, a podcast, or an audiobook. I\u2019m planning  a trip to South Africa, and wind up in charming conversations with the travel agents I have to call for help; it\u2019s more costly and less efficient to book via a travel agency, but it\u2019s the only option because travel-booking websites aren\u2019t working for me.\n  Something not delightful is my Nokia 3310\u2019s camera; it takes terrible, dark photos. I have an old Canon point-and-shoot digital camera, but I find I don\u2019t take many photos this week\u2014because without Facebook and Instagram, I don\u2019t have anywhere to share them.\n  Sometimes I just can\u2019t find a digital replacement. Venmo won\u2019t work without a smartphone, so I pay our babysitter in cash. I start using a physical calendar to keep track of my schedule. When it comes to getting around,  Marble Maps is an option, but I\u2019m confused by the interface, so I stick to places I know, and buy a physical map as a back-up.\n \u201cIt\u2019s funny because Nokia used to have amazing navigation with Navtech,\u201d a technologist says to me one day when I\u2019m talking about how hard driving is without mapping apps, \u201cbut then they sold themselves to Microsoft.\u201d\n    But it turns out, while Microsoft did buy Nokia\u2019s mobile devices division for $US7.2 billion in 2014, it sold Nokia\u2019s \u201cfeature phone assets\u201d two years later for a painful write-down,  $US350 million, to Foxconn (of Apple outsourcing fame) and to HMD Global, a Finnish firm helmed by a former Nokia executive. HMD Global now uses Nokia\u2019s \u201cintellectual property,\u201d i.e. brand, to sell phones. Most \u201cNokia\u201d phones are Android smartphones, but there\u2019s a line of \u201cclassic\u201d phones, including the 3310, which run an operating system called FeatureOS made by Foxconn.\n My Nokia 3310 is not a tech giant phone, but it\u2019s certainly tech giant adjacent.\n To find out why the HMD Global is still selling dumbphones, I call its Hong Kong-based chief product officer, Juho Sarvikas. Sarvikas tells me that the company thought the core market for \u201cclassic\u201d phones would be in Asia and Africa, where smartphones are less prevalent, but he says the devices have done surprisingly well in America.\n \u201cDigital well-being is a concrete area now,\u201d he says. \u201cWhen you want to go into detox mode or if you want to be less connected, we want to be the company that has the toolkit for you.\u201d\n  He laughs, \u201cI\u2019ve never put it that way before, but yes.\u201d\n I had assumed that the phones were for parents who wanted their kids to have phones sans a pipeline to social media and apps.\n   Many people I talk to about this experiment liken it to digital veganism.  Digital vegans reject certain technology services as unethical; they discriminate about the products they use and the data they consume and share, because information is power, and increasingly a handful of companies seem to have it all.\n He refers to joining social networks as being \u201cbait\u201d that lures other people into \u201csurveillance traps.\u201d\n When I meet a full-time practitioner of the lifestyle, Daniel Kahn Gillmor, a technologist at the ACLU, I\u2019m not totally surprised to discover he\u2019s an actual vegan. I  am surprised by the lengths to which he\u2019s gone to avoid the tech giants: he doesn\u2019t have a mobile phone and prefers to pay for things with cash.\n \u201cMy main concern is people being able to lead autonomous healthy lives that they have control over,\u201d Gillmor tells me during a chat via  Jitsi, an open-source video-conferencing service that will work on any web browser. There\u2019s no proprietary app you have to download and it doesn\u2019t require you to create an account.\n  Gillmor hosts his own email and avoids most social media networks (he makes exceptions for Github and Sourceforge, because he\u2019s an open source developer who wants to share his code with others). He refers to joining social networks as being \u201cbait\u201d that lures other people into \u201csurveillance traps.\u201d\n Gillmor thinks people will have better lives if they aren\u2019t being data-mined and monetized by companies that increasingly control the flow of information.\n \u201cI have the capacity to make this choice. I know a lot of people would like to sign off but can\u2019t for financial reasons or practical reasons,\u201d he tells me. \u201cI don\u2019t want to come across as chastising people who don\u2019t make this choice.\u201d\n And there are definitely costs to the choice. \u201cHow things are structured determines the decisions people can make socially,\u201d he says. \u201cLike you didn\u2019t get invited to a party [via Facebook] because you chose not to be part of a surveillance economy.\u201d\n Gillmor teaches digital hygiene classes where he tries to get people to think about their privacy and security. He usually starts the class by asking people if they know when their phones are communicating with cell towers. \u201cMost people say, \u2018When I use it,\u2019 but the answer is, \u2018anytime it\u2019s on,\u2019\u201d he says.\n He wants people to think about their own data trails but also when they are creating data trails for other people, such as when a person  uploads their contacts to a technology service\u2014sharing information with the service that those contacts might not want shared.\n \u201cOnce the data is out there, it can be misused in ways we  don\u2019t expect,\u201d he says.\n But he thinks it\u2019s going to take more than actions by individuals. \u201cWe need to think of this as a collective action problem similar to how we think about the environment,\u201d he says. \u201cOur society is structured so that a lot of people are trapped. If you have to fill out your timesheet with an app only available on iPhone or Android, you better have one of those to get paid.\u201d\n Gillmor wants lawmakers to step in, but he also thinks it can be addressed technologically, by pushing for interoperable systems like we have for phone numbers and email. You can call anyone; you don\u2019t need to use the same phone carrier as them. And you can take your phone number to a different carrier if you want (thanks to  lawmaker intervention).\n When companies can\u2019t lock us into proprietary ecosystems, we have more freedom. But that means Facebook would have to let a Pinterest user RSVP for an event on its site. And Apple would need to let you Facetime an Android user.\n    My friend Katie is in town from New York; we have plans to meet for dinner one night at a restaurant near my house, an event marked on my physical calendar. On the morning we are to meet, I get an email from her to my Riseup account with the subject line, \u201cWhat is happening.\u201d\n Katie had been sending me messages for days via Signal, but I hadn\u2019t gotten them because Signal is hosted by AWS. When she didn\u2019t hear from me, she sent an \u201cARE YOU GETTING MY TEXTS\u201d email to Gmail, and got my away message directing her to my Riseup account.\n  I tell her dinner is still a go, but it\u2019s a reminder of the costs of leaving these services. I can opt out, but people might not realise I\u2019ve left, or might forget, even if they do know.\n One day, I ask my husband, Trevor, who declined to do the block with me because he has \u201ca real job,\u201d what the hardest part of my experiment is for him. \u201cI never know if you\u2019re going to respond to my texts,\u201d he says.\n \u201cWhat do you mean?\u201d I ask. \u201cWhat have I not responded to?\n \u201cI sent you some messages on Signal,\u201d Trevor says, having forgotten I am off it.\n    The block provides constant conversation fodder, and I find myself  in conversations more often because, at social gatherings, I don\u2019t have a smartphone to stare at.\n An Ivy League professor tells me he regularly employs a Google blocker. \u201cI had to disable it when I paid my taxes because they have Google Analytics on the IRS website,\u201d he says. \u201cIt was kind of horrifying.\u201d\n People under 35 are intrigued (and sometimes jealous) of life without a smartphone; people over 35 just seem nostalgic.\n One night, I run into Internet Archive founder Brewster Kahle, who is delighted to hear about the block. \u201cIt\u2019s hard to get away from technology,\u201d he says. \u201cA friend was just telling me about trying to get a TV that wasn\u2019t smart and didn\u2019t have a microphone. It was impossible. He wound up getting a 27-inch [computer] monitor.\u201d\n Sometimes we make the choice to bring technology into our lives, but sometimes it\u2019s forced upon us. Television makers have turned their products into surveillance machines that collect what we watch and what we don\u2019t watch and sometimes even what we say, and that\u2019s just how most TVs come now.\n This week, I stop watching TV altogether because we don\u2019t have cable and internet TV isn\u2019t an option. I hadn\u2019t meant to make this experiment a \u201crejection of all technology\u201d\u2014but it happens despite my intentions.\n I\u2019m most frustrated by this with my phone. I would love to be using a tech-giant free smartphone, but they aren\u2019t really commercially available yet. If you want one, you need to be technically savvy and install a custom operating system  on special phone models. That will hopefully change soon, with commercial offerings on the horizon from  Eelo and  Purism.\n In the past, I would have assumed that idealistic projects like these were doomed, but there seems to be a heightened awareness these days of the dystopia created by the tech giants. Everywhere I look, I see criticism of the Frightful Five.\n \u201cAre America\u2019s technology companies serving as instruments of freedom or instruments of control?\u201d\n A writer I know pens an op-ed in the New York Times : \u201c Hate Amazon? Try living without it.\u201d (She didn\u2019t actually live without it.) A CNBC tech reporter reveals she gave up  Facebook and Instagram for three months and that it \u201cmade her a lot happier.\u201d A CBS reporter tries and fails to  quit Google. A Vice writer gives  all the giants up for a month (but not as rigorously as I did). The New York Times  writes about apps tracking people\u2019s locations with horrifying regularity and granularity.\n The tech giants laid down all the basic infrastructure for our data to be trafficked. They got us to put our information into public profiles, to carry tracking devices in our pockets, and to download apps to those tracking devices that secretly siphon data from them.\n \u201cAre America\u2019s technology companies serving as instruments of freedom or instruments of control?\u201d  asks a Californian politician.\n It\u2019s in the air. The tech giants were long revered for making the world more connected, making information more accessible, and making commerce easier and cheaper. Now, suddenly, they are the targets of anger for assisting the spread of propaganda and misinformation, making us dangerously dependent on their services, and turning our personal information into the currency of a surveillance economy.\n The world is flawed, and, fairly or not, the tech titans are increasingly being blamed.\n A new book about \u201csurveillance capitalism\u201d by Harvard Business School professor Shoshana Zuboff argues that the extreme mining and manipulation of our data for profit is making an inescapable panopticon the driver of our economy.\n Zuboff\u2019s publicist sent me an advance copy as an e-book, and I\u2019ve really been enjoying it, but I have to put it down this week because I can\u2019t read it on my Kindle. Instead, I\u2019m reading a physical book\u2014Henry Thoreau\u2019s  Walden, which I ordered from Barnes &amp; Noble. It too is full of calls to re-immerse ourselves in the natural world and not get too caught up in the distractions of modern life.\n But, because it was published in 1854, it warns people to get away from work and newspapers rather than smart devices and screens.\n  For ideas about what the government can do about all this, I call Lina Khan, a fellow at the Open Markets Institute who wrote  a blockbuster paper on the need to regulate Amazon\u2019s monopoly power. (At least it\u2019s a blockbuster by academic standards.)\n \u201cIf users had been told that the price for access would be near-total surveillance, would they have agreed?\u201d\n Khan is in New York doing an academic fellowship at Columbia University where she is working on more papers. Khan doesn\u2019t have a Prime account and avoids Gmail. Right before I call her, I see a  tweet from a video producer at the  Washington Post who got bombarded with baby ads after she had a stillborn delivery.\n \u201cPlease, Tech Companies, I implore you: If your algorithms are smart enough to realise that I was pregnant, or that I\u2019ve given birth, then surely they can be smart enough to realise that my baby died, and advertise to me accordingly \u2014 or maybe, just maybe, not at all,\u201d she wrote in yet another reminder that privacy invasions have real harms.\n I recount the story to Khan at the beginning of our call and say that this type of anger seems to be on the rise.\n  \u201cThe tech companies\u2019 own actions are prompting the tide to turn. It is a belated reckoning, but it seems to be a reckoning nonetheless,\u201d she says. \u201cCompanies started monetizing user data far before most users even realised their data was valuable, let alone being collected by private actors. If users had been told that the price for access would be near-total surveillance, would they have agreed? Would companies have been forced to offer different business models?\u201d\n Khan thinks law enforcers need to get involved to keep these companies from using anti-competitive tactics to dominate the business landscape, as public officials did in the \u201890s  against Microsoft.\n \u201cSeveral of the big tech firms have acquired rivals and inhibited competitors through predatory conduct,\u201d she says, a topic that\u2019s been in the news recently with the exposure of Facebook emails  where CEO Mark Zuckerberg talks about cutting off then-viral video service Vine\u2019s access to the Facebook social graph. \u201cThey have engaged in practices that, a few decades ago, were widely considered monopolistic. We need investigations by the Department of Justice, the Federal Trade Commission, or state attorneys general.\u201d\n Europe is on the c\n......", "posttime": "2020-06-28 04:21:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u79d1\u6280,big", "title": "\u6211\u628a\u201c\u4e94\u5927\u201d\u79d1\u6280\u5de8\u5934\u4ece\u6211\u7684\u751f\u6d3b\u4e2d\u5254\u9664\u3002\u8fd9\u662f\u5730\u72f1(2019\u5e74)", "title_en": "I Cut the 'Big Five' Tech Giants from My Life. It Was Hell (2019)", "transed": 1, "url": "https://www.gizmodo.com.au/2019/02/i-cut-the-big-five-tech-giants-from-my-life-it-was-hell/", "via": "", "real_tags": ["\u79d1\u6280", "big"]}, {"category": "", "categoryclass": "", "imagename": "fcda3f7a9067e20162639e1e2b56e411.jpg", "infoid": 1008649, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Python\u8bed\u8a00\u7684\u521b\u5efa\u8005\u6b63\u5728\u8003\u8651\u4e00\u9879\u65b0\u7684\u63d0\u8bae\uff0c\u5373PEP622\uff0c\u8be5\u63d0\u8bae\u6700\u7ec8\u5c06\u4e3aPython\u5e26\u6765\u6a21\u5f0f\u5339\u914d\u8bed\u53e5\u8bed\u6cd5\u3002\u65b0\u7684\u6a21\u5f0f\u5339\u914d\u8bed\u53e5\u5c06\u4e3aPython\u7a0b\u5e8f\u5458\u63d0\u4f9b\u66f4\u5177\u8868\u73b0\u529b\u7684\u65b9\u5f0f\u6765\u5904\u7406\u7ed3\u6784\u5316\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u6c42\u52a9\u4e8e\u53d8\u901a\u65b9\u6cd5\u3002\n\u6a21\u5f0f\u5339\u914d\u662f\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u7684\u5171\u540c\u7279\u6027\uff0c\u4f8b\u5982C\u4e2d\u7684Switch/Case\u3002\u5b83\u5141\u8bb8\u6839\u636e\u7ed9\u5b9a\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\u7684\u503c\u6267\u884c\u591a\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u4e4b\u4e00\u3002\u867d\u7136Python\u7f3a\u4e4f\u7528\u4e8e\u6a21\u5f0f\u5339\u914d\u7684\u672c\u673a\u8bed\u6cd5\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528If/Elif/Else\u94fe\u6216\u5b57\u5178\u67e5\u627e\u6765\u6a21\u62df\u5b83\u3002\nPEP622\u63d0\u51fa\u4e86\u4e00\u79cd\u4f7f\u7528\u5339\u914d/\u5927\u5c0f\u5199\u8bed\u6cd5\u5c06\u8868\u8fbe\u5f0f\u4e0e\u591a\u79cd\u7c7b\u578b\u7684\u6a21\u5f0f\u8fdb\u884c\u5339\u914d\u7684\u65b9\u6cd5\uff1a\n\u5339\u914d\u5185\u5bb9\uff1a\u5927\u5c0f\u51990|1|2\uff1a\u6253\u5370(&#34\uff1b\u5c0f\u6570&#34\uff1b)\u5927\u5c0f\u5199[]|[_]\uff1a\u6253\u5370(&#34\uff1b\u77ed\u5e8f\u5217&#34\uff1b)\u5927\u5c0f\u5199\u5b57\u7b26\u4e32()|\u5b57\u8282()\uff1a\u6253\u5370(&#34\uff1b\u7c7b\u4f3c\u5b57\u7b26\u4e32&#34\uff1b)\u5927\u5c0f\u5199_\uff1a\u6253\u5370(&#34\uff1b\u5176\u4ed6&#34\uff1b)\u3002\n\u652f\u6301\u7684\u6a21\u5f0f\u5339\u914d\u7c7b\u578b\u5305\u62ec\u6587\u5b57\u3001\u540d\u79f0\u3001\u5e38\u91cf\u503c\u3001\u5e8f\u5217\u3001\u6620\u5c04(\u57fa\u672c\u4e0a\uff0c\u8868\u8fbe\u5f0f\u4e2d\u5b58\u5728\u952e-\u503c\u5bf9)\u3001\u7c7b\u3001\u4e0a\u8ff0\u7c7b\u578b\u7684\u6df7\u5408\uff0c\u6216\u8fd9\u4e9b\u52a0\u6761\u4ef6\u8868\u8fbe\u5f0f\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\u4efb\u4f55\u4e0d\u660e\u786e\u6216\u65e0\u6cd5\u89e3\u6790\u7684\u5339\u914d\u90fd\u5c06\u5728\u8fd0\u884c\u65f6\u5f15\u53d1\u5f02\u5e38\u3002\n\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u79f0\u4e3a__MATCH__\u534f\u8bae\u7684\u65b0\u534f\u8bae\u6765\u5904\u7406\u5339\u914d\u6d4b\u8bd5\u3002\u5982\u679c\u5bf9\u8c61\u5b9e\u73b0\u4e86__Match__\u65b9\u6cd5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u6d4b\u8bd5\u5b83\u662f\u5426\u4e0e\u7ed9\u5b9a\u7684\u7c7b\u6a21\u5f0f\u5339\u914d\uff0c\u5e76\u8fd4\u56de\u9002\u5f53\u7684\u54cd\u5e94\u3002\nPEP622\u8fd8\u5c06\u5141\u8bb8\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5668\u9a8c\u8bc1\u5339\u914d\u662f\u5426\u53ef\u4ee5\u88ab\u9a8c\u8bc1\u3002\u7c7b\u7684\u65b0@Seed\u4fee\u9970\u7b26\u5411\u7c7b\u578b\u68c0\u67e5\u5668\u6307\u793a\u76f8\u5173\u7c7b\u7684\u4efb\u4f55\u5b50\u7c7b\u90fd\u662f\u5728\u4e0e\u57fa\u7c7b\u76f8\u540c\u7684\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u3002\n\u4e4b\u524d\u589e\u52a0\u6a21\u5f0f\u5339\u914d\u7684PEP-2001\u5e74\u548c2006\u5e74\u5206\u522b\u63d0\u51fa\u7684PEP 275\u548cPEP 3103-\u7531\u4e8e\u7f3a\u4e4f\u6c11\u4f17\u652f\u6301\u800c\u88ab\u62d2\u7edd\u3002PEP3103\u662f\u7531Python\u7684\u521b\u5efa\u8005Guido van Rossum\u8d77\u8349\u7684\u3002\u65b0\u7684PEP\u7531van Rossum\u548c\u5176\u4ed6\u51e0\u4e2a\u4eba\u7f16\u5199\uff0c\u65e8\u5728\u4e3a\u5bf9\u8c61\u5339\u914d\u63d0\u4f9b\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684if/Elif/Else\u66ff\u4ee3\u3002\u4f5c\u8005\u6307\u51fa\uff0c\u8fd9\u4e2aPEP\u7684\u8bb8\u591a\u65b9\u9762\u90fd\u53d7\u5230\u4e86Rust\u548cScala\u4e2d\u6a21\u5f0f\u5339\u914d\u5de5\u4f5c\u65b9\u5f0f\u7684\u542f\u53d1\u3002\n\u6240\u6709\u8fd9\u4e9b\u5c06\u5982\u4f55\u5728\u5e55\u540e\u5b9e\u65bd\u4ecd\u6709\u5f85\u8ba8\u8bba\u3002PEP 622\u4e2d\u63d0\u51fa\u7684\u5b9e\u73b0\u5c06\u751f\u6210\u4e0eIF/ELIF/ELSE\u94fe\u76f8\u540c\u7684\u5b57\u8282\u7801\u5e8f\u5217\u3002\u8f83\u5927\u7684\u5f00\u5173/\u6848\u4f8b\u5757\u53ef\u80fd\u4f1a\u53d8\u5f97\u6027\u80fd\u8f83\u5dee\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6bcf\u4e2a\u6848\u4f8b\u4e2d\u5305\u542b\u4e86\u591a\u5c11\u6761\u4ef6\u903b\u8f91\u3002\u4f46\u662fPEP\u660e\u786e\u6307\u51fa\uff0c\u4ecd\u6709\u4efb\u4f55\u6570\u91cf\u7684\u65b9\u6cd5\u548c\u6027\u80fd\u4f18\u5316(\u4f8b\u5982\uff0c\u8bb0\u5fc6)\u4ecd\u5728\u8ba8\u8bba\u4e2d\u3002\n\u5373\u4f7fPEP\u6700\u7ec8\u88ab\u63a5\u53d7\uff0c\u5b83\u7684\u5f88\u591a\u65b9\u9762\u4e5f\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u6709\u4e00\u4e2a\u95ee\u9898\u53ef\u80fd\u4f1a\u53d7\u5230\u6311\u6218\uff0c\u90a3\u5c31\u662f\u4f7f\u7528Case_\uff1a\u800c\u4e0d\u662fElse\uff1a\u4f5c\u4e3aTHE SWITCH\u8bed\u53e5\u7684\u6700\u7ec8\u901a\u7528\u5b50\u53e5.Case_\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u7528\u4f5c\u4e34\u65f6\u53d8\u91cf\uff0c\u5355\u65b9\u9762\u8986\u76d6\u5176\u884c\u4e3a\u53ef\u80fd\u4f1a\u8ba9\u5f00\u53d1\u4eba\u5458\u671b\u800c\u5374\u6b65\u3002", "note_en": "The creators of the Python language are mulling a new proposal,\u00a0 PEP 622, that would finally bring a pattern matching statement syntax to Python. The new pattern matching statements would give Python programmers more expressive ways of handling structured data, without having to resort to workarounds.\n Pattern matching is a common feature of many programming languages, such as  switch/case in C. It allows one of a number of possible actions to be taken based on the value of a given variable or expression. While Python has lacked a native syntax for pattern matching, it has been possible to emulate it with\u00a0 if/elif/else chains or a dictionary lookup.\n  PEP 622 proposes a method for matching an expression against a number of kinds of patterns using a  match/case syntax:\n match something: case 0 | 1 | 2: print(&#34;Small number&#34;) case [] | [_]: print(&#34;A short sequence&#34;) case str() | bytes(): print(&#34;Something string-like&#34;) case _: print(&#34;Something else&#34;)\n Supported pattern match types include\u00a0literals, names, constant values, sequences, a mapping (basically, the presence of a key-value pair in the expression), a class, a mixture of the above, or any of those plus conditional expressions. Any matches that are ambiguous or impossible to resolve will throw an exception at runtime.\n Objects can handle match tests by way of a new protocol called the  __match__ protocol. If an object implements the  __match__ method, it can be used to test if it matches a given class pattern and return an appropriate response.\n PEP 622 would also allow static type checkers to verify that matches can be verified. A new  @sealed decorator for a class indicates to type checkers that any subclass of the class in question is defined in the same module as the base class.\n  Previous PEPs to add pattern matching \u2014\u00a0 PEP 275\u00a0and\u00a0 PEP 3103, proposed in 2001 and 2006 respectively \u2014 were turned down due to lack of popular support. PEP 3103 was drafted by Python creator Guido van Rossum. The new PEP, authored by van Rossum and several others, aims to provide regular expressions for object matching, rather than just a simple  if/elif/else\u00a0substitute. The authors note that many aspects of this PEP were inspired by how pattern matching works in Rust and Scala.\n  How all this would be implemented under the hood is still up for discussion. The implementation proposed in PEP 622 would generate the same bytecode sequences as an  if/elif/else chain. Larger  switch/case blocks could become less performant depending on how much conditional logic was included in each  case.\u00a0But the PEP makes it clear that any number of approaches and performance optimizations (e.g., memoization) are still on the table.\n  Even if the PEP ends up being accepted, a great deal about it might change. One issue that is likely to be challenged is the use of  case _:\u00a0instead of  else:\u00a0as a final catch-all clause for the\u00a0 switch\u00a0statement.\u00a0 _\u00a0is used as a temporary variable in many contexts, and overriding its behavior unilaterally could be a turnoff for developers.", "posttime": "2020-06-28 03:56:25", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "python,\u6a21\u5f0f\u5339\u914d", "title": "19\u5e74\u540e\uff0cPython\u53ef\u80fd\u7ec8\u4e8e\u5f97\u5230\u4e86\u6a21\u5f0f\u5339\u914d\u8bed\u6cd5", "title_en": "After 19 Years, Python May Finally Get a Pattern Matching Syntax", "transed": 1, "url": "https://www.infoworld.com/article/3563840/python-may-get-pattern-matching-syntax.html", "via": "", "real_tags": ["python", "\u6a21\u5f0f\u5339\u914d"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008646, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56db\u5e74\u591a\u524d\uff0c\u6211\u5f00\u59cb\u4e86Xi-Editor\u9879\u76ee\u3002\u73b0\u5728\u6211\u5df2\u7ecf\u628a\u5b83\u653e\u5728\u4e86\u6b21\u8981\u4f4d\u7f6e(\u5c3d\u7ba1\u5f00\u6e90\u793e\u533a\u4ecd\u6709\u4e00\u4e9b\u6d3b\u52a8)\u3002\u6700\u521d\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u975e\u5e38\u9ad8\u8d28\u91cf\u7684\u7f16\u8f91\u4f53\u9a8c\u3002\u4e3a\u6b64\uff0c\u8be5\u9879\u76ee\u82b1\u8d39\u4e86\u76f8\u5f53\u591a\u7684\u201c\u65b0\u9896\u70b9\u201d\uff1a\u4ee5Rust\u4e3a\u6838\u5fc3\u7684\u5b9e\u73b0\u8bed\u8a00\u3002\u4e00\u79cd\u7528\u4e8e\u6587\u672c\u5b58\u50a8\u7684\u7ef3\u72b6\u6570\u636e\u7ed3\u6784\u3002\u591a\u8fdb\u7a0b\u4f53\u7cfb\u7ed3\u6784\uff0c\u5177\u6709\u524d\u7aef\u548c\u63d2\u4ef6\uff0c\u6bcf\u4e2a\u63d2\u4ef6\u90fd\u6709\u81ea\u5df1\u7684\u8fdb\u7a0b\u3002\u5b8c\u5168\u91c7\u7528\u5f02\u6b65\u8bbe\u8ba1\u3002CRDT\u4f5c\u4e3a\u5e76\u53d1\u4fee\u6539\u7684\u673a\u5236\u3002\u6211\u4ecd\u7136\u76f8\u4fe1\u6709\u53ef\u80fd\u5728\u539f\u59cb\u8bbe\u8ba1\u7684\u57fa\u7840\u4e0a\u5efa\u7acb\u4e00\u4e2a\u9ad8\u8d28\u91cf\u7684\u7f16\u8f91\u5668\u3002\u4e0d\u8fc7\uff0c\u6211\u4ea6\u76f8\u4fe1\u8fd9\u4f1a\u662f\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u6240\u9700\u7684\u5de5\u4f5c\u8fdc\u8f83\u6240\u9700\u4e3a\u591a\u3002\u6211\u5df2\u7ecf\u5199\u4e86\u8fd9\u4e2a\u56de\u987e\u7684CRDT\u90e8\u5206\uff0c\u4f5c\u4e3a\u5bf9Github\u95ee\u9898\u7684\u8bc4\u8bba\u3002\u8fd9\u5728\u9ed1\u5ba2\u65b0\u95fb\u4e0a\u5f15\u53d1\u4e86\u5f88\u597d\u7684\u8ba8\u8bba\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u518d\u6b21\u6d89\u53caCRDT\uff0c\u4f46\u5c06\u91cd\u70b9\u653e\u5728\u7cfb\u7edf\u8bbe\u8ba1\u7684\u5176\u4ed6\u65b9\u9762\u3002\u8d77\u6e90\u4e60\u6700\u521d\u7684\u52a8\u673a\u6765\u81ea\u4e8e\u7814\u7a76Android\u6587\u672c\u6808\uff0c\u7279\u522b\u662f\u9762\u4e34\u4e24\u4e2a\u95ee\u9898\u3002\u5176\u4e00\uff0c\u5f53\u6587\u672c\u7f13\u51b2\u533a\u53d8\u5927\u65f6\uff0c\u6587\u672c\u7f16\u8f91\u5c06\u53d8\u5f97\u975e\u5e38\u6162\u3002\u7b2c\u4e8c\uff0cEditText\u5c0f\u90e8\u4ef6\u548c\u952e\u76d8(\u8f93\u5165\u6cd5\u7f16\u8f91\u5668)\u4e4b\u95f4\u7684\u63a5\u53e3\u4e2d\u5b58\u5728\u8bb8\u591a\u5e76\u53d1\u9519\u8bef\u3002\u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u7f6a\u9b41\u7978\u9996\u662fspan Watcher\u754c\u9762\uff0c\u518d\u52a0\u4e0a\u73b0\u4ee3\u952e\u76d8\u559c\u6b22\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u8bbe\u7f6e\u62fc\u5199\u66f4\u6b63\u8303\u56f4\u3002\u5f53\u60a8\u63d2\u5165\u4e00\u4e2a\u89d2\u8272\u65f6\uff0c\u6240\u6709\u8fde\u7eed\u7684\u8de8\u5ea6\u90fd\u4f1a\u5c06\u5b83\u4eec\u7684\u4f4d\u7f6e\u589e\u52a0\u4e00\u4e2a\uff0c\u7136\u540e\u60a8\u5fc5\u987b\u5c06\u6bcf\u4e2a\u8de8\u5ea6\u7684onspan Changed\u53d1\u9001\u7ed9\u6240\u6709\u7684\u89c2\u5bdf\u8005\u3002\u518d\u52a0\u4e0aSpans\u6570\u636e\u7ed3\u6784\u6709\u4e00\u4e2a\u6734\u7d20\u7684O(N)\u5b9e\u73b0\uff0c\u800c\u4e14\u6574\u4e2a\u8fc7\u7a0b\u662f\u4e8c\u6b21\u7684\uff0c\u751a\u81f3\u66f4\u7cdf\u3002\u5e76\u53d1\u9519\u8bef\u5f52\u7ed3\u4e3a\u8de8\u4e24\u4e2a\u4e0d\u540c\u7684\u8fdb\u7a0b\u540c\u6b65\u7f16\u8f91\uff0c\u56e0\u4e3a\u952e\u76d8\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0c\u800c\u4e0d\u662f\u627f\u8f7dEditText\u5c0f\u90e8\u4ef6\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u56e0\u6b64\uff0c\u5f53\u60a8\u53d1\u9001\u66f4\u65b0(\u4f8b\u5982\uff0c\u79fb\u52a8\u5149\u6807)\u800c\u53e6\u4e00\u4fa7\u7684\u6587\u672c\u540c\u65f6\u66f4\u6539\u65f6\uff0c\u5b83\u662f\u6307\u65e7\u4f4d\u7f6e\u8fd8\u662f\u65b0\u4f4d\u7f6e\u662f\u4e0d\u660e\u786e\u7684\u3002\u8fd9\u662f\u4ee5\u4e00\u79cd\u201c\u51e0\u4e4e\u6b63\u786e\u201d\u7684\u65b9\u5f0f\u5904\u7406\u7684\uff0c\u6709\u5185\u52a1\u66f4\u65b0\u7684\u8d85\u65f6\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6bd4\u8d5b\u7684\u673a\u4f1a\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u8868\u73b0\u662f\uff0c\u5728\u5305\u542b\u590d\u6742\u8868\u60c5\u7684\u6587\u672c\u4e2d\u6162\u6162\u6ed1\u52a8\u5149\u6807\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8868\u60c5\u7b26\u53f7\u7684\u95ea\u70c1\u3002\u8fd9\u4e9b\u95ee\u9898\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u4e3b\u7ebf\uff1a\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6587\u672c\u90fd\u6709\u5f88\u5c0f\u7684\u5dee\u5f02\uff0c\u4f46\u6570\u636e\u7ed3\u6784\u548c\u534f\u8bae\u4ee5\u4e0d\u592a\u7406\u60f3\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u5dee\u5f02\uff0c\u4ece\u800c\u5bfc\u81f4\u6027\u80fd\u548c\u6b63\u786e\u6027\u9519\u8bef\u3002\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u4e60\u4e00\u5f00\u59cb\u662f\u5bf9\u5904\u7406\u6587\u672c\u7f16\u8f91\u64cd\u4f5c\u7684\u201c\u6b63\u786e\u65b9\u5f0f\u201d\u7684\u63a2\u7d22\u3002\u5728\u5e76\u53d1\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u5e0c\u671b\u627e\u5230\u4e00\u79cd\u901a\u7528\u7684\u3001\u5f3a\u5927\u7684\u6280\u672f\u6765\u4fc3\u8fdb\u5206\u5e03\u5f0fISH\u7cfb\u7edf\u4e2d\u7684\u5e76\u53d1\u6587\u672c\u7f16\u8f91\u3002\u867d\u7136\u5927\u591a\u6570\u64cd\u4f5c\u8f6c\u6362\u6587\u732e\u90fd\u4fa7\u91cd\u4e8e\u591a\u4e2a\u7528\u6237\u534f\u4f5c\u7f16\u8f91\u6587\u6863\uff0c\u4f46\u6211\u5e0c\u671b\u5176\u4ed6\u6587\u672c\u64cd\u4f5c(\u5982\u5728\u6587\u672c\u8f93\u5165\u5b57\u6bb5\u4e0a\u5f3a\u5236\u6267\u884c\u4fe1\u7528\u5361\u683c\u5f0f\u7684\u5e94\u7528\u7a0b\u5e8f)\u4e5f\u9002\u7528\u4e8e\u4e00\u822c\u6846\u67b6\u3002\u90a3\u4e5f\u662f\u6211\u5f00\u59cb\u6c89\u8ff7\u4e8eRust\u7684\u65f6\u5019\uff0c\u6240\u4ee5\u5f00\u59cb\u5236\u4f5c\u4e00\u4e2a\u65b0\u7684\u7eff\u5730\u6587\u672c\u7f16\u8f91\u5f15\u64ce\u7684\u539f\u578b\u662f\u5f88\u81ea\u7136\u7684\u3002\u5982\u679c\u6ca1\u6709\u5411\u540e\u517c\u5bb9\u6027\u9650\u5236(Android\u4e2d\u7684\u4e00\u4e2a\u5927\u95ee\u9898)\uff0c\u60a8\u5c06\u5982\u4f55\u201c\u89e3\u6790\u6587\u672c\u201d\uff1f\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u77e5\u9053Operational Convert\u662f\u4e00\u79cd\u534f\u4f5c\u7f16\u8f91\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u4ee5\u590d\u6742\u548c\u6311\u5254\u8457\u79f0\u3002\u6211\u4e0d\u77e5\u9053OT\u548cCRDT\u7684\u5154\u5b50\u6d1e\u4f1a\u6709\u591a\u6df1\u3002\u8fd9\u4e2a\u6545\u4e8b\u7684\u5927\u90e8\u5206\u90fd\u662f\u5728\u4e4b\u524d\u94fe\u63a5\u7684CRDT\u8ba8\u8bba\u4e2d\u8bb2\u8ff0\u7684\u3002\u6a21\u5757\u5316\u8f6f\u4ef6\u7684\u8bf1\u60d1\u6709\u7740\u6781\u5176\u60a0\u4e45\u7684\u5386\u53f2\uff0c\u4eba\u4eec\u8bd5\u56fe\u5c06\u8f6f\u4ef6\u6784\u5efa\u4e3a\u901a\u8fc7\u67d0\u79cd\u6a21\u5757\u95f4\u901a\u4fe1\u7ed3\u6784\u8fde\u63a5\u7684\u53ef\u7ec4\u5408\u6a21\u5757\u3002\u5386\u53f2\u4e0a\u7684\u4f8b\u5b50\u5305\u62ecDCE/RPC\u3001Corba\u3001Bonobo\uff0c\u4ee5\u53ca\u6700\u8fd1\u7684\u6c99\u5c18\u66b4\u548cFuchsia Modular\u3002\u6709\u4e00\u4e9b\u90e8\u5206\u7684\u6210\u529f\uff0c\u5305\u62ecAndroid\u4e0a\u7684Binder\uff0c\u4f46\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4ecd\u7136\u662f\u4e00\u4e2a\u672a\u5b9e\u73b0\u7684\u613f\u666f\u3002(\u5173\u4e8eBinder\uff0c\u5b83\u662f\u4ece\u4e00\u4e2a\u66f4\u7406\u60f3\u5316\u7684\u613f\u666f\u6f14\u53d8\u800c\u6765\u7684\uff0c\u6211\u5f3a\u70c8\u63a8\u8350\u9605\u8bfb2006\u5e74\u5173\u4e8eOpenBinder\u7684\u91c7\u8bbf)\u3002\u5f53\u6211\u5f00\u59cb\u4e60\u7684\u65f6\u5019\uff0c\u6709\u8ff9\u8c61\u8868\u660e\u6211\u4eec\u5df2\u7ecf\u5230\u4e86\u90a3\u91cc\u3002\u5fae\u670d\u52a1\u5728Internet\u4e16\u754c\u53d8\u5f97\u6d41\u884c\u8d77\u6765\uff0c\u5f53\u7136\uff0c\u6240\u6709Web\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u8fb9\u754c\u3002\u5728Google\u5185\u90e8\uff0cGRPC\u8fd0\u884c\u5f97\u76f8\u5f53\u597d\uff0cChrome\u5185\u90e8\u7684\u8fdb\u7a0b\u5206\u79bb\u4e5f\u662f\u5982\u6b64\u3002\u5728Unix\u9886\u57df\uff0c\u7ec8\u7aef\u672c\u8eab\u5448\u73b0GUI(\u5982\u679c\u662f\u539f\u59cb\u7684\uff0c\u4f46\u83b7\u5f97\u4e86\u989c\u8272\u548c\u9f20\u6807\u7b49\u529f\u80fd)\u7684\u5386\u53f2\u7531\u6765\u5df2\u4e45\u3002\u8fd8\u6709Blit\u7684\u4f20\u7edf\uff0c\u5f53\u7136\uff0c\u8fd8\u6709\u65b0\u95fb\u548cX11\u3002\u6211\u8ba4\u4e3a\u6700\u6709\u529b\u7684\u6b63\u9762\u6a21\u578b\u4e4b\u4e00\u662f\u6570\u636e\u5e93/\u4e1a\u52a1\u903b\u8f91\u62c6\u5206\uff0c\u5b83\u53ef\u4ee5\u8bf4\u662f\u6d41\u7a0b\u5206\u79bb\u6700\u6210\u529f\u7684\u793a\u4f8b\u3002\u5728\u6b64\u6a21\u578b\u4e2d\uff0c\u6570\u636e\u5e93\u662fres", "note_en": "A bit more than four years ago I started the xi-editor project. Now I have placed it on the back burner (though there is still some activity from the open source community). The original goal was to deliver a very high quality editing experience. To this end, the project spent a rather large number of \u201cnovelty points\u201d: Rust as the implementation language for the core. A rope data structure for text storage. A multiprocess architecture, with front-end and plug-ins each with their own process. Fully embracing async design. CRDT as a mechanism for concurrent modification. I still believe it would be possible to build a high quality editor based on the original design. But I also believe that this would be quite a complex system, and require significantly more work than necessary. I\u2019ve written the CRDT part of this retrospective already, as a comment in response to a Github issue. That prompted good discussion on Hacker News. In this post, I will touch again on CRDT but will focus on the other aspects of the system design. Origins The original motivation for xi came from working on the Android text stack, and confronting two problems in particular. One, text editing would become very slow as the text buffer got bigger. Two, there were a number of concurrency bugs in the interface between the EditText widget and the keyboard (input method editor). The culprit of the first problem turned out to be the SpanWatcher interface, combined with the fact that modern keyboards like to put a spelling correction span on each word. When you insert a character, all the successive spans bump their locations up by one, and then you have to send onSpanChanged for each of those spans to all the watchers. Combined with the fact that the spans data structure had a naive O(n) implementation, and the whole thing was quadratic or worse. The concurrency bugs boil down to synchronizing edits across two different processes, because the keyboard is a different process than the application hosting the EditText widget. Thus, when you send an update (to move the cursor, for example) and the text on the other side is changing concurrently, it\u2019s ambiguous whether it refers to the old or new location. This was handled in an \u201calmost correct\u201d style, with timeouts for housekeeping updates to minimize the chance of a race. A nice manifestation of that is that swiping the cursor slowly through text containing complex emoji could cause flashes of the emoji breaking. These problems have a unifying thread: in both cases there are small diffs to the text, but then the data structures and protocols handled these diffs in a less than optimal way, leading to both performance and correctness bugs. To a large extent, xi started as an exploration into the \u201cright way\u201d to handle text editing operations. In the case of the concurrency bugs, I was hoping to find a general, powerful technique to facilitate concurrent text editing in a distributed-ish system. While most of the Operational Transformation literature is focused on multiple users collaboratively editing a document, I was hoping that other text manipulations (like an application enforcing credit card formatting on a text input field) could fit into the general framework. That was also the time I was starting to get heavily into Rust, so it made natural sense to start prototyping a new green-field text editing engine. How would you \u201csolve text\u201d if you were free of backwards compatibility constraints (a huge problem in Android)? When I started, I knew that Operational Transformation was a solution for collaborative editing, but had a reputation for being complex and finicky. I had no idea how deep the rabbithole would be of OT and then CRDT. Much of that story is told in the CRDT discussion previously linked. The lure of modular software There is an extremely long history of people trying to build software as composable modules connected by some kind of inter-module communication fabric. Historical examples include DCE/RPC, Corba, Bonobo, and more recently things like Sandstorm and Fuchsia Modular. There are some partial successes, including Binder on Android, but this is still mostly an unrealized vision. (Regarding Binder, it evolved from a much more idealistic vision, and I strongly recommend reading this 2006 interview about OpenBinder). When I started xi, there were signs we were getting there. Microservices were becoming popular in the Internet world, and of course all Web apps have a client/server boundary. Within Google, gRPC was working fairly well, as was the internal process separation within Chrome. In Unix land, there\u2019s a long history of the terminal itself presenting a GUI (if primitive, though gaining features such as color and mouse). There\u2019s also the tradition of Blit and then, of course, NeWS and X11. I think one of the strongest positive models was the database / business logic split, which is arguably the most successful example of process separation. In this model, the database is responsible for performance and integrity, and the business logic is in a separate process, so it can safely do things like crash and hang. I very much thought of xi-core as a database-like engine, capable of handling concurrent text modification much like a database handles transactions. Building software in such a modular way requires two things: first, infrastructure to support remote procedure calls (including serialization of the requests and data), and second, well-defined interfaces. Towards the end of 2017, I saw the goal of xi-editor as primarily being about defining the interfaces needed for large scale text editing, and that this work could endure over a long period of time even as details of the implementation changed. For the infrastructure, we chose JSON (about which more below) and hand-rolled our own xi-rpc layer (based on JSON-RPC). It turns out there are a lot of details to get right, including dealing with error conditions, negotiating when two ends of the protocol aren\u2019t exactly on the same version, etc. One of the bolder design decisions in xi was to have a process separation between front-end and core. This was inspired in part by Neovim, in which everything is a plugin, even GUI. But the main motivation was to build GUI applications using Rust, even though at the time Rust was nowhere near capable of native GUI. The idea is that you use the best GUI technology of the platform, and communicate via async pipes. One argument for process separation is to improve overall system reliability. For example, Chrome has a process per tab, and if the process crashes, all you get is an \u201cAw, snap\u201d without bringing the whole browser down. I think it\u2019s worth asking the question: is it useful to have the front-end continue after the core crashes, or the other way around? I think probably not; in the latter case it might be able to safely save the file, but you can also do that by frequently checkpointing. Looking back, I see much of the promise of modular software as addressing goals related to project management, not technical excellence. Ideally, once you\u2019ve defined an inter-module architecture, then smaller teams can be responsible for their own module, and the cost of coordination goes down. I think this type of project management structure is especially appealing to large companies, who otherwise find it difficult to manage larger projects. And the tax of greater overall complexity is often manageable, as these big companies tend to have more resources. JSON The choice of JSON was controversial from the start. It did end up being a source of friction, but for surprising reasons. The original vision was to write plug-ins in any language, especially for things like language servers that would be best developed in the language of that ecosystem. This is the main reason I chose JSON, because I expected there would be high quality implementations in every viable language. Many people complained about the fact that JSON escapes strings, and suggested alternatives such as MessagePack. But I knew that the speed of raw JSON parsing was a solved problem, with a number of extremely high performance implementations (simdjson is a good example). Even so, aside from the general problems of modular software as described above, JSON was the source of two additional problems. For one, JSON in Swift is shockingly slow. There are discussions on improving it but it\u2019s still a problem. This is surprising to me considering how important it is in many workloads, and the fact that it\u2019s clearly possible to write a high performance JSON implementation. Second, on the Rust side, while serde is quite fast and very convenient (thanks to proc macros), when serializing a large number of complex structures, it bloats code size considerably. The xi core is 9.3 megabytes in a Linux release build (debug is an eye-watering 88MB), and a great deal of that bloat is serialization. There is work to reduce this, including miniserde and nanoserde, but serde is still by far the most mainstream. I believe it\u2019s possible to do performant, clean JSON across most languages, but people should know, we\u2019re not there yet. The rope There are only a few data structures suitable for representation of text in a text editor. I would enumerate them as: contiguous string, gapped buffer, array of lines, piece table, and rope. I would consider the first unsuitable for the goals of xi-editor as it doesn\u2019t scale well to large documents, though its simplicity is appealing, and memcpy is fast these days; if you know your document is always under a megabyte or so, it\u2019s probably the best choice. Array of lines has performance failure modes, most notably very long lines. Similarly, many good editors have been written using piece tables, but I\u2019m not a huge fan; performance is very good when first opening the file, but degrades over time. My favorite aspect of the rope as a data structure is its excellent worst-case performance. Basically, there aren\u2019t any cases where it performs badly. And even the concern about excess copying because of its immutability might not be a real problem; Rust has a copy-on-write mechanism where you can mutate in-place when there\u2019s only one reference to the data. The main argument against the rope is its complexity. I think this varies a lot by language; in C a gapped buffer might be preferable, but I think in Rust, a rope is the sweet spot. A large part of the reason is that in C, low level implementation details tend to leak through; you\u2019ll often be dealing with a pointer to the buffer. For the common case of operations that don\u2019t need to span the gap, you can hand out a pointer to a contiguous slice, and things just don\u2019t get any simpler than that. Conversely, if any of the invariants of the rope are violated, the whole system will just fall apart. In Rust, though, things are different. Proper Rust style is for all access to the data structure to be mediated by a well-defined interface. Then the details about how that\u2019s implemented are hidden from the user. A good way to think about this is that the implementation has complexity, but that complexity is contained. It doesn\u2019t leak out. I think the rope in xi-editor meets that ideal. A lot of work went into getting it right, but now it works. Certain things, like navigating by line and counting UTF-16 code units, are easy and efficient. It\u2019s built in layers, so could be used for other things including binary editing. One of the best things about the rope is that it can readily and safely be shared across threads. Ironically we didn\u2019t end up making much use of that in xi-editor, as it was more common to share across processes, using sophisicated diff/delta and caching protocols. A rope is a fairly niche data structure. You really only want it when you\u2019re dealing with large sequences, and also doing a lot of small edits on them. Those conditions rarely arise outside text editors. But for people building text editing in Rust, I think xi-rope holds up well and is one of the valuable artifacts to come from the project. There\u2019s a good HN discussion of text editor data structures where I talk about the rope more, and can also point people to the Rope science series for more color. Async is a complexity multiplier We knew going in that async was going to be a source of complexity. The hope is that we would be able to tackle the async stuff once, and that the complexity would be encapsulated, much as it was for the rope data structure. The reality was that adding async made everything more complicated, in some cases considerably so. A particularly difficult example was dealing with word wrap. In particular, when the width of the viewport is tied to the window, then live-resizing the window causes text to rewrap continuously. With the process split between front-end and core, and an async protocol between them, all kinds of interesting things can go wrong, including races between editing actions and word wrap updates. More fundamentally, it is difficult to avoid tearing-style artifacts. One early relative success was implementing scrolling. The problem is that, as you scroll, the front-end needs to sometimes query the core to fetch visible text that\u2019s outside its cache. We ended up building this, but it took months to get it right. By contrast, if we just had the text available as an in-process data structure for the UI to query, it would have been quite straightforward. I should note that async in interactive systems is more problematic than the tamer variety often seen in things like web servers. There, the semantics are generally the same as simple blocking threads, just with (hopefully) better performance. But in an interactive system, it\u2019s generally possible to observe internal states. You have to display something, even when not all subqueries have completed. As a conclusion, while the process split with plug-ins is supportable (similar to the Language Server protocol), I now firmly believe that the process separation between front-end and core was not a good idea. Syntax highlighting Probably the high point of the project was the successful implementation of syntax highlighting, based on Tristan Hume\u2019s syntect library, which was motivated by xi. There\u2019s a lot more to say about this. First, TextMate / Sublime style syntax highlighting is not really all that great. It is quite slow, largely because it grinds through a lot of regular expressions with captures, and it is also not very precise. On the plus side, there is a large and well-curated open source collection of syntax definitions, and it\u2019s definitely \u201cgood enough\u201d for most use. Indeed, code that fools these syntax definitions (such as two open braces on the same line) is a good anti-pattern to avoid. It may be surprising just how much slower regex-based highlighting is than fast parsers. The library that xi uses, syntect, is probably the fastest open source implementation in existence (the one in Sublime is faster but not open source). Even so, it is approximately 2500 times slower for parsing Markdown than pulldown-cmark. And syntect doesn\u2019t even parse setext-style lists correctly, because Sublime style syntax definitions have to work line-at-a-time, and the line of dashes following a heading isn\u2019t available until the next line. These facts influenced the design of xi in two important ways. First, I took it as a technical challenge to provide a high-performance editing experience even on large files, overcoming the performance problems through async. Second, the limitations of the regex-based approach argued in favor of a modular plug-in architecture, so that as better highlighters were developed, they could be plugged in. I had some ambitions of creating a standard protocol that could be used by other editors, but this absolutely failed to materialize. For example, Atom instead developed tree-sitter. In any case, I dug in and did it. The resulting implementation is impressive in many ways. The syntax highlighter lives in a different process, with asynchronous updates so typing is never slowed down. It\u2019s also incremental, so even if changes ripple through a large file, it updates what\u2019s on the screen quickly. Some of the sophistication is described in Rope science 11. There was considerable complexity in the implementation. Text was synchronized between the main xi-core process and the plug-in, but for large files, the latter stores only a fixed-size cache; the cache protocol ended up being quite sophisticated. Updates were processed through a form of Operational Transformation, so if a highlighting result raced a text edit, it would never color an incorrect region (this is still very much a problem for language server annotations). As I said, syntax highlighting was something of a high point. The success suggested that a similar high-powered engineering approach could systematically work through the other problems. But this was not to be. As part of this work, I explored an alternative syntax highlighting engine based on parser combinators. If I had pursued that, the result would have been lightning fast, of comparable quality to the regex approach, and difficult to create syntax descriptions, as it involved a fair amount of manual factoring of parsing state. While the performance would have been nice to have, ultimately I don\u2019t think there\u2019s much niche for such a thing. If I were trying to create the best possible syntax highlighting experience today, I\u2019d adapt Marijn Haverbeke\u2019s Lezer. To a large extent, syntax highlighting is a much easier problem than many of the others we faced, largely because the annotations are a history-free function of the document\u2019s plain text. The problem of determining indentation may seem similar, but is dependent on history. And it basically doesn\u2019t fit nicely in the CRDT model at all, as that requires the ability to resolve arbitrarily divergent edits between the different processes (imagine that one goes offline for a bit, types a bit, then the language server comes back online and applies indentation). Another problem is that our plug-in interface had become overly specialized to solve the problems of syntax highlighting, and did not well support the other things we wanted to do. I think those problems could have been solved, but only with significant difficulty. There is no such thing as native GUI As mentioned above, a major motivation for the front-end / core process split was to support development of GUI apps using a polyglot approach, as Rust wasn\u2019t a suitable language for building GUI. The theory was that you\u2019d build the GUI using whatever libraries and language that was most suitable for the platform, basically the platform\u2019s native GUI, then interact with the Rust engine using interprocess communication. The strongest argument for this is probably macOS, which at the time had Cocoa as basically the blessed way to build GUI. Most other platforms have some patchwork of tools. Windows is particularly bad in this respect, as there\u2019s old-school (GDI+ based) win32, WinForms, WPF, Xamarin, and most recently WinUI, which nobody wants to use because it\u2019s Windows 10 only. Since xi began, macOS is now catching up in the number of official frameworks, with Catalyst and SwiftUI added to the roster. Outside the realm of official Apple projects, lots of stuff is shipping in Electron these days, and there are other choices including Qt, Flutter, Sciter, etc. When doing some performance work on xi, I found to my great disappointment that performance of these so-called \u201cnative\u201d UI toolkits was often pretty poor, even for what you\u2019d think of as the relatively simple task of displaying a screenful of text. A large part of the problem is that these toolkits were generally made at a time when software rendering was a reasonable approach to getting pixels on screen. These days, I consider GPU acceleration to be essentially required for good GUI performance. There\u2019s a whole other blog post in the queue about how some too\n......", "posttime": "2020-06-28 03:53:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8f91,editor,\u6587\u672c", "title": "XI-\u7f16\u8f91\u56de\u987e", "title_en": "Xi-Editor Retrospective", "transed": 1, "url": "https://raphlinus.github.io/xi/2020/06/27/xi-retrospective.html", "via": "", "real_tags": ["\u7f16\u8f91", "editor", "\u6587\u672c"]}]