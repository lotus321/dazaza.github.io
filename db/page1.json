[{"category": "", "categoryclass": "", "imagename": "0dcabe5c15b2660ce9f45877a3a49466.jpg", "infoid": 1008675, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e94\uff0c\u52a0\u5dde\u65b0\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u7ee7\u7eed\u6fc0\u589e\uff0c\u8981\u6c42\u8be5\u5dde\u91cd\u65b0\u8003\u8651\u91cd\u65b0\u5f00\u653e\u7ecf\u6d4e\u7684\u65b9\u6cd5\u7684\u547c\u58f0\u8d8a\u6765\u8d8a\u9ad8\uff0c\u4e00\u4e9b\u65e7\u91d1\u5c71\u6e7e\u533a\u7684\u53bf\u8868\u793a\uff0c\u4ed6\u4eec\u5c06\u6682\u505c\u8ba9\u67d0\u4e9b\u5173\u95ed\u7684\u4f01\u4e1a\u91cd\u65b0\u5f00\u59cb\u4e3a\u5ba2\u6237\u670d\u52a1\u7684\u8ba1\u5212\u3002\n\u6839\u636e\u8fd9\u4e00\u65b0\u95fb\u673a\u6784\u6c47\u7f16\u7684\u6570\u636e\uff0c\u52a0\u5dde\u5404\u5730\u7684\u516c\u5171\u536b\u751f\u90e8\u95e8\u5468\u4e94\u62a5\u544a\u4e865624\u4f8b\u65b0\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\uff0c\u4f7f\u8be5\u5dde\u81ea\u75ab\u60c5\u5f00\u59cb\u4ee5\u6765\u7684\u786e\u8bca\u75c5\u4f8b\u603b\u6570\u8fbe\u523020.61\u4e07\u4f8b\u3002\n\u8fd9\u4f4e\u4e8e\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u4ee4\u4eba\u77a0\u76ee\u7ed3\u820c\u7684\u6570\u5b57\uff0c\u5f53\u65f6\u5b98\u5458\u4eec\u5728\u5468\u4e00\u548c\u5468\u4e8c\u90fd\u62a5\u544a\u4e86\u5927\u7ea66500\u4f8b\u65b0\u75c5\u4f8b\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u7ee7\u8fd9\u4e24\u5929\u4e4b\u540e\uff0c\u8fd9\u662f\u52a0\u5dde\u5728\u4e00\u5929\u5185\u53d1\u751f\u7684\u7b2c\u4e09\u9ad8\u75c5\u4f8b\u6570\u91cf\u3002\n\u56e0\u6b64\uff0c\u8be5\u5dde7\u5929\u5e73\u5747\u65b0\u589e\u75c5\u4f8b\u5df2\u98d9\u5347\u81f35053\u4f8b\uff0c\u800c\u4e24\u5468\u524d\u4e3a3059\u4f8b-\u589e\u957f\u4e8665.2%\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u52a0\u5dde\u6269\u5927\u4e86\u68c0\u6d4b\u7684\u6e20\u9053\u3002\u7136\u800c\uff0c\u4ec5\u4ec5\u662f\u68c0\u6d4b\u7684\u589e\u52a0\u5e76\u4e0d\u80fd\u89e3\u91ca\u4e3a\u4ec0\u4e48\u65b0\u75c5\u4f8b\u6570\u91cf\u4e0a\u5347\u5f97\u5982\u6b64\u4e4b\u5feb\uff1a\u51a0\u72b6\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\u7684\u4eba\u7684\u767e\u5206\u6bd4\u4e5f\u4e00\u76f4\u5728\u589e\u52a0\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u56e0\u611f\u67d3\u75c5\u6bd2\u800c\u4f4f\u9662\u3002\n\u5168\u5dde\u5b98\u5458\u62a5\u544a\u79f0\uff0c\u5468\u4e94\u670961\u4eba\u6b7b\u4e8e\u65b0\u51a0\u80ba\u708e\u3002\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\uff0c\u8be5\u75c5\u6bd2\u603b\u5171\u593a\u8d70\u4e865865\u4eba\u7684\u751f\u547d\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6b7b\u4e8e\u51a0\u72b6\u75c5\u6bd2\u7684\u4eba\u6570\u5e76\u6ca1\u6709\u6fc0\u589e\uff1a\u5728\u8fc7\u53bb\u7684\u4e24\u5468\u91cc\uff0c\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u4e03\u5929\u5e73\u5747\u6b7b\u4ea1\u4eba\u6570\u7565\u6709\u4e0b\u964d\uff0c\u4ece64.4\u4eba\u4e0b\u964d\u523063.3\u4eba\u3002\n\u6d41\u884c\u75c5\u5b66\u5bb6\u8b66\u544a\u8bf4\uff0c\u6b7b\u4ea1\u662f\u75c5\u6bd2\u4f20\u64ad\u7684\u6ede\u540e\u6307\u6807\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u80fd\u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\u624d\u80fd\u53cd\u6620\u51fa\u4e0d\u65ad\u589e\u52a0\u7684\u75c5\u4f8b\u3002\u5065\u5eb7\u6570\u636e\u8fd8\u663e\u793a\uff0c\u5728\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\u7684\u4eba\u4e2d\uff0c\u5e74\u8f7b\u4eba\u7684\u6bd4\u4f8b\u8d8a\u6765\u8d8a\u9ad8\uff0c\u4ed6\u4eec\u6b7b\u4e8e\u65b0\u51a0\u80ba\u708e\u7684\u53ef\u80fd\u6027\u8f83\u5c0f\u3002\n\u65e7\u91d1\u5c71\u5df2\u7ecf\u6401\u7f6e\u4e86\u4e00\u9879\u8ba1\u5212\uff0c\u5141\u8bb8\u6c99\u9f99\u3001\u7406\u53d1\u5e97\u3001\u7eb9\u8eab\u5e97\u548c\u9009\u62e9\u5176\u4ed6\u4f01\u4e1a\u5f00\u4e1a\u3002\u9a6c\u6797\u53bf\u4ece\u5141\u8bb8\u91cd\u65b0\u5f00\u653e\u7684\u884c\u4e1a\u540d\u5355\u4e2d\u5220\u9664\u4e86\u67d0\u4e9b\u884c\u4e1a\uff0c\u5305\u62ec\u9152\u5e97\u548c\u5065\u8eab\u623f\u3002\u5eb7\u7279\u62c9\u79d1\u65af\u5854\u53bf\u5b98\u5458\u8bf4\uff0c\u4ed6\u4eec\u540c\u6837\u5728\u201c\u8bc4\u4f30\u8be5\u53bf\u662f\u5426\u5e94\u8be5\u7ee7\u7eed\u76ee\u524d\u7684\u91cd\u65b0\u5f00\u653e\u65f6\u95f4\u8868\u3002\u201d\n\u52a0\u5dde\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u4e2a\u770b\u5230\u65b0\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u60ca\u4eba\u589e\u52a0\u7684\u5dde-\u5176\u4ed6\u51e0\u4e2a\u5dde\u4e5f\u662f\u5982\u6b64\uff0c\u5bfc\u81f4\u5fb7\u514b\u8428\u65af\u5dde\u548c\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7684\u5b98\u5458\u672c\u5468\u6539\u5f26\u6613\u8f99\uff0c\u518d\u6b21\u5173\u95ed\u4e86\u9152\u5427\u3002\n\u867d\u7136\u52a0\u5dde\u5728\u91cd\u65b0\u5f00\u4e1a\u65b9\u9762\u6bd4\u5176\u4ed6\u5dde\u91c7\u53d6\u4e86\u66f4\u4fdd\u5b88\u7684\u884c\u52a8\uff0c\u4f46\u5065\u5eb7\u4e13\u5bb6\u8ba4\u4e3a\uff0c\u4e0d\u65ad\u4e0a\u5347\u7684\u75c5\u4f8b\u5e94\u8be5\u4f1a\u4fc3\u4f7f\u9886\u5bfc\u4eba\u653e\u6162\u751a\u81f3\u9006\u8f6c\u8fd9\u4e00\u8fc7\u7a0b\u3002\n\u5dde\u957f\u52a0\u6587\u00b7\u7ebd\u745f\u59c6(Gavin Newsom)\u6566\u4fc3\u8be5\u5dde\u53d1\u75c5\u7387\u6700\u9ad8\u7684\u5e1d\u56fd\u90e1(Imperial County)\u51a0\u72b6\u75c5\u6bd2\u70ed\u70b9\u5730\u533a\u7684\u5b98\u5458\u91cd\u65b0\u5b9e\u65bd\u5728\u5bb6\u5446\u7740\u7684\u547d\u4ee4\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u7ebd\u745f\u59c6\u5bf9\u5728\u5168\u5dde\u8303\u56f4\u5185\u53d6\u6d88\u91cd\u65b0\u5f00\u653e\u7684\u547c\u5401\u4e0d\u5c51\u4e00\u987e\u3002\n\u201c\u6211\u4eec\u7684\u5dde\u957f\u8bf4\u6211\u4eec\u4f1a\u8ddf\u8e2a\u8fd9\u4e9b\u6570\u636e\u3002\u8ddf\u8e2a\u6570\u636e\u7684\u60f3\u6cd5\u662f\uff0c\u5982\u679c\u6211\u4eec\u5f00\u59cb\u653e\u5f00\u4e00\u4e9b\u4e1c\u897f\uff0c\u770b\u5230\u75c5\u4f8b\u6ca1\u6709\u4e0a\u5347\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u653e\u5f00\u4e1c\u897f\uff0c\u201c\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821(UC Berkeley)\u4f20\u67d3\u75c5\u4e13\u5bb6\u3001\u540d\u8a89\u6559\u6388\u7ea6\u7ff0\u00b7\u65af\u6c83\u8328\u4f2f\u683c(John Swartzberg)\u8bf4\u3002\u201c\u4f46\u5982\u679c\u767e\u5206\u6bd4\u5f00\u59cb\u4e0a\u5347\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981\u6682\u505c\u4e00\u4e0b\uff0c\u91cd\u65b0\u8bc4\u4f30\u6211\u4eec\u6240\u5904\u7684\u4f4d\u7f6e\u3002\u4ed6\u73b0\u5728\u6ca1\u6709\u9075\u5faa\u8fd9\u4e2a\u8ba1\u5212\u3002\u201c", "note_en": "California\u2019s surge of new coronavirus cases continued on Friday, as calls grow for the state to reconsider its approach to reopening the economy, and some Bay Area counties said they would pause plans to let certain shuttered businesses start serving customers again.\n According to  data compiled by this news organization, public health departments across California reported 5,624 new coronavirus cases on Friday, bringing the state\u2019s total to 206,100 confirmed cases since the start of the pandemic.\n That\u2019s lower than the eye-popping figures from earlier in the week, when officials reported about 6,500 new cases on both Monday and Tuesday. Still, following those two days, it represents the third-highest number of cases California has seen in a single day.\n As a result, the state\u2019s seven-day average of new cases has shot up to 5,053, compared to 3,059 two weeks ago \u2014 an increase of 65.2 percent.\n  California has expanded access to testing over the past several months. However, increased testing alone does not explain why the number of new cases is rising so rapidly: The percentage of people testing positive for coronavirus has been increasing as well, and more people are being hospitalized with the virus.\n Statewide, officials reported 61 people died from COVID-19 on Friday. In all, the virus has claimed 5,865 lives in California.\n The death toll from coronavirus so far has not been surging: The seven-day average of deaths in California has declined slightly over the past two weeks, from 64.4 to 63.3.\n Epidemiologists warn that deaths are a lagging indicator of the virus\u2019 spread, meaning it could take longer for them to reflect increasing cases. Health data also shows a growing share of those testing positive for the virus are young people, who are less likely to die from COVID-19.\n   San Francisco has put on hold a plan to let salons, barbershops, tattoo parlors and select other businesses open. Marin County removed certain industries, including hotels and gyms, from the list of those it is allowing to reopen. And Contra Costa County officials said they are similarly \u201cevaluating whether the county should continue its current reopening timeline.\u201d\n California isn\u2019t alone in seeing alarming increases in new coronavirus cases \u2014 several other states are as well, leading officials in Texas and Florida this week to reverse course and  once again shut down bars.\n While California has moved more conservatively than other states to reopen businesses, health experts argue that rising cases  should prompt leaders to slow or even reverse that process.\n Gov. Gavin Newsom has urged officials in the coronavirus hot spot of Imperial County, which has the state\u2019s highest case rate, to reimpose stay-at-home orders. Still, Newsom has dismissed calls to roll back reopenings statewide.\n \u201cOur governor said we were going to follow the data. The idea of following the data is that if we start to liberalize things and see cases not going up, we can continue to liberalize things,\u201d said John Swartzberg, an infectious disease expert and professor emeritus at UC Berkeley. \u201cBut if the percentage starts going up, we need to at least pause and re-evaluate where we are. He\u2019s not following that plan right now.\u201d", "posttime": "2020-06-28 07:46:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,coronavirus,\u75c5\u4f8b", "title": "\u52a0\u5dde\u51a0\u72b6\u75c5\u6bd2\u6fc0\u589e\u7ee7\u7eed\uff1a\u53e6\u67095624\u4f8b\u62a5\u544a", "title_en": "California coronavirus surge continues: Another 5,624 cases reported", "transed": 1, "url": "https://www.eastbaytimes.com/2020/06/27/california-coronavirus-surge-continues-another-5624-cases-reported/", "via": "", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u4f8b"]}, {"category": "", "categoryclass": "", "imagename": "c3fb11627b8d5373c8dd6131c721f394.jpg", "infoid": 1008673, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53bf\u6cd5\u5b98\u6770\u592b\u00b7\u5e03\u5170\u5c3c\u514b\u81f4\u6770\u6590\u900a\u53bf\u516c\u6c11\u548c\u5a92\u4f53\u7684\u4fe1\uff1a\u5f53\u6211\u8f93\u5165\u5f3a\u5236\u53e3\u7f69\u547d\u4ee4\u65f6\uff0c\u6211\u610f\u8bc6\u5230\u4f1a\u6709\u4e00\u4e9b\u4eba\u4e0d\u559c\u6b22\u5b83\u3002\u6211\u6ca1\u6709\u60f3\u5230\u7684\u662f\uff0c\u7eaf\u7cb9\u7684\u4ec7\u6068\u548c\u4eb5\u6e0e\u7684\u4fe1\u606f\u4f1a\u8ba9\u6c34\u624b\u8138\u7ea2\u3002\u8fd9\u6ca1\u4ec0\u4e48\uff0c\u8fd9\u662f\u56e0\u5730\u5236\u5b9c\u7684\u3002\u6700\u4ee4\u6211\u5931\u671b\u7684\u662f\uff0c\u8bb8\u591a\u4eba\u575a\u6301\u8ba4\u4e3a\u6211\u7684\u547d\u4ee4\u76f4\u63a5\u5192\u72af\u4e86\u4ed6\u4eec\u7684\u5baa\u6cd5\u6743\u5229\u3002\u7f8e\u56fd\u3002", "note_en": "Letter from County Judge Jeff Branick to the Citizens and Media of Jefferson County:I recognized when I entered the mandatory mask order that there would be people who would not like it. What I didn&rsquo;t expect was the level of pure hatred and profanity laden messages that would make a sailor blush. That&rsquo;s okay, it comes with the territory. What has been most disappointing to me has been the level of insistence by many that my orders are a direct affront to their constitutional rights. The U. S.", "posttime": "2020-06-28 07:25:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "covid,letter,\u514b\u81f4", "title": "\u5fb7\u514b\u8428\u65af\u5dde\u53bf\u6cd5\u5b98\u5173\u4e8e\u4ed6\u7684Covid\u9762\u5177\u547d\u4ee4\u7684\u516c\u5f00\u4fe1", "title_en": "Open letter from a Texas county judge about his Covid mask order", "transed": 1, "url": "https://kfdm.com/news/local/judge-branick-writes-letter-to-citizens-explaining-mask-order", "via": "", "real_tags": ["covid", "letter", "\u514b\u81f4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008672, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6240\u4ee5\u6211\u4e2a\u4eba\u53ef\u4ee5\u5bf9\u6b64\u53d1\u8868\u610f\u89c1\u3002\u6211\u5bf9\u8fd9\u6b3e\u5e94\u7528\u8fdb\u884c\u4e86\u53cd\u5411\u5de5\u7a0b\uff0c\u5e76\u81ea\u4fe1\u5730\u8868\u793a\uff0c\u6211\u5bf9\u8fd9\u6b3e\u5e94\u7528\u7684\u64cd\u4f5c\u65b9\u5f0f(\u6216\u8005\u81f3\u5c11\u51e0\u4e2a\u6708\u524d\u7684\u64cd\u4f5c\u65b9\u5f0f)\u6709\u975e\u5e38\u6df1\u523b\u7684\u7406\u89e3\u3002\nTikTok\u662f\u4e00\u9879\u51e0\u4e4e\u4e0d\u52a0\u63a9\u9970\u7684\u793e\u4ea4\u7f51\u7edc\u6570\u636e\u6536\u96c6\u670d\u52a1\u3002\u5982\u679c\u6709API\u53ef\u4ee5\u83b7\u53d6\u6709\u5173\u60a8\u3001\u60a8\u7684\u8054\u7cfb\u4eba\u6216\u60a8\u7684\u8bbe\u5907\u7684\u4fe1\u606f.\u3002\u55ef\uff0c\u4ed6\u4eec\u6b63\u5728\u7528\u5b83\u3002\n\u7535\u8bdd\u786c\u4ef6(CPU\u7c7b\u578b\u3001\u8bfe\u7a0b\u6570\u91cf\u3001\u786c\u4ef6ID\u3001\u5c4f\u5e55\u5c3a\u5bf8\u3001dpi\u3001\u5185\u5b58\u4f7f\u7528\u91cf\u3001\u78c1\u76d8\u7a7a\u95f4\u7b49)\u3002\n\u4f60\u5b89\u88c5\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f(\u6211\u751a\u81f3\u770b\u5230\u8fc7\u4e00\u4e9b\u6211\u5df2\u7ecf\u5220\u9664\u7684\u5e94\u7528\u7a0b\u5e8f\u51fa\u73b0\u5728\u5b83\u4eec\u7684\u5206\u6790\u8d1f\u8f7d\u4e2d--\u53ef\u80fd\u4f1a\u7528\u4f5c\u7f13\u5b58\u503c\uff1f)\u3002\n\u8fd9\u6b3e\u5e94\u7528\u7684\u4e00\u4e9b\u53d8\u79cd\u5f53\u65f6\u542f\u7528\u4e86GPS ping\uff0c\u5927\u7ea6\u6bcf30\u79d2\u4e00\u6b21-\u5982\u679c\u60a8\u66fe\u7ecf\u5bf9\u5e16\u5b50IIRC\u8fdb\u884c\u4f4d\u7f6e\u6807\u8bb0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u542f\u7528\u8fd9\u4e00\u529f\u80fd\u3002\n\u4ed6\u4eec\u5728\u60a8\u7684\u8bbe\u5907\u4e0a\u8bbe\u7f6e\u4e86\u7528\u4e8e\u8f6c\u7801\u5a92\u4f53\u7684\u672c\u5730\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4f46\u8fd9\u5f88\u5bb9\u6613\u88ab\u6ee5\u7528\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u8eab\u4efd\u9a8c\u8bc1\u3002\n\u6240\u6709\u8fd9\u4e9b\u4e2d\u6700\u53ef\u6015\u7684\u90e8\u5206\u662f\uff0c\u4ed6\u4eec\u6b63\u5728\u505a\u7684\u5f88\u591a\u65e5\u5fd7\u8bb0\u5f55\u90fd\u662f\u53ef\u4ee5\u8fdc\u7a0b\u914d\u7f6e\u7684\uff0c\u9664\u975e\u60a8\u53cd\u8f6c\u4ed6\u4eec\u7684\u6bcf\u4e00\u4e2a\u672c\u5730\u5e93(\u9605\u8bfb\u6240\u6709\u7a0b\u5e8f\u96c6\u90fd\u5f88\u6709\u8da3\uff0c\u5047\u8bbe\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ed6\u4eec\u5b9a\u5236\u7684OLLVM\u5206\u652f\uff01)\u3002\u5e76\u4e14\u624b\u52a8\u68c0\u67e5\u6bcf\u4e2a\u5355\u72ec\u7684\u6a21\u7cca\u51fd\u6570\u3002\u4ed6\u4eec\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u4fdd\u62a4\u63aa\u65bd\uff0c\u53ef\u4ee5\u9632\u6b62\u4f60\u9006\u8f6c\u6216\u8c03\u8bd5\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u4f60\u6b63\u5728\u8bd5\u56fe\u5f04\u6e05\u695a\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a\u4f1a\u7565\u6709\u6539\u53d8\u3002\u5728Android\u7248\u672c\u4e0a\u4e5f\u6709\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\uff0c\u5141\u8bb8\u4e0b\u8f7d\u8fdc\u7a0bzip\u6587\u4ef6\u3001\u89e3\u538b\u7f29\u548c\u6267\u884c\u6240\u8ff0\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u6ca1\u6709\u7406\u7531\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u4f1a\u5408\u6cd5\u5730\u9700\u8981\u6b64\u529f\u80fd\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u4ed6\u4eec\u4f7f\u7528HTTPS\u7684\u65f6\u95f4\u751a\u81f3\u6700\u957f\u3002\u4ed6\u4eec\u5728HTTP rest API\u4e2d\u6cc4\u9732\u4e86\u7528\u6237\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u4ee5\u53ca\u7528\u4e8e\u5bc6\u7801\u91cd\u7f6e\u7684\u6b21\u8981\u7535\u5b50\u90ae\u4ef6\u3002\u4e0d\u8981\u5fd8\u8bb0\u7528\u6237\u7684\u771f\u5b9e\u59d3\u540d\u548c\u751f\u65e5\u3002\u51e0\u4e2a\u6708\u524d\uff0c\u5982\u679c\u4f60\u4e0b\u8f7d\u4e86\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u5c31\u53ef\u4ee5\u5168\u90e8\u516c\u5f00\u67e5\u770b\u4e86\u3002\n\u4ed6\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u75c5\u6bd2\u5f0f\u7684\u4f53\u9a8c\uff0c\u4ee5\u5438\u5f15\u4ed6\u4eec\u7559\u5728\u5e73\u53f0\u4e0a\u3002\u4f60\u7684\u7b2c\u4e00\u4e2aTikTok\u5e16\u5b50\u53ef\u80fd\u4f1a\u83b7\u5f97\u76f8\u5f53\u591a\u7684\u8d5e\uff0c\u65e0\u8bba\u5b83\u6709\u591a\u597d\u3002\u5047\u8bbe\u4f60\u901a\u8fc7\u4e86\u6700\u521d\u7684\u5ba1\u6838\u961f\u5217\uff0c\u5982\u679c\u8fd9\u8fd8\u662f\u4e00\u4ef6\u4e8b\u7684\u8bdd\u3002\u5927\u591a\u6570\u7528\u6237\u6700\u7ec8\u90fd\u4f1a\u8ffd\u9010\u8fd9\u6761\u9f99\u3002\u54e6\uff0c\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u8fd8\u6709\u4e00\u5927\u5806\u53ef\u4ee5\u76f4\u63a5\u63a5\u89e6\u5230\u5b69\u5b50\u4eec\u7684\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u8001\u4eba\uff0c\u6211\u4eb2\u773c\u770b\u5230(\u5e76\u62a5\u544a)\u4e86\u4e00\u4e9b\u975e\u5e38\u53ef\u7591\u7684\u4e1c\u897f\u300240-50\u5c81\u7684\u7537\u6027\u8ba98-10\u5c81\u7684\u5973\u5b69\u4e0e\u4ed6\u4eec\u4e00\u8d77\u5531\u5e26\u6709\u6027\u6697\u793a\u7684\u6b4c\u66f2\u8fdb\u884c\u4e8c\u91cd\u5531\u3002\u8fd9\u4e9b\u89c6\u9891\u90fd\u662f\u516c\u5f00\u53d1\u5e03\u7684\u3002TikTok\u5177\u6709\u76f4\u63a5\u6d88\u606f\u4f20\u9012\u529f\u80fd\u3002\n\u4e0d\u8fc7\uff0c\u4e8b\u60c5\u662f\u8fd9\u6837\u7684..\u3002\u4ed6\u4eec\u4e0d\u60f3\u8ba9\u4f60\u77e5\u9053\u4ed6\u4eec\u6536\u96c6\u4e86\u591a\u5c11\u5173\u4e8e\u4f60\u7684\u4fe1\u606f\uff0c\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u96c6\u4e2d\u5728\u4e00\u4e2a\u5730\u65b9\u7684\u5b89\u5168\u5f71\u54cd\u662f\u4ed6\u5988\u7684\u5de8\u5927\u7684\u3002\u4ed6\u4eec\u7528\u4e00\u79cd\u7b97\u6cd5\u52a0\u5bc6\u6240\u6709\u7684\u5206\u6790\u8bf7\u6c42\uff0c\u8be5\u7b97\u6cd5\u4f1a\u968f\u7740\u6bcf\u6b21\u66f4\u65b0\u800c\u6539\u53d8(\u81f3\u5c11\u5bc6\u94a5\u4f1a\u6539\u53d8)\uff0c\u8fd9\u6837\u4f60\u5c31\u770b\u4e0d\u5230\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\u4e86\u3002\u4ed6\u4eec\u8fd8\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u5982\u679c\u4f60\u5728DNS\u7ea7\u522b\u963b\u6b62\u4e0e\u4ed6\u4eec\u7684\u5206\u6790\u4e3b\u673a\u7684\u901a\u4fe1\uff0c\u4f60\u5c31\u6839\u672c\u65e0\u6cd5\u4f7f\u7528\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u3002\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6211\u5df2\u7ecf\u9006\u8f6c\u4e86Instagram\u3001Facebook\u3001Reddit\u548cTwitter\u5e94\u7528\u7a0b\u5e8f\u3002\u4ed6\u4eec\u6536\u96c6\u7684\u6570\u636e\u91cf\u4e0eTikTok\u76f8\u53bb\u751a\u8fdc\uff0c\u800c\u4e14\u4ed6\u4eec\u80af\u5b9a\u4e0d\u4f1a\u50cfTikTok\u90a3\u6837\u76f4\u63a5\u8bd5\u56fe\u9690\u85cf\u53d1\u9001\u7684\u5185\u5bb9\u3002\u8fd9\u5c31\u50cf\u628a\u4e00\u676f\u6c34\u6bd4\u4f5c\u6d77\u6d0b--\u5b83\u4eec\u6839\u672c\u65e0\u6cd5\u6bd4\u8f83\u3002\n\u6211\u662f\u4e00\u4e2a\u77e5\u9053\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u5de5\u4f5c\u7684\u4e66\u5446\u5b50\u3002\u79f0\u5176\u4e3a\u5e7f\u544a\u5e73\u53f0\u662f\u4e00\u79cd\u8f7b\u63cf\u6de1\u5199\u7684\u8bf4\u6cd5\u3002TikTok\u672c\u8d28\u4e0a\u662f\u9488\u5bf9\u513f\u7ae5\u7684\u6076\u610f\u8f6f\u4ef6\u3002\u4e0d\u8981\u4f7f\u7528TikTok\u3002\u4e0d\u8981\u8ba9\u4f60\u7684\u670b\u53cb\u548c\u5bb6\u4eba\u4f7f\u7528\u5b83\u3002\n\u7f16\u8f91\uff1a\u8fd9\u592a\u5938\u5f20\u4e86--\u62b1\u6b49\u6253\u9519\u4e86\uff0c\u6211\u5f88\u5feb\u5c31\u5199\u597d\u4e86\u8fd9\u6761\u8bc4\u8bba\u3002\u6211\u611f\u8c22\u91d1\u724c/\u5956\u52b1/\u7b49\u4eba\uff0c\u4f46\u8001\u5b9e\u8bf4\uff0c\u6211\u53ea\u662f\u5f88\u9ad8\u5174\u6211\u7ec8\u4e8e\u80fd\u591f\u628a\u8fd9\u4e9b\u4fe1\u606f\u653e\u5728\u4eba\u4eec\u9762\u524d(\u5373\u4f7f\u5b83\u53ef\u80fd\u4f1a\u8fc7\u65f6\u51e0\u4e2a\u6708)\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u540d\u5b89\u5168\u7814\u7a76\u5458\uff0c\u60f3\u770b\u770b\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u65b0\u7248\u672c\uff0c\u7ed9\u6211\u53d1\u4e2aPM\uff0c\u6211\u4f1a\u7ed9\u4f60\u6240\u6709\u7684\u4fe1\u606f\uff0c\u4f5c\u4e3a\u4f60\u505a\u4e8b\u60c5\u7684\u8df3\u8dc3\u70b9\u3002\n\u7f16\u8f913\uff1a\u66f4\u65b0\u4e86Penetrum\u94fe\u63a5\u5e76\u6dfb\u52a0\u4e86Zimperium\u7684\u62a5\u544a(\u9700\u8981\u60a8\u624b\u52a8\u7533\u8bf7)\u3002\n\u4e0a\u8ff0Penetrum\u94fe\u63a5\u4f3c\u4e4e\u5df2\u6d88\u5931\u3002\u5176\u4ed6\u4eba\u5728\u8fd9\u91cc\u94fe\u63a5\u4e86\u8fd9\u4efd\u62a5\u7eb8\uff1ahttps://penetrum.com/research", "note_en": "So I can personally weigh in on this. I reverse-engineered the app, and feel confident in stating that I have a very strong understanding for how the app operates (or at least operated as of a few months ago).\n TikTok is a data collection service that is thinly-veiled as a social network. If there is an API to get information on you, your contacts, or your device... well, they&#39;re using it.\n Phone hardware (cpu type, number of course, hardware ids, screen dimensions, dpi, memory usage, disk space, etc)\n Other apps you have installed (I&#39;ve even seen some I&#39;ve deleted show up in their analytics payload - maybe using as cached value?)\n   Some variants of the app had GPS pinging enabled at the time, roughly once every 30 seconds - this is enabled by default if you ever location-tag a post IIRC\n They set up a local proxy server on your device for &#34;transcoding media&#34;, but that can be abused very easily as it has zero authentication\n The scariest part of all of this is that much of the logging they&#39;re doing is remotely configurable, and unless you reverse every single one of their native libraries (have fun reading all of that assembly, assuming you can get past their customized fork of OLLVM!!!) and manually inspect every single obfuscated function. They have several different protections in place to prevent you from reversing or debugging the app as well. App behavior changes slightly if they know you&#39;re trying to figure out what they&#39;re doing. There&#39;s also a few snippets of code on the Android version that allows for the downloading of a remote zip file, unzipping it, and executing said binary. There is zero reason a mobile app would need this functionality legitimately.\n On top of all of the above, they weren&#39;t even using HTTPS for the longest time. They leaked users&#39; email addresses in their HTTP REST API, as well as their secondary emails used for password resets. Don&#39;t forget about users&#39; real names and birthdays, too. It was allllll publicly viewable a few months ago if you MITM&#39;d the application.\n They provide users with a taste of &#34;virality&#34; to entice them to stay on the platform. Your first TikTok post will likely garner quite a bit of likes, regardless of how good it is.. assuming you get past the initial moderation queue if thats still a thing. Most users end up chasing the dragon. Oh, there&#39;s also a ton of creepy old men who have direct access to children on the app, and I&#39;ve personally seen (and reported) some really suspect stuff. 40-50 year old men getting 8-10 year old girls to do &#34;duets&#34; with them with sexually suggestive songs. Those videos are posted publicly. TikTok has direct messaging functionality.\n Here&#39;s the thing though.. they don&#39;t want you to know how much information they&#39;re collecting on you, and the security implications of all of that data in one place, en masse, are fucking huge. They encrypt all of the analytics requests with an algorithm that changes with every update (at the very least the keys change) just so you can&#39;t see what they&#39;re doing. They also made it so you cannot use the app at all if you block communication to their analytics host off at the DNS-level.\n For what it&#39;s worth I&#39;ve reversed the Instagram, Facebook, Reddit, and Twitter apps. They don&#39;t collect anywhere near the same amount of data that TikTok does, and they sure as hell aren&#39;t outright trying to hide exactly whats being sent like TikTok is. It&#39;s like comparing a cup of water to the ocean - they just don&#39;t compare.\n tl;dr; I&#39;m a nerd who figures out how apps work for a job. Calling it an advertising platform is an understatement. TikTok is essentially malware that is targeting children. Don&#39;t use TikTok. Don&#39;t let your friends and family use it.\n  Edit: Well this blew up - sorry for the typos, I wrote this comment pretty quick. I appreciate the gold/rewards/etc people, but I&#39;m honestly just glad I&#39;m finally able to put this information in front of people (even if it may outdated by a few months).\n If you&#39;re a security researcher and want to take a look at the most recent versions of the app, send me a PM and I&#39;ll give you all of the information I have as a jumping point for you to do your thing.\n      Edit 3: Updated the Penetrum link + added Zimperium&#39;s report (requires you request it manually)\n The above Penetrum link appears to be gone. Someone else linked the paper here:  https://penetrum.com/research", "posttime": "2020-06-28 07:24:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "tiktiok,tbh,\u5e94\u7528\u7a0b\u5e8f", "title": "\u4e0d\u662f\u4ec0\u4e48\u65b0\u9c9c\u4e8b\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709tiktiok\uff0c\u5c31\u628a\u5b83\u6254\u6389\u5427\u3002", "title_en": "Not new news, but tbh if you have tiktiok, just get rid of it", "transed": 1, "url": "https://www.reddit.com/r/videos/comments/fxgi06/not_new_news_but_tbh_if_you_have_tiktiok_just_get/fmuko1m/", "via": "", "real_tags": ["tiktiok", "tbh", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "deb02f63cd1bc8da7511abab1f97718f.jpg", "infoid": 1008671, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u897f\u5317\u5927\u5b66\u827a\u672f\u4e0e\u79d1\u5b66\u6559\u6388\u3001\u7ecf\u6d4e\u5b66\u4e0e\u5386\u53f2\u5b66\u6559\u6388\u7f57\u4f2f\u7279\u00b7H\u00b7\u65af\u7279\u7f57\u8328(Robert H.Strotz)\u3002\n\u4e54\u6cbb\u00b7\u6885\u68ee\u5927\u5b66\u970d\u5c14\u4f2f\u7279\u00b7L\u00b7\u54c8\u91cc\u65af\u7ecf\u6d4e\u5b66\u6559\u6388\u3001\u9ed8\u5361\u7279\u65af\u4e2d\u5fc3\u4e3b\u5e2d\u3002\n\u601d\u60f3\u4e0e\u5de5\u4e1a\u5b66\u9662\u521b\u59cb\u4eba\uff0c\u300a\u601d\u7ef4\u4e60\u60ef\uff1a\u4ece\u82cf\u683c\u62c9\u5e95\u7814\u8ba8\u4f1a\u5230\u82cf\u683c\u62c9\u5e95\u5b9e\u8df5\u300b\u4f5c\u8005", "note_en": "Robert H. Strotz Professor of Arts &amp; Sciences and Professor of Economics &amp; History, Northwestern University\n  Holbert L. Harris Chair of Economics and chairman of the Mercatus Center, George Mason University\n                          Founder, Academy of Thought and Industry Author, The Habit of Thought: From Socratic Seminars to Socratic Practice", "posttime": "2020-06-28 07:05:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7814\u7a76,studies,\u6559\u6388", "title": "\u8fdb\u6b65\u7814\u7a76\u5b66\u6821", "title_en": "Progress Studies School", "transed": 1, "url": "https://progressstudies.school/", "via": "", "real_tags": ["\u7814\u7a76", "studies", "\u6559\u6388"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008670, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(\u5f6d\u535a\u793e)--\u82f9\u679c\u516c\u53f8\u3002\u5c06\u5f3a\u5236iPhone\u5e94\u7528\u7a0b\u5e8f\u5728\u8ffd\u8e2a\u4e4b\u524d\u83b7\u5f97\u7528\u6237\u8bb8\u53ef\uff0c\u8fd9\u5bf9\u4f9d\u8d56\u5e7f\u544a\u8d5a\u94b1\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u53ef\u80fd\u662f\u4e00\u4e2a\u91cd\u5927\u6253\u51fb\u3002\n\u82f9\u679c\u5728\u5468\u4e00\u7684\u865a\u62df\u5f00\u53d1\u8005\u5927\u4f1a\u4e0a\u5ba3\u5e03\u4e86\u8fd9\u4e00\u53d8\u5316\uff0c\u8fd9\u4e0e\u8be5\u516c\u53f8\u53bb\u5e74\u91c7\u53d6\u7684\u4e3e\u63aa\u7c7b\u4f3c\uff0c\u5f53\u65f6\u8be5\u516c\u53f8\u5f00\u59cb\u5728\u6bcf\u6b21\u5e94\u7528\u7a0b\u5e8f\u5c1d\u8bd5\u4f7f\u7528\u7528\u6237\u7684\u4f4d\u7f6e\u65f6\u5411\u7528\u6237\u53d1\u9001\u901a\u77e5\u3002\n\u82f9\u679c\u901a\u8fc7\u5411\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u63d0\u4f9b\u6bcf\u4e2a\u7528\u6237\u7684\u552f\u4e00\u53f7\u7801\u6765\u4fc3\u8fdb\u5bf9\u5176\u624b\u673a\u7684\u8ddf\u8e2a\uff0c\u5b89\u5168\u5021\u5bfc\u8005\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u8868\u793a\uff0c\u8fd9\u4e0e\u8be5\u516c\u53f8\u7ecf\u5e38\u53d1\u8868\u7684\u652f\u6301\u9690\u79c1\u7684\u58f0\u660e\u76f8\u77db\u76fe\u3002iPhone\u64cd\u4f5c\u7cfb\u7edf\u7684\u66f4\u65b0\u5e76\u6ca1\u6709\u5e9f\u9664\u8ddf\u8e2a\u7cfb\u7edf\uff0c\u4f46\u8ba9\u7528\u6237\u66f4\u6e05\u695a\u5730\u770b\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u7ed9\u4e86\u4ed6\u4eec\u66f4\u591a\u5173\u95ed\u5b83\u7684\u673a\u4f1a\u3002\u4ee5\u524d\uff0c\u63a7\u4ef6\u9690\u85cf\u5728\u624b\u673a\u7684\u8bbe\u7f6e\u83dc\u5355\u4e2d\u3002\n\u201c\u8003\u8651\u5230iPhone\u7684\u7528\u6237\u57fa\u7840\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u53d8\u5316\u3002\u5b83\u5f53\u7136\u6539\u5584\u4e86\u7528\u6237\u9690\u79c1\uff0c\u201c\u72ec\u7acb\u9690\u79c1\u7814\u7a76\u548c\u987e\u95eeLukasz Olejnik\u8bf4\u3002\u201c\u5728\u51e0\u4e4e\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u9047\u5230\u6b64\u7c7b\u5f39\u51fa\u7a97\u53e3\u7684\u666e\u901a\u7528\u6237\u90fd\u53ef\u80fd\u5f00\u59cb\u8be2\u95ee\u6709\u5173\u5176\u6570\u636e\u4f7f\u7528\u7684\u95ee\u9898\u3002\u8fd9\u5c06\u8feb\u4f7f\u8be5\u884c\u4e1a\u91cd\u65b0\u8003\u8651\u4e00\u4e9b\u6838\u5fc3\u5047\u8bbe\u3002\u201c\u3002\n\u5e94\u7528\u5185\u5e7f\u544a\u6bcf\u5e74\u4ea7\u751f\u6570\u5341\u4ebf\u7f8e\u5143\u7684\u6536\u5165\u3002\u5e7f\u544a\u6280\u672f\u516c\u53f8\u8fd8\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u5185\u7f6e\u7684\u8ddf\u8e2a\u6570\u636e\u5c06\u624b\u673a\u7528\u6237\u4e0e\u4ed6\u4eec\u7684\u5176\u4ed6\u8bbe\u5907\u8054\u7cfb\u8d77\u6765\uff0c\u5141\u8bb8\u5728\u591a\u4e2a\u5c4f\u5e55\u4e0a\u5411\u540c\u4e00\u4eba\u663e\u793a\u5e7f\u544a\uff0c\u5e76\u8861\u91cf\u8fd9\u4e9b\u6d88\u606f\u7684\u6709\u6548\u6027\u3002\n\u82f9\u679c\u5c06\u81ea\u5df1\u6807\u699c\u4e3a\u7528\u6237\u9690\u79c1\u7684\u634d\u536b\u8005\uff0c\u7279\u522b\u662f\u4e0e\u5176\u4ed6\u4f9d\u8d56\u5e7f\u544a\u7684\u79d1\u6280\u5de8\u5934Facebook Inc.\u76f8\u6bd4\u3002\u8fd8\u6709Alphabet Inc.\u7684\u8c37\u6b4c\u3002\u82f9\u679c\u4ece2017\u5e74\u5f00\u59cb\u9650\u5236\u5176Safari\u7f51\u7edc\u6d4f\u89c8\u5668\u7684\u8ddf\u8e2a\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u8c37\u6b4c\u8868\u793a\uff0c\u5728\u4e0e\u5e7f\u544a\u4e1a\u8fdb\u884c\u4e86\u4e24\u5e74\u7684\u78cb\u5546\u540e\uff0c\u5c06\u5bf9\u5176Chrome\u6d4f\u89c8\u5668\u91c7\u53d6\u540c\u6837\u7684\u505a\u6cd5\u3002", "note_en": "(Bloomberg) -- Apple Inc. will force iPhone apps to get permission from users before tracking them, dealing a potentially major blow to app developers who rely on advertisements to make money.\n The change, announced at Apple\u2019s virtual developer conference on Monday, is similar to a move the company made last year when it started sending notifications to users each time an app tried using their location.\n Apple facilitates tracking on its phones by providing app developers with unique numbers for each user, something security advocates have long said contradicts the company\u2019s frequent statements in support of privacy. The update to the iPhone\u2019s operating system doesn\u2019t do away with the tracking system, but makes it much more apparent to users and gives them more opportunities to turn it off. Previously, controls were buried in the phone\u2019s settings menu.\n \u201cConsidering the iPhone\u2019s user base, this is a very big change. It certainly improves user privacy,\u201d said Lukasz Olejnik, an independent privacy researcher and consultant. \u201cUsers at large encountering such pop-ups in just about any application may potentially start asking questions about the use of their data. It will force the industry to reconsider some of the core assumptions.\u201d\n In-app advertising generates billions of dollars every year. Tracking data built into apps also are used by ad tech companies to link phone users to their other devices, allowing ads to be shown to the same people on multiple screens, as well as to measure the effectiveness of those messages.\n Apple has heralded itself as a champion of user privacy, especially compared with other tech giants that rely on advertising, Facebook Inc. and Alphabet Inc.\u2019s Google. Apple started limiting tracking on its Safari web browser in 2017. Earlier this year, Google said it would do the same for its Chrome browser after a two-year consultation with the advertising industry.", "posttime": "2020-06-28 06:45:34", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7a0b\u5e8f,\u82f9\u679c,apple,\u5f3a\u5236,force", "title": "\u82f9\u679c\u5c06\u5f3a\u5236\u5e94\u7528\u7a0b\u5e8f\u5728\u8ddf\u8e2a\u7528\u6237\u4e4b\u524d\u8bf7\u6c42\u8bb8\u53ef", "title_en": "Apple Will Force Apps to Ask for Permission Before Tracking Users", "transed": 1, "url": "https://finance.yahoo.com/news/apple-force-apps-ask-ok-210244180.html", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u82f9\u679c", "apple", "\u5f3a\u5236", "force"]}, {"category": "", "categoryclass": "", "imagename": "c72a4bdf84c77ccc3eff0558d5edc17a.jpg", "infoid": 1008669, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u77e5\u9053\u6d6e\u70b9\u7b97\u672f\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4e0a\u6709\u70b9\u75af\u72c2\u3002\u4f8b\u5982\uff0c\u6d6e\u70b9\u6570\u4e0d\u5177\u6709\u5173\u8054\u6027\uff1a\n\u4f46\u662f\uff0c\u81f3\u5c11\u5728\u6211\u7684\u7ecf\u9a8c\u4e2d\uff0c\u8fd9\u662f\u76f8\u5f53\u4e00\u81f4\u7684\u3002\u60a8\u4e0d\u5e94\u8be5\u7b80\u5355\u5730\u5047\u8bbe\u50cf\u5173\u8054\u6027\u8fd9\u6837\u7684\u82b1\u54e8\u5c5e\u6027\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u8d77\u4f5c\u7528\u3002\n\u5982\u679c\u4e0a\u5e1d\u771f\u7684\u5b58\u5728\uff0c\u53ef\u53d8\u6bd4\u7387\u5c31\u4f1a\u662f0.50178230318\uff0c\u6545\u4e8b\u5c31\u5230\u6b64\u4e3a\u6b62\u4e86\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u6b63\u597d\u4e3a0.50178230318\u7684\u6d6e\u70b9\u6570\u3002\u76f8\u53cd\uff0c\u5b83\u843d\u5728\u6d6e\u70b9\u65700.501782303179999944\u548c\u6d6e\u70b9\u65700.501782303180000055\u4e4b\u95f4\u3002\n\u91cd\u8981\u7684\u662f\u8981\u66f4\u7cbe\u786e\u4e00\u70b9\u300264\u4f4d\u6d6e\u70b9\u6807\u51c6\u5c06\u6570\u5b57\u8868\u793a\u4e3a53\u4f4d\u5c3e\u6570\uff0c\u540e\u8ddf2\u7684\u5e42\u3002\u6240\u4ee5\uff0c\u8ba9\u6211\u4eec\u7528\u8ba1\u7b97\u673a\u7684\u65b9\u5f0f\u628a\u5b83\u8bf4\u6e05\u695a\uff1a\n\u6211\u4eec\u5fc5\u987b\u9009\u62e9\u5c3e\u65704519653187245114\u6216\u5c3e\u65704519653187245115\u3002\u4f7f\u752864\u4f4d\u6d6e\u70b9\u6570\u65e0\u6cd5\u7cbe\u786e\u8868\u793a\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u90a3\u4e480.50178230318\u5230\u5e95\u843d\u5728\u54ea\u91cc\u5462\uff1f\u6211\u4eec\u5927\u7ea6\u6709\u2026\u3002\n\u8ba9\u6211\u4eec\u542f\u52a8\u9002\u7528\u4e8ex86\u7cfb\u7edf\u7684GNU GCC 7\u7f16\u8bd1\u5668\uff0c\u5e76\u8fd0\u884c\u4ee5\u4e0bC/C++\u7a0b\u5e8f\uff1a\n#include&lt\uff1bstdio.h&gt\uff1bint main(){Double x=50178230318.0\uff1bDouble y=100000000000.0\uff1bDouble Ratio=x/y\uff1bprintf(&#34\uff1bx/y=%18.18f\\n&#34\uff1b\uff0cRatio)\uff1b}\u3002\n\u56e0\u6b64\uff0cGNU GCC\u5b9e\u9645\u4e0a\u9009\u62e9\u4e86\u6700\u5c0f\u548c\u6700\u8fdc\u7684\u503c\uff0c\u800c\u4e0d\u662f\u6700\u8fd1\u7684\u503c\u3002\u5373\u4f7f\u60a8\u4e13\u95e8\u8bbe\u7f6e\u4e86\u8981\u6c42\u7f16\u8bd1\u5668\u820d\u5165\u5230\u6700\u8fd1\u7684\u503c(fesetround(FE_TONEAREST))\uff0c\u5b83\u4ecd\u7136\u662f\u771f\u7684\u3002\n\u4e0eGNU GCC\u56e2\u961f\u7c7b\u4f3c\u7684\u62a5\u544a\u5373\u4f7f\u4e0d\u662f\u6210\u767e\u4e0a\u5343\uff0c\u4e5f\u6709\u51e0\u5341\u4efd\u3002\u5b83\u4eec\u88ab\u6807\u8bb0\u4e3a\u65e0\u6548\u3002\n\u8ba9\u6211\u56de\u987e\u4e00\u4e0b\uff1aGNU GCC\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5c06\u4e24\u4e2a\u6d6e\u70b9\u6570\u7684\u9664\u6cd5\u7ed3\u679c\u820d\u5165\u4e3a\u4e00\u4e2a\u4e0d\u662f\u6700\u63a5\u8fd1\u7684\u503c\u3002\u800c\u4e14\u5b83\u4e5f\u4e0d\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u6f0f\u6d1e\u3002\n\u89e3\u91ca\u662f\u7f16\u8bd1\u5668\u9996\u5148\u4f7f\u752880\u4f4d\u820d\u5165\u5230\u6700\u8fd1\uff0c\u7136\u540e\u518d\u6b21\u820d\u5165\u3002\u8fd9\u5c31\u662f\u82b1\u54e8\u7684\u6570\u5b57\u7231\u597d\u8005\u6240\u8bf4\u7684FLT_EVAL_METHOD=2\u3002\n\u4f46\u662f\uff0c\u5373\u4f7f\u6dfb\u52a0\u4e86\u4f18\u5316\u6807\u5fd7(\u5982-O2)\uff0cFLT_EVAL_METHOD\u7684\u503c\u4e5f\u4fdd\u6301\u4e3a2\uff0c\u4f46\u7ed3\u679c\u4ecd\u5c06\u66f4\u6539\u3002\u539f\u56e0\u662f\u4f18\u5316\u5668\u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\u51fa\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u5ffd\u7565FLT_EVAL_METHOD\u503c\u3002\n\u6b63\u5982\u4e13\u5bb6\u5efa\u8bae\u7684\u90a3\u6837\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u5411GNU GCC\u4f20\u9012\u6807\u5fd7-msse-mfpath=sse\uff0c\u4f46\u662f\u6b63\u5982\u6211\u7684\u811a\u672c\u6240\u6f14\u793a\u7684\u90a3\u6837\uff0c\u5b83\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898(\u7136\u540e\u60a8\u4f1a\u5f97\u5230FLT_EVAL_METHOD=-1)\u3002\u60a8\u8fd8\u9700\u8981\u6dfb\u52a0\u9002\u5f53\u7684\u76ee\u6807(\u4f8b\u5982\uff0c-msse-mfpath=sse-march=pentium4)\u3002\n\u5982\u679c\u4f60\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u4e0d\u4f1a\u6210\u4e3a\u4e00\u4e2a\u9519\u8bef\uff0c\u6b22\u8fce\u52a0\u5165\u4ff1\u4e50\u90e8\u3002\u60a8\u53ef\u4ee5\u5728Godbolt\u4e0a\u68c0\u67e5\u7a0b\u5e8f\u96c6\u3002", "note_en": "I know that floating-point arithmetic is a bit crazy on modern computers. For example, floating-point numbers are not associative:\n  But, at least, this is fairly consistent in my experience. You should simply not assume fancy properties like associativity to work in the real world.\n   If God did exist, the variable ratio would be 0.50178230318 and the story would end there. Unfortunately, there is no floating-point number that is exactly 0.50178230318. Instead it falls between the floating-point number 0.501782303179999944 and the floating-point number 0.501782303180000055.\n It important to be a bit more precise. The 64-bit floating-point standard represents numbers as a 53-bit mantissa followed by a power of two. So let us spell it out the way the computer sees it:\n  We have to pick the mantissa 4519653187245114 or the mantissa\u00a04519653187245115. There is no way to represent exactly anything that falls in-between using 64-bit floating-point numbers. So where does 0.50178230318 fall exactly? We have approximately\u2026\n        Let us spin up the GNU GCC 7 compiler for x86 systems and run the following C/C++ program:\n #include &lt;stdio.h&gt;\rint main()  {\r  double x  =  50178230318.0 ;\r  double y  =  100000000000.0 ;\r  double ratio  = x /y ;\r printf ( &#34;x/y = %18.18f \\n &#34; , ratio ) ;\r }\n   So GNU GCC actually picks the smallest and furthest value, instead of the nearest value. It remains true even if you set specifically ask the compiler to round to nearest ( fesetround(FE_TONEAREST)).\n   There are dozens if not hundreds of similar reports to the GNU GCC team.  They are being flagged as invalid.\n Let me recap:\u00a0the GNU GCC compiler may round the result of a division between two floating-point numbers to a value  is not the nearest. And it is not considered a bug.\n The explanation is that the compiler first rounds to nearest using 80 bits and then rounds again. This is what fancy numerical folks call   FLT_EVAL_METHOD = 2.\n However, the value of  FLT_EVAL_METHOD remains at 2 even if you add optimization flags such as  -O2, and yet the result will change. The explanation is that the optimizer figures out the solution at compile-time and does so ignoring the  FLT_EVAL_METHOD value.\n You can also try to pass GNU GCC the flags  -msse -mfpmath=sse, as experts recommend, but as my script demonstrates, it does not solve the issue (and then you get  FLT_EVAL_METHOD = -1). You need to also add an appropriate target (e.g.,  -msse -mfpmath=sse -march=pentium4).\n If you are confused as to why all of this could be possible without any of it being a bug, welcome to the club. You can examine  the assembly on godbolt.", "posttime": "2020-06-28 06:44:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9664\u6cd5,gcc,\u7f16\u8bd1\u5668", "title": "GNU GCC\u4e0d\u5c06\u6d6e\u70b9\u9664\u6cd5\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u503c", "title_en": "GNU GCC does not round floating-point divisions to the nearest value", "transed": 1, "url": "https://lemire.me/blog/2020/06/26/gcc-not-nearest/", "via": "", "real_tags": ["\u9664\u6cd5", "gcc", "\u7f16\u8bd1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008668, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e5f\u8bb8\u662f\u65f6\u5019\u5ba1\u67e5FDA\u901a\u8fc7\u9650\u5236SARS-CoV-2\u75c5\u6bd2\u68c0\u6d4b\u7684\u4f9b\u5e94\u548c\u4f7f\u7528\u800c\u9020\u6210\u7684\u5de8\u5927\u635f\u5bb3\u4e86\u3002\n\u5de8\u5927\u7684\uff1f\u5982\u679c\u6709\u8db3\u591f\u7684\u68c0\u6d4b\uff0c\u7f8e\u56fd\u672c\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u75c5\u6bd2\u9020\u6210\u7684\u5de8\u5927\u6210\u672c-\u81f3\u5c1120\u4e07\u4eba\u989d\u5916\u6b7b\u4ea1\uff0c8\u4e07\u4ebf\u7f8e\u5143\u7684\u4ea7\u51fa\u635f\u5931\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u63d0\u4f9b\u4e00\u4e2a\u5173\u4e8eFDA\u81ea\u5927\u6d41\u884c\u5f00\u59cb\u4ee5\u6765\u662f\u5982\u4f55\u5e94\u5bf9\u51e0\u4e2a\u95ee\u9898\u7684\u94fe\u63a5\u7684\u56de\u987e\u3002\n\u8bb8\u591a\u62a5\u9053\u6307\u51fa\uff0c\u75be\u63a7\u4e2d\u5fc3\u5f00\u53d1\u7684\u75c5\u6bd2\u6d4b\u8bd5\u5931\u8d25\u63a8\u8fdf\u4e86\u7f8e\u56fd\u5bf9\u75c5\u6bd2\u7684\u53cd\u5e94\u3002\u6ca1\u6709\u5f97\u5230\u90a3\u4e48\u591a\u5173\u6ce8\u7684\u4e8b\u5b9e\u662f\uff0c\u5c3d\u7ba1FDA\u7acb\u5373\u6279\u51c6\u4e86\u75be\u63a7\u4e2d\u5fc3\u7684\u7834\u88c2\u6d4b\u8bd5\uff0c\u4f46\u6279\u51c6\u5b9e\u9645\u6709\u6548\u7684\u6d4b\u8bd5\u82b1\u4e86\u975e\u5e38\u957f\u7684\u65f6\u95f4\u3002\n2\u67084\u65e5\uff0cFDA\u8fc5\u901f\u6279\u51c6\u4e86\u75be\u63a7\u4e2d\u5fc3\u5f00\u53d1\u7684\u6d4b\u8bd5\u30022\u67088\u65e5\uff0c\u5728\u6536\u5230\u5b83\u540e\u7684\u51e0\u4e2a\u5c0f\u65f6\u5185\uff0c\u7ebd\u7ea6\u7684\u4e00\u5bb6\u5b9e\u9a8c\u5ba4\u53d1\u73b0\u5b83\u4e0d\u8d77\u4f5c\u7528\u3002(\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d)\u3002\n\u5728\u79c1\u4eba\u5b9e\u9a8c\u5ba4\u5f00\u53d1\u4e86\u81ea\u5df1\u7684\u6d4b\u8bd5\u540e\uff0c\u4ed6\u4eec\u5728\u83b7\u5f97\u6279\u51c6\u7684\u8fc7\u7a0b\u4e2d\u82e6\u82e6\u6323\u624e\u3002\u201c\u6885\u5965\u8bca\u6240\u6210\u7acb\u4e86\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u4e2a\u5feb\u901f\u53cd\u5e94\u5c0f\u7ec4\u300215\u540d\u6210\u5458\u4e2d\u6709\u4e09\u5206\u4e4b\u4e00\u5b8c\u5168\u81f4\u529b\u4e8eFDA\u7684\u6570\u636e\u548c\u6587\u4e66\u5de5\u4f5c\u8981\u6c42\u3002\u548c\u56e2\u961f\u4e2d\u7684\u5176\u4ed6\u4eba\u4e00\u6837\uff0c\u4ed6\u4eec\u6bcf\u5929\u5de5\u4f5c15\u4e2a\u5c0f\u65f6\uff0c\u8fde\u7eed\u5de5\u4f5c\u4e09\u5468\u3002\u201c\u3002(\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d)\u3002\n\u534e\u76db\u987f\u5927\u5b66\u7684\u4e9a\u5386\u514b\u65af\u00b7\u683c\u52d2\u5b81\u683c\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u201c\u82b1\u4e86\u5c06\u8fd1100\u4e2a\u5c0f\u65f6\u586b\u5199\u4e86\u4e00\u4efd30\u9875\u7684\u5df4\u6d1b\u514b\u5f0f\u8868\u683c\uff0c\u57282\u670819\u65e5\u63d0\u4ea4\u4e86\u6388\u6743\u7533\u8bf7\u3002\u4f46\u8fd8\u662f\u4e0d\u884c\uff1a\u4ed6\u5df2\u7ecf\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u4e86\u6750\u6599\uff0cFDA\u575a\u6301\u8ba9\u4ed6\u6253\u5370\u51fa\u6765\uff0c\u5e76\u5c06\u786c\u62f7\u8d1d\u8fde\u540c\u6570\u5b57\u6587\u4ef6\u4e00\u8d77\u4ee5\u5b9e\u7269\u5f62\u5f0f(\u5982\u62c7\u6307\u9a71\u52a8\u5668\u6216CD)\u5bc4\u5230\u53e6\u4e00\u4e2a\u5355\u72ec\u7684\u2018\u6587\u6863\u2019\u529e\u516c\u5ba4\u3002\u201c\u3002(\u201c\u7ebd\u7ea6\u5ba2\u201d)\u3002\n2\u670824\u65e5\uff0c\u4e00\u4e2a\u516c\u5171\u536b\u751f\u5b9e\u9a8c\u5ba4\u8054\u76df\u5199\u4fe1\u7ed9FDA\uff0c\u8981\u6c42\u52a0\u5feb\u6279\u51c6\u4ed6\u4eec\u6b63\u5728\u5f00\u53d1\u7684\u6d4b\u8bd5\u7684\u8fc7\u7a0b\u3002\u4e24\u5929\u540e\uff0c\u4e5f\u5c31\u662f2\u670826\u65e5\uff0cFDA\u4e13\u5458\u56de\u4fe1\u62d2\u7edd\u4e86\u4ed6\u4eec\u7684\u8bf7\u6c42\uff0c\u79f0\u201c\u6839\u636e\u8fc7\u53bb\u8fd9\u4e9b\u6eda\u52a8\u5ba1\u67e5\u7684\u7ecf\u9a8c\uff0cFDA\u80fd\u591f\u5728\u6536\u5230\u5b8c\u6574\u7684\u9a8c\u8bc1\u540e\u77ed\u77ed1\u5929\u5185\u6388\u6743\u5bf9\u7a81\u53d1\u516c\u5171\u536b\u751f\u4e8b\u4ef6\u8fdb\u884c\u68c0\u6d4b\u3002\u201d(\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d)\n\u53e6\u4e00\u4e2a\u6ca1\u6709\u5f97\u5230\u5e7f\u6cdb\u8ba4\u53ef\u7684\u4e8b\u5b9e\u662f\uff0cFDA\u79ef\u6781\u8ffd\u67e5\u90a3\u4e9b\u201c\u6ee5\u7528\u201d\u6d4b\u8bd5\u7684\u4eba\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u544a\u8bc9\u516c\u5171\u536b\u751f\u5f53\u5c40\u672a\u7ecf\u6279\u51c6\u7684\u6d4b\u8bd5\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002\n2\u670825\u65e5\uff0c\u534e\u76db\u987f\u5927\u5b66\u897f\u96c5\u56fe\u6d41\u611f\u7814\u7a76\u7684\u6210\u5458\u6d77\u4f26\u00b7\u6731\u535a\u58eb\u5728\u6ca1\u6709FDA\u6279\u51c6\u7684\u60c5\u51b5\u4e0b\u5f00\u59cb\u8fdb\u884c\u51a0\u72b6\u75c5\u6bd2\u68c0\u6d4b\uff0c\u5f88\u5feb\u53d1\u73b0\u4e86\u7f8e\u56fd\u9996\u4f8b\u793e\u533a\u4f20\u64ad\u75c5\u4f8b\u3002\u5c3d\u7ba1FDA\u5bf9\u6d41\u611f\u7814\u7a76\u7684\u6279\u51c6\u4e0d\u5141\u8bb8\u5979\u8fd9\u6837\u505a\uff0c\u4f46\u5979\u901a\u77e5\u4e86\u516c\u5171\u536b\u751f\u5f53\u5c40\uff0c\u540e\u8005\u5728\u7b2c\u4e8c\u5929\u91cd\u65b0\u6d4b\u8bd5\u4e86\u60a3\u8005\u3002(\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d)\u3002\n2\u670826\u65e5\uff0c\u201c\u8c03\u67e5\u4eba\u5458\u548c\u897f\u96c5\u56fe\u536b\u751f\u5b98\u5458\u4e0eCDC\u548cF.D.A.\u7684\u4ee3\u8868\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u8ba8\u8bba\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u6765\u81ea\u8054\u90a6\u653f\u5e9c\u7684\u4fe1\u606f\u662f\u76f4\u622a\u4e86\u5f53\u7684\u3002\u6797\u5fb7\u594e\u65af\u7279\u535a\u58eb\u56de\u5fc6\u8bf4\uff0c\u4ed6\u4eec\u5728\u7535\u8bdd\u91cc\u8bf4\u5f97\u975e\u5e38\u6e05\u695a\uff0c\u5c31\u662f\u8ba9\u6d77\u4f26\u00b7\u6731\u505c\u4e0b\u6765\u3002\u201c\u522b\u518d\u6d4b\u8bd5\u4e86\u3002\u201d(\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d)\u3002\n\u201c2\u670828\u65e5\uff0c\u683c\u52d2\u5b81\u683c\u548c\u4ed6\u7684\u540c\u4e8b\u7ed9\u56fd\u4f1a\u53d1\u4e86\u4e00\u5c01\u4fe1\uff0c\u4fe1\u4e2d\u5199\u9053\uff0c\u2018\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u4e00\u5bb6\u6d4b\u8bd5\u5236\u9020\u5546\u6216\u4e34\u5e8a\u5b9e\u9a8c\u5ba4\u6210\u529f\u901a\u8fc7\u4e86\u6b27\u76df\u5bf9SARS-CoV-2\u75c5\u6bd2\u7684\u68c0\u6d4b\u8fc7\u7a0b\u3002\u2019&#34\uff1b(\u201d\u7ebd\u7ea6\u5ba2\u201c)\u3002\n2\u670829\u65e5\uff0cFDA\u505a\u51fa\u8ba9\u6b65\uff0c\u8868\u793a\u5c06\u6539\u53d8\u6279\u51c6\u4e34\u5e8a\u5b9e\u9a8c\u5ba4\u5f00\u53d1\u7684\u6d4b\u8bd5\u7684\u7a0b\u5e8f\u3002\n3\u67089\u65e5\uff0c\u5f53\u5730\u536b\u751f\u5f53\u5c40\u544a\u8bc9\u534e\u76db\u987f\u5927\u5b66\u7684\u7814\u7a76\u5c0f\u7ec4\u505c\u6b62\u68c0\u6d4b\uff0c\u201c\u76f4\u5230\u4ed6\u4eec\u5b8c\u6210\u4e34\u5e8a\u5b9e\u9a8c\u5ba4\u7684\u8ba4\u8bc1\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u6570\u5468\u65f6\u95f4\u3002\u201d(\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d)\u3002\n5\u670812\u65e5\uff0cFDA\u7ec8\u6b62\u4e86\u897f\u96c5\u56fe\u6d41\u611f\u7814\u7a76\u56e2\u961f\u4e0e\u516c\u5171\u536b\u751f\u5b98\u5458\u5408\u4f5c\u5728\u793e\u533a\u8bc6\u522b\u75c5\u6bd2\u7684\u53e6\u4e00\u9879\u5c1d\u8bd5\uff1a\n\u626b\u63cf\u7a0b\u5e8f\u662f\u4ece\u897f\u96c5\u56fe\u6d41\u611f\u7814\u7a76\u4e2d\u5265\u79bb\u51fa\u6765\u7684\uff0c\u662f\u7814\u7a76\u4eba\u5458\u4e0e\u897f\u96c5\u56fe\u548c\u91d1\u53bf\u516c\u5171\u536b\u751f\u90e8\u95e8\u5171\u540c\u52aa\u529b\uff0c\u4ee5\u6355\u6349\u75c5\u6bd2\u5728\u6574\u4e2a\u793e\u533a\u7684\u4f20\u64ad\u3002\n\u626b\u63cf\u5de5\u4f5c\u57283\u6708\u4efd\u83b7\u5f97\u4e86\u534e\u76db\u987f\u5dde\u7684\u7d27\u6025\u6279\u51c6\uff0c\u76ee\u524d\u6b63\u5728\u8ba4\u8bc1\u7684\u4e34\u5e8a\u5b9e\u9a8c\u5ba4\u5904\u7406\u6d4b\u8bd5\u7ed3\u679c\u3002\n\u7814\u7a76\u4eba\u5458\u4f3c\u4e4e\u4e5f\u8bef\u89e3\u4e86FDA\u5173\u4e8e\u5bb6\u5ead\u68c0\u6d4b\u7684\u6307\u5bfc\u610f\u89c1\uff0c\u8fd9\u4e00\u6307\u5bfc\u65b9\u9488\u5728\u6574\u4e2a\u5927\u6d41\u884c\u671f\u95f4\u90fd\u53d1\u751f\u4e86\u53d8\u5316\u3002\u51e0\u4e2a\u6708\u6765\uff0c\u8be5\u673a\u6784\u4e00\u76f4\u5728\u5bfb\u6c42\u53d6\u7f14\u6b64\u7c7b\u6d4b\u8bd5\uff0c\u6709\u65f6\u4f1a\u5728\u521d\u521b\u4f01\u4e1a\u7684\u5e02\u573a\u4e2d\u64ad\u4e0b\u6df7\u4e71\u7684\u79cd\u5b50\u3002\u8bb8\u591a\u516c\u53f8\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u8fd9\u4e9b\u6d4b\u8bd5\uff0c\u4f5c\u4e3a\u5168\u56fd\u8303\u56f4\u5185\u6d4b\u8bd5\u77ed\u7f3a\u7684\u90e8\u5206\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5728\u8be5\u673a\u67843\u6708\u4efd\u8868\u793a\u6ca1\u6709\u6388\u6743\u8d2d\u4e70\u4efb\u4f55\u5bb6\u5ead\u6d4b\u8bd5\u540e\uff0c\u6700\u7ec8\u5c06\u5176\u4ece\u5e02\u573a\u4e0a\u64a4\u51fa\u3002\n\u4f46\u57285\u670811\u65e5\uff0c\u5728\u5bf9\u5176\u5bb6\u5ead\u68c0\u6d4b\u653f\u7b56\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u66f4\u65b0\u540e\uff0cFDA\u518d\u6b21\u6f84\u6e05\u4e86\u5176\u6307\u5bfc\u65b9\u9488\uff0c\u6307\u51fa\u5373\u4f7f\u662f\u4e4b\u524d\u5f97\u5230\u5404\u5dde\u6279\u51c6\u7684\u6d4b\u8bd5-\u5305\u62ec\u90a3\u4e9b\u5728\u8ba4\u8bc1\u5b9e\u9a8c\u5ba4\u5904\u7406\u7ed3\u679c\u7684\u6d4b\u8bd5-\u4e5f\u9700\u8981\u8054\u90a6\u653f\u5e9c\u7684\u660e\u786e\u6388\u6743\u624d\u80fd\u7ee7\u7eed\u5de5\u4f5c\u3002\u7b2c\u4e8c\u5929\uff0c\u7814\u7a76\u4eba\u5458\u6536\u5230\u901a\u77e5\uff0c\u544a\u8bc9\u4ed6\u4eec\u505c\u6b62\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u7acb\u5373\u7167\u529e\uff0c\u626b\u63cf\u53d1\u8a00\u4eba\u8bf4\uff0c\u2026\u3002\nFDA\u5728\u8fd9\u91cc\u7684\u5730\u4f4d\u662f\u7ad9\u4e0d\u4f4f\u811a\u7684\uff0c\u201c\u65af\u514b\u91cc\u666e\u65af\u7814\u7a76\u7ffb\u8bd1\u7814\u7a76\u6240(Scripps Research Translational Institute)\u4e3b\u4efb\u57c3\u91cc\u514b\u00b7\u6258\u6ce2\u5c14(Eric Topol)\u8bf4\uff0c\u8be5\u7814\u7a76\u6240\u4e5f\u5728\u8ddf\u8e2a\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\u3002\u201c\u5982\u679c\u4ed6\u4eec\u771f\u7684\u60f3\u4fc3\u8fdb\u8fdb\u6b65\uff0c\u800c\u4e0d\u662f\u8d2c\u4f4e\u6211\u4eec\u5728\u7814\u7a76\u8fd9\u79cd\u75c5\u6bd2\u65b9\u9762\u7684\u6700\u5927\u5b66\u672f\u52aa\u529b\uff0c\u90a3\u5c31\u662f\u4ed6\u4eec\u4f1a\u505a\u7684\u3002\u201d(\u7edf\u8ba1\u65b0\u95fb)\u3002\n\u4e00\u5e746\u670816\u65e5\uff0cFDA\u63d0\u4f9b\u4e86\u65b0\u7684\u6307\u5bfc\uff0c\u63d0\u9192\u6bcf\u4e2a\u4eba\u4ecd\u7136\u6ca1\u6709\u88ab\u6279\u51c6\u5bf9\u65e0\u75c7\u72b6\u4e2a\u4f53\u8fdb\u884c\u5e7f\u6cdb\u6d4b\u8bd5\u7684\u6d4b\u8bd5\u3002\n\u5b83\u786e\u5b9e\u5ba3\u5e03\u4e86\u4e00\u4e2a\u65b0\u7684\u6a21\u677f\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u7528\u6765\u63d0\u4ea4\u7533\u8bf7\uff0c\u8fdb\u884c\u5e7f\u6cdb\u7684\u6d4b\u8bd5\u3002\u4f46\u662f\uff0c\u6b63\u5982\u83b7\u5f97\u75c5\u6bd2\u6d4b\u8bd5\u6279\u51c6\u7684\u7ecf\u9a8c\u5145\u5206\u8bc1\u660e\u7684\u90a3\u6837\uff0c\u8bf4\u4e00\u4e2a\u7ec4\u7ec7\u53ef\u4ee5\u7533\u8bf7\u505a\u67d0\u4e8b\u7684\u8bb8\u53ef\uff0c\u5e76\u4e0d\u7b49\u540c\u4e8e\u8bf4\u8fd9\u6837\u505a\u662f\u5408\u6cd5\u7684\u3002\n\u4e0d\u8fc7\uff0c\u4e3a\u516c\u5e73\u8d77\u89c1\uff0c\u6211\u4eec\u5df2\u83b7\u4fdd\u8bc1\u4e0d\u518d\u9700\u8981\u90ae\u5bc4\u7533\u8bf7\u6750\u6599\u7684\u786c\u62f7\u8d1d\u3002", "note_en": "It might be time to review the massive damage that the FDA is doing by restricting the supply and use of tests for the SARS-CoV-2 virus.\n Massive? With enough tests, the US could have avoided the enormous cost that this virus is imposing \u2013 at least  200,000 excess deaths and $8 trillion in lost output.\n Here I\u2019ll provide a recap with links about how the FDA responded to just a couple of issues since the start of the pandemic.\n  Many accounts have noted how the failure of the virus test developed by the CDC delayed the US response to the virus. The fact that has not gotten as much attention is that although the FDA promptly approved the broken test from the CDC, it took an excruciatingly long time to approve tests that actually worked.\n On February 4, the FDA promptly approved the test that the CDC developed. Within hours of receiving it on February 8, a laboratory in New York discovered that it did not work.  (Washington Post)\n After private laboratories developed their own tests, they struggle with the process of getting them approved. \u201cThe Mayo Clinic created its first-ever rapid response team. A third of the 15 members were devoted solely to the FDA\u2019s data and paperwork demands. Like others on the team, they worked 15-hour days for three weeks.\u201d  (Washington Post)\n Alex Greninger and his colleagues at the University of Washington \u201cspent almost a hundred hours filling out a baroque, thirty-page form, filing the authorization request on February 19th. Still no dice: he had e-mailed the material, and the F.D.A. insisted that he print it out and mail a hard copy, along with the digital file in physical form, such as a thumb drive or a CD, to a separate \u2018documentation\u2019 office.\u201d  (New Yorker)\n On February 24, a coalition of public health laboratories writes to the FDA asking for an expedited process for approving the tests that they are developing. Two days later, on February 26, the commissioner of the FDA writes back denying their request saying that \u201cIn past experiences with these rolling reviews, the FDA has been able to authorize tests for public health emergencies within as little as 1 day upon receipt of the complete validation.\u201d  (Washington Post)\n  The other fact that is not widely recognized is that the FDA has aggressively pursued people who have \u201cmis-used\u201d tests, for example, by telling public health authorities what the test results were from an unapproved test.\n On February 25th, Dr. Helen Chu, who is part of the Seattle Flu Study at the University of Washington, starts running tests for coronavirus without FDA approval and soon finds the first case of community transmission in the United States. Although the FDA approval for the Flu study does not allow her to do so, she alerts public health authorities, who retest the patient the next day.  (New York Times)\n On February 26, \u201cthe investigators and Seattle health officials gathered with representatives of the C.D.C. and the F.D.A. to discuss what happened. The message from the federal government was blunt. \u2018What they said on that phone call very clearly was cease and desist to Helen Chu,\u2019 Dr. Lindquist remembered. \u2018Stop testing.\u2019  (New York Times)\n \u201cOn February 28th, Greninger and colleagues sent a letter to Congress, noting, `No test manufacturer or clinical laboratory has successfully navigated the E.U.A. process for sars-CoV-2 to date.\u2019 &#34;  (New Yorker)\n On February 29, the FDA backs down and says that it will change the process for approving tests developed by clinical labs.\n On March 9, local health authorities told the team at the University of Washington to stop testing \u201cuntil they could finish getting certified as a clinical laboratory, a process that could take many weeks.\u201d  (New York Times)\n On May 12, the FDA shut down another attempt by the team behind the Seattle Flu Study to work with public health officials to identify the virus in the community:\n The SCAN program \u2014 which was spun out of the Seattle Flu Study \u2014 is a joint effort between researchers and Seattle and King County\u2019s public health department to capture the spread of the virus across the community.\n The SCAN effort received emergency clearance for its work from Washington state in March, and was processing test results at certified clinical labs.\n The researchers also appear to have misinterpreted the FDA\u2019s guidance on home testing, which has shifted throughout the pandemic. The agency has sought to clamp down on such tests for months, at times sowing confusion in the market among startups. Many of the companies aimed to offer the tests as a partial solution to the nationwide testing shortage but ultimately pulled them from the market after the agency said in March it had not authorized any home test available for purchase.\n But on May 11, after a series of updates to its home testing policy, the FDA again clarified its guidance, noting that even tests previously approved by states \u2014 including those that processed results in certified labs \u2014 needed express authorization from the federal government to continue their work. The next day, the researchers received a notice telling them to stop returning results and immediately complied, the SCAN spokesperson said \u2026\n The FDA\u2019s position here is untenable,\u201d said Eric Topol, director of the Scripps Research Translational Institute, which is also tracking the spread of coronavirus. \u201cIf they really wanted to foster progress rather than take down our best academic effort to study this virus, that\u2019s what they would do.\u201d  (Statnews)\n  One June 16, the FDA offered new  guidance, reminding everyone that there is still no test that is approved for broad testing of asymptomatic individuals.\n  It did announce a new template that anyone could use to submit an application to do broad testing. But as the experience with getting virus tests approved amply demonstrates, saying that an organization can apply for permission to do something is not the same as saying that it is legal to do it.\n But to be fair, we have been assured that it is no longer necessary to send a hard copy of application materials via postal mail.", "posttime": "2020-06-28 06:43:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "fda,perpetual", "title": "FDA\u7684\u6c38\u4e45\u52a0\u5de5\u673a", "title_en": "The FDA's perpetual process machine", "transed": 1, "url": "https://paulromer.net/fda_perpetual_process_machine/", "via": "", "real_tags": ["fda", "perpetual"]}, {"category": "", "categoryclass": "", "imagename": "6c8421b0c013e516393c37bed1330fda.jpg", "infoid": 1008665, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Pulse\u662f\u4e00\u79cd3D\u6253\u5370\u7684\u53ef\u7a7f\u6234\u8bbe\u5907\uff0c\u5f53\u4e00\u4e2a\u4eba\u7684\u624b\u9760\u8fd1\u4ed6\u4eec\u7684\u8138\u65f6\uff0c\u5b83\u4f1a\u53d1\u51fa\u8109\u51b2\u6216\u632f\u52a8\u3002\u6765\u81ea\u632f\u52a8\u9a6c\u8fbe\u7684\u89e6\u89c9\u53cd\u9988\u6a21\u62df\u8f7b\u63a8\uff0c\u63d0\u9192\u4f69\u6234\u8005\u907f\u514d\u63a5\u89e6\u8fd9\u4e9b\u5165\u53e3\uff0c\u4ee5\u51cf\u5c11\u6f5c\u5728\u7684\u611f\u67d3\u3002\u5f53\u536b\u751f\u5b98\u5458\u5efa\u8bae\u5168\u4e16\u754c\u7ee7\u7eed\u6d17\u624b\uff0c\u4fdd\u6301\u793e\u4ea4\u8ddd\u79bb\uff0c\u5916\u51fa\u65f6\u6234\u53e3\u7f69\u65f6\uff0cNASA\u55b7\u6c14\u63a8\u8fdb\u5b9e\u9a8c\u5ba4(JPL)\u7684\u4e00\u4e2a\u4e09\u4eba\u5c0f\u7ec4\u5f00\u53d1\u4e86PULSE\uff0c\u4e0e\u8fd9\u4e9b\u52aa\u529b\u5e76\u80a9\u52aa\u529b\uff0c\u5c3d\u53ef\u80fd\u4fdd\u6301\u6211\u4eec\u7684\u5065\u5eb7\u3002\nPULSE\u662f\u4e00\u9879\u7b80\u5355\u4e14\u8d1f\u62c5\u5f97\u8d77\u7684\u6280\u672f\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u590d\u5236\uff0c\u65e0\u8bba\u4ed6\u4eec\u7684\u4e13\u4e1a\u6c34\u5e73\u5982\u4f55\u3002\u96f6\u4ef6\u5217\u8868\u3001STL\u6587\u4ef6\u548c\u90e8\u4ef6\u8bf4\u660e\u90fd\u4ee5Open\u6e90\u4ee3\u7801\u7684\u5f62\u5f0f\u63d0\u4f9b\u3002\u6211\u4eec\u5e0c\u671b\u4e2a\u4eba\u6216\u516c\u53f8\u590d\u5236\u3001\u6539\u8fdb\u6216\u589e\u5f3aPULSE\uff0c\u5e76\u4f7f\u5176\u6613\u4e8e\u5206\u53d1\u3002\n\u968f\u7740\u6211\u4eec\u56de\u5230\u5de5\u4f5c\u5c97\u4f4d\uff0c\u4ee5\u53ca\u5f85\u5728\u5bb6\u91cc\u7684\u63aa\u65bd\u88ab\u53d6\u6d88\uff0c\u8fd9\u4e9b\u63aa\u65bd\u5f88\u5bb9\u6613\u878d\u5165\u6211\u4eec\u7684\u65e5\u5e38\u751f\u6d3b\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40\u7684\u55b7\u6c14\u63a8\u8fdb\u5b9e\u9a8c\u5ba4\u6b63\u5728\u7528\u521b\u65b0\u3001\u7a7a\u95f4\u6280\u672f\u548c\u5de5\u7a0b\u6765\u5e2e\u52a9\u8fd9\u4e2a\u56fd\u5bb6\u548c\u4e16\u754c\u5728\u5f53\u524d\u7684\u65b0\u51a0\u80ba\u708e\u6d41\u884c\u75c5\u4e2d\u3002", "note_en": "PULSE is a 3D-printed wearable device that pulses, or vibrates, when a person\u2019s hand is nearing their face. The haptic feedback from a vibration motor simulates a nudge, reminding the wearer to avoid touching these entryways in order to reduce potential infection. As health officials advised the world to continue washing our hands, social distancing, and wearing a face mask when going outside, a team of three at NASA\u2019s Jet Propulsion Lab (JPL) developed PULSE, to stand side-by-side with these efforts to keep us as healthy as possible.\n  PULSE is a simple and affordable technology that can easily be reproduced by anyone regardless of their level of expertise. A list of parts, STL files, and assembly instructions are all available as  Open\u00a0Source. We hope individuals or companies will replicate, refine or enhance PULSE and make it easily available for distribution.\n    Easily integrated into our everyday life as we return to work, and as stay at home measures are lifted.\n   NASA&#39;s Jet Propulsion Laboratory is helping the country and the world during the current COVID-19 pandemic with innovation, space technology and engineering.", "posttime": "2020-06-28 06:41:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u51fa,diy,\u590d\u5236", "title": "PULSE\uff1aDIY\u540a\u5760\uff0c\u5f53\u60a8\u89e6\u6478\u9762\u90e8\u65f6\u53d1\u51fa\u8b66\u544a", "title_en": "Pulse: DIY pendant to warn you when you touch your face", "transed": 1, "url": "https://medeng.jpl.nasa.gov/covid-19/pulse/", "via": "", "real_tags": ["\u53d1\u51fa", "diy", "\u590d\u5236"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008664, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\uff0c\u6211\u4f5c\u4e3a\u4e00\u540d\u7a0b\u5e8f\u5458\u7684\u804c\u4e1a\u751f\u6daf\u8fbe\u5230\u4e86\u4e00\u4e2a\u4ee4\u4eba\u5174\u594b\u7684\u91cc\u7a0b\u7891\u3002\u8fd9\u662f\u6211\u6709\u751f\u4ee5\u6765\u7b2c\u4e00\u6b21\u76f4\u63a5\u5728\u786c\u4ef6\u4e0a\u8fd0\u884c\u4ee3\u7801\uff0c\u88f8\u673a\u548c\u6211\u7684\u4ee3\u7801\u4e4b\u95f4\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u526f\u9879\u76ee\u7684\u76ee\u6807\u662f\u521b\u5efa\u4e00\u4e2a2-4\u4eba\u7684\u8857\u673a\u6e38\u620f\uff0c\u76f4\u63a5\u5728\u6811\u8393\u6d3e3+\u4e0a\u8fd0\u884c\u3002\n\u5728\u521a\u521a\u8fd0\u884cHello World\u4e4b\u540e\uff0c\u8be5\u8f6f\u4ef6\u5728\u542f\u52a8\u65f6\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7\u4e32\u884cUART\u53d1\u9001\u6d88\u606f\uff1a\n\u55ef\uff0c\u5728\u7f16\u5199\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u65f6\uff0c\u6211\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u9047\u5230\u9519\u8bef\u548c\u5d29\u6e83\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u6211\u60f3\u8fc5\u901f\u4e86\u89e3\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u3002\u901a\u5e38\uff0c\u5728Zig\u4e2d\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u60a8\u4f1a\u5f97\u5230\u4e00\u4e2a\u5f88\u597d\u7684\u5806\u6808\u8ddf\u8e2a\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u7136\u800c\uff0c\u8fd9\u4e2a\u793a\u4f8b\u9488\u5bf9\u7684\u662fLinux\uff0c\u800c\u8fd9\u4e2a\u8857\u673a\u6e38\u620f\u9879\u76ee\u662f\u72ec\u7acb\u7684\u3002\u72ec\u7acb\u5f0f\u4e2d\u7684\u7b49\u6548\u4ee3\u7801\u5b9e\u9645\u4e0a\u53ea\u662f\u6302\u8d77\u4e86CPU\uff1a\n-a/src/main.zig+b/src/main.zig seral.log(&#34\uff1bHello World\uff01ClashOS 0.0\\n&#34\uff1b)\uff1b+var x\uff1au8=255\uff1b+x+=1\uff1b+seral.log(&#34\uff1bget here\\n&#34\uff1b)\uff1b\n\u8fd0\u884c\u65f6\uff0c\u60a8\u5c06\u770b\u5230\u6211\u4eec\u4ece\u672a\u6536\u5230\u6536\u5230\u7684\u6d88\u606f\uff0c\u4f46\u6211\u4eec\u4e5f\u4e0d\u4f1a\u6253\u5370\u4efb\u4f55\u7c7b\u578b\u7684\u9519\u8bef\u6d88\u606f\u6216\u4efb\u4f55\u5185\u5bb9\u3002\n\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u9ed8\u8ba4\u7684\u6b7b\u673a\u5904\u7406\u7a0b\u5e8f\u3002\u5728Zig\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5728\u6839\u6e90\u6587\u4ef6\u4e2d\u63d0\u4f9bpub Fn\u6b7b\u673a\u3002\u4f46\u5982\u679c\u60a8\u4e0d\u63d0\u4f9b\u6b64\u529f\u80fd\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c\uff1a\nPub FN\u6b7b\u673a(msg\uff1a[]const U8\uff0cerror_return_trace\uff1a\uff1f*builtin.StackTrace)noreturn{@setLD(True)\uff1bswitch(builtin.os){builtin.Os.freestanding=&gt\uff1b{while(True){}}\uff0cElse=&gt\uff1b{const first_trace_addr=@ptrToInt(@rereturn Address())\uff1bstd.debug.panicExtra(Error_Return_){}\uff0c{const first_trace_addr=@ptrToInt(@rereturn Address())\uff1bstd.debug.panicExtra(error_return_\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e3a\u4ec0\u4e48\u524d\u9762\u7684\u4ee3\u7801\u6302\u8d77-\u72ec\u7acb\u76ee\u6807\u7684\u9ed8\u8ba4\u6b7b\u673a\u5904\u7406\u7a0b\u5e8f\u662f\u7b80\u5355\u7684while(True){}\u3002\npub FN\u6b7b\u673a(message\uff1a[]const U8\uff0cSTACK_TRACE\uff1a\uff1f*builtin.StackTrace)noreturn{seral.write(&#34\uff1b\\n\uff01\u5185\u6838\u6b7b\u673a\uff01\\n&#34\uff1b)\uff1bseral.write(Message)\uff1bseral.write(&#34\uff1b\\n&#34\uff1b)\uff1bWhile(True){}}\u3002\n\u8fd9\u5df2\u7ecf\u597d\u591a\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6574\u6570\u6ea2\u51fa\u5bfc\u81f4\u4e86\u5185\u6838\u6b7b\u673a\uff0c\u4f46\u662f\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u80fd\u53d1\u751f\u6574\u6570\u6ea2\u51fa\u3002\u6253\u5370\u5b8c\u6574\u7684\u5806\u53e0\u8f68\u8ff9\u4e0d\u662f\u5f88\u597d\u5417\uff1f\n\u662f\u7684\uff0c\u662f\u7684\uff0c\u4f1a\u7684\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u4ece\u5185\u6838\u5185\u90e8\u8bbf\u95eeDWARF\u8c03\u8bd5\u4fe1\u606f\u3002\u4f46\u662f\u6211\u751a\u81f3\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf\u3002\u8fd9\u600e\u4e48\u884c\u5f97\u901a\u5462\uff1f\n\u653e\u8f7b\u677e\uff01\u53ea\u9700\u5c06\u77ee\u4eba\u4fe1\u606f\u76f4\u63a5\u653e\u5165\u5185\u6838\u7684\u5185\u5b58\u4e2d\u5373\u53ef\u3002\u6211\u4fee\u6539\u4e86\u6211\u7684\u94fe\u63a5\u5668\u811a\u672c\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a\n.rodata\uff1aALIGN(4K){*(.rodata)__DEBUG_INFO_START=.\uff1bKEEP(*(.debug_info))__DEBUG_INFO_END=.\uff1b__DEBUG_ABBRV_START=.\uff1bKEEP(*(.debug_abbrev))__DEBUG_ABBRV_END=.\uff1b__DEBUG_STR_STR=.\uff1bKEEP(*(.debug_str))__DEBUG_STR_\u3002Keep(*(.debug_line))__debug_line_end=.\uff1b__debug_range_start=.\uff1bKeep(*(.debug_range))__debug_range_end=.\uff1b}\u3002\nlld\uff1a\u9519\u8bef\uff1a.rodata&gt\uff1b&gt\uff1b&gt\uff1b/home/andy/dev/clashos/zig-cache/clashos.o\uff1a(.debug_info)\uff1a0x0&gt\uff1b&gt\uff1b&gt\uff1b\u8f93\u51fa\u8282\u7684\u8282\u6807\u5fd7\u4e0d\u517c\u5bb9.rodata\uff1a0x12lld\uff1a\u9519\u8bef\uff1a.rodata&gt\uff1b&gt\uff1b&gt\uff1b\u5185\u90e8&gt\uff1b\uff1a(.debug_str)\uff1a0x30&gt\uff1b&gt\uff1b&gt\uff1b\u8f93\u51fa\u8282.rodata\uff1a0x12lld\uff1a\u9519\u8bef\u3002/home/andy/dev/clashos/zig-cache/clashos.o\uff1a(.debug_line)\uff1a0x0&gt\uff1b&gt\uff1b&gt\uff1b\u8f93\u51fa\u8282.rodata\uff1a0x32\n\u5728\u5bf9\u4e00\u4efd\u9519\u8bef\u62a5\u544a\u8fdb\u884c\u4e86\u53cd\u590d\u8ba8\u8bba\u540e\uff0c\u4e54\u6cbb\u00b7\u91cc\u9a6c\u5c14(George Rimar)\u5efa\u8bae\u5e72\u8106\u5220\u9664\u90a3\u9879\u7279\u5b9a\u7684\u68c0\u67e5\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u662f\u4e00\u79cd\u8fc7\u4e8e\u4e25\u683c\u7684\u6267\u884c\u3002\u6211\u5728\u6211\u7684LLD\u53c9\u5b50\u91cc\u8bd5\u8fc7\u4e86\uff0c\u5b83\u8d77\u4f5c\u7528\u4e86\uff01\u8c03\u8bd5\u4fe1\u606f\u73b0\u5728\u5df2\u94fe\u63a5\u5230\u6211\u7684\u5185\u6838\u6620\u50cf\u4e2d\u3002\u5728\u5b8c\u6210\u4e86\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u7684\u5176\u4f59\u6b65\u9aa4\u540e\uff0c\u6211\u5411\u4e0a\u6e38\u63d0\u4ea4\u4e86\u4e00\u4e2a\u8865\u4e01\uff0cRui\u5df2\u7ecf\u5c06\u5176\u5408\u5e76\u5230\u4e86LLD\u4e2d\u3002\u8fd9\u5c06\u4e0eLLVM8\u4e00\u8d77\u53d1\u5e03\uff0c\u540c\u65f6Zig\u7684LLD fork\u4e5f\u6709\u8865\u4e01\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u7f16\u5199\u6211\u7684\u5185\u6838\u548cZig\u6807\u51c6\u5e93\u7684\u5806\u6808\u8ddf\u8e2a\u5de5\u5177\u4e4b\u95f4\u7684\u7c98\u5408\u4ee3\u7801\u662f\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u60c5\u3002\u5728Zig\u4e2d\uff0c\u60a8\u4e0d\u5fc5\u523b\u610f\u652f\u6301\u72ec\u7acb\u6a21\u5f0f\u3002\u4e0d\u4f9d\u8d56\u4e8e\u7279\u5b9a\u64cd\u4f5c\u7cfb\u7edf\u7684\u4ee3\u7801\u5c06\u5728\u72ec\u7acb\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u8fd9\u8981\u5f52\u529f\u4e8eZig\u7684\u61d2\u60f0\u7684\u9876\u5c42\u58f0\u660e\u5206\u6790\u3002\u7531\u4e8e\u6807\u51c6\u5e93\u5806\u6808\u8ddf\u8e2a\u4ee3\u7801\u4e0d\u8c03\u7528\u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edfAPI\uff0c\u56e0\u6b64\u5b83\u652f\u6301\u72ec\u7acb\u6a21\u5f0f\u3002\n\u7528\u4e8e\u4eceELF\u6587\u4ef6\u6253\u5f00\u8c03\u8bd5\u4fe1\u606f\u7684Zig STD lib API\u5982\u4e0b\u6240\u793a\uff1a\n\u4f46\u662f\u8fd9\u4e2a\u5185\u6838\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u751a\u81f3\u4e0d\u5728ELF\u6587\u4ef6\u4e2d\u3002\u5b83\u76f4\u63a5\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u542f\u52a8\u3002\u6211\u4eec\u53ea\u662f\u5c06\u8c03\u8bd5\u4fe1\u606f\u90e8\u5206\u76f4\u63a5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8f83\u4f4e\u7ea7\u522b\u7684API\uff1a/Initialize DWARF INFO\u3002\u8c03\u7528\u8005\u6709\u8d23\u4efb\u5728\u8c03\u7528\u4e4b\u524d\u521d\u59cb\u5316\u5927\u591a\u6570/DwarfInfo\u5b57\u6bb5\u3002\u8fd9\u4e9b\u5b57\u6bb5\u53ef\u4ee5\u4fdd\u6301\u672a\u5b9a\u4e49\u72b6\u6001\uff1a/*abbrev_table_list/*Compile_unit_listpub FN openDwarfDebugInfo(di\uff1a*DwarfInfo\uff0callocator\uff1a*mem.Allocator)\uff01void\u3002\n\u53d1\u5e03\u5e38\u91cfDwarfInfo=struct{DWARF_SEEKABLE_STREAM\uff1a*DwarfSeekableStream\uff0cdwarf_in_stream\uff1a*DwarfInStream\uff0cendian\uff1abuiltin.endian\uff0cdebug_info\uff1aSection\uff0cdebug_abbrev\uff1aSection\uff0cdebug_str\uff1aSection\uff0cdebug_line\uff1aSection\uff0cdebug_range\uff1a\uff1fSection\uff0cabbrev_table_list\uff1aArrayList(\u7f29\u5199vTableHeader\u3002\n\u8981\u5c06\u8fd9\u4e9b\u8fde\u63a5\u8d77\u6765\uff0c\u7c98\u5408\u4ee3\u7801\u9700\u8981\u5c06\u5e26\u6709\u504f\u79fb\u91cf\u7684DwarfInfo\u5b57\u6bb5\u521d\u59cb\u5316\u4e3astd.io.SeekableStream\uff0c\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4e3a\u6307\u5411\u5185\u5b58\u7684\u7b80\u5355\u6307\u9488\u3002\u901a\u8fc7\u58f0\u660e\u5916\u90e8\u53d8\u91cf\uff0c\u7136\u540e\u67e5\u770b\u5b83\u4eec\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u94fe\u63a5\u5668\u811a\u672c\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u3002\n\u5bf9\u4e8e.debug_abbrev\u3001.debug_str\u548c.debug_range\uff0c\u6211\u4e0d\u5f97\u4e0d\u5c06\u504f\u79fb\u91cf\u8bbe\u7f6e\u4e3a0\u4ee5\u89e3\u51b3LLD\u95ee\u9898\uff0c\u8ba4\u4e3a\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u8fd9\u4e9b\u90e8\u5206\u4ece0\u5f00\u59cb\u3002\nvar KERNEL_PARGIC_ALLOCATOR_BYTES\uff1a[100x1024]U8=\u672a\u5b9a\u4e49\uff1bVAR KERNEL_PARGIC_ALLOCATOR_STATE=std.heap.FixedBufferAllocator.init(kernel_panic_allocator_bytes[0..])\uff1bconst\u5185\u6838_PARGIC_ALLOCATOR=&amp\uff1bkernel_panic_allocator_state.allocator\uff1bextern VAR__DEBUG_INFO_START\uff1aU8\uff1b\u5916\u90e8VAR__DEBUG_INFO_END\uff1aU8\uff1b\u5916\u90e8VAR_DEBUG_ABBRV_START\uff1aU8\uff1b\u5916\u90e8VAR__DEBUG_ABBRV_END\uff1aU8\uff1b\u5916\u90e8VAR__DEBUG_ABBRV_START\uff1aU8\uff1b\u5916\u90e8VAR__DEBUG\u3002extern var__debug_str_end\uff1au8\uff1bextern var__debug_line_start\uff1au8\uff1bextern var__debug_line_end\uff1au8\uff1bextern var__debug_range_start\uff1au8\uff1bextern var__debug_range_end\uff1au8\uff1bfn dwarfSectionFromSymbolAbs(start\uff1a*u8\uff0cend\uff1a*u8)std.debug.DwarfInfo.Section{\u3002}fn dwarfSectionFromSymbol(start\uff1a*u8\uff0cend\uff1a*u8)std.debug.DwarfInfo.Section{return std.debug.DwarfInfo.Section{.offset=@ptrToInt(Start)\uff0c.size=@ptrToInt(End)-@ptrToInt(Start)\uff0c}\uff1b}fn getSelfDebugInfo()\uff01*std.debug.DwarfInfo{const S=\u3002var in_stream_pos\uff1ausize=0\uff1bconst in_stream=&amp\uff1bin_stream_state\uff1bfn readFn(self\uff1a*std.io.InStream(Anyerror)\uff0cbuffer\uff1a[]U8)anyerror\uff01usize{const ptr=@intToPtr([*]const U8\uff0cin_stream_pos)\uff1b@memcpy(Buffer.ptr\uff0cptr\uff0cBuffer.len)\uff1bin_stream_pos+=\u3002var SEEKABLE_STREAM_STATE=SEEKABLE_STREAM=SEEKABLE_STREAM_STATE\uff1b.earkForwardFn=SEEKFForwardFn\uff0c.getPosFn=getPosFn\uff0c.getEndPosFn=getEndPosFn\uff0c}\uff1b\u5e38\u91cfSEEKABLE_STREAM=&amp\uff1bSEEKABLE_STREAM_STATE\uff1bFn SEEKTOFn(SELF\uff1a*SeekableStream\uff0cPos\uff1au\u3002}fn getPosFn(self\uff1a*SeekableStream)anyerror\uff01usize{return in_stream_pos\uff1b}fn getEndPosFn(self\uff1a*SeekableStream)anyerror\uff01usize{return@ptrToInt(&amp\uff1b__debug_range_end)\uff1b}}\uff1bif(S.had_self_debug_info)return&amp\uff1bS.self_debug_info\uff1bS.Self_DEBUG_INFO=\u6807\u51c6\u8c03\u8bd5.DwarfInfo{.dwarf_SEEKABLE_STREAM=S.SEEKABLE_STREAM\uff0c.dwarf_in_STREAM=S.in_STREAM\uff0c.endian=builtin.Endian.Little\uff0c.debug_info=dwarfSectionFromSymbol(&amp\uff1b__debug_info_start\uff0c&amp\uff1b__DEBUG_INFO_END)\uff0c.debug_abbrev=dwarfSectionFromSymbolAbs(&amp\uff1b__debug_abbrev_start\uff0c&amp\uff1b__DEBUG_ABBRV_END)\uff0c.debug_str=dwarfSection\u3002__DEBUG_STR_START\uff0c&amp\uff1b__DEBUG_STR_END)\uff0c.debug_line=dwarfSectionFromSymbol(&amp\uff1b__debug_line_start\uff0c\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u9700\u8981\u5206\u914d\u65f6\u63a5\u53d7\u5206\u914d\u5668\u4f5c\u4e3a\u53c2\u6570\u7684Zig\u5e38\u89c1\u5b9e\u8df5\u5bf9\u4e8e\u5185\u6838\u5f00\u53d1\u975e\u5e38\u65b9\u4fbf\u3002\u6211\u4eec\u7b80\u5355\u5730\u9759\u6001\u5206\u914d\u4e00\u4e2a100 KiB\u7684\u7f13\u51b2\u533a\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u8c03\u8bd5\u4fe1\u606f\u5206\u914d\u5668\u8fdb\u884c\u4f20\u9012\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u53d8\u5f97\u592a\u5c0f\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u6574\u3002\nPub FN\u6b7b\u673a(\u6d88\u606f\uff1a[]const U8\uff0cSTACK_TRACE\uff1a\uff1f*builtin.StackTrace)noreturn{\u5e8f\u5217.log(&#34\uff1b\\n\uff01\u5185\u6838\u6b7b\u673a\uff01{}\\n&#34\uff1b\uff0cmessage)\uff1bconst wwarf_info=getSelfDebugInfo()catch|err|{Serial.log(&#34\uff1bUnable to get debug info\uff1a{}\\n&#34\uff1b\uff0c@errorName(Err))\uff1b\u6302\u8d77()\u3002var it=std.debug.StackIterator.init(first_trace_addr)\uff1bWhile(it.next())|Return_Address|{std.debug.printSourceAtAddressDwarf(DWARF_INFO\uff0cSERIAL_OUT_STREAM\uff0cRETURN_ADDRESS\uff0cTRUE\uff0c//tty color on printLineFromFile\uff0c)catch|err|{Serial.log(&#34\uff1b\u9519\u8fc7\u5806\u6808\u5e27\uff1a{}\\n&#34\uff1b\uff0c@errorName(Err))\uff1bContinue\uff1b}\uff1b}\u6302\u8d77()\uff1b}FN HANG()NORETURN{WHILE(True){}}FN printLineFromFile(out_stream\uff1avar\uff0cline_info\uff1astd.debug.LineInfo)anyerror\uff01void{seral.log(&#34\uff1bTODO\u4ece\u6587\u4ef6\u6253\u5370\u884c\\n&#34\uff1b)\uff1b}\u3002\n\u4f60\u597d\uff0c\u4e16\u754c\uff01ClashOS 0.0\uff01\u5185\u6838\u6b7b\u673a\uff01\uff1f\u4e2d\u7684\u6574\u6570overflow/home/andy/dev/clashos/src/main.zig:166:7\uff1a0x15e0\u3002(Clashos)TODO\u6253\u5370\u6587\u4ef6^\uff1f\uff1a0x1c\u4e2d\u7684\u884c\uff1f\uff1f(\uff1f)\u3002\n\u6700\u540e\u4e00\u884c\u6765\u81ea\u542f\u52a8\u6c47\u7f16\u4ee3\u7801\uff0c\u5b83\u6ca1\u6709\u6e90\u4ee3\u7801\u6620\u5c04\u3002\u4f46\u662f\u901a\u8fc7\u89c2\u5bdf\u5185\u6838\u7684\u53cd\u6c47\u7f16\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u662f\u6b63\u786e\u7684\uff1a\n0000000000000000&lt\uff1b_Start&gt\uff1b\uff1a0\uff1ad53800a0 MRS x0\uff0cMPIDR_EL1 4\uff1ad2b82001 mov x1\uff0c#0xc1000000 8\uff1a8a210000 Bic x0\uff0cx0\uff0cx1 c\uff1ab4000040 CBZ x0\uff0c14&lt\uff1bMaster&gt\uff1b10\uff1a14000003 b1c&lt\uff1b__Hang&gt\uff1b0000000000000014&lt\uff1bMaster&gt\uff1b\uff1a14\uff1ab26503\u3002\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c0x1c\u786e\u5b9e\u662f\u5bf9kernel_main\u7684\u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u5730\u5740(\u51fd\u6570\u8fd4\u56de\u65f6\u5c06\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4)\u3002\n\u4f60\u597d\uff0c\u4e16\u754c\uff01ClashOS 0.0\uff01\u5185\u6838\u6b7b\u673a\uff01\u6574\u6570overflow/home/andy/dev/clashos/src/serial.zig:42:7\uff1a0x1b10 in\uff1f(Clashos)TODO\u6253\u5370\u6587\u4ef6^/home/andy/dev/clashos/src/main.zig\uff1a58\uff1a16\uff1a0x1110\u4e2d\u7684\u884c\uff1f(Clashos)TODO\u6253\u5370\u6587\u4ef6^/home/andy/dev/clashos/src/main.zig\uff1a67\uff1a18\uff1a0xecc\u4e2d\u7684\u884c\uff1f(Clashos)TODO\u6253\u5370\u6587\u4ef6^\uff1f\uff1a0x1c\u4e2d\u7684\u884c\uff1f\uff1f(\uff1f)\u3002\n\u5b83\u770b\u8d77\u6765\u4e0d\u9519\u3002\u4f46\u662f\u6211\u4eec\u80fd\u4e0d\u80fd\u5728\u4e0a\u9762\u52a0\u4e2a\u6a31\u6843\uff0c\u8ba9\u5b83\u5370\u4e0a\u9999\u80a0\u5462\uff1f\n\u540c\u6837\uff0c\u6211\u4eec\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf\u3002printLineFromFile\u51fd\u6570\u5982\u4f55\u8bbf\u95ee\u6e90\u6587\u4ef6\uff1f\n\u6709\u65f6\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u5185\u6838\u5728\u5185\u5b58\u4e2d\u53ea\u6709\u5b83\u81ea\u5df1\u7684\u6e90\u4ee3\u7801\u5462\uff1f\nconst source_files=[][]const U8{&#34\uff1bsrc/debug.zig&#34\uff1b\uff0c&#34\uff1bsrc/main.zig&#34\uff1b\uff0c&#34\uff1bsrc/mmio.zig&#34\uff1b\uff0c&#34\uff1bsrc/seral.zig&#34\uff1b\uff0c}\uff1bfn printLineFromFile(out_stream\uff1avar\uff0cline_info\uff1astd.debug.LineInfo)anyerror\uff01void{inline for(Source_Files)|src_path|{if(std.mem.endsWith(u8\uff0cline_info.file_name\uff0csrc_path)){const Contents=@EmbedFile(&#34\uff1b../&#34\uff1b++src_path)\uff1b\u5c1d\u8bd5printLineFromBuffer(\u3002(\u6e90\u6587\u4ef6{}\u672a\u6dfb\u52a0\u5230std/debug.zig\u4e2d)\\n&#34\uff1b\uff0cline_info.file_name)\uff1b}\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5229\u7528\u4e86inline Form\u548c@EmbedFile\uff0c\u5e76\u4e14\u53ef\u4ee5\u6253\u5370\u6211\u4eec\u81ea\u5df1\u7684\u6e90\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u884c\u3002\u5c06printLineFromBuffer\u4f5c\u4e3a\u7ec3\u4e60\u7559\u7ed9\u8bfb\u8005\u3002\n\u4f60\u597d\uff0c\u4e16\u754c\uff01ClashOS 0.0\uff01\u5185\u6838\u6b7b\u673a\uff01\u6574\u6570overflow/home/andy/dev/clashos/src/serial.zig:42:7\uff1a0x1b10 in\uff1f(Clashos)x+=1\uff1b^/home/andy/dev/clashos/src/main.zig\uff1a58\uff1a16\uff1a0x1110 in\uff1f(Clashos)seral.om()\uff1b^/home/andy/dev/clashos/src/main.zig\uff1a67\uff1a18\uff1a0xecc in\uff1f(Clashos)SOME_Function()\uff1b^\uff1f\uff1a\uff1f\uff1a\uff1a0x1c\u4e2d\uff1f\uff1f(\uff1f)\u3002\n\u73b0\u5728\uff0cZig\u63d0\u4f9b\u7684\u6240\u6709\u9488\u5bf9\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u4fdd\u62a4\u90fd\u4f1a\u4ea7\u751f\u8fd9\u6837\u7684\u7ed3\u679c\u3002\n\u6211\u4f7f\u7528Zig\u7684\u4e00\u4e2a\u5927\u76ee\u6807\u662f\u6539\u8fdb\u5d4c\u5165\u5f0f\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5f00\u53d1\u8fc7\u7a0b\u3002\u6211\u5e0c\u671b\u4f60\u548c\u6211\u4e00\u6837\u5bf9\u8fd9\u91cc\u7684\u6f5c\u529b\u611f\u5230\u5174\u594b\u3002\n\u5982\u679c\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u6293\u4f4f\u4e86\u4f60\u7684\u5174\u8da3\uff0c\u4e5f\u8bb8\u4f60\u4f1a\u60f3\u770b\u770b\u8fd9\u4e2aHello World x86\u5185\u6838\uff0c\u5b83\u9644\u5e26\u4e86\u4e00\u6bb5\u6211\u5b9e\u65f6\u7f16\u7801\u7684\u89c6\u9891\u3002\u591a\u4e8f\u4e86\u4e00\u6761\u5bcc\u6709\u6d1e\u5bdf\u529b\u7684Twitch\u8bc4\u8bba\uff0c\u5b83\u53ea\u652f\u6301Zig\u4ee3\u7801\uff0c\u4e0d\u9700\u8981\u6c47\u7f16\u3002\nZig\u7f16\u7a0b\u8bed\u8a00\u662f\u4f17\u7b79\u7684\uff0c\u4e0d\u53d7\u5236\u4e8e\u4efb\u4f55\u4f01\u4e1a\u6216\u4e00\u7ec4\u4f01\u4e1a\u3002\u8bf7\u8003\u8651\u8d5e\u52a9\u6211\u7684\u5de5\u4f5c\u3002", "note_en": "Last week, I reached an exciting milestone in my career as a programmer. For the first time in my life, I ran code directly on hardware, with no Operating System sitting between the bare metal and my code.\n For some context, the goal of this side project is to create a 2-4 player arcade gamerunning directly on a Raspberry Pi 3+.\n  Having just gotten Hello World working, this software can dolittle more than send a message over the serial uART on bootup:\n   Well, when coding all of these things, I&#39;m inevitably going to run into bugsand crashes. And when this happens, I want to quickly understand what&#39;s gonewrong. Normally, in Zig, when something goes wrong, you get a nice stack trace,like this:\n  This example, however, is targeting Linux, whereas this arcade game project is freestanding. The equivalent code in freestanding actually just hangsthe CPU:\n --- a/src/main.zig+++ b/src/main.zig serial.log(&#34;Hello World! ClashOS 0.0\\n&#34;); + var x: u8 = 255;+ x += 1;+ serial.log(&#34;got here\\n&#34;);\n When run, you&#39;ll see we never get to the &#34;got here&#34; message, but alsowe don&#39;t get any kind of error message printed or anything.\n  To understand this, we can look at the  default panic handler.In Zig, you can provide a  pub fn panic in your root source filealongside  pub fn main. But if you do not provide thisfunction,  the defaultis used:\n pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn { @setCold(true); switch (builtin.os) { builtin.Os.freestanding =&gt; { while (true) {} }, else =&gt; { const first_trace_addr = @ptrToInt(@returnAddress()); std.debug.panicExtra(error_return_trace, first_trace_addr, &#34;{}&#34;, msg); }, }}\n Here we can see why the code earlier is hanging - the default panic handler for thefreestanding target is simply  while(true) {}.\n  pub fn panic(message: []const u8, stack_trace: ?*builtin.StackTrace) noreturn { serial.write(&#34;\\n!KERNEL PANIC!\\n&#34;); serial.write(message); serial.write(&#34;\\n&#34;); while(true) {}}\n   Already this is much better. We can see that an integer overflow caused a kernel panic.But an integer overflow could occur anywhere. Wouldn&#39;t it be nice to have a full stacktrace printed?\n Yes, yes it would. The first thing I needed to make this work is access to the DWARFdebugging info from inside the kernel. But I don&#39;t even have a file system. How can that work?\n Easy! Just put the DWARF info directly into the kernel&#39;s memory. I modified my linker scriptto do just that:\n .rodata : ALIGN(4K) { *(.rodata) __debug_info_start = .; KEEP(*(.debug_info)) __debug_info_end = .; __debug_abbrev_start = .; KEEP(*(.debug_abbrev)) __debug_abbrev_end = .; __debug_str_start = .; KEEP(*(.debug_str)) __debug_str_end = .; __debug_line_start = .; KEEP(*(.debug_line)) __debug_line_end = .; __debug_ranges_start = .; KEEP(*(.debug_ranges)) __debug_ranges_end = .; }\n  lld: error: incompatible section flags for .rodata&gt;&gt;&gt; /home/andy/dev/clashos/zig-cache/clashos.o:(.debug_info): 0x0&gt;&gt;&gt; output section .rodata: 0x12lld: error: incompatible section flags for .rodata&gt;&gt;&gt; &lt;internal&gt;:(.debug_str): 0x30&gt;&gt;&gt; output section .rodata: 0x12lld: error: incompatible section flags for .rodata&gt;&gt;&gt; /home/andy/dev/clashos/zig-cache/clashos.o:(.debug_line): 0x0&gt;&gt;&gt; output section .rodata: 0x32\n After a  back and forth on a bug report, George Rimar suggested simply deleting that particular check, as it might have been anoverly strict enforcement. I tried this in my LLD fork, and it worked! Debug informationwas now linked into my kernel images. After completing the rest of the steps in this blog post,I  submitted a patch upstream,which Rui has already merged into LLD. This will be released withLLVM 8, and in the meantime Zig&#39;s LLD fork has the patch.\n At this point it was a simple matter of writing the glue code between my kernel and theZig Standard Library&#39;s stack trace facilities. In Zig, you don&#39;t have to intentionally supportfreestanding mode. Code which has no dependencies on a particular operating system will workin freestanding mode thanks to Zig&#39;s  lazy top level declaration analysis.Because the standard library stack trace code does not call any OS API, it thereforesupports freestanding mode.\n The Zig std lib API for opening debug information from an ELF file looks like this:\n  But this kernel is so bare bones, it&#39;s not even in an ELF file. It&#39;s booting directly from a binary blob.We just have the debug info sections mapped directly into memory. For that we can usea lower level API: /// Initialize DWARF info. The caller has the responsibility to initialize most/// the DwarfInfo fields before calling. These fields can be left undefined:/// * abbrev_table_list/// * compile_unit_listpub fn openDwarfDebugInfo(di: *DwarfInfo, allocator: *mem.Allocator) !void\n  pub const DwarfInfo = struct { dwarf_seekable_stream: *DwarfSeekableStream, dwarf_in_stream: *DwarfInStream, endian: builtin.Endian, debug_info: Section, debug_abbrev: Section, debug_str: Section, debug_line: Section, debug_ranges: ?Section, abbrev_table_list: ArrayList(AbbrevTableHeader), compile_unit_list: ArrayList(CompileUnit),};\n To hook these up, the glue code needs to initialize the fields of DwarfInfo with the offsets into a std.io.SeekableStream, which canbe implemented as a simple pointer to memory. By declaring  external variablesand then looking at their  addresses, we can find out where in memory the symbolsdefined in the linker script are.\n For  .debug_abbrev,  .debug_str, and  .debug_ranges, I had toset the offset to 0 to workaroundLLD thinking that the sections start at 0 for some reason.\n var kernel_panic_allocator_bytes: [100 * 1024]u8 = undefined;var kernel_panic_allocator_state = std.heap.FixedBufferAllocator.init(kernel_panic_allocator_bytes[0..]);const kernel_panic_allocator = &amp;kernel_panic_allocator_state.allocator;extern var __debug_info_start: u8;extern var __debug_info_end: u8;extern var __debug_abbrev_start: u8;extern var __debug_abbrev_end: u8;extern var __debug_str_start: u8;extern var __debug_str_end: u8;extern var __debug_line_start: u8;extern var __debug_line_end: u8;extern var __debug_ranges_start: u8;extern var __debug_ranges_end: u8;fn dwarfSectionFromSymbolAbs(start: *u8, end: *u8) std.debug.DwarfInfo.Section { return std.debug.DwarfInfo.Section{ .offset = 0, .size = @ptrToInt(end) - @ptrToInt(start), };}fn dwarfSectionFromSymbol(start: *u8, end: *u8) std.debug.DwarfInfo.Section { return std.debug.DwarfInfo.Section{ .offset = @ptrToInt(start), .size = @ptrToInt(end) - @ptrToInt(start), };}fn getSelfDebugInfo() !*std.debug.DwarfInfo { const S = struct { var have_self_debug_info = false; var self_debug_info: std.debug.DwarfInfo = undefined; var in_stream_state = std.io.InStream(anyerror){ .readFn = readFn }; var in_stream_pos: usize = 0; const in_stream = &amp;in_stream_state; fn readFn(self: *std.io.InStream(anyerror), buffer: []u8) anyerror!usize { const ptr = @intToPtr([*]const u8, in_stream_pos); @memcpy(buffer.ptr, ptr, buffer.len); in_stream_pos += buffer.len; return buffer.len; } const SeekableStream = std.io.SeekableStream(anyerror, anyerror); var seekable_stream_state = SeekableStream{ .seekToFn = seekToFn, .seekForwardFn = seekForwardFn, .getPosFn = getPosFn, .getEndPosFn = getEndPosFn, }; const seekable_stream = &amp;seekable_stream_state; fn seekToFn(self: *SeekableStream, pos: usize) anyerror!void { in_stream_pos = pos; } fn seekForwardFn(self: *SeekableStream, pos: isize) anyerror!void { in_stream_pos = @bitCast(usize, @bitCast(isize, in_stream_pos) +% pos); } fn getPosFn(self: *SeekableStream) anyerror!usize { return in_stream_pos; } fn getEndPosFn(self: *SeekableStream) anyerror!usize { return @ptrToInt(&amp;__debug_ranges_end); } }; if (S.have_self_debug_info) return &amp;S.self_debug_info; S.self_debug_info = std.debug.DwarfInfo{ .dwarf_seekable_stream = S.seekable_stream, .dwarf_in_stream = S.in_stream, .endian = builtin.Endian.Little, .debug_info = dwarfSectionFromSymbol(&amp;__debug_info_start, &amp;__debug_info_end), .debug_abbrev = dwarfSectionFromSymbolAbs(&amp;__debug_abbrev_start, &amp;__debug_abbrev_end), .debug_str = dwarfSectionFromSymbolAbs(&amp;__debug_str_start, &amp;__debug_str_end), .debug_line = dwarfSectionFromSymbol(&amp;__debug_line_start, &amp;__debug_line_end), .debug_ranges = dwarfSectionFromSymbolAbs(&amp;__debug_ranges_start, &amp;__debug_ranges_end), .abbrev_table_list = undefined, .compile_unit_list = undefined, }; try std.debug.openDwarfDebugInfo(&amp;S.self_debug_info, kernel_panic_allocator); return &amp;S.self_debug_info;}\n You can see that the Zig common practice of accepting an allocator as an argument whenallocation is needed comes in extremely handy for kernel development. We simply staticallyallocate a 100 KiB buffer and pass that along as the debug info allocator. If this everbecomes too small, it can be adjusted.\n  pub fn panic(message: []const u8, stack_trace: ?*builtin.StackTrace) noreturn { serial.log(&#34;\\n!KERNEL PANIC! {}\\n&#34;, message); const dwarf_info = getSelfDebugInfo() catch |err| { serial.log(&#34;unable to get debug info: {}\\n&#34;, @errorName(err)); hang(); }; const first_trace_addr = @ptrToInt(@returnAddress()); var it = std.debug.StackIterator.init(first_trace_addr); while (it.next()) |return_address| { std.debug.printSourceAtAddressDwarf( dwarf_info, serial_out_stream, return_address, true, // tty color on printLineFromFile, ) catch |err| { serial.log(&#34;missed a stack frame: {}\\n&#34;, @errorName(err)); continue; }; } hang();}fn hang() noreturn { while (true) {}}fn printLineFromFile(out_stream: var, line_info: std.debug.LineInfo) anyerror!void { serial.log(&#34;TODO print line from the file\\n&#34;);}\n  Hello World! ClashOS 0.0!KERNEL PANIC! integer overflow/home/andy/dev/clashos/src/main.zig:166:7: 0x15e0 in ??? (clashos)TODO print line from the file ^???:?:?: 0x1c in ??? (???)\n  That last line is coming from the startup assembly code, which has nosource mapping. But we can see that it&#39;s correct, by looking atthe disassembly of the kernel:\n 0000000000000000 &lt;_start&gt;: 0:\td53800a0 \tmrs\tx0, mpidr_el1 4:\td2b82001 \tmov\tx1, #0xc1000000 8:\t8a210000 \tbic\tx0, x0, x1 c:\tb4000040 \tcbz\tx0, 14 &lt;master&gt; 10:\t14000003 \tb\t1c &lt;__hang&gt;0000000000000014 &lt;master&gt;: 14:\tb26503ff \tmov\tsp, #0x8000000 18:\t9400054b \tbl\t1544 &lt;kernel_main&gt;000000000000001c &lt;__hang&gt;: 1c:\td503205f \twfe 20:\t17ffffff \tb\t1c &lt;__hang&gt;\n You can see that  0x1c is indeed the return address(the next instruction that will be executed when the function returns)of the function call to  kernel_main.\n  Hello World! ClashOS 0.0!KERNEL PANIC!integer overflow/home/andy/dev/clashos/src/serial.zig:42:7: 0x1b10 in ??? (clashos)TODO print line from the file ^/home/andy/dev/clashos/src/main.zig:58:16: 0x1110 in ??? (clashos)TODO print line from the file ^/home/andy/dev/clashos/src/main.zig:67:18: 0xecc in ??? (clashos)TODO print line from the file ^???:?:?: 0x1c in ??? (???)\n It&#39;s looking good. But can we add a cherry on top, and make it print the sourcelines?\n Again we don&#39;t have a file system. How can the  printLineFromFile functionhave access to source files?\n Sometimes the simplest solution is the best one. How about the kernel just has its ownsource code in memory?\n  const source_files = [][]const u8{ &#34;src/debug.zig&#34;, &#34;src/main.zig&#34;, &#34;src/mmio.zig&#34;, &#34;src/serial.zig&#34;,};fn printLineFromFile(out_stream: var, line_info: std.debug.LineInfo) anyerror!void { inline for (source_files) |src_path| { if (std.mem.endsWith(u8, line_info.file_name, src_path)) { const contents = @embedFile(&#34;../&#34; ++ src_path); try printLineFromBuffer(out_stream, contents[0..], line_info); return; } } try out_stream.print(&#34;(source file {} not added in std/debug.zig)\\n&#34;, line_info.file_name);}\n Here we take advantage of  inline foras well as  @embedFile, and all the suddenwe can print lines of code from our own source files.  printLineFromBuffer left as an exercise for the reader.\n  Hello World! ClashOS 0.0!KERNEL PANIC!integer overflow/home/andy/dev/clashos/src/serial.zig:42:7: 0x1b10 in ??? (clashos) x += 1; ^/home/andy/dev/clashos/src/main.zig:58:16: 0x1110 in ??? (clashos) serial.boom(); ^/home/andy/dev/clashos/src/main.zig:67:18: 0xecc in ??? (clashos) some_function(); ^???:?:?: 0x1c in ??? (???)\n   And now all of the protections that Zig offers against undefined behaviorwill result in output like this.\n  One of my big goals with Zig is to improve the embedded and OS developmentprocess. I hope you&#39;re as excited as I am about the potential here.\n If this blog post captured your interest, maybe you would like to check out this Hello World x86 Kernel, which comes with a video of me live coding it.Thanks to an insightful Twitch comment, it works with only Zig code, no assembly required.\n The  Zig Programming Language is crowd funded,and is not beholden to any business or set of businesses. Please consider sponsoring my work.", "posttime": "2020-06-28 06:19:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "zig,provide,\u5185\u6838", "title": "\u4f7f\u7528Zig\u63d0\u4f9b\u88f8\u673a\u4e0a\u5185\u6838\u6b7b\u673a\u7684\u5806\u6808\u8ddf\u8e2a", "title_en": "Using Zig to provide stack traces on kernel panic on bare metal", "transed": 1, "url": "https://andrewkelley.me/post/zig-stack-traces-kernel-panic-bare-bones-os.html", "via": "", "real_tags": ["zig", "provide", "\u5185\u6838"]}, {"category": "", "categoryclass": "", "imagename": "b628e4c8ee2f9ee13b7f8cf39eb6c97d.png", "infoid": 1008663, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e94\u7528\u8303\u7574\u7406\u8bba2020\u5373\u5c06\u5230\u6765\uff01\u57287\u67086\u65e5\u5468\u65e5\u7684\u8f85\u5bfc\u65e5\u4e4b\u540e\uff0c7\u67087\u65e5\u661f\u671f\u4e00\u52307\u670810\u65e5\u661f\u671f\u4e94\u5c06\u6709\u8bb2\u5ea7\u3002\u4ee5\u4e0b\u662f\u8be5\u7a0b\u5e8f-\u5355\u51fb\u5b83\u4e0b\u8f7d\u66f4\u5177\u53ef\u8bfb\u6027\u7684\u7248\u672c\uff1a\n\u4ee5\u4e0b\u662f\u8c08\u8bdd\u5185\u5bb9\uff01\u5b83\u4eec\u6709\u4e09\u79cd\uff1a\u4e3b\u65e8\u6f14\u8bb2\u3001\u5b9a\u671f\u6f14\u793a\u548c\u7b80\u77ed\u7684\u884c\u4e1a\u6f14\u793a\u3002\u5728\u6bcf\u4e00\u672c\u4e66\u4e2d\uff0c\u6211\u90fd\u6309\u7167\u6f14\u8bb2\u8005\u7684\u5b57\u6bcd\u987a\u5e8f\u5217\u51fa\u4e86\u5b83\u4eec\uff1a\u6211\u76f8\u4fe1\u7b2c\u4e00\u4f5c\u8005\u5c31\u662f\u6f14\u8bb2\u8005\u3002\n\u00b7\u5e03\u83b1\u65af\u00b7\u514b\u62c9\u514b(Bryce Clarke)\u3001\u5fb7\u91cc\u514b\u00b7\u57c3\u5c14\u91d1\u65af(Derek Elkins)\u3001\u6770\u91cc\u7c73\u00b7\u5409\u672c\u65af(Jeremy Gibbons)\u3001\u798f\u65af\u79d1\u00b7\u6d1b\u96f7\u6839(Fosco Loregian)\u3001\u5df4\u6258\u5179\u00b7\u7c73\u5217\u592b\u65af\u57fa(Bartosz Milewski)\u3001\u827e\u7c73\u8389\u00b7\u76ae\u5c14\u83ab\u5c14(Emily Pillmore)\u548c\u9a6c\u91cc\u5965\u00b7\u3002\n\u00b7Tobias Fritz\uff0cTom\u00e1\u0161Gonda\uff0cPaolo Perrone\u548cEigil Rischel\uff1a\u5206\u5e03\u51fd\u5b50\uff0c\u4e8c\u9636\u968f\u673a\u652f\u914d\u548c\u7edd\u5bf9\u6982\u7387\u4e2d\u7684Blackwell-Sherman-Stein\u5b9a\u7406\u3002\n\u00b7\u7c73\u5361\u00b7\u54c8\u5c14\u7279(Micah Halt)\u3001\u57c3\u6587\u00b7\u5e15\u7279\u68ee(Evan Patterson)\u3001\u5b89\u5fb7\u9c81\u00b7\u5df4\u65af(Andrew Baas)\u548c\u8a79\u59c6\u65af\u00b7\u8d39\u5c14\u73ed\u514b\u65af(James Fairbank)\uff1a\u4f7f\u7528Catlab\u548cSemancModels\u8fdb\u884c\u3002\n\u00b7Lachlan McPhot\uff0cMehrnoosh Sadrzadeh\uff0cHadi Wazni\u548cGijs Wijnhold\uff0cLambek\u6f14\u7b97\u7684\u8303\u7574\u5411\u91cf\u7a7a\u95f4\u8bed\u4e49\u5b66\u548c\u76f8\u5173\u6a21\u6001\u3002\n\u00b7\u7f57\u4f2f\u7279\u00b7\u963f\u57fa(Robert Atkey)\u3001\u5e03\u9c81\u8bfa\u00b7\u52a0\u592b\u62c9\u8bfa\u7ef4\u5947(Bruno Gavranovi\u0107)\u3001\u5c3c\u5c14\u00b7\u52a0\u5c3c(Neil Ghani)\u3001\u514b\u83b1\u95e8\u65af\u00b7\u5e93\u666e\u514b(Clemens Kupke)\u3001\u6770\u91cc\u7c73\u00b7\u83b1\u767b\u7279(Jeremy Ledent)\u548c\u5f17\u96f7\u5fb7\u91cc\u514b\u00b7\u8bfa\u5fb7\u74e6\u5c14\u00b7\u798f\u65af\u4f2f\u683c(Fre\u3002\n\u00b7\u9a6c\u5c14\u79d1\u00b7\u8d1d\u5c3c\u5c3c(Marco Benini)\u3001\u9a6c\u5c14\u79d1\u00b7\u4f69\u6797(Marco Perin)\u3001\u4e9a\u5386\u5c71\u5927\u00b7\u7533\u514b\u5c14(Alexander Schenkel)\u548c\u5362\u5361\u65af\u00b7\u6c83\u514b\uff1a\u4ee3\u6570\u91cf\u5b50\u573a\u8bba\u7684\u8303\u7574\u5316\u3002\n\u00b7\u9c8d\u52c3\u00b7\u79d1\u514b(Bob Coecke)\u3001\u4e54\u74e6\u5c3c\u00b7\u5fb7\u00b7\u8d39\u5229\u65af(Giovanni De Felice)\u3001\u5eb7\u65af\u5766\u8482\u8bfa\u65af\u00b7\u6885\u574e\u5185\u9f50\u8fea\u65af(Konstantinos Meichanetzidis)\u3001\u4e9a\u5386\u514b\u897f\u65af\u00b7\u56fe\u7c73(Alexis Toumi\u3002\n\u00b7\u6770\u5f17\u91cc\u00b7\u514b\u9c81\u7279\u7ef4\u5c14(Geoffrey Cruttwell)\u3001\u4e54\u7eb3\u68ee\u00b7\u52a0\u62c9\u683c\u5c14(Jonathan Gallagher)\u548c\u591a\u96f7\u7279\u00b7\u666e\u6717\u514b(Dorette Pronk)\uff1a\u7b80\u5355\u5dee\u5206\u7f16\u7a0b\u8bed\u8a00\u7684\u8303\u7574\u8bed\u4e49\u3002\n\u00b7\u4e54\u74e6\u5c3c\u00b7\u5fb7\u00b7\u8d39\u5229\u65af(Giovanni De Felice)\u3001\u57c3\u7433\u5a1c\u00b7\u8fea\u00b7\u62c9\u6c83\u5c14(Elena Di Lavore)\u3001\u9a6c\u91cc\u5965\u00b7\u7f57\u66fc(Mario Rom\u00e1n)\u548c\u4e9a\u5386\u514b\u897f\u65af\u00b7\u56fe\u7c73(Alexis Toumi\u3002\n\u00b7\u5e03\u4f26\u4e39\u00b7\u65b9(Brendan Fong)\u3001\u5927\u536b\u00b7\u8d3e\u5179\u00b7\u8fc8\u5c14\u65af(David Jaz Myers)\u548c\u5927\u536b\u00b7I\u00b7\u65af\u76ae\u74e6\u514b(David I.Spivak)\uff1a\u884c\u4e3a\u5e02\u573a\u5b66\uff1a\u4f20\u9012\u7ea6\u675f\u7684\u6a21\u6001\u3002\n\u00b7\u7f57\u79d1\u00b7\u7518\u683c(Rocco Gangle)\u3001\u5409\u5b89\u5362\u5361\u00b7\u5361\u7279\u7433\u5a1c(Gianluca Caterina)\u548c\u8d39\u5c14\u5357\u591a\u00b7\u6258\u6885(Fernando Tohme)\uff0c\u76ae\u5c14\u65af\u5b58\u5728\u4e3b\u4e49\u56fe(Alpha)\u7684\u4e00\u822c\u4eba\u7269\u91cd\u6784\u3002\n\u00b7\u8fc8\u514b\u5c14\u00b7\u7ea6\u7ff0\u900a(Michael Johnson)\u548c\u7f57\u4f2f\u7279\u00b7\u7f57\u65af\u5e03\u9c81(Robert Rosebrogh)\uff0c\u817f\u8d8a\u591a\u8d8a\u5feb\u4e50\uff1a\u5bf9\u79f0(\u591a\u91cd)\u955c\u5934\u7684\u65b0\u6210\u5206\u3002\n\u00b7Tarmo Uustau\uff0cNiccolo Veltri\u548cNoam Zeilberger\uff1a\u90e8\u5206\u6b63\u89c4\u659c\u5e7a\u534a\u7fa4\u8303\u7574\u7684\u8bc1\u660e\u7406\u8bba\u3002\n\u00b7\u5fb7\u7c73\u7279\u91cc\u00b7\u74e6\u683c\u7eb3(Dmitry Vagner)\u3001\u5927\u536b\u00b7I\u00b7\u65af\u76ae\u74e6\u514b(David I.Spivak)\u548c\u57c3\u6587\u00b7\u5e15\u7279\u68ee(Evan Patterson)\u3002\n\u00b7\u9a6c\u4fee\u00b7\u5a01\u5c14\u900a(Matthew Wilson)\u3001\u8a79\u59c6\u65af\u00b7\u8d6b\u798f\u5fb7(James Hford)\u3001\u7eaa\u5c27\u59c6\u00b7\u535a\u4f0a\u7d22(Guillaume Boisseau)\u548c\u6587\u68ee\u7279\u00b7\u738b(Vincent Wang)\uff1a\u66f4\u65b0\u7ed3\u6784\u4e4b\u65c5\uff1a\u53c2\u89c2\u955c\u5934\u548c\u91cf\u5b50\u5c01\u95ed\u7a7a\u95f4\u3002\n\u00b7\u4fdd\u7f57\u00b7\u5a01\u5c14\u900a(Paul Wilson)\u548c\u6cd5\u6bd4\u5965\u00b7\u624e\u7eb3\u897f(Fabio Zanasi)\uff1a\u9006\u5bfc\u6570\u4e0a\u5347\uff1a\u5b66\u4e60\u5e03\u5c14\u7535\u8def\u7684\u4e00\u79cd\u5206\u7c7b\u65b9\u6cd5\u3002\n\u00b7\u4e54\u57c3\u52d2\u00b7\u624e\u5c14\u8fea\u5c3c(Gioele Zardini)\u3001\u5927\u536b\u00b7I\u00b7\u65af\u76ae\u74e6\u514b(David I.Spivak)\u3001\u5b89\u5fb7\u91cc\u4e9a\u00b7\u68ee\u897f(Andrea Censi)\u548c\u57c3\u7c73\u5229\u5965\u00b7\u5f17\u62c9\u4f50\u5229(Emily Io Frazzoli)\uff1a\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7cfb\u7edf\u7684\u7ec4\u5408", "note_en": "Applied Category Theory 2020 is coming up soon! After the  Tutorial Day on Sunday July 6th, there will be talks from Monday July 7th to Friday July 10th. Here is the program\u2014click on it to download a more readable version:\n   Here are the talks! They come in three kinds: keynotes, regular presentations and short industry presentations. Within each I\u2019ve listed them in alphabetical order by speaker: I believe the first author is the speaker.\n     \u2022 Bryce Clarke, Derek Elkins, Jeremy Gibbons, Fosco Loregian, Bartosz Milewski, Emily Pillmore and Mario Rom\u00e1n: Profunctor optics, a categorical update.\n \u2022 Tobias Fritz, Tom\u00e1\u0161 Gonda, Paolo Perrone and Eigil Rischel: Distribution functors, second-order stochastic dominance and the Blackwell\u2013Sherman\u2013Stein Theorem in categorical probability.\n \u2022 Micah Halter, Evan Patterson, Andrew Baas and James Fairbanks: Compositional scientific computing with Catlab and SemanticModels.\n     \u2022 Lachlan McPheat, Mehrnoosh Sadrzadeh, Hadi Wazni and Gijs Wijnholds, Categorical vector space semantics for Lambek calculus with a relevant modality.\n    \u2022 Robert Atkey, Bruno Gavranovi\u0107, Neil Ghani, Clemens Kupke, Jeremy Ledent and Fredrik Nordvall Forsberg: Compositional game theory, compositionally.\n   \u2022 Marco Benini, Marco Perin, Alexander Alexander Schenkel and Lukas Woike: Categorification of algebraic quantum field theories.\n   \u2022 Bob Coecke, Giovanni de Felice, Konstantinos Meichanetzidis, Alexis Toumi, Stefano Gogioso and Nicolo Chiappori: Quantum natural language processing.\n \u2022 Geoffrey Cruttwell, Jonathan Gallagher and Dorette Pronk: Categorical semantics of a simple differential programming language.\n  \u2022 Giovanni de Felice, Elena Di Lavore, Mario Rom\u00e1n and Alexis Toumi: Functorial language games for question answering.\n  \u2022 Brendan Fong, David Jaz Myers and David I. Spivak: Behavioral mereology: a modal logic for passing constraints.\n \u2022 Rocco Gangle, Gianluca Caterina and Fernando Tohme, A generic figures reconstruction of Peirce\u2019s existential graphs (alpha).\n   \u2022 Michael Johnson and Robert Rosebrugh, The more legs the merrier: A new composition for symmetric (multi-)lenses.\n           \u2022 Tarmo Uustalu, Niccol\u00f2 Veltri and Noam Zeilberger: Proof theory of partially normal skew monoidal categories.\n \u2022 Dmitry Vagner, David I. Spivak and Evan Patterson: Wiring diagrams as normal forms for computing in symmetric monoidal categories.\n \u2022 Matthew Wilson, James Hefford, Guillaume Boisseau and Vincent Wang: The safari of update structures: visiting the lens and quantum enclosures.\n \u2022 Paul Wilson and Fabio Zanasi: Reverse derivative ascent: a categorical approach to learning Boolean circuits.\n  \u2022 Gioele Zardini, David I. Spivak, Andrea Censi and Emilio Frazzoli: A compositional sheaf-theoretic framework for event-based systems.", "posttime": "2020-06-28 06:19:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u5e94\u7528,category,\u8303\u7574", "title": "\u5e94\u7528\u8303\u7574\u8bba2020\u5373\u5c06\u5230\u6765", "title_en": "Applied Category Theory 2020 is coming up soon", "transed": 1, "url": "https://johncarlosbaez.wordpress.com/2020/06/27/act2020-program/", "via": "", "real_tags": ["2020", "\u5e94\u7528", "category", "\u8303\u7574"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008662, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6240\u4ee5\u6211\u4e2a\u4eba\u53ef\u4ee5\u5bf9\u6b64\u53d1\u8868\u610f\u89c1\u3002\u6211\u5bf9\u8fd9\u6b3e\u5e94\u7528\u8fdb\u884c\u4e86\u53cd\u5411\u5de5\u7a0b\uff0c\u5e76\u81ea\u4fe1\u5730\u8868\u793a\uff0c\u6211\u5bf9\u8fd9\u6b3e\u5e94\u7528\u7684\u64cd\u4f5c\u65b9\u5f0f(\u6216\u8005\u81f3\u5c11\u51e0\u4e2a\u6708\u524d\u7684\u64cd\u4f5c\u65b9\u5f0f)\u6709\u975e\u5e38\u6df1\u523b\u7684\u7406\u89e3\u3002\nTikTok\u662f\u4e00\u9879\u51e0\u4e4e\u4e0d\u52a0\u63a9\u9970\u7684\u793e\u4ea4\u7f51\u7edc\u6570\u636e\u6536\u96c6\u670d\u52a1\u3002\u5982\u679c\u6709API\u53ef\u4ee5\u83b7\u53d6\u6709\u5173\u60a8\u3001\u60a8\u7684\u8054\u7cfb\u4eba\u6216\u60a8\u7684\u8bbe\u5907\u7684\u4fe1\u606f.\u3002\u55ef\uff0c\u4ed6\u4eec\u6b63\u5728\u7528\u5b83\u3002\n\u7535\u8bdd\u786c\u4ef6(CPU\u7c7b\u578b\u3001\u8bfe\u7a0b\u6570\u91cf\u3001\u786c\u4ef6ID\u3001\u5c4f\u5e55\u5c3a\u5bf8\u3001dpi\u3001\u5185\u5b58\u4f7f\u7528\u91cf\u3001\u78c1\u76d8\u7a7a\u95f4\u7b49)\u3002\n\u4f60\u5b89\u88c5\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f(\u6211\u751a\u81f3\u770b\u5230\u8fc7\u4e00\u4e9b\u6211\u5df2\u7ecf\u5220\u9664\u7684\u5e94\u7528\u7a0b\u5e8f\u51fa\u73b0\u5728\u5b83\u4eec\u7684\u5206\u6790\u8d1f\u8f7d\u4e2d--\u53ef\u80fd\u4f1a\u7528\u4f5c\u7f13\u5b58\u503c\uff1f)\u3002\n\u8fd9\u6b3e\u5e94\u7528\u7684\u4e00\u4e9b\u53d8\u79cd\u5f53\u65f6\u542f\u7528\u4e86GPS ping\uff0c\u5927\u7ea6\u6bcf30\u79d2\u4e00\u6b21-\u5982\u679c\u60a8\u66fe\u7ecf\u5bf9\u5e16\u5b50IIRC\u8fdb\u884c\u4f4d\u7f6e\u6807\u8bb0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u542f\u7528\u8fd9\u4e00\u529f\u80fd\u3002\n\u4ed6\u4eec\u5728\u60a8\u7684\u8bbe\u5907\u4e0a\u8bbe\u7f6e\u4e86\u7528\u4e8e\u8f6c\u7801\u5a92\u4f53\u7684\u672c\u5730\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4f46\u8fd9\u5f88\u5bb9\u6613\u88ab\u6ee5\u7528\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u8eab\u4efd\u9a8c\u8bc1\u3002\n\u6240\u6709\u8fd9\u4e9b\u4e2d\u6700\u53ef\u6015\u7684\u90e8\u5206\u662f\uff0c\u4ed6\u4eec\u6b63\u5728\u505a\u7684\u5f88\u591a\u65e5\u5fd7\u8bb0\u5f55\u90fd\u662f\u53ef\u4ee5\u8fdc\u7a0b\u914d\u7f6e\u7684\uff0c\u9664\u975e\u60a8\u53cd\u8f6c\u4ed6\u4eec\u7684\u6bcf\u4e00\u4e2a\u672c\u5730\u5e93(\u9605\u8bfb\u6240\u6709\u7a0b\u5e8f\u96c6\u90fd\u5f88\u6709\u8da3\uff0c\u5047\u8bbe\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ed6\u4eec\u5b9a\u5236\u7684OLLVM\u5206\u652f\uff01)\u3002\u5e76\u4e14\u624b\u52a8\u68c0\u67e5\u6bcf\u4e2a\u5355\u72ec\u7684\u6a21\u7cca\u51fd\u6570\u3002\u4ed6\u4eec\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u4fdd\u62a4\u63aa\u65bd\uff0c\u53ef\u4ee5\u9632\u6b62\u4f60\u9006\u8f6c\u6216\u8c03\u8bd5\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u4f60\u6b63\u5728\u8bd5\u56fe\u5f04\u6e05\u695a\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a\u4f1a\u7565\u6709\u6539\u53d8\u3002\u5728Android\u7248\u672c\u4e0a\u4e5f\u6709\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\uff0c\u5141\u8bb8\u4e0b\u8f7d\u8fdc\u7a0bzip\u6587\u4ef6\u3001\u89e3\u538b\u7f29\u548c\u6267\u884c\u6240\u8ff0\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u6ca1\u6709\u7406\u7531\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u4f1a\u5408\u6cd5\u5730\u9700\u8981\u6b64\u529f\u80fd\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u4ed6\u4eec\u4f7f\u7528HTTPS\u7684\u65f6\u95f4\u751a\u81f3\u6700\u957f\u3002\u4ed6\u4eec\u5728HTTP rest API\u4e2d\u6cc4\u9732\u4e86\u7528\u6237\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u4ee5\u53ca\u7528\u4e8e\u5bc6\u7801\u91cd\u7f6e\u7684\u6b21\u8981\u7535\u5b50\u90ae\u4ef6\u3002\u4e0d\u8981\u5fd8\u8bb0\u7528\u6237\u7684\u771f\u5b9e\u59d3\u540d\u548c\u751f\u65e5\u3002\u51e0\u4e2a\u6708\u524d\uff0c\u5982\u679c\u4f60\u4e0b\u8f7d\u4e86\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u5c31\u53ef\u4ee5\u5168\u90e8\u516c\u5f00\u67e5\u770b\u4e86\u3002\n\u4ed6\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u75c5\u6bd2\u5f0f\u7684\u4f53\u9a8c\uff0c\u4ee5\u5438\u5f15\u4ed6\u4eec\u7559\u5728\u5e73\u53f0\u4e0a\u3002\u4f60\u7684\u7b2c\u4e00\u4e2aTikTok\u5e16\u5b50\u53ef\u80fd\u4f1a\u83b7\u5f97\u76f8\u5f53\u591a\u7684\u8d5e\uff0c\u65e0\u8bba\u5b83\u6709\u591a\u597d\u3002\u5047\u8bbe\u4f60\u901a\u8fc7\u4e86\u6700\u521d\u7684\u5ba1\u6838\u961f\u5217\uff0c\u5982\u679c\u8fd9\u8fd8\u662f\u4e00\u4ef6\u4e8b\u7684\u8bdd\u3002\u5927\u591a\u6570\u7528\u6237\u6700\u7ec8\u90fd\u4f1a\u8ffd\u9010\u8fd9\u6761\u9f99\u3002\u54e6\uff0c\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u8fd8\u6709\u4e00\u5927\u5806\u53ef\u4ee5\u76f4\u63a5\u63a5\u89e6\u5230\u5b69\u5b50\u4eec\u7684\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u8001\u4eba\uff0c\u6211\u4eb2\u773c\u770b\u5230(\u5e76\u62a5\u544a)\u4e86\u4e00\u4e9b\u975e\u5e38\u53ef\u7591\u7684\u4e1c\u897f\u300240-50\u5c81\u7684\u7537\u6027\u8ba98-10\u5c81\u7684\u5973\u5b69\u4e0e\u4ed6\u4eec\u4e00\u8d77\u5531\u5e26\u6709\u6027\u6697\u793a\u7684\u6b4c\u66f2\u8fdb\u884c\u4e8c\u91cd\u5531\u3002\u8fd9\u4e9b\u89c6\u9891\u90fd\u662f\u516c\u5f00\u53d1\u5e03\u7684\u3002TikTok\u5177\u6709\u76f4\u63a5\u6d88\u606f\u4f20\u9012\u529f\u80fd\u3002\n\u4e0d\u8fc7\uff0c\u4e8b\u60c5\u662f\u8fd9\u6837\u7684..\u3002\u4ed6\u4eec\u4e0d\u60f3\u8ba9\u4f60\u77e5\u9053\u4ed6\u4eec\u6536\u96c6\u4e86\u591a\u5c11\u5173\u4e8e\u4f60\u7684\u4fe1\u606f\uff0c\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u96c6\u4e2d\u5728\u4e00\u4e2a\u5730\u65b9\u7684\u5b89\u5168\u5f71\u54cd\u662f\u4ed6\u5988\u7684\u5de8\u5927\u7684\u3002\u4ed6\u4eec\u7528\u4e00\u79cd\u7b97\u6cd5\u52a0\u5bc6\u6240\u6709\u7684\u5206\u6790\u8bf7\u6c42\uff0c\u8be5\u7b97\u6cd5\u4f1a\u968f\u7740\u6bcf\u6b21\u66f4\u65b0\u800c\u6539\u53d8(\u81f3\u5c11\u5bc6\u94a5\u4f1a\u6539\u53d8)\uff0c\u8fd9\u6837\u4f60\u5c31\u770b\u4e0d\u5230\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\u4e86\u3002\u4ed6\u4eec\u8fd8\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u5982\u679c\u4f60\u5728DNS\u7ea7\u522b\u963b\u6b62\u4e0e\u4ed6\u4eec\u7684\u5206\u6790\u4e3b\u673a\u7684\u901a\u4fe1\uff0c\u4f60\u5c31\u6839\u672c\u65e0\u6cd5\u4f7f\u7528\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u3002\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6211\u5df2\u7ecf\u9006\u8f6c\u4e86Instagram\u3001Facebook\u3001Reddit\u548cTwitter\u5e94\u7528\u7a0b\u5e8f\u3002\u4ed6\u4eec\u6536\u96c6\u7684\u6570\u636e\u91cf\u4e0eTikTok\u76f8\u53bb\u751a\u8fdc\uff0c\u800c\u4e14\u4ed6\u4eec\u80af\u5b9a\u4e0d\u4f1a\u50cfTikTok\u90a3\u6837\u76f4\u63a5\u8bd5\u56fe\u9690\u85cf\u53d1\u9001\u7684\u5185\u5bb9\u3002\u8fd9\u5c31\u50cf\u628a\u4e00\u676f\u6c34\u6bd4\u4f5c\u6d77\u6d0b--\u5b83\u4eec\u6839\u672c\u65e0\u6cd5\u6bd4\u8f83\u3002\n\u6211\u662f\u4e00\u4e2a\u77e5\u9053\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u5de5\u4f5c\u7684\u4e66\u5446\u5b50\u3002\u79f0\u5176\u4e3a\u5e7f\u544a\u5e73\u53f0\u662f\u4e00\u79cd\u8f7b\u63cf\u6de1\u5199\u7684\u8bf4\u6cd5\u3002TikTok\u672c\u8d28\u4e0a\u662f\u9488\u5bf9\u513f\u7ae5\u7684\u6076\u610f\u8f6f\u4ef6\u3002\u4e0d\u8981\u4f7f\u7528TikTok\u3002\u4e0d\u8981\u8ba9\u4f60\u7684\u670b\u53cb\u548c\u5bb6\u4eba\u4f7f\u7528\u5b83\u3002\n\u7f16\u8f91\uff1a\u8fd9\u592a\u5938\u5f20\u4e86--\u62b1\u6b49\u6253\u9519\u4e86\uff0c\u6211\u5f88\u5feb\u5c31\u5199\u597d\u4e86\u8fd9\u6761\u8bc4\u8bba\u3002\u6211\u611f\u8c22\u91d1\u724c/\u5956\u52b1/\u7b49\u4eba\uff0c\u4f46\u8001\u5b9e\u8bf4\uff0c\u6211\u53ea\u662f\u5f88\u9ad8\u5174\u6211\u7ec8\u4e8e\u80fd\u591f\u628a\u8fd9\u4e9b\u4fe1\u606f\u653e\u5728\u4eba\u4eec\u9762\u524d(\u5373\u4f7f\u5b83\u53ef\u80fd\u4f1a\u8fc7\u65f6\u51e0\u4e2a\u6708)\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u540d\u5b89\u5168\u7814\u7a76\u5458\uff0c\u60f3\u770b\u770b\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u65b0\u7248\u672c\uff0c\u7ed9\u6211\u53d1\u4e2aPM\uff0c\u6211\u4f1a\u7ed9\u4f60\u6240\u6709\u7684\u4fe1\u606f\uff0c\u4f5c\u4e3a\u4f60\u505a\u4e8b\u60c5\u7684\u8df3\u8dc3\u70b9\u3002\n\u7f16\u8f913\uff1a\u66f4\u65b0\u4e86Penetrum\u94fe\u63a5\u5e76\u6dfb\u52a0\u4e86Zimperium\u7684\u62a5\u544a(\u9700\u8981\u60a8\u624b\u52a8\u7533\u8bf7)\u3002\n\u4e0a\u8ff0Penetrum\u94fe\u63a5\u4f3c\u4e4e\u5df2\u6d88\u5931\u3002\u5176\u4ed6\u4eba\u5728\u8fd9\u91cc\u94fe\u63a5\u4e86\u8fd9\u4efd\u62a5\u7eb8\uff1ahttps://penetrum.com/research", "note_en": "So I can personally weigh in on this. I reverse-engineered the app, and feel confident in stating that I have a very strong understanding for how the app operates (or at least operated as of a few months ago).\n TikTok is a data collection service that is thinly-veiled as a social network. If there is an API to get information on you, your contacts, or your device... well, they&#39;re using it.\n Phone hardware (cpu type, number of course, hardware ids, screen dimensions, dpi, memory usage, disk space, etc)\n Other apps you have installed (I&#39;ve even seen some I&#39;ve deleted show up in their analytics payload - maybe using as cached value?)\n   Some variants of the app had GPS pinging enabled at the time, roughly once every 30 seconds - this is enabled by default if you ever location-tag a post IIRC\n They set up a local proxy server on your device for &#34;transcoding media&#34;, but that can be abused very easily as it has zero authentication\n The scariest part of all of this is that much of the logging they&#39;re doing is remotely configurable, and unless you reverse every single one of their native libraries (have fun reading all of that assembly, assuming you can get past their customized fork of OLLVM!!!) and manually inspect every single obfuscated function. They have several different protections in place to prevent you from reversing or debugging the app as well. App behavior changes slightly if they know you&#39;re trying to figure out what they&#39;re doing. There&#39;s also a few snippets of code on the Android version that allows for the downloading of a remote zip file, unzipping it, and executing said binary. There is zero reason a mobile app would need this functionality legitimately.\n On top of all of the above, they weren&#39;t even using HTTPS for the longest time. They leaked users&#39; email addresses in their HTTP REST API, as well as their secondary emails used for password resets. Don&#39;t forget about users&#39; real names and birthdays, too. It was allllll publicly viewable a few months ago if you MITM&#39;d the application.\n They provide users with a taste of &#34;virality&#34; to entice them to stay on the platform. Your first TikTok post will likely garner quite a bit of likes, regardless of how good it is.. assuming you get past the initial moderation queue if thats still a thing. Most users end up chasing the dragon. Oh, there&#39;s also a ton of creepy old men who have direct access to children on the app, and I&#39;ve personally seen (and reported) some really suspect stuff. 40-50 year old men getting 8-10 year old girls to do &#34;duets&#34; with them with sexually suggestive songs. Those videos are posted publicly. TikTok has direct messaging functionality.\n Here&#39;s the thing though.. they don&#39;t want you to know how much information they&#39;re collecting on you, and the security implications of all of that data in one place, en masse, are fucking huge. They encrypt all of the analytics requests with an algorithm that changes with every update (at the very least the keys change) just so you can&#39;t see what they&#39;re doing. They also made it so you cannot use the app at all if you block communication to their analytics host off at the DNS-level.\n For what it&#39;s worth I&#39;ve reversed the Instagram, Facebook, Reddit, and Twitter apps. They don&#39;t collect anywhere near the same amount of data that TikTok does, and they sure as hell aren&#39;t outright trying to hide exactly whats being sent like TikTok is. It&#39;s like comparing a cup of water to the ocean - they just don&#39;t compare.\n tl;dr; I&#39;m a nerd who figures out how apps work for a job. Calling it an advertising platform is an understatement. TikTok is essentially malware that is targeting children. Don&#39;t use TikTok. Don&#39;t let your friends and family use it.\n  Edit: Well this blew up - sorry for the typos, I wrote this comment pretty quick. I appreciate the gold/rewards/etc people, but I&#39;m honestly just glad I&#39;m finally able to put this information in front of people (even if it may outdated by a few months).\n If you&#39;re a security researcher and want to take a look at the most recent versions of the app, send me a PM and I&#39;ll give you all of the information I have as a jumping point for you to do your thing.\n      Edit 3: Updated the Penetrum link + added Zimperium&#39;s report (requires you request it manually)\n The above Penetrum link appears to be gone. Someone else linked the paper here:  https://penetrum.com/research", "posttime": "2020-06-28 06:18:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "tiktiok,tbh,\u5e94\u7528\u7a0b\u5e8f", "title": "\u4e0d\u662f\u4ec0\u4e48\u65b0\u95fb\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709tiktiok\uff0c\u5c31\u628a\u5b83\u6254\u6389\u5427-\u89c6\u9891", "title_en": "Not new news, but tbh if you have tiktiok, just get rid of it \u2013 videos", "transed": 1, "url": "https://www.reddit.com/r/videos/comments/fxgi06/comment/fmuko1m", "via": "", "real_tags": ["tiktiok", "tbh", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "c0bcf38219fa264109efcdab190a1347.png", "infoid": 1008661, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u516c\u53f8\u5468\u4e09\u63a8\u51fa\u4e86\u4e9a\u9a6c\u900aHoneycode\uff0c\u8fd9\u662f\u4e00\u9879\u5b8c\u5168\u6258\u7ba1\u7684\u670d\u52a1\uff0c\u4f7f\u516c\u53f8\u80fd\u591f\u5728\u4e0d\u8fdb\u884c\u4efb\u4f55\u7f16\u7a0b\u7684\u60c5\u51b5\u4e0b\u6784\u5efa\u79fb\u52a8\u548c\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u3002\u5ba2\u6237\u53ef\u4ee5\u4f7f\u7528\u8be5\u670d\u52a1\u6784\u5efa\u5229\u7528AWS\u6784\u5efa\u7684\u6570\u636e\u5e93\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f8b\u5982\u7b80\u5355\u7684\u4efb\u52a1\u8ddf\u8e2a\u5e94\u7528\u7a0b\u5e8f\u6216\u66f4\u590d\u6742\u7684\u9879\u76ee\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u6765\u7ba1\u7406\u591a\u4e2a\u5de5\u4f5c\u6d41\u3002\nAWS\u526f\u603b\u88c1\u62c9\u91cc\u00b7\u5965\u53e4\u65af\u4e01\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff0c\u5ba2\u6237\u544a\u8bc9\u6211\u4eec\uff0c\u5b9a\u5236\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u6c42\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u5f00\u53d1\u4eba\u5458\u521b\u5efa\u5b83\u4eec\u7684\u80fd\u529b\u3002\n\u8fd1\u5e74\u6765\uff0c\u4f4e\u4ee3\u7801\u578b\u548c\u65e0\u4ee3\u7801\u578b\u5de5\u5177\u8d8a\u6765\u8d8a\u6d41\u884c\uff0c\u8fd9\u4f7f\u5f97\u51e0\u4e4e\u6ca1\u6709\u7f16\u7801\u7ecf\u9a8c\u7684\u4eba\u80fd\u591f\u6784\u5efa\u4ed6\u4eec\u9700\u8981\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5176\u4ed6\u4e3b\u8981\u7684\u4e91\u516c\u53f8\uff0c\u5982Salesforce\uff0c\u63d0\u4f9b\u4f4e\u4ee3\u7801\u7684\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u5668\u3002\u5728\u65b0\u51a0\u80ba\u708e\u5927\u6d41\u884c\u671f\u95f4\uff0cIT\u56e2\u961f\u6349\u895f\u89c1\u8098\uff0c\u4f4e\u7801\u5de5\u5177\u53ef\u4ee5\u8bc1\u660e\u7279\u522b\u6709\u7528\u3002\nAmazon Honeycode\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u719f\u6089\u7684\u7535\u5b50\u8868\u683c\u754c\u9762\uff0c\u7528\u4e8e\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u3002\u7528\u6237\u53ef\u4ee5\u4ece\u9884\u5148\u6784\u5efa\u7684\u6a21\u677f\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u4ee5\u5b9e\u73b0\u8bf8\u5982\u4f11\u5047\u62a5\u544a\u6216\u5e93\u5b58\u7ba1\u7406\u7b49\u529f\u80fd\u3002\u6216\u8005\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u5bfc\u5165\u7a7a\u767d\u5de5\u4f5c\u7c3f\uff0c\u4f7f\u7528\u754c\u9762\u5b9a\u4e49\u6570\u636e\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u5217\u8868\u3001\u6309\u94ae\u548c\u8f93\u5165\u5b57\u6bb5\u7b49\u5bf9\u8c61\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\u5c4f\u5e55\u3002\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u81ea\u52a8\u5316\u529f\u80fd\uff0c\u4ee5\u57fa\u4e8e\u6761\u4ef6\u9a71\u52a8\u901a\u77e5\u3001\u63d0\u9192\u3001\u5ba1\u6279\u6216\u5176\u4ed6\u64cd\u4f5c\u3002\n\u5728\u5e55\u540e\uff0c\u8be5\u670d\u52a1\u81ea\u52a8\u5316\u4e86\u6784\u5efa\u548c\u94fe\u63a5\u4e09\u4e2a\u5e38\u89c1\u529f\u80fd\u5c42--\u6570\u636e\u5e93\u3001\u4e1a\u52a1\u903b\u8f91\u548c\u7528\u6237\u754c\u9762--\u7684\u8fc7\u7a0b\u3002\u5f53\u5e95\u5c42\u6570\u636e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u7531Honeycode\u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b9e\u65f6\u66f4\u65b0\u89c6\u56fe\u548c\u4eea\u8868\u677f\u3002\n\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u540e\uff0c\u5ba2\u6237\u53ef\u4ee5\u5355\u51fb\u6309\u94ae\u4e0e\u56e2\u961f\u6210\u5458\u5171\u4eab\u8be5\u5e94\u7528\u7a0b\u5e8f\u3002AWS\u5c06\u5141\u8bb8\u7528\u6237\u4e0e\u6700\u591a20\u4e2a\u7528\u6237\u514d\u8d39\u5171\u4eab\u5e94\u7528\u7a0b\u5e8f\u3002\n\u4e9a\u9a6c\u900a\u7ed9\u51fa\u4e86\u51e0\u4e2a\u7528\u6237\u5982\u4f55\u90e8\u7f72\u8fd9\u9879\u670d\u52a1\u7684\u4f8b\u5b50\u3002\u4f8b\u5982\uff0c\u5ba2\u6237\u53ef\u4ee5\u6784\u5efa\u7528\u4e8e\u5ba2\u6237\u5173\u7cfb\u7ba1\u7406\u3001\u5f85\u529e\u4e8b\u9879\u5217\u8868\u3001\u5e93\u5b58\u8ddf\u8e2a\u6216\u4e8b\u4ef6\u5b89\u6392\u7684\u5e94\u7528\u7a0b\u5e8f\u3002", "note_en": "Amazon Web Services on Wednesday  launched Amazon Honeycode, a fully-managed service that enables companies to build mobile and web applications without any programming. Customers can use the service to build apps that leverage an   AWS-built database, such as a simple task-tracking application or a more complex project management app to manage multiple workflows.\n    &#34;Customers have told us that the need for custom applications far outstrips the capacity of developers to create them,&#34; AWS VP Larry Augustin said in a statement.\n Low-code and no-code tools have been growing in popularity in recent years, enabling people with little or no coding experience to be able to build the applications they need. Other major cloud companies like Salesforce  offer low-code app builders. With IT teams stretched thin during the COVID-19 pandemic,  low-code tools can prove particularly useful.\n Amazon Honeycode presents users with a familiar spreadsheet interface for building applications. Users can choose from pre-built templates for functions like time-off reporting or inventory management. Alternatively, they can import data into a blank workbook, use the interface to define the data model, and then design application screens with objects like lists, buttons, and input fields. They can also add automations to drive notifications, reminders, approvals, or other actions based on conditions.\n Behind the scenes, the service automates the process of building and linking three common tiers of functionality -- database, business logic, and user interface. As underlying data changes, a Honeycode-built app can update views and dashboards in real-time.\n   Once the application is built, customers can click a button to share it with team members. AWS will let users share applications with up to 20 users for free.\n Amazon gives several examples of how users could deploy the service. Customers could, for instance, build apps for customer relationship management, to-do lists, inventory tracking, or event scheduling.", "posttime": "2020-06-28 05:37:58", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "amazon,\u4ee3\u7801,launches,\u6784\u5efa", "title": "AWS\u63a8\u51fa\u201cAmazon Honeycode\u201d--\u4e00\u9879\u65e0\u4ee3\u7801\u5e94\u7528\u6784\u5efa\u670d\u52a1", "title_en": "AWS Launches 'Amazon Honeycode', a No-Code App Building Service", "transed": 1, "url": "https://www.zdnet.com/article/aws-launches-honeycode-a-no-code-app-building-service/", "via": "", "real_tags": ["amazon", "\u4ee3\u7801", "launches", "\u6784\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1008660, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u91cc\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5c06\u6e38\u620f\u7684\u9ed1\u8272\u80cc\u666f\u66ff\u6362\u4e3a16\u79cd\u57fa\u672c\u989c\u8272\u7684\u6e10\u53d8\uff1a\n\u90a3\u4e48\uff0c0x5f70\u5730\u5740\u5728\u6b64\u6a21\u5f0f\u4e0b\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u73b0\u5728\uff0c\u6bcf\u4e2a\u4f4d\u786e\u5b9a\u8be5\u7279\u5b9a\u884c\u5c06\u4f7f\u7528\u76f8\u5e94\u76840x5f6n\u989c\u8272\u8fd8\u662f0x5f6n+1\u3002\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u5c06\u4ea7\u751f\u4ee5\u4e0b\u6548\u679c\uff1a\n\u4e4d\u4e00\u770b\uff0c\u8fd9\u4f3c\u4e4e\u6709\u70b9\u4e0d\u8d77\u773c\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u60a8\u53ef\u4ee5\u81ea\u7531\u4f7f\u7528\u6b64\u6e10\u53d8\u4e2d\u768432\u79cd\u989c\u8272\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u60a8\u5f53\u524d\u5728\u5c4f\u5e55\u4e0a\u4f7f\u7528\u7684\u989c\u8272\u3002\u4f8b\u5982\uff0c\u8fd9\u53ef\u4ee5\u7528\u6765\u4e3a\u5e73\u53f0\u80cc\u666f\u6216\u886c\u57ab\u4e2d\u7684\u80cc\u666f\u6548\u679c\u6dfb\u52a0\u989c\u8272\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5feb\u901f\u793a\u4f8b\uff1a\n\u5982\u679c\u4f60\u4ed4\u7ec6\u770b\uff0c\u8fd9\u6b3e\u6e38\u620f\u5728\u524d\u666f\u548cUI\u4e2d\u4f7f\u7528\u4e86\u9664\u4e86\u989c\u8272#12(\u6d45\u84dd\u8272)\u4e4b\u5916\u7684\u6240\u670915\u79cd\u989c\u8272\u3002\u6d45\u84dd\u8272\u7528\u4e8e\u6e10\u53d8\uff0c\u4f7f\u7528\u5e38\u89c4\u989c\u82720\u30011\u300112\u30016\u548c7\u4ee5\u53ca\u4ea4\u66ff\u8c03\u8272\u677f\u4e2d\u76840x81\u548c0x8c(\u603b\u517118\u79cd\u989c\u8272)\u3002\u4e0b\u9762\u662f\u4f7f\u752821\u79cd\u989c\u8272\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\uff1a\n\u4ee5\u4e0b\u662f\u6b64\u6e10\u53d8\u7684\u4ee3\u7801\u3002\u53ea\u9700\u5c06\u989c\u8272\u6362\u6210\u60a8\u559c\u6b22\u7684\u4efb\u4f55\u989c\u8272\u5373\u53ef\uff1a)\u3002\nPoke(0x5f2c\uff0c0x40)--\u75280x3c\u4ea4\u63620x3n\uff0c\u5176\u4e2dn\u662f\u8981\u4ea4\u6362\u4e3a\u68af\u5ea6\u7684\u989c\u8272Poke(0x5f5f\uff0c0x3c)\uff0ci=0\uff0c15 do--\u5c06\u6e10\u53d8\u989c\u8272\u653e\u5728\u4e0b\u8868\u4e2d\uff1apoke(0x5f60+i\uff0c({[0]=0x82\uff0c0x82\uff0c0x84\uff0c0x84\uff0c4\uff0c4\uff0c0x89\uff0c0x89\uff0c0x8e\uff0c0x8e\uff0c0x8f\uff0c0x8f\uff0c15\uff0c15\uff0c0x87\uff0c0x87})[i])endfor i=0\uff0c15 do poke(0x5f70+i\uff0c0xaa)end", "note_en": "Here the black background of the game was swapped for a gradient of the 16 basic colors, using the code below:\n  So what does the 0x5f70 address do in this mode? Now each bit determines if that particular line will use the corresponding 0x5f6n color or 0x5f6n+1. Adding the code below will produce the following effect:\n   This might seem a bit unimpressive at first, but remember that you are free to use any of the 32 colors in this gradient, not only the ones you&#39;re using currently on the screen. This can be used to add colors to a platformer background or background effects in a shmup for instance. Here is a quick example:\n  If you look closely the game uses all 15 colors in the foreground and UI except for color #12 (light blue). The light blue is used for the gradient, using the regular colors 0, 1, 12, 6 and 7 and also 0x81 and 0x8c from the alternate palette (18 total colors). Here&#39;s another example using 21 colors:\n  Here is the code for this gradient. Just swap the colors for whatever you like :)\n poke(0x5f2c,0x40)--swap 0x3c for 0x3n where n is the color that will be swapped for the gradientpoke(0x5f5f,0x3c)for i=0,15 do --put the gradient colors in the table below: poke(0x5f60+i,({[0]=0x82,0x82,0x84,0x84,4,4,0x89,0x89,0x8e,0x8e,0x8f,0x8f,15,15,0x87,0x87})[i])endfor i=0,15 do poke(0x5f70+i,0xaa)end", "posttime": "2020-06-28 05:36:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "pico,\u989c\u8272", "title": "Pico-8\uff1a\u5728\u5c4f\u5e55\u4e0a\u542f\u752816\u79cd\u4ee5\u4e0a\u7684\u989c\u8272", "title_en": "Pico-8: Enabling more than 16 colors on the screen", "transed": 1, "url": "https://www.lexaloffle.com/bbs/?tid=38565", "via": "", "real_tags": ["pico", "\u989c\u8272"]}, {"category": "", "categoryclass": "", "imagename": "b6dbb75df26be975a672c19a7c7849f9.jpeg", "infoid": 1008659, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "24a2\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6e38\u620f\u5f15\u64ce\uff0c\u53ef\u4ee5\u8ba9\u60a8\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u6784\u5efa\u4e00\u6b3e\u6e38\u620f\u3002\u5b83\u7684\u529f\u80fd\u975e\u5e38\u6709\u9650\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5f88\u5bb9\u6613\u5b66\u4e60\uff0c\u5e76\u9f13\u52b1\u60a8\u521b\u9020\u6027\u5730\u89e3\u51b3\u95ee\u9898\u3002\n24a2\u6e38\u620f\u662f\u7528JavaScript(\u6216\u6253\u5b57)\u7f16\u5199\u7684\uff0c\u5e76\u5728Web\u6d4f\u89c8\u5668\u4e2d\u64ad\u653e\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5206\u4eab\u60a8\u521b\u5efa\u7684\u5185\u5bb9\u3002", "note_en": "24a2 is a simple game engine that lets you to build a game in a few hours. It has a very limited set of features which makes it easy to learn, and encourages you to solve problems creatively.\n 24a2 games are written in JavaScript (or TypeScript) and are played in a web browser, so you can easily share what you\u2019ve created.", "posttime": "2020-06-28 05:35:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,ultra", "title": "24a2\uff1a\u4e00\u4e2a\u8d85\u6781\u7b80\u6e38\u620f\u5f15\u64ce", "title_en": "24a2: An ultra-minimalist game engine", "transed": 1, "url": "https://github.com/jamesroutley/24a2", "via": "", "real_tags": ["\u6e38\u620f", "ultra"]}, {"category": "", "categoryclass": "", "imagename": "124dce30f8f54d8d8f0e19f8031f371c.jpg", "infoid": 1008658, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f6f\u76d8\u590d\u5236\u4fdd\u62a4\u65b9\u6848\u591a\u79cd\u591a\u6837\uff0c\u4e5f\u5f88\u6709\u8da3\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u667a\u529b\u6311\u6218\uff1a\u53ef\u4ee5\u521b\u9020\u4ec0\u4e48\u65b9\u6848\uff0c\u8ba9\u5bb6\u7528\u8ba1\u7b97\u673a\u53ef\u4ee5\u53ef\u9760\u5730\u8bfb\u53d6\u7ed9\u5b9a\u7684\u5149\u76d8\uff0c\u4f46\u4e0d\u80fd\u8f7b\u677e(\u6216\u6839\u672c\u4e0d\u80fd)\u4ee5\u76f8\u540c\u7684\u683c\u5f0f\u5199\u56de\u6570\u636e\uff1f\u5728\u8c08\u5230\u8f6f\u76d8\u590d\u5236\u4fdd\u62a4\u4ee3\u7801\u65f6\uff0c\u6211\u53d1\u73b0\u5c06\u4ee3\u7801\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u90e8\u5206\u5f88\u6709\u7528\uff1a\n\u52a0\u8f7d\u5668\u4ee3\u7801\u6df7\u6dc6\u4e86\u76d8\u4e2d\u6bd4\u7279\u548c\u6e38\u620f\u4ee3\u7801\u7684\u68c0\u67e5\uff0c\u4f7f\u5f97\u68c0\u67e5\u96be\u4ee5\u4fee\u8865\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u4e0e\u524d\u8005\u6709\u5173\uff1a\u78c1\u76d8\u4e0a\u7684\u6bd4\u7279\u3002\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u5149\u76d8\u65b9\u6848\u5305\u62ec\u6240\u8c13\u7684\u87ba\u7eb9\u76d8\u4fdd\u62a4\u65b9\u6848\u548c\u5730\u4e0b\u57ce\u5927\u5e08\u4e3aAtari ST\u4f7f\u7528\u7684\u6a21\u7cca\u6bd4\u7279\u65b9\u6848\uff0c\u6b63\u5982\u672c\u6587\u4e2d\u975e\u5e38\u8be6\u7ec6\u5730\u89e3\u91ca\u7684\u90a3\u6837\u3002\u6211\u4e5f\u63a8\u8350\u8fd9\u4e2aCommodore 64\u5149\u76d8\u4fdd\u62a4\u65b9\u6848\u7684\u5f88\u597d\u7684\u6982\u8ff0\u3002\u4e3a\u4e86\u6148\u5584\u8d77\u89c1\uff0c\u6d77\u519b\u51c6\u5c0664\u53f7\u6709\u4e00\u4e2a\u2026\u2026\u3002&#34\uff1b\u53e4\u602a\u7684\u5149\u76d8\u9a71\u52a8\u5668\u8bbe\u7f6e\u3002\n\u6211\u6700\u8fd1\u5728\u4e00\u5f20BBC\u5fae\u578b\u5149\u76d8\u4e0a\u9047\u5230\u4e86\u4e00\u79cd\u5149\u76d8\u65b9\u6848\uff0c\u5b83\u6bd4\u6211\u9884\u671f\u7684\u8981\u590d\u6742\u5f97\u591a\uff1a\u5f31\u6bd4\u7279\u3002\u5f31\u4f4d\u548c\u7c7b\u4f3c\u7684\u65b9\u6848\u572816\u4f4d\u65f6\u4ee3\u5f88\u53d7\u6b22\u8fce\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u6709\u4e868\u4f4d\u65f6\u4ee3\u7684\u5f31\u4f4d\u548c\u7c7b\u4f3c\u65b9\u6848\u3002\n\u8f6f\u76d8\u9a71\u52a8\u5668\u548c\u63a7\u5236\u5668\u53ef\u80fd\u6bd4\u60a8\u60f3\u8c61\u7684\u8981\u7b80\u5355\u3002\u8f6f\u76d8\u9a71\u52a8\u5668\u7684\u5de5\u4f5c\u662f\u83b7\u53d6\u76d8\u8868\u9762\u4e0a\u7684\u6a21\u62df\u78c1\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u6210\u4e00\u7cfb\u5217\u6570\u5b57\u8109\u51b2\u3002\u8f6f\u76d8\u63a7\u5236\u5668\u7684\u5de5\u4f5c\u662f\u83b7\u53d6\u4e00\u7cfb\u5217\u6570\u5b57\u8109\u51b2\uff0c\u8bc6\u522b\u65f6\u5e8f\uff0c\u5e76\u751f\u6210\u6570\u636e\u5b57\u8282\u4e32\u3002\u8f6f\u76d8\u63a7\u5236\u5668\u901a\u5e38\u8fd8\u8d1f\u8d23\u53d1\u73b0\u8109\u51b2\u6d41\u4e2d\u7684\u7279\u6b8a\u6807\u8bb0\u5b57\u8282\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u8bc6\u522b\u4e0d\u540c\u7684\u6247\u533a\u3002\n\u84dd\u7ebf\u4e2d\u7684\u6bcf\u4e2a\u5cf0\u503c\u90fd\u662f\u9a71\u52a8\u5934\u611f\u6d4b\u78c1\u76d8\u8868\u9762\u4e0a\u7684\u78c1\u901a\u53cd\u8f6c\u3002\u4e0a\u5cf0\u548c\u4e0b\u5cf0\u88ab\u540c\u7b49\u5bf9\u5f85\uff0c\u5e76\u5bfc\u81f4\u6570\u5b57\u8109\u51b2\u88ab\u53d1\u9001\u5230\u76d8\u63a7\u5236\u5668\uff0c\u8be5\u6570\u5b57\u8109\u51b2\u662f\u9ec4\u7ebf\u3002\n\u8bf7\u6ce8\u610f\uff0cOmniFlop\u3001KryoFlux\u6216GreseWeazle\u7b49\u5de5\u5177\u53ef\u80fd\u5076\u5c14\u4f1a\u5f15\u7528\u539f\u59cb\u901a\u91cf\u8bfb\u53d6\u6216\u8f6c\u50a8\uff0c\u4f46\u8981\u6ce8\u610f\u5b83\u4eec\u53ea\u80fd\u770b\u5230\u4e0a\u9762\u8ddf\u8e2a\u4e2d\u7684\u9ec4\u7ebf\uff0c\u8fd9\u662f\u84dd\u7ebf\u7684\u6709\u635f\u89c6\u56fe\u3002\n\u770b\u7740\u9ec4\u7ebf\uff0c\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u5c71\u9876\u7684\u8282\u594f\u76f8\u5f53\u89c4\u5219\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6bcf\u96944\u5fae\u79d2\uff0c\u5c31\u6709\u4e00\u4e2a\u65f6\u9699\uff0c\u8981\u4e48\u6709\u8109\u51b2\uff0c\u8981\u4e48\u6ca1\u6709\u8109\u51b2\u3002\u5982\u679c\u6709\u8109\u51b2\uff0c\u90a3\u5c31\u662f1\u6bd4\u7279\u3002\u6ca1\u6709\u8109\u640f\uff0c\u90a3\u662f\u4e2a0\u6bd4\u7279\u3002\u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u5c31\u6709\u4e00\u4e2a\u6bd4\u7279\u6d41\u4f9b\u5149\u76d8\u63a7\u5236\u5668\u89e3\u91ca\u5e76\u79fb\u4ea4\u7ed9\u4e3b\u673a\u3002\n\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4f7f\u7528\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u6848\u3002\u6211\u4eec\u5c06\u91cd\u70b9\u653e\u5728BBC Micro\u8fd9\u7bc7\u6587\u7ae0\u4e0a\uff0c\u90a3\u91cc\u7684\u5927\u591a\u6570\u5149\u76d8\u90fd\u4f7f\u7528FM\u7f16\u7801\uff0c\u4e5f\u5c31\u662f\u8bf4\u3002\u5355\u4e00\u5bc6\u5ea6\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7f16\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u4f5c\u7528\u57df\u8f68\u8ff9\u4e2d\u76840\u548c1\u4f4d\u5c31\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9\u3002\u5728\u90a3\u4e2a\u65f6\u4ee3\uff0cMFM\u7f16\u7801\u901a\u5e38\u66f4\u4e3a\u666e\u904d\u3002\n\u76d8\u63a7\u5236\u5668\u83b7\u53d6\u8109\u51b2\u6d41\u5e76\u7406\u89e3\u5b83\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u5728FM(\u6709\u65f6\u79f0\u4e3aDFM)\u7f16\u7801\u4e2d\uff0c\u6bcf\u4e2a\u8109\u51b2\u6216\u975e\u8109\u51b2\u8868\u793a1\u62160\u4f4d\u3002\u8fd9\u4e9b\u4f4d\u662f\u65f6\u949f\u4f4d\u548c\u5b9e\u9645\u6570\u636e\u4f4d\u7684\u6df7\u5408\u3002\u51fa\u4e8e\u51e0\u4e2a\u539f\u56e0\u9700\u8981\u65f6\u949f\u4f4d\uff1a\u4f5c\u4e3a\u8981\u540c\u6b65\u5230\u7684\u5b9a\u65f6\u6e90\uff0c\u4ee5\u53ca\u8fd8\u4e3a\u4e86\u9632\u6b62\u76d8\u9a71\u52a8\u5668\u8ba4\u4e3a\u5b83\u5df2\u7ecf\u4e22\u5931\u4e86\u4fe1\u53f7\u3002\u5fc5\u987b\u81f3\u5c11\u6bcf8\u79d2\u6709\u4e00\u6b21\u8109\u640f\u624d\u80fd\u4fdd\u8bc1\u4e00\u5207\u53ef\u9760\u3002FM\u7f16\u7801\u91c7\u7528\u7b80\u5355\u7684\u8def\u7ebf\uff1a\u76d8\u4e0a\u6bcf\u9694\u4e00\u4e2a\u6bd4\u7279\u5c31\u662f\u4e00\u4e2a\u65f6\u949f\u6bd4\u7279\uff0c\u5b83\u4eec\u51e0\u4e4e\u5728\u6240\u6709\u65f6\u95f4\u90fd\u662f1\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u5982\u4f55\u5c06\u6570\u636e\u4f4d\u4e0e\u65f6\u949f\u4f4d\u5206\u5f00\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u4e86\u89e3\u4e00\u4e0b\u5149\u76d8\u8868\u9762\u7684\u6570\u636e\u5b57\u8282\u5e8f\u5217\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50\u30028271\u6570\u636e\u8868\u4e2d\u4ecb\u7ecd\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u63cf\u8ff0\u78c1\u76d8\u4e0a\u7684\u6247\u533a\uff0c\u79f0\u4e3aIBM\u8f6f\u76d8\u3002\nFF 00 00 00 FE 00 00 00 01 F1 D3 FF 00 00 00 FB 01 02 03 04 05.\u3002\n\u7eff\u8272\u6570\u636e\u5b57\u8282\u5728\u6247\u533a\u4e4b\u95f4\u6216\u5728\u6247\u533a\u62a5\u5934\u548c\u6247\u533a\u6570\u636e\u4e4b\u95f4\u586b\u5145\u3002\u5b83\u4eec\u5e2e\u52a9\u63a7\u5236\u5668\u4fdd\u6301\u6b63\u786e\u7684\u540c\u6b65\uff0c\u5e76\u5728\u6b63\u786e\u7684\u70b9\u91cd\u65b0\u83b7\u5f97\u540c\u6b65\u3002\u5728\u771f\u5b9e\u7684\u5149\u76d8\u4e0a\uff0c\u586b\u5145\u5e8f\u5217\u901a\u5e38\u8f83\u957f\uff0c\u4f46\u662f\u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u4e0a\u9762\u7f29\u77ed\u4e86\u586b\u5145\u5e8f\u5217\uff1b\u5b83\u4eec\u4ecd\u7136\u8db3\u591f\u3002\n\u6247\u533a\u62a5\u5934\u6807\u8bc6\u5b57\u8282\u662fFE\uff0c\u5176\u540e\u662f4\u5b57\u8282\u7684\u6247\u533a\u62a5\u5934\u548c2\u5b57\u8282\u7684CRC\u3002\u8be5\u6247\u533a\u58f0\u660e\u5b83\u5728\u78c1\u90530\u3001\u78c1\u59340\u4e0a\uff0c\u5e76\u4e14\u5b83\u662f\u6247\u533a0\uff0c\u5927\u5c0f\u4e3a256\u5b57\u8282\u3002CRC\u662f\u6b63\u786e\u7684\u3002\u672a\u5220\u9664\u6570\u636e\u7684\u6247\u533a\u6570\u636e\u6807\u8bc6\u5b57\u8282\u662fFB\uff0c\u9884\u8ba1\u968f\u540e\u662f256\u5b57\u8282\u7684\u6570\u636e\uff0c\u7136\u540e\u662f\u53e6\u4e00\u4e2a2\u5b57\u8282\u7684CRC\u3002\u5178\u578b\u7684\u8f68\u9053\u53ef\u4ee5\u5305\u542b10\u4e2a\u8fd9\u6837\u7684\u586b\u5145+\u6247\u533a\u62a5\u5934+\u586b\u5145+\u6247\u533a\u6570\u636e\u5e8f\u5217\u3002\n\u654f\u9510\u7684\u8bfb\u8005\u4f1a\u95ee\uff1a\u54e6\uff01\u4f46\u662f\uff0c\u5982\u679cFE\u6216FB\u5b57\u8282\u51fa\u73b0\u5728\u5b9e\u9645\u6247\u533a\u6570\u636e\u4e2d\uff0c\u5c31\u50cf\u5b83\u4eec\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u6837\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f&#34\uff1b\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u95ee\u9898\uff0c\u7b54\u6848\u5c31\u5728\u65f6\u949f\u4f4d\u4e0a\u3002\u4e0a\u8ff0\u6bcf\u4e2a\u5b57\u8282\u7684\u65f6\u949f\u4f4d\u5747\u4e3a0xFF(\u5168\u90e8\u8bbe\u7f6e)\uff0c\u4f460xFE\u548c0xFB\u9664\u5916\uff0c\u8fd9\u4e24\u4e2a\u5b57\u8282\u7684\u65f6\u949f\u4f4d\u5747\u4e3a0xC7\u3002\u5373\u4e00\u4e9b\u65f6\u949f\u4f4d\u4e22\u5931\uff01\u8fd9\u4f7f\u5f97\u80fd\u591f\u51c6\u786e\u5730\u8bc6\u522b\u6247\u533a\u62a5\u5934\u548c\u6247\u533a\u6570\u636e\u6807\u8bb0\u3002\u6ce8\u610f\uff0c\u9009\u62e9\u8fd9\u4e9b\u7279\u6b8a\u6570\u636e\u5b57\u8282\u52a0\u4e0a\u65f6\u949f\u5b57\u8282\u7684\u7ec4\u5408\uff0c\u4f7f\u5f97\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\uff0c\u5373\u5728\u76d8\u8868\u9762\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u6709\u8fde\u7eed\u768420\u4f4d\u3002\n\u82f1\u56fd\u5e7f\u64ad\u516c\u53f8\u7684\u5fae\u76d8\u4fdd\u62a4\u4e4b\u65c5\u662f\u4e00\u4e2a\u76f8\u5f53\u66f2\u6298\u7684\u65c5\u7a0b\u3002\u5b83\u4f3c\u4e4e\u662f\u57fa\u4e8e\u4e00\u79cd\u7ecf\u5178\u7684\u519b\u5907\u7ade\u8d5b\u65b9\u6cd5\uff1a\u8f6f\u4ef6\u51fa\u7248\u5546\u4f1a\u53d1\u5e03\u4e00\u5f20\u65b0\u7684\u5149\u76d8\uff0c\u4e0a\u9762\u6709\u4e00\u4e9b\u65b0\u7684\u5947\u7279\u4e4b\u5904\uff0c\u7136\u540e\u4f1a\u63a8\u51fa\u4e00\u4e2a\u65b0\u7684\u5149\u76d8\u590d\u5236\u7a0b\u5e8f\u6765\u7406\u89e3\u8fd9\u79cd\u5947\u7279\u4e4b\u5904\u3002\u7136\u540e\u91cd\u590d\u51e0\u6b21\u8fed\u4ee3\uff01\n\u8fd9\u4e00\u65c5\u7a0b\u4e5f\u56e0\u673a\u5668\u751f\u547d\u5468\u671f\u4e2d\u4f7f\u7528\u7684\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u78c1\u76d8\u63a7\u5236\u5668\u82af\u7247\u800c\u53d8\u5f97\u590d\u6742\uff1a\u82f1\u7279\u5c148271\u548c\u897f\u90e8\u6570\u636e1770/1772\u3002\u8fd9\u4e24\u79cd\u82af\u7247\u90fd\u6709\u4e0d\u540c\u7684\u529f\u80fd\u548c\u602a\u7656\u3002\u5728\u5176\u4e2d\u4e00\u4e2a\u82af\u7247\u4e0a\u8fdb\u884c\u826f\u597d\u7684\u590d\u5236\u4fdd\u62a4\u5bf9\u4e8e\u5728\u53e6\u4e00\u4e2a\u82af\u7247\u4e0a\u590d\u5236\u6765\u8bf4\u53ef\u80fd\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u6b64\u5916\uff0c\u4e00\u4e9b\u8f83\u65e9\u7684BBC\u5fae\u76d8\u6700\u7ec8\u4e0e\u57fa\u4e8e1770\u7684\u7cfb\u7edf\u4e0d\u517c\u5bb9\u3002\n\u65e9\u671f\u7684Micro Power\u6e38\u620f\uff0c\u5982Ghouls\uff0c\u5728\u8bb8\u591a\u78c1\u9053\u4e0a\u4f7f\u7528\u975e\u6807\u51c6\u6570\u91cf\u7684\u6247\u533a\uff0c\u4f8b\u5982\u6bcf\u4e2a512\u5b57\u8282\u76845\u4e2a\u6247\u533a\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a256\u5b57\u8282\u768410\u4e2a\u6247\u533a\u3002\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u590d\u5236\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u9996\u5148\u68c0\u67e5\u6247\u533a\u6807\u9898\uff0c\u7136\u540e\u6839\u636e\u6247\u533a\u6807\u9898\u51b3\u5b9a\u6247\u533a\u6807\u9898\u7684\u6570\u91cf\u548c\u5927\u5c0f\uff0c\u5219\u5f88\u5bb9\u6613\u590d\u5236\u3002\u4eba\u4eec\u5f88\u5bb9\u6613\u5632\u7b11\u8fd9\u79cd\u7b80\u5355\u7684\u4fdd\u62a4\uff0c\u4f46\u5b83\u5f88\u53ef\u80fd\u5728\u63a8\u51fa\u65f6\u505a\u4e86\u5b83\u9700\u8981\u505a\u7684\u4e8b\u60c5\uff1a\u4f7f\u7528\u5185\u7f6e\u7684DFS(\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf)\u547d\u4ee4*COPY\u6216*BACKUP\u9632\u6b62\u968f\u610f\u590d\u5236\u5149\u76d8(\u8fd9\u4e24\u4e2a\u547d\u4ee4\u90fd\u9700\u8981\u683c\u5f0f\u826f\u597d\u7684DFS\u5149\u76d8\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u78c1\u905310\u4e2a\u6247\u533a)\u3002\n\u9ad8\u7ea7\u8f6f\u4ef6\u7ecf\u5178\u4e4b\u4f5cCitadel\u4f7f\u7528\u5220\u9664\u4e86\u6570\u636e\u3002\u76d8\u4e0a\u7684\u6bcf\u4e2a\u6247\u533a\u53ef\u4ee5\u7531\u7d27\u63a5\u5728\u6247\u533a\u6570\u636e\u5b57\u8282\u4e4b\u524d\u7684\u4e00\u4e2a\u5b57\u8282\u6807\u8bb0\u6807\u8bb0\u4e3a\u6b63\u5e38\u6216\u5220\u9664\u3002\u8fd9\u4e5f\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4fdd\u62a4\uff0c\u53ea\u8981\u590d\u5370\u673a\u77e5\u9053\u5df2\u5220\u9664\u6570\u636e\u7684\u6982\u5ff5\uff0c\u5b83\u5c31\u53ef\u4ee5\u5904\u7406\u3002\u6709\u8da3\u7684\u662f\uff0cSuperior\u786e\u5b9e\u53d1\u884c\u4e86\u4e00\u4e9b\u62e5\u6709\u66f4\u9ad8\u7ea7\u4fdd\u62a4\u7684\u6e38\u620f--\u6700\u8457\u540d\u7684\u662f\u4f20\u8bf4\u4e2d\u7684\u6d41\u4ea1\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e\u4fdd\u62a4\u4e0d\u80fd\u6b63\u786e\u52a0\u8f7d\u7684\u6545\u4e8b\uff0c\u6240\u4ee5\u4ece\u90a3\u65f6\u8d77\uff0c\u53ea\u4f7f\u7528\u7b80\u5355\u7684\u5df2\u5220\u9664\u6570\u636e\u4fdd\u62a4\u5c31\u53ef\u4ee5\u770b\u5230\u66f4\u597d\u7684\u5149\u76d8\u3002\u5927\u6982\u662f\uff1a\u4e00\u6b21\u88ab\u54ac\uff0c\u4e24\u6b21\u5bb3\u7f9e\u3002\nBBC Micro\u4e0a\u6700\u5177\u6807\u5fd7\u6027\u7684\u6e38\u620f\u5f88\u53ef\u80fd\u662f\u201c\u7cbe\u82f1\u201d(Elite)\u3002\u5b83\u4f7f\u7528\u7684\u6280\u5de7\u4e4b\u4e00\u662f\u5728\u5149\u76d8\u4e2d\u95f4\u6709\u4e00\u4e2a\u672a\u683c\u5f0f\u5316\u7684\u66f2\u76ee\u3002\u672a\u683c\u5f0f\u5316\u7684\u8f68\u9053\u6ca1\u6709\u4efb\u4f55\u53ef\u8bc6\u522b\u7684\u6247\u533a\u6807\u9898\u3002\u8fd9\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u8ba9\u5149\u76d8\u590d\u5236\u7a0b\u5e8f\u6c57\u6d41\u6d43\u80cc\u7684\u4fdd\u62a4\u63aa\u65bd\u3002\u7279\u522b\u662f\u57288271\u8f6f\u76d8\u63a7\u5236\u5668\u4e0a\uff0c\u6ca1\u6709\u53d6\u6d88\u683c\u5f0f\u5316\u547d\u4ee4\uff0c\u53ea\u6709\u683c\u5f0f\u5316\u547d\u4ee4\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e00\u95ee\u9898\u6700\u7ec8\u4ee5\u6709\u5229\u4e8e\u5149\u76d8\u590d\u5236\u7a0b\u5e8f\u7684\u65b9\u5f0f\u5f97\u5230\u4e86\u51b3\u5b9a\u6027\u7684\u89e3\u51b3\uff0c\u5e76\u91c7\u7528\u4e86\u4e00\u4e2a\u806a\u660e\u7684\u6280\u5de7\uff1a\u5982\u679c\u5c06\u4e00\u9996\u66f2\u76ee\u683c\u5f0f\u5316\u4e3a\u4e00\u4e2a\u5de8\u5927\u76844096\u5b57\u8282\u6247\u533a\uff0c\u60a8\u5c06\u7acb\u5373\u83b7\u80dc\u3002\u53d1\u751f\u7684\u60c5\u51b5\u662f\uff0c\u5355\u4e2a\u6247\u533a\u6807\u9898\u5728\u78c1\u9053\u7684\u5f00\u59cb\u5904\u5199\u5165\uff0c\u4f46\u968f\u540e4096\u5b57\u8282\u7684\u6247\u533a\u6570\u636e\u5728\u78c1\u9053\u672b\u7aef(3125\u5b57\u8282\u957f)\u56de\u7ed5\uff0c\u5e76\u4e22\u5f03\u552f\u4e00\u7684\u6247\u533a\u6807\u9898\uff01\u56e0\u6b64\uff0c\u78c1\u9053\u5e76\u4e0d\u662f\u771f\u6b63\u672a\u683c\u5f0f\u5316\u7684\uff0c\u4f46\u6240\u9700\u8981\u7684\u5c31\u662f\u5149\u76d8\u63a7\u5236\u5668\u770b\u4e0d\u5230\u4efb\u4f55\u6247\u533a\u6807\u9898--\u4efb\u52a1\u5b8c\u6210\u4e86\u3002\n\u53e6\u4e00\u4e2a\u76f8\u5f53\u666e\u904d\u7684\u4fdd\u62a4\u662f\u6247\u533a\u5934\u90e8\u4e2d\u4e0d\u5339\u914d\u7684\u7269\u7406/\u903b\u8f91\u8f68\u9053ID\u3002\u8fd9\u4e5f\u88abElite\u4f7f\u7528\uff0c\u5b83\u4e5f\u4f7f\u7528\u5f02\u5e38\u5927\u7684\u903b\u8f91\u6247\u533aID\u3002\u5982\u679c\u4f60\u77e5\u9053\u4f60\u5728\u5bfb\u627e\u5408\u9002\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u5f88\u5bb9\u6613\u590d\u5236\u7684\u3002\u901a\u5e38\uff0c\u5982\u679c\u5149\u76d8\u63a7\u5236\u5668(\u7279\u522b\u662f8271)\u770b\u5230\u8f68\u9053\u4e0d\u5339\u914d\uff0c\u5b83\u4f1a\u611f\u5230\u4e0d\u5b89\uff0c\u4f46\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7279\u6b8a\u547d\u4ee4\u5c06\u5176\u5185\u90e8\u8f68\u9053\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u5339\u914d\u6765\u4f2a\u9020\u63a7\u5236\u5668\u3002\n\u540e\u6765\uff0c\u5728BBC Micro\u7684\u751f\u6d3b\u4e2d\uff0c\u4e00\u4e9b\u5149\u76d8\u8f6f\u4ef6\u51fa\u7248\u5546\u5347\u7ea7\u4e86\u4ed6\u4eec\u7684\u6e38\u620f\u3002\u5728\u6247\u533a\u4e4b\u95f4\u9690\u85cf\u989d\u5916\u7684\u6570\u636e\u5b57\u8282\u53d8\u5f97\u5f88\u5e38\u89c1\u3002\u901a\u8fc7\u91cd\u5199\u968f\u540e\u7684\u6247\u533a\uff0c\u590d\u5236\u8fd9\u4e9b\u5b57\u8282\u7684\u7b80\u5355\u5316\u5c1d\u8bd5\u5c06\u5931\u8d25\u3002\u9664\u975e\u57281770\u7684\u5199\u5165\u78c1\u9053\u534f\u8bae\u4e2d\u4fdd\u7559\u4e86\u9690\u85cf\u5b57\u8282\uff0c\u5426\u5219\u57fa\u4e8e1770\u7684\u78c1\u76d8\u590d\u5370\u673a\u53ef\u4ee5\u8f7b\u677e\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\u7528\u57fa\u4e8e8271\u62161770\u7684\u590d\u5370\u673a\u90fd\u53ef\u4ee5\u5f88\u597d\u5730\u590d\u5236\u8fd9\u4e9b\u60c5\u51b5\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u4e00\u53f0\u80fd\u591f\u505a\u51fa\u9002\u5f53\u52aa\u529b\u7684\u590d\u5370\u673a\u3002\u9700\u8981\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u5982\u76f4\u63a5\u63a7\u5236\u76d8\u63a7\u5236\u5668\u82af\u7247\uff0c\u5e76\u4ee5\u7cbe\u786e\u7684\u5b9a\u65f6\u53d1\u51fa\u547d\u4ee4\uff0c\u4ee5\u53ca\u4ee5\u7c7b\u4f3c\u7684\u7cbe\u786e\u5b9a\u65f6\u4e2d\u6b62\u63a7\u5236\u5668\u4e2d\u7684\u547d\u4ee4\u3002\n\u5149\u76d8\u4fdd\u62a4\u4f5c\u8005\u559c\u6b22\u7684\u53e6\u4e00\u79cd\u6d88\u9063\u65b9\u5f0f\u662f\u4e00\u79cd\u521b\u9020\u6027\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u51cf\u5c11\u590d\u5236\uff0c\u800c\u4e0d\u4e00\u5b9a\u6539\u8fdb\u57fa\u672c\u7684\u4fdd\u62a4\u673a\u5236\uff1a\u653b\u51fb\u590d\u5236\u7a0b\u5e8f\u672c\u8eab\u3002\u590d\u5236\u7a0b\u5e8f\u9700\u8981\u4e00\u5806\u903b\u8f91\u6765\u8ba1\u7b97\u51fa\u5b83\u4eec\u9047\u5230\u7684\u662f\u4ec0\u4e48\u6247\u533a\u8bbe\u7f6e\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5bb9\u6613\u7684\u903b\u8f91\uff0c\u6240\u4ee5\u6253\u7834\u5b83\u662f\u5353\u6709\u6210\u6548\u7684\u3002\u4ee5\u4e0b\u662f\u6d41\u4ea1\u6253\u7834\u77e2\u91cf2\u7684\u51e0\u4e2a\u955c\u5934(\u5728\u4eff\u771f\u4e0b\uff0c\u4f46\u771f\u5b9e\u786c\u4ef6\u7684\u884c\u4e3a\u662f\u76f8\u540c\u7684\uff1a)\uff1a\n\u8003\u8651\u5230\u4e0a\u9762\u4e3a\u6e38\u620f\u63cf\u8ff0\u7684\u7248\u6743\u4fdd\u62a4\u519b\u5907\u7ade\u8d5b\uff0c\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u53d1\u73b0\u4e00\u5bb6\u89c4\u6a21\u8f83\u5c0f\u7684\u6559\u80b2\u8f6f\u4ef6\u516c\u53f8\u62e5\u6709\u9886\u5148\u6570\u5149\u5e74\u7684\u5149\u76d8\u4fdd\u62a4\u683c\u5f0f\u3002\u820d\u65af\u987f\u8f6f\u4ef6\u516c\u53f8\u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u8f6f\u4ef6\u76ee\u5f55\uff0c\u6211\u7684\u5b69\u5b50\u4eec\u4eca\u5929\u4ecd\u7136\u5f88\u559c\u6b22\uff0c\u6211\u4eec\u73b0\u5728\u6700\u559c\u6b22\u7684\u662f\u592a\u7a7a\u4efb\u52a1Mada\u3002\n\u8bb8\u591aSherston\u8f6f\u4ef6\u5149\u76d8\u4f7f\u7528\u5f31\u4f4d\u4fdd\u62a4\u3002\u6211\u4eec\u5e94\u8be5\u7b80\u8981\u5730\u5b9a\u4e49\u672f\u8bed\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u662f\u4e00\u81f4\u4f7f\u7528\u7684\uff1b\u6700\u5408\u7406\u548c\u6700\u5e7f\u6cdb\u540c\u610f\u7684\u672f\u8bed\u4f3c\u4e4e\u662f\uff1a\n\u8584\u5f31\u73af\u8282\u3002\u7531\u76d8\u8868\u9762\u4e0a\u7684\u5f31\u4fe1\u53f7\u6216\u4e0d\u5b58\u5728\u7684\u78c1\u4fe1\u53f7\u5f15\u8d77\u7684\u7247\u72b6\u6bd4\u7279\u3002\u60a8\u53ef\u80fd\u8fd8\u4f1a\u770b\u5230\u672f\u8bed\u65e0\u901a\u91cf\u533a(NFA)\uff0c\u5b83\u4e0e\u4e0d\u5b58\u5728\u7684\u4fe1\u53f7\u76f8\u540c\u3002\u4e0e\u5f31\u4fe1\u53f7\u76f8\u53cd\uff0c\u5f31\u6bd4\u7279\u51e0\u4e4e\u603b\u662f\u4e0d\u5b58\u5728\u7684\u4fe1\u53f7\u3002\u5f31\u4f4d\u7684\u6613\u788e\u6027\u5b9e\u9645\u4e0a\u6765\u81ea\u9a71\u52a8\u5668\u7535\u5b50\u8bbe\u5907\uff1a\u5f53\u6ca1\u6709\u660e\u663e\u7684\u78c1\u901a\u53d8\u5316\u65f6\uff0c\u9a71\u52a8\u5668\u53ea\u662f\u653e\u5927\u5f97\u66f4\u5389\u5bb3\uff0c\u76f4\u5230\u5b83\u5f00\u59cb\u770b\u5230\u566a\u97f3\u4e2d\u7684\u9b3c\u9b42\u5e76\u53d1\u51fa\u4fe1\u53f7\u3002\n\u6a21\u7cca\u4f4d\u3002\u7531\u5f3a\u800c\u6e05\u6670\u7684\u4fe1\u53f7\u5f15\u8d77\u7684\u7247\u72b6\u6bd4\u7279\uff0c\u4f46\u662f\u5176\u4e2d\u8bfb\u8109\u51b2\u7684\u5b9a\u65f6\u5904\u4e8e\u8fb9\u7f18\u3002\u8fb9\u754c\u5b9a\u65f6\u610f\u5473\u7740\u76d8\u63a7\u5236\u5668\u82af\u7247\u4e0d\u80fd\u786e\u5b9a\u8109\u51b2\u5e94\u8be5\u662f1\u6bd4\u7279\u8fd8\u662f0\u6bd4\u7279\u3002\u5b83\u5c06\u6539\u53d8\u4e3b\u610f\uff0c\u4ece\u8bfb\u4e66\u53d8\u6210\u8bfb\u4e66\u3002\n\u5f31\u4f4d\u7684\u4f7f\u7528\u662f\u5148\u8fdb\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u60a8\u8fdb\u884c\u7b2c\u4e00\u539f\u7406\u5206\u6790\u65f6\u4ea7\u751f\u7684\u78c1\u76d8\u4fdd\u62a4\u4e4b\u4e00\uff1a\n\u5f31\u4f4d\u63d0\u4f9b\u53ef\u9760\u7684&#34\uff1b\u8bfb\u53d6\u7ed3\u679c\uff1a\u60a8\u53ef\u4ee5\u53ef\u9760\u5730\u4f9d\u8d56\u5b83\u4eec\u4ee5\u4e0d\u540c\u4e8e\u8bfb\u5230\u8bfb\u7684\u65b9\u5f0f\u56de\u8bfb\uff01\n\u5f31\u4f4d\u4e0d\u80fd\u7531\u6807\u51c6\u76d8\u63a7\u5236\u5668\u5199\u5165\u3002\u76d8\u63a7\u5236\u5668\u5c3d\u5176\u6240\u80fd\u5199\u4e0b\u786e\u5b9a\u6027\u8bfb\u56de\u7684\u4f4d\u3002\u90a3\u662f\u4ed6\u4eec\u7684\u5de5\u4f5c\uff01\u6709\u65e0\u5199\u5165\u5f31\u4fe1\u53f7\u6807\u5fd7\uff0c\u6709\u65e0\u5199\u5165\u65f6\u5e8f\u51b2\u7a81\u6807\u5fd7\u3002\uff1f\n\u6211\u5199\u4fe1\u7ed9\u201c\u592a\u7a7a\u4efb\u52a1\u9a6c\u8fbe\u201d\u7684\u4f5c\u8005\u897f\u8499\u00b7\u970d\u65af\u52d2\u3002\u539f\u6765\u4ed6\u8fd8\u548c\u4ed6\u9694\u58c1\u7684\u7535\u5b50\u6781\u5ba2\u4e00\u8d77\u8bbe\u8ba1\u4e86\u8106\u5f31\u7684\u6bd4\u7279\u4fdd\u62a4\u88c5\u7f6e\uff01\u7528\u897f\u8499\u7684\u8bdd\u8bf4\uff1a\n\u8f6f\u9501(\u6211\u4eec\u8fd9\u6837\u79f0\u547c\u5b83)\u5b9e\u9645\u4e0a\u662f\u6211\u7684\u7cfb\u7edf\uff0c\u6240\u4ee5\u6211\u8bb0\u5f97\u2026\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4f4f\u5728\u4e00\u4e2a\u7535\u5b50\u6781\u5ba2\u7684\u9694\u58c1\uff01\ud83d\ude0a\uff0c\u6240\u4ee5\u6253\u7834\u5e76\u884c\u78c1\u76d8\u7535\u7f06\u7684\u5199\u6570\u636e\u7ebf\u3002\u5728\u8fd9\u6761\u751f\u4ea7\u7ebf\u4e0a\u52a0\u4e00\u70b9\u7535\u5b50\u4ea7\u54c1\u3002(\u8c22\u8c22\u4f60\uff0c\u8fc8\u514b)\u5927\u591a\u6570\u65f6\u5019\uff0c\u8fd9\u4e2a\u7535\u5b50\u8bbe\u5907\u4ec0\u4e48\u4e5f\u4e0d\u505a-\u8ba9\u6570\u636e\u6b63\u5e38\u901a\u8fc7\u3002\u5982\u679c\u4f60\u6253\u5f00\u5b83(\u6211\u60f3\u6211\u662f\u901a\u8fc7\u4e32\u53e3\u5b8c\u6210\u7684)\u5e76\u5199\u5165\u5355\u4e2a\u6247\u533a-\u5b83\u4f1a\u8ba1\u7b97\u901a\u8fc7\u7684\u4f4d\u6570\uff0c\u6bd4\u5982\u8bf4256-\u7136\u540e\u505c\u6b62\u4e0b\u4e00\u4e2a256\u4f4d\u901a\u8fc7&#34\uff1b\n\u6211\u78b0\u5de7\u6709\u4e00\u5f20\u5e26\u6709\u5f31\u4f4d\u4fdd\u62a4\u7684\u539f\u7248Sherston\u5149\u76d8\uff0c\u201c\u52a8\u753b\u5b57\u6bcd\u8868\u201d(Animated Alphabet)\u3002\u4e0b\u9762\u662f\u5c06\u9a71\u52a8\u5668\u8fde\u63a5\u5230\u793a\u6ce2\u5668\u540e\uff0c\u78c1\u76d8\u7684\u5f31\u4f4d\u8865\u4e01\u662f\u4ec0\u4e48\u6837\u5b50\uff1a\n\u897f\u8499\u7684\u5c0f\u5de5\u5177\u5728\u521b\u5efa\u4e00\u6279\u5f31\u6bd4\u7279\u65b9\u9762\u7684\u6548\u679c\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u3002\u8fd9\u771f\u7684\u662f\u5f53\u65f6\u7684\u5929\u624d\uff0c\u662f\u65e9\u671f\u5728\u6ca1\u6709\u7279\u6b8a\u786c\u4ef6\u7684\u60c5\u51b5\u4e0b\u521b\u9020\u4ece\u6839\u672c\u4e0a\u4e0d\u53ef\u590d\u5236\u7684\u5149\u76d8\u8868\u9762\u7684\u6447\u6446\u4e4b\u4e00\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u5b83\u5728\u57fa\u4e8e8271\u548c1770\u7684\u7cfb\u7edf\u4e0a\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u9a71\u52a8\u7535\u5b50\u8bbe\u5907\u4ea7\u751f\u51c6\u968f\u673a\u6027\u7684\u8bf1\u56e0\u3002\u8fd9\u4f7f\u5f97\u8bbe\u7f6e\u66f4\u7b80\u5355\u3001\u66f4\u53ef\u9760\uff0c\u53ea\u9700\u4e00\u6761\u4ee3\u7801\u8def\u5f84\u3002\u5b83\u4e5f\u975e\u5e38\u517c\u5bb9\u6240\u6709\u65e0\u6570\u4e0d\u540c\u7684DFS(\u5149\u76d8\u5f52\u6863\u7cfb\u7edf)\u53d8\u4f53\uff0c\u56e0\u4e3a\u68c0\u67e5\u590d\u5236\u4fdd\u62a4\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u82b1\u54e8\u7684DFS\u8c03\u7528\u3002\u5b83\u53ea\u9700\u8981\u8bfb\u53d6\u4e00\u4e2a\u6247\u533a--\u975e\u5e38\u6807\u51c6\uff01--\u51e0\u6b21\uff0c\u770b\u770b\u8fd4\u56de\u7684\u5b57\u8282\u662f\u5426\u53d8\u5316\u3002\n\u6211\u4e0d\u77e5\u9053\u7b2c\u4e00\u4e2a\u57fa\u4e8e\u8584\u7247\u6bd4\u7279\u7684\u5149\u76d8\u4fdd\u62a4\u662f\u4ec0\u4e48\u65f6\u5019\u53d1\u5e03\u7684\u3002\u53ef\u80fd\u6709\u4eba\u53ef\u4ee5\u4e3e\u51fa20\u4e16\u7eaa70\u5e74\u4ee3\u7684\u4f8b\u5b50\uff01\u4f46\u503c\u5f97\u6bd4\u8f83\u4e00\u4e0b\u6211\u4eec\u786e\u5b9e\u77e5\u9053\u7684\u4e00\u4e9b\u4f8b\u5b50\u7684\u65e5\u671f\u3002\n\u786e\u5b9a\u7b2c\u4e00\u4e2a\u4f7f\u7528\u5f31\u4f4d\u4fdd\u62a4\u7684Sherston\u8f6f\u4ef6\u7684\u65e5\u671f\u662f\u5f88\u56f0\u96be\u7684\u3002\u6211\u6709\u4e00\u5f20Yog\u5148\u751f\u548c\u5976\u5634\u7684\u56fe\u50cf\uff0c1984\u5e74\uff0c\u5e26\u7740\u8106\u5f31\u7684\u6bd4\u7279\u4fdd\u62a4\u3002\u751a\u81f3\u8fd8\u6709\u4e00\u4e2a\u77ed\u5143\u97f3\u7684\u56fe\u50cf\uff0c(C)1983\uff0c\u5e26\u6709\u5f31\u4f4d\u4fdd\u62a4\u3002\u7136\u800c\uff0c\u6211\u4eec\u4e5f\u770b\u5230\u76f8\u540c\u7684Sherston\u56fe\u4e66\u53d1\u5e03\u4e86\u591a\u4e2a\u4e0d\u540c\u7684\u5149\u76d8\u7248\u672c\u548c\u4e0d\u540c\u7684\u7248\u6743\u4fdd\u62a4\u7cfb\u7edf\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5deb\u5e08\u7684\u590d\u4ec7\u6e38\u620f\u7684\u56fe\u50cf\u6765\u5efa\u7acb\u5f31\u4f4d\u4fdd\u62a4\u7684\u521d\u59cb\u6700\u65b0\u754c\u9650\uff0c\u8be5\u56fe\u50cf\u78b0\u5de7\u4f7f\u7528\u4e86\u5f31\u4f4d\u4fdd\u62a4\uff0c\u5e76\u4e14\u5728\u5176One-Past-the-End\u8f68\u9053\u4e0a\u8fd8\u5305\u62ec\u5546\u7528\u590d\u5370\u673a\u6307\u7eb9\uff0c\u5982\u6b64\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u89c6\u56fe\u4e2d\u6240\u793a\uff1a\n\u8fd9\u79cd\u6027\u8d28\u7684\u6307\u7eb9\u5305\u542b\u65e5\u671f\u548c\u65f6\u95f4\uff1a87 01 05\uff0c\u6216\u8005\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f1987\u5e741\u67085\u65e5\u3002\n\u56e0\u6b64\uff0c\u820d\u65af\u987f\u8584\u5f31\u7684\u94bb\u5934\u4f3c\u4e4e\u6bd4\u5730\u4e0b\u57ce\u5927\u5e08\u6a21\u7cca\u94bb\u5934\u81f3\u5c11\u65e9\u4e00\u5e74\u6295\u4ea7\u3002\u867d\u7136\u8fd9\u4e9b\u5149\u76d8\u4fdd\u62a4\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u5b83\u4eec\u5177\u6709\u975e\u5e38\u76f8\u4f3c\u7684\u5c5e\u6027\u548c\u529f\u80fd\u3002\n\u66f4\u6709\u8da3\u7684\u662f\uff0c\u5730\u4e0b\u57ce\u5927\u5e08\u7684\u6a21\u7cca\u6bd4\u7279\u662f1986\u5e74\u63d0\u4ea4\u7684\u4e00\u9879\u4e13\u5229\u7684\u4e3b\u9898\u3002\u8fd9\u53ef\u80fd\u662f\u5176\u4ed6\u806a\u660e\u4eba\u60f3\u51fa\u4ee5\u524d\u6280\u672f\u7684\u6848\u4f8b\u4e4b\u4e00\u3002\u8fd9\u79cd\u4e8b\u7ecf\u5e38\u53d1\u751f\u3002\n\u6ca1\u6709\u4e00\u9879\u590d\u53e4\u7814\u7a76\u662f\u5b8c\u6574\u7684\uff0c\u9664\u975e\u8bd5\u56fe\u5c06\u5f53\u65f6\u8ba4\u4e3a\u53ef\u80fd\u7684\u4e1c\u897f\u63a8\u5411\u524d\u53f0\u3002\u56e0\u6b64\uff0c\u6709\u53ef\u80fd\u521b\u5efa\u7eaf\u8f6f\u4ef6\u89e3\u51b3\u65b9\u6848\u6765\u5c06\u5f31\u4f4d\u5199\u5165\u76d8\u5417\uff1f\u95ee\u540c\u6837\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\uff1a\u662f\u5426\u6709\u53ef\u80fd\u521b\u9020\u51fa\u4e00\u53f0\u6b63\u786e\u590d\u5236\u5f31\u4f4d\u7684\u5149\u76d8\u590d\u5370\u673a\uff1f\n\u4e8b\u5b9e\u8bc1\u660e\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff01\u6216\u8005\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u7b54\u6848\u662f\u53cc\u91cd\u80af\u5b9a\u3002\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u6280\u5de7\uff0c\u53ef\u4ee5\u4f7f\u75288271\u76d8\u63a7\u5236\u5668\u521b\u5efa\u5b9e\u9645\u7684\u5f31\u4f4d\uff0c\u800c\u4f7f\u75281770\u76d8\u63a7\u5236\u5668\u521b\u5efa\u975e\u786e\u5b9a\u6027\u8bfb\u53d6(\u5bfc\u81f4\u4e0e\u5f31\u4f4d\u76f8\u540c\u7684\u8bfb\u53d6\u6548\u679c)\u3002\n8271\u662f\u4e00\u6b3e\u7f16\u7a0b\u7565\u663e\u964c\u751f\u7684\u82af\u7247\u3002\u5176\u4e2d\u4e00\u4ef6\u4e8b\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u7279\u6b8a\u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3002\u4e00\u4e2a\u8fd9\u6837\u7684\u7279\u6b8a\u5bc4\u5b58\u5668\u662f&#34\uff1b\u9a71\u52a8\u5668\u63a7\u5236\u8f93\u51fa\u7aef\u53e3&#34\uff1b\uff1a\n\u8fd9\u4e9b\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\u5728\u6570\u636e\u8868\u4e2d\u6ca1\u6709\u7279\u522b\u597d\u5730\u6db5\u76d6\uff0c\u4e5f\u8bb8\u662f\u56e0\u4e3a\u5b83\u4eec\u4e0d\u5e94\u8be5\u662f\u4f7f\u7528\u65f6\u6240\u5fc5\u9700\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5927\u591a\u65708271\u9a71\u52a8\u7a0b\u5e8f\u5b9e\u73b0\u5199\u5165\u6b64\u5bc4\u5b58\u5668\u4ee5\u542f\u52a8\u9a71\u52a8\u5668(\u901a\u8fc7\u8bbe\u7f6e\u52a0\u8f7d\u5934\u4f4d\u548c\u9002\u5f53\u7684\u9a71\u52a8\u5668\u9009\u62e9\u4f4d)\uff0c\u4ee5\u4fbf\u63a7\u52368271\u9a71\u52a8\u5668\u672a\u5c31\u7eea\u65f6\u8bfb/\u5199\u547d\u4ee4\u5931\u8d25\u7684\u503e\u5411\u3002\n\u8bc0\u7a8d\u5728\u4e8e\u4f7f\u7528\u8be5\u5bc4\u5b58\u5668\u6765\u8bbe\u7f6e\u5199\u4f7f\u80fd\u4f4d\u4ee5\u53ca\u52a0\u8f7d\u5934\u548c\u9009\u62e9\u4f4d\u3002\u8fd9\u53ea\u80fd\u5728\u4efb\u4f55\u5176\u4ed6\u547d\u4ee4\u4e4b\u5916\u5b8c\u6210\uff0c\u56e0\u4e3a\u5199\u5165\u7279\u6b8a\u5bc4\u5b58\u5668\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u9009\u62e9\u5b83\u5c06\u4e2d\u6b62\u4efb\u4f55\u5176\u4ed6\u6b63\u5728\u8fdb\u884c\u7684\u547d\u4ee4\u3002\u5f53\u5728\u547d\u4ee4\u4e4b\u5916\u6fc0\u6d3b\u5199\u542f\u7528\u65f6\uff0c\u76d8\u9a71\u52a8\u5668\u7684\u5199\u5934\u5c06\u88ab\u901a\u7535\uff0c\u4f46\u4e0d\u4f1a\u5728\u5199\u6570\u636e\u7ba1\u811a\u4e0a\u5c06\u6570\u636e\u8109\u51b2\u4f20\u8f93\u5230\u76d8\u9a71\u52a8\u5668\u3002\u7ed3\u679c\u662f\u5199\u78c1\u5934\u626b\u8fc7\u76d8\u8868\u9762\u7684\u78c1\u901a\u8f6c\u53d8\u3002\u8fd9\u4f1a\u4ea7\u751f\u5f31\u4f4d/a\u65e0\u78c1\u901a\u533a\u3002\u901a\u8fc7\u4e00\u70b9\u4ed4\u7ec6\u7684\u5b9a\u65f6\uff0c\u53ef\u4ee5\u7ed9\u5199\u78c1\u5934\u901a\u7535\u548c\u65ad\u7535\uff0c\u5e76\u4e14\u78c1\u9053\u4e0a\u7684\u4efb\u4f55\u70b9\u90fd\u9700\u8981\uff0c\u4ee5\u5728\u9700\u8981\u7684\u5730\u65b9\u521b\u5efa\u5f31\u4f4d\u3002\n1770\u7684\u8bc0\u7a8d\u662f\u4e0d\u540c\u7684\u3002\u901a\u8fc7\u521b\u9020\u6027\u5730\u5bf91770\u8fdb\u884c\u7f16\u7a0b\uff0c\u6216\u8bb8\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u5f31\u4f4d--\u4f46\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u5b83\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u653e\u5728BBC Micro\u76841770\u63a7\u5236\u5bc4\u5b58\u5668\u4e0a\u3002\u8fd9\u662f\u63a7\u5236\u5916\u90e81770\u5f15\u811a\u6240\u5fc5\u9700\u76841770\u5916\u90e8\u5bc4\u5b58\u5668\u3002\u4f8b\u5982\uff0c\u4e0e8271\u4e0d\u540c\uff0c1770\u901a\u8fc7\u5916\u90e8\u5f15\u811a\u9009\u62e9\u78c1\u76d8\u9a71\u52a8\u56680\u4e0e\u9a71\u52a8\u56681\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u4f20\u9012\u7ed9\u63a7\u5236\u5668\u547d\u4ee4\u7684\u53c2\u6570\u3002\u9a71\u52a8\u5668\u63a7\u5236\u5bc4\u5b58\u5668\u5728\u672c\u6587\u6863\u7684\u5e95\u90e8\u6709\u5f88\u597d\u7684\u8bf4\u660e\u3002\n\u7531\u4e8e\u8be5\u5bc4\u5b58\u5668\u4f4d\u4e8e1770\u5916\u90e8\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u5bf9\u5176\u8fdb\u884c\u5e72\u6270\u3002\u6211\u4eec\u4f7f\u7528\u7684\u5177\u4f53\u6280\u5de7\u662f\u542f\u52a8\u5355\u4e2a\u5bc6\u5ea6\u5199\u547d\u4ee4\uff0c\u7136\u540e\u7ffb\u8f6c\u5230\u53cc\u500d\u5bc6\u5ea6\uff0c\u8f93\u5165\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u3002\u53cc\u5bc6\u5ea6(MFM)\u5b9a\u65f6\u4e0e\u5355\u5bc6\u5ea6\u5b9a\u65f6\u5b8c\u5168\u4e0d\u540c\uff0c\u56e0\u6b64\u4f5c\u4e3a\u5355\u5bc6\u5ea6\u8bfb\u56de\u6240\u5f97\u5230\u7684\u56fe\u6848\u4f1a\u4e25\u91cd\u6df7\u6dc6\u76d8\u63a7\u5236\u5668\uff0c\u4ee5\u81f3\u4e8e\u8fd4\u56de\u4e0d\u786e\u5b9a\u7684\u8bfb\u7ed3\u679c\u3002\u8fd9\u4e0d\u662f\u5149\u76d8\u4e0a\u7684\u5f31\u4f4d\uff0c\u4f46\u5c31\u590d\u5236\u4fdd\u62a4\u68c0\u67e5\u800c\u8a00\uff0c\u6548\u679c\u662f\u76f8\u540c\u7684\uff1a\u8bfb\u53d6\u6247\u533a\u4e24\u6b21\uff0c\u7136\u540e\u68c0\u67e5\u7ed3\u679c\u4f1a\u6709\u6240\u4e0d\u540c\uff01\u8fd9\u4e9b\u6bd4\u7279\u6700\u7ec8\u80af\u5b9a\u4f1a\u53d8\u5f97\u8584\u7247\u72b6\u7684\u3002\n\u5b83\u8d77\u4f5c\u7528\u4e86\u5417\uff1f\u662f\u3002\u8fd9\u662f\u4e00\u6bb5\u6211\u4f7f\u7528\u6b63\u5728\u8fdb\u884c\u7684disbeast\u5b9e\u7528\u7a0b\u5e8f\u7684\u89c6\u9891\u3002\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u547d\u4ee4\u5728\u5149\u76d8\u4e0a\u7684\u6b63\u786e\u4f4d\u7f6e\u76f4\u63a5\u7cbe\u786e\u5730\u521b\u5efa\u8584\u7247\u6bd4\u7279\u6765\u4fee\u590dSherston\u5f31\u6bd4\u7279\u7684\u6545\u969c\u526f\u672c\u3002", "note_en": "Floppy disc copy protection schemes are varied and interesting. It&#39;s an interesting intellectual challenge: what schemes can be created whereby home computers could reliably read a given disc, but not be able to easily (or at all) write that data back in the same format?  When talking about floppy disc copy protection code, I find it useful to split into two separate pieces:\n The loader code that obfuscates the check of the on-disc bits and the game code, making the check hard to &#34;patch out&#34;.\n This post concerns the former: on-disc bits. Some of my favorite on-disc schemes include the so-called &#34; Spiradisc&#34; protection scheme and the fuzzy bits scheme used by Dungeon Master for the Atari ST, as  explained in excellent detail in this article. I also recommend this great overview of  Commodore 64 disc protection schemes. To be charitable, the Commodore 64 had a.... &#34;quirky&#34; disc drive setup.\n I recently encountered an on-disc scheme on a BBC Micro disc that was more sophisticated than I was expecting: weak bits. Weak bits and similar schemes were celebrated in the 16-bit era but here we have it in the 8-bit era.\n    Floppy disc drives and controllers are likely simpler than you think. The job of the floppy drive is to take the analog magnetic information on a disc surface and turn it into a series of digital pulses. The job of the floppy controller is to take the series of digital pulses, discern timing, and generate a string of data bytes. The floppy controller usually also has the responsibility of spotting special marker bytes in the pulse stream so that distinct sectors can be identified.\n      Every peak in the blue line is the drive head sensing a magnetic flux reversal on the disc surface. Upper and lower peaks are treated identically and result in a digital pulse getting sent to the disc controller, which is the yellow line.\n Note that tools such as an OmniFlop, KryoFlux or GreaseWeazle might occasionally refer to &#34;raw flux&#34; reads or dumps but beware they that only get to see the yellow line in the trace above, which is a lossy view of the blue line.\n  Looking at the yellow line, you may notice that there&#39;s a fairly regular cadence to the peaks. In fact, every 4 microseconds, there is a timing &#34;slot&#34; and there will either be a pulse or no pulse. If there&#39;s a pulse, that&#39;s a 1 bit. No pulse and that&#39;s a 0 bit. And as simple as that, there&#39;s a bit stream for the disc controller to interpret and hand off to the host computer.\n  Different computers use different encoding schemes. We&#39;re focusing on the BBC Micro this post, where most discs used FM encoding, aka. single density. This is a very simple encoding, an evidenced by the fact we can eyeball the 0 and 1 bits in the scope trace above.  MFM encoding was generally more common in the era.\n    The disc controller takes the pulse stream and makes sense of it. As mentioned above, in FM (sometimes called DFM) encoding, each pulse or non-pulse represents a 1 or 0 bit. These bits are a mix of clock bits and actual data bits. Clock bits are needed for a couple of reasons: as a source of timing to sync to, and also to prevent the disc drive from thinking it has lost the signal. There must be a pulse at least every 8us to keep everything reliable. FM encoding takes the simple route: every other on-disc bit is a clock bit and they will all be 1 almost all of the time.\n  So now we know how to separate data bits from clock bits, let&#39;s have a quick look at what a sequence of data bytes on the disc surface might look like. There&#39;s a simple protocol for describing sectors on the disc, called the &#34;IBM Diskette&#34;, which is described in the  8271 datasheet.\n    FF FF FF 00 00 00  FE  00 00 00 01  F1 D3  FF FF FF 00 00 00  FB  01 02 03 04 05 ..\n  The green data bytes are padding between sectors, or between sector headers and sector data. They help the controller maintain correct synchronization, and to re-gain synchronization at the correct point. The padding sequences are typically longer on a real disc, but are shortened above for clarity; they would still suffice.\n  The sector header identification byte is the  FE, which is followed by 4 bytes of sector header and a 2-byte CRC. The sector is declaring it is on track 0, head 0, and it is sector 0, sized 256 bytes. The CRC is correct. The sector data identification byte for non-deleted data is  FB, and 256 bytes of data are expected to follow, then another 2-byte CRC. A typical track might contain 10 such padding + sector header + padding + sector data sequences.\n  The astute reader would ask: &#34;oh! but what if the FE or FB bytes occur in actual sector data, as they are bound to do from time to time?&#34;\n That is a great question and the answer lies in the clock bits. Every byte above has 0xFF for its clock bits (all set) except 0xFE and 0xFB, which have 0xC7 for the clock bits. i.e. some of the clock bits are missing! That makes it possible to identify sector header and sector data markers accurately. Note that the combination of these special data bytes plus clock byte is chosen so that still, the invariant is keep that there are never 2 0 bits in a row on the disc surface.\n    The BBC Micro disc protection journey is a fairly meandering one. It seems to have been based on a classical arms race approach: a software publisher would publish a new disc with some new quirk on it, and then a new disc copy program would come out which understood the quirk. And repeat a few iterations!\n The journey is also complicated by two very different disc controller chips being used during the machine&#39;s lifetime: the Intel 8271 and the  Western Digital 1770/1772. Both chips had different capabilities and quirks. A good copy protection on one of the chips might be trivial to copy on the other. Also, some earlier BBC Micro discs were made that did not end up being compatible with 1770 based systems.\n   Early Micro Power titles, such as  Ghouls, used non-standard numbers of sectors on many tracks, such as 5 sectors of 512 bytes each instead of 10 sectors of 256 bytes each. This is easy to copy if you have a copy program that checks the sector headers first and then decides how many there are and what sizes based on that. It would be easy to scoff at such a simple protection but it&#39;s likely it did what it needed to at the time of launch: prevent casual disc copying using the built-in DFS (Disc Filing System) commands *COPY or *BACKUP (both of which expected well-formatted DFS discs, which meant 10 sectors per track).\n The Superior Software classic,  Citadel, used &#34;deleted data&#34;. Every sector on a disc can be marked as either normal or deleted by the one byte mark that occurs directly before the sector data bytes. This is again a simple protection that a copier can handle as long as it knows about the concept of deleted data. What&#39;s interesting is that Superior did release a few titles with more advanced protection -- most notably the legendary  Exile. However there are  stories about the protection not loading correctly with some setups, so Superior discs from then on can all be seen using just the simple deleted data protection. Presumably: once bitten, twice shy.\n The most iconic game on the BBC Micro may well be  Elite. One of the tricks it used was an &#34;unformatted track&#34; in the middle of the disc. An unformatted track does not have any recognizable sector headers. This is perhaps the first protection that made disc copy programs sweat. Particularly on the 8271 floppy controller, there is no &#34;unformat&#34; command, only a &#34;format&#34; command. This was resolved decisively in favor of the disc copy programs, though, with a clever trick: if you format a track as one giant 4096 byte sector, you win immediately. What happens is that the single sector header is written at the start of the track, but then the 4096 bytes of sector data  wrap around across the end of the track (which is 3125 bytes long) and trash the only sector header! So the track isn&#39;t really unformatted, but all that is needed is that the disc controller doesn&#39;t see any sector headers -- mission accomplished.\n Another fairly ubiquitous protection was mismatched physical / logical track IDs in the sector header. This was also used by Elite, which also used unusually large logical sector IDs. This is easy to copy if you know you&#39;re looking for the situation. Normally, the disc controller (particularly the 8271) will get upset if it sees a track mismatch but you can fake the controller out by setting its internal track register to match, with a special command.\n Later on in the BBC Micro&#39;s life, some publishers of software on disc upped their game. It became common to see extra data bytes &#34;hidden&#34; in between sectors. Simplistic attempts to copy these bytes would fail by overwriting a following sector. 1770-based disc copiers can handle this situation easily unless the hidden bytes are &#34;reserved&#34; in the 1770&#39;s write track protocol. It  is possible to copy these situations well with both an 8271 or 1770 based copier, but I haven&#39;t yet found one that makes a decent effort. It is necessary to do things like take direct control of the disc controller chip, and issue commands with precise timing, and abort the controller mid-command with similarly precise timing.\n Another favorite pastime of disc protection authors was a creative way of reducing copying without necessarily improving the underlying protection mechanism:  attack the copy program itself. The copy programs needed a bunch of logic to work out what sector setup they were encountering. It&#39;s not easy logic, so breaking it was fruitful. Here&#39;s a few shots (under emulation, but real hardware behaves identically :) of  Exile breaking Vector 2:\n          Given the copy protection arms race described for games above, it was a surprise to find a smaller educational software house with an on-disc protection format light years ahead. Sherston Software had a great catalog of software that my kids still enjoy today, with our current favorite being  Space Mission Mada.\n  Many Sherston Software discs use weak bits protection. We should briefly define terms because they are not consistently used; the most sensible and broadly agreed terms appear to be:\n Weak bits. Flaky bits caused by a weak signal or non-existent magnetic signal on the disc surface. You might also see the term no-flux area (NFA), which is the same as a non-existent signal. Weak bits are almost always a non-existent signal, as opposed to a weak signal. The flaky nature of weak bits actually comes out of the drive electronics: when there are no clear flux changes, the drive just amplifies harder until it starts seeing and signaling ghosts within the noise.\n Fuzzy bits. Flaky bits caused by a strong, clear signal but where the timings of the read pulses are borderline. The borderline timing means the disc controller chip cannot be sure whether a pulse is supposed to be a 1 bit or a 0 bit. It&#39;ll change its mind from read to read.\n The use of weak bits is advanced because it&#39;s one of the on-disc protections that arise when you do a first principles analysis:\n Weak bits give a &#34;reliable&#34; read result: you can reliably depend on them to read back differently from read-to-read!\n Weak bits  cannot be written by the standard disc controllers. The disc controllers do everything in their power to lay down bits that read back deterministically. That&#39;s their job! There&#39;s no &#34;write weak signal&#34; flag and there&#39;s no &#34;write timing violations&#34; flag.\n I wrote to the author of Space Mission Mada, Simon Hosler. It turns out he also devised the weak bits protection, along with his electronics geek next door neighbor! In Simon&#39;s words:\n  &#34; Soft lock (was what we called it) was actually my system, so what I remember\u2026 This came about because I lived next door to an electronics geek! \ud83d\ude0a So break the write data line of the parallel disk cable. Add a bit of electronics to this line. (thank you Mike) Most of the time this electronics does nothing \u2013 lets the data go through as normal. If you turn it on (I think I did this through the serial port) and write to a single sector - it would count the bits going through say 256 \u2013 and then stop the next 256 bits going through&#34;\n  I happen to have an original Sherston disc with weak bits protection,  Animated Alphabet. Here&#39;s what the weak bits patch of disc looks like with the drive wired up to an oscilloscope:\n    The effect of Simon&#39;s widget in creating batches of weak bits can clearly be seen. This really was genius for the time, being one of the earlier swings at creating disc surfaces fundamentally uncopyable without special hardware. Not only that, but it works the same on both 8271 and 1770 based systems since it&#39;s the drive electronics that are being induced to create the quasi-randomness. This leads to a simpler, more reliable setup with just a single code path. It is also very compatible with all the myriad of different DFS (Disc Filing System) variants because the code to check the copy protection doesn&#39;t need fancy DFS calls. It just needs to read a sector -- very standard! -- a few times and see if the bytes coming back vary or not.\n    I don&#39;t know when the first flaky bits based disc protection was released. There&#39;s probably someone out there who can point to an example from the 1970s! But it&#39;s worth comparing dates on some examples we do know about.\n  Dating the first Sherston Software title to use weak bits protection is tough. I have an image of  Mr. Yog and the Nippet,\u00a0(c) 1984, with weak bits protection. There&#39;s even an image of  Short Vowel Sounds, (c) 1983, with weak bits protection. However, we also have seen the same Sherston title released with multiple different disc revisions with different copy protection systems. We can establish an initial latest bound on the weak bits protection with an image of  The Wizard&#39;s Revenge\u00a0that happens to use the weak bits protection and also includes a commercial duplicator fingerprint on its one-past-the-end track, as seen here in this hex editor view:\n    Fingerprints of this nature contain a date and time: 87 01 05, or Jan 5th, 1987 in this case.\n    So it seems likely that the Sherston weak bits went to production at least a year prior to the Dungeon Master fuzzy bits. Although these disc protections are not identical, they have very similar properties and capabilities.\n  What&#39;s further interesting is that the Dungeon Master fuzzy bits were the subject of a  patent filed in 1986. This could be one of those cases where other clever people had come up with prior art. It happens a lot.\n    No retro research would be complete without an attempt to push the bounds of what was thought possible back in the day. Accordingly, would it be possible to create a  software only solution to write weak bits to discs? Another way to ask the same question is: would it have been possible to create a disc copier that copied weak bits correctly?\n  It turns out the answer is yes! Or more specifically, the answer is a double yes. Using two different tricks, it is possible to create actual weak bits with the 8271 disc controller, and non-deterministic reads (resulting in the same sort of read effects as weak bits) with the 1770 disc controller.\n    The 8271 is a slightly strange chip to program. One thing is has is the concept of &#34;special registers&#34; which can be read and written. One such special register is the &#34;Drive Control Output Port&#34;:\n    The special registers aren&#39;t particularly well covered in  the data sheet, perhaps because they aren&#39;t supposed to be necessary for usage. That said, most 8271 driver implementations write this register to spin up the drive (by setting the LOAD HEAD bit and appropriate drive SELECT bit) in order to control the 8271&#39;s propensity to fail read/write commands with &#34;drive not ready&#34;.\n  The trick is to use this register to set the WRITE ENABLE bit as well as the LOAD HEAD and SELECT bits. This can only be done outside any other command, because Write Special Register is itself a command and selecting it will abort any other in-progress command. When WRITE ENABLE is active outside of a command, the disc drive&#39;s write head will be energized but no data pulses will be transmitted on the write data pin to the disc drive. The result is that the write head sweeps the disc surface clean of flux transitions. That creates weak bits / a no flux area. With a bit of careful timing, the write head can be energized and de-energized and any point(s) needed on a track to create weak bits where desired.\n    The trick on the 1770 is different. It may be possible to directly create weak bits by creatively programming the 1770 -- but if it is, I haven&#39;t found it. Instead, we focus on the BBC Micro&#39;s 1770 control register. This is a register external to the 1770 that is necessary to control external 1770 pins. For example, unlike the 8271, the 1770 selects disc drive 0 vs. drive 1 via an external pin instead of as parameters passed to controller commands. The &#34;Drive Control Register&#34; is documented well  at the bottom of this document.\n  Since this register is external to the 1770, we can mess with it while a command is in progress. The specific trick we use is to start a single density write command and then flip to double density some number of bytes in. Double density (MFM) timing is completely different to single density timing, so reading back the resulting patterns as single density read confuses the disc controller significantly, to the point that non-deterministic read results are returned. This is not weak bits on the disc but the effect is the same as far as the copy protection check is concerned: read the sector twice and check the result varies! The bits definitely end up flaky.\n  Does it work? Yes. Here&#39;s a video of me using my work-in-progress &#34; discbeast&#34; utility. We fix a failed copy of Sherston weak bits by using commands to directly and precisely create flaky bits at the correct point on the disc.", "posttime": "2020-06-28 05:35:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u76d8,bits,\u5149\u76d8", "title": "\u5f31\u4f4d\u8f6f\u76d8\u4fdd\u62a4\uff1a\u5173\u4e8e8\u4f4d\u7684\u53e6\u4e00\u4e2a\u8d77\u6e90\u6545\u4e8b", "title_en": "Weak bits floppy disc protection: an alternate origins story on 8-bit", "transed": 1, "url": "https://scarybeastsecurity.blogspot.com/2020/06/weak-bits-floppy-disc-protection.html", "via": "", "real_tags": ["\u8f6f\u76d8", "bits", "\u5149\u76d8"]}]