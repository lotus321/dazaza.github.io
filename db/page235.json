[{"category": "", "categoryclass": "", "imagename": "c117bd52719ad94e5ff9c0d6848eed32.jpeg", "infoid": 1003590, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u533a\u5757\u94fe\u4f5c\u4e3a\u4e00\u4e2a\u793e\u4f1a\u5411\u6211\u4eec\u627f\u8bfa\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u65b0\u673a\u4f1a\u3002\u5206\u6563\u7684\u94f6\u884c\u7cfb\u7edf\u3002\u53ef\u6301\u7eed\u53d1\u5c55\u7684\u53ef\u8ffd\u6eaf\u6027\u98df\u54c1\u751f\u4ea7\u3002\u4f60\u53ef\u4ee5\u5356\u523010\u4e07\u7f8e\u5143\u4ee5\u4e0a\u7684\u6570\u5b57\u732b\u3002\n\u6700\u540e\u4e00\u4e2a\u5b9e\u9645\u4e0a\u5df2\u7ecf\u4e0d\u662f\u627f\u8bfa\u4e86-\u65e9\u57282017\u5e74\uff0c\u533a\u5757\u94fe\u793e\u533a\u5c31\u628a\u5b83\u5e26\u5230\u4e86\u5168\u7f8e\u7684\u6570\u5b57\u8bbe\u5907\u4e0a\u3002\n\u5728\u4e16\u754c\u4e0a\u6700\u65e9\u7684\u533a\u5757\u94fe\u6e38\u620f\u4e4b\u4e00\u4e2d\u6536\u96c6\u548c\u4ea4\u6613CryptoKitties\u3002\u9972\u517b\u4f60\u6700\u7a00\u6709\u7684\u732b\uff0c\u521b\u9020\u4e00\u4e2a\u5b8c\u7f8e\u7684\u6bdb\u8338\u8338\u7684\u670b\u53cb\u3002\u672a\u6765\u662f\u55b5\uff01\n\u5f53\u6211\u7b2c\u4e00\u6b21\u542c\u8bf4CryptoKitties\u7684\u65f6\u5019\uff0c\u6211\u7684\u5934\u8111\u5b8c\u5168\u88ab\u9707\u64bc\u4e86\u3002\u8001\u5b9e\u8bf4\uff0c\u5728\u6211\u53d1\u73b0\u4e00\u53eaCryptoKitty\u4ee5\u5927\u7ea617\u4e07\u7f8e\u5143\u7684\u4ef7\u683c\u552e\u51fa\u4e4b\u524d\uff0c\u6211\u4e00\u76f4\u8ba4\u4e3a\u8fd9\u5f88\u8352\u8c2c\uff0c\u5f53\u65f6\u6211\u4ecd\u7136\u8ba4\u4e3a\u8fd9\u5f88\u8352\u8c2c\uff0c\u4f46\u6211\u7684\u611f\u89c9\u88ab\u5e0c\u671b\u81ea\u5df1\u57f9\u80b2\u4e86\u90a3\u53ea\u7a00\u6709\u7684\u6570\u5b57\u732b\u6240\u53d6\u4ee3\u3002\n\u8fd9\u6b3e\u6e38\u620f\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u7528\u6237\u53ef\u4ee5\u62e5\u6709\u72ec\u7279\u7684CryptoKitties\uff0c\u5e76\u80fd\u591f\u4e00\u8d77\u7e41\u6b96\u81ea\u5df1\u7684\u6570\u5b57\u732b\u3002\u6bcf\u53ea\u732b\u7684\u5c5e\u6027\u90fd\u662f\u901a\u8fc7\u6211\u53ea\u80fd\u5047\u8bbe\u662f\u76f8\u5f53\u590d\u6742\u7684\u5e55\u540e\u7b97\u6cd5\u7ec4\u5408\u5728\u4e00\u8d77\u7684\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u552f\u4e00\u7684CryptoKitty\u3002\u6839\u636e\u732b\u7684\u7c7b\u578b\u3001\u732b\u7684\u7279\u5f81\u3001\u4e16\u4ee3\u4ee5\u53ca\u5176\u4ed6\u51e0\u4e2a\u56e0\u7d20\uff0c\u732b\u88ab\u8ba4\u4e3a\u662f\u4e00\u5b9a\u7a0b\u5ea6\u7684\u7a00\u6709\u3002\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u7279\u5f81\u5e76\u6ca1\u6709\u4e0e\u751f\u4ff1\u6765\u7684\u7a00\u6709\u201c\u5206\u6570\u201d\uff0c\u76f8\u53cd\uff0c\u5f53\u67d0\u4e9b\u7c7b\u578b\u7684\u732b\u5177\u6709\u67d0\u4e9b\u7279\u5f81\u65f6\uff0c\u5b83\u4eec\u5c31\u88ab\u8ba4\u4e3a\u662f\u7a00\u6709\u7684\u3002\u8fd9\u4e9b\u7279\u5f81\u662f\u4ec0\u4e48\uff0c\u4e0d\u540c\u7684\u732b\u662f\u4e0d\u540c\u7684\u3002\n\u7a00\u7f3a\u6027\u7684\u672c\u8d28\u672c\u8d28\u4e0a\u53d6\u51b3\u4e8e\u7a00\u7f3a\u6027\u3002\u4e3a\u4e86\u8ba9\u67d0\u4e9b\u4e1c\u897f\u53d8\u5f97\u7a00\u6709\uff0c\u53ef\u4ee5\u5b58\u5728\u7684\u6570\u91cf\u975e\u5e38\u6709\u9650\uff0c\u800c\u8fd9\u4e00\u4e8b\u5b9e\u672c\u8eab\u5c31\u63a8\u9ad8\u4e86\u5b83\u7684\u4ef7\u503c\u3002\u8fd9\u662f\u7b80\u5355\u7684\u4f9b\u6c42\u5173\u7cfb\u3002\u90a3\u4e48\uff0c\u6570\u5b57\u5316\u7684\u4e1c\u897f\uff0c\u8fd9\u79cd\u672c\u8d28\u4e0a\u53ef\u4ee5\u7528\u5f88\u5c11\u7684\u6210\u672c\u4e00\u904d\u53c8\u4e00\u904d\u5730\u590d\u5236\u7684\u4e1c\u897f\uff0c\u600e\u4e48\u4f1a\u662f\u7a00\u6709\u7684\u5462\uff1f\n\u8fdb\u5165\u533a\u5757\u94fe\u3002\u5bf9\u4e8e\u90a3\u4e9b\u542c\u8fc7\u8fd9\u4e2a\u65f6\u9ae6\u8bcd\u6ca1\u5b8c\u6ca1\u4e86\u5730\u88ab\u629b\u6765\u629b\u53bb\uff0c\u4f46\u8fd8\u4e0d\u5b8c\u5168\u786e\u5b9a\u5b83\u662f\u4ec0\u4e48\u7684\u4eba\u6765\u8bf4\uff0c\u533a\u5757\u94fe\u662f\u4e00\u79cd\u76f8\u5bf9\u8f83\u65b0\u7684\u6280\u672f\uff0c\u672c\u8d28\u4e0a\u5141\u8bb8\u6211\u4eec\u6a21\u4eff\u73b0\u5b9e\u4e16\u754c\u6240\u5177\u6709\u7684\u7a00\u7f3a\u6027\u548c\u72ec\u7279\u6027\u3002\n\u5728\u975e\u6570\u5b57\u4e16\u754c\u4e2d\uff0c\u751f\u4ea7\u67d0\u79cd\u4e1c\u897f\u662f\u6709\u8d22\u52a1\u6210\u672c\u7684\uff0c\u66f4\u4e0d\u7528\u8bf4\u65f6\u95f4\u3001\u8d44\u6e90\u7b49\u7684\u673a\u4f1a\u6210\u672c\u4e86\u3002\u8fd9\u4e9b\u9650\u5236\u5bfc\u81f4\u4e86\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u4efb\u4f55\u4e1c\u897f\u90fd\u53ea\u80fd\u751f\u4ea7\u6709\u9650\u7684\u6570\u91cf\u3002\u5373\u4f7f\u6570\u989d\u5f88\u5927\uff0c\u9650\u5236\u4ecd\u7136\u5b58\u5728\u3002\u6b64\u5916\uff0c\u5982\u679c\u6211\u5236\u4f5c\u4e865\u4e2a\u7248\u672c\u7684\u540c\u4e00\u672c\u7eb8\u8d28\u4e66\u6765\u9500\u552e\uff0c\u6211\u5c31\u80fd\u4ece\u672c\u8d28\u4e0a\u77e5\u9053\u8fd95\u672c\u4e66\u7684\u4e0d\u540c\u4e4b\u5904\uff0c\u56e0\u4e3a\u6211\u53ef\u4ee5\u4e00\u76ee\u4e86\u7136\u5730\u770b\u5230\u4e0d\u540c\u7684\u7248\u672c\u3002\u6211\u77e5\u9053\u6bcf\u672c\u4e66\u7684\u62e5\u6709\u8005\u662f\u8c01\uff0c\u56e0\u4e3a\u5f53\u6211\u5356\u51fa\u4e66\u65f6\uff0c\u6211\u4f1a\u7ed9\u522b\u4eba\u4e00\u4e2a\u7248\u672c\u7684\u4e66\uff0c\u8fd9\u6837\u6211\u5c31\u4e0d\u80fd\u518d\u5356\u90a3\u672c\u4e66\u4e86\u3002\n\u7136\u800c\uff0c\u6211\u4eec\u5728\u6570\u5b57\u4e16\u754c\u4e2d\u6ca1\u6709\u540c\u6837\u7684\u9650\u5236\u3002\u81f3\u5c11\uff0c\u4e0d\u662f\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u3002\u5982\u679c\u6211\u521b\u5efa\u4e86\u4e00\u672c\u6570\u5b57\u56fe\u4e66\uff0c\u6211\u53ef\u4ee5\u5047\u8bbe\u8fd9\u672c\u4e66\u53ef\u4ee5\u65e0\u9650\u6b21\u9500\u552e\u3002\u8fd9\u672c\u4e66\u7684\u4e00\u4e2a\u4eba\u7684\u7248\u672c\u548c\u53e6\u4e00\u4e2a\u4eba\u7684\u7248\u672c\u662f\u65e0\u6cd5\u533a\u5206\u7684\u3002\n\u533a\u5757\u94fe\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u5b83\u7ed9\u4e86\u6211\u4eec\u4e00\u79cd\u65b9\u6cd5\uff0c\u8ba9\u6570\u5b57\u4ea7\u54c1\u771f\u6b63\u76f8\u4e92\u533a\u522b\uff0c\u5373\u4f7f\u5b83\u4eec\u770b\u8d77\u6765\u662f\u76f8\u540c\u7684-\u5c31\u50cf\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u4e00\u6837\u3002\n\u533a\u5757\u94fe\u80fd\u591f\u4f7f\u7528\u53ef\u66ff\u6362\u548c\u4e0d\u53ef\u66ff\u6362\u4ee4\u724c\u6765\u6a21\u4eff\u8fd9\u4e9b\u7279\u6027\u3002\u6839\u636e\u7ef4\u57fa\u767e\u79d1\u7684\u8bf4\u6cd5\uff1a\n\u4e0d\u53ef\u66ff\u6362\u4ee4\u724c(NFT)\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u52a0\u5bc6\u4ee4\u724c\uff0c\u5b83\u4ee3\u8868\u4e00\u4e9b\u72ec\u7279\u7684\u4e1c\u897f\uff1b\u56e0\u6b64\u4e0d\u53ef\u66ff\u6362\u4ee4\u724c\u4e0d\u53ef\u4e92\u6362\u3002\u8fd9\u4e0e\u6bd4\u7279\u5e01\u7b49\u52a0\u5bc6\u8d27\u5e01\u4ee5\u53ca\u8bb8\u591a\u672c\u8d28\u4e0a\u53ef\u66ff\u4ee3\u7684\u7f51\u7edc\u6216\u516c\u7528\u4e8b\u4e1a\u4ee4\u724c\u5f62\u6210\u4e86\u9c9c\u660e\u5bf9\u6bd4\u3002\n\u53ef\u66ff\u6362\u4ee4\u724c\u662f\u7edd\u5927\u591a\u6570\u52a0\u5bc6\u8d27\u5e01\u4f7f\u7528\u7684\uff0c\u5b83\u4ecd\u7136\u63d0\u4f9b\u552f\u4e00\u7684\u8eab\u4efd\uff0c\u4f46\u5177\u6709\u4e00\u81f4\u7684\u4ef7\u503c\uff0c\u4e5f\u88ab\u79f0\u4e3a\u201c\u6cd5\u5b9a\u8d27\u5e01\u201d\u3002\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\uff0c\u5982\u679c\u5728\u7ed9\u5b9a\u7684\u4e00\u5929\uff0c\u4e00\u679a\u6bd4\u7279\u5e01\u76f8\u5f53\u4e8e20\u7f8e\u5143\uff0c\u90a3\u4e48\u5f53\u5929\u5b58\u5728\u7684\u6bcf\u4e00\u679a\u6bd4\u7279\u5e01\u4e5f\u76f8\u5f53\u4e8e20\u7f8e\u5143\u3002\n\u53ef\u66ff\u6362\u4ee4\u724c\u6a21\u4eff\u6570\u5b57\u7269\u54c1\u7684\u72ec\u7279\u6027\u548c\u5c40\u9650\u6027\uff0c\u4f46\u7531\u4e8e\u5176\u5185\u5728\u4ef7\u503c\uff0c\u5b83\u4eec\u4e0d\u4f1a\u6a21\u4eff\u7a00\u6709\u6027\u3002\u56e0\u6b64\uff0cCryptoKitties\u4f7f\u7528\u4e0d\u53ef\u66ff\u6362\u7684\u4ee4\u724c\u3002\u4e0d\u53ef\u66ff\u6362\u4ee4\u724c\u4e3a\u6bcf\u53ea\u732b\u521b\u5efa\u552f\u4e00\u7684\u6807\u8bc6\uff0c\u4f46\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u503c\u4e0d\u540c\u3002\n\u4ee5\u592a\u662fCryptoKitties\u8fd0\u884c\u7684\u533a\u5757\u94fe\u5e73\u53f0\u3002\u8fd9\u662f\u6700\u65e9\u7684\u5e94\u7528\u4e4b\u4e00\uff0cCryptoKitties\u662f\u4ee5\u592a\u548c\u533a\u5757\u94fe\u6700\u65e9\u7684\u5e94\u7528\u4e4b\u4e00\u3002\u73b0\u5728\uff0c\u4e8b\u60c5\u53d8\u5f97\u6709\u8da3\u8d77\u6765\u4e86\u3002CryptoKitties\u5b9e\u9645\u4e0a\u662f\u4f5c\u4e3a\u5bf9Etherum\u5e73\u53f0\u7684\u6d4b\u8bd5\u800c\u521b\u5efa\u7684\u3002\u6e38\u620f\u80cc\u540e\u7684\u56e2\u961f\u60f3\u770b\u770b\u4ee5\u592a\u5c06\u5982\u4f55\u6269\u5c55\uff0c\u672c\u8d28\u4e0a\u662f\u8bd5\u56fe\u5bf9\u5176\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\uff0c\u8bd5\u56fe\u6253\u7834\u5b83\uff0c\u770b\u770b\u4ed6\u4eec\u9700\u8981\u5728\u54ea\u91cc\u52a0\u5f3a\u5b83\u3002\n\u6570\u5b57\u732b\u662f\u8fd9\u9879\u7a81\u7834\u6027\u6280\u672f\u7684\u9996\u6279\u5e94\u7528\u4e4b\u4e00\uff0c\u8fd9\u5c31\u66f4\u6709\u610f\u4e49\u4e86\uff0c\u5bf9\u5427\uff1f\n\u8fd9\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u6e38\u620f\uff0c\u4f46\u8fd9\u5e76\u6ca1\u6709\u963b\u6b62\u5b83\u6210\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6e38\u620f\u3002CryptoKitties\u7684\u76ee\u7684\u662f\u4f5c\u4e3a\u4ee5\u592a\u7684\u538b\u529b\u6e90\uff0c\u8ba9\u56e2\u961f\u770b\u5230\u5b83\u5728\u89c4\u6a21\u4e0a\u7684\u4e0d\u8db3\u4e4b\u5904\uff0c\u5e76\u5c06\u5176\u6536\u7d27\u3002\u4f46\u8fd9\u573a\u6bd4\u8d5b\u7684\u6210\u529f\u7a0b\u5ea6\u8d85\u51fa\u4e86\u4ed6\u4eec\u7684\u60f3\u8c61\u3002\n\u6700\u7a00\u6709\u7684CryptoKitties\u53ef\u4ee5\u5356\u523010\u4e07\u7f8e\u5143\u4ee5\u4e0a\uff0c\u636e\u62a5\u9053\uff0c\u4e2a\u4eba\u7528\u6237\u5728\u4ed6\u4eec\u7684\u6536\u85cf\u4e0a\u82b1\u8d39\u4e86\u9ad8\u8fbe670\u4e07\u7f8e\u5143\u3002\u8fd9\u4e2a\u6545\u4e8b\u7684\u5bd3\u610f\u662f\uff0c\u5982\u679c\u4e00\u53ea\u6570\u5b57\u732b\u53ef\u4ee5\u5356\u523017\u4e07\u7f8e\u5143\uff0c\u6211\u60f3\u6211\u4eec\u81f3\u5c11\u53ef\u4ee5\u5356\u523020\u4e07\u7f8e\u5143\u7684\u6570\u5b57\u72d7-\u8fd8\u6709\u4eba\u60f3\u52a0\u5165\u5417\uff1f", "note_en": "The blockchain has promised us incredible new opportunities as a society. A decentralized banking system. Traceable food production for sustainability purposes. Digital cats that you can sell for over $100,000.\n That last one actually isn\u2019t a promise anymore \u2014 the blockchain community brought it to digital devices all across the U.S. back in 2017.\n   Collect and trade  CryptoKitties in one of the world\u2019s first blockchain games. Breed your rarest cats to create the purrfect furry friend. The future is meow!\n When I first heard about  CryptoKitties, my mind was completely blown. To be honest I thought it was absurd until I found out that a single CryptoKitty had sold for roughly $170,000, at which point I still thought it was absurd but the feeling was overtaken by wishing that I had bred that rare digital cat.\n  The game works such that users own unique CryptoKitties, and are able to breed their own digital cats together. The attributes of each cat are combined through what I can only assume is a decently complex algorithm behind the scenes, to create a new unique CryptoKitty. Based on the type of cat, the cat\u2019s traits, the generation, and a few other factors, the cat is deemed to be a certain level of rarity. To be clear though, traits do not have an inherent rarity \u201cscore\u201d, but rather, certain types of cats are deemed to be rare when they have certain traits. What those traits are, differs from cat to cat.\n   The nature of rarity is inherently dependent on scarcity. In order for something to be rare, a very limited number can exist, and this very fact drives up its value. It is simple supply and demand. So how can something digital, something that by its very nature can be replicated over and over again at very little cost, be rare?\n Enter the blockchain. For those of you who have heard this buzzword tossed around endlessly but are not entirely sure what it is still, the blockchain is a relatively new technology that, in essence, allows us to mimic the qualities of scarcity and uniqueness that the real world has.\n In the non-digital world, there is a financial cost to produce something, not to mention the opportunity cost of time, resources, etc. These limitations lead to a truth that only a finite amount of anything can ever be produced.  Even if the amount is large, the limit still exists. Furthermore, if I produce 5 versions of the same exact physical book to sell, I inherently know the difference between the 5 books because I can see the different versions in plain sight. I understand who owns each one because I physically give someone a version of the book upon selling it, at which point  I can no longer sell that book.\n We don\u2019t have those same limitations in the digital world, though. At least, not in the same way. If I create a digital book, I can hypothetically sell that book infinite times. There is no way to differentiate between one person\u2019s copy of the book from a different person\u2019s copy.\n The blockchain solves this problem. It gives us a way to make digital items truly unique from one another, even if they are seemingly identical \u2014 just like in the real world.\n  The blockchain is able to mimic these qualities using fungible and non-fungible tokens. According to Wikipedia:\n A  non-fungible token (NFT) is a special type of  cryptographic token which represents something unique; non-fungible tokens are thus not interchangeable. This is in contrast to cryptocurrencies like  bitcoin, and many network or utility tokens that are  fungible in nature.\n A fungible token, which is what the overwhelming majority of cryptocurrencies use, still provides a unique identity but has a consistent value, also known as \u201cfiat money\u201d. All that this really means is that if on a given day one bitcoin is equivalent to $20 USD, then every single bitcoin in existence on that day is also equivalent to $20 USD.\n Fungible tokens mimic uniqueness and limitations for digital items, but because of the intrinsic value, they don\u2019t mimic rarity. For this reason, CryptoKitties uses non-fungible tokens. Non-fungible tokens create a unique identity for each cat, but the values differ among them.\n  Ethereum is the blockchain platform on which CryptoKitties runs. It was one of the first, and CryptoKitties was one of the first applications of Ethereum and the blockchain. Now here is where it gets funny. CryptoKitties were actually created as a test for the Ethereum platform. The team behind the game wanted to see how Ethereum would scale, and essentially was trying to perform stress tests on it to try to break it and see where they needed to strengthen it.\n Makes a little more sense that digital cats were one of the first applications of this ground-breaking technology, right?\n It wasn\u2019t intended to be a real game, but that didn\u2019t stop it from becoming one. CryptoKitties served its purpose as a stressor on Ethereum and allowed the team to see where it was lacking at scale and to tighten it up. But the game took off more than they ever could have imagined.\n The rarest of CryptoKitties can sell for well over $100,000, and it has been reported that individual users have spent as much as $6.7 million on their collection. The moral of the story here is, if a digital  cat can sell for $170,000, I think we could get at least $200,000 for a digital dog \u2014 anyone else want in?", "posttime": "2020-05-25 09:41:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u50ac\u751f,application,cryptokitties", "title": "CryptoKitties\uff1a\u533a\u5757\u94fe\u7684\u5e94\u7528\u50ac\u751f\u4e86\u4ef7\u503c10\u4e07\u7f8e\u5143\u7684\u6570\u5b57\u732b", "title_en": "CryptoKitties: An Application of Blockchain That Led to Digital Cats Worth $100k", "transed": 1, "url": "https://medium.com/swlh/cryptokitties-an-early-application-of-the-blockchain-that-led-to-digital-cats-worth-100k-c21f7eee4dc7", "via": "", "real_tags": ["app", "\u50ac\u751f"]}, {"category": "", "categoryclass": "", "imagename": "8ab0817749c1cbea867b9a80e115ed2f.jpg", "infoid": 1003588, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e94\u5e74\u591a\u6765\uff0c\u7206\u7c73\u82b1\u65f6\u95f4\u4e00\u76f4\u662f\u597d\u83b1\u575e\u7684\u773c\u4e2d\u9489\u3002\n\u201c\u6d77\u76d7Netflix\u201d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6253\u5f00\u4e00\u4e2a\u5305\u542b\u6570\u5343\u90e8\u6d41\u5a92\u4f53\u7535\u5f71\u548c\u7535\u89c6\u8282\u76ee\u7684\u8d44\u6599\u5e93\u3002\n\u7535\u5f71\u534f\u4f1a(MPA)\u5f88\u65e9\u5c31\u610f\u8bc6\u5230\u4e86\u8fd9\u4e00\u5a01\u80c1\uff0c\u5e76\u8feb\u4f7f\u539f\u59cb\u5f00\u53d1\u4eba\u5458\u8ba4\u8f93\u3002\u8fd9\u594f\u6548\u4e86\uff0c\u4f46\u4e3a\u65f6\u5df2\u665a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u5f88\u5feb\u5c31\u88ab\u5176\u4ed6\u4eba\u590d\u5174\u4e86\u3002\n\u4eca\u5929\uff0c\u7206\u7c73\u82b1\u65f6\u95f4\u901a\u8fc7\u8bb8\u591a\u9879\u76ee\u5206\u53c9\u7ee7\u7eed\u5b58\u5728\u3002\u6700\u53d7\u6b22\u8fce\u7684\u662fPopcornTime.app\uff0c\u5b83\u548c\u5b83\u7684\u524d\u8eab\u4e00\u6837\uff0c\u5728\u5f00\u53d1\u8005\u6258\u7ba1\u5e73\u53f0GitHub\u4e0a\u516c\u5f00\u5206\u4eab\u6e90\u4ee3\u7801\u3002\u8fd9\u5141\u8bb8\u5176\u4ed6\u4eba\u4e0b\u8f7d\u3001\u4fee\u6539\u548c\u5171\u4eab\u5b83\u3002\nMPA\u5bf9\u6b64\u611f\u5230\u4e0d\u6ee1\uff0c\u6700\u8fd1\u91c7\u53d6\u4e86\u884c\u52a8\u3002\u7535\u5f71\u4e1a\u7ec4\u7ec7\u5411\u5fae\u8f6f\u65d7\u4e0b\u7684GitHub\u901a\u62a5\u4e86\u8be5\u8f6f\u4ef6\u7684\u4fb5\u6743\u6027\u8d28\u3002\u636eMPA\u79f0\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u5305\u62ec\u6307\u5411\u76d7\u7248\u7f51\u7ad9\u3001\u76d7\u7248API\u548c\u6d77\u76d7\u6d2a\u6d41\u8ddf\u8e2a\u5668\u7684\u94fe\u63a5\uff0c\u8fd9\u4e9b\u94fe\u63a5\u7528\u4e8e\u4e0b\u8f7d\u76d7\u7248\u7535\u5f71\u548c\u7535\u89c6\u8282\u76ee\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0cMPA\u5efa\u8bae\uff0c\u5982\u679c\u516c\u53f8\u4e0d\u91c7\u53d6\u884c\u52a8\uff0cGitHub\u672c\u8eab\u53ef\u80fd\u8981\u627f\u62c5\u4fb5\u72af\u7248\u6743\u7684\u8d23\u4efb\u3002\n\u867d\u7136GitHub\u53ef\u80fd\u4e0d\u540c\u610fMPA\u5bf9\u6cd5\u5f8b\u7684\u89e3\u91ca\uff0c\u4f46\u8be5\u516c\u53f8\u786e\u5b9e\u5220\u9664\u4e86\u7206\u7c73\u82b1\u65f6\u95f4\u4ee3\u7801\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c06\u662f\u6545\u4e8b\u7684\u7ed3\u675f\uff0c\u4f46\u7206\u7c73\u82b1\u65f6\u95f4\u4e0d\u4f1a\u4e0d\u6218\u800c\u9000\u3002\n\u5f00\u53d1\u5546\u63d0\u4ea4\u4e86DMCA\u53cd\u901a\u77e5\uff0c\u89e3\u91caMPA\u7684\u8bf7\u6c42\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u8be5\u4ee3\u7801\u5c5e\u4e8e\u7206\u7c73\u82b1\u65f6\u95f4\uff0c\u800c\u4e0d\u662fMPA\uff0c\u7206\u7c73\u82b1\u65f6\u95f4\u8981\u6c42GitHub\u6062\u590d\u8bbf\u95ee\u3002\n\u201c\u8be5\u4ee3\u7801\u662f\u767e\u5206\u4e4b\u767e\u6211\u4eec\u7684\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u7248\u6743[\u539f\u6587\u5982\u6b64]\u6750\u6599\uff0c\u8bf7\u518d\u6b21\u68c0\u67e5\uff0c\u201d\u5f00\u53d1\u4eba\u5458\u5199\u9053\u3002\n\u8fd9\u6b3e\u5e94\u7528\u7684\u5f00\u53d1\u4eba\u5458\u5728\u8fd9\u91cc\u63d0\u51fa\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u89c2\u70b9\u3002\u8bc6\u522b\u7684\u4ee3\u7801(\u4e0d\u662f\u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f)\u5e76\u4e0d\u76f4\u63a5\u4fb5\u72af\u7248\u6743\uff0c\u4e5f\u4e0d\u5305\u542b\u4e0e\u4fb5\u72af\u7248\u6743\u7684\u6750\u6599\u7684\u76f4\u63a5\u94fe\u63a5\u3002\u8fd9\u610f\u5473\u7740DMCA\u901a\u77e5\u5728\u8fd9\u91cc\u53ef\u80fd\u4e0d\u662f\u6b63\u786e\u7684\u5de5\u5177\u3002\n\u9762\u5bf9\u8fd9\u4e24\u4e2a\u8bf7\u6c42\uff0cGitHub\u73b0\u5728\u51b3\u5b9a\u6062\u590d\u5bf9\u7206\u7c73\u82b1\u65f6\u95f4\u5b58\u50a8\u5e93\u7684\u5b8c\u5168\u8bbf\u95ee\u3002\n\u7136\u800c\uff0c\u8fd9\u4e00\u51b3\u5b9a\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u5b83\u4e0e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u7684\u610f\u89c1\u4e00\u81f4\u3002DMCA\u7b80\u5355\u5730\u89c4\u5b9a\uff0c\u5728\u53d1\u51fa\u53cd\u901a\u77e5\u540e\uff0c\u5185\u5bb9\u53ef\u4ee5\u5728\u4e24\u5468\u540e\u6062\u590d\uff0c\u9664\u975e\u7d22\u8d54\u65b9\u63d0\u8d77\u8bc9\u8bbc\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cMPA\u9009\u62e9\u4e0d\u5bf9\u7206\u7c73\u82b1\u65f6\u95f4\u8fd0\u8425\u5546\u63d0\u8d77\u8bc9\u8bbc\uff0c\u56e0\u6b64\u4ee3\u7801\u5e93\u53c8\u91cd\u65b0\u4e0a\u7ebf\u4e86\u3002\nMPA\u662f\u5426\u4f1a\u91c7\u53d6\u8fdb\u4e00\u6b65\u884c\u52a8\u8fd8\u6709\u5f85\u89c2\u5bdf\u3002\u7136\u800c\uff0c\u6574\u96c6\u7a81\u51fa\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u7206\u7c73\u82b1\u65f6\u95f4\u5e94\u7528\u7a0b\u5e8f\u662f\u4e00\u6b3e\u76d7\u7248\u5e94\u7528\u7a0b\u5e8f\u3002\u7136\u800c\uff0c\u7531GitHub\u6258\u7ba1\u7684\u4ee3\u7801\u672c\u8eab\u5e76\u6ca1\u6709\u4fb5\u6743\u3002\u56e0\u6b64\uff0c\u5e38\u89c4\u7684\u4e0b\u67b6\u901a\u77e5\u4f3c\u4e4e\u5728\u8fd9\u91cc\u884c\u4e0d\u901a\u3002", "note_en": "For more than half a decade, Popcorn Time has been a thorn in the side of Hollywood.\n The \u2018Netflix for Pirates\u2019 offers an easy-to-use application that opens the door to a library of thousands of streamable movies and TV-shows.\n The Motion Picture Asociation (MPA) recognized this threat early on and pressured the original developers to throw in the towel. That worked, but it came too late as the open-source project was swiftly revived by others.\n Today, Popcorn Time lives on through many project forks. The most popular is PopcornTime.app, which like its predecessor,  shares its source code publicly on the developer hosting platform GitHub. This allows others to download, modify, and share it.\n The MPA is not happy with this and took action recently. The movie industry group  informed GitHub, which is owned by Microsoft, about the infringing nature of the software. According to the MPA, the application includes links to pirate sites, pirate APIs, and pirate torrent trackers, which are used to download pirated movies and TV-shows.\n  On top of that, the MPA suggested that GitHub itself may be liable for copyright infringement if the company fails to take action.\n While the MPA\u2019s interpretation of the law is likely not shared by GitHub, the company did remove the Popcorn Time code. In most cases that would be the end of the story, but Popcorn Time was not backing off without a fight.\n The developers submitted a DMCA counternotice explaining that the MPA\u2019s request is not legitimate. The code is owned by Popcorn Time, not the MPA, and Popcorn Time asked GitHub to restore access.\n \u201cThe code is 100 % ours and do not contain any copyright [sic] material please check again,\u201d the  developer wrote.\n The app\u2019s developers made a good point here. The identified code (not the built app) is not directly copyright infringing and it contains no direct links to copyright-infringing material either. This means that a DMCA notice may not be the right tool here.\n Faced with both requests, GitHub has now decided to restore full access to the Popcorn Time repository.\n This decision doesn\u2019t necessarily mean that it agrees with the app developers, however. The DMCA simply prescribes that, following a counternotice, content can be restored after two weeks, unless the claiming party files a lawsuit.\n  In this case, the MPA chose not to file a lawsuit against the Popcorn Time operators, so the code repositories are back online again.\n Whether the MPA will follow-up with further action has yet to be seen. However, the whole episode highlights an interesting issue. There is little doubt that the Popcorn Time application is a pirate app. However, the code, as hosted by GitHub, is not infringing per se. As such, regular takedown notices don\u2019t appear to work here.", "posttime": "2020-05-25 09:24:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "github,\u4e0d\u987e,reinstates", "title": "GitHub\u4e0d\u987eMPA\u201c\u5a01\u80c1\u201d\u6062\u590d\u7206\u7c73\u82b1\u65f6\u95f4\u7801", "title_en": "GitHub Reinstates Popcorn Time Code Despite MPA \u2018Threat\u2019", "transed": 1, "url": "https://torrentfreak.com/github-reinstates-popcorn-time-code-despite-mpa-threat-200520/", "via": "", "real_tags": ["github", "\u4e0d\u987e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003587, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u6b63\u5728\u4f7f\u7528MapBox\u7684\u8def\u7531\u4f18\u5316API\u3002\u57fa\u672c\u4e0a\uff0c\u5b83\u8bd5\u56fe\u89e3\u51b3\u65c5\u884c\u5546\u95ee\u9898\uff0c\u5728\u8be5\u95ee\u9898\u4e2d\uff0c\u60a8\u5411API\u63d0\u4f9b\u591a\u4e2a\u5730\u70b9\u7684\u5750\u6807\uff0c\u5e76\u4e14\u5b83\u8fd4\u56de\u8fd9\u4e9b\u5730\u70b9\u4e4b\u95f4\u7684\u6301\u7eed\u65f6\u95f4\u4f18\u5316\u7684\u8def\u5f84\u3002\u8fd9\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7528\u4f8b\uff0c\u5728\u8fd9\u91ccRedis\u7f13\u5b58\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u3002Redis\u662f\u4e00\u4e2a\u901f\u5ea6\u6781\u5feb\u7684\u8f7b\u91cf\u7ea7\u5185\u5b58\u6570\u636e\u5e93\uff0c\u5177\u6709\u989d\u5916\u7684\u6301\u4e45\u6027\u9009\u9879\uff1b\u4f7f\u5176\u6210\u4e3a\u624b\u5934\u4efb\u52a1\u7684\u5b8c\u7f8e\u5019\u9009\u8005\u3002\u5728\u8fd9\u91cc\uff0c\u7f13\u5b58\u53ef\u4ee5\u4f7f\u60a8\u514d\u4e8e\u53d1\u51fa\u5197\u4f59\u7684API\u8bf7\u6c42\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u663e\u8457\u7f29\u77ed\u54cd\u5e94\u65f6\u95f4\u3002\n\u6211\u53d1\u73b0\u5728\u6211\u7684\u56fd\u5bb6\uff0cAPI\u8fd4\u56de\u7684\u4f18\u5316\u8def\u7531\u81f3\u5c11\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u6ca1\u6709\u663e\u8457\u53d8\u5316\u3002\u56e0\u6b64\uff0c\u5de5\u4f5c\u6d41\u7a0b\u5c06\u5982\u4e0b\u6240\u793a\uff1a\n\u4f7f\u7528\u952e\u503c\u6570\u636e\u7ed3\u6784\u5728Redis\u4e2d\u7f13\u5b58API\u54cd\u5e94\u3002\u8fd9\u91cc\uff0c\u8bf7\u6c42\u7684\u5750\u6807\u5b57\u7b26\u4e32\u5c06\u662f\u5173\u952e\u5b57\uff0c\u54cd\u5e94\u5c06\u662f\u76f8\u5e94\u503c\u3002\n\u4ec5\u5728\u54cd\u5e94\u672a\u7f13\u5b58\u65f6\u624d\u5411MapBox API\u53d1\u9001\u65b0\u8bf7\u6c42\uff0c\u7136\u540e\u5c06\u8be5\u54cd\u5e94\u6dfb\u52a0\u5230\u7f13\u5b58\u3002\n\u8981\u7ee7\u7eed\u6267\u884c\u4e0a\u8ff0\u5de5\u4f5c\u6d41\uff0c\u60a8\u9700\u8981\u5728\u7cfb\u7edf\u4e0a\u5b89\u88c5\u548c\u8bbe\u7f6eRedis\u6570\u636e\u5e93\u3002\u4e3a\u4e86\u76d1\u89c6\u6570\u636e\u5e93\uff0c\u6211\u5c06\u4f7f\u7528RedisInsight\u3002\u8bbe\u7f6eRedis\u548cRedisInsight\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u901a\u8fc7docker\u548cdocker-compose\u3002\u8fd9\u91cc\u6709\u4e00\u4e2adocker-compose\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u901a\u8fc7\u4e00\u4e2a\u547d\u4ee4\u8bbe\u7f6e\u6240\u6709\u5185\u5bb9\u3002\n#docker-compose.yml\u7248\u672c\uff1a&#34\uff1b3.2&#34\uff1b\u670d\u52a1\uff1aredis\uff1a\u5bb9\u5668\u540d\u79f0\uff1aredis-cont image\uff1a&#34\uff1bredis\uff1aalpine&#34\uff1b\u547d\u4ee4\uff1aredis-server--\u8981\u6c42\u901a\u8fc7ubuntu\u73af\u5883\uff1a-redis_password=ubuntu-redis_Replication_mode=master ports\uff1a-&#34\uff1b6379\uff1a6379&#34\uff1b\u5377\uff1a#\u5c06\u91cd\u65b0\u641c\u7d22\u6570\u636e\u4fdd\u5b58\u5230\u60a8\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55-./redis-data\uff1a/data\u547d\u4ee4\uff1a#\u5982\u679c\u6bcf10\u79d2\u6dfb\u52a0100\u4e2a\u5bc6\u94a5\uff0c\u5219\u4fdd\u5b58-&#34\uff1b--save 10 100&#34\uff1b#set password-&#34\uff1b--redissight\uff1a#redis db\u53ef\u89c6\u5316\u4eea\u8868\u677fCONTAINER_NAME\uff1aredisinsight-cont image\uff1aredislabs/redissight ports\uff1a-8001\uff1a8001\u5377\uff1a-redisinsight\uff1a/db\u3002\n\u4e0a\u8ff0docker-composed\u6587\u4ef6\u6709\u4e24\u4e2a\u670d\u52a1\uff1aredis\u548credissight\u3002\u6211\u5df2\u7ecf\u4f7f\u7528\u865a\u62df\u5bc6\u7801ubuntu\u8bbe\u7f6e\u4e86\u6570\u636e\u5e93\uff0c\u5e76\u4f7f\u7528\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u540d\u4e3aredis-data\u7684\u6587\u4ef6\u5939\u4f7f\u5176\u6301\u4e45\u5316\u3002\u6570\u636e\u5e93\u76d1\u542c\u672c\u5730\u4e3b\u673a\u7684\u7aef\u53e36379\u3002\u60a8\u53ef\u4ee5\u5728\u7aef\u53e38000\u4e2d\u4f7f\u7528redissight\u6765\u76d1\u89c6\u6570\u636e\u5e93\u3002\u8981\u542f\u52a8Redis\u548cRedisInsight\u5bb9\u5668\uff0c\u8bf7\u8fd0\u884c\uff1a\n\u6b64\u547d\u4ee4\u5c06\u542f\u52a8\u6570\u636e\u5e93\u5e76\u76f8\u5e94\u5730\u8fdb\u884c\u76d1\u89c6\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u6d4f\u89c8\u5668\u8f6c\u5230\u8fd9\u4e2alocalhost\uff1a8000\u94fe\u63a5\uff0c\u5e76\u5c06redissight\u8fde\u63a5\u5230\u60a8\u7684\u6570\u636e\u5e93\u3002\u8fde\u63a5\u6570\u636e\u5e93\u540e\uff0c\u60a8\u5e94\u8be5\u4f1a\u5728\u91cd\u65b0\u6d1e\u5bdf\u9762\u677f\u4e2d\u770b\u5230\u5982\u4e0b\u6240\u793a\u7684\u4eea\u8868\u677f\uff1a\n\u5bf9\u4e8e\u672c\u5730\u5f00\u53d1\uff0c\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u60a8\u7684python\u73af\u5883\u5e76\u4f7f\u7528pip\u5b89\u88c5\u4f9d\u8d56\u9879\u3002\u8fd9\u91cc\uff0c\u6211\u5728\u4e00\u53f0Linux\u673a\u5668\u4e0a\uff0c\u4f7f\u7528\u865a\u62df\u73af\u5883\u8fdb\u884c\u9694\u79bb\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u57fa\u4e8e*nix\u7684\u7cfb\u7edf\u5e76\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5\u4e86python3.8\uff0c\u5219\u4ee5\u4e0b\u547d\u4ee4\u5c06\u8d77\u4f5c\u7528\u3002\u8fd9\u5c06\u5728\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u5fc5\u8981\u7684\u4f9d\u8d56\u9879\uff1a\n\u5047\u8bbe\u6570\u636e\u5e93\u670d\u52a1\u5668\u6b63\u5728\u8fd0\u884c\uff0c\u5e76\u4e14\u60a8\u5df2\u7ecf\u5b89\u88c5\u4e86\u4f9d\u8d56\u9879\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u65ad\u5c06redis-py\u5ba2\u6237\u673a\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002\n\u5bfc\u5165redis\u5bfc\u5165sys def redis_connect()-&gt\uff1bredis\u3002\u5ba2\u6237\u3002redis\uff1atry\uff1aclient=redis\u3002redis(host=&#34\uff1blocalhost&#34\uff1b\uff0cport=6379\uff0cpassword=&#34\uff1bubuntu&#34\uff1b\uff0cdb=0\uff0csocket_timeout=5\uff0c)ping=client\u3002ping()\u5982\u679cping\u4e3aTrue\uff1a\u8fd4\u56de\u9664redis\u4e4b\u5916\u7684\u5ba2\u6237\u7aef\u3002AuthenticationError\uff1a\u6253\u5370(&#34\uff1bAuthenticationError&#34\uff1b)sys\u3002\u9000\u51fa(1)\u5ba2\u6237\u7aef=redis_connect()\u3002\n\u4e0a\u9762\u7684\u6458\u5f55\u5c1d\u8bd5\u4f7f\u7528\u7aef\u53e36379\u8fde\u63a5\u5230Redis\u6570\u636e\u5e93\u670d\u52a1\u5668\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u662f\u5982\u4f55\u901a\u8fc7password\u53c2\u6570\u63d0\u4f9b\u5bc6\u7801ubuntu\u7684\u3002\u5728\u8fd9\u91cc\uff0cclient.ping()\u5e2e\u52a9\u60a8\u786e\u5b9a\u8fde\u63a5\u662f\u5426\u5df2\u6210\u529f\u5efa\u7acb\u3002\u5982\u679c\u53ef\u4ee5\u5efa\u7acb\u6210\u529f\u7684\u8fde\u63a5\uff0c\u5219\u8fd4\u56deTrue\uff0c\u6216\u8005\u5728\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\u5f15\u53d1\u7279\u5b9a\u7684\u9519\u8bef\u3002\u4e0a\u9762\u7684\u51fd\u6570\u5904\u7406AuthenticationError\uff0c\u5e76\u5728\u51fa\u73b0\u9519\u8bef\u65f6\u6253\u5370\u51fa\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u8fd0\u884credis_connect()\u51fd\u6570\u5c06\u8fd4\u56deredis.client.Redis\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u7a0d\u540e\u5c06\u4f7f\u7528\u6b64\u5b9e\u4f8b\u5728Redis\u6570\u636e\u5e93\u4e2d\u8bbe\u7f6e\u548c\u68c0\u7d22\u6570\u636e\u3002\n\u4f7f\u7528httpx\u4eceMapbox API\u5bfc\u5165httpx def get_routes_from_api(\u5750\u6807\uff1astr)-&gt\uff1bdict\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u6570\u636e\u3002\u4f5c\u4e3a\u5ba2\u6237\u7aef\u7684Client()\uff1aBase_url=&#34\uff1bhttps://api.mapbox.com/optimized-trips/v1/mapbox/driving&#34\uff1bGeometries=&#34\uff1bGeojson&#34\uff1bAccess_Token=&#34\uff1bYour-MapBox-api-Token&#34\uff1burl=f&#34\uff1b{base_url}/{coordinates}\uff1fgeometries={geometries}&amp\uff1baccess_token={access_token}&#34\uff1bResponse=Client\u3002get(Url)\u8fd4\u56de\u54cd\u5e94\u3002json()\u3002\n\u4e0a\u9762\u7684\u4ee3\u7801\u4f7f\u7528Python\u7684httpx\u5e93\u53d1\u51faGET\u8bf7\u6c42\u3002Httpx\u51e0\u4e4e\u662f\u65e0\u5904\u4e0d\u5728\u7684\u8bf7\u6c42\u5e93\u7684\u4e34\u65f6\u66ff\u4ee3\u54c1\uff0c\u4f46\u901f\u5ea6\u66f4\u5feb\uff0c\u5e76\u4e14\u652f\u6301\u5f02\u6b65\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668httpx.Client()\u5728\u53d1\u51faGET\u8bf7\u6c42\u65f6\u8fdb\u884c\u66f4\u597d\u7684\u8d44\u6e90\u7ba1\u7406\u3002\u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u8fdb\u884c\u65e0\u9ebb\u70e6\u8d44\u6e90\u7ba1\u7406\u7684\u5185\u5bb9\u3002\nbase_url\u662f\u8def\u7531\u4f18\u5316API\u7684\u57fa\u672curl\uff0c\u60a8\u9700\u8981\u5728access_Token\u5b57\u6bb5\u4e2d\u63d0\u4f9b\u60a8\u81ea\u5df1\u7684\u8bbf\u95ee\u4ee4\u724c\u3002\u8bf7\u6ce8\u610f\uff0curl\u53d8\u91cf\u5982\u4f55\u6784\u5efa\u6700\u7ec8\u7684\u8bf7\u6c42url\u3002\u5750\u6807\u4f7f\u7528lat0\uff0clon0\uff1blat1\uff0clon1\uff1blat2\uff0clon2.\u3002\u683c\u5f0f\u3002\u51fd\u6570\u7684\u5176\u4f59\u90e8\u5206\u53d1\u9001http\u8bf7\u6c42\uff0c\u5e76\u4f7f\u7528response.json()\u65b9\u6cd5\u5c06\u54cd\u5e94\u8f6c\u6362\u4e3a\u672c\u673a\u5b57\u5178\u5bf9\u8c61\u3002\nFROM DATETIME IMPORT TIME\u589e\u91cf\u5b9a\u4e49GET_ROUTS_FROM_CACHE(KEY\uff1aSTR)-&gt\uff1bstr\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u4eceredis\u83b7\u53d6\u6570\u636e\u3002&#34\uff1b&#34\uff1b&#34\uff1bval=client\u3002get(Key)return val val def set_routes_to_cache(key\uff1astr\uff0cvalue\uff1astr)-&gt\uff1bbool\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u5c06\u6570\u636e\u8bbe\u7f6e\u4e3aredis\u3002&#34\uff1b&#34\uff1b&#34\uff1bstate=client\u3002Setex(\u952e\uff0c\u65f6\u95f4\u589e\u91cf(\u79d2=3600)\uff0c\u503c=\u503c\uff0c)\u8fd4\u56de\u72b6\u6001\n\u8fd9\u91cc\uff0c\u952e\u548c\u503c\u90fd\u662f\u5b57\u7b26\u4e32\u3002\u5728\u7b2c\u4e8c\u4e2a\u51fd\u6570set_routes_to_cache\u4e2d\uff0cclient.setex()\u65b9\u6cd5\u8bbe\u7f6e\u952e\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a1\u5c0f\u65f6\u3002\u4e4b\u540e\uff0c\u952e\u53ca\u5176\u5173\u8054\u503c\u5c06\u81ea\u52a8\u5220\u9664\u3002\nROUTE_OPTIMA\u51fd\u6570\u662f\u7f16\u6392\u548c\u6267\u884c\u9488\u5bf9\u8bf7\u6c42\u7684\u54cd\u5e94\u7684\u7f13\u5b58\u548c\u8fd4\u56de\u7684\u4e3b\u4ee3\u7406\u3002\u5b83\u5927\u81f4\u9075\u5faa\u5982\u4e0b\u6240\u793a\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\u5f53\u65b0\u8bf7\u6c42\u5230\u8fbe\u65f6\uff0c\u8be5\u51fd\u6570\u9996\u5148\u68c0\u67e5\u8fd4\u56de\u503c\u662f\u5426\u5b58\u5728\u4e8eRedis\u7f13\u5b58\u4e2d\u3002\u5982\u679c\u8be5\u503c\u5b58\u5728\uff0c\u5b83\u4f1a\u663e\u793a\u7f13\u5b58\u503c\uff0c\u5426\u5219\uff0c\u5b83\u4f1a\u5411MapBox API\u53d1\u9001\u4e00\u4e2a\u65b0\u8bf7\u6c42\uff0c\u7f13\u5b58\u8be5\u503c\uff0c\u7136\u540e\u663e\u793a\u7ed3\u679c\u3002\ndef route_Optima(\u5750\u6807\uff1astr)-&gt\uff1bdict\uff1a#\u9996\u5148\uff0c\u5b83\u5728redis cache data=get_routes_from_cache(key=\u5750\u6807)#\u4e2d\u67e5\u627e\u6570\u636e\u3002#\u5982\u679c\u627e\u5230\u7f13\u5b58\uff0c\u5219\u5728\u6570\u636e\u4e0d\u4e3aNone\u7684\u60c5\u51b5\u4e0b\u63d0\u4f9b\u6765\u81ea\u7f13\u5b58\u7684\u6570\u636e\uff1adata=json\u3002Loads(Data)data[&#34\uff1bcache&#34\uff1b]=True return data\u5426\u5219\uff1a#\u5982\u679c\u6ca1\u6709\u627e\u5230cache\uff0c\u5219\u5411MapBox API data=get_routes_from_api(\u5750\u6807)#\u6b64\u5757\u8bbe\u7f6e\u5c06\u54cd\u5e94\u4fdd\u5b58\u5230redis\uff0c\u5982\u679cdata[&#34\uff1bcode&#34\uff1b]==&#34\uff1bOK&#34\uff1b\uff1adata[&#34\uff1bcache&#34\uff1b]=false data=json\uff0c\u5219\u76f4\u63a5\u63d0\u4f9b\u54cd\u5e94\u3002\u8f6c\u50a8(\u6570\u636e)state=set_route_to_cache(key=\u5750\u6807\uff0cvalue=data)\u5982\u679cstate\u4e3aTrue\uff1a\u5219\u8fd4\u56dejson\u3002\u52a0\u8f7d(\u6570\u636e)\u8fd4\u56de\u6570\u636e\u3002\n\u8fd9\u90e8\u5206\u4ee3\u7801\u5305\u88c5\u4e86\u539f\u59cb\u7684\u8def\u7531\u4f18\u5316API\uff0c\u5e76\u5c06\u5176\u516c\u5f00\u4e3a\u65b0\u7aef\u70b9\u3002\u6211\u5df2\u7ecf\u4f7f\u7528fast API\u6784\u5efa\u4e86\u5305\u88c5\u5668API\u3002\u8fd9\u6837\u505a\u8fd8\u4f1a\u9690\u85cf\u8eab\u4efd\u9a8c\u8bc1\u7684\u5e95\u5c42\u7ec6\u8282\u548cMapBox API\u7684\u5b9e\u9645\u7aef\u70b9\u3002\n\u4eceFastapi\u5bfc\u5165FastAPI app=FastAPI()@app\u3002\u83b7\u53d6(&#34\uff1b/route-Optima/{\u5750\u6807}&#34\uff1b)def\u89c6\u56fe(\u5750\u6807)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u8fd9\u5c06\u5305\u88c5\u6211\u4eec\u539f\u6765\u7684\u8def\u7531\u4f18\u5316API\u5e76\u5408\u5e76Redis\u7f13\u5b58\u3002\u60a8\u5c06\u53ea\u5411\u6700\u7ec8\u7528\u6237\u516c\u5f00\u6b64API\u3002&#34\uff1b&#34\uff1b&#34\uff1b#\u5750\u6807=&#34\uff1b90.3866\uff0c23.7182\uff1b90.3742\uff0c23.7461&#34\uff1bRETURN ROUTE_OPTIMA(\u5750\u6807)\u3002\n#app.py import json\u5bfc\u5165sys from datetime import time\u589e\u91cfimport httpx import redis from fast api import FastAPI def redis_connect()-&gt\uff1bredis\u3002\u5ba2\u6237\u3002redis\uff1atry\uff1aclient=redis\u3002redis(host=&#34\uff1blocalhost&#34\uff1b\uff0cport=6379\uff0cpassword=&#34\uff1bubuntu&#34\uff1b\uff0cdb=0\uff0csocket_timeout=5\uff0c)ping=client\u3002ping()\u5982\u679cping\u4e3aTrue\uff1a\u8fd4\u56de\u9664redis\u4e4b\u5916\u7684\u5ba2\u6237\u7aef\u3002AuthenticationError\uff1a\u6253\u5370(&#34\uff1bAuthenticationError&#34\uff1b)sys\u3002\u9000\u51fa(1)client=redis_connect()def get_routes_from_api(\u5750\u6807\uff1astr)-&gt\uff1bdict\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u6570\u636e\u6765\u81eaMapbox API\u3002&#34\uff1b&#34\uff1b&#34\uff1b\u4f7f\u7528httpx\u3002\u4f5c\u4e3a\u5ba2\u6237\u7aef\u7684Client()\uff1aBase_url=&#34\uff1bhttps://api.mapbox.com/optimized-trips/v1/mapbox/driving&#34\uff1bGeometries=&#34\uff1bGeojson&#34\uff1bAccess_Token=&#34\uff1bYour-MapBox-api-Token&#34\uff1burl=f&#34\uff1b{base_url}/{coordinates}\uff1fgeometries={geometries}&amp\uff1baccess_token={access_token}&#34\uff1bResponse=Client\u3002get(Url)\u8fd4\u56de\u54cd\u5e94\u3002json()def get_routes_from_cache(key\uff1astr)-&gt\uff1bstr\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u6765\u81earedis\u7684\u6570\u636e\u3002&#34\uff1b&#34\uff1b&#34\uff1bval=client\u3002get(Key)return val val def set_routes_to_cache(key\uff1astr\uff0cvalue\uff1astr)-&gt\uff1bbool\uff1a&#34\uff1b&#34\uff1b&#34\uff1bdata to redis\u3002&#34\uff1b&#34\uff1b&#34\uff1bstate=client\u3002setex(key\uff0ctimeDelta(sec=3600)\uff0cvalue=value\uff0c)\u8fd4\u56de\u72b6\u6001def route_Optima(\u5750\u6807\uff1astr)-&gt\uff1bdict\uff1a#\u9996\u5148\uff0c\u5b83\u5728redis\u7f13\u5b58data=get_routes_from_cache(key=\u5750\u6807)#\u4e2d\u67e5\u627e\u6570\u636e\u3002#\u5982\u679c\u627e\u5230\u7f13\u5b58\uff0c\u5219\u5728\u6570\u636e\u4e0d\u4e3aNone\u7684\u60c5\u51b5\u4e0b\u63d0\u4f9b\u6765\u81ea\u7f13\u5b58\u7684\u6570\u636e\uff1adata=json\u3002Loads(Data)data[&#34\uff1bcache&#34\uff1b]=True return data\u5426\u5219\uff1a#\u5982\u679c\u6ca1\u6709\u627e\u5230cache\uff0c\u5219\u5411MapBox API data=get_routes_from_api(\u5750\u6807)#\u6b64\u5757\u8bbe\u7f6e\u5c06\u54cd\u5e94\u4fdd\u5b58\u5230redis\uff0c\u5982\u679cdata[&#34\uff1bcode&#34\uff1b]==&#34\uff1bOK&#34\uff1b\uff1adata[&#34\uff1bcache&#34\uff1b]=false data=json\uff0c\u5219\u76f4\u63a5\u63d0\u4f9b\u54cd\u5e94\u3002\u8f6c\u50a8(\u6570\u636e)state=set_route_to_cache(key=\u5750\u6807\uff0cvalue=data)\u5982\u679cstate\u4e3aTrue\uff1a\u5219\u8fd4\u56dejson\u3002\u52a0\u8f7d(\u6570\u636e)\u8fd4\u56de\u6570\u636eAPP=FastAPI()@APP\u3002\u83b7\u53d6(&#34\uff1b/route-Optima/{coels}&#34\uff1b)def view(\u5750\u6807\uff1astr)-&gt\uff1bdict\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u8fd9\u5c06\u5305\u88c5\u6211\u4eec\u539f\u59cb\u7684\u8def\u7531\u4f18\u5316API\u5e76\u5408\u5e76Redis\u7f13\u5b58\u3002\u60a8\u5c06\u53ea\u5411\u6700\u7ec8\u7528\u6237\u516c\u5f00\u6b64API\u3002&#34\uff1b&#34\uff1b&#34\uff1b#\u5750\u6807=&#34\uff1b90.3866\uff0c23.7182\uff1b90.3742\uff0c23.7461&#34\uff1bRETURN ROUTE_OPTIMA(\u5750\u6807)\u3002\n\u60a8\u53ef\u4ee5\u5c06\u5b8c\u6574\u7684\u4ee3\u7801\u590d\u5236\u5230\u540d\u4e3aapp.py\u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f(\u5047\u8bbeRedis\u6b63\u5728\u8fd0\u884c\uff0credisinsight\u6b63\u5728\u8fd0\u884c\uff0c\u5e76\u4e14\u60a8\u5df2\u7ecf\u9884\u5148\u5b89\u88c5\u4e86\u4f9d\u8d56\u9879)\uff1a\n\u8f6c\u5230\u60a8\u7684\u6d4f\u89c8\u5668\uff0c\u4f7f\u7528\u4e00\u7ec4\u65b0\u5750\u6807\u70b9\u51fb\u7aef\u70b9\u3002\u4f8b\u5982\uff1a\n{&#34\uff1b\u4ee3\u7801&#34\uff1b\uff1a&#34\uff1b\u786e\u5b9a&#34\uff1b\uff0c&#34\uff1b\u8def\u70b9&#34\uff1b\uff1a[{&#34\uff1b\u8ddd\u79bb&#34\uff1b\uff1a26.041809241776583\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\u4f4d\u7f6e&#34\uff1b\uff1a[90.386855\uff0c23.718213]\uff0c&#34\uff1b\u8def\u70b9_\u7d22\u5f15&#34\uff1b\uff1a6.286653078791968\uff0c&#34\uff1bTRIPS_INDEX&#34\uff1b\uff1a0}\uff0c{&#34\uff1b\u8ddd\u79bb&#34\uff1b\uff1a6.286653078791968\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\u4f4d\u7f6e&#34\uff1b\uff1a[90.374253\uff0c23.746129]\uff0c&#34\uff1b\u8def\u70b9_\u7d22\u5f15&#34\uff1b\uff1a1\uff0c&#34\uff1bTRIPS_INDEX&#34\uff1b\uff1a90.386855}]\uff0c&#34\uff1bTrips&#34\uff1b\uff1a[{&#34\uff1b\u51e0\u4f55&#34\uff1b\uff1a{&#34\uff1b\u5750\u6807&#34\uff1b\uff1a[90.386855\uff0c23.718213]\uff0c&#34\uff1b\u2026\u2026&#34\uff1b]\uff0c&#34\uff1b\u7c7b\u578b&#34\uff1b\uff1a&#34\uff1b\u7ebf\u4e32&#34\uff1b}\uff0c&#34\uff1b\u817f&#34\uff1b\uff1a[{&#34\uff1b\u6458\u8981&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\u6743\u91cd&#34\uff1b\uff1a3303.1\uff0c&#34\uff1b\u6301\u7eed\u65f6\u95f4&#34\uff1b\uff1a2842.8\uff0c&#34\uff1b\u6b65\u6570&#34\uff1b\uff1a[]\uff0c&#34\uff1b\u8ddd\u79bb&#34\uff1b\uff1a5250.2}\uff0c{&#34\uff1b\u6458\u8981&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff1b\uff0c&#34\uff1b\u6743\u91cd&#34\uff1b\uff1a2536.5\uff0c&#34\uff1b\u6301\u7eed\u65f6\u95f4&#34\uff1b\uff1a2297\uff0c&#34\uff1b\u6b65\u957f&#34\uff1b\uff1a[]\uff0c&#34\uff1b\u8ddd\u79bb&#34\uff1b\uff1a4554.8}]\uff0c&#34\uff1b\u6743\u91cd_\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u53ef\u8def\u7531\u6027&#34\uff1b\uff0c&#34\uff1b\u6743\u91cd&#34\uff1b\uff1a5839.6\uff0c&#34\uff1b\u6301\u7eed\u65f6\u95f4&#34\uff1b\uff1a5139.8\uff0c&#34\uff1b\u8ddd\u79bb&#34\uff1b\uff1a9805}]\uff0c&#34\uff1b\u7f13\u5b58&#34\uff1b\uff1aFALSE}\u3002\n\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u70b9\u51fb\u4e0a\u9762\u7684URL\uff0c\u90a3\u4e48json\u54cd\u5e94\u7684cache\u5c5e\u6027\u5e94\u8be5\u663e\u793a\u4e3afalse\u3002\u8fd9\u610f\u5473\u7740\u54cd\u5e94\u662f\u4ece\u539f\u59cb\u7684MapBox API\u63d0\u4f9b\u7684\u3002\u4f46\u662f\uff0c\u518d\u6b21\u4f7f\u7528\u76f8\u540c\u7684\u5750\u6807\u70b9\u51fb\u76f8\u540c\u7684URL\u5c06\u663e\u793a\u7f13\u5b58\u7684\u54cd\u5e94\uff0c\u8fd9\u4e00\u6b21\u7f13\u5b58\u5c5e\u6027\u5e94\u8be5\u663e\u793a\u4e3atrue\u3002\n\u4e00\u65e6\u60a8\u542f\u52a8\u5e76\u8fd0\u884c\u4e86\u6240\u6709\u5185\u5bb9\uff0c\u60a8\u5c31\u53ef\u4ee5\u901a\u8fc7redis Insight\u68c0\u67e5\u7f13\u5b58\u4e86\u3002\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u5728\u60a8\u7684\u5e94\u7528\u670d\u52a1\u5668\u8fd0\u884c\u65f6\u8f6c\u5230\u4e0b\u9762\u7684\u94fe\u63a5\uff1a\n\u4ece\u5de6\u4fa7\u83dc\u5355\u4e2d\u9009\u62e9Browser\u9762\u677f\uff0c\u7136\u540e\u5355\u51fb\u7f13\u5b58\u6570\u636e\u7684\u952e\u3002\u5b83\u5e94\u8be5\u663e\u793a\u5982\u4e0b\u5185\u5bb9\uff1a\n\u60a8\u8fd8\u53ef\u4ee5\u5728swagger UI\u4e2d\u4f7f\u7528API\u3002\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u8f6c\u81f3\u4ee5\u4e0b\u94fe\u63a5\uff1a\n\u8fd9\u5c06\u628a\u60a8\u5e26\u5230\u5927\u6447\u5927\u6446\u7684\u4eea\u8868\u76d8\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ea4\u4e92\u5f0fUI\u53d1\u51fa\u8bf7\u6c42\u3002\u7ee7\u7eed\u68c0\u67e5\u65b0\u5750\u6807\u7684\u7f13\u5b58\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u535a\u5ba2\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f\u5728\u8fd0\u884cUbuntu18.04\u7684\u673a\u5668\u4e0a\u7528python3.8\u7f16\u5199\u548c\u6d4b\u8bd5\u7684\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u8fd9\u6b3e\u5e94\u7528\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\u3002\n\u6b64\u5e94\u7528\u7a0b\u5e8f\u4ec5\u7528\u4e8e\u6f14\u793a\u76ee\u7684\u3002\u56e0\u6b64\uff0c\u5b83\u53ef\u80fd\u4e0d\u53cd\u6620\u751f\u4ea7\u5c31\u7eea\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u4f73\u5b9e\u8df5\u3002\u4e0d\u63a8\u8350\u4f7f\u7528\u6b64\u7c7b\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684API\u3002", "note_en": "Recently, I was working with  MapBox\u2019s  Route Optimization API. Basically, it tries to solve the  traveling salesman problem where you provide the API with coordinates of multiple places and it returns a duration-optimized route between those locations. This is a perfect usecase where  Redis caching can come handy. Redis is an blazing fast, lightweight in-memory database with additional persistence options; making it a perfect candidate for the task at hand. Here, caching can save you from making redundant API requests and also, it can dramatically improve the response time as well.\n I found that in my country, the optimized routes returned by the API do not change dramatically for at least for a couple of hours. So the workflow will look something like this:\n Caching the API response in Redis using the key-value data structure. Here the requested coordinate-string will be the key and the response will be the corresponding value\n      Only send a new request to MapBox API if the response is not cached and then add that response to cache\n  To proceed with the above workflow, you\u2019ll need to install and setup Redis database on your system. For monitoring the database, I\u2019ll be using  RedisInsight. The easiest way to setup Redis and RedisInsight is through  docker and  docker-compose. Here\u2019s a docker-compose that you can use to setup everything with a single command.\n # docker-compose.yml version :  &#34; 3.2&#34; services :  redis :  container_name :  redis-cont  image :  &#34; redis:alpine&#34;  command :  redis-server --requirepass ubuntu  environment :  -  REDIS_PASSWORD=ubuntu  -  REDIS_REPLICATION_MODE=master  ports :  -  &#34; 6379:6379&#34;  volumes :  # save redisearch data to your current working directory  -  ./redis-data:/data  command :  # Save if 100 keys are added in every 10 seconds  -  &#34; --save   10   100&#34;  # Set password  -  &#34; --requirepass   ubuntu&#34;  redisinsight :  # redis db visualization dashboard  container_name :  redisinsight-cont  image :  redislabs/redisinsight  ports :  -  8001:8001  volumes :  -  redisinsight:/db volumes :  redis-data :  redisinsight :\n The above  docker-compose file has two services,  redis and  redisinsight. I\u2019ve set up the database with a dummy password  ubuntu and made it persistent using a folder named  redis-data in the current working directory. The database listens in localhost\u2019s port  6379. You can monitor the database using  redisinsight in port 8000. To spin up Redis and RedisInsight containers, run:\n  This command will start the database and monitor accordingly. You can go to this  localhost:8000 link using your browser and connect redisinsight to your database. After connecting your database, you should see a dashboard like this in your redisinsight panel:\n   For local development, you can set up your python environment and install the dependencies using pip. Here, I\u2019m on a Linux machine and using virtual environment for isolation. The following commands will work if you\u2019re on a *nix based system and have  python 3.8 installed on your system. This will install the necessary dependencies in a virtual environment:\n    Assuming the database server is running and you\u2019ve installed the dependencies, the following snippet connects  redis-py client to the database.\n import  redis import  sys def  redis_connect ()  -&gt;  redis . client . Redis :  try :  client  =  redis . Redis (  host = &#34;localhost&#34; ,  port = 6379 ,  password = &#34;ubuntu&#34; ,  db = 0 ,  socket_timeout = 5 ,  )  ping  =  client . ping ()  if  ping  is  True :  return  client  except  redis . AuthenticationError :  print ( &#34;AuthenticationError&#34; )  sys . exit ( 1 ) client  =  redis_connect ()\n The above excerpt tries to connect to the  Redis database server using the port  6379. Notice, how I\u2019m providing the password  ubuntu via the  password argument. Here,  client.ping() helps you determine if a connection has been established successfully. It returns  True if a successful connection can be established or raises specific errors in case of failures. The above function handles  AuthenticationError and prints out an error message if the error occurs. If everything goes well, running the  redis_connect() function will return an instance of the  redis.client.Redis class. This instance will be used later to set and retrieve data to and from the redis database.\n   import  httpx def  get_routes_from_api ( coordinates :  str )  -&gt;  dict :  &#34;&#34;&#34;Data from mapbox api.&#34;&#34;&#34;  with  httpx . Client ()  as  client :  base_url  =  &#34;https://api.mapbox.com/optimized-trips/v1/mapbox/driving&#34;  geometries  =  &#34;geojson&#34;  access_token  =  &#34;Your-MapBox-API-token&#34;  url  =  f &#34;{base_url}/{coordinates}?geometries={geometries}&amp;access_token={access_token}&#34;  response  =  client . get ( url )  return  response . json ()\n The above code uses Python\u2019s  httpx library to make the get request. Httpx is almost a drop-in replacement for the ubiquitous  Requests library but way faster and has async support. Here, I\u2019ve used context manager  httpx.Client() for better resource management while making the  get request. You can read more about context managers and how to use them for hassle free resource management  here.\n The  base_url is the base url of the route optimization API and the you\u2019ll need to provide your own access token in the  access_token field. Notice, how the  url variable builds up the final request url. The  coordinates are provided using the  lat0,lon0;lat1,lon1;lat2,lon2... format. Rest of the function sends the http requests and converts the response into a native dictionary object using the  response.json() method.\n   from  datetime  import  timedelta def  get_routes_from_cache ( key :  str )  -&gt;  str :  &#34;&#34;&#34;Get data from redis.&#34;&#34;&#34;  val  =  client . get ( key )  return  val def  set_routes_to_cache ( key :  str ,  value :  str )  -&gt;  bool :  &#34;&#34;&#34;Set data to redis.&#34;&#34;&#34;  state  =  client . setex ( key ,  timedelta ( seconds = 3600 ),  value = value ,  )  return  state\n Here, both the keys and the values are strings. In the second function,  set_routes_to_cache, the  client.setex() method sets a timeout of 1 hour on the key. After that the key and its associated value get deleted automatically.\n  The  route_optima function is the primary agent that orchestrates and executes the caching and returning of responses against requests. It roughly follows the execution flow shown below.\n  When a new request arrives, the function first checks if the return-value exists in the Redis cache. If the value exists, it shows the cached value, otherwise, it sends a new request to the MapBox API, cache that value and then shows the result.\n def  route_optima ( coordinates :  str )  -&gt;  dict :  # First it looks for the data in redis cache  data  =  get_routes_from_cache ( key = coordinates )  # If cache is found then serves the data from cache  if  data  is  not  None :  data  =  json . loads ( data )  data [ &#34;cache&#34; ]  =  True  return  data  else :  # If cache is not found then sends request to the MapBox API  data  =  get_routes_from_api ( coordinates )  # This block sets saves the respose to redis and serves it directly  if  data [ &#34;code&#34; ]  ==  &#34;Ok&#34; :  data [ &#34;cache&#34; ]  =  False  data  =  json . dumps ( data )  state  =  set_routes_to_cache ( key = coordinates ,  value = data )  if  state  is  True :  return  json . loads ( data )  return  data\n  This part of the code wraps the original Route Optimization API and exposes that as a new endpoint. I\u2019ve used  fastAPI to build the wrapper API. Doing this also hides the underlying details of authentication and the actual endpoint of the MapBox API.\n from  fastapi  import  FastAPI app  =  FastAPI () @ app . get ( &#34;/route-optima/{coordinates}&#34; ) def  view ( coordinates ):  &#34;&#34;&#34;This will wrap our original route optimization API and incorporate Redis Caching. You&#39;ll only expose this API to the end user. &#34;&#34;&#34;  # coordinates = &#34;90.3866,23.7182;90.3742,23.7461&#34;  return  route_optima ( coordinates )\n  # app.py import  json import  sys from  datetime  import  timedelta import  httpx import  redis from  fastapi  import  FastAPI def  redis_connect ()  -&gt;  redis . client . Redis :  try :  client  =  redis . Redis (  host = &#34;localhost&#34; ,  port = 6379 ,  password = &#34;ubuntu&#34; ,  db = 0 ,  socket_timeout = 5 ,  )  ping  =  client . ping ()  if  ping  is  True :  return  client  except  redis . AuthenticationError :  print ( &#34;AuthenticationError&#34; )  sys . exit ( 1 ) client  =  redis_connect () def  get_routes_from_api ( coordinates :  str )  -&gt;  dict :  &#34;&#34;&#34;Data from mapbox api.&#34;&#34;&#34;  with  httpx . Client ()  as  client :  base_url  =  &#34;https://api.mapbox.com/optimized-trips/v1/mapbox/driving&#34;  geometries  =  &#34;geojson&#34;  access_token  =  &#34;Your-MapBox-API-token&#34;  url  =  f &#34;{base_url}/{coordinates}?geometries={geometries}&amp;access_token={access_token}&#34;  response  =  client . get ( url )  return  response . json () def  get_routes_from_cache ( key :  str )  -&gt;  str :  &#34;&#34;&#34;Data from redis.&#34;&#34;&#34;  val  =  client . get ( key )  return  val def  set_routes_to_cache ( key :  str ,  value :  str )  -&gt;  bool :  &#34;&#34;&#34;Data to redis.&#34;&#34;&#34;  state  =  client . setex ( key ,  timedelta ( seconds = 3600 ),  value = value ,)  return  state def  route_optima ( coordinates :  str )  -&gt;  dict :  # First it looks for the data in redis cache  data  =  get_routes_from_cache ( key = coordinates )  # If cache is found then serves the data from cache  if  data  is  not  None :  data  =  json . loads ( data )  data [ &#34;cache&#34; ]  =  True  return  data  else :  # If cache is not found then sends request to the MapBox API  data  =  get_routes_from_api ( coordinates )  # This block sets saves the respose to redis and serves it directly  if  data [ &#34;code&#34; ]  ==  &#34;Ok&#34; :  data [ &#34;cache&#34; ]  =  False  data  =  json . dumps ( data )  state  =  set_routes_to_cache ( key = coordinates ,  value = data )  if  state  is  True :  return  json . loads ( data )  return  data app  =  FastAPI () @ app . get ( &#34;/route-optima/{coordinates}&#34; ) def  view ( coordinates :  str )  -&gt;  dict :  &#34;&#34;&#34;This will wrap our original route optimization API and incorporate Redis Caching. You&#39;ll only expose this API to the end user. &#34;&#34;&#34;  # coordinates = &#34;90.3866,23.7182;90.3742,23.7461&#34;  return  route_optima ( coordinates )\n You can copy the complete code to a file named  app.py and run the app using the command below (assuming redis, redisinsight is running and you\u2019ve installed the dependencies beforehand):\n   Go to your browser and hit the endpoint with a set of new coordinates. For example:\n   {   &#34;code&#34; : &#34;Ok&#34; ,   &#34;waypoints&#34; :[   {   &#34;distance&#34; : 26.041809241776583 ,   &#34;name&#34; : &#34;&#34; ,   &#34;location&#34; :[   90.386855 ,   23.718213   ],   &#34;waypoint_index&#34; : 0 ,   &#34;trips_index&#34; : 0   },   {   &#34;distance&#34; : 6.286653078791968 ,   &#34;name&#34; : &#34;&#34; ,   &#34;location&#34; :[   90.374253 ,   23.746129   ],   &#34;waypoint_index&#34; : 1 ,   &#34;trips_index&#34; : 0   }   ],   &#34;trips&#34; :[   {   &#34;geometry&#34; :{   &#34;coordinates&#34; :[   [   90.386855 ,   23.718213   ],   &#34;......&#34;   ],   &#34;type&#34; : &#34;LineString&#34;   },   &#34;legs&#34; :[   {   &#34;summary&#34; : &#34;&#34; ,   &#34;weight&#34; : 3303.1 ,   &#34;duration&#34; : 2842.8 ,   &#34;steps&#34; :[   ],   &#34;distance&#34; : 5250.2   },   {   &#34;summary&#34; : &#34;&#34; ,   &#34;weight&#34; : 2536.5 ,   &#34;duration&#34; : 2297 ,   &#34;steps&#34; :[   ],   &#34;distance&#34; : 4554.8   }   ],   &#34;weight_name&#34; : &#34;routability&#34; ,   &#34;weight&#34; : 5839.6 ,   &#34;duration&#34; : 5139.8 ,   &#34;distance&#34; : 9805   }   ],   &#34;cache&#34; : false  }\n If you\u2019ve hit the above URL for the first time, the  cache attribute of the json response should show  false. This means that the response is being served from the original MapBox API. However, hitting the same URL with the same coordinates again will show the cached response and this time the  cache attribute should show  true.\n  Once you\u2019ve got everything up and running you can inspect the cache via redis insight. To do so, go to the link below while your app server is running:\n  Select the  Browser panel from the left menu and click on a key of your cached data. It should show something like this:\n  Also you can play around with the API in the swagger UI. To do so, go to the following link:\n  This will take you to the swagger dashboard. Here you can make requests using the interactive UI. Go ahead and inspect how the caching works for new coordinates.\n   All the pieces of codes in the blog were written and tested with python 3.8 on a machine running Ubuntu 18.04. You can find the complete source code of the app  here.\n  This app has been made for demonstration purpose only. So it might not reflect the best practices of production ready applications. Using APIs without authentication like this is not recommended.", "posttime": "2020-05-25 09:08:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f13\u5b58,python,api,redis", "title": "\u4f7f\u7528Python\u548cRedis\u8f7b\u677e\u7f13\u5b58API\u8bf7\u6c42", "title_en": "Effortless API Request Caching with Python and Redis", "transed": 1, "url": "https://rednafi.github.io/digressions/python/2020/05/25/python-redis-cache.html", "via": "", "real_tags": ["\u7f13\u5b58", "python", "api", "redis"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003585, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56e0\u6b64\uff0c\u5982\u679cRC6\u6bd4\u6211\u5e0c\u671b\u7684\u8981\u5927\u4e00\u70b9\uff0cRC7\u770b\u8d77\u6765\u975e\u5e38\u6b63\u5e38\u3002\u4e0d\u662f\u6211\u4eec\u5403\u8fc7\u7684\u6700\u5c0f\u7684\uff0c\u4e5f\u4e0d\u662f\u6700\u5927\u7684\u3002\u5b83\u6b63\u597d\u5728\u5305\u7684\u4e2d\u95f4\u3002\u800c\u4e14\u8fd9\u4e9b\u4fee\u590d\u770b\u8d77\u6765\u90fd\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u53ef\u6015\u7684\u5730\u65b9\u3002\u5927\u591a\u6570\u8865\u4e01\u90fd\u5f88\u5c0f\uff0c\u7a0d\u5927\u7684\u8865\u4e01\u4e5f\u4e0d\u5927\uff0c\u800c\u4e14\u5305\u542b\u5f97\u5f88\u597d(\u4e24\u4e2a\u7a0d\u5927\u7684\u8865\u4e01\u9002\u7528\u4e8es390\u548crxrpc-\u5373\u4f7f\u662f\u90a3\u4e9b\u8865\u4e01\u4e5f\u4e0d\u662f\u771f\u7684\u90a3\u4e48\u5927)\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u4e3b\u8981\u662f\u9a71\u52a8\u7a0b\u5e8f(GPU\u548c\u7f51\u7edc\u5f88\u7a81\u51fa\uff0c\u4f46\u5404\u79cd\u5176\u4ed6\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u7684\u5c0f\u4e1c\u897f)\u548c\u4e00\u4e9b\u6df7\u6742\u7684\u5c0f\u8865\u4e01\u5230\u5904\u90fd\u662f\u3002\u6240\u4ee5\u770b\u8d77\u6765\u4e0a\u4e2aRC\u6211\u6ca1\u4ec0\u4e48\u597d\u62c5\u5fc3\u7684\u3002\u5f53\u7136\uff0c\u4efb\u4f55\u4e8b\u60c5\u90fd\u6709\u53ef\u80fd\u6539\u53d8\uff0c\u4f46\u662f\u4e00\u5207\u90fd\u5c06\u5728\u4e0b\u5468\u672b\u6b63\u5f0f\u53d1\u5e03\u3002\u6572\u6572\u6728\u5934\u3002\u6211\u770b\u5230\u7684\u5927\u591a\u6570\u8ba8\u8bba\u90fd\u662f\u5173\u4e8e5.8\u7684\u5404\u79cd\u6e05\u7406\u548c\u65b0\u7279\u6027\uff0c\u6211\u8fd8\u6709\u4e00\u4e2a\u63d0\u65e9\u62c9\u5165\u8bf7\u6c42\u6b63\u5728\u7b49\u5f85\u4e2d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u672c\u5468\u5bf9\u6211\u6765\u8bf4\u6700\u4ee4\u4eba\u5174\u594b\u7684\u662f\u6211\u5347\u7ea7\u4e86\u6211\u7684\u4e3b\u673a\uff0c\u800c\u4e14\u6211\u7684\u53f0\u5f0f\u673a15\u5e74\u6765\u7b2c\u4e00\u6b21\u4e0d\u662f\u57fa\u4e8e\u82f1\u7279\u5c14\u7684\u3002\u6ca1\u6709\uff0c\u6211\u8fd8\u6ca1\u6709\u6362\u6210ARM\uff0c\u4f46\u6211\u73b0\u5728\u6b63\u5728\u6446\u52a8\u4e00\u53f0AMD\u5206\u7ebf\u56683970x\u3002\u6211\u7684allmodconfig\uff1b\u6d4b\u8bd5\u7248\u672c\u73b0\u5728\u6bd4\u4ee5\u524d\u5feb\u4e86\u4e09\u500d\uff0c\u8fd9\u5728\u73b0\u5728\u7684\u5e73\u9759\u9636\u6bb5\u5e76\u4e0d\u91cd\u8981\uff0c\u4f46\u6211\u80af\u5b9a\u4f1a\u5728\u4e0b\u4e00\u4e2a\u5408\u5e76\u7a97\u53e3\u4e2d\u6ce8\u610f\u5230\u5347\u7ea7\u3002\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u51fa\u53bb\u505a\u4e2a\u597d\u7684\u6700\u540e\u6d4b\u8bd5\u5427\uff0c\u8fd9\u6837\u6211\u4eec\u57285.7\u53d1\u5e03\u540e\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u4e0d\u6109\u5feb\u7684\u60ca\u559c\u4e86\u3002Linus-Al Viro(2)\uff1a\u4fee\u590dcopy_fdtable()arm64\u4e2d\u7684\u500d\u589e\u6ea2\u51fa\uff1a\u5728\uff01access_ok()\u8def\u5f84\u4e0a\u6dfb\u52a0get_user()\u7c7b\u578b\u6279\u6ce8Alain Volmat(1)\uff1aI2C\uff1a\u4fee\u590di2c_device_probe Alex Elder(1)\u4e2d\u7f3a\u5c11\u7684pm_runtime_put_sync\uff1anet\uff1aipa\uff1adon&#39\uff1bt\u5728gsi_channel_poll()Alexander Monakov(1)\uff1aIOMMU/amd\uff1a\u4fee\u590dIVRS\u8868Alexander Usykin\u4e2dACPI UID\u7684\u8fc7\u5ea6\u8bfb\u53d6(1)\uff1aMEI\uff1a\u91ca\u653eMe_cl\u5bf9\u8c61\u5f15\u7528Amit Cohen(1)\uff1aselftest\uff1amlxsw\uff1aqos_mc_ware\uff1a\u6307\u5b9aarping\u8d85\u65f6\u4e3a\u6574\u6570Andrii Nakryi ko(1)\uff1abpf\uff1a\u963b\u6b62mmap()&#39\uff1bING\u53ea\u8bfb\u6620\u5c04\u4e3a\u53ef\u5199Antoine Tenart(1)\uff1aNET\uff1aPHY\uff1aMSCC\uff1aFIX\u521d\u59cb\u5316MACsec\u534f\u8bae\u6a21\u5f0fArnd Bergmann(1)\uff1ash\uff1ainclude linux/time_tyes.h for sockios Arvind Sankar(1)\uff1ax86/boot\uff1a\u5c06\u5168\u5c40\u53d8\u91cf\u6807\u8bb0\u4e3aStatic Atsushi Nemoto(1)\uff1aI2C\uff1aAltera\uff1a\u4fee\u590dxfer_msg\u548cISR\u7ebf\u7a0b\u4e4b\u95f4\u7684\u7ade\u4e89\u3002Bijan Mottahedeh(1)\uff1aIo_uring\uff1aDon&#39\uff1bt\u4f7f\u7528kiocb.private\u5b58\u50a8buf_index Bodo Stroesser(1)\uff1ascsi\uff1atarget\uff1a\u5728tmr\u5904\u7406\u7ed3\u675f\u65f6\u653e\u7f6elun_ref Boris Sukholitko(1)\uff1a__netif_Receive_SKB_core\uff1a\u901a\u8fc7\u5f15\u7528\u4f20\u9012SKB Brent Lu(1)\uff1aalsa\uff1apcm\uff1a\u4fee\u590d\u4e0d\u6b63\u786e\u7684HW_BASE\u9012\u589eCalvin Johnson(1)\uff1aCoreSight\uff1aCTI\uff1a\u5220\u9664\u4e0d\u6b63\u786e\u7684NULL\u8fd4\u56de\u68c0\u67e5CAN Guo(1)\uff1ascsi\uff1apm\u3002t\u5141\u8bb8\u4e22\u5f03\u5206\u533a\u6a21\u5f0fChristian Gmeiner(1)\uff1adrm/etNaviv\uff1afix Perfmon\u57df\u4ea4\u4e92Christian Lachner(1)\uff1aalsa\uff1ahda/Realtek-\u4fee\u590d\u5343\u5146\u5b57\u8282X570 Aorus Xtreme Christoph Hellwig\u4e0a\u7684\u9759\u9ed8\u8f93\u51fa(2)\uff1aUBFS\uff1a\u5220\u9664\u635f\u574f\u7684\u60f0\u6027\u65f6\u95f4\u652f\u6301ext4\uff1a\u4fee\u590d\u4f4d\u56fe\u6587\u4ef6Christophe Jaillet\u7684\u6587\u4ef6\u6620\u5c04\u5927\u5c0f\u68c0\u67e5(4)\uff1aIIO\uff1aDAC\uff1avBOS\u3002I2C\uff1aMUX\uff1aDEMUX-pinctrl\uff1a\u4fee\u590d&#39\uff1bi2c_demux_pinctrl_Probe()&#39\uff1bdmaengine\uff1ategra210-ADMA\uff1a\u4fee\u590d&#39\uff1bTegra_ADMA_Probe()&#39\uff1bChristophe Leroy(1)\uff1aREVERT&#34\uff1bPowerPC/32s\uff1a\u91cd\u65b0\u6392\u5e8fLinux PTE\u4f4d\u4ee5\u66f4\u597d\u5730\u5339\u914d\u54c8\u5e0cPTE\u4f4d\u3002&#34\uff1bClaudiu Manoil(1)\uff1aFelix\uff1a\u4fee\u590dioremap\u8d44\u6e90\u7684\u521d\u59cb\u5316Codrin Ciubotariu(1)\uff1aI2C\uff1aAT91\uff1a\u4fee\u590d\u603b\u7ebf\u6062\u590d\u7684devm_gpiod_get()\u4e4b\u540e\u7684pinmux Colin Ian King(1)\uff1adrm/vmwgfx\uff1a\u5220\u9664\u5bf9\u53d8\u91cfret\u7684\u5197\u4f59\u8d4b\u503cCristian Ciocaltea(1)\uff1admaengine\uff1aowl\uff1a\u5728owl_dma_get_pchan()\u4e2d\u4f7f\u7528\u6b63\u786e\u7684\u9501\u3002st_lsm6dsx_Shub_write_raw()OVL\uff1aovl_fid_to_fh()\u5206\u6bb5\u4e2d\u7684\u6f5c\u5728\u5d29\u6e83\uff1awfx\uff1a\u9519\u8bef\u8def\u5f84\u4e0a\u7684\u89e3\u9501EVM\uff1a\u4fee\u590dinit_desc()\u4e2d\u7684\u5c0f\u4e89\u7528\uff0cdrm/etNaviv\uff1a\u4fee\u590dmit_pin_Objects()\u4e2d\u7684\u6cc4\u6f0fDave\u9171(1)\uff1admaengine\uff1aidxd\uff1a\u5728\u53d6\u6d88\u5c4f\u853dDave Young\u4e4b\u540e\u4fee\u590d\u4e2d\u65ad\u5b8c\u6210(1)\uff1aefi/earlycon\uff1a\u4fee\u590d\u65e9\u671f\u3002t\u5378\u8f7dkmem David Howells\u540e\u5c06\u5185\u6838\u5185\u5b58\u6cc4\u6f0f\u5230\u7528\u6237\u7a7a\u95f4(5)\uff1arxrpc\uff1a\u4fee\u590d\u521d\u59cb\u91cd\u65b0\u4f20\u8f93\u8d85\u65f6\u8fc7\u957fafs\uff1adon\uff1bt\u89e3\u9501\u83b7\u53d6\u7684\u6570\u636e\u9875\uff0c\u76f4\u5230\u64cd\u4f5c\u6210\u529f\u5b8c\u6210rxrpc\uff1atrace discarded ACKs RX", "note_en": "So if rc6 was a bit bigger than I would have liked, rc7 looks very normal. Not the smallest we&#39;ve had, not the largest. It&#39;s right in the middle of the pack.  And none of the fixes look like there&#39;s anything particularly scary going on. Most of it is very small, and the slightly larger patches aren&#39;t huge either and are well-contained (the two slightly larger patches are to s390 and rxrpc - and even those patches aren&#39;t really all _that_ big).  Other than that, it&#39;s mostly drivers (gpu and networking stand out, but small stuff in various other drivers) and some misc small patches all over.  So it looks like I was worried for nothing last rc. Of course, anything can still change, but everything _looks_ all set for a regular release scheduled for next weekend. Knock wood.  Most of the discussion I have seen has already been about various cleanups and new features for 5.8, and I have one early pull request already pending.  In fact, the biggest excitement this week for me was just that I upgraded my main machine, and for the first time in about 15 years, my desktop isn&#39;t Intel-based. No, I didn&#39;t switch to ARM yet, but I&#39;m now rocking an AMD Threadripper 3970x. My &#39;allmodconfig&#39; test builds are now three times faster than they used to be, which doesn&#39;t matter so much right now during the calming down period, but I will most definitely notice the upgrade during the next merge window.  Anyway, go out and give this a good final test so that we won&#39;t have any unhappy surprises after 5.7 is released..   Linus  ---  Al Viro (2):  fix multiplication overflow in copy_fdtable()  arm64: Add get_user() type annotation on the !access_ok() path  Alain Volmat (1):  i2c: fix missing pm_runtime_put_sync in i2c_device_probe  Alex Elder (1):  net: ipa: don&#39;t be a hog in gsi_channel_poll()  Alexander Monakov (1):  iommu/amd: Fix over-read of ACPI UID from IVRS table  Alexander Usyskin (1):  mei: release me_cl object reference  Amit Cohen (1):  selftests: mlxsw: qos_mc_aware: Specify arping timeout as an integer  Andrii Nakryiko (1):  bpf: Prevent mmap()&#39;ing read-only maps as writable  Antoine Tenart (1):  net: phy: mscc: fix initialization of the MACsec protocol mode  Arnd Bergmann (1):  sh: include linux/time_types.h for sockios  Arvind Sankar (1):  x86/boot: Mark global variables as static  Atsushi Nemoto (1):  i2c: altera: Fix race between xfer_msg and isr thread  Baoquan He (1):  MAINTAINERS: add files related to kdump  Benjamin Thiel (1):  efi: Pull up arch-specific prototype efi_systab_show_arch()  Bijan Mottahedeh (1):  io_uring: don&#39;t use kiocb.private to store buf_index  Bodo Stroesser (1):  scsi: target: Put lun_ref at end of tmr processing  Boris Sukholitko (1):  __netif_receive_skb_core: pass skb by reference  Brent Lu (1):  ALSA: pcm: fix incorrect hw_base increase  Calvin Johnson (1):  coresight: cti: remove incorrect NULL return check  Can Guo (1):  scsi: pm: Balance pm_only counter of request queue during system resume  Chaitanya Kulkarni (2):  null_blk: return error for invalid zone size  null_blk: don&#39;t allow discard for zoned mode  Christian Gmeiner (1):  drm/etnaviv: fix perfmon domain interation  Christian Lachner (1):  ALSA: hda/realtek - Fix silent output on Gigabyte X570 Aorus Xtreme  Christoph Hellwig (2):  ubifs: remove broken lazytime support  ext4: fix fiemap size checks for bitmap files  Christophe JAILLET (4):  iio: dac: vf610: Fix an error handling path in &#39;vf610_dac_probe()&#39;  iio: sca3000: Remove an erroneous &#39;get_device()&#39;  i2c: mux: demux-pinctrl: Fix an error handling path in &#39;i2c_demux_pinctrl_probe()&#39;  dmaengine: tegra210-adma: Fix an error handling path in &#39;tegra_adma_probe()&#39;  Christophe Leroy (1):  Revert &#34;powerpc/32s: reorder Linux PTE bits to better match Hash PTE bits.&#34;  Claudiu Manoil (1):  felix: Fix initialization of ioremap resources  Codrin Ciubotariu (1):  i2c: at91: Fix pinmux after devm_gpiod_get() for bus recovery  Colin Ian King (1):  drm/vmwgfx: remove redundant assignment to variable ret  Cristian Ciocaltea (1):  dmaengine: owl: Use correct lock in owl_dma_get_pchan()  DENG Qingfang (1):  net: dsa: mt7530: fix roaming from DSA user ports  Dan Carpenter (5):  iio: imu: st_lsm6dsx: unlock on error in st_lsm6dsx_shub_write_raw()  ovl: potential crash in ovl_fid_to_fh()  staging: wfx: unlock on error path  evm: Fix a small race in init_desc()  drm/etnaviv: Fix a leak in submit_pin_objects()  Dave Jiang (1):  dmaengine: idxd: fix interrupt completion after unmasking  Dave Young (1):  efi/earlycon: Fix early printk for wider fonts  David Ahern (1):  nexthop: Fix attribute checking for groups  David Hildenbrand (1):  device-dax: don&#39;t leak kernel memory to user space after unloading kmem  David Howells (5):  rxrpc: Fix the excessive initial retransmission timeout  afs: Don&#39;t unlock fetched data pages until the op completes successfully  rxrpc: Trace discarded ACKs  rxrpc: Fix ack discard  rxrpc: Fix a warning  Dinghao Liu (1):  net: smsc911x: Fix runtime PM imbalance on error  Dragos Bogdan (1):  staging: iio: ad2s1210: Fix SPI reading  Eran Ben Elisha (2):  net/mlx5: Fix a race when moving command interface to events mode  net/mlx5: Avoid processing commands before cmdif is ready  Eric Biggers (1):  ubifs: fix wrong use of crypto_shash_descsize()  Eric Dumazet (2):  ax25: fix setsockopt(SO_BINDTODEVICE)  tipc: block BH before using dst_cache  Eric Sandeen (1):  exfat: use iter_file_splice_write  Eugeniy Paltsev (3):  ARC: Fix ICCM &amp; DCCM runtime size checks  ARC: [plat-hsdk]: fix USB regression  ARC: guard dsp early init against non ARCv2  Ewan D. Milne (1):  scsi: qla2xxx: Do not log message when reading port speed via sysfs  Fabrice Gasnier (2):  iio: adc: stm32-adc: fix device used to request dma  iio: adc: stm32-dfsdm: fix device used to request dma  Gerald Schaefer (2):  s390/mm: fix set_huge_pte_at() for empty ptes  s390/kaslr: add support for R_390_JMP_SLOT relocation type  Greg Kroah-Hartman (1):  Revert &#34;kobject: Make sure the parent does not get released before its children&#34;  Gregory CLEMENT (1):  iio: adc: ti-ads8344: Fix channel selection  Grygorii Strashko (1):  net: ethernet: ti: cpsw: fix ASSERT_RTNL() warning during suspend  Guixiong Wei (1):  drm/vmwgfx: Fix parameter name in vmw_bo_init  Gustavo A. R. Silva (1):  i2c: mux: Replace zero-length array with flexible-array  Heikki Krogerus (1):  kobject: Make sure the parent does not get released before its children  Heiner Kallweit (1):  r8169: fix OCP access on RTL8117  Heinrich Schuchardt (1):  efi/libstub: Avoid returning uninitialized data from setup_graphics()  Ido Schimmel (2):  netdevsim: Ensure policer drop counter always increases  selftests: netdevsim: Always initialize &#39;RET&#39; variable  Ignat Korchagin (1):  um: Fix typo in vector driver transport option definition  Ilya Dryomov (1):  vsprintf: don&#39;t obfuscate NULL and error pointers  Jakub Sitnicki (1):  flow_dissector: Drop BPF flow dissector prog ref on netns cleanup  Jan Schmidt (1):  drm/edid: Add Oculus Rift S to non-desktop list  Jason A. Donenfeld (4):  wireguard: selftests: use newer iproute2 for gcc-10  wireguard: noise: read preshared key while taking lock  wireguard: queueing: preserve flow hash across packet scrubbing  wireguard: noise: separate receive counter from send counter  Jason Yan (1):  drm/vmwgfx: Return true in function vmw_fence_obj_signaled()  Jens Axboe (4):  io_uring: initialize ctx-&gt;sqo_wait earlier  io_uring: remove dead check in io_splice()  io_uring: cancel work if task_work_add() fails  io_uring: don&#39;t add non-IO requests to iopoll pending list  Jere Lepp\u00e4nen (1):  sctp: Start shutdown on association restart if in SHUTDOWN-SENT state and socket is closed  Jeremy Kerr (1):  net: bmac: Fix read of MAC address from ROM  Jiri Pirko (1):  mlxsw: spectrum: Fix use-after-free of split/unsplit/type_set in case reload fails  Joerg Roedel (1):  iommu: Fix deferred domain attachment  Johannes Berg (2):  um: Fix xor.h include  um: syscall.c: include &lt;asm/unistd.h&gt;  John Hubbard (3):  rapidio: fix an error in get_user_pages_fast() error handling  selftests/vm/.gitignore: add mremap_dontunmap  selftests/vm/write_to_hugetlbfs.c: fix unused variable warning  Jonathan McDowell (1):  net: ethernet: stmmac: Enable interface clocks on probe for IPQ806x  Josh Poimboeuf (1):  x86/unwind/orc: Fix unwind_get_return_address_ptr() for inactive tasks  KP Singh (1):  security: Fix hook iteration for secid_to_secctx  Kamal Dasu (1):  mtd:rawnand: brcmnand: Fix PM resume crash  Kefeng Wang (1):  riscv: Fix print_vm_layout build error if NOMMU  Keno Fischer (1):  arm64: Fix PTRACE_SYSEMU semantics  Klaus Doth (1):  misc: rtsx: Add short delay after exit from ASPM  Kurt Kanzenbach (1):  dt-bindings: net: dsa: b53: Add missing size and address cells to example  Lenny Szubowicz (1):  efi/libstub/x86: Avoid EFI map buffer alloc in allocate_e820()  Leon Romanovsky (1):  net: phy: propagate an error back to the callers of phy_sfp_probe  Leon Yu (1):  net: stmmac: don&#39;t attach interface until resume finishes  Linus Torvalds (1):  Linux 5.7-rc7  Lo\u00efc Yhuel (1):  tpm: check event log version before reading final events  Luca Coelho (1):  iwlwifi: pcie: handle QuZ configs with killer NICs as well  Madhuparna Bhowmik (2):  evm: Fix RCU list related warnings  ipv6: Fix suspicious RCU usage warning in ip6mr  Manivannan Sadhasivam (1):  net: qrtr: Fix passing invalid reference to qrtr_local_enqueue()  Maor Dickman (1):  net/mlx5e: Fix allowed tc redirect merged eswitch offload cases  Marc Payne (1):  r8152: support additional Microsoft Surface Ethernet Adapter variant  Marco Elver (1):  kasan: disable branch tracing for core runtime  Martin KaFai Lau (1):  net: inet_csk: Fix so_reuseport bind-address cache in tb-&gt;fast*  Masahiro Yamada (2):  arc: ptrace: hard-code &#34;arc&#34; instead of UTS_MACHINE  arc: remove #ifndef CONFIG_AS_CFI_SIGNAL_FRAME  Matt Ranostay (1):  iio: chemical: atlas-sensor: correct DO-SM channels  Michael Ellerman (1):  powerpc/64s: Disable STRICT_KERNEL_RWX  Michael S. Tsirkin (1):  vhost: missing __user tags  Michal Kubecek (1):  ethtool: count header size in reply size estimate  Mike Rapoport (2):  sparc32: use PUD rather than PGD to get PMD in srmmu_nocache_init()  sparc32: fix page table traversal in srmmu_nocache_init()  Miquel Raynal (1):  mtd: spinand: Propagate ECC information to the MTD structure  Moshe Shemesh (3):  net/mlx5: Add command entry handling completion  net/mlx5: Fix memory leak in mlx5_events_init  net/mlx5e: Update netdev txq on completions during closure  Namjae Jeon (1):  exfat: add the dummy mount options to be backward compatible with staging/exfat  Naoya Horiguchi (1):  MAINTAINERS: update email address for Naoya Horiguchi  Nathan Chancellor (1):  x86/mmiotrace: Use cpumask_available() for cpumask_var_t variables  Navid Emamdoost (1):  apparmor: Fix use-after-free in aa_audit_rule_init  Neil Horman (1):  sctp: Don&#39;t add the shutdown timer if its already been added  Nicholas Kazlauskas (1):  drm/amd/display: Defer cursor lock until after VUPDATE  Nick Desaulniers (1):  x86: bitops: fix build regression  Niklas Schnelle (1):  s390/pci: Fix s390_mmio_read/write with MIO  Oscar Carter (1):  staging: greybus: Fix uninitialized scalar variable  Palmer Dabbelt (1):  RISC-V: gp_in_global needs register keyword  Pavankumar Kondeti (1):  sched/debug: Fix requested task uclamp values shown in procfs  Pavel Begunkov (2):  io_uring: don&#39;t prepare DRAIN reqs twice  io_uring: fix FORCE_ASYNC req preparation  PeiSen Hou (1):  ALSA: hda/realtek - Add more fixup entries for Clevo machines  Peter Ujfalusi (1):  dmaengine: ti: k3-udma: Fix TR mode flags for slave_sg and memcpy  Phil Auld (1):  sched/fair: Fix enqueue_task_fair() warning some more  Philipp Rudo (1):  s390/kexec_file: fix initrd location for kdump kernel  Punit Agrawal (1):  efi: cper: Add support for printing Firmware Error Record Reference  Qii Wang (1):  MAINTAINERS: add maintainer for mediatek i2c controller driver  Qiushi Wu (3):  net: sun: fix missing release regions in cas_init_one().  rxrpc: Fix a memory leak in rxkad_verify_response()  net/mlx4_core: fix a memory leak bug.  Rafael J. Wysocki (1):  ACPI: EC: PM: Avoid flushing EC work when EC GPE is inactive  Rafa\u0142 Hibner (1):  dmaengine: zynqmp_dma: Move list_del inside zynqmp_dma_free_descriptor.  Raul E Rangel (1):  iommu/amd: Fix get_acpihid_device_id()  Ricardo Ribalda Delgado (1):  mtd: Fix mtd not registered due to nvmem name collision  Richard Weinberger (1):  ubi: Fix seq_file usage in detailed_erase_block_info debugfs file  Ritesh Harjani (1):  ext4: fix EXT4_MAX_LOGICAL_BLOCK macro  Roberto Sassu (3):  ima: Set file-&gt;f_mode instead of file-&gt;f_flags in ima_calc_file_hash()  evm: Check also if *tfm is an error pointer in init_desc()  ima: Fix return value of ima_write_policy()  Rodrigo Siqueira (1):  drm/amd/display: Remove dml_common_def file  Roi Dayan (5):  net/mlx5e: Fix inner tirs handling  net/mlx5: Fix cleaning unmanaged flow tables  net/mlx5: Don&#39;t maintain a case of del_sw_func being null  net/mlx5: Annotate mutex destroy for root ns  net/mlx5e: CT: Correctly get flow rule  Roland Scheidegger (1):  drm/vmwgfx: update MAINTAINERS entry  Roman Mashak (1):  net sched: fix reporting the first-time use timestamp  Russell King (1):  net: mvpp2: fix RX hashing for non-10G ports  Sabrina Dubroca (1):  net: don&#39;t return invalid table id error when we fall back to PF_UNSPEC  Sagar Shrikant Kadam (1):  tty: serial: add missing spin_lock_init for SiFive serial console  Saravana Kannan (2):  driver core: Fix SYNC_STATE_ONLY device link implementation  driver core: Fix handling of SYNC_STATE_ONLY + STATELESS device links  Scott Bahling (1):  ALSA: iec1712: Initialize STDSP24 properly when using the model=staudio option  Shay Drory (1):  net/mlx5: Fix error flow in case of function_setup failure  Stephen Worley (1):  net: nlmsg_cancel() if put fails for nhmsg  Tang Bin (1):  net: sgi: ioc3-eth: Fix return value check in ioc3eth_probe()  Tariq Toukan (1):  net/mlx5e: kTLS, Destroy key object after destroying the TIS  Tetsuo Handa (1):  pipe: Fix pipe_full() test in opipe_prep().  Tiezhu Yang (1):  net: Fix return value about devm_platform_ioremap_resource()  Todd Malsbary (2):  mptcp: use rightmost 64 bits in ADD_ADDR HMAC  mptcp: use untruncated hash in ADD_ADDR HMAC  Uladzislau Rezki (1):  z3fold: fix use-after-free when freeing handles  Vadim Fedorenko (3):  net/tls: fix encryption error checking  net/tls: free record only on encryption error  net: ipip: fix wrong address family in init error path  Valentin Longchamp (1):  net/ethernet/freescale: rework quiesce/activate for ucc_geth  Vincent Guittot (1):  sched/fair: Fix unthrottle_cfs_rq() for leaf_cfs_rq list  Vineet Gupta (3):  ARC: entry: comment  ARC: [plat-eznps]: Restrict to CONFIG_ISA_ARCOMPACT  ARC: show_regs: avoid extra line of output  Vitaly Kuznetsov (1):  x86/hyperv: Properly suspend/resume reenlightenment notifications  Vivek Goyal (2):  ovl: clear ATTR_FILE from attr-&gt;ia_valid  ovl: clear ATTR_OPEN from attr-&gt;ia_valid  Vladimir Murzin (1):  dmaengine: dmatest: Restore default for channel  Vladimir Oltean (1):  net: mscc: ocelot: fix address ageing time (again)  Vladimir Stempen (1):  drm/amd/display: DP training to set properly SCRAMBLING_DISABLE  Wei Yongjun (6):  staging: kpc2000: fix error return code in kp2000_pcie_probe()  ipack: tpci200: fix error return code in tpci200_register()  bus: mhi: core: Fix some error return code  exfat: fix possible memory leak in exfat_find()  net: ethernet: ti: fix some return value check of cpsw_ale_create()  net: ethernet: ti: am65-cpsw-nuss: fix error handling of am65_cpsw_nuss_probe  Wolfram Sang (2):  i2c: use my kernel.org address from now on  i2c: algo-pca: update contact email  Xiaoguang Wang (1):  io_uring: reset -EBUSY error when io sq thread is waken up  Xiyu Yang (2):  apparmor: fix potential label refcnt leak in aa_change_profile  apparmor: Fix aa_label refcnt leak in policy_update  YueHaibing (1):  vdpasim: remove unused variable &#39;ret&#39;  Yuqi Jin (1):  net: revert &#34;net: get rid of an signed integer overflow in ip_idents_reserve()&#34;", "posttime": "2020-05-25 08:52:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6258\u74e6\u5c14,torvalds,\u4fee\u590d", "title": "\u83b1\u7eb3\u65af\u00b7\u6258\u74e6\u5c14\u5179\u5df2\u7ecf\u8f6c\u5230AMD\u4e86", "title_en": "Linus Torvalds has switched to AMD", "transed": 1, "url": "https://lkml.org/lkml/2020/5/24/407", "via": "", "real_tags": ["\u6258\u74e6\u5c14", "torvalds", "\u4fee\u590d"]}, {"category": "", "categoryclass": "", "imagename": "995c925af019803921d5e2a2cf180395.jpg", "infoid": 1003584, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6b27\u6d32\uff0c\u610f\u5927\u5229\u4eba\u7684\u57fa\u56e0\u591a\u6837\u6027\u6700\u9ad8\u3002\u5b83\u4eec\u9057\u4f20\u53d8\u5f02\u7684\u68af\u5ea6\uff0c\u6563\u5e03\u5728\u6574\u4e2a\u534a\u5c9b\u4e0a\uff0c\u5728\u5f88\u5c0f\u7684\u8303\u56f4\u5185\u5305\u56f4\u4e86\u5357\u6b27\u4eba\u548c\u6b27\u6d32\u5927\u9646\u4eba\u4e4b\u95f4\u7684\u5168\u90e8\u9057\u4f20\u53d8\u5f02\u3002\u8fd9\u79cd\u4ee4\u4eba\u60ca\u53f9\u7684\u591a\u6837\u6027\u5728\u5927\u7ea619000\u5e74\u524d\u7ed3\u675f\u7684\u665a\u671f\u51b0\u5ddd\u76db\u671f\u540e\u4e0d\u4e45\u5f00\u59cb\u79ef\u7d2f\u3002\u8fd9\u662f\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u5728\u53d1\u8868\u5728BMC\u751f\u7269\u5b66\u4e0a\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u62a5\u544a\u7684\u3002\u8fd9\u662f\u7814\u7a76\u4eba\u5458\u9996\u6b21\u8ffd\u8e2a\u610f\u5927\u5229\u4eba\u7684\u9057\u4f20\u53f2\u3002\u7ed3\u679c\u8fd8\u8868\u660e\uff0c\u5c45\u4f4f\u5728\u610f\u5927\u5229\u5317\u90e8\u548c\u5357\u90e8\u7684\u4eba\u4eec\u6709\u4e00\u4e9b\u9057\u4f20\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u662f\u968f\u7740\u4e0d\u540c\u7684\u73af\u5883\u800c\u8fdb\u5316\u51fa\u6765\u7684\u3002\u8fd9\u4e9b\u7279\u6027\u6709\u52a9\u4e8e\u964d\u4f4e\u80be\u708e\u548c\u76ae\u80a4\u764c\u7684\u98ce\u9669\uff0c\u4ee5\u53ca\u7cd6\u5c3f\u75c5\u548c\u80a5\u80d6\u75c7\u7684\u98ce\u9669\uff0c\u6709\u5229\u4e8e\u5ef6\u957f\u5bff\u547d\u3002\n\u8fd9\u9879\u7814\u7a76\u7684\u4e3b\u8981\u7814\u7a76\u8005\u4e4b\u4e00\u3001\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66\u5206\u5b50\u4eba\u7c7b\u5b66\u6559\u6388\u9a6c\u5c14\u79d1\u00b7\u8428\u9f50\u5c3c(Marco Sazzini)\u89e3\u91ca\u8bf4\uff0c\u4e86\u89e3\u610f\u5927\u5229\u4eba\u7956\u5148\u7684\u8fdb\u5316\u53f2\u53ef\u4ee5\u8ba9\u6211\u4eec\u66f4\u597d\u5730\u638c\u63e1\u4eba\u53e3\u7edf\u8ba1\u8fc7\u7a0b\u548c\u73af\u5883\u76f8\u4e92\u4f5c\u7528\u7684\u8fc7\u7a0b\uff0c\u6b63\u662f\u8fd9\u4e9b\u8fc7\u7a0b\u5851\u9020\u4e86\u5f53\u4eca\u6b27\u6d32\u4eba\u53e3\u7956\u5148\u7ec4\u6210\u7684\u590d\u6742\u9a6c\u8d5b\u514b\uff0c\u9a6c\u5c14\u79d1\u00b7\u8428\u9f50\u5c3c(Marco Sazzini)\u8fd9\u6837\u89e3\u91ca\u9053\uff0c\u4ed6\u662f\u8fd9\u9879\u7814\u7a76\u7684\u4e3b\u8981\u7814\u7a76\u8005\u4e4b\u4e00\uff0c\u4e5f\u662f\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66(University Of Bologna)\u7684\u5206\u5b50\u4eba\u7c7b\u5b66\u6559\u6388\u3002\u8fd9\u9879\u8c03\u67e5\u63d0\u4f9b\u4e86\u6709\u4ef7\u503c\u7684\u4fe1\u606f\uff0c\u4ee5\u4fbf\u5145\u5206\u4e86\u89e3\u5f53\u524d\u610f\u5927\u5229\u4eba\u53e3\u7684\u751f\u7269\u5b66\u7279\u5f81\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u8ba9\u6211\u4eec\u4e86\u89e3\u53ef\u80fd\u5f71\u54cd\u8fd9\u4e00\u4eba\u7fa4\u5065\u5eb7\u6216\u6613\u60a3\u591a\u79cd\u75be\u75c5\u7684\u6df1\u5c42\u6b21\u539f\u56e0\u3002\n\u4e3a\u4e86\u8fdb\u884c\u8fd9\u9879\u7814\u7a76\uff0c\u7814\u7a76\u4eba\u5458\u5bf940\u540d\u53c2\u4e0e\u8005\u7684\u6574\u4e2a\u57fa\u56e0\u7ec4\u8fdb\u884c\u4e86\u6d4b\u5e8f\uff0c\u8fd9\u4e9b\u53c2\u4e0e\u8005\u88ab\u9009\u4e3a\u610f\u5927\u5229\u4eba\u53e3\u751f\u7269\u53d8\u5f02\u6027\u7684\u4ee3\u8868\uff0c\u5e76\u8fdb\u884c\u4e86\u5f88\u597d\u7684\u8fd1\u4f3c\u3002\u8fd9\u9879\u5206\u6790\u4f7f1700\u591a\u4e07\u79cd\u9057\u4f20\u53d8\u5f02\u8131\u9896\u800c\u51fa\u3002\u7136\u540e\uff0c\u79d1\u5b66\u5bb6\u4eec\u8fdb\u884c\u4e86\u4e24\u65b9\u9762\u7684\u6bd4\u8f83\u3002\u9996\u5148\uff0c\u4ed6\u4eec\u5c06\u8fd9\u4e9b\u6570\u636e\u4e0e\u5728\u6765\u81ea\u6b27\u6d32\u548c\u5730\u4e2d\u6d77\u7684\u5176\u4ed635\u4e2a\u4eba\u7fa4\u4e2d\u89c2\u5bdf\u5230\u7684\u57fa\u56e0\u53d8\u5f02\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u5176\u6b21\uff0c\u4ed6\u4eec\u5c06\u540c\u6837\u7684\u6570\u636e\u4e0e\u5bf9\u8fd1600\u5177\u65e7\u77f3\u5668\u65f6\u4ee3\u665a\u671f\u4eba\u7c7b\u9057\u9ab8\u7684\u7814\u7a76\u4e2d\u53d1\u73b0\u7684\u57fa\u56e0\u53d8\u4f53\u8fdb\u884c\u4e86\u6bd4\u8f83\u300240,000\u5e74\u524d)\u5230\u9752\u94dc\u65f6\u4ee3(\u7ea6\u30024000\u5e74\u524d)\u3002\n\u8fd9\u4e9b\u6bd4\u8f83\u8fbe\u5230\u4e86\u5982\u6b64\u9ad8\u7684\u7cbe\u786e\u5ea6\uff0c\u4e0e\u4e4b\u524d\u7684\u7814\u7a76\u76f8\u6bd4\uff0c\u6709\u53ef\u80fd\u5c06\u8c03\u67e5\u6269\u5c55\u5230\u975e\u5e38\u9065\u8fdc\u7684\u65f6\u95f4\u6bb5\u3002\u6700\u7ec8\uff0c\u7814\u7a76\u4eba\u5458\u786e\u5b9a\u4e86\u4e0a\u4e00\u6b21\u51b0\u5ddd(\u6216\u591a\u6216\u5c11\u57281.9\u4e07\u5e74\u524d\u7ed3\u675f)\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u4ef6\u5728\u57fa\u56e0\u5e93\u4e2d\u7559\u4e0b\u7684\u75d5\u8ff9\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e00\u9886\u57df\u7684\u5927\u90e8\u5206\u5b66\u672f\u7814\u7a76\u8868\u660e\uff0c\u5728\u610f\u5927\u5229DNA\u4e2d\u7559\u4e0b\u75d5\u8ff9\u7684\u6700\u53e4\u8001\u7684\u4e8b\u4ef6\u662f\u65b0\u77f3\u5668\u65f6\u4ee3\u548c\u9752\u94dc\u65f6\u4ee3\u7684\u79fb\u6c11\uff0c\u4ecb\u4e8e7000\u52304000\u5e74\u524d\u3002\u76f8\u53cd\uff0c\u8fd9\u9879\u7814\u7a76\u7684\u7ed3\u679c\u8868\u660e\uff0c\u610f\u5927\u5229\u4eba\u5bf9\u73af\u5883\u7684\u6700\u65e9\u751f\u7269\u9002\u5e94\u548c\u8fc1\u5f99\u6f5c\u85cf\u5728\u975e\u51e1\u7684\u9057\u4f20\u591a\u6837\u6027\u4e4b\u4e0b\uff0c\u6bd4\u4e4b\u524d\u8ba4\u4e3a\u7684\u8981\u65e9\u5f97\u591a\u3002\n\u7814\u7a76\u4eba\u5458\u8ffd\u8e2a\u4e86\u8fd9\u4e24\u4e2a\u7fa4\u4f53\u7684\u8fdb\u5316\u53f2\uff0c\u8fd9\u4e24\u4e2a\u7fa4\u4f53\u5904\u4e8e\u610f\u5927\u5229\u4eba\u9057\u4f20\u53d8\u5f02\u68af\u5ea6\u7684\u4e24\u7aef\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u8bc4\u4f30\u548c\u6d4b\u91cf\u4e86\u6765\u81ea\u610f\u5927\u5229\u5357\u90e8\u548c\u5317\u90e8\u7684\u53c2\u4e0e\u8005\u7684\u57fa\u56e0\u5e93\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5e76\u89c2\u5bdf\u4e86\u8fd9\u4e9b\u5dee\u5f02\u4f55\u65f6\u53d8\u5f97\u660e\u663e\u3002\n\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66(University Of Bologna)\u7814\u7a76\u5458\u3001\u8fd9\u7bc7\u8bba\u6587\u7684\u5171\u540c\u7b2c\u4e00\u4f5c\u8005\u4e4b\u4e00\u65af\u7279\u51e1\u5c3c\u4e9a\u00b7\u8428\u8bfa(Stefania Sarno)\u8868\u793a\uff1a\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u8fd9\u4e24\u4e2a\u7fa4\u4f53\u7684\u7956\u5148\u57283\u4e07\u5e74\u524d\u548c\u65e7\u77f3\u5668\u65f6\u4ee3\u665a\u671f\u7684\u5269\u4f59\u51e0\u5e74\u91cc\uff0c\u51fa\u73b0\u4e86\u4e00\u4e9b\u90e8\u5206\u91cd\u53e0\u7684\u4eba\u53e3\u8d8b\u52bf\u3002\u7136\u800c\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u5b83\u4eec\u7684\u57fa\u56e0\u5e93\u4ece\u51b0\u6cb3\u665a\u671f\u8d77\u5c31\u53d1\u751f\u4e86\u663e\u8457\u7684\u53d8\u5316\uff0c\u56e0\u6b64\u6bd4\u610f\u5927\u5229\u4ece\u65b0\u77f3\u5668\u65f6\u4ee3\u5f00\u59cb\u7684\u90a3\u4e9b\u5927\u8fc1\u5f99\u65e9\u4e86\u51e0\u5343\u5e74\u3002\n\u8fd9\u91cc\u7684\u4e3b\u8981\u5047\u8bbe\u662f\uff0c\u968f\u7740\u6c14\u6e29\u7684\u4e0a\u5347\u548c\u51b0\u5ddd\u7684\u7f29\u5c0f\uff0c\u610f\u5927\u5229\u4e2d\u90e8\u7684\u4e00\u4e9b\u4eba\u7531\u4e8e\u51b0\u5ddd\u907f\u96be\u6240\u800c\u633a\u8fc7\u4e86\u51b0\u5ddd\u671f\uff0c\u4ed6\u4eec\u5411\u5317\u8fc1\u79fb\uff0c\u6f02\u6d41\u800c\u53bb\uff0c\u4ece\u800c\u9010\u6e10\u4e0e\u610f\u5927\u5229\u5357\u90e8\u7684\u5c45\u6c11\u9694\u79bb\u5f00\u6765\u3002\n\u751f\u6d3b\u5728\u610f\u5927\u5229\u5317\u90e8\u7684\u4eba\u4eec\u7684DNA\u663e\u793a\u4e86\u8fd9\u4e9b\u51b0\u6cb3\u540e\u8fc1\u5f99\u7684\u75d5\u8ff9\u3002\u5982\u679c\u4e0e\u610f\u5927\u5229\u5357\u90e8\u7684\u4eba\u76f8\u6bd4\uff0c\u6765\u81ea\u5317\u90e8\u7684\u610f\u5927\u5229\u4eba\u4e0e\u4eba\u7c7b\u9057\u9ab8\u6709\u7740\u5bc6\u5207\u7684\u9057\u4f20\u5173\u7cfb\uff0c\u53ef\u4ee5\u5f52\u56e0\u4e8e\u9a6c\u683c\u8fbe\u6797\u6587\u5316\u548c\u4f0a\u6bd4\u683c\u62c9\u97e6\u7279\u6587\u5316\u7b49\u53e4\u8001\u7684\u6b27\u6d32\u6587\u5316\uff0c\u5b83\u4eec\u7684\u5e74\u4ee3\u5206\u522b\u662f19000\u523014000\u5e74\u524d\u548c14000\u52309000\u5e74\u524d\u3002\u6b64\u5916\uff0c\u5728\u610f\u5927\u5229\u5317\u90e8\u7684\u57fa\u56e0\u5e93\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u89c2\u5bdf\u5230\u4e86\u66f4\u53e4\u8001\u7684\u7956\u5148\u6210\u5206\uff0c\u6bd4\u5982\u4e1c\u6b27\u72e9\u730e\u91c7\u96c6\u8005\u7684\u7956\u5148\u6210\u5206\uff0c\u8fd9\u4e9b\u6210\u5206\u88ab\u8ba4\u4e3a\u662f3.6\u4e07\u52302.6\u4e07\u5e74\u524d\u6240\u6709\u6b27\u6d32\u4eba\u7684\u7279\u5f81\uff0c\u540e\u6765\u968f\u7740\u51b0\u5ddd\u907f\u96be\u6240\u5728\u51b0\u5ddd\u665a\u671f\u7684\u8fc1\u5f99\u800c\u4f20\u64ad\u5230\u897f\u6b27\u3002\n\u76f8\u53cd\uff0c\u5728\u610f\u5927\u5229\u5357\u90e8\uff0c\u8fd9\u4e9b\u51b0\u5ddd\u540e\u8fc1\u5f99\u7684\u75d5\u8ff9\u4f3c\u4e4e\u6d88\u5931\u4e86\uff0c\u56e0\u4e3a\u6700\u8fd1\u7684\u4e8b\u4ef6\u663e\u8457\u91cd\u5851\u4e86\u4ed6\u4eec\u7684\u751f\u6d3b\u3002\u5b83\u4eec\u4e0e\u5b89\u7eb3\u6258\u5229\u4e9a\u548c\u4e2d\u4e1c\u7684\u65b0\u77f3\u5668\u65f6\u4ee3\u4eba\u7c7b\u9057\u9ab8\u4ee5\u53ca\u5357\u9ad8\u52a0\u7d22\u7684\u9752\u94dc\u65f6\u4ee3\u9057\u9ab8\u7684\u4eb2\u7f18\u5173\u7cfb\u66f4\u5bc6\u5207\uff0c\u8bc1\u5b9e\u4e86\u8fd9\u4e00\u70b9\u3002\u4e0e\u610f\u5927\u5229\u5317\u90e8\u4e0d\u540c\u7684\u662f\uff0c\u5357\u90e8\u662f\u79fb\u6c11\u8fd0\u52a8\u7684\u4e3b\u8981\u4e2d\u5fc3\uff0c\u5728\u65b0\u77f3\u5668\u65f6\u4ee3\u7684\u8fc7\u6e21\u65f6\u671f\uff0c\u5357\u65b9\u9996\u5148\u5c06\u519c\u4e1a\u4f20\u64ad\u5230\u5730\u4e2d\u6d77\u5730\u533a\uff0c\u7136\u540e\u5728\u9752\u94dc\u65f6\u4ee3\uff0c\u57f9\u517b\u4e86\u65b0\u7684\u7956\u5148\u6210\u5206\u3002\u540e\u8005\u4e0d\u540c\u4e8e\u540c\u4e00\u65f6\u95f4\u6a2a\u8de8\u6b27\u6d32\u5927\u9646\u548c\u610f\u5927\u5229\u5317\u90e8\u7684\u6b27\u4e9a\u8349\u539f\u79cd\u7fa4\u7684\u7956\u5148\u6210\u5206\u3002\n19000\u5e74\u524d\uff0c\u5728\u6700\u540e\u4e00\u6b21\u51b0\u5ddd\u76db\u671f\u7ed3\u675f\u540e\uff0c\u610f\u5927\u5229\u5317\u90e8\u548c\u5357\u90e8\u7684\u7956\u5148\u5f00\u59cb\u751f\u6d3b\u5728\u8d8a\u6765\u8d8a\u4e0d\u540c\u7684\u73af\u5883\u548c\u751f\u6001\u73af\u5883\u4e2d\uff0c\u8fd9\u9010\u6e10\u5bfc\u81f4\u4ed6\u4eec\u7684\u57fa\u56e0\u5e93\u51fa\u73b0\u4e86\u5dee\u5f02\u548c\u7279\u6b8a\u6027\u3002\n\u51e0\u5343\u5e74\u6765\uff0c\u91cd\u65b0\u5b89\u7f6e\u5728\u610f\u5927\u5229\u5317\u90e8\u7684\u4eba\u53e3\u5fcd\u53d7\u7740\u7c7b\u4f3c\u4e8e\u4e0a\u4e00\u6b21\u51b0\u5ddd\u76db\u671f\u7684\u7a81\u7136\u6c14\u5019\u53d8\u5316\u548c\u73af\u5883\u538b\u529b\u3002\u8fd9\u4e9b\u73af\u5883\u5e26\u6765\u4e86\u7279\u5b9a\u751f\u7269\u9002\u5e94\u7684\u8fdb\u5316\u3002\u4f8b\u5982\uff0c\u610f\u5927\u5229\u5317\u90e8\u7684\u4eba\u4eec\u5f00\u53d1\u4e86\u4e00\u79cd\u9488\u5bf9\u5bcc\u542b\u5361\u8def\u91cc\u548c\u52a8\u7269\u8102\u80aa\u7684\u996e\u98df\u8fdb\u884c\u4f18\u5316\u7684\u65b0\u9648\u4ee3\u8c22\uff0c\u8fd9\u662f\u5728\u5bd2\u51b7\u7684\u6c14\u5019\u4e2d\u751f\u5b58\u6240\u5fc5\u9700\u7684\u3002\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66\u5b9e\u9a8c\u533b\u5b66\u548c\u75c5\u7406\u751f\u7406\u5b66\u6559\u6388\u4fdd\u7f57\u00b7\u52a0\u62c9\u683c\u7eb3\u5c3c(Paolo Garagnani)\u8bf4\uff0c\u5728\u6765\u81ea\u610f\u5927\u5229\u5317\u90e8\u7684\u53d7\u8bd5\u8005\u4e2d\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u8c03\u8282\u80f0\u5c9b\u7d20\u548c\u4f53\u70ed\u4ea7\u751f\u7684\u57fa\u56e0\u7f51\u7edc\u4ee5\u53ca\u90a3\u4e9b\u8d1f\u8d23\u8102\u80aa\u7ec4\u7ec7\u65b0\u9648\u4ee3\u8c22\u7684\u57fa\u56e0\u7f51\u7edc\u7684\u53d8\u5316\u3002\u8fd9\u4e9b\u53d8\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5173\u952e\u56e0\u7d20\u964d\u4f4e\u7cd6\u5c3f\u75c5\u548c\u80a5\u80d6\u75c7\u7b49\u75be\u75c5\u7684\u6613\u611f\u6027\u3002\n\u867d\u7136\u8fd9\u53d1\u751f\u5728\u610f\u5927\u5229\u5317\u90e8\uff0c\u4f46\u5728\u5357\u90e8\uff0c\u6c14\u5019\u53d8\u6696\u4f7f\u5176\u4eba\u53e3\u9762\u4e34\u4e0d\u540c\u7c7b\u578b\u7684\u73af\u5883\u538b\u529b\u3002\u610f\u5927\u5229\u5357\u90e8\u4eba\u7684\u57fa\u56e0\u7ec4\u663e\u793a\u51fa\u7c98\u86cb\u767d\u7f16\u7801\u57fa\u56e0\u7684\u53d8\u5316\uff0c\u7c98\u86cb\u767d\u662f\u5728\u547c\u5438\u7cfb\u7edf\u548c\u80c3\u80a0\u7cfb\u7edf\u7684\u7c98\u819c\u4e2d\u53d1\u73b0\u7684\u86cb\u767d\u8d28\uff0c\u53ef\u4ee5\u9632\u6b62\u75c5\u539f\u4f53\u653b\u51fb\u7ec4\u7ec7\u3002\u8fd9\u9879\u7814\u7a76\u7684\u53e6\u4e00\u4f4d\u5408\u8457\u8005\u3001\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66\u7684\u535a\u58eb\u751f\u4fdd\u7f57\u00b7\u963f\u6ce2\u8fea\u5965(Paolo Abondio)\u8bf4\uff0c\u8fd9\u4e9b\u57fa\u56e0\u9002\u5e94\u53ef\u80fd\u662f\u5bf9\u53e4\u4ee3\u5fae\u751f\u7269\u7684\u53cd\u5e94\u800c\u8fdb\u5316\u51fa\u6765\u7684\u3002\u4e00\u4e9b\u5b66\u8005\u5c06\u8fd9\u4e9b\u57fa\u56e0\u53d8\u5f02\u4e2d\u7684\u4e00\u4e9b\u4e0e\u4f2f\u683c\u6c0f\u75c5\u7684\u6613\u611f\u6027\u964d\u4f4e\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u4f2f\u683c\u6c0f\u75c5\u662f\u4e00\u79cd\u5f71\u54cd\u80be\u810f\u7684\u5e38\u89c1\u708e\u75c7\uff0c\u786e\u5b9e\u5728\u610f\u5927\u5229\u5357\u90e8\u6bd4\u5728\u610f\u5927\u5229\u5317\u90e8\u66f4\u5c11\u89c1\u3002\n\u7814\u7a76\u4eba\u5458\u8fd8\u5728\u610f\u5927\u5229\u5357\u90e8\u4eba\u7684\u57fa\u56e0\u7ec4\u4e2d\u53d1\u73b0\u4e86\u5176\u4ed6\u7279\u6027\u3002\u4f8b\u5982\uff0c\u8c03\u8282\u9ed1\u8272\u7d20\u4ea7\u751f\u7684\u57fa\u56e0\u6709\u4e00\u4e9b\u4fee\u6539\uff0c\u9ed1\u8272\u7d20\u662f\u4e00\u79cd\u4e3a\u76ae\u80a4\u63d0\u4f9b\u989c\u8272\u7684\u8272\u7d20\u3002\u6700\u6709\u53ef\u80fd\u7684\u662f\uff0c\u8fd9\u4e9b\u53d8\u5316\u662f\u5bf9\u5730\u4e2d\u6d77\u5730\u533a\u66f4\u5f3a\u70c8\u7684\u9633\u5149\u548c\u66f4\u591a\u6674\u5929\u7684\u53cd\u5e94\u3002\u53cd\u8fc7\u6765\uff0c\u8fd9\u4e9b\u53d8\u5316\u53ef\u80fd\u4e5f\u6709\u52a9\u4e8e\u964d\u4f4e\u610f\u5927\u5229\u5357\u90e8\u4eba\u76ae\u80a4\u764c\u7684\u53d1\u75c5\u7387\u3002\n\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u8fd9\u4e9b\u57fa\u56e0\u53d8\u5f02\u4e2d\u7684\u4e00\u4e9b\u4e5f\u4e0e\u66f4\u957f\u7684\u5bff\u547d\u6709\u5173\u3002\u610f\u5927\u5229\u5357\u90e8\u7279\u6709\u7684\u5176\u4ed6\u57fa\u56e0\u4fee\u9970\u4e5f\u662f\u5982\u6b64\u3002\u6839\u636e\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66\u540d\u8a89\u6559\u6388\u514b\u52b3\u8fea\u5965\u00b7\u5f17\u6717\u897f\u65af\u57fa\u7684\u8bf4\u6cd5\uff0c\u8fd9\u4e9b\u57fa\u56e0\u5b58\u5728\u4e8e\u6d89\u53ca\u82b1\u751f\u56db\u70ef\u9178\u4ee3\u8c22\u7684\u57fa\u56e0\u548c\u7f16\u7801FoxO\u8f6c\u5f55\u56e0\u5b50\u7684\u57fa\u56e0\u4e0a\u3002\n\u8fd9\u9879\u540d\u4e3a\u201c\u610f\u5927\u5229\u4eba\u53e3\u57fa\u56e0\u7ec4\u53f2\u6982\u62ec\u4e86\u6b27\u6d32\u5927\u9646\u4eba\u548c\u5357\u6b27\u4eba\u7684\u5173\u952e\u8fdb\u5316\u52a8\u6001\u201d\u7684\u7814\u7a76\u53d1\u8868\u5728\u201cBMC\u751f\u7269\u5b66\u201d\u6742\u5fd7\u4e0a\u3002\u66f4\u591a\u4fe1\u606f\uff1a\u610f\u5927\u5229\u4eba\u53e3\u7684\u57fa\u56e0\u7ec4\u5386\u53f2\u6982\u62ec\u4e86\u6b27\u6d32\u5927\u9646\u4eba\u548c\u5357\u6b27\u4eba\u7684\u5173\u952e\u8fdb\u5316\u52a8\u6001&#34\uff1bSazzini\u7b49\u4eba\u3002BMC\u751f\u7269\u5b662020\u3002\u7535\u8bdd\uff1a10.1186/s12915-02020-4", "note_en": "In Europe, Italians have the highest genetic diversity. The gradient of their genetic variability, scattered all over the peninsula, encloses on a small scale the whole genetic variance between southern and continental Europeans. This amazing diversity started to accumulate soon after the Late Glacial Maximum, which ended approximately 19,000 years ago.    This is what researchers of the University of Bologna have reported in a paper published in  BMC Biology . It is the first time that researchers have traced Italians&#39; genetic history. Results also show that there are genetic peculiarities characterizing people living in the north and south of Italy that evolved in response to different environments. These peculiarities contribute to reducing the risk of kidney inflammation and skin cancers, and the risk of diabetes and obesity, favoring a longer lifespan.\n  &#34;Gaining an understanding of the evolutionary history of the ancestors of Italians allows us to better grasp the demographic processes and those of environmental interactions that shaped the complex mosaic of ancestry components of today&#39;s European populations,&#34; explains Marco Sazzini, one of the principal investigators of this study and professor of molecular anthropology at the University of Bologna. &#34;This investigation provides valuable information in order to fully appreciate the biological characteristics of the current Italian population. Moreover, it let us understand the deep causes that can impact on this population&#39;s health or on its predisposition to a number of diseases.&#34;\n    To carry out this study, researchers sequenced the entire genome of 40 participants who were selected as representatives of the biological variability of the Italian population with a good approximation. The analysis brought to the fore more than 17 million genetic variants. Scientists then made a twofold comparison. First, they compared these data against the genetic variants observed in other 35 populations from Europe and from the Mediterranean. Second, they compared the same data against the genetic variants found in studies on almost 600 human remains dating from the Upper Palaeolithic (approx. 40,000 years ago) to the Bronze Age (approx. 4,000 years ago).\n  These comparisons reached such high levels of precision that it was possible to extend the investigation to very remote time periods with respect to those achieved by previous studies. Eventually, the researchers identified traces left in the gene pool by events that followed the last glaciation, which ended more or less 19,000 years ago.\n    The bulk of the scholarship in this field has so far suggested that the oldest events leaving a trace in Italian DNA were the migrations during the Neolithic and the Bronze Ages, between 7,000 and 4,000 years ago. The results of this study show, on the contrary, that the earliest biological adaptations to the environment and migrations underlying Italians&#39; extraordinary genetic diversity are much older than previously thought.\n    Researchers traced the evolutionary history of the two groups at the opposite ends of Italians&#39; gradient of genetic variability. This means that they evaluated and measured differences between the gene pools of participants from southern and northern Italy and observed when these differences became evident.\n  &#34;We observe some partially overlapping demographic trends among the ancestors of these two groups from 30,000 years ago and for the remaining years of the Upper Palaeolithic,&#34; says Stefania Sarno, researcher at the University of Bologna and one of the co-first authors of the paper. &#34;However, we observed a significant variation between their gene pools from the Late Glacial period, thus some thousands of years before those great migrations that happened in Italy from the Neolithic onward.&#34;\n  Here, the main hypothesis is that with temperatures rising and glaciers shrinking, some groups of people who made it through the glaciation period thanks to &#34;glacial refugia&#34; in central Italy, moved north and drifted away, thus progressively isolating themselves from the inhabitants of southern Italy.\n  The DNA of people living in northern Italy shows traces of these post-glacial migrations. If compared to individuals from southern Italy, Italians from the north present a close genetic relation to human remains attributed to ancient European cultures such as the Magdalenian and the Epigravettian cultures and dated respectively between 19,000 and 14,000 years ago and between 14,000 and 9,000 years ago. Moreover, in northern Italians&#39; gene pool, the researchers observed ancestry components that were even more ancient, such as those proper of eastern European hunter-gatherers, which are thought to characterize all European populations between 36,000 and 26,000 years ago, and that later on spread to western Europe with migratory movements from &#34;glacial refugia&#34; during the Late Glacial period.\n  Conversely, in southern Italians, these post-glacial migrations traces seem to vanish, as more recent events significantly reshaped their  . This is confirmed by their closer genetic relation with Neolithic human remains from Anatolia and the Middle East, and with Bronze-Age remains from south Caucasus. Differently from the north of Italy, the south was a main hub for migratory movements, which first spread agriculture to the Mediterranean area during the Neolithic transition, and then, during Bronze Age, fostered a new ancestry component. The latter differs from the ancestry component associated with populations of the Eurasian steppe that spread during the same time across continental Europe and northern Italy.\n    Nineteen thousand years ago, after the end of the Last Glacial Maximum, ancestors of northern and southern Italians started living in increasingly different environmental and ecological contexts, which gradually led to the emergence of differences and peculiarities in their gene pools.\n  For millennia, the populations resettling in northern Italy endured abrupt climate changes and environmental pressures similar to those of the Last Glacial Maximum. These circumstances brought to the evolution of specific biological adaptations. For instance, populations in northern Italy developed a metabolism optimized for a diet rich in calories and animal fat, which are essential to survive in cold climates. &#34;In the subjects from northern Italy, we observed changes in the gene networks regulating insulin and body-heat production as well as in those responsible for fat tissue metabolism,&#34; says Paolo Garagnani, professor of experimental medicine and pathophysiology at the University of Bologna. &#34;These changes could have resulted in key factors reducing the susceptibility to diseases like diabetes and obesity.&#34;\n  While this was happening in northern Italy, in the south, a warmer climate exposed its populations to different kinds of environmental pressures. The genomes of people from southern Italy show changes in the genes encoding for mucins, which are proteins found in the mucous membranes of the respiratory and gastrointestinal systems and that prevent pathogens from attacking the tissues. &#34;These genetic adaptations may have evolved in response to ancient micro-organisms,&#34; says Paolo Abondio, Ph.D. student at the University of Bologna and another co-first author of this study. &#34;Some scholars have linked some of these genetic variants with a reduced susceptibility to Berger&#39;s disease, which is a common inflammation affecting the kidneys and is indeed less frequent in the south than in the north of Italy.&#34;\n  Researchers also identified other peculiarities in the genome of southern Italians. For example, there are some modifications in the genes regulating the production of melanin, the pigment that provides colour to the skin. Most probably, these alterations developed in response to more intense sunlight and to a higher number of sunny days that characterise the Mediterranean regions. In turn, these alterations may also have contributed to a lower incidence of skin cancers among southern Italians.\n  &#34;We observed that some of these genetic variants have been also linked to a longer lifespan. This is also true for other genetic modifications which are characteristic of southern Italians. These are found on genes involved in the arachidonic acid metabolism and on those encoding for FoxO transcription factors,&#34; according to Claudio Franceschi, emeritus professor of the University of Bologna.\n  The study, titled &#34;Genomic history of the Italian population recapitulates key evolutionary dynamics of both Continental and Southern Europeans,&#34; was published in  BMC Biology.        More information:\t\t\t\t\t\t\t\t\t\t\t\t&#34;Genomic history of the Italian population recapitulates key evolutionary dynamics of both Continental and Southern Europeans&#34; Sazzini et al.  BMC Biology 2020.  DOI: 10.1186/s12915-020-00778-4", "posttime": "2020-05-25 08:52:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u591a\u6837\u6027,italians,\u610f\u5927\u5229", "title": "\u610f\u5927\u5229\u4eba\u975e\u51e1\u7684\u9057\u4f20\u591a\u6837\u6027\u7684\u8bc1\u636e\u53ef\u4ee5\u8ffd\u6eaf\u523019K\u5e74\u524d\u3002", "title_en": "Evidence of Italians' extraordinary genetic diversity dates back 19K years", "transed": 1, "url": "https://phys.org/news/2020-05-earliest-evidence-italians-extraordinary-genetic.html", "via": "", "real_tags": ["\u591a\u6837\u6027", "italians", "\u610f\u5927\u5229"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003582, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u6765\u5230\u730e\u6237\u5ea7\u7684\u6000\u62b1\uff0c\u8fd9\u4e2a\u573a\u666f\u8bbe\u5b9a\u5728\u6570\u5343\u5e74\u540e\u7684\u672a\u6765\uff0c\u6587\u660e\u904d\u5e03\u661f\u7a7a\u3002\u795e\u6027\u7684\u63d0\u5347\u667a\u6167\u7edf\u6cbb\u7740\u6d69\u701a\u7684\u661f\u9645\u5e1d\u56fd\uff0c\u8f83\u5c0f\u7684\u6d3e\u7cfb\u8bd5\u56fe\u901a\u8fc7\u9634\u8c0b\u548c\u5f81\u670d\u6765\u5f00\u62d3\u4ed6\u4eec\u81ea\u5df1\u7684\u7edf\u6cbb\u3002\u5728\u6587\u660e\u7a7a\u95f4\u548c\u4eba\u7c7b\u53cb\u597d\u4e16\u754c\u7684\u8fb9\u7f18\u4e4b\u5916\uff0c\u5192\u9669\u7b49\u5f85\u7740\u90a3\u4e9b\u51c6\u5907\u597d\u5192\u9669\u7684\u4eba\u3002\u6765\u52a0\u5165\u6211\u4eec\u8fd9\u4e2a\u4e0d\u65ad\u6269\u5927\u7684\u96c6\u4f53\u4e16\u754c\u5efa\u8bbe\u52aa\u529b\u5427\u3002\u5728\u730e\u6237\u5ea7\u6000\u62b1\u7684\u6d69\u701a\u5b87\u5b99\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\uff1a", "note_en": "Welcome to Orion&#39;s Arm, a scenario set thousands of years in the future where civilization spans the stars. Godlike ascended intelligences rule vast interstellar empires, and lesser factions seek to carve out their own dominions through intrigue and conquest. Out beyond the edge of civilized space and the human-friendly worlds, adventure awaits those prepared to risk all.   Come join us in this ever-expanding collective worldbuilding effort. Within the vast universe that is Orion&#39;s Arm you will find:", "posttime": "2020-05-25 08:20:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "arm,\u4e16\u754c", "title": "\u730e\u6237\u5ea7\u7684ARM\u5b87\u5b99\u8ba1\u5212\uff1a\u5408\u4f5c\u786c\u79d1\u5e7b\u4e16\u754c\u5efa\u8bbe", "title_en": "Orion\u2019s Arm Universe Project: Collaborative Hard Sci-Fi Worldbuilding", "transed": 1, "url": "https://www.orionsarm.com", "via": "", "real_tags": ["arm", "\u4e16\u754c"]}, {"category": "", "categoryclass": "", "imagename": "0b4db50966a67f02059d59edf6286572.jpg", "infoid": 1003581, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3aSIGGRAPH 2020\u7684\u4e00\u90e8\u5206\uff0cNVIDIA\u7684\u7814\u7a76\u4eba\u5458(\u4e0e\u8fbe\u7279\u8305\u65af\u5b66\u9662\u7684\u89c6\u89c9\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u5408\u4f5c)\u6700\u8fd1\u53d1\u5e03\u4e86\u4e00\u7bc7\u8bba\u6587\uff0c\u5c55\u793a\u4e86ReSTIR\uff0c\u8fd9\u662f\u4e00\u79cd\u65b0\u7684\u5149\u7ebf\u8ddf\u8e2a\u7b97\u6cd5\uff0c\u80fd\u591f\u5b9e\u65f6\u6e32\u67d3\u6765\u81ea\u6570\u767e\u4e07\u5149\u6e90\u7684\u52a8\u6001\u76f4\u63a5\u7167\u660e\u548c\u9634\u5f71\u3002\n\u5728\u63cf\u8ff0ReSTIR\u5149\u7ebf\u8ddf\u8e2a\u7b97\u6cd5\u65f6\uff0c\u8bba\u6587\u4f5c\u8005\u4e4b\u4e00\u3001\u521a\u521a\u83b7\u5f972020\u5e74NVIDIA\u7814\u7a76\u751f\u5956\u5b66\u91d1\u7684\u8fbe\u7279\u8305\u65af\u535a\u58eb\u751f\u8d1d\u5185\u8fea\u514b\u7279\u00b7\u6bd4\u7279\u5229(Benedikt Bitterli)\u8868\u793a\uff1a\n\u6211\u4eec\u7684\u5173\u952e\u6d1e\u5bdf\u529b\u662f\u91cd\u7528\u6765\u81ea\u7a7a\u95f4\u548c\u65f6\u95f4\u76f8\u90bb\u50cf\u7d20\u7684\u4fe1\u606f\uff0c\u4ee5\u544a\u77e5\u8981\u8ddf\u8e2a\u54ea\u4e9b\u5149\u7ebf\u3002\u8fd9\u4e2a\u60f3\u6cd5\u7c7b\u4f3c\u4e8e\u73b0\u4ee3\u7684\u540e\u5904\u7406\u53bb\u566a\u548c\u6297\u952f\u9f7f\uff0c\u4f46\u662f\u5728\u53bb\u566a\u76f4\u63a5\u8fc7\u6ee4\u50cf\u7d20\u989c\u8272\u7684\u540c\u65f6\uff0c\u6211\u4eec\u8fc7\u6ee4\u6982\u7387\u6765\u5e2e\u52a9\u5f15\u5bfc\u5149\u7ebf\u51cf\u5c11\u672a\u6765\u7684\u566a\u58f0\u3002\n\u8fd9\u5c06\u7ed9\u5185\u5bb9\u521b\u4f5c\u5e26\u6765\u7ffb\u5929\u8986\u5730\u7684\u53d8\u5316\u3002\u8fd9\u9879\u7814\u7a76\u8ba9\u6211\u4eec\u53ef\u4ee5\u76f4\u89c2\u5730\u7167\u4eae\u573a\u666f\uff0c\u653e\u7f6e\u4efb\u610f\u6570\u91cf\u7684\u53d1\u5c04\u7269\u4f53\u6765\u6295\u5c04\u52a8\u6001\u9634\u5f71\uff0c\u800c\u7167\u660e\u5728\u6e32\u67d3\u5668\u4e2d\u201c\u5c31\u884c\u4e86\u201d\u3002\nReSTIR\u91cd\u590d\u5bf9\u4e00\u7ec4\u5019\u9009\u706f\u5149\u91c7\u6837\u8fdb\u884c\u91cd\u91c7\u6837\uff0c\u5e76\u5e94\u7528\u8fdb\u4e00\u6b65\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\u91cd\u91c7\u6837\u6765\u5229\u7528\u6765\u81ea\u76f8\u5173\u9644\u8fd1\u91c7\u6837\u7684\u4fe1\u606f\u3002\n\u5728\u4e0b\u9762\u5d4c\u5165\u7684\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u89c6\u9891\u6f14\u793a\u4e2d\uff0c\u8fd9\u79cd\u5149\u7ebf\u8ddf\u8e2a\u7b97\u6cd5\u8bbe\u6cd5\u505a\u5230\u4e86\u6240\u6709\u8fd9\u4e9b\uff0c\u540c\u65f6\u6bcf\u4e2a\u50cf\u7d20\u6700\u591a\u8ddf\u8e2a8\u6761\u5149\u7ebf\uff0c\u5728\u6bcf\u5e27\u4e0d\u523050ms\u7684\u65f6\u95f4\u5185\u6e32\u67d3\u5305\u542b\u591a\u8fbe340\u4e07\u4e2a\u52a8\u6001\u548c\u53d1\u5c04\u4e09\u89d2\u5f62\u7684\u573a\u666f\u3002\u4f7f\u7528\u7684\u56fe\u5f62\u5904\u7406\u5668\u662fGeForce RTX 2080Ti\uff0c\u4f46\u6e38\u4e50\u56ed\u573a\u666f\u9664\u5916\uff0c\u6839\u636e\u7814\u7a76\u4eba\u5458\u7684\u8bf4\u6cd5\uff0c\u8fd9\u4e00\u573a\u666f\u5bf9\u5185\u5b58\u7684\u8981\u6c42\u66f4\u9ad8\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528Titan RTX\u663e\u5361\u3002\n\u603b\u4f53\u800c\u8a00\uff0c\u5f53\u4f7f\u7528\u65e0\u504f\u4f30\u8ba1\u5668\u65f6\uff0c\u8be5\u65b9\u6cd5\u6bd4\u4ee5\u524d\u7684\u73b0\u6709\u6280\u672f\u65b9\u6cd5(\u4f8b\u5982\uff0cMoreau\u7b49\u4eba\u7684\u52a8\u6001\u591a\u5149\u91c7\u6837\u7528\u4e8e\u5b9e\u65f6\u5149\u7ebf\u8ddf\u8e2a\uff0c2019\u5e74)\u5feb6-60\u500d\uff0c\u5f53\u4f7f\u7528\u6709\u504f\u4f30\u8ba1\u5668\u65f6\uff0c\u8be5\u65b9\u6cd5\u5feb35-65\u500d(\u8fd9\u4ee5\u727a\u7272\u4e00\u4e9b\u56fe\u50cf\u6697\u5316\u548c\u80fd\u91cf\u635f\u5931\u4e3a\u4ee3\u4ef7\u8fdb\u4e00\u6b65\u964d\u4f4e\u566a\u58f0)\u3002\u6839\u636e\u7814\u7a76\u4eba\u5458\u7684\u8bf4\u6cd5\uff0c\u53e6\u4e00\u4e2a\u4e3b\u8981\u95ee\u9898\u662f\uff0c\u4e00\u65e6\u6e32\u67d3\u5b8c\u6210\uff0c\u53bb\u566a\u548c\u8fc7\u6ee4\u5c31\u4e0d\u5fc5\u5c40\u9650\u4e8e\u540e\u5904\u7406\uff0c\u56e0\u4e3a\u4f7f\u7528ReSTIR\u5149\u7ebf\u8ddf\u8e2a\u7b97\u6cd5\uff0c\u53bb\u566a\u662f\u6838\u5fc3\u6e32\u67d3\u5668\u7684\u4e00\u90e8\u5206\uff0c\u8fc7\u6ee4\u5904\u7406PDF(\u6982\u7387\u5bc6\u5ea6\u51fd\u6570)\u800c\u4e0d\u662f\u989c\u8272\u3002\n\u4e0e\u5927\u591a\u6570\u79d1\u5b66\u7814\u7a76\u4e00\u6837\uff0cReSTIR\u53ef\u80fd\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u8fdb\u5165\u9ec4\u91d1\u65f6\u95f4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7814\u7a76\u4eba\u5458\u81ea\u5df1\u4e5f\u6307\u51fa\u4e86\u4ed6\u4eec\u7684\u65b9\u6cd5\u5728\u8bd5\u56fe\u5c06\u76f4\u63a5\u7167\u660e(\u6216\u5168\u5c40\u7167\u660e)\u4ece\u5c4f\u5e55\u7a7a\u95f4\u6269\u5c55\u5230\u4e16\u754c\u7a7a\u95f4\u65f6\u9047\u5230\u7684\u4e00\u4e9b\u5f53\u524d\u9650\u5236\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u4e5f\u6307\u51fa\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u6f5c\u5728\u89e3\u51b3\u65b9\u6848\uff0c\u5982\u8def\u5f84\u7a7a\u95f4\u6563\u5217\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4ecd\u7136\u662f\u5149\u7ebf\u8ddf\u8e2a\u5c06\u7ee7\u7eed\u5b58\u5728\u7684\u66f4\u591a\u8bc1\u636e\u3002\u5982\u679c\u50cfRTX 2080Ti\u548cTitan RTX\u8fd9\u6837\u7684\u5f53\u524d\u4e00\u4ee3\u57fa\u4e8e\u56fe\u7075\u7684GPU\u5df2\u7ecf\u53ef\u4ee5\u5b9e\u65f6\u6e32\u67d3\u6570\u767e\u4e07\u4e2a\u52a8\u6001\u706f\u5149\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5373\u5c06\u63a8\u51fa\u7684\u4e0b\u4e00\u4ee3\u57fa\u4e8e\u5b89\u57f9\u7684GPU\u6765\u8bf4\uff0c\u8fd9\u9879\u4efb\u52a1\u5e94\u8be5\u4f1a\u5bb9\u6613\u5f97\u591a\uff0c\u636e\u8bf4\u5b83\u4eec\u5728\u8fd9\u4e00\u7279\u5b9a\u9886\u57df\u7684\u901f\u5ea6\u4f1a\u5448\u6307\u6570\u7ea7\u589e\u957f\u3002\u9274\u4e8e\u9884\u8ba1\u5c06\u57289\u6708\u4efd\u63a8\u51fa\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u77e5\u9053\u66f4\u591a\u7ec6\u8282\u3002", "note_en": "As part of SIGGRAPH 2020, NVIDIA researchers (in collaboration with the Visual Computing Lab at Dartmouth College)  recently released a paper showcasing ReSTIR, a new raytracing algorithm capable of rendering dynamic direct lighting and shadows from millions of light sources in real-time.\n Describing the ReSTIR raytracing algorithm, Benedikt Bitterli, one of the paper\u2019s authors and a Dartmouth Ph.D. student who just got a 2020 NVIDIA graduate fellowship, stated:\n  Our key insight was to reuse information from spatially and temporally adjacent pixels to inform which rays to trace. This idea resembles modern post-process denoising and antialiasing, but while denoising filters the pixel colors directly, we filter probabilities to help guide rays to reduce future noise.\n  This will bring about a sea change for content creation. This research lets us light scenes intuitively, placing arbitrary numbers of emissive objects that cast dynamic shadows, and the lighting \u2018just works\u2019 in the renderer.\n ReSTIR repeatedly resamples a set of candidate light samples and applies further spatial and temporal resampling to leverage information from relevant nearby samples.\n In the impressive video demonstration embedded below, this raytracing algorithm managed to do all this while tracing 8 rays per pixel at most, rendering scenes containing up to 3.4 million dynamic and emissive triangles in under 50ms per frame. The GPU used was a GeForce RTX 2080Ti, with the exception of the Amusement Park scene, which according to the researchers had higher memory requirements and thus required using a Titan RTX graphics card instead.\n Overall, this approach is 6-60x faster than the previous state of the art methods (such as  Dynamic Many-Light Sampling for Real-Time Raytracing by Moreau et al., 2019) when using an unbiased estimator and 35-65x faster when using a biased estimator (which further reduces noise at the expense of some image darkening and energy loss). Another major takeaway, according to the researchers, is that denoising and filtering do not have to be restricted to post-processing once rendering is done, as with the ReSTIR raytracing algorithm denoising is part of the core renderer and filtering handles PDFs (probability density functions) instead of colors.\n As with most scientific research, ReSTIR probably isn&#39;t ready for prime time just yet. In fact, the researchers themselves point to some current limitations their method incurs into when trying to extend the direct lighting (or global illumination) from screen space to world space, though they&#39;ve also indicated potential solutions for this issue such as path space hashing.\n  Still, it is yet more proof that raytracing is here to stay. If current-gen Turing-based GPUs like the RTX 2080Ti and Titan RTX can already render millions of dynamic lights in real time, the task should be a lot easier for the upcoming next-gen Ampere-based GPUs, which are rumored to be exponentially faster in this particular area. We&#39;ll know more details soon enough,  given that the launch is expected by the month of September.", "posttime": "2020-05-25 08:04:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,nvidia,\u8ddf\u8e2a,researchers,\u7a7a\u95f4", "title": "NVIDIA\u7814\u7a76\u4eba\u5458\u5c55\u793a\u65b0\u7684\u5149\u7ebf\u8ddf\u8e2a\u7b97\u6cd5", "title_en": "Nvidia Researchers Demonstrate New Raytracing Algorithm", "transed": 1, "url": "https://wccftech.com/nvidia-researchers-demonstrate-new-raytracing-algorithm-that-can-render-direct-lighting-from-millions-of-dynamic-light-sources/", "via": "", "real_tags": ["\u7b97\u6cd5", "nvidia", "\u8ddf\u8e2a", "\u7a7a\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "fe0c93c82f35b107632c22f71e99c083.png", "infoid": 1003580, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Librem 15\u662f\u7b2c\u4e00\u6b3e\u8d85\u4fbf\u643a\u5de5\u4f5c\u7ad9\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u91c7\u7528\u9010\u82af\u7247\u3001\u9010\u884c\u8bbe\u8ba1\uff0c\u5c0a\u91cd\u60a8\u7684\u9690\u79c1\u6743\u3001\u5b89\u5168\u6743\u548c\u81ea\u7531\u6743\u3002\u6bcf\u4e2a\u786c\u4ef6\u548c\u8f6f\u4ef6\u7ec4\u4ef6-\u4ee5\u53ca\u6211\u4eec\u6240\u505a\u7684\u4e00\u5207-\u90fd\u7b26\u5408\u6211\u4eec\u5c0a\u91cd\u60a8\u7684\u9690\u79c1\u6743\u3001\u5b89\u5168\u6743\u548c\u81ea\u7531\u6743\u7684\u4fe1\u5ff5\u3002\u6211\u4eec\u77e5\u9053\u60a8\u4f1a\u5bf9\u7ed3\u679c\u611f\u5230\u6ee1\u610f\u7684\u3002\n\u5904\u7406\u5668\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684--\u5b83\u4eec\u88ab\u79f0\u4e3a\u4e2d\u592e\u5904\u7406\u5668\u662f\u6709\u539f\u56e0\u7684\u3002\u9009\u62e9\u57fa\u4e8e\u82f1\u7279\u5c14i7\u7684\u5904\u7406\u5668(\u7b2c\u4e03\u4ee3\u79fb\u52a8\u7248\u672c)\uff0c\u5728\u4e0d\u5f71\u54cd\u901f\u5ea6\u7684\u540c\u65f6\u63d0\u4f9b\u6700\u4f73\u7535\u6c60\u7eed\u822a\u65f6\u95f4\uff0c\u5e76\u652f\u6301\u5f00\u6e90\u6838\u5fc3\u91cd\u65b0\u542f\u52a8BIOS\u3002\u5728\u4f7f\u7528\u82f1\u7279\u5c14\u7684\u6700\u65b0\u7248\u672c\u65f6\uff0c\u9700\u8981\u5927\u91cf\u5904\u7406\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee5\u95ea\u7535\u822c\u7684\u901f\u5ea6\u7ed3\u675f\u3002\n\u8bb0\u5fc6\u662f\u4e00\u4ef6\u7f8e\u5999\u7684\u4e8b\u60c5\u3002Purism\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e2d\u4ee5\u6700\u5feb\u7684\u901f\u5ea6\u63d0\u4f9b\u540c\u7c7b\u6700\u597d\u7684\u5185\u5b58\u6a21\u5757\u3002\u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u5728\u4f7f\u7528\u6700\u9ad8\u8d28\u91cf\u7684\u5c0a\u91cd\u81ea\u7531\u7684\u786c\u4ef6\u65f6\uff0c\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\u7684\u54cd\u5e94\u901f\u5ea6\u975e\u5e38\u5feb\u3002\n\u501f\u52a9\u7ecf\u8fc7\u7535\u6e90\u4f18\u5316\u7684\u7b2c\u4e03\u4ee3\u56fe\u5f62\u5904\u7406\u5668\uff0c\u8f7b\u677e\u64ad\u653e\u7535\u5f71\u3001\u7f16\u8f91\u89c6\u9891\u548c\u6e32\u67d33D\u6548\u679c\u3002\n\u73b0\u5728\uff0c\u4f7f\u7528\u7269\u7406\u5207\u6362\u5f00\u5173\uff0c\u5f53\u60a8\u7684\u6444\u50cf\u673a\u548c\u9ea6\u514b\u98ce\u5173\u95ed\u65f6\uff0c\u60a8\u5c31\u77e5\u9053\u5b83\u4eec\u662f\u5173\u95ed\u7684\u3002\u65e0\u7ebf\u548c\u84dd\u7259\u7ed3\u5408\u5728\u7b2c\u4e8c\u4e2a\u786c\u4ef6\u4ea4\u6362\u673a\u4e2d\uff0c\u4ee5\u63a7\u5236\u6240\u6709\u65e0\u7ebf\u7535\u4fe1\u53f7\u7684\u5165\u7ad9\u548c\u51fa\u7ad9\u3002\n\u9009\u62e9\u5730\u7403\u4e0a\u7b2c\u4e09\u4e30\u5bcc\u7684\u5143\u7d20\u548c\u6700\u4e30\u5bcc\u7684\u91d1\u5c5e\uff0c\u610f\u5473\u7740\u6211\u4eec\u5728\u5229\u7528\u4e30\u5bcc\u7684\u5730\u7403\u8d44\u6e90\u7684\u540c\u65f6\uff0c\u83b7\u5f97\u4e86\u94dd\u3001\u8f7b\u3001\u8584\u3001\u5f3a\u7684\u5de8\u5927\u597d\u5904\u3002\n\u4f7f\u7528\u6211\u4eec\u7684\u9632\u53cd\u5c04\u54d1\u5149\u663e\u793a\u5668\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u5c4f\u5e55\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u5149\u9762\u663e\u793a\u5668\u4e0d\u8212\u670d\u7684\u955c\u9762\u53cd\u5c04\u3002Librem 15\u73b0\u5728\u63d0\u4f9b4K\u663e\u793a\u5c4f\uff01\u968f\u774015.6\u82f1\u5bf8\u5c4f\u5e55\u73b0\u5728\u652f\u6301\u66f4\u9ad8\u7684\u5206\u8fa8\u7387(3840x2160)\uff0c\u6bcf\u82f1\u5bf8\u5c06\u6709\u66f4\u591a\u50cf\u7d20(Ppi)\u3002\u6bcf\u82f1\u5bf8\u50cf\u7d20\u8d8a\u591a\uff0c\u663e\u793a\u6548\u679c\u5c31\u8d8a\u6e05\u6670\u3002\u5bf9\u5de5\u4f5c\u548c\u5a31\u4e50\u90fd\u66f4\u597d\u3002\n\u9996\u5148\u662f\u8001\u9f20\u3002\u7136\u540e\u51fa\u73b0\u4e86\u64cd\u7eb5\u6746\u3001\u6a61\u76ae\u64e6\u5934\u3001\u8ddf\u8e2a\u7403\u2026\u3002\u73b0\u5728\u6b22\u8fce\u7ec8\u6781\u754c\u9762\uff1a\u591a\u70b9\u89e6\u6478\u89e6\u63a7\u677f\uff0cPureOS\u539f\u751f\u652f\u6301\u624b\u52bf\u3002\n\u6784\u5efa\u8d28\u91cf\u4ece\u4f60\u63a5\u89e6\u7684\u7b2c\u4e00\u4ef6\u4e1c\u897f\u5f00\u59cb\u3002\u4f60\u4f1a\u975e\u5e38\u559c\u6b22\u5728\u4f60\u7684Librem\u4e0a\u6253\u5b57\uff0c\u4f60\u53ef\u80fd\u6c38\u8fdc\u90fd\u4e0d\u4f1a\u505c\u6b62\u6253\u5b57\u3002Librem 15\u63d0\u4f9b\u5168\u5c3a\u5bf8\u952e\u76d8\uff0c\u5305\u62ec\u6570\u5b57\u5c0f\u952e\u76d8\uff0c\u6309\u952e\u5bb9\u6613-\u4f46\u4e0d\u592a\u5bb9\u6613-\u6f02\u6d6e\u5230\u8db3\u591f\u9ad8\u7684\u4f4d\u7f6e\uff0c\u5f53\u4f60\u5411\u4e0b\u6309\u4e0b\u65f6\u611f\u89c9\u201c\u6070\u5230\u597d\u5904\u201d\u3002\u4f7f\u7528\u80cc\u5149\u952e\u4ee5\u4e24\u4e2a\u7ea7\u522b\u7684\u5f3a\u5ea6\u4eab\u53d7\u65e5\u591c\u6253\u5b57\u7684\u4e50\u8da3\u3002\n\u6211\u4eec\u5bf9\u94f0\u94fe\u611f\u5230\u5174\u594b\u3002\u6211\u4eec\u7684\u94f0\u94fe\u7ecf\u5e38\u88ab\u4e0d\u591f\u7528\u7684\u7b14\u8bb0\u672c\u7535\u8111\u5236\u9020\u5546\u5ffd\u89c6\uff0c\u6211\u4eec\u7684\u94f0\u94fe\u88ab\u8bbe\u8ba1\u6210\u575a\u56fa\u8010\u7528\uff0c\u5173\u95ed\u65f6\u4fdd\u6301\u5173\u95ed\uff0c\u4f7f\u7528\u65f6\u4fdd\u6301\u5728130\u00b0\u7684\u5c4f\u5e55\u89d2\u5ea6\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u3002\n\u4e00\u4e2a\u6309\u94ae\u5c31\u53ef\u4ee5\u7edf\u6cbb\u6240\u6709\u4eba\u3002\u4ece\u4e00\u4e2a\u5bc6\u94a5\u5feb\u901f\u8bbf\u95ee\u60a8\u559c\u6b22\u7684\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u548c\u6587\u6863\u3002\n\u4e0a\u3001\u5de6\u3001\u53f3\u3001\u524d\u3001\u540e\uff0c\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5f88\u96be\u51fa\u9519\u3002\n\u6240\u6709\u5176\u4ed6\u7b14\u8bb0\u672c\u7535\u8111\u90fd\u4f7f\u7528\u786c\u4ef6\u82af\u7247\u548c\u8f6f\u4ef6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u80cc\u53db\u4f60\u3002\u65b0\u95fb\u62a5\u9053\u5df2\u7ecf\u5c55\u793a\u4e86\u8fd9\u4e9b\u82af\u7247\u662f\u5982\u4f55\u79d8\u5bc6\u4f20\u8f93\u8bed\u97f3\u3001\u7f51\u7edc\u3001\u56fe\u7247\u6216\u89c6\u9891\u4fe1\u53f7\u7684\u3002\u5176\u4ed6\u82af\u7247\u7528\u4e8e\u5b89\u88c5\u95f4\u8c0d\u8f6f\u4ef6\u3001\u6076\u610f\u8f6f\u4ef6\u6216\u75c5\u6bd2\u3002\u8fd9\u4e9b\u5185\u7f6e\u6f0f\u6d1e\u53ef\u4ee5\u5c06\u201c\u60a8\u7684\u201d\u8ba1\u7b97\u673a\u53d8\u6210\u201c\u4ed6\u4eec\u7684\u201d\u8ba1\u7b97\u673a\u3002Purism\u4e0e\u786c\u4ef6\u7ec4\u4ef6\u4f9b\u5e94\u5546\u548c\u81ea\u7531\u8f6f\u4ef6\u793e\u533a\u5408\u4f5c\uff0c\u81f4\u529b\u4e8e\u5236\u9020\u5c0a\u91cd\u60a8\u7684\u9690\u79c1\u548c\u4fdd\u62a4\u60a8\u7684\u5b89\u5168\u7684\u786c\u4ef6\u3002\nPureOS\uff0c\u4ece\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\u3001\u5185\u6838\u5230\u6570\u5341\u4e07\u4e2a\u53ef\u7528\u7684\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\uff0c\u90fd\u662f\u9010\u884c\u6784\u5efa\u7684\uff0c\u5f3a\u8c03\u60a8\u7684\u9690\u79c1\u6743\u3001\u5b89\u5168\u6027\u548c\u81ea\u7531\u6743\u3002\n\u5f53\u60a8\u4f7f\u7528Purism\u8ba1\u7b97\u673a\u65f6\uff0c\u60a8\u77e5\u9053\u60a8\u6b63\u5728\u64cd\u4f5c\u6700\u597d\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\uff0c\u540c\u65f6\u7262\u8bb0\u60a8\u7684\u9690\u79c1\u6743\u3001\u5b89\u5168\u6743\u548c\u81ea\u7531\u6743\u3002\u6211\u4eec\u628a\u5c0a\u91cd\u7528\u6237\u7684\u9690\u79c1\u6743\u3001\u5b89\u5168\u6743\u548c\u81ea\u7531\u6743\u653e\u5728\u9996\u4f4d\u3002", "note_en": "The Librem 15 is the first ultra-portable workstation laptop that was designed chip-by-chip, line-by-line, to respect your rights to privacy, security, and freedom. Every hardware and software component\u2014and everything we do\u2014is in line with our belief in respecting your rights to privacy, security, and freedom. We know you will be happy with the results.\n      Processors are essential\u2014they are called  central processing units, for a reason. Selecting Intel i7 based processors, the seventh generation mobile version, offers the best battery life while not compromising speed and supporting the  open source coreboot BIOS. In using the latest from Intel, processor-hungry applications finish at lightning speed.\n     Memory is a wonderful thing. Purism offers the best in class memory modules at the fastest speeds available in a laptop. You will notice how quickly software applications respond when using the highest quality freedom-respecting hardware.\n     Play movies, edit videos and render 3D easily with a power-optimized seventh generation graphics processing unit.\n     Now with a physical toggle switch, when your camera and microphone are switched off, you know they are off. Wireless and Bluetooth are combined in a second hardware switch to control all your radio signals inbound and outbound.\n     Selecting the third most abundant element, and most abundant metal on earth means we get the great benefits of aluminium, light, thin, and strong, while using abundant earth resources.\n     With our anti-reflection matte display you can view your screen without the uncomfortable mirror-like reflections of glossy displays. The Librem 15 now offers a 4K display! With the 15.6 inch screen now supporting a higher resolution (3840 x 2160), there will be more pixels per inch (PPI). More pixels per inch translate to a sharper display. Better for both work and play.\n     First, there was the mouse. Then came joysticks, eraser-heads, trackballs\u2026 now welcome the ultimate interface: the multitouch trackpad, with gestures natively supported under PureOS.\n    Build quality starts from the first thing you touch. You will enjoy typing on your Librem so much, you may never stop typing. The Librem 15 offers a full-sized keyboard including numeric keypad, with easy to press keys\u2014but not  too easy\u2014floating high enough to feel \u201cjust right\u201d when you push down. Enjoy typing day and night with the backlit keys with two levels of intensity.\n     We get excited about hinges. Often overlooked by inadequate laptop makers, our hinge is built to be sturdy for life, staying shut when shut, and staying put in any of the 130\u00b0 of screen angle while in use.\n     One button to rule them all. Quickly access all your favorite apps and documents from a single key.\n   Top, Left, Right, Front, and Rear, it\u2019s hard to go wrong with these profiles\n       All other laptops use hardware chips coupled with software that can betray you. News stories have shown how these chips can surreptitiously transmit voice, networking, picture or video signals. Other chips are used to install spyware, malware or viruses. These built-in vulnerabilities can turn \u201cyour\u201d computer into \u201ctheir\u201d computer. Purism works with hardware component suppliers and the Free software community towards making hardware that respects your privacy and protects your security.\n   PureOS, from the bootloader, kernel, through to the hundreds of thousands of software applications available, is built line-by-line with emphasis on your rights to privacy, security, and freedom.\n    When you use a Purism computer you know you are operating the best hardware and software, while keeping your rights to privacy, security, and freedom in mind. We place respecting users\u2019 rights to privacy, security, and freedom above all else.", "posttime": "2020-05-25 08:03:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,\u7b14\u8bb0\u672c\u7535\u8111,designed", "title": "\u9996\u6b3e15\u82f1\u5bf8\u7b14\u8bb0\u672c\u7535\u8111\u65e8\u5728\u4fdd\u62a4\u60a8\u7684\u6570\u5b57\u751f\u6d3b", "title_en": "The first 15\u2033 laptop designed to protect your digital life", "transed": 1, "url": "https://puri.sm/products/librem-15/", "via": "", "real_tags": ["\u7535\u8111", "\u7b14\u8bb0\u672c\u7535\u8111", "designed"]}, {"category": "", "categoryclass": "", "imagename": "ff0f798ffcfff2f98aa4c111716d9e75.jpg", "infoid": 1003578, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "5\u670822\u65e5(\u5408\u4f17\u56fd\u9645)--\u5468\u4e94\u5728\u6b27\u6d32\u795e\u7ecf\u75c5\u5b66\u865a\u62df\u5927\u4f1a\u4e0a\u516c\u5e03\u7684\u4e00\u9879\u7814\u7a76\u53d1\u73b0\uff0c\u57ce\u5e02\u5c45\u6c11\u88ab\u8bca\u65ad\u4e3a\u591a\u53d1\u6027\u786c\u5316\u75c7\u7684\u53ef\u80fd\u6027\u6bd4\u751f\u6d3b\u5728\u66f4\u591a\u519c\u6751\u5730\u533a\u7684\u4eba\u9ad8\u51fa\u8fd130%\u3002\n\u636e\u5728\u610f\u5927\u5229\u8fdb\u884c\u7814\u7a76\u7684\u4f5c\u8005\u79f0\uff0c\u6839\u636e\u8fd9\u4e00\u7ed3\u679c\uff0c\u7a7a\u6c14\u6c61\u67d3\u53ef\u80fd\u662f\u8be5\u75be\u75c5\u53d1\u5c55\u7684\u4e00\u4e2a\u98ce\u9669\u56e0\u7d20\u3002\u8be5\u7ed3\u679c\u4e5f\u5c06\u53d1\u8868\u5728\u6b27\u6d32\u795e\u7ecf\u5b66\u6742\u5fd7(European Journal Of Neuroology)\u4e0a\u3002\u8fd9\u9879\u7814\u7a76\u4e5f\u5c06\u53d1\u8868\u5728\u6b27\u6d32\u795e\u7ecf\u75c5\u5b66\u6742\u5fd7(European Journal Of Neuroology)\u4e0a\u3002\n\u610f\u5927\u5229\u5e15\u7ef4\u4e9a\u7684IRCCS Mondino\u57fa\u91d1\u4f1a\u7684\u5408\u8457\u8005Roberto Bergamaschi\u535a\u58eb\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u50cf\u591a\u53d1\u6027\u786c\u5316\u75c7\u8fd9\u6837\u7684\u514d\u75ab\u75be\u75c5\u4e0e\u591a\u79cd\u56e0\u7d20\u6709\u5173\uff0c\u65e2\u6709\u9057\u4f20\u56e0\u7d20\uff0c\u4e5f\u6709\u73af\u5883\u56e0\u7d20\u3002\n\u4ed6\u8865\u5145\u8bf4\uff0c\u6211\u4eec\u8ba4\u4e3a\u7a7a\u6c14\u6c61\u67d3\u5728\u591a\u53d1\u6027\u786c\u5316\u75c7\u7684\u53d1\u5c55\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u51e0\u79cd\u673a\u5236\u76f8\u4e92\u4f5c\u7528\uff0c\u8fd9\u9879\u7814\u7a76\u7684\u7ed3\u679c\u52a0\u5f3a\u4e86\u8fd9\u4e00\u5047\u8bbe\u3002\n\u636e\u5168\u56fd\u591a\u53d1\u6027\u786c\u5316\u75c7\u534f\u4f1a\u4f30\u8ba1\uff0c\u591a\u53d1\u6027\u786c\u5316\u75c7\u5f71\u54cd\u4e86\u5927\u7ea6100\u4e07\u7f8e\u56fd\u4eba\u3002\u7814\u7a76\u5df2\u7ecf\u786e\u5b9a\uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u8eab\u514d\u75ab\u6027\u75be\u75c5\uff0c\u514d\u75ab\u7cfb\u7edf\u653b\u51fb\u8986\u76d6\u810a\u9ad3\u795e\u7ecf\u7ea4\u7ef4\u7684\u4fdd\u62a4\u9798\uff0c\u6270\u4e71\u5927\u8111\u548c\u8eab\u4f53\u5176\u4ed6\u90e8\u5206\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\n\u7edd\u5927\u591a\u6570\u60a3\u8005\u90fd\u6709\u590d\u53d1-\u7f13\u89e3\u7684\u75c7\u72b6\uff0c\u5176\u7279\u5f81\u662f\u75c7\u72b6\u6709\u7ea2\u6591\u6216\u53d1\u4f5c\u3002\u8fd9\u79cd\u75be\u75c5\u901a\u5e38\u572820\u523040\u5c81\u7684\u6210\u5e74\u4eba\u4e2d\u88ab\u8bca\u65ad\u51fa\u6765\uff0c\u5728\u5973\u6027\u4e2d\u66f4\u5e38\u89c1\u3002\n\u75c7\u72b6\u6bcf\u5929\u7684\u4e25\u91cd\u7a0b\u5ea6\u5404\u4e0d\u76f8\u540c\uff0c\u53ef\u80fd\u5305\u62ec\u75b2\u52b3\u3001\u884c\u8d70\u56f0\u96be\u3001\u9ebb\u6728\u3001\u75bc\u75db\u548c\u808c\u8089\u75c9\u631b\u3002\n\u5728\u4ed6\u4eec\u7684\u7814\u7a76\u4e2d\uff0cBergamaschi\u548c\u4ed6\u7684\u540c\u4e8b\u56de\u987e\u4e86\u610f\u5927\u5229\u897f\u5317\u90e8\u4f26\u5df4\u7b2c\u5730\u533a900\u591a\u540d\u591a\u53d1\u6027\u786c\u5316\u75c7\u60a3\u8005\u7684\u6570\u636e\u3002\u8be5\u5730\u533a\u662f\u8fd155\u4e07\u4eba\u7684\u5bb6\u56ed\u3002\n\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u8be5\u5730\u533a\u7684\u591a\u53d1\u6027\u786c\u5316\u75c7\u53d1\u75c5\u7387\u5728\u8fc7\u53bb50\u5e74\u91cc\u589e\u957f\u4e8610\u500d\uff0c\u4ece1974\u5e74\u7684\u6bcf10\u4e07\u5c45\u6c1116\u4f8b\u589e\u52a0\u52302020\u5e74\u7684\u6bcf10\u4e07\u5c45\u6c11\u8fd1170\u4f8b\u3002\u6b64\u5916\uff0c\u4ed6\u4eec\u8fd8\u6839\u636e\u4e09\u4e2a\u4e0d\u540c\u5730\u533a\u7684\u57ce\u5e02\u5316\u6c34\u5e73\u5bf9\u8fd9\u4e09\u4e2a\u5730\u533a\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\n\u5176\u4e2d\u4e24\u4e2a\u5730\u533a\u88ab\u53d1\u73b0\u9ad8\u4e8e\u6b27\u76df\u59d4\u5458\u4f1a\u7684\u7a7a\u6c14\u6c61\u67d3\u9608\u503c\uff0c\u8be5\u9608\u503c\u7531\u88ab\u79f0\u4e3a\u9897\u7c92\u7269(PM)\u7684\u6c61\u67d3\u7269\u6c34\u5e73\u786e\u5b9a\uff0c\u9897\u7c92\u7269\u662f\u6307\u7a7a\u6c14\u4e2d\u56fa\u4f53\u9897\u7c92\u548c\u6db2\u6ef4\u7684\u6df7\u5408\u7269\u3002\nPM\u5206\u4e3a\u4e24\u7c7b\uff1aPM10\u548cPM2.5\uff0cPM10\u5305\u62ec\u76f4\u5f84\u4e3a10\u5fae\u7c73\u6216\u66f4\u5c0f\u7684\u9897\u7c92\uff0cPM2.5\u5305\u62ec\u76f4\u5f84\u4e3a2.5\u5fae\u7c73\u6216\u66f4\u5c0f\u7684\u9897\u7c92\u3002\n\u636e\u4e16\u754c\u536b\u751f\u7ec4\u7ec7(World Health Organization)\u79f0\uff0cPM10\u548cPM2.5\u90fd\u662f\u4e3b\u8981\u6c61\u67d3\u7269\uff0c\u5df2\u77e5\u4e0e\u5404\u79cd\u5065\u5eb7\u72b6\u51b5\u6709\u5173\uff0c\u5305\u62ec\u5fc3\u80ba\u75be\u75c5\u3001\u764c\u75c7\u548c\u547c\u5438\u95ee\u9898\u3002\n\u7814\u7a76\u4eba\u5458\u89c2\u5bdf\u5230\uff0c\u5c45\u4f4f\u5728\u4e24\u79cdPM\u6c34\u5e73\u8f83\u4f4e\u7684\u519c\u6751\u5730\u533a\u7684\u4eba\u60a3\u591a\u53d1\u6027\u786c\u5316\u75c7\u7684\u98ce\u9669\u8f83\u4f4e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5c45\u4f4f\u5728\u57ce\u5e02\u5730\u533a\u3001\u7a7a\u6c14\u4e2dPM\u542b\u91cf\u8f83\u591a\u7684\u4eba\u60a3\u8fd9\u79cd\u75be\u75c5\u7684\u98ce\u9669\u9ad8\u51fa29%\u3002\n\u4f5c\u8005\u5f3a\u8c03\uff0c\u4ed6\u4eec\u7684\u7814\u7a76\u662f\u5728\u7a7a\u6c14\u6c61\u67d3\u7269\u6d53\u5ea6\u6700\u9ad8\u7684\u51ac\u5b63\u8fdb\u884c\u7684\u3002\nBergamaschi\u8bf4\uff0c\u4e00\u4e9b\u73af\u5883\u56e0\u7d20\uff0c\u5982\u7ef4\u751f\u7d20D\u6c34\u5e73\u548c\u5438\u70df\u4e60\u60ef\uff0c\u5df2\u7ecf\u5f97\u5230\u4e86\u5e7f\u6cdb\u7684\u7814\u7a76\uff0c\u4f46\u5f88\u5c11\u6709\u7814\u7a76\u96c6\u4e2d\u5728\u7a7a\u6c14\u6c61\u67d3\u7269\u4e0a\u3002\u5728\u98ce\u9669\u8f83\u9ad8\u7684\u5730\u533a\uff0c\u6211\u4eec\u73b0\u5728\u6b63\u5728\u8fdb\u884c\u5177\u4f53\u7684\u5206\u6790\u7814\u7a76\uff0c\u4ee5\u68c0\u67e5\u53ef\u80fd\u4e0e\u591a\u53d1\u6027\u786c\u5316\u75c7\u98ce\u9669\u5f02\u8d28\u6027\u5206\u5e03\u76f8\u5173\u7684\u591a\u79cd\u73af\u5883\u56e0\u7d20\u3002", "note_en": "May 22 (UPI) -- City-dwellers are nearly 30 percent more likely to be diagnosed with multiple sclerosis than those living in more rural areas, a study presented Friday at the European Academy of Neurology Virtual Congress has found.\n Based on the results, which will also be published in  European Journal of Neurology, air pollution could be a risk factor for the development of the disease, according to the authors, who conducted their research in Italy.\n &#34;It is well recognized that immune diseases such as MS are associated with multiple factors, both genetic and environmental,&#34; co-author Dr. Roberto Bergamaschi, of the IRCCS Mondino Foundation in Pavia, Italy, said in a statement.\n &#34;We believe that air pollution interacts through several mechanisms in the development of MS and the results of this study strengthen that hypothesis,&#34; he added.\n MS affects roughly 1 million Americans, according to estimates from the National MS Society. Research has determined that it is an autoimmune disorder in which the immune system attacks the protective sheath that covers the nerve fibers in the spinal cord, disrupting communication between the brain and the rest of the body.\n The vast majority of people with the disease have the relapsing-remitting, which is characterized by symptom &#34;flares&#34; or attacks. The disease most often is diagnosed in adults between 20 and 40 years old, and is more common in women.\n Symptoms vary in severity daily and can include fatigue, walking difficulty, numbness, pain and muscle spasms.\n For their study, Bergamaschi and his colleagues reviewed data on more than 900 people with MS in the Lombardy region of northwestern Italy. The area is home to nearly 550,000 people.\n In general, MS rates in the region have increased 10-fold in the past 50 years, from 16 cases per 100,000 residents in 1974 to almost 170 cases per 100,000 residents in 2020, the researchers found. In addition, they compared three different areas within the region based on their levels of &#34;urbanization.&#34;\n Two of the areas were found to be above the European Commission&#39;s threshold for air pollution as determined by levels of pollutants known as particulate matter, or PM, a term used to describe a mixture of solid particles and droplets in the air.\n PM is divided into two categories: PM10, which includes particles with a diameter of 10 micrometers or smaller, and PM2.5, which includes particles with a diameter of 2.5 micrometers or smaller.\n Both PM10 and PM2.5 are major pollutants and known to be linked to various health conditions, including heart and lung disease, cancer and respiratory problems, according to the World Health Organization.\n The researchers observed that those who live in rural areas, where lower levels of both types of PM existed, had a reduced risk for MS. Meanwhile, those living in urban areas, with more PM in the air, had a 29 percent higher risk for the disease.\n The authors emphasized that they conducted their study in winter, when air pollutant concentrations are highest.\n &#34;Some environmental factors, such as vitamin D levels and smoking habits, have been extensively studied, yet few studies have focused on air pollutants,&#34; Bergamaschi said. &#34;In the higher risk areas, we are now carrying out specific analytical studies to examine multiple environmental factors possibly related to the heterogeneous distribution of MS risk.&#34;", "posttime": "2020-05-25 07:48:28", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u53d1\u73b0,living,\u5730\u533a", "title": "\u7814\u7a76\u53d1\u73b0\uff0c\u5c45\u4f4f\u5728\u57ce\u5e02\u7684\u4eba\u60a3\u591a\u53d1\u6027\u786c\u5316\u75c7\u7684\u98ce\u9669\u9ad8\u51fa30%", "title_en": "Risk For MS 30% Higher For Those Living In Cities, Study Finds", "transed": 1, "url": "https://www.upi.com/Health_News/2020/05/22/Risk-for-MS-30-higher-for-those-living-in-cities-study-finds/4001590169593/?sl=1", "via": "", "real_tags": ["\u53d1\u73b0", "living", "\u5730\u533a"]}, {"category": "", "categoryclass": "", "imagename": "2c39a58e6e2ea51a224fb123cdef126f.jpg", "infoid": 1003577, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\uff0cFacebook\u6210\u4e3a\u8fdc\u7a0b\u5de5\u4f5c\u7684\u6700\u5927\u652f\u6301\u8005\u4e4b\u4e00\u3002\u5b83\u56e0\u8003\u8651\u5141\u8bb8\u4eba\u4eec\u6c38\u4e45\u5728\u5bb6\u5de5\u4f5c\u800c\u767b\u4e0a\u4e86\u5934\u6761\u3002\u5728\u8fd9\u6837\u505a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u52a0\u5165\u4e86Twitter\u3001Square\u548cShopify\u7b49\u516c\u53f8\u7684\u884c\u5217\uff0c\u8fd9\u4e9b\u516c\u53f8\u90fd\u662f\u6700\u8fd1\u5927\u6d41\u884c\u540e\u7684\u7688\u4f9d\u8005\u3002(\u5bf9\u4e8eGitLab\u548cAutomattic\u8fd9\u6837\u7684\u516c\u53f8\u6765\u8bf4\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u5e76\u4e0d\u662f\u4ec0\u4e48\u65b0\u9c9c\u4e8b\u3002)\u3002\n\u8fd9\u5c31\u662f\u624e\u514b\u4f2f\u683c\u89c9\u5f97\u6709\u5fc5\u8981\u8feb\u4f7f\u5458\u5de5\u642c\u5230\u79bb\u5e15\u6d1b\u963f\u5c14\u6258\u66f4\u8fd1\u7684\u5730\u65b9\u3002\u5c31\u662f\u90a3\u4e2a\u62b5\u5236\u65e7\u91d1\u5c71\u884c\u52a8\u7684\u4eba\u3002\u8fd9\u5bb6\u4f19\u7a81\u7136\u6210\u4e86\u201c\u5728\u5bb6\u5de5\u4f5c\uff1f\u201d\u4e3a\u4ec0\u4e48\u50cfFacebook\u8fd9\u6837\u7684\u516c\u53f8\u7ba1\u7406\u7406\u5ff5\u4f1a\u7a81\u7136\u8f6c\u53d8\uff1f\n\u8981\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ea\u9700\u8981\u9075\u5b88\u9ec4\u91d1\u6cd5\u5219\uff1a\u8ddf\u7740\u94b1\u8d70\u3002\n\u90a3\u4e9b\u8c6a\u534e\u7684\u529e\u516c\u5ba4\uff0c\u9910\u996e\u5348\u9910\uff0c\u4ee5\u53ca\u6240\u6709\u5176\u4ed6\u5962\u4f88\u54c1\uff0c\u8ba9\u4eba\u4eec\u53ef\u4ee5\u5047\u88c5\u81ea\u5df1\u8fd8\u5728\u4e0a\u5927\u5b66\uff0c\u5e76\u4e3a\u6b64\u83b7\u5f97\u62a5\u916c-\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u8981\u82b1\u94b1\u7684\u3002\u800c\u4e14\u8fd9\u4e9b\u6210\u672c\u8fd8\u5728\u4e0a\u5347\uff0c\u7279\u522b\u662f\u5728\u8be5\u5730\u533a\u623f\u5730\u4ea7\u5e02\u573a\u4ecd\u7136\u5403\u7d27\u7684\u60c5\u51b5\u4e0b\u3002\u5bf9\u4e8e\u8bd5\u56fe\u4e0e\u90bb\u5c45\u5e76\u9a7e\u9f50\u9a71\u7684\u96c7\u4e3b\u6765\u8bf4\uff0c\u65e7\u91d1\u5c71\u6e7e\u533a\u7684\u6bcf\u4f4d\u5458\u5de5\u6bcf\u5e74\u989d\u5916\u82b1\u8d392\u4e07\u81f33.5\u4e07\u7f8e\u5143\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u4f5c\u4e3a\u4e00\u5bb6\u516c\u53f8\u7684\u89c4\u6a21\u6709\u591a\u5927\u3002\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u90fd\u4f1a\u56de\u53bb\u5de5\u4f5c\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u50cfTwitter\u3001Square\u548cFacebook\u8fd9\u6837\u7684\u516c\u53f8\u5c06\u4e0d\u5f97\u4e0d\u5f7b\u5e95\u91cd\u65b0\u914d\u5907\u4ed6\u4eec\u7684\u529e\u516c\u5ba4\uff0c\u4ee5\u5bb9\u7eb3\u6240\u6709\u5458\u5de5\u5e76\u6ee1\u8db3\u6b63\u786e\u7684\u5065\u5eb7\u534f\u8bae\u3002\u8fd9\u5c06\u9700\u8981\u66f4\u591a\u7684\u623f\u5730\u4ea7\uff0c\u8fd9\u4e5f\u9700\u8981\u94b1-\u5f88\u591a\u94b1\u3002\u62e5\u6709\u7269\u7406\u7a7a\u95f4\u7684\u53e6\u4e00\u4e2a\u6311\u6218\u662f\u4e0e\u51a0\u72b6\u75c5\u6bd2\u76f8\u5173\u7684\u8bc9\u8bbc\u7684\u771f\u6b63\u5a01\u80c1\u3002\u6ca1\u6709\u4eba\u4f1a\u5927\u58f0\u8bf4\u51fa\u8fd9\u4e00\u70b9\uff0c\u4f46\u5728\u8fd9\u4e2a\u540e\u5927\u6d41\u884c\u65f6\u4ee3\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u771f\u6b63\u5185\u5316\u7269\u7406\u7a7a\u95f4\u7684\u8bc9\u8bbc\u98ce\u9669\u3002\n\u5982\u679c\u4f60\u5728\u5de5\u4f5c\u4e2d\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2\u600e\u4e48\u529e\uff1fGoodwin\u5408\u4f19\u4ebaTeresa Goebel\u544a\u8bc9The Skift\uff1a\u201c\u9996\u5148\uff0c\u8fd9\u91cc\u662f\u7f8e\u56fd\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u6709\u8bc9\u8bbc\u3002\u201d\u5979\u8bf4\u7684\u662f\u9152\u5e97\u4e1a\uff0c\u4f46\u5bf9\u4e2a\u4eba\u5b89\u5168\u7684\u671f\u671b\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u5199\u5b57\u697c\u3002\u829d\u52a0\u54e5\u5927\u5b66\u6cd5\u5b66\u9662\u52a9\u7406\u6559\u6388\u4e39\u5c3c\u5c14\u00b7\u6d77\u9ed8\u5c14(Daniel Hemel)\u548c\u897f\u5317\u5927\u5b66\u666e\u5229\u5179\u514b\u6cd5\u5b66\u9662(Northwest University\u2018s Pritzker School of Law)\u54c8\u7f57\u5fb7\u00b7\u534e\u76db\u987f(Harold Washington)\u6cd5\u5b66\u9662\u6559\u6388\u4e39\u5c3c\u5c14\u00b7\u7f57\u5fb7\u91cc\u683c\u65af(Daniel Rodriguez)\u5728\u4ed6\u4eec(\u5185\u5bb9\u7fd4\u5b9e\u4e14\u5fc5\u8bfb)\u7684\u7814\u7a76\u8bba\u6587\u201c\u51a0\u72b6\u75c5\u6bd2\u5546\u4e1a\u8d23\u4efb\u7684\u516c\u5171\u536b\u751f\u6846\u67b6\u201d(A Public Health Framework For CoronaVirus Business Responsibility)\u4e2d\u6982\u8ff0\u4e86\u7b49\u5f85\u6211\u4eec\u7684\u6cd5\u5f8b\u6ce5\u6f6d\u3002\n\u624e\u514b\u4f2f\u683c\u5728\u63a5\u53d7\u51ef\u897f\u00b7\u725b\u987f(Casey Newton)\u91c7\u8bbf\u65f6\u4f30\u8ba1\uff0c\u5927\u7ea6\u4e00\u534a\u7684\u5458\u5de5\u5c06\u91cd\u8fd4\u529e\u516c\u5ba4\uff0c\u56e0\u6b64\u8fd9\u5e76\u4e0d\u662f\u4e00\u573a\u5f7b\u5e95\u7684\u9769\u547d\u3002\u6628\u5929\uff0c\u5728\u4ed4\u7ec6\u7814\u7a76\u4e86\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c(Mark Zuckerberg)\u7684\u5a92\u4f53\u95ea\u7535\u6218\u4e4b\u540e\uff0c\u6211\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u6211\u4eec\u79d1\u6280\u4eba\u548c\u534e\u5c14\u8857\u4eba\u7684\u4e3b\u8981\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u5728\u8425\u9500\u6211\u4eec\u7684\u5e9f\u8bdd\u65b9\u9762\u505a\u5f97\u66f4\u597d\u3002\u7ebd\u7ea6\u7684\u94f6\u884c\u548c\u91d1\u878d\u673a\u6784\u8d1f\u8d23\u4eba\u975e\u5e38\u8bda\u5b9e\u5730\u8bf4\u660e\u4e86\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u8981\u62e5\u62b1\u201c\u5728\u5bb6\u5de5\u4f5c\u201d\u9769\u547d\u3002\n\u6469\u6839\u58eb\u4e39\u5229\u9996\u5e2d\u6267\u884c\u5b98\u8a79\u59c6\u65af\u00b7\u6208\u5c14\u66fc(James Gorman)\u5728\u63a5\u53d7\u5f6d\u535a\u793e(Bloomberg)\u91c7\u8bbf\u65f6\u8868\u793a\uff1a\u201c\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6ca1\u6709\u8db3\u8ff9\u7684\u60c5\u51b5\u4e0b\u8fd0\u8425\u3002\u201d\u201c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u544a\u8bc9\u4e86\u4f60\uff0c\u4eba\u4eec\u9700\u8981\u5728\u54ea\u91cc\u8fdb\u884c\u8eab\u4f53\u953b\u70bc\u3002\u201d\u6469\u6839\u5927\u901a(JP Morgan)\u3001\u5df4\u514b\u83b1(Barclays)\u548c\u5176\u4ed6\u94f6\u884c\u6b63\u5728\u91cd\u65b0\u8003\u8651\u662f\u5426\u9700\u8981\u6602\u8d35\u7684\u5927\u578b\u529e\u516c\u5ba4\u3002\u6216\u8005\u6b63\u5982\u5927\u6295\u8d44\u5bb6\u6c83\u4f26\u00b7\u5df4\u83f2\u7279\u6240\u8bf4\uff1a\u201c\u5f88\u591a\u4eba\u90fd\u77e5\u9053\u4ed6\u4eec\u53ef\u4ee5\u5728\u5bb6\u5de5\u4f5c\u3002\u201d\n\u5c3c\u5c14\u68ee\u9996\u5e2d\u6267\u884c\u5b98\u5927\u536b\u00b7\u80af\u5c3c(David Kenny)\u544a\u8bc9\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\uff0c\u201c\u5982\u679c\u4f60\u6765\u8fd9\u91cc\uff0c\u5728\u529e\u516c\u684c\u524d\u5de5\u4f5c\uff0c\u4f60\u5f53\u7136\u53ef\u4ee5\u5728\u5bb6\u5de5\u4f5c\u3002\u201d\u201c\u6211\u4eec\u6709\u5373\u5c06\u5230\u671f\u7684\u79df\u7ea6\uff0c\u8fd9\u7edd\u5bf9\u662f\u63a8\u52a8\u8fd9\u7c7b\u51b3\u5b9a\u7684\u539f\u56e0\u3002\u201d\u8be5\u516c\u53f8\u6b63\u5728\u8003\u8651\u5c06\u5176\u529e\u516c\u5ba4\u6539\u9020\u6210\u4e00\u4e2a\u4f1a\u8bae\u7a7a\u95f4\uff0c\u5458\u5de5\u4eec\u53ef\u80fd\u6bcf\u5468\u805a\u96c6\u5728\u4e00\u8d77\u4e00\u5230\u4e24\u6b21\u3002\n\u8fd9\u662f\u516c\u53f8\u5c06\u8fd0\u8425\u6210\u672c\u8f6c\u5ac1\u7ed9\u5458\u5de5\u7684\u5927\u597d\u673a\u4f1a\u3002\u79d1\u6280\u516c\u53f8\u4e5f\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u9664\u4e86\u4ed6\u4eec\u6709\u516c\u5173\u5927\u519b\u6765\u64e6\u4eae\u4ed6\u4eec\u7684\u7f8e\u5143-\u9996\u5148\u8003\u8651\u7684\u662f\u62ab\u7740\u610f\u8bc6\u5f62\u6001\u53d8\u9769\u7684\u5916\u8863\u3002\u5bf9\u4e8eFacebook\u548c\u65b0\u7684\u7688\u4f9d\u8005\u6765\u8bf4\uff0c\u5728\u5bb6\u5de5\u4f5c\u662f\u4e00\u5f20\u65e2\u597d\u53c8\u5bb9\u6613\u7684\u51fa\u72f1\u5361\u3002\u5b83\u4e0d\u4ec5\u514d\u9664\u4e86\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\uff0c\u800c\u4e14\u8fd8\u5c06\u201c\u8fd0\u8425\u8d39\u7528\u201d\u8f6c\u5ac1\u7ed9\u4e86\u5458\u5de5\u3002\n\u90a3\u4e48\uff0c\u4f60\u60f3\u4e3aFacebook\u8fdc\u7a0b\u5de5\u4f5c\u5417\uff1f\u592a\u68d2\u4e86\uff01\u4f60\u6240\u8981\u505a\u7684\u5c31\u662f\u5f04\u6e05\u695a\u4f60\u81ea\u5df1\u7684\u529e\u516c\u7a7a\u95f4(\u5c31\u50cf\u4f18\u6b65\u53f8\u673a\u8d1f\u8d23\u7ef4\u62a4\u4ed6\u4eec\u7684\u8f66\u8f86\u4e00\u6837)-\u54e6\uff0c\u76f8\u5bf9\u4e8e\u4f60\u7684\u540c\u4e8b\u5728\u79bb\u65e7\u91d1\u5c71\u6e7e\u533a\u66f4\u8fd1\u7684\u5730\u65b9\u751f\u6d3b\u548c\u5de5\u4f5c\uff0c\u4f60\u9700\u8981\u6ee1\u8db3\u4e8e\u85aa\u6c34\u66f4\u4f4e\u7684\u8981\u6c42\u3002\n\u5982\u679c\u4f60\u8db3\u591f\u6ce8\u610f\uff0c\u4f60\u5c31\u80fd\u770b\u5230\u672a\u6765\u3002\u4f60\u53ef\u4ee5\u5b66\u4e60\u3001\u9002\u5e94\u5e76\u51c6\u5907\u597d\u8fce\u63a5\u4e00\u4e2a\u7531\u79d1\u5b66\u6280\u672f\u91cd\u5851\u7684\u4e16\u754c\u3002\u6211(\u51e0\u4e4e)\u6bcf\u5468\u7684\u65f6\u4e8b\u901a\u8baf\u90fd\u805a\u7126\u4e8e\u672a\u6765--\u51c6\u786e\u5730\u8bf4\uff0c\u662f\u4e0d\u4e45\u7684\u5c06\u6765\u3002(\u9605\u8bfb\u66f4\u591a\u5185\u5bb9)", "note_en": "This past week Facebook became one of the largest proponents of remote work. It made headlines for considering allowing people to permanently work from home. In doing so, it joined the likes of Twitter, Square, and Shopify, all of whom are recent, post-pandemic converts. (The idea is not so new to companies like GitLab and Automattic.)\n This is the same Zuckerberg who felt compelled to force employees to move closer to Palo Alto. The one who resisted the idea of a San Francisco operation. This guy is suddenly the poster child of \u201cworking from home?\u201d Why this abrupt shift in the management philosophy of companies like Facebook?\n To answer this question, you need only to abide by the golden rule: follow the money.\n Those fancy offices, catered lunches, and all the other luxuries that allow people to pretend that they are still in college and getting paid for it \u2014 that all costs money. And those costs were going higher, especially as the real estate market remained tight in the region. For employers trying to keep up with the Joneses, each employee in the San Francisco Bay Area costs an extra $20,000 to $35,000 per year, depending on how big you are as a company.\n Now, let\u2019s assume we all go back to work in the near future. In order to do so, companies like Twitter, Square, and Facebook would have to completely re-tool their offices to accommodate all their employees and meet the right health protocols. And that will require more real estate, which also costs money \u2014 a lot of it. The other challenge of having physical spaces is the very real threat of COVID-19-related lawsuits. No one will say this out loud, but we have not really internalized the litigation risks of physical space in this post-pandemic era.\n What if you get COVID-19 at work? \u201cFirst of all, this is the United States, so there will be litigation, no matter what,\u201d Goodwin partner Teresa Goebel told  the Skift. She was talking about the hotel industry, but the same expectation of personal safety will be applicable to offices as well. In their (informative and must-read) research paper, \u201cA Public Health Framework for COVID-19 Business Liability,\u201d Daniel Hemel, an assistant professor at the University of Chicago Law School, and Daniel Rodriguez, the Harold Washington Professor of Law at Northwestern University\u2019s Pritzker School of Law, outline the legal quagmire that awaits us.\n In his interview with Casey Newton, Zuckerberg guesstimated that about half of the workforce would return to the office, so this isn\u2019t a total revolution. After plowing through Mark Zuckerberg\u2019s media blitz yesterday, I came to the conclusion that the main difference between us technology people and those on Wall Street is that we do a better job of marketing our bullshit. The New York banks and financial organization chiefs are being pretty honest about why they are embracing the \u201cwork from home\u201d revolution.\n \u201cWe\u2019ve proven we can operate with no footprint,\u201d said James Gorman, Morgan Stanley\u2019s chief executive officer,  in an interview with Bloomberg. \u201cThat tells you an enormous amount about where people need to be physical.\u201d JP Morgan, Barclays, and others are rethinking whether they even need big expensive offices. Or as mega-investor Warren Buffet said, \u201cA lot of people have learned that they can work at home.\u201d\n \u201cIf you are coming and working at your desk, you certainly could do that from home,\u201d David Kenny, the chief executive at Nielsen told the  New York Times. \u201cWe have leases that are coming due, and it\u2019s absolutely driving those kinds of decisions.\u2019\u2019 The company is thinking about turning its offices into a meeting space where workers gather maybe once or twice a week.\n This is a great opportunity for companies to shift the costs of operations to employees. And technology companies are no different, except they have public relations armies to polish up their dollars-first thinking with the veneer of ideological transformation. Working from home is a good and easy get out of jail card for Facebook and the new converts. It not only removes any legal liabilities, but it also shifts the \u201coperational expenses\u201d to the employee.\n So, you want to work remotely for Facebook? Great! All you have to do is figure out your own office space (much like how an Uber driver is responsible for the upkeep of their vehicle) \u2014 oh, and settle for less money relative to your colleagues living and working closer to the Bay Area.\n   If you pay enough attention, you can see the future. You can learn, adapt, and be ready for a world reshaped by science and technology. My (almost) weekly newsletter is focused on the future \u2014 the Near Future, to be precise. ( read more)", "posttime": "2020-05-25 07:47:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8fdc\u7a0b\u5de5\u4f5c,\u5de8\u5934,tech", "title": "\u79d1\u6280\u5de8\u5934\u62e5\u62b1\u201c\u8fdc\u7a0b\u5de5\u4f5c\u201d\u7684\u771f\u6b63\u539f\u56e0", "title_en": "Real why tech giants are hugging \u201cRemote Work\u201d", "transed": 1, "url": "https://om.co/2020/05/23/real-reasons-why-tech-giants-are-hugging-remote-work/", "via": "", "real_tags": ["\u8fdc\u7a0b\u5de5\u4f5c", "\u5de8\u5934", "tech"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003576, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6709\u4e00\u4e2a\u670b\u53cb\u5b8c\u5168\u6c89\u8ff7\u4e8e\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u7684\u72c2\u70ed\u5d07\u62dc\uff0c\u6211\u6b63\u8bd5\u56fe\u8bf4\u670d\u4ed6\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\u3002\n\u5c3d\u7ba1\u6709\u4f20\u8a00\u79f0\u9a6c\u65af\u514b\u662f\u4e00\u4e2a\u767d\u624b\u8d77\u5bb6\u7684\u75af\u72c2\u79d1\u5b66\u5bb6\u5929\u624d\uff0c\u4f46\u4ed6\u51fa\u751f\u5728\u4e00\u4e2a\u5bcc\u6709\u7684\u5357\u975e\u767d\u4eba\u5bb6\u5ead\uff0c\u4ed6\u7684\u7236\u4eb2\u62e5\u6709\u7fe1\u7fe0\u77ff\u3002\u4ed6\u7684\u8d22\u5bcc\u4e0d\u662f\u6765\u81ea\u79d1\u5b66\u53d1\u73b0\u6216\u521b\u65b0\uff0c\u800c\u662f\u6765\u81ea\u4ed6\u7684\u7236\u4eb2\u4e3a\u4ed6\u7684\u7b2c\u4e00\u6b21\u5546\u4e1a\u5192\u9669\u63d0\u4f9b\u8d44\u91d1\uff0c\u4ee5\u53ca\u4e70\u5356\u8d1d\u5b9d(PayPal)\u3001SolarCity\u3001SpaceX\u548c\u7279\u65af\u62c9(Tesla)\u7b49\u516c\u53f8\u3002\n\u5c3d\u7ba1\u4ed6\u88ab\u8a89\u4e3a\u5e94\u5bf9\u6c14\u5019\u53d8\u5316\u7684\u9886\u5bfc\u8005\uff0c\u4f46\u4ed6\u5411\u5171\u548c\u515a\u4eba\u7684\u6350\u6b3e\u589e\u52a0\u4e867\u500d\u3002\u4e00\u4f4d\u7834\u574f\u5de5\u4f1a\u7684\u8d44\u672c\u5bb6\u5411\u5171\u548c\u515a\u5927\u91cf\u6350\u6b3e\uff0c\u8fd9\u6709\u4ec0\u4e48\u4ee4\u4eba\u60ca\u8bb6\u7684\u5417\uff1f\n\u9a6c\u65af\u514b\u5229\u7528\u56fd\u9645\u5371\u673a\u62ac\u9ad8\u7279\u65af\u62c9\u7684\u80a1\u4ef7\u3002\u6709\u4e00\u6b21\uff0c\u5728\u6ce2\u591a\u9ece\u5404\u7535\u7f51\u88ab\u98d3\u98ce\u739b\u4e3d\u4e9a\u6467\u6bc1\u540e\uff0c\u9a6c\u65af\u514b\u627f\u8bfa\u4fee\u590d\u7535\u7f51\u3002\u4ed6\u5c06\u592a\u9633\u80fd\u7535\u6c60\u677f\u90e8\u7f72\u5230\u4e00\u5bb6\u533b\u9662\uff0c\u6570\u5341\u7bc7\u65b0\u95fb\u6587\u7ae0\u90fd\u5728\u62a5\u9053\u8fd9\u4e00\u51b3\u5b9a\u7684\u5546\u4e1a\u5934\u8111\uff0c\u80a1\u4ef7\u98d9\u5347\u3002\u516c\u5173\u4ee3\u8868\u544a\u8bc9\u9a6c\u65af\u514b\uff0c\u4ed6\u4eec\u4e0d\u5e0c\u671b\u4ed6\u4eec\u7684\u7535\u7f51\u88ab\u4ebf\u4e07\u5bcc\u7fc1\u79c1\u6709\u5316\u3002\n\u4f5c\u4e3a\u4e00\u79cd\u516c\u5173\u5671\u5934\uff0c\u9a6c\u65af\u514b\u627f\u8bfa\u5efa\u9020\u4e00\u8258\u8ff7\u4f60\u6f5c\u8247\uff0c\u4ee5\u8425\u65512018\u5e74\u88ab\u56f0\u5728\u6cf0\u56fd\u6d1e\u7a74\u4e2d\u7684\u4e00\u652f\u7537\u5b50\u8db3\u7403\u961f\u3002\u5728\u6536\u5230\u6cf0\u56fd\u548c\u6551\u63f4\u754c\u7684\u5c16\u523b\u6279\u8bc4\u540e\uff0c\u9a6c\u65af\u514b\u6253\u7535\u8bdd\u7ed9\u5176\u4e2d\u4e00\u540d\u6d1e\u7a74\u6551\u63f4\u4eba\u5458\uff0c\u4e00\u4e2a\u604b\u7ae5\u7656\u8005\uff0c2\u3002\u5728\u6551\u63f4\u4eba\u5458\u8d77\u8bc9\u9a6c\u65af\u514b\u8bfd\u8c24\u540e\uff0c\u9a6c\u65af\u514b\u4ed8\u7ed9\u4e00\u540d\u79c1\u5bb6\u4fa6\u63a2(\u4e5f\u662f\u524d\u91cd\u5211\u72af)5\u4e07\u7f8e\u5143\uff0c\u8ba9\u4ed6\u6316\u51fa\u6551\u63f4\u8005\u7684\u6c61\u70b9\uff0c\u5e76\u88ab\u544a\u77e5\u4f7f\u7528\u5484\u5484\u903c\u4eba\u7684\u6218\u672f\u3002\u9a6c\u65af\u514b\u7684\u56e2\u961f\u968f\u540e\u544a\u8bc9\u8c03\u67e5\u4eba\u5458\uff1a\u201c\u6211\u4eec\u5e0c\u671b\u4f60\u4eec\u7acb\u5373\u5411\u82f1\u56fd\u5a92\u4f53\u2018\u6cc4\u9732\u2019\u8fd9\u4e00\u4fe1\u606f\u3002\u663e\u7136\u5fc5\u987b\u975e\u5e38\u5c0f\u5fc3\u5730\u53bb\u505a\u3002\u201c\u3002\u9a6c\u65af\u514b\u548c\u4ed6\u7684\u56e2\u961f\u751a\u81f3\u6e38\u8bf4\u6cf0\u56fd\u653f\u5e9c\u548c\u603b\u7406\u8ba9\u4e00\u540d\u5f53\u5730\u5b98\u5458\u5728\u5b69\u5b50\u4eec\u83b7\u6551\u4e4b\u524d\u63a8\u7ffb\u4e86\u4e00\u4efd\u58f0\u660e\uff0c\u8be5\u58f0\u660e\u79f0\u8ff7\u4f60\u6f5c\u8247\u4e0d\u5207\u5b9e\u9645\u3002\n\u8ffd\u67e5\u544a\u5bc6\u8005\uff0c\u5305\u62ec\u6d3e\u8b66\u5bdf\u8ffd\u6355\u9a6c\u4e01\u00b7\u7279\u91cc\u666e(\u4ed6\u5411\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a\u62a5\u544a\u4e86\u7279\u65af\u62c9\u7684\u6b3a\u8bc8\u6d3b\u52a8)\uff0c\u9a6c\u65af\u514b\u58f0\u79f0\u4ed6\u662f\u4e00\u540d\u6d3b\u8dc3\u7684\u67aa\u624b\u3002\u8ffd\u67e5\u51e0\u540d\u6279\u8bc4\u4ed6\u7684\u8bb0\u8005\u30022019\u5e7411\u6708\u6bb4\u6253\u8b66\u65b9\u62a5\u544a\u7684\u63a8\u7279\u5e16\u5b50\uff0c\u4ee5\u53ca\u9a6c\u65af\u514b\u9488\u5bf9\u7684\u90a3\u4e9b\u3002\n2\u7ea7\u6cbf\u7740\u4e0e\u98d3\u98ce\u739b\u4e3d\u4e9a\u76f8\u540c\u7684\u8def\u7ebf\uff0c\u6cf0\u56fd\u6d1e\u7a74\u6551\u63f4\u548c\u901a\u98ce\u673a\u516c\u5173\u7279\u6280\uff0c\u4ed6\u8fd8\u58f0\u79f0\u4ed6\u5c06\u89e3\u51b3\u5f17\u6797\u7279\u7684\u6c34\u5371\u673a\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u6574\u4ef6\u4e8b\u53ea\u662f\u4e3a\u4e86\u633d\u56de\u9762\u5b50\uff0c\u56e0\u4e3a\u4ed6\u5728\u516c\u5f00\u573a\u5408\u5bf9\u6d1e\u7a74\u6551\u63f4\u8005\u7684\u6001\u5ea6\u5d29\u6e83\u4e86\u3002\u4ed6\u7684\u539f\u8bdd\u662f\u201c\u8bf7\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u627f\u8bfa\uff0c\u6211\u5c06\u8d44\u52a9\u4fee\u590d\u5f17\u6797\u7279\u4efb\u4f55\u6c34\u6c61\u67d3\u8d85\u8fc7FDA\u6c34\u5e73\u7684\u623f\u5b50\u7684\u6c34\u3002\u4e0d\u662f\u5f00\u73a9\u7b11\u3002\u5728\u72b9\u8c6b\u4e86\u4e00\u4f1a\u513f\u4e4b\u540e\uff0c\u4ed6\u6700\u7ec8\u82b1\u4e86\u4e0d\u523050\u4e07\u7f8e\u5143\u4e3a\u4ed6\u4eec\u5b66\u6821\u7684\u996e\u6c34\u673a\u4e70\u8fc7\u6ee4\u5668\u3002\u6211\u5728\u624b\u673a\u4e0a\u4f7f\u7528\uff0c\u6240\u4ee5\u683c\u5f0f\u5316\u94fe\u63a5\u5f88\u9ebb\u70e6\uff0c\u4f46\u6211\u80fd\u591f\u627e\u5230\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\uff0c\u4ee5\u4fbf\u8fdb\u884c\u4e8b\u5b9e\u6838\u67e5\uff0c\u53ea\u9700\u5feb\u901f\u641c\u7d22\u4e00\u4e0b\u57c3\u9686\u00b7\u7a46\u65af\u514b\u00b7\u5f17\u6797\u7279(Elon Musk Flint)\u5c31\u53ef\u4ee5\u4e86\u3002\n\u7ea7\u522b2I&39\uff1b\u6211\u521a\u521a\u5728Google\u6587\u6863\u4e2d\u8bb0\u5f55\u4e86\u8fd9\u4e00\u70b9\uff0c\u4ee5\u6210\u4e3a\u6211\u53ef\u4ee5\u5171\u4eab\u7684\u6d3b\u6587\u6863\n\u7b2c\u4e8c\u7ea7\uff0c\u5e94\u8be5\u77e5\u9053\u592a\u9633\u80fd\u548c\u7535\u6c60\u5e76\u4e0d\u662f\u89e3\u51b3\u78b3\u6392\u653e\u95ee\u9898\u7684\u6b63\u786e\u7981\u5fcc\u3002\n2\u7ea7\u8c22\u8c22\uff01\u50cf\u8fd9\u6837\u5e7f\u6cdb\u7684\u3001\u6765\u6e90\u5e7f\u6cdb\u7684\u5217\u8868\u603b\u662f\u6700\u597d\u5730\u663e\u793a\u7a0b\u5ea6\uff0c\u800c\u4e14\u8fd9\u4e0d\u662f\u5f53\u573a\u7f16\u9020\u7684\u4e1c\u897f-\u6b63\u662f\u6211\u6b63\u5728\u5bfb\u627e\u7684\u3002\n\u5173\u4e8e\u58f0\u79f0\u9a6c\u4e01\u00b7\u7279\u91cc\u666e\u662f\u4e00\u540d\u6d3b\u8dc3\u7684\u5c04\u624b\u7684\u7b2c\u4e8c\u7ea7\uff0c\u6bd4\u5e95\u90e8\u9ad8\u51fa\u4e00\u540d\u56db\u5206\uff0c\u8fd9\u662f\u4ed6\u5988\u7684\u641e\u7838\u4e86\u3002\u6211\u4eec\u77e5\u9053\u7f8e\u56fd\u8b66\u5bdf\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u8fd9\u57fa\u672c\u4e0a\u662f\u8c0b\u6740\u672a\u9042\u3002\n2\u7ea7\u522b\u5fd8\u4e86\u4ed6\u5988\u7684\u96c6\u7fa4\uff0c\u90a3\u5c31\u662f\u7ebd\u7ea6\u5dde\u5e03\u6cd5\u7f57\u7684\u592a\u9633\u80fd\u5de5\u5382\u3002\u5dde/\u53bf\u5411\u7279\u65af\u62c9\u7684\u4e00\u5bb6\u5de5\u5382\u503e\u5012\u4e86\u6570\u767e\u4e07\u7f8e\u5143\uff0c\u9a6c\u65af\u514b\u57fa\u672c\u4e0a\u5df2\u7ecf\u538c\u5026\u4e86\uff0c\u5f00\u59cb\u4e86\u65b0\u7684\u751f\u6d3b\u3002\u4ed6\u4e0d\u518d\u770b\u5230\u4ed6\u8fbe\u6210\u7684\u4ea4\u6613\u4e2d\u7684\u4ef7\u503c\uff0c\u73b0\u5728\u5dde\u653f\u5e9c\u82b1\u6389\u4e86\u6570\u4ebf\u7f8e\u5143\u6765\u5efa\u9020\u4e00\u5bb6\u57fa\u672c\u4e0a\u53ea\u6709\u51e0\u767e\u540d\u5458\u5de5\u7684\u5de5\u5382\u3002\u6211\u5df2\u7ecf\u6709\u4e00\u5e74\u5de6\u53f3\u6ca1\u6709\u68c0\u67e5\u8fc7\u5b83\u7684\u73b0\u72b6\u4e86\uff0c\u4f46\u4e0a\u6b21\u6211\u68c0\u67e5\u4e86\u4e00\u4e0b\uff0c\u5b83\u4eec\u4ecd\u7136\u6709\u5f88\u5927\u7684\u95ee\u9898\u3002\n\u7b2c\u4e00\u7ea7\uff0c\u4ed6\u4ee5\u5265\u524a\u5de5\u4eba\u800c\u95fb\u540d\uff0c\u6240\u6709\u7684\u8363\u8a89\u90fd\u5f52\u529f\u4e8e\u4ed6\uff0c\u65e0\u8bba\u662f\u8c01\u5b9e\u9645\u505a\u4e86\u8fd9\u9879\u5de5\u4f5c\u3002\n\u4e0d\u8981\u7ea0\u7ed3\u4e8e\u597d\u7684\u4ebf\u4e07\u5bcc\u7fc1\u548c\u574f\u7684\u4ebf\u4e07\u5bcc\u7fc1\uff0c\u8fd9\u662f\u81ea\u7531\u601d\u60f3\u3002\u5c55\u793a\u8fd9\u4e2a\u7cfb\u7edf\u672c\u8eab\u662f\u5982\u4f55\u4ea7\u751f\u6211\u4eec\u793e\u4f1a\u7684\u5de8\u5927\u95ee\u9898\u7684\u3002\n\u7b2c\u4e8c\u5c42\u5982\u679c\u4f60\u5728\u548c\u81ea\u7531\u6d3e\u4eba\u58eb\u4ea4\u8c08\uff0c\u90a3\u4e48\u7528\u4ed6\u4eec\u81ea\u5df1\u7684\u8bdd\u6765\u8bf4\u5f88\u91cd\u8981\uff0c\u7279\u522b\u662f\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\uff0c\u56e0\u4e3a\u5f53\u4ed6\u4eec\u8c08\u5230\u4f18\u79c0\u7684\u4ebf\u4e07\u5bcc\u7fc1\u65f6\uff0c\u53ea\u63d0\u5230\u4e24\u4e2a\u4ebf\u4e07\u5bcc\u7fc1\uff0c\u90a3\u5c31\u662f\u6bd4\u5c14\u00b7\u76d6\u8328\u548c\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u3002\u4e00\u65e6\u4f60\u6d88\u9664\u4e86\u5373\u4f7f\u662f\u4ed6\u4eec\u4e5f\u4e0d\u662f\u597d\u4eba\u7684\u89c2\u5ff5\uff0c\u8fd9\u5c31\u4e3a\u4e0b\u4e00\u6b65\u7684\u8ba8\u8bba\u505a\u597d\u4e86\u51c6\u5907\uff0c\u5373\u5982\u679c\u4ed6\u4eec\u7684\u884c\u4e3a\u5b8c\u5168\u7b26\u5408\u9053\u5fb7\u89c4\u8303\uff0c\u4ed6\u4eec\u5c31\u4e0d\u4f1a\u6210\u4e3a\u4ebf\u4e07\u5bcc\u7fc1\u3002\n\u7b2c\u4e00\u7ea7\uff0c\u4ed6\u6709\u8db3\u591f\u7684\u94b1\u6765\u7ed3\u675f\u4e16\u754c\u9965\u997f\uff0c\u540c\u65f6\u4ecd\u7136\u662f\u4e00\u4e2a\u4ebf\u4e07\u5bcc\u7fc1\u2026\u3002\u4f46\u4e0d\u662f\u8fd9\u6837\u7684", "note_en": "I have a friend totally absorbed in the Elon Musk cult, and I&#39;m trying to convince him otherwise.\n    level 1  Despite rumours of Musk being a self-made mad scientist genius, he was born into a wealthy white South African family, and his  father owns Emerald mines. His wealth comes not from scientific discovery or innovation, but from his father funding his first business ventures, and from buying and selling companies such as PayPal, SolarCity, SpaceX, and Tesla.\n Despite being hailed as a leader in the fight against climate change, he donates 7x more money to Republicans. Is it any surprise that a union-busting capitalist donated heavily to the Republican Party?\n Musk takes advantage of international crises to raise Tesla&#39;s stock price. In one case,  Musk promised to &#34;fix&#34; Puerto Rico&#39;s power grid after it was decimated by Hurricane Maria. He deploys solar panels to a hospital, dozens of  news articles were written about the  business-saviness of this decision, and the stock price soared. PR reps told Musk they don&#39;t want their power grid privatized by billionaries.\n As a PR stunt, Musk promised to build a mini-submarine to rescue a boys soccer team that got trapped in a Thai cave in 2018. After receiving vitriol from the Thai and rescue community,  Musk called one of the cave rescuers, a pedophile, 2. After the rescuer sues Musk for defamation, Musk pays 50k to a private investigator (and former felon),  to dig up dirt on the rescuer., and was told to use &#34;aggressive tactics&#34;. Musk&#39;s team then told the investigator: \u201cWe would like you to immediately move forward with \u2018leaking\u2019 this information to the UK press. Obviously must be done very carefully.\u201d  Musk and his team even lobbied the Thai gov and prime minister to get a local official to reverse a statement saying the mini-submarine wasn&#39;t practical, before the children had been rescued.\n Goes after whistleblowers, including sending the police after  Martin Tripp ( who reported on Tesla&#39;s fraudulent activities to the SEC ), who Musk claimed was an  active shooter. Goes after several journalists who criticized him.  A twitter thread of the Nov 2019 swatting police report, and those targeted by Musk.\n level 2  Along the same lines as the Hurricane Maria, Thai cave rescue and ventilator PR stunts he also claimed he would fix Flint&#39;s water crisis. In fact that entire thing was just an attempt to save face after his public meltdown toward the cave rescuer. His exact words were \u201cPlease consider this a commitment that I will fund fixing the water in any house in\u00a0Flint that has water contamination above FDA levels. No kidding.&#34; After hemming and hawing for a while he eventually spent under half a million dollars on filters for their school drinking fountains. I&#39;m on mobile so formatting links is a pain but I was able to find all this info for fact checking purposes w a quick search for &#34;Elon musk Flint&#34;\n  level 2  I&#39;ve just documented this in a Google doc to become a living document that I can share around\n  level 2  It should be known solar and batteries is not the correct proscription for tackling carbon emissions.\n  level 2  Thank you! Extensive, sourced lists like this are always best to show the extent and that this isn&#39;t something made up on the spot- exactly what I was looking for.\n level 2  That one four above the bottom, about claiming Martin Tripp was an active shooter is fucked up. We know how American police are, that\u2019s basically an attempted murder.\n    level 2  Don&#39;t forget the cluster fuck that is the Solar Plant in Buffalo, NY. The State/County dumped millions into a Plant for Tesla and Musk has essentially gotten bored and moved on. He stopped seeing the value in the deal he made and now the state is out hundreds of millions of dollars for a plant that employs a few hundred people essentially. I haven&#39;t checked on it&#39;s current state for a year or so but last I checked they were still having gigantic problems\n    level 1  He is known for exploiting his workers, and all credit goes to him, regardless of who actually did the work.\n level 1  Don&#39;t get caught up in good vs bad billionaires that is liberal thinking . Show how the system by itself produces the great problems of our societies.\n  level 2  If you&#39;re talking to liberals, then it&#39;s important to talk in their own terms, especially on this because there are only 2 billionaires that they refer to when they talk about &#34;good&#34; billionaires, and that&#39;s Bill Gates and Elon Musk. As soon as you dispel the notion that even  they aren&#39;t good, it primes them for the next step in the discussion, that they wouldn&#39;t be billionaires if they acted completely ethically\n  level 1  He has enough money to end world hunger and still be a Billionaire... but doesnt", "posttime": "2020-05-25 07:30:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57c3\u9686\u00b7\u9a6c\u65af\u514b,\u57c3\u9686,elon,\u9a6c\u65af\u514b", "title": "\u201c\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u6709\u4ec0\u4e48\u4e0d\u597d\u7684\uff1f\u201d", "title_en": "\u201cWhat's so bad about Elon Musk?\u201d", "transed": 1, "url": "https://www.reddit.com/r/communism101/comments/fve4h3/how_can_i_convince_someone_elon_musk_is_not_the/", "via": "", "real_tags": ["\u57c3\u9686\u00b7\u9a6c\u65af\u514b", "\u57c3\u9686", "elon", "\u9a6c\u65af\u514b"]}, {"category": "", "categoryclass": "", "imagename": "b7d0c144fb7edbaca9cf58050ae41ce6.jpeg", "infoid": 1003575, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ebd\u7ea6(\u7f8e\u8054\u793e)-\u6839\u636e\u7f8e\u8054\u793e(The Associated Press)\u7684\u4e00\u9879\u7edf\u8ba1\uff0c\u6839\u636e\u4e00\u9879\u6709\u4e89\u8bae\u7684\u5dde\u6307\u4ee4\uff0c\u8d85\u8fc74500\u540d\u6b63\u5728\u5eb7\u590d\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u88ab\u9001\u5f80\u7ebd\u7ea6\u672c\u5df2\u8106\u5f31\u7684\u7597\u517b\u9662\uff0c\u7531\u4e8e\u6709\u4eba\u6279\u8bc4\u8be5\u6307\u4ee4\u52a0\u901f\u4e86\u7f8e\u56fd\u6700\u81f4\u547d\u7684\u75ab\u60c5\u7206\u53d1\uff0c\u8be5\u6307\u4ee4\u6700\u7ec8\u88ab\u5e9f\u9664\u3002\n\u5728\u7ebd\u7ea6\u536b\u751f\u90e8\u62d2\u7edd\u516c\u5e03\u4e24\u5468\u524d\u8fdb\u884c\u7684\u5185\u90e8\u8c03\u67e5\u540e\uff0c\u7f8e\u8054\u793e\u81ea\u5df1\u7f16\u5236\u4e86\u7edf\u8ba1\u6570\u636e\uff0c\u4ee5\u4e86\u89e3\u6839\u636e3\u670825\u65e5\u7684\u6307\u4ee4\uff0c\u6709\u591a\u5c11\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u4ece\u533b\u9662\u51fa\u9662\u5230\u7597\u517b\u9662\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u4ecd\u5728\u6838\u5b9e\u4e0d\u5b8c\u6574\u7684\u6570\u636e\u3002\n\u65e0\u8bba\u603b\u6570\u662f\u591a\u5c11\uff0c\u7597\u517b\u9662\u7ba1\u7406\u4eba\u5458\u3001\u5c45\u6c11\u6743\u76ca\u5021\u5bfc\u8005\u548c\u4eb2\u5c5e\u90fd\u8868\u793a\uff0c\u8fd9\u7ed9\u7597\u517b\u9662\u8bbe\u65bd\u5e26\u6765\u4e86\u4e00\u4e2a\u65e0\u6cd5\u8fa9\u89e3\u7684\u5927\u95ee\u9898\uff0c\u5c31\u8fde\u5dde\u957f\u5b89\u5fb7\u9c81\u00b7\u79d1\u83ab(Andrew Cuomo)--\u8be5\u653f\u7b56\u7684\u4e3b\u8981\u652f\u6301\u8005--\u4e5f\u79f0\u8fd9\u4e9b\u8bbe\u65bd\u662f\u201c\u8fd9\u79cd\u75c5\u6bd2\u7684\u6700\u4f73\u6ecb\u517b\u5730\u201d\u3002\n\u4e39\u5c3c\u5c14\u00b7\u963f\u6bd4\u5c3c(Daniel Arbeeny)\u5728\u8c08\u5230\u8fd9\u9879\u6307\u4ee4\u65f6\u8bf4\uff0c\u201c\u5982\u679c\u4ed6\u4eec\u60f3\u6740\u4eba\uff0c\u8fd9\u662f\u4efb\u4f55\u4eba\u90fd\u80fd\u505a\u51fa\u7684\u6700\u611a\u8822\u7684\u51b3\u5b9a\u3002\u201d\u8be5\u6307\u4ee4\u4fc3\u4f7f\u4ed6\u5c0688\u5c81\u7684\u7236\u4eb2\u4ece\u5e03\u9c81\u514b\u6797\u7684\u4e00\u5bb6\u7597\u517b\u9662\u62c9\u51fa\u6765\uff0c\u90a3\u91cc\u5df2\u670950\u591a\u4eba\u6b7b\u4ea1\u3002\u4ed6\u7684\u7236\u4eb2\u540e\u6765\u5728\u5bb6\u4e2d\u6b7b\u4e8e\u51a0\u72b6\u75c5\u6bd2\u3002\n\u201c\u8fd9\u4e0d\u662f\u706b\u7bad\u79d1\u5b66\uff0c\u201d\u963f\u6bd4\u5c3c\u8bf4\u3002\u201c\u6211\u4eec\u77e5\u9053\u6700\u8106\u5f31\u7684\u4eba--\u8001\u5e74\u4eba\u548c\u53d7\u5f71\u54cd\u7684\u4eba--\u4f4f\u5728\u7597\u517b\u9662\u548c\u5eb7\u590d\u4e2d\u5fc3\u3002\u201d\n\u5728\u5f97\u77e5\u7f8e\u8054\u793e\u7684\u7edf\u8ba1\u6570\u636e\u540e\uff0c\u536b\u751f\u90e8\u5468\u56db\u665a\u4e9b\u65f6\u5019\u8868\u793a\uff0c\u5b83\u201c\u4e0d\u80fd\u5bf9\u6211\u4eec\u6ca1\u6709\u673a\u4f1a\u5ba1\u67e5\u7684\u6570\u636e\u53d1\u8868\u8bc4\u8bba\uff0c\u7279\u522b\u662f\u5728\u6211\u4eec\u4ecd\u5728\u9a8c\u8bc1\u6211\u4eec\u81ea\u5df1\u5bf9\u7597\u517b\u9662\u5165\u9662\u548c\u91cd\u65b0\u5165\u9662\u6570\u636e\u7684\u5168\u9762\u8c03\u67e5\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6b63\u5728\u5e94\u5bf9\u8fd9\u573a\u5168\u7403\u5927\u6d41\u884c\u3002\u201d\n\u6c11\u4e3b\u515a\u4ebaCuomo\u4e8e5\u670810\u65e5\u63a8\u7ffb\u4e86\u8fd9\u4e00\u6307\u4ee4\uff0c\u8be5\u6307\u4ee4\u65e8\u5728\u5e2e\u52a9\u5728\u75c5\u4f8b\u6fc0\u589e\u65f6\u4e3a\u75c5\u60c5\u6700\u4e25\u91cd\u7684\u60a3\u8005\u817e\u51fa\u75c5\u5e8a\u3002\u4f46\u672c\u5468\u4ed6\u7ee7\u7eed\u4e3a\u5176\u8fa9\u62a4\uff0c\u79f0\u4ed6\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u5bfc\u81f4\u7ebd\u7ea65800\u591a\u540d\u62a4\u7406\u548c\u6210\u4eba\u62a4\u7406\u673a\u6784\u6b7b\u4ea1\u7684\u539f\u56e0-\u6bd4\u5176\u4ed6\u4efb\u4f55\u4e00\u4e2a\u5dde\u90fd\u591a-\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u5bb6\u5ead\u5e94\u8be5\u76f4\u8a00\u4e0d\u8bb3\u3002\n\u201c\u4efb\u4f55\u7597\u517b\u9662\u90fd\u53ef\u4ee5\u53ea\u8bf4\uff0c\u2018\u6211\u4e0d\u80fd\u5728\u6211\u7684\u8bbe\u65bd\u91cc\u5904\u7406COVID\u4eba\u5458\uff0c\u2019\u201d\u4ed6\u8bf4\uff0c\u5c3d\u7ba13\u670825\u65e5\u7684\u547d\u4ee4\u6ca1\u6709\u5177\u4f53\u8bf4\u660e\u5bb6\u5ead\u5982\u4f55\u62d2\u7edd\uff0c\u4ed6\u8bf4\uff0c\u201c\u4efb\u4f55\u5c45\u6c11\u90fd\u4e0d\u80fd\u4ec5\u4ec5\u56e0\u4e3a\u786e\u8ba4\u6216\u6000\u7591\u5b58\u5728\u51a0\u72b6\u75c5\u6bd2\u800c\u88ab\u62d2\u7edd\u91cd\u65b0\u5165\u9662\u6216\u8fdb\u5165(\u7597\u517b\u9662)\u201d\u3002\n\u4e00\u4e2a\u591a\u6708\u540e\uff0c\u4e5f\u5c31\u662f4\u670829\u65e5\uff0c\u536b\u751f\u7f72\u6f84\u6e05\uff0c\u5982\u679c\u5bb6\u5ead\u4e0d\u80fd\u6ee1\u8db3\u4efb\u4f55\u65b0\u5c45\u6c11\u7684\u9700\u6c42\uff0c\u5c31\u4e0d\u5e94\u8be5\u63a5\u6536\u4ed6\u4eec\uff0c\u5305\u62ec\u4e00\u4efd\u51a0\u72b6\u75c5\u6bd2\u62a4\u7406\u548c\u9884\u9632\u6807\u51c6\u7684\u6e05\u5355\u3002\n\u957f\u5c9b\u4e0a\u6709460\u4e2a\u5e8a\u4f4d\u7684\u53e4\u5c14\u6e29\u72b9\u592a\u4eba(Gurwin\u72b9\u592a\u4eba)\u57283\u6708\u521d\u4f3c\u4e4e\u5bf9\u51a0\u72b6\u75c5\u6bd2\u505a\u597d\u4e86\u5145\u5206\u7684\u51c6\u5907\uff0c\u7528\u53ef\u79fb\u52a8\u7684\u5899\u58c1\u5c01\u9501\u4e86\u8d70\u5eca\uff0c\u4e0d\u8ba9\u611f\u67d3\u8005\u611f\u67d3\u3002\u4f46\u5728\u56fd\u5bb6\u4e0b\u8fbe\u547d\u4ee4\u540e\uff0c\u4ece\u5f53\u5730\u533b\u9662\u6062\u590d\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u7684\u6d93\u6d93\u7ec6\u6d41\u53d8\u6210\u4e8658\u4eba\u7684\u6d2a\u6d41\u3002\n\u4fee\u5efa\u4e86\u66f4\u591a\u7684\u56f4\u5899\uff0c\u4f46\u5176\u4ed6\u5c45\u6c11\u4ecd\u7136\u5f00\u59cb\u751f\u75c5\u548c\u6b7b\u4ea1\u3002\u6700\u7ec8\uff0c47\u540d\u53e4\u5c14\u6e29\u5c45\u6c11\u6b7b\u4e8e\u786e\u8bca\u6216\u7591\u4f3c\u51a0\u72b6\u75c5\u6bd2\u3002\n\u9996\u5e2d\u6267\u884c\u5b98\u65af\u56fe\u5c14\u7279\u00b7\u963f\u5c14\u9ed8(Stuart Almer)\u8868\u793a\uff0c\u5dde\u653f\u5e9c\u7684\u547d\u4ee4\u201c\u5c06\u5de5\u4f5c\u4eba\u5458\u548c\u5c45\u6c11\u7f6e\u4e8e\u6781\u5927\u7684\u5371\u9669\u4e4b\u4e2d\u201d\u3002\u201c\u6211\u4eec\u4e0d\u80fd\u4ece\u5f15\u8fdb\u9633\u6027\u7684\u4eba\u5230\u611f\u67d3\u75be\u75c5\u7684\u4eba\u4e4b\u95f4\u5212\u6e05\u754c\u9650\uff0c\u4f46\u6211\u4eec\u8c08\u8bba\u7684\u662f\u5e74\u8001\u3001\u8106\u5f31\u548c\u8106\u5f31\u7684\u5c45\u6c11\u3002\u201d\n\u6025\u6027\u540e\u957f\u671f\u62a4\u7406\u533b\u5b66\u4f1a(AMDA)\u4ece\u4e00\u5f00\u59cb\u5c31\u8b66\u544a\u8bf4\uff0c\u5e93\u83ab\u6536\u5bb9\u611f\u67d3\u60a3\u8005\u7684\u547d\u4ee4\u5bf9\u7597\u517b\u9662\u5c45\u6c11\u6784\u6210\u4e86\u201c\u660e\u663e\u548c\u73b0\u5b9e\u7684\u5371\u9669\u201d\u3002\u73b0\u5728\uff0c\u5728\u8be5\u7ec4\u7ec7\u6267\u884c\u59d4\u5458\u4f1a\u4efb\u804c\u7684\u6770\u5f17\u91cc\u00b7N\u00b7\u5c3c\u79d1\u5c14\u65af(Jeffrey N.Nichols)\u8bf4\uff0c\u201c\u8fd9\u9879\u547d\u4ee4\u7684\u5f71\u54cd\u662f\u9020\u62105000\u4eba\u6b7b\u4ea1\u3002\u201d\n\u6839\u636e\u7f8e\u8054\u793e\u7684\u7edf\u8ba1\uff0c\u5728\u5168\u56fd\u8303\u56f4\u5185\uff0c\u8d85\u8fc735500\u4eba\u6b7b\u4e8e\u7597\u517b\u9662\u548c\u957f\u671f\u62a4\u7406\u8bbe\u65bd\u7684\u51a0\u72b6\u75c5\u6bd2\u7206\u53d1\uff0c\u7ea6\u5360\u603b\u6b7b\u4ea1\u4eba\u6570\u7684\u4e09\u5206\u4e4b\u4e00\u3002\n\u5e93\u9ed8\u8f6c\u79fb\u4e86\u5bf9\u7597\u517b\u9662\u6307\u4ee4\u7684\u6279\u8bc4\uff0c\u79f0\u5176\u6e90\u4e8e\u7279\u6717\u666e\u653f\u5e9c\u7684\u6307\u5bfc\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5f88\u5c11\u6709\u5dde\u50cf\u7ebd\u7ea6\u5dde\u548c\u90bb\u8fd1\u7684\u65b0\u6cfd\u897f\u5dde\u90a3\u6837\uff0c\u5728\u5c06\u4f4f\u9662\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u9001\u5f80\u7597\u517b\u9662\u65b9\u9762\u8d70\u5f97\u8fd9\u4e48\u8fdc\uff0c\u65b0\u6cfd\u897f\u5dde\u7684\u7597\u517b\u9662\u6b7b\u4ea1\u4eba\u6570\u4f4d\u5c45\u7b2c\u4e8c\u3002\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7d27\u968f\u5176\u540e\uff0c\u4f46\u5728\u53d7\u5230\u5f3a\u70c8\u6279\u8bc4\u540e\u653e\u677e\u4e86\u8981\u6c42\u3002\n\u4e00\u4e9b\u5dde\u8d70\u4e86\u76f8\u53cd\u7684\u65b9\u5411\u3002\u8def\u6613\u65af\u5b89\u90a3\u5dde\u7981\u6b62\u533b\u9662\u572830\u5929\u5185\u5c06\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u9001\u5230\u7597\u517b\u9662\uff0c\u4f46\u6709\u4e00\u4e9b\u4f8b\u5916\u3002\u867d\u7136\u8def\u6613\u65af\u5b89\u90a3\u5dde\u62a5\u544a\u7684\u4e0e\u51a0\u72b6\u75c5\u6bd2\u76f8\u5173\u7684\u7597\u517b\u9662\u6b7b\u4ea1\u4eba\u6570\u7ea6\u4e3a1000\u4eba\uff0c\u8fdc\u8fdc\u4f4e\u4e8e\u7ebd\u7ea6\uff0c\u4f46\u8fd9\u662f\u8def\u6613\u65af\u5b89\u90a3\u5dde\u5168\u5dde\u6b7b\u4ea1\u4eba\u6570\u768440%\uff0c\u9ad8\u4e8e\u7ebd\u7ea6\u3002\n\u7ebd\u7ea6\u536b\u751f\u5c405\u67088\u65e5\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u5b83\u6ca1\u6709\u8ffd\u8e2a\u6709\u591a\u5c11\u6b63\u5728\u5eb7\u590d\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u6839\u636e\u8be5\u547d\u4ee4\u88ab\u5e26\u5230\u7597\u517b\u9662\u3002\u4f46\u6b63\u662f\u5728\u90a3\u4e00\u523b\uff0c\u5c31\u8fd9\u4e2a\u95ee\u9898\u5bf9\u8be5\u5dde1150\u591a\u5bb6\u7597\u517b\u9662\u548c\u957f\u671f\u62a4\u7406\u673a\u6784\u7684\u7ba1\u7406\u4eba\u5458\u8fdb\u884c\u4e86\u8c03\u67e5\u3002\n\u8fd9\u4e9b\u8c03\u67e5\u7ed3\u679c\u5c1a\u672a\u516c\u5e03\u3002\u4f46\u4e0d\u7ba1\u600e\u6837\uff0c\u536b\u751f\u90e8\u8868\u793a\uff0c\u8fd9\u9879\u8c03\u67e5\u5bf9\u5e93\u9ed85\u670810\u65e5\u7684\u58f0\u660e\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u5373\u201c\u6211\u4eec\u53ea\u662f\u4e0d\u4f1a\u628a\u53bb\u533b\u9662\u5c31\u8bca\u540e\u5448\u9633\u6027\u7684\u4eba\u9001\u5230\u7597\u517b\u9662\u3002\u201d\nCuomo\u8bf4\uff0c\u8fd9\u6837\u7684\u60a3\u8005\u5c06\u88ab\u5b89\u7f6e\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6bd4\u5982\u6700\u521d\u8bbe\u7acb\u4e3a\u4e34\u65f6\u533b\u9662\u7684\u5730\u70b9\u3002\n\u4e13\u95e8\u5904\u7406\u7597\u517b\u9662\u6848\u4ef6\u7684\u7ebd\u7ea6\u5f8b\u5e08\u7ea6\u7ff0\u00b7\u8fbe\u5229(John Dalli)\u8bf4\uff0c\u201c\u5b83\u611f\u67d3\u4e86\u7597\u517b\u9662\u7684\u5927\u91cf\u4eba\uff0c\u4ed6\u4eec\u6ca1\u6709\u7406\u7531\u53d7\u5230\u611f\u67d3\uff0c\u5305\u62ec\u624b\u672f\u540e\u5728\u90a3\u91cc\u8fdb\u884c\u5eb7\u590d\u7684\u77ed\u671f\u5c45\u6c11\u3002\u201d\n\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u65b0\u6765\u7684\u5c45\u6c11\u5e76\u4e0d\u662f\u552f\u4e00\u53ef\u80fd\u7684\u4f20\u67d3\u6e90\u3002\u4e00\u4e9b\u5bb6\u5ead\u8ba4\u4e3a\uff0c\u66f4\u5927\u7684\u8d21\u732e\u6765\u81ea\u5de5\u4f5c\u4eba\u5458\u548c\u5c45\u6c11\uff0c\u4ed6\u4eec\u6ca1\u6709\u610f\u8bc6\u5230\u81ea\u5df1\u611f\u67d3\u4e86\u75c5\u6bd2\u3002\u4e00\u4e9b\u4eba\u8bf4\uff0c\u4ed6\u4eec\u4f1a\u63a5\u53d7\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\uff0c\u800c\u4e0d\u7ba1\u5dde\u653f\u5e9c\u7684\u547d\u4ee4\u3002\n\u83b1\u8335\u8d1d\u514b\u6c64\u666e\u68ee\u4e4b\u5bb6\u7684\u5973\u53d1\u8a00\u4eba\u838e\u62c9\u00b7\u79d1\u4f26\u5185\u6d1b(Sarah Columello)\u8bf4\uff0c\u201c\u6709\u4e9b\u7597\u517b\u9662\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u7a7a\u767d\u3002\u201d\u8fd9\u4e2a\u62e5\u6709100\u5f20\u5e8a\u4f4d\u7684\u8bbe\u65bd\u8bbe\u7acb\u4e86\u4e00\u4e2a\u9694\u79bb\u5355\u5143\uff0c\u9644\u8fd1\u7684\u9644\u5c5e\u533b\u9662\u5df2\u7ecf\u53d1\u9001\u4e86\u81f3\u5c1121\u540d\u60a3\u8005\u3002\u76ee\u524d\u8fd8\u6ca1\u6709\u6b7b\u4ea1\u62a5\u544a\u3002\n\u5e93\u9ed8\u653f\u5e9c\u5b98\u5458\u8bf4\uff0c\u6700\u521d\u7684\u6307\u4ee4\u662f\u5728\u5dde\u957f\u62c5\u5fc3\u533b\u9662\u7cfb\u7edf\u4f1a\u4e0d\u582a\u91cd\u8d1f\u65f6\u53d1\u5e03\u7684\uff0c\u5e76\u4e13\u6ce8\u4e8e\u521b\u9020\u5c3d\u53ef\u80fd\u591a\u7684\u533b\u9662\u7a7a\u95f4\u3002\n\u8fd9\u53d7\u5230\u4e86\u7f8e\u8054\u793e\u7edf\u8ba1\u7684\u4f17\u591a\u533b\u9662\u7cfb\u7edf\u548c\u7597\u517b\u9662\u4e2d\u7684\u4e00\u5bb6\u7684\u6b22\u8fce\u3002\u8bfa\u65af\u97e6\u5c14\u5065\u5eb7\u516c\u53f8\u8bf4\uff0c\u5b83\u7684\u4e09\u4e2a\u533b\u7597\u4e2d\u5fc3\u4e00\u5ea6\u8d1f\u62c5\u8fc7\u91cd\uff0c\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u628a\u4e00\u4e9bICU\u60a3\u8005\u653e\u5728\u8d70\u5eca\u91cc\u3002\u4e3a\u4e86\u7f13\u89e3\u538b\u529b\uff0c\u8be5\u516c\u53f8\u6700\u7ec8\u5c061700\u591a\u540d\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u9001\u5f80\u7597\u517b\u9662\u3002", "note_en": "NEW YORK (AP) \u2014 More than 4,500 recovering coronavirus patients were sent to New York\u2019s already vulnerable nursing homes under a controversial state directive that was ultimately scrapped amid criticisms it was accelerating the nation\u2019s deadliest outbreaks, according to a count by The Associated Press.\n AP compiled its own tally to find out how many COVID-19 patients were discharged from hospitals to nursing homes under the March 25 directive after New York\u2019s Health Department declined to release its internal survey conducted two weeks ago. It says it is still verifying data that was incomplete.\n  Whatever the full number, nursing home administrators, residents\u2019 advocates and relatives say it has added up to a big and indefensible problem for facilities that even Gov. Andrew Cuomo \u2014 the main proponent of the policy \u2014 called \u201cthe optimum feeding ground for this virus.\u201d\n  \u201cIt was the single dumbest decision anyone could make if they wanted to kill people,\u201d Daniel Arbeeny said of the directive, which prompted him to pull his 88-year-old father out of a Brooklyn nursing home where more than 50 people have died. His father later died of COVID-19 at home.\n \u201cThis isn\u2019t rocket science,\u201d Arbeeny said. \u201cWe knew the most vulnerable -- the elderly and compromised -- are in nursing homes and rehab centers.\u201d\n Told of the AP\u2019s tally, the Health Department said late Thursday it \u201ccan\u2019t comment on data we haven\u2019t had a chance to review, particularly while we\u2019re still validating our own comprehensive survey of nursing homes admission and re-admission data in the middle of responding to this global pandemic.\u201d\n Cuomo, a Democrat, on May 10 reversed the directive, which had been intended to help free up hospital beds for the sickest patients as cases surged. But he continued to defend it this week, saying he didn\u2019t believe it contributed to the more than 5,800 nursing and adult care facility deaths in New York \u2014 more than in any other state \u2014 and that homes should have spoken up if it was a problem.\n \u201cAny nursing home could just say, \u2018I can\u2019t handle a COVID person in my facility,\u2019\u201d he said, although the March 25 order didn\u2019t specify how homes could refuse, saying that \u201dno resident shall be denied re-admission or admission to the (nursing home) solely based\u201d on confirmed or suspected COVID-19.\n Over a month later, on April 29, the Health Department clarified that homes should not take any new residents if they were unable to meet their needs, including a checklist of standards for coronavirus care and prevention.\n    Gurwin Jewish, a 460-bed home on Long Island, seemed well-prepared for the coronavirus in early March, with movable walls to seal off hallways for the infected. But after the state order, a trickle of recovering COVID-19 patients from local hospitals turned into a flood of 58 people.\n More walls were put up, but other residents nonetheless began falling sick and dying. In the end, 47 Gurwin residents died of confirmed or suspected COVID-19.\n  The state order \u201cput staff and residents at great risk,\u201d CEO Stuart Almer said. \u201cWe can\u2019t draw a straight line from bringing in someone positive to someone catching the disease, but we\u2019re talking about elderly, fragile and vulnerable residents.\u201d\n The Society for Post-Acute and Long-Term Care Medicine, known as AMDA, had warned from the beginning that Cuomo\u2019s order admitting infected patients posed a \u201cclear and present danger\u201d to nursing home residents. Now, Jeffrey N. Nichols, who serves on the executive committee of the group, said \u201cthe effect of that order was to contribute to 5,000 deaths.\u201d\n Nationally, over 35,500 people have died from coronavirus outbreaks at nursing homes and long-term care facilities, about a third of the overall death toll, according to the AP\u2019s running tally.\n  Cuomo has deflected criticism over the nursing home directive by saying it stemmed from Trump administration guidance. Still, few states went as far as New York and neighboring New Jersey, which has the second-most care home deaths, in discharging hospitalized coronavirus patients to nursing homes. California followed suit but loosened its requirement following intense criticism.\n Some states went in the opposite direction. Louisiana barred hospitals for 30 days from sending coronavirus patients to nursing homes with some exceptions. And while Louisiana reported about 1,000 coronavirus-related nursing home deaths, far fewer than New York, that was 40% of Louisiana\u2019s statewide death toll, a higher proportion than in New York.\n New York\u2019s Health Department told the AP May 8 it was not tracking how many recovering COVID-19 patients were taken into nursing homes under the order. But it was at that very moment surveying administrators of the state\u2019s over 1,150 nursing homes and long-term care facilities on just that question.\n Those survey results have yet to be released. But regardless, the Health Department said, the survey had no bearing on Cuomo\u2019s announcement May 10 that \u201cwe\u2019re just not going to send a person who is positive to a nursing home after a hospital visit.\u201d\n Cuomo said such patients would be accommodated elsewhere, such as sites originally set up as temporary hospitals.\n  \u201cIt infected a great number of people in nursing homes who had no business getting infected, including short-term residents who were there for rehabilitation after surgeries,\u201d said John Dalli, a New York attorney who specializes in nursing home cases.\n  To be sure, incoming residents weren\u2019t the only possible source of infection. Some homes believe a bigger contribution came from staffers and residents unaware they had the virus. And some say they would have taken on COVID-19 patients regardless of the state\u2019s order.\n \u201cThere were nursing homes that realized that there was a void,\u201d said Sarah Colomello, a spokeswoman for Thompson House in Rhinebeck. The 100-bed facility set up an isolated unit where affiliated hospitals nearby have sent at least 21 patients. It has reported no deaths.\n Cuomo administration officials say the original directive came when the governor feared the hospital system would be overwhelmed and was focused on creating as much hospital space as possible.\n That was welcomed by one of the many hospital systems and nursing homes surveyed for AP\u2019s count. Northwell Health said three of its medical centers were so overtaxed at one point they had to put some ICU patients in hallways. To relieve pressure, the company eventually sent more than 1,700 COVID-19 patients to nursing homes.", "posttime": "2020-05-25 07:14:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,\u8ba1\u6570,patients,\u7597\u517b\u9662", "title": "\u7f8e\u8054\u793e\u8ba1\u6570\uff1a\u8d85\u8fc74500\u540d\u75c5\u6bd2\u60a3\u8005\u88ab\u9001\u5f80\u7ebd\u7ea6\u7597\u517b\u9662", "title_en": "AP count: Over 4,500 virus patients sent to NY nursing homes", "transed": 1, "url": "https://apnews.com/5ebc0ad45b73a899efa81f098330204c", "via": "", "real_tags": ["\u75c5\u6bd2", "\u8ba1\u6570", "patients", "\u7597\u517b\u9662"]}, {"category": "", "categoryclass": "", "imagename": "3bc0f90fa18d29ea0d256f37e54d6b20.jpeg", "infoid": 1003574, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56fd\u9645\u7a7a\u95f4\u7ad9\u7684\u4e00\u4e2a\u8f83\u957f\u7684\u7ae0\u8282\u5df2\u7ecf\u7ed3\u675f\u3002\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5df2\u7ecf\u5c06\u517611\u4e2a\u5feb\u9012(\u52a0\u5feb\u5411\u7a7a\u95f4\u7ad9\u5904\u7406\u5b9e\u9a8c)\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u9001\u5230\u4e86\u8f68\u9053\u8bbe\u65bd\uff0c\u8fd9\u662f\u5728\u53d1\u9001\u524d\u4e24\u4e2a\u5feb\u901219\u5e74\u540e\u3002\u5b83\u4eec\u770b\u8d77\u6765\u4e0d\u591a\uff0c\u4f46\u5b83\u4eec\u4e3a\u591a\u8fbe10\u4e2a\u5c0f\u578b\u6709\u6548\u8f7d\u8377\u63d0\u4f9b\u7535\u529b\u3001\u5b58\u50a8\u3001\u6c14\u5019\u63a7\u5236\u548c\u901a\u4fe1-\u5b83\u4eec\u662f\u56fd\u9645\u7a7a\u95f4\u7ad9\u4e0a\u8fd0\u884c\u7684\u8bb8\u591a\u5b9e\u9a8c\u7684\u5173\u952e\uff0c\u5c06\u5e2e\u52a9\u7a7a\u95f4\u7ad9\u53d1\u6325\u5176\u6f5c\u5728\u7684\u7814\u7a76\u80fd\u529b\u3002\n\u8fd9\u6700\u540e\u4e00\u4e2a\u673a\u67b6\u662f\u7531\u4e00\u8258\u65e5\u672c\u8d27\u8239\u643a\u5e26\u7684\uff0c\u5e94\u8be5\u57282020\u5e74\u79cb\u5b63\u4e4b\u524d\u5b89\u88c5\u597d\u5e76\u6295\u5165\u4f7f\u7528\u3002\n\u867d\u7136\u5feb\u9012\u67b6\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u5e94\u8be5\u662f\u6709\u7528\u7684\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u6807\u5fd7\u7740\u7f8e\u56fd\u5b87\u822a\u5c40\u56fd\u9645\u7a7a\u95f4\u7ad9\u5de5\u4f5c\u7684\u4e00\u4e2a\u65f6\u4ee3\u7684\u7ed3\u675f\uff0c\u8fd9\u4e00\u5de5\u4f5c\u59cb\u4e8e\u822a\u5929\u98de\u673a\u7684\u5168\u76db\u65f6\u671f\u3002\u8be5\u673a\u6784\u8ba1\u5212\u5c06\u91cd\u70b9\u66f4\u591a\u5730\u8f6c\u79fb\u5230\u201c\u963f\u8033\u7279\u5f25\u65af\u4e00\u4ee3\u201d\u9879\u76ee\u4e0a\uff0c\u8fd9\u4e9b\u9879\u76ee\u5c06\u6709\u52a9\u4e8e\u592a\u9633\u7cfb\u7684\u63a2\u7d22\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u4e00\u79d1\u5b66\u9635\u5217\u7684\u5b8c\u6210\u6807\u5fd7\u7740\u4e00\u4e2a\u66f4\u96c4\u5fc3\u52c3\u52c3\u7684\u9636\u6bb5\u7684\u5f00\u59cb\u3002", "note_en": "One of the longer chapters of the International Space Station has come to a close. NASA  has sent the last of its 11 ExPRESS (Expedite the Processing of Experiments to the Space Station) science racks to the orbiting facility, 19 years after sending the first two. They don\u2019t look like much, but they provide the power, storage, climate control and communications for up to 10 small payloads \u2014 they\u2019re key to many of the experiments that run aboard the ISS and will help the station live up to its potential research capabilities.\n This last rack was carried aboard a Japanese cargo ship and should be installed and functioning by fall 2020.\n  While the EXPRESS racks should be useful for a while yet, this effectively marks the end of an era for NASA\u2019s ISS work, which began during the  Space Shuttle\u2019s heyday. The agency plans to shift its focus more to \u201c Artemis-generation\u201d projects that will help with exploration of the Solar System. In that light, the completion of this science array marks the start of a more ambitious phase.", "posttime": "2020-05-25 06:59:39", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "nasa,\u56fd\u9645,iss,\u7a7a\u95f4\u7ad9", "title": "19\u5e74\u540e\uff0c\u56fd\u9645\u7a7a\u95f4\u7ad9\u6536\u5230\u4e86\u6700\u540e\u4e00\u4e2aNASA\u79d1\u5b66\u67b6", "title_en": "After 19 Years, the ISS Receives Its Very Last NASA Science Rack", "transed": 1, "url": "https://www.engadget.com/iss-receives-last-nasa-science-rack-194934307.html", "via": "", "real_tags": ["nasa", "\u56fd\u9645", "iss", "\u7a7a\u95f4\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "6f16f00828eb1b4c1d2c0a04e1f3789b.jpg", "infoid": 1003573, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8d39\u7c73-\u72c4\u62c9\u514b\u7edf\u8ba1\u5b66\u6700\u8457\u540d\u7684\u8868\u73b0\u662f\u6ce1\u5229\u4e0d\u76f8\u5bb9\u539f\u7406\uff1a\u6ca1\u6709\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u53ef\u4ee5\u5360\u636e\u76f8\u540c\u7684\u5355\u7c92\u5b50\u6001\u3002\u8fd9\u4e00\u539f\u7406\u5728\u8bb8\u591a\u5b8c\u5168\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u7cfb\u7edf\u4e2d\u5b9e\u65bd\u9ad8\u9636\u5173\u8054\uff0c\u5373\u4f7f\u5728\u6240\u6709\u76f8\u4e92\u4f5c\u7528\u90fd\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e5f\u662f\u6355\u83b7\u7c92\u5b50\u7684\u7279\u6b8a\u51e0\u4f55\u6392\u5217\u7684\u539f\u56e0\u3002\u8fd9\u4e9b\u51e0\u4f55\u7ed3\u6784\u88ab\u79f0\u4e3a\u6ce1\u5229\u6676\u4f53\uff0c\u9884\u6d4b\u4e86\u56da\u7981\u5728\u8c10\u52bf\u4e2d\u7684N\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u539f\u5b50\u7cfb\u7edf\u3002\u5728\u7cfb\u7edf\u7684\u5355\u6b21\u62cd\u6444\u56fe\u7247\u96c6\u5408\u4e2d\uff0c\u5b83\u4eec\u662f\u6700\u5e38\u89c1\u7684\u914d\u7f6e\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u7814\u7a76\u5f53\u8003\u8651\u5230\u73b0\u5b9e\u7684\u5b9e\u9a8c\u9650\u5236\u65f6\uff0c\u6ce1\u5229\u6676\u4f53\u7684\u6613\u788e\u6027\u3002\u8003\u8651\u4e86\u53ef\u4f9b\u5206\u6790\u7684\u5355\u955c\u5934\u6570\u3001\u70ed\u8d77\u4f0f\u548c\u68c0\u6d4b\u6548\u7387\u6709\u9650\u7b49\u56e0\u7d20\u7684\u5f71\u54cd\u3002\u7ed9\u51fa\u4e86\u8fd9\u4e9b\u566a\u58f0\u6e90\u5bf9\u6ce1\u5229\u6676\u4f53\u5b9e\u9a8c\u89c2\u6d4b\u53ef\u80fd\u6027\u7684\u5f71\u54cd\uff0c\u5e76\u786e\u5b9a\u4e86\u63a2\u6d4b\u7c92\u5b50\u51e0\u4f55\u6392\u5217\u7684\u5fc5\u8981\u6761\u4ef6\u3002\n\u8d85\u51b7\u539f\u5b50\u4e0d\u4ec5\u4e3a\u6a21\u62df\u5404\u79cd\u591a\u4f53\u91cf\u5b50\u7cfb\u7edf1\u30012\u30013\u30014\u30015\u30016\u63d0\u4f9b\u4e86\u7406\u60f3\u7684\u64cd\u573a\uff0c\u4e5f\u4e3a\u7814\u7a76\u5c11\u4f53\u7269\u7406\u63d0\u4f9b\u4e86\u7406\u60f3\u7684\u5e73\u53f0\u30027.\u5728\u8d85\u51b7\u539f\u5b50\u63a7\u5236\u548c\u76d1\u6d4b\u65b9\u9762\u53d6\u5f97\u4e86\u524d\u6240\u672a\u6709\u7684\u8fdb\u5c55\uff0c\u5f00\u8f9f\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u53ef\u80fd\u6027\u4e16\u754c\u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5355\u4f4d\u5bfb\u5740\u6280\u672f8\uff0c\u53ef\u4ee5\u5728\u6676\u683c\u7cfb\u7edf\u7684Mott\u7edd\u7f18\u76f8\u4e2d\u83b7\u5f97\u539f\u5b50\u6570\u6da8\u843d\u5f97\u5230\u5145\u5206\u6291\u5236\u7684\u53d7\u63a7\u5c11\u4f53\u7cfb\u7edf\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u5728\u5355\u4e2a\u5fae\u96319\u300110\u4e2d\u786e\u5b9a\u6027\u5730\u5236\u5907\u5c11\u4f53\u7cfb\u7edf\u3002\u53ef\u4ee5\u5728\u5b9a\u4e49\u826f\u597d\u7684\u9ad8\u4fdd\u771f\u91cf\u5b50\u6001\u4e2d\u5236\u59071-10\u4e2a\u8d39\u7c73\u5b50\u539f\u5b50\u7684\u5c0f\u7cfb\u7edf\u3002\n\u6700\u8fd1\u53d1\u5c55\u8d77\u6765\u7684\u5355\u70b9\u8367\u5149\u6210\u50cf\u6280\u672f\u662f\u76d1\u6d4b\u591a\u4f53\u7cfb\u7edf11\uff0c12\uff0c13\uff0c14\uff0c15\uff0c16\uff0c17\uff0c18\u7684\u91cd\u5927\u7a81\u7834\u3002\u8fd9\u9879\u4f1f\u5927\u7684\u6210\u50cf\u6280\u672f\u53ef\u4ee5\u540c\u65f6\u786e\u5b9a\u6240\u6709\u5355\u4e2a\u539f\u5b50\u5728\u5355\u70b9\u5206\u8fa8\u738712\uff0c13\u7684\u5149\u5b66\u6676\u683c\u4e2d\u7684\u4f4d\u7f6e\u3002\u5355\u4e2a\u5b64\u7acb\u9677\u9631\u5185\u7684\u539f\u5b50\u7cfb\u7efc\u7684\u5feb\u7167\u53ef\u80fd\u5305\u542b\u8bb8\u591a\u5173\u4e8e\u8be5\u7cfb\u7edf\u7684\u5173\u952e\u4fe1\u606f\u3002\u5728\u8fd9\u65b9\u9762\u975e\u5e38\u91cd\u8981\u7684\u662f\u9ad8\u9636\u7a7a\u95f4\u5173\u8054\uff0c\u8fd9\u5bf9\u4e8e\u5355\u7c92\u5b50\u63a2\u6d4b\u6765\u8bf4\u662f\u96be\u4ee5\u6349\u6478\u7684\uff0c\u4f46\u53ef\u4ee5\u4eceN\u4f53\u6982\u7387\u5bc6\u5ea619\u300120\u300121\u300122\u4e2d\u63ed\u793a\u51fa\u6765\u3002\u6700\u597d\u7684\u4f8b\u5b50\u4e4b\u4e00\u662f\u6700\u8fd1\u7684\u5b9e\u9a8c22\uff0c\u5728\u5b9e\u9a8c22\u4e2d\uff0c\u901a\u8fc7\u6bd4\u8f83\u7cfb\u7edf\u7684\u8bb8\u591a\u5355\u955c\u5934\u56fe\u50cf\uff0c\u663e\u793a\u4e86\u5728\u73bb\u8272-\u7231\u56e0\u65af\u5766\u51dd\u805a\u4e2d\u521b\u5efa\u7684\u91cc\u5fb7\u5821\u591a\u4f53\u7cfb\u7edf\u4e2d\u81ea\u53d1\u81ea\u7ec4\u7ec7\u6709\u5e8f\u7684\u68c0\u6d4b\u3002\n\u5b9e\u9a8c\u8fdb\u5c55\u6311\u6218\u7406\u8bba\u3002\u7528\u5355\u7c92\u5b50\u5206\u8fa8\u7387\u89c2\u6d4b\u7684\u91cf\u5b50\u591a\u4f53\u7cfb\u7edf\u5f15\u8d77\u4e86\u7269\u7406\u5b66\u5bb6\u7684\u5174\u8da3\uff0c\u56e0\u4e3a\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e0d\u4ec5\u6700\u5e38\u89c1\u7684\u5355\u4f53\u6d4b\u91cf\uff0c\u800c\u4e14\u4e24\u70b9\u5173\u8054\u4e5f\u4e0d\u80fd\u83b7\u5f97\u7684\u4fe1\u606f\u3002\u7406\u89e3\u9700\u8981\u63cf\u8ff0\u8d85\u8d8a\u4e24\u70b9\u76f8\u5173\u6027\u7684\u8fc7\u7a0b\u7684\u4f8b\u5b50\u76f8\u5f53\u591a\u3002\u5b83\u4eec\u5305\u62ec\u4f8b\u5982\u79cd\u5b50\u7eb823\uff0c\u5176\u4e2d\u793a\u51fa\u4e86\u5728N\u4f53\u68c0\u6d4b\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u5e72\u6d89\u6761\u7eb9\u3002\u76f8\u53cd\uff0c\u5728\u4e00\u4f53\u56fe\u50cf\u4e2d\u770b\u4e0d\u5230\u5e72\u6270\u3002\u7c7b\u4f3c\u5730\uff0c\u5b64\u5b50\u51fa\u73b0\u5728\u4e00\u7ef4\u73bb\u8272\u5b50\u7cfb\u7edf\u7684\u7b2c\u4e8c\u7c7b\u6fc0\u53d1\u6001\u4e2d\uff0c\u8be5\u7cfb\u7edf\u901a\u8fc7\u7531Lieb-Liniger\u6a21\u578b24\u63cf\u8ff0\u7684\u77ed\u7a0b\u52bf\u76f8\u4e92\u4f5c\u7528\u3002\u8fd9\u4e9b\u5b64\u5b50\u662f\u7531\u4e8e\u7cfb\u7edf\u4e2d\u7684\u9ad8\u9636\u5173\u8054\u800c\u51fa\u73b0\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5355\u6b21\u63a2\u6d4b\u591a\u4e2a\u539f\u5b50\u65f6\u88ab\u53d1\u73b0\u300225\u4e2d\u7684\u5de5\u4f5c\u6f14\u793a\u4e86\u5982\u4f55\u57fa\u4e8e\u591a\u4f53\u859b\u5b9a\u8c14\u65b9\u7a0b\u7684\u6570\u503c\u89e3\u6765\u6a21\u62df\u4e00\u822c\u8d85\u51b7\u73bb\u8272\u5b50\u7cfb\u7edf\u7684\u5355\u70ae\u5b9e\u9a8c\u3002\u5bf9\u76d1\u6d4b\u591a\u4f53\u52a8\u529b\u5b66\u7684\u968f\u65f6\u95f4\u53d8\u5316\u7684\u5355\u6b21\u56fe\u50cf\u8fdb\u884c\u4e86\u6a21\u62df\uff0c\u63ed\u793a\u4e86\u6709\u5438\u5f15\u529b\u7684BEC\u4e2d\u7684\u8109\u52a8\u6da1\u65cb\u7684\u51fa\u73b0\uff0c\u63d0\u51fa\u4e8626\u6761\u5efa\u8bae\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u7814\u7a76\u4e86\u5c11\u4f53\u7cfb\u7edf\u4e2d\u7684\u53e6\u4e00\u4e2a\u9ad8\u9636\u5173\u8054\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u611f\u5174\u8da3\u7684\u5173\u8054\u5b8c\u5168\u662f\u7531\u4e8e\u91cf\u5b50\u7edf\u8ba1\u548c\u4e0d\u53ef\u533a\u5206\u6027\u3002\u5168\u540c\u7c92\u5b50\u7684\u4e0d\u53ef\u533a\u5206\u6027\u8d28\u5bfc\u81f4\u4e86\u91cf\u5b50\u7269\u7406\u5b66\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u7ed3\u679c\u3002\u5373\u4f7f\u5728\u6ca1\u6709\u4efb\u4f55\u76f8\u4e92\u4f5c\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e5f\u4f1a\u56fa\u6709\u5730\u5f3a\u52a0\u7c92\u5b50\u4e4b\u95f4\u7684\u5173\u8054\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f53\u8bb8\u591a\u96f6\u6e29\u7684\u5b8c\u5168\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u88ab\u56f0\u5728\u5916\u90e8\u7684\u4e8c\u7ef4\u8c10\u6ce2\u9677\u9631\u4e2d\u65f6\uff0c\u8fd9\u4e9b\u7c92\u5b50\u4f1a\u4ee5\u4e00\u79cd\u60ca\u4eba\u7684\u65b9\u5f0f\u81ea\u6211\u5b9a\u5411\uff0c\u63ed\u793a\u51fa\u7279\u5b9a\u7684\u51e0\u4f55\u7ed3\u6784\uff0c\u5373\u6ce1\u5229\u6676\u4f53\u3002\u6211\u4eec\u6700\u8fd1\u5c55\u793a\u4e86\u5982\u4f55\u4ece\u591a\u4f53\u7cfb\u7edf27\u7684\u591a\u5f20\u5355\u955c\u5934\u56fe\u50cf\u4e2d\u63d0\u53d6\u8fd9\u4e9b\u51e0\u4f55\u7ed3\u6784\u3002\u901a\u8fc7\u5bf9\u5927\u91cf\u6570\u636e\u7684\u9002\u5f53\u5206\u6790\uff0c\u7ed9\u51fa\u4e86\u6e05\u6670\u3001\u6beb\u4e0d\u542b\u7cca\u7684\u6ce1\u5229\u6676\u4f53\u56fe\u50cf\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u89c2\u6d4b\u5230\u7684\u56fe\u50cf\u53d7\u5230\u5404\u79cd\u5b9e\u9a8c\u7f3a\u9677\u7684\u5f71\u54cd\u6709\u591a\u5927\uff0c\u4ee5\u53ca\u6ce1\u5229\u6676\u4f53\u7684\u5b58\u5728\u662f\u5426\u80fd\u5f97\u5230\u5b9e\u9a8c\u8bc1\u5b9e\u3002\u6700\u8fd1\u7c7b\u4f3c\u7684\u6ce1\u5229\u7ed3\u6784\n\u5176\u4e2d\\({{\\mathcal H}}_{n}\\)\u662f\\({n}^{th}\\)Hermite\u591a\u9879\u5f0f\uff0c\\({\\mathscr{N}}={{\\mathrm{(2}}^{n+m}n\uff01m\uff01\\sqrt{\\pi})}^{1/2}\\)\u662f\u5f52\u4e00\u5316\u5e38\u6570\u3002\u91cf\u5b50\u6570n\u548cm\u5206\u522b\u679a\u4e3ex\u548cy\u65b9\u5411\u7684\u6fc0\u53d1\u3002\u6211\u4eec\u4f7f\u7528\u81ea\u7136\u8c10\u632f\u5b50\u5355\u4f4d\\({a}_{0}=\\sqrt{\\hslash/M\\omega}\\)\uff0c\u5176\u4e2dM\u662f\u7c92\u5b50\u7684\u8d28\u91cf\u3002\u4e0e\u91cf\u5b50\u6001\\({\\psi}_{Mn}\\)\u76f8\u5bf9\u5e94\u7684\u5355\u7c92\u5b50\u80fd\u91cf\u4e3a\\({E}_{Mn}=(m+n+\\mathm{1)}\\hslash\\omega\\)\uff0c\u6bcf\u4e2a\u80fd\u7ea7\u90fd\u662f\\((m+n+\\mathm{1)})\u500d\u7b80\u5e76\u7684\u3002\n\u5728N\u4f53\u57fa\u6001\u4e0b\uff0c\u6240\u6709\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u539f\u5b50\u5360\u636e\u6700\u4f4e\u7684\u53ef\u7528\u5355\u7c92\u5b50\u91cf\u5b50\u6001\uff0c\u76f4\u5230\u8d39\u7c73\u80fd\u91cf\u3002\u8fd9\u662f\u7531\u4e8e\u6ce1\u5229\u4e0d\u76f8\u5bb9\u539f\u7406\uff0c\u8be5\u539f\u7406\u7981\u6b62\u5b83\u4eec\u5360\u636e\u76f8\u540c\u7684\u91cf\u5b50\u6001\u3002\u5982\u679c\u8d39\u7c73\u80fd\u7ea7\u7684\u72b6\u6001\u6570\u8d85\u8fc7\u5fc5\u987b\u4f4d\u4e8e\u90a3\u91cc\u7684\u7c92\u5b50\u6570\uff0c\u5219\u57fa\u6001\u4e0d\u662f\u552f\u4e00\u5b9a\u4e49\u7684\u3002\u7136\u800c\uff0c\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u5f53N\u2009=\u20091\u30013\u30016\u300110\u300115\u3001\u2026\u3002\uff0c\u76f8\u5e94\u7cfb\u7edf\u7684\u591a\u4f53\u57fa\u6001\u662f\u975e\u7b80\u5e76\u7684\u3002\u663e\u7136\uff0c\u6ce1\u5229\u6676\u4f53\u7684\u51e0\u4f55\u5f62\u72b6\u662f\u7ed9\u5b9a\u72b6\u6001\u7684\u7279\u5f81\u3002\u5982\u679c\u80fd\u91cf\u6ca1\u6709\u552f\u4e00\u5730\u89c4\u5b9a\u72b6\u6001\uff0c\u6211\u4eec\u5c31\u4f1a\u6709\u5404\u79cd\u4e0d\u540c\u7684\u72b6\u6001\u548c\u51e0\u4f55\u6784\u578b\u5bf9\u5e94\u4e8e\u7ed9\u5b9a\u7684\u80fd\u91cf\u3002\u975e\u96f6\u6e29\u5ea6\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u6240\u6709\u76f8\u540c\u80fd\u91cf\u7684\u72b6\u6001\u5bf9\u70ed\u5bc6\u5ea6\u77e9\u9635\u7684\u8d21\u732e\u662f\u76f8\u7b49\u7684\u3002\u8fd9\u91cc\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u9650\u4e8e\u5404\u5411\u540c\u6027\u9677\u9631\u548c\u5b8c\u5168\u5360\u636e\u7684\u8d39\u7c73\u9762\u3002\n\u57fa\u6001\u80fd\u91cf\u662f\u5360\u636e\u6001\u7684\u5355\u7c92\u5b50\u80fd\u91cf\u4e4b\u548c\uff0c\\({{\\mathcal E}}_{0}^{N}/\\hslash\\omega={\\sum}_{i}^{N}({m}_{i}+{n}_{i}+\\mathm{1)})\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u591a\u4f53\u57fa\u6001\u6ce2\u51fd\u6570\\({{\\rm{\\psi}_{0q}^{N}({{\\bf{r}_{1}\uff0c{{\\bf{r}_{2}\uff0c\\ldots\uff0c{{\\bf{r}_{N})\u4e0e\u5355\u7c92\u5b50\u8f68\u9053\u76f8\u5173\u8054\u7684\u4efb\u4f55\u4e24\u7ec4\u7ed9\u5b9a\u7684\\(({m}_{i}\uff0c{n}_{i})\\)\u4e0d\u53ef\u80fd\u76f8\u540c\uff0c\u56e0\u4e3a\u591a\u4f53\u57fa\u6001\u6ce2\u51fd\u6570\\({{\\rm{\\psi}})_{0q}^{N}({{\\bf{r}_{N}\u901a\u8fc7\u65af\u83b1\u7279\u884c\u5217\u5f0f\uff0c\u5360\u636e\u7684\u5355\u7c92\u5b50\u6001\u3002({{\\Rm{\\Psi}{0q}^{N}\\)\u4e2d\u7684\u4e0b\u6807\\(q\\)\u89e3\u91ca\u4e86N\u4f53\u57fa\u6001\u7684\u7b80\u5e76\u3002\u5f53\u7cfb\u7edf\u5904\u4e8e\u57fa\u6001\u65f6\uff0c\\({{\\mathscr{P}_{q}^{N}\\)\u5728\\({{\\bf{r}_{1}\uff0c{{\\bf{r}_{2}\uff0c\\ldots\uff0c{{\\bf{r}_{N})\\)\u53d1\u73b0\u7c92\u5b50\u7684\u6982\u7387\u4e3a\uff1a\n\u6700\u5927\\({{\\mathscr{P}_{q}^{N}\\)\uff0c\u5f0f\u3002(2)\uff0c\u5bb9\u6613\u83b7\u5f97\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8499\u7279\u5361\u7f57\u7b97\u6cd531\u627e\u5230\u5b83\uff0c\u5176\u4e2d\uff0c\u4ece\u968f\u673a\u9009\u62e9\u7684\u521d\u59cb\u6784\u578b\u5f00\u59cb\uff0c\u901a\u8fc7\u79fb\u4f4d\u539f\u5b50\u4f4d\u7f6e\u6765\u63d0\u51fa\u53e6\u4e00\u6784\u578b\u3002\u5982\u679c\u914d\u7f6e\u6bd4\u524d\u4e00\u4e2a\u914d\u7f6e\u66f4\u6709\u53ef\u80fd\uff0c\u5219\u63a5\u53d7\u79fb\u52a8\u3002\n\u7ed3\u679c\u8868\u660e\uff0c\u6b63\u598227\u4e2d\u6240\u793a\uff0c\u539f\u5b50\u7684\u6700\u53ef\u80fd\u6392\u5217\u5728\u96f6\u6e29\u5ea6\u4e0b\u8868\u73b0\u51fa\u72ec\u7279\u7684\u51e0\u4f55\u7ed3\u6784\u3002N\u2009=\u20093\u30016\u300110\u548c15\u7684\u8fd9\u4e9b\u6784\u578b\u5982\u56fe1\u6240\u793a\u3002\u4e09\u4e2a\u539f\u5b50\u5728\u4e00\u4e2a\u7b49\u8fb9\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u4e0a\u5b9a\u5411\u3002\u5728N\u2009=\u20096\u4e2d\u89c2\u5bdf\u5230\u4e00\u79cd\u53cc\u58f3\u5c42\u7ed3\u6784\uff0c\u5176\u4e2d\u4e00\u4e2a\u539f\u5b50\u4f4d\u4e8e\u9677\u9631\u4e2d\u5fc3\uff0c\u4ee3\u8868\u7b2c\u4e00\u4e2a(\u6700\u5185\u5c42)\u7684\u58f3\u5c42\uff0c\u7b2c\u4e8c\u4e2a\u58f3\u5c42\u7531\u4e94\u4e2a\u539f\u5b50\u6392\u5217\u5728\u4e00\u4e2a\u4e94\u8fb9\u5f62\u4e2d\u5f62\u6210\u3002N\u2009=\u200910\u6784\u578b\u5448\u73b0\u51fa\u53cc\u58f3\u7ed3\u6784\uff0c\u5206\u522b\u5177\u6709\u4e09\u89d2\u5f62\u548c\u4e03\u89d2\u5f62\uff0c\u5f62\u6210\u5185\u58f3\u548c\u5916\u58f3\u3002\u5bf9\u4e8eN\u2009=\u200915\u4e2a\u539f\u5b50\uff0c\u51fa\u73b0\u4e86\u7b2c\u4e09\u4e2a\u58f3\u5c42\uff0c\u5176\u4e2d\u4e00\u4e2a\u539f\u5b50\u5360\u636e\u9677\u9631\u4e2d\u5fc3\uff0c\u76f8\u7b49\u95f4\u8ddd\u76845\u4e2a\u548c9\u4e2a\u539f\u5b50\u5f62\u6210\u7b2c\u4e8c\u4e2a\u58f3\u5c42\uff0c\u7b2c\u4e09\u4e2a(\u6700\u5916\u9762\u7684)\u58f3\u5c42\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u58f3\u4f53\u7684\u76f8\u5bf9\u65b9\u5411\u76f8\u5bf9\u4e8e\u5f7c\u6b64\u662f\u521a\u6027\u7684\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u7ed3\u6784\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u90fd\u53ef\u4ee5\u65cb\u8f6c\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\\({{\\mathscr{P}_{Q}^{N}\\)\u7684\u503c\u3002\n\u4e8c\u7ef4\u8c10\u632f\u9631\u4e2d\u76f8\u540c\u8d39\u7c73\u5b50\u5f62\u6210\u7684\u6676\u4f53\u7ed3\u6784\u3002\u84dd\u70b9\u8868\u793a\u901a\u8fc7\u6700\u5927\u5316(A)3\u4e2a\u539f\u5b50\u3001(D)6\u4e2a\u539f\u5b50\u3001(E)10\u4e2a\u539f\u5b50\u548c(F)15\u4e2a\u539f\u5b50\u7684N\u7c92\u5b50\u6982\u7387\u800c\u83b7\u5f97\u7684\u6700\u53ef\u80fd\u7684\u6784\u578b\u3002\u9ed1\u8272\u865a\u7ebf\u3001\u7ea2\u8272\u865a\u7ebf\u548c\u7eff\u8272\u5b9e\u5fc3\u5706\u5206\u522b\u8868\u793a\u7b2c\u4e00\u4e2a\u58f3(\u6700\u91cc\u9762)\u3001\u7b2c\u4e8c\u4e2a\u58f3\u548c\u7b2c\u4e09\u4e2a\u58f3\u3002\u5f53\u7b2c\u4e00\u4e2a\u58f3\u5c42\u7531\u5b58\u5728\u4e8e\u4e2d\u5fc3\u7684\u5355\u4e2a\u539f\u5b50\u7ec4\u6210\u65f6\uff0c\u5b83\u4f1a\u7f29\u5c0f\u5230\u4e00\u4e2a\u70b9\u3002\n\u6211\u4eec\u5047\u8bbe\u5360\u636e\u8c10\u6ce2\u9677\u9631\u7684\u539f\u5b50\u7684\u4f4d\u7f6e\u53ef\u4ee5\u9ad8\u5206\u8fa8\u7387\u5730\u786e\u5b9a\uff0c\u6bd4\u5b83\u4eec\u4e4b\u95f4\u7684\u95f4\u9694\u5927\uff0c\u5b83\u4eec\u7684\u95f4\u9694\u662f\u632f\u5b50\u5355\u4f4d\u957f\u5ea6\u7684\u6570\u91cf\u7ea7\u3002\u8fd9\u4e2a\u5047\u8bbe\u5728\u8fd9\u4e2a\u65f6\u5019\u662f\u76f8\u5f53\u4e50\u89c2\u7684\u3002\u76ee\u524d\uff0c\u539f\u5b50\u8367\u5149\u663e\u5fae\u955c\u7684\u5206\u8fa8\u7387\u9ad8\u4e8e\u6676\u683c\u95f4\u8ddd\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u4f4d\u7f6e\u7684\u539f\u5b50\u3002\u7136\u800c\uff0c\u8981\u89e3\u51b3\u9a7b\u7559\u5728\u540c\u4e00\u5730\u70b9\u7684\u539f\u5b50\u7684\u4f4d\u7f6e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u539f\u5b50\u5e94\u8be5\u5728\u63a2\u6d4b\u5b83\u4eec\u7684\u4f4d\u7f6e\u4e4b\u524d\u88ab\u91ca\u653e\u3002\u53ea\u6709\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u5c55\u5f00\u540e\uff0c\u624d\u80fd\u533a\u5206\u539f\u5b50\u3002\u7136\u800c\uff0c\u5f39\u9053\u81a8\u80c0\u4e0d\u4f1a\u6539\u53d8\u521d\u59cb\u6392\u5217\u7684\u51e0\u4f55\u5f62\u72b6\u3002\u5bf9\u4e8e\u8c10\u6ce2\u7ea6\u675f\u5c55\u5f00d\n\u5b9e\u9645\u4e0a\uff0c\u540c\u65f6\u91cd\u590d\u6d4b\u91cfN\u4e2a\u539f\u5b50\u7684\u4f4d\u7f6e\\({x}_{i}^{s})\u7684L\u7684\u76f4\u65b9\u56fe\u5b9a\u4e49\u4e3a\uff1a\n\u5176\u4e2d\u7d22\u5f15s\u6307\u7684\u662f\u4e0d\u540c\u7684\u6d4b\u91cf\u503c\u3002\u5982\u679c\u7c92\u5b50\u7684\u4f4d\u7f6ex\u4e0e\u4f4d\u4e8eX\u5904\u7684\u63a2\u6d4b\u5668\u7684\u4f4d\u7f6e\u4ee5\u7cbe\u5ea6\\({\\rm{\\Delta}}\\)\u91cd\u5408\uff0c\u5373\u5982\u679c\u5728X\u5468\u56f4\u7684\u4f53\u79ef\\(V={{\\rm{\\Delta}^{2}\\)\u4e2d\u53d1\u73b0\u7c92\u5b50\uff0c\u5219\u51fd\u6570\\(\\Delta({\\bf{x}}-{\\bf{X}})\\)\u7b49\u4e8e1\u3002\u5728\u76f8\u53cd\u7684\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\\(\\Delta({\\bf{x}}-{\\\u3002\u663e\u7136\uff0cH({\\bf{X}})\u4e0e\u91cf\u5b50\u529b\u5b66\u5355\u7c92\u5b50\u6982\u7387\u5206\u5e03\u6210\u6b63\u6bd4\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u6c42\u548c\u7684\u987a\u5e8f\u6765\u770b\u51fa\u6765\u3002\u76f4\u65b9\u56fe\u6ca1\u6709\u5173\u4e8e\u7c92\u5b50\u4f4d\u7f6e\u76f8\u5173\u6027\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u914d\u7f6e\u4e0a\u7684\u6c42\u548c\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e2a\u7c92\u5b50\u72ec\u7acb\u5b8c\u6210\u3002\u8fd9\u5c06\u64e6\u9664\u6709\u5173\u7cfb\u7edf\u4e2d\u7c92\u5b50\u548c\u51e0\u4f55\u4f53\u7684\u76f8\u5bf9\u4f4d\u7f6e\u7684\u4fe1\u606f\u3002\n\u5982\u679c\u6211\u4eec\u624b\u5934\u65e2\u6ca1\u6709\u5173\u4e8e\u7cfb\u7edf\u7684\u4fe1\u606f\uff0c\u4e5f\u6ca1\u6709\u5173\u4e8e\u5b83\u7684\u5bf9\u79f0\u6027\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u5f97\u4e0d\u53c2\u8003\u6761\u4ef6\u6982\u7387\u3002\u5728\u5bf9\u6d4b\u91cf\u7ed3\u679c\u8fdb\u884c\u5904\u7406\u4e4b\u524d\uff0c\u5bf9\u6bcf\u4e2a\u6784\u5f62\u8fdb\u884c\u79fb\u4f4d\uff0c\u5e76\u5c06\u5176\u51e0\u4f55\u4e2d\u5fc3\u5b9a\u4f4d\u5728\u5750\u6807\u7cfb\u4e2d\u5fc3\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u8fd9\u6837\u5c31\u6d88\u9664\u4e86\u8d28\u5fc3\u4f4d\u7f6e\u7684\u91cf\u5b50\u4e0d\u786e\u5b9a\u6027\u3002\u5bfb\u627e\u6700\u53ef\u80fd\u6784\u578b\u7684\u7b97\u6cd5\u662f\u57fa\u4e8e\u540e\u9009\u62e9\u7684\uff0c\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4\u3002(I)\u8981\u6536\u96c6\u5355\u6b21\u62cd\u6444\u7684\u56fe\u50cf\uff0c\u5fc5\u987b\u627e\u5230\u6784\u578b\u7684\u76f4\u65b9\u56fe\uff0c\u5373\u5355\u7c92\u5b50\u6982\u7387\u5bc6\u5ea6\uff0c\u5e76\u786e\u5b9a\u5176\u6700\u5927\u503c\u3002(Ii)\u5728\u4e0b\u4e00\u6b65\u4e2d\uff0c\u5047\u8bbe\u7b2c\u4e00\u4e2a\u7c92\u5b50\u4f4d\u4e8e\u5355\u7c92\u5b50\u5bc6\u5ea6\u6700\u5927\u503c(\u6216\u66f4\u597d\u5730\u5728\u9884\u5148\u8bbe\u5b9a\u7684\u8ddd\u79bb\u5185\uff0c\u6700\u5927\u503c\u4e3a\\(\\varepsilon\\))\uff0c\u5219\u5e94\u627e\u5230\u6761\u4ef6\u6982\u7387\u3002\u4e3a\u6b64\uff0c\u5728\u540e\u9009\u62e9\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u6536\u96c6\u7b26\u5408\u4e0a\u8ff0\u6807\u51c6\u7684\u5355\u5f20\u7167\u7247\u3002\u8fd9\u4e9b\u6784\u578b\u7684\u76f4\u65b9\u56fe\u7ed9\u51fa\u4e86\u4e24\u70b9\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u3002(Iii)\u5047\u8bbe\u7b2c\u4e09\u4e2a\u7c92\u5b50\u7684\u4f4d\u7f6e\u5728\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u9009\u62e9\u540e\u7684\u8fc7\u7a0b\uff0c\u5e76\u6784\u9020\u4e09\u70b9\u6761\u4ef6\u6982\u7387\u3002\u6574\u4e2a\u8fc7\u7a0b\u5fc5\u987b\u91cd\u590d\uff0c\u76f4\u5230\u627e\u5230\u6240\u6709N\u4e2a\u6700\u5927\u503c\u3002\u5728\u6761\u4ef6\u6982\u7387\u6709\u51e0\u4e2a\u5c40\u90e8\u6781\u5927\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b58\u5728\u5168\u5c40\u6781\u5927\u503c\uff0c\u5219\u5e94\u8be5\u9009\u62e9\u5168\u5c40\u6781\u5927\u503c\uff0c\u6216\u8005\u9009\u62e9\u4efb\u4f55\u7b49\u4ef7\u7684\u6781\u5927\u503c\u3002\n\u4e3a\u4e86\u8bf4\u660e\u57fa\u4e8e\u6761\u4ef6\u6982\u7387\u7684\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u5728\u56fe2\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e86\u4e0a\u8ff0\u9488\u5bf9\\(N=3)\u4e2a\u539f\u5b50\u7684\u8fde\u7eed\u6b65\u9aa4\u7684\u7ed3\u679c\u3002\u5728\u7b2c\u4e00\u5e45\u56fe(A)\u4e2d\uff0c\u663e\u793a\u4e86\u6d88\u9664\u8d28\u5fc3\u4e0d\u786e\u5b9a\u6027\u540e\u7684\u5355\u7c92\u5b50\u6982\u7387\u5bc6\u5ea6\u3002\u7531\u4e8e\u8fd9\u79cd\u6d88\u9664\uff0c\u5bc6\u5ea6\u5728\u4e2d\u5fc3\u6709\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u5e76\u5728\u73af\u4e0a\u8fbe\u5230\u6700\u5927\u503c\u3002\u7136\u540e\uff0c\u6211\u4eec\u9009\u62e9\u73af\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5e76\u4e14\u53ea\u4fdd\u7559\u5176\u4e2d\u6709\u7c92\u5b50\u7684\u56fe\u7247\u8ddd\u79bb\u6240\u9009\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8e\\(\\varepsilon\\)\u3002\u5728\u56fe2\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\\(\\varepsilon=0.2\\)\u3002\u8fd9\u6837\u5f97\u5230\u7684\u4e24\u70b9\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u5982\u56fe(B)\u6240\u793a\u3002\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u76f8\u7b49\u7684\u6700\u5927\u503c\u3002\u5728\u7b2c\u4e09\u4e2a\u9762\u677f(C)\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u901a\u8fc7\u540e\u9009\u62e9\u83b7\u5f97\u7684\u4e09\u70b9\u6761\u4ef6\u6982\u7387\u3002\u53ef\u4ee5\u770b\u5230\u4e09\u4f53\u51e0\u7387\u5bc6\u5ea6\u6700\u5927\u7684\u6ce1\u5229\u6676\u4f53\u6784\u578b\u3002\u572840K\u8d85\u51b7\u7cfb\u7edf32\u7684\u5b9e\u9a8c\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u53ea\u89c2\u5bdf\u5230\u4e86\u4e24\u70b9\u5173\u8054\u51fd\u6570\uff0c\u4f46\u9ad8\u9636\u5173\u8054\u4e5f\u5728\u5b9e\u9a8c\u8303\u56f4\u5185\u3002\n\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u3002(A)\u53bb\u9664\u8d28\u5fc3\u4e0d\u786e\u5b9a\u6027\u540e\u7684\u5355\u7c92\u5b50\u5bc6\u5ea6\uff0c(B)\u4e24\u7c92\u5b50\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\uff0c(C)\u4e09\u7c92\u5b50\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u3002\n\u5982\u679c\u7cfb\u7edf\u5177\u6709\u67d0\u4e9b\u5bf9\u79f0\u6027\uff0c\u5219\u4e0a\u8ff0\u8fc7\u7a0b\u662f\u975e\u5e38\u6d6a\u8d39\u7684\u3002\u8bb8\u591a\u6d4b\u91cf\u503c\u53ef\u80fd\u4ec5\u4ec5\u56e0\u4e3a\u5b83\u4eec\u7684\u5bf9\u79f0\u53d8\u6362\u4e0d\u540c\u800c\u4ece\u56fe\u7247\u96c6\u5408\u4e2d\u5220\u9664\u3002\u5728\u56fe2(A)\u4e2d\uff0c\u62cd\u6444\u4e86\u4e00\u4e9b\\(L={10}^{7}\\)\u5feb\u7167\uff0c\u800c\u901a\u5411\u56fe2(C)\u7684\u8fc7\u7a0b\u4ec5\u7559\u4e0b\\(7\\x{10}^{4}\\)\u4e2a\u5feb\u7167\u3002\u6211\u4eec\u7814\u7a76\u7684\u7cfb\u7edf\u5177\u6709\u4e00\u5b9a\u7684\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u53e6\u4e00\u4e2a\u56fe\u50cf\u5904\u7406\u8fc7\u7a0b27\u3002\u8ba9\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5728\u6bcf\u4e00\u6b21\u6d4b\u91cf\u4e2d\uff0c\u5355\u7c92\u5b50\u5bc6\u5ea6\u7684\u65cb\u8f6c\u5bf9\u79f0\u6027\u88ab\u4e0d\u540c\u7a0b\u5ea6\u5730\u7834\u574f\u3002\u6bcf\u4e2a\u6d4b\u5f97\u7684\u6784\u578b\u4ee3\u8868\u4e00\u6574\u7c7b\u6784\u578b\uff0c\u5b83\u4eec\u53ea\u662f\u5728\u5bf9\u79f0\u53d8\u6362\u4e0a\u6709\u6240\u4e0d\u540c\u3002\u6211\u4eec\u5e0c\u671b\u5229\u7528\u8fd9\u4e9b\u5bf9\u79f0\u6027\uff0c\u5c06\u6240\u6709\u5355\u6b21\u62cd\u6444\u7684\u56fe\u7247\u4e0e\u6700\u5927\u5316N\u4f53\u6982\u7387\u7684\u56fe\u7247\u8fdb\u884c\u6bd4\u8f83\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5047\u8bbe\u4e86\u89e3\u624b\u5934\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u77e5\u9053\u96f6\u6e29\u4e0b\u7684\u51e0\u4f55\u6392\u5217\uff0c\u5373\u6ce1\u5229\u6676\u4f53\u7684\u51e0\u4f55\u5f62\u72b6\uff0c\u5047\u8bbe\u5176\u9876\u70b9\u4f4d\u4e8e\\({\\bf{r}_{0}\\}}_{N}=\\{\\bf{r}_{01}\uff0c{{\\bf{r}_{02}\uff0c\\ldots\uff0c{{\\bf{r}_{0n}\u3002\u540e\u8005\u53ef\u4ee5\u4ece\u7406\u8bba\u4e0a\u5f97\u5230\u3002\u7136\u540e\u5c06\u4e0e\u7279\u5b9a\u6d4b\u91cf\u5b9e\u73b0\u76f8\u5bf9\u5e94\u7684\u6240\u6709\u5355\u6b21\u7ed3\u679c\\({\\{\\bf{x}}\\}}_{N}=\\{\\bf{x}_{1}\uff0c{{\\bf{x}_{2}\uff0c\\ldots\uff0c{{\\bf{x}_{N}\\}\\)\u4e0e\n..", "note_en": "The best known manifestation of the Fermi-Dirac statistics is the Pauli exclusion principle: no two identical fermions can occupy the same one-particle state. This principle enforces high-order correlations in systems of many identical fermions and is responsible for a particular geometric arrangement of trapped particles even when all mutual interactions are absent. These geometric structures, called Pauli crystals, are predicted for a system of  N identical atoms trapped in a harmonic potential. They emerge as the most frequent configurations in a collection of single-shot pictures of the system. Here we study how fragile Pauli crystals are when realistic experimental limitations are taken into account. The influence of the number of single-shots pictures available to analysis, thermal fluctuations and finite efficiency of detection are considered. The role of these sources of noise on the possibility of experimental observation of Pauli crystals is shown and conditions necessary for the detection of the geometrical arrangements of particles are identified.\n     Ultracold atoms provide an ideal playground for simulating not only various many-body quantum systems  1, 2, 3, 4, 5, 6, but also for studies of few-body physics  7. Unprecedented progress in controlling and monitoring of ultracold atoms opens a whole world of new possibilities. For example controlled few-body systems with sufficiently suppressed atom number fluctuations can be achieved in the Mott insulating phase of a lattice system via single-site addressing techniques  8. Alternatively, deterministic preparation of a few-body system is possible in a single microtrap  9, 10. Small systems of 1\u201310 fermionic atoms can be prepared in well-defined quantum states with high fidelity.\n Recently developed single-site fluorescence imaging technique is a major breakthrough in monitoring of many-body systems  11, 12, 13, 14, 15, 16, 17, 18. This great imaging techniques can simultaneously determine positions of all individual atoms in optical lattices with single-site resolution  12, 13. Snapshots of the atomic ensemble within a single isolated trap could harbor many crucial information about the system. Very important in this respect are higher-order spatial correlations, which are elusive to one-particle detection, but can be revealed from the  N-body probability density  19, 20, 21, 22. One of the best examples is recent experiment  22 in which the detection of spontaneous self-organized ordering in Rydberg many-body systems created in a Bose-Einstein condensate has been shown by comparing many single-shot pictures of the system.\n Experimental progress challenges theory. Quantum many-body systems observed with single-particle resolution attract interest of physicists because they give access to information which is not accessible not only to the most common one-body measurements, but also to two-point correlations. Examples of processes whose understanding requires description going beyond two-point correlations are quite numerous. They include for instance the seminal paper  23, where appearance of interference fringes in the course of  N-body detection is shown. On contrary, no interference is seen in the one-body picture. Similarly, solitons emerge from a type II excited state of a one-dimensional system of bosons interacting via short-range potential described by the Lieb-Liniger model  24. The solitons appear as a result of high-order correlations in the system and can be uncovered in a single-shot detection of many atoms. The work in  25 has demonstrated how to simulate single-shot experiments of general ultracold bosonic systems based on numerical solutions of the many-body Schr\u00f6dinger equation. Simulations of time-dependent single-shot pictures monitoring many-body dynamics revealing the appearance of fluctuating vortices in attractive BEC were suggested  26.\n In this paper we investigate yet another example of high order correlations in a few-body system. The correlations we are interested in are solely due to the quantum statistics and indistinguishability. Indistinguishable nature of identical particles leads to very important consequences in quantum physics. It inherently imposes correlations between particles, even in absence of any mutual interactions. It turns out that when many identical fermions at zero-temperature are trapped within an external two-dimensional harmonic trap, the particles orient themselves in a striking fashion unveiling specific geometric structures, called Pauli crystals. We have shown recently how to extract these geometric structures from multiple single-shot pictures of the many-body system  27. Suitable analysis of a large number of data gives clear, unequivocal picture of Pauli crystals. There is a question, however, how much the observed images are deteriorated by various experimental imperfections and if the existence of Pauli crystal can be verified experimentally. Very recently analogous Pauli structures has been reported  28. They were obtained by substituting Pauli principle with a \u201cinteraction potential\u201d.\n It was pointed by Wigner  29 that energy of ultradilute electron gas at zero-temperature is dominated by the Coulomb interactions and then electrons arrange themselves in a \u201cWigner crystal\u201d structures. Similarly, ions trapped in a harmonic potential form \u201cCoulomb crystals\u201d  30 - the structures of Wigner crystal geometry. For larger number of atoms,  \\(N\\ge 8\\), the Pauli crystals differ from Wigner and Coulomb crystals. Therefore, it is clear that mutual interactions lead to different arrangements. Therefore, it is interesting to study the crossover effects and transition from Pauli to Coulomb crystals. It requires, however, a detailed knowledge of the N-body wavefunction of interacting system and is beyond the scope of this paper.\n A single-shot measurement via fluorescence microscope can determine the spatial configuration of  N atoms. Detection of Pauli crystals from single-shot measurement\u2019s outcomes may, however, be challenging. In a single-shot the positions of  N-atoms can be obtained but the outcome of such detection is unpredictable because of probabilistic nature of quantum mechanics. It is different in every realization. Therefore it is very difficult to notice any geometric arrangement of atoms. But the most frequent ones might be quite similar  27. In fact  N-body probability density has a maximum for a certain arrangement of fermionic atoms \u2013 Pauli crystals. One can expect that in a collection of  N-particle pictures, there are many such results where atoms occupy positions \u201caround\u201d vertexes of a Pauli crystal. Uncertainties of the positions due to quantum shot-to-shot fluctuations causes the crystal vertexes to be spatially extended even at zero temperature. Moreover, there are several other practical constrains that might lead to additional smearing of crystal vertexes. These are thermal fluctuations, limited number of single-shot experiments, and imperfections due to atom number fluctuation in the measured ensemble of single-shot pictures. All these imperfections may even cause the crystalline structures to be beyond the experimental reach. The present paper provides careful examination of a role of these fluctuations to understand if Pauli crystals can be observed. We take into account practical constraints mentioned above. It is shown below that the geometry of the Pauli crystals remains seen even if it is diffused by some amount of experimental noise. The noise however, has to be rather small.\n We consider non-interacting polarized fermions trapped in a two-dimensional isotropic harmonic potential with the frequency  \\({\\omega }_{x}={\\omega }_{y}=\\omega \\). The single-particle quantum state,  \\({\\psi }_{nm}(x,y)\\), bound in the 2D harmonic trap is given by\n  where  \\({ {\\mathcal H} }_{n}\\) is the  \\({n}^{th}\\) Hermite polynomial,  \\({\\mathscr{N}}={{\\mathrm{(2}}^{n+m}n!m!\\sqrt{\\pi })}^{1/2}\\) is the normalization constant. Quantum numbers  n and  m enumerate excitations in the  x and  y direction, respectively. We use natural harmonic oscillator units,  \\({a}_{0}=\\sqrt{\\hslash /M\\omega }\\), where  M is the mass of the particle. The single-particle energy corresponding to the quantum state  \\({\\psi }_{mn}\\) is  \\({E}_{mn}=(m+n+\\mathrm{1)}\\hslash \\omega \\), and each of these energy levels are  \\((m+n+\\mathrm{1)}\\)-fold degenerate.\n In the  N-body ground state all identical fermionic atoms occupy the lowest available single-particle quantum states up to the Fermi energy. This is due to the Pauli exclusion principle, which prohibits them from occupying the same quantum state. The ground state is not uniquely defined if the number of states at the Fermi level exceeds the number of particles which have to be located there. However, in particular cases when  N\u2009=\u20091, 3, 6, 10, 15, \u2026, the many-body ground state of the corresponding system is non-degenerate. Obviously, geometry of Pauli crystals is characteristic of a given state. If energy does not specify uniquely the state we have a variety of different states and geometric configurations corresponding to a given energy. Non-zero temperature resolves this issue. All states of the same energy contribute with equal weights to the thermal density matrix. Here, for a simplicity, we limit our discussion to isotropic trap and fully occupied Fermi surface.\n The ground state energy is the sum of single particles energies of the occupied states,  \\({ {\\mathcal E} }_{0}^{N}/\\hslash \\omega ={\\sum }_{i}^{N}({m}_{i}+{n}_{i}+\\mathrm{1)}\\). Note that any two given sets of  \\(({m}_{i},{n}_{i})\\) associated with a single-particle orbital cannot be identical since the many-body ground state wavefunction,  \\({{\\rm{\\Psi }}}_{0q}^{N}({{\\bf{r}}}_{1},{{\\bf{r}}}_{2},\\ldots ,{{\\bf{r}}}_{N})\\), is obtained by imposing anti-symmetrization, via the Slater determinant, of the occupied single-particle states. The subscript  \\(q\\) in  \\({{\\rm{\\Psi }}}_{0q}^{N}\\) accounts for the degeneracy of the N-body ground state. The probability,  \\({{\\mathscr{P}}}_{q}^{N}\\), of finding particles at  \\(({{\\bf{r}}}_{1},{{\\bf{r}}}_{2},\\ldots ,{{\\bf{r}}}_{N})\\) when the system is in the ground state is:\n   The maximum of  \\({{\\mathscr{P}}}_{q}^{N}\\), Eq. ( 2), can be easily obtained. For example it can be found by employing the Monte-Carlo algorithm  31, where starting from a randomly chosen initial configuration, another configuration is proposed by shifting the atom positions. The move is accepted if the configuration is more probable than the previous one.\n It turns out that, as it has been shown in  27, the most probable arrangement of atoms manifest unique geometrical structures at zero temperature. These configurations for  N\u2009=\u20093, 6, 10, and 15 are shown in Fig.\u00a0 1. Three atoms orient themselves at the vertexes of an equilateral triangle. A two-shell structure is noticed for  N\u2009=\u20096 with a single atom positioned at the trap center, representing the first (innermost) shell, and the second shell formed by five atoms arranged in a pentagon.  N\u2009=\u200910 configuration exhibits a two-shell structure with a triangle and a heptagon, respectively, forming the inner and outer shells. A third shell emerges for  N\u2009=\u200915 atoms, where one atom occupies the trap center, and equally spaced five and nine atoms form the second, and the third (outermost) shell. It can be seen that the relative orientations of the shells are rigid with respect to each other. However each structure as a whole can be rotated without affecting the value of  \\({{\\mathscr{P}}}_{q}^{N}\\).\n Crystalline structures formed by identical fermions in two-dimensional harmonic trap. The blue dots show the most probable configurations obtained by maximizing the  N-particle probability for ( a) 3 atoms, ( d) 6 atoms, ( e) 10 atoms, and ( f) 15 atoms. The black dotted, the red dashed, and the green solid circles represent the first shell (innermost), second shell, and third shell, respectively. First shell reduces to a point, when it is composed of a single atom present in the center.\n We assume here that positions of atoms occupying the harmonic trap can be determined with high resolution, larger then their separation which is of the order of oscillator unit of length. This assumption is quite optimistic at this moment. At present the resolution of atomic fluorescence microscopes is higher than the lattice spacing and one can distinguish atoms at different sites. It is not possible however, to resolve positions of atoms residing in the same site. To overcome this problem atoms ought to be released prior to detection of their positions. Only after some expansion the atoms can be distinguished. Ballistic expansion however, does not change the geometry of the initial arrangement. For the harmonic confinement expansion does not disturb geometry of the system, it results in scaling of all distances and we ignore it in the following analysis.\n As an outcome of an instantaneous picture of all atoms in their ground state we get a set of  N position vectors. But this outcome is totally unpredictable due to the probabilistic nature of quantum mechanics. Consequently, configurations emerging out of different realizations are different and each of them is unpredictable. Therefore a single picture of  N-body system cannot reveal the geometric configurations of particles predicted by using the probability distribution. The natural strategy could be to repeat the experiment with the same initial state and combine all outcomes of the measurements to form a histogram of atomic positions in 2D-plane. Surprisingly enough, the histogram of repeated measurements does not help too. It gives a one particle density, not the  N-particle correlation function.\n Indeed, the histogram of  L simultaneously repeated measurements of positions  \\({x}_{i}^{s}\\) of  N atoms is defined as:\n  where index  s refers to different measurements. The function  \\(\\delta ({\\bf{x}}-{\\bf{X}})\\) is equal to one if the position  x of a particle coincides with the position of a detector located at  X with an accuracy  \\({\\rm{\\Delta }}\\), i.e. if a particle is found in a volume  \\(V={{\\rm{\\Delta }}}^{2}\\) around  X. In an opposite case, the function  \\(\\delta ({\\bf{x}}-{\\bf{X}})\\) vanishes. Obviously,  \\(H({\\bf{X}})\\) is proportional to a quantum-mechanical one-particle probability distribution. This can be seen by changing the order of summation. The histogram has no information about correlations of particles\u2019 positions because summation over configurations can be done independently for every particle. This erases information about relative positions of particles and a geometry the system.\n If we have no information about the system at hand as well as about its symmetries, then we have to refer to conditional probabilities. Prior to processing the outcomes of measurement it is useful to shift every configuration and locate its geometric center at the center of coordinates system. This way the quantum uncertainty of the center of mass position is eliminated. The algorithm of finding the most probable configuration is based on post-selection and can be divided into three steps. (i) Having collection of single shot pictures one has to find histogram of configurations, i.e. the one-particle probability density, and determine its maximum. (ii) In the next step a conditional probability should be found assuming the first particle to be positioned at the one-particle density maximum (or better within a pre-set distance,  \\(\\varepsilon \\) to the maximum). To this end, in a post-selection procedure, we collect only these single-shots which meet the above criterion. Histogram of theses configurations gives the two-point conditional probability density. (iii) Assuming the third particle\u2019s position to be located at this maximum, we can repeat the post-selection procedure and construct the three-point conditional probability. The whole procedure has to be repeated until all  N maxima are found. In case when there are several local maxima of a conditional probability, one should choose a global maximum if such exists, or any of the equivalent maxima.\n To illustrate this procedure based on conditional probabilities, in Fig.\u00a0 2 we show results of consecutive steps described above for  \\(N=3\\) atoms. In the first panel (a) the one particle probability density, after eliminating the center of mass uncertainty, is shown. Because of this elimination the density has a minimum at the center and reaches a maximal value on a ring. Then we select one point on the ring and keep only the pictures in which there is a particle at a distance smaller then  \\(\\varepsilon \\) from the selected point. In Fig.\u00a0 2, we set  \\(\\varepsilon =0.2\\). Obtained this way two-point conditional probability density is shown in panel (b). Two equal maxima are visible. In the third panel (c) we show three-point conditional probability obtained via post-selection. The Pauli crystal \u2013 configuration maximizing the three-body probability density, can be seen. In expeiment in  40K ultracold system  32, only two-point correlation functions have been observed so far, but higher order correlations are also within experimental reach.\n Conditional probability densities. ( a) one-particle density after removing the center of mass uncertainty, ( b) two-particle conditional probability density, ( c) three-particle conditional probability density.\n  The above procedure is very wasteful if the system has some symmetries. Many measurements might be removed from a collection of pictures only because they differ by a symmetry transformation. In Fig.\u00a0 2(a) some  \\(L={10}^{7}\\) snapshots are taken, while the procedure leading to Fig.\u00a0 2(c) left only about  \\(7\\times {10}^{4}\\) snapshots. The system we study has some symmetry and we will use another procedure of image processing  27. Let us note that in every measurement the rotational symmetry of the one-particle density is broken differently. Each measured configuration represents a whole class of configurations which differ by a symmetry transformation only. We want to take advantage of these symmetries and compare all single-shot pictures, to the one maximizing the  N-body probability. Here we assume that knowing the system at hand we know the geometrical arrangement at zero temperature, i.e., the geometry of the Pauli crystal, the vertexes of which are assumed to be positioned at  \\({\\{{{\\bf{r}}}_{0}\\}}_{N}=\\{{{\\bf{r}}}_{01},{{\\bf{r}}}_{02},\\ldots ,{{\\bf{r}}}_{0N}\\}\\). The latter can be obtained on the theoretical ground. All single-shot outcomes  \\({\\{{\\bf{x}}\\}}_{N}=\\{{{\\bf{x}}}_{1},{{\\bf{x}}}_{2},\\ldots ,{{\\bf{x}}}_{N}\\}\\) corresponding to a particular measured realization are compared then to the pattern after some previous preprocessing - a symmetry transformation.\n As we will not pay attention to a particular enumeration of particles, the only relevant symmetry operation is rotation around the trap center. To eliminate the quantum uncertainty of the center of mass and to concentrate on the relative positions of particles we shift the center of mass of every chosen configuration to the origin of the coordinate system,  \\({\\bf{x}}{\\text{&#39;}}_{i}={{\\bf{x}}}_{i}-{{\\bf{x}}}_{cm}\\) where  \\({{\\bf{x}}}_{cm}=\\mathrm{(1}/N){\\sum }_{i=1}^{N}{{\\bf{x}}}_{i}\\). For simplicity we skip the \u2018  prime\u2019 symbol in the following.\n Quantitative comparison of a particular snapshot to the pattern has to be based on a definition of the distance between the snapshot and the pattern. We will simply use the angular distance (squared) between particles of the pattern and the snapshot. It works well in our case. First, we re-enumerate all particles to order them according to increasing azimuthal angle,  \\({\\varphi }_{i}\\), within every shell, separately. We do the same for the pattern. At this step we use polar coordinates,  \\({{\\bf{x}}}_{i}=({d}_{i},{\\varphi }_{i})\\) for positions of the atoms, and  \\({{\\bf{r}}}_{0i}=({\\rho }_{i}\n......", "posttime": "2020-05-25 06:26:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6ce1\u5229,pauli,\u7c92\u5b50", "title": "\u9502\u4e2d\u6ce1\u5229\u6676\u4f53\u7684\u53ef\u89c2\u6027\u7814\u7a76", "title_en": "On the Observability of Pauli Crystals in Lithium", "transed": 1, "url": "https://www.nature.com/articles/s41598-017-14952-2", "via": "", "real_tags": ["\u6ce1\u5229", "pauli", "\u7c92\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "87e0db1ab08bef61850701bfb5dea5c0.png", "infoid": 1003572, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "{fmt}\u662fC++\u7684\u5f00\u653e\u6e90\u7801\u683c\u5f0f\u5e93\uff0c\u53ef\u4ee5\u5b89\u5168\u5feb\u901f\u5730\u66ff\u4ee3printf\u548ciostream\u3002\n\u9ad8\u6027\u80fd\uff1a\u6bd4printf\u548costream\u7684\u901a\u7528\u6807\u51c6\u5e93\u5b9e\u73b0\u66f4\u5feb\u3002\u8bf7\u53c2\u9605C++\u4e2d\u7684\u901f\u5ea6\u6d4b\u8bd5\u548c\u5feb\u901f\u6574\u6570\u5230\u5b57\u7b26\u4e32\u8f6c\u6362\u3002\n\u6e90\u4ee3\u7801(\u6700\u4f4e\u914d\u7f6e\u4ec5\u7531core.h\u3001format.h\u548cformat-inl.h\u4e09\u4e2a\u5934\u6587\u4ef6\u7ec4\u6210)\u548c\u7f16\u8bd1\u4ee3\u7801\u90fd\u5f88\u5c0f\u3002\u8bf7\u53c2\u89c1\u7f16\u8bd1\u65f6\u95f4\u548c\u4ee3\u7801\u81a8\u80c0\u3002\n\u5b89\u5168\u6027\uff1a\u8be5\u5e93\u662f\u5b8c\u5168\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u62a5\u544a\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u9519\u8bef\uff0c\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u53ef\u9632\u6b62\u7f13\u51b2\u533a\u6ea2\u51fa\u9519\u8bef\u3002\nfmt\uff1a\uff1aprint(&#34\uff1bHello\uff0c{}\uff01&#34\uff1b\uff0c&#34\uff1bworld&#34\uff1b)\uff1b//\u7c7b\u4f3cPython\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5fmt\uff1a\uff1aprintf(&#34\uff1bHello\uff0c%s\uff01&#34\uff1b\uff0c&#34\uff1bworld&#34\uff1b)\uff1b//printf\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5\u3002\nstd\uff1a\uff1astring s=fmt\uff1a\uff1aformat(&#34\uff1bI&#39\uff1bD\u5b81\u613f\u662f{1}\u800c\u4e0d\u662f{0}\u3002(&#34\uff1b\uff0c&#34\uff1bRight&#34\uff1b\uff0c&#34\uff1b)\uff1b//s=&#34\uff1bI&#39\uff1bI&#34\uff1bI&/s=#34\uff1bI&#39\uff1b\u6211\u5b81\u613f\u5feb\u4e50\u4e5f\u4e0d\u613f\u6b63\u786e\u3002\n$c++-iinclude-std=c++14 test.cc.test.cc\uff1a4\uff1a17\uff1a\u6ce8\u610f\uff1a\u5728\u51fd\u6570\u6a21\u677f\u4e13\u95e8\u5316\u5b9e\u4f8b\u5316&#39\uff1bfmt\uff1a\uff1av5\uff1a\uff1aformat&lt\uff1bS\uff0cint&gt\uff1b&#39\uff1b\u8bf7\u6c42\u7684herestd\uff1a\uff1astring s=format(fmt_string(&#34\uff1b{2}&#34\uff1b)\uff0c42)\uff1b^include/fmt/core.h\uff1a778\uff1a19\uff1a\u6ce8\u610f\uff1a\u65e0\u3002^INCLUDE/fmt/Format.h\uff1a2226\uff1a16\uff1a\u6ce8\u610f\uff1a\u5728\u8c03\u7528&#39\uff1b&amp\uff1bchecker.context_-&gt\uff1bon_error(&amp\uff1b&#34\uff1bargument\u7d22\u5f15\u65f6\u8d85\u51fa\u8303\u56f4&#34\uff1b[0])&#39\uff1bCONTEXT_.ON_ERROR(&#34\uff1b\u53c2\u6570\u7d22\u5f15\u8d85\u51fa\u8303\u56f4&#34\uff1b)\uff1b^\u3002\nfmt\uff1a\uff1amemory_buffer buf\uff1bformat_to(buf\uff0c&#34\uff1b{}&#34\uff1b\uff0c42)\uff1b//\u66ff\u6362itoa(42\uff0cbuffer\uff0c10)format_to(buf\uff0c&#34\uff1b{\uff1ax}&#34\uff1b\uff0c42)\uff1b//\u66ff\u6362itoa(42\uff0cbuffer\uff0c16)//\u4f7f\u7528to_string(Buf)\u6216buf.data()\u8bbf\u95ee\u5b57\u7b26\u4e32\n#include&#34\uff1bfmt/format.h&#34\uff1bstruct date{int\u5e74\uff0c\u6708\uff0c\u65e5\uff1b}\uff1b\u6a21\u677f&lt\uff1b&gt\uff1bstruct fmt\uff1a\uff1aFormatter&lt\uff1bdate&gt\uff1b{stexpr auto parse(format_parse_context&amp\uff1bctx){\u8fd4\u56dectx\u3002Begin()\uff1b}Template&lt\uff1bTypeName FormatContext&gt\uff1bAuto Format(Const Date&amp\uff1bd\uff0cFormatContext&amp\uff1bCTX){Return Format_To(CTX.\u3002out()\uff0c&#34\uff1b{}-{}-{}&#34\uff1b\uff0cD.\u5e74\uff0cD.\u6708\uff0cD.\u65e5)\uff1b}}\uff1bstd\uff1a\uff1astring s=fmt\uff1a\uff1aformat(&#34\uff1b\u65e5\u671f\u4e3a{}&#34\uff1b\u65e5\u671f{2012\uff0c12\uff0c9})\uff1b//s==&#34\uff1b\u65e5\u671f\u4e3a2012-12-9&#34\uff1b\n//\u6253\u5370\u683c\u5f0f\u5316\u7684\u9519\u8bef\u6d88\u606f\u3002void vreport_error(const char*format\uff0cfmt\uff1a\uff1aformat_args args){fmt\uff1a\uff1aprint(&#34\uff1berror\uff1a&#34\uff1b)\uff1bfmt\uff1a\uff1avprint(format\uff0cargs)\uff1b}\u6a21\u677f&lt\uff1btypeName.\u3002\u53c2\u6570&&gt;void REPORT_ERROR(\u5e38\u91cf\u5b57\u7b26*\u683c\u5f0f\uff0c\u5e38\u91cf\u53c2\u6570(&A\uff1b).\u3002args){vreport_error(format\uff0cfmt\uff1a\uff1amake_format_args(args.))\uff1b}report_error(&#34\uff1b\u627e\u4e0d\u5230\u6587\u4ef6\uff1a{}&#34\uff1b\uff0c\u8def\u5f84)\uff1b\n\u8bf7\u6ce8\u610f\uff0c\u4e0e\u5b8c\u5168\u53c2\u6570\u5316\u7684\u7248\u672c\u76f8\u6bd4\uff0cvreport_error\u4e0d\u5728\u53c2\u6570\u7c7b\u578b\u4e0a\u53c2\u6570\u5316\uff0c\u8fd9\u53ef\u4ee5\u7f29\u77ed\u7f16\u8bd1\u65f6\u95f4\u5e76\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u3002\n\u4ee5\u4e0a\u7ed3\u679c\u662f\u901a\u8fc7\u4f7f\u7528clang++-O3-DSPEED_TEST-DHAVE_FORMAT\u5728macOS10.14.6\u4e0a\u6784\u5efatinyformat_test.cpp\u5e76\u53d6\u4e09\u6b21\u8fd0\u884c\u4e2d\u7684\u6700\u4f73\u7ed3\u679c\u751f\u6210\u7684\u3002\u5728\u6d4b\u8bd5\u4e2d\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32&#34\uff1b%0.10f\uff1a%04d\uff1a%+g\uff1a%s\uff1a%p\uff1a%c\uff1a%%\\n&#34\uff1b\u6216\u7b49\u6548\u5b57\u7b26\u4e32\u586b\u5145\u4e862,000,000\u6b21\uff0c\u5e76\u5c06\u8f93\u51fa\u53d1\u9001\u5230/dev/null\uff1b\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002\n{fmt}\u5728\u6d6e\u70b9\u683c\u5f0f\u5316(dtoa-Benchmark)\u4e0a\u6bd4std\uff1a\uff1aostrg stream\u548cspintf\u5feb10\u500d\uff0c\u4e0e\u53cc\u91cd\u8f6c\u6362\u4e00\u6837\u5feb\uff1a\n\u811a\u672cbloat-test.pyfrom\u683c\u5f0f\u57fa\u51c6\u6d4b\u8bd5\u91cd\u8981\u9879\u76ee\u7684\u7f16\u8bd1\u65f6\u95f4\u548c\u4ee3\u7801\u81a8\u80c0\u3002\u5b83\u751f\u6210100\u4e2a\u7ffb\u8bd1\u5355\u5143\uff0c\u5e76\u5728\u6bcf\u4e2a\u5355\u5143\u4e2d\u4f7f\u7528printf()\u6216\u5b83\u7684\u4ea4\u66ff\u4f7f\u75285\u6b21\u6765\u6a21\u62df\u4e2d\u578b\u9879\u76ee\u3002\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5927\u5c0f\u548c\u7f16\u8bd1\u65f6\u95f4(Apple LLVM\u7248\u672c8.1.0(clang-802.0.42)\u3001MacOS Sierra\uff0c\u4e09\u9009\u4e00)\u5982\u4e0b\u8868\u6240\u793a\u3002\n\u5982\u60a8\u6240\u89c1\uff0c\u5c31\u4ea7\u751f\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5927\u5c0f\u800c\u8a00\uff0c{fmt}\u7684\u5f00\u9500\u6bd4iostream\u5c1160%\uff0c\u4e0eprintf\u975e\u5e38\u63a5\u8fd1\u3002Boost Format\u548cFolly Format\u7684\u7ba1\u7406\u8d39\u7528\u6700\u5927\u3002\nprintf+string\u4e0eprintf\u76f8\u540c\uff0c\u4f46\u4f7f\u7528\u989d\u5916\u7684&lt\uff1bstring&gt\uff1binclude\u6765\u6d4b\u91cf\u540e\u8005\u7684\u5f00\u9500\u3002\nlibc\u3001lib(Std)c++\u548clibfmt\u90fd\u94fe\u63a5\u4e3a\u5171\u4eab\u5e93\uff0c\u4ec5\u7528\u4e8e\u6bd4\u8f83\u683c\u5f0f\u5316\u51fd\u6570\u5f00\u9500\u3002Boost\u683c\u5f0f\u662f\u4ec5\u9650\u6807\u9898\u7684\u5e93\uff0c\u56e0\u6b64\u5b83\u4e0d\u63d0\u4f9b\u4efb\u4f55\u94fe\u63a5\u9009\u9879\u3002\n\u6709\u5173\u5982\u4f55\u6784\u5efa\u5e93\u548c\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u7684\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u6784\u5efa\u5e93\u3002\n\u57fa\u51c6\u4f4d\u4e8e\u5355\u72ec\u7684\u5b58\u50a8\u5e93\u4e2d\uff0c\u5373\u683c\u5f0f\u57fa\u51c6\uff0c\u56e0\u6b64\u8981\u8fd0\u884c\u57fa\u51c6\uff0c\u60a8\u9996\u5148\u9700\u8981\u514b\u9686\u6b64\u5b58\u50a8\u5e93\u5e76\u4f7f\u7528CMake\u751f\u6210Makefile\uff1a\nScylla\uff1a\u4e0eCassandra\u517c\u5bb9\u7684NoSQL\u6570\u636e\u5b58\u50a8\uff0c\u53ef\u4ee5\u5728\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u6bcf\u79d2\u5904\u7406100\u4e07\u4e2a\u4e8b\u52a1\u3002\n\u5982\u679c\u60a8\u77e5\u9053\u6709\u5176\u4ed6\u4f7f\u7528\u6b64\u5e93\u7684\u9879\u76ee\uff0c\u8bf7\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u6216\u63d0\u4ea4\u95ee\u9898\u7684\u65b9\u5f0f\u8ba9\u6211\u77e5\u9053\u3002\n\u5b8c\u6210\u8fd9\u9879\u4efb\u52a1\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4ece\u6807\u51c6\u7684printf\u51fd\u6570\u7cfb\u5217\u548ciostream\u5230Boost Format\u548cFastFormatlibrary\uff0c\u4e0d\u4e00\u800c\u8db3\u3002\u521b\u5efa\u4e00\u4e2a\u65b0\u5e93\u7684\u539f\u56e0\u662f\uff0c\u6211\u53d1\u73b0\u7684\u6bcf\u4e2a\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u8981\u4e48\u90fd\u5b58\u5728\u4e25\u91cd\u95ee\u9898\uff0c\u8981\u4e48\u6ca1\u6709\u63d0\u4f9b\u6211\u9700\u8981\u7684\u6240\u6709\u529f\u80fd\u3002\nprintf\u7684\u597d\u5904\u662f\uff0c\u4f5c\u4e3aC\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u76f8\u5f53\u5feb\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u83b7\u5f97\u3002\u4e3b\u8981\u7f3a\u70b9\u662f\u5b83\u4e0d\u652f\u6301\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u3002printf\u4e5f\u5b58\u5728\u5b89\u5168\u95ee\u9898\uff0c\u5c3d\u7ba1\u4f7f\u7528__ATTRIBUTE__((format(printf\uff0c.))\u53ef\u4ee5\u7a0d\u5fae\u7f13\u89e3\u8fd9\u4e9b\u95ee\u9898\u3002\u5728GCC\u4e2d\uff0c\u6709\u4e00\u4e2aPOSIX\u6269\u5c55\uff0c\u5b83\u5c06i18nto printf\u6240\u9700\u7684\u4f4d\u7f6e\u53c2\u6570\u6dfb\u52a0\u5230printf\u4e2d\uff0c\u4f46\u5b83\u4e0d\u662fC99\u7684\u4e00\u90e8\u5206\uff0c\u5728\u67d0\u4e9b\u5e73\u53f0\u4e0a\u53ef\u80fd\u4e0d\u53ef\u7528\u3002\n\u201c\u5feb\u901f\u683c\u5f0f\u201d(FastFormat)\u4e00\u4e66\u7684\u4f5c\u8005\u9a6c\u4fee\u00b7\u5a01\u5c14\u900a(Matthew Wilson)\u79f0\u8fd9\u662f\u96ea\u4f5b\u9f99\u5730\u72f1\u3002IOStreamsdon\u6545\u610f\u4e0d\u652f\u6301\u4f4d\u7f6e\u53c2\u6570\u3002\n\u597d\u7684\u65b9\u9762\u662f\uff0ciostream\u652f\u6301\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u5e76\u4e14\u662f\u5b89\u5168\u7684\uff0c\u5c3d\u7ba1\u9519\u8bef\u5904\u7406\u5f88\u7b28\u62d9\u3002\n\u8fd9\u662f\u4e00\u4e2a\u529f\u80fd\u975e\u5e38\u5f3a\u5927\u7684\u5e93\uff0c\u65e2\u652f\u6301\u7c7b\u4f3cprintf\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u4e5f\u652f\u6301\u4f4d\u7f6e\u53c2\u6570\u3002\u5b83\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\u6027\u80fd\u3002\u6839\u636e\u5404\u79cd\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5b83\u6bd4\u8fd9\u91cc\u8003\u8651\u7684\u5176\u4ed6\u65b9\u6cd5\u8981\u6162\u5f97\u591a\u3002BoostFormat\u8fd8\u5b58\u5728\u6784\u5efa\u65f6\u95f4\u8fc7\u957f\u548c\u4e25\u91cd\u7684\u4ee3\u7801\u81a8\u80c0\u95ee\u9898(\u8bf7\u53c2\u9605\u57fa\u51c6\u6d4b\u8bd5)\u3002\n\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u5e93\uff0c\u5b83\u5feb\u901f\u3001\u5b89\u5168\u5e76\u4e14\u6709\u4f4d\u7f6e\u53c2\u6570\u3002\u7136\u800c\uff0c\u5b83\u6709\u5f88\u5927\u7684\u9650\u5236\uff0c\u5f15\u7528\u5b83\u7684\u4f5c\u8005\u7684\u8bdd\uff1a\n\u5b83\u4e5f\u76f8\u5f53\u5927\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u5f88\u91cd\u7684\u4f9d\u8d56\uff0cSTLSoft\uff0c\u8fd9\u5bf9\u4e8e\u5728\u4e00\u4e9b\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\u53ef\u80fd\u662f\u6709\u9650\u5236\u7684\u3002\n\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u683c\u5f0f\u5e93\uff0c\u4f46\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u51b3\u5b9a\u5c06\u5176\u5305\u542b\u5728\u8fd9\u91cc\u3002\u4f5c\u4e3aiostream\uff0c\u5b83\u5b58\u5728\u9010\u5b57\u6df7\u5408\u6587\u672c\u548c\u53c2\u6570\u7684\u95ee\u9898\u3002\u8be5\u5e93\u76f8\u5f53\u5feb\uff0c\u4f46\u662f\u5728\u6574\u6570\u683c\u5f0f\u4e0a\u6bd4\u5728Karma\u81ea\u5df1\u7684\u57fa\u51c6\u4e0a\u7684fmt\uff1a\uff1aformat_int\u8981\u6162\uff0c\u8bf7\u53c2\u9605C++\u4e2d\u7684\u5feb\u901f\u6574\u6570\u5230\u5b57\u7b26\u4e32\u8f6c\u6362\u3002\n\u6a21\u677f\u7c7b\u578b\u540d\u79f0(&lt\uff1bTypeName).\u3002\u53c2\u6570\u81ea\u52a8\u6355\u83b7(\u5e38\u91cf\u53c2\u6570(&A\uff1b).\u3002args){return std\uff1a\uff1amake_tuple(args.)\uff1b}AUTO PRINT_MESSAGE=[](const auto&amp\uff1b.\u3002args){fmt\uff1a\uff1aprint(args.)\uff1b}\uff1b//\u6355\u83b7\u548c\u5b58\u50a8\u53c2\u6570\uff1aauto args=catch(&#34\uff1b{}{}&#34\uff1b\uff0c42\uff0c&#34\uff1bfoo&#34\uff1b)\uff1b//\u6267\u884c\u683c\u5f0f\u5316\uff1astd\uff1a\uff1aApply(print_message\uff0cargs)\uff1b\n\u6587\u6863\u4e2d\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5\u90e8\u5206\u57fa\u4e8e\u9002\u7528\u4e8e\u5f53\u524d\u5e93\u7684Python String module ocumentation\u4e2d\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5\u90e8\u5206\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u672c\u6587\u6863\u662f\u6839\u636ePython Software Foundation\u8bb8\u53ef\u8bc1\u5206\u53d1\u7684\uff0c\u53ef\u5728doc/python-License se.tx.tx.\u4e2d\u627e\u5230\u3002\u5b83\u4ec5\u9002\u7528\u4e8e\u60a8\u5206\u53d1FMT\u6587\u6863\u7684\u60c5\u51b5\u3002\n{fmt}\u5e93\u7531Victor Zverovich(Vitaut)\u548cJonathan M\u00fcller(Foonathan)\u7ef4\u62a4\uff0c\u5176\u4e2d\u6709\u8bb8\u591a\u5176\u4ed6\u4eba\u7684\u8d21\u732e\u3002\u8bf7\u53c2\u9605\u8d21\u732e\u8005\u548c\u53d1\u5e03\u8005\u4e86\u89e3\u5176\u4e2d\u4e00\u4e9b\u540d\u79f0\u3002\u5982\u679c\u60a8\u7684\u8d21\u732e\u6ca1\u6709\u88ab\u6b63\u786e\u5217\u51fa\u6216\u63d0\u53ca\uff0c\u8bf7\u8ba9\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u4f1a\u7ea0\u6b63\u60a8\u7684\u8d21\u732e\u3002(\u6ce8\uff1a{fmt}\u5e93\u662f\u7531Victor Zverovich(Vitaut)\u548cJonathan M\u00fcller(Foonathan)\u7ef4\u62a4\u7684\u3002\u8bf7\u53c2\u9605\u8d21\u732e\u8005\u548c\u53d1\u5e03\u8005)\u3002\n\u672c\u81ea\u8ff0\u6587\u4ef6\u7684\u57fa\u51c6\u6d4b\u8bd5\u90e8\u5206\u548c\u6027\u80fd\u6d4b\u8bd5\u6765\u81eaChris Foster\u7f16\u5199\u7684\u4f18\u79c0tinyformat\u5e93\u3002Boost\u683c\u5f0f\u5e93\u662f\u516c\u8ba4\u7684\uff0c\u56e0\u4e3a\u5b83\u5bf9tinyformat\u4ea7\u751f\u4e86\u4e00\u4e9b\u5f71\u54cd\u3002\u5b9e\u73b0\u4e2d\u4f7f\u7528\u7684\u4e00\u4e9b\u60f3\u6cd5\u501f\u9274\u4e86Loki SafeFormat\u548cClang\u4e2d\u7684Diagnostic API\u3002Format\u5b57\u7b26\u4e32\u8bed\u6cd5\u548c\u6587\u6863\u57fa\u4e8ePython\u7684str.format\u3002\u611f\u8c22Doug Turnbull\u5bf9\u7c7b\u578b\u5b89\u5168API\u7684\u8bbe\u8ba1\u63d0\u51fa\u7684\u5b9d\u8d35\u610f\u89c1\u548c\u8d21\u732e\uff0c\u4ee5\u53caGregory Chaajkowski\u5b9e\u73b0\u4e8c\u8fdb\u5236\u683c\u5f0f\u5316\u7684\u8d21\u732e\u3002\u611f\u8c22Ruslan Baratov\u5bf9\u6574\u6570\u683c\u5f0f\u5316\u7b97\u6cd5\u7684\u5168\u9762\u6bd4\u8f83\u548c\u6709\u5173\u6027\u80fd\u7684\u6709\u7528\u8bc4\u8bba\uff0c\u611f\u8c22Boris Kaul\u4e3aC++\u8ba1\u6570\u6570\u5b57\u57fa\u51c6\u6240\u505a\u7684\u8d21\u732e\u3002\u611f\u8c22CarterLi\u5bf9\u4ee3\u7801\u505a\u51fa\u7684\u5404\u79cd\u6539\u8fdb\u3002", "note_en": "{fmt} is an open-source formatting library for C++.It can be used as a safe and fast alternative to (s)printf and iostreams.\n     High performance: faster than common standard library implementations of printf andiostreams. See  Speed tests and  Fast integer to string conversion in C++.\n Small code size both in terms of source code (the minimum configurationconsists of just three header files,  core.h,  format.h and format-inl.h) and compiled code. See  Compile time and code bloat.\n  Safety: the library is fully type safe, errors in format strings can bereported at compile time, automatic memory management prevents buffer overflowerrors.\n     fmt::print(  &#34;Hello, {}! &#34;,   &#34;world &#34;);   // Python-like format string syntax fmt::printf(  &#34;Hello, %s! &#34;,   &#34;world &#34;);   // printf format string syntax\n  std::string s = fmt::format(  &#34;I&#39;d rather be {1} than {0}. &#34;,   &#34;right &#34;,   &#34;happy &#34;);  // s == &#34;I&#39;d rather be happy than right.&#34;\n   $ c++ -Iinclude -std=c++14 test.cc...test.cc:4:17: note: in instantiation of function template specialization &#39;fmt::v5::format&lt;S, int&gt;&#39; requested herestd::string s = format(FMT_STRING(&#34;{2}&#34;), 42); ^include/fmt/core.h:778:19: note: non-constexpr function &#39;on_error&#39; cannot be used in a constant expression ErrorHandler::on_error(message); ^include/fmt/format.h:2226:16: note: in call to &#39;&amp;checker.context_-&gt;on_error(&amp;&#34;argument index out of range&#34;[0])&#39; context_.on_error(&#34;argument index out of range&#34;); ^\n  fmt::memory_buffer buf; format_to(buf,   &#34;{} &#34;,  42);   // replaces itoa(42, buffer, 10) format_to(buf,   &#34;{:x} &#34;,  42);   // replaces itoa(42, buffer, 16)  // access the string with to_string(buf) or buf.data()\n  # include   &#34;fmt/format.h &#34; struct  date {  int year, month, day;}; template &lt;&gt; struct  fmt::formatter&lt;date&gt; {  constexpr  auto  parse(format_parse_context&amp; ctx) {  return ctx. begin(); }  template &lt; typename FormatContext&gt;  auto  format( const date&amp; d, FormatContext&amp; ctx) {  return  format_to(ctx. out(),   &#34;{}-{}-{} &#34;, d. year, d. month, d. day); }};std::string s = fmt::format(  &#34;The date is {} &#34;, date{ 2012,  12,  9});  // s == &#34;The date is 2012-12-9&#34;\n  // Prints formatted error message. void  vreport_error( const  char* format, fmt::format_args args) {  fmt::print(  &#34;Error:  &#34;);  fmt::vprint(format, args);} template &lt; typename... Args&gt; void  report_error( const  char* format,  const Args &amp; ... args) {  vreport_error(format,  fmt::make_format_args(args...));} report_error(  &#34;file not found: {} &#34;, path);\n Note that  vreport_error is not parameterized on argument types which canimprove compile times and reduce code size compared to a fully parameterizedversion.\n       The above results were generated by building  tinyformat_test.cpp on macOS10.14.6 with  clang++ -O3 -DSPEED_TEST -DHAVE_FORMAT, and taking the best ofthree runs. In the test, the format string  &#34;%0.10f:%04d:%+g:%s:%p:%c:%%\\n&#34;or equivalent is filled 2,000,000 times with output sent to  /dev/null; forfurther details refer to the  source.\n {fmt} is 10x faster than  std::ostringstream and  sprintf on floating-pointformatting ( dtoa-benchmark)and as fast as  double-conversion:\n     The script  bloat-test.pyfrom  format-benchmarktests compile time and code bloat for nontrivial projects.It generates 100 translation units and uses  printf() or its alternativefive times in each to simulate a medium sized project. The resultingexecutable size and compile time (Apple LLVM version 8.1.0 (clang-802.0.42),macOS Sierra, best of three) is shown in the following tables.\n   As you can see, {fmt} has 60% less overhead in terms of resulting binary codesize compared to iostreams and comes pretty close to  printf. Boost Formatand Folly Format have the largest overheads.\n printf+string is the same as  printf but with extra  &lt;string&gt;include to measure the overhead of the latter.\n   libc,  lib(std)c++ and  libfmt are all linked as shared libraries tocompare formatting function overhead only. Boost Format is aheader-only library so it doesn&#39;t provide any linkage options.\n   Please refer to  Building the library for the instructions on how to buildthe library and run the unit tests.\n Benchmarks reside in a separate repository, format-benchmarks,so to run the benchmarks you first need to clone this repository andgenerate Makefiles with CMake:\n        Scylla: A Cassandra-compatible NoSQL data storethat can handle 1 million transactions per second on a single server\n  If you are aware of other projects using this library, please let me knowby  email or by submitting an issue.\n    There are plenty of methods for doing this task, from standard ones likethe printf family of function and iostreams to Boost Format and FastFormatlibraries. The reason for creating a new library is that every existingsolution that I found either had serious issues or didn&#39;t provideall the features I needed.\n   The good thing about  printf is that it is pretty fast and readily availablebeing a part of the C standard library. The main drawback is that itdoesn&#39;t support user-defined types.  printf also has safety issues althoughthey are somewhat mitigated with  __attribute__ ((format (printf, ...)) in GCC.There is a POSIX extension that adds positional arguments required for i18nto  printf but it is not a part of C99 and may not be available on someplatforms.\n       Matthew Wilson, the author of FastFormat, called this &#34;chevron hell&#34;. iostreamsdon&#39;t support positional arguments by design.\n The good part is that iostreams support user-defined types and are safe althougherror handling is awkward.\n   This is a very powerful library which supports both  printf-like formatstrings and positional arguments. Its main drawback is performance. According tovarious benchmarks it is much slower than other methods considered here. BoostFormat also has excessive build times and severe code bloat issues (see Benchmarks).\n   This is an interesting library which is fast, safe and has positionalarguments. However it has significant limitations, citing its author:\n  It is also quite big and has a heavy dependency, STLSoft, which might betoo restrictive for using it in some projects.\n   This is not really a formatting library but I decided to include it here forcompleteness. As iostreams, it suffers from the problem of mixing verbatim textwith arguments. The library is pretty fast, but slower on integer formattingthan  fmt::format_int on Karma&#39;s own benchmark,see  Fast integer to string conversion in C++.\n     template &lt; typename... Args&gt; auto  capture( const Args&amp;... args) {  return  std::make_tuple(args...);} auto print_message = []( const  auto&amp;... args) {  fmt::print(args...);};  // Capture and store arguments: auto args = capture(  &#34;{} {} &#34;,  42,   &#34;foo &#34;);  // Do formatting: std::apply(print_message, args);\n    The  Format String Syntaxsection in the documentation is based on the one from Python  string moduledocumentationadapted for the current library. For this reason the documentation isdistributed under the Python Software Foundation license available in doc/python-license.txt.It only applies if you distribute the documentation of fmt.\n   The {fmt} library is maintained by Victor Zverovich ( vitaut) and Jonathan M\u00fcller ( foonathan) with contributions from many other people.See  Contributors and Releases for some of the names.Let us know if your contribution is not listed or mentioned incorrectly andwe&#39;ll make it right.\n The benchmark section of this readme file and the performance tests are takenfrom the excellent  tinyformat librarywritten by Chris Foster. Boost Format library is acknowledged transitivelysince it had some influence on tinyformat.Some ideas used in the implementation are borrowed from  Loki SafeFormat and  Diagnostic API in Clang.Format string syntax and the documentation are based on Python&#39;s  str.format.Thanks  Doug Turnbull for his valuablecomments and contribution to the design of the type-safe API and Gregory Czajkowski for implementing binaryformatting. Thanks  Ruslan Baratov for comprehensive comparison of integer formatting algorithmsand useful comments regarding performance,  Boris Kaul for C++ counting digits benchmark.Thanks to  CarterLi for contributing variousimprovements to the code.", "posttime": "2020-05-25 06:25:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u73b0\u4ee3,modern,format", "title": "FMT--\u73b0\u4ee3\u683c\u5f0f\u5e93", "title_en": "Fmt \u2013 A Modern Formatting Library", "transed": 1, "url": "https://github.com/fmtlib/fmt", "via": "", "real_tags": ["\u73b0\u4ee3", "modern", "format"]}]