[{"category": "", "categoryclass": "", "imagename": "f77183c188e87a942d4c80b623ef535b.jpg", "infoid": 1000612, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2015\u5e74\uff0c\u6211\u4eec\u4e0d\u65ad\u542c\u5230\u540c\u6837\u7684\u8981\u6c42\u3002\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\u201c\u6211\u559c\u6b22\u4f60\u4eec\u7684\u8ba1\u7b97\u673a\u5907\u4efd\u670d\u52a1\uff0c\u4f46\u51fa\u4e8e\u5176\u4ed6\u539f\u56e0\uff0c\u6211\u4e5f\u9700\u8981\u4e00\u4e2a\u5730\u65b9\u6765\u5b58\u50a8\u6570\u636e--\u5907\u4efd\u670d\u52a1\u5668\u3001\u6258\u7ba1\u6587\u4ef6\u548c\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u3002\u4f60\u80fd\u8ba9\u6211\u76f4\u63a5\u8fdb\u5165\u4f60\u7684\u4ed3\u5e93\u5417\uff1f\u201c\u3002\u6211\u4eec\u542c\u53d6\u4e86\u610f\u89c1\uff0c\u6784\u5efa\u4e86Backblaze B2\u4e91\u5b58\u50a8\u3002\n\u4ee5\u6211\u5f53\u65f6\u7684\u8bdd\u4e3a\u57fa\u7840\uff0c\u201c\u5b83\u3002\u66fe\u7ecf\u662f\u3002\u5f88\u5927\u3002\u201c\u3002B2\u4e91\u5b58\u50a8\u4ece\u6839\u672c\u4e0a\u6539\u53d8\u4e86\u6211\u4eec\u516c\u53f8\u7684\u53d1\u5c55\u8f68\u8ff9\u3002\u4ec5\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u6211\u4eec\u589e\u52a0\u7684\u5ba2\u6237\u6570\u636e\u5c31\u6bd4\u6211\u4eec\u5934\u5341\u5e74\u589e\u52a0\u7684\u5168\u90e8\u6570\u636e\u90fd\u591a\u3002\u6211\u4eec\u73b0\u5728\u6709160\u591a\u4e2a\u56fd\u5bb6\u7684\u5ba2\u6237\uff0c\u4ed6\u4eec\u59d4\u6258\u7ed9\u6211\u4eec\u7684\u6570\u636e\u8d85\u8fc7\u4e00\u827e\u5b57\u8282\u3002\n\u50cf\u7f8e\u56fd\u516c\u5171\u7535\u89c6\u3001\u5df4\u5854\u54e5\u5c3c\u4e9a\u548cVerizon\u7684Complex Networks\u8fd9\u6837\u7684\u54c1\u724c\uff0c\u4ee5\u53ca\u5176\u4ed6100\uff0c000\u591a\u5bb6\u5ba2\u6237\uff0c\u90fd\u4f7f\u7528Backblaze B2\u6765\u5907\u4efd\u548c\u5b58\u6863\u4ed6\u4eec\u7684\u6570\u636e\uff1b\u5728\u7ebf\u6258\u7ba1\u4ed6\u4eec\u7684\u6587\u4ef6\uff1b\u5378\u8f7d\u4ed6\u4eec\u7684NAS\u3001SAN\u548c\u5176\u4ed6\u5b58\u50a8\u7cfb\u7edf\uff1b\u66f4\u6362\u4ed6\u4eec\u9648\u65e7\u7684\u78c1\u5e26\u57fa\u7840\u67b6\u6784\uff1b\u4ee5\u53ca\u4f5c\u4e3a\u4ed6\u4eec\u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u5b58\u50a8\u3002\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u544a\u8bc9\u6211\u4eec\uff0c\u4f4e\u6210\u672c\u5982\u4f55\u4f7f\u4ed6\u4eec\u80fd\u591f\u505a\u4ed6\u4eec\u4e0d\u80fd\u505a\u7684\u4e8b\u60c5\uff0c\u4ee5\u53ca\u5feb\u901f\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u7b80\u5355\u6027\u3002\n\u6211\u611f\u5230\u81ea\u8c6a\u7684\u662f\uff0c\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u63d0\u4f9b\u4e1a\u754c\u6700\u5b9e\u60e0\u7684\u4e0b\u8f7d\u4ef7\u683c\u6765\u5e2e\u52a9\u5ba2\u6237\uff0c\u4f7f\u4ece\u4e91\u5be1\u5934\u7684\u8fc1\u79fb\u53d8\u5f97\u5bb9\u6613\uff0c\u5e76\u4e3a\u6211\u4eec\u7684\u5ba2\u6237\u5982\u4f55\u4f7f\u7528\u4ed6\u4eec\u7684\u6570\u636e\u63d0\u4f9b\u4e86\u524d\u6240\u672a\u6709\u7684\u9009\u62e9\u3002\n\u4eca\u5929\uff0c\u6211\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03\u6211\u4eec\u6700\u53d7\u6b22\u8fce\u7684\u529f\u80fd\uff1aB2\u4e91\u5b58\u50a8\u7684S3\u517c\u5bb9API\u7684\u516c\u5f00\u6d4b\u8bd5\u7248\u53d1\u5e03\u3002", "note_en": "In 2015, we kept hearing the same request. It went something like: \u201cI love your computer backup service, but I also need a place to store data for other reasons\u2014backing up servers, hosting files, and building applications. Can you give me direct access to your storage?\u201d We listened, and we built Backblaze B2 Cloud Storage.\n To build on my own words from the time, \u201c It. Was. HUGE.\u201d B2 Cloud Storage fundamentally changed the trajectory of our company. Over just the past two years, we\u2019ve added more customer data than we did in our entire first decade. We now have customers in over 160 countries and they\u2019ve entrusted us with more than an exabyte of data.\n Brands like  American Public Television, Patagonia, and Verizon\u2019s Complex Networks\u2014alongside more than 100,000 other customers\u2014use Backblaze B2 to back up and archive their data; host their files online; offload their NAS, SAN, and other storage systems; replace their aging tape infrastructure; and as the store for the applications they\u2019ve built. Many of them have told us how the low cost enabled them to do what they wouldn\u2019t have been able to, and the simplicity to do it quickly.\n I\u2019m proud that we\u2019ve been able to help customers by offering the  most affordable download prices in the industry, making it easy to migrate from the cloud oligarchy, and offering unprecedented choice in how our customers use their data.\n Today, I\u2019m thrilled to announce the public beta launch of our most requested feature:  S3 Compatible APIs for B2 Cloud Storage.", "posttime": "2020-05-04 23:54:09", "tags": "\u786c\u76d8,\u4e91\u786c\u76d8,b2,\u6570\u636e,ve", "title": "Backblaze B2\u4e91\u786c\u76d8\u73b0\u5728\u62e5\u6709\u4e0eS3\u517c\u5bb9\u7684API", "title_en": "Backblaze B2 Cloud Storage Now Has S3 Compatible APIs", "transed": 1, "url": "https://www.backblaze.com/blog/backblaze-b2-s3-compatible-api/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u786c\u76d8", "\u4e91\u786c\u76d8", "b2", "\u6570\u636e", "ve"]}, {"category": "", "categoryclass": "", "imagename": "e9d0793ddca80a70060f445e8137063e.jpg", "infoid": 1000611, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u516c\u53f8(Amazon Web Services\uff0cAWS)\u526f\u603b\u88c1\u517c\u6770\u51fa\u5de5\u7a0b\u5e08\u8482\u59c6\u00b7\u5e03\u96f7(Tim Bray)\u56e0\u4e9a\u9a6c\u900a\u89e3\u96c7\u4e86\u4e00\u7fa4\u5458\u5de5\uff0c\u4ed6\u5df2\u7ecf\u8f9e\u53bb\u4e86\u5728\u8fd9\u5bb6\u4e91\u8ba1\u7b97\u5de8\u5934\u5e74\u85aa100\u591a\u4e07\u7f8e\u5143\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u5458\u5de5\u5728\u51a0\u72b6\u75c5\u6bd2(Coronavirus)\u5927\u6d41\u884c\u671f\u95f4\u516c\u5f00\u6297\u8bae\u4e9a\u9a6c\u900a\u4ed3\u5e93\u7684\u5de5\u4f5c\u6761\u4ef6\u3002\nBray\u4e8e2014\u5e74\u5e95\u52a0\u5165AWS\uff0c\u6b64\u524d\u4ed6\u5728\u8c37\u6b4c\u62c5\u4efbAndroid\u5f00\u53d1\u8005\u5021\u5bfc\u8005\u56db\u5e74\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u4ed6\u662fSun Microsystems\u7684Web\u6280\u672f\u603b\u76d1\uff0c\u5728\u90a3\u91cc\u4ed6\u5728GPL\u4e0b\u5f00\u53d1Java\u53ca\u5176\u5f00\u6e90\u65b9\u9762\u53d1\u6325\u4e86\u5173\u952e\u4f5c\u7528\u3002\n\u5728\u7532\u9aa8\u6587\u5b8c\u6210\u6536\u8d2d\u4e00\u4e2a\u6708\u540e\uff0c\u4ed6\u79bb\u5f00\u4e86Sun\uff0c\u8fd9\u5f53\u7136\u7ed9\u4e86\u7532\u9aa8\u6587Java\u548c\u5f39\u836f\uff0c\u8ba9\u7532\u9aa8\u6587\u4e0e\u8c37\u6b4c\u5c31\u641c\u7d22\u516c\u53f8\u5982\u4f55\u5728Android\u4e2d\u4f7f\u7528Java\u5c55\u5f00\u4e86\u957f\u8fbe\u5341\u5e74\u7684\u6cd5\u5f8b\u6218\u3002\n\u5e03\u96f7\u4e4b\u524d\u66fe\u79f0\u8d5e\u8fc7AWS\u7684\u6587\u5316\uff0c\u4ed6\u57282017\u5e74\u7684\u4e00\u7bc7\u535a\u6587\u4e2d\u8bf4\uff1a\u6211\u5e76\u4e0d\u771f\u7684\u9700\u8981\u94b1\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u8f9e\u804c\u3002\n\u4ed6\u4ecd\u7136\u94a6\u4f69AWS\u53ca\u5176\u9886\u5bfc\u5c42\uff0c\u4f46\u57285\u67081\u65e5\u9012\u4ea4\u4e86\u8f9e\u5448\u3002\u51e0\u5468\u524d\uff0c\u4e9a\u9a6c\u900a\u89e3\u96c7\u4e86\u51e0\u540d\u7f8e\u56fd\u5458\u5de5\uff0c\u8fd9\u4e9b\u5458\u5de5\u516c\u5f00\u8868\u793a\u62c5\u5fc3\u5176\u914d\u9001\u4ed3\u5e93\u7684\u5de5\u4eba\u5b89\u5168\u548c\u7f3a\u4e4f\u68c0\u6d4b\u3002\n5\u67081\u65e5\u662f\u6211\u5728\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u516c\u53f8\u62c5\u4efb\u526f\u603b\u88c1\u548c\u6770\u51fa\u5de5\u7a0b\u5e08\u7684\u6700\u540e\u4e00\u5929\uff0c\u5728\u7ecf\u5386\u4e865\u5e74\u96f65\u4e2a\u6708\u7684\u4ee4\u4eba\u6ee1\u610f\u7684\u4e50\u8da3\u4e4b\u540e\u3002\u4ed6\u5728\u4e2a\u4eba\u535a\u5ba2\u4e0a\u5199\u9053\uff0c\u4e9a\u9a6c\u900a\u89e3\u96c7\u4e86\u90a3\u4e9b\u5927\u58f0\u8bf4\u4ed3\u5e93\u5458\u5de5\u5bb3\u6015\u51a0\u72b6\u75c5\u6bd2\u7684\u544a\u5bc6\u8005\uff0c\u6211\u56e0\u6b64\u800c\u6cae\u4e27\u5730\u8f9e\u804c\u3002\n\u4e9a\u9a6c\u900a\u57281\u6708\u4efd\u56e0\u6d89\u5acc\u5a01\u80c1\u89e3\u96c7\u5728\u8be5\u516c\u53f8\u5de5\u4f5c\u7684\u6c14\u5019\u6d3b\u52a8\u4eba\u58eb\u800c\u767b\u4e0a\u65b0\u95fb\u5934\u6761\u3002\u7136\u540e\u57284\u6708\u4efd\uff0c\u5728\u7f8e\u56fd\u7206\u53d1\u51a0\u72b6\u75c5\u6bd2\u671f\u95f4\uff0c\u4e9a\u9a6c\u900a\u9996\u5e2d\u6267\u884c\u5b98\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u62e5\u6709\u7684\u534e\u76db\u987f\u90ae\u62a5\u62a5\u9053\u79f0\uff0c\u4e9a\u9a6c\u900a\u89e3\u96c7\u4e86\u4e9a\u9a6c\u900a\u6c14\u5019\u6b63\u4e49\u5458\u5de5\u7ec4\u7ec7(AECJ)\u4e2d\u7684\u51e0\u540d\u5458\u5de5\uff0c\u8fd9\u4e9b\u5458\u5de5\u5728\u5176\u4ed3\u5e93\u5de5\u4f5c\u65f6\u547c\u5401\u66f4\u5b89\u5168\u7684\u5de5\u4f5c\u6761\u4ef6\u548c\u66f4\u591a\u7684\u4fdd\u62a4\u3002\n\u5e03\u96f7\u6307\u51fa\uff0c\u4ed6\u662fAECJ\u516c\u5f00\u4fe1\u76848702\u4e2a\u7b7e\u5b57\u4eba\u4e4b\u4e00\uff0c\u8fd9\u5c01\u516c\u5f00\u4fe1\u547c\u5401\u80a1\u4e1c\u652f\u6301\u4e00\u9879\u51b3\u8bae\uff0c\u8981\u6c42\u4e9a\u9a6c\u900a\u5728\u6c14\u5019\u95ee\u9898\u4e0a\u91c7\u53d6\u884c\u52a8\u3002\n\u4ed6\u8868\u793a\uff0c4\u6708\u4e2d\u65ec\uff0c\u4e9a\u9a6c\u900a\u89e3\u96c7\u4e86AECJ\u7684\u4e24\u540d\u8d1f\u8d23\u4eba\u827e\u7c73\u4e3d\u00b7\u574e\u5b81\u5b89(Emily Cunningham)\u548c\u9a6c\u4f26\u00b7\u79d1\u65af\u5854(Maren Costa)\uff0c\u7d27\u63a5\u7740\u4ed6\u4eec\u5e2e\u52a9\u5185\u90e8\u5ba3\u4f20\u4e86\u4e00\u4efd\u8981\u6c42\u4e3a\u4ed3\u5e93\u5de5\u4eba\u63d0\u4f9b\u51a0\u72b6\u75c5\u6bd2\u4fdd\u62a4\u7684\u8bf7\u613f\u4e66\uff0c\u8fd9\u8ba9\u6211\u6293\u72c2\u4e86\u3002\n\u4e24\u4eba\u8fd8\u57284\u670816\u65e5\u7ec4\u7ec7\u4e86\u4e00\u573a\u89c6\u9891\u901a\u8bdd\uff0c\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684\u4e9a\u9a6c\u900a\u4ed3\u5e93\u5de5\u4eba\u548c\u8457\u540d\u7684\u793e\u4f1a\u6d3b\u52a8\u5bb6\u5185\u5965\u7c73\u00b7\u514b\u83b1\u6069(Naomi Klein)\u53c2\u52a0\u4e86\u901a\u8bdd\u3002\n\u4ed6\u5199\u9053\uff0c\u8fd9\u4e9b\u7406\u7531\u662f\u53ef\u7b11\u7684\uff1b\u4efb\u4f55\u7406\u6027\u7684\u89c2\u5bdf\u5bb6\u90fd\u6e05\u695a\u5730\u77e5\u9053\uff0c\u4ed6\u4eec\u662f\u4e3a\u4e86\u544a\u5bc6\u800c\u88ab\u8e22\u5012\u7684\u3002\n\u7ba1\u7406\u5c42\u672c\u53ef\u4ee5\u53cd\u5bf9\u8fd9\u4e00\u4e8b\u4ef6\uff0c\u6216\u8005\u8981\u6c42\u5c06\u5916\u90e8\u4eba\u58eb\u6392\u9664\u5728\u5916\uff0c\u6216\u8005\u8981\u6c42\u4ee3\u8868\u9886\u5bfc\u5c42\uff0c\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u6570\u91cf\u7684\u4e8b\u60c5\uff1b\u6709\u8db3\u591f\u7684\u65f6\u95f4\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4ed6\u4eec\u53ea\u662f\u89e3\u96c7\u4e86\u8fd9\u4e9b\u79ef\u6781\u5206\u5b50\u3002\n\u5e03\u96f7\u8bf4\uff0c\u4ed6\u901a\u8fc7\u9002\u5f53\u7684\u6e20\u9053\u5347\u7ea7\u4e86\u4ed6\u7684\u62c5\u5fe7\uff0c\u56e0\u4e3a\u526f\u603b\u88c1\u4e0d\u5e94\u8be5\u5728\u516c\u5171\u573a\u5408\u6d41\u6c13\u3002\u4ed6\u6ca1\u6709\u900f\u9732\u4ed6\u6709\u8fc7\u7684\u8ba8\u8bba\uff0c\u4f46\u4ed6\u8bf4\u4ed6\u63d0\u51fa\u4e86\u8bb8\u591a\u4e0e\u4ed6\u7684\u535a\u5ba2\u5e16\u5b50\u4e2d\u8be6\u7ec6\u63cf\u8ff0\u7684\u76f8\u540c\u7684\u8bba\u70b9\u3002\n\u7ee7\u7eed\u62c5\u4efb\u4e9a\u9a6c\u900a\u526f\u603b\u88c1\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u6279\u51c6\u6211\u6240\u9119\u89c6\u7684\u884c\u52a8\u3002\u6240\u4ee5\u6211\u8f9e\u804c\u4e86\u3002\n\u7136\u800c\uff0c\u5e03\u96f7\u4e5f\u6307\u51fa\uff0c\u4ed6\u8ba4\u4e3a\u4e9a\u9a6c\u900a\u4e00\u76f4\u5728\u4f18\u5148\u8003\u8651\u8fd9\u4e00\u95ee\u9898\uff0c\u5e76\u5728\u4ed3\u5e93\u5b89\u5168\u65b9\u9762\u6295\u5165\u4e86\u5927\u91cf\u7cbe\u529b\u3002\n\u4f46\u4ed6\u4e5f\u8fa9\u79f0\uff0c\u4e9a\u9a6c\u900a\u89e3\u96c7\u62b1\u6028\u7684\u5458\u5de5\u662f\u73b0\u4ee3\u8d44\u672c\u4e3b\u4e49\u7684\u75c7\u72b6\u3002\n\u5f52\u6839\u7ed3\u5e95\uff0c\u6700\u5927\u7684\u95ee\u9898\u4e0d\u662f\u51a0\u72b6\u75c5\u6bd2\u53cd\u5e94\u7684\u7ec6\u8282\u3002\u4e9a\u9a6c\u900a\u5c06\u4ed3\u5e93\u4e2d\u7684\u4eba\u7c7b\u89c6\u4e3a\u53ef\u66ff\u4ee3\u7684\u62e3\u9009\u548c\u5305\u88c5\u6f5c\u529b\u5355\u4f4d\u3002\u5e03\u96f7\u5199\u9053\uff0c\u4e0d\u4ec5\u4ec5\u662f\u4e9a\u9a6c\u900a\uff0c21\u4e16\u7eaa\u8d44\u672c\u4e3b\u4e49\u5c31\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\u3002\n\u4e9a\u9a6c\u900a\u7ba1\u7406\u5f97\u975e\u5e38\u597d\uff0c\u5728\u53d1\u73b0\u673a\u4f1a\u548c\u6784\u5efa\u53ef\u91cd\u590d\u7684\u5229\u7528\u8fd9\u4e9b\u673a\u4f1a\u7684\u6d41\u7a0b\u65b9\u9762\u8868\u73b0\u51fa\u4e86\u9ad8\u8d85\u7684\u6280\u80fd\u3002\u4ed6\u5199\u9053\uff0c\u76f8\u5e94\u5730\uff0c\u5b83\u5bf9\u8d22\u5bcc\u548c\u6743\u529b\u7684\u6301\u7eed\u589e\u957f\u548c\u79ef\u7d2f\u5e26\u6765\u7684\u4eba\u529b\u6210\u672c\u7f3a\u4e4f\u8fdc\u89c1\u3002\n\u5982\u679c\u6211\u4eec\u4e0d\u559c\u6b22\u4e9a\u9a6c\u900a\u6b63\u5728\u505a\u7684\u67d0\u4e9b\u4e8b\u60c5\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u6cd5\u5f8b\u62a4\u680f\u6765\u963b\u6b62\u8fd9\u4e9b\u4e8b\u60c5\u3002\u6211\u4eec\u4e0d\u9700\u8981\u53d1\u660e\u4efb\u4f55\u65b0\u4e1c\u897f\uff1b\u4e25\u683c\u6267\u884c\u7684\u53cd\u5784\u65ad\u3001\u751f\u6d3b\u5de5\u8d44\u548c\u5de5\u4eba\u8d4b\u6743\u7acb\u6cd5\u7684\u7ed3\u5408\uff0c\u63d0\u4f9b\u4e86\u4e00\u6761\u660e\u786e\u7684\u524d\u8fdb\u9053\u8def\u3002\n\u4ed6\u5c06\u4e9a\u9a6c\u900a\u4e0e\u5176\u5bf9\u5f85\u4ed3\u5e93\u5de5\u4eba\u7684\u65b9\u5f0f\u548c\u96c7\u7528\u9ad8\u85aa\u6280\u672f\u5de5\u4eba\u7684AWS\u533a\u5206\u5f00\u6765\u3002\n\u4ed6\u5199\u9053\uff0cAWS\u5219\u662f\u53e6\u4e00\u56de\u4e8b\uff0c\u5b83\u4ee5\u4eba\u9053\u7684\u6001\u5ea6\u5bf9\u5f85\u5458\u5de5\uff0c\u52aa\u529b\u5b9e\u73b0\u5de5\u4f5c\u4e0e\u751f\u6d3b\u7684\u5e73\u8861\uff0c\u7aed\u529b\u63a8\u52a8\u591a\u5143\u5316(\u867d\u7136\u5927\u591a\u5931\u8d25\u4e86\uff0c\u4f46\u5176\u4ed6\u4eba\u4e5f\u662f\u5982\u6b64)\uff0c\u800c\u4e14\u5927\u4f53\u4e0a\u662f\u4e00\u4e2a\u6709\u9053\u5fb7\u7684\u7ec4\u7ec7\u3002\n\u4ed6\u8868\u793a\uff1a\u6211\u771f\u5fc3\u94a6\u4f69(AWS)\u7684\u9886\u5bfc\u529b\u3002\u5f53\u7136\uff0c\u5b83\u7684\u5de5\u4eba\u6709\u6743\u529b\u3002\u5e73\u5747\u5de5\u8d44\u975e\u5e38\u9ad8\uff0c\u4efb\u4f55\u4e0d\u5f00\u5fc3\u7684\u4eba\u90fd\u53ef\u4ee5\u8d70\u5230\u8857\u5bf9\u9762\uff0c\u627e\u5230\u53e6\u4e00\u4efd\u85aa\u6c34\u76f8\u540c\u6216\u66f4\u9ad8\u7684\u5de5\u4f5c\u3002\nZDNet\u5df2\u7ecf\u8054\u7cfb\u4e9a\u9a6c\u900a\u5bfb\u6c42\u8bc4\u8bba\uff0c\u5982\u679c\u4e9a\u9a6c\u900a\u505a\u51fa\u56de\u5e94\uff0cZDNet\u5c06\u66f4\u65b0\u8fd9\u7bc7\u6587\u7ae0\u3002", "note_en": "Tim Bray, a VP and distinguished engineer at Amazon Web Services (AWS), has quit his $1m-plus a year role at the cloud giant over Amazon firing a group of employees who publicly protested conditions at Amazon warehouses during the   coronavirus COVID-19 pandemic.\n Bray joined AWS at the end of 2014, following a four-year stint at Google as its Android developer advocate. Before that, he was the director of web technology at Sun Microsystems, where he played\u00a0 a key role in the development of Java and its open-sourcing under GPL.\n    He left Sun a month after Oracle completed its acquisition, which of course gave Oracle Java and the ammunition to launch its decade-long legal battle with Google over how the search company used Java in Android.\n Bray has previously praised the culture at AWS, saying in a 2017 blogpost: &#34;I don&#39;t  really need the money, but I haven&#39;t quit.&#34;\n He still admires AWS and its leadership, but handed in his resignation May 1, a few weeks after Amazon fired several US employees who&#39;d publicly raised concerns about worker safety and lack of testing at its distribution warehouses.\n   &#34;May 1 was my last day as a VP and distinguished engineer at Amazon Web Services, after five years and five months of rewarding fun. I quit in dismay at Amazon firing whistleblowers who were making noise about warehouse employees frightened of COVID-19,&#34;  he wrote on his personal blog.\n Amazon was in the headlines in January for allegedly  threatening to fire climate activists working at the company. Then in April, amid the coronavirus outbreak in the US, the Washington Post, which is owned by Amazon CEO Jeff Bezos, reported that Amazon  had fired several employees who were in the group Amazon Employees for Climate Justice (AECJ) and who had called for safer working conditions and more protections while working at its warehouses.\n   Bray notes that he was one the 8,702 signatories to the AECJ&#39;s open letter calling on shareholders to support a resolution for Amazon to take action on climate.\n He says the &#34;point I snapped&#34; was when Amazon in mid-April fired two AECJ leaders, Emily Cunningham and Maren Costa, immediately after they&#39;d helped internally promote a petition demanding coronavirus protections for warehouse workers.\n The pair had also organized a video call for April 16 featuring Amazon warehouse workers from around the world and prominent social activist Naomi Klein.\n &#34;The justifications were laughable; it was clear to any reasonable observer that they were turfed for whistleblowing,&#34; he writes.\n &#34;Management could have objected to the event, or demanded that outsiders be excluded, or that leadership be represented, or any number of other things; there was plenty of time. Instead, they just fired the activists.&#34;\n Bray says he escalated his concerns through the proper channels because a VP shouldn&#39;t go publicly rogue. He doesn&#39;t disclose discussions he had but says he made many of the same arguments detailed in his blogpost.\n &#34;Remaining an Amazon VP would have meant, in effect, signing off on actions I despised. So I resigned.&#34;\n However, Bray also notes that he believes Amazon has been &#34;prioritizing this issue and putting massive efforts into warehouse safety&#34;.\n But he also argues that Amazon firing employees who complained is symptomatic of modern capitalism.\n &#34;And at the end of the day, the big problem isn&#39;t the specifics of COVID-19 response. It&#39;s that Amazon treats the humans in the warehouses as fungible units of pick-and-pack potential. Only that&#39;s not just Amazon, it&#39;s how 21st-century capitalism is done,&#34; writes Bray.\n  &#34;Amazon is exceptionally well managed and has demonstrated great skill at spotting opportunities and building repeatable processes for exploiting them. It has a corresponding lack of vision about the human costs of the relentless growth and accumulation of wealth and power,&#34; he writes.\n &#34;If we don&#39;t like certain things Amazon is doing, we need to put legal guardrails in place to stop those things. We don&#39;t need to invent anything new; a combination of antitrust and living-wage and worker-empowerment legislation, rigorously enforced, offers a clear path forward.&#34;\n He makes a distinction between Amazon and the way it treats warehouse workers and AWS, which employs well-paid tech workers.\n AWS &#34;is a different story&#34;, he writes, and &#34;treats workers humanly, strives for work/life balance, struggles to move the diversity needle (and mostly fails, but so does everyone else), and is by and large an ethical organization.&#34;\n &#34;I genuinely admire [AWS&#39;s] leadership,&#34; he says. &#34;Of course, its workers have power. The average pay is very high, and anyone who&#39;s unhappy can walk across the street and get another job paying the same or better.&#34;\n ZDNet has contacted Amazon for its comments and will update this article if it responds.", "posttime": "2020-05-04 23:53:46", "tags": "amazon,\u4e9a\u9a6c\u900a,\u9996\u5e2d,aws", "title": "AWS\u9996\u5e2d\u5de5\u7a0b\u5e08\u8482\u59c6\u00b7\u5e03\u96f7\u56e0\u4e9a\u9a6c\u900a\u89e3\u96c7\u5458\u5de5\u8f9e\u53bb100\u4e07\u7f8e\u5143\u4ee5\u4e0a\u7684\u5de5\u4f5c", "title_en": "Top AWS engineer Tim Bray quits $1m-plus job over Amazon firing employees", "transed": 1, "url": "https://www.zdnet.com/article/top-aws-engineer-tim-bray-quits-1m-plus-job-over-amazon-firing-employees/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["amazon", "\u4e9a\u9a6c\u900a", "\u9996\u5e2d", "aws"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000610, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5929\u524d\uff0c\u6211\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u7bc7\u4e0e\u9ed1\u5ba2\u65b0\u95fb(Hacker News)\u94fe\u63a5\u7684\u3001\u770b\u8d77\u6765\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u201c\u7814\u7a76\u8bba\u6587\u201d\uff0c\u5185\u5bb9\u662f\u4e3a\u4ec0\u4e48\u7f8e\u56fd\u76ee\u524d\u7684\u5c01\u9501\u662f\u5bf9\u51a0\u72b6\u75c5\u6bd2\u5a01\u80c1\u7684\u8fc7\u5ea6\u53cd\u5e94\uff0c\u6211\u4eec\u9700\u8981\u5c3d\u5feb\u91cd\u65b0\u5f00\u653e\u8fd9\u4e2a\u56fd\u5bb6\uff0c\u4ee5\u907f\u514d\u6211\u4eec\u65e0\u6cd5\u6062\u590d\u7684\u707e\u96be\u6027\u7ecf\u6d4e\u635f\u5bb3\u3002\u8fd9\u7bc7\u8bba\u6587\u957f\u7ea67500\u5b57\uff0c\u7528\u975e\u5e38\u6743\u5a01\u7684\u8bed\u6c14\u5199\u6210\uff0c\u5e76\u94fe\u63a5\u4e86\u6570\u5341\u4e2a\u53ef\u4fe1\u7684\u5f15\u7528\u3002\n\u7ecf\u8fc7\u4e00\u756a\u63a2\u7d22\uff0c\u6211\u624d\u610f\u8bc6\u5230\u4f5c\u8005\u662f\u4e00\u540d\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u800c\u4e0d\u662f\u7ecf\u6d4e\u5b66\u5bb6\u3001\u6d41\u884c\u75c5\u5b66\u5bb6\u7b49\u3002\n(\u65c1\u6ce8\uff1a\u5173\u4e8e\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u8ba4\u4e3a\u81ea\u5df1\u6709\u8d44\u683c\u5c31\u4efb\u4f55\u6280\u672f\u6216\u590d\u6742\u95ee\u9898\u53d1\u8868\u610f\u89c1\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f)\u3002\n\u5728\u5bf9\u9ed1\u5ba2\u65b0\u95fb\u7684\u8bc4\u8bba\u4e2d\uff0c\u4f5c\u8005\u56e0\u4e3a\u5728\u4efb\u4f55\u76f8\u5173\u9886\u57df\u90fd\u6ca1\u6709\u7ecf\u9a8c\u6216\u4e13\u4e1a\u77e5\u8bc6\u800c\u53d7\u5230\u731b\u70c8\u62a8\u51fb\u3002\u4ed6\u53cd\u9a73\u8bf4\uff0c\u628a\u4ed6\u53eb\u51fa\u6765\u662f\u56e0\u4e3a\u4ed6\u7f3a\u4e4f\u201c\u8d44\u5386\u201d\uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u6740\u5f0f\u653b\u51fb\uff0c\u4ed6\u7684\u5de5\u4f5c\u5e94\u8be5\u6839\u636e\u5b83\u7684\u4ef7\u503c\u6765\u8bc4\u4f30\u3002\n\u5f88\u9ad8\u5c1a\uff0c\u4f46\u4e0d\u592a\u73b0\u5b9e\u3002\u6bcf\u4ef6\u4e8b\u90fd\u5e94\u8be5\u6839\u636e\u5b83\u7684\u4f18\u70b9\u6765\u8bc4\u4f30\u7684\u60f3\u6cd5\u6709\u51e0\u4e2a\u95ee\u9898\uff1a\n\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\u6765\u8bc4\u4f30\u6bcf\u4ef6\u4e8b\u7684\u662f\u975e\u66f2\u76f4\u3002\u6211\u76f8\u4fe1\u6709\u6570\u767e\u4e07\u4eba\u5bf9\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5e94\u5bf9\u51a0\u72b6\u75c5\u6bd2\u6709\u4e89\u8bba\u548c\u8ba1\u5212\u3002\u5728\u505a\u51fa\u51b3\u5b9a\u4e4b\u524d\uff0c\u6211\u4eec\u4e0d\u80fd\u4ed4\u7ec6\u67e5\u770b\u6240\u6709\u8fd9\u4e9b\u95f2\u804a\u3002\n\u5927\u591a\u6570\u4e8b\u60c5\u4e0d\u80fd\u88ab\u5927\u591a\u6570\u4eba\u7528\u4f18\u70b9\u6765\u8bc4\u4ef7\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7f3a\u4e4f\u8fd9\u6837\u505a\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002\u5728\u8fd9\u7bc7\u8bba\u6587\u4e2d\uff0c\u4f5c\u8005\u94fe\u63a5\u4e86\u8bb8\u591a\u4e13\u5bb6\u7684\u7814\u7a76\u8bba\u6587\uff0c\u8fd9\u662f\u5f88\u597d\u7684\uff0c\u4f46\u4ed6\u5728\u6240\u6709\u8fd9\u4e9b\u7814\u7a76\u7684\u57fa\u7840\u4e0a\u7f16\u7ec7\u4e86\u4e00\u4e2a\u8bba\u70b9\u3002\u7531\u4e8e\u6211\u5728\u8fd9\u4e9b\u9886\u57df\u6ca1\u6709\u4efb\u4f55\u4e13\u4e1a\u77e5\u8bc6\uff0c\u6211\u4e0d\u77e5\u9053\u4ed6\u662f\u5426\u6b63\u786e\u5730\u8bc4\u4f30\u4e86\u6570\u636e\uff0c\u6216\u8005\u4ed6\u662f\u5426\u5ffd\u7565\u4e86\u5176\u4ed6\u4e0d\u652f\u6301\u4ed6\u7ed3\u8bba\u7684\u76f8\u5173\u6570\u636e\u3002\n\u56e0\u6b64\uff0c\u5728\u8bc4\u4f30\u60f3\u6cd5\u548c\u8bba\u70b9\u65f6\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f9d\u8d56\u4e8e\u601d\u7ef4\u6377\u5f84\u6216\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u51b3\u5b9a\u7ed9\u4e88\u5b83\u4eec\u591a\u5c11\u53ef\u4fe1\u5ea6\u3002\n\u4f8b\u5982\uff0c\u5728\u8bc4\u4f30\u9ad8\u98ce\u9669\u3001\u9ad8\u4e0d\u786e\u5b9a\u6027\u3001\u9ad8\u590d\u6742\u6027\u9886\u57df\u7684\u7d22\u8d54\u65f6\uff0c\u4f8b\u5982\u9488\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u516c\u5171\u653f\u7b56\u65b9\u6cd5\uff0c\u4e00\u4e2a\u5f88\u597d\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u53ef\u80fd\u662f\u201c\u6b64\u4eba\u662f\u5426\u5728\u76f8\u5173\u9886\u57df\u62e5\u6709\u4e13\u4e1a\u77e5\u8bc6\u6216\u7ecf\u9a8c\uff1f\u201d\n\u4e00\u79cd\u7cdf\u7cd5\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u662f\uff1a\u201c\u8fd9\u4e9b\u58f0\u660e\u662f\u4ee5\u975e\u5e38\u9ad8\u7684\u4fe1\u5fc3\u548c\u6743\u5a01\u7684\u98ce\u683c\u63d0\u51fa\u7684\u5417\uff1f\u201d\n\u5982\u679c\u6211\u5bf9\u81ea\u5df1\u8bda\u5b9e\uff0c\u6211\u5fc5\u987b\u627f\u8ba4\uff0c\u5982\u679c\u8fd9\u7bc7\u8bba\u6587\u4e0e\u6211\u5df2\u7ecf\u8ba4\u4e3a\u662f\u771f\u7684\u4e00\u81f4\uff0c\u6211\u5bf9\u5b83\u7684\u95ee\u9898\u5c31\u4f1a\u5c0f\u5f97\u591a\u3002\u6211\u5f88\u53ef\u80fd\u4f1a\u5728\u5fc3\u91cc\u628a\u5b83\u4f5c\u4e3a\u652f\u6301\u6211\u7acb\u573a\u7684\u53e6\u4e00\u4ef6\u201c\u8bc1\u636e\u201d\u5b58\u6863\uff0c\u7136\u540e\u7ee7\u7eed\u524d\u8fdb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6000\u7591\u6bcf\u4e00\u4e2a\u8bfb\u8fc7\u90a3\u4efd\u6587\u4ef6\u7684\u4eba\uff0c\u90fd\u5df2\u7ecf\u88ab\u8bf4\u670d\u76f8\u4fe1\u5b83\u7684\u7ed3\u8bba\uff0c\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\n\u4f46\u8fd9\u5c31\u662f\u95ee\u9898\u6240\u5728\uff1a\u8fd9\u7bc7\u8bba\u6587\u53ef\u80fd\u662f\u5efa\u7acb\u5728\u597d\u7684\u8bba\u70b9\u4e4b\u4e0a\u7684\uff0c\u4f46\u5b83\u63d0\u51fa\u7684\u683c\u5f0f\u548c\u80cc\u666f\u9f13\u52b1\u4f7f\u7528\u7cdf\u7cd5\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u3002\u8bed\u6c14\u6743\u5a01\u800c\u81ea\u4fe1\uff0c\u4f5c\u8005\u6ca1\u6709\u663e\u9732\u51fa\u4ed6\u4eec\u7f3a\u4e4f\u4e13\u4e1a\u77e5\u8bc6\uff0c\u7bc7\u5e45\u76f8\u5f53\u957f\uff0c\u5185\u5bb9\u5168\u9762\uff0c\u7ec4\u7ec7\u826f\u597d\uff0c\u7b49\u7b49\u3002\u4f5c\u8005\u751a\u81f3\u7528\u201c\u6211\u4eec\u201d\u800c\u4e0d\u662f\u201c\u6211\u201d\u6765\u5199\u6574\u4ef6\u4e8b\uff0c\u8fd9\u5fae\u5999\u5730\u7ed9\u4eba\u4e00\u79cd\u4e00\u7fa4\u4eba\u5408\u4f5c\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u5370\u8c61(\u5982\u679c\u90a3\u4e9b\u4eba\u662f\u4e13\u5bb6\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u542f\u53d1\u5f0f\u8bc4\u4f30\u65b9\u6cd5)\u3002\n\u4e4d\u4e00\u770b\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u662f\u4e00\u7ec4\u4e13\u5bb6\u64b0\u5199\u7684\u4e00\u4efd\u5168\u9762\u7684\u3001\u4ee5\u8bc1\u636e\u4e3a\u5bfc\u5411\u7684\u62a5\u544a\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u771f\u6b63\u8bc4\u4f30\u57fa\u672c\u4e3b\u5f20\u7684\u975e\u4e13\u5bb6\u8bfb\u8005\u51e0\u4e4e\u6ca1\u6709\u597d\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u8fdb\u884c\u8bc4\u4f30\uff0c\u8fd9\u5bfc\u81f4\u4ed6\u4eec\u9000\u56de\u5230\u7cdf\u7cd5\u7684\u60f3\u6cd5\u4e0a\u3002\n\u8fd9\u6b63\u662f\u4f5c\u8005\u4ee5\u8fd9\u6837\u7684\u683c\u5f0f\u64b0\u5199\u548c\u63d0\u4ea4\u8bba\u6587\u7684\u539f\u56e0\u3002\n\u8fd9\u6837\u505a\u662f\u4e00\u79cd\u8be1\u8fa9\uff0c\u4f60\u66f4\u5173\u5fc3\u7684\u662f\u8d62\u5f97\u8fa9\u8bba\uff0c\u800c\u4e0d\u662f\u771f\u8bda\u5730\u63d0\u51fa\u7406\u7531\u3002\u8bf4\u4f60\u60f3\u8ba9\u4f60\u7684\u7d22\u8d54\u6839\u636e\u662f\u975e\u66f2\u76f4\u8fdb\u884c\u8bc4\u4f30\uff0c\u540c\u65f6\u53c8\u4e0d\u538c\u5176\u70e6\u5730\u9f13\u52b1\u4eba\u4eec\u505a\u76f8\u53cd\u7684\u4e8b\u60c5\uff0c\u8fd9\u662f\u76f8\u5f53\u6709\u9053\u7406\u7684\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u6709\u5f71\u54cd\u529b\u3001\u6709\u542c\u4f17\u3001\u8bd5\u56fe\u8bf4\u670d\u4eba\u4eec\u76f8\u4fe1\u4f60\u7684\u60f3\u6cd5\u662f\u6b63\u786e\u7684\u4eba\uff0c\u4f60\u4e0d\u4ec5\u6709\u8d23\u4efb\u63d0\u51fa\u597d\u7684\u8bba\u70b9\uff0c\u800c\u4e14\u6709\u8d23\u4efb\u4ee5\u4e00\u79cd\u9f13\u52b1\u5bf9\u8fd9\u4e9b\u8bba\u70b9\u8fdb\u884c\u6b63\u786e\u8bc4\u4f30\u7684\u5f62\u5f0f\u548c\u80cc\u666f\u6765\u63d0\u4f9b\u8fd9\u4e9b\u8bba\u70b9\u3002\n\u5982\u679c\u4f60\u4e0d\u613f\u610f\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b83\u524a\u5f31\u4e86\u4f60\u7684\u7406\u7531\uff0c\u4e5f\u8bb8\u4f60\u5e94\u8be5\u91cd\u65b0\u8003\u8651\u4f60\u5728\u505a\u4ec0\u4e48\u3002", "note_en": "A few days ago, I stumbled on an impressive-looking \u201cresearch paper\u201d linked to from Hacker News on why the current lockdowns in the US are an overreaction to the COVID-19 threat, and we need to reopen the country as quickly as possible to avoid catastrophic economic damage from which we can\u2019t recover. The paper is about 7500 words long, written in a very authoritative tone, and links to dozens of credible citations.\n It was only after exploring a bit that I realized that the author is a software engineer, not an economist, epidemiologist, etc.\n   (Side note: what is it about software engineers that we think we\u2019re qualified to pontificate on anything remotely technical or complex?)\n In the comments on Hacker News, the author took a lot of flak for having no experience or expertise in any relevant fields. His rejoinder was that calling him out for a lack of \u201ccredentials\u201d was a form of  ad hominem attack, and his work should be evaluated on its merits.\n High-minded, but not really realistic. The idea that everything should be evaluated on its merits has a couple problems:\n There isn\u2019t enough time to evaluate everything on the merits. I\u2019m sure there are millions of people out there with arguments and plans on how we should deal with COVID-19. We can\u2019t take a close look at all of that chatter before deciding.\n Most things can\u2019t be evaluated on the merits by most people, because they lack the expertise to do so. In the case of this paper, the author linked to many research papers by experts, which is good, but then he wove an argument together out of all that research. And since I don\u2019t have any expertise in any of those fields, I don\u2019t know if he\u2019s evaluating the data correctly, or if he\u2019s ignoring other relevant data that doesn\u2019t support his conclusion.\n As a result, everyone relies on mental shortcuts or heuristics when evaluating ideas and arguments to decide how much credence to give them.\n  For example, when evaluating claims in a high-stakes, high-uncertainty, high-complexity area, like the public policy approach to COVID-19, a good heuristic might be  \u201cdoes this person have expertise or experience in a relevant field?\u201d\n A bad heuristic would be:  \u201care the claims being made with very high confidence and in an authoritative style?\u201d\n   If I\u2019m honest with myself, I have to acknowledge that I would have had much less of a problem with this paper if it agreed with what I already thought to be true. I likely would have just mentally filed it away as another piece of \u201cevidence\u201d supporting my position and moved on. In fact, I suspect that everyone who read that paper who was already persuaded to its conclusions did exactly that.\n But that\u2019s the problem: the paper might be built on good arguments, but it was presented in a format and context that  encourages the use of bad heuristics. The tone was authoritative and confident, the author didn\u2019t prominently disclose their lack of expertise, it\u2019s fairly long and comprehensive, it\u2019s well-organized, etc. The author even wrote the whole thing using \u201cwe\u201d instead of \u201cI\u201d, which subtly gives the impression that a group of people collaborated to write this (which is probably a good heuristic for evaluation, if those people are experts).\n At first glance, it looks like a comprehensive, evidence-driven report by a group of experts. As a result, the non-expert reader who can\u2019t really evaluate the base claims is left with little in the way of good heuristics upon which to base their evaluation, which leads to them falling back on bad thinking.\n This is exactly why the author wrote and presented the paper in such a format.\n Doing so is a form of sophistry, where you care more about winning the argument than making your case in good faith. It\u2019s pretty rich to be saying you want your claims evaluated on the merits while also going out of your way to encourage people to do the opposite.\n If you are someone who has influence, who has an audience, who tries to persuade people that your ideas are true, you have a responsibility to not only make good arguments, but to provide them in a format and context that encourages the right kind of evaluation of those arguments.\n And if you are reluctant to do so because it weakens your case, maybe you should rethink what you\u2019re doing.", "posttime": "2020-05-04 23:41:16", "tags": "\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,\u8bba\u6587,\u7814\u7a76,read", "title": "\u4e0d\uff0c\u6211\u4e0d\u4f1a\u8bfb\u4f60\u7684\u4e1a\u4f59\u51a0\u72b6\u75c5\u6bd2\u201c\u7814\u7a76\u8bba\u6587\u201d", "title_en": "No, I won't read your amateur Covid-19 \u201cresearch paper\u201d", "transed": 1, "url": "https://ryanwaggoner.substack.com/p/no-i-wont-read-your-amateur-covid", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "\u8bba\u6587", "\u7814\u7a76", "read"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000609, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u6d77\u519b\u62e5\u6709\u53cd\u91cd\u529b\u4e13\u5229\u3002\u6216\u8005\u5982\u53d1\u660e\u4eba\u6240\u63cf\u8ff0\u7684\uff1a\u60ef\u6027\u8d28\u91cf\u51cf\u91cd\u88c5\u7f6e\u3002\n\u8be5\u4e13\u5229\u63cf\u8ff0\u4e86\u4e00\u79cd\u88c5\u7f6e\uff0c\u8be5\u88c5\u7f6e\u5229\u7528\u5fae\u6ce2\u53d1\u5c04\u5668\u901a\u8fc7\u8154\u4f53\u4ea7\u751f\u9ad8\u9891\u7535\u78c1\u6ce2\uff0c\u4ece\u800c\u4ea7\u751f\u504f\u632f\u771f\u7a7a\uff0c\u800c\u8fd9\u79cd\u504f\u632f\u771f\u7a7a\u53c8\u964d\u4f4e\u4e86\u88c5\u6709\u8be5\u88c5\u7f6e\u7684\u8f66\u8f86\u7684\u8d28\u91cf\u3002\n\u53d1\u660e\u4eba\u4f3c\u4e4e\u5efa\u8bae\u5229\u7528\u9ad8\u80fd\u7535\u78c1\u573a\u53d1\u751f\u5668\u7684\u7279\u6027\u6765\u4e0e\u771f\u7a7a\u80fd\u6001\u53d1\u751f\u5f3a\u70c8\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6839\u636e\u4f5c\u8005\u7684\u8bf4\u6cd5\uff0c\u6240\u63cf\u8ff0\u7684\u7cfb\u7edf\u4f3c\u4e4e\u80fd\u4ea7\u751f\u8d2f\u7a7f\u6574\u4e2a\u65f6\u7a7a\u7ed3\u6784\u7684\u91cf\u5b50\u573a\u6da8\u843d\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u76ee\u7684\u662f\u6539\u53d8\u6750\u6599\u4ee5\u4ea7\u751f\u53cd\u91cd\u529b\u573a\u2026\u3002\n2020\u5e745\u67081\u65e5", "note_en": "The  US Navy has patented antigravity. Or as described by the inventors: inertial mass reduction device.\n The patent describes a device that uses a microwave emitter to create a high-frequency electromagnetic wave through a cavity to create a polarized vacuum.This polarized vacuum, in turn, reduces the mass of the vehicle containing the device.\n  It seems that the inventors propose to use the properties of high energy electromagnetic field generator to interact strongly with the vacuum energy state.The system described seems, according to the authors, to generate quantum fields\u2019 fluctuations permeating the entire fabric of spacetime.Which in this case, the aim is to alter the material to create an antigravity field\u2026\n  May 01, 2020", "posttime": "2020-05-04 23:28:48", "tags": "\u6d77\u519b,patent,\u63cf\u8ff0,create", "title": "\u7f8e\u56fd\u6d77\u519b\u4e13\u5229\u53cd\u91cd\u529b\u88c5\u7f6e", "title_en": "US Navy Patent Antigravity Device", "transed": 1, "url": "https://www.blopeur.com/2020/05/01/navy-patent-antigravity.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6d77\u519b", "patent", "\u63cf\u8ff0", "create"]}, {"category": "", "categoryclass": "", "imagename": "d446f3f451bb4a0fe913978a47ed14e2.jpeg", "infoid": 1000607, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e744\u6708\uff0c\u83f2\u5f8b\u5bbe\u533b\u5b66\u5bb6\u9a6c\u514b\u00b7\u963f\u91cc\u76ae\u5965(Mark Alipio)\u535a\u58eb\u5728\u7f51\u4e0a\u516c\u5e03\u4e86\u4e00\u7ec4\u5177\u6709\u63d0\u793a\u6027\u7684\u6570\u5b57\u3002\u5728\u5357\u4e9a\u56fd\u5bb6\u4e09\u5bb6\u533b\u9662\u768449\u540d\u51a0\u72b6\u75c5\u6bd2\u8f7b\u5ea6\u75c7\u72b6\u60a3\u8005\u4e2d\uff0c\u53ea\u6709\u4e24\u540d\u60a3\u8005\u7ef4\u751f\u7d20D\u6c34\u5e73\u8f83\u4f4e\uff1b104\u540d\u75c7\u72b6\u4e25\u91cd\u6216\u4e25\u91cd\u7684\u60a3\u8005\u4e2d\uff0c\u53ea\u6709\u56db\u540d\u60a3\u8005\u7684\u7ef4\u751f\u7d20D\u6c34\u5e73\u4e0d\u4f4e\u3002\u75c7\u72b6\u8d8a\u4e25\u91cd\uff0c\u60a3\u8005\u4e0d\u4ec5\u7ef4\u751f\u7d20D\u6c34\u5e73\u4f4e\uff0c\u800c\u4e14\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u7684\u53ef\u80fd\u6027\u4e5f\u5c31\u8d8a\u5927\u3002\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u4f1a\u5f71\u54cd\u75c5\u60c5\u4e25\u91cd\u4e0e\u5426\u5417\uff1f\n\u957f\u671f\u4ee5\u6765\uff0c\u6709\u8bc1\u636e\u8868\u660e\uff0c\u5145\u8db3\u7684\u7ef4\u751f\u7d20D\u53ef\u4ee5\u9884\u9632\u75c5\u6bd2\uff0c\u7279\u522b\u662f\u547c\u5438\u9053\u75c5\u6bd2\uff0c\u5305\u62ec\u666e\u901a\u611f\u5192\u3002\u7ef4\u751f\u7d20D\u589e\u52a0\u4e86\u6297\u75c5\u6bd2\u86cb\u767d\u7684\u4ea7\u751f\uff0c\u51cf\u5c11\u4e86\u7ec6\u80de\u56e0\u5b50\uff0c\u800c\u7ec6\u80de\u56e0\u5b50\u662f\u4e00\u79cd\u514d\u75ab\u5206\u5b50\uff0c\u53ef\u4ee5\u5f15\u8d77\u4e00\u573a\u5371\u9669\u7684\u708e\u75c7\u201c\u98ce\u66b4\u201d\u3002\u957f\u671f\u4ee5\u6765\uff0c\u4eba\u4eec\u4e00\u76f4\u6000\u7591\uff0c\u5927\u591a\u6570\u4eba\u5728\u665a\u51ac\u65f6\u7ef4\u751f\u7d20D\u6c34\u5e73\u8f83\u4f4e\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89e3\u91ca\u4e86\u6d41\u611f\u6d41\u884c\u7684\u5b63\u8282\u6027\u9ad8\u5cf0\uff0c\u800c\u6625\u5b63\u7ef4\u751f\u7d20D\u6c34\u5e73\u7684\u4e0a\u5347\uff0c\u4e5f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89e3\u91ca\u4e86\u6d41\u611f\u75ab\u60c5\u7a81\u7136\u7ed3\u675f\u7684\u539f\u56e0\u3002\u7ef4\u751f\u7d20D\u662f\u7531\u7d2b\u5916\u7ebf\u843d\u5728\u76ae\u80a4\u4e0a\u4ea7\u751f\u7684\uff0c\u6240\u4ee5\u5317\u65b9\u6c14\u5019\u7684\u8bb8\u591a\u4eba\u5230\u4e86\u51ac\u672b\u5c31\u4f1a\u7f3a\u4e4f\u7ef4\u751f\u7d20D\u3002\u5403\u9c7c\u548c\u86cb\u6709\u5e2e\u52a9\uff0c\u4f46\u5f88\u96be\u5728\u996e\u98df\u4e2d\u6444\u53d6\u8db3\u591f\u7684\u9c7c\u548c\u86cb\u3002\n\u4ee5\u4e0b\u5217\u51fa\u7684\u662f\u6bd4\u4e00\u822c\u4eba\u66f4\u6709\u53ef\u80fd\u7f3a\u4e4f\u7ef4\u751f\u7d20D\u7684\u4eba\uff1a\u76ae\u80a4\u9edd\u9ed1\u7684\u4eba(\u8272\u7d20\u963b\u6321\u9633\u5149)\uff1b\u80a5\u80d6\u8005(\u7ef4\u751f\u7d20\u88ab\u9694\u79bb\u5728\u8102\u80aa\u7ec6\u80de\u4e2d)\uff1b2\u578b\u7cd6\u5c3f\u75c5\u60a3\u8005(\u7ef4\u751f\u7d20D\u63d0\u9ad8\u8eab\u4f53\u5bf9\u80f0\u5c9b\u7d20\u7684\u654f\u611f\u5ea6)\uff1b\u8001\u5e74\u4eba(\u4ed6\u4eec\u503e\u5411\u4e8e\u8eb2\u907f\u592a\u9633\uff0c\u5403\u5f97\u66f4\u8282\u4fed)\uff1b\u57ce\u5e02\u5c45\u6c11(\u4ed6\u4eec\u770b\u5230\u7684\u9633\u5149\u66f4\u5c11)\u3002\u8fd9\u5f20\u5355\u5b50\u6709\u4ec0\u4e48\u5370\u8c61\u5417\uff1f\u6240\u6709\u4eba\u4f3c\u4e4e\u90fd\u66f4\u6709\u53ef\u80fd\u56e0\u4e25\u91cd\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u800c\u4f4f\u9662\u3002\n\u6b64\u5916\uff0c\u51ac\u5b63\u7537\u6027\u7684\u7ef4\u751f\u7d20D\u6c34\u5e73\u5f80\u5f80\u7565\u4f4e\u4e8e\u5973\u6027\uff0c\u4f46\u590f\u5b63\u7684\u7ef4\u751f\u7d20D\u6c34\u5e73\u7565\u9ad8\uff0c\u5c3d\u7ba1\u8fd9\u79cd\u5dee\u5f02\u53ef\u80fd\u4e0d\u8db3\u4ee5\u89e3\u91ca\u4e3a\u4ec0\u4e48\u7537\u6027\u6b7b\u4e8e\u51a0\u72b6\u75c5\u6bd2\u7684\u53ef\u80fd\u6027\u8981\u9ad8\u5f97\u591a\u3002\n\u66fc\u5f7b\u65af\u7279\u6700\u8fd1\u7684\u4e00\u9879\u7814\u7a76\u53d1\u73b0\uff0c\u590f\u5b63\u7ef4\u751f\u7d20D\u7684\u5e73\u5747\u6c34\u5e73\u6bd4\u51ac\u5b63\u9ad830%\uff0c\u767d\u4eba\u7684\u5e73\u5747\u6c34\u5e73\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u5357\u4e9a\u4eba\u7684\u4e09\u500d\u3002\u540e\u8005\u5728\u51ac\u5929\u7684\u8840\u6db2\u4e2d\u7684\u4e2d\u4f4d\u6570\u4ec5\u4e3a\u6bcf\u6beb\u53475.8\u6beb\u514b\uff0c\u8fdc\u4f4e\u4e8e\u88ab\u8ba4\u4e3a\u8db3\u591f\u768420\u6beb\u514b\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5c3d\u7ba1\u82f1\u56fd\u516c\u5171\u536b\u751f\u90e8\u95e8\u63d0\u4f9b\u4e86\u6307\u5357\uff0c\u4f46NHS\u5168\u79d1\u533b\u751f\u5e76\u4e0d\u5b9a\u671f\u68c0\u67e5\u7ef4\u751f\u7d20D\u6c34\u5e73\uff0c\u4e5f\u4e0d\u5efa\u8bae\u670d\u7528\u8865\u5145\u5242\u3002\n\u544a\u8bc9\u6bcf\u4e2a\u4eba\u5728\u8fd9\u4e2a\u65f6\u5019\u670d\u7528\u7ef4\u751f\u7d20D\u8865\u5145\u5242\uff0c\u4ee5\u9632\u4e07\u4e00\u4f1a\u6709\u5e2e\u52a9\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u5417\uff1f\u5728\u4e0a\u5468\u5199\u7ed9\u300a\u82f1\u56fd\u533b\u5b66\u6742\u5fd7\u300b\u7684\u4e00\u5c01\u4fe1\u4e2d\uff0c\u6566\u4fc3\u5173\u6ce8\u963f\u91cc\u76ae\u5965\u535a\u58eb\u7684\u7814\u7a76\u7ed3\u679c\u7684\u4e00\u957f\u4e32\u533b\u751f\u540d\u5355\u4e2d\u5199\u9053\uff1a\u201c\u7ef4\u751f\u7d20D\u751f\u7269\u5b66\u662f\u4e00\u4e2a\u6210\u719f\u7684\u3001\u7ecf\u8fc7\u5145\u5206\u7814\u7a76\u7684\u9886\u57df\uff0c\u53ef\u4ee5\u8ffd\u6eaf\u5230100\u5e74\u524d\u3002\u5728\u4e34\u5e8a\u53c2\u6570\u5185\uff0c\u5242\u91cf\u548c\u98ce\u9669\u662f\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u88ab\u5f88\u597d\u5730\u91cf\u5316\u3002\u653f\u5e9c\u7684\u6444\u53d6\u6307\u5bfc\u662f\u5b58\u5728\u7684\u3002\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u75c7\u662f\u4e00\u79cd\u533b\u5b66\u4e0a\u53ef\u4ee5\u63a5\u53d7\u7684\u60c5\u51b5\uff0c\u9700\u8981\u6cbb\u7597\u3002\u201c\u3002\n\u770b\u5728\u4e0a\u5e1d\u7684\u4efd\u4e0a\uff0c\u80fd\u4e0d\u80fd\u8bf7\u8c01\u544a\u8bc9\u8b66\u5bdf\u4e0d\u8981\u518d\u9a9a\u6270\u516c\u56ed\u91cc\u7684\u65e5\u5149\u6d74\u8005\u4e86\uff1f", "note_en": "A suggestive set of numbers was published online in April by a medical scientist in the Philippines, Dr Mark Alipio. Of 49 patients with  mild symptoms of Covid-19 in three hospitals in southern Asian countries, only two had low levels of vitamin D; of 104 patients with critical or severe symptoms, only four did  not have low levels of vitamin D. The more severe the symptoms, the more likely a patient was to be not just low but deficient in the vitamin. Could  vitamin D deficiency make the difference between getting very ill or not?\n There has long been evidence that a sufficiency of vitamin D  protects against viruses, especially respiratory ones, including the common cold. Vitamin D increases the production of antiviral proteins and decreases cytokines, the immune molecules that can cause a \u201cstorm\u201d of dangerous inflammation. It has long been suspected that most people\u2019s low vitamin D levels in late winter partly explain the seasonal peaking of flu epidemics, and rising vitamin D levels in spring partly explain their sudden ending. Vitamin D is made by ultraviolet light falling on the skin, so many people in northern climates have a deficiency by the end of winter. Eating fish and eggs helps, but it is hard to get enough of it in the diet.\n  Here is a list of people who are more likely to be vitamin D deficient than the average: dark-skinned people (pigment blocks sunlight);  obese people (the vitamin gets sequestered in fat cells); type-2 diabetics (vitamin D improves the body\u2019s sensitivity to insulin); the elderly (they tend to avoid the sun and eat more frugally); city dwellers (they see less sunlight). Does that list ring any bells? All appear to be more likely to hospitalised with severe cases of Covid-19.\n  In addition, men tend to have slightly lower levels of vitamin D than women in winter, but slightly higher in summer, though the difference is probably not enough to explain why men are much more likely to die of Covid-19.\n One recent study in Manchester found that average levels of vitamin D were 30 per cent\u00a0higher in summer than in winter and three times as high at all times in white people as in South Asians. The latter had a median level of just 5.8 nanograms per millilitre in their blood in winter, way below the 20 that is regarded as sufficient. Surprisingly, despite guidelines from Public Health England, NHS GPs do not routinely check vitamin D levels or advise taking supplements.\n  Might it not be a good idea to tell everybody to take vitamin D supplements at this time, just in case it helps? In a letter to the British Medical Journal\u00a0last week urging attention to Dr Alipio\u2019s results, a long list of doctors wrote as follows: \u201cVitamin D biology\u00a0is a mature well-researched field, dating back 100 years. Doses, and risks, within clinical parameters, are established and well quantified. Governmental intake guidance exists. Vitamin D deficiency is a medically accepted condition, requiring treatment.\u201d\n And for goodness sake, will somebody please tell the police to stop harassing sunbathers in parks?", "posttime": "2020-05-04 23:28:05", "tags": "\u7ef4\u751f\u7d20,\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,vitamin", "title": "\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u4e0e\u66f4\u4e25\u91cd\u7684\u51a0\u72b6\u75c5\u6bd2\u75c7\u72b6\u4e4b\u95f4\u7684\u8054\u7cfb", "title_en": "Link between Vitamin D deficiency and more serious Covid-19 symptoms", "transed": 1, "url": "https://www.telegraph.co.uk/news/2020/05/03/time-take-seriously-link-vitamin-d-deficiency-serious-covid/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7ef4\u751f\u7d20", "\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "vitamin"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000606, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "My Side\u9879\u76ee(PigCI)\u662f\u4e00\u4e2a\u7ea2\u5b9d\u77f3\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u9644\u52a0\u5230RSpec\u6d4b\u8bd5\u5957\u4ef6\u4e2d\uff0c\u5982\u679c\u60a8\u7684\u5185\u5b58\u4f7f\u7528\u91cf\u6216\u6570\u636e\u5e93\u8bf7\u6c42\u610f\u5916\u589e\u52a0\uff0c\u5b83\u4f1a\u901a\u8fc7GitHub App\u5411\u60a8\u53d1\u51fa\u8b66\u544a\u3002\n\u5b83\u7684\u4e0b\u8f7d\u91cf\u521a\u521a\u8d85\u8fc79000\u6b21\uff0c\u800c\u4e14\u4ece\u7528\u6237\u90a3\u91cc\u5f97\u5230\u4e86\u4e00\u4e9b\u5f88\u68d2\u7684\u53cd\u9988\u3002\u6211\u6253\u7b97\u901a\u8fc7GitHub Marketplace\u5c06\u8fd9\u4e2a\u5e93\u8d27\u5e01\u5316\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u603b\u5171\u8d5a\u4e860\u7f8e\u5143\u3002\n\u6211\u57282020\u5e743\u6708\u51b3\u5b9a\uff0c\u73b0\u5728\u662f\u5173\u95edGitHub App\u65b9\u9762\u7684\u597d\u65f6\u673a\uff0c\u8ba9\u81ea\u5df1\u817e\u51fa\u65f6\u95f4\u4e13\u6ce8\u4e8e\u5176\u4ed6\u9879\u76ee\u3002\u6211\u5df2\u7ecf\u5f00\u653e\u4e86GitHub App\u7684\u6e90\u4ee3\u7801(\u5bf9\u4e8e\u4efb\u4f55\u5bf9\u4f7f\u7528Ruby on rails\u8bbe\u7f6eGitHub App\u611f\u5174\u8da3\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f88\u6709\u5e2e\u52a9)\uff0c\u6211\u8fd8\u66f4\u65b0\u4e86Ruby Gem\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u9700\u8981GitHub App\u6765\u4f20\u9012/\u5931\u8d25Pull\u8bf7\u6c42\u3002\n\u6211\u5728\u8bd5\u56fe\u5c06PigCI\u8d27\u5e01\u5316\u7684\u8fc7\u7a0b\u4e2d\u5b66\u5230\u4e86\u5f88\u591a(\u8fd9\u5f88\u6709\u8da3\uff01)\uff0c\u4f46\u6211\u4e5f\u72af\u4e86\u4e00\u4e9b\u9519\u8bef\uff0c\u6211\u5e0c\u671b\u522b\u4eba\u80fd\u53d1\u73b0\u8fd9\u4e9b\u9519\u8bef\u662f\u6709\u7528\u7684\u3002\n\u4ece\u7b2c\u4e00\u5929\u8d77\uff0c\u6211\u5c31\u63a8\u51fa\u4e86PigCI\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u5168\u4f1a\u5531\u6b4c\u548c\u8df3\u821e\u7684SaaS\u3002\u8fd9\u662f\u4e00\u79cd\u7cdf\u7cd5\u7684\u505a\u6cd5\uff0c\u6211\u6839\u672c\u4e0d\u77e5\u9053\u4eba\u4eec\u662f\u5426\u4f1a\u4f7f\u7528\u8fd9\u79cd\u4ea7\u54c1\uff0c\u66f4\u4e0d\u7528\u8bf4\u4ed6\u4eec\u662f\u5426\u4f1a\u4e3a\u6b64\u4e70\u5355\u4e86\u3002\u4e0d\u8fc7\uff0c\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u56e0\u4e3a\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5efa\u7acb\u4e25\u91cd\u4f9d\u8d56GitHub\u7684\u8ba2\u9605\u6a21\u5f0f\uff0c\u6240\u4ee5\u6211\u4e0d\u613f\u610f\u8003\u8651\u66ff\u4ee3\u7684\u8d27\u5e01\u5316\u65b9\u5f0f\u3002\n\u6211\u8ba4\u4e3a\uff0c\u60f3\u8981\u63a8\u51fa\u4e00\u6b3e\u7cbe\u7f8e\u7684\u4ea7\u54c1\u662f\u5f88\u6b63\u5e38\u7684\uff0c\u53ea\u5411\u5ba2\u6237\u6536\u53d6\u5355\u4e00\u8d39\u7528\u662f\u5f88\u6b63\u5e38\u7684\u3002\u4f46\u8fd9\u662f\u6700\u7cdf\u7cd5\u7684\u8d5a\u94b1\u65b9\u5f0f\u3002\u5f53\u6211\u770b\u5230\u6d77\u4e9a\u5b9d\u77f3\u901a\u8fc7GumRoad\u5145\u7535\u65f6\uff0c\u6211\u624d\u771f\u6b63\u610f\u8bc6\u5230\u6211\u641e\u7838\u4e86\u591a\u5c11\u3002\u6211\u6d6a\u8d39\u4e86\u5927\u91cf\u7684\u65f6\u95f4\u6765\u6784\u5efa\u652f\u6301\u8ba2\u9605\u6a21\u578b\u7684\u90e8\u4ef6\uff0c\u800c\u6211\u672c\u5e94\u8be5\u63a8\u5e7f\u548c\u6539\u8fdb\u8fd9\u4e2a\u8be5\u6b7b\u7684\u4e1c\u897f\uff01\n\u5982\u679c\u6211\u8981\u91cd\u65b0\u505a\u4e00\u6b21\uff0c\u6211\u53ea\u4f1a\u5728\u81ea\u8ff0\u6587\u4ef6\u4e2d\u7528\u4e00\u4e2a\u5c0f\u5c0f\u7684\u8d2d\u4e70\u8bb8\u53ef\u8bc1\u8bf7\u6c42\u6765\u6784\u5efa\u4e00\u5c0f\u90e8\u5206\u4ea7\u54c1\u3002\u8db3\u4ee5\u8ba9\u4eba\u4eec\u770b\u5230\u5b83\u7684\u5de5\u4f5c\uff0c\u4f46\u53ea\u8981\u7a0d\u5fae\u63a8\u52a8\u4e00\u4e0b\uff0c\u8ba9\u4eba\u4eec\u9a8c\u8bc1\u5b83&\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4ea7\u54c1\uff0c\u7528\u4ed6\u4eec\u7684\u94b1\u3002\n\u6211\u6ca1\u6709\u82b1\u592a\u591a\u7cbe\u529b\u6765\u63a8\u5e7fPigCI(\u6211\u5728GitHub Marketplace\u4e2d\u83b7\u5f97\u4e86\u8ba4\u8bc1)\u3002\u7136\u800c\uff0c\u5f53\u6211\u7b2c\u4e00\u6b21\u63a8\u51fa\u7684\u65f6\u5019\uff0c\u6211\u8fdb\u884c\u4e86\u8bd5\u9a8c\uff0c\u4ee5\u83b7\u5f97\u5bf9\u6211\u6765\u8bf4\u6700\u5408\u9002\u7684\u611f\u89c9\u3002\n\u8d77\u521d\uff0c\u6211\u901a\u8fc7AdWords\u82b1\u8d39\u4e8650\u7f8e\u5143\uff0c\u4f46\u662f\u6211\u9519\u8bef\u5730\u914d\u7f6e\u4e86\u6211\u7684\u6d3b\u52a8\uff0c\u6240\u4ee5\u4e0d\u52305\u5206\u949f\u5c31\u5b8c\u6210\u4e86&amp\uff1b\u751f\u6210\u4e86\u96f6\u5b89\u88c5(\u54ce\u5440)\u3002\u6211\u7684\u76ee\u6807\u662f\u8ba9\u5173\u952e\u5b57&#34\uff1brails&34\uff1b\uff0c&#34\uff1bmemory&#34\uff1b&amp\uff1b&34\uff1b\u7528\u6cd5\u51fa\u73b0\u5728\u641c\u7d22\u67e5\u8be2\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u786e\u5207\u7684\u77ed\u8bed\u3002\u6240\u4ee5\u6211\u521a\u521a\u628a\u5bfb\u627e\u56fd\u5bb6\u94c1\u8def\u4f7f\u7528\u91cf\u7684\u4eba\u9001\u5230\u4e86\u4e00\u4e2a\u4ee5\u732a\u4e3a\u4e3b\u9898\u7684\u7f51\u7ad9\u4e0a\u3002\u51e0\u4e2a\u6708\u540e\uff0c\u6211\u7528Typo CI\u518d\u6b21\u5c1d\u8bd5\u4e86AdWords(50\u7f8e\u5143\uff0c\u8fd9\u6b21\u76ee\u6807\u975e\u5e38\u660e\u786e)&\u7ed3\u679c\u662f\u6bcf\u6b21\u5b89\u88c5\u5927\u7ea65\u7f8e\u5143\u3002\n\u6211\u8fd8\u5728Twitter\u6d3b\u52a8\u4e0a\u82b1\u4e8650\u7f8e\u5143\u3002\u6211\u63a8\u5e7f\u7684\u90a3\u6761\u63a8\u7279\u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u7248\u672c(\u563f\uff0c\u6211\u63a8\u51fa\u4e86PigCI\uff0c\u8fd9\u662f\u4e00\u6b3eRuby on Rails\u7684\u5185\u5b58\u8ddf\u8e2a\u5de5\u5177)\uff0c\u4f46\u6211\u6700\u7ec8\u5f97\u5230\u4e86\u5927\u7ea65\u4e2a\u5b89\u88c5\u7248\u672c\u3002\n\u6211\u53d1\u73b0\u6700\u6709\u7528\u7684\u63a8\u5e7f\u5f62\u5f0f\u5c31\u662f\u4e0e\u5f00\u53d1\u4eba\u5458\u5750\u4e0b\u6765\uff0c\u503e\u542c\u4ed6\u4eec\u7684\u95ee\u9898\uff0c\u8ba9\u4ed6\u4eec\u8bd5\u4e00\u8bd5\u6211\u7684\u4ea7\u54c1\u3002\u4e0e\u4eba\u9762\u5bf9\u9762\u7684\u6700\u9177\u7684\u4e8b\u60c5\u662f\u6211\u80fd\u591f\u5f97\u5230\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u53cd\u9988\u3002\u5bf9\u4e8e\u4e00\u4f4d\u5ba2\u6237\uff0c\u4ed6\u4eec\u7ed9\u6211\u53d1\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u544a\u8bc9\u6211\u4ed6\u4eec\u8ba4\u4e3a\u4ee4\u4eba\u8ba8\u538c\u7684\u95ee\u9898\uff0c\u8fd9\u82b1\u4e86\u51e0\u4e2a\u5c0f\u65f6\u624d\u80fd\u89e3\u51b3\uff0c\u4ed6\u4eec\u4e00\u76f4\u662f\u5ba2\u6237\uff0c\u76f4\u5230\u6211\u544a\u8bc9\u4ed6\u4eec\u6211\u8981\u5173\u95ed\u5b83\u3002\n\u4fdd\u6301\u6301\u7eed\u6784\u5efa\u7684\u52a8\u529b\u662f\u6784\u5efa\u4ea7\u54c1\u6700\u56f0\u96be\u7684\u65b9\u9762\u4e4b\u4e00\u3002\n\u6211\u8ba9\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6bcf\u5929\u65e9\u4e0a\u901a\u8fc7SLACK\u53d1\u5e03\u4e00\u4e2a\u6bcf\u65e5\u5355\u53e3\u76f8\u58f0\u3002\u770b\u5230\u65b0\u7684\u4eba\u52a0\u5165\u4e86\uff0c\u6216\u8005\u5df2\u7ecf\u5904\u7406\u4e86\u5f88\u591a\u63d0\u4ea4\uff0c\u771f\u7684\u6fc0\u52b1\u4e86\u6211\uff01\u5b83\u82b1\u4e86\u5927\u7ea6\u4e00\u4e2a\u5c0f\u65f6\u6765\u6784\u5efa&amp\uff1bI&amp\uff1b\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u5728\u6240\u6709\u5176\u4ed6\u7684\u8f85\u52a9\u9879\u76ee\u4e2d\u90fd\u590d\u5236\u4e86\u5b83\u3002\n\u6211\u4f7f\u7528GitHub Marketplace\u4f5c\u4e3a\u7528\u6237\u5c06\u4ed6\u4eec\u7684GitHub\u8d26\u6237\u8fde\u63a5\u5230\u6211\u7684SaaS\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u5212\u7b97\uff0cGitHub\u4f1a\u628a\u6211\u5217\u5728\u4ed6\u4eec\u7684\u5e02\u573a\u4e0a(\u63a8\u52a8\u5b89\u88c5)\uff0c\u540c\u65f6\u4ece\u4ed8\u8d39\u5c42\u7ea7\u8ba2\u9605\u4e2d\u62bd\u53d630%\u7684\u5206\u6210\u3002\nGitHub\u7684\u95ee\u9898\u662f\uff0c\u5728\u6211\u5f00\u59cb\u6536\u53d6\u4f7f\u7528\u8d39\u4e4b\u524d\uff0c\u6211\u5fc5\u987b\u7ecf\u8fc7\u9a8c\u8bc1(\u8fd9\u662f100\u6b21\u5b89\u88c5\uff0c\u8fd9\u662f\u975e\u5e38\u5bb9\u6613\u901a\u8fc7AdWords\u5b9e\u73b0\u7684)\u3002\u5728\u5f00\u59cb\u6536\u8d39\u4e4b\u524d\uff0c\u6211\u5bf9\u5fc5\u987b\u8fbe\u5230\u7528\u6237\u95e8\u69db\u6ca1\u6709\u95ee\u9898\uff0c\u4f46GitHub\u57281\u6708\u4efd\u6682\u505c\u4e86\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u9a8c\u8bc1\u3002\u8fd9\u771f\u7684\u628a\u6211\u641e\u7838\u4e86\uff0c\u56e0\u4e3a\u5e02\u573a\u6307\u5357\u8bf4\uff0c\u5982\u679c\u6211\u5728GitHub Marketplace\u4e4b\u5916\u63d0\u4f9b\u4ed8\u8d39\u670d\u52a1\uff0c\u6211\u5c31\u4e0d\u80fd\u5728GitHub\u5e02\u573a\u4e0a\u5e02\u3002\n\u8fd9\u610f\u5473\u7740\u5728\u8fc7\u53bb\u76845\u4e2a\u6708\u91cc\uff0c\u5982\u679c\u6211\u5728\u4ed6\u4eec\u7684\u5e02\u573a\u4e0a\uff0c\u6211\u8d5a\u4e00\u5206\u94b1\u7684\u673a\u4f1a\u4e3a\u96f6\uff0c\u9664\u975e\u6211\u88ab\u6838\u5b9e(\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684)\u3002\u8fd9\u771f\u7684\u627c\u6740\u4e86\u6211\u7684\u52a8\u529b\u3002\u6211\u7684\u4ea7\u54c1\u662f\u56f4\u7ed5\u5e02\u573a\u6253\u9020\u7684\u3002\u5f53\u6211\u8bd5\u56fe\u8054\u7cfb\u4ed6\u4eec\u5173\u4e8e\u6682\u505c\u72b6\u6001\u7684\u652f\u6301\u65f6\uff0c\u4ed6\u4eec\u82b1\u4e86\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u56de\u590d\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u6211\u4e00\u76f4\u5e0c\u671b\u4ed6\u4eec\u80fd\u518d\u6b21\u5f00\u59cb\u9a8c\u8bc1\u7533\u8bf7\uff0c\u4f46\u4e8b\u540e\u770b\u6765\uff0c\u5f53\u6211\u88ab\u544a\u77e5\u5fc5\u987b\u7b49\u5f85\u901a\u8fc7GitHub\u5f00\u59cb\u6536\u8d39\u7684\u90a3\u4e00\u523b\uff0c\u6211\u5c31\u5e94\u8be5\u5f00\u59cb\u901a\u8fc7\u6761\u7eb9\u6216GumRoad\u6536\u8d39\u3002\n\u6211\u4f7f\u7528Heroku\u8fdb\u884c\u6258\u7ba1(\u4e24\u4e2adynos\uff0cRedis\uff1bamp\uff1b\u4e00\u4e2aPostgres\u6570\u636e\u5e93\uff0c\u6bcf\u670823\u7f8e\u5143)\u3002\u6211\u771f\u7684\u5f88\u559c\u6b22\u4ed6\u4eec\u63d0\u4f9b\u7684\u5f00\u7bb1\u5373\u7528\u7684\u5de5\u5177\uff0c\u4f46\u6211\u7279\u522b\u559c\u6b22\u4eceGitHub\u81ea\u52a8\u90e8\u7f72\u7684\u7b80\u4fbf\u6027\u3002\n\u4e00\u65e6\u6211\u6709\u4e86\u4e00\u4e2a\u50cf\u6837\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u6211\u5c31\u5c06Dependabot\u8bbe\u7f6e\u4e3a\u81ea\u52a8\u5408\u5e76\u8865\u4e01\uff0c\u4e00\u65e6\u6d4b\u8bd5\u5957\u4ef6\u901a\u8fc7\uff0c\u8fd9\u4e9b\u8865\u4e01\u5c31\u4f1a\u81ea\u52a8\u90e8\u7f72\u3002\u8fd9\u610f\u5473\u7740\u5f53\u6211\u6709\u4e00\u4e9b\u7a7a\u95f2\u65f6\u95f4\u65f6(\u4f8b\u5982\uff0c\u4e00\u4e2a\u5b89\u9759\u7684\u5468\u672b\u6216\u665a\u4e0a)\uff0c\u6211\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u6784\u5efa\u4e00\u4e2a\u65b0\u529f\u80fd\u6216\u4fee\u590d\u4e00\u4e2a\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u4f8b\u884c\u7684\u7ef4\u62a4\u3002\u592a\u68d2\u4e86\uff01\n\u6211\u751a\u81f3\u53ef\u4ee5\u5728\u706b\u8f66\u4e0a\u901a\u8fc7iPhone\u53d1\u51fa\u62c9\u53d6\u8bf7\u6c42\uff0c\u4ece\u800c\u5feb\u901f\u8c03\u6574\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u73b0\u5728\u5728\u6211\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e5f\u6709\u540c\u6837\u7684\u8bbe\u7f6e\uff0c\u56e0\u4e3a\u6ca1\u6709\u5b83\u6211\u662f\u4e0d\u60f3\u6d3b\u4e0b\u53bb\u7684\u3002\n\u6709\u6ca1\u6709\u60f3\u8fc7\u4e3a\u4ec0\u4e48\u5f88\u591a\u5e94\u7528\u7a0b\u5e8f\u7ecf\u5e38\u5728app.company-name.com\u8fd9\u6837\u7684\u5b50\u57df\u4e0a\uff1f\u6211\u7a0d\u5fae\u590d\u5236\u4e86\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6211\u7684API&amp\uff1bWebHook\u7aef\u70b9\u4f4d\u4e8e\u5b50\u57df&amp\uff1b\u6211\u5e0c\u671b\u6211\u7684\u4e3b\u5e94\u7528\u7a0b\u5e8f\u4e5f\u662f\u8fd9\u6837\u505a\u7684\u3002\n\u80fd\u591f\u6309\u5b50\u57df\u540d\u8fc7\u6ee4\u6211\u7684\u65e5\u5fd7\uff0c\u8fd9\u8ba9\u6211\u975e\u5e38\u5bb9\u6613\u770b\u5230\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u800c\u4e14\u5b83\u8ba9\u6211\u5f88\u5bb9\u6613\u8003\u8651\u672a\u6765\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u6211\u5c06\u5982\u4f55\u6269\u5c55\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u5404\u4e2a\u90e8\u5206\u3002\n\u6211\u771f\u5e0c\u671b\u6211\u628a\u6211\u7684\u8425\u9500\u7f51\u7ad9\u653e\u5728\u4e00\u4e2a\u4e0e\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u540c\u7684\u5b50\u57df\u4e0a\u3002\u6211\u8d8a\u6765\u8d8a\u559c\u6b22\u62e5\u6709\u4e00\u4e2a\u5feb\u901f\u7684\u8425\u9500\u4e2d\u95f4\u5546\u7f51\u7ad9\uff0c\u8ba9\u7528\u6237\u9762\u5bf9\u5176\u4ed6\u5730\u65b9\u8fd0\u884cRails\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u3002\n\u6211\u7ed9\u8fd9\u4e2a\u9879\u76ee\u53d6\u540d\u4e3aPigCI&34\uff1b\u3002\u4f60\u77e5\u9053\u6ca1\u4eba\u5728\u627e\u4ec0\u4e48\u5417\uff1f\u732a\u4e3b\u9898CI\u670d\u52a1\u3002\n\u6709\u4e00\u4e2a\u72ec\u7279\u7684\u540d\u5b57\u5f88\u6709\u8da3\uff0c\u4f46\u6211\u7684\u53e6\u4e00\u4e2a\u9879\u76eeTypo CI\u6700\u521d\u6709\u4e86\u66f4\u591a\u7684\u6709\u673a\u589e\u957f\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u6709\u4e86\u4e00\u4e2a\u66f4\u660e\u786e\u7684\u540d\u5b57\u3002\n\u6211\u771f\u7684\u5f88\u559c\u6b22\u6709\u4e00\u4e2a\u72ec\u7279\u7684\u540d\u5b57\uff0c\u4f46\u5982\u679c\u6211\u771f\u7684\u60f3\u91cd\u65b0\u53d1\u5e03\u8fd9\u4e2a\u5b9d\u77f3\uff0c\u6211\u4f1a\u628a\u5b83\u53eb\u505aRails Memory Test Profiler\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002", "note_en": "My side project ( PigCI) was a ruby gem that you&#39;d attach to your RSpec test suite, and it&#39;ll warn you via a GitHub App if you had an unexpected increase in memory usage or database requests.\n  It achieved just over 9,000 downloads &amp; had some wonderful feedback from users. I intended to monetize this library via the GitHub Marketplace, unfortunately it earned a total of $0.\n  I decided in March 2020, it was a good time to shutdown the GitHub App side of it &amp; free myself up to focus on other projects. I&#39;ve open sourced the  GitHub App (It might be helpful to anyone curious about setting up a GitHub App with Ruby on Rails), and I&#39;ve also updated the  Ruby Gem so it doesn&#39;t require a GitHub App to pass/fail pull requests.\n  I learnt a lot while attempting to monetize PigCI (It was a lot of fun!), but I also made a bunch of mistakes which I hope others might find useful to hear about.\n    I launched PigCI as a full singing and dancing SaaS from day one. This was a terrible approach, I had zero idea if people would even use the product let alone if they&#39;d pay for it. It gets worse though, because I had sunk a lot of time into building a subscription model which relied heavily on GitHub, so I was unwilling to consider alternative monetisation approaches.\n  I think it&#39;s fairly normal to want to launch a polished product &amp; only charge customers in a single way. But it&#39;s the worst way to earn money. It took me seeing the  heya gem charging via Gumroad to really realise how much I had screwed up. I had wasted a bunch of time building the parts to support a subscription model, when I should have been promoting &amp; improving the darn thing!\n  If I was to do it all again, I&#39;ll just build a little bit of the product with a small &#34;hey buy a licence&#34; request in the README. Enough to let people see it working, but with a little push to get people to validate it&#39;s a good product with their money.\n    I didn&#39;t put much effort into promoting PigCI (I was waiting until I had a verified status in the GitHub Marketplace). However, I experimented when I first launched to get a feel for what would work best for me.\n  Initially I spent $50 via AdWords, however I misconfigured my campaign so it was spent in less then 5 minutes &amp; generated zero installs (Whoops). I had targeted the keywords &#34;rails&#34;, &#34;memory&#34; &amp; &#34;usage&#34; to appear anywhere in a search query instead of as an exact phrase. So I had just sent people looking for &#34;national rail usage&#34; to a pig themed website. I retried AdWords again with  Typo CI a few months later ($50, this time with very specific targeting) &amp; it worked out about $5 per an install.\n  I also spent $50 on an Twitter Campaign. The tweet I promoted probably wasn&#39;t the best copy (It was just a &#34;Hey, I&#39;ve launched PigCI a memory tracking tool for ruby on rails&#34;), but I ended up with about 5 installs from it.\n  The most useful form of promotion I found was simply sitting down with developers, listening to their problems &amp; asking them to give my product a try. The cool thing about meeting people face to face was I was able to get some pretty useful feedback. With one customer they emailed me with what they were finding annoying, which took a few hours to fix and they stayed as a customer until I let them know I was closing it down.\n    Keeping motivated to keep building is one of the hardest aspects of building a product.\n  I made the app post a daily standup every morning via slack. Seeing that new people had joined, or lots of commits had been processed really spurred me on! It took like an hour to build &amp; I&#39;ve duplicated it on all my other side projects since.\n    I used the GitHub Marketplace as a way for users to connect their GitHub account to my SaaS App. It seemed like a great deal, GitHub would list me in their marketplace (which drove installs) while taking a 30% cut of the paid tier subscriptions.\n  The catch with GitHub, was I had to be verified before I could start charging for usage (it was 100 installs, which was very achievable via AdWords). I was  ok with having to reach a threshold of users before I could start charging, however  GitHub paused verifying applications in January. This really screwed me as the marketplace guidelines said I was not allowed to be listed on the GitHub marketplace if I offer a paid service outside of GitHub Marketplace.\n  This meant for the last 5 months I had zero chance of earning a penny if I was in their Marketplace unless I was verified (which was not possible). It really killed my motivation. I had built my product around the marketplace. When I tried to contact their support regarding the status of the pause, they took a month to reply to my email.\n  I spent the last few months hoping they&#39;d start verifying applications again, but hindsight being 20/20, the moment I was told I&#39;d have to wait to start charging via GitHub, I should have started charging via Stripe or Gumroad.\n    I used Heroku for hosting ($23 a month for two dynos, Redis &amp; a Postgres database). I really like the tools they offer out of the box, but I especially like how easy it is to automate deploys from GitHub.\n  Once I had a decent test suite, I setup  Dependabot to auto-merge patches, which were then automatically deployed once the test suite passed. This meant when I had some spare time during (e.g. a quite weekend or evening) I could focus on building a new feature or fixing a bug, instead of routine maintenance. It was great!\n  I was even able to quickly tweak some of the app by making a Pull Request from my iPhone while on a train. I have the same setup on my other apps now as it&#39;s something I wouldn&#39;t want to live without.\n    Ever wondered why lots of apps are often on a subdomains like  app.company-name.com? I copied that a little as my API &amp; Webhook endpoints were on subdomains &amp; I wish I had done the same with my main app.\n  Being able to filter my logs by subdomain made it super easy to see what was going on, plus it made it really easy for me to consider how I&#39;d scale various part of my apps up in the future if required.\n  I really wish I had put my marketing site on a different subdomain to my app. I&#39;m growing really fond of having a blazing fast middleman site for marketing and have the user facing web app running Rails somewhere else.\n    I named the project &#34;PigCI&#34;. You know what no one is searching for? Pig themed CI services.\n  Having a unique name is fun, but my other side project  Typo CI has had much more initial organic growth, which I think has been somewhat down to a more clear name.\n  I did really like having a unique name, but if I was it re-release the gem, I&#39;d just call it something like &#34;Rails Memory Test Profiler&#34;.", "posttime": "2020-05-04 23:15:34", "tags": "ruby,ruby gem,\u7ea2\u5b9d\u77f3,learnt,github", "title": "\u672a\u80fd\u5c06\u6211\u7684\u7ea2\u5b9d\u77f3\u8d27\u5e01\u5316\u7684\u6559\u8bad", "title_en": "Lessons Learnt Failing to Monetize My Ruby Gem", "transed": 1, "url": "https://mikerogers.io/2020/05/03/lessons-learnt-failing-to-monetize-my-ruby-gem.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["ruby", "gem", "\u7ea2\u5b9d\u77f3", "learnt", "github"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000605, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u65e0\u7591\u90fd\u77e5\u9053\uff0c\u5728\u8fd9\u4e9b\u4ee4\u4eba\u4e0d\u5b89\u7684\u65f6\u671f\uff0c\u8bb8\u591a\u5e74\u8f7b\u4eba\u901a\u8fc7\u5728\u6a71\u7a97\u91cc\u5c55\u793a\u5f69\u8679\u753b\u6765\u8868\u8fbe\u4ed6\u4eec\u5bf9NHS\u548c\u5176\u4ed6\u5173\u952e\u5de5\u4f5c\u4eba\u5458\u7684\u652f\u6301\u3002\u65e2\u7136\u6211\u5e94\u8be5\u662f\u4e2a\u6210\u5e74\u4eba\uff0c\u6211\u60f3\u6211\u5e94\u8be5\u8bd5\u7740\u505a\u5f97\u66f4\u597d--\u5c55\u793a\u4e00\u6761\u7535\u8111\u751f\u6210\u7684\u5f69\u8679\u3002\u81ea\u7136\uff0c\u6211\u6c42\u52a9\u4e8eClojure\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002\u6211\u7684\u57fa\u672c\u8ba1\u5212\u662f\u8fd9\u6837\u7684\uff1a\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u4ecb\u7ecd\u6211\u662f\u5982\u4f55\u6784\u5efa\u548c\u90e8\u7f72\u6211\u7684\u7b80\u5355\u9759\u6001\u7ad9\u70b9\u7684\u3002\u5982\u679c\u60a8\u613f\u610f\u8ddf\u968f\uff0c\u8bf7\u5728https://github.com/DaveWM/thank-you-nhs.\u4e0a\u514b\u9686\u6211\u7684\u56de\u8d2d\u3002\n\u591a\u4e8f\u4e86\u51fa\u8272\u7684Hiccap\u5e93\uff0c\u5728Clojure\u4e2d\u751f\u6210HTML\u975e\u5e38\u5bb9\u6613\u3002Hiccap\u5141\u8bb8\u60a8\u83b7\u53d6Clojure\u6570\u636e\u7ed3\u6784\uff0c\u5982[\uff1aspan&#34\uff1bHello\uff01&#34\uff1b]\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3aHTML\u5b57\u7b26\u4e32\u3002\u7136\u540e\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u662f\u7f16\u5199\u4e00\u4e2aClojure\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u8868\u793aSVG\u5f69\u8679\u7684HICKUP\u3002\u8fd9\u4e2aSVG\u7531\u591a\u4e2a\u7d27\u51d1\u7684\u5706\u5708\u7ec4\u6210\uff0c\u5f69\u8679\u7684\u6bcf\u79cd\u989c\u8272\u5bf9\u5e94\u4e00\u4e2a\u5706\u5708\uff0c\u5916\u52a0\u4e00\u4e2a\u906e\u7f69\u6765\u201c\u5207\u5272\u201d\u62f1\u95e8\u4e0b\u9762\u7684\u90e8\u5206\u3002Clojure\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n(\u5b9a\u4e49\u5f69\u8679(\u8ba9[COLURS[&#34\uff1b\u7ea2\u8272&#34\uff1b&#34\uff1b\u6a59\u8272&#34\uff1b&#34\uff1b\u9ec4\u8272&#34\uff1b&#34\uff1b\u7eff\u8272&#34\uff1b&#34\uff1b\u84dd\u8272&#34\uff1b&#34\uff1b\u975b\u84dd#34\uff1b&#34\uff1b\u7d2b\u8272&#34\uff1b]\uff1b(\u7ea6\u514b\u7684\u7406\u67e5\u5fb7\u5f92\u52b3\u65e0\u529f)Viewbox-Width 100\uff1b\uff1b\u5f69\u8679\u662f\u4e00\u4e2a\u534a\u5706\u5f62\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6211\u4eec\u7684SVG\u5904\u4e8e2\uff1a1\u7684\u6bd4\u4f8b\u89c6\u56fe\u3002\u8fd9\u662f\u62f1\u95e8\u7684\u9ad8\u5ea6-\u5c1d\u8bd5\u5c06\u5176\u8bbe\u7f6e\u4e3a\u4e0d\u540c\u7684\u503cArch-Height 25\uff1b\uff1b\u5355\u8272\u5e26\u7684\u5bbd\u5ea6\uff1b\uff1b\u7b49\u4e8eViewbox\u9ad8\u5ea6\u548c\u62f1\u95e8\u9ad8\u5ea6\u4e4b\u95f4\u7684\u5dee\uff0c\u9664\u4ee5\u989c\u8272\u5e26\u5bbd\u7684\u6570\u91cf(/(-Viewbox-Height Arch-Height)(\u8ba1\u6570\u989c\u8272))][\uff1asvg{\uff1aViewbox(str&#34\uff1b0&#34\uff1bViewbox-width&#34\uff1b&#34\uff1bViewbox-Height)\uff1apresveAspectRatio&#)][\uff1asvg{\uff1aViewbox(str&#34\uff1b0&#34\uff1bViewbox-width&#34\uff1b&#34\uff1bViewbox-Height)\uff1apresveAspectRatio&#\u3002}[\uff1adefs\uff1b\uff1b\u6b64\u906e\u7f69\u4e3a\u62f1\u5f62\u4e0b\u65b9\u7684\u4f4d\u5728\u5f69\u8679\u4e0a\u6316\u51fa\u4e00\u4e2a\u6d1e[\uff1aask{\uff1aid&#34\uff1barch&#34\uff1b}[\uff1arect{\uff1awidth&#34\uff1b100%&#34\uff1b\uff1aHeight&#34\uff1b100%&#34\uff1b\uff1aFill&#34\uff1bWhite&#34\uff1b}]\uff1b\u6ce8\u610f-SVG\u5750\u6807\u98a0\u5012(y=0\u5728\u9876\u90e8)\uff0c\u56e0\u6b64&#34\uff1bViewbox-Height&#34\uff1b\u4f4d\u4e8e\u5e95\u90e8[\uff1aCircle{\uff1acx Viewbox-Height\uff1aCY Viewbox-Height\uff1aR Arch-Height\uff1aFill&#34\uff1bBlack&#34\uff1b}][\uff1ag{\uff1aMASK&#34\uff1burl(#Arch)&#34\uff1b}(-&gt\uff1b&gt\uff1bColors(\u8d34\u56fe\u7d22\u5f15(FN[IDX COLOR][\uff1a\u5706\u5f62{\uff1aCX(/Viewbox-Width 2)\uff1b\u8fd9\u662f\u6c34\u5e73\u4e2d\u5fc3\uff1aCY Viewbox-Height\uff1b\uff1bStart\u3002BAND-WIDTH&#34\uff1b\uff1aR(-Viewbox-Height(*BandWidth IDX))\uff1a\u586b\u5145\u989c\u8272}])]])\u3002\n&lt\uff1bSVG presveAspectRatio=&#34\uff1bxMidYMax Slice&#34\uff1bViewbox=&#34\uff1b0 0 100 50&#34\uff1bwidth=&#34\uff1bauto&#34\uff1b&gt\uff1b&lt\uff1bdefs&gt\uff1b&lt\uff1b\u63a9\u7801id=&#34\uff1b\u62f1&#34\uff1b&gt\uff1b&lt\uff1b\u77e9\u5f62\u586b\u5145=&#34\uff1b\u767d\u8272&#34\uff1b\u9ad8\u5ea6=&#34\uff1b100%&#34\uff1b\u5bbd\u5ea6=&\u3002CY=&#34\uff1b50&#34\uff1bFill=&#34\uff1bBlack&#34\uff1br=&#34\uff1b25&#34\uff1b&gt\uff1b&lt\uff1b/Circle&gt\uff1b&lt\uff1b/MASK&gt\uff1b&lt\uff1b/defs&gt\uff1b&lt\uff1bg\u63a9\u7801=&#34\uff1burl(#ARCH)&34\uff1b&gt\uff1b&lt\uff1bCircle Cx=&#34\uff1b50&#34\uff1bCy=&#34\uff1b50&\u3002/Circle&&gt;\uff1b&lt\uff1bCircle Cx=&#34\uff1b50&#34\uff1bCy=&#34\uff1b50&#34\uff1bFill=&#34\uff1b\u6a59\u8272&#34\uff1br=&#34\uff1b46.42857&#34\uff1b&gt\uff1b&lt\uff1b/Circle&&gt;\uff1b&lt\uff1bCircle Cx=&#34\uff1b50&#34\uff1bCy=&#34\uff1b50&#34\uff1bFill=&#34\uff1b\u9ec4\u8272&#34\uff1br=&#34\uff1b42.857143&##\u300250&#34\uff1bCy=&#34\uff1b50&#34\uff1bFill=&#34\uff1b\u7eff\u8272&#34\uff1br=&#34\uff1b39.285713&34\uff1b&gt\uff1b&lt\uff1b/Circle&gt\uff1b&lt\uff1bCircle Cx=&#34\uff1b50&#34\uff1bCy=&#34\uff1b\u84dd\u8272&#34\uff1br=&#34\uff1b35.714287&#34\uff1b&gt\uff1b&lt\uff1b/Circle&gt\uff1b&lt\uff1b\u586b\u5145=&#34\uff1b\u975b\u84dd\uff1br=&#34\uff1b32.142857&34\uff1b&gt\uff1b&lt\uff1b/Circle&gt\uff1b&lt\uff1b/Circle&&gt;Cx=&#34\uff1b50&#34\uff1bCy=&#34\uff1b\u7d2b\u7f57\u5170&34\uff1br=&#34\uff1b28.571428&#34\uff1b&gt\uff1b&lt\uff1b/Circle&gt\uff1b&lt\uff1b/g&gt\uff1b&lt\uff1b/svg&\u3002\n\u592a\u68d2\u4e86\uff01\u73b0\u5728\uff0c\u6211\u4eec\u53ea\u9700\u4e3a\u5305\u542b\u5f69\u8679SVG\u7684\u6574\u4e2a\u9875\u9762\u521b\u5efa\u4e00\u4e9b\u95ee\u9898\u3002\u4ee5\u4e0b\u662f\u4ee3\u7801\u7684\u7565\u5fae\u7b80\u5316\u7248\u672c(\u5b8c\u6574\u4ee3\u7801\u5728\u6b64\u5904)\uff1a\n\u73b0\u5728\u6211\u4eec\u53ea\u9700\u5448\u73b0HTML\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff1a\n(Defn main[&amp\uff1bargs](-&gt\uff1b&gt\uff1b(h/html page)\uff1b\uff1b\u5c06\u6211\u4eec\u7684\u5361\u55dd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32(spit&#34\uff1bpublic/index.html&#34\uff1b)\uff1b\uff1b\u5c06\u5b57\u7b26\u4e32\u8f93\u51fa\u5230HTML\u6587\u4ef6)\n\u6ce8\u610f\uff1a\u5728project.clj\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u884c\u4ee3\u7801\uff1amain Thank-you-nhs.core/main\uff0c\u5b83\u544a\u8bc9lein run\u8fd0\u884c\u8fd9\u4e2a\u4e3b\u51fd\u6570\u3002\n\u8fd9\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u4e00\u5207\uff01\u5982\u679c\u60a8\u6b63\u5728\u5b66\u4e60\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2aGitHub\u3001GitLab\u6216BitBucket repo\uff0c\u5e76\u5c06\u4ee3\u7801\u63a8\u9001\u5230\u5176\u4e2d\u3002\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u51c6\u5907\u597d\u5728Netlify\u5efa\u7acb\u6211\u4eec\u7684\u7ad9\u70b9\u3002\nNetlify\u662f\u6784\u5efa\u548c\u6258\u7ba1\u9759\u6001\u7ad9\u70b9\u6216SPA\u7684\u7edd\u4f73\u5e73\u53f0\u3002\u5b83\u4f7f\u7ad9\u70b9\u7684\u542f\u52a8\u548c\u8fd0\u884c\u53d8\u5f97\u6781\u5176\u8fc5\u901f\u3002\u6211\u4eec\u5e0c\u671bnetlify\u76d1\u89c6\u60a8\u7684git\u56de\u8d2d\uff0c\u5e76\u5728\u6bcf\u6b21\u65b0\u7684\u63d0\u4ea4\u8fd0\u884c\u65f6\u6267\u884clein\u8fd0\u884c\uff0c\u7136\u540e\u5c06/public\u76ee\u5f55\u4f5c\u4e3a\u7f51\u7ad9\u6258\u7ba1\u3002\u5982\u679c\u60a8\u6b63\u5728\u8ddf\u8fdb\uff0c\u5e76\u4e14\u60a8\u60f3\u81ea\u5df1\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a\n\u5c31\u8fd9\u6837!\u3002Netlify\u5c06\u6784\u5efa\u548c\u90e8\u7f72\u8be5\u7ad9\u70b9\uff0c\u5e76\u4e3a\u60a8\u63d0\u4f9b\u8be5\u7ad9\u70b9\u7684URL\u3002\n\u201cNetlify\u662f\u600e\u4e48\u77e5\u9053\u8be5\u600e\u4e48\u505a\u7684\uff1f\u201d\u6211\u542c\u5230\u4f60\u95ee\u4e86\u3002\u795e\u5947\u4e4b\u5904\u5728\u4e8erepo\u6839\u76ee\u5f55\u4e2d\u7684netlify.toml\u6587\u4ef6\u3002\u8fd9\u4e3aNetlify\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8981\u8fd0\u884c\u7684\u547d\u4ee4\u6765\u6784\u5efa\u60a8\u7684\u7ad9\u70b9\u3002\u8be5\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a\n\u4e3a\u4e86\u5c55\u793a\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u6211\u6316\u51fa\u4e86\u4e00\u4e2a\u65e7\u7684\u6811\u8393PI\uff0c\u5e76\u628a\u5b83\u8fde\u63a5\u5230\u4e86\u76d1\u89c6\u5668\u4e0a\u3002\u7136\u540e\uff0c\u6211\u5c06PI\u7684\u6d4f\u89c8\u5668\u6307\u5411\u6211\u7684\u7ad9\u70b9\uff0c\u5e76\u4f7f\u5176\u5168\u5c4f\u663e\u793a\u3002\u7ed3\u679c\u5982\u4e0b\uff1a\n\u8fd9\u5c31\u662f\u5982\u4f55\u4f7f\u7528Clojure\u8bbe\u7f6e\u4e00\u4e2a\u7b80\u5355\u7684\u9759\u6001\u7ad9\u70b9\uff01\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\uff0c\u6216\u8005\u60f3\u6784\u5efa\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u9759\u6001\u7ad9\u70b9\uff0c\u6211\u5efa\u8bae\u60a8\u67e5\u770bStatis\u5e93\u3002Yu\u8fd8\u53ef\u4ee5\u67e5\u770b\u6211\u5728\u8fd9\u91cc\u5236\u4f5c\u7684\u53e6\u4e00\u4e2a\u9759\u6001\u7ad9\u70b9\u3002\u8c22\u8c22\u4f60\u7684\u9605\u8bfb\u3002\n\u53e6\u5916\uff0c\u5982\u679c\u4f60\u60f3\u5728\u8fd9\u4e2a\u5371\u673a\u65f6\u523b\u5e2e\u52a9NHS\u505a\u4e9b\u4ec0\u4e48\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u4e3a\u201c\u4e3a\u7167\u987e\u8005\u670d\u52a1\u201d\u6d3b\u52a8\u6350\u6b3e\u3002", "note_en": "As many of you are no doubt aware, during these troubling times many young people are showing their support for the NHS and other key workers by  displaying paintings of rainbows in their windows. Since I\u2019m supposedly a grown-up, I thought I\u2019d try to go one better - displaying a computer-generated rainbow. Naturally, I turned to Clojure to do this. My basic plan was this:\n  In this post, I\u2019ll cover how I built and deployed my simple static site. If you\u2019d like to follow along, clone my repo at  https://github.com/DaveWM/thank-you-nhs.\n  Generating HTML in Clojure is dead easy, thanks to the excellent  Hiccup library. Hiccup allows you to take a Clojure data structure, like  [:span &#34;Hello!&#34;], and turn it into an HTML string. Our task is then to write a Clojure function that returns hiccup representing an SVG rainbow. This SVG is composed of multiple concentic circle, one for each colour of the rainbow, plus a  mask to \u201ccut out\u201d the section under the arch. The Clojure code looks like this:\n (def rainbow (let [colours [&#34;red&#34; &#34;orange&#34; &#34;yellow&#34; &#34;green&#34; &#34;blue&#34; &#34;indigo&#34; &#34;violet&#34;] ;; (Richard of York gave battle in vain) viewbox-width 100 ;; the rainbow is a semicircle, so we need our SVG to be in a 2:1 ratio viewbox-height (/ viewbox-width 2) ;; this is the height of the arch - try setting it to different values arch-height 25 ;; the width of a single colour band ;; equal to the difference between viewbox height and the arch height, divided by the number of colours band-width (/ (- viewbox-height arch-height) (count colours))] [:svg {:viewBox (str &#34;0 0 &#34; viewbox-width &#34; &#34; viewbox-height) :preserveAspectRatio &#34;xMidYMax slice&#34; :width &#34;auto&#34;} [:defs ;; This mask cuts out a hole in the rainbow, for the bit underneath the arch [:mask {:id &#34;arch&#34;} [:rect {:width &#34;100%&#34; :height &#34;100%&#34; :fill &#34;white&#34;}] ;; note - SVG coordinates are upside down (y = 0 is at the top), so &#34;viewbox-height&#34; is at the bottom [:circle {:cx viewbox-height :cy viewbox-height :r arch-height :fill &#34;black&#34;}]]] [:g {:mask &#34;url(#arch)&#34;} (-&gt;&gt; colours (map-indexed (fn [idx colour] [:circle {:cx (/ viewbox-width 2) ;; this is the horizontal centre :cy viewbox-height ;; start with the largest band (red), and make each successive colour circle smaller by &#34;band-width&#34; :r (- viewbox-height (* band-width idx)) :fill colour}])))]]))\n  &lt;svg preserveAspectRatio=&#34;xMidYMax slice&#34; viewBox=&#34;0 0 100 50&#34; width=&#34;auto&#34;&gt; &lt;defs&gt; &lt;mask id=&#34;arch&#34;&gt; &lt;rect fill=&#34;white&#34; height=&#34;100%&#34; width=&#34;100%&#34;&gt;&lt;/rect&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;black&#34; r=&#34;25&#34;&gt;&lt;/circle&gt; &lt;/mask&gt; &lt;/defs&gt; &lt;g mask=&#34;url(#arch)&#34;&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;red&#34; r=&#34;50&#34;&gt;&lt;/circle&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;orange&#34; r=&#34;46.42857&#34;&gt;&lt;/circle&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;yellow&#34; r=&#34;42.857143&#34;&gt;&lt;/circle&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;green&#34; r=&#34;39.285713&#34;&gt;&lt;/circle&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;blue&#34; r=&#34;35.714287&#34;&gt;&lt;/circle&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;indigo&#34; r=&#34;32.142857&#34;&gt;&lt;/circle&gt; &lt;circle cx=&#34;50&#34; cy=&#34;50&#34; fill=&#34;violet&#34; r=&#34;28.571428&#34;&gt;&lt;/circle&gt; &lt;/g&gt;&lt;/svg&gt;\n   Great! Now we just have to create some hiccup for the entire page, which contains the rainbow SVG. Here\u2019s a slightly simplified version of the code ( full code here):\n  Now we just have to render the HTML, and spit it out to a file:\n (defn main [&amp; args] (-&gt;&gt; (h/html page) ;; convert our Hiccup to a string (spit &#34;public/index.html&#34;) ;; spit the string out to an HTML file )\n Note: in our  project.clj we have the line  :main thank-you-nhs.core/main, which tells  lein run to run this  main function.\n That\u2019s all we need! If you\u2019re following along, create a GitHub, GitLab or BitBucket repo, and push the code to it. We\u2019re now ready to get our site set up in Netlify.\n  Netlify is an absolutely fantastic platform for building and hosting static sites or SPAs. It makes it extremely quick to get a site up and running. We want Netlify to watch your git repo, and on every new commit run  lein run then host the  /public directory as a website. If you\u2019re following along and you\u2019d like to give this a go yourself, follow these steps:\n That\u2019s all! Netlify will build and deploy the site and give you a URL for it\n \u201cHow did Netlify know what to do?\u201d I hear you ask. The magic lies in the  netlify.toml file in the root of the repo. This gives Netlify a command to run to build your site. The file looks something like this:\n    To display the site, I dug out an old Raspberry Pi, and hooked it up to a monitor. I then pointed the Pi\u2019s browser at my site and made it full screen. Here\u2019s the result:\n  So that\u2019s how to set up a simple static site using Clojure! If you\u2019d like to learn more, or build a more advanced static site, I\u2019d recommend checking out the  Statis library. Yu can also check out another static site I made  here. Thanks for reading.\n P.S. If you\u2019d like to do something to help the NHS in this time of crisis, you can donate to the \u201cClap for Carers\u201d campaign  here.", "posttime": "2020-05-04 23:15:26", "tags": "clojure,nhs,\u5f69\u8679,site", "title": "\u4f7f\u7528Clojure\u5411NHS\u8868\u793a\u611f\u8c22", "title_en": "Saying Thank You to the NHS, Using Clojure", "transed": 1, "url": "https://clojure-conundrums.co.uk/posts/saying-thank-you-to-the-nhs/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["clojure", "nhs", "\u5f69\u8679", "site"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000604, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8482\u59c6\u00b7\u5e03\u96f7(Tim Bray)\u8bf4\uff0c\u8be5\u516c\u53f8\u5df2\u7ecf\u53d8\u5f97\u201c\u6709\u6bd2\u201d\uff0c\u89e3\u96c7\u662f\u4e3a\u4e86\u201c\u5236\u9020\u4e00\u79cd\u6050\u60e7\u7684\u6c14\u6c1b\u201d\u3002", "note_en": "Tim Bray says the company has become 'toxic' and the firings are 'designed to create a climate of fear.'", "posttime": "2020-05-04 23:15:22", "tags": "amazon,\u4e9a\u9a6c\u900a,\u8f9e\u804c,vp,\u6709\u6bd2", "title": "\u4e9a\u9a6c\u900a\u526f\u603b\u88c1\u8f9e\u804c\uff0c\u79f0\u516c\u53f8\u89e3\u96c7\u6297\u8bae\u5de5\u4eba\u662f\u201c\u80c6\u5c0f\u9b3c\u201d", "title_en": "Amazon VP Resigns, Calls Company \u2018Chickenshit\u2019 for Firing Protesting Workers", "transed": 1, "url": "https://www.vice.com/en_us/article/z3bjpj/amazon-vp-tim-bray-resigns-calls-company-chickenshit-for-firing-protesting-workers", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["amazon", "\u4e9a\u9a6c\u900a", "\u8f9e\u804c", "vp", "\u6709\u6bd2"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000603, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CS538\u8bfe\u7a0b\u7f51\u9875\uff1a\u7f16\u7a0b\u8bed\u8a00\u7406\u8bba\u4e0e\u8bbe\u8ba1(2020\u5e74\u6625\u5b63)", "note_en": "Course webpage for CS 538: Theory and Design of Programming Languages (Spring 2020)", "posttime": "2020-05-04 23:15:14", "tags": "2020,\u7f16\u7a0b,\u8bbe\u8ba1,programming language,\u7f16\u7a0b\u8bed\u8a00", "title": "CS538\uff1a\u7f16\u7a0b\u8bed\u8a00\u7406\u8bba\u4e0e\u8bbe\u8ba1(2020\u5e74\u6625\u5b63)", "title_en": "CS 538: Theory and Design of Programming Languages (Spring 2020)", "transed": 1, "url": "https://pages.cs.wisc.edu/~justhsu/teaching/current/cs538/calendar/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["2020", "\u7f16\u7a0b", "\u8bbe\u8ba1", "language", "\u7f16\u7a0b\u8bed\u8a00"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000602, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u63a2\u7d22Rust\u4e2d\u7684\u4e00\u4e9b\u57fa\u672c\u5e76\u53d1\u5de5\u4f5c\u6d41\u7684\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7684\u540e\u7eed\u6587\u7ae0\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u63a2\u7d22\u4e00\u79cd\u7a0d\u5fae\u66f4\u9ad8\u7ea7\u7684\u6a21\u5f0f\uff1a\u5de5\u4f5c\u4ece\u4e00\u4e2a\u9636\u6bb5\u6d41\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\u7684\u5e76\u53d1\u7ba1\u9053\uff0c\u4ee5\u53ca\u5728\u8be5\u4e0a\u4e0b\u6587\u4e2d\u53d1\u51fa\u80cc\u538b\u4fe1\u53f7\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u8fd8\u5c06\u67e5\u770b\u6d41\u6570\u636e\u7684\u201c\u63a8\u201d\u548c\u201c\u62c9\u201d\u6e90\u4e4b\u95f4\u7684\u533a\u522b\u3002\n\u8ba9\u6211\u4eec\u4ece\u521d\u59cb\u4ee3\u7801\u5f00\u59cb\uff0c\u4e0e\u524d\u4e00\u7bc7\u6587\u7ae0\u4e0d\u540c\u7684\u662f\uff0c\u8be5\u4ee3\u7801\u793a\u4f8b\u975e\u5e38\u5e9e\u5927\u548c\u590d\u6742\uff0c\u51fa\u4e4e\u610f\u6599\uff1a\n\u6211\u4eec\u6709\u4e09\u4e2a\u4e0d\u540c\u7684\u201c\u7ec4\u4ef6\u201d\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u4ee3\u8868\u7ba1\u9053\u4e2d\u7684\u4e00\u4e2a\u9636\u6bb5\uff1a\n\u201c\u6e90\u201d\uff0c\u4e5f\u5c31\u662f\u6570\u636e\u7684\u751f\u4ea7\u8005\uff0c\u5b83\u5c06\u6570\u636e\u53d1\u9001\u5230\u3002\n\u201cProcessor\u201d\u7ec4\u4ef6\uff0c\u8be5\u7ec4\u4ef6\u4f7f\u7528\u5de5\u4f5c\u5668\u6c60\u5904\u7406\u6570\u636e\uff0c\u5176\u7ed3\u679c\u88ab\u53d1\u9001\u5230\u3002\n\u540c\u6837\uff0c\u201c\u5de5\u4f5c\u201d\u4ec0\u4e48\u4e5f\u4e0d\u5305\u542b\uff1a\u5b83\u53ea\u662f\u4e00\u4e2a\u5728\u5404\u4e2a\u9636\u6bb5\u4f20\u9012\u7684\u6570\u5b57\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u662f\u5e76\u53d1\u5de5\u4f5c\u6d41\u7684\u7ed3\u6784\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u7684\u5de5\u4f5c\u3002\n\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u8fd0\u884c\u4e00\u4e2a\u201c\u4e8b\u4ef6\u5faa\u73af\u201d\uff0c\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bb2\uff0c\u7ec4\u4ef6\u662f\u901a\u8fc7\u5728\u5faa\u73af\u4e2d\u63a5\u6536\u548c\u5904\u7406\u6d88\u606f\u6765\u9a71\u52a8\u7684\u3002\n\u6bcf\u4e2a\u4e8b\u4ef6\u5faa\u73af\u90fd\u7565\u6709\u4e0d\u540c\uff0c\u5e76\u4e14\u76f8\u5bf9\u590d\u6742\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u9010\u4e00\u4ecb\u7ecd\u5b83\u4eec\u3002\n\u201c\u6e90\u201d\u7ec4\u4ef6\u201c\u4e00\u6b21\u8fd0\u884c\u4e00\u4e2a\u523b\u5ea6\u201d\uff0c\u4f7f\u7528\u6765\u81ea\u6a2a\u6881\u7684\u51fa\u8272\u523b\u5ea6\u3002\u7136\u540e\uff0c\u5b83\u7b80\u5355\u5730\u9012\u589e\u4e00\u4e2a\u6570\u5b57\u5e76\u5c06\u5176\u53d1\u9001\u5230\u4e0b\u6e38\u8fdb\u884c\u5904\u7406\u3002\u4e00\u65e6\u8be5\u53f7\u7801\u4e0a\u7684\u6ea2\u51fa\u88ab\u547d\u4e2d\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u5c31\u4f1a\u505c\u6b62\uff0c\u6b64\u65f6\u4f1a\u5411\u4e0b\u6e38\u53d1\u9001\u53e6\u4e00\u6761\u6d88\u606f\uff0c\u901a\u77e5\u751f\u4ea7\u5df2\u7ecf\u505c\u6b62\u3002\n\u5b83\u8fd8\u5bf9\u4e24\u4e2a\u6807\u5fd7\u8fdb\u884c\u64cd\u4f5c\uff1a\u4e00\u4e2a\u662f\u9000\u51fa\uff0c\u7528\u4e8e\u8bb0\u5f55\u201c\u6e90\u201d\u4f55\u65f6\u6c38\u4e45\u505c\u6b62\u751f\u4ea7\uff1b\u53e6\u4e00\u4e2a\u662fONDING_WORK\uff0c\u7528\u4e8e\u8ddf\u8e2a\u6c60\u4e2d\u6b63\u5728\u6267\u884c\u7684\u5de5\u4f5c\u5355\u5143\u6570\u3002\n\u5411\u5904\u7406\u5668\u7684\u201c\u4e3b\u201d\u4e8b\u4ef6\u5faa\u73af\u53d1\u56de\u4e00\u6761\u6d88\u606f\uff0c\u8ba9\u5b83\u77e5\u9053\u5df2\u7ecf\u6267\u884c\u4e86\u4e00\u4e2a\u5de5\u4f5c\u5355\u5143\u3002\n\u5728\u6d4b\u8bd5\u7684\u201c\u4e3b\u7ebf\u7a0b\u201d\u4e0a\u8fd0\u884c\u7684\u4f7f\u7528\u8005\u4e8b\u4ef6\u5faa\u73af\u7b80\u5355\u5730\u8ba1\u7b97\u63a5\u6536\u5230\u7684\u5de5\u4f5c\u5355\u5143\uff0c\u4e00\u65e6\u4ece\u5904\u7406\u5668\u63a5\u6536\u5230\u201c\u505c\u6b62\u201d\u4fe1\u53f7\u5c31\u9000\u51fa\u3002\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u4e00\u65e6\u53d1\u751f\u6ea2\u51fa\uff0c\u4fe1\u53f7\u6e90\u5c31\u4f1a\u505c\u6b62\u751f\u4ea7\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u65ad\u8a00U8\u7684\u5de5\u4f5c\u5355\u4f4d\u52a0\u8d77\u6765\u8fbe\u5230\u4e86\u6700\u5927\u503c\u3002\n\u6ca1\u6709\u80cc\u538b\u7684\u6982\u5ff5\uff0c\u201c\u6e90\u201d\u53ea\u4f1a\u5728\u6bcf\u4e2a\u6ef4\u7b54\u673a\u4e0a\u4fdd\u6301\u751f\u4ea7\uff0c\u7136\u540e\u5c06\u4f5c\u54c1\u9001\u5230\u4e0b\u6e38\u7684\u4e00\u4e2a\u65e0\u754c\u901a\u9053\u4e0a\u8fdb\u884c\u5904\u7406\u3002\n\u201c\u6e90\u201d\u5145\u5f53\u201c\u5904\u7406\u5668\u201d\u5de5\u4f5c\u7684\u201c\u63a8\u9001\u6e90\u201d\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u4fdd\u6301\u5c3d\u53ef\u80fd\u5feb\u5730\u5c06\u5de5\u4f5c\u63a8\u5411\u4e0b\u6e38\u3002\n\u201c\u5904\u7406\u673a\u201d\u4e5f\u5145\u5f53\u201c\u6d88\u8d39\u8005\u201d\u7684\u201c\u63a8\u6e90\u201d\uff0c\u7b80\u5355\u5730\u628a\u5904\u7406\u7684\u7ed3\u679c\u4ee5\u6700\u5feb\u7684\u901f\u5ea6\u9001\u53bb\u6d88\u8d39\uff0c\u4e5f\u6ca1\u6709\u80cc\u538b\u3002\n\u5c3d\u7ba1\u6ca1\u6709\u80cc\u538b\uff0c\u201c\u6e90\u201d\u548c\u201c\u5904\u7406\u5668\u201d\u4e4b\u95f4\u7684\u65e0\u754c\u901a\u9053\u7684\u5927\u5c0f\u5e76\u6ca1\u6709\u589e\u957f\u5f88\u591a\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\n\u7b54\u6848\u662f\uff0c\u5de5\u4f5c\u53cd\u800c\u5806\u79ef\u5728\u7ebf\u7a0b\u6c60\u7684\u5185\u90e8\u5de5\u4f5c\u7a83\u53d6\u961f\u5217\u4e0a\u3002\n\u540c\u6837\u503c\u5f97\u4e00\u63d0\u7684\u662f\u6574\u4f53\u7ec4\u4ef6\u9a71\u52a8\u7684\u8bbe\u8ba1\uff1a\u867d\u7136\u901a\u8fc7\u5c06\u7ebf\u7a0b\u6c60\u79fb\u5165\u201c\u6e90\u201d\u7ec4\u4ef6\u6765\u201c\u7b80\u5316\u4e8b\u60c5\u201d\uff0c\u5e76\u5728\u4ea7\u751f\u5de5\u4f5c\u65f6\u7b80\u5355\u5730\u6d3e\u751f\u5de5\u4f5c\u662f\u5f88\u6709\u8bf1\u60d1\u529b\u7684\uff0c\u4f46\u662f\u901a\u8fc7\u5c06\u201c\u6e90\u201d\u3001\u201c\u5904\u7406\u5668\u201d\u548c\u201c\u4f7f\u7528\u8005\u201d\u7ec4\u4ef6\u6e05\u695a\u5730\u5206\u5f00\uff0c\u6211\u4eec\u5728\u4e1a\u52a1\u903b\u8f91\u7684\u5c01\u88c5\u65b9\u9762\u83b7\u5f97\u4e86\u4e00\u4e9b\u597d\u5904\u3002\n\u201c\u6e90\u201d\u53ea\u662f\u5728\u901a\u9053\u4e0a\u53d1\u9001\u5de5\u4f5c\uff0c\u5e76\u4e0d\u77e5\u9053\u201c\u5904\u7406\u5668\u201d\u5728\u5185\u90e8\u4f7f\u7528\u7684\u7ebf\u7a0b\u6c60\u3002\u6b64\u5916\uff0c\u5904\u7406\u5668\u7684\u201c\u4e3b\u4e8b\u4ef6\u5faa\u73af\u201d\u5bf9\u4e8e\u5b83\u62e5\u6709\u7684EXISTING\u548cONDING_WORK\u72b6\u6001\uff0c\u5145\u5f53\u4e00\u4e2a\u88ab\u6e05\u695a\u5c01\u88c5\u7684\u7ebf\u6027\u72b6\u6001\u673a\u3002\n\u901a\u8fc7\u5c06\u7ebf\u7a0b\u6c60\u4e0a\u6267\u884c\u7684\u5de5\u4f5c\u5d4c\u5957\u5230\u201c\u5904\u7406\u5668\u201d\u7ec4\u4ef6\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6e05\u6670\u7684\u7ed3\u6784\u5c42\u6b21\u7ed3\u6784\u3002\n\u5f53\u60a8\u5728Rust\u4e2d\u8bfb\u5230\u4f7f\u7528\u901a\u9053\u7684\u80cc\u538b\u65f6\uff0c\u60a8\u901a\u5e38\u4f1a\u9047\u5230\u4e00\u4e9b\u5173\u4e8e\u9700\u8981\u4f7f\u7528\u201c\u6709\u754c\u901a\u9053\u201d\u7684\u5185\u5bb9\uff0c\u6216\u8005\u4e00\u4e9b\u5173\u4e8e\u67d0\u79cd\u98ce\u683c\u7684\u5f02\u6b65\u6d41\u5e26\u6709\u5bf9\u80cc\u538b\u7684\u201c\u5185\u7f6e\u201d\u652f\u6301\u7684\u5185\u5bb9\u3002\n\u6211\u60f3\u63d0\u51fa\u4e00\u4e2a\u4e0d\u540c\u7684\u89d2\u5ea6\uff0c\u901a\u8fc7\u601d\u8003\u4e00\u6761\u7528\u4e8e\u81ea\u52a8\u9a7e\u9a76\u8f66\u8f86\u7684\u9ad8\u901f\u516c\u8def\u7684\u7b80\u5316\u8bbe\u8ba1\u3002\n\u56e0\u6b64\uff0c\u5728\u8fd9\u6837\u7684\u9ad8\u901f\u516c\u8def\u4e0a\uff0c\u4f60\u5e0c\u671b\u8f66\u8f86\u4ee5\u6700\u5feb\u7684\u901f\u5ea6\u884c\u9a76\uff0c\u4f46\u4f60\u4e5f\u5e0c\u671b\u5728\u51fa\u73b0\u62e5\u5835\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba9\u5b83\u4eec\u51cf\u901f\uff0c\u5e76\u5f7b\u5e95\u505c\u8f66(\u5982\u679c\u4f60\u8ba4\u4e3a\u8fd9\u6837\u7684\u9ad8\u901f\u516c\u8def\u4e0d\u4f1a\u51fa\u73b0\u62e5\u5835\uff0c\u90a3\u5c31\u518d\u60f3\u4e00\u60f3)\u3002\n\u5728\u6211\u770b\u6765\uff0c\u4f7f\u7528\u6709\u9650\u5236\u7684\u901a\u9053(\u6216\u5e26\u6709\u201c\u5185\u7f6e\u201d\u80cc\u538b\u652f\u6301\u7684\u6eaa\u6d41)\u6765\u53d1\u51fa\u80cc\u538b\u4fe1\u53f7\uff0c\u6709\u70b9\u50cf\u662f\u8ba9\u8fd9\u4e9b\u6c7d\u8f66\u5c3d\u53ef\u80fd\u5feb\u5730\u884c\u9a76\uff0c\u7136\u540e\u5728\u5b83\u4eec\u5373\u5c06\u649e\u5230\u524d\u9762\u7684\u6c7d\u8f66\u65f6\u5168\u901f\u5239\u8f66\u3002\n\u4f60\u4f1a\u5bf9\u8fd9\u6837\u4e00\u6761\u9ad8\u901f\u516c\u8def\u611f\u5230\u6ee1\u610f\u5417\uff1f\u5728\u90a3\u91cc\uff0c\u201c\u80cc\u538b\u4fe1\u53f7\u201d\u901a\u8fc7\u523a\u8033\u7684\u5239\u8f66\u548c\u53ef\u80fd\u4e0d\u6b62\u51e0\u4e2a\u649e\u574f\u7684\u4fdd\u9669\u6760\u9006\u6d41\u800c\u4e0a\u3002\n\u76f8\u53cd\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u7684\u662f\uff0c\u6c7d\u8f66(\u4e0d\u80fd\u6539\u9053)\u5728\u4efb\u4f55\u62e5\u5835\u53d1\u751f\u4e4b\u524d\u5c31\u5f00\u59cb\u51cf\u901f\uff0c\u7136\u540e\u9010\u6e10\u8fdb\u4e00\u6b65\u51cf\u901f\uff0c\u5982\u679c\u62e5\u5835\u5728\u5230\u8fbe\u65f6\u8fd8\u6ca1\u6709\u6d88\u5931\uff0c\u5c31\u4f1a\u4e00\u76f4\u51cf\u901f\uff0c\u76f4\u5230\u5b8c\u5168\u505c\u6b62\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u9700\u8981\u4e00\u70b9\u7f13\u51b2\u533a\uff0c\u5e76\u4e14\u5e0c\u671b\u6839\u636e\u4e00\u4e9b\u4e13\u95e8\u7f16\u5199\u7684\u4e1a\u52a1\u903b\u8f91\u5728\u7f13\u51b2\u533a\u8fbe\u5230\u9650\u5236\u4e4b\u524d\u5f00\u59cb\u53d1\u9001\u4fe1\u53f7\u3002\n\u56e0\u6b64\uff0c\u6211\u7684\u89c2\u70b9\u662f\u5c06\u91cd\u70b9\u653e\u5728\u4e1a\u52a1\u903b\u8f91\u4e0a\uff0c\u5c06\u5176\u4f5c\u4e3a\u9650\u5236\u5de5\u4f5c\u7ba1\u9053\u7684\u4e00\u79cd\u624b\u6bb5\uff0c\u800c\u5ffd\u7565\u9650\u5236\u901a\u9053\uff0c\u56e0\u4e3a\u5b83\u4eec\u5c06\u5e26\u6765\u7684\u4e3b\u8981\u662f\u6b7b\u9501\u3002\n\u54c7\uff0c\u8fd9\u8fdc\u8fdc\u8d85\u51fa\u4e86\u201c\u7b80\u5355\u7684\u4f8b\u5b50\u201d\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4e00\u6b65\u4e00\u6b65\u5730\u5b8c\u6210\u5b83\u3002\n\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u4ece\u201c\u6e90\u201d\u7ec4\u4ef6\u5f00\u59cb\uff0c\u8be5\u7ec4\u4ef6\u73b0\u5728\u8fd8\u751f\u6210\u4e86\u4e00\u4e2aSELECT(\u5305\u62ec\u6211\u4eec\u4e4b\u524d\u770b\u5230\u7684\u6eda\u52a8\u6761)\u548c\u4e00\u4e2a\u5141\u8bb8\u5b83\u4ece\u201c\u5904\u7406\u5668\u201d\u63a5\u6536\u6d88\u606f\u7684\u65b0\u901a\u9053\u3002\n\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4ef6\u597d\u4e8b\uff1a\u80a1\u7968\u4ee3\u7801\u53ef\u4ee5\u7b80\u5355\u5730\u662f\u53ef\u53d8\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728SELECT\u4e2d\u5bf9\u5176\u8fdb\u884c\u53d8\u5f02\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u505a\u7684\u662f\u6539\u53d8\u80a1\u7968\u4ee3\u7801\uff0c\u4ee5\u54cd\u5e94\u90a3\u4e9bRegulateSourceMsg\u6d88\u606f\uff0c\u8fd9\u4e9b\u6d88\u606f\u4ee5\u201c\u51cf\u901f\u201d\u3001\u201c\u52a0\u901f\u201d\u548c\u201c\u505c\u6b62\u201d\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\n\u5f53\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u51cf\u901f\u4fe1\u606f\u65f6\uff0c\u6211\u4eec\u4f1a\u52a0\u500d\u62a5\u4ef7\u5668\uff0c\u4ece\u800c\u964d\u4f4e\u6211\u4eec\u201c\u751f\u4ea7\u5de5\u4f5c\u201d\u7684\u901f\u5ea6\u3002\n\u5f53\u6211\u4eec\u6536\u5230\u52a0\u901f\u6d88\u606f\u65f6\uff0c\u6211\u4eec\u4f1a\u5c06\u62a5\u4ef7\u5668\u51cf\u534a\uff0c\u4ece\u800c\u63d0\u9ad8\u6211\u4eec\u751f\u4ea7\u5de5\u4f5c\u7684\u901f\u5ea6\uff0c\n\u6700\u540e\uff0c\u5f53\u6211\u4eec\u88ab\u544a\u77e5\u505c\u6b62\u65f6\uff0c\u6211\u4eec\u7528Never\u901a\u9053\u66ff\u6362\u80a1\u7968\u4ee3\u7801\uff0c\u540c\u6837\u662f\u4ece\u4f18\u79c0\u7684\u6a2a\u6881\u677f\u6761\u7bb1\u4e2d\u3002\u800c\u8be5\u901a\u9053\u6b63\u5982\u5176\u540d\u79f0\u6240\u6697\u793a\u7684\u90a3\u6837\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5524\u9192\u963b\u585e\u5728\u5176\u4e0a\u7684\u7ebf\u7a0b\u3002\u56e0\u4e3a\u5b83\u53ea\u662fSELECT\u4e2d\u4e24\u4e2a\u901a\u9053\u4e2d\u7684\u4e00\u4e2a\uff0c\u6240\u4ee5\u5b83\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u6211\u4eec\u5728\u6536\u5230\u53e6\u4e00\u4e2aRegulateSourceMsg\u6d88\u606f\u4e4b\u524d\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u4e1c\u897f\u3002\u5f88\u9177\uff0c\u5bf9\u5427\uff1f\n\u9996\u5148\uff0c\u5b83\u73b0\u5728\u8fd8\u62e5\u6709\u4e00\u4e2a\u201c\u7f13\u51b2\u533a\u201d\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2aVecDeque\u3002\u7136\u540e\uff0c\u5f53\u5b83\u63a5\u6536\u5de5\u4f5c\u65f6\uff0c\u5982\u679c\u6c60\u4e2d\u7684\u4e24\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u5df2\u7ecf\u5f88\u5fd9\uff0c\u5b83\u5c06\u7f13\u51b2\u5de5\u4f5c\u3002\u5f53\u5b83\u63a5\u6536\u5230\u6765\u81ea\u5de5\u4f5c\u8fdb\u7a0b\u7684\u201cWork Done\u201d\u6d88\u606f\u65f6\uff0c\u5b83\u8fd8\u5c06\u68c0\u67e5\u7f13\u51b2\u533a\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u60c5\u51b5\uff0c\u7acb\u5373\u5c06\u5176\u53d1\u9001\u5230\u6c60\u4e2d\u8fdb\u884c\u5904\u7406\u3002\n\u6b64\u5916\uff0c\u5728\u6267\u884c\u5b8c\u8fd9\u4e9b\u64cd\u4f5c\u540e\uff0c\u5b83\u5c06\u201c\u68c0\u67e5\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u201d\uff0c\u5e76\u76f8\u5e94\u5730\u5bf9\u6e90\u8fdb\u884c\u8c03\u5236\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\u56e0\u6b64\uff0c\u8fd9\u57fa\u672c\u4e0a\u662f\u6211\u4eec\u521a\u624d\u770b\u5230\u7684\u6e90\u4ee3\u7801\u4e2d\u6d88\u606f\u5904\u7406\u90e8\u5206\u7684\u53e6\u4e00\u9762\u3002\n\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684SourceMsg\uff1a\uff1aTickAdjusted\u6d88\u606f\uff0c\u6e90\u5728\u5904\u7406RegulateSourceMsg\u6d88\u606f\u65f6\u53d1\u9001\u8be5\u6d88\u606f\u3002\u8fd9\u4f7f\u6211\u4eec\u53ef\u4ee5\u4e0d\u5411\u6e90\u53d1\u9001\u5927\u91cf\u8fd9\u6837\u7684\u6d88\u606f\u3002\u5b9e\u8d28\u4e0a\uff0c\u5904\u7406\u5668\u5c06\u53d1\u9001\u4e00\u6761\u8fd9\u6837\u7684\u6d88\u606f\uff0c\u7136\u540e\u4ec5\u5728\u4ece\u6e90\u63a5\u6536\u5230\u6700\u540e\u4e00\u6761\u6d88\u606f\u5df2\u88ab\u5904\u7406\u7684\u786e\u8ba4\u4e4b\u540e\u624d\u53d1\u9001\u53e6\u4e00\u6761\u6d88\u606f\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6b64\u786e\u8ba4\u662f\u5f02\u6b65\u7684\uff1a\u5904\u7406\u5668\u4e0d\u4f1a\u963b\u585e\u5b83\uff0c\u800c\u53ea\u662f\u7ee7\u7eed\u8fd0\u884c\uff0c\u5e76\u5728\u6536\u5230SourceMsg\uff1a\uff1aTickAdjusted\u6d88\u606f\u65f6\u5c06\u5176\u5185\u90e8TICK_ADJUSTED\u6807\u5fd7\u8bbe\u7f6e\u4e3aTRUE\u3002\u540c\u65f6\uff0c\u5b83\u4e0d\u4f1a\u53d1\u9001\u5176\u4ed6RegulateSourceMsg\u6d88\u606f\u3002\n\u5f88\u597d\uff0c\u5728\u5f15\u8a00\u4e2d\u6211\u5199\u9053\uff1a\u201c\u6211\u4eec\u8fd8\u5c06\u770b\u770b\u201d\u63a8\u9001\u201c\u548c\u201d\u62c9\u53d6\u201c\u6d41\u6570\u636e\u6765\u6e90\u4e4b\u95f4\u7684\u533a\u522b\u201d\uff0c\u4f46\u4f60\u77e5\u9053\u5417\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5bf9\u4eca\u5929\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\n\u6211\u4eec\u53ea\u9700\u6ce8\u610f\uff0c\u8fd9\u7edd\u5bf9\u662f\u4e00\u79cd\u201c\u63a8\u9001\u6e90\u201d\u7c7b\u578b\u7684\u5de5\u4f5c\u6d41\u3002\n\u540c\u6837\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\u7684\u662f\u4e00\u4e2a\u6709\u9650\u7684\u5de5\u4f5c\u7ba1\u9053(\u53ef\u80fd\u6709\u4e00\u4e9b\u4e2d\u65ad\u7684\u6ea2\u51fa\u4ee3\u7801)\uff0c\u5e76\u4e14\u770b\u4e0d\u5230\u4e00\u4e2a\u6709\u9650\u7684\u901a\u9053\u3002\n\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u5de8\u5927\u7684\u597d\u5904\uff1a\u60a8\u53ef\u4ee5\u5fd8\u8bb0\u6d88\u606f\u4f20\u9012\u5f15\u8d77\u7684\u4efb\u4f55\u6b7b\u9501\u98ce\u9669\u3002", "note_en": "As a follow-up on  a previous article that explored some basic concurrent workflows in Rust, let\u2019s now explore a slightly more advanced pattern: a concurrent pipeline where work is streamed from one stage to the next, and a way to signal back-pressure in that context. We\u2019ll also look at the difference between \u201cpush\u201d and \u201cpull\u201d sources of streaming data.\n   Let\u2019s start with the initial code, unlike the previous article, the code example is pretty big and complicated, right out of the gate:\n   We have three different \u201ccomponents\u201d, each representing a stage in the pipeline:\n A \u201csource\u201d, aka the producer of data, which it sends on to the\n \u201cprocessor\u201d component, which processes the data using a pool of workers, whose result is send to the\n Once again, the \u201cwork\u201d consists of nothing: it\u2019s just a number being passed around the various stages, and what we care about is the structure of the concurrent workflow, not the actual work.\n Each component runs an \u201c event-loop\u201d, in the sense that the component is driven by receiving and handling messages, in a loop.\n Each event-loop is slightly different, and relatively complicated, so let\u2019s go through them one by one.\n   The \u201csource\u201d component runs \u201cone tick at a time\u201d, using the excellent  tick from  crossbeam. It then simply increments a number and sends it downstream for processing. This stops once an overflow on the number is hit, at which point another message is sent downstream signalling that producing has stopped.\n      It also operates on two flags: one  exiting, used to note when the \u201csource\u201d has stopped producing for good, and a  ongoing_work, used to track how many units of work are being performed on the pool.\n  send a message back to the \u201cmain\u201d event-loop of the processor, to let it know a unit of work has been performed.\n  The consumer event-loop, running on the \u201cmain-thread\u201d of the test, simply counts the units of work that are received, and quits once the \u201cstopped\u201d signal is received from the processor. Since we know the source will stop producing once an overflow is hit, we can assert that the units of work add-up to the maximum for the u8.\n   There is no concept of back-pressure, the \u201csource\u201d will simply keep producing at each tick, and send the work on an unbounded channel downstream for processing.\n The \u201csource\u201d acts as a \u201cpush-source\u201d of work for the \u201cprocessor\u201d, since it simply keeps pushing work downstream as fast as it can.\n The \u201cprocessor\u201d also acts as a \u201cpush-source\u201d to the \u201cconsumer\u201d, simply sending the result of processing for consumption as fast as it can, and there is no back-pressure there either.\n Despite all this lack of back-pressure, the size of the unbounded channel between the \u201csource\u201d and the \u201cprocessor\u201d doesn&#39;t grow much. Why is that?\n The answer is that the work instead piles-up on the internal work-stealing queue of the thread-pool.\n Also worth highlighting is the overall component-driven design: while it could be tempting to \u201csimplify things\u201d by moving the thread-pool into the \u201csource\u201d component, and simply spawn work as it is produced, we get some benefit in terms of encapsulation of business logic by having clearly separated \u201csource\u201d, \u201cprocessor\u201d and \u201cconsumer\u201d components.\n The \u201csource\u201d simply sends work on a channel, and isn\u2019t aware of the thread-pool used internally by the \u201cprocessor\u201d. Also the \u201cmain event-loop\u201d of the processor acts as a clearly encapsulated linear state machine with regards to the  exiting and  ongoing_work state it owns.\n By nesting the work performed on the thread-pool to the event-loop of the \u201cprocessor\u201d component, we get a clear structural hierarchy.\n   When you read about back-pressure using channels in Rust, you usually encounter something about the need to use \u201cbounded channels\u201d, or something about the fact that a certain flavor of async streams comes with \u201cbuilt-in\u201d support for back-pressure.\n I\u2019d like to present a different angle, by thinking about a simplified design for a highway for autonomously driven vehicles.\n So, on such a highway, you want the vehicles to drive as fast as they can, yet you also want to have them slow down, and outright stop, in the case of congestion(and if you think there would be no congestion on such a highway,  think again).\n And using a bounded channel(or a stream with \u201cbuilt-in\u201d support for back-pressure)to signal back-pressure, to me, is a bit like having those cars driving as fast as they can, and then hit the brake full-on once they\u2019re about to hit the car in front of them.\n Would you be satisfied with a highway where the \u201cback-pressure signal\u201d travels upstream by way of screeching brakes and probably more than a few crashed bumpers?\n  What you would probably want instead, is for cars(who cannot be re-routed) to start slowing-down way ahead of any congestion, and then gradually slow down further, all the way to a grinding halt if the congestion hasn\u2019t dissipated by the time they reach it.\n In other words, you want a bit of a buffer, and you want to start signalling in advance of the buffer hitting a limit, according to some purpose-written business logic.\n So, my take is to focus on that, the business logic, as a means to bound the work pipeline, and to forget about bounded channels, because what they will bring is mainly deadlocks.\n     Wow, that\u2019s way beyond the \u201csimple example\u201d, but we can get through it step by step.\n So, let\u2019s start with the \u201csource\u201d component, who has now also grown a select, which includes the ticker we saw earlier, and a new channel allowing it to receive messages from the \u201cprocessor\u201d.\n   So here\u2019s the nice thing: the ticker can simply be mutable, and we can mutate it from within the select. What we\u2019re doing here is mutating the ticker in response to those  RegulateSourceMsg message, which come in the \u201cslowdown\u201d, \u201cspeed-up\u201d and \u201cstop\u201d variant.\n  When we get a  SlowDown message, we double the ticker, thereby reducing the rate at which we \u201cproduce work\u201d.\n When we get a  SpeedUp message, we halve the ticker, increasing the rate at which we produce work,\n And finally, when we\u2019re told to  Stop , we replace the ticker with a  never channel, again from the excellent  crossbeam crate. And that channel does exactly as its name implies, it will never wake-up the thread blocking on it. Since it\u2019s only one of two channels in the select, it effectively means that we won\u2019t be producing anything, until receiving another  RegulateSourceMsg message. Pretty cool, right?\n   Well first of all, it now also owns a \u201cbuffer\u201d, essentially a  VecDeque. Then, when it receives work, if the two workers on the pool are already busy, it will buffer the work. When it receives a \u201cwork done\u201d message from a worker, it will then also inspect the buffer, and if there is anything, immediately send it on the pool for processing.\n Furthermore, after performing those operations, it will \u201ccheck the size of the buffer\u201d, and modulate the source accordingly, as can be seen in the below:\n  So this is essentially the other side of the message handling part of the source we just looked at.\n  We\u2019ve added a new  SourceMsg::TickAdjusted message, which the source sends when it has processed a  RegulateSourceMsg message. This enables us to not send a huge amount of these messages to the source. Essentially, the processor will send one such message, and then only send another one after having received confirmation from the source that the last one has been processed.\n Note that this confirmation is asynchronous: the processor doesn\u2019t block on it, instead it just keeps running, and sets its internal  tick_adjusted flag to true whenever it receives the  SourceMsg::TickAdjusted message. In the meantime it will not send other  RegulateSourceMsg messages.\n  Good, in the intro I wrote \u201cWe\u2019ll also look at the difference between \u201cpush\u201d and \u201cpull\u201d sources of streaming data\u201d, but you know what, I think this is more than enough for today.\n Let\u2019s just note that this is definitely a \u201cpush source\u201d type of workflow.\n It\u2019s also worth re-iterating that what we have here is a bounded pipeline of work(with probably some broken overflowing code), and there is not a bounded channel in sight.\n This gives us a huge benefit: you can forget about any risk of deadlocks arising from the messaging.", "posttime": "2020-05-04 23:14:45", "tags": "rust,\u5e76\u53d1,concurrency,work", "title": "\u94c1\u9508\u5e76\u53d1\uff1a\u6d41\u5de5\u4f5c\u6d41\uff0c\u6709\u4e00\u5b9a\u7684\u53cd\u538b\u529b", "title_en": "Rust concurrency: a streaming workflow, served with a side of back-pressure", "transed": 1, "url": "https://medium.com/@polyglot_factotum/rust-concurrency-a-streaming-workflow-served-with-a-side-of-back-pressure-955bdf0266b5", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["rust", "\u5e76\u53d1", "work"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000601, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u5f53\u6211\u5411\u5b66\u751f\u6216\u5496\u5561\u9986\u7684\u5496\u5561\u5e08\u89e3\u91ca\u5e76\u884c\u51fd\u6570\u5f0f\u7f16\u7a0b\u65f6\uff0c\u6211\u5fc5\u987b\u89e3\u51b3\u7684\u4e00\u4ef6\u4e8b\u662f\u4eba\u4eec\u4ee5\u524d\u4f7f\u7528\u5e76\u884c\u7f16\u7a0b\u7684\u7ecf\u9a8c\u3002\u8fd9\u4e9b\u4f53\u9a8c\u901a\u5e38\u662f\u4f4e\u7ea7\u591a\u7ebf\u7a0b\u7f16\u7a0b\u7684\uff0c\u5145\u6ee1\u4e86\u7ade\u4e89\u6761\u4ef6\u548c\u5176\u4ed6\u5371\u9669\u3002\u4ed6\u4eec\u7684\u7ecf\u9a8c\u662f\u5e76\u884c\u7f16\u7a0b\u662f\u56f0\u96be\u548c\u4ee4\u4eba\u6cae\u4e27\u7684\u3002\u8c01\u53c8\u80fd\u602a\u4ed6\u4eec\u5462\uff1f\u5171\u4eab\u72b6\u6001\u591a\u7ebf\u7a0b\u7f16\u7a0b\u80af\u5b9a\u662f\u6211\u6240\u77e5\u9053\u7684\u6700\u56f0\u96be\u7684\u7f16\u7a0b\u5f62\u5f0f\u4e4b\u4e00\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u7f16\u7a0b\u98ce\u683c\u5bf9\u4e8e\u5e76\u884c\u6027\u65e2\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u4e5f\u4e0d\u662f\u5145\u5206\u7684\u3002\u6bd5\u7adf\uff0c\u5e76\u53d1\u7f16\u7a0b\u5728\u53ea\u6709\u4e00\u4e2a\u5904\u7406\u5668\u7684\u60c5\u51b5\u4e0b\u662f\u6709\u7528\u7684\u3002\n\u4f46\u662f\uff0c\u5f53\u6211\u5fc5\u987b\u89e3\u91ca\u6211\u4eec\u5728Futhark\u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\u652f\u6301\u7684\u5e76\u884c\u7f16\u7a0b\u7c7b\u578b\u65f6\uff0c\u8fd9\u79cd\u5148\u5165\u4e3a\u4e3b\u7684\u89c2\u5ff5\u4ecd\u7136\u662f\u4e00\u4e2a\u969c\u788d\u3002\u6211\u7684\u7b56\u7565\u5df2\u7ecf\u8f6c\u5411\u5c06Python\u6570\u7ec4\u5e93NumPy\u4f5c\u4e3a\u5e7f\u6cdb\u4f7f\u7528\u7684\u5e76\u884c\u7f16\u7a0b\u6a21\u578b\u7684\u4e00\u4e2a\u793a\u4f8b\uff1b\u8be5\u6a21\u578b\u5df2\u7ecf\u8868\u660e\u9ad8\u7ea7\u5e76\u884c\u7f16\u7a0b\u53ef\u4ee5\u4e0e\u987a\u5e8f\u7f16\u7a0b\u4e00\u6837\u53ef\u8bbf\u95ee\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u8be6\u7ec6\u9610\u8ff0\u8fd9\u4e00\u4e3b\u9898\uff0c\u5e76\u5c55\u793aNumPy\u7684\u4e00\u9636\u6a21\u578b\u4e0eFuthark\u7684\u9ad8\u9636\u6a21\u578b\u76f8\u6bd4\u7684\u5c40\u9650\u6027\u3002\nNumPy\u662f\u4e00\u4e2aPython\u5e93\uff0c\u5b83\u63d0\u4f9b\u6570\u7ec4\u7c7b\u578b\uff0c\u4ee5\u53ca\u5404\u79cd\u7528\u4e8e\u64cd\u4f5c\u6b64\u7c7b\u6570\u7ec4\u7684\u51fd\u6570\u548c\u8fd0\u7b97\u7b26\u3002\u5176\u4e3b\u8981\u7279\u70b9\u662f\u5927\u591a\u6570\u64cd\u4f5c\u90fd\u88ab\u9690\u5f0f\u63d0\u5347\u4ee5\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u5bf9\u5355\u4e2a\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679cx\u662fNumPy\u6570\u7ec4\uff0c\u5219x+1\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0ex\u5927\u5c0f\u548c\u7c7b\u578b\u76f8\u540c\u7684\u6570\u7ec4\uff0c\u4f46\u6bcf\u4e2a\u5143\u7d20\u52a01\u3002\u7c7b\u4f3c\u5730\uff0c\u5982\u679cx\u548cy\u662f\u6570\u7ec4\uff0c\u5219x+y\u4ea7\u751f\u5b83\u4eec\u7684\u6210\u5bf9\u548c\uff0c\u5982\u679cx\u548cy\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5bf9\u5e94\u4e8e\u5411\u91cf\u76f8\u52a0\uff0c\u5982\u679c\u5b83\u4eec\u662f\u4e8c\u7ef4\u7684\uff0c\u5219\u5bf9\u5e94\u4e8e\u77e9\u9635\u76f8\u52a0\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u597d\u7684NumPy\u7f16\u7a0b\u57fa\u4e8e\u8fd9\u4e9b\u5728\u6574\u4e2a\u6570\u7ec4\u4e0a\u64cd\u4f5c\u7684\u6279\u91cf\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u5355\u72ec\u64cd\u4f5c\u5143\u7d20\u3002\nNumPy\u7684\u4e3b\u8981\u4f18\u52bf\u662f\u8fd9\u4e9b\u539f\u8bed\u64cd\u4f5c\u662f\u7528\u9ad8\u6548\u7684\u8bed\u8a00(\u5982C\u6216Fortran)\u5b9e\u73b0\u7684\uff0c\u8fd9\u4e9b\u8bed\u8a00\u7684\u8fd0\u884c\u901f\u5ea6\u5c06\u6bd4\u76f8\u5e94\u7684Python\u5faa\u73af\u5feb\u5f97\u591a\u3002\u4f46\u5176\u4f18\u52bf\u8fdc\u4e0d\u6b62\u4e8e\u6b64\uff1a\u6570\u7ec4\u52a0\u6cd5x+y\u53ef\u80fd\u662f\u5e76\u884c\u7684\u3002\u5728\u4e0d\u4e86\u89e3\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u5176\u4ed6\u4e8b\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u5b89\u5168\u5730\u4ee5\u5e76\u884c\u65b9\u5f0f\u6267\u884c\u6b64\u52a0\u6cd5\uff0c\u4f8b\u5982\uff0c\u5bf9\u7ed3\u679c\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4f7f\u7528\u4e00\u4e2a\u7ebf\u7a0b\u3002\u5f53\u7136\uff0c\u4ece\u5b57\u9762\u4e0a\u6765\u8bf4\uff0c\u6bcf\u4e2a\u5143\u7d20\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u6548\u7387\u4e0d\u9ad8\uff0c\u56e0\u4e3a\u5355\u72ec\u6dfb\u52a0\u4e00\u4e2a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u91cf\u592a\u5c11\uff0c\u65e0\u6cd5\u644a\u9500\u521b\u5efa\u7ebf\u7a0b\u7684\u6210\u672c\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u8ba8\u8bba\u5982\u4f55\u4f7f\u5e76\u884c\u9ad8\u6548\uff0c\u800c\u4e0d\u662f\u9996\u5148\u8ba8\u8bba\u5e76\u884c\u662f\u5426\u5b89\u5168\u6216\u6b63\u786e\uff01\n\u73b0\u5728\uff0c\u5c3d\u7ba1\u5b58\u5728\u8fd9\u79cd\u6f5c\u5728\u7684\u5e76\u884c\u6027\uff0c\u636e\u6211\u6240\u77e5\uff0c\u80a1\u7968NumPy\u4e0d\u4f1a\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u4f46\u662f\uff0cNumPy API\u7684\u5176\u4ed6\u5b9e\u73b0\uff0c\u5982Numba\u6216CuPy\uff0c\u5374\u505a\u5230\u4e86\uff01\u4e00\u65e6\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u5e76\u884c\u7f16\u7a0b\u6a21\u578b\uff0c\u5b9e\u9645\u4e0a\u5229\u7528\u5e76\u884c\u6267\u884c\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u89e6\u624b\u53ef\u53ca\u7684\u5de5\u7a0b\u95ee\u9898\u3002\n\u4f7fNumPy\u4f5c\u4e3a\u5e76\u884c\u7f16\u7a0b\u6a21\u578b\u5de5\u4f5c\u7684\u539f\u56e0\u662f\u5f3a\u8c03\u5728\u6574\u4e2a\u6570\u7ec4\u4e0a\u64cd\u4f5c\u7684\u6279\u91cf\u64cd\u4f5c\u3002\u53ea\u8981\u6211\u4eec\u5bf9\u8fd9\u4e9b\u64cd\u4f5c\u4e4b\u95f4\u7684\u6570\u636e\u6709\u4e00\u4e2a\u987a\u5e8f\u4e00\u81f4\u7684\u89c6\u56fe\uff0cNumPy\u5b9e\u73b0\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u6267\u884c\u5b83\u5e0c\u671b\u7684\u4efb\u4f55\u5e76\u884c\u6280\u5de7\u3002\u6211\u4eec\u4e24\u5168\u5176\u7f8e\uff1a\u987a\u5e8f\u7684\u3001\u5b8c\u5168\u786e\u5b9a\u7684\u3001\u4e00\u6b21\u4e00\u884c\u7684\u8bed\u4e49\uff0c\u4f46\u662f(\u6f5c\u5728\u7684)\u9ad8\u6548\u5e76\u884c\u6267\u884c\u3002\u4f5c\u4e3a\u4eba\u7c7b\u7a0b\u5e8f\u5458\uff0c\u6211\u4eec\u5fc5\u987b\u7528\u6279\u91cf\u64cd\u4f5c\u6765\u8868\u8fbe\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u4f46\u6211\u4eec\u6c38\u8fdc\u4e0d\u5fc5\u62c5\u5fc3\u4e89\u7528\u6761\u4ef6\u6216\u4e0d\u786e\u5b9a\u6027\u3002\n\u5c3d\u7ba1NumPy\u6a21\u578b\u5177\u6709\u6240\u6709\u4f18\u70b9\uff0c\u4f46\u5b83\u4e5f\u6709\u4e0e\u6240\u6709\u7c7b\u4f3c\u7684\u6570\u7ec4\u7f16\u7a0b\u6a21\u578b(\u5982\u5386\u53f2\u60a0\u4e45\u7684APL)\u76f8\u540c\u7684\u7f3a\u70b9\u3002\u6700\u7ec8\uff0c\u5728\u8fd9\u4e9b\u6a21\u578b\u4e2d\uff0c\u60a8\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u53ef\u4ee5\u4f7f\u7528\u7684\u53ea\u662f\u4e00\u5927\u7ec4\u5185\u7f6e\u6570\u7ec4\u64cd\u4f5c\u3002\u5982\u679c\u60a8\u5e0c\u671b\u81ea\u5df1\u7684\u4ee3\u7801\u9ad8\u6548\uff0c\u5219in\u5fc5\u987b\u662f\u53ef\u7528\u8fd9\u4e9b\u539f\u8bed\u8868\u793a\u7684\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u4e0d\u591f\u7075\u6d3b\u3002\u7279\u522b\u662f\uff0c\u5b9a\u4e49\u9700\u8981\u6bcf\u4e2a\u5143\u7d20\u63a7\u5236\u6d41\u7684\u6279\u91cf\u64cd\u4f5c\u662f\u5f88\u68d8\u624b\u7684\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u6709\u70b9\u505a\u4f5c\u7684\u793a\u4f8b\uff0c\u8003\u8651\u5c06\u4ee5\u4e0bPython\u51fd\u6570\u5e94\u7528\u4e8eNumPy\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u95ee\u9898\uff1a\n\u73b0\u5728\uff0c\u867d\u7136NumPy\u786e\u5b9e\u63d0\u4f9b\u4e86\u6620\u5c04\u51fd\u6570\uff0c\u4f46\u662f\u4f7f\u7528\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u56e0\u4e3a\u6211\u4eec\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u51fd\u6570\u662f\u4efb\u610f\u7684Python\u51fd\u6570\uff0c\u6240\u4ee5NumPy\u4e0d\u518d\u80fd\u591f\u5206\u6d3e\u7ed9\u4e00\u4e9b\u9ad8\u5ea6\u8c03\u4f18\u7684\u672c\u673a\u5b9e\u73b0\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u901a\u8fc7\u63d0\u4f9b\u4efb\u610f\u51fd\u6570\uff0c\u4e0d\u518d\u4fdd\u8bc1\u5e76\u884c\u5316\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u8be5\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u5168\u5c40\u6570\u636e\uff01\u4e3a\u4e86\u5229\u7528\u9ad8\u6548\u7684\u539f\u8bed\u64cd\u4f5c\uff0c\u6211\u4eec\u6700\u7ec8\u5fc5\u987b\u5c06\u63a7\u5236\u6d41\u7f16\u7801\u4e3a\u6570\u636e\uff1a\n\u8fd9\u4e0d\u592a\u597d\u3002\u7279\u522b\u662f\u539f\u6765\u7684\u51fd\u6570f\u5b8c\u5168\u6ca1\u6709\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u4efb\u4f55\u4ee3\u7801\u91cd\u7528\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7d22\u5f15\u7684\u5e76\u884c\u5316\u76f8\u5f53\u590d\u6742\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u66f4\u7cdf\u7cd5\u7684\u516c\u5f0f(\u5b83\u7684\u8fd0\u884c\u901f\u5ea6\u51e0\u4e4e\u662f\u539f\u6765\u7684\u4e24\u500d\uff0c\u751a\u81f3\u662f\u6309\u987a\u5e8f\u8fd0\u884c)\uff1a\n\u80ae\u810f\u7684\u4e1c\u897f\u3002NumPy\u6709\u4e00\u4e9b\u7528\u4e8e\u201c\u63a9\u853d\u6267\u884c\u201d\u7684\u7279\u522b\u673a\u5236\uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u6539\u53d8\u4e00\u4e2a\u57fa\u672c\u4e8b\u5b9e\uff0c\u5373\u8fd9\u53ef\u80fd\u4e0d\u662f\u6211\u4eec\u559c\u6b22\u7684\u7b97\u6cd5\u601d\u8003\u65b9\u5f0f\u3002\u800c\u4e14\uff0c\u60c5\u51b5\u53d8\u5f97\u66f4\u7cdf\u4e86\u3002\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u8ba1\u7b97Mandelbrot\u5206\u5f62\u7684\u4efb\u52a1\uff0c\u5176\u672c\u8d28\u4e0a\u5f52\u7ed3\u4e3a\u5c06\u4ee5\u4e0b\u51fd\u6570\u5e94\u7528\u4e8e\u4e00\u7ec4\u72ec\u7acb\u7684\u590d\u6570\uff1a\n\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u8be5\u51fd\u6570\u5e94\u7528\u4e8eNumPy\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5462\uff1f\u5728\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5904\u7406if\u5df2\u7ecf\u591f\u7cdf\u7cd5\u7684\u4e86\u3002\u5904\u7406WHILE\u5faa\u73af\u66f4\u7cdf\u7cd5\uff1a\n\u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u80af\u5b9a\u662f\u4ece\u5e76\u884c\u6279\u91cf\u64cd\u4f5c\u7684\u89d2\u5ea6\u6765\u8868\u8fbe\u7684\uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u5e26\u6765\u6b22\u4e50\u3002\u63a7\u5236\u6d41\u662f\u6a21\u7cca\u7684\uff0c\u5b83\u603b\u662f\u8fd0\u884cd\u6b21\u8fed\u4ee3\uff0c\u5e76\u4e14\u5b83\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u5185\u5b58\u6d41\u91cf\uff0c\u56e0\u4e3a\u4e2d\u95f4\u8f93\u51fa\u548cz\u6570\u7ec4\u5fc5\u987b\u5728\u5185\u5b58\u4e2d\u663e\u793a\u3002\u4e0e\u6700\u521d\u7684\u53d1\u6563\u51fd\u6570\u76f8\u6bd4\uff0c\u539f\u6765\u7684\u53d1\u6563\u51fd\u6570\u53ea\u6d89\u53ca\u4e00\u5806\u6807\u91cf\uff0c\u539f\u5219\u4e0a\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff01\n\u95ee\u9898\u662fNumPy(\u5b9e\u9645\u4e0a)\u662f\u4e00\u9636\u7f16\u7a0b\u6a21\u578b\uff0c\u56e0\u4e3a\u5b83\u7684\u64cd\u4f5c\u662f\u7531\u503c(\u6570\u7ec4\u548c\u6807\u91cf)\u53c2\u6570\u5316\u7684\uff0c\u800c\u4e0d\u662f\u51fd\u6570\u3002\u7b80\u800c\u8a00\u4e4b\uff0cNumPy\u7f3a\u4e4f\u6709\u6548\u7684\u5730\u56fe\u3002\n\u73b0\u5728\u6211\u5c06\u5c55\u793aFuthark\u5982\u4f55\u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u81ea\u7136\u7684\u65b9\u5f0f\u516c\u5f00\u5177\u6709\u5d4c\u5957\u63a7\u5236\u6d41\u7684\u5e76\u884c\u6027\u3002\u8fd9\u5e76\u4e0d\u662f\u8981\u6279\u8bc4NumPy-\u9ad8\u9636\u5e76\u884c\u7f16\u7a0b\u662f\u4e00\u4ef6\u975e\u5e38\u68d8\u624b\u7684\u9ad8\u6548\u5b9e\u73b0\u7684\u4e8b\u60c5\uff0c\u800c\u4e14\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u6d3b\u8dc3\u7684\u7814\u7a76\u9886\u57df\uff0c\u5b9e\u73b0\u6ca1\u6709NumPy\u90a3\u4e48\u5065\u58ee\u3002\u4ece\u6bd4\u55bb\u7684\u610f\u4e49\u4e0a\u8bf4\uff0c\u798f\u5854\u514b\u662f\u5728\u5200\u5203\u4e0a\u4fdd\u6301\u5e73\u8861\uff0c\u627f\u8bfa\u7684\u4e1c\u897f\u8d85\u8fc7\u4e86\u7f16\u8bd1\u5668\u6240\u80fd\u63d0\u4f9b\u7684\u3002\n\u4f46\u5b83\u786e\u5b9e\u80fd\u9001\u5230\u8fd9\u91cc\u3002\u5bf9\u4e8e\u5e73\u65b9\u6839\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u5b9a\u4e49\u4efb\u610f\u6807\u91cf\u51fd\u6570\uff0c\u5728Futhark\u4e2d\u5982\u4e0b\u6240\u793a\uff1a\n\u5b83\u5f88\u7ba1\u7528\uff0c\u800c\u4e14\u8dd1\u5f97\u4e5f\u5f88\u5feb\u3002\u90a3\u66fc\u5fb7\u5c14\u5e03\u6d1b\u7279\u5462\uff1f\u540c\u6837\u7b80\u5355\uff1a\n\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u6ca1\u6709\u4f7f\u7528\u590d\u6742\u7684\u6570\u5e93\uff0c\u56e0\u6b64\u4e8b\u60c5\u770b\u8d77\u6765\u6bd4\u5b9e\u9645\u60c5\u51b5\u8981\u5c34\u5c2c\u4e00\u4e9b\u3002\u5b8c\u6574\u7684\u4ee3\u7801\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\n\u6027\u80fd\u600e\u4e48\u6837\uff1f\u6211\u63d0\u5230\u8fc7\uff0cNumPy\u98ce\u683c\u7684Mandelbrot\u7531\u4e8e\u5185\u5b58\u6d41\u91cf\u8fc7\u5927\u800c\u6548\u7387\u4f4e\u4e0b\uff0c\u4f46\u5b83\u5230\u5e95\u6709\u591a\u7cdf\u7cd5\uff1f\u5c06GPU\u52a0\u901f\u7684Futhark\u4e0e\u987a\u5e8fNumPy\u8fdb\u884c\u6bd4\u8f83\u5e76\u4e0d\u516c\u5e73\uff0c\u4f46\u6211\u53ef\u4ee5\u5728Futhark\u4e2d\u5b9e\u73b0NumPy\u65b9\u6cd5\uff1a\n\u8fd9\u5b9e\u9645\u4e0a\u6bd4\u6700\u521d\u7684NumPy\u516c\u5f0f\u66f4\u6709\u6548\u7387\uff0c\u56e0\u4e3a\u6211\u907f\u514d\u4e86\u4e00\u4e9b\u6602\u8d35\u7684\u8fc7\u6ee4\u5668\u3002\u5b83\u770b\u8d77\u6765\u786e\u5b9e\u5f88\u810f\uff0c\u4f46\u662f\u5b83\u6709\u591a\u5feb\u5462\uff1f\u5728\u6211\u7684AMD Vega64GPU\u4e0a\uff0c\u5bf9\u4e8e300x300\u9635\u5217\uff0cnumpy_mandelbrot\u8fd0\u884c\u65f6\u95f4\u4e3a7846\u5fae\u79d2\uff0c\u800cmandelbrot\u8fd0\u884c\u65f6\u95f4\u4e3a110\u5fae\u79d2\u3002\u8fd9\u6bd4\u4ee5\u524d\u5feb\u4e86\u4e24\u4e2a\u6570\u91cf\u7ea7\uff01\u8fd9\u5b8c\u5168\u5f52\u529f\u4e8emandelbrot\u80fd\u591f\u5c06\u5176\u6240\u6709\u4e2d\u95f4\u7ed3\u679c\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u800cGPU\u7684\u901f\u5ea6\u5feb\u5f97\u79bb\u8c31\uff0c\u56e0\u4e3a\u5b83\u4eec\u6c38\u8fdc\u4e0d\u9700\u8981\u89e6\u53ca\u5185\u5b58\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cnumpy_mandelbrot\u5fc5\u987b\u4e0d\u65ad\u5730\u5728\u76f8\u5bf9\u8f83\u6162\u7684\u5185\u5b58\u603b\u7ebf(350GiB/s)\u4e0a\u4f20\u9001\u6570\u636e\uff0c\u66f4\u4e0d\u7528\u8bf4\u5f88\u591a\u989d\u5916\u7684\u540c\u6b65\u4e86\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u66f4\u591a\u7684\u79bb\u6563GPU\u5185\u6838\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u9ad8\u9636\u5e76\u884c\u7f16\u7a0b\u4e0e\u4e00\u9636\u5e76\u884c\u7f16\u7a0b\u4e00\u6837\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u662f\u65e0\u7ade\u4e89\u4e14\u5b8c\u5168\u786e\u5b9a\u7684\u3002\u4f46\u5b83\u4e0d\u4ec5\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u5927\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u800c\u4e14\u8fd8\u53ef\u80fd\u63d0\u4f9b\u66f4\u597d\u7684\u6027\u80fd\u3002", "note_en": "Whenever I explain parallel functional programming, whether to students or the barista at a coffee shop, one thing I must contend with is people\u2019s prior experience with parallel programming. Quite often these experiences are with low-level multi-threaded programming, fraught with race conditions and other hazards. Their experience is that parallel programming is difficult and frustrating. And who can blame them? Shared-state multi-threaded programming is certainly one of the most difficult forms of programming I know of. However, this style of programming is neither necessary nor sufficient for parallelism. Concurrent programming can be useful with just a single processor, after all.\n But still such preconceptions present a barrier when I have to explain the kind of parallel programming we support in a language such as Futhark. My strategy has become to point at  NumPy, the Python array library, as an example of a widely used parallel programming model; one that has shown that high-level parallel programming can be just as accessible as sequential programming. In this post I will elaborate on this theme and show the limitations of NumPy\u2019s  first-order model, compared to Futhark\u2019s  higher-order model.\n  NumPy is a Python library that makes available an  array type, along with various various functions and operators for manipulating such arrays. The key feature is that most operations are implicitly lifted to operate on  entire arrays, rather than single elements at a time. For example, if  x is a NumPy array, then  x+1 produces an array of the same size and type as  x, but with  1 added to each element. Similarly, if  x and  y are arrays, then  x+y produces their pairwise sum, corresponding to vector addition if  x and  y are one-dimensional, matrix addition if they are two-dimensional, and so on. Good NumPy programming is based on these  bulk operations that operate on entire arrays, rather than on individually manipulating elements.\n The main advantage in NumPy is that these primitive operations are implemented in efficient languages, such as C or Fortran, which will run  much faster than corresponding Python loops. But the advantage goes deeper than that: an array addition  x+y is  potentially parallel. Without knowledge about anything else going on in the program, we know that we can safely execute this addition in a parallel manner, for example by using one thread for each element in the result. Of course, literally launching one thread per element would not be efficient, as a lone addition is far too little work to amortise the cost of thread creation. But note how we are already discussing how to make the parallelism  efficient, not whether it is safe or correct to parallelise in the first place!\n Now, despite this potential parallelism, stock NumPy does not to my knowledge execute any of its operations in multiple threads. However, other implementations of the NumPy API, such as  Numba or  CuPy, do! Once we are working with a parallel programming model to start with, actually exploiting parallel execution becomes an engineering problem that is well within reach.\n The thing that makes NumPy work as a parallel programming model is the emphasis on bulk operations that operate on entire arrays. As long as we have a sequentially consistent view of data  between these operations, the NumPy implementation do whatever parallel tricks it wishes  inside them. We get the best of both worlds: sequential, fully deterministic, line-at-a-time semantics, but (potentially) efficient parallel execution. As human programmers we have to express our code in terms of bulk operations, but we  never have to worry about race conditions or nondeterminism.\n  For all its advantages, the NumPy model has weaknesses shared with all similar array programming models (such as the venerable  APL). Ultimately, in these models, all you have available as a programmer is a large set of builtin array operations. If you want your own code to be efficient, in must be expressible in terms of these primitives. In some cases they are insufficiently flexible. In particular, it is tricky to define bulk operations that require per-element control flow.\n As a somewhat contrived example, consider the problem of applying the following Python function to every element of a NumPy array:\n  Now, while NumPy does provide a  map function, using it is rarely a good idea. Since the function we apply to each element is an arbitrary Python function, NumPy is no longer able to dispatch to some highly-tuned native implementation. Worse, by providing an arbitrary function, parallelisation is no longer guaranteed to be safe, as that function may modify global data! To take advantage of the efficient primitive operations, we end up having to encode the control flow as data:\n  This is not great. In particular the original function  f is completely gone, so there is not any code re-use going on. Further, those indexings are rather complex to parallelise, so we probably want an even nastier formulation (which runs almost twice as fast, even sequentially):\n  Nasty stuff. NumPy has a few ad-hoc mechanisms for \u201cmasked execution\u201d, but it doesn\u2019t change the fundamental fact that this is probably not how we like to think about our algorithms. Also, it gets worse. Let us consider the task of computing a  Mandelbrot fractal, which essentially boils down to applying the following function to a bunch of independent complex numbers:\n  So how do we apply this function to every element of a NumPy array? Handling  if in the previous example was bad enough. Handling a  while loop is worse:\n  While this program is certainly expressed in terms of parallel bulk operations, it does not spark joy. The control flow is obscured, it always runs for  d iterations, and it causes a  lot of memory traffic, as the intermediate  output and  z arrays must be manifested in memory. Compare this to the original  divergence function, which just involves a bunch of scalars that could in principle be stored entirely in registers!\n The problem is that NumPy is (practically) a  first-order programming model, in the sense that its operations are parameterised by values (arrays and scalars), not functions. Put simply, NumPy lacks an efficient  map.\n  I am now going to show how Futhark allows us to expose parallelism with nested control flow in a natural way. This is not intended as a criticism of NumPy - higher-order parallel programming is a  very tricky thing to implement efficiently, and to a large extent it is still an active research area, with implementations that are not as robust as NumPy. In a metaphorical sense, Futhark is balancing on a knife\u2019s edge on promising more than the compiler can deliver.\n But it does deliver here. For the square root problem, we just define our arbitrary scalar function, which looks like this in Futhark:\n    It just works, and will run quite fast too. What about Mandelbrot? Just as simple:\n  For simplicity, I\u2019m not using a complex number library, so things look a bit more awkward than they have to.  The full code is available here.\n What about performance? I mentioned that the NumPy-style Mandelbrot is inefficient because of excessive memory traffic, but how bad is it really? Comparing GPU-accelerated Futhark with sequential NumPy isn\u2019t fair, but I can implement the NumPy approach in Futhark:\n  This is actually a bit more efficient than the original NumPy formulation, as I\u2019m avoiding some expensive filters. It sure looks nasty, but how fast is it? On my AMD Vega 64 GPU and for a 300x300 array,  numpy_mandelbrot runs in  7846 microseconds, while  mandelbrot runs in  110 microseconds. That\u2019s approaching two orders of magnitude faster! This is entirely down to  mandelbrot being able to keep all its intermediate results in registers, and GPUs are  ludicrously fast when they never have to touch memory. In contrast,  numpy_mandelbrot constantly has to shuffle data across the relatively slow memory bus (350GiB/s), not to mention a lot of extra synchronisation because many more discrete GPU kernels are involved.\n In conclusion, higher-order parallelism programming is just as easy as first-order parallel programming, because it is still race-free and fully deterministic. But it allows us not just more powerful methods of abstraction, but also potentially much better performance.", "posttime": "2020-05-04 23:14:34", "tags": "\u7a0b\u5e8f,\u8bbe\u8ba1,\u5e76\u884c\u7a0b\u5e8f,order,numpy", "title": "\u9ad8\u9636\u5e76\u884c\u7a0b\u5e8f\u8bbe\u8ba1", "title_en": "Higher-Order Parallel Programming", "transed": 1, "url": "https://futhark-lang.org/blog/2020-05-03-higher-order-parallel-programming.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7a0b\u5e8f", "\u8bbe\u8ba1", "\u5e76\u884c\u7a0b\u5e8f", "order", "numpy"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000600, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9000\u5316\u3001\u4ee3\u7801\u4e0e\u521b\u65b0|adl.io|\u6717\u5a01\u5c14\u54a8\u8be2\u6709\u9650\u8d23\u4efb\u516c\u53f8(Longwell Consulting\uff0cLLC)\u7684\u4e9a\u4f26\u00b7\u6717\u5a01\u5c14(Aaron Longwell)", "note_en": "Degeneracy, Code and Innovation | adl.io | Aaron Longwell of Longwell Consulting, LLC", "posttime": "2020-05-04 23:14:30", "tags": "\u7f16\u7801,code,longwell", "title": "\u9000\u5316\u3001\u7f16\u7801\u4e0e\u521b\u65b0", "title_en": "Degeneracy, Code and Innovation", "transed": 1, "url": "https://adl.io/essays/degeneracy-code-and-innovation/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u7801", "code", "longwell"]}, {"category": "", "categoryclass": "", "imagename": "c68a849575093eb49cfe73316e51d78c.jpg", "infoid": 1000599, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7814\u7a76\u4eba\u5458\u5728\u8d8a\u6765\u8d8a\u591a\u7684\u7814\u7a76\u4e2d\u8bc1\u660e\uff0c\u52a8\u7269\u62e5\u6709\u66fe\u7ecf\u88ab\u8ba4\u4e3a\u662f\u4eba\u7c7b\u601d\u7ef4\u5185\u90e8\u8fd0\u4f5c\u4e13\u6709\u7684\u8ba4\u77e5\u80fd\u529b\u3002\u5c3d\u7ba1\u6709\u8bc1\u636e\u8868\u660e\uff0c\u5176\u4ed6\u7269\u79cd\u4e0e\u6211\u4eec\u6709\u8bb8\u591a\u5171\u540c\u7684\u8ba4\u77e5\u80fd\u529b\uff0c\u4f46APS\u7684\u540c\u4e8b\u52b3\u91cc\u00b7R\u00b7\u6851\u6258\u65af(Laurie R.Santos)\u575a\u6301\u8ba4\u4e3a\uff0c\u4eba\u7c7b\u7684\u5927\u8111\u4ecd\u7136\u62e5\u6709\u5176\u7279\u6b8a\u800c\u72ec\u7279\u7684\u5730\u4f4d\u3002\n\u6851\u6258\u65af\u8bf4\uff1a\u201c\u6211\u4eec\u4e00\u76f4\u5728\u4ece\u4e8b\u770b\u4f3c\u5e73\u51e1\u4f46\u5374\u662f\u5730\u7403\u4e0a\u5176\u4ed6\u7269\u79cd\u90fd\u4e0d\u4f1a\u505a\u7684\u4e8b\u60c5\u3002\u201d\u4ed6\u5217\u4e3e\u4e86\u4e00\u7cfb\u5217\u5178\u578b\u7684\u4e0e\u4eba\u7c7b\u76f8\u5173\u7684\u6d3b\u52a8\uff0c\u5305\u62ec\u6559\u5b66\u3001\u9605\u8bfb\u548c\u5199\u5c0f\u8bf4\u3001\u62cd\u7167\u3001\u770b\u7535\u5f71\u548c\u53c2\u4e0e\u79d1\u5b66\u4e8b\u4e1a\u3002\n\u6851\u6258\u65af\u8bf4\uff1a\u201c\u6ca1\u6709\u5176\u4ed6\u7269\u79cd\u5728\u505a\u8fd9\u4ef6\u4e8b\u3002\u201d\u5979\u4e00\u8fb9\u80cc\u8bf5\u7740\u4e00\u4e9b\u6d3b\u52a8\uff0c\u4e00\u8fb9\u8bf4\u7740\u5b83\u4eec\u6240\u9700\u8981\u7684\u9ad8\u6c34\u5e73\u8ba4\u77e5\u80fd\u529b\u3002\u6851\u6258\u65af\u5728\u6ce2\u58eb\u987f\u53c2\u52a02017\u5e74APS\u5e74\u4f1a\u65f6\u5bf9\u89c2\u4f17\u8bf4\uff1a\u201c\u771f\u7684\u53ea\u6709\u6211\u4eec\uff0c\u8fd9\u5f15\u53d1\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u2018\u6211\u4eec\u600e\u4e48\u624d\u80fd\u505a\u6240\u6709\u8fd9\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\uff1f\u2019\u201d\n\u6851\u6258\u65af\u662f\u8036\u9c81\u5927\u5b66\u7684\u5fc3\u7406\u5b66\u548c\u8ba4\u77e5\u79d1\u5b66\u6559\u6388\uff0c\u5728\u90a3\u91cc\u5979\u4e13\u6ce8\u4e8e\u63a2\u7d22\u4eba\u7c7b\u601d\u7ef4\u8fdb\u5316\u8d77\u6e90\u7684\u7814\u7a76\u3002\u4f5c\u4e3a\u8fd9\u9879\u7814\u7a76\u7684\u4e00\u90e8\u5206\uff0c\u6851\u6258\u65af\u5bf9\u975e\u4eba\u7c7b\u7075\u957f\u7c7b\u52a8\u7269\u548c\u9a6f\u517b\u72d7\u7684\u8ba4\u77e5\u80fd\u529b\u8fdb\u884c\u4e86\u7814\u7a76\u3002\n\u6851\u6258\u65af\u5728\u5979\u7684\u7814\u7a76\u4e2d\u7784\u51c6\u7684\u4e00\u4e2a\u8ba4\u77e5\u80fd\u529b\u9886\u57df\u6d89\u53ca\u4eba\u7c7b\u548c\u5176\u4ed6\u52a8\u7269\u5982\u4f55\u601d\u8003\u5176\u4ed6\u601d\u7ef4\u3002\u6851\u6258\u65af\u5728\u5927\u4f1a\u7684\u201c\u5e26\u6765\u5bb6\u5ead\u201d\u6f14\u8bb2\u4e2d\u544a\u8bc9\u805a\u96c6\u5728\u5979\u6f14\u8bb2\u4e2d\u7684\u89c2\u4f17\uff0c\u601d\u8003\u5176\u4ed6\u601d\u7ef4\u662f\u901a\u8fc7\u4e00\u5957\u5b58\u5728\u4e8e\u4eba\u7c7b\u548c\u52a8\u7269\u4e2d\u7684\u8ba4\u77e5\u673a\u5236\u6216\u201c\u5c0f\u6545\u969c\u201d\u6765\u5b9e\u73b0\u7684-\u9664\u4e86\u4e00\u4e2a\u53ef\u80fd\u662f\u4eba\u7c7b\u72ec\u6709\u7684\u8ba4\u77e5\u673a\u5236\u3002\n\u6851\u6258\u65af\u6307\u51fa\u4e86\u4e24\u4e2a\u73b0\u8c61\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u8bf4\u660e\u5728\u53ef\u80fd\u6709\u610f\u8bc6\u6216\u6ca1\u6709\u610f\u8bc6\u5230\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6545\u969c\u5982\u4f55\u5e2e\u52a9\u5411\u4ed6\u4eba\u4f20\u8f93\u4fe1\u606f\u3002\n\u4e24\u79cd\u73b0\u8c61\u4e4b\u4e00\uff0c\u884c\u4e3a\u4f20\u67d3\uff0c\u6d89\u53ca\u5230\u6211\u4eec\u8eab\u8fb9\u7684\u4eba\u81ea\u53d1\u5730\u590d\u5236\u6211\u4eec\u7684\u884c\u4e3a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5171\u4eab\u7684\u4fe1\u606f\u53ef\u80fd\u4e0e\u7ba1\u7406\u9884\u671f\u884c\u4e3a\u7684\u7fa4\u4f53\u89c4\u8303\u6709\u5173\u3002\n\u6851\u6258\u65af\u8bf4\uff1a\u201c\u6211\u4eec\u6b63\u5728\u5fae\u5999\u5730\u590d\u5236\u6211\u4eec\u5468\u56f4\u6240\u6709\u4eba\u7684\u5404\u79cd\u59ff\u52bf\u548c\u884c\u4e3a\u3002\u201d\u4ed6\u5c06\u4eba\u7c7b\u6a21\u4eff\u884c\u4e3a\u7684\u81ea\u52a8\u6027\u6bd4\u4f5c\u5728\u9c7c\u7fa4\u4e2d\u89c2\u5bdf\u5230\u7684\u884c\u4e3a\u3002\u5728\u4eba\u7c7b\u4e2d\uff0c\u8fd9\u79cd\u6a21\u4eff\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6211\u4eec\u5468\u56f4\u4eba\u7684\u7279\u5b9a\u884c\u4e3a--\u6bd4\u5982\u5fae\u7b11\u3001\u5927\u7b11\u6216\u6253\u54c8\u6b20\u3002\u6851\u6258\u65af\u6307\u51fa\uff0c\u4f8b\u5982\uff0c\u5728\u4f53\u80b2\u8d5b\u4e8b\u4e2d\uff0c\u7403\u8ff7\u4eec\u53ef\u80fd\u4f1a\u91c7\u53d6\u7c7b\u4f3c\u7684\u5916\u5728\u884c\u4e3a\uff0c\u4ee5\u5e94\u5bf9\u4ed6\u4eec\u7403\u961f\u7684\u547d\u8fd0\u6216\u4e0d\u5e78\u3002\n\u6851\u6258\u65af\u8bf4\uff1a\u201c\u6211\u4eec\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u81ea\u52a8\u590d\u5236\u3002\u201d\u201c\u8fd9\u662f\u4e00\u79cd\u884c\u4e3a\u4f20\u67d3\uff0c\u56e0\u4e3a\u5b83\u8ba9\u6211\u4eec\u4e0e\u5176\u4ed6\u4eba\u7684\u884c\u4e3a\u4fdd\u6301\u540c\u6b65\u3002\u201d\n\u6851\u6258\u65af\u5f15\u7528\u7684\u7814\u7a76\u8868\u660e\uff0c\u5305\u62ec\u9ed1\u7329\u7329\u548c\u72d7\u5728\u5185\u7684\u5176\u4ed6\u52a8\u7269\u4e5f\u4f1a\u5728\u4e0e\u5b83\u4eec\u5173\u7cfb\u5bc6\u5207\u7684\u4eba\u505a\u51fa\u7c7b\u4f3c\u884c\u4e3a\u65f6\u6253\u54c8\u6b20\u3002\u6b64\u5916\uff0c\u5979\u8fd8\u63d0\u5230\u4e86\u4e00\u9879\u7814\u7a76\uff0c\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c\u9ed1\u7329\u7329\u4f3c\u4e4e\u5728\u5bf9\u4ed6\u4eba\u7684\u81ea\u52a8\u53cd\u5e94\u4e2d\u7b11\u4e86\u8d77\u6765\u3002\n\u884c\u4e3a\u6a21\u4eff\u4e2d\u9690\u542b\u7684\u8ba4\u77e5\u673a\u5236\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7b2c\u4e8c\u79cd\u73b0\u8c61\uff0c\u6d89\u53ca\u5230\u4e0e\u6211\u4eec\u5468\u56f4\u4eba\u7684\u60c5\u7eea\u72b6\u6001\u76f8\u5173\u7684\u4fe1\u606f\u4f20\u9012\u3002\u4eba\u4eec\u53ef\u80fd\u4f1a\u5728\u770b\u5230\u522b\u4eba\u5728\u5197\u957f\u7684\u6f14\u8bb2\u4e2d\u6253\u54c8\u6b20\u540e\u611f\u5230\u65e0\u804a\uff0c\u6216\u8005\u5728\u522b\u4eba\u7684\u5fae\u7b11\u6fc0\u52b1\u4ed6\u4eec\u5fae\u7b11\u540e\u611f\u53d7\u5230\u66f4\u591a\u7684\u79ef\u6781\u60c5\u7eea\u3002\n\u6851\u6258\u65af\u8bf4\uff1a\u201c\u8fd9\u662f\u5178\u578b\u7684\u60c5\u7eea\u6ce2\u52a8\u4f20\u67d3\u3002\u201d\u201c\u901a\u8fc7\u6a21\u4eff\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u514d\u8d39\u83b7\u5f97\u60c5\u611f\u3002\u201d\n\u6851\u6258\u65af\u5c06\u4e00\u4e9b\u60c5\u7eea\u53cd\u5e94\u5f52\u56e0\u4e8e\u201c\u795e\u7ecf\u5171\u632f\u201d\uff0c\u8fd9\u662f\u5f53\u4e0e\u6240\u8ba8\u8bba\u7684\u60c5\u7eea\u76f8\u5173\u7684\u795e\u7ecf\u7cfb\u7edf\u8d85\u8d1f\u8377\u5de5\u4f5c\u65f6\u89e6\u53d1\u7684\u8fc7\u7a0b\u3002\u6851\u6258\u65af\u6307\u51fa\uff0c\u4eba\u7c7b\u548c\u5176\u4ed6\u52a8\u7269\u4e00\u6837\u6709\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\u867d\u7136\u4e0e\u884c\u4e3a\u548c\u60c5\u611f\u4f20\u67d3\u76f8\u5173\u7684\u8ba4\u77e5\u673a\u5236\u6216\u6545\u969c\u5b58\u5728\u4e8e\u4eba\u7c7b\u548c\u5176\u4ed6\u52a8\u7269\u4e2d\uff0c\u4f46\u7b2c\u4e8c\u79cd\u673a\u5236\u53ef\u80fd\u662f\u4eba\u7c7b\u81ea\u5df1\u7684\u673a\u5236\u3002\u6839\u636e\u6851\u6258\u65af\u7684\u8bf4\u6cd5\uff0c\u8fd9\u4e00\u673a\u5236\u4fc3\u8fdb\u4e86\u4e00\u4e2a\u4eba\u7684\u4fe1\u4ef0\u3001\u611f\u77e5\u3001\u6001\u5ea6\u548c\u504f\u597d\u7684\u8f6c\u79fb\u6216\u5206\u4eab\u3002\u8fd9\u4e00\u673a\u5236\u7684\u5de5\u4f5c\u53ef\u80fd\u4f1a\u523a\u6fc0\u201c\u5fc3\u7075\u878d\u5408\u201d\uff0c\u6851\u6258\u65af\u501f\u7528\u4e86\u201c\u661f\u9645\u8ff7\u822a\u201d\u4e2d\u7684\u4e00\u4e2a\u672f\u8bed\u6765\u63cf\u8ff0\u4e00\u4e2a\u4eba\u4e0e\u53e6\u4e00\u4e2a\u4eba\u4e4b\u95f4\u4e0d\u53d7\u9650\u5236\u7684\u601d\u60f3\u4ea4\u6d41\u3002\n\u6851\u6258\u65af\u8bf4\uff0c\u4e0e\u5fc3\u7075\u878d\u5408\u76f8\u5173\u7684\u8ba4\u77e5\u673a\u5236\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e2a\u4eba\u63a5\u53d7\u4ed6\u4eba\u7684\u4fe1\u4ef0\u548c\u6001\u5ea6\uff0c\u6216\u8005\u5bf9\u81ea\u5df1\u7684\u4fe1\u4ef0\u4e0e\u4ed6\u4eba\u7684\u4fe1\u4ef0\u611f\u5230\u56f0\u60d1\u3002\n\u6851\u6258\u65af\u8bf4\uff0c\u5728\u5fc3\u7406\u5b66\u9886\u57df\uff0c\u4e0e\u5927\u89c4\u6a21\u8f6c\u79fb\u6216\u5206\u4eab\u4fe1\u4ef0\u548c\u6001\u5ea6\u76f8\u5173\u7684\u673a\u5236\u7814\u7a76\u4e0d\u8db3\u3002\u5979\u8bf4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u201c\u4ea4\u66ff\u4e2d\u5fc3\u5e72\u6270\u201d\uff0c\u5373\u6211\u4eec\u6df7\u6dc6\u4e86\u522b\u4eba\u7684\u89c2\u70b9\u548c\u6211\u4eec\u81ea\u5df1\u7684\u89c2\u70b9\u3002\u540c\u6837\uff0c\u201c\u4fe1\u4ef0\u5e72\u6270\u201d\u63cf\u8ff0\u7684\u662f\u4eba\u4eec\u5bf9\u81ea\u5df1\u7684\u4fe1\u4ef0\u548c\u4ed6\u4eba\u7684\u4fe1\u4ef0\u611f\u5230\u56f0\u60d1\u7684\u8fc7\u7a0b\u3002\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u4e9b\u8fc7\u7a0b\uff1f\n\u6851\u6258\u65af\u8bf4\uff0c\u5728\u795e\u7ecf\u5b66\u5c42\u9762\u4e0a\uff0c\u7406\u89e3\u53e6\u4e00\u4e2a\u4eba\u7684\u60f3\u6cd5\u6216\u4fe1\u4ef0\u9700\u8981\u4e2a\u4eba\u6291\u5236\u81ea\u5df1\u7684\u60f3\u6cd5\u6216\u4fe1\u4ef0\u7684\u5904\u7406\u3002\u6851\u6258\u65af\u8bf4\uff1a\u201c\u6709\u65f6\u5019\u6211\u4eec\u4f1a\u641e\u7838\u3002\u201d\u201c\u6709\u65f6\u5019\uff0c\u628a\u8fd9\u4e9b(\u601d\u60f3)\u5206\u5f00\u7684\u884c\u4e3a\u5e76\u4e0d\u7ba1\u7528\uff0c\u2026\u3002\u6211\u4eec\u53ea\u662f\u628a\u4fe1\u606f\u641e\u7cca\u6d82\u4e86\u3002\u201c\u3002\n\u6851\u6258\u65af\u63f4\u5f15\u5979\u5bf9\u7334\u5b50\u548c\u72d7\u8fdb\u884c\u7684\u5b9e\u9a8c\u7684\u7ed3\u679c\u8bf4\uff0c\u7cbe\u795e\u4f20\u67d3\u7684\u8fc7\u7a0b\u4f3c\u4e4e\u4e0d\u5b58\u5728\u4e8e\u975e\u4eba\u7c7b\u8eab\u4e0a\u3002\u6851\u6258\u65af\u6307\u51fa\uff0c\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u4e9b\u52a8\u7269\u6ca1\u6709\u50cf\u4eba\u7c7b\u90a3\u6837\u6a21\u62df\u4ed6\u4eba\u7684\u7cbe\u795e\u5185\u5bb9\u3002\nApperly\uff0cI.A.\uff0c&amp\uff1bButterill\uff0cS.A.(2009)\u3002\u4eba\u7c7b\u6709\u4e24\u4e2a\u7cfb\u7edf\u6765\u8ffd\u8e2a\u4fe1\u4ef0\u548c\u7c7b\u4f3c\u4fe1\u4ef0\u7684\u72b6\u6001\u5417\uff1f\u201c\u5fc3\u7406\u8bc4\u8bba\u201d\uff0c116\uff0c953-970\u3002\nKov\u00e1cs\uff0cA.M.\uff0cT\u00e9gl\u00e1s\uff0cE.\uff0c&Amp\uff1bEnresse\uff0cA.D.(2010)\u3002\u793e\u4f1a\u610f\u4e49\uff1a\u4eba\u7c7b\u5a74\u513f\u548c\u6210\u4eba\u5bf9\u4ed6\u4eba\u4fe1\u4ef0\u7684\u6613\u611f\u6027\u3002\u79d1\u5b66\uff0c330\uff0c1830-1834\u5e74\u3002\n\u9a6c\u4e01\uff0cA.\u548cAmp\uff1bSantos\uff0cL.R.(2014)\u3002\u4fe1\u4ef0\u8868\u5f81\u7684\u8d77\u6e90\uff1a\u7334\u5b50\u4e0d\u80fd\u81ea\u52a8\u4ee3\u8868\u4ed6\u4eba\u7684\u4fe1\u4ef0\u3002\u8ba4\u77e5\u5ea6\uff0c130\uff0c300-308\u3002\n\u201c\u89c2\u5bdf\u5bb6\u201d2017&7/8&gt\uff1b\u4eba\u7c7b\u7684\u8ba4\u77e5\u201c\u6545\u969c\u201d\uff1a\u52b3\u91cc\u00b7\u6851\u6258\u65af\u8c08\u662f\u4ec0\u4e48\u8ba9\u4eba\u7c7b\u7684\u601d\u7ef4\u5982\u6b64\u7279\u522b", "note_en": "Researchers have documented in a growing number of studies that animals possess cognitive abilities once thought to be exclusive to the inner workings of the human mind. Despite evidence that other species share many of our cognitive talents, APS Fellow Laurie R. Santos maintains that the human mind still holds its special and unique status.\n \u201cWe are constantly engaging in things that might seem mundane but are the kinds of things that no other species on the planet does,\u201d said Santos, citing a list of activities typically associated with humans, including teaching, reading and writing fiction, taking photographs, watching films, and engaging in the scientific enterprise.\n  \u201cNo other species is doing any of this,\u201d said Santos, as she recited some activities and the high-level cognitive abilities they demand. \u201cIt\u2019s really just us, and that raises a question: \u2018How do we get to do all of these weird things,\u2019\u201d said Santos in remarks made to an audience attending the 2017 APS Annual Convention in Boston.\n Santos is a professor of psychology and cognitive science at Yale University, where she focuses on research exploring the evolutionary origins of the human mind. As part of this research, Santos conducts studies investigating the cognitive abilities of nonhuman primates and domesticated dogs.\n One area of cognitive abilities that Santos targets in her research involves how humans and other animals think about other minds. Santos told audience members gathered for her presentation during the convention\u2019s \u201cBring the Family\u201d Address that thinking about other minds is achieved through a set of cognitive mechanisms or \u201cglitches\u201d that exist in humans and animals \u2014 with the exception of one that may be unique to humans.\n  Santos pointed to two phenomena as examples of how glitches aid in the transfer of information to others in processes that may occur either consciously or without our awareness.\n One of the two phenomena, behavioral contagion, involves the spontaneous copying of behavior by others in close proximity to us. In such cases, the information being shared may relate to group norms governing expected behaviors.\n \u201cWe are subtly copying the kinds of postures and behaviors of all the folks around us,\u201d said Santos, who likened the automaticity of human copying behavior to that observed in schooling fish. Among humans, the copying may lead to the adoption of specific behaviors of those around us \u2014 such as smiling, laughing, or yawning. Santos noted how at sports events, for example, fans might take on similar outward behaviors in response to the fortunes, or misfortunes, of their team.\n \u201cWe are copying automatically without realizing it,\u201d Santos said. \u201cThis is behavioral contagion in that it gets us in behavioral sync with someone else.\u201d\n Santos cited studies showing how other animals, including chimpanzees and dogs, also yawn in response to similar behavior by those in close proximity to them. In addition, she referred to a study in which chimps appeared to laugh in an automatic response to others.\n The cognitive mechanism implicated in behavioral copying may lead to a second phenomenon involving the transfer of information related to the emotional state of those around us. People may become bored after seeing others yawn during a long lecture or experience increased positive affect after the smiles of others motivate them to smile as well.\n \u201cThis is classical glitchy emotional contagion,\u201d said Santos. \u201cBy copying behaviors, we might be getting emotions for free.\u201d\n Santos attributes some of the emotional response to \u201cneural resonance,\u201d a process triggered when neural systems associated with the emotion in question becomes overworked. Santos indicated that humans share this process with other animals.\n  While the cognitive mechanisms or glitches associated with behavioral and emotional contagion exist in humans and other animals, a second mechanism is one that humans may claim as their own. This mechanism, according to Santos, facilitates the transfer or sharing of one\u2019s beliefs, perceptions, attitudes, and preferences. The work of this mechanism may spur \u201cmind-meld,\u201d a term Santos borrows from  Star Trek to describe the unrestricted exchange of thought from one individual to another.\n The cognitive mechanism connected to mind-meld, says Santos, can lead individuals to adopt the beliefs and attitudes of others or become confused about their own beliefs versus those of someone else.\n Santos said the mechanisms associated with the wholesale transfer or sharing of beliefs and attitudes is understudied in the field of psychology. One example of the process, she said, is captured by \u201caltercentric interference,\u201d where we confuse others\u2019 perspectives with our own. Similarly, \u201cbelief interference\u201d describes a process whereby people become confused about their beliefs and those of others. Why might these processes occur?\n At a neurological level, understanding another person\u2019s thoughts or beliefs requires individuals to inhibit the processing of their own thoughts or beliefs, Santos said. \u201cSometimes we mess up,\u201d Santos said. \u201cSometime the act of keeping these [thoughts] separate doesn\u2019t work \u2026 we just get the information confused.\u201d\n Citing findings from experiments she conducted involving monkeys and dogs, Santos said the process of mental contagion does not appear to exist in nonhumans. Santos indicated that this may be due to these animals not engaging in the simulation of others\u2019 mental content, as occurs with humans.\n  Apperly, I. A., &amp; Butterfill, S. A. (2009). Do humans have two systems to track beliefs and belief-like states?  Psychological Review, 116, 953\u2013970.\n Kov\u00e1cs, A. M., T\u00e9gl\u00e1s, E., &amp; Endress, A. D. (2010). The social sense: Susceptibility to others\u2019 beliefs in human infants and adults.  Science, 330, 1830\u20131834.\n Martin, A., &amp; Santos, L. R. (2014). The origins of belief representation: Monkeys fail to automatically represent others\u2019 beliefs.  Cognition, 130, 300\u2013308.\n  Observer  &gt;    2017  &gt;    July/August  &gt;   The Cognitive \u2018Glitch\u2019 of Humans: Laurie Santos on What Makes the Human Mind So Special", "posttime": "2020-05-04 23:14:17", "tags": "\u8ba4\u77e5,\u601d\u7ef4,\u4eba\u7c7b,glitch,\u4fe1\u4ef0", "title": "\u4eba\u7c7b\u7684\u8ba4\u77e5\u201c\u6545\u969c\u201d\uff1a\u6851\u6258\u65af\u5173\u4e8e\u662f\u4ec0\u4e48\u8ba9\u4eba\u7c7b\u601d\u7ef4\u5982\u6b64\u7279\u6b8a", "title_en": "The Cognitive \u2018Glitch\u2019 of Humans: Santos on What Makes the Human Mind So Special", "transed": 1, "url": "https://www.psychologicalscience.org/observer/the-cognitive-glitches-of-humans-laurie-santos-on-what-makes-the-human-mind-so-special", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u8ba4\u77e5", "\u601d\u7ef4", "\u4eba\u7c7b", "glitch", "\u4fe1\u4ef0"]}, {"category": "", "categoryclass": "", "imagename": "f16a216b80a40eb6b925fc99eb1ef28d.jpg", "infoid": 1000598, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u6211\u4e3a2020\u5e74\u6b27\u6d32Lisp\u7814\u8ba8\u4f1a\u6240\u505a\u7684\u6f14\u8bb2\u5f55\u97f3\uff0c\u4e0e\u4ee5\u4e0b\u7a0b\u5e8f\u6709\u5173\uff1ahttps://zenodo.org/record/3736363\u5e7b\u706f\u7247\u6b64\u5904\uff1ahttp://akrl.sdf.org/gccemacs_els2020.pdf\u5176\u5b83\u4fe1\u606f\uff1ahttp://akrl.sdf.org/gccemacs.html", "note_en": "This is the recording of the presentation I gave  for the European Lisp Symposium 2020 related to the proceeding below:\r\rhttps://zenodo.org/record/3736363\r\rSlides here:\r\rhttp://akrl.sdf.org/gccemacs_els2020.pdf\r\rOther info:\r\rhttp://akrl.sdf.org/gccemacs.html", "posttime": "2020-05-04 21:26:17", "tags": "emacs,mac,\u4ee3\u7801,gnu,https", "title": "\u5c06GNU Emacs\u5f15\u5165\u672c\u673a\u4ee3\u7801", "title_en": "Bringing GNU Emacs to native code", "transed": 1, "url": "https://toobnix.org/videos/watch/1f997b3c-00dc-4f7d-b2ce-74538c194fa7", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["emacs", "mac", "\u4ee3\u7801", "gnu", "https"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000597, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5047\u8bbe\u60a8\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u63d0\u793a\u7528\u6237\u8f93\u5165\u5bc6\u7801\u6216\u53e3\u4ee4\u77ed\u8bed\uff0c\u800cWindows\u662f\u5176\u4e2d\u4e00\u4e2a\u53d7\u652f\u6301\u7684\u5e73\u53f0(\u5373\u4f7f\u662f\u975e\u5e38\u65e7\u7684\u7248\u672c)\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528UTF-8\u4f5c\u4e3a\u5176\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u8fd9\u662f\u7406\u6240\u5f53\u7136\u7684\uff0c\u56e0\u6b64\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u4ece\u7528\u6237\u90a3\u91cc\u63a5\u6536\u7f16\u7801\u4e3aUTF-8\u7684\u5bc6\u7801\u3002\u5728\u5927\u591a\u6570\u5e73\u53f0\u4e0a\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u81ea\u52a8\u7684\u3002\u7136\u800c\uff0c\u5728Windows\u4e0a\u5bfb\u627e\u8fd9\u4e2a\u95ee\u9898\u7684\u6b63\u786e\u7b54\u6848\u662f\u4e00\u4e2a\u8ff7\u5bab\uff0c\u6240\u6709\u7684\u6807\u5fd7\u90fd\u901a\u5411\u6b7b\u80e1\u540c\u3002\u6211\u6700\u8fd1\u7a7f\u8fc7\u8fd9\u4e2a\u8ff7\u5bab\uff0c\u627e\u5230\u4e86\u51fa\u53e3\u3002\n\u6211\u77e5\u9053\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6211\u7684passphrase2pgp\u5de5\u5177\u4f7f\u7528\u4e86golang.org/x/crypto/ssh/Terminal\u5305\uff0c\u8fd9\u4f7f\u5b83\u8fd1\u4e4e\u5b8c\u7f8e\u3002\u5c3d\u7ba1\u4ed6\u4eec6\u4e2a\u6708\u524d\u8fd8\u5728\u4fee\u590d\u7ec6\u5fae\u7684\u9519\u8bef\u3002\n\u7b2c\u4e00\u6b65\u662f\u5ffd\u7565\u4f60\u5728\u7f51\u4e0a\u627e\u5230\u7684\u6240\u6709\u4e1c\u897f\uff0c\u56e0\u4e3a\u5b83\u8981\u4e48\u662f\u9519\u7684\uff0c\u8981\u4e48\u662f\u5728\u89e3\u51b3\u4e00\u4e2a\u7565\u6709\u4e0d\u540c\u7684\u95ee\u9898\u3002\u7a0d\u540e\u6211\u5c06\u8ba8\u8bba\u6b7b\u80e1\u540c\uff0c\u5e76\u9996\u5148\u5173\u6ce8\u89e3\u51b3\u65b9\u6848\u3002\u6700\u7ec8\uff0c\u6211\u5e0c\u671b\u5728Windows\u4e0a\u5b9e\u73b0\u6b64\u529f\u80fd\uff1a\n//\u663e\u793a\u63d0\u793a\uff0c\u7136\u540e\u8bfb\u53d6\u4ee5\u96f6\u7ed3\u5c3e\u7684UTF-8\u5bc6\u7801\u3002//\u5e26\u7ec8\u6b62\u7b26\u8fd4\u56de\u5bc6\u7801\u957f\u5ea6\uff0c\u9519\u8bef\u65f6\u8fd4\u56de\u96f6\u3002int read_password(char*buf\uff0cint len\uff0cconst char*Prompt)\uff1b\n\u6211\u9009\u62e9int\u4f5c\u4e3a\u957f\u5ea6\uff0c\u800c\u4e0d\u662fsize_t\uff0c\u56e0\u4e3a\u5b83\u662f\u5bc6\u7801\uff0c\u751a\u81f3\u4e0d\u5e94\u8be5\u63a5\u8fd1int_max\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u4f18\u70b9\u662f\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u6807\u51c6\u8f93\u5165\u548c\u6807\u51c6\u8f93\u51fa\u3002\u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u90fd\u53ef\u4ee5\u91cd\u5b9a\u5411\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u5e76\u4e14\u6b64\u529f\u80fd\u4ecd\u7136\u4e0e\u7528\u6237\u7684\u7ec8\u7aef\u4ea4\u4e92\u3002Windows\u7248\u672c\u4e5f\u5c06\u62e5\u6709\u540c\u6837\u7684\u4f18\u52bf\u3002\n\u5c3d\u7ba1\u6709\u4e00\u4e9b\u8bf1\u4eba\u7684\u5feb\u6377\u65b9\u5f0f\u4e0d\u8d77\u4f5c\u7528\uff0c\u4f46Windows\u4e0a\u7684\u6b65\u9aa4\u57fa\u672c\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u540d\u79f0\u4e0d\u540c\u3002\u6709\u4e24\u4e2a\u5b9e\u4f53\u548c\u989d\u5916\u7684\u6b65\u9aa4\u3002\u6211\u5c06\u5ffd\u7565\u4e0b\u9762\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684\u9519\u8bef\uff0c\u4f46\u662f\u5b8c\u6574\u7684\u793a\u4f8b\u6709\u5b8c\u6574\u7684\u9519\u8bef\u5904\u7406\u3002\n\u8be5\u7a0b\u5e8f\u4f7f\u7528CreateFileA()\u6253\u5f00\u4e24\u4e2a\u6587\u4ef6\uff0c\u800c\u4e0d\u662f/dev/tty\uff1aconin$\u548cCONOUT$\u3002\u6ce8\uff1a\u201cA\u201d\u4ee3\u8868ANSI\uff0c\u800c\u201cW\u201d\u4ee3\u8868\u5bbd(Unicode)\u3002\u8fd9\u6307\u7684\u662f\u6587\u4ef6\u540d\u7684\u7f16\u7801\uff0c\u800c\u4e0d\u662f\u6587\u4ef6\u5185\u5bb9\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u7531\u4e8e\u9700\u8981\u5199\u5165\u6743\u9650\u624d\u80fd\u66f4\u6539\u63a7\u5236\u53f0\u7684\u6a21\u5f0f\uff0c\u56e0\u6b64\u6253\u5f00\u4e86conin$\u4ee5\u4f9b\u8bfb\u53d6\u548c\u5199\u5165\u3002\nHandle hi=CreateFileA(&#34\uff1bConin$&#34\uff1b\uff0cGENERIC_READ|GENERIC_WRITE\uff0c0\uff0c0\uff0cOPEN_EXISTING\uff0c0\uff0c0)\uff1bHANDLE ho=CreateFileA(&#34\uff1bCONOUT$&#34\uff1b\uff0cGENERIC_WRITE\uff0c0\uff0c0\uff0cOPEN_EXISTING\uff0c0\uff0c0)\uff1b\n\u8981\u7f16\u5199\u63d0\u793a\u7b26\uff0c\u8bf7\u5728\u8f93\u51fa\u53e5\u67c4\u4e0a\u8c03\u7528WriteConsoleA()\u3002\u5c31\u5176\u672c\u8eab\u800c\u8a00\uff0c\u5b83\u5047\u5b9a\u63d0\u793a\u7b26\u662f\u7eafASCII(\u5373&#34\uff1b\u5bc6\u7801\uff1a&#34\uff1b)\uff0c\u800c\u4e0d\u662fUTF-8(\u5373&#34\uff1b\u5bf9\u6bd4\u5ea6\uff1a&#34\uff1b)\uff1a\n\u5982\u679c\u63d0\u793a\u7b26\u53ef\u80fd\u5305\u542bUTF-8\u6570\u636e(\u53ef\u80fd\u662f\u56e0\u4e3a\u5b83\u663e\u793a\u7684\u662fusername\u6216\u4e0d\u662f\u82f1\u8bed)\uff0c\u5219\u60a8\u6709\u4e24\u4e2a\u9009\u62e9\uff1a\n\u5c06SetConsoleOutputCP()\u4e0eCP_utf8(65001)\u4e00\u8d77\u4f7f\u7528\u3002\u8fd9\u662f\u5168\u5c40(\u5230\u63a7\u5236\u53f0)\u8bbe\u7f6e\uff0c\u5b8c\u6210\u540e\u5e94\u6062\u590d\u3002\n\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528GetConsoleMode()\u548cSetConsoleMode()\u7981\u7528\u56de\u663e\u3002\u63a7\u5236\u53f0\u901a\u5e38\u5df2\u7ecf\u8bbe\u7f6e\u4e86ENABLE_PROCESSED_INPUT\uff0c\u5b83\u544a\u8bc9\u63a7\u5236\u53f0\u5904\u7406CTRL-C\u7b49\uff0c\u4f46\u6211\u663e\u5f0f\u8bbe\u7f6e\u4e86\u5b83\u4ee5\u9632\u4e07\u4e00\u3002\u6211\u8fd8\u8bbe\u7f6e\u4e86ENABLINE_LINE_INPUT\uff0c\u8fd9\u6837\u7528\u6237\u5c31\u53ef\u4ee5\u4f7f\u7528\u9000\u683c\u952e\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u6b21\u53d1\u9001\u6574\u884c\u5185\u5bb9\u3002\n\u6709\u62a5\u544a\u79f0ENABLE_LINE_INPUT\u5c06\u8bfb\u53d6\u9650\u5236\u4e3a254\u5b57\u8282\uff0c\u4f46\u6211\u65e0\u6cd5\u91cd\u73b0\u5b83\u3002\u6211\u7684\u5b8c\u6574\u793a\u4f8b\u53ef\u4ee5\u6beb\u4e0d\u8d39\u529b\u5730\u9605\u8bfb\u5927\u91cf\u5bc6\u7801\u3002\n\u8fd9\u662f\u4f60\u5fc5\u987b\u4ed8\u94b1\u7ed9\u98ce\u7b1b\u624b\u7684\u5730\u65b9\u3002\u622a\u81f3\u672c\u6587\u65e5\u671f\uff0cWindows API\u8fd8\u6ca1\u6709\u63d0\u4f9b\u4ece\u63a7\u5236\u53f0\u8bfb\u53d6UTF-8\u8f93\u5165\u7684\u65b9\u6cd5\u3002\u73b0\u5728\u5c31\u653e\u5f03\u8fd9\u4e2a\u5e0c\u671b\u5427\u3002\u5982\u679c\u60a8\u5728\u4efb\u4f55\u914d\u7f6e\u4e0b\u4f7f\u7528\u201cANSI\u201d\u51fd\u6570\u6765\u8bfb\u53d6\u8f93\u5165\uff0c\u5b83\u4eec\u5c06\u4e0e\u901a\u5e38\u7684Windows\u4e00\u6837\u9ed8\u9ed8\u5730\u7834\u574f\u60a8\u7684\u8f93\u5165\u3002\n\u56e0\u6b64\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528UTF-16API ReadConsoleW()\uff0c\u7136\u540e\u81ea\u5df1\u7f16\u7801\u3002\u5e78\u8fd0\u7684\u662f\uff0cWin32\u63d0\u4f9b\u4e86\u4e00\u4e2aUTF-8\u7f16\u7801\u5668WideCharToMultiByte()\uff0c\u5b83\u751a\u81f3\u53ef\u4ee5\u4e3a\u6240\u6709\u559c\u6b22\u5728\u5bc6\u7801\u4e2d\u653e\u5165\u4e00\u5806\u4fbf\u4fbf(U+1F4A9)\u7684\u4eba\u5904\u7406\u4ee3\u7406\u9879\u5bf9\uff1a\nWCHAR*wbuf=malloc((len-1+2)*sizeof(*wbuf))\uff1bDWORD nREAD\uff1bReadConsoleW(hi\uff0cwbuf\uff0clen-1+2\uff0c&amp\uff1bnREAD\uff0c0)\uff1bwbuf[nREAD-2]=0\uff1b//\u622a\u65ad&#34\uff1b\\r\\n&#34\uff1bint r=WideCharToMultiByte(CP_UTF8\uff0c0\uff0cwbuf\u3002\n\u5206\u914d\u4e2d\u7684+2\u7528\u4e8e\u7a0d\u540e\u5c06\u88ab\u622a\u65ad\u7684CRLF\u7ebf\u8def\u672b\u5c3e\u3002\u9519\u8bef\u5904\u7406\u7248\u672c\u68c0\u67e5\u8f93\u5165\u662f\u5426\u786e\u5b9e\u4ee5CRLF\u7ed3\u5c3e\u3002\u5426\u5219\u5b83\u4f1a\u88ab\u622a\u65ad(\u592a\u957f)\u3002\n\u6700\u540e\uff0c\u7531\u4e8e\u6ca1\u6709\u56de\u663e\u7528\u6237\u952e\u5165\u7684\u6362\u884c\u7b26\uff0c\u56e0\u6b64\u6253\u5370\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u6062\u590d\u65e7\u7684\u63a7\u5236\u53f0\u6a21\u5f0f\uff0c\u5173\u95ed\u63a7\u5236\u53f0\u53e5\u67c4\uff0c\u5e76\u8fd4\u56de\u6700\u7ec8\u7f16\u7801\u7684\u957f\u5ea6\uff1a\n\u9519\u8bef\u68c0\u67e5\u7248\u672c\u4e0d\u68c0\u67e5\u6765\u81ea\u4efb\u4f55\u8fd9\u4e9b\u51fd\u6570\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u5b83\u4eec\u8981\u4e48\u4e0d\u4f1a\u5931\u8d25\uff0c\u8981\u4e48\u5728\u51fa\u73b0\u9519\u8bef\u65f6\u6ca1\u6709\u4efb\u4f55\u5408\u7406\u7684\u5904\u7406\u65b9\u6cd5\u3002\n\u5982\u679c\u60a8\u73af\u987e\u4e00\u4e0bWin32API\uff0c\u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230SetConsoleCP()\u3002\u5408\u7406\u7684\u4eba\u53ef\u80fd\u8ba4\u4e3a\u5c06\u201c\u4ee3\u7801\u9875\u201d\u8bbe\u7f6e\u4e3aUTF-8(CP_UTF8)\u53ef\u80fd\u4f1a\u5c06\u63a7\u5236\u53f0\u914d\u7f6e\u4e3a\u4ee5UTF-8\u7f16\u7801\u8f93\u5165\u3002\u597d\u6d88\u606f\u662fWindows\u5c06\u4e0d\u518d\u50cf\u4ee5\u524d\u90a3\u6837\u7834\u574f\u4f60\u7684\u8f93\u5165\u3002\u574f\u6d88\u606f\u662f\uff0c\u5b83\u5c06\u53d7\u5230\u4e0d\u540c\u7684\u7834\u574f\u3002\n\u60a8\u53ef\u80fd\u8ba4\u4e3a\u53ef\u4ee5\u5728\u8fde\u63a5\u5230\u63a7\u5236\u53f0\u7684\u6587\u4ef6*\u4e0a\u4f7f\u7528CRT\u51fd\u6570_setmode()\u548c_O_U8TEXT\u3002\u8fd9\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\u3002(_setmode()\u7684\u552f\u4e00\u7528\u6cd5\u662fWITH_O_BINARY\uff0c\u7528\u4e8e\u5728\u6807\u51c6\u8f93\u5165\u548c\u8f93\u51fa\u4e0a\u7981\u7528braindead\u5b57\u7b26\u8f6c\u6362\u3002)\u3002\u5bf9\u4e8eCRT\uff0c\u60a8\u80fd\u505a\u7684\u6700\u597d\u7684\u4e8b\u60c5\u5c31\u662f\u4f7f\u7528\u975e\u6807\u51c6\u51fd\u6570\u8bfb\u53d6\u76f8\u540c\u7c7b\u578b\u7684\u5bbd\u5b57\u7b26\uff0c\u7136\u540e\u8f6c\u6362\u4e3aUTF-8\u3002\nCredUICmdLinePromptForCredentials()\u627f\u8bfa\u65e2\u6709\u8db3\u591f\u7684\u51fd\u6570\u540d\uff0c\u53c8\u6709\u8fd9\u4e2a\u95ee\u9898\u7684\u9884\u5148\u6253\u5305\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u53ea\u5728\u7b2c\u4e00\u4e2a\u51fd\u6570\u4e0a\u63d0\u4f9b\u3002\u8fd9\u9879\u529f\u80fd\u4f3c\u4e4e\u5728\u4e00\u6bb5\u65f6\u95f4\u524d\u5c31\u5931\u6548\u4e86\uff0c\u5fae\u8f6f\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9--\u53ef\u80fd\u662f\u56e0\u4e3a\u4ece\u6765\u6ca1\u6709\u4eba\u4f7f\u7528\u8fc7\u8fd9\u9879\u529f\u80fd\u3002\u6211\u627e\u4e0d\u5230\u53ef\u7528\u7684\u793a\u4f8b\uff0c\u4e5f\u627e\u4e0d\u5230\u5728\u4efb\u4f55\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u793a\u4f8b\u3002\u5f53\u6211\u8bd5\u56fe\u4f7f\u7528\u5b83\u7684\u65f6\u5019\uff0c\u6211\u5f97\u5230\u4e86\u4e00\u4e2a\u65e0\u7a3d\u4e4b\u8c08\u7684\u9519\u8bef\u4ee3\u7801\uff0c\u5b83\u4ece\u6765\u6ca1\u6709\u8d77\u4f5c\u7528\u3002\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u53ef\u4ee5\u5de5\u4f5c\u7684GUI\u7248\u672c\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u60c5\u51b5\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u5c3d\u7ba1\u6211\u7684\u60c5\u51b5\u4e0d\u662f\u8fd9\u6837\u3002\n\u5728\u6211\u6700\u7edd\u671b\u7684\u65f6\u5019\uff0c\u6211\u5e0c\u671b\u542f\u7528\u865a\u62df\u7ec8\u7aef\u5904\u7406\u4f1a\u662f\u4e00\u4e2a\u795e\u5947\u7684\u5f00\u5173\u3002\u5728Windows10\u4e0a\uff0c\u5b83\u795e\u5947\u5730\u542f\u7528\u4e86\u4e00\u4e9bANSI\u8f6c\u4e49\u5e8f\u5217\u3002\u6587\u6863\u6ca1\u6709\u4ee5\u4efb\u4f55\u65b9\u5f0f\u6697\u793a\u5b83\u4f1a\u8d77\u4f5c\u7528\uff0c\u6211\u901a\u8fc7\u5b9e\u9a8c\u8bc1\u5b9e\u5b83\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\u53ef\u601c\u3002\n\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5bfb\u627e\u8fd9\u4e9b\u6b7b\u80e1\u540c\uff0c\u76f4\u5230\u6700\u7ec8\u4f7f\u7528\u4e0a\u9762\u7684ReadConsoleW()\u89e3\u51b3\u4e86\u95ee\u9898\u3002\u6211\u5e0c\u671b\u5b83\u80fd\u66f4\u81ea\u52a8\u5316\uff0c\u4f46\u6211\u5f88\u9ad8\u5174\u6211\u81f3\u5c11\u60f3\u51fa\u4e86\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u3002\n\u5bf9\u8fd9\u7bc7\u6587\u7ae0\u6709\u4ec0\u4e48\u8bc4\u8bba\u5417\uff1f\u901a\u8fc7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3~Skeeto/public-inbox@lists.sr.ht[\u90ae\u4ef6\u5217\u8868\u793c\u4eea]\u5f00\u59cb\u6211\u7684\u516c\u5171\u6536\u4ef6\u7bb1\u4e2d\u7684\u8ba8\u8bba\uff0c\u6216\u67e5\u770b\u73b0\u6709\u8ba8\u8bba\u3002", "note_en": "Suppose you\u2019re writing a command line program that  prompts the user fora password or passphrase, and Windows is one of the supportedplatforms ( even very old versions). This program uses  UTF-8for its string representation,  as it should, and soideally it receives the password from the user encoded as UTF-8. On mostplatforms this is, for the most part, automatic. However, on Windowsfinding the correct answer to this problem is a maze where all the signslead towards dead ends. I recently navigated this maze and found the wayout.\n I knew it was possible because  my passphrase2pgp tool has beenusing the  golang.org/x/crypto/ssh/terminal package, which gets itvery nearly perfect. Though they were still fixing subtle bugs  asrecently as 6 months ago.\n The first step is to ignore just everything you find online, becauseit\u2019s either wrong or it\u2019s solving a slightly different problem. I\u2019lldiscuss the dead ends later and focus on the solution first. UltimatelyI want to implement this on Windows:\n // Display prompt then read zero-terminated, UTF-8 password. // Return password length with terminator, or zero on error. int  read_password ( char  * buf ,  int  len ,  const  char  * prompt );\n I chose  int for the length rather than  size_t because it\u2019s apassword and should not even approach  INT_MAX.\n     A great advantage of this approach is that it doesn\u2019t depend on standardinput and standard output. Either or both can be redirected elsewhere,and this function still interacts with the user\u2019s terminal. The Windowsversion will have the same advantage.\n Despite some tempting shortcuts that don\u2019t work, the steps on Windowsare basically the same but with different names. There are a couplesubtleties and extra steps. I\u2019ll be ignoring errors in my code snippetsbelow, but the complete example has full error handling.\n  Instead of  /dev/tty, the program opens two files:  CONIN$ and CONOUT$ using   CreateFileA(). Note: The \u201cA\u201d stands for ANSI,as opposed to \u201cW\u201d for wide (Unicode). This refers to the encoding of thefile name, not to how the file contents are encoded.  CONIN$ is openedfor both reading and writing because write permissions are needed tochange the console\u2019s mode.\n HANDLE  hi  =  CreateFileA (  &#34;CONIN$&#34; ,  GENERIC_READ  |  GENERIC_WRITE ,  0 ,  0 ,  OPEN_EXISTING ,  0 ,  0 ); HANDLE  ho  =  CreateFileA (  &#34;CONOUT$&#34; ,  GENERIC_WRITE ,  0 ,  0 ,  OPEN_EXISTING ,  0 ,  0 );\n  To write the prompt, call   WriteConsoleA() on the output handle.On its own, this assumes the prompt is plain ASCII (i.e.  &#34;password:&#34;), not UTF-8 (i.e.  &#34;contrase\u00f1a: &#34;):\n  If the prompt may contain UTF-8 data, perhaps because it displays ausername or isn\u2019t in English, you have two options:\n Use  SetConsoleOutputCP() with  CP_UTF8 (65001). This is a global(to the console) setting and should be restored when done.\n  Next use   GetConsoleMode() and   SetConsoleMode() todisable echo. The console usually has  ENABLE_PROCESSED_INPUT alreadyset, which tells the console to handle CTRL-C and such, but I set itexplicitly just in case. I also set  ENABLE_LINE_INPUT so that the usercan use backspace and so that the entire line is delivered at once.\n  There are reports that  ENABLE_LINE_INPUT limits reads to 254 bytes,but I was unable to reproduce it. My full example can read hugepasswords without trouble.\n   Here\u2019s where you have to pay the piper. As of the date of this article, the Windows API offers no method for reading UTF-8 input from theconsole. Give up on that hope now. If you use the \u201cANSI\u201d functions toread input under any configuration, they will to the usual Windows thingof  silently mangling your input.\n So you  must use the UTF-16 API,   ReadConsoleW(), and then encode it yourself. Fortunately Win32 provides a UTF-8 encoder,  WideCharToMultiByte(), which will even handle surrogate pairsfor all those people who like putting  PILE OF POO ( U+1F4A9) in theirpasswords:\n WCHAR  * wbuf  =  malloc (( len  -  1  +  2 ) * sizeof ( * wbuf )); DWORD  nread ; ReadConsoleW ( hi ,  wbuf ,  len  -  1  +  2 ,  &amp; nread ,  0 ); wbuf [ nread - 2 ]  =  0 ;  // truncate &#34;\\r\\n&#34; int  r  =  WideCharToMultiByte ( CP_UTF8 ,  0 ,  wbuf ,  - 1 ,  buf ,  len ,  0 ,  0 ); free ( wbuf );\n The  + 2 in the allocation is for the CRLF line ending that will laterbe chopped off. The error handling version checks that the input didindeed end with CRLF. Otherwise it was truncated (too long).\n  Finally print a newline since the user-typed one wasn\u2019t echoed, restorethe old console mode, close the console handles, and return the finalencoded length:\n  The error checking version doesn\u2019t check for errors from any of thesefunctions since either they cannot fail, or there\u2019s nothing reasonableto do in the event of an error.\n  If you look around the Win32 API you might notice  SetConsoleCP(). Areasonable person might think that setting the \u201ccode page\u201d to UTF-8( CP_UTF8) might configure the console to encode input in UTF-8. Thegood news is Windows will no longer mangle your input as before. The badnews is that it will be mangled differently.\n You might think you can use the CRT function  _setmode() with _O_U8TEXT on the  FILE * connected to the console. This does nothinguseful. (The only use for  _setmode() is with  _O_BINARY, to disablebraindead character translation on standard input and output.) The bestyou\u2019ll be able to do with the CRT is the same sort of wide characterread using non-standard functions, followed by conversion to UTF-8.\n CredUICmdLinePromptForCredentials() promises to be both amouthful of a function name, and a prepacked solution to this problem.It only delivers on the first. This function seems to have broken sometime ago and nobody at Microsoft noticed \u2014 probably because  nobody hasever used this function. I couldn\u2019t find a working example, nor a usein any real application. When I tried to use it, I got a nonsense errorcode it never worked. There\u2019s a GUI version of this function that  doeswork, and it\u2019s a viable alternative for certain situations, though notmine.\n At my most desperate, I hoped  ENABLE_VIRTUAL_TERMINAL_PROCESSING wouldbe a magical switch. On Windows 10 it magically enables some ANSI escapesequences. The documentation in no way suggests it  would work, and Iconfirmed by experimentation that it does not. Pity.\n I spent a lot of time searching down these dead ends until finallysettling with  ReadConsoleW() above. I hoped it would be moreautomatic, but I\u2019m glad I have at least  some solution figured out.\n      Have a comment on this article? Start a discussion in my  public inbox by sending an email to   ~skeeto/public-inbox@lists.sr.ht    [ mailing list etiquette] , or see  existing discussions.", "posttime": "2020-05-04 21:26:04", "tags": "\u5bc6\u7801,windows,utf-8,utf,input", "title": "\u5982\u4f55\u5728Windows\u63a7\u5236\u53f0\u4e0a\u8bfb\u53d6UTF-8\u5bc6\u7801", "title_en": "How to Read UTF-8 Passwords on the Windows Console", "transed": 1, "url": "https://nullprogram.com/blog/2020/05/04/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5bc6\u7801", "windows", "utf-8", "utf", "input"]}]