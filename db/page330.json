[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1002470, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e4b\u524d\u5199\u8fc7\u5982\u4f55\u914d\u7f6eMinicom\u4ee5\u901a\u8fc7\u4e32\u884cUART\u8fde\u63a5\u5230\u8bbe\u5907\u3002\u5728\u90a3\u7bc7\u5e16\u5b50\u4e2d\uff0c\u6211\u63d0\u5230Minicom\u53ef\u80fd\u4e0d\u662f\u8fd9\u9879\u5de5\u4f5c\u7684\u6700\u4f73\u5de5\u5177\u3002\u8003\u8651\u5230Minicom\u6b63\u5728\u589e\u52a0\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\u3002\u5982\u679c\u60a8\u60f3\u4e00\u60f3\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u7528\u4e8e\u4e0e\u8c03\u5236\u89e3\u8c03\u5668\u901a\u4fe1\u7684\u547d\u4ee4\u884c\u5b9e\u7528\u7a0b\u5e8f\uff0c\u53bb\u6389\u4e86\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ea\u5269\u4e0b\u4e00\u4e2a\u77e5\u9053\u5982\u4f55\u8fde\u63a5\u5230\u5916\u6765TTY\u7684\u7ec8\u7aef\u4eff\u771f\u5668\u4e86\u3002\u7136\u800c\uff0c\u6211\u4eec\u53ef\u80fd\u662f\u5728\u4e00\u4e2a\u529f\u80fd\u5b8c\u5584\u7684\u7ec8\u7aef\u4eff\u771f\u5668(\u5982xterm)\u4e0a\u8fd0\u884cMinicom\u3002\u6211\u4eec\u6240\u9700\u8981\u7684\u53ea\u662f\u4e00\u79cd\u5728RAW\u6a21\u5f0f\u4e0b\u5c06\u7ec8\u7aef\u4eff\u771f\u5668\u8fde\u63a5\u5230\u76ee\u6807\u4e32\u884c\u7aef\u53e3\u7684\u65b9\u6cd5\u3002\u53ea\u8981\u8bbe\u5907\u7aef\u5728\u63a5\u6536\u7aef\u8fd0\u884c\u767b\u5f55\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u5730\u8ba9\u6211\u4eec\u7684\u7ec8\u7aef\u4eff\u771f\u5668\u6267\u884c\u5176\u8bbe\u8ba1\u76ee\u7684\u3002\n\u4f7f\u7528Socket CAT(\u53c2\u89c1Socket(1))\uff0c\u6211\u4eec\u53ef\u4ee5\u5728RAW\u6a21\u5f0f\u4e0b\u5c06\u4e32\u884c\u7aef\u53e3\u8fde\u63a5\u5230\u7ec8\u7aef\u4eff\u771f\u5668\u3002\nSocket Cat\u5728\u7ed9\u5b9a\u5730\u5740\u89c4\u8303\u7684\u60c5\u51b5\u4e0b\u4e2d\u7ee7\u4e24\u4e2a\u53cc\u5411\u5b57\u8282\u6d41\u3002\u5730\u5740\u89c4\u8303\u7684\u987a\u5e8f\u65e0\u5173\u7d27\u8981\u3002\u4ee5\u4e0b\u547d\u4ee4\u7b49\u6548\uff1a\n\u5f00\u5934\u7684\u8fde\u5b57\u7b26\u5b9e\u9645\u4e0a\u662f\u5730\u5740\u7c7b\u578bstdio\u7684\u522b\u540d\u3002\u67d0\u4e9b\u5730\u5740\u7c7b\u578b\u91c7\u7528\u7531\uff1a\u5206\u9694\u7684\u53c2\u6570\u3002\u540e\u9762\u7684\u9017\u53f7\u5206\u9694\u5217\u8868\u662f\u5730\u5740\u9009\u9879\u3002\u5730\u5740\u9009\u9879\u5728\u9009\u9879\u7ec4\u4e2d\u5b9a\u4e49\u3002STDIO\u63a5\u53d7\u6765\u81eaFD\u3001TERMIOS\u3001REG\u3001Socket\u9009\u9879\u7ec4\u7684\u9009\u9879\u3002RAWER\u5730\u5740\u9009\u9879\u5728TERMIOS\u9009\u9879\u7ec4\u4e2d\u5b9a\u4e49\u3002\u5b83\u5728RAW\u6a21\u5f0f\u4e0b\u521d\u59cb\u5316\u7ebf\u8def\u89c4\u7a0b\uff0c\u5e76\u9690\u5f0f\u5173\u95ed\u56de\u663e\u3002\n\u6709\u4e00\u6761\u89c4\u5219\u662f\uff0c\u5982\u679c\u5728\u5730\u5740\u89c4\u8303\u7684\u7b2c\u4e00\u4e2a\u5192\u53f7\u6216\u9017\u53f7\u4e4b\u524d\u627e\u5230\u6b63\u659c\u6760\uff0c\u5219\u5730\u5740\u7c7b\u578b\u9690\u5f0f\u9ed8\u8ba4\u4e3aGOPEN(\u901a\u7528\u6587\u4ef6\u6253\u5f00)\uff0c\u5e76\u63a5\u53d7(FD\u3001REG\u3001SOCKET\u3001NAMED\u548cOPEN)\u9009\u9879\u7ec4\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c/dev/ttyUSB0\u662fGopen\u7684\u5730\u5740\u53c2\u6570\u3002\u4e4b\u540e\uff0c\u5730\u5740\u9009\u9879\u5217\u8868\u5f00\u59cb\u3002\u7b2c\u4e00\u4e2a\u5730\u5740\u9009\u9879b115200/\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a115200\u3002\u6211\u4eec\u5df2\u7ecf\u719f\u6089\u7684\u7b2c\u4e8c\u4e2a\u5730\u5740\u9009\u9879\u4f1a\u5bfc\u81f4/dev/ttyUSB0/\u5728RAW\u6a21\u5f0f\u4e0b\u521d\u59cb\u5316\uff0c\u5e76\u9690\u5f0f\u5173\u95edECHO\u3002\n\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48RAWER\u662f\u6709\u6548\u7684\u9009\u9879\uff0c\u56e0\u4e3a\u5b83\u662f\u5728TERMIOS\u9009\u9879\u7ec4\u4e2d\u5b9a\u4e49\u7684\uff0c\u800cTERMIOS\u6ca1\u6709\u88ab\u5217\u4e3aGOPEN\u53ef\u7528\u7684\u9009\u9879\u7ec4\u4e4b\u4e00\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6ce2\u7279\u7387\u9009\u9879\u4e5f\u6765\u81eaTERMIOS\u3002\u5957\u63a5\u5b57CAT\u901a\u8fc7\u4f7fTERMIOS\u9009\u9879\u7ec4\u53ef\u7528\u6765\u4e3a\u5728TTY\u4e0a\u5de5\u4f5c\u7684\u5730\u5740\u63d0\u4f9b\u4f8b\u5916\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u907f\u514d\u522b\u540d\u548c\u9690\u5f0f\u5730\u5740\u7c7b\u578b\uff0c\u5219\u4ee5\u4e0b\u547d\u4ee4\u7b49\u6548\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4fdd\u7559\u5957\u63a5\u5b57CAT\u4e2d\u7ee7\u4e32\u884c\u8fde\u63a5\u3002\u60a8\u53ef\u4ee5\u5c1d\u8bd5^C\uff0c\u8fd9\u662f\u4e2d\u65ad\u524d\u53f0\u4f5c\u4e1a\u7684\u9ed8\u8ba4\u65b9\u5f0f\u3002\u4f46\u662f\uff0c\u8be5\u5b57\u8282\u4e0d\u4f1a\u88ab\u5ba2\u6237\u7aef\u7684\u7ec8\u7aef\u4eff\u771f\u89e3\u91ca\uff0c\u800c\u662f\u901a\u8fc7\u4e2d\u65ad\u8bbe\u5907\u7aef\u7684\u524d\u53f0\u8fdb\u7a0b\u6765\u4f20\u9012\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6240\u9700\u7684\u884c\u4e3a\u3002\u5957\u63a5\u5b57CAT\u624b\u518c\u9875(\u8bf7\u53c2\u89c1Socat(1))\u5efa\u8bae\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u9009\u9879\u7ec4\u4e2d\u7684\u8f6c\u4e49\u5730\u5740\u9009\u9879\u3002ESCAPE\u9009\u9879\u63a5\u53d7\u6807\u8bc6\u67d0\u4e2a\u952e\u7684keysym\u5341\u516d\u8fdb\u5236\u4ee3\u7801\uff0c\u5f53\u6309\u4e0b\u8be5\u952e\u65f6\uff0c\u5c06\u5411\u8f93\u5165\u6d41\u53d1\u9001EOF\uff0c\u4ece\u800c\u7ed3\u675f\u4e2d\u7ee7\u3002\n\u75310x0f\u6807\u8bc6\u7684\u5bc6\u94a5\u662fC-O\u3002\u8981\u83b7\u5f97loadkey(1)\u5df2\u77e5\u7684\u952e\u7b26\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u8fd0\u884cdumpkey-l\u3002\u5982\u679c\u60a8\u66fe\u7ecf\u5fd8\u8bb0\u5305\u62ec\u9000\u51fa\u9009\u9879\uff0c\u90a3\u4e48\u60a8\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7ed9\u5b9aPID(\u8fdb\u7a0bID)\u901a\u8fc7KILL(1)\u53d1\u9001SIGINT(\u53c2\u89c1\u4fe1\u53f7(7))\u6765\u4ece\u53e6\u4e00\u4e2a\u7ec8\u7aef\u4e2d\u65ad\u5957\u63a5\u5b57\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528pidof(1)\u83b7\u5f97PID\u3002\n\u5728\u4e00\u4e2a\u7ec8\u7aef\u4e0a\u8fd0\u884cSocat\u7684\u60c5\u51b5\u4e0b\uff0c\u6253\u5f00\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u5e76\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5411SIGINT\u53d1\u9001Socat\u4fe1\u53f7\u3002\n\u6211\u60f3\u786e\u8ba4\u4e00\u4e0b\uff0c\u4f7f\u7528Socat\u4f5c\u4e3a\u4e32\u884c\u5b57\u8282\u6d41\u548cStdio\u5b57\u8282\u6d41\u4e4b\u95f4\u7684\u7c98\u5408\u5242\uff0c\u5b9e\u9645\u4e0a\u5c06\u5141\u8bb8\u6211\u8fd0\u884cncurses\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u4f1a\u635f\u574f\u663e\u793a\u3002\u4e3a\u4e86\u6d4b\u8bd5\u8fd9\u4e00\u70b9\uff0c\u6211\u5c06\u6211\u7684PinePhone\u8fde\u63a5\u5230/dev/ttyUSB0\uff0c\u6253\u5f00\u4e00\u4e2axterm\u4f1a\u8bdd\uff0c\u7136\u540e\u8fd0\u884c\u524d\u9762\u63d0\u5230\u7684socket\u547d\u4ee4\u3002\n\u7531\u4e8e\u6211\u7684PinePhone\u5728\u8fde\u63a5\u65f6\u5df2\u7ecf\u542f\u52a8\uff0c\u6240\u4ee5\u6ca1\u6709\u767b\u5f55\u63d0\u793a\u7b26\u7b49\u5f85\u95ee\u5019\u6211\u3002\u6211\u53ea\u9700\u5728\u7a7a\u767d\u5904\u952e\u5165\u6211\u7684\u7528\u6237\u540d\uff0c\u7136\u540e\u70b9\u51fb&lt\uff1bret&gt\uff1b\u3002\u6b64\u65f6\uff0c\u5bc6\u7801\u63d0\u793a\u663e\u793a\u4e3a\u7531\u5957\u63a5\u5b57CAT\u63a5\u6536\u7684\u5b57\u8282\uff0c\u5e76\u901a\u8fc7\u6211\u7684xterm\u4f1a\u8bdd\u7684\u6807\u51c6\u8f93\u51fa\u8fdb\u884c\u4e2d\u7ee7\u3002\u5728\u6211\u6210\u529f\u767b\u5f55\u5230\u6211\u7684shell\u5e10\u6237\u4e4b\u540e\uff0c\u6211\u8fd0\u884c\u4e86nmtui\uff0c\u5b83\u663e\u793a\u5728\u6211\u7684\u5c4f\u5e55\u4e0a\uff0c\u6ca1\u6709\u4efb\u4f55\u4e0d\u9700\u8981\u7684\u4e1c\u897f\u3002\n\u6211\u7684PinePhone\u8fd0\u884c\u7684\u662fpostmarket OS\uff0c\u767b\u5f55shell\u4e3aash\u3002\u6211\u5c06PinePhone\u7684\u4e32\u884c\u7aef\u53e3\u914d\u7f6e\u4e3a\u4f7f\u7528Linux\u7ec8\u7aef\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u8fd0\u884c\u5f69\u8272\u663e\u793a\u5668\u3002\n\u6211\u4f7f\u7528Minicom\u901a\u8fc7\u4e32\u884c\u8fde\u63a5\u6211\u7684PinePhone\u7684\u52a8\u673a\u662f\u56e0\u4e3a\u6211\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u7528\u5b83\u6765\u914d\u7f6ePinePhone\u7684\u8c03\u5236\u89e3\u8c03\u5668\u3002\u6211\u60f3\u4f7f\u7528\u8fd9\u4e00\u4e2a\u5de5\u5177\u8fde\u63a5\u5230PinePhone\u5e76\u914d\u7f6e\u8c03\u5236\u89e3\u8c03\u5668\u4f1a\u5f88\u65b9\u4fbf\u3002\u4f46\u662f\uff0cSocket cat\u4f7f\u5f97\u901a\u8fc7\u4e32\u884cUART\u8fdb\u884c\u8fde\u63a5\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u9664\u975e\u60a8\u6709\u5f88\u597d\u7684\u7406\u7531\u4f7f\u7528\u5176\u4ed6\u4e1c\u897f\uff0c\u5426\u5219\u6211\u8ba4\u4e3a\u60a8\u5e94\u8be5\u8003\u8651\u8ba9Socket CAT\u6210\u4e3a\u60a8\u7684\u9ed8\u8ba4\u7c98\u5408\u5242\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u53d1\u5e03\u5173\u4e8e\u4f7f\u7528\u7b49\u79bb\u5b50\u79fb\u52a8\u8bbe\u5907\u8bbe\u7f6e\u552e\u540e\u5e02\u573a\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u53ca\u4e3a\u6211\u7684SIM\u5361\u624b\u52a8\u914d\u7f6eOfono\u7684\u4fe1\u606f\u3002", "note_en": "I previously wrote  how to configure minicom to connect to a device over serial UART. In that post I mentioned that  minicom might not be the best tool for the job. Consider that  minicom is adding a lot of unnecessary complexity. If you think about it, we are taking a command line utility intended for communicating with modems, stripping all that functionality away so that we are left with nothing more than a terminal emulator that knows how to connect to a foreign  TTY. Yet, we are probably running  minicom from a perfectly capable terminal emulator such as  xterm. All we need is a way of connecting our terminal emulator to the target serial port in raw mode. As long as the device side is running a login on the receiving end, we can simply let our terminal emulator do what it was designed for.\n  With SOcket CAT (see  socat(1)) we can connect a serial port to a terminal emulator in raw mode.\n  SOcket Cat relays two bidirectional byte streams given their  address specifications. The order of the address specifications is irrelevant. The following command is equivalent:\n    The hyphen at the beginning is actually an alias for the address type  STDIO. Some address types take  parameters delimited by a  :. The comma separated list that follows are the address  options. Address options are defined in  option groups.  STDIO accepts options from the  FD, TERMIOS, REG, SOCKET option groups. The  rawer address option is defined in the  TERMIOS option group. It initializes the line discipline in raw mode and implicitly turns off  echo.\n   There is a rule that if a forward slash is found before the first colon or comma of an address specification, then the address type implicitly defaults to  GOPEN (Generic file Open) and accepts the (FD, REG, SOCKET, NAMED and OPEN) option groups. In other words,  /dev/ttyUSB0 is an address parameter to  GOPEN. After that the address option list begins. The first address option,  b115200/, sets the  baud rate to 115200. The second address option, which we are already familiar with, causes the  /dev/ttyUSB0/ to be initialized in raw mode and implicitly turns off  echo.\n You might be wondering how  rawer is a valid option since it is defined in the TERMIOS option group and TERMIOS was not listed as one of the option groups available to  GOPEN. In fact, the  baud rate option is also from TERMIOS. SOcket CAT makes an exception for addresses that work on a  TTY by making the  TERMIOS option group available.\n If you prefer to avoid aliases and implicit address types, then the following command is equivalent.\n   At some point you will want to leave your SOcket CAT relayed serial connection. You might try  ^C which is the default way to interrupt the foreground job. However, the byte will not be interpreted by terminal emulation on the client side, but instead will be passed through interrupting the foreground process on the device side. There are many ways to achieve the desired behaviour. The SOcket CAT man page (see  socat(1)) recommends using the  escape address option from the  APPLICATION option group. The  escape option accepts a keysym hex code identifying a key that, when pressed, will send an  EOF to the input stream thus ending the relay.\n  The key identified by  0x0f is  C-o. To get a complete list of keysyms known by  loadkeys(1) run  dumpkeys -l. If you ever forget to include the escape option, then you can still interrupt  socket from another terminal by sending  SIGINT (see  signal(7)) via  kill(1) given the  pid (Process ID). You can get the pid using  pidof(1).\n With  socat running in one terminal, open a second terminal and run the following command to signal  socat with  SIGINT.\n   I wanted to confirm that using  socat as the glue between serial and  STDIO byte streams would in fact allow me to run ncurses applications without garbling the display. To test this out, I connected my PinePhone to  /dev/ttyUSB0, opened an  xterm session and then ran the aforementioned  socat command.\n  Since my PinePhone was already booted at the time of connection, there was no login prompt waiting to greet me. I simply typed my username into the blank space and hit  &lt;RET&gt;. At that point the password prompt was displayed as bytes were received by SOcket CAT and relayed through standard output of my  xterm session. After I successfully signed into my shell account, I ran  nmtui and it displayed on my screen without any undesirable artifacts.\n  My PinePhone is running postmarketOS with  ash as the login shell. I configured the serial port of the PinePhone to use  linux  terminfo so that I can run colour displays.\n  My motivation to use  minicom to connect with my PinePhone over serial was stemed by the fact that I was using it anyway to configure the PinePhone\u2019s modem. I thought that it would be convenient to use this one tool to connect to the PinePhone and configure the modem. However,  SOcket CAT makes it so easy to connect over serial UART that unless you have a good reason to use something else, I think you should consider letting SOcket CAT be your default glue.\n Next I will be posting about setting up  postmarketOS with  Plasma Mobile and manually configuring  oFono for my SIM.", "posttime": "2020-05-17 08:14:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e32\u53e3,cat,\u8fd0\u884c", "title": "\u8ba9\u63d2\u5ea7\u732b\u6210\u4e3a\u4f60\u7684\u4e32\u53e3\u7c98\u5408\u5242", "title_en": "Let SOcket CAT Be Thy Glue over Serial", "transed": 1, "url": "https://bloggerbust.ca/post/let-socket-cat-be-thy-glue-over-serial/", "via": "", "real_tags": ["\u4e32\u53e3", "cat", "\u8fd0\u884c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002469, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4e00\u53e5\u8457\u540d\u7684\u745c\u4f3d\u58eb\u00b7\u8d1d\u62c9\u7684\u540d\u8a00\u662f\u8fd9\u6837\u8bf4\u7684\uff1a\u6211\u7684\u8eab\u4f53\u72b6\u51b5\u5f88\u4e25\u91cd\u3002\u6211\u4e0d\u50cf\u4ee5\u524d\u90a3\u6837\u7ecf\u5e38\u4f7f\u7528\u5b83\u7684\u771f\u5b9e\u540d\u79f0\u4e86\u3002\u5f53\u6211\u8bf4\u51fa\u540d\u5b57\u65f6\uff0c\u4eba\u4eec\u7684\u53cd\u5e94\u4f1a\u5f88\u5947\u602a\uff1b\u5f53\u6211\u4e0d\u8bf4\u7684\u65f6\u5019\uff0c\u4eba\u4eec\u53c8\u4f1a\u8868\u73b0\u5f97\u597d\u50cf\u6211\u5728\u4fdd\u5b88\u79d8\u5bc6\u6216\u4ec0\u4e48\u3002\u4f46\u662f\uff0c\u603b\u4f53\u6765\u8bf4\uff0c\u793c\u8c8c\u5730\u5927\u58f0\u75be\u547c\u8bf4\u81ea\u5df1\u6709\u547c\u5438\u7cfb\u7edf\u95ee\u9898\uff0c\u6216\u8005\u58f0\u79f0\u81ea\u5df1\u5bf9\u7eb8\u5f20\u8fc7\u654f--\u6211\u8ba4\u4e3a\u81ea\u5df1\u5e76\u4e0d\u662f\u771f\u7684\u8fc7\u654f--\u6bd4\u8d77\u8bf4\u51fa\u6211\u7684\u75c5\u60c5\u7684\u771f\u5b9e\u540d\u79f0\u8981\u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u4eba\u4eec\u4e0d\u7406\u89e3\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u6b64\u505a\u51fa\u5f3a\u70c8\u53cd\u5e94\u3002\u4ec5\u4ec5\u7ed9\u5b83\u8d77\u4e2a\u540d\u5b57\u5c31\u4f1a\u8ba9\u4eba\u89c9\u5f97\u6211\u662f\u67d0\u79cd\u620f\u5267\u6027\u7684\u5973\u738b\u3002\u6211\u4e0d\u662f\uff0c\u6240\u4ee5\u6211\u57fa\u672c\u4e0a\u4e0d\u518d\u4f7f\u7528\u8fd9\u4e2a\u540d\u5b57\uff0c\u53ef\u80fd\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4ee5\u771f\u76f8\u4e3a\u4ee3\u4ef7\u7684\uff0c\u4f46\u8fd9\u5728\u793e\u4f1a\u4e0a\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u80dc\u5229\u3002\u6240\u4ee5\u6211\u82b1\u4e86\u5f88\u591a\u5e74\u7684\u65f6\u95f4\u6765\u5c1d\u8bd5\u56f4\u7ed5\u7ec6\u83cc\u63a7\u5236\u6765\u5b89\u6392\u6211\u7684\u751f\u6d3b\u3002\u5728\u5176\u4ed6\u4e8b\u60c5\u4e2d\uff0c\u6211\u505a\u8fdc\u7a0b\u5de5\u4f5c--\u5305\u62ec\u5199\u535a\u5ba2--\u4ee5\u907f\u514d\u4e0d\u5f97\u4e0d\u5f97\u5230\u4e00\u4efd\u771f\u6b63\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u771f\u6b63\u7684\u5de5\u4f5c\u5bf9\u6211\u7684\u5065\u5eb7\u90fd\u662f\u6709\u5bb3\u7684\u3002\u8003\u8651\u5230\u6211\u548c\u6211\u7684\u5927\u513f\u5b50\u6709\u76f8\u540c\u7684\u8bca\u65ad--\u9057\u4f20\u75be\u75c5\u5f80\u5f80\u662f\u8fd9\u6837\u5728\u5bb6\u65cf\u4e2d\u6d41\u4f20--\u6bcf\u4e2a\u75c5\u4eba\u6bcf\u5e74\u7684\u82b1\u8d39\u53ef\u80fd\u9ad8\u8fbe25\u4e07\u7f8e\u5143\uff0c\u505a\u96f6\u5de5\u3001\u52c9\u5f3a\u7cca\u53e3\u548c\u6781\u5ea6\u8d2b\u7a77\u662f\u6211\u4eec\u5728\u8fc7\u53bb19\u5e74\u91cc\u907f\u514d\u4e86\u4f30\u8ba1950\u4e07\u7f8e\u5143\u7684\u533b\u7597\u8d39\u7528\u7684\u539f\u56e0\uff0c\u81ea\u4ece\u6211\u88ab\u8bca\u65ad\u51fa\u6765\u4e4b\u540e\uff0c\u6211\u53d8\u5f97\u66f4\u5065\u5eb7\u4e86\uff0c\u8fd9\u662f\u4e16\u754c\u4e0a\u8bf4\u4e0d\u53ef\u80fd\u505a\u7684\u4e8b\u60c5\u3002\u5728\u8fc7\u53bb\u768419\u5e74\u91cc\uff0c\u6211\u4eec\u907f\u514d\u4e86\u5927\u7ea6950\u4e07\u7f8e\u5143\u7684\u533b\u7597\u8d39\u7528\uff0c\u800c\u4e16\u754c\u90fd\u8bf4\u8fd9\u662f\u4e0d\u53ef\u80fd\u505a\u5230\u7684\u3002\u56e0\u6b64\uff0c\u5f53\u5927\u6d41\u884c\u5f00\u59cb\u65f6\uff0c\u5b83\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\u6211\u7684\u751f\u6d3b\u3002\u7ec6\u83cc\u63a7\u5236\u5df2\u7ecf\u662f\u6211\u7684\u751f\u6d3b\u4e86\u3002\u8981\u8fbe\u5230\u8fd9\u4e00\u70b9\uff0c\u5168\u7403\u5927\u6d41\u884c\u662f\u6211\u751f\u547d\u4e2d\u4ee4\u4eba\u607c\u706b\u7684\u77ed\u6682\u65f6\u523b\uff0c\u8fd9\u662f\u4e00\u6bb5\u6f2b\u957f\u800c\u964c\u751f\u7684\u65c5\u7a0b\u3002\u5176\u4e2d\u5305\u62ec\u8fd1\u516d\u5e74\u7684\u65e0\u5bb6\u53ef\u5f52\u73b0\u8c61\u3002\u65e0\u5bb6\u53ef\u5f52\u65f6\uff0c\u6211\u548c\u513f\u5b50\u4eec\u7ecf\u5e38\u8bd5\u56fe\u627e\u5230\u504f\u50fb\u7684\u516c\u5171\u9910\u684c\u3002\u51fa\u4e8e\u7ec6\u83cc\u63a7\u5236\u7684\u76ee\u7684\uff0c\u6211\u4eec\u4e0d\u60f3\u5728\u9910\u5385\u7528\u9910\uff0c\u800c\u4e14\u65e0\u5bb6\u53ef\u5f52\u7684\u4eba\u5728\u9910\u5385\u4e5f\u4e0d\u53d7\u6b22\u8fce\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53eb\u5916\u5356\uff0c\u7136\u540e\u5728\u6237\u5916\u627e\u5f20\u684c\u5b50\u3002\u4ee4\u6211\u4eec\u975e\u5e38\u607c\u706b\u7684\u662f\uff0c\u8fd9\u8ba9\u6211\u4eec\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u504f\u50fb\u7684\u9910\u5385\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u6211\u4eec\u5fc5\u987b\u627e\u4e2a\u65b0\u7684\u5730\u65b9\u5403\u4e1c\u897f\uff0c\u800c\u4e0d\u4f1a\u88ab\u54b3\u55fd\u3001\u6253\u55b7\u568f\u3001\u5e26\u83cc\u7684\u3001\u70e6\u4eba\u7684\u4eba\u5305\u56f4\u3002\u6211\u4eec\u5f00\u59cb\u4f8b\u884c\u516c\u4e8b\u5730\u8bf4\uff0c\u518d\u4e5f\u6ca1\u6709\u4eba\u53bb\u90a3\u91cc\u4e86\u3002\u8fd9\u91cc\u592a\u62e5\u6324\u4e86\u3002\u5728\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u8c08\u5230\u4e86\u745c\u4f3d\u58eb\u00b7\u8d1d\u62c9(Yogi Berra)\u6240\u8bf4\u7684\u8bdd\uff0c\u4ee5\u53ca\u4ed6\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u4e48\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u5b83\u5f88\u597d\u7b11\uff0c\u4e3a\u4ec0\u4e48\u5b83\u53ef\u80fd\u5305\u542b\u4e00\u4e01\u70b9\u771f\u7406\u6216\u667a\u6167\u3002\u4ed6\u5f88\u51fa\u540d\u3002\u4e5f\u8bb8\u4ed6\u6709\u6211\u4eec\u65e0\u5bb6\u53ef\u5f52\u65f6\u540c\u6837\u7684\u95ee\u9898\uff1a\u65e0\u8bba\u4ed6\u53bb\u54ea\u91cc\u9003\u907f\uff0c\u5f88\u5feb\u5c31\u4f1a\u6210\u4e3a\u65b0\u7684\u70ed\u70b9\u3002\u7136\u540e\u4e5f\u8bb8\u4ed6\u4e0d\u5f97\u4e0d\u627e\u522b\u7684\u5730\u65b9\u53bb\u8eb2\u907f\u4eba\u7fa4\u3002\u4e5f\u8bb8\u5f53\u4e00\u4e2a\u540d\u4eba\u8bf4\u51fa\u8fd9\u6837\u7684\u8bdd\u65f6\uff0c\u6f5c\u53f0\u8bcd\u662f\u6ca1\u6709\u4eba\u518d\u53bb\u90a3\u91cc\u4e86\u3002\u5b83\u5df2\u7ecf\u88ab\u6ca1\u6d17\u8fc7\u7684\u7fa4\u4f17\u63a5\u7ba1\u4e86\u3002\u5b83\u4e0d\u518d\u6ee1\u8db3\u6211\u7684\u9700\u8981\u4e86\u3002\u6211\u548c\u6211\u90a3\u4e9b\u6709\u94b1\u53c8\u6709\u540d\u6c14\u7684\u670b\u53cb\u4e0d\u518d\u5728\u90a3\u91cc\u95f2\u901b\u4e86\u3002&#34\uff1b\u6211\u77e5\u9053\u5f88\u591a\u5173\u4e8e\u7ec6\u83cc\u63a7\u5236\u7684\u77e5\u8bc6\u3002\u7ec6\u83cc\u63a7\u5236\u5c31\u662f\u6211\u7684\u751f\u547d\u3002\u6ca1\u6709\u4eba\u60f3\u542c\uff0c\u56e0\u4e3a\u62ef\u6551\u6211\u751f\u547d\u6240\u5fc5\u9700\u7684\u8fc7\u7a0b\u8ba9\u6211\u5728\u793e\u4f1a\u4e0a\u53d8\u5f97\u5982\u6b64\u5b64\u7acb\uff0c\u4ee5\u81f3\u4e8e\u4eba\u4eec\u8ba4\u4e3a\u6211\u5e76\u4e0d\u771f\u6b63\u5b58\u5728\u6216\u4ec0\u4e48\u7684\u3002\u6211\u628a\u6240\u6709\u7684\u65f6\u95f4\u90fd\u82b1\u5728\u4e92\u8054\u7f51\u4e0a\u3002\u8fd9\u5c31\u662f\u6211\u7684\u793e\u4ea4\u65b9\u5f0f\uff0c\u4e5f\u662f\u6211\u8d5a\u94b1\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u800c\u4e0d\u4f1a\u6709\u4eba\u5bf9\u6211\u54b3\u55fd\u4e4b\u7c7b\u7684\u3002\u8fd9\u5c31\u662f\u6211\u5982\u4f55\u505a\u7814\u7a76\u6765\u5e2e\u52a9\u6211\u7684\u6e38\u620f\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u66f4\u597d\u5730\u7167\u987e\u81ea\u5df1\u3002\u8fd9\u5c31\u662f\u6211\u5728\u751f\u6d3b\u4e2d\u505a\u5927\u591a\u6570\u4e8b\u60c5\u7684\u65b9\u5f0f\u3002\u4eba\u4eec\u8ba4\u4e3a\u6211\u662f\u673a\u5668\u91cc\u7684\u5e7d\u7075\uff0c\u662f\u4ed6\u4eec\u60f3\u8c61\u4e2d\u7684\u865a\u6784\u4eba\u7269\uff0c\u4e00\u4e9b\u9752\u5c11\u5e74\u4f4f\u5728\u4ed6\u4eec\u7236\u6bcd\u7684\u5730\u4e0b\u5ba4\u91cc\uff0c\u8bb2\u4e00\u4e9b\u80e1\u8bf4\u516b\u9053\u548c\u54a7\u5634\u7b11\u7684\u6545\u4e8b\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u6211\u662f\u4e2a\u5de8\u9b54\u3002\u7136\u540e\u6211\u5f00\u59cb\u5199\u535a\u5ba2\uff0c\u540d\u5b57\u53ebWhile the World Burns\uff0c\u505c\u6b62\u89e6\u6478\u4f60\u7684\u8138\uff0c\u56e0\u4e3a\u5728\u89d2\u843d\u91cc\u7a83\u7b11\u6211\u662f\u5982\u4f55\u5f04\u660e\u767d\u8fd9\u4e00\u70b9\u7684\uff0c\u8fd9\u4e0d\u662f\u5176\u4ed6\u4eba\u60f3\u8981\u542c\u5230\u7684\uff0c\u4e5f\u4e0d\u4f1a\u8ba9\u4f60\u8bf4\u51fa\u8fd9\u4e2a\u8bcd\u3002\u4f3c\u4e4e\u6ca1\u6709\u529e\u6cd5\u628a\u8fd9\u4e2a\u8bcd\u4f20\u51fa\u53bb\u3002\u5728\u4e00\u4e2a\u4efb\u4f55\u767d\u75f4\u90fd\u53ef\u4ee5\u5f00\u8bbe\u514d\u8d39\u535a\u5ba2\u7684\u4e16\u754c\u91cc\uff0c\u4f60\u4ecd\u7136\u4e0d\u80fd\u8bf4\u51fa\u8fd9\u4e2a\u8bcd\uff0c\u56e0\u4e3a\u6700\u5927\u7684\u969c\u788d\u4e0d\u662f\u4f20\u64ad\u4fe1\u606f\u7684\u6280\u672f\u624b\u6bb5\uff0c\u800c\u662f\u5b83\u7684\u601d\u60f3\u5171\u4eab\u3002\u5b83\u6b63\u5728\u8d85\u8d8a\u4eba\u4eec\u7684\u504f\u89c1\u3002\u6709\u4eba\u8bf4\uff0c\u53ea\u6709\u5f53\u8001\u4fdd\u5b88\u6d3e\u6b7b\u4e86\uff0c\u60c5\u51b5\u624d\u4f1a\u6539\u53d8\u3002\u6211\u538c\u5026\u4e86\u7b49\u5f85\u6bcf\u4e2a\u4eba\u90fd\u6b7b\u53bb\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u53d1\u51fa\u81ea\u5df1\u7684\u58f0\u97f3\uff0c\u5206\u4eab\u6211\u7684\u6545\u4e8b\uff0c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5e2e\u52a9\u4eba\u4eec\u3002\u6211\u662f3027\u6b21\u5c1d\u8bd5\u627e\u5230\u6211\u7684\u58f0\u97f3\u3002", "note_en": "There&#39;s a famous Yogi Berra quote that goes: I have a serious medical condition. I don&#39;t use the actual name of it as often as I used to. People react weirdly when I name it, then act like I&#39;m keeping secrets or something when I don&#39;t.  But, overall, it&#39;s less drama to make polite noises about having respiratory problems or claiming to have a paper allergy that I don&#39;t think I actually have, though papers do make me quite sick these days, than to use the actual name of my condition, which people don&#39;t understand and also react strongly to.   Just naming it makes people think I&#39;m some kind of drama queen. I&#39;m not, so I mostly stopped using the name for it, possibly at the cost of the truth to some degree, but it&#39;s been a big win socially.  So I&#39;ve spent a lot of years trying to arrange my life around germ control. Among other things, I do remote work -- including blogging -- to avoid having to get &#34;a real job&#34; because most &#34;real jobs&#34; would be detrimental to my health.  Given that me and my oldest son have the same diagnosis -- genetic disorders tend to run in the family like that -- and it can cost up to a quarter million dollars per patient per year, doing gig work and living hand to mouth and being dirt poor is how we have avoided an estimated $9.5 million in medical expenses in the last 19 years since I was diagnosed while getting healthier, something the world says cannot be done.  So when the pandemic began, it barely impacted my life. Germ control is already my life.   Getting to that point, where a global pandemic was kind of an annoying blip in my life, was a long strange journey. It included nearly six years of homelessness.  While homeless, my sons and I routinely tried to find out-of-the-way public tables. For purposes of germ control, we didn&#39;t want to eat in restaurants and homeless people aren&#39;t welcome in restaurants anyway. So we would get takeout and go find a table somewhere outdoors.   Much to our annoyance, this popularized some of our favorite out-of-the-way eating places. We would have to find some new spot to take our food and eat without being surrounded by coughing, sneezing, germy, annoying people.   We began routinely saying &#34;No one goes there anymore. It&#39;s too crowded.&#34;  At some point, we talked about the Yogi Berra saying and why he might say it, why it&#39;s funny and why it may contain a grain of truth or wisdom.  He was famous. Maybe he had the same problem we had while homeless: Wherever he went to get away from it all soon became the new hot spot. Then maybe he had to find someplace else to go to avoid the crowds.  Maybe when a famous person says something like that, the subtext is &#34;No one who is anyone goes there anymore. It&#39;s been taken over by the unwashed masses. It doesn&#39;t serve my needs anymore. Me and my rich and famous friends no longer hang out there.&#34;  I know a lot about germ control. Germ control is my life.  And no one wants to hear it because the very process that was necessary to save my life has left me so socially isolated that people think I don&#39;t really exist or something. I spend all my time on the internet.   That&#39;s how I socialize and that&#39;s how I make money because I can do that without people coughing on me and stuff like that. That&#39;s how I do research to help up my game so I can better care for myself. That&#39;s how I do most things in life.  And people think I&#39;m a ghost in the machine, a figment of their imagination, some teenager living in their parent&#39;s basement telling tall tales for shits and grins. In short, they think I&#39;m a troll.  And then I start blogs with names like While the World Burns and Stop Touching Your Face that never get developed because snickering in the corner about how I have this figured out isn&#39;t something other people want to hear and it won&#39;t get the word out.  There seems to be no way to get the word out. In a world where any idiot can start a free blog, you still can&#39;t get the word out because the biggest barrier is not technical means to disseminate information, it&#39;s mindshare. It&#39;s getting past people&#39;s prejudices.  It&#39;s been said that things only change when the old guard dies. I&#39;m tired of waiting for everyone to die so I can find my voice and share my story and help people in some way.  This is attempt number 3027 to find my voice.", "posttime": "2020-05-17 07:59:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "anymore,\u4eba\u4eec", "title": "\u518d\u4e5f\u6ca1\u6709\u4eba\u53bb\u90a3\u91cc\u4e86", "title_en": "No One Goes There Anymore", "transed": 1, "url": "https://noonegoesthereanymore.blogspot.com/2020/05/no-one-goes-there-anymore.html", "via": "", "real_tags": ["anymore", "\u4eba\u4eec"]}, {"category": "", "categoryclass": "", "imagename": "43486d01b4f8e52b6962b0e7fa63e5a0.jpg", "infoid": 1002468, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u6070\u5230\u597d\u5904\u201d\u5c9b\uff0c\u4e5f\u88ab\u79f0\u4e3a\u67a2\u7ebd\u5c9b\uff0c[1]\u662f\u4e00\u4e2a\u4f4d\u4e8e\u5343\u5c9b\u94fe\u4e0a\u7684\u5c9b\u5c7f\uff0c\u5c5e\u4e8e\u7f8e\u56fd\u7ebd\u7ea6\u5dde\u3002\u8be5\u5c9b\u4ee5\u6700\u5c0f\u7684\u6709\u4eba\u5c45\u4f4f\u5c9b\u5c7f\u800c\u95fb\u540d\uff0c\u9762\u79ef\u7ea6\u4e3a3300\u5e73\u65b9\u82f1\u5c3a(310\u5e73\u65b9\u7c73)\uff0c\u7ea6\u540813\u82f1\u4ea9\u3002\u897f\u5179\u5170\u5bb6\u65cf\u572820\u4e16\u7eaa50\u5e74\u4ee3\u8d2d\u4e70\u4e86\u8fd9\u4e2a\u5c9b\uff0c\u5c9b\u4e0a\u6709\u4e00\u5ea7\u623f\u5b50\uff0c\u4e00\u68f5\u6811\uff0c\u704c\u6728\u548c\u4e00\u4e2a\u5c0f\u6d77\u6ee9\u3002[2]\u3002\n\u8fd9\u4e2a\u5c9b\u662f\u572820\u4e16\u7eaa50\u5e74\u4ee3\u88ab\u897f\u5179\u5170\u5bb6\u65cf\u4e70\u4e0b\u7684\uff0c\u4ed6\u4eec\u60f3\u8981\u4e00\u4e2a\u5ea6\u5047\u80dc\u5730\uff0c\u5e76\u5728\u90a3\u91cc\u5efa\u4e86\u4e00\u5ea7\u623f\u5b50\u3002[2]2010\u5e74\uff0c\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d\u79f0\uff0c\u7531\u4e8e\u8fd9\u4e2a\u5c9b\u7684\u9762\u79ef\u5f88\u5c0f\uff0c\u5982\u679c\u4f60\u8d70\u9519\u4e00\u6b65\uff0c\u4f60\u5c31\u4f1a\u518d\u6b21\u6e38\u6765\u6e38\u53bb\u3002[3]\u3002\n\u6070\u597d\u8db3\u591f\u7684\u7a7a\u95f4\u4f4d\u4e8e\u5fc3\u5c9b\u548c\u5e1d\u56fd\u5c9b\u4e4b\u95f4\u7684\u5723\u52b3\u4f26\u65af\u6cb3\u4e0a\uff0c\u9760\u8fd1\u7f8e\u56fd\u4e0e\u52a0\u62ff\u5927\u7684\u8fb9\u5883\u3002\u8be5\u5c9b\u5c5e\u4e8e\u4e9a\u5386\u5c71\u5927\u6e7e\uff0c\u662f\u7ebd\u7ea6\u5dde\u6770\u6590\u900a\u53bf\u4e9a\u5386\u5c71\u5927\u9547\u7684\u4e00\u4e2a\u6751\u5e84\u3002", "note_en": "Just Room Enough Island, also known as  Hub Island,  [1] is an island located in the  Thousand Islands chain, belonging to  New York,  United States. The island is known for being the smallest inhabited island, which appears to be around 3,300 square feet (310\u00a0m 2), or about one-thirteenth of an acre. Purchased by the Sizeland family in the 1950s, the island has a house, a tree, shrubs, and a small beach.  [2]\n   The island was bought in the 1950s by the Sizeland family, who wanted a holiday getaway and built a house there.  [2] Because of the island&#39;s small size, in 2010, the   Washington Post stated, &#34;One misstep and you&#39;re swimming&#34;.  [3]\n  Just Room Enough lies on the  Saint Lawrence River between  Heart Island and  Imperial Isle, close to  the US border with  Canada. The island belongs to  Alexandria Bay,  [1] a village part of the town of  Alexandria,  Jefferson County,  New York.", "posttime": "2020-05-17 07:59:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a7a\u95f4,room,\u7f8e\u56fd", "title": "\u521a\u597d\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u5c9b", "title_en": "Just Room Enough Island", "transed": 1, "url": "https://en.wikipedia.org/wiki/Just_Room_Enough_Island", "via": "", "real_tags": ["\u7a7a\u95f4", "room", "\u7f8e\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "db4197e44ad601340fef39b1bf4eabf6.jpg", "infoid": 1002467, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51a0\u72b6\u75c5\u6bd2\u6a21\u578b\u5bfc\u81f4\u82f1\u56fd\u9677\u5165\u5c01\u9501\uff0c\u7ecf\u6d4e\u5173\u95ed\uff0c\u6570\u767e\u4e07\u4eba\u5931\u4e1a\uff0c\u906d\u5230\u4e86\u4e00\u7cfb\u5217\u4e13\u5bb6\u7684\u731b\u70c8\u62a8\u51fb\u3002\n\u9886\u5bfc\u4eba\u7269\u5632\u7b11\u5c3c\u5c14\u00b7\u5f17\u683c\u68ee\u6559\u6388\u7684\u8ba1\u7b97\u673a\u4ee3\u7801\u201c\u5b8c\u5168\u4e0d\u53ef\u9760\u201d\uff0c\u4ed6\u4eec\u8b66\u544a\u8bf4\uff0c\u8fd9\u662f\u201c\u4f60\u4e0d\u4f1a\u62ff\u751f\u547d\u53bb\u5192\u9669\u7684\u4e1c\u897f\u201d\u3002\n\u82f1\u56fd\u6570\u636e\u6280\u672f\u516c\u53f8WANdiso\u7684\u8054\u5408\u521b\u59cb\u4eba\u5927\u536b\u00b7\u7406\u67e5\u5179(David Richards)\u8868\u793a\uff0c\u8fd9\u79cd\u6a21\u5f0f\u88ab\u8a89\u4e3a\u8feb\u4f7f\u653f\u5e9c\u505a\u51fa180\u5ea6\u5927\u8f6c\u5f2f\uff0c\u5e76\u5728\u5168\u56fd\u8303\u56f4\u5185\u5b9e\u65bd\u5c01\u9501\u3002\u8fd9\u79cd\u6a21\u5f0f\u662f\u201c\u4e00\u56e2\u4e71\u4e03\u516b\u7cdf\u7684\u4e1c\u897f\uff0c\u770b\u8d77\u6765\u66f4\u50cf\u4e00\u7897\u5929\u4f7f\u5934\u53d1\u7684\u610f\u5927\u5229\u9762\uff0c\u800c\u4e0d\u662f\u4e00\u6bb5\u7cbe\u5fc3\u8c03\u6574\u7684\u7a0b\u5e8f\u201d\u3002\n\u201c\u5728\u6211\u4eec\u7684\u5546\u4e1a\u73b0\u5b9e\u4e2d\uff0c\u6211\u4eec\u4f1a\u56e0\u4e3a\u5f00\u53d1\u8fd9\u6837\u7684\u4ee3\u7801\u800c\u89e3\u96c7\u4efb\u4f55\u4eba\uff0c\u4efb\u4f55\u4f9d\u8d56\u5b83\u6765\u751f\u4ea7\u8f6f\u4ef6\u4ee5\u4f9b\u9500\u552e\u7684\u4f01\u4e1a\u90fd\u53ef\u80fd\u7834\u4ea7\u3002\u201d\n\u8fd9\u4e9b\u8a00\u8bba\u53ef\u80fd\u4f1a\u91cd\u65b0\u5f15\u53d1\u5173\u4e8e\u82f1\u56fd\u5c06\u516c\u4f17\u7f6e\u4e8e\u5c01\u9501\u72b6\u6001\u662f\u5426\u6b63\u786e\u7684\u4e89\u8bba\uff0c\u76f8\u4e92\u77db\u76fe\u7684\u79d1\u5b66\u6a21\u578b\u8868\u660e\uff0c\u4eba\u4eec\u53ef\u80fd\u5df2\u7ecf\u83b7\u5f97\u4e86\u5b9e\u8d28\u6027\u7684\u7fa4\u4f53\u514d\u75ab\u529b\uff0c\u51a0\u72b6\u75c5\u6bd2\u53ef\u80fd\u6bd4\u6700\u521d\u8ba4\u4e3a\u7684\u66f4\u65e9\u88ad\u51fb\u82f1\u56fd\u3002\u79d1\u5b66\u5bb6\u4eec\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u81f4\u6b7b\u7387\u4e5f\u5b58\u5728\u5206\u6b67\uff0c\u8fd9\u5bfc\u81f4\u4e86\u622a\u7136\u4e0d\u540c\u7684\u6a21\u578b\u3002\n\u7136\u800c\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5e1d\u56fd\u7406\u5de5\u5b66\u9662\u7684\u6a21\u578b\u53d7\u5230\u4e86\u5f88\u5927\u7684\u91cd\u89c6\uff0c\u8be5\u6a21\u578b\u7684\u6b7b\u4ea1\u7387\u6bd4\u5176\u4ed6\u6a21\u578b\u9ad8\uff0c\u5e76\u9884\u6d4b\u5982\u679c\u4e0d\u5b9e\u884c\u5c01\u9501\uff0c\u82f1\u56fd\u53ef\u80fd\u4f1a\u670951\u4e07\u4eba\u6b7b\u4ea1\u3002\n\u636e\u8bf4\uff0c\u8fd9\u4fc3\u4f7f\u653f\u5e9c\u5728\u653f\u7b56\u4e0a\u505a\u51fa\u4e86\u620f\u5267\u6027\u7684\u6539\u53d8\uff0c\u5bfc\u81f4\u5546\u4e1a\u3001\u5b66\u6821\u548c\u9910\u9986\u57283\u6708\u4efd\u7acb\u5373\u5173\u95ed\u3002\u82f1\u56fd\u592e\u884c(Bank Of England)\u9884\u6d4b\uff0c\u5728\u9762\u4e34\u4e09\u4e2a\u591a\u4e16\u7eaa\u4ee5\u6765\u6700\u4e25\u91cd\u7684\u8870\u9000\u540e\uff0c\u7ecf\u6d4e\u53ef\u80fd\u9700\u8981\u4e00\u5e74\u65f6\u95f4\u624d\u80fd\u6062\u590d\u6b63\u5e38\u3002\n\u5e1d\u56fd\u6a21\u578b\u7684\u5de5\u4f5c\u539f\u7406\u662f\u4f7f\u7528\u4ee3\u7801\u6a21\u62df\u4ea4\u901a\u8fde\u63a5\u3001\u4eba\u53e3\u89c4\u6a21\u3001\u793e\u4ea4\u7f51\u7edc\u548c\u533b\u7597\u4fdd\u5065\u4f9b\u5e94\uff0c\u4ee5\u9884\u6d4b\u51a0\u72b6\u75c5\u6bd2\u5c06\u5982\u4f55\u4f20\u64ad\u3002\u7136\u800c\uff0c\u5728\u7814\u7a76\u4eba\u5458\u516c\u5e03\u4e86\u8be5\u6a21\u578b\u80cc\u540e\u7684\u4ee3\u7801\u540e\uff0c\u4eba\u4eec\u5f00\u59cb\u8d28\u7591\u8be5\u6a21\u578b\u662f\u5426\u51c6\u786e\u3002\u4ee3\u7801\u6700\u521d\u7684\u5f62\u5f0f\u662f\u7ecf\u8fc713\u5e74\u591a\u7684\u65f6\u95f4\u5f00\u53d1\u7684\u201c\u6570\u5343\u884c\u201d\u3002\n\u636e\u7f8e\u56fd\u5f00\u53d1\u4eba\u5458\u7ea6\u7ff0\u00b7\u5361\u9a6c\u514b(John Carmack)\u8bf4\uff0c\u5728\u4ee3\u7801\u6700\u521d\u7684\u5f62\u5f0f\u4e0b\uff0c\u5f00\u53d1\u4eba\u5458\u58f0\u79f0\u4ee3\u7801\u662f\u4e0d\u53ef\u8bfb\u7684\uff0c\u6709\u4e9b\u90e8\u5206\u770b\u8d77\u6765\u201c\u5c31\u50cf\u662f\u4eceFortran(\u4e00\u79cd\u65e7\u7684\u7f16\u7801\u8bed\u8a00)\u201d\u673a\u5668\u7ffb\u8bd1\u8fc7\u6765\u7684\u3002\u5728\u4ee3\u7801\u53d1\u5e03\u5230\u7f51\u4e0a\u4e4b\u524d\uff0c\u4ed6\u5e2e\u52a9\u6e05\u7406\u4e86\u4ee3\u7801\u3002\u7136\u800c\uff0c\u95ee\u9898\u4f3c\u4e4e\u6bd4\u6742\u4e71\u65e0\u7ae0\u7684\u7f16\u7801\u8981\u6df1\u5f97\u591a\u3002\n\u8bb8\u591a\u4eba\u58f0\u79f0\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u4ee3\u7801\u4ece\u76f8\u540c\u7684\u6570\u636e\u4e2d\u91cd\u73b0\u76f8\u540c\u7684\u7ed3\u679c\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7231\u4e01\u5821\u5927\u5b66\u7684\u79d1\u5b66\u5bb6\u62a5\u544a\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u4ed6\u4eec\u8bf4\uff0c\u5f53\u4ed6\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u673a\u5668\u65f6\uff0c\u751a\u81f3\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f53\u4ed6\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u673a\u5668\u65f6\uff0c\u4ed6\u4eec\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002\n\u201c\u7f51\u7edc\u6587\u4ef6\u7684\u521b\u5efa\u6216\u91cd\u65b0\u4f7f\u7528\u4f3c\u4e4e\u5b58\u5728\u9519\u8bef\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4e24\u6b21\u5b8c\u5168\u76f8\u540c\u7684\u8fd0\u884c\uff0c\u53ea\u662f\u7b2c\u4e8c\u6b21\u4f7f\u7528\u7b2c\u4e00\u6b21\u4ea7\u751f\u7684\u7f51\u7edc\u6587\u4ef6\u6709\u6240\u4e0d\u540c\uff0c\u7ed3\u679c\u5c31\u5927\u76f8\u5f84\u5ead\u4e86\uff0c\u201c\u7231\u4e01\u5821\u7684\u7814\u7a76\u4eba\u5458\u5728Github\u6587\u4ef6\u4e0a\u5199\u9053\u3002\n\u5728\u4e0e\u5176\u4e2d\u4e00\u4f4dGithub\u5f00\u53d1\u4eba\u5458\u8ba8\u8bba\u540e\uff0c\u540e\u6765\u63d0\u4f9b\u4e86\u4fee\u590d\u3002\u636e\u8bf4\u8fd9\u662f\u5728\u7cfb\u7edf\u4e2d\u53d1\u73b0\u7684\u8bb8\u591a\u9519\u8bef\u4e4b\u4e00\u3002Github\u7684\u5f00\u53d1\u4eba\u5458\u89e3\u91ca\u8bf4\uff0c\u8fd9\u4e2a\u6a21\u578b\u662f\u201c\u968f\u673a\u7684\u201d\uff0c\u201c\u5e94\u8be5\u7528\u4e0d\u540c\u7684\u79cd\u5b50\u8fdb\u884c\u591a\u6b21\u8fd0\u884c\uff0c\u624d\u80fd\u770b\u5230\u5e73\u5747\u884c\u4e3a\u201d\u3002\n\u7136\u800c\uff0c\u8fd9\u4e5f\u5f15\u53d1\u4e86\u4e13\u5bb6\u7684\u8d28\u7591\uff0c\u4ed6\u4eec\u8bf4\uff0c\u201c\u6a21\u578b\u5fc5\u987b\u80fd\u591f\u901a\u8fc7\u57fa\u672c\u7684\u79d1\u5b66\u6d4b\u8bd5\uff0c\u5728\u7ed9\u5b9a\u76f8\u540c\u7684\u521d\u59cb\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u2026\u2026\u5426\u5219\uff0c\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5b83\u4eec\u662f\u5426\u53ef\u9760\u3002\u201d\n\u4e0e\u6b64\u540c\u65f6\uff0c\u4eba\u4eec\u6b63\u5728\u5c31\u653f\u5e9c\u662f\u5426\u5e94\u8be5\u5728\u5236\u5b9a\u653f\u7b56\u4e4b\u524d\u66f4\u591a\u5730\u4f9d\u8d56\u4f17\u591a\u6a21\u5f0f\u5c55\u5f00\u66f4\u5e7f\u6cdb\u7684\u8fa9\u8bba\u3002\n\u8036\u7a23\u5b66\u9662(Jesse College)\u6821\u957f\u5948\u6770\u5c14\u00b7\u6c99\u5fb7\u535a\u5c14\u7279\u7235\u58eb(Sir Nigel Shadbolt)\u5728\u4e3a\u6bcf\u65e5\u7535\u8baf\u62a5(Tetraph.co.uk)\u64b0\u5199\u7684\u6587\u7ae0\u4e2d\u8868\u793a\uff0c\u201c\u62e5\u6709\u5404\u79cd\u5404\u6837\u7684\u6a21\u578b\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u4f7f\u653f\u7b56\u5236\u5b9a\u8005\u80fd\u591f\u5728\u4e0d\u540c\u7684\u5047\u8bbe\u4e0b\u63a2\u7d22\u9884\u6d4b\uff0c\u5e76\u4f7f\u7528\u4e0d\u540c\u7684\u5e72\u9884\u63aa\u65bd\u7684\u6a21\u578b\uff0c\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5f3a\u5927\u201d\u3002\n\u4e0e\u5e1d\u56fd\u6cd5\u5178\u4e00\u6837\uff0c\u725b\u6d25\u5927\u5b66(Oxford University)\u6559\u6388\u82cf\u5185\u7279\u62c9\u00b7\u53e4\u666e\u5854(Sunetra Gupta)\u63d0\u51fa\u7684\u4e00\u4e2a\u4e0e\u4e4b\u7ade\u4e89\u7684\u6a21\u5f0f\u662f\u6240\u8c13\u7684\u201c\u5148\u751f\u65b9\u6cd5\u201d\uff0c\u5373\u5c06\u4eba\u7fa4\u5206\u4e3a\u6613\u611f\u4eba\u7fa4\u3001\u611f\u67d3\u8005\u548c\u6709\u8bb0\u5f55\u7684\u4eba\u7fa4\u3002\u7136\u800c\uff0c\u867d\u7136\u53e4\u666e\u5854\u5047\u8bbe\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2\u7684\u4eba\u5c06\u6b7b\u4ea10.1%\uff0c\u4f46\u5f17\u683c\u68ee\u8ba4\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e3a0.9%\u3002\n\u8fd9\u5bfc\u81f4\u4e86\u653f\u5e9c\u653f\u7b56\u7684\u620f\u5267\u6027\u9006\u8f6c\uff0c\u4ece\u8bd5\u56fe\u5efa\u7acb\u201c\u7fa4\u4f53\u514d\u75ab\u529b\u201d\u8f6c\u53d8\u4e3a\u5168\u9762\u5c01\u9501\u3002\u4e13\u5bb6\u4eec\u4ecd\u7136\u5bf9\u653f\u5e9c\u4e3a\u4ec0\u4e48\u4f3c\u4e4e\u5bf9\u5176\u4ed6\u6a21\u5f0f\u4e0d\u5c51\u4e00\u987e\u611f\u5230\u56f0\u60d1\u3002\n\u725b\u6d25\u5927\u5b66\u6570\u5b66\u751f\u7269\u5b66\u6559\u6388\u8fc8\u514b\u5c14\u00b7\u90a6\u7d22\u5c14(Michael Bonsall)\u8868\u793a\uff1a\u201c\u5982\u679c\u5929\u6c14\u9884\u62a5\u662f\u57fa\u4e8e\u5355\u4e00\u6a21\u578b\u7684\u4e00\u7ec4\u7ed3\u679c\uff0c\u5e76\u4e14\u5728\u4e0b\u96e8\u65f6\u9519\u8fc7\u4e86\u5e26\u4f1e\uff0c\u6211\u4eec\u5c31\u4f1a\u5927\u53d1\u96f7\u9706\u3002\u201d\n\u7279\u522b\u662f\uff0c\u4eba\u4eec\u5bf9\u5f17\u683c\u68ee\u7684\u6a21\u5f0f\u63d0\u51fa\u4e86\u62c5\u5fe7\uff0c\u4e07\u8fea\u65af\u79d1\u5efa\u7b51\u526f\u603b\u88c1\u5eb7\u65af\u5766\u4e01\u00b7\u5e03\u5fb7\u5c3c\u514b(Konstantin Boudnik)\u8868\u793a\uff0c\u4ed6\u5728\u6a21\u7279\u65b9\u9762\u7684\u8bb0\u5f55\u5e76\u6ca1\u6709\u6fc0\u53d1\u4eba\u4eec\u7684\u4fe1\u5fc3\u3002\n\u5728\u672c\u4e16\u7eaa\u521d\uff0c\u5f17\u683c\u68ee\u7684\u6a21\u578b\u9519\u8bef\u5730\u9884\u6d4b\u4e86\u9ad8\u8fbe13.6\u4e07\u4eba\u6b7b\u4e8e\u75af\u725b\u75c5\uff0c2\u4ebf\u4eba\u6b7b\u4e8e\u79bd\u6d41\u611f\uff0c6.5\u4e07\u4eba\u6b7b\u4e8e\u732a\u6d41\u611f\u3002\n\u5e03\u5fb7\u5c3c\u514b\u535a\u58eb\u8bf4\uff1a\u201c21\u4e16\u7eaa\u521d\u7684\u4e8b\u5b9e\u53ea\u662f\u53c8\u4e00\u6b21\u8bc1\u5b9e\u4e86\u4ed6\u4eec\u7684\u5efa\u6a21\u65b9\u6cd5\u5b58\u5728\u672c\u8d28\u7f3a\u9677\u3002\u201d\u201c\u6211\u4eec\u4e0d\u786e\u5b9a\u662f\u5426\u4f7f\u7528\u4e86\u540c\u6837\u7684\u6a21\u578b/\u4ee3\u7801\uff0c\u4f46\u6211\u4eec\u6e05\u695a\u5730\u770b\u5230\uff0c\u4ed6\u4eec\u7684\u65b9\u6cd5\u5f53\u65f6\u5e76\u4e0d\u4e25\u683c\uff0c\u73b0\u5728\u80af\u5b9a\u4e5f\u6ca1\u6709\u6539\u8fdb\u3002\u201d\n\u5e1d\u56fd\u7406\u5de5\u5b66\u9662COVID19\u54cd\u5e94\u5c0f\u7ec4\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8bf4\uff1a\u201c\u82f1\u56fd\u653f\u5e9c\u4ece\u6765\u4e0d\u4f9d\u8d56\u5355\u4e00\u7684\u75be\u75c5\u6a21\u578b\u6765\u4e3a\u51b3\u7b56\u63d0\u4f9b\u4fe1\u606f\u3002\u5982\u524d\u6240\u8ff0\uff0c\u56f4\u7ed5\u5c01\u9501\u7684\u51b3\u7b56\u662f\u57fa\u4e8e\u5bf9\u79d1\u5b66\u8bc1\u636e\u7684\u4e00\u81f4\u770b\u6cd5\uff0c\u5305\u62ec\u7531\u4e0d\u540c\u5b66\u672f\u56e2\u4f53\u8fdb\u884c\u7684\u51e0\u9879\u6a21\u578b\u7814\u7a76\u3002\n\u201c\u591a\u4e2a\u5c0f\u7ec4\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u578b\u5f97\u51fa\u7ed3\u8bba\uff0c\u5728\u6ca1\u6709\u6781\u7aef\u7684\u793e\u4f1a\u758f\u8fdc\u63aa\u65bd\u7684\u60c5\u51b5\u4e0b\uff0c\u5927\u6d41\u884c\u5c06\u4f7fNHS\u4e0d\u582a\u91cd\u8d1f\uff0c\u5e76\u5bfc\u81f4\u4e0d\u53ef\u63a5\u53d7\u7684\u9ad8\u6b7b\u4ea1\u7387\u3002\u5728\u5e1d\u56fd\u7406\u5de5\u5b66\u9662\u7684\u7814\u7a76\u56e2\u961f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u51e0\u4e2a\u590d\u6742\u7a0b\u5ea6\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u6240\u6709\u8fd9\u4e9b\u6a21\u578b\u90fd\u4ea7\u751f\u4e86\u4e00\u81f4\u7684\u7ed3\u679c\u3002\u6211\u4eec\u6b63\u5728\u4e0e\u4e00\u4e9b\u5408\u6cd5\u7684\u5b66\u672f\u56e2\u4f53\u548c\u6280\u672f\u516c\u53f8\u5408\u4f5c\uff0c\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u8fdb\u4e00\u6b65\u8bb0\u5f55\u6240\u63d0\u5230\u7684\u6a21\u62df\u4ee3\u7801\u3002\u7136\u800c\uff0c\u6211\u4eec\u62d2\u7edd\u5c11\u6570\u660e\u663e\u51fa\u4e8e\u610f\u8bc6\u5f62\u6001\u52a8\u673a\u7684\u7f8e\u56fd\u8bc4\u8bba\u5458\u7684\u515a\u6d3e\u5ba1\u67e5\u3002\n\u201c\u6d41\u884c\u75c5\u5b66\u4e0d\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u6709\u5173\u5c01\u9501\u7684\u7ed3\u8bba\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u6570\u5b66\u6a21\u578b\uff0c\u800c\u662f\u57fa\u4e8e\u79d1\u5b66\u5171\u8bc6\uff0c\u5373\u51a0\u72b6\u75c5\u6bd2\u662f\u4e00\u79cd\u9ad8\u5ea6\u53ef\u4f20\u64ad\u7684\u75c5\u6bd2\uff0c\u5728\u82f1\u56fd\u7684\u611f\u67d3\u6b7b\u4ea1\u7387\u8d85\u8fc70.5%\u3002\u201d\n\u6bcf\u65e5\u7535\u8baf\u62a5\u91cd\u89c6\u60a8\u7684\u8bc4\u8bba\uff0c\u4f46\u6073\u8bf7\u6240\u6709\u5e16\u5b50\u90fd\u662f\u4e3b\u9898\u3001\u5efa\u8bbe\u6027\u548c\u5c0a\u91cd\u7684\u3002\u8bf7\u68c0\u67e5\u6211\u4eec\u7684\u8bc4\u8bba\u653f\u7b56\u3002", "note_en": "The Covid-19 modelling that sent Britain into lockdown, shutting the economy and leaving millions unemployed, has been slammed by a series of experts.\n Professor Neil Ferguson&#39;s computer coding was derided as \u201ctotally unreliable\u201d by leading figures, who warned it was \u201csomething you wouldn\u2019t stake your life on&#34;.\n The model, credited with forcing the Government to make a U-turn and introduce a nationwide lockdown, is a \u201cbuggy mess that looks more like a bowl of angel hair pasta than a finely tuned piece of programming\u201d, says David Richards, co-founder of British data technology company WANdisco.\n \u201cIn our commercial reality, we would fire anyone for developing code like this and any business that relied on it to produce software for sale would likely go bust.\u201d\n The comments are likely to reignite a row over whether the UK was right to send the public into lockdown, with conflicting scientific models having suggested people may have already acquired substantial herd immunity and that Covid-19 may have hit Britain earlier than first thought. Scientists have also been split on what the fatality rate of Covid-19 is, which has resulted in vastly different models.\n Up until now, though, significant weight has been attached to Imperial&#39;s model, which placed the fatality rate higher than others and predicted that 510,000 people in the UK could die without a lockdown.\n It was said to have prompted a dramatic change in policy from the Government, causing businesses, schools and restaurants to be shuttered immediately in March. The Bank of England  has predicted that the economy could take a year to return to normal, after facing its worst recession for more than three centuries.\n The Imperial model works by using code to simulate transport links, population size, social networks and healthcare provisions to predict how coronavirus would spread. However, questions have since emerged over whether the model is accurate, after researchers released the code behind it, which in its original form was \u201cthousands of lines\u201d developed over more than 13 years.\n In its initial form, developers claimed the code had been unreadable, with some parts looking \u201clike they were machine translated from Fortran\u201d, an old coding language, according to John Carmack, an American developer, who helped clean up the code before it was published online. Yet, the problems appear to go much deeper than messy coding.\n  Many have claimed that it is almost impossible to reproduce the same results from the same data, using the same code. Scientists from the University of Edinburgh reported such an issue, saying they got different results when they used different machines, and even in some cases, when they used the same machines.\n \u201cThere appears to be a bug in either the creation or re-use of the network file. If we attempt two completely identical runs, only varying in that the second should use the network file produced by the first, the results are quite different,\u201d the Edinburgh researchers wrote on the Github file.\n After a discussion with one of the Github developers, a fix was later provided. This is said to be one of a number of bugs discovered within the system. The Github developers explained this by saying that the model is \u201cstochastic\u201d, and that \u201cmultiple runs with different seeds should be undertaken to see average behaviour\u201d.\n However,  it has prompted questions from specialists, who say \u201cmodels must be capable of passing the basic scientific test of producing the same results given the same initial set of parameters...otherwise, there is simply no way of knowing whether they will be reliable.\u201d\n It comes amid a wider debate over whether the Government should have relied more heavily on numerous models before making policy decisions.\n Writing for\u00a0 telegraph.co.uk, Sir Nigel Shadbolt, Principal at Jesus College, said that \u201chaving a diverse variety of models, particularly those that enable policymakers to explore predictions under different assumptions, and with different interventions, is incredibly powerful\u201d.\n Like the Imperial code, a rival model by Professor Sunetra Gupta at Oxford University works on a so-called &#34;SIR approach&#34;\u00a0in which the population is divided into those that are susceptible, infected and recorded. However, while Gupta made the assumption that 0.1pc of people infected with coronavirus would die, Ferguson placed that figure at 0.9pc.\n That led to a dramatic reversal in government policy from attempting to build \u201cherd immunity\u201d to a full-on lockdown. Experts remain baffled as to why the government appeared to dismiss other models.\n  \u201cWe\u2019d be up in arms if weather forecasting was based on a single set of results from a single model and missed taking that umbrella when it rained,\u201d says Michael Bonsall, Professor of Mathematical Biology at Oxford University.\n Concerns, in particular, over Ferguson\u2019s model have been raised, with Konstantin Boudnik, vice-president of architecture at WANdisco, saying his track record in modelling doesn\u2019t inspire confidence.\n In the early 2000s, Ferguson\u2019s models incorrectly predicted up to 136,000 deaths from mad cow disease, 200 million from bird flu and 65,000 from swine flu.\n \u201cThe facts from the early 2000s are just yet another confirmation that their modeling approach was flawed to the core,\u201d says Dr Boudnik. \u201cWe don&#39;t know for sure if the same model/code was used, but we clearly see their methodology wasn&#39;t rigourous then and surely hasn&#39;t improved now.\u201d\n A spokesperson for the Imperial College COVID19 Response Team said: \u201cThe UK Government has never relied on a single disease model to inform decision-making. As has been repeatedly stated, decision-making around lockdown was based on a consensus view of the scientific evidence, including several modelling studies by different academic groups.\n  \u201cMultiple groups using different models concluded that the pandemic would overwhelm the NHS and cause unacceptably high mortality in the absence of extreme social distancing measures. Within the Imperial research team we use several models of differing levels of complexity, all of which produce consistent results. We are working with a number of legitimate academic groups and technology companies to develop, test and further document the simulation code referred to. However, we reject the partisan reviews of a few clearly ideologically motivated \u00a0commentators.\n \u201cEpidemiology is not a branch of computer science and the conclusions \u00a0around lockdown rely not on any mathematical model but on the scientific consensus that COVID-19 is a highly transmissible virus with an infection fatality ratio exceeding 0.5pc in the UK.\u201d\n  The Telegraph values your comments but kindly requests all posts are on topic, constructive and respectful. Please review our commenting policy.", "posttime": "2020-05-17 07:58:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c01\u9501,led,\u6a21\u578b", "title": "\u5bfc\u81f4\u5c01\u9501\u7684\u7f16\u7801\u662f\u201c\u4e0d\u53ef\u9760\u7684\u201d\u548c\u201c\u4e71\u4e03\u516b\u7cdf\u7684\u201d", "title_en": "Coding that led to lockdown was 'unreliable' and a 'buggy mess'", "transed": 1, "url": "https://www.telegraph.co.uk/technology/2020/05/16/coding-led-lockdown-totally-unreliable-buggy-mess-say-experts/", "via": "", "real_tags": ["\u5c01\u9501", "led", "\u6a21\u578b"]}, {"category": "", "categoryclass": "", "imagename": "d48461b1abb6d7ded4d6cb56017cab27.jpg", "infoid": 1002466, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bd4\u5c14\u00b7\u76d6\u8328\u591a\u5e74\u6765\u4e00\u76f4\u8b66\u544a\u653f\u5e9c\u9886\u5bfc\u4eba\u5168\u7403\u5927\u6d41\u884c\uff0c\u4f46\u51a0\u72b6\u75c5\u6bd2\u4ecd\u7136\u8ba9\u5404\u56fd\u63aa\u624b\u4e0d\u53ca-\u8fd9\u4f4d\u6148\u5584\u5bb6\u548c\u5fae\u8f6f\u8054\u5408\u521b\u59cb\u4eba\u8868\u793a\uff0c\u8fd9\u662f\u4ed6\u6700\u5927\u7684\u9057\u61be\u4e4b\u4e00\u3002\n\u76d6\u8328\u5728\u63a5\u53d7\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d\u91c7\u8bbf\u65f6\u8bf4\uff1a\u201c\u6211\u5e0c\u671b\u6211\u80fd\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u6765\u5524\u8d77\u4eba\u4eec\u5bf9\u5371\u9669\u7684\u5173\u6ce8\u3002\u201d\u201c\u6211\u611f\u89c9\u5f88\u7cdf\u7cd5\u3002\u8c08\u8bba\u8fd9\u4ef6\u4e8b\u7684\u5168\u90e8\u610f\u4e49\u5728\u4e8e\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u884c\u52a8\uff0c\u5c06\u635f\u5bb3\u964d\u81f3\u6700\u4f4e\u3002\u201c\u3002\n\u76d6\u8328\u4ece2014\u5e74\u5f00\u59cb\u5c31\u5927\u6d41\u884c\u6027\u75be\u75c5\u7684\u5a01\u80c1\u53d1\u51fa\u8b66\u544a\u3002\u5f53\u65f6\uff0c\u57c3\u535a\u62c9\u75c5\u6bd2\u5728\u4ed6\u7684\u96f7\u8fbe\u4e0a\u3002\n\u7b2c\u4e8c\u5e74\uff0c\u4ed6\u5728TED\u53d1\u8868\u6f14\u8bb2\uff0c\u79f0\u4f20\u67d3\u75c5\u5bf9\u4e16\u754c\u7684\u5a01\u80c1\u6bd4\u6838\u6218\u4e89\u66f4\u5927\uff0c\u5e76\u5728\u201c\u65b0\u82f1\u683c\u5170\u533b\u5b66\u6742\u5fd7\u201d(The New England Journal Of Medicine)\u4e0a\u64b0\u6587\u79f0\uff0c\u201c\u6d41\u884c\u75c5\u662f\u5c11\u6570\u51e0\u79cd\u53ef\u80fd\u5728\u672a\u6765\u51e0\u5341\u5e74\u8ba9\u4e16\u754c\u5f7b\u5e95\u5012\u9000\u7684\u707e\u96be\u4e4b\u4e00\u3002\u201d\n\u8fd9\u662f\u4ed6\u8bd5\u56fe\u7ed9\u4ed6\u4f1a\u89c1\u7684\u4e16\u754c\u9886\u5bfc\u4eba\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u7684\u4e00\u4e2a\u4e3b\u9898\uff0c\u5305\u62ec2016\u5e74\u5f53\u9009\u603b\u7edf\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u3002\u4f46\u662f\uff0c\u6839\u636e\u76d6\u8328\u7684\u8bf4\u6cd5\uff0c\u8bf4\u670d\u653f\u5ba2\u4eec\u5728\u4e00\u4e9b\u4e0d\u662f\u76f4\u63a5\u5a01\u80c1\u7684\u4e8b\u60c5\u4e0a\u82b1\u8d39\u5927\u91cf\u8d44\u91d1\u88ab\u8bc1\u660e\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\n\u4ed6\u8bf4\uff1a\u201c\u6211\u5e0c\u671b\u6211\u548c\u5176\u4ed6\u4eba\u53d1\u51fa\u7684\u8b66\u544a\u80fd\u4fc3\u4f7f\u5168\u7403\u91c7\u53d6\u66f4\u534f\u8c03\u4e00\u81f4\u7684\u884c\u52a8\u3002\u201d\u201c\u6211\u73b0\u5728\u7684\u5e0c\u671b\u662f\uff0c\u8d1f\u8d23\u4fdd\u62a4\u672c\u56fd\u516c\u6c11\u7684\u4e16\u754c\u5404\u56fd\u9886\u5bfc\u4eba\u5c06\u4ece\u8fd9\u573a\u60b2\u5267\u4e2d\u5438\u53d6\u6559\u8bad\uff0c\u6295\u8d44\u4e8e\u9884\u9632\u672a\u6765\u7206\u53d1\u7684\u7cfb\u7edf\u3002\u201d\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u76d6\u8328\u57fa\u91d1\u4f1a\u5df2\u7ecf\u627f\u8bfa\u63d0\u4f9b3.05\u4ebf\u7f8e\u5143\u7528\u4e8e\u6297\u51fb\u51a0\u72b6\u75c5\u6bd2-\u76d6\u8328\u8bf4\uff0c\u4ed6\u9884\u8ba1\u5728\u5927\u6d41\u884c\u7ed3\u675f\u4e4b\u524d\u5c06\u6295\u5165\u66f4\u591a\u8d44\u91d1\u3002\n\u76d6\u8328\u5728\u51a0\u72b6\u75c5\u6bd2\u548c\u5b89\u5168\u63aa\u65bd\u4e0a\u7684\u575a\u5b9a\u7acb\u573a\u4f7f\u4ed6\u6210\u4e3a\u9634\u8c0b\u8bba\u8005\u7684\u76ee\u6807\u3002\u4ed6\u7684\u57fa\u91d1\u4f1a\u4e0e\u4e16\u754c\u536b\u751f\u7ec4\u7ec7(World Health Organization)\u7684\u5bc6\u5207\u8054\u7cfb\u4f7f\u4ed6\u6210\u4e3a\u7279\u6717\u666e\u6700\u8fd1\u505c\u6b62\u8d44\u52a9\u4e16\u536b\u7ec4\u7ec7\u7684\u51b3\u5b9a\u7684\u731b\u70c8\u6279\u8bc4\u8005\u3002\n\u4ed6\u4e00\u76f4\u4e3b\u5f20\u5927\u89c4\u6a21\u5173\u95ed\u4ee5\u963b\u6b62\u75be\u75c5\u7684\u4f20\u64ad\uff0c\u5e76\u57284\u6708\u521d\u9884\u6d4b\uff0c\u751f\u6d3b\u53ef\u80fd\u4f1a\u57286\u6708\u4efd\u5f00\u59cb\u6062\u590d\u4e00\u4e9b\u8868\u9762\u4e0a\u7684\u6b63\u5e38\u3002\n\u7136\u800c\uff0c\u4e24\u5468\u534a\u540e\uff0c\u8fd9\u79cd\u4e50\u89c2\u60c5\u7eea\u6d88\u9000\u4e86\uff0c\u76d6\u8328\u8868\u793a\uff0c\u968f\u7740\u5404\u5dde\u5f00\u59cb\u653e\u677e\u793e\u4ea4\u8ddd\u79bb\u89c4\u5b9a\u5e76\u91cd\u65b0\u5f00\u653e\u96f6\u552e\u5e97\uff0c\u4ed6\u5bf9\u7b2c\u4e8c\u6ce2\u51a0\u72b6\u75c5\u6bd2\u88ad\u51fb\u7f8e\u56fd\u611f\u5230\u201c\u8d85\u7ea7\u62c5\u5fe7\u201d\u3002", "note_en": "Bill Gates has been warning government leaders about a global pandemic for years, but the coronavirus still  caught nations off guard \u2014 and the philanthropist and Microsoft co-founder said that\u2019s one of his biggest regrets.\n \u201cI wish I had done more to call attention to the danger,\u201d  Gates told the Wall Street Journal. \u201cI feel terrible. The whole point of talking about it was that we could take action and minimize the damage.\u201d\n Gates began warning about the threat of pandemic disease in 2014. At the time, Ebola was on his radar.\n The next year, he gave a  TED talk, calling infectious disease a bigger threat to the world than nuclear war and wrote in the New England Journal of Medicine that \u201can epidemic is one of the few catastrophes that could set the world back drastically in the next few decades.\u201d\n It was a theme he tried to impress upon world leaders he met with, including then-President-elect Donald Trump in 2016. But convincing politicians to spend vast amounts of money on something that wasn\u2019t an immediate threat proved a difficult task, according to Gates.\n  \u201cI wish the warnings that I and other people gave had led to more coordinated global action,\u201d he said. \u201cMy hope now is that leaders around the world, who are responsible for protecting their citizens, will take what has been learned from this tragedy and invest in systems to prevent future outbreaks.\u201d\n The Gates Foundation has committed $305 million to fight coronavirus so far \u2014 and Gates says he  expects to invest much more\u00a0before the pandemic is over.\n Gates\u2019 firm stand on coronavirus and safety measures has made him a  target of conspiracy theorists. And his foundation\u2019s close ties with the World Health Organization made him a  fierce critic of Trump\u2019s recent decision to stop funding the WHO.\n He has advocated mass shutdowns to stop the spread of the disease and predicted in early April that life could  begin to return to some semblance of normal in June.\n Two-and-a-half weeks later, however, that optimism faded, with Gates saying he was \u201c super worried\u201d about a second wave of COVID-19 hitting the U.S. as states began to relax social distancing rules and reopening retail stores.", "posttime": "2020-05-17 07:44:12", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6d41\u884c\u75c5,gates,\u5e0c\u671b", "title": "\u6bd4\u5c14\u00b7\u76d6\u8328\u540e\u6094\u6ca1\u6709\u547c\u5401\u4eba\u4eec\u66f4\u591a\u5730\u5173\u6ce8\u6d41\u884c\u75c5\u7684\u5371\u9669", "title_en": "Bill Gates Regrets Not Calling More Attention to the Danger of Pandemics", "transed": 1, "url": "https://www.digitaltrends.com/news/bill-gates-coronavirus-regrets-covid-19/", "via": "", "real_tags": ["\u6d41\u884c\u75c5", "gates", "\u5e0c\u671b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002465, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u79cd\u53ea\u6709\u5728\u4f60\u72af\u9519\u65f6\u624d\u4f1a\u88ab\u6ce8\u610f\u5230\u7684\u5de5\u4f5c\u3002\u201d\n\u8fd9\u53e5\u8bdd\u6b63\u597d\u6253\u4e2d\u4e86\u6211\u7684\u8138\u3002\u6211\u5728\u5b66\u6821\u4ee5\u5916\u7684\u51e0\u5e74\u91cc\u505a\u8fc7\u8fd9\u79cd\u7c7b\u578b\u7684\u5de5\u4f5c\u3002\u5b83\u662f\u975e\u5e38\u7ed3\u6784\u5316\u548c\u4e8c\u8fdb\u5236\u7684\uff1a\u60a8\u8981\u4e48\u4f7f\u7528\u6240\u6709\u6b63\u786e\u7684\u8f93\u5165\u548c\u8ba1\u7b97\u521b\u5efa\u8d22\u52a1\u6a21\u578b\uff0c\u8981\u4e48\u5c31\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\u3002\u6210\u529f\u7531(\u65e0\u9519\u8bef)\u8f93\u51fa\u91cf\u5b9a\u4e49\u3002\n\u4e0e\u5176\u56e0\u4e3a\u4f60\u7684\u9519\u8bef\u800c\u88ab\u4eba\u6ce8\u610f\uff0c\u4e0d\u5982\u627e\u4e00\u4efd\u56e0\u4f60\u7684\u521b\u9020\u529b\u800c\u5f97\u5230\u56de\u62a5\u7684\u5de5\u4f5c\u3002\n\u8bb2\u6545\u4e8b\u3002\u521b\u9020\u4e00\u4e2a\u5de7\u5999\u7684\u62bd\u8c61\u3002\u5728\u566a\u97f3\u4e2d\u627e\u5230\u4e00\u4e2a\u4fe1\u53f7\u3002\u6ee1\u8db3\u522b\u4eba\u4e0d\u77e5\u9053\u81ea\u5df1\u62e5\u6709\u7684\u9700\u6c42\u3002\u6216\u8005\u50cf\u533f\u540d\u7684\u51b2\u6d6a\u8005\u4e00\u6837\uff0c\u628a\u4e00\u4e2a\u53ea\u4f1a\u5728\u522b\u4eba\u8eab\u4e0a\u6fc0\u8d77\u7684\u60f3\u6cd5\u5199\u6210\u6587\u5b57\u3002", "note_en": "\u201cIt seems like the type of job where you\u2019re only noticed when you make a mistake\u201d\n This phrase hit me right in the face. I did this type of work for a few years out of school. It\u2019s very structured and binary: you either create the financial model with all of the correct inputs and calculations, or you make a mistake. Success is defined by volume of (error free) output.\n  Instead of being noticed for your mistakes, find work in which you\u2019re rewarded for your creativity.\n Tell a story. Create a clever abstraction. Find a signal in noise. Fill a need someone didn\u2019t know they had. Or like the anonymous surfer, put into words an idea that is only stirring in others.", "posttime": "2020-05-17 07:43:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "job,\u6ce8\u610f", "title": "\u201c\u770b\u8d77\u6765\u8fd9\u7c7b\u5de5\u4f5c\u53ea\u6709\u5728\u4f60\u72af\u9519\u65f6\u624d\u4f1a\u88ab\u6ce8\u610f\u5230\u3002\u201d", "title_en": "\u201cSeems like the type of job where you\u2019re only noticed when you make a mistake\u201d", "transed": 1, "url": "https://www.afforded.space/only-noticed-when-you-make-a-mistake/", "via": "", "real_tags": ["job", "\u6ce8\u610f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002464, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u9605\u8bfb\u548c\u56de\u7b54\u5173\u4e8e\u56f4\u68cb\u7684\u5806\u6808\u6ea2\u51fa\u95ee\u9898\u540e\uff0c\u53bb\u5e74\u6211\u5199\u4e86\u4e00\u7bc7Go JSON Cookbook\u5e16\u5b50\uff0c\u603b\u7ed3\u4e86\u56f4\u68cb\u548cJSON\u7684\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u79cd\u4e0eJSON\u76f8\u5173\u7684\u7279\u6b8a\u95ee\u9898\u4e0d\u65ad\u51fa\u73b0\uff0c\u6240\u4ee5\u6211\u60f3\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u5e16\u5b50\u4e2d\u76f4\u63a5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a\u5e16\u5b50\u5c06\u6bd4\u5927\u91cf\u98df\u8c31\u4e2d\u7684\u7279\u5b9a\u90e8\u5206\u66f4\u5bb9\u6613\u94fe\u63a5\u5230\u3002\n\u8fd9\u4e2a\u95ee\u9898\u901a\u5e38\u4f34\u968f\u7740\u4e00\u6bb5JSON\u6570\u636e\uff0c\u8be2\u95ee\u5982\u4f55\u5c06\u5176\u6620\u5c04\u5230GO\u4e0a\u3002\u901a\u5e38\uff0cJSON\u6570\u636e\u662f\u67d0\u79cdAPI\u54cd\u5e94\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\u3002\n\u8fd9\u91cc\u662f\u6211\u4eec\u5c06\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4f7f\u7528\u7684JSON\u793a\u4f8b\u3002\u5b83\u6bd4\u4f60\u5728\u91ce\u5916\u9047\u5230\u7684\u8981\u7b80\u5355\u5f97\u591a\uff0c\u4f46\u5b83\u5e94\u8be5\u80fd\u5f88\u597d\u5730\u63a8\u5e7f\u5230\u5176\u4ed6\u7ed3\u6784\uff1a\n{&#34\uff1b\u5c5e\u6027&#34\uff1b\uff1a[{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u989c\u8272&#34\uff1b\uff0c&#34\uff1b\u8ba1\u6570&#34\uff1b\uff1a9}\uff0c{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u5bb6\u65cf&#34\uff1b\uff0c&#34\uff1b\u8ba1\u6570&#34\uff1b\uff1a127}]\uff0c&#34\uff1b\u6c34\u679c&#34\uff1b\uff1a\uff1a[{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u6a59\u8272&#34\uff1b\uff0c&#34\uff1b\u751c\u5ea6&#34\uff1b\uff1a12.3\uff0c&#34\uff1b\u5c5e\u6027&#34\uff1b\uff1a{&#34\uff1b\u5bb6\u5ead&#34\uff1b\uff1a&#34\uff1b\u67d1\u6a58&#34\uff1b}}]}\u3002\n\u7b2c\u4e00\u79cd\u65b9\u6cd5(\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u662f\u9ed8\u8ba4\u7684)\u662f\u5b8c\u5168\u4fdd\u771f\u7ed3\u6784\u8868\u793a\u3002\u8fd9\u610f\u5473\u7740\u4eceJSON\u5bf9\u8c61\u5230GO\u7ed3\u6784\u7684\u6620\u5c04\u662f\u5b8c\u5168\u7c7b\u578b\u5b89\u5168\u7684\u3002\u624b\u5de5\u7f16\u5199\u8fd9\u6837\u7684\u7ed3\u6784\u7c7b\u578b\u5df2\u7ecf\u5f88\u5bb9\u6613\u4e86\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u8ba9\u8fd9\u4ef6\u4e8b\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u7531JSON-to-Go\u751f\u6210\u7684\u7ed3\u6784\uff1a\n\u7c7b\u578bAutoGenerated struct{Attrs[]struct{name string`json\uff1a&#34\uff1bname&#34\uff1b`count int`json\uff1a&#34\uff1bcount&#34\uff1battrs&#34\uff1b`fruits[]struct{name string`json\uff1a&#34\uff1bname&#34\uff1b`Sweetness float64`json\uff1a&#34\uff1bSweetness&#34\uff1b`Attr struct{Family String`json\uff1a&&\u3002`}`json\uff1a&#34\uff1b\u6c34\u679c&#34\uff1b`}\u3002\n\u5c06\u6211\u4eec\u7684JSON\u89e3\u6790\u5230\u6b64\u7ed3\u6784\u4e2d\u5e76\u8fed\u4ee3\u6240\u6709\u6c34\u679c\u4ee5\u627e\u5230\u5b83\u4eec\u7684\u751c\u5ea6\u662f\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u60c5[1]\uff1a\n\u5982\u679cerr\uff1a=json\uff0c\u5219\u81ea\u52a8\u751f\u6210var ag\u3002Unmarshal(jsonText\uff0c&amp\uff1bag)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}FOR_\uff0cFOR\uff1a=RANGE AG.\u3002\u6c34\u679c{fmt.\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u6c34\u679c\u3002\u540d\u5b57\uff0c\u6c34\u679c\u3002\u751c\u5ea6)}\n\u8fd9\u5e76\u4e0d\u6bd4\u60a8\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\u53d1\u73b0\u7684\u66f4\u5197\u957f\uff0c\u4f46\u662f\u5b83\u5b8c\u5168\u662f\u7c7b\u578b\u5b89\u5168\u7684\u3002\u6b64\u5916\uff0c\u89e3\u6790\u65f6\u4f1a\u81ea\u52a8\u9a8c\u8bc1JSON\u4ee5\u5339\u914d\u5916\u90e8\u7ed3\u6784\u3002\nGo JSON\u5305\u652f\u6301\u4f7f\u7528\u53cd\u5c04\u89e3\u6790\u6210\u901a\u7528\u8868\u793a\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u52a8\u6001\u8bed\u8a00\u4e2d\u7684AMAP-of-List-of-map\u6216\u7c7b\u4f3c\u7684\u547d\u540d\u6cd5\uff1b\u901a\u5e38\uff0c\u5047\u8bbe\u9876\u7ea7JSON\u5b57\u6bb5\u662f\u5b57\u7b26\u4e32(\u5f88\u5b89\u5168)\uff0c\u6211\u4eec\u53ef\u4ee5\u8981\u6c42json.Unmarshal\u5c06JSON\u89e3\u6790\u4e3amap[string]\u63a5\u53e3{}\u3002\u5728\u5e55\u540e\uff0c\u89e3\u6790\u5668\u5c06\u6839\u636e\u5b83\u5728JSON\u4e2d\u9047\u5230\u7684\u5185\u5bb9\u521b\u5efa\u5177\u4f53\u7684GO\u7c7b\u578b\uff0c\u4f46\u662fGO\u7f16\u8bd1\u5668\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u8fd9\u4e9b\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528json.Unmarshal\u5c06JSON\u89e3\u6790\u6210\u4e00\u4e2amap[string]\u63a5\u53e3{}\u3002\u5728\u5e55\u540e\uff0c\u89e3\u6790\u5668\u5c06\u6839\u636e\u5b83\u5728JSON\u4e2d\u9047\u5230\u7684\u5185\u5bb9\u521b\u5efa\u5177\u4f53\u7684GO\u7c7b\u578b\uff0c\u4f46\u662fGO\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u77e5\u9053\u8fd9\u4e9b\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u3002\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5b83\u6253\u5370\u51fa\u6240\u6709\u7684\u6c34\u679c\u540d\u79f0\u548c\u5b83\u4eec\u7684\u751c\u5ea6\uff0c\u800c\u4e0d\u4f7f\u7528struct\u58f0\u660e\uff1a\n\u5982\u679cerr\uff1a=json\uff0c\u5219\u53d8\u91cfm\u6620\u5c04[\u5b57\u7b26\u4e32]\u63a5\u53e3{}\u3002Unmarshal(jsonText\uff0c&amp\uff1bm)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}\u6c34\u679c\uff0cOK\uff1a=m[&#34\uff1b\u6c34\u679c&#34\uff1b]\u5982\u679c\uff01\u597d\u7684{\u8bb0\u5f55\u3002FATAL(&#34\uff1b&#39\uff1b\u6c34\u679c&#39\uff1b\u5b57\u6bb5\u672a\u627e\u5230&#34\uff1b)}fSlice\uff0cOK\uff1a=\u6c34\u679c\u3002([]interface{})if\uff01\u597d\u7684{\u8bb0\u5f55\u3002FATAL(&#34\uff1b&#39\uff1bFIELS&#39\uff1bFIELD\u4e0d\u662f\u5207\u7247&#34\uff1b)}for_\uff0cf\uff1a=range fSlice{fmap\uff0cok\uff1a=f.(map[String]interface{})if\uff01\u597d\u7684{\u8bb0\u5f55\u3002\u81f4\u547d(&#34\uff1b&#39\uff1b\u6c34\u679c&#39\uff1b\u5143\u7d20\u4e0d\u662f\u5730\u56fe&#34\uff1b)}\u540d\u79f0\uff0cOK\uff1a=FMAP[&#34\uff1b\u540d\u79f0&#34\uff1b]\u5982\u679c\uff01\u597d\u7684{\u8bb0\u5f55\u3002FATAL(&#34\uff1bFIELS\u5143\u7d20\u6ca1\u6709&#39\uff1bName&#39\uff1bfield&#34\uff1b)}Sweetness\uff0cOK\uff1a=FMAP[&#34\uff1bSweetness&#34\uff1b]if\uff01\u597d\u7684{\u8bb0\u5f55\u3002\u81f4\u547d(#34\uff1b\u6c34\u679c\u5143\u7d20\u6ca1\u6709\u751c\u5ea6#34\uff1b\u5b57\u6bb5#34\uff1b)}FMT\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u540d\u79f0\uff0c\u751c\u5ea6)}\u3002\n\u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u8fdb\u884c\u5927\u91cf\u7684\u9519\u8bef\u68c0\u67e5--\u6211\u4eec\u88ab\u8feb\u4ed4\u7ec6\u68c0\u67e5\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5b58\u5728\u548c\u6211\u4eec\u9700\u8981\u7684\u6bcf\u4e2a\u503c\u7684\u7c7b\u578b\uff0c\u624d\u80fd\u627e\u5230\u6211\u4eec\u611f\u5174\u8da3\u7684\u5b9e\u9645\u5b57\u6bb5/\u503c\u5bf9\u3002\n\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u6709\u5f88\u591a\u4ee3\u7801\uff0c\u4f46\u8fd9\u4e0e\u7f16\u5199\u7c7b\u4f3c\u4ee3\u7801\u65f6\u52a8\u6001\u8bed\u8a00\u5728\u5e55\u540e\u6240\u505a\u7684\u975e\u5e38\u76f8\u4f3c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679cerr\uff1a=json\uff0c\u5219\u53d8\u91cfm\u6620\u5c04[\u5b57\u7b26\u4e32]\u63a5\u53e3{}\u3002Unmarshal(jsonText\uff0c&amp\uff1bm)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(Err)}\u6c34\u679c\uff1a=m[&#34\uff1b\u6c34\u679c&#34\uff1b].([]interface{})for_\uff0cf\uff1a=Range Fruits{\u6c34\u679c\uff1a=f.(map[string]interface{})fmt\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u6c34\u679c[&#34\uff1b\u540d\u79f0&34\uff1b]\uff0c\u6c34\u679c[&#34\uff1b\u751c\u5ea6&#34\uff1b])}\u3002\n\u8fd9\u4e0e\u5b83\u5728Python\u4e2d\u7684\u5916\u89c2\u6ca1\u6709\u592a\u5927\u4e0d\u540c(\u9664\u4e86\u7c7b\u578b\u65ad\u8a00)\u3002\u6ce8\u610f\u5230\u5c11\u4e86\u4ec0\u4e48\u5417\uff1f\u9519\u8bef\u68c0\u67e5\u3002\u76f8\u53cd\uff0c\u5982\u679c\u60c5\u51b5\u4e0d\u7b26\u5408\u9884\u671f\uff0cGo\u5c06\u5728\u8fd0\u884c\u65f6\u51fa\u73b0\u6050\u614c\u3002\u8fd9\u518d\u6b21\u7c7b\u4f3c\u4e8e\u901a\u5e38\u4f7f\u7528\u5f02\u5e38\u7684\u52a8\u6001\u8bed\u8a00\u3002\u5728Go\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8ba9\u4ee3\u7801\u5728\u51fa\u73b0\u9519\u8bef\u65f6\u6b7b\u673a\u5e76\u4f7f\u7528recover\u5728\u66f4\u9ad8\u7ea7\u522b\u6355\u83b7\u6b7b\u673a\u6765\u8fbe\u5230\u5927\u81f4\u76f8\u540c\u7684\u6548\u679c\uff1b\u8fd9\u5f88\u5438\u5f15\u4eba\uff0c\u4f46\u4e5f\u6709\u5176\u81ea\u8eab\u7684\u95ee\u9898\u3002\n\u6240\u4ee5\u4ee3\u7801\u7684\u5197\u957f\u5e76\u4e0d\u662f\u56e0\u4e3a\u5b83\u7684\u975e\u7c7b\u578b\u5316\u6027\u8d28\uff1b\u5b83\u4e3b\u8981\u662f\u7531\u4e8eGO\u663e\u5f0f\u7684\u9519\u8bef\u68c0\u67e5\u89c4\u8303\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86JSON\u5bf9\u8c61\u7684\u5b8c\u5168\u7c7b\u578b\u5b89\u5168\u8868\u793a\u548c\u975e\u7c7b\u578b\u5316\u8868\u793a\u3002\u4e00\u4e2a\u6709\u8da3\u7684\u6298\u8877\u529e\u6cd5\u662f\u4f7f\u7528\u6df7\u5408\u8868\u793a\uff0c\u5728\u8fd9\u79cd\u8868\u793a\u4e2d\uff0c\u6211\u4eec\u4ee5\u4e00\u79cd\u975e\u7c7b\u578b\u5316\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u76f4\u5230\u6211\u4eec\u627e\u5230JSON\u4e2d\u6709\u8da3\u7684\u90e8\u5206\uff0c\u7136\u540e\u6211\u4eec\u60f3\u8981\u7528\u4e00\u4e2a\u5b9e\u9645\u7684\u7ed3\u6784\u6765\u8868\u793a\u5b83\u3002\n\u53d8\u91cfm\u6620\u5c04[\u5b57\u7b26\u4e32]json\u3002\u5982\u679cerr\uff1a=json\uff0c\u5219\u4e3aRawMessage\u3002Unmarshal(jsonText\uff0c&amp\uff1bm)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}\u6c34\u679c\u539f\u59cb\uff0cOK\uff1a=m[&#34\uff1b\u6c34\u679c&#34\uff1b]\u5982\u679c\uff01\u597d\u7684{\u8bb0\u5f55\u3002\u81f4\u547d(&#34\uff1b\u9884\u8ba1\u4f1a\u627e\u5230&#39\uff1b\u6c34\u679c&#39\uff1b&#34\uff1b)}\u53ef\u53d8\u6c34\u679c[]\u6c34\u679c\uff0c\u5982\u679c\u9519\u8bef\uff1a=json\u3002Unmarshal(\u6c34\u679c\u539f\u59cb\uff0c&amp\uff1b\u6c34\u679c)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}for_\uff0c\u6c34\u679c\uff1a=\u8303\u56f4\u6c34\u679c{fmt.\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u6c34\u679c\u3002\u540d\u5b57\uff0c\u6c34\u679c\u3002\u751c\u5ea6)}\u3002\n\u6ce8\u610fjson.RawMessage\u7684\u7528\u6cd5\u3002\u6211\u4eec\u5728\u7b2c\u4e00\u4e2a\u8c03\u7528\u4e2d\u544a\u8bc9json.Unmarshal\u7684\u662f\uff1a\u4f7f\u7528\u5b57\u7b26\u4e32\u952e\u5c06\u5bf9\u8c61\u89e3\u6790\u4e3aAMAP\uff0c\u4f46\u4e0d\u89e3\u6790\u8fd9\u4e9b\u503c\u3002\u8fd9\u6837\u505a\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u5c06\u503c\u8bbe\u7f6e\u4e3ainterface{}\uff0cjson.Unmarshal\u4f1a\u5c06\u5b83\u4eec\u89e3\u6790\u6210\u5177\u4f53\u7c7b\u578b\uff0c\u6216\u6620\u5c04/\u5207\u7247\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u901a\u7528\u8868\u793a\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5c06\u503c\u4fdd\u6301\u4e3ajson.RawMessage\u5141\u8bb8\u6211\u4eec\u5ef6\u8fdf\u89e3\u6790\uff0c\u76f4\u5230\u6211\u4eec\u77e5\u9053\u8981\u89e3\u6790\u5230\u7684\u66f4\u5177\u4f53\u7684\u7c7b\u578b-\u6bd4\u5982\u672c\u4f8b\u4e2d\u7684Fruit\u3002\n\u8fd9\u79cd\u5ef6\u8fdf\u7684\u89e3\u6790\u53ef\u4ee5\u5e26\u6765\u989d\u5916\u7684\u597d\u5904\uff0c\u6bd4\u5982\u6027\u80fd\u3002\u6211\u4eec\u53ef\u80fd\u6b63\u5728\u89e3\u6790\u4e00\u4e2a\u5f88\u5927\u7684JSON\u5bf9\u8c61\uff0c\u4f46\u53ea\u5bf9\u5355\u4e2a\u952e\u611f\u5174\u8da3\uff1b\u4f7f\u7528map[string]json.RawMessage\u544a\u8bc9\u89e3\u6790\u5668\u4e0d\u8981\u89e3\u6790\u503c\u3002\u6211\u4eec\u7a0d\u540e\u53ea\u80fd\u89e3\u6790\u611f\u5174\u8da3\u7684\u503c\uff0c\u800c\u4e0d\u4f1a\u6d6a\u8d39\u5176\u4ed6\u503c\u4e0a\u7684\u8d44\u6e90\u3002\n\u5f53\u6211\u4eec\u5bf9\u590d\u6742\u7684JSON\u7ed3\u6784\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206\u611f\u5174\u8da3\u65f6\uff0c\u6df7\u5408\u65b9\u6cd5\u901a\u5e38\u5f88\u6709\u7528\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u60f3\u5b8c\u5168\u9a8c\u8bc1\u5b83\u3002\u6b64\u5916\uff0c\u4e00\u4e9bJSON\u7ed3\u6784\u5b9e\u9645\u4e0a\u6ca1\u6709\u5339\u914d\u7684\u9759\u6001\u7c7b\u578b(\u4f8b\u5982\uff0c\u5b57\u6bb5\u53ef\u4ee5\u57fa\u4e8e\u5176\u4ed6\u5b57\u6bb5\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b)\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528JSON\u7684\u5168\u4fdd\u771f\u7ed3\u6784\u8868\u793a\u53ef\u80fd\u5f88\u9ebb\u70e6\uff0c\u4e5f\u53ef\u80fd\u4e0d\u53ef\u884c\uff0c\u800c\u6df7\u5408\u65b9\u6cd5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6298\u8877\u65b9\u6848\uff0c\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u516c\u5f00\u6211\u4eec\u5b9e\u9645\u5173\u5fc3\u7684\u6570\u636e\u7247\u6bb5\u3002", "note_en": "Following some period of time reading and answering Stack Overflow questionsabout Go, last year I wrote the  Go JSON Cookbook post to summarize someof the common issues with Go and JSON. Since then, I noticed a particular kindof JSON-related question that keeps recurring, so I want to address it directlyin a separate post that will be easier to link to than specific sections in alarge &#34;cookbook&#34;.\n The question is commonly accompanied by a  snippet of JSON data, asking howto map it onto Go. Typically, the JSON data is some sort of API response, butit could really be anything.\n Here&#39;s a sample piece of JSON we&#39;ll be working with in this post. It&#39;s muchsimpler than what you&#39;d encounter &#34;in the wild&#34;, but it should generalize wellto other structures:\n { &#34;attrs&#34;: [ { &#34;name&#34;: &#34;color&#34;, &#34;count&#34;: 9 }, { &#34;name&#34;: &#34;family&#34;, &#34;count&#34;: 127 }], &#34;fruits&#34;: [ { &#34;name&#34;: &#34;orange&#34;, &#34;sweetness&#34;: 12.3, &#34;attr&#34;: {&#34;family&#34;: &#34;citrus&#34;} } ]}\n The first approach, which should be the default in most cases is the full-fidelity struct representation. This means a completely type-safe mappingfrom the JSON object to a Go  struct. It&#39;s easy enough to write suchstruct types by hand, but tools exist that make this easier. For example,here&#39;s the struct generated by  JSON-to-Go:\n type  AutoGenerated  struct  {  Attrs  [] struct  {  Name  string  `json:&#34;name&#34;`  Count  int  `json:&#34;count&#34;`  }  `json:&#34;attrs&#34;`  Fruits  [] struct  {  Name  string  `json:&#34;name&#34;`  Sweetness  float64  `json:&#34;sweetness&#34;`  Attr  struct  {  Family  string  `json:&#34;family&#34;`  }  `json:&#34;attr&#34;`  }  `json:&#34;fruits&#34;` }\n Parsing our JSON into this struct and iterating over all fruits to find theirsweetness is a simple matter of  [1]:\n var  ag  AutoGenerated if  err  :=  json . Unmarshal ( jsonText ,  &amp; ag );  err  !=  nil  {  log . Fatal ( err ) } for  _ ,  fruit  :=  range  ag . Fruits  {  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  fruit . Name ,  fruit . Sweetness ) }\n This isn&#39;t much more verbose than you&#39;d find in dynamic languages, and yet it&#39;scompletely type safe. Moreover, the JSON is automatically validated to match outstruct upon parsing.\n The Go JSON package supports parsing into a generic representation usingreflection. This is akin to amap-of-lists-of-maps or  similar nomenclature in dynamic languages;generally, assuming the top-level JSON fields are strings (a safe bet), we canask  json.Unmarshal to parse the JSON into a  map[string]interface{}.Under the hood, the parser will create concrete Go types according to what itencounters in JSON, but the Go compiler has no way of knowing what those typesare at compile time, so we&#39;ll have to use runtime type assertions to unravelthem.\n Here&#39;s a complete example that prints out all the fruit names and theirsweetness, without using a struct declaration:\n var  m  map [ string ] interface {} if  err  :=  json . Unmarshal ( jsonText ,  &amp; m );  err  !=  nil  {  log . Fatal ( err ) } fruits ,  ok  :=  m [ &#34;fruits&#34; ] if  ! ok  {  log . Fatal ( &#34;&#39;fruits&#39; field not found&#34; ) } fslice ,  ok  :=  fruits .([] interface {}) if  ! ok  {  log . Fatal ( &#34;&#39;fruits&#39; field not a slice&#34; ) } for  _ ,  f  :=  range  fslice  {  fmap ,  ok  :=  f .( map [ string ] interface {})  if  ! ok  {  log . Fatal ( &#34;&#39;fruits&#39; element not a map&#34; )  }  name ,  ok  :=  fmap [ &#34;name&#34; ]  if  ! ok  {  log . Fatal ( &#34;fruits element has no &#39;name&#39; field&#34; )  }  sweetness ,  ok  :=  fmap [ &#34;sweetness&#34; ]  if  ! ok  {  log . Fatal ( &#34;fruits element has no &#39;sweetness&#39; field&#34; )  }  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  name ,  sweetness ) }\n Note the huge amount of error checking require here - we are forced to carefullycheck for the existence of every field and the type of every value we need onthe way to the actual field/value pairs we&#39;re interested in.\n This seems like a lot of code, but this is very similar to what dynamiclanguages are doing behind the scenes when similar code is written. For example,we could write the same code as follows:\n var  m  map [ string ] interface {} if  err  :=  json . Unmarshal ( jsonText ,  &amp; m );  err  !=  nil  {  log . Fatal ( err ) } fruits  :=  m [ &#34;fruits&#34; ].([] interface {}) for  _ ,  f  :=  range  fruits  {  fruit  :=  f .( map [ string ] interface {})  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  fruit [ &#34;name&#34; ],  fruit [ &#34;sweetness&#34; ]) }\n Which isn&#39;t very different from how it&#39;d look in, say, Python (besides the typeassertions). Notice what&#39;s missing? The error checking. Instead, Go will panicat runtime if something is not as expected. This is, once again, similar todynamic languages which typically use exceptions. In Go you could achieveroughly the same effect by letting the code panic in case of errors and using recover to catch the panic at a higher level; this is appealing  but has itsown problems.\n So the verbosity of the code is not due to its untyped nature; it&#39;s mostly dueto the Go explicit error checking norms.\n So far we&#39;ve seen a fully type-safe representation of a JSON object and an&#34;untyped&#34; representation. An interesting compromise is using a hybridrepresentation, in which we proceed in an untyped manner until we hit theinteresting piece of JSON, which we then want to represent with an actualstruct.\n    var  m  map [ string ] json . RawMessage if  err  :=  json . Unmarshal ( jsonText ,  &amp; m );  err  !=  nil  {  log . Fatal ( err ) } fruitsRaw ,  ok  :=  m [ &#34;fruits&#34; ] if  ! ok  {  log . Fatal ( &#34;expected to find &#39;fruits&#39;&#34; ) } var  fruits  [] Fruit if  err  :=  json . Unmarshal ( fruitsRaw ,  &amp; fruits );  err  !=  nil  {  log . Fatal ( err ) } for  _ ,  fruit  :=  range  fruits  {  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  fruit . Name ,  fruit . Sweetness ) }\n Note the usage of  json.RawMessage. What we&#39;re telling json.Unmarshal in the first call is: parse the object into amap with string keys, but leave the values unparsed. It&#39;s important to do thisbecause if we set the values to  interface{},  json.Unmarshal will parsethem into concrete types, or maps/slices thereof, as we&#39;ve seen in the genericrepresentation. Keeping the values as  json.RawMessage instead lets us delay the parse to until we know a more concrete type to parse to - like Fruit in this case.\n Such delayed parsing can have additional benefits like performance.We may be parsing a large JSON object but are only interested in a single key;using  map[string]json.RawMessage tells the parser not to parse the values.We can later only parse the interesting values, not wasting resources on others.\n The hybrid approach is often useful when we&#39;re interested in a small part of acomplicated JSON structure which we don&#39;t care to fully validate. Moreover,some JSON structures actually don&#39;t have a matching static type (e.g. fields canhave different types based on other fields). In these cases using afull-fidelity struct representation of the JSON may be either cumbersome orinfeasible, and the hybrid approach is a good compromise to expose the pieces ofdata we actually care about more conveniently.", "posttime": "2020-05-17 07:27:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8868\u793a,json", "title": "\u5728GO\u4e2d\u8868\u793aJSON\u7ed3\u6784", "title_en": "Representing JSON Structures in Go", "transed": 1, "url": "https://eli.thegreenplace.net/2020/representing-json-structures-in-go/", "via": "", "real_tags": ["\u8868\u793a", "json"]}, {"category": "", "categoryclass": "", "imagename": "f8e2dd5d8d9f4bc16662f67c25cd5fae.jpg", "infoid": 1002462, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e95\u7279\u5f8b-\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u62d2\u7edd\u8ba9\u5c0f\u9884\u7b97\u548c\u5b98\u50da\u4f5c\u98ce\u963b\u788d\u4f1f\u5927\u7684\u6e38\u4e50\u573a\u3002\n\u5468\u516d\uff0c25\u540d\u5fd7\u613f\u5272\u8349\u673a\u79bb\u5f00\u9694\u79bb\u533a\uff0c\u4e89\u593a\u51a0\u519b\u8170\u5e26\uff0c\u6388\u4e88\u572812\u5c0f\u65f6\u7684Motown Mowdown\u4e2d\u5272\u8349\u6700\u591a\u7684\u4eba\u3002\n\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u521b\u59cb\u4eba\u6c64\u59c6\u00b7\u7eb3\u5c14\u591a(Tom Nardo)\u5c55\u793a\u4e86\u5728\u5e95\u7279\u5f8b\u6c49\u9ed8\u4f2f\u683c\u6e38\u4e50\u573a(Hammerberg Playfield)\u4e8e2020\u5e745\u670816\u65e5(\u661f\u671f\u516d)\u5f00\u59cb\u768412\u5c0f\u65f6Motown Mowdown\u6d3b\u52a8\u4e2d\uff0c\u5272\u8349\u6700\u591a\u7684\u6210\u5458\u83b7\u5f97\u7684\u51a0\u519b\u8170\u5e26\u3002(\u6444\u5f71\uff1a\u9a6c\u514b\u65af\u00b7\u5965\u5c14\u8482\u65af\uff0c\u300a\u5e95\u7279\u5f8b\u65b0\u95fb\u300b)\u3002\n\u4ed6\u4eec\u5728\u5e95\u7279\u5f8b\u897f\u4fa7\u7684\u975e\u56fd\u6709\u516c\u56edHammerberg Playfield\u5f00\u59cb\u884c\u52a8\uff0c\u5904\u7406\u6742\u8349\u4e1b\u751f\u7684\u8349\u576a\uff0c\u4fee\u590d\u5df4\u987f-\u9ea6\u514b\u6cd5\u5170(Barton-McFarland)\u793e\u533a\u7684\u79cb\u5343\u5957\u88c5\uff0c\u7136\u540e\u5206\u5934\u6e05\u7406\u57ce\u5e02\u4e2d\u5176\u4ed610\u4e2a\u5e9f\u5f03\u7684\u6e38\u4e50\u573a\u3002\n50\u5c81\u7684\u6c64\u59c6\u00b7\u7eb3\u5c14\u591a(Tom Nardo)\u6765\u81ea\u4f2f\u660e\u7ff0\uff0c2009\u5e74\u5f00\u59cb\u5728\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u6d3e\u5de5\u4f5c\uff0c\u4ed6\u8bf4\uff0c\u8fd9\u4e2a\u516c\u56ed\u6ca1\u6709\u4eba\u62e5\u6709\uff0c\u5b83\u53ea\u662f\u4ece\u88c2\u7f1d\u4e2d\u6389\u4e86\u51fa\u6765\u3002\u6211\u4eec\u53ea\u662f\u8bd5\u7740\u8ba9\u5b83\u6d3b\u7740\u3002\u5982\u679c\u6ca1\u6709\u56e2\u961f\uff0c\u4f60\u4e0d\u53ef\u80fd\u5728\u51e0\u5929\u5185\u7528\u5272\u8349\u673a\u4fee\u526a\u8fd9\u4e2a\u516c\u56ed\u7684\u8349\u576a.\u3002\n\u7a7a\u6c14\u4e2d\u5145\u6ee1\u4e86\u82b1\u7c89\uff0c\u56e0\u4e3a\u8fd9\u7fa4\u4eba\u586b\u6ee1\u4e86\u51e0\u5341\u4e2a\u5783\u573e\u888b\uff0c\u53ea\u7559\u4e0b\u4e86\u4fee\u526a\u5f97\u5b8c\u7f8e\u65e0\u7f3a\u7684\u7530\u91ce\u3002\u53c2\u4e0e\u8005\u8868\u793a\uff0c\u5728\u793e\u4ea4\u8ddd\u79bb\u7684\u540c\u65f6\uff0c\u8fd9\u662f\u4e00\u9879\u4ee4\u4eba\u6ee1\u8db3\u7684\u6d3b\u52a8\u3002\n\u6b65\u5c65\u8e52\u8dda\u5730\u5750\u8fdb\u5979\u7684Dixie Chopper\uff0c\u6c49\u5a1c\u00b7\u8303\u57c3\u5e93\u7279(Hannah VanEckoute)\u51c6\u5907\u593a\u56de\u5979\u7684\u7fbd\u7ed2\u51a0\u519b\u5934\u8854\u3002\u5979\u548c\u5979\u6765\u81ea\u8d1d\u5c14\u7ef4\u5c14\u7684\u4e08\u592b\u76d6\u5947(Gage)\u628a\u4ed6\u4eec\u7684\u4e24\u53f0\u5272\u8349\u673a\u548c\u9664\u8349\u673a\u5e26\u5230\u4e86\u52a0\u5165\u8fd9\u4e2a\u56e2\u4f19\u7684\u7b2c\u56db\u4e2a\u5e74\u5934\u3002\n28\u5c81\u7684VanEckoute\u8bf4\uff0c\u5f53\u4eba\u4eec\u770b\u5230\u6211\u4eec\u6240\u505a\u7684\u4e8b\u60c5\u65f6\uff0c\u4ed6\u4eec\u7684\u53cd\u5e94\u603b\u662f\u5982\u6b64\u7279\u522b\u3002\u6709\u65f6\u5019\u8349\u592a\u9ad8\u4e86\uff0c\u5b69\u5b50\u4eec\u751a\u81f3\u8fdb\u4e0d\u53bb\uff0c\u7136\u540e\u6211\u4eec\u79bb\u5f00\u65f6\u4ed6\u4eec\u8138\u4e0a\u7684\u7b11\u5bb9\u5c31\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6210\u5c31\u3002\n5\u670816\u65e5\uff0c\u661f\u671f\u516d\uff0c\u5e95\u7279\u5f8b\uff0c\u6bd4\u5c14\u00b7\u5362\u5361\u65af\u5728Hammerberg Playfield\u6361\u5783\u573e\u3002(\u6444\u5f71\uff1a\u5e95\u7279\u5f8b\u65b0\u95fb\u62a5Max Ortiz)\u3002\n\u5341\u5e74\u524d\uff0c\u7eb3\u5c14\u591a\u4eceCraigslist\u4e70\u4e86\u4e00\u8f86\u8349\u576a\u62d6\u62c9\u673a\uff0c\u6765\u523075\u53f7\u5dde\u9645\u516c\u8def\u548c8\u82f1\u91cc\u8def\u4e0a\u7684\u4e00\u4e2a\u516c\u56ed\u3002\u4ed6\u8bf4\uff0c\u4ed6\u5728Facebook\u4e0a\u5efa\u7acb\u4e86\u4e00\u4e2a\u7fa4\uff0c\u5bfb\u627e\u5176\u4ed6\u53ef\u4ee5\u52a0\u5165\u8fd9\u4e2a\u9879\u76ee\u7684\u4eba\uff0c\u6700\u7ec8\uff0c\u8fd9\u4e2a\u7fa4\u53d8\u6210\u4e86\u4e00\u4e2a\u5272\u8349\u673a\u56e2\u4f19\u3002\n\u7eb3\u5c14\u591a\u8bf4\uff0c\u5f53\u5e95\u7279\u5f8b\u5373\u5c06\u7533\u8bf7\u7834\u4ea7\u65f6\uff0c\u5e95\u7279\u5f8b\u6709300\u591a\u4e2a\u516c\u56ed\uff0c\u8be5\u5e02\u8868\u793a\u53ea\u80fd\u7167\u987e\u5927\u7ea672\u4e2a\u516c\u56ed\u3002\n\u8d2d\u4e70\u7167\u7247\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u6d3e\u7684\u67e5\u7406\u00b7\u65af\u76ae\u65af\u5728\u4ed6\u4eec2020\u5e74\u7684\u6469\u57ce\u964d\u843d\u8d5b\u4e2d\u4fee\u7406\u79cb\u5343\u3002(\u6444\u5f71\uff1a\u9a6c\u514b\u65af\u00b7\u5965\u5c14\u8482\u65af\uff0c\u300a\u5e95\u7279\u5f8b\u65b0\u95fb\u300b)\u3002\n\u53bb\u5e74\uff0c\u521b\u59cb\u4eba\u6210\u7acb\u4e86\u4e00\u4e2a\u540d\u4e3a\u788e\u7247\u4e4b\u654c\u7684\u975e\u8425\u5229\u6027\u7ec4\u7ec7\uff0c\u8fd8\u4e3b\u529e\u4e86\u5783\u573e\u6355\u9c7c\u6d3b\u52a8\uff0c\u540c\u4e00\u4e2a\u7ec4\u7ec7\u4ece\u5e95\u7279\u5f8b\u6cb3\u4e2d\u62c9\u51fa\u5783\u573e\u3002\n\u8be5\u7ec4\u7ec7\u8868\u793a\uff0c\u7531\u4e8e\u57ce\u5e02\u6b63\u5728\u8ffd\u8d76\u4ed6\u4eec\uff0c\u6bcf\u5e74\u88ab\u4fa6\u5bdf\u7684\u5730\u5757\u8d8a\u6765\u8d8a\u5c11\u3002\n\u7eb3\u5c14\u591a\u7b11\u7740\u8bf4\uff1a\u201c\u6211\u4eec\u5e0c\u671b\u4ed6\u4eec\u80fd\u8ba9\u6211\u4eec\u5012\u95ed\u3002\u201d\u6211\u4eec\u53ef\u4ee5\u6210\u7acb\u4e00\u4e2a\u4fdd\u9f84\u7403\u8054\u76df\u4ec0\u4e48\u7684\u3002", "note_en": "Detroit\u00a0\u2014 The Detroit Mower Gang refuses to let small budgets and bureaucracy stand in the way of great playgrounds.\n Twenty-five volunteer lawnmowers\u00a0left quarantine Saturday to compete\u00a0for a championship belt awarded to the person who\u00a0cuts the most grass during their 12-hour Motown Mowdown.\n Buy Photo Tom Nardone, founder of the Detroit Mower Gang, shows off the championship belt given to the member who mows the most grass in their 12- hour Motown Mowdown which started at Hammerberg Playfield in Detroit on Saturday, May 16, 2020. \u00a0 (Photo: Max Ortiz, The Detroit News)\n They kicked off at Hammerberg Playfield, an un-owned park on Detroit&#39;s west side, tackling the overgrown lawn, repairing swingsets for the Barton-McFarland neighborhood before splitting up to cleanup 10 other abandoned playgrounds in the city.\n &#34;No one owns this particular park, it just fell through the cracks,&#34; said Tom Nardone, 50, of Birmingham, who started\u00a0the Detroit Mower Gang in 2009. &#34;We just try to keep it alive. ...\u00a0Without a group, you couldn&#39;t mow this park with a mower in a couple of days.&#34;\n  The air was filled with pollen as the group filled dozens of trash bags and only leaving behind perfectly trimmed fields. Participants said it was a fulfilling activity to do while social distancing.\n Staddled into her Dixie Chopper, Hannah VanEckoute was ready to reclaim her title as the Mowdown champion. She and her\u00a0husband, Gage, from Belleville, brought their two lawnmowers and weed whackers to their fourth year with the gang.\n &#34;The reaction from people when they see what we&#39;ve done is always so special,&#34; said VanEckoute, 28. &#34;Sometimes the grass is so tall kids can&#39;t even get into it and then the smile on their faces as we leave is such a great accomplishment.&#34;\n Buy Photo Bill Lucas picks up trash at Hammerberg Playfield in Detroit on Saturday, May 16. \u00a0 (Photo: Max Ortiz, The Detroit News)\n A decade ago, Nardone bought a lawn tractor off Craigslist and took to a park on Interstate 75 and Eight Mile Road. He started a  Facebook group to find others who could join the project and eventually, it turned into a mower gang, he said.\n &#34;When the city was getting close to filing for bankruptcy there were more than 300 parks in Detroit and the city said it could only care for like 72,&#34; said Nardone.\n Buy Photo Charlie Spiess, of the Detroit Mower Gang, repairs a swing during their 2020 Motown Mowdown. \u00a0 (Photo: Max Ortiz, The Detroit News)\n Last year, the founders formed a nonprofit called Enemies of Debris and also host trash fishing, where the same group pulls trash out of the Detroit River.\n The group said there have been fewer lots scouted each year because the city is catching up to them.\n &#34;We hope they put us out of business,&#34; Nardone said laughing. &#34;We could start a bowling league or something.&#34;", "posttime": "2020-05-17 06:56:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e89\u593a\u6218,playground,\u5e95\u7279\u5f8b", "title": "\u5730\u76d8\u4e89\u593a\u6218\uff1a\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u7ade\u4e8912\u5c0f\u65f6\u7684\u64cd\u573a\u6e05\u7406", "title_en": "Turf war: Detroit Mower Gang competes in 12-hour playground cleanup", "transed": 1, "url": "https://www.detroitnews.com/story/news/local/detroit-city/2020/05/16/turf-war-detroit-mower-gang-competes-playground-cleanup/5201499002/", "via": "", "real_tags": ["\u4e89\u593a\u6218", "\u5e95\u7279\u5f8b"]}, {"category": "", "categoryclass": "", "imagename": "778c846a152e2049675e63a0807af38e.png", "infoid": 1002461, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c24\u5176\u662f\u73b0\u5728\uff0c\u6709\u4e1c\u897f\u53ef\u8bfb\u662f\u4ef6\u597d\u4e8b\u3002\u65b0\u4e8b\u7269\uff0c\u6765\u81ea\u4e0d\u540c\u6765\u6e90\u548c\u4e0d\u540c\u58f0\u97f3\u7684\u4e1c\u897f\uff0c\u4e0d\u540c\u7684\u5934\u8111\u8c08\u8bba\u4ed6\u4eec\u7684\u60f3\u6cd5\u548c\u7ecf\u5386\uff0c\u8bb2\u8ff0\u4ed6\u4eec\u7684\u6545\u4e8b\uff0c\u53d1\u5e03\u4e0e\u4ed6\u4eec\u76f8\u5173\u7684\u56fe\u7247\u548c\u4e8b\u60c5\u3002\u51e0\u5e74\u524d\uff0c\u53ef\u80fd\u662f8\u5e74\u621610\u5e74\u524d\uff0c\u4e92\u8054\u7f51\u4e0a\u6709\u535a\u5ba2\uff0c\u65f6\u95f4\u53ef\u80fd\u6bd4\u5f88\u591a\u4eba\u8bb0\u5fc6\u4e2d\u7684\u90fd\u8981\u957f\u3002\u4f60\u53ef\u4ee5\u56db\u5904\u641c\u7d22\uff0c\u4ed6\u4eec\u751a\u81f3\u5728\u7f51\u7edc\u641c\u7d22\u4e2d\u4e5f\u4f1a\u51fa\u73b0\uff0c\u4f60\u4f1a\u53d1\u73b0\u81ea\u5df1\u6b63\u5728\u9605\u8bfb\u67d0\u4eba\u7684\u535a\u5ba2\u3002\u4e5f\u8bb8\u8fd9\u662f\u4ed6\u4eec\u5728\u65e5\u672c\u627e\u5230\u4e00\u4efd\u6559\u5b66\u5de5\u4f5c\u65f6\u7684\u751f\u6d3b\u7f16\u5e74\u53f2\uff0c\u8bb0\u5f55\u4e86\u4ed6\u4eec\u7b2c\u4e00\u6b21\u5982\u4f55\u79bb\u5f00\u7f8e\u56fd\uff0c\u90a3\u91cc\u7684\u6240\u6709\u65b0\u4e8b\u7269\uff0c\u6ed1\u677f\uff0c\u7ed3\u8bc6\u4eba\u4eec\uff0c\u8bd5\u56fe\u7ed3\u8bc6\u5973\u5b69\uff0c\u6216\u8005\u662f\u4e00\u540d\u6444\u5f71\u5e08\u5728\u7c73\u8bfa\u5361\u5c9b\u6216\u897f\u73ed\u7259\u7684\u67d0\u4e2a\u5c9b\u5c7f\u5de5\u4f5c\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5f53\u65f6\u97f3\u4e50\u6572\u54cd\u4e86\u6447\u6eda\u573a\u9762\uff0c\u6240\u6709\u7684\u5e74\u8f7b\u4eba\u90fd\u7a7f\u7740\u76ae\u8863\u548c\u7d27\u8eab\u725b\u4ed4\u88e4\uff0c\u968f\u7740\u6447\u6eda\u8df3\u821e\uff0c\u5199\u4e0b\u4e86\u4ed6\u5bf9\u81ea\u5df1\u5728\u54ea\u91cc\u9002\u5408\u8fd9\u4e2a\u573a\u666f\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u4ed6\u6709\u70b9\u8001\u4e86\uff0c\u4f46\u5e76\u4e0d\u8001\uff0c\u6216\u8005\u662f\u4e00\u672c\u5947\u602a\u548c\u4e0d\u8001\u7684\u6c47\u7f16\u3002\u6216\u8005\u662f\u4e00\u4e9b\u7537\u4eba\u5728\u4ed6\u7684\u8f66\u5e93\u91cc\u7528\u6728\u5934\u6216\u7535\u5b50\u4ea7\u54c1\u505a\u7684\u4e1c\u897f\uff0c\u6216\u8005\u4e00\u4e9b\u65e5\u672c\u5973\u5b69\u4e0a\u4f20\u4e86\u81ea\u5df1\u770b\u8d77\u6765\u975e\u5e38\u7c89\u7ea2\u8272\u548c\u5145\u6c14\u7684\u7167\u7247\uff0c\u5e76\u7528\u5b83\u4eec\u5199\u4e86\u4e00\u4e9b\u5c0f\u4e1c\u897f\u3002\n\u5982\u4eca\uff0c\u5f53\u6bcf\u4e2a\u4eba\u90fd\u88ab\u5c01\u9501\uff0c\u767d\u5929\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u53ea\u6709\u65f6\u95f4\u53ef\u4ee5\u6d88\u78e8\uff0c\u591c\u665a\u4e5f\u662f\u5982\u6b64\uff0c\u4f60\u53ef\u4ee5\u6ce1\u4e00\u676f\u70ed\u8336\u6216\u4e00\u676f\u5496\u5561\uff0c\u7136\u540e\u5750\u4e0b\u6765\uff0c\u4f46\u5f53\u4f60\u770b\u90a3\u91cc\u7684\u65f6\u5019\uff0c\u6839\u672c\u6ca1\u6709\u4ec0\u4e48\u53ef\u8bfb\u7684\u3002\u4f60\u4e0d\u80fd\u8fdb\u5165\u90a3\u4e9b\u72ec\u7279\u7684\u58f0\u97f3\uff0c\u5199\u4e0b\u4ed6\u4eec\u5173\u5fc3\u7684\u4e8b\u60c5\uff0c\u53d1\u751f\u5728\u4ed6\u4eec\u8eab\u4e0a\u7684\u4e8b\u60c5\u3002\n\u524d\u51e0\u5929\u6211\u627e\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u4e00\u4e2a\u4e5f\u6ca1\u627e\u5230\u3002\u5b83\u4eec\u66fe\u7ecf\u662f\u65e0\u7a77\u65e0\u5c3d\u7684\u3002\u4f60\u53ea\u9700\u70b9\u51fb\u4f60\u5728Blogger\u4e0a\u8ba4\u8bc6\u7684\u4e00\u4e2a\u535a\u5ba2\uff0c\u7136\u540e\u70b9\u51fbBlogger\u7684\u968f\u673a\u535a\u5ba2\u6309\u94ae\uff0c\u6216\u8005\u8fdb\u5165\u4f60\u77e5\u9053\u7684\u535a\u5ba2\u7684\u4fa7\u680f\uff0c\u90a3\u91cc\u603b\u662f\u6709\u4ed6\u4eec\u559c\u6b22\u7684\u535a\u5ba2\u5217\u8868\uff0c\u6709\u65f6\u662f\u56db\u4e94\u4e2a\uff0c\u6709\u65f6\u662f20\u4e2a\u5176\u4ed6\u535a\u5ba2\u3002Tumbler\u4e5f\u662f\u5982\u6b64\u3002\n\u535a\u5ba2\u8fc7\u53bb\u4e4b\u6240\u4ee5\u5b58\u5728\uff0c\u662f\u56e0\u4e3a\u6709\u4e86\u535a\u5ba2\u5e73\u53f0\u3002\u4f46\u662fBlogger\u5728\u51e0\u5e74\u524d\u5c31\u88ab\u8c37\u6b4c\u5173\u95ed\u4e86\uff0c\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u90a3\u91cc\u7684\u535a\u5ba2\u4e00\u76f4\u5728\u6d88\u5931\uff0c\u4f60\u5c31\u662f\u627e\u4e0d\u5230\u771f\u6b63\u7684\u535a\u5ba2\uff0c\u800c\u4e14\u5b83\u4eec\u4e0d\u518d\u5728\u641c\u7d22\u4e2d\u88ab\u7d22\u5f15\u3002Tumbler\u4e5f\u88ab\u4eba\u4eec\u7528\u6765\u8bb0\u5f55\u4ed6\u4eec\u7684\u751f\u6d3b\u548c\u5174\u8da3\uff0c\u867d\u7136\u4e5f\u6709\u5f88\u591a\u53ea\u662f\u56fe\u7247\u7684\u535a\u5ba2\uff0c\u4f46\u5b83\u6700\u8fd1\u6539\u53d8\u4e86\u653f\u7b56\uff0c\u73b0\u5728\u4e0d\u5141\u8bb8NSFW\u5185\u5bb9\uff0c\u8fd9\u57fa\u672c\u4e0a\u635f\u5bb3\u4e86\u6240\u6709\u63d0\u5230\u4e0d\u5b8c\u5168PG\u7684\u535a\u5ba2\u3002\u6240\u6709\u6211\u6709\u4e66\u7b7e\u7684\u65e7Tumbler\u535a\u5ba2\u6211\u90fd\u4e0d\u80fd\u518d\u8bbf\u95ee\u4e86\uff0c\u56e0\u4e3a\u5b83\u4eec\u88abTumbler\u8ba4\u4e3a\u6709NSFW\u5185\u5bb9\u3002\u6211\u60f3\u90a3\u4e9b\u4eba\u5728\u628a\u6240\u6709\u7684\u7cbe\u529b\u90fd\u6295\u5165\u5230\u5236\u4f5c\u8fd9\u6837\u4e00\u4e2a\u7279\u522b\u7684\u4e1c\u897f\u4e4b\u540e\u4f1a\u6709\u4ec0\u4e48\u611f\u89c9\uff0c\u7136\u540eTumbler\u5c31\u628a\u5b83\u6bc1\u4e86\u3002\u8fd9\u5c31\u662f\u7ed3\u675f\u4e86\u3002\u6ca1\u6709\u529e\u6cd5\u627e\u5230\u535a\u5ba2\uff0c\u4e5f\u6ca1\u6709\u4eba\u5728\u5199\u535a\u5ba2\uff0c\u56e0\u4e3a\u6ca1\u6709\u5e73\u53f0\u53ef\u4f9b\u4ed6\u4eec\u4f7f\u7528\u3002\n\u4f46\u5982\u679c\u6211\u80fd\u5e26\u56de\u4e00\u6837\u4e1c\u897f\uff0c\u6211\u4f1a\u628a\u5b83\u4eec\u5e26\u56de\u4e92\u8054\u7f51\u3002\u5b83\u4eec\u662f\u6211\u6700\u6000\u5ff5\u4e5f\u662f\u6700\u7ecf\u5e38\u6000\u5ff5\u7684\u4e1c\u897f\u3002\u4ed6\u4eec\u662f\u8fd9\u91cc\u6700\u6709\u4ef7\u503c\u7684\u4e1c\u897f\uff0c\u9664\u4e86\u53ef\u4ee5\u66f4\u81ea\u7531\u5730\u83b7\u5f97\u65b0\u95fb\uff0cYouTube\u4e0a\u514d\u8d39\u4f46\u8d28\u91cf\u4e0d\u9ad8\u7684\u89c6\u9891\u5185\u5bb9\uff0c\u6211\u60f3\u8fd8\u6709\u4e00\u4e9b\u793e\u4ea4\u5a92\u4f53\u3002\u4f46\u535a\u5ba2\u662f\u4f60\u53ef\u4ee5\u5750\u4e0b\u6765\u9605\u8bfb\u7684\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u771f\u6b63\u8fdb\u5165\u535a\u5ba2\uff0c\u4ee5\u81f3\u4e8e\u4f60\u751a\u81f3\u5fd8\u4e86\u81ea\u5df1\u5728\u54ea\u91cc\uff0c\u60f3\u60f3\u4f60\u60f3\u5982\u4f55\u5728\u751f\u6d3b\u4e2d\u5c1d\u8bd5\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u6216\u8005\u53ea\u662f\u4eab\u53d7\u5b83\u4eec\u7684\u5199\u4f5c\uff0c\u4f60\u53ef\u4ee5\u66f4\u6df1\u5165\u5730\u9605\u8bfb\u8fc7\u53bb\u7684\u535a\u5ba2\u5e16\u5b50\uff0c\u7a0d\u540e\u518d\u8c03\u56de\uff0c\u770b\u770b\u81ea\u4ece\u4f60\u8bfb\u5230\u5173\u4e8e\u5b83\u4eec\u7684\u6700\u540e\u4e00\u7bc7\u6587\u7ae0\u4ee5\u6765\uff0c\u5b83\u4eec\u90fd\u53d1\u5e03\u4e86\u4ec0\u4e48\u3002\n\u5f53\u4f60\u641c\u7d22\u73b0\u5728\u7684\u535a\u5ba2\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\u524d100\u4e2a\u535a\u5ba2\u3002\u5982\u4f55\u5236\u4f5c\u4e00\u4e2a\u6210\u529f\u7684\u535a\u5ba2\u3002\u6700\u5f3a\u5927\u768450\u4e2a\u535a\u5ba2\u3002\u4f46\u4f60\u771f\u6b63\u60f3\u8981\u7684\u662f1\u4e07\u4e2a\u4e0d\u6210\u529f\u7684\u535a\u5ba2\u3002\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u201c\u5f53\u4f60\u5728\u641c\u7d22\u535a\u5ba2\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\u5982\u4f55\u505a\u4e00\u4e2a\u6210\u529f\u7684\u535a\u5ba2\u3002\u6700\u5f3a\u5927\u768450\u4e2a\u535a\u5ba2\u3002\u4f46\u4f60\u771f\u6b63\u60f3\u8981\u7684\u662f1\u4e07\u4e2a\u4e0d\u6210\u529f\u7684\u535a\u5ba2\u3002\u201d\u7f51\u7edc\u641c\u7d22\u73b0\u5728\u4e3a\u4f60\u7684\u535a\u5ba2\u63d0\u4f9b\u70b9\u5b50\u5efa\u8bae\uff0c\u4ee5\u83b7\u5f97\u6d4f\u89c8\u91cf\u3001\u5206\u4eab\u548c\u7d22\u5f15\uff0c\u4f46\u4f60\u771f\u6b63\u60f3\u8981\u7684\u662f\u6ca1\u6709\u70b9\u5b50\u3002\u73b0\u5728\u51e0\u4e4e\u4e0d\u53ef\u80fd\u627e\u5230\u4e00\u4e2a\u4e3b\u9898\u4e0d\u96c6\u4e2d\u7684\u535a\u5ba2\uff0c\u56e0\u4e3a\u8fd9\u662f\u641c\u7d22\u5f15\u64ce\u5173\u6ce8\u7684\u91cd\u70b9\uff0c\u4e5f\u662f\u7f51\u7ad9\u5982\u4f55\u83b7\u5229\u7684\u3002\u4f46\u4f60\u60f3\u8981\u7684\u6070\u6070\u76f8\u53cd\uff0c\u4e00\u4e2a\u4ece\u6765\u6ca1\u6709\u8bd5\u56fe\u96c6\u4e2d\u7cbe\u529b\uff0c\u751a\u81f3\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u8fd9\u4e00\u70b9\u7684\u535a\u5ba2\u3002\u8fc7\u53bb\u4f3c\u4e4e\u6709\u65e0\u7a77\u65e0\u5c3d\u7684\u641c\u7d22\u7ed3\u679c\u88ab\u8c37\u6b4c\u548c\u5176\u4ed6\u88ab\u8c37\u6b4c\u627c\u6740\u7684\u641c\u7d22\u5f15\u64ce\u7d22\u5f15\u3002\u4e5f\u8bb8\u4f60\u4f1a\u770b\u52304\u4e07\u4e2a\u641c\u7d22\u7ed3\u679c\u3002\u73b0\u5728\u5b83\u8bf4\u670940,000\u4e2a\uff0c\u4f46\u4f60\u53ea\u80fd\u5f97\u523010\u523020\u9875\u7684\u7ed3\u679c\uff0c\u57fa\u672c\u4e0a\u90fd\u662f\u516c\u53f8\u7684\uff0c\u800c\u4e14\u5f88\u5dee\u52b2\u3002\u4f60\u518d\u4e5f\u770b\u4e0d\u5230\u7b2c100\u9875\u4e86\u3002\u5373\u4f7f\u6709\u4eba\u5efa\u7acb\u4e86\u4e00\u4e2a\u722c\u866b\u7d22\u5f15\u5668\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u641c\u7d22\u6240\u6709\u4e1c\u897f\uff0c\u5305\u62ec\u4e0d\u53d7\u6b22\u8fce\u6216\u88ab\u7b97\u6cd5\u5224\u5b9a\u4e3a\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u90a3\u4e5f\u662f\u4ef6\u597d\u4e8b\u3002DuckDuckGo\u7b49\u66ff\u4ee3\u5f15\u64ce\u7684\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u53ea\u4f7f\u7528\u8c37\u6b4c\u641c\u7d22\uff0c\u800c\u4e0d\u662f\u4ee5\u81ea\u5df1\u7684\u65b9\u5f0f\u722c\u884c\u548c\u7d22\u5f15\u4e1c\u897f\u3002\u5982\u679c\u4ed6\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u4ed6\u4eec\u5c06\u662f\u6709\u8da3\u548c\u6709\u7528\u7684\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u51fa\u4e8e\u4fdd\u62a4\u9690\u79c1\u7684\u539f\u56e0\u3002\u867d\u7136\u6709\u4eba\u8bf4\u8c37\u6b4c\u53d8\u5f97\u8d8a\u6765\u8d8a\u591a\n\u9690\u79c1\u4fdd\u62a4\u548c\u4e0d\u80fd\u5c06\u5176\u66f4\u6539\u4e3a\u6076\u610f\u4f7f\u7528\uff0c\u5fc5\u987b\u5728\u4e00\u5f00\u59cb\u5c31\u8003\u8651\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u6000\u7591\u62c9\u91cc\u548c\u8c22\u5c14\u76d6\uff0c\u751a\u81f3\u76d6\u8328\uff0c\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u5b83\u5c06\u88ab\u7528\u6765\u505a\u4ec0\u4e48\uff0c\u4ed6\u4eec\u4f1a\u4ee5\u4ed6\u4eec\u6240\u505a\u7684\u65b9\u5f0f\u521b\u9020\u51fa\u8fd9\u6837\u7684\u4e1c\u897f\u3002\u8fd9\u4e9b\u4eba\u73b0\u5728\u53ef\u4ee5\u5c1d\u8bd5\u5728\u4ed6\u4eec\u7684\u751f\u6d3b\u4e2d\u5bfb\u627e\u5176\u4ed6\u4e8b\u60c5\u505a\uff0c\u6216\u8005\u7528\u6148\u5584\u6765\u5f25\u8865\uff0c\u4f46\u4ed6\u4eec\u7684\u53d1\u660e\u662f\u5728\u5982\u6b64\u6781\u7aef\u7684\u6c34\u5e73\u4e0a\u7528\u6765\u5bf9\u4ed8\u4eba\u7684\u53ef\u6015\u7684\u5de5\u5177\u3002\u4efb\u4f55\u4ed6\u4eec\u8ba4\u4e3a\u6709\u4e00\u5929\u53ef\u80fd\u4f1a\u53d8\u5927\u7684\u4e1c\u897f\uff0c\u4efb\u4f55\u4eba\u90fd\u5e94\u8be5\u5728\u4e00\u5f00\u59cb\u5c31\u53c2\u4e0e\u8fdb\u6765\uff0c\u9632\u6b62\u5f53\u5b83\u5bf9\u5f3a\u5927\u7684\u5b9e\u4f53\u6709\u7528\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u88ab\u8d1f\u9762\u5229\u7528\u3002\u6211\u4e0d\u786e\u5b9a\u6258\u7ba1\u670d\u52a1\u5668\u662f\u5426\u53ef\u4ee5\u8bbe\u5728\u7f8e\u56fd\uff0c\u56e0\u4e3a\u7f8e\u56fd\u4e0d\u4fdd\u62a4\u9690\u79c1\u6216\u4e92\u8054\u7f51\u4f7f\u7528\u3002\u6211\u4e0d\u77e5\u9053\u54ea\u91cc\u6709\u3002\u6211\u8bfb\u5230\u963f\u6839\u5ef7\u6709\u5baa\u6cd5\u4fdd\u62a4Insernet\u8a00\u8bba\uff0c\u5c3d\u7ba1\u8fd9\u79cd\u81ea\u7531\u53d7\u5230\u7981\u6b62\u64b0\u5199\u5173\u4e8e\u672c\u56fd\u653f\u5e9c\u7684\u6587\u7ae0\u7684\u9650\u5236\u3002\u618e\u6068\u963f\u6839\u5ef7\u62e5\u6709\u53d7\u4fdd\u62a4\u7684\u8a00\u8bba\u81ea\u7531\u7684\u4e92\u8054\u7f51\uff0c\u800c\u7f8e\u56fd\u3001\u52a0\u62ff\u5927\u548c\u6b27\u6d32\u5374\u4e0d\u4fdd\u62a4\u4e92\u8054\u7f51\u4e0a\u7684\u4eba\u6743\u7684\u5b9e\u4f53\u4f1a\u8bf4\uff0c\u5f88\u597d\uff0c\u56e0\u4e3a\u963f\u6839\u5ef7\u4e3a\u6050\u6016\u4e3b\u4e49\u548c\u4f24\u5bb3\u513f\u7ae5\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u8fd9\u662f\u90a3\u4e9b\u60f3\u8981\u653b\u51fb\u4e2a\u4eba\u6216\u7cfb\u7edf\u7684\u4eba\u6700\u559c\u6b22\u7684\u4e24\u4e2a\u8bf4\u6cd5\uff0c\u800c\u8fd9\u4e9b\u4eba\u6216\u7cfb\u7edf\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u505a\u9519\u4ec0\u4e48\uff0c\u4ed6\u4eec\u9700\u8981\u5f15\u8d77\u652f\u6301\u8005\u7684\u8b66\u89c9\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u884c\u4e3a\u5728\u963f\u6839\u5ef7\u662f\u88ab\u7981\u6b62\u7684\uff0c\u4f46\u636e\u6211\u6240\u77e5\uff0c\u4ed6\u4eec\u4e92\u8054\u7f51\u4e0a\u7684\u8a00\u8bba\u548c\u8868\u8fbe\u662f\u7981\u6b62\u7684\uff0c\u5305\u62ec\u90a3\u4e9b\u4e1c\u897f\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u4ec5\u4ec5\u662f\u8fd9\u4e2a\u60f3\u6cd5\uff1a\u975e\u6cd5\u4fe1\u606f\u3002\u975e\u6cd5\u8a00\u8bba\u3002\n\u6211\u4e0d\u786e\u5b9a\u5982\u4f55\u4fdd\u62a4\u5e73\u53f0\u3002\u6216\u8bb8\u53ef\u4ee5\u53ca\u65e9\u4e0eEFF\u8fd9\u6837\u503c\u5f97\u4fe1\u8d56\u7684\u900f\u660e\u7ec4\u7ec7\u5408\u4f5c\uff0c\u8ba9\u4ed6\u4eec\u5b9a\u671f\u516c\u5f00\u5ba1\u8ba1\u5e73\u53f0\uff0c\u5e76\u8868\u793a\uff0c\u5982\u679c\u8fd9\u4e00\u70b9\u53d1\u751f\u53d8\u5316\uff0c\u5bf9\u5e73\u53f0\u7684\u516c\u5f00\u900f\u660e\u5b9a\u671f\u5ba1\u8ba1\u5e94\u8be5\u7acb\u5373\u963b\u6b62\u5b83\uff0c\u7528\u6237\u5e94\u8be5\u7acb\u5373\u8ba4\u4e3a\u5b83\u53d7\u5230\u4e86\u635f\u5bb3\uff0c\u5e76\u505c\u6b62\u4f7f\u7528\u5b83\u3002\n\u6b64\u5916\uff0c\u4f60\u5fc5\u987b\u5c06\u5185\u5bb9\u6c38\u8fdc\u4fdd\u5b58\u5728\u5907\u4efd\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u5426\u5219\uff0c\u5982\u679c\u6709\u4e00\u5929\u5e73\u53f0\u4f1a\u50cfBloger\u548cTumbler\u90a3\u6837\u5220\u9664\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4ed6\u4eec\u5c31\u4e0d\u4f1a\u89c9\u5f97\u81ea\u5df1\u591a\u5e74\u6765\u5728\u535a\u5ba2\u4e0a\u7684\u52aa\u529b\u662f\u503c\u5f97\u7684\u3002\u4e5f\u8bb8\u5e73\u53f0\u6ca1\u6709\u592a\u591a\u94b1\uff0c\u6240\u4ee5\u4e0d\u80fd\u4fdd\u5b58\u56fe\u7247\u6216\u89c6\u9891\uff0c\u4f46\u81f3\u5c11\u5e94\u8be5\u4fdd\u7559\u6587\u672c\u3002\n\u6b64\u5916\uff0c\u5e73\u53f0\u5fc5\u987b\u76c8\u5229\u6216\u627f\u8bfa\u5728\u4e0d\u6ee5\u7528\u7528\u6237\u6216\u5ba2\u4eba\u7684\u60c5\u51b5\u4e0b\u672a\u6765\u76c8\u5229\u3002\u8fd9\u53ef\u4ee5\u662f\u67d0\u5bb6\u5927\u578b\u4e92\u8054\u7f51\u5e7f\u544a\u516c\u53f8\u63d0\u4f9b\u7684\u5e7f\u544a\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f5c\u4e3a\u5e73\u53f0\u4e00\u90e8\u5206\u7684\u5e7f\u544a\u516c\u53f8\u63d0\u4f9b\u7684\u5e7f\u544a\u3002\u6ca1\u6709\u592a\u591a\u7684\u5e7f\u544a\uff0c\u6240\u4ee5\u535a\u5ba2\u88ab\u6bc1\u4e86\uff0c\u4f46\u53ef\u80fd\u5728\u5e95\u90e8\u6216\u9876\u90e8\u548c\u5e95\u90e8\u90fd\u6709\u5e7f\u544a\uff0c\u4fdd\u7559\u4e86\u5c5e\u4e8e\u535a\u5ba2\u4f5c\u8005\u7684\u7a7a\u95f4\u3002\u6b64\u5916\uff0c\u8be5\u516c\u53f8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u5e94\u8be5\u4e0a\u5e02\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u51e0\u5bb6\u5927\u516c\u53f8\u6216\u653f\u5e9c\u7684\u53c2\u4e0e\u5982\u4f55\u8ba9\u4e92\u8054\u7f51(\u4ee5\u53ca\u8fc7\u53bb\u7684\u8868\u8fbe\u5f62\u5f0f)\u53d8\u5f97\u66f4\u7cdf\uff0c\u8fd9\u4e24\u4ef6\u4e8b\u4e2d\u4efb\u4f55\u4e00\u4ef6\u4e8b\u7684\u53c2\u4e0e\u7a0b\u5ea6\u90fd\u4f1a\u4fb5\u8680\u6216\u5b8c\u5168\u6467\u6bc1\u5b83\u3002\n\u5373\u4eba\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u79c1\u4e0b\u5199\u535a\u5ba2\u7684\u5e73\u53f0\uff0c\u5728\u8fd9\u4e2a\u5e73\u53f0\u4e0a\uff0c\u535a\u5ba2\u4e0d\u80fd\u88ab\u8f6c\u5316\u4e3a\u8fb1\u9a82\u4ed6\u4eba\u7684\u5de5\u5177\uff0c\u9690\u79c1\u3001\u601d\u60f3\u3001\u8868\u8fbe\u548c\u8ba8\u8bba\u7684\u81ea\u7531\u5f97\u5230\u7ef4\u62a4\uff0c\u8a00\u8bba\u4e0d\u4f1a\u53d7\u5230\u5bd2\u8749\u6548\u5e94\u3002", "note_en": "Nowadays especially it&#39;s nice to have things to read. New things, things from various sources and various voices, various minds talking about their thoughts and experiences, telling their stories, posting pictures and things that are relevant to them. A couple of years ago, maybe 8 or 10 so maybe longer than a lot of people will be able to remember, there were blogs on the internet. You could search around and they&#39;d come up even in websearch, and you&#39;d find yourself reading someone&#39;s blogs. Maybe it was chronicles of their life as they got a job teaching in Japan and how it was leaving American for the first time and all the new things there and skateboarding and meeting people and trying to meet girls, or a photographer working for a while in Minorca or some island off Spain when music hit a rock scene period and all the young people were dressing up in leather and tight jeans and going out dancing to dance rock and writing about his thoughts on where he fit into the scene as he was kind of older but not old, or a compilation of weird and unexplained science and gnostic wisdom, or the things some guy was making out of wood or electronics in his garage, or some Japanese girl who posted pictures of herself looking extremely pink and pneumatic and writing little things with them.\n Nowadays when everyone is on lockdown and there are days with nothing but spaces of time to pass, nights too, and you can make a hot tea or a coffee and sit down but when you look there&#39;s nothing to read. You can&#39;t access those unique voices writing about the things they care about, that are happening to them.\n The other day I searched for an hour and couldn&#39;t find even one. They used to be endless. You&#39;d just click on one you knew on Blogger and either click Blogger&#39;s random blog button, or go to the sidebar of the blog you knew where they always had a list of blogs they liked, sometimes four or 5, sometimes 20 other blogs. And the same with Tumbler.\n Blogs used to exist because there were blogging platforms. But Blogger was shut down by Google years ago, and the blogs on there have been disappearing until now you just can&#39;t find really any, and they&#39;re not indexed in search anymore. Tumbler also was used by people to blog about their lives and interests, although there were also a lot of just pictures blogs, but it recently changed its policy and now permits no NSFW content, which compromised basically every blog that mentioned something not completely PG. All the old Tumbler blogs I had bookmarks for I can&#39;t even access anymore because they were deemed by Tumbler to have NSFW content. I think about how those people must feel after putting all that work into making such a special thing and then Tumbler just destroys it. And that&#39;s the end. There&#39;s no way to find blogs, and no one is writing them because there&#39;s no platform for them.\n But they would be the one thing I&#39;d bring back to the internet if I could bring one thing back. They&#39;re the thing I miss the most and the most often. They were the most valuable thing on here, besides freer availability of news, free although low quality video content on YouTube, and I guess some kinds of social media. But blogs are something you can sit down and read and get really into to the point you forget where you even are, and think about how you want to try those things maybe in your life, or just enjoy their writing, and you can read deeper into them into past blog posts, and tune back in later and see what they&#39;ve posted since the last things you read about them.\n When you search for blogs now on you see things like &#39;Top 100 Blogs.&#39; &#39;How to Make a Successful Blog.&#39; &#39;Most Powerful 50 Blogs.&#39; But what you really want is 10,000 unsuccessful blogs. Web search now suggests ideas for your blogs to get views, shares, indexed, but what you really want is no ideas. It&#39;s almost impossible now to find a blog that&#39;s not on a focused theme because that&#39;s what search engines focus on and how websites profit. But you want the opposite, a blog that never tried to focus or even thought about it. There used to seem to be endless search results indexed by Google and the other search engines that were killed by Google. Maybe you&#39;d see 40,000 results for your search. Now it says there are 40,000 but you only get 10 or 20 pages of results you can get to, all basically corporate and lame. You can&#39;t get to the 100th page anymore. It&#39;d be nice even if someone built a crawler-indexer that you could use to search for everything including things that weren&#39;t popular or judged by algorithms to be &#39;relevant.&#39; The problem with alternative engines like DuckDuckGo is they just use Google Search and don&#39;t crawl and index things in their own way. If they did they&#39;d be fun and useful to use for reasons other than protection of privacy. Although some people say Google is becoming more and more useless to the point it won&#39;t be revived and may collapse for this reason although even if that were true we&#39;d still have to suffer with it for years.\n  A couple of notes, in case anyone is thinking of starting a new blogging platform:\n There&#39;s no point if you&#39;re not going to protect people, and that means their privacy. Nowadays people won&#39;t share content simply because they don&#39;t trust the internet to share content to it. You have to provide for them to be anonymous and protected forever, which means letting people create accounts easily with just an email or something similar, and log into them or recover their password throught the email if they lose their password, and never any locking them out because you noticed suspicious activity or anything bogus like that and making them provide personal details. That is abuse of trust and abuse of people. They have to be able to blog without thinking someone is going to bring it up and file it away forever and maybe they won&#39;t get a job because of it, or their tyrannical government will think they&#39;re an agitator and attack them or an adversary will use it for selective characger defamation sometime. They have to be able to abandon a blog, start a new one, blog there, abandon it, etc. Otherwise they won&#39;t feel free to write, so you may as well not say you&#39;re going to provide a blogging platform for people if you won&#39;t protect them.\n Privacy protection and the inability of this to be changed to be used maliciously must be baked in at the start. I doubt Larry and Sergei or even Gates would have created what they did the way they did if they knew what it would be used for. Those guys now can try to find other things to do with their lives now, or make up for it with charity, but their inventions are tools terribly used against people on such an extreme level. Anybody creating anything they think might someday become big should bake in at the start prevention against the possibility it could be used negatively when it becomes useful to powerful entities. I&#39;m not sure the hosting servers could be based in the US because the US doesn&#39;t protect privacy or internet usage. I&#39;m not sure where does. I read that Argentina has constitutional law that protect insternet expression, although that freedom is tempered by the prohibition of writing about their own government. Entitites that hate that Argentina has a protected free speech internet while the US and Canada and Europe don&#39;t protect human rights on the internet will say &#39;Well because of that Argentina is providing for terrorism and harming children, the two favorite claims of people who want to attack people or systems when those people or systems haven&#39;t done anything actually wrong and they need to raise alarm in their supporters. Of course, those acts are prohibited in Argentina, but speech and expression on their internet is not, including of those things, as far as I know. I mean, just the idea: &#39;illegal information.&#39; &#39;Illegal speech.&#39;\n I&#39;m not sure how a platform could be protected. Perhaps by partnering early with a trusted, transparent organization like the EFF and having them publicly audit the platform on a regular basis and saying that if this is ever altered and public transparent regular audits of the platform stop it&#39;s users should immediately consider it compromised and stop using it.\n Also, you have to keep the content on the server of backed up forever, otherwise they won&#39;t feel their effort in blogging for years will be worthwhile if the platform will someday just erase it like Blogger and Tumbler did. Maybe the platform doesn&#39;t have a ton of money so it has to not save the images or videos, but at least the text should be maintained.\n Also, the platform must be profitable or promise future profit without abusing users or guests. This can simply be ads provided by one of the big internet ads companies or an ads company that&#39;s part of the platform. Not too many ads so the blogs are ruined, but maybe an ad at the bottom or perhaps the top and bottom, preserving the space that belongs to the blogger. Also the company probably should not ever go public, as we have seen how the involvement of a couple of big corporations or governments made the internet (and past forms of expression) worse, and that any degree of involvement of either of these two things will eat away or completely destroy it.\n Ie, a platform where people can securely and privately blog, where it can&#39;t be converted into a tool for abuse of people, and where freedom of privacy, thought, expression and discussion is maintained and there is no &#39;chilling effect on speech.&#39;", "posttime": "2020-05-17 06:56:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u535a\u5ba2,\u5e26\u56de,internet", "title": "\u5982\u679c\u6211\u80fd\u628a\u4e00\u4ef6\u4e8b\u5e26\u56de\u4e92\u8054\u7f51\uff0c\u90a3\u5c31\u662f\u535a\u5ba2", "title_en": "If I could bring one thing back to the internet it would be blogs", "transed": 1, "url": "http://tttthis.com/blog/if-i-could-bring-one-thing-back-to-the-internet-it-would-be-blogs", "via": "", "real_tags": ["\u535a\u5ba2", "\u5e26\u56de", "internet"]}, {"category": "", "categoryclass": "", "imagename": "d62a9b5d51e0ee62bb8afa7d858937d4.png", "infoid": 1002460, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u90e8\u7f72API\u7aef\u70b9\u7684\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4f8b\u5982\u672c\u4f8b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5728Amazon EC2\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u6f14\u793a\u5982\u4f55\u5c06Amazon ElastiCache\u4e0eAmazon DocumentDB(\u5177\u6709MongoDB\u529f\u80fd)\u96c6\u6210\u3002\u867d\u7136\u672c\u4f8b\u4e2d\u7684\u65b9\u6cd5\u901a\u8fc7\u5f39\u6027\u548c\u6269\u5c55\u6216\u7f29\u5c0fEC2\u5b9e\u4f8b\u6570\u91cf\u4ee5\u9002\u5e94\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8f7d\u7684\u80fd\u529b\uff0c\u5e2e\u52a9\u5b9e\u73b0\u4e86\u51fa\u8272\u7684\u6027\u80fd\u548c\u53ef\u9760\u6027\uff0c\u4f46\u662f\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u81ea\u5df1\u7ba1\u7406EC2\u5b9e\u4f8b\uff0c\u8fd9\u4ecd\u7136\u4f1a\u5e26\u6765\u4e00\u4e9b\u8fd0\u8425\u5f00\u9500\u3002\u89e3\u51b3\u8fd0\u8425\u5f00\u9500\u95ee\u9898\u548c\u76f8\u5173\u6210\u672c\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5e94\u7528\u7a0b\u5e8f\u8f6c\u53d8\u4e3a\u65e0\u670d\u52a1\u5668\u67b6\u6784\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528\u4e86\u4e00\u4e2a\u63d0\u4f9b\u7c7b\u4f3c\u7528\u4f8b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u4e00\u4e2a\u65e0\u670d\u52a1\u5668\u67b6\u6784\uff0c\u8be5\u67b6\u6784\u5c55\u793a\u4e86\u4e00\u4e9b\u5ba2\u6237\u6b63\u5728\u5229\u7528\u7684\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u662f\u7531\u5ba2\u6237\u4ece\u63d0\u5347\u548c\u8f6c\u79fb\u8fc7\u6e21\u5230\u6784\u5efa\u4e91\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u7684\u3002\u5b83\u4f7f\u7528Amazon API Gateway\u63d0\u4f9b\u8fde\u63a5\u5230AWS Lambda\u51fd\u6570\u7684rest API\u7aef\u70b9\uff0c\u4ee5\u63d0\u4f9b\u4eceAmazon Aurora Serverless\u6570\u636e\u5e93\u8bfb\u53d6\u548c\u5199\u5165\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u5b83\u8fd8\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528AWS\u4e91\u5f00\u53d1\u5de5\u5177\u5305(\u79f0\u4e3aCDK)\u90e8\u7f72\u5927\u591a\u6570\u57fa\u7840\u8bbe\u65bd\u3002\u901a\u8fc7\u5c06\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8fc1\u79fb\u5230\u4e91\u672c\u5730\u67b6\u6784(\u5982\u672c\u6587\u4e2d\u5c55\u793a\u7684\u793a\u4f8b)\uff0c\u60a8\u5c06\u80fd\u591f\u5b9e\u73b0\u8bb8\u591a\u597d\u5904\uff0c\u5305\u62ec\uff1a\n\u5728\u672c\u535a\u5ba2\u7684\u672b\u5c3e\uff0c\u60a8\u6709\u4e00\u4e2a\u5305\u542bCDK\u9879\u76ee\u7684AWS Cloud9\u5b9e\u4f8b\u73af\u5883\uff0c\u8be5\u9879\u76ee\u90e8\u7f72\u4e86API\u7f51\u5173\u548cLambda\u51fd\u6570\u3002\u6b64Lambda\u51fd\u6570\u5229\u7528\u5b58\u50a8\u5728\u60a8\u7684AWS Secrets Manager\u4e2d\u7684\u5bc6\u7801\uff0c\u901a\u8fc7Data API\u4ece\u60a8\u7684Aurora Serverless\u6570\u636e\u5e93\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\u521d\u59cb\u5316\u548c\u914d\u7f6eAWS\u4e91\u5f00\u53d1\u5de5\u5177\u5305\u9879\u76ee\uff0c\u5305\u62ecAmazon API Gateway\u7aef\u70b9\u548cAWS Lambda\u51fd\u6570\u7684\u5b9a\u4e49\u3002\n\u8981\u90e8\u7f72CDK\u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u6ee1\u8db3\u51e0\u4e2a\u524d\u63d0\u6761\u4ef6\uff1a\n\u5c55\u5f00Additional Connectivity\u90e8\u5206\u5e76\u9009\u62e9Data API\u9009\u9879\u3002\u6b64\u529f\u80fd\u4f7f\u60a8\u80fd\u591f\u901a\u8fc7\u57fa\u4e8eWeb\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95eeAurora Serverless\u3002\u5b83\u8fd8\u5141\u8bb8\u60a8\u4f7f\u7528Aurora Serverless\u7684\u67e5\u8be2\u7f16\u8f91\u5668\u529f\u80fd\uff0c\u4ee5\u4fbf\u5bf9\u6570\u636e\u5e93\u5b9e\u4f8b\u8fd0\u884cSQL\u67e5\u8be2\u3002\n\u60a8\u7684\u6570\u636e\u5e93\u5b9e\u4f8b\u662f\u5728\u5355\u4e2a\u53ef\u7528\u533a(AZ)\u4e2d\u521b\u5efa\u7684\uff0c\u4f46Aurora Serverless\u6570\u636e\u5e93\u7fa4\u96c6\u5177\u6709\u4e00\u79cd\u79f0\u4e3a\u81ea\u52a8\u591aAZ\u6545\u969c\u8f6c\u79fb\u7684\u529f\u80fd\uff0c\u8be5\u529f\u80fd\u4f7fAurora\u80fd\u591f\u5728\u5f53\u524d\u6570\u636e\u5e93\u5b9e\u4f8b\u6216AZ\u53d8\u5f97\u4e0d\u53ef\u7528\u65f6\u5728\u4e0d\u540c\u7684AZ\u4e2d\u91cd\u65b0\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\u3002\u7531\u4e8eAurora\u5c06\u8ba1\u7b97\u5bb9\u91cf\u548c\u5b58\u50a8\u5206\u5f00\uff0c\u56e0\u6b64\u7fa4\u96c6\u7684\u5b58\u50a8\u5377\u5206\u5e03\u5728\u591a\u4e2aAZ\u4e2d\u3002\u8fd9\u6837\uff0c\u5373\u4f7f\u6570\u636e\u5e93\u5b9e\u4f8b\u6216\u5173\u8054\u7684AZ\u53d7\u5230\u505c\u673a\u7684\u5f71\u54cd\uff0c\u6570\u636e\u4e5f\u53ef\u4ee5\u4fdd\u6301\u53ef\u7528\u3002\n\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\u540e\uff0c\u4e0b\u4e00\u6b65\u662f\u5c06\u6570\u636e\u5e93\u7684\u673a\u5bc6\u5b58\u50a8\u5728AWS Secrets Manager\u4e2d\u3002\n\u4fdd\u7559\u5bc6\u7801\u7c7b\u578b\u7684\u9ed8\u8ba4\u9009\u62e9(RDS\u6570\u636e\u5e93\u7684\u51ed\u636e)\u3002\u8f93\u5165\u60a8\u7684\u6570\u636e\u5e93\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u7136\u540e\u9009\u62e9\u60a8\u5728\u4e0a\u4e00\u6b65\u4e2d\u521b\u5efa\u7684\u6570\u636e\u5e93\u7684\u5355\u9009\u6309\u94ae(\u5728\u672c\u4f8b\u4e2d\u4e3adb-blog)\uff0c\u5982\u4e0b\u9762\u7684\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002\n\u8f93\u5165\u540d\u79f0\u548c\u8bf4\u660e(\u53ef\u9009)\u3002\u5bf9\u4e8e\u540d\u79f0\uff0c\u8bf7\u786e\u4fdd\u6dfb\u52a0\u524d\u7f00rds-db-credentials/\uff0c\u5982\u4e0b\u9762\u7684\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002\n\u67e5\u770b\u6700\u540e\u4e00\u9875\u4e0a\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u9009\u62e9\u5b58\u50a8\u4ee5\u5728AWS Secrets Manager\u4e2d\u521b\u5efa\u548c\u5b58\u50a8\u60a8\u7684\u673a\u5bc6\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u8be5\u7ba1\u7406\u5668\u8fde\u63a5\u5230\u60a8\u7684\u6570\u636e\u5e93\u3002\n\u521b\u5efaDB\u96c6\u7fa4\u540e\uff0c\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\uff1b\u521b\u5efa\u8868\u5e76\u586b\u5145\u8868\uff1b\u6700\u540e\uff0c\u6d4b\u8bd5\u8fde\u63a5\u4ee5\u786e\u4fdd\u53ef\u4ee5\u67e5\u8be2\u6570\u636e\u5e93\u3002\n\u4eceAWS\u63a7\u5236\u53f0\u5bfc\u822a\u5230Amazon RDS\u670d\u52a1\uff0c\u7136\u540e\u9009\u62e9\u60a8\u7684db-blog\u6570\u636e\u5e93\u96c6\u7fa4\u3002\n\u9009\u62e9Actions\u4e0b\u7684Query\u4ee5\u6253\u5f00Connect to database\u7a97\u53e3\uff0c\u5982\u4e0b\u9762\u7684\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002\u8f93\u5165\u60a8\u7684\u6570\u636e\u5e93\u8fde\u63a5\u8be6\u7ec6\u4fe1\u606f\u3002\u60a8\u53ef\u4ee5\u4eceSecrets Manager\u670d\u52a1\u590d\u5236\u5bc6\u7801\u7ba1\u7406\u5668ARN\uff0c\u5e76\u5c06\u5176\u7c98\u8d34\u5230\u6570\u636e\u5e93\u8fde\u63a5\u7a97\u53e3\u7684\u76f8\u5e94\u5b57\u6bb5\u4e2d\u3002\n\u8981\u521b\u5efaDB\u5b9e\u4f8b\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0bSQL\u67e5\u8be2\uff1a\u4ece\u4e0b\u9762\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u7684\u67e5\u8be2\u7f16\u8f91\u5668\u4e2d\u521b\u5efa\u6570\u636e\u5e93\u8bb0\u5f55\u5b58\u50a8\uff1a\n\u5728\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u662f\u521a\u521a\u901a\u8fc7\u8fd0\u884c\u547d\u4ee4\u521b\u5efa\u7684Recordstore\u6570\u636e\u5e93\uff1a\nCREATE TABLE IF NOT EXISTS\u8bb0\u5f55(RECORDID INT PRIMARY KEY\uff0cTITLE VARCHAR(255)NOT NULL\uff0cRELEASE", "note_en": "There are multiple ways to deploy API endpoints, such as this example, in which you could use an application running on Amazon EC2 to demonstrate how to integrate Amazon ElastiCache with Amazon DocumentDB (with MongoDB capability). While the approach in this example helps achieve great performance, and reliability through the elasticity and the ability to scale up or down the number of EC2 instances in order to accommodate the load on the application, there is still however some operational overhead you still have to manage the EC2 instances yourself. One way of addressing the operational overhead issue and related costs could be to transform the application into a serverless architecture.\n The example in this blog post uses an application that provides a similar use case, using a serverless architecture showcasing some of the tools that are being leveraged by customers transitioning from lift-and-shift to building cloud-native applications. It uses Amazon API Gateway to provide the REST API endpoint connected to an AWS Lambda function to provide the business logic to read and write from an Amazon Aurora Serverless database. It also showcases the deployment of most of the infrastructure with the AWS Cloud Development Kit, known as the CDK. By moving your applications to cloud native architecture like the example showcased in this blog post, you will be able to realize a number of benefits including:\n   At the end of this blog, you have an AWS Cloud9 instance environment containing a CDK project which deploys an API Gateway and Lambda function. This Lambda function leverages a secret stored in your AWS Secrets Manager to read and write from your Aurora Serverless database through the data API, as shown in the following diagram.\n     Initialize and configure an AWS Cloud Development Kit project including the definition of your Amazon API Gateway endpoint and AWS Lambda function\n  In order to deploy the CDK application, there are a few prerequisites that need to be met:\n    Expand the Additional Connectivity section and select the Data API option. This functionality enables you to access Aurora Serverless with web services-based applications. It also allows you to use the query editor feature for Aurora Serverless in order to run SQL queries against your database instance.\n Your database instance is created in a single availability zone (AZ), but\u00a0an Aurora Serverless database cluster has a capability known as automatic multi-AZ failover, which enables\u00a0Aurora to recreate the database instance in a different AZ should the current database instance or the AZ become unavailable. The storage volume for the cluster is spread across multiple AZs, since Aurora separates computation capacity and storage. This allows for data to remain available even if the database instance or the associated AZ is affected by an outage.\n  After creating the database instance, the next step is to store your secrets for your database in AWS Secrets Manager.\n Leave the default selection (Credentials for RDS database) for the secret type. Enter your database username and password and then select the radio button for the database you created in the previous step (in this example, db-blog), as shown in the following screenshot.\n  Enter a name and optionally a description. For the name, make sure to add the prefix rds-db-credentials/ as shown in the following screenshot.\n  Review your settings on the last page and choose Store to have your secrets created and stored in AWS Secrets Manager, which you can now use to connect to your database.\n  After creating the DB cluster, create the database instance; create your tables and populate them; and finally, test a connection to ensure that you can query your database.\n Navigate to the Amazon RDS service from the AWS console, and select your db-blog database cluster.\n Select Query under Actions to open the Connect to database window as shown in the screenshot below . Enter your database connection details. You can copy your secret manager ARN from the Secrets Manager service and paste it into the corresponding field in the database connection window.\n  To create the DB instance run the following SQL query:  CREATE DATABASE recordstore;from the Query editor shown in the screenshot below:\n   Before you can run the following commands, make sure you are using the Recordstore database you just created by running the command:\n  CREATE TABLE IF NOT EXISTS records (recordid INT PRIMARY KEY, title VARCHAR(255) NOT NULL, release_date DATE);", "posttime": "2020-05-17 06:55:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u7a0b\u5e8f,aws,serverless,\u6570\u636e\u5e93", "title": "\u4f7f\u7528AWS CDK\u90e8\u7f72\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f", "title_en": "Deploying a serverless application using AWS CDK", "transed": 1, "url": "https://idk.dev/deploying-a-serverless-application-using-aws-cdk/", "via": "", "real_tags": ["app", "\u7a0b\u5e8f", "aws", "\u6570\u636e\u5e93"]}, {"category": "", "categoryclass": "", "imagename": "263831df4d0fe82baabe5a5a1eb51d0e.jpg", "infoid": 1002459, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u52a0\u5dde\u6d77\u5cb8\u7684\u7ea2\u6749(Sequoia Sempervirens)\u662f\u4e00\u79cd\u592a\u5927\u800c\u65e0\u6cd5\u73af\u62b1\u7684\u6811\uff0c\u4ee4\u4eba\u60ca\u8bb6\u5730\u96be\u4ee5\u6349\u6478\u3002\u4ed6\u4eec\u7684\u57fa\u5730\u53ef\u80fd\u50cf\u5927\u8c61\u4e00\u6837\uff0c\u4f46\u5728\u4e0a\u6e38\uff0c\u4ed6\u4eec\u662f\u9ad8\u9ad8\u7684\uff0c\u4ee4\u4eba\u8d39\u89e3\u7684\u3002\u8fd9\u5c31\u662f\u6211\u51c6\u5907\u8fdb\u5165\u7684\u8fd9\u4e2a\u533a\u57df\uff0c\u52a0\u5dde\u5317\u90e8\u6d77\u5cb8\u7684\u4e00\u4e2a\u96fe\u6c14\u7b3c\u7f69\u7684\u7687\u51a0\u3002\u5bfc\u6e38\u628a\u6211\u7ed1\u5728\u9a6c\u5177\u4e0a\uff0c\u4e0d\u77e5\u4e0d\u89c9\u95f4\uff0c\u6211\u5df2\u7ecf\u5347\u5230140\u82f1\u5c3a\u9ad8\uff0c\u7136\u540e\u662f150\u82f1\u5c3a\uff0c160\u82f1\u5c3a\u3002\u6211\u51dd\u89c6\u7740\u90a3\u68f5\u6811\u9ed1\u6697\u800c\u591a\u8282\u7684\u6811\u76ae\uff0c\u4ee5\u5e73\u606f\u592a\u9633\u7a74\u91cc\u5347\u8d77\u7684\u7729\u6655\u3002\n\u5f53\u6211\u79bb\u5f00\u5730\u9762\u5927\u7ea620\u5c42\u697c\u7684\u65f6\u5019\uff0c\u90a3\u4e9b\u76ef\u7740\u6211\u770b\u7684\u5706\u70b9\u5927\u5c0f\u7684\u4eba\u5df2\u7ecf\u8d70\u4e86\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u6811\u679d\u548c\u9488\u5934\uff0c\u5b83\u4eec\u50cf\u7f51\u4e00\u6837\u7d27\u7d27\u5730\u56f4\u7ed5\u7740\u6211\u3002\u4e00\u4e1b\u4e1b\u9f20\u5c3e\u8349\u8272\u7684\u82d4\u85d3\u6447\u66f3\u7740\uff0c\u4e00\u79cd\u83ab\u540d\u7684\u5e73\u9759\u843d\u4e86\u4e0b\u6765\u3002\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u6211\u7684\u5934\u8111\u50cf\u677e\u9f20\u4e00\u6837\u4e71\u7a9c\uff0c\u610f\u8bc6\u5230\u6211\u6b63\u60ac\u6302\u5728\u79bb\u5730\u9762200\u82f1\u5c3a\u7684\u5730\u65b9\uff0c\u4f46\u8fd9\u68f5\u6811\u575a\u5982\u78d0\u77f3\u7684\u575a\u56fa-\u6bd5\u7adf\u5b83\u5728\u5927\u5baa\u7ae0\u4e4b\u524d\u5c31\u5df2\u7ecf\u5728\u8fd9\u91cc\u4e86-\u6b63\u5728\u4ea7\u751f\u5f71\u54cd\u3002\u8fd9\u91cc\u6709\u4e00\u79cd\u5bc2\u9759\u901a\u8fc7\u4e86\u7406\u89e3\u3002\n\u6211\u5e94\u8be5\u9884\u89c1\u5230\u8fd9\u4e00\u5207\u7684\u3002\u5927\u536b\u00b7\u7c73\u62c9\u5947\u5c31\u662f\u8fd9\u4e48\u5f62\u5bb9\u7684\u3002\u7c73\u62c9\u5947\u4e00\u751f\u4e2d\u552f\u4e00\u7684\u76ee\u6807\u5c31\u662f\u628a\u8fd9\u4e9b\u539f\u59cb\u68ee\u6797\u4ece\u60ac\u5d16\u8fb9\u62c9\u56de\u6765\uff0c\u4ed6\u77e5\u9053\u5982\u4f55\u628a\u4eba\u4eec\u4e89\u53d6\u5230\u4ed6\u7684\u4e8b\u4e1a\u4e2d\u6765\u3002\u6700\u597d\u7684\u6d17\u793c\u5c31\u662f\u4f53\u9a8c\u3002\u6211\u5728\u5176\u4ed6\u4eba\u4ece\u7687\u51a0\u4e4b\u65c5\u56de\u6765\u540e\u7684\u8138\u4e0a\u770b\u5230\u4e86\u8fd9\u4e00\u70b9\uff1a\u7ea2\u6da6\u7684\u8138\u988a\uff0c\u661f\u5149\u707f\u70c2\u7684\u773c\u775b\uff0c\u6df1\u6df1\u7684\u53f9\u606f\u3002\u4ed6\u4eec\u4fe1\u5949\u5927\u6811\u5b97\u6559\u3002\n\u7c73\u62c9\u5947\u6b63\u6307\u671b\u7740\u8fd9\u79cd\u8f6c\u53d8\uff0c\u4ed6\u6000\u7740\u4e00\u79cd\u5b97\u6559\u70ed\u60c5\u5bf9\u5f85\u4ed6\u6bd5\u751f\u7684\u5de5\u4f5c\u3002\u4ed6\u662f\u4e00\u5bb6\u540d\u4e3a\u5927\u5929\u4f7f\u53e4\u6811\u6863\u6848\u9986\u7684\u975e\u8425\u5229\u6027\u7ec4\u7ec7\u7684\u521b\u59cb\u4eba\uff0c\u4ed6\u8981\u4f20\u64ad\u52a0\u5dde\u6d77\u5cb8\u7ea2\u6749\u7684\u798f\u97f3\u3002\u591a\u5e74\u7684\u5e72\u65f1\u548c\u53d8\u5316\u65e0\u5e38\u7684\u6c14\u6e29\u5df2\u7ecf\u5c06\u8fd9\u4e9b\u5e38\u7eff\u5de8\u4eba\u8d76\u51fa\u4e86\u5b83\u4eec\u66fe\u7ecf\u5c45\u4f4f\u7684\u4e00\u4e9b\u6cbf\u6d77\u5730\u533a\u3002\u8fd9\u4e9b\u6811\u7684\u5bff\u547d\u53ef\u4ee5\u957f\u8fbe2000\u52303000\u5e74\uff0c\u4f46\u4e00\u4e9b\u79d1\u5b66\u5bb6\u8ba4\u4e3a\uff0c\u6309\u7167\u76ee\u524d\u7684\u60c5\u51b5\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u5728\u8fd9\u6bb5\u65f6\u95f4\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\u95f4\u5185\u4ece\u52a0\u5dde\u6d88\u5931\u3002\n\u7c73\u62c9\u5947\u6bcf\u5929\u90fd\u5728\u5bfb\u627e\u4ed6\u80fd\u627e\u5230\u7684\u6700\u4e30\u76db\u7684\u6d77\u5cb8\u7ea2\u6728\u6807\u672c\uff0c\u5728\u4ed6\u81ea\u5df1\u7684\u5b9e\u9a8c\u5ba4\u91cc\u514b\u9686\u5b83\u4eec\uff0c\u7136\u540e\u628a\u5b83\u4eec\u79cd\u690d\u5728\u7cbe\u5fc3\u6311\u9009\u7684\u5730\u5757\u4e0a\uff0c\u5728\u90a3\u91cc\u5b83\u4eec\u53ef\u4ee5\u8301\u58ee\u6210\u957f\uff0c\u5e0c\u671b\u80fd\u6301\u7eed\u6570\u5343\u5e74\u3002\u5176\u4e2d\u4e00\u4e2a\u5730\u70b9\u662f\u65e7\u91d1\u5c71\u666e\u96f7\u897f\u8fea\u5965\u7684\u4e00\u4e2a\u65b0\u5b9e\u9a8c\u5e8a\uff0c\u8fd9\u662f\u7f8e\u56fd\u56fd\u5bb6\u516c\u56ed\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002\u7c73\u62c9\u5947\u7684\u76ee\u6807\u65e2\u662f\u7528\u6700\u5f3a\u58ee\u7684\u4e2a\u4f53\u7684\u514b\u9686\u6765\u52a0\u5f3a\u6d77\u5cb8\u7ea2\u6749\u57fa\u56e0\u5e93\uff0c\u4e5f\u662f\u4e3a\u4e86\u50a8\u5b58\u5927\u91cf\u5bfc\u81f4\u6c14\u5019\u53d8\u5316\u7684\u78b3-\u6bcf\u82f1\u4ea9\u7ea2\u6749\u8d85\u8fc71000\u5428\uff0c\u6bd4\u4e16\u754c\u4e0a\u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u7684\u68ee\u6797\u90fd\u591a\u3002\u8fd9\u662f\u4e00\u9879\u590d\u6742\u7684\u4efb\u52a1\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7406\u5ff5\uff1a\u62ef\u6551\u5927\u6811\uff0c\u5b83\u4eec\u5c31\u4f1a\u62ef\u6551\u6211\u4eec\u3002\u5e94\u5bf9\u6c14\u5019\u53d8\u5316\u9700\u8981\u7684\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u4f46\u7c73\u62c9\u5947\u72ec\u7279\u7684\u5949\u732e\u7cbe\u795e\u81f3\u5c11\u53cd\u6620\u4e86\u6211\u4eec\u6240\u9700\u8981\u7684\u90a3\u79cd\u70ed\u60c5\u3002\n\u51e0\u5343\u5e74\u6765\uff0c\u52a0\u5dde\u6d77\u5cb8\u7ea2\u6749\u4f3c\u4e4e\u662f\u6700\u540e\u4e00\u4e2a\u9700\u8981\u62ef\u6551\u7684\u6811\u79cd\u3002\u5b83\u4eec\u662f\u8010\u529b\u51a0\u519b\uff0c\u80fd\u5728\u51e0\u5343\u5e74\u7684\u81ea\u7136\u6d2a\u6c34\u3001\u5e72\u65f1\u3001\u6d77\u5578\u3001\u706b\u707e\u548c\u5267\u70c8\u7684\u6e29\u5ea6\u6ce2\u52a8\u4e2d\u5e78\u5b58\u4e0b\u6765\u3002\u53ea\u8981\u5b83\u4eec\u4f9d\u9760\u6bcf\u5929\u65e9\u4e0a\u6eda\u6eda\u800c\u6765\u7684\u96e8\u6c34\u548c\u6cbf\u6d77\u96fe\u5cb8\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u8301\u58ee\u6210\u957f\uff0c\u5e76\u4ece\u7834\u574f\u4e2d\u6062\u590d\u8fc7\u6765\u3002\u968f\u7740\u6c14\u6e29\u7684\u5347\u9ad8\uff0c\u8fd9\u4e9b\u5173\u952e\u7684\u6c34\u6e90\u6b63\u5728\u6d88\u6563\u3002\u6811\u6728\u559c\u6b22\u7684\u6f6e\u6e7f\u6761\u4ef6-\u4e3b\u8981\u662f\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u548c\u4fc4\u52d2\u5188\u5dde\u8c4c\u8c46\u6c64\u7684\u53e3\u888b\u91cc-\u6bd4\u8fc7\u53bb\u66f4\u52a0\u7f55\u89c1\u3002\u6d77\u5cb8\u7ea2\u6749\u73b0\u5728\u5360\u636e\u7684\u9762\u79ef\u4e0d\u5230\u5b83\u4eec\u539f\u6765\u6d3b\u52a8\u8303\u56f4\u768410%\u3002\u5b83\u4eec\u7684\u635f\u5931\u5c06\u4ea7\u751f\u8fde\u9501\u53cd\u5e94-\u7ecf\u6d4e\u3001\u751f\u6001\u3001\u60c5\u611f-\u7279\u522b\u662f\u5728\u5b83\u4eec\u53ef\u4ee5\u50a8\u5b58\u7684\u5927\u91cf\u78b3\u65b9\u9762\u3002\n\u5728\u4fdd\u7559\u7740\u6d77\u5cb8\u7ea2\u6749\u7684\u5730\u65b9\uff0c\u5b83\u4eec\u65e0\u58f0\u7684\u58ee\u4e3d\u7b80\u76f4\u4ee4\u4eba\u65e0\u6cd5\u6297\u62d2\u3002\u56e0\u6b64\uff0c\u81f3\u5c11\u6709\u4e00\u70b9\u8bbd\u523a\u7684\u662f\uff0c\u4ed6\u4eec\u6700\u4f1f\u5927\u7684\u5021\u5bfc\u8005\u4e4b\u4e00\u662f\u8fd9\u6837\u4e00\u4f4d\u5065\u8c08\u7684\u4eba\u3002\u5982\u679c\u4f60\u548c\u7c73\u62c9\u5947\u5f00\u59cb\u5bf9\u8bdd\uff0c\u4f60\u4f1a\u572810\u5206\u949f\u5185\u4e86\u89e3\u5230\u4ed6\u7684\u4eba\u751f\u6545\u4e8b-\u4ece\u4ed6\u5728\u5e95\u7279\u5f8b\u7684\u6469\u6258\u8f66\u5e2e\u6d3e\u65e5\u5b50\uff0c\u5230\u8ba9\u4ed6\u8d70\u4e0a\u73b0\u5728\u7684\u9053\u8def\u7684\u542f\u793a\uff0c\u6d89\u53ca\u5230\u4e00\u6b21\u6fd2\u6b7b\u4f53\u9a8c\uff0c\u5929\u4f7f\uff0c\u4ee5\u53ca\u4e00\u4e2a\u975e\u5b9e\u4f53\u7684\u58f0\u97f3\uff0c\u53e3\u8ff0\u4e86\u4ed6\u5728\u51cc\u6668\u5199\u4e0b\u7684\u4e00\u4e2a\u8ba1\u5212\u3002\u7b2c\u4e8c\u5929\uff0c\u5f53\u4ed6\u5b8c\u5168\u9192\u6765\u65f6\uff0c\u4ed6\u8bf4\uff0c\u201c\u90a3\u672c\u6cd5\u5f8b\u4fbf\u7b7e\u7c3f\u4e0a\u6709\u4e00\u4efd8\u9875\u7684\u63d0\u7eb2\u3002\u8fd9\u662f\u8fd9\u4e2a\u9879\u76ee\u7684\u5927\u7eb2\u3002\u201c\u3002\n\u9009\u62e9\u7c73\u62c9\u5947\u6765\u6267\u884c\u8fd9\u9879\u4efb\u52a1\u7684\u5929\u4f7f\u4f3c\u4e4e\u9009\u5bf9\u4e86\u4eba--\u4ed6\u4e0d\u4ec5\u662f\u4e00\u4f4d\u80fd\u5e72\u7684\u6811\u6728\u4f20\u9053\u8005\uff0c\u800c\u4e14\u8fd8\u662f\u7b2c\u4e09\u4ee3\u836b\u51c9\u6811\u6728\u79cd\u690d\u8005\u3002\u4ed6\u7684\u513f\u5b50\u6770\u514b\u548c\u8d3e\u91cc\u5fb7\u90fd\u4e3a\u5927\u5929\u4f7f\u5de5\u4f5c\uff0c\u662f\u7b2c\u56db\u4e2a\u3002\u56e0\u6b64\uff0c\u4ed6\u77e5\u9053\u901a\u8fc7\u5bfb\u627e\u6700\u5065\u5eb7\u7684\u6807\u672c\u3001\u4fee\u526a\u548c\u7e41\u6b96\u5b83\u4eec\uff0c\u7136\u540e\u57f9\u80b2\u7cbe\u81f4\u7684\u65b0\u6811\uff0c\u8ba9\u7b28\u62d9\u7684\u4e54\u6728\u7269\u79cd\u53d1\u6325\u5176\u6f5c\u529b\u7684\u6240\u6709\u79d8\u8bc0\u3002\n\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5317\u90e8\u6d77\u5cb8\u7684\u539f\u59cb\u68ee\u6797\u4e2d\uff0c\u7c73\u62c9\u514b\u77e5\u9053\u4ed6\u5728\u5bfb\u627e\u4ec0\u4e48\uff1a\u901a\u8fc7\u4e00\u5343\u5e74\u6216\u66f4\u957f\u65f6\u95f4\u7684\u751f\u5b58\u8bc1\u660e\u4e86\u81ea\u5df1\u52c7\u6c14\u7684\u7ea2\u6749\u3002\u5176\u4e2d\u4e00\u4e9b\u5e76\u4e0d\u662f\u5b8c\u5168\u957f\u6210\u7684\u5e9e\u7136\u5927\u7269\uff0c\u800c\u53ea\u662f\u6811\u6869\u6216\u201c\u4ed9\u5973\u73af\u201d\uff0c\u8fd9\u4e2a\u672f\u8bed\u6307\u7684\u662f\u4e00\u5708\u53d1\u82bd\uff0c\u5b8c\u5168\u662f\u5012\u4e0b\u7684\u6bcd\u6811\u7684\u514b\u9686\uff0c\u9760\u8150\u70c2\u7684\u6b8b\u4f59\u7269\u8301\u58ee\u6210\u957f\u3002\u201c\u7ea2\u6749\uff0c\u5c31\u5728\u4ed6\u4eec\u6b7b\u4e4b\u524d\uff0c\u4ed6\u4eec\u77e5\u9053\u81ea\u5df1\u6b63\u5728\u6b7b\u53bb\uff0c\u201d\u7c73\u62c9\u5947\u8bf4\u3002\u201c\u5b83\u4eec\u4f1a\u81ea\u6211\u514b\u9686\u3002\u6709\u5341\u51e0\u68f5\u6811(\u53d1\u82bd)\u6765\u81ea\u6839\u7cfb\uff0c\u6240\u4ee5\u5f53\u5979\u7ecf\u8fc7\u7684\u65f6\u5019\uff0c\u5979\u5c31\u6d3b\u4e86\u4e0b\u6765\u3002\u201c\u3002\n\u4e00\u65e6\u7c73\u62c9\u5947\u548c\u4ed6\u7684\u56e2\u961f\u627e\u5230\u4e86\u5408\u9002\u7684\u6811-\u5982\u679c\u5b83\u8fd8\u4e0d\u662f\u6811\u6869-\u4ed6\u4eec\u5c31\u7a7f\u7740\u9a6c\u5177\u722c\u5230\u6811\u51a0\u4e0a\uff0c\u6536\u83b7\u6570\u767e\u4e2a\u6de1\u7eff\u8272\u7684\u6811\u679d\u5c16\u7aef\uff0c\u6bcf\u4e2a\u5927\u7ea6\u4e00\u4e2a\u6307\u5c16\u5927\u5c0f\u3002\u8fd9\u4e9b\u4e1c\u897f\u88ab\u5c0f\u5fc3\u7ffc\u7ffc\u5730\u5077\u5077\u5e26\u56de\u4e86\u4f4d\u4e8e\u5bc6\u6b47\u6839\u5dde\u79d1\u6f58\u7c73\u4ec0\u7684\u5927\u5929\u4f7f\u5b9e\u9a8c\u5ba4\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u6b63\u786e\u7684\u65f6\u95f4\u62cd\u6444\u8fd9\u4e9b\u526a\u679d\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u6770\u514b\u00b7\u7c73\u62c9\u5947\u89e3\u91ca\u8bf4\uff1a\u201c\u5f53\u6811\u6728\u538b\u529b\u8fc7\u5927\u65f6\uff0c\u6211\u4eec\u4f1a\u8fdc\u79bb\u6536\u96c6\u6750\u6599\u3002\u201d\u201c\u5b83\u5fc5\u987b\u8fbe\u5230\u4e00\u5b9a\u7684\u786c\u5316\u7a0b\u5ea6\u3002\u201d\u592a\u7eff\u5c31\u4f1a\u67af\u840e\uff0c\u592a\u6210\u719f\u5c31\u4e0d\u4f1a\u6b63\u5e38\u751f\u6839\u3002\n\u4e0b\u4e00\u6b65\u662f\u8ba9\u63d2\u7a57\u751f\u6839\u3002\u6770\u514b\u8bf4\uff0c\u4e00\u4e9b\u5728\u80a5\u6c83\u7684\u571f\u58e4\u4e2d\u901a\u8fc7\u4e00\u5b9a\u5242\u91cf\u7684\u751f\u6839\u57f9\u517b\u57fa\u8301\u58ee\u6210\u957f\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u9700\u8981\u66f4\u591a\u7684\u5e2e\u52a9-\u8fd9\u4e00\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u5fae\u7e41\u6b96\u3002\u201c\u6211\u4eec\u6b63\u5728\u63d0\u53d6\u5fae\u5c0f\u7684\u5c16\u7aef\uff0c\u5e76\u57fa\u672c\u4e0a\u5728\u4f53\u5916\u7e41\u6b96\u5b83\u4eec\u3002\u4e0d\u662f\u6df1\u5165\u5230\u7ec6\u80de\uff0c\u800c\u662f\u6df1\u5165\u5230\u8fd9\u4e2a\u5927\u5c0f\u7684\u830e-\u201c\u4ed6\u6307\u7740\u5c55\u5f00\u5730\u56fe\u4e0a\u7684\u4e00\u4e2a\u70b9\u3002\u8fd9\u4e9b\u7247\u6bb5\u5728\u65e0\u83cc\u5bb9\u5668\u4e2d\u5f97\u5230\u62a4\u7406\uff0c\u4ee5\u9632\u6b62\u7ec6\u83cc\u5e72\u6270\u53d1\u80b2\u7684\u5173\u952e\u9636\u6bb5\u3002\u4f46\u4ecd\u7136\u9700\u8981\u8fdb\u884c\u5927\u91cf\u7684\u8bd5\u9a8c\u548c\u72af\u9519\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u53ea\u67093%\u52304%\u7684\u6700\u5c0f\u7684\u6d77\u5cb8\u7ea2\u6749\u679d\u6761\u5b58\u6d3b\u7684\u65f6\u95f4\u8db3\u591f\u957f\uff0c\u8db3\u4ee5\u8fdb\u5165\u5730\u4e0b\u3002\n\u5728\u65e7\u91d1\u5c71\u7684\u666e\u96f7\u897f\u8fea\u5965(Presidio)\u6df1\u5904\uff0c\u5728\u91d1\u95e8\u5927\u6865(Golden Gate Bridge)\u7684\u5357\u4fa7\u5165\u53e3\u4e0b\uff0c\u5728\u4e00\u9053\u94c1\u4e1d\u7f51\u56f4\u680f\u540e\u9762\uff0c\u6709\u4e00\u7247\u9633\u5149\u6591\u9a73\u7684\u7a7a\u5730\uff0c\u51e0\u5341\u6839\u6728\u6869\u6574\u9f50\u5730\u6392\u6210\u4e00\u6392\u6392\u3002\u6bcf\u68f5\u6811\u4e0a\u7cfb\u7740\u4e00\u68f5\u7ec6\u957f\u7684\u67e5\u7406\u00b7\u5e03\u6717\u6811\uff0c\u5927\u7ea6\u4e00\u82f1\u5c3a\u9ad8\u3002\u5f53\u666e\u96f7\u897f\u8fea\u5965\u7684\u68ee\u6797\u7ba1\u7406\u5458\u60f3\u8981\u7528\u6d77\u5cb8\u7ea2\u6749\u79cd\u690d\u4e00\u7247\u5f00\u9614\u7684\u533a\u57df\uff0c\u5e76\u542c\u8bf4\u4e86\u7c73\u62c9\u514b\u7684\u514b\u9686\u8ba1\u5212\u65f6\uff0c\u4ed6\u4eec\u8054\u7cfb\u4e86\u4ed6\uff0c\u5e0c\u671b\u4ed6\u80fd\u5065\u5eb7\u5730\u5f00\u59cb\u79cd\u690d\u6811\u6728\u3002\n2018\u5e74\u672b\uff0c\u5f53Presidio\u7684\u5de5\u4f5c\u4eba\u5458\u79cd\u690d\u4e86\u8fd975\u682a\u514b\u9686\u7ea2\u6749\u65f6\uff0c\u56fd\u5bb6\u516c\u56ed\u4fdd\u62a4\u534f\u4f1a\u53d1\u5e03\u4e86\u4e00\u4efd\u65b0\u95fb\u7a3f-\u4f46\u8fd9\u8fd8\u4e0d\u662f\u4e00\u4e2a\u5438\u5f15\u6e38\u5ba2\u7684\u6d3b\u52a8\u3002\u201c\u5b83\u6709\u70b9\u88ab\u85cf\u8d77\u6765\u4e86\uff0c\u201d\u666e\u96f7\u897f\u8fea\u5965\u9996\u5e2d\u68ee\u6797\u7ba1\u7406\u5458\u5e03\u83b1\u514b\u00b7\u7279\u7f57\u514b\u585e\u5c14(Blake Troxel)\u8bf4\u3002\u201c\u9664\u4e86\u6211\u4eec\u548c\u571f\u72fc\uff0c\u6ca1\u4eba\u4f1a\u6765\u8fd9\u91cc\u3002\u201d\n\u8fd9\u7247\u5c0f\u6811\u6797\u7684\u80cc\u666f\u662f\u53c2\u5dee\u4e0d\u9f50\u7684\u8001\u6811\u836b\u6811\uff0c\u5176\u4e2d\u5305\u62ec\u4e00\u4e9b\u6d77\u5cb8\u7ea2\u6749\uff0c\u8fd9\u4e9b\u7ea2\u6749\u662f\u516c\u56ed\u572819\u4e16\u7eaa\u66fe\u7ecf\u7684\u519b\u4e8b\u7ba1\u7406\u90e8\u95e8\u79cd\u690d\u7684\uff0c\u73b0\u5728\u6bcf\u68f5\u90fd\u6709100\u591a\u82f1\u5c3a\u9ad8\u3002\u8fd9\u4e9b\u8f83\u5c0f\u7684\u6811\u6728\u90fd\u662f\u5728\u7c73\u62c9\u5947\u7684\u5bc6\u6b47\u6839\u5b9e\u9a8c\u5ba4\u57f9\u80b2\u7684\uff0c\u5b83\u4eec\u6765\u81ea\u7f57\u9a6c\u5e1d\u56fd\u4e4b\u524d\u7684\u6d77\u5cb8\u7ea2\u6728\u6811\u6869\u3002\u51e0\u4e4e\u6bcf\u5929\u665a\u4e0a\u51cc\u6668\u65f6\u5206\u7ffb\u6eda\u7684\u94f6\u7070\u8272\u96fe\u5cb8\u6784\u6210\u4e86\u8fd9\u7247\u7406\u60f3\u7684\u6d77\u5cb8\u7ea2\u6749\u533a\uff0c\u5c3d\u7ba1\u5b83\u6216\u591a\u6216\u5c11\u4f4d\u4e8e\u57ce\u5e02\u7684\u4e2d\u5fc3\u3002\u7279\u7f57\u514b\u585e\u5c14\u8bf4\uff0c\u5373\u4fbf\u5982\u6b64\uff0c\u65b0\u6811\u5728\u5c0f\u6811\u6797\u91cc\u7684\u6210\u529f\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u3002Presidio\u56e2\u961f\u5bf9\u7f51\u7ad9\u8fdb\u884c\u4e86\u79ef\u6781\u7684\u7ba1\u7406\uff0c\u4ee5\u786e\u4fdd\u7ea2\u6749\u542f\u52a8\u4e0d\u4f1a\u88ab\u589e\u957f\u66f4\u5feb\u7684\u7ade\u4e89\u5bf9\u624b\u9eef\u7136\u5931\u8272\u3002\u201c\u8349\u662f\u8ba9\u5b83\u53d8\u5f97\u56f0\u96be\u7684\u539f\u56e0\uff0c\u201d\u7279\u7f57\u514b\u585e\u5c14\u8bf4\u3002\u201c\u6211\u4eec\u8d70\u4e86\u8fc7\u6765\uff0c\u8fdb\u884c\u4e86\u526a\u88c1\u3002\u201d\u5e7c\u5c0f\u7684\u7ea2\u6749\u6bcf\u5468\u8fd8\u4f1a\u5728\u4e0d\u4e0b\u96e8\u7684\u65f6\u5019\u63a5\u53d7\u51e0\u4e2a\u5c0f\u65f6\u7684\u6ef4\u704c\uff0c\u8fd8\u4f1a\u4ece\u516c\u56ed\u7684\u5176\u4ed6\u5730\u65b9\u6ce8\u5165\u5806\u80a5\u3002\u4e3a\u4e86\u5e2e\u52a9\u514b\u9686\u4eba\u66f4\u6709\u5bbe\u81f3\u5982\u5f52\u7684\u611f\u89c9\uff0c\u7279\u7f57\u514b\u585e\u5c14\u548c\u4ed6\u7684\u56e2\u961f\u6700\u7ec8\u5c06\u79cd\u690d\u5929\u7136\u7ea2\u6749\u6797\u4e2d\u51fa\u73b0\u7684\u843d\u53f6\u4e0b\u7269\u79cd\uff0c\u5982\u6d77\u5cb8\u6d3b\u6a61\u6811\u3001\u52a0\u5dde\u4e03\u53f6\u6811\u548c\u63a5\u9aa8\u6728\u3002\n\u7c73\u62c9\u5947\u5e0c\u671bPresidio\u7f51\u7ad9\u80fd\u5c55\u793a\u5982\u4f55\u5728\u66f4\u5927\u8303\u56f4\u5185\u79cd\u690d\u7ea2\u6749\u65e0\u6027\u7cfb\uff0c\u800cTroxel\u7684\u53cd\u9988\u5c06\u662f\u4e00\u4e2a\u5b9d\u8d35\u7684\u4fe1\u606f\u6765\u6e90\u3002\u5982\u679c\u7ea2\u6749\u7684\u67d0\u4e2a\u4e9a\u79cd\u5728\u90a3\u91cc\u751f\u957f\u5f97\u7279\u522b\u597d\uff0c\u52a0\u5dde\u7684\u79cd\u690d\u8005\u5c31\u4f1a\u77e5\u9053\uff0c\u8be5\u54c1\u79cd\u53ef\u80fd\u4f1a\u5728\u5168\u5dde\u7c7b\u4f3c\u7684\u79cd\u690d\u5730\u70b9\u8868\u73b0\u826f\u597d\u3002\n\u5f53\u7136\uff0c\u4e0d\u662f\u6240\u6709\u768475\u68f5\u6811\u90fd\u6709\u4e00\u5929\u4f1a\u5728\u8fd9\u91cc\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002\u968f\u7740\u7ea2\u6749\u7684\u6210\u719f\uff0c\u5b83\u4eec\u7684\u9876\u7aef\u6811\u679d\u5468\u56f4\u9700\u8981\u8d8a\u6765\u8d8a\u591a\u7684\u7a7a\u95f4\uff0c\u8fd9\u6837\u5b83\u4eec\u624d\u80fd\u83b7\u5f97\u6240\u9700\u7684\u9633\u5149\u3002\u201c\u4e94\u5e74\u540e\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u4ed6\u4eec\u7684\u738b\u51a0\u5c06\u4f1a\u89e6\u52a8\u4eba\u5fc3\u3002\u201d\u5728\u8fd9\u4e9b\u6811\u628a\u5b83\u4eec\u7684\u516c\u56ed\u817f\u653e\u5728\u5b83\u4eec\u4e0b\u9762\u4e4b\u540e\uff0c\u7279\u7f57\u514b\u585e\u5c14\u8ba1\u5212\u6709\u9009\u62e9\u5730\u5c06\u5b83\u4eec\u53d8\u8584\uff0c\u4ee5\u4fbf\u8ba9\u6700\u5f3a\u58ee\u7684\u6811\u6709\u6700\u597d\u7684\u673a\u4f1a\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u5f53\u7c73\u62c9\u5947\u542f\u52a8\u5927\u5929\u4f7f\u9879\u76ee\u65f6\uff0c\u4ed6\u60f3\u8c61\u7740\u50cf\u8fd9\u6837\u7684\u6811\u82d7\u6811\u6797\uff0c\u4f46\u968f\u7740\u79d1\u5b66\u5bb6\u548c\u6d3b\u52a8\u5bb6\u5bf9\u6e29\u5ba4\u6c14\u4f53\u6392\u653e\u53d1\u51fa\u8b66\u544a\uff0c\u4ed6\u7684\u89c6\u91ce\u5f00\u59cb\u5f00\u9614\u3002\u8fd9\u4e9b\u5929\u6765\uff0c\u4ed6\u8d8a\u6765\u8d8a\u591a\u5730\u8c08\u5230\u8feb\u4f7f\u6d77\u5cb8\u7ea2\u6749\u6295\u5165\u670d\u52a1\uff0c\u4ee5\u6355\u83b7\u5927\u6c14\u4e2d\u7684\u78b3\u3002\u4ed6\u8bf4\uff1a\u201c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ef\u884c\u7684\u3001\u53ef\u8861\u91cf\u7684\u89e3\u51b3\u65b9\u6848\u6765\u626d\u8f6c\u5bfc\u81f4\u9ad8\u3001\u4f4e\u3001\u66b4\u98ce\u96e8\u548c\u5e72\u65f1\u7684\u8fc7\u91cf\u78b3\u6392\u653e\u3002\u201d\u201c\u8fd9\u662f\u5173\u4e8e\u6211\u4eec\u7684\u5b50\u5b59\u540e\u4ee3\u6709\u673a\u4f1a\u751f\u6d3b\u7684\u4e8b\u60c5\u3002\u201d\u4ed6\u7535\u5b50\u90ae\u4ef6\u4e0a\u7684\u7b7e\u540d\u884c\u662f\u8fd9\u6837\u5199\u7684\uff1a\u201c\u51a0\u519b\u6811\u5c31\u662f\u7b54\u6848\u3002\u201d\n\u4e00\u4e9b\u79d1\u5b66\u652f\u6301\u4e86\u7c73\u62c9\u5947\u5bf9\u8fd9\u4e9b\u6811\u7684\u8fc7\u5ea6\u4fe1\u4efb\u3002\u57282019\u5e747\u6708\u53d1\u8868\u7684\u4e00\u7bc7\u300a\u79d1\u5b66\u300b\u6742\u5fd7(Science)\u7684\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u745e\u58eb\u7814\u7a76\u4eba\u5458\u4f30\u8ba1\uff0c9\u4ebf\u516c\u9877\u7684\u65b0\u68ee\u6797-\u76f8\u5f53\u4e8e\u7f8e\u56fd\u5927\u9646\u7684\u5927\u5c0f-\u53ef\u4ee5\u6355\u83b7\u8db3\u591f\u7684\u78b3\uff0c\u5c06\u5927\u6c14\u4e2d\u7684\u4e8c\u6c27\u5316\u78b3\u6c34\u5e73\u964d\u4f4e\u7ea625%\u3002\u65b0\u7684\u7ea2\u6749\u6797\u53ef\u80fd\u662f\u4e00\u4e2a\u5f00\u59cb\uff0c\u56e0\u4e3a\u5b83\u4eec\u6bcf\u82f1\u4ea9\u50a8\u5b58\u4e86\u5927\u91cf\u7684\u78b3\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u80fd\u8301\u58ee\u6210\u957f\uff0c\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u751f\u957f\u3002\nTroxel\u4e0d\u613f\u5728\u690d\u6811\u7684\u78b3\u5bb9\u91cf\u4e0a\u6295\u5165\u592a\u591a\u3002\u201c\u4f5c\u4e3a\u7075\u4e39\u5999\u836f\uff0c\u6211\u4e0d\u662f\u5f88\u786e\u5b9a\uff0c\u201d\u4ed6\u8bf4\u3002\u4ed6\u5f3a\u8c03\u4e86\u6062\u590d\u5305\u62ec\u5927\u6811\u5728\u5185\u7684\u6574\u4e2a\u81ea\u7136\u751f\u6001\u7cfb\u7edf\u7684\u91cd\u8981\u6027\u3002\u6b63\u5982\u4f26\u6566\u5927\u5b66\u5b66\u9662\u5730\u7403\u79d1\u5b66\u5bb6\u9a6c\u514b\u00b7\u9a6c\u65af\u6797(Mark Maslin)\u548c\u897f\u8499\u00b7\u5218\u6613\u65af(Simon Lewis)\u5728\u5bf9\u8bdd\u4e2d\u6307\u51fa\u7684\u90a3\u6837\uff0c\u91cd\u65b0\u9020\u6797\u5f88\u96be\u8bf4\u662f\u5bf9\u6297\u6c14\u5019\u53d8\u5316\u7684\u7075\u4e39\u5999\u836f\u3002\u5b83\u53ef\u80fd\u9700\u8981\u51e0\u4e2a\u4e16\u7eaa\uff0c\u751a\u81f3\u51e0\u5343\u5e74\u7684\u65f6\u95f4\u624d\u80fd\u4ea7\u751f\u6548\u679c\uff0c\u800c\u8fd9\u662f\u6c14\u5019\u95ee\u9898\u6ca1\u6709\u7684\u65f6\u95f4\u3002\u79d1\u5b66\u7814\u7a76\u4e2d\u6307\u5b9a\u7528\u4e8e\u91cd\u65b0\u9020\u6797\u7684\u4e00\u4e9b\u571f\u5730\u5730\u533a\uff0c\u5f53\u4eba\u4eec\u62bd\u51fa\u65f6\u95f4\u79cd\u690d\u68ee\u6797\u65f6\uff0c\u6700\u7ec8\u53ef\u80fd\u4f1a\u53d8\u5f97\u592a\u70ed\uff0c\u4e0d\u9002\u5408\u68ee\u6797\u79cd\u690d\u3002\u201c\u91cd\u65b0\u9020\u6797\uff0c\u201d\u9a6c\u65af\u6797\u548c\u5218\u6613\u65af\u5199\u9053\uff0c\u201c\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u5e94\u5bf9\u6c14\u5019\u53d8\u5316\u7684\u4f17\u591a\u89e3\u51b3\u65b9\u6848\u4e4b\u4e00\u3002\u201d\n\u5373\u4f7f\u51a0\u519b\u6811\u672c\u8eab\u4e0d\u662f\u7b54\u6848\uff0c\u7c73\u62c9\u514b\u4e5f\u51b3\u5fc3\u770b\u5230\u5b83\u4eec\u81f3\u5c11\u6210\u4e3a\u7b54\u6848\u7684\u4e00\u90e8\u5206\u3002\u4ed6\u8ba4\u4e3a\uff0c\u5982\u679c\u8bf4\u6709\u4ec0\u4e48\u4e1c\u897f\u503c\u5f97\u5f7b\u5934\u5f7b\u5c3e\u5730\u5145\u5f53\u6551\u4e16\u4e3b\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u521b\u9020\u4e86\u5343\u767e\u5e74\u6765\u81ea\u6211\u590d\u5236\u7684\u5de8\u4eba\u7684\u6c38\u6052\u5c0f\u6811\u6797\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9020\u798f\u5168\u4eba\u7c7b\u3002\u201c\u6211\u4eec\u6709\u4e00\u4efd100\u68f5\u6700\u91cd\u8981\u7684\u6811\u7684\u514b\u9686\u540d\u5355\u3002\u6211\u4eec\u6709\u884c\u519b\u547d\u4ee4\u3002\u6211\u4eec\u77e5\u9053\u6211\u4eec\u9700\u8981\u53bb\u54ea\u91cc\uff0c\u201c\u7c73\u62c9\u5947\u8bf4\u3002\u201c\u6211\u6bcf\u5929\u65e9\u4e0a\u90fd\u4f1a\u4e3e\u624b\u8bf4\uff0c\u2018\u7528\u6211\u5427\u3002\u2019\u201d", "note_en": "For a tree too big to wrap your arms around, the California coast redwood,  Sequoia sempervirens, is surprisingly elusive. Their bases might be elephantine, but the upper reaches, they\u2019re lofty, inscrutable. It\u2019s this zone that I\u2019m preparing to enter, a fog-shrouded crown on the northern California coast. A guide cinches me into a harness, and before I know it, I\u2019m 140 feet up, then 150, 160. I stare at the tree\u2019s dark, gnarled bark to quell the vertigo rising in my temples.\n By the time I\u2019m about 20 stories off the ground, the dot-sized people staring up at me are gone, replaced by intertwined branches and needles that close around me like a net. Clumps of sage-colored moss dangle and an inexplicable calm descends. Somewhere, my mind is scrambling like a squirrel, aware that I\u2019m dangling 200 feet off the ground, but the tree\u2019s unrelenting solidity\u2014it\u2019s been here since before the Magna Carta, after all\u2014is having an effect. There\u2019s a stillness up here that passes understanding.\n I should have seen this coming. It\u2019s just the way David Milarch described it. Milarch\u2019s singular goal in life is to bring these primeval forests back from the brink, and he knows just how to win people to his cause. The best baptism is the experience. I see it in the faces of others after they return from a crown visit: blooming cheeks, starry eyes, deep sighs. They\u2019ve gotten big tree religion.\n  Milarch is counting on this kind of conversion, and he approaches his life\u2019s work with a religious zeal. He is the founder of a nonprofit called the Archangel Ancient Tree Archive, and he\u2019s out to spread the gospel of California\u2019s coast redwoods. Years of droughts and shifting temperatures have already driven these evergreen giants out of some coastal zones they once inhabited. The trees can live for as long as 2,000 to 3,000 years, but some scientists think, the way things are going, that they could disappear from California in a fraction of that time.\n Milarch spends his days tracking down the heartiest coast redwood specimens he can find, cloning them in his own lab, and then planting them in carefully chosen plots where they can thrive, hopefully for millennia. One site is a new experimental bed in San Francisco\u2019s Presidio, part of the U.S. National Park system. Milarch\u2019s goal is both to strengthen the coast redwood gene pool with clones of the strongest individuals, and to store loads of climate-change-causing carbon\u2014more than 1,000 tons per acre of redwoods, more than any other kind of forest in the world. It\u2019s a complicated mission with a simple philosophy: Save the big trees, and they\u2019ll save us. Reckoning with climate change will take much more than that, but Milarch\u2019s singular devotion is at least a reflection of the kind of zeal we\u2019ll need.\n  For millennia, California coast redwoods seemed like the last tree species that would need to be saved. They are endurance champions that survive through thousands of years of natural floods, droughts, tsunamis, fires, and wild temperature swings. They can thrive and recover from damage so long as they can count on rainwater and coastal fog banks that roll in every morning. And it is those critical water sources that are dissipating as temperatures rise. The damp conditions the trees like\u2014mostly in pea-soupy pockets of California and Oregon\u2014are rarer than they used to be. Coast redwoods now occupy less than 10 percent of their original range. Their loss will have ripples\u2014economic, ecological, emotional\u2014particularly in the vast amount of carbon they can store.\n  In places where coast redwoods remain, their silent grandeur is simply overwhelming. So it\u2019s at least a little ironic that one of their greatest advocates is such a talker. If you strike up a conversation with Milarch, you\u2019ll get his life story inside of 10 minutes\u2014from his motorcycle gang days in Detroit to the revelation that set him on his current path, involving a near-death experience, angels, and a disembodied voice that dictated a plan he wrote down in the wee hours of the morning. When he woke up fully the next day, he says, \u201cThere was an eight-page outline on that legal pad. It was the outline for this project.\u201d\n The angel who tapped Milarch for this mission seems to have picked the right person\u2014not only is he an able tree-vangelist, but he is a third-generation shade-tree grower. His sons Jake and Jared, both of whom work for Archangel, make up the fourth. So he knows all the secrets of getting balky arborial species to reach their potential by locating the healthiest specimens, clipping and propagating them, and then nurturing delicate new trees.\n In the primeval forests of California\u2019s northern coast, Milarch knows what he is looking for: redwoods that have proven their mettle by surviving for a millennium or more. Some of these aren\u2019t the fully grown behemoths, but just stumps or \u201cfairy rings,\u201d the term for a circle of sprouts that are exact clones of a fallen parent tree, thriving on its decaying remnants. \u201cRedwoods, just before they die, they know they\u2019re dying,\u201d Milarch says. \u201cThey self-clone. There are a dozen trees [sprouting] from the root system, so that when she passes, she lives on.\u201d\n Once Milarch and his team find the right tree\u2014if it\u2019s not a stump already\u2014they zip up to the canopy in harnesses and harvest hundreds of pale green branch tips, each about the size of a fingertip. These are spirited carefully back to Archangel\u2019s lab facility in Copemish, Michigan. Taking these cuttings at just the right time is critical, it turns out. \u201cWe stay away from collecting material when the tree is stressed out,\u201d Jake Milarch explains. \u201cIt has to be at a certain point of hardening off.\u201d Too green and it will wilt, too mature and it won\u2019t root properly.\n  The next step is getting the cuttings to take root. Some thrive in rich soil with a dose of rooting medium, while others, Jake says, need more help\u2014a process called micropropagation. \u201cWe\u2019re taking tiny tips and basically multiplying them in vitro. Not down to the cell, but down to a stem the size of this\u2014\u201d he points to a dot on a spread-out map. These bits get nursed along in sterile vessels to prevent bacteria from interfering with a critical stage in development. But there\u2019s still a lot of trial and error involved. Typically, only 3 to 4 percent of the tiniest coast redwood cuttings survive long enough to make it into the ground.\n  Deep in San Francisco\u2019s Presidio, which sprawls under the southern approach to the Golden Gate Bridge, behind a chain-link fence, there is a sun-dappled clearing where dozens of wooden stakes are lined up in neat rows. Tethered to each is a spindly little Charlie Brown tree about a foot tall. When Presidio foresters wanted to plant an open area with coast redwoods and heard about Milarch\u2019s cloning project, they reached out to him for healthy tree starts.\n When Presidio staff planted these 75 cloned redwoods in late 2018, the National Parks Conservancy issued a press release\u2014but it\u2019s not a tourist draw, not yet. \u201cIt\u2019s kind of tucked away,\u201d says Presidio head forester Blake Troxel. \u201cNo one comes up here except us and the coyotes.\u201d\n The grove features a backdrop of gnarled old shade trees, including a few coast redwoods the park\u2019s one-time military management planted back in the 1800s, each now more than a hundred feet tall. The smaller trees, all reared in Milarch\u2019s Michigan lab, came from coast redwood stumps that predate the Roman Empire. The silver-gray fog bank that rolls over the site in the wee hours just about every night makes this ideal coast redwood territory, despite being more or less in the middle of a city. Even so, Troxel says, the new trees\u2019 success in the grove isn\u2019t guaranteed. The Presidio team tends the site aggressively to make sure the redwood starts aren\u2019t eclipsed by faster-growing competitors. \u201cThe grasses are what make it difficult,\u201d Troxel says. \u201cWe come through and brush-cut.\u201d The baby redwoods also get drip irrigation a couple hours a week when it\u2019s not raining, as well as infusions of compost from elsewhere in the park. To help the clones feel more at home, eventually, Troxel and his team will plant understory species that appear in natural redwood forests, such as coast live oak, California buckeye, and elderberry.\n  Milarch is hoping that the Presidio site will demonstrate how redwood clones can be planted on a larger scale, and Troxel\u2019s feedback will be an invaluable source of information. If a certain sub-species of redwood does particularly well there, California planters will know that variety might do well at similar planting sites around the state.\n Of course, not all 75 of these trees will one day dominate here. As redwoods mature, they need progressively more space around their top branches so they can get the sunlight they need. \u201cIn five years,\u201d he says, \u201ctheir crowns will be touching.\u201d After the trees get their park legs under them, Troxel plans to thin them selectively to give the strongest ones the best chance to make it.\n  When Milarch launched the Archangel project, he imagined groves of saplings like this, but as scientists and activists raised the alarm about greenhouse gas emissions, his vision began to broaden. These days, he talks more and more about pressing coast redwoods into service to capture atmospheric carbon. \u201cWe need a viable, measurable solution to reverse excess carbon, which is causing highs and lows and storms and droughts,\u201d he says. \u201cIt\u2019s about our children and grandchildren having a shot at life.\u201d The signature line on his e-mail reads, \u201cChampion Trees Are the Answer.\u201d\n Some science supports Milarch\u2019s outsized faith in these trees. In a   Science article published in July 2019, Swiss researchers estimate that 900 million new hectares of forest\u2014a swath about the size of the continental United States\u2014could capture enough carbon to reduce atmospheric carbon dioxide levels by about 25 percent. New redwood groves could be a start, as they store a lot of carbon per acre, but they don\u2019t thrive just anywhere and take a long time to grow.\n  Troxel hesitates to put too much stock in the carbon capacity of tree-planting. \u201cAs a cure-all, I\u2019m not so sure,\u201d he says. He stresses the importance of restoring entire natural ecosystems that include the big trees. As University College London earth scientists Mark Maslin and Simon Lewis  point out in  The Conversation, reforestation is hardly a magic bullet against climate change. It can take centuries, even millennia, to have its effect, and that\u2019s time the climate problem does not have. Some of the land areas earmarked for reforestation in the  Science study may end up too hot for forests by the time people get around to planting them. \u201cReforestation,\u201d Maslin and Lewis write, \u201cshould be thought of as one solution to climate change among many.\u201d\n Even if champion trees aren\u2019t an answer by themselves, Milarch is determined to see them at least become part of the answer. If there\u2019s anything worth being downright messianic about, he figures, it\u2019s creating eternal groves of thousand-year-old, self-replicating giants that could benefit all humankind. \u201cWe have a list of the 100 most important trees to clone. We have our marching orders. We know where we need to go,\u201d Milarch says. \u201cI raise my hand every morning and I say, \u2018Use me.\u2019\u201d", "posttime": "2020-05-17 06:54:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u62ef\u6551,save,\u7ea2\u6749", "title": "\u7ea2\u6749\u80fd\u62ef\u6551\u4e16\u754c\u5417\uff1f", "title_en": "Can Redwoods Save the World?", "transed": 1, "url": "https://www.atlasobscura.com/articles/redwood-reforestation", "via": "", "real_tags": ["\u62ef\u6551", "save", "\u7ea2\u6749"]}, {"category": "", "categoryclass": "", "imagename": "4b163a2ca111fb882271c47f395287ab.jpg", "infoid": 1002458, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6240\u6709\u5173\u4e8e\u5728\u5168\u7403\u5927\u6d41\u884c\u671f\u95f4\u8fdb\u884c\u70ae\u5f39\u5954\u8dd1\u9053\u5fb7\u7684\u73cd\u73e0\u6293\u6355\u4f3c\u4e4e\u90fd\u662f\u5f92\u52b3\u7684\uff0c\u57c3\u5fb7\u00b7\u535a\u5229\u5b89(Ed Bolian)\u62a5\u544a\u79f0\uff0c\u5728\u77ed\u77ed\u4e94\u5468\u5185\uff0c\u7f8e\u56fd\u6700\u975e\u6cd5\u7684\u8bb0\u5f55\u5df2\u7ecf\u88ab\u6253\u7834\u4e86\u4e03\u6b21\u3002\n\u636e\u4e00\u76f4\u4e0e\u65b0\u7eaa\u5f55\u4fdd\u6301\u8005\u63a5\u89e6\u7684\u535a\u5229\u5b89\u8bf4\uff0c\u73b0\u5728\u6253\u7834\u7684\u65f6\u95f4\u4e0d\u523026\u4e2a\u5c0f\u65f6\u3002\u4f4e\u4e8e28\u5c0f\u65f6\u7684\u70ae\u5f39\u8dd1\u66fe\u7ecf\u662f\u4e0d\u53ef\u60f3\u8c61\u7684\u3002\n\u867d\u7136\u4ed6\u6ca1\u6709\u900f\u9732\u786e\u5207\u7684\u65f6\u95f4\uff0c\u4f46\u8fd9\u4e2a\u53c2\u7167\u7cfb\u610f\u5473\u7740\uff0c\u57284507\u516c\u91cc\u7684\u65c5\u7a0b\u4e2d\uff0c\u53f8\u673a\u4eec\u5fc5\u987b\u8fbe\u5230\u81f3\u5c11173\u516c\u91cc/\u5c0f\u65f6\u7684\u5e73\u5747\u901f\u5ea6\u3002\n\u8003\u8651\u5230\u52a0\u6cb9\u7ad9\uff0c\u8f66\u961f\u7684\u5cf0\u503c\u548c\u5de1\u822a\u901f\u5ea6\u53ef\u80fd\u8fdc\u8fdc\u8d85\u8fc7\u8fd9\u4e2a\u6570\u5b57\u3002\n\u535a\u5229\u5b89\u8bf4\uff0c\u65b0\u7684\u8bb0\u5f55\u4fdd\u6301\u8005\u5728\u7a7f\u8d8a\u201c\u51e0\u4e2a\u201d\u5dde\u65f6\u7684\u5e73\u5747\u65f6\u901f\u4e3a193\u516c\u91cc\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u65b0\u7684\u8bb0\u5f55\u4fdd\u6301\u8005\u4f7f\u7528\u7684\u662f\u4ec0\u4e48\u8f66\u3002\n\u76ee\u524d\u6240\u77e5\u7684\u662f\uff0c\u4ed6\u4eec\u505a\u597d\u4e86\u5145\u5206\u7684\u51c6\u5907\uff0c30\u591a\u540d\u89c2\u5bdf\u5458\u6563\u5e03\u5728\u5168\u56fd\u5404\u5730\uff0c\u8fd8\u6709\u4e00\u8f86\u7ecf\u8fc7\u5927\u91cf\u6539\u88c5\u7684\u8f66\u8f86\u3002\n\u6839\u636e\u535a\u5229\u5b89\u7684\u8bf4\u6cd5\uff0c\u88ab\u6253\u7834\u7684\u4e0d\u4ec5\u4ec5\u662f\u5f7b\u5e95\u7684\u7eaa\u5f55\uff0c\u5355\u4eba\u9a7e\u9a76\u3001\u67f4\u6cb9\u52a8\u529b\u548c\u4ece\u4e1c\u6d77\u5cb8\u5230\u897f\u6d77\u5cb8\u7684\u70ae\u5f39\u8bb0\u5f55\u90fd\u88ab\u6253\u7834\u4e86-\u6700\u540e\u4e00\u4e2a\u8bb0\u5f55\u6bd4\u4e4b\u524d\u7684\u7eaa\u5f55\u7f29\u77ed\u4e86\u8fd120\u4e2a\u5c0f\u65f6\u3002\n\u5728\u8fd9\u4e00\u65b0\u7684\u521b\u7eaa\u5f55\u7684\u5c1d\u8bd5\u4e4b\u524d\uff0c\u4e00\u7ec4\u53f8\u673a\u5229\u7528\u51a0\u72b6\u75c5\u6bd2\u5c01\u9501\u9020\u6210\u7684\u7a7a\u65f7\u9053\u8def\uff0c\u521b\u9020\u4e8626\u5c0f\u65f638\u5206\u949f\u7684\u8d8a\u91ce\u65f6\u95f4\u3002\n\u8fd9\u652f\u540d\u4e0d\u89c1\u7ecf\u4f20\u7684\u8f66\u961f\u4f7f\u7528\u4e86\u4e00\u8f86\u5965\u8feaA8\u4f5c\u4e3a\u8bb0\u5f55\uff0c\u540e\u5907\u7bb1\u91cc\u7ed1\u7740\u5de8\u5927\u7684\u8239\u7528\u71c3\u6599\u7bb1\u3002\n\u70ae\u5f39\u8dd1\u662f\u4e00\u9879\u7b80\u5355\u7684\u3001\u9ad8\u5ea6\u975e\u6cd5\u7684\u8bb0\u5f55\uff0c\u5c3d\u7ba1\u6ca1\u6709\u7ba1\u7406\u673a\u6784\uff0c\u4f46\u5728\u6c7d\u8f66\u6587\u5316\u4e2d\u662f\u81ed\u540d\u662d\u8457\u7684\u3002\n\u535a\u5229\u5b89\u4ee5\u524d\u662f\u4e00\u540d\u53c2\u8d5b\u8005\uff0c\u7eaa\u5f55\u4fdd\u6301\u8005\uff0c\u73b0\u5728\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u8bb0\u5f55\u4e0a\u7684\u4e8b\u5b9e\u4e0a\u7684\u88c1\u5224\u5458\u3002\n\u8981\u521b\u9020\u70ae\u5f39\u8dd1\u7eaa\u5f55\uff0c\u4f20\u7edf\u4e0a\u4f60\u5fc5\u987b\u4ece\u66fc\u54c8\u987f\u7684\u7ea2\u7403\u8f66\u5e93\u51fa\u53d1\uff0c\u7136\u540e\u4ee5\u5c3d\u53ef\u80fd\u5feb\u7684\u901f\u5ea6\u7a7f\u8d8a\u6574\u4e2a\u7f8e\u5229\u575a\u5408\u4f17\u56fd\uff0c\u6700\u540e\u5230\u8fbe\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u96f7\u4e1c\u591a\u6d77\u6ee9\u7684\u6ce2\u6258\u83f2\u5c3c\u9152\u5e97\uff0c\n\u73b0\u4ee3\u6280\u672f\u548c\u8d85\u524d\u51c6\u5907\u7684\u8f66\u961f\uff0c\u5bfc\u81f4\u8fd1\u5e74\u6765\u7684\u8bb0\u5f55\u964d\u81f3\u4e0d\u53ef\u60f3\u8c61\u7684\u6c34\u5e73\uff0c\u8f66\u961f\u5728\u516c\u5171\u9053\u8def\u4e0a\u4fdd\u6301\u75af\u72c2\u7684\u901f\u5ea6\uff0c\u4ee5\u786e\u4fdd\u81ea\u5df1\u5728\u8d5b\u8f66\u6076\u540d\u4e2d\u7684\u5730\u4f4d\u3002\n\u636e\u62a5\u9053\uff0c\u65b0\u7684\u8bb0\u5f55\u4fdd\u6301\u8005\u6b63\u5728\u51c6\u5907\u4e00\u90e8\u7eaa\u5f55\u7247\uff0c\u4e0e\u4ed6\u4eec\u7684\u5b98\u65b9\u8bb0\u5f55\u516c\u544a\u4e00\u8d77\u53d1\u5e03\u3002", "note_en": "All the pearl-clutching about the morality of performing a Cannonball Run during a global pandemic seems to have been for nothing, with Ed Bolian reporting America\u2019s most illegal record has been beaten seven times in the span of just five weeks.\n According to Bolian, who has been in contact with the new record holders, the time to beat is now less than 26 hours. A sub 28-hour Cannonball Run was once unthinkable.\n While he has not disclosed the exact time, that frame of reference means the drivers would have had to achieve an average speed of  at least 173km/h for the 4507km journe y.\n  Accommodating for fuel stops, the team\u2019s peak and cruising speeds are probably far in excess of that figure.\n Bolian states that the new record holders averaged 193km/h when crossing \u201cseveral\u201d States. It is unknown what car the new record holders used.\n What is known is that they were well prepared, with over 30 spotters littered across the country, along with a heavily modified vehicle.\n   According to Bolian, its not just the outright record that has been broken, with the solo-driver, diesel-powered, and coast-to-coast-to-coast Cannonball records all tumbling \u2013 the last of which having almost 20 hours shaved off the previous record time.\n This new flurry of record attempts follows a  team of drivers who took advantage of empty roads that had been created by the coronavirus lockdown to set a cross-country time of 26 hours and 38 minutes.\n This unknown team used an Audi A8 for the record, with large marine fuel tanks strapped into the boot.\n   The Cannonball Run is a simple, and highly illegal, record that despite having no governing body, is infamous within car culture.\n Bolian is a former competitor, record holder, and now somewhat of a defacto adjudicator on the record.\n To set a Cannonball Run record, you must traditionally start at the Red Ball Garage in Manhattan, then traverse the entire United States of America as fast as possible to finish at the Portofini Inn in Redondo Beach, California,\n  Modern technology, and ultra-prepared teams, have resulted in the record falling to unthinkable levels in recent years, with teams maintaining crazy speeds on public roads to secure their place in motoring infamy.\n The new record holders are reported to be preparing a documentary to accompany their official record announcement.", "posttime": "2020-05-17 06:54:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7eaa\u5f55,run,\u8bb0\u5f55", "title": "\u70ae\u5f39\u8dd1\u7eaa\u5f55\u5728\u4e94\u5468\u5185\u88ab\u6253\u7834\u4e86\u4e03\u6b21", "title_en": "The Cannonball Run record has been broken seven times in five weeks", "transed": 1, "url": "https://www.whichcar.com.au/news/the-cannonball-run-record-has-been-obliterated", "via": "", "real_tags": ["\u7eaa\u5f55", "run", "\u8bb0\u5f55"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002457, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u8fd8\u8bb0\u5f97\u5b89\u683c\u65af\u00b7\u9ea6\u51ef\u5f17(Angus&34\uff1bMac&34\uff1bMacGyver)\u5417\uff1f\u8fd9\u4f4d80\u5e74\u4ee3/90\u5e74\u4ee3\u9887\u53d7\u6b22\u8fce\u7684\u7535\u89c6\u5267\u7684\u4e3b\u4eba\u516c\u5b89\u683c\u65af\u00b7\u9ea6\u76d6\u5f17(Angus&34\uff1bMac&34\uff1bMacGyver)\u603b\u662f\u5bcc\u6709\u521b\u9020\u529b\uff0c\u4ed6\u53ea\u9700\u4e00\u628a\u745e\u58eb\u519b\u5200\u3001\u80f6\u5e26\u3001\u978b\u5e26\u548c\u56de\u5f62\u9488\u5c31\u80fd\u89e3\u51b3\u4efb\u4f55\u95ee\u9898\u3002\nKafka Connect\u7684\u5355\u6d88\u606f\u8f6c\u6362(SMT)\u51e0\u4e4e\u548cMacGyver\u7684\u745e\u58eb\u519b\u5200\u4e00\u6837\u591a\u624d\u591a\u827a\uff1a\nSMT\u53ef\u4ee5\u662fKafka Connection\u4e0a\u4e0b\u6587\u4e2d\u51fa\u73b0\u7684\u8fd9\u4e9b\u548c\u8bb8\u591a\u5176\u4ed6\u95ee\u9898\u7684\u7b54\u6848\u3002\u5e94\u7528\u4e8e\u6e90\u8fde\u63a5\u5668\u6216\u5bbf\u8fde\u63a5\u5668\uff0cSMT\u5141\u8bb8\u5206\u522b\u5728\u5c06Kafka\u8bb0\u5f55\u53d1\u9001\u5230Kafka\u4e4b\u524d\u6216\u5728\u4ece\u4e3b\u9898\u4e2d\u4f7f\u7528\u5b83\u4eec\u4e4b\u540e\u4fee\u6539Kafka\u8bb0\u5f55\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u91cd\u70b9\u4ecb\u7ecd\u4e00\u4e0bSMT\u7684\u4e00\u4e9b\u6709\u8da3\u7684\u7528\u6cd5(\u5e0c\u671b\u4e0d\u7ba1\u600e\u6837)\u3002\u8fd9\u4e9b\u7528\u4f8b\u5927\u591a\u57fa\u4e8e\u6211\u4f7f\u7528Kafka Connect\u548cDebezium\u7684\u7ecf\u9a8c\uff0cDebezium\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u53d8\u66f4\u6570\u636e\u6355\u83b7(CDC)\u5e73\u53f0\u3002\u4e0d\u4e45\u524d\uff0c\u5f53\u6211\u5728Twitter\u4e0a\u8be2\u95ee\u793e\u533a\u6709\u5173\u8fd9\u65b9\u9762\u7684\u95ee\u9898\u65f6\uff0c\u6211\u4e5f\u5f97\u5230\u4e86\u4e00\u4e9b\u5173\u4e8eSMT\u7528\u6cd5\u7684\u5f88\u597d\u7684\u5efa\u8bae\uff1a\n\u6211\u7edd\u5bf9\u63a8\u8350\u53bb\u770b\u770b\u8fd9\u4e2a\u5e16\u5b50\uff1b\u975e\u5e38\u611f\u8c22\u6240\u6709\u56de\u590d\u7684\u4eba\uff01\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8eSMT\u7684\u4e00\u822c\u77e5\u8bc6\uff0c\u5982\u4f55\u914d\u7f6e\u5b83\u4eec\u7b49\uff0c\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\u6700\u540e\u7ed9\u51fa\u7684\u8d44\u6e90\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u7c7b\u7528\u4f8b\uff0c\u6211\u8fd8\u8be2\u95ee\u4e86\u6211\u4eec\u5bcc\u6709\u540c\u60c5\u5fc3\u7684\u7535\u89c6\u82f1\u96c4\u5bf9SMT\u5bf9HAND\u4efb\u52a1\u7684\u6709\u7528\u6027\u7684\u770b\u6cd5\u3002\u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u90e8\u5206\u7684\u672b\u5c3e\u627e\u5230\u4ed6\u7684\u8bc4\u7ea7\uff0c\u4ece\ud83d\udcce(\u4e0d\u9002\u5408)\u5230\ud83d\udcce(\u975e\u5e38\u9002\u5408)\u3002\nSMTS\u6700\u5e38\u89c1\u7684\u5e94\u7528\u53ef\u80fd\u662f\u683c\u5f0f\u8f6c\u6362\uff0c\u5373\u8c03\u6574\u6570\u636e\u7684\u7c7b\u578b\u3001\u683c\u5f0f\u548c\u8868\u793a\u5f62\u5f0f\u3002\u8fd9\u53ef\u80fd\u9002\u7528\u4e8e\u6574\u4e2a\u6d88\u606f\uff0c\u4e5f\u53ef\u80fd\u9002\u7528\u4e8e\u7279\u5b9a\u7684\u6d88\u606f\u5c5e\u6027\u3002\u8ba9\u6211\u4eec\u9996\u5148\u770b\u51e0\u4e2a\u8f6c\u6362\u5355\u4e2a\u6d88\u606f\u5c5e\u6027\u683c\u5f0f\u7684\u793a\u4f8b\uff1a\n\u65f6\u95f4\u6233\uff1a\u4e0d\u540c\u7684\u7cfb\u7edf\u5f80\u5f80\u5bf9\u5982\u4f55\u952e\u5165\u548c\u683c\u5f0f\u5316\u65f6\u95f4\u6233\u6709\u4e0d\u540c\u7684\u5047\u8bbe\u3002\u4f8b\u5982\uff0cDebezium\u5c06\u5927\u591a\u6570\u65f6\u95f4\u5217\u7c7b\u578b\u8868\u793a\u4e3a\u81ea\u7eaa\u5143\u4ee5\u6765\u7684\u6beb\u79d2\u3002\u53e6\u4e00\u65b9\u9762\uff0cChange\u4e8b\u4ef6\u4f7f\u7528\u8005\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528Kafka Connect\u7684Date\u7c7b\u578b\u6216ISO-8601\u683c\u5f0f\u7684\u5b57\u7b26\u4e32(\u53ef\u80fd\u4f7f\u7528\u7279\u5b9a\u65f6\u533a)\u83b7\u5f97\u8fd9\u6837\u7684\u65e5\u671f\u548c\u65f6\u95f4\u503c\n\u503c\u5c4f\u853d\uff1a\u654f\u611f\u6570\u636e\u53ef\u80fd\u9700\u8981\u5c4f\u853d\u6216\u622a\u65ad\uff0c\u6216\u8005\u751a\u81f3\u5e94\u8be5\u5b8c\u5168\u5220\u9664\u7279\u5b9a\u5b57\u6bb5\uff1b\u968fKafka Connect\u4e00\u8d77\u63d0\u4f9b\u7684org.apache.kafka.connect.transs.MaskField\u548cReplaceField SMT\u5728\u8fd9\u65b9\u9762\u975e\u5e38\u6709\u7528\u3002\n\u6570\u5b57\u7c7b\u578b\uff1a\u4e0e\u65f6\u95f4\u6233\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7cfb\u7edf\u5bf9(\u5c0f\u6570)\u6570\u5b57\u8868\u793a\u7684\u8981\u6c42\u53ef\u80fd\u4e0d\u540c\uff1b\u4f8b\u5982\uff0cKafka Connect\u7684Decimal\u7c7b\u578b\u5141\u8bb8\u4f20\u9012\u4efb\u610f\u7cbe\u5ea6\u7684\u5c0f\u6570\uff0c\u4f46\u5176\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53ef\u80fd\u4e0d\u53d7\u6240\u6709\u63a5\u6536\u5668\u8fde\u63a5\u5668\u548c\u6d88\u8d39\u8005\u7684\u652f\u6301\u3002\n\u540d\u79f0\u8c03\u6574\uff1a\u6839\u636e\u6240\u9009\u7684\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u53ef\u80fd\u4e0d\u652f\u6301\u7279\u5b9a\u7684\u5b57\u6bb5\u540d\u79f0\uff1b\u4f8b\u5982\uff0c\u5728\u4f7f\u7528Apache Avro\u65f6\uff0c\u5b57\u6bb5\u540d\u79f0\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002\n\u5728\u6240\u6709\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u7684\u73b0\u6210SMT\u6216\u5b9a\u5236\u5b9e\u73b0\u6765\u5e94\u7528\u6240\u9700\u7684\u5c5e\u6027\u7c7b\u578b\u548c/\u6216\u683c\u5f0f\u8f6c\u6362\u3002\n\u5f53\u4f7f\u7528Kafka Connect\u5c06\u9057\u7559\u670d\u52a1\u548c\u6570\u636e\u5e93\u4e0e\u65b0\u5efa\u7684\u5fae\u670d\u52a1\u96c6\u6210\u65f6\uff0c\u8fd9\u6837\u7684\u683c\u5f0f\u8f6c\u6362\u53ef\u4ee5\u5728\u521b\u5efa\u53cd\u8150\u8d25\u5c42\u65b9\u9762\u53d1\u6325\u91cd\u8981\u4f5c\u7528\uff1a\u901a\u8fc7\u4f7f\u7528\u66f4\u597d\u7684\u5b57\u6bb5\u540d\u79f0\u3001\u9009\u62e9\u66f4\u5408\u9002\u7684\u6570\u636e\u7c7b\u578b\u6216\u5220\u9664\u4e0d\u9700\u8981\u7684\u5b57\u6bb5\uff0cSMT\u53ef\u4ee5\u5e2e\u52a9\u4fdd\u62a4\u65b0\u670d\u52a1\u7684\u6a21\u578b\u4e0d\u53d7\u9057\u7559\u4e16\u754c\u7684\u53e4\u602a\u548c\u602a\u7656\u7684\u5f71\u54cd\u3002\n\u4f46\u662fSMT\u4e0d\u80fd\u53ea\u4fee\u6539\u5355\u4e2a\u5b57\u6bb5\u7684\u8868\u793a\uff0c\u8fd8\u53ef\u4ee5\u8c03\u6574\u6574\u4e2a\u6d88\u606f\u7684\u683c\u5f0f\u548c\u7ed3\u6784\u3002Kafka Connect\u7684ExtractField\u8f6c\u6362\u5141\u8bb8\u4ece\u6d88\u606f\u4e2d\u63d0\u53d6\u5355\u4e2a\u5b57\u6bb5\u5e76\u4f20\u64ad\u8be5\u5b57\u6bb5\u3002\u4e00\u4e2a\u76f8\u5173\u7684SMT\u662fDebezium\u7528\u4e8e\u66f4\u6539\u4e8b\u4ef6\u6241\u5e73\u5316\u7684SMT\u3002\u5b83\u53ef\u7528\u4e8e\u5c06\u590d\u6742\u7684Debezium\u66f4\u6539\u4e8b\u4ef6\u7ed3\u6784(\u5177\u6709\u65b0\u65e7\u884c\u72b6\u6001\u3001\u5143\u6570\u636e\u7b49)\u8f6c\u6362\u4e3a\u53ef\u7531\u8bb8\u591a\u73b0\u6709\u63a5\u6536\u5668\u8fde\u63a5\u5668\u4f7f\u7528\u7684\u5e73\u9762\u884c\u8868\u793a\u5f62\u5f0f\u3002\nSMT\u8fd8\u5141\u8bb8\u5fae\u8c03\u6a21\u5f0f\u547d\u540d\u7a7a\u95f4\uff1b\u5f53\u4f7f\u7528\u6a21\u5f0f\u6ce8\u518c\u8868\u6765\u7ba1\u7406\u6a21\u5f0f\u53ca\u5176\u7248\u672c\u65f6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f88\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u5e94\u8be5\u4e3a\u7ed9\u5b9a\u4e3b\u9898\u7684\u6d88\u606f\u5f3a\u5236\u4f7f\u7528\u7279\u5b9a\u7684\u6a21\u5f0f\u547d\u540d\u7a7a\u95f4\u3002\u8fd9\u4e00\u7c7b\u522b\u4e2d\u7684\u53e6\u5916\u4e24\u4e2a\u975e\u5e38\u6709\u7528\u7684SMT\u793a\u4f8b\u662fJeremy Cutenborde\u7684Kafka-connect-Transform-xml\u548ckafka-connect-json-schema\uff0c\u5b83\u5c06\u83b7\u53d6XML\u6216\u6587\u672c\uff0c\u5e76\u6839\u636e\u7ed9\u5b9a\u7684XML\u6a21\u5f0f\u6216JSON\u751f\u6210\u7c7b\u578b\u5316\u7684Kafka Connect Struct\u3002\n\u6700\u540e\uff0c\u4f5c\u4e3a\u4e00\u79cd\u7279\u6b8a\u7684\u683c\u5f0f\u8f6c\u6362\uff0cSMT\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u6216\u8bbe\u7f6eKafka\u8bb0\u5f55\u7684\u952e\u3002\u5982\u679c\u6e90\u8fde\u63a5\u5668\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u6709\u610f\u4e49\u7684\u952e\uff0c\u4f46\u53ef\u4ee5\u4ece\u8bb0\u5f55\u503c\u4e2d\u63d0\u53d6\u4e00\u4e2a\u952e\uff0c\u8fd9\u53ef\u80fd\u662f\u7406\u60f3\u7684\u3002\u6b64\u5916\uff0c\u5728\u8003\u8651\u540e\u7eed\u6d41\u5904\u7406\u65f6\uff0c\u66f4\u6539\u6d88\u606f\u952e\u4e5f\u5f88\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5728\u6e90\u7aef\u9009\u62e9\u5339\u914d\u7684\u952e\u5141\u8bb8\u901a\u8fc7Kafka\u6d41\u8fde\u63a5\u591a\u4e2a\u4e3b\u9898\uff0c\u800c\u4e0d\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u8bb0\u5f55\u7684\u952e\u3002\nMac\u8bc4\u7ea7\uff1a*\ud83d\udcce+SMT\u662f\u8fdb\u884c\u5361\u592b\u5361\u8fde\u63a5\u8bb0\u5f55\u683c\u5f0f\u8f6c\u6362\u7684\u5b8c\u7f8e\u5de5\u5177\u3002\n\u5bf9Kafka\u8bb0\u5f55\u6a21\u5f0f\u7684\u66f4\u6539\u53ef\u80fd\u4f1a\u5bf9\u6d88\u8d39\u8005\u9020\u6210\u6f5c\u5728\u7684\u7834\u574f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bb0\u5f55\u5b57\u6bb5\u88ab\u91cd\u547d\u540d\uff0c\u6d88\u8d39\u8005\u5fc5\u987b\u76f8\u5e94\u5730\u8fdb\u884c\u8c03\u6574\uff0c\u4f7f\u7528\u65b0\u7684\u5b57\u6bb5\u540d\u79f0\u8bfb\u53d6\u503c\u3002\u5982\u679c\u5b57\u6bb5\u88ab\u5b8c\u5168\u5220\u9664\uff0c\u6d88\u8d39\u8005\u4e0d\u80fd\u518d\u671f\u5f85\u6b64\u5b57\u6bb5\u3002\n\u6d88\u606f\u8f6c\u6362\u53ef\u4ee5\u5e2e\u52a9\u5b9e\u73b0\u4ece\u4e00\u4e2a\u6a21\u5f0f\u7248\u672c\u5230\u4e0b\u4e00\u4e2a\u6a21\u5f0f\u7248\u672c\u7684\u8fd9\u79cd\u8f6c\u6362\uff0c\u4ece\u800c\u51cf\u5c11\u6d88\u606f\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u751f\u547d\u5468\u671f\u7684\u8026\u5408\u3002\u5728\u91cd\u547d\u540d\u5b57\u6bb5\u7684\u60c5\u51b5\u4e0b\uff0cSMT\u53ef\u4ee5\u4f7f\u7528\u539f\u59cb\u540d\u79f0\u518d\u6b21\u6dfb\u52a0\u8be5\u5b57\u6bb5\u3002\u8fd9\u5c06\u5141\u8bb8\u6d88\u8d39\u8005\u7ee7\u7eed\u4f7f\u7528\u65e7\u540d\u79f0\u8bfb\u53d6\u8be5\u5b57\u6bb5\uff0c\u5e76\u4e14\u53ef\u4ee5\u6309\u7167\u81ea\u5df1\u7684\u901f\u5ea6\u5347\u7ea7\u4e3a\u4f7f\u7528\u65b0\u540d\u79f0\u3002\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u4e00\u65e6\u6240\u6709\u6d88\u8d39\u8005\u90fd\u5df2\u88ab\u8c03\u6574\uff0c\u5219SMT\u53ef\u4ee5\u518d\u6b21\u88ab\u79fb\u9664\uff0c\u53ea\u66b4\u9732\u51fa\u65b0\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u7c7b\u4f3c\u5730\uff0c\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u5f53\u6240\u6709\u6d88\u8d39\u8005\u90fd\u88ab\u8c03\u6574\u4e4b\u540e\uff0cSMT\u53ef\u4ee5\u518d\u6b21\u88ab\u79fb\u9664\uff0c\u53ea\u66b4\u9732\u65b0\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u7c7b\u4f3c\u5730\uff0c\u4e00\u4e2a\u3002\u4f8b\u5982\u4f7f\u7528\u67d0\u79cd\u6052\u5b9a\u7684\u5360\u4f4d\u7b26\u503c\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4ece\u5176\u4ed6\u4ecd\u7136\u5b58\u5728\u7684\u5b57\u6bb5\u5bfc\u51fa\u8be5\u5b57\u6bb5\u503c\u3002\u7136\u540e\uff0c\u6d88\u8d39\u8005\u53ef\u4ee5\u6309\u7167\u4ed6\u4eec\u81ea\u5df1\u7684\u901f\u5ea6\u88ab\u66f4\u65b0\u4ee5\u4e0d\u518d\u671f\u671b\u548c\u8bbf\u95ee\u8be5\u5b57\u6bb5\u3002\n\u4f46\u662f\u5e94\u8be5\u8bf4\uff0c\u8fd9\u79cd\u4f7f\u7528\u662f\u6709\u9650\u5236\u7684\uff1a\u4f8b\u5982\uff0c\u5f53\u6539\u53d8\u5b57\u6bb5\u7684\u7c7b\u578b\u65f6\uff0c\u4e8b\u60c5\u5f88\u5feb\u53d8\u5f97\u68d8\u624b\u3002\u4e00\u79cd\u9009\u62e9\u53ef\u4ee5\u662f\u591a\u6b65\u9aa4\u65b9\u6cd5\uff0c\u5176\u4e2d\u9996\u5148\u6dfb\u52a0\u5177\u6709\u65b0\u7c7b\u578b\u7684\u5355\u72ec\u5b57\u6bb5\uff0c\u7136\u540e\u5982\u4e0a\u6240\u8ff0\u518d\u6b21\u91cd\u547d\u540d\u5b83\u3002\nMac\u7684\u8bc4\u7ea7\uff1a\ud83d\udcce\u8868\u793a\uff0cSMT\u4e3b\u8981\u53ef\u4ee5\u5e2e\u52a9\u89e3\u51b3\u56f4\u7ed5\u6a21\u5f0f\u6f14\u53d8\u7684\u57fa\u672c\u517c\u5bb9\u6027\u95ee\u9898\u3002\n\u5728\u6e90\u7aef\u5e94\u7528\u65f6\uff0cSMT\u5141\u8bb8\u8fc7\u6ee4\u51fa\u8fde\u63a5\u5668\u751f\u6210\u7684\u7279\u5b9a\u8bb0\u5f55\u3002\u5b83\u4eec\u8fd8\u53ef\u7528\u4e8e\u63a7\u5236\u8bb0\u5f55\u53d1\u9001\u5230\u7684Kafka\u4e3b\u9898\u3002\u5f53\u8fc7\u6ee4\u548c\u8def\u7531\u57fa\u4e8e\u5b9e\u9645\u8bb0\u5f55\u5185\u5bb9\u65f6\uff0c\u8fd9\u5c24\u5176\u6709\u8da3\u3002\u4f8b\u5982\uff0c\u5728\u4f7f\u7528Kafka Connect\u4ece\u67d0\u79cd\u4f20\u611f\u5668\u83b7\u53d6\u6570\u636e\u7684\u7269\u8054\u7f51\u65b9\u6848\u4e2d\uff0cSMT\u53ef\u7528\u4e8e\u8fc7\u6ee4\u6389\u4f4e\u4e8e\u7279\u5b9a\u9608\u503c\u7684\u6240\u6709\u4f20\u611f\u5668\u6d4b\u91cf\u7ed3\u679c\uff0c\u6216\u5c06\u9ad8\u4e8e\u9608\u503c\u7684\u6d4b\u91cf\u4e8b\u4ef6\u8def\u7531\u5230\u7279\u5b9a\u4e3b\u9898\u3002\n\u903b\u8f91\u4e3b\u9898Routing SMT\u5141\u8bb8\u5c06\u6e90\u81ea\u591a\u4e2a\u8868\u7684\u66f4\u6539\u4e8b\u4ef6\u53d1\u9001\u5230\u540c\u4e00Kafka\u4e3b\u9898\uff0c\u8fd9\u5728\u5904\u7406Postgres\u4e2d\u7684\u5206\u533a\u8868\u6216\u5904\u7406\u5206\u7247\u5230\u591a\u4e2a\u8868\u4e2d\u7684\u6570\u636e\u65f6\u975e\u5e38\u6709\u7528\u3002\nFilter\u548cContentBasedRouter SMT\u5141\u8bb8\u60a8\u4f7f\u7528Groovy\u6216JavaScript\u7b49\u8bed\u8a00\u4e2d\u7684\u811a\u672c\u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u66f4\u6539\u4e8b\u4ef6\u7684\u5185\u5bb9\u8fc7\u6ee4\u548c\u8def\u7531\u66f4\u6539\u4e8b\u4ef6\uff1b\u8fd9\u79cd\u57fa\u4e8e\u811a\u672c\u7684\u65b9\u6cd5\u53ef\u4ee5\u662f\u6613\u7528\u6027(\u6ca1\u6709Java\u4ee3\u7801\u5fc5\u987b\u7f16\u8bd1\u548c\u90e8\u7f72\u5230Kafka Connect)\u548c\u8868\u73b0\u529b\u4e4b\u95f4\u6709\u8da3\u7684\u4e2d\u95f4\u5730\u5e26\uff1b\u4f8b\u5982\uff0c\u8def\u7531SMT\u5982\u4f55\u4e0eGraalVM\u7684JavaScript\u5f15\u64ce\u4e00\u8d77\u4f7f\u7528\uff0c\u6839\u636e\u8ba2\u5355\u7c7b\u578b\u5c06\u66f4\u6539\u4e8b\u4ef6\u4ece\u5305\u542b\u91c7\u8d2d\u8ba2\u5355\u7684\u8868\u8def\u7531\u5230Kafka\u4e2d\u7684\u4e0d\u540c\u4e3b\u9898\uff1a\n\u53d1\u4ef6\u7bb1\u4e8b\u4ef6\u8def\u7531\u5668\u5728\u5b9e\u73b0\u5fae\u670d\u52a1\u4e4b\u95f4\u6570\u636e\u4f20\u64ad\u7684\u4e8b\u52a1\u53d1\u4ef6\u7bb1\u6a21\u5f0f\u65f6\u975e\u5e38\u65b9\u4fbf\uff1a\u5b83\u53ef\u4ee5\u7528\u4e8e\u5c06\u6e90\u81ea\u5355\u4e2a\u53d1\u4ef6\u7bb1\u8868\u7684\u4e8b\u4ef6\u53d1\u9001\u5230\u6bcf\u4e2a\u805a\u5408(\u5f53\u8003\u8651\u57df\u9a71\u52a8\u8bbe\u8ba1\u65f6)\u6216\u4e8b\u4ef6\u7c7b\u578b\u7684\u7279\u5b9aKafka\u4e3b\u9898\u3002\n\u5728Kafka Connect\u672c\u8eab\u4e2d\u8fd8\u6709\u4e24\u4e2a\u7528\u4e8e\u8def\u7531\u7684SMT\uff1aRegexRouter\uff0c\u5b83\u5141\u8bb8\u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u91cd\u65b0\u8def\u7531\u4e24\u4e2a\u4e0d\u540c\u7684\u4e3b\u9898\uff1b\u4ee5\u53caTimestampRouter\uff0c\u7528\u4e8e\u6839\u636e\u8bb0\u5f55\u7684\u65f6\u95f4\u6233\u786e\u5b9a\u4e3b\u9898\u540d\u79f0\u3002\n\u867d\u7136\u8def\u7531SMT\u901a\u5e38\u5e94\u7528\u4e8e\u6e90\u8fde\u63a5\u5668(\u5b9a\u4e49\u8bb0\u5f55\u53d1\u9001\u5230\u7684Kafka\u4e3b\u9898)\uff0c\u4f46\u5c06\u5b83\u4eec\u4e0e\u63a5\u6536\u5668\u8fde\u63a5\u5668\u4e00\u8d77\u4f7f\u7528\u4e5f\u662f\u6709\u610f\u4e49\u7684\u3002\u5f53\u63a5\u6536\u5668\u8fde\u63a5\u5668\u4ece\u4e3b\u9898\u540d\u79f0\u6d3e\u751f\u4e0b\u6e38\u8868\u540d\u3001\u7d22\u5f15\u540d\u6216\u7c7b\u4f3c\u540d\u79f0\u65f6\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\u3002\nMac\u7684\u8bc4\u7ea7\uff1a\ud83d\udcce\u8868\u793a\uff0c\u6d88\u606f\u8fc7\u6ee4\u548c\u4e3b\u9898\u8def\u7531\u2009-\u2009\u5bf9SMT\u6ca1\u6709\u95ee\u9898\u3002\n\u5893\u7891\u8bb0\u5f55\u662f\u7a7a\u503c\u7684Kafka\u8bb0\u5f55\uff0c\u5b83\u4eec\u5728\u5904\u7406\u538b\u7f29\u4e3b\u9898\u65f6\u5177\u6709\u7279\u6b8a\u7684\u8bed\u4e49\uff1a\u5728\u65e5\u5fd7\u538b\u7f29\u8fc7\u7a0b\u4e2d\uff0c\u6240\u6709\u4e0e\u5893\u7891\u8bb0\u5f55\u5177\u6709\u76f8\u540c\u5173\u952e\u5b57\u7684\u8bb0\u5f55\u90fd\u5c06\u4ece\u4e3b\u9898\u4e2d\u79fb\u9664\u3002\n\u5728\u538b\u7f29\u53d1\u751f\u4e4b\u524d\uff0c\u5893\u7891\u5c06\u5728\u4e3b\u9898\u4e0a\u4fdd\u7559\u4e00\u6bb5\u53ef\u914d\u7f6e\u7684\u65f6\u95f4(\u901a\u8fc7delete.retention.ms\u4e3b\u9898\u8bbe\u7f6e\u8fdb\u884c\u63a7\u5236)\uff0c\u8fd9\u610f\u5473\u7740Kafka Connect\u63a5\u6536\u5668\u8fde\u63a5\u5668\u4e5f\u9700\u8981\u5904\u7406\u5b83\u4eec\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u8fde\u63a5\u5668\u90fd\u4e3anull\u503c\u7684\u8bb0\u5f55\u505a\u597d\u4e86\u51c6\u5907\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4NullPointerException\u548c\u7c7b\u4f3c\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u8fd9\u6837\u7684\u8fc7\u6ee4SMT\u6765\u5220\u9664\u5893\u7891\u8bb0\u5f55\u3002\n\u73b0\u5728\uff0c\u5f53\u4f7f\u7528\u50cfDebezium\u8fd9\u6837\u7684\u2009-\u2009\u8fde\u63a5\u5668\u6765\u4ece\u4f7f\u7528\u8f6f\u5220\u9664\u7684\u6570\u636e\u5e93\u6355\u83b7\u66f4\u6539\u65f6(\u5373\uff0c\u4e0d\u7269\u7406\u5730\u5220\u9664\u8bb0\u5f55\uff0c\u4f46\u662f\u5728\u5220\u9664\u8bb0\u5f55\u65f6\u5c06\u903b\u8f91\u5220\u9664\u6807\u5fd7\u8bbe\u7f6e\u4e3a\u771f)\uff0c\u8fd9\u4e9b\u66f4\u6539\u4e8b\u4ef6\u5c06\u88ab\u5bfc\u51fa\u4e3a\u66f4\u65b0\u4e8b\u4ef6(\u4ece\u6280\u672f\u4e0a\u8bb2\u662f\u8fd9\u6837\u7684)\u3002\u73b0\u5728\uff0c\u5f53\u4f7f\u7528\u8bf8\u5982Debezium\u7684\u2009-\u2009\u8fde\u63a5\u5668\u6765\u4ece\u4f7f\u7528\u8f6f\u5220\u9664\u7684\u6570\u636e\u5e93\u6355\u83b7\u66f4\u6539\u65f6\uff0c\u8fd9\u4e9b\u66f4\u6539\u4e8b\u4ef6\u5c06\u88ab\u5bfc\u51fa\u4e3a\u66f4\u65b0\u4e8b\u4ef6(\u4ece\u6280\u672f\u4e0a\u8bb2\u662f\u8fd9\u6837\u7684)\u3002\u4f8b\u5982\uff0c\u5f53\u4f7f\u7528\u8bf8\u5982Debezium\u8fd9\u6837\u7684CDC\u8fde\u63a5\u5668\u6765\u4ece\u4f7f\u7528\u8f6f\u5220\u9664\u7684\u6570\u636e\u5e93\u6355\u83b7\u66f4\u6539\u65f6(\u5373\uff0c\u6ca1\u6709\u7269\u7406\u5220\u9664\u8bb0\u5f55\uff0c\u4f46\u662f\u5728\u5220\u9664\u8bb0\u5f55\u65f6\u5c06\u903b\u8f91\u5220\u9664\u6807\u5fd7\u8bbe\u7f6e\u4e3a\u771f)\uff0c\u5219\u8fd9\u4e9b\u66f4\u6539\u4e8b\u4ef6\u5c06\u88ab\u5bfc\u51fa\u4e3a\u66f4\u65b0\u4e8b\u4ef6(\u4ece\u6280\u672f\u4e0a\u8bb2\u662f\u8fd9\u6837\u7684\u3002\nMac\u7684\u8bc4\u7ea7\uff1a\ud83d\udcce\u8868\u793a\uff0cSMT\u5728\u4e22\u5f03\u5893\u7891\u6216\u5c06\u8f6f\u5220\u9664\u4e8b\u4ef6\u8f6c\u6362\u4e3a\u5893\u7891\u65b9\u9762\u505a\u5f97\u5f88\u597d\u3002\u4e0d\u8fc7\uff0c\u4e0d\u53ef\u80fd\u5728\u4fdd\u7559\u539f\u59cb\u4e8b\u4ef6\u7684\u540c\u65f6\u751f\u6210\u989d\u5916\u7684\u5893\u7891\u8bb0\u5f55\n\u751a\u81f3\u4e00\u4e9b\u9ad8\u7ea7\u7684\u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u5728SMT\u7684\u5e2e\u52a9\u4e0b\u5b9e\u73b0\uff0c\u7d22\u8d54\u68c0\u67e5\u6a21\u5f0f\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u6b64\u6a21\u5f0f\u5728\u5982\u4e0b\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\uff1a\n\u6d88\u606f\u53ef\u80fd\u5305\u542b\u6d88\u606f\u6d41\u7a0d\u540e\u53ef\u80fd\u9700\u8981\u7684\u4e00\u7ec4\u6570\u636e\u9879\uff0c\u4f46\u5e76\u975e\u6240\u6709\u4e2d\u95f4\u5904\u7406\u6b65\u9aa4\u90fd\u9700\u8981\u8fd9\u4e9b\u6570\u636e\u9879\u3002\u6211\u4eec\u53ef\u80fd\u4e0d\u60f3\u5728\u6bcf\u4e2a\u5904\u7406\u6b65\u9aa4\u4e2d\u643a\u5e26\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff0c\u5e76\u4e14\u56e0\u4e3a\u6211\u4eec\u643a\u5e26\u4e86\u5982\u6b64\u591a\u7684\u989d\u5916\u6570\u636e\u800c\u4f7f\u8c03\u8bd5\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\n\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u662f\u4ece\u6570\u636e\u5e93\u8868USERS\u6355\u83b7\u66f4\u6539\u7684CDC\u8fde\u63a5\u5668\uff0c\u5b83\u5177\u6709\u4e00\u4e2a\u5305\u542b\u7528\u6237\u4e2a\u4eba\u8d44\u6599\u56fe\u7247\u7684BLOB\u5217(\u5f53\u7136\u4e0d\u662f\u6700\u4f73\u5b9e\u8df5\uff0c\u5728\u73b0\u5b9e\u2026\u4e2d\u4ecd\u7136\u4e0d\u662f\u90a3\u4e48\u5c11\u89c1\u3002\u200b)\u3002\nApache Kafka\u4e0d\u9002\u7528\u4e8e\u5927\u6d88\u606f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u6d88\u606f\u5927\u5c0f\u4e3a1 MB\uff0c\u867d\u7136\u8fd9\u4e2a\u5927\u5c0f\u53ef\u4ee5\u589e\u52a0\uff0c\u4f46\u57fa\u51c6\u6d4b\u8bd5\u663e\u793a\uff0c\u5c0f\u5f97\u591a\u7684\u6d88\u606f\u5177\u6709\u6700\u4f73\u541e\u5410\u91cf\u3002\u56e0\u6b64\uff0c\u5206\u5757\u548c\u5916\u90e8\u5316\u5927\u6709\u6548\u8d1f\u8f7d\u7b49\u7b56\u7565\u5bf9\u4e8e\u786e\u4fdd\u4ee4\u4eba\u6ee1\u610f\u7684\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002\n\u5c06\u66f4\u6539\u6570\u636e\u4e8b\u4ef6\u4ece\u8be5\u8868\u4f20\u64ad\u5230Apache Kafka\u65f6\uff0c\u5c06\u56fe\u7247\u6570\u636e\u6dfb\u52a0\u5230\u6bcf\u4e2a\u4e8b\u4ef6\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u5f00\u9500\uff0c\u7279\u522b\u662f\u5982\u679c\u56fe\u7247blob\u5728\u4e24\u4e2a\u4e8b\u4ef6\u4e4b\u95f4\u6839\u672c\u6ca1\u6709\u66f4\u6539\u3002\n\u4f7f\u7528SMT\uff0cBLOB\u6570\u636e\u53ef\u4ee5\u5916\u90e8\u5316\u5230\u5176\u4ed6\u5b58\u50a8\u3002\u5728\u6e90\u7aef\uff0cSMT\u53ef\u4ee5\u4ece\u539f\u59cb\u8bb0\u5f55\u63d0\u53d6\u56fe\u50cf\u6570\u636e\uff0c\u4f8b\u5982\u5c06\u5176\u5199\u5165\u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\u6216Amazon S3\u5b58\u50a8\u6876\u3002\u8bb0\u5f55\u4e2d\u7684\u76f8\u5e94\u5b57\u6bb5\u5c06\u66f4\u65b0\uff0c\u4ee5\u4fbf\u4ec5\u5305\u542b\u5916\u90e8\u5316\u6709\u6548\u8d1f\u8f7d\u7684\u552f\u4e00\u5730\u5740\uff0c\u5982S3\u5b58\u50a8\u6876\u540d\u79f0\u548c\u6587\u4ef6\u8def\u5f84\uff1a\n\u4f5c\u4e3a\u4f18\u5316\uff0c\u53ef\u4ee5\u901a\u8fc7\u6bd4\u8f83\u5916\u90e8\u5316\u6587\u4ef6\u7684\u65e9\u671f\u6563\u5217\u548c\u5f53\u524d\u6563\u5217\u6765\u907f\u514d\u518d\u6b21\u91cd\u65b0\u4e0a\u4f20\u672a\u6539\u53d8\u7684\u6587\u4ef6\u5185\u5bb9\u3002\n\u5e94\u7528\u4e8e\u63a5\u6536\u5668\u8fde\u63a5\u5668\u7684\u76f8\u5e94SMT\u5b9e\u4f8b\u5c06\u4ece\u4f20\u5165\u8bb0\u5f55\u4e2d\u68c0\u7d22\u5916\u90e8\u5316\u6587\u4ef6\u7684\u6807\u8bc6\u7b26\uff0c\u4ece\u5916\u90e8\u5b58\u50a8\u5668\u83b7\u53d6\u5185\u5bb9\uff0c\u5e76\u5728\u5c06\u5176\u4f20\u9012\u5230\u8fde\u63a5\u5668\u4e4b\u524d\u5c06\u5176\u653e\u56de\u8bb0\u5f55\u4e2d\u3002\nMac\u7684\u8bc4\u7ea7\uff1a\ud83d\udcce\u8ba4\u4e3aSMT\u53ef\u4ee5\u5e2e\u52a9\u5c06\u6709\u6548\u8f7d\u8377\u5916\u90e8\u5316\uff0c\u907f\u514d\u5927\u91cf\u7684\u5361\u592b\u5361\u8bb0\u5f55\u3002\u4e0d\u8fc7\uff0c\u4f9d\u8d56\u53e6\u4e00\u9879\u670d\u52a1\u4f1a\u589e\u52a0\u6574\u4f53\u590d\u6742\u6027\u3002\n\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u7684\uff0c\u5355\u4e00\u6d88\u606f\u8f6c\u6362\u53ef\u4ee5\u5e2e\u52a9\u89e3\u51b3Kafka Connection\u7528\u6237\u901a\u5e38\u63d0\u51fa\u7684\u76f8\u5f53\u591a\u7684\u8981\u6c42\u3002\u4f46\u4e5f\u6709\u5c40\u9650\u6027\uff1b\u5c31\u50cfMacGyver\u4e00\u6837\uff0c\u9664\u4e86\u4ed6\u5fc3\u7231\u7684\u745e\u58eb\u519b\u5200\u4e4b\u5916\uff0c\u6709\u65f6\u8fd8\u5fc5\u987b\u4f7f\u7528\u5176\u4ed6\u5de5\u5177\uff0c\u60a8\u4e0d\u5e94\u8be5\u4e00\u76f4\u8ba4\u4e3aSMT\u662f\u5b8c\u7f8e\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u6700\u5927\u7684\u7f3a\u70b9\u5df2\u7ecf\u5728\u5b83\u4eec\u7684\u540d\u5b57\u4e2d\u88ab\u6697\u793a\u4e86\uff1aSMT\u53ea\u80fd\u7528\u6765\u5904\u7406\u5355\u4e2a\u8bb0\u5f55\uff0c\u4e00\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u8bb0\u5f55\u3002\u60a8\u4e0d\u80fd\u4f7f\u7528SMT\u5c06\u4e00\u6761\u8bb0\u5f55\u5206\u5272\u4e3a\u591a\u6761\u8bb0\u5f55\uff0c\u56e0\u4e3a\u5b83\u4eec\u6700\u591a\u53ea\u80fd\u8fd4\u56de\u4e00\u6761\u8bb0\u5f55\u3002\u6b64\u5916\uff0c\u4efb\u4f55\u7c7b\u578b\u7684\u72b6\u6001\u5904\u7406(\u5982\u805a\u5408\u591a\u6761\u8bb0\u5f55\u4e2d\u7684\u6570\u636e\u6216\u5173\u8054\u591a\u4e2a\u4e3b\u9898\u4e2d\u7684\u8bb0\u5f55)\u90fd\u662fSMT\u7684\u7981\u533a\u3002\u5bf9\u4e8e\u6b64\u7c7b\u7528\u4f8b\uff0c\u60a8\u5e94\u8be5\u8003\u8651Kafka Streams\u548cApache Flink\u7b49\u6d41\u5904\u7406\u6280\u672f\uff1b\u6b64\u5916\uff0cApache Camel\u7b49\u96c6\u6210\u6280\u672f\u5728\u6b64\u4e5f\u975e\u5e38\u6709\u7528\u3002\n\u5728\u4f7f\u7528SMT\u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4ef6\u4e8b\u662f\u914d\u7f6e\u7684\u590d\u6742\u6027\uff1b\u5f53\u4f7f\u7528\u901a\u7528\u7684\u3001\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684SMT\u65f6\uff0c\u60a8\u53ef\u80fd\u6700\u7ec8\u4f1a\u5f97\u5230\u5f88\u96be\u638c\u63e1\u548c\u8c03\u8bd5\u7684\u5197\u957f\u914d\u7f6e\u3002\u60a8\u6700\u597d\u5b9e\u73b0\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u4e00\u4e2a\u7279\u5b9a\u4efb\u52a1\u7684\u5b9a\u5236SMT\uff0c\u5145\u5206\u5229\u7528Java\u7f16\u7a0b\u8bed\u8a00\u7684\u5168\u90e8\u529f\u80fd\u3002\n\u65e0\u8bba\u60a8\u662f\u901a\u8fc7\u914d\u7f6e\u4f7f\u7528\u73b0\u6210\u7684SMT\uff0c\u8fd8\u662f\u5728Java\u4e2d\u5b9e\u73b0\u81ea\u5b9a\u4e49SMT\uff0c\u6d4b\u8bd5\u60a8\u7684\u5de5\u4f5c\u90fd\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\n\u867d\u7136\u5355\u5143\u6d4b\u8bd5\u662f\u5b9a\u5236SMT\u5b9e\u73b0\u7684\u57fa\u672c\u6d4b\u8bd5\u7684\u53ef\u884c\u9009\u62e9\uff0c\u4f46\u662f\u5efa\u8bae\u4f7f\u7528\u9488\u5bf9Kafka Connect\u8fde\u63a5\u5668\u8fd0\u884c\u7684\u96c6\u6210\u6d4b\u8bd5\u6765\u6d4b\u8bd5SMT\u914d\u7f6e\u3002\u8fd9\u6837\uff0c\u60a8\u53ef\u4ee5\u786e\u4fddSMT\u53ef\u4ee5\u5904\u7406\u5b9e\u9645\u6d88\u606f\uff0c\u5e76\u4e14\u5df2\u7ecf\u6309\u7167\u60a8\u60f3\u8981\u7684\u65b9\u5f0f\u8fdb\u884c\u4e86\u914d\u7f6e\u3002\nTestContainers\u548c\u5bf9TestContainers\u7684Debezium\u652f\u6301\u662f\u8bbe\u7f6e\u6240\u6709\u5fc5\u9700\u7ec4\u4ef6(\u5982Apache Kafka\u3001Kafka Connect\u3001\u8fde\u63a5\u5668\u548c\u8981\u6d4b\u8bd5\u7684SMT)\u7684\u91cd\u8981\u57fa\u7840\u3002\n\u6211\u65f6\u4e0d\u65f6\u5e0c\u671b\u7684\u4e00\u4e2a\u7279\u5b9a\u529f\u80fd\u662f\uff0c\u80fd\u591f\u5c06SMT\u4ec5\u5e94\u7528\u4e8e\u8fde\u63a5\u5668\u521b\u5efa\u6216\u4f7f\u7528\u7684\u4e3b\u9898\u7684\u7279\u5b9a\u5b50\u96c6\u3002\u5c24\u5176\u662f\uff0c\u5982\u679c\u8fde\u63a5\u5668\u521b\u5efa\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u4e3b\u9898(\u5982\u5b9e\u9645\u7684\u6570\u636e\u4e3b\u9898\u548c\u53e6\u4e00\u4e2a\u5177\u6709\u5143\u6570\u636e\u7684\u4e3b\u9898)\uff0c\u5219\u53ef\u80fd\u5e0c\u671b\u53ea\u5c06SMT\u5e94\u7528\u4e8e\u4e00\u4e2a\u7ec4\u7684\u4e3b\u9898\uff0c\u800c\u4e0d\u5e94\u7528\u4e8e\u53e6\u4e00\u4e2a\u7ec4\u7684\u4e3b\u9898\u3002KIP-585(\u7b5b\u9009\u548c\u6761\u4ef6SMT)\u4e2d\u5305\u542b\u4e86\u8fd9\u4e00\u8981\u6c42\uff0c\u5982\u679c\u60a8\u6709\u9700\u6c42\u6216\u9700\u8981\uff0c\u8bf7\u52a0\u5165\u5230\u5173\u4e8e\u8be5\u4e3b\u9898\u7684\u8ba8\u8bba\u4e2d\u3002\u5982\u679c\u60a8\u6709\u9700\u6c42\uff0c\u8bf7\u52a0\u5165\u5230\u5173\u4e8e\u8be5\u4e3b\u9898\u7684\u8ba8\u8bba\u4e2d\uff0c\u5982\u679c\u60a8\u6709\u9700\u6c42\u6216\u9700\u6c42\uff0c\u8bf7\u52a0\u5165\u5173\u4e8e\u8be5\u4e3b\u9898\u7684\u8ba8\u8bba\uff0c\u5982\u679c\u60a8\u6709\u9700\u6c42\u6216\u9700\u6c42\uff0c\u8bf7\u52a0\u5165\u5173\u4e8e\u8be5\u4e3b\u9898\u7684\u8ba8\u8bba\uff0c\u5982\u679c\u60a8\u6709\u9700\u6c42\u6216\u9700\u6c42\uff0c\u8bf7\u52a0\u5165\u5173\u4e8e\u8be5\u4e3b\u9898\u7684\u8ba8\u8bba\uff0c\u5982\u679c\u60a8\u6709\u9700\u6c42\u6216\n\u6709\u51e0\u4e2a\u5f88\u68d2\u7684\u6f14\u793a\u6587\u7a3f\u548c\u535a\u5ba2\u6587\u7ae0\u6df1\u5165\u63cf\u8ff0\u4e86\u4ec0\u4e48\u662fSMT\uff0c\u60a8\u53ef\u4ee5\u5982\u4f55\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684SMT\uff0c\u5b83\u4eec\u662f\u5982\u4f55\u914d\u7f6e\u7684\uff0c\u7b49\u7b49\u3002\n\u5355\u4e00\u6d88\u606f\u8f6c\u6362\u4e0d\u662f\u60a8\u6b63\u5728\u5bfb\u627e\u7684\u8f6c\u6362\uff1a\u5173\u4e8eSMT\u3001\u5b83\u4eec\u7684\u529f\u80fd\u4ee5\u53ca\u9650\u5236\u7684\u5f88\u597d\u7684\u6982\u8ff0\uff0cEwen Cheslake-Postava\u8457\u3002\nKafka Connect SMT\u7684\u5b9e\u8df5\u4f53\u9a8c\uff1a\u5173\u4e8eSMT\u4f7f\u7528\u6848\u4f8b\u3001\u6ce8\u610f\u4e8b\u9879\u7b49\u7684\u6df1\u5165\u535a\u5ba2\u6587\u7ae0\uff0c\u4f5c\u8005\uff1aGian D\u2018Uia\u3002\n\u73b0\u5728\uff0c\u8003\u8651\u5230SMT\u7684\u5e7f\u6cdb\u4f7f\u7528\u6848\u4f8b\uff0cMacGyver\u4f1a\u559c\u6b22\u5e76\u4f7f\u7528\u5b83\u4eec\u6765\u5b9e\u65bdKafka Connect\u5468\u56f4\u7684\u5404\u79cd\u4efb\u52a1\u5417\uff1f\u6211\u5f53\u7136\u4f1a\u8fd9\u6837\u8ba4\u4e3a\u3002\u4f46\u4e00\u5982\u65e2\u5f80\uff0c\u5fc5\u987b\u9009\u62e9\u9002\u5408\u8fd9\u9879\u5de5\u4f5c\u7684\u6b63\u786e\u5de5\u5177\uff1a\u6709\u65f6SMT\u53ef\u80fd\u975e\u5e38\u5408\u9002\uff0c\u800c\u6709\u65f6\u66f4\u7075\u6d3b(\u66f4\u590d\u6742)\u7684\u6d41\u5904\u7406\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u66f4\u53ef\u53d6\u3002\n\u5c31\u50cfMacGyver\u4e00\u6837\uff0c\u5f53\u4f60\u4f7f\u7528\u745e\u58eb\u519b\u5200\u3001\u7ba1\u9053\u80f6\u5e26\u6216\u56de\u5f62\u9488\u65f6\uff0c\u4f60\u5fc5\u987b\u6253\u4e2a\u7535\u8bdd\u3002\n\u7531Disqus\u63d0\u4f9b\u652f\u6301\u7684\u8bc4\u8bba", "note_en": "Do you remember Angus &#34;Mac&#34; MacGyver?The always creative protagonist of the popular 80ies/90ies TV show, who could solve about any problem with nothing more than a Swiss Army knife, duct tape, shoe strings and a paper clip?\n The single message transformations (SMTs) of Kafka Connect are almost as versatile as MacGyver\u2019s Swiss Army knife:\n  SMTs can be the answer to these and many other questions that come up in the context of Kafka Connect.Applied to source or sink connectors,SMTs allow to modify Kafka records before they are sent to Kafka, or after they are consumed from a topic, respectively.\n In this post I\u2019d like to focus on some interesting (hopefully anyways) usages of SMTs.Those use cases are mostly based on my experiences from using Kafka Connect with  Debezium, an open-source platform for change data capture (CDC).I also got some great pointers on interesting SMT usages when  asking the community about this on Twitter some time ago:\n  I definitely recommend to check out the thread; thanks a lot to all who replied!In order to learn more about SMTs in general, how to configure them etc., refer to the resources given towards the end of this post.\n For each category of use cases, I\u2019ve also asked our sympathetic TV hero for his opinion on the usefulness of SMTs for the task at hand.You can find his rating at the end of each section,ranging from \ud83d\udcce (poor fit) to \ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce (perfect fit).\n Probably the most common application of SMTs is format conversion,i.e. adjustments to type, format and representation of data.This may apply to entire messages, or to specific message attributes.Let\u2019s first look at a few examples for converting individual message attribute formats:\n Timestamps: Different systems tend to have different assumptions of how timestamps should be typed and formatted.Debezium for instance represents most temporal column types as milli-seconds since epoch.Change event consumers on the other hand might expect such date and time values using Kafka Connect\u2019s  Date type, or as an ISO-8601 formatted string, potentially using a specific timezone\n Value masking: Sensitive data might have be to masked or truncated, or specific fields should even be removed altogether; the  org.apache.kafka.connect.transforms.MaskField and  ReplaceField SMTs  shipping with Kafka Connect out of the box come in handy for that\n Numeric types: Similar to timestamps, requirements around the representation of (decimal) numbers may differ between systems; e.g. Kafka Connect\u2019s  Decimal type allows to convey arbitrary-precision decimals, but its binary representation of numbers might not be supported by all sink connectors and consumers\n Name adjustments: Depending on the chosen serialization formats, specific field names might be unsupported; when working with  Apache Avro for instance, field names must not start with a number\n In all these cases, either existing, ready-made SMTs or bespoke implementations can be used to apply the required attribute type and/or format conversions.\n When using Kafka Connect for integrating legacy services and databases with newly built microservices, such format conversions can play an important role for creating an  anti-corruption layer: by using better field names, choosing more suitable data types or by removing unneeded fields, SMTs can help to shield a new service\u2019s model from the oddities and quirks of the legacy world.\n But SMTs cannot only modify the representation of single fields, also the format and structure of entire messages can be adjusted.E.g. Kafka Connect\u2019s  ExtractField transformation allows to extract a single field from a message and propagate that one.A related SMT is Debezium\u2019s SMT for  change event flattening.It can be used to convert the complex Debezium change event structure with old and new row state, metadata and more, into a flat row representation, which can be consumed by many existing sink connectors.\n SMTs also allow to fine-tune schema namespaces; that can be of interest when working with a schema registry for managing schemas and their versions, and specific schema namespaces should be enforced for the messages on given topics.Two more, very useful examples of SMTs in this category are  kafka-connect-transform-xml and  kafka-connect-json-schema by Jeremy Custenborder, which will take XML or text and produce a typed Kafka Connect  Struct,based on a given XML schema or JSON schema, respectively.\n Lastly, as a special kind of format conversion, SMTs can be used to modify or set the key of Kafka records.This may be desirable if a source connector doesn\u2019t produce any meaningful key, but one can be extracted from the record value.Also  changing the message key can be useful, when considering subsequent stream processing.Choosing matching keys right at the source side e.g. allows for joining multiple topics via Kafka Streams, without the need for re-keying records.\n Mac\u2019s rating: \u00a0\u00a0 \ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce\u00a0\u00a0  SMTs are the perfect tool for format conversions of Kafka Connect records\n Changes to the schema of Kafka records can potentially be disruptive for consumers.If for instance a record field gets renamed, a consumer must be adapted accordingly,reading the value using the new field name.In case a field gets dropped altogether, consumers must not expect this field any longer.\n Message transformations can help with such transition from one schema version to the next,thus reducing the coupling of the lifecycles of message producers and consumers.In case of a renamed field, an SMT could add the field another time, using the original name.That\u2019ll allow consumers to continue reading the field using the old name and to be upgraded to use the new name at their own pace.After some time, once all consumers have been adjusted, the SMT can be removed again,only exposing the new field name going forward.Similarly, a field that got removed from a message schema could be re-added,e.g. using some sort of constant placeholder value.In other cases it might be possible to derive the field value from other, still existing fields.Again consumers could then be updated at their own pace to not expect and access that field any longer.\n It should be said though that there are limits for this usage: e.g. when changing the type of a field, things quickly become tricky.One option could be a multi-step approach where at first a separate field with the new type is added, before renaming it again as described above.\n Mac\u2019s rating: \u00a0\u00a0 \ud83d\udcce\ud83d\udcce\ud83d\udcce\u00a0\u00a0  SMTs can primarily help to address basic compatibility concerns around schema evolution\n When applied on the source side,SMTs allow to filter out specific records produced by the connector.They also can be used for controlling the Kafka topic a record gets sent to.That\u2019s in particular interesting when filtering and routing is based on the actual record contents.In an IoT scenario for instance where Kafka Connect is used to ingest data from some kind of sensors,an SMT might be used to filter out all sensor measurements  below a certain threshold, or route measurement events  above a threshold to a special topic.\n  The  logical topic routing SMT allows to send change events originating from multiple tables to the same Kafka topic,which can be useful when working with partition tables in Postgres, or with data that is sharded into multiple tables\n The   Filter and   ContentBasedRouter SMTs let you use script expressions in languages such as Groovy or JavaScript for filtering and routing change events based on their contents;such script-based approach can be an interesting middleground between ease-of-use (no Java code must be compiled and deployed to Kafka Connect) and expressiveness; e.g. here is how the routing SMT could be used with  GraalVM\u2019s JavaScript engine for routing change events from a table with purchase orders to different topics in Kafka, based on the order type:\n The  outbox event router comes in handy when implementing the  transactional outbox pattern for data propagation between microservices: it can be used to send events originating from a single outbox table to a specific Kafka topic per aggregate (when thinking of domain driven design) or event type\n There are also two SMTs for routing purposes in Kafka Connect  itself:  RegexRouter which allows to re-route records two different topics based on regular expressions, and  TimestampRouter for determining topic names based on the record\u2019s timestamp.\n While routing SMTs usually are applied to source connectors(defining the Kafka topic a record gets sent to),it can also make sense to use them with sink connectors.That\u2019s the case when a sink connector derives the name of downstream table names, index names or similar from the topic name.\n Mac\u2019s rating: \u00a0\u00a0 \ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce\u00a0\u00a0  Message filtering and topic routing\u2009\u2014\u2009no problem for SMTs\n Tombstone records are Kafka records with a  null value.They carry special semantics when working with  compacted topics:during log compaction, all records with the same key as a tombstone record will be removed from the topic.\n Tombstones will be retained on a topic for a configurable time before compaction happens (controlled via   delete.retention.ms topic setting),which means that also Kafka Connect sink connectors need to handle them.Unfortunately though, not all connectors are prepared for records with a  null value,typically resulting in  NullPointerExceptions and similar.A filtering SMT such as the one above can be used to drop tombstone records in such case.\n But also the exact opposite\u2009\u2014\u2009producing tombstone records\u2009\u2014\u2009can be useful:some sink connectors use tombstone records as the indicator to delete corresponding rows from a downstream datastore.Now when using a CDC connector like Debezium to capture changes from a database where &#34;soft deletes&#34; are used (i.e. records are not physically deleted, but a logically deleted flag is set to  true when deleting a record), those change events will be exported as update events (which they technically are).A bespoke SMT can be used to translate these update events into tombstone records, triggering the deletion of corresponding records in downstream datastores.\n Mac\u2019s rating: \u00a0\u00a0 \ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce\u00a0\u00a0  SMTs work well to discard tombstones or convert soft delete events into tombstones. What\u2019s not possible though is to keep the original event and produce an additional tombstone record at the same time\n Even some advanced  enterprise application patterns can be implemented with the help of SMTs, one example being the  claim check pattern.This pattern comes in handy in situations like this:\n A message may contain a set of data items that may be needed later in the message flow, but that are not necessary for all intermediate processing steps. We may not want to carry all this information through each processing step because it may cause performance degradation and makes debugging harder because we carry so much extra data.\n A specific example could again be a CDC connector that captures changes from a database table  Users, with a BLOB column that contains the user\u2019s profile picture(surely not a best practice, still not that uncommon in reality\u2026\u200b).\n Apache Kafka isn\u2019t meant for large messages.The maximum message size is 1 MB by default, and while this can be increased,benchmarks are showing best throughput for much smaller messages.Strategies like  chunking and externalizing large payloads can thus be vital in order to ensure a satisfying performance.\n When propagating change data events from that table to Apache Kafka,adding the picture data to each event poses a significant overhead.In particular, if the picture BLOB hasn\u2019t changed between two events at all.\n Using an SMT, the BLOB data could be externalized to some other storage.On the source side, the SMT could extract the image data from the original record and e.g. write it to a network file system or an Amazon S3 bucket.The corresponding field in the record would be updated so it just contains the unique address of the externalised payload, such as the S3 bucket name and file path:\n  As an optimization, it could be avoided to re-upload unchanged file contents another time by comparing earlier and current hash of the externalized file.\n A corresponding SMT instance applied to sink connectors would retrieve the identifier of the externalized files from the incoming record, obtain the contents from the external storage and put it back into the record before passing it on to the connector.\n Mac\u2019s rating: \u00a0\u00a0 \ud83d\udcce\ud83d\udcce\ud83d\udcce\ud83d\udcce\u00a0\u00a0  SMTs can help to externalize payloads, avoiding large Kafka records. Relying on another service increases overall complexity, though\n As we\u2019ve seen, single message transformations can help to address quite a few requirements that commonly come up for users of Kafka Connect.But there are limitations, too;Like MacGyver, who sometimes has to reach for some other tool than his beloved Swiss Army knife, you shouldn\u2019t think of SMTs as the perfect solution all the time.\n The biggest shortcoming is already hinted at in their name:SMTs only can be used to process  single records, one at a time.E.g. you cannot split up a record into multiple ones using an SMT, as they only can return (at most) one record.Also any kind of stateful processing, like aggregating data from multiple records, or correlating records from several topics is off limits for SMTs.For such use cases, you should be looking at stream processing technologies like  Kafka Streams and  Apache Flink; also integration technologies like  Apache Camel can be of great use here.\n One thing to be aware of when working with SMTs is configuration complexity;when using generic, highly configurable SMTs, you might end up with lengthy configuration that\u2019s hard to grasp and debug.You might be better off implementing a bespoke SMT which is focussing on one particular task, leveraging the full capabilities of the Java programming language.\n Whether you use ready-made SMTs by means of configuration, or you implement custom SMTs in Java,testing your work is essential.\n While unit tests are a viable option for basic testing of bespoke SMT implementations,integration tests running against Kafka Connect connectors are recommended for testing SMT configurations.That way you\u2019ll be sure that the SMT can process actual messages and it has been configured the way you intended to.\n Testcontainers and the Debezium  support for Testcontainers are a great foundation for setting up all the required components such as Apache Kafka, Kafka Connect, connectors and the SMTs to test.\n A specific feature I wished for every now and then is the ability to apply SMTs only to a specific sub-set of the topics created or consumed by a connector.In particular if connectors create different kinds of topics (like an actual data topic and another one with with metadata),it can be desirable to apply SMTs only to the topics of one group but not the other.This requirement is captured in  KIP-585 (&#34;Filter and Conditional SMTs&#34;),please join the discussion on that one if you got requirements or feedback related to that.\n There are several great presentations and blog posts out there which describe in depth what SMTs are,how you can implement your own one,how they are configured etc.\n  Singe Message Transforms are not the Transformations You\u2019re Looking For: A great overview on SMTs, their capabilities as well as limitations, by Ewen Cheslack-Postava\n A hands-on experience with Kafka Connect SMTs: In-depth blog post on SMT use cases, things to be aware of and more, by Gian D\u2019Uia\n Now, considering this wide range of use cases for SMTs, would MacGyver like and use them for implementing various tasks around Kafka Connect?I would certainly think so.But as always, the right tool for the job must be chosen: sometimes an SMT may be a great fit, another time a more flexible (and complex) stream processing solution might be preferable.\n Just as MacGyver, you got to make a call when to use your Swiss Army knife, duct tape or a paper clip.\n    comments powered by  Disqus", "posttime": "2020-05-17 06:53:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6c\u6362,message,smt", "title": "\u5355\u4e00\u4fe1\u606f\u8f6c\u6362-\u5361\u592b\u5361\u8fde\u63a5\u7684\u745e\u58eb\u519b\u5200", "title_en": "Single Message Transformations \u2013 The Swiss Army Knife of Kafka Connect", "transed": 1, "url": "https://www.morling.dev/blog/single-message-transforms-swiss-army-knife-of-kafka-connect/", "via": "", "real_tags": ["\u8f6c\u6362", "message", "smt"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002456, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Design Studio\u5de5\u5177\uff0c\u53ef\u5e2e\u52a9\u60a8\u4ee5\u56fe\u5f62\u65b9\u5f0f\u89c4\u5212\u590d\u6742\u7684vPC\u8bbe\u8ba1\u3001\u8ba1\u7b97\u5b50\u7f51\u7684\u6700\u4f73CIDR\u8303\u56f4\u5e76\u52a8\u6001\u751f\u6210Terraform/Pulumi\u4ee3\u7801\u3002", "note_en": "Design studio tool to help you graphically plan complex VPC design, calculate the optimal CIDR range for subnets and generate Terraform/Pulumi code on the fly.", "posttime": "2020-05-17 06:53:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "aws,vpc,\u8bbe\u8ba1", "title": "\u9ed8\u8ba4\u5177\u6709\u6700\u4f73\u5b9e\u8df5\u7684AWS vPC Design Studio", "title_en": "AWS VPC design studio with best practices default", "transed": 1, "url": "https://houqp.github.io/vpcstudio/", "via": "", "real_tags": ["aws", "vpc", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "9eee82cd44609f8fe1a1cb4cc57ca40c.jpg", "infoid": 1002455, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u7cfb\u5217\u9762\u5411\u7684\u662f\u65b0\u63a5\u89e6Kubernetes\u548cGKE\u7684\u5de5\u7a0b\u5e08\u3002\u5b83\u63d0\u4f9b\u4e86Kubernetes\u7684\u57fa\u672c\u6982\u8ff0\u3001\u5b9a\u4e49\u548c\u5728GKE\u4e2d\u6784\u5efaKubernetes\u96c6\u7fa4\u7684\u5feb\u901f\u5165\u95e8\uff0c\u4ee5\u53ca\u6784\u5efa\u60a8\u7684\u7b2c\u4e00\u4e2a\u591a\u5c42WebApp\u7684\u7814\u8ba8\u4f1a\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u66f4\u6df1\u5165\u7684Kubernetes\u6700\u4f73\u5b9e\u8df5\u548c\u5e2e\u52a9\uff0c\u8bf7\u8054\u7cfb\u3002\n\u5728\u6211\u4eec\u5f00\u59cb\u6784\u5efa\u60a8\u7684\u7b2c\u4e00\u4e2aGKE\u96c6\u7fa4\u4e4b\u524d\uff0c\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8eKubernetes\u7684\u4e8b\u60c5\u662f\u5f88\u91cd\u8981\u7684\u3002\nKubernetes(K8S)\u662f\u4e00\u4e2a\u5f00\u6e90\u7cfb\u7edf\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u5bb9\u5668\u5316\u5e94\u7528\u7a0b\u5e8f\u7684\u90e8\u7f72\u3001\u6269\u5c55\u548c\u7ba1\u7406\u3002\u6d88\u606f\u6765\u6e90\uff1aKubernetes.io\u3002\n2005\u5e74\uff0c\u8c37\u6b4c\u63a8\u51fa\u4e86\u535a\u683c\u7cfb\u7edf\u3002\u5b83\u4e00\u5f00\u59cb\u53ea\u662f\u4e00\u4e2a\u53ea\u6709\u4e24\u4e09\u4e2a\u4eba\u53c2\u4e0e\u7684\u5c0f\u9879\u76ee\u3002\u8fd9\u662f\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u96c6\u7fa4\u7ba1\u7406\u548c\u8d44\u6e90\u8c03\u5ea6\u7cfb\u7edf\uff0c\u5b83\u5f15\u5165\u4e86\uff1a\n\u8fc7\u5ea6\u627f\u8bfa\u7684\u88c5\u7bb1-\u5982\u4f55\u8ba9\u591a\u4e2a\u7cfb\u7edf\u548c\u8fdb\u7a0b\u5728\u5355\u4e2a\u8282\u70b9\u4e0a\u4e0d\u53d7\u5e72\u6270\u5730\u8fd0\u884c\u3002\n\u8fdb\u7a0b\u7ea7\u8d44\u6e90\u9694\u79bb-\u5982\u679c\u60a8\u5728\u5355\u4e2a\u8282\u70b9\u4e0a\u8c03\u5ea6\u5bb9\u5668\uff0c\u5982\u4f55\u786e\u4fdd\u8fdb\u7a0b\u9700\u6c42\u4e0d\u4f1a\u5e72\u6270\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u8fdb\u7a0b\u9700\u6c42\u3002\n\u5e93\u4f2f\u5185\u65af\u628a\u8fd9\u4e00\u5207\u90fd\u53d8\u6210\u4e86\u9648\u8ff0\u6027\u7684\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u83b7\u53d6\u60a8\u9700\u8981\u8c03\u5ea6\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5728YAML\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5b83\u4eec\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u63d0\u4ea4\u7ed9API\uff0cAPI\u4f1a\u544a\u8bc9\u60a8\u5b83\u662f\u5426\u80fd\u591f\u8c03\u5ea6\u5de5\u4f5c\u3002\n2014\u5e74\uff0c\u8c37\u6b4c\u5f15\u5165Kubernetes\u4f5c\u4e3aBorg\u7cfb\u7edf\u7684\u5f00\u6e90\u7248\u672c\u30022015\u5e74\uff0c\u8c37\u6b4c\u4e0eLinux\u57fa\u91d1\u4f1a\u8054\u5408\u6210\u7acb\u4e86\u4e91\u539f\u751f\u8ba1\u7b97\u57fa\u91d1\u4f1a(CNCF)\u3002\u540c\u5e74\uff0c\u7b2c\u4e00\u6b21KubeCon\u6d3b\u52a8\u4e3e\u884c\uff0cCNCF\u5f00\u59cb\u4e86Kubernetes\u7684\u5b63\u5ea6\u53d1\u5e03\u5468\u671f\u3002\n\u5f53\u60a8\u4f7f\u7528Kubernetes\u8fd9\u6837\u7684\u5bb9\u5668\u7f16\u6392\u7a0b\u5e8f\u65f6\uff0c\u60a8\u53ef\u4ee5\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u65f6\u95f4\u8de8\u591a\u53f0\u673a\u5668\u8c03\u5ea6\u8282\u70b9\u6216\u8fdb\u7a0b\u3002\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u4e22\u5931\u4e00\u4e2a\u8282\u70b9\u6216\u8fdb\u7a0b\uff0c\u800c\u4e0d\u4f1a\u770b\u5230\u670d\u52a1\u7684\u6b63\u5e38\u8fd0\u884c\u65f6\u95f4\u4e2d\u65ad\u3002\n\u5982\u679c\u60a8\u662f\u7cfb\u7edf\u64cd\u4f5c\u5458\uff0c\u5f00\u53d1\u4eba\u5458\u5e0c\u671b\u60a8\u7ed9\u4ed6\u4eec\u4e00\u5929\u591a\u6b21\u90e8\u7f72\u4ee3\u7801\u7684\u673a\u4f1a\u3002Kubernetes\u5141\u8bb8\u60a8\u5728\u4e0d\u505c\u673a\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u6eda\u52a8\u66f4\u65b0\u7684\u667a\u80fd\u6d41\u7a0b\u548c\u65b9\u6848\u3002\n\u60a8\u53ef\u4ee5\u5728\u5355\u4e2a\u8282\u70b9\u4e0a\u8c03\u5ea6\u591a\u4e2a\u8fdb\u7a0b\uff0c\u800c\u4e0d\u662f\u8ba9\u60a8\u5168\u5929\u5019\u4ed8\u8d39\u5728\u5355\u4e2a\u4e91\u8282\u70b9\u4e0a\u8fd0\u884c\u5355\u4e2a\u8fdb\u7a0b\u3002\u60a8\u7684\u4e91\u8282\u70b9\u8fd8\u53ef\u4ee5\u8bc6\u522b\u4f55\u65f6\u65e0\u6cd5\u8c03\u5ea6\u65b0\u8fdb\u7a0b\u4ece\u800c\u9700\u8981\u65b0\u8d44\u6e90\uff0c\u6216\u8005\u4f55\u65f6\u8d44\u6e90\u7a7a\u95f2\u5e76\u9700\u8981\u964d\u901f\u3002\u5e93\u4f2f\u5185\u65af\u63d0\u4f9b\u4e86\u5207\u6362\u8fd9\u79cd\u5f39\u6027\u7684\u7b80\u5355\u65b9\u6cd5\u3002\nKubernetes\u63d0\u4f9b\u4e86\u53ef\u9760\u6027\u3002\u5982\u679c\u5bb9\u5668\u6216\u6574\u4e2a\u8282\u70b9\u5b95\u673a\uff0c\u8d44\u6e90\u6216\u5355\u4e2a\u8fdb\u7a0b\u5c06\u7531Kubernetes\u5728\u5065\u5eb7\u8282\u70b9\u4e0a\u91cd\u65b0\u8c03\u5ea6\u3002\nKubernetes\u5141\u8bb8\u60a8\u542f\u52a8\u65b0\u8282\u70b9\u5e76\u81ea\u52a8\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u96c6\u7fa4\u4e2d\u3002\u5982\u679c\u5355\u4e2a\u670d\u52a1\u662f\u8d44\u6e90\u53d7\u9650\u7684\uff0cKubernetes\u4f1a\u68c0\u6d4b\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u5e26\u6765\u65b0\u7684\u5b9e\u4f8b\u6765\u5904\u7406\u989d\u5916\u7684\u8d1f\u8f7d\u3002", "note_en": "This series is intended for engineers new to Kubernetes and GKE. It provides a basic overview of Kubernetes,  definitions \u00a0and  a quick start for building a Kubernetes cluster in GKE \u00a0and a workshop for building your first multi-tier webapp. If you are looking for more in-depth Kubernetes best practices and help,  get in touch.\n Before we get into building your first GKE cluster, it\u2019s important to understand a few things about Kubernetes.\n  Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. Source:  Kubernetes.io\n  In 2005, Google introduced the Borg System. It started as a small project with two or three people working on it. It was a large scale cluster management and resource scheduling system that introduced:\n Bin packing with over-commitment - how do we get many systems and processes running on a single node without interference\n Process level resource isolation - if you schedule a container on a single node, how do you ensure the process requirements doesn\u2019t interfere with the process requirements of another\n Kubernetes made all of this declarative. That means you can take your workloads you need to schedule, define them in a YAML file, submit them to an API and the API tells you if it was able to schedule the work.\n  In 2014, Google introduced Kubernetes as an open source version of the Borg system. In 2015, Google joined with the Linux Foundation to form the  Cloud Native Computing Foundation (CNCF). That same year the first KubeCon event was held and the CNCF started quarterly release cycles for Kubernetes.\n   When you work with a container orchestrator like Kubernetes, you can schedule nodes or processes across many machines, many different times. This allows you to lose a node or process without seeing a disruption in uptime of your service.\n  If you are a systems operator, developers want you to give them the opportunity to deploy code multiple times a day. Kubernetes allows you to implement smart processes and schemes for rolling updates without downtime.\n  Rather than having a single process running on a single cloud node that you pay for 24/7, you can schedule many processes on a single node. Your cloud nodes can also recognize when new processes cannot be scheduled and thus require new resources, or alternatively, when resources are idle and need to be spun down. Kubernetes offers easy ways to toggle this elasticity.\n  Kubernetes provides reliability. If a container or entire node goes down, resources or a single process will be rescheduled by Kubernetes on a healthy node.\n  Kubernetes allows you to bring up new nodes and automatically add them to your cluster. If a single service is resource constrained, Kubernetes will detect this and bring up new instances to handle the additional load.", "posttime": "2020-05-17 06:52:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u65af,kubernetes", "title": "\u5e93\u4f2f\u5185\u65af\u89e3\u51b3\u4e86\u54ea\u4e9b\u95ee\u9898\uff1f", "title_en": "What Problems Does Kubernetes Solve?", "transed": 1, "url": "https://www.fairwinds.com/blog/what-problems-does-kubernetes-solve", "via": "", "real_tags": ["\u5185\u65af"]}]