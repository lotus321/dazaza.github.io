[{"category": "", "categoryclass": "", "imagename": "73ab901485bf1f0f5bcb19575fb0ff3e.jpg", "infoid": 1005727, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u6570\u5341\u4e2a\u6570\u5b57\u8054\u7cfb\u4eba\u8ffd\u8e2a\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u5728\u5168\u7403\u63a8\u51fa\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u6709\u591a\u5c11\u4eba\u9700\u8981\u4f7f\u7528\u5b83\u4eec\u624d\u80fd\u8ba9\u7cfb\u7edf\u5de5\u4f5c\uff1f\u6709\u4e00\u4e2a\u6570\u5b57\u4e00\u904d\u53c8\u4e00\u904d\u5730\u51fa\u73b0\uff1a60%\u3002\n\u8fd9\u662f\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6280\u672f\u8bc4\u8bba\u7684Covid Tracking Tracker\u8bb0\u5f55\u7684\u8bb8\u591a\u516c\u5171\u536b\u751f\u5f53\u5c40\u8868\u793a\uff0c\u4ed6\u4eec\u8bd5\u56fe\u4fdd\u62a4\u81ea\u5df1\u7684\u793e\u533a\u514d\u53d7Covid-19\u611f\u67d3\u65f6\u6240\u9488\u5bf9\u7684\u4eba\u53e3\u6bd4\u4f8b\u3002\u8fd9\u4e00\u6570\u5b57\u53d6\u81ea\u725b\u6d25\u5927\u5b664\u6708\u4efd\u53d1\u5e03\u7684\u4e00\u9879\u7814\u7a76\u3002\u4f46\u7531\u4e8e\u6ca1\u6709\u4e00\u4e2a\u56fd\u5bb6\u8fbe\u5230\u8fd9\u6837\u7684\u6c34\u5e73\uff0c\u8bb8\u591a\u4eba\u6279\u8bc4\u201c\u66b4\u9732\u901a\u77e5\u201d\u6280\u672f\u672c\u8d28\u4e0a\u6beb\u65e0\u4ef7\u503c\u3002\n\u4f46\u6700\u521d\u8fd9\u9879\u7814\u7a76\u7684\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u4ed6\u4eec\u7684\u5de5\u4f5c\u88ab\u4e25\u91cd\u8bef\u89e3\u4e86\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u4f4e\u5f97\u591a\u7684APP\u91c7\u7528\u7387\u5bf9\u4e8e\u5bf9\u4ed8\u65b0\u51a0\u80ba\u708e\u6765\u8bf4\u4ecd\u7136\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\n\u201c\u6709\u5f88\u591a\u5173\u4e8e\u7597\u6548\u548c\u6444\u53d6\u2026\u7684\u9519\u8bef\u62a5\u9053\u3002\u8fd9\u8868\u660e\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u53ea\u80fd\u572860%\u4e0b\u8fd0\u884c--\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff0c\u201c\u725b\u6d25\u56e2\u961f\u5973\u53d1\u8a00\u4eba\u5b89\u5fb7\u91cc\u4e9a\u00b7\u65af\u56fe\u5c14\u7279\u8bf4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5979\u8bf4\uff0c\u5728\u201c\u4f4e\u5f97\u591a\u7684\u6c34\u5e73\u201d\uff0c\u201c\u5b83\u5f00\u59cb\u8d77\u5230\u4fdd\u62a4\u4f5c\u7528\u201d\u3002\n\u725b\u6d25\u5927\u5b66\u7684\u6a21\u578b\u53d1\u73b0\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u5bf9\u6240\u6709\u7ea7\u522b\u7684\u5e94\u7528\u90fd\u6709\u5f71\u54cd\uff0c\u5982\u8fd9\u5f20\u56fe\u8868\u6240\u793a\uff0c\u5b83\u663e\u793a\u4e86\u6bcf\u4e00\u7ea7\u522b\u7684\u91c7\u7528\u90fd\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u7f13\u4e86\u6d41\u884c\u75c5\u7684\u8513\u5ef6\u3002\n\u7531\u4e8e\u8fd9\u79cd\u6570\u5b57\u8054\u7cfb\u3001\u8ffd\u8e2a\u548c\u66dd\u5149\u901a\u77e5\u5e94\u7528\u7684\u5de5\u4f5c\u65b9\u5f0f-\u5982\u679c\u4ed6\u4eec\u7684\u624b\u673a\u5df2\u7ecf\u63a5\u8fd1\u540e\u6765\u88ab\u8bca\u65ad\u4e3aCovid-19\u7684\u4eba\u7684\u624b\u673a-\u901a\u8fc7\u901a\u77e5\u7528\u6237\uff0c\u6bef\u5b50\u8986\u76d6\u662f\u66f4\u53ef\u53d6\u7684\u3002\u7528\u6237\u6570\u91cf\u8d8a\u591a\uff0c\u5e2e\u52a9\u9ad8\u5371\u4eba\u7fa4\u5728\u611f\u67d3\u4ed6\u4eba\u4e4b\u524d\u8fdb\u884c\u81ea\u6211\u9694\u79bb\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u9ad8\u3002\n\u4f46\u5173\u4e8e\u8054\u7cfb\u4eba\u8ffd\u8e2a\u5e94\u7528\u7684\u4e89\u8bba\u5927\u591a\u96c6\u4e2d\u5728\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\u4e0a\uff0c\u5373\u8fbe\u523060%\u7684\u76ee\u6807\u4f3c\u4e4e\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u56f0\u96be-\u7279\u522b\u662f\u56e0\u4e3a\u8bb8\u591a\u4eba(\u5305\u62ec\u975e\u5e38\u5e74\u8f7b\u7684\u7528\u6237\u3001\u5e74\u957f\u7684\u7528\u6237\u548c\u62e5\u6709\u8f83\u8001\u578b\u53f7\u624b\u673a\u7684\u4eba)\u53ef\u80fd\u4e0d\u613f\u610f\u6216\u65e0\u6cd5\u4e0b\u8f7d\u548c\u4f7f\u7528\u6240\u9700\u7684\u8f6f\u4ef6\u3002\n\u8bb8\u591a\u5a92\u4f53\u62a5\u9053\u548c\u5206\u6790\u4e86\u62a5\u544a\u4e2d\u7684\u4e00\u53e5\u8bdd\uff1a\u201c\u6211\u4eec\u7684\u6a21\u578b\u8868\u660e\uff0c\u5982\u679c\u5927\u7ea660%\u7684\u4eba\u53e3\u4f7f\u7528\u8fd9\u6b3e\u5e94\u7528\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u963b\u6b62\u75ab\u60c5\u3002\u201d\n\u4f46\u4ed6\u4eec\u7167\u4f8b\u7701\u7565\u4e86\u540e\u534a\u53e5\u8bdd\uff1a\u201c\u5373\u4f7fAPP\u7528\u6237\u6570\u91cf\u51cf\u5c11\uff0c\u6211\u4eec\u4f30\u8ba1\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u548c\u6b7b\u4ea1\u4eba\u6570\u4ecd\u4f1a\u51cf\u5c11\u3002\u201d\n\u4e8b\u5b9e\u4e0a\uff0c\u725b\u6d25\u6a21\u5f0f\u5b9e\u9645\u4e0a\u8003\u8651\u5230\u4e86\u6279\u8bc4\u8005\u4e00\u76f4\u5173\u6ce8\u7684\u8bb8\u591a\u56e0\u7d20\u3002\u767d\u76ae\u4e66\u8bf4\uff0c\u5982\u679c80%\u7684\u667a\u80fd\u624b\u673a\u7528\u6237\u4e0b\u8f7d\u8fd9\u6b3e\u5e94\u7528-\u8fd9\u4e2a\u6570\u5b57\u6392\u9664\u4e86\u4e0d\u592a\u53ef\u80fd\u62e5\u6709\u667a\u80fd\u624b\u673a\u7684\u7fa4\u4f53\uff0c\u76f8\u5f53\u4e8e\u603b\u4eba\u53e3\u768456%-\u8fd9\u5c06\u8db3\u4ee5\u5355\u72ec\u904f\u5236\u75ab\u60c5\uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u5176\u4ed6\u5f62\u5f0f\u7684\u5e72\u9884\u3002\n\u867d\u7136\u8f83\u4f4e\u7684\u91c7\u7528\u7387\u610f\u5473\u7740\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u4e0d\u4f1a\u6218\u80dc\u8fd9\u79cd\u75be\u75c5\uff0c\u4f46\u8fd9\u5e76\u4e0d\u7b49\u540c\u4e8e\u8ba4\u4e3a\u8f83\u4f4e\u7684\u4f7f\u7528\u7387\u4f1a\u4f7f\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u65e0\u6548\u3002\u76f8\u53cd\uff0c\u7814\u7a76\u4eba\u5458\u8bf4\uff0c\u5982\u679c\u4e0b\u8f7d\u8fd9\u6b3e\u5e94\u7528\u7684\u4eba\u51cf\u5c11\u4e86\uff0c\u5c31\u9700\u8981\u91c7\u53d6\u5176\u4ed6\u9884\u9632\u548c\u904f\u5236\u63aa\u65bd\u3002\u8fd9\u4e9b\u63aa\u65bd\u5305\u62ec\u793e\u4f1a\u8ddd\u79bb\u3001\u5e7f\u6cdb\u7684\u68c0\u6d4b\u3001\u4eba\u5de5\u63a5\u89e6\u8005\u8ffd\u8e2a\u3001\u533b\u7597\u548c\u533a\u57df\u5173\u95ed-\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bb8\u591a\u76f8\u540c\u7684\u8fc7\u7a0b\u5df2\u7ecf\u5728\u4e16\u754c\u5404\u5730\u4f7f\u7528\u3002\n\u725b\u6d25\u5927\u5b66\u7eb3\u83f2\u5c14\u5fb7\u533b\u5b66\u7cfb\u63a5\u89e6\u8005\u8ffd\u8e2a\u9879\u76ee\u7684\u8054\u5408\u8d1f\u8d23\u4eba\u3001\u82f1\u56fd\u653f\u5e9c\u63a5\u89e6\u8005\u8ffd\u8e2a\u52aa\u529b\u7684\u72ec\u7acb\u79d1\u5b66\u987e\u95ee\u514b\u91cc\u65af\u6258\u592b\u00b7\u5f17\u96f7\u6cfd\u6559\u6388\u9886\u5bfc\u4e86\u8fd9\u9879\u7814\u7a76\u3002\u4ed6\u8bf4\uff0c60%\u7684\u6570\u5b57\u4f3c\u4e4e\u6709\u81ea\u5df1\u7684\u60f3\u6cd5\u3002\n\u201c\u8fd9\u8868\u660e\u63a7\u5236\u5a92\u4f53\u53d9\u4e8b\u662f\u591a\u4e48\u56f0\u96be\uff0c\u201d\u4ed6\u8bf4\u3002\n\u4fee\u6b6360%\u7684\u5047\u8bbe\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u63a5\u6536\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\u53ef\u4ee5\u5851\u9020\u56fd\u5bb6\u5e94\u5bf9\u8fd9\u6b21\u5927\u6d41\u884c\u548c\u672a\u6765\u75be\u75c5\u7206\u53d1\u7684\u65b9\u5f0f\u3002\u4eba\u4eec\u666e\u904d\u8ba4\u4e3a\uff0c\u4efb\u4f55\u4f4e\u4e8e\u8fd9\u4e00\u95e8\u69db\u7684\u53c2\u4e0e\u90fd\u5c06\u5bfc\u81f4\u5931\u8d25\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u81f4\u547d\u7684\u9519\u8bef\u3002\n\u4e00\u4e9b\u56fd\u5bb6\u7684\u4f7f\u7528\u7387\u5df2\u7ecf\u8fbe\u5230\u4e86\u76f8\u5f53\u9ad8\u7684\u6c34\u5e73\uff1a\u51b0\u5c9b\u7684\u4f7f\u7528\u7387\u8fbe\u5230\u4e8640%\u5de6\u53f3\uff0c\u800c\u5361\u5854\u5c14\u548c\u571f\u8033\u5176\u7b49\u5176\u4ed6\u56fd\u5bb6\u5219\u5f3a\u5236\u8981\u6c42\u4e0b\u8f7d\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u4f46\u662f\uff0c\u5373\u4f7f\u7814\u7a76\u4eba\u5458\u77e5\u9053\u8f83\u4f4e\u6c34\u5e73\u7684\u91c7\u7528\u5c06\u662f\u6709\u7528\u7684\uff0c\u4ed6\u4eec\u4e5f\u4e0d\u5b8c\u5168\u786e\u5b9a\u4e0d\u540c\u7684\u8303\u56f4\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4ec0\u4e48\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6bcf\u4e00\u6b21\u6210\u529f\u7684\u901a\u77e5\u90fd\u610f\u5473\u7740\u4e00\u6761\u53ef\u80fd\u83b7\u6551\u7684\u751f\u547d\u3002\n\u5f17\u96f7\u6cfd\u8bf4\uff0c\u4ed6\u7684\u56e2\u961f\u66fe\u5047\u8bbe\uff0c\u8f83\u4f4e\u7684\u4f7f\u7528\u91cf\u53ef\u80fd\u4f1a\u5e26\u6765\u975e\u5e38\u5c0f\u7684\u597d\u5904-\u4f46\u5b9e\u9645\u4e0a\uff0c\u6a21\u62df\u663e\u793a\uff0c\u597d\u5904\u6bd4\u4ed6\u4eec\u60f3\u8c61\u7684\u8981\u9ad8\u5f97\u591a\u3002\n\u201c\u4eba\u4eec\u7684\u9884\u671f\u662f\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u4f7f\u7528\u7387\u5728\u4f4e\u6c34\u5e73\u65f6\u4e0d\u4f1a\u5f88\u6709\u6548\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u5982\u679c\u4f60\u670910%\u7684\u4eba\u5728\u4f7f\u7528\u8fd9\u6b3e\u5e94\u7528\uff0c\u90a3\u4e48\u4e24\u4e2a\u4eba\u4e4b\u95f4\u88ab\u68c0\u6d4b\u5230\u63a5\u89e6\u7684\u51e0\u7387\u662f10%\u768410%\uff0c\u4e5f\u5c31\u662f1%--\u8fd9\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u6bd4\u4f8b\u3002\u6211\u4eec\u5728\u6a21\u62df\u4e2d\u53d1\u73b0\uff0c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u6211\u4eec\u4e00\u76f4\u5728\u52aa\u529b\u7406\u89e3\u4e3a\u4ec0\u4e48\u6211\u4eec\u5b9e\u9645\u4e0a\u770b\u5230\u4e86\u4f7f\u7528\u5e26\u6765\u7684\u597d\u5904\u3002\u201c\u3002\n\u5f17\u96f7\u6cfd\u8fd8\u4e3b\u5f20\u6301\u7eed\u76d1\u63a7\u548c\u5ba1\u8ba1\u8fd9\u6b3e\u5e94\u7528\u7684\u529f\u80fd\uff0c\u8fd9\u6837\u5b83\u5c31\u80fd\u505a\u5230\u627f\u8bfa\u7684\u4e8b\u60c5\u3002\n\u4ed6\u9884\u6d4b\uff0c\u5373\u4f7f\u5b83\u672c\u8eab\u4e0d\u80fd\u5e73\u606f\u65b0\u51a0\u80ba\u708e\uff0c\u6570\u5b57\u63a5\u89e6\u8005\u8ffd\u8e2a\u4e5f\u5c06\u662f\u5bf9\u6297\u672a\u6765\u75be\u75c5\u7206\u53d1\u7684\u6218\u7565\u7684\u4e00\u90e8\u5206\u3002\u5982\u679cCovid-19\u9700\u8981\u6570\u5e74\u7684\u65f6\u95f4\u624d\u80fd\u5f97\u5230\u63a7\u5236\uff0c\u5982\u679c\u672a\u6765\u51e0\u5e74\u8fd8\u4f1a\u6709\u5176\u4ed6\u5927\u6d41\u884c\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5b66\u5230\u7684\u6559\u8bad\u5c06\u662f\u503c\u5f97\u7684\u3002\n\u5f17\u96f7\u6cfd\u8bf4\uff1a\u201c\u6211\u4eec\u77e5\u9053\uff0c\u516c\u5171\u536b\u751f\u5b8c\u5168\u662f\u4e3a\u4e86\u5efa\u7acb\u4fe1\u4efb\u3002\u201d\u201c\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5efa\u7acb\u4e00\u4e2a\u8ba9\u4eba\u4eec\u77e5\u9053\u6570\u636e\u6b63\u5728\u88ab\u6c38\u4e45\u5171\u4eab\u7684\u73af\u5883\u5462\uff1f\u4eba\u4eec\u5bb3\u6015\u6570\u636e\u88ab\u6ee5\u7528\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u6570\u5b57\u7a7a\u95f4\u4e2d\u770b\u5230\u7684\u3002\u6211\u4eec\u5982\u4f55\u5728\u9f13\u52b1\u79ef\u6781\u4f7f\u7528\u6570\u636e\u7684\u540c\u65f6\u5236\u6b62\u6ee5\u7528\uff1f\u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u9886\u57df\u3002\u505a\u597d\u4e8b\u7684\u529b\u91cf\u968f\u7740\u6211\u4eec\u5171\u4eab\u4fe1\u606f\u800c\u589e\u52a0\uff0c\u4f46\u6211\u4eec\u9700\u8981\u6846\u67b6\u3002\u201c", "note_en": "With dozens of digital contact tracing apps already rolled out worldwide, and many more on the way, how many people need to use them for the system to work? One number has come up over and over again: 60%.\n  That\u2019s the percentage of the population that many public health authorities documented by  MIT Technology Review\u2019s Covid Tracing Tracker say they are targeting as they attempt to protect their communities from covid-19. The number is taken from an Oxford University study released in April. But since no nation has reached such levels, many have criticized \u201cexposure notification\u201d technologies as essentially worthless.\n  But the researchers who produced  the original study say their work has been profoundly misunderstood, and that in fact much lower levels of app adoption could still be vitally important for tackling covid-19.\n  \u201cThere\u2019s been a lot of misreporting around efficacy and uptake \u2026 suggesting that the app only works at 60%\u2014which is not the case,\u201d\u00a0 says Andrea Stewart, a spokeswoman for the Oxford team. In fact, she says, \u201cit starts to have a protective effect\u201d at \u201cmuch lower levels.\u201d\n  The Oxford models found that &#34;the app has an effect at all levels of uptake&#34; as illustrated by this graph which shows every level of adoption slowing to pandemic to some extent.\n      Because of the way such digital contacting tracing and exposure notification apps work\u2014by notifying users if their phone has been in proximity to the phone of somebody who later gets a diagnosis of covid-19\u2014blanket coverage is preferable. The greater the number of users, the higher the likelihood that it will help at-risk people to self-quarantine before they can infect others.\n  But much of the debate over contact tracing apps has focused on the fact that reaching the 60% target seems almost impossibly difficult\u2014especially because many people (including very young users, older users, and those with older model phones) may be unwilling or unable to download and use the software required.\n  Many media reports and analyses picked up on one sentence of the report that states: \u201cOur models show we can stop the epidemic if approximately 60% of the population use the app.\u201d\n  But they have routinely omitted the second half of the sentence: \u201cEven with lower numbers of app users, we still estimate a reduction in the number of coronavirus cases and deaths.\u201d\n  In fact, the Oxford model actually takes into account many of the factors that critics have been concerned about. The paper says that if 80% of all smartphone users download the app\u2014a number that excludes groups less likely to have a smartphone and is equivalent to 56% of the overall population\u2014this would be enough to suppress the pandemic on its own, without any other form of intervention.\n  While lower rates of adoption mean such apps won\u2019t beat the disease on their own, that is not the same as suggesting that lower usage makes the apps ineffective. Instead, if fewer people download the app, say the researchers, other prevention and containment measures will be required. These include social distancing, widespread testing, manual contact tracing, medical treatment, and regional shutdowns\u2014that is, many of the same processes already being used around the world.\n  Professor Christophe Fraser, co-lead on the contact tracing program at Oxford University\u2019s Nuffield Department of Medicine and an independent scientific advisor to the UK government\u2019s contact tracing efforts, led the research. He says the 60% figure seems to have a mind of its own.\n  \u201cThat goes to show how difficult it is to control the media narrative,\u201d he says.\n    Correcting the 60% assumption is important because the way apps are received can shape the way nations respond to both this pandemic and future disease outbreaks. Widespread belief that any participation below that threshold will result in failure could be a fatal mistake.\n  Some countries have reached significant levels of adoption:  Iceland has achieved around 40% usage, while others such as Qatar and Turkey have made downloading their apps mandatory.\n  But even though the researchers know that lower levels of adoption will be useful, they aren\u2019t entirely sure what different ranges will actually mean. Still, every successful notification means a life potentially saved.\n  Fraser says his team had assumed that lower levels of usage might have very small benefits\u2014but that, in fact, simulations show the upsides are significantly higher than they thought.\n  \u201cThe expectation going in was that app usage wouldn\u2019t be very effective at low levels,\u201d he says. \u201cIf you have 10% of people using the app, then the chance of contact between two people being detected is 10% of 10%, which is 1%\u2014a tiny fraction. What we found in the simulation was that that actually isn\u2019t the case. We\u2019ve been working to understand why we actually see benefits of usage accruing.\u201d\n  Fraser also advocates continuously monitoring and auditing the functioning of the app so that it does what promises.\n  And even if it doesn\u2019t quell covid-19 on its own, digital contact tracing will be a part of the strategy against future disease outbreaks, he predicts. The lessons we learn here will pay off if covid-19 takes years to control, and if there are other pandemics in years to come.\n  \u201cWe know that public health is all about building trust,\u201d Fraser says. \u201cSo how do we build an environment where people know that the data is being shared for good? People fear misuse of data, which we\u2019ve seen in the digital space. How do we stop misuse while encouraging positive use of data? This is clearly an important area. The power to do good things increases as we share information, but we need frameworks.\u201d", "posttime": "2020-06-09 00:58:03", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7a0b\u5e8f,coronavirus,\u75c5\u6bd2,app,\u51a0\u72b6\u75c5\u6bd2", "title": "\u51a0\u72b6\u75c5\u6bd2\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9700\u898160%\u7684\u91c7\u7528\u7387\u5373\u53ef\u751f\u6548", "title_en": "Coronavirus Apps Don't Need 60% Adoption To Be Effective", "transed": 1, "url": "https://www.technologyreview.com/2020/06/05/1002775/covid-apps-effective-at-less-than-60-percent-download/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u75c5\u6bd2", "app", "\u51a0\u72b6\u75c5\u6bd2"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005726, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u63cf\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528nixpkgs\u3001niv\u548clori\u4e3a\u53ef\u91cd\u73b0\u7684R\u5de5\u4f5c\u6d41\u8bbe\u7f6e\u900f\u660e\u7684\u81ea\u52a8\u8bbe\u7f6e\u3002\u6574\u7bc7\u6587\u7ae0\u4e2d\u4f7f\u7528\u7684\u89e3\u91ca\u4f8b\u5b50\u4e4b\u4e00\u662f\u5efa\u7acb\u53cd\u601d\u5305\uff0c\u5e76\u5217\u4e3e\u7406\u67e5\u5fb7\u00b7\u9ea6\u514b\u96f7\u601d(Richard McElreath)\u4f18\u79c0\u7684\u7b2c\u4e8c\u7248\u201c\u7edf\u8ba1\u53cd\u601d\u201d\u4e2d\u7684\u4e00\u4e9b\u4f8b\u5b50\u3002\n\u6b63\u5982\u5728\u524d\u9762\u7684\u5e16\u5b501\u4e2d\u8be6\u7ec6\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u6211\u5df2\u7ecf\u8bbe\u7f6e\u4e86NIX\u6765\u5904\u7406\u975ecran\u5305\u3002\u5982\u679c\u8fd9\u4e00\u8282\u7684\u5176\u4f59\u90e8\u5206\u4e0d\u6e05\u695a\uff0c\u8bf7\u56de\u8fc7\u5934\u6765\u53c2\u8003\u524d\u9762\u7684\u5e16\u5b50\u3002\n#shell.nix{pkgs\uff1fimport&lt\uff1bnixpkgs&gt\uff1b{}}\uff1awith pkgs\uff1blet my-r-pkgs=rWrapper\u3002\u8986\u76d6{Packages=with rPackages\uff1b[ggplot2 tidyverse tidybayes tidybayes.\u3002\u91cd\u65b0\u601d\u8003(buildRPackage{Name=&#34\uff1bresiking&#34\uff1b\uff1bsrc=fetchFromGitHub{Owner=&#34\uff1brmcelreath&#34\uff1b\uff1brepo=&#34\uff1brev=&#34\uff1bd0978c7f8b6329b94efa2014658d750ae12b1fa2&#34\uff1b\uff1bsha256=&#34\uff1b1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0&#34\uff1b\uff1b}\uff1bPropagatedBuildInput=[\u5c3e\u5df4\u8d28\u91cfmvtnorm loo form rstan dagitty]\uff1b})\uff1b}\uff1b\u5728mkShell{buildInput=\u3002[\u6253\u5f00\u5377\u66f2\u7684git glibcLocales OpenSSL]\uff1binputsFrom=[my-r-pkgs]\uff1bshellHook=&#39\uff1b&#39\uff1bmkdir-p&#34\uff1b$(Pwd)/_libs&#34\uff1bexport R_Libs_user=&#34\uff1b$(Pwd)/_libs&#34\uff1b&#39\uff1b&#39\uff1b\uff1bgit_SSL_CAINFO=&#34\uff1blocale_archive=stdenv\u3002\u5229\u5e03\u3002optionalString stdenv.\u3002isLinux&#34\uff1b${glibcLocales}/lib/locale/locale-archive&#34\uff1b\uff1b}\u3002\n\u4e0d\u540c\u4e8enpm\u3001pipeenv\u3001potile\u3001conda\u548cFriends\uff0c\u6211\u7684\u7cfb\u7edf\u4e0d\u4f1a\u56e0\u4e3a\u6bcf\u6b21\u5728\u4e0d\u540c\u9879\u76ee\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u5305\u800c\u4e0b\u8f7d\u548c\u8bbe\u7f6e\u800c\u53d8\u5f97\u81c3\u80bf\u3002\n\u7136\u800c\uff0c\u867d\u7136\u8fd9\u662f\u4ece\u94fe\u63a5\u5230RStudio\u548cmysystem\u5305\u7ba1\u7406\u5668\u8fc8\u51fa\u7684\u91cd\u8981\u4e00\u6b65\uff0c\u4f46\u662f\u8fd9\u4e2a\u5de5\u4f5c\u6d41\u5982\u4f55\u53ef\u91cd\u73b0\u53ef\u80fd\u8fd8\u4e0d\u662f\u5f88\u660e\u663e\u3002\u8bda\u7136\uff0c\u6211\u5df2\u7ecf\u4ee5\u4e00\u79cd\u5f88\u597d\u7684\u529f\u80fd\u65b9\u5f0f\u5b9a\u4e49\u4e86\u6211\u7684\u5305\uff1b\u4f46\u662f\u5176\u4ed6\u4eba\u53ef\u80fd\u6709\u4ed6\u4eec\u6b63\u5728\u8ddf\u8e2a\u7684\u4e0d\u540c\u7684\u4e0a\u884c\u901a\u9053\uff0c\u56e0\u6b64\u4f1a\u6709\u4e0d\u540c\u7684\u5305\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u552f\u4e00\u80fd\u786e\u5b9a\u7684\u5305\u5c31\u662f\u6211\u4eceGithub\u6784\u5efa\u7684R\u5305\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5305\u90fd\u7ed1\u5b9a\u5230\u4e00\u4e2a\u6563\u5217\u4e0a\u3002\u6700\u540e\uff0c\u4e3a\u6bcf\u4e2a\u9879\u76ee\u63cf\u8ff0\u7684\u8bbe\u7f6e\u90fd\u975e\u5e38\u7e41\u7410\uff0c\u800c\u4e14\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u5982\u4f55\u5229\u7528\u50cfdirenv\u8fd9\u6837\u7684\u5947\u5999\u5de5\u5177\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u7cbe\u660e\u7684\u8bfb\u8005\u4f1a\u6ce8\u610f\u5230\uff0c\u6211\u63d0\u5230\u8fc7R\u5305\u662f\u53ef\u91cd\u73b0\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e\u6563\u5217\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u5408\u7406\u5730\u4e89\u8fa9\u8bf4\uff0c\u6574\u4e2aNix\u751f\u6001\u7cfb\u7edf\u9996\u5148\u662f\u5173\u4e8e\u6563\u5217\u7684\u3002\u4e00\u65e6\u6211\u4eec\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5269\u4e0b\u7684\u5c31\u76f8\u5bf9\u7b80\u5355\u4e863\u3002\nNiv\u57fa\u672c\u4e0a\u8ddf\u8e2a\u6240\u6709\u8f6f\u4ef6\u5305\u7684\u5b89\u88c5\u901a\u9053\u3002\u8bbe\u7f6e\u975e\u5e38\u7b80\u5355\u3002\n\u8ba9Sources=import./nix/Soures.nix\uff1bpkgs=\u5bfc\u5165\u6e90\u3002nixpkgs{}\uff1bstdenv=pkgs\u3002stdenv\uff1bmy-r-pkgs=pkgs\u3002rWrapper\u3002\u7528Pkgs\u8986\u76d6{Packages=\u3002rPackages\uff1b[ggplot2 tidyverse tidybayes]\uff1b}\uff1b\u5355\u4f4d\u4e3apkgs\u3002mkShell{buildInput=with pkgs\uff1b[git glibcLocales OpenSSL\uff0c\u6253\u5f00\u5377\u66f2wget my-r-pkgs]\uff1bshellHook=&#39\uff1b&#39\uff1bmkdir-p&#34\uff1b$(Pwd)/_libs&#34\uff1bexport R_Libs_user=&#34\uff1b$(Pwd)/_libs&#34\uff1b&#39\uff1b&#39\uff1b\uff1bgit_SSL_CAINFO\u3002cacert}/etc/ssl/certs/ca-bundle.crt&#34\uff1b\uff1blocale_archive=stdenv\u3002\u5229\u5e03\u3002optionalString stdenv.\u3002\u662fLinux&#34\uff1b${pkgs\u3002glibcLocales}/lib/locale/locale-archive&#34\uff1b\uff1b}\n\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u68c0\u67e5\u548c\u7f16\u8f91\u8fd9\u4e9b\u6e90\u4ee3\u7801\uff0c\u4f46\u5f53\u6211\u4eec\u9700\u8981\u66f4\u65b0\u8fd9\u4e9b\u6e90\u4ee3\u7801\u65f6\uff0c\u7b80\u5355\u5730\u518d\u6b21\u4f7f\u7528Niv\u8981\u65b9\u4fbf\u5f97\u591a\u3002\n\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u6211\u4eec\u6709\u4e00\u7ec4\u53ef\u91cd\u73b0\u7684\u8f6f\u4ef6\u5305\u53ef\u4f9b\u4f7f\u7528\u3002\u7136\u800c\uff0c\u8fd9\u4ecd\u7136\u662f\u76f8\u5f53\u607c\u4eba\u7684\uff0c\u4e0d\u5f97\u4e0d\u7ecf\u5386\u7f16\u5199nx-shell\u7684\u9ebb\u70e6\uff0c\u5e76\u4e14\u5728\u6211\u4eec\u6539\u53d8\u4e8b\u60c5\u7684\u65f6\u5019\u7b49\u5f85\u5b83\u91cd\u65b0\u6784\u5efa\u3002\n\u5728\u8fc7\u53bb\uff0c\u6211\u5bf9\u8fea\u4f26\u592b\u7684\u94a6\u4f69\u662f\u975e\u5e38\u660e\u786e\u7684(\u7279\u522b\u662f\u5bf9\u87d2\u86c7\u8bd7)\u3002\u7136\u800c\uff0c\u5c3d\u7ba1direnv\u786e\u5b9e\u5141\u8bb8\u6211\u4eec\u5728\u9879\u76ee\u4e2d\u5305\u542b\u4efb\u610f\u7684bash\u903b\u8f91\uff0c\u4f46\u662f\u5982\u679c\u6709\u4e00\u4e9b\u53ef\u4ee5\u9ed8\u8ba4\u4e3anix\u7684\u4e1c\u897f\u5c31\u597d\u4e86\u3002\u8c22\u5929\u8c22\u5730\uff0cTweagIO\u7684\u4eba\u4eec\u5f00\u53d1\u4e86Lorri\u6765\u6320\u75d2\u3002\n\u6211\u4eec\u53ef\u4ee5\u5e76\u4e14\u5e94\u8be5\u68c0\u67e5Lorri\u5e0c\u671b\u6211\u4eec\u4f7f\u7528direnv\u6587\u4ef6\u52a0\u8f7d\u7684\u73af\u5883\uff1a\n\u8fd9\u672c\u8eab\u5e76\u4e0d\u662f\u592a\u5177\u63cf\u8ff0\u6027\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u9996\u5148\u81ea\u5df1\u8fd0\u884c\u3002\nEVALUATION_ROOT=&#34\uff1b$HOME/.cache/lorri/gc_roots/407bd4df60fbda6e3a656c39f81c03c2/gc_root/shell_gc_root&#34\uff1bwatch_file&#34\uff1b/run/user/1000/lorri/daemon.socket&#34\uff1bwatch_file&#34\uff1b$EVALUATION_ROOT&#34\uff1b#\uff01/usr/bin/env bash#^shebang\u672a\u4f7f\u7528\uff0c\u56e0\u4e3a\u6b64\u6587\u4ef6\u662f\u6e90\u6587\u4ef6\uff0c\u4f46\u5b58\u5728\u4e8e\u7f16\u8f91\u5668#\u96c6\u6210\u4e2d\u3002\u6ce8\u610f\uff1aDirenv\u4fdd\u8bc1\u5b83*\u5c06*\u4f7f\u7528bash\u8fdb\u884c\u89e3\u6790\u3002Function Punt(){\uff1a}#Move&#34\uff1bOrigPreHook&#34\uff1b&#34\uff1bpreHook&#34\uff1b&#34\uff1b$@&#34\uff1b\uff1bMove(){srcvarname=$1#\u793a\u4f8b\uff1avarname\u53ef\u80fd\u5305\u542b\u5b57\u7b26\u4e32&#34\uff1bOrigPATH&#34\uff1b#\u5220\u9664\u6e90\u53d8\u91cf\u540d\u79f0Shift destvarname=$1#\u793a\u4f8b\uff1adestvarname\u53ef\u80fd\u5305\u542b\u5b57\u7b26\u4e32&#34\uff1bpath&#34\uff1b#\u5220\u9664\u76ee\u6807\u53d8\u91cf\u540d\u79f0Shift#\u3002.SOME-VALUE.&#34\uff1bexport&#34\uff1b${@\uff1f}&#34\uff1b\uff1b#\u5c06$Original\u8bbe\u7f6e\u4e3a\u53d8\u91cf$srcvarname\u7684\u5185\u5bb9#\u8868\u793aeval&#34\uff1b$destvarname=\\&#34\uff1b${\uff01srcvarname}\\&#34\uff1b&#34\uff1b#\u5c06\u76ee\u6807\u53d8\u91cf\u540d\u79f0\u6807\u8bb0\u4e3a\u5df2\u5bfc\u51fa\uff0c\u4ee5\u4fbfdirenv\u62fe\u53d6\u5b83#(shellcheck\uff1a\u6211\u4eec\u786e\u5b9e\u8981\u5bfc\u51fadestvarname\uff01\u7684\u5185\u5bb9)#shellcheck Disable=SC2163\u3002#\u4ece\u4e0a\u9762\u79fb\u9664\u5bfc\u51fa\uff0c\u5373\uff1aexport OrigPATH.\u3002unset&#34\uff1b$srcvarname&#34\uff1b}\u51fd\u6570pretiend(){varname=$1#\u793a\u4f8b\uff1avarname\u53ef\u80fd\u5305\u542b\u5b57\u7b26\u4e32&#34\uff1bpath&#34\uff1b#\u5220\u9664varname\u79fb\u4f4d\u5206\u9694\u7b26=$1#\u793a\u4f8b\uff1a\u5206\u9694\u7b26\u901a\u5e38\u662f\u5b57\u7b26\u4e32&#34\uff1b\uff1a&#34\uff1b#\u5220\u9664\u5206\u9694\u7b26\u53c2\u6570\uff0c\u56e0\u6b64\u5269\u4f59\u7684\u53c2\u6570#\u662f\u8981\u5bfc\u51faShift\u7684\u53c2\u6570#\u5c06$Original\u8bbe\u7f6e\u4e3a\u53d8\u91cf$varname#\u5f15\u7528Original=&#34\uff1b$\u3002#\u6709\u6548\u63a5\u53d7\u65b0\u53d8\u91cf\u7684\u5185\u5bb9\u5bfc\u51fa(#34\uff1b${@\uff1f}&#34\uff1b\uff1b#\u5c06$varname\u7684\u53d8\u91cf\u91cd\u65b0\u8bbe\u7f6e\u4e3avarname#\u5f15\u7528\u7684\u5185\u5bb9\uff0c\u4ee5\u53ca\u5f53\u524d(\u5728\u5bfc\u51fa\u65f6\u66f4\u65b0\u7684)\u5185\u5bb9\u3002#\u4f46\u662f\uff0c\u9664\u975e${Original}\u4ee5\u503ceval&#34\uff1b$varname=${\uff01varname}${Original\uff1a+${Separator}${Original}}&#34\uff1b}\u51fd\u6570append(){varname=$1#\u793a\u4f8b\uff1avarname\u53ef\u80fd\u5305\u542b\u5b57\u7b26\u4e32&#34\uff1bpath&#34\uff1b#\u5220\u9664varname\u79fb\u4f4d\u5206\u9694\u7b26=$1#\u793a\u4f8b\uff1a\u5206\u9694\u7b26\u901a\u5e38\u662f\u5b57\u7b26\u4e32&#34\uff1b\uff1a&#34\uff1b#\u5220\u9664\u5206\u9694\u7b26\u53c2\u6570\uff0c\u56e0\u6b64\u5269\u4f59\u7684\u53c2\u6570#\u662f\u8981\u5bfc\u51faShift\u7684\u53c2\u6570#\u5c06$Original\u8bbe\u7f6e\u4e3a\u53d8\u91cf$varname\u7684\u5185\u5bb9#\u5f15\u7528\u539f\u59cb=&#34\uff1b${\uff01varname\uff1a-}&#34\uff1b#\u6709\u6548\u63a5\u53d7\u65b0\u53d8\u91cf\u7684\u5185\u5bb9export&#34\uff1b${@\uff1f}&#34\uff1b\uff1b#\u5c06$varname\u7684\u53d8\u91cf\u91cd\u65b0\u8bbe\u7f6e\u4e3avarname#\u5f15\u7528\u7684\u5185\u5bb9\uff0c\u52a0\u4e0a\u5f53\u524d(\u5bfc\u51fa\u65f6\u66f4\u65b0\u7684)\u5185\u5bb9\u3002#\u4f46\u662f\uff0c\u9664\u975e${Original}\u4ee5\u503ceval&#34\uff1b$varname=${Original\uff1a+${Original}${Separator}}${varname}&#34\uff1b}varmap(){if[-f&#34\uff1b$EVALUATION_ROOT/varmap-v1&#34\uff1b]\uff1bTHEN#\u6355\u83b7\u6b63\u5728\u8bbe\u7f6e\u7684\u53d8\u91cf\u7684\u540d\u79f0IFS=&#34\uff1b=&#34\uff1bRead-r-a cur_varname&lt\uff1b&\uff0c\u5426\u5219\u8bf7\u6392\u9664${parator}\uff1bTHEN#\u6355\u83b7\u6b63\u5728\u8bbe\u7f6e\u7684\u53d8\u91cf\u7684\u540d\u79f0IFS=&#34\uff1b=&#34\uff1bREAD-r-a cur_varname&lt\uff1b&\u3002&#34\uff1b$1&#34\uff1b#\u5728IFS=&#39\uff1b&#39\uff1b\u548c`read`\u5206\u9694\u7b26\u4e3a&#39\uff1b&#39\uff1b\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86#\u62c6\u5206\\0\u5b57\u8282\uff0c\u540c\u65f6\u8fd8\u4fdd\u7559\u4e86\u524d\u5bfc#\u7a7a\u683c\uff1a##bash-3.2$printf&#39\uff1b&lt\uff1b-\u524d\u5bfc\u7a7a\u683c\\0bar\\0baz\\0&#39\uff1b\\#|(While IFS=&#39\uff1b&#39\uff1bread-d$&#39\uff1b\\0&#39\uff1b&#34\uff1b\uff1b\u5b8c\u6210)#&gt\uff1b&lt\uff1b-\u524d\u5bfc\u7a7a\u683c&lt\uff1b#&gt\uff1bbar&lt\uff1b#&gt\uff1bbaz&lt\uff1b`\u800cIFS=&#39\uff1b&#39\uff1bread-r-d&&amp\uff1b&amp\uff1bIFS=&#39\uff1b&amp\uff1b&amp\uff1bIFS=&#39\uff1b&39\uff1bmap_Variable\\&amp\uff1b&amp\uff1bIFS=&#39\uff1b\u5982\u679c[&#34\uff1b$MAP_VARIABLE&#34\uff1b==&#34\uff1b${CUR_varname[0]}&#34\uff1b]\uff1b\u5219\u5982\u679c[&#34\uff1b$MAP_INSTRUCTION&#34\uff1b==&#34\uff1bAPPEND&#34\uff1b]\uff1b\u5219\u9644\u52a0&#34\uff1b$MAP_VARIABLE&#34\uff1b&#34\uff1b$MAP_SECTOR&#34\uff1b&#34\uff1b$@&#34\uff1b\u8fd4\u56deFI\u5b8c\u6210&lt\uff1b&#34\uff1b$EVALUATION_ROOT/varmap-v1&#34\uff1bFI EXPORT&#34\uff1b${@\uff1f}&#34\uff1b}\u51fd\u6570DECLARE(){IF[&#34\uff1b$1&#34\uff1b==&#34\uff1b-x&#34\uff1b]\uff1b\u7136\u540eSHIFT\uff1bFI#\u67d0\u4e9b\u53d8\u91cf\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002##-Punt\uff1a\u6839\u672c\u4e0d\u8981\u8bbe\u7f6e\u53d8\u91cf#-Prepend\n\u6b63\u5982\u627f\u8bfa\u7684\u90a3\u6837\uff0c\u6211\u4eec\u5c06\u9996\u5148\u6d4b\u8bd5\u8bbe\u7f6e\u4ee5\u786e\u4fdd\u4e00\u5207\u6b63\u5e38\u3002\u73b0\u5728\u4e5f\u662f\u5c1d\u8bd5tidybayes\u7684\u597d\u65f6\u673a\u3002\u91cd\u65b0\u601d\u8003\u5957\u9910\u3002\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5b9a\u4e49\u91cd\u65b0\u601d\u8003\u5305\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4f20\u9012\u7ed9buildInput\u4ee5\u7528\u4e8etidybay.reink\u3002\u6211\u4eec\u5c06\u4fee\u6539\u65b0\u7684shell.nix\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n#shell.nix let Sources=import./nix/Soures.nix\uff1bpkgs=\u5bfc\u5165\u6e90\u3002nixpkgs{}\uff1bstdenv=pkgs\u3002\u91cd\u65b0\u601d\u8003=\u7528pkgs\u3002rPackages\uff1bbuildRPackage{name=&#34\uff1bresiking&#34\uff1b\uff1bsrc=pkgs\u3002fetchFromGitHub{Owner=&#34\uff1brmcelreath&#34\uff1b\uff1brepo=&#34\uff1b\uff1brev=&#34\uff1bd0978c7f8b6329b94efa2014658d750ae12b1fa2&#34\uff1b\uff1bsha256=&#34\uff1b1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0&#34\uff1b\uff1b}\uff1bpagatedBuildInput=[\u5c3e\u90e8\u8d28\u91cfmvtnorm loo form rstan dagitty]\uff1b}\uff1btidybayes_reink=with pkgs\u3002rPackages\uff1bbuildRPackage{name=&#34\uff1btidybayes.reessing&#34\uff1b\uff1bsrc=pkgs\u3002fetchFromGitHub{Owner=&#34\uff1bmjskay&#34\uff1b\uff1brepo=&#34\uff1btidybayes.resiking&#34\uff1b\uff1brev=&#34\uff1bdf903c88f4f4320795a47c616eef24a690b433a4&#34\uff1b\uff1bsha256=&#34\uff1b1jl3189zdddmwm07z1mk58hcahirqrwx211ms0i1rzbx5y4zak0c&#34\uff1b\uff1b}\uff1bpagatedBuildInput=[dplyr Tibble rlang mass tidybayes reessing rstan]\uff1b}\uff1brEnv=pkgs\u3002rWrapper\u3002\u7528Pkgs\u8986\u76d6{Packages=\u3002rPackages\uff1b[ggplot2 tidyverse tidybayes DevTools model r curlot ggrepel RColorBrewer purrr forcats rstan reessing tidybayes_reink]\uff1b}\uff1b\u4ee5pkgs\u4e3a\u5355\u4f4d\u3002mkShell{buildInput=with pkgs\uff1b[git glibcLocales\u5176\u4e2d]\uff1binputsFrom=[rEnv]\uff1bshellHook=&#39\uff1b&#39\uff1bmkdir-p&#34\uff1b$(Pwd)/_libs&#34\uff1bexport R_Libs_user=&#34\uff1b$(Pwd)/_libs&#34\uff1b&#39\uff1b&#39\uff1bgit_SSL_CAINFO=&#34\u3002cacert}/etc/ssl/certs/ca-bundle.crt&#34\uff1b\uff1blocale_archive=stdenv\u3002\u5229\u5e03\u3002optionalString stdenv.\u3002\u662fLinux&#34\uff1b${pkgs\u3002glibcLocales}/lib/locale/locale-archive&#34\uff1b\uff1b}\u3002\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u4e3b\u8981\u5185\u5bb9\u662f\uff0c\u6211\u4eec\u9700\u8981\u6d3e\u751fWeCreate\u7684\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528inputsFrom\u800c\u4e0d\u662fbuildInput\u4f5c\u4e3arEnv\u3002\n\u5e93(Magrittr)\u5e93(Dplyr)\u5e93(Purrr)\u5e93(Forcats)\u5e93(Tidyr)\u5e93(Delyr)\u5e93(Tidybayes)\u5e93(tidybayes.resiking)\u5e93(Ggplot2)\u5e93(Ventlot)\u5e93(Rstan)\u5e93(Reink)\u5e93(Ggrepel)\u5e93(RColorBrewer)heme_set(heme_tidybayes())rstan_options(auto_write=true)\u9009\u9879(mc.co.\u3002\uff0c&#34\uff1bB&#34\uff1b\uff0c&#34\uff1bC&#34\uff1b\uff0c&#34\uff1bD&#34\uff1b\uff0c&#34\uff1bE&#34\uff1b)\uff0cn)\uff0c\u54cd\u5e94=rNorm(n*5\uff0cc(0\uff0c1\uff0c2\uff0c1\uff0c-1)\uff0c0.5))mtcar_lean=mtcars%&gt\uff1b\u53d8\u5f02\u767e\u5206\u6bd4(cyl=factor(Cyl))m_cyl=ulam(ist(cyl~dordlogit(phi\uff0ccutpoint)\uff0cphi&lt\uff1b-b_mpg*mpg\uff0cb_mpg~Student_t(3\uff0c0\uff0c10)\uff0ccutpoint~Student_t(3\uff0c0\uff0c10))\uff0cdata=mtars_lean\uff0cChains=4\uff0cCores=Parallel\uff1a\uff1aDetectCores()\uff0cITER=2000)\u3002%Swing_Draw(cutpoint[cyl])#\u5b9a\u4e49\u6700\u540e\u4e00\u4e2a\u5207\u5272\u70b9LAST_Cutpoint=Tibble(.raw=1\uff1amax(\u5207\u5272\u70b9$.raw)\uff0ccyl=&#34\uff1b8&#34\uff1b\uff0ccutpoint=inf)\u5207\u5272\u70b9=BIND_ROWS(\u5207\u5272\u70b9\uff0cLAST_Cutpoint)%&gt\uff1b%#\u5b9a\u4e49\u4e0a\u4e00\u4e2a\u5207\u5272\u70b9(cutpoint_{j-1})group_by(.raw)%&gt\uff1b%arrange(Cyl)%&gt\uff1b%mudiate(prev_cutpoint=LAG(cutpoint\uff0c\u9ed8\u8ba4\u503c=-inf))fitted_cyl_pros=mtars_clee%&gt\uff1b%data_grid(mpg=seq_range(mpg\uff0cn=101))%&gt\uff1b%add_fit_tracts(M_Cyl)%&gt\uff1b%INNER_JOIN(cutpoints\uff0cby=&#34\uff1b.raw&#34\uff1b)%&gt\uff1b%mugiate(`P(cyl|mpg)`=#\u6b64\u90e8\u5206\u4e3alogit^-1(cutpoint_j-beta*x)-logit^-1(cutpoint_{j-1}-beta*x)plogis(cutpoint-.value)-plogis(prev_cutpoint-.value))data_lot=mtcar_cle%&gt\uff1b%gglot(aes(x=mpg\uff0cy=cyl\uff0ccolor=cyl))+geom\u3002\uff0cname=&#34\uff1bcyl&#34\uff1b)fit_lot=fit_cyl_pros%&gt\uff1b%gglot(aes(x=mpg\uff0cy=`P(cyl|mpg)`\uff0ccolor=cyl))+stat_lineribbon(AES(Fill=cyl)\uff0calpha=1/5)+scale_color_brewer(\u8c03\u8272\u677f=&#34\uff1b\u6df1\u82722&34\uff1b)+scale_ill_brewer(\u8c03\u8272\u677f=&\u3002../image/rethinking.png&#34\uff1b)PLOT_GRID(nol=1\uff0cAlign=&#34\uff1bv&#34\uff1b\uff0cData_Plot\uff0cFit_Plot)dev.off\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u5b9e\u9645\u4e0a\u66f4\u591a\u7684\u662f\u5bf9\u524d\u4e00\u7bc7\u6587\u7ae0\u7684\u63a2\u7d22\u6027\u8ddf\u8fdb\uff0c\u5e76\u4e0d\u662f\u771f\u6b63\u5b64\u7acb\u5730\u5de5\u4f5c\u3002\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4e00\u5207\u4f3c\u4e4e\u90fd\u8fdb\u884c\u5f97\u5f88\u597d\u3002R\u548cNIX\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u79cd\u771f\u6b63\u53ef\u884c\u7684\u7ec4\u5408\uff0c\u53ef\u4ee5\u5728\u9633\u5149\u4e0b\u8fdb\u884c\u4efb\u4f55\u5206\u6790\u3002\u5de5\u4f5c\u6d41\u7a0b\u7684\u67d0\u4e9b\u90e8\u5206\u4ecd\u7136\u6709\u70b9\u4e0d\u7a33\u5b9a\uff0c\u4f46\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53ef\u80fd\u4f1a\u81ea\u884c\u89e3\u51b3\u3002\n\u6211\u7684\u52a8\u673a\u88ab\u5217\u51fa\u6765\u4e86\uff0c\u6211", "note_en": "This post describes how to set up a transparent automated setup for reproducible R workflows using  nixpkgs,  niv, and  lorri. The explanatory example usedthroughout the post is one of setting up the  rethinking package and runningsome examplesfrom the  excellent second edition of \u201cStatisticalRethinking\u201d by  Richard McElreath.\n  As detailed  in an earlier post  1, I had set up Nix to work withnon-CRAN packages. If the rest of this section is unclear, please refer back to  the earlier post.\n     # shell.nix {  pkgs  ?  import  &lt;nixpkgs&gt;  {  }  }: with  pkgs ; let  my-r-pkgs  =  rWrapper . override  {  packages  =  with  rPackages ;  [  ggplot2  tidyverse  tidybayes  tidybayes . rethinking  ( buildRPackage  {  name  =  &#34;rethinking&#34; ;  src  =  fetchFromGitHub  {  owner  =  &#34;rmcelreath&#34; ;  repo  =  &#34;rethinking&#34; ;  rev  =  &#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2&#34; ;  sha256  =  &#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0&#34; ;  };  propagatedBuildInputs  =  [  coda  MASS  mvtnorm  loo  shape  rstan  dagitty  ];  })  ];  }; in  mkShell  {  buildInputs  =  with  pkgs ;  [  git  glibcLocales  openssl  which  openssh  curl  wget  ];  inputsFrom  =  [  my-r-pkgs  ];  shellHook  =  &#39;&#39;  mkdir -p &#34;$(pwd)/_libs&#34;  export R_LIBS_USER=&#34;$(pwd)/_libs&#34;  &#39;&#39; ;  GIT_SSL_CAINFO  =  &#34; ${ cacert } /etc/ssl/certs/ca-bundle.crt&#34; ;  LOCALE_ARCHIVE  =  stdenv . lib . optionalString  stdenv . isLinux  &#34; ${ glibcLocales } /lib/locale/locale-archive&#34; ; }\n      Unlike  npm,  pipenv,  poetry,  conda and friends, my system was not bloated by downloading and setting up the same packages every-time I used them in different projects\n However, though this is a major step up from being chained to RStudio and mysystem package manager, it is still perhaps not immediately obvious how thisworkflow is reproducible. Admittedly, I have defined my packages in a nicefunctional manner; but someone else might have a different upstream channel theyare tracking, and thus will have different packages. Indeed the only packageswhich I could be sure of were the  R packages I built from Github, since thosewere tied to a hash. Finally, the setup described for each project is prettyonerous, and it is not immediately clear how to leverage fantastic tools like direnv for working through this.\n  The astute reader will have noticed that I mentioned that the  R packages werereproducible since they were tied to a  hash, and might reasonable argue thatthe entire Nix ecosystem is about  hashing in the first place. Once we realizethat, the rest is relatively simple  3.\n  Niv essentially keeps track of the channel from which all the packages are installed. Setup is pretty minimal.\n      let  sources  =  import  ./nix/sources.nix ;  pkgs  =  import  sources . nixpkgs  {  };  stdenv  =  pkgs . stdenv ;  my-r-pkgs  =  pkgs . rWrapper . override  {  packages  =  with  pkgs . rPackages ;  [  ggplot2  tidyverse  tidybayes  ];  }; in  pkgs . mkShell  {  buildInputs  =  with  pkgs ;[  git  glibcLocales  openssl  which  openssh  curl  wget  my-r-pkgs  ];  shellHook  =  &#39;&#39;  mkdir -p &#34;$(pwd)/_libs&#34;  export R_LIBS_USER=&#34;$(pwd)/_libs&#34;  &#39;&#39; ;  GIT_SSL_CAINFO  =  &#34; ${ pkgs . cacert } /etc/ssl/certs/ca-bundle.crt&#34; ;  LOCALE_ARCHIVE  =  stdenv . lib . optionalString  stdenv . isLinux  &#34; ${ pkgs . glibcLocales } /lib/locale/locale-archive&#34; ; }\n We could inspect and edit these sources by hand, but it is much more convenientto simply use  niv again when we need to update these.\n  At this stage we have a reproducible set of packages ready to use. However it isstill pretty annoying to have to go through the trouble of writing  nix-shelland also waiting while it rebuilds when we change things.\n  In the past, I have made my admiration for  direnv very clear (especially for python-poetry). However, though  direnv does allow us to include arbitrary  bash logic into our projects, it would be nice to have something which has some defaults for nix. Thankfully, the folks at TweagIO developed  lorri to scratch that itch.\n     We can and should inspect the environment  lorri wants us to load with  direnv file:\n   In and of itself that is not too descriptive, so we should run that on our own first.\n EVALUATION_ROOT = &#34; $HOME /.cache/lorri/gc_roots/407bd4df60fbda6e3a656c39f81c03c2/gc_root/shell_gc_root&#34;watch_file  &#34;/run/user/1000/lorri/daemon.socket&#34;watch_file  &#34; $EVALUATION_ROOT &#34; #!/usr/bin/env bash # ^ shebang is unused as this file is sourced, but present for editor # integration. Note: Direnv guarantees it *will* be parsed using bash. function punt  ()  { : } # move &#34;origPreHook&#34; &#34;preHook&#34; &#34;$@&#34;;;move ()  {  srcvarname = $1  # example: varname might contain the string &#34;origPATH&#34;  # drop off the source variable name  shift  destvarname = $1  # example: destvarname might contain the string &#34;PATH&#34;  # drop off the destination variable name  shift  # like: export origPATH=&#34;...some-value...&#34;  export  &#34; ${ @? } &#34; ;  # set $original to the contents of the variable $srcvarname  # refers to  eval  &#34; $destvarname =\\&#34; ${ !srcvarname } \\&#34;&#34;  # mark the destvarname as exported so direnv picks it up  # (shellcheck: we do want to export the content of destvarname!)  # shellcheck disable=SC2163  export  &#34; $destvarname &#34;  # remove the export from above, ie: export origPATH...  unset  &#34; $srcvarname &#34; } function prepend ()  {  varname = $1  # example: varname might contain the string &#34;PATH&#34;  # drop off the varname  shift  separator = $1  # example: separator would usually be the string &#34;:&#34;  # drop off the separator argument, so the remaining arguments  # are the arguments to export  shift  # set $original to the contents of the the variable $varname  # refers to  original = &#34; ${ !varname } &#34;  # effectfully accept the new variable&#39;s contents  export  &#34; ${ @? } &#34; ;  # re-set $varname&#39;s variable to the contents of varname&#39;s  # reference, plus the current (updated on the export) contents.  # however, exclude the ${separator} unless ${original} starts  # with a value  eval  &#34; $varname = ${ !varname }${ original :+ ${ separator }${ original }} &#34; } function append ()  {  varname = $1  # example: varname might contain the string &#34;PATH&#34;  # drop off the varname  shift  separator = $1  # example: separator would usually be the string &#34;:&#34;  # drop off the separator argument, so the remaining arguments  # are the arguments to export  shift  # set $original to the contents of the the variable $varname  # refers to  original = &#34; ${ !varname :- } &#34;  # effectfully accept the new variable&#39;s contents  export  &#34; ${ @? } &#34; ;  # re-set $varname&#39;s variable to the contents of varname&#39;s  # reference, plus the current (updated on the export) contents.  # however, exclude the ${separator} unless ${original} starts  # with a value  eval  &#34; $varname = ${ original :+ ${ original }${ separator }}${ !varname } &#34; }varmap ()  {  if  [ -f  &#34; $EVALUATION_ROOT /varmap-v1&#34;  ] ;  then  # Capture the name of the variable being set  IFS = &#34;=&#34;  read -r -a cur_varname  &lt;&lt;&lt;  &#34; $1 &#34;  # With IFS=&#39;&#39; and the `read` delimiter being &#39;&#39;, we achieve  # splitting on \\0 bytes while also preserving leading  # whitespace: #  # bash-3.2$ printf &#39; &lt;- leading space\\0bar\\0baz\\0&#39; \\  # | (while IFS=&#39;&#39; read -d $&#39;\\0&#39; -r x; do echo &#34;&gt;$x&lt;&#34;; done)  # &gt; &lt;- leading space&lt;  # &gt;bar&lt;  # &gt;baz&lt;```  while  IFS = &#39;&#39;  read -r -d  &#39;&#39; map_instruction  \\   &amp;&amp;  IFS = &#39;&#39;  read -r -d  &#39;&#39; map_variable  \\   &amp;&amp;  IFS = &#39;&#39;  read -r -d  &#39;&#39; map_separator ;  do  unset IFS  if  [  &#34; $map_variable &#34;  ==  &#34; ${ cur_varname [0] } &#34;  ] ;  then  if  [  &#34; $map_instruction &#34;  ==  &#34;append&#34;  ] ;  then append  &#34; $map_variable &#34;  &#34; $map_separator &#34;  &#34; $@ &#34;  return  fi  fi  done &lt;  &#34; $EVALUATION_ROOT /varmap-v1&#34;  fi  export  &#34; ${ @? } &#34; } function declare ()  {  if  [  &#34; $1 &#34;  ==  &#34;-x&#34;  ] ;  then shift ;  fi  # Some variables require special handling. #  # - punt: don&#39;t set the variable at all  # - prepend: take the new value, and put it before the current value.  case  &#34; $1 &#34; in  # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L100  &#34;HOME=&#34;* ) punt ;;  &#34;USER=&#34;* ) punt ;;  &#34;LOGNAME=&#34;* ) punt ;;  &#34;DISPLAY=&#34;* ) punt ;;  &#34;PATH=&#34;* ) prepend  &#34;PATH&#34;  &#34;:&#34;  &#34; $@ &#34; ;;  &#34;TERM=&#34;* ) punt ;;  &#34;IN_NIX_SHELL=&#34;* ) punt ;;  &#34;TZ=&#34;* ) punt ;;  &#34;PAGER=&#34;* ) punt ;;  &#34;NIX_BUILD_SHELL=&#34;* ) punt ;;  &#34;SHLVL=&#34;* ) punt ;;  # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L385  &#34;TEMPDIR=&#34;* ) punt ;;  &#34;TMPDIR=&#34;* ) punt ;;  &#34;TEMP=&#34;* ) punt ;;  &#34;TMP=&#34;* ) punt ;;  # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L421  &#34;NIX_ENFORCE_PURITY=&#34;* ) punt ;;  # vars from: https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html (last checked: 2019-09-26)  # reported in https://github.com/target/lorri/issues/153  &#34;OLDPWD=&#34;* ) punt ;;  &#34;PWD=&#34;* ) punt ;;  &#34;SHELL=&#34;* ) punt ;;  # https://github.com/target/lorri/issues/97  &#34;preHook=&#34;* ) punt ;;  &#34;origPreHook=&#34;* ) move  &#34;origPreHook&#34;  &#34;preHook&#34;  &#34; $@ &#34; ;; * ) varmap  &#34; $@ &#34;  ;;  esac } export  IN_NIX_SHELL =impure if  [ -f  &#34; $EVALUATION_ROOT /bash-export&#34;  ] ;  then  # shellcheck disable=SC1090 .  &#34; $EVALUATION_ROOT /bash-export&#34; elif  [ -f  &#34; $EVALUATION_ROOT &#34;  ] ;  then  # shellcheck disable=SC1090 .  &#34; $EVALUATION_ROOT &#34; fi unset  declareJun  06 19:02:32.368 INFO lorri has not completed an evaluation  for this project yet, expr:  $HOME/Git/Github/WebDev/Mine/haozeke.github.io/content-org/tryRnix/shell.nixJun  06 19:02:32.368 WARN  `lorri direnv ` should be executed by direnv from within an  `.envrc ` file, expr:  $HOME/Git/Github/WebDev/Mine/haozeke.github.io/content-org/tryRnix/shell.nix\n   Additionally, we will need to stick to using a pure environment as much aspossible to prevent unexpected situations. So we set:\n  There\u2019s still a catch though. We need to have  lorri daemon running to makesure the packages are built automatically without us having to exit the shelland re-run things. We can  turn to the documentation for this. Essentially, weneed to have a user-level systemd socket file and service for  lorri.\n      As promised, we will first test the setup to see that everything is working. Nowis also a good time to try the  tidybayes.rethinking package. In order to useit, we will need to define the  rethinking package in a way so we can pass itto the  buildInputs for  tidybayes.rethinking. We will modify new  shell.nixas follows:\n # shell.nix let  sources  =  import  ./nix/sources.nix ;  pkgs  =  import  sources . nixpkgs  {  };  stdenv  =  pkgs . stdenv ;  rethinking  =  with  pkgs . rPackages ;  buildRPackage  {  name  =  &#34;rethinking&#34; ;  src  =  pkgs . fetchFromGitHub  {  owner  =  &#34;rmcelreath&#34; ;  repo  =  &#34;rethinking&#34; ;  rev  =  &#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2&#34; ;  sha256  =  &#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0&#34; ;  };  propagatedBuildInputs  =  [  coda  MASS  mvtnorm  loo  shape  rstan  dagitty  ];  };  tidybayes_rethinking  =  with  pkgs . rPackages ;  buildRPackage  {  name  =  &#34;tidybayes.rethinking&#34; ;  src  =  pkgs . fetchFromGitHub  {  owner  =  &#34;mjskay&#34; ;  repo  =  &#34;tidybayes.rethinking&#34; ;  rev  =  &#34;df903c88f4f4320795a47c616eef24a690b433a4&#34; ;  sha256  =  &#34;1jl3189zdddmwm07z1mk58hcahirqrwx211ms0i1rzbx5y4zak0c&#34; ;  };  propagatedBuildInputs  =  [  dplyr  tibble  rlang  MASS  tidybayes  rethinking  rstan  ];  };  rEnv  =  pkgs . rWrapper . override  {  packages  =  with  pkgs . rPackages ;  [  ggplot2  tidyverse  tidybayes  devtools  modelr  cowplot  ggrepel  RColorBrewer  purrr  forcats  rstan  rethinking  tidybayes_rethinking  ];  }; in  pkgs . mkShell  {  buildInputs  =  with  pkgs ;  [  git  glibcLocales  which  ];  inputsFrom  =  [  rEnv  ];  shellHook  =  &#39;&#39;  mkdir -p &#34;$(pwd)/_libs&#34;  export R_LIBS_USER=&#34;$(pwd)/_libs&#34;  &#39;&#39; ;  GIT_SSL_CAINFO  =  &#34; ${ pkgs . cacert } /etc/ssl/certs/ca-bundle.crt&#34; ;  LOCALE_ARCHIVE  =  stdenv . lib . optionalString  stdenv . isLinux  &#34; ${ pkgs . glibcLocales } /lib/locale/locale-archive&#34; ; }\n The main thing to note here is that we need the output of the derivation wecreate here, i.e. we need to use  inputsFrom and NOT  buildInputs for  rEnv.\n  library ( magrittr ) library ( dplyr ) library ( purrr ) library ( forcats ) library ( tidyr ) library ( modelr ) library ( tidybayes ) library ( tidybayes.rethinking ) library ( ggplot2 ) library ( cowplot ) library ( rstan ) library ( rethinking ) library ( ggrepel ) library ( RColorBrewer ) theme_set ( theme_tidybayes ()) rstan_options ( auto_write  =  TRUE ) options ( mc.cores  =  parallel :: detectCores ()) set.seed ( 5 ) n  =  10 n_condition  =  5 ABC  =  tibble (  condition  =  factor ( rep ( c ( &#34;A&#34; , &#34;B&#34; , &#34;C&#34; , &#34;D&#34; , &#34;E&#34; ),  n )),  response  =  rnorm ( n  *  5 ,  c ( 0 , 1 , 2 , 1 , -1 ),  0.5 )  ) mtcars_clean  =  mtcars  %&gt;%  mutate ( cyl  =  factor ( cyl )) m_cyl  =  ulam ( alist (  cyl  ~  dordlogit ( phi ,  cutpoint ),  phi  &lt;-  b_mpg * mpg ,  b_mpg  ~  student_t ( 3 ,  0 ,  10 ),  cutpoint  ~  student_t ( 3 ,  0 ,  10 )  ),  data  =  mtcars_clean ,  chains  =  4 ,  cores  =  parallel :: detectCores (),  iter  =  2000 ) cutpoints  =  m_cyl  %&gt;%  recover_types ( mtcars_clean )  %&gt;%  spread_draws ( cutpoint[cyl] ) # define the last cutpoint last_cutpoint  =  tibble (  .draw  =  1 : max ( cutpoints $ .draw ),  cyl  =  &#34;8&#34; ,  cutpoint  =  Inf ) cutpoints  =  bind_rows ( cutpoints ,  last_cutpoint )  %&gt;%  # define the previous cutpoint (cutpoint_{j-1})  group_by ( .draw )  %&gt;%  arrange ( cyl )  %&gt;%  mutate ( prev_cutpoint  =  lag ( cutpoint ,  default  =  - Inf )) fitted_cyl_probs  =  mtcars_clean  %&gt;%  data_grid ( mpg  =  seq_range ( mpg ,  n  =  101 ))  %&gt;%  add_fitted_draws ( m_cyl )  %&gt;%  inner_join ( cutpoints ,  by  =  &#34;.draw&#34; )  %&gt;%  mutate ( `P ( cyl  |  mpg ) ` =  # this part is logit^-1(cutpoint_j - beta*x) - logit^-1(cutpoint_{j-1} - beta*x)  plogis(cutpoint - .value) - plogis(prev_cutpoint - .value)  )   data_plot = mtcars_clean %&gt;%  ggplot(aes(x = mpg, y = cyl, color = cyl)) +  geom_point() +  scale_color_brewer(palette = &#34;Dark2&#34;, name = &#34;cyl&#34;)  fit_plot = fitted_cyl_probs %&gt;%  ggplot(aes(x = mpg, y = ` P ( cyl  |  mpg ) ` ,  color  =  cyl ))  +  stat_lineribbon ( aes ( fill  =  cyl ),  alpha  =  1 / 5 )  +  scale_color_brewer ( palette  =  &#34;Dark2&#34; )  +  scale_fill_brewer ( palette  =  &#34;Dark2&#34; ) png ( filename = &#34;../images/rethinking.png&#34; ) plot_grid ( ncol  =  1 ,  align  =  &#34;v&#34; ,  data_plot ,  fit_plot ) dev.off\n     This post was really more of an exploratory follow up to the previous post, anddoes not really work in isolation. Then again, at this point everything seems tohave worked out well.  R with Nix has finally become a truly viable combinationfor any and every analysis under the sun. Some parts of the workflow are still abit janky, but will probably resolve themselves over time.\n My motivations were laid out in the  aforementioned post, and will not be repeated  \u21a9\ufe0e\n For why these are the way they are see the this is written, see the  aforementioned post  \u21a9\ufe0e\n Christine Dodrill  has a great write up on using these tools as well  \u21a9\ufe0e", "posttime": "2020-06-09 00:57:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53cd\u601d,rethinking,cyl", "title": "\u7edf\u8ba1\u53cd\u601d\u4e0eNIX", "title_en": "Statistical Rethinking and Nix", "transed": 1, "url": "https://rgoswami.me/posts/rethinking-r-nix/", "via": "", "real_tags": ["\u53cd\u601d", "cyl"]}, {"category": "", "categoryclass": "", "imagename": "887b45fadede4951347a83853f2e8df7.jpg", "infoid": 1005725, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8f6c\u641c\u7d22\u7f8e\u62c9\u5fb7\u53cd\u5e94(/m a\u026a\u02c8j\u0251\u02d0r/my-yar\uff1b[Maja\u0281])\u662f\u6c28\u57fa\u9178\u548c\u8fd8\u539f\u7cd6\u4e4b\u95f4\u7684\u5316\u5b66\u53cd\u5e94\uff0c\u8d4b\u4e88\u68d5\u8272\u98df\u7269\u72ec\u7279\u7684\u98ce\u5473\u3002\u70e4\u725b\u6392\u3001\u714e\u997a\u3001\u997c\u5e72\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u997c\u5e72\u3001\u9762\u5305\u3001\u70e4\u68c9\u82b1\u7cd6\u548c\u8bb8\u591a\u5176\u4ed6\u98df\u7269\u90fd\u4f1a\u6709\u8fd9\u79cd\u53cd\u5e94\u3002\u5b83\u662f\u4ee5\u6cd5\u56fd\u5316\u5b66\u5bb6\u8def\u6613\u65af-\u5361\u7c73\u5c14\u00b7\u6885\u62c9\u5fb7(Louis-Camille Maillard)\u7684\u540d\u5b57\u547d\u540d\u7684\uff0c\u4ed6\u57281912\u5e74\u9996\u6b21\u63cf\u8ff0\u4e86\u5b83\uff0c\u5f53\u65f6\u4ed6\u8bd5\u56fe\u590d\u5236\u751f\u7269\u86cb\u767d\u8d28\u5408\u6210\u3002[1][2]\u3002\n\u8be5\u53cd\u5e94\u662f\u4e00\u79cd\u975e\u9176\u8910\u53d8\uff0c\u901a\u5e38\u5728140\u6444\u6c0f\u5ea6\u5de6\u53f3\u5230165\u6444\u6c0f\u5ea6(280\u534e\u6c0f\u5ea6\u5230330\u6444\u6c0f\u5ea6)\u5de6\u53f3\u5feb\u901f\u8fdb\u884c\u3002\u8bb8\u591a\u98df\u8c31\u8981\u6c42\u70e4\u7bb1\u6e29\u5ea6\u8db3\u591f\u9ad8\uff0c\u4ee5\u786e\u4fdd\u53d1\u751f\u7f8e\u62c9\u5fb7\u53cd\u5e94\u3002[3]\u5728\u8f83\u9ad8\u7684\u6e29\u5ea6\u4e0b\uff0c\u7126\u7cd6(\u7cd6\u7684\u8910\u53d8\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u8fc7\u7a0b)\u548c\u968f\u540e\u7684\u70ed\u89e3(\u6700\u7ec8\u5206\u89e3\u5bfc\u81f4\u71c3\u70e7)\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002\n\u7cd6\u7684\u6d3b\u6027\u7fb0\u57fa\u4e0e\u6c28\u57fa\u9178\u7684\u4eb2\u6838\u6c28\u57fa\u53cd\u5e94\uff0c\u5f62\u6210\u4e00\u7cfb\u5217\u9999\u6c14\u548c\u98ce\u5473\u7684\u7279\u5f81\u4e0d\u4f73\u7684\u5206\u5b50\u7684\u590d\u6742\u6df7\u5408\u7269\u3002\u7531\u4e8e\u6c28\u57fa(RNH3+\u2192RNH2)\u53bb\u8d28\u5b50\u5316\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u5728\u78b1\u6027\u73af\u5883\u4e2d\u52a0\u901f(\u4f8b\u5982\uff0c\u5c06\u78b1\u6db2\u5e94\u7528\u4e8e\u53d8\u9ed1\u7684\u6912\u76d0\u5377\u997c\uff1b\u89c1\u78b1\u6db2\u5377)\uff0c\u56e0\u6b64\u5177\u6709\u66f4\u9ad8\u7684\u4eb2\u6838\u6027\u3002\u8fd9\u79cd\u53cd\u5e94\u662f\u8bb8\u591a\u8c03\u5473\u54c1\u884c\u4e1a\u98df\u8c31\u7684\u57fa\u7840\u3002\u5728\u9ad8\u6e29\u4e0b\uff0c\u53ef\u80fd\u4f1a\u5f62\u6210\u4e00\u79cd\u53eb\u505a\u4e19\u70ef\u9170\u80fa\u7684\u81f4\u764c\u7269\u8d28\u3002[5]\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u8f83\u4f4e\u6e29\u5ea6\u4e0b\u52a0\u70ed\u3001\u6dfb\u52a0\u5929\u51ac\u9170\u80fa\u9176\u6216\u6ce8\u5165\u4e8c\u6c27\u5316\u78b3\u6765\u963b\u6b62\u3002[4]\u3002\n\u5728\u70f9\u996a\u8fc7\u7a0b\u4e2d\uff0c\u6839\u636e\u98df\u7269\u4e2d\u7684\u5316\u5b66\u6210\u5206\u3001\u6e29\u5ea6\u3001\u70f9\u996a\u65f6\u95f4\u548c\u7a7a\u6c14\u7684\u5b58\u5728\uff0c\u7f8e\u62c9\u5fb7\u53cd\u5e94\u53ef\u4ee5\u4ea7\u751f\u6570\u767e\u79cd\u4e0d\u540c\u7684\u98ce\u5473\u5316\u5408\u7269\u3002\u53cd\u8fc7\u6765\uff0c\u8fd9\u4e9b\u5316\u5408\u7269\u901a\u5e38\u4f1a\u5206\u89e3\u5f62\u6210\u66f4\u591a\u65b0\u7684\u98ce\u5473\u5316\u5408\u7269\u3002\u591a\u5e74\u6765\uff0c\u9999\u6599\u79d1\u5b66\u5bb6\u4e00\u76f4\u4f7f\u7528\u7f8e\u62c9\u5fb7\u53cd\u5e94\u6765\u5236\u9020\u4eba\u9020\u9999\u6599\u3002\n1912\u5e74\uff0c\u6885\u62c9\u5fb7\u53d1\u8868\u4e86\u4e00\u7bc7\u8bba\u6587\uff0c\u63cf\u8ff0\u4e86\u6c28\u57fa\u9178\u548c\u7cd6\u5728\u9ad8\u6e29\u4e0b\u7684\u53cd\u5e94\u3002[1]1953\u5e74\uff0c\u7f8e\u56fd\u519c\u4e1a\u90e8\u7684\u5316\u5b66\u5bb6\u7ea6\u7ff0\u00b7E\u00b7\u970d\u5947\u5efa\u7acb\u4e86\u7f8e\u62c9\u5fb7\u53cd\u5e94\u7684\u673a\u5236\u3002[6][7]\u3002\n\u7f8e\u62c9\u5fb7\u53cd\u5e94\u5bfc\u81f4\u4e86\u98df\u7269\u4e2d\u7684\u8bb8\u591a\u989c\u8272\u548c\u5473\u9053\uff0c\u4f8b\u5982\u5404\u79cd\u8089\u7c7b\u5728\u70e4\u6216\u70e4\u65f6\u4f1a\u53d8\u68d5\u8272\uff0c\u70b8\u6d0b\u8471\u4e2d\u4f1a\u6709\u8910\u53d8\u548c\u9c9c\u5473\uff0c\u8fd8\u6709\u5496\u5561\u70d8\u7119\u3002\u5b83\u6709\u52a9\u4e8e\u70d8\u7119\u98df\u54c1\u7684\u6df1\u8272\u5916\u58f3\uff0c\u6cd5\u5f0f\u85af\u6761\u548c\u5176\u4ed6\u85af\u7247\u7684\u91d1\u68d5\u8272\uff0c\u9ea6\u82bd\u5a01\u58eb\u5fcc\u548c\u5564\u9152\u4e2d\u53d1\u73b0\u7684\u9ea6\u82bd\u5927\u9ea6\u7684\u989c\u8272\u548c\u5473\u9053\uff0c\u4ee5\u53ca\u5e72\u725b\u5976\u548c\u70bc\u4e73\u3001Dulce de leche\u3001\u65af\u91cc\u5170\u5361\u7cd6\u679c\u725b\u5976\u592a\u5983\u7cd6\u3001\u9ed1\u849c\u3001\u5de7\u514b\u529b\u548c\u70e4\u82b1\u751f\u7684\u989c\u8272\u548c\u5473\u9053\u3002\n6-\u4e59\u9170\u57fa-2\uff0c3\uff0c4\uff0c5-\u56db\u6c22\u5421\u5576\u5bf9\u9762\u5305\u3001\u7206\u7c73\u82b1\u548c\u7389\u7c73\u997c\u7b49\u70d8\u7119\u98df\u54c1\u4e2d\u5b58\u5728\u7684\u997c\u5e72\u6216\u997c\u5e72\u4e00\u6837\u7684\u5473\u9053\u8d1f\u8d23\u3002\u7ed3\u6784\u4e0a\u76f8\u5173\u7684\u5316\u5408\u72692-\u4e59\u9170\u57fa-1-\u5421\u54af\u5549\u6709\u7c7b\u4f3c\u7684\u6c14\u5473\uff0c\u4e5f\u662f\u5728\u4e0d\u52a0\u70ed\u7684\u60c5\u51b5\u4e0b\u81ea\u7136\u4ea7\u751f\u7684\uff0c\u7ed9\u5404\u79cd\u719f\u996d\u548c\u836f\u8349\u718a\u732b(Pandanus Amaryllifolius)\u5e26\u6765\u4e86\u5178\u578b\u7684\u6c14\u5473\u3002\u8fd9\u4e24\u79cd\u5316\u5408\u7269\u7684\u6c14\u5473\u9608\u503c\u90fd\u4f4e\u4e8e0.06 ng/l\u3002\n\u70e4\u8089\u6216\u70e4\u8089\u65f6\u53d1\u751f\u7684\u8910\u53d8\u53cd\u5e94\u5f88\u590d\u6742\uff0c\u4e3b\u8981\u662f\u7f8e\u62c9\u5fb7\u8910\u53d8[9]\uff0c\u8fd8\u6709\u5176\u4ed6\u5316\u5b66\u53cd\u5e94\u7684\u5f71\u54cd\uff0c\u5305\u62ec\u808c\u8089\u86cb\u767d\u808c\u7ea2\u86cb\u767d\u7684\u56db\u5421\u54af\u73af\u7684\u5206\u89e3\u3002\n\u7126\u7cd6\u5316\u662f\u4e0e\u7f8e\u62c9\u5fb7\u8910\u5316\u5b8c\u5168\u4e0d\u540c\u7684\u8fc7\u7a0b\uff0c\u5c3d\u7ba1\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u7684\u7ed3\u679c\u6709\u65f6\u4e0e\u8089\u773c(\u548c\u5473\u857e)\u76f8\u4f3c\u3002\u7126\u7cd6\u6709\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53d1\u751f\u7f8e\u62c9\u5fb7\u53cd\u5e94\u7684\u540c\u4e00\u79cd\u98df\u7269\u7684\u8910\u53d8\uff0c\u4f46\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u662f\u4e0d\u540c\u7684\u3002\u5b83\u4eec\u90fd\u662f\u901a\u8fc7\u52a0\u70ed\u4fc3\u8fdb\u7684\uff0c\u4f46\u5982\u4e0a\u6240\u8ff0\uff0c\u7f8e\u62c9\u5fb7\u53cd\u5e94\u6d89\u53ca\u6c28\u57fa\u9178\uff0c\u800c\u7126\u7cd6\u4f5c\u7528\u53ea\u662f\u67d0\u4e9b\u7cd6\u7684\u70ed\u89e3\u3002\n\u5728\u5236\u4f5c\u9752\u8d2e\u9972\u6599\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fc7\u9ad8\u7684\u70ed\u91cf\u4f1a\u5bfc\u81f4\u7f8e\u62c9\u5fb7\u53cd\u5e94\u7684\u53d1\u751f\uff0c\u8fd9\u4f1a\u51cf\u5c11\u4ee5\u9752\u8d2e\u9972\u6599\u4e3a\u98df\u7684\u52a8\u7269\u6240\u80fd\u83b7\u5f97\u7684\u80fd\u91cf\u548c\u86cb\u767d\u8d28\u7684\u6570\u91cf\u3002\n\u7cd6\u7684\u7fb0\u57fa\u4e0e\u6c28\u57fa\u9178\u7684\u6c28\u57fa\u53cd\u5e94\uff0c\u751f\u6210N-\u53d6\u4ee3\u7684\u7cd6\u80fa\u548c\u6c34\u3002\n\u5f00\u94feAmadori\u4ea7\u7269\u8fdb\u4e00\u6b65\u8131\u6c34\u548c\u8131\u6c28\uff0c\u751f\u6210\u4e8c\u7fb0\u57fa\u3002[11]\u8fd9\u662f\u4e00\u79cd\u81f3\u5173\u91cd\u8981\u7684\u4e2d\u95f4\u4f53\u3002\n\u4e19\u70ef\u9170\u80fa\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u4eba\u7c7b\u81f4\u764c\u7269[13]\uff0c\u53ef\u4f5c\u4e3a\u8fd8\u539f\u7cd6\u548c\u6c28\u57fa\u9178(\u7279\u522b\u662f\u5929\u51ac\u9170\u80fa)\u53d1\u751f\u7f8e\u62c9\u5fb7\u53cd\u5e94\u7684\u526f\u4ea7\u7269\uff0c\u8fd9\u4e24\u79cd\u6c28\u57fa\u9178\u90fd\u5b58\u5728\u4e8e\u5927\u591a\u6570\u98df\u54c1\u4e2d\u3002[14][15]\u3002\n^a b Maillard\uff0cL.C.(1912)\u3002[\u6c28\u57fa\u9178\u5bf9\u7cd6\u7684\u4f5c\u7528][\u6c28\u57fa\u9178\u5bf9\u7cd6\u7684\u4f5c\u7528\u3002\u4ee5\u6709\u6761\u4e0d\u7d0a\u7684\u65b9\u5f0f\u5f62\u6210\u7c7b\u9ed1\u8272\u7d20]\u3002Comptes Rendus(\u6cd5\u8bed)\u3002154\uff1a66-68\u3002\n^Chichester\uff0cC.O.\u7f16\u8f91\u3002(1986\u5e74)\u3002\u98df\u54c1\u7814\u7a76\u8fdb\u5c55\u3002\u98df\u54c1\u4e0e\u8425\u517b\u7814\u7a76\u8fdb\u5c55\u300230.\u3002\u6ce2\u58eb\u987f\uff1a\u5b66\u672f\u51fa\u7248\u793e\u3002\u7b2c79\u9875\u3002ISBN\u7535\u8bdd\uff1a0-12-016430-2\u3002\n^BUI\uff0c\u5b89\u5fb7\u9c81(2017-09-29)\u3002\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u591a\u98df\u8c31\u8981\u6c42350\u5ea6\u7684\u70e4\u7bb1\u3002\u54c1\u5c1d\u684c\u3002\n^a b Tamanna\uff0cN\uff1bMahmal\uff0cN(2015)\u3002\u98df\u54c1\u52a0\u5de5\u548c\u7f8e\u62c9\u5fb7\u53cd\u5e94\u4ea7\u54c1\uff1a\u5bf9\u4eba\u7c7b\u5065\u5eb7\u548c\u8425\u517b\u7684\u5f71\u54cd\u3002\u201c\u56fd\u9645\u98df\u54c1\u79d1\u5b66\u6742\u5fd7\u201d\u30022015\u5e74\uff1a526762\u3002DOI\uff1a10.1155/2015\u5e74/526762\u3002ISSN\u7535\u8bdd\uff1a2314-5765\u3002\u592a\u5e73\u6d0b\u6295\u8d44\u7ba1\u7406\u516c\u53f8\u4e0a\u6da8\u4e864745522\u3002PMID\u4e3a26904661\u3002\na b Tareke\uff0cE.\uff1bRydberg\uff0cP.\uff1bKarlsson\uff0cPatrik\uff1bEriksson\uff0cSune\uff1bT\u00f6rnqvist\uff0c\u739b\u683c\u4e3d\u5854(2002)\u3002\u52a0\u70ed\u98df\u54c1\u4e2d\u5f62\u6210\u7684\u81f4\u764c\u7269\u4e19\u70ef\u9170\u80fa\u7684\u5206\u6790\u3002J.Agric.\u3002\u98df\u54c1\u5316\u5b66\u300250(17)\uff1a4998-5006\u3002DOI\uff1a10.1021/jf020302f.\u3002PMID\u4e3a12166997\u3002\n^Hodge\uff0cJ.E.(1953)\u3002\u8131\u6c34\u98df\u54c1\uff0c\u6a21\u578b\u7cfb\u7edf\u4e2d\u8910\u53d8\u53cd\u5e94\u7684\u5316\u5b66\u3002\u519c\u4e1a\u4e0e\u98df\u54c1\u5316\u5b66\u6742\u5fd7\u30021(15)\uff1a928-43\u3002doi\uff1a10.1021/jf60015a004.\u3002\n\u8428\u62c9\u00b7\u57c3\u5f17\u8328(2012\u5e7410\u67081\u65e5)\u3002\u7f8e\u62c9\u5fb7\u53cd\u5e94\u5c31100\u5c81\u4e86\u3002\u5316\u5de5\u4e0e\u5de5\u7a0b\u65b0\u95fb\u300290(40)\uff1a58-60\u3002doi\uff1a10.1021/cen-09040-scitech2.\u3002\n^Harrison\uff0cT.J.\uff1bv\uff0cG.R.(2005)\u3002\u4e00\u79cd\u98df\u54c1\u9999\u6c14\u5316\u5408\u72696-\u4e59\u9170\u57fa-1\uff0c2\uff0c3\uff0c4-\u56db\u6c22\u5421\u5576\u548c2-\u4e59\u9170\u57fa-1-\u5421\u54af\u5549\u7684\u5feb\u901f\u3001\u9ad8\u4ea7\u7ed3\u6784\u3002J.\u7ec4\u7ec7\u3002\u662f\u5316\u5b66\u300270(26)\uff1a10872-74\u3002DOI\uff1a10.1021/jo051940a.\u3002PMID\u4e3a16356012\u3002\n\u54c8\u7f57\u5fb7\u00b7\u9ea6\u57fa(2004)\u3002\u201c\u8bba\u98df\u7269\u4e0e\u70f9\u996a\uff1a\u53a8\u623f\u7684\u79d1\u5b66\u4e0e\u77e5\u8bc6\u201d(On Food and Cooking\uff1aThe Science and Lore of the Kitchen)\u3002\u7ebd\u7ea6\uff1a\u65af\u514b\u91cc\u5e03\u7eb3\u3002\u9875\u7801\uff1a778-79\u3002ISBN978-0-684-80001-1\u3002\n^Miranda\uff0cGonzalo\uff1bBerna\uff0cAngel\uff1bMulet\uff0cAntonio(2019\u5e742\u67084\u65e5)\u3002\u5e72\u679c\u8d2e\u85cf\uff1a\u5305\u88c5\u9876\u7a7a\u6c14\u6c1b\u53d8\u5316\u5206\u6790\u3002\u98df\u7269\u30028(2)\uff1a56\u3002DOI\uff1a10.3390/foods8020056\u3002\u592a\u5e73\u6d0b\u6295\u8d44\u7ba1\u7406\u516c\u53f8\u4e0a\u6da8\u4e866406843\u3002PMID\u4e3a30720722\u3002\n\u54c8\u91cc\u00b7\u52aa\u5c14\u65af\u6ed5(2007)\u3002\u975e\u9176\u8910\u53d8\u5316\u5b66\u3002\u6885\u62c9\u5fb7\u53cd\u5e94\u3002\u7b2c5-30\u9875\u3002\u7535\u8bdd\uff1a9781847552570-00005\uff0c\u7535\u8bdd\uff1a10.1039\u3002ISBN978-0-85404-964-6\u3002\n*\u65af\u5854\u5fb7\u52d2\uff0c\u7406\u67e5\u5fb7H\uff1b\u7f57\u4f2f\u7279\uff0c\u6cd5\u6bd4\u5b89\uff1b\u91cc\u8fea\u514b\uff0c\u7d22\u5c3c\u5a05\uff1b\u74e6\u5c14\u52a0\uff0c\u7eb3\u5854\u8389\u4e9a\uff1b\u6234\u7ef4\u5fb7\u514b\uff0c\u6258\u9a6c\u65af\uff1b\u5fb7\u6c83\uff0c\u65af\u7279\u51e1\u5c3c\uff1b\u6208\u5fb7\u66fc\uff0c\u8482\u5c14\uff1b\u8c6a\uff0c\u7ea6\u5c14\u683c\uff1b\u5e03\u5170\u514b\uff0c\u4f0a\u59c6\u96f7(2004\u5e748\u6708)\u3002\u6df1\u5165\u7814\u7a76\u901a\u8fc7\u7f8e\u62c9\u5fb7\u53cd\u5e94\u5f62\u6210\u4e19\u70ef\u9170\u80fa\u548c\u5176\u4ed6\u4e59\u70ef\u57fa\u5316\u5408\u7269\u7684\u673a\u7406\u3002\u519c\u4e1a\u4e0e\u98df\u54c1\u5316\u5b66\u6742\u5fd7\u300252(17)\uff1a5550-5558\u3002DOI\uff1a10.1021/jf0495486.\u3002PMID\u4e3a15315399\u3002\n^Virk-Baker\uff0cManDeep K.\uff1bNagy\uff0cTim R.\uff1bBarnes\uff0cStephen\uff1bGroopman\uff0cJohn(2014\u5e745\u670829\u65e5)\u3002\u996e\u98df\u4e19\u70ef\u9170\u80fa\u4e0e\u4eba\u7c7b\u764c\u75c7\uff1a\u6587\u732e\u7684\u7cfb\u7edf\u56de\u987e\u3002\u8425\u517b\u4e0e\u764c\u75c7\u300266(5)\uff1a774-790\u3002DOI\uff1a10.1080/01635581.2014.916323.\u3002\u592a\u5e73\u6d0b\u6295\u8d44\u7ba1\u7406\u516c\u53f8\u4e0a\u6da8\u4e864164905\u3002PMID\u4e3a24875401\u3002\n\u9898\u540d/\u8d23\u4efb\u8005\uff1aRealthology of the Searchen//by R./J.(Dodson\uff0cDodson\uff0cAndrew T.)\uff0c\u4e66\u540d/\u4f5c\u8005Deborah/\u3002(2002\u5e7410\u6708)\u3002\u4e19\u70ef\u9170\u80fa\u662f\u5728\u7f8e\u62c9\u5fb7\u53cd\u5e94\u4e2d\u5f62\u6210\u7684\u3002\u5927\u81ea\u7136\u3002419(6906)\uff1a448-449\u3002\u5bc6\u7801\uff1a2002Natur.419..448M.\u3002DOI\uff1a10.1038/419448a\u3002PMID\u4e3a12368844\u3002\n\u5f7c\u5f97\u00b7J\u00b7\u8303\u00b7\u7d22\u65af\u7279(1982)\u3002\u53cd\u520d\u52a8\u7269\u7684\u8425\u517b\u751f\u6001\u5b66(\u7b2c\u4e8c\u7248)\u3002\u4f0a\u8428\u5361\uff0c\u7ebd\u7ea6\uff1a\u5eb7\u5948\u5c14\u5927\u5b66\u51fa\u7248\u793e\u3002ISBN\u4e3a9780801427725\u3002\u534e\u4fa8\u57ce\uff1a29909839\u3002", "note_en": "Jump to navigation  Jump to search  The  Maillard reaction (   /  m a\u026a \u02c8 j \u0251\u02d0r/   my- YAR;    [maja\u0281]) is a  chemical reaction between  amino acids and  reducing sugars that gives browned food its distinctive flavor.  Seared steaks, fried dumplings, cookies and other kinds of biscuits, breads, toasted marshmallows, and many other foods undergo this reaction. It is named after French chemist  Louis-Camille Maillard, who first described it in 1912 while attempting to reproduce biological  protein synthesis.  [1]  [2]\n The reaction is a form of  non-enzymatic browning which typically proceeds rapidly from around 140 to 165\u00a0\u00b0C (280 to 330\u00a0\u00b0F). Many  recipes call for an oven temperature high enough to ensure that a Maillard reaction occurs.  [3] At higher temperatures,  caramelization (the browning of sugars, a distinct process) and subsequently  pyrolysis (final breakdown leading to burning) become more pronounced.\n The reactive  carbonyl group of the sugar reacts with the  nucleophilic  amino group of the amino acid, and forms a complex mixture of poorly characterized molecules responsible for a range of aromas and flavors. This process is accelerated in an alkaline environment ( e.g.,  lye applied to darken pretzels; see  lye roll), as the  amino groups (RNH 3 + \u2192 RNH 2) are  deprotonated, and hence have an increased  nucleophilicity. This reaction is the basis for many of the  flavoring industry&#39;s recipes. At high temperatures, a probable  [4]  carcinogen called  acrylamide can form.  [5] This can be discouraged by heating at a lower temperature, adding  asparaginase, or injecting carbon dioxide.  [4]\n In the cooking process, Maillard reactions can produce hundreds of different flavor compounds depending on the chemical constituents in the food, the temperature, the cooking time, and the presence of air. These compounds, in turn, often break down to form yet more new flavor compounds.  Flavor scientists have used the Maillard reaction over the years to make  artificial flavors.\n   In 1912, Maillard published a paper describing the reaction between amino acids and sugars at elevated temperatures.  [1] In 1953, chemist  John E. Hodge, with the  U.S. Department of Agriculture, established a mechanism for the Maillard reaction.  [6]  [7]\n    The Maillard reaction is responsible for many colors and flavors in foods, such as the  browning of various meats when seared or grilled, the browning and  umami taste in  fried onions, and  coffee roasting. It contributes to the darkened crust of  baked goods, the golden-brown color of  French fries and other crisps, of  malted barley as found in  malt whiskey and beer, and the color and taste of  dried and  condensed milk,   dulce de leche, the Sri Lankan confection  milk toffee,  black garlic,  chocolate, and  roasted peanuts.\n 6-Acetyl-2,3,4,5-tetrahydropyridine is responsible for the biscuit or cracker-like flavor present in baked goods such as bread, popcorn, and tortilla products. The structurally related compound  2-acetyl-1-pyrroline has a similar smell, and also occurs naturally without heating and gives varieties of cooked rice and the herb  pandan (  Pandanus amaryllifolius) their typical smells. Both compounds have  odor thresholds below 0.06  ng/ l.  [8]\n   The browning reactions that occur when meat is roasted or seared are complex, and occur mostly by Maillard browning  [9] with contributions from other chemical reactions, including the breakdown of the tetrapyrrole rings of the muscle protein  myoglobin.\n Caramelization is an entirely different process from Maillard browning, though the results of the two processes are sometimes similar to the naked eye (and taste buds). Caramelization may sometimes cause browning in the same foods in which the Maillard reaction occurs, but the two processes are distinct. They are both promoted by heating, but the Maillard reaction involves amino acids, as discussed above, whereas caramelization is simply the  pyrolysis of certain sugars.\n  In making  silage, excess heat causes the Maillard reaction to occur, which reduces the amount of energy and protein available to the animals that feed on it.\n  The  carbonyl group of the sugar reacts with the  amino group of the  amino acid, producing N-substituted  glycosylamine and water\n  The open-chain Amadori products undergo further dehydration and deamination to produce dicarbonyls.  [11]This is a crucial intermediate.\n   Acrylamide, a possible human  carcinogen,  [13] can be generated as a byproduct of Maillard reaction between reducing sugars and amino acids, especially  asparagine, both of which are present in most food products.  [14]  [15]\n      ^     a     b    Maillard, L. C. (1912).  &#34;Action des acides amines sur les sucres; formation de melanoidines par voie m\u00e9thodique&#34; [Action of amino acids on sugars. Formation of melanoidins in a methodical way].   Comptes Rendus (in French).  154: 66\u201368.\n ^   Chichester, C. O., ed. (1986).  Advances in Food Research. Advances in Food and Nutrition Research.  30. Boston: Academic Press. p.\u00a079.  ISBN\u00a0  0-12-016430-2.\n ^   Bui, Andrew (2017-09-29).  &#34;Why So Many Recipes Call for a 350-Degree Oven&#34;.  Tasting Table .\n ^     a     b   Tamanna, N; Mahmood, N (2015).  &#34;Food Processing and Maillard Reaction Products: Effect on Human Health and Nutrition&#34;.  International Journal of Food Science.  2015: 526762.  doi: 10.1155/2015/526762.  ISSN\u00a0 2314-5765.  PMC\u00a0  4745522.  PMID\u00a0 26904661.\n ^     a     b   Tareke, E.; Rydberg, P.; Karlsson, Patrik; Eriksson, Sune; T\u00f6rnqvist, Margareta (2002). &#34;Analysis of acrylamide, a carcinogen formed in heated foodstuffs&#34;.  J. Agric. Food Chem.  50 (17): 4998\u20135006.  doi: 10.1021/jf020302f.  PMID\u00a0 12166997.\n ^   Hodge, J. E. (1953). &#34;Dehydrated Foods, Chemistry of Browning Reactions in Model Systems&#34;.  Journal of Agricultural and Food Chemistry.  1 (15): 928\u201343.  doi: 10.1021/jf60015a004.\n ^   Everts, Sarah (October 1, 2012).  &#34;The Maillard Reaction Turns 100&#34;.  Chemical &amp; Engineering News.  90 (40): 58\u201360.  doi: 10.1021/cen-09040-scitech2.\n ^   Harrison, T. J.; v, G. R. (2005). &#34;An expeditious, high-yielding construction of the food aroma compounds 6-acetyl-1,2,3,4-tetrahydropyridine and 2-acetyl-1-pyrroline&#34;.   J. Org. Chem.  70 (26): 10872\u201374.  doi: 10.1021/jo051940a.  PMID\u00a0 16356012.\n ^   McGee, Harold (2004).  On Food and Cooking: The Science and Lore of the Kitchen. New York: Scribner. pp.\u00a0778\u201379.  ISBN\u00a0  978-0-684-80001-1.\n ^   Miranda, Gonzalo; Berna, Angel; Mulet, Antonio (4 February 2019).  &#34;Dried-Fruit Storage: An Analysis of Package Headspace Atmosphere Changes&#34;.  Foods.  8 (2): 56.  doi: 10.3390/foods8020056.  PMC\u00a0  6406843.  PMID\u00a0 30720722.\n ^   Nursten, Harry (2007). &#34;The Chemistry of Nonenzymic Browning&#34;.  The Maillard Reaction. pp.\u00a05\u201330.  doi: 10.1039/9781847552570-00005.  ISBN\u00a0  978-0-85404-964-6.\n ^   Stadler, Richard H.; Robert, Fabien; Riediker, Sonja; Varga, Natalia; Davidek, Tomas; Devaud, St\u00e9phanie; Goldmann, Till; Hau, J\u00f6rg; Blank, Imre (August 2004). &#34;In-Depth Mechanistic Study on the Formation of Acrylamide and Other Vinylogous Compounds by the Maillard Reaction&#34;.  Journal of Agricultural and Food Chemistry.  52 (17): 5550\u20135558.  doi: 10.1021/jf0495486.  PMID\u00a0 15315399.\n  ^   Virk-Baker, Mandeep K.; Nagy, Tim R.; Barnes, Stephen; Groopman, John (29 May 2014).  &#34;Dietary Acrylamide and Human Cancer: A Systematic Review of Literature&#34;.  Nutrition and Cancer.  66 (5): 774\u2013790.  doi: 10.1080/01635581.2014.916323.  PMC\u00a0  4164905.  PMID\u00a0 24875401.\n ^   Mottram, Donald S.; Wedzicha, Bronislaw L.; Dodson, Andrew T. (October 2002). &#34;Acrylamide is formed in the Maillard reaction&#34;.  Nature.  419 (6906): 448\u2013449.  Bibcode: 2002Natur.419..448M.  doi: 10.1038/419448a.  PMID\u00a0 12368844.\n  Van Soest, Peter J. (1982).   Nutritional Ecology of the Ruminant (2nd ed.). Ithaca, NY: Cornell University Press.   ISBN\u00a0 9780801427725.   OCLC\u00a0 29909839.", "posttime": "2020-06-09 00:56:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53cd\u5e94,maillard", "title": "\u7f8e\u62c9\u5fb7\u53cd\u5e94", "title_en": "Maillard reaction", "transed": 1, "url": "https://en.wikipedia.org/wiki/Maillard_reaction", "via": "", "real_tags": ["\u53cd\u5e94", "maillard"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005724, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u535a\u5ba2=\u4ecd\u7136\u662f\u4e92\u8054\u7f51\u627f\u8bfa\u7684\u6700\u4f73\u4ee3\u8868\u3002\u6bcf\u4e2a\u4eba\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u7f51\u7ad9\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u793e\u4ea4\u5a92\u4f53\u8d26\u6237(\u8fd9\u5bf9\u63a8\u5e7f\u535a\u5ba2\u5e16\u5b50\u5f88\u6709\u5e2e\u52a9)\u3002\n-\u672c\u00b7\u6c64\u666e\u68ee(@benthompson)2020\u5e746\u67087\u65e5\u3002\n\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u5173\u4e8e\u5e94\u8be5\u5728\u54ea\u91cc\u521b\u5efa\u535a\u5ba2\u7684\u95ee\u9898\uff1b\u5f88\u6709\u5e2e\u52a9\u7684\u662f\uff0c\u6211\u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u535a\u5ba2\uff0c\u5728\u90a3\u91cc\u6211\u53ef\u4ee5\u51c6\u786e\u5730\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\uff01\n\u4e0d\u8fc7\uff0c\u5728\u6211\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u9700\u8981\u7ed9\u51fa\u4e00\u4e9b\u5fc5\u8981\u7684\u62ab\u9732\uff1a\u6211\u66fe\u7ecf\u5728Automattic\u5de5\u4f5c(WordPress.com\u6258\u7ba1\u670d\u52a1\u7684\u6240\u6709\u8005\uff0c\u4e5f\u662fWordPress.org\u5f00\u6e90\u9879\u76ee\u7684\u4e3b\u8981\u8d21\u732e\u8005)\uff0cStratechery(\u548c\u8fd9\u4e2a\u7f51\u7ad9)\u8fd0\u884c\u5728WordPress\u4e0a\u3002\u4e00\u65b9\u9762\uff0c\u8fd9\u8bc1\u660e\u4e86\u6211\u542c\u4ece\u4e86\u81ea\u5df1\u7684\u5efa\u8bae\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u4e5f\u8bb8\u6211\u6709\u504f\u89c1\uff0c\u4f46\u73b0\u5728\u4f60\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e86\u3002\n\u8fd9\u6bd4\u60a8\u4f7f\u7528\u4ec0\u4e48\u670d\u52a1\u91cd\u8981\u5f97\u591a\uff0c\u56e0\u4e3a\u8fd9\u662f\u60a8\u5c06\u6765\u53ef\u4ee5\u5728\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\u7684\u539f\u56e0\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2aSquaspace\u535a\u5ba2\uff0c\u4f46\u4f60\u7684\u57df\u540d\u662fmysuperblog.net\uff0c\u4f60\u53ef\u4ee5\u5207\u6362\u5230WordPress\u535a\u5ba2\u5e76\u6539\u53d8\u4f60\u7684\u57df\u540d\u6307\u5411\u7684\u4f4d\u7f6e(\u4e0e\u4e4b\u76f8\u5173\u7684\u662f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u4fdd\u8bc1\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u5373\u4f7f\u4f60\u66f4\u6362\u4e86\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u63d0\u4f9b\u5546)\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u4e2d\u7b49\u7684\u53e5\u67c4\uff0c\u4f8b\u5982\uff0c\u5f53\u4f60\u60f3\u642c\u5bb6\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5efa\u7acb\u4f60\u7684\u7f51\u7ad9\u7684\u8eab\u4efd\u3002\n\u6211\u4f1a\u8fdb\u4e00\u6b65\u5efa\u8bae\u60a8\u8d2d\u4e70\u60a8\u7684\u57df\u540d\u72ec\u7acb\u4e8e\u60a8\u7684\u535a\u5ba2\u6258\u7ba1\u3002\u662f\u7684\uff0cSquaepace\u3001WordPress\u6216Wix\u90fd\u627f\u8bfa\uff0c\u5982\u679c\u4f60\u79fb\u52a8\u4f60\u7684\u7f51\u7ad9\uff0c\u4f60\u53ef\u4ee5\u5c06\u57df\u540d\u6307\u5411\u5176\u4ed6\u5730\u65b9(\u5f53\u7136\uff0c\u4f60\u603b\u662f\u53ef\u4ee5\u66f4\u6362\u4f60\u7684\u57df\u540d\u6ce8\u518c\u5546)\uff0c\u4f46\u4f60\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u7684\u90e8\u5206\u539f\u56e0\u662f\u8fc7\u4e8e\u4f9d\u8d56\u4efb\u4f55\u4e00\u5bb6\u516c\u53f8\u3002\n\u6b64\u5916\uff0c\u4e0d\u8981\u89c9\u5f97\u4f60\u9700\u8981\u4e00\u4e2a\u201c.com\u201d\u57df\u540d\uff1b\u5f88\u96be\u627e\u5230\u4e00\u4e2a\u540d\u5b57\u53d1\u97f3\u51c6\u786e\u7684\u57df\u540d\u3002\u597d\u6d88\u606f\u662f\uff0c\u901a\u7528\u9876\u7ea7\u57df\u540d\u7684\u5de8\u5927\u6269\u5f20\u610f\u5473\u7740\u6709\u5f88\u591a\u6709\u8da3\u7684\u540d\u79f0\u53ef\u7528\uff0c\u800c\u4e14\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u90fd\u652f\u6301\u8fd9\u4e9b\u540d\u79f0\uff0c\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002\n\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u5728Squaepace\u6216Wix\u4e0a\uff0c\u4f46\u5728\u4f60\u81ea\u5df1\u7684\u57df\u540d\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u670d\u52a1\uff0c\u6bd4\u5982WordPress\uff0c\u5e76\u4e14\u4ecd\u7136\u6709\u76f8\u540c\u7684\u5730\u5740\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u4fdd\u7559\u4f60\u7684\u65e7\u5185\u5bb9\uff0c\u5c31\u4f1a\u6d89\u53ca\u5230\u4e00\u4e9b\u75db\u82e6\uff1a\u4f60\u9700\u8981\u628a\u4f60\u7684\u5185\u5bb9\u4ece\u65e7\u7684\u670d\u52a1\u4e2d\u5bfc\u51fa\uff0c\u7136\u540e\u5bfc\u5165\u5230\u65b0\u7684\u670d\u52a1\u4e2d\u3002\n\u6b64\u5916\uff0cSquaSpace\u6216Wix\u4e3b\u673a\u4e0d\u5b58\u5728\u7ade\u4e89\uff1a\u5b83\u4eec\u5206\u522b\u662fSquaSpace\u548cWix\u8f6f\u4ef6\u7684\u552f\u4e00\u63d0\u4f9b\u5546\u3002\u5c31\u63d0\u4f9b\u96c6\u6210\u4ea7\u54c1\u800c\u8a00\uff0c\u8fd9\u662f\u5f88\u68d2\u7684\uff0c\u4f46\u4e00\u822c\u6765\u8bf4\uff0c\u6210\u4e3a\u5784\u65ad\u4f01\u4e1a\u7684\u5ba2\u6237(\u5f53\u7136\uff0c\u5b9a\u4e49\u975e\u5e38\u72ed\u9698\uff01)\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u4f60\u60f3\u8981\u6301\u7eed\u4e00\u751f\u7684\u4e1c\u897f\u3002\n\u4f7f\u7528\u5efa\u7acb\u5728\u5f00\u6e90\u57fa\u7840\u4e0a\u7684\u670d\u52a1\u89e3\u51b3\u4e86\u8fd9\u4e24\u4e2a\u95ee\u9898\uff1a\u9996\u5148\uff0c\u5b58\u5728\u7ade\u4e89\u6258\u7ba1\u3002Stratechery\u76ee\u524d\u6258\u7ba1\u5728WPEngine\u4e0a\uff0c\u4f46\u662f\u6258\u7ba1\u6258\u7ba1\u9886\u57df\u6709\u5f88\u591a\u7ade\u4e89\u5bf9\u624b\uff0c\u5f53\u6d89\u53ca\u5230\u81ea\u6258\u7ba1\u65f6\uff0c\u751a\u81f3\u8fd8\u6709\u66f4\u591a\u7684\u9009\u62e9\u3002\u6b64\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5728AWS\u3001Digital Ocean\u751a\u81f3\u60a8\u7684\u4e2a\u4eba\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u6574\u4e2a\u670d\u52a1\u3002\n\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5982\u679c\u60a8\u5bf9\u60a8\u7684\u4e3b\u673a\u4e0d\u6ee1\u610f\uff0c\u5f88\u5bb9\u6613\u5207\u6362\uff1a\u60a8\u4e0d\u4ec5\u53ef\u4ee5\u66f4\u6539\u57df\u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u800c\u4e14\u5728\u670d\u52a1\u5668\u4e4b\u95f4\u65e0\u7f1d\u79fb\u52a8\u5185\u5bb9\u8981\u5bb9\u6613\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u5728\u8fd0\u884c\u76f8\u540c\u7684\u8f6f\u4ef6(\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u6574\u4e2a\u90e8\u5206\u4e5f\u9002\u7528\u4e8e\u90a3\u4e9b\u60f3\u8981\u6784\u5efa\u81ea\u5df1\u7684CMS\u7684\u4eba)\u3002\n\u6211\u8981\u6307\u51fa\u7684\u662f\uff0cWordPress\u5e76\u4e0d\u662f\u8fd9\u4e2a\u9886\u57df\u7684\u552f\u4e00\u9009\u62e9\uff1a\u8fd9\u7bc7\u6587\u7ae0\u5bf9\u5176\u4ed6\u5f00\u6e90CMS\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6982\u8ff0\uff0c\u5305\u62ecGhost\u3001Drupal\u3001Joomla\u7b49\u3002\n\u5982\u679c\u4f60\u5230\u76ee\u524d\u4e3a\u6b62\u90fd\u540c\u610f\u6211\u7684\u89c2\u70b9\uff0c\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u662f\u62e5\u6709\u4f60\u81ea\u5df1\u7684\u57df(\u8fd9\u5c31\u6392\u9664\u4e86Medium\u548cSubstack\uff0c\u81f3\u5c11\u5c31\u4e2a\u4eba\u7ad9\u70b9\u800c\u8a00\u662f\u8fd9\u6837)\uff0c\u5176\u6b21\u662f\u4f7f\u7528\u5f00\u6e90\u8f6f\u4ef6(\u5b83\u6392\u9664\u4e86Squaepace\u548cWix)\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u53ea\u5269\u4e0b\u4e24\u4e2a\u660e\u786e\u7684\u9009\u62e9\uff1aWordPress\u548cGhost\u3002\nGhost\u7684\u57fa\u672c\u524d\u63d0\u662f\uff0c\u5bf9\u4e8e\u535a\u5ba2\u4f5c\u8005\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u4e2a\u5927\u5927\u7b80\u5316\u3001\u66f4\u6613\u4e8e\u4f7f\u7528\u7684CMS\u3002WordPress\u53ef\u4ee5\u8fd0\u884c\u6240\u6709\u7c7b\u578b\u7684\u7f51\u7ad9\uff0c\u5176\u590d\u6742\u6027\u4e0d\u53ef\u907f\u514d\u5730\u6765\u81ea\u4e8e\u5982\u6b64\u591a\u7684\u529f\u80fd\uff1bGhost\u7531\u4e8e\u505a\u5f97\u66f4\u5c11\uff0c\u66f4\u5bb9\u6613\u4f7f\u7528\uff0c\u9700\u8981\u7684\u8d44\u6e90\u66f4\u5c11\uff0c\u7b49\u7b49\u3002\n\u95ee\u9898\u662f--\u81f3\u5c11\u5728\u6211\u770b\u6765--\u7075\u6d3b\u6027\u5c31\u662f\u9009\u62e9\u6027\u3002\u5982\u679c\u6709\u4e00\u5929\u60a8\u5e0c\u671b\u60a8\u7684\u7ad9\u70b9\u4e0d\u518d\u662f\u535a\u5ba2\uff0c\u4f46\u60a8\u4f7f\u7528\u7684\u662fGhost\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u7ecf\u5386\u6211\u5728\u4e0a\u9762\u63cf\u8ff0\u7684\u76f8\u540c\u7c7b\u578b\u7684\u8fc7\u6e21\u8fc7\u7a0b\u3002\u5f53\u7136\uff0c\u539f\u56e0\u53ef\u80fd\u4e0d\u540c\uff0c\u4f46\u75db\u82e6\u662f\u4e00\u6837\u7684\uff01\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4e00\u76f4\u662f\u5e76\u5c06\u7ee7\u7eed\u662f\u4f7f\u7528WordPress\u7684\u5021\u5bfc\u8005\u3002\u7279\u522b\u662f\u4f7f\u7528Gutenberg Editor\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u7684\u535a\u5ba2\u8bbe\u7f6e(\u662f\u7684\uff0c\u90a3\u91cc\u4ecd\u7136\u6709\u5f88\u591a\u95ee\u9898)\uff0c\u4f46\u662f\u60a8\u6709\u80fd\u529b\u5728\u672a\u6765\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\u6b64\u5916\uff0c\u63d2\u4ef6\u548c\u4e3b\u9898\u7684\u751f\u6001\u7cfb\u7edf\u610f\u5473\u7740\u5b8c\u6210\u8fd9\u4e00\u672a\u6765\u4efb\u52a1\u7684\u5de5\u5177\u53ef\u80fd\u5df2\u7ecf\u6784\u5efa\u597d\u4e86\u3002\u4f5c\u4e3a\u4e00\u540d\u5f00\u53d1\u8005\uff0c\u6211\u4e0d\u662f\u4ec0\u4e48\u4e86\u4e0d\u8d77\u7684\u4eba\uff0c\u4f46\u6211\u4e0d\u4ec5\u80fd\u591f\u63a8\u51faStratechery\uff0c\u800c\u4e14\u80fd\u591f\u63a8\u51fa\u7b2c\u4e00\u7248\u7684Daily Update\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u63d2\u4ef6\u5f00\u53d1\u8005\u548c\u4e3b\u9898\u6784\u5efa\u8005\u7684\u751f\u6001\u7cfb\u7edf(\u4eca\u5929\u7684Stratechery\u4e3b\u9898\u662f\u4e13\u4e1a\u5f00\u53d1\u7684\uff0c\u4f46\u8fd9\u662f\u53e6\u4e00\u79cd\u5173\u4e8e\u751f\u6001\u7cfb\u7edf\u7684\u8868\u8fbe\u65b9\u5f0f--\u90a3\u91cc\u6709\u5f88\u591aWordPress\u5f00\u53d1\u8005)\u3002\n\u81f3\u4e8e\u54ea\u4e2aWordPress\u4e3b\u673a\uff0c\u5982\u679c\u4f60\u60f3\u8981\u957f\u671f\u7a33\u5b9a\uff0cWordPress.com\u662f\u6700\u597d\u7684\u9009\u62e9\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u5b89\u88c5\u54ea\u4e9b\u63d2\u4ef6\u662f\u6709\u9650\u5236\u7684\uff1b\u4ed8\u8d39\u8d2d\u4e70\u6258\u7ba1\u670d\u52a1\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6298\u8877\u529e\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u4f60\u6446\u8131\u65e0\u4f11\u6b62\u7684\u8ffd\u52a0\u9500\u552e\uff0c\u8fd9\u79cd\u8ffd\u52a0\u9500\u552e\u53ef\u80fd\u662f\u201c\u514d\u8d39\u201d\u66ff\u4ee3\u65b9\u6848\u7684\u7279\u6709\u4e4b\u5904(Ghost\u4e5f\u6709\u4e00\u4e2a\u6258\u7ba1\u4e3b\u673a\u9009\u9879)\u3002\n\u518d\u8bf4\u4e00\u6b21\uff0c\u6211\u5bf9WordPress\u7edd\u5bf9\u6709\u504f\u89c1\uff0c\u4f46\u6211\u8ba4\u4e3a\u5f00\u6e90\u548c\u5927\u578b\u751f\u6001\u7cfb\u7edf\u7684\u7ed3\u5408\u771f\u7684\u5f88\u5f3a\u5927\u3002\u62e5\u6709\u81ea\u5df1\u7684\u7f51\u7ad9\u7684\u5168\u90e8\u610f\u4e49\u5728\u4e8e\u72ec\u7acb\uff0c\u4f46\u5982\u679c\u4f60\u662f\u4f17\u591a\u7f51\u7ad9\u4e2d\u7684\u4e00\u5458\uff0c\u72ec\u7acb\u5c31\u66f4\u5bb9\u6613\u4e86\u3002\u540c\u65f6\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u53e6\u4e00\u79cd\u9009\u62e9\u66f4\u597d\uff0c\u90a3\u5c31\u53bb\u505a\u5427--\u53ea\u9700\u83b7\u5f97\u4f60\u81ea\u5df1\u7684\u57df\u540d\u5373\u53ef\uff01", "note_en": "Blogs = still the best representation of the Internet\u2019s promise. Everyone should have a site that they own, not just a social media account (which are great for promoting blog posts).\n\u2014 Ben Thompson (@benthompson)  June 7, 2020\n That led to a number of questions as to where one should create a blog; helpfully, I now have a blog where I can answer exactly these sorts of questions!\n Before I get started, though, I need to give some necessary disclosure given the subject matter: I used to work at Automattic (the owner of the  WordPress.com hosting service, and major contributor to the  WordPress.org open source project), and Stratechery (and this site) runs on WordPress. On one hand, this is evidence that I follow my own advice; on the other, perhaps I am biased, but now you know why.\n   This matters far more than what service you use, because this is what allows you to switch between services in the future. If you have a Squarespace blog, but your domain is mysuperblog.net, you can switch to a WordPress blog and change where your domain points to (relatedly, you can also have an email address that is guaranteed to never change, even if you change email service providers). On the other hand, if you have a Medium handle, for example, you need to build your website\u2019s identity from scratch when and if you want to move.\n I would further suggest that you buy your domain independently from where you host your blog. Yes, Squarespace or WordPress or Wix all promise that you can point your domain elsewhere if you move your site (and of course you can always change your domain registrar), but part of what you are protecting yourself from is being too dependent on any one company.\n In addition, don\u2019t feel like you need a \u2018.com\u2019 domain; it is very hard to find one with a pronounceable name. The good news is that the  huge expansion in generic top-level domain names means there are a lot of interesting names available, and most everything supports these names without an issue.\n  If your site is on Squarespace or Wix, but under your own domain, you can switch to another service like WordPress and still have the same address, but there is going to be a bit of pain involved if you want to keep your old content: you will need to export your content out of your old service and import it into the new one.\n Moreover, there is no competition for Squarespace or Wix hosting: they are the only providers of Squarespace and Wix software, respectively. This is great as far as providing an integrated product goes, but in general it is not a good idea to be a customer of a monopoly (extremely narrowly defined, to be sure!), particularly for something you want to last your whole life.\n Using a service that is built on open-source solves both of these problems: first, there is competitive hosting. Stratechery is currently hosted on WPEngine, but there are a host of competitors in the managed hosting space, and even more options when it comes to self-hosting. Moreover, you can run the entire service yourself on AWS, Digital Ocean, or even your personal computer.\n This also means that if you are unsatisfied with your host it is easy to switch: not only can you change where your domain points, but it is far easier to seamlessly move content between servers, because they are all running the same software (this entire section, by the way, also applies to those who want to build their own CMS).\n WordPress, I should note, is not the only option in this space:  this post has a good overview of additional open-source CMSs, including Ghost, Drupal, Joomla, etc.\n  If you are with me so far, we have established that the most important thing is to own your own domain (which rules out Medium and Substack, at least as far as a personal site is concerned), followed by using open-source software (which rules out Squarespace and Wix). To me that leaves two clear choices: WordPress and  Ghost.\n The fundamental premise of Ghost is that it is a drastically simplified and thus easier-to-use CMS for bloggers. WordPress runs all kinds of websites, and has the complexity that inevitably follows from so much capability; Ghost, by virtue of doing less, is easier to use, requires fewer resources, etc.\n The problem \u2014 at least from my perspective \u2014 is that flexibility is optionality. If one day down the road you want your site to be something other than a blog, but you are using Ghost, you need to go through the same sort of transition process I described above. Sure, the reasons might be different, but the pain is the same!\n That is why I have been and continue to be an advocate of using WordPress. Particularly with the  Gutenberg Editor it is a pretty easy-to-use blogging set-up (yes, there is still a lot of cruft there), but you have the capability in place to do far more in the future. Moreover, the ecosystem of plugins and themes means the tools to do that future thing are probably already built. I\u2019m no great shakes as a developer, but I was able to launch not just Stratechery but also the first version of the Daily Update thanks to this ecosystem of plugin developer and theme builders (today\u2019s Stratechery theme was professionally developed, but that is another way of making a point about ecosystems \u2014 there are a lot of WordPress developers out there).\n As to which WordPress host, WordPress.com is the best choice if you want long-term stability, but there are limitations as to what plugins you can install; paying for a managed service is a nice middle ground, and gets you out of the endless up-selling that can be endemic on \u201cfree\u201d alternatives (Ghost also has a managed hosting option).\n Again, I\u2019m definitely biased about WordPress, but I think this combination of open-source and large ecosystem is really powerful. The entire point of having your own site is to be independent, but it is easier to be independent if you are one of many. At the same time, if you think an alternative is better, go right ahead \u2014 just get your own domain!", "posttime": "2020-06-09 00:56:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "stratechery,thompson,\u535a\u5ba2", "title": "\u672c\u00b7\u6c64\u666e\u68ee(Stratechery)\uff0c\u201cWhere to blog\uff1f\u201d", "title_en": "Ben Thompson (Stratechery) on \"Where to Blog?\"", "transed": 1, "url": "https://monkbent.net/where-to-blog/", "via": "", "real_tags": ["thompson", "\u535a\u5ba2"]}, {"category": "", "categoryclass": "", "imagename": "81e4e04dfce48b1b2f9fef3c1089df0a.gif", "infoid": 1005723, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u201c\u75af\u72c2\u201d\u6742\u5fd7\u5de5\u4f5c\u4e8665\u5e74\u540e\uff0c\u559c\u5267\u827a\u672f\u5bb6\u963f\u5c14\u00b7\u8d3e\u83f2\u5ba3\u5e03\u9000\u4f11\u3002\u8d3e\u83f2\u6700\u51fa\u540d\u7684\u662f\u4ed6\u7684\u201c\u75af\u72c2\u6298\u53e0\u201d\uff0c\u6298\u53e0\u9875\u9762\u4f1a\u5728\u827a\u672f\u54c1\u4e2d\u66b4\u9732\u51fa\u9690\u85cf\u7684\u4fe1\u606f\u3002\u5728\u7f51\u4e0a\u53ef\u4ee5\u627e\u5230\u5927\u91cf\u7684\u4f8b\u5b50\u3002\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u90fd\u662f\u9759\u6001\u5730\u5e76\u6392\u663e\u793a\u524d\u540e\u7684\uff0c\u8fd9\u5c31\u51cf\u5c11\u4e86\u9b54\u529b(\u8bf7\u770b\u8fd9\u91cc\u548c\u8fd9\u91cc)\u3002\n\u5f53\u7136\uff0c\u6211\u5fc5\u987b\u4e3a\u7f51\u7edc\u521b\u5efa\u6298\u53e0\u7eb8\u5f20\u7684\u6548\u679c\u3002\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u5f88\u597d\uff0c\u56e0\u4e3a\uff1a\n\u4f7f\u7528\u5355\u4e2a\u56fe\u50cf\uff0c\u800c\u4e0d\u9700\u8981\u5728Photoshop\u4e2d\u5bf9\u56fe\u50cf\u8fdb\u884c\u5207\u7247\u3002\n\u8fd9\u662f\u4e00\u4e2a\u5b9e\u9645\u64cd\u4f5c\u7684\u6f14\u793a\uff0c\u5728\u5e86\u795d\u8d3e\u83f298\u5c81\u751f\u65e5\u7684\u4e00\u671f\u6742\u5fd7\u4e0a\u4f7f\u7528\u4e86\u7ea6\u7ff0\u5c3c\u00b7\u6851\u666e\u68ee(Johnny Sampson)\u7684\u4f5c\u54c1\u3002\u60ac\u505c\u4ee5\u6298\u53e0\u3002\n\u6548\u679c\u7684HTML\u76f8\u5f53\u7b80\u5355\u3002\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u72ec\u7acb\u7684\u56fe\u50cf\u5143\u7d20-\u5b83\u662f\u9690\u85cf\u7684\uff0c\u4f46\u7528\u4e8e\u8bbe\u7f6e\u7ec4\u4ef6\u7684\u5927\u5c0f\u548c\u7eb5\u6a2a\u6bd4\u3002\u56fe\u50cf\u8def\u5f84\u5728\u90a3\u91cc\u6307\u5b9a\uff0c\u5e76\u518d\u6b21\u6307\u5b9a\u4e3aCSS\u53d8\u91cf\uff0c\u4ee5\u8bbe\u7f6e\u5176\u4ed6\u5143\u7d20\u7684\u80cc\u666f\u56fe\u50cf\u3002\n&lt\uff1bspan class=&#34\uff1bjaffee&34\uff1bstyle=&#34\uff1b--bg\uff1aurl(&#39\uff1bpath/to/image.png&39\uff1b)\uff1b&#34\uff1b&gt\uff1b&lt\uff1bspan class=&#34\uff1ba&#34\uff1b&gt\uff1b&lt\uff1b/span&gt\uff1b&lt\uff1bspan class=&#34\uff1bbc&34\uff1b&gt\uff1b&lt\uff1bspan class=&#34\uff1bb&\u3002C&#34\uff1b&&gt;\uff1b&lt\uff1b/SPAN&&gt;\uff1b&lt\uff1b/SPAN&&gt;\uff1b&lt\uff1bimg src=&#34\uff1bpath/to/image.png&#34\uff1b&gt\uff1b&lt\uff1b/span&gt\uff1b\n.jaffee{\u4f4d\u7f6e\uff1a\u76f8\u5bf9\uff1b\u663e\u793a\uff1a\u5185\u8054-flex\uff1b\u5bf9\u9f50-\u5185\u5bb9\uff1a\u4e2d\u5fc3\uff1b\u53d8\u6362\uff1aRotateX(10deg)\uff1b\u53d8\u6362\u6837\u5f0f\uff1a\u4fdd\u7559-3D\uff1b\u5149\u6807\uff1a\u6293\u53d6\uff1b}.jaffee img{width\uff1aauto\uff1bHeight\uff1aauto\uff1bmax-Height\uff1a80vh\uff1b\u4e0d\u900f\u660e\u5ea6\uff1a0\uff1b}.jaffee.a\uff0c.jaffee.B\uff0c.jaffee.c{top\uff1a0\uff1bdisplay\uff1ainline-block\uff1b\u9ad8\u5ea6\uff1a100%\uff1b\u80cc\u666f\u56fe\u50cf\uff1avar(\u5de6\uff1a0\uff1b\u5bbd\u5ea6\uff1a50%\uff1b\u80cc\u666f\u4f4d\u7f6e\uff1a0 0\uff1b}.jaffee.bc{\u4f4d\u7f6e\uff1a\u7edd\u5bf9\uff1b\u663e\u793a\uff1a\u5185\u8054\u4f38\u7f29\uff1b\u5bbd\u5ea6\uff1a50%\uff1b\u9ad8\u5ea6\uff1a100%\uff1b\u5de6\u4fa7\uff1a50%\uff1b\u53d8\u6362\u539f\u70b9\uff1a\u5de6\u4fa7\uff1b\u8fc7\u6e21\uff1a\u53d8\u63623S\uff1b\u53d8\u6362\u6837\u5f0f\uff1a\u4fdd\u7559-3D\uff1b}.jaffee.B\uff0c.jaffee.C{\u5bbd\u5ea6\uff1a50%\uff1b}.jaffee.B{\u4f4d\u7f6e\uff1a\u76f8\u5bf9\uff1b\u80cc\u666f\u4f4d\u7f6e\uff1a66.666667%0\uff1b}.jaffee.C{\u4f4d\u7f6e\uff1a\u76f8\u5bf9\uff1b\u80cc\u666f\u4f4d\u7f6e\uff1a66.666667%0\uff1b}.jaffee.C{\u4f4d\u7f6e\uff1a\u76f8\u5bf9\uff1b\u80cc\u9762-\u53ef\u89c1\u6027\uff1a\u9690\u85cf\uff1b}.jaffee\uff1a\u60ac\u505c.bc\uff0c.jaffee\uff1a\u6d3b\u52a8.bc{Transform\uff1arotateY(-180deg)transateZ(-0.1px)\uff1b\u53d8\u6362\uff1a\u53d8\u63622s\uff1b}.jaffee\uff1a\u60ac\u505c.c\uff0c.jaffee\uff1a\u6d3b\u52a8.c{Transform\uff1aRotateY(180deg)\uff1b\u53d8\u6362\uff1a\u53d8\u63623S\uff1b}", "note_en": "After 65 years at Mad Magazine, comic artist Al Jaffee  announced his retirement. Jaffee was best known for his Mad Fold-Ins, where folding the page would reveal a hidden message in the artwork. Plenty of examples can be found on the web. The problem is, they all show the before and after statically, side by side, which diminishes the magic (see  here and  here).\n Of course I had to create the paper folding effect for the web. There\u2019s many different ways to achieve this, but this approach is nice because:\n Uses a single image instead of requiring the image to be sliced up in Photoshop.\n Here\u2019s a demo of it in action, using artwork by Johnny Sampson  in an issue that celebrated Jaffee\u2019s 98th birthday. Hover to fold.\n     The HTML for the effect is fairly straightforward. You might be wondering about the standalone image element \u2014 it\u2019s hidden but used to set the size and aspect ratio of the component. The image path is specified there and once again as a CSS variable to set the background image of the other elements.\n &lt;span class=&#34;jaffee&#34; style=&#34;--bg: url(&#39;path/to/image.png&#39;);&#34;&gt; &lt;span class=&#34;a&#34;&gt;&lt;/span&gt; &lt;span class=&#34;bc&#34;&gt; &lt;span class=&#34;b&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;&lt;/span&gt; &lt;/span&gt; &lt;img src=&#34;path/to/image.png&#34;&gt;&lt;/span&gt;\n  .jaffee { position: relative; display: inline-flex; justify-content: center; transform: rotateX(10deg); transform-style: preserve-3d; cursor: grab;}.jaffee img { width: auto; height: auto; max-height: 80vh; opacity: 0;}.jaffee .a,.jaffee .b,.jaffee .c { top: 0; display: inline-block; height: 100%; background-image: var(--bg); background-size: cover; background-repeat: no-repeat;}.jaffee .a { position: absolute; left: 0; width: 50%; background-position: 0 0;}.jaffee .bc { position: absolute; display: inline-flex; width: 50%; height: 100%; left: 50%; transform-origin: left; transition: transform 3s; transform-style: preserve-3d;}.jaffee .b,.jaffee .c { width: 50%;}.jaffee .b { position: relative; background-position: 66.666667% 0;}.jaffee .c { position: relative; background-position: 100% 0; transform-origin: left; transition: transform 2s; backface-visibility: hidden;}.jaffee:hover .bc,.jaffee:active .bc { transform: rotateY(-180deg) translateZ(-0.1px); transition: transform 2s;}.jaffee:hover .c,.jaffee:active .c { transform: rotateY(180deg); transition: transform 3s;}", "posttime": "2020-06-09 00:54:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "jaffee,\u53d8\u6362", "title": "\u201cAl Jaffee/Mad\u201d\u6742\u5fd7\u5728CSS\u4e2d\u7684\u6298\u53e0\u6548\u5e94", "title_en": "The Al Jaffee / Mad Magazine Fold-In Effect in CSS", "transed": 1, "url": "https://thomaspark.co/2020/06/the-mad-magazine-fold-in-effect-in-css/", "via": "", "real_tags": ["jaffee", "\u53d8\u6362"]}, {"category": "", "categoryclass": "", "imagename": "09f0648270c0e4e488b018b488a70192.png", "infoid": 1005722, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e09\uff0c\u52a0\u5bc6\u901a\u8baf\u5e94\u7528Signal\u53d1\u5e03\u4e86\u4e00\u6b3e\u6a21\u7cca\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u6765\u5728\u5206\u4eab\u7167\u7247\u4e4b\u524d\u9690\u85cf\u4eba\u8138\u3002Signal\u8bf4\uff0c\u8fd9\u4e2a\u5de5\u5177\u65e8\u5728\u4fdd\u62a4\u76ee\u524d\u793a\u5a01\u53cd\u5bf9\u8b66\u5bdf\u66b4\u884c\u7684\u6297\u8bae\u8005\u7684\u8eab\u4efd\u3002\n\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u56fe\u50cf\u7f16\u8f91\u5668\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u70b9\u51fb\u5c4f\u5e55\u9876\u90e8\u7684\u65b0\u6a21\u7cca\u56fe\u6807\uff0c\u8be5\u5de5\u5177\u5c06\u81ea\u52a8\u68c0\u6d4b\u5e76\u6a21\u7cca\u7167\u7247\u4e2d\u7684\u9762\u5b54\u3002\u8be5\u5de5\u5177\u8fd8\u63d0\u4f9b\u4e86\u624b\u52a8\u6a21\u7cca\u56fe\u50cf\u5176\u4ed6\u533a\u57df\u7684\u9009\u9879\uff0c\u5982\u7eb9\u8eab\u3001\u5fbd\u6807\u3001\u8def\u724c\u548c\u5fbd\u7ae0\u3002\n\u8fd9\u4e9b\u7cfb\u7edf\u5e93\u5e76\u4e0d\u5b8c\u7f8e\u3002Signal\u5728\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8bf4\uff0c\u5b83\u4eec\u5e76\u4e0d\u662f100%\u7684\u65f6\u95f4\u90fd\u80fd\u68c0\u6d4b\u5230\u6bcf\u4e00\u5f20\u8138\uff0c\u8fd9\u4e9b\u7f3a\u9677\u548c\u6f5c\u5728\u7684\u504f\u5dee\u610f\u5473\u7740\u6269\u5c55\u5b83\u4eec\u7684\u9ed8\u8ba4\u529f\u80fd\u5f88\u91cd\u8981\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u603b\u662f\u7528\u6a21\u7cca\u753b\u7b14\u624b\u52a8\u6a21\u7cca\u7167\u7247\u4e2d\u7684\u5176\u4ed6\u9762\u5b54\u6216\u533a\u57df\u3002\u6211\u4eec\u4e5f\u4e00\u76f4\u5728\u52aa\u529b\u60f3\u51fa\u66f4\u591a\u7684\u65b9\u6cd5\u6765\u652f\u6301\u8857\u4e0a\u7684\u6bcf\u4e00\u4e2a\u4eba\u3002\n5\u670825\u65e5\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7\u00b7\u9a6c\u4e01(George Floyd)\u88ab\u6740\u540e\uff0c\u968f\u7740\u7f8e\u56fd\u5404\u5730\u793a\u5a01\u6d3b\u52a8\u7684\u589e\u52a0\uff0cSignal\u7684\u4e0b\u8f7d\u91cf\u6fc0\u589e\u3002Recode\u63f4\u5f15Apptopia\u7684\u6570\u636e\u79f0\uff0c\u81ea\u90a3\u4e00\u5929\u4ee5\u6765\uff0c\u8fd9\u6b3e\u5e94\u7528\u5728\u7f8e\u56fd\u7684\u4e0b\u8f7d\u91cf\u5df2\u8fbe12.1\u4e07\u6b21\u3002\n\u6a21\u7cca\u5de5\u5177\u53ef\u4ee5\u4e3a\u6297\u8bae\u8005\u63d0\u4f9b\u4e00\u4e9b\u4fdd\u62a4\uff0c\u4f7f\u5176\u514d\u53d7\u9762\u90e8\u8bc6\u522b\u7684\u5f71\u54cd\u3002\u5c3d\u7ba1\u9762\u90e8\u8bc6\u522b\u5e76\u4e0d\u603b\u662f\u51c6\u786e\uff0c\u4f46\u6267\u6cd5\u90e8\u95e8\u8d8a\u6765\u8d8a\u591a\u5730\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\uff0c\u7279\u522b\u662f\u5728\u5c11\u6570\u6c11\u65cf\u3001\u5973\u6027\u548c\u5e74\u8f7b\u4eba\u4e2d\u3002\n\u8138\u90e8\u6a21\u7cca\u5de5\u5177\u5c06\u88ab\u6dfb\u52a0\u5230\u6700\u65b0\u7248\u672c\u7684Android\u548ciOS\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002Signal\u8868\u793a\uff0c\u66f4\u65b0\u5df2\u7ecf\u63d0\u4ea4\u7ed9\u5e94\u7528\u5546\u5e97\uff0c\u5f88\u5feb\u5c31\u4f1a\u63a8\u51fa\u3002\n\u5c0a\u91cd\u4ed6\u4eba\uff0c\u4fdd\u6301\u6587\u660e\u793c\u8c8c\uff0c\u4e0d\u79bb\u9898\u3002\u6211\u4eec\u5220\u9664\u8fdd\u53cd\u6211\u4eec\u653f\u7b56\u7684\u8bc4\u8bba\uff0c\u6211\u4eec\u9f13\u52b1\u60a8\u9605\u8bfb\u8fd9\u4e9b\u8bc4\u8bba\u3002\u6211\u4eec\u53ef\u4ee5\u968f\u65f6\u5173\u95ed\u8ba8\u8bba\u7ebf\u7a0b\u3002", "note_en": "Encrypted messaging app Signal unveiled a  blur tool on Wednesday that can be used to hide faces in photos before sharing them. Signal said the tool aims to protect the identities of protesters  currently demonstrating against police brutality.\n While in the app&#39;s image editor, users can tap on the new blur icon at the top of the screen and the tool will automatically detect and blur the faces in the picture. The tool also gives the option to manually blur out other areas of the image such as tattoos, logos, street signs and badges.\n &#34;These system libraries are not perfect. They don&#39;t detect every face 100% of the time, and these flaws and potential biases meant that it was important to extend their default functionality so that you can always draw with the blur brush to manually obscure additional faces or areas in a photo,&#34; Signal said in a  blog post. &#34;We&#39;ve also been working to figure out additional ways we can support everyone in the street right now.&#34;\n  Signal has seen a spike in downloads as demonstrations grow across the US following the  killing of George Floyd\u00a0on May 25. Since that day, the app has been downloaded 121,000 times in the US,  according to Recode, citing data from Apptopia.\n The blur tool could offer protesters some protection from  facial recognition, which is increasingly being used by law enforcement even though  it&#39;s not always accurate, especially among ethnic groups, women and young people.\n The face blurring tool will be added to the latest version of the Android and iOS app. Signal said the update has already been submitted to app stores and will be available soon.\n  Be respectful, keep it civil and stay on topic. We delete comments that violate  our policy, which we encourage you to read. Discussion threads can be closed at any time at our discretion.", "posttime": "2020-06-09 00:37:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u901a\u8baf,messaging,\u5de5\u5177", "title": "\u52a0\u5bc6\u901a\u8baf\u5e94\u7528Signal\u4e3a\u6297\u8bae\u8005\u589e\u52a0\u9762\u90e8\u8bc6\u522b\u4fdd\u62a4", "title_en": "Encrypted messaging app Signal adds facial recognition protection for protesters", "transed": 1, "url": "https://www.cnet.com/news/popular-encrypted-messaging-app-signal-adds-facial-recognition-protection-for-protesters/", "via": "", "real_tags": ["app", "\u901a\u8baf", "messaging", "\u5de5\u5177"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005719, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bf7\u4e0d\u8981\u7406\u4f1a\u8fd9\u4e2a\u76d2\u5b50\u3002", "note_en": "Ignore this box please.", "posttime": "2020-06-08 23:47:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "duckduckgo,broken,\u7406\u4f1a", "title": "DuckDuckGo\u5931\u8d25\u4e86\uff0c\u6bcf\u6b21\u641c\u7d22\u90fd\u8fd4\u56de\u96f6\u7ed3\u679c", "title_en": "DuckDuckGo is broken, returning zero results for every search", "transed": 1, "url": "https://duckduckgo.com/?q=hacker+news", "via": "", "real_tags": ["broken", "\u7406\u4f1a"]}, {"category": "", "categoryclass": "", "imagename": "2d77076380c16e668bf5922cb8d4f995.png", "infoid": 1005718, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u548c\u6211\u7684\u670b\u53cb\u73cd\u59ae\u00b7\u535a\u4f0a\u5170(Jenny Boylan)\u90fd\u662f\u4e0d\u53ef\u6551\u836f\u7684\u665a\u5bb4\u5065\u8c08\u8005\uff0c\u4ed6\u4eec\u559c\u6b22\u7528\u6211\u4eec\u6325\u970d\u7684\u9752\u6625\u548c\u53e4\u602a\u7684\u5bb6\u5ead\u7684\u6545\u4e8b\u80dc\u8fc7\u5bf9\u65b9\u3002\u56e0\u4e3a\u6211\u4eec\u90fd\u662f\u4f5c\u5bb6\uff0c\u6240\u4ee5\u8fd9\u4e9b\u6545\u4e8b\u4e2d\u6700\u597d\u7684\u90fd\u6709\u88ab\u76d7\u7684\u98ce\u9669\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u901a\u5e38\u53ea\u8981\u8bf4\u8bdd\u8005\u7684\u58f0\u97f3\u964d\u4f4e\uff0c\u542c\u4f17\u5c31\u4f1a\u53d1\u51fa\u901a\u77e5\uff1a\u6211\u4eec\u8b66\u544a\u8bf4\uff0c\u4f60\u6709\u4e00\u5e74\u7684\u65f6\u95f4\u6765\u4f7f\u7528\u8fd9\u4e2a\u901a\u77e5\uff0c\u4e4b\u540e\u6545\u4e8b\u5c31\u4f1a\u6210\u4e3a\u516c\u5e73\u7684\u7ade\u4e89\u5bf9\u624b\u3002\u5f53\u7136\uff0c\u4e0e\u5176\u8bf4\u8fd9\u4e9b\u662f\u6587\u5b66\u610f\u4e49\u4e0a\u7684\u201c\u6545\u4e8b\u201d\uff0c\u4e0d\u5982\u8bf4\u662f\u5145\u6ee1\u9152\u7cbe\u7684\u8f76\u4e8b\uff0c\u800c\u4e14\u901a\u5e38\u5b83\u751a\u81f3\u4e0d\u662f\u6211\u4eec\u68a6\u5bd0\u4ee5\u6c42\u7684\u6574\u4e2a\u6545\u4e8b\uff0c\u4e5f\u8bb8\u53ea\u662f\u5b83\u7684\u80cc\u666f\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u7279\u522b\u751f\u52a8\u7684\u5f62\u8c61\u3002\u73cd\u59ae\u6709\u4e00\u6b21\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u544a\u8bc9\u6211\u5979\u7684\u4e00\u4f4d\u4eb2\u621a\u7684\u6f2b\u957f\u63a2\u8bbf\u603b\u662f\u5728\u4ed6\u5de8\u5927\u7684\u7bb1\u5b50\u5230\u8fbe\u4e4b\u524d\uff0c\u6709\u65f6\u662f\u51e0\u5468\u524d\uff1b\u8fd9\u4e2a\u60f3\u6cd5\u5982\u6b64\u6fc0\u8d77\u6211\u7684\u60f3\u8c61\u529b\uff0c\u4ee5\u81f3\u4e8e\u6211\u628a\u5b83\u4f5c\u4e3a\u7535\u5f71\u300a\u517b\u80b2\u5988\u5988\u300b\u7684\u5267\u672c\u7684\u57fa\u7840\u3002(\u4e0d\uff0c\u6211\u6ca1\u6709\u5206\u4eab\u8fd9\u7b14\u94b1\u3002)\u3002\u6211\u4eec\u7684\u534f\u8bae\u4e2d\u9690\u542b\u7740\u4e00\u4e2a\u5171\u540c\u7684\u4fe1\u5ff5\uff0c\u5373\u6ca1\u6709\u4eba\u771f\u6b63\u201c\u62e5\u6709\u201d\u521b\u4f5c\u5c0f\u8bf4\u7684\u539f\u6750\u6599\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u6211\u4eec\u662f\u5982\u6b64\u597d\u7684\u670b\u53cb\u7684\u4e8b\u5b9e\u4e5f\u8d77\u5230\u4e86\u4e00\u5b9a\u7684\u4f5c\u7528\u3002\u6211\u4eec\u5206\u4eab\u4e00\u4e9b\u6700\u597d\u7684\u6750\u6599\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u53ef\u4ee5\u7528\u4eb2\u5bc6\u7684\u77e5\u8bc6\u76f8\u4e92\u4fe1\u4efb\u3002\u5f53\u73cd\u59ae\u51b3\u5b9a\u53d8\u6027\u65f6\uff0c\u6211\u662f\u5979\u6700\u5148\u5410\u9732\u5fc3\u58f0\u7684\u4eba\u4e4b\u4e00\uff0c\u5f53\u5979\u63a5\u53d7\u6027\u522b\u786e\u8ba4\u624b\u672f\u65f6\uff0c\u6211\u548c\u5979\u5728\u4e00\u8d77\u3002\u56e0\u6b64\uff0c\u5728\u8fc7\u53bb\u5341\u5e74\u5de6\u53f3\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u6bd4\u5927\u591a\u6570\u987a\u52bf\u7537\u6027\u6709\u66f4\u597d\u7684\u7a97\u53e3\u6765\u770b\u5f85\u8de8\u6027\u5973\u6027\u7684\u751f\u6d3b\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4ece\u6765\u6ca1\u6709\u5728\u6211\u7684\u5c0f\u8bf4\u4e2d\u52a0\u5165\u8fc7\u8de8\u6027\u89d2\u8272\u3002\u6211\u8ba4\u4e3a\u8fd9\u610f\u5473\u7740\u6211\u81ea\u613f\u9650\u5236\u4e86\u6211\u613f\u610f\u501f\u7684\u4e1c\u897f\u548c\u6211\u80fd\u60f3\u8c61\u7684\u4e1c\u897f\u3002\u6211\u4e0d\u4f1a\u4e89\u8fa9\u8bf4\u6211\u4e5f\u6ca1\u6709\u6743\u5229\u8fd9\u4e48\u505a\uff0c\u53ea\u662f\u6211\u53d7\u5230\u53cb\u8c0a\u7684\u675f\u7f1a\u3002\n\u4f46\u60c5\u51b5\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\uff0c\u5373\u4f7f\u6d89\u53ca\u5230\u7231\u60c5\u3002\u6211\u5988\u5988\u4f1a\u8ba8\u538c\u6211\u56de\u5fc6\u5f55\u91cc\u7684\u6bcf\u4e00\u4e2a\u5b57\uff0c\u4e0d\u7ba1\u662f\u5728\u522b\u7684\u5730\u65b9\u3002\u867d\u7136\u6211\u4ece\u672a\u627f\u8bfa\u8fc7\u4e0d\u5199\u5979\u7684\u751f\u6d3b--\u6211\u5728\u65e9\u671f\u7684\u5c0f\u8bf4\u4e2d\u5c31\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86--\u4f46\u5979\u5728\u5176\u4ed6\u5730\u65b9\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u53ef\u6015\u7684\u80cc\u53db\u3002\u6211\u7b49\u5230\u5979\u6b7b\u4e86\u624d\u5199\uff0c\u8fd9\u771f\u7684\u65e0\u5173\u7d27\u8981\uff0c\u56e0\u4e3a\u5176\u4ed6\u7231\u5979\u7684\u4eba\u8fd8\u6d3b\u7740\uff0c\u6211\u544a\u8bc9\u90a3\u4e9b\u4eba\u4e00\u4e2a\u5979\u4e00\u751f\u90fd\u4ed8\u51fa\u4e86\u5de8\u5927\u4ee3\u4ef7\u4fdd\u5b88\u7684\u79d8\u5bc6\uff1a\u5979\u60a3\u6709\u4e25\u91cd\u7684\u7126\u8651\uff0c\u8868\u73b0\u4e3a\u762b\u75ea\u7684\u6050\u614c\u75c7\u53d1\u4f5c\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u7531\u4e8e\u4ed6\u4eec\u5f97\u4e0d\u5230\u6cbb\u7597\uff0c\u8fd9\u79cd\u60c5\u51b5\u53d8\u5f97\u8d8a\u6765\u8d8a\u4e25\u91cd\u3002\n\u6211\u5728\u522b\u5904\u5199\u7684\u4e1c\u897f\u610f\u5473\u7740\u5979\u7684\u8bb8\u591a\u670b\u53cb\u548c\u4eb2\u621a\u4e0d\u80fd\u50cf\u5979\u5e0c\u671b\u7684\u90a3\u6837\u8bb0\u4f4f\u5979\u3002\u4f60\u4f1a\u95ee\uff0c\u8c01\u4f1a\u505a\u8fd9\u6837\u7684\u4e8b\uff1f\u55ef\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u4f5c\u5bb6\u4eec\u51e0\u4e4e\u6bcf\u6b21\u5199\u5b57\u7684\u65f6\u5019\u90fd\u662f\u8fd9\u6837\u505a\u7684\u3002\u6211\u4eec\u5c31\u50cf\u5176\u4ed6\u827a\u672f\u5bb6\u4e00\u6837--\u753b\u5bb6\u3001\u6444\u5f71\u5e08\u3001\u7535\u5f71\u5236\u4f5c\u4eba\u3001\u97f3\u4e50\u5bb6--\u4f7f\u7528\u624b\u5934\u7684\u4efb\u4f55\u6750\u6599\uff0c\u5c31\u50cf\u6728\u5320\u4f7f\u7528\u9489\u5b50\u548c\u6728\u5934\u4e00\u6837\u3002\u6ca1\u6709\u8fd9\u4e9b\u6750\u6599\uff0c\u6211\u4eec\u5c31\u5173\u95e8\u5927\u5409\u4e86\u3002\u4ec0\u4e48\u90fd\u505a\u4e0d\u51fa\u6765\u3002\u5f17\u5170\u7eb3\u91cc\u00b7\u5965\u5eb7\u7eb3(Flannery O\u2018Connor)\u8ba4\u4e3a\uff0c\u4f5c\u5bb6\u7684\u7d20\u6750\u662f\u5351\u5fae\u7684--\u4e16\u754c\u4e0a\u5b58\u5728\u7684\u4efb\u4f55\u4e1c\u897f\uff0c\u4efb\u4f55\u611f\u5b98\u53ef\u4ee5\u7406\u89e3\u7684\u4e1c\u897f--\u4e5f\u5c31\u662f\u5ca9\u77f3\u3001\u6811\u6728\u548c\u6e56\u6cca\uff0c\u662f\u7684\uff0c\u8fd8\u6709\u4eba\u3002\u4e5f\u8bb8\u503c\u5f97\u518d\u8bf4\u4e00\u904d\uff1a\u4f5c\u5bb6\u5229\u7528\u4eba\u3002\u8fd9\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4e5f\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u6700\u91cd\u8981\u7684\u662f\u6211\u4eec\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\uff0c\u4e3a\u4e86\u4ec0\u4e48\u76ee\u7684\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u4f4d\u516b\u5341\u591a\u5c81\u7684\u4fee\u5973\u662f\u62111998\u5e74\u5728\u8fd9\u672c\u6742\u5fd7\u4e0a\u53d1\u8868\u7684\u6545\u4e8b\u201c\u5993\u5973\u7684\u5b69\u5b50\u201d\u7684\u4e3b\u4eba\u516c\u3002\u5728\u8fd9\u672c\u4e66\u4e2d\uff0c\u4e4c\u82cf\u62c9\u4fee\u5973\u5728\u4e00\u4e2a\u5b66\u671f\u7684\u65f6\u95f4\u91cc\uff0c\u5411\u4e00\u4e2a\u521b\u610f\u5199\u4f5c\u5de5\u4f5c\u5ba4\u7684\u5176\u4ed6\u5b66\u751f\u8bb2\u8ff0\u4e86\u5979\u7684\u4eba\u751f\u6545\u4e8b\uff1a\u5979\u5c0f\u65f6\u5019\u662f\u5982\u4f55\u4f5c\u4e3a\u4e00\u4e2a\u5993\u5973\u7684\u5973\u513f\u88ab\u5e26\u5230\u4fee\u9053\u9662\u5e76\u88ab\u9057\u5f03\u5728\u90a3\u91cc\u7684\uff1b\u5979\u662f\u5982\u4f55\u88ab\u65e0\u60c5\u5730\u53d6\u7b11\u7684\uff0c\u4e0d\u4ec5\u662f\u5176\u4ed6\u5b69\u5b50\uff0c\u8fd8\u6709\u4fee\u5973\u4eec\uff1b\u5979\u662f\u5982\u4f55\u8010\u5fc3\u5730\u7b49\u5f85\u5979\u4eb2\u7231\u7684\u7236\u4eb2\u7684\u62ef\u6551\u7684\uff0c\u4ed6\u90d1\u91cd\u5730\u627f\u8bfa\uff0c\u4e00\u65e6\u627e\u5230\u5de5\u4f5c\uff0c\u5c31\u4f1a\u53bb\u63a5\u5979\u3002\u8fd9\u662f\u4e00\u4e2a\u6b8b\u9177\u7684\u6545\u4e8b\uff0c\u66f4\u6b8b\u9177\u7684\u662f\uff0c\u5728\u4e4c\u82cf\u62c9\u4fee\u5973\u7684\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u5ba4\u91cc\uff0c\u53e6\u4e00\u4e2a\u5b66\u751f\u76f4\u89c9\u5730\u53d1\u73b0\u4e86\u4e00\u4e2a\u53ef\u6015\u7684\u4e8b\u5b9e\uff0c\u8fd9\u4f4d\u8001\u4fee\u5973\u81ea\u5df1\u4ece\u672a\u6000\u7591\u8fc7\uff1a\u5979\u7684\u7236\u4eb2\uff0c\u5979\u4e00\u76f4\u6307\u671b\u4ed6\u6765\u6551\u5979\u7684\u4eba\uff0c\u662f\u5979\u6bcd\u4eb2\u7684\u76ae\u6761\u5ba2\uff0c\u4ed6\u627e\u5de5\u4f5c\u662f\u4e2a\u8c0e\u8a00\u3002\u5728\u5384\u4f11\u62c9\u4fee\u5973\u7684\u4e00\u751f\u4e2d\uff0c\u5979\u603b\u662f\u628a\u522b\u4eba\u7684\u8fc7\u9519\u5f52\u548e\u4e8e\u5979\u7684\u6bcd\u4eb2\u3002\u5bf9\u4e8e\u5979\u5d07\u62dc\u7684\u7236\u4eb2\u6765\u8bf4\uff0c\u5979\u4e00\u76f4\u662f\u53ef\u4ee5\u727a\u7272\u7684\u3002\n\u5f53\u6211\u5e26\u7740\u6211\u7684\u7b2c\u4e00\u4e2a\u6545\u4e8b\u96c6\u5de1\u56de\u6f14\u51fa\u65f6\uff0c\u6211\u65e2\u60ca\u8bb6\u53c8\u6fc0\u52a8\u5730\u5f97\u77e5\u8fd9\u4e2a\u6545\u4e8b\u662f\u5982\u6b64\u6709\u529b\u5730\u843d\u5730\uff0c\u8fd9\u4e5f\u662f\u6211\u7684\u7b2c\u4e00\u4e2a\u6545\u4e8b\u96c6\uff0c\u4e5f\u53eb\u201c\u5993\u5973\u7684\u5b69\u5b50\u201d\u3002\u4e4c\u82cf\u62c9\u4fee\u5973\u4f24\u900f\u4e86\u8bfb\u8005\u7684\u5fc3\uff0c\u5c31\u50cf\u5979\u4f24\u900f\u4e86\u6211\u7684\u5fc3\u4e00\u6837\u3002\u6545\u4e8b\u7684\u53e6\u4e00\u4e2a\u4e3b\u4eba\u516c\u5374\u5e76\u975e\u5982\u6b64\uff0c\u4e00\u4e2a\u6559\u521b\u610f\u5199\u4f5c\u8bfe\u7a0b\u7684\u4e2d\u5e74\u6559\u6388\uff0c\u4e00\u4e2a\u4e8b\u4e1a\u505c\u6ede\u4e0d\u524d\uff0c\u5a5a\u59fb\u56e0\u5a5a\u5916\u60c5\u800c\u7834\u88c2\u7684\u5c0f\u8bf4\u5bb6\u3002\u56e0\u4e3a\u6211\u4e5f\u662f\u4e00\u4e2a\u6559\u521b\u610f\u5199\u4f5c\u7684\u4e2d\u5e74\u5c0f\u8bf4\u5bb6\uff0c\u6240\u4ee5\u5f53\u8bfb\u8005\u60f3\u77e5\u9053\u6211\u81ea\u5df1\u662f\u4e0d\u662f\u6545\u4e8b\u4e2d\u7684\u4f5c\u5bb6\u65f6\uff0c\u6211\u5e76\u4e0d\u611f\u5230\u60ca\u8bb6\u3002\u6211\u8981\u79bb\u5a5a\u4e86\u5417\uff1f\u6211\u662f\u4e0d\u662f\u89c9\u5f97\u6211\u81ea\u5df1\u7684\u5199\u4f5c\u751f\u6daf\u505c\u6ede\u4e0d\u524d\u4e86\uff1f\u5bf9\u4e8e\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u6211\u7ed9\u4e86\u4e00\u4e2a\u5706\u6ed1\u7684\u56de\u7b54\uff0c\u81f3\u5c11\u6709\u4e00\u534a\u662f\u8ba4\u771f\u7684\u3002WH\n\u6211\u7684\u610f\u601d\u662f\uff0c\u4e0d\u7ba1\u4e4c\u82cf\u62c9\u4fee\u5973\u548c\u6211\u6709\u591a\u4e48\u4e0d\u540c\uff0c\u6211\u6ca1\u6709\u5fc5\u8981\u7f16\u9020\u6545\u4e8b\u7684\u6240\u6709\u53d9\u8ff0\u7ec6\u8282\u3002\u6211\u6709\u673a\u4f1a\u7814\u7a76\u6211\u7684\u89d2\u8272\u6240\u4f9d\u636e\u7684\u771f\u5b9e\u5973\u4eba\u3002\u6211\u4ed4\u7ec6\u9605\u8bfb\u4e86\u5979\u7684\u53d9\u8ff0\uff0c\u6bcf\u671f\u7ed3\u675f\u540e\uff0c\u5979\u548c\u6211\u90fd\u4f1a\u89c1\u9762\u8ba8\u8bba\u8bfe\u6587\u548c\u5176\u4ed6\u5b66\u751f\u5728\u8bfe\u5802\u4e0a\u8bf4\u7684\u8bdd\u3002\u5c31\u50cf\u53d9\u8ff0\u8005\u5728\u6211\u7684\u6545\u4e8b\u4e2d\u6240\u505a\u7684\u90a3\u6837\uff0c\u6211\u8bb0\u5f97\u6211\u544a\u8bc9\u5979\uff0c\u5728\u5c0f\u8bf4\u5199\u4f5c\u8bfe\u4e0a\uff0c\u7f16\u9020\u4e1c\u897f\u662f\u53ef\u4ee5\u7684-\u5373\u4f7f\u662f(\u5598\u6c14\uff01)\u3002\u5982\u679c\u8c0e\u8a00\u80fd\u4e3a\u66f4\u5927\u7684\u771f\u7406\u670d\u52a1\uff0c\u6211\u5c31\u4f1a\u6492\u8c0e--\u6211\u6ce8\u610f\u5230\u90a3\u4e2a\u53ef\u601c\u7684\u5973\u4eba\u4e0d\u613f\u63a5\u53d7\u6211\u7684\u5efa\u8bae\u3002\u5728\u90a3\u4e2a\u5b66\u671f\u91cc\uff0c\u6211\u89c2\u5bdf\u4e86\u5979\u662f\u5982\u4f55\u73af\u6e38\u4e16\u754c\u7684\uff0c\u5979\u662f\u591a\u4e48\u5c3d\u804c\u5c3d\u8d23\u5730\u9605\u8bfb\u5176\u4ed6\u5b66\u751f\u7684\u6545\u4e8b\uff0c\u5f53\u5979\u9605\u8bfb\u8fd9\u4e9b\u6545\u4e8b\u65f6\uff0c\u5979\u53d8\u5f97\u591a\u4e48\u56f0\u60d1\u548c\u56f0\u60d1\u3002\u5c31\u8fde\u5979\u90a3\u597d\u5947\u7684\u3001\u6709\u65f6\u8fd8\u5f88\u9732\u9aa8\u7684\u53e5\u6cd5\u4e5f\u5728\u6211\u7684\u6545\u4e8b\u91cc\u7ed3\u675f\u4e86\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u5bf9\u771f\u5b9e\u5973\u4eba\u7684\u89c2\u5bdf\u7f29\u5c0f\u4e86\u6211\u548c\u6211\u865a\u6784\u7684\u4fee\u5973\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002\u4e4c\u82cf\u62c9\u4fee\u5973\u516b\u5341\u5c81\uff0c\u6211\u56db\u5341\u4e94\u5c81\u3002\u5979\u662f\u4fee\u5973\uff0c\u6211\u662f\u82f1\u8bed\u6559\u6388\u3002\u5979\u662f\u6b27\u6d32\u4eba\uff0c\u6211\u662f\u7f8e\u56fd\u4eba\uff1b\u5979\u7a77\uff0c\u6211\u662f\u8212\u9002\u7684\u4e2d\u4ea7\u9636\u7ea7\u3002\u8fd9\u4e9b\u5dee\u5f02\u5e76\u4e0d\u90a3\u4e48\u91cd\u8981\u3002\u90a3\u4e48\uff0c\u2009.\u2009\u3002\u514d\u8d39\u56de\u5bb6\uff0c\u5bf9\u5427\uff1f\u4e0d\u5b8c\u5168\u540c\u610f\u3002\n\u6211\u4e00\u76f4\u5728\u8ba8\u8bba\u7684\u662f\u5982\u4f55\u5199\u4e00\u4e2a\u9700\u8981\u67d0\u79cd\u7a0b\u5ea6\u8d85\u8d8a\u7684\u6545\u4e8b\uff1a\u4f60\u5982\u4f55\u53bb\u5f25\u5408\u4f60\u77e5\u9053\u7684\u548c\u4f60\u4e0d\u77e5\u9053\u7684\uff0c\u6709\u65f6\u4e0d\u77e5\u9053\u7684\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002\u4f46\u5f52\u6839\u7ed3\u5e95\uff0c\u8fd9\u624d\u662f\u4e3a\u4ec0\u4e48\u6700\u91cd\u8981\u7684\u539f\u56e0\u3002\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u5c31\u8981\u8bb2\u8fd9\u4e2a\u6545\u4e8b\u5462\uff1f\u56de\u5230\u4fee\u5973\u5728\u6211\u7684\u5199\u4f5c\u8bfe\u4e0a\u7684\u65f6\u5019\uff0c\u6211\u6839\u672c\u4e0d\u77e5\u9053\u6211\u4f1a\u7528\u5230\u5979\u3002\u6211\u77e5\u9053\u7684\u662f\uff0c\u5c31\u50cf\u4f5c\u5bb6\u4eec\u7ecf\u5e38\u505a\u7684\u90a3\u6837\uff0c\u5979\u6fc0\u8d77\u4e86\u6211\u7684\u5174\u8da3\u3002\u50cf\u5927\u591a\u6570\u4f5c\u5bb6\u4e00\u6837\uff0c\u6211\u65e0\u610f\u8bc6\u5730\u628a\u6240\u6709\u4e1c\u897f\u5206\u6210\u4e24\u7c7b\uff1a\u4e00\u7c7b\u662f\u6709\u4e00\u5929\u53ef\u80fd\u6709\u7528\u7684\uff0c\u53e6\u4e00\u7c7b\u662f\u5176\u4ed6\u7684\u3002\u8fd9\u662f\u4e00\u4e2a\u4ee4\u4eba\u5c34\u5c2c\u7684\u4e60\u60ef\uff0c\u81ea\u79c1\u5230\u4e86\u6781\u70b9\uff0c\u4f46\u8fd9\u4e5f\u662f\u4e00\u79cd\u5206\u7c7b\uff0c\u56e0\u4e3a\u4f60\u4e0d\u53ef\u80fd\u5bf9\u6240\u6709\u4e8b\u60c5\u90fd\u7ed9\u4e88\u540c\u7b49\u7684\u5173\u6ce8\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u540d\u827a\u672f\u5bb6\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4f60\u4f1a\u53d1\u73b0\u5bf9\u4f60\u6765\u8bf4\u4ec0\u4e48\u662f\u91cd\u8981\u7684\uff0c\u800c\u4e0d\u662f\u4ec0\u4e48\u662f\u91cd\u8981\u7684\u3002\u4ec0\u4e48\u53ef\u80fd\u7ed3\u51fa\u679c\u5b9e\uff0c\u4ec0\u4e48\u4e0d\u4f1a\u7ed3\u51fa\u679c\u5b9e\u3002\u5728\u6211\u6559\u521b\u610f\u5199\u4f5c\u8bfe\u540e\u6574\u6574\u5341\u5e74\uff0c\u6211\u624d\u4f1a\u5199\u865a\u6784\u7684\u90a3\u95e8\u8bfe\uff0c\u5728\u6211\u5982\u6b64\u4ed4\u7ec6\u5730\u7814\u7a76\u90a3\u4e2a\u5e74\u8fc8\u7684\u4fee\u5973\u4e4b\u524d\u7684\u5341\u5e74\uff0c\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1a\u4ece\u5927\u8111\u540e\u90e8\u4e00\u7638\u4e00\u62d0\u5730\u8d70\u5230\u524d\u9762\uff0c\u786e\u5207\u5730\u89e3\u91ca\u5979\u5bf9\u6211\u610f\u5473\u7740\u4ec0\u4e48\u3002\n\u4f46\u5979\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\u5462\uff1f\u4e3a\u4ec0\u4e48\u662f\u6211\u5199\u4e86\u5979\u7684\u6545\u4e8b\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u7684\u5462\uff1f\u56e0\u4e3a\u6211\u8bb0\u5f97\u5979\u592a\u591a\u4e86\uff1f\u56e0\u4e3a\u6211\u901a\u8fc7\u4ed4\u7ec6\u89c2\u5bdf\u6240\u5b66\u5230\u7684\u4e1c\u897f\u7ed9\u4e86\u6211\u5f00\u59cb\u6240\u9700\u7684\u4fe1\u5fc3\uff1f\u8fd9\u53ef\u80fd\u662f\u6709\u4e00\u5b9a\u9053\u7406\u7684\u3002\u8c01\u4e0d\u60f3\u611f\u5230\u81ea\u4fe1\uff0c\u5c24\u5176\u662f\u5728\u8270\u96be\u7684\u52aa\u529b\u5f00\u59cb\u7684\u65f6\u5019\uff1f\u4f46\u662f\uff0c\u4f5c\u5bb6--\u81f3\u5c11\u662f\u4f18\u79c0\u7684\u4f5c\u5bb6--\u66f4\u559c\u6b22\u95ee\u9898\u800c\u4e0d\u662f\u7b54\u6848\uff0c\u8fd9\u4e5f\u662f\u4e8b\u5b9e\u3002\u5982\u679c\u53ea\u6709\u77e5\u8bc6\u624d\u80fd\u5199\u51fa\u4e00\u7bc7\u597d\u6545\u4e8b\uff0c\u90a3\u4e48\u6240\u6709\u7684\u827a\u672f\u96be\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fdb\u4e00\u6b65\u7684\u7814\u7a76\u6765\u89e3\u51b3\uff0c\u60f3\u8c61\u529b\u6839\u672c\u5c31\u4e0d\u4f1a\u88ab\u8003\u8651\u8fdb\u53bb\u3002\u6700\u7ec8\u8bf4\u670d\u4f5c\u8005\u5f00\u59cb\u5199\u6545\u4e8b\u7684\u662f\u5bf9\u4ed6\u77e5\u8bc6\u7684\u4e0d\u4fe1\u4efb\u3002\u76f8\u53cd\uff0c\u4ed6\u611f\u89c9\u5230\u81ea\u5df1\u548c\u4ed6\u6240\u5199\u7684\u4eba(\u6216\u4eba)\u4e4b\u95f4\u6709\u4e00\u79cd\u5f3a\u5927\u7684\u7ebd\u5e26\uff0c\u8fd9\u79cd\u7ebd\u5e26\u8ba9\u8fd9\u6bb5\u5371\u9669\u7684\u65c5\u7a0b\u53d8\u5f97\u503c\u5f97\u3002\n\u5f53\u6211\u95ee\u4e3a\u4ec0\u4e48\u8fd9\u4f4d\u8001\u4fee\u5973\u4ece\u6211\u7684\u8111\u540e\u79fb\u5230\u4e86\u524d\u9762\uff0c\u6211\u771f\u6b63\u60f3\u95ee\u7684\u662f\uff1a\u5f53\u6211\u8fd9\u5b9d\u8d35\u751f\u547d\u768490%\u7684\u7b2c\u4e00\u624b\u7ecf\u9a8c\u672a\u7ecf\u6df1\u601d\u719f\u8651\u5c31\u88ab\u6254\u8fdb\u4e86\u8bb0\u5fc6\u7684\u5783\u573e\u5806\u65f6\uff0c\u5979\u4e3a\u4ec0\u4e48\u5982\u6b64\u91cd\u8981\uff0c\u4ee5\u81f3\u4e8e\u8fd8\u80fd\u8bb0\u5f97\uff1f\u867d\u7136\u6211\u548c\u6211\u7684\u89d2\u8272\u53ef\u80fd\u4e0d\u540c\uff0c\u4f46\u8fd9\u4f4d\u8001\u5987\u4eba\u7684\u6545\u4e8b\u4e0d\u77e5\u4f55\u6545\u4e0e\u6211\u7684\u76f8\u4ea4\u3002\u662f\u4e0d\u662f\u56e0\u4e3a\u5979\u4e00\u751f\u4e2d\u82b1\u4e86\u8fd9\u4e48\u591a\u65f6\u95f4\u7b49\u5979\u7236\u4eb2\u56de\u6765\uff0c\u5c31\u50cf\u6211\u5728\u7236\u6bcd\u5206\u5c45\u540e\u6240\u505a\u7684\u90a3\u6837\uff1f\u662f\u4e0d\u662f\u56e0\u4e3a\u5979\u88ab\u5176\u4ed6\u5b69\u5b50\u5632\u7b11\u8fc7\uff0c\u5c31\u50cf\u6211\u4e00\u6837(\u867d\u7136\u4e0d\u6bd4\u5176\u4ed6\u516b\u5e74\u7ea7\u5e78\u5b58\u7684\u4eba\u591a)\uff1f\u662f\u4e0d\u662f\u56e0\u4e3a\u6211\u4eec\u53cc\u65b9\u90fd\u65e0\u6cd5\u6e05\u9664\u7684\u4e0e\u5929\u4e3b\u6559\u7684\u7ec8\u751f\u7231\u6068\u5173\u7cfb\uff1f\u662f\u4e0d\u662f\u6211\u4eec\u5171\u540c\u627f\u8ba4\u4e86\u4e00\u4e2a\u53ef\u60b2\u7684\u4e8b\u5b9e\uff0c\u5373\u6b8b\u5fcd\u7684\u5b58\u5728\u662f\u56e0\u4e3a\u5b83\u662f\u4ee4\u4eba\u6109\u60a6\u7684\uff0c\u800c\u672c\u5e94\u963b\u6b62\u6b8b\u5fcd\u7684\u793e\u4f1a\u7ed3\u6784\u5f80\u5f80\u4f1a\u9f13\u52b1\u5b83\uff1f\u8fd8\u662f\u6211\u4e0d\u538c\u5176\u70e6\u5730\u8bb2\u4e86\u4e4c\u82cf\u62c9\u4fee\u5973\u7684\u6545\u4e8b\uff0c\u56e0\u4e3a\u6211\u6000\u7591\u6211\u53ef\u80fd\u4f1a\u7231\u4e0a\u5979\uff1f\u56e0\u4e3a\u6211\u89c9\u5f97\u8bfb\u8005\u4e5f\u4f1a\u8fd9\u4e48\u60f3\u5417\uff1f\u56e0\u4e3a\u5979\u7684\u6545\u4e8b\u53ef\u80fd\u65e2\u80fd\u5a31\u4e50\u4ed6\u4eec\u53c8\u80fd\u6559\u80b2\u4ed6\u4eec\uff1f\u8ba9\u4ed6\u4eec\u89c9\u5f97\u6bd4\u4e4c\u82cf\u62c9\u4fee\u5973\u672c\u4eba\u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\u4e0d\u90a3\u4e48\u5b64\u5355\u5417\uff1f\n\u8bfb\u8005\u53ef\u80fd\u8fd8\u4f1a\u95ee\uff0c\u6211\u5bf9\u8fd9\u4f4d\u6fc0\u52b1\u4e86\u4e4c\u82cf\u62c9\u4fee\u5973\u7684\u5973\u4eba\u6709\u4ec0\u4e48\u8d23\u4efb\u3002\u6211\u6709\u8981\u6c42\u4f7f\u7528\u5979\u7684\u6545\u4e8b\u5417\uff1f\u4e0d\uff0c\u6211\u6ca1\u6709\u3002\u9996\u5148\uff0c\u6211\u642c\u5230\u4e861500\u82f1\u91cc\u4ee5\u5916\uff0c\u6211\u6ca1\u6709\u7406\u7531\u76f8\u4fe1\u5979\u8fd8\u6d3b\u7740\uff0c\u4f46\u8001\u5b9e\u8bf4\uff0c\u8fd9\u65e0\u5173\u7d27\u8981\u3002\u8fd9\u4f4d\u771f\u6b63\u7684\u4fee\u5973\uff0c\u6211\u8bb0\u5f97\u975e\u5e38\u4eb2\u5207\uff0c\u5979\u542f\u53d1\u4e86\u6211\uff0c\u4f46\u5979\u4e0d\u662f\u5384\u4f11\u62c9\u4fee\u5973\u3002\u597d\u7684\uff0c\u6211\u518d\u8bf4\u4e00\u904d\u3002\u4f5c\u5bb6\u5229\u7528\u4eba\u3002\n\u6211\u4eec\u8bb2\u6545\u4e8b\u662f\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u8bb2\u3002\u5b83\u7684\u6765\u6e90\u80af\u5b9a\u4e0d\u662f\u5929\u8d4b\u6216\u77e5\u8bc6\uff0c\u4e5f\u4e0d\u662f\u6765\u81ea\u7814\u7a76\u548c\u751f\u6d3b\u7ecf\u9a8c\u7684\u771f\u5b9e\u6027\u3002\u8fd9\u662f\u4e2a\u8c1c\u3002\u6211\u4eec\u4e0d\u660e\u767d\u7684\u662f\u4ec0\u4e48\u5728\u53ec\u5524\u7740\u6211\u4eec\u3002\u5f53\u6211\u5f00\u59cb\u5199\u4f5c\u7684\u65f6\u5019\n\u60f3\u60f3\u7ea6\u7ff0\u00b7\u970d\u534e\u5fb7\u00b7\u683c\u91cc\u82ac(John Howard Griffin)\uff0c\u4e00\u4f4d50\u5e74\u4ee3\u7684\u4f5c\u5bb6\uff0c\u4ed6\u628a\u81ea\u5df1\u7684\u76ae\u80a4\u6652\u9ed1\u4e86\uff0c\u7528\u4ed6\u81ea\u5df1\u7684\u8bdd\u8bf4\uff0c\u5c31\u662f\u4e3a\u4e86\u201c\u6210\u4e3a\u4e00\u4e2a\u9ed1\u4eba\u201d\u3002\u4ed6\u5199\u7684\u5173\u4e8e\u4ed6\u5728\u5409\u59c6\u00b7\u514b\u7f57\u5357\u90e8\u65c5\u884c\u7684\u7ecf\u5386\u7684\u4e66\u662f\u7545\u9500\u4e66\u300a\u50cf\u6211\u4e00\u6837\u7684\u9ed1\u300b(Black Like Me)\uff0c\u5c3d\u7ba1\u8fd9\u672c\u4e66\u7684\u9500\u91cf\u5f88\u9ad8\uff0c\u4f46\u5728\u5199\u4f5c\u6216\u51fa\u7248\u65b9\u9762\u51e0\u4e4e\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u5b58\u5728\u673a\u4f1a\u4e3b\u4e49(\u683c\u91cc\u82ac\u548c\u4ed6\u7684\u51fa\u7248\u5546\u90fd\u8bbe\u60f3\u4e86\u4e00\u4e2a\u4ee5\u5b66\u8005\u4e3a\u4e3b\u7684\u5c0f\u89c4\u6a21\u8bfb\u8005\u7fa4\u4f53)\u3002\u663e\u7136\uff0c\u4f5c\u8005\u53ea\u9700\u8981\u7b2c\u4e00\u624b\u77e5\u9053\u4f5c\u4e3a\u4e00\u4e2a\u9ed1\u4eba\u5728\u5357\u65b9\u65c5\u884c\u662f\u4ec0\u4e48\u611f\u89c9\u3002\u53ef\u4ee5\u8bf4\uff0c\u5373\u4f7f\u662f\u51fa\u4e8e\u6700\u597d\u7684\u610f\u56fe\uff0c\u4ed6\u4ecd\u7136\u4e0d\u662f\u8bb2\u8ff0\u90a3\u4e2a\u7279\u5b9a\u6545\u4e8b\u7684\u4eba\u3002\u4f46\u8003\u8651\u5230\u5386\u53f2\u80cc\u666f\uff0c\u4e5f\u53ef\u4ee5\u4e89\u8fa9\u8bf4\uff0c\u9519\u8bef\u7684\u4eba\u5b9e\u9645\u4e0a\u662f\u6b63\u786e\u7684\u4eba\u3002\u6bd5\u7adf\uff0c\u9ed1\u4eba\u4f5c\u5bb6\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5728\u5199\u79cd\u65cf\u4e3b\u4e49\u7684\u8150\u8680\u6027\u5f71\u54cd\uff0c\u800c\u767d\u4eba\u8bfb\u8005\u4e00\u76f4\u5145\u8033\u4e0d\u95fb\uff0c\u76f4\u5230\u6709\u4e00\u4f4d\u201c\u4ed6\u4eec\u81ea\u5df1\u7684\u201d\u8bfb\u8005\u52a0\u5165\u8fdb\u6765\u3002\u7136\u800c\uff0c\u683c\u91cc\u82ac\u6ca1\u6709\u505a\u7684\u4e8b\u60c5\u548c\u4ed6\u505a\u7684\u4e8b\u60c5\u4e00\u6837\u6709\u8da3\u3002\u5c3d\u7ba1\u4ed6\u662f\u4e2a\u5c0f\u8bf4\u5bb6\uff0c\u4f46\u4ed6\u6ca1\u6709\u5199\u5c0f\u8bf4\u3002\u76f8\u53cd\uff0c\u201c\u50cf\u6211\u4e00\u6837\u7684\u5e03\u83b1\u514b\u201d\u662f\u4e00\u79cd\u6587\u5b66\u6df7\u5408\u4f53\uff0c\u662f\u4e00\u90e8\u65e9\u4e8e\u5361\u6ce2\u7279\u548c\u6885\u52d2\u7684\u201c\u975e\u865a\u6784\u5c0f\u8bf4\u201d\u3002\u683c\u91cc\u82ac\u51b3\u5b9a\u4e0d\u7f16\u9020\u3002\n..", "note_en": "My friend Jenny Boylan and I are both incorrigible dinner-party raconteurs who love to one-up each other with stories about our misspent youths and eccentric families. Since we\u2019re both writers, the best of these tales run the risk of theft, which is why often, as soon as the speaker\u2019s voice falls, the listener will serve notice:  You have one year to use that, we warn, after which the story becomes fair game. Of course, these aren\u2019t so much \u201cstories\u201d in the literary sense as alcohol-fueled anecdotes, and often it isn\u2019t even the whole tale we covet, just its setup, perhaps, or a particularly vivid image. Jenny once made the mistake of telling me about a relative of hers whose lengthy visits were always preceded, sometimes weeks before, by the arrival of his enormous trunk; the idea so tickled my fancy that I used it as the basis for a screenplay that became the movie  Keeping Mum. (And no, I didn\u2019t share the money.) Implicit in our agreement is a shared belief that nobody really \u201cowns\u201d the raw material from which fiction is made. No doubt the fact that we\u2019re such good friends also plays a role. We share some of our best material because we know we can trust each other with intimate knowledge. When Jenny decided to transition, I was one of the first people she confided in, and I was with her when she underwent gender-confirmation surgery. As a result, for the past decade or so, I\u2019ve had a better window than most cis men through which to view the lives of trans women. Still, I\u2019ve never put a trans character in one of my fictions. I take that to mean that I\u2019ve voluntarily placed a limit on both what I\u2019m willing to borrow and what I\u2019m capable of imagining. I wouldn\u2019t argue that I have no right to do either, only that I\u2019m constrained by friendship.\n But such is not always the case, even when love is involved. My mother would\u2019ve hated every word of my memoir,  Elsewhere. Though I never promised not to write about her life\u2014I had already done so obliquely in my early novels\u2014she would have seen  Elsewhere as a terrible betrayal. That I waited until she died to write it didn\u2019t really matter, because other people who loved her were still alive, and I told those people a secret that she\u2019d guarded at great cost her entire life: that she suffered from crippling anxiety, which manifested as paralyzing panic attacks that got worse over time because they went untreated.\n My writing  Elsewhere meant that many of her friends and relatives wouldn\u2019t be able to remember her as she had wanted them to. Who would do such a thing, you ask? Well,  writers do, to some degree, pretty much every time they put pen to paper. We are, like other artists\u2014painters, photographers, filmmakers, musicians\u2014people who make use of whatever materials are at hand, much as carpenters use nails and wood. Without these materials, we\u2019re out of business. Nothing gets made. Flannery O\u2019Connor argued that writers\u2019 materials are humble\u2014whatever exists in the world, whatever can be apprehended by the senses\u2014that is, rocks and trees and lakes, and, yes, people. It\u2019s probably worth saying again: writers use people. That\u2019s inevitable and inescapable. What matters most is how we use them and for what purpose.\n Take, for instance, the octogenarian nun who\u2019s the protagonist of my story \u201cThe Whore\u2019s Child,\u201d which was published in this magazine in 1998. In it, Sister Ursula tells her life story to the other students in a creative-writing workshop over the course of a semester: how as a child she, the daughter of a prostitute, was taken to a convent and abandoned there; how she was made fun of relentlessly, not just by the other children but also by the nuns; how she patiently waited to be rescued by her beloved father, who had solemnly promised to fetch her as soon as he could find work. It\u2019s a cruel tale, and it\u2019s made that much crueler by the fact that in Sister Ursula\u2019s final workshop another student intuits a terrible truth that the old nun herself had never suspected: that her father, the man she had counted on to rescue her, was her mother\u2019s pimp, his looking for work a lie. All Sister Ursula\u2019s life she had blamed her mother for things that were someone else\u2019s fault. To the father she worshipped, she had always been expendable.\n When I toured with my first story collection, also titled  The Whore\u2019s Child, I was both surprised and thrilled to learn how forcefully the story had landed. Sister Ursula had broken readers\u2019 hearts, much as she\u2019d broken mine. Not so the story\u2019s other main character, the middle-aged professor who teaches that creative-writing course, a novelist whose career has stalled and whose marriage is crumbling as the result of an extramarital affair. Because I, too, was a middle-aged novelist who taught creative writing, it didn\u2019t surprise me when readers wanted to know if I myself was the writer in the story. Was I getting divorced? Did I think my own writing career had stalled? To such queries I gave a glib reply that was at least half serious. Why, I asked, didn\u2019t they want to know if I was the nun? Because it was Sister Ursula of whom I was proudest and to whom I felt the deepest psychic connection, though I\u2019d never been and never would be an eighty-year-old Belgian nun. And yet I\u2019d told her story to readers, many of whom were clearly convinced of her reality. Okay, they weren\u2019t octogenarian Belgian nuns either, at least not to my knowledge, which meant that if I got things wrong about her life in the convent, I was pretty safe. Sister Ursula was real only in the peculiar way that vividly drawn fictional characters are. Readers understand them to be figments of their authors\u2019 imaginations, yet somehow care about what happens to them as if they were friends or relatives. Sister Ursula limps through the first installment of her story on bloody feet, having been given shoes that were two sizes too small when she entered the convent, and her suffering hurt both her creator (me) and readers, most of whom, one assumes, have had little or no firsthand experience of wearing shoes that are too small or of being abandoned in a Belgian convent. Despite Sister Ursula\u2019s stipulated unreality, we still share her imagined suffering. How does that work, exactly? And conversely, why doesn\u2019t an abundance of shared experience guarantee empathy? Indeed, too much shared experience can at times impede emotional connection. Imagine, for instance, the reception \u201cThe Whore\u2019s Child\u201d would have had if only elderly cloistered Belgian nuns had read it. Would Sister Ursula feel real to them? Or would they laugh her out of the convent, and me along with her? Because, come on. Who is this middle-aged American writer who clearly never spent a minute in a convent, or in a nun\u2019s habit, or probably even in Belgium? What gives him the right to intrude so arrogantly into our lives? Why doesn\u2019t he understand that Sister Ursula\u2019s story simply isn\u2019t his to tell?\n    The time-honored answer to this what-gives-you-the-right question is: creative imagination, which for the writer is a muscular species of empathy.  Okay, I\u2019m not you, the logic goes,  but if I take the time to observe you carefully, if I study how you navigate the world, if I listen to you when you speak, then in time I can begin to imagine what it feels like to be you. Obviously, the important word here is \u201cbegin,\u201d because employing creative imagination isn\u2019t as simple as asserting your right\u2014obligation?\u2014to let your imagination range freely. The further a story strays from your first- and secondhand experience (this happened to me or I witnessed this happening to somebody I know), the greater your need to narrow the ignorance gap, to make sure the details are as close to right as you can get them. Your need for a tutorial, though, should probably serve as a caution: presumably there are other writers out there for whom that gap is narrower, their own personal experience having dovetailed with your shared subject matter.\n The good news is that in addition to research there are techniques at a writer\u2019s disposal that will mitigate this problem of authenticity. For instance, instead of selecting a point of view that looks through your character\u2019s eyes as the story unfolds, you can give yourself some distance by choosing an external vantage point from which to see her. Or you can use an intermediary\u2014someone more like yourself\u2014to interpret the story\u2019s main character, the way Conrad used Charles Marlow, Fitzgerald used Nick Carraway, and Roth used Nathan Zuckerman. Should the day ever come when I want to write a story with a trans protagonist, I would surely employ such a device. My friendship with Jenny wouldn\u2019t allow me to assume that I could convincingly walk in her shoes (or even, for that matter, stand up in them).\n But if there\u2019s a serious gap between your personal experience and that of your story\u2019s protagonist\u2014say, in age, gender, race, class, nationality, or occupation\u2014how can you gauge your chances of bridging it successfully? Do you even know enough to embark? How much additional research will you need to do? Will strategies like the ones noted above, together with your experience writing other stories, save you? It\u2019s impossible to know for certain, but again consider my Sister Ursula. Readers probably won\u2019t be shocked to learn that she was based on a real nun who took a workshop I taught back in the Eighties. Like my imagined Sister Ursula, she belonged to a dying order of nuns that the local Catholic diocese was warehousing in a ramshackle old house in a sketchy part of town. A big, strong woman, she was despite her advanced years the youngest of the ancient nuns who lived there, and it was her job to take care of those who were in ill health. And like Sister Ursula, she made no secret of the fact that she hated her life, past and present. She\u2019d joined an order she despised only after it became clear that life was offering her no other choice. Was she ever given a pair of too-small shoes and forced to wear them? Did she bleed into those shoes as Sister Ursula did? Did she still limp in old age? Did she imagine burning that hated convent to the ground? I no longer remember which details were appropriated and which were invented. (Writers are free to forget what no longer matters, and they generally do. After a story of mine is published, I could be interrogated with rubber hoses about what I knew and when I knew it, but much of what was of paramount importance yesterday is blessedly gone today.) All I can say with confidence is that these cruel shoes were not stolen from Pee-wee Herman.\n My point is that despite how different Sister Ursula was from me, I didn\u2019t have to make up all the story\u2019s narrative details. I\u2019d had the opportunity to study the real woman my character was based on. I\u2019d read her account carefully, and after each installment, she and I met to discuss both the text and what other students had said about it in class. Just as the narrator does in my story, I remember telling her that, in a fiction-writing class, it was okay to make things up\u2014even to (gasp!) lie, if the lie served a greater truth\u2014and I noted the poor woman\u2019s reluctance to accept my advice. During that semester, I watched how she navigated the world, how dutifully she read the other students\u2019 stories, how troubled and mystified she became when she read them. Even her curious and sometimes revealing syntax ended up in my story. In other words, what I observed about the real woman closed the gap between me and my fictional nun. Sister Ursula was eighty and I forty-five. She was a nun and I was an English professor. She European, I American; she poor, I comfortably middle class. Those differences didn\u2019t matter as much. So .\u2009.\u2009. home free, right? Not exactly.\n    What I\u2019ve been discussing is the  how of writing a story that requires some degree of transcendence: how you go about bridging the gap between what you know and what you don\u2019t and sometimes can\u2019t. But in the end, it\u2019s the  why that matters most. Why tell the story in the first place? Back when the nun was in my writing class, I had no idea I would ever use her. What I  did know, as writers often do, was that she piqued my interest. Like most authors, I unconsciously classify everything into two categories: what might one day be of use, and everything else. It\u2019s an embarrassing habit, selfish in the extreme, but it\u2019s also a kind of triage, necessary because you can\u2019t pay equal attention to everything and be an artist. You learn, over time, to identify not so much what\u2019s important as what\u2019s important to  you. What\u2019s likely to bear fruit and what isn\u2019t. It would be a good decade after I taught that creative-writing class before I would write the fictional one, a decade before the elderly nun I studied so closely without knowing why would limp from the back of my brain to the front and explain exactly what she meant to me.\n But why did she do that? Why did I write her story and not some other? Because I remembered so much about her? Because what I\u2019d learned through careful observation gave me the confidence necessary to begin? There\u2019s probably some truth to that. Who doesn\u2019t want to feel confident, especially at the beginning of a difficult endeavor? But it\u2019s also true that writers\u2014at least good ones\u2014are more attracted to questions than to answers. If knowledge were all it took to write a good story, all artistic dilemmas would be resolved by further research; imagination wouldn\u2019t factor in at all. What ultimately persuades the writer to embark upon a story is not confidence in his knowledge. Rather, he senses a powerful bond between himself and the person (or people) he\u2019s writing about, a bond that makes the hazardous journey worthwhile.\n When I ask why the old nun migrated from the back of my brain to the front, what I\u2019m really asking is: Why was she important enough to remember when ninety percent of my firsthand experience of this precious life gets consigned to memory\u2019s trash heap without much thought? Different though my character and I might be, this old woman\u2019s story somehow intersected with mine. Was it that she spent so much of her life waiting for her father to come back, as I did after my own parents separated? Was it because she\u2019d been mocked by other kids, as I had been (although no more than anyone else who\u2019s survived eighth grade)? Was it because of the lifelong, love-hate relationship with Catholicism that neither of us could purge? Was it our mutual acknowledgment of the sad truth that cruelty exists because it\u2019s pleasurable and that the very societal structures that should deter cruelty too often actually encourage it? Or did I go to the trouble of telling Sister Ursula\u2019s story because I suspected I might come to love her? Because I thought readers might, too? Because her story might both entertain and instruct them? Make them feel less alone in the world than Sister Ursula herself did?\n Readers might also ask what responsibility I felt to the woman who inspired Sister Ursula. Did I ask permission to use her story? No, I didn\u2019t. For one thing, I\u2019d moved fifteen hundred miles away, and I had no reason to believe she was still alive, but honestly it wouldn\u2019t have mattered. The real nun, whom I remember with great affection, inspired but was not Sister Ursula. Okay, I\u2019ll say it again. Writers use people.\n We tell stories because we must. And the source of that  must isn\u2019t talent or knowledge or the authenticity that derives from research and lived experience. It\u2019s mystery. What we  don\u2019t understand is what beckons to us. When I began writing  Elsewhere, everything felt cloaked, especially the book\u2019s strange urgency. I was deep in a new novel and having an absolute blast when I first became aware of  Elsewhere\u2019s gravitational pull, and I wanted nothing more than to ignore it. Why in the world should I put aside a book that was so much fun to write for another that promised little but heartache? The story\u2019s imperative seemed to hint at some unfinished business between my mother and me, but how could that be the case? Hers had been a difficult life, and she was finally at rest. Why disturb it? I figured the book would be about how different our temperaments had been and how that had resulted in a grinding, decades-long contest of wills. She believed that many of the crushing anxieties she was prey to could have been alleviated if only I\u2019d been willing to take her side in matters both large and small, to assure her that she was right, even, especially, when I knew she wasn\u2019t. Why couldn\u2019t I just pretend? Was that so much to ask? Why were we so often, so intractably, at odds? She knew we loved each other. What was she missing? But here\u2019s the thing: instead of being a book about how different my mother and I were,  Elsewhere turned out to be about how frighteningly similar we\u2019d always been. The tractor beam of  must that demanded I set aside my novel had nothing to do with what I understood and everything to do with what I\u2019d stubbornly refused to grasp. This was the unfinished business I\u2019d sensed but couldn\u2019t articulate. In the end, a writer\u2019s sense of must is a moral imperative, urging us to do  this, not  that. When we ignore it, our core mission is compromised. Our inability to explain it, even to ourselves, doesn\u2019t diminish its power.\n The primary obstacle to imagination isn\u2019t lack of knowledge or lived experience. More often, it\u2019s simply our need to get over ourselves. I came to storytelling late, and like many writers, painters, musicians, and other artists, I fell in love with the process long before I was any good at it. As an English major in college, I\u2019d begun to understand why I\u2019d always loved to read. Getting lost in a good story is an antidote to self-consciousness. But writing stories, it turned out, was even more rewarding. I\u2019d always wanted to be a better person than I knew myself to be, and here was a pursuit that might actually help me achieve this goal. Deciding to become a writer had little to do with whether I might one day exhibit any talent. The activity was its own reward. I no longer felt quite so trapped.  Yes, I\u2019m me, I remember thinking.  But for a time, I can also be you.\n    Earlier this year, when I mentioned to my elder daughter Emily, a bookseller, that I meant to write an essay defending the creative imagination and its moral urgency, she cringed, then posed an interesting hypothetical. What if the same mysterious force that made me set aside my novel for a memoir showed up again with an even more suspect project? Suppose I felt a strong imperative to write a novel about what it feels like to be a black man in America.  Oh, come on, you say? Why would a white writer suddenly be visited by this particular sense of  must? A fair question\u2014except, well, it happens.\n Consider John Howard Griffin, a writer who back in the Fifties darkened his skin in order to, in his own words, \u201cbecome a negro.\u201d The book he wrote about his experience traveling through the Jim Crow South was the huge bestseller  Black Like Me, and despite the book\u2019s extraordinary sales, there\u2019s little evidence of opportunism in its writing or publication (both Griffin and his publisher envisioned a small, mostly scholarly readership). Apparently, the author just needed to know, firsthand, what it felt like to navigate the South as a black man. It could be argued that even with the best of intentions, he was still the wrong person to tell that particular story. But it could also be argued, given the historical context, that the wrong man was actually the right one. After all, black authors had been writing about the corrosive effects of racism for decades, and white readers had turned a deaf ear until one of \u201ctheir own\u201d chimed in. What Griffin did not do, however, is as interesting as what he did. Despite being a fiction writer, he didn\u2019t write a novel. Rather,  Black Like Me was a kind of literary hybrid, a \u201cnon-fiction novel\u201d that predated Capote and Mailer. Griffin\u2019s decision not to fictio\n......", "posttime": "2020-06-08 23:46:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u60f3\u8c61\u529b,imagination,\u6545\u4e8b", "title": "\u4ed6\u4eba\u7684\u751f\u6d3b\uff1a\u60f3\u8c61\u529b\u4ec0\u4e48\u65f6\u5019\u4f1a\u53d8\u6210\u4e13\u6709\uff1f", "title_en": "The Lives of Others: When does imagination become appropriation?", "transed": 1, "url": "https://harpers.org/archive/2020/06/the-lives-of-others-when-does-imagination-become-appropriation/", "via": "", "real_tags": ["app", "\u60f3\u8c61\u529b", "\u6545\u4e8b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005716, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u5efa\u5e10\u6237", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-06-08 23:45:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u7801,\u7f51\u7edc,web,\u521b\u5efa", "title": "\u91c7\u8bbf\u7f51\u7edc\u5bc6\u7801\u5b66\u5148\u9a71M Hellman\uff0cT Elgamal\uff0cT Jermoluk", "title_en": "Interview with Web cryptography pioneers M Hellman, T Elgamal, T Jermoluk", "transed": 1, "url": "https://spectrum.ieee.org/tech-talk/telecom/security/pioneers-web-cryptography-future-authentication", "via": "", "real_tags": ["\u5bc6\u7801", "\u7f51\u7edc", "web", "\u521b\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "01df5cbd52c02b6b7ff49c86fb1de5ed.jpg", "infoid": 1005715, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u62e5\u6709\u4ea4\u6362\u7a7a\u95f4\u662f\u8fd0\u884c\u826f\u597d\u7684\u7cfb\u7edf\u7684\u4e00\u4e2a\u76f8\u5f53\u91cd\u8981\u7684\u90e8\u5206\uff0c\u6ca1\u6709\u5b83\uff0c\u6b63\u5e38\u7684\u5185\u5b58\u7ba1\u7406\u5c06\u66f4\u96be\u5b9e\u73b0\u3002\n\u4ea4\u6362\u901a\u5e38\u4e0d\u662f\u4e3a\u4e86\u83b7\u5f97\u7d27\u6025\u5185\u5b58\uff0c\u800c\u662f\u8ba9\u5185\u5b58\u56de\u6536\u53d8\u5f97\u5e73\u7b49\u548c\u9ad8\u6548\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f7f\u7528\u5b83\u4f5c\u4e3a\u7d27\u6025\u8bb0\u5fc6\u901a\u5e38\u662f\u6709\u5bb3\u7684\u3002\n\u7981\u7528\u4ea4\u6362\u5e76\u4e0d\u80fd\u9632\u6b62\u78c1\u76d8I/O\u5728\u5185\u5b58\u4e89\u7528\u4e0b\u6210\u4e3a\u95ee\u9898\uff0c\u5b83\u53ea\u662f\u5c06\u78c1\u76d8I/O\u7684\u98a0\u7c38\u4ece\u533f\u540d\u9875\u9762\u8f6c\u79fb\u5230\u6587\u4ef6\u9875\u9762\u3002\u8fd9\u4e0d\u4ec5\u4f1a\u964d\u4f4e\u6548\u7387\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4f9b\u9009\u62e9\u56de\u6536\u7684\u9875\u6570\u6c60\u66f4\u5c0f\uff0c\u800c\u4e14\u8fd8\u53ef\u80fd\u5728\u4e00\u5f00\u59cb\u5c31\u5bfc\u81f4\u8fdb\u5165\u8fd9\u79cd\u9ad8\u4e89\u7528\u72b6\u6001\u3002\n\u57284.0\u4e4b\u524d\u7684\u5185\u6838\u4ea4\u6362\u5668\u6709\u5f88\u591a\u9677\u9631\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u5177\u6709\u4ea4\u6362\u9875\u9762\u7684\u4e3b\u6743\u6027\uff0c\u5bfc\u81f4\u4e86\u5f88\u591a\u4eba\u5bf9\u4ea4\u6362\u7684\u8d1f\u9762\u770b\u6cd5\u3002\u5728\u5185\u6838&gt\uff1b4.0\u4e0a\uff0c\u60c5\u51b5\u8981\u597d\u5f97\u591a\u3002\n\u5728SSD\u4e0a\uff0c\u6362\u51fa\u533f\u540d\u9875\u548c\u56de\u6536\u6587\u4ef6\u9875\u5728\u6027\u80fd/\u5ef6\u8fdf\u65b9\u9762\u57fa\u672c\u4e0a\u662f\u7b49\u6548\u7684\u3002\u5728\u8f83\u65e7\u7684\u65cb\u8f6c\u78c1\u76d8\u4e0a\uff0c\u7531\u4e8e\u968f\u673a\u8bfb\u53d6\uff0c\u4ea4\u6362\u8bfb\u53d6\u901f\u5ea6\u8f83\u6162\uff0c\u56e0\u6b64\u8bbe\u7f6e\u8f83\u4f4e\u7684vm.swappiness\u503c\u662f\u6709\u610f\u4e49\u7684(\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4ee5\u4e86\u89e3\u6709\u5173vm.swappness\u7684\u66f4\u591a\u4fe1\u606f)\u3002\n\u7981\u7528\u6389\u671f\u5e76\u4e0d\u80fd\u9632\u6b62\u8fd1\u4e4eOOM\u7684\u75c5\u6001\u884c\u4e3a\uff0c\u5c3d\u7ba1\u62e5\u6709\u6389\u671f\u53ef\u80fd\u4f1a\u5ef6\u957f\u5b83\u662f\u771f\u7684\u3002\u65e0\u8bba\u7cfb\u7edf\u5168\u5c40OOM\u6740\u624b\u662f\u5728\u6709\u6ca1\u6709\u4ea4\u6362\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u7684\uff0c\u8fd8\u662f\u8fdf\u65e9\u4f1a\u8c03\u7528\u7684\uff0c\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\uff1a\u60a8\u4f1a\u4f7f\u7cfb\u7edf\u5904\u4e8e\u4e0d\u53ef\u9884\u6d4b\u7684\u72b6\u6001\u3002\u6ca1\u6709\u4ea4\u6362\u5e76\u4e0d\u80fd\u907f\u514d\u8fd9\u4e00\u70b9\u3002\n\u5728cgroup v2\u4e2d\u4f7f\u7528memory.low\u548cFriends\u53ef\u4ee5\u5728\u5185\u5b58\u7d27\u5f20\u548c\u9632\u6b62\u6296\u52a8\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u66f4\u597d\u7684\u4ea4\u6362\u884c\u4e3a\u3002\n\u4f5c\u4e3a\u6211\u6539\u8fdb\u5185\u6838\u5185\u5b58\u7ba1\u7406\u548ccgroupv2\u7684\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4e00\u76f4\u5728\u4e0e\u8bb8\u591a\u5de5\u7a0b\u5e08\u8ba8\u8bba\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u6001\u5ea6\uff0c\u7279\u522b\u662f\u5173\u4e8e\u538b\u529b\u4e0b\u7684\u5e94\u7528\u7a0b\u5e8f\u884c\u4e3a\u548c\u7528\u4e8e\u5185\u5b58\u7ba1\u7406\u7684\u64cd\u4f5c\u7cfb\u7edf\u542f\u53d1\u5f0f\u3002\n\u8fd9\u4e9b\u8ba8\u8bba\u4e2d\u53cd\u590d\u51fa\u73b0\u7684\u4e00\u4e2a\u8bdd\u9898\u662f\u4e92\u6362\u3002\u4ea4\u6362\u662f\u4e00\u4e2a\u4e89\u8bba\u4e0d\u4f11\u3001\u77e5\u4e4b\u751a\u5c11\u7684\u8bdd\u9898\uff0c\u5373\u4f7f\u662f\u90a3\u4e9b\u4ece\u4e8bLinux\u591a\u5e74\u5de5\u4f5c\u7684\u4eba\u4e5f\u662f\u5982\u6b64\u3002\u8bb8\u591a\u4eba\u8ba4\u4e3a\u5b83\u662f\u65e0\u7528\u7684\u6216\u6709\u5bb3\u7684\uff1a\u5b83\u662f\u8bb0\u5fc6\u532e\u4e4f\u7684\u65f6\u4ee3\u7684\u9057\u7269\uff0c\u800c\u78c1\u76d8\u662f\u63d0\u4f9b\u6025\u9700\u7684\u5206\u9875\u7a7a\u95f4\u7684\u5fc5\u8981\u90aa\u6076\u3002\u6700\u8fd1\u51e0\u5e74\uff0c\u6211\u4ecd\u7136\u770b\u5230\u4eba\u4eec\u5728\u76f8\u5bf9\u9891\u7e41\u5730\u8c08\u8bba\u8fd9\u4e00\u8bf4\u6cd5\uff0c\u6211\u5df2\u7ecf\u4e0e\u540c\u4e8b\u3001\u670b\u53cb\u548c\u884c\u4e1a\u540c\u884c\u8fdb\u884c\u4e86\u591a\u6b21\u8ba8\u8bba\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u7406\u89e3\u4e3a\u4ec0\u4e48\u4ea4\u6362\u5728\u53ef\u7528\u7269\u7406\u5185\u5b58\u6bd4\u8fc7\u53bb\u591a\u5f97\u591a\u7684\u73b0\u4ee3\u8ba1\u7b97\u673a\u4e0a\u4ecd\u7136\u662f\u4e00\u4e2a\u6709\u7528\u7684\u6982\u5ff5\u3002\n\u5bf9\u4e8e\u4ea4\u6362\u7684\u76ee\u7684\u4e5f\u6709\u5f88\u591a\u8bef\u89e3--\u8bb8\u591a\u4eba\u53ea\u662f\u628a\u5b83\u770b\u4f5c\u662f\u4e00\u79cd\u5728\u7d27\u6025\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u7f13\u6162\u7684\u989d\u5916\u5185\u5b58\uff0c\u4f46\u5e76\u4e0d\u7406\u89e3\u5b83\u5728\u6b63\u5e38\u52a0\u8f7d\u671f\u95f4\u5bf9\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u5065\u5eb7\u8fd0\u884c\u6709\u4f55\u8d21\u732e\u3002\n\u6211\u4eec\u5f88\u591a\u4eba\u90fd\u542c\u8bf4\u8fc7\u5927\u591a\u6570\u5173\u4e8e\u5185\u5b58\u7684\u5e38\u89c1\u6bd4\u55bb\uff1aLinux\u4f7f\u7528\u5982\u6b64\u591a\u7684\u5185\u5b58\uff0c\u4ea4\u6362\u5185\u5b58\u5e94\u8be5\u662f\u7269\u7406\u5185\u5b58\u5927\u5c0f\u7684\u4e24\u500d\uff0c\u8bf8\u5982\u6b64\u7c7b\u3002\u867d\u7136\u8fd9\u4e9b\u4e0d\u662f\u5f88\u5bb9\u6613\u6d88\u9664\uff0c\u6216\u8005\u8fd1\u5e74\u6765\u56f4\u7ed5\u5b83\u4eec\u7684\u8ba8\u8bba\u53d8\u5f97\u66f4\u52a0\u5fae\u5999\uff0c\u4f46\u4ea4\u6362\u65e0\u7528\u7684\u795e\u8bdd\u66f4\u591a\u5730\u57fa\u4e8e\u542f\u53d1\u5f0f\u548c\u5965\u79d8\uff0c\u800c\u4e0d\u662f\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u7c7b\u6bd4\u6765\u89e3\u91ca\u7684\u4e1c\u897f\uff0c\u9700\u8981\u66f4\u591a\u7684\u7406\u89e3\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u662f\u9488\u5bf9\u90a3\u4e9b\u7ba1\u7406Linux\u7cfb\u7edf\u7684\u4eba\uff0c\u4ed6\u4eec\u6709\u5174\u8da3\u542c\u542c\u5728\u8fd0\u884c\u65f6\u4f7f\u7528\u8fc7\u5c0f/\u6ca1\u6709\u4ea4\u6362\u6216\u4f7f\u7528vm.swappness\u8bbe\u7f6e\u4e3a0\u65f6\u7684\u5bf9\u7b56\u3002\n\u5982\u679c\u6ca1\u6709\u5bf9Linux\u5185\u5b58\u7ba1\u7406\u4e2d\u4e00\u4e9b\u57fa\u672c\u7684\u5e95\u5c42\u673a\u5236\u6709\u5171\u540c\u7684\u7406\u89e3\uff0c\u90a3\u4e48\u5f88\u96be\u8c08\u8bba\u4e3a\u4ec0\u4e48\u4ea4\u6362\u548c\u6362\u51fa\u9875\u9762\u5728\u6b63\u5e38\u64cd\u4f5c\u4e2d\u662f\u4ef6\u597d\u4e8b\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u786e\u4fdd\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u4e00\u81f4\u7684\u3002\nLinux\u4e2d\u6709\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u5185\u5b58\uff0c\u6bcf\u79cd\u7c7b\u578b\u90fd\u6709\u81ea\u5df1\u7684\u5c5e\u6027\u3002\u7406\u89e3\u8fd9\u4e9b\u7ec6\u5fae\u5dee\u522b\u662f\u7406\u89e3SWAP\u4e3a\u4ec0\u4e48\u91cd\u8981\u7684\u5173\u952e\u3002\n\u4f8b\u5982\uff0c\u6709\u51e0\u9875(\u5185\u5b58\u5757\uff0c\u901a\u5e38\u4e3a4k)\u8d1f\u8d23\u4fdd\u5b58\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u4ee3\u7801\u3002\u8fd8\u6709\u4e00\u4e9b\u9009\u9879\u8d1f\u8d23\u7f13\u5b58\u4e0e\u8fd9\u4e9b\u7a0b\u5e8f\u8bbf\u95ee\u7684\u6587\u4ef6\u76f8\u5173\u7684\u6570\u636e\u548c\u5143\u6570\u636e\uff0c\u4ee5\u52a0\u5feb\u5c06\u6765\u7684\u8bbf\u95ee\u901f\u5ea6\u3002\u8fd9\u4e9b\u662f\u9875\u9762\u7f13\u5b58\u7684\u4e00\u90e8\u5206\uff0c\u6211\u5c06\u5b83\u4eec\u79f0\u4e3a\u6587\u4ef6\u5185\u5b58\u3002\n\u8fd8\u6709\u4e00\u4e9b\u9875\u9762\u8d1f\u8d23\u5728\u8be5\u4ee3\u7801\u5185\u8fdb\u884c\u7684\u5185\u5b58\u5206\u914d\uff0c\u4f8b\u5982\uff0c\u5f53\u4f7f\u7528malloc\u5206\u914d\u7684\u65b0\u5185\u5b58\u88ab\u5199\u5165\u65f6\uff0c\u6216\u8005\u5f53\u4f7f\u7528mmap\u7684MAP_ANONAME\u6807\u5fd7\u65f6\u3002\u8fd9\u4e9b\u90fd\u662f\u533f\u540d\u9875--\u4e4b\u6240\u4ee5\u8fd9\u4e48\u53eb\u662f\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u4efb\u4f55\u652f\u6301--\u6211\u4f1a\u628a\u5b83\u4eec\u79f0\u4e3a\u201c\u65e0\u8bb0\u540d\u201d(Anon Memory)\u3002\n\u8fd8\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u5185\u5b58-\u5171\u4eab\u5185\u5b58\u3001\u7247\u5185\u5b58\u3001\u5185\u6838\u5806\u6808\u5185\u5b58\u3001\u7f13\u51b2\u533a\u7b49\u7b49-\u4f46\u662f\u533f\u540d\u5185\u5b58\u548c\u6587\u4ef6\u5185\u5b58\u662f\u6700\u5e7f\u4e3a\u4eba\u77e5\u3001\u6700\u5bb9\u6613\u7406\u89e3\u7684\uff0c\u6240\u4ee5\u6211\u5c06\u5728\u6211\u7684\u793a\u4f8b\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u5c3d\u7ba1\u5b83\u4eec\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u3002\n\u5f53\u601d\u8003\u4e00\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u5185\u5b58\u65f6\uff0c\u6700\u57fa\u672c\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u5b83\u662f\u5426\u80fd\u591f\u88ab\u56de\u6536\u3002\u5728\u8fd9\u91cc\uff0c\u56de\u6536\u610f\u5473\u7740\u7cfb\u7edf\u53ef\u4ee5\u5728\u4e0d\u4e22\u5931\u6570\u636e\u7684\u60c5\u51b5\u4e0b\uff0c\u4ece\u7269\u7406\u5185\u5b58\u4e2d\u6e05\u9664\u8be5\u7c7b\u578b\u7684\u9875\u9762\u3002\n\u5bf9\u4e8e\u67d0\u4e9b\u9875\u9762\u7c7b\u578b\uff0c\u8fd9\u901a\u5e38\u76f8\u5f53\u7410\u788e\u3002\u4f8b\u5982\uff0c\u5728\u6e05\u9664(\u672a\u4fee\u6539)\u9875\u9762\u9ad8\u901f\u7f13\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u6211\u4eec\u53ea\u9700\u91cd\u65b0\u7f13\u5b58\u78c1\u76d8\u4e0a\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5220\u9664\u9875\u9762\uff0c\u800c\u65e0\u9700\u6267\u884c\u4efb\u4f55\u7279\u6b8a\u64cd\u4f5c\u3002\n\u5bf9\u4e8e\u67d0\u4e9b\u9875\u9762\u7c7b\u578b\uff0c\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u4f8b\u5982\uff0c\u5728\u810f(\u5df2\u4fee\u6539)\u9875\u9ad8\u901f\u7f13\u5b58\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u5220\u9664\u8be5\u9875\uff0c\u56e0\u4e3a\u78c1\u76d8\u8fd8\u6ca1\u6709\u6211\u4eec\u7684\u4fee\u6539\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8981\u4e48\u62d2\u7edd\u56de\u6536\uff0c\u8981\u4e48\u9996\u5148\u5c06\u66f4\u6539\u53d6\u56de\u78c1\u76d8\uff0c\u7136\u540e\u624d\u80fd\u5220\u9664\u6b64\u5185\u5b58\u3002\n\u5bf9\u4e8e\u67d0\u4e9b\u9875\u9762\u7c7b\u578b\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4f8b\u5982\uff0c\u5728\u524d\u9762\u63d0\u5230\u7684\u533f\u540d\u9875\u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u53ea\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d\uff0c\u800c\u4e0d\u5b58\u5728\u4e8e\u5176\u4ed6\u540e\u5907\u5b58\u50a8\u4e2d\uff0c\u56e0\u6b64\u5b83\u4eec\u5fc5\u987b\u4fdd\u5b58\u5728\u90a3\u91cc\u3002\n\u5982\u679c\u4f60\u5728Linux\u4e0a\u5bfb\u627e\u5173\u4e8e\u4ea4\u6362\u76ee\u7684\u7684\u63cf\u8ff0\uff0c\u4f60\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u53d1\u73b0\u5f88\u591a\u4eba\u8c08\u8bba\u5b83\uff0c\u597d\u50cf\u5b83\u4ec5\u4ec5\u662f\u5728\u7d27\u6025\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u7269\u7406RAM\u7684\u4e00\u4e2a\u6269\u5c55\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u6211\u5728\u8c37\u6b4c\u4e0a\u8f93\u5165\u4ec0\u4e48\u662fSWAP\u7684\u968f\u673a\u5e16\u5b50\uff0c\u5b83\u662f\u6211\u5f97\u5230\u7684\u6392\u540d\u9760\u524d\u7684\u7ed3\u679c\u4e4b\u4e00\uff1a(What is SWAP&#34\uff1bWhat is SWAP&#34\uff1b)\u3002\n\u4ea4\u6362\u672c\u8d28\u4e0a\u662f\u7d27\u6025\u5185\u5b58\uff1b\u5f53\u60a8\u7684\u7cfb\u7edf\u6682\u65f6\u9700\u8981\u6bd4RAM\u4e2d\u53ef\u7528\u7684\u7269\u7406\u5185\u5b58\u66f4\u591a\u7684\u7269\u7406\u5185\u5b58\u65f6\u7559\u51fa\u7684\u7a7a\u95f4\u3002\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e0d\u597d\u7684\uff0c\u56e0\u4e3a\u5b83\u901f\u5ea6\u6162\u4e14\u6548\u7387\u4f4e\uff0c\u5982\u679c\u60a8\u7684\u7cfb\u7edf\u7ecf\u5e38\u9700\u8981\u4f7f\u7528\u4ea4\u6362\uff0c\u90a3\u4e48\u5b83\u663e\u7136\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u3002[\u2026]\u3002\u5982\u679c\u4f60\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u5904\u7406\u4f60\u6240\u6709\u7684\u9700\u6c42\uff0c\u5e76\u4e14\u4e0d\u6307\u671b\u5b83\u4f1a\u88ab\u6700\u5927\u9650\u5ea6\u5730\u5360\u7528\uff0c\u90a3\u4e48\u4f60\u5728\u6ca1\u6709\u4ea4\u6362\u7a7a\u95f4\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u5e94\u8be5\u662f\u5b8c\u5168\u5b89\u5168\u7684\u3002\n\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u6211\u5b8c\u5168\u4e0d\u4f1a\u56e0\u4e3a\u5e16\u5b50\u7684\u5185\u5bb9\u800c\u8d23\u602a\u8fd9\u7bc7\u8bc4\u8bba\u7684\u53d1\u5e16\u4eba--\u8fd9\u662f\u8bb8\u591aLinuxsysadmins\u7684\u4eba\u90fd\u63a5\u53d7\u7684\u5e38\u8bc6\uff0c\u5982\u679c\u4f60\u9080\u8bf7\u4ed6\u4eec\u8c08\u8bba\u4ea4\u6362\uff0c\u8fd9\u53ef\u80fd\u662f\u6700\u6709\u53ef\u80fd\u4ece\u4ed6\u4eec\u90a3\u91cc\u542c\u5230\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002\u7136\u800c\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e5f\u662f\u5bf9\u4e92\u6362\u7684\u76ee\u7684\u548c\u7528\u9014\u7684\u8bef\u89e3\uff0c\u7279\u522b\u662f\u5728\u73b0\u4ee3\u7cfb\u7edf\u4e0a\u3002\n\u5728\u4e0a\u9762\uff0c\u6211\u8c08\u5230\u4e86\u533f\u540d\u9875\u9762\u7684\u56de\u6536\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u533f\u540d\u9875\u9762\u672c\u8d28\u4e0a\u5728\u4ece\u5185\u5b58\u4e2d\u6e05\u9664\u65f6\u6ca1\u6709\u540e\u5907\u5b58\u50a8\u53ef\u4f9b\u540e\u9000-\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u56de\u6536\u5c06\u5bfc\u81f4\u8fd9\u4e9b\u9875\u9762\u5b8c\u5168\u4e22\u5931\u6570\u636e\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u80fd\u4e3a\u8fd9\u4e9b\u9875\u9762\u521b\u5efa\u4e00\u4e2a\u8fd9\u6837\u7684\u5546\u5e97\u5462\uff1f\n\u55ef\uff0c\u8fd9\u6b63\u662f\u6389\u671f\u7684\u76ee\u7684\u3002\u4ea4\u6362\u662f\u5b58\u50a8\u8fd9\u4e9b\u4e0d\u53ef\u56de\u6536\u7684\u9875\u9762\u7684\u5b58\u50a8\u533a\u57df\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u6309\u9700\u5c06\u5b83\u4eec\u8c03\u51fa\u5230\u5b58\u50a8\u8bbe\u5907\u4e2d\u3002(=\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5b83\u4eec\u73b0\u5728\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e0e\u5b83\u4eec\u66f4\u5bb9\u6613\u56de\u6536\u7684\u670b\u53cb(\u5982\u6e05\u7406\u6587\u4ef6\u9875)\u4e00\u6837\u5e73\u7b49\u5730\u6709\u8d44\u683c\u56de\u6536\uff0c\u4ece\u800c\u5141\u8bb8\u66f4\u6709\u6548\u5730\u4f7f\u7528\u53ef\u7528\u7684\u7269\u7406\u5185\u5b58\u3002\n\u4ea4\u6362\u4e3b\u8981\u662f\u4e00\u79cd\u5e73\u7b49\u56de\u6536\u7684\u673a\u5236\uff0c\u4e0d\u9002\u7528\u4e8e\u7d27\u6025\u60c5\u51b5\u4e0b\u7684\u989d\u5916\u5185\u5b58\u3002\u4ea4\u6362\u5e76\u4e0d\u662f\u4f7f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53d8\u6162\u7684\u539f\u56e0--\u6240\u6709\u7684\u5185\u5b58\u4e89\u7528\u90fd\u662f\u4f7f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53d8\u6162\u7684\u539f\u56e0\u3002\n\u90a3\u4e48\uff0c\u5728\u8fd9\u79cd\u56de\u6536\u5e73\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u4ec0\u4e48\u6837\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u5408\u6cd5\u5730\u9009\u62e9\u56de\u6536\u533f\u540d\u9875\u9762\u5462\uff1f\u62bd\u8c61\u5730\u8bf4\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u4e0d\u5e38\u89c1\u7684\u573a\u666f\uff1a\n\u5728\u521d\u59cb\u5316\u671f\u95f4\uff0c\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5206\u914d\u548c\u4f7f\u7528Manypage\u3002\u8fd9\u4e9b\u9875\u9762\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5173\u95ed/\u6e05\u7406\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u662f\u4e00\u65e6\u7a0b\u5e8f\u542f\u52a8(\u4ece\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u610f\u4e49\u4e0a\u8bb2)\uff0c\u5c31\u4e0d\u9700\u8981\u8fd9\u4e9b\u9875\u9762\u4e86\u3002\u8fd9\u5bf9\u4e8e\u9700\u8981\u521d\u59cb\u5316\u7684\u5b88\u62a4\u8fdb\u7a0b\u6765\u8bf4\u662f\u76f8\u5f53\u5e38\u89c1\u7684\u3002\n\u5728\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u671f\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u914d\u5f88\u5c11\u4f7f\u7528\u7684\u5185\u5b58\u3002\u5bf9\u4e8e\u6574\u4f53\u7cfb\u7edf\u6027\u80fd\u800c\u8a00\uff0c\u9700\u8981\u6309\u9700\u4ece\u78c1\u76d8\u4fee\u590d\u8fd9\u4e9b\u4e3b\u8981\u6545\u969c\u53ef\u80fd\u66f4\u6709\u610f\u4e49\uff0c\u800c\u4e0d\u662f\u5c06\u5185\u5b58\u7528\u4e8e\u5176\u4ed6\u66f4\u91cd\u8981\u7684\u4e8b\u60c5\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5178\u578b\u7684\u60c5\u51b5\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u4ea4\u6362\u548c\u4e0d\u4ea4\u6362\u7684\u60c5\u51b5\u4e0b\u7684\u8868\u73b0\u3002\u5728\u6211\u5173\u4e8ecgroupv2\u7684\u6f14\u8bb2\u4e2d\uff0c\u6211\u8c08\u5230\u4e86\u6709\u5173\u5185\u5b58\u4e89\u7528\u7684\u6307\u6807\u3002\n\u4f7f\u7528\u4ea4\u6362\uff1a\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6362\u51fa\u5f88\u5c11\u4f7f\u7528\u7684\u533f\u540d\u5185\u5b58\uff0c\u8fd9\u4e9b\u5185\u5b58\u53ef\u80fd\u53ea\u5728\u8fdb\u7a0b\u751f\u547d\u5468\u671f\u7684\u4e00\u5c0f\u90e8\u5206\u4f7f\u7528\uff0c\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u8be5\u5185\u5b58\u6765\u63d0\u9ad8\u7f13\u5b58\u547d\u4e2d\u7387\uff0c\u6216\u8fdb\u884c\u5176\u4ed6\u4f18\u5316\u3002\n\u6ca1\u6709\u4ea4\u6362\uff1a\u6211\u4eec\u4e0d\u80fd\u6362\u51fa\u5f88\u5c11\u4f7f\u7528\u7684\u533f\u540d\u5185\u5b58\uff0c\u56e0\u4e3a\u5b83\u9501\u5728\u5185\u5b58\u4e2d\u3002\u867d\u7136\u8fd9\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u6210\u4e3a\u95ee\u9898\uff0c\u4f46\u5728\u67d0\u4e9b\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\uff0c\u8fd9\u53ef\u80fd\u8868\u793a\u7531\u4e8e\u9648\u65e7\u7684\u533f\u540d\u9875\u9762\u5360\u7528\u4e86\u66f4\u91cd\u8981\u7684\u4f7f\u7528\u7a7a\u95f4\u800c\u5bfc\u81f4\u7684\u6027\u80fd\u663e\u8457\u4e0b\u964d\u3002\n\u4f7f\u7528\u4ea4\u6362\uff1a\u6240\u6709\u5185\u5b58\u7c7b\u578b\u88ab\u56de\u6536\u7684\u53ef\u80fd\u6027\u90fd\u662f\u76f8\u7b49\u7684\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6709\u66f4\u591a\u673a\u4f1a\u6210\u529f\u56de\u6536\u9875\u9762-\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u6536\u4e0d\u4f1a\u5f88\u5feb\u51fa\u9519\u7684\u9875\u9762\u518d\u6b21\u8fd4\u56de(\u98a0\u7c38)\u3002\n\u6ca1\u6709\u4ea4\u6362\uff1a\u533f\u540d\u9875\u88ab\u9501\u5b9a\u5728\u5185\u5b58\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4eec\u65e0\u5904\u53ef\u53bb\u3002\u957f\u671f\u9875\u9762\u56de\u6536\u6210\u529f\u7684\u673a\u4f1a\u8f83\u4f4e\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u6709\u4e00\u4e9b\u7c7b\u578b\u7684\u5185\u5b58\u6709\u8d44\u683c\u88ab\u56de\u6536\u3002\u9875\u9762\u6296\u52a8\u7684\u98ce\u9669\u66f4\u9ad8\u3002\u666e\u901a\u8bfb\u8005\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u4f1a\u66f4\u597d\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u907f\u514d\u8fdb\u884c\u78c1\u76d8I/O\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64-\u6211\u4eec\u53ea\u9700\u5c06\u4ea4\u6362\u7684\u78c1\u76d8I/O\u8f6c\u79fb\u5230\u4e22\u5f03\u70ed\u95e8\u9875\u9762\u7f13\u5b58\u548c\u4e22\u5f03\u6211\u4eec\u5f88\u5feb\u9700\u8981\u7684\u4ee3\u7801\u6bb5\u5373\u53ef\u3002\n\u6709\u4e86SWAP\uff1a\u6211\u4eec\u5bf9\u6682\u65f6\u7684\u5cf0\u503c\u66f4\u6709\u5f39\u6027\uff0c\u4f46\u5728\u4e25\u91cd\u5185\u5b58\u532e\u4e4f\u7684\u60c5\u51b5\u4e0b\uff0c\u4ece\u5185\u5b58\u5f00\u59cb\u98a4\u6296\u5230OOM\u6740\u624b\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u5ef6\u957f\u3002\u6211\u4eec\u5bf9\u8bb0\u5fc6\u538b\u529b\u7684\u59cb\u4f5c\u4fd1\u8005\u6709\u4e86\u66f4\u591a\u7684\u4e86\u89e3\uff0c\u53ef\u4ee5\u66f4\u5408\u7406\u5730\u5bf9\u5176\u91c7\u53d6\u884c\u52a8\uff0c\u5e76\u53ef\u4ee5\u8fdb\u884c\u53d7\u63a7\u7684\u5e72\u9884\u3002\n\u5728\u6ca1\u6709\u4ea4\u6362\u7684\u60c5\u51b5\u4e0b\uff1aOOM\u6740\u624b\u88ab\u66f4\u5feb\u5730\u89e6\u53d1\uff0c\u56e0\u4e3a\u533f\u540d\u9875\u9762\u88ab\u9501\u5b9a\u5728\u5185\u5b58\u4e2d\u5e76\u4e14\u4e0d\u80fd\u88ab\u56de\u6536\u3002\u6211\u4eec\u66f4\u6709\u53ef\u80fd\u91cd\u51fb\u8bb0\u5fc6\uff0c\u4f46\u662f\u91cd\u51fb\u548c\u6392\u5375\u4e4b\u95f4\u7684\u65f6\u95f4\u51cf\u5c11\u4e86\u3002\u8fd9\u53d6\u51b3\u4e8e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u53ef\u80fd\u662f\u66f4\u597d\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u66f4\u7cdf\u7684\u3002\u4f8b\u5982\uff0c\u57fa\u4e8e\u961f\u5217\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u8fd9\u79cd\u4ece\u62cd\u6253\u5230\u6740\u622e\u7684\u5feb\u901f\u4f20\u8f93\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4ecd\u7136\u4e3a\u65f6\u5df2\u665a\uff0c\u65e0\u6cd5\u53d1\u6325\u771f\u6b63\u7684\u4f5c\u7528--OOM\u6740\u624b\u53ea\u5728\u4e25\u91cd\u9965\u997f\u7684\u65f6\u523b\u624d\u4f1a\u88ab\u8c03\u7528\uff0c\u800c\u4f9d\u8d56\u8fd9\u79cd\u65b9\u6cd5\u6765\u5b9e\u73b0\u8fd9\u79cd\u884c\u4e3a\u4f1a\u66f4\u597d\u5730\u88ab\u66f4\u591a\u7684\u673a\u4f1a\u4e3b\u4e49\u8fdb\u7a0b\u6740\u6b7b\u6240\u53d6\u4ee3\uff0c\u56e0\u4e3a\u9996\u5148\u4f1a\u51fa\u73b0\u5185\u5b58\u4e89\u7528\u3002\n\u597d\u7684\uff0c\u6211\u60f3\u8981\u7cfb\u7edf\u4ea4\u6362\uff0c\u4f46\u662f\u6211\u5982\u4f55\u9488\u5bf9\u5404\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8c03\u4f18\u5b83\u5462\uff1f\n\u4f60\u4e0d\u4f1a\u8ba4\u4e3a\u5982\u679c\u6211\u4e0d\u63d2\u4e0acgroupv2\uff0c\u4f60\u6574\u4e2a\u5e16\u5b50\u90fd\u8bfb\u4e0d\u5b8c\u5427\uff1f\uff1b-)\u3002\n\u663e\u7136\uff0c\u901a\u7528\u7684\u542f\u53d1\u5f0f\u7b97\u6cd5\u5f88\u96be\u603b\u662f\u6b63\u786e\u7684\uff0c\u6240\u4ee5\u80fd\u591f\u7ed9\u5185\u6838\u63d0\u4f9b\u6307\u5bfc\u662f\u5f88\u91cd\u8981\u7684\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u60a8\u552f\u4e00\u80fd\u505a\u7684\u8c03\u6574\u662f\u5728\u7cfb\u7edf\u7ea7\u522b\uff0c\u4f7f\u7528vm.swappness\u3002\u8fd9\u6709\u4e24\u4e2a\u95ee\u9898\uff1avm.swappity\u975e\u5e38\u96be\u4ee5\u89e3\u91ca\uff0c\u56e0\u4e3a\u5b83\u53ea\u4f5c\u4e3a\u8f83\u5927\u7684\u542f\u53d1\u5f0f\u7cfb\u7edf\u7684\u4e00\u5c0f\u90e8\u5206\u8f93\u5165\uff0c\u800c\u4e14\u5b83\u662f\u7cfb\u7edf\u8303\u56f4\u7684\uff0c\u800c\u4e0d\u662f\u7ec6\u5316\u5230\u4e00\u7ec4\u8f83\u5c0f\u7684\u8fdb\u7a0b\u3002\n\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528mlock\u5c06\u9875\u9762\u9501\u5b9a\u5230\u5185\u5b58\u4e2d\uff0c\u4f46\u8fd9\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4ee3\u7801\u3001\u4f7f\u7528LD_PRELOAD\u53d6\u4e50\uff0c\u6216\u8005\u5728\u8fd0\u884c\u65f6\u4f7f\u7528adebugger\u505a\u4e00\u4e9b\u53ef\u6015\u7684\u4e8b\u60c5\u3002\u5728\u57fa\u4e8eVM\u7684\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e5f\u4e0d\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u56e0\u4e3a\u60a8\u901a\u5e38\u65e0\u6cd5\u63a7\u5236\u5206\u914d\uff0c\u6700\u7ec8\u4e0d\u5f97\u4e0dmlockall\uff0c\u8fd9\u5bf9\u60a8\u5b9e\u9645\u5173\u5fc3\u7684\u9875\u9762\u6ca1\u6709\u7cbe\u786e\u6027\u3002\ncgroup v2\u6709\u4e00\u4e2a\u53ef\u8c03\u7684\u5185\u5b58.low\u5f62\u5f0f\u7684\u6bcfcgroup\uff0c\u5b83\u5141\u8bb8\u7528\u6237\u544a\u8bc9\u5185\u6838\u4f18\u5148\u4f7f\u7528\u4f4e\u4e8e\u67d0\u4e2a\u5185\u5b58\u4f7f\u7528\u9608\u503c\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u56de\u6536\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u4e0d\u963b\u6b62\u5185\u6838\u6362\u51fa\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u66f4\u613f\u610f\u5728\u5185\u5b58\u4e89\u7528\u7684\u60c5\u51b5\u4e0b\u4ece\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u4e2d\u56de\u6536\u3002\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u4ea4\u6362\u903b\u8f91\u901a\u5e38\u76f8\u5f53\u597d\uff0c\u5e76\u4e14\u5141\u8bb8\u5b83\u968f\u610f\u6362\u51fa\u9875\u9762\u901a\u5e38\u4f1a\u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd\u3002\u5728\u4e25\u91cd\u7684\u5185\u5b58\u4e89\u7528\u4e0b\u8fdb\u884c\u4ea4\u6362\u5e76\u4e0d\u7406\u60f3\uff0c\u4f46\u5b83\u66f4\u591a\u7684\u662f\u5b8c\u5168\u8017\u5c3d\u5185\u5b58\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4ea4\u6362\u5668\u7684\u95ee\u9898\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f53\u5185\u5b58\u538b\u529b\u5f00\u59cb\u589e\u52a0\u65f6\uff0c\u60a8\u901a\u5e38\u5e0c\u671b\u901a\u8fc7\u81ea\u6bc1\u975e\u5173\u952e\u8fdb\u7a0b\u6765\u5feb\u901f\u5931\u8d25\u3002\n\u4e3a\u6b64\uff0c\u60a8\u4e0d\u80fd\u7b80\u5355\u5730\u4f9d\u8d56OOM\u6740\u624b\u3002OOM\u6740\u624b\u53ea\u6709\u5728\u4e25\u91cd\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u88ab\u8c03\u7528\uff0c\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u8fdb\u5165\u4e86\u7cfb\u7edf\u4e25\u91cd\u4e0d\u5065\u5eb7\u7684\u72b6\u6001\uff0c\u800c\u4e14\u5f88\u53ef\u80fd\u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\u3002\u5728\u8003\u8651OOM\u6740\u624b\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u81ea\u5df1\u673a\u4f1a\u4e3b\u4e49\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\n\u4e0d\u8fc7\uff0c\u4f7f\u7528\u4f20\u7edf\u7684LinuxMemory\u8ba1\u6570\u5668\u786e\u5b9a\u5185\u5b58\u538b\u529b\u6709\u70b9\u56f0\u96be\u3002\u6211\u4eec\u6709\u4e00\u4e9b\u770b\u4f3c\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u662f\u5207\u9898--\u5185\u5b58\u4f7f\u7528\u7387\u3001\u9875\u9762\u626b\u63cf\u7b49\u7b49--\u4ec5\u4ece\u8fd9\u4e9b\u6307\u6807\u5f88\u96be\u533a\u5206\u6709\u6548\u7684\u5185\u5b58\u914d\u7f6e\u548c\u503e\u5411\u4e8e\u5185\u5b58\u4e89\u7528\u7684\u5185\u5b58\u914d\u7f6e\u3002\u5728Facebook\u6709\u4e00\u7fa4\u4eba\uff0c\u4ee5\u7ea6\u7ff0\u5c3c\u65af\u4e3a\u9996\uff0c\u81f4\u529b\u4e8e\u5f00\u53d1\u65b0\u7684\u5ea6\u91cf\u6807\u51c6\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u66b4\u9732\u8bb0\u5fc6\u538b\u529b\uff0c\u8fd9\u5e94\u8be5\u4f1a\u5728\u672a\u6765\u5bf9\u6b64\u6709\u6240\u5e2e\u52a9\u3002\u5982\u679c\u60a8\u6709\u5174\u8da3\u4e86\u89e3\u66f4\u591a\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\uff0c\u6211\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u6211\u5728cgroupv2\u4e0a\u7684\u6f14\u8bb2\u4e2d\u6b63\u5728\u8003\u8651\u7684\u4e00\u4e2a\u6307\u6807\u3002\n\u901a\u5e38\uff0c\u4f18\u5316\u5185\u5b58\u7ba1\u7406\u6240\u9700\u7684\u6700\u5c0f\u4ea4\u6362\u7a7a\u95f4\u91cf\u53d6\u51b3\u4e8e\u56fa\u5b9a\u5728\u5185\u5b58\u4e2d\u4e14\u672a\u88ab\u5e94\u7528\u7a0b\u5e8f\u91cd\u65b0\u8bbf\u95ee\u7684\u533f\u540d\u9875\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u56de\u6536\u8fd9\u4e9b\u533f\u540d\u9875\u7684\u4ef7\u503c\u3002\u540e\u8005\u4e3b\u8981\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u54ea\u4e9b\u9875\u9762\u4e0d\u518d\u88ab\u6e05\u9664\uff0c\u4ee5\u4fbf\u4e3a\u8fd9\u4e9b\u4e0d\u7ecf\u5e38\u8bbf\u95ee\u7684\u533f\u540d\u9875\u9762\u8ba9\u8def\u3002\n\u5982\u679c\u60a8\u6709\u5927\u91cf\u7684\u78c1\u76d8\u7a7a\u95f4\u548c\u6700\u65b0\u7684(4.0+)\u5185\u6838\uff0c\u90a3\u4e48\u4ea4\u6362\u7a7a\u95f4\u8d8a\u591a\u51e0\u4e4e\u603b\u662f\u6bd4\u4ea4\u6362\u8d8a\u5c11\u8d8a\u597d\u3002\u5728\u8f83\u65e7\u7684\u5185\u6838\u4e2d\uff0ckswapd\u662f\u8d1f\u8d23\u7ba1\u7406\u4ea4\u6362\u7684\u5185\u6838\u8fdb\u7a0b\u4e4b\u4e00\uff0c\u5728\u5386\u53f2\u4e0a\uff0c\u5b83\u603b\u662f\u975e\u5e38\u6025\u5207\u5730\u60f3\u8981\u5728\u4ea4\u6362\u8d8a\u591a\u7684\u60c5\u51b5\u4e0b\u79ef\u6781\u5730\u8017\u5c3d\u5185\u5b58\u3002\u6700\u8fd1\uff0c\u5f53\u6709\u5927\u91cf\u4ea4\u6362\u7a7a\u95f4\u53ef\u7528\u65f6\uff0c\u4ea4\u6362\u884c\u4e3a\u5df2\u5f97\u5230\u663e\u8457\u6539\u5584\u3002\u5982\u679c\u60a8\u6b63\u5728\u8fd0\u884c\u5185\u68384.0+\uff0c\u5728\u73b0\u4ee3\u5185\u6838\u4e0a\u8fdb\u884c\u66f4\u5927\u7684\u4ea4\u6362\u5e94\u8be5\u4e0d\u4f1a\u5bfc\u81f4\u8fc7\u5ea6\u7684\u4ea4\u6362\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u90a3\u4e48\u51e0GB\u7684\u4ea4\u6362\u5927\u5c0f\u53ef\u4ee5\u8ba9\u60a8\u5728\u73b0\u4ee3\u5185\u6838\u4e0a\u6709\u9009\u62e9\u4f59\u5730\u3002\n\u5982\u679c\u60a8\u66f4\u53d7\u78c1\u76d8\u7a7a\u95f4\u7684\u9650\u5236\uff0c\u90a3\u4e48\u7b54\u6848\u5b9e\u9645\u4e0a\u53d6\u51b3\u4e8e\u60a8\u5fc5\u987b\u505a\u51fa\u7684\u6743\u8861\uff0c\u4ee5\u53ca\u73af\u5883\u7684\u6027\u8d28\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e94\u8be5\u6709\u8db3\u591f\u7684\u4ea4\u6362\u7a7a\u95f4\uff0c\u4ee5\u4f7f\u60a8\u7684\u7cfb\u7edf\u5728\u6b63\u5e38\u548c\u5cf0\u503c(\u5185\u5b58)\u8d1f\u8f7d\u4e0b\u4ee5\u6700\u4f73\u65b9\u5f0f\u8fd0\u884c\u3002\u6211\u63a8\u8350\u7684\u662f\u8bbe\u7f6e\u4e00\u4e9b\u5177\u67092-3 GB\u6216\u66f4\u591a\u4ea4\u6362\u7a7a\u95f4\u7684\u6d4b\u8bd5\u7cfb\u7edf\uff0c\u5e76\u76d1\u63a7\u4e00\u5468\u5de6\u53f3\u5728\u4e0d\u540c(\u5185\u5b58)\u8d1f\u8f7d\u6761\u4ef6\u4e0b\u53d1\u751f\u7684\u60c5\u51b5\u3002\u53ea\u8981\u4f60\u5728\u90a3\u4e00\u5468\u5185\u6ca1\u6709\u9047\u5230\u4e25\u91cd\u7684\u5185\u5b58\u532e\u4e4f-\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6d4b\u8bd5\u5c31\u4e0d\u4f1a\u5f88\u6709\u7528-\u4f60\u6700\u7ec8\u53ef\u80fd\u4f1a\u5360\u7528\u4e00\u4e9bMB\u7684\u4ea4\u6362\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u9664\u4e86\u4e3a\u53d8\u5316\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7559\u51fa\u4e00\u70b9\u7f13\u51b2\u533a\u4e4b\u5916\uff0c\u81f3\u5c11\u6709\u90a3\u4e48\u591a\u53ef\u7528\u4ea4\u6362\u7a7a\u95f4\u53ef\u80fd\u662f\u503c\u5f97\u7684\u3002\u5728\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5f0f\u4e4b\u4e0a\u8fd8\u53ef\u4ee5\u5728SWAPSZ\u5217\u4e2d\u663e\u793a\u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\u7684\u9875\u9762\u6b63\u5728\u88ab\u6e05\u9664\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u5728\u670d\u52a1\u5668\u4e0a\u4f7f\u7528\u5b83\u6765\u8bb0\u5f55\u670d\u52a1\u5668\u7684\u5386\u53f2\u72b6\u6001\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u5176\u8bbe\u7f6e\u5728\u5e26\u6709\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5f0f\u7684\u6d4b\u8bd5\u673a\u5668\u4e0a\uff0c\u4f5c\u4e3a\u672c\u5b9e\u9a8c\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u8fd8\u4f1a\u544a\u8bc9\u60a8\u5e94\u7528\u7a0b\u5e8f\u4f55\u65f6\u5f00\u59cb\u6362\u51fa\u9875\u9762\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u9875\u9762\u4e0e\u65e5\u5fd7\u4e8b\u4ef6\u6216\u5176\u4ed6\u5173\u952e\u6570\u636e\u8054\u7cfb\u8d77\u6765\u3002\n\u53e6\u4e00\u4ef6\u503c\u5f97\u8003\u8651\u7684\u4e8b\u60c5\u662f\u6389\u671f\u4ecb\u8d28\u7684\u6027\u8d28\u3002\u4ea4\u6362Readstend\u662f\u9ad8\u5ea6\u968f\u673a\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u53ef\u9760\u5730\u9884\u6d4b\u54ea\u4e9b\u9875\u9762\u4f1a\u51fa\u9519\uff0c\u4ec0\u4e48\u65f6\u5019\u4f1a\u51fa\u9519\u3002\u5728\u56fa\u6001\u786c\u76d8\u4e0a\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\uff0c\u4f46\u5728\u65cb\u8f6c\u78c1\u76d8\u4e0a\uff0c\u968f\u673aI/O\u975e\u5e38\u6602\u8d35\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u7269\u7406\u79fb\u52a8\u624d\u80fd\u5b9e\u73b0\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u91cd\u65b0\u8bbe\u7f6e\u6587\u4ef6\u9875\u7684\u968f\u673a\u6027\u53ef\u80fd\u8f83\u5c0f\uff0c\u56e0\u4e3a\u4e0e\u8fd0\u884c\u65f6\u5355\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u64cd\u4f5c\u76f8\u5173\u7684\u6587\u4ef6\u5f80\u5f80\u8f83\u5c11\u788e\u7247\u5316\u3002\u8fd9\u53ef\u80fd\u610f\u5473\u7740\uff0c\u5728\u65cb\u8f6c\u78c1\u76d8\u4e0a\uff0c\u60a8\u53ef\u80fd\u5e0c\u671bTobias\u66f4\u591a\u5730\u56de\u6536\u6587\u4ef6\u9875\u9762\uff0c\u800c\u4e0d\u662f\u6362\u51fa\u533f\u540d\u9875\u9762\uff0c\u4f46\u60a8\u8fd8\u9700\u8981\u6d4b\u8bd5\u548c\u8bc4\u4f30\u8fd9\u79cd\u5e73\u8861\n\u5bf9\u4e8e\u60f3\u8981\u4f11\u7720\u4ea4\u6362\u7684\u7b14\u8bb0\u672c\u7535\u8111/\u53f0\u5f0f\u673a\u7528\u6237\uff0c\u8fd9\u4e5f\u9700\u8981\u8003\u8651\u5230-\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ea4\u6362\u6587\u4ef6\u81f3\u5c11\u5e94\u8be5\u662f\u60a8\u7684\u7269\u7406RAM\u5927\u5c0f\u3002\n\u9996\u5148\uff0c\u91cd\u8981\u7684\u662f\u8981\u4e86\u89e3vm.swappness\u7684\u4f5c\u7528\u3002vm.swappinesl\u662f\u4e00\u4e2asysctl\uff0c\u5b83\u5c06\u5185\u5b58\u56de\u6536\u504f\u5411\u4e8e\u533f\u540d\u9875\u9762\u7684\u56de\u6536\uff0c\u6216\u8005\u504f\u5411\u4e8e\u6587\u4ef6\u9875\u9762\u7684\u56de\u6536\u3002\u5b83\u4f7f\u7528\u4e24\u4e2a\u4e0d\u540c\u7684\u5c5e\u6027\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1aFILE_PRIO(\u6211\u4eec\u613f\u610f\u56de\u6536\u6587\u4ef6\u9875)\u548cANON_PRIO(\u6211\u4eec\u613f\u610f\u56de\u6536\u533f\u540d\u9875)\u3002vm.swappness\u5728\u8fd9\u65b9\u9762\u53d1\u6325\u4e86\u4f5c\u7528\uff0c\u56e0\u4e3a\u5b83\u6210\u4e3a\u4e86ANON_PRIO\u7684\u9ed8\u8ba4\u503c\uff0c\u5e76\u4e14\u8fd8\u4eceFILE_PRIO\u7684\u9ed8\u8ba4\u503c200\u4e2d\u51cf\u53bb\u4e86\u5b83\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u4e8evm.swappness=50\u7684\u503c\uff0c\u7ed3\u679c\u662fANON_PRIO\u662f50\uff0cFILE_PRIO\u662f150(\u786e\u5207\u7684\u6570\u5b57\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u76f8\u5bf9\u6743\u91cd\u662f\u4e00\u6837\u7684)\u3002\n\u8fd9\u610f\u5473\u7740\uff0c\u4e00\u822c\u800c\u8a00\uff0cvm.swappness\u4ec5\u4ec5\u662f\u56de\u6536\u548c\u91cd\u65b0\u6545\u969c\u533f\u540d\u5185\u5b58\u4e0e\u786c\u4ef6\u548c\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6587\u4ef6\u5185\u5b58\u7684\u6210\u672c\u4e4b\u6bd4\u3002\u8be5\u503c\u8d8a\u4f4e\uff0c\u60a8\u5c31\u8d8a\u80fd\u544a\u8bc9\u5185\u6838\uff0c\u5728\u60a8\u7684\u786c\u4ef6\u4e0a\u6362\u51fa\u548c\u6362\u5165\u4e0d\u7ecf\u5e38\u8bbf\u95ee\u7684\u533f\u540d\u9875\u7684\u6210\u672c\u5f88\u9ad8\u3002\u8be5\u503c\u8d8a\u9ad8\uff0c\u60a8\u5c31\u8d8a\u80fd\u544a\u8bc9\u5185\u6838\uff0c\u5728\u60a8\u7684\u786c\u4ef6\u4e0a\u4ea4\u6362\u533f\u540d\u9875\u548c\u6587\u4ef6\u9875\u7684\u6210\u672c\u662f\u76f8\u4f3c\u7684\u3002\u5185\u5b58\u7ba1\u7406\u5b50\u7cfb\u7edf\u4ecd\u5c06\u4e3b\u8981\u6839\u636e\u5185\u5b58\u7684\u70ed\u5ea6\u6765\u51b3\u5b9a\u662f\u5426\u4ea4\u6362\u6587\u4ef6\u6216\u533f\u540d\u9875\uff0c\u4f46\u4ea4\u6362\u7684\u6210\u672c\u8ba1\u7b97\u8981\u4e48\u66f4\u503e\u5411\u4e8e\u4ea4\u6362\uff0c\u8981\u4e48\u66f4\u503e\u5411\u4e8e\u4e22\u5f03\u6587\u4ef6\u7cfb\u7edf\u7f13\u5b58(\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5)\u3002\u5728SSD\u4e0a\uff0c\u8fd9\u4e9b\u57fa\u672c\u90fd\u662f\u4e00\u6837\u6602\u8d35\u7684\uff0c\u56e0\u6b64\u8bbe\u7f6evm.swappness=100(\u5b8c\u5168\u76f8\u7b49)\u53ef\u80fd\u6548\u679c\u5f88\u597d\u3002\u5728\u65cb\u8f6c\u78c1\u76d8\u65f6\uff0c\u4ea4\u6362\u7684\u6210\u672c\u53ef\u80fd\u8981\u9ad8\u5f97\u591a\uff0c\u56e0\u4e3a\u4ea4\u6362\u672c\u8eab\u9700\u8981\u968f\u673a\u8bfb\u53d6\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u5e0c\u671b\u66f4\u503e\u5411\u4e8e\u8f83\u4f4e\u7684\u503c\u3002\n\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u5927\u591a\u6570\u4eba\u5e76\u4e0d\u771f\u7684\u611f\u89c9\u5230\u4ed6\u4eec\u7684\u786c\u4ef6\u9700\u8981\u4ec0\u4e48\uff0c\u6240\u4ee5\u6839\u636e\u672c\u80fd\u6765\u8c03\u6574\u8fd9\u4e2a\u503c\u5e76\u4e0d\u662f\u4e00\u4ef6\u5fae\u4e0d\u8db3\u9053\u7684\u4e8b--\u8fd9\u662f\u4f60\u9700\u8981\u7528\u4e0d\u540c\u7684\u503c\u6765\u6d4b\u8bd5\u7684\u3002\u60a8\u8fd8\u53ef\u4ee5\u82b1\u65f6\u95f4\u8bc4\u4f30\u7cfb\u7edf\u548c\u6838\u5fc3\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u7ec4\u6210\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u8f7b\u5ea6\u5185\u5b58\u56de\u6536\u4e0b\u7684\u884c\u4e3a\u3002\n\u5728\u8c08\u5230vm.swappness\u65f6\uff0c\u6700\u8fd1\u8981\u8003\u8651\u7684\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684\u53d8\u5316\u662f\uff0cSatoru Moriya\u57282012\u5e74\u5bf9vmscan\u6240\u505a\u7684\u66f4\u6539\uff0c\u5b83\u6781\u5927\u5730\u6539\u53d8\u4e86\u5904\u7406vm.swappness=0\u7684\u65b9\u5f0f\u3002\n\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u8fd9\u4e2a\u8865\u4e01\u4f7f\u5f97\u6211\u4eec\u5bf9\u626b\u63cf(\u4ece\u800c\u56de\u6536)\u4efb\u4f55vm.swappness=0\u7684\u533f\u540d\u9875\u9762\u975e\u5e38\u6709\u504f\u89c1\uff0c\u9664\u975e\u6211\u4eec\u5df2\u7ecf\u9047\u5230\u4e25\u91cd\u7684\u5185\u5b58\u4e89\u7528\u3002\u6b63\u5982\u4e4b\u524d\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\uff0c\u8fd9\u901a\u5e38\u4e0d\u662f\u4f60\u60f3\u8981\u7684\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u963b\u6b62\u5728\u6781\u7aef\u8bb0\u5fc6\u538b\u529b\u53d1\u751f\u4e4b\u524d\u76f8\u7b49\u5730\u56de\u6536\uff0c\u800c\u8fd9\u5b9e\u9645\u4e0a\u53ef\u80fd\u9996\u5148\u5bfc\u81f4\u8fd9\u79cd\u6781\u7aef\u8bb0\u5fc6\u538b\u529b\u3002vm.swappness=1\u662f\u60a8\u5728\u4e0d\u8c03\u7528\u3002\n..", "note_en": "Having swap is a reasonably important part of a well functioning system.Without it, sane memory management becomes harder to achieve.\n  Swap is not generally about getting emergency memory, it&#39;s about makingmemory reclamation egalitarian and efficient. In fact, using it as&#34;emergency memory&#34; is generally actively harmful.\n  Disabling swap does not prevent disk I/O from becoming a problem undermemory contention, it simply shifts the disk I/O thrashing from anonymouspages to file pages. Not only may this be less efficient, as we have asmaller pool of pages to select from for reclaim, but it may also contributeto getting into this high contention state in the first place.\n  The swapper on kernels before 4.0 has a lot of pitfalls, and has contributedto a lot of people&#39;s negative perceptions about swap due to itsovereagerness to swap out pages. On kernels &gt;4.0, the situation issignificantly better.\n  On SSDs, swapping out anonymous pages and reclaiming file pages areessentially equivalent in terms of performance/latency. On older spinningdisks, swap reads are slower due to random reads, so a lower  vm.swappinesssetting makes sense there (read on for more about  vm.swappiness).\n  Disabling swap doesn&#39;t prevent pathological behaviour at near-OOM, althoughit&#39;s true that having swap may prolong it. Whether the system global OOMkiller is invoked with or without swap, or was invoked sooner or later, theresult is the same: you are left with a system in an unpredictable state.Having no swap doesn&#39;t avoid this.\n  You can achieve better swap behaviour under memory pressure and preventthrashing using  memory.low and friends in cgroup v2.\n  As part of my work improving kernel memory management and  cgroupv2, I&#39;ve been talking to a lot ofengineers about attitudes towards memory management, especially aroundapplication behaviour under pressure and operating system heuristics used underthe hood for memory management.\n A repeated topic in these discussions has been swap. Swap is a hotly contestedand poorly understood topic, even by those who have been working with Linux formany years. Many see it as useless or actively harmful: a relic of a time wherememory was scarce, and disks were a necessary evil to provide much-needed spacefor paging. This is a statement that I still see being batted around withrelative frequency in recent years, and I&#39;ve had many discussions withcolleagues, friends, and industry peers to help them understand why swap isstill a useful concept on modern computers with significantly more physicalmemory available than in the past.\n There&#39;s also a lot of misunderstanding about the purpose of swap \u2013 many peoplejust see it as a kind of &#34;slow extra memory&#34; for use in emergencies, but don&#39;tunderstand how it can contribute during normal load to the healthy operation ofan operating system as a whole.\n Many of us have heard most of the usual tropes about memory: &#34; Linux uses toomuch memory&#34;, &#34; swap should be double yourphysical memory size&#34;, and the like.While these are either trivial to dispel, or discussion around them has becomemore nuanced in recent years, the myth of &#34;useless&#34; swap is much more groundedin heuristics and arcana rather than something that can be explained by simpleanalogy, and requires somewhat more understanding of memory management toreason about.\n This post is mostly aimed at those who administrate Linux systems and areinterested in hearing the counterpoints to running with undersized/no swap orrunning with  vm.swappiness set to 0.\n  It&#39;s hard to talk about why having swap and swapping out pages are good thingsin normal operation without a shared understanding of some of the basicunderlying mechanisms at play in Linux memory management, so let&#39;s make surewe&#39;re on the same page.\n  There are many different types of memory in Linux, and each type has its ownproperties. Understanding the nuances of these is key to understanding why swapis important.\n For example, there are   pages (&#34;blocks&#34; of memory, typically4k) responsible forholding the code for each process being run on your computer. There are alsopages responsible for caching data and metadata related to files accessed bythose programs in order to speed up future access. These are part of the  pagecache, and I will refer to them as file memory.\n There are also pages which are responsible for the memory allocations madeinside that code, for example, when new memory that has been allocated with malloc is written to, or when using  mmap&#39;s  MAP_ANONYMOUS flag. These are&#34;anonymous&#34; pages \u2013 so called because they are not backed by anything \u2013 and Iwill refer to them as  anon memory.\n There are other types of memory too \u2013 shared memory, slab memory, kernel stackmemory, buffers, and the like \u2013 but anonymous memory and file memory are themost well known and easy to understand ones, so I will use these in myexamples, although they apply equally to these types too.\n  One of the most fundamental questions when thinking about a particular type ofmemory is whether it is able to be reclaimed or not. &#34;Reclaim&#34; here means thatthe system can, without losing data, purge pages of that type from physicalmemory.\n For some page types, this is typically fairly trivial. For example, in the caseof  clean (unmodified) page cache memory, we&#39;re simply caching something thatwe have on disk for performance, so we can drop the page without having to doany special operations.\n For some page types, this is possible, but not trivial. For example, in thecase of  dirty (modified) page cache memory, we can&#39;t just drop the page,because the disk doesn&#39;t have our modifications yet. As such we either need todeny reclamation or first get our changes back to disk before we can drop thismemory.\n For some page types, this is not possible. For example, in the case of theanonymous pages mentioned previously, they only exist in memory and in no otherbacking store, so they have to be kept there.\n  If you look for descriptions of the purpose of swap on Linux, you&#39;ll inevitablyfind many people talking about it as if it is merely an extension of thephysical RAM for use in emergencies. For example, here is a random post I gotas one of the top results from typing &#34;what is swap&#34; in Google:\n Swap is essentially emergency memory; a space set aside for times when yoursystem temporarily needs more physical memory than you have available in RAM.It&#39;s considered &#34;bad&#34; in the sense that it&#39;s slow and inefficient, and ifyour system constantly needs to use swap then it obviously doesn&#39;t haveenough memory. [\u2026] If you have enough RAM to handle all of your needs, anddon&#39;t expect to ever max it out, then you should be perfectly safe runningwithout a swap space.\n To be clear, I don&#39;t blame the poster of this comment at all for the content oftheir post \u2013 this is accepted as &#34;common knowledge&#34; by a lot of Linuxsysadmins and is probably one of the most likely things that you will hear fromone if you ask them to talk about swap. It is unfortunately also, however, amisunderstanding of the purpose and use of swap, especially on modern systems.\n Above, I talked about reclamation for anonymous pages being &#34;not possible&#34;, asanonymous pages by their nature have no backing store to fall back to whenbeing purged from memory \u2013 as such, their reclamation would result in completedata loss for those pages. What if we could create such a store for thesepages, though?\n Well, this is precisely what swap is for. Swap is a storage area for theseseemingly &#34;unreclaimable&#34; pages that allows us to page them out to a storagedevice on demand. This means that they can now be considered as equallyeligible for reclaim as their more trivially reclaimable friends, like cleanfile pages, allowing more efficient use of available physical memory.\n Swap is primarily a mechanism for equality of reclamation, not for emergency&#34;extra memory&#34;. Swap is not what makes your application slow \u2013 enteringoverall memory contention is what makes your application slow.\n So in what situations under this &#34;equality of reclamation&#34; scenario would welegitimately choose to reclaim anonymous pages? Here are, abstractly, some notuncommon scenarios:\n During initialisation, a long-running program may allocate and use manypages. These pages may also be used as part of shutdown/cleanup, but are notneeded once the program is &#34;started&#34; (in an application-specific sense).This is fairly common for daemons which have significant dependencies toinitialise.\n  During the program&#39;s normal operation, we may allocate memory which is onlyused rarely. It may make more sense for overall system performance torequire a  major fault topage these in from disk on demand, instead using the memory forsomething else that&#39;s more important.\n  Let&#39;s look at typical situations, and how they perform with and without swappresent. I talk about metrics around &#34;memory contention&#34; in my  talk on cgroupv2.\n  With swap: We can choose to swap out rarely-used anonymous memory thatmay only be used during a small part of the process lifecycle, allowing us touse this memory to improve cache hit rate, or do other optimisations.\n  Without swap: We cannot swap out rarely-used anonymous memory, as it&#39;slocked in memory. While this may not immediately present as a problem, onsome workloads this may represent a non-trivial drop in performance due tostale, anonymous pages taking space away from more important use.\n  With swap: All memory types have an equal possibility of being reclaimed.This means we have more chance of being able to reclaim pages successfully \u2013that is, we can reclaim pages that are not quickly faulted back in again(thrashing).\n  Without swap: Anonymous pages are locked into memory as they have nowhereto go. The chance of successful long-term page reclamation is lower, as wehave only some types of memory eligible to be reclaimed at all. The risk ofpage thrashing is higher. The casual reader might think that this would stillbe better as it might avoid having to do disk I/O, but this isn&#39;t true \u2013 wesimply transfer the disk I/O of swapping to dropping hot page caches anddropping code segments we need soon.\n  With swap: We&#39;re more resilient to temporary spikes, but in cases ofsevere memory starvation, the period from memory thrashing beginning to theOOM killer may be prolonged. We have more visibility into the instigators ofmemory pressure and can act on them more reasonably, and can perform acontrolled intervention.\n  Without swap: The OOM killer is triggered more quickly as anonymous pagesare locked into memory and cannot be reclaimed. We&#39;re more likely to thrashon memory, but the time between thrashing and OOMing is reduced. Depending onyour application, this may be better or worse. For example, a queue-basedapplication may desire this quick transfer from thrashing to killing. Thatsaid, this is still too late to be really useful \u2013 the OOM killer is onlyinvoked at moments of severe starvation, and relying on this method for suchbehaviour would be better replaced with more opportunistic killing ofprocesses as memory contention is reached in the first place.\n Okay, so I want system swap, but how can I tune it for individual applications?\n You didn&#39;t think you&#39;d get through this entire post without me plugging cgroupv2, did you? ;-)\n Obviously, it&#39;s hard for a generic heuristic algorithm to be right all the time,so it&#39;s important for you to be able to give guidance to the kernel.Historically the only tuning you could do was at the system level, using vm.swappiness. This has two problems:  vm.swappiness is incredibly hard toreason about because it only feeds in as a small part of a larger heuristicsystem, and it also is system-wide instead of being granular to a smaller setof processes.\n You can also use  mlock to lock pages into memory, but this requires eithermodifying program code, fun with  LD_PRELOAD, or doing horrible things with adebugger at runtime. In VM-based languages this also doesn&#39;t work very well,since you generally have no control over allocation and end up having to mlockall, which has no precision towards the pages you actually care about.\n cgroup v2 has a tunable per-cgroup in the form of  memory.low, which allows usto tell the kernel to prefer other applications for reclaim below a certainthreshold of memory used. This allows us to not prevent the kernel fromswapping out parts of our application, but prefer to reclaim from otherapplications under memory contention. Under normal conditions, the kernel&#39;sswap logic is generally pretty good, and allowing it to swap out pagesopportunistically generally increases system performance. Swap thrash underheavy memory contention is not ideal, but it&#39;s more a property of simplyrunning out of memory entirely than a problem with the swapper. In thesesituations, you typically want to fail fast by self-killing non-criticalprocesses when memory pressure starts to build up.\n You can not simply rely on the OOM killer for this. The OOM killer is onlyinvoked in situations of dire failure when we&#39;ve  already entered a statewhere the system is severely unhealthy and may well have been so for a while.You need to opportunistically handle the situation yourself before everthinking about the OOM killer.\n Determination of memory pressure is somewhat difficult using traditional Linuxmemory counters, though. We have some things which seem somewhat related, butare merely tangential \u2013 memory usage, page scans, etc \u2013 and from thesemetrics alone it&#39;s very hard to tell an efficient memory configuration from onethat&#39;s trending towards memory contention. There is a group of us at Facebook,spearheaded by Johannes,working on developing new metrics that expose memory pressure more easily thatshould help with this in future. If you&#39;re interested in hearing more aboutthis,  I go into detail about one metric being considered in my talk on cgroupv2.\n   In general, the minimum amount of swap space required for optimal memorymanagement depends on the number of anonymous pages pinned into memory that arerarely reaccessed by an application, and the value of reclaiming thoseanonymous pages. The latter is mostly a question of which pages are no longerpurged to make way for these infrequently accessed anonymous pages.\n If you have a bunch of disk space and a recent (4.0+) kernel, more swap isalmost always better than less. In older kernels  kswapd, one of the kernelprocesses responsible for managing swap, was historically very overeager toswap out memory aggressively the more swap you had. In recent times, swappingbehaviour when a large amount of swap space is available has been significantlyimproved. If you&#39;re running kernel 4.0+, having a larger swap on a modernkernel should not result in overzealous swapping. As such, if you have thespace, having a swap size of a few GB keeps your options open on modernkernels.\n If you&#39;re more constrained with disk space, then the answer really depends onthe tradeoffs you have to make, and the nature of the environment. Ideally youshould have enough swap to make your system operate optimally at normal andpeak (memory) load. What I&#39;d recommend is setting up a few testing systems with2-3GB of swap or more, and monitoring what happens over the course of a week orso under varying (memory) load conditions. As long as you haven&#39;t encounteredsevere memory starvation during that week \u2013 in which case the test will nothave been very useful \u2013 you will probably end up with some number of MB ofswap occupied. As such, it&#39;s probably worth having at least that much swapavailable, in addition to a little buffer for changing workloads.  atop inlogging mode can also show you which applications are having their pagesswapped out in the  SWAPSZ column, so if you don&#39;t already use it on yourservers to log historic server state you probably want to set it up on thesetest machines with logging mode as part of this experiment. This also tells you when your application started swapping out pages, which you can tie to logevents or other key data.\n Another thing worth considering is the nature of the swap medium. Swap readstend to be highly random, since we can&#39;t reliably predict which pages will berefaulted and when. On an SSD this doesn&#39;t matter much, but on spinning disks,random I/O is extremely expensive since it requires physical movement toachieve. On the other hand, refaulting of file pages is likely less random,since files related to the operation of a single application at runtime tend tobe less fragmented. This might mean that on a spinning disk you may want tobias more towards reclaiming file pages instead of swapping out anonymouspages, but again, you need to test and evaluate how this balances out for yourworkload.\n For laptop/desktop users who want to hibernate to swap, this also needs to betaken into account \u2013 in this case your swap file should be at least yourphysical RAM size.\n  First, it&#39;s important to understand what  vm.swappiness does.  vm.swappinessis a sysctl that biases memory reclaim either towards reclamation of anonymouspages, or towards file pages. It does this using two different attributes: file_prio (our willingness to reclaim file pages) and  anon_prio (ourwillingness to reclaim anonymous pages).  vm.swappiness plays into this, as itbecomes the default value for  anon_prio, and it also is subtracted from thedefault value of 200 for  file_prio, which means for a value of vm.swappiness = 50, the outcome is that  anon_prio is 50, and  file_prio is150 (the exact numbers don&#39;t matter as much as their relative weight comparedto the other).\n This means that, in general,  vm.swappiness is simply a ratio of how costlyreclaiming and refaulting anonymous memory is compared to file memory for yourhardware and workload. The lower the value, the more you tell the kernel thatinfrequently accessed anonymous pages are expensive to swap out and in on yourhardware. The higher the value, the more you tell the kernel that the cost ofswapping anonymous pages and file pages is similar on your hardware. The memorymanagement subsystem will still try to mostly decide whether it swaps file oranonymous pages based on how hot the memory is, but swappiness tips the costcalculation either more towards swapping or more towards dropping filesystemcaches when it could go either way. On SSDs these are basically as expensive aseach other, so setting  vm.swappiness = 100 (full equality) may work well. Onspinning disks, swapping may be significantly more expensive since swapping ingenerally requires random reads, so you may want to bias more towards a lowervalue.\n The reality is that most people don&#39;t really have a feeling about which theirhardware demands, so it&#39;s non-trivial to tune this value based on instinctalone \u2013 this is something that you need to test using different values. Youcan also spend time evaluating the memory composition of your system and coreapplications and their behaviour under mild memory reclamation.\n When talking about  vm.swappiness, an extremely important change to considerfrom recent(ish) times is  this change to vmscan by Satoru Moriya in2012,which changes the way that  vm.swappiness = 0 is handled quite significantly.\n Essentially, the patch makes it so that we are extremely biased againstscanning (and thus reclaiming) any anonymous pages at all with vm.swappiness = 0, unless we are already encountering severe memorycontention. As mentioned previously in this post, that&#39;s generally not what youwant, since this prevents equality of reclamation prior to extreme memorypressure occurring, which may actually  lead to this extreme memory pressurein the first place.  vm.swappiness = 1 is the lowest you can go withoutinvoking the\n......", "posttime": "2020-06-08 23:45:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8fa9\u62a4,swap,\u5185\u5b58", "title": "\u4e3a\u6389\u671f\u8fa9\u62a4\uff1a\u5e38\u89c1\u7684\u8bef\u89e3", "title_en": "In defence of swap: common misconceptions", "transed": 1, "url": "https://chrisdown.name/2018/01/02/in-defence-of-swap.html", "via": "", "real_tags": ["\u8fa9\u62a4", "swap", "\u5185\u5b58"]}, {"category": "", "categoryclass": "", "imagename": "30beccaa749b9c8622b32b7be92fe4ad.jpg", "infoid": 1005714, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u82f9\u679c\u516c\u53f8\u5728\u5176\u5730\u56fe\u5e94\u7528\u7a0b\u5e8f\u4e2d\u66f4\u65b0\u4e86\u536b\u661f\u56fe\u50cf\uff0c\u5c06\u534e\u76db\u987f\u7279\u533a\u65b0\u7684\u9ed1\u4eba\u751f\u547d\u4e5f\u662f\u58c1\u753b\u5305\u62ec\u5728\u5185\u3002\u8fd9\u5e45\u58c1\u753b\u5360\u636e\u4e86\u767d\u5bab\u9644\u8fd1\u7b2c16\u8857\u7684\u4e24\u4e2a\u8857\u533a\uff0c\u540e\u6765\u88ab\u534e\u76db\u987f\u5e02\u957f\u7a46\u91cc\u5c14\u00b7\u9c8d\u745f(Muriel Bowser)\u66f4\u540d\u4e3a\u9ed1\u4eba\u751f\u547d\u4e5f\u662f\u5e7f\u573a(Black Lives Matter Plaza)\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u82f9\u679c\u4f3c\u4e4e\u5df2\u7ecf\u4fee\u8865\u4e86\u73b0\u6709\u7684\u536b\u661f\u56fe\u50cf\uff0c\u4ee5\u663e\u793a\u65b0\u7684\u58c1\u753b\uff0c\u5c31\u50cfAPP\u4fa6\u63a2\u7b80\u66fc\u6625\u00b7\u738b(Jane Manun Wong)\u6240\u6307\u51fa\u7684\u90a3\u6837\uff0c\u5468\u56f4\u5730\u533a\u4fdd\u6301\u539f\u6837\u3002\u8fd9\u610f\u5473\u7740\u5728\u6b63\u5e38\u5237\u65b0\u5468\u671f\u4e4b\u5916\u8fdb\u884c\u5feb\u901f\u66f4\u65b0\u3002\u8c37\u6b4c\u5730\u56fe\u5728\u5176\u536b\u661f\u56fe\u50cf\u4e2d\u663e\u793a\u4e86\u91cd\u65b0\u547d\u540d\u7684\u5e7f\u573a\uff0c\u4f46\u6ca1\u6709\u663e\u793a\u65b0\u7684\u58c1\u753b\u3002\n\u6211\u559c\u6b22\u82f9\u679c\u5730\u56fe\u53ea\u4e3a\u9ed1\u4eba\u751f\u547d\u4e5f\u662f\u5e7f\u573a(Black Lives Matter Plaza)\u4fee\u8865\u4e86\u536b\u661f\u56fe\u50cf\u7684\u8fd9\u4e00\u90e8\u5206(\u6ce8\u610f\u6c7d\u8f66\u7684\u8fb9\u7f18\u90e8\u5206\u662f\u5982\u4f55\u6de1\u51fa\u7684\uff0c\u8fd9\u90e8\u5206\u660e\u663e\u6bd4\u5176\u4ed6\u90e8\u5206\u9897\u7c92\u72b6)pic.twitter.com/lXIGf5AKOj\u3002\n-Jane Manun Wong(@wongmjane)2020\u5e746\u67088\u65e5\u3002\n\u5728\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7(George Floyd)\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u88ab\u8b66\u5bdf\u51fb\u6bd9\u540e\uff0c\u8fd9\u5e45\u58c1\u753b\u4e8e\u5468\u4e94\u516c\u5e03\uff0c\u4ee5\u8868\u8fbe\u5bf9\u6297\u8bae\u8b66\u5bdf\u66b4\u884c\u7684\u7f8e\u56fd\u4eba\u7684\u652f\u6301\u548c\u58f0\u63f4\u3002\u8fd9\u4e5f\u662f\u5e02\u957f\u9c8d\u745f\u5bf9\u7279\u6717\u666e\u603b\u7edf\u7684\u9ad8\u5ea6\u6311\u8845\u59ff\u6001\uff0c\u7279\u6717\u666e\u603b\u7edf\u66fe\u5c31\u5982\u4f55\u6700\u597d\u5730\u5e94\u5bf9\u6297\u8bae\u8005\u4e0e\u5e02\u957f\u53d1\u751f\u4e89\u6267\u3002\u8fd9\u5e45\u58c1\u753b\u5728\u5723\u7ea6\u7ff0\u5723\u516c\u4f1a\u6559\u5802\u7ed3\u675f\uff0c\u7279\u6717\u666e\u5728\u90a3\u91cc\u4e0a\u6f14\u4e86\u4e00\u573a\u62ff\u7740\u5723\u7ecf\u7684\u62cd\u7167\u6d3b\u52a8\uff0c\u6b64\u524d\u8b66\u5bdf\u4f7f\u7528\u50ac\u6cea\u74e6\u65af\u548c\u9632\u66b4\u76fe\u724c\u5f3a\u884c\u6e05\u9664\u4e86\u548c\u5e73\u793a\u5a01\u8005\uff0c\u5305\u62ec\u5723\u7ea6\u7ff0\u6559\u5802\u7684\u7267\u5e08\u3002\n\u8fd9\u5e45\u58c1\u753b\u88ab\u7f8e\u56fd\u4f17\u8bae\u5458\u7ea6\u7ff0\u00b7\u5218\u6613\u65af\u63cf\u8ff0\u4e3a\u201c\u4e00\u4ef6\u5f3a\u6709\u529b\u7684\u827a\u672f\u4f5c\u54c1\u201d\u3002\u636eCNN\u62a5\u9053\uff0c\u8fd9\u4f4d80\u5c81\u7684\u6c11\u6743\u5076\u50cf\u8bf4\uff0c\u5c3d\u7ba1\u4ed6\u60a3\u67094\u671f\u764c\u75c7\uff0c\u4f46\u4ed6\u975e\u5e38\u611f\u52a8\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u201c\u60f3\u4eb2\u773c\u770b\u770b\u201d\u3002", "note_en": "Apple has updated the satellite imagery in its maps app to include Washington DC\u2019s new Black Lives Matter mural. The mural takes over two blocks of 16th Street near the White House, since renamed  Black Lives Matter Plaza by DC mayor Muriel Bowser.\n Notably, Apple appears to have patched its existing satellite imagery to show the new mural, leaving the surrounding area as it was, as noted by  app sleuth Jane Manchun Wong. That suggests a fast-track update outside of normal refresh cycles. Google Maps shows the renamed plaza but not the new mural in its satellite imagery.\n I like how Apple Maps only patched this part of the satelite image for Black Lives Matter Plaza  (notice how the cars partially fade out at the edges, and that this part is noticeably grainy than the rest)  pic.twitter.com/lXIGf5AKOj\n\u2014 Jane Manchun Wong (@wongmjane)  June 8, 2020\n The mural was revealed on Friday as a message of support and solidarity with Americans protesting police brutality after George Floyd was killed by police in Minneapolis. It\u2019s also a highly defiant gesture by Mayor Bowser towards President Trump who has sparred with the mayor over how best to respond to protestors. The mural ends at St. John\u2019s Episcopal Church, where Trump staged a photo op holding a bible, immediately after officers forcefully cleared peaceful demonstrators, including the priests of St. John\u2019s, using tear gas and riot shields.\n The mural was described as \u201ca powerful work of art\u201d by US Representative John Lewis. The 80-year-old civil rights icon said he was so moved that he \u201cwanted to see it in person,\u201d  reports  CNN, despite his Stage 4 cancer.", "posttime": "2020-06-08 23:44:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82f9\u679c,app,apple,\u5730\u56fe\u66f4\u65b0,maps", "title": "\u82f9\u679c\u5730\u56fe\u66f4\u65b0\u5de8\u4eba\u9ed1\u4eba\u751f\u547d\u4e5f\u662fDC\u58c1\u753b", "title_en": "Apple Maps Updated with Giant Black Lives Matter DC Mural", "transed": 1, "url": "https://www.theverge.com/2020/6/8/21283744/black-lives-matter-satelliite-apple-maps", "via": "", "real_tags": ["\u82f9\u679c", "app", "apple", "\u5730\u56fe\u66f4\u65b0", "maps"]}, {"category": "", "categoryclass": "", "imagename": "bf890d6b1df22e61b05586ae246069b5.png", "infoid": 1005713, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u5f53\u6211\u6536\u5230\u91c7\u8bbf\u8bf7\u6c42\uff0c\u6216\u8005\u88ab\u9080\u8bf7\u8c08\u8bba\u6211\u5728\u9057\u7559\u73b0\u4ee3\u5316\u65b9\u9762\u7684\u5de5\u4f5c\u65f6\uff0c\u6bcf\u4e2a\u4eba\u90fd\u60f3\u8c08\u8bba\u5927\u578b\u673a\u548cCOBOL\u3002\u6211\u4eec\u7684\u5047\u8bbe\u662f\uff0c\u6211\u5c06\u4e3a\u5176\u4ed6\u5de5\u7a0b\u5e08\u8bb2\u8ff0\u4e00\u4e9b\u5173\u4e8e\u65e7\u7cfb\u7edf\u7684\u82e6\u5dee\u4e8b\u7684\u7cbe\u5f69\u6218\u4e89\u6545\u4e8b\uff0c\u4ed6\u4eec\u4e0d\u9700\u8981\u62c5\u5fc3\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u804c\u4e1a\u751f\u6daf\u96c6\u4e2d\u5728\u73b0\u4ee3\u6280\u672f\u4e0a\u3002\n\u8bda\u7136\uff0c\u5f53\u6211\u5f00\u59cb\u4f7f\u7528\u9057\u7559\u7cfb\u7edf\u65f6\uff0c\u6211\u4e5f\u88ab\u91cc\u666e\u5229\u6700\u53e4\u8001\u7684\u7a0b\u5e8f\u4e2d\u7684\u201c\u4fe1\u4e0d\u4fe1\u7531\u4f60\u201d\u6240\u5438\u5f15\u3002\u6316\u6398\u548c\u5256\u6790\u8d8a\u6765\u8d8a\u8001\u7684\u7cfb\u7edf\uff0c\u627e\u51fa\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u4ece\u672a\u542c\u8bf4\u8fc7\u7684\u88ab\u9057\u5fd8\u7684\u8bed\u8a00\u7684\u523a\u6fc0\uff0c\u66f4\u4e0d\u7528\u8bf4\u4e0e\u4e4b\u4ea4\u4e92\u4e86\u3002\u6211\u4e00\u76f4\u5bf9\u4f4e\u7ea7\u8bed\u8a00\u548c\u7cfb\u7edf\u7740\u8ff7\uff0c\u8fd9\u79cd\u9b54\u529b\u5c06\u7535\u538b\u7684\u53d8\u5316\u8f6c\u5316\u4e3a\u6570\u5b66\u548c\u8bbe\u8ba1\u4e2d\u7684\u62bd\u8c61\u3002\u4f46\u6700\u8fd1\uff0c\u6211\u5bf9\u5373\u5c06\u5230\u6765\u7684\u9057\u4ea7\u542f\u793a\u5f55\u4ee5\u53ca\u5982\u4f55\u51cf\u7f13\u65b0\u6280\u672f(-er)\u6280\u672f\u503a\u52a1\u6c34\u5e73\u7684\u4e0a\u5347\u66f4\u611f\u5174\u8da3\u3002\n\u9057\u4ea7\u542f\u793a\u5f55\u5e76\u4e0d\u662f\u5a74\u513f\u6f6e\u65f6\u671f\u6700\u540e\u4e00\u4f4dCOBOL\u7a0b\u5e8f\u5458\u7684\u6b7b\u4ea1\u3002\u8001\u5b9e\u8bf4\uff0c\u8fd9\u573a\u5371\u673a\u6765\u6765\u53bb\u53bb\u3002\u5f53\u4eba\u4eec\u8c08\u8bba\u65e7\u7cfb\u7edf\u7684\u5a01\u80c1\u65f6\uff0c\u4ed6\u4eec\u559c\u6b22\u70ab\u8000COBOL\u7a0b\u5e8f\u5458\u7684\u5e74\u9f84\u3002\u4f8b\u5982\uff0c\u57282006\u5e74\uff0cCOBOL\u7a0b\u5e8f\u5458\u7684\u5e73\u5747\u5e74\u9f84\u662f55\u5c81\u3002\u542c\u8d77\u6765\u5f88\u7cdf\u7cd5\u3002\u5f88\u591a\u5173\u952e\u5458\u5de5\u90fd\u5feb\u9000\u4f11\u4e86\uff01\u4ed6\u4eec\u79bb\u5f00\u540e\uff0c\u8c01\u6765\u7167\u770b\u4ed6\u4eec\u7684\u7cfb\u7edf\uff1f\n\u5e73\u5747\u6570\u53ef\u80fd\u4f1a\u4ea7\u751f\u8bef\u5bfc\u3002\u5728\u540c\u4e00\u9879\u8c03\u67e5\u4e2d\uff0c52%\u7684\u7a0b\u5e8f\u5458\u5e74\u9f84\u572845-55\u5c81\u4e4b\u95f4\uff0c34%\u7684\u7a0b\u5e8f\u5458\u5e74\u9f84\u572835-45\u5c81\u4e4b\u95f4\u3002\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c8\u5e74\u540e\uff0c\u5f53\u6240\u670955\u5c81\u7684\u7a0b\u5e8f\u5458\u90fd\u5e94\u8be5\u9000\u4f11\u65f6\uff0cMicro Focus\u5bf9COBOL\u7a0b\u5e8f\u5458\u548c\u9ad8\u7ba1\u7684\u8c03\u67e5\u663e\u793a\uff0cCOBOL\u7a0b\u5e8f\u5458\u7684\u5e73\u5747\u5e74\u9f84\u53c8\u56de\u5230\u4e8655\u5c81\u3002\u4ed6\u4eec\u57282019\u5e74\u7684\u8c03\u67e5\u663e\u793a\uff0c\u8fd9\u4e00\u5e73\u5747\u503c\u4e3a50\u3002\n\u4e8b\u5b9e\u4e0a\uff0cCOBOL\u7a0b\u5e8f\u5458\u7684\u5e73\u5747\u5e74\u9f84\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5f88\u7a33\u5b9a\u3002\u5f53\u6211\u7236\u4eb2\u7814\u7a76\u5343\u5e74\u866b\u7684\u65f6\u5019\uff0c\u4ed6\u5df2\u7ecf40\u591a\u5c81\u4e86\uff0c50\u5c81\u51fa\u5934\u3002\u4ed6\u7684\u540c\u4e8b\u5e74\u9f84\u76f8\u4eff\u3002\u6bcf\u5f53\u6211\u770b\u5230\u4eba\u4eec\u5bf9COBOL\u793e\u533a\u7684\u5e74\u9f84\u5927\u505a\u6587\u7ae0\u65f6\uff0c\u6211\u5c31\u4f1a\u60f3\u8d77\u7f8e\u56fd\u53cc\u7c27\u7ba1\u6f14\u594f\u5bb6\u5e03\u83b1\u5c14\u00b7\u5ef7\u5fb7\u5c14(Blair Tindell)\u5199\u4e0b\u7684\u5173\u4e8e\u53e4\u5178\u97f3\u4e50\u793e\u533a\u7684\u4e00\u4e9b\u4e1c\u897f\uff1a\n\u5bf9\u5e74\u957f\u542c\u4f17\u7684\u6050\u60e7\u662f\u9519\u8bef\u7684\uff0c\u5ffd\u7565\u4e86\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5e73\u5747\u89c2\u4f17\u5e74\u9f84\u5df2\u7ecf\u5f98\u5f8a\u572840\u591a\u5c81\u5de6\u53f3\u4e00\u6bb5\u65f6\u95f4\u4e86\u3002\u5bf9\u4e8e\u4eba\u4eec\u6765\u8bf4\uff0c\u7b49\u5230\u4e2d\u5e74\u624d\u5f00\u59cb\u53c2\u52a0\u4ea4\u54cd\u4e50\u662f\u5408\u4e4e\u903b\u8f91\u7684\u3002\u968f\u7740\u5b69\u5b50\u7684\u957f\u5927\uff0c\u5b66\u8d39\u7684\u652f\u4ed8\uff0c\u66f4\u591a\u7684\u95f2\u6687\u65f6\u95f4\uff0c\u97f3\u4e50\u4f1a\u975e\u5e38\u9002\u5408\u6210\u719f\u7684\u5a74\u513f\u6f6e\u4e00\u4ee3\u4e30\u5bcc\u7684\u751f\u6d3b\u65b9\u5f0f\uff0c\u54c1\u5473\u548c\u6536\u5165\u3002\n\u5bf9\u4e8eCOBOL\u4e5f\u53ef\u4ee5\u8bf4\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002\u4e0e60\u5e74\u4ee3\u300170\u5e74\u4ee3\u548c80\u5e74\u4ee3\u7684\u5e74\u8f7b\u7a0b\u5e8f\u5458\u4e0d\u540c\uff0c\u4eca\u5929\u7684\u5e74\u8f7b\u7a0b\u5e8f\u5458\u6ca1\u6709\u5927\u5b66\u5927\u578b\u673a\u53ef\u73a9\u3002\u5982\u679c\u5927\u5b66\u4ecd\u7136\u6709\u5927\u578b\u673a\uff0c\u90a3\u5b83\u5c31\u662f\u7ba1\u7406\u90e8\u95e8\u7684\u4e3b\u529b\uff0c\u5bf9\u5b66\u751f\u9879\u76ee\u6765\u8bf4\u592a\u91cd\u8981\u4e86\u3002\u5e74\u8f7b\u7684\u7a0b\u5e8f\u5458\u6ca1\u6709\u5b66\u4e60COBOL\u7684\u9009\u62e9\u3002\u5373\u4f7f\u4ed6\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u6570\u767e\u4e2a-\u6216\u8005\u6709\u4eba\u8bf4\u662f\u6570\u5343\u4e2a-COBOL\u5de5\u4f5c\u4e5f\u4e0d\u662f\u5165\u95e8\u7ea7\u7684\u3002\nCOBOL\u7a0b\u5e8f\u5458\u5e73\u5747\u5e74\u9f84\u7a33\u5b9a\u7684\u539f\u56e0\u5f88\u53ef\u80fd\u662f\u56e0\u4e3aCOBOL\u7a0b\u5e8f\u5458\u5728\u804c\u4e1a\u751f\u6daf\u540e\u671f\u8f6c\u5411COBOL\u4e4b\u524d\uff0c\u5df2\u7ecf\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u79ef\u7d2f\u4e86\u4e30\u5bcc\u7684\u7ecf\u9a8c\u548c\u4e13\u4e1a\u77e5\u8bc6\u3002\n\u4eba\u4eec\u62c5\u5fc3\u8001\u7684COBOL\u7a0b\u5e8f\u5458\uff0c\u56e0\u4e3a\u4ed6\u4eec\u8ba4\u4e3a\u5f53\u6700\u540e\u4e00\u4e2aCOBOL\u7a0b\u5e8f\u5458\u6d88\u4ea1\u65f6\uff0c\u4ed6\u4eec\u7684\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u7ef4\u62a4\u3002\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u62c5\u5fe7\uff0c\u7136\u800c\uff0c\u5927\u591a\u6570\u4eba\u4f1a\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u4e0d\u53ef\u7ef4\u62a4\u7684\u9057\u7559\u4ee3\u7801\u7684\u5a01\u80c1\u6bd4\u4ed6\u4eec\u60f3\u8c61\u7684\u8981\u8fd1\u5f97\u591a\uff0c\u800c\u4e14\u4e0d\u6d89\u53ca\u5927\u578b\u673a\u3002\n\u5982\u679c\u4f60\u5728\u8ba1\u5206\uff0cJava\u7684\u6700\u65b0\u7248\u672c\u662f14\u3002Java8\u7684\u751f\u547d\u5468\u671f\u5e94\u8be5\u662f2019\u5e74\u3002\nJava9\u5f15\u5165\u4e86\u4e00\u4e9b\u7ed3\u6784\u53d8\u5316\uff0c\u4f7fJava\u66f4\u52a0\u6a21\u5757\u5316\uff0c\u56e0\u6b64\u66f4\u9002\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002\u4eceJava8\u8fc1\u79fb\u5230Java9\u4e0d\u662f\u5347\u7ea7\uff0c\u800c\u662f\u5b8c\u5168\u8fc1\u79fb\u3002\u5176\u4e2d\uff0cJava9\u4f7f\u5f97JDK\u5185\u90e8\u7684API\u65e0\u6cd5\u8bbf\u95ee\uff0c\u5b83\u5220\u9664\u4e86\u51e0\u4e2a\u5de5\u5177\u548c\u65b9\u6cd5\uff0c\u5e76\u4e14\u5411\u6a21\u5757\u5316\u7ed3\u6784\u7684\u8f6c\u53d8\u9700\u8981\u66f4\u6539\u4f9d\u8d56\u9879\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4eceJava8\u8fc1\u79fb\u5230Java9\u53ef\u80fd\u610f\u5473\u7740\u5fc5\u987b\u91cd\u5199\u5927\u91cf\u4ee3\u7801\u3002\n\u56e0\u6b64\uff0cSynk\u57282020\u5e74\u8c03\u67e5\u7684\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8d85\u8fc7\u4e00\u534a\u4ecd\u7136\u8fd0\u884c\u5728Java8\u4e0a\u3002\n\u5f53\u7136\uff0c\u771f\u6b63\u91cd\u5927\u8fc1\u79fb\u7684\u6700\u7ec8\u5347\u7ea7\u662f\u4ecePython2\u5230Python3\u7684\u8f6c\u6362\u3002\u4e0eJava 8\u4e00\u6837\uff0cPython2\u4e00\u76f4\u5728\u5f98\u5f8a\uff0c\u56e0\u4e3a\u8fc1\u79fb\u5230Python3\u65e2\u9700\u8981\u91cd\u5199\u60a8\u62e5\u6709\u7684\u4ee3\u7801\uff0c\u53c8\u9700\u8981\u4ece\u60a8\u7684\u6240\u6709\u4f9d\u8d56\u9879\u4e2d\u6d88\u9664Python2\u3002\u867d\u7136\u50cfBenjamin Peterson\u7684Six\u8fd9\u6837\u7684\u5de5\u5177\u8ba9\u8fd9\u9879\u4efb\u52a1\u53d8\u5f97\u66f4\u52a0\u6109\u5feb\uff0c\u4f46\u4f9d\u8d56\u5173\u7cfb\u4e0d\u4ec5\u4ec5\u662f\u5305\u548c\u5e93\u3002\u4ee3\u7801\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u5e73\u53f0\u4e5f\u662f\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u800c\u4e14\u8fd9\u4e9b\u5e73\u53f0\u7684\u54cd\u5e94\u901f\u5ea6\u90fd\u5f88\u6162\u3002\u867d\u7136Python\u662f\u4e00\u6b3e\u6781\u5176\u6d41\u884c\u7684\u811a\u672c\u5de5\u5177\uff0c\u4f46AWS Lambda\u76f4\u52302017\u5e743.6\u624d\u652f\u6301Python 3\uff0c\u4e5f\u5c31\u662f3.6\u53d1\u5e03\u4e00\u5e74\u4e4b\u540e\u3002\u540c\u5e74\uff0cSalt\u63a8\u51fa\u4e86Python3\u652f\u6301\u3002\u4e00\u5e74\u540e\uff0c\u5927\u7ea6\u5728Python3\u6700\u521d\u5ba3\u5e03\u7684\u5341\u5e74\u540e\uff0cAnsible\u652f\u6301\u5b83\u3002\n\u5f88\u96be\u8bf4\u4e16\u754c\u4e0a\u8fd8\u5269\u4e0b\u591a\u5c11Python2\u3002JetBrains\u4f30\u8ba1\u8fd9\u4e00\u6bd4\u4f8b\u53ea\u670910%\uff0c\u800c\u4e14\u6709\u6765\u81ea150\u4e2a\u4e0d\u540c\u56fd\u5bb6\u76842.4\u4e07\u540d\u53d7\u8bbf\u8005\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u51c6\u786e\u7684\u6570\u5b57\u3002Python2\u7684\u95ee\u9898\u53ef\u80fd\u4e0d\u5728\u4e8e\u5b83\u7684\u6570\u91cf\u592a\u591a\uff0c\u800c\u5728\u4e8e\u5b83\u4ecd\u7136\u5b58\u5728\u7684\u5730\u65b9\u3002\u6839\u636eJetBrains\u7684\u8bf4\u6cd5\uff0cPython2\u4ecd\u5728\u4e0ePython3\u7ade\u4e89\u7684\u9886\u57df\u662fDevOps/Automation\u3001\u6d4b\u8bd5\u548c\u7f51\u7edc\u7f16\u7a0b\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8ba9\u5404\u79cd\u98ce\u683c\u7684Linux\u5b8c\u5168\u81f4\u529b\u4e8ePython3\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6311\u6218\u3002\u8fd9\u573a\u6597\u4e89\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u6bcf\u4e2a\u70ed\u7231Mac\u7684Pythonista\u90fd\u77e5\u9053\uff0c\u7531\u4e8eMacOS\u5185\u90e8\u5de5\u5177\u7684\u539f\u56e0\uff0c\u82f9\u679c\u7535\u8111\u4ecd\u7136\u4f7f\u7528Python2.7\u4f5c\u4e3a\u9ed8\u8ba4\u7684Python\u7248\u672c\u3002\n\u5728\u4f9d\u8d56\u5730\u72f1\u7684\u53e6\u4e00\u9762\u662fjQuery\u3002\u7531\u4e8e\u4f9d\u8d56\u5173\u7cfb\uff0c\u4ecejQuery\u8fc1\u79fb\u5e76\u4e0d\u56f0\u96be\uff0c\u4f46\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a\u5f88\u591a\u5176\u4ed6\u4e1c\u897f\u90fd\u4f9d\u8d56\u4e8ejQuery\u3002\n\u5f53Twitter Bootstrap\u6700\u7ec8\u57282019\u5e74\u5c06jQuery\u4f5c\u4e3a\u4f9d\u8d56\u9879\u79fb\u9664\u65f6\uff0c\u53ea\u662f\u56e0\u4e3a\u4ed6\u4eec\u5c06jQuery\u4e2d\u7684\u6e90\u4ee3\u7801\u76f4\u63a5\u590d\u5236\u5e76\u7c98\u8d34\u5230Bootstrap\u4e2d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6574\u4e2a\u9879\u76ee\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u82b1\u4e86\u4e24\u5e74\u591a\u7684\u65f6\u95f4\u3002\njQuery\u662f\u81ea\u8eab\u6210\u529f\u7684\u727a\u7272\u54c1\u3002\u5b83\u7b80\u5355\u7684\u8bed\u6cd5\u88ab\u8bc1\u660e\u662f\u5982\u6b64\u6d41\u884c\uff0c\u4ee5\u81f3\u4e8e\u5176\u4ed6\u6846\u67b6\u751a\u81f3\u672c\u673aJS\u90fd\u5f00\u59cb\u91c7\u7528\u5b83\u3002\u6700\u91cd\u8981\u7684\u662f\uff0cjQuery\u63d0\u4f9b\u4ea4\u53c9\u517c\u5bb9\u6027\u7684\u8bb8\u591a\u9057\u7559\u6280\u672f\u7ec8\u4e8e\u88ab\u6dd8\u6c70\u4e86(\u770b\u770b\u60a8\u7684Internet Explorer\u5427)\u3002\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\u56f4\u7ed5jQuery\u7684\u62c5\u5fe7\u6709\u70b9\u8fc7\u5934\u4e86\uff0c\u4f46\u6211\u4e0d\u662fJavaScript\u7231\u597d\u8005\u3002\u53cd\u5bf9jQuery\u7684\u8fd0\u52a8\u4f3c\u4e4e\u662f\u7531\u8be5\u6846\u67b6\u4e0e\u76ee\u524d\u65b9\u5174\u672a\u827e\u7684MVC JavaScript\u6846\u67b6Reaction\u4e4b\u95f4\u7684\u51b2\u7a81\u62c9\u5f00\u7684\u5e8f\u5e55\u3002\n\u4f46\u5c31\u50cf\u6240\u6709\u79d1\u6280\u9886\u57df\u7684\u5723\u6218\u4e00\u6837\uff0c\u53cd\u5bf9\u9009\u62e9\u4e00\u4e2a\u800c\u4e0d\u662f\u53e6\u4e00\u4e2a\u7684\u5408\u7406\u8bba\u636e\u8d8a\u9891\u7e41\u5730\u91cd\u590d\uff0c\u5c31\u4f1a\u53d8\u5f97\u8d8a\u6a21\u7cca\u3002\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u6211\u8ba4\u4e3ajQuery\u7684\u6545\u4e8b\u4e0eCOBOL\u7684\u6545\u4e8b\u6700\u76f8\u4f3c\uff0c\u56e0\u4e3a\u53d1\u5e03\u7684\u5173\u4e8e\u5b83\u7684\u6807\u9898\u4ee5\u5b83\u7684\u65e0\u5904\u4e0d\u5728\u800c\u9886\u5148\uff0c\u5e76\u6697\u793a\u56e0\u4e3a\u5176\u4ed6\u6280\u672f\u73b0\u5728\u53ef\u4ee5\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u90a3\u4e9b\u5176\u4ed6(\u8f83\u65b0\u7684)\u6280\u672f\u80af\u5b9a\u66f4\u597d\u3002\n\u6709\u5f88\u591a\u4e8b\u60c5\u4f7f\u5f97\u9057\u7559\u7cfb\u7edf\u5f88\u96be\u7ef4\u62a4\u3002\u505a\u7ef4\u62a4\u7684\u7a0b\u5e8f\u5458\u7684\u5e74\u9f84\u4e0d\u5728\u5176\u4e2d\u3002\u8bda\u7136\uff0c\u673a\u6784\u8bb0\u5fc6\u7684\u4e27\u5931\u5f88\u91cd\u8981\uff0c\u6700\u4e86\u89e3\u7cfb\u7edf\u7684\u7a0b\u5e8f\u5458\u4ec0\u4e48\u65f6\u5019\u79bb\u5f00\u673a\u6784\u8bb0\u5fc6\u4e5f\u4f1a\u968f\u4e4b\u800c\u6765\u3002\u4f46\u8fd9\u5e76\u4e0d\u662f\u65e7\u6280\u672f\u72ec\u6709\u7684\u95ee\u9898\u3002\u7ec4\u7ec7\u5bf9\u6316\u8d70\u5458\u5de5\u5931\u53bb\u673a\u6784\u8bb0\u5fc6\u7684\u9891\u7387\u4e0e\u5bf9\u9000\u4f11\u7684\u9891\u7387\u4e00\u6837\u9ad8(\u53ef\u80fd\u66f4\u591a)\u3002\n\u7cbe\u901aCOBOL\u7684\u53ef\u7528\u5de5\u7a0b\u5e08\u8d44\u6e90\u6709\u9650\u7684\u4e8b\u5b9e\u662f\uff0c\u901a\u8fc7\u5efa\u7acb\u7ba1\u9053\u6765\u57f9\u517bCOBOL\u4eba\u624d\uff0c\u8fd9\u4e2a\u95ee\u9898\u89e3\u51b3\u8d77\u6765\u8981\u4fbf\u5b9c\u5f97\u591a\uff0c\u4e5f\u5bb9\u6613\u5f97\u591a\u3002IBM\u5728\u8fd9\u4e2a\u9886\u57df\u975e\u5e38\u6d3b\u8dc3\uff0c\u4ed6\u4eec\u7684Master the Mainframe\u8ba1\u5212\u3002COBOL\u7a0b\u5e8f\u5458\u662f\u4e00\u79cd\u6b63\u5728\u67af\u7aed\u7684\u6709\u9650\u8d44\u6e90\uff0c\u8fd9\u6839\u672c\u4e0d\u662f\u771f\u7684\u3002\n\u6211\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u6bcf\u5f53COBOL\u7cfb\u7edf\u5d29\u6e83\u65f6\uff0c\u51e0\u4e4e\u4ece\u6765\u4e0d\u662fCOBOL\u5bfc\u81f4\u5b83\u5d29\u6e83\u3002\u6211\u770b\u5230\u8fc7\u786c\u4ef6\u6545\u969c\uff0c\u652f\u6301\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e0eCOBOL\u96c6\u6210\u7684\u975eCOBOL\u7cfb\u7edf\u7684\u95ee\u9898\uff0c\u6211\u770b\u5230\u6dfb\u52a0\u65b0\u529f\u80fd\u7684\u5ef6\u8fdf\uff0c\u56e0\u4e3aCOBOL\u4ee3\u7801\u6587\u6863\u5f88\u5c11\uff0c\u5de5\u7a0b\u4eba\u5458\u9700\u8981\u627e\u51fa\u5982\u4f55\u66f4\u6539\u5b83\u7684\u2026\u3002\u3002\u4f46\u662f\u6211\u6ca1\u6709\u89c1\u8fc7\u5f88\u591a\u4e8b\u4ef6\uff0c\u7cfb\u7edf\u662f\u7528COBOL\u7f16\u5199\u7684\uff0c\u8fd9\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u6ca1\u6709\u5f88\u597d\u7684\u7406\u7531\u653e\u5f03COBOL\uff0c\u7edd\u5bf9\u6709\u7406\u7531\u3002\u6211\u53ea\u662f\u4e0d\u503e\u5411\u4e8e\u540c\u610f\u516c\u6c11\u793e\u4f1a\u4e0d\u80fd\u5728\u63a5\u4e0b\u6765\u768460\u5e74\u91cc\u7ee7\u7eed\u8fd0\u884c\u6570\u767e\u4e07\u884cCOBOL\u8bed\u8a00\u3002\u5f53\u7136\u53ef\u4ee5\u3002\n\u53e6\u4e00\u65b9\u9762\uff0cJava8\u548cPython2\u5219\u662f\u4e00\u4e2a\u4e25\u91cd\u5f97\u591a\u7684\u5a01\u80c1\u3002\u5f53\u7cfb\u7edf\u65e0\u6cd5\u6446\u8131\u751f\u547d\u5468\u671f\u7ed3\u675f\u7684\u6280\u672f\u65f6\uff0c\u5b83\u4eec\u4f1a\u9519\u8fc7\u5b89\u5168\u66f4\u65b0\u3001\u6027\u80fd\u589e\u5f3a\u548c\u65b0\u529f\u80fd\u3002\u7cfb\u7edf\u5728\u81ea\u5df1\u7684\u6280\u672f\u503a\u52a1\u4e2d\u505c\u7559\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u5efa\u7acb\u5728\u5b83\u4eec\u4e4b\u4e0a\u7684\u4e1c\u897f\u5c31\u8d8a\u591a\uff0c\u9057\u4ea7\u5c31\u53d8\u5f97\u8d8a\u6839\u6df1\u8482\u56fa\u3002\n\u5f53\u6211\u4eec\u8868\u73b0\u5f97\u597d\u50cf\u5173\u4e8e\u9057\u7559\u4ee3\u7801\u65e5\u76ca\u589e\u957f\u7684\u5a01\u80c1\u4ee5COBOL\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u5bf9\u8bdd\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\uff0c\u6211\u4eec\u5bf9\u7a0b\u5e8f\u5458\u662f\u4e00\u79cd\u4f24\u5bb3\u3002\u6574\u6574\u4e00\u4ee3\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u7684\u804c\u4e1a\u751f\u6daf\u90fd\u5728\u628a\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u9664\u4e86\u6700\u72ec\u7279\u7684\u65b9\u9762\u4e4b\u5916\u7684\u6240\u6709\u65b9\u9762\u90fd\u5916\u5305\u7ed9\u4ed6\u4eec\u65e0\u529b\u76d1\u63a7\u7684\u5e93\u3001\u63d2\u4ef6\u548c\u6a21\u5757\uff0c\u66f4\u4e0d\u7528\u8bf4\u66f4\u65b0\u4e86\uff0c\u8fd9\u8ba9\u95ee\u9898\u53d8\u5f97\u66f4\u7cdf\u3002\n\u9057\u4ea7\u542f\u793a\u5f55\u4e2d\u771f\u6b63\u7684\u9a91\u58eb\u662f\u4f9d\u8d56\u6811\u7684\u6df1\u5ea6\u3002\u73b0\u4ee3\u8f6f\u4ef6\u5f00\u53d1\u5c06\u62bd\u8c61\u5806\u53e0\u5728\u62bd\u8c61\u4e4b\u4e0a\u3002\u5982\u679c2016\u5e74\u7684Left-Pad\u4e8b\u4ef6\u6ca1\u6709\u8bc1\u660e\u5176\u4ed6\u4ec0\u4e48\uff0c\u90a3\u4e48\u5b83\u8868\u660e\uff0c\u5373\u4f7f\u662f\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5de5\u7a0b\u5e08\u4e5f\u4f1a\u4f9d\u8d56\u4e8e\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u679c\u7ed9\u4ed6\u4eec\u63d0\u4f9b\u4f7f\u5b89\u88c5\u53d8\u5f97\u5bb9\u6613\u7684\u57fa\u7840\u8bbe\u65bd\u7684\u8bdd\u3002\u73b0\u4ee3\u5f00\u53d1\u73af\u5883\u662f\u4e00\u4e2a\u540d\u526f\u5176\u5b9e\u7684\u5ec9\u4ef7\u548c\u65b9\u4fbf\u4f9d\u8d56\u7684\u7cd6\u679c\u5546\u5e97\u3002\n\u5982\u679c\u7ef4\u57fa\u767e\u79d1\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u6743\u5a01\u7684\u6765\u6e90\uff0c\u90a3\u4e48\u56f4\u7ed5\u5f00\u53d1\u5168\u65b0\u7f16\u7a0b\u8bed\u8a00\u7684\u6d3b\u52a8\u572890\u5e74\u4ee3\u8fbe\u5230\u9876\u5cf0\uff0c\u5f53\u65f6\u5927\u91cf\u7684\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u8ba1\u7b97\u673a\uff0c\u4f46\u62bd\u8c61\u7a0b\u5ea6\u4ecd\u7136\u76f8\u5bf9\u8f83\u4f4e\u3002\u4e92\u8054\u7f51\u6539\u53d8\u4e86\u8fd9\u4e00\u70b9\uff0c\u4e0d\u4ec5\u4f7f\u66f4\u590d\u6742\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u6210\u4e3a\u73b0\u5b9e\uff0c\u800c\u4e14\u8fd8\u6269\u5927\u4e86\u5b89\u5168\u95ee\u9898\u7684\u7206\u70b8\u534a\u5f84\u3002\u8981\u6c42\u66f4\u597d\u7684\u6027\u80fd\u548c\u66f4\u597d\u7684\u5b89\u5168\u6027\u4f7f\u5f97\u73b0\u4ee3\u673a\u5668\u4e0a\u65b0\u8bed\u8a00\u7684MVP\u53d8\u5f97\u76f8\u5f53\u590d\u6742\u3002\u806a\u660e\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u518d\u4e5f\u4e0d\u80fd\u6784\u5efa\u6982\u5ff5\u8bc1\u660e\u5ba0\u7269\u8bed\u8a00\uff0c\u5e76\u671f\u671b\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\u6765\u63a8\u52a8\u5b83\u4eec\u7684\u8fdb\u5316\u3002\u7f16\u7a0b\u8bed\u8a00\u9700\u8981\u4e3a\u7a0b\u5e8f\u5458\u5904\u7406\u5927\u91cf\u590d\u6742\u7684\u4efb\u52a1\u3002\n\u56e0\u6b64\uff0c\u5c3d\u7ba1\u81ea90\u5e74\u4ee3\u7684\u8f89\u714c\u65f6\u671f\u4ee5\u6765\uff0c\u4e13\u4e1a\u7a0b\u5e8f\u5458\u7684\u6570\u91cf\u6025\u5267\u589e\u52a0\uff0c\u4f46\u8fd9\u4e9b\u8f6f\u4ef6\u4e13\u5bb6\u5df2\u7ecf\u4ece\u5f00\u53d1\u65b0\u8bed\u8a00\u8f6c\u5411\u5f00\u53d1\u65b0\u6846\u67b6\u3002\n\u6846\u67b6\u672c\u8d28\u4e0a\u53ea\u4e0d\u8fc7\u662f\u7ed9\u5b9a\u516c\u5171\u63a5\u53e3\u7684\u7ecf\u8fc7\u7ba1\u7406\u7684\u4f9d\u8d56\u9879\u96c6\u5408\u3002\u8bda\u7136\uff0c\u6846\u67b6\u4f7f\u8f6f\u4ef6\u5f00\u53d1\u901f\u5ea6\u66f4\u5feb\uff0c\u4f46\u5b83\u4eec\u4e5f\u5265\u593a\u4e86\u5f00\u53d1\u4eba\u5458\u7ef4\u62a4\u4ee3\u7801\u7684\u80fd\u529b\u3002\u964d\u4f4e\u8f6f\u4ef6\u5f00\u53d1\u901f\u5ea6\u7684\u5de5\u5177\u6539\u8fdb\u4e0d\u53ef\u907f\u514d\u5730\u52a0\u6df1\u4e86\u4e00\u822c\u8f6f\u4ef6\u9879\u76ee\u7684\u4f9d\u8d56\u5173\u7cfb\u6811\u3002\n\u4ee5Node.js\u4e3a\u4f8b\u3002Node\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u6846\u67b6\uff0c\u5b83\u4f7f\u5728\u670d\u52a1\u5668\u7aef\u8fd0\u884cJavaScript\u6210\u4e3a\u53ef\u80fd\uff0c\u4f46\u5b83\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3anpm\u7684\u6f02\u4eae\u7684\u5c0f\u5305\u7ba1\u7406\u5668(\u4f5c\u4e3a\u4f9d\u8d56\u9879)\u3002\u4ee5\u524d\u6709\u8fc7\u5305\u7ba1\u7406\u5668\uff0cNPM\u4e0d\u4e00\u5b9a\u662f\u6700\u597d\u7684\uff0c\u4f46\u5b83\u4ece\u4e4b\u524d\u7684\u5305\u7ba1\u7406\u5668\u90a3\u91cc\u5b66\u5230\u4e86\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u4ece\u800c\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u662f\u672c\u5730\u5b89\u88c5\u7684\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u5b89\u88c5\u7684\u3002\u547d\u4ee4\u884c\u4ece\u4e00\u5f00\u59cb\u5c31\u8bbe\u8ba1\u4e3a\u4e0e\u5305\u5b58\u50a8\u5e93\u96c6\u6210\uff0c\u56e0\u6b64\u521b\u5efa\u548c\u53d1\u5e03\u65b0\u5305\u975e\u5e38\u5bb9\u6613\u3002\n\u56e0\u6b64\uff0cNPM\u4e0a\u4f9d\u8d56\u5173\u7cfb\u6811\u7684\u5e73\u5747\u6df1\u5ea6\u4e3a4.39\u4e2a\u5305\uff0c\u800c\u540c\u7c7b\u5305\u7ba1\u7406\u5668(\u5728\u672c\u4f8b\u4e2d\u4e3aPyPI)\u7684\u5e73\u5747\u6df1\u5ea6\u4e3a1.7\u3002Python\u5f00\u53d1\u4eba\u5458\u672c\u8eab\u5e76\u4e0d\u6bd4JavaScript\u5f00\u53d1\u4eba\u5458\u66f4\u8d1f\u8d23\u4efb\u3002JavaScript\u7f3a\u4e4f\u4e00\u4e2a\u597d\u7684\u6838\u5fc3\u5e93\uff0c\u800c\u4e14\u5b83\u4f5c\u4e3a\u4e00\u79cd\u73a9\u5177\u8bed\u8a00\u7684\u5386\u53f2\u53ea\u7528\u4e86\u4e00\u5468\u65f6\u95f4\u5c31\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e86\uff0c\u8fd9\u4f7f\u5f97\u5f00\u53d1\u6846\u67b6\u6765\u629a\u5e73\u5b83\u7684\u7c97\u7cd9\u8fb9\u7f18\u7684\u65f6\u673a\u5df2\u7ecf\u6210\u719f\u3002\u6709\u5f88\u591aNPM\u5305\u505a\u4e00\u4e9b\u5c0f\u7684\u611a\u8822\u7684\u4e8b\u60c5\uff0c\u800c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u51fd\u6570\u3002NPM\u8ba9\u5206\u4eab\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\n\u4f46\u662f\uff0c\u5982\u679cECMA\u51b3\u5b9a\u4fee\u590dJavaScript\u7684\u4e00\u4e9b\u7f3a\u70b9\uff0c\u5c31\u50cfJava9\u548cPython3\u8bd5\u56fe\u89e3\u51b3\u5176\u8bed\u8a00\u7684\u7ed3\u6784\u95ee\u9898\u4e00\u6837\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1fNPM\u4e0a\u5927\u7ea660%\u7684\u8f6f\u4ef6\u5305\u5728\u4e00\u5e74\u6216\u66f4\u957f\u65f6\u95f4\u5185\u6ca1\u6709\u66f4\u65b0\u3002\u5c3d\u7ba1\u7f3a\u4e4f\u7ef4\u62a4\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u4ecd\u7136\u88ab\u4e0b\u8f7d\u4e86\u6570\u5341\u4ebf\u6b21\u3002\n\u4f46\u662f\u6211\u4eec\u600e\u6837\u624d\u80fd\u6446\u8131\u7248\u672c\u5316\u5462\uff1f\u603b\u662f\u5411\u540e\u517c\u5bb9\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u653e\u5f03\u4e00\u4e9b\u91ce\u5fc3\u3002\u6e05\u7406JavaScript\uff1a\u6211\u4eec\u4e0d\u80fd\u5f15\u5165\u7834\u574f\u6027\u66f4\u6539\u3002\u5411\u540e\u517c\u5bb9\u610f\u5473\u7740\u4e0d\u5220\u9664\u529f\u80fd\u548c\u4e0d\u66f4\u6539\u529f\u80fd\u3002\u8fd9\u4e00\u539f\u5219\u7684\u53e3\u53f7\u662f\uff1a\u201c\u4e0d\u7834\u7f51\u201d\u3002\n\u6211\u4eec\u53ef\u4ee5\u6574\u5929\u4e89\u8bba\u6c38\u8fdc\u5411\u540e\u517c\u5bb9\u7684\u4f18\u70b9\u3002\u95ee\u9898\u662f\uff0cJavaScript\u4e2d\u4e00\u76f4\u56fa\u6709\u7684\u5de8\u5927\u4f9d\u8d56\u5173\u7cfb\u968f\u7740\u6846\u67b6\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c\u800c\u53d8\u5f97\u8d8a\u6765\u8d8a\u7cdf\u7cd5\u3002\u56e0\u6b64\uff0c\u89e3\u51b3JavaScript\u7b49\u8bed\u8a00\u7684\u5927\u91cf\u7ed3\u6784\u95ee\u9898\u7684\u5de5\u5177\u4e5f\u4f7f\u5f97\u8fd9\u4e9b\u95ee\u9898\u5728\u8f83\u65b0\u7248\u672c\u7684JavaScript\u4e2d\u65e0\u6cd5\u4fee\u590d\u3002\n\u5f53\u6211\u4eec\u8c08\u5230\u957f\u671f\u7ef4\u62a4\u5065\u5eb7\u548c\u5b89\u5168\u7684\u6280\u672f\u7cfb\u7edf\u65f6\uff0c\u8fd9\u6bd4COBOL\u7a0b\u5e8f\u5458\u65f6\u4ee3\u7684\u5a01\u80c1\u8981\u5927\u5f97\u591a\u3002\u7136\u800c\uff0c\u5f53\u6211\u4eec\u8c08\u8bba\u9057\u4ea7\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u8c08\u8bba\u8fd9\u4e9b\u95ee\u9898\u3002\n\u4f9d\u8d56\u5173\u7cfb\u662f\u4e00\u79cd\u5fc5\u8981\u7684\u90aa\u6076\uff0c\u4f46\u4f7f\u7528\u5b83\u4eec\u5e76\u4e0d\u4e00\u5b9a\u8981\u5c06\u9879\u76ee\u5b9a\u4e3a\u9057\u7559\u5730\u72f1\u3002\u6211\u4eec\u9700\u8981\u5f00\u59cb\u5c06\u957f\u671f\u7ef4\u62a4\u76ee\u6807\u7eb3\u5165\u6211\u4eec\u5173\u4e8e\u6280\u672f\u9009\u62e9\u7684\u5bf9\u8bdd\u4e2d\u3002\u662f\u7684\uff0cJavaScript\u6846\u67b6\u521b\u5efa\u4e86\u6df1\u5ea6\u4f9d\u8d56\u6811\uff0c\u4f46\u662f\u5373\u4f7f\u5f00\u53d1NPM\u662f\u4e3a\u4e86\u6ee1\u8db3\u540e\u7aef\u8bed\u8a00\u7684\u9700\u6c42\uff0c\u5b83\u4e0a80%\u7684\u6d3b\u52a8\u4e5f\u662f\u4e0e\u524d\u7aef\u76f8\u5173\u7684\u3002\u6211\u4eec\u628a\u524d\u989d\u6254\u6389\uff0c\u7136\u540e\u4e00\u76f4\u91cd\u5efa\u3002\u8bbe\u8ba1\u754c\u7684\u666e\u904d\u770b\u6cd5\u662f\uff0c\u7f51\u7ad9\u5927\u7ea6\u6bcf\u4e09\u5e74\u91cd\u65b0\u8bbe\u8ba1\u4e00\u6b21\u3002\u56e0\u6b64\uff0c\u4ece\u9057\u7559\u73b0\u4ee3\u5316\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4e0e\u5177\u6709\u66f4\u6df1\u5c42\u6b21\u4f9d\u8d56\u56fe\u7684\u76f8\u540c\u5927\u5c0f\u7684Node\u5e94\u7528\u7a0b\u5e8f\u76f8\u6bd4\uff0c\u5177\u6709\u5927\u5c0f\u4f9d\u8d56\u56fe\u7684Reaction\u524d\u7aef\u5e76\u4e0d\u662f\u4ec0\u4e48\u95ee\u9898\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u5f00\u59cb\u6279\u5224\u6027\u5730\u601d\u8003\u6211\u4eec\u671f\u671b\u4e00\u9879\u7ed9\u5b9a\u7684\u6280\u672f\u80fd\u6301\u7eed\u591a\u4e45\uff0c\u5e76\u95ee\u95ee\u81ea\u5df1\uff0c\u6211\u4eec\u5728\u6784\u5efa\u5b83\u65f6\u6240\u505a\u7684\u9009\u62e9\u662f\u5426\u4f1a\u8ba9\u5b83\u66f4\u96be\u5728\u4ee5\u540e\u79fb\u9664\u3002\u6211\u4eec\u518d\u4e5f\u4e0d\u80fd\u5750\u7b49\u66f4\u597d\u7684\u4e8b\u60c5\u51fa\u73b0\u4e86\u3002\u6211\u4eec\u5fc5\u987b\u5047\u8bbe\u6700\u7ec8\u4f1a\u6709\u66f4\u597d\u7684\u4e1c\u897f\u51fa\u73b0\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8c03\u6574\u5bf9\u8bdd\u7684\u7126\u70b9\uff0c\u505c\u6b62\u5996\u9b54\u5316\u6280\u672f\uff0c\u4ec5\u4ec5\u56e0\u4e3a\u6280\u672f\u8001\u4e86\uff0c\u88ab\u8001\u5e74\u4eba\u7f16\u7a0b\u3002\u4e16\u754c\u4e0a\u5f88\u5927\u4e00\u90e8\u5206COBOL\u5728COBOL\u4e0a\u505a\u5f97\u5f88\u597d\u3002\u786e\u5b9e\u5b58\u5728\u7684\u95ee\u9898\u4e5f\u53ef\u4ee5\u57282002\u5e74\u5f00\u53d1\u7684webapp\u4e2d\u627e\u5230\u3002COBOL\u9648\u65e7\u8fd9\u4e00\u4e8b\u5b9e\u5e76\u4e0d\u91cd\u8981\uff0c\u5b83\u5206\u6563\u4e86\u4eba\u4eec\u5bf9\u5df2\u7ecf\u8fc7\u4e86\u751f\u547d\u5468\u671f\u7684\u4e0d\u65ad\u589e\u957f\u7684\u4ee3\u7801\u751f\u6001\u7cfb\u7edf\u7684\u6ce8\u610f\u529b\u3002\n\u6211\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u5927\u6d41\u884c\u9879\u76ee\u4e4b\u4e00\u5c31\u662f\u5236\u4f5c\u7a0d\u5fae\u6709\u70b9\u50cf\u5de8\u4eba\u4e00\u6837\u7684\u5de5\u7a0b\u8d34\u7eb8\u3002\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4efd\u514d\u8d39\u7684\u201c\u6240\u6709\u8f6f\u4ef6\u90fd\u662f\u5783\u573e\u201d\uff0c\u544a\u8bc9\u6211\u9001\u5230\u54ea\u91cc\u3002", "note_en": "Without fail whenever I get an interview request, or an invitation to speak about my work doing legacy modernization everybody wants to talk about mainframes and COBOL. The assumption is that I will tell some good war stories about the drudgery of old systems for other engineers who don\u2019t need to worry about that stuff because their careers are focused on modern technology.\n Granted, when I started working with legacy systems I was also drawn to the  Ripley\u2019s Believe It or Not factor of the most ancient programs. The thrill of unearthing and dissecting older and older systems, figuring out forgotten languages that most programmers have never heard of, let alone interacted with. I have always been fascinated by low level languages and systems, the magic that turns changes in voltage to abstractions in math and design. But lately I\u2019ve become much more interested in the coming legacy apocalypse and how to slow down the rising level of technical debt on new(-er) technologies.\n The legacy apocalypse is not the death of the last Baby Boomer COBOL programmer. To be honest that crisis has come and gone. When people talk about the threat of old systems, they love to trot out a stat about how  old COBOL programmers are. For example, in 2006 the average age of a COBOL programmer was 55. That sounds bad. Lots of critical staff are close to retirement! Who will look after their systems when they\u2019re gone?\n Averages can be misleading.  In the same survey 52% of programmers were 45\u201355 and 34% were 35\u201345. But more to the point, eight years later when all those 55 year old programmers were supposed to have retired Micro Focus\u2019s survey of COBOL programmers and executives put the average age of a COBOL programmer at 55  again.  Their 2019 survey had the average at 50.\n In fact, the average age of COBOL programmers has been steady for  decades. When my father worked on Y2K bugs he was in his late 40s~early 50s. His colleagues were similar ages. Every time I see people making a big deal about the age of the COBOL community I think of something American oboist Blair Tindell wrote about the classical music community:\n The terror about older listeners was misplaced, ignoring the fact that average audience age has hovered in the late forties for some time. It was logical for people to wait until midlife to begin attending the symphony. With children grown, tuition paid, more leisure time, concerts fit well into mature baby boomers\u2019 rich lifestyles, tastes, and income.\n A similar thing could be said about COBOL. Unlike young programmers in the 60s, 70s and 80s, young programmers of today do not have university mainframes to play around with. If the university still has a mainframe it\u2019s the work horse of the administration, too critical for student projects. Young programmers do not have the option of learning COBOL. And even if they did the hundreds \u2014 or some say thousands \u2014 of COBOL jobs are not entry level ones.\n In all likelihood the reason the average age of COBOL programmers is stable is because COBOL programmers develop their depth of experience and expertise in other languages before moving over to COBOL later in their career.\n People are worried about old COBOL programmers because they assume when the last of the COBOL programmers die out then their programs will be unmaintainable. This is a reasonable concern, however most people would be surprised to learn that the threat of unmaintainable legacy code is a whole lot closer than they think and does not involve a mainframe.\n  If you are keeping score, the most current version of Java is 14. The end of life for Java 8 was supposed to be 2019.\n Java 9 introduced some structural changes to make Java more modular and therefore more feasible for embedded systems. Moving from Java 8 to Java 9 is not an upgrade, it\u2019s a full migration. Among other things Java 9 made JDK-internal APIs inaccessible, it removed several tools and methods, and the shift to a modular structure required changes to dependencies. In other words, moving from Java 8 to Java 9 potentially meant that a lot of code would have to be rewritten.\n So as a result  more than half of production applications surveyed by Synk in 2020 were still running on Java 8.\n  Of course the ultimate in upgrades that are really major migrations is the transition from Python 2 to Python 3. As with Java 8, Python 2 has lingered because migration to Python 3 requires both a rewrite of the code you own and eliminating Python 2 from all of your dependencies. Although tools like Benjamin Peterson\u2019s  six have made the task much more pleasant, dependencies are more than packages and libraries. The platform the code runs on is  also a dependency and the platforms have been slow to respond. Although Python is an extremely popular scripting tool, AWS Lambda did not support Python 3 until 3.6 in 2017, which was a year after 3.6 was released. The same year that Salt rolled out Python 3 support. Ansible supported it a year later, roughly a decade after Python 3 was originally announced.\n It\u2019s hard to say how much Python 2 is left in the world.  Jetbrains estimates that it\u2019s only 10% and with 24 thousand respondents across 150 different countries that\u2019s probably an accurate figure. The Python 2 problem may not be that there is so much of it, but  where it still exists. According to Jetbrains the places where Python 2 is still giving Python 3 a run for its money are DevOps/Automation, Testing, and Network Programming. Getting various flavors of Linux to commit fully to Python 3 proved to be a huge challenge. And the fight is not over yet, every Mac-loving pythonista knows that Apple computers still ship with Python 2.7 as their default Python version because of MacOS internal tools.\n  On the flip side of dependency hell is jQuery. Migrating away from jQuery is not difficult because of dependencies, it is difficult because so many other things have come to depend on jQuery.\n When Twitter Bootstrap finally removed jQuery as a dependency in 2019 it was only  because they copied and pasted source code from jQuery directly into Bootstrap. Even then the whole project took over two years from beginning to end.\n jQuery is a victim of its own success. Its simple syntax proved so popular that other frameworks and even native JS started to adopt it. On top of that, many of the legacy technologies that jQuery provided cross compatibility with have  finally been decommissioned (looking at you Internet Explorer). Personally I think the concern around jQuery is a little overblown, but I\u2019m not a JavaScript person. The campaign against jQuery seems to have been kicked off by conflicts between the framework and the ascendant MVC JavaScript framework of the moment, React.\n But like all holy wars in technology, good sensible arguments against choosing one option over the other become murkier the more often they are repeated. In some ways I think the jQuery story is the most similar to the COBOL story in that the headlines published about it lead with its omnipresence and imply that because other technologies can do the same things now those other (newer) technologies must be better.\n  There are many things that make legacy systems difficult to maintain. The age of the programmers doing the maintaining is not one of them. True, loss of institutional memory matters and when the programmers who knew the system best leave institutional memory goes with them. But this is not an issue exclusive to older technology. Organizations lose institutional memory to poaching staff just as often as they do to retirement (probably more often).\n The fact that the pool of available engineers savvy with COBOL is limited is a problem solved much cheaper and much easier by building pipelines to develop COBOL talent. IBM has been very active in this space with their  Master the Mainframe program. It\u2019s simply not true that COBOL programmers are a finite resource that is drying up.\n I have to say in my experience, whenever a COBOL system goes down it is almost  never the COBOL that took it down. I\u2019ve seen hardware failures, issues with non-COBOL systems that support or otherwise integrate with COBOL, I\u2019ve seen delays in adding new features because the COBOL code is poorly documented and engineering needs to figure out how to change it\u2026. but I haven\u2019t seen many incidents where the fact that the system was in COBOL was a problem in and of itself. That\u2019s not to say that there aren\u2019t good reasons to get rid of COBOL, there definitely are. I\u2019m just not inclined to agree that civil society can\u2019t continue to run on millions of lines of COBOL for another 60 years. It certainly can.\n Java 8 and Python 2 on the other hand are a far more serious threat. When systems can\u2019t get off end of life technology they miss security updates, performance enhancements, and new features. The longer systems stay stuck in their own technical debt, the more things are built on top of them, the more entrenched the legacy becomes.\n We do programmers a disservice when we act as if the conversation about the growing threat of legacy code begins and ends with COBOL. A whole generation of software engineers are spending their careers making the problem worse by outsourcing all but the most unique aspects of their applications to armies of libraries, plugins and modules that they are powerless to monitor let alone update.\n The real horsemen of the legacy apocalypse is the depth of the dependency tree. Modern software development stacks abstraction on top of abstraction. If the  left-pad incident of 2016 proved nothing else it demonstrated that even experienced engineers will YOLO dependencies on to their applications if given the infrastructure to make installing them easy. Modern developer environments are a veritable candy store of cheap and convenient dependencies.\n  If Wikipedia can be considered an authoritative source, activity around developing brand new programming languages peaked in the 90s when computers were accessible to a large number of people but were still relatively low on abstraction. The internet changed that both by making more complex distributed systems a reality but also by swelling the blast radius of security issues. Requiring better performance and better security made the MVP of a new language on modern day machines fairly complex. No longer can smart computer scientists build proof of concept pet languages and expect applying them to real world problems to power their evolution. There are a huge number of complex tasks programming languages are expected to handle for the programmer.\n So even though the number of professional programmers has grown sharply since the glory days of the 90es, these software experts have shifted away from developing new languages toward developing new  frameworks.\n And a framework is essentially nothing more than a curated collection of dependencies given a common interface. True, frameworks make software development faster, but they also take away the developer\u2019s ability to maintain their code. Advancements in tooling that decrease the speed of software development have inevitably deepened the dependency trees of the average software project.\n Take for example Node.js. Node is an interesting framework that made it possible to run JavaScript on the server side, but it also introduced (as a dependency) a nifty little package manager called NPM. There had been package managers before and NPM wasn\u2019t necessarily the best one, but it provided a better user experience by learning some lessons from the package managers before it. It installed things locally instead of globally by default. The command line was designed to integrate with a package repository from the beginning, so creating and publishing new packages was arbitrarily easy.\n As a result the  average depth of the dependency tree on NPM is 4.39 packages, while the average depth on a comparable package manager (in this case PyPi) is 1.7. Python developers are not inherently more responsible than JavaScript developers. JavaScript\u2019s lack of a good core library and its history as a toy language designed and implemented in a week makes it ripe for the development of frameworks to smooth it\u2019s rough edges. There are many many npm packages that do small stupid things that in other languages there is a built in function. NPM made it easy to share.\n  But what would happen if ECMA decided to fix some of JavaScript\u2019s shortcomings the same way Java 9 and Python 3 attempted to resolve structural problems with their languages? Around 60% of packages on npm have not been updated in a year or more. Despite the lack of maintenance these packages are still downloaded  billions of times.\n  But how can we get rid of versioning? By always being backward-compatible. That means we must give up some of our ambitions w.r.t. cleaning up JavaScript: We can\u2019t introduce breaking changes. Being backward-compatible means not removing features and not changing features. The slogan for this principle is: \u201cdon\u2019t break the web\u201d.\n We could debate the merits of forever backwards compatibility all day. The point is the colossal dependency footprint that has always been inherent in JavaScript has grown infinitely worse as frameworks for it become more popular. So the same tools that are ironing out the numerous structural problems with a language like JavaScript are also making those problems impossible to fix in newer versions of JavaScript.\n When we talk about maintaining healthy and secure technical systems long term this is a far greater threat than the age of COBOL programmers. And yet when we talk about legacy, we do not talk about these issues.\n  Dependencies are a necessary evil, but using them doesn\u2019t have to condemn projects to legacy hell. We need to start incorporating long term maintenance goals into our conversations about technology selection. JavaScript frameworks create deep dependency trees, yes, but even though NPM was developed to serve the needs of a backend language,  80% of the activity on it is frontend related. We throw frontends away and rebuild them all the damn time. The prevailing wisdom in the design community is that websites are redesigned roughly every three years. So a React frontend with a large dependency graph is less of a concern from a legacy modernization standpoint than a Node app with a dependency graph of the same size buried more deeply in the architecture.\n In other words we need to start thinking critically about how long we expect a given piece of technology to last and ask ourselves whether the choices we make in building it will make it harder to remove later. We can no longer afford to wait and see when something better comes along. We have to assume that something better will come along  eventually.\n Finally we need to refocus the conversation and stop demonizing technology just for being  old and programmed by  old people. A huge portion of the world\u2019s COBOL is doing just fine on COBOL. The problems that do exist can also be found in webapps built in 2002. The fact that COBOL is old is besides the point and distracts away from the growing ecosystem of code that is past end of life.\n   One of my fun pandemic projects has been creating slightly trolly engineering stickers. If you\u2019d like a free \u201call software is garbage\u201d tell me where to send it   here .", "posttime": "2020-06-08 23:44:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,younger,cobol", "title": "\u65e7\u4ee3\u7801\u4e00\u5e74\u6bd4\u4e00\u5e74\u5e74\u8f7b", "title_en": "Old Code Gets Younger Every Year", "transed": 1, "url": "https://medium.com/@bellmar/old-code-gets-younger-every-year-3bd24c7f2262", "via": "", "real_tags": ["\u4ee3\u7801", "younger", "cobol"]}, {"category": "", "categoryclass": "", "imagename": "046bb039a85c02a260ee0165e8eae169.jpg", "infoid": 1005712, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u6211\u4eec\u7684\u5ef6\u8fdf\u6d4b\u8bd5\u663e\u793a\u4e86WD Red eFax\u7684\u56fa\u4ef6\u53ef\u80fd\u5b58\u5728\u7684\u95ee\u9898\uff0c\u4f46\u663e\u793a\u7684\u4e25\u91cd\u6545\u969c\u76f8\u5bf9\u6765\u8bf4\u662f\u8f6c\u77ac\u5373\u901d\u7684\u3002\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0cRed\u7684\u56fa\u4ef6\u5f88\u597d\u5730\u5904\u7406\u4e86\u6211\u4eec\u5bf9\u6d88\u8d39\u7c7b\u786c\u76d8\u6240\u671f\u671b\u7684\u6240\u6709\u7528\u4f8b\u5de5\u4f5c\u8d1f\u8f7d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u8fd8\u662f\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u5f53\u88ab\u8981\u6c42\u5728ZFS\u4e0b\u5904\u7406\u7c7b\u4f3c\u7684\u4efb\u52a1\u65f6\uff0c\u5b83\u4f1a\u5931\u8d25\u5f97\u5982\u6b64\u60e8\u70c8\u3002\n\u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u4e86\u89e3ZFS--\u5c24\u5176\u662fZFS RAIDz\uff0c\u6bd4\u5982Servethehome test--\u5b9e\u9645\u4e0a\u662f\u5982\u4f55\u5199\u5165\u6570\u636e\u7684\u3002\u5f53\u60a8\u8981\u6c42mdraid RAID6\u9635\u5217\u5b58\u50a81MiB\u7684\u6570\u636e\u5757\u65f6\uff0c\u6570\u636e\u5c06\u4ee5\u6613\u4e8e\u7ba1\u7406\u7684512KiB\u533a\u5757\u5f62\u5f0f\u5b58\u653e\u5728\u603b\u5171\u4e24\u4e2a\u9a71\u52a8\u5668\u4e0a\u3002\u6b63\u5982\u6211\u4eec\u5728\u8fd9\u91cc\u7684\u6bcf\u4e2a\u6d4b\u8bd5\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0cRed\u53ef\u4ee5(\u81f3\u5c11\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b)\u5f88\u597d\u5730\u5904\u7406\u8be5\u5de5\u4f5c\u8d1f\u8f7d\u3002\n\u4f46\u662f\uff0c\u5f53\u60a8\u5c06\u76f8\u540c\u7684\u6570\u636e\u4fdd\u5b58\u5230ZFS RAIDz vdev\u65f6\uff0c\u6bcf\u4e2a\u78c1\u76d8\u7684\u5de5\u4f5c\u8d1f\u8f7d\u770b\u8d77\u6765\u975e\u5e38\u4e0d\u540c\u3002\u9ed8\u8ba4ZFS\u8bb0\u5f55\u5927\u5c0f\u4e3a128KiB-\u6bcf\u4e2a\u5b8c\u6574\u5927\u5c0f\u7684\u6570\u636e\u5757\u5728vdev\u7684n-P\u4e2a\u78c1\u76d8\u4e4b\u95f4\u5e73\u5747\u5206\u914d\uff0c\u5176\u4e2dn-P\u662f\u78c1\u76d8\u603b\u6570\uff0cP\u662f\u5947\u5076\u6821\u9a8c\u5757\u7684\u6570\u91cf\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8eServeTheHome\u7684\u56db\u78c1\u76d8RAIDz1 vdev\uff0c\u8bb0\u5f55\u5b58\u50a8\u5728\u6bcf\u4e2a\u78c1\u76d8\u768444KiB(128/3\uff0c\u5411\u4e0a\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u5076\u6570\u6247\u533a\u5927\u5c0f)\u5757\u4e2d\u3002\u5728\u6211\u4eec\u81ea\u5df1\u7684\u516b\u78c1\u76d8RAIDz2 vdev\u4e2d\uff0c\u8bb0\u5f55\u4ee524KiB(128/6\uff0c\u56db\u820d\u4e94\u5165)\u5757\u5b58\u50a8\u3002\n\u73b0\u5728\u6211\u4eec\u4e86\u89e3\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5927\u89c4\u6a21\u987a\u5e8f\u5199\u5165\u6765\u6a21\u62df\u7406\u60f3\u7684ZFS\u91cd\u65b0\u540c\u6b65\u5de5\u4f5c\u8d1f\u8f7d-\u6211\u4eec\u4f7f\u752832KiB\u7684\u4e0d\u53ef\u538b\u7f29\u4f2a\u968f\u673a\u6570\u636e\u5757\uff0c\u5728\u6211\u4eec\u7684Ironwolf\u57fa\u51c6\u78c1\u76d8\u548cWD Red 4TB eFax\u6d4b\u8bd5\u78c1\u76d8\u4e0a\u786e\u5b9e\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\u5728\u6b64\u6d4b\u8bd5\u5de5\u4f5c\u8d1f\u8f7d\u4e0b\uff0c\u6211\u4eec\u5728Ironwolf\u4e0a\u5b9e\u73b0\u4e86209.3MiB/\u79d2\u7684\u541e\u5410\u91cf\uff0c\u4f46\u5728Red\u4e0a\u53ea\u670913.2MiB/\u79d2-15.9\uff1a1\u7684\u51cf\u901f\uff0c\u8fd9\u786e\u5b9e\u975e\u5e38\u7b26\u5408Serve Home\u5728\u4ed6\u4eec\u7684ZFS Re Silver\u6d4b\u8bd5\u4e2d\u89c2\u5bdf\u5230\u768415.7\uff1a1\u7684\u51cf\u901f\u3002\n\u6211\u4eec\u8981\u975e\u5e38\u660e\u786e\u5730\u8bf4\uff1a\u6211\u4eec\u540c\u610f\u5e0c\u6377\u7684\u683c\u96f7\u683c\u00b7\u8d1d\u7f57\u5c3c(Greg Belloni)\u7684\u89c2\u70b9\uff0c\u4ed6\u4ee3\u8868\u5e0c\u6377\u8868\u793a\uff0c\u4ed6\u4eec\u4e0d\u5efa\u8bae\u5c06SMR\u7528\u4e8eNAS\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u7edd\u5bf9\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0cSMR\u78c1\u76d8\u7684\u6027\u80fd\u660e\u663e\u900a\u4e8eCMR\u78c1\u76d8\uff1b\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u975e\u5e38\u7cdf\u7cd5\uff0c\u4ee5\u81f3\u4e8e\u53ef\u80fd\u88ab\u9519\u8bef\u5730\u68c0\u6d4b\u4e3a\u6545\u969c\u786c\u4ef6\u3002\n\u8fd9\u6837\u8bf4\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48\u897f\u90e8\u6570\u636e\u5728\u7ecf\u8fc7\u6211\u4eec\u5047\u8bbe\u7684\u5927\u91cf\u5b9e\u9a8c\u5ba4\u6d4b\u8bd5\u4e4b\u540e\uff0c\u76f8\u4fe1\u4ed6\u4eec\u7684\u78c1\u76d8\u5bf9\u4e8e\u5178\u578b\u7684NAS\u4f7f\u7528\u6765\u8bf4\u662f\u6b63\u5e38\u7684\u3002\u867d\u7136\u660e\u663e\u6162\u4e8e\u5176Ironwolf\u7ade\u4e89\u5bf9\u624b\uff0c\u4f46\u5b83\u4eec\u5728\u4f20\u7edfRAID\u91cd\u5efa\u548c\u5178\u578b\u7684\u65e5\u5e38NAS\u6587\u4ef6\u5171\u4eab\u5de5\u4f5c\u8d1f\u8f7d\u65b9\u9762\u90fd\u6709\u8db3\u591f\u7684\u8868\u73b0\u3002\n\u56fa\u4ef6\u5982\u4f55\u5f88\u597d\u5730\u9002\u5e94\u5927\u591a\u6570\u5de5\u4f5c\u8d1f\u8f7d\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86\u6df1\u523b\u7684\u5370\u8c61-\u8fd9\u662fRFC 1925 2\u7684\u4e00\u4e2a\u660e\u663e\u7684\u4f8b\u5b50\u3002(3)\u5b83\u6b63\u5728\u8fd0\u884c\uff0c\u4f46\u63a8\u529b\u4f3c\u4e4e\u786e\u5b9e\u8db3\u4ee5\u8fbe\u5230\u76ee\u7684\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u897f\u90e8\u6570\u636e\u4f3c\u4e4e\u6ca1\u6709\u6d4b\u8bd5ZFS\uff0c\u800cZFS\u662f\u4ed6\u4eec\u76f8\u5f53\u5c11\u6570\u7684\u5ba2\u6237\u7fa4\u6240\u4f9d\u8d56\u7684\u3002\n\u5bf9\u4e8e\u76ee\u524d\u6b63\u5728\u8fdb\u884c\u7684\u9488\u5bf9\u897f\u90e8\u6570\u636e\u7684\u7f8e\u56fd\u6216\u52a0\u62ff\u5927\u96c6\u4f53\u8bc9\u8bbc\u6765\u8bf4\uff0c\u8fd9\u4e9b\u6d4b\u8bd5\u53ef\u80fd\u90fd\u4e0d\u662f\u597d\u6d88\u606f\uff0c\u4f46\u5b83\u4eec\u4e5f\u4e0d\u662f\u8fd9\u4e9b\u8bc9\u8bbc\u7684\u7ec8\u70b9\u3002\u5373\u4f7f\u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0cWD Red\u7684SMR\u8f66\u578b\u7684\u8868\u73b0\u4e5f\u8fdc\u8fdc\u900a\u4e8e\u65e9\u5148\u7684\u975eSMR\u8f66\u578b-\u800c\u4e14\u6d88\u8d39\u8005\u6ca1\u6709\u5f97\u5230\u964d\u7ea7\u7684\u660e\u786e\u901a\u77e5\u3002\n\u5982\u679c\u4f7f\u7528\u76f8\u540c\u7684\u56fa\u4ef6\u5411\u6d88\u8d39\u8005\u63d0\u4f9b\u6bd4\u5176\u4ed6\u60c5\u51b5\u4e0b\u66f4\u5927\u7684\u9a71\u52a8\u5668\uff0c\u5e76\u4e14\u5145\u5206\u89e3\u91ca\u4e86\u8fd9\u4e9b\u9a71\u52a8\u5668\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6ed4\u6ed4\u4e0d\u7edd\u5730\u8c08\u8bba\u5176\u5b9e\u7528\u7a0b\u5e8f\u548c\u529f\u80fd\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u897f\u90e8\u6570\u636e\u516c\u53f8\u5230\u76ee\u524d\u4e3a\u6b62\u53ea\u9009\u62e9\u7528\u5b83\u6765\u524a\u51cf\u5c0f\u78c1\u76d8\u7684\u5236\u9020\u6210\u672c\uff0c\u751a\u81f3\u6ca1\u6709\u5c06\u8282\u7701\u7684\u6210\u672c\u8f6c\u5ac1\u7ed9\u6d88\u8d39\u8005\u3002", "note_en": "Although our latency tests demonstrated the problems the WD Red EFAX&#39;s firmware\u00a0 could have, the bad failures demonstrated were relatively fleeting. For the most part, the Red&#39;s firmware handled all of the use case workloads we&#39;d expect of a consumer drive well. Still, we wanted to see why it failed so miserably when asked to handle similar tasks under ZFS.\n In order to do this, you need to understand\u00a0 how ZFS\u2014and in particular, ZFS RAIDz, such as Servethehome tested\u2014actually writes data. When you ask an mdraid RAID6 array to store a 1MiB block of data, the data winds up in easy-to-manage 512KiB chunks on two drives total. As we saw in each of our tests here, the Red can (for the most part, at least) handle that workload just fine.\n But when you save the same data to a ZFS RAIDz vdev, the per-disk workload looks considerably different. The default ZFS recordsize is 128KiB\u2014and each full-size block is split evenly between  n -P\u00a0disks of the vdev, where  n\u00a0is the total number of disks and\u00a0 P is the number of parity blocks. So for ServeTheHome&#39;s four-disk RAIDz1 vdev, records are stored in 44KiB (128/3, rounded up to the nearest even sector size) chunks per disk. In our own eight-disk RAIDz2 vdev, the records are stored in 24KiB (128/6, rounded up) chunks.\n Now that we understand that, we know that we can model an ideal ZFS resilvering workload with a massive sequential write\u2014and we did exactly that, using 32KiB blocks of incompressible pseudorandom data, on both one of our Ironwolf 12TB &#34;baseline&#34; disks and our WD Red 4TB EFAX test disk. With this test workload, we achieved a throughput of 209.3MiB/sec on the Ironwolf, but only 13.2MiB/sec on the Red\u2014a 15.9:1 slowdown, which corresponds very well indeed with the 15.7:1 slowdown Servethehome observed in their ZFS resilver testing.\n  We want to be very clear: we agree with Seagate&#39;s Greg Belloni, who stated on the company&#39;s behalf that they &#34;do not recommend SMR for NAS applications.&#34; At absolute best, SMR disks underperform significantly in comparison to CMR disks; at their worst, they can fall flat on their face so badly that they may be mistakenly detected as failed hardware.\n With that said, we can see why Western Digital believed, after what we assume was a considerable amount of laboratory testing, that their disks would be &#34;OK&#34; for typical NAS usage. Although obviously slower than their Ironwolf competitors, they performed adequately both for conventional RAID rebuilds and for typical day-to-day NAS file-sharing workloads.\n We were genuinely impressed with how well the firmware adapted itself to most workloads\u2014this is a clear example of  RFC 1925 2.(3)\u00a0in action, but the thrust\u00a0 does appear sufficient to the purpose. Unfortunately, it would appear that Western Digital did\u00a0 not test ZFS, which a substantial minority of their customer base depends upon.\n These tests may not be great news for either the  American or  Canadian class-action lawsuits currently underway against Western Digital, but they aren&#39;t the end of the line for those lawsuits, either. Even in the best case, the SMR models of WD Red underperform their earlier, non-SMR counterparts substantially\u2014and consumers were not given clear notice of the downgrade.\n If the same firmware was being used to make substantially larger drives available to consumers than would otherwise be possible,\u00a0 and the limitations of those drives were adequately explained, we would probably be gushing over its utility and function. Unfortunately, Western Digital\u00a0has so far only chosen to use it to cut manufacturing costs on small disks,  without even passing the savings along to the consumer.", "posttime": "2020-06-08 23:28:18", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "smr,digital,\u78c1\u76d8", "title": "\u897f\u90e8\u6570\u636e\u7684SMR\u5149\u76d8\u4e0d\u9002\u7528\u4e8eZFS\uff0c\u4f46\u9002\u7528\u4e8e\u5927\u591a\u6570\u573a\u5408\u3002", "title_en": "Western Digital's SMR Disks Won't Work For ZFS, But They're Okay For Most NASes.", "transed": 1, "url": "https://arstechnica.com/gadgets/2020/06/western-digitals-smr-disks-arent-great-but-theyre-not-garbage/2/", "via": "", "real_tags": ["smr", "digital", "\u78c1\u76d8"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005711, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7814\u7a76\u4eba\u5458\u62a5\u544a\u4e86\u4e24\u6b21\u65b0\u53d1\u73b0\u7684\u4e0e\u9ec4\u77f3\u70ed\u70b9\u8f68\u9053\u6709\u5173\u7684\u8d85\u7ea7\u55b7\u53d1\uff0c\u5176\u4e2d\u5305\u62ec\u4ed6\u4eec\u8ba4\u4e3a\u662f\u706b\u5c71\u7701\u6700\u5927\u548c\u6700\u5177\u707e\u96be\u6027\u7684\u4e8b\u4ef6\u3002\u7ed3\u679c\u8868\u660e\uff0c\u4eca\u5929\u4e3a\u9ec4\u77f3\u56fd\u5bb6\u516c\u56ed\u8457\u540d\u7684\u95f4\u6b47\u6cc9\u3001\u6ce5\u6f6d\u548c\u70df\u56f1\u63d0\u4f9b\u71c3\u6599\u7684\u70ed\u70b9\u53ef\u80fd\u6b63\u5728\u51cf\u5f31\u3002\n\u7eb5\u89c2\u5730\u7403\u6f2b\u957f\u7684\u5386\u53f2\uff0c\u706b\u5c71\u8d85\u7ea7\u55b7\u53d1\u4e00\u76f4\u662f\u5f71\u54cd\u6211\u4eec\u661f\u7403\u5d0e\u5c96\u8868\u9762\u7684\u4e00\u4e9b\u6700\u6781\u7aef\u7684\u4e8b\u4ef6\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u7206\u70b8\u55b7\u51fa\u7684\u7269\u8d28\u6570\u91cf\u5de8\u5927--\u81f3\u5c11\u662f1980\u5e74\u5723\u6d77\u4f26\u65af\u706b\u5c71\u55b7\u53d1\u76841000\u500d--\u800c\u4e14\u6709\u53ef\u80fd\u6539\u53d8\u5730\u7403\u7684\u6c14\u5019\uff0c\u4f46\u5728\u5730\u8d28\u8bb0\u5f55\u4e2d\u88ab\u8bb0\u8f7d\u7684\u76f8\u5bf9\u8f83\u5c11\u3002\n\u73b0\u5728\uff0c\u5728\u201c\u5730\u8d28\u5b66\u201d\u4e0a\u53d1\u8868\u7684\u4e00\u9879\u7814\u7a76\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u5ba3\u5e03\u53d1\u73b0\u4e86\u4e24\u4e2a\u65b0\u53d1\u73b0\u7684\u4e0e\u9ec4\u77f3\u70ed\u70b9\u8f68\u8ff9\u6709\u5173\u7684\u8d85\u7ea7\u55b7\u53d1\uff0c\u5176\u4e2d\u5305\u62ec\u4ed6\u4eec\u8ba4\u4e3a\u662f\u8fd9\u4e2a\u706b\u5c71\u7701\u89c4\u6a21\u6700\u5927\u3001\u6700\u5177\u707e\u96be\u6027\u7684\u4e8b\u4ef6\u3002\u7ed3\u679c\u8868\u660e\uff0c\u4eca\u5929\u4e3a\u9ec4\u77f3\u56fd\u5bb6\u516c\u56ed\u8457\u540d\u7684\u95f4\u6b47\u6cc9\u3001\u6ce5\u6f6d\u548c\u70df\u56f1\u63d0\u4f9b\u71c3\u6599\u7684\u70ed\u70b9\u53ef\u80fd\u6b63\u5728\u51cf\u5f31\u3002\n\u7814\u7a76\u5c0f\u7ec4\u4f7f\u7528\u4e86\u4e00\u7cfb\u5217\u6280\u672f\uff0c\u5305\u62ec\u5927\u91cf\u5316\u5b66\u6570\u636e\u3001\u78c1\u6027\u6570\u636e\u548c\u653e\u5c04\u6027\u540c\u4f4d\u7d20\u5e74\u4ee3\uff0c\u5c06\u6563\u5e03\u5728\u6570\u4e07\u5e73\u65b9\u516c\u91cc\u7684\u706b\u5c71\u6c89\u79ef\u7269\u5173\u8054\u8d77\u6765\u3002\u83b1\u65af\u7279\u5927\u5b66(University Of Leicester)\u706b\u5c71\u5b66\u5bb6\u3001\u8fd9\u7bc7\u8bba\u6587\u7684\u4e3b\u8981\u4f5c\u8005\u6258\u9a6c\u65af\u00b7\u514b\u8bfa\u7279(Thomas Knott)\u8bf4\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u4ee5\u524d\u88ab\u8ba4\u4e3a\u5c5e\u4e8e\u591a\u6b21\u8f83\u5c0f\u89c4\u6a21\u55b7\u53d1\u7684\u6c89\u79ef\u7269\uff0c\u5b9e\u9645\u4e0a\u662f\u5927\u7ea6900\u4e07\u5e74\u548c870\u4e07\u5e74\u524d\u4e24\u6b21\u4e4b\u524d\u4e0d\u4e3a\u4eba\u77e5\u7684\u8d85\u7ea7\u55b7\u53d1\u4ea7\u751f\u7684\u5de8\u5927\u706b\u5c71\u7269\u8d28\u3002\n\u514b\u8bfa\u7279\u8bf4\uff0c\u4e24\u6b21\u55b7\u53d1\u4e2d\u8f83\u5e74\u8f7b\u7684\u4e00\u6b21\uff0c\u683c\u96f7\u767b\u9646\u8d85\u7ea7\u55b7\u53d1\uff0c\u73b0\u5728\u662f\u6574\u4e2a\u86c7\u6cb3-\u9ec4\u77f3\u706b\u5c71\u7701\u6709\u8bb0\u5f55\u4ee5\u6765\u6700\u5927\u7684\u4e8b\u4ef6\u3002\u6839\u636e\u6700\u8fd1\u5bf9\u8d85\u7ea7\u55b7\u53d1\u89c4\u6a21\u7684\u6574\u7406\uff0c\u4ed6\u8865\u5145\u8bf4\uff0c\u8fd9\u662f\u6709\u53f2\u4ee5\u6765\u6700\u5927\u7684\u4e94\u6b21\u55b7\u53d1\u4e4b\u4e00\u3002\n\u8be5\u56e2\u961f\u8fd8\u5305\u62ec\u6765\u81ea\u82f1\u56fd\u5730\u8d28\u8c03\u67e5\u5c40\u548c\u52a0\u5dde\u5927\u5b66\u5723\u514b\u9c81\u65af\u5206\u6821\u7684\u7814\u7a76\u4eba\u5458\uff0c\u4ed6\u4eec\u4f30\u8ba1\u683c\u96f7\u767b\u9646\u8d85\u7ea7\u706b\u5c71\u55b7\u53d1\u6bd4\u4e4b\u524d\u7684\u8bb0\u5f55\u4fdd\u6301\u8005(\u8457\u540d\u7684\u54c8\u514b\u8d1d\u5229\u5cad\u51dd\u7070\u5ca9)\u592730%\uff0c\u5e76\u5bf9\u5f53\u5730\u548c\u5168\u7403\u4ea7\u751f\u4e86\u6bc1\u706d\u6027\u7684\u5f71\u54cd\u3002\u514b\u8bfa\u7279\u8bf4\uff0c\u683c\u96f7\u767b\u9646\u706b\u5c71\u55b7\u53d1\u5c06\u65b0\u6cfd\u897f\u5dde\u5927\u5c0f\u7684\u533a\u57df\u6d82\u4e0a\u4e86\u707c\u70ed\u7684\u706b\u5c71\u73bb\u7483\uff0c\u7acb\u5373\u5c06\u9646\u5730\u8868\u9762\u6d88\u6bd2\u3002\u4ed6\u8bf4\uff0c\u8fd9\u4e00\u533a\u57df\u5185\u7684\u4efb\u4f55\u4e1c\u897f\u5728\u55b7\u53d1\u671f\u95f4\u90fd\u4f1a\u88ab\u63a9\u57cb\uff0c\u5f88\u53ef\u80fd\u4f1a\u84b8\u53d1\u3002\u514b\u8bfa\u7279\u8865\u5145\u8bf4\uff0c\u9897\u7c92\u7269\u4f1a\u963b\u585e\u5e73\u6d41\u5c42\uff0c\u5c06\u7ec6\u5c0f\u7684\u706b\u5c71\u7070\u503e\u6cfb\u5728\u6574\u4e2a\u7f8e\u56fd\uff0c\u5e76\u9010\u6e10\u8986\u76d6\u5168\u7403\u3002\n\u8fd9\u4e24\u6b21\u65b0\u53d1\u73b0\u7684\u8d85\u7ea7\u55b7\u53d1\u90fd\u53d1\u751f\u5728\u4e2d\u65b0\u4e16\uff0c\u5730\u8d28\u65f6\u95f4\u8de8\u5ea6\u4e3a2300-530\u4e07\u5e74\u524d\u3002\u514b\u8bfa\u7279\u8bf4\uff0c\u8fd9\u4e24\u6b21\u65b0\u7684\u55b7\u53d1\u4f7f\u9ec4\u77f3-\u86c7\u6cb3\u706b\u5c71\u7701\u6709\u8bb0\u5f55\u7684\u4e2d\u65b0\u4e16\u8d85\u7ea7\u55b7\u53d1\u603b\u6570\u8fbe\u52306\u6b21\u3002\u8fd9\u610f\u5473\u7740\uff0c\u9ec4\u77f3\u516c\u56ed\u5728\u4e2d\u65b0\u4e16\u671f\u95f4\u7684\u70ed\u70b9\u8d85\u7ea7\u55b7\u53d1\u7684\u590d\u53d1\u7387\u5e73\u5747\u4e3a\u6bcf50\u4e07\u5e74\u4e00\u6b21\u3002\n\u514b\u8bfa\u7279\u8bf4\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728\u8fc7\u53bb\u7684300\u4e07\u5e74\u91cc\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5728\u73b0\u5728\u7684\u9ec4\u77f3\u56fd\u5bb6\u516c\u56ed\u5df2\u7ecf\u53d1\u751f\u4e86\u4e24\u6b21\u8d85\u7ea7\u55b7\u53d1\u3002\u56e0\u6b64\uff0c\u514b\u8bfa\u7279\u8bf4\uff0c\u9ec4\u77f3\u70ed\u70b9\u4ea7\u751f\u8d85\u7ea7\u55b7\u53d1\u4e8b\u4ef6\u7684\u80fd\u529b\u4f3c\u4e4e\u4e0b\u964d\u4e86\u4e09\u500d\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u663e\u8457\u7684\u4e0b\u964d\u3002\n\u514b\u8bfa\u7279\u8bf4\uff0c\u8fd9\u4e9b\u53d1\u73b0\u5bf9\u8bc4\u4f30\u4eca\u5929\u5728\u9ec4\u77f3\u516c\u56ed\u53d1\u751f\u7684\u53e6\u4e00\u6b21\u8d85\u7ea7\u55b7\u53d1\u7684\u98ce\u9669\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\u3002\u4ed6\u8bf4\uff1a\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\uff0c\u9ec4\u77f3\u8d85\u7ea7\u55b7\u53d1\u7684\u590d\u53d1\u7387\u4f3c\u4e4e\u662f\u6bcf150\u4e07\u5e74\u4e00\u6b21\u3002\u4e0a\u4e00\u6b21\u90a3\u91cc\u7684\u8d85\u7ea7\u55b7\u53d1\u662f\u572863\u4e07\u5e74\u524d\uff0c\u8fd9\u8868\u660e\u6211\u4eec\u53ef\u80fd\u8fd8\u670990\u4e07\u5e74\u540e\u624d\u4f1a\u518d\u6b21\u53d1\u751f\u8fd9\u79cd\u89c4\u6a21\u7684\u55b7\u53d1\u3002\u4f46\u514b\u8bfa\u7279\u6025\u5fd9\u8865\u5145\u8bf4\uff0c\u8fd9\u4e00\u4f30\u8ba1\u8fdc\u8fdc\u4e0d\u51c6\u786e\uff0c\u4ed6\u5f3a\u8c03\uff0c\u7f8e\u56fd\u5730\u8d28\u8c03\u67e5\u5c40\u6b63\u5728\u5bf9\u8be5\u5730\u533a\u8fdb\u884c\u6301\u7eed\u76d1\u6d4b\uff0c\u8fd9\u662f\u5fc5\u987b\u7684\uff0c\u4efb\u4f55\u6d3b\u52a8\u589e\u52a0\u7684\u8b66\u544a\u90fd\u4f1a\u63d0\u524d\u5f88\u4e45\u53d1\u5e03\u3002\n\u8fd9\u9879\u7814\u7a76\u5efa\u7acb\u5728\u8bb8\u591a\u5176\u4ed6\u7814\u7a76\u4eba\u5458\u6570\u5341\u5e74\u8d21\u732e\u7684\u57fa\u7840\u4e0a\uff0c\u6e90\u4e8e\u4e00\u4e2a\u66f4\u5927\u7684\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u8c03\u67e5\u4e86\u5927\u9646\u4e3b\u8981\u706b\u5c71\u7701\u4efd\u7684\u751f\u4ea7\u529b\u3002\u514b\u8bfa\u7279\u8bf4\uff0c\u90a3\u4e9b\u8d85\u7ea7\u55b7\u53d1\u662f\u5730\u58f3\u5728\u957f\u65f6\u95f4\u5185\u5927\u89c4\u6a21\u878d\u5316\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u5bf9\u5b83\u4eec\u6240\u5728\u5730\u533a\u7684\u5730\u58f3\u7ed3\u6784\u548c\u7ec4\u6210\u4ea7\u751f\u4e86\u6df1\u8fdc\u7684\u5f71\u54cd\u3002\n\u7531\u4e8e\u7814\u7a76\u8fd9\u4e9b\u7701\u4efd\u5bf9\u4e8e\u7406\u89e3\u5b83\u4eec\u5728\u5851\u9020\u5730\u7403\u5730\u58f3\u8fc7\u7a0b\u4e2d\u7684\u4f5c\u7528\u81f3\u5173\u91cd\u8981\uff0c\u514b\u8bfa\u7279\u5e0c\u671b\u8fd9\u9879\u7814\u7a76\u80fd\u4e3a\u6211\u4eec\u5e26\u6765\u66f4\u591a\u542f\u793a\u3002\u4ed6\u8bf4\uff1a\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u5728\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u65b9\u6cd5\u548c\u53d1\u73b0\u80fd\u591f\u5728\u5168\u7403\u8303\u56f4\u5185\u53d1\u73b0\u66f4\u591a\u65b0\u7684\u8d85\u7ea7\u55b7\u53d1\u8bb0\u5f55\u3002\n\u8d44\u6599\u7531\u7f8e\u56fd\u5730\u8d28\u5b66\u4f1a\u63d0\u4f9b\u3002\u6ce8\u610f\uff1a\u5185\u5bb9\u53ef\u4ee5\u6839\u636e\u6837\u5f0f\u548c\u957f\u5ea6\u8fdb\u884c\u7f16\u8f91\u3002\n\u9898\u540d/\u8d23\u4efb\u8005\uff1aRobert S.Coe\uff0cSimon Tapster\uff0cDavid R.Finn\uff0cMarc K.Reichow\uff0cMichael J.Branney\uff0cThomas R.Knott\u3002\u7f8e\u56fd\u9ec4\u77f3\u70ed\u70b9\u8f68\u9053\u53d1\u73b0\u4e24\u6b21\u65b0\u7684\u8d85\u7ea7\u55b7\u53d1\uff1a\u9ec4\u77f3\u70ed\u70b9\u6b63\u5728\u6d88\u9000\u5417\uff1f\u5730\u8d28\u5b66\uff0c2020\u5e74\uff1bDOI\uff1a10.1130/G47384.1\u3002\n\u4e0b\u9762\u662f\u60a8\u53ef\u80fd\u611f\u5174\u8da3\u7684\u76f8\u5173\u6587\u7ae0\u3002\u79d1\u5b66\u65e5\u62a5\u4e0eTrendMD\u7f51\u7edc\u4e2d\u7684\u5b66\u672f\u51fa\u7248\u7269\u5171\u4eab\u94fe\u63a5\uff0c\u5e76\u6839\u636e\u9700\u8981\u4ece\u7b2c\u4e09\u65b9\u5e7f\u544a\u5546\u90a3\u91cc\u8d5a\u53d6\u6536\u5165\u3002", "note_en": "Researchers report two newly identified super-eruptions associated with the Yellowstone hotspot track, including what they believe was the volcanic province&#39;s largest and most cataclysmic event. The results indicate the hotspot, which today fuels the famous geysers, mudpots, and fumaroles in Yellowstone National Park, may be waning in intensity.\n Throughout Earth&#39;s long history, volcanic super-eruptions have been some of the most extreme events ever to affect our planet&#39;s rugged surface. Surprisingly, even though these explosions eject enormous volumes of material -- at least 1,000 times more than the 1980 eruption of Mount St. Helens -- and have the potential to alter the planet&#39;s climate, relatively few have been documented in the geologic record.\n    Now, in a study published in  Geology, researchers have announced the discovery of two newly identified super-eruptions associated with the Yellowstone hotspot track, including what they believe was the volcanic province&#39;s largest and most cataclysmic event. The results indicate the hotspot, which today fuels the famous geysers, mudpots, and fumaroles in Yellowstone National Park, may be waning in intensity.\n The team used a combination of techniques, including bulk chemistry, magnetic data, and radio-isotopic dates, to correlate volcanic deposits scattered across tens of thousands of square kilometers. &#34;We discovered that deposits previously believed to belong to multiple, smaller eruptions were in fact colossal sheets of volcanic material from two previously unknown super-eruptions at about 9.0 and 8.7 million years ago,&#34; says Thomas Knott, a volcanologist at the University of Leicester and the paper&#39;s lead author.\n &#34;The younger of the two, the Grey&#39;s Landing super-eruption, is now the largest recorded event of the entire Snake-River-Yellowstone volcanic province,&#34; says Knott. Based on the most recent collations of super-eruption sizes, he adds, &#34;It is one of the top five eruptions of all time.&#34;\n The team, which also includes researchers from the British Geological Survey and the University of California, Santa Cruz, estimates the Grey&#39;s Landing super-eruption was 30% larger than the previous record-holder (the well-known Huckleberry Ridge Tuff) and had devastating local and global effects. &#34;The Grey&#39;s Landing eruption enamelled an area the size of New Jersey in searing-hot volcanic glass that instantly sterilized the land surface,&#34; says Knott. Anything located within this region, he says, would have been buried and most likely vaporized during the eruption. &#34;Particulates would have choked the stratosphere,&#34; adds Knott, &#34;raining fine ash over the entire United States and gradually encompassing the globe.&#34;\n Both of the newly discovered super-eruptions occurred during the Miocene, the interval of geologic time spanning 23-5.3 million years ago. &#34;These two new eruptions bring the total number of recorded Miocene super-eruptions at the Yellowstone-Snake River volcanic province to six,&#34; says Knott. This means that the recurrence rate of Yellowstone hotspot super-eruptions during the Miocene was, on average, once every 500,000 years.\n By comparison, Knott says, two super-eruptions have -- so far -- taken place in what is now Yellowstone National Park during the past three million years. &#34;It therefore seems that the Yellowstone hotspot has experienced a three-fold decrease in its capacity to produce super-eruption events,&#34; says Knott. &#34;This is a very significant decline.&#34;\n These findings, says Knott, have little bearing on assessing the risk of another super-eruption occurring today in Yellowstone. &#34;We have demonstrated that the recurrence rate of Yellowstone super-eruptions appears to be once every 1.5 million years,&#34; he says. &#34;The last super-eruption there was 630,000 years ago, suggesting we may have up to 900,000 years before another eruption of this scale occurs.&#34; But this estimate, Knott hastens to add, is far from exact, and he emphasizes that continuous monitoring in the region, which is being conducted by the U.S. Geological Survey, &#34;is a must&#34; and that warnings of any uptick in activity would be issued well in advance.\n This study, which builds on decades of contributions by many other researchers, grew out of a larger project investigating the productivity of major continental volcanic provinces. Those with super-eruptions are the result of colossal degrees of crustal melting over prolonged periods of time, says Knott, and therefore have a profound impact on the structure and composition of Earth&#39;s crust in the regions where they occur.\n Because studying these provinces is vital to understanding their role in shaping our planet&#39;s crustal processes, Knott hopes this research foreshadows even more revelations. &#34;We hope the methods and findings we present in our paper will enable the discovery of more new super-eruption records around the globe,&#34; he says.\n    Materials provided by   Geological Society of America.  Note: Content may be edited for style and length.\n    Robert S. Coe, Simon Tapster, David R. Finn, Marc K. Reichow, Michael J. Branney, Thomas R. Knott.  Discovery of two new super-eruptions from the Yellowstone hotspot track (USA): Is the Yellowstone hotspot waning?  Geology, 2020; DOI:  10.1130/G47384.1\n  Below are relevant articles that may interest you. ScienceDaily shares links with scholarly publications in the  TrendMD network and earns revenue from third-party advertisers, where indicated.", "posttime": "2020-06-08 23:27:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u73b0,ancient,\u55b7\u53d1", "title": "\u53e4\u4ee3\u8d85\u7ea7\u55b7\u53d1\u7684\u53d1\u73b0\u8868\u660e\u9ec4\u77f3\u516c\u56ed\u7684\u70ed\u70b9\u53ef\u80fd\u662f", "title_en": "Discovery of ancient super-eruptions indicates the Yellowstone hotspot may be", "transed": 1, "url": "https://www.sciencedaily.com/releases/2020/06/200603132516.htm", "via": "", "real_tags": ["\u53d1\u73b0", "ancient", "\u55b7\u53d1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005710, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8d28\u6570\u662f\u5426\u50cf\u88ab\u98ce\u5439\u6765\u7684\u79cd\u5b50\u4e00\u6837\u968f\u673a\u5730\u6492\u5728\u6570\u5b57\u7ebf\u4e0a\uff1f\u5f53\u7136\u4e0d\u662f\uff1a\u8d28\u6570\u4e0d\u662f\u5076\u7136\u7684\u95ee\u9898\uff0c\u800c\u662f\u7b80\u5355\u7b97\u672f\u7684\u4ea7\u7269\u3002\u5f53\u4e14\u4ec5\u5f531\u4ee5\u5916\u7684\u6b63\u6574\u6570\u9664\u4ee5\u4e00\u4e2a\u6570\u65f6\uff0c\u8be5\u6570\u624d\u662f\u8d28\u6570\u3002\n\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u6545\u4e8b\u7684\u7ed3\u675f\u3002\u8d28\u6570\u7684\u5206\u5e03\u770b\u8d77\u6765\u662f\u968f\u673a\u7684\uff0c\u6709\u4e0d\u89c4\u5219\u7684\u95f4\u9699\u548c\u7c07\uff0c\u770b\u8d77\u6765\u76f8\u5f53\u968f\u610f\u3002\u5982\u679c\u6709\u4e00\u79cd\u6a21\u5f0f\uff0c\u90a3\u5c31\u662f\u9ad8\u6df1\u83ab\u6d4b\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7d20\u6570\u770b\u8d77\u6765\u8db3\u591f\u968f\u673a\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u4eec\u6765\u63b7\u9ab0\u5b50\u3002\u5217\u51fa\u4e00\u7cfb\u5217\u8fde\u7eed\u7684\u8d28\u6570(\u53ef\u80fd\u4ee511\uff0c13\uff0c17\uff0c19\uff0c.\u3002\u3002\u3002)\u3002\u628a\u5b83\u4eec\u51cf\u53bb\u6a217\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u628a\u6bcf\u4e2a\u7d20\u6570\u9664\u4ee57\uff0c\u53ea\u4fdd\u7559\u4f59\u6570\u3002\u7ed3\u679c\u662f\u4ece\u96c6\u5408{1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6}\u4e2d\u62bd\u53d6\u7684\u4e00\u7cfb\u5217\u6574\u6570\uff0c\u770b\u8d77\u6765\u5f88\u50cf\u91cd\u590d\u63b7\u51fa\u4e00\u4e2a\u516c\u5e73\u9ab0\u5b50\u7684\u7ed3\u679c\u3002\n$$\\BEGIN{ALIGN*}11\\bmod 7&amp\uff1b\\right tarrow 4\\qquad 47\\bmod 7\\right tarrow 5\\\\13\\bmod 7&amp\uff1b\\right tarrow 6\\qquad 53\\bmod 7\\right tarrow 4\\\\17\\bmod 7&amp\uff1b\\right tarrow 3\\qquad 59\\bmod 7\\right tarrow 3\\\\19\\bmod 7&amp\uff1b\\right tarrow 5\\qquad 61\u3002\\right tarrow 1\\qquad 71\\bmod 7\\right tarrow 1\\31\\bmod 7&amp\uff1b\\right tarrow 3\\qquad 73\\bmod 7\\right tarrow 3\\\\37\\bmod 7&amp\uff1b\\right tarrow 2\\qquad 79\\bmod 7\\right tarrow 2\\\\41\\bmod 7&amp\uff1b\\right tarrow 6\\qquad 83\\bmod 7\\right tarrow 6\\\\43\\bmod\u3002\n\u4f7f\u7528\u66f4\u5927\u7684\u6837\u672c(\u5927\u4e8e\\(10^7\\)\u7684\u524d\u4e00\u767e\u4e07\u4e2a\u7d20\u6570)\uff0c\u6211\u5df2\u7ecf\u8ba1\u7b97\u51fa6\u4e2a\u53ef\u80fd\u7684\u4f59\u6570mod 7(\u4e5f\u79f0\u4e3a6\u4e2a\u53ef\u80fd\u7684\u540c\u4f59\u7c7bmod7)\u7684\u7d20\u6570\u3002\u6211\u8fd8\u6a21\u62df\u4e86\u4e00\u767e\u4e07\u5377\u516d\u9762\u9ab0\u5b50\u3002\u770b\u8fd9\u4e24\u4e2a\u7ec3\u4e60\u7684\u7ed3\u679c\uff0c\u4f60\u80fd\u5206\u8fa8\u51fa\u54ea\u4e2a\u662f\u54ea\u4e2a\u5417\uff1f\n1 2 3 4 5 6 166\uff0c787 166\uff0c569 166\uff0c714 166\uff0c573 166\uff0c665 166\uff0c692 120-98 47-94-2 25 1 2 3 4 5 6 166\uff0c768 166\uff0c290 166\uff0c412 166\uff0c638 167\uff0c282 166\uff0c610 101-377-255-29 615-57\u3002\n\u5728\u6bcf\u4e2a\u8868\u4e2d\uff0c\u7b2c\u4e00\u884c\u8ba1\u7b97\u516d\u4e2a\u7c7b\u522b\u4e2d\u6bcf\u4e2a\u7c7b\u522b\u7684\u7ed3\u679c\u6570\\(x\\)\uff1b\u7b2c\u4e8c\u884c\u663e\u793a\u5dee\u5f02\\(x-\\bar{x}\\)\uff0c\u5176\u4e2d\\(\\bar{x}\\)\u662f\u5e73\u5747\u503c1\uff0c000\uff0c000/6=166\uff0c667\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u5b57\u4f3c\u4e4e\u5206\u5e03\u5f97\u76f8\u5f53\u5747\u5300\uff0c\u6ca1\u6709\u4efb\u4f55\u660e\u663e\u7684\u504f\u89c1\u3002\u7b2c\u4e00\u4e2a\u8868\u8868\u793a\u7d20\u6570\u5269\u4f59mod 7\uff0c\u5b83\u4eec\u7684\u5206\u5e03\u6bd4\u6a21\u62df\u9ab0\u5b50\u66f4\u5e73\u5766\uff0c\u4e0e\u5e73\u5747\u503c\u7684\u504f\u5dee\u8f83\u5c0f\uff0c\u4e24\u4e2a\u6837\u672c\u7684\u6807\u51c6\u504f\u5dee\u5206\u522b\u4e3a84\u548c346\u3002\u6839\u636e\u8fd9\u4e9b\u8868\u683c\u7684\u8bc1\u636e\uff0c\u770b\u8d77\u6765\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u90fd\u53ef\u4ee5\u63d0\u4f9b\u4e00\u573a\u968f\u610f\u7684\u9ab0\u5b50\u6e38\u620f\u6240\u9700\u7684\u968f\u673a\u6027\u3002\n\u7136\u800c\uff0c\u9664\u4e86\u786e\u4fdd\u7ed3\u679c\u5747\u5300\u5206\u5e03\u5728\u5141\u8bb8\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u968f\u673a\u6027\u3002\u7cfb\u5217\u4e2d\u7684\u5404\u4e2a\u4e8b\u4ef6\u4e5f\u5fc5\u987b\u5f7c\u6b64\u72ec\u7acb\u3002\u4e00\u6b21\u63b7\u9ab0\u5b50\u5e94\u8be5\u4e0d\u4f1a\u5f71\u54cd\u4e0b\u4e00\u6b21\u63b7\u9ab0\u5b50\u7684\u7ed3\u679c\u3002\u4f5c\u4e3a\u72ec\u7acb\u6027\u7684\u6d4b\u8bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u6210\u5bf9\u7684\u8fde\u7eed\u4e8b\u4ef6\u30021\u540e\u8ddf1\u30012\u30013\uff0c\u4ee5\u6b64\u7c7b\u63a8\u662f\u591a\u5c11\u6b21\uff1f6\u00d76\u77e9\u9635\u7528\u4e8e\u8bb0\u5f5536\u4e2a\u53ef\u80fd\u5bf9\u7684\u8ba1\u6570\u3002\u5982\u679c\u8fd9\u4e2a\u8fc7\u7a0b\u771f\u7684\u662f\u968f\u673a\u7684\uff0c\u9664\u4e86\u5c0f\u7684\u7edf\u8ba1\u6ce2\u52a8\u4e4b\u5916\uff0c\u6240\u670936\u5bf9\u90fd\u5e94\u8be5\u662f\u540c\u6837\u9891\u7e41\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635\u8f6c\u6362\u6210\u989c\u8272\u7f16\u7801\u7684\u201c\u70ed\u56fe\u201d\uff0c\u5176\u4e2d\u8ba1\u6570\u9ad8\u4e8e\u5e73\u5747\u503c\u7684\u5355\u5143\u683c\u663e\u793a\u4e3a\u7c89\u7ea2\u8272\u548c\u7ea2\u8272\u7684\u6696\u8272\u8c03\uff0c\u800c\u4f4e\u4e8e\u5e73\u5747\u503c\u7684\u5355\u5143\u683c\u663e\u793a\u4e3a\u8f83\u51b7\u7684\u84dd\u8272\u8272\u8c03\u3002(\u7ed8\u5236\u7684\u6570\u91cf\u4e0d\u662f\u5b9e\u9645\u8ba1\u6570\\(x\\)\uff0c\u800c\u662f\u5f52\u4e00\u5316\u53d8\u91cf\\(w=(x_{i\uff0c\\\uff0cj}-\\bar{x})\\\uff0c/\\\uff0c\\bar{x}\\)\uff0c\u5176\u4e2d\\(\\bar{x}\\)\u4e5f\u662f\u5e73\u5747\u503c-\u5728\u672c\u4f8b\u4e2d\u4e3a1,000,000/36=27,778\u3002)\u3002\u4ee5\u4e0b\u662f\u6a21\u62df\u5e73\u5934\u9ab0\u5b50\u7684\u70ed\u56fe\uff1a\n\u90a3\u91cc\u6ca1\u4ec0\u4e48\u4e8b\u3002\u51e0\u4e4e\u6240\u6709\u7684\u8ba1\u6570\u90fd\u975e\u5e38\u63a5\u8fd1\u5e73\u5747\u503c\uff0c\u4ee5\u81f3\u4e8e\u77e9\u9635\u5355\u5143\u663e\u793a\u4e3a\u4e2d\u6027\u7070\u8272\uff1b\u5c11\u6570\u662f\u975e\u5e38\u6de1\u7684\u7c89\u8272\u6216\u84dd\u8272\u3002\u5982\u679c\u8fde\u7eed\u7684\u63b7\u9ab0\u5b50\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u5e76\u4e14\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u90fd\u662f\u5e73\u7b49\u7684\uff0c\u8fd9\u5c31\u662f\u4f60\u6240\u671f\u671b\u7684\u3002\n\u4e95!\u3002\u6211\u60f3\u6211\u4eec\u4e0d\u518d\u662f\u5728\u5170\u591a\u59c6\u5170\u4e86\uff1b\u8fd9\u5c31\u662f\u65e7\u7684\u7070\u8272\u7535\u5f71\u53d8\u6210\u5f69\u8272\u7684\u5730\u65b9\u3002\u70ed\u56fe\u6cbf\u4e3b\u5bf9\u89d2\u7ebf(\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2)\u6709\u4e00\u6761\u84dd\u8272\u6761\u7eb9\uff0c\u8868\u793a\u5177\u6709\u76f8\u540c\u503cmod 7\u7684\u8fde\u7eed\u7d20\u6570\u5bf9\u88ab\u5f3a\u70c8\u6291\u5236\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u914d\u5bf9\\((1\uff0c1)\uff0c(2\uff0c2)\uff0c\\l\u70b9(6\uff0c6)\\)\u51fa\u73b0\u7684\u9891\u7387\u6bd4\u5b83\u4eec\u5728\u771f\u6b63\u968f\u673a\u5e8f\u5217\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u8981\u5c11\u3002\u8d85\u5bf9\u89d2\u7ebf(\u6070\u597d\u5728\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u65b9)\u662f\u6d45\u84dd\u8272\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5177\u6709(j=i+1)\u7684((i\uff0cj))\u5bf9\u7684\u9891\u7387\u7565\u4f4e\u4e8e\u5e73\u5747\u9891\u7387\uff1b\u4f8b\u5982\uff0c((2\uff0c3)\u548c((5\uff0c6)\u7684\u5f52\u4e00\u5316\u9891\u7387\u7565\u4e3a\u8d1f\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6b21\u5bf9\u89d2\u7ebf(\u5728\u4e3b\u5bf9\u89d2\u7ebf\u4e0b\u65b9)\u5168\u90e8\u662f\u7c89\u7ea2\u8272\u548c\u7ea2\u8272\u7684\uff1b\\((3\uff0c2)\\)\u6216\\((5\uff0c4)\\)\u7b49\u5177\u6709\\(j=i-1)\u7684\u914d\u5bf9\u51fa\u73b0\u7684\u9891\u7387\u9ad8\u4e8e\u5e73\u5747\u9891\u7387\u3002\u79bb\u5f00\u5bf9\u89d2\u7ebf\uff0c\u5728\u53f3\u4e0a\u89d2\u548c\u5de6\u4e0b\u89d2\uff0c\u6211\u4eec\u770b\u5230\u4e00\u4e2a\u67d4\u548c\u7684\u68cb\u76d8\u56fe\u6848\u3002\n\u5982\u679c\u4f60\u66f4\u559c\u6b22\u772f\u7740\u773c\u775b\u770b\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u5f69\u8272\u65b9\u5757\uff0c\u4e0b\u9762\u662f\u57fa\u672c\u77e9\u9635\uff1a\n\u76f8\u7ee7\u7d20\u6570\u5bf9mod 7 1 2 3 4 5 6 1 15656 24376 33891 29964 33984 28916 2 37360 15506 22004 32645 25095 33959 3 25307 41107 14823 22747 32721 30009 4 32936 26183 37129 14681 21852 33791 5 32936 32936 32936\u3002\n\u4e0e\u7edf\u4e00\u6027\u7684\u80cc\u79bb\u4e00\u70b9\u4e5f\u4e0d\u5fae\u5999\u3002\u4f8b\u5982\uff0c\u7b2c\u4e09\u884c\u663e\u793a\uff0c\u5982\u679c\u4f60\u521a\u521a\u770b\u5230\u7d20\u6570mod 7\u5e8f\u5217\u4e2d\u76843\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u6570\u5b57\u66f4\u6709\u53ef\u80fd\u662f2\uff0c\u800c\u4e0d\u662f\u53e6\u4e00\u4e2a3\u3002\u5982\u679c\u4f60\u662f\u5728\u7528\u8d28\u6570\u9ab0\u5b50\u4e0b\u6ce8\uff0c\u8fd9\u79cd\u504f\u5411\u53ef\u80fd\u4f1a\u5bf9\u7ed3\u679c\u4ea7\u751f\u5de8\u5927\u7684\u5f71\u54cd\u3002\u6700\u597d\u7684\u9ab0\u5b50\u90fd\u88ab\u64cd\u7eb5\u4e86\uff01\n\u65af\u5766\u798f\u5927\u5b66(Stanford University)\u7684\u7f57\u4f2f\u7279\u00b7J\u00b7\u83b1\u59c6\u514b\u00b7\u5965\u5229\u5f17(Robert J.Lemke Oliver)\u548c\u574e\u5357\u00b7\u7d22\u5fb7\u62c9\u626c(Kannan Soundarajan)\u53d1\u73b0\u4e86\u4e24\u5bf9\u8fde\u7eed\u8d28\u6570\u4e4b\u95f4\u7684\u8fd9\u79cd\u975e\u5e38\u5f3a\u7684\u76f8\u5173\u6027\uff0c\u4ed6\u4eec\u57283\u6708\u4efd\u53d1\u5e03\u7ed9arxiv\u7684\u9884\u5370\u672c\u4e2d\u5bf9\u6b64\u8fdb\u884c\u4e86\u8ba8\u8bba\u3002\u6211\u53d1\u73b0\u8fd9\u4e00\u53d1\u73b0\u6700\u4ee4\u6211\u60ca\u8bb6\u7684\u662f\uff0c\u5f88\u4e45\u4ee5\u524d\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u8fd9\u4e9b\u6a21\u5f0f\u3002\u4e00\u65e6\u4f60\u77e5\u9053\u5982\u4f55\u5bfb\u627e\u5b83\u4eec\uff0c\u5b83\u4eec\u80af\u5b9a\u662f\u8db3\u591f\u663e\u773c\u7684\u3002\n\u6211\u60f3\u6211\u4eec\u4e0d\u80fd\u8d23\u602a\u6b27\u51e0\u91cc\u5f97\u9519\u8fc7\u4e86\u5b83\u4eec\uff1b\u5173\u4e8e\u968f\u673a\u6027\u548c\u6982\u7387\u7684\u601d\u60f3\u5728\u53e4\u4ee3\u5e76\u6ca1\u6709\u5f88\u597d\u5730\u53d1\u5c55\u8d77\u6765\u3002\u4f46\u662f\u9ad8\u65af\u5462\uff1f\u4ed6\u662f\u7d20\u6570\u8868\u7684\u9274\u8d4f\u5bb6\uff0c\u4ed6\u7f16\u5236\u4e86\u81ea\u5df1\u7684\u6570\u5343\u4e2a\u7d20\u6570\u8868\u3002\u5728\u4ed6\u5e74\u8f7b\u7684\u65f6\u5019\uff0c\u4ed6\u5199\u9053\uff0c\u201c\u6211\u6700\u65e9\u7684\u9879\u76ee\u4e4b\u4e00\u662f\u628a\u6211\u7684\u6ce8\u610f\u529b\u8f6c\u79fb\u5230\u8d28\u6570\u9891\u7387\u7684\u4e0b\u964d\u4e0a\uff0c\u4e3a\u6b64\uff0c\u6211\u5728\u51e0\u4e2a\u8fa3\u6912\u4e2d\u6570\u4e86\u7d20\u6570\u3002\u201d\u3002\u3002.\u201c\u3002\u6b64\u5916\uff0c\u9ad8\u65af\u66f4\u5c11\u5730\u53d1\u660e\u4e86\u540c\u4f59\u7c7b\u548c\u6a21\u7b97\u672f\u7684\u601d\u60f3\u3002\u4f46\u663e\u7136\uff0c\u4ed6\u4ece\u672a\u6000\u7591\u8fc7\u5728\u4e24\u5bf9\u8fde\u7eed\u7d20\u6570\u7684\u540c\u4f59\u4e2d\u53ef\u80fd\u6f5c\u85cf\u7740\u4ec0\u4e48\u5947\u602a\u7684\u4e1c\u897f\u3002\n19\u4e16\u7eaa50\u5e74\u4ee3\uff0c\u4fc4\u56fd\u6570\u5b66\u5bb6Pafnuty Lvovich Chebyshev\u6307\u51fa\u4e86\u7d20\u6570\u4e2d\u7684\u4e00\u4e2a\u5fae\u5999\u504f\u5dee\u3002\u5c06\u5947\u7d20\u6570\u51cf\u4e3a\u6a214\u4f1a\u5c06\u5b83\u4eec\u5206\u6210\u4e24\u4e2a\u5b50\u96c6\u3002\u5e8f\u52175\u300113\u300117\u300129\u300137\u4e2d\u7684\u6240\u6709\u7d20\u6570\u3002\u3002\u3002\u4e0e1mod4\u540c\u4f59\uff1b\u5e8f\u52173\u30017\u300111\u300119\u300123\u300131\u3001.\u3002\u3002\u3002\u5207\u6bd4\u96ea\u592b\u89c2\u5bdf\u5230\u540e\u4e00\u7c7b\u7d20\u6570\u4f3c\u4e4e\u66f4\u4e3a\u4e30\u5bcc\u3002\u4f8b\u5982\uff0c\u5728\u524d\u4e00\u4e07\u4e2a\u5947\u7d20\u6570\u4e2d\uff0c\u67094943\u4e2a\u7d20\u6570\u4e0e1\u4e00\u81f4\uff0c5057\u4e2a\u4e0e3\u7d20\u6570\u76f8\u540c\u3002\u7136\u800c\uff0c\u4e0e\u8fde\u7eed\u4e24\u4e2a\u7d20\u6570\u5bf9\u7684\u5dee\u5f02\u76f8\u6bd4\uff0c\u8fd9\u79cd\u5f71\u54cd\u5fae\u4e4e\u5176\u5fae\u3002\n\u5728\u73b0\u4ee3\uff0c\u5c11\u6570\u4f5c\u8005\u62a5\u544a\u4e86\u8fde\u7eed\u7d20\u6570\u73b0\u8c61\u7684\u4e00\u77a5\uff1bLemke\u3001Oliver\u548cSoundarajan\u63d0\u5230\u4e86\u4e09\u6b21\u8fd9\u6837\u7684\u76ee\u51fb\u4e8b\u4ef6\u3002(\u8bf7\u53c2\u9605\u672c\u6587\u672b\u5c3e\u7684\u53c2\u8003\u8d44\u6599\u3002)\u3002\u572820\u4e16\u7eaa\u4e94\u516d\u5341\u5e74\u4ee3\uff0c\u65af\u5766\u5c3c\u65af\u74e6\u592b\u00b7\u514b\u7eb3\u6ce2\u592b\u65af\u57fa(Stanislaw Knapowski)\u548c\u4fdd\u7f57\u00b7\u56fe\u5170(Paul Tur\u00e1n)\u7814\u7a76\u4e86\u7d20\u4f59\u6570modm\u7684\u5404\u4e2a\u65b9\u9762\uff1b\u57281977\u5e74\u53d1\u8868\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\uff0c\u4ed6\u4eec\u8ba8\u8bba\u4e86\u5269\u4f59\u6570\u4e3a1\u62163\u7684\u8fde\u7eed\u7d20\u6570mod 4\u3002\u4ed6\u4eec\u201c\u731c\u6d4b\u201d\uff0c\u5177\u6709\u76f8\u540c\u5269\u4f59\u6570\u7684\u8fde\u7eed\u7d20\u6570\u5bf9\u548c\u5177\u6709\u4e0d\u540c\u5269\u4f59\u6570\u7684\u8fde\u7eed\u7d20\u6570\u5bf9\u201c\u6982\u7387\u4e0d\u76f8\u7b49\u201d\u30022002\u5e74\uff0c\u9ad8\u5fe0\u660e\u7814\u7a76\u4e86\u8fde\u7eed\u7d20\u6570\u5e8f\u5217(\u800c\u4e0d\u4ec5\u4ec5\u662f\u6210\u5bf9\u7684\u7d20\u6570)\uff0c\u5e76\u6839\u636e\u5b83\u4eec\u7684\u4e0d\u540c\u9891\u7387\u6784\u5efa\u4e86\u7cbe\u7ec6\u7684\u5206\u5f62\u56fe\u6848\u3002\u7136\u540e\u57282011\u5e74\uff0cAvner Ash\u548c\u4ed6\u7684\u540c\u4e8b\u53d1\u8868\u4e86\u4e00\u9879\u5bf9\u201c\u8fde\u7eed\u8d28\u6570\u6b8b\u57fa\u5bf9\u7684\u9891\u7387\u201d\u7684\u6269\u5c55\u5206\u6790\uff0c\u5176\u4e2d\u5305\u62ec\u4e00\u4e9b\u77e9\u9635\uff0c\u5728\u8fd9\u4e9b\u77e9\u9635\u4e2d\uff0c\u5bf9\u89d2\u7ebf\u51f9\u9677\u660e\u663e\u3002\n\u9274\u4e8e\u8fd9\u4e9b\u5148\u4f8b\uff0cLemke Oliver\u548cSoundarajan\u771f\u7684\u662f\u8fde\u7eed\u4e3b\u5173\u8054\u7684\u53d1\u73b0\u8005\u5417\uff1f\u5728\u6211\u770b\u6765\uff0c\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u867d\u7136\u5176\u4ed6\u4eba\u53ef\u80fd\u4ee5\u524d\u89c1\u8fc7\u8fd9\u4e9b\u6a21\u5f0f\uff0c\u4f46\u4ed6\u4eec\u5e76\u6ca1\u6709\u4ee5\u6570\u5b66\u754c\u610f\u8bc6\u5230\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\u5b83\u4eec\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f53Lemke Oliver\u548cSoundarajan\u5ba3\u5e03\u4ed6\u4eec\u7684\u53d1\u73b0\u65f6\uff0c\u4eba\u4eec\u7684\u53cd\u5e94\u4ee4\u4eba\u60ca\u8bb6\uff0c\u8fd1\u4e4e\u6000\u7591\u3002\u57c3\u91cc\u5361\u00b7\u514b\u62c9\u91cc\u5947(Erica Klarreich)\u5728\u201c\u5e7f\u8fbe\u201d(Quanta)\u4e0a\u64b0\u6587\u5f15\u7528\u4e86\u725b\u6d25\u5927\u5b66\u6570\u5b57\u7406\u8bba\u5bb6\u8a79\u59c6\u65af\u00b7\u6885\u7eb3\u5fb7(James Maynard)\u7684\u53cd\u5e94\uff1a\n\u5f53Soundarajan\u7b2c\u4e00\u6b21\u544a\u8bc9\u6885\u7eb3\u5fb7\u8fd9\u5bf9\u592b\u5987\u7684\u53d1\u73b0\u65f6\uff0c\u6885\u7eb3\u5fb7\u8bf4\uff1a\u201c\u6211\u53ea\u6709\u4e00\u534a\u76f8\u4fe1\u4ed6\u3002\u201d\u201c\u6211\u4e00\u56de\u5230\u529e\u516c\u5ba4\uff0c\u5c31\u4eb2\u81ea\u505a\u4e86\u4e00\u4e2a\u6570\u503c\u5b9e\u9a8c\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\u3002\u201d\n\u663e\u7136\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u53cd\u5e94\u3002\u4f0a\u592b\u6797\u00b7\u5170\u59c6\u5728\u201c\u81ea\u7136\u201d\u6742\u5fd7\u4e0a\u64b0\u6587\uff0c\u5f15\u7528Soundarajan\u7684\u8bdd\u8bf4\uff1a\u201c\u6211\u4eec\u544a\u8bc9\u8fc7\u7684\u6bcf\u4e00\u4e2a\u4eba\u6700\u7ec8\u90fd\u4f1a\u7f16\u5199\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u7a0b\u5e8f\u6765\u81ea\u5df1\u68c0\u67e5\u3002\u201d\n\u55ef\uff0c\u6211\u4e5f\u662f\uff01\u5728\u8fc7\u53bb\u7684\u51e0\u5468\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u94bb\u7814\u5927\u91cf\u7684\u4ee3\u7801\u6765\u5206\u6790\u7d20\u6570mod m\u3002\u4e0b\u9762\u662f\u6211\u8bd5\u56fe\u7406\u89e3\u8fd9\u4e9b\u6a21\u5f0f\u4ece\u4f55\u800c\u6765\u7684\u8bb0\u5f55\u3002\u6211\u7684\u65b9\u6cd5\u66f4\u591a\u7684\u662f\u8ba1\u7b97\u548c\u89c6\u89c9\uff0c\u800c\u4e0d\u662f\u6570\u5b66\uff1b\u6211\u4e0d\u80fd\u8bc1\u660e\u4efb\u4f55\u4e8b\u60c5\u3002Lemke\u3001Oliver\u548cSoundararajan\u91c7\u7528\u4e86\u66f4\u4e25\u683c\u548c\u66f4\u5177\u5206\u6790\u6027\u7684\u65b9\u6cd5\uff1b\u6211\u5c06\u5728\u672c\u6587\u672b\u5c3e\u66f4\u591a\u5730\u4ecb\u7ecd\u4ed6\u4eec\u7684\u7ed3\u679c\u3002\n\u5982\u679c\u60a8\u60f3\u53d1\u8d77\u60a8\u81ea\u5df1\u7684\u8c03\u67e5\uff0c\u6b22\u8fce\u60a8\u4f7f\u7528\u6211\u7684\u4ee3\u7801\u4f5c\u4e3a\u8d77\u70b9\u3002\u5b83\u662f\u7528Julia\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u6253\u5305\u5728Jupyter\u7b14\u8bb0\u672c\u4e2d\uff0c\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002(\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u6211\u4e0e\u6731\u8389\u5a05\u7684\u7b2c\u4e00\u6b21\u4e0d\u5e73\u51e1\u7684\u5b9e\u9a8c\u3002(\u6211\u5c06\u5728\u7a0d\u540e\u7684\u5e16\u5b50\u4e2d\u66f4\u591a\u5730\u4ecb\u7ecd\u6211\u4f7f\u7528\u8be5\u8bed\u8a00\u7684\u7ecf\u9a8c\u3002)\u3002\n\u4e0a\u9762\u7ed9\u51fa\u7684\u6240\u6709\u4f8b\u5b50\u90fd\u6d89\u53ca\u53d6\u6a217\u7684\u7d20\u6570\uff0c\u4f46\u8fd9\u91cc\u7684\u6570\u5b577\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\u3002\u6211\u4e4b\u6240\u4ee5\u9009\u62e9\u5b83\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u516d\u4e2a\u53ef\u80fd\u7684\u4f59\u6570{1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6}\u4e0e\u666e\u901a\u7acb\u65b9\u4f53\u9ab0\u5b50\u7684\u9762\u76f8\u5339\u914d\u3002\u5176\u4ed6\u6a21\u7ed9\u51fa\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002Lemke Oliver\u548cSoundararajan\u4f7f\u7528\u6a213\u7d20\u6570\u8fdb\u884c\u4e86\u5927\u91cf\u5206\u6790\uff0c\u5176\u4e2d\u53ea\u6709\u4e24\u4e2a\u540c\u4f59\u7c7b\uff1a\u5927\u4e8e3\u7684\u7d20\u6570\u5728\u88ab3\u6574\u9664\u65f6\u5fc5\u987b\u7559\u4e0b1\u62162\u7684\u4f59\u6570\u3002\u8fd9\u662f\\(10^7)\u4ee5\u4e0a\u7684\u524d\u4e00\u767e\u4e07\u4e2a\u7d20\u6570\u7684\u5bf9\u8ba1\u6570\u77e9\u9635\uff1a\n\u8be5\u6a21\u5f0f\u76f8\u5f53\u7b80\u7ea6\uff0c\u4f46\u4ecd\u7136\u53ef\u8bc6\u522b\uff1a\u5e8f\u5217\\((1\uff0c2)\\)\u548c\\((2\uff0c1)\\)\u7684\u975e\u5bf9\u89d2\u7ebf\u6761\u76ee\u6bd4\u5e8f\u5217\\((1\uff0c1)\\)\u548c\\((2\uff0c2)\\)\u7684\u5bf9\u89d2\u4e0a\u6761\u76ee\u5927\u3002\n\u6a21\u4e3a10\u7684\u7d20\u6570\u6709\u56db\u4e2a\u540c\u4f59\u7c7b\uff1a1\uff0c3\uff0c7\uff0c9\u3002\u4f7f\u7528\u5341\u8fdb\u5236\u8bb0\u6570\u6cd5\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u7b97\u672f\u5c31\u80fd\u770b\u5230\u8fd9\u4e00\u70b9\u3002\u5f53\u4ee510\u4e3a\u57fa\u6570\u4e66\u5199\u6570\u5b57\u65f6\uff0c\u6bcf\u4e2a\u5927\u4e8e5\u7684\u7d20\u6570\u90fd\u6709\u4e00\u4e2a\u5c3e\u6570\u4f4d1\u30013\u30017\u62169\u3002\u4ee5\u4e0b\u662f16\u5bf9\u8fde\u7eed\u5c3e\u6570\u4f4d\u7684\u9891\u7387\u8ba1\u6570\uff1a\n1 3 7 9 1 43811 76342 78170 51644 3 58922 41148 71824 78049 7 64070 68542 40971 76444 9 83164 63911 59063 43924\u3002\n\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u7684\u84dd\u8272\u6761\u7eb9\u6e05\u6670\u53ef\u89c1\uff0c\u5c3d\u7ba1\u77e9\u9635\u4e2d\u5176\u4ed6\u5730\u65b9\u7684\u56fe\u6848\u6709\u4e9b\u67d4\u548c\u548c\u6a21\u7cca\u3002\n\u6211\u53d1\u73b0\uff0c\u5f53\u6a21\u6570\u672c\u8eab\u662f\u7d20\u6570\u65f6\uff0c\u8fde\u7eed\u7d20\u6570\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u8868\u73b0\u5f97\u6700\u660e\u663e\uff0c\u800c\u4e14\u4e5f\u4e0d\u662f\u592a\u5c0f\u3002\u770b\u770b\u8fde\u7eed\u7d20\u6570mod 13\u548cmod 17\u7684\u70ed\u56fe\uff1a\n\u8fd9\u4e9b\u53ef\u4ee5\u505a\u88ab\u5b50\u6216\u74f7\u7816\u5730\u677f\u7684\u5f88\u597d\u7684\u56fe\u6848\uff0c\u4e0d\u662f\u5417\uff1f\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u6709\u8da3\u7684\u89c4\u5f8b\u53ef\u89c1\u3002\u4e0d\u4ec5\u5728\u4e3b\u89d2\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u800c\u4e14\u5728\u6574\u4e2a\u77e9\u9635\u4e0a\uff0c\u5bf9\u89d2\u7ebf\u6761\u7eb9\u90fd\u5f88\u7a81\u51fa\u3002\u8fd9\u4e9b\u6761\u7eb9\u8fd8\u4f1a\u751f\u6210\u4e00\u4e2a\u68cb\u76d8\u56fe\u6848\uff1b\u6cbf\u7740\u4efb\u4f55\u884c\u6216\u5217\uff0c\u5355\u5143\u683c\u5f80\u5f80\u4f1a\u5728\u7ea2\u8272\u548c\u84dd\u8272\u4e4b\u95f4\u4ea4\u66ff\u3002\u4e00\u4e2a\u66f4\u5fae\u5999\u7684\u7279\u5f81\u662f\u5bf9\u89d2\u7ebf(\u4ece\u5de6\u4e0b\u89d2\u5230\u53f3\u4e0a\u89d2)\u7684\u8fd1\u4f3c\u4e24\u4fa7\u5bf9\u79f0\u3002\u5982\u679c\u4f60\u6cbf\u7740\u8fd9\u6761\u7ebf\u6298\u53e0\u6b63\u65b9\u5f62\uff0c\u805a\u96c6\u5728\u4e00\u8d77\u7684\u5355\u5143\u683c\u5728\u989c\u8272\u4e0a\u4f1a\u975e\u5e38\u5339\u914d\u3002(\u8fd9\u662fAsh\u548c\u4ed6\u7684\u5408\u8457\u8005\u6ce8\u610f\u5230\u7684\u4e8b\u5b9e\u3002)\u3002\n\u4f5c\u4e3a\u8fdb\u4e00\u6b65\u5206\u6790\u7684\u91cd\u70b9\uff0c\u6211\u51b3\u5b9a\u67e5\u770b\u8fde\u7eed\u7d20\u6570mod 19\uff0c\u8be5\u6a21\u6570\u5927\u5230\u8db3\u4ee5\u4ea7\u751f\u6e05\u6670\u7684\u533a\u5206\u6761\u7eb9\uff0c\u4f46\u53c8\u4e0d\u4f1a\u5927\u5230\u4f7f\u77e9\u9635\u4e0d\u597d\u770b\u3002\n\u5982\u4f55\u7406\u89e3\u6211\u4eec\u6240\u770b\u5230\u7684\uff1f\u8d77\u59cb\u70b9\u662f\u89c2\u5bdf\u5230\u6211\u4eec\u6837\u672c\u4e2d\u7684\u6240\u6709\u7d20\u6570\u90fd\u662f\u5947\u6570\uff0c\u56e0\u6b64\u8fd9\u4e9b\u7d20\u6570\u4e4b\u95f4\u7684\u6240\u6709\u95f4\u9694\u90fd\u662f\u5076\u6570\u3002\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7d20\u6570\\(p\\)\uff0c\u4e0b\u4e00\u4e2a\u7d20\u6570\u5019\u9009\u8005\u662f\\(p+2\uff0cp+4\uff0cp+6\uff0c\\ldots\\)\u3002\u8fd9\u4f1a\u4e0d\u4f1a\u548c\u68cb\u76d8\u56fe\u6848\u6709\u5173\uff1f\u5982\u679c\u7d20\u6570\u4e4b\u95f4\u7684\u6b65\u957f\u5fc5\u987b\u662f2\u7684\u500d\u6570\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u5728\u7ed9\u5b9a\u5217\u6216\u884c\u4e2d\u7684\u6bcf\u4e24\u4e2a\u5355\u5143\u683c\u4e4b\u95f4\u521b\u5efa\u76f8\u5173\u6027\u3002(\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6a21\u6570\u4e3a\u5076\u6570\uff0c\u5219\u6bcf\u9694\u4e00\u4e2a\u5355\u5143\u683c\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u5c06\u975e\u5e38\u660e\u663e-\u6240\u6709\u5076\u6570\u7f16\u53f7\u7684\u6761\u76ee\u90fd\u5c06\u6070\u597d\u4e3a\u96f6\u3002\u53ea\u6709\u901a\u8fc7\u5728\u5947\u6570\u8fb9\u754c\u5904\u201c\u7f20\u7ed5\u201d\u77e9\u9635\u7684\u8fb9\u7f18\uff0c\u624d\u80fd\u586b\u5145\u4efb\u4f55\u5076\u6570\u7f16\u53f7\u7684\u5355\u5143\u683c\u3002)\u3002\n\u77e9\u9635\u4e2d\u7684\u5bf9\u89d2\u6761\u7eb9\u8868\u660e\u7531\u4e00\u5b9a\u6570\u503c\u95f4\u9694\u5206\u9694\u7684\u6240\u6709\u7d20\u6570\u5bf9\u4e4b\u95f4\u6709\u5f88\u5f3a\u7684\u76f8\u5173\u6027\u3002\u4f8b\u5982\uff0c\u6700\u6df1\u7684\u84dd\u8272\u5bf9\u89d2\u7ebf\u548c\u6700\u4eae\u7684\u7ea2\u8272\u5bf9\u89d2\u7ebf\u662f\u7531\u6cbfj\u8f74\u76f8\u96946\u4e2a\u4f4d\u7f6e\u7684\u5355\u5143\u683c\u5f62\u6210\u7684\u3002\u7b2c\u4e00\u884c\u662f\u5355\u5143\u683c1\u548c7\uff0c\u7136\u540e\u662f2\u548c8\u30013\u548c9\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6211\u7a81\u7136\u60f3\u5230\uff0c\u5982\u679c\u6211\u80fd\u201c\u626d\u66f2\u201d\u77e9\u9635\uff0c\u8ba9\u5bf9\u89d2\u7ebf\u53d8\u6210\u5217\uff0c\u8fd9\u79cd\u5173\u7cfb\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u5176\u601d\u60f3\u662f\u5bf9\u6bcf\u4e00\u884c\u5e94\u7528\u5faa\u73af\u79fb\u4f4d\uff1b\u8be5\u884c\u4e2d\u7684\u6240\u6709\u503c\u90fd\u5411\u5de6\u6ed1\u52a8\uff0c\u800c\u4ece\u5de6\u8fb9\u7f18\u6389\u4e0b\u7684\u503c\u91cd\u65b0\u63d2\u5165\u5230\u53f3\u8fb9\u3002\u7b2c\u4e00\u884c\u79fb\u4f4d\u96f6\u4e2a\u4f4d\u7f6e\uff0c\u4e0b\u4e00\u884c\u79fb\u4f4d\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002(\u8fd9\u4e2a\u8f6c\u6362\u6709\u540d\u5b57\u5417\uff1f\u6211\u53ea\u662f\u8bf4\u8fd9\u662f\u4e00\u79cd\u8f6c\u6298\u3002)\u3002\n\u5f53\u6211\u7f16\u5199\u5e94\u7528\u6b64\u8f6c\u6362\u7684\u4ee3\u7801\u65f6\uff0c\u7ed3\u679c\u4e0e\u6211\u9884\u671f\u7684\u4e0d\u592a\u4e00\u6837\uff1a\n\u6cbf\u5bf9\u89d2\u7ebf\u7684\u90a3\u4e9b\u4e4b\u5b57\u5f62\u662f\u4ec0\u4e48\uff1f\u6211\u731c\u6211\u4e00\u5b9a\u662f\u51fa\u4e86\u5dee\u9519\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5c31\u662f\u95ee\u9898\u7684\u672c\u8d28\uff0c\u5c3d\u7ba1\u95ee\u9898\u51fa\u5728\u6570\u636e\u4e0a\uff0c\u800c\u4e0d\u662f\u7b97\u6cd5\u4e0a\u3002\u6211\u5728\u4e0a\u9762\u6240\u6709\u56fe\u4e2d\u663e\u793a\u7684\u77e9\u9635\u53ea\u662f\u90e8\u5206\u7684\uff1b\u5b83\u4eec\u6291\u5236\u4e86\u7a7a\u7684\u540c\u4f59\u7c7b\u3002\u7279\u522b\u5730\uff0c\u6a21\u6570\u4e3a19\u7684\u7d20\u6570\u5bf9\u7684\u77e9\u9635\u5ffd\u7565\u4e86\u4e0e0\u6a21\u657019\u76f8\u540c\u7684\u6240\u6709\u7d20\u6570-\u57fa\u4e8e\u542c\u8d77\u6765\u5408\u7406\u7684\u7406\u7531\uff0c\u5373\u6ca1\u6709\u8fd9\u6837\u7684\u7d20\u6570\u3002\u6bd5\u7adf\uff0c\u5982\u679c\\(p&gt\uff1b19\\)\u548c\\(p\\equv 0\\bmod 19\\)\uff0c\u5219\\(p\\)\u4e0d\u662f\u7d20\u6570\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u88ab19\u6574\u9664\u3002\u7136\u800c\uff0c\\(p&gt\uff1b0\\bmod 19\\)\u7684\u4e00\u884c\u548c\u4e00\u5217\u786e\u5b9e\u662f\u77e9\u9635\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u5c06\u5b83\u4eec\u5305\u62ec\u5728\u5185\uff0c\u989c\u8272\u7f16\u7801\u7684\u753b\u9762\u5982\u4e0b\u6240\u793a\uff1a\n\u96f6\u884c\u548c\u96f6\u5217\u7684\u5b58\u5728\u4f7f\u5f97\u626d\u66f2\u53d8\u6362\u7684\u5b9a\u4e49\u66f4\u52a0\u6574\u6d01\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u884c\\(i\\)\uff0c\u5e94\u7528\\(i\\)\u4f4d\u7684\u5411\u5de6\u5faa\u73af\u79fb\u4f4d\u3002\u7531\u6b64\u4ea7\u751f\u7684\u626d\u66f2\u77e9\u9635\u4e5f\u66f4\u52a0\u6574\u6d01\uff1a\n\u8fd9\u4e9b\u5782\u76f4\u6761\u7eb9\u544a\u8bc9\u6211\u4eec\u4ec0\u4e48\uff1f\u5728\u539f\u59cb\u77e9\u9635\u4e2d\uff0c\u6761\u76ee\\(i\uff0cj\\)\u8868\u793a\\(i\\bmod 19\\)\u540e\u8ddf\\(j\\bmod 19\\)\u7684\u9891\u7387\u3002\u8fd9\u91cc\uff0c\u5355\u5143\u683c\\(i\uff0cj\\)\u4e2d\u7684\u989c\u8272\u8868\u793a\\(i\\bmod 19\\)\u540e\u8ddf\\((i+j)\\bmod 19\\)\u7684\u9891\u7387\u3002\u6362\u8a00\u4e4b\uff0c\u6bcf\u5217\u5c06\u4e24\u4e2a\u7d20\u6570\u4e4b\u95f4\u5177\u6709\u76f8\u540c\u95f4\u9694mod 19\u7684\u6761\u76ee\u805a\u96c6\u5728\u4e00\u8d77\u3002\u4f8b\u5982\uff0c\u6700\u5de6\u8fb9\u7684\u5217\u5305\u62ec\u7531\u957f\u5ea6\u4e3a\\(0\\bmod 19\\)\u7684\u95f4\u9694\u5206\u9694\u7684\u6240\u6709\u5bf9\uff0c\u800c\u4f4d\u4e8e\\(j=6\\)\u5904\u7684\u9c9c\u7ea2\u8272\u5217\u8ba1\u6570\u8fde\u7eed\u7d20\u6570\u88ab\\(6\\bmod 19\\)\u5206\u9694\u7684\u6240\u6709\u60c5\u51b5\u3002\n\u989c\u8272\u7f16\u7801\u7ed9\u4eba\u4ee5\u6216\u591a\u6216\u5c11\u53ef\u4ee5\u770b\u5230\u7684\u95f4\u9694\u7684\u5b9a\u6027\u5370\u8c61\u3002\u5bf9\u4e8e\u66f4\u7cbe\u786e\u7684\u5b9a\u91cf\u5ea6\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u6cbf\u5217\u6c42\u548c\uff0c\u5e76\u5728\u6761\u5f62\u56fe\u4e2d\u663e\u793a\u5408\u8ba1\uff1a\n\u4e0a\u9762\u63d0\u5230\u7684\u5947\u5076\u5dee\u5f02\u5728\u8fd9\u5f20\u56fe\u4e2d\u4e5f\u6e05\u6670\u53ef\u89c1\u3002\u9664\u4e860\u4e4b\u5916\uff0c\u6bcf\u4e2a\u5076\u6570\u95f4\u9694\u90fd\u6bd4\u5b83\u7684\u5947\u6570\u90bb\u5c45\u7a81\u51fa\u3002\n6/19\u7684\u7d20\u6570\u95f4\u9694\u662f\u6240\u6709\u95f4\u9694\u4e2d\u6700\u53d7\u6b22\u8fce\u7684\u30026\u7684\u500d\u6570(\u537312\u548c18)\u4e5f\u5f88\u53d7\u6b22\u8fce\uff0c\u4f46\u4e0d\u592a\u53d7\u6b22\u8fce\u3002\n\u533a\u95f40/19\u975e\u5e38\u4e0d\u53d7\u6b22\u8fce\u3002\u8fd9\u4e9b\u662f\u6cbf\u7740\u539f\u59cb\u77e9\u9635\u7684\u4e3b\u5bf9\u89d2\u7ebf\u7684\u6761\u76ee\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u603b\u548c\u504f\u4f4e\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\uff0c\u4f46\u662f\u8d64\u5b57\u6bd4\u6211\u9884\u60f3\u7684\u8981\u6df1\u3002\n\u6211\u60f3\u4e86\u89e3\u8fd9\u4e9b\u56fe\u6848\u7684\u8d77\u6e90\u3002\u662f\u4ec0\u4e48\u4f7f\u5f97\u533a\u95f46\u5982\u6b64\u5438\u5f15\u4e00\u5bf9\u8fde\u7eed\u7684\u7d20\u6570\u5462\uff1f\u4e3a\u4ec0\u4e48\u51e0\u4e4e\u6240\u6709\u7684\u7d20\u6570\u90fd\u907f\u5f00\u4e86\u5dee\u7684\u533a\u95f40\u5462\uff1f\n\u5bf9\u4e8e6\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\uff0c\u6211\u5df2\u7ecf\u7565\u77e5\u4e00\u4e8c\u300220\u4e16\u7eaa90\u5e74\u4ee3\uff0c\u5b89\u5fb7\u9c81\u00b7\u5965\u5fb7\u5229\u5179\u79d1(Andrew Odlyzko)\u3001\u8fc8\u514b\u5c14\u00b7\u9c81\u5bbe\u65af\u5766(Michael Rubinstein)\u548c\u9a6c\u96f7\u514b\u00b7\u6c83\u5c14\u592b(Marek Wolf)\u5bf9\u4e3b\u8981\u7684\u201c\u8df3\u8dc3\u51a0\u519b\u201d\n\u5982\u679c\u6574\u6570D\u662f\u67d0\u4e2ax\u7684\u8fde\u7eed\u7d20\u6570\u2264x\u4e4b\u95f4\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5dee\uff0c\u5219\u79f0\u5176\u4e3a\u8df3\u8dc3\u51a0\u519b\u3002\n\u5728\u6700\u5c0f\u7684\u7d20\u6570(x\u5c0f\u4e8e\u7ea6600)\u4e2d\uff0c\u8df3\u8dc3\u51a0\u519b\u901a\u5e38\u662f2\uff0c\u4f46\u4e4b\u540e6\u4f1a\u63a5\u624b\u5e76\u5728\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u6570\u5b57\u7ebf\u4e0a\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002\u5728\\(x=10^{35}\\)\u9644\u8fd1\u7684\u67d0\u4e2a\u5730\u65b9\uff0c6\u5c06\u51a0\u519b\u8ba9\u7ed930\uff0c\u6700\u7ec8\u8ba9\u4f4d\u7ed9210\u3002Odlyzko\u7b49\u4eba\u3002\u4f30\u8ba1\u540e\u4e00\u4e2a\u8f6c\u53d8\u53d1\u751f\u5728\\(x=10^{425}\\)\u9644\u8fd1\u3002\u8fd9\u4e2a\u8df3\u8dc3\u51a0\u519b\u5e8f\u5217\u4e2d\u7684\u6570\u5b57-2\uff0c6\uff0c30,210\uff0c\u3002\u3002\u3002-\u662f\u7d20\u6570\uff1b\u7b2cn\u4e2a\u7d20\u6570\u662f\u524dn\u4e2a\u7d20\u6570\u7684\u4e58\u79ef\u3002\n\u4e3a\u4ec0\u4e48\u7d20\u6570\u5e94\u8be5\u662f\u8fde\u7eed\u7d20\u6570\u4e4b\u95f4\u6700\u53d7\u6b22\u8fce\u7684\u95f4\u9694\u5462\uff1f\u5982\u679cp\u662f\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570\uff0c\u5219p+2\u4e0d\u80fd\u88ab2\u6574\u9664\uff0cp+6\u4e0d\u80fd\u88ab2\u62163\u6574\u9664\uff0cp+30\u4e0d\u80fd\u88ab2\u30013\u62165\u6574\u9664\uff0c\u5e76\u4e14\u4e00\u822c\u4e0d\u80fd\u88ab\u524dn\u4e2a\u7d20\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6574\u9664\uff0c\u5176\u4e2dP_(n})\u662f\u7b2cn\u4e2a\u7d20\u6570\uff0c\u5219p+P_(n})\u4e0d\u80fd\u88ab\u524dn\u4e2a\u7d20\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6574\u9664\u3002\u5982\u679cp\u662f\u8db3\u591f\u5927\u7684\u7d20\u6570\uff0c\u5219p+2\u4e0d\u80fd\u88ab2\u62163\u6574\u9664\uff0cp+30\u4e0d\u80fd\u88ab2\u30013\u62165\u6574\u9664\uff0c\u5e76\u4e14\u4e00\u822c\u4e0d\u80fd\u88ab\u524dn\u4e2a\u7d20\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6574\u9664\u3002\u5f53\u7136\uff0c\\(p+P_(n})\\)\u4ecd\u7136\u53ef\u80fd\u88ab\u67d0\u4e2a\u8f83\u5927\u7684\u7d20\u6570\u6574\u9664\uff0c\u6216\u8005\u5728\\(p\\)\u548c\\(p+P_{n}\\)\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u53e6\u4e00\u4e2a\u7d20\u6570\uff0c\u56e0\u6b64\u4e0d\u80fd\u4fdd\u8bc1\u7d20\u6570\u533a\u95f4\u662f\u539f\u6570\u3002\u4f46\u8fd9\u4e9b\u95f4\u9694\u671f\u6bd4\u5176\u4ed6\u7ade\u4e89\u8005\u66f4\u6709\u4f18\u52bf\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u83b7\u53d6\u4e00\u767e\u4e07\u4e2a\u516b\u4f4d\u7d20\u6570\u5217\u8868\u4e2d\u8fde\u7eed\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u7136\u540e\u7ed8\u5236\u5b83\u4eec\u7684\u9891\u7387\u56fe\u6765\u770b\u5230\u8fd9\u4e00\u63a8\u7406\u7684\u5b9e\u9645\u6548\u679c\uff1a\n\u540c\u6837\uff0c\u533a\u95f46\u662f\u660e\u663e\u7a81\u51fa\u7684\uff0c\u5360\u603b\u6570\u768413.7%\uff1b6\u7684\u8f83\u9ad8\u500d\u6570\u4e5f\u9ad8\u4e8e\u5b83\u4eec\u7684\u8fd1\u90bb\u3002\u6ce8\u610f\u5206\u5e03\u7684\u6574\u4f53\u5f62\u72b6\uff1a\u5de6\u8fb9\u6709\u4e00\u4e2a\u80bf\u5757(\u5cf0\u503c\u57286)\uff0c\u7136\u540e\u662f\u7a33\u5b9a\u7684\u4e0b\u964d\u3002\u8fd9\u4e2a\u8d8b\u52bf\u770b\u8d77\u6765\u6709\u70b9\u50cf\u6cca\u677e\u5206\u5e03\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u88ab\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u63cf\u8ff0\u3002\n\u914d\u8272\u65b9\u6848\u5c06\u6570\u636e\u96c6\u5206\u6210\u82e5\u5e72\u90e8\u5206\uff0c\u6bcf\u90e8\u520619\u4e2a\u503c\u3002\u84dd\u8272\u90e8\u5206\uff0c\u5305\u62ec\u957f\u5ea6\u4e3a0\u523018\u7684\u7d20\u6570\u95f4\u95f4\u9694\uff0c\u5360100\u4e07\u7d20\u6570\u6837\u672c\u4e2d\u6240\u6709\u95f4\u9694\u768468%\uff1b\u9ec4\u91d1\u90e8\u5206\u53c8\u589e\u52a0\u4e8623%\u3002\u5269\u4e0b\u76849%\u5206\u5e03\u5e7f\u6cdb\u800c\u7a00\u758f\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u95f4\u9694\u90fd\u663e\u793a\u5728\u56fe\u4e2d\uff1b\u9891\u8c31\u5ef6\u4f38\u5230210\u3002(\u6837\u672c\u4e2d\u7684\u4e00\u5bf9\u8fde\u7eed\u7d20\u6570\u7684\u95f4\u9694\u4e3a210\uff0c\u537320,831,323\u548c20,831,533\u3002)\u3002\n\u56fe13\u4f3c\u4e4e\u63ed\u793a\u4e86\u8bb8\u591a\u5173\u4e8e\u8fde\u7eed\u7d20\u6570mod 19\u7684\u6a21\u5f0f\u3002\u6211\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u91cd\u65b0\u6392\u5217\u4f7f\u8be5\u56fe\u66f4\u5177\u4fe1\u606f\u6027\u3002\u5c06\u6bcf19\u4e2a\u5143\u7d20\u7684\u90e8\u5206\u5411\u5de6\u6ed1\u52a8\uff0c\u76f4\u5230\u5b83\u4e0e0\u90e8\u5206\u5bf9\u9f50\uff0c\u5c06\u843d\u5728\u540c\u4e00\u5217\u4e2d\u7684\u6761\u5f62\u5806\u53e0\u5728\u4e00\u8d77\u3002\u56e0\u6b64\uff0c\u7b2c\u4e8c\u90e8\u5206(\u9ec4\u91d1)\u5411\u5de6\u79fb\u52a8\uff0c\u76f4\u523019\u53f7\u6746\u4e0e0\u53f7\u6746\u5bf9\u9f50\uff0c\u7b2c\u4e09\u6279(\u73ab\u7470)\u724c\u5c0638\u53f7\u6746\u4e0e0\u53f7\u6746\u8fde\u5728\u4e00\u8d77\u3002\u5728\u7269\u7406\u4e0a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u60f3\u8c61\u4e3a\u5c06\u56fe\u5f62\u7ed5\u7740\u5706\u546819\u7684\u5706\u67f1\u4f53\u7f20\u7ed5\uff1b\u4ece\u6570\u5b66\u4e0a\u8bb2\uff0c\u5b83\u76f8\u5f53\u4e8e\u51cf\u5c11\u4e86\u6a21\u6570\u4e3a19\u7684\u7d20\u6570\u95f4\u9694\u3002\n\u5982\u679c\u5ffd\u7565\u8273\u4e3d\u7684\u989c\u8272\uff0c\u56fe14\u4e0e\u56fe12\u5b8c\u5168\u76f8\u540c\uff1a\u6240\u6709\u6761\u5f62\u9ad8\u5ea6\u90fd\u5339\u914d\u3002\u8fd9\u4e0d\u5e94\u8be5\u4ee4\u4eba\u60ca\u8bb6\u3002\u5728\u56fe12\u4e2d\uff0c\u6211\u4eec\u5c06\u7d20\u6570\u51cf\u53bb\u6a2119\uff0c\u7136\u540e\u53d6\u8fde\u7eed\u51cf\u53bb\u7684PRI\u4e4b\u95f4\u7684\u5dee\u503c\u3002\n..", "note_en": "Are the prime numbers sprinkled randomly along the number line, like windblown seeds?Of course not: Primality is not a matter of chance but a product of simple arithmetic. A number is prime if and only if no smaller positive integer other than 1 divides it evenly.\n Yet that\u2019s not the end of the story. The distribution of the primes  looks random, with irregular gaps and clusters that seem quite haphazard. If there\u2019s a pattern, it\u2019s inscrutable. As a matter of fact, the primes look random enough that you could play dice with them. Make a list of consecutive prime numbers (perhaps starting with 11, 13, 17, 19, . . . ) and reduce them modulo 7. In other words, divide each prime by 7 and keep only the remainder. The result is a sequence of integers drawn from the set {1, 2, 3, 4, 5, 6} that looks much like the outcome of repeatedly rolling a fair die.\n $$\\begin{align*} 11 \\bmod 7 &amp; \\rightarrow 4 \\qquad 47 \\bmod 7 \\rightarrow 5 \\\\ 13 \\bmod 7 &amp; \\rightarrow 6 \\qquad 53 \\bmod 7 \\rightarrow 4 \\\\ 17 \\bmod 7 &amp; \\rightarrow 3 \\qquad 59 \\bmod 7 \\rightarrow 3 \\\\ 19 \\bmod 7 &amp; \\rightarrow 5 \\qquad 61 \\bmod 7 \\rightarrow 5 \\\\ 23 \\bmod 7 &amp; \\rightarrow 2 \\qquad 67 \\bmod 7 \\rightarrow 4 \\\\ 29 \\bmod 7 &amp; \\rightarrow 1 \\qquad 71 \\bmod 7 \\rightarrow 1 \\\\ 31 \\bmod 7 &amp; \\rightarrow 3 \\qquad 73 \\bmod 7 \\rightarrow 3 \\\\ 37 \\bmod 7 &amp; \\rightarrow 2 \\qquad 79 \\bmod 7 \\rightarrow 2 \\\\ 41 \\bmod 7 &amp; \\rightarrow 6 \\qquad 83 \\bmod 7 \\rightarrow 6 \\\\ 43 \\bmod 7 &amp; \\rightarrow 1 \\qquad 89 \\bmod 7 \\rightarrow 5 \\\\ \\end{align*}$$\n Working with a larger sample (the first million primes greater than \\(10^7\\)), I have tallied up the number of primes with each of the six possible remainders mod 7 (otherwise known as the six possible congruence classes mod 7). I have also simulated a million rolls of a six-sided die. Looking at the results of these two exercises, can you tell which is which?\n 1 2 3 4 5 6\r 166,787 166,569 166,714 166,573 166,665 166,692\r 120 -98 47 -94 -2 25\r\r   1 2 3 4 5 6\r 166,768 166,290 166,412 166,638 167,282 166,610\r 101 -377 -255 -29 615 -57\n In each table the first line counts the number of outcomes, \\(x\\), in each of the six classes; the second line shows the difference \\(x - \\bar{x}\\), where \\(\\bar{x}\\) is the mean value 1,000,000 / 6 = 166,667. In both cases the numbers seem to be spread pretty evenly, without any obvious biases. The first table represents the prime residues mod 7. They have a  somewhat flatter distribution than the simulated die, with smaller departures from the mean; the standard deviations of the two samples are 84 and 346 respectively. On the evidence of these tables it looks like either process could supply the randomness needed for a casual game of dice.\n There\u2019s more to randomness, however, than just ensuring that the results are evenly distributed across the allowed range. Individual events in the series must also be independent of one another. One roll of a die should have no effect on the outcome of the next roll. As a test of independence, we can look at pairs of successive events. How many times is a 1 followed by another 1, by a 2, by a 3, and so on? A 6 \u00d7 6 matrix serves to record the counts of the 36 possible pairs. If the process is truly random, all 36 pairs should be equally frequent, apart from small statistical fluctuations. We can turn the matrix into a color-coded \u201cheatmap,\u201d where cells with higher-than-average counts are shown in warm shades of pink and red, while those below the mean are filled with cooler shades of blue. (The quantity plotted is not the actual count \\(x\\) but a normalized variable \\(w = (x_{i,\\,j} - \\bar{x})\\, /\\, \\bar{x}\\), where \\(\\bar{x}\\) is again the mean value\u2014in this case 1,000,000 / 36 = 27,778.) Here is the heatmap for the simulated fair die:\n   Not much going on there. Almost all the counts are so close to the mean value that the matrix cells appear as a neutral gray; a few are very pale pink or blue. It\u2019s just what you would expect if consecutive rolls of a die are uncorrelated, and all possible pairs are equally likely.\n    Well! I guess we\u2019re not in Randomland anymore; this is where the old gray movie turns into Technicolor. The heatmap has a blue streak along the main diagonal (upper left to lower right), indicating that consecutive pairs of primes that have the same value mod 7 are strongly suppressed. In other words, the pairs \\((1, 1), (2, 2), \\ldots (6, 6)\\) appear less often than they would in a truly random sequence. The superdiagonal (just above the main diagonal) is a lighter blue, meaning that \\((i, j)\\) pairs with \\(j=i+1\\) are seen at a little less than average frequency; for example, \\((2, 3)\\) and \\((5, 6)\\) have slightly negative values of normalized frequency. On the other hand, the subdiagonal (below the main diagonal) is all pink and red; pairs such as \\((3, 2)\\) or \\((5, 4)\\), with \\(j=i-1\\), occur with higher than average frequency. Away from the diagonal, in the upper right and lower left corners, we see a pastel checkerboard pattern.\n If you\u2019d prefer to squint at numbers rather than colored squares, here\u2019s the underlying matrix:\n pairs of consecutive primes mod 7\r   1 2 3 4 5 6\r   1  15656 24376 33891 29964 33984 28916\r   2  37360 15506 22004 32645 25095 33959\r   3  25307 41107 14823 22747 32721 30009\r   4  32936 26183 37129 14681 21852 33791\r   5  24984 34207 26231 41154 15560 24529\r   6  30543 25190 32636 25382 37453 15488\n The departures from uniformity are anything but subtle. The third row, for example, shows that if you have just seen a 3 in the sequence of primes mod 7, the next number is much more likely to be a 2 than another 3. If you were wagering on a game played with prime-number dice, this bias could make a huge difference in the outcome. The prime dice are rigged!\n  These remarkably strong correlations in pairs of consecutive primes were discovered by Robert J. Lemke Oliver and Kannan Soundararajan of Stanford University, who discuss them in a  preprint posted to the arXiv in March. What I find most surprising about the discovery is that no one noticed these patterns long ago. They are certainly conspicuous enough once you know how to look for them.\n I suppose we can\u2019t fault Euclid for missing them; ideas about randomness and probability were not well developed in antiquity. But what about Gauss? He was a connoisseur of prime tables, and he compiled his own lists of thousands of primes. In his youth,  he wrote, \u201cone of my first projects was to turn my attention to the decreasing frequency of primes, to which end I counted the primes in several chiliads . . . .\u201d Furthermore, Gauss more less invented the idea of congruence classes and modular arithmetic. But apparently he never suspected there might be anything odd lurking in the congruences of pairs of consecutive primes.\n In the 1850s the Russian mathematician Pafnuty Lvovich Chebyshev pointed out a subtle bias in the primes. Reducing the odd primes modulo 4 splits them into two subsets. All primes in the sequence 5, 13, 17, 29, 37, . . . are congruent to 1 mod 4; those in the sequence 3, 7, 11, 19, 23, 31, . . . are congruent to 3 mod 4. Chebyshev observed that primes in the latter category seem to be more abundant. Among the first 10,000 odd primes, for example, there are 4,943 congruent to 1 and 5,057 congruent to 3. However, the effect is tiny compared with the disparities seen in pairs of consecutive primes.\n In modern times a few authors have reported glimpses of the consecutive-primes phenomenon; Lemke Oliver and Soundararajan mention three such sightings. (See references at the end of this article.) In the 1950s and 60s, Stanislaw Knapowski and Paul Tur\u00e1n investigated various aspects of prime residues mod  m; in one paper, published posthumously in 1977, they discuss consecutive primes mod 4, with residues of 1 or 3. They \u201cguess\u201d that consecutive pairs with the same residue and those with different residues \u201care not equally probable.\u201d In 2002 Chung-Ming Ko looked at sequences of consecutive primes (not just pairs of them) and constructed elaborate fractal patterns based on their varying frequencies. Then in 2011 Avner Ash and colleagues published an extended analysis of \u201cFrequencies of Successive Pairs of Prime Residues,\u201d including some matrices in which the diagonal depression is clearly evident.\n Given these precedents, are Lemke Oliver and Soundararajan really the  discoverers of the consecutive prime correlations? In my view the answer is yes. Although others may have seen the patterns before, they did not describe them in a way that registered on the consciousness of the mathematical community. As a matter of fact, when Lemke Oliver and Soundararajan announced their findings, the response was surprise verging on incredulity. Erica Klarreich,  writing in  Quanta, cited the reaction of James Maynard, a number theorist at Oxford:\n When Soundararajan first told Maynard what the pair had discovered, \u201cI only half believed him,\u201d Maynard said. \u201cAs soon as I went back to my office, I ran a numerical experiment to check this myself.\u201d\n Evidently that was a common reaction. Evelyn Lamb,  writing in  Nature, quotes Soundararajan: \u201cEvery single person we\u2019ve told this ends up writing their own computer program to check it for themselves.\u201d\n Well, me too! For the past few weeks I\u2019ve been noodling away at lots of code to analyze primes mod  m. What follows is an account of my attempts to understand where the patterns come from. My methods are computational and visual more than mathematical; I can\u2019t prove a thing. Lemke Oliver and Soundararajan take a more rigorous and analytical approach; I\u2019ll say a little more about their results at the end of this article.\n If you would like to launch your own investigation, you\u2019re welcome to use my code as a starting point. It is written in  the Julia programming language, packed up in a  Jupyter notebook, and available  on GitHub. (Incidentally, this program was my first nontrivial experiment with Julia. I\u2019ll have more to say about my experience with the language in a later post.)\n  All the examples presented above concern primes taken modulo 7, but there\u2019s nothing special about the number 7 here. I chose it merely because the six possible remainders {1, 2, 3, 4, 5, 6} match the faces of an ordinary cubical die. Other moduli give similar results. Lemke Oliver and Soundararajan do much of their analysis with primes modulo 3, where there are only two congruence classes: A prime greater than 3 must leave a remainder of either 1 or 2 when divided by 3. This is the matrix of pair counts for the first million primes above \\(10^7\\):\n    The pattern is rather minimalist but still recognizable: The off-diagonal entries for sequences \\((1, 2)\\) and \\((2, 1)\\) are larger than the on-diagonal entries for \\((1, 1)\\) and \\((2, 2)\\).\n Primes modulo 10 have four congruence classes: 1, 3, 7, 9. Working in decimal notation, we don\u2019t even need to do any arithmetic to see this. When numbers are written in base 10, every prime greater than 5 has a trailing digit of 1, 3, 7, or 9. Here are the frequency counts for the 16 pairs of consecutive final digits:\n 1 3 7 9\r   1  43811 76342 78170 51644\r   3  58922 41148 71824 78049\r   7  64070 68542 40971 76444\r   9  83164 63911 59063 43924\n   The blue stripe along the main diagonal is clearly present, although elsewhere in the matrix the pattern is somewhat muted and muddled.\n I have found that the correlations between successive primes show through most clearly when the modulus itself is a prime and also is not too small. Take a look at the heatmaps for consecutive primes mod 13 and mod 17:\n        These would make great patterns for a quilt or a tiled floor, no? And there are interesting regularities visible in all of them. Diagonal stripes are prominent not just on the main corner-to-corner diagonal but throughout the matrix. Those stripes also generate a checkerboard motif; along any row or column, cells tend to alternate between red and blue. A subtler feature is an approximate bilateral symmetry across the  antidiagonal (which runs from lower left to upper right). If you were to fold the square along this line, the cells brought together would be closely matched in color. (This is a fact noticed by Ash and his co-authors.)\n As a focus of further analysis I have settled on looking at consecutive primes mod 19, a modulus large enough to yield clearly differentiated stripes but not so large as to make the matrix unweildy.\n   How to make sense of what we\u2019re seeing? A starting point is the observation that all the primes in our sample are odd numbers, and hence all the intervals between those primes are even numbers. For any given prime \\(p\\), the next candidates for primehood are \\(p+2, p+4, p+6, \\ldots\\). Could this have something to do with the checkerboard pattern? If the steps between primes must be multiples of 2, that could certainly create correlations between every second cell in a given column or row. (Indeed, the every-other-cell correlations would be starkly obvious\u2014all even-numbered entries would be exactly zero\u2014if the modulus were an even number. It is only by \u201cwrapping around\u201d the edge of the matrix at an odd boundary that any of the even-numbered cells can be populated.)\n The diagonal stripes in the matrix suggest strong correlations between all pairs of primes separated by a certain numerical interval. For example, the deepest blue diagonal and the brightest red diagonal are formed by cells separated by six places along the  j axis. In the first row are cells 1 and 7, then 2 and 8, 3 and 9, and so on. It occurred to me that this relationship would be easier to perceive if I could \u201ctwist\u201d the matrix, so that diagonals became columns. The idea is to apply a cyclic shift to each row; all the values in the row slide to the left, and those that fall off the left edge are reinserted on the right. The first row shifts by zero positions, the next row by one position, and so on. (Is there a name for this transformation? I\u2019m just calling it a twist.)\n When I wrote the code to apply this transformation, the result was not quite what I expected:\n   What are those zigzags all along the antidiagonal? I guessed that I must have an off-by-one error. Indeed this was the nature of the problem, though the bug lay in the data, not the algorithm. The matrices I\u2019ve displayed in all the figures above are only partial; they suppress empty congruence classes. In particular, the matrix for pairs of primes modulo 19 ignores all primes congruent to 0 mod 19\u2014on the sensible-sounding grounds that there are no such primes. After all, if \\(p &gt; 19\\) and \\(p \\equiv 0 \\bmod 19\\), then \\(p\\) cannot be prime because it is divisible by 19. Nevertheless, a row and a column for \\(p \\equiv 0 \\bmod 19\\) are properly part of the matrix. When they are included, the color-coded tableau looks like this:\n   The presence of the zero row and column makes the definition of the twist transformation somewhat tidier: For each row \\(i\\), apply a leftward cyclic shift of \\(i\\) places. The resulting twisted matrix is also tidier:\n   What do those vertical stripes tell us? In the original matrix, entry \\(i, j\\) represents the frequency with which \\(i \\bmod 19\\) is followed by \\(j \\bmod 19\\). Here, the color in cell \\(i, j\\) indicates the frequency with which \\(i \\bmod 19\\) is followed by \\((i + j) \\bmod 19\\). In other words, each column brings together entries with same  interval mod 19 between two primes. For example, the leftmost column includes all pairs separated by an interval of length \\(0 \\bmod 19\\), and the bright red column at \\(j = 6\\) counts all the cases where successive primes are separated by \\(6 \\bmod 19\\).\n The color coding gives a qualitative impression of which intervals are seen more or less commonly. For a more precise quantitative measure, we can sum along the columns and display the totals in a bar chart:\n    The even-odd disparity noted above is clearly visible in this graphic as well. With the exception of 0, every even interval stands out above its odd neighbors.\n An inter-prime interval of 6 mod 19 is the most popular of all. Multiples of 6 (namely 12 and 18) are also favored but a little less so.\n The interval 0 mod 19 is remarkably  unpopular. These are the entries along the main diagonal of the original matrix, so it\u2019s no surprise their sum is on the low side, but the deficit is deeper than I had guessed.\n I wanted to understand the origin of these patterns. What makes interval 6 such a magnet for pairs of consecutive primes, and why do almost all the primes shun poor interval 0?\n For the popularity of 6, I already had an inkling. In the 1990s Andrew Odlyzko, Michael Rubinstein, and Marek Wolf undertook a computational study of prime \u201cjumping champions\u201d:\n An integer  D is called a  jumping champion if it is the most frequently occurring difference between consecutive primes \u2264  x for some  x.\n Among the smallest primes ( x less than about 600), the jumping champion is usually 2, but then 6 takes over and dominates for quite a long stretch of the number line. Somewhere around \\(x = 10^{35}\\), 6 cedes the championship to 30, which eventually gives way to 210. Odlyzko et al. estimate that the latter transition takes place near \\(x = 10^{425}\\). The numbers in this sequence of jumping champions\u20142, 6, 30, 210, . . . \u2014are the  primorials; the  nth primorial is the product of the first  n primes.\n Why should primorials be the favored intervals between consecutive primes? If \\(p\\) is a large enough prime, then \\(p + 2\\) cannot be divisible by 2, \\(p + 6\\) cannot be divisible by either 2 or 3, \\(p + 30\\) cannot be divisible by 2, 3, or 5, and in general \\(p + P_{n}\\), where \\(P_{n}\\) is the  nth primorial, cannot be divisible by any of the first  n primes. Of course \\(p + P_{n}\\) might still be divisible by some larger prime, or there might be another prime between \\(p\\) and \\(p + P_{n}\\), so that the interprime interval is certainly not guaranteed to be a primorial. But these intervals have an edge over other contenders.\n We can see this reasoning in action by taking the differences between successive elements in our list of a million eight-digit primes, then plotting their frequencies:\n   Again interval 6 is the clear standout, accounting for 13.7 percent of the total; higher multiples of 6 also poke above their immediate neighbors. And note the overall shape of the distribution: a lump at the left (with a peak at 6), followed by a steady decline. The trend looks a little like a Poisson distribution, and indeed this is thought to be the correct description.\n The color scheme slices the data set into  tranches of 19 values each. The blue tranche, which includes inter-prime intervals of length 0 to 18, accounts for 68 percent of all the intervals present in the sample of a million primes; the gold tranche adds another 23 percent. The remaining 9 percent are spread widely and thinly. Not all of the intervals are shown in the graph; the spectrum extends as far as 210. (A single pair of consecutive primes in the sample has a separation of 210, namely 20,831,323 and 20,831,533.)\n Figure 13 seems to reveal a great deal about the patterns of consecutive primes mod 19. I can make the graph even more informative with a simple rearrangement. Slide each 19-element tranche to the left until it aligns with the 0 tranche, stacking up bars that fall in the same column. Thus the second (gold) tranche moves left until bar 19 lines up with bar 0, and the third (rose) tranche brings together bar 38 with bar 0. Physically, this process can be imagined as wrapping the graph around a cylinder of circumference 19; mathematically, it amounts to reducing the inter-prime intervals modulo 19.\n   If you ignore the garish colors, Figure 14 is identical to Figure 12: All the bar heights match up. This should not be a surprise. In Figure 12 we reduce the primes modulo 19 and then take the differences between successive reduced pri\n......", "posttime": "2020-06-08 23:26:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7d20\u6570,prime", "title": "\u4e00\u4e2a\u53c8\u4e00\u4e2a\u7d20\u6570", "title_en": "Prime After Prime", "transed": 1, "url": "http://bit-player.org/2016/prime-after-prime", "via": "", "real_tags": ["\u7d20\u6570", "prime"]}]