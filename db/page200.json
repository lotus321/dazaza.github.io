[{"category": "", "categoryclass": "", "imagename": "642dd622bf7b83281be6940232a989f1.png", "infoid": 1004275, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u91cc\u6709\u4e00\u4e2a\u7410\u788e\u7684\u95ee\u9898\u7ed9\u4f60\uff1a\u897f\u96c5\u56fe\u521d\u521b\u516c\u53f8Sporcle\uff0c\u4e00\u5bb6\u7410\u788e\u7684\u6e38\u620f\u516c\u53f8\uff0c\u5728\u54ea\u4e00\u5e74\u53d1\u73b0\uff0c\u901a\u8fc7\u5c06\u5927\u91cf\u4e1a\u52a1\u653e\u5728\u7f51\u4e0a\uff0c\u5b83\u53ef\u4ee5\u751f\u5b58\u548c\u84ec\u52c3\u53d1\u5c55\uff1f\n\u7b54\u6848\u662f2020\u5e74\uff0c\u8fd9\u5c31\u662f\u73b0\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u8fd9\u5bb6\u6210\u7acb13\u5e74\u7684\u516c\u53f8\u603b\u90e8\u4f4d\u4e8e\u897f\u96c5\u56fe\u7684\u5f17\u91cc\u8499\u7279\u793e\u533a\uff0c\u6b63\u5728\u8fc5\u901f\u5730\u4e86\u89e3\u5230\uff0c\u5b83\u5728\u5168\u56fd\u5404\u5730\u7684\u9152\u5427\u548c\u9910\u9986\u57f9\u517b\u7684\u53d7\u4f17\u4e5f\u540c\u6837\u6e34\u671b\u8fde\u63a5\u865a\u62df\u7f51\u7edc\u3002\n\u5f53\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u7206\u53d1\u5e76\u968f\u540e\u5173\u95ed\u65f6\uff0c\u4f53\u80b2\u6bcf\u5468\u572833\u4e2a\u5dde\u7684\u673a\u6784\u4e3e\u529e800\u591a\u573a\u73b0\u573a\u7410\u4e8b\u6d3b\u52a8\uff0c\u5e76\u8ba1\u5212\u4eca\u5e74\u4e3e\u529e40,000\u591a\u573a\u201c\u4f53\u80b2\u73b0\u573a\u201d\u7410\u4e8b\u6d3b\u52a8\u3002\n\u8fd9\u9879\u4e1a\u52a1\u4e00\u591c\u4e4b\u95f4\u5c31\u5316\u4e3a\u4e4c\u6709\uff0c\u8fd1800\u540d\u5458\u5de5(\u5176\u4e2d\u5927\u90e8\u5206\u662f\u73b0\u573a\u7410\u4e8b\u4e3b\u6301\u4eba)\u88ab\u6682\u65f6\u89e3\u96c7\u3002\nSporcle\u9996\u5e2d\u6267\u884c\u5b98\u963f\u91cc\u00b7\u827e\u8fbe\u5c14(Ali Aydar)\u8868\u793a\uff1a\u201c\u6211\u559c\u6b22\u5c06\u5468\u671f\u4e2d\u7684\u6bcf\u4e00\u6b21\u4e0b\u8dcc\u89c6\u4e3a\u65b0\u673a\u4f1a\u7684\u6f5c\u529b\u3002\u201d\nSporcle\u5728\u897f\u96c5\u56fe\u7684\u8fd0\u8425\u670941\u540d\u5458\u5de5\uff0c\u5f00\u59cb\u4e3a\u4eba\u4eec\u63d0\u4f9b\u4e00\u4e2a\u5e73\u53f0-\u4e0d\u4ec5\u662f\u5728\u7f8e\u56fd\u7684\u9152\u5427\uff0c\u800c\u4e14\u5728\u4e16\u754c\u5404\u5730-\u4ed6\u4eec\u4f1a\u88ab\u5c01\u9501\uff0c\u6e34\u671b\u5a31\u4e50\u548c\u793e\u4ea4\u3002\n\u201c\u4f60\u80fd\u770b\u7684Netflix\u8282\u76ee\u5c31\u8fd9\u4e48\u591a\uff0c\u201d\u827e\u8fbe\u5c14\u8bf4\u3002\u201c\u56e0\u6b64\uff0c\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec\u5e94\u8be5\u5c06\u6211\u4eec\u5728\u6570\u5b57\u65b9\u9762\u7684\u80fd\u529b\u4e0e\u6211\u4eec\u5728\u73b0\u573a\u7410\u4e8b\u65b9\u9762\u7684\u80fd\u529b\u7ed3\u5408\u8d77\u6765\u3002\u8fd9\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u8f6c\u5411\uff0c\u800c\u662f\u5bf9\u6446\u5728\u6211\u4eec\u9762\u524d\u7684\u673a\u4f1a\u7684\u56de\u5e94\u3002\u201c\u3002\n\u8fd9\u6b21\u673a\u4f1a\u5c55\u793a\u4e86Sporcle Virtual Trivia\uff0c\u8fd9\u662f\u7531\u516c\u53f8\u5e26\u56de\u7684\u6570\u767e\u540d\u5458\u5de5\u5728Zoom\u4e0a\u6258\u7ba1\u7684\u73b0\u573a\u6e38\u620f\u3002\u5728\u77ed\u77ed8\u5468\u5185\uff0cSporcle\u5df2\u7ecf\u4e3e\u529e\u4e86\u8fd12000\u573a\u865a\u62df\u7410\u4e8b\u6d3b\u52a8\uff0c\u521b\u9020\u4e86\u8d85\u8fc7250\u4e07\u7f8e\u5143\u7684\u4e1a\u52a1-\u8003\u8651\u5230\u73b0\u573a\u6d3b\u52a8\u7ea6\u5360Sporcle\u53bb\u5e741000\u4e07\u7f8e\u5143\u80cc\u7ebf\u6536\u5165\u768440%\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u5927\u7684\u6570\u5b57\u3002\n\u5c31\u50cf\u8bb8\u591a\u4f01\u4e1a\u901a\u8fc7\u89c6\u9891\u804a\u5929\u62e5\u62b1\u65b0\u7684\u8fdc\u7a0b\u73b0\u5b9e\u4e00\u6837\uff0cZoom\u6539\u53d8\u4e86Sporcle\u7684\u6e38\u620f\u89c4\u5219\u3002Aydar\u79f0\u8d5eZoom\u7684\u7a81\u7834\u5ba4\u529f\u80fd\u7279\u522b\u9002\u5408\u8fd9\u79cd\u4f53\u9a8c\uff0c\u56e0\u4e3a\u5b83\u6a21\u4eff\u4e86\u73b0\u573a\u76f4\u64ad\u7684\u7410\u4e8b\u6d3b\u52a8\uff0c\u5e76\u5141\u8bb8\u4eba\u4eec\u8fdb\u884c\u56e2\u961f\u5408\u4f5c\u3002\n\u201c\u5f53\u6211\u4eec\u770b\u5230\u8fd9\u4e00\u70b9\u65f6\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u662f\u6709\u6f5c\u529b\u7684\uff0c\u201d\u827e\u8fbe\u5c14\u8bf4\u3002\u201c\u6211\u4eec\u62e5\u6709\u8fc5\u901f\u63a8\u51fa\u4e00\u6b3e\u4ea7\u54c1\u7684\u5de5\u7a0b\u548c\u4ea7\u54c1\u6280\u80fd\uff0c\u4f46\u8981\u771f\u6b63\u505a\u5230\u89c4\u6a21\u5316\uff0c\u8fd8\u9700\u8981\u5177\u5907\u6258\u7ba1\u7ecf\u9a8c\u3002\u201d\nSporcle\u5728\u592a\u5e73\u6d0b\u897f\u5317\u5730\u533a\u521b\u4e1a\u516c\u53f8GeekWire 200\u5f3a\u6307\u6570\u4e2d\u6392\u540d\u7b2c39\u4f4d\uff0c\u5df2\u7ecf\u6084\u6084\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5927\u7684\u7410\u4e8b\u516c\u53f8\u4e4b\u4e00\u3002\u827e\u8fbe\u5c14\u5728\u8fd9\u5bb6\u81ea\u529b\u66f4\u751f\u7684\u516c\u53f8\u62c5\u4efb\u9996\u5e2d\u6267\u884c\u5b98\u5df2\u670910\u5e74\uff0c\u4f46\u7531\u4e8e\u4ed6\u65e9\u671f\u5728Napster\u62c5\u4efb\u7684\u804c\u52a1\uff0c\u4ed6\u6709\u70b9\u50cf\u79d1\u6280\u754c\u7684\u4f20\u5947\u4eba\u7269\u3002Napster\u662f\u8fd9\u5bb6\u516c\u53f8\u7684\u7b2c\u4e00\u4f4d\u975e\u521b\u59cb\u5458\u5de5\uff0c\u4e5f\u662f\u201c\u6570\u5b57\u97f3\u4e50\u7684\u5148\u9a71\u4e4b\u4e00\u201d\u3002\n\u9664\u4e86\u73b0\u573a\u76f4\u64ad\uff0cSporcle\u8fd8\u5728\u7f51\u4e0a\u63d0\u4f9b\u4e86\u65e0\u6570\u7528\u6237\u751f\u6210\u7684\u6d4b\u9a8c\uff0c\u81ea2007\u5e74\u4ee5\u6765\u5df2\u7ecf\u5438\u5f15\u4e86\u8d85\u8fc735\u4ebf\u573a\u6bd4\u8d5b\u3002\n\u5728\u5927\u6d41\u884c\u4e4b\u524d\uff0c\u5e73\u5747\u6bcf\u5929\u6709120\u4e07\u4eba\u5728\u8be5\u7f51\u7ad9\u4e0a\u73a9\u4f53\u80b2\u3001\u5730\u7406\u3001\u97f3\u4e50\u3001\u7535\u5f71\u7b49\u7c7b\u522b\u7684\u6e38\u620f\u3002\u81ea2\u6708\u4efd\u4ee5\u6765\uff0c\u9700\u6c42\u6bcf\u6708\u90fd\u5728\u589e\u957f\uff0cSporcle\u73b0\u5728\u5f88\u591a\u5929\u90fd\u901a\u8fc7\u4e86200\u4e07\u573a\u667a\u529b\u7ade\u8d5b\u3002\n\u865a\u62df\u7410\u4e8b\u6d3b\u52a8\u5438\u5f15\u4e86\u591a\u8fbe12\u652f\u7403\u961f\u53c2\u52a0\u4e00\u573a\u6bd4\u8d5b\uff0c\u6bcf\u53f0\u7528\u4e8e\u6e38\u620f\u7684\u8bbe\u5907\u7684\u8d39\u7528\u7ea6\u4e3a5\u7f8e\u5143\u3002Sporcle\u5df2\u7ecf\u8054\u7cfb\u4e86\u4e4b\u524d\u4eb2\u81ea\u53c2\u52a0\u8fc7\u6d3b\u52a8\u7684\u73a9\u5bb6\uff0c\u4f46\u73b0\u5728\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u4e3b\u8981\u662f\u7531\u53e3\u7891\u63a8\u52a8\u7684\u3002\nSporcle\u8fd8\u8bd5\u56fe\u5e2e\u52a9\u5728\u5927\u6d41\u884c\u4e4b\u524d\u4e3b\u529e\u5176\u6d3b\u52a8\u7684\u9152\u5427\u548c\u9910\u5385\u3002\u83b7\u80dc\u7684\u7403\u961f\u53ef\u4ee5\u83b7\u5f97\u8fd9\u4e9b\u573a\u9986\u7684\u793c\u54c1\u5361\uff0c\u4f5c\u4e3aSporcle\u56de\u9988\u4e1a\u52a1\u5173\u95ed\u7684\u5408\u4f5c\u4f19\u4f34\u7684\u65b9\u5f0f\u3002\n\u800c\u4e14\uff0c\u865a\u62df\u4f01\u4e1a\u6700\u7ec8\u53ef\u80fd\u4f1a\u6bd4\u4f20\u7edf\u7684\u73b0\u573a\u6d3b\u52a8\u89c4\u6a21\u66f4\u5927\uff0c\u56e0\u4e3a\u5b83\u5438\u5f15\u7684\u89c2\u4f17\u8fdc\u8fdc\u8d85\u51fa\u4e86\u5f53\u5730\u7684\u9152\u5427\u3002\u5b83\u8fce\u5408\u4e86\u4e0d\u540c\u7684\u4eba\u53e3\u7edf\u8ba1\u6570\u5b57\uff0c\u5305\u62ec\u90a3\u4e9b\u5b81\u613f\u9009\u62e9\u5916\u51fa\u7684\u4eba\u3002\n\u201c\u8fd9\u5b8c\u5168\u4e0d\u662f\u6211\u4eec\u5728\u5927\u6d41\u884c\u524d\u60f3\u5230\u7684\uff0c\u201d\u827e\u8fbe\u5c14\u8bf4\u3002\u201c\u8fd9\u662f\u4e3a\u4e86\u597d\u73a9\uff0c\u4e5f\u662f\u4e3a\u4e86\u4e0e\u4f60\u7684\u670b\u53cb\u548c\u5bb6\u4eba\u5efa\u7acb\u793e\u4ea4\u8054\u7cfb\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u5173\u4e8e\u8fde\u63a5\u7684\u5149\u7ea4\u3002\u201c\u3002\nGeekWire Space&amp\uff1bScience-\u83b7\u5956\u822a\u7a7a\u822a\u5929\u548c\u79d1\u5b66\u7f16\u8f91\u827e\u4f26\u00b7\u535a\u4f0a\u5c14(Alan Boyle)\u6bcf\u5468\u5934\u6761", "note_en": "Here\u2019s a trivia question for you: In what year did Seattle startup  Sporcle, a trivia games company, figure out that it could survive and thrive by taking a large chunk of its business online?\n The answer is 2020, and it\u2019s happening right now as the 13-year-old company, based in Seattle\u2019s Fremont neighborhood, is learning in rapid fashion that an audience it cultivated in bars and restaurants across the country is just as hungry to connect virtually.\n When the COVID-19 pandemic hit and lockdowns ensued, Sporcle was operating more than 800 live trivia events per week in establishments across 33 states, with plans to host more than 40,000 of its \u201cSporcle Live\u201d trivia events this year.\n   That business went to zero overnight and nearly 800 employees, the bulk of who were live trivia hosts, were furloughed.\n \u201cI like to look at every dip in the cycle as a potential for new opportunities,\u201d Sporcle CEO Ali Aydar said.\n With 41 employees on the digital side of its operation in Seattle, Sporcle went to work on providing a platform for people \u2014 not just in U.S. pubs, but around the world \u2014 who would be locked down and starved for entertainment and social connection.\n \u201cThere\u2019s only so much Netflix you can watch,\u201d Aydar said. \u201cSo we thought we\u2019d combine our capabilities on the digital side with our capabilities on the live trivia side. It wasn\u2019t really a pivot, it was a response to the opportunity available in front of us.\u201d\n  The opportunity presented  Sporcle Virtual Trivia, live games hosted on Zoom by hundreds of employees who have been brought back by the company. In just 8 weeks, Sporcle has hosted nearly 2,000 virtual trivia events and generated more than $2.5 million in business \u2014 a significant number considering live events represented approximately 40 percent of Sporcle\u2019s $10 million in topline revenue last year.\n  Like many businesses embracing new remote realities over video chat, Zoom was the game changer for Sporcle. Aydar credits Zoom\u2019s breakout room feature for being especially well suited for the experience, as it mimics live trivia events and allows people to team up.\n \u201cWhen we saw that we knew this had the potential to work,\u201d Aydar said. \u201cWe have the engineering and product chops to quickly launch a product, but then it also required the experience with hosting to really do this at scale.\u201d\n  Sporcle, which is No. 39 on the  GeekWire 200 ranked index of Pacific Northwest startups, has quietly managed to become one of the world\u2019s largest trivia companies.\u00a0 Aydar has been CEO for 10 years at the bootstrapped company, but he\u2019s  a bit of tech legend thanks to his early role at Napster, where was the first non-founding employee and \u201cone of the pioneers of digital music.\u201d\n  Beyond the live events, Sporcle offers countless user-generated quizzes online, which have attracted more than 3.5 billion plays since 2007.\n Before the pandemic, an average of 1.2 million people a day were playing games on the site in categories such as sports, geography, music, movies and more. Demand has been growing monthly since February and Sporcle is now passing 2 million quiz plays on many days.\n Virtual trivia events, attracting up to 12 teams to a game, cost about $5 for each device being used to play. Sporcle has reached out to players who have previously attended events in person, but the popularity is mainly being driven by word of mouth right now.\n Sporcle is also trying to help the bars and restaurants that hosted its events before the pandemic. Winning teams can earn gift cards to those venues as Sporcle\u2019s way of giving back to partners whose businesses are closed.\n And the virtual business may end up being bigger than the traditional live events because it attracts an audience far beyond a local bar. It caters to different demographics, including those who prefer an alternative to going out.\n \u201cThis was not something we thought of pre-pandemic at all,\u201d Aydar said. \u201cThis is to have fun and to connect socially with your friends and your family. It really is about that fiber of connection.\u201d\n      GeekWire Space &amp; Science - Weekly headlines from Alan Boyle, award-winning aerospace and science editor", "posttime": "2020-05-30 00:34:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u62d2\u4e4b\u95e8\u5916,bars,sporcle", "title": "\u88ab\u9152\u5427\u62d2\u4e4b\u95e8\u5916\uff0c\u897f\u96c5\u56fe\u7410\u4e8b\u521d\u521b\u516c\u53f8Sporcle\u5728Zoom\u4e0a\u53d6\u5f97\u6210\u529f", "title_en": "Shut out of bars, Seattle trivia startup Sporcle finds success on Zoom", "transed": 1, "url": "https://www.geekwire.com/2020/shut-bars-pandemic-seattle-trivia-startup-sporcle-finds-success-games-zoom/", "via": "", "real_tags": ["\u62d2\u4e4b\u95e8\u5916", "bars", "sporcle"]}, {"category": "", "categoryclass": "", "imagename": "f9cb2b4338ff7629ae99128936efdf84.jpg", "infoid": 1004272, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Tl\uff1b\u6211\u535a\u58eb\u548c\u6211\u7684\u5927\u5b66\u4f19\u4f34\u572814\u4e2a\u6708\u5185\u628a\u6211\u4eec\u7684\u521d\u521b\u516c\u53f8\u7684\u6536\u5165\u63d0\u9ad8\u5230\u4e86323,000.43\u7f8e\u5143\uff0c\u6211\u4eec\u7684\u5e74\u5ea6\u7ecf\u5e38\u6027\u6536\u5165\u5f88\u5feb\u5c31\u4f1a\u8d85\u8fc71,000,000\u7f8e\u5143\u3002\u6211\u521b\u5efa\u8fd9\u4e2a\u5e16\u5b50\u662f\u4e3a\u4e86\u7ed9\u4f60\u4e00\u4e2a\u6ed1\u96ea\u7f06\u8f66\uff0c\u8ba9\u4f60\u722c\u4e0a\u8270\u82e6\u5353\u7edd\u7684\u6210\u529f\u4e4b\u5c71\u3002\u6211\u771f\u5e0c\u671b\u6709\u4eba\u80fd\u4e3a\u6211\u8fd9\u4e48\u505a\u3002\n\u5173\u95ed\u60a8\u7684\u6cd5\u5f8b\u4e0e\u79e9\u5e8f\u91cd\u64ad\u3002\u5750\u597d\uff0c\u6458\u4e0b\u7ea2\u8272\u836f\u4e38\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u5165\u6bcd\u4f53\u4e86\u3002\n[\u91cd\u8981\u63d0\u793a\uff1a\u6b64\u5e16\u5b50\u7684\u76ee\u7684\u4e0d\u662f\u51fa\u552e\u6216\u63a8\u5e7f\u4efb\u4f55Homeie\u3002\u8fd9\u662f\u6211\u5411\u4f01\u4e1a\u5bb6\u4eec\u8868\u8fbe\u7231\u610f\u7684\u4e00\u79cd\u5c0f\u5c0f\u65b9\u5f0f\uff0c\u6211\u975e\u5e38\u5173\u5fc3\u8fd9\u4e2a\u793e\u533a\u3002\u6ca1\u6709\u6bd4\u8fd9\u66f4\u6e05\u695a\u7684\u4e86\u3002]\u3002\n\u6211\u662fSmart Alto\u7684\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\uff0cSmart Alto\u662f\u4e0e\u8d2d\u623f\u8005\u8fdb\u884c15\u5206\u949f\u7535\u8bdd\u9884\u7ea6\u7684\u6700\u7b80\u5355\u65b9\u5f0f\u3002\n\u623f\u5730\u4ea7\u7ecf\u7eaa\u4eba\u5728Zillow\u3001Realtor.com\u3001Homes.com\u7b49\u5730\u505a\u623f\u5c4b\u5e7f\u544a\u3002\u95ee\u9898\u662f\uff0c\u5f53\u8d2d\u623f\u8005\u60f3\u8981\u4e0e\u623f\u5730\u4ea7\u7ecf\u7eaa\u4eba\u4f1a\u9762\u67e5\u770b\u623f\u4ea7\u65f6\uff0c\u623f\u5730\u4ea7\u7ecf\u7eaa\u4eba\u51e0\u4e4e\u4ece\u4e0d\u56de\u590d\u8be2\u95ee\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6b63\u5fd9\u4e8e\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\n\u6211\u4eec\u53d1\u660e\u4e86\u4e00\u79cd\u6280\u672f\uff0c\u53ef\u4ee5\u57282\u5206\u949f\u5185\u5411\u8d2d\u623f\u8005\u53d1\u9001\u77ed\u4fe1\uff0c\u95ee\u4ed6\u4eec\u51e0\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u7136\u540e\u5728\u623f\u5730\u4ea7\u7ecf\u7eaa\u4eba\u7684\u65e5\u7a0b\u8868\u4e0a\u8bbe\u7f6e15\u5206\u949f\u7684\u7535\u8bdd\u9884\u7ea6\u3002\u8fd9\u6837\uff0c\u8d2d\u623f\u8005\u603b\u80fd\u5f97\u5230\u4ed6\u4eec\u7684\u95ee\u9898\u7684\u7b54\u6848\uff0c\u7136\u540e\u53ef\u4ee5\u5b89\u6392\u65f6\u95f4\u548c\u623f\u5730\u4ea7\u7ecf\u7eaa\u4eba\u4e00\u8d77\u53bb\u770b\u623f\u5b50\u3002\n\u6211\u4ee5\u524d\u5728\u4e00\u5bb6\u623f\u5730\u4ea7\u7ecf\u7eaa\u516c\u53f8\u5de5\u4f5c\uff0c\u4e3a\u623f\u5730\u4ea7\u7ecf\u7eaa\u4eba\u9884\u7ea6\uff0c\u6240\u4ee5\u6211\u5bf9\u8fd9\u4e2a\u95ee\u9898\u975e\u5e38\u4e86\u89e3\u3002\n\u6211\u6b63\u5728\u62c9\u5f00\u6211\u7684\u521d\u521b\u516c\u53f8\u7684\u5e37\u5e55\uff0c\u6211\u5c06\u5411\u4f60\u4eec\u5c55\u793a\u6211\u5230\u5e95\u505a\u4e86\u4ec0\u4e48\uff0c\u8ba9\u5b83\u4ece0\u7f8e\u5143/\u5e74\u964d\u523050\u4e07\u7f8e\u5143/\u5e74\u751a\u81f3\u66f4\u9ad8\u3002\n\u8fd9\u7bc7(\u8bda\u7136)\u5f88\u957f\u7684\u5e16\u5b50\u5305\u542b\u4e86\u786e\u5207\u7684Facebook\u548cGoogle\u5e7f\u544a\u3001\u767b\u5f55\u9875\u9762\u3001\u6587\u6848\u3001\u9500\u552e\u653b\u7565\u3001Facebook\u5e16\u5b50\u3001\u6574\u5408\u3001\u89c6\u9891\u3001\u7f51\u7ad9\u3001\u5b9a\u4ef7\u7b56\u7565\u4ee5\u53ca\u6211\u7528\u6765\u53d1\u5c55\u4e1a\u52a1\u7684\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u3002\n\u6211\u5c06\u5411\u60a8\u5c55\u793a\u6211\u641e\u7838\u4e86\u4ec0\u4e48(\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u8df3\u8fc7\u6211\u7684\u9519\u8bef)\u548c\u6211\u505a\u5bf9\u4e86\u4ec0\u4e48(\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u590d\u5236\u6211\u7684\u6210\u529f)\u3002\n\u5982\u679c\u4f60\u8dd1\u9519\u4e86\u65b9\u5411\uff0c\u4f60\u5f00\u5f97\u591a\u5feb\u90fd\u65e0\u5173\u7d27\u8981\u3002\u6211\u5e0c\u671b\u5728\u6211\u8fd8\u662f\u4e2a\u65b0\u624b\u7684\u65f6\u5019\u6709\u4eba\u80fd\u5e2e\u6211\u505a\u8fd9\u4ef6\u4e8b\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4e0d\u5f97\u4e0d\u591a\u5e74\u6765\u62fc\u547d\u62fc\u640f\uff0c\u8d54\u94b1\uff0c\u62fc\u547d\u6500\u767b\u521b\u4e1a\u4e4b\u5c71\u3002\n\u597d\u5427\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65\uff0c\u56e0\u4e3a\u8fd9\u7bc7\u5e16\u5b50\u662f\u4f60\u5230\u5c71\u9876\u7684\u6ed1\u96ea\u7f06\u8f66\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u4e0b\u96ea\u5427(\u5185\u5e55\u7b11\u8bdd\uff0c\u7ee7\u7eed\u9605\u8bfb\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u5b83)\u3002\n\u8fd9\u4e9b\u662f\u6211\u5f00\u59cb\u5feb\u901f\u6210\u957f\u6240\u5173\u6ce8\u7684\u6700\u91cd\u8981\u7684\u4e8b\u60c5(\u9605\u8bfb\uff1a\u8fd9\u4e5f\u662f\u4f60\u5e94\u8be5\u5173\u6ce8\u7684)\u3002\n[\u91cd\u8981\u63d0\u793a\uff1a\u6839\u636ePII\u6307\u5357\uff0c\u5fc5\u8981\u65f6\u6211\u4f1a\u9690\u85cf\u5ba2\u6237\u7684\u59d3\u540d\u3001\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u548c\u7535\u8bdd\u53f7\u7801\u3002]\u3002\n\u5927\u591a\u6570\u4eba\u641e\u7838\u4e86\uff0c\u56e0\u4e3a\u4ed6\u4eec\u60f3\u7528\u4e00\u4e2a\u5947\u601d\u5999\u60f3\u6765\u6539\u53d8\u4e16\u754c\u3002\u4ed6\u4eec\u6700\u7ec8\u4f1a\u5356\u51fa\u6ca1\u4eba\u60f3\u4e70\u7684\u4e1c\u897f\uff0c\u7136\u540e\u7834\u4ea7\u3002\u4ece\u9965\u997f\u7684\u3001\u559c\u6b22\u6c49\u5821\u7684\u5ba2\u6237\u7fa4\u5f00\u59cb\uff0c\u7136\u540e\u5356\u7ed9\u4ed6\u4eec\u6c49\u5821\uff0c\u4f19\u8ba1\u3002\u5355\u51fb\u67e5\u770b\u6211\u5982\u4f55\u4e86\u89e3\u6211\u7684\u5ba2\u6237\uff0c\u5411\u4ed6\u4eec\u9500\u552e\u4ed6\u4eec\u60f3\u8981\u7684\u4e1c\u897f\u3002\n\u6211\u7684\u4e3b\u8981\u76ee\u6807\u662f\u589e\u52a0\u7f51\u7ad9\u8f6c\u5316\u7387\u3002\u6211\u5e0c\u671b\u81f3\u5c11\u67093%\u7684\u7f51\u7ad9\u8bbf\u95ee\u8005\u4e0e\u6211\u7684\u9500\u552e\u56e2\u961f\u5b89\u6392\u4e00\u6b21\u6f14\u793a\u3002\u6211\u7684\u7f51\u7ad9\u56de\u7b54\u4e867\u4e2a\u95ee\u9898\u3002\u70b9\u51fb\u67e5\u770b\u6211\u7684\u7f51\u7ad9\u56de\u7b54\u76847\u4e2a\u95ee\u9898\u3002\n\u6211\u4ed8\u773c\u7403\u94b1\u3002\u6211\u6709\u4e00\u4e2a\u8fc7\u65f6\u7684\u535a\u5ba2\uff0c\u6211\u7684\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u5f88\u70c2\uff0c\u4f46\u8c01\u5728\u4e4e\u5462\uff1f\u6211\u4e0d\u662f\u51fa\u7248\u5546\uff0c\u6240\u4ee5\u53bb\u4ed6\u5988\u7684\u6240\u6709\u8981\u6c42\u6211\u6bcf\u5929\u5199\u65b0\u5185\u5bb9\u7684\u8425\u9500\u5927\u5e08\u3002\u70b9\u51fb\u67e5\u770b\u6211\u7684\u6574\u4e2a\u8425\u9500\u6f0f\u6597\uff0c\u4ece\u6211\u8fd0\u884c\u7684Facebook\u548cGoogle\u5e7f\u544a\u5230\u6211\u4f7f\u7528\u7684\u767b\u5f55\u9875\u9762\u3002\n\u8fd9\u662f\u6211\u7684\u79d8\u5bc6\u6b66\u5668\u3002\u4f5c\u4e3a\u4e00\u540d\u8425\u9500\u5458\uff0c\u6211\u505a\u8fc7\u7684\u6700\u806a\u660e\u7684\u4e8b\u60c5\u5c31\u662f\u5728\u5c55\u793a\u5ba2\u6237\u7ed3\u679c\u4e0a\u52a0\u500d\u4e0b\u6ce8\u3002\u5f53\u5bcc\u5170\u514b\u6797\u00b7\u5723\u5f92\u610f\u8bc6\u5230\u81ea\u5df1\u6700\u7ec8\u4f1a\u53d8\u5f97\u5bcc\u6709\u65f6\uff0c\u8fd9\u4e00\u6218\u7565\u4f1a\u8ba9\u4f60\u611f\u89c9\u81ea\u5df1\u5c31\u50cf\u662f\u4ece\u96ea\u5730\u91cc\u51fa\u6765\u7684\u5bcc\u5170\u514b\u6797\u00b7\u5723\u5f92\u3002\u6211\u5236\u4f5c\u4e86\u51e0\u4e2a\u89c6\u9891\u6765\u5c55\u793a\u6211\u7684\u5ba2\u6237\u7684\u7ed3\u679c\uff0c\u5e76\u5728\u793e\u4ea4\u5a92\u4f53\u3001\u7535\u5b50\u90ae\u4ef6\u548c\u6211\u7684\u6f5c\u5728\u5ba2\u6237\u7ecf\u5e38\u5149\u987e\u7684\u5176\u4ed6\u5730\u65b9\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e86\u731b\u70c8\u62a8\u51fb\u3002\u770b\u7740\u6211\u7684\u964d\u96ea\u3002\n\u5982\u679c\u6211\u4e0d\u80fd\u9996\u5148\u5efa\u7acb\u4e00\u4e2a\u4fe1\u4efb\u6211\u7684\u4eba\u7684\u793e\u533a\uff0c\u90a3\u4e48\u6211\u5c31\u4e0d\u4f1a\u5efa\u7acb\u4e00\u4e2a\u4f01\u4e1a\u3002\u6211\u60f3\u6210\u4e3a\u90a3\u4e9b\u8feb\u5207\u6709\u95ee\u9898\u3001\u6709\u94b1\u89e3\u51b3\u95ee\u9898\u7684\u987e\u5ba2\u7684\u9b54\u7b1b\u624b\u3002\u6211\u7684\u793e\u533a\u4ece\u7b2c\u4e00\u5929\u8d77\u5c31\u662fROI\u79ef\u6781\u7684\uff0c\u662f\u4e0d\u65ad\u7ed9\u4e88\u7684\u793c\u7269\u3002\u8fd9\u4e9b\u7403\u8ff7\u77e5\u9053\u6211\u628a\u4ed6\u4eec\u7684\u6700\u5927\u5229\u76ca\u653e\u5728\u5fc3\u4e0a\uff0c\u6240\u4ee5\u4ed6\u4eec\u8ffd\u968f\u6211\u3002\u70b9\u51fb\u53ef\u4ee5\u770b\u5230\u6211\u5efa\u7acb\u4e86\u4e00\u4e2a\u793e\u533a\uff0c\u6bcf\u4e2a\u6708\u80fd\u8ba9\u6211\u8d5a\u5230\u6570\u5343\u7f8e\u5143\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4e00\u76f4\u5728\u8c08\u8bba\u5982\u4f55\u4e3a\u6211\u7684\u9500\u552e\u56e2\u961f\u751f\u6210\u6f14\u793a\u3002\u4f46\u662f\uff0c\u5982\u679c\u6ca1\u6709\u529e\u6cd5\u5c06\u6f14\u793a\u8f6c\u5316\u4e3a\u91d1\u94b1\uff0c\u6f14\u793a\u5c31\u65e0\u5173\u7d27\u8981\u4e86\u3002\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u672c\u7b80\u5355\u7684\u624b\u518c\u3002\u6ca1\u6709\u82b1\u54e8\u7684\u5267\u672c\u3002\u6ca1\u6709\u865a\u5047\u7684\u63a8\u9500\u672f\u3002\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\uff0c\u544a\u8bc9\u6211\u4eec\u5f53\u6211\u4eec\u6709\u65b0\u7684\u7ebf\u7d22\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fd9\u5e76\u4e0d\u50cf\u4f60\u60f3\u7684\u90a3\u4e48\u96be\u3002\u8fd9\u53ea\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u548c\u5f88\u5927\u7684\u5fc3\u8840\u3002\u70b9\u51fb\u67e5\u770b\u6211\u4eec\u7684\u9500\u552e\u653b\u7565\u3002\n\u6211\u4eec\u4e00\u5f00\u59cb\u53ea\u6709200\u7f8e\u5143/\u6708\u7684\u4ef7\u4f4d\u3002\u6211\u4eec\u684c\u4e0a\u7559\u4e86\u90a3\u4e48\u591a\u94b1\uff0c\u6211\u6bcf\u6b21\u60f3\u8d77\u6765\u90fd\u4f1a\u54ed\u3002\u6211\u4eec\u505a\u8fc7\u7684\u6700\u597d\u7684\u4e8b\u60c5\u5c31\u662f\u63d0\u9ad8\u4ef7\u683c\uff0c\u5f00\u59cb\u9500\u552e\u5e74\u5ea6\u7279\u4ef7\u5546\u54c1\u3002\u73b0\u5728\uff0c\u6211\u4eec\u7684\u5ba2\u6237\u6bcf\u6708\u652f\u4ed8\u7ed9\u6211\u4eec\u7684\u8d39\u7528\u4f4e\u81f3300\u7f8e\u5143\uff0c\u6bcf\u5e74\u9ad8\u8fbe7\u4e07\u7f8e\u5143\u3002\u540c\u6837\u7684\u4ea7\u54c1\u3002\u4ef7\u683c\u4e0d\u540c\u3002\u66f4\u591a\u7684\u94b1\u3002\u70b9\u51fb\u67e5\u770b\u6211\u4eec\u5b9a\u4ef7\u7b56\u7565\u7684\u6f14\u53d8\u3002\n\u597d\u4e86\uff0c\u5404\u4f4d\uff0c\u8fd9\u662f\u4e00\u4e2a\u6b8b\u9177\u7684\u4e8b\u5b9e\uff1a\u6211\u662f\u4e00\u4e2a\u6765\u81ea\u963f\u62c9\u5df4\u9a6c\u5dde\u8fb9\u8fdc\u5730\u533a\u7684\u4e61\u4e0b\u7537\u5b69\u3002\u6211\u751f\u6765\u5c31\u6ca1\u6709\u8425\u9500\u77e5\u8bc6\u3001\u4ea7\u54c1\u77e5\u8bc6\u6216\u9500\u552e\u77e5\u8bc6\u3002\u6211\u4ece\u672a\u5728\u540d\u724c\u5b66\u6821\u5b66\u4e60\u8fc7\u5546\u4e1a\u6216\u8bbe\u8ba1\u3002\u6211\u7ecf\u8425\u7740\u4e00\u5bb6\u6280\u672f\u521d\u521b\u516c\u53f8\uff0c\u4f46\u6211\u4ece\u6765\u6ca1\u6709\u5199\u8fc7\u4e00\u884c\u4ee3\u7801\u3002\n\u5982\u679c\u6211\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u90a3\u4e48\u4f60\u4e5f\u80fd\u505a\u5230\u3002(\u518d\u8bfb\u4e00\u904d\u6700\u540e\u4e00\u53e5)\u3002\u6211\u53ea\u662f\u4e2a\u666e\u901a\u4eba\u3002\u6211\u5de5\u4f5c\u52aa\u529b\uff0c\u6211\u806a\u660e\uff0c\u6211\u4ece\u9519\u8bef\u4e2d\u5438\u53d6\u6559\u8bad\u3002\u4f46\u5f52\u6839\u7ed3\u5e95.\u6211\u53ea\u662f\u4e2a\u6765\u81ea\u963f\u62c9\u5df4\u9a6c\u5dde\u8fb9\u8fdc\u5730\u533a\u7684\u4eba\u3002\n\u6210\u529f\u4f1a\u7559\u4e0b\u86db\u4e1d\u9a6c\u8ff9\u3002\u4f60\u6ca1\u6709\u7406\u7531\u4e0d\u590d\u5236\u6211\u7684\u4f5c\u54c1\uff0c\u4e3a\u4f60\u81ea\u5df1\u7684\u751f\u610f\u91cf\u8eab\u5b9a\u505a\u3002\u5929\u5e95\u4e0b\u6ca1\u6709\u4ec0\u4e48\u65b0\u9c9c\u4e8b\uff0c\u4f60\u53ea\u8981\u8ba9\u5b83\u9002\u5408\u4f60\u7684\u4e1a\u52a1\u5c31\u884c\u4e86\u3002\n\u7ec7\u5e03\u673a(\u5728\u6211\u5199\u4efb\u4f55\u4e1c\u897f\u4e4b\u524d\uff0c\u6211\u4f1a\u60f3\u201c\u6211\u80fd\u5236\u4f5c\u4e00\u4e2a\u89c6\u9891\u5417\uff1f\u201d\u5982\u679c\u662f\uff0c\u6211\u7528\u7ec7\u5e03\u673a)\u3002\n\u606d\u559c\u4f60\uff0c\u4f19\u8ba1\uff01\u4f60\u5df2\u7ecf\u5230\u4e86\u7ec8\u70b9\uff0c\u73b0\u5728\u662f\u4e0b\u4e00\u5173\u7684\u65f6\u5019\u4e86\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u201c\u9ed1\u5ba2\u5e1d\u56fd\u201d\uff0c\u5e76\u77e5\u9053\u53d6\u80dc\u9700\u8981\u54ea\u4e9b\u65e0\u5f62\u7684\u4e1c\u897f\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u6218\u7565\u548c\u6218\u672f\u3002\u9057\u61be\u7684\u662f\uff0c\u8fd9\u53ea\u662f\u6e38\u620f\u768420%\u3002\n\u73b0\u5728\u4f60\u662f\u9a6c\u91cc\u5965\uff0c\u4f46\u4f60\u60f3\u6210\u4e3a\u8d85\u7ea7\u9a6c\u91cc\u5965\uff0c\u5728\u7a7a\u4e2d\u98de\u6765\u98de\u53bb\uff0c\u6254\u706b\u7403\u3002\n\u6211\u5173\u6ce8\u7684\u4e8b\u60c5\u51e0\u4e4e\u603b\u80fd\u5b8c\u6210\u3002\u56f0\u96be\u7684\u90e8\u5206\u662f\u627e\u51fa\u4ec0\u4e48\u8db3\u591f\u91cd\u8981\uff0c\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4ec0\u4e48\u3002\u6211\u5199\u8fd9\u4e2a\u5e16\u5b50\u662f\u56e0\u4e3a\u6211\u60f3\u5206\u4eab\u6211\u4e3a\u4e86\u6210\u529f\u800c\u5173\u6ce8\u7684\u4e8b\u60c5\uff0c\u5e76\u7ed9\u4f60\u4e00\u4e2a\u6ed1\u96ea\u7f06\u8f66\u3002\u6210\u529f\u4f1a\u7559\u4e0b\u86db\u4e1d\u9a6c\u8ff9\uff0c\u6240\u4ee5\u53ea\u8981\u6a21\u4eff\u6211\u5c31\u884c\u4e86\u3002\n\u4e00\u4e2a\u4eba\u5f88\u96be\u505a\u91cd\u8981\u7684\u5de5\u4f5c\u3002\u4f60\u7684\u5de5\u4f5c\u662f\u5efa\u7acb\u4e00\u4e2a\u7a33\u56fa\u7684\u56e2\u961f\u548c\u826f\u597d\u7684\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u3002\u6211\u559c\u6b22\u548c\u806a\u660e\u4eba\u4e00\u8d77\u5de5\u4f5c\u3002\u4e0d\u8981\u505a\u90a3\u79cd\u6574\u5929\u5750\u5728\u5730\u4e0b\u5ba4\u91cc\u5de5\u4f5c\u7684\u4eba\uff0c\u540e\u6765\u624d\u610f\u8bc6\u5230\u4f60\u7684\u4e66\u5446\u5b50\u90bb\u5c45\u6709\u4f60\u62fc\u56fe\u4e2d\u7f3a\u5931\u7684\u90a3\u4e00\u5757\u3002\n\u8981\u62e5\u6709\u4e00\u5bb6\u751f\u610f\u5174\u9686\u7684\u9910\u5385\uff0c\u6211\u9700\u8981\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u4e00\u7fa4\u6328\u997f\u7684\u4eba\u3002\u5927\u591a\u6570\u4eba\u82b1\u8d39\u6bd5\u751f\u79ef\u84c4\u5236\u4f5c\u5b8c\u7f8e\u7684\u6c49\u5821(\u4ea7\u54c1)\uff0c\u7ed3\u679c\u5374\u53d1\u73b0\u987e\u5ba2(\u5e02\u573a)\u5e76\u4e0d\u997f\u3002\u90a3\u662f\u54c8\u65af\u7279\u6797\u5012\u9000\u7684\u4eba\u3002\u5728\u89c2\u770bLaw&amp\uff1bOrder SVU\u91cd\u64ad\u7684\u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u572820\u5206\u949f\u5185\u5f04\u6e05\u695a\u4eba\u4eec\u5728\u641c\u7d22(Google)\u3001\u89c2\u770b(YouTube)\u3001\u8d2d\u4e70(Amazon)\u548c\u5206\u4eab(BuzzSumo)\u7684\u5185\u5bb9\u3002\n\u5411\u4e00\u7fa4\u8ba4\u8bc6\u3001\u559c\u6b22\u548c\u4fe1\u4efb\u4f60\u7684\u4eba\u63a8\u9500\u4f60\u7684\u4ea7\u54c1\u662f\u6700\u597d\u7684\u65b9\u5f0f\u3002\u8fd9\u662f\u4e00\u9879\u8270\u82e6\u7684\u5de5\u4f5c\uff0c\u4f46\u8fd9\u662f\u503c\u5f97\u7684\uff0c\u5144\u5f1f\u3002\u7ed9\u4eba\u4ee5\u4ef7\u503c\u3002\u5efa\u7acb\u5f71\u54cd\u529b\u3002\u6269\u5927\u4f60\u7684\u7c89\u4e1d\u7fa4\u3002\u5176\u4ed6\u7684\u4e00\u5207\u90fd\u4f1a\u81ea\u884c\u89e3\u51b3\u7684\u3002\n\u6211\u8861\u91cf\u6211\u7684\u751f\u610f\u4e2d\u6700\u91cd\u8981\u76843-5\u4ef6\u4e8b\u3002\u7136\u540e\u6211\u95ee\u81ea\u5df1\uff0c\u201c\u6211\u600e\u6837\u624d\u80fd\u6539\u8fdb\u6211\u7684\u6307\u6807\u5462\uff1f\u201d\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u6211\u7684\u5f85\u529e\u4e8b\u9879\u6e05\u5355\u3002\u8fd9\u6709\u52a9\u4e8e\u6211\u96c6\u4e2d\u6ce8\u610f\u529b\u3002\u4e13\u6ce8\u662f\u6211\u7684\u8d85\u80fd\u529b\u3002\n\u6211\u4e0d\u5728\u4e4e\u4efb\u4f55\u4e00\u4e2a\u4eba\u600e\u4e48\u60f3\u3002\u6211\u5173\u6ce8\u7684\u662f\u89c4\u6a21\u53ef\u89c2\u7684\u6f5c\u5728\u5ba2\u6237\u7fa4\u4f53\u6240\u505a\u7684\u4e8b\u60c5\u3002\u4f60\u542c\u5230\u4e86\u5417\uff1f\u6211\u5173\u6ce8\u7684\u662f\u4ed6\u4eec\u7684\u6240\u4f5c\u6240\u4e3a\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u7684\u60f3\u6cd5\u6216\u8a00\u8bba\u3002\u4eba\u4eec\u901a\u5e38\u4f1a\u544a\u8bc9\u4f60\u4e00\u4ef6\u4e8b\uff0c\u800c\u505a\u4e00\u4e9b\u5b8c\u5168\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\u53bb\u4f60\u7684\u610f\u89c1\u5427\u3002\u6211\u505a\u5b9e\u9a8c\uff0c\u6536\u96c6\u6570\u636e\uff0c\u6d4b\u91cf\u7ed3\u679c\uff0c\u7136\u540e\u91c7\u53d6\u884c\u52a8\u3002\n\u96f7\u00b7\u6234\u5229\u5965(Ray Dalio)\u3001\u6770\u514b\u00b7\u535a\u683c\u5c14(Jack Bogle)\u3001\u6770\u592b\u00b7\u8d1d\u4f50\u65af(Jeff Bezos)\u548c\u6211\u7814\u7a76\u7684\u5176\u4ed6\u4eba\u57fa\u672c\u4e0a\u90fd\u8bf4\u4e86\u540c\u6837\u7684\u8bdd\uff1a\u627f\u62c5\u5f97\u8d77\u7684\u98ce\u9669\uff0c\u5bfb\u6c42\u8d85\u9ad8\u7684\u56de\u62a5\u3002\u57285\uff1a1\u7684\u56de\u62a5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u641e\u7838\u56db\u6b21\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u5728\u4e00\u4e2a\u8d62\u5bb6\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u6536\u652f\u5e73\u8861\u3002\u6211\u559c\u6b22\u8fd9\u4e9b\u8d54\u7387\u3002\n\u5408\u4f5c\u662f\u5f88\u68d2\u7684\uff0c\u4f46\u53ea\u6709\u5728\u4f60\u53d6\u5f97\u4e00\u4e9b\u6210\u529f\u4e4b\u540e\uff0c\u5b83\u4eec\u624d\u503c\u5f97\u8ffd\u6c42\u3002\u8fd9\u662f\u771f\u7684\uff0c\u56e0\u4e3a\u4eba\u4eec\u5e76\u4e0d\u662f\u771f\u7684\u60f3\u5e2e\u52a9\u4f60\uff0c\u4ed6\u4eec\u662f\u60f3\u5e2e\u52a9\u81ea\u5df1\u3002\u5f53\u4f60\u4e0d\u6210\u529f\u65f6\uff0c\u4ed6\u4eec\u5f88\u96be\u770b\u51fa\u4e0e\u4f60\u5408\u4f5c\u4f1a\u5bf9\u4ed6\u4eec\u6709\u4ec0\u4e48\u5e2e\u52a9\u3002\u4f60\u8d8a\u6210\u529f\uff0c\u5c31\u8d8a\u5bb9\u6613\u627e\u5230\u80fd\u8ba9\u4f60\u4e00\u98de\u51b2\u5929\u7684\u5408\u4f5c\u4f19\u4f34\u3002\n\u5927\u591a\u6570\u4eba\u4e0d\u4f1a\u652f\u6301\u4f60\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u4f1a\u6068\u4f60\uff0c\u5e76\u8bd5\u56fe\u6467\u6bc1\u4f60\u3002\u522b\u628a\u8fd9\u4ef6\u4e8b\u653e\u5728\u5fc3\u4e0a\u3002\u4e0d\u8981\u56e0\u4e3a\u751f\u6c14\u6216\u5fc3\u70e6\u610f\u4e71\u800c\u6d6a\u8d39\u7cbe\u529b\u3002\u76f8\u4fe1\u4f60\u4e0d\u662f\u4ed6\u4eec\u7684\u5de5\u4f5c\uff0c\u90a3\u662f\u4f60\u7684\u5de5\u4f5c\uff0c\u6211\u7684\u670b\u53cb\u3002\u53d6\u5f97\u6210\u529f\uff0c\u7136\u540e\u5199\u4e00\u7bc7\u50cf\u8fd9\u6837\u7684\u5e16\u5b50\u6765\u5e2e\u52a9\u4ed6\u4eec\u3002\n\u6211\u771f\u7684\u7ed9\u51fa\u4e86\u653b\u7565\uff0c\u6211\u4f1a\u5728\u8bc4\u8bba\u4e2d\u56de\u7b54\u95ee\u9898\u3002\u4f46\u5927\u591a\u6570\u4eba\u8fd8\u6ca1\u6709\u8bfb\u5230\u8fd9\u4e00\u6b65\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u95ee\u95ee\u9898\uff0c\u4e5f\u4e0d\u4f1a\u91c7\u53d6\u884c\u52a8\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u6b63\u5728\u5b66\u4e60\u5982\u4f55\u4f7f\u7528Sketch\u8bbe\u8ba1\u81ea\u5df1\u7684\u5fbd\u6807\u3002\n\u83b7\u5f97\u6709\u9650\u8d23\u4efb\u516c\u53f8\uff0c\u8bbe\u8ba1\u6f02\u4eae\u7684\u5fbd\u6807\uff0c\u5bfb\u627e\u5b8c\u7f8e\u7684\u57df\u540d\uff0c\u505a\u591a\u5e74\u7684\u5e02\u573a\u8c03\u67e5\uff0c\u8fc7\u591a\u5730\u8003\u8651\u4f60\u7684\u4e0b\u4e00\u6b65\u884c\u52a8\uff0c\u503e\u542c\u618e\u6068\u4f60\u7684\u4eba/\u5de8\u9b54\u7684\u58f0\u97f3\uff0c\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u4eba\u4eec\u4ece\u4e0d\u91c7\u53d6\u884c\u52a8\u5e76\u6700\u7ec8\u5931\u8d25\u7684\u539f\u56e0\u3002\n\u4e0d\u8981\u8fc7\u4e8e\u81ea\u4fe1\uff0c\u4ee5\u4e3a\u4f60\u65e0\u6240\u4e0d\u80fd\u3002\u540c\u65f6\uff0c\u4e5f\u8981\u76f8\u4fe1\u81ea\u5df1\uff0c\u4e0d\u8981\u603b\u662f\u4e3a\u522b\u4eba\u7684\u89c2\u70b9\u800c\u8fc7\u5ea6\u4f18\u5316\u3002\u901a\u8fc7\u5c0f\u5b9e\u9a8c/\u6d4b\u8bd5\u6536\u96c6\u60a8\u81ea\u5df1\u7684\u6570\u636e\uff0c\u5e76\u4ece\u4e2d\u83b7\u53d6\u6570\u636e\u3002\n\u6211\u4e0d\u60f3\u628a\u6258\u5c3c\u00b7\u7f57\u5bbe\u65af\u90fd\u653e\u5728\u4f60\u8eab\u4e0a\uff0c\u4f46\u4f60\u771f\u7684\u80fd\u505a\u5230\u3002\u8fd9\u662f\u4e00\u9879\u8270\u82e6\u7684\u5de5\u4f5c\u3002\u6709\u65f6\u5019\u5f88\u7cdf\u7cd5(\u5c31\u50cf\uff0c\u771f\u7684\u5f88\u7cdf\u7cd5)\u3002\u4f60\u8d8a\u6210\u529f\uff0c\u4ec7\u6068\u7684\u4eba\u5c31\u8d8a\u591a\u3002\u7231\u597d\u6d88\u5931\u4e86\uff0c\u53cb\u8c0a\u6d88\u9000\u4e86\u3002\n\u4f46\u597d\u4e8b\u4e0e\u574f\u4e8b\u4e4b\u6bd4\u662f100\u4e07\u6bd41\u3002\u6240\u4ee5\u76f8\u4fe1\u6211\uff0c\u4f60\u4f1a\u660e\u767d\u7684\u3002\u5982\u679c\u4f60\u9700\u8981\u5e2e\u52a9\uff0c\u6211\u4f1a\u5e2e\u4f60\u7684\u3002\n\u5982\u679c\u4f60\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7\u518d\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff0c\u56e0\u4e3a\u8fd9\u662f\u4f60\u7684\u6ed1\u96ea\u7f06\u8f66\uff0c\u6240\u4ee5\u53bb\u8ba9\u5b83\u4e0b\u96ea\u5427\u3002\n\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u80fd\u7ed9\u4f60\u8db3\u591f\u7684\u4fe1\u5fc3\u548c\u7cbe\u529b\u53bb\u5de5\u4f5c\u3002\n\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\uff0c\u4f60\u6b63\u5728\u5904\u7406\uff0c\u5e76\u4e14\u8ba4\u4e3a\u6211\u4f1a\u662f\u4e00\u4e2a\u5f88\u9177\u7684\u5408\u4f5c\u4f19\u4f34\uff0c\u6216\u8005\u53ea\u662f\u60f3\u8981\u4e00\u4e9b\u9f13\u52b1\uff0c\u90a3\u4e48\u8bf7\u5728\u8bc4\u8bba\u4e2d\u544a\u8bc9\u6211\u3002\n\u8003\u8651\u5230DM\u7684\u8bf7\u6c42\uff0c\u6211\u7f16\u8f91\u4e86\u6dfb\u52a0\u6211\u7684Facebook\u7fa4\uff1a\u5982\u679c\u4f60\u60f3\u52a0\u5165\u6211\u7684\u793e\u533a\uff0c\u6211\u8ba1\u5212\u5728\u90a3\u91cc\u66f4\u8be6\u7ec6\u5730\u8c08\u8bba\u6240\u6709\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u90a3\u5c31\u8ba9\u6211\u4eec\u6765\u5427\uff0c\u56de\u5bb6\u5427\u3002\u6211(\u6b64\u65f6\u6b64\u523b)\u4ecd\u5728\u5efa\u7acb\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u8ba1\u5212\u5728\u90a3\u91cc\u6709\u66f4\u591a\u7684\u95ee\u7b54\u6d3b\u52a8\u3002", "note_en": "TL;DR. Me and my college buddy took our startup to $323,000.43 in 14 months and we will soon pass $1,000,000 in annual recurring revenue. I\u2019m creating this post to give you a ski lift up the hard-fought mountain of success. I wish someone had done that for me.\n   Turn off your Law &amp; Order reruns. Settle in and pick the  Red Pill so we can go into the Matrix.\n [Important: This post is not intended to sell or promote anything homie. It&#39;s my small way of paying it forward to entrepreneurs, a community I deeply care about. Can&#39;t be more clear than that.]\n  I\u2019m the founder and CEO of  Smart Alto the easiest way to set 15-minute phone appointments with homebuyers.\n Real estate agents advertise homes on Zillow, Realtor.com, Homes.com and other places. The problem is when homebuyers want to meet with real estate agents to view properties, real estate agents almost never respond to the inquiries because they\u2019re busy doing other stuff.\n We built technology that sends text messages to those homebuyers within 2 minutes, asks them a few simple questions, and then sets 15-minute phone appointments on the real estate agent\u2019s calendar. That way, the homebuyer always gets their questions answered and can then schedule time with the real estate agent to go see the home.\n I used to work for a real estate brokerage to set appointments for real estate agents, so I know this problem very well.\n  I\u2019m pulling back the curtain on my startup and going to show you exactly what I did to take it from $0 to $500,000/year and beyond.\n This (admittedly) long post includes the exact Facebook and Google ads, landing pages, copy, sales playbooks, Facebook posts, integrations, videos, websites, pricing strategies and practically everything I\u2019ve used to grow my business.\n I\u2019m going to show you what I screwed up (so you can skip my mistakes) and what I got right (so you can copy my success).\n It doesn&#39;t matter how fast you go if you\u2019re running in the wrong direction. I wish someone would have done this for me when I was a newbie. Instead, I had to piecemeal crap for years, lose money, and fight tooth and nail to climb the entrepreneurial mountain.\n Well, you can skip that step because this post is your  Ski Lift to the top of the mountain, so let\u2019s make it  Snowfall (inside joke, keep reading and you\u2019ll get it).\n These are the most important things I focused on to start growing fast (read: this is what you should focus on too).\n [Important note: Per the  PII guidelines, I hid the names, email addresses and phone numbers of customers when necessary.]\n  Most folks screw up because they want to change the world with a fancy idea. They ultimately sell something no one wants to buy and go broke. Start with a hungry, burger-loving customer base and sell them burgers, man.  Click to see how I learn about my customers to sell them what they want.\n  My main goal is to increase website conversions. I want at least 3% of website visitors to schedule a demo with my sales team. My website answers 7 questions.  Click to see the 7 questions my website answers.\n  I pay for eyeballs. I\u2019ve got an outdated blog and my SEO sucks, but who cares? I\u2019m not a publisher so screw all the marketing gurus who demand I write new content everyday.  Click to see my entire marketing funnel, from the Facebook and Google ads I run to the landing pages I use.\n  This is my secret weapon. The smartest thing I\u2019ve ever done as a marketer is double down on showcasing customer results. This one strategy will have you feeling like  Franklin Saint from Snowfall when he realized he was finally going to be rich. I created a handful of videos showing my customer\u2019s results and blasted them all over social media, email and everywhere else my potential customers hangout.  Watch my Snowfall.\n  If I can\u2019t first build a community of people who trust me, then I won\u2019t build a business. I want to be the  Pied Piper for customers who desperately have a problem and money to solve it. My community has been ROI positive from day one and is the gift that keeps on giving. These fans know I have their best interest at heart, so they follow me.  Click to see me build a community that makes me thousands of dollars every month.\n  So far I\u2019ve been talking about how to generate demos for my sales team. But demos don\u2019t matter without a way to turn them into money. We created a simple playbook. No fancy scripts. No phony salesmanship. Just a simple process on what happens when we get a new lead. This isn\u2019t as hard as you think. It just takes a little time and a lot of heart.  Click to see our sales playbook.\n  We started with a single $200/month price point. We left so much money on the table that I still cry every time I think about it. The best thing we\u2019ve done is increase our price and start selling annual deals. Now we have customers who pay us as little as $300/month and as much as $70,000/year. Same product. Different prices. More money.  Click to see the evolution of our pricing strategy.\n  Okay folks, here\u2019s the hard truth: I\u2019m a country boy from the backwoods of Alabama. I was born without marketing knowledge, product knowledge, or sales knowledge. I\u2019ve never studied business or design at fancy schools. I run a technology startup, but I\u2019ve never written a single line of code.\n  If I can do this, then you can too. (Read that last sentence again). I\u2019m just a guy. I work hard, I&#39;m smart, and I learn from my mistakes. But at the end of the day...I\u2019m just a guy from the backwoods of Alabama.\n Success leaves clues. There is no reason you can\u2019t copy my work and tailor them for your own business. There is nothing new under the sun, you just have to make it fit your business.\n  Loom (Before I write anything I think \u201ccan I create a video\u201d. If so, I use Loom)\n Congrats homie! You have reached the end, and now it\u2019s time for the next level.\n   But keep reading if you want to go further into the Matrix and know the intangibles it takes to win. So far we\u2019ve talked strategy and tactics. Sadly, that\u2019s only 20% of the game.\n Right now you\u2019re Mario, but you want to be Super Mario flying through the air and throwing fireballs.\n    The things I focus on almost always get done. The hard part is figuring out what is important enough to focus on. I made this post because I wanted to share what I focus on to achieve success and give you a ski lift. Success leaves clues so just copy me.\n  It\u2019s hard to do important work by yourself. Your job is to build a solid team and great partnerships. I love working with smart people. Don\u2019t be the guy who sits in your basement working all day only to realize later in life your nerdy neighbor had the missing piece to your puzzle.\n  The number one thing I need to have a thriving restaurant is a starving crowd. Most folks spend their entire life savings making the perfect burger (product) only to discover customers (market) aren\u2019t hungry. That\u2019s Hustlin\u2019 Backwards man. You can easily figure out what people are searching (Google), watching (YouTube), buying (Amazon), and sharing (BuzzSumo) in 20 minutes while watching Law &amp; Order SVU reruns.\n  The best way to launch your product is to a group of people who know, like and trust you. This is hard work, but it\u2019s worth it, bro. Give people value. Build influence. Grow your fan base. Everything else takes care of itself.\n  I measure the 3-5 most important things in my business. Then I ask myself, \u201chow can I improve my metrics?\u201d. The answers to that question results in my to-do list. That helps me focus. Focus is my superpower.\n  I don\u2019t care what any  one  person thinks. I focus on what sizable groups of potential  customers do.  Did you catch that? I focus on what they  do rather than what they think or say. People will often tell you one thing and do something entirely different. Screw your opinion. I set up experiments, collect data, measure results, and take action.\n  Ray Dalio, Jack Bogle, Jeff Bezos, and other folks I study all basically say the same thing: take affordable risks and look for outsized returns. With a 5:1 return, you can screw up four times and still break even with one winner. I like those odds.\n  Partnerships are great, but they\u2019re only worth pursuing after you\u2019ve had some success. That\u2019s true because people don\u2019t really want to help you, they want to help themselves. And when you\u2019re not successful it\u2019s hard for them to see how working with you is going to help them. The more successful you are, the easier it is to land a partnership that skyrockets your success.\n   Most people aren\u2019t going to support you. In fact, they\u2019re probably going to hate and try to tear you down. Don\u2019t take this personally. And don\u2019t waste your energy by getting mad or upset. It\u2019s not their job to believe in you, that\u2019s your job, my friend. Become successful and then make a post like this one to help them out.\n  I\u2019m literally giving the playbook and I\u2019ll be around to answer questions in the comments. But most people haven\u2019t read this far, and they won\u2019t ask questions, and they won\u2019t take action. Instead, they\u2019re learning how to design their own logo using Sketch.\n  Getting an LLC, designing a pretty logo, hunting for the perfect domain name, doing years of market research, overthinking your next move, listening to haters/trolls, etc are all reasons people never take action and ultimately fail.\n  Don\u2019t be overconfident and think you have all the answers. In the same breath, believe in yourself and don\u2019t over-optimize for someone else&#39;s opinion all the time. Collect your own data with small experiments/tests and take it from there.\n  I don\u2019t want to get all Tony Robbins on you man, but YOU REALLY CAN DO THIS. It\u2019s hard work. Sometimes it sucks (like, really sucks). The more successful you become, the more haters you get. Hobbies are lost, friendships fade.\n But the good outweighs the bad by 1,000,000 to 1. So trust me, you got it. And if you need help then I got you.\n If you\u2019re ever in doubt then refer back to this post because this is your  Ski Lift, so go make it  SnowFall.\n I hoped this post gave you the confidence and energy needed to get to work.\n  If you have an interesting problem you\u2019re working on and think I\u2019d be a cool partner or just want some encouragement then let me know in the comments.\n   Given the DM request, I edited to add my Facebook Group: If you want to  join my community where I plan to talk about all this stuff in more detail then let&#39;s do it homie. I&#39;m still in the process of setting this up (at this very moment) and plan to have more Q&amp;A there.", "posttime": "2020-05-30 00:31:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u542f\u52a8,simple,\u9500\u552e", "title": "\u901a\u8fc7\u7b80\u5355\u7684\u542f\u52a8\uff0c\u572814\u4e2a\u6708\u5185\u4ece0\u7f8e\u5143\u589e\u52a0\u5230323,010.43\u7f8e\u5143", "title_en": "From $0 to $323,010.43 in 14 months with a simple startup", "transed": 1, "url": "https://www.reddit.com/r/Entrepreneur/comments/gs866a/from_0_to_32301043_in_14_months_with_a_simple/", "via": "", "real_tags": ["\u542f\u52a8", "simple", "\u9500\u552e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004271, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u9762\u662f\u4e00\u4e9b\u9700\u8981\u8003\u8651\u7684sysctl\u8bbe\u7f6e\u3002#/etc/sysctl.d/99-sysctl.conf#\u9632\u6b62\u81ea\u52a8\u52a0\u8f7d\u884c\u89c4\u7a0b#https://lore.kernel.org/patchwork/patch/1034150dev.tty.ldisc_autoload=0#\u5bf9FIFO\u3001\u786c\u94fe\u63a5\u3001\u5e38\u89c4\u6587\u4ef6\u548c\u7b26\u53f7\u94fe\u63a5\u7684\u989d\u5916\u4fdd\u62a4#https://patchwork.kernel.org/patch/10244781#\u7565\u9ad8\u4e8e&#34\uff1b1&#34\uff1b\u5bf9\u4e8eeachfs.protected_fifos=2fs.protected_hardlinks=1fs.protected_regular=2fs.protected_symlinks=1#\uff0c\u9632\u6b62\u975e\u7279\u6743\u7528\u6237\u67e5\u770bdmesg buffer#(linux\u5f3a\u5316\u7684\u7f3a\u7701)kernel.dmesg_restricte=1#\u7981\u7528kexec\u7cfb\u7edf\u8c03\u7528(\u53ef\u7528\u4e8e\u66ff\u6362\u6b63\u5728\u8fd0\u884c\u7684\u5185\u6838)#https://lwn.net/Articles/580269#(linux\u5f3a\u5316\u7684\u7f3a\u7701)kernel.kexec_LOAD_DISABLED=1#\u9650\u5236\u66b4\u9732\u5185\u6838\u6307\u9488#https://lwn.net/Articles/420403#(linux\u5f3a\u5316\u7684\u7f3a\u7701)kernel.kptr_restricted=2#\u9650\u5236\u4f7f\u7528\u3002\u7531\u975e\u7279\u6743\u7528\u6237\u521b\u5efa\u7684\u6027\u80fd\u4e8b\u4ef6\u7cfb\u7edf#https://lwn.net/Articles/696216#(linux\u5f3a\u5316\u7684\u9ed8\u8ba4)\u5185\u6838.perf_event_paranoid=3#\u7981\u7528&#34\uff1b\u9b54\u672fSysRq\u952e&#34\uff1bFunctionality#https://security.stackexchange.com/questions/138658#https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1861238#\u5982\u679c\u4e0d\u9700\u8981\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u8bf7\u53d6\u6d88\u6ce8\u91ca#kernel.sysrq=0#\u52a0\u5f3abpf JIT\u7f16\u8bd1\u5668\u5e76\u9650\u5236\u975e\u7279\u6743\u4f7f\u7528bpf#https://www.zerodayinitiative.com/advisories/ZDI-20-350#https://lwn.net/Articles/660331#(linux\u5f3a\u5316\u7684default)net.core.bpf_jit_harden=2kernel.unprivileged_bpf_disabled=1#\u3002\u7981\u7528\u975e\u7279\u6743\u7528\u6237\u547d\u540d\u7a7a\u95f4#https://lwn.net/Articles/673597#(linux\u5f3a\u5316\u7684\u9ed8\u8ba4\u8bbe\u7f6e)\u5185\u6838.unvileged_userns_clone=0#\u542f\u7528yama ptrace\u9650\u5236#https://www.kernel.org/doc/Documentation/security/Yama.txt#(linux\u5f3a\u5316\u7684\u9ed8\u8ba4\u8bbe\u7f6e)#\u8bbe\u7f6e\u4e3a&#34\uff1b3\u548c#34\uff1b\u5982\u679c\u4e0d\u9700\u8981\u4f7f\u7528ptrace dkernel.yama.ptrace_scope=1#\u53cd\u5411\u8def\u5f84\u8fc7\u6ee4\u4ee5\u9632\u6b62\u67d0\u4e9bIP\u6b3a\u9a97\u653b\u51fb#(\u5728\u67d0\u4e9bdistributions)net.ipv4.conf.all.rp_filter=1net.ipv4.conf.default.rp_filter=1#\u4e2d\u9ed8\u8ba4\u7981\u7528ICMP\u91cd\u5b9a\u5411\u548cRFC1620\u5171\u4eab\u4ecb\u8d28redirectsnet.ipv4.conf.all.accept_redirects=0net.ipv4.conf.all.secure_redirects=0net.ipv4.conf.all.send_redirects=0net.ipv4.conf.all.shared_media=0net.ipv4.conf.default.accept_redirects=0net.ipv4.conf.default.secure\u3002_redirects=0net.ipv4.conf.default.send_redirects=0net.ipv4.conf.default.shared_media=0net.ipv6.conf.all.accept_redirects=0net.ipv6.conf.default.accept_redirects=0#\u4e0d\u5141\u8bb8\u6e90\u8def\u7531packetsnet.ipv4.conf.all.accept_source_route=0net.ipv4.conf.default.accept_source_route=0net.ipv6.conf.all.accept_source_route=0net.ipv6.conf.default.accept_source_route=0#\u5ffd\u7565\u53d1\u9001\u5230\u5e7f\u64ad\u5730\u5740\u7684ping(\u84dd\u7cbe\u7075\u653b\u51fb\u5e38\u89c1)net.ipv4.icmp_ECHO_IGNORE_\u3002\u5e7f\u64ad=1#\u5ffd\u7565\u4f2a\u9020\u7684ICMP\u9519\u8befresponsesnet.ipv4.icmp_ignore_bogus_error_responses=1#\u9632\u8303tcp\u4e2d\u7684\u65f6\u95f4\u7b49\u5f85\u6697\u6740\u98ce\u9669#https://tools.ietf.org/html/rfc1337net.ipv4.tcp_rfc1337=1#\u9009\u62e9\u6027tcp ack\u5df2\u5bfc\u81f4\u53ef\u8fdc\u7a0b\u5229\u7528\u7684\u5d29\u6e83#https://lwn.net/Articles/791409#\u53d6\u6d88\u6ce8\u91ca\u4ee5\u6f5c\u5728\u5730\u9632\u8303\u5c06\u6765\u7684\u653b\u51fb#(\u53ef\u80fd\u4f1a\u5728\u9ad8\u5ea6\u62e5\u585e\u7684\u7f51\u7edc\u4e2d\u5f15\u5165\u6027\u80fd\u653b\u51fb)#net.ipv4.tcp_sack=0#\u7981\u7528tcp\u65f6\u95f4\u6233\u4ee5\u907f\u514d\u6cc4\u9732\u67d0\u4e9b\u7cfb\u7edf\u4fe1\u606f#https://www.\u3002whonix.org/wiki/Disable_TCP_and_ICMP_Timestampsnet.ipv4.tcp_timestamps=0#\u63d0\u9ad8\u4e86mmap#https://lwn.net/Articles/667790#\u7684aslr\u6709\u6548\u6027(linux-hardedICMP\u5ffd\u7565default)vm.mmap_rnd_bits=32vm.mmap_rnd_compat_bits=16#\u56de\u5e94\u8bf7\u6c42#\u5982\u679c\u6b64\u7cfb\u7edf\u4e0d\u8fd9\u6837\u505a\uff0c\u5219\u53d6\u6d88\u6ce8\u91ca&#39\uff1b\u4e0d\u9700\u8981\u54cd\u5e94ping#net.ipv4.icmp_ECHO_IGNORE_ALL=1#\u7981\u7528\u5728\u7f51\u7edc\u63a5\u53e3\u4e0a\u521b\u5efaIPV6\u5730\u5740#\u5982\u679cIPV6\u4e0d\u5728use#net.ipv6.conf.all.disable_ipv6=1#net.ipv6.conf.default.disable_ipv6=1#net.ipv6.conf.lo.disable_ipv6=1\u4e2d\uff0c\u5219\u53d6\u6d88\u6ce8\u91ca\u3002\n\u4e30\u5bcc\u7684\u5185\u6838\u6587\u6863\u751a\u81f3\u6709\u5173\u4e8e\u6bcf\u4e2a\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f\u3002\u8981\u5c06\u65b0\u914d\u7f6e\u5e94\u7528\u5230\u6b63\u5728\u8fd0\u884c\u7684\u7cfb\u7edf\uff0cRun\uff1a\u66f4\u6539\u4e5f\u5c06\u5728\u4e0b\u6b21\u91cd\u65b0\u542f\u52a8\u65f6\u81ea\u52a8\u83b7\u53d6\u3002\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u5e94\u8be5\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u5b89\u88c5\u67d0\u79cd\u9632\u706b\u5899\u3002\u5bf9\u4e8eLinux\u4e0a\u7684\u6b64\u4efb\u52a1\uff0c\u6709\u8bb8\u591a\u9009\u62e9\u3002\u6211\u627e\u5230\u7684\u6700\u7b80\u5355\u7684\u524d\u7aef\u53eb\u505aUFW\uff0c\u5b83\u4f7f\u7528\u7c7b\u4f3cOpenBSD PF\u7684\u8bed\u6cd5\uff0c\u53ea\u9700\u8981\u4e00\u5206\u949f\u5c31\u80fd\u4e0a\u624b\u3002#Pacman-S UFW#sed-i-e&#39\uff1bs/^\\([^#].*\\)/#\\1/g&#39\uff1b/etc/ufw/sysctl.conf#UFW\u62d2\u7edd\u8f93\u5165#ufw\u5141\u8bb8\u8f93\u51fa#systemctl enable UFW#ufw enable\u3002\n\u8fd9\u5c06\u521b\u5efa\u963b\u6b62\u4f20\u5165\u8fde\u63a5\u5e76\u5141\u8bb8\u4f20\u51fa\u8fde\u63a5\u7684\u57fa\u672c\u9632\u706b\u5899\u89c4\u5219\u96c6\u3002\u5982\u679c\u8fd9\u5c31\u662f\u60a8\u60f3\u8981\u7684\uff0c\u90a3\u4e48\u60a8\u5c31\u5b8c\u6210\u4e86\u3002(\u5173\u4e8eUFW\u7684\u4e00\u4e2a\u607c\u4eba\u7684\u90e8\u5206\u662f\u5b83\u9644\u5e26\u7684/etc/ufw/sysctl.conf\u6587\u4ef6\u3002\u8be5\u6587\u4ef6\u5c06\u8986\u76d6mainsysctl\u914d\u7f6e\u4e2d\u7684\u67d0\u4e9b\u503c\uff0c\u56e0\u6b64\u6211\u6ce8\u91ca\u6389\u4e86\u90a3\u91cc\u7684\u6240\u6709\u5185\u5bb9\u3002)\u3002\u5982\u679c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u771f\u6b63\u9605\u8bfbUFW\u521b\u5efa\u7684\u65e5\u5fd7\uff0c\u4e0d\u59a8\u5173\u95ed\u8be5\u529f\u80fd\u3002\u53e6\u4e00\u4e2a\u9700\u8981\u8003\u8651\u7684\u9009\u9879\u662f\u5bf9\u4f20\u51fa\u6d41\u91cf\u91c7\u53d6\u66f4\u4e25\u683c\u7684\u7b56\u7565\uff1a\u53ea\u5141\u8bb8\u5728\u60a8\u5b9e\u9645\u4f7f\u7528\u7684\u7aef\u53e3\u4e0a\u8fdb\u884c\u8fde\u63a5\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u8fde\u63a5\u5230\u60a8\u60f3\u8981\u5141\u8bb8\u7684\u4e3b\u673a\u3002\u8fd9\u91cc&#3", "note_en": "Here are some sysctl settings to consider. # /etc/sysctl.d/99-sysctl.conf# prevent the automatic loading of  line disciplines#  https://lore.kernel.org/patchwork/patch/1034150dev.tty.ldisc_autoload=0#  additional protections for fifos, hardlinks, regular files, and symlinks#  https://patchwork.kernel.org/patch/10244781# slightly tightened up from the  systemd default values of &#34;1&#34; for eachfs.protected_fifos=2fs.protected_hardlinks=1fs.protected_regular=2fs.protected_symlinks=1# prevent unprivileged users from viewing the dmesg buffer# (linux-hardened default)kernel.dmesg_restrict=1# disable the kexec system call (can be used to replace the running kernel)#  https://lwn.net/Articles/580269# (linux-hardened default)kernel.kexec_load_disabled=1# impose restrictions on exposing kernel pointers#  https://lwn.net/Articles/420403# (linux-hardened default)kernel.kptr_restrict=2# restrict use of the performance events system by unprivileged users#  https://lwn.net/Articles/696216# (linux-hardened default)kernel.perf_event_paranoid=3# disable the &#34; magic sysrq key&#34; functionality#  https://security.stackexchange.com/questions/138658#  https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1861238# uncomment if the use of this feature is not needed#kernel.sysrq=0# harden the BPF JIT compiler and restrict unprivileged use of BPF#  https://www.zerodayinitiative.com/advisories/ZDI-20-350#  https://lwn.net/Articles/660331# (linux-hardened default)net.core.bpf_jit_harden=2kernel.unprivileged_bpf_disabled=1# disable unprivileged user namespaces#  https://lwn.net/Articles/673597# (linux-hardened default)kernel.unprivileged_userns_clone=0# enable yama ptrace restrictions#  https://www.kernel.org/doc/Documentation/security/Yama.txt# (linux-hardened default)# set to &#34;3&#34; if the use of ptrace is not neededkernel.yama.ptrace_scope=1# reverse path filtering to prevent some ip spoofing attacks# (default in some distributions)net.ipv4.conf.all.rp_filter=1net.ipv4.conf.default.rp_filter=1# disable  icmp redirects and  RFC1620 shared media redirectsnet.ipv4.conf.all.accept_redirects=0net.ipv4.conf.all.secure_redirects=0net.ipv4.conf.all.send_redirects=0net.ipv4.conf.all.shared_media=0net.ipv4.conf.default.accept_redirects=0net.ipv4.conf.default.secure_redirects=0net.ipv4.conf.default.send_redirects=0net.ipv4.conf.default.shared_media=0net.ipv6.conf.all.accept_redirects=0net.ipv6.conf.default.accept_redirects=0# disallow  source-routed packetsnet.ipv4.conf.all.accept_source_route=0net.ipv4.conf.default.accept_source_route=0net.ipv6.conf.all.accept_source_route=0net.ipv6.conf.default.accept_source_route=0# ignore pings sent to a broadcast address (common for  smurf attacks)net.ipv4.icmp_echo_ignore_broadcasts=1# ignore bogus icmp error responsesnet.ipv4.icmp_ignore_bogus_error_responses=1# protect against time-wait assassination hazards in tcp#  https://tools.ietf.org/html/rfc1337net.ipv4.tcp_rfc1337=1# selective tcp acks have resulted in remotely exploitable crashes#  https://lwn.net/Articles/791409# uncomment to potentially guard against future attacks# (may introduce a performance hit in highly congested networks)#net.ipv4.tcp_sack=0# disable tcp timestamps to avoid leaking some system information#  https://www.whonix.org/wiki/Disable_TCP_and_ICMP_Timestampsnet.ipv4.tcp_timestamps=0# increase aslr effectiveness for mmap#  https://lwn.net/Articles/667790# (linux-hardened default)vm.mmap_rnd_bits=32vm.mmap_rnd_compat_bits=16# ignore icmp echo requests# uncomment if this system doesn&#39;t need to respond to pings#net.ipv4.icmp_echo_ignore_all=1# disable creation of ipv6 addresses on network interfaces# uncomment if ipv6 is not in use#net.ipv6.conf.all.disable_ipv6=1#net.ipv6.conf.default.disable_ipv6=1#net.ipv6.conf.lo.disable_ipv6=1\nThe extensive kernel documentationhas even more information about each of these options. To apply the new configuration to a running system, run: Changes will also be picked up automatically on the next reboot. Most systems should have some kind of firewallin place. There are a number of choicesfor this task on Linux. The simplest frontend I&#39;ve found is called UFW.It uses an OpenBSD PF-like syntax andonly takes a minute to get going. #  pacman -S ufw#  sed -i -e &#39;s/^\\([^#].*\\)/# \\1/g&#39; /etc/ufw/sysctl.conf#  ufw deny in#  ufw allow out#  systemctl enable ufw#  ufw enable\nThis would create a basic firewall ruleset that blocks incoming connectionsand allows outgoing ones. If that&#39;s what you want, you&#39;re done.(One annoying part about UFW is the  /etc/ufw/sysctl.conf filethat comes with it. This file will override certain values in the mainsysctl configuration, so I comment out everything there.) If you&#39;re never going to actually read the logs UFW creates, might as wellturn that feature off.  Another option to consider is a stricter policy for outgoing traffic: onethat only permits connections on ports you actually use, and only to hoststhat you want to allow. Here&#39;s an example. #  ufw deny in#  ufw allow out proto tcp to any port 22#  ufw allow out proto tcp to any port 443#  ufw allow out proto udp to 192.168.1.1 port 123#  ufw allow out proto udp to 192.168.1.1 port 53#  ufw reject out\nThis would allow outgoing SSH and HTTPS connections to any host, allowoutgoing DNS and NTP to a local server, and block all other outgoing traffic.Logging might be more useful in that case to detect misbehaving programs. Make sure the ordering of your ruleset is correct and exactly what you want.Despite being inspired by OpenBSD&#39;s PF syntax, UFW uses a &#34;first match wins&#34;system rather than how PF does it the other way around. In other words, ifyou block all connections in rule 1 and allow a specific connection in rule2, it will still be blocked by the first one. Many people use  sudo,but few use it safely. Some distributions configure it in a way that allowsregular users to become root by simply typing their own password. My concernwith any usage of sudo that involves typing a password to elevate privilegesstems from the fact that X11 allows any application to capture keystrokes. My recommended sudo setup allows a regular user to do some administrativetasks as root without typing a password. These tasks, in my case, includeupdating packages and rebooting. Once my machine is set up the way I likeit, that&#39;s really all I ever need to do as root. # /etc/sudoersDefaults env_resetDefaults secure_path=&#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#34;Defaults umask=0022Defaults umask_overrideroot ALL=(ALL:ALL) ALLCmnd_Alias PACMAN = /usr/bin/pacman -SyuCmnd_Alias REBOOT = /sbin/reboot &#34;&#34;Cmnd_Alias SHUTDOWN = /sbin/poweroff &#34;&#34;bh ALL=(root) NOPASSWD: PACMANbh ALL=(root) NOPASSWD: REBOOTbh ALL=(root) NOPASSWD: SHUTDOWN\nSuch a setup would allow my user to run  pacman -Syu as root(but not any other pacman commands) as well as allow me to reboot andshut down the computer. For any other administrative tasks, I would log in as root on a virtualconsole (ctrl + alt + f2) and do them there. This is slightly inconvenient,but the danger of X11 keylogging is real. Don&#39;t believe me? Here&#39;s a tiny keyloggerthat can save the sudo password being typed for later exploitation. If a bug in a program allows the process to be compromised, an attacker canessentially do anything that program can do: connect to the internet, readfiles, write files, and so on. Sandboxingis a way to limit the potential damage a compromised process can do. Firejail is thetool I like the most for this task. It&#39;s easy to set up, provides reasonabledefaults, and can be further hardened with straightforward config files.To install it on Arch, issue the following: #  pacman -S firejail#  systemctl enable --now apparmor#  apparmor_parser -r /etc/apparmor.d/firejail-default#  firecfg#  echo   XXX &gt; /etc/firejail/firejail.users\nReplace   XXX with your regular,non-root username. Once that&#39;s in place,  firejail will create symbolic links toany installed applications for which it has a profile. These are placed inthe  /usr/local/bin directory, meaning that your  PATHenvironment variable should point there first. This can be achieved byexporting the variable in the user&#39;s shell rc file ( ~/.bashrcor similar) or in  /etc/profile for all users. Consider running  firecfg after you&#39;ve got all the programsinstalled that you&#39;ll need. Otherwise, it should be run again after any newapplications are installed in case Firejail has a profile for them. Additional capability restrictions can be put in place via custom profilesin the user&#39;s  ~/.config/firejail directory. If you wanted todisallow the Clementine music player from overwriting tags in your musiccollection, the following example might work. To test if it&#39;s working, use the  --list flag while the sandboxedapplication is running. More information and examples can be found in the buiding custom profilessection of the documentation. If your hardware has wireless or bluetooth capabilities and you want todisable them in software, rfkillcan do that. It&#39;s included with the util-linuxpackage. $  rfkill listID TYPE DEVICE SOFT HARD 0 bluetooth hci0 blocked unblocked 1 wlan phy0 blocked unblocked\nBlocking either or both at startup can be done by enabling the relevantservice: Replace  all with  bluetooth or  wlan as desired. Arch uses mkinitcpioto generate the initial ramdiskimage. This runs every time your kernel is updated, so I think it&#39;s worththe time to optimize it bit. The stock configuration file has this blocktowards the end: # /etc/mkinitcpio.conf[...]# COMPRESSION# Use this to compress the initramfs image. By default, gzip compression# is used. Use &#39;cat&#39; to create an uncompressed image.COMPRESSION=&#34;gzip&#34;#COMPRESSION=&#34;bzip2&#34;#COMPRESSION=&#34;lzma&#34;#COMPRESSION=&#34;xz&#34;#COMPRESSION=&#34;lzop&#34;#COMPRESSION=&#34;lz4&#34;# COMPRESSION_OPTIONS# Additional options for the compressor#COMPRESSION_OPTIONS=()\nAs it says, the script will use gzip compression if leftuntouched. The gzip algorithm is old, slow, single-threaded, and not evenvery good at making the file smaller. The process can be sped up by usingone of the more modern choices, like so: This would use the much better xz algorithm, which canalso use all available CPU threads for compression. Doing so makes the processof rebuilding the image much faster on even semi-modern computers. As a bonus,the resulting image is even a bit smaller. Honestly, the files in questionhere are so small (20-60MB) that compression isn&#39;t really needed. But atleast now it&#39;s faster. As the clocks on most computers have a tendency to drift over time,it&#39;s a good idea to run some kind of NTP client. There are a variety of optionsavailable.The base Arch install includes (and any systemd-based distribution willinclude) systemd-timesyncd,but I&#39;m not a big fan of it. If the thought of installing another packagefor a task that can technically be done with what you already have sendsa shiver down your spine, avert your eyes now and use that one.I recommend OpenNTPDinstead. It&#39;s lightweight and has an excellent security track record. It will use the  ntp.org poolby default for time synchronization: That will work &#34;fine,&#34; but the ntp.org pool includes a lot of low qualityservers. Some of them are run in virtual machines. Some of them don&#39;t workanymore and were never removed. The round-robin DNS might even give you aserver that&#39;s 100ms or more away from your actual location. Taking that intoconsideration, I&#39;d recommend using some known-good servers in the config fileas well. If having company names in the config file scares you for some reason, thereare plenty of other options.I only suggest the Apple and Cloudflare pools because they have high qualitynodes throughout the world and aren&#39;t likely to disappear any time soon. The  servers keyword instructs OpenNTPD to use multiple IPs fromthe domain, while  server means it will only use the first one.It would use one from each pool in this case. My only recommendation for PulseAudio (other than to avoid using it) is toenable two options in the config file:  Doing so will prevent the audio quality from being needlessly degraded.It also prevents some frustrating issueswith volume control. Other options to consider can be found in the audiophile-linuxrepository. This section is for random tidbits that didn&#39;t really fit into the other parts. I run my user with  umask77 by default, meaning that any newly created files will be unreadable byother users. My home directory is also mode 700. If a process running asanother non-root user is compromised, it would be unable to read my files.To accomplish this, put  umask 77 somewhere in the user&#39;s shellrc file ( ~/.bashrc or similar) and run: Never change root&#39;s umask value. Doing so will cause all sorts of problems. I also like putting my user&#39;s  ~/.cache directory in tmpfs toreduce disk writes. Everything that goes there is junk anyway. Outgoing DNS lookups can be encrypted with dnscrypt-proxy.There are other options like DNS over HTTPS and DNS over TLS, but I like theDNSCrypt protocol more because it doesn&#39;t rely on the certificate authoritymodel. The following non-security-related  sysctl settings have beenuseful in my experience: Linux supports multiple TCP congestion control algorithms.The  BBRalgorithm gives more consistent network throughput than the default in myexperience, especially for transatlantic file transfers. It may help a lot,or it may not make a difference at all, depending on the use case. The &#34; swappiness&#34;value controls how aggressively the kernel will swap out memory pages to disk.The default value of  60 is way too high for me, so I turn it downto  10 to prevent so much swapping. The systemd log can get pretty huge if you don&#39;t place any limiton it. Compression can also be enabled so that more information will fitin the smaller file. Adjust the size to whatever you think is reasonable.", "posttime": "2020-05-30 00:16:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u5b89\u5168,security,https", "title": "Linux\u5b89\u5168\u5f3a\u5316\u548c\u5176\u4ed6\u8c03\u6574", "title_en": "Linux Security Hardening and Other Tweaks", "transed": 1, "url": "https://vez.mrsk.me/linux-hardening.html", "via": "", "real_tags": ["linux", "\u5b89\u5168", "security", "https"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004269, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5e74\u524d\uff0c\u4f5c\u4e3a\u4e00\u540d\u5e74\u8f7b\u7684\u201c\u6765\u81ea\u94c1\u9508\u5730\u5e26\u201d\u7684\u4eba\uff0c\u4f60\u68a6\u60f3\u6210\u4e3a\u4e00\u540d\u7cfb\u7edf\u7a0b\u5e8f\u5458\uff0c\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\uff0c\u53ef\u4ee5\u6210\u4e3a\u4e00\u540d\u6df1\u6e0a\u89c2\u6d4b\u8005\u3002\u4f60\u60f3\u901a\u8fc7\u5c3d\u53ef\u80fd\u63a5\u8fd1\u91d1\u5c5e\u6765\u751f\u5b58\u3001\u547c\u5438\u548c\u6b7b\u4ea1\u3002\u60a8\u6210\u957f\u5728\u8fd9\u6837\u4e00\u4e2a\u4e25\u9177\u7684\u73af\u5883\u4e2d\uff1a\u9605\u8bfb\u6c47\u7f16\u8f93\u51fa\u4ee5\u5220\u51cf\u51e0\u6761\u6307\u4ee4\uff0c\u8bd5\u56fe\u7f16\u5199\u6700\u5feb\u7684\u4ee3\u7801\u3001\u6bb5\u9519\u8bef\u548c\u6587\u6863\u4e0d\u5b8c\u6574\u7684\u786c\u4ef6\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u4e3a\u4e86\u6210\u4e3a\u4e00\u540d\u7cfb\u7edf\u7a0b\u5e8f\u5458\u3002\u4f60\u6df1\u60c5\u5730\u56de\u987e\u90a3\u4e9b\u5e74\uff0c\u56e0\u4e3a\u5b83\u628a\u4f60\u53d8\u6210\u4e86\u4eca\u5929\u7684\u7a0b\u5e8f\u5458\u3002\u4e00\u4e2a\u65e0\u4e0e\u4f26\u6bd4\u7684\u6df1\u6e0a\u51dd\u89c6\u8005\uff0c\u4e00\u4e2a\u7cbe\u7075\uff0c\u4e00\u4e2a\u8ba9\u51e1\u4eba\u6050\u60e7\u548c\u5d07\u62dc\u7684\u4eba\uff0c\u4f60\u7ed9\u8fd9\u4e2a\u652f\u6491\u7740\u8fd9\u4e2a\u4e16\u754c\u7684\u57fa\u7840\u7684\u4e16\u754c\u5e26\u6765\u4e86\u5bc6\u7801\u3002\u4eca\u5929\u4f60\u662f\u5e94\u4e00\u4f4d\u670b\u53cb\u7684\u8981\u6c42\u6765\u9762\u8bd5\u7684\uff0c\u5e94\u8058\u7684\u662f\u4e00\u4f4d\u751f\u9508\u516c\u53f8\u7684\u804c\u4f4d\u3002\u4ed6\u4eec\u5e0c\u671b\u80fd\u591f\u96c7\u4f63\u4f60\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5c06\u7ea2\u5b9d\u77f3\u83f2\u5229\u65af\u7684\u610f\u5fd7\u5bfc\u5165\u6240\u6709\u4ece\u4f60\u624b\u6307\u95f4\u98de\u51fa\u7684\u4ee3\u7801\u4e2d\u53bb\u3002\u4ed6\u4eec\u5f53\u7136\u4e0d\u80fd\u5c31\u8fd9\u6837\u7ed9\u4f60\u8fd9\u4efd\u5de5\u4f5c\u3002\u5173\u4e8e\u4f60\u7684\u6280\u672f\u7684\u4f20\u8a00\u662f\u4e0d\u662f\u771f\u7684\uff0c\u4f60\u672a\u6765\u7684\u6f5c\u5728\u540c\u5fd7\u5fc5\u987b\u4eb2\u773c\u770b\u770b\u662f\u4e0d\u662f\u771f\u7684\u3002\u4f60\u770b\u7740\u4f60\u7684\u9762\u8bd5\u5b98\uff0c\u4ed6\u4f1a\u95ee\u4f60\u662f\u5426\u51c6\u5907\u597d\u5f00\u59cb\u4e86\u3002\u4f60\u70b9\u70b9\u5934\uff0c\u51c6\u5907\u597d\u627f\u62c5\u4efb\u4f55\u4ea4\u7ed9\u4f60\u7684\u4efb\u52a1\u3002\n\u7ed9\u4f60\u4e00\u4e2a\u5927\u5c0f\u4e3an+1\u7684\u6570\u7ec4\uff0c\u6574\u6570\u4e3a0\u5230n\u3002\u4f7f\u7528\u9488\u5bf9\u5927\u5c0f\u8fdb\u884c\u4f18\u5316\u7684\u7b97\u6cd5\u548c\u9488\u5bf9\u5927O\u4f18\u5316\u6267\u884c\u7684\u7b97\u6cd5\u5728\u5217\u8868\u4e2d\u67e5\u627e\u91cd\u590d\u9879\u3002\u9762\u8bd5\u5b98\u89e3\u91ca\u8bf4\uff0c\u8bf7\u786e\u4fdd\u53ea\u4f7f\u7528Rust\u7684\u7a33\u5b9a\u7248\u672c\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u662f\u6bcf\u665a\u90fd\u7528\u5230\u5b83\u3002&#34\uff1b\u4f60\u7684\u9762\u8bd5\u5b98\u89e3\u91ca\u8bf4\uff0c\u4f60\u7684\u9762\u8bd5\u5b98\u89e3\u91ca\u8bf4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5927\u5c0f\u4f18\u5316\u7684\u7b97\u6cd5\u548c\u4e00\u4e2a\u9488\u5bf9\u5927O\u4f18\u5316\u6267\u884c\u7684\u7b97\u6cd5\u5728\u5217\u8868\u4e2d\u67e5\u627e\u91cd\u590d\u9879\u3002\u5982\u679c\u6211\u5728O(1)\u4e2d\u53ea\u505a\u4e00\u4e2a\u65e2\u80fd\u505a\u4e24\u4ef6\u4e8b\u53c8\u80fd\u505a\u7684\u7b97\u6cd5\u6709\u5173\u7cfb\u5417\uff1f&#34\uff1b\u4f60\u4f1a\u95ee\u3002\u9762\u8bd5\u5b98\u56f0\u60d1\u5730\u770b\u7740\u4ed6\u4eec\u7684\u7b14\u8bb0\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u4ed6\u4eec\u88ab\u544a\u77e5\u53ef\u80fd\u7684\u7b54\u6848\u4e4b\u4e00\u3002\u4ed6\u4eec\u662f\u4e00\u540d\u5e74\u8f7b\u7684\u5de5\u7a0b\u5e08\uff0c\u4f60\u6b63\u5728\u63a5\u53d7\u4e3b\u8981\u5de5\u7a0b\u804c\u4f4d\u7684\u6d4b\u8bd5\u3002\u4ee4\u4eba\u9ad8\u5174\u7684\u662f\uff0c\u4f60\u5df2\u7ecf\u80fd\u591f\u8bc1\u660e\u4f60\u53ef\u4ee5\u505a\u597d\u4f60\u7684\u5de5\u4f5c\uff0c\u6559\u90a3\u4e9b\u5728\u8d44\u5386\u65b9\u9762\u6bd4\u4f60\u4f4e\u7684\u4eba\u3002&#34\uff1b\u55ef\uff0c\u5f53\u7136\u53ef\u4ee5\u3002\u4ed6\u4eec\u8bf4\uff0c\u5982\u679c\u4f60\u80fd\u5443\u8bc1\u660e\u8fd9\u4e00\u70b9\u7684\u8bdd\u3002\n\u4f60\u62ff\u51fa\u4f60\u7684MacBook\uff0c\u5145\u5f53\u4e0e\u6c83\u5179\u5c3c\u4e9a\u514b\u672c\u4eba\u8054\u7cfb\u7684\u6e20\u9053\uff0c\u8fd9\u6837\u4ed6\u5c31\u53ef\u4ee5\u50cf\u4ed6\u4ee5\u524d\u591a\u6b21\u505a\u8fc7\u7684\u90a3\u6837\u5f15\u5bfc\u4f60\u3002\u4f60\u6e05\u7a7a\u4e86\u81ea\u5df1\uff0c\u6210\u4e3a\u90a3\u4e9b\u51dd\u89c6\u7740\u4f60\u9762\u524d\u6df1\u6e0a\u7684\u4eba\u7684\u5668\u76bf\u3002\u8ba9\u6211\u4eec\u4ece\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\u6765\u5bb9\u7eb3\u53ec\u5524\u5f00\u59cb\u5427\u3002\u4f60\u4f1a\u8bf4\uff0c\u4e00\u5b9a\u8981\u89e3\u91ca\u4f60\u7684\u6d41\u7a0b\u3002\u9762\u8bd5\u5b98\u5fae\u5fae\u70b9\u70b9\u5934\uff0c\u4f46\u4ed6\u4eec\u4f3c\u4e4e\u6bd4\u4e4b\u524d\u66f4\u8b66\u60d5\u4e86\u3002\u4e5f\u8bb8\u53ec\u5524\u4e0d\u662f\u5408\u9002\u7684\u8bcd\u3002\u4e5f\u8bb8\u662f\u5492\u8bed\uff1f\u65e0\u8bba\u91c7\u7528\u54ea\u79cd\u65b9\u5f0f\uff0c\u60a8\u90fd\u53ef\u4ee5\u50cf\u6240\u6709Rustaceans\u4e00\u6837\u5728\u63a7\u5236\u53f0\u4e0a\u8f93\u5165\u9b54\u672f\u5355\u8bcd\uff0c\u91cd\u65b0\u5f00\u59cb\u4e16\u754c\u7684\u610f\u613f\u4e4b\u524d\u3001\u73b0\u5728\u548c\u4e4b\u540e\u3002\n\u597d\u7684\uff0c\u8ba9\u6211\u4eec\u8bbe\u7f6e\u6211\u4eec\u7684\u8d27\u5355\uff0c\u5c06\u9ad8\u8d28\u91cf\u7684\u624b\u5de5\u5236\u4f5c\u7684\u4ee3\u7801\u53d1\u9001\u7ed9\u6211\u4eec\u7684\u6700\u7ec8\u7528\u6237\u3002&#34\uff1b\u60a8\u6253\u5f00Cargo.toml\u6587\u4ef6\uff0c\u5e76\u5728\u5176\u4e2d\u586b\u5165\u60a8\u6839\u6df1\u8482\u56fa\u7684\u4f18\u5316\u5492\u8bed\u3002\n[Package]\u540d\u79f0=&#34\uff1b\u8bbf\u8c08&#34\uff1b\u7248\u672c=&#34\uff1b0.1.0&#34\uff1b\u4f5c\u8005=[&#34\uff1bZ\u0334\u0327\u0321\u0322\u0328\u031bA\u0337\u0321\u0321\u0322\u0322\u0321L\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032c\u0335\u0321\u0327\u0322\u031b\u0333\u010a\u0337\u0322\u0328\u0322\u033c\u0330\u01ea\u0337\u0328\u0327\u0322\u031b\u034eM\u0335\u0321\u0328\u0316\u0339\u0323E\u0334\u0322\u0327\u0328\u0328\u031bS\u0338\u0331\u0320\u0339\u032e\u0323&lt\uff1bZ\u0334\u0327\u0321\u0322\u0328\u031bA\u0337\u0321\u0321\u0322\u0322\u0321L\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032ctruecodegen=&#34\uff1b2018&#34\uff1b[dependencies][profile.release]panic=&#34\uff1b\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032c&#34\uff1blto=truecodegen-unit=1opt-level=&#34\uff1bs&#34\uff1b\n\u201c\u7b49\u7b49\uff0c\u4f60\u7684\u540d\u5b57\u600e\u4e48\u4e86\uff1f\u201d\u9762\u8bd5\u5b98\u95ee\u9053\u3002\u4f60\u628a\u5b83\u4eec\u6325\u5230\u4e00\u8fb9\u56de\u7b54\u8bf4\uff0c\u4e0d\u8981\u62c5\u5fc3\uff0c\u751c\u7f8e\u7684\u590f\u65e5\u5b69\u5b50\uff0c\u514d\u5f97\u4f60\u50cf\u6211\u4e00\u6837\u88ab\u8bc5\u5492\u3002\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u5df2\u7ecf\u9488\u5bf9\u4ee3\u7801\u751f\u6210\u5927\u5c0f\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u4ece\u4ee3\u7801\u4e2d\u5c3d\u53ef\u80fd\u591a\u5730\u5254\u9664\u4e86\u4e0d\u5fc5\u8981\u7684\u6c47\u7f16\u6307\u4ee4\u3002\u4ed6\u4eec\u95ee\u9053\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5e94\u8be5\u4f7f\u7528z\u6765\u8868\u793a\u5927\u5c0f\u3002&#34\uff1b\u4ec0\u4e48\uff1f\u5e76\u5728\u8f93\u51fa\u4e2d\u6dfb\u52a0\u4e00\u6761\u5b8c\u5168\u65e0\u7528\u7684\u6307\u4ee4\uff1f\u6211\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\u3002&#34\uff1b\n\u60a8\u53ef\u4ee5\u5feb\u901f\u6253\u5f00\u7f16\u8f91\u5668\u4ee5\u8bbf\u95eesrc/main.rs\u3002\u4f60\u677e\u5f00\u6307\u8282\uff0c\u91ca\u653e\u9650\u5236\u5668\uff0c\u5f00\u59cb\u4f60\u7684\u5492\u8bed\u3002\n\u7b49\u7b49\uff0c\u7b49\u7b49\u3002\u6211\u8bf4\u4f7f\u7528\u7a33\u5b9a\u7684\u94c1\u9508\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e9b\u90fd\u662f\u591c\u95f4\u529f\u80fd\u3002\u8fd8\u6709\uff0c\u4f60\u5230\u5e95\u9700\u8981\u8fd9\u4e9b\u505a\u4ec0\u4e48\uff1f&#34\uff1b\u9762\u8bd5\u5b98\u6124\u6012\u5730\u95ee\u3002&#34\uff1b\u6211\u4f7f\u7528\u7684\u662f\u7a33\u5b9a\u7684\u94c1\u9508\u7f16\u8bd1\u5668\u3002\u5c31\u50cf\u4f60\u95ee\u7684\u90a3\u6837\uff0c\u4f60\u8bf4\u7ed9\u4ed6\u4eec\u770b\u7248\u672c\u53f7\uff0c\u867d\u7136\u8fd9\u66f4\u591a\u7684\u662f\u4e00\u4e2a\u6280\u672f\u7ec6\u8282\uff0c\u4f46\u662f\u4ed6\u4eec\u8fd8\u4e0d\u77e5\u9053\u3002\u55ef\uff0c\u597d\u5427\uff0c\u7ba1\u5b83\u5462\uff0c\u7ee7\u7eed\u5f80\u524d\u8d70\u3002\n\u6ca1\u6709libstd\uff0c\u6ca1\u6709\u6838\u5fc3\uff0c\u53ea\u6709\u6211\uff0c\u5f53\u4f60\u653e\u7f6e\u8fd9\u6761\u7ebf\u65f6\uff0c\u4f60\u4f4e\u58f0\u8bf4\u7740\uff0c\u8fd9\u5c06\u4f7f\u4f60\u771f\u6b63\u6446\u8131\u4efb\u4f55\u94c1\u9508\u4f9d\u8d56\u7684\u675f\u7f1a\u3002\n\u7136\u540e\u4f60\u5c31\u4f1a\u770b\u5230\u9762\u8bd5\u5b98\u8138\u4e0a\u90a3\u53ef\u601c\u7684\u6050\u6016\u8868\u60c5\u3002\u597d\u7684\uff0c\u8ba9\u4ed6\u4eec\u6df1\u5165\u4e86\u89e3\u7cfb\u7edf\u7684\u7f16\u7a0b\u771f\u6b63\u662f\u4ec0\u4e48\u3002\u597d\u4e86\uff0cIO\u662f\u51fd\u6570\u5f0f\u7a0b\u5e8f\u5458\u8bd5\u56fe\u901a\u8fc7\u4f7f\u7528\u7eaf\u51fd\u6570\u6765\u907f\u514d\u7684\u4e1c\u897f\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u67e5\u770b\u67d0\u4e9b\u4e1c\u897f\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u67d0\u79cd\u7c7b\u578b\u7684syscall\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u662f\u5b58\u5728\u7684\u3002\u6211\u4eec\u5c06\u94fe\u63a5\u5230libc\uff0c\u8fd9\u6837\u6211\u4eec\u81f3\u5c11\u53ef\u4ee5\u4f7f\u7528printf\u3002\u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u4f7f\u7528\u6b64\u884c\u76f4\u63a5\u94fe\u63a5\u5230OSX libc\uff0c\u4f46\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u94fe\u63a5\u4e0d\u540c\u7684libc\u5b9e\u73b0\u3002\n\u6709\u4efb\u4f55\u4f9d\u8d56\u90fd\u4f1a\u8ba9\u4f60\u5f88\u75db\u82e6\uff0c\u4f46\u4f60\u4eca\u5929\u4e0d\u662f\u60f3\u8981\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u90a3\u662f\u4e0b\u5468\u7684\u9762\u8bd5\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u76ee\u524d\u8fd8\u6ca1\u6709\u53ef\u4ee5\u4f7f\u7528\u7684\u5e93\uff0c\u56e0\u6b64\uff0c\u5c31\u50cf\u94c1\u5320\u5c0f\u5fc3\u7ffc\u7ffc\u5730\u5c06\u91d1\u5c5e\u73af\u8fde\u63a5\u5728\u4e00\u5957\u94fe\u5f0f\u90ae\u4ef6\u4e2d\u4e00\u6837\uff0c\u60a8\u53ef\u4ee5\u94fe\u63a5\u5230\u53d7\u4eba\u5c0a\u656c\u7684libc\u3002\n#[ALLOW(NON_CAMEL_CASE_TYPES)]pub type c_char=i8\uff1b#[Allow(Non_CAMEL_CASE_TYPE)]pub type c_int=i32\uff1b#[link(name=&#34\uff1bsystem&#34\uff1b)]//osx libcextern&#34\uff1bC&#34\uff1b{pub FN printf(format\uff1a*const c_char\uff0c.)-&gt\uff1bc_int\uff1b}\u3002\n\u597d\u7684\uff0c\u597d\u7684\uff0c\u4f46\u662f\u4f60\u8981\u8c08\u5230\u771f\u6b63\u7684\u95ee\u9898\u5417\uff1f\u9762\u8bd5\u5b98\u95ee\uff0c\u663e\u7136\u662f\u56e0\u4e3a\u4f60\u5728\u8d39\u5fc3\u4f7f\u7528C\u4ee3\u7801\u800c\u4e0d\u662fprintln\u3002\u54e6\uff0c\u751c\u871c\u7684\u590f\u65e5\u5b69\u5b50\u3002\u4e00\u5207\u90fd\u5efa\u7acb\u5728\u79d1\u5b81\u6c49\u548c\u91cc\u5947\u7684\u4f5c\u54c1\u4e4b\u4e0a\u3002\u6211\u4eec\u4e0d\u80fd\u8f7b\u6613\u9003\u8131\u4ed6\u4eec\u7684\u9057\u4ea7\u3002\n\u597d\u7684\uff0c\u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e9b\u5b8f\uff0c\u4ee5\u4fbf\u7a0d\u540e\u51cf\u5c11\u4e00\u4e9b\u91cd\u590d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u5fc5\u987b\u628a\u4ed6\u4eec\u653e\u5728\u8fd9\u91cc\uff0c\u5426\u5219\uff0c\u5982\u679c\u4ed6\u4eec\u5728\u6211\u4eec\u53ec\u5524\u4ed6\u4eec\u7684\u5730\u65b9\u51fa\u73b0\uff0c\u4ed6\u4eec\u5c31\u6839\u672c\u4e0d\u5b58\u5728\u4e86\u3002\u4f60\u8bd5\u56fe\u8ba9\u660e\u663e\u5931\u53bb\u4eb2\u4eba\u7684\u9762\u8bd5\u5b98\u76f8\u4fe1\uff0c\u4f60\u786e\u5b9e\u7406\u89e3\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u800c\u4e14\u4f60\u4e0d\u4f1a\u65e0\u7f18\u65e0\u6545\u5730\u628a\u4ed6\u4eec\u62c9\u6765\u62c9\u53bb\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u6839\u672c\u4e0d\u5b58\u5728\u4e86\u3002\u4f60\u8bd5\u56fe\u8ba9\u660e\u663e\u5931\u53bb\u4eb2\u4eba\u7684\u9762\u8bd5\u5b98\u76f8\u4fe1\uff0c\u4f60\u786e\u5b9e\u542c\u61c2\u4e86\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u800c\u4e0d\u662f\u65e0\u7f18\u65e0\u6545\u5730\u628a\u4ed6\u4eec\u62c9\u6765\u62c9\u53bb\u3002\n\u5b8f\u89c4\u5219\uff01Matches{($Expression\uff1aexpr\uff0c$($Pattern\uff1aPAT)|+$(if$Guard\uff1aexpr)\uff1f)=&gt\uff1b{Match$Expression{$($Pattern)|+$(if$Guard)\uff1f=&gt\uff1btrue\uff0c_=&gt\uff1bfalse}MACRO_RULES\uff01copy_clone_eq_impls{($($t\uff1aty)*)=&gt\uff1b{$(\u5bf9$t{}\u5b9e\u65bd\u526f\u672c$t{}\u5bf9$t\u5b9e\u65bd\u514b\u9686{fn clone(&amp\uff1bself)-&gt\uff1bself{*self}}\u9488\u5bf9$t\u5b9e\u65bd\u90e8\u5206Eq{fn eq(&amp\uff1bself\uff0cther\uff1a&amp\uff1b$t)-&gt\uff1bbool{(*self)==(*Other)})*}}\u3002\n\u4ed6\u4eec\u95ee\u9053\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4ece\u8fd9\u4e9b\u4e1c\u897f\u4e2d\u63a8\u5bfc\u51fa\u6765\u5462\uff1f\u4f60\u6b7b\u6b7b\u5730\u770b\u7740\u4ed6\u4eec\u7684\u773c\u775b\uff0c\u5411\u4ed6\u4eec\u89e3\u91ca\uff0c\u6211\u4e0d\u80fd\u901a\u8fc7\u6d3e\u751f\u5b8f\u4e3a\u57fa\u5143\u5b9e\u73b0\u8fd9\u4e9b\u3002\u6211\u5fc5\u987b\u201c\u6210\u4e3a\u201d\u7f16\u8bd1\u5668\u672c\u8eab\u624d\u80fd\u4f7f\u5b83\u4eec\u5de5\u4f5c\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u7ee7\u7eed\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u82f9\u679c\u6d3e\u8981\u505a\uff0c\u9996\u5148\u6211\u4eec\u5fc5\u987b\u53d1\u660e\u5b87\u5b99\u3002\u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e9b\u7279\u6027\uff0c\u5e76\u5bfc\u5165\u4e00\u4e9b\u6211\u4eec\u5c06\u9700\u8981\u7684\u7f16\u8bd1\u5668\u5185\u90e8\u529f\u80fd\u3002\n#[lang=&#34\uff1bsize&#34\uff1b]\u9152\u5427\u7279\u5f81\u5927\u5c0f{}#[lang=#34\uff1bFreeze&#34\uff1b]\u81ea\u52a8\u7279\u5f81\u51bb\u7ed3{}extern&#34\uff1bruust-inherent&34\uff1b{FN Offset&lt\uff1bT&gt\uff1b(dst\uff1a*const T\uff0cOffset\uff1aisize)-&gt\uff1b*const T\uff1b}#[lang=#34\uff1bReceiver&#34\uff1b]\u7279\u5f81\u63a5\u6536\u8005{}#[lang=&#34\uff1b]\u7279\u5f81\u63a5\u6536\u8005{}#[lang=&#34\u3002{type output\uff1a\uff1fsize\uff1bfn index(&amp\uff1bself\uff0cindex\uff1aidx)-&gt\uff1b&amp\uff1bself\uff1a\uff1aoutput\uff1b}\u9488\u5bf9[T]\u5b9e\u65bd&lt\uff1bT\uff0cI&&gt;\uff1bIndex&lt\uff1bi&gt\uff1b\uff0c\u5176\u4e2dI\uff1aSliceIndex&lt\uff1b[T]&gt\uff1b\uff0c{type output=I\uff1a\uff1aoutput\uff1bfn index(&amp\uff1bself\uff0cindex\uff1ai)-&gt\uff1b&amp\uff1bi\uff1a\uff1aoutput{index.index\u3002{type output\uff1a\uff1fsize\uff1bFN GET(Self\uff0cSlice\uff1a&amp\uff1bT)-&gt\uff1bOption&lt\uff1b&amp\uff1bSelf\uff1a\uff1aOutput&gt\uff1b\uff1bFN get_mut(Self\uff0cSlice\uff1a&amp\uff1bmut T)-&gt\uff1bOption&lt\uff1b&amp\uff1bMUT Self\uff1a\uff1aoutput&gt\uff1b\uff1bUnSafe FN Get_Unecked(Self\uff0cSlice\uff1a&amp\uff1bT)-&gt\uff1b&amp\uff1bSelf\uff1a\uff1aOUTPUT\uff1b\u4e0d\u5b89\u5168FN GET\u3002MUT T)-&gt\uff1b&amp\uff1bmut self\uff1a\uff1aoutput\uff1bfn index(self\uff0cSlice\uff1a&amp\uff1bT)-&gt\uff1b&amp\uff1bself\uff1a\uff1aoutput\uff1bfn index_mut(self\uff0cSlice\uff1a&amp\uff1bmut T)-&gt\uff1b&amp\uff1bmut self\uff1a\uff1aoutput\uff1b}#[lang=#34\uff1bcopy&#34\uff1b]\u7279\u5f81\u590d\u5236\uff1a\u514b\u9686{}\u7279\u5f81\u514b\u9686\uff1a\u5927\u5c0f{fn\u514b\u9686(&amp\uff1bself)-&gt\uff1bMUT Self\uff0c\u6765\u6e90\uff1a&amp\uff1bSelf){*Self=Soure.clone()}}#[lang=&#34\uff1beq&#34\uff1b]\u7279\u5f81PartialEq&lt\uff1bRHS\uff1a\uff1fSIZED=Self&gt\uff1b{fn eq(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool\uff1bFN ne(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool{\uff01self.eq(Other)(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool{\uff01self.eq(Other)\u3002]\u7279\u5f81PartialOrd&lt\uff1brhs\uff1a\uff1fsize=Self&gt\uff1b\uff1aPartialEq&lt\uff1brhs&gt\uff1b{fn Partial_CMP(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bOption&lt\uff1bOrding&gt\uff1bFN lt\uff1b(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool{Matches\uff01(self.part_cmp(Other)\uff0cSome(Less))}FN\u3002Bool{Matches\uff01(self.part_cmp(Other)\uff0cSome(Less)|Some(Equity))}fn GT(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool{Matches\uff01(self.Partial_CMP(Other)\uff0cSome(Greater))}FN ge(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool{Matches\uff01(self.Partial_CMP(Other)\uff0cSome(Greater)|Some(\u7b49\u4e8e\u3002]\u7279\u5f81\u975e{type output\uff1bfn not(Self)-&gt\uff1bself\uff1a\uff1aoutput\uff1b}#[lang=&#34\uff1bneg&#34\uff1b]\u7279\u5f81\u8d1f{type output\uff1bfn neg(Self)-&gt\uff1bself\uff1a\uff1aoutput\uff1b}#[lang=&#34\uff1bsub&#34\uff1b]\u7279\u5f81Sub&lt\uff1brhs=self&gt\uff1b{type output\uff1bFn sub(self\uff0crhs\uff1arhs)-&gt\uff1bself\uff1aoutput\uff1b\n\u5c31\u50cf\u4efb\u4f55\u914d\u5f97\u4e0a\u4ed6\u4eec\u7684\u6d77\u76d0\u7684\u597d\u7684Rustacean\u4e00\u6837\uff0c\u4f60\u5df2\u7ecf\u628a\u6bcf\u4e00\u70b9libstd\u548clibcore\u90fd\u94bb\u8fdb\u4e86\u4f60\u7684\u8111\u6d77\uff0c\u6240\u4ee5\u4f60\u53ea\u628a\u4f60\u9700\u8981\u7684\u4e1c\u897f\u653e\u8fdb\u53bb\uff0c\u5176\u4ed6\u4ec0\u4e48\u90fd\u6ca1\u6709\u3002\u4f60\u76f8\u4fe1\u96f6\u6210\u672c\u62bd\u8c61\uff0c\u4e0d\uff0c\u4f60\u662f\u96f6\u6210\u672c\u62bd\u8c61\u3002\u751a\u81f3\u53ef\u80fd\u53ea\u4e3a\u4e00\u4e2aCPU\u5468\u671f\u6216\u66f4\u591a\u7684CPU\u4ed8\u8d39\u4e5f\u4f1a\u8ba9\u4f60\u53cd\u611f\u3002\u53ea\u8fd0\u884c\u5fc5\u987b\u8fd0\u884c\u7684\u5185\u5bb9\uff0c\u4e0d\u8fd0\u884c\u5176\u4ed6\u5185\u5bb9\u3002\n\u7b49\u7b49\uff0c\u8fd9\u4e9b\u7279\u5f81\u548c\u9879\u76ee\u4e0d\u662f\u6765\u81ealibcore\u548clibstd\u5417\uff1f\u4ec0\u4e48\u3002\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u4f60\u7684\u9762\u8bd5\u5b98\u95ee\u9053\uff0c\u663e\u7136\u5f88\u82e6\u607c\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u8fd9\u4e48\u591a\u4ee3\u7801\u3002\u662f\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f#\uff01[no_core]\uff0c\u5b83\u4eec\u6839\u672c\u4e0d\u5b58\u5728\u4e86\u3002\u6211\u4eec\u53ea\u662f\u786e\u5207\u5730\u5b9a\u4e49\u4e86\u6211\u4eec\u9700\u8981\u4ece\u90a3\u91cc\u5f97\u5230\u4ec0\u4e48\uff0c\u6ca1\u6709\u66f4\u591a\u7684\u4e1c\u897f\u3002\u6b64\u5916\uff0c\u6211\u8fd8\u5c3d\u53ef\u80fd\u660e\u786e\u5730\u8ba9\u60a8\u770b\u5230\u5728\u4efb\u4f55\u673a\u5668\u4e0a\u7f16\u7a0b\u6240\u9700\u7684\u771f\u5b9e\u6210\u672c\uff0c\u53bb\u6389\u8bed\u6cd5\u548c\u9884\u7f6e\u4ee3\u7801\u3002\u8bf4\u5230\u7cd6\u6709\u5496\u5561\u5417\uff1f\u6211\u559c\u6b22\u9ed1\u8272\uff0c\u5c31\u50cf\u6211\u5356\u7ed9\u4ed6\u4eec\u7684\u7075\u9b42\u4e00\u6837\uff0c\u4ee5\u4fbf\u5728\u8fd9\u7c7b\u4e8b\u60c5\u4e0a\u505a\u5f97\u66f4\u597d\u3002\u4e5f\u8bb8\u8fd9\u4e2a\u81ea\u5632\u7684\u7b11\u8bdd\u6709\u70b9\u8fc7\u5934\u4e86\uff0c\u5373\u4f7f\u8fd9\u662f\u771f\u7684\u3002\u4f60\u53ea\u662f\u60f3\u7f13\u548c\u4e00\u4e0b\u6c14\u6c1b\uff0c\u4f46\u9762\u8bd5\u5b98\u4f3c\u4e4e\u5047\u88c5\u4ec0\u4e48\u4e5f\u6ca1\u542c\u5230\u3002\n\u597d\u7684\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u5b9e\u73b0\u6240\u6709\u8fd9\u4e9b\u7279\u6027\uff01&#34\uff1b\u60a8\u53ef\u4ee5\u8bf4\uff0c\u624b\u6307\u5728\u952e\u76d8\u4e0a\u98de\u6765\u98de\u53bb\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u63d2\u5165\u6a21\u5f0f\u3002Esc\uff0ch\uff0cj\uff0ck\uff0cl\uff1f\u54c8\uff0c\u90a3\u4e9b\u94a5\u5319\u662f\u7ed9\u90a3\u4e9b\u6ca1\u6709\u732e\u8eab\u4e8e\u6df1\u6e0a\u7684\u4eba\u7684\u3002\n\u5bf9[T]\u5b9e\u65bd&lt\uff1bT\uff0cI&&gt;\u7d22\u5f15&lt\uff1bI&gt\uff1b\u5176\u4e2dI\uff1aSliceIndex&lt\uff1b[T]&gt\uff1b\uff0c{type output=I\uff1a\uff1aoutput\uff1bfn index(&amp\uff1bself\uff0cindex\uff1ai)-&gt\uff1b&amp\uff1bi\uff1a\uff1aoutput{index.index(Self)}}\u7279\u5f81\u5207\u7247\u7d22\u5f15&lt\uff1bT\uff1a\uff1fsize&gt\uff1b{type output\uff1a\uff1fsize\uff1bfn get(self\uff0cSelf\uff1a\uff1aoutput&gt\uff1b\uff1bfn get_mut(self\uff0cSlice\uff1a&amp\uff1bmut T)-&gt\uff1boption&lt\uff1b&amp\uff1bmut self\uff1a\uff1aoutput&gt\uff1b\uff1bunSafe FN get_unecked(Self\uff0cSlice\uff1a&amp\uff1bT)-&gt\uff1b&amp\uff1bself\uff1a\uff1aoutput\uff1bunsafe fn get_uncheck_mut(self\uff0cSlice\uff1a&amp\uff1bmut)-&gt\uff1b&amp\uff1bmut self\uff1a\uff1aoutput\uff1bself\uff1a\uff1aoutput\uff1bfn index_mut(self\uff0cSlice\uff1a&amp\uff1bmut T)-&gt\uff1b&amp\uff1bmut self\uff1a\uff1aoutput\uff1b}#[lang=&#34\uff1bcopy&#34\uff1b]\u7279\u5f81\u590d\u5236\uff1a\u514b\u9686{}\u7279\u5f81\u514b\u9686\uff1a\u5927\u5c0f{fn clone(&amp\uff1bself)-&gt\uff1bself\uff1bfn clone_from(&amp\uff1bmut self\uff0csource\uff1a&amp\uff1bself){*self=source e.clone()}}#[lang=&#\u3002rhs\uff1a\uff1fsize=Self&gt\uff1b{fn eq(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool\uff1bFN ne(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool{\uff01self.eq(Other)}}#[lang=&#34\uff1bPartial_Ord&34\uff1b]\u7279\u5f81PartialOrd&lt\uff1bRHS\uff1a\uff1fSIZED=Self&gt\uff1b\uff1aPartialEq=Self&lt\uff1b\uff1aPartial Eq&lt\uff1bRHS)-&gt\uff1boption&lt\uff1b\u8ba2\u8d2d&gt\uff1b\uff1bFN lt(&amp\uff1bself\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1bbool{Matches\uff01(self.part_cmp(Other)\uff0cSome(Less))}FN LE(&amp\uff1bSelf\uff0cOther\uff1a&amp\uff1bRHS)-&gt\uff1b\n#[lang=&#34\uff1bstart&#34\uff1b]fn start&lt\uff1bT\uff1aTerminate+&#39\uff1bstatic&gt\uff1b(main\uff1afn()-&gt\uff1bT\uff0c_\uff1aisize\uff0c_\uff1a*const*const U8)-&gt\uff1bisize{main().report()as isize}fn main(){unsafe{printf(&#34\uff1b\u503c\u4e3a\uff1a%d\\n\\0&#34\uff1bas*const U8)-&gt\uff1bisize{main().report(){unsafe{printf(&#34\uff1b\uff1b\u503c\u4e3a\uff1a%d\\n\\0&#34\uff1bas*const\u3002\n\u5c31\u662f\u8fd9\u4e2a\u3002\u6700\u540e\u4e00\u6bb5\u65f6\u95f4\u3002\u8fd9\u79cd\u671f\u5f85\u7b80\u76f4\u8981\u4e86\u4f60\u7684\u547d\u3002\u6b64\u7c7b\u578b\u7b7e\u540d\u7684\u7528\u9014\u662f\u4ec0\u4e48\uff1f\u4ece\u4ec0\u4e48\u5f00\u59cb\uff1f\uff01\u751f\u9508\u6ca1\u6709\u8fd0\u884c\u65f6\u95f4\uff01&#34\uff1b\uff0c\u4f60\u7684\u9762\u8bd5\u5b98\u652f\u652f\u543e\u543e\u5730\u8bf4\u3002\u4f60\u8f6c\u5411\u4ed6\u4eec\uff0c\u9b54\u9b3c\u66fe\u7ecf\u73a9\u8fc7\u7684\u6700\u4f1f\u5927\u7684\u628a\u620f\u662f\u8ba9C\u548cRust\u7a0b\u5e8f\u5458\u76f8\u4fe1\u4ed6\u4eec\u7684\u8bed\u8a00\u6ca1\u6709\u8fd0\u884c\u65f6\u3002&#34\uff1b\u4f60\u56de\u5230\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\u3002\u4f60\u53f9\u4e86\u53e3\u6c14\u8bf4\uff0c\u770b\uff0c\u6211\u4eec\u5feb\u505a\u5b8c\u4e86\u3002\u8fd9\u662f\u6211\u53d1\u8a93\u7684\u6700\u540e\u4e00\u70b9\u3002&#34\uff1b\u60a8\u5f00\u59cb\u952e\u5165\u6700\u540e\u7684\u5355\u8bcd\uff0c\u5f53\u60a8\u6700\u7ec8\u6267\u884c\u4ee3\u7801\u65f6\uff0c\u8fd9\u5c06\u4f7f\u60a8\u62e5\u6709O(1)\u7684\u8fd0\u884c\u65f6\u95f4\u548cO(1)\u7684\u7a7a\u95f4\u4f7f\u7528\u91cf\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f60\u6240\u505a\u7684\u5492\u8bed\u4e2d\uff0c\u786e\u5b9e\u662f\u6700\u795e\u5947\u7684\u3002\n\u53d1\u5e03\u5e38\u91cf\u91cd\u590d\uff1aU64={\u53d1\u5e03\u5e38\u91cf\u5217\u8868\uff1a&amp\uff1b&39\uff1b\u9759\u6001[U64]={\u4e0d\u5b89\u5168{&amp\uff1b*repr{raw\uff1aFatPtr{data\uff1a&amp\uff1b[1u64\uff0c2u64\uff0c3u64\uff0c7u64\uff0c4u64\uff0c5u64\uff0c6u64\uff0c7u64\uff0c8u64\uff0c9u64\uff0c10u64\uff0c]as*const u64\uff0clen\uff1a11\uff0c}\uff0c}.rust}}\uff1bconst\u3002Item\uff01=0usize{Recurse(Item-1\uff0c10)}//\u5426\u5219If Compare==0&amp\uff1b&amp\uff1bItem==0//\u9e3d\u5b50\u6d1e\u539f\u5219\u8868\u793a\u6211\u4eec\u4fdd\u8bc1\u80fd\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u5426\u5219If Compare==Item{Recurse(Item\uff0cCompare-1)}Else{If List[Compare]==List[Item]{Returse List[Compare]\uff1b}Else{Recurse(Item\uff0cCompare-1)}\u9012\u5f52(10\uff0c10)}\u3002\n\u7b49\u7b49\uff0c\u7b49\u7b49\uff0c\u8fd9\u5c31\u662f\u5929\u771f\u7684\u89e3\u51b3\u65b9\u6848\uff01\u9762\u8bd5\u5b98\u8bf4\uff0c\u8fd9\u662fO(n^2)Runtime\uff01&#34\uff1b\uff0c\u9762\u8bd5\u5b98\u5bf9\u4f60\u91cd\u590d\u5b83\u4eec\u7684\u7e41\u7410\u611f\u5230\u607c\u706b\u3002\u4e0d\uff0c\u4e0d\uff0c\u90a3\u53ea\u662f\u7406\u8bba\u4e0a\u6b63\u786e\u7684\uff01&#34\uff1b\u4f60\u4f1a\u8bf4\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0cconst\u7684\u4f7f\u7528\u4f1a\u4f7f\u7f16\u8bd1\u5668\u5c06\u65f6\u95f4\u548c\u7a7a\u95f4\u4fdd\u6301\u4e0d\u53d8\uff01\u5c0f\u5fc3\uff01&#34\uff1b\u4f60\u81ea\u5df1\u52a8\u624b\u6253\u5f00\u5730\u72f1\u4e4b\u95e8\uff0c\u952e\u5165\u5f02\u7aef\u5492\u8bed\uff0c\u53ea\u6709\u4eab\u6709\u7279\u6743\u7684\u751f\u9508\u7a0b\u5e8f\u5458\u624d\u80fd\u7528\u6765\u7f16\u8bd1\u7f16\u8bd1\u5668\uff0c\u4ee5\u514d\u9ed1\u793e\u4f1a\u7684\u6ecb\u751f\u6467\u6bc1\u7a33\u5b9a\u7684\u5e7b\u89c9\u3002\nInterview is\ud83d\udce6v0.1.0 Via\ud83e\udd80v1.43.0\u276frustc_bootstrap=1 Cargo Run--Release\u7f16\u8bd1\u6c27\u5316-The Interview v0.1.0(/Users/Z\u0334\u0327\u0321\u0322\u0328\u031bA\u0337\u0321\u0321\u0322\u0322\u0321L\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032cASM Finish Release[\u4f18\u5316]Target(S)\u57280.17\u79d2\u5185\u8fd0\u884c`\ud83d\udce6/Release/Interview`\u503c\u4e3a\uff1a7Interview is ASM v0.1.0 Via\ud83e\udd80v1.43.0\u276fRUSTC_BOOTSTRP=1 Cargo Rustc--Release-emit ASM\u7f16\u8bd1\u8bbf\u8c08v0.1.0\u3002s)\u57280.19s\u8bbf\u8c08\u4e2d\u662f\ud83d\udce6v0.1.0\u901a\u8fc7\ud83e\udd80v1.43.0\u276fCAT SECTION__TEXT\uff0c__text\uff0c\u5e38\u89c4\uff0c\u7eaf\u6307\u4ee4.macosx_version_min 10\uff0c7.globl_main_main\uff1aPush q%RBP movq%rsp\uff0c%rbp leaq l_unname_1(%rip)\uff0c%rdi movl$7\uff0c%esi xorl%eax\uff0c%eax callq_printf xorl%eax\uff0c%eax popq%rbp ret.Section__text\uff0c__constl_unname_\u3002\u503c\u4e3a\uff1a%d\\n&#34\uff1b.subsections_via_symbol target/release/deps/interview-6201aba656776dbc.s\u4e3a\ud83d\udce6v0.1.0\uff0c\u901a\u8fc7\ud83e\udd80v1.43.0\u276fCAT sInterview|wc-l 20\u3002\n\u770b\uff0c\u6211\u544a\u8bc9\u8fc7\u4f60\u6211\u53ea\u4f1a\u4f7f\u7528\u7a33\u5b9a\u7684\u7f16\u8bd1\u5668\u3002\u4f60\u53ea\u8981\u76f8\u4fe1\u6211\u5c31\u884c\u4e86\uff01\u73b0\u5728\u770b\u770b\u8fd9\u6bb5\u4ee3\u7801\u7684ASM\u8f93\u51fa\u3002\u53ea\u670920\u884c\uff0117\u884c\uff0c\u5982\u679c\u4f60\u53bb\u6389\u7a7a\u884c\u7684\u8bdd\uff01\u4e0d\u9700\u8981\u624b\u5199\u7a0b\u5e8f\u96c6\uff01\u8fd9\u90fd\u662f\u9ad8\u7ea7\u9508\u7801\uff0c\u770b\u770b7\u5728\u91cc\u9762\uff0c\u5b83\u53ea\u662f\u88ab\u63a8\u5165\u4e00\u4e2a\u5bc4\u5b58\u5668\u5e76\u6253\u5370\u51fa\u6765\uff0c\u6240\u4ee5\u6211\u5728\u5b9e\u8df5\u4e2d\u8bc1\u660e\u4e86\u5b83\u662f\u6052\u5b9a\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\uff01&34\uff1b\n\u4f60\u7684\u9762\u8bd5\u5b98\u773c\u775b\u53d1\u767d\uff0c\u8f6c\u8fc7\u5934\u6765\u8bf4\uff1a\u201c\u6211\u4eec\u7a0d\u540e\u518d\u8054\u7cfb\u4f60\u3002\u201d\u8c22\u8c22\u4f60\u7684\u5149\u4e34\u3002\u54e6\uff0c\u4e0d\uff0c\u4f60\u4ee5\u524d\u542c\u8fc7\u8fd9\u53e5\u8bdd\u3002\u4f60\u3002\n..", "note_en": "Years ago, as a young&#39;in from the Rust Belt, you dreamed of becoming a systems programmer, an Abyss Gazer if you will. You wanted to live, breathe, and die by being as close to the metal as you could. You grew up in a harsh environment of reading assembly output to shave off a few instructions in an attempt to make the fastest code, segfaults, and poorly documented hardware, all to become a systems programmer. You look back upon those years fondly as it&#39;s turned you into the programmer you are today. An unparalleled Abyss Gazer, an Eldritch One, one who makes mortal men fear and worship the code you&#39;ve wrought upon this world that holds the very foundations of it together. Today you&#39;ve come for an interview at the request of a friend for a position using Rust. They hope to be able to hire you so that you may channel the will of Ferris the Rustacean into all the code that flies from your fingers for them. Of course they can&#39;t just give you the job. Your potential future comrades must see for themselves whether the rumors about your skill are true. You look to your interviewer who asks if you&#39;re ready to get started. You nod, ready to take on any task given to you.\n &#34;You&#39;re given an array of size n + 1 and the integers 0 to n. Find the duplicate in the list using an algorithm that optimizes for size and one that optimizes for execution in terms of Big O. Make sure to only use the stable release of Rust as we do not use nightly here.&#34;, your interviewer explains. &#34;Does it matter if I just do 1 algorithm that can do both in O(1)?&#34;, you ask. The interviewer looks over their notes in confusion as this was not one of the answers they were told was possible. They&#39;re a younger engineer and you are being tested for a Principal Engineering position. It&#39;s nice that you&#39;re already able to prove you can do your job to teach those beneath you in terms of seniority. &#34;Uh sure. If you can uh prove it.&#34;, they say.\n You whip out your MacBook to act as a conduit to Wozniak himself, so that he may guide you as he has many times before. You empty yourself to become the vessel for those who gazed into the abyss before you. &#34;Let&#39;s get started by creating a project to house the summoning.&#34; you say, making sure to explain your process. The interviewer gives a slight nod, but they seem more on guard than they were earlier. Maybe summoning wasn&#39;t the right word. Incantation maybe? Either way, you type the magic words to your console like all Rustaceans before, now, and after will to start the world anew.\n  &#34;Alright let&#39;s setup our manifest to ship high quality artisanal hand crafted code to our end users.&#34; You open up the  Cargo.toml file and fill it with the incantation of optimization you&#39;ve ingrained into your soul\n [package]name = &#34;interview&#34;version = &#34;0.1.0&#34;authors = [&#34;Z\u0334\u0327\u0321\u0322\u0328\u031bA\u0337\u0321\u0321\u0322\u0322\u0321L\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032c \u0335\u0321\u0327\u0322\u031b\u0333\u010a\u0337\u0322\u0328\u0322\u033c\u0330\u01ea\u0337\u0328\u0327\u0322\u031b\u034eM\u0335\u0321\u0328\u0316\u0339\u0323E\u0334\u0322\u0327\u0328\u0328\u031bS\u0338\u0331\u0320\u0339\u032e\u0323 &lt;Z\u0334\u0327\u0321\u0322\u0328\u031bA\u0337\u0321\u0321\u0322\u0322\u0321L\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032c \u0335\u0321\u0327\u0322\u031b\u0333\u010a\u0337\u0322\u0328\u0322\u033c\u0330\u01ea\u0337\u0328\u0327\u0322\u031b\u034eM\u0335\u0321\u0328\u0316\u0339\u0323E\u0334\u0322\u0327\u0328\u0328\u031bS\u0338\u0331\u0320\u0339\u032e\u0323@gmail.com&gt;&#34;]edition = &#34;2018&#34;[dependencies][profile.release]panic = &#34;abort&#34;lto = truecodegen-units=1opt-level=&#34;s&#34;\n &#34;Wait what&#39;s up with your name?&#34;, the interviewer asks. You wave them aside and reply, &#34;Worry not sweet summer child, lest yee be cursed as I have been. The important part is that we&#39;ve optimized for code gen size and to strip out as many unnecessary assembly instructions as possible from the code.&#34; &#34;Wouldn&#39;t that mean you should use z for size?&#34;, they ask. &#34;What? And add one whole useless instruction to the output? I think not.&#34;\n You quickly open up your editor to  src/main.rs. You crack your knuckles and start off your incantation by releasing the limiters.\n  &#34;Wait wait wait. I said use a stable Rust compiler and these are all nightly features. Also what in the world do you need all this for?&#34; asks your interviewer in anger. &#34;I am using a stable Rust compiler. Just like you asked&#34; you say showing them the version number, though this is more a technicality, but they don&#39;t know it yet. &#34;Uhhh okay whatever keep going&#34;.\n &#34;No libstd, no core, only me&#34; you whisper as you place the line that will enable true freedom from the shackles of having any Rust dependencies whatsoever.\n  It&#39;s then that you see the look of abject horror on your interviewer&#39;s face. Good good let them stare into the depths of what system&#39;s programming truly is. &#34;Alright so IO is a thing as much as functional programmers try to avoid it by using &#39;pure&#39; functions. If we want to see the output of something we&#39;ll need to make some kind of syscall since operating systems exist. We&#39;ll link to libc so that we can use printf at least. We&#39;ll link directly to the OSX libc here with this line, but depending on the OS we would want to link a different libc implementation instead.&#34;\n It pains you to have any dependency whatsoever, but you&#39;re not trying to also write a whole Operating System today, that&#39;s for next week&#39;s interview. There&#39;s no librs you can use yet unfortunately and so, like a blacksmith carefully linking metal rings in a set of chainmail, you link to the venerable libc.\n #[allow(non_camel_case_types)]pub type c_char = i8;#[allow(non_camel_case_types)]pub type c_int = i32;#[link(name = &#34;System&#34;)] // OSX libcextern &#34;C&#34; { pub fn printf(format: *const c_char, ...) -&gt; c_int;}\n &#34;Okay okay, but are you going to even get to the actual problem?&#34;, the interviewer asks, clearly miffed that you&#39;re bothering to use C code instead of  println. Oh the sweet summer child. Everything is built on top the work of Kerninghan &amp; Ritchie. We can&#39;t escape their legacy that easily.\n &#34;Okay let&#39;s add some macros to cut down on some of the repetitive stuff later. We have to put them here otherwise they won&#39;t exist at all if they come after the places we invoke them at.&#34; you utter, in an attempt to convince the clearly bereaved interviewer that you do actually understand the language you&#39;re using and that you&#39;re not yanking them around for no reason.\n macro_rules! matches { ($expression:expr, $( $pattern:pat )|+ $( if $guard: expr )?) =&gt; { match $expression { $( $pattern )|+ $( if $guard )? =&gt; true, _ =&gt; false } }}macro_rules! copy_clone_eq_impls { ($($t:ty)*) =&gt; { $(impl Copy for $t {} impl Clone for $t { fn clone(&amp;self) -&gt; Self { *self } } impl PartialEq for $t { fn eq(&amp;self, other: &amp;$t) -&gt; bool { (*self) == (*other) } } )* }}\n &#34;Why not derive for those?&#34;, they ask. You look at them dead in the eyes and explain to them, &#34;I can&#39;t implement these for primitives via a derive macro. I have to *become* the compiler itself in order for these to work. Now let&#39;s continue. We have an apple pie to make and first we must invent the universe. Let&#39;s add some traits and import some compiler intrinsics we&#39;re going to need.&#34;\n #[lang = &#34;sized&#34;]pub trait Sized {}#[lang = &#34;freeze&#34;]auto trait Freeze {}extern &#34;rust-intrinsic&#34; { fn offset&lt;T&gt;(dst: *const T, offset: isize) -&gt; *const T;}#[lang = &#34;receiver&#34;]trait Receiver {}#[lang = &#34;index&#34;]trait Index&lt;Idx: ?Sized&gt; { type Output: ?Sized; fn index(&amp;self, index: Idx) -&gt; &amp;Self::Output;}impl&lt;T, I&gt; Index&lt;I&gt; for [T]where I: SliceIndex&lt;[T]&gt;,{ type Output = I::Output; fn index(&amp;self, index: I) -&gt; &amp;I::Output { index.index(self) }}trait SliceIndex&lt;T: ?Sized&gt; { type Output: ?Sized; fn get(self, slice: &amp;T) -&gt; Option&lt;&amp;Self::Output&gt;; fn get_mut(self, slice: &amp;mut T) -&gt; Option&lt;&amp;mut Self::Output&gt;; unsafe fn get_unchecked(self, slice: &amp;T) -&gt; &amp;Self::Output; unsafe fn get_unchecked_mut(self, slice: &amp;mut T) -&gt; &amp;mut Self::Output; fn index(self, slice: &amp;T) -&gt; &amp;Self::Output; fn index_mut(self, slice: &amp;mut T) -&gt; &amp;mut Self::Output;}#[lang = &#34;copy&#34;]trait Copy: Clone {}trait Clone: Sized { fn clone(&amp;self) -&gt; Self; fn clone_from(&amp;mut self, source: &amp;Self) { *self = source.clone() }}#[lang = &#34;eq&#34;]trait PartialEq&lt;Rhs: ?Sized = Self&gt; { fn eq(&amp;self, other: &amp;Rhs) -&gt; bool; fn ne(&amp;self, other: &amp;Rhs) -&gt; bool { !self.eq(other) }}#[lang = &#34;partial_ord&#34;]trait PartialOrd&lt;Rhs: ?Sized = Self&gt;: PartialEq&lt;Rhs&gt; { fn partial_cmp(&amp;self, other: &amp;Rhs) -&gt; Option&lt;Ordering&gt;; fn lt(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Less)) } fn le(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Less) | Some(Equal)) } fn gt(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Greater)) } fn ge(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Greater) | Some(Equal)) }}#[lang = &#34;not&#34;]trait Not { type Output; fn not(self) -&gt; Self::Output;}#[lang = &#34;neg&#34;]trait Neg { type Output; fn neg(self) -&gt; Self::Output;}#[lang = &#34;sub&#34;]trait Sub&lt;Rhs = Self&gt; { type Output; fn sub(self, rhs: Rhs) -&gt; Self::Output;}trait Termination { fn report(self) -&gt; i32;}\n Like any good Rustacean worth their sea salt, you&#39;ve drilled every bit of libstd and libcore into your mind so that you only pull in the items that you need and nothing more. You believe in zero cost abstractions, no, you are zero cost abstractions. Even the possibility of paying for just a CPU cycle or bit more disgusts you. Only run what must be run and nothing more.\n &#34;Wait aren&#39;t these traits and items from libcore and libstd? What. What&#39;s going on here?&#34; your interviewer asks, clearly distressed that it&#39;s taking this much code. &#34;Well yes since we&#39;re using  #![no_core] they simply do not exist anymore. We&#39;re only defining exactly what we need from there and nothing more. Besides I&#39;m being as explicit as possible by letting you stare at the true cost it takes to program on any machine, by taking the syntax sugar and prebuilt code away. Speaking of sugar got any coffee? I like it black like the soul I sold to &#39;them&#39; to get better at this kind of stuff.&#34; Oof maybe the self deprecating joke was a bit much, even if it was true. You were only trying to lighten the mood, but the interviewer seems to have pretended to hear nothing.\n &#34;Okay now lets implement all these traits then!&#34; you say, fingers flying over the keyboard, never leaving  insert mode.  Esc,  h,  j,  k,  l? Ha those keys are for those who haven&#39;t dedicated themselves to the abyss.\n impl&lt;T, I&gt; Index&lt;I&gt; for [T]where I: SliceIndex&lt;[T]&gt;,{ type Output = I::Output; fn index(&amp;self, index: I) -&gt; &amp;I::Output { index.index(self) }}trait SliceIndex&lt;T: ?Sized&gt; { type Output: ?Sized; fn get(self, slice: &amp;T) -&gt; Option&lt;&amp;Self::Output&gt;; fn get_mut(self, slice: &amp;mut T) -&gt; Option&lt;&amp;mut Self::Output&gt;; unsafe fn get_unchecked(self, slice: &amp;T) -&gt; &amp;Self::Output; unsafe fn get_unchecked_mut(self, slice: &amp;mut T) -&gt; &amp;mut Self::Output; fn index(self, slice: &amp;T) -&gt; &amp;Self::Output; fn index_mut(self, slice: &amp;mut T) -&gt; &amp;mut Self::Output;}#[lang = &#34;copy&#34;]trait Copy: Clone {}trait Clone: Sized { fn clone(&amp;self) -&gt; Self; fn clone_from(&amp;mut self, source: &amp;Self) { *self = source.clone() }}#[lang = &#34;eq&#34;]trait PartialEq&lt;Rhs: ?Sized = Self&gt; { fn eq(&amp;self, other: &amp;Rhs) -&gt; bool; fn ne(&amp;self, other: &amp;Rhs) -&gt; bool { !self.eq(other) }}#[lang = &#34;partial_ord&#34;]trait PartialOrd&lt;Rhs: ?Sized = Self&gt;: PartialEq&lt;Rhs&gt; { fn partial_cmp(&amp;self, other: &amp;Rhs) -&gt; Option&lt;Ordering&gt;; fn lt(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Less)) } fn le(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Less) | Some(Equal)) } fn gt(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Greater)) } fn ge(&amp;self, other: &amp;Rhs) -&gt; bool { matches!(self.partial_cmp(other), Some(Greater) | Some(Equal)) }}#[lang = &#34;not&#34;]trait Not { type Output; fn not(self) -&gt; Self::Output;}#[lang = &#34;neg&#34;]trait Neg { type Output; fn neg(self) -&gt; Self::Output;}#[lang = &#34;sub&#34;]trait Sub&lt;Rhs = Self&gt; { type Output; fn sub(self, rhs: Rhs) -&gt; Self::Output;}trait Termination { fn report(self) -&gt; i32;}#[lang = &#34;slice&#34;]impl&lt;T&gt; [T] { #[allow(unused_attributes)] #[allow_internal_unstable(const_fn_union)] const fn len(&amp;self) -&gt; usize { unsafe { Repr { rust: self }.raw.len } } fn as_ptr(&amp;self) -&gt; *const T { self as *const [T] as *const T } fn as_mut_ptr(&amp;mut self) -&gt; *mut T { self as *mut [T] as *mut T }}#[lang = &#34;const_ptr&#34;]impl&lt;T: ?Sized&gt; *const T { unsafe fn add(self, count: usize) -&gt; Self where T: Sized, { self.offset(count as isize) } unsafe fn offset(self, count: isize) -&gt; *const T where T: Sized, { offset(self, count) }}#[lang = &#34;mut_ptr&#34;]impl&lt;T: ?Sized&gt; *mut T { unsafe fn add(self, count: usize) -&gt; *mut T where T: Sized, { self.offset(count as isize) } unsafe fn offset(self, count: isize) -&gt; *mut T where T: Sized, { offset(self, count) as *mut T }}impl&lt;T&gt; SliceIndex&lt;[T]&gt; for usize { type Output = T; fn get(self, slice: &amp;[T]) -&gt; Option&lt;&amp;T&gt; { if self &lt; slice.len() { unsafe { Some(self.get_unchecked(slice)) } } else { None } } fn get_mut(self, slice: &amp;mut [T]) -&gt; Option&lt;&amp;mut T&gt; { if self &lt; slice.len() { unsafe { Some(self.get_unchecked_mut(slice)) } } else { None } } unsafe fn get_unchecked(self, slice: &amp;[T]) -&gt; &amp;T { &amp;*slice.as_ptr().add(self) } unsafe fn get_unchecked_mut(self, slice: &amp;mut [T]) -&gt; &amp;mut T { &amp;mut *slice.as_mut_ptr().add(self) } fn index(self, slice: &amp;[T]) -&gt; &amp;T { &amp;(*slice)[self] } fn index_mut(self, slice: &amp;mut [T]) -&gt; &amp;mut T { &amp;mut (*slice)[self] }}#[allow(unconditional_recursion)]impl PartialOrd for usize { fn partial_cmp(&amp;self, other: &amp;usize) -&gt; Option&lt;Ordering&gt; { self.partial_cmp(other) }}impl Not for bool { type Output = bool; fn not(self) -&gt; bool { !self }}impl Neg for isize { type Output = isize; fn neg(self) -&gt; isize { -self }}impl Sub for usize { type Output = usize; fn sub(self, rhs: usize) -&gt; Self::Output { self - rhs }}impl Termination for () { fn report(self) -&gt; i32 { 0 }}impl&lt;T: ?Sized&gt; Receiver for &amp;T {}impl&lt;T: ?Sized&gt; Receiver for &amp;mut T {}copy_clone_eq_impls!(usize u64 bool);\n &#34;Wait hold on, the op  Sub uses  - as part of it&#39;s definition? The thing it&#39;s supposed to define and wait  Not does this too with  ! and wait wait wait.&#34; Your interviewer is sputtering in disbelief. Maybe they were too young to be corrupted by your influence. It&#39;s too late now. You&#39;ve already shown them what the grimoire contains. You can only go deeper now. You&#39;re almost done.\n #[allow(dead_code)] // It&#39;s actually needed! Zombie Orderingenum Ordering { Less = -1, Equal = 0, Greater = 1,}use Ordering::*;enum Option&lt;T&gt; { Some(T), None,}use crate::Option::*;#[repr(C)]pub(crate) union Repr&lt;T&gt; { pub(crate) rust: *const [T], rust_mut: *mut [T], pub(crate) raw: FatPtr&lt;T&gt;,}#[repr(C)]pub(crate) struct FatPtr&lt;T&gt; { data: *const T, pub(crate) len: usize,}\n You create the only concrete types that you&#39;ll need beyond the primitives, but they&#39;re transitory like the feeble lives we live. Your interviewer just looks at you as you show them the depths of what Rust truly is and the secrets it hides behind the veil. Your interviewer begins to sputter unintelligible words. &#34;nmbrs. enms in em?!?&#34; You better wrap this up quickly and bring them back to the living before they cross the river Styx. You&#39;re trying to get a job here.\n #[lang = &#34;start&#34;]fn start&lt;T: Termination + &#39;static&gt;(main: fn() -&gt; T, _: isize, _: *const *const u8) -&gt; isize { main().report() as isize}fn main() { unsafe { printf( &#34;The value is: %d\\n\\0&#34; as *const str as *const u8 as *const c_char, DUPLICATE, ); }}\n This is it. The final stretch. The anticipation is killing you. &#34;What&#39;s with this type signature? What&#39;s start?! Rust has no runtime!&#34;, your interviewer sputters. You turn to them, &#34;The greatest trick the Devil ever played was convincing C and Rust programmers their language has no runtime.&#34; You turn back to your computer. You sigh and say, &#34;Look we&#39;re almost done. This is the last bit I swear.&#34; You begin typing in the last words that will let you have an O(1) runtime and O(1) space usage when you finally execute the code. Truly the most magical of the incantations you&#39;ve wrought thus far.\n pub const DUPLICATE: u64 = { pub const LIST: &amp;&#39;static [u64] = { unsafe { &amp;*Repr { raw: FatPtr { data: &amp;[ 1u64, 2u64, 3u64, 7u64, 4u64, 5u64, 6u64, 7u64, 8u64, 9u64, 10u64, ] as *const u64, len: 11, }, } .rust } }; const fn recurse(item: usize, compare: usize) -&gt; u64 { if compare == 0usize &amp;&amp; item != 0usize { recurse(item - 1, 10) } // else if compare == 0 &amp;&amp; item == 0 // Pigeon Hole principle means we&#39;re guaranteed to handle this case else if compare == item { recurse(item, compare - 1) } else { if LIST[compare] == LIST[item] { return LIST[compare]; } else { recurse(item, compare - 1) } } } recurse(10, 10)};\n &#34;Wait wait wait that&#39;s the naive solution! This is O(n^2) runtime!&#34;, your interviewer says exasperated at the rigamarole you&#39;ve run them through. &#34;No no no no that&#39;s only theoretically true!&#34;, you say, &#34;In practice the use of  const causes the compiler to make this constant time and space! Watch!&#34; You crack your hands and open up the gates of hell yourself typing the heretical incantation only the privileged  rustc coders are allowed to use to compile the compiler lest the spawn of the underworld destroy the illusion of stability.\n interview is \ud83d\udce6 v0.1.0 via \ud83e\udd80 v1.43.0\u276f RUSTC_BOOTSTRAP=1 cargo run --release Compiling oxidizing-the-interview v0.1.0 (/Users/Z\u0334\u0327\u0321\u0322\u0328\u031bA\u0337\u0321\u0321\u0322\u0322\u0321L\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032c \u0335\u0321\u0327\u0322\u031b\u0333\u010a\u0337\u0322\u0328\u0322\u033c\u0330\u01ea\u0337\u0328\u0327\u0322\u031b\u034eM\u0335\u0321\u0328\u0316\u0339\u0323E\u0334\u0322\u0327\u0328\u0328\u031bS\u0338\u0331\u0320\u0339\u032e\u0323/interview) Finished release [optimized] target(s) in 0.17s Running `target/release/interview`The value is: 7interview is \ud83d\udce6 v0.1.0 via \ud83e\udd80 v1.43.0\u276f RUSTC_BOOTSTRAP=1 cargo rustc --release -- --emit asm Compiling interview v0.1.0 (/Users/Z\u0334\u0327\u0321\u0322\u0328\u031bA\u0337\u0321\u0321\u0322\u0322\u0321L\u0336\u0322\u0327\u0322\u032a\u032c\u0122\u0335\u0321\u0322\u0322\u0327\u031b\u01a0\u0335\u0321\u0321\u032c\u0347\u032c \u0335\u0321\u0327\u0322\u031b\u0333\u010a\u0337\u0322\u0328\u0322\u033c\u0330\u01ea\u0337\u0328\u0327\u0322\u031b\u034eM\u0335\u0321\u0328\u0316\u0339\u0323E\u0334\u0322\u0327\u0328\u0328\u031bS\u0338\u0331\u0320\u0339\u032e\u0323/interview) Finished release [optimized] target(s) in 0.19s interview is \ud83d\udce6 v0.1.0 via \ud83e\udd80 v1.43.0\u276f cat target/release/deps/oxidizing_the_interview-6201aba656776dbc.s .section\t__TEXT,__text,regular,pure_instructions .macosx_version_min 10, 7 .globl _main_main: pushq %rbp movq %rsp, %rbp leaq l___unnamed_1(%rip), %rdi movl $7, %esi xorl %eax, %eax callq _printf xorl %eax, %eax popq %rbp retq .section __TEXT,__constl___unnamed_1: .asciz &#34;The value is: %d\\n&#34;.subsections_via_symbolsinterview is \ud83d\udce6 v0.1.0 via \ud83e\udd80 v1.43.0\u276f cat target/release/deps/interview-6201aba656776dbc.s | wc -l 20\n &#34;See I told you I would only use a stable compiler. You just had to trust me! Now look at this code&#39;s asm output. Only 20 lines! 17 if you cut out the empty newlines! No handwritten assembly needed! It&#39;s all high level Rust code and look the 7 is in there and it just gets pushed into a register and printed out, so I&#39;ve proved it&#39;s constant time and space in practice!&#34;\n Your interviewer, eyes white and rolled back into their head says, &#34;We&#39;ll contact you later. Thanks for coming in.&#34; Oh no, you&#39;ve heard this line before. You\n......", "posttime": "2020-05-29 23:59:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9762\u8bd5,\u6280\u672f,technical,fn", "title": "\u6c27\u5316\u6280\u672f\u9762\u8bd5", "title_en": "Oxidizing the Technical Interview", "transed": 1, "url": "https://blog.mgattozzi.dev/oxidizing-the-technical-interview/", "via": "", "real_tags": ["\u9762\u8bd5", "\u6280\u672f", "technical", "fn"]}, {"category": "", "categoryclass": "", "imagename": "ed1ebd31ffc5f0de899b3e93ac105c26.jpg", "infoid": 1004268, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u82f1\u7279\u5c14\u7684NUC\u7535\u8111\u662f\u5c0f\u578b\u53f0\u5f0f\u7535\u8111\uff0c\u901a\u5e38\u914d\u5907\u819d\u4e0a\u578b\u7535\u8111\u7ea7\u522b\u7684\u5904\u7406\u5668\u3002\u4f46\u7b14\u8bb0\u672c\u7535\u8111\u5904\u7406\u5668\u7684\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u4e2d\u7684\u4e00\u4e9b\u5728\u6700\u8fd1\u51e0\u5e74\u53d8\u5f97\u76f8\u5f53\u4e0d\u9519\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u63d0\u4f9b\u4e86\u53f0\u5f0f\u673a\u7ea7\u7684\u6027\u80fd\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u5468\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u4f7f\u7528\u4e00\u53f0\u914d\u5907\u9177\u777fi7-10710U\u516d\u6838\u5904\u7406\u5668\u7684\u65b0\u578b\u82f1\u7279\u5c14NUC10\u8ff7\u4f60PC\u4f5c\u4e3a\u6211\u7684\u4e3b\u8ba1\u7b97\u673a\uff0c\u8fd9\u53f0\u8ba1\u7b97\u673a\u7684\u901f\u5ea6\u4e4b\u5feb\u4ee4\u6211\u611f\u5230\u60ca\u559c\u3002\n\u4e3a\u4e86\u8fd9\u7bc7\u8bc4\u8bba\uff0c\u82f1\u7279\u5c14\u501f\u7ed9\u4e86\u6211\u4e00\u4e2a\u6f14\u793a\u5355\u5143\uff0c\u6211\u53d1\u73b0\u5b83\u662f\u6211\u4f5c\u4e3a\u535a\u5ba2\u4f5c\u8005/\u7f51\u7edc\u51fa\u7248\u5546\u7684\u65e5\u5e38\u5de5\u4f5c\u548c\u4f5c\u4e3a\u64ad\u5ba2\u7f16\u8f91\u7684\u526f\u4e1a\u7684\u6781\u597d\u7684\u4e3b\u529bPC\u3002\n\u5c3d\u7ba1NUC10\u7684\u5c3a\u5bf8\u5f88\u5c0f(\u6211\u4f7f\u7528\u7684\u578b\u53f7\u53ea\u67094.6\u201cx 4.4\u201dx 2\u201c)\uff0c\u4f46\u5b83\u53ef\u80fd\u662f\u76ee\u524d\u6211\u5bb6\u8fd0\u884c\u901f\u5ea6\u6700\u5feb\u7684\u8ba1\u7b97\u673a\u3002\u5b83\u5728\u8bb8\u591a\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u7684\u5f97\u5206\u90fd\u9ad8\u4e8e\u6211\u7684Dell Vostro\u6210\u5c3115 7590\uff0c\u800c\u4e14\u6267\u884c\u8d44\u6e90\u5bc6\u96c6\u578b\u5b9e\u9645\u4efb\u52a1\u7684\u901f\u5ea6\u66f4\u5feb\uff0c\u5c3d\u7ba1\u6234\u5c14\u7b14\u8bb0\u672c\u7535\u8111\u7684\u5904\u7406\u5668\u66f4\u8017\u7535\u3002\n\u4f46\u4e5f\u6709\u4e00\u4e9b\u4f8b\u5916-NUC 10\u91c7\u7528\u82f1\u7279\u5c14\u8d85\u9ad8\u6e05\u96c6\u6210\u663e\u5361\u3002\u4f60\u8fd8\u53ef\u4ee5\u7528\u8fd9\u53f0\u5c0f\u7535\u8111\u73a9\u4e00\u4e9b\u7535\u8111\u6e38\u620f\u6216\u6e32\u67d3\u89c6\u9891\u3002\u4f46\u5728\u914d\u5907\u72ec\u7acb\u663e\u5361\u6216\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u96c6\u6210GPU\u7684\u7cfb\u7edf\u4e0a\uff0c\u60a8\u5c06\u80fd\u591f\u66f4\u597d\u5730\u5904\u7406\u8fd9\u4e9b\u4e8b\u60c5\u3002\nNUC\u4e0d\u4e00\u5b9a\u662f\u6bcf\u4e2a\u4eba\u7684\u6700\u4f73\u9009\u62e9\u3002\u5c0f\u5de7\u7684\u5c3a\u5bf8\u4f7f\u5f97\u8fd9\u53f0\u5c0f\u578bPC\u5f88\u5bb9\u6613\u5b89\u88c5\u5728\u663e\u793a\u5668\u4e0b\u9762\u6216\u540e\u9762\u3002\u5b83\u5728\u4f60\u7684\u529e\u516c\u5ba4\u91cc\u4e0d\u4f1a\u5360\u7528\u592a\u591a\u7a7a\u95f4\uff0c\u5728\u4f60\u7684\u8d77\u5c45\u5ba4\u91cc\u4e5f\u4e0d\u4f1a\u663e\u5f97\u683c\u683c\u4e0d\u5165\u3002\u8fd9\u7bc7\u8bc4\u8bba\u4e2d\u4ecb\u7ecd\u7684\u673a\u578b\u6709\u4e0d\u9519\u7684\u7aef\u53e3\u9009\u62e9\u548c\u5347\u7ea7\u9009\u9879\u3002\n\u4f46\u662f\u6709\u4e00\u4ef6\u4e8b\u4f60\u4e0d\u80fd\u5347\u7ea7\uff0c\u90a3\u5c31\u662f\u5904\u7406\u5668--\u5b83\u4e0e\u7b14\u8bb0\u672c\u7535\u8111\u5904\u7406\u5668\u56fa\u5b9a\u5728\u4e3b\u677f\u4e0a\u7684\u65b9\u5f0f\u662f\u4e00\u6837\u7684\u3002\u5982\u679c\u6027\u80fd\u5bf9\u4f60\u6765\u8bf4\u6bd4\u5c3a\u5bf8\u66f4\u91cd\u8981\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u4f1a\u9009\u62e9\u4e00\u53f0\u66f4\u5927\u7684PC\u3002\u82b1\u5728NUC10\u4e0a\u7684\u94b1\u548c\u4f60\u4e70NUC10\u7684\u94b1\u4e00\u6837\u591a\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5904\u7406\u5668\u6027\u80fd\u660e\u663e\u66f4\u5f3a\u7684\u2026\u3002\u8fd8\u6709\u4e00\u4e2a\u63d2\u5ea7\uff0c\u5c06\u6765\u4f60\u53ef\u4ee5\u62c6\u4e0b\u82af\u7247\uff0c\u6362\u6210\u529f\u7387\u66f4\u9ad8\u7684\u5904\u7406\u5668\u3002\n\u642d\u8f7dComet Lake\u5904\u7406\u5668\u7684\u82f1\u7279\u5c14NUC 10\u7cfb\u5217\u7535\u8111\u4ee3\u53f7\u4e3a\u201c\u971c\u8c37\u201d\uff0c\u6709\u591a\u79cd\u9009\u62e9\uff0c\u5305\u62ec\u642d\u8f7d\u82f1\u7279\u5c14\u9177\u777fi3\u3001\u9177\u777fi5\u548c\u9177\u777fi7\u5904\u7406\u5668\u7684\u578b\u53f7\uff0c\u552e\u4ef7\u5404\u4e0d\u76f8\u540c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u57fa\u672c\u914d\u7f6e\u7684\u8d77\u6b65\u4ef7\uff1a\n\u82f1\u7279\u5c14\u501f\u7ed9\u6211\u8fdb\u884c\u6d4b\u8bd5\u7684\u6a21\u5f0f\u662f\u4e00\u6b3e\u9876\u7ea7\u914d\u7f6e\uff0c\u914d\u5907\u82f1\u7279\u5c14\u9177\u777fi7\u82af\u7247\u300116 GB RAM\u3001256 GB\u56fa\u6001\u786c\u76d8\u30011TB\u786c\u76d8\u548cWindows10\u5bb6\u5ead\u7248\u3002\u5b83\u7684\u552e\u4ef7\u7ea6\u4e3a1000\u7f8e\u5143\u3002\nIntel NUC 10\u201cFrost Canyon\u201d\u8ba1\u7b97\u673a\u770b\u8d77\u6765\u5f88\u50cf\u82f1\u7279\u5c14\u8fd1\u5e74\u6765\u53d1\u5e03\u7684\u5927\u591a\u6570\u5176\u4ed6NUC\u7cfb\u7edf\u3002\n\u4e00\u4e9b\u7aef\u53e3\u5df2\u7ecf\u6539\u53d8\uff0c\u4f46\u5f88\u50cf\u6211\u57282018\u5e74\u5ba1\u9605\u7684\u300a\u8c46\u8c37\u300bNUC 8\uff0c\u65b0\u673a\u578b\u662f\u4e00\u4e2a\u5c0f\u76d2\u5b50\uff0c\u524d\u9762\u6709\u51e0\u4e2a\u7aef\u53e3\uff0c\u524d\u9762\u6709\u4e00\u4e2a\u7535\u6e90\u6309\u94ae\uff0c\u540e\u9762\u6709\u4e00\u5806\u989d\u5916\u7684\u7aef\u53e3\uff0c\u4e00\u4e2a\u95ea\u95ea\u53d1\u5149\u7684\u5851\u6599\u76d6\u5b50\uff0c\u8fd8\u6709\u4e00\u4e2a\u6df1\u8272\u7684\u91d1\u5c5e\u673a\u8eab\u3002\nBean Canyon NUC\u524d\u9762\u6709\u4e00\u4e2amicroSD\u5361\u8bfb\u5361\u5668\u548c\u4e24\u4e2aUSB Type-A\u7aef\u53e3\u3002\u8f83\u65b0\u7684Frost Canyon\u578b\u53f7\u6709\u4e00\u4e2a\u5168\u5c3a\u5bf8\u7684SD\u5361\u63d2\u69fd\uff0c\u524d\u9762\u6709\u4e00\u4e2aUSB Type-A\u548cType-C\u7aef\u53e3\u3002\n\u4f46\u5728\u5e55\u540e\uff0c\u82f1\u7279\u5c14\u5df2\u7ecf\u4ece28\u74e6\u7684\u7b2c8\u4ee3\u82f1\u7279\u5c14\u9177\u777f\u5904\u7406\u5668(\u91c7\u7528Iris Plus\u663e\u5361)\u5207\u6362\u4e3a25\u74e6\u7684\u7b2c10\u4ee3\u82af\u7247(\u91c7\u7528\u82f1\u7279\u5c14\u8d85\u9ad8\u6e05\u663e\u5361)\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u83b7\u5f97\u4e86\u66f4\u591a\u7684CPU\u80fd\u529b\uff0c\u4f46\u56fe\u5f62\u6027\u80fd\u8f83\u5dee\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u901a\u7528\u8ba1\u7b97\uff0c\u90a3\u4e48\u8fd9\u79cd\u6743\u8861\u662f\u503c\u5f97\u7684-\u65b0\u6a21\u578b\u5728\u5927\u591a\u6570\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u5f97\u5206\u66f4\u9ad8\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u5c0f\u578b\u6e38\u620f\u3001\u89c6\u9891\u7f16\u8f91\u6216\u6570\u5b57\u827a\u672f\u5de5\u4f5c\u7ad9\uff0c\u60a8\u53ef\u80fd\u4f1a\u9009\u62e9\u8f83\u65e7\u7684\u578b\u53f7\u3002\nNUC 10\u6709\u4e24\u79cd\u5c3a\u5bf8-\u77ed\u7684\u548c\u9ad8\u7684\u3002\u5b83\u4eec\u90fd\u662f4.6\u201cx 4.4\u201d\u5bbd\uff0c\u4f46\u201c\u9ad8\u201d\u578b\u9ad82\u82f1\u5bf8\uff0c\u800c\u201c\u77ed\u201d\u578b\u53ea\u67091.5\u82f1\u5bf8\u539a\u3002\u4e0d\u540c\u7684\u662f\uff0c\u66f4\u9ad8\u7684\u7248\u672c\u6709\u7a7a\u95f4\u65e2\u53ef\u4ee5\u5bb9\u7eb3M.2\u56fa\u6001\u786c\u76d8\uff0c\u4e5f\u53ef\u4ee5\u5bb9\u7eb32.5\u82f1\u5bf8\u7684\u786c\u76d8\u6216SSD\u3002\u8f83\u5c0f\u7684\u7248\u672c\u7f3a\u5c112.5\u82f1\u5bf8\u7684\u9a71\u52a8\u5668\u6258\u67b6\u3002\n\u672c\u8bc4\u8bba\u4e2d\u4ecb\u7ecd\u7684\u82f1\u7279\u5c14NUC10i7FNHAA\u914d\u7f6e\u662f\u4e00\u6b3e\u9ad8\u5927\u578b\u53f7\u3002\u4f46\u82f1\u7279\u5c14\u4e5f\u63d0\u4f9b\u4e86\u7b80\u77ed\u7684\u7248\u672c\u3002\n\u867d\u7136\u4e00\u4e9b\u5bfb\u627e\u8282\u7701\u7a7a\u95f4\u7684\u7535\u8111\u7684\u4eba\u53ef\u80fd\u4e5f\u4f1a\u5bf9\u9759\u97f3PC\u611f\u5174\u8da3\uff0c\u4f46Frost Canyon NUC\u5e76\u4e0d\u7b26\u5408\u8981\u6c42\u3002\u82f1\u7279\u5c14\u501f\u7ed9\u6211\u7684\u578b\u53f7\u4e0d\u4ec5\u6709\u4e00\u4e2a\u786c\u76d8(\u5e26\u65cb\u8f6c\u76d8\u7247)\uff0c\u800c\u4e14\u5b83\u8fd8\u6709\u4e00\u4e2a\u5728\u91cd\u8f7d\u4e0b\u4f1a\u65cb\u8f6c\u7684\u98ce\u6247\u3002NUC 10\u7684\u58f0\u97f3\u5e76\u4e0d\u6bd4\u5178\u578b\u7684\u7b14\u8bb0\u672c\u7535\u8111\u5927\u3002\u4f46\u5b83\u4e5f\u4e0d\u6bd4\u4e00\u4e2a\u4eba\u5b89\u9759\u3002\n\u8fd9\u6b3e\u5c0f\u7535\u8111\u652f\u6301WiFi6\u3001\u84dd\u72595.0\u548c\u5343\u5146\u4f4d\u4ee5\u592a\u7f51\uff0c\u80cc\u9762\u6709\u4e00\u4e2a\u8fc5\u96f73\u7aef\u53e3\u548c\u4e00\u4e2aHDMI\u7aef\u53e3\u3002\n\u82f1\u7279\u5c14\u8868\u793a\uff0c\u60a8\u6700\u591a\u53ef\u4ee5\u8fde\u63a5\u4e09\u4e2a4K60fps\u7684\u663e\u793a\u5668\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528USB-C\u81f3\u53cc\u8ff7\u4f60DisplayPort\u62c6\u5206\u5668\u624d\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3aNUC 10\u524d\u9762\u7684USB-C\u7aef\u53e3\u4f3c\u4e4e\u4e0d\u652f\u6301\u89c6\u9891\u8f93\u51fa\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u53ef\u4ee5\u5c062560x1080\u50cf\u7d20\u7684\u663e\u793a\u5668\u548c1920x1080\u50cf\u7d20\u7684\u7535\u89c6\u8fde\u63a5\u8d77\u6765\uff0c\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\uff0c\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002\n\u867d\u7136\u7aef\u53e3\u5141\u8bb8\u60a8\u6dfb\u52a0\u663e\u793a\u5668\u3001\u663e\u793a\u5668\uff0c\u751a\u81f3\u5916\u90e8\u663e\u5361\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00\u8ba1\u7b97\u673a\u673a\u7bb1\u6765\u6267\u884c\u4e00\u4e9b\u5347\u7ea7\u3002NUC 10\u5e95\u90e8\u6709\u56db\u4e2a\u5c0f\u63d2\u5934\uff0c\u7528\u4e8e\u5c06\u8ba1\u7b97\u673a\u673a\u8eab\u4ece\u684c\u5b50\u6216\u529e\u516c\u684c\u4e0a\u62ac\u8d77\uff0c\u6bcf\u4e2a\u63d2\u5934\u5185\u90fd\u6709\u4e00\u4e2a\u87ba\u9489\u3002\u7528\u87ba\u4e1d\u5200\u677e\u5f00\u87ba\u4e1d\uff0c\u4f60\u5c31\u53ef\u4ee5\u62c6\u4e0b\u5e95\u677f\u4e86\u3002\n\u5728\u5f15\u64ce\u76d6\u4e0b\u9762\uff0c\u60a8\u4f1a\u53d1\u73b0\u4e00\u4e2a\u7528\u4e8e\u56fa\u6001\u5b58\u50a8\u7684M.2 2242/2280\u63d2\u69fd\u548c\u4e24\u4e2a\u7528\u4e8eDDR4-2666 RAM\u7684SODIMM\u63d2\u69fd\u3002\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u201c\u9ad8\u201d\u7248\u672c\u7684NUC10\uff0c\u4e5f\u6709\u4e00\u4e2a2.5\u82f1\u5bf8\u7684\u9a71\u52a8\u5668\u6258\u67b6\u5728\u5e95\u90e8\u7684\u76d6\u5b50\u672c\u8eab\u3002\n\u5728\u82f1\u7279\u5c14\u53d1\u7ed9\u6211\u7684\u6f14\u793a\u5355\u5143\u4e2d\uff0c\u6240\u6709\u8fd9\u4e9b\u63d2\u69fd\u90fd\u5df2\u586b\u6ee1\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u9009\u62e9\u57fa\u672c\u578b\u53f7\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u7684\u5185\u5b58\u548c\u5b58\u50a8\u7a7a\u95f4\u3002\u8be5\u8ba1\u7b97\u673a\u652f\u6301\u9ad8\u8fbe64 GB\u7684RAM\u3001SATA III\u548c/\u6216NVMe\u5b58\u50a8\u3002\u5b83\u8fd8\u4e0e\u82f1\u7279\u5c14Optane\u5185\u5b58\u517c\u5bb9\u3002\nNUC\u7684\u9876\u76d6\u4e5f\u662f\u53ef\u62c6\u5378\u7684\uff0c\u5c3d\u7ba1\u4f60\u5728\u4e0b\u9762\u627e\u4e0d\u5230\u4efb\u4f55\u4f20\u7edf\u7684PC\u7ec4\u4ef6\u3002\u4f46\u6700\u7ec8\uff0c\u4f60\u4e5f\u8bb8\u53ef\u4ee5\u7528\u7b2c\u4e09\u65b9\u7684\u76d6\u5b50\u6765\u53d6\u4ee3\u76d6\u5b50\uff0c\u8fd9\u4e2a\u76d6\u5b50\u589e\u52a0\u4e86\u989d\u5916\u7684USB\u6216\u89c6\u9891\u8f93\u51fa\u7aef\u53e3\u6216\u652f\u6301\u65e0\u7ebf\u5145\u7535\u7b49\u529f\u80fd\u3002\nNUC10\u8fd8\u914d\u5907\u4e86\u4e00\u4e2a120W\u7684\u7535\u6e90\u9002\u914d\u5668\uff0c\u51e0\u4e4e\u548c\u7535\u8111\u4e00\u6837\u5927\u3002\n\u6211\u5e94\u8be5\u6307\u51fa\u7684\u662f\uff0c\u867d\u7136\u8fd9\u53f0\u5c0f\u7535\u8111\u6709\u7b14\u8bb0\u672c\u7535\u8111\u7ea7\u522b\u7684\u82f1\u7279\u5c14\u9177\u777fU\u7cfb\u5217\u5904\u7406\u5668\uff0c\u4f46\u5b83\u914d\u7f6e\u4e8625\u74e6\u7684TDP\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5728NUC 10\u4e2d\u53ef\u4ee5\u6bd4\u5927\u591a\u6570\u7b14\u8bb0\u672c\u7535\u8111(\u901a\u5e38\u82af\u7247\u8bbe\u7f6e\u4e3a15\u74e6TDP)\u6d88\u8017\u66f4\u591a\u7684\u7535\u529b(\u8fd0\u884c\u901f\u5ea6\u4e5f\u66f4\u5feb)\u3002\u56e0\u6b64\uff0c\u6211\u4e0d\u4e00\u5b9a\u671f\u671b\u914d\u5907\u76f8\u540c\u9177\u777fi7-10710U\u5904\u7406\u5668\u7684\u7b14\u8bb0\u672c\u7535\u8111\u80fd\u591f\u63d0\u4f9b\u76f8\u540c\u6c34\u5e73\u7684\u6027\u80fd\u3002\n\u4f46\u6211\u89c9\u5f97\u6700\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u662f\uff0c\u642d\u8f7d25\u74e6CPU\u7684NUC 10\u901a\u5e38\u6bd4\u642d\u8f7d45\u74e6\u82f1\u7279\u5c14\u9177\u777fi7-9750H\u516d\u6838\u5904\u7406\u5668\u7684\u7b14\u8bb0\u672c\u7535\u8111\u6027\u80fd\u66f4\u597d\u3002\u5c31\u50cf\u6211\u8bf4\u7684\uff0c\u5b83\u53ef\u80fd\u662f\u6211\u4eec\u5bb6\u76ee\u524d\u8fd0\u884c\u901f\u5ea6\u6700\u5feb\u7684\u7535\u8111--\u81f3\u5c11\u5728CPU\u6027\u80fd\u65b9\u9762\u662f\u8fd9\u6837\u3002\u56fe\u5f62\u6027\u80fd\u5219\u662f\u53e6\u4e00\u56de\u4e8b\u3002\n\u5728\u8fd0\u884c\u5355\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u4e4b\u524d\uff0c\u6211\u82b1\u4e86\u51e0\u5929\u65f6\u95f4\u4f7f\u7528NUC10\u4f5c\u4e3a\u6211\u7684\u4e3b\u8981\u5de5\u4f5c\u8ba1\u7b97\u673a\u3002\u4f5c\u4e3a\u4e00\u540d\u535a\u5ba2\u4f5c\u8005\u548c\u7f51\u7edc\u51fa\u7248\u5546\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4e00\u5929\u4e2d\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u6253\u5f00\u591a\u8fbe20\u4e2a\u6d4f\u89c8\u5668\u6807\u7b7e\uff0c\u4e00\u4e24\u4e2a\u56fe\u7247\u7f16\u8f91\u5668\uff0c\u4e5f\u8bb8\u8fd8\u6709\u4e00\u4e9b\u6765\u81eaSpotify\u3001Tdal\u6216YouTube\u7684\u97f3\u4e50\u6d41\u5a92\u4f53\u3002\n\u8001\u5b9e\u8bf4\uff0c\u5f53\u6211\u5728NUC 10\u548c\u6211\u901a\u5e38\u7684\u5de5\u4f5c\u7535\u8111Dell Vostro\u6210\u5c3115 7590(\u914d\u5907\u82f1\u7279\u5c14\u9177\u777fi7-9750H\u5904\u7406\u5668\u300116 GB RAM\u548c256 GB\u56fa\u6001\u786c\u76d8)\u4e4b\u95f4\u5207\u6362\u65f6\uff0c\u6211\u6ca1\u6709\u6ce8\u610f\u5230\u6027\u80fd\u4e0a\u7684\u592a\u5927\u5dee\u5f02\u3002\n\u4f46\u5f53\u6211\u5b89\u88c5\u6536\u5272\u673a\u6570\u5b57\u97f3\u9891\u5de5\u4f5c\u7ad9\u4ee5\u53caIzotope RX\u548c\u4e2d\u5b50\u63d2\u4ef6\u65f6\uff0c\u533a\u522b\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002\niZotope\u7684\u4e2d\u5b50\u5305\u62ec\u8bb8\u591a\u7528\u4e8e\u8c03\u6574\u5747\u8861\u5668\u3001\u538b\u7f29\u548c\u5176\u4ed6\u97f3\u9891\u8bbe\u7f6e\u7684\u5b9e\u7528\u7a0b\u5e8f\uff0c\u800cIzotope RX\u662f\u4e00\u5957\u5de5\u5177\uff0c\u7528\u4e8e\u964d\u4f4e\u80cc\u666f\u566a\u97f3\uff0c\u5e76\u4ee5\u5176\u4ed6\u65b9\u5f0f\u63d0\u9ad8\u5f55\u5236\u5bf9\u8bdd\u7684\u58f0\u97f3\u548c\u6e05\u6670\u5ea6\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u7535\u53f0\u3001\u64ad\u5ba2\u548c\u7535\u5f71\u540e\u671f\u5236\u4f5c\u5de5\u5177\uff0c\u4f46\u5b83\u4e5f\u662f\u6211\u7ecf\u5e38\u4f7f\u7528\u7684\u6700\u8017\u8d39\u8d44\u6e90\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u4e00\u3002\n\u6700\u8fd1\uff0c\u5f53\u6211\u7f16\u8f91\u5b8c\u4e00\u4e2a\u4e00\u5c0f\u65f6\u957f\u7684\u64ad\u5ba2\u8282\u76ee\u65f6\uff0c\u6211\u5728NUC10\u4e0a\u6e32\u67d3\u4e86\u8fd9\u4e2a\u9879\u76ee\uff0c\u4f5c\u4e1a\u5728\u5927\u7ea612\u5206\u949f\u5185\u5b8c\u6210\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u7684\u6e32\u67d3\u901f\u5ea6\u5927\u7ea6\u662f\u5b9e\u65f6\u901f\u5ea6\u76845\u500d\u3002\n\u7136\u540e\uff0c\u6211\u5c06\u76f8\u540c\u7684\u9879\u76ee\u52a0\u8f7d\u5230\u6211\u7684Dell Vostro\u6210\u5c3115\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\uff0c\u76f8\u540c\u7684\u5de5\u4f5c\u5927\u7ea6\u9700\u898117\u5206\u949f\u624d\u80fd\u5b8c\u6210(\u8fd9\u610f\u5473\u7740\u6e32\u67d3\u901f\u5ea6\u5927\u7ea6\u662f3.5\u500d)\u3002\n\u4f7f\u7528HWInFO\u76d1\u63a7CPU\u901f\u5ea6\u548c\u529f\u8017\uff0c\u6211\u6ce8\u610f\u5230NUC\u4e0d\u4ec5\u80fd\u591f\u66f4\u5feb\u5730\u5b8c\u6210\u5de5\u4f5c\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5728\u6d88\u8017\u66f4\u5c11\u529f\u8017\u7684\u60c5\u51b5\u4e0b\u505a\u5230\u8fd9\u4e00\u70b9\uff1a\nIntel NUC\u57283.9 GHz\u4e0b\u8fd0\u884c10-12\u5206\u949f\uff0c\u5e73\u5747\u529f\u8017\u4e3a20\u74e6\u3002\nDell Vostro\u6210\u5c3115 7590-17\u5206\u949f(3.8 GHz)\uff0c\u5e73\u5747\u529f\u8017\u4e3a37\u74e6\u3002\n\u6211\u662f\u901a\u8fc7\u89c2\u5bdfHWiNFO\u4f20\u611f\u5668\u7684\u7edf\u8ba1\u6570\u636e\u5f97\u5230\u8fd9\u4e9b\u5206\u6570\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u66f4\u7cbe\u786e\u4e00\u70b9\u7684\u4e1c\u897f\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u56fe\u8868\uff0c\u663e\u793a\u4e86\u5728\u51e0\u53f0\u4e0d\u540c\u7684\u7535\u8111\u4e0a\u8fd0\u884cIzotope\u7684Dialog Isolate\u5de5\u5177\u9700\u8981\u591a\u957f\u65f6\u95f4\uff0c\u8fd9\u6bb5\u5f55\u97f3\u5728\u51e0\u53f0\u4e0d\u540c\u7684\u7535\u8111\u4e0a\u5f55\u5236\u4e8667\u5206\u949f\uff1a\nNUC 10\u6bd4\u6211\u6700\u8fd1\u6d4b\u8bd5\u7684\u4efb\u4f55\u5176\u4ed6\u7535\u8111\u90fd\u80fd\u5728\u66f4\u77ed\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c(\u5c3d\u7ba1\u6709\u8da3\u7684\u662f\u770b\u5230\u914d\u5907\u9177\u777fi7-1065G7\u7684Dell XPS 13 2\u54081\u7b14\u8bb0\u672c\u7535\u8111\u7d27\u968f\u5176\u540e\uff0c\u56e0\u4e3a\u8be5\u7b14\u8bb0\u672c\u7535\u8111\u670915\u74e6\u7684\u5904\u7406\u5668\u3002\u8fd9\u8ba9\u6211\u60f3\u77e5\u9053\uff0c\u5982\u679c\u82af\u7247\u88ab\u914d\u7f6e\u4e3a25\u74e6\u7684\u8bdd\uff0c\u5b83\u5728\u8fd9\u4e9b\u6d4b\u8bd5\u4e2d\u4f1a\u505a\u5f97\u600e\u4e48\u6837)\u3002\n\u82f1\u7279\u5c14\u6700\u65b0\u7684\u8ff7\u4f60\u53f0\u5f0f\u673a\u5728\u5305\u62ecCinebench\u548cGeekbench\u5728\u5185\u7684\u5176\u4ed6CPU\u4e13\u7528\u6d4b\u8bd5\u4e2d\u4e5f\u8868\u73b0\u76f8\u5f53\u4e0d\u9519\u3002\u8be5\u7cfb\u7edf\u5728\u4f7f\u7528\u624b\u5239\u5bf9\u89c6\u9891\u8fdb\u884c\u8f6c\u7801\u65f6\u901f\u5ea6\u4e5f\u76f8\u5f53\u5feb\u3002\n\u5f53\u4f60\u770b\u4e00\u770b\u50cf3DMark\u8fd9\u6837\u7684\u6e38\u620f\u6027\u80fd\u6d4b\u8bd5\uff0c\u6216\u8005\u50cfPCMark\u6216Passmark\u8fd9\u6837\u878d\u5408\u4e86CPU\u3001GPU\u3001\u5185\u5b58\u548c\u5b58\u50a8\u7684\u901a\u7528\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u7f3a\u4e4f\u72ec\u7acb\u663e\u5361\u7684\u95ee\u9898\u3002\n\u5728\u4e0b\u9762\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u60a8\u53ef\u4ee5\u770b\u5230Dell Vostro\u6210\u5c3115 7591\u5728\u8fd9\u4e9b\u6d4b\u8bd5\u4e2d\u5360\u636e\u4f18\u52bf\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8e\u5176NVIDIA GeForce GTX 1050 GPU\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u53f0\u7535\u8111\u4e0a\u73a9\u4e00\u4e9b\u6e38\u620f\uff0c\u4f46\u5b83\u4e0d\u662f\u4e00\u53f0\u6e38\u620f\u673a\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u8fdb\u884c\u89c6\u9891\u7f16\u8f91\u6216\u56fe\u5f62\u8bbe\u8ba1\uff0c\u4f46\u8fd9\u4e0d\u662f\u5b83\u7684\u4e3b\u8981\u7528\u9014\u3002\u56e0\u6b64\uff0c\u4e0d\u8981\u6307\u671b\u6700\u65b0\u7684\u9ad8\u7aefPC\u6e38\u620f\u6709\u9ad8\u5e27\u7387\uff0c\u4e5f\u4e0d\u8981\u6307\u671b\u7cfb\u7edf\u80fd\u5f88\u597d\u5730\u8fd0\u884c\u865a\u62df\u73b0\u5b9e\u6216\u5176\u4ed6\u53d7\u76ca\u4e8e\u786c\u4ef6\u52a0\u901f\u56fe\u5f62\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u8fd9\u6709\u70b9\u4ee4\u4eba\u5931\u671b\uff0c\u56e0\u4e3a\u867d\u7136Bean Canyon NUC\u5728\u7279\u5b9a\u4e8eCPU\u7684\u4efb\u52a1\u4e0a\u5f97\u5206\u4e0d\u5982\u65b0\u578b\u53f7\uff0c\u4f46\u5b83\u786e\u5b9e\u62e5\u670928\u74e6\u7684\u9177\u777fi7-8559U\u5904\u7406\u5668\u548c\u82f1\u7279\u5c14Iris Plus\u663e\u5361\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5728\u56fe\u5f62\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u7684\u5f97\u5206\u6bd4\u65b0\u578b\u53f7\u66f4\u9ad8\u3002\n\u5982\u679c\u80fd\u770b\u5230\u82f1\u7279\u5c14\u5728\u63d0\u9ad8CPU\u6027\u80fd\u7684\u540c\u65f6\u81f3\u5c11\u4fdd\u6301GPU\u6027\u80fd\u7a33\u5b9a\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\u4f46\u82f1\u7279\u5c14\u6ca1\u6709\u63d0\u4f9b\u7b2c10\u4ee3U\u7cfb\u5217\u5904\u7406\u5668\uff0c\u65e2\u6709Iris Plus\u663e\u5361\uff0c\u53c8\u6709\u591a\u8fbe6\u4e2aCPU\u6838\u5fc3\u548c12\u4e2a\u7ebf\u7a0b\u3002\n\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u8fd9\u5bb6\u82af\u7247\u5236\u9020\u5546\u5c06\u5176\u7b2c10\u4ee3\u5904\u7406\u5668\u9635\u5bb9\u62c6\u5206\u4e3a14 nm\u7684\u201c\u5f57\u661f\u6e56\u201d\u82af\u7247\uff0c\u652f\u6301\u9ad8\u8fbe14 nm\u7684\u91c7\u7528\u82f1\u7279\u5c14\u8d85\u9ad8\u6e05\u663e\u5361\u7684\u9177\u777fi7-10710U\u516d\u6838\u5904\u7406\u5668\uff0c\u4ee5\u53ca\u652f\u6301\u9ad8\u8fbe10 nm\u7684\u201c\u51b0\u6e56\u201d\u7cfb\u5217\uff0c\u652f\u6301\u9ad8\u8fbe11\u4ee3Iris Plus\u663e\u5361\u7684\u9177\u777fi7-1065G7\u5904\u7406\u5668\u3002\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u4e0a\u56fe\u4e2d\u7684Dell XPS 13 2\u54081\u7b14\u8bb0\u672c\u7535\u8111\u5728\u663e\u5361\u6d4b\u8bd5\u4e2d\u5f97\u5206\u9ad8\u4e8e\u82f1\u7279\u5c14NUC\uff0c\u4f46\u5728CPU\u6027\u80fd\u65b9\u9762\u843d\u540e\u3002\n\u6211\u4e0d\u662f\u4e00\u4e2a\u5f88\u559c\u6b22\u73a9\u6e38\u620f\u7684\u4eba\uff0c\u4f46\u9664\u4e86\u8fd0\u884c3DMark\u4e4b\u5916\uff0c\u6211\u786e\u5b9e\u5b89\u88c5\u4e86World War Z\uff0c\u5e76\u5728\u4e00\u573a\u6218\u5f79\u4e2d\u73a9\u4e86\u5927\u7ea620\u5206\u949f\uff0c\u6ca1\u6709\u4efb\u4f55\u660e\u663e\u7684\u6ede\u540e\u3002\n\u6211\u8fd8\u8fd0\u884c\u4e86CrystalDiskMark\u6765\u68c0\u67e5\u5b58\u50a8\u8bfb\u5199\u901f\u5ea6\u3002\u6211\u6536\u5230\u7684NUC10\u5957\u4ef6\u6709\u4e00\u4e2aNVMe\u56fa\u6001\u786c\u76d8\u548c\u4e00\u4e2a5400RPM\u786c\u76d8\u3002\u867d\u7136\u5b58\u50a8\u901f\u5ea6\u660e\u663e\u5feb\u4e8e\u5178\u578b\u7684\u786c\u76d8\uff0c\u4f46\u6309\u7167\u73b0\u4ee3NVMe\u56fa\u6001\u786c\u76d8\u7684\u6807\u51c6\uff0c\u5b83\u7684\u901f\u5ea6\u5e76\u4e0d\u662f\u6240\u6709\u7684\u90a3\u4e48\u5feb\u3002\u4e0d\u8fc7\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u66f4\u6362SSD\u6765\u63d0\u9ad8\u8fd9\u4e9b\u5206\u6570\u3002\n\u6700\u540e\uff0c\u5173\u4e8e\u529f\u8017\u89c2\u5bdf\u7684\u51e0\u70b9\u6ce8\u610f\u4e8b\u9879\u3002\u8fd9\u4e0d\u662f\u6700\u79d1\u5b66\u7684\u6d4b\u8bd5\uff0c\u4f46\u6211\u786e\u5b9e\u6ce8\u610f\u5230\uff0c\u5728\u65e5\u5e38\u4f7f\u7528\u671f\u95f4(10-20\u4e2a\u6d4f\u89c8\u5668\u6807\u7b7e\u3001\u97f3\u4e50\u6d41\u5a92\u4f53\u548c\u4e00\u4e9b\u706f\u5149\u56fe\u50cf\u7f16\u8f91)\uff0c\u7cfb\u7edf\u603b\u529f\u8017\u5e73\u5747\u7ea6\u4e3a20\u74e6\u6216\u66f4\u5c11\u3002\n\u5f53\u6211\u542f\u52a8Prime95\u5bf9CPU\u8fdb\u884c\u62f7\u95ee\u6d4b\u8bd5\u65f6\uff0c\u529f\u8017\u77ed\u6682\u6500\u5347\u81f382\u74e6\uff0c\u7136\u540e\u7a33\u5b9a\u523060\u74e6\uff0c\u5e76\u4fdd\u6301\u5728\u539f\u6765\u7684\u6c34\u5e73\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u98ce\u6247\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u8f6c\u5230\u4e86\u9ad8\u901f\u6863\u4f4d\uff0c\u65cb\u8f6c\u65f6\u53d1\u51fa\u4e86\u53ef\u542c\u89c1\u7684\u58f0\u97f3\u3002\n\u8ba1\u7b97\u673a\u7a7a\u95f2\u65f6\u7684\u529f\u8017\u53ef\u4ee5\u4f4e\u81f35\u74e6\u3002\u4f46\u6211\u5f88\u5c11\u770b\u5230\u5b83\u5728\u6b63\u5e38\u4f7f\u7528\u65f6\u964d\u523015\u74e6\u4ee5\u4e0b\u3002\n\u591a\u4e8f\u4e86\u82f1\u7279\u5c14AX201\u65e0\u7ebf\u82af\u7247\uff0cFrost Canyon\u7cfb\u7edf\u4e5f\u662f\u82f1\u7279\u5c14NUC\u5bb6\u65cf\u4e2d\u7b2c\u4e00\u4e2a\u652f\u6301WiFi 6(\u4e5f\u79f0\u4e3a802.11ax)\u7684\u6210\u5458\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7684\u7406\u8bba\u6700\u9ad8\u65e0\u7ebf\u4f20\u8f93\u901f\u5ea6\u4e3a2400 Mbps\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8c46\u5b50\u5ce1\u8c37NUC\u7684\u6700\u9ad8\u901f\u5ea6\u4e3a1733 Mbps\u3002\n\u4e0d\u8fc7\uff0c\u60a8\u9700\u8981802.11ax\u8def\u7531\u5668\u548c\u5176\u4ed6\u53d7\u652f\u6301\u7684\u786c\u4ef6\u624d\u80fd\u771f\u6b63\u4f7f\u7528\u5347\u7ea7\u3002\u6211\u8fd8\u6ca1\u6709\uff0c\u6240\u4ee5\u6211\u65e0\u6cd5\u6d4b\u8bd5\u6b64\u529f\u80fd\u3002\u4f46\u6211\u8981\u6307\u51fa\u7684\u662f\uff0cWiFi5(802.11ac)\u7684\u6027\u80fd\u662f\u2026\u3002\u4e0d\u592a\u5b8c\u7f8e\u3002\n\u541e\u5410\u91cf\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5f88\u597d\u3002\u4f46\u662fNUC10\u6bcf\u5929\u81f3\u5c11\u4f1a\u5931\u53bb\u4e00\u5230\u4e24\u6b21\u4e0e\u6211\u7684\u8def\u7531\u5668\u7684\u8fde\u63a5\uff0c\u5c3d\u7ba1\u6211\u7684\u8def\u7531\u5668\u5b9e\u9645\u4e0a\u79bb\u7535\u8111\u53ea\u6709\u51e0\u82f1\u5c3a\u8fdc\u3002\u6211\u4e0d\u662f\u65e0\u7ebf\u7f51\u7edc\u65b9\u9762\u7684\u4e13\u5bb6\uff0c\u4e0d\u80fd\u8bf4\u8fd9\u662f\u7531\u4e8eNUC\u3001\u6211\u7684\u8def\u7531\u5668\u8fd8\u662f\u5176\u4ed6\u539f\u56e0--\u4f46\u6211\u901a\u5e38\u80fd\u591f\u5728\u4e00\u5206\u949f\u5185\u91cd\u65b0\u8fde\u63a5\uff0c\u65b9\u6cd5\u662f\u91cd\u7f6e\u65e0\u7ebf\u9002\u914d\u5668\u548c/\u6216\u5355\u51fbWindows10\u72b6\u6001\u6258\u76d8\u4e2d\u7684WiFi\u56fe\u6807\uff0c\u7136\u540e\u9009\u62e9\u201c\u6545\u969c\u6392\u9664\u95ee\u9898\u201d\u3002\n\u603b\u4f53\u800c\u8a00\uff0c\u82f1\u7279\u5c14\u6700\u65b0\u7684NUC\u7ed9\u6211\u7559\u4e0b\u4e86\u76f8\u5f53\u6df1\u523b\u7684\u5370\u8c61\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u82f1\u7279\u5c14\u6210\u529f\u5730\u5c06\u4e00\u53f0\u529f\u80fd\u9f50\u5168\u7684\u4e2a\u4eba\u7535\u8111\u585e\u8fdb\u4e86\u4e00\u4e2a\u5927\u7ea6\u4e24\u4e2aCD\u73e0\u5b9d\u76d2\u5927\u5c0f\u7684\u5305\u88c5\u4e2d\uff0c\u8fd9\u4e9b\u9996\u9970\u76d2\u5806\u53e0\u5728\u4e00\u8d77(\u8fd9\u662f\u4e00\u4e2a\u8d8a\u6765\u8d8a\u8fc7\u65f6\u7684\u53c2\u8003\u6587\u732e)\u3002\n\u5176\u7d27\u51d1\u7684\u5c3a\u5bf8\u4f7f\u5b83\u6210\u4e3a\u4e00\u53f0\u51e0\u4e4e\u53ef\u4ee5\u653e\u5728\u4efb\u4f55\u5730\u65b9\u7684PC\u3002\u5b83\u51e0\u4e4e\u4e0d\u5360\u7528\u60a8\u7684\u529e\u516c\u684c\u7a7a\u95f4\uff0c\u4e3a\u60a8\u7684\u663e\u793a\u5668\u3001\u952e\u76d8\u6216\u5176\u4ed6\u914d\u4ef6\u7559\u51fa\u66f4\u591a\u7a7a\u95f4\u3002\u5982\u679c\u4f60\u60f3\u628a\u5b83\u653e\u5728\u8d77\u5c45\u5ba4\u91cc\uff0c\u5b83\u6bd4\u7535\u7f06\u7bb1\u5c0f\uff0c\u6bd4Roku\u5927\u4e0d\u4e86\u591a\u5c11\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u7535\u8111\u9065\u63a7\u5668\uff0c\u524d\u9762\u677f\u4e0a\u6709\u4e00\u4e2a\u7ea2\u5916\u7ebf\u63a5\u6536\u5668\uff0c\u53ef\u4ee5\u5728BIOS\u4e2d\u542f\u7528\u3002\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u8bed\u97f3\u63a7\u5236\u6216\u89c6\u9891\u4f1a\u8bae\u76844\u9ea6\u514b\u98ce\u9635\u5217(\u5c3d\u7ba1\u60a8\u9700\u8981\u4e3a\u540e\u8005\u63d0\u4f9b\u81ea\u5df1\u7684\u7f51\u7edc\u6444\u50cf\u5934)\u3002\n\u4f46\u662f\uff0c\u5c3d\u7ba1\u5b83\u7684\u8eab\u6750\u5f88\u5c0f\uff0cNUC10i7FNHAA\u62e5\u6709\u8db3\u591f\u7684\u9a6c\u529b\u6765\u5b8c\u6210\u771f\u6b63\u7684\u5de5\u4f5c\u2026\u3002\u53ea\u8981\u60a8\u7684\u5de5\u4f5c\u4e0d\u9700\u8981\u72ec\u7acb\u7684GPU\u6216\u90a3\u79cd\u5bfc\u81f4AMD\u5f00\u53d164\u6838\u53f0\u5f0f\u673a\u82af\u7247\u7684\u8d44\u6e90\u5bc6\u96c6\u578b\u4efb\u52a1\u3002\n\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u60a8\u7684\u5de5\u4f5c\u6216\u5a31\u4e50\u9700\u8981\u72ec\u7acb\u663e\u5361\uff0c\u7406\u8bba\u4e0a\u60a8\u53ef\u4ee5\u8fde\u63a5\u7b2c\u4e09\u65b9\u663e\u5361\u5e95\u5ea7\u5e76\u6dfb\u52a0AMD\u6216NVIDIA\u663e\u5361\u3002NUC 10\u6709\u4e00\u4e2a\u8fc5\u96f73\u7aef\u53e3\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u53ef\u4ee5\u4e0e\u4e13\u4e3a\u7b14\u8bb0\u672c\u7535\u8111\u8bbe\u8ba1\u7684\u663e\u5361\u575e\u7ad9\u914d\u5408\u4f7f\u7528\u3002\n\u4f46\u8fd9\u4e9b\u7801\u5934\u5f80\u5f80\u53c8\u5927\u53c8\u8d35\uff0c\u800c\u4e14\u8017\u7535\u3002\u6211\u6000\u7591\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u88abNUC 10\u5438\u5f15\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e9b\u90fd\u662f\u4ee4\u4eba\u53cd\u611f\u7684\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u5b83\u7684\u4f53\u79ef\u5f88\u5c0f\u3002\n\u642d\u8f7d\u9177\u777fi7\u5904\u7406\u5668\u7684\u57fa\u672c\u673a\u578b\u8d77\u4ef7620\u7f8e\u5143\uff0cNUC10\u4e5f\u5f88\u96be\u8bf4\u662f\u684c\u9762\u8ba1\u7b97\u7684\u6700\u4fbf\u5b9c\u9009\u62e9\u3002\u914d\u5907\u5185\u5b58\u3001\u5b58\u50a8\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5168\u914d\u7f6e\u578b\u53f7\u4f1a\u8ba9\u60a8\u82b1\u8d39\u66f4\u591a\u3002\n\u6211\u786e\u5b9e\u8ba4\u4e3a\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u613f\u610f\u4e3a\u8fd9\u4e48\u5c0f\u7684\u4e1c\u897f\u591a\u4ed8\u4e00\u70b9\u94b1\uff0c\u727a\u7272\u4e00\u70b9\u9a6c\u529b\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e2a\u5c0f\u5c0f\u7684\u971c\u51bb\u5ce1\u8c37NUC\u53ef\u80fd\u662f\u503c\u5f97\u7684\u3002\u4f46\u663e\u7136\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u3002\n\u82f1\u7279\u5c14\u786e\u5b9e\u63d0\u4f9b\u4e86\u642d\u8f7d\u9177\u777fi3\u548c\u9177\u777fi5\u5904\u7406\u5668\u7684\u66f4\u4fbf\u5b9c\u7684\u673a\u578b\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u6d4b\u8bd5\u8fc7\u8fd9\u4e9b\u914d\u7f6e\uff0c\u6240\u4ee5\u6211\u4e0d\u80fd\u5bf9\u6027\u80fd\u53d1\u8868\u8bc4\u8bba\u3002\nLiliputing\u7684\u4e3b\u8981\u6536\u5165\u6765\u6e90\u662f\u5e7f\u544a\u548c\u4f1a\u5458\u94fe\u63a5(\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u70b9\u51fb\u9875\u9762\u9876\u90e8\u7684\u201c\u5546\u5e97\u201d\u6309\u94ae\uff0c\u5728\u4e9a\u9a6c\u900a\u4e0a\u8d2d\u4e70\u4e1c\u897f\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u4e00\u5c0f\u7b14\u4f63\u91d1)\u3002\n\u4f46\u662f\u6709\u51e0\u79cd\u65b9\u5f0f\u53ef\u4ee5\u8ba9\u4f60\u76f4\u63a5\u652f\u6301\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u5373\u4f7f\u4f60\u4f7f\u7528\u7684\u662f\u5e7f\u544a\u62e6\u622a\u5668\uff0c\u5e76\u4e14\u8ba8\u538c\u7f51\u4e0a\u8d2d\u7269\u3002", "note_en": "Intel\u2019s  NUC computers are tiny desktop PCs that typically have laptop-class processors. But the thing about laptop processors is that some of them have gotten pretty good in recent years, offering desktop-class performance in some situations.\n For the past few weeks I\u2019ve been using a new   Intel NUC 10 mini PC with a Core i7-10710U hexa-core processor as my primary computer, and I\u2019ve been pleasantly surprised just how zippy this computer is.\n  Intel loaned me a demo unit for the purposes of this review, and I\u2019ve found that it makes an excellent workhorse PC for my both my day job as a blogger/web publisher and my  side gig as a podcast editor.\n Despite it\u2019s small size (the model I\u2019m using measures just 4.6\u2033 x 4.4\u2033 x 2\u2033), the NUC 10 is probably the fastest computer in my house at the moment. It scores higher than my  Dell Vostro 15 7590 in many benchmarks and performs resource-intensive real-world tasks more quickly, despite the fact that the Dell laptop has a more power-hungry processor.\n But there are some exceptions \u2014 the NUC 10 featured Intel UHD integrated graphics. You\u00a0 can play some PC games or render video using this little computer. But you\u2019re going to be able to those things a lot better on a system with discrete graphics or a more powerful integrated GPU.\n  An NUC isn\u2019t necessarily the best choice for everyone. The small size makes this little PC easy to fit beneath or behind a monitor. It doesn\u2019t take up much space in your office and wouldn\u2019t look out of place in your living room either. And the model featured in this review has a decent selection of ports and upgrade options.\n  But one thing you cannot upgrade is the processor \u2014 it\u2019s affixed to the motherboard the same way a laptop processor would be. If performance is more important to you than size, then you\u2019d probably be better off going with a larger PC. For the same amount of money you\u2019d spend on an NUC 10 you could find one with a significantly more powerful processor\u2026 and a socket that allows you to remove and replace that chip with a higher-power processor in the future.\n   Intel\u2019s NUC 10 series computers with Comet Lake processors are also known by their code-name \u201cFrost Canyon\u201d and come in a range of options including models with Intel Core i3, Core i5, and Core i7 processors which are sold at  a variety of price points. Here are some starting prices for barebones configurations:\n  The mode Intel loaned me for testing is a top-of-the-line configuration with an Intel Core i7 chip, 16GB of RAM, a 256GB SSD, 1TB hard drive, and Windows 10 Home. It sells for  around $1,000.\n     The Intel NUC 10 \u201cFrost Canyon\u201d computer looks a lot like most other NUC systems Intel has released in recent years.\n  Some of the ports have changed, but much like the \u201c Bean Canyon\u201d NUC 8 I reviewed in 2018, the new model is a small box with a few ports and a power button on the front, a bunch of additional ports on the back, a shiny plastic lid, and a dark metal body.\n The Bean Canyon NUC had a microSD card reader and two USB Type-A ports on the front. The newer Frost Canyon model has a full-sized SD card slot and a USB Type-A and Type-C port on the front.\n   But under the hood, Intel has switched from a 28 watt, 8th-gen Intel Core processor with Iris Plus graphics to a 25 watt, 10th-gen chip with Intel UHD graphics.\n In other words, you get more CPU power, but less graphics performance. That trade-off is worth it if you\u2019re looking for general purpose computing \u2014 the new model scores higher in most benchmarks. But if you\u2019re looking for a tiny gaming, video editing, or digital art workstation, you might be better off with the older model.\n  The NUC 10 comes in two sizes \u2014 short and tall. They\u2019re both 4.6\u2033 x 4.4\u2033 across, but the \u201ctall\u201d models are 2 inches high, while the \u201cshort\u201d versions are just 1.5 inches thick. The difference is that the taller version has room for both an M.2 solid state drive and a 2.5 inch hard drive or SSD. The smaller versions lack the 2.5 inch drive bay.\n The  Intel NUC10i7FNHAA configuration featured in this review is a tall model. But Intel also offers  short versions.\n While some folks looking for a space-saving computer may also be interested in a silent PC, the Frost Canyon NUC doesn\u2019t fit the bill. Not only does the model Intel loaned me have a hard drive (with spinning platters), but it also has a fan that spins up under heavy load. The NUC 10 is no louder than a typical laptop. But it\u2019s also no quieter than one.\n  The little computer supports WiFi 6, Bluetooth 5.0, and Gigabit Ethernet and has a Thunderbolt 3 port on the back, as well as an HDMI port.\n Intel says you can connect up to three 4K60fps displays, but you\u2019ll need to use a USB-C to dual mini DisplayPort splitter to do that because the USB-C port on the front of the NUC 10 doesn\u2019t seem to support video output.\n That said, I was able to connect a 2560 x 1080 pixel monitor and a 1920 x 1080 pixel TV and use both simultaneously without any problems.\n  While the ports let you add monitors, displays, and even external graphics cards, you can also perform some upgrades by opening up the computer\u2019s case. There are four little stubs on the bottom of the NUC 10 that lift the body of the computer off your table or desk, and each has a screw inside. Loosen the screws with the screwdriver and you can remove the bottom panel.\n   Under the hood, you\u2019ll find an M.2 2242/2280 slot for solid state storage and two SODIMM slots for DDR4-2666 RAM. If you have a \u201ctall\u201d version of the NUC 10, there\u2019s also a 2.5 inch drive bay in the bottom cover itself.\n In the demo unit Intel sent me, all of those slots are populated. But if you opt for a barebones model you can choose your own memory and storage. The computer supports up to 64GB of RAM and SATA III and/or NVMe storage. It\u2019s also compatible with Intel Optane memory.\n  The top cover of the NUC is also removable, although you won\u2019t find any traditional PC components underneath. But eventually you may be able to  replace the cover with a third-party one that adds functionality such as extra USB or video out ports or support for wireless charging.\n  The NUC 10 also comes with a 120W power adapter that\u2019s almost nearly as big as the computer.\n  I should point out that while this little computer has a laptop-class Intel Core U-series processor, it\u2019s configured with a 25 watt TDP, which means it can consume more power (and run faster) in the NUC 10 than it would in most laptops (which typically have the chip set to a 15 watt TDP). So I wouldn\u2019t necessarily expect a laptop with the same Core i7-10710U processor to offer the same level of performance.\n But what I find most impressive, is that the NUC 10 with a 25 watt CPU often performs better than a laptop with a 45-watt Intel Core i7-9750H hexa-core processor. Like I said, it may currently be the fastest computer in my house \u2014 as least in terms of CPU performance. Graphics performance is another story.\n  Before running a single benchmark, I spent a few days using the NUC 10 as my primary work computer. As a blogger and web publisher, that means I spend most of my day with up to 20  browser tabs open, an  image editor or  two, and maybe some music streaming from Spotify, Tidal, or YouTube.\n Honestly, I didn\u2019t notice much difference in performance when switching between the NUC 10 and my usual work computer, the Dell Vostro 15 7590 (with an Intel Core i7-9750H processor, 16GB of RAM, and a 256GB SSD).\n But when I installed the  Reaper digital audio workstation along with the  Izotope RX\u00a0and  Neutron plugins, the differences became much more clear.\n  Izotope\u2019s Neutron includes a number of utilities for adjusting EQ, compression, and other audio settings, while Izotope RX is a suite of tools for reducing background noise and otherwise improving the sound and clarity of recorded dialog. It\u2019s a powerful took for radio, podcast, and movie post-production, but it\u2019s also one of the most resource-intensive applications I use on a regular basis.\n When I was finished editing  an hour-long podcast episode recently, I rendered the project on the NUC 10 and the job finished in about 12 minutes, which means it rendered at about 5X real-time speed.\n  I then loaded the same project on my Dell Vostro 15 laptop and the same job took about 17 minutes to finish (which means it rendered at about 3.5X speed).\n Using  HWInFO\u00a0to keep an eye on the CPU speeds and power consumption, I noticed that not only was the NUC able to get the job done more quickly, but it did that while consuming less power:\n Intel NUC 10 \u2013 12 minutes at 3.9 GHz with power consumption averaging 20 watts\n Dell Vostro 15 7590 \u2013 17 minutes at 3.8 GHz with power consumption averaging 37 watts\n I got those scores by eyeballing the HWiNFO sensor stats. But if you\u2019re looking for something a little more precise, here\u2019s a chart showing how long it took to run Izotope\u2019s Dialog Isolate tool on a 67 minute audio recording on several different PCs:\n  The NUC 10 was able to get the job done in less time than any other computer I\u2019ve tested recently (although it\u2019s interesting to see that the  Dell XPS 13 2-in-1 laptop with a Core i7-1065G7 was a close second, since that laptop has a 15-watt processor. It makes me wonder how that chip would do in these tests if it was configured to run at 25-watts).\n Intel\u2019s latest mini-desktop also fares pretty well in other CPU-specific tests including Cinebench and GeekBench. The system is also pretty speedy at transcoding video using Handbrake.\n  The lack of discrete graphics comes into play when you look at gaming performance tests like 3DMark, or all-purpose benchmarks like PCMark or Passmark that incorporate CPU, GPU, memory, and storage.\n In the benchmarks below, you can see that the Dell Vostro 15 7591 holds an edge in these tests, largely due to its NVIDIA GeForce GTX 1050 GPU.\n  In a nutshell, you can play some games on this computer, but it\u2019s not a gaming PC. And you can use it for video editing or graphic design, but that\u2019s not its primary purpose. So don\u2019t expect high frame rates in the latest premium PC games, and don\u2019t expect the system to function well for virtual reality or other applications that benefit from hardware-accelerated graphics.\n That\u2019s a little disappointing \u2014 because while the Bean Canyon NUC doesn\u2019t score quite as well as the newer model on CPU-specific tasks, it  does have a 28-watt Core i7-8559U processor with Intel Iris Plus graphics, which allows it to score higher on graphics benchmarks than the newer model.\n It would have been nice to see Intel boost the CPU performance while at least keeping the GPU capabilities steady. But Intel doesn\u2019t offer a 10th-gen U-series processor with both Iris Plus graphics\u00a0 and up to 6 CPU cores and 12 threads.\n Instead the chip maker split its 10th-gen processor lineup into 14nm \u201cComet Lake\u201d chips with support for up to the Core i7-10710U hexa-core processor with Intel UHD graphics and the 10nm \u201cIce Lake\u201d series with support for up to a Core i7-1065G7 processor with Gen11 Iris Plus graphics. You see this represented by the Dell XPS 13 2-in-1 in the charts above \u2014 the laptop scores higher than Intel\u2019s NUC in graphics tests, but trails in CPU performance.\n I\u2019m not much of a gamer, but in addition to running 3DMark, I did install  World War Z and play through about 20 minutes of a campaign without any noticeable lag.\n  I also ran CrystalDiskMark to examine storage read/write speeds. The NUC 10 kit I received has an NVMe SSD and a 5400 RPM hard drive. While the storage is significantly faster than a typical HDD, it\u2019s not all that speedy by modern NVMe SSD standards. You may be able to boost these scores by replacing the SSD though.\n  Finally, a few notes on power consumption observations. This isn\u2019t the most scientific test, but I did notice that during daily use (10-20 browser tabs, music streaming, and some light image editing), the total system power usage averaged around 20 watts or less.\n When I fired up  Prime95 to give the CPU a torture test, power consumption climbed briefly as high as 82 watts, before settling down to 60 watts, where it stayed. Unsurprisingly, the fan kicked into high gear during this test, making an audible sound as it spun.\n  The computer\u2019s power consumption can go as low as 5 watts when idle. But I rarely saw it dip below 15 watts during normal use.\n Thanks to an Intel AX201 wireless chip, the Frost Canyon system is also the first member of Intel\u2019s NUC family to features support for WiFi 6 (also known as 802.11ax). That means it has a theoretical top wireless transfer speed of 2400 Mbps. By comparison, the Bean Canyon NUC topped out at 1733 Mbps.\n You will need an 802.11ax router and other supported hardware to actually make use of the upgrade though. I don\u2019t have one yet, so I wasn\u2019t able to test this feature. But I will note that WiFi 5 (802.11ac) performance was\u2026 less than perfect.\n Throughput was fine most of the time. But the NUC 10 loses its connection to my router at least once or twice a day, despite the fact that my router is literally a few feet away from the computer. I\u2019m not enough of an expert on wireless networking to say whether this is due to the NUC, my router, or something else \u2014 but I was usually able to reconnect in under a minute by resetting the wireless adapter and/or clicking the WiFi icon in the Windows 10 status tray and choosing \u201ctroubleshoot problems.\u201d\n  Overall, I\u2019m pretty impressed with Intel\u2019s latest NUC. As usual, Intel has managed to stuff a full-fledged PC into a package about the size of a couple of CD jewel cases stacked on top of one another (an increasingly dated reference).\n Its compact size makes this a PC that you can put nearly anywhere. It takes up little space on your desk, leaving more room for your monitor, keyboard, or other accessories. It\u2019s smaller than a cable box and not much larger than a Roku if you wanted to put it in your living room. And there\u2019s an infared receiver in the front panel that can be enabled in the BIOS if you want to use a remote control for the computer. There\u2019s also a 4-microphone array for voice controls or video conferencing (although you\u2019ll need to supply your own webcam for the latter).\n   But despite its diminutive stature, the NUC10i7FNHAA packs enough horsepower to get real work done\u2026 as long as your work doesn\u2019t require a discrete GPU or the kind of resource-intensive tasks that led AMD to develop  a 64-core desktop chip.\n Actually, if you need\u00a0discrete graphics for work or play, you\u00a0 could theoretically attach a third-party graphics dock and add an AMD or NVIDIA graphics card. The NUC 10 has a Thunderbolt 3 port, so it should work with graphics docks designed for laptops.\n But those docks tend to be big, expensive, and power hungry. And I suspect those will all be turn-offs for the sort of folks who are drawn to the NUC 10 specifically because of its small size.\n  With prices starting at $620 for a barebones model with a Core i7 processor, the NUC 10 is also hardly the cheapest option for desktop computing. A fully configured model with memory, storage, and operating system will set you back even more.\n I do think the little Frost Canyon NUC is probably worth the asking price for folks who are willing to pay a little extra and sacrifice a little horsepower for something so small. But obviously not everyone will fall into that category.\n Intel does offer cheaper models with Core i3 and Core i5 processors, but I haven\u2019t tested those configurations so I can\u2019t comment on the performance.\n           Liliputing\u2019s primary sources of revenue are advertising and affiliate links (if you click the \u201cShop\u201d button at the top of the page and buy something on Amazon, for example, we\u2019ll get a small commission).\n But there are several ways you can support the site directly even if you\u2019re using an ad blocker and hate online shopping.", "posttime": "2020-05-29 23:58:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82f1\u7279\u5c14,\u91c7\u7528,intel", "title": "Intel Frost Canyon NUC 10\u8bc4\u6d4b(\u91c7\u7528\u82f1\u7279\u5c14\u9177\u777fi7-10710U Comet Lake)", "title_en": "Intel Frost Canyon NUC 10 Review (With Intel Core I7-10710U Comet Lake)", "transed": 1, "url": "https://liliputing.com/2020/04/intel-frost-canyon-nuc-10-review-with-intel-core-i7-10710u-comet-lake.html", "via": "", "real_tags": ["\u82f1\u7279\u5c14", "\u91c7\u7528", "intel"]}, {"category": "", "categoryclass": "", "imagename": "2e041e1887b11972e5682a0be51e25a0.png", "infoid": 1004267, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7531\u4e8e\u6709\u5927\u91cf\u7684\u6587\u5b57\u622a\u56fe\uff0c\u8fd9\u7bc7\u535a\u5ba2\u6700\u597d\u5728\u53f0\u5f0f\u673a\u4e0a\u9605\u8bfb\uff0c\u800c\u4e0d\u662f\u5728\u624b\u673a\u4e0a\u9605\u8bfb\u3002\u8fd9\u7bc7\u6587\u7ae0\u4e5f\u5f88\u957f\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u4f1a\u60f3\u8981\u5b89\u987f\u4e0b\u6765\u3002\n\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u90fd\u77e5\u9053\u6211\u6bcf\u5929\u90fd\u4f7f\u7528Brave\u4f5c\u4e3a\u6211\u7684\u6d4f\u89c8\u5668\u3002\u6211\u559c\u6b22\u7684\u529f\u80fd\u4e4b\u4e00\u662f\uff0c\u6211\u53ef\u4ee5\u9009\u62e9(\u4e0d\u7ecf\u5e38)\u770b\u5230\u5f39\u51fa\u5f0f\u5e7f\u544a\uff0c\u4ee5\u6362\u53d6BAT-\u4e00\u79cd\u4ef7\u503c\u7c7b\u4f3c\u4e8e\u52a0\u5bc6\u8d27\u5e01\u4f46\u4e0d\u540c\u7684\u5b9e\u7528\u4ee4\u724c\u3002\u6700\u8fd1\uff0c\u6211\u6536\u5230\u4e86\u4e00\u5219\u540d\u4e3aVidLeap\u7684\u7f51\u7ad9\u7684\u5e7f\u544a\uff0c\u4e0a\u9762\u6709\u4e00\u4e9b\u76f8\u5f53\u79bb\u8c31\u7684\u8bf4\u6cd5\u3002\u8fd9\u662f\u4e00\u4e2a\u7531\u6587\u68ee\u7279\u00b7\u5e03\u91cc\u4e9a\u6258\u5229(Vincent Briatore)\u9886\u5bfc\u7684\u6559\u5b66\u8bfe\u7a0b\uff0c\u4ed6\u58f0\u79f0\u4ed6\u53ef\u4ee5\u5f15\u5bfc\u4f60\u5efa\u7acb\u4e00\u4e2aYouTube\u9891\u9053\u548c\u54c1\u724c\uff0c\u5728\u77ed\u77ed4\u5468\u5185\u5c31\u80fd\u4e3a\u4f60\u8d62\u5f97\u591a\u8fbe100\u4e07\u7c89\u4e1d\u30011\u4ebf\u70b9\u51fb\u91cf\u548c\u6bcf\u670810\u4e07\u7f8e\u5143\u7684\u6536\u5165\u3002\n\u6211\u7684\u5174\u8da3\u81ea\u7136\u88ab\u6fc0\u8d77\u4e86\u3002\u8fd9\u4e0d\u662f\u56e0\u4e3a\u6211\u662f\u4e2a\u50bb\u74dc\uff0c\u5c3d\u7ba1\u6211\u5bb9\u6613\u53d7\u5230\u597d\u5e7f\u544a\u7684\u5f71\u54cd(\u6211\u731c\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u6211\u6210\u4e3a\u4e00\u4e2a\u50bb\u74dc)\uff0c\u800c\u662f\u56e0\u4e3a\u6211\u77e5\u9053\u6709\u7cfb\u7edf\u7684\u65b9\u6cd5\u53ef\u4ee5\u4ece\u4e92\u8054\u7f51\u4e0a\u7684\u5185\u5bb9\u4e2d\u83b7\u5f97\u826f\u597d\u7684\u56de\u62a5\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e9b\u58f0\u660e\u6bd4\u6211\u8ba4\u4e3a\u4f60\u901a\u5e38\u4f1a\u4ece\u4e00\u4e2a\u58f0\u8a89\u826f\u597d\u7684\u7f51\u7ad9\u4e0a\u770b\u5230\u7684\u8981\u9ad8\u5f97\u591a\uff0c\u8fd9\u4e9b\u7f51\u7ad9\u6559\u5bfc\u4eba\u4eec\u8fd9\u4e00\u70b9\u3002\u6240\u4ee5\uff0c\u6211\u70b9\u51fb\u4e86\u3002\n\u4e4d\u4e00\u770b\uff0c\u5bf9VidLeap\u7684\u968f\u673a\u8c03\u67e5\u4f3c\u4e4e\u662f\u5927\u591a\u6570\u666e\u901a\u7f51\u7ad9\u8bd5\u56fe\u5feb\u901f\u9500\u552e\u3002\u867d\u7136\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\uff0c\u4f46\u5b83\u4eec\u90fd\u6709\u76f8\u4f3c\u7684\u611f\u89c9\u3002\u4e00\u4e2a\u5bb9\u6613\u8f93\u5165\u4fe1\u606f\u548c\u8d2d\u4e70\u7684\u5730\u65b9\uff0c\u8bb8\u591a\u5d07\u9ad8\u7684\u4ee3\u8a00\uff0c\u4ee5\u53ca\u7b80\u5355\u660e\u4e86\u7684\u5e03\u5c40\uff0c\u544a\u8bc9\u4f60\u9700\u8981\u8fd9\u9879\u670d\u52a1\u6216\u4ea7\u54c1\u7684\u6bcf\u4e00\u4e2a\u539f\u56e0\u3002\n\u8fd9\u4e2a\u7f51\u7ad9\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u8bf4\u660e\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e9b\u6807\u8bc6\uff0c\u4f46\u5728\u6b63\u524d\u65b9\u6709\u4e00\u4e2a\u6807\u8bc6\u6a2a\u5e45\uff0c\u4e0a\u9762\u6709\u50cfInc.\u8fd9\u6837\u7684\u6d41\u884c\u54c1\u724c\u7684\u6807\u8bc6\u3002500\u3001\u201c\u4f01\u4e1a\u5bb6\u201d\u548c\u201c\u798f\u5e03\u65af\u201d\u3002\u8fd9\u53ef\u80fd\u4f1a\u4ee4\u4eba\u9707\u60ca\uff0c\u4f46\u5f7b\u5e95\u641c\u7d22\u6240\u6709\u8fd9\u4e9b\u7ec4\u7ec7\u548c\u201cVidLeap\u201d\u90fd\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002\u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u9762\u7ea2\u65d7\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\u53ef\u80fd\u5df2\u7ecf\u6709\u5f88\u591a\u4e86\uff0c\u4f46\u6211\u8fd8\u662f\u628a\u5b83\u79f0\u4e3a\u7b2c\u4e00\u4e2a\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4eba\u6c14YouTuber\u201c\u91ce\u517d\u5148\u751f\u201d\u7684\u4ee3\u8a00\u3002\u5982\u679c\u8fd9\u786e\u5b9e\u662f\u771f\u7684\uff0c\u8fd9\u4e2a\u7279\u522b\u7684\u80cc\u4e66\u5c06\u662f\u76f8\u5f53\u9ad8\u7684\u8d5e\u8a89\u3002\nVidLeap\u57df\u540d\u672c\u8eab\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u53e4\u8001\u7684\uff0c\u4f46\u5386\u53f2\u8bb0\u5f55\u663e\u793a\uff0c\u5b83\u5df2\u7ecf\u6613\u624b\u8fc7\u51e0\u6b21\uff0c\u4f3c\u4e4e\u76f4\u52303\u6708\u4efd\u624d\u8fdb\u5165\u76ee\u524d\u7684\u6240\u6709\u8005\u624b\u4e2d\uff0c\u7136\u540e\u88ab\u629b\u5728\u4e86Cloudflare\u4e4b\u540e\u3002\u8be5\u7ec4\u7ec7\u4f3c\u4e4e\u8fd8\u6709\u4e00\u4e2aYouTube\u9891\u9053\uff0c\u67093\u4e2a\u89c6\u9891\uff0c\u521b\u5efa\u65e5\u671f\u4e3a2020\u5e744\u670817\u65e5\u3002\u4ed6\u4eec\u8fd8\u6709\u4e00\u4e2aFacebook\u9875\u9762\uff0c\u5439\u636714,000+\u4e2a\u8d5e\u548c15,000+\u4e2a\u8ffd\u968f\u8005\u3002\u4f46\u7a0d\u540e\u4f1a\u6709\u66f4\u591a\u540e\u7eed\u62a5\u9053\u3002\u6700\u540e\uff0c\u4ed6\u4eec\u8fd8\u6709\u4e00\u4e2aTwitter\u8d26\u6237\uff0c\u62e5\u67094000\u591a\u540d\u7c89\u4e1d\uff0c\u8fd9\u4e00\u8d26\u6237\u4e00\u76f4\u521b\u5efa\u4e8e2017\u5e744\u6708\u3002\n\u90a3\u4e48\uff0c\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u4e48\u4f1f\u5927\u7684\u3001\u6539\u53d8\u751f\u6d3b\u7684\u5185\u5bb9\u7684\u6210\u672c\u662f\u591a\u5c11\uff1f\u55ef\uff0c\u8fd9\u4e2a\u8bfe\u7a0b\u4f1a\u8ba9\u4f60\u82b1\u6389999\u7f8e\u5143\u3002\u7136\u800c\uff0c\u6587\u68ee\u7279\u7684\u4ec1\u6148\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u516d\u6298\u7684\u5bc6\u7801\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u9700\u82b1\u6389399\u7f8e\u5143\u5c31\u53ef\u4ee5\u5b66\u4e60\u8fd9\u4e2a\u8ba9\u6211\u4eec\u81f4\u5bcc\u7684\u9ed1\u6697\u4e92\u8054\u7f51\u9b54\u672f\u3002\u8c22\u8c22\u6587\u68ee\u7279\uff01\u4f46\u662f\uff0c399\u7f8e\u5143\u5b9e\u9645\u4e0a\u7ed9\u6211\u4eec\u5728VidLeap\u4e0a\u5e26\u6765\u4e86\u4ec0\u4e48\u5462\uff1f\u522b\u7740\u6025\uff0c\u56e0\u4e3a\u4e3a\u4e86\u5192\u9669\uff0c\u6211\u628a\u5b83\u8bb0\u5728\u6211\u7684\u4fe1\u7528\u5361\u4e0a\u4e86\u3002\u6240\u4ee5\u4f60\u5f88\u5feb\u5c31\u4f1a\u542c\u5230\u8fd9\u4e00\u5207\u3002\u4e0e\u968f\u4e4b\u800c\u6765\u7684\u5feb\u4e50\u76f8\u6bd4\uff0c400\u7f8e\u5143\u7b97\u4ec0\u4e48\u5462\uff1f\n\u6587\u68ee\u7279\u4f3c\u4e4e\u5df2\u7ecf\u767b\u4e0a\u4e86\u52a0\u5bc6\u8d27\u5e01\u7684\u821e\u53f0\u3002\u7531\u4e8e\u4e8b\u6001\u7684\u53d1\u5c55\uff0c\u6211\u5c06\u5728\u7a0d\u540e\u7684\u5e16\u5b50\u4e2d\u89e3\u91ca\uff0c\u5f88\u96be\u8bf4\u54ea\u4e9b\u4fe1\u606f\u662f\u53ef\u9760\u7684\uff0c\u54ea\u4e9b\u662f\u4e0d\u53ef\u9760\u7684\uff0c\u4f46\u603b\u4f53\u60c5\u51b5\u4f3c\u4e4e\u662f\uff0c\u4ed6\u662f\u4e00\u540d\u610f\u5927\u5229\u79fb\u6c11\uff0c17\u5c81\u65f6\u4e0e\u5bb6\u4eba\u4e00\u8d77\u642c\u5230\u4e86\u8fd9\u91cc\u3002\u4ed6\u5728\u52a0\u5bc6\u8d27\u5e01\u4fbf\u5b9c\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u52a0\u5bc6\u8d27\u5e01\u7206\u70b8\u65f6\u8d5a\u4e86\u94b1\u3002\u6211\u5bf9\u4ed6\u5b9e\u9645\u4e0a\u6709\u591a\u5c11\u52a0\u5bc6\u8d27\u5e01\u7684\u94b1\u6301\u5bf9\u534a\u6001\u5ea6\uff0c\u4f46\u6211\u5e76\u4e0d\u592a\u62c5\u5fc3\uff0c\u56e0\u4e3a\u5982\u679c\u6709\u4eba\u5728\u65e9\u671f\u4e70\u5165\u4efb\u4f55\u6570\u91cf\u7684\u786c\u5e01\uff0c\u5c31\u80fd\u8d5a\u5927\u94b1\uff0c\u8fd9\u5e76\u4e0d\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u3002\n\u6587\u68ee\u7279\u4f3c\u4e4e\u6709\u4e00\u4e2a\u534a\u6210\u529f\u7684YouTube\u9891\u9053\u3002\u4ed6\u62e5\u67093.8\u4e07\u591a\u540d\u8ba2\u6237\uff0c\u4ec5\u5728\u8fd9\u4e2a\u9891\u9053\u4e0a\u5c31\u7d2f\u8ba1\u670950\u4e07\u70b9\u51fb\u91cf\uff0c\u5c3d\u7ba1\u4ed6\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u5e73\u53f0\u548cYouTube\u9891\u9053\uff0c\u4ed6\u4e5f\u5728\u8fd9\u4e9b\u5e73\u53f0\u548cYouTube\u9891\u9053\u4e0a\u4ea7\u751f\u70b9\u51fb\u91cf\u3002\u8be5\u9891\u9053\u81ea2015\u5e7412\u6708\u6210\u7acb\u4ee5\u6765\uff0c\u5728\u63cf\u8ff0\u4e2d\u58f0\u79f0\u4ed6\u901a\u8fc7\u6295\u8d44\u548c\u4ea4\u6613\u52a0\u5bc6\u8d27\u5e01\u8d5a\u4e86\u8d85\u8fc71200\u4e07\u7f8e\u5143\u3002\u5b83\u8fd8\u5217\u51fa\u4e86vincentbriatore.net\u7136\u800c\u2026\u7684\u4e2a\u4eba\u7f51\u7ad9\u3002\n\u4f3c\u4e4e\u4ed6\u5728\u7f51\u7ad9\u4e0a\u7684\u6240\u4f5c\u6240\u4e3a\u8ba9\u4ed6\u88ab\u505c\u804c\u4e86\u3002\u73b0\u5728\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e3b\u673a\u5e76\u4e0d\u53ea\u662f\u6682\u505c\u5176\u7528\u6237\u3002\u8fd9\u4e0d\u662f\u4ed6\u5173\u95ed\u6216\u79fb\u52a8\u7f51\u7ad9\u6216\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\u3002\u8fd9\u662f\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u5bf9\u4ed6\u91c7\u53d6\u7684\u60e9\u7f5a\u6027\u884c\u52a8\u3002\u7684\u786e\u662f\u5371\u9669\u4fe1\u53f7\uff01\u4e3a\u4ec0\u4e48\u662f\u6587\u5c3c\uff1f\u4f60\u5e72\u4ec0\u4e48\u4e86\uff1f!\u3002\n\u5982\u679c\u4f60\u641c\u7d22\u4ed6\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u540d\u5b57\u975e\u5e38\u72ec\u7279\uff0c\u4f60\u5f97\u5230\u7684\u7ed3\u679c\u5927\u591a\u662f\u4ed6\u7684\u3002\u4ed6\u6709\u4e00\u4e2a2012\u5e74\u521b\u5efa\u7684\u62e5\u67091.8\u4e07\u591a\u7c89\u4e1d\u7684Twitter\u8d26\u6237\uff0c\u4e00\u4e2a\u62e5\u6709\u8d85\u8fc720.5\u4e07\u4e2a\u8d5e\u7684Facebook\u9875\u9762\uff0c\u4e00\u4e2a\u4e2a\u4ebaFacebook\u8d26\u6237\u548c\u4e00\u4e2a\u62e5\u67097000\u591a\u7c89\u4e1d\u7684Instagram\u8d26\u6237\u3002\n\u6b64\u5916\uff0c\u6211\u731c\u4ed6\u8fd8\u6709\u4e00\u4e2aIMDB\u6f14\u5458\u9875\u9762\u3002\u8fd9\u5bb6\u4f19\u662f\u4e2a\u771f\u6b63\u7684\u660e\u661f\u3002\u5728\u8c37\u6b4c\u7684\u7b2c\u4e8c\u9875\uff0c\u751a\u81f3\u6709\u4e00\u7bc7\u4ecb\u7ecd\u4ed6\u62e5\u67091500\u4e07\u7f8e\u5143\u51c0\u8d44\u4ea7\u7684\u4e2d\u578b\u6587\u7ae0\uff0c\u4f5c\u8005\u662f\u4e9a\u5f53\u00b7\u97e6\u65af\u7279(Adam West)\u3002\u4e0d\u662f\u90a3\u4e2a\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u3002\u4f46\u522b\u5fd8\u4e86\u8fd9\u5bb6\u4f19\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u53bb\u68c0\u67e5\u4ed6\u5427\u3002\n\u5f53\u4f60\u4eec\u60f3\u5230\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u65f6\uff0c\u4f60\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u53ef\u80fd\u4f1a\u60f3\u5230\u8759\u8760\u4fa0\uff0c\u4f46\u6211\u89c9\u5f97\u6709\u4e49\u52a1\u63d0\u5230\uff0c\u73b0\u5728\u6211\u542c\u5230\u8fd9\u4e2a\u540d\u5b57\u65f6\uff0c\u542c\u5230\u7684\u53ea\u662f\u6765\u81ea\u201c\u5bb6\u5ead\u7537\u4eba\u201d(Family Guy)\u7684\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u5e02\u957f\u7684\u58f0\u97f3\u3002\u6211\u79bb\u9898\u4e86\u3002\u90a3\u4ed6\u662f\u8c01\uff1f\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u4f3c\u4e4e\u662f\u4e2a\u535a\u5ba2\u5199\u624b\uff0c\u4ed6\u603b\u5171\u5199\u4e866\u7bc7\u5173\u4e8e\u5a92\u4f53\u7684\u6587\u7ae0\u3002\u5176\u4e2d\u4e09\u4e2a\u662f\u5173\u4e8e\u52a0\u5bc6\u8d27\u5e01\u7684\uff0c\u4e24\u4e2a\u662f\u5173\u4e8e\u6587\u68ee\u7279\u7684\uff0c\u4e00\u4e2a\u662f\u5173\u4e8e\u6258\u5c3c\u00b7\u7f57\u5bbe\u65af\u7684\u3002\u591a\u4e48\u4e30\u5bcc\u7684\u5c40\u90e8\u7f8e\u611f\u554a\u3002\u4e9a\u5f53\u4e5f\u6709\u4e00\u4e2aFacebook\u4e2a\u4eba\u8d44\u6599\u3002\u6211\u4eec\u600e\u4e48\u80fd\u786e\u5b9a\u8fd9\u662f\u540c\u4e00\u4e2a\u4eba\uff1f\u55ef\uff0c\u8fd8\u6709\u5176\u4ed6\u539f\u56e0\u6211\u7a0d\u540e\u518d\u8c08\uff0c\u4f46\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4ed6\u4e4b\u524d\u7684\u5934\u50cf\u548c\u4ed6\u7684\u4e2d\u7b49\u5934\u50cf\u4e0a\u4f7f\u7528\u7684\u5361\u901a\u56fe\u50cf\u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u4f1a\u5728\u8fd9\u91cc\u4e3a\u4e9a\u5f53\u6309\u4e0b\u505c\u987f\uff0c\u4f46\u4ed6\u7684\u6545\u4e8b\u8fd8\u6ca1\u6709\u7ed3\u675f\u3002\nTrustPilot\u662f\u4e00\u4e2a\u8bc4\u8bba\u7f51\u7ad9\uff0c\u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u731c\u5230\uff0c\u4eba\u4eec\u53ef\u4ee5\u8bc4\u8bba\u670d\u52a1\u3002\u78b0\u5de7\u7684\u662f\uff0c\u5c3d\u7ba1VidLeap\u53ea\u5728\u4e00\u4e2a\u6708\u524d\u624d\u8bde\u751f\uff0c\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u51fa\u8272\u7684\u8bc4\u8bba\u3002\u6b64\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u9875\u9762\u5b9e\u9645\u4e0a\u662f\u58f0\u660e\u7684\uff0c\u6240\u4ee5VidLeap\u4e0d\u4ec5\u77e5\u9053\u5b83\uff0c\u800c\u4e14\u53ef\u4ee5\u7ba1\u7406\u5b83\u5e76\u5bf9\u8bc4\u8bba\u505a\u51fa\u56de\u5e94\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u6ca1\u6709\u76f4\u63a5\u7684\u63a7\u5236\u6743\u3002\u4ed6\u4eec\u4e0d\u80fd\u5220\u9664\u8d1f\u9762\u8bc4\u8bba\u3002\u8fd9\u6837\u770b\u6765\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6709\u4e86\u4e94\u4f4d\u6ee1\u610f\u7684\u987e\u5ba2\u3002\n\u8bc8\u9a97\u80fd\u591f\u8fc5\u901f\u8d62\u5f97\u58f0\u8a89\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u5728\u4ed6\u4eec\u7684\u9875\u9762\u548c\u5176\u4ed6\u7f51\u7ad9(\u5982TrustPilot)\u4e0a\u79ef\u7d2f\u6b63\u9762\u8bc4\u8bba\u3002\u56e0\u4e3a\u4ed6\u4eec\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u4ed6\u4eec\u9f13\u52b1\u4eba\u4eec\u7559\u4e0b\u8bc4\u8bba\u662f\u5f88\u91cd\u8981\u7684\u3002\u5c24\u5176\u662f\u5f53\u6211\u4eec\u8c08\u5230400\u7f8e\u5143\u7684\u4e70\u5165\u65f6\u3002\u6216\u8005\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u83b7\u5f97\u5ba1\u67e5\u3002\n\u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\u4e00\u4e9b\u8bc4\u8bba\u3002\u8bf7\u6ce8\u610f\uff0c\u5b83\u4eec\u90fd\u53d1\u751f\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u8303\u56f4\u5185\uff0c\u800c\u4e14\u4e5f\u975e\u5e38\u63a5\u8fd1\u8fd9\u5bb6\u4f01\u4e1a\u6700\u521d\u7684\u521b\u5efa\u3002\u5176\u4e2d\u4e24\u4e2a\u4e5f\u8bf4\u4e86\u76f8\u540c\u7684\u4e8b\u60c5\uff0c\u4e3a\u4e86\u6d88\u9664\u4efb\u4f55\u5173\u4e8e\u5b83\u4eec\u662f\u5047\u7684\u6000\u7591\uff0c\u6211\u4eec\u53ef\u4ee5\u53c2\u8003\u4ed6\u4eec\u5728\u63aa\u8f9e\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u975e\u6807\u51c6\u5927\u5199\u5b57\u6bcd\u3002\u7528\u4e0d\u4e86\u591a\u4e45\u5c31\u4f1a\u6ce8\u610f\u5230\u8fd9\u91cc\u6709\u4e9b\u4e1c\u897f\u4e0d\u592a\u5bf9\u52b2\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6709\u4e86\u8fd9\u4e9b\u8ff9\u8c61\u3002\u4e0d\u8fc7\uff0c\u8ba9\u6211\u4eec\u59d1\u4e14\u4e0d\u4fe1\uff0c\u518d\u6df1\u5165\u68c0\u67e5\u4e00\u5c42\u3002\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5185\uff0c\u6240\u6709\u7684\u8d26\u6237\u90fd\u7559\u4e0b\u4e86\u770b\u4f3c\u968f\u673a\u7684\u8bc4\u8bba\uff0c\u5176\u4e2d\u4e00\u4e9b\u8bc4\u8bba\u662f\u5173\u4e8e\u76f8\u540c\u7684\u4ea7\u54c1\uff0c\u5c3d\u7ba1\u63aa\u8f9e\u4e0d\u540c\u3002\u6700\u540e\uff0c\u5feb\u901f\u53cd\u5411\u56fe\u50cf\u641c\u7d22\u5c06\u63ed\u7a7f\u5e3d\u5b50\uff0c\u5e76\u8bf4\u660e\u8fd9\u4e9b\u7edd\u5bf9\u4e0d\u662f\u771f\u4eba\uff1a\n\u73b0\u5728\uff0cVidLeap\u7684Facebook\u9875\u9762\u8ba9\u6211\u4eec\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u4e86\u201c\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u201d4\u6708\u4efd\u624d\u63a8\u51fa\u7684\u4e00\u95e8\u65b0\u8bfe\u7a0b\u5728Facebook\u4e0a\u83b7\u5f97\u4e86\u8d85\u8fc71.4\u4e07\u4e2a\u8d5e\u3002\u8fd9\u771f\u662f\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u6709\u4eba\u4f1a\u4e89\u8fa9\u8bf4\uff0c\u5b83\u751a\u81f3\u5f3a\u5316\u4e86\u8bfe\u7a0b\u672c\u8eab\u7684\u4e3b\u5f20\u3002\u53ea\u662f\u5e76\u4e0d\u662f\u6240\u6709\u7684\u4e8b\u60c5\u90fd\u50cf\u8fd9\u91cc\u770b\u8d77\u6765\u7684\u90a3\u6837\u3002\nFacebook\u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u9875\u9762\u5de5\u5177\uff0c\u53eb\u505a\u201c\u900f\u660e\u5de5\u5177\u201d\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u6d1e\u5bdf\u9875\u9762\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u6240\u505a\u7684\u6539\u53d8\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\uff0c\u8fd9\u4e2a\u9875\u9762\u5b9e\u9645\u4e0a\u5df2\u67099\u5e74\u7684\u5386\u53f2\uff0c\u5e76\u4e14\u6709\u8fc7\u51e0\u6b21\u540d\u79f0\u66f4\u6539\u3002Alciant\u4f3c\u4e4e\u662f\u67d0\u79cd\u8fdb\u6b65\u7684\u65b0\u95fb\u7f51\u7ad9\u6216\u7c7b\u4f3c\u7684\u7f51\u7ad9\u3002\u76f4\u52304\u6708\u4efd\uff0c\u5b83\u624d\u88ab\u66f4\u6539\u4e3aVidLeap\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u9875\u9762\u5982\u6b64\u53d7\u6b22\u8fce\u7684\u771f\u6b63\u539f\u56e0\uff0c\u5b83\u5df2\u7ecf\u5728\u4e0d\u540c\u7684\u7528\u9014\u4e0b\u805a\u96c6\u4e869\u5e74\u7684\u89c2\u4f17\u3002\u73b0\u5728\u5982\u679c\u6ca1\u6709\u900f\u660e\u5de5\u5177\uff0c\u8fd9\u4e0d\u4f1a\u5f88\u96be\u53d1\u73b0\uff0c\u56e0\u4e3aAlciant\u6240\u6709\u53ef\u4ee5\u8ffd\u6eaf\u52302011\u5e74\u7684\u65e7\u5e16\u5b50\u4ecd\u7136\u5b58\u5728\uff0c\u800c\u4e14\u6709\u5f88\u591a5\u661f\u9875\u9762\u7684\u8bc4\u8bba\u53ef\u4ee5\u8ffd\u6eaf\u52302013\u5e74\u3002\u7136\u800c\uff0c\u8fd9\u5f53\u7136\u6709\u52a9\u4e8e\u66f4\u6e05\u6670\u5730\u4e86\u89e3\u60c5\u51b5\u3002\n\u5982\u679c\u6211\u4eec\u6d4f\u89c8\u8bc4\u8bba\u5e76\u6309\u201c\u6700\u8fd1\u201d\u6392\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u4e0eVidLeap\u76f4\u63a5\u76f8\u5173\u7684\u65b0\u8bc4\u8bba\u5df2\u7ecf\u51fa\u73b0\u5728\u9875\u9762\u4e0a\u3002\n\u7b49\u4e00\u4e0b\u3002\u8fd9\u7bc7\u8bc4\u8bba\u4f3c\u4e4e\u975e\u5e38\u719f\u6089\u3002\u6ca1\u9519!\u3002\u5982\u679c\u6211\u4eec\u770b\u4e0a\u9762\u7684TrustPilot\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u540c\u6837\u7684\u8bc4\u8bba\u3002\u9664\u4e86\u2026\u3002\u770b\u8d77\u6765\u201cAlexandra Inha\u201d\u4f3c\u4e4e\u5df2\u7ecf\u7528\u4e0d\u540c\u7684\u540d\u5b57\u548c\u7167\u7247\u53d8\u6210\u4e86\u5979\u7684\u53e6\u4e00\u4e2a\u81ea\u6211\u201cSumiya Anika\u201d\u3002\u8fd9\u662f\u4e00\u79cd\u4f2a\u88c5\u3002\u4e5f\u8bb8\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u548c\u8759\u8760\u4fa0\u771f\u7684\u9002\u5408\u8fd9\u6b21\u8c03\u67e5\u3002\u4f46\u662f\u7b49\u4e00\u4e0b\u7b2c\u4e8c\u4e2a\u2026\u3002\u795e\u5723\u7684\u5de7\u5408\u8759\u8760\u4fa0\uff01\n\u5982\u679c\u4e0d\u662f\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u4eb2\u81ea\u5728\u8fd9\u91cc\u8bc4\u8bbaVidLeap\u7684\u8bdd\u3002\u6839\u636e\u5ba1\u67e5\u7684\u65e5\u671f\uff0c\u4ed6\u4e0d\u77e5\u4f55\u6545\u6210\u529f\u5730\u5403\u5149\u4e86\u6574\u4e2a\u56db\u5468\u7684\u8bfe\u7a0b\uff0c\u4ece\u8bfe\u7a0b\u51fa\u73b0\u7684\u51e0\u5929\u8d77\uff0c\u4ed6\u5c31\u5f00\u59cb\u6bcf\u6708\u4ea7\u751f3000\u7f8e\u5143\u7684\u6536\u5165\u3002\u4ed6\u663e\u7136\u662f\u4e00\u540d\u5b66\u751f\uff0c\u56e0\u4e3a\u9875\u9762\u56de\u590d\u63d0\u5230\uff0c\u4ed6\u4eec\u5df2\u7ecf\u5b89\u6392\u4e86\u4ed6\u4e0e\u6587\u68ee\u7279\u4e00\u5bf9\u4e00\u7684\u4f1a\u9762\uff0c\u8fd9\u662f\u7f8e\u56fd\u7cbe\u82f1\u652f\u4ed8\u7684\u4eab\u6709\u76db\u8a89\u7684\u8d39\u7528\u7684\u4e00\u90e8\u5206\u3002\n\u4e0a\u9762\u7684GIF\u662f\u5bf9\u5373\u5c06\u88ab\u63ed\u5f00\u7684\u4e00\u4e2a\u63d0\u793a\uff0c\u4f46\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u8bf7\u7cfb\u597d\u4f60\u7684\u5b89\u5168\u5e26\u3002\u56de\u5230\u4e2d\u53f7\uff01\u6211\u66fe\u63d0\u5230\u4e9a\u5f53\u5df2\u7ecf\u5199\u4e86\u516d\u7bc7\u5e16\u5b50\uff0c\u4f46\u6211\u544a\u8bc9\u8fc7\u4f60\uff0c\u4ed6\u7684\u6545\u4e8b\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u770b\u770b\u4e0b\u4e00\u6b65\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u7ecf\u8fdb\u4e00\u6b65\u8c03\u67e5\uff0c\u6240\u6709\u516d\u4e2a\u5e16\u5b50\u5b9e\u9645\u4e0a\u90fd\u662f\u5173\u4e8e\u6587\u68ee\u7279\u6216\u63a8\u8350\u4eba\u6587\u68ee\u7279\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u6709\u4e2a\u7c89\u4e1d\uff0c\u4f60\u4eec\u90fd\u6765\u4e86\u3002\u5982\u679c\u6709\u4efb\u4f55\u5e16\u5b50\u6ca1\u6709\u76f4\u63a5\u63d0\u5230\u4ed6\uff0c\u5b83\u4eec\u81f3\u5c11\u4f1a\u5305\u62ec\u4ed6\u5728YouTube\u4e0a\u7684\u4e00\u4e2a\u89c6\u9891\uff0c\u8fd9\u4e9b\u89c6\u9891\u6765\u81ea\u4ed6\u7684\u4e3b\u9891\u9053\u3002\u4ed6\u751a\u81f3\u5199\u4e86\u4e00\u7bc7\u6a21\u7cca\u7684\u6587\u7ae0\uff0c\u4ecb\u7ecd\u4e86\u6587\u68ee\u7279\u7684\u60c5\u51b5\uff0c\u5e76\u968f\u673a\u63d0\u4f9b\u4e86\u4ed6\u7684\u5e74\u9f84\u548c\u8eab\u9ad8\u7b49\u4fe1\u606f\u3002\u6240\u6709\u7684\u6587\u7ae0\u90fd\u7528\u7b2c\u4e09\u4eba\u79f0\u8c08\u8bba\u6587\u68ee\u7279\uff0c\u597d\u50cf\u4ed6\u4eec\u662f\u4e00\u4e2a\u91c7\u8bbf\u8005\u3002\u9664\u4e86\u4e24\u4e2a\u3002\u5728\u5176\u4e2d\u4e24\u7bc7\u6587\u7ae0\u4e2d\uff0c\u97e6\u65af\u7279\u7684\u5199\u4f5c\u57fa\u8c03\u6539\u6210\u4e86\u7b2c\u4e00\u4eba\u79f0\uff1a\n\u4f60\u7edd\u5bf9\u731c\u4e0d\u5230\u90a3\u662f\u8c01\u7684YouTube\u9891\u9053\u3002\u6ca1\u9519\uff0c\u4e0d\u662f\u522b\u4eba\uff0c\u6b63\u662f\u6587\u68ee\u7279\u00b7\u5e03\u91cc\u4e9a\u6258\u5229\u672c\u4eba\u3002\u8003\u8651\u5230\u5728\u8ba8\u8bba\u6587\u68ee\u7279\u8d22\u5bcc\u7684\u5176\u4ed6\u6587\u7ae0\u4e2d\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u611a\u8822\u7684\u758f\u5ffd\uff0c\u4ed6\u8bf4\u8fc7\u8fd9\u6837\u7684\u8bdd\uff1a\u201c\u5f53\u6211\u521a\u5f00\u59cb\u5173\u6ce8\u6587\u68ee\u7279\u65f6\uff0c\u4ed6\u6bcf\u5929\u90fd\u4f1a\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u53d1\u5e03\u4ed6\u7684\u2018\u65e5\u4ea4\u6613\u2019\u6295\u8d44\u7ec4\u5408\u7684\u7167\u7247\u3002\u201d\n\u4e5f\u8bb8\u8fd9\u53ea\u662f\u4e2a\u4fa5\u5e78\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8bb8\u591a\u5371\u9669\u4fe1\u53f7\u771f\u7684\u628a\u6240\u6709\u7684\u4fe1\u4efb\u90fd\u6254\u8fdb\u4e86\u5730\u4e0b\uff0c\u4f46\u563f\uff0c\u4e5f\u8bb8\u4ed6\u53ea\u662f\u8ba9\u6587\u68ee\u7279\u5728\u4ed6\u7684\u535a\u5ba2\u4e0a\u5199\u4e86\u4e24\u7bc7\u5e16\u5b50\uff0c\u5374\u5fd8\u4e86\u660e\u786e\u8bf4\u660e\u4ed6\u9080\u8bf7\u4e86\u4ed6\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u8fd9\u53ea\u662f\u4e00\u4e2a\u4fa5\u5e78\uff0c\u80af\u5b9a\u4e0d\u4f1a\u6709\u5176\u4ed6\u8ff9\u8c61\u8868\u660e\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u5b9e\u9645\u4e0a\u662f\u96be\u4ee5\u6349\u6478\u7684\u6587\u68ee\u7279\u00b7\u5e03\u91cc\u4e9a\u6258\u5229\u7684\u53e6\u4e00\u4e2a\u81ea\u6211\u3002\u7136\u800c\uff0c\u66f4\u591a\u7684\u7ec6\u8282\u4f7f\u5f97\u4fa5\u5e78\u53d1\u751f\u7684\u53ef\u80fd\u6027\u964d\u4f4e\u4e86\u4e00\u70b9\u3002\u8ba9\u6211\u4eec\u7528\u55b7\u6c14\u5f0f\u98de\u673a\u56de\u5230\u4e9a\u5f53\u7684Facebook\u3002\u8fd8\u6709\u4ec0\u4e48\u8981\u6ce8\u610f\u7684\u5417\uff1f\u4e9a\u5f53\u7684\u4fa7\u5199\u76f8\u5f53\u5149\u79c3\u79c3\u7684\u3002\u4ed6\u6709\u4e94\u4e2a\u201c\u8d5e\u201d\u3002\u5176\u4e2d\u4e09\u4e2a(\u4f60\u4eec\u8fd9\u4e9b\u6570\u5b66\u4e66\u5446\u5b50\u536060%)\u5c5e\u4e8e\u6587\u68ee\u7279\u3002\u4e00\u4e2a\u662fVidLeap\uff0c\u4e00\u4e2a\u662f\u6587\u68ee\u7279\u7684\u70b9\u8d5e\u9875\u9762\uff0c\u53e6\u4e00\u4e2a\u662fEtherum Evenglist\uff0c\u4ed6\u5728YouTube\u9891\u9053\u7684Facebook\u9875\u9762\u3002\n\u6211\u4eec\u8fd8\u53d1\u73b0\u4e9a\u5f53\u4f4f\u5728\u4e39\u5fb7\u7c73\u592b\u6797\u7eb8\u4e1a\u516c\u53f8\u7684\u5927\u672c\u8425\uff1a\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u65af\u514b\u5170\u987f\u3002\u4e00\u4e2a\u5927\u7ea6\u67097.7\u4e07\u4eba\u53e3\u7684\u5c0f\u9547\u3002\u4e0d\u5c0f\uff0c\u4f46\u4e5f\u4e0d\u662f\u7279\u522b\u5927\u3002\n\u54e6\uff0c\u7ef4\u5c3c\uff0c\u4e0d\uff0c\u4f60\u5728\u505a\u4ec0\u4e48\uff1f\u6211\u4e0d\u662f\u706b\u7bad\u5916\u79d1\u533b\u751f\uff0c\u4f46\u8fd9\u5f88\u53ef\u7591\u3002\u6211\u60f3\u4e9a\u5f53\u53ef\u80fd\u5c31\u662f\u6587\u68ee\u7279\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6700\u4ee4\u4eba\u9707\u60ca\u7684\u662f\u4e0a\u9762\u7684Facebook\u8bc4\u8bba\uff0c\u4ed6\u53ea\u662f\u5728\u81ea\u8a00\u81ea\u8bed\u3002\u4f60\u4e3a\u4ec0\u4e48\u8981\u602a\u602a\u7684\uff0c\u4f19\u8ba1\uff1f\u6211\u4eec\u88ab\u9a97\u4e86\uff01\u55ef\uff0c\u4e0d\u662f\u6211\u4eec\uff0c\u5927\u90e8\u5206\u662f\u6211\uff0c\u56e0\u4e3a\u6211\u7ed9\u4e86\u8fd9\u4e2a\u5bb6\u4f19400\u7f8e\u5143\uff0c\u4f46\u4f60\u8fd8\u5728\u60f3\u8fd9\u4ef6\u4e8b\uff0c\u55ef\uff1f\n\u55ef\uff0c\u4f60\u505a\u5230\u4e86\uff0c\u4f60\u71ac\u8fc7\u4e86\u8fd9\u4e00\u5207\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u6b20\u4f60\u4e00\u4e2a\u89e3\u91ca\uff0c\u4e9a\u5f53\uff0c\u5443\uff0c\u6211\u662f\u8bf4\u6587\u68ee\u7279\u4e3a\u4e86\u6211\u7684\u94b1\u7ed9\u4e86\u6211\u4ec0\u4e48\u3002\u6211\u76f8\u4fe1\u4f60\u542c\u5230\u201c\u4e0d\u591a\u201d\u4f1a\u5f88\u60ca\u8bb6\u3002\u5b83\u5e2e\u6211\u62a5\u540d\u53c2\u52a0\u4e86\u4e00\u95e8\u4e0e\u4ed6\u7684\u8bfe\u7a0b\u914d\u5957\u7684\u53ef\u6388\u8bfe\u8bfe\u7a0b\u3002\u6211\u6536\u5230\u7684\u662f\u4e00\u8282\u4e24\u8282\u7684\u201c\u7b2c\u4e00\u5468\u201d\u8bfe\u3002\u7b2c\u4e00\u90e8\u5206\u5e94\u8be5\u662f\u67d0\u79cd\u9759\u6001\u8bb2\u4e49\uff0c\u6211\u5e94\u8be5\u590d\u4e60\u4e00\u4e0b\u3002\u5b83\u4e0d\u5728\u90a3\u91cc\uff0c\u6240\u4ee5\u6211\u5728\u7b2c\u4e00\u5468\u7684\u90e8\u5206\u65f6\u95f4\u91cc\u62ff\u5230\u4e86A(\u770b\uff0c\u5988\u5988\uff01)\u3002\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u662f\u4e00\u6bb510\u5206\u949f\u7684\u4ecb\u7ecd\u89c6\u9891\u548c\u4e00\u4e2a\u4e94\u4e2a\u95ee\u9898\u7684\u6d4b\u9a8c\uff0c\u6211\u6ca1\u6709\u901a\u8fc7\uff0c\u56e0\u4e3a\u4ed6\u5bf9\u6211\u6492\u4e86\u8c0e\u3002\u6211\u771f\u7684\u662f\u4e2a\u7b28\u86cb\u3002\n\u8fd9\u5c31\u662f\u62114\u5468\u8bfe\u7a0b\u7684\u5168\u90e8\u5185\u5bb9\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u89c6\u9891\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u6211\u53ef\u4ee5\u5e2e\u4f60\u3002\u6211\u76f4\u63a5\u628a\u5b83\u4ece\u7f51\u7ad9\u4e0a\u64a4\u4e0b\u6765\u4e86\uff0c\u56e0\u4e3a\u6211\u4ed8\u4e86400\u7f8e\u5143\uff0c\u8fd9\u662f\u6211\u5e94\u5f97\u7684\u3002\u6211\u60f3\u6211\u53ea\u662f\u60f3\u518d\u4e00\u6b21\u6709\u88ab\u5f53\u5730\u7535\u5f71\u9662\u62a2\u52ab\u7684\u611f\u89c9\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u4e0d\u80fd\u53bb\u770b\u7535\u5f71\u3002\u7136\u540e\u6211\u731b\u70c8\u62a8\u51fb\u5e76\u76d7\u7248\u4e86\u8fd9\u90e8\u7535\u5f71\uff0c\u56e0\u4e3a\u6211\u592a\u8ba8\u538c\u5b83\u4e86\uff0c\u60f3\u8981\u62a5\u590d\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230\u5b83\uff0c\u5c3d\u7ba1\u4f60\u4e0d\u4f1a\u56e0\u4e3a\u5b83\u800c\u53d8\u5f97\u66f4\u5bcc\u6709\u3002\u73b0\u5728\u6211\u4e0d\u77e5\u9053\u53ef\u6559\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4f46\u6211\u60f3\u5b83\u53ef\u4ee5\u88ab\u9501\u5b9a\uff0c\u6bcf\u5929\u90fd\u4f1a\u6709\u65b0\u7684\u5185\u5bb9\u4ea4\u4ed8\u7ed9\u6211\uff0c\u4f46\u6211\u4e0d\u76f8\u4fe1\u8fd9\u4e9b\u5185\u5bb9\u7684\u5b58\u5728\u3002\u6211\u8111\u5b50\u91cc\u6709\u8fd9\u4e2a\u7406\u8bba\u7684\u552f\u4e00\u539f\u56e0\u662f\u56e0\u4e3a\u90a3\u662f\u4ed6\u544a\u8bc9\u6211\u7684\u3002\u6ca1\u9519\uff0c\u6211\u4e5f\u5728\u63a8\u7279\u4e0a\u8ddf\u4ed6\u804a\u8fc7\u3002\n\u82b1\u4e86400\u7f8e\u5143\uff0c\u5199\u4e86\u8fd9\u4e48\u591a\uff0c\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u5728\u6ca1\u6709\u542c\u5230\u7b56\u5212\u8005\u672c\u4eba\u7684\u610f\u89c1\u7684\u60c5\u51b5\u4e0b\u7ed3\u675f\u8fd9\u4ef6\u4e8b\u3002\u6211\u6e29\u548c\u5730\u8be2\u95ee\u4e86\u4ed6\uff0c\u5e76\u7ed9\u4e86\u4ed6\u89e3\u91ca\u7684\u673a\u4f1a\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u6458\u5f55\uff1a\n\u6240\u4ee5\u73b0\u5728\u6211\u591a\u4e86400\u7f8e\u5143\u3002\u6216\u8005\u6211\u60f3\u6211\u5df2\u7ecf\u76c8\u4e8f\u5e73\u8861\u4e86\u56e0\u4e3a\u4ed6\u8fd8\u4e86\u6211\u7684\u94b1\u3002\u56e0\u4e3a\u8fd9\u7b14\u9000\u6b3e\uff0c\u6211\u5b9e\u9645\u4e0a\u4e0d\u518d\u6709\u6743\u8bbf\u95ee\u8fd9\u95e8\u8bfe\u7a0b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053\u5269\u4e0b\u7684\u5185\u5bb9\u662f\u5426\u5b58\u5728\uff0c\u6216\u8005\u6bd4\u65af\u7279\u5148\u751f\u662f\u5426\u901a\u8fc7Skype\u5411\u6211\u4eec\u8bb2\u8ff0\u4e86YouTube\u7684\u5947\u5999\u4e4b\u5904\u3002\u867d\u7136\u4ed6\u6ca1\u6709\u5c4f\u853d\u6211\uff0c\u4f46\u4ed6\u5df2\u7ecf\u4e0d\u518d\u56de\u590d\u6211\u4e86\u3002\n\u4e0d\u8981\u7ed9\u4e92\u8054\u7f51\u4e0a\u7684\u4eba\u8bb8\u8bfa\u81f4\u5bcc\u7684\u5927\u7b14\u94b1\u3002\u6211\u6536\u53d6\u4e86\u8fd9\u6b21\u8c03\u67e5\u7684\u8d39\u7528\uff0c\u56e0\u4e3a\u6211\u77e5\u9053\u5982\u679c\u4ed6\u4e0d\u8fd8\u7ed9\u6211\uff0c\u6211\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u5bf9\u4ed6\u6ca1\u6709\u63d0\u4f9b\u7684\u670d\u52a1\u63d0\u51fa\u5f02\u8bae\u3002\u5176\u4ed6\u4eba\u53ef\u80fd\u5c31\u6ca1\u6709\u90a3\u4e48\u5e78\u8fd0\u4e86\uff0c\u4f60\u53ef\u80fd\u4f1a\u88ab\u65e0\u53ef\u4f30\u91cf\u7684\u8d22\u5bcc\u7684\u627f\u8bfa\u8499\u853d\u4e86\u53cc\u773c\u3002\n\u4efb\u4f55\u8bfb\u5230\u8fd9\u7bc7\u6587\u7ae0\u7684\u4eba\uff0c\u8bf7\u4e0d\u8981\u8fd9\u6837\u505a\u3002\u8fd9\u4e0d\u662f\u6b3a\u9a97\u7684\u90e8\u5206\uff0c\u8fd9\u5e94\u8be5\u662f\u4e0d\u8a00\u800c\u55bb\u7684\uff0c\u800c\u662f\u901a\u8fc7\u865a\u5047\u7684\u8eab\u4efd\u548c\u8bc4\u8bba\u8fdb\u884c\u7684\u5351\u9119\u7684\u81ea\u6211\u63a8\u9500\u3002\u6211\u4eec\u90fd\u6709\u4e00\u4e9b\u5bf9\u4ed6\u4eba\u6709\u4ef7\u503c\u7684\u4e1c\u897f\u53ef\u4ee5\u5206\u4eab\u3002\u8ba9\u4f60\u7684\u5185\u5bb9\u4e0d\u8a00\u800c\u55bb\u3002\n\u8fdb\u4e00\u6b65\u8c03\u67e5\u663e\u793a\uff0c\u52a0\u5bc6\u8d27\u5e01\u754c\u4e5f\u6709\u5f88\u591a\u4eba\u5bf9\u5e03\u91cc\u4e9a\u6258\u5229\u7684\u8bc4\u4ef7\u4e5f\u4e0d\u592a\u9ad8\u3002\u6211\u628a\u5b83\u4eec\u5217\u5728\u4e0b\u9762\u3002\u5728\u5916\u9762\u6ce8\u610f\u5b89\u5168\uff01", "note_en": "Due to a large amount of screenshots with text, this blog is best read on a desktop as opposed to a phone. This post is also rather long so you may want to get settled in.\n   Many of you know that I use  Brave as my daily browser. One of the features I love is that I can elect to see pop up ads (infrequently) in exchange for  BAT\u2013 a utility token with some value similar to cryptocurrency yet distinct. Recently I was served up an ad for a site called  VidLeap with some pretty outrageous claims. It\u2019s a teaching course led by a man named Vincent Briatore that claims he can walk you through setting up a Youtube channel and brand that  may earn you up to 1 million followers, 100 million views, and $100k a month in revenue in only 4 weeks.\n   Naturally my interest was piqued. Not because I\u2019m a sucker, though I am susceptible to a good ad (I guess that might make me a sucker), but because I know there are systematic ways to get a good return on content on the internet. Although, these claims were much higher than what I think you\u2019d typically see from a reputable site teaching people this. So, I clicked.\n     A random survey of VidLeap at first glance seems like most general sites trying to make a quick sell. Though there\u2019s some variation, they all have a similar feel to them. An easy place to enter your information and buy, a lot of lofty endorsements, and a straightforward layout telling you every reason you need this service or product.\n This site doesn\u2019t actually say why these logos are there, but right up front there is a banner of logos with popular brands like: Inc. 500, Entrepreneur, and Forbes. Now this may come as a shocker, but a thorough search of all of those organizations and \u201cVidLeap\u201d doesn\u2019t return any results. Here\u2019s our first red flag. Well there\u2019s probably been many up through this point, but I\u2019m gonna call it the first. In addition, there\u2019s an endorsement from popular youtuber  \u201cMr.Beast\u201d. This specific endorsement would be pretty high praise if it\u2019s indeed real.\n   The VidLeap domain itself is actually pretty old but historical  whois records show that it\u2019s changed hands a few times and appears to have only come into it\u2019s current owners possession as of March and then put behind Cloudflare. The organization also appears to have a  Youtube Channel with 3 videos and a creation date of April 17th 2020. They also have a  Facebook page that touts 14,000+ likes and 15,000+ more followers. But more to follow on that later. Lastly, they also have a  Twitter account with over 4,000 followers that was created all the way back in April of 2017.\n So what is the cost, you may ask, of such great and life changing content? Well the course will set you back a whopping $999. However, the gracious goodness of Vincent has given us a code for 60% off meaning we are only out of $399 to learn this dark internet magic that will make us rich. Thanks Vincent! But what does the $399 actually get us on VidLeap? Don\u2019t fret, because for the sake of adventure I charged it to my credit card. So you\u2019ll hear all about it shortly. What\u2019s 400 bucks compared to the joy of what is to follow?\n     Vincent appears to have arrived on the cryptocurrency scene. Due to developments I\u2019ll explain later in this post, it\u2019s hard to tell which information is reliable and what isn\u2019t but the general story seems to be that he\u2019s an Italian immigrant who moved here with his family when he was 17 years old. He bought into cryptocurrency when it was cheap and made bank when it exploded. I\u2019m 50/50 on how much money he actually has in cryptocurrency but I am not too concerned as it\u2019s not unbelievable to think anybody could have made it big if they bought in on any number of coins early on.\n Vincent seems to have a semi-successful  Youtube channel. He maintains 38,000+ subscribers and a cumulative half a million views on this channel alone, though he has many other platforms and youtube channels where he is also generating views. The channel itself has been around since December 2015 and in the description claims he\u2019s made over 12 Million dollars by investing and trading cryptocurrency. It also lists a personal website of  vincentbriatore.net however\u2026\n   It appears that whatever he was doing on his site got him suspended. Now it\u2019s important to note here that hosts don\u2019t just suspend their users. This isn\u2019t something like he took the site down or moved it or anything else. This was a punitive action taken against him for some reason. Red flag indeed! Why Vinny? What did you do?!\n If you do a search for his name which is pretty unique, you get mostly results of him. He has a  Twitter account with 18,000+ followers created in 2012, a  Facebook page with over 205,000+ likes, a  personal Facebook account, and an  Instagram account with 7,000+ followers.\n In addition, he also has an  IMDB actor page I guess. This guy is a real star. Buried on page two of Google, there\u2019s even a  Medium article that profiles him having a $15M net worth written by Adam West. Not that Adam West. But don\u2019t forget this guy. Actually, let\u2019s just check him out now.\n     Now most of you probably think of Batman when you think of Adam West but I feel obligated to mention that all I can hear when I hear that name now is the voice of Mayor Adam West from Family Guy. I digress. So who is he? Well Adam West seems to be a blogger who has written a total of  six articles on Medium. Three of them are about cryptocurrency, two are about Vincent, and one is about Tony Robbins. What a cornucopia of topical goodness. Adam also has a  Facebook profile. How can we be sure this is the same guy? Well there are other reasons I\u2019ll address later but most notably his previous profile picture is the same cartoon image used on his Medium profile. We\u2019ll press pause here for Adam but his story isn\u2019t over.\n     TrustPilot is a review site where people can, you guessed it, review services. It also happens that VidLeap even though it\u2019s only been born a month ago has some  stellar reviews. In addition, note that this page is actually claimed so VidLeap is not only aware of it but can manage it and respond to reviews though they have no direct control over them. They cannot remove negative reviews. It would appear then that they have already had five satisfied customers.\n One of the ways scams can garner quick reputability is to amass positive reviews on their pages and other sites like TrustPilot. Because they know that, it\u2019s important that they encourage people to leave reviews. Especially when we\u2019re talking about a $400 buy in. Or perhaps, they can get reviews through other means.\n   We see here a few of the reviews. Note that they all occur in a close time frame and are also very close to the original creation of this venture. Two of them also say the same exact thing and to remove any doubt that they\u2019re fake, we can reference they use the same nonstandard capitalization in the wording. It doesn\u2019t take long to notice something isn\u2019t quite right here already given those signs. However, let\u2019s give the benefit of the doubt and check one layer deeper. All of the accounts leave seemingly random reviews, in a short and recent timeframe, some on the same products though with different wording. Lastly, a quick reverse image search will tip the hat and illuminate that these definitely are not real people:\n     Now VidLeap\u2019s Facebook page gets us a little bit farther down the rabbit hole of \u201cwhat is going on here?\u201d A new course that\u2019s only been around since April has over 14,000 likes on Facebook. That\u2019s certainly impressive. One would argue it even reinforces the very claims of the course itself. Except not everything is as it seems here.\n   Facebook has this wonderful tool for pages called the \u201cTransparency Tool\u201d that gives you insight to the changes a page makes over time. We see here that this page is actually 9 years old and has had a few name changes. The Allegiant appears to have been some kind of progressive news site or something like that. It\u2019s only been changed to VidLeap as of April. This is the true explanation of why the page seems so popular, it\u2019s been gathering an audience for 9 years under a different use. Now without the transparency tool, this wouldn\u2019t have been hard to discover as all of the Allegiant\u2019s old posts dating back to 2011 still exist and there are many 5 star page reviews dating in 2013. It certainly helps get a clearer picture however.\n If we head over to the reviews and sort by \u201crecent\u201d we can see that some new reviews directly related to VidLeap have already made their way onto the page.\n   Wait a second. This review seems awfully familiar. That\u2019s right! If we look above to TrustPilot, we can find this same review. Except\u2026 it seems that \u201cAlexandra Inha\u201d appears to have transformed into her alter-ego \u201cSumiya Anika\u201d with a different name and photo. Now that\u2019s a disguise. Maybe Adam West and Batman were truly appropriate for this investigation. But wait a second\u2026 holy coincidences Batman!\n   If it isn\u2019t Adam West in the flesh right here reviewing VidLeap. And according to the date of the review, he\u2019s somehow managed to consume the entire four week course and begun generating $3,000 a month in revenue in just days from when it showed up. He\u2019s clearly a student because the page responded mentioning they\u2019ve scheduled his 1 on 1 with Vincent which is part of the perks of the prestigious fee us elites paid.\n     The above gif is a hint at what\u2019s about to be uncovered but if you aren\u2019t there yet, buckle your seatbelt. Back to Medium! I had mentioned that Adam had written six posts but I told you his story wasn\u2019t over and here we find ourselves prepared to see what\u2019s next. Upon further investigation, all six posts are actually about Vincent or reference Vincent. We got a fan here y\u2019all. If any of the posts don\u2019t mention him directly, they at least include one of his youtube videos from his main channel. He even wrote this vague article that   profiles Vincent and gives random information like his age and height. All of the articles speak about Vincent in the third person as if they are an interviewer. Except two. In two of them, the tone of Mr. West\u2019s writing changes to the first person:\n   You\u2019ll never guess who\u2019s Youtube channel that is. That\u2019s right, none other than Vincent Briatore himself. This seems like a foolish oversight considering in other articles like the one discussing Vincent\u2019s wealth he says things like \u201cWhen I first started following Vincent he would post pictures daily of his \u2018day trading\u2019 portfolio on his social media.\u201d\n Perhaps it\u2019s a fluke. Plenty of red flags so far have really jettisoned all trust into the ground but hey, maybe he just got Vincent to write 2 posts on his blog and forgot to explicitly state that he invited him on.\n     Now if this is just a fluke, surely there would be no other signs that may indicate that Adam West is in fact the alter ego of the elusive Vincent Briatore. However, a couple more details make the possibility of a fluke a bit less likely. Let\u2019s jet back over to Adam\u2019s Facebook. What else is there to note? Well Adam\u2019s profile is pretty bare. He has five \u201clikes\u201d. Of them three (60% for you math nerds) belong to Vincent. One is VidLeap, one is Vincent\u2019s like page, and the other is Ethereum Evengelist, his Facebook page for his Youtube channel.\n We also discover that Adam lives in the great home of Dunder Mifflin Paper Company: Scranton, Pennsylvania. A town with a population of about 77,000 people. Not small but not particularly large either.\n   Oh Vinny no, what is you doin\u2019? Now I\u2019m no rocket surgeon, but this is highly suspicious. I think Adam just might be Vincent. If so, the most shocking part of this is the Facebook review above where he\u2019s just talking to himself. Why you gotta be weird, man? We\u2019ve been bamboozled! Well not we, mostly just me, cuz I gave this guy $400 but you\u2019re still wondering about that huh?\n   Well you did it, you stayed through all of this so I suppose I owe you an explanation of what Adam, er, I mean Vincent gave me for my money. Well I\u2019m sure you\u2019ll be surprised to hear \u201cnot much\u201d. It signed me up for a  Teachable course with his curriculum. What I received was a 2 part \u201cWeek 1\u201d lesson. The first portion is supposed to be some kind of static handout that I was supposed to review. It wasn\u2019t there, so I aced that part of Week 1(look mom!). The next part is a 10 minute intro video and a five question quiz that I failed because he lied to me. I really am a sucker.\n   That was all there was of my 4 week course. If you want to know what the video was like, I have you covered.   I TOOK IT straight off the site because I paid $400 so I deserved it. I guess I just wanted the feeling of getting robbed by the local movie theater again since we can\u2019t go see movies now. Then I lashed out and pirated the movie anyway because I hated it so much and wanted revenge. You can view it  here, though you won\u2019t be any richer for it. Now I don\u2019t know how Teachable works but I suppose that it could be timelocked and new content would be delivered to me each day but I don\u2019t believe the content exists. The only reason that theory is in my head is because that\u2019s what he told me. That\u2019s right, I talked to him on Twitter too.\n   After $400 and all this writing, surely we couldn\u2019t end this without hearing from the mastermind himself. I gently questioned him and gave him the opportunity to explain himself, here are some excerpts:\n             So now I\u2019m $400 richer. Or I guess I\u2019ve broke even because he gave my money back. Because of that refund, I actually no longer have access to the course so we may never know if the rest of the content existed or if Mr.Beast skyped in to tell us about the wonders of Youtube. While he hasn\u2019t blocked me, he has stopped responding to me.\n   Don\u2019t give people on the internet large amounts of money with the promises of riches. I charged the fee for this investigation knowing I was going to dispute it later anyway for services not rendered if he didn\u2019t give it back. Others may not be so lucky and you may get robbed blind with the promises of immeasurable wealth.\n For anyone reading this, please don\u2019t do this. Not the scamming part, that should be self evident, but the slimy self promotion through fake identities and reviews. We all have something to share that can be valuable to others. Let your content speak for itself.\n Further investigation shows that there are many in the cryptocurrency community who also don\u2019t think too highly of Mr. Briatore. I\u2019ve listed them below. Be safe out there!", "posttime": "2020-05-29 23:42:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6587\u68ee\u7279,case", "title": "\u6587\u68ee\u7279\u00b7\u5e03\u91cc\u4e9a\u6258\u5229\u7684\u5947\u6848", "title_en": "The Curious Case of Vincent Briatore", "transed": 1, "url": "https://exploits.run/uncovering-a-scam/", "via": "", "real_tags": ["\u6587\u68ee\u7279", "case"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u4e00\u9875\u4e0b\u4e00\u9875\u5faa\u73af\u53cc\u5411\u94fe\u8868\u662f\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u4ee5\u8282\u70b9\u7684\u5f62\u5f0f\u5b58\u50a8\u3002\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e09\u4e2a\u5b50\u5143\u7d20\u3002\u5b58\u50a8\u5143\u7d20\u503c\u7684\u6570\u636e\u90e8\u5206\u3001\u5b58\u50a8\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u7684\u4e0a\u4e00\u4e2a\u90e8\u5206\u548c\u5b58\u50a8\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\u7b2c\u4e00\u4e2a\u8282\u70b9(\u4e5f\u79f0\u4e3aHead)\u59cb\u7ec8\u7528\u4f5c\u904d\u5386\u5217\u8868\u7684\u5f15\u7528\u3002\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u6307\u5411\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u94fe\u63a5\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u94fe\u63a5\u3002\u53ef\u4ee5\u5c06\u53cc\u5411\u94fe\u63a5\u7684\u5706\u5f62\u53ef\u89c6\u5316\u4e3a\u8282\u70b9\u94fe\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u548c\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\n\u5728C\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528Structure\u521b\u5efa\u8282\u70b9\u3002\u5728C++\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u521b\u5efa\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4f7f\u7528\u7ed3\u6784\u521b\u5efa\u8282\u70b9\u3002LinkedList\u7c7b\u5305\u542b\u4f5c\u4e3a\u7c7b\u6210\u5458\u7684Node\u3002\n\u5728Java\u3001Python\u3001C#\u548cPHP\u4e2d\uff0c\u5faa\u73af\u53cc\u5411\u94fe\u8868\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u7c7b\uff0c\u8282\u70b9\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\u3002LinkedList\u7c7b\u5305\u542bNode\u7c7b\u7c7b\u578b\u7684\u5f15\u7528\u3002\n//node structurestruct Node{int data\uff1bNode*Next\uff1bNode*Prev\uff1b}\uff1b\u7c7bLinkedList{public\uff1anode*head\uff1bpublic\uff1a//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b\n#node structureclass Node\uff1a#\u521b\u5efa\u65b0\u8282\u70b9\u7684\u6784\u9020\u51fd\u6570def__init__(self\uff0cdata)\uff1aself.data=data self.next=None self.prev=None#class LinkedList\uff1a#\u521b\u5efa\u7a7a\u7684LinkedList\u7684\u6784\u9020\u51fd\u6570def__init__(Self)\uff1aself.head=None\u3002\n//\u8282\u70b9\u7ed3\u6784\u7c7bNode{int data\uff1bNode Next\uff1bNode Prev\uff1b}\uff1b\u7c7bLinkedList{Node Head\uff1b//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b\n//node structureclass Node{public int data\uff1bpublic Node Next\uff1bpublic Node prev\uff1b}\uff1bclass LinkedList{public Node head\uff1b//\u521b\u5efa\u7a7aLinkedList public LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b\n//node structureclass Node{public$data\uff1bpublic$next\uff1bpublic$prev\uff1b}\u7c7bLinkedList{public$head\uff1b//\u521b\u5efa\u7a7aLinkedList public\u51fd\u6570\u7684\u6784\u9020\u51fd\u6570__Construction(){$this-&gt\uff1bhead=null\uff1b}}\uff1b\n#include&lt\uff1biostream&gt\uff1busing\u547d\u540d\u7a7a\u95f4std\uff1b//node structurestruct Node{int data\uff1bNode*Next\uff1bNode*prev\uff1b}\uff1bclass LinkedList{public\uff1anode*head\uff1bpublic\uff1a//\u521b\u5efa\u7a7a\u7684LinkedList(){head=null\uff1b}}\uff1b//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u7a7a\u7684LinkedList LinkedList MyList\uff1b//add first\u3002node*first=new Node()\uff1bfirst-gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first\uff1b//\u94fe\u63a5\u5934\u90e8first\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9-&gt\uff1bnext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=first\uff1b//\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Node*Second=new Node()\uff1bSecond-&gt\uff1bData=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u94fe\u63a5\u7b2c\u4e00\u4e2a\u8282\u70b9Second-&gt\uff1bprev=first\uff1bFirst-&gt\uff1bNext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=Second\uff1b//\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002\u8282\u70b9*Third=new Node()\uff1bThird-&gt\uff1bData=30\uff1bThird-&gt\uff1bNext=NULL\uff1b//\u6b63\u5728\u94fe\u63a5\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&gt\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aThird-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bPrev=Third\uff1bReturn 0\uff1b}\u3002\n#include&lt\uff1bstdio.h&gt\uff1b#include&lt\uff1bstdlib.h&gt\uff1b//node structurestruct Node{int data\uff1bstruct Node*next\uff1bstruct Node*prev\uff1b}\uff1b//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u540d\u4e3aMyList struct Node*MyList=null\u7684\u5934\u8282\u70b9\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002struct Node*first\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9first=(struct Node*)malloc(sizeof(Struct Node))\uff1bfirst-&gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u6b63\u5728\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList=first\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9first-&gt\uff1bnext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList-&gt\uff1bstruct Node*Second\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9Second=(struct Node*)malloc(sizeof(Struct Node))\uff1bSecond-&gt\uff1bdata=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u6b63\u5728\u4e0e\u7b2c\u4e00\u4e2a\u8282\u70b9Second\u94fe\u63a5-&&gt;\uff1bprev=first\uff1bfirst-&gt;\uff1bnext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList\u7684\u4e0a\u4e00\u4e2a-\u3002struct Node*Third\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9Third=(struct Node*)malloc(sizeof(Struct Node))\uff1bThird-&gt\uff1bdata=30\uff1bThird-&gt\uff1bNext=null\uff1b//\u4e0e\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&gt;\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u4e3aThird\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&&gt;\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934MyList\u7684\u4e0a\u4e00\u4e2a-\u3002\n#node structureclass Node\uff1a#\u521b\u5efa\u65b0\u8282\u70b9\u7684\u6784\u9020\u51fd\u6570def__init__(self\uff0cdata)\uff1aself.data=data self.next=None self.prev=None#class LinkedList\uff1a#\u521b\u5efa\u7a7a\u7684LinkedList def__init__(Self)\uff1aself.head=None#\u6d4b\u8bd5\u4ee3\u7801#\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684LinkedList MyList=LinkedList()#add first nokedList\u3002#\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Second=Node(20)#\u4f7f\u7528\u7b2c\u4e00\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=firstfirst.next=Second#\u94fe\u63a5\u5934\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u5934\u7684\u524d\u4e00\u4e2aMyList.head.prev=Second\uff1b#\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002Third=Node(30)#\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=Second\u3002Next=Third#\u94fe\u63a5\u5934\u4e09\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u4e0a\u4e00\u4e2a\u3002\n//node structureclass Node{int data\uff1bNode Next\uff1bNode Prev\uff1b}\uff1bclass LinkedList{Node head\uff1b//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}}\u7684\u6784\u9020\u51fd\u6570\uff1b//\u6d4b\u8bd5\u4ee3\u7801\u516c\u5171\u7c7b\u5b9e\u73b0{public static void main(string[]args){//\u521b\u5efa\u7a7aLinkedList LinkedList MyList=new LinkedList()\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002Node First=new Node()\uff1bfirst.data=10\uff1bfirst.next=null\uff1bfirst.prev=null\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3afirst\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9.next=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head.prev=first\uff1b//\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Node Second=new Node()\uff1bSecond d.data=20\uff1bSecd.next=null\uff1b//\u94fe\u63a5\u7b2c\u4e00\u4e2a\u8282\u70b9Second\u3002prev=first\uff1bfirst.next=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u3002next=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head.prev=Second\uff1b//\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002Node Third=new Node()\uff1bThird d.data=30\uff1bThird d.next=null\uff1b//\u94fe\u63a5\u7b2c\u4e8c\u4e2a\u8282\u70b9Third.prev=Second\uff1bSecd.Next=Third\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aThird\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a.Next=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head.prev=Third\uff1b}}\u3002\n\u4f7f\u7528system\uff1b//node structureclass Node{public int data\uff1bpublic Node Next\uff1bpublic Node prev\uff1b}\uff1bclass LinkedList{public Node head\uff1b//\u6784\u9020\u51fd\u6570\u521b\u5efa\u7a7a\u7684LinkedList public LinkedList(){head=null\uff1b}}\uff1b//\u6d4b\u8bd5\u4ee3\u7801\u7c7b\u5b9e\u73b0\n#include&lt\uff1biostream&&gt;\u4f7f\u7528\u547d\u540d\u7a7a\u95f4std\uff1b//node structurestruct Node{int data\uff1bNode*Next\uff1bNode*prev\uff1b}\uff1bclass LinkedList{public\uff1anode*head\uff1bpublic\uff1a//\u521b\u5efa\u7a7a\u7684LinkedList LinkedList(){head=null\uff1b}//\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9void PrintList(){Node*temp=head\uff1bif(temp\uff01=null){cout\u3002data&lt\uff1b&lt\uff1b&#34\uff1b&#34\uff1b\uff1btemp=temp-&gt\uff1bnext\uff1bif(temp==head)Break\uff1b}}Else{cout&lt\uff1b&lt\uff1b&#34\uff1b\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b\uff1b}\uff1b//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u7a7a\u7684LinkedList LinkedList MyList\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002node*first=new Node()\uff1bfirst-gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first\uff1b//\u94fe\u63a5\u5934\u90e8first\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9-&gt\uff1bnext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=first\uff1b//\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Node*Second=new Node()\uff1bSecond-&gt\uff1bData=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u94fe\u63a5\u7b2c\u4e00\u4e2a\u8282\u70b9Second-&gt\uff1bprev=first\uff1bFirst-&gt\uff1bNext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bprev=Second\uff1b//\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002\u8282\u70b9*Third=new Node()\uff1bThird-&gt\uff1bData=30\uff1bThird-&gt\uff1bNext=null\uff1b//\u6b63\u5728\u94fe\u63a5\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&&gt;\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aThird-&gt\uff1bNext=MyList.head\uff1b//\u94fe\u63a5\u5934\u90e8MyList.head-&gt\uff1bPrev=Third\uff1b//\u6253\u5370\u5217\u8868MyList.PrintList()\u7684\u5185\u5bb9\u3002\n#include&lt\uff1bstdio.h&gt\uff1b#include&lt\uff1bstdlib.h&gt\uff1b//node structurestruct Node{int data\uff1bstruct Node*Next\uff1bstruct Node*prev\uff1b}\uff1b//\u663e\u793alistvoid PrintList(struct Node*head_ref){struct Node*temp=head_ref\uff1bif(head_ref\uff01=null){printf(&#34\uff1b\\n\u3002temp=temp-&gt\uff1bnext\uff1bif(temp==head_ref)Break\uff1b}}Else{printf(&#34\uff1b)\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b)\uff1b}//\u6d4b\u8bd5\u4ee3\u7801int main(){//\u521b\u5efa\u540d\u4e3aMyList struct Node*MyList=null\u7684\u5934\u8282\u70b9\uff1b//\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002struct Node*first\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9first=(struct Node*)malloc(sizeof(Struct Node))\uff1bfirst-&gt\uff1bdata=10\uff1bfirst-&gt\uff1bnext=null\uff1bfirst-&gt\uff1bprev=null\uff1b//\u6b63\u5728\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList=first\uff1b//\u94fe\u63a5\u5934\u90e8\u8282\u70b9first-&gt\uff1bnext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList-&gt\uff1bstruct Node*Second\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9Second=(struct Node*)malloc(sizeof(Struct Node))\uff1bSecond-&gt\uff1bdata=20\uff1bSecond-&gt\uff1bNext=null\uff1b//\u6b63\u5728\u4e0e\u7b2c\u4e00\u4e2a\u8282\u70b9Second\u94fe\u63a5-&&gt;\uff1bprev=first\uff1bfirst-&gt;\uff1bnext=Second\uff1b//\u94fe\u63a5\u5934\u90e8\u4e3aSecond\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&gt\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934\u90e8MyList\u7684\u4e0a\u4e00\u4e2a-\u3002struct Node*Third\uff1b//\u5206\u914d\u5806\u4e2d\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9Third=(struct Node*)malloc(sizeof(Struct Node))\uff1bThird-&gt\uff1bdata=30\uff1bThird-&gt\uff1bNext=null\uff1b//\u4e0e\u7b2c\u4e8c\u4e2a\u8282\u70b9Third-&gt;\uff1bprev=Second\uff1bSecond-&gt\uff1bNext=Third\uff1b//\u94fe\u63a5\u5934\u4e3aThird\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a-&&gt;\uff1bNext=MyList\uff1b//\u94fe\u63a5\u5934MyList\u7684\u4e0a\u4e00\u4e2a-\u3002\n#node structureclass Node\uff1a#\u521b\u5efa\u65b0\u8282\u70b9\u7684\u6784\u9020\u51fd\u6570def__init__(self\uff0cdata)\uff1aself.data=data self.next=one self.prev=None#class LinkedList\uff1a#\u521b\u5efa\u7a7a\u7684LinkedList def__init__(Self)\uff1aself.head=None#\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9def PrintList(Self)\uff1atemp=self.head if(temp\u3002)While(True)\uff1aprint(temp.data\uff0cend=&#34\uff1b&#34\uff1b)temp=temp.next if(temp==self.head)\uff1aBreak Else\uff1a\u6253\u5370(&#34\uff1b\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b)#\u6d4b\u8bd5\u4ee3\u7801#\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684LinkedList MyList=LinkedList()#\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002first=Node(10)#\u94fe\u63a5\u5934\u90e8\u8282\u70b9MyList.head=first#\u94fe\u63a5\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002#\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002Second=Node(20)#\u4f7f\u7528\u7b2c\u4e00\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=firstfirst.next=Second#\u94fe\u63a5\u5934\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u5934\u7684\u524d\u4e00\u4e2aMyList.head.prev=Second\uff1b#\u6dfb\u52a0\u7b2c\u4e09\u4e2a\u8282\u70b9\u3002Third=Node(30)#\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u8282\u70b9\u94fe\u63a5\u3002prev=Second\u3002Next=Third#\u94fe\u63a5\u5934\u4e09\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002Next=MyList.head#\u94fe\u63a5\u4e0a\u4e00\u4e2a\u3002\n//\u8282\u70b9\u7ed3\u6784\u7c7bNode{int data\uff1bNode Next\uff1bNode Prev\uff1b}\uff1b\u7c7bLinkedList{Node Head\uff1b//\u521b\u5efa\u7a7aLinkedList LinkedList(){head=null\uff1b}//\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9void PrintList(){Node temp=new Node()\uff1btemp=this.head\uff1bif(temp\uff01=null){System.out.print(&#34\uff1b\\n\u5217\u8868\u3002temp=temp.next\uff1bif(temp==this.head)Break\uff1b}}Else{System.out.print(&#34\uff1b)\\n\u5217\u8868\u4e3a\u7a7a\u3002&#34\uff1b)\uff1b}\uff1b//\u6d4b\u8bd5\u4ee3\u7801\u516c\u5171\u7c7b\u5b9e\u73b0", "note_en": "Previous Page Next Page  A circular doubly linked list is a linear data structure, in which the elements are stored in the form of a node. Each node contains three sub-elements. A data part that stores the value of the element, the previous part that stores the pointer to the previous node, and the next part that stores the pointer to the next node as shown in the below image:\n  The first node also known as HEAD is always used as a reference to traverse the list. Last element contains link to the first element as next and the first element contains link of the last element as previous. A circular doubly linked can be visualized as a chain of nodes, where every node points to previous and next node.\n    In C, a node can be created using structure. In C++, circular doubly linked list can be created using a class and a Node using structures. The LinkedList class contains Node as class member.\n In Java, Python, C# and PHP, circular doubly linked list can be represented as a class and a Node as a separate class. The LinkedList class contains a reference of Node class type.\n  //node structurestruct Node { int data; Node* next; Node* prev;};class LinkedList { public: Node* head; public: //constructor to create an empty LinkedList LinkedList(){ head = NULL; }};\n    # node structureclass Node: #constructor to create a new node def __init__(self, data): self.data = data self.next = None self.prev = None#class Linked Listclass LinkedList: #constructor to create an empty LinkedList def __init__(self): self.head = None\n  //node structureclass Node { int data; Node next; Node prev;};class LinkedList { Node head; //constructor to create an empty LinkedList LinkedList(){ head = null; }};\n  //node structureclass Node { public int data; public Node next; public Node prev;};class LinkedList { public Node head; //constructor to create an empty LinkedList public LinkedList(){ head = null; } };\n  //node structureclass Node { public $data; public $next; public $prev;}class LinkedList { public $head; //constructor to create an empty LinkedList public function __construct(){ $this-&gt;head = null; }};\n     #include &lt;iostream&gt;using namespace std;//node structurestruct Node { int data; Node* next; Node* prev;};class LinkedList { public: Node* head; public: //constructor to create an empty LinkedList LinkedList(){ head = NULL; } };//test the code int main() { //create an empty LinkedList LinkedList MyList; //Add first node. Node* first = new Node(); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList.head = first; //linking next of the node with head first-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = first; //Add second node. Node* second = new Node(); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = second; //Add third node. Node* third = new Node(); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = third; return 0;}\n  #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;//node structurestruct Node { int data; struct Node* next; struct Node* prev;};// test the code int main() { //create the head node with name MyList struct Node* MyList = NULL; //Add first node. struct Node* first; //allocate second node in the heap first = (struct Node*)malloc(sizeof(struct Node)); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList = first; //linking next of the node with head first-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = first; //Add second node. struct Node* second; //allocate second node in the heap second = (struct Node*)malloc(sizeof(struct Node)); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = second; //Add third node. struct Node* third; //allocate third node in the heap third = (struct Node*)malloc(sizeof(struct Node)); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = third; return 0; }\n  # node structureclass Node: #constructor to create a new node def __init__(self, data): self.data = data self.next = None self.prev = None#class Linked Listclass LinkedList: #constructor to create an empty LinkedList def __init__(self): self.head = None # test the code # create an empty LinkedList MyList = LinkedList()#Add first node.first = Node(10)#linking with head nodeMyList.head = first#linking next of the node with headfirst.next = MyList.head #linking prev of the head MyList.head.prev = first;#Add second node.second = Node(20)#linking with first nodesecond.prev = firstfirst.next = second#linking next of the node with headsecond.next = MyList.head #linking prev of the head MyList.head.prev = second;#Add third node.third = Node(30)#linking with second nodethird.prev = secondsecond.next = third#linking next of the node with headthird.next = MyList.head #linking prev of the head MyList.head.prev = third;\n  //node structureclass Node { int data; Node next; Node prev;};class LinkedList { Node head; //constructor to create an empty LinkedList LinkedList(){ head = null; } };// test the code public class Implementation { public static void main(String[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; }}\n  using System;//node structureclass Node { public int data; public Node next; public Node prev;};class LinkedList { public Node head; //constructor to create an empty LinkedList public LinkedList(){ head = null; } };// test the code class Implementation { static void Main(string[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; }}\n  &lt;?php//node structureclass Node { public $data; public $next; public $prev;}class LinkedList { public $head; //constructor to create an empty LinkedList public function __construct(){ $this-&gt;head = null; } };// test the code //create an empty LinkedList $MyList = new LinkedList();//Add first node.$first = new Node();$first-&gt;data = 10;$first-&gt;next = null;$first-&gt;prev = null;//linking with head node$MyList-&gt;head = $first;//linking next of the node with head$first-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $first;//Add second node.$second = new Node();$second-&gt;data = 20;$second-&gt;next = null;//linking with first node$second-&gt;prev = $first;$first-&gt;next = $second;//linking next of the node with head$second-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $second;//Add third node.$third = new Node();$third-&gt;data = 30;$third-&gt;next = null;//linking with second node$third-&gt;prev = $second;$second-&gt;next = $third;//linking next of the node with head$third-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $third;?&gt;\n   A circular doubly linked list can be traversed from any node of the list using a temp node. Keep on moving the temp node to the next one and displaying its content. Stop the traversal, after reaching the starting node.\n  #include &lt;iostream&gt;using namespace std;//node structurestruct Node { int data; Node* next; Node* prev;};class LinkedList { public: Node* head; public: //constructor to create an empty LinkedList LinkedList(){ head = NULL; } //display the content of the list void PrintList() { Node* temp = head; if(temp != NULL) { cout&lt;&lt;&#34;\\nThe list contains: &#34;; while(true) { cout&lt;&lt;temp-&gt;data&lt;&lt;&#34; &#34;; temp = temp-&gt;next; if(temp == head) break; } } else { cout&lt;&lt;&#34;\\nThe list is empty.&#34;; } } };// test the code int main() { //create an empty LinkedList LinkedList MyList; //Add first node. Node* first = new Node(); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList.head = first; //linking next of the node with head first-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = first; //Add second node. Node* second = new Node(); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = second; //Add third node. Node* third = new Node(); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList.head; //linking prev of the head MyList.head-&gt;prev = third; //print the content of list MyList.PrintList(); return 0; }\n  #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;//node structurestruct Node { int data; struct Node* next; struct Node* prev;};//display the content of the listvoid PrintList(struct Node* head_ref) { struct Node* temp = head_ref; if(head_ref != NULL) { printf(&#34;\\nThe list contains: &#34;); while (1) { printf(&#34;%i &#34;,temp-&gt;data); temp = temp-&gt;next; if(temp == head_ref) break; } } else { printf(&#34;\\nThe list is empty.&#34;); } }// test the code int main() { //create the head node with name MyList struct Node* MyList = NULL; //Add first node. struct Node* first; //allocate second node in the heap first = (struct Node*)malloc(sizeof(struct Node)); first-&gt;data = 10; first-&gt;next = NULL; first-&gt;prev = NULL; //linking with head node MyList = first; //linking next of the node with head first-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = first; //Add second node. struct Node* second; //allocate second node in the heap second = (struct Node*)malloc(sizeof(struct Node)); second-&gt;data = 20; second-&gt;next = NULL; //linking with first node second-&gt;prev = first; first-&gt;next = second; //linking next of the node with head second-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = second; //Add third node. struct Node* third; //allocate third node in the heap third = (struct Node*)malloc(sizeof(struct Node)); third-&gt;data = 30; third-&gt;next = NULL; //linking with second node third-&gt;prev = second; second-&gt;next = third; //linking next of the node with head third-&gt;next = MyList; //linking prev of the head MyList-&gt;prev = third; //print the content of list PrintList(MyList); return 0; }\n  # node structureclass Node: #constructor to create a new node def __init__(self, data): self.data = data self.next = None self.prev = None#class Linked Listclass LinkedList: #constructor to create an empty LinkedList def __init__(self): self.head = None #display the content of the list def PrintList(self): temp = self.head if(temp != None): print(&#34;\\nThe list contains:&#34;, end=&#34; &#34;) while (True): print(temp.data, end=&#34; &#34;) temp = temp.next if(temp == self.head): break else: print(&#34;\\nThe list is empty.&#34;)# test the code # create an empty LinkedList MyList = LinkedList()#Add first node.first = Node(10)#linking with head nodeMyList.head = first#linking next of the node with headfirst.next = MyList.head #linking prev of the head MyList.head.prev = first;#Add second node.second = Node(20)#linking with first nodesecond.prev = firstfirst.next = second#linking next of the node with headsecond.next = MyList.head #linking prev of the head MyList.head.prev = second;#Add third node.third = Node(30)#linking with second nodethird.prev = secondsecond.next = third#linking next of the node with headthird.next = MyList.head #linking prev of the head MyList.head.prev = third;#print the content of list MyList.PrintList()\n  //node structureclass Node { int data; Node next; Node prev;};class LinkedList { Node head; //constructor to create an empty LinkedList LinkedList(){ head = null; } //display the content of the list void PrintList() { Node temp = new Node(); temp = this.head; if(temp != null) { System.out.print(&#34;\\nThe list contains: &#34;); while(true) { System.out.print(temp.data + &#34; &#34;); temp = temp.next; if(temp == this.head) break; } } else { System.out.print(&#34;\\nThe list is empty.&#34;); } } };// test the code public class Implementation { public static void main(String[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; //print the content of list MyList.PrintList(); }}\n  using System;//node structureclass Node { public int data; public Node next; public Node prev;};class LinkedList { public Node head; //constructor to create an empty LinkedList public LinkedList(){ head = null; } //display the content of the list public void PrintList() { Node temp = new Node(); temp = this.head; if(temp != null) { Console.Write(&#34;\\nThe list contains: &#34;); while(true) { Console.Write(temp.data + &#34; &#34;); temp = temp.next; if(temp == this.head) break; } } else { Console.Write(&#34;\\nThe list is empty.&#34;); } } };// test the code class Implementation { static void Main(string[] args) { //create an empty LinkedList LinkedList MyList = new LinkedList(); //Add first node. Node first = new Node(); first.data = 10; first.next = null; first.prev = null; //linking with head node MyList.head = first; //linking next of the node with head first.next = MyList.head; //linking prev of the head MyList.head.prev = first; //Add second node. Node second = new Node(); second.data = 20; second.next = null; //linking with first node second.prev = first; first.next = second; //linking next of the node with head second.next = MyList.head; //linking prev of the head MyList.head.prev = second; //Add third node. Node third = new Node(); third.data = 30; third.next = null; //linking with second node third.prev = second; second.next = third; //linking next of the node with head third.next = MyList.head; //linking prev of the head MyList.head.prev = third; //print the content of list MyList.PrintList(); }}\n  &lt;?php//node structureclass Node { public $data; public $next; public $prev;}class LinkedList { public $head; //constructor to create an empty LinkedList public function __construct(){ $this-&gt;head = null; } //display the content of the list public function PrintList() { $temp = new Node(); $temp = $this-&gt;head; if($temp != null) { echo &#34;\\nThe list contains: &#34;; while(true) { echo $temp-&gt;data.&#34; &#34;; $temp = $temp-&gt;next; if($temp == $this-&gt;head) break; } } else { echo &#34;\\nThe list is empty.&#34;; } } };// test the code //create an empty LinkedList $MyList = new LinkedList();//Add first node.$first = new Node();$first-&gt;data = 10;$first-&gt;next = null;$first-&gt;prev = null;//linking with head node$MyList-&gt;head = $first;//linking next of the node with head$first-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $first;//Add second node.$second = new Node();$second-&gt;data = 20;$second-&gt;next = null;//linking with first node$second-&gt;prev = $first;$first-&gt;next = $second;//linking next of the node with head$second-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $second;//Add third node.$third = new Node();$third-&gt;data = 30;$third-&gt;next = null;//linking with second node$third-&gt;prev = $second;$second-&gt;next = $third;//linking next of the node with head$third-&gt;next = $MyList-&gt;head;//linking prev of the head $MyList-&gt;head-&gt;prev = $third;//print the content of list$MyList-&gt;PrintList(); ?&gt;\n      Previous Page Next Page", "posttime": "2020-05-29 23:41:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53cc\u5411,doubly,\u8282\u70b9", "title": "\u5faa\u73af\u53cc\u5411\u94fe\u8868", "title_en": "Circular Doubly Linked List", "transed": 1, "url": "https://www.alphacodingskills.com/ds/circular-doubly-linked-list.php", "via": "", "real_tags": ["\u53cc\u5411", "doubly", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004265, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u201c1\u201d\u4f4d\u7f6e\u5f00\u59cb\uff0c\u6211\u4eec\u52a06+6=12\uff0c\u5199\u4e0b2\uff0c\u8fdb\u4f4d1\u3002\u6211\u4eec\u5411\u5de6\u524d\u8fdb\uff0c\u4e00\u6b21\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u6570\u5b57\u8981\u52a0\u3002\n\u5728\u5b9e\u73b0\u5927\u6574\u6570(\u4f8b\u5982\uff0c2 64\u53ca\u4ee5\u4e0a)\u7684\u52a0\u6cd5\u65f6\uff0c\u901a\u5e38\u4f1a\u7f16\u5199\u4e0e\u6b64\u7b97\u6cd5\u975e\u5e38\u76f8\u4f3c\u7684\u4ee3\u7801\u3002\u6709\u8da3\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6280\u5de7\u53ef\u4ee5\u5728\u73b0\u4ee3CPU\u4e0a\u6781\u5927\u5730\u52a0\u901f\u8fd9\u4e00\u8fc7\u7a0b\u3002\n\u4f46\u9996\u5148\uff0c\u6211\u8981\u95ee\u4e00\u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u4ece\u201c1\u201d\u5f00\u59cb\u957f\u76f8\u52a0\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u4ece\u5de6\u8fb9\u5f00\u59cb\u5462\uff1f\n\u7b54\u6848\u5f53\u7136\u662f\u8fdb\u4f4d\uff0c\u6211\u4eec\u4e0d\u80fd\u786e\u5b9a\u7b54\u6848\u7684\u7ed9\u5b9a\u6570\u5b57\u662f\u591a\u5c11\uff0c\u76f4\u5230\u6211\u4eec\u5b8c\u6210\u4e86\u8be5\u6570\u5b57\u53f3\u8fb9\u7684\u6240\u6709\u52a0\u6cd5\u3002\n6+3=9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u6570\u5b57\u662f9.8+4=12\uff0c\u597d\u7684\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u662f2\u2026\u3002\u4f46\u662f\u643a\u5e261\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u6570\u5b57\u5b9e\u9645\u4e0a\u662f9+1=10\u2026\u3002\u73b0\u5728\u5e26\u56de1\u4e2a\u2026\u3002\n\u5bf9\u4e8e\u5fc3\u7b97\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f\u592a\u7cdf\u7cd5(\u6709\u4e9b\u4eba\u5728\u5904\u7406\u8db3\u591f\u5c0f\u7684\u6570\u5b57\u65f6\u5b9e\u9645\u4e0a\u66f4\u559c\u6b22\u5b83)\u3002\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u79cd\u7b97\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u9650\u5236\uff0c\u5728\u5904\u7406\u8f83\u5927\u7684\u6570\u5b57\u65f6\u4f1a\u53d8\u5f97\u660e\u663e\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u56e0\u4e3a\u8ba1\u7b97\u7684\u540e\u671f\u90e8\u5206\u4f9d\u8d56\u4e8e\u8ba1\u7b97\u65e9\u671f\u90e8\u5206\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5f88\u96be\u5bf9\u5de5\u4f5c\u8fdb\u884c\u62c6\u5206\u548c\u5e76\u884c\u5316\u3002\n\u5f53\u7136\uff0c\u8ba1\u7b97\u673a\u4e0d\u80fd\u5728\u57fa\u657010\u4e0b\u8fd0\u884c\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u73b0\u4ee3\u7684\u53f0\u5f0f\u673a\u548c\u670d\u52a1\u5668CPU\u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3\u6765\u64cd\u4f5c(\u5927\u90e8\u5206)64\u4f4d\u6574\u6570\u3002\n\uff1b\u5c06B\u4e2d\u768464\u4f4d\u503c\u52a0\u5230A\u4e2d\u768464\u4f4d\u503c\u4e2d\u6dfb\u52a0A\uff0cB\uff1b\u6ce8\u610f\uff1a\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u5c06\u4f7f\u7528\u5b57\u6bcd\u800c\u4e0d\u662f\u771f\u5b9e\u7684\u5bc4\u5b58\u5668\u540d\u79f0\n\u53ea\u8981\u6211\u4eec\u7684\u6570\u5b57\u7b26\u5408\u5355\u4e2a64\u4f4d\u7684\u503c\uff0c\u4e8b\u60c5\u5c31\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u60f3\u8981\u6dfb\u52a0(\u6bd4\u65b9\u8bf4)\u4e24\u4e2a256\u4f4d\u7684\u6574\u6570x\u548cy\u600e\u4e48\u529e\uff1f\n\u663e\u800c\u6613\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u6bcf\u4e2a256\u4f4d\u7684\u6570\u5b57\u5206\u6210\u56db\u4e2a64\u4f4d\u7684\u90e8\u5206(\u901a\u5e38\u79f0\u4e3a\u201c\u80a2\u4f53\u201d)\u3002\u5c06x\u7684\u6700\u9ad864\u4f4d\u653e\u5165\u5bc4\u5b58\u5668A\uff0c\u5c06\u63a5\u4e0b\u6765\u768464\u4f4d\u653e\u5165\u5bc4\u5b58\u5668B\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u5c06\u5bc4\u5b58\u5668C\u548cD\u653e\u5165\u3002\u5bf9\u4e8e\u5bc4\u5b58\u5668E\u3001F\u3001G\u3001H\uff0cy\u4e5f\u662f\u5982\u6b64\u3002\n\u4f46\u662f\u7b49\u7b49\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u6211\u4eec\u9519\u8bef\u7684\u7ed3\u679c\uff01\u5982\u679c\u6700\u540e\u4e09\u4e2a\u52a0\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6ea2\u51fa\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5c06\u989d\u5916\u76841\u201c\u8fdb\u4f4d\u201d\u5230\u4e0b\u4e00\u4e2a64\u4f4d\u5757\u3002\u54e6\uff0c\u563f\uff0c\u8fd9\u542c\u8d77\u6765\u719f\u6089\u5417\uff1f\n\u5e78\u8fd0\u7684\u662f\uff0cx86\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u6307\u4ee4\uff0c\u79f0\u4e3a\u201c\u5e26\u8fdb\u4f4d\u52a0\u6cd5\u201d\u3002ADC\u5c06\u81ea\u52a8\u68c0\u67e5\u524d\u4e00\u64cd\u4f5c\u662f\u5426\u6ea2\u51fa\uff0c\u5982\u679c\u9700\u8981\u5219\u52a01\u3002\u4ee5\u4e0b\u662f\u6b63\u786e\u4ee3\u7801\u7684\u5916\u89c2\uff1a\n\u5c06D\uff0cH ADC C\uff0cG\u76f8\u52a0\uff1b\u5305\u62ec\u6765\u81ea\u524d\u4e00\u8fd0\u7b97ADC B\uff0cF\u8fdb\u4f4d\uff1b\u5305\u62ec\u6765\u81ea\u524d\u4e00\u8fd0\u7b97ADC A\uff0cE\u7684\u8fdb\u4f4d\uff1b\u5305\u62ec\u6765\u81ea\u524d\u4e00\u8fd0\u7b97\u7684\u8fdb\u4f4d\u3002\n\u5c31\u50cf\u57fa\u657010\u4e2d\u7684\u957f\u52a0\u6cd5\u4e00\u6837\uff0c\u6211\u4eec\u4ece\u6700\u4e0d\u91cd\u8981\u7684\u201c\u6570\u5b57\u201d(D\u548cH)\u5f00\u59cb\uff0c\u4e00\u76f4\u5230\u6700\u91cd\u8981\u7684\u201c\u6570\u5b57\u201d(A\u548cE)\uff0c\u4e00\u8def\u4e0a\u6839\u636e\u9700\u8981\u643a\u5e261\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u56fa\u5b9a\u7684\u4ee3\u7801\u6bd4\u539f\u59cb\u7684(\u4e0d\u6b63\u786e\u7684)\u4ee3\u7801\u6162\u5f97\u591a\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\n\u7b2c\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u5728\u6700\u6d41\u884c\u7684x86CPU\u4e0a\uff0cADC\u7684\u6267\u884c\u901f\u5ea6\u53ea\u662f\u6bd4\u666e\u901a\u52a0\u6cd5\u6162\u3002\u56e0\u4e3aADC\u6709\u7b2c\u4e09\u4e2a\u8f93\u5165(\u8fdb\u4f4d\u6807\u5fd7)\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u6761\u6bd4ADD\u66f4\u590d\u6742\u7684\u6307\u4ee4\u3002\u800c\u4e14ADC\u7684\u4f7f\u7528\u9891\u7387\u4e5f\u4f4e\u4e8eADD\uff0c\u6240\u4ee5CPU\u8bbe\u8ba1\u8005\u5728\u4f18\u5316ADC\u6027\u80fd\u4e0a\u82b1\u8d39\u82af\u7247\u9762\u79ef\u7684\u52a8\u673a\u8f83\u5c0f\u3002\n\u7b2c\u4e8c\u4e2a\u539f\u56e0\u66f4\u6709\u8da3\uff0c\u8ba9\u6211\u4eec\u4ee5Intel Haswell\u5fae\u4f53\u7cfb\u7ed3\u6784\u4e3a\u4f8b\u3002\n\u5728Haswell CPU\u4e0a\uff0c\u4e00\u6761\u52a0\u6cd5\u6307\u4ee4\u9700\u89811\u4e2a\u5468\u671f\u6765\u6267\u884c\uff0c\u4f46\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0cHaswell CPU\u5728\u4e00\u4e2a\u5468\u671f\u5185\u6700\u591a\u53ef\u4ee5\u6267\u884c4\u6761\u52a0\u6cd5\u6307\u4ee4\uff0c\u8fd9\u662f\u600e\u4e48\u53ef\u80fd\u7684\u5462\uff1f\u5e76\u884c\u6027\u3002\u73b0\u4ee3\u5904\u7406\u5668\u9884\u6d4b\u5373\u5c06\u51fa\u73b0\u7684\u6307\u4ee4\uff0c\u5e76\u5c1d\u8bd5\u8c03\u5ea6\u5b83\u4eec\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u80fd\u7684\u65f6\u5019\u5e76\u884c\u6267\u884c\u3002\u7531\u4e8e\u54c8\u65af\u97e6\u5c14CPU\u67098\u4e2a\u6267\u884c\u7aef\u53e3\uff0c\u5176\u4e2d4\u4e2a\u7aef\u53e3\u53ef\u4ee5\u6267\u884c\u6574\u6570\u52a0\u6cd5\u6307\u4ee4\uff0c\u56e0\u6b64\u4e00\u4e2a\u54c8\u65af\u97e6\u5c14\u5904\u7406\u5668\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u6700\u591a4\u4e2a\u52a0\u6cd5\u6307\u4ee4\u3002\n\u5728\u6211\u4eec\u6700\u521d\u7684\u52a0\u6cd5\u4ee3\u7801\u4e2d\uff0c\u6240\u67094\u6761\u52a0\u6cd5\u6307\u4ee4\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u5904\u7406\u5668\u5f88\u5bb9\u6613\u5e76\u884c\u8fd0\u884c\u5b83\u4eec\u3002\u73b0\u5728\uff0c\u6709\u4e86ADC\uff0c\u6bcf\u6761\u6307\u4ee4\u90fd\u4f9d\u8d56\u4e8e\u524d\u4e00\u6761\u6307\u4ee4\u7684\u8f93\u51fa\uff0c\u5904\u7406\u5668\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u4e32\u884c\u5730\u9010\u6761\u6267\u884c\u6307\u4ee4\uff0c\u800c\u4e0d\u662f\u5e76\u884c\u6267\u884c\u3002\n\u5982\u679c\u6211\u4eec\u4f7f\u7528SIMD(SingleInstruction\uff0cMultiple Data\uff0c\u5355\u6307\u4ee4\u591a\u6570\u636e)\u6307\u4ee4\uff0c\u5219\u6027\u80fd\u5dee\u5f02\u4f1a\u66f4\u52a0\u663e\u8457\u3002\u4f8b\u5982\uff0c\u4e00\u6761vpaddq(\u5411\u91cf\u6253\u5305\u52a0\u6cd5\u56db\u5b57)\u6307\u4ee4\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u56db\u4e2a64\u4f4d\u52a0\u6cd5\u8fd0\u7b97\u3002\u518d\u52a0\u4e0aHaswell\u5904\u7406\u5668\u53ef\u4ee5\u6267\u884c\u4e24\u4e2avpaddqsper\u5468\u671f\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u4e3a\u4e86\u6b63\u786e\u5904\u7406\u8fdb\u4f4d\uff0c\u6211\u4eec\u91c7\u53d6\u4e86\u5f88\u5927\u7684\u6027\u80fd\u6539\u8fdb\u63aa\u65bd\u3002\n\u8ba9\u6211\u4eec\u5bf9\u6570\u5b57\u7cfb\u7edf\u7684\u5de5\u4f5c\u65b9\u5f0f\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6269\u5927\u53ef\u7528\u7684\u6570\u5b57\u8303\u56f4\u3002\u6211\u4eec\u5c06\u4f7f\u75280-9\u800c\u4e0d\u662f0-9\u3001A-Z\u548c*\uff1a\n(\u662f\u7684\uff0c\u6211\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u7b26\u624d\u80fd\u5f88\u597d\u5730\u8ba1\u7b97\u51fa\u6570\u5b57\u3002\u542c\u6211\u8bf4\u3002)\u3002\n\u867d\u7136\u6211\u4eec\u670937\u4f4d\u6570\u5b57\uff0c\u4f46\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u57fa\u657037\u3002\u6570\u5b57\u4ecd\u7136\u4f1a\u6709\u201c1\u201d\u3001\u201c10\u201d\u548c\u201c\u6570\u767e\u201d\u4f4d\uff0c\u5c31\u50cf\u6b63\u5e38\u7684\u57fa\u657010\u7cfb\u7edf\u4e00\u6837\u300229\u4ecd\u7136\u662f29\uff0c29+1\u4ecd\u7136\u662f30\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u78b0\u5de79\uff1a29+1\u4ee5\u4e0a\u7684\u6570\u5b57\u4e5f\u53ef\u4ee5\u5199\u62102A\u30011K\u751a\u81f3U\u3002\n\u6b64\u6280\u5de7\u4e0d\u9002\u7528\u4e8e\u6211\u4eec\u7684\u6570\u5b57\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u6570\u5b57(\u4f8b\u5982\uff0c9+W\u5c06\u9700\u8981\u8fdb\u4f4d)\uff0c\u4f46\u5982\u679c\u6211\u4eec\u8981\u6dfb\u52a0\u7684\u6570\u5b57\u662f\u89c4\u8303\u5316\u7684\uff0c\u5373\u5b83\u4eec\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f9\u6216\u66f4\u4f4e\uff0c\u5b83\u5c06\u6709\u6548\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u4efb\u4f55\u8fdb\u4f4d\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u8bb0\u6570\u6cd5\u4e2d\u6dfb\u52a0\u6700\u591a\u56db\u4e2a\u89c4\u8303\u5316\u7684\u6570\u5b57\uff1a\n999&lt\uff1b--\u53ef\u80fd\u7684\u6700\u5927\u5f52\u4e00\u53163\u4f4d\u6570\u6570\u5b57999 999+999-*&lt\uff1b--\u6709\u6548\u76843\u4f4d\u6570\u7ed3\u679c\uff0c\u65e0\u8fdb\u4f4d(\u8bf7\u8bb0\u4f4f*\u662f\u6700\u9ad8\u6570\u5b57)\u3002\n\u56e0\u6b64\uff0c\u901a\u8fc7\u5bf9\u6570\u5b57\u7cfb\u7edf\u8fdb\u884c\u4e00\u4e9b\u5de7\u5999\u7684\u8c03\u6574\uff0c\u6211\u4eec\u6b3a\u9a97\u4e86\u4e00\u4e9b\u8fdb\u4f4d\u3002\u5f53\u7136\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4ece37\u4f4d\u7684\u57fa\u657010\u7cfb\u7edf\u8f6c\u6362\u56de\u6b63\u5e38\u7684\u57fa\u657010\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89c4\u8303\u5316\u4e00\u4e2a\u6570\u5b57\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f7f\u5176\u6bcf\u4e2a\u6570\u5b57\u90fd\u57280\u52309\u4e4b\u95f4\uff1a\n\u00abDA8A1B=1409021\u6ce8\uff1aD=10+3A=10+0B=10+1\u3002\n\u6211\u4eec\u4ece\u53f3\u8fb9\u5f00\u59cb\u6807\u51c6\u5316\u4e00\u4e2a\u6570\u5b57\uff0c\u786e\u5b9a\u6bcf\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u4e2a\u201c\u5341\u201d\uff0c\u51cf\u53bb\u8fd9\u4e9b\u201c\u5341\u201d\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u8fdb\u4f4d\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002672415\u548c736606\u5b9e\u9645\u4e0a\u52a0\u8d77\u6765\u7b49\u4e8e1409021\uff0c\u6240\u4ee5\u7cfb\u7edf\u53ef\u4ee5\u5de5\u4f5c\uff01\n\u8fd9\u91cc\u7684\u5173\u952e\u89c2\u70b9\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u5c06\u8fdb\u4f4d\u4f20\u64ad\u5ef6\u8fdf\u5230\u7ed3\u675f\uff0c\u6211\u4eec\u4e0d\u80fd\u5b8c\u5168\u907f\u514d\u8fdb\u4f4d\u4f20\u64ad\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u907f\u514d\u5b83\uff0c\u5982\u679c\u6211\u4eec\u4fdd\u5b58\u4e2d\u95f4\u76f8\u52a0\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8fdb\u4f4d\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u8fc7\u5c06\u5b83\u4eec\u5168\u90e8\u4f20\u64ad\u51fa\u53bb\u3002\n\u8fdb\u4f4d\u4f20\u64ad\u662f\u6211\u4eec\u65e9\u5148\u9047\u5230\u7684\u6027\u80fd\u95ee\u9898\u7684\u6838\u5fc3\u3002\u6b63\u5982\u60a8\u73b0\u5728\u53ef\u80fd\u5df2\u7ecf\u9884\u6599\u5230\u7684\u90a3\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u6280\u672f\u6765\u5e2e\u52a9\u52a0\u901f\u5927\u6570\u8fd0\u7b97\uff01\n\u4ee5\u524d\uff0c\u7531\u4e8ex86_64\u5904\u7406\u5668\u5bf964\u4f4d\u6574\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u4e00\u4e2a256\u4f4d\u7684\u6570\u5b57\u5206\u6210\u56db\u4e2a64\u4f4d\u7684\u90e8\u5206\u3002\u7406\u89e3\u8fd9\u4e00\u70b9\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u8fd9\u4e9b\u90e8\u5206\u89c6\u4e3a\u57fa\u65702 64\u4e2d\u7684\u201c\u6570\u5b57\u201d\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6570\u5b57\u90fd\u6709\u4e00\u4e2a\u4ecb\u4e8e0\u548c2 64-1(\u5305\u62ec0\u548c2 64-1)\u4e4b\u95f4\u7684\u503c\u3002\n\u5728\u57fa\u657010\u4e2d\uff0c\u6211\u4eec\u4fdd\u6301\u57fa\u6570\u4e0d\u53d8\uff0c\u4f46\u4e3a\u4e86\u9632\u6b62\u8fdb\u4f4d\uff0c\u6211\u4eec\u6269\u5c55\u4e86\u5141\u8bb8\u7684\u4f4d\u6570\u8303\u56f4\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u80fd\u8fd9\u6837\u505a-64\u4f4d\u6574\u6570\u53ea\u6709\u8fd9\u4e48\u591a\u53ef\u80fd\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u4e0d\u80fd\u66f4\u6539\u786c\u4ef6\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f\u57fa\u6570\u7684\u5927\u5c0f\u6765\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002\n\u6211\u4eec\u4e0d\u628a256\u4f4d\u5206\u62104\u4e2a\u57fa\u65702 64\u4f4d\uff0c\u800c\u662f\u628a256\u4f4d\u5206\u62105\u4e2a\u57fa\u65702 51\u4f4d\u3002\u6bcf\u4e2a\u6570\u5b57\u7684\u8303\u56f4\u4ecd\u7136\u662f\u4ece0\u52302 64-1\uff0c\u4f46\u8f83\u5c0f\u7684\u57fa\u6570\u7ed9\u4e86\u6211\u4eec\u907f\u514d\u6570\u5b57\u9700\u8981\u8fdb\u4f4d\u6240\u9700\u7684\u7075\u6d3b\u6027\u3002\u8fd9\u79cd\u6280\u672f\u5728\u5bc6\u7801\u5b66\u6587\u732e\u4e2d\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u57fa\u65702 51\u8868\u793a\u6cd5\u201d\u3002\n\u4e0b\u9762\u662f\u6211\u4eec\u5c06256\u4f4d\u5206\u6210\u4e94\u4e2a\u80a2\u4f53(\u5373\u6570\u5b57)\u65f6\u7684\u60c5\u51b5\uff1a\n\u3002-]||[-51\u4f4d-||[-|\u3002\n\u6bcf\u4e2a\u5206\u652f\u90fd\u6709\u539f\u59cb256\u4f4d\u6570\u5b57\u768451\u4f4d(\u621652\u4f4d)\uff0c\u5269\u4e0b\u768412\u4f4d\u621613\u4f4d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u9884\u9632\u8fdb\u4f4d\u6240\u9700\u7684\u989d\u5916\u201c\u6570\u5b57\u201d\uff0c\u6709\u6548\u5730\uff0c\u6bcf\u4e2a\u5206\u652f\u7684\u6700\u9ad8\u4f4d\u88ab\u4fdd\u7559\u4f5c\u4e3a\u8ba1\u7b97\u671f\u95f4\u53d1\u751f\u7684\u4efb\u4f55\u8fdb\u4f4d\u7684\u5b58\u50a8\u3002\n\u5728\u6211\u4eec\u7684\u4ee510\u4e3a\u57fa\u6570\u7684\u793a\u4f8b\u4e2d\uff0c37\u4f4d\u5141\u8bb8\u6211\u4eec\u5728\u9700\u8981\u4f20\u64ad\u8fdb\u4f4d\u4e4b\u524d\u5c06\u6700\u591a4\u4e2a\u89c4\u683c\u5316\u6570\u5b57\u76f8\u52a0\uff1b\u5728\u57fa\u65702 51\u8868\u793a\u4e2d\uff0c2 64\u4f4d\u5141\u8bb8\u6211\u4eec\u5728\u9700\u8981\u62c5\u5fc3\u9ad813\u4f4d\u6ea2\u51fa\u4e4b\u524d\u5c06\u6700\u591a2 13\u4e2a\u89c4\u683c\u5316\u6570\u5b57\u76f8\u52a0\u3002\n\u65c1\u767d\uff1a\u4e3a\u4ec0\u4e48\u662f13\u4f4d\u800c\u4e0d\u662f12\u4f4d\uff1f\u51fa\u4e8e\u6211\u4eec\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u5ffd\u7565\u6700\u6709\u6548\u5206\u652f\u4e2d\u7684\u8fdb\u4f4d\uff0c\u5141\u8bb8\u6570\u5b57\u5728\u6ea2\u51fa\u8d85\u8fc72256-1\u65f6\u6362\u884c(\u5c31\u50cf\u5728C\u4e2d\u4f7f\u7528\u6b63\u5e38\u5927\u5c0f\u6574\u6570\u7c7b\u578b\u7684\u65e0\u7b26\u53f7\u52a0\u6cd5\u4e00\u6837)\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c0652\u4f4d\u5206\u914d\u7ed9\u6700\u6709\u6548\u5206\u652f\uff0c\u800c\u5ffd\u7565\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5b83\u5c06\u5728\u5176\u4ed6\u5206\u652f\u4e4b\u524d\u7528\u5b8c\u8fdb\u4f4d\u7a7a\u95f4\u3002\n\u5047\u8bbex\u5728A\uff0cB\uff0cC\uff0cD\uff0cE\u4e0a\u5206\u88c2(A=\u6700\u9ad8\u6709\u6548)\uff1b\u5047\u8bbey\u5728F\uff0cG\uff0cH\uff0cI\uff0cJ(F=\u6700\u9ad8\u6709\u6548)\u4e0a\u5206\u88c2\uff0c\u52a0A\uff0cF\u52a0B\uff0cG\u52a0C\uff0cH\u52a0D\uff0cI\u52a0E\uff0cJ\uff1b\u5e73\u884c\u597d\uff0c\u8036\uff01\n\u5c3d\u7ba1\u6211\u4eec\u73b0\u5728\u9700\u89815\u4e2a\u52a0\u6cd5\u800c\u4e0d\u662f4\u4e2a\u52a0\u6cd5\uff0c\u4f46\u7531\u4e8e\u7f3a\u5c11\u8fdb\u4f4d\uff0c\u52a0\u6cd5\u901f\u5ea6\u8981\u5feb\u5f97\u591a\u3002\n\u3002\u5c06D\u4e2d\u7684\u8fdb\u4f4d\u6e05\u96f6T\uff0cC\uff1b\u5c06C\u590d\u5236\u5230T shr T\uff0c51\uff1b\u79fb\u51fa\u9664\u8fdb\u4f4dAdd B\uff0cT\u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\uff1b\u5c06C\u4e2d\u7684\u8fdb\u4f4d\u6dfb\u52a0\u5230B\u548cC\uff0c0x0007FFFFFFFFFFFFF\uff1b\u5c06C mov T\uff0cB\u4e2d\u7684\u8fdb\u4f4d\u6e05\u96f6\uff1b\u5c06B\u590d\u5236\u5230T shr T\uff0c51\uff1b\u79fb\u51fa\u9664\u8fdb\u4f4dAdd A\uff0cT\u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\uff1b\u5c06B\u4e2d\u7684\u8fdb\u4f4d\u6dfb\u52a0\u5230A\u548cB\uff0c0x0007FFFFFFFFFFFFF\uff1b\u5c06\u8fdb\u4f4d\u8f93\u5165\u6e05\u96f6\u3002\n\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u4e00\u4e9b\u5feb\u901f\u800c\u80ae\u810f\u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\uff0c\u5728\u6211\u7684Haswell CPU\u4e0a\uff0c\u57fa\u65702-51\u52a0\u6cd5\u7684\u6027\u80fd\u5df2\u7ecf\u8d85\u8fc7\u57fa\u65702-64\u52a0\u6cd5\uff0c\u53ea\u9700\u89813\u6b21\u52a0\u6cd5--\u8fd9\u8fd8\u5305\u62ec\u5728\u57fa\u65702-51\u8868\u793a\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u6210\u672c\u3002\u968f\u7740\u52a0\u6cd5\u6570\u91cf\u7684\u589e\u52a0\uff0c\u6027\u80fd\u8282\u7ea6\u4f1a\u76f8\u5e94\u5730\u589e\u52a0\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u7814\u7a76\u4e86\u52a0\u6cd5\uff0c\u5c06\u8fd9\u4e00\u6280\u672f\u6269\u5c55\u5230\u51cf\u6cd5\u662f\u5f88\u7b80\u5355\u7684\uff0c\u52a0\u6cd5\u548c\u51cf\u6cd5\u7684\u4e3b\u8981\u533a\u522b\u662f\u51cf\u6cd5\u6709\u8d1f\u8fdb\u4f4d\u3002\n\u4ee5\u524d\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u80a2\u4f53(\u53ca\u5176\u8fdb\u4f4d)\u89c6\u4e3a\u65e0\u7b26\u53f7\u8fdb\u4f4d\uff0c\u4e3a\u4e86\u652f\u6301\u51cf\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u80a2\u4f53\u89c6\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5141\u8bb8\u5355\u4e2a\u6570\u5b57\u4e3a\u6b63\u6216\u8d1f\uff0c\u8fd9\u6837\u6bcf\u6761\u80a2\u4f53\u5c31\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a\u6b63\u8fdb\u4f4d\u6216\u8d1f\u8fdb\u4f4d\u3002\n\u8fd9\u6837\u505a\u7684\u4e00\u4e2a\u526f\u4f5c\u7528\u662f\uff0c\u6bcf\u6761\u80a2\u4f53\u7684\u6700\u9ad8\u6709\u6548\u4f4d\u73b0\u5728\u88ab\u4fdd\u7559\u4e3a\u7b26\u53f7\u4f4d\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728\u5f52\u4e00\u5316\u4e4b\u95f4\u6267\u884c\u7684\u64cd\u4f5c\u6b21\u6570\u4ece213\u51cf\u5c11\u5230212\uff0c\u8fd9\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u4e00\u4e2a\u5c0f\u727a\u7272\u3002\n\u6211\u89c9\u5f97\u8fd9\u9879\u6280\u672f\u76f8\u5f53\u5438\u5f15\u4eba\uff0c\u56e0\u4e3a\u5b83\u975e\u5e38\u8fdd\u53cd\u76f4\u89c9\uff1a\u901a\u8fc7\u8de8\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u548c\u4f7f\u7528\u66f4\u591a\u7684\u64cd\u4f5c\u5206\u5e03\u6570\u636e\uff0c\u6027\u80fd\u5b9e\u9645\u4e0a\u5f97\u5230\u4e86\u63d0\u9ad8\u3002\u6211\u5e0c\u671b\u60a8\u548c\u6211\u4e00\u6837\u89c9\u5f97\u5b83\u5f88\u6709\u8da3\uff01", "note_en": "Starting from the \u201cones\u201d position, we add 6 + 6 = 12, write down a 2 and carry a 1.We proceed to the left, one position at a time, until there are no more digitsto add.\n When implementing addition for large integers (e.g. 2 64 and above), it\u2019s common to writecode that looks quite similar to this algorithm.Interestingly, there\u2019s a straightforward trick that can speed up thisprocess enormously on modern CPUs.\n But first, a question: why do we start long addition with the \u201cones\u201d?Why not start on the left?\n The answer, of course, is the carries.We can\u2019t figure out for sure what a given digit of the answer will beuntil we\u2019ve completed all of the additions to the right of that digit.\n  6 + 3 = 9. So the first digit is 9. 8 + 4 = 12. OK, the second digit is 2\u2026 but carry a 1, so the first digitwas actually 9 + 1 = 10\u2026 now carry back  that 1\u2026\n For mental math, this isn\u2019t too bad (and some people actually prefer itwhen working with small enough numbers).As an algorithm, however, this approach has some fundamental limitations thatbecome clear when working with larger numbers.Most importantly, because the later parts of the computation rely oninformation from the earlier parts of the computation,it\u2019s hard to split up and parallelize the work.\n  Computers don\u2019t work in base 10, of course.Instead, modern desktop and server CPUs expose an interface for operating on(for the most part) 64-bit integers.\n ; Add the 64-bit value in B to the 64-bit value in A add  A ,  B ; Note: I&#39;ll use letters instead of real register names to keep things simple\n As long as our numbers fit within a single 64-bit value, things are easy.But what if we want to add, say, two 256-bit integers,  x and  y?\n The obvious solution would be to break up each 256-bit number into four 64-bitpieces (commonly referred to as \u201climbs\u201d).Place the highest 64 bits of  x into register A,the next 64 bits into register B,and so on for registers C and D.Do the same for  y with registers E, F, G, H.\n   But wait, this might give us the wrong result!If one of the last three additions overflow,then we need to \u201ccarry\u201d that extra 1 up to the next 64-bit piece.Oh hey, does that sound familiar?\n Fortunately, x86 has a dedicated instruction for this called \u201cadd with carry\u201d. adc will automatically check if the previous operation overflowed, adding 1if needed.Here\u2019s how the proper code would look:\n add  D ,  H adc  C ,  G  ; include carry from previous op adc  B ,  F  ; include carry from previous op adc  A ,  E  ; include carry from previous op\n Just like with long addition in base 10,we start with the least-significant \u201cdigits\u201d (D and H)and work our way up to the most-significant \u201cdigits\u201d (A and E),carrying 1s as needed along the way.\n  Interestingly, our fixed code is slower than the original (incorrect) code.Much slower. Why is this?\n The first reason is that  adc is just slower to execute than a normal  add onmost popular x86 CPUs.Since  adc has a third input (the carry flag),it\u2019s a more complex instruction than  add.It\u2019s also used less often than  add,so there is less incentive for CPU designers to spend chip area on optimizing adc performance.\n The second reason is more interesting.Let\u2019s look at the Intel Haswell microarchitecture as an example.\n On a Haswell CPU, a single  add instruction takes 1 cycle to execute.However, in ideal conditions, Haswell CPUs can execute up to 4  addinstructions in a single cycle.How is this possible? Parallelism.Modern processors look ahead at what instructions are coming up and try toschedule them so that they can be executed in parallel whenever possible.Since Haswell CPUs have 8 execution ports, and 4 of those ports can execute aninteger  add instruction, a Haswell processor can execute up to 4  addinstructions at once.\n In our original adding code, all 4  add instructions were independent of oneanother, so it was straightforward for the processor to run them in parallel. Now, with  adc, each instruction depends on an output from the previousinstruction.The processor has no choice but to execute the instructions serially, one afterthe other, instead of in parallel.\n The performance difference is even more dramatic if we use SIMD (SingleInstruction, Multiple Data) instructions.For example, a single  vpaddq (Vector Packed Add Quadword) instruction doesfour 64-bit adds simultaneously.Combine that with the fact that Haswell processors can execute two  vpaddqsper cycle, and you can see that we\u2019re taking a serious performance hitin order to handle carries properly.\n   Let\u2019s make some changes to how the number system works.First, we\u2019ll extend the range of digits available.Instead of 0-9, we will use 0-9, A-Z, and *:\n  (Yeah, I needed an extra character to make the numbers work out nicely. Bearwith me.)\n Although we have 37 digits, we are  not using base 37.Numbers will still have \u201cones\u201d, \u201ctens\u201d, and \u201chundreds\u201d positions,just like a normal base 10 system.29 still means 29, and 29 + 1 is still 30.The only difference is thatdigits happen to be capable of counting past 9:29 + 1 could also be written as 2A, 1K, or even U.\n   This trick won\u2019t work for all numbers in our number system (e.g. 9 + W willneed a carry),but it will work if the numbers we are adding are normalized, i.e. all of their digits are 9 or below.In fact, we can add up to four normalized numbers in this notation before anycarries are possible:\n 999 &lt;-- largest possible normalized 3-digit number 999 999+ 999----- *** &lt;-- valid 3-digit result, no carries (recall that * is the highest digit)\n So, with some clever tweaks to the number system, we\u2019ve cheated our way out ofsome carries.Of course, at some point, we will need to convert from the37-digit base 10 system back to normal base 10.We can do that by  normalizing a number such that each of its digits isbetween 0 and 9:\n \u00b9\u00b9 \u00b9 \u00b9 DA8A1B= 1409021note:D = 10 + 3A = 10 + 0B = 10 + 1\n We normalize a number starting at the right,determining how many \u201ctens\u201d are in each digit,subtracting those \u201ctens\u201d,and carrying them to the next digit.672415 and 736606 do in fact sum to 1409021, so the system works!\n The key insight here is that we can use this technique to delay carrypropagation until the end.We can\u2019t avoid carry propagation altogether, but we can avoid it temporarily.If we save up the carries that occur during the intermediate additions,we can propagate them all in one go at the end.\n  Carry propagation was at the heart of the performance problems we encountered earlier.As you\u2019ve probably anticipated by now, we can use this technique to help speedup big number arithmetic!\n Previously, we split a 256-bit number into four 64-bit pieces,since x86_64 processors operate on 64-bit integers.One way to understand this is to view the pieces as \u201cdigits\u201din base 2 64, since each digit has a valuebetween 0 and 2 64 - 1 (inclusive).\n In base 10, we kept the same base, but extended the range of digits that wereallowed in order to prevent carries from occurring.Unfortunately, we can\u2019t do that here \u2013 a 64-bit integer only has so manypossible values, and we can\u2019t change the hardware.Instead, we can get the same effect by reducing the size of the base.\n Instead of splitting 256 bits into four base 2 64 digits,we\u2019ll split 256 bits into five base 2 51 digits.Each digit can still range from 0 to 2 64 - 1,but the smaller base gives us the flexibility needed to prevent digits fromneeding a carry.This technique is generally referred to as \u201cradix 2 51representation\u201d in the cryptography literature.\n Here\u2019s how it will look when we split 256 bits across five limbs (i.e.digits):\n | [--------------------- 52 bits --------------------]|| [-------------------- 51 bits --------------------]|| [-------------------- 51 bits --------------------]|| [-------------------- 51 bits --------------------]|| [-------------------- 51 bits --------------------]|\n Each limb has 51 (or 52) bits of the original 256-bit number.The remaining 12 or 13 bits give us the extra \u201cdigits\u201d we need for preventingcarries.Effectively, the highest bits of each limb are reserved as storage for anycarries that occur during the computation.\n In our base 10 example,37 digits allowed us to add up to four normalized numbers before needing topropagate carries.In radix 2 51 representation,2 64 digits allow us to add up to 2 13 normalizednumbers before we need to worry about the high 13 bits overflowing.\n Aside: Why 13 bits instead of 12?For our purposes, we\u2019re going to ignore the carries in the most significant limb,allowing numbers to wrap when they overflow past 2 256 - 1 (just likehow unsigned addition works in C with normal size integer types).As a result, we can assign 52 bits to the most significant limb and ignore thefact that it will run out of room for carries before the other limbs do.\n  ; Assume x is split across A, B, C, D, E (A = most significant) ; and assume y is split across F, G, H, I, J (F = most significant) add  A ,  F add  B ,  G add  C ,  H add  D ,  I add  E ,  J ; Parallel goodness, yay!\n Despite the fact that we now need 5  adds instead of 4,addition is much faster due to the lack of carries.\n  ; Assume x is split across A, B, C, D, E (A = most significant) ; Register T is for temporary storage mov  T ,  E  ; Copy E into T shr  T ,  51  ; Shift out everything except the carries add  D ,  T  ; Add carries from E into D and  E ,  0x0007FFFFFFFFFFFF  ; Zero out the carries in E mov  T ,  D  ; Copy D into T shr  T ,  51  ; Shift out everything except the carries add  C ,  T  ; Add carries from D into C and  D ,  0x0007FFFFFFFFFFFF  ; Zero the carries in D mov  T ,  C  ; Copy C into T shr  T ,  51  ; Shift out everything except the carries add  B ,  T  ; Add carries from C into B and  C ,  0x0007FFFFFFFFFFFF  ; Zero the carries in C mov  T ,  B  ; Copy B into T shr  T ,  51  ; Shift out everything except the carries add  A ,  T  ; Add carries from B into A and  B ,  0x0007FFFFFFFFFFFF  ; Zero the carries in B and  A ,  0x000FFFFFFFFFFFFF  ; Zero the carries in A\n Amazingly, some quick and dirty benchmarks show that radix 2 51 addition already outperforms radix 2 64addition on my Haswell CPU for as few as three additions \u2013 and that\u2019sincluding the cost of converting to and fromradix 2 51 representation.The performance savings scale up appropriately as the number of additionsincreases.\n  So far we\u2019ve only looked at addition.It\u2019s straightforward though to extend this technique to subtraction.The main difference between addition and subtraction is that subtraction has negative carries.\n Previously, we treated all limbs (and their carries) as unsignedintegers.To support subtraction, we can treat limbs as  signed integers,allowing individual digits to be either positive or negative.With this change, each limb can store either a positive or negative carry.\n A side effect of this is that the most significant bit of each limb is nowreserved as a sign bit.This lowers the number of operations we can perform between normalizations from2 13 to 2 12 \u2013 a small sacrifice in most cases.\n I find this technique rather fascinating because of how counterintuitive it is:by spreading data across more registers and using more operations, performanceis actually improved.I hope you found it as interesting as I did!", "posttime": "2020-05-29 23:41:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u6570,radix,\u8fdb\u4f4d", "title": "\u57fa\u65702^51\u7684\u628a\u620f", "title_en": "The radix 2^51 trick", "transed": 1, "url": "https://www.chosenplaintext.ca/articles/radix-2-51-trick.html", "via": "", "real_tags": ["\u57fa\u6570", "radix", "\u8fdb\u4f4d"]}, {"category": "", "categoryclass": "", "imagename": "7c1d625302748dbc16b708502eba8b0e.png", "infoid": 1004264, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u4f7f\u7528Gmail\u6216\u9891\u7e41\u53d1\u9001\u90ae\u4ef6\u5217\u8868\u7535\u5b50\u90ae\u4ef6\uff0c\u60a8\u53ef\u80fd\u77e5\u9053Gmail\u6709\u4e00\u4e2a\u5185\u8054\u7684\u81ea\u52a8\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u3002\u5982\u679c\u4f60\u70b9\u51fb\u8fd9\u4e2a\u6309\u94ae\uff0cGmail\u5c31\u4f1a\u795e\u5947\u5730\u5c06\u4f60\u4ece\u8be5\u90ae\u4ef6\u5217\u8868\u4e2d\u53d6\u6d88\u8ba2\u9605\u3002\n\u6211\u4ee5\u524d\u5728\u63a8\u7279\u4e0a\u8c08\u8fc7\u8fd9\u4ef6\u4e8b\uff0c\u4f46\u5c3d\u7ba1\u8fd9\u4f3c\u4e4e\u6709\u8fdd\u76f4\u89c9\uff0c\u4f46\u5141\u8bb8\u4eba\u4eec\u8f7b\u677e\u53d6\u6d88\u8ba2\u9605\u662f\u4fdd\u6301\u5065\u5eb7\u90ae\u4ef6\u5217\u8868\u7684\u6700\u4f73\u65b9\u5f0f\u3002\n\u6240\u4ee5\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u786e\u5207\u5730\u89e3\u91ca\u4e00\u4e0bGmail\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5982\u679c\u4f60\u662f\u90ae\u4ef6\u5217\u8868\u7684\u6240\u6709\u8005\uff0c\u5982\u4f55\u786e\u4fdd\u5b83\u603b\u662f\u51fa\u73b0\u5728\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\u3002\n\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u63d0\u4f9b\u9000\u8ba2\u94fe\u63a5\uff0c\u5f53\u4f7f\u7528\u5f97\u5f53\u65f6\uff0c\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba9\u6bcf\u79cd\u7c7b\u578b\u7684\u5ba2\u6237\u7aef\u8f7b\u677e\u9000\u8ba2\u6765\u76f8\u4e92\u8865\u5145\u3002\u4ece\u6700\u660e\u663e\u7684(\u901a\u5e38\u4e5f\u662f\u4ee4\u4eba\u6c14\u6124\u7684)..\u3002\n\u4f60\u968f\u5904\u53ef\u89c1\u7684\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u5728\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u4e2d\u76f4\u63a5\u63d0\u4f9b\u4e00\u4e2a\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\uff0c\u901a\u5e38\u9690\u85cf\u5728\u7535\u5b50\u90ae\u4ef6\u7684\u5e95\u90e8\u3002\nGmail\u4f3c\u4e4e\u4f1a\u5904\u7406\u5176\u4e2d\u7684\u4e00\u4e9b\u94fe\u63a5\uff0c\u7279\u522b\u662f\u5f53\u94fe\u63a5\u5305\u542b\u201c\u53d6\u6d88\u8ba2\u9605\u201d\u4e00\u8bcd\u65f6\u3002\u5728\u4f7f\u7528\u4e0a\u8ff0\u60c5\u51b5\u5355\u51fbGmail\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u65f6\uff0c\u5c06\u663e\u793a\u4ee5\u4e0b\u63d0\u793a\uff1a\n\u4f46\u6211\u53d1\u73b0\uff0c\u5982\u679c\u94fe\u63a5\u5305\u542b\u4e0d\u5bfb\u5e38\u7684\u63aa\u8f9e\u6216\u683c\u5f0f\uff0c\u90a3\u4e48Gmail\u5c31\u65e0\u6cd5\u6b63\u786e\u627e\u5230\u5b83\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u89e3\u91ca\u662f\uff0c\u4ed6\u4eec\u6b63\u5728\u4f7f\u7528\u4e00\u7ec4\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u89e3\u6790\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9-\u8fd9\u662f\u4e00\u79cd\u76f8\u5f53\u8106\u5f31\u7684\u65b9\u6cd5\u3002\n\u5728\u6211\u4eec\u5c1d\u8bd5\u7684\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u5b9e\u9645\u8bbf\u95ee\u8be5\u94fe\u63a5\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9650\u5236\u4e86\u5b83\u7684\u5b9e\u7528\u6027\u3002\u8fd9\u6bd4\u627e\u5230\u5e76\u70b9\u51fb\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u5c0f\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u8981\u7b80\u5355\u4e0d\u4e86\u591a\u5c11\u3002\n(\u8fd9\u4e00\u70b9\u73b0\u5728\u53ef\u80fd\u5df2\u7ecf\u5f88\u660e\u663e\u4e86--\u6211\u786e\u5b9e\u5bf9\u9690\u85cf\u5728\u7535\u5b50\u90ae\u4ef6\u9875\u811a\u5e95\u90e8\u7684\u5fae\u5c0f\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u6709\u4e00\u4e9b\u5f3a\u70c8\u7684\u611f\u89c9\uff0c\u4f46\u8fd9\u662f\u6539\u5929\u518d\u8ba8\u8bba\u7684\u8bdd\u9898\u3002)\u3002\n\u66f4\u53ef\u9884\u6d4b\u7684\u65b9\u6cd5\u662f\u4f7f\u7528List-Unscribe\u62a5\u5934(RFC 2369)\u3002\u6807\u9898\u9644\u52a0\u5728\u7535\u5b50\u90ae\u4ef6\u7684\u5143\u6570\u636e\u4e0a\uff0c\u65e8\u5728\u63d0\u4f9b\u4ee5\u673a\u5668\u53ef\u8bfb\u683c\u5f0f\u53d6\u6d88\u8ba2\u9605\u7684\u65b9\u6cd5\u3002\n\u6807\u5934\u53ef\u4ee5\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u683c\u5f0f\uff0c\u4f46\u6700\u5e38\u89c1\u7684\u662f\u63d0\u4f9b\u4e00\u4e2amailto\u548cURL\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u50cfSendGrid\u6216Mailchinp\u8fd9\u6837\u7684\u90ae\u4ef6\u5217\u8868\u63d0\u4f9b\u5546\uff0c\u90a3\u4e48\u4ed6\u4eec\u5e94\u8be5\u5df2\u7ecf\u4e3a\u60a8\u5c06\u8fd9\u4e9b\u6807\u9898\u63d2\u5165\u5230\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0c\u56e0\u6b64\u60a8\u4e0d\u9700\u8981\u4e3a\u6b64\u505a\u4efb\u4f55\u989d\u5916\u7684\u64cd\u4f5c\u3002\n\u6d4b\u8bd5\u8868\u660e\uff0cGmail\u4f3c\u4e4e\u4f1a\u504f\u7231mailto\u65b9\u6cd5\uff0c\u5411\u63d0\u4f9b\u7684\u5730\u5740\u53d1\u9001\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u60a8\u7684\u5df2\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u6587\u4ef6\u5939\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u8be5\u6587\u4ef6\u5939\u5c06\u5305\u542b\u5982\u4e0b\u9879\u76ee\uff1b\n\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u6bd5\u7adf\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u624d\u662fGmail\u7684\u5f3a\u9879\u3002\u7136\u800c\uff0c\u6211\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u7684\u6709\u6548\u6027\u6709\u4e9b\u6000\u7591\uff0c\u6216\u8005\u53ea\u662f\u89c9\u5f97\u592a\u5bb9\u6613\u4e86\u3002\n\u636e\u6211\u6240\u77e5\uff0cGmail\u5bf9\u5f85\u5217\u8868\u4e2d\u7684URL-\u53d6\u6d88\u8ba2\u9605\u6807\u9898\u4e0e\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u4e2d\u7684unsubscrbe\u94fe\u63a5\u76f8\u540c\uff0c\u8fd9\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u662f\u76f8\u540c\u7684URL\u3002\n\u5217\u8868-\u53d6\u6d88\u8ba2\u9605\u6216\u5185\u5bb9\u94fe\u63a5\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u628a\u4f60\u5e26\u5230\u4e00\u4e2a\u9700\u8981\u989d\u5916\u6b65\u9aa4\u7684\u9875\u9762\uff0c\u6bd4\u5982\u767b\u5f55\u6216\u8f93\u5165\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u4e0d\u7ba1\u4f60\u5bf9\u6b64\u6709\u4ec0\u4e48\u611f\u89c9(\u6211\u975e\u5e38\u4e0d\u559c\u6b22\u5b83)\uff0c\u5b83\u8ba9\u4e8b\u60c5\u53d8\u5f97\u975e\u5e38\u56f0\u96be\uff0c\u5c31\u50cfGmail\u8bd5\u56fe\u505a\u7684\u90a3\u6837\uff0c\u8ba9\u53d6\u6d88\u8ba2\u9605\u53d8\u5f97\u975e\u5e38\u56f0\u96be\u3002\n\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u8f83\u65b0\u53d6\u6d88\u8ba2\u9605\u6807\u51c6\u62a5\u5934\uff0c\u79f0\u4e3aList-Unscribe-Post\uff0c\u5b83\u6307\u5b9a\u4e86\u5355\u8bf7\u6c42\u53d6\u6d88\u8ba2\u9605\u529f\u80fd(RFC 8058)\u3002\u5982\u679c\u7535\u5b50\u90ae\u4ef6\u5305\u542b\u6b64\u6807\u9898\uff0c\u5219\u53ea\u9700\u5411URL\u53d1\u9001\u4e00\u4e2aPOST\u8bf7\u6c42\u5373\u53ef\u6fc0\u6d3b\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u6bd4LIST-\u53d6\u6d88\u8ba2\u9605\u5728\u91ce\u5916\u770b\u5230\u7684\u8981\u5c11\u5f97\u591a\u3002\u6211\u5b9e\u9645\u4e0a\u53ea\u80fd\u5728\u6211\u7684\u6536\u4ef6\u7bb1\u91cc\u627e\u5230\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50(\u5411Substack\u558a\u51fa\u6765\uff0c\u5e72\u5f97\u597d\u7684\u670b\u53cb\u4eec)\u3002\n\u636e\u6211\u6240\u77e5\uff0cGmail\u5bf9\u8fd9\u4e2a\u6807\u9898\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u8986\u76d6\u6240\u6709\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u90a3\u4e48\u5728\u4f60\u7684\u90ae\u4ef6\u5217\u8868\u4e2d\u4f7f\u7528\u5b83\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\u6211\u4eec\u7684\u9000\u8ba2\u9009\u9879\u5230\u6b64\u7ed3\u675f\u3002\u5982\u679c\u4f60\u6b63\u5728\u8fd0\u884c\u4e00\u4e2a\u90ae\u4ef6\u5217\u8868\uff0c\u5e76\u4e14\u60f3\u8ba9\u4f60\u7684\u6536\u4ef6\u4eba\u5f88\u5bb9\u6613\u53d6\u6d88\u8ba2\u9605(\u4f60\u5e94\u8be5)\uff0c\u90a3\u4e48\u5b9e\u65bd\u8fd9\u4e9b\u4e8b\u60c5\u5c06\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8865\u5145\uff0c\u5e76\u4ece\u957f\u8fdc\u6765\u770b\u5e2e\u52a9\u4f60\u4fdd\u6301\u4e00\u4e2a\u5065\u5eb7\u7684\u5217\u8868\uff1a\n\u4f7f\u7528\u7b80\u5355\u7684\u8bed\u8a00\uff0c\u4ee5\u6e05\u6670\u6613\u8bfb\u7684\u65b9\u5f0f\u5728\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u4e2d\u5305\u542b\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u3002\u5728\u94fe\u63a5\u4e2d\u4f7f\u7528\u201c\u53d6\u6d88\u8ba2\u9605\u201d\u4e00\u8bcd\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\u3002\n\u5305\u62ec\u5177\u6709mailto\u548cURL\u5217\u8868-\u53d6\u6d88\u8ba2\u9605\u62a5\u5934\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u90ae\u4ef6\u670d\u52a1\uff0c\u8bf7\u786e\u4fdd\u5b83\u4eec\u4f1a\u81ea\u52a8\u5305\u542b\u6b64\u5185\u5bb9\u3002\u4f60\u53ef\u4ee5\u68c0\u67e5\u7535\u5b50\u90ae\u4ef6\u7684\u6765\u6e90\u6765\u505a\u5230\u8fd9\u4e00\u70b9-\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u6307\u5357\u3002\n\u6211\u53d1\u73b0\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0cGmail\u4f3c\u4e4e\u4e0d\u4f1a\u663e\u793a\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\uff0c\u76f4\u5230\u4f60\u6536\u5230\u51e0\u5c01\u6765\u81ea\u7279\u5b9a\u53d1\u4ef6\u4eba\u7684\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u4f46\u4f3c\u4e4e\u8868\u73b0\u5f97\u76f8\u5f53\u4e0d\u53ef\u9884\u6d4b\u3002\n\u53e6\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u7535\u5b50\u90ae\u4ef6\uff0c\u5b83\u53ea\u662f\u76f4\u63a5\u6ca1\u6709\u663e\u793a\u6309\u94ae\uff0c\u6211\u627e\u4e0d\u5230\u4e00\u4e2a\u89e3\u91ca\u3002\u4e5f\u8bb8\u5728\u5e55\u540e\u6709\u4e00\u4e9b\u989d\u5916\u7684\u6b65\u9aa4\u5728\u8fdb\u884c\uff0c\u6216\u8005\u6211\u9057\u6f0f\u4e86\u4ec0\u4e48\u3002\n\u5982\u679c\u60a8\u77e5\u9053\u8fd9\u4e24\u4e2a\u672a\u77e5\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u8bf7\u5728HN\u5e16\u5b50\u4e0a\u544a\u8bc9\u6211\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u4fe1\u4efb\u60a8\uff1a)\u3002\n\u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u4e00\u79cd\u66f4\u6709\u6548\u7684\u6279\u91cf\u53d6\u6d88\u8ba2\u9605\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u6211\u8fd0\u884c\u4e00\u9879\u540d\u4e3a\u201c\u8ba9\u6211\u4e00\u4e2a\u4eba\u5446\u7740\u201d\u7684\u670d\u52a1\u3002\u6709\u4e86\u5b83\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u5730\u65b9\u770b\u5230\u6240\u6709\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u53ea\u9700\u70b9\u51fb\u4e00\u4e0b\u5c31\u53ef\u4ee5\u53d6\u6d88\u8ba2\u9605\u3002\n\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u5217\u51fa\u7684\u6240\u6709\u65b9\u6cd5\u4ee5\u53ca\u66f4\u591a\u7684\u65b9\u6cd5\u6765\u53d6\u6d88\u8ba2\u9605\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6bd4Gmail\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u66f4\u6709\u6548\u3002)\u3002\n\u514d\u8d39\u8bd5\u7528\u4e00\u4e0b", "note_en": "If you use Gmail or frequently send mailing list emails you probably know that Gmail has an inline automatic unsubscribe button. If you hit this button then Gmail magically unsubscribes you from that mailing list.\n  I&#39;ve spoken about this before  on Twitter but although it seems counterintuative, allowing people to easily unsubscribe is  the best  way to maintain a healthy mailing list.\n So in this post I want to disect exactly how the Gmail unsubscribe button works, and if you&#39;re a mailing-list owner, how to make sure it  always shows up for your emails.\n  There are a few ways to provide unsubscribe links, when used properly they compliment each other by letting every type of client unsubscribe easily. Starting with the most obvious (and often infuriating)...\n  The most common method you&#39;ll see everywhere is to provide an unsubscribe link directly within the email content, usually hidden away at the bottom of the email.\n  Gmail seems to handle some of these links, specifically when the link contains the word &#34;Unsubscribe&#34;. \u00a0Clicking the Gmail unsubscribe link using the case above shows the following prompt:\n  But I found if the link contains unusual wording or formatting then Gmail doesn&#39;t find it correctly. A likely explanation is they&#39;re using a set of regular expressions to parse the email content - quite a brittle approach.\n You&#39;re also still required to actually visit the link in most cases we tried, which limits it&#39;s usefulness somewhat. It&#39;s barely easier than finding and clicking the small unsubscribe link in the email.\n (It&#39;s probably obvious by now - I do have some strong feelings about tiny unsubscribe links skulking right at the bottom of email footers, but that&#39;s a topic for another day.)\n   A more predictable approach is to use the  List-Unsubscribe header ( RFC 2369). Attached to the metadata of an email, the header is designed to provide the method to unsubscribe in a machine readable format.\n  The header can have a number of different formats, but the most common is to provide a  mailto and URL like this:\n  If you&#39;re using a mailing list provider such as Sendgrid or Mailchimp then they should already insert these headers into the email for you, so you shouldn&#39;t need to do anything extra with this.\n It appears from testing that Gmail will favour the  mailto method, sending an email to the address provided. You can verify this by checking your sent email folder, which will contain items like this;\n  This is by far the simplest approach, sending an email is what Gmail is good at after all. However, I&#39;m somewhat sceptical of the effectiveness of this method, or maybe it just feels too easy.\n As far as I can tell Gmail treats URLs in the List-Unsubscribe header identically to unsubscrbe links in the content of emails, which makes sense as they should be the same URL in most cases.\n  One problem with List-Unsubscribe or content links is they could take you to a page that requires extra steps, such as logging in or entering your email address. Despite how you feel about this (I dislike it a lot), it makes things very difficult to automate an unsubscribe like Gmail is trying to do.\n However, there&#39;s a newer unsubscribe standard header called  List-Unsubscribe-Post that designates  single-request unsubscribe functionality ( RFC 8058). If an email contains this header then the unsubscribe link can simply be activated by sending a single POST request to the URL.\n  Unfortunately it&#39;s much less common than List-Unsubscribe to see in the wild. I could actually only find one example of this in my inbox (shout out to  Substack, nice work folks).\n As far as I can tell Gmail does nothing with this header, but it&#39;s a nice-to-have on your mailing list if you want to cover all the bases.\n  That about wraps it up for our unsubscribe options. If you&#39;re running a mailing list and want to make it easy for your recipients to unsubscribe (you should), then implementing these things will be a great addition and help you maintain a healthy list in the long run:\n Include an unsubscribe link in the content of the email in a clear, legible way, using simple language. Using the word &#34;Unsubscribe&#34; in the link is probably a good idea.\n Include a List-Unsubscribe header with a mailto and URL. If you&#39;re using a mail service, make sure they are including this automatically. You can check the source of an email to do this - here&#39;s a guide on how to do that.\n   One extra thing I found out was that Gmail doesn&#39;t seem to show the unsubscribe button until you&#39;ve received a few emails from a particular sender. This makes sense I suppose, but seemed to behave quite unpredicably.\n Also for some emails it just straight up doesn&#39;t show the button and I couldn&#39;t find an explanation. Perhaps there&#39;s some extra step going on behind the scenes or something I&#39;m missing.\n If you know the answer to either of these unknowns then let me know on the  HN thread and I&#39;ll credit you here :)\n  If you&#39;re looking for a more effective way to unsubscribe in bulk then I run a service called  Leave Me Alone. With it you can see all your mailing lists in one place and unsubscribe from them with a single click.\n  We use all the methods listed above and more to unsubscribe, meaning we&#39;re much more effective than the Gmail unsubscribe button ;)\n  Try it out for free", "posttime": "2020-05-29 23:40:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d6\u6d88,unsubscribe,\u7535\u5b50\u90ae\u4ef6", "title": "Gmail\u53d6\u6d88\u8ba2\u9605\u6309\u94ae\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f", "title_en": "How does the Gmail unsubscribe button work?", "transed": 1, "url": "https://blog.leavemealone.app/how-does-the-gmail-unsubscribe-button-work/", "via": "", "real_tags": ["\u53d6\u6d88", "\u7535\u5b50\u90ae\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "213a6e0d6c3c2b3c81673b0feee73e3f.jpg", "infoid": 1004263, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u7684\u865a\u62df\u73b0\u5b9e(VR)\u4f53\u9a8c\u6218\u4e89\u9057\u9ab8\u5c06\u89c2\u4f17\u5e26\u5230\u4e86\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u7684\u524d\u7ebf\uff0c\u5728\u6240\u6709\u7684\u6ce5\u6cde\u548c\u5927\u5c60\u6740\u4e2d\u3002\u672c\u5468\uff0cMicroProse\u5ba3\u5e03\u4e86\u5b83\u7684\u7b2c\u4e00\u4e2aVR\u6e38\u620f\uff0c\u4ee5Might Eight\u7684\u5f62\u5f0f\uff0c\u5728\u4e8c\u6218\u7684\u5929\u7a7a\u4e2d\u5c06\u591a\u8fbe10\u540d\u73a9\u5bb6\u653e\u5165\u4e00\u67b6B-17\u8f70\u70b8\u673a\u3002\n\u5982\u679cMicroProse\u8fd9\u4e2a\u540d\u5b57\u542c\u8d77\u6765\u50cf\u662f\u6765\u81ea\u8fc7\u53bb\u7684\u7206\u70b8\uff0c\u90a3\u4e48\u4f60\u5c31\u662f\u5bf9\u7684\u3002\u8be5\u5de5\u4f5c\u5ba4\u572820\u4e16\u7eaa80\u5e74\u4ee3\u548c90\u5e74\u4ee3\u4ee5\u5927\u91cf\u7684\u6807\u9898\u9009\u62e9\u800c\u95fb\u540d\uff0c\u572821\u4e16\u7eaa\u521d\u8d70\u4e0a\u4e86\u6e21\u6e21\u9e1f\u7684\u9053\u8def\u3002\u76f4\u5230\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u8be5\u54c1\u724c\u4ece\u9057\u5fd8\u4e2d\u6062\u590d\u8fc7\u6765\uff0c\u53d1\u5e03\u4e86\u4e09\u6b3e\u89c6\u9891\u6e38\u620f\uff1a\u7279\u9063\u90e8\u961f\u6d77\u519b\u4e0a\u5c06(Task Force Admiral)\u3001\u7b2c\u4e8c\u9635\u7ebf(Second Front)\u548c\u6d77\u6d0b\u529b\u91cf(Sea Power)\u3002\u7d27\u968f\u5176\u540e\u7684\u662f\u672c\u5468\u7684\u7b2c8\u540d\u3002\nMight Eight\u4e13\u4e3aVR\u8bbe\u8ba1-\u4f46\u4e5f\u53ef\u4ee5\u5728\u6ca1\u6709VR\u8033\u673a\u7684\u60c5\u51b5\u4e0b\u64ad\u653e-Might Eight\u5c06\u662fB-17\u98de\u884c\u5821\u5792\uff1aMight Eight(2000)\u7684\u91cd\u542f\uff0c\u5141\u8bb8\u73a9\u5bb6\u5728\u6267\u884c\u5927\u80c6\u4efb\u52a1\u7684\u540c\u65f6\u9a7e\u9a76\u8f70\u70b8\u673a\u3001\u64cd\u4f5c\u67aa\u652f\u548c\u6295\u63b7\u70b8\u5f39\u3002\n\u8fd9\u4e2a\u6e38\u620f\u7684\u8bbe\u8ba1\u662f\u5408\u4f5c\u7684\uff0c\u5141\u8bb810\u540d\u73a9\u5bb6\u4e00\u8d77\u5de5\u4f5c\uff0c\u8ba9\u98de\u673a\u4fdd\u6301\u5728\u7a7a\u4e2d\uff0c\u5e76\u8ba9\u5b83\u56de\u5bb6\u80dc\u5229\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u8ba9\u4eba\u7c7b\u73a9\u5bb6\u5750\u6ee1\u6240\u6709\u7684\u5ea7\u4f4d\uff0c\u4eba\u5de5\u667a\u80fd\u673a\u7ec4\u4eba\u5458\u5c06\u80fd\u591f\u4ecb\u5165\u3002\u7531\u4e8e\u89d2\u8272\u7684\u6df7\u5408\uff0c\u5c06\u4f1a\u6709\u76f8\u5f53\u591a\u7684\u6e38\u620f\u6df7\u5408\uff0c\u9a7e\u9a76\u6216\u526f\u9a7e\u9a76\u8fd9\u4e2a\u82cd\u8747\u5821\u5792\uff0c\u5e2e\u52a9\u673a\u7ec4\u6210\u5458\u901a\u8fc7\u65e5\u591c\u7a81\u88ad\uff0c\u76d1\u63a7\u65e0\u7ebf\u7535\u548c\u901a\u4fe1\uff0c\u4ee5\u53ca\u51fb\u843d\u654c\u4eba\u7684\u6218\u6597\u673a\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u53d1\u5e03\u6e38\u620f\u7247\u6bb5\uff0c\u4f46\u4eceMicroProse\u516c\u5e03\u7684\u4fe1\u606f\u6765\u770b\uff0cMight Eight\u5c06\u662f\u4e00\u6b21\u4e0e\u771f\u5b9e\u4e16\u754c\u975e\u5e38\u76f8\u4f3c\u7684\u6fc0\u70c8\u4f53\u9a8c\u3002\u800c\u4e14\uff0c\u5f53B-24\u89e3\u653e\u8005\u5c06\u9732\u9762\u65f6\uff0c\u5c06\u4e0d\u4ec5\u4ec5\u662fB-17\u7403\u5458\u4ecb\u5165\u3002\u5de5\u4f5c\u5ba4\u6307\u51fa\uff1a\u201c\u4f60\u5c06\u80fd\u591f\u5728\u4e24\u67b6\u4f20\u5947\u8f70\u70b8\u673a\u4e0a\u6267\u884c\u98de\u884c\u4efb\u52a1\uff0c\u6bcf\u67b6\u8f70\u70b8\u673a\u90fd\u662f\u5728\u4ed4\u7ec6\u5173\u6ce8\u7ec6\u8282\u7684\u60c5\u51b5\u4e0b\u91cd\u73b0\u7684\u3002\u201d\nMicroprose\u8fd8\u6ca1\u6709\u5ba3\u5e03Might Eight\u5c06\u652f\u6301\u54ea\u4e9b\u8033\u673a\uff0c\u4ee5\u53ca\u53d1\u5e03\u65e5\u671f\u662f\u4ec0\u4e48\u65f6\u5019\u3002\u5f53\u8fdb\u4e00\u6b65\u7684\u7ec6\u8282\u53ef\u7528\u65f6\uff0cVRFocus\u4f1a\u8ba9\u60a8\u77e5\u9053\u3002", "note_en": "Recent virtual reality (VR) experience   War Remains took viewers to the front line of WWI, in among all the mud and carnage. This week MicroProse has announced its first VR title in the form of  The Mighty Eighth, putting up to 10-players into a B-17 bomber in the skies of WWII.\n   If the name MicroProse sounds like a blast from the past then you\u2019d be right. Known for a massive selection of titles during the \u201980s and \u201990s, the studio went the way of the dodo in the early 2000s. That was until earlier this month when  the brand reemerged from oblivion to announce three videogames,  Task Force Admiral, Second Front and  Sea Power. They were then followed by   The Mighty Eighth this week.\n Being built with VR specifically in mind \u2013 but also playable without a VR headset \u2013  The Mighty Eighth will be a reboot of  B-17 Flying Fortress: The Mighty 8th (2000), allowing players to fly the bomber, operate the guns and drop bombs as they carry out daring missions.\n The title is designed to be cooperative, allowing 10 players to work together to keep the plane in the air and make it home victorious. If it\u2019s not possible to fill all those seats with human players AI crew will be able to step in. There\u2019s going to be quite the mix of gameplay due to the mixture of roles, piloting or co-piloting this fly fortress, helping crew mates through day/night raids, monitoring radios and communications, and taking down enemy fighters.\n  No gameplay footage has been released as of yet but from the information MicroProse has unveiled  The Mighty Eighth will be an intense experience to closely resemble the real thing. And it won\u2019t be solely the B-17 players will step into as the B-24 Liberator will make an appearance. \u201cYou will be able to fly missions in both the legendary bombers, each recreated with meticulous attention to detail,\u201d notes the studio.\n MicroProse has yet to announce which headsets  The Mighty Eighth will support or when the release date will be. When further details are made available   VRFocus will let you know.", "posttime": "2020-05-29 23:40:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microprose,returns,\u73a9\u5bb6", "title": "Microprose\u643a10\u4eba\u4e8c\u6218B-17\u6a21\u62df\u5668Might Eight\u56de\u5f52", "title_en": "MicroProse Returns with the Mighty Eighth, a 10-Player WWII B-17 Simulator", "transed": 1, "url": "https://www.vrfocus.com/2020/05/microprose-returns-with-the-mighty-eighth-a-10-player-wwii-b-17-simulator/", "via": "", "real_tags": ["returns", "\u73a9\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004262, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u91cc\uff0c\u6211\u5df2\u7ecf2020\u5e74\u4e86\uff0c\u6211\u4eec\u6b63\u5904\u4e8e\u4e00\u573a\u761f\u75ab\u4e4b\u4e2d\uff0c\u6211\u6b63\u5728\u5b66\u4e60PHP\u3002\n\u6211\u751f\u6d3b\u5728\u9009\u62e9\u4e00\u79cd\u6280\u672f\uff0c\u5b66\u4e60\u5b83\uff0c\u540e\u6094\u9009\u62e9\uff0c\u7136\u540e\u91cd\u65b0\u5f00\u59cb\u7684\u5faa\u73af\u4e2d\u3002\u6211\u538c\u5026\u4e86\uff0c\u6211\u9700\u8981\u5b8c\u6210\u6211\u7684\u9879\u76ee\uff0c\u8d70\u51fa\u8fd9\u4e2a\u8ba9\u6211\u53d1\u75af\u7684\u65e0\u9650\u5faa\u73af\u3002\u6240\u4ee5\u6211\u505c\u6b62\u4e86\u4e00\u5207\uff0c\u5f00\u59cb\u601d\u8003\u5982\u4f55\u505a\u51fa\u9009\u62e9\u5e76\u575a\u6301\u4e0b\u53bb\uff0c\u53d7\u8fd9\u7bc7\u6587\u7ae0\u7684\u5f71\u54cd\uff0c\u6211\u51b3\u5b9a\u9009\u62e9\u4e00\u79cd\u67af\u71e5\u7684\u6280\u672f\uff0c\u4f46\u54ea\u79cd\u5462\uff1f\u5e02\u573a\u4e0a\u6709\u8fd9\u4e48\u591a\u9009\u62e9\u3002\n\u6211\u505a\u4e86\u4e00\u4e9b\u7814\u7a76\uff0c\u5217\u51fa\u4e86\u4e00\u4e9b\u4e3b\u6d41\u8bed\u8a00/\u6846\u67b6\uff0c\u5982Java/Spring\uff0cC#/.NET Core\uff0cPython/Django\uff0cRuby/Rails\uff0cPHP/Laravel\uff0c\u7136\u540e\u6211\u5f00\u59cb\u5220\u9664\u4e00\u4e9b\u6211\u4e0d\u592a\u559c\u6b22\u7684\u9009\u9879\uff0c\u5217\u8868\u4e2d\u8fd8\u67093\u4e2a\u9009\u9879\uff0c\u4e0b\u4e00\u4e2a\u51b3\u5b9a\u56e0\u7d20\u662f\u9009\u62e9\u4e00\u4e9b\u5206\u6570\u8f83\u5c11\u7684\u5e76\u4e14\u6211\u89c9\u5f97\u8212\u670d\u7684\u4e1c\u897f\u5f00\u59cb\u5b66\u4e60\uff0c\u6700\u540e\u6211\u9009\u62e9\u4e86\u4e24\u4e2a\u9009\u9879\uff0cPython\u548cPHP\uff0c\u4e0b\u4e00\u4e2a\u56e0\u7d20\u662f&#34\uff1b\u5982\u679c\u60c5\u51b5\u53d8\u5f97\u7cdf\u7cd5\uff0c\u6211\u80fd\u7528\u5b83\u8d5a\u94b1\u5417\uff1f&#34\uff1b\uff0c\u8fd9\u4e24\u79cd\u8bed\u8a00\u5728\u5e02\u573a\u4e0a\u7684\u4f7f\u7528\u91cf\u90fd\u5f88\u5927\uff0c\u673a\u4f1a\u4e5f\u5f88\u591a\uff0c\u6240\u4ee5\u90fd\u7559\u5728\u4e86\u6e38\u620f\u4e2d\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6000\u65e7\u7684\u611f\u89c9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u56e0\u7d20\u3002\u6211\u5b66\u4e60\u7684\u7b2c\u4e00\u79cd\u7f51\u7edc\u8bed\u8a00\u662fPHP\uff0c\u5728\u90a3\u6bb5\u65f6\u95f4\u91cc\uff0c\u6211\u7684\u7ecf\u5386\u662f\u795e\u5947\u7684\uff0c\u4e00\u4e2a\u65b0\u7684\u53ef\u80fd\u6027\u4e16\u754c\u4e3a\u6211\u6253\u5f00\u4e86\u673a\u4f1a\u3002\u6211\u975e\u5e38\u559c\u6b22\u8fd9\u79cd\u7ecf\u5386\u3002\u4e5f\u8bb8\u8fd9\u79cd\u611f\u89c9\u4f1a\u56de\u6765\u5462\uff1f\u55ef\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u4e8b\u60c5\u4f1a\u53d8\u7684\uff0c\u5bf9\u5427\uff1f\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6709\u4ec0\u4e48\u53d8\u5316\uff0cPHP 7\uff1f\u9177\u5417\uff0c\u62c9\u5a01\u5c14\uff1f\u9177\uff0c\u8fd9\u4e2a\u73b0\u4ee3\u7684PHP\u542c\u8d77\u6765\u4e0d\u9519\uff0c\u6211\u600e\u4e48\u624d\u80fd\u5b66\u4f1a\u5462\uff1f\u55ef\uff0c\u6211\u4eec\u6709\u62c9\u5361\u65af\u7279\uff0c\u4ed6\u4eec\u770b\u8d77\u6765\u4e0d\u9519\u3002\u6211\u52a0\u5165\u4e86\uff01\n\u4f60\u77e5\u9053\uff0c\u6211\u5bf9\u5f53\u524dPHP\u4e0a\u7684\u6279\u8bc4\u548c\u7b11\u8bdd\u4e00\u70b9\u4e5f\u4e0d\u5728\u610f\uff0c\u6211\u4e5f\u4f1a\u5bf9\u8fd9\u4e9b\u7b11\u8bdd\u53d1\u7b11\u3002\u6211\u552f\u4e00\u9700\u8981\u7684\u5c31\u662f\u6709\u4e00\u4e2a\u53ef\u9760\u7684\u5e73\u53f0\u6765\u521b\u5efa\u6211\u7684\u9879\u76ee\uff0c\u4e00\u4e2a\u80fd\u6b63\u5e38\u5de5\u4f5c\u3001\u4e0d\u4f1a\u8ba9\u6211\u5934\u75bc\u7684\u4e1c\u897f\uff0c\u6211\u7684\u6ce8\u610f\u529b\u9700\u8981\u653e\u5728\u521b\u9020\u4e00\u4e2a\u597d\u7684\u4ea7\u54c1\u4e0a\uff0c\u800c\u5728\u6211\u7684\u5ba2\u6237\u8eab\u4e0a\uff0c\u5e55\u540e\u7684\u4e1c\u897f\u53ea\u9700\u8981\u53d1\u6325\u4f5c\u7528\uff0c\u4e0d\u8981\u65e0\u7f18\u65e0\u6545\u5730\u5d29\u6e83\u3002\u6211\u662fKISS\u539f\u5219\u7684\u7c89\u4e1d\uff0c\u5728\u6211\u505a\u7684\u5927\u591a\u6570\u4e8b\u60c5\u4e2d\u6211\u90fd\u4f1a\u52aa\u529b\u9075\u5faa\u5b83\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u53c8\u56de\u5230\u4e86\u706f\u6808\u7684\u539f\u56e0\u3002\n\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u6211\u4e0d\u4f1a\u505c\u6b62\u5b66\u4e60\u65b0\u4e8b\u7269\uff0c\u5982\u679c\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u65b0\u7684\u6709\u8da3\u7684\u6280\u672f\uff0c\u6211\u4f1a\u53ea\u662f\u4e3a\u4e86\u597d\u73a9\u800c\u5b66\u4e60\u3002\u65e0\u5fe7\u65e0\u8651\u5730\u4e71\u641e\u6280\u672f\u662f\u975e\u5e38\u6709\u8da3\u7684\uff0c\u6211\u63a8\u8350\u7ed9\u5927\u5bb6\u3002\nPHP\u6ca1\u6709\u6b7b\uff0c\u4e5f\u4e0d\u4f1a\u6b7b\u3002\u6211\u8ba4\u4e3aPHP\u662f\u4e2a\u50f5\u5c38\u3002", "note_en": "Here I&#39;m, it&#39;s 2020, we are in the middle of a plague and I&#39;m learning PHP.\n  I live in a loop of choosing a technology, learning it, regret the choice and start over. I&#39;m tired of it, I need to get my projects done and get out of this infinite cycle that is driving me mad. So I stopped everything and started thinking on how to make a choice and stick to it, influenced by  this essay I decided to choose a boring technology, but wich one? There are so many options in the market.\n  I did some research and listed some mainstream languages/frameworks like Java/Spring, C#/.NET Core, Python/Django, Ruby/Rails, PHP/Laravel, next I started removing some options that I dont like so much, 3 options remained in the list, the next factor of decision was choosing something with the less fraction to start learning and that I feel comfortable with, I ended up with two options, Python and PHP, next factor was &#34;if things get ugly can I make money with it?&#34;, both languages have a huge usage in the market and a lot of opportunities, so both stayed in the game. At this point the nostalgic feeling was a important factor. The first web language that I learned was PHP, in that time the experience was magical, a new world of possibilities have oppened for me. I liked so much the experience. Perhaps this feeling will came back? Well, I don&#39;t know, things change right? Let&#39;s check what changed, PHP 7? Cool, Laravel? Cool, this modern PHP thing sounds good, how can I learn it? Hum, we have Laracasts and they seem nice. I&#39;m In!\n  You know, I don&#39;t give a shit about the current criticism and jokes on PHP, I also laugh at the jokes. The only thing that I need is a reliable stack to create my projects, something that just works and dont give me headaches, my focus need to be in creating a good product and in my clients, the things behind the scenes just need to be working and don&#39;t crashing for no reason, i&#39;m a fan of the  KISS principle and I try to follow it in most things that I do, that&#39;s why i&#39;m back in the LAMP stack.\n  An important point is that I will not stop learning new things, if I discover some new interesting technology I will learn it just for shits and giggles. Mess with technology without worry is very fun, and I recommend it to everyone.\n  PHP is not dead and will not die. I think that PHP is a zombie.", "posttime": "2020-05-29 23:40:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,php", "title": "\u5728\u761f\u75ab\u4e2d\u5b66\u4e60PHP", "title_en": "Learning PHP in the Middle of a Plague", "transed": 1, "url": "https://www.sabaini.org/blog/learning-php.html", "via": "", "real_tags": ["\u5b66\u4e60", "php"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004261, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u822c\u6765\u8bf4\uff0cSSH(\u534f\u8bae)\u548cOpenSSH(\u534f\u8bae\u7684\u4e3b\u8981\u5b9e\u73b0)\u62e5\u6709(\u6216\u66fe\u7ecf\u62e5\u6709)\u56db\u79cd\u4e0d\u540c\u7c7b\u578b\u7684SSH\u5bc6\u94a5\uff1aRSA\u3001DSA(\u73b0\u5728\u5df2\u88ab\u63a8\u8350)\u3001ECDSA\u548cED25519\uff0c\u8fd9\u91cc\u6309\u7167\u5b83\u4eec\u88ab\u6dfb\u52a0\u5230SSH\u7684\u987a\u5e8f\u5217\u51fa(ED25519\u662f\u6700\u65b0\u7684)\u3002\u7531\u4e8eRSA\u662f\u6700\u65e7\u7684\uff0c\u60a8\u53ef\u4ee5\u5408\u7406\u5730\u8ba4\u4e3a\u5b83\u662f\u4ecd\u7136\u53d7\u5230\u79ef\u6781\u652f\u6301\u7684\u4e09\u4e2a\u7248\u672c\u4e2d\u4f7f\u7528\u6700\u5c11\u7684\u4e00\u4e2a\u3002\u76f8\u53cd\uff0c\u4f7f\u7528RSA\u5bc6\u94a5\u4ecd\u7136\u975e\u5e38\u5e38\u89c1\uff0c\u65e2\u6709\u65e7\u5bc6\u94a5\uff0c\u4e5f\u6709\u65b0\u751f\u6210\u7684\u5bc6\u94a5\u3002\u8fd9\u6709\u5f88\u591a\u539f\u56e0\uff0c\u4f46\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3aRSA\u662f\u6bcf\u4e2aSSH\u5b9e\u73b0\u90fd\u652f\u6301\u7684\u901a\u7528\u9ed8\u8ba4\u5bc6\u94a5\u7c7b\u578b\uff0c\u800c\u4e14SSH\u5b9e\u73b0\u7684\u6570\u91cf\u6bd4\u60a8\u9884\u671f\u7684\u8981\u591a\u3002\n\u4e00\u4e2a\u5c0f\u539f\u56e0\u662f\uff0c\u4eba\u4eec\u901a\u5e38\u4e0d\u4f1a\u6539\u53d8\u6709\u6548\u7684\u5bc6\u7801\uff0c\u7279\u522b\u662f\u5728\u4ed6\u4eec\u5bf9\u4e8b\u7269\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u5f0f\u4e0a(\u53ea\u8981\u770b\u770b\u6240\u6709\u7684\u65e7\u5bc6\u7801\u5c31\u77e5\u9053\u4e86)\u3002\u73b0\u6709\u7684RSA\u5bc6\u94a5\u7ec4\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u6240\u4ee5\u5f88\u591a\u4eba\u89c9\u5f97\u6ca1\u4ec0\u4e48\u9700\u8981\u66f4\u6539\u5b83\u4eec\u3002\u7136\u800c\uff0c\u8fd9\u4ec5\u9002\u7528\u4e8e\u8001\u5e74\u4eba\u4f7f\u7528\u65e7\u5bc6\u94a5\u7684\u73af\u5883(\u53ef\u4ee5\u5305\u62ec\u4e2a\u4eba\u673a\u5668\u4e0a\u4f7f\u7528\u7684\u5bc6\u94a5\u548c\u7528\u4e8e\u4e2a\u4eba\u7269\u54c1\u7684\u5bc6\u94a5\uff0c\u5982\u60a8\u7684\u4e2a\u4ebaGithub\u5e10\u6237)\u3002\n\u63a5\u4e0b\u6765\uff0c\u4ecd\u7136\u6709\u4e00\u5b9a\u6570\u91cf\u7684SSH\u52a9\u624b\u8f6f\u4ef6\u4e0d\u652f\u6301\u5168\u7cfb\u5217\u7684SSH\u5bc6\u94a5\u7c7b\u578b\u3002\u5b83\u6709\u4e9b\u4e0d\u652f\u6301Ed25519\u5bc6\u94a5(\u901a\u5e38\u662f\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u9009\u62e9\u7684\u5bc6\u94a5\u7c7b\u578b)\uff0c\u6709\u4e9b\u53ea\u652f\u6301RSA\u5bc6\u94a5\uff0c\u751a\u81f3\u4e0d\u652f\u6301ECDSA\u5bc6\u94a5\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u65e2\u4e0d\u53ef\u80fd\u53c8\u8352\u8c2c\uff0c\u90a3\u4e48\uff0c\u76f4\u52302017\u5e74\uff0cGnome Keyring\u624d\u652f\u6301ECDSA\u5bc6\u94a5(\u53c2\u89c1bug#641082)\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u5e76\u4e0d\u662f\u4e16\u754c\u4e0a\u6240\u6709\u7684\u5730\u65b9\u90fd\u662fOpenSSH(\u4ee5\u53ca\u4e0e\u4e4b\u5bf9\u8bdd\u7684\u4e1c\u897f)\uff1b\u8fd8\u6709\u5404\u79cd\u9644\u52a0\u7684SSH\u5e93\u548c\u5b8c\u6574\u7684\u5b9e\u73b0\uff0c\u65e0\u8bba\u662f\u7528(\u548c\u7528\u4e8e)C\u8bed\u8a00\u8fd8\u662f\u5176\u4ed6\u8bed\u8a00\u3002\u8fd9\u4e9b\u5b9e\u73b0\u90fd\u652f\u6301RSA\uff0c\u56e0\u4e3aRSA\u5b9e\u9645\u4e0a\u662fSSH\u7684\u901a\u7528\u5bc6\u94a5\u7c7b\u578b(\u6bcf\u4e2a\u4eba\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u90fd\u652f\u6301\u5b83)\uff0c\u4f46\u5b83\u4eec\u5bf9\u5176\u4ed6\u5bc6\u94a5\u7c7b\u578b\u7684\u652f\u6301\u5f80\u5f80\u53c2\u5dee\u4e0d\u9f50\u3002\u60a8\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a\u5bc6\u94a5\u7c7b\u578b\uff0c\u5b83\u5c06\u7528\u4e8eBersa\uff1b\u60a8\u4e0d\u80fd\u5b9e\u73b0\u66f4\u591a\u3002\u7136\u540e\uff0c\u4e00\u65e6\u60a8\u5904\u4e8e\u67d0\u4e9b\u4e1c\u897f(\u65e0\u8bba\u662f\u5ba2\u6237\u7aef\u8fd8\u662f\u670d\u52a1\u5668)\u53ea\u5904\u7406RSA\u5bc6\u94a5\u7684\u73af\u5883\u4e2d\uff0c\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u60a8\u5f00\u59cb\u9ed8\u8ba4\u4f7f\u7528RSA\u5bc6\u94a5\u3002\n\u8fd9\u5c31\u662f\u6211\u81ea\u5df1\u5982\u4f55\u5f97\u5230\u6700\u8fd1\u7684RSA\u5bc6\u94a5\u7684\u3002\u6211\u7684iOS toUnix\u6587\u4ef6\u590d\u5236\u73af\u5883\u53ea\u80fd\u5728\u6211\u7684iOS\u8bbe\u5907\u4e0a\u751f\u6210RSA\u5bc6\u94a5(\u4e0d\u7ba1\u662f\u4ec0\u4e48\u539f\u56e0)\uff0c\u800c\u6211\u7684Yubikey4\u4e0d\u652f\u6301Ed25519\u5bc6\u94a5(\u5982\u679c\u6211\u5fc5\u987b\u5728RSA\u548cECDSA\u4e4b\u95f4\u9009\u62e9\uff0c\u6211\u66f4\u559c\u6b22RSA)\u3002\n\u597d\u6d88\u606f\u662f\u5bf9Ed25519\u952e\u7684\u652f\u6301\u8d8a\u6765\u8d8a\u666e\u904d\u3002\u5b83\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u901a\u7528\uff0c\u4f46\u6211\u5e0c\u671b\u8d8a\u6765\u8d8a\u591a\u7684\u7a0b\u5e8f\u4f1a\u89c9\u5f97\u5b83\u4eec\u53ef\u4ee5\u9ed8\u8ba4\u751f\u6210Ed25519\u5bc6\u94a5\uff0c\u7136\u540e\u4e3a\u4eba\u4eec\u63d0\u4f9b\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5982\u679c\u8fd9\u5728\u60a8\u7684\u65e7SSH\u8bbe\u5907\u4e0a\u4e0d\u8d77\u4f5c\u7528\uff0c\u8bf7\u9009\u62e9RSA\u9009\u9879\u3002\nPS\uff1a\u56e0\u4e3a\u6211\u67e5\u5230\u4e86\u8fd9\u4e00\u70b9\uff0cECDSA\u5bc6\u94a5\u88ab\u6dfb\u52a0\u5230OpenSSH5.7\u4e2d\uff0c\u5b83\u57282011\u5e741\u6708\u53d1\u5e03\u4e86\u6700\u65b0\u7248\u672c(VIA)\u3002\u8fd9\u662f\u4e0d\u5230\u5341\u5e74\u7684\u5386\u53f2\uff0c\u6240\u4ee5\u4ed6\u4eec\u6ca1\u6709\u53d6\u4ee3RSA\u5bc6\u94a5\u53ef\u80fd\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\uff0c\u7279\u522b\u662f\u56e0\u4e3aEd25519\u5bc6\u94a5\u652f\u6301\u662f\u5728\u51e0\u5e74\u540e\u624d\u51fa\u73b0\u7684\u3002", "note_en": "Generally speaking, SSH the protocol and OpenSSH the leadingimplementation of it have (or have had)  four different types ofSSH keys: RSA, DSA (which has now beendeprecated), ECDSA, and Ed25519, listed here in the order of whenthey were added to SSH (with Ed25519 being the most recent). SinceRSA is the oldest, you might reasonably expect that it was the leastused of the three that are still actively supported. Instead itremains extremely common to see RSA keys in use, both old ones andeven newly generated ones. There are a number of reasons for this,but a good part of it boils down to that  RSA is the universaldefault key type that every SSH implementation supports, and thereare more SSH implementations out there than you might expect.\n The small reason is that people often don&#39;t change what works,especially in how they authenticate to things (just look at all ofthe old passwords out there). Existing RSA keypairs work, so manypeople feel little need to change them. However, this only appliesin environments where old people are using old keys (which caninclude keys used on personal machines and for personal things,like your personal Github account).\n Next, there is still a certain amount of SSH helper software outthere that doesn&#39;t support the full range of SSH key types. Someof it doesn&#39;t support Ed25519 keys (which are generally everyone&#39;spreferred choice of key types), and some of it only supports RSAkeys, not even ECDSA keys. If this sounds impossible and absurd,well, it took until 2017 for Gnome Keyring to support ECDSA keys(cf  bug #641082).\n Beyond this, not all of the world is OpenSSH (and things that talkto it); there are a variety of additional SSH libraries and fullimplementations, both in (and for) C and in other languages. Theseimplementations all support RSA, because RSA is effectively theuniversal key type for SSH (everyone supports it on both the clientand server side), but their support of other key types is oftenspotty. You have to implement one key type and it&#39;s going to beRSA; you may not implement more than that. Then once you&#39;re in anecology where some things (either clients or servers) only dealwith RSA keys, you start defaulting to RSA keys for safety.\n This is how I&#39;ve wound up with recent RSA keys myself.  My iOS toUnix file copy environment could only generateRSA keys on my iOS devices (for whatever reasons), and my Yubikey4 doesn&#39;t support Ed25519 keys (and if I have to pick between RSAand ECDSA, I prefer RSA).\n The good news is that support for Ed25519 keys is increasinglycommon. It will probably never be completely universal, but I&#39;m hopingthat an increasing number of programs will feel that they can default togenerating Ed25519 keys and then offer people an &#39;if this doesn&#39;t workon your ancient SSH device, pick RSA&#39; option.\n PS: Because I looked this up, ECDSA keys were added in  OpenSSH5.7, which had its upstreamrelease in January of 2011 ( via). That&#39;s lessthan a decade old so it&#39;s probably not surprising that they didn&#39;tsupplant RSA keys, especially since Ed25519 key support came alongonly a few years later.", "posttime": "2020-05-29 23:39:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u94a5,persistence", "title": "RSA\u5bc6\u94a5\u5728SSH\u4e2d\u7684\u60ca\u4eba\u6301\u4e45\u6027", "title_en": "The surprising persistence of RSA keys in SSH", "transed": 1, "url": "https://utcc.utoronto.ca/~cks/space/blog/tech/SSHRSAKeysPersistence", "via": "", "real_tags": ["\u5bc6\u94a5"]}, {"category": "", "categoryclass": "", "imagename": "61ccd594b640342fab83ccc613fb1a44.jpg", "infoid": 1004260, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b27\u7a7a\u5c40\u7684\u592a\u9633\u8f68\u9053\u98de\u884c\u5668\u5c06\u5728\u672a\u6765\u51e0\u5929\u7a7f\u8fc7ATLAS\u5f57\u661f\u7684\u5c3e\u5df4\u3002\u867d\u7136\u6700\u8fd1\u53d1\u5c04\u7684\u822a\u5929\u5668\u6b64\u65f6\u4e0d\u4f1a\u91c7\u96c6\u79d1\u5b66\u6570\u636e\uff0c\u4f46\u4efb\u52a1\u4e13\u5bb6\u5df2\u7ecf\u52aa\u529b\u786e\u4fdd\u5728\u8fd9\u6b21\u72ec\u7279\u7684\u76f8\u9047\u671f\u95f4\u6253\u5f00\u56db\u53f0\u6700\u76f8\u5173\u7684\u4eea\u5668\u3002\n\u592a\u9633\u8f68\u9053\u5668\u4e8e2020\u5e742\u670810\u65e5\u53d1\u5c04\u5347\u7a7a\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u9664\u4e86\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u800c\u77ed\u6682\u5173\u95ed\u5916\uff0c\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u4eec\u4e00\u76f4\u5728\u8fdb\u884c\u4e00\u7cfb\u5217\u6d4b\u8bd5\u548c\u8bbe\u7f6e\u7a0b\u5e8f\uff0c\u79f0\u4e3a\u8c03\u8bd5\u3002\n\u8fd9\u4e00\u9636\u6bb5\u7684\u5b8c\u6210\u65e5\u671f\u5b9a\u57286\u670815\u65e5\uff0c\u8fd9\u6837\u98de\u8239\u5c31\u53ef\u4ee5\u57286\u6708\u4e2d\u65ec\u7b2c\u4e00\u6b21\u8fd1\u65e5\u70b9\u5b8c\u5168\u53d1\u6325\u4f5c\u7528\u3002\u7136\u800c\uff0c\u4e0e\u5f57\u661f\u5076\u7136\u76f8\u9047\u7684\u53d1\u73b0\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u7d27\u8feb\u3002\n\u610f\u5916\u5730\u98de\u8d8a\u5f57\u661f\u5c3e\u5df4\u662f\u592a\u7a7a\u4efb\u52a1\u4e2d\u7f55\u89c1\u7684\u4e8b\u4ef6\uff0c\u79d1\u5b66\u5bb6\u4eec\u77e5\u9053\uff0c\u8fd9\u79cd\u60c5\u51b5\u4ee5\u524d\u53ea\u53d1\u751f\u8fc7\u516d\u6b21\uff0c\u5bf9\u4e8e\u4e0d\u662f\u4e13\u95e8\u8ffd\u9010\u5f57\u661f\u7684\u4efb\u52a1\u3002\u6240\u6709\u8fd9\u6837\u7684\u906d\u9047\u90fd\u662f\u5728\u4e8b\u4ef6\u53d1\u751f\u540e\u7684\u822a\u5929\u5668\u6570\u636e\u4e2d\u53d1\u73b0\u7684\u3002\u592a\u9633\u8f68\u9053\u5668\u5373\u5c06\u5230\u6765\u7684\u7a7f\u8d8a\u662f\u7b2c\u4e00\u4e2a\u63d0\u524d\u9884\u6d4b\u7684\u3002\n\u82f1\u56fd\u4f26\u6566\u5927\u5b66\u5b66\u9662\u7a46\u62c9\u5fb7\u7a7a\u95f4\u79d1\u5b66\u5b9e\u9a8c\u5ba4\u7684\u6770\u4f26\u7279\u00b7\u743c\u65af(Geraint Jones)\u6ce8\u610f\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4ed6\u670920\u5e74\u7684\u7814\u7a76\u6b64\u7c7b\u906d\u9047\u7684\u5386\u53f2\u3002\u4ed6\u57282000\u5e74\u53d1\u73b0\u4e86\u7b2c\u4e00\u6b21\u610f\u5916\u7684\u5c3e\u5df4\u4ea4\u53c9\uff0c\u5f53\u65f6\u4ed6\u6b63\u5728\u8c03\u67e51996\u5e74\u6b27\u7a7a\u5c40/\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5c24\u5229\u897f\u65af\u592a\u9633\u7814\u7a76\u822a\u5929\u5668\u8bb0\u5f55\u7684\u6570\u636e\u4e2d\u7684\u4e00\u4e2a\u5947\u602a\u7684\u6270\u52a8\u3002\u8fd9\u9879\u7814\u7a76\u663e\u793a\uff0c\u5b87\u5b99\u98de\u8239\u7a7f\u8fc7\u4e86\u96c5\u5e93\u5854\u5f57\u661f(\u4e5f\u88ab\u79f0\u4e3a\u201c1996\u5e74\u7684\u5927\u5f57\u661f\u201d)\u7684\u5c3e\u5df4\u3002\u6d88\u606f\u516c\u5e03\u540e\u4e0d\u4e45\uff0c\u5c24\u5229\u897f\u65af\u7a7f\u8fc7\u4e86\u53e6\u4e00\u9897\u5f57\u661f\u7684\u5c3e\u5df4\uff0c\u7136\u540e\u57282007\u5e74\u7a7f\u8fc7\u4e86\u7b2c\u4e09\u9897\u5f57\u661f\u7684\u5c3e\u5df4\u3002\n\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u610f\u8bc6\u5230\u592a\u9633\u8f68\u9053\u5668\u5c06\u5728\u77ed\u77ed\u51e0\u5468\u5185\u5230\u8fbe\u5f57\u661fC/2019\u5e74Y4(ATLAS)\u4e0b\u6e384400\u4e07\u516c\u91cc\uff0cGeraint\u7acb\u5373\u901a\u77e5\u4e86\u6b27\u7a7a\u5c40\u56e2\u961f\u3002\n\u592a\u9633\u8f68\u9053\u5668\u914d\u5907\u4e86\u4e00\u595710\u53f0\u539f\u4f4d\u548c\u9065\u611f\u4eea\u5668\u6765\u8c03\u67e5\u592a\u9633\u53ca\u5176\u91ca\u653e\u5230\u592a\u7a7a\u7684\u5e26\u7535\u7c92\u5b50\u6d41-\u592a\u9633\u98ce\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u56db\u53f0\u539f\u4f4d\u4eea\u5668\u4e5f\u662f\u63a2\u6d4b\u5f57\u661f\u5c3e\u5df4\u7684\u5b8c\u7f8e\u4eea\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u6d4b\u91cf\u4e86\u822a\u5929\u5668\u5468\u56f4\u7684\u6761\u4ef6\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u8fd4\u56de\u5173\u4e8e\u5f57\u661f\u53d1\u51fa\u7684\u5c18\u57c3\u9897\u7c92\u548c\u5e26\u7535\u7c92\u5b50\u7684\u6570\u636e\u3002\u8fd9\u4e9b\u6392\u653e\u5f62\u6210\u4e86\u5f57\u661f\u7684\u4e24\u4e2a\u5c3e\u5df4\uff1a\u7559\u5728\u5f57\u661f\u8f68\u9053\u4e0a\u7684\u5c18\u57c3\u5c3e\u5df4\u548c\u76f4\u63a5\u6307\u5411\u592a\u9633\u7684\u79bb\u5b50\u5c3e\u5df4\u3002\n\u592a\u9633\u8f68\u9053\u5668\u5c06\u4e8e5\u670831\u65e5\u81f36\u67081\u65e5\u7a7f\u8fc7ATLAS\u5f57\u661f\u7684\u79bb\u5b50\u5c3e\u5df4\uff0c6\u67086\u65e5\u7a7f\u8fc7\u5c18\u57c3\u5c3e\u5df4\u3002\u5982\u679c\u79bb\u5b50\u5c3e\u5df4\u8db3\u591f\u5bc6\u96c6\uff0c\u592a\u9633\u8f68\u9053\u5668\u7684\u78c1\u5f3a\u8ba1(MAG)\u53ef\u4ee5\u63a2\u6d4b\u5230\u884c\u661f\u9645\u78c1\u573a\u7684\u53d8\u5316\uff0c\u56e0\u4e3a\u5b83\u4e0e\u5f57\u661f\u5c3e\u90e8\u7684\u79bb\u5b50\u76f8\u4e92\u4f5c\u7528\uff0c\u800c\u592a\u9633\u98ce\u5206\u6790\u4eea(SWA)\u53ef\u4ee5\u76f4\u63a5\u6355\u83b7\u4e00\u4e9b\u5c3e\u5df4\u7c92\u5b50\u3002\n\u5f53\u592a\u9633\u8f68\u9053\u5668\u7a7f\u8fc7\u5c18\u57c3\u5c3e\u5df4\u65f6\uff0c\u53d6\u51b3\u4e8e\u5b83\u7684\u5bc6\u5ea6-\u8fd9\u662f\u6781\u5176\u96be\u4ee5\u9884\u6d4b\u7684-\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5fae\u5c0f\u7684\u5c18\u57c3\u9897\u7c92\u4ee5\u6bcf\u79d2\u6570\u5341\u516c\u91cc\u7684\u901f\u5ea6\u649e\u51fb\u822a\u5929\u5668\u3002\u867d\u7136\u8fd9\u5bf9\u822a\u5929\u5668\u6ca1\u6709\u91cd\u5927\u98ce\u9669\uff0c\u4f46\u5c18\u57c3\u9897\u7c92\u672c\u8eab\u4f1a\u5728\u649e\u51fb\u65f6\u84b8\u53d1\uff0c\u5f62\u6210\u5fae\u5c0f\u7684\u5e26\u7535\u6c14\u4f53\u6216\u7b49\u79bb\u5b50\u4f53\u4e91\uff0c\u53ef\u4ee5\u7531\u65e0\u7ebf\u7535\u548c\u7b49\u79bb\u5b50\u6ce2(RPW)\u4eea\u5668\u63a2\u6d4b\u5230\u3002\n\u201c\u50cf\u8fd9\u6837\u7684\u610f\u5916\u76f8\u9047\u4e3a\u4efb\u52a1\u63d0\u4f9b\u4e86\u72ec\u7279\u7684\u673a\u9047\u548c\u6311\u6218\uff0c\u4f46\u8fd9\u5f88\u597d\uff01\u50cf\u8fd9\u6837\u7684\u673a\u4f1a\u90fd\u662f\u79d1\u5b66\u5192\u9669\u7684\u4e00\u90e8\u5206\uff0c\u201c\u6b27\u7a7a\u5c40\u79d1\u5b66\u4e3b\u4efb\u91d1\u745f\u00b7\u54c8\u8f9b\u683c(G\u00fcnther Hasinger)\u8bf4\u3002\n\u5176\u4e2d\u4e00\u4e2a\u6311\u6218\u662f\uff0c\u7531\u4e8e\u8c03\u8bd5\uff0c\u4eea\u5668\u4f3c\u4e4e\u4e0d\u592a\u53ef\u80fd\u5168\u90e8\u53ca\u65f6\u51c6\u5907\u5c31\u7eea\u3002\u73b0\u5728\uff0c\u7531\u4e8e\u4eea\u5668\u56e2\u961f\u548c\u6b27\u7a7a\u5c40\u98de\u884c\u4efb\u52a1\u64cd\u4f5c\u56e2\u961f\u7684\u7279\u522b\u52aa\u529b\uff0c\u6240\u6709\u56db\u53f0\u73b0\u573a\u4eea\u5668\u90fd\u5c06\u5f00\u542f\u5e76\u6536\u96c6\u6570\u636e\uff0c\u5c3d\u7ba1\u5728\u67d0\u4e9b\u65f6\u95f4\u9700\u8981\u5c06\u4eea\u5668\u5207\u6362\u56de\u8c03\u8bd5\u6a21\u5f0f\uff0c\u4ee5\u786e\u4fdd\u57286\u670815\u65e5\u7684\u6700\u540e\u671f\u9650\u524d\u5b8c\u6210\u4efb\u52a1\u3002\n\u201c\u6709\u4e86\u8fd9\u4e9b\u8b66\u544a\uff0c\u6211\u4eec\u5df2\u7ecf\u4e3aATLAS\u5f57\u661f\u544a\u8bc9\u6211\u4eec\u7684\u4e00\u5207\u505a\u597d\u4e86\u51c6\u5907\uff0c\u201d\u6b27\u7a7a\u5c40\u592a\u9633\u8f68\u9053\u5668\u9879\u76ee\u79d1\u5b66\u5bb6\u4e39\u5c3c\u5c14\u00b7\u7a46\u52d2(Daniel M\u00fcller)\u8bf4\u3002\n\u53e6\u4e00\u4e2a\u6311\u6218\u662f\u5f57\u661f\u7684\u884c\u4e3a\u3002ATLAS\u5f57\u661f\u4e8e2019\u5e7412\u670828\u65e5\u88ab\u53d1\u73b0\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u5b83\u53d8\u5f97\u5982\u6b64\u660e\u4eae\uff0c\u4ee5\u81f3\u4e8e\u5929\u6587\u5b66\u5bb6\u4eec\u60f3\u77e5\u9053\u5b83\u662f\u5426\u4f1a\u57285\u6708\u4efd\u53d8\u5f97\u8089\u773c\u53ef\u89c1\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u56db\u6708\u521d\uff0c\u5f57\u661f\u788e\u88c2\u4e86\u3002\u7ed3\u679c\uff0c\u5b83\u7684\u4eae\u5ea6\u4e5f\u660e\u663e\u964d\u4f4e\uff0c\u5265\u593a\u4e86\u5929\u7a7a\u89c2\u6d4b\u8005\u7684\u89c6\u91ce\u30025\u6708\u4e2d\u65ec\u7684\u8fdb\u4e00\u6b65\u788e\u88c2\u8fdb\u4e00\u6b65\u524a\u5f31\u4e86\u8fd9\u9897\u5f57\u661f\uff0c\u4f7f\u5176\u4e0d\u592a\u53ef\u80fd\u88ab\u592a\u9633\u8f68\u9053\u5668\u63a2\u6d4b\u5230\u3002\n\u6839\u636eGeraint\u7684\u8bf4\u6cd5\uff0c\u5c3d\u7ba1\u68c0\u6d4b\u5230\u7684\u673a\u4f1a\u5df2\u7ecf\u51cf\u5c11\uff0c\u4f46\u8fd9\u4e00\u52aa\u529b\u4ecd\u7136\u662f\u503c\u5f97\u7684\u3002\n\u201c\u6bcf\u4e00\u6b21\u4e0e\u5f57\u661f\u76f8\u9047\uff0c\u6211\u4eec\u90fd\u4f1a\u5bf9\u8fd9\u4e9b\u6709\u8da3\u7684\u7269\u4f53\u6709\u66f4\u591a\u7684\u4e86\u89e3\u3002\u4ed6\u89e3\u91ca\u8bf4\uff1a\u201c\u5982\u679c\u592a\u9633\u8f68\u9053\u5668\u63a2\u6d4b\u5230\u5f57\u661fATLAS\u7684\u5b58\u5728\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u66f4\u591a\u5730\u4e86\u89e3\u5f57\u661f\u5982\u4f55\u4e0e\u592a\u9633\u98ce\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u68c0\u67e5\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u5bf9\u5c18\u57c3\u5c3e\u5df4\u884c\u4e3a\u7684\u9884\u671f\u662f\u5426\u4e0e\u6211\u4eec\u7684\u6a21\u578b\u76f8\u7b26\u3002\u201d\u201c\u6240\u6709\u4e0e\u5f57\u661f\u76f8\u9047\u7684\u4efb\u52a1\u90fd\u63d0\u4f9b\u4e86\u62fc\u56fe\u7684\u788e\u7247\u3002\u201d\nGeraint\u662f\u6b27\u7a7a\u5c40\u672a\u6765\u5f57\u661f\u62e6\u622a\u4efb\u52a1\u7684\u9996\u5e2d\u7814\u7a76\u5458\uff0c\u8be5\u4efb\u52a1\u7531\u4e09\u4e2a\u822a\u5929\u5668\u7ec4\u6210\uff0c\u8ba1\u5212\u4e8e2028\u5e74\u53d1\u5c04\u3002\u5b83\u5c06\u5bf9\u4e00\u9897\u672a\u77e5\u7684\u5f57\u661f\u8fdb\u884c\u66f4\u8fd1\u8ddd\u79bb\u7684\u98de\u8d8a\uff0c\u8fd9\u9897\u5f57\u661f\u5c06\u4ece\u65b0\u53d1\u73b0\u7684\u5f57\u661f\u4e2d\u6311\u9009\u51fa\u6765\uff0c\u8ddd\u79bb\u53d1\u5c04\u65f6\u95f4\u66f4\u8fd1(\u751a\u81f3\u66f4\u665a)\u3002\n\u592a\u9633\u8f68\u9053\u5668\u76ee\u524d\u6b63\u5728\u91d1\u661f\u548c\u6c34\u661f\u8f68\u9053\u4e4b\u95f4\u7ed5\u7740\u6211\u4eec\u7684\u6bcd\u661f\u8fd0\u884c\uff0c\u5b83\u7684\u7b2c\u4e00\u6b21\u8fd1\u65e5\u70b9\u53d1\u751f\u57286\u670815\u65e5\uff0c\u8ddd\u79bb\u592a\u9633\u7ea67700\u4e07\u516c\u91cc\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u5b83\u5c06\u5728\u6c34\u661f\u8f68\u9053\u5185\u53d8\u5f97\u66f4\u8fd1\uff0c\u8ddd\u79bb\u592a\u9633\u8868\u9762\u7ea64200\u4e07\u516c\u91cc\u3002\u4e0e\u6b64\u540c\u65f6\uff0cATLAS\u5f57\u661f\u5df2\u7ecf\u5728\u90a3\u91cc\uff0c\u63a5\u8fd1\u5b83\u81ea\u5df1\u7684\u8fd1\u65e5\u70b9\uff0c\u9884\u8ba15\u670831\u65e5\uff0c\u8ddd\u79bb\u592a\u9633\u7ea63700\u4e07\u516c\u91cc\u3002\n\u6b27\u7a7a\u5c40\u592a\u9633\u8f68\u9053\u5668\u9879\u76ee\u526f\u79d1\u5b66\u5bb6Yannis Zouganelis\u8bf4\uff1a\u201c\u8fd9\u6b21\u5c3e\u90e8\u7a7f\u8d8a\u4e5f\u662f\u4ee4\u4eba\u5174\u594b\u7684\uff0c\u56e0\u4e3a\u5b83\u5c06\u7b2c\u4e00\u6b21\u53d1\u751f\u5728\u79bb\u592a\u9633\u5982\u6b64\u8fd1\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u5f57\u6838\u4f4d\u4e8e\u6c34\u661f\u7684\u8f68\u9053\u5185\u201d\uff0c\u6b27\u7a7a\u5c40\u592a\u9633\u8f68\u9053\u5668\u9879\u76ee\u526f\u79d1\u5b66\u5bb6\u96c5\u5c3c\u65af\u00b7\u4f50\u52a0\u5185\u5229\u65af(Yannis Zouganelis)\u8bf4\u3002\n\u4e86\u89e3\u592a\u9633\u7cfb\u6700\u5185\u5c42\u7684\u5c18\u57c3\u73af\u5883\u662f\u592a\u9633\u8f68\u9053\u5668\u7684\u79d1\u5b66\u76ee\u6807\u4e4b\u4e00\u3002\nYannis\u8865\u5145\u8bf4\uff1a\u201c\u50cfATLAS\u5f57\u661f\u8fd9\u6837\u7684\u8fd1\u592a\u9633\u5f57\u661f\u662f\u5185\u65e5\u5149\u5c42\u5c18\u57c3\u7684\u6765\u6e90\uff0c\u56e0\u6b64\u8fd9\u9879\u7814\u7a76\u4e0d\u4ec5\u6709\u52a9\u4e8e\u6211\u4eec\u4e86\u89e3\u8fd9\u9897\u5f57\u661f\uff0c\u800c\u4e14\u8fd8\u6709\u52a9\u4e8e\u6211\u4eec\u4e86\u89e3\u6052\u661f\u7684\u5c18\u57c3\u73af\u5883\u3002\u201d\n\u5bf9\u4e8e\u592a\u9633\u8f68\u9053\u5668\u6765\u8bf4\uff0c\u89c2\u5bdf\u4e00\u4e2a\u7ed3\u51b0\u7684\u7269\u4f53\u800c\u4e0d\u662f\u707c\u70ed\u7684\u592a\u9633\uff0c\u5f53\u7136\u662f\u4e00\u79cd\u4ee4\u4eba\u5174\u594b\u548c\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u6765\u5f00\u59cb\u5b83\u7684\u79d1\u5b66\u4efb\u52a1\uff0c\u4f46\u8fd9\u662f\u79d1\u5b66\u7684\u672c\u8d28\u3002\n\u201c\u79d1\u5b66\u53d1\u73b0\u662f\u5efa\u7acb\u5728\u826f\u597d\u7684\u8ba1\u5212\u548c\u610f\u5916\u53d1\u73b0\u7684\u57fa\u7840\u4e0a\u7684\u3002\u5728\u53d1\u5c04\u540e\u7684\u4e09\u4e2a\u6708\u91cc\uff0c\u592a\u9633\u8f68\u9053\u5668\u56e2\u961f\u5df2\u7ecf\u8bc1\u660e\u5b83\u5df2\u7ecf\u4e3a\u8fd9\u4e24\u79cd\u60c5\u51b5\u505a\u597d\u4e86\u51c6\u5907\uff0c\u201c\u4e39\u5c3c\u5c14\u8bf4\u3002\nG.Jones\u7b49\u4eba(2020)\u7684\u201c\u592a\u9633\u8f68\u9053\u5668\u539f\u4f4d\u63a2\u6d4b\u5f57\u661fC/2019 Y4 ATLAS\u7684\u524d\u666f\u201d\u53d1\u8868\u5728\u201c\u7f8e\u56fd\u79d1\u5b66\u4fc3\u8fdb\u4f1a\u201d\u7684\u201c\u7814\u7a76\u7b14\u8bb0\u201d\u4e0a\u3002\n\u592a\u9633\u8f68\u9053\u5668\u662f\u6b27\u7a7a\u5c40\u9886\u5bfc\u7684\u4e00\u9879\u4efb\u52a1\uff0c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u6709\u5f88\u5f3a\u7684\u53c2\u4e0e\u3002\u8fd9\u662f\u6b27\u6d32\u822a\u5929\u5c40\u7a7a\u95f4\u79d1\u5b66\u4efb\u52a1\u7684\u5f53\u524d\u89c4\u5212\u5468\u671f--\u5b87\u5b99\u613f\u666f2015-25\u5e74\u8ba1\u5212\u4e2d\u5b9e\u65bd\u7684\u7b2c\u4e00\u4e2a\u201c\u4e2d\u7b49\u201d\u7ea7\u4efb\u52a1\u3002", "note_en": "ESA\u2019s Solar Orbiter will cross through the tails of Comet ATLAS during the next few days. Although the recently launched spacecraft was not due to be taking science data at this time, mission experts have worked to ensure that the four most relevant instruments will be switched on during the unique encounter.\n Solar Orbiter was  launched on 10 February 2020. Since then, and with the exception of a  brief shutdown due to the coronavirus pandemic, scientists and engineers have been conducting a series of tests and set-up routines known as commissioning.\n  The completion date for this phase was set at 15 June, so that the spacecraft could be fully functional for its first close pass of the Sun, or perihelion, in mid-June. However, the discovery of the chance encounter with the comet made things more urgent.\n Serendipitously flying through a comet\u2019s tail is a rare event for a space mission, something scientists know to have happened only six times before for missions that were not specifically chasing comets. All such encounters have been discovered in the spacecraft data after the event. Solar Orbiter\u2019s upcoming crossing is the first to be predicted in advance.\n It was noticed by Geraint Jones of the UCL Mullard Space Science Laboratory, UK, who has a 20-year history of investigating such encounters. He discovered the first accidental tail crossing in 2000, while investigating a strange disturbance in data recorded by the ESA/NASA Ulysses Sun-studying spacecraft in 1996. This study revealed that the spacecraft had  passed through the tail of Comet Hyakutake, also known as \u2018The Great Comet of 1996\u2019. Soon after the announcement, Ulysses crossed the tail of  another comet, and then a  third one in 2007.\n Earlier this month, realising that Solar Orbiter was going to be 44 million kilometres downstream of Comet C/2019 Y4 (ATLAS) in just a matter of weeks, Geraint immediately alerted the ESA team.\n  Solar Orbiter is equipped with a suite of 10 in-situ and remote-sensing instruments to investigate the Sun and the flow of charged particles it releases into space \u2013 the solar wind. Fortuitously, the four in-situ instruments are also perfect for detecting the comet\u2019s tails because they measure the conditions around the spacecraft, and so they could return data about the dust grains and the electrically charged particles given off by the comet. These emissions create the comet\u2019s two tails: the dust tail that is left behind in the comet\u2019s orbit and the ion tail that points straight away from the Sun.\n  Solar Orbiter will cross the ion tail of Comet ATLAS on 31\u00a0May\u20131\u00a0June, and the dust tail on 6\u00a0June. If the ion tail is dense enough, Solar Orbiter\u2019s magnetometer (MAG) might detect the variation of the interplanetary magnetic field because of its interaction with ions in the comet\u2019s tail, while the Solar Wind Analyser (SWA) could directly capture some of the tail particles.\n When Solar Orbiter crosses the dust tail, depending on its density \u2013 which is extremely difficult to predict \u2013 it is possible that one or more tiny dust grains may hit the spacecraft at speeds of tens of kilometres per second. While there is no significant risk to the spacecraft from this, the dust grains themselves will be vaporised on impact, forming tiny clouds of electrically charged gas, or plasma, which could be detected by the Radio and Plasma Waves (RPW) instrument.\n \u201cAn unexpected encounter like this provides a mission with unique opportunities and challenges, but that\u2019s good! Chances like this are all part of the adventure of science,\u201d says G\u00fcnther Hasinger, ESA Director of Science.\n One of those challenges was that the instruments seemed unlikely to all be ready in time because of the commissioning. Now, thanks to a special effort by the instrument teams and ESA\u2019s mission operations team, all four in-situ instruments will be on and collecting data, even though at certain times the instruments will need to be switched back into commissioning mode to ensure that the 15 June deadline is met.\n \u201cWith these caveats, we are ready for whatever Comet ATLAS has to tell us,\u201d says Daniel M\u00fcller, ESA Project Scientist for Solar Orbiter.\n  Another challenge entails the comet\u2019s behaviour. Comet ATLAS was discovered on 28 December 2019. During the next few months, it brightened so much that astronomers wondered whether it would become visible to the naked eye in May.\n Unfortunately, in early April  the comet fragmented. As a result, its brightness dropped significantly too, robbing sky watchers of the view. A further fragmentation in mid-May has diminished the comet even more, making it less likely to be detectable by Solar Orbiter.\n Although the chances of detection have reduced, the effort is still worth making according to Geraint.\n \u201cWith each encounter with a comet, we learn more about these intriguing objects. If Solar Orbiter detects Comet ATLAS&#39;s presence, then we&#39;ll learn more about how comets interact with the solar wind, and we can check, for example, whether our expectations of dust tail behaviour agree with our models,\u201d he explains. \u201cAll missions that encounter comets provide pieces of the jigsaw puzzle.\u201d\n Geraint is the principal investigator of ESA\u2019s future  Comet Interceptor mission, which consists of three spacecraft and is scheduled for launch in 2028. It will make a much closer flyby of an as yet unknown comet that will be selected from the newly discovered comets nearer the time of launch (or even after that).\n  Solar Orbiter is  currently circling our parent star between the orbits of Venus and Mercury, with its first perihelion to take place on 15 June, around 77 million kilometres from the Sun. In coming years, it will get much closer, within the orbit of Mercury, around 42 million kilometres from the solar surface. Meanwhile, Comet ATLAS is already there, approaching its own perihelion, which is expected on 31 May, around 37 million kilometres from the Sun.\n \u201cThis tail crossing is also exciting because it will happen for the first time at such close distances from the Sun, with the comet nucleus being inside the orbit of Mercury,\u201d says Yannis Zouganelis, ESA Deputy Project Scientist for Solar Orbiter.\n Understanding the dust environment in the innermost region of the Solar System is one of Solar Orbiter\u2019s  scientific objectives.\n \u201cNear-Sun comets like Comet ATLAS are sources of dust in the inner heliosphere and so this study will not only help us understand the comet, but also the dust environment of our star,\u201d adds Yannis.\n Looking at an icy object rather than the scorching Sun is certainly an exciting \u2013 and unexpected \u2013 way for Solar Orbiter to start its scientific mission, but that\u2019s the nature of science.\n \u201cScientific discovery is built on good planning and serendipity. In the three months since launch, the Solar Orbiter team has already proved that it\u2019s ready for both,\u201d says Daniel.\n  \u2018 Prospects for the In Situ detection of Comet C/2019 Y4 ATLAS by Solar Orbiter\u2019 by G. Jones et al (2020) is published in the  Research Notes of the AAS.\n Solar Orbiter is an ESA-led mission with strong NASA participation. It is the first \u2018medium\u2019-class mission implemented in the  Cosmic Vision 2015-25 programme, the current planning cycle for ESA\u2019s space science missions.", "posttime": "2020-05-29 23:39:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u9633,atlas,\u5f57\u661f", "title": "\u6b27\u7a7a\u5c40\u7684\u592a\u9633\u8f68\u9053\u5668\u5c06\u4e8e5\u670831\u65e5-6\u67081\u65e5\u7a7f\u8fc7ATLAS\u5f57\u661f\u7684\u5c3e\u5df4", "title_en": "ESA's Solar Orbiter will pass through comet ATLAS' tail on May 31-June 1", "transed": 1, "url": "http://www.esa.int/Science_Exploration/Space_Science/Solar_Orbiter/Solar_Orbiter_to_pass_through_the_tails_of_Comet_ATLAS", "via": "", "real_tags": ["\u592a\u9633", "atlas", "\u5f57\u661f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ed1\u5ba2\u30021.n.\u6700\u521d\uff0c\u4e00\u9879\u5feb\u901f\u7684\u5de5\u4f5c\uff0c\u751f\u4ea7\u6240\u9700\u7684\u4e1c\u897f\uff0c\u4f46\u4e0d\u662f\u5f88\u597d\u30022.n.\u4e00\u9879\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u5de5\u4f5c\uff0c\u4e5f\u8bb8\u662f\u975e\u5e38\u8017\u65f6\u7684\u5de5\u4f5c\uff0c\u5b83\u80fd\u51c6\u786e\u5730\u4ea7\u751f\u6240\u9700\u7684\u5185\u5bb9\u3002(\u4ee5\u6b64\u7c7b\u63a8\u3002)\u3002\n\u5982\u679c\u4f60\u8bfb\u4e86\u8fd9\u7bc7\u72c2\u70ed\u7684\u6587\u7ae0\uff0c\u5f88\u660e\u663e\uff0c\u5c3d\u7ba1\u8fd9\u7bc7\u6587\u7ae0\u5173\u6ce8\u7684\u662f\u9ed1\u5ba2\uff0c\u9ed1\u5ba2\uff0c\u5728\u8ba1\u7b97\u673a\u548c\u7f16\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u7684\u9ed1\u5ba2\uff0c\u4f46\u4e0e\u8ba1\u7b97\u673a\u548c\u7f16\u7a0b\u7684\u5173\u7cfb\u662f\u76f8\u5f53\u6b66\u65ad\u7684\u3002\u9ed1\u5ba2\u653b\u51fb\u7684\u771f\u6b63\u672c\u8d28\u5728\u522b\u5904\u3002\n\u4ee5hack\u5f00\u5934\u7684\u8bcd\u5927\u591a\u662f\u7531\u6070\u597d\u559c\u6b22\u7535\u8111\u6216\u7f16\u7a0b\u7684\u4eba\u4f7f\u7528\u7684\u3002\u56e0\u6b64\uff0c\u5f53\u884c\u8bdd\u6587\u4ef6\u63cf\u8ff0\u9ed1\u5ba2\u65f6\uff0c\u6240\u6709\u7684\u4f8b\u5b50\u90fd\u4e0e\u8fd9\u4e9b\u9886\u57df\u76f8\u5173\u3002\u4f46\u662f\uff0c\u6b63\u5982\u57c3\u91cc\u514b\u00b7S\u00b7\u96f7\u8499\u5fb7\u5728\u201c\u5927\u6559\u5802\u548c\u96c6\u5e02\u201d\u4e2d\u6307\u51fa\u7684\u90a3\u6837\uff0c\u4f5c\u4e3a\u4e00\u540d\u9ed1\u5ba2\u6839\u672c\u4e0d\u9700\u8981\u4e0e\u8ba1\u7b97\u673a\u548c\u7f16\u7a0b\u6253\u4ea4\u9053\u3002\n[\u2026]\u30026.\u4efb\u4f55\u79cd\u7c7b\u7684\u4e13\u5bb6\u6216\u70ed\u5fc3\u4eba\u58eb\u3002\u4f8b\u5982\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ef\u80fd\u662f\u5929\u6587\u5b66\u9ed1\u5ba2\u30027.\u559c\u6b22\u521b\u9020\u6027\u5730\u514b\u670d\u6216\u7ed5\u8fc7\u9650\u5236\u7684\u667a\u529b\u6311\u6218\u7684\u4eba\u3002\n\u5982\u679c\u6211\u4eec\u575a\u6301\u9ed1\u5ba2\u7684\u539f\u59cb\u610f\u4e49\uff0c\u5f3a\u8c03\u5982\u4f55\u63cf\u8ff0\u9ed1\u5ba2\u7684\u4f8b\u5b506\u548c7\uff0c\u6211\u8ba4\u4e3a\u5927\u591a\u65707\u5c81\u7684\u5b69\u5b50\u6bd4\u5927\u591a\u6570\u6210\u5e74\u4eba\u90fd\u662f\u66f4\u597d\u7684\u9ed1\u5ba2\u3002\n\u6211\u5c06\u89e3\u91ca\u5982\u4f55\u4ee5\u53ca\u4e3a\u4ec0\u4e48\uff0c\u6211\u5c06\u7528\u6211\u4f5c\u4e3a\u7236\u4eb2\u7684\u7ecf\u5386\u4e2d\u7684\u8f76\u4e8b\u6765\u8bc1\u660e\u6211\u7684\u89c2\u70b9\u3002\u662f\u7684\uff0c\u8fd9\u786e\u5b9e\u5c06\u6211\u7684\u6240\u6709\u8bba\u70b9\u5f52\u7c7b\u4e3a\u8f76\u4e8b\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u8f6f\u5f31\u7684\u3002\u901a\u5e38\u662f\u8fd9\u6837\u7684\uff0c\u81f3\u5c11\u662f\u8fd9\u6837--\u4f46\u5b83\u603b\u662f\u6b63\u786e\u7684\u5417\uff1f\n\u6211\u513f\u5b50\u548c\u6211\u7ecf\u5e38\u5728\u4e00\u8d77\u753b\u753b\u3002\u753b\u753b\u65f6\uff0c\u4ed6\u5c3d\u91cf\u753b\u5f97\u597d\uff0c\u4f46\u4ed6\u5e76\u4e0d\u592a\u5728\u610f\u81ea\u5df1\u662f\u5426\u5931\u8d25\u3002\n\u6211\u60f3\uff0c\u4ed6\u60f3\u66f4\u597d\u5730\u753b\u753b\uff0c\u4ee5\u4fbf\u6709\u5de5\u5177\u6765\u5b9e\u73b0\u4ed6\u7684\u60f3\u6cd5\u3002\u56e0\u6b64\uff0c\u5f53\u4ed6\u5bf9\u7ed3\u679c\u4e0d\u6ee1\u610f\u65f6\uff0c\u6709\u65f6\u4f1a\u611f\u5230\u60b2\u4f24\u6216\u6124\u6012\u3002\u5931\u8d25\u5bf9\u4ed6\u6765\u8bf4\u662f\u7167\u5e38\u7684\u4e8b\uff0c\u4ed6\u5e76\u4e0d\u4ecb\u610f\u3002\u5927\u591a\u6570\u5b69\u5b50\u90fd\u5f88\u5584\u4e8e\u4ece\u5931\u8d25\u4e2d\u5b66\u4e60\u3002\u6210\u5e74\u4eba\u662f\u8fd9\u6837\u5417\uff1f\n\u90a3\u6211\u5462\uff1f\u6211\u559c\u6b22\u753b\u753b\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u505a\u5176\u4ed6\u7684\u4e8b\u60c5\u3002\u5982\u679c\u4e0d\u662f\u56e0\u4e3a\u4ed6\uff0c\u6211\u6c38\u8fdc\u4e0d\u4f1a\u753b\u753b\u3002\u4f46\u6211\u7684\u7ecf\u9a8c\u662f\uff0c\u5149\u505a\u4e8b\u60c5\u5f88\u65e0\u804a\u3002\u56e0\u6b64\uff0c\u6211\u4ece\u548c\u6211\u4e03\u5c81\u7684\u513f\u5b50\u4e00\u8d77\u51fa\u53bb\u73a9\u4e2d\u83b7\u5f97\u80fd\u91cf\uff0c\u4ece\u4ed6\u7684\u521b\u9020\u529b\u548c\u597d\u5947\u5fc3\u4e2d\u83b7\u5f97\u80fd\u91cf\u3002\n\u6211\u8bd5\u7740\u5728\u7ed8\u753b\u65f6\u8fd0\u7528\u4e03\u5c81\u5c0f\u5b69\u7684\u5fc3\u6001\uff0c\u8fd9\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u6211\u7684\u7ed8\u753b\u6280\u5de7\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u5f15\u53d1\u4e86\u5bf9\u66f4\u591a\u7684\u6e34\u671b\u3002\u4e00\u79cd\u5feb\u4e50\u3002\u6211\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u5f97\u5f88\u597d\uff0c\u4f46\u6211\u4f1a\u53d8\u5f97\u66f4\u597d\u3002\u6b64\u5916\uff0c\u8fd9\u4e5f\u65e0\u5173\u7d27\u8981\u3002\n\u5f53\u6211\u4eec\u5bf9\u4e8b\u60c5\u5145\u6ee1\u70ed\u60c5\u65f6\uff0c\u6211\u4eec\u5c31\u4f1a\u8fdb\u6b65\u5f88\u5feb\u3002\u4f5c\u4e3a\u6210\u5e74\u4eba\uff0c\u6211\u4eec\u4e0d\u80fd\u50cf\u5b69\u5b50\u4e00\u6837\u8fdb\u6b65\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u65b0\u4e8b\u7269\uff0c\u5373\u4f7f\u662f\u5728\u5e74\u8001\u7684\u65f6\u5019\u3002\u60f3\u8981\u53d8\u5f97\u66f4\u597d\uff0c\u901a\u5e38\u53ea\u662f\u4e00\u4e2a\u60f3\u529e\u6cd5\u5f15\u8d77\u5174\u8da3\u7684\u95ee\u9898\u3002\u91ca\u653e\u521b\u9020\u529b\u7684\u65b9\u6cd5\u3002\n\u521b\u9020\u529b\u9700\u8981\u52c7\u6c14\u3002\u5982\u679c\u4f60\u4e0d\u5c55\u793a\u81ea\u5df1\u7684\u6240\u4f5c\u6240\u4e3a\u4e0d\u8981\u7d27\uff0c\u8fd9\u4ecd\u7136\u9700\u8981\u52c7\u6c14\uff0c\u56e0\u4e3a\u81f3\u5c11\u4f60\u4f1a\u770b\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u4f60\u4f1a\u81ea\u5df1\u5224\u65ad\u7684\u3002\u4e5f\u8bb8\u4e0d\u662f\u5f88\u523b\u8584\uff0c\u4e5f\u8bb8\u53ea\u662f\u5e26\u7740\u8bbd\u523a\u548c\u5a31\u4e50\u3002\u4f46\u4f60\u4f1a\u5224\u65ad\u51fa\u6765\u7684\u3002\u5982\u679c\u4f60\u4e0d\u5728\u4e4e\uff0c\u4f60\u5c31\u4e0d\u4f1a\u753b\u753b\uff0c\u4e0d\u4f1a\u5199\u6587\u5b57\uff0c\u4e0d\u4f1a\u5199\u97f3\u4e50\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u5df1\u52a8\u624b\u505a\u7535\u8111\u7a0b\u5e8f\u3002\n\u4f5c\u4e3a\u6210\u5e74\u4eba\uff0c\u6211\u4eec\u4e0d\u80fd\u63a5\u8fd17\u5c81\u7684\u5b69\u5b50\u63a2\u7d22\u4e16\u754c\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u3002\u6211\u4eec\u53ea\u9700\u8981\u50cf\u4e00\u4e2a7\u5c81\u7684\u5b69\u5b50\u4e00\u6837\u66f4\u597d\u5730\u7834\u89e3\u8fd9\u4e2a\u4e16\u754c\u3002\n\u542c\u8d77\u6765\uff0c\u6211\u4eec\u7684\u5b69\u5b50\u628a\u6211\u4eec\u8fd9\u4e9b\u6210\u5e74\u4eba\u5f53\u4f5c\u699c\u6837\uff0c\u4ed6\u4eec\u88ab\u6211\u4eec\u3001\u6211\u4eec\u7684\u6240\u4f5c\u6240\u4e3a\u3001\u6211\u4eec\u7684\u8a00\u8bba\u548c\u6211\u4eec\u7684\u884c\u4e3a\u6240\u6fc0\u52b1\u3002\u7136\u800c\uff0c\u5c31\u521b\u9020\u529b\u548c\u9ed1\u5ba2\u884c\u4e3a\u800c\u8a00\uff0c\u4f60\u4e0d\u5fc5\u82b1\u592a\u591a\u65f6\u95f4\u7528\u4e50\u9ad8\u79ef\u6728\u3001\u753b\u753b\u3001\u73a9\u800d\u548c\u8ba8\u8bba\uff0c\u5c31\u4f1a\u610f\u8bc6\u5230\u5728\u5b8c\u6210\u4e8b\u60c5\u3001\u89e3\u51b3\u4e0e\u521b\u9020\u6027\u4efb\u52a1\u76f8\u5173\u7684\u95ee\u9898\u65b9\u9762\uff0c\u4f60\u5c06\u6bd4\u4e0d\u4e0a\u4f607\u5c81\u7684\u5b69\u5b50\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u6210\u5e74\u4eba\uff0c\u4f60\u53ef\u80fd\u4f1a\u505a\u51fa\u4e00\u4ef6\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u4f5c\u54c1\uff0c\u800c\u4e14\u53ef\u80fd\u975e\u5e38\u8017\u65f6\uff0c\u80fd\u751f\u4ea7\u51fa\u4f60\u6240\u9700\u8981\u7684\u4e1c\u897f(\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u662f\u9ed1\u5ba2)\uff0c\u4f46\u4f60\u4e0d\u592a\u53ef\u80fd\u5728\u751f\u4ea7\u6240\u9700\u4e1c\u897f\u7684\u5feb\u901f\u5de5\u4f5c\u65b9\u9762\u8d76\u4e0a\u4f607\u5c81\u7684\u5b69\u5b50\u3002(\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u662f\u9ed1\u5ba2\u653b\u51fb\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50)\uff0c\u4f60\u53ef\u80fd\u4f1a\u505a\u51fa\u4e00\u4ef6\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u4f5c\u54c1\uff0c\u4e5f\u8bb8\u975e\u5e38\u8017\u65f6\uff0c\u4f46\u4f60\u4e0d\u592a\u53ef\u80fd\u50cf\u4f607\u5c81\u7684\u5b69\u5b50\u90a3\u6837\u5feb\u901f\u5730\u751f\u4ea7\u51fa\u6240\u9700\u7684\u4e1c\u897f\u3002(\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u662f\u9ed1\u5ba2\u653b\u51fb\u4f60\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50)\uff0c\u4f60\u53ef\u80fd\u4f1a\u505a\u51fa\u4e00\u4ef6\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u597d\u4f5c\u54c1\uff0c\u800c\u4e14\u53ef\u80fd\u975e\u5e38\u8017\u65f6\u3002\n\u6211\u8d8a\u662f\u53cd\u601d\u827e\u4f26\u00b7\u51ef(Alan Kay)\u65e9\u671f\u7684\u9879\u76ee\uff0c\u4ee5\u53ca\u4ed6\u5173\u4e8e\u6559\u80b2\u548c\u52a8\u6001\u4e16\u754c(Dynamicland)\u7684\u601d\u60f3(\u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u540d\u5b57\u6709\u70b9\u50cf\u51ef\u7684\u201c\u52a8\u6001\u56fe\u4e66\u201d(DynaBook)\u6982\u5ff5)\uff0c\u6211\u5c31\u8d8a\u786e\u4fe1\u6211\u4eec\u9700\u8981\u91cd\u65b0\u601d\u8003\u6559\u80b2\u3002\n\u672a\u6765\u9700\u8981\u66f4\u591a\u7684\u9ed1\u5ba2\uff0c\u800c\u4e0d\u662f\u66f4\u5c11\u3002\u4f5c\u4e3a\u4e00\u540d\u5bb6\u957f\uff0c\u4f60\u4e0d\u4f1a\u60f3\u8981\u62c5\u5fc3\u4f607\u5c81\u7684\u5b69\u5b50\u5728\u957f\u5927\u548c\u63a5\u53d7\u66f4\u8ba4\u771f\u7684\u6559\u80b2\u540e\uff0c\u521b\u9020\u529b\u4f1a\u67af\u840e\u548c\u6d88\u5931\u3002\n\u8001\u5b9e\u8bf4\uff0c\u5f53\u6211\u4eec\u4f5c\u4e3a\u6210\u5e74\u4eba\u56de\u60f3\u8d77\u6765\u7684\u65f6\u5019\uff0c\u6211\u4eec\u80fd\u8bf4\u6211\u4eec\u73b0\u5728\u548c\u8fc7\u53bb\u4e00\u6837\u6709\u521b\u9020\u529b\u5417\uff1f\u6211\u4e00\u4e2a\u4eba\u90fd\u4e0d\u80fd\u3002\u6211\u73b0\u5728\u4e0d\u50cf\u4e03\u5c81\u65f6\u90a3\u6837\u662f\u4e2a\u9ed1\u5ba2\u4e86\u3002\n\u6210\u5e74\u4eba\u5931\u8d25\u4e86\uff0c7\u5c81\u7684\u5b69\u5b50(\u5728\u6b64\u523b)\u53ea\u662f\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u80fd\u5b9e\u73b0\u4e00\u4e9b\u5b8f\u4f1f\u7684\u613f\u666f\u800c\u60b2\u4f24\u3002\u8fd9\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u4f53\u9a8c\uff1b\u4e5f\u8bb8\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e487\u5c81\u7684\u5b69\u5b50\u6bd4\u6210\u5e74\u4eba\u66f4\u64c5\u957f\u9ed1\u5ba2\u3002\u2026\u3002\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u4f1a\u771f\u7684\u5931\u8d25\u5417\uff1f", "note_en": "HACK. 1. n. Originally, a quick job that produces what is needed, but not well. 2. n. An incredibly good, and perhaps very time-consuming, piece of work that produces exactly what is needed. ( And so on.)\n If you read this cult text it&#39;s clear that even though this text focus hack, hacker, hackish in the context of computers and programming the relation to computers and programming is quite arbitrary. The true essence of hacking lies elsewhere.\n Words beginning with hack mostly are used by people who happen to enjoy computers or programming. And therefore when The Jargon File describes a &#39;hacker&#39; all examples are related to such areas. But as  Eric S. Raymond notes in The Cathedral and the Bazaar, being a hacker doesn&#39;t have to do anything at all with computers and programming.\n  [\u2026] 6. An expert or enthusiast of any kind. One might be an astronomy hacker, for example. 7. One who enjoys the intellectual challenge of creatively overcoming or circumventing limitations.\n If we hold by the original sense of a hack, emphasize examples 6 and 7 of how to describe a hacker, I argue that most seven-year-olds are better hackers than most adults.\n I will explain how and why, and I will use anecdotes from my experience as a father as a &#39;proof&#39; for my point. And yes, this does classify all my arguments as  &#39;anecdotical&#39; and they should, therefore, be considered weak. Often true, at least -  but is it always true though?\n My son and I draw a lot together. When drawing, he tries to draw as good as he can, but he doesn&#39;t care much if he &#39;fails&#39;.\n He wants to get better at drawing to have tools to materialize his ideas, I guess. And therefore he sometimes gets sad or angry a short while when he is not satisfied with the result. &#39;Failing&#39; is business as usual for him, he doesn&#39;t mind. Most kids are great at learning from failure. Is this true for adults?\n And me? I like to draw, but I like doing other things more. If it weren&#39;t for him, I would never draw. But my experience is that &#39;just doing things&#39; is boring. Therefore I get energy from hanging out with my seven-year-old, from his creativity and curiosity.\n I&#39;ve tried to apply the mindset of a seven-year-old when drawing, and this has vastly improved my drawing skills. More importantly, it has triggered a hunger for more. A joy. I will never get very good, but I will get better. Also, it doesn&#39;t matter.\n   When we&#39;re passionate about things we make progress quickly. As adults, we can&#39;t progress at the same speed as kids, but we can learn new things, even at an old age. Often &#39;getting better&#39; is only a question of finding ways of getting intrigued. Ways of unlocking creativity.\n Creativity takes courage. It doesn&#39;t matter if you don&#39;t show what you do, it still takes courage because at least you will see the end product. You will judge it yourself. Perhaps not harsly, perhaps only with irony and amusement. But judge it you will. If you didn&#39;t care, you would not draw, write a text, a piece of music, or an DIY computer program.\n As adults, we can&#39;t get close to seven-year-olds exploring the world. But we can try. We just have to get better at hacking the world like a seven-year-old.\n   It&#39;s sound that our children have us, adults, as role models, that they are inspired by us, by what we do, what we say, and by how we act. However, with regard to creativity and hacking, you don&#39;t have to spend much time building with lego, drawing, playing and discussing to realize that you won&#39;t match your seven-year-old in terms of getting things done, solving problems related to creative tasks.\n As an adult, you may make &#39;[a]n incredibly good, and perhaps very time-consuming, piece of work that produces exactly what is needed&#39; (the second example of &#39;hack&#39;), but it&#39;s unlikely that you&#39;ll match your seven-year-old in &#39;a quick job that produces what is needed&#39;.\n      The more I reflect on the early projects of Alan Kay and his ideas on education and  Dynamicland (a name flirting with Kay&#39;s  notion of a &#39;dynabook&#39;, I think), the more convinced I get that we need to  rethink education.\n The future needs more hackers, not less. And as a parent, you don&#39;t want to be anxious that the creativity of your seven-year-old, when older and more seriously schooled, will wither and vanish.\n Honestly, when we as adults think back, can we say we&#39;re as creative now as we used to be? I can&#39;t for one. I am less of a hacker now than I was seven years old.\n  Adults fail, seven-year-olds are just sad (in the moment) because they were not able to materialize some grande vision. This is two separate experiences; and perhaps this is precisely why seven-year-olds are better hackers than adults? \u2026because they don&#39;t really fail?", "posttime": "2020-05-29 23:39:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed1\u5ba2,olds", "title": "7\u5c81\u7684\u5b69\u5b50\u662f\u9ed1\u5ba2\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u6a21\u4eff\u4ed6\u4eec", "title_en": "Seven-year-olds as hackers, and why we should imitate them", "transed": 1, "url": "https://herebeseaswines.net/essays/2020-05-29-seven-year-olds-as-hackers-and-why-we-should-imitate-them", "via": "", "real_tags": ["\u9ed1\u5ba2", "olds"]}, {"category": "", "categoryclass": "", "imagename": "b749239fede2de70bc371ce330360235.jpg", "infoid": 1004257, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9Dropbox\u7684\u4ea7\u54c1\u8bbe\u8ba1\u611f\u5174\u8da3\u5417\uff1f\u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u7528\u6765\u89e3\u51b3\u95ee\u9898\u3001\u505a\u51fa\u51b3\u7b56\u548c\u4ea4\u6d41\u60f3\u6cd5\u7684\u5de5\u5177\u3002", "note_en": "Curious about product design at Dropbox? Here\u2019s a look at tools we use for solving problems, making decisions, and communicating ideas. ", "posttime": "2020-05-29 23:38:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u5fc3\u667a,models,\u4ea7\u54c1\u8bbe\u8ba1", "title": "\u8bbe\u8ba1\u5e08\u5fc3\u667a\u6a21\u578b(2019)", "title_en": "Mental models for designers (2019)", "transed": 1, "url": "https://dropbox.design/article/mental-models-for-designers", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u5fc3\u667a", "models", "\u4ea7\u54c1\u8bbe\u8ba1"]}]