[{"category": "", "categoryclass": "", "imagename": "fcb232f09df0e1d292bd8627e079093b.png", "infoid": 1000259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(\u7ed9\u8bfb\u8005\u7684\u5feb\u901f\u8bf4\u660e-\u8fd9\u662f\u4e00\u7bc7\u7eaf\u7cb9\u57fa\u4e8e\u89c2\u70b9\u7684\u6587\u7ae0\uff0c\u4ece\u6211\u7684\u7ecf\u9a8c\u4e2d\u63d0\u70bc\u51fa\u6765)\u3002\n\u6211\u53c2\u4e0e\u4e86\u8bb8\u591a\u57fa\u4e8e\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba8\u8bba\u3001\u5ba1\u67e5\u548c\u5b9e\u73b0\uff0c\u5e76\u5c06\u8bb8\u591a\u57fa\u4e8e\u5fae\u670d\u52a1\u7684\u7cfb\u7edf\u4ea4\u4ed8\u751f\u4ea7\u3002\u6211\u975e\u5e38\u540c\u610f\u9a6c\u4e01\u00b7\u798f\u52d2\u7684\u201c\u5de8\u77f3\u4f18\u5148\u201d\u7684\u505a\u6cd5\u3002\u7136\u800c\uff0c\u6211\u770b\u5230\u5f88\u591a\u4eba\u8d70\u7684\u662f\u76f8\u53cd\u7684\u65b9\u5411\uff0c\u8ba4\u4e3a\u63d0\u524d\u4f18\u5316\u662f\u5408\u7406\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u7a33\u5b9a\u548c\u6df7\u4e71\u3002\n\u5982\u679c\u60a8\u4ec5\u4ec5\u4e3a\u4e86\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u76ee\u7684\u800c\u6784\u5efa\u5fae\u670d\u52a1\uff0c\u4e86\u89e3\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u60a8\u5c06\u4f1a\u9047\u5230\u5f88\u5927\u7684\u9ebb\u70e6\u3002\n\u8ba9\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5728\u7535\u5b50\u5546\u52a1\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u5c06\u662f\u5355\u7247\u7248\u672c\u7684\u8ba2\u5355\u6d41\u3002\n\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\uff0c\u4e8b\u52a1\u88ab\u4e24\u4e2a\u670d\u52a1\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u4e8b\u52a1\uff0c\u73b0\u5728\u539f\u5b50\u6027\u9700\u8981\u7531API\u63a7\u5236\u5668\u7ba1\u7406\u3002\n\u5728\u6784\u5efa\u5fae\u670d\u52a1\u65f6\u9700\u8981\u907f\u514d\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002\u5982\u679c\u60a8\u5728\u591a\u4e2a\u5fae\u670d\u52a1\u4e2d\u4ea7\u751f\u4e8b\u52a1\uff0c\u6216\u8005\u8c03\u7528\u591a\u4e2aRESTAPI\u6216\u53d1\u5e03/\u8ba2\u9605(\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8fdb\u7a0b\u5185\u5355\u4e2a\u670d\u52a1\u548c\u5355\u4e2a\u6570\u636e\u5e93\u8f7b\u677e\u5b8c\u6210)\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u60a8\u7684\u64cd\u4f5c\u65b9\u5f0f\u662f\u9519\u8bef\u7684\u3002\n\u6df7\u4e71\u6d4b\u8bd5\uff0c\u4e0e\u6b63\u5728\u8fdb\u884c\u7684\u4ea4\u6613\u4e2d\u7684\u6d4b\u8bd5\u76f8\u6bd4\u3002\u8981\u7a33\u5b9a\u4ee5\u5206\u5e03\u5f0f\u65b9\u5f0f\u7f16\u5199\u7684\u7279\u6027\u771f\u7684\u5f88\u96be\uff0c\u56e0\u4e3a\u60a8\u4e0d\u4ec5\u8981\u6d4b\u8bd5\u6109\u5feb\u7684\u60c5\u51b5\uff0c\u8fd8\u8981\u6d4b\u8bd5RESTAPI\u7684\u670d\u52a1\u4e2d\u65ad\u3001\u8d85\u65f6\u548c\u9519\u8bef\u5904\u7406\u7b49\u60c5\u51b5\u3002\n\u6392\u5e8f\uff0c\u5b9e\u9645\u4e0a\uff0c\u5f53\u6d89\u53ca\u5230\u4e8b\u52a1\u65f6\uff0c\u6bcf\u4e2a\u4eba\u90fd\u9700\u8981\u67d0\u79cd\u6392\u5e8f\uff0c\u4f46\u662f\u8981\u7a33\u5b9a\u4e00\u4e2a\u5f02\u6b65\u7684(\u5982node.js)\u548c\u5206\u5e03\u5f0f\u7684\u7cfb\u7edf\u5e76\u4e0d\u5bb9\u6613\u3002\n\u6027\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\uff0c\u662f\u8fc7\u65e9\u4f18\u5316\u7684\u526f\u4ea7\u54c1\u3002\u6700\u521d\uff0c\u60a8\u7684\u4e8b\u52a1\u53ef\u80fd\u4e0d\u5904\u7406\u5927\u578bJSON\uff0c\u4f46\u53ef\u80fd\u7a0d\u540e\u51fa\u73b0\uff0c\u5e76\u4e14\u5728\u540e\u7eed\u4ee3\u7801\u548c\u4e8b\u52a1\u53ef\u4ee5\u8bbf\u95ee\u76f8\u540c\u5185\u5b58\u7684\u8fdb\u7a0b\u4e2d\uff0c\u5728\u5206\u53d1\u4e8b\u52a1\u7684\u5fae\u670d\u52a1\u4e16\u754c\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u75db\u82e6\u7684(\u73b0\u5728\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u5c06\u591a\u6b21\u52a0\u8f7d\u6570\u636e\u3001\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u6216\u76f8\u540c\u7684\u5927\u578bDB\u8c03\u7528)\u3002\n\u91cd\u6784\uff0c\u6bcf\u6b21\u60a8\u5728\u8bbe\u8ba1\u7ea7\u522b\u4e0a\u8fdb\u884c\u66f4\u6539\uff0c\u90fd\u4f1a\u51fa\u73b0\u65b0\u7684\u95ee\u9898(1-3\u4e2a)\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5de5\u7a0b\u56e2\u961f\u53d8\u5f97\u201c\u6297\u62d2\u66f4\u6539\u201d\u3002\n\u6162\u529f\u80fd\uff0c\u5fae\u670d\u52a1\u80cc\u540e\u7684\u6574\u4e2a\u6982\u5ff5\u662f\u201c\u72ec\u7acb\u800c\u5feb\u901f\u5730\u6784\u5efa\u548c\u90e8\u7f72\u529f\u80fd\u201d\uff0c\u4f46\u662f\u73b0\u5728\u60a8\u53ef\u80fd\u9700\u8981\u6784\u5efa\u3001\u6d4b\u8bd5\u3001\u7a33\u5b9a\u548c\u90e8\u7f72\u5927\u91cf\u670d\u52a1\uff0c\u800c\u8fd9\u4f1a\u51cf\u6162\u901f\u5ea6\u3002\n\u5982\u679c\u672a\u4f18\u5316\u786c\u4ef6\u5229\u7528\u7387\uff0c\u5219\u5f88\u6709\u53ef\u80fd\u5927\u591a\u6570\u786c\u4ef6\u672a\u5f97\u5230\u5145\u5206\u5229\u7528\uff0c\u60a8\u53ef\u80fd\u4f1a\u5f00\u59cb\u5728\u540c\u4e00\u5bb9\u5668\u6216\u76f8\u540c\u865a\u62df\u673a\u4e2d\u8fd0\u9001\u8bb8\u591a\u670d\u52a1\uff0c\u4ece\u800c\u5bfc\u81f4\u9ad8I/O\u3002\u7a81\u7136\uff0c\u5982\u679c\u7cfb\u7edf\u6536\u5230\u4e00\u4e9b\u5927\u8bf7\u6c42\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5176\u8fc7\u5ea6\u5229\u7528\uff0c\u8fd9\u5c06\u4f7f\u60a8\u5c06\u8be5\u7ec4\u4ef6\u5206\u79bb\u51fa\u6765\uff0c\u5982\u679c\u6b64\u7c7b\u8bf7\u6c42\u4e0d\u518d\u51fa\u73b0\uff0c\u5219\u4f1a\u8fdb\u4e00\u6b65\u4f7f\u7cfb\u7edf\u672a\u5f97\u5230\u5145\u5206\u5229\u7528\uff0c\u73b0\u5728\u5c06\u6709\u4e00\u4e2a\u56e2\u961f\u6765\u5904\u7406\u8fd9\u79cd\u65e0\u9650.\u3002\n\u4e0d\u8981\u5c06\u5fae\u670d\u52a1\u89c6\u4e3a\u7c7b\u4f3c\u4e8e\u91cd\u6784\u4e0d\u540c\u76ee\u5f55\u4e2d\u7684\u4ee3\u7801\u7684\u7ec3\u4e60\u3002\u5982\u679c\u4e00\u4e9b\u4ee3\u7801\u6587\u4ef6\u5728\u903b\u8f91\u4e0a\u770b\u8d77\u6765\u662f\u5206\u5f00\u7684\uff0c\u90a3\u4e48\u5c06\u5b83\u4eec\u5206\u5f00\u653e\u5728\u4e00\u4e2a\u5305\u4e2d\u603b\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u7136\u800c\uff0c\u5728\u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a\u5fae\u670d\u52a1\u53ea\u4e0d\u8fc7\u662f\u8fc7\u65e9\u7684\u4f18\u5316\u3002\n\u5982\u679c\u9700\u8981\u8c03\u7528RESTAPI\u6765\u5b8c\u6210\u8bf7\u6c42\uff0c\u8bf7\u4e09\u601d\u800c\u540e\u884c(\u6211\u5efa\u8bae\u5b8c\u5168\u907f\u514d)\u3002\u57fa\u4e8e\u6d88\u606f\u4f20\u9012\u7684\u7cfb\u7edf\u4e5f\u662f\u5982\u6b64\uff0c\u5728\u521b\u5efa\u65b0\u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u524d\uff0c\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u5b83\u4eec\u3002\n\u59cb\u7ec8\u5173\u6ce8\u4e0d\u540c\u7684\u7528\u6237\u4f53\u9a8c\u548c\u4e0d\u540c\u7684\u4f38\u7f29\u9700\u6c42\uff0c\u6bd4\u5982\u5bf9\u4e8e\u7535\u5546\u6765\u8bf4\uff0cAPI\u662f\u5e9e\u5927\u7684\u3001\u4e8b\u52a1\u6027\u7684\uff0c\u4e0e\u6d88\u8d39\u8005API\u76f8\u6bd4\uff0c\u5b83\u662f\u8bc6\u522b\u7ec4\u4ef6\u7684\u597d\u65b9\u6cd5\u3002\n\u907f\u514d\u96c6\u6210\u6d4b\u8bd5(\u662f\u7684\uff0c\u60a8\u521a\u624d\u6ca1\u542c\u9519)\u3002\u5982\u679c\u60a8\u521b\u5efa\u4e8610\u4e2a\u670d\u52a1\u5e76\u7f16\u5199\u4e86\u6570\u767e\u4e2a\u96c6\u6210\u6d4b\u8bd5\uff0c\u90a3\u4e48\u60a8\u6b63\u5728\u5236\u9020\u4e00\u4e2a\u6df7\u4e71\u7684\u5c40\u9762\u3002\u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u4ece2-4\u4e2a\u670d\u52a1\u5f00\u59cb\uff0c\u7f16\u5199\u6570\u767e\u4e2a\u5355\u5143\u6d4b\u8bd5\uff0c\u7136\u540e\u7f16\u51995\u4e2a\u96c6\u6210\u6d4b\u8bd5\uff0c\u6211\u76f8\u4fe1\u60a8\u7a0d\u540e\u4e0d\u4f1a\u540e\u6094\u7684\u3002\n\u8003\u8651\u6279\u5904\u7406\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8bbe\u8ba1\u5c06\u88ab\u8bc1\u660e\u5728\u6027\u80fd\u4e0a\u5f88\u597d\uff0c\u5e76\u4e14\u4e0d\u90a3\u4e48\u6df7\u4e71\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u5728\u7535\u5b50\u5546\u52a1\u4e2d\uff0c\u4f9b\u5e94\u5546\u548c\u6d88\u8d39\u8005\u6570\u636e\u5e93\u4e2d\u90fd\u6709\u4ea7\u54c1\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u4e0d\u9700\u8981\u7f16\u5199\u5206\u5e03\u5f0f\u4e8b\u52a1\u6765\u5728\u4e24\u4e2aDB\u4e2d\u5236\u9020\u65b0\u4ea7\u54c1\uff0c\u800c\u662f\u53ef\u4ee5\u9996\u5148\u53ea\u5728\u4f9b\u5e94\u5546DB\u4e2d\u5199\u5165\uff0c\u7136\u540e\u8fd0\u884c\u6279\u5904\u7406\u8fc7\u7a0b\u6765\u6311\u9009100\u4e2a\u65b0\u4ea7\u54c1\u5e76\u5c06\u5b83\u4eec\u63d2\u5165\u5230Consumer DB\u4e2d\u3002\n\u8003\u8651\u8bbe\u7f6e\u5ba1\u8ba1\u7a0b\u5e8f\u6216\u521b\u5efa\u60a8\u81ea\u5df1\u7684\u5ba1\u8ba1\u7a0b\u5e8f\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5728\u539f\u5b50\u64cd\u4f5c\u5931\u8d25\u65f6\u8f7b\u677e\u5730\u8fdb\u884c\u8c03\u8bd5\u548c\u4fee\u590d\uff0c\u800c\u4e0d\u662f\u67e5\u770b\u4e0d\u540c\u7684\u6570\u636e\u5e93\u3002\u5982\u679c\u60a8\u5e0c\u671b\u51cf\u5c11\u6df1\u591c\u95f4\u6b47\u6027\u9519\u8bef\u4fee\u590d\uff0c\u8bf7\u5c3d\u65e9\u8bbe\u7f6e\u5e76\u5728\u6240\u6709\u5730\u65b9\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u662f\u8fd9\u6837\u7684\u3002\n\u6211\u5efa\u8bae\u5ffd\u7565\u540c\u6b65\u3002\u6211\u89c1\u8fc7\u8bb8\u591a\u4eba\u8bd5\u56fe\u7528\u5b83\u6765\u7a33\u5b9a\u751f\u6001\u7cfb\u7edf\uff0c\u4f46\u5b83\u4f1a\u5e26\u6765\u65b0\u7684\u95ee\u9898(\u6bd4\u5982\u8d85\u65f6)\uff0c\u7136\u540e\u53c8\u4f1a\u4fee\u590d\u3002\u6700\u540e\uff0c\u670d\u52a1\u5e94\u8be5\u4fdd\u6301\u53ef\u4f38\u7f29\u6027\u3002\n", "note_en": "(A Quick Note for the Readers- This is purely an opinion-based article distilled out of my experiences)\n I\u2019ve been a part of many Architecture-based discussions, reviews, and implementations, and have shipped many microservices\u2019 based systems to the production. I pretty much agree with the \u2018Monolith first\u2019 approach of Martin Fowler. However, I\u2019ve seen many people go in the opposite direction and justifying the pre-mature optimization, which can lead to an unstable and chaotic system.\n It\u2019s highly important to understand if you are building microservices just for the purpose of distributed transactions, you\u2019re going to land onto great trouble.\n  Let\u2019s go by an example, in an Ecommerce app this will be the order flow in a monolithic version\n    In this version, the transaction is dived into two separate transactions by two services and now the atomicity needs to be managed by the API controller.\n You need to avoid distributed transactions while building microservices. If you\u2019re spawning your transactions in multiple microservices or calling multiple rest APIs or PUB/SUB, which can be easily done with in-process single service and a single database, then there\u2019s a high chance that you\u2019re doing it the wrong way.\n  Chaotic testing, as compared to the ones in in-process transactions. It\u2019s really hard to stabilize features written in a distributed fashion, as you not only test happy cases but also cases like service down, timeout, and error handlings of rest APIs.\n  Sequencing, in real word everyone needs some kind of sequencing when it comes to transactions, but it\u2019s not easy to stabilize a system that is asynchronous (like node.js) and distributed.\n Performance, which is a big one and is a by-product of premature optimization. Initially, your transactions might not handle big jsons, but might appear later, and in-process where the same memory is accessible to subsequent codes and transactions, in microservice world where a transaction is distributed it could be painful (now every microservices will load data, serialize and deserialize or same large Db calls multiple time).\n Refactoring, every time you make changes in the design level, you will end up having new problems (1-3), which leads to engineering team a mod \u201cresistant to change\u201d\n Slow features, the whole concept behind microservices is to \u201cbuild and deploy features independently and fast\u201d but now you may need to build, test, stabilize, and deploy bunch of services and it will slow down\n Unoptimized hardware utilization, there is a high chance that most of the hardware will be under utilized and you might be start shipping many services in same container or same VMs, resulting in high I/O. Suddenly if some big request comes into the system, it could make it go hyper utilized, which will then make you separate that component out, further making the system under-utilized if these kind of requests are not coming anymore, and now there will be a team to handle this infinite  ...\n  Don\u2019t think of microservices as an exercise similar to refactoration of code in different directories. If some code files seem to be logically separated, it\u2019s always a good idea to separate them in one package, however, to create a microservice herein is nothing but premature optimization.\n If you need to call rest APIs to complete a request, think twice about it (I would rather recommend to avoid it completely). Same goes for a messaging-based system before creating new producers and consumers, try not to have them at all.\n Always focus on different user experiences and their diverse scaling requirements, like for e-commerce vendors APIs are bulky and transactional, as compared to consumer API, it\u2019s a good way of identifying components\n Avoid integration tests (yes, you just heard it right ). If you create 10 services and write hundreds of integration tests, you\u2019re creating A chaotic situation altogether. Instead, start with 2-4 services, write hundreds of unit tests, and write 5 integration tests, which I\u2019m sure you won\u2019t regret later.\n Consider batch processing, as this design would turn out to be good in performance and less chaotic. For instance, let\u2019s say in e-commerce, you have products in both vendor and consumer databases. Herein, instead of writing distributed transactions to make new products in both the DBs, you can first write only in the vendor DB and run batch processes to pick 100 new products and insert them into consumer DB.\n Consider setup auditor or create your own, so that you\u2019ll easily be able to debug and fix an atomic operation when it fails instead of looking into different databases. In case you wish to reduce your late-night intermittent bug fixes, set this early on and use in all the places. So, the solution could be like this\n I would recommend to overlook synchronizing. I have seen many people trying to use this as a way to stabilize the ecosystem, but it introduces new problems (like time outs) then fixing. In the end, services should remain scalable.\n Don\u2019t partition your database early, if possible every microservice should have its own database but not all of them need databases. You should create persistent microservices first, and then try to use them inside other microservices. If your most/all microservices are connecting to Databases then it\u2019s a design smell, scale the persistent microservices horizontally with more instances\n Don\u2019t create a new git repository for new microservices, first create well unit tested core components, reuse (don\u2019t copy) them in high level components, and from a single repository you might be able to spawn many microservices. Every time you need same code in another repository don\u2019t copy them, rather move it to core component, write super quick unit test, and reuse in all microservices.\n Async programming , this can be a real problem if transactions are written in proper sequence handling . there might be some fire and forget scenario could have come which might not impact in normal scenario but in regress or heavy load these fire and forget might not even exected ) lead to inconsistent scenarios.\n  Check above example here developer thought calling sendOTP Service don\u2019t need to synchronize and did classic \u201cfire and forget\u201d, now in normal testing and low load OTP will be send always but in heavy load sometime sendOTP would not get chance to execute .\n  Forget big-bang, you have a stable production system (might not be scalable though)and have to still use 50-70% of existing system in new one.\n Start collecting data and figuring out pain points in the system, like tables, non-scalable APIs, performance bottlenecks, intermittent performance issues, and load testing results.\n Make a call over scaling by adding hardware vs optimization, however, there\u2019s cost involved in both the cases and you\u2019ll have to decide which is lower. Many a time it\u2019s easier to add more nodes and solve a problem (optimizing the system might involve development and testing cost which might be way higher than just addng nodes).\n Consider using the incremental approach. For example, let \u2019s say I \u2019ve an ecommerce app that is monolith (vendor and consumer both), and I come to know that we will be scaling with more new vendors in the coming six months. The first intuition would be to re-architect, however, in case of incremental approach you will determine that your biggest request hit will be from consumer side and product search. The product catalogue will need to be refactored, so you will not change anything  ...\n Optimization, you\u2019ll have to shift your key area of focus on optimizing problematic components (scaling with adding more hardware might not work here).\n Partition of your DB to fix problems (don\u2019t ignore this). Many people out there might not agree to this but you need to fix the core design problems instead of adding a counter mechanism like caching.\n Don\u2019t rush into new techs and tools, you should be using when you have enough expertise and readiness in your team. Always pick stable opensource small projects instead of the new, trendy library or framework promising too many things.\n  Compositions, if you think you should merge couple of microservices or integrate transactions in one service, it\u2019s never late to do this exercise.\n Build consistent and useful audit for transactions, and make sure you always capture audits even your service gets timed out. A simple example of setting up elk stack, structured logs with transaction ids, entity ids and ability to define policies that will enable you to trace your failed transactions and fix them by data operation teams (this is supercritical). You need to enable them to fix these, if it comes to engineering team then your audit setup is failed)\n Redesign your process for chaos testing. Don\u2019t test with hypothetical scenarios (like killing a service then see how other components behave), instead try to produce the situation or data or sequences which can kill or time out a service and then see how resiliency/retry works in other services.\n For new requirements, always do estimates, impact analysis, and build an action plan based on your testing time and not development time (since now you will spend most of the time testing).\n Integrate a circuit breaker in your ecosystem, so that you\u2019ll be able to check whether all services- the ones going to participate in these transactions- are live and healthy. This way you can avoid half-cooked transactions big time even before starting the transactions.\n Adopt batch process, wherein you convert some of critical transactions in batch and offline to make the system more stable and consistent. For example, for the e-commerce example mentioned above, you can use the following-\n  Here you will still get scaling, isolation, and independent deployment but batch process will make it far more consistent.\n Don\u2019t try to build two-phase commit, instead go for an arbitrator pattern which essentially supports resiliency, retry, error handling, timeout handling, and rollback. This is applicable for PUB-SUB as well, with this you don\u2019t need to make every service robust and just have to ensure that arbitrator is capable of handling most of the scenarios.\n For performance, you can use IPC, memory sharing across processes, and TCP, if there are chatty microservices check for gRPC or websockets as an alternative of rest APIs.\n Configurations can become real nightmares if not handled properly. If your apps fail in production due to missing configuration and you are busy rolling back, fixing and redeploying, you would require something else here. It\u2019s very hard to make every microservice configuration savy and you can never figure out all missing configurations before shipping to productions. So, follow this\n    You can use microservices but must also have the pitfalls in the back of your mind. Avoid premature optimizations, and your target should be building stable and scalable products instead of building microservices. Monolith is never bad, however, SOA is versatile and capable of measuring everything. You don\u2019t require a system where everything is essentially microservices, rather a well-built system with combination of monoliths, microsevices, and SOAs can fly really high.\n        ( 7 votes, average:  3.29 out of 5)     Loading...", "posttime": "2020-05-02 18:02:34", "tags": "\u5206\u5e03\u5f0f,transactions,\u670d\u52a1", "title": "\u5206\u5e03\u5f0f\u4e8b\u52a1\u4e0d\u662f\u5fae\u670d\u52a1", "title_en": "Distributed transactions are not microservices", "transed": 0, "url": "https://www.talentica.com/blogs/distributed-transactions-are-not-micro-services/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5206\u5e03\u5f0f", "\u670d\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "1dab877e3c56d523d30f269309f57aba.png", "infoid": 1000258, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u652f\u6301\u5411\u91cf\u673a\u6216\u652f\u6301\u5411\u91cf\u673a\u662f\u6709\u76d1\u7763\u7684\u5b66\u4e60\u6a21\u578b\uff0c\u5b83\u81ea\u5df1\u5206\u6790\u6570\u636e\u548c\u8bc6\u522b\u6a21\u5f0f\u3002\u5b83\u4eec\u65e2\u53ef\u7528\u4e8e\u5206\u7c7b\uff0c\u4e5f\u53ef\u7528\u4e8e\u56de\u5f52\u5206\u6790\u3002", "note_en": "SVM or support vector machines are  supervised learning models that analyze data and recognize patterns on its own. They are used for both classification and regression analysis.", "posttime": "2020-05-02 18:02:32", "tags": "mac,\u5411\u91cf,support,\u5206\u6790,regression", "title": "\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u652f\u6301\u5411\u91cf\u673a\u7b80\u4ecb", "title_en": "Introduction to Support Vector Machines in Machine Learning", "transed": 0, "url": "https://ranvir.xyz/blog/svm-support-vector-machines-in-machine-learning/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["mac", "\u5411\u91cf", "support", "\u5206\u6790"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000256, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Web\u866b\u6d1e\u5141\u8bb8\u60a8\u5c06\u6587\u4ef6\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e", "note_en": "WEB WORMHOLE LETS YOU SEND FILES FROM ONE PLACE TO ANOTHER", "posttime": "2020-05-02 18:02:15", "tags": "webrtc,send,\u5141\u8bb8,wormhole", "title": "WebWormHole\uff1a\u4f7f\u7528WebRTC\u5feb\u901f\u53d1\u9001\u6587\u4ef6", "title_en": "WebWormHole: Send files quickly using WebRTC", "transed": 0, "url": "https://webwormhole.io/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["webrtc", "send", "\u5141\u8bb8", "wormhole"]}, {"category": "", "categoryclass": "", "imagename": "fbbba573c4798e1123f7065a1a4e8e72.jpg", "infoid": 1000255, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "NVIDIA\u9996\u5e2d\u79d1\u5b66\u5bb6\u6bd4\u5c14\u00b7\u8fbe\u5229(Bill Dally)\u672c\u5468\u53d1\u5e03\u4e86\u4e00\u79cd\u4f4e\u6210\u672c\u3001\u6613\u4e8e\u7ec4\u88c5\u7684\u673a\u68b0\u547c\u5438\u5668\u7684\u5f00\u6e90\u8bbe\u8ba1\u3002\nDally\u8bf4\uff0c\u8fd9\u79cd\u901a\u98ce\u673a\u7531Dally\u5728\u77ed\u77ed\u51e0\u5468\u5185\u8bbe\u8ba1\u51fa\u6765-\u4ed6\u4f20\u5947\u7684\u6280\u672f\u751f\u6daf\u5305\u62ec\u5bf9\u534a\u5bfc\u4f53\u548c\u8d85\u7ea7\u8ba1\u7b97\u673a\u7684\u5173\u952e\u8d21\u732e-\u53ef\u4ee5\u7528400\u7f8e\u5143\u7684\u73b0\u6210\u90e8\u4ef6\u5feb\u901f\u5236\u9020\u51fa\u6765\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4f20\u7edf\u547c\u5438\u673a\u7684\u4ef7\u683c\u53ef\u80fd\u8d85\u8fc72\u4e07\u7f8e\u5143-\u800c\u8fd9\u6b63\u662f\u4e16\u754c\u5bf9\u6551\u751f\u673a\u7684\u9700\u6c42\u6ca1\u6709\u53d7\u5230\u51b2\u51fb\u7684\u65f6\u5019\u3002\n\u201c\u6211\u5e0c\u671b\u6211\u4eec\u4e0d\u4f1a\u8ba9\u8fd9\u4e48\u591a\u4eba\u751f\u75c5\uff0c\u4ee5\u81f3\u4e8e\u6211\u4eec\u7684\u547c\u5438\u673a\u7528\u5b8c\u4e86\uff0c\u201d\u6234\u5229\u8bf4\uff0c\u4ed6\u5728\u4e00\u4e2a\u7b80\u6734\u7684\u5bb6\u7528\u7535\u5b50\u8f66\u95f4\u91cc\u8bf4\uff0c\u90a3\u91cc\u5806\u6ee1\u4e86\u793a\u6ce2\u5668\u3001\u7535\u538b\u8868\u548c\u5176\u4ed6\u5b9e\u9a8c\u5ba4\u8bbe\u5907\u3002\n\u201c\u4f46\u6211\u60f3\u786e\u4fdd\uff0c\u5982\u679c\u6211\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u50cf\u8fd9\u6837\u7684\u4e1c\u897f\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff0c\u201d\u4ed6\u8865\u5145\u9053\u3002\n\u5f53\u7136\uff0c\u4e16\u754c\u5404\u5730\u8feb\u5207\u9700\u8981\u547c\u5438\u673a\u6765\u89e3\u51b3\u5e2d\u5377\u5168\u7403\u7684\u533b\u7597\u5371\u673a\u3002\nDally\u89e3\u91ca\u8bf4\uff0c\u5728\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2\u7684\u60a3\u8005\u4e2d\uff0c0.3%\u52300.6%\u7684\u4eba\u4f1a\u51fa\u73b0\u4e25\u91cd\u5230\u9700\u8981\u673a\u68b0\u547c\u5438\u673a\u7684\u6025\u6027\u547c\u5438\u7a98\u8feb\u7efc\u5408\u5f81\u3002\n\u4ed6\u7684\u547c\u5438\u673a\u53ea\u56f4\u7ed5\u7740\u4e24\u4e2a\u6765\u6e90\u5bb9\u6613\u7684\u5173\u952e\u90e8\u4ef6-\u4e00\u4e2a\u6bd4\u4f8b\u7535\u78c1\u9600\u548c\u4e00\u4e2a\u5fae\u63a7\u5236\u5668\u6765\u8c03\u8282\u901a\u8fc7\u9600\u95e8\u6d41\u5411\u60a3\u8005\u7684\u6c14\u4f53\u3002\nDally\u62e5\u6709120\u591a\u9879\u4e13\u5229\u3002\u4ed6\u66fe\u5728\u52a0\u5dde\u7406\u5de5\u5b66\u9662\u3001\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u548c\u65af\u5766\u798f\u5927\u5b66\u62c5\u4efb\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u4e3b\u4efb\uff0c\u4ece\u4e8b\u8fc7\u6559\u5b66\u548c\u7814\u7a76\u5de5\u4f5c\u3002\n\u81ea2009\u5e74\u4ee5\u6765\uff0c\u4ed6\u4e00\u76f4\u9886\u5bfcNVIDIA\u7684\u7814\u7a76\u56e2\u961f\u3002\u5b83\u5305\u62ec\u6765\u81ea\u5168\u7403\u5404\u5730\u7684200\u591a\u540d\u79d1\u5b66\u5bb6\uff0c\u4e13\u6ce8\u4e8e\u4eba\u5de5\u667a\u80fd\u3001\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u3001\u673a\u5668\u4eba\u548c\u56fe\u5f62\u5b66\u7b49\u9886\u57df\u3002\n\u5728NVIDIA\u9996\u5e2d\u6267\u884c\u5b98Jensen Huang\u547c\u5401\u516c\u53f8\u9886\u5bfc\u4eba\u5bfb\u627e\u5e2e\u52a9\u5e94\u5bf9\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u7684\u65b9\u6cd5\u540e\uff0cDally\u5f00\u59cb\u63a2\u7d22\u5982\u4f55\u505a\u51fa\u8d21\u732e\u3002\n\u8fbe\u5229\u5728\u7535\u8bdd\u548c\u89c6\u9891\u4f1a\u8bae\u4e2d\u8fc5\u901f\u4e0e\u6280\u672f\u548c\u533b\u7597\u9886\u57df\u7684\u9886\u5bfc\u8005\u5efa\u7acb\u4e86\u8054\u7cfb\u3002\n\u7136\u540e\uff0c4\u6708\u521d\uff0c\u5f53\u4ed6\u5728\u592a\u6d69\u6e56\u51c9\u723d\u3001\u6676\u83b9\u5254\u900f\u7684\u6e56\u6c34\u4e2d\u5212\u72ec\u6728\u821f\u65f6\uff0c\u4ed6\u5728\u90a3\u91cc\u907f\u96be\uff0c\u7075\u611f\u8ff8\u53d1\u3002\n\u8fbe\u5229\u4e0a\u7f51\u8ba2\u8d2d\u4e86\u4e00\u4e2a\u7535\u78c1\u9600\uff0c\u5b83\u4f7f\u7528\u7535\u78c1\u94c1\u6324\u538b\u9600\u95e8\u7684\u6253\u5f00\u548c\u5173\u95ed\u3002\n\u7136\u540e\uff0c\u4ed6\u628a\u4e00\u53f0\u4fbf\u5b9c\u7684\u7b80\u6613\u7535\u8111--\u5fae\u63a7\u5236\u5668\uff0c\u4ece\u4ed6\u4e3a\u81ea\u5df1\u7684\u9152\u7a96\u5efa\u9020\u7684\u81ea\u5bb6\u917f\u9020\u7684\u51b7\u5374\u7cfb\u7edf\u4e2d\u62ff\u51fa\u6765\u3002\n\u8fbe\u5229\u5728\u5bb6\u91cc\u7684\u7535\u5b50\u8f66\u95f4\u71ac\u4e86\u51e0\u4e2a\u6df1\u591c\uff0c\u7f16\u5236\u4e86\u6570\u5343\u884c\u4ee3\u7801\u540e\uff0c\u6709\u4e86\u4e00\u4e2a\u7528\u666e\u901a\u7ba1\u4ef6\u548c\u51e0\u4e2a\u5bb9\u6613\u5f04\u5230\u7684\u9600\u95e8\u5efa\u9020\u7684\u5de5\u4f5c\u539f\u578b\u3002\n4\u67084\u65e5\uff0c\u8fbe\u5229\u4e0e\u4ed6\u7684NVIDIA\u540c\u4e8b\u5206\u4eab\u4e86\u4e00\u6bb5\u89c6\u9891\uff0c\u89c6\u9891\u662f\u4ed6\u7684\u59bb\u5b50\u5728\u4ed6\u7684\u8f66\u5e93\u91cc\u62cd\u6444\u7684\uff0c\u89c6\u9891\u4e2d\uff0c\u8be5\u8bbe\u5907\u7f13\u6162\u5730\u5145\u6c14\u548c\u653e\u6c14\u4e00\u53ea\u6a61\u80f6\u624b\u5957\u3002\n\u4e3a\u4e86\u7ee7\u7eed\u63a8\u8fdb\u8fd9\u4e2a\u9879\u76ee\uff0c\u8fbe\u5229\u5229\u7528\u4e86\u5e7f\u6cdb\u5b66\u79d1\u7684\u8054\u7cfb\u4eba\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002\n\u4ed6\u6c42\u52a9\u4e8e\u4fdd\u7f57\u00b7\u5361\u666e\u62c9\u65af(Paul Karplus)\uff0c\u4ed6\u4ee5\u524d\u662f\u4e00\u540d\u5b66\u751f\uff0c\u4ee5\u5728\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u548c\u673a\u5668\u4eba\u65b9\u9762\u7684\u5de5\u4f5c\u800c\u95fb\u540d\uff0c\u8d1f\u8d23\u5173\u952e\u90e8\u4ef6\u7684\u673a\u68b0\u5de5\u7a0b\u3002\n\u4ed6\u8fd8\u4f9d\u9760\u56db\u5e74\u7ea7\u533b\u79d1\u5b66\u751f\u827e\u739b\u00b7\u9648(Emma Tran)\u5728\u533b\u5b66\u9886\u57df\u5efa\u7acb\u4e86\u8bb8\u591a\u5176\u4ed6\u8054\u7cfb\u3002\n\u8fbe\u5229\u8fc5\u901f\u6536\u96c6\u4e86\u65af\u5766\u798f\u5927\u5b66\u533b\u5b66\u9662(Stanford University School Of Medicine)\u9996\u5e2d\u4f4f\u9662\u533b\u5e08\u5b89\u5fb7\u9c81\u00b7\u6469\u5c14(Andrew Moore)\u535a\u58eb\u3001\u8457\u540d\u533b\u7597\u5668\u68b0\u4e13\u5bb6\u3001\u4e24\u5bb6\u516c\u53f8\u7684\u521b\u59cb\u4eba\u5e03\u83b1\u6069\u7279\u00b7\u6797(Bryant Lin)\u535a\u58eb\u548c\u9ebb\u9189\u5e08\u9732\u4e1d\u00b7\u8303\u5b81(Ruth Fning)\u535a\u58eb\u7684\u610f\u89c1\u3002\n\u6234\u5229\u5411\u8eab\u4e34\u5176\u5883\u548c\u57fa\u4e8e\u6a21\u62df\u7684\u5b66\u4e60\u65b9\u9762\u7684\u9876\u7ea7\u4e13\u5bb6\u5927\u536b\u00b7\u52a0\u5df4(David Gaba)\u535a\u58eb\u6c42\u52a9\uff0c\u4ee5\u6d4b\u8bd5\u8be5\u8bbe\u5907\u7684\u80fd\u529b\u3002\n4\u670817\u65e5\uff0c\u661f\u671f\u4e94\uff0c\u52a0\u5df4\u535a\u58eb\u5728\u4e00\u4e2a\u590d\u6742\u7684\u80ba\u90e8\u6a21\u62df\u5668\u4e0a\u6d4b\u8bd5\u4e86\u4e00\u4e2a\u539f\u578b\uff0c\u5728\u5404\u79cd\u5404\u6837\u7684\u547c\u5438\u673a\u8bbe\u7f6e\u4e0b\u6a21\u62df\u4e86\u6b63\u5e38\u548c\u4e24\u79cd\u6c34\u5e73\u7684\u51a0\u72b6\u75c5\u6bd2\u80ba\u90e8\u75be\u75c5\u3002\n\u9605\u8bfbNVIDIA\u9996\u5e2d\u79d1\u5b66\u5bb6\u6bd4\u5c14\u00b7\u6234\u5229(Bill Dally)\u7684\u8bba\u6587\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4ed6\u7684\u4f4e\u6210\u672c\u3001\u6613\u4e8e\u7ec4\u88c5\u7684\u901a\u98ce\u673a\u7684\u5f00\u6e90\u8bbe\u8ba1\u3002\n\u7136\u800c\uff0c\u8fbe\u5229\u7684\u8bbe\u5907\u7684\u6700\u65b0\u539f\u578b\uff0c\u4ed6\u5728\u81ea\u5df1\u7684\u5bb6\u5ead\u8f66\u95f4\u7ec4\u88c5\u7684\uff0c\u4ecd\u7136\u7b80\u5355\u53ef\u9760\u3002\n\u6234\u5229\u62a5\u544a\u8bf4\uff0c\u4ed6\u53ef\u4ee5\u57285\u5206\u949f\u5185\u5c06\u8bbe\u5907\u7684\u6c14\u52a8\u90e8\u4ef6\u56fa\u5b9a\u5728\u4e00\u8d77\u3002\u6574\u4e2a\u901a\u98ce\u673a\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u663e\u793a\u5668\u4e0a\uff0c\u7136\u540e\u6ed1\u5165\u4e00\u4e2a\u7d27\u51d1\u7684\u9e48\u9e55\u624b\u63d0\u7bb1\u3002\nDally\u8bf4\uff0c\u5b83\u63d0\u4f9b\u4e86\u6bd4\u201c\u6324\u888b\u5f0f\u201d\u7d27\u6025\u547c\u5438\u673a\u66f4\u597d\u7684\u62a4\u7406\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u7cbe\u786e\u5730\u8c03\u8282\u6d41\u91cf\u3001\u538b\u529b\u548c\u4f53\u79ef\u3002\u5b83\u8fd8\u4f7f\u7528\u66f4\u5c11\u7684\u90e8\u4ef6\u548c\u66f4\u5c11\u7684\u529f\u7387\uff0c\u800c\u4e14\u6210\u672c\u66f4\u4f4e\u3002\n\u5b83\u5305\u62ec\u51c6\u786e\u6d4b\u91cf\u6c14\u6d41\u3001\u8865\u507f\u9600\u95e8\u4e0d\u51c6\u786e\u3001\u63a7\u5236\u6700\u5927\u538b\u529b\u3001\u542f\u7528\u60a3\u8005\u81ea\u4e3b\u547c\u5438\u4ee5\u53ca\u76d1\u63a7\u62a5\u8b66\u6761\u4ef6\u7b49\u529f\u80fd\u7684\u4f20\u611f\u5668\u3002\n\u8fbe\u5229\u73b0\u5728\u6b63\u5728\u6d4f\u89c8\u7f8e\u56fd\u98df\u54c1\u548c\u836f\u7269\u7ba1\u7406\u5c40(FDA)\u7d27\u6025\u4f7f\u7528\u6388\u6743\u6240\u9700\u7684\u6587\u4e66\u5de5\u4f5c\u3002\n\u5728\u90a3\u4e4b\u540e\uff0c\u4e0b\u4e00\u6b65\u5c06\u662f\u627e\u5230\u5f00\u59cb\u5efa\u9020\u8fd9\u4e9b\u5efa\u7b51\u7684\u65b9\u6cd5\u3002", "note_en": "NVIDIA Chief Scientist Bill Dally this week released an open-source design for a low-cost, easy-to-assemble mechanical ventilator.\n The ventilator, designed in just a few weeks by Dally \u2014 whose storied technology career includes key contributions to semiconductors and supercomputers \u2014 can be built quickly from just $400 of off-the-shelf parts, Dally says.\n Traditional ventilators, by contrast, can cost more than $20,000 \u2014 and that\u2019s when the world hasn\u2019t been slammed with demand for the life-saving machines.\n \u201cI hope that we don\u2019t get so many people sick that we run out of ventilators,\u201d Dally says, speaking from a spartan home electronics workshop stocked with oscilloscopes, voltmeters and other lab equipment.\n \u201cBut I want to make sure if we do, something like this is ready,\u201d he adds.\n  Ventilators, of course, are urgently needed around the world to address the medical crisis that has gripped the globe.\n  Of patients that are infected with  COVID-19, between 0.3 percent and 0.6 percent develop acute respiratory distress syndrome severe enough to need a mechanical ventilator, Dally explains.\n  His ventilator is built around just two easily sourced, key components \u2013 a proportional solenoid valve and a microcontroller to regulate the flow of gas through the valve to the patient.\n Dally holds more than 120 patents. He\u2019s had teaching and research stints at Caltech, MIT and Stanford, where he chaired the computer science department.\n He\u2019s led  NVIDIA\u2019s research team since 2009. It includes more than 200 scientists from around the globe focused on areas such as AI, computer vision, self-driving cars, robotics and graphics.\n Dally began exploring how to make a contribution after  NVIDIA CEO Jensen Huang called on company leaders to look for  ways to help with the COVID-19 pandemic.\n Dally quickly connected on phone calls and in video conferences with leaders across the technology and medical fields.\n  Then, when kayaking on the cool, crystal-clear waters of Lake Tahoe in early April, where he was sheltering in place, inspiration struck.\n  Dally went online and ordered a solenoid valve, which uses an electromagnet to squeeze a valve open and shut.\n Then he pulled the microcontroller, a cheap, stripped-down computer, out of the home-brewed cooling system he\u2019d built for his wine cellar.\n After pulling a couple of late nighters in his home electronics workshop \u2014 and cranking out several thousand lines of code \u2014 Dally had a working prototype built from common pipe fittings and a few easily obtained valves.\n On April 4 Dally shared a video, shot in his garage by his wife, of the device slowly inflating and deflating a rubber glove, with his NVIDIA colleagues.\n   To continue moving the project forward, Dally dipped into the expertise of contacts across a wide range of disciplines.\n He turned to Paul Karplus, a former student, noted for his work in autonomous vehicles and robotics, for the mechanical engineering of key parts.\n He also relied on Emma Tran, a fourth-year medical student, to make a number of other connections in the medical field.\n Dally quickly gathered input from Dr. Andrew Moore, a chief resident at the Stanford University School of Medicine, Dr. Bryant Lin, a prominent medical devices expert and founder of two companies, and anesthesiologist Dr. Ruth Fanning.\n Dally turned to Dr. David Gaba a top expert in immersive and simulation-based learning, to test the device\u2019s capabilities.\n On Friday, April 17, Dr. Gaba tested a prototype on a sophisticated lung simulator, modeling normal and two levels of COVID-19 lung disease with a wide variety of ventilator settings.\n  Read NVIDIA Chief Scientist Bill Dally\u2019s paper detailing his open-source design for a low-cost, easy-to-assemble ventilator.\n  Yet the latest prototype of Dally\u2019s device, which he assembled in his home workshop, remains simple and reliable.\n Dally reports he can bolt the device\u2019s pneumatic components together in 5 minutes. The entire ventilator can be attached to a simple display and slid into a compact Pelican carrying case.\n It provides better care than \u201cbag squeezer\u201d emergency ventilators because it precisely regulates flow, pressure, and volume, Dally says. It also uses fewer parts and less power, and it\u2019s lower cost.\n It includes sensors that accurately meter airflow, compensate for valve inaccuracy, control maximum pressure, enable patient-initiated breathing, and monitor for alarm conditions, among other features.\n Dally\u2019s now in the process of navigating the paperwork needed for emergency use authorization from the U.S. Food and Drug Administration.\n After that, the next step will be to find a way to start building these.", "posttime": "2020-05-02 18:02:12", "tags": "\u53d1\u5e03,\u5f00\u6e90,\u8bbe\u8ba1,nvidia,releases", "title": "NVIDIA\u53d1\u5e03\u4f4e\u6210\u672c\u3001\u5f00\u6e90\u547c\u5438\u5668\u8bbe\u8ba1", "title_en": "Nvidia Releases Low-Cost, Open-Source Ventilator Design", "transed": 0, "url": "https://blogs.nvidia.com/blog/2020/05/01/low-cost-open-source-ventilator-nvidia-chief-scientist/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u53d1\u5e03", "\u5f00\u6e90", "\u8bbe\u8ba1", "nvidia", "releases"]}, {"category": "", "categoryclass": "", "imagename": "ea57ffb0f5eead71bc46c98230640007.png", "infoid": 1000254, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\uff0c\u6211\u53d1\u8868\u4e86\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u63cf\u8ff0\u4e86Strip\u662f\u5982\u4f55\u8bb0\u5f55\u5ba2\u6237\u7f51\u7ad9\u4e0a\u7684\u8bbf\u95ee\u8005\u884c\u4e3a\u7684\u3002\u7b80\u800c\u8a00\u4e4b\uff0cStrike\u7684JavaScript\u5e93\u6536\u96c6\u4e86\u6709\u5173\u7528\u6237\u8bbf\u95ee\u7684URL\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u5173\u4e8e\u4ed6\u4eec\u9f20\u6807\u79fb\u52a8\u7684\u9065\u6d4b\u4fe1\u606f\uff0c\u5373\u4f7f\u8be5\u7f51\u7ad9\u4ece\u672a\u663e\u793a\u8fc7\u4efb\u4f55Strike\u652f\u4ed8\u8868\u5355\u3002\u6211\u6000\u7591\u5927\u591a\u6570Strip\u5ba2\u6237\u5e76\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u8ba4\u4e3aStrip\u5e94\u8be5\u66f4\u7a81\u51fa\u3001\u66f4\u8be6\u7ec6\u5730\u62ab\u9732\u4ed6\u4eec\u7684\u6570\u636e\u6536\u96c6\u5b9e\u8df5\u3002\n\u8fd9\u7bc7\u5e16\u5b50\u5728\u9ed1\u5ba2\u65b0\u95fb\u4e0a\u5f15\u8d77\u4e86\u70ed\u70c8\u7684\u8ba8\u8bba\uff0c\u5176\u4e2d\u5305\u62ec\u65af\u7279\u5229\u666e\u7684\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u5e15\u7279\u91cc\u514b\u00b7\u79d1\u91cc\u68ee\u7684\u51e0\u6761\u8bc4\u8bba\u3002\u5728\u4ed6\u7684\u5934\u6761\u8bc4\u8bba\u4e2d\uff0c\u4ed6\u8bf4\uff1a\n\u63d0\u51fa\u7684\u95ee\u9898(\u201c\u65af\u5229\u666e\u6536\u96c6\u8fd9\u4e9b\u6570\u636e\u662f\u4e3a\u4e86\u505a\u5e7f\u544a\u5417\uff1f\u201d)\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5f97\u5230\u5426\u5b9a\u7684\u56de\u7b54\u3002\u8fd9\u4e9b\u6570\u636e\u4ece\u6765\u6ca1\u6709\u3001\u6c38\u8fdc\u4e0d\u4f1a\u3001\u4e5f\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u552e/\u51fa\u79df\u7ed9\u5e7f\u544a\u5546\u7b49\u3002\n\u51e0\u4f4d\u8bc4\u8bba\u8005\u56de\u5e94\u8bf4\uff0c\u4ed6\u4eec\u611f\u8c22\u4ed6\u7684\u4fdd\u8bc1\uff0c\u4f46\u5e0c\u671b\u5728\u65af\u5229\u666e\u7684\u670d\u52a1\u6761\u6b3e\u548c\u9690\u79c1\u653f\u7b56\u4e2d\u770b\u5230\u5b98\u65b9\u548c\u6709\u7ea6\u675f\u529b\u7684\u8bed\u8a00\u3002\n\u5728\u6211\u7684\u6587\u7ae0\u53d1\u8868\u540e\u4e0d\u5230\u4e00\u5468\uff0cStrip\u53d1\u8868\u4e86\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u6982\u8ff0\u4e86\u4ed6\u4eec\u4e3a\u4e86\u66f4\u597d\u5730\u62ab\u9732\u4ed6\u4eec\u7684\u6570\u636e\u6536\u96c6\u505a\u6cd5\u548c\u5bf9\u7528\u6237\u9690\u79c1\u7684\u4fdd\u969c\u6240\u505a\u7684\u6539\u53d8\u3002\n\u6211\u5df2\u7ecf\u5ba1\u9605\u4e86\u4ed6\u4eec\u7684\u65b0\u6587\u6863\uff0c\u6211\u5c06\u8ba8\u8bbaSTRIPE\u7684\u66f4\u6539\u5982\u4f55\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6211\u63d0\u51fa\u7684\u95ee\u9898\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u53d8\u5316\u662fStrike\u7684\u5f00\u53d1\u4eba\u5458\u6587\u6863\u73b0\u5728\u516c\u5f00\u4e86\u4ed6\u4eec\u7684JavaScript\u5e93\u7684\u8ddf\u8e2a\u884c\u4e3a\u3002\u5728\u6628\u5929\u7684\u53d8\u5316\u4e4b\u524d\uff0c\u552f\u4e00\u7684\u6697\u793a\u662f\u8fd9\u4e24\u53e5\u8bdd\uff1a\n\u8981\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528Strip\u7684\u9ad8\u7ea7\u6b3a\u8bc8\u529f\u80fd\uff0c\u8bf7\u786e\u4fddStripe.js\u52a0\u8f7d\u5230\u6bcf\u4e2a\u9875\u9762\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u60a8\u7684\u7ed3\u8d26\u9875\u9762\u3002\u8fd9\u6837\uff0c\u5f53\u5ba2\u6237\u6d4f\u89c8\u60a8\u7684\u7f51\u7ad9\u65f6\uff0c\u6761\u7eb9\u5c31\u53ef\u4ee5\u68c0\u6d4b\u5230\u53ef\u80fd\u8868\u660e\u6b3a\u8bc8\u7684\u5f02\u5e38\u884c\u4e3a\u3002\n\u8fd9\u9057\u6f0f\u4e86\u5173\u952e\u4fe1\u606f\uff0c\u5e76\u4e14\u65e0\u6cd5\u4f20\u8fbe\u56fe\u4e66\u9986\u6536\u96c6\u4e86\u4ec0\u4e48\u4fe1\u606f\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u4e0eSTRIPE\u7684\u670d\u52a1\u5668\u5171\u4eab\u8fd9\u4e9b\u6570\u636e\u3002\n\u5728STRIPE\u7684\u5f53\u524d\u6587\u6863\u4e2d\uff0c\u8be5\u5e93\u5305\u62ec\u4e00\u4e2a\u540d\u4e3a\u201c\u7981\u7528\u9ad8\u7ea7\u6b3a\u8bc8\u68c0\u6d4b\u4fe1\u53f7\u201d\u7684\u90e8\u5206\uff0c\u8be5\u90e8\u5206\u94fe\u63a5\u5230\u4e00\u4e2a\u7f51\u9875\uff0c\u8be5\u7f51\u9875\u660e\u786e\u5b9a\u4e49\u4e86STRIPE\u4e3a\u9632\u6b62\u6b3a\u8bc8\u800c\u6536\u96c6\u7684\u4fe1\u606f\u7c7b\u578b\u3002\nStripe\u66f4\u65b0\u4e86\u4ed6\u4eec\u7684JavaScript\u5e93\uff0c\u4f7f\u5ba2\u6237\u80fd\u591f\u9009\u62e9\u9000\u51fa\u6df1\u5ea6\u6570\u636e\u6536\u96c6\u3002\u4ed6\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528AdvancedFraudSignals=false\u53c2\u6570\u52a0\u8f7d&lt\uff1b\u811a\u672c&gt\uff1b\u6807\u8bb0\u4ee5\u7981\u7528\u6b64\u529f\u80fd\uff1a\n\u4f7f\u7528@stripe/stripe-js NPM\u8f6f\u4ef6\u5305\u7684\u5ba2\u6237\u7aef\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u521d\u59cb\u5316\u5e93\u65f6\u6307\u5b9a{AdvancedFraudSignals\uff1afalse}\u6765\u5229\u7528\u6b64\u529f\u80fd\uff1a\n\u8fd9\u662f\u4e00\u4e2a\u79ef\u6781\u7684\u53d8\u5316\uff0c\u56e0\u4e3a\u5b83\u6062\u590d\u4e86\u7f51\u7ad9\u6240\u6709\u8005\u51b3\u5b9a\u4ed6\u4eec\u60f3\u8981\u4ea4\u6362\u591a\u5c11\u6570\u636e\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u6b3a\u8bc8\u9884\u9632\u7684\u6743\u529b\u3002\n\u5468\u4e09\uff0c\u65af\u5229\u666e\u5927\u5e45\u4fee\u6539\u4e86\u4ed6\u4eec\u7684\u9690\u79c1\u653f\u7b56\u3002\u4fee\u8ba2\u7248\u5bf9Strip\u5904\u7406\u7528\u6237\u6570\u636e\u548c\u4e0e\u5916\u90e8\u5408\u4f5c\u4f19\u4f34\u5171\u4eab\u6570\u636e\u7684\u65b9\u5f0f\u65bd\u52a0\u4e86\u66f4\u4e25\u683c\u7684\u9650\u5236\u3002\n\u6211\u5bf9\u9690\u79c1\u653f\u7b56\u7684\u4e00\u6574\u5957\u53d8\u5316\u6709\u4e0d\u540c\u7684\u770b\u6cd5\uff0c\u4f46\u6211\u5c06\u5728\u8fd9\u91cc\u91cd\u70b9\u4ecb\u7ecd\u503c\u5f97\u6ce8\u610f\u7684\u53d8\u5316\u3002\n\u5728\u6211\u6700\u521d\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u63d0\u5230\u4e86\u65af\u5229\u666e\u9690\u79c1\u653f\u7b56\u4e2d\u8fd9\u4e00\u4ee4\u4eba\u62c5\u5fe7\u7684\u90e8\u5206\uff1a\n\u5f53\u60a8\u8bbf\u95ee\u6211\u4eec\u7684\u7f51\u7ad9\u6216\u5728\u7ebf\u670d\u52a1\u65f6\uff0c\u6211\u4eec\u548c\u67d0\u4e9b\u7b2c\u4e09\u65b9\u90fd\u4f1a\u6536\u96c6\u60a8\u4e00\u6bb5\u65f6\u95f4\u5185\u4ee5\u53ca\u8de8\u4e0d\u540c\u7f51\u7ad9\u7684\u5728\u7ebf\u6d3b\u52a8\u4fe1\u606f\uff0c\u4e3a\u60a8\u63d0\u4f9b\u9488\u5bf9\u60a8\u4e2a\u4eba\u5174\u8da3\u91cf\u8eab\u5b9a\u505a\u7684\u4ea7\u54c1\u548c\u670d\u52a1\u7684\u5e7f\u544a(\u8fd9\u79cd\u7c7b\u578b\u7684\u5e7f\u544a\u79f0\u4e3a\u201c\u57fa\u4e8e\u5174\u8da3\u7684\u5e7f\u544a\u201d)\u3002\nStripe\u8fd8\u62e5\u6709\u5141\u8bb8\u81ea\u5df1\u4e0eAdWords\u548cAdRoll\u7b49\u5e7f\u544a\u5408\u4f5c\u4f19\u4f34\u5171\u4eab\u6570\u636e\u7684\u8bed\u8a00\uff1a\n\u65af\u6cf0\u666e\u5df2\u7ecf\u628a\u8fd9\u4e24\u4e2a\u90e8\u5206\u90fd\u526a\u6389\u4e86\u3002\u4ed6\u4eec\u7684\u65b0\u8bed\u8a00\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\uff0c\u6e05\u6670\u800c\u76f4\u63a5\uff1aStripe\u4e0d\u4f1a\u5411\u5e7f\u544a\u5546\u51fa\u552e\u5ba2\u6237\u6570\u636e\uff1a\n\u6211\u4eec\u4e0d\u4f1a\u5c06\u7528\u6237\u5ba2\u6237\u7684\u4e2a\u4eba\u6570\u636e\u7528\u4e8e\u57fa\u4e8e\u5174\u8da3\u7684\u5e7f\u544a\uff0c\u4e5f\u4e0d\u4f1a\u5c06\u5176\u5171\u4eab\u3001\u51fa\u79df\u6216\u51fa\u552e\u3002\u6211\u4eec\u4e0d\u51fa\u552e\u6216\u51fa\u79df\u4e2a\u4eba\u8d44\u6599\u3002", "note_en": "Last week, I  published a blog post describing how Stripe recorded visitor behavior on their customers\u2019 websites. In short, Stripe\u2019s JavaScript library collected information about URLs users visited and telemetry about their mouse movements, even when the site never displayed any Stripe payment forms. I suspected that most Stripe customers were unaware of this and argued that Stripe should disclose their data gathering practices more prominently and in greater detail.\n The post generated  a lively discussion on Hacker News, including several comments from Patrick Collison, Stripe\u2019s co-founder and CEO. In his  top comment, he said:\n The question raised (\u201cIs Stripe collecting this data for advertising?&#34;) can be readily answered in the negative. This data has never been, would never be, and will never be sold/rented/etc. to advertisers.\n Several commenters responded that they appreciated his assurances but wanted to see official and binding language in Stripe\u2019s  terms of service and  privacy policy.\n Less than a week after my article came out, Stripe  published a blog post outlining the changes they had made to better disclose their data collection practices and guarantees around user privacy.\n   I\u2019ve reviewed their new documentation, and I\u2019ll discuss how well Stripe\u2019s changes address the issues I raised.\n   To me, the most significant change is that Stripe\u2019s developer documentation now discloses their JavaScript library\u2019s tracking behavior. Prior to yesterday\u2019s changes, the only hints were  these two sentences:\n To best leverage Stripe\u2019s advanced fraud functionality, ensure that Stripe.js is loaded on every page, not just your checkout page. This allows Stripe to detect anomalous behavior that may be indicative of fraud as customers browse your website.\n This omitted critical information and failed to communicate what information the library collected and how it shared that data with Stripe\u2019s servers.\n In Stripe\u2019s current documentation, the library includes a section called  \u201cDisabling advanced fraud detection signals,&#34; which links to a webpage that  defines explicitly the types of information Stripe collects for fraud prevention.\n    Stripe updated their JavaScript library to give clients the ability to opt-out of deep data collection. They can now load the  &lt;script&gt; tag with the  advancedFraudSignals=false parameter to disable this functionality:\n  Clients using the   @stripe/stripe-js npm package can leverage this feature as well by specifying  {advancedFraudSignals: false} while initializing the library:\n  This is a positive change, as it restores power to the website owners to decide how much data they want to exchange to achieve better fraud prevention.\n  On Wednesday, Stripe drastically revised their  privacy policy. The revisions place stricter limitations on how Stripe handles user data and shares it with external partners.\n I made a  diff view of the full set of changes to the privacy policy, but I\u2019ll highlight the notable ones here.\n  In my original blog post, I called out this worrying section from Stripe\u2019s privacy policy:\n  When you visit our Sites or online services, both we and certain third parties collect information about your online activities over time and across different sites to provide you with advertising about products and services tailored to your individual interests (this type of advertising is called \u201cinterest-based advertising\u201d).\n Stripe also had language giving themselves permission to share data with ad partners like AdWords and AdRoll:\n   Stripe has cut both of those sections. Their new language is refreshingly clear and direct: Stripe does not sell customer data to advertisers:\n  We do not use, share, rent or sell the Personal Data of our Users \u2019Customers for interest-based advertising. We do not sell or rent the Personal Data  ...", "posttime": "2020-05-02 18:02:08", "tags": "\u56de\u5e94,responded,\u6570\u636e,stripe", "title": "Stripe\u56de\u5e94\u4e86\u6211\u5bf9\u7528\u6237\u8ddf\u8e2a\u7684\u62c5\u5fe7", "title_en": "Stripe responded to my concerns about user tracking", "transed": 0, "url": "https://mtlynch.io/stripe-update/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u56de\u5e94", "responded", "\u6570\u636e", "stripe"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000253, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Pmicroma\u7b49\u79bb\u5b50\u4f53\u662fPmicroma\u516c\u53f8\u4e0b\u5c5e\u7684Wolfram von Funck\u7f16\u5199\u7684\u77e2\u91cf\u56fe\u50cf\u7f16\u8f91\u5668\u3002\u5b83\u7684\u4e00\u4e9b\u4f7f\u7528\u89c6\u9891\u53ef\u4ee5\u5728Pmicroma\u7684YouTube\u9891\u9053\u4e0a\u627e\u5230\u3002\nPmicroma/Wollay\u4e5f\u662f\u6e38\u620f\u9b54\u65b9\u4e16\u754c\u7684\u4f5c\u8005\uff0c\u56e0\u6b64\uff0c\u6e38\u620f\u7684GUI\u662f\u4f7f\u7528\u7b49\u79bb\u5b50\u56fe\u5f62\u6784\u5efa\u7684\u3002\u6211\u57282016\u5e74\u5f00\u59cb\u5bf9\u8fd9\u4e9b\u7b49\u79bb\u5b50\u56fe\u5f62\u6587\u4ef6\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u6211\u5f00\u59cb\u8fdb\u5165\u9006\u5411\u5de5\u7a0b\u548c\u7f16\u7a0b\uff0c\u800c\u4e14\u6211\u521a\u521a\u5b8c\u6210\u4e86\u53e6\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u3001\u65e0\u6587\u6863\u8bb0\u5f55\u7684\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f\u7684\u8f6c\u6362\u5668\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u8fd8\u6ca1\u6709\u5176\u4ed6\u4eba\u8bbe\u6cd5\u5bf9\u9b54\u65b9\u4e16\u754c\u7684\u56fe\u50cf\u6587\u4ef6\u8fdb\u884c\u4efb\u4f55\u6709\u7528\u7684\u4fee\u6539\u3002\n\u51e0\u5e74\u8fc7\u53bb\u4e86\uff0c\u5728\u6211\u670b\u53cbAndoryuuta\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u521b\u5efa\u4e86PLXML\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u5c06\u7b49\u79bb\u5b50\u56fe\u5f62\u6587\u4ef6(\u79f0\u4e3a.PLX\u3001.PLD\u6216.PLG)\u4e0eXML\u6587\u4ef6\u683c\u5f0f\u76f8\u4e92\u8f6c\u6362\u7684\u5de5\u5177\u3002\u7136\u800c\uff0c\u7531\u4e8e\u8fd9\u4e9b\u90fd\u662f\u77e2\u91cf\u56fe\u5f62\uff0c\u6240\u4ee5\u4e3a\u5b83\u4eec\u521b\u5efa\u7f16\u8f91\u5668\u6bd4\u8f83\u56f0\u96be\uff0c\u800c\u4e14\u9664\u4e86\u7b49\u79bb\u5b50\u672c\u8eab\u4e4b\u5916\uff0c\u6ca1\u6709\u57fa\u4e8eGUI\u7684\u7f16\u8f91\u5668\u3002\n\u8840\u6d46\u662fPmicroma\u7684\u7b2c\u4e00\u4e2a\u4ea7\u54c1(\u5728\u4ed6\u4eec\u770b\u6765\uff0c\u5f88\u53ef\u80fd\u662f\u4ed6\u4eec\u7684\u4e3b\u8981\u4ea7\u54c1)\uff0c\u4f46\u53ea\u6709\u4e00\u6b21\u53d1\u5e03\uff0c\u90a3\u662f\u57282011\u5e74\u3002\u5b83\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u5668\u6700\u7ec8\u5b95\u673a\u4e86\uff0c\u6240\u4ee5\u5f53\u5b83\u505c\u6b62\u5de5\u4f5c\u65f6\uff0c\u5927\u591a\u6570\u4eba\u53ea\u662f\u6446\u8131\u4e86\u8f6f\u4ef6\uff0c\u7ee7\u7eed\u524d\u8fdb\u3002\u76f4\u52302020\u5e744\u670820\u65e5\uff0c2011\u5e74\u7684\u5b89\u88c5\u5668\u624d\u91cd\u65b0\u6d6e\u51fa\u6c34\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5de5\u4f5c\uff0c\u8ba9\u8fd9\u4e2a\u53e4\u8001\u7684\u827a\u672f\u5de5\u5177\u518d\u6b21\u53d1\u6325\u4f5c\u7528\u3002\n\u90a3\u4e48\uff0c\u6211\u4eec\u4ece\u54ea\u91cc\u5f00\u59cb\u5462\uff1f\u542f\u52a8\u7b49\u79bb\u5b50\u4f53\u65f6\uff0c\u5b83\u5e0c\u671b\u4f7f\u7528HTTP\u8054\u7cfbpmicroma.de\u4e0a\u7684\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u5668\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u767b\u5f55\u6216\u6fc0\u6d3b\u8be5\u4ea7\u54c1\uff0c\u5b83\u5c06\u65e0\u6cd5\u5de5\u4f5c\uff1a\n\u597d\u5427\u3002\u6700\u660e\u663e\u7684\u4e0b\u4e00\u6b65\u662f\u627e\u5230\u8d1f\u8d23\u6fc0\u6d3b\u7b49\u79bb\u5b50\u4f53\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u4fee\u8865\u4e00\u4e9b\u4ee3\u7801\uff0c\u4f7f\u5176\u59cb\u7ec8\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\uff0c\u65e0\u8bba\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u5668\u505a\u4ec0\u4e48\u3002\n\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u6709\u51e0\u4e2a\u4f4d\u7f6e\u5f15\u7528\u4e86\u51e0\u4e2a\u6570\u636e\u6210\u5458\uff0c\u4ee5\u4fbf\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u5df2\u88ab\u6fc0\u6d3b\u3002\u4f46\u662f\uff0c\u4efb\u4f55\u4fee\u8865\u8fd9\u4e9b\u8df3\u8f6c\u6216\u5411\u8fd9\u4e9b\u6570\u636e\u6210\u5458\u5199\u5165\u80af\u5b9a\u503c\u7684\u5c1d\u8bd5\u90fd\u5c06\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u901a\u5e38\uff0c\u8fd9\u662f\u5728DesignSheet\u7684\u7236\u7c7bSheet\u5bf9\u8c61(\u8bf7\u6ce8\u610f\uff0cRTTI\u5728\u6b64\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u6062\u590d\u4e00\u4e9b\u7c7b\u540d)\u7684\u6784\u9020\u4e2d\u8fdb\u884c\u7684\uff0c\u4f46\u662f\u4fee\u8865\u53ea\u4f1a\u9020\u6210\u66f4\u591a\u7684\u5f02\u5e38\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684..\u3002\n\u6574\u4e2a\u51fd\u6570\u4e13\u7528\u4e8e\u9519\u8bef\u5904\u7406\u3002\u6211\u7528Flask\u8bbe\u7f6e\u4e86\u6211\u81ea\u5df1\u7684\u670d\u52a1\u5668\u6765\u5904\u7406\u5b83\u5bf9\u5404\u79cd\u8f93\u5165\u7684\u54cd\u5e94\u65b9\u5f0f\uff0c\u4f46\u662f\u9664\u4e86\u66f4\u6539\u5b83\u663e\u793a\u7684\u9519\u8bef\u6d88\u606f\u4e4b\u5916\uff0c\u6211\u4e0d\u80fd\u8ba9\u4efb\u4f55\u6709\u8da3\u7684\u4e8b\u60c5\u53d1\u751f\u3002\u5b83\u53ef\u4ee5\u5c1d\u8bd5\u8bbf\u95ee\u4ee5\u4e0b\u4efb\u4f55\u8def\u5f84\uff1a\n\u5b83\u4f3c\u4e4e\u8fd8\u53ef\u4ee5\u8054\u7cfb/\u4e0b\u8f7d/\u7b49\u79bb\u5b50/release ase.xml\u4ee5\u83b7\u53d6\u66f4\u65b0\uff0c\u4f46\u8fd9\u5bf9\u6211\u6765\u8bf4\u8fd8\u6ca1\u6709\u4ef7\u503c\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u5904\u7406\u5b83\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4ee3\u8868\u4e86\u673a\u5668\u548c\u7cfb\u5217\u3002\n\u554a\uff0c\u6240\u4ee5\u5982\u679c\u5728\u5904\u7406\u54cd\u5e94\u65f6\u5f15\u53d1PLALENT\uff1a\uff1aIOException\uff0c\u5c31\u4f1a\u8c03\u7528\u9519\u8bef\u5904\u7406\u51fd\u6570\u3002\n\u6211\u5f00\u59cb\u5728\u5468\u56f4\u653e\u7f6e\u65ad\u70b9\uff0c\u770b\u770b\u54ea\u4e2a\u51fd\u6570\u5f15\u53d1\u4e86\u5f02\u5e38\uff0c\u6211\u53d1\u73b0\u5b83\u53d1\u751f\u5728\u4e00\u4e2a\u76f8\u5f53\u7279\u6b8a\u7684\u51fd\u6570\u4e2d\u2026\u2026\u3002\n\u6211\u8ba4\u8bc6\u9006\u5411\u5de5\u7a0bCube World\u4e2d\u7684\u8fd9\u6bb5\u4ee3\u7801\u6765\u521b\u5efaPLXML\u3002\u8fd9\u662f\u89e3\u6790\u7b49\u79bb\u5b50\u56fe\u5f62\u6587\u4ef6\u7684\u4ee3\u7801\u3002\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u7b49\u79bb\u5b50\u4f53\u4f3c\u4e4e\u5e0c\u671b\u4ece\u8ba4\u8bc1\u670d\u52a1\u5668\u53d1\u56de\u4e00\u4e2a\u7b49\u79bb\u5b50\u4f53\u56fe\u5f62\u6587\u4ef6\u3002\u56e0\u4e3a\u5b83\u65e0\u6cd5\u89e3\u6790\u6211\u7684\u54cd\u5e94\uff0c\u6240\u4ee5\u5b83\u6b63\u5728\u89e6\u53d1\u9519\u8bef\u5904\u7406\u4ee3\u7801\u3002\n\u8be5\u51fd\u6570(\u540c\u65f6\u8c03\u7528\u89e3\u6790\u5668\u548c\u9519\u8bef\u5904\u7406\u7a0b\u5e8f)\u4f7f\u7528\u4f20\u9012\u7ed9\u5b83\u7684std\uff1a\uff1aVector*\u63a5\u6536\u6570\u636e\uff1a\n\u4f46\u662f\uff0c\u68c0\u67e5\u77e2\u91cf\u4e2d\u5305\u542b\u7684\u6570\u636e\u4f1a\u53d1\u73b0\u6beb\u65e0\u610f\u4e49\uff0c\u5373\u4f7f\u6211\u7684\u670d\u52a1\u5668\u4e3a\u5176\u63d0\u4f9b\u4e86\u6709\u6548\u7684PLX\u6587\u4ef6\u3002\u8fdb\u5165\u6b64\u51fd\u6570\u7684\u5411\u91cf\u5927\u5c0f\u4e0e\u6211\u7684\u670d\u52a1\u5668\u53d1\u9001\u7684\u6570\u636e\u5927\u5c0f\u76f8\u540c\uff0c\u4f46\u6570\u636e\u4e0d\u662f\u6211\u53d1\u9001\u7684\u6570\u636e\u3002\u5728\u5c0f\u7f13\u51b2\u533a\u7684\u66f4\u591a\u5b9e\u9a8c\u4e2d\uff0c\u5b83\u4f3c\u4e4e\u901a\u8fc7\u5bf9\u5b57\u8282\u6267\u884c\u52a0\u6cd5/\u51cf\u6cd5\u5e76\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4ea4\u6362\u5b83\u4eec\u6765\u8fdb\u884c(\u53bb)\u6df7\u6dc6\uff0c\u6240\u4ee5\u5b83\u770b\u8d77\u6765\u4e0d\u662f\u4e00\u4e2a\u7279\u522b\u5f3a\u7684\u6df7\u6dc6\u7b97\u6cd5\u3002(#39\uff1b{#**$$}{##**$$}\u3002\n\u76ee\u524d\uff0c\u6211\u51b3\u5b9a\u5728\u6267\u884c\u65f6\u53ea\u7528\u672a\u63a5\u89e6\u7684\u6570\u636e\u8986\u76d6\u5185\u5b58\u4e2d\u7684\u5411\u91cf\u3002\u8fd9\u6709\u6548\u5730\u7ed5\u8fc7\u4e86\u6b63\u5728\u53d1\u751f\u7684\u4efb\u4f55\u6a21\u7cca\u7b97\u6cd5\u3002\u690d\u5165\u8fd9\u4e2a\u6709\u6548\u7684PLX\u6570\u636e\u540e\uff0c\u6211\u5728\u5c1d\u8bd5\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u65f6\u4e0d\u518d\u6536\u5230\u9519\u8bef\u6d88\u606f\uff0c\u4f46\u5b83\u53cd\u800c\u5bfc\u81f4\u4e86\u5f02\u5e38\u3002\u8fd9\u6700\u7ec8\u662f\u7531\u4e8e\u6211\u6784\u9020\u7684PLX\u6587\u4ef6\u4e2d\u7f3a\u5c11\u5143\u7d20\uff0c\u5e76\u5bfc\u81f4\u7a7a\u6307\u9488\u53d6\u6d88\u5f15\u7528\u3002\u5f88\u591a\u8fd9\u6837\u7684\u95ee\u9898\u90fd\u662f\u7531\u5bfb\u627e\u7269\u4f53\u5f15\u8d77\u7684\u3002\n\u6211\u89e3\u51b3\u4e86\u8fd9\u4e9b\u5f02\u5e38\uff0c\u76f4\u5230\u6211\u4f7f\u7528PLXML\u6784\u5efa\u4e86\u4e00\u4e2aPLX\u6587\u4ef6\uff0c\u5b83\u5177\u6709\u8db3\u591f\u7684\u6700\u4f4e\u8981\u6c42\u6765\u52a0\u8f7dCube World\u7684PLX\u6587\u4ef6\u4e4b\u4e00\u3002\n\u8fd9\u5e76\u4e0d\u7f8e\u89c2\uff0c\u4f46\u8fd9\u53ef\u80fd\u662f\u8fd1\u5341\u5e74\u6765\u7b2c\u4e00\u6b21\u6709\u4eba\u80fd\u591f\u4f7f\u7528\u8840\u6d46\u3002\u4f3c\u4e4eWollay\u4ece\u7b49\u79bb\u5b50\u4f53\u4e2d\u5220\u9664\u4e86\u4e00\u4e2a\u5173\u952e\u7684UI\u6587\u4ef6(\u7528\u4e8e\u5b58\u653e\u827a\u672f\u54c1\u7684\u5de5\u4f5c\u8868)\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u4f7f\u670d\u52a1\u5668\u80fd\u591f", "note_en": "Picroma Plasma is a vector image editor written by Wolfram von Funck under the company Picroma. Some videos of its usage are available  on Picroma&#39;s YouTube channel.\n Picroma/Wollay is also the author the game  Cube World, and as a result, the game&#39;s GUI is constructed using Plasma graphics. I became interested in these Plasma graphics files in 2016, as I was beginning to get into reverse engineering and programming, and I had just finished building a converter for another, much simpler, undocumented image file format. Until this point, no one else had managed to make any useful modifications to Cube World&#39;s image files.\n The years went on, and with the help of my friend  Andoryuuta, I created  PLXML, a tool that could convert the Plasma graphics files (known as .PLX, .PLD, or .PLG) to and from an XML file format. However, since these are vector graphics, it&#39;s more difficult to create an editor for them, and there was no GUI based editor except Plasma itself.\n Plasma was Picroma&#39;s first (and probably, in their eyes, their primary) product, but only one release was ever created, and it was in 2011. It used an authentication server which eventually went down, so when it stopped working, most people just got rid of the software and moved on. It wasn&#39;t until April 20th, 2020 that the installer from 2011 resurfaced and we could get to work on making this old art tool work again.\n   So, where do we start? When Plasma is launched, it wants to contact the authentication server at picroma.de using HTTP, and if you try to login or activate the product, it does not work:\n  Okay. The most obvious next step is to find the code responsible for &#34;activating&#34; Plasma and just patch some code to make it always activate, no matter what the authentication server does.\n  There are a couple places in the binary that reference a few data members in order to determine whether the program has been activated. However, any attempts to patch these jumps or write affirmative values to these data members will result in the program crashing. Usually, this is in the construction of a  Sheet object (Note that RTTI was in this binary, so some class names can be recovered), the parent class of  DesignSheet, but patching around that just creates more exceptions. It is not possible  ...\n  This entire function is dedicated to error handling. I set up my own server with Flask to play with how it responds to various inputs, but I wasn&#39;t able to get anything interesting to happen other than change which error message it displayed. It can attempt to access any of the following paths:\n  It also seems to be able to contact  /Download/Plasma/release.xml for updates, but this is not yet valuable to me.\n   At this point, I had no idea what to do with it, but I assumed it represented the machine and serial in some way.\n   Ah, so that error handling function is called if there is a  plasma::IOException raised while handling the response.\n I started placing breakpoints around to see which function raised the exception, and I found it happening in quite a peculiar function...\n  I recognize this code from reverse engineering Cube World to create  PLXML. This is code to parse a Plasma graphics file. It seems that, for some reason, Plasma is expecting a Plasma graphics file to be sent back from the authentication server. Since it is failing to parse my response, it is triggering the error handling code.\n The function (which calls both the parser and error handler) receives data using an  std::vector* which is passed to it:\n  However, examining the data contained within the vector reveals nonsense, even when my server gives it a valid PLX file. The vectors coming into this function are the correct size to be the data being sent by my server, but the data is not what I sent. Upon more experimentation with small buffers, it seemed to be (de)obfuscated by performing addition/subtraction on the bytes and swapping them around somehow, so it didn&#39;t seem like a particularly strong obfuscation algorithm.\n For now, I decided to just overwrite the vector in memory with untouched data at this point in execution. This effectively bypasses whatever obfuscation algorithm is happening. After implanting this valid PLX data, I stopped getting error messages when attempting to authenticate, but it caused exceptions instead. This ended up being due to elements being missing from my constructed PLX file and causing null pointer dereferences. A lot of these issues are caused by looking for an object  ...\n  I worked through these exceptions until I constructed a PLX file using  PLXML with enough of the bare minimum requirements to load up one of Cube World&#39;s PLX files.\n  It&#39;s not pretty, but this is probably the first time anyone&#39;s been able to use Plasma at all in the better part of a decade. It seems that Wollay removed a critical UI file (for the sheet which artwork exists on) from Plasma, and made it so that the server would provide an obfuscated version of it to the client. That way, no amount of tampering could get an unauthorized copy of Plasma to work. Unfortunately, without the authentication server, authorized copies of Plasma cannot  ...\n Around this time, I started looking at what the picroma.de domain used to point to. I didn&#39;t find much of interest on archive.org, but...\n   With ownership of the picroma.de domain, in theory I could make Plasma work without even touching the binary or modifying the hosts file. Just, vanilla copies of Plasma would suddenly start working again one day. The thought of this was so cool to me that I halted my pursuit of creating a better sheet PLX file and started a deeper investigation into how the response was getting (de)obfuscated by the client. Understanding this would hopefully allow me to have my server send well-formed  ...\n I had previously not been able to understand anything about how the deobfuscation algorithm was actually implemented. I found the last bit of code that seemed to touch it before it was transformed:\n  However, setting breakpoints on bytes inside this buffer to see what algorithm was touching it didn&#39;t lead me to anywhere useful. I tried to work my way up the stack to find the loop that was altering the buffer, but I was always led to a function that didn&#39;t seem to be responsible for deobfuscating a buffer, and it also didn&#39;t make very much sense to me since it was constantly calling functions by reference.\n  What was happening here seemed over my head. I&#39;d seen this same type of code pattern in Cube World before, and was unable to figure out what was going on.\n Apparently Andoryuuta was less oblivious, because he noted he wasn&#39;t able to figure out how the virtual machine in Cube World worked.\n   When framing it in the perspective of some kind of bytecode interpreter, emulator, or virtual machine, and given that I have created an emulator for obscure hardware before, this code suddenly made a lot more sense. So, with that bit of knowledge, I started working on the decompilation of this strange loop function:\n  This machine, whether to be called a virtual machine, emulator, or bytecode interpreter, had some  std::vector containing code that was slightly obfuscated along with another  std::vector which, when indexed using an opcode, contains a function pointer corresponding to that opcode. Data is simply deobfuscated by performing  offset - program[offset] . Eventually, the opcode would become  0x0C, and the emulation would stop, so this is likely a HALT or RET opcode. Each piece of  ...\n I dumped this strange bytecode from memory, and knowing that  data = offset - program[offset], I was able to deobfuscate the entire thing, but that isn&#39;t much use without some kind of disassembler.\n With that, I decided I had to figure out what each opcode did. It is worth noting at this point that I tried to see if this bytecode belongs to any existing CPU or language, but my search came up short. The constructor of this emulator conveniently assigned all the functions for me to analyze, but the list went on and on...\n  I painstakingly assigned meaning to every opcode function that I could, and I identified that this was a completely stack-based machine which did all its operations using the stack. It&#39;s worth noting that every element on the stack is itself a vector. This allows any element to hold arbitrary data, such as pointers, strings, or simple integers. Here&#39;s an example of addition:\n  It takes two elements off the stack, adds them together, and then pushes the result back to the stack.\n Unfortunately, you can see a hint of something that became far too common while analyzing these opcodes. It makes one element negative before subtracting it. This is part of a larger pattern of fairly weak attempts to confuse a reverse engineer that made it frustrating to figure out what all the opcodes did, and there were many duplicate opcodes that were just implemented in different ways.\n           Warming up the PUSH machine by pushing and popping to and from the stack a few times first:\n   There was one instruction that stopped me from blindly trying to disassemble every pair of dwords. It was the only one which was variable in length, so it caused the  &lt;opcode&gt; &lt;argument&gt; alignment to change. It&#39;s an instruction to push a string literal to the stack, and it&#39;s formatted  &lt;opcode = 0x13&gt; &lt;argument = number of characters in string&gt; &lt;string, with each character taking 4 bytes&gt;.\n With this knowledge, I decided to take a different approach. I suspected that only a few of the implemented opcodes were actually used, so I parsed through the bytecode, accounting for alignment changes due to the PUSHSTR opcode, and generated a set of 24 opcodes that were actually used:\n [0x05, 0x0C, 0x12, 0x13, 0x14, 0x17, 0x1B, 0x24, 0x2C, 0x3A, 0x3B, 0x43, 0x44, 0x4A, 0x56, 0x5C, 0x63, 0x69, 0x71, 0x73, 0x74, 0x75, 0x86, 0x89]\n   Reverse engineering these left me with a table of all the opcodes I&#39;d need to know:\n    I had been working on a disassembler while reverse engineering the opcodes, but now that I have a complete description of the opcodes this program uses, I can disassemble the bytecode and begin to make a serious attempt at understanding its contents. The source for my disassembler is available at  https://github.com/ChrisMiuchiz/PLASM-Disassembler.\n To find which function was obfuscating the PLX, I set a breakpoint on the data, and once it was written to, I set another breakpoint inside the emulator so that I could identify the program counter at the next virtual instruction.\n  Note: The comments documenting these syscalls were added later. My strategy for figuring out what each one did mostly came down to simply stepping through to see what functions each one called. Syscalls are not OS syscalls; they are syscalls unique to the implementation of this emulator and are used to interact with x86 code.\n I had arrived in the middle of the obfuscation process. However, I wanted to make sure I started from the beginning. This function starts at address  0233, so I looked for instances of  CALL $0233. There were a few usages of it, but I had an idea of what part of code I was looking for, so eventually I was led to subroutine  0ED1.\n  I started by reverse engineering all the functions that this function called. My strategy for doing this was to look at every chunk of code that resulted in a call, syscall, or variable write, and convert it into a line of higher level pseudocode. For example, this is what the beginning of the  0233 subroutine looked like after I had taken my notes on it:\n   sub_0233 (arg0, arg1) { var2 = arg0.length; var3 = arg1.length; arg0.resize(var2 + var3); var4 = 0; while (var4 &lt; var3) { arg0[var2+var4] = var1[var4]; var4++; } return 0;}\n It appends the data held by arg1 to the data held by arg0. I replaced all calls to this with  CALL EXTEND_ARRAY. I did similar renaming for future functions as well.\n     This function&#39;s purpose was confusing at first, but later, in context, I learned that it was used to generate an index to swap bytes with in order to scramble the PLX. Rather, in this case, it&#39;s supposed to be  unscrambling the PLX, but since it&#39;s already unscrambled, it ruins the PLX. It takes an index, the length of the buffer to be used for, and an array of values for use as a key.\n  sub_0593(arg0, arg1) { var2 = arg0.length; var3 = var2 - 1; while (var3 &gt;= 0) { var4 = sub_056F(var3, var2, arg1); // Get swap index arg0[var3] = arg0[var3] - var3; var5 = arg0[var3]; var6 = arg0[var4]; arg0[var3] = var6; arg0[arg4] = var5; var3--; } return 0;}\n This, combined with the previous function finally begins to expose the (de)obfuscation algorithm, which is actually a form of weak symmetrical encryption. It takes a buffer and a key, goes through all the indices in reverse (since this is for decryption), performs arithmetic on a byte and swaps it with another byte using said key.\n  sub_0ED1(global) { // A buffer representing your &#34;id&#34; is already on the stack var0 = new vector(); var0 = PLX; // Retrieved through some syscall var1 = new vector(); var2 = new vector(); var1.resize(16); var1 = {37, 124, 3, 213, 190, 48, 142, 34, 7, 77, 143, 210, 201, 97, 86, 23}; var2.extend(global); sub_0593(var2, var1); // decrypt sub_0593(var0, var2); // decrypt //don&#39;t think I need to care about the rest of this function}\n A key is constructed at runtime to decrypt your machine&#39;s &#34;id&#34; which is already on the stack, and then the id is used to decrypt the PLX.\n Finally, we have arrived at the answer for how the decryption algorithm works, and it&#39;s trivial to run it in reverse to derive the encryption algorithm that our authentication server will need. However, this takes an encrypted version of our id, and it looks nothing like the hexdump that is being provided as a parameter. Even when decrypted, it looks something like this:\n   For my purposes, I don&#39;t need to know how the id itself is generated (though, strings in this bytecode reveal that it uses WQL to get serial numbers and such from hardware components), but I do need to know how to go from the parameter being sent to the server to this plaintext form so I can encrypt the PLX with it.\n   However, that function was called by reference, and returned to one of the emulator&#39;s SYSCALL implementations:\n    It constructs a different key than before:  [ 4, 21, 132, 64, 32, 132, 243, 132, 17, 177, 43, 132, 101, 42, 44, 150]\n Afterwards, it appends your machine id to another array. It was confusing in its implementation for me, but at runtime, I could see that this  UNKNOWN? chunk actually fills var1 with your serial. As a result, this concatenates your serial with your machine id. Once this concatenated string is created, it encrypts it using the new key, dumps it as hex, and sends it to x86 code to be used as a parameter for the server.\n  Now we know everything we need to know in order to reverse this process so that the server can generate encrypted data.\n     This works. Using this code to generate responses from our server allows Plasma to successfully decrypt the traffic. The product activates. We haven&#39;t made any changes to the program nor our hosts file. It&#39;s a crackless crack.\n   We have a working authentication server, but the PLX file we&#39;re sending still doesn&#39;t work quite right. It doesn&#39;t look like the sheet displayed in those Picroma videos, and I&#39;ve had trouble actually adding shapes to the PLX. The worst problem is that sometimes it still crashes Plasma.\n I tracked the crashing issue down to attempting to deallocate uninitialized memory. With some experimentation, I realized that in my PLX file, I had 2  plasma::Nodes associated with 1  plasma::Widget. This was probably causing an attempt to destruct the widget twice. Removing the widget from one of the nodes fixed the issue. Associating a new widget with one of the nodes causes an infinite loop, so I couldn&#39;t do that.\n While fixing crashing issues, I noticed that if a PLX file that crashes Plasma was sent, Plasma would likely crash next run without even connecting to the server. It turned out that Plasma saves data to  C:\\ProgramData\\Picroma\\Plasma\\config and  C:\\ProgramData\\Picroma\\Plasma\\settings.  config contains your serial and a value representing the state of your activation.  settingscontains the last encrypted PLX which Plasma received. Additional, less  ...\n I&#39;m not sure how sheets are supposed to work in Plasma, but they seemed to have been rectangles around 1280x720 pixels, with a drop shadow behind them, upon which artwork would exist while being edited. For now, I made them slightly larger rectangles to account for modern monitors. I&#39;m not sure if they perfectly replicate the original functionality, but they seem perfectly usable for now. I will revisit them if I need to.\n The most desirable solution would be to get the original sheet PLX. Although unlikely, since Plasma saves the encrypted file to  C:\\ProgramData\\Picroma\\Plasma\\settingsupon an activation attempt, it could be possible to recover it from an old installation and attempt to decrypt it. A zero byte file will be saved if authentication fails, but the encrypted data may still exist on the hard disk since the data was not strictly overwritten, so recovery  ...", "posttime": "2020-05-02 18:02:04", "tags": "\u7f16\u8f91\u5668,decade,plasma", "title": "\u8ba9\u4e00\u4e2a\u5341\u5e74\u524d\u7684\u77e2\u91cf\u7f16\u8f91\u5668\u590d\u6d3b", "title_en": "Bringing a decade old vector editor back to life", "transed": 0, "url": "https://github.com/ChrisMiuchiz/Plasma-Writeup", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u8f91\u5668", "decade", "plasma"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000252, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u65f6\u95f4\u95ee\u9898\u3002\u5728\u51e0\u4e2a\u6708\u7684\u6cc4\u5bc6\u548c\u8c23\u8a00\u4e4b\u540e\uff0c\u82f1\u7279\u5c14\u62c9\u5f00\u4e86\u7b2c10\u4ee3S\u7cfb\u5217\u53f0\u5f0f\u673a\u82af\u7247\u7684\u5e37\u5e55\uff0c\u9177\u777fi9-10900K\u9886\u5148\u3002\u82b1500\u7f8e\u5143\u5de6\u53f3\uff0c\u4f60\u5c31\u53ef\u4ee5\u4e70\u523010\u6838\u5904\u7406\u5668\uff0c\u6700\u9ad8\u53ef\u8fbe5.3 GHz\uff0c\u57fa\u672c\u901f\u5ea6\u4e3a3.7 GHz\u3002\u6700\u68d2\u7684\u662f\uff0c\u5b83\u662f\u4e00\u6b3e\u771f\u6b63\u7684\u7b2c10\u4ee3\u82af\u7247\uff0c\u4e0e\u82f1\u7279\u5c14\u53bb\u5e74\u79cb\u5929\u63a8\u51fa\u7684\u540d\u5b57\u4ee4\u4eba\u56f0\u60d1\u7684X\u7cfb\u5217\u5904\u7406\u5668\u4e0d\u540c\u3002\n\u5982\u679c\u4f60\u4e0d\u613f\u610f\u82b1\u90a3\u4e48\u591a\u94b1\u4e70\u4e00\u4e2a\u65b0\u7684CPU\uff0c\u4f60\u8fd8\u6709\u5f88\u591a\u66f4\u4fbf\u5b9c\u7684\u9009\u62e9\u3002i7-10700\u770b\u8d77\u6765\u66f4\u5212\u7b97\uff0c\u62e5\u6709i9\u82af\u7247\u7684\u5927\u90e8\u5206\u901f\u5ea6\uff0c\u800c\u4e14\u5b83\u7684\u89e3\u9501\u53d8\u79cd\u53ef\u80fd\u4f1a\u76f8\u5f53\u4e0d\u9519\u5730\u8d85\u9891\u3002\u8fd9\u4e00\u6b21\uff0c\u6bcf\u4e00\u6b3e\u9177\u777fCPU\u90fd\u6709\u8d85\u7ebf\u7a0b\u529f\u80fd--\u5373\u4f7f\u662f\u4f4e\u7aef\u7684i3\u673a\u578b\u4e5f\u662f\u5982\u6b64\uff01--\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u591a\u4efb\u52a1\u652f\u6301\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u82f1\u7279\u5c14\u5fc5\u987b\u6295\u5165\u5c3d\u53ef\u80fd\u591a\u7684\u949f\u58f0\u548c\u53e3\u54e8\u6765\u4e0eAMD\u7684\u4f18\u79c0\u4ea7\u54c1\u7ade\u4e89.\u3002\n\u867d\u7136AMD\u6b63\u5728\u63a8\u52a8\u66f4\u591a\u7684\u5185\u6838\u548c\u66f4\u9ad8\u7684\u6548\u7387--\u5b83\u7684\u82af\u7247\u6784\u5efa\u5728\u73b0\u4ee3\u76847 nm\u67b6\u6784\u4e0a\uff0c\u800c\u82f1\u7279\u5c14\u4ecd\u7136\u505c\u7559\u572814 nm\u7684\u57fa\u7840\u4e0a\uff0c\u62e5\u6709\u8fd9\u4e9b\u5f57\u661f\u6e56(Comet Lake)\u5904\u7406\u5668--\u800c\u82f1\u7279\u5c14\u5219\u4f9d\u8d56\u4e8e\u66f4\u9ad8\u7684\u65f6\u949f\u901f\u5ea6\u3002\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u6211\u4eec\u4e86\u89e3\u5230\uff0c\u82f1\u7279\u5c14\u5373\u5c06\u63a8\u51fa\u7684\u7b2c10\u4ee3H\u7cfb\u5217\u7b14\u8bb0\u672c\u7535\u8111CPU\u4e5f\u5c06\u8fbe\u52305.3 GHz\uff0c\u56e0\u6b64\u8fd9\u4e00\u91cc\u7a0b\u7891\u5728\u53f0\u5f0f\u673a\u65b9\u9762\u5e76\u4e0d\u592a\u4ee4\u4eba\u60ca\u8bb6\u3002\n\u7531\u4e8e\u82f1\u7279\u5c14\u77e5\u9053\u5b83\u5728\u65f6\u949f\u901f\u5ea6\u65b9\u9762\u6709\u4f18\u52bf\uff0c\u6240\u4ee5\u5b83\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u5730\u7a81\u51fa\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u6700\u65b0\u7684Turbo Boost Max 3.0\u529f\u80fd\u5c06\u8bc6\u522b\u82af\u7247\u4e0a\u901f\u5ea6\u6700\u5feb\u7684\u4e24\u4e2a\u5185\u6838\uff0c\u5e76\u8ba9\u5b83\u4eec\u9996\u5f53\u5176\u51b2\u5730\u5904\u7406\u60a8\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u8ba9i9\u5904\u7406\u5668\u5728\u4f4e\u4e8e70\u6444\u6c0f\u5ea6\u7684\u60c5\u51b5\u4e0b\u52c9\u5f3a\u7ef4\u6301\u66f4\u9ad8\u901f\u5ea6\u7684\u65b9\u6cd5--\u70ed\u901f\u5ea6\u63d0\u5347\u3002\u8fd9\u4e5f\u662f\u82f1\u7279\u5c14\u662f\u5982\u4f55\u5728\u4e00\u53f0\u5355\u7247\u4e0a\u8fbe\u52305.3 GHz\u7684\u9ad8\u6027\u80fd\u6570\u5b57\u7684\u3002\n\u5728\u6027\u80fd\u65b9\u9762\uff0c\u82f1\u7279\u5c14\u58f0\u79f0i9-10900K\u6bd4\u7edd\u5730\u6c42\u751f\u4e0a\u4e00\u4ee39900K\u5feb10%\uff0c\u6bd4\u4e09\u5e74\u524d\u7684i7-7700K\u5feb63%(\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u65f6i9\u82af\u7247\u8fd8\u4e0d\u5b58\u5728)\u3002\u65b0\u5904\u7406\u5668\u57284K\u89c6\u9891\u7f16\u8f91\u65f6\u4e5f\u6bd4\u4e0a\u4e00\u4ee3\u82af\u7247\u5feb\u7ea618%\uff0c\u6bd47700K\u5feb35%\u3002\u6240\u4ee5\uff0c\u662f\u7684\uff0c\u5b83\u7684\u901f\u5ea6\u66f4\u5feb--\u5c3d\u7ba1\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u7b2c9\u4ee3\u82af\u7247\uff0c\u5b83\u53ef\u80fd\u5c31\u4e0d\u503c\u5f97\u5347\u7ea7\u4e86\u3002\n\u4e0e\u901f\u5ea6\u4e3b\u9898\u4fdd\u6301\u4e00\u81f4\uff0c\u82f1\u7279\u5c14\u4e3a\u53d1\u70e7\u53cb\u63d0\u4f9b\u4e86\u66f4\u591a\u8d85\u9891\u7684\u65b9\u6cd5\u3002\u91cd\u65b0\u8bbe\u8ba1\u7684\u82f1\u7279\u5c14Extreme Tuning Utility\u53ef\u4ee5\u8ba9\u4f60\u66f4\u597d\u5730\u63a7\u5236\u7535\u538b\u548c\u9891\u7387\u3002\u5b83\u8fd8\u53ef\u4ee5\u8ba9\u4f60\u5173\u95ed\u5355\u4e2a\u5185\u6838\u4e0a\u7684\u8d85\u7ebf\u7a0b--\u4e4d\u4e00\u770b\u8fd9\u4f3c\u4e4e\u6709\u8fdd\u76f4\u89c9\uff0c\u4f46\u82f1\u7279\u5c14\u89e3\u91ca\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u51cf\u5c11\u70ed\u91cf\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u8d85\u9501\u5668\u90fd\u662f\u6700\u5927\u7684\u654c\u4eba\u3002\n\u65b0\u5904\u7406\u5668\u8fd8\u914d\u5907\u4e86\u66f4\u8584\u7684\u82af\u7247\u548c\u66f4\u539a\u7684\u94dcIHS(\u96c6\u6210\u6563\u70ed\u5668)\uff0c\u8fd9\u4e5f\u5e94\u8be5\u6709\u52a9\u4e8e\u4fdd\u6301\u66f4\u51c9\u723d\u3002\u8fd9\u662f\u660e\u667a\u4e4b\u4e3e\uff0c\u56e0\u4e3a\u82f1\u7279\u5c14\u6240\u6709\u65b0\u82af\u7247\u7684TDPS(\u70ed\u8bbe\u8ba1\u7279\u6027)\u4ecd\u9ad8\u4e8eAMD\u3002\u4f8b\u5982\uff0c10900K\u7684TDP\u4e3a125\u74e6\uff0c\u800cAMD\u7684Ryzen 9 3900X\uff1bS\u53ea\u6709105\u74e6\u3002(\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cTDP\u662f\u4e00\u4e2a\u76f8\u5f53\u4e0d\u7a33\u5b9a\u7684\u672f\u8bed\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u77e5\u9053\u90a3\u4e2a125\u74e6\u7684\u6570\u5b57\u4f1a\u8f6c\u5316\u6210\u4ec0\u4e48\u3002)\u3002\n\u4f60\u53ef\u4ee5\u671f\u5f85\u5728\u4e94\u6708\u4efd\u770b\u5230\u89e3\u9501\u7684\u201cK\u201dCPU\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u5176\u4ed6\u82af\u7247\u7684\u65f6\u95f4\u8868\u3002\u4ec5\u4ece\u89c4\u683c\u6765\u770b\uff0c\u82f1\u7279\u5c14\u7b2c10\u4ee3\u53f0\u5f0f\u673a\u5904\u7406\u5668\u5bf9\u4e8e\u4efb\u4f55\u62e5\u67093\u5e74\u65e7\u7535\u8111\u7684\u4eba\u6765\u8bf4\u4f3c\u4e4e\u90fd\u662f\u4e00\u4e2a\u53ef\u9760\u7684\u5347\u7ea7\u3002\u5c3d\u7ba1\u5982\u6b64\uff0cAMD\u73b0\u5728\u5728\u6838\u5fc3\u6570\u91cf\u548c\u67b6\u6784\u6548\u7387\u65b9\u9762\u4ecd\u5177\u6709\u4f18\u52bf\u3002\u4e5f\u8bb8\u660e\u5e74\u6211\u4eec\u6700\u7ec8\u4f1a\u770b\u5230\u82f1\u7279\u5c14\u768410\u7eb3\u7c73\u53f0\u5f0f\u673aCPU\uff0c\u4f46\u5230\u90a3\u65f6AMD\u5c06\u4f1a\u6709\u4e00\u4e2a\u66f4\u7cbe\u81f4\u7684\u8fc7\u7a0b\u3002\u8003\u8651\u5230AMD\u5df2\u7ecf\u6380\u8d77\u4e86\u591a\u5c11\u6ce2\u6f9c..\u3002", "note_en": "It&#39;s about time. After months of  leaks and  rumors, Intel has pulled back the curtain on its 10th generation &#34;S-series&#34; desktop chips, with the Core i9-10900K leading the pack. For around $500, you&#39;ll get a 10-core processor that can reach up to 5.3GHz, with a base speed of 3.7GHz. And best of all, it&#39;s an  actual\u00a010th-gen chip, unlike the  confusingly-named X-series processors Intel launched last fall.\n If you&#39;re not willing to spend that much on a new CPU, you&#39;ve also got plenty of cheaper options. The i7-10700 looks like more of a deal, with most of the speed you\u2019ll find on the i9 chips, and its unlocked variant might be decently overclockable. This time around, every Core CPU also features hyperthreading \u2014 even the lowly i3 models! \u2014for  better multitasking support. At this point, Intel has to throw in as many bells and whistles as it can to compete with AMD&#39;s excellent  ...\n  While AMD is pushing more cores and better efficiency -- its chips are built on a modern 7nm architecture while Intel is still  stuck on 14nm\u00a0with these &#34;Comet Lake&#34; processors\u00a0-- Intel is leaning on higher clock speeds. We learned earlier this month that  Intel&#39;s upcoming 10th-gen H-series laptop CPUs will also reach 5.3GHz, so that milestone isn\u2019t too surprising on the desktop side.\n And since Intel knows that it has an advantage with clock speed, it&#39;s aiming to highlight that wherever possible. The updated Turbo Boost Max 3.0 feature, for example, will identify the two fastest cores on your chip and have them tackle the brunt of your workload. And there&#39;s also &#34;Thermal Velocity Boost,&#34; a way for i9 processors to eke out a bit more speed when they&#39;re under 70 celsius. That&#39;s also how Intel is reaching that lofty 5.3GHz figure on a single  ...\n  Performance-wise, Intel claims the i9-10900K is 10 percent faster than the last-gen 9900K in  PUBG\u00a0and 63 percent faster than the three-year-old i7-7700K (remember, the i9 chips didn&#39;t exist back then). The new processor is also around 18 percent faster at 4K video editing than the last-gen chip, and 35 percent faster than the 7700K. So yeah, it&#39;s faster -- though as usual, it&#39;s probably not worth upgrading if you&#39;re on a 9th gen chip.\n  Keeping with the speed theme, Intel is\u00a0giving enthusiasts even more ways to overclock.\u00a0There&#39;s a redesigned Intel Extreme Tuning Utility, which gives you more control over voltage and frequency. It&#39;ll also let you turn off hyperthreading on individual cores \u2014 which might seem counter-intuitive at first, but Intel explains it\u2019s a useful way to reduce heat, every overclocker&#39;s worst enemy.\n The new processors also feature a thinner die along with a thicker copper IHS (integrated heat spreader), which should also help keep things cooler. That&#39;s a smart move, since all of Intel&#39;s new chips still have higher TDPs (thermal design profiles) than AMD&#39;s. The 10900K has a 125-watt TDP, for example, while AMD&#39;s Ryzen 9 3900X&#39;s is just 105-watts. (It \u2019s worth noting that TDP is quite a fluid term, though, so we won \u2019t know what that 125-watt number will translate  ...\n You can expect to see the unlocked \u201cK \u201dCPUs in May, but we don \u2019t have a timeline for the other chips. Based on the specs alone, the Intel 10th-gen desktop processors seem like a solid upgrade for anyone with a 3-year old PC. Still, AMD now has the advantage when it comes to core count and architecture efficiency. Maybe next year we \u2019ll finally see Intel \u2019s desktop CPUs on 10nm, but by then AMD will have an even more refined process. Given just how many waves AMD has been making  ...", "posttime": "2020-05-02 18:01:57", "tags": "\u82f1\u7279\u5c14,cpu,desktop,intel", "title": "\u82f1\u7279\u5c14\u7684\u65d7\u8230\u7b2c10\u4ee3\u53f0\u5f0f\u673aCPU\u62e5\u670910\u4e2a\u5185\u6838\uff0c\u8fbe\u52305.3 GHz", "title_en": "Intel's flagship 10th-gen desktop CPU has 10 cores, reaches 5.3GHz", "transed": 0, "url": "https://www.engadget.com/intel-10th-gen-s-series-desktop-cpu-10900k-130000913.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u82f1\u7279\u5c14", "cpu", "desktop", "intel"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000251, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eecKinvk\u5b9e\u9a8c\u5ba4\u56e2\u961f\u7684\u5de5\u4f5c\u4e4b\u4e00\u662f\u4e3a\u9047\u5230Kubernetes\u6216Linux\u73af\u5883\u95ee\u9898\u7684\u5ba2\u6237\u63d0\u4f9b\u4e13\u5bb6\u6280\u672f\u54a8\u8be2-\u4ece\u5b89\u5168\u5ba1\u8ba1\u5230\u7f51\u7edc\u6545\u969c\u518d\u5230\u4ee4\u4eba\u8d39\u89e3\u7684\u6027\u80fd\u95ee\u9898\u7684\u6545\u969c\u6392\u9664\u3002\n\u51e0\u5468\u524d\uff0c\u89c6\u9891\u5e7f\u544a\u6280\u672f\u516c\u53f8SmartClip\u8054\u7cfb\u4e86\u6211\u4eec\uff0c\u8981\u6c42\u6211\u4eec\u8c03\u67e5\u4ed6\u4eec\u7684Kubernetes\u90e8\u7f72\u7684\u6027\u80fd\u95ee\u9898\u3002\u5728\u8fd9\u7bc7\u535a\u6587\u4e2d\uff0c\u6211\u5c06\u5411\u60a8\u4ecb\u7ecd\u6211\u4eec\u7684\u6d41\u7a0b\uff0c\u5e76\u89e3\u91ca\u5982\u4f55\u4f7f\u7528BCC\u9879\u76ee\u4e2d\u7684BPF\u5de5\u5177\u5feb\u901f\u8bc6\u522b\u548c\u89e3\u51b3\u95ee\u9898\u3002\u6700\u540e\uff0c\u6211\u5c06\u89e3\u91caInspektor Gadget\u5982\u4f55\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u8bbf\u95ee\u8fd9\u4e9b\u76f8\u540c\u7684BPF\u5de5\u5177\uff0c\u7528\u4e8e\u60a8\u81ea\u5df1\u7684Kubernetes\u5b89\u88c5\u3002\nKubernetes\u96c6\u7fa4\u8fd0\u884cnginx(\u5176\u4e2d\u5305\u62ecfluentd\u548cApacheFlume)\u6765\u5904\u7406\u65e5\u5fd7\u3002\u5728\u90e8\u7f72\u4e86\u65b0\u7248\u672c\u7684Kubernetes\u4e4b\u540e\uff0cdevopteam\u6ce8\u610f\u5230\u4e86fluentd\u4e2d\u7684\u4e00\u4e2a\u6027\u80fd\u56de\u5f52\u95ee\u9898\uff1a\u5b83\u65e0\u6cd5\u8db3\u591f\u5feb\u5730\u5904\u7406\u65e5\u5fd7\uff0c\u5e76\u4e14\u4e00\u76f4\u5728\u7f13\u51b2\u65e5\u5fd7\uff0c\u76f4\u5230\u8fbe\u5230\u6781\u9650\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u56de\u5f52\u95ee\u9898\u53ea\u6709\u5728\u751f\u4ea7\u51e0\u5929\u540e\u624d\u80fd\u663e\u73b0\u51fa\u6765\uff0c\u5c3d\u7ba1\u56e2\u961f\u8bd5\u56fe\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u521b\u5efa\u4e00\u4e2a\u590d\u5236\u573a\u666f\uff0c\u4f46\u5728\u751f\u4ea7\u4e4b\u5916\u7684\u6d4b\u8bd5\u4e2d\u65e0\u6cd5\u590d\u5236\u3002\u800c\u4e14\u66f4\u6709\u53ef\u80fd\u53d1\u751f\u5728\u665a\u4e0a\uff0c\u56e0\u4e3a\u6709\u66f4\u591a\u7684\u6d41\u91cf\u8981\u5904\u7406\u3002\n\u8fd9\u6b21\u5347\u7ea7\u610f\u5473\u7740\u51e0\u4e2a\u53d8\u5316\uff1aLinux\u5185\u6838\u7684\u65b0\u7248\u672c\u3001Kubernetes\u7684\u65b0\u7248\u672c\u3001\u4e0d\u540c\u7684Docker\u7248\u672c\u7b49\u7b49\u3002\u4e3a\u4e86\u627e\u51fa\u662f\u54ea\u4e2a\u53d8\u5316\u5bfc\u81f4\u4e86\u95ee\u9898\uff0cSmartClip\u56e2\u961f\u9010\u4e00\u9694\u79bb\u4e86\u4e0d\u540c\u7684\u53d8\u5316\uff0c\u76f4\u5230\u4ed6\u4eec\u627e\u5230\u4e86\u5bfc\u81f4\u56de\u5f52\u95ee\u9898\u7684\u4e00\u4e2a\u53d8\u5316\uff1a\u4eceKubernetes v1.14.4\u66f4\u65b0\u5230v1.16.4\u3002\n\u8d77\u521d\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff1a\u6211\u770b\u4e0d\u51fa\u4efb\u4f55\u539f\u56e0\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4efb\u4f55KubernetesComponent(Kube-apiserver\u3001\u63a7\u5236\u5668\u7ba1\u7406\u5668\u3001kubelet\u7b49)\u3002\u5e94\u8be5\u4f1a\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f(Fluentd\u548cApache Flume)\u901f\u5ea6\u53d8\u6162\u3002\n\u6211\u88ab\u6388\u4e88ssh\u8bbf\u95ee\u4e00\u4e2a\u597d\u8282\u70b9(\u8fd0\u884cKubernetesv1.14.4)\u548c\u4e00\u4e2a\u574f\u8282\u70b9(\u8fd0\u884cv1.16.4)\u7684\u6743\u9650\uff0c\u56e0\u6b64\u6211\u53ef\u4ee5\u627e\u51fa\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\u3002\u6211\u6700\u521d\u7684\u60f3\u6cd5\u662f\u6bd4\u8f83\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u4f46\u662f\uff0c\u6211\u770b\u4e0d\u51fa\u597d\u8282\u70b9\u548c\u574f\u8282\u70b9\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\u3002\nBPF\u7f16\u8bd1\u5668\u96c6\u5408(BCC)\u9879\u76ee\u5305\u542b\u7528\u4e8e\u6027\u80fd\u5206\u6790\u7684\u5de5\u5177\u3002\u5176\u4e2d\u4e4b\u4e00\u662fCPUprofiler\uff1a\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u6bcf\u9694\u4e00\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u91c7\u96c6\u5185\u6838\u6216\u7528\u6237\u7a7a\u95f4\u5806\u6808\u8ddf\u8e2a\u7684\u6837\u672c\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u8ddf\u8e2a\u53ef\u89c1\u7684\u6b21\u6570\u3002\n\u6027\u80fd\u95ee\u9898\u53ea\u5728\u751f\u4ea7\u4e2d\u51fa\u73b0\uff0c\u4e0d\u5efa\u8bae\u5728\u6ca1\u6709\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b\u5728\u751f\u4ea7\u8282\u70b9\u4e0a\u5b89\u88c5\u65b0\u5de5\u5177\u3002\u5e78\u8fd0\u7684\u662f\uff0cbcc\u53ca\u5176CPU\u5206\u6790\u5668\u53ef\u4ee5\u4f5c\u4e3a\u5bb9\u5668\u6267\u884c\uff0c\u800c\u65e0\u9700\u5728\u8282\u70b9\u4e0a\u5b89\u88c5\u3002\nDocker\u8fd0\u884c--rm-ti--\u7279\u6743\\--net=host--pid=host\\-v/usr/src\uff1a/usr/src\\-v/lib/module\uff1a/lib/module\\docker.io/kunk/bcc\\/usr/share/bcc/tools/profile-d-f-K-p$FLUENTD_PID 10\u3002\n\u60a8\u53ef\u4ee5\u5728kventk\u7684\u516c\u5171\u5bb9\u5668\u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u5bb9\u5668\u955c\u50cf\uff0c\u5730\u5740\u662fdocker.io/kinvk/bcc\u3002\u5982\u679c\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u60a8\u9700\u8981\u6784\u5efa\u60a8\u81ea\u5df1\u7684\u6620\u50cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u4e00\u4e2a\u6708\u524d\u63d0\u4f9b\u7684GitHub\u64cd\u4f5c\u4e2d\u7684\u65b0\u90e8\u5206\u3002\n\u6b64\u547d\u4ee4\u6309\u9891\u7387\u4ece\u6700\u4f4e\u9891\u7387\u5230\u6700\u9891\u7e41\u6253\u5370\u5185\u6838\u5806\u6808\u8ddf\u8e2a\u3002\u8fd9\u5141\u8bb8\u7528\u6237\u67e5\u770b\u8f93\u51fa\u7684\u6700\u540e\u4e00\u884c\uff0c\u4ee5\u83b7\u5f97\u6700\u91cd\u8981\u7684\u884c\u3002\u8f93\u51fa\u7684\u6700\u540e\u4e00\u884c\u662f\u8fd9\u4e2a\u5185\u6838\u5806\u6808\uff1a\n\u8fd9\u4e2a\u5e26\u6709\u51fd\u6570ebt_ip_mt()\u7684\u5806\u6808\u4ec5\u5728\u574f\u8282\u70b9\u4e0a\u5217\u51fa\u3002\u6211\u4eec\u53d1\u73b0\u597d\u8282\u70b9\u548c\u574f\u8282\u70b9\u4e4b\u95f4\u6709\u4e0d\u540c\u7684\u884c\u4e3a\u3002\u8fd9\u662f\u503c\u5f97\u63a2\u8ba8\u7684\u3002\n\u67e5\u770b\u5185\u6838\u6e90\u4ee3\u7801\uff0cebt_ip_mt()\u662fNetfilter\u7684\u4e00\u90e8\u5206\uff0c\u8d1f\u8d23\u5728\u6570\u636e\u94fe\u8def\u5c42\u8fc7\u6ee4\u6570\u636e\u5305\u3002\u5f88\u591a\u4eba\u90fd\u719f\u6089iptables\u547d\u4ee4\u6765\u68c0\u67e5\u7f51\u7edc\u5c42\u548c\u4f20\u8f93\u5c42\u7684\u9632\u706b\u5899\u89c4\u5219\uff0c\u4f46\u662fNetfilter\u4e5f\u6709\u7528\u4e8e\u6570\u636e\u94fe\u8def\u5c42\u9632\u706b\u5899\u89c4\u5219\u7684ebtables\u547d\u4ee4\u3002\n\u8fd9\u7ed9\u51fa\u4e86\u4f7f\u7528ebtables-L\u68c0\u67e5\u6865\u63a5\u9632\u706b\u5899\u89c4\u5219\u7684\u60f3\u6cd5\u3002\u5728\u574f\u8282\u70b9\u4e0a\uff0c\u6211\u6ce8\u610f\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u6865\u94fe\uff1aKube-DEDUP\uff0c\u6761\u76ee\uff1a4268\uff0c\u7b56\u7565\uff1a\u63a5\u53d7-p ipv4-s e2\uff1a3f\uff1a9b\uff1a74\uff1aa8\uff1a7a-o veth+--ip-src 10.2.207.0/24-j drop-p ipv4-s e2\uff1a3f\uff1a9b\uff1a74\uff1aa8\uff1a7a-o veth+--ip-src 10.2.207.0/24-j drop-p ipv4-s e2\uff1a3f\uff1a9b\uff1a74\uff1aa8\uff1a7A-o veth+--ip-src\u30029b\uff1a74\uff1aa8\uff1a7a-o veth+--ip-src 10.2.207.0/24-j drop-p ipv4-s e2\uff1a3f\uff1a9b\uff1a74\uff1aa8\uff1a7a-o veth+--ip-src 10.2.207.0/24-j drop-p ipv4-s e2\uff1a3f\uff1a9b\uff1a74\uff1aa8\uff1a7a-o veth+--ip-src 10.2.207.0/24-j drop-p IPv4-s\u3002\n\u76f8\u540c\u7684\u89c4\u5219\u5728Kube-DEDUP\u94fe\u4e2d\u91cd\u590d\u6570\u5343\u6b21\u3002\u8fd9\u610f\u5473\u7740\u5c06\u6839\u636e\u8be5\u89c4\u5219\u5bf9\u6bcf\u4e2a\u7f51\u7edc\u6570\u636e\u5305\u8fdb\u884c\u6570\u5343\u6b21\u8bc4\u4f30\u3002\u94fe\u540d\u79f0Kube-DEDUP\u8868\u660e\u5b83\u4e0d\u662f\u7531Kubernetes\u624b\u52a8\u6dfb\u52a0\u7684\u89c4\u5219\uff0c\u800c\u662f\u7531Kubernetes\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u6dfb\u52a0\u7684\u3002\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u7a83\u542c\u5668\u3002\n\u5728Kubernetes\u6e90\u4ee3\u7801\u4e2d\u641c\u7d22\uff0c\u6211\u53d1\u73b0Kubernetes\u96c6\u7fa4\u4e2d\u4f7f\u7528\u7684kubenet\u7f51\u7edc\u63d2\u4ef6\u786e\u5b9e\u6dfb\u52a0\u4e86\u8fd9\u6837\u7684\u89c4\u5219\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u51fd\u6570", "note_en": "One of the things we do in the Kinvolk Labs team is provide expert technicalconsulting for customers who are experiencing issues with their Kubernetes orLinux environments \u2014 from security audits to networking troubles totroubleshooting puzzling performance problems.\n A few weeks back, video advertising technology company Smartclip reached out to us at Kinvolk toinvestigate performance issues with their Kubernetes deployment. In this blogpost, I will give you some insight into our processes and explain how werapidly identified and solved the problem, using BPF tools from the BCCproject. Finally, I\u2019ll explain how Inspektor Gadget enables you to easily haveaccess to these same BPF tools for your own Kubernetes installation.\n  The Kubernetes cluster runs, among other things, nginx with fluentd and ApacheFlume to handle logs. After deploying a new version of Kubernetes, the devopsteam noticed a performance regression issue in fluentd: it became unable tohandle the logs fast enough and it kept buffering the logs until it reached thelimit.\n Unfortunately, that regression issue was only visible after a few days inproduction and, despite the team\u2019s attempts to create a reproduction scenarioin a dev environment, could not be reproduced in testing outside of production.It was also more likely to happen in the evening when there is more traffic tohandle.\n  The upgrade implied several changes: a new version of the Linux kernel, a newversion of Kubernetes, a different Docker version, etc. In order to find outwhich change caused the problem, the Smartclip team isolated the differentchanges one by one until they found the one change that caused the regressionissue: updating from Kubernetes v1.14.4 to v1.16.4.\n It was surprising at first: I didn\u2019t see any reason why any Kubernetescomponent (kube-apiserver, controller managers, kubelet, etc.) should causethe applications (fluentd and Apache Flume) to go slower.\n I was given ssh access to one good node (running Kubernetes v1.14.4) and onebad node (running v1.16.4) so I could find out what was the difference betweenthem. My initial ideas were to compare the following between the two nodes:\n  However, I didn\u2019t see any difference between the good node and the bad node.\n  The  BPF Compiler Collection (BCC) projectcontains tools for performance analysis. One of them is a  CPUprofiler:it works by taking samples of kernel or userspace stack traces at timedintervals, and counting how many times each of them is visible.\n The performance issue only happened in production and it is not advisable toinstall new tools on production nodes without testing. Fortunately, BCC and itsCPU profiler can be executed as a container without installing it on the node.\n docker run --rm -ti --privileged \\ --net=host --pid=host \\ -v /usr/src:/usr/src \\ -v /lib/modules:/lib/modules \\ docker.io/kinvolk/bcc \\ /usr/share/bcc/tools/profile -d -f -K -p $FLUENTD_PID 10\n You can find the container image in Kinvolk&#39;s public container repository at docker.io/kinvolk/bcc. If for some reason you need to build your own image,you can use the new section in the GitHub action that we  contributedupstream a month ago.\n This command prints the kernel stack traces ordered by frequency, from theleast frequent to the most frequent. This allows the user to look at the lastlines of the output to get the most significant ones. The last line of theoutput was this kernel stack:\n  This stack with the function  ebt_ip_mt() is listed only on the bad node. Wefound a different behaviour between the good node and the bad node. It is worthexploring this.\n  Looking at the kernel sources,  ebt_ip_mt() is part of Netfilter, responsiblefor filtering packets at the data link layer. Many people are familiar with the iptables command to check the firewall rules at the network and transportlayer, but Netfilter also has the command  ebtables for the firewall rules atthe data link layer.\n  This gives the idea to check the bridging firewall rules with  ebtables -L. Onthe bad node, I notice the following:\n Bridge chain: KUBE-DEDUP, entries: 4268, policy: ACCEPT-p IPv4 -s e2:3f:9b:74:a8:7a -o veth+ --ip-src 10.2.207.0/24 -j DROP-p IPv4 -s e2:3f:9b:74:a8:7a -o veth+ --ip-src 10.2.207.0/24 -j DROP-p IPv4 -s e2:3f:9b:74:a8:7a -o veth+ --ip-src 10.2.207.0/24 -j DROP-p IPv4 -s e2:3f:9b:74:a8:7a -o veth+ --ip-src 10.2.207.0/24 -j DROP-p IPv4 -s e2:3f:9b:74:a8:7a -o veth+ --ip-src 10.2.207.0/24 -j DROP-p IPv4 -s e2:3f:9b:74:a8:7a -o veth+ --ip-src 10.2.207.0/24 -j DROP-p IPv4 -s e2:3f:9b:74:a8:7a  ...\n The same rule is repeated thousands of times in the  KUBE-DEDUP chain. Thismeans that each network packet will be evaluated against that rule thousands oftimes. The chain name  KUBE-DEDUP suggests that it was not a rule addedmanually but programmatically by Kubernetes. This looks like a bug.\n Searching in the Kubernetes sources, I found that the kubenet network pluginused in the Kubernetes cluster indeed adds such a rule, but there is a functionthat specifically checks if the rule is already added, to avoid adding itseveral times. Obviously, there is something wrong with that check.\n At this point, in order to see how kubenet is using ebtables exactly, I turnedto another BCC tool: execsnoop.This traces new processes and displays the command line for each of them. SinceI am only interested in the  ebtables process, I just add a  grep ebtablesand let this run for an afternoon until I see kubenet executing ebtables.\n docker run --rm -ti --privileged \\ --net=host --pid=host \\ -v /usr/src:/usr/src \\ -v /lib/modules:/lib/modules \\ -v /sys/kernel/debug:/sys/kernel/debug \\ docker.io/kinvolk/bcc \\ /usr/share/bcc/tools/execsnoop \\ | grep ebtables\n  ebtables 5260 2411 0 /sbin/ebtables --versionebtables 5261 2411 0 /sbin/ebtables -t filter -L KUBE-DEDUPebtables 5262 2411 0 /sbin/ebtables -t filter -L OUTPUT --Lmac2ebtables 5263 2411 0 /sbin/ebtables -t filter -L KUBE-DEDUP --Lmac2ebtables 5264 2411 0 /sbin/ebtables -t filter -L KUBE-DEDUP --Lmac2ebtables 5265 2411 0 /sbin/ebtables -t filter -A KUBE-DEDUP -p IPv4 -s e2:3f:9b:74:a8:7a -o veth+ --ip-src 10.2.207.1/24 -j DROP\n We see kubenet listing the rules in the KUBE-DEDUP chain, and then proceedingto add the rule. However, the rule shown in the command line is slightlydifferent from the rule listed above: kubenet adds  10.2.207.1/24 but thenebtables lists  10.2.207.0/24. If you\u2019re familiar with netmask, you\u2019ll know that ebtablesis doing the right thing to discard the final \u201c.1\u201d on a  /24 netmask. Here iswhat\u2019s happening:\n Kubenet does not find it in  ebtables -L\u2019 output because it lists the rules with  10.2.207.0/24.\n   Each time this process is repeated, a new rule is added. Over time, the rule can be repeated thousands of times.\n I reported the bug at  https://github.com/kubernetes/kubernetes/issues/89633with the links to the lines of code that cause the issue. The bug wasintroduced in v1.16.0 and fixed in v1.18.0 with backports in v1.16.8 andv1.17.3.\n For Smartclip, the issue is resolved by upgrading to a Kubernetes version withthe fix. Monitoring on the ebtables rules list was also added in order totrigger an alert when the amount of rules is excessive, just in case this issuehappens again.\n  When managing a cluster in production, it is good practice to focus onautomation and avoid interacting with individual nodes, individual pods orindividual processes. However, in order to investigate the issue, I needed SSHaccess to the Kubernetes nodes and I identified the pod with fluentd and itsmain PID. Then I launched a new container containing the BCC tools and executedthe CPU profiler on the fluentd PID. This is error-prone and more complicatedthan it could have  ...\n Inspektor Gadget exists in order to make this process easier for Kubernetessystem administrators. You can now achieve everything I did from the kubectlcommand line with  kubectl gadget profile without needing to SSH to the nodes.The execsnoop BCC tool is also available via  kubectl gadget execsnoop. Underthe hood, Inspektor Gadget will execute the BPF programs on the nodes to gettraces from the right pods which can be selected with Kubernetes labels \u2014noneed to SSH into  ...\n Following this investigation, we released a  new version of InspektorGadgetincluding both  profile and  execsnoop. We also show examples how to use profileand execsnoop.\n As Ren\u00e9 Wagner, technical director data platforms at Smartclip, summarized theengagement: \u201cThrough their knowledge of the latest Linux kernel technologies,the Kinvolk Labs team got to the bottom of our problem in a couple of days. Wewere really impressed by their expertise and recommend their services to anyonein a similarly challenging situation. As a bonus outcome from the project, weare also really happy to have discovered Inspektor Gadget, which is now anessential  ...\n If you have used Inspektor Gadget and find it useful, or have a suggestion fora useful gadget we could add, please  let us know, or(even better) let the world know (tweet @kinvolkio with #InspektorGadget).", "posttime": "2020-05-02 18:01:51", "tags": "\u6027\u80fd,labs,kubernetes", "title": "\u5eb7\u7ef4\u514b\u5b9e\u9a8c\u5ba4\uff1a\u4f7f\u7528BPF\u8c03\u67e5Kubernetes\u6027\u80fd\u95ee\u9898", "title_en": "Kinvolk Labs: Investigating Kubernetes Performance Issues with BPF", "transed": 0, "url": "https://kinvolk.io/blog/2020/04/inside-kinvolk-labs-investigating-kubernetes-performance-issues-with-bpf/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6027\u80fd", "labs"]}, {"category": "", "categoryclass": "", "imagename": "e0e98d1ec6d9a6744f8a5634fbd56511.png", "infoid": 1000250, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728Erlang\u4e2d\uff0c\u5f88\u5bb9\u6613\u6784\u5efa\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u4f4d\u4e32\u5e76\u5339\u914d\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002\u6211\u9047\u5230\u4e86Mitchell Perilstein\u4e0eErlang\u5728NTP\u65b9\u9762\u7684\u51fa\u8272\u5de5\u4f5c\uff0c\u6211\u60f3\u6211\u8981\u7528\u8fd9\u4e2a\u6765\u89e3\u91ca\u4e00\u4e0b\u4f4d\u4e32\u548c\u4e8c\u8fdb\u5236\u5728Erlang\u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u4f4d\u4e32\u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u4f4d\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u4f4d\u6570\u4e0d\u9700\u8981\u88ab8\u6574\u9664\u3002\n\u6bcf\u4e2a\u5143\u7d20\u6307\u5b9a\u4f4d\u4e32\u7684\u67d0\u4e00\u6bb5\u3002\u6bb5\u662f\u4e8c\u8fdb\u5236\u7684\u4e00\u7ec4\u8fde\u7eed\u4f4d(\u4e0d\u4e00\u5b9a\u5728\u5b57\u8282\u8fb9\u754c\u4e0a)\u3002\n\u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8fd9\u91cc\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u4e3a\u6b64\uff0c\u6709\u5fc5\u8981\u4e86\u89e3\u6574\u4e2a\u8bed\u6cd5\u3002\n\u8fd9\u610f\u5473\u7740\u5728\u5b9e\u9645\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u75280\u4f5c\u4e3a\u503c\uff0c2\u4f5c\u4e3a\u5927\u5c0f(2\u4f4d)\uff0c4\u4f5c\u4e3a\u503c\uff0c3\u4f4d\u4f5c\u4e3a\u5927\u5c0f\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6211\u4eec\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u7c7b\u578b\u8bf4\u660e\u7b26\u3002\nTypeSpecifierList\u662f\u7531\u8fde\u5b57\u7b26\u6216\u7834\u6298\u53f7(-)\u5206\u9694\u7684\u4efb\u610f\u987a\u5e8f\u7684\u7c7b\u578b\u8bf4\u660e\u7b26\u7684\u5217\u8868\u3002\u4efb\u4f55\u7701\u7565\u7684\u7c7b\u578b\u8bf4\u660e\u7b26\u90fd\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\ntype=INTEGER|FLOAT|BINARY|BYTES|BITRING|BITS|UTF8|UTF16|UTF32\u3002\n\u9ed8\u8ba4\u503c\u4e3a\u6574\u6570\u3002\u5b57\u8282\u662f\u4e8c\u8fdb\u5236\u7684\u901f\u8bb0\uff0cBITS\u662f\u4f4d\u4e32\u7684\u901f\u8bb0\u3002\n\u5b83\u53ea\u5728\u5339\u914d\u548c\u7c7b\u578b\u4e3a\u6574\u6570\u65f6\u624d\u91cd\u8981\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7b26\u53f7\u3002\nNative-endian\u610f\u5473\u7740\u5728\u52a0\u8f7d\u65f6\u5c06\u5b57\u7b26\u987a\u5e8f\u89e3\u6790\u4e3a\u5927\u7aef\u6216\u5c0f\u7aef\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u8fd0\u884cErlang\u673a\u5668\u7684CPU\u7684\u672c\u673a\u5b57\u7b26\u987a\u5e8f\u3002\u4ec5\u5f53\u7c7b\u578b\u4e3a\u6574\u578b\u3001utf16\u3001utf32\u6216\u6d6e\u70b9\u578b\u65f6\uff0c\u5b57\u8282\u5e8f\u624d\u91cd\u8981\u3002\u9ed8\u8ba4\u503c\u4e3a\u5927\u3002\n\u76ee\u524d\u6700\u7b80\u5355\u7684\u534f\u8bae\u4e4b\u4e00\u662fNTP\u3002\u5934\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a\n\u5b83\u540c\u65f6\u7528\u4e8e\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u8ba9\u6211\u4eec\u5148\u8d77\u8349\u4e00\u4e0b\u8bf7\u6c42\u5427\u3002\n\u6839\u636e\u5934\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u67092\u4f4d\u6574\u6570(LI)\u30013\u4f4d\u6574\u6570\u7248\u672c\u53f7\u30013\u4f4d\u6574\u6570\u6a21\u5f0f\u30018\u4f4d\u5c42\u30018\u4f4d\u8f6e\u8be2\u30018\u4f4d\u7cbe\u5ea6\u7b49\u7b49\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u7f6e\u524d3\u4e2a\u503c\uff0c\u5176\u4f59\u7684(376\u4f4d)\u53ef\u4ee5\u8bbe\u7f6e\u4e3a0\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Erlang\u7684\u5185\u7f6e\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\uff0cgen_udp\u6709\u4e00\u4e2a\u76f8\u5f53\u5168\u9762\u7684\u4f4e\u7ea7UDP\u5b9e\u73b0\uff0c\u53ef\u4ee5\u505a\u6211\u4eec\u60f3\u505a\u7684\u4e00\u5207\u3002\n%\u6253\u5f00\u672c\u5730\u5957\u63a5\u5b57\uff0c0\u8868\u793a\u5b83\u5c06\u9009\u62e9\u968f\u673a\u672c\u5730\u7aef\u53e3%active=false\u8868\u793a\u6211\u4eec\u9700\u8981\u63a5\u6536\u81ea\u5df1\u76842&&gt;\uff1b{ok\uff0csocket}=gen_udp\uff1aopen(0\uff0c[binary\uff0c{active\uff0cfalse}])\uff0c2&&gt;\uff1bgen_udp\uff1asend(socket\uff0c&#34\uff1b0.europe.pool.ntp.org&#34\uff1b\uff0c123\uff0crequest)\uff0c2&&gt;\u3002{OK\uff0c{_ADDRESS\uff0c_PORT\uff0cRESP}}=gen_udp\uff1arecv(\u5957\u63a5\u5b57\uff0c0\uff0c500)\u3002{OK\uff0c{{212\uff0c59\uff0c0\uff0c1}\uff0c123\uff0c&lt\uff1b&lt\uff1b\uff1b36\uff0c2\uff0c0\uff0c231\uff0c0\uff0c0\uff0c0\uff0c110\uff0c0\uff0c0\uff0c0\uff0c25\uff0c212\uff0c59\uff0c3\uff0c3\uff0c226\uff0c84\uff0c62\uff0c89\uff0c208\uff0c192\uff0c202\uff0c156\uff0c.&gt\uff1b&gt\uff1b}\u3002\n\u54cd\u5e94\u53ea\u662f\u4e00\u4e2a\u6211\u4eec\u9700\u8981\u5206\u5272\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u521b\u5efa\u8bf7\u6c42\u7684\u65b9\u5f0f\u3002\n4&gt\uff1b&lt\uff1b&lt\uff1bLI\uff1a2\uff0c\u7248\u672c\uff1a3\uff0c\u6a21\u5f0f\uff1a3\uff0c_REST/BINARY&gt\uff1b&gt\uff1b=Resp\u3002&lt\uff1b36\uff0c2\uff0c0\uff0c231\uff0c0\uff0c0\uff0c0\uff0c110\uff0c0\uff0c0\uff0c0\uff0c25\uff0c212\uff0c59\uff0c3\uff0c3\uff0c226\uff0c84\uff0c62\uff0c89\uff0c208\uff0c192\uff0c202\uff0c156\uff0c0\uff0c0\uff0c0\uff0c0\uff0c.&gt\uff1b&gt\uff1b5&gt\uff1b{li\uff0cli\uff0cversion\uff0cversion\uff0cmode\uff0cmode}\u3002{li\uff0c0\uff0c\u7248\u672c\uff0c4\uff0c\u6a21\u5f0f\uff0c4}\u3002\n\u5934\u7684\u5176\u4f59\u90e8\u5206\u6709\u70b9\u68d8\u624b\uff0c\u4f46\u662f\u4f7f\u7528\u4f4d\u4e32\u8bed\u6cd5\uff0c\u5b83\u5f88\u5bb9\u6613\u7ba1\u7406\u3002\n6&gt\uff1b&lt\uff1b&lt\uff1bLI\uff1a2\uff0c\u7248\u672c\uff1a3\uff0c\u6a21\u5f0f\uff1a3\uff0c\u5206\u5c42\uff1a8\uff0c\u8f6e\u8be2\uff1a8/\u6709\u7b26\u53f7\uff0c\u7cbe\u5ea6\uff1a8/\u6709\u7b26\u53f7\uff0c6&gT\uff1b\u6839\u76ee\u5f55\uff1a32\uff0c\u6839\u78c1\u76d8\uff1a32\uff0cR1\uff1a8\uff0cR2\uff1a8\uff0cR3\uff1a8\uff0cR4\uff1a8\uff0cRTSI\uff1a32\uff0cRtsF\uff1a32\uff0c6&gt\uff1bOTSI\uff1a32\uff0cOtsF\uff1a32\uff0cRcvI\uff1a32\uff0cRcvF\u3002=\u54cd\u5e94\u3002&lt\uff1b&lt\uff1b36\uff0c2\uff0c0\uff0c231\uff0c0\uff0c0\uff0c0\uff0c110\uff0c0\uff0c0\uff0c0\uff0c25\uff0c212\uff0c59\uff0c3\uff0c3\uff0c226\uff0c84\uff0c62\uff0c89\uff0c208\uff0c192\uff0c202\uff0c156\uff0c0\uff0c0\uff0c0\uff0c0\uff0c.&gt\uff1b&gt\uff1b&gt\uff1b\n\u7406\u89e3\u8fd9\u4e9b\u4ef7\u503c\u9700\u8981\u66f4\u591a\u7684\u8dd1\u817f\u5de5\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5206\u6570\u7684\u6548\u7528\u51fd\u6570\u3002\nb\u57fa\u7840\u8bbe\u65bd(Bin)-&gt\uff1bb\u57fa\u7840\u8bbe\u65bd(Bin\uff0c2\uff0c0)\u3002b\u57fa\u7840\u8bbe\u65bd(0\uff0c_\uff0cFrac)-&gt\uff1bFrac\uff1bb\u57fa\u7840\u8bbe\u65bd(Bin\uff0cN\uff0cFrac)-&gt\uff1bb\u57fa\u7840\u8bbe\u65bd(Bin BSR 1\uff0cN*2\uff0cFrac+(Bin Band 1)/N)\u3002\n\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5904\u7406\u54cd\u5e94\u5e76\u8fd4\u56de\u611f\u5174\u8da3\u7684\u503c\u7684\u51fd\u6570\u3002\n%2208988800\u662f\u504f\u79fb\u91cf(1900\u5e74\u5230UNIX\u7eaa\u5143)PROCESS_ntp_RESPONSE(Ntp_RESPONSE)-&gt\uff1b&lt\uff1b&lt\uff1bLI\uff1a2\uff0c\u7248\u672c\uff1a3\uff0c\u6a21\u5f0f\uff1a3\uff0c\u5206\u5c42\uff1a8\uff0c\u8f6e\u8be2\uff1a8/\u6709\u7b26\u53f7\uff0c\u7cbe\u5ea6\uff1a8/\u6709\u7b26\u53f7\uff0cRootDel\uff1a32\uff0cRootDisp\uff1a32\uff0cR1\uff1a8\uff0cR2\uff1a8\uff0cR3\uff1a8\uff0cR4\uff1a8\uff0cRTSI\uff1a32\uff0cRtsF\uff1a32\uff0cOTSI\uff1a32\uff0cOtsF\uff1a32\uff0cRcvI\uff1a32\uff0cRcvF\uff1a32\uff0cXmtI\uff1a32\uff0cXmtF\uff1a32&gt\uff1b=NTP_RESPONSE\uff0c{NowMS\uff0cNOWS\uff0cNowUS}=Erlang\uff1aTimestamp()\uff0cNowTimestamp=NowMS*1\u30020 e6+NOWS+NOWUS/1000\uff0c\u4f20\u8f93\u65f6\u95f4\u6233=XMTI-2208988800+BINFIC(XMTF)\uff0c{{li\uff0cli}\uff0c{vn.\u3002\n{{li\uff0c0}\uff0c{vn\uff0c4}\uff0c{\u6a21\u5f0f\uff0c4}\uff0c{\u5c42\uff0c2}\uff0c{\u8f6e\u8be2\uff0c3}\uff0c{\u7cbe\u5ea6\uff0c-24}\uff0c{\u6839\u5ef6\u8fdf\uff0c9}\uff0c{\u6839\u5206\u6563\uff0c140}\uff0c{\u5f15\u7528ID\uff0c85\uff0c158\uff0c25\uff0c75}\uff0c{\u5f15\u7528\u65f6\u95f4\u6233\uff0c1588186010\u300275", "note_en": "In Erlang, it is easy to construct binaries and bitstrings and matching binary patterns. I was running into Mitchell Perilstein&#39;s excellent work on NTP with Erlang and I thought I am going to use this to explain how bitstrings and binaries work in Erlang.\n  A bitstring is a sequence of zero or more bits, where the number of bits does not need to be divisible by 8.\n   Each element specifies a certain segment of the bitstring. A segment is a set of contiguous bits of the binary (not necessarily on a byte boundary).\n   Let&#39;s unpack a bit of what is going on here. For this, it is worth knowing the whole syntax.\n    This means in the real-life example, we have 0 as the value, 2 is the size (2 bits), four as a value, 3 bits as size, and so on. We did not specify any of the type specifiers.\n TypeSpecifierList is a list of type specifiers, in any order, separated by hyphens or dash (-). Default values are used for any omitted type specifier.\n  Type  =  integer  |  float  |  binary  |  bytes  |  bitstring  |  bits  |  utf8  |  utf16  |  utf32\n The default is an integer. bytes is a shorthand for binary and bits is a shorthand for bitstring.\n  It only matters for matching and when the type is an integer. The default is unsigned.\n  Native-endian means that the endianness is resolved at load time to be either big-endian or little-endian, depending on what is native for the CPU that the Erlang machine is run on. Endianness only matters when the Type is either integer, utf16, utf32, or float. The default is big.\n  One of the simplest protocols out there is NTP. The header file looks like the following:\n  This is used for both the request and the response. Let&#39;s craft the request first.\n  Based on the header structure we can see that we have a 2-bit integer (Li), 3-bit integer version number, 3-bit integer mode, 8-bit stratum, 8-bit poll, 8-bit precision, and so on. We only need to set the first 3 values, the rest (376 bits) can be 0.\n     We can use Erlang&#39;s built-in functions for this one, gen_udp has a pretty comprehensive low-level UDP implementation, that can do all we want.\n % open a local socket, 0 indicates that it will pick a random local port% active=false means we need to receive ourselves 2 &gt;  { ok ,  Socket }  =  gen_udp : open ( 0 ,  [ binary ,  { active ,  false }]), 2 &gt;  gen_udp : send ( Socket ,  &#34;0.europe.pool.ntp.org&#34; ,  123 ,  Request ), 2 &gt;  { ok ,  {_ Address ,  _ Port ,  Resp }}  =  gen_udp : recv ( Socket ,  0 ,  500 ). { ok ,{{ 212 , 59 , 0 , 1 },  123 ,  &lt;&lt; 36 , 2 , 0 , 231 , 0 , 0 , 0 , 110 , 0 , 0 , 0 , 25 , 212 , 59 , 3 , 3 , 226 , 84 , 62 , 89 ,  208 , 192 , 202 , 156 ,... &gt;&gt; }}\n  The response is just a binary that we need to slice and dice, similarly how we created the request.\n   4 &gt;  &lt;&lt;  Li : 2 ,  Version : 3 ,  Mode : 3 ,  _ rest / binary  &gt;&gt;  =  Resp . &lt;&lt; 36 , 2 , 0 , 231 , 0 , 0 , 0 , 110 , 0 , 0 , 0 , 25 , 212 , 59 , 3 , 3 , 226 , 84 , 62 , 89 ,  208 , 192 , 202 , 156 , 0 , 0 , 0 , 0 , 0 ,... &gt;&gt; 5 &gt;  { li ,  Li ,  version ,  Version ,  mode ,  Mode }. { li , 0 , version , 4 , mode , 4 }\n  The rest of the header a bit more tricky but with the bitstring syntax, it is easy to manage.\n   6 &gt;  &lt;&lt;  LI : 2 ,  Version : 3 ,  Mode : 3 ,  Stratum : 8 ,  Poll : 8 / signed ,  Precision : 8 / signed , 6 &gt;  RootDel : 32 ,  RootDisp : 32 ,  R1 : 8 ,  R2 : 8 ,  R3 : 8 ,  R4 : 8 ,  RtsI : 32 ,  RtsF : 32 , 6 &gt;  OtsI : 32 ,  OtsF : 32 ,  RcvI : 32 ,  RcvF : 32 ,  XmtI : 32 ,  XmtF : 32  &gt;&gt;  =  Resp . &lt;&lt; 36 , 2 , 0 , 231 , 0 , 0 , 0 , 110 , 0 , 0 , 0 , 25 , 212 , 59 , 3 , 3 , 226 , 84 , 62 , 89 ,  208 , 192 , 202 , 156 , 0 , 0 , 0 , 0 , 0 ,... &gt;&gt;\n Making sense of these values requires a bit more legwork. First, we need a utility function for binary fractions.\n  binfrac ( Bin )  -&gt;  binfrac ( Bin ,  2 ,  0 ). binfrac ( 0 ,  _,  Frac )  -&gt;  Frac ; binfrac ( Bin ,  N ,  Frac )  -&gt;  binfrac ( Bin  bsr  1 ,  N * 2 ,  Frac  +  ( Bin  band  1 ) / N ).\n With this function, we can implement the one that processes the response and returns the values we are interested in.\n % 2208988800 is the offset (1900 to Unix epoch) process_ntp_response ( Ntp_response )  -&gt;  &lt;&lt;  LI : 2 ,  Version : 3 ,  Mode : 3 ,  Stratum : 8 ,  Poll : 8 / signed ,  Precision : 8 / signed ,  RootDel : 32 ,  RootDisp : 32 ,  R1 : 8 ,  R2 : 8 ,  R3 : 8 ,  R4 : 8 ,  RtsI : 32 ,  RtsF : 32 ,  OtsI : 32 ,  OtsF : 32 ,  RcvI : 32 ,  RcvF : 32 ,  XmtI : 32 ,  XmtF : 32  &gt;&gt;  =  Ntp_response ,  { NowMS ,  NowS ,  NowUS }  =  erlang : timestamp (),  NowTimestamp  =  NowMS  *  1 . 0 e6  +  NowS  +  NowUS / 1000 ,  TransmitTimestamp  =  XmtI  -  2208988800  +  binfrac ( XmtF ),  {  { li ,  LI },  { vn  ...\n  {{ li , 0 },  { vn , 4 },  { mode , 4 },  { stratum , 2 },  { poll , 3 },  { precision , - 24 },  { rootDelay , 9 },  { rootDispersion , 140 },  { referenceId , 85 , 158 , 25 , 75 },  { referenceTimestamp , 1588186010 . 7517557 },  { originateTimestamp , - 2208988800 },  { receiveTimestamp , 1588186048 . 3557627 },  { transmitTimestamp , 1588186048 . 8841336 },  { clientReceiveTimestamp , 1588186606 . 531 },  { offset , - 557 . 6468663215637 }}\n Please note, this is the first step in the NTP workflow and does not implement the complete NTP protocol. We do not take into consideration a bunch of details.\n Next time we might look into how to implement a simple server (like DNS) in Erlang.", "posttime": "2020-05-02 18:01:46", "tags": "\u5339\u914d,binary,erlang", "title": "\u7528Erlang\u5339\u914d\u4e8c\u8fdb\u5236\u6a21\u5f0f", "title_en": "Matching Binary Patterns with Erlang", "transed": 0, "url": "https://dev.to/l1x/matching-binary-patterns-11kh", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5339\u914d", "binary", "erlang"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000249, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Galen Wolfe-Paly~ravmel-ropdyl OS 1\u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u6570\u5b57\u793e\u533a\u7684\u7b80\u5355\u3001\u7edf\u4e00\u7684\u7cfb\u7edf\u3002OS1\u662f\u4e3a\u5728URBIT\u4e0a\u5206\u4eab\u6d88\u606f\u3001\u94fe\u63a5\u548c\u7b14\u8bb0\u7684\u4e00\u7fa4\u4eba\u51c6\u5907\u7684\u3002\n\u6211\u4eec\u4e3a\u81ea\u5df1\u8bbe\u8ba1\u5e76\u6784\u5efa\u4e86OS1\uff0c\u6211\u4eec\u771f\u7684\u5f88\u4eab\u53d7\u6bcf\u5929\u4f7f\u7528\u5b83\u3002\u6211\u4eec\u6ca1\u6709\u5f04\u6e05\u695a\u5982\u4f55\u5c06\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e2a\u5355\u4e00\u7684\u7cfb\u7edf\u6765\u4e0e\u516c\u53f8\u548c\u6211\u4eec\u771f\u6b63\u4fe1\u4efb\u7684\u66f4\u5e7f\u6cdb\u7684Urbit\u793e\u533a\u4fdd\u6301\u8054\u7cfb\u3002OS1\u8ba9\u4eba\u611f\u89c9\u6211\u4eec\u7684\u516c\u53f8\u548c\u793e\u533a\u5728\u6570\u5b57\u4e16\u754c\u4e2d\u6709\u4e00\u4e2a\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u5bb6\u7684\u5730\u65b9\u3002\n\u5728\u4eca\u5929\u7684\u6570\u5b57\u4e16\u754c\u4e2d\uff0c\u5927\u591a\u6570\u670b\u53cb\u548c\u5408\u4f5c\u8005\u90fd\u4f1a\u540c\u65f6\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u6765\u4fdd\u6301\u8054\u7cfb\u3002\u6211\u4eec\u8ba4\u4e3aOS1\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u6a21\u578b\u3002\u73b0\u5728\u8981\u6c42\u5168\u4e16\u754c\u8f6c\u800c\u4f7f\u7528\u5b83\u8fd8\u4e3a\u65f6\u8fc7\u65e9\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u5e2e\u52a9\u6211\u4eec\u7684\u670b\u53cb\u548c\u90bb\u8fd1\u793e\u533a\u767b\u4e0aUrbit\uff0c\u8ba9\u4ed6\u4eec\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u5e76\u83b7\u5f97\u4ed6\u4eec\u7684\u53cd\u9988\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0bOS1\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u6211\u4eec\u4e00\u76f4\u4ee5\u6765\u662f\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u3002\u7136\u540e\uff0c\u5982\u679c\u4f60\u5bf9OS1\u611f\u5174\u8da3\uff0c\u6211\u4eec\u4f1a\u544a\u8bc9\u4f60\u5982\u4f55\u7533\u8bf7\u793e\u533a\u57fa\u91d1\u3002\nOS 1\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u96c6\u6210\u5de5\u5177\uff0c\u7528\u4e8e\u4e0e\u4e00\u7fa4\u4eba\u8fdb\u884c\u6d88\u606f\u4f20\u9012\u3001\u5171\u4eab\u94fe\u63a5\u548c\u5199\u4f5c\u3002OS1\u4ecb\u4e8e\u201c\u751f\u4ea7\u529b\u8f6f\u4ef6\u201d\u548c\u201c\u793e\u4ea4\u7f51\u7edc\u201d\u4e4b\u95f4\u3002\u6211\u4eec\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u5168\u65b0\u7684\u793e\u4f1a\u8ba1\u7b97\u7684\u5f00\u59cb\u3002\nOS1\u4e0d\u662f\u6211\u4eec\u4e3aUrbit\u6784\u5efa\u63a5\u53e3\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5\uff0c\u4f46\u5b83\u80af\u5b9a\u662f\u6700\u5b8c\u6574\u7684\u3002OS1\u662f\u7b2c\u4e00\u4e2a\u611f\u89c9\u4e0d\u50cf\u662f\u5b9e\u9a8c\u7684URBIT\u754c\u9762\u3002\n\u4eca\u5929\uff0c\u5f53\u60a8\u5f15\u5bfcArvo(Urbit OS\u5185\u6838)\u5e76\u5c06\u6d4f\u89c8\u5668\u8fde\u63a5\u5230\u5b83\u65f6\uff0c\u60a8\u4f1a\u770b\u5230OS1\uff0c\u4f46OS1\u5e76\u4e0d\u662fArvo\u552f\u4e00\u53ef\u80fd\u7684\u5ba2\u6237\u7aef\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u5ba2\u6237\u7aef\uff0c\u6216\u8005\uff0c\u56e0\u4e3a\u5b83\u662f\u5b8c\u5168\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u4fee\u6539OS1\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0cOS1\u5f00\u7bb1\u5373\u7528\uff0c\u611f\u89c9\u5c31\u50cf\u662f\u4e00\u6b3e\u5e94\u7528\u7a0b\u5e8f\u3002\u8003\u8651\u5230\u5b83\u662f\u5728Urbit OS\u4e0a\u8fd0\u884c\u7684-\u5b83\u8fdc\u4e0d\u6b62\u4e8e\u6b64\u3002\u5b83\u662f\u4e00\u53f0\u529f\u80fd\u9f50\u5168\u7684\u901a\u7528\u865a\u62df\u8ba1\u7b97\u673a\uff0c\u5bf9\u60a8\u6765\u8bf4\u65e2\u5b89\u5168\u53c8\u79c1\u5bc6\u3002\u6211\u4eec\u5c06\u5728\u6700\u540e\u56de\u5230\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u3002\n\u8ba9\u6211\u4eec\u9010\u4e00\u4ecb\u7ecd\u4e00\u4e0bOS1\u7684\u529f\u80fd\uff0c\u770b\u770b\u5b83\u662f\u4ec0\u4e48\u6837\u5b50\u3002\n\u7fa4\u7ec4\u662fOS1\u4e2d\u7684\u4e3b\u8981\u6784\u5efa\u5757\uff0c\u7fa4\u7ec4\u53ea\u662f\u5171\u4eab\u4e00\u7ec4\u804a\u5929\u3001\u94fe\u63a5\u548c\u53d1\u5e03\u9891\u9053\u7684\u4eba\u7684\u5217\u8868\u3002\u7fa4\u6709\u70b9\u50cf\u4e00\u4e2a\u8d85\u7ea7\u5f3a\u5927\u7684\u7fa4\u804a\u3002\n\u4e00\u7fa4\u670b\u53cb\u53ef\u80fd\u53ea\u5171\u4eab\u51e0\u4e2a\u804a\u5929\u9891\u9053\u3002\u4e00\u4e2a\u9605\u8bfb\u5c0f\u7ec4\u53ef\u80fd\u53ea\u5171\u4eab\u4e00\u4e2a\u8ba8\u8bba\u4ed6\u4eec\u6b63\u5728\u9605\u8bfb\u7684\u5185\u5bb9\u7684\u53d1\u5e03\u9891\u9053\u548c\u4e00\u4e2a\u5373\u5c06\u51fa\u7248\u7684\u56fe\u4e66\u7684\u94fe\u63a5\u9891\u9053\u3002\u4f5c\u4e3a\u4e00\u5bb6\u516c\u53f8\uff0c\u6211\u4eec\u5171\u4eab\u5404\u79cd\u804a\u5929\u3001\u53d1\u5e03\u548c\u94fe\u63a5\u6e20\u9053\u6765\u5b8c\u6210\u4efb\u52a1\u5e76\u8fdb\u884c\u4ea4\u6d41\u3002\u4f8b\u5982\uff0c\u6bcf\u4e2a\u5de5\u4f5c\u9886\u57df\u90fd\u6709\u804a\u5929\uff0c\u6458\u8981\u548c\u7279\u5199\u8ba8\u8bba\u7684\u53d1\u5e03\u9891\u9053\uff0c\u97f3\u4e50\u3001\u5f71\u54cd\u548c\u53c2\u8003\u7684\u94fe\u63a5\u9891\u9053\u3002..\u3002\n\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u7531\u4ed6\u4eec\u7684URBIT ID\u6807\u8bc6\uff1a\u4e00\u4e2a\u7b80\u77ed\u7684\u3001\u4ee4\u4eba\u96be\u5fd8\u7684\u540d\u5b57\uff0c\u60a8\u62e5\u6709\u79c1\u94a5(\u5b8c\u5168\u5c5e\u4e8e\u60a8)\u3002\u6bcf\u4e2a\u7ec4\u90fd\u662f\u79c1\u4eba\u7684\uff0c\u9700\u8981\u9080\u8bf7\u3002\u7fa4\u7ec4\u662f\u4e0d\u53ef\u53d1\u73b0\u7684\u3002\u4ed6\u4eec\u5e94\u8be5\u662f\u4eba\u4eec\u9ad8\u5ea6\u4fe1\u4efb\u7684\u793e\u533a\u3002\u4e0e\u5176\u8bf4\u662f\u516c\u5171\u6d3b\u52a8\uff0c\u4e0d\u5982\u8bf4\u662f\u516c\u793e\u3002\n\u804a\u5929\u5c31\u662f\u804a\u5929\uff1a\u7528\u4e8e\u540c\u6b65\u901a\u4fe1\u7684\u6d88\u606f\u7684\u987a\u5e8f\u5217\u8868\u3002\u73b0\u5728\u5df2\u7ecf\u6709\u4e00\u767e\u4e07\u79cd\u804a\u5929\u65b9\u5f0f--\u4f46Urbit Chat\u5728\u51e0\u4e2a\u91cd\u8981\u65b9\u9762\u6709\u6240\u4e0d\u540c\u3002\n\u9996\u5148\uff0c\u6bcf\u4e2a\u804a\u5929\u9891\u9053\u53ea\u5728\u4e3b\u6301\u4eba\u548c\u804a\u5929\u6210\u5458\u4e4b\u95f4\u5171\u4eab\u3002\u5f53\u4f60\u4e0e\u4eba\u8fdb\u884cDM\u65f6\uff0c\u6d88\u606f\u662f\u5bf9\u7b49\u53d1\u9001\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8be5\u7cfb\u7edf\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u5206\u6563\u7684\u548c\u5047\u540d\u7684\u3002\u9664\u4e86\u4f60\u7684Urbit ID\u6ca1\u4eba\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u4f60\u7684\u4e8b\u3002\n\u5176\u6b21\uff0c\u6bcf\u6761\u804a\u5929\u6d88\u606f\u90fd\u662f\u7531\u4f60\u7684Urbit ID\u52a0\u5bc6\u548c\u7b7e\u540d\u7684\u3002\u540c\u6837\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u79f0Urbit\u662f\u201c\u5b89\u5168\u7684\u201d\uff0c\u56e0\u4e3a\u5b83\u662f\u672a\u7ecf\u5ba1\u8ba1\u7684-\u4f46\u6211\u4eec\u6b63\u5728\u52aa\u529b\u5728\u4eca\u5e74\u8ba9Urbit\u8fdb\u884c\u5ba1\u8ba1\u3002\n\u7b2c\u4e09\uff0cURBIT OS\u4e2d\u7684\u804a\u5929\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u8239\u8236\u4e4b\u95f4\u53d1\u9001\u6d88\u606f\u7684\u534f\u8bae\u3002\u5f88\u5bb9\u6613\u60f3\u8c61\u5c06\u804a\u5929\u6269\u5c55\u5230\u5404\u79cd\u6709\u8da3\u7684\u65b9\u5411\u3002\u4ec5\u63a5\u53d7\u7279\u5b9a\u6d88\u606f\u7c7b\u578b\u7684\u804a\u5929\u3001\u5177\u6709\u6d88\u5931\u5386\u53f2\u8bb0\u5f55\u7684\u804a\u5929\u3001\u53ea\u80fd\u5728\u4e00\u5929\u4e2d\u7684\u7279\u5b9a\u65f6\u95f4\u53d1\u5e03\u7684\u804a\u5929\uff0c\u7b49\u7b49\u3002\n(\u5982\u679c\u4f60\u597d\u5947\u5730\u60f3\u5c1d\u8bd5\u8fd9\u4e9b\u4e8b\u60c5\u4e4b\u4e00\uff0c\u6216\u8005\u5bf9\u4f60\u60f3\u8981\u8bd5\u9a8c\u7684\u4e1c\u897f\u6709\u4e00\u4e2a\u60f3\u6cd5-\u8003\u8651\u5728\u6211\u4eec\u7684\u62e8\u6b3e\u8ba1\u5212\u4e2d\u63d0\u4ea4\u4e00\u4efd\u63d0\u6848\u3002\u6211\u4eec\u5b9a\u671f\u5956\u52b1\u5730\u5740\u7a7a\u95f4\u65b9\u9762\u7684\u8d21\u732e\u8005\u3002)\u3002\n\u6211\u4eec\u8ba4\u4e3a\u804a\u5929\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u201c\u66f4\u597d\u7684IRC\u201d\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u4eca\u5929\u7684\u57fa\u672c\u5f62\u5f0f\uff0c\u804a\u5929\u5bf9\u4e8e\u4f20\u9012\u5bbe\u81f3\u5982\u5f52\u7684\u611f\u89c9\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u5982\u679c\u6ca1\u6709\u804a\u5929\uff0c\u5c31\u65e0\u6cd5\u4e3a\u7fa4\u7ec4\u63d0\u4f9b\u5b8c\u6574\u7684\u754c\u9762\u3002\nLinks\u6709\u70b9\u50cf\u9ed1\u5ba2\u65b0\u95fb(Hacker News)\u6216Reddit\u3002\u5b83\u53ea\u662f\u4e00\u4e2a\u5e26\u6709\u8bc4\u8bba\u7684\u94fe\u63a5\u96c6\u5408\u3002\u6ca1\u6709\u5347\u804c\u6216\u6392\u5e8f\u3002\u6211\u4eec\u51b3\u5b9a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5c0f\u56e2\u4f53\u6765\u8bf4\uff0c\u66f4\u591a\u7684\u662f\u6536\u96c6\u53c2\u8003\u8d44\u6599\uff0c\u800c\u4e0d\u662f\u51b3\u5b9a\u4ec0\u4e48\u662f\u6700\u4ee4\u4eba\u5174\u594b\u7684--\u4f46\u94fe\u63a5\u7684\u6392\u5217\u53ef\u80fd\u662f\u8d21\u732e\u8005\u8bd5\u9a8c\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u9886\u57df\u3002\n\u6211\u4eec\u4f7f\u7528\u94fe\u63a5\u6765\u6536\u96c6\u5916\u90e8\u5f15\u7528\u5e76\u8ddf\u8e2a\u6211\u4eec\u6b63\u5728\u601d\u8003\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u603b\u662f\u770b\u7740\u6211\u4eec\u5c0f\u5c0f\u7684\u6570\u5b57\u4e16\u754c\u4e4b\u5916\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u5e76\u8c08\u8bba\u5b83\u4eec\u3002Links\u8ba9\u6211\u4eec\u5bf9\u8fd9\u4e9b\u8ba8\u8bba\u8fdb\u884c\u5b58\u6863\u3002", "note_en": "Galen Wolfe-Pauly  ~ravmel-ropdyl        OS 1 is a simple, unified system for building digital communities. OS 1 is for groups of people sharing messages, links, and notes on Urbit.\n We designed and built OS 1 for ourselves, and we\u2019re really enjoying using it every day. Instead of figuring out how to duct tape together apps and services, we use a single system to stay connected with the company and broader Urbit community that we really trust. OS 1 makes it feel like our company and community has a place in the digital world to call home.\n Most groups of friends and collaborators juggle apps and services to stay connected in the digital world today. We think OS 1 is a much better model. It\u2019s still too early to ask the whole world to switch over to it \u2014 but we\u2019re ready to help onboard our friends and adjacent communities into Urbit to have them try it out and get their feedback.\n First, let\u2019s walk through what OS 1 is and how we\u2019ve been using it. Then, if OS 1 is interesting to you, we\u2019ll tell you how to apply for a community grant.\n   OS 1 is a very simple, integrated tool for messaging, sharing links, and writing with a group of people. OS 1 is somewhere between \u2018productivity software\u2019 and a \u2018social network\u2019. We think it\u2019s the beginning of an altogether new breed of social computing.\n OS 1 isn\u2019t our first attempt to build an interface for Urbit, but it\u2019s certainly the most complete. OS 1 is the first Urbit interface that doesn\u2019t feel like an experiment.\n Today, when you boot Arvo (the Urbit OS kernel) and connect your browser to it, you\u2019ll see OS 1. OS 1 isn\u2019t the only possible client for Arvo, though. Anyone could build their own client or, since it\u2019s completely open source, modify OS 1 however they like.\n For most people, out of the box, OS 1 feels like an app. Given that it\u2019s running on Urbit OS \u2014 it\u2019s much more than that. It\u2019s a full-fledged general purpose virtual computer that\u2019s secure and private to you. We\u2019ll come back to what that means at the end.\n Let\u2019s walk through the features of OS 1 one by one to see what it\u2019s like.\n   The group is the main building block in OS 1. A group is simply a list of people that share a set of chat, links, and publish channels. A group is sort of like a super powerful group chat.\n A group of friends might just share a few chat channels. A reading group might just share a publish channel for discussion of what they \u2019re reading and a links channel for upcoming books. As a company, we share a variety of chat, publish, and links channels to get things done and communicate. There are chats for each area of work, publish channels for digests and feature discussion, and links channels for music, influences and references, for example.  ...\n Each person in a group is identified by their  Urbit ID: a short, memorable name that you own with a private key (and belongs to you completely). Each group is private and requires an invite. Groups aren\u2019t discoverable. They\u2019re meant to be high-trust communities of people. More like a commune than a public event.\n    Chat is chat: a sequential list of messages meant for synchronous communication. There are already a million ways to chat \u2014 but Urbit chat differs in a few important ways.\n First, each chat channel is only shared between the host and the members of a chat. When you DM with people, messages are sent peer to peer. The system is, in fact, decentralized and pseudonymous by default. No one knows anything about you outside of your Urbit ID.\n Second, each chat message is encrypted and signed by your Urbit ID. Again, we don\u2019t call Urbit \u2018secure\u2019 yet since it\u2019s unaudited \u2014 but we\u2019re working to have Urbit audited this year.\n Third, chat in Urbit OS is a protocol for sending messages between ships. It\u2019s easy to imagine extending chat in all kinds of fun and interesting directions. Chats that only accept certain message types, chats that have disappearing history, chats that you can only post to during certain times of day, and so on.\n (If you\u2019re curious to try one of these things, or have an idea about something you\u2019d like to experiment with \u2014 consider submitting a proposal in our  grants program. We regularly reward contributor work with address space.)\n We think of chat as a primitive, not simply a \u2018better IRC\u2019. But even in the rudimentary form it\u2019s in today, chat is essential to delivering a feeling of being at home. There\u2019s no way to deliver a complete interface for groups without chat.\n    Links is a bit like Hacker News or Reddit. It\u2019s just a collection of links with comments. There\u2019s no upvoting or sorting. We decided that with a small group it\u2019s more about collecting references than deciding what\u2019s most exciting \u2014 but permutations of Links could be a great area for contributors to experiment with.\n We use links to collect external references and track things we\u2019re thinking about. We\u2019re always looking at things going on outside our small digital universe and talking about them. Links lets us keep an archive of those discussions.\n We originally imagined links as evolving into more of a general-purpose \u2018collection creation\u2019 interface. One where you can pull together images, video, URLs, maybe even runnable code and so on into a single channel. We\u2019ll get there.\n   Publishing is somewhere between a blog and a note-taking system. A Publish notebook is a list of markdown files with optional comments. A private Publish notebook is like a journal, a group notebook can be like a forum (with comments on) or a collaborative blog.\n We use publish for both long-form discussion and one-way communication about what we\u2019re working on in its current form. The editor is calm and simple. In distraction-free mode, it\u2019s a nice place to put a note together.\n Publish, like all our other modules, is an interface to a generalized protocol for storing text. We have high hopes for how Publish can evolve into a flexible tool for notetaking and discussion with richer content types and better controls over structuring discussion.\n   You\u2019ll find a few other things on the home screen: a clock, the weather, and a simple command-line that we call the Dojo. These are system-wide utilities that aren\u2019t group-specific.\n The clock and weather tiles are simple indications of the state of the outside world. We built them because they\u2019re things we wanted to be able to check in on often. When you\u2019re spending much of the day in front of a computer, it\u2019s nice to know if you have enough daylight left to get some exercise in.\n   The Dojo gives you a quick way to see that, under the hood, Urbit OS is a powerful general-purpose system. The system hasn\u2019t evolved to the point that our libraries, frameworks, and modules are polished to our standards. Since it\u2019s still early, we can\u2019t claim that it\u2019s easy to develop on top of this platform. But we want it to become much easier.\n  We made OS 1 because we wanted to begin the process of re-centralizing our digital lives on a platform we actually control. Replacing all the services we use all at once is impossible \u2014 so we picked a suite that we felt would work nicely together. We\u2019ve always felt that one of the most exciting things about Urbit is in bringing your digital life together in a way that feels like home.\n The digital home, we think, is what our computers are meant to be but simply can\u2019t be in a world of cloud services. Once upon a time, thirty years ago, your personal computer was an open-ended tool that was reasonably simple to understand and use, lasted a pretty long time, and belonged to you in every way.\n OS 1 is a first step down the road back to a system that\u2019s simple, durable, and belongs to you in every way. It\u2019s a long road, and we feel like we\u2019ve made a very significant step forward.\n One really critical thing about OS 1 is the pattern of \u2018groups sharing modules\u2019. This pattern makes it perfectly clear how a virtual computer can outcompete a bunch of different services. As the collection of modules in OS 1 \u2192 N grows, we make it easier for others to contribute modules, and we increase the flexibility of connecting modules our system quickly outruns the messy, disconnected world we\u2019re currently stuck in.\n OS 1 isn\u2019t mature enough to be  easy for outside contributors to easily add modules \u2014 but it is  open source, and anyone is welcome to tinker and experiment with modifying it. We run a  grants program to reward contributors for improving any part of Urbit OS. As the system matures we expect this program to expand and accelerate.\n  By using OS 1 you inherit all the benefits of running Urbit OS. Each user runs their own node completely independently. Everyone using Urbit OS owns their own identity and data. And every Urbit OS node communicates over an encrypted and authenticated network. (Again, We don\u2019t yet call Urbit OS \u2018secure\u2019 because it hasn\u2019t been audited.)\n OS 1 is just a client for Urbit OS, of course. Other people could write their own clients that are completely different \u2014 like different windowing systems for Linux. Our hope is to build a client that includes interface components and frameworks that make it exceptionally easy to build modules for groups of people to share. Other clients could potentially invent entirely new ways of interacting with the underlying system.\n There are two threads by which OS 1 evolves into OS 2 and beyond. First, by becoming a more powerful system and second, by adding modules to expand our supported modes for interacting.\n In its current form, OS 1 by no means exposes all the power of the underlying system. Our approach to building OS 1 was to focus on the quality of the UI, and accept that it will feel like a monolithic app. We\u2019re already working to evolve our interface into something that feels flexible to an ordinary user and developers can easily extend and build on top of.\n Specifically, we want better affordances for putting multiple streams of data on the screen at once, better keyboard shortcuts and navigation affordances, better libraries and frameworks for building modules. We want a standalone client and a single login system. These are some of the things currently on the drawing board.\n As far as modules are concerned, there are too many things we\u2019d like to build to list them all. We\u2019d really like to have threaded conversations; short, Twitter-style messages; biometric and status tracking; an e-book reader and annotations system \u2014 and that\u2019s just to name a few we see in the near term.\n We\u2019ve long since felt that the most powerful thing about Urbit is that it\u2019s a general-purpose system. OS 1 puts us on the road to giving people an actual material sense of what using a general-purpose networked computer feels like.\n As we expand the affordances of the system and add modules over the course of OS 1, 2, and beyond we expect to deliver a system that can foster everyday creativity. There\u2019s a long road ahead, in the best possible sense. We\u2019re really excited about what the future holds.\n   As a distributed team trying to stay connected, we like using OS 1 from day to day. We\u2019d really like to hand-onboard a small group of like minded groups of people who want to experiment with living on the fringe of the digital world. Toward this end, we started the community grants program.\n Each community that\u2019s selected will get a block of address space to share, direct support, and (in the near future) free hosting.", "posttime": "2020-05-02 18:01:43", "tags": "urbit,\u804a\u5929,os", "title": "URBIT OS 1", "title_en": "Urbit OS 1", "transed": 0, "url": "https://urbit.org/blog/introducing-os1/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["urbit", "\u804a\u5929", "os"]}, {"category": "", "categoryclass": "", "imagename": "f19df6f03f515cc1e43757e4c51c21df.jpg", "infoid": 1000248, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6cd5\u56fd\u542f\u52a8\u4e86\u4e00\u98792000\u4e07\u6b27\u5143\u7684\u8ba1\u5212\uff0c\u5141\u8bb8\u6240\u6709\u516c\u6c11\u652f\u4ed8\u6700\u9ad850\u6b27\u5143\u7684\u81ea\u884c\u8f66\u7ef4\u4fee\u8d39\u3002\n\u8fd9\u4e9b\u8d44\u91d1\u8fd8\u5c06\u63d0\u4f9b\u81ea\u884c\u8f66\u57f9\u8bad\u548c\u4e34\u65f6\u505c\u8f66\u4f4d\uff0c\u8fd9\u4e9b\u8d44\u91d1\u662f\u5728\u6cd5\u56fd\u5f53\u5c40\u5e0c\u671b\u5c06\u7a7a\u6c14\u6c61\u67d3\u6c34\u5e73\u4fdd\u6301\u5728\u8f83\u4f4e\u6c34\u5e73\u540e\u63a8\u51fa\u7684\uff0c\u6b64\u524d\u6cd5\u56fd\u5f53\u5c40\u5728\u5c01\u9501\u671f\u95f4\u7a7a\u6c14\u6c61\u67d3\u6c34\u5e73\u5927\u5e45\u4e0b\u964d\u3002\n&gt\uff1b&gt\uff1b\u52aa\u529b\u8d76\u5230\u5546\u5e97\uff0c\u5c1d\u8bd56\u671f\u201c\u81ea\u884c\u8f66\u5468\u520a\u201d(Cycling Weekly)\u6742\u5fd7\uff0c\u53ea\u89816 GB\u5c31\u80fd\u9001\u8d27\u4e0a\u95e8\u3002\n\u5728\u6cd5\u56fd\uff0c60%\u7684\u65c5\u884c\u8ddd\u79bb\u4e0d\u52303\u82f1\u91cc\uff0c\u751f\u6001\u8f6c\u578b\u90e8\u957f\u4f0a\u4e3d\u838e\u767d\u00b7\u4f2f\u6069\u8868\u793a\uff0c\u8fd9\u9879\u8ba1\u5212\u65e8\u5728\u51cf\u5c11\u77ed\u9014\u65c5\u884c\u7684\u9a7e\u8f66\u3002\n\u4f2f\u6069\u8bf4\uff1a\u201c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e00\u65f6\u671f\u6210\u4e3a\u8fc8\u5411\u81ea\u884c\u8f66\u6587\u5316\u7684\u65b0\u9636\u6bb5\uff0c\u6211\u4eec\u5e0c\u671b\u81ea\u884c\u8f66\u6210\u4e3a\u53d6\u6d88\u9650\u5236\u7684\u5973\u738b\u3002\u201d\n\u5c06\u5efa\u7acb\u4e00\u4e2a\u75313000\u540d\u6ce8\u518c\u673a\u68b0\u5e08\u7ec4\u6210\u7684\u7f51\u7edc\uff0c50\u6b27\u5143\u7684\u7ef4\u4fee\u8d39\u7528\u5c06\u53ef\u5151\u6362\uff0c\u5982\u66f4\u6362\u8f6e\u80ce\u6216\u66f4\u6362\u94fe\u6761\u3002\u673a\u68b0\u5e08\u5c06\u63d0\u4f9b\u7ef4\u4fee\uff0c\u7136\u540e\u7531\u653f\u5e9c\u62a5\u9500\uff0c\u8fd9\u610f\u5473\u7740\u516c\u6c11\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u6536\u5230\u4efb\u4f55\u94b1\u3002\n\u8fd9\u9879\u8ba1\u5212\u662f\u5728\u627f\u8bfa\u4e3a\u8fde\u63a5\u5df4\u9ece\u5e02\u4e2d\u5fc3\u548c\u4e3b\u8981\u90ca\u533a\u76849\u6761\u53d7\u4fdd\u62a4\u7684\u81ea\u884c\u8f66\u516c\u8def\u7f51\u63d0\u4f9b3\u4ebf\u6b27\u5143\u4e4b\u540e\u51fa\u53f0\u7684\u3002\u5b83\u5c06\u628a\u76ee\u524d370\u516c\u91cc\u7684\u81ea\u884c\u8f66\u9053\u589e\u52a0\u5230650\u516c\u91cc\u3002\n\u6cd5\u56fd\u653f\u5e9c\u6b63\u5728\u6162\u6162\u7ed3\u675f\u4ece5\u670811\u65e5\u5f00\u59cb\u7684\u5c01\u9501\uff0c\u81ea3\u6708\u4efd\u4ee5\u6765\uff0c\u9996\u6b21\u5141\u8bb8\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u91cd\u65b0\u4e0a\u8def\u3002\n\u9a91\u884c\u53ef\u4ee5\u4e0d\u53d7\u65f6\u95f4\u9650\u5236\uff0c\u5728\u79bb\u5bb6100\u516c\u91cc\u7684\u8303\u56f4\u5185\uff0c\u4e0d\u8d85\u8fc710\u4eba\uff0c\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u4e5f\u9700\u8981\u4fdd\u6301\u81f3\u5c1110\u7c73\u7684\u8ddd\u79bb\u3002\n\u804c\u4e1a\u8f66\u624b\uff0c\u6bd4\u5982\u4f4f\u5728\u5c3c\u65af\u9644\u8fd1\u7684\u514b\u91cc\u65af\u00b7\u5f17\u7f57\u59c6(Chris Froome)\uff0c\u53ef\u4ee5\u5728\u6237\u5916\u6062\u590d\u9ad8\u5f3a\u5ea6\u7684\u8bad\u7ec3\uff0c\u4f46\u5fc5\u987b\u81ea\u5df1\u9a91\u8f66\uff0c\u5e76\u5c0a\u91cd\u793e\u4f1a\u8ddd\u79bb\u3002", "note_en": "France has launched a \u20ac20 million scheme that will allow all citizens up to \u20ac50 for bike repairs.\n Cycle training and temporary parking spaces will also be provided by the funds, which have been introduced after French authorities wish to keep air pollution levels low after they dropped significantly during lockdown.\n &gt;&gt; Struggling to get to the shops\u00a0 try 6 issues of Cycling Weekly magazine for just \u00a36 delivered to your door &lt;&lt;\n 60 per cent of journeys in France are less than three miles in distance and Elisabeth Borne, the minister for Ecological Transition, says this scheme is aimed at reducing driving for short journeys.\n \u201cWe want this period to be a new stage towards a cycling culture and we want the bicycle to be the queen of deconfinement,\u201d Borne said.\n   A network of 3,000 registered mechanics will be set up, and \u20ac50 of repairs will be redeemable, such as tyre changes or chain replacements. The mechanics will provide the repairs and then be reimbursed by the government, meaning citizens will not actually receive any money.\n This scheme comes after \u20ac300 million was promised for a network of nine protected cycle highways linking the centre of Paris with key suburbs. It will increase the current 370km of bike paths to 650km.\n       The French government is slowly bringing its lockdown to a close from May 11, with cyclists allowed back onto the roads for the first time since March.\n Rides can be undertaken without a time limit, within 100km of your home, and with no more than 10 people, with cyclists also required to stay at least 10m apart.\n Pro riders, such as Chris Froome who lives near Nice, are allowed to resume high-intensity training outdoors but must ride on their own and respect social distancing.", "posttime": "2020-05-02 18:01:40", "tags": "\u81ea\u884c\u8f66,offers", "title": "\u4e00\u65e6\u5c01\u9501\u7ed3\u675f\uff0c\u6cd5\u56fd\u5411\u6bcf\u4f4d\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u63d0\u4f9b50\u6b27\u5143\u7684\u81ea\u884c\u8f66\u7ef4\u4fee\u8d39", "title_en": "France offers each cyclist \u20ac50 for bike repairs once lockdown ends", "transed": 0, "url": "https://www.cyclingweekly.com/news/latest-news/france-offers-each-cyclist-e50-for-bike-repairs-once-lockdown-ends-455140", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u81ea\u884c\u8f66", "offers"]}, {"category": "", "categoryclass": "", "imagename": "dd9aa5774e794d046367c98db6374860.jpeg", "infoid": 1000247, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9\u4e8e\u786c\u4ef6\u516c\u53f8\u6765\u8bf4\uff0c\u4eca\u5e74\u5df2\u7ecf\u5f00\u59cb\u4e86\u4e00\u4e2a\u574e\u5777\u7684\u5f00\u5c40\uff0c\u6211\u4eec\u624d\u521a\u521a\u5f00\u59cb\u770b\u5230\u51a0\u72b6\u75c5\u6bd2\u6700\u7ec8\u5c06\u5bf9\u5e02\u573a\u4ea7\u751f\u7684\u771f\u6b63\u5f71\u54cd\u3002ARM\u662f\u4e3a\u82f9\u679c\u3001\u9ad8\u901a\u548c\u4e09\u661f\u7b49\u6240\u6709\u516c\u53f8\u8bbe\u8ba1\u82af\u7247\u7684\u82f1\u56fd\u516c\u53f8\uff0c\u8be5\u516c\u53f8\u5e0c\u671b\u901a\u8fc7\u5411\u7b26\u5408\u6761\u4ef6\u7684\u521d\u521b\u516c\u53f8\u514d\u8d39\u63d0\u4f9b\u7ea675%\u7684\u82af\u7247\u7ec4\u5408\u6765\u542f\u52a8\u5f00\u53d1\u3002\n\u6b64\u4e3e\u6807\u5fd7\u7740\u8be5\u516c\u53f8\u7075\u6d3b\u51c6\u5165\u8ba1\u5212\u7684\u6269\u5927\u3002\u6709\u4e86\u5b83\uff0cARM\u5c06\u4e3a\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u7684\u521d\u521b\u4f01\u4e1a\u5f00\u653e\u5176\u77e5\u8bc6\u4ea7\u6743\u7684\u8bbf\u95ee\u3002\u867d\u7136\u4e00\u4e9b\u6700\u5927\u7684\u516c\u53f8\u4e3a\u8fd9\u4e9b\u4fe1\u606f\u5411\u82af\u7247\u8bbe\u8ba1\u8005\u652f\u4ed8\u4e86\u5927\u7b14\u8d39\u7528\uff0c\u4f46\u5bf9\u4e8e\u90a3\u4e9b\u521a\u521a\u8d77\u6b65\u7684\u516c\u53f8\u6765\u8bf4\uff0c\u6210\u672c\u53ef\u80fd\u662f\u4ee4\u4eba\u671b\u800c\u5374\u6b65\u7684\u3002\n\u9ad8\u7ea7\u526f\u603b\u88c1\u8fea\u666e\u8482\u00b7\u74e6\u67e5\u5c3c(Dipti Vachani)\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201c\u5728\u5f53\u4eca\u5145\u6ee1\u6311\u6218\u7684\u5546\u4e1a\u683c\u5c40\u4e2d\uff0c\u63a8\u52a8\u521b\u65b0\u81f3\u5173\u91cd\u8981-\u73b0\u5728\uff0c\u62e5\u6709\u51fa\u8272\u60f3\u6cd5\u7684\u521d\u521b\u4f01\u4e1a\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u9700\u8981\u6700\u5feb\u3001\u6700\u503c\u5f97\u4fe1\u8d56\u7684\u6210\u529f\u548c\u89c4\u6a21\u4e4b\u8def\u3002\u201dARM Startups\u7684\u7075\u6d3b\u63a5\u5165\u4e3a\u65b0\u8fdb\u5165\u7845\u4e1a\u7684\u516c\u53f8\u63d0\u4f9b\u4e86\u4e00\u6761\u66f4\u5feb\u3001\u66f4\u5177\u6210\u672c\u6548\u76ca\u7684\u5de5\u4f5c\u539f\u578b\u4e4b\u8def\uff0c\u4ece\u800c\u589e\u5f3a\u4e86\u6295\u8d44\u8005\u5bf9\u672a\u6765\u8d44\u91d1\u7684\u4fe1\u5fc3\u3002\u201c\u3002\n\u5bf9\u4e8e\u65b0\u5174\u7684\u521d\u521b\u516c\u53f8\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u673a\u4f1a\u3002\u5f53\u7136\uff0cARM\u8fd9\u6837\u505a\u4e0d\u4ec5\u4ec5\u662f\u51fa\u4e8e\u597d\u5fc3\u3002\u5728\u7ecf\u5386\u4e86\u51e0\u5e74\u7684\u5feb\u901f\u878d\u8d44\u548c\u589e\u957f\u540e\uff0c\u8be5\u884c\u4e1a\u53ef\u80fd\u4f1a\u51fa\u73b0\u524d\u6240\u672a\u6709\u7684\u653e\u7f13\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e2e\u52a9\u57f9\u80b2\u786c\u4ef6\u521d\u521b\u4f01\u4e1a\u80af\u5b9a\u7b26\u5408\u8be5\u516c\u53f8\u7684\u65e2\u5f97\u5229\u76ca\u3002\n\u611f\u5174\u8da3\u7684\u5404\u65b9\u53ef\u4ee5\u5728\u6b64\u5904\u8bbf\u95ee\u53ef\u7528IP\u7684\u5b8c\u6574\u5217\u8868\u3002ARM\u8ba4\u4e3a\uff0c\u63a8\u51fa\u9488\u5bf9\u521d\u521b\u4f01\u4e1a\u7684\u7075\u6d3b\u51c6\u5165\u53ef\u4ee5\u5e2e\u52a9\u516c\u53f8\u5c06\u4e0a\u5e02\u65f6\u95f4\u7f29\u77ed\u81f3\u591a\u4e00\u5e74\u3002", "note_en": "The year\u2019s already off to a rocky start for hardware companies, and we\u2019re only beginning to see the true impact COVID-19 will ultimately have on the market. Arm \u2014 the U.K. company behind the designs of chips for everyone from Apple to Qualcomm to Samsung \u2014 is hoping to kickstart developing  by offering up access to around 75% of its chip portfolio for free to qualified startups.\n The move marks an expansion of the company\u2019s Flexible Access program. With it, Arm will open access to its IP for early-stage startups. While some of the biggest companies pay the chip designer big bucks for that information, the cost can be prohibitive for those just starting out.\n \u201cIn today\u2019s challenging business landscape, enabling innovation is critical \u2013 now more than ever, startups with brilliant ideas need the fastest, most trusted route to success and scale,\u201d SVP Dipti Vachani, said in a statement. \u201cArm Flexible Access for Startups offers new silicon entrants a faster, more cost-efficient path to working prototypes, resulting in strengthened investor confidence for future funding.\u201d\n  It\u2019s a nice bit of access for up and coming startups. Of course, Arm\u2019s not simply doing this out of the goodness of its heart. The company certainly has a vested interest in helping foster hardware startups amid what could shape up to be an unprecedented slowdown for the industry after a few years of rapid funding and growth.\n Interested parties can access the full list of available IP  here. Arm believes the launch of Flexible Access for Startups could help companies accelerate time to market by up to a year.", "posttime": "2020-05-02 18:01:38", "tags": "\u514d\u8d39,\u82af\u7247,\u8bbe\u8ba1,\u5904\u4e8e,offering", "title": "ARM\u5411\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u7684\u521d\u521b\u4f01\u4e1a\u63d0\u4f9b\u514d\u8d39\u4f7f\u7528\u5176\u82af\u7247\u8bbe\u8ba1\u7684\u673a\u4f1a", "title_en": "Arm is offering early-stage startups free access to its chip designs", "transed": 0, "url": "https://techcrunch.com/2020/04/29/arm-is-offering-early-stage-startups-free-access-to-its-chip-designs/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u514d\u8d39", "\u82af\u7247", "\u8bbe\u8ba1", "\u5904\u4e8e", "offering"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000246, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Erlang VM\u5728Rust\u4e2d\u7684\u5b9e\u73b0\u3002\u6309\u7167\u8fd9\u4e2a\u91cd\u8981\u6027\u987a\u5e8f\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5b8c\u6574\u3001\u6b63\u786e\u548c\u5feb\u901f\u3002\n\u517c\u5bb9OTP 22+(\u76ee\u524d\u6ca1\u6709\u5206\u53d1\u7684\u6bd4\u7279)-\u6240\u6709\u7684\u4ee3\u7801\u6700\u7ec8\u90fd\u5e94\u8be5\u4e0d\u53d8\u5730\u5728Enigma\u4e0a\u8fd0\u884c\u3002\u4e0d\u652f\u6301\u4e0d\u63a8\u8350\u4f7f\u7528\u7684\u64cd\u4f5c\u7801\u3002\n\u56e0\u4e3a\u5b83\u5f88\u6709\u8da3\uff0c\u800c\u4e14\u6211\u5b66\u5230\u4e86\u5f88\u591a\u3002BEAM\u548cHIPE\u5f88\u68d2\uff0c\u4f46\u5b83\u4eec\u90fd\u5f88\u5927(\u7ea6300K SLOC)\u3002\u4e00\u4e2a\u5c0f\u7684\u5b9e\u73b0\u4f7f\u65b0\u624b\u66f4\u5bb9\u6613\u5b66\u4e60Erlang\u5185\u90e8\u3002\u6211\u4eec\u8fd8\u5f97\u5230\u4e86\u4e00\u4e2a\u5e73\u53f0\uff0c\u53ef\u4ee5\u5feb\u901f\u8fed\u4ee3\u5305\u542b\u5728BEAM\u4e2d\u7684\u60f3\u6cd5\u3002\n\u5efa\u9020\u8c1c\u56e2\u7684\u552f\u4e00\u524d\u63d0\u662f\u94c1\u9508\u3002\u4f7f\u7528Ruaste\u5b89\u88c5\u6700\u65b0\u7684\u591c\u95f4\u94c1\u9508\u3002\u76ee\u524d\uff0c\u6211\u4eec\u4e0d\u518d\u652f\u6301\u7a33\u5b9a/\u6d4b\u8bd5\u7248\uff0c\u56e0\u4e3a\u6211\u4eec\u4f9d\u8d56\u5f02\u6b65/\u7b49\u5f85\uff0c\u8ba1\u5212\u57282019\u5e74\u7b2c\u4e09\u5b63\u5ea6\u7684\u67d0\u4e2a\u65f6\u5019\u8fd0\u884c\u4e0d\u7a33\u5b9a\u7248\u3002\n\u8981\u542f\u52a8OTP\uff0c\u60a8\u8fd8\u9700\u8981\u7f16\u8bd1\u6807\u51c6\u5e93\u3002\u76ee\u524d\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6881\u6784\u5efa\u7cfb\u7edf\uff1a\n\u6211\u4eec\u5e0c\u671b\u5728\u5c06\u6765(\u4e00\u65e6Enigma\u53ef\u4ee5\u8fd0\u884c\u7f16\u8bd1\u5668)\u7b80\u5316\u8fd9\u4e00\u6b65\u3002\n\u8fd0\u884cCargo Run\u4ee5\u5b89\u88c5\u4f9d\u8d56\u9879\u3001\u6784\u5efa\u548c\u8fd0\u884cVM\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u5f15\u5bfcErlang shell(IEX\u4e5f\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u6709\u4e00\u4e9b\u5448\u73b0\u9519\u8bef)\u3002\n\u4e00\u65e6\u6211\u4eec\u8fbe\u5230\u4e00\u5b9a\u7684\u7a33\u5b9a\u6027\uff0c\u5404\u79cd\u5e73\u53f0\u7684\u9884\u5efa\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u53ef\u7528\u3002\n\u6211\u4eec\u5b9e\u73b0\u4e86\u5927\u90e8\u5206\u64cd\u4f5c\u7801\uff0c\u4ee5\u53ca\u5927\u7ea6\u4e00\u534a\u7684BIF\u3002\u60a8\u53ef\u4ee5\u67e5\u770b\u64cd\u4f5c\u7801\u6216BIF\u7684\u8be6\u7ec6\u8fdb\u5ea6\u660e\u7ec6\u3002\n\u7aef\u53e3(\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u652f\u6301\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5f15\u5bfc\u5173\u952e\u7aef\u53e3\u4f5c\u4e3a\u5185\u7f6e\u7aef\u53e3\uff1aTTY\u3001FD)\u3002\nNIF/BIF\u662f\u5728\u67d0\u4e9b\u70b9\u4e0a\u8fdb\u884c\u6536\u76ca\u7684\u671f\u8d27\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u51cf\u6301(\u5141\u8bb8\u66f4\u7b80\u5355\u7684\u6536\u76ca\u5b9e\u73b0)\u3002\n\u7f16\u5199\u66f4\u591a\u5173\u4e8e\u8bb0\u5f55\u8f83\u5c11\u7684\u5149\u675f\u65b9\u9762\u7684\u6587\u6863(\u4e8c\u8fdb\u5236\u5339\u914d\u3001\u65f6\u95f4\u8f6e\u3001\u8fdb\u7a0b\u76d1\u89c6\u5668\u7b49)\u3002\n\u5728\u865a\u62df\u673a\u6ca1\u6709\u8fbe\u5230\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5b8c\u6574\u6027\u4e4b\u524d\uff0c\u8003\u8651\u8fd9\u4e9b\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\n\u6ce8\u610f\uff1aNIF/FFI ABI\u4e0eOTP\u7684\u517c\u5bb9\u6027\u5c06\u662f\u76f8\u5f53\u8270\u5de8\u7684\u5de5\u4f5c\u3002\u4f46\u662f\uff0c\u94c1\u9508\u98ce\u683c\u7684NIF\u754c\u9762\u5c06\u53ef\u7528\u3002\u4e5f\u6709\u53ef\u80fd\u4f7f\u9002\u914d\u5668\u4e0eRustler\u517c\u5bb9\u3002\n\u6700\u7b80\u5355\u7684\u5165\u95e8\u65b9\u6cd5\u662f\u67e5\u770bNotes\u6587\u4ef6\u5939\uff0c\u7136\u540e\u9009\u62e9\u8981\u5b9e\u73b0\u7684BIF\u6216\u64cd\u4f5c\u7801\u3002\u8bf7\u770b\u4e00\u4e0bsrc/bin.rs\u548cbif\u6587\u4ef6\u5939\uff0c\u4e86\u89e3\u5176\u4ed6BIF\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u4e5f\u6709\u51e0\u4e2a\u95ee\u9898\u5f00\u653e\u4e0e\u826f\u597d\u7684\u7b2c\u4e00\u671f\u6807\u7b7e\uff0c\u8fd9\u4e5f\u5c06\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5185\u90e8\u4ecb\u7ecd\u3002\n\u6216\u8005\uff0c\u5728\u4ee3\u7801\u5e93\u4e2d\u641c\u7d22TODO\u3001FIXME\u6216UNIMPLEMED\uff01\uff0c\u5b83\u4eec\u6807\u8bb0\u4e86\u5b58\u5728\u90e8\u5206\u5b9e\u73b0\u7684\u5404\u4e2a\u4f4d\u7f6e\uff0c\u4f46\u9700\u8981\u505a\u66f4\u591a\u7684\u5de5\u4f5c\u3002\n\u76ee\u524d\u7f3a\u5c11\u6d4b\u8bd5\u8986\u76d6\u9762\uff0c\u5e76\u4e14\u6709\u4e0d\u540c\u7ea7\u522b\u7684\u6587\u6863\uff1b\u6211\u5c06\u5f88\u5feb\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002", "note_en": "An implementation of the Erlang VM in Rust. We aim to be complete, correct andfast, in that order of importance.\n OTP 22+ compatible (sans the distributed bits for now) \u2014 all your codeshould eventually run on Enigma unchanged. Deprecated opcodes won&#39;t besupported.\n  Because it&#39;s fun and I&#39;ve been learning a lot. BEAM and HiPE are awesome, butthey&#39;re massive (~300k SLOC). A small implementation makes it easier for newpeople to learn Erlang internals. We also get a platform to quickly iterate onideas for inclusion into BEAM.\n  Only prerequisite to building Enigma is Rust. Use  rustupto install the latest nightly rust. At this time we don&#39;t support stable / betaanymore, because we&#39;re relying on async/await, which is scheduled to run instable some time in Q3 2019.\n To boot up OTP you will also need to compile the standard library. At themoment, that relies on the BEAM build system:\n  We hope to simplify this step in the future (once enigma can run the compiler).\n Run  cargo run to install dependencies, build and run the VM. By default, itwill boot up the erlang shell ( iex also works, but has some rendering bugs).\n  Pre-built binaries for various platforms will be available, once we reach a certain level of stability.\n  We implement most of the opcodes, and about half of all BIFs. You can viewa detailed progress breakdown on  opcodes or  BIFs.\n    Ports (might never be fully supported, we provide a few boot-critical ones as builtins: tty, fd)\n   NIF/BIFs are futures that yield at certain points to play nice with reductions(allows a much simpler yielding implementation)\n  Write more documentation about more sparsely documented BEAM aspects (binary matching, time wheel, process monitors, ...)\n  Until the VM doesn&#39;t reach a certain level of completeness, it doesn&#39;t make sense to consider these.\n  Note: NIF/FFI ABI compatibility with OTP is going to be quite some work. But,a rust-style NIF interface will be available. It would also probably be possibleto make an adapter compatible with  rustler.\n   The easiest way to get started is to look at the  notes folder and pick a BIFor an opcode to implement. Take a look at  src/bif.rs and the  bif folder onhow other BIFs are implemented. There&#39;s also a few issues open with the  good first issue tag, which would also be a good introduction to the internals.\n Alternatively, search the codebase for  TODO,  FIXME or  unimplemented!,those mark various places where a partial implementation exists, but a bit morework needs to be done.\n Test coverage is currently lacking, and there&#39;s varying levels of documentation; I will be addressing these soon.", "posttime": "2020-05-02 18:01:32", "tags": "rust,erlang,run", "title": "\u8c1c\u56e2\uff1aErlang VM\u5728Rust\u4e2d\u7684\u5b9e\u73b0", "title_en": "Enigma: Erlang VM Implementation in Rust", "transed": 0, "url": "https://github.com/archseer/enigma", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["rust", "erlang", "run"]}, {"category": "", "categoryclass": "", "imagename": "2aadf70d9c4fd5c63e2fa4bf4265bb89.jpg", "infoid": 1000245, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6770\u5f17\u91cc\u00b7\u7231\u6cfc\u65af\u5766(Jeffrey Epstein)\u7684\u6570\u767e\u4e07\u7f8e\u5143\u4e3a\u4ed6\u5728\u54c8\u4f5b\u5927\u5b66\u8d62\u5f97\u4e86\u7279\u6b8a\u5f85\u9047\uff1a\u4ed6\u5728\u5927\u5b66\u7814\u7a76\u4eba\u5458\u4e2d\u6709\u4e00\u95f4\u79c1\u4eba\u529e\u516c\u5ba4\uff0c\u4e00\u6761\u4e13\u7528\u7535\u8bdd\u7ebf\uff0c\u4e00\u4e2a\u4e0d\u540c\u5bfb\u5e38\u7684\u8bbf\u95ee\u5956\u5b66\u91d1\u804c\u4f4d\uff0c\u8fd8\u6709\u51e0\u540d\u9ad8\u7ea7\u6559\u804c\u5458\u5de5\u7684\u652f\u6301\uff0c\u8fd9\u4e9b\u6559\u804c\u5458\u5de5\u6566\u4fc3\u7ba1\u7406\u8005\u63a5\u53d7\u8fd9\u4f4d\u91d1\u878d\u5bb6\u7684\u94b1\uff0c\u5c3d\u7ba1\u4ed6\u6709\u767b\u8bb0\u5728\u6848\u7684\u6027\u72af\u7f6a\u8005\u7684\u8bb0\u5f55\u3002\n\u5728\u5468\u4e94\u53d1\u5e03\u7684\u4e00\u4efd\u62a5\u544a\u4e2d\uff0c\u54c8\u4f5b\u6982\u8ff0\u4e86\u4e0e\u81ed\u540d\u662d\u8457\u7684\u7231\u6cfc\u65af\u5766\u7684\u8fd9\u4e9b\u5e7f\u6cdb\u8054\u7cfb\uff0c\u8be6\u7ec6\u63cf\u8ff0\u4e86\u4e00\u6bb5\u8de8\u8d8a25\u5e74\u4ee5\u4e0a\u7684\u5173\u7cfb\u3002\n\u7231\u6cfc\u65af\u5766\u53bb\u5e74\u590f\u5929\u663e\u7136\u662f\u81ea\u6740\u8eab\u4ea1\uff0c\u5f53\u65f6\u4ed6\u56e0\u88ab\u6307\u63a7\u6027\u4ea4\u6613\u672a\u6210\u5e74\u4eba\u800c\u88ab\u5173\u62bc\u5728\u66fc\u54c8\u987f\u7684\u4e00\u6240\u76d1\u72f1\u91cc\uff0c\u4f46\u4ed6\u7684\u4eb2\u5bc6\u5173\u7cfb\u4ee5\u53ca\u5bf9\u79d1\u5b66\u5bb6\u548c\u5b66\u8005\u7684\u7ecf\u6d4e\u652f\u6301\u7ee7\u7eed\u9707\u64bc\u7740\u54c8\u4f5b\u548c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7b49\u9ad8\u7b49\u6559\u80b2\u673a\u6784\u3002\n\u6839\u636e\u54c8\u4f5b\u5927\u5b66\u6cd5\u5f8b\u603b\u987e\u95ee\u548c\u4e00\u5bb6\u5916\u90e8\u5f8b\u5e08\u4e8b\u52a1\u6240\u957f\u8fbe\u4e00\u4e2a\u6708\u7684\u8c03\u67e5\uff0c\u8be5\u5927\u5b66\u57281998\u5e74\u81f32007\u5e74\u671f\u95f4\u4ece\u7231\u6cfc\u65af\u5766\u90a3\u91cc\u83b7\u5f97\u4e86920\u4e07\u7f8e\u5143\u3002\u5728\u7231\u6cfc\u65af\u57662008\u5e74\u88ab\u5224\u6709\u6027\u7f6a\u540e\uff0c\u5f53\u65f6\u7684\u54c8\u4f5b\u6821\u957f\u5fb7\u9c81\u00b7\u5409\u5c14\u5e73\u00b7\u6d6e\u58eb\u5fb7(Drew Gilpin Faust)\u7981\u6b62\u4e86\u8fd9\u4f4d\u91d1\u878d\u5bb6\u7684\u4efb\u4f55\u6350\u6b3e\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6d6e\u58eb\u5fb7\u7684\u51b3\u5b9a\u5bf9\u54c8\u4f5b\u5185\u90e8\u7684\u4e00\u4e9b\u6559\u804c\u5458\u5de5\u548c\u7b79\u6b3e\u4eba\u6765\u8bf4\u5e76\u4e0d\u6e05\u695a\uff0c\u4ed6\u4eec\u591a\u5e74\u6765\u4e00\u76f4\u5728\u6e38\u8bf4\u7ba1\u7406\u4eba\u5458\u4ece\u7231\u6cfc\u65af\u5766\u90a3\u91cc\u62ff\u94b1\u3002\n\u4e2a\u522b\u6559\u6388\u5728\u88ab\u5b9a\u7f6a\u540e\u4e5f\u7ee7\u7eed\u4e0e\u7231\u6cfc\u65af\u5766\u4fdd\u6301\u8054\u7cfb\uff0c\u4e0e\u4ed6\u4f1a\u9762\uff0c\u524d\u5f80\u4ed6\u7684\u5bb6\u4e2d\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd8\u53d7\u76ca\u4e8e\u8fd9\u4f4d\u91d1\u878d\u5bb6\u4e0e\u5176\u4ed6\u53ef\u4ee5\u652f\u6301\u5b66\u672f\u7814\u7a76\u7684\u5bcc\u6709\u6350\u8d60\u8005\u7684\u5173\u7cfb\u3002\n\u54c8\u4f5b\u5927\u5b66\u6821\u957f\u52b3\u4f26\u65af\u00b7\u5df4\u8003(Lawrence Bacow)\u5728\u5411\u793e\u533a\u53d1\u8868\u7684\u8bb2\u8bdd\u4e2d\u8868\u793a\uff0c\u8be5\u6821\u5c06\u5ba1\u67e5\u5176\u5907\u53d7\u4e89\u8bae\u7684\u793c\u7269\u653f\u7b56\u4e2d\u7684\u6f0f\u6d1e\u3002\n\u5df4\u8003\u5728\u7ed9\u54c8\u4f5b\u793e\u533a\u7684\u4e00\u5c01\u4fe1\u4e2d\u8bf4\uff1a\u201c\u4eca\u5929\u53d1\u5e03\u7684\u62a5\u544a\u63cf\u8ff0\u4e86\u6709\u539f\u5219\u7684\u51b3\u7b56\uff0c\u4f46\u4e5f\u63ed\u793a\u4e86\u5fc5\u987b\u89e3\u51b3\u7684\u5236\u5ea6\u548c\u4e2a\u4eba\u7f3a\u9677-\u4e0d\u4ec5\u662f\u4e3a\u4e86\u5927\u5b66\uff0c\u4e5f\u662f\u4e3a\u4e86\u8868\u5f70\u90a3\u4e9b\u8bd5\u56fe\u5c06\u7231\u6cfc\u65af\u5766\u7ef3\u4e4b\u4ee5\u6cd5\u7684\u52c7\u6562\u7684\u4e2a\u4eba\u3002\u201d\n\u5468\u4e94\uff0c\u54c8\u4f5b\u8fd8\u5ba3\u5e03\uff0c\u7531\u4e8e\u9a6c\u4e01\u00b7\u8bfa\u74e6\u514b(Martin Nowak)\u4e0e\u7231\u6cfc\u65af\u5766\u7684\u5173\u7cfb\uff0c\u4ee5\u53ca\u53ef\u80fd\u8fdd\u53cd\u8be5\u6821\u5b89\u5168\u548c\u62e8\u6b3e\u653f\u7b56\u7684\u884c\u4e3a\uff0c\u54c8\u4f5b\u5df2\u7ecf\u8ba9\u751f\u7269\u548c\u6570\u5b66\u6559\u6388\u3001\u54c8\u4f5b\u8fdb\u5316\u52a8\u529b\u5b66\u9879\u76ee(Program For Evative Dynamics)\u4e3b\u4efb\u9a6c\u4e01\u00b7\u8bfa\u74e6\u514b(Martin Nowak)\u5e26\u85aa\u884c\u653f\u4f11\u5047\u3002\n\u7231\u6cfc\u65af\u5766\u7684\u5927\u90e8\u5206\u54c8\u4f5b\u57fa\u91d1\uff0c2003\u5e74\u4e3a650\u4e07\u7f8e\u5143\uff0c\u90fd\u7528\u4e8e\u5efa\u7acb\u8bfa\u74e6\u514b\u7684\u9879\u76ee\u3002\u6839\u636e\u8fd9\u4efd\u62a5\u544a\uff0c\u591a\u5e74\u6765\uff0c\u7231\u6cfc\u65af\u5766\u7ecf\u5e38\u51fa\u73b0\u5728\u8be5\u9879\u76ee\u4f4d\u4e8e\u54c8\u4f5b\u5e7f\u573a\u7684\u529e\u516c\u5ba4\u3002\n\u5728\u8be5\u9879\u76ee\u7684\u5927\u697c\u91cc\uff0c\u7a7a\u95f4\u5f88\u5c11\uff0c\u4f46Office 610\u88ab\u79f0\u4e3a\u201c\u6770\u5f17\u91cc\u529e\u516c\u5ba4\u201d\uff0c\u7231\u6cfc\u65af\u5766\u7528\u81ea\u5df1\u7684\u5730\u6bef\u548c\u7167\u7247\u88c5\u9970\u4e86\u5b83\u3002\u636e\u62a5\u9053\uff0c\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u7231\u6cfc\u65af\u5766\u751a\u81f3\u6709\u81ea\u5df1\u7684\u54c8\u4f5b\u7535\u8bdd\u7ebf\u3002\n2010\u5e74\u51fa\u72f1\u540e\uff0c\u4ed6\u53bb\u8fc7\u90a3\u91cc40\u591a\u6b21\uff0c\u4e00\u76f4\u52302018\u5e74\uff0c\u7ecf\u5e38\u548c\u62c5\u4efb\u4ed6\u52a9\u624b\u7684\u5e74\u8f7b\u5973\u6027\u5728\u4e00\u8d77\u3002\u5c3d\u7ba1\u4e0e\u54c8\u4f5b\u6ca1\u6709\u5b98\u65b9\u8054\u7cfb\uff0c\u7231\u6cfc\u65af\u5766\u8fd8\u662f\u62ff\u5230\u4e86\u8fdb\u5165\u5927\u697c\u548c\u529e\u516c\u5ba4\u7684\u94a5\u5319\u5361\u3002\n\u636e\u62a5\u9053\uff0c\u8bfa\u74e6\u514b\u5141\u8bb8\u7231\u6cfc\u65af\u5766\u5728\u9547\u4e0a\u65f6\u4f7f\u7528\u8be5\u7ec4\u7ec7\u7684\u529e\u516c\u5ba4\u4e3e\u529e\u665a\u5bb4\uff0c\u5e76\u4f1a\u89c1\u54c8\u4f5b\u5927\u5b66\u6559\u5e08\u3001\u5730\u533a\u5b66\u8005\u548c\u653f\u754c\u4eba\u58eb\u3002\n\u7231\u6cfc\u65af\u5766\u7684\u6765\u8bbf\u53ea\u662f\u5728\u8bfa\u74e6\u514b\u5c0f\u7ec4\u7684\u7814\u7a76\u4eba\u5458\u62b1\u6028\u4e4b\u540e\u624d\u505c\u6b62\u7684\u3002\n2013\u5e74\uff0c\u968f\u7740\u66f4\u591a\u9488\u5bf9\u7231\u6cfc\u65af\u5766\u7684\u7834\u574f\u6027\u6307\u63a7\u51fa\u73b0\u5728\u5a92\u4f53\u4e0a\uff0c\u4ed6\u8bd5\u56fe\u63d0\u5347\u81ea\u5df1\u4f5c\u4e3a\u4e0e\u7cbe\u82f1\u673a\u6784\u6709\u6148\u5584\u5173\u7cfb\u7684\u79d1\u5b66\u6350\u8d60\u8005\u7684\u58f0\u8a89\u3002\u8bfa\u74e6\u514b\u5141\u8bb8\u7231\u6cfc\u65af\u5766\u5c06\u4ed6\u7684\u57fa\u91d1\u4f1a\u94fe\u63a5\u5230\u8fd9\u4f4d\u6559\u6388\u7684\u54c8\u4f5b\u7f51\u7ad9\u3002\u8bfa\u74e6\u514b\u8fd8\u5728\u4ed6\u7684\u54c8\u4f5b\u7f51\u7ad9\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u7f51\u9875\uff0c\u4e13\u95e8\u4ecb\u7ecd\u7231\u6cfc\u65af\u5766\u5bf9\u8be5\u7814\u7a76\u9879\u76ee\u7684\u8d21\u732e\u30022014\u5e74\u672b\uff0c\u6027\u4fb5\u5e78\u5b58\u8005\u6743\u76ca\u5021\u5bfc\u8005\u8054\u7cfb\u4e86\u6d6e\u58eb\u5fb7\u548c\u8bfa\u74e6\u514b\u7684\u7ec4\u7ec7\uff0c\u8fd9\u4e00\u505a\u6cd5\u624d\u7ed3\u675f\u3002..\u3002\n\u62a5\u544a\u79f0\uff0c\u8bfa\u74e6\u514b\u548c\u54c8\u4f5b\u533b\u5b66\u9662\u6559\u6388\u4e54\u6cbb\u00b7\u4e18\u5947\u4e5f\u53d7\u76ca\u4e8e\u7231\u6cfc\u65af\u5766\u4e0e\u5176\u4ed6\u5bcc\u6709\u6350\u8d60\u8005\u7684\u5173\u7cfb\uff0c\u5728\u7231\u6cfc\u65af\u5766\u4ecb\u7ecd\u540e\uff0c\u4ed6\u4eec\u57282010\u5e74\u81f32015\u5e74\u95f4\u83b7\u5f97\u4e86\u6570\u767e\u4e07\u7f8e\u5143\u7684\u8d44\u91d1\u3002\n\u54c8\u4f5b\u5927\u5b66\u7684\u62a5\u544a\u8fd8\u53d1\u73b0\uff0c\u5728\u7533\u8bf7\u57fa\u91d1\u4f1a\u62e8\u6b3e\u65f6\uff0c\u8bfa\u74e6\u514b\u8c0e\u79f0\u7231\u6cfc\u65af\u5766\u7684\u4e00\u5bb6\u975e\u8425\u5229\u6027\u7ec4\u7ec7\u7ed9\u4e86\u4ed6\u7684\u7ec4\u7ec7\u8d44\u91d1\u3002\n\u8be5\u62a5\u544a\u8fd8\u8d28\u7591\u4e86\u5f53\u65f6\u7684\u5fc3\u7406\u5b66\u7cfb\u4e3b\u4efb\u65af\u8482\u82ac\u00b7\u79d1\u65af\u6797(Stephen Kosslyn)\u57282005\u5e74\u7ed9\u4e88\u7231\u6cfc\u65af\u5766\u4e00\u4e2a\u5ba2\u5ea7\u7814\u7a76\u5458\u804c\u4f4d\u7684\u51b3\u5b9a\u3002\u79d1\u65af\u6797\u662f\u54c8\u4f5b\u5927\u5b66\u7684\u8363\u4f11\u6559\u6388\uff0c\u4ed6\u4e3a\u7231\u6cfc\u65af\u5766\u62c5\u4fdd\uff0c\u5c3d\u7ba1\u8fd9\u4f4d\u91d1\u878d\u5bb6\u6ca1\u6709\u5b66\u58eb\u5b66\u4f4d\u548c\u8d44\u683c\u6765\u8fdb\u884c\u8fd9\u4e00\u804c\u4f4d\u6240\u9700\u7684\u4e00\u4e9b\u7814\u7a76\u3002\n\u5728\u4f5c\u4e3a\u5ba2\u5ea7\u7814\u7a76\u5458\u7684\u7b2c\u4e8c\u5e74\u7533\u8bf7\u4e66\u4e2d\uff0c\u7231\u6cfc\u65af\u5766\u5199\u9053\uff0c\u4ed6\u8ba1\u5212\u7814\u7a76\u201c\u6743\u529b\u7684\u6765\u6e90\u201d(\u4e3a\u4ec0\u4e48\u6bcf\u4e2a\u4eba\u90fd\u60f3\u8981\uff1f)\u3002\u5728\u4e00\u4e2a\u751f\u6001\u793e\u4f1a\u7cfb\u7edf\u4e2d\uff0c\u5b83\u5c06\u5305\u62ec\u58f0\u8a89\u3001\u4fe1\u4efb\u6216\u656c\u754f\u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u5185\u5728\u7684\u6218\u7565\u4e0a\u4e0d\u540c\u7684\u6b3a\u9a97\u7b56\u7565\u3002\u201c\u3002\n\u7136\u800c\uff0c\u7231\u6cfc\u65af\u5766\u57282006\u5e74\u79cb\u5929\u4e0d\u5f97\u4e0d\u9000\u51fa\u5956\u5b66\u91d1\uff0c\u5f53\u65f6\u4ed6\u9762\u4e34\u4f5b\u7f57\u91cc\u8fbe\u5dde\u975e\u6cd5\u4e0e\u672a\u6210\u5e74\u4eba\u53d1\u751f\u6027\u884c\u4e3a\u7684\u6307\u63a7\u3002\n\u79d1\u65af\u6797\u5468\u4e94\u6ca1\u6709\u56de\u590d\u8bb0\u8005\u7684\u7f6e\u8bc4\u8bf7\u6c42\uff0cb", "note_en": "Jeffrey Epstein\u2019s millions earned him special treatment at Harvard: He had a personal office among university researchers, a dedicated phone line, an unusual visiting fellowship position, and the backing of several high-level faculty who urged administrators to take the financier\u2019s money despite his record as a registered sex offender.\n In a report released on Friday, Harvard outlined these extensive ties with the notorious Epstein, detailing a relationship that spanned more than 25 years.\n Epstein died by an apparent suicide last summer in a Manhattan jail where he was being held on charges of sex trafficking of minors, but his close relationships and financial support of scientists and academics continue to rock higher-education institutions such as Harvard and MIT.\n According to a months-long investigation by Harvard\u2019s general counsel and an outside law firm, the university received $9.2 million from Epstein between 1998 and 2007. After Epstein\u2019s 2008 sex conviction, Harvard\u2019s then-president Drew Gilpin Faust barred any more donations from the financier. Still, Faust\u2019s decision wasn\u2019t clear to some faculty and fund-raisers within Harvard who continued to lobby administrators over the years to take money from Epstein.\n Individual professors also continued their relationships with Epstein after the conviction, meeting with him, traveling to his homes, and in some cases benefiting from the financier\u2019s connections to other wealthy donors who could support academic research.\n In a message to the community, Harvard president Lawrence Bacow said that the university will review gaps in its controversial gifts policies.\n \u201cThe report issued today describes principled decision-making but also reveals institutional and individual shortcomings that must be addressed \u2014 not only for the sake of the University but also in recognition of the courageous individuals who sought to bring Epstein to justice,\u201d Bacow said in a message to the Harvard community.\n On Friday, Harvard also announced that it had placed Martin Nowak, a biology and math professor and director of Harvard\u2019s Program for Evolutionary Dynamics, on paid administrative leave over his ties to Epstein and potential violations of the university\u2019s security and grant funding policies.\n   The bulk of Epstein\u2019s Harvard funding, $6.5 million in 2003, went toward establishing Nowak\u2019s program. Over the years, Epstein was a frequent presence at the program\u2019s offices in Harvard Square, according to the report.\n In the program\u2019s building, space was scarce, but Office 610 was known as \u201cJeffrey\u2019s Office\u201d and Epstein decorated it with his own rug and photographs. For a time, Epstein even had his own Harvard phone line, according to the report.\n He visited there more than 40 times after he was released from jail in 2010 up until 2018, routinely with young women who acted as his assistants. Despite no official connection with Harvard, Epstein was given key cards to enter the building and office.\n Nowak allowed Epstein to use the group\u2019s offices to host dinners and meet with Harvard faculty, area academics, and political figures when he was in town, according to the report.\n Epstein\u2019s visits stopped only after researchers in Nowak\u2019s group complained about them.\n In 2013, as more damaging allegations against Epstein appeared in the media, he sought to burnish his reputation as a scientific benefactor with philanthropic ties to elite institutions. Nowak allowed Epstein to link his foundations to the professor \u2019s Harvard website. Nowak also created a webpage on his Harvard site dedicated to Epstein \u2019s contributions to the research program. The practice only ended when sexual assault survivor advocates contacted Faust and Nowak \u2019s group in late 2014.  ...\n  Nowak and Harvard Medical School professor George Church also benefited from Epstein\u2019s connections to other wealthy donors, receiving millions of dollars in funding between 2010 and 2015 after Epstein made introductions, according to the report.\n Harvard\u2019s report also found that in applying for a foundation grant, Nowak falsely stated that an Epstein nonprofit had given his group money.\n The report also questioned the decision by Stephen Kosslyn, then chairman of the psychology department, to award Epstein a visiting fellow position in 2005. Kosslyn, a professor emeritus at Harvard, vouched for Epstein despite the financier\u2019s lack of a bachelor\u2019s degree and qualifications to conduct some of the research required of the position.\n In his application for a second year as a visiting fellow, Epstein wrote Harvard that he planned to study the \u201cderivation of \u2018power\u2019 (Why does everybody want it?) in an ecological social system that would include variables for reputation, trust or awe, and the inherent strategically diverse tactics of deception.\u201d\n Epstein, however, had to withdraw from the fellowship in the fall of 2006 when he faced Florida charges of unlawful sex with minors.\n Kosslyn did not respond to a request for comment Friday, but told Harvard\u2019s investigators that Epstein \u201cwas barely ever around&#34; during his fellowship, according to the report.\n The 27-page report makes just a glancing mention of the more informal ties that Epstein cultivated with Harvard \u2019s top academics. In 2008, Harvard Law School professor emeritus Alan Dershowitz helped Epstein secure an advantageous plea deal with Florida federal prosecutors related to the sexual abuse charges. One of Epstein \u2019s accusers has alleged that Dershowitz had sex with her when she was under-aged. Dershowitz has denied those allegations and filed a defamation lawsuit against  ...\n  A 2003 article in the Harvard student newspaper also noted that then-university president Larry Summers was well acquainted with Epstein.\n A footnote in Friday\u2019s Harvard report noted, \u201cA number of the Harvard faculty members we interviewed also acknowledged that they visited Epstein at his homes in New York, Florida, New Mexico, or the Virgin Islands, visited him in jail or on work release, or traveled on one of his planes. Faculty members told us that they undertook these off-campus activities primarily in their personal capacities rather than as representatives of Harvard.\u201d\n The report said these additional meetings with Epstein did not seem to violate Harvard\u2019s rules or policies.\n Claudine Gay, Harvard\u2019s dean of the faculty of arts and sciences, said officials will review Nowak\u2019s conduct.\n \u201cWe are reminded on a near daily basis what a privilege it is to be a member of this academic community,\u201d Gay said in her message to Harvard\u2019s students and faculty. \u201cWith that privilege comes a responsibility to hold one another accountable and to make sure, as an institution, we align our practices with the highest ethical standards.\u201d\n  Harvard\u2019s review of its Epstein\u2019s ties comes four months after  MIT released its investigation of the financier\u2019s ties to that institution.\n MIT found that Epstein made at least nine visits to its campus and gave the university $850,000, and that top administrators, including members of the university president\u2019s senior team, and some faculty members showed \u201csignificant errors in judgement\u201d in agreeing to take money from Epstein.\n At MIT, former Media Lab director Joi Ito, who courted Epstein\u2019s money, resigned after the ties became public last fall. The university\u2019s mechanical engineering professor Seth Lloyd, who also sought and received Epstein funding, was placed on paid administrative leave while his department reviewed disciplinary procedures.\n The report cleared MIT president L. Rafael Reif of any wrongdoing and said he had no involvement in approving the gifts. Still, the Epstein episode roiled that campus and left many faculty members unsatisfied with Reif\u2019s leadership.", "posttime": "2020-05-02 18:01:27", "tags": "\u5927\u5b66,\u54c8\u4f5b\u5927\u5b66,epstein,\u7231\u6cfc\u65af\u5766", "title": "\u65b0\u62a5\u544a\u663e\u793a\uff0c\u6770\u5f17\u91cc\u00b7\u7231\u6cfc\u65af\u5766\u4e0e\u54c8\u4f5b\u5927\u5b66\u7684\u8054\u7cfb\u5e7f\u6cdb", "title_en": "Jeffrey Epstein\u2019s Harvard ties were extensive, new report reveals", "transed": 0, "url": "https://www.bostonglobe.com/2020/05/01/metro/jeffrey-epsteins-harvard-ties-were-extensive-new-report-reveals/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5927\u5b66", "\u54c8\u4f5b\u5927\u5b66", "epstein", "\u7231\u6cfc\u65af\u5766"]}, {"category": "", "categoryclass": "", "imagename": "94f4f960c1b1740ecde8e1477c8d23e6.png", "infoid": 1000244, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5df2\u7ecf\u5206\u4eab\u4e86\u5f88\u591a\u5173\u4e8e\u6211\u4eec\u6709\u591a\u559c\u6b22Quic(\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u6784\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u79f0\u4e3aQuicly\u7684\u5b9e\u73b0)\u3002\u5b83\u627f\u8bfa\u51cf\u5c11\u5ef6\u8fdf\u3001\u63d0\u9ad8\u541e\u5410\u91cf\u3001\u6062\u590d\u5ba2\u6237\u7aef\u79fb\u52a8\u6027\uff0c\u5e76\u63d0\u9ad8\u9690\u79c1\u548c\u5b89\u5168\u6027\u3002\u4ee4\u4eba\u5174\u594b\u7684\u662f\uff0cIETF\u7684Quic\u5de5\u4f5c\u7ec4\u73b0\u5728\u6b63\u51c6\u5907\u5b8c\u6210Quic\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\uff0c\u5e76\u4e3a\u5728\u4e92\u8054\u7f51\u4e0a\u90e8\u7f72\u505a\u597d\u51c6\u5907\u3002\u867d\u7136\u8bb8\u591a\u6784\u5efa\u548c\u8ba1\u5212\u4f7f\u7528\u5b83\u7684\u4eba\u5458\u548c\u56e2\u961f\u90fd\u6e34\u671b\u770b\u5230\u5e7f\u6cdb\u7684\u90e8\u7f72\uff0c\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\u4e00\u76f4\u4ee4\u4eba\u62c5\u5fe7\u2026\u2026\u3002\n\u6211\u4eec\u8fd0\u884c\u6d4b\u8bd5\u8bd5\u56fe\u627e\u5230\u4e00\u4e9b\u7b54\u6848\uff0c\u8fd9\u91cc\u662f\u9ad8\u7ea7\u7b54\u6848\uff1a\u662f\u7684\uff0cQuic\u7684\u8ba1\u7b97\u6548\u7387\u53ef\u4ee5\u548cTCP\u4e00\u6837\u9ad8\uff01\n\u5728\u9999\u69df\u7684\u74f6\u5b50\u51fa\u6765\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u627f\u8ba4\u4e00\u4e2a\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\uff1a\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u8bbe\u7f6e\u548c\u57fa\u51c6\uff0c\u6211\u4eec\u9700\u8981\u7528\u66f4\u73b0\u5b9e\u548c\u66f4\u5177\u4ee3\u8868\u6027\u7684\u786c\u4ef6\u548c\u6d41\u91cf\u573a\u666f\u8fdb\u884c\u66f4\u591a\u7684\u6d4b\u8bd5\u3002\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u4e3aTCP\u6216QuIC\u542f\u7528\u4efb\u4f55\u786c\u4ef6\u5378\u8f7d\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u4f7f\u7528\u4e00\u4e2a\u5e26\u6709\u5408\u6210\u6d41\u91cf\u7684\u7b80\u5355\u573a\u666f\u6765\u6d88\u9664\u4e00\u4e9b\u66f4\u660e\u663e\u7684\u8ba1\u7b97\u74f6\u9888\uff0c\u5e76\u6df1\u5165\u4e86\u89e3\u5982\u4f55\u964d\u4f4eQuic\u7684\u6210\u672c\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u5373\u4f7f\u5728\u6211\u4eec\u7684\u7b80\u5355\u573a\u666f\u4e2d\uff0cQuic\u4e5f\u505a\u5f97\u548cTCP\u4e00\u6837\u597d\u3002\n\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u7ec3\u4e60\u76f8\u5f53\u4e8e\u8ba9\u6211\u4eec\u7684\u6c7d\u8f66\u5728\u8d5b\u9053\u4e0a\u4e0e\u4e00\u8f86\u6cd5\u62c9\u5229(Ferrari)\u8fdb\u884c\u826f\u597d\u7684\u6bd4\u8d5b\u3002\u8d5b\u9053\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4eba\u5de5\u7684\u73af\u5883\uff0c\u5728\u4e0a\u9762\u9a7e\u9a76\u6211\u4eec\u7684\u8f66\u7684\u4f53\u9a8c\u5e76\u4e0d\u80fd\u4ee3\u8868\u4f60\u6bcf\u5929\u7684\u4f53\u9a8c(\u9664\u975e\u4f60\u662f\u4e00\u540d\u8d5b\u8f66\u624b)\u3002\u7136\u800c\uff0c\u89e3\u51b3\u5728\u90a3\u6761\u8d5b\u9053\u4e0a\u5f88\u597d\u5730\u6bd4\u8d5b\u7684\u95ee\u9898\u6709\u52a9\u4e8e\u6211\u4eec\u53d1\u73b0\u74f6\u9888\u3002\u8fd9\u91cc\u91cd\u8981\u7684\u548c\u53ef\u8f6c\u8ba9\u7684\u4e1c\u897f\u662f\u6211\u4eec\u5c06\u91c7\u53d6\u7684\u63aa\u65bd\uff0c\u4ee5\u6d88\u9664.\u3002\n\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\uff0cTCP\u4e00\u76f4\u662fWeb\u7684\u4e3b\u529b\uff0c\u591a\u5e74\u6765\uff0c\u4eba\u4eec\u5728\u4f18\u5316\u5176\u5b9e\u73b0\u65b9\u9762\u4ed8\u51fa\u4e86\u5927\u91cf\u52aa\u529b\uff0c\u4ee5\u4f7f\u5176\u5728\u8ba1\u7b97\u4e0a\u66f4\u6709\u6548\u7387\u3002\u7136\u800c\uff0cQuic\u4ecd\u7136\u662f\u4e00\u4e2a\u65b0\u5174\u7684\u534f\u8bae\uff1b\u5b83\u8fd8\u6ca1\u6709\u88ab\u5e7f\u6cdb\u90e8\u7f72\u548c\u8c03\u6574\uff0c\u4ee5\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\u4e0e\u53e4\u8001\u7684TCP\u76f8\u6bd4\uff0c\u8fd9\u6837\u7684\u65b0\u534f\u8bae\u4f1a\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\u91cd\u8981\u7684\u662f\uff0c\u5728\u4e0d\u4e45\u7684\u5c06\u6765\uff0cQuic\u80fd\u50cfTCP\u4e00\u6837\u9ad8\u6548\u5417\uff1f\n\u786e\u8ba4\u5904\u7406\uff1a\u5178\u578bTCP\u8fde\u63a5\u4e2d\u7684\u5f88\u5927\u4e00\u90e8\u5206\u6570\u636e\u5305\u4ec5\u643a\u5e26\u786e\u8ba4\u3002TCP\u786e\u8ba4\u5728\u5185\u6838\u4e2d\u5904\u7406\uff0c\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u90fd\u662f\u5982\u6b64\u3002Quic\u5728\u7528\u6237\u7a7a\u95f4\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u4ea7\u751f\u66f4\u591a\u8de8\u8d8a\u7528\u6237\u5185\u6838\u8fb9\u754c\u7684\u6570\u636e\u526f\u672c\u548c\u66f4\u591a\u4e0a\u4e0b\u6587\u5207\u6362\u3002\u6b64\u5916\uff0cTCP\u786e\u8ba4\u91c7\u7528\u660e\u6587\uff0c\u800cQuic\u786e\u8ba4\u662f\u52a0\u5bc6\u7684\uff0c\u8fd9\u589e\u52a0\u4e86\u4ee5Quic\u53d1\u9001\u548c\u63a5\u6536\u786e\u8ba4\u7684\u6210\u672c\u3002\n\u6bcf\u5305\u53d1\u9001\u5668\u5f00\u9500\uff1a\u5185\u6838\u77e5\u9053TCP\u8fde\u63a5\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bb0\u4f4f\u548c\u91cd\u7528\u8fde\u63a5\u4e2d\u53d1\u9001\u7684\u6240\u6709\u5305\u9884\u8ba1\u4fdd\u6301\u4e0d\u53d8\u7684\u72b6\u6001\u3002\u4f8b\u5982\uff0c\u5185\u6838\u901a\u5e38\u53ea\u9700\u8981\u5728\u8fde\u63a5\u5f00\u59cb\u65f6\u67e5\u627e\u76ee\u7684\u5730\u5740\u7684\u8def\u7531\u6216\u5e94\u7528\u4e00\u6b21\u9632\u706b\u5899\u89c4\u5219\u3002\u7531\u4e8e\u5185\u6838\u6ca1\u6709Quic\u8fde\u63a5\u7684\u8fde\u63a5\u72b6\u6001\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5185\u6838\u64cd\u4f5c\u5c06\u5728\u6bcf\u4e2a\u4f20\u51fa\u7684Quic\u6570\u636e\u5305\u4e0a\u6267\u884c\u3002\n\u7531\u4e8eQuic\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u8fd0\u884c\uff0c\u56e0\u6b64\u4f7f\u7528Quic\u6bd4\u4f7f\u7528TCP\u7684\u6210\u672c\u66f4\u9ad8\u3002\u8fd9\u662f\u56e0\u4e3aQuic\u53d1\u9001\u6216\u63a5\u6536\u7684\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u8de8\u8d8a\u4e86\u7528\u6237\u5185\u6838\u8fb9\u754c\uff0c\u8fd9\u79f0\u4e3a\u4e0a\u4e0b\u6587\u5207\u6362\u3002\n\u4e3a\u4e86\u5f00\u59cb\u56de\u7b54\u6211\u4eec\u524d\u9762\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5f00\u59cb\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002\u6211\u4eec\u4f7f\u7528Quicly\u4f5c\u4e3aQuic\u670d\u52a1\u5668\u548cQuic\u5ba2\u6237\u7aef\u3002Quic\u6570\u636e\u5305\u603b\u662f\u4f7f\u7528TLS1.3\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u4e14\u51fa\u4e8e\u6b64\u76ee\u7684\uff0cQuicly\u4f7f\u7528\u4e86H2O\u7684TLS\u5e93picotls\u3002\u6211\u4eec\u7684\u53c2\u8003TCP\u8bbe\u7f6e\u5c06\u4f7f\u7528\u4f7f\u7528\u539f\u751fLinux TCP\u7684picotl\uff0c\u4ee5\u6700\u5c0f\u5316\u53c2\u8003TCP\u8bbe\u7f6e\u548cQuic\u8bbe\u7f6e\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\n\u8ba1\u7b97\u6548\u7387\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u4e4b\u4e00\u6765\u6d4b\u91cf\uff1a\u901a\u8fc7\u6d4b\u91cf\u4f7f\u7f51\u7edc\u9971\u548c\u6240\u9700\u7684\u8ba1\u7b97\u8d44\u6e90\u91cf\uff0c\u6216\u8005\u901a\u8fc7\u6d4b\u91cf\u6240\u6709\u53ef\u7528\u8ba1\u7b97\u80fd\u529b\u53ef\u6301\u7eed\u7684\u541e\u5410\u91cf\u3002\u4f7f\u7f51\u7edc\u9971\u548c\u4f1a\u56e0\u6570\u636e\u5305\u4e22\u5931\u4ee5\u53ca\u968f\u540e\u7684\u4e22\u5931\u6062\u590d\u548c\u62e5\u585e\u63a7\u5236\u5668\u64cd\u4f5c\u800c\u5f15\u5165\u6613\u53d8\u6027\u3002\u867d\u7136\u5728\u6d4b\u91cf\u6027\u80fd\u65f6\u5305\u62ec\u8fd9\u4e9b\u5185\u5bb9\u5f88\u91cd\u8981\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u907f\u514d\u8fd9\u79cd\u53ef\u53d8\u6027\uff0c\u56e0\u6b64\u9009\u62e9\u4e86.\u3002\n\u53d1\u9001\u8005\u7684\u8ba1\u7b97\u6548\u7387\u5f88\u91cd\u8981\uff0c\u8fd8\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u9996\u5148\uff0c\u5728\u4f20\u8f93\u534f\u8bae\u4e2d\uff0c\u53d1\u9001\u8005\u5f80\u5f80\u9996\u5f53\u5176\u51b2\u5730\u627f\u62c5\u8ba1\u7b97\u6210\u672c\u3002\u8fd9\u662f\u56e0\u4e3a\u53d1\u9001\u5668\u8d1f\u8d23\u5927\u591a\u6570\u8ba1\u7b97\u6602\u8d35\u7684\u4f20\u8f93\u529f\u80fd\uff0c\u4f8b\u5982\u8fd0\u884c\u5b9a\u65f6\u5668\u4ee5\u68c0\u6d4b\u4e22\u5f03\u5728\u7f51\u7edc\u4e2d\u7684\u5206\u7ec4\u5e76\u91cd\u65b0\u53d1\u9001\u5b83\u4eec\uff0c\u76d1\u89c6\u7f51\u7edc\u7684\u5f80\u8fd4\u65f6\u95f4\uff0c\u4ee5\u53ca\u8fd0\u884c\u5e26\u5bbd\u4f30\u8ba1\u5668\u4ee5\u4f7f\u5176\u4e0d\u4f1a\u62e5\u585e\u7f51\u7edc\u3002\u7b2c\u4e8c\uff0c\u670d\u52a1\u5668\u662f.\u3002\n\u5728\u6df1\u5165\u7814\u7a76\u7ed3\u679c\u4e4b\u524d\uff0c\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6211\u4eec\u7684\u5b9e\u9a8c\u8bbe\u7f6e\u3002\u6211\u4eec\u7684\u53d1\u9001\u8005\u5728Intel Core m3-6Y30\u4e0a\u4f7f\u7528Ubuntu19.10(Linux\u5185\u6838\u7248\u672c5.3.0)\uff0c\u9650\u5236\u4e3a\u5355\u6838\u548c\u5355\u7ebf\u7a0b\u3002\u53d1\u4ef6\u4eba\u5df2\u4e09\u6b21\u8fde\u63a5\u5230\u672c\u5730\u7f51\u7edc", "note_en": "We\u2019ve shared a lot about how much   we love QUIC (and why we\u2019re building our own implementation called   quicly). It promises   latency reduction, improved throughput, resilience to client mobility, and increased privacy and security. Excitingly, the   QUIC working groupat the IETF is now on the cusp of getting the first version of QUIC wrapped up and ready for internet-wide deployment. While many of the people and teams building and planning to use it are eager to see wide deployment, one concern keeps  ...\n We ran the tests to try and find some answers, and here\u2019s the high level answer: Yes, QUIC can be as computationally efficient as TCP!\n   Before the bottles of champagne come out, we\u2019ll admit what will soon become obvious: we have a simple setting and benchmark, and that we need to do more testing with more realistic and representative hardware and traffic scenarios. Importantly, we did not have any hardware offload enabled for TCP or QUIC. Our goal was to use a simple scenario with synthetic traffic to eliminate some of the more obvious computational bottlenecks and gain insights into how we might reduce QUIC\u2019s costs.\n That said, we were surprised to find that QUIC did as well as TCP in even our simple scenario.\n You could think of the exercise in this post as equivalent to making our car race well against a Ferrari on a race track. A race track is a highly artificial environment and the experience of driving our car on it is not representative of what you will experience daily (unless you are a race car driver). Working through the problem of racing well on that track however helps us to uncover bottlenecks. And  the important and transferable things here are the measures we would take to remove the  ...\n  TCP has been the workhorse of the web for a long time, and a lot of effort has gone into optimizing its implementations over the years to make it more computationally efficient. QUIC however,\u00a0 is still a nascent protocol; it has yet to be widely deployed and tuned for computational efficiency. How would such a new protocol compare against the venerable TCP? Importantly,  can QUIC be as efficient as TCP in the near future?\n  Acknowledgement processing: A large fraction of packets in a typical TCP connection carry only acknowledgements. TCP acknowledgements are processed within the kernel, both at the sender and the receiver. QUIC does these in user space, resulting in more data copies across the user-kernel boundary and more context switches. Additionally, TCP acknowledgements are in plaintext, while QUIC acknowledgements are encrypted, increasing the cost of sending and receiving acknowledgements in QUIC.\n Per-packet sender overhead: The kernel knows about TCP connections, and can remember and reuse state that is expected to remain unchanged for all packets sent in a connection. For instance, the kernel needs to typically only look up the route for the destination address or apply firewall rules once at the start of the connection. Since the kernel has no connection state for QUIC connections, these kernel operations are performed on every outgoing QUIC packet.\n Since QUIC runs in user space, these costs are higher with QUIC than with TCP. This is because every packet that is either sent or received by QUIC crosses the user-kernel boundary, which is known as a   context switch.\n  To start answering the question we laid out earlier, we set out to do a simple benchmark. We used   quicly  as the QUIC server and as the QUIC client. QUIC packets are always encrypted using TLS 1.3, and quicly  uses   picotls,   H2O\u2019s TLS library, for this purpose. Our reference TCP setup would use picotls  using native Linux TCP to minimize the differences between the reference TCP setup and the QUIC setup.\n Computational efficiency can be measured in one of two ways: by measuring the amount of computational resources required to saturate a network, or by measuring the throughput sustainable with all available computational power. Saturating the network introduces variability due to packet losses and due to subsequent loss recovery and congestion controller actions. While it is important to include these while measuring performance, we wanted to avoid this variability, and therefore chose  ...\n The sender&#39;s computational efficiency is important for two other reasons. First, senders tend to bear the brunt of computational cost in transport protocols. This happens because the sender is responsible for most computationally expensive transport functions, such as running timers to detect packets dropped in the network and retransmitting them, monitoring the network \u2019s round-trip time, and running bandwidth estimators so that it doesn \u2019t congest the network. Second, servers are  ...\n A brief bit about our experimental setup before diving into results. Our sender used Ubuntu 19.10 (linux kernel version 5.3.0) on an Intel Core m3-6Y30, capped to single core and single thread. The sender was connected to the local network through a USB Gigabit-Ethernet adapter that uses the ASIX AX88179 controller. Checksum offloading was enabled for both TCP and UDP. Other hardware optimizations for TCP, such as   TCP Segmentation Offload (TSO), were not used; we plan to use these in  ...\n We are using fairly low-end hardware for our sender here. And that\u2019s just fine \u2013 as noted earlier, in this first step, we care about the measures that we would take to remove the bottlenecks that appear and about their transferability to other environments. In our future steps, we will be looking at server-grade hardware.\n As the first reference benchmark, we measured the maximum achievable raw unencrypted TCP throughput using   iperf. This throughput was 708Mbps.\n As the second reference benchmark, we measured sustained throughput achievable by TLS 1.3 over TCP, using picotls  with AES128-GCM as the cipher. This throughput was 466Mbps, roughly 66% of what we saw with unencrypted TCP. This performance reduction is due to the cost of cryptography, the use of a non-blocking socket, and the cost of interrupting user-space execution to handle incoming acknowledgements. Importantly however, the overheads don&#39;t really impact the question we are  ...\n Finally, we measured sustained throughput with off-the-shelf quicly. This throughput was 196Mbps. QUIC was able to achieve approximately 40% of TLS 1.3 over TCP. QUIC suffered from the costs that we expected, and the initial number was sobering.\n   We wanted to not only measure the cost of running QUIC, we also wanted to see what we could do to lower this cost. And we did not want to limit ourselves to our implementation; we would consider changes or tweaks to the protocol as well. We did this in three steps, and we\u2019ll walk through each one next.\n  Like TCP, the   QUIC specification recommends that a receiver send an acknowledgement for every two packets that it receives. While this is a reasonable default, receiving and processing acknowledgements is a cause of computational cost for a data sender.\u00a0 A receiver could simply send fewer acknowledgements, but doing so can reduce the connection\u2019s throughput, especially early in the connection.\n To understand this, imagine that each acknowledgement received by the sender allows it to increase its rate. The sooner it receives an acknowledgement, the sooner it increases its sending rate. If that rate is low, there are fewer packets going to the receiver per round trip and therefore fewer acknowledgements coming back from it. Reducing the number of acknowledgements for such a connection can measurably reduce the sender\u2019s sending rate and overall performance.\n For a connection that has high throughput, reducing the number of acknowledgements could still mean that enough of them are coming back to not measurably impact the sender\u2019s rate. (This is a bit of a simplification, and the other considerations are explained in a bit more detail   here). In our test setup, we can reduce the acknowledgement frequency without any impact on the sender\u2019s throughput.\n We reduced the acknowledgement frequency from once every two packets to once every ten packets, and as a result, quicly  was able to sustain a throughput of 240Mbps. Doing this benefits the network by reducing the number of acknowledgement packets on the network, and this experiment proves that it also benefits the sender by reducing computational overhead. This result convinced us to implement the   QUIC Delayed ACK extension proposal \u2013\u00a0more on this later.\n    Following the advice of Willem de Bruijn and Eric Dumazet in &#34;  Optimizing UDP for content delivery: GSO, pacing and zerocopy&#34;, we next turned to see if UDP Generic Segmentation Offload might help with reducing the overhead caused by single packet writes and context switches per packet.   Generic Segmentation Offload (GSO)is a Linux feature that allows user-space applications to provide a series of packets as a single unit to the kernel. This unit is passed through the  ...\n By coalescing at most ten UDP packets into one object and sending them using GSO, QUIC\u2019s throughput increased from 240Mbps to 348Mbps \u2013 a 45% increase! To see if coalescing even more would improve performance, we tried coalescing up to 20 UDP packets with GSO. This led to an additional 45% increase in throughput, and QUIC was now zooming along at 431Mbps.\n   This was huge. The per-packet cost of QUIC was clearly a significant bottleneck, and addressing that with GSO helped enormously. We needed to choose a GSO size, which we will discuss later. We then turned our eyes to another parameter that does not get as much attention as it should: packet size.\n  The QUIC specification recommends a conservative default minimum QUIC packet size of 1200 bytes, and quicly  used 1280 bytes. Implementations are allowed to increase packet size if they have reason to believe that the path might support larger packets. Given that the path was able to support 1472-byte QUIC packets, and that TCP was using 1460-byte packets on this path, it made sense for QUIC to use larger packets as well. Increasing this maximum packet size reduces computational  ...\n So, we changed the QUIC packet size from 1280 bytes to 1460 bytes, for parity with the TCP payload size. With this change, quicly  was able to sustain a throughput of 466Mbps \u2013 an 8% increase in throughput.\n     This experiment showed a clear path forward for improving quicly\u2019s efficiency: reducing acknowledgement frequency, coalescing packets with GSO, and using as large a packet size as possible. We now turn to generalizing and adopting these optimizations in a way that they would work well across various environments, minimizing the risk of side-effects.\n  Reducing the acknowledgement frequency to a fixed rate of once per ten packets has a couple of issues. First, as noted above, it can measurably hurt\u00a0 throughput when the connection\u2019s throughput is low to begin with. Second, the client in these experiments is quicly, whereas when running in production, the client will be a browser, which we do not control.\n The answer to both of these problems is the   Delayed Ack extension for QUIC, which enables a sender to dynamically control the acknowledgement frequency of the receiver, based on its current sending rate.\n Since running this experiment, we implemented the delayed ACK extension, with the sender controlling acknowledgement frequency to be once every eighth of its  congestion window, which is approximately once every eighth of its round-trip time. In our experimental setup above, this reduces acknowledgements to once every sixty packets, which is a significantly larger reduction than in our experiment.\n  The GSO experiment showed that coalescing more packets made QUIC more efficient. There\u2019s a cost to GSO however. Coalescing with GSO means that the sender bursts out all these packets into the network, leading to increased short-term pressure on the network\u2019s buffers and an increased probability of packet loss.\n So, with this tradeoff, how many packets should quicly  coalesce? The specified   acceptable burst size for a QUIC sender is ten, which seems like a pretty good recommendation to use here.  quicly has now implemented an option to send GSO bursts of ten packets.\n We note that currently a sender\u2019s   kernel cannot pace these packets out \u2013 that is, send the constituent packets of a GSO burst out at a rate that keeps the network from having to absorb the burst. We would be interested in using such a facility if it were to be implemented in the Linux kernel.\n  The larger the packet size, the better the performance. However, larger packets suffer the risk of getting dropped on some network paths. We could implement mechanisms such as   Path MTU Discovery to detect the largest packet size that could be used on a connection, but this is practically only useful for long-lived connections. For most connections, and during the beginning of all connections, a sender needs to determine a good packet size.\n Instead of using a fixed packet size, the quicly  server now determines its own packet size based on the size of the first packets it receives from the client. Since these packets successfully made it through the network to the server, it is reasonable to expect that the packets of the same size might have a good chance of making it back through the network to the client.\n  With these changes in place, quicly now achieves 464 Mbps (1% faster than TLS 1.3 over TCP) when the first QUIC packets sent by the client are 1460 bytes, and 425Mbps (only 8% slower than TLS 1.3 over TCP) when the first QUIC packets sent by the client are 1350 bytes \u2013 the default packet size used by Chrome.\n  The workload and environment in this experiment represent only one point in the vast space of workloads and environments. Our goal was to see if we could get QUIC to meet TCP\u2019s throughput in this very specific microbenchmark. With further testing and experiments, we will explore and improve QUIC performance in other representative settings and scenarios.\n Significantly however, this experiment shows us that using system optimizations and protocol mechanisms judiciously, QUIC has a fair chance of being as computationally efficient as TCP.\n As we continue work on tuning  our implementation\u2019s performance with further testing and deployment, we will continue to report our findings. Stay tuned!", "posttime": "2020-05-02 18:01:22", "tags": "\u80fd\u5426,match,quic", "title": "QUIC\u80fd\u5426\u4e0eTCP\u7684\u8ba1\u7b97\u6548\u7387\u76f8\u5339\u654c\uff1f", "title_en": "Can QUIC match TCP\u2019s computational efficiency?", "transed": 0, "url": "https://www.fastly.com/blog/measuring-quic-vs-tcp-computational-efficiency", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u80fd\u5426", "match", "quic"]}]