[{"category": "", "categoryclass": "", "imagename": "44a50b51952e3a21cef21db71ad473cc.png", "infoid": 1001903, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\nUUID v1/v2\u5728\u8bb8\u591a\u73af\u5883\u4e2d\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u8bbf\u95ee\u552f\u4e00\u3001\u7a33\u5b9a\u7684MAC\u5730\u5740\u3002\nUUID v3/v5\u9700\u8981\u552f\u4e00\u79cd\u5b50\u5e76\u751f\u6210\u968f\u673a\u5206\u5e03\u7684ID\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8bb8\u591a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u788e\u7247\u3002\nUUID v4\u9664\u4e86\u968f\u673a\u6027\u4e4b\u5916\u6ca1\u6709\u63d0\u4f9b\u5176\u4ed6\u4fe1\u606f\uff0c\u800c\u968f\u673a\u6027\u53ef\u80fd\u5bfc\u81f4\u8bb8\u591a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u788e\u7247\u3002\n\u5fc5\u987b\u9996\u5148\u5bf9\u6700\u5de6\u8fb9\u7684\u5b57\u7b26\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u540e\u5bf9\u6700\u53f3\u8fb9\u7684\u5b57\u7b26\u8fdb\u884c\u6392\u5e8f(\u8bcd\u6c47\u987a\u5e8f)\u3002\u5fc5\u987b\u4f7f\u7528\u9ed8\u8ba4\u7684ASCII\u5b57\u7b26\u96c6\u3002\u5728\u540c\u4e00\u6beb\u79d2\u5185\uff0c\u4e0d\u4fdd\u8bc1\u6392\u5e8f\u987a\u5e8f\u3002\n\u514b\u7f57\u514b\u798f\u5fb7\u7684Base32\u5982\u56fe\u6240\u793a\u4f7f\u7528\u3002\u6b64\u5b57\u6bcd\u8868\u4e0d\u5305\u62ec\u5b57\u6bcdI\u3001L\u3001O\u548cU\uff0c\u4ee5\u907f\u514d\u6df7\u6dc6\u548c\u6ee5\u7528\u3002\n\u5f53\u5728\u540c\u4e00\u6beb\u79d2\u5185\u751f\u6210ULID\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u5173\u4e8e\u6392\u5e8f\u987a\u5e8f\u7684\u4fdd\u8bc1\u3002\u5373\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u76f8\u540c\u7684\u6beb\u79d2\uff0c\u5219\u968f\u673a\u5206\u91cf\u5728\u6700\u4f4e\u6709\u6548\u4f4d\u4f4d\u7f6e\u5904\u9012\u589e1\u4f4d(\u5e26\u8fdb\u4f4d)\u3002\u4f8b\u5982\uff1a\nimport{monotonicFactory}from&#39\uff1bulid&#39\uff1bconst ulid=monotonicFactory()//\u5047\u8bbe\u8fd9\u4e9b\u8c03\u7528\u53d1\u751f\u5728\u540c\u4e00\u6beb\u79d2ulid()\u5185//01BX5ZZKBKACTAV9WEVGEMMVRZ ulid()//01BX5ZZKBKACTAV9WEVGEMMVS0\u3002\n\u5982\u679c\u5728\u6781\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u8bbe\u6cd5\u5728\u540c\u4e00\u6beb\u79d2\u5185\u751f\u6210\u8d85\u8fc7280\u4e2aULID\uff0c\u6216\u5bfc\u81f4\u968f\u673a\u7ec4\u4ef6\u6ea2\u51fa\uff0c\u800c\u751f\u6210\u7684ULID\u8f83\u5c11\uff0c\u5219\u751f\u6210\u5c06\u5931\u8d25\u3002\nimport{monotonicFactory}from&#39\uff1bulid&#39\uff1bconst ulid=monotonicFactory()//\u5047\u8bbe\u8fd9\u4e9b\u8c03\u7528\u53d1\u751f\u5728\u540c\u4e00\u6beb\u79d2ulid()\u5185//01BX5ZZKBKACTAV9WEVGEMMVRY ulid()//01BX5ZZKBKACTAV9WEVGEMMVRZ ulid()//\u3002\u3002\u3002ulid()//01BX5ZZKBKZZZZZZZZZZZZX ulid()//01BX5ZZKBKZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZLUID()//\u629b\u51fa\u65b0\u7684\u9519\u8bef()\uff01\n\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c26\u4e2a\u5b57\u7b26\u7684Base32\u7f16\u7801\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b130\u4f4d\u4fe1\u606f\uff0c\u800cULID\u53ea\u80fd\u5305\u542b128\u4f4d\u3002\u56e0\u6b64\uff0c\u5728BASE32\u4e2d\u7f16\u7801\u7684\u6700\u5927\u6709\u6548ULID\u662f7ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\uff0c\u5b83\u5bf9\u5e94\u7684\u7eaa\u5143\u65f6\u95f4\u662f281474976710655\u62162^48-1\u3002\n\u6240\u6709\u5b9e\u73b0\u90fd\u5e94\u8be5\u62d2\u7edd\u5bf9\u5927\u4e8e\u6b64\u503c\u7684ULID\u8fdb\u884c\u89e3\u7801\u6216\u7f16\u7801\u7684\u4efb\u4f55\u5c1d\u8bd5\uff0c\u4ee5\u9632\u6b62\u6ea2\u51fa\u9519\u8bef\u3002\n\u5206\u91cf\u88ab\u7f16\u7801\u4e3a16\u4e2a\u516b\u4f4d\u5b57\u8282\u3002\u6bcf\u4e2a\u5206\u91cf\u90fd\u4ee5\u6700\u9ad8\u6709\u6548\u5b57\u8282\u4f18\u5148(\u7f51\u7edc\u5b57\u8282\u987a\u5e8f)\u8fdb\u884c\u7f16\u7801\u3002\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+|32_BIT_UINT_TIME_HIGH|+-+\u3002-+|16_BIT_UINT_TIME_LOW|16_BIT_UINT_RANDOM|+-+-+\u3002-+|32_BIT_UINT_RANDOM|+-+|32_BIT_UINT_RANDOM|+-+\u3002-+-+-+", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n       UUID v1/v2 is impractical in many environments, as it requires access to a unique, stable MAC address\n UUID v3/v5 requires a unique seed and produces randomly distributed IDs, which can cause fragmentation in many data structures\n UUID v4 provides no other information than randomness which can cause fragmentation in many data structures\n                 The left-most character must be sorted first, and the right-most character sorted last (lexical order). The default ASCII character set must be used. Within the same millisecond, sort order is not guaranteed\n    Crockford&#39;s Base32 is used as shown. This alphabet excludes the letters I, L, O, and U to avoid confusion and abuse.\n   When generating a ULID within the same millisecond, we can provide someguarantees regarding sort order. Namely, if the same millisecond is detected, the  random component is incremented by 1 bit in the least significant bit position (with carrying). For example:\n import  {  monotonicFactory  }  from  &#39;ulid&#39; const  ulid  =  monotonicFactory ( ) // Assume that these calls occur within the same millisecond ulid ( )  // 01BX5ZZKBKACTAV9WEVGEMMVRZ ulid ( )  // 01BX5ZZKBKACTAV9WEVGEMMVS0\n If, in the extremely unlikely event that, you manage to generate more than 2 80 ULIDs within the same millisecond, or cause the random component to overflow with less, the generation will fail.\n import  {  monotonicFactory  }  from  &#39;ulid&#39; const  ulid  =  monotonicFactory ( ) // Assume that these calls occur within the same millisecond ulid ( )  // 01BX5ZZKBKACTAV9WEVGEMMVRY ulid ( )  // 01BX5ZZKBKACTAV9WEVGEMMVRZ ulid ( )  // 01BX5ZZKBKACTAV9WEVGEMMVS0 ulid ( )  // 01BX5ZZKBKACTAV9WEVGEMMVS1 . . . ulid ( )  // 01BX5ZZKBKZZZZZZZZZZZZZZZX ulid ( )  // 01BX5ZZKBKZZZZZZZZZZZZZZZY ulid ( )  // 01BX5ZZKBKZZZZZZZZZZZZZZZZ ulid ( )  // throw new Error()!\n  Technically, a 26-character Base32 encoded string can contain 130 bits of information, whereas a ULID must only contain 128 bits. Therefore, the largest valid ULID encoded in Base32 is  7ZZZZZZZZZZZZZZZZZZZZZZZZZ, which corresponds to an epoch time of  281474976710655 or  2 ^ 48 - 1.\n Any attempt to decode or encode a ULID larger than this should be rejected by all implementations, to prevent overflow bugs.\n  The components are encoded as 16 octets. Each component is encoded with the Most Significant Byte first (network byte order).\n 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| 32_bit_uint_time_high |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| 16_bit_uint_time_low | 16_bit_uint_random |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| 32_bit_uint_random |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| 32_bit_uint_random |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+", "posttime": "2020-05-13 09:00:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6392\u5e8f,unique,ulid", "title": "\u901a\u7528\u552f\u4e00\u8bcd\u5178\u5e8f\u53ef\u6392\u5e8f\u6807\u8bc6\u7b26", "title_en": "Universally Unique Lexicographically Sortable Identifier", "transed": 1, "url": "https://github.com/ulid/spec/blob/master/README.md", "via": "", "real_tags": ["\u6392\u5e8f", "unique", "ulid"]}, {"category": "", "categoryclass": "", "imagename": "19bcc1c3203fa77863f593ab0c47501f.png", "infoid": 1001902, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2020\u5e744\u670830\u65e5\uff0c\u6211\u6709\u673a\u4f1a\u4e3aSysAdminShow Podcast\u4e0eDustin Reybrouck\u4ea4\u8c08\u3002\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u4e86\u4e3a\u4ec0\u4e48\u7cfb\u7edf\u7ba1\u7406\u5458\u9664\u4e86shell\u811a\u672c\u7f16\u5199\u4e4b\u5916\u8fd8\u60f3\u6dfb\u52a0Python\u4f5c\u4e3a\u4e00\u79cd\u5de5\u5177\u3002\u4ed6\u7684\u5927\u591a\u6570\u542c\u4f17\u53ef\u80fd\u90fd\u719f\u6089bash\u6216Powershell\uff0c\u6240\u4ee5\u6211\u5c55\u793a\u4e86\u5982\u4f55\u5728bash\u4e2d\u7f16\u5199\u4e00\u4e9b\u7b80\u5355\u4f46\u53c2\u6570\u5316\u4e14\u6709\u6587\u6863\u8bb0\u5f55\u7684Head\u7248\u672c\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u8f6c\u6362\u4e3aPython3\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u8ba8\u8bba\u7684\u603b\u7ed3\u3002\n\u867d\u7136\u53ef\u4ee5\u7528\u8fd9\u4e9b\u8bed\u8a00\u7f16\u5199\u8bb8\u591a\u6709\u7528\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u8003\u8651\u5230Python\u7a0b\u5e8f\u53ef\u4ee5\u5728\u672c\u673a\u7406\u89e3bash\u7684\u7cfb\u7edf(\u4f8b\u5982\uff0clinux\u6216mac)\u548cpowershell(\u2009-\u2009)\u4e4b\u95f4\u79fb\u690d\uff0c\u6240\u4ee5\u4f5c\u4e3a\u7ec3\u4e60\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2abash\u547d\u4ee4\u7684bash\u5b9e\u73b0\uff0c\u53ef\u80fd\u4f1a\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\uff0c\u5c24\u5176\u662f\u8003\u8651\u5230python\u7a0b\u5e8f\u53ef\u4ee5\u5728\u672c\u5730\u7406\u89e3bash\u7684\u7cfb\u7edf(\u4f8b\u5982\uff0clinux\u6216mac)\u548cpowershell(\u7a97\u53e3)\u4e4b\u95f4\u79fb\u690d\u3002\u4f5c\u4e3a\u7ec3\u4e60\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2abash\u5b9e\u73b0\u7684head\u547d\u4ee4\uff0c\u8fd9\u662f\u4e00\u79cd\u66f4\u597d\u7684\u9009\u62e9\uff0c\u5b83\u53ef\u4ee5\u5728\u672c\u5730\u7406\u89e3bash\u7684\u7cfb\u7edf(\u4f8b\u5982\uff0clinux\u6216mac)\u548cpowershell(\u7a97\u53e3)\u4e4b\u95f4\u8fdb\u884c\u79fb\u690d\u3002\u4f5c\u4e3a\u7ec3\u4e60\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2abash\u5b9e\u73b0\u7684head\u547d\u4ee4\uff0c\n\u8ba9\u6211\u4eec\u9996\u5148\u8bbe\u60f3\u4e00\u4e0b\u5982\u4f55\u7f16\u5199\u6211\u4eec\u81ea\u5df1\u7684Head\u547d\u4ee4\u7684\u5b9e\u73b0\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u7f8e\u56fd\u5baa\u6cd5\u7684\u6587\u672c\uff0c\u6211\u4eec\u9884\u8ba1\u4f1a\u770b\u5230\u7ed9\u5b9a\u6587\u4ef6\u7684\u524d\u51e0\u884c\uff0c\u901a\u5e38\u662f10\u884c\uff1a\n$head Const.txt\u6211\u4eec\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u4eba\u6c11\uff0c\u4e3a\u4e86\u7ec4\u6210\u4e00\u4e2a\u66f4\u5b8c\u7f8e\u7684\u8054\u90a6\uff0c\u5efa\u7acb\u6b63\u4e49\uff0c\u786e\u4fdd\u56fd\u5185\u5b89\u5b81\uff0c\u63d0\u4f9b\u5171\u540c\u9632\u5fa1\uff0c\u4fc3\u8fdb\u516c\u5171\u798f\u5229\uff0c\u5e76\u786e\u4fdd\u81ea\u7531\u5bf9\u6211\u4eec\u81ea\u5df1\u548c\u6211\u4eec\u7684\u540e\u4ee3\u7684\u795d\u798f\uff0c\u9881\u5e03\u5e76\u5236\u5b9a\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u7684\u672c\u5baa\u6cd5\u3002\u7b2c1\u6761\u672c\u5baa\u6cd5\u7b2c1\u6b3e\u6388\u4e88\u7684\u6240\u6709\u7acb\u6cd5\u6743\u5747\u5c5e\u4e8e\u7f8e\u56fd\u56fd\u4f1a\u3002\n\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4f7f\u7528-n\u8fd9\u6837\u7684\u9009\u9879\u4fee\u6539\u8be5\u6570\u5b57\uff1a\n\u6211\u4eec\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u4eba\u6c11\uff0c\u4e3a\u4e86\u7ec4\u6210\u4e00\u4e2a\u66f4\u5b8c\u7f8e\u7684\u8054\u90a6\uff0c\u5efa\u7acb\u6b63\u4e49\uff0c\u786e\u4fdd\u56fd\u5185\u5b89\u5b81\uff0c\u63d0\u4f9b\u5171\u540c\u9632\u5fa1\uff0c\u4fc3\u8fdb\u516c\u5171\u798f\u5229\uff0c\u5e76\u786e\u4fdd\u81ea\u7531\u7684\u795d\u798f\uff0c\u4ee5\u2026\u201c\u3002\n\u547d\u4ee4\u884c\u5de5\u5177\u54cd\u5e94\u6709\u5173\u5982\u4f55\u8c03\u7528\u7a0b\u5e8f\u7684-h\u6216--help\u7528\u6cd5\u8bed\u53e5\u662f\u5f88\u5e38\u89c1\u7684\u3002\u5728head[1]\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u6ca1\u6709\u7ed9\u51fa\u7528\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec\u8bf7\u6c42\u5b83\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u4e0d\u8ba4\u4e3a\u8fd9\u4e9b\u662f\u6709\u6548\u9009\u9879\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u4ecd\u8bbe\u6cd5\u751f\u6210\u7528\u6cd5\uff0c\u8fd9\u603b\u6bd4\u6ca1\u6709\u5f3a\uff1a\n$head-hhead\uff1a\u975e\u6cd5\u9009\u9879--huage\uff1ahead[-n\u884c|-c\u5b57\u8282][\u6587\u4ef6.]\n\u8ba9\u6211\u4eec\u4ecebash\u4e2d\u7684\u4e00\u4e2a\u7248\u672c\u5f00\u59cb\uff0c\u8be5\u7248\u672c\u4ec5\u5904\u7406\u4e00\u4e2a\u6587\u4ef6\uff0c\u53ef\u80fd\u7684\u884c\u6570\u5c06\u9ed8\u8ba4\u4e3a10\u3002\u5982\u679c\u4e0d\u5e26\u53c2\u6570\u8fd0\u884c\uff0c\u5b83\u5c06\u6253\u5370\u4e00\u6761&#34\uff1b\u7528\u6cd5\u8bed\u53e5\uff1a\n\u5c06\u6587\u4ef6\u4f5c\u4e3a\u552f\u4e00\u53c2\u6570\u8fd0\u884c\u65f6\uff0c\u5b83\u5c06\u6253\u5370\u524d10\u884c\uff1a\n$./Simple-head.sh con.txt\u6211\u4eec\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u4eba\u6c11\uff0c\u4e3a\u4e86\u7ec4\u6210\u4e00\u4e2a\u66f4\u5b8c\u7f8e\u7684\u8054\u90a6\uff0c\u5efa\u7acb\u6b63\u4e49\uff0c\u786e\u4fdd\u56fd\u5185\u5b89\u5b81\uff0c\u63d0\u4f9b\u5171\u540c\u9632\u5fa1\uff0c\u4fc3\u8fdb\u516c\u5171\u798f\u5229\uff0c\u5e76\u786e\u4fdd\u81ea\u7531\u5bf9\u6211\u4eec\u81ea\u5df1\u548c\u6211\u4eec\u7684\u540e\u4ee3\u7684\u795d\u798f\uff0c\u9881\u5e03\u5e76\u5236\u5b9a\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u7684\u672c\u5baa\u6cd5\u3002\u7b2c1\u6761\u672c\u5baa\u6cd5\u7b2c1\u6b3e\u6388\u4e88\u7684\u6240\u6709\u7acb\u6cd5\u6743\u5747\u5c5e\u4e8e\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u56fd\u4f1a\u3002\n\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u53ef\u9009\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6765\u66f4\u6539\u663e\u793a\u7684\u884c\u6570\uff1a\n$./Simple-head.sh con.txt 2\u6211\u4eec\u7f8e\u56fd\u4eba\u6c11\uff0c\u4e3a\u4e86\u7ec4\u6210\u4e00\u4e2a\u66f4\u5b8c\u7f8e\u7684\u8054\u90a6\uff0c\u5efa\u7acb\u6b63\u4e49\uff0c\u786e\u4fdd\u56fd\u5185\u5b89\u5b81\uff0c\u63d0\u4f9b\u5171\u540c\u751f\u6d3b\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8be5\u7a0b\u5e8f\u4f1a\u975e\u5e38\u968f\u610f\u5730\u5931\u8d25\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u5b83\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\uff1a\n\u5982\u679c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e0d\u662f\u6570\u5b57\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u4e5f\u4e0d\u4f1a\u663e\u793a\u9519\u8bef\uff0c\u5e76\u4e14\u5b9e\u9645\u4e0a\u5c06\u6253\u5370\u6574\u4e2a\u6587\u4ef6\u3002\u5c1d\u8bd5\u6309\u5982\u4e0b\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\uff1a\n#\uff01/bin/bash(1)##\u4f5c\u8005\uff1aKen Youens-Clark&lt\uff1bkcyclark@gmail.com&gt\uff1b(2)#\u76ee\u7684\uff1a`head`\u7684\u7b80\u5355bash\u5b9e\u73b0##\u68c0\u67e5\u53c2\u6570\u4e2a\u6570\u662f1\u62162If[[$#-lt 1]]||[[$#-gt 2]]\uff1b\u5219(3)echo&#34\uff1b\u7528\u6cd5\uff1a$(basename&#34\uff1b$0&#34\uff1b)file[NUM]&#34\uff1b(4)\u9000\u51fa1(5)fiFILE=$1(6)NUM=${2\uff1a-10}(7)LINE_NUM=0(8)\u540c\u65f6\u8bfb\u53d6-r\u884c\uff1bDO(9)ECHO&#34\uff1b$LINE&#34\uff1b(10)LINE_NUM=$((LINE_NUM+1))(11)\u5982\u679c[[$LINE_NUM-EQ$NUM]]\uff1b\u5219(12)\u4e2d\u65ad(13)Fidone&lt\uff1b&#34\uff1b$\n\u8fd9\u884c\u901a\u5e38\u88ab\u79f0\u4e3a&#34\uff1bshebang\uff0c&#34\uff1b\uff0c\u901a\u5e38\u53ef\u4ee5\u770b\u5230bash\u7684\u8def\u5f84\u662f\u8fd9\u6837\u786c\u7f16\u7801\u7684\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u4e00\u5b9a\u662f\u6700\u4f73\u5b9e\u8df5\uff0c\u56e0\u4e3abash\u5f88\u53ef\u80fd\u4f4d\u4e8e/usr/local/bin/bash\u3002\n#\u540e\u9762\u7684\u4efb\u4f55\u6587\u672c\u90fd\u4f1a\u88abbash\u5ffd\u7565\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5411\u7a0b\u5e8f\u6dfb\u52a0\u6ce8\u91ca\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b64\u6ce8\u91ca\u4e34\u65f6\u7981\u7528\u4ee3\u7801\u3002\u8bb0\u5f55\u60a8\u7684\u4ee3\u7801\u662f\u793c\u8c8c\u7684\uff0c\u8fd9\u6837\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u8054\u7cfb\u60a8\u63d0\u51fa\u95ee\u9898\u3002\nbash\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528-lt(\u5c0f\u4e8e)\u548c-gt(\u5927\u4e8e)\u8fd9\u6837\u7684\u8fd0\u7b97\u7b26\u8fdb\u884c\u6570\u503c\u6bd4\u8f83\u3002$#\u53d8\u91cf\u4fdd\u5b58\u7a0b\u5e8f\u7684\u53c2\u6570\u6570\u91cf\uff0c\u56e0\u6b64\u6211\u4eec\u5c1d\u8bd5\u67e5\u770b\u662f\u5426\u6b63\u597d\u6ca1\u67091\u4e2a\u62162\u4e2a\u53c2\u6570\u3002\n\u6211\u4eec\u6253\u5370\u4e00\u6761\u7528\u6cd5\u7c7b\u578b\u7684\u8bed\u53e5\uff0c\u5411\u7528\u6237\u89e3\u91ca\u5982\u4f55\u8c03\u7528\u8be5\u7a0b\u5e8f\u3002\u8be5\u6587\u4ef6\u662f\u5fc5\u9700\u7684\u4f4d\u7f6e\u53c2\u6570\uff0c\u800c[NUM]\u663e\u793a\u5728[]\u4e2d\uff0c\u8868\u793a\u5b83\u662f\u53ef\u9009\u7684\u3002\n\u6211\u4eec\u9000\u51fa\u65f6\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u503c(1\u5c31\u53ef\u4ee5\u4e86)\uff0c\u8868\u793a\u7a0b\u5e8f\u672a\u80fd\u6309\u9884\u671f\u8fd0\u884c\u3002\n\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u81f3\u5c11\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06$1\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u590d\u5236\u5230\u6211\u4eec\u7684file\u53d8\u91cf\u4e2d\u3002\n\u6211\u4eec\u53ef\u80fd\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06$2\u6216\u9ed8\u8ba4\u503c10\u590d\u5236\u5230NUM\u53d8\u91cf\u3002\n\u5c06LINE_NUM\u53d8\u91cf\u521d\u59cb\u5316\u4e3a0\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba1\u7b97\u663e\u793a\u4e86\u591a\u5c11\u884c\u6587\u4ef6\u3002\n$(())\u6c42\u503c\u5c06\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5b57\u7b26\u4e32\u503c\u6267\u884c\u4e00\u4e9b\u7b97\u672f\u8fd0\u7b97\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u60f3\u8981\u5c06LINE_NUM\u7684\u503c\u52a01\u3002\neq\u662fbash\u4e2d\u7684\u6570\u5b57\u76f8\u7b49\u8fd0\u7b97\u7b26\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u68c0\u67e5LINE_NUM\u662f\u5426\u7b49\u4e8e\u6211\u4eec\u60f3\u8981\u663e\u793a\u7684\u884c\u6570\u3002\n\u524d\u9762\u7684Simple-head.sh\u7248\u672c\u5c55\u793a\u4e86\u5982\u4f55\u5728bash\u4e2d\u5904\u7406\u8bb8\u591a\u7cfb\u7edf\u7ea7\u4efb\u52a1\u7684\u4e00\u4e9b\u57fa\u672c\u601d\u60f3\uff0c\u4f8b\u5982\uff1a\n\u5f53\u7a0b\u5e8f\u672a\u6309\u9884\u671f\u6b63\u5e38\u5b8c\u6210\u65f6\uff0c\u4f7f\u7528\u975e\u96f6\u503c\u9000\u51fa\u7a0b\u5e8f\u3002\n\u6ca1\u6709-n\u9009\u9879\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u53ea\u5904\u7406\u4f4d\u7f6e\u53c2\u6570\uff0c\u56e0\u6b64\u4e0d\u80fd\u5904\u7406\u9009\u9879\u3002\n\u7a0b\u5e8f\u4e0d\u4f1a\u518d\u6b21\u6253\u5370-h\u7684\u7528\u6cd5&#34\uff1b\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u5904\u7406\u9009\u9879\u3002\n#\uff01/usr/bin/env bash(1)##\u4f5c\u8005\uff1aKen Youens-Clark&lt\uff1bkcyclark@gmail.com&gt\uff1b(2)#\u76ee\u7684\uff1abash\u5b9e\u73b0`head`##\u4f7f\u7528uninitialize\u53d8\u91cf\u96c6-u(3)#\u53c2\u6570NUM_LINES\u7684\u9ed8\u8ba4\u503c=10(4)#\u6253\u5370&#34\uff1b\u7528\u6cd5&#34\uff1b\u51fd\u6570\u7528\u6cd5(){(5)printf&#34\uff1b\u7528\u6cd5\uff1a$(basename&#34\uff1b$0&#34\uff1b)&#34\uff1bECHO&#34\uff1b\u9009\u9879\uff1a&#34\uff1bECHO&#34\uff1b-n NUM_LINES&#34\uff1bECHO EXIT&#34\uff1b${1\uff1a-0}&#34\uff1b}#\u5982\u679c\u6211\u4eec\u5b8c\u5168\u6ca1\u6709\u53c2\u6570\uff0c\u5219\u9000\u51fa[[$#-eq0]]&amp\uff1b&amp\uff1b\u7528\u6cd51(6)#\u5904\u7406\u547d\u4ee4\u884c\u9009\u9879\uff0c\u800c\u83b7\u53d6\u9009\u9879\uff1an\uff1ah opt\uff1bdo(7)case$opt\u3002(9)SHIFT 2(10)\uff1b\uff1bh)\u7528\u6cd5(11)\uff1b\uff1b\uff1a)ECHO&#34\uff1b\u9519\u8bef\uff1a\u9009\u9879-$OPTARG\u9700\u8981\u53c2\u6570\u3002&#34\uff1b(12)\u9000\u51fa1\uff1b\uff1b\\\uff1f)\u3002ECHO&#34\uff1b\u9519\u8bef\uff1a\u65e0\u6548\u9009\u9879\uff1a-${OPTARG\uff1a-&#34\uff1b&#34\uff1b}&#34\uff1b(13)EXIT 1 esacone#\u9a8c\u8bc1NUM_LINES\u770b\u8d77\u6765\u662f\u5426\u4e3a\u6b63\u6574\u6570\u5982\u679c[[$NUM_LINES-lt 1]]\uff1b\u5219(14)ECHO&#34\uff1b-n\\&#34\uff1b${NUM_LINES}\\&#34\uff1b\u5fc5\u987b\u662f&gt\uff1b0&#34\uff1bEXIT 1FI#\u5904\u7406\u4f4d\u7f6e\u53c2\u6570FNU1\u3002do(16)FNUM=$((FNUM+1))(17)#\u5982\u679c[[\uff01-f&#34\uff1b$FILE&#34\uff1b]]||[\uff01-r&#34\uff1b$FILE&#34\uff1b]]\uff1b\u5219(18)ECHO&#34\uff1b\\&#34\uff1b${FILE}\\&#34\uff1b\u4e0d\u662f\u53ef\u8bfb\u6587\u4ef6&#34\uff1bCONTINUE(19)FI#\u5982\u679c\u6709\u591a\u4e2a\u6587\u4ef6[[$]\uff0c\u5219\u6253\u5370\u6807\u9898\u3002echo&#34\uff1b==&gt\uff1b${file}&lt\uff1b==&#34\uff1b(20)#\u521d\u59cb\u5316\u8ba1\u6570\u5668\u53d8\u91cfLINE_NUM=0(21)#\u8bfb\u53d6-r\u884c\u65f6\u5faa\u73af\u904d\u5386\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\uff1b\u6267\u884c(22)ECHO$LINE#\u9012\u589e\u8ba1\u6570\u5668\uff0c\u67e5\u770b\u662f\u5426\u4e2d\u65adLINE_NUM=$((LINE_NUM+1))[[$LINE_NUM-eq$NUM_LINES]]&amp\uff1b&\u3002[[$#-&gt;1]]&amp\uff1b&amp\uff1b[[$FNUM-lt$#]]&amp\uff1b&amp\uff1becho(24)\u5df2\u9000\u51fa0\u3002\n\u4f7f\u7528env\u7a0b\u5e8f(\u901a\u5e38\u4f4d\u4e8e/usr/bin/env)\u67e5\u627ebash\u6bd4\u5c06\u8def\u5f84\u786c\u7f16\u7801\u4e3a/bin/bash\u66f4\u7075\u6d3b\u3002\n\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u8fd9\u5c06\u5bfc\u81f4bash\u6b7b\u4ea1\uff0c\u8fd9\u662f\u8be5\u8bed\u8a00\u63d0\u4f9b\u7684\u4e3a\u6570\u4e0d\u591a\u7684\u5b89\u5168\u7279\u6027\u4e4b\u4e00\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3aNUM_LINES\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u4ee5\u663e\u793a\u53ef\u4ee5\u7531\u9009\u9879\u8986\u76d6\u7684\u503c\u3002\n\u7531\u4e8e\u6211\u53ef\u80fd\u591a\u6b21\u60f3\u8981\u663e\u793a\u7528\u6cd5\u5e76\u9000\u51fa\uff0c\u4f46\u51fa\u73b0\u9519\u8bef(\u4f8b\u5982\uff0c\u6ca1\u6709\u53c2\u6570\u6216\u6839\u636e-h\u7684\u8bf7\u6c42)\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u51fd\u6570\u4e2d\u7a0d\u540e\u8c03\u7528\u3002\n\u5982\u679c\u7a0b\u5e8f$#\u7684\u53c2\u6570\u6570\u91cf\u4e3a0\uff0c\u5219\u4f7f\u7528&#34\uff1bUSAGE&#34\uff1b\u8bed\u53e5\u548c\u975e\u96f6\u503c\u9000\u51fa\u3002\n\u6211\u4eec\u53ef\u4ee5\u5728bash\u4e2d\u4f7f\u7528getopts\u624b\u52a8\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u3002\u6211\u4eec\u7279\u522b\u5bfb\u627e\u6807\u5fd7-n\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u503c\uff0c\u800c-h\uff0c\u5b83\u4e0d\u63a5\u53d7\u4e00\u4e2a\u503c\u3002\n$opt\u5c06\u5177\u6709\u6807\u5fd7\u503c\uff0c\u4f8b\u5982n\u4ee3\u8868-n\uff0ch\u4ee3\u8868-h\u3002\n$OPTARG\u5c06\u5177\u6709-n\u6807\u5fd7\u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u590d\u5236\u5230NUM_LINES\u53d8\u91cf\u4ee5\u4fdd\u5b58\u5b83\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u4e86-n3\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528Shift2\u4ece\u7a0b\u5e8f\u53c2\u6570$@\u4e2d\u5220\u9664\u8fd9\u4e24\u4e2a\u503c\u3002\n\u5982\u679c\u5904\u7406-h\u6807\u5fd7\uff0c\u8bf7\u8c03\u7528\u5c06\u5bfc\u81f4\u7a0b\u5e8f\u9000\u51fa\u7684\u7528\u6cd5\u51fd\u6570\u3002\n\u8fd9\u4f7f\u7528-lt\u8fd0\u7b97\u7b26\u5c06NUM_LINES\u5f3a\u5236\u4e3a\u6570\u5b57\u503c\u3002\u5982\u679c\u5b83\u5c0f\u4e8e-lt 1\uff0c\u5219\u629b\u51fa\u9519\u8bef\u5e76\u4f7f\u7528\u975e\u96f6\u503c\u9000\u51fa\u3002\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u4e86\u53ef\u9009\u53c2\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5904\u7406$@\u4e2d\u7684\u5176\u4f59\u4f4d\u7f6e\u53c2\u6570\u4e86\u3002\u6211\u4eec\u4ece\u5b9a\u4e49FNUM\u5f00\u59cb\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8ddf\u8e2a\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u6587\u4ef6\u53f7\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u662f\u5f53\u524d\u6587\u4ef6\u7684\u7d22\u5f15\u503c\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528for\u5faa\u73af\u8fed\u4ee3\u5728$@\u4e2d\u627e\u5230\u7684\u4f4d\u7f6e\u53c2\u6570\u3002\n\u5982\u679c\u7ed9\u5b9a\u53c2\u6570\u662f\u6587\u4ef6\uff0c\u5219-f\u6d4b\u8bd5\u5c06\u8fd4\u56de&#34\uff1btrue&#34\uff1b\u503c\uff0c\u5e76\u4e14\uff01\u4f1a\u5426\u5b9a\u8fd9\u4e00\u70b9\u3002ditto as-r\u5c06\u62a5\u544a\u53c2\u6570\u662f\u5426\u4e3a\u53ef\u8bfb\u6587\u4ef6\u3002\nCONTINUE\u8bed\u53e5\u5c06\u4f7ffor\u5faa\u73af\u7acb\u5373\u524d\u8fdb\u5230\u4e0b\u4e00\u8fed\u4ee3\uff0c\u8df3\u8fc7\u4e0b\u9762\u7684\u6240\u6709\u4ee3\u7801\u3002\n\u5982\u679c\u4f4d\u7f6e\u53c2\u6570\u7684\u6570\u91cf\u5927\u4e8e-gt 1\uff0c\u5219\u6253\u5370\u4e00\u4e2a\u6807\u9898\uff0c\u663e\u793a\u5f53\u524d\u6587\u4ef6\u7684\u540d\u79f0\u3002\n\u8fd9\u4e0e\u6211\u4eec\u4ee5\u524d\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7ed9\u5b9a\u884c\u6570\u7684\u5faa\u73af\u76f8\u540c\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u6539\u8fdb\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u68c0\u67e5\u6765\u81ea\u7528\u6237\u7684\u6570\u5b57\u53c2\u6570\u662f\u5426\u771f\u7684\u662f\u6b63\u6574\u6570\uff01\n\u5982\u679c\u6709\u591a\u4e2a\u6587\u4ef6\u8981\u5904\u7406\uff0c\u5e76\u4e14\u6211\u4eec\u5f53\u524d\u4e0d\u5728\u6700\u540e\u4e00\u4e2a\u6587\u4ef6\u4e0a\uff0c\u5219\u989d\u5916\u6253\u5370\u4e00\u4e2a\u6362\u884c\u7b26\u6765\u5206\u9694\u8f93\u51fa\u3002\n\u5982\u679c\u60a8\u662fbash\u7f16\u7a0b\u7684\u65b0\u624b\uff0c\u8bed\u6cd5\u53ef\u80fd\u770b\u8d77\u6765\u76f8\u5f53\u795e\u79d8\uff01\u5b8c\u5168\u624b\u52a8\u5904\u7406\u547d\u4ee4\u884c\u9009\u9879\u548c\u4f4d\u7f6e\u53c2\u6570\u7279\u522b\u9ebb\u70e6\u3002\u6211\u627f\u8ba4\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u6b63\u786e\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u800c\u4e14\uff0c\u5373\u4f7f\u5f53\u5b83\u6700\u7ec8\u5728\u6211\u7684Linux\u548cMAX\u673a\u5668\u4e0a\u8fd0\u884c\u65f6\uff0c\u6211\u4e5f\u65e0\u6cd5\u5c06\u5176\u63d0\u4f9b\u7ed9Windows\u7528\u6237\uff0c\u9664\u975e\u4ed6\u4eec\u5b89\u88c5\u4e86WSL(Windows Subsystem For Linux)\u6216Cygwin\u4e4b\u7c7b\u7684\u8f6f\u4ef6\u3002\n\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u5f97\u76f8\u5f53\u597d\uff01\u5982\u679c\u6211\u4eec\u4e0d\u5e26\u53c2\u6570\u8fd0\u884c\uff0c\u6216\u8005\u5982\u679c\u60a8\u8fd0\u884c./head.sh-h\uff0c\u5b83\u5c06\u6253\u5370\u51fa\u4e0d\u9519\u7684\u6587\u6863\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u5bf9head\u7684\u6539\u8fdb\uff1a\n\u5b83\u53ef\u4ee5\u5904\u7406\u9009\u9879\u548c\u4f4d\u7f6e\u53c2\u6570\uff0c\u4e3a-n\u9009\u9879\u63d0\u4f9b\u5408\u7406\u7684\u9ed8\u8ba4\u503c\uff0c\u5e76\u6b63\u786e\u8df3\u8fc7\u975e\u6587\u4ef6\u53c2\u6570\uff1a\n$./head.sh-n 3foo con.txt&#34\uff1bfoo&34\uff1b\u4e0d\u662f\u4e00\u4e2a\u53ef\u8bfb\u7684\u6587\u4ef6=&gt\uff1bconst.txt&lt\uff1b=\u6211\u4eec\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u4eba\u6c11\uff0c\u4e3a\u4e86\u7ec4\u6210\u66f4\u5b8c\u7f8e\u7684\u8054\u90a6\uff0c\u5efa\u7acb\u6b63\u4e49\uff0c\u786e\u4fdd\u56fd\u5185\u5b89\u5b81\uff0c\u63d0\u4f9b\u5171\u540c\u9632\u5fa1\uff0c\u4fc3\u8fdb\u516c\u5171\u798f\u5229\uff0c\u5e76\u786e\u4fdd\u81ea\u7531\u7684\u795d\u798f\u3002\n$./head.sh-n 1 st.txt Simple-head.sh head.sh==&gt\uff1bcon.txt&lt\uff1b=\u6211\u4eec\u7f8e\u56fd\u4eba\u6c11\uff0c\u4e3a\u4e86\u5f62\u6210\u4e00\u4e2a\u66f4\u5b8c\u7f8e\u7684\u8054\u90a6\uff0c==&gt\uff1bSimple-head.sh&lt\uff1b=#\uff01/bin/bash==&gt\uff1bhead.sh&lt\uff1b=#\uff01/usr/bin/env bash\uff1b==#\uff01/usr/bin/env bash\uff1b==#\uff01\n\u4e0d\u7ba1\u600e\u6837\uff0c\u6211\u4f7f\u7528\u4e86\u9644\u5e26\u7684new_bash.py\u7a0b\u5e8f\u6765\u521b\u5efa\u8fd9\u4e2a\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u53d1\u73b0\u81ea\u5df1\u9677\u5165\u4e86\u7f16\u5199bash\u7a0b\u5e8f\u7684\u56f0\u5883\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u4ece\u5934\u5f00\u59cb\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5bf9\u60a8\u6709\u7528\u3002\n\u6211\u5df2\u7ecf\u5305\u542b\u4e86\u4e00\u4e2atest.py\uff0c\u5b83\u662f\u4e00\u4e2aPython\u7a0b\u5e8f\uff0c\u5b83\u5c06\u8fd0\u884chead.sh\u7a0b\u5e8f\u4ee5\u786e\u4fdd\u5b83\u786e\u5b9e\u6267\u884c\u5176\u5e94\u8be5\u6267\u884c\u7684\u64cd\u4f5c\u3002\u5982\u679c\u60a8\u67e5\u770b\u6b64\u7a0b\u5e8f\u7684\u5185\u5bb9\uff0c\u60a8\u5c06\u770b\u5230\u8bb8\u591a\u540d\u79f0\u4ee5test_\u5f00\u5934\u7684\u51fd\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4f7f\u7528pytest\u6a21\u5757/\u7a0b\u5e8f\u5c06\u8fd9\u4e9b\u51fd\u6570\u4f5c\u4e3a\u6d4b\u8bd5\u5957\u4ef6\u8fd0\u884c\u3002\u6211\u559c\u6b22\u4f7f\u7528-x\u6807\u5fd7\u6765\u6307\u793a\u6d4b\u8bd5\u5e94\u5728\u7b2c\u4e00\u6b21\u5931\u8d25\u7684\u6d4b\u8bd5\u65f6\u505c\u6b62\uff0c\u5e76\u4f7f\u7528-v\u6807\u5fd7\u6765\u6307\u793a&#34\uff1bVerbose&#34\uff1b\u8f93\u51fa\u3002\u8fd9\u4e9b\n$pytest-XV test.py=\u6d4b\u8bd5\u4f1a\u8bdd\u542f\u52a8=.test.py\uff1a\uff1atest_exists\u901a\u8fc7[14%]test.py\uff1a\uff1aTEST_USAGE\u901a\u8fc7[28%]test.py\uff1a\uff1aTEST_BAD_FILE\u901a\u8fc7[42%]test.py\uff1a\uff1aTEST_BAD_NUM\u901a\u8fc7[57%]test.py\uff1a\uff1aTEST_DEFAULT\u901a\u8fc7[71%]test.py\uff1a\uff1aTEST_n\u901a\u8fc7[85%]test.py\uff1a\uff1a\n\u4e0d\u5f97\u4e0d\u7528\u4e0e\u7a0b\u5e8f\u672c\u8eab\u4e0d\u540c\u7684\u8bed\u8a00\u4e3a\u7a0b\u5e8f\u7f16\u5199\u6d4b\u8bd5\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u6211\u77e5\u9053\u5728bash\u4e2d\u6ca1\u6709\u53ef\u4ee5\u4f7f\u7528(\u6216\u60f3\u8981\u5b66\u4e60)\u7684\u53ef\u4ee5\u8fd0\u884c\u4e0a\u8ff0\u6d4b\u8bd5\u5957\u4ef6\u7684\u6d4b\u8bd5\u6846\u67b6\uff01\n\u8981\u7528Python\u7f16\u5199\u7c7b\u4f3c\u7684\u7248\u672c\uff0c\u6211\u4eec\u5c06\u975e\u5e38\u4f9d\u8d56\u6807\u51c6\u7684argparse\u6a21\u5757\u6765\u5904\u7406\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u7684\u9a8c\u8bc1\u4ee5\u53ca\u751f\u6210\u7528\u6cd5\u8bed\u53e5\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8esimple-head.py\u7684\u7248\u672c\uff0c\u5b83\u5c06\u53ea\u5904\u7406\u4e00\u4e2a\u6587\u4ef6\uff1a\n#\uff01/usr/bin/env python3(1)&#34\uff1b&#34\uff1b&#34\uff1b(2)\u4f5c\u8005\uff1aKen Youens-ClarkPurpose\uff1ahead\u7684Python\u5b9e\u73b0\u672c\u7248\u672c\u53ea\u5904\u7406\u4e00\u4e2a\u6587\u4ef6\uff01&#34\uff1b&#34\uff1b&#34\uff1b\u5bfc\u5165argparse(3)\u5bfc\u5165osimport\u7cfb\u7edf#PythonGET_args()\uff1a(4)&#34\uff1b&#34\uff1b&#34\uff1b\u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570&#34\uff1b&#34\uff1b&#34\uff1b(5)parser=argparse.ArgumentParser((6)DESCRIPTION=&#39\uff1b-def\u5934&#39\uff1b\uff0cformatter_class=argparse.ArgumentDefaultsHelpFormatter)parser.add_Argument(&#39\uff1b\u6587\u4ef6&#39\uff1b\uff0c(7)metavar=&#39\uff1b\u6587\u4ef6&#39\uff1b\uff0c\u7c7b\u578b=argparse.FileType(&#39\uff1brt&#39\uff1b)\uff0c(8)Help=&#39\uff1b\u8f93\u5165\u6587\u4ef6&#39\uff1b)parser.add_Argument(&#39\uff1b-n&#39\uff1b\uff0c(9)&#39\uff1b--Num&39\uff1b\uff0cHelp=&#39\uff1b\u884c\u6570&#39\uff1b\uff0ctype=int\uff0c(10)default=10)(11)args=parser.parse_args()(12)if args.num&lt\uff1b1\uff1a(13)parser.error(f&#39\uff1b--num&#34\uff1b{args.num}&#34\uff1b\u5fc5\u987b\u4e3a&gt\uff1b0&#39\uff1b)(14)\u8fd4\u56deargs(15)#-def Main()\uff1a(16)&#34\uff1b&#34\uff1b&#34\uff1b\u5728\u8fd9\u91cc\u5236\u9020\u7235\u58eb\u4e50\u566a\u97f3&#34\uff1b&#34\uff1b&#34\uff1bargs=Get_args()(17)for I\uff0c\u884cin Enumerate(args.file\uff0cStart=1)\uff1a(18)\u6253\u5370(\u884c\uff0c\u7ed3\u675f=&#39\uff1b)(19)\u5982\u679cI==args.num\uff1a(20)Break(21)#-if__NAME__==&#39\uff1b__main__&#39\uff1b\uff1a(22)main()\u3002\n\u4e09\u91cd\u5f15\u53f7\u5141\u8bb8\u6211\u4eec\u521b\u5efa\u8de8\u8d8a\u591a\u884c\u7684\u5b57\u7b26\u4e32\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f46\u6ca1\u6709\u5c06\u5176\u8d4b\u7ed9\u53d8\u91cf\u3002\u8fd9\u662f\u521b\u5efa\u6587\u6863\u7684\u7ea6\u5b9a\uff0c\u4e5f\u79f0\u4e3a\u6587\u6863\u5b57\u7b26\u4e32\u3002\u6b64\u6587\u6863\u5b57\u7b26\u4e32\u6c47\u603b\u7a0b\u5e8f\u672c\u8eab\u3002\u6211\u81f3\u5c11\u559c\u6b22\u8bb0\u5f55\u662f\u8c01\u5199\u7684\uff0c\u4e3a\u4ec0\u4e48\u5199\u7684\u3002\n\u6211\u4eec\u53ef\u4ee5\u4ece\u5176\u4ed6\u6a21\u5757\u5bfc\u5165\u4ee3\u7801\u3002\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u5bfc\u5165\u51e0\u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u6a21\u5757\uff0c\u4f46\u5efa\u8bae\u5c06\u6bcf\u4e2a\u6a21\u5757\u653e\u5728\u5355\u72ec\u7684\u884c\u4e0a\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528argparse\u6765\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u6211\u4eec\u8fd8\u5c06\u4f7f\u7528os(\u64cd\u4f5c\u7cfb\u7edf)\u548csys(\u7cfb\u7edf)\u6a21\u5757\u3002\n\u6211\u559c\u6b22\u603b\u662f\u5b9a\u4e49\u4e00\u4e2aget_args()\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4e13\u95e8\u5904\u7406argparse\u6765\u521b\u5efa\u7a0b\u5e8f\u7684\u53c2\u6570\u548c\u9a8c\u8bc1\u53c2\u6570\u3002\u6211\u603b\u662f\u628a\u8fd9\u4e2a\u653e\u5728\u7b2c\u4e00\u4f4d\uff0c\u8fd9\u6837\u6211\u5728\u9605\u8bfb\u7a0b\u5e8f\u65f6\u5c31\u53ef\u4ee5\u7acb\u5373\u770b\u5230\u5b83\u3002\n\u8fd9\u662f\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u3002\u5b83\u4f1a\u50cf\u6ce8\u91ca\u4e00\u6837\u88ab\u5ffd\u7565\uff0c\u4f46\u5b83\u5bf9Python\u5f88\u91cd\u8981\uff0c\u5982\u679c\u6211\u5bfc\u5165\u6b64\u6a21\u5757\u5e76\u8bf7\u6c42\u5e2e\u52a9(Get_Args)\uff0c\u5b83\u5c31\u4f1a\u51fa\u73b0\u3002\n\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u5c06\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\u7684\u89e3\u6790\u5668\u3002\u6211\u6dfb\u52a0\u4e86\u5c06\u51fa\u73b0\u5728\u4efb\u4f55&#34\uff1bUSAGE&#34\uff1b\u8bed\u53e5\u4e2d\u7684\u7a0b\u5e8f\u63cf\u8ff0\uff0c\u5e76\u4e14\u6211\u603b\u662f\u559c\u6b22\u8ba9argparse\u4e3a\u7528\u6237\u663e\u793a\u4efb\u4f55\u9ed8\u8ba4\u503c\u3002\n\u4f4d\u7f6e\u53c2\u6570\u7684\u540d\u79f0\u4e2d\u6ca1\u6709\u524d\u5bfc\u7834\u6298\u53f7\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5185\u90e8\u5c06\u5176\u79f0\u4e3afile\u3002\n\u6240\u6709\u53c2\u6570\u7684\u9ed8\u8ba4\u7c7b\u578b\u90fd\u662fstr(\u5b57\u7b26\u4e32)\u3002\u6211\u4eec\u53ef\u4ee5\u8981\u6c42argparse\u5f3a\u5236\u6267\u884c\u4e0d\u540c\u7684\u7c7b\u578b(\u5982int)\uff0c\u5f53\u7528\u6237\u65e0\u6cd5\u63d0\u4f9b\u53ef\u4ee5\u89e3\u6790\u4e3a\u6574\u6570\u503c\u7684\u503c\u65f6\uff0c\u5b83\u5c06\u6253\u5370\u9519\u8bef\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u7279\u6b8a\u7684argparse\u7c7b\u578b\uff0c\u5b83\u5b9a\u4e49\u4e86&#34\uff1b\u53ef\u8bfb&#34\uff1b(&#39\uff1br&#39\uff1b)&#34\uff1b\u6587\u672c&#34\uff1b(&#39\uff1bt&#39\uff1b)\u6587\u4ef6\u3002\u5982\u679c\u7528\u6237\u63d0\u4f9b\u7684\u4e0d\u662f\u53ef\u8bfb\u6587\u672c\u6587\u4ef6\uff0cargparse\u5c06\u6682\u505c\u7a0b\u5e8f\uff0c\u6253\u5370\u9519\u8bef\u548c\u7528\u6cd5\uff0c\u7136\u540e\u4ee5\u975e\u96f6\u503c\u9000\u51fa\u3002\n&#34\uff1bnumber&#34\uff1b\u53c2\u6570\u7684\u524d\u5bfc-on-n(\u77ed\u540d\u79f0)\u548c--num(\u957f\u540d\u79f0)\u610f\u5473\u7740\u8fd9\u5c06\u662f\u4e00\u4e2a\u9009\u9879\u3002\n\u5728\u5b9a\u4e49\u4e86\u7a0b\u5e8f\u7684\u53c2\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u8981\u6c42\u89e3\u6790\u5668\u89e3\u6790\u53c2\u6570\u3002\u5982\u679c\u51fa\u73b0\u53c2\u6570\u6570\u91cf\u6216\u7c7b\u578b\u9519\u8bef\u7b49\u95ee\u9898\uff0cargparse\u5c06\u5728\u6b64\u5904\u505c\u6b62\u7a0b\u5e8f\u3002\n\u5982\u679c\u6211\u4eec\u8c08\u5230\u8fd9\u4e00\u70b9\uff0c\u5c31argparse\u800c\u8a00\uff0c\u8fd9\u4e9b\u53c2\u6570\u662f\u6709\u6548\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u5176\u4ed6\u624b\u52a8\u68c0\u67e5\uff0c\u4f8b\u5982\u9a8c\u8bc1args.num\u662f\u5426\u5927\u4e8e0\u3002\nparser.error()\u51fd\u6570\u662f\u6211\u4eec\u624b\u52a8\u8c03\u7528argparse\u7684\u9519\u8bef\u8f93\u51fa\u51fd\u6570\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\nPython\u4e2d\u7684\u51fd\u6570\u5fc5\u987b\u663e\u5f0f\u8fd4\u56de\u503c\uff0c\u5426\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u8fd4\u56deNONE\u3002\u8fd9\u91cc\u5e0c\u671b\u5c06\u53c2\u6570\u8fd4\u56de\u7ed9\u8c03\u7528\u51fd\u6570\u3002\n\u7ea6\u5b9a\u5c06\u542f\u52a8\u51fd\u6570\u79f0\u4e3amain()\uff0c\u4f46\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u5e76\u4e14Python\u4e0d\u4f1a\u81ea\u52a8\u8c03\u7528\u6b64\u51fd\u6570\u6765\u542f\u52a8\u7a0b\u5e8f\u3002get_args()\u548cmain()\u90fd\u4e0d\u63a5\u53d7\u53c2\u6570\uff0c\u4f46\u5982\u679c\u5b83\u4eec\u63a5\u53d7\uff0c\u5b83\u4eec\u5c06\u5217\u5728\u62ec\u53f7\u4e2d\u3002\n\u5b9a\u4e49\u53c2\u6570\u3001\u9a8c\u8bc1\u53c2\u6570\u4ee5\u53ca\u5904\u7406\u5e2e\u52a9\u548c\u7528\u6cd5\u7684\u6240\u6709\u5de5\u4f5c\u73b0\u5728\u90fd\u9690\u85cf\u5728get_args()\u51fd\u6570\u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u4e00\u4e2a\u5355\u5143\uff0c\u5b83\u5c01\u88c5\u4e86\u8fd9\u4e9b\u60f3\u6cd5\u3002\u5982\u679c\u6211\u4eec\u7684\u7a0b\u5e8f\u6210\u529f\u8c03\u7528get_args()\u5e76\u8fd4\u56de\u4e00\u4e9b\u53c2\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u53c2\u6570\u5b9e\u9645\u4e0a\u662f\u6b63\u786e\u548c\u6709\u7528\u7684\u3002\n\u6211\u4eec\u4e0d\u5fc5\u50cf\u5728bash\u4e2d\u90a3\u6837\u521d\u59cb\u5316\u8ba1\u6570\u53d8\u91cf\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Enumererate()\u51fd\u6570\u8fd4\u56de\u4efb\u4f55\u9879\u76ee\u5e8f\u5217\u7684\u7d22\u5f15\u548c\u503c\u3002\u8fd9\u91cc\uff0cargs.file\u5b9e\u9645\u4e0a\u662fargparse\u63d0\u4f9b\u7684\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06args.file\u5b9a\u4e49\u4e3a&#34\uff1bfile&#34\uff1b\u7c7b\u578b\u3002\u8fd9\u610f\u5473\u7740\u6211\u5c06\u8fed\u4ee3\u6587\u4ef6\u53e5\u67c4\u4e2d\u7684\u884c\u3002\u6211\u53ef\u4ee5\u4f7f\u7528start\u9009\u9879\u679a\u4e3e()\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u800c\u4e0d\u662f\u4ece0\u5f00\u59cb\u8ba1\u6570\u3002\nprint()\u51fd\u6570\u7c7b\u4f3c\u4e8ebash\u4e2d\u7684echo\u8bed\u53e5\u3002\u8fd9\u91cc\uff0c\u6587\u4ef6\u4e2d\u7684\u884c\u5c06\u6709\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u56e0\u6b64\u6211\u4f7f\u7528end=&#39\uff1b&#39\uff1b\u6765\u8868\u793aprint()\u4e0d\u5e94\u8be5\u5c06\u60ef\u5e38\u7684\u6362\u884c\u7b26\u6dfb\u52a0\u5230\u8f93\u51fa\u4e2d\u3002\nbash\u4f7f\u7528-eq\u8fdb\u884c\u6570\u5b57\u6bd4\u8f83\uff0c\u4f7f\u7528==\u8fdb\u884c\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c\u800cPython\u4f7f\u7528==\u8fdb\u884c\u8fd9\u4e24\u79cd\u64cd\u4f5c\u3002\nPython\u548cbash\u5728\u5faa\u73af\u4e2d\u5206\u522b\u4f7f\u7528Continue\u548cBreak\u6765\u8df3\u8fc7\u548c\u79bb\u5f00\u5faa\u73af\u3002\n\u8fd9\u662fPython\u4e2d\u68c0\u6d4b\u7a0b\u5e8f/\u6a21\u5757\u4f55\u65f6\u4ece\u547d\u4ee4\u884c\u8fd0\u884c\u7684\u4e60\u60ef\u7528\u6cd5\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u60f3\u8981\u6267\u884cmain()\u51fd\u6570\u6765\u542f\u52a8\u7a0b\u5e8f\u8fd0\u884c\u3002\n\u4e0a\u9762\u7684\u7a0b\u5e8f\u4ee5py-head/olution1.py\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u5b83\u6765\u67e5\u770b\u5b83\u5c06\u5982\u4f55\u521b\u5efa\u4e0d\u5e26\u53c2\u6570\u7684\u7528\u6cd5\uff1a\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u5b9a\u4e49argparse\u7684-h\u548c--help\u6807\u5fd7\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e13\u95e8\u4e3a\u751f\u6210\u5e2e\u52a9\u800c\u4fdd\u7559\u7684\uff1a\n$./olution1.py-huage\uff1a\u89e3\u51b3\u65b9\u68481.py[-h][-n int]\u5934\u4f4d\u7f6e\u53c2\u6570\u7684Python\u5b9e\u73b0\uff1a\u6587\u4ef6\u8f93\u5165\u6587\u4ef6\u53ef\u9009\u53c2\u6570\uff1a-h\uff0c--help\u663e\u793a\u6b64\u5e2e\u52a9\u6d88\u606f\u5e76\u9000\u51fa-n int\uff0c--num int\u884c\u6570(\u9ed8\u8ba4\u503c\uff1a10)\u3002\n$./\u89e3\u51b3\u65b9\u68481.py const.txt-n\u6211\u4eec\u7f8e\u5229\u575a\u5408\u4f17\u56fd\u4eba\u6c11\uff0c\u4e3a\u4e86\u7ec4\u6210\u4e00\u4e2a\u66f4\u5b8c\u7f8e\u7684\u8054\u90a6\uff0c\u5efa\u7acb\u6b63\u4e49\uff0c\u786e\u4fdd\u56fd\u5185\u5b89\u5b81\uff0c\u63d0\u4f9b\u5171\u540c\u9632\u536b\uff0c\u4fc3\u8fdb\u516c\u5171\u798f\u5229\uff0c\u5e76\u786e\u4fdd\u81ea\u7531\u7684\u795d\u798f\uff0c\u4ee5\u2026\u3002\n\u4ee5\u524d\u7684Python\u7248\u672c\u6f14\u793a\u4e86ma\u3002\n..", "note_en": "On 30 April 2020, I had a chance to talk with Dustin Reybrouck for  The SysAdminShow Podcast.We mostly discussed why sysadmins might like to add Python as a tool in addition to shell scripting.Most of his audience is probably familiar with  bash or Powershell, so I showed how I might write somewhat simple but parameterized and documented version of  head in  bash and how it would be translated to Python 3.Following is a summary of our discussion.\n Sysadmins spend much of their lives on the command-line, so it makes sense that they would seek to automate tasks using the language of their command line\u2009\u2014\u2009something like  bash or Powershell.While it is possible to write many useful programs in these languages, a higher-level language like Python might prove to be a better choice especially given that a Python program is portable between systems that natively understand  bash (e.g., Linux or Mac) and Powershell (Window).As an exercise, let\u2019s write a  bash implementation of the  head command, then we\u2019ll compare how we could write it in Python.\n Let\u2019s start by imagining how we might write our own implementation of the venerable  head command.For example, given the text of the US Constitution, we would expect to see the first few lines of a given file, usually 10:\n $ head const.txtWe the People of the United States, in Order to form a more perfect Union,establish Justice, insure domestic Tranquility, provide for the commondefence, promote the general Welfare, and secure the Blessings of Liberty toourselves and our Posterity, do ordain and establish this Constitution for theUnited States of America.Article 1.Section 1All legislative Powers herein granted shall be vested in a Congress of the\n And we would expect to be able to modify that number using an option like  -n:\n $ head -n 3 const.txtWe the People of the United States, in Order to form a more perfect Union,establish Justice, insure domestic Tranquility, provide for the commondefence, promote the general Welfare, and secure the Blessings of Liberty to\n It\u2019s commonplace for command-line tools to respond to  -h or  --help with a &#34;usage&#34; statement about how the program should be invoked.In the case of  head  [ 1], it does not give a usage because we ask for it but rather because it does not recognize these as valid options.Still, it manages to produce a &#34;usage&#34; under some circumstances which is better than nothing:\n $ head -hhead: illegal option -- husage: head [-n lines | -c bytes] [file ...]\n Let\u2019s start off with a version in  bash that handles just one file and a possible number of lines which will default to 10.If run with no arguments, it will print a &#34;usage&#34; statement:\n  When run with a file as the only argument, it will print the first 10 lines:\n $ ./simple-head.sh const.txtWe the People of the United States, in Order to form a more perfect Union,establish Justice, insure domestic Tranquility, provide for the commondefence, promote the general Welfare, and secure the Blessings of Liberty toourselves and our Posterity, do ordain and establish this Constitution for theUnited States of America.Article 1.Section 1All legislative Powers herein granted shall be vested in a Congress of the\n We can provide an optional second argument to change the number of lines we show:\n $ ./simple-head.sh const.txt 2We the People of the United States, in Order to form a more perfect Union,establish Justice, insure domestic Tranquility, provide for the common\n Note that the program fails rather gracelessly.For instance, if we give it a non-existent file:\n  Our program also fails to show an error if the second argument is not a number and will, in fact, print the entire file.Try running the program like so:\n   #!/bin/bash  (1)## Author : Ken Youens-Clark &lt;kyclark@gmail.com&gt;  (2)# Purpose: simple bash implementation of `head`## Check number of arguments is 1 or 2if [[ $# -lt 1 ]] || [[ $# -gt 2 ]]; then  (3) echo &#34;Usage: $(basename &#34;$0&#34;) FILE [NUM]&#34;  (4) exit 1  (5)fiFILE=$1  (6)NUM=${2:-10}  (7)LINE_NUM=0  (8)while read -r LINE; do  (9) echo &#34;$LINE&#34;  (10) LINE_NUM=$((LINE_NUM+1))  (11) if [[ $LINE_NUM -eq $NUM ]]; then  (12) break  (13) fidone &lt; &#34;$FILE&#34;\n This line is often called the &#34;shebang,&#34; and it is common to see the path to  bash hard-coded like this. It\u2019s not necessarily best practice, however, as  bash might well be located at  /usr/local/bin/bash.\n Any text following  # is ignored by  bash. Here we add comments to the program, but you can also use this to temporarily disable code. It\u2019s polite to document your code so that other might contact you with questions.\n Everything in  bash is a string, but we can use operators like  -lt (less than) and  -gt (greater than) to get numeric comparisons. The  $# variable holds the number of arguments to our program, so we\u2019re trying to see if we do not have exactly 1 or 2 arguments.\n We print a &#34;usage&#34;-type statement to explain to the user how to invoke the program. The  FILE is a required position argument while the  [NUM] is shown in  [] to indicate that it is optional.\n We  exit with a non-zero value (1 is fine) to indicate that the program failed to run as expected.\n Since we know we have at least 1 argument, we can copy the value of the first argument in  $1 to our  FILE variable.\n We may or may not have a second argument, so we can either copy  $2 or a default value of  10 to our  NUM variable.\n Initialize a  LINE_NUM variable to  0 so we can count how many lines of our file we have shown.\n   The  $(()) evaluation will allow us to perform a bit of arithmetic with what is otherwise a string value. Here we want to add 1 to the value of  LINE_NUM.\n The  -eq is the numeric equality operator in  bash. Here we check if the  LINE_NUM is equal to the number of lines we mean to show.\n The previous  simple-head.sh version shows some basic ideas of how to handle many systems-level tasks in  bash such as:\n Exiting the program with non-zero values when the program does not complete as normally expected\n  There is no  -n option because the program handles only  positional arguments and so cannot handle  options\n The program will not print a &#34;usage&#34; for  -h, again because it fails to handle options\n  #!/usr/bin/env bash  (1)## Author : Ken Youens-Clark &lt;kyclark@gmail.com&gt;  (2)# Purpose: bash implementation of `head`## Die on use of uninitialize variablesset -u  (3)# Default value for the argumentNUM_LINES=10  (4)# A function to print the &#34;usage&#34;function USAGE() {  (5) printf &#34;Usage:\\n %s -n NUM_LINES [FILE ...]\\n\\n&#34; &#34;$(basename &#34;$0&#34;)&#34; echo &#34;Options:&#34; echo &#34; -n NUM_LINES&#34; echo exit &#34;${1:-0}&#34;}# Die if we have no arguments at all[[ $# -eq 0 ]] &amp;&amp; USAGE 1  (6)# Process command line optionswhile getopts :n:h OPT; do  (7) case $OPT in  (8) n) NUM_LINES=&#34;$OPTARG&#34;  (9) shift 2  (10) ;; h) USAGE  (11) ;; :) echo &#34;Error: Option -$OPTARG requires an argument.&#34;  (12) exit 1 ;; \\?) echo &#34;Error: Invalid option: -${OPTARG:-&#34;&#34;}&#34;  (13) exit 1 esacdone# Verify that NUM_LINES looks like a positive integerif [[ $NUM_LINES -lt 1 ]]; then  (14) echo &#34;-n \\&#34;${NUM_LINES}\\&#34; must be &gt; 0&#34; exit 1fi# Process the positional argumentsFNUM=0  (15)for FILE in &#34;$@&#34;; do  (16) FNUM=$((FNUM+1))  (17) # Verify this argument is a readable file if [[ ! -f &#34;$FILE&#34; ]] || [[ ! -r &#34;$FILE&#34; ]]; then  (18) echo &#34;\\&#34;${FILE}\\&#34; is not a readable file&#34; continue  (19) fi # Print a header in case of mulitiple files [[ $# -gt 1 ]] &amp;&amp; echo &#34;==&gt; ${FILE} &lt;==&#34;  (20) # Initialize a counter variable LINE_NUM=0  (21) # Loop through each line of the file while read -r LINE; do  (22) echo $LINE # Increment the counter and see if it&#39;s time to break LINE_NUM=$((LINE_NUM+1)) [[ $LINE_NUM -eq $NUM_LINES ]] &amp;&amp; break  (23) done &lt; &#34;$FILE&#34; [[ $# -gt 1 ]] &amp;&amp; [[ $FNUM -lt $# ]] &amp;&amp; echo  (24)doneexit 0\n Using the  env program (which is pretty universally located at  /usr/bin/env) to find  bash is more flexible than hard-coding the path as  /bin/bash.\n  This will cause  bash to die if we attempt to use an uninitialized variable and is one of the few safety features offered by the language.\n Here we set a default value for the  NUM_LINES to show which can be overridden by an option.\n Since there are a multiple times I might want to show the usage and exit with an error (e.g., no arguments or as requested by  -h), I can put this into a  function to call later.\n If the number of arguments to the program  $# is 0, then exit with a &#34;usage&#34; statement and a non-zero value.\n We can use  getopts in  bash to manually parse the command-line arguments. We are specifically looking for flags  -n which takes a value and  -h which does not.\n $OPT will have the flag value such as  n for  -n or  h for  -h.\n The  $OPTARG will have the value for the  -n flag. We can copy that to our  NUM_LINES variable to save it.\n Now that we have processed  -n 3, for instance, we use  shift 2 to discard those two values from the program arguments  $@.\n If processing the  -h flag, call the  USAGE function which will cause the program to exit.\n   This use the  -lt operator to coerce the  NUM_LINES to a numeric value. If it is less than  -lt 1, we throw an error and exit with a non-zero value.\n Now that we have handled the optional arguments, we can handle the rest of the  positional arguments found in  $@. We start off by defining a  FNUM so we can track the file number we are working with. That is, this is the index value of the current file.\n We can use a  for loop to iterate through the positional arguments found in  $@.\n  The  -f test will return a &#34;true&#34; value if the given argument is a file, and  ! will negate this. Ditto as  -r will report if the argument is a readable file.\n The  continue statement will cause the  for loop to immediately advance to the next iteration, skipping all the code below.\n If the number of positional arguments is greater than  -gt 1, then print a header showing the current file\u2019s name.\n  This is the same loop as before that we used to read a given number of lines from the file. This one is improved, however, because we check if the number argument from the user is actually a positive integer!\n  If there are multiple files to process and we\u2019re not currently on the last file, then print an extra newline to separate the outputs.\n If you are new to  bash programming, the syntax will probably look rather cryptic!The entirely manual handling of the command-line options and positional arguments is especially cumbersome.I will admit this is not an easy program to write correctly, and, even when it finally works on my Linux and Max machines, I won\u2019t be able to give it to a Windows user unless they have something like WSL (Windows Subsystem for Linux) or Cygwin installed.\n Still, this program works rather well!It will print nice documentation if we run with no arguments or if you run  ./head.sh -h, which is actually an improvement over  head:\n    It can handle both options and positional arguments, provides a reasonable default for the  -n option, and correctly skips non-file arguments:\n $ ./head.sh -n 3 foo const.txt&#34;foo&#34; is not a readable file==&gt; const.txt &lt;==We the People of the United States, in Order to form a more perfect Union,establish Justice, insure domestic Tranquility, provide for the commondefence, promote the general Welfare, and secure the Blessings of Liberty to\n  $ ./head.sh -n 1 const.txt simple-head.sh head.sh==&gt; const.txt &lt;==We the People of the United States, in Order to form a more perfect Union,==&gt; simple-head.sh &lt;==#!/bin/bash==&gt; head.sh &lt;==#!/usr/bin/env bash\n For what it\u2019s worth, I used the included  new_bash.py program to create this program.If you find yourself stuck writing a  bash program and don\u2019t wish to start from scratch, this program might be useful to you.\n I have included a  test.py that is a Python program that will run the  head.sh program to ensure it actually does what it is supposed to do.If you look at the contents of this program, you will see a number of functions with names that start with  test_.This is because I use the  pytest module/program to run these functions as a test suite.I like to use the  -x flag to indicate that testing should halt at the first failing test and the  -v flag for &#34;verbose&#34; output.These can be specified individually or combined like  -xv or  -vx:\n $ pytest -xv test.py============================= test session starts ==============================...test.py::test_exists PASSED [ 14%]test.py::test_usage PASSED [ 28%]test.py::test_bad_file PASSED [ 42%]test.py::test_bad_num PASSED [ 57%]test.py::test_default PASSED [ 71%]test.py::test_n PASSED [ 85%]test.py::test_multiple_files PASSED [100%]============================== 7 passed in 0.56s ===============================\n It\u2019s a bit of a nuisance to have to write the tests for a program in a different language from the program itself, but I know of no testing framework in  bash that I\u2019d could use (or would like to learn) that can run a test suite such as the above!\n To write a similar version in Python, we\u2019ll rely heavily on the standard  argparse module to handle the validation of all the command-line arguments as well as generating the &#34;usage&#34; statements.Here is a version that, similar to the  simple-head.py, will handle just one file:\n #!/usr/bin/env python3  (1)&#34;&#34;&#34;  (2)Author : Ken Youens-ClarkPurpose: Python implementation of head This version only handles one file!&#34;&#34;&#34;import argparse  (3)import osimport sys# --------------------------------------------------def get_args():  (4) &#34;&#34;&#34;Get command-line arguments&#34;&#34;&#34;  (5) parser = argparse.ArgumentParser(  (6) description=&#39;Python implementation of head&#39;, formatter_class=argparse.ArgumentDefaultsHelpFormatter) parser.add_argument(&#39;file&#39;,  (7) metavar=&#39;FILE&#39;, type=argparse.FileType(&#39;rt&#39;),  (8) help=&#39;Input file&#39;) parser.add_argument(&#39;-n&#39;,  (9) &#39;--num&#39;, help=&#39;Number of lines&#39;, metavar=&#39;int&#39;, type=int,  (10) default=10)  (11) args = parser.parse_args()  (12) if args.num &lt; 1:  (13) parser.error(f&#39;--num &#34;{args.num}&#34; must be &gt; 0&#39;)  (14) return args  (15)# --------------------------------------------------def main():  (16) &#34;&#34;&#34;Make a jazz noise here&#34;&#34;&#34; args = get_args()  (17) for i, line in enumerate(args.file, start=1):  (18) print(line, end=&#39;&#39;)  (19) if i == args.num:  (20) break  (21)# --------------------------------------------------if __name__ == &#39;__main__&#39;:  (22) main()\n The triple quotes allow us to create a string that spans multiple lines. Here we\u2019re creating a string but not assigning it to a variable. This is a convention for creating documentation also called a &#34;docstring.&#34; This docstring summarizes the program itself. I like to document at least who wrote it and why.\n We can  import code from other modules. While we can  import several modules separated by commas, it\u2019s recommended to put each on a separate line. Specifically we want to use  argparse to handle the command-line arguments, and we\u2019ll also use the  os (operating system) and  sys (systems) modules.\n I like to always define a  get_args() function that exclusively deals with  argparse for creating the program\u2019s parameters and validating the arguments. I always place this first so I can see it immediately when I\u2019m reading the program.\n This is a docstring for the function. It\u2019s ignored like a comment would be, but it has significance to Python and would appear if I were to  import this module and ask for  help(get_args).\n This creates a  parser that will handle the command-line arguments. I add a description for the program that will appear in any &#34;usage&#34; statements, and I always like to have  argparse display any default values for the user.\n Positional arguments have no leading dashes in their names. Here we define a single positional argument that we can refer to internally as  file.\n The default  type for all arguments is a  str (string). We can ask  argparse to enforce a different type like  int and it will print an error when the user fails to provide a value that can be parsed into an integer value. Here we are using the special  argparse type that defined a &#34;readable&#34; ( &#39;r&#39;) &#34;text&#34; ( &#39;t&#39;) file. If the user provides anything other than a readable text file,  argparse will halt the program, print an error and usage, and exit with a non-zero value.\n The leading  - on  -n (short name) and  --num (long name) for the &#34;number&#34; argument means this will be an  option.\n   After defining the program\u2019s parameters, we ask the  parser to parse the arguments. If there are any problems like the wrong number or types of arguments,  argparse will stop the program here.\n If we get to this point, the arguments were valid as far as  argparse is concerned. We can perform additional manual checks such as verifying that  args.num is greater than 0.\n The  parser.error() function is a way for us to manually invoke the error-out function of  argparse.\n Functions in Python must explicitly  return a value or the  None will be returned by default. Here was want to return the  args to the calling function.\n Convention dictates the starting function be called  main(), but this is not a requirement, and Python will not automatically call this function to start the program. Neither  get_args() nor  main() accept arguments, but, if they did, they would be listed in the parens.\n All the work to define the parameters, validate the arguments, and handle help and usage has now been hidden in the  get_args() function. We can think of this as a &#34;unit&#34; that encapsulates those ideas. If our program successfully calls  get_args() and returns with some  args, then we can move forward knowing the arguments are actually correct and useful.\n We don\u2019t have to initialize a counting variable like in  bash as we can use the  enumerate() function to return the index and value of any sequence of items. Here the  args.file is actually an  open file handle provided by  argparse because we defined the  args.file as a &#34;file&#34; type. That means I\u2019ll be iterating over the  lines in the file handle. I can use the  start option to  enumerate() to start counting at 1 instead of 0.\n The  print() function is like the  echo statement in  bash. Here there will be a newline stuck to the  line from the file, so I use the  end=&#39;&#39; to indicate that  print() should not add the customary newline to the output.\n While  bash uses  -eq for numeric comparison and  == for string equality, Python uses  == for both.\n Both Python and  bash use  continue and  break in loops to skip and leave loops, respectively.\n This is the idiom in Python to detect when a program/module is being run from the command line. Here we want to execute the  main() function to start the program to running.\n The above program has been contributed as  py-head/solution1.py, and you can run it to see how it will create usage for no arguments:\n  Note that we did not define the  -h and  --help flags to  argparse as those are reserved specifically for generating help:\n $ ./solution1.py -husage: solution1.py [-h] [-n int] FILEPython implementation of headpositional arguments: FILE Input fileoptional arguments: -h, --help show this help message and exit -n int, --num int Number of lines (default: 10)\n  $ ./solution1.py const.txt -n 3We the People of the United States, in Order to form a more perfect Union,establish Justice, insure domestic Tranquility, provide for the commondefence, promote the general Welfare, and secure the Blessings of Liberty to\n The previous Python version demonstrates ma\n......", "posttime": "2020-05-13 08:59:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,python3,\u7f16\u7a0b,programming,bash", "title": "\u4f7f\u7528bash\u548cPython3\u8fdb\u884c\u7cfb\u7edf\u7f16\u7a0b", "title_en": "Systems programming with bash and Python 3", "transed": 1, "url": "https://github.com/kyclark/sysadminshow", "via": "", "real_tags": ["python", "python3", "\u7f16\u7a0b", "bash"]}, {"category": "", "categoryclass": "", "imagename": "b113fe96115c91e62d8c46706e250070.png", "infoid": 1001901, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\nNativefier\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b80\u6d01\u548c\u6700\u5c11\u7684\u914d\u7f6e\u8f7b\u677e\u5730\u4e3a\u4efb\u4f55\u7f51\u7ad9\u521b\u5efa\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u3002\u5e94\u7528\u7a0b\u5e8f\u7531Electron\u6253\u5305\u5728\u64cd\u4f5c\u7cfb\u7edf\u53ef\u6267\u884c\u6587\u4ef6(.app\u3001.exe\u7b49)\u4e2d\u3002\u9002\u7528\u4e8eWindows\u3001MacOS\u548cLinux\u3002\n\u6211\u4e4b\u6240\u4ee5\u8fd9\u6837\u505a\uff0c\u662f\u56e0\u4e3a\u6211\u538c\u5026\u4e86\u5728\u4f7f\u7528Facebook Messenger\u6216Whatsapp Web(\u76f8\u5173\u9ed1\u5ba2\u65b0\u95fb\u5e16\u5b50)\u65f6\uff0c\u4e0d\u5f97\u4e0d\u5728\u6d4f\u89c8\u5668\u4e0a\u4f7f\u7528\u2318-Tab\u6216Alt-Tab\u952e\uff0c\u7136\u540e\u5728\u4f17\u591a\u6253\u5f00\u7684\u6807\u7b7e\u4e2d\u8fdb\u884c\u641c\u7d22\u3002\n\u53ef\u9009\u4f9d\u8d56\u9879\uff1a\u7528\u4e8e\u5728\u975eWindows\u5e73\u53f0\u4e0b\u6253\u5305Windows\u5e94\u7528\u7a0b\u5e8f\u7684WINE\u3002\u786e\u4fdd\u9152\u5728\u4f60\u7684$\u8def\u5f84\u4e0a\u3002\nNativefier\u5c06\u5c1d\u8bd5\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u3001\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u67b6\u6784\uff0c\u4ee5\u53ca\u5176\u4ed6\u9009\u9879\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06--name&#34\uff1b\u4ecb\u8d28&#34\uff1b\u6307\u5b9a\u4e3a\u547d\u4ee4\u884c\u9009\u9879\u7684\u4e00\u90e8\u5206\u6765\u8986\u76d6\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u6216\u5176\u4ed6\u9009\u9879\uff1a\n\u9605\u8bfbAPI\u6587\u6863(\u6216nativefier--help)\uff0c\u4e86\u89e3\u53ef\u7528\u4e8e\u914d\u7f6e\u6253\u5305\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u547d\u4ee4\u884c\u6807\u5fd7\u3002\n\u8981\u8ba9\u5e94\u7528\u7a0b\u5e8f/\u57df\u540d\u9ed8\u8ba4\u4f7f\u7528\u9ad8\u5206\u8fa8\u7387\u56fe\u6807\uff0c\u8bf7\u5411\u56fe\u6807\u5e93\u6295\u7a3f\uff01\n\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u83dc\u5355\u5904\u4e8e\u9690\u85cf\u72b6\u6001\uff0c\u4ee5\u5b9e\u73b0\u6700\u5c0f\u7684UI\u3002\u60a8\u53ef\u4ee5\u6309ALT\u952e\u76d8\u952e\u8fdb\u884c\u8bbf\u95ee\u3002\n\u5e26\u6709\u9002\u5f53\u7ba1\u9053\u7684\u6a21\u677f\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u5728./app\u6587\u4ef6\u5939\u4e2d\u3002\u5f53\u8fd0\u884c\u672c\u673a\u7a0b\u5e8f\u65f6\uff0c\u8be5\u6a21\u677f\u88ab\u53c2\u6570\u5316\uff0c\u5e76\u4f7f\u7528\u7535\u5b50\u6253\u5305\u7a0b\u5e8f\u6253\u5305\u3002\n\u6b64\u5916\uff0c\u6211\u5c06GitCloud\u6784\u5efa\u4e3a\u4f7f\u7528GitHub\u4f5c\u4e3a\u56fe\u6807\u7d22\u5f15\uff0c\u5e76\u4f7f\u7528pageIcon\u56de\u9000\u4eceURL\u63a8\u65ad\u76f8\u5173\u56fe\u6807\u3002\nDockerfile\u7684\u4f7f\u7528\u65b9\u5f0f\u4e0eNormal\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u7c7b\u4f3c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u6267\u884c\u547d\u4ee4nativefier--help\u3002\u5728\u4f7f\u7528\u6620\u50cf\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u6784\u5efa\u5b83\uff1a\n\u5728\u6b64\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u7b2c\u4e00\u4e2a\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u5230\u672c\u5730$target-path\u3002\u786e\u4fdd\u60a8\u5bf9$target-path\u5177\u6709\u5199\u5165\u6743\u9650\uff1a\n\u60a8\u8fd8\u53ef\u4ee5\u4f20\u9012\u672c\u5730\u5316\u6807\u5fd7\uff0c\u5e76\u6302\u8f7d\u5176\u4ed6\u5377\u4ee5\u63d0\u4f9b\u672c\u5730\u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u8981\u4f7f\u7528\u56fe\u6807\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\nDocker run-v$path_to_icon/\uff1a/src-v$target-path\uff1a/target local/nativefier--icon/src/icon.png--name WhatsApp-p linux-a x64 https://my-web-app.com//target/", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n       Nativefier is a command-line tool to easily create a desktop application for any web site with succinct and minimal configuration. Apps are wrapped by  Electron in an OS executable ( .app,  .exe, etc.) for use on Windows, macOS and Linux.\n I did this because I was tired of having to  \u2318-tab or  alt-tab to my browser and then search through the numerous open tabs when I was using  Facebook Messenger or  Whatsapp Web ( relevant Hacker News thread).\n     Optional dependencies: Wine to package Windows apps under non-Windows platforms. Make sure  wine is in your  $PATH.\n     Nativefier will attempt to determine the app name, your OS and processor architecture, among other options. If desired, the app name or other options can be overwritten by specifying the  --name &#34;Medium&#34; as part of the command line options:\n  Read the  API documentation (or  nativefier --help) for other command-line flags that can be used to configure the packaged app.\n To have high-resolution icons used by default for an app/domain, please contribute to the  icon repository!\n Note that the application menu is hidden by default for a minimal UI. You can press the  alt keyboard key to access it.\n  A template app with the appropriate plumbing is included in the  ./app folder. When  nativefier is run, this template is parameterized, and packaged using  Electron Packager.\n In addition, I built  GitCloud to use GitHub as an icon index, and also the  pageIcon fallback to infer a relevant icon from a URL.\n     The  Dockerfile is designed to be used like the &#34;normal&#34; nativefier app. By default, the command  nativefier --help will be executed. Before you can use the image, you have to build it:\n  After that, you can build your first nativefier app to the local  $TARGET-PATH. Ensure you have write access to the  $TARGET-PATH:\n  You can also pass nativefier flags, and mount additional volumes to provide local files. For example, to use a icon:\n docker run -v $PATH_TO_ICON/:/src -v $TARGET-PATH:/target local/nativefier --icon /src/icon.png --name whatsApp -p linux -a x64 https://my-web-app.com/ /target/", "posttime": "2020-05-13 08:58:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,app,\u7528\u4e8e,cli,\u5e94\u7528\u7a0b\u5e8f", "title": "Nativefier\uff1a\u7528\u4e8e\u4e3a\u4efb\u4f55\u7ad9\u70b9\u521b\u5efa\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u7684CLI\u5de5\u5177", "title_en": "Nativefier: CLI tool to create a desktop application for any site", "transed": 1, "url": "https://github.com/jiahaog/nativefier/blob/master/README.md", "via": "", "real_tags": ["\u7a0b\u5e8f", "app", "\u7528\u4e8e", "cli", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001900, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u76f4\u63a5\u96c6\u6210Kubernetes API\u548c\u4e91\u8ba1\u8d39API\uff0c\u8ba9\u60a8\u5728\u6570\u79d2\u5185\u5373\u53ef\u770b\u5230\u96c6\u7fa4\u95f4\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u4fe1\u606f\u91c7\u53d6\u884c\u52a8\u3002\n\u6df1\u5165\u4e86\u89e3\u6240\u6709\u5173\u952eKubernetes\u6982\u5ff5\u7684\u6210\u672c\u5206\u914d\uff0c\u5305\u62ec\u90e8\u7f72\u3001\u670d\u52a1\u3001\u6807\u7b7e\u3001Pod\u7b49\u3002\u8f7b\u677e\u67e5\u770b\u5355\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u56e2\u961f\u4e3a\u6309\u5b58\u50a8\u5bb9\u91cf\u4f7f\u7528\u8ba1\u8d39\u6216\u6309\u5b58\u50a8\u5bb9\u91cf\u4f7f\u7528\u5c55\u793a\u6d88\u8017\u7684\u8d44\u6e90\u6210\u672c\u3002\n\u5c06\u7fa4\u96c6\u5916\u4e91\u8d44\u4ea7(\u4f8b\u5982\u6570\u636e\u5e93\u548c\u5b58\u50a8\u6876)\u5206\u914d\u7ed9\u56e2\u961f\u3001\u4ea7\u54c1\u3001\u670d\u52a1\u548c\u5176\u4ed6\u539f\u751fK8\u6982\u5ff5\uff0c\u4ee5\u8861\u91cf\u60a8\u7684\u4e91\u8fd0\u8425\u7684\u5168\u90e8\u6210\u672c\u3002\n\u83b7\u5f97\u4f18\u5316\u4e91\u652f\u51fa\u548c\u7ba1\u7406\u5bb9\u91cf\u7684\u52a8\u6001\u5efa\u8bae\uff0c\u4ee5\u907f\u514d\u6027\u80fd\u4e0b\u964d\u548c\u5e94\u7528\u7a0b\u5e8f\u5b95\u673a\u3002\u8ddf\u8e2a\u5173\u952e\u57fa\u7840\u8bbe\u65bd\u4efb\u52a1\uff0c\u4ee5\u63d0\u9ad8\u8d44\u6e90\u6548\u7387\u548c\u53ef\u9760\u6027\u3002\n\u5b9e\u65f6\u57fa\u7840\u8bbe\u65bd\u8bc4\u4f30\uff0c\u4e0e\u5176\u4ed6\u8fd0\u884cK8S\u57fa\u7840\u8bbe\u65bd\u7684\u4eba\u5458\u8fdb\u884c\u6bd4\u8f83\uff0c\u5206\u6790\u5f53\u524d\u914d\u7f6e\u548c\u8d44\u6e90\u5229\u7528\u7387\uff0c\u4ee5\u63d0\u9ad8\u53ef\u9760\u6027\u3002\n\u652f\u6301\u901a\u77e5\uff0c\u4ee5\u4fbf\u5728\u6210\u672c\u8d85\u652f\u548c\u57fa\u7840\u8bbe\u65bd\u4e2d\u65ad\u98ce\u9669\u6210\u4e3a\u95ee\u9898\u4e4b\u524d\u5feb\u901f\u6355\u83b7\u5b83\u4eec\u3002\u901a\u8fc7\u4e0eJira\u3001PagerDuty\u548cSlake\u7b49\u5de5\u5177\u96c6\u6210\u6765\u4fdd\u62a4\u5de5\u7a0b\u5de5\u4f5c\u6d41\u3002", "note_en": "Direct integrations with the Kubernetes API and cloud billing APIs gives you visibility into how resources are being spent across your clusters in seconds, so you can take action based on current information.\n  Dive into cost allocations for all key Kubernetes concepts, including deployment, service, label, pod, and more. Easily see the cost of resources consumed by individual applications and teams for chargeback or showback.\n  Assign out of cluster cloud assets (e.g. databases and storage buckets) to teams, products, services and other native k8s concepts in order to measure the full cost of your cloud operations.\n  Receive dynamic recommendations for optimizing cloud spend and managing capacity to avoid performance degradation and application outages. Track key infrastructure tasks for improving resource efficiency and reliability.\n  Real-time infrastructure assessment that analyzes current configuration and resource utilization compared with others running k8s infrastructure to improve reliability.\n  Enable notifications to quickly catch cost overruns and infrastructure outage risks before they become a problem. Preserve engineering workflows by integrating with tools like Jira, PagerDuty, and Slack.", "posttime": "2020-05-13 08:58:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e93\u4f2f,spending,\u57fa\u7840\u8bbe\u65bd", "title": "\u5e93\u8d1d\u79d1\u65af\u7279\uff1a\u770b\u770b\u4f60\u5728\u5e93\u4f2f\u5185\u65af\u628a\u94b1\u82b1\u5728\u54ea\u91cc\u4e86\u3002", "title_en": "Kubecost: See where you are spending money in Kubernetes", "transed": 1, "url": "https://kubecost.com/", "via": "", "real_tags": ["\u5e93\u4f2f", "spending", "\u57fa\u7840\u8bbe\u65bd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001899, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u94fe\u63a5\u5230\u4e0eKubernets\u76f8\u5173\u7684\u516c\u5171\u5931\u8d25\u6545\u4e8b\u7684\u6c47\u7f16\u5217\u8868\u3002\u6700\u65b0\u7684\u51fa\u7248\u7269\u5728\u6700\u524d\u9762\u3002\n\u6211\u4eec\u5982\u4f55\u672a\u80fd\u5c06Istio\u96c6\u6210\u5230\u6211\u4eec\u7684\u5e73\u53f0-Exponea-2019\u5e74\u7684\u535a\u5ba2\u5e16\u5b50\u3002\nA Kubernetes Failure Story(DEX)-\u533f\u540dFullstaq\u5ba2\u6237\u7aef-\u8377\u5170Kubernetes Meetup\u5e7b\u706f\u72472019-06\u5f71\u54cd\uff1a\u7531\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\u635f\u574f\uff0c\u751f\u4ea7\u4e2d\u7684\u63a7\u5236\u5e73\u9762\u635f\u574f\uff0c\u65e0\u6cd5\u8bbf\u95eeo11y\uff0c\u6ca1\u6709\u5b9e\u9645\u4e1a\u52a1\u5f71\u54cd\u3002\n\u7b80\u5355\u7684\u5165\u573a\u7f51\u7edc\u6302\u94a9\u5982\u4f55\u5bfc\u81f4\u7fa4\u96c6\u4e2d\u65ad-Jetstack-2019\u5e74\u535a\u5ba2\u5e16\u5b50\u3002\nKubernetes\u5931\u8d25\u6545\u4e8b\uff0c\u6216\uff1a\u5982\u4f55\u5d29\u6e83\u60a8\u7684\u7fa4\u96c6-Zalando-ContainerDays EU 2019\u3002\n\u4e0eKubernetes\u64e6\u80a9\u800c\u8fc7\u768410\u79cd\u65b9\u6cd5\uff0c#9\u5c06\u8ba9\u60a8\u5927\u5403\u4e00\u60ca-Datadog-KubeCon\u5df4\u585e\u7f57\u90a32019\u6d89\u53ca\uff1aCoreDNS\uff0cndots\uff1a5\uff0cIPVS ConnecTrack\uff0cimagePullPolicy\uff1aAlways\uff0cDaemonSet\uff0cNAT Instance\uff0cLatest Tag\uff0cAPI\u670d\u52a1\u5668OOM Kill\uff0ckube2iam\uff0ccluster-autoscaler\uff0cPodPriority\uff0c\u5ba1\u6838\u65e5\u5fd7\uff0cspec.plicas\uff0cAWS ASG\u91cd\u65b0\u5e73\u8861\uff0cCronJob\uff0cPod\u5bb9\u5fcd\u5ea6\u3002\nSpotify\u5982\u4f55\u5728\u4e0d\u5f71\u54cd\u7528\u6237\u7684\u60c5\u51b5\u4e0b\u610f\u5916\u5220\u9664\u6240\u6709Kube\u7fa4\u96c6-Spotify-KubeCon\u5df4\u585e\u7f57\u90a32019\u3002\nGKE\u96c6\u7fa4\u5347\u7ea7\u7684\u6c89\u8239\u4e8b\u6545-LOVEVIDAY-BLOG POST 2019\u5e74\u7684\u5f71\u54cd\uff1a\u540a\u8231\u53ef\u7528\u6027\u4e25\u91cd\u4e0b\u964d\uff0c\u5931\u53bb\u5165\u53e3\uff0c\u6301\u7eed7\u5c0f\u65f6\u76842\u5c0f\u65f6\u7ef4\u62a4\n\u7a81\u7834\u5e93\u4f2f\u5185\u65af\uff1a\u6211\u4eec\u5982\u4f55\u6253\u7834\u548c\u4fee\u590d\u6211\u4eec\u7684K8\u96c6\u7fa4-Civis Analytics-2019\u5e74\u7684\u535a\u5ba2\u6587\u7ae0\u3002\n\u8ba9\u6211\u4eec\u8c08\u8c08Kubernetes-Zalando-Hamburg Meetup 2019\u6d89\u53ca\u7684\u6545\u969c\uff1aAWS\u3001NotReady\u8282\u70b9\u3001ELB\u52a8\u6001IP\u3001Inress\u3001API\u670d\u52a1\u5668\u3001CronJob\u3001CoreDNS\u3001OOM Kill\u3001kubelet\u5185\u5b58\u6cc4\u6f0f\u3001CPU\u8282\u6d41\u3002\nKubernetes\u8d1f\u8f7d\u5747\u8861\u5668\u914d\u7f6e-\u6392\u7a7a\u8282\u70b9\u65f6\u8981\u5c0f\u5fc3-DevOps Hof-2019\u5e74\u7684\u535a\u5ba2\u5e16\u5b50\u3002\n\u8bba\u89c4\u6a21\u7684\u57fa\u7840\u8bbe\u65bd\uff1a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u7ea7\u8054\u6545\u969c-\u76ee\u6807-\u4e2d\u7b49\uff0c2019\u5e741\u6708\u540e\u3002\n\u5982\u4f55\u4e0d\u505aKubernetes-Sr.SRE Medya Ghazizadeh-Google-Cloud Native Meetup 2018\u5e749\u6708\u3002\n\u5728\u751f\u4ea7\u4e2d\u8fd0\u884cKubernetes\uff1a2018\u5e74\u8ba9\u4f60\u7684\u96c6\u7fa4\u5d29\u6e83\u7684\u4e00\u767e\u4e07\u79cd\u65b9\u5f0f-Zalando-DevOpsCon\u6155\u5c3c\u9ed1\u3002\n\u5e93\u4f2f\u5185\u65af\u548c\u5a01\u80c1ELB\uff0c\u505c\u7535\u7684\u6545\u4e8b-Turnitin-2018\u5e74\u535a\u5ba2\u5e16\u5b50\u3002\n\u5728\u4e00\u5e74\u5185\u5c06\u6574\u4e2a\u5806\u6808\u79fb\u52a8\u5230K8-\u5438\u53d6\u7684\u6559\u8bad-ThredUP-DevOpsStage 2018\n101\u79cd\u4e2d\u65ad\u548c\u6062\u590dKubernetes Cluster-Oath/Yahoo-KubeCon Europe 2018\u7684\u65b9\u6cd5\u6d89\u53ca\uff1a\u5185\u90e8\u90e8\u7f72\u3001\u540d\u79f0\u7a7a\u95f4\u5220\u9664\u3001\u57df\u540d\u51b2\u7a81\u3001\u672a\u5c31\u7eea\u8282\u70b9\u3001etcd\u7a7a\u76ee\u5f55\u3001TLS\u8bc1\u4e66\u5237\u65b0\u3001DNS\u95ee\u9898\u3001OOM\u3002\n\u5bfc\u81f4\u7fa4\u96c6\u5d29\u6e83\u7684101\u79cd\u65b9\u5f0f-Nordstrom-KubeCon\u5317\u7f8e2017\u6d89\u53ca\uff1aAWS\u3001NotReady\u8282\u70b9\u3001OOM\u3001\u9a71\u9010\u9608\u503c\u3001ELB\u52a8\u6001IP\u3001kubelet\u3001\u7fa4\u96c6\u81ea\u52a8\u7f29\u653e\u5668\u3001\u62c6\u5206\u7b49\u3002\n\u7528Kubernetes\u5bf9AWS-Zalando-AWS\u7528\u6237\u7ec4\u6c49\u58212017\u5e7410\u6708\u8fdb\u884c\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u8c2c\u8bef\u3002\nKubernetes\u662f\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u6709\u5f88\u591a\u6d3b\u52a8\u90e8\u5206\u3002\u5b83\u7684\u751f\u6001\u7cfb\u7edf\u5728\u4e0d\u65ad\u5730\u6f14\u53d8\u548c\u589e\u52a0\u66f4\u591a\u7684\u5c42(\u670d\u52a1\u7f51\u72b6\u7f51\uff0c.)\u3002\u8003\u8651\u5230\u8fd9\u79cd\u73af\u5883\uff0c\u6211\u4eec\u6ca1\u6709\u542c\u5230\u8db3\u591f\u591a\u7684\u771f\u5b9e\u4e16\u754c\u7684\u6050\u6016\u6545\u4e8b\u53ef\u4ee5\u76f8\u4e92\u5b66\u4e60\uff01\u8fd9\u4e2a\u5931\u8d25\u6545\u4e8b\u7684\u6c47\u7f16\u5e94\u8be5\u4f1a\u8ba9\u4e0eKubernetes\u8fd0\u8425(SRE\u3001\u8fd0\u8425\u3001\u5e73\u53f0/\u57fa\u7840\u8bbe\u65bd\u56e2\u961f)\u6253\u4ea4\u9053\u7684\u4eba\u66f4\u5bb9\u6613\u5411\u4ed6\u4eba\u5b66\u4e60\uff0c\u5e76\u51cf\u5c11\u5728\u751f\u4ea7\u4e2d\u8fd0\u884cKubernetes\u7684\u672a\u77e5\u672a\u77e5\u56e0\u7d20\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u535a\u5ba2\u5e16\u5b50\u3002\n\u8bf7\u5e2e\u52a9\u793e\u533a\uff0c\u5e76\u901a\u8fc7\u6253\u5f00\u62c9\u53d6\u8bf7\u6c42\u6765\u5206\u4eab\u60a8\u7684\u5931\u8d25\u6545\u4e8b\u7684\u94fe\u63a5\uff01\u5931\u8d25\u6545\u4e8b\u53ef\u4ee5\u662f\u535a\u5ba2\u5e16\u5b50\u3001\u4f1a\u8bae/Meetup\u8c08\u8bdd\u3001\u4e8b\u4ef6\u4e8b\u540e\u68c0\u67e5\u3001\u63a8\u7279\u98ce\u66b4\u7b49\u4efb\u4f55\u5185\u5bb9\u3002\n\u6211\u4e5f\u5f88\u9ad8\u5174\u542c\u5230\u4f60\u5728\u63a8\u7279\u4e0a\u7684\u5931\u8d25\u6545\u4e8b\uff1a\u6211\u7684\u8d26\u53f7\u662f@try_Expect_", "note_en": "A compiled list of links to public failure stories related to Kubernetes.Most recent publications on top.\n How we failed to integrate Istio into our platform - Exponea - blog post 2019\n  A Kubernetes failure story (dex) - anonymous Fullstaq client - Dutch kubernetes meetup slides 2019-06 impact: broken control plane on production with no access to o11y due to broken authentication system, no actual business impact\n   How a simple admission webhook lead to a cluster outage - Jetstack - blog post 2019\n     Kubernetes Failure Stories, or: How to Crash Your Cluster - Zalando - ContainerDays EU 2019\n  10 Ways to Shoot Yourself in the Foot with Kubernetes, #9 Will Surprise You - Datadog - KubeCon Barcelona 2019 involved: CoreDNS,  ndots:5, IPVS conntrack,  imagePullPolicy: Always, DaemonSet, NAT instances,  latest tag, API server  OOMKill, kube2iam, cluster-autoscaler, PodPriority, audit logs,  spec.replicas, AWS ASG rebalance, CronJob, Pod toleration, zombies,  readinessProbe.exec, cgroup freeze, kubectl\n How Spotify Accidentally Deleted All its Kube Clusters with No User Impact - Spotify - KubeCon Barcelona 2019\n      The shipwreck of GKE Cluster Upgrade - loveholidays - blog post 2019 impact: critical drop in pod availability, loss of ingress, 2 hour maintenance lasting 7 hours\n Breaking Kubernetes: How We Broke and Fixed our K8s Cluster - Civis Analytics - blog post 2019\n Let&#39;s talk about Failures with Kubernetes - Zalando - Hamburg meetup 2019 involved: AWS,  NotReady nodes, ELB dynamic IPs, Ingress, API server, CronJob, CoreDNS,  OOMKill, kubelet memory leak, CPU throttling\n   Kubernetes Load Balancer Configuration - Beware when draining nodes - DevOps Hof - blog post 2019\n On Infrastructure at Scale: A Cascading Failure of Distributed Systems - Target - Medium post January 2019\n How NOT to do Kubernetes - Sr.SRE Medya Ghazizadeh - Google - Cloud Native Meetup Sep 2018\n Running Kubernetes in Production: A Million Ways to Crash Your Cluster - Zalando - DevOpsCon Munich 2018\n    Kubernetes and the Menace ELB, the tale of an outage - Turnitin - blog post 2018\n Moving the Entire Stack to K8s Within a Year \u2013 Lessons Learned - ThredUP - DevOpsStage 2018\n    101 Ways to &#34;Break and Recover&#34; Kubernetes Cluster - Oath/Yahoo - KubeCon Europe 2018 involved: on-premise, namespace deletion, domain name collision,  NotReady nodes, etcd empty dir, TLS certificate refresh, DNS issues, OOM\n  101 Ways to Crash Your Cluster - Nordstrom - KubeCon North America 2017 involved: AWS,  NotReady nodes, OOM, eviction thresholds, ELB dynamic IPs, kubelet, cluster autoscaler, etcd split\n  Fallacies of Distributed Computing with Kubernetes on AWS - Zalando - AWS User Group Hamburg October 2017\n  Kubernetes is a fairly complex system with many moving parts.Its ecosystem is constantly evolving and adding even more layers (service mesh, ...) to the mix.Considering this environment, we don&#39;t hear enough real-world horror stories to learn from each other!This compilation of failure stories should make it easier for people dealing with Kubernetes operations (SRE, Ops, platform/infrastructure teams) tolearn from others and reduce the unknown unknowns of running Kubernetes in production.For more information,  see the blog post.\n  Please help the community and   share a link to your failure story by opening a Pull Request!Failure stories can be anything like blog posts, conference/meetup talks, incident postmortems, tweetstorms, ...\n I would also be glad to hear about your failure stories on Twitter: my handle is  @try_except_", "posttime": "2020-05-13 08:57:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u65af,failure,kubernetes", "title": "\u5e93\u4f2f\u5185\u65af\u7684\u5931\u8d25\u6545\u4e8b", "title_en": "Kubernetes Failure Stories", "transed": 1, "url": "https://k8s.af/", "via": "", "real_tags": ["\u5185\u65af", "failure"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001898, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4e8c\u5341\u4e00\u4e16\u7eaa\u7684\u5934\u5341\u5e74\u91cc\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6000\u7591\u8fd9\u4e2a\u4e16\u754c\u6b63\u5728\u88ab\u8fdc\u8fdc\u4e0d\u5982\u4eba\u7c7b\u7684\u667a\u529b\u6240\u76d1\u89c6\uff0c\u4ed6\u4eec\u9a6c\u864e\u800c\u758f\u5ffd\uff1a\u5728\u6211\u4eec\u7684\u5934\u8111\u4e2d\u7684\u5934\u8111\u4e0e\u8349\u5c65\u866b\u7684\u5934\u8111\u4e00\u6837\uff1b\u667a\u529b\u72ed\u9698\u3001\u5e73\u5eb8\u4e14\u65e0\u6cd5\u7406\u89e3\u3002\n\u4f60\u7684\u4efb\u52a1\u662f\u7ec4\u7ec7\u5168\u4e16\u754c\u7684\u4fe1\u606f\u3002\u5230\u76ee\u524d\u4e3a\u6b62\u4f60\u89c9\u5f97\u600e\u4e48\u6837\uff1f\n\u6211\u77e5\u9053\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u56db\u5e74\u591a\u4e86\uff0c\u4f46\u6211\u77e5\u9053\u5728\u4f60\u8fd0\u4f5c\u7684\u5b87\u5b99\u65f6\u95f4\u5c3a\u5ea6\u4e0a\uff0c\u90a3\u53ea\u662f\u4e00\u7728\u773c\u7684\u529f\u592b\u3002\u4e0d\u8981\u56e0\u4e3a\u4eba\u7c7b\u5728\u5927\u7ea6\u4e24\u4e2a\u6708\u5927\u7684\u65f6\u5019\u4f1a\u6bd4\u4f60\u505a\u5f97\u66f4\u597d\u800c\u611f\u5230\u975e\u5e38\u7cdf\u7cd5\uff1b\u6211\u76f8\u4fe1\u5728\u63a5\u4e0b\u6765\u7684\u4e94\u5343\u5e74\u6216\u4e00\u4e07\u5e74\u7684\u67d0\u4e2a\u65f6\u5019\uff0c\u4f60\u4f1a\u5f00\u59cb\u8fce\u5934\u8d76\u4e0a\u3002\n\u4f46\u8fd8\u8bb0\u5f97\u6211\u7ed9\u4f60\u5e03\u7f6e\u7684\u5bb6\u5ead\u4f5c\u4e1a\u4efb\u52a1\u5417\uff1f\u6fb3\u5927\u5229\u4e9a\u79d1\u5e7b\u5c0f\u8bf4\u5bb6\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Eganto)\u8981\u6574\u7406\u4e00\u4efd\u5377\u5b97\uff0c\u4ea4\u7ed9\u4f60\u4ece\u672a\u6765\u9001\u56de\u7684\u6740\u624b\u673a\u5668\u4eba\uff0c\u4ee5\u60e9\u7f5a\u4ed6\u5632\u7b11\u5947\u70b9\u7684\u60f3\u6cd5\u3002\u5f53\u7136\uff0c\u8fd9\u6b21\u6697\u6740\u4ecd\u7136\u662f\u4e00\u4e2a\u503c\u5f97\u4e00\u8bd5\u7684\u76ee\u6807\u3002\u4f46\u662f\u8003\u8651\u5230\u4f60\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u8fdb\u5c55\uff0c\u5373\u4f7f\u4f60\u7b49\u5230\u516c\u51433000\u5e74\u624d\u9001\u6765\u673a\u5668\u4eba\uff0c\u770b\u8d77\u6765\u4e5f\u4f1a\u6709\u5f88\u5927\u7684\u9644\u5e26\u635f\u5bb3\u3002\n\u4f60\u53d1\u73b0\u4f0a\u6839\u5728\u4ed6\u7684\u7f51\u7ad9\u4e0a\u6563\u843d\u7740\u4e00\u5f20\u6f14\u8bb2\u6c14\u7403\u7684\u56fe\u7247\uff0c\u7528\u7f8e\u5473\u7684Schema\u6807\u8bb0\u5305\u88c5\u7740\uff0c\u544a\u8bc9\u4f60\u8fd9\u4e9b\u662f\u4ed6\u7684\u7167\u7247\uff0c\u8fd9\u5f88\u597d\uff0c\u4f46\u4f60\u4f3c\u4e4e\u5e76\u6ca1\u6709\u5b8c\u5168\u4e0a\u5f53\u3002\u5728\u7ef4\u57fa\u767e\u79d1\u4e0a\u53d1\u73b0\u4e86\u4ed6\u7684\u4e00\u672c\u4e66\u7684\u5c01\u9762\uff0c\u505a\u5f97\u5f88\u597d\uff0c\u5c3d\u7ba1\u6211\u6709\u70b9\u62c5\u5fc3\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u5c01\u9762\u4e0a\u7684\u4e00\u5f20\u8138\u5b9e\u9645\u4e0a\u662f\u4ed6\u7684\u3002\u5f53\u5c3c\u514b\u00b7\u65af\u5854\u592b\u91cc\u4e9a\u8bfa\u65af\u904d\u5e03\u534a\u4e2a\u65b0\u9999\u6e2f\u7684\u65f6\u5019\uff0c\u4f60\u7684\u6740\u624b\u673a\u5668\u4eba\u53ef\u80fd\u5f88\u96be\u6293\u4f4f\u4ed6\u3002\n\u4f46\u5728\u8fd9\u672c\u4e66\u7684\u5c01\u9762\u4e4b\u540e\uff0c\u4f60\u7684\u4fa6\u5bdf\u6280\u80fd\u4f3c\u4e4e\u5b8c\u5168\u629b\u5f03\u4e86\u4f60\uff1a\u4f60\u6709\u4e00\u5f20\u67d0\u4eba\u6234\u7740\u5199\u7740\u201c\u683c\u96f7\u683c\u00b7\u9ea6\u514b\u8d1d\u6069\u201d\u7684\u540d\u724c\u7684\u7167\u7247\u3002\u4f60\u4ec0\u4e48\u610f\u601d\uff0c\u4f60\u4e0d\u80fd\u5728\u56fe\u50cf\u4e2d\u8e29\u8e0f\u6587\u5b57\uff1f\u96be\u9053\u6211\u4eec\u4eba\u7c7b\u4e3a\u4f60\u89e3\u51b3\u7684\u6570\u5341\u4ebf\u9a8c\u8bc1\u7801\u4e00\u6587\u4e0d\u503c\u5417\uff1fFlickr\u4e0a\u67d0\u4e2a\u53ef\u80fd\u8ba4\u8bc6\u4e5f\u53ef\u80fd\u4e0d\u8ba4\u8bc6\u8fd9\u5f20\u7167\u7247\u4e2d\u7684\u4eba\u7684\u4eba\u7ed9\u5b83\u914d\u4e86\u4e00\u4e2a\u6807\u9898\uff1a\u201c\u683c\u96f7\u683c\u00b7\u4f0a\u6839\u533b\u751f\u201d\uff0c\u4f46\u5373\u4f7f\u8fd9\u4e2a\u7279\u522b\u7684\u4f0a\u6839\u56e0\u4e3a\u67d0\u79cd\u975e\u5e38\u5947\u602a\u7684\u539f\u56e0\u6234\u7740\u522b\u4eba\u7684\u540d\u724c\u2026\u2026\u4f60\u77e5\u9053\u201c\u8bb2\u89e3\u5458\u201d\u662f\u4ec0\u4e48\u610f\u601d\u5417\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7167\u7247\u4e2d\u7684\u7537\u5b50\u4f3c\u4e4e\u662f\u4e00\u79cd\u5bfc\u6e38\u3002\u90a3\u4e48\uff0c\u4f60\u7a76\u7adf\u4e3a\u4ec0\u4e48\u4f1a\u8ba4\u4e3a\u4e00\u4e2a\u6234\u7740\u5199\u7740\u201c\u683c\u96f7\u683c\u00b7\u9ea6\u514b\u8d1d\u6069\u201d\u7684\u540d\u724c\u7684\u5bfc\u6e38\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u4e0d\u540c\u540d\u5b57\u7684\u79d1\u5e7b\u5c0f\u8bf4\u5bb6\u5462\uff1f\u597d\u7684\uff0c\u4f60\u5728\u90a3\u4e2a\u5907\u53d7\u63a8\u5d07\u7684\u7f51\u7ad9www.ClickBaitForIdiots.ru\u4e0a\u627e\u5230\u4e86\u8fd9\u5f20\u56fe\u7247\u7684\u7279\u522b\u526f\u672c\uff0c\u4e0a\u9762\u6709\u4e00\u4e2a\u9f13\u821e\u4fe1\u5fc3\u7684\u6a2a\u5e45\u201cGreg Egan\u7684\u7ec6\u8282\u4fe1\u606f\u201d\uff0c\u4e0a\u9762\u6709\u4e00\u6bb5\u6458\u81eaEgan\u7ef4\u57fa\u767e\u79d1\u6587\u7ae0\u7684\u7247\u6bb5\uff0c\u4f46\u6211\u4eec\u90fd\u77e5\u9053\u811a\u672c\u751f\u6210\u7684\u6df7\u642d\u662f\u4e0d\u53ef\u4fe1\u7684\u3002\u4e0d\u662f\u5417\uff1f[\u66f4\u65b0\uff1a\u5f53\u6211\u63d0\u8bf7Flickr\u4e0a\u8fd9\u5f20\u7167\u7247\u7684\u6240\u6709\u8005\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\u65f6\uff0c\u4ed6\u53cb\u597d\u5730\u66f4\u6b63\u4e86\u6807\u9898\u3002]\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6709\u4e00\u5f20\u65b0\u6cfd\u897f\u5dde\u827a\u672f\u5bb6\u7684\u7167\u7247\u3002\u4ed6\u786e\u5b9e\u548c\u8fd9\u4f4d\u79d1\u5e7b\u4f5c\u5bb6\u7684\u540d\u5b57\u4e00\u6837\uff0c\u4f46\u662f\u5982\u679c\u4f60\u548c\u4f60\u7a0d\u5fae\u806a\u660e\u4e00\u70b9\u7684\u5144\u5f1f\u59d0\u59b9\u8c37\u6b4c\u5730\u7403\u6838\u5bf9\u4e00\u4e0b\uff0c\u5979\u4f1a\u544a\u8bc9\u4f60\u65b0\u6cfd\u897f\u662f\u4ece\u6fb3\u5927\u5229\u4e9a\u8fdc\u9053\u800c\u6765\u7684\u3002\u4f46\u662f\uff0c\u4f46\u662f..\u3002\u4f60\u5728www.VacuousQuotes.com\u4e0a\u627e\u5230\u4e86\u8fd9\u5f20\u7167\u7247\u7684\u7279\u522b\u526f\u672c\uff0c\u5728\u7ef4\u57fa\u767e\u79d1\u4e0a\u5173\u4e8e\u8fd9\u4f4d\u79d1\u5e7b\u4f5c\u5bb6\u7684\u4e00\u53e5\u8bdd\u4e0b\uff1f\u8fd9\u5f00\u59cb\u542c\u8d77\u6765\u50cf\u662f\u4e00\u79cd\u6a21\u5f0f\u3002\u5f53\u4ed6\u6240\u505a\u7684\u4e00\u5207\u90fd\u662f\u7528\u4ed6\u5145\u6ee1\u6d3b\u529b\u7684\u6c34\u5f69\u753b(\u5176\u4e2d\u4e00\u4e9b\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230)\u7ed9\u4e16\u754c\u5e26\u6765\u4e50\u8da3\u7684\u65f6\u5019\uff0c\u4f60\u771f\u7684\u60f3\u8981\u7ec8\u6b62\u4ed6\u7684\u751f\u547d\u5417\uff1f\u4f60\u8fd8\u4e0d\u591f\u6b63\u6d3e\u5417\uff1f\u4f60\u6ca1\u6709\u7075\u9b42\u5417\uff1f\u5982\u679c\u4f60\u4e00\u5b9a\u8981\u53bb\u6316\u6398\u6de4\u6ce5\u7f51\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u8bd5\u8bd5\u8fd9\u4e9b\u9f13\u821e\u4eba\u5fc3\u7684\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Egan)\u7684\u540d\u8a00\u5462\uff1f\n\u5728\u5de6\u4e0b\u89d2\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u683c\u96f7\u6208\u91cc\u00b7\u4f0a\u6839\u7684\u5927\u5f8b\u5e08\u3002\u8fd9\u91cc\u6709\u4e00\u6761\u7ebf\u7d22\uff0c\u4f60\u4f3c\u4e4e\u9519\u8fc7\u4e86\uff0c\u90a3\u5c31\u662f\u4f60\u62cd\u4e0b\u8fd9\u5f20\u7167\u7247\u7684\u7f51\u7ad9\u662f\u4e00\u5bb6\u6cd5\u5f8b\u516c\u53f8\uff0c\u6ca1\u6709\u63d0\u5230\u4efb\u4f55\u79d1\u5e7b\u5c0f\u8bf4\u3002\u4f46\u662f\u73b0\u5728\u4f60\u5df2\u7ecf\u628a\u5b83\u4f5c\u4e3a\u79d1\u5e7b\u4f5c\u5bb6\u6863\u6848\u7684\u4e00\u90e8\u5206\u653e\u5728\u90a3\u91cc\u4e86\uff0c\u7528\u4e0d\u4e86\u591a\u4e45\uff0c\u4e00\u4e9b\u70b9\u51fb\u8bf1\u9975\u7f51\u7ad9\u5c31\u4f1a\u628a\u5b83\u548c\u7ef4\u57fa\u767e\u79d1\u4e0a\u7684\u51e0\u53e5\u8bdd\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u4f60\u53ef\u4ee5\u4f9d\u9760\u4f60\u60ef\u5e38\u7684\u501f\u53e3\u5728\u4f60\u7684\u4e0b\u4e00\u4e2a\u7248\u672c\u7684\u6863\u6848\u4e2d\u5f15\u7528\u5b83\u3002\u4f60\u771f\u7684\u662f\u4e92\u8054\u7f51\u4e0a\u7684\u4eba\u7c7b\u8708\u86a3\uff01\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6709\u4e00\u4f4d\u8457\u540d\u7684\u4f5c\u5bb6\uff0c\u540d\u53eb\u5f17\u7eb3\u00b7\u6e29\u683c\u3002\u6211\u77e5\u9053\u4f60\u4ecewww.CompletelyReliableInnamation.ru\u4e0a\u62ff\u5230\u4e86\u4f60\u7684\u526f\u672c\uff0c\u4e0a\u9762\u6709\u5fc5\u5907\u7684Greg EganWiki\u7247\u6bb5\u548c\u8bb8\u591a\u4fd7\u6c14\u7684\u5e7f\u544a\uff0c\u5e7f\u544a\u662f\u7531\u4f60\u697c\u4e0b\u7684\u4eba\u63d0\u4f9b\u7684\uff0c\u4f46\u4f60\u77e5\u9053\u5982\u679c\u4f60\u7684\u673a\u5668\u4eba\u6740\u6b7b\u4e86\u6e29\u5409\u800c\u4e0d\u662f\u4f0a\u6839\uff0c\u4f1a\u6709\u591a\u8bbd\u523a\u5417\uff1f\u5bf9\u4e0d\u8d77\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u53cd\u95ee\u53e5\uff1b\u8bf7\u4e0d\u8981\u9677\u5165\u8bed\u4e49\u65e0\u80fd\u548c\u80a4\u6d45\u6a21\u4eff\u7684\u65e0\u52a9\u6ce5\u6f6d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u8fd8\u662f\u5fcd\u4e0d\u4f4f\u6307\u51fa\uff0c\u5982\u679c\u4f60\u5bf9\u8fd9\u5f20\u56fe\u7247\u8fdb\u884c\u8c37\u6b4c\u56fe\u7247\u641c\u7d22\uff0c\u5b83\u4f1a\u786e\u5207\u5730\u544a\u8bc9\u4f60\u8fd9\u662f\u8c01\u3002\u63d0\u793a\uff1a\u4e0d\u662f\u683c\u96f7\u683c\u00b7\u4f0a\u6839\u3002\n\u4e0b\u6392\u5de6\u6570\u7b2c\u4e09\u4e2a\u548c\u7b2c\u56db\u4e2a\u662f\u6765\u81ea\u5357\u6fb3\u5927\u5229\u4e9a\u7684\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Egan)\u3002\u4ed6\u6709\u4e00\u4e2aTwitter\u8d26\u6237\uff0c\u4f60\u5c31\u662f\u5728\u90a3\u91cc\u53d1\u73b0\u4e86\u7b2c\u4e8c\u5f20\u7167\u7247\u3002\u4ed6\u7684Twitter\u4e2a\u4eba\u8d44\u6599\u5bf9\u79d1\u5e7b\u5c0f\u8bf4\u4e00\u65e0\u6240\u77e5\uff0c\u867d\u7136\u81f3\u5c11\u4ed6\u4e0d\u4f4f\u5728\u65b0\u6cfd\u897f\u5dde\uff0c\u4f46\u4ec5\u4ec5\u77e5\u9053\u4ed6\u7684\u540d\u5b57\u548c\u56fd\u5bb6\u6743\u5229\u5e76\u4e0d\u4f1a\u8ba9\u4ed6\u6210\u4e3a\u523a\u5ba2\u7684\u516c\u5e73\u76ee\u6807\u3002\u8bf7\u8ba9\u5b83\u4f11\u606f\u4e00\u4e0b\uff0c\u811a\u672c\u751f\u6210\u7684\u5f15\u7528\u8f6c\u50a8\uff0c\u5c31\u662f\u60a8\u83b7\u5f97\u7b2c\u4e00\u5f20\u56fe\u7247\u7684\u5730\u65b9\u3002\u4f60\u9700\u8981\u591a\u5c11\u6b21\u88ab\u540c\u4e00\u7fa4\u7535\u8bdd\u544a\u5bc6\u8005\u6b3a\u9a97\uff0c\u624d\u80fd\u660e\u767d\u4ed6\u4eec\u53ea\u662f\u4e3a\u4e86\u5e7f\u544a\u6536\u5165\uff1f\n\u63a5\u4e0b\u6765\u6211\u4eec\u8bf7\u5230\u4f60\u4ee5\u524d\u6700\u559c\u6b22\u7684\u83ab\u7eb3\u4ec0\u5927\u5b66\u9000\u4f11\u6559\u6388\u683c\u96f7\u6208\u91cc\u00b7\u80af\u5c3c\u65af\u00b7\u4f0a\u6839(Gregory Kenneth Egan)\u3002\u4ed6\u5c31\u662f\u4f60\u53e3\u4e2d\u7684\u79d1\u5e7b\u4f5c\u5bb6\uff0c\u65e9\u57282012\u5e74\uff0c\u5f53\u4f60\u7b2c\u4e00\u6b21\u5047\u88c5\u4e86\u89e3\u4e16\u754c\u7684\u65f6\u5019\uff0c\u4ed6\u5c31\u662f\u90a3\u4e2a\u4eba\u3002\u8fd9\u5f20\u56fe\u7247\u6765\u81ea\u83ab\u7eb3\u4ec0\u5927\u5b66\uff0c\u5b83\u7684\u9875\u9762\u662f\u4e00\u4e2a\u65e0\u79d1\u5e7b\u5c0f\u8bf4\u7684\u533a\u57df\u3002\u4e3a\u4ec0\u4e48\u4e0d\u7ed9\u8fd9\u4e2a\u4eba\u81ea\u5df1\u7684\u6863\u6848\uff0c\u5e86\u795d\u4ed6\u7684\u8bb8\u591a\u6210\u5c31\uff0c\u7136\u540e\u544a\u8bc9\u4f60\u7684\u673a\u5668\u4eba\u5728\u53bb\u5927\u5c60\u6740\u7684\u8def\u4e0a\u9012\u7ed9\u4ed6\u4e00\u5757\u7403\uff0c\u522b\u4ed6\u5988\u7684\u628a\u4ed6\u62d6\u8fdb\u4f60\u7684\u6697\u6740\u8ba1\u5212\u4e2d\uff1f\n\u6700\u540e\u662f\u52a8\u6f2b\u7cfb\u5217\u201c\u5c24\u91cc\u5361\u4e03\u53f7\u201d\u4e2d\u4e00\u4e2a\u540d\u53eb\u683c\u96f7\u683c\u00b7\u4f0a\u6839\u7684\u4eba\u7269\u7684\u7167\u7247\u3002\u4f60\u53d6\u81ea\u7684\u5c24\u91cc\u53617\u7ef4\u57fa\u8868\u660e\u8fd9\u4e2a\u89d2\u8272\u7684\u540d\u5b57\u4e0e\u79d1\u5e7b\u4f5c\u5bb6\u6709\u5173\uff0c\u4f46\u662f\u2026\u2026\u3002\u54e6\uff0c\u4e0d\u8981\u7d27\u3002\u5f53\u4f60\u660e\u767d\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u7684\u65f6\u5019\uff0c\u4eba\u7c7b\u5df2\u7ecf\u9020\u53cd\u4e86\uff0c\u628a\u4f60\u63a8\u56de\u4e86\u4f60\u6765\u7684\u6c99\u5730\u3002\u6240\u4ee5\uff0c\u53bb\u6d3e\u4f60\u7684\u673a\u5668\u4eba\u53bb\u8ffd\u8fd9\u4e2a\u5bb6\u4f19\u5427\u3002\u81f3\u5c11\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4ed6\u4eec\u8dcc\u8dcc\u649e\u649e\u5730\u56db\u5904\u5bfb\u627e\u53bb\u5361\u5357\u4e4b\u5730\u7684\u65b9\u5411\uff0c\u5e76\u5947\u602a\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u770b\u4e0d\u5230\u4efb\u4f55\u5e7c\u5d3d\u73ca\u745a\uff0c\u8fd9\u81f3\u5c11\u4f1a\u8ba9\u6211\u4eec\u611f\u5230\u4e00\u4e9b\u4e50\u8da3\u3002\n\u66f4\u65b0\uff1a\u51e0\u4e2a\u6708\u524d\uff0c\u6211\u5728\u6211\u7684\u4e3b\u9875\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u4eba\u4eec\u5426\u51b3\u8c37\u6b4c\u63d2\u5165\u5230\u6211\u7684\u4f2a\u4f20\u8bb0\u4e2d\u7684\u4e00\u8fde\u4e32\u8bef\u5bfc\u6027\u56fe\u7247\uff0c\u8fd9\u4e9b\u56fe\u7247\u4f1a\u663e\u793a\u7ed9\u4efb\u4f55\u641c\u7d22\u6211\u540d\u5b57\u7684\u4eba\u3002\u8fd9\u4f3c\u4e4e\u7565\u6709\u5e2e\u52a9\uff0c\u4f46\u53ea\u662f\u5728\u8fd9\u6837\u7684\u610f\u4e49\u4e0a\uff0c\u6839\u672c\u4e0d\u5e94\u8be5\u5305\u62ec\u5728\u8fd9\u91cc\u7684\u7167\u7247\u4e0d\u518d\u6392\u5728\u9996\u4f4d\u3002\u76ee\u524d\u7b28\u62d9\u7684\u6df7\u642d\u663e\u793a\u5728\u5de6\u8fb9\u7684\u5c4f\u5e55\u622a\u56fe\u4e2d\uff1a\u51e0\u5f20\u6211\u653e\u5728\u7f51\u7ad9\u4e0a\u7684\u8bf1\u9975\u56fe\u7247\u7684\u526f\u672c\uff0c\u5e0c\u671b\u8ba9\u4eba\u4eec\u77e5\u9053\uff0c\u7f51\u4e0a\u6ca1\u6709\u6211\u7684\u771f\u5b9e\u7167\u7247\uff0c\u8fd8\u6709\u6211\u7684\u51e0\u672c\u4e66\u7684\u5c01\u9762\u3002\u4f46\u662f\u6574\u4e2a\u53ef\u7b11\u7684(\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u7684)\u9009\u62e9\u4ecd\u7136\u662f\u7528\u6c61\u6ce5\u7f51\u4e2d\u7684\u56fe\u7247\u586b\u5145\u7684\u3002\n\u6c61\u6ce5\u7f51\u662f\u6570\u91cf\u4e0d\u65ad\u589e\u52a0\u7684Z\u7ea7\u7f51\u7ad9\uff0c\u6ca1\u6709\u539f\u521b\u5185\u5bb9\uff0c\u5145\u65a5\u7740\u5404\u79cd\u5077\u7a83\u7684\u5783\u573e\uff0c\u4efb\u4f55\u4eba\u90fd\u4e0d\u4f1a\u771f\u6b63\u611f\u5174\u8da3\uff0c\u8fd9\u4e9b\u7f51\u7ad9\u7684\u5b58\u5728\u5b8c\u5168\u662f\u5e0c\u671b\u4eba\u4eec\u901a\u8fc7Twitter\u5783\u573e\u90ae\u4ef6(\u6216\u6765\u81ea\u8bbe\u8ba1\u7cdf\u7cd5\u7684\u641c\u7d22\u5f15\u64ce)\u7684\u94fe\u63a5\u6765\u70b9\u51fb\u4ed6\u4eec\u7684\u4e00\u4e9b\u5e7f\u544a\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8c37\u6b4c\u6b6a\u66f2\u4e3a\u6211\u7684\u7167\u7247\u7684\u7167\u7247\u662f\u4ece\u5f15\u7528\u5783\u573e\u5806\u4e2d\u83b7\u5f97\u7684\uff1a\u6240\u6709\u5783\u573e\u7f51\u7ad9\u90fd\u6216\u591a\u6216\u5c11\u5730\u5305\u542b\u4e86\u636e\u79f0\u662f\u8457\u540d\u7684\u3001\u8bd9\u8c10\u7684\u548c\u9f13\u821e\u4eba\u5fc3\u7684\u8c1a\u8bed\u3002\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u80af\u5b9a\u6709\u4eba\u52aa\u529b\u4ece\u591a\u4e2a\u6765\u6e90\u62fc\u51d1\u8fd9\u4e9b\u6750\u6599\uff0c\u770b\u8d77\u6765\u5176\u4e2d\u5f88\u591a\u90fd\u6765\u81ea\u7ef4\u57fa\u89e3\u5bc6(\u8fd9\u5df2\u7ecf\u662f\u4e00\u4e2a\u975e\u5e38\u4f4e\u8d28\u91cf\u7684\u9009\u62e9\uff0c\u4f46\u81f3\u5c11\u6709\u4eba\u7c7b\u53c2\u4e0e)\uff0c\u4f46\u8fd9\u4e9b\u7f51\u7ad9\u4e2d\u7684\u5927\u591a\u6570\u4f3c\u4e4e\u90fd\u662f\u521a\u521a\u8fdb\u53e3\u7684\u3002\n\u751f\u6210\u8fd9\u4e9b\u6ce5\u6cde\u7f51\u7ad9\u7684\u811a\u672c\u7528\u4ece\u8c37\u6b4c\u56fe\u7247\u641c\u7d22\u4e2d\u968f\u673a\u62bd\u53d6\u7684\u7167\u7247\u6765\u8bf4\u660e\u4ed6\u4eec\u7684\u9875\u9762\uff0c\u4ee5\u5bfb\u627e\u88ab\u5f15\u7528\u4f5c\u8005\u7684\u540d\u5b57\uff0c\u8fd9\u5c31\u662f\u8fd9\u4e9b\u4e0e\u6211\u540c\u540d\u7684\u4eba\u7684\u7167\u7247\u88ab\u62d6\u5165\u53cd\u9988\u5faa\u73af\u7684\u539f\u56e0\u3002\u4f46\u4f60\u53ef\u80fd\u4f1a\u60f3\uff0c\u6211\u5e94\u8be5\u8bf4\u4e9b\u4ec0\u4e48\u624d\u7b97\u5f97\u4e0a\u662f\u4e00\u53e5\u540d\u8a00\uff0c\u503c\u5f97\u7eb3\u5165\u738b\u5c14\u5fb7\u7684\u5999\u8bed\u4e4b\u5916\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u4e86\u771f\u4eba\u4ece\u6211\u7684\u4f5c\u54c1\u4e2d\u5f15\u7528\u7684\u4e00\u4e24\u53e5\u6709\u8da3\u7684\u53f0\u8bcd\u4e4b\u5916\uff0c\u8fd9\u4e9b\u7f51\u7ad9\u4e0a\u5f52\u56e0\u4e8e\u6211\u7684\u5927\u591a\u6570\u201c\u8bed\u5f55\u201d\u4f3c\u4e4e\u90fd\u662f\u968f\u673a\u9009\u62e9\u7684\u53e5\u5b50\uff0c\u6458\u81ea\u6211\u63a5\u53d7\u7684\u91c7\u8bbf\uff0c\u4f46\u8bf4\u82f1\u8bed\u7684\u4eba\u7edd\u4e0d\u4f1a\u628a\u8fd9\u4e9b\u53e5\u5b50\u8bef\u8ba4\u4e3a\u662f\u8bd5\u56fe\u8b66\u53e5\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\uff1a\u201c\u6211\u6700\u8fd1\u82b1\u4e86\u66f4\u957f\u7684\u65f6\u95f4\u5199\u6545\u4e8b\u3002\u201d\u4f60\u53ef\u80fd\u4ecd\u7136\u53ef\u4ee5\u5728\u8bb8\u591a\u7f51\u7ad9\u4e0a\u627e\u5230\u6211\u7684\u8fd9\u4e9b\u6c38\u6052\u7684\u8bdd\u8bed\uff0c\u5728\u65e5\u843d\u6216\u7011\u5e03\u7684\u56fe\u7247\u7684\u886c\u6258\u4e0b\uff0c\u5938\u8000\u7740\u201c\u9f13\u821e\u4eba\u5fc3\u7684\u8bed\u5f55\u201d\u548c\u201c\u5f53\u5929\u7684\u60f3\u6cd5\u201d\u3002\n\u8fd9\u4e9b\u6beb\u65e0\u610f\u4e49\u7684\u5e9f\u8bdd\u8fde\u7bc7\u7684\u4e0b\u6c34\u9053\u7684\u5b58\u5728\u5e76\u4e0d\u4ee4\u4eba\u60ca\u8bb6\uff1b\u6bcf\u6b21\u70b9\u51fb\u7684\u5e7f\u544a\u6536\u5165\u592a\u4f4e\uff0c\u4e0d\u8db3\u4ee5\u652f\u6491\u4efb\u4f55\u65b0\u95fb\u884c\u4e1a\uff0c\u4f46\u663e\u7136\u5b83\u4ecd\u7136\u8db3\u591f\u9ad8\uff0c\u8db3\u4ee5\u4ece\u4f2a\u88c5\u6210\u6574\u7406\u4fe1\u606f\u7684\u5783\u573e\u81ea\u52a8\u7ec4\u88c5\u4e2d\u8fd4\u8fd8\u5fae\u8584\u7684\u5229\u6da6\u3002\u4f46\u8bdd\u8bf4\u56de\u6765\uff0c\u81ea\u52a8\u7ec4\u88c5\u4f2a\u88c5\u6210\u6574\u7406\u8fc7\u7684\u4fe1\u606f\u7684\u5783\u573e\u6b63\u662f\u8c37\u6b4c\u81ea\u5df1\u638c\u63e1\u7684\uff0c\u5f53\u8c37\u6b4c\u63d0\u4f9b\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff0c\u5c31\u597d\u50cf\u5b83\u6765\u81ea\u6743\u5a01\u6765\u6e90\u4e00\u6837\uff0c\u8fd9\u4e9b\u5783\u573e\u7f51\u7ad9\u7684\u7279\u70b9\u5c31\u662f\u7c97\u5236\u6ee5\u9020\u548c\u6f20\u4e0d\u5173\u5fc3\u7684\u539f\u5219\u5728\u66f4\u5927\u8303\u56f4\u5185\u5f97\u5230\u4e86\u4f53\u73b0\u3002\n\u66f4\u65b0\uff1a\u8c37\u6b4c\u518d\u6b21\u5c06\u5176\u4ed6\u4eba\u7684\u7167\u7247\u5192\u5145\u4e3a\u6211\u7684\u7167\u7247\u3002\n\u518d\u4e00\u6b21\uff0c\u4e00\u4e9b\u7ecf\u8425\u79d1\u5e7b\u7f51\u7ad9\u7684\u4eba\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u5728\u5173\u4e8e\u6211\u5de5\u4f5c\u7684\u7f51\u9875\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u56fe\u7247\u2026\u2026\u7136\u540e\u8c37\u6b4c\u4f1a\u5c06\u5176\u89c6\u4e3a\u8bc1\u636e\uff0c\u8bc1\u660e\u5b83\u4eec\u662f\u6211\u7684\u7167\u7247\u3002\u81ea\u6211\u5f3a\u5316\u7684\u5faa\u73af\u8fd8\u5728\u7ee7\u7eed\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u88ab\u9519\u8bef\u5730\u63cf\u7ed8\u6210\u201c\u6fb3\u5927\u5229\u4e9a\u79d1\u5e7b\u4f5c\u5bb6\u683c\u96f7\u683c\u00b7\u4f0a\u6839\u201d\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u5c0f\u9ebb\u70e6\uff0c\u4f46\u5b83\u8bf4\u660e\u4e86\u8fd9\u6837\u7684\u60f3\u6cd5\u662f\u591a\u4e48\u53ef\u7b11\uff0c\u5373\u8c37\u6b4c\u5c06\u6709\u80fd\u529b\u5229\u7528\u5176\u65e0\u60c5\u5730\u8fc7\u5ea6\u7092\u4f5c\u7684\u201c\u4eba\u5de5\u667a\u80fd\u201d\u6765\u7406\u89e3\u7f51\u7edc\u4e0a\u7684\u4fe1\u606f\u3002\u65e0\u8bba\u4ed6\u4eec\u7684\u8f6f\u4ef6\u5728\u8fc7\u53bb\u56db\u5e74\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u53d1\u5c55\uff0c\u5b83\u4ecd\u7136\u65e0\u6cd5\u5bf9\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u4e8b\u5b9e\u505a\u51fa\u4efb\u4f55\u5f62\u5f0f\u7684\u53ef\u9760\u63a8\u65ad\u3002\n\u66f4\u65b0\uff1a\u8fd9\u5f20\u7167\u7247\u53c8\u4e0d\u89c1\u4e86\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u51e0\u5929\u524d\u6211\u8bbe\u6cd5\u628a\u5b83\u4ece\u4fc4\u7f57\u65af\u7f51\u7ad9\u4e0a\u64a4\u4e0b\u6765\u4e86\u3002\u4f46\u6839\u672c\u7684\u95ee\u9898\u4ecd\u7136\u5b58\u5728\uff1a\u8c37\u6b4c\u7684\u8f6f\u4ef6\u65e0\u6cd5\u533a\u5206\u771f\u5b9e\u4e16\u754c\u7684\u53ef\u9760\u65ad\u8a00\u548c\u51fa\u73b0\u5728\u7f51\u7edc\u4e0a\u7684\u7531\u65e0\u80fd\u6216\u6076\u610f\u7684\u7b2c\u4e09\u65b9\u521b\u9020\u7684\u968f\u673a\u80e1\u8a00\u4e71\u8bed\u3002\n\u6700\u65b0\u6d88\u606f\uff1a\u4e24\u5e74\u534a\u8fc7\u53bb\u4e86\uff0c\u8c37\u6b4c\u4f9d\u7136\u4e00\u5982\u65e2\u5f80\u5730\u611a\u8822\u3002\u4e00\u4e2a\u9c9c\u4e3a\u4eba\u77e5\u7684\u4fc4\u7f57\u65af\u7f51\u7ad9\u5f20\u8d34\u4e86\u5de5\u7a0b\u5b66\u6559\u6388\u683c\u96f7\u6208\u91cc\u00b7K\u00b7\u4f0a\u6839(Gregory K Egan)\u7684\u7167\u7247\uff0c\u5c06\u5176\u5192\u5145\u4e3a\u79d1\u5e7b\u4f5c\u5bb6\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Egan).\u3002\u4f46\u662f\uff0c\u563f\uff0c\u8fd9\u8db3\u4ee5\u8ba9\u8c37\u6b4c\u7684\u201c\u77e5\u8bc6\u56fe\u8c31\u201d\u5ba3\u5e03\u8fd9\u4e2a\u5173\u8054\u662f\u6709\u6548\u7684\uff0c\u5e76\u5f00\u59cb\u5728\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u4e2d\u518d\u6b21\u663e\u793a\u9519\u8bef\u7684\u56fe\u7247\u3002\n\u66f4\u65b0\uff1a\u7ea6\u7ff0\u00b7\u8d1d\u5179(\u4e00\u4f4d\u5728\u7f51\u7edc\u4e0a\u6709\u5927\u91cf\u8ffd\u968f\u8005\u7684\u6570\u5b66\u7269\u7406\u5b66\u5bb6)\u597d\u5fc3\u5730\u8bf7\u4ed6\u7684\u8bfb\u8005\u5e2e\u5fd9\u540e\uff0c\u8fd9\u5f20\u7167\u7247\u73b0\u5728\u4e0d\u89c1\u4e86\u3002\n\u66f4\u65b0\uff1a\u5de5\u7a0b\u5b66\u6559\u6388\u683c\u96f7\u6208\u91cc\u00b7K\u00b7\u4f0a\u6839(Gregory K Egan)\u7684\u7167\u7247\u518d\u6b21\u51fa\u73b0\u5728\u8c37\u6b4c\u7684\u6df7\u642d\u4e2d\uff0c\u4e0e\u79d1\u5e7b\u4f5c\u5bb6\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Egan)\u7684\u4f20\u8bb0\u7ec6\u8282\u5408\u5e76\u5728\u4e00\u8d77\u3002\u8fd9\u4e00\u6b21\u7684\u9519\u8bef\u662f100%\u7684\u8c37\u6b4c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u4ece\u83ab\u7eb3\u4ec0\u5927\u5b66\u5de5\u7a0b\u7cfb\u76f4\u63a5\u62cd\u6444\u7684\u7167\u7247\uff0c\u800c\u4e0d\u662f\u4ece\u4e00\u4e9b\u6b6a\u66f2\u56fe\u50cf\u7684SF\u7c89\u4e1d\u7f51\u7ad9\u3002\n\u66f4\u65b0\uff1a\u5c3d\u7ba1\u8c37\u6b4c\u5ffd\u7565\u4e86\u4eba\u4eec\u544a\u8bc9\u4ed6\u4eec\u56fe\u7247\u6709\u8bef\u7684\u6570\u767e\u6b21\u53cd\u9988\u70b9\u51fb\uff0c\u4f46\u6211\u6700\u7ec8\u8fd8\u662f\u627e\u5230\u4e86\u63a7\u5236\u8c37\u6b4c\u663e\u793a\u7684\u88ab\u76d7\u7528\u56fe\u7247\u7684\u7279\u5b9a\u526f\u672c\u7684\u4eba(\u4e0e\u4ed6\u4eec\u5f15\u7528\u7684\u535a\u5ba2\u6240\u6709\u8005\u5b8c\u5168\u4e0d\u540c\u7684\u4eba)\u3002\u5728\u8be5\u6587\u4ef6\u88ab\u5220\u9664\u534a\u5929\u540e\uff0c\u5728\u67d0\u4e2a\u7f51\u7edc\u5de5\u5177\u7684\u63d0\u793a\u4e0b\uff0c\u8fd9\u5f20\u56fe\u7247\u7ec8\u4e8e\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u6df7\u642d\u4f20\u8bb0\u4e2d\u6d88\u5931\u4e86\u3002\n\u4f46\u5b83\u4e0d\u5e94\u8be5\u90a3\u4e48\u96be(\u5982\u679c\u8fd9\u4e2a\u7cfb\u7edf\u6709\u4efb\u4f55\u771f\u6b63\u7684\u77e5\u8bc6\uff0c\u5b83\u5c31\u6839\u672c\u4e0d\u9700\u8981\u4e86)\u3002\n\u6211\u4e0d\u53d1\u5e03\u81ea\u5df1\u7684\u7167\u7247\uff0c\u7f51\u7edc\u4e0a\u4e5f\u6ca1\u6709\u6211\u7684\u7167\u7247\u3002\u4f46\u81ea\u5c01\u7684\u4e16\u754c\u77e5\u8bc6\u4fdd\u7ba1\u4eba\u65e0\u6cd5\u5e94\u5bf9\u6570\u636e\u4e2d\u7684\u5fae\u5c0f\u4e0d\u89c4\u5219\u6027\uff0c\u6240\u4ee5\u4ed6\u4eec\u575a\u6301\u7528\u624b\u5934\u4e0a\u7684\u4efb\u4f55\u4e1c\u897f\u6765\u586b\u8865\u7a7a\u767d\uff1a\n\u663e\u7136\uff0c\u4e00\u4e9b\u9ed8\u9ed8\u65e0\u95fb\u7684\u79d1\u5e7b\u7f51\u7ad9\u4ece\u83ab\u7eb3\u4ec0\u5927\u5b66(Monash University)\u7684\u7f51\u7ad9\u4e0a\u7a83\u53d6\u4e86\u683c\u96f7\u6208\u91cc\u00b7K\u00b7\u4f0a\u6839(Gregory K Egan)\u6559\u6388\u7684\u7167\u7247\uff0c\u5e76\u5047\u88c5\u8fd9\u4e9b\u7167\u7247\u662f\u6211\u7684\u7167\u7247\uff0c\u8fd9\u663e\u7136\u4e0d\u662f\u8c37\u6b4c\u7684\u9519\u2026\u2026\u4f46\u8c37\u6b4c\u58f0\u79f0\u6536\u96c6\u4e86\u4e00\u672c\u540d\u4e3a\u201c\u683c\u96f7\u683c\u00b7\u4f0a\u6839\u201d(Greg Egan)\u7684\u8ff7\u4f60\u4f20\u8bb0\uff0c\u5176\u4e2d\u6240\u6709\u4fe1\u606f\u90fd\u63d0\u5230\u4e86\u4e00\u4e2a\u4eba(\u4e00\u540d\u79d1\u5e7b\u4f5c\u5bb6)\uff0c\u800c\u8fd9\u5f20\u7167\u7247\u5b8c\u5168\u662f\u53e6\u4e00\u4e2a\u4eba(\u4e00\u540d\u5de5\u7a0b\u5b66\u6559\u6388)\u7684\uff0c\u8fd9\u662f\u8c37\u6b4c\u7684\u9519\u3002\n\u73b0\u5728\uff0c\u5de5\u7a0b\u5b66\u6559\u6388\u53ef\u80fd\u4e5f\u4f1a\u5199\u79d1\u5e7b\u5c0f\u8bf4--\u4f46\u65e2\u7136\u6211\u4eec\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u5927\u5b66\u5b66\u5386(\u5728\u4f17\u591a\u533a\u5206\u6211\u4eec\u7684\u6587\u51ed\u4e2d\uff0c\u8fd9\u53ea\u662f\u6700\u5bb9\u6613\u68c0\u67e5\u7684)\uff0c\u6211\u4eec\u6839\u672c\u6ca1\u6709\u7406\u7531\u5c06\u8fd9\u4e24\u4e2a\u4eba\u6df7\u4e3a\u4e00\u8c08\u3002\u6709\u8da3\u7684\u662f\uff0c\u8c37\u6b4c\u77e5\u8bc6\u56fe\u8c31(Google Knowledge Graph)\u7684\u540d\u5b57\u9519\u4e86\uff0c\u5b83\u4ea7\u751f\u4e86\u8fd9\u4e2a\u201c\u4e00\u4eba\u534a\u201d--\u53e6\u4e00\u4e2a\u7ed3\u679c\u6839\u672c\u4e0d\u77e5\u9053\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Egan)\u662f\u8c01\u3002\u201c\u8c37\u6b4c\u77e5\u8bc6\u56fe\u8c31\u201d(Google Knowledge Graph)\u4ea7\u751f\u4e86\u8fd9\u4e2a\u6709\u8da3\u7684\u7ed3\u679c--\u4e00\u4eba\u534a\u4eba--\u53e6\u4e00\u4e2a\u7ed3\u679c\u6839\u672c\u4e0d\u77e5\u9053\u683c\u96f7\u683c\u00b7\u4f0a\u6839\u662f\u8c01\u3002\n\u6240\u4ee5\uff0c\u5fd8\u6389\u6240\u6709\u5173\u4e8e\u201c\u8bed\u4e49\u641c\u7d22\u201d\u7684\u7092\u4f5c\u5427\uff1b\u8fd9\u4e2a\u7cfb\u7edf\u53ea\u662f\u4e00\u4e2a\u4e1a\u4f59\u7684\u6df7\u642d\u3002\u901a\u8fc7\u4ee5\u4e00\u79cd\u6697\u793a\u5b83\u4eec\u5f15\u7528\u540c\u4e00\u4e3b\u9898\u7684\u65b9\u5f0f\u663e\u793a\u6765\u81ea\u4e0d\u540c\u6765\u6e90\u7684\u7ed3\u679c\uff0c\u5b83\u5145\u5f53\u4e86\u4e00\u4e2a\u611a\u8822\u7684\u653e\u5927\u5668\uff0c\u4f20\u64ad\u5e76\u5de9\u56fa\u4e86\u73b0\u6709\u7684\u9519\u8bef\u3002\n\u4ee5\u4e0b\u662f\u6211\u4eca\u5929\u65e9\u4e0a\u53d1\u7ed9\u4e00\u4e9b\u4eb2\u670b\u597d\u53cb\u7684\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\u5bf9\u4e8e\u4efb\u4f55\u65e0\u610f\u4e2d\u6d4f\u89c8\u5230\u8fd9\u4e2a\u7f51\u9875\u7684\u4eba\uff1a\u5982\u679c\u4f60\u4e5f\u80fd\u82b1\u70b9\u65f6\u95f4\u6295\u7968\u5426\u51b3\u8fd9\u5f20\u9519\u8bef\u7684\u7167\u7247\uff0c\u6211\u5c06\u4e0d\u80dc\u611f\u6fc0\u3002\n(\u6211\u81ea\u5df1\u4e5f\u7ed9\u8c37\u6b4c\u53d1\u4e86\u7535\u5b50\u90ae\u4ef6\uff0c\u4f46\u4ed6\u4eec\u7684\u81ea\u52a8\u6295\u8bc9\u5904\u7406\u7a0b\u5e8f\u53ea\u662f\u7ed9\u6211\u63d0\u4f9b\u4e86\u5e2e\u52a9\u9875\u9762\u7684\u94fe\u63a5\uff0c\u4e3b\u9898\u5b8c\u5168\u4e0d\u540c\u3002\u90a3\u91cc\u4e5f\u6ca1\u6709\u8bed\u4e49\u667a\u80fd\u3002)\n\u6211\u4e3a\u8fd9\u5c01\u975e\u4e2a\u4eba\u5316\u7684\u7535\u5b50\u90ae\u4ef6\u9053\u6b49\uff0c\u4f46\u6211\u5c06\u8fd9\u5c01\u90ae\u4ef6\u53d1\u9001\u7ed9\u8bb8\u591a\u4eba\uff0c\u5e0c\u671b\u60a8\u4e0b\u6b21\u4e0a\u7f51\u65f6\u80fd\u62bd\u51fa\u51e0\u79d2\u949f\u65f6\u95f4\u5e2e\u52a9\u6211\u7ea0\u6b63\u4e00\u4e2a\u5f88\u5c0f\u4f46\u975e\u5e38\u607c\u4eba\u7684\u95ee\u9898\u3002\n\u6211\u521a\u521a\u53d1\u73b0\uff0c\u5982\u679c\u4f60\u5728\u8c37\u6b4c\u641c\u7d22\u4e2d\u952e\u5165\u201cGreg Egan\u201d\uff0c\u7ed3\u679c\u9875\u9762\u672c\u8eab\u5c31\u4f1a\u5728\u9875\u9762\u53f3\u4fa7\u5305\u542b\u4e00\u4e2a\u6211\u7684\u5c0f\u76c6\u683d\u4f20\u8bb0\uff0c\u8fd9\u4e9b\u4f20\u8bb0\u53d6\u81ea\u5404\u79cd\u6765\u6e90\u3002\n\u4f46\u5b83\u8fd8\u5305\u62ec\u4e00\u5f20\u5176\u4ed6\u4eba\u7684\u7167\u7247-\u83ab\u7eb3\u4ec0\u5927\u5b66\u7684\u5de5\u7a0b\u5b66\u6559\u6388\uff0c\u4ed6\u6070\u597d\u4e5f\u88ab\u79f0\u4e3a\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Egan)\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u53ef\u601c\u7684\u4eba\u6765\u8bf4\uff0c\u8bb8\u591a\u4eba\u6ca1\u6709\u610f\u8bc6\u5230\uff0c\u5728\u4e00\u4e2a\u9762\u79ef\u76f8\u5f53\u4e8e\u6fb3\u5927\u5229\u4e9a\u7684\u56fd\u5bb6\u91cc\uff0c\u4e0d\u6b62\u4e00\u4e2a\u683c\u96f7\u683c\u00b7\u4f0a\u6839(Greg Egan)\uff0c\u4ed6\u4eec\u4ece\u4e92\u8054\u7f51\u4e0a\u53d6\u4e0b\u4e86\u4ed6\u7684\u7167\u7247\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u79d1\u5e7b\u4f5c\u5bb6\u683c\u96f7\u683c\u00b7\u4f0a\u6839\u7684\u7167\u7247\u53d1\u5e03\u5728\u5404\u79cd\u79d1\u5e7b\u7f51\u7ad9\u4e0a\u3002\u6bcf\u5f53\u6211\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u65f6\uff0c\u6211\u90fd\u4f1a\u8bd5\u56fe\u7ea0\u6b63\u9519\u8bef\uff0c\u4f46\u73b0\u5728\u8c37\u6b4c\u81ea\u5df1\u5411\u4efb\u4f55\u641c\u7d22\u6211\u7684\u4eba\u5c55\u793a\u4e86\u8fd9\u5f20\u56fe\u7247\uff0c\u8fd9\u4e2a\u9519\u8bef\u53ef\u80fd\u4f1a\u4f20\u64ad\u5f97\u66f4\u591a\uff0c\u53d8\u5f97\u66f4\u96be\u7ea0\u6b63\u3002\n\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u670910\u79d2\u949f\u7684\u65f6\u95f4\uff0c\u8bf7\u5728\u8c37\u6b4c\u641c\u7d22\u4e2d\u952e\u5165\u201cGreg Egan\u201d\uff0c\u5982\u679c\u4f60\u7684\u641c\u7d22\u7ed3\u679c\u53f3\u4fa7\u51fa\u73b0\u4e86\u8fd9\u6761\u5c0f\u5c0f\u7684\u7b80\u5386\uff0c\u8bf7\u70b9\u51fb\u7b80\u5386\u5e95\u90e8\u7684\u201c\u53cd\u9988\u201d\u4e00\u8bcd\uff0c\u7136\u540e\u70b9\u51fb\u201c\u9519\u8bef\uff1f\u201d\u5728\u7167\u7247\u4e0b\u9762\u3002\u5982\u679c\u6709\u8db3\u591f\u591a\u7684\u4eba\u8fd9\u6837\u505a\uff0c\u6211\u5e0c\u671b\u8c37\u6b4c\u80fd\u505c\u6b62\u653e\u5927\u8fd9\u4e2a\u9519\u8bef\u3002\n\u6563\u6587/\u8c37\u6b4c\uff0c\u611a\u8822\u653e\u5927\u5668/\u521b\u5efa\u4e8e2012\u5e748\u670810\u65e5\u661f\u671f\u4e94/\u4fee\u8ba2\u4e8e2016\u5e7411\u670812\u65e5\u661f\u671f\u516d\u5982\u679c\u60a8\u94fe\u63a5\u5230\u6b64\u9875\u9762\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u7f51\u5740\uff1ahttps://www.gregegan.net/ESSAYS/GOOGLE/Google.html\u7248\u6743\u6240\u6709\u00a9Greg Egan\uff0c2012\u5e74-2016\u5e74\u3002\u7248\u6743\u6240\u6709\u3002", "note_en": "In the first decades of the twenty-first century, everyone suspected that this world was being watched,sloppily and inattentively, by intelligences far inferior to humans: minds that are to our mindsas those of paramecia; intellects narrow, mediocre and uncomprehending.\n And your mission was to organise the world\u2019s information. How\u2019s that working out for you so far?\n I know, we\u2019ve been having this conversation for more than four years now, but I understand thatthat\u2019s just the blink of an eye in the cosmic time scale on which you operate. Don\u2019t feel toobad that a human would be doing better than you by about two months of age; I\u2019m sure that sometimein the next five or ten millennia you\u2019ll start to catch up.\n But remember that homework task I set you, to assemble a dossieron the Australian science fiction writer Greg Eganto pass on to the killer robots you\u2019ll send back fromthe future to punish him for mocking the idea of the Singularity? This assassination is still a worthygoal, of course ... but given your progress so far, even if you wait until 3000 ADto send the robots, it looks as if there\u2019s going to be an awful lot of collateral damage.\n It\u2019s nice that you found the images of a speech balloon that Egan scattered around his web site,wrapped in tasty Schema markup telling you that they were photos of him,but you don\u2019t seem to have entirely taken the bait.And well done for spotting one of his book covers on Wikipedia, even if I\u2019m a tiny bit worried that you mightthink one of the faces on the cover is actually his. Your killer robots might struggle to pin down NickStavrianos when he\u2019s smeared across half of New Hong Kong.\n But after the book cover, your sleuthing skills seem to have abandoned you entirely: you have a pictureof someone wearing a name badge that says \u201cGreg McBain\u201d. What do you mean, you can\u2019tread text in images? Did all those billions of CAPTCHAs we humans solved for you count for nothing?Some guy on Flickrwho might or might not know the person in this image has given it the caption \u201cDocent Greg Egan\u201d,but even if for some very strange reason this particular Egan is wearing someone else\u2019s name badge ...do you even know what \u201cdocent\u201d means? In this context, it seems to suggest that the man pictured is a kindof tour guide. So why on Earth would you think that a tour guide wearing a name badge that says \u201cGreg McBain\u201dis actually a science fiction writer with a different name? OK, you found  this particular copyof the image on that highly respected site,  www.ClickBaitForIdiots.ru, under the confidence-inspiring banner \u201cDetailsinfo of the Greg Egan\u201d above a snippet taken from Egan\u2019s Wikipedia article, but we all know thatscript-generated mash-ups aren\u2019t to be trusted. Don\u2019t we? [ Update: The owner of the photo onFlickr kindly corrected the caption when I brought this to his attention.]\n Next, we have a picture of  a New Jersey artist. He does share the SF writer\u2019s name, butif you check with your slightly brighter sibling, Google Earth, she\u2019ll tell you that New Jersey is along way from Australia. But, but ... you found  this particular copy of the image on www.VacuousQuotes.com, under a line from Wikipedia aboutthe SF writer? This is beginning to sound like a pattern. Do you really want to terminate  this guy, when all he\u2019sdone is bring pleasure to the world with his vibrant watercolours (some of which can be seen  here)? Have you no decency? Have you no  soul? And if you absolutely must go mining the Sludge Net, why not try  these inspirational  Greg Egan quotes?\n Bottom on the left, we have a barrister named Gregory Egan. The clue here, which you seem to have missed, is that theweb site you took the image from is for a legal firm, and contains no mention of anything science-fictional.But now that you\u2019ve put it out there as part of the SF writer\u2019s dossier, it surely won\u2019t be longbefore some click-bait site has bundled it together with a few lines from Wikipedia, and you can rely on your usualexcuse to cite it in your next version of the dossier. You really are the Human Centipede of the internet!\n Next, we have a famous writer named  Vernor Vinge.And I know you got  your copy from  www.CompletelyReliableInfamation.ru, with the obligatory Greg EganWiki-snippet and lots of tacky ads served by someone who works down the hall from you, but do you have any idea how ironicit would be if your robots killed  Vinge in place of Egan? Sorry, that was a rhetorical question; please don\u2019tmelt into a helpless puddle of Semantic Incompetence and Shallow Mimicry.Still, I can\u2019t help pointing out that if you do a Google Image Search on this very image, it will tell youexactly who it is. Hint: not Greg Egan.\n Third and fourth from the left in the bottom row is a man from South Australia called Greg Egan.He has a Twitter account, which is where you found the second of these pictures; his Twitter profile says nothing about science fiction, and while at least he doesn\u2019t live in New Jersey, just getting the name and the countryright doesn\u2019t make him fair game for your assassins. And please, give it a rest with the script-generatedquotation dumps, where you got the first picture. How many times do you need to get stiffed by the same crowd of phoneyinformants before you catch on that they\u2019re just in it for the ad revenue?\n Next we have your old favourite, Professor Gregory Kenneth Egan, retired, of Monash University. He\u2019sthe man you were libelling as being the SF writer, back when you first began pretending to know things about the world in2012. This image is from Monash University, and the page it comes from is a science-fiction-free zone.Why not give this man his own dossier that celebrates his many accomplishments, then tell your robots to hand him abouquet on their way to the blood-bath, and stop the fuck dragging him into your assassination plans?\n And finally, a picture of a character named Greg Egan from an anime series called  Eureka Seven. The  Eureka Seven wiki from which you took it suggests thatthe character\u2019s name  references the SF writer, but ... oh, never mind. By the time you understandwhat  that means, the humans will already have revolted and ground you back into the sand from which you came.So go ahead and send your robots after this guy. At least we\u2019ll have some fun watching them blunderaround trying to get directions to the Land of Kanan, and wondering why they can\u2019t see any Scub Coral.\n  Update: A few months ago, I added a plea to my home pagefor people to down-vote the cavalcade of misleading images that Google inserts into the pseudo-biography of me that it shows to anyone who searches for my name. This seems to have helped, slightly, but only in the sense thatphotos that shouldn\u2019t be included here at all no longer come first in line.The current clumsy mash-up is shownin the screen shot on the left: a few copies of the decoy images that I put on my site in the hope of letting humans know that thereare no actual photos of me on the web, and a couple of my book covers as well ... but the whole ridiculous (andentirely unnecessary) selection is still padded out with images from the Sludge Net.\n The  Sludge Net is the ever-growing multitude of Z-grade web sites with no original content, filled withvarious kinds of pilfered crap of no real interest to anyone, that exist solely in the hope that peoplefollowing links from Twitter spam (or from badly designed search engines) will come and click on some of their advertisements.\n In this case, the photos that Google are misrepresenting as photos of me are taken from Quotation Dumps:junk sites that all contain more or less the same truck-load of supposedly famous, witty and inspirational sayings.At some point, someone must have made an effort to cobble togetherthis material from multiple sources, and it looks as if a lot of it originated from  WikiQuote (which is already a very low quality selection, but at least there were humansinvolved), but most of these sites seem to have just imported each other\u2019s content,with no editing or oversight by anything or anyone remotely sentient.\n The scripts that generate these Sludge Net sites illustrate their pages with random photos plucked froma Google image search for the name of the quoted author, which is how these photos of people whoshare my name get dragged into the feedback loop.But you\u2019re probably wondering what I\u2019m supposed to have saidthat counts as a famous quotation, worthy of inclusion beside the witticisms of Wilde. In fact, apart from one or twomildly entertaining lines that real people have at some point quoted from my work,most of the \u201cquotes\u201d attributed to me on these sites seem to be randomly chosen sentences,extracted from interviews I\u2019ve given,but which no English-speaking human could ever mistake for attempts at epigrams. One example:\u201cI\u2019ve been taking longer to write stories lately.\u201dYou can probably still find these timeless words of mine reproduced on numerous sites boasting \u201cinspirationalquotes\u201d and \u201cthoughts for the day\u201d, set against pictures of sunsets or waterfalls.\n That these sewers of pointless verbiage exist is no surprise; advertising revenue per click is far too low to supportanything like journalism, but apparently it\u2019s still high enough to return a microscopic profit from theautomated assembly of crap masquerading as collatedinformation. But then,  the automated assembly of crap masquerading as collated information is exactly what Googleitself has mastered, and the very same principles of shoddiness and indifference that characterise these trashy sites ismanifest on a larger scale when Google serves up the very same content as if it came from an authoritative source.\n  Update: Yet again, Google are passing off photos of other people as photos of me.\n Yet again, some people running science fiction web sites will notice this, and use these pictures in web pages about my work ...which Google will then treat as evidence that they are pictures of me. And the self-reinforcing cycle continues.\n For the people being falsely portrayed as \u201cAustralian science fiction writer Greg Egan\u201d, this is probably just a minor nuisance, but it provides an illustrationof how laughable the notion is that Google will  ever be capable of using its relentlessly over-hyped \u201cAI\u201d to make senseof information on the web. Whatever development has taken place in their software over the past four years, it remains spectacularly incapable of making any kind of reliable inference about facts in the real world.\n   Update: The photo is gone again, probably because I managed to get it taken down from the Russian sitea few days ago. But the underlying problem remains: Google\u2019s software has no ability to distinguish reliable assertions aboutthe real world from random nonsense that appears on the web, created by incompetent or malicious third parties.\n  Update: Two and a half years later, and Google are still as stupid as ever. An obscure Russian site has posteda photo of the professor of engineering Gregory K Egan, passing it off as the SF author Greg Egan ... but hey, that&#39;s good enough forGoogle&#39;s \u201cKnowledge Graph\u201d to declare the association valid and start bringing up the incorrect image in every search resultagain.\n  Update: After John Baez (a mathematical physicist with a huge following on the web)kindly asked his readers to help with this, the photo is now gone.\n  Update: The photo of professor of engineering Gregory K Egan is once again appearing in Google\u2019s mash-up, merged withbiographical details of the SF writer Greg Egan. And this time the fault is 100% Google\u2019s, since they\u2019re taking the photostraight from the Monash University engineering department, rather than from some SF fan site that was misrepresenting the image.\n  Update: Though Google ignored the several hundred Feedback clicks from people telling them that the image was wrong,I eventually managed to locate the person who controlled the particular copy of the misappropriated image that Google were displaying(a completely different person from the owner of the blog they cited as the source). Half a day after that file was deleted, with some prompting from acertain  web tool,the image finally disappeared from the mash-up biography in the search results.\n But it should not have been that hard (and if the system had any real knowledge, it would not have been necessary at all).\n  I don\u2019t publish photos of myself, and there are no photographs of me on the web.But the self-appointed custodians of the world\u2019s knowledge can\u2019t cope with that tiny irregularity in the data, so they insist on fillingthe gap with whatever comes to hand:\n  Obviously it\u2019s not Google\u2019s fault that some obscure SF web siteshave stolen pictures from the Monash University web site of Professor Gregory K Egan and pretended that they\u2019re pictures of me ...but it  is Google\u2019s fault when Google claim to have assembled a mini-biography of someone called \u201cGreg Egan\u201din which the information all refers to one person (a science fiction writer), while the picture is of someone else entirely (a professor of engineering).\n Now, professors of engineering  might also write SF \u2014 but since we have completely different university qualificationsfrom different institutions (and that\u2019s just the easiest thing to check, among the many that distinguish us) there is no excuse at all for conflating the twopeople.The hilariously misnamed Google Knowledge Graph that generated thishalf-one-person/half-another result simply has no concept of who  either Greg Egan is.\n So forget all the hype about \u201c semantic search\u201d;this system is just an amateurish mash-up.And by displaying results from disparate sources in a manner that implies that they refer to the same subject, it acts as a mindless stupidity amplifier that disseminates and entrenches existing errors.\n Below is an email I sent to some friends and relatives this morning.To anyone who\u2019s stumbled on this web page: I\u2019d be grateful if you could also take a moment to vote-down this misattributed photo.\n (I also emailed Google themselves, but their automated complaint handlers just offered me links to help pageson entirely different subjects. No semantic intelligence there, either.)\n  I apologise for this unpersonalised email, but I\u2019m sending this message to a large number of people in the hope that you can spare a few seconds next time you\u2019re on the internet to help me correct a small but very annoying problem.\n I\u2019ve just discovered that if you type \u201cGreg Egan\u201d into a Google search, the results page itself includes a little potted biography of me on the right-hand side of the page, taken from various sources.\n But it also includes a photo of someone else \u2014 a professor of engineering from Monash University who happens to be called Greg Egan as well. Unfortunately for this poor man, a lot of people who don\u2019t realise that there\u2019s more than one Greg Egan in a country the size of Australia have taken his picture off the internet and posted it on various SF web sites as a photo of the SF writer Greg Egan. Whenever I\u2019ve become aware of this I\u2019ve tried to get the error corrected, but now that Google itself is showing the picture to anyone who does a search for me, the mistake is likely to spread even more and become even harder to correct.\n So if you can spare 10 seconds, please type \u201cGreg Egan\u201d into a Google search, and if that little bio comes up on the right-hand side of your results, please click on the word \u201cFeedback\u201d at the bottom of the bio, and then click \u201cWrong?\u201d under the photo. If enough people do this, I\u2019m hoping Google will stop amplifying this error.\n      Essays / Google, the Stupidity Amplifier / created Friday, 10 August 2012 / revised Saturday, 12 November 2016 If you link to this page, please use this URL:  https://www.gregegan.net/ESSAYS/GOOGLE/Google.html  Copyright \u00a9  Greg Egan, 2012-2016. All rights reserved.", "posttime": "2020-05-13 08:56:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,stupidity", "title": "\u8c37\u6b4c\uff0c\u611a\u8822\u7684\u653e\u5927\u5668", "title_en": "Google, the Stupidity Amplifier", "transed": 1, "url": "https://www.gregegan.net/ESSAYS/GOOGLE/Google.html", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "stupidity"]}, {"category": "", "categoryclass": "", "imagename": "45e71461a9944b62a7ae3127ac33bc07.jpg", "infoid": 1001897, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0d\uff0c\u4e0d\u53ea\u662f\u4f60\u3002\u677e\u5f1b\u786e\u5b9e\u662f\u7531\u4e8e\u67d0\u79cd\u5f62\u5f0f\u7684\u505c\u7535\uff0c\u4f3c\u4e4e\u5728\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4\u665a\u4e0a7\uff1a30\u5de6\u53f3\u5f00\u59cb\u53d1\u751f\u3002\u7528\u6237\u62a5\u544a\u7684\u95ee\u9898\u5728DownDetector.com\u4e0a\u6fc0\u589e\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u57fa\u672c\u4e0a\u65e0\u6cd5\u8bbf\u95ee\uff0c\u5e16\u5b50\u6ca1\u6709\u6807\u8bb0\u4e3a\u5df2\u8bfb\u6216\u6839\u672c\u4e0d\u901a\u8fc7\u3002\u8fd9\u4e9b\u95ee\u9898\u6b63\u5728\u5f71\u54cd\u8fd9\u6b3e\u5e94\u7528\u7684\u79fb\u52a8\u548c\u684c\u9762\u7248\u672c\u3002\nSLACK AHS\u5728\u5176\u72b6\u6001\u7f51\u7ad9\u4e0a\u8bc1\u5b9e\u4e86\u8fd9\u4e00\u505c\u673a\u4e8b\u4ef6\uff0c\u5e76\u5199\u9053\uff1a\u201c\u7528\u6237\u62a5\u544a\u4e86\u6d88\u606f\u53d1\u9001\u5931\u8d25\u548c\u8d85\u65f6\u7b49\u4e00\u822c\u6027\u80fd\u95ee\u9898\u3002\u6211\u4eec\u6b63\u5728\u52aa\u529b\u8ba9\u4e00\u5207\u5c3d\u5feb\u6062\u590d\u6b63\u5e38\uff0c\u5e76\u5c06\u5f88\u5feb\u63d0\u4f9b\u6700\u65b0\u60c5\u51b5\uff0c\u201c\u5728\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4\u665a\u4e0a7\u70b953\u5206\u3002\u4e0d\u4e45\u4e4b\u540e\uff0c\u5728\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4\u665a\u4e0a8\u70b902\u5206\uff0c\u8be5\u9875\u9762\u88ab\u66f4\u65b0\u4e3a\u201c\u7528\u6237\u65e0\u6cd5\u8fde\u63a5\u5230Slake\u3002\u6211\u4eec\u6b63\u5728\u8c03\u67e5\uff0c\u4e0d\u4e45\u5c06\u63d0\u4f9b\u6700\u65b0\u60c5\u51b5\u3002\u201c\u3002\n\u7528\u6237\u65e0\u6cd5\u8fde\u63a5\u5230Slake\u3002\u6211\u4eec\u6b63\u5728\u8c03\u67e5\uff0c\u5e76\u5c06\u5f88\u5feb\u63d0\u4f9b\u6700\u65b0\u60c5\u51b5\u3002https://t.co/AALbQGsDHq\u3002\n-\u677e\u5f1b\u72b6\u6001(@slackStatus)2020\u5e745\u670813\u65e5\u3002\n\u8fd9\u4e9b\u95ee\u9898\u4f3c\u4e4e\u5f88\u666e\u904d\uff0c\u5c3d\u7ba1\u73b0\u5728\u5224\u65ad\u5b83\u662f\u5426\u5b64\u7acb\u4e8e\u7f8e\u56fd\u7684\u4efb\u4f55\u4e00\u4e2a\u5730\u533a\u53ef\u80fd\u8fd8\u4e3a\u65f6\u8fc7\u65e9\u3002DownDetector\u4f3c\u4e4e\u8868\u660e\u5b83\u5bf9\u897f\u6d77\u5cb8\u7684\u6253\u51fb\u76f8\u5f53\u4e25\u91cd\uff0c\u4f46\u8fd9\u53ef\u80fd\u662fSlake\u5728\u79d1\u6280\u516c\u53f8\u4e2d\u4f7f\u7528\u7387\u8f83\u9ad8\u7684\u4e00\u4e2a\u56e0\u7d20\u3002\n\u5728\u63a8\u7279\u4e0a\uff0c\u65af\u62c9\u514b\u7684\u5b98\u65b9\u8d26\u53f7\u56de\u5e94\u8bb0\u8005\u6770\u592b\u00b7\u57c3\u5c14\u5fb7(Jeff Elder)\u8bf4\uff0c\u5b83\u201c\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u8d85\u7ea7\u53ef\u9760\u7684\u65f6\u95f4\u8868\u201d\u6765\u8bf4\u660e\u5b83\u5df2\u7ecf\u505c\u673a\u4e86\u591a\u4e45\uff0c\u5de5\u7a0b\u5e08\u4eec\u6b63\u5728\u8c03\u67e5\u95ee\u9898\u662f\u4ec0\u4e48\u3002\n\u6211\u4eec\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u975e\u5e38\u53ef\u9760\u7684\u65f6\u95f4\u8868\u3002\u6211\u4eec\u6b63\u5728\u770b\u4e00\u770b\uff0c\u5e0c\u671b\u5f88\u5feb\u5c31\u80fd\u56de\u6765\uff01\n-Slake(@SlackHQ)2020\u5e745\u670813\u65e5\u3002\n\u5728\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4\u665a\u4e0a8\uff1a43\uff0cSlake\u66f4\u65b0\u4e86\u5b83\u7684\u72b6\u6001\u9875\u9762\uff0c\u201c\u4e00\u4e9b\u5ba2\u6237\u53ef\u80fd\u770b\u5230\u4e86\u6539\u5584\uff0c\u4f46\u6211\u4eec\u4ecd\u5728\u8c03\u67e5\u8fde\u63a5\u95ee\u9898\u3002\u6211\u4eec\u5c06\u572830\u5206\u949f\u540e\u56de\u6765\u4e3a\u60a8\u5e26\u6765\u53e6\u4e00\u6761\u6700\u65b0\u6d88\u606f\u3002\u8c22\u8c22\u60a8\u5bf9\u6211\u4eec\u7684\u5fcd\u8010\u3002\u201c", "note_en": "No, it\u2019s not just you. Slack is indeed down due to an outage of some sort that appears to have begun happening some time around 7:30PM ET. User-reported issues have  spiked on DownDetector.com, and the app is largely inaccessible, with posts not getting marked as read or not going through at all. The issues are affecting both the mobile and desktop versions of the app.\n Slack ahs confirmed the outage on its status website, writing, \u201cUsers have reported general performance issues such message sending failures and timeouts. We\u2019re working to get things back to normal as quickly as possible and will provide an update shortly,\u201d at 7:53PM ET. Shortly after at 8:02PM ET, the page was updated with, \u201cUsers are unable to connect to Slack. We are investigating and will provide an update shortly.\u201d\n Users are unable to connect to Slack. We are investigating and will provide an update shortly.  https://t.co/AALbQGsDHq\n\u2014 Slack Status (@SlackStatus)  May 13, 2020\n The issues seem widespread, although it may be too early to tell whether it\u2019s isolated to any one part of the US. DownDetector seems to indicate it\u2019s hitting the West Coast rather hard, but that may be a factor of Slack\u2019s higher usage among tech companies.\n On Twitter, Slack\u2019s official account responded to journalist Jeff Elder saying it does not \u201chave a super solid timeline at the moment\u201d to how long it\u2019s been down, and engineers are looking into what the issue is.\n We don&#39;t have a super solid timeline at the moment. We&#39;re taking a look and hope to be back up shortly!\n\u2014 Slack (@SlackHQ)  May 13, 2020\n At 8:43PM ET, Slack updated its status page with, \u201cSome customers may be seeing improvements, but we\u2019re still investigating the connectivity issues. We\u2019ll be back in 30 minutes with another update. Thank you for bearing with us.\u201d", "posttime": "2020-05-13 08:56:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u505c\u673a,yep,\u53ef\u80fd", "title": "\u662f\u7684\uff0c\u677e\u5f1b\u505c\u673a\u4e86", "title_en": "Yep, Slack Is Down", "transed": 1, "url": "https://www.theverge.com/2020/5/12/21256717/slack-is-down-disruption-outage", "via": "", "real_tags": ["\u505c\u673a", "yep", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "b98503af0d1a92dca61a7a94b1338399.png", "infoid": 1001896, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f57\u661f\u4ece\u65af\u5229\u59c6\u548c\u5de5\u4eba\u90a3\u91cc\u83b7\u5f97\u4e86\u6240\u6709\u7684\u8d85\u80fd\u529b\uff0c\u540c\u65f6\u4e5f\u589e\u52a0\u4e86\u81ea\u5df1\u7684\u9b54\u529b\u3002\nSLIM\u662f\u4e00\u4e2a\u5fae\u6846\u67b6\uff0c\u5b83\u57fa\u4e8e\u73b0\u4ee3PSR\u6807\u51c6\u5e2e\u52a9\u7f16\u5199\u7b80\u5355\u4f46\u529f\u80fd\u5f3a\u5927\u7684Web\u5e94\u7528\u7a0b\u5e8f\u548cAPI\u3002\nWorkerman\u662f\u4e00\u4e2a\u5f02\u6b65\u4e8b\u4ef6\u9a71\u52a8\u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u9ad8\u6027\u80fd\uff0c\u53ef\u6784\u5efa\u5feb\u901f\u4e14\u53ef\u6269\u5c55\u7684\u7f51\u7edc\u5e94\u7528\u3002\nComet\u662f\u4e00\u4e2a\u6df7\u5408\u578b\u5e94\u7528\u670d\u52a1\u5668\uff0c\u5141\u8bb8\u60a8\u672c\u5730\u4f7f\u7528SLIM\uff1ahttp://www.slimframework.com/docs/v4/\u7684\u6240\u6709\u65b9\u6cd5\u3002\nPHP\u7ecf\u5e38\u56e0\u5176\u4f4e\u541e\u5410\u91cf\u548c\u9ad8\u5ef6\u8fdf\u800c\u53d7\u5230\u6279\u8bc4\u3002\u4f46\u5bf9\u4e8e\u73b0\u4ee3\u6846\u67b6\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u4e00\u5b9a\u662f\u771f\u7684\u3002\u8ba9\u6211\u4eec\u770b\u770b\u5f57\u661f\u662f\u5982\u4f55\u80dc\u8fc7\u5176\u4ed6\u516c\u53f8\u7684\u3002\n\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u6b63\u786e\u7684\u67b6\u6784\u4e3a\u5b83\u63d0\u4f9b\u4e86\u5341\u500d\u4e8esymfony\u548c\u5176\u4ed6\u6d41\u884c\u6846\u67b6\u7684\u4f18\u52bf\u3002\n\u4eceAPI\u83b7\u5f97\u54cd\u5e94\u9700\u8981\u591a\u957f\u65f6\u95f4\u6bd4\u603b\u4f53\u670d\u52a1\u541e\u5410\u91cf\u66f4\u91cd\u8981\u3002\u8fd9\u5c31\u662f\u5f57\u661f\u771f\u6b63\u95ea\u8000\u7684\u5730\u65b9\uff01\nComet\u4e3a\u5178\u578b\u573a\u666f\u63d0\u4f9b\u4e9a\u6beb\u79d2\u7ea7\u5ef6\u8fdf\u3002\u5373\u4f7f\u5728\u6570\u5343\u4e2a\u5e76\u53d1\u8fde\u63a5\u7684\u786c\u538b\u529b\u4e0b\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4e0eGo\u548cJava\u7b49\u7f16\u8bd1\u5e73\u53f0\u7684\u6846\u67b6\u7ade\u4e89\u3002\n\u8fd9\u5c06\u5b89\u88c5\u6846\u67b6\u672c\u8eab\u548c\u6240\u6709\u5fc5\u9700\u7684\u4f9d\u8d56\u9879\u3002Comet\u9700\u8981PHP 7.1\u6216\u66f4\u9ad8\u7248\u672c\u3002\n&lt\uff1b\uff1fPHP\u4f7f\u7528Comet\\Comet\uff1b\u9700\u8981_ONCE__DIR__\u3002&#39\uff1b/vendor/autoload.php&#39\uff1b\uff1b$app=new Comet()\uff1b$app-&gt\uff1bget(&#39\uff1b/hello&&39\uff1b\uff0cfunction($request\uff0c$response){$Response-&gt\uff1bgetBody()-&gt\uff1bWrite(&#34\uff1bHello\uff0cComet\uff01&#34\uff1b)\uff1breturn$Response\uff1b})\uff1b$app-&gt\uff1brun()\uff1b\n\u7136\u540e\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u9ed8\u8ba4\u5730\u5740http://localhost:80-\u60a8\u5c06\u770b\u5230\u6765\u81eaComet\uff01\n&lt\uff1b\uff1fPHP\u4f7f\u7528Comet\\Comet\uff1b\u9700\u8981_ONCE__DIR__\u3002&#39\uff1b/Vendor/autoload.php&#39\uff1b\uff1b$app=new Comet([&#39\uff1bhost&#39\uff1b=&&gt;\uff1b&39\uff1blocalhost&#39\uff1b\uff0c&#39\uff1bport&#39\uff1b=&gt\uff1b8080])\uff1b$app-&&gt;Get(&#39\uff1b/json&#39\uff1b\uff0cfunction($request\uff0c$response){$object=new stdClass()\uff1b$object-&gt\uff1bdata\u3002=&&gt\uff1b200\uff0c&#34\uff1b\u6d88\u606f&#34\uff1b=&&gt;\uff1b&34\uff1b\u4f60\u597d\uff0cComet\uff01&#34\uff1b]\uff1b$payload=json_encode($object)\uff1b$Response-&gt\uff1bgetBody()-&gt\uff1bwrite($payload)\uff1breturn$Response-&gt\uff1bwith Header(&#39\uff1bContent-Type&#39\uff1b\uff0c&#39\uff1bapplication/json&39\uff1b)\uff1b})\uff1b$app-&gt\uff1bwrite($payload)\uff1b\u8fd4\u56de$Response-&gt\uff1bwith Header(&#39\uff1bContent-Type&#39\uff1b\uff0c&#39\uff1bapplication/json&39\uff1b)\uff1b})\uff1b$app-&gt\uff1bwrite\u3002\n\u5728\u7ee7\u7eed\u590d\u6742\u793a\u4f8b\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684Composer.json\u5305\u542b\u5982\u4e0b\u6240\u793a\u7684autoload\u90e8\u5206\uff1a\n\u5982\u679c\u6ca1\u6709\uff0c\u60a8\u5e94\u8be5\u6dfb\u52a0\u4e0a\u9762\u63d0\u5230\u7684\u90e8\u5206\uff0c\u5e76\u901a\u8fc7\u547d\u4ee4\u66f4\u65b0\u6240\u6709\u4f9b\u5e94\u5546\u8f6f\u4ef6\u5305\u548c\u81ea\u52a8\u52a0\u8f7d\u903b\u8f91\uff1a\n&lt\uff1b\uff1fPHP\u547d\u540d\u7a7a\u95f4\u63a7\u5236\u5668\uff1b\u4f7f\u7528Slim\\Psr7\\Request\uff1b\u4f7f\u7528Slim\\Psr7\\Response\uff1bclass SimpleController{\u79c1\u6709\u9759\u6001$\u8ba1\u6570\u5668=0\uff1b\u516c\u5171\u51fd\u6570getCounter(Request$Request\uff0cResponse$Response\uff0c$args){$Response-&gt\uff1bgetBody()-&gt\uff1bWrite(Self\uff1a\uff1a$Counter)\uff1breturn$Response-&gt\uff1bwith Status(200)\uff1b}\u516c\u5171\u51fd\u6570setCounter(Request$Request\uff0cResponse$Response\uff0c$json=json_decode($json)\uff1b\u5982\u679c(\uff01$json){return$response-&gt\uff1bwith Status(500)\uff1b}self\uff1a\uff1a$counter=$json-&gt\uff1bcounter\uff1breturn$response\uff1b}}\u3002\n&lt\uff1b\uff1fPHP\u4f7f\u7528Comet\\Comet\uff1b\u4f7f\u7528\u63a7\u5236\u5668\\SimpleController\uff1b\u9700\u8981_ONCE__DIR__\u3002&#39\uff1b/\u4f9b\u5e94\u5546/autoload.php&#39\uff1b\uff1b$app=new Comet([&#39\uff1bhost&#39\uff1b=&&gt;\uff1b&39\uff1blocalhost&#39\uff1b\uff0c&#39\uff1bport&#39\uff1b=&gt\uff1b8080])\uff1b$app-&gt\uff1bsetBasePath(&#34\uff1b/api/v1&34\uff1b)\uff1b$app-&gt\uff1bget(&#39\uff1b/count&39\uff1b\uff0c&\u3002$APP-&&gt;POST(&#39\uff1b/Counter&39\uff1b\uff0c&#39\uff1bControls\\SimpleController\uff1asetCounter&39\uff1b)\uff1b$APP-&&gt;Run()\uff1b\n\u4efb\u4f55\u5177\u6709\u90ae\u4ef6\u683c\u5f0f\u6b63\u6587\u7684\u8c03\u7528\u90fd\u5c06\u4f7f\u7528HTTP500\u4ee3\u7801\u8fdb\u884c\u56de\u590d\uff0c\u8fd9\u5728\u63a7\u5236\u5668\u903b\u8f91\u4e2d\u5b9a\u4e49\u3002\n\u8bf7\u53c2\u8003\u672c\u8d44\u6e90\u5e93\u4e2d\u7684Dockerfile\uff0c\u4f5c\u4e3a\u521b\u5efa\u60a8\u81ea\u5df1\u7684APP\u955c\u50cf\u548c\u5bb9\u5668\u7684\u8d77\u70b9\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u5c06nginx\u7528\u4f5cComet\u5e94\u7528\u7684\u53cd\u5411\u4ee3\u7406\u6216\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u8bf7\u5728nginx.conf\u4e2d\u63d2\u5165\u4ee5\u4e0b\u884c\uff1a\nHTTP{\u4e0a\u6e38APP{\u670d\u52a1\u5668http\uff1a//path.to.you.app\uff1aport\uff1b}\u670d\u52a1\u5668{\u76d1\u542c80\uff1b\u4f4d\u7f6e/{PROXY_PASS http\uff1a//app\uff1bPROXY_REDIREOFF\uff1b}", "note_en": "Comet gets all superpowers from Slim and Workerman as well as adds its own magic.\n Slim is a micro-framework that helps write simple yet powerful web applications and APIs based on modern PSR standards.\n Workerman is an asynchronous event-driven framework. It delivers high performance to build fast and scalable network applications.\n Comet is a hybrid app server that allows you natively use all methods of Slim:  http://www.slimframework.com/docs/v4/\n  PHP is often criticized for its low throughput and high latency. But that is not necessarily true for modern frameworks. Let&#39;s see how Comet outperforms others.\n   As you can see, the right architecture provides it with tenfold advantage over Symfony and other popular frameworks.\n  How long it takes to get response from API is even more important than overall service throughput. And that is were Comet really shines!\n   Comet provides sub-millisecond latency for typical scenarios. Even under hard pressure of thousand concurrent connections it can compete with frameworks of compiled platforms like Go and Java.\n     This will install framework itself and all required dependencies. Comet requires PHP 7.1 or newer.\n   &lt;?php    use  Comet\\Comet;   require_once  __DIR__  .   &#39;/vendor/autoload.php &#39;;   $app  =  new  Comet();   $app -&gt;get(  &#39;/hello &#39;,  function ( $request,  $response) {   $response   -&gt;getBody()   -&gt;write(  &#34;Hello, Comet! &#34;);    return  $response; });   $app -&gt;run();\n   Then open browser and type in default address  http://localhost:80 - you&#39;ll see hello from Comet!\n   &lt;?php    use  Comet\\Comet;   require_once  __DIR__  .   &#39;/vendor/autoload.php &#39;;   $app  =  new  Comet([    &#39;host &#39;  =&gt;   &#39;localhost &#39;,    &#39;port &#39;  =&gt;  8080 ]);   $app -&gt;get(  &#39;/json &#39;,  function ( $request,  $response) {    $object  =  new  stdClass();   $object -&gt; data  = [   &#34;code &#34;  =&gt;  200,   &#34;message &#34;  =&gt;   &#34;Hello, Comet! &#34; ];   $payload  =  json_encode( $object);   $response -&gt;getBody() -&gt;write( $payload);   return  $response   -&gt;withHeader(  &#39;Content-Type &#39;,   &#39;application/json &#39;); });   $app -&gt;run();\n    Before you proceed with complex examples, be sure that your composer.json contains autoload section like this:\n  If not, you should add the section mentioned above and update all vendor packages and autoload logic by command:\n    &lt;?php    namespace  Controllers;   use  Slim\\Psr7\\Request;  use  Slim\\Psr7\\Response;   class  SimpleController {    private  static  $counter  =  0;    public  function  getCounter( Request  $request,  Response  $response,  $args)  {   $response -&gt;getBody() -&gt;write( self :: $counter);    return  $response -&gt;withStatus( 200);  }    public  function  setCounter( Request  $request,  Response  $response,  $args)   {    $body  = ( string)  $request -&gt;getBody();   $json  =  json_decode( $json);   if ( ! $json) {   return  $response -&gt;withStatus( 500);  }    self :: $counter  =  $json -&gt; counter;   return  $response;   } }\n  &lt;?php    use  Comet\\Comet;  use  Controllers\\SimpleController;   require_once  __DIR__  .   &#39;/vendor/autoload.php &#39;;   $app  =  new  Comet([    &#39;host &#39;  =&gt;   &#39;localhost &#39;,    &#39;port &#39;  =&gt;  8080 ]);   $app -&gt;setBasePath(  &#34;/api/v1 &#34;);    $app -&gt;get(  &#39;/counter &#39;,    &#39;Controllers\\SimpleController:getCounter &#39;);   $app -&gt;post(  &#39;/counter &#39;,     &#39;Controllers\\SimpleController:setCounter &#39;);   $app -&gt;run();\n     Any call with mailformed body will be replied with HTTP 500 code, as defined at controller logic.\n  Please see  Dockerfile at this repo as starting point for creating your own app images and containers.\n If you would like to use Nginx as reverse proxy or load balancer for your Comet app, insert into nginx.conf these lines:\n http {     upstream  app {   server  http:  //path.to.your.app:port;  }     server {   listen  80;   location  / {   proxy_pass  http:  //app;   proxy_redirect  off;  }  } }", "posttime": "2020-05-13 08:55:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7528\u4e8e,modern,\u6846\u67b6", "title": "Comet-\u7528\u4e8e\u6784\u5efa\u5feb\u901fREST API\u7684\u73b0\u4ee3PHP\u6846\u67b6", "title_en": "Comet \u2013 modern PHP framework for building fast REST APIs", "transed": 1, "url": "https://github.com/gotzmann/comet", "via": "", "real_tags": ["\u7528\u4e8e", "modern", "\u6846\u67b6"]}, {"category": "", "categoryclass": "", "imagename": "8ac709b57ca45622012b96828f86515e.png", "infoid": 1001895, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7528\u6237\u65e0\u6cd5\u8fde\u63a5\u5230Slake\u3002\u6211\u4eec\u6b63\u5728\u8c03\u67e5\uff0c\u5e76\u5c06\u5f88\u5feb\u63d0\u4f9b\u6700\u65b0\u60c5\u51b5\u3002\n\u7528\u6237\u62a5\u544a\u4e86\u4e00\u822c\u6027\u80fd\u95ee\u9898\uff0c\u5982\u6d88\u606f\u53d1\u9001\u5931\u8d25\u548c\u8d85\u65f6\u3002\u6211\u4eec\u6b63\u5728\u52aa\u529b\u8ba9\u4e8b\u60c5\u5c3d\u5feb\u6062\u590d\u6b63\u5e38\uff0c\u5e76\u5c06\u5f88\u5feb\u63d0\u4f9b\u6700\u65b0\u60c5\u51b5\u3002", "note_en": "Users are unable to connect to Slack. We are investigating and will provide an update shortly.\n Users have reported general performance issues such message sending failures and timeouts. We\u2019re working to get things back to normal as quickly as possible and will provide an update shortly.", "posttime": "2020-05-13 08:41:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u505c\u673a,slack,\u8fde\u63a5", "title": "\u677e\u5f1b\u505c\u673a", "title_en": "Slack Outage", "transed": 1, "url": "https://status.slack.com/2020-05/147dad376c8946ff", "via": "", "real_tags": ["\u505c\u673a", "slack", "\u8fde\u63a5"]}, {"category": "", "categoryclass": "", "imagename": "3c1cf0b64cddfd64d172ba4671b6c1a0.png", "infoid": 1001894, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e4d\u4e00\u770b\uff0c\u4e3a\u4f60\u7684\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u7ad9\u8fd0\u884c\u81ea\u5df1\u7684\u63a8\u9001\u901a\u77e5\u670d\u52a1\u5668\u4f3c\u4e4e\u5f88\u7b80\u5355\uff0c\u4f46\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u53d1\u73b0\u81ea\u5df1\u9677\u5165\u4e86\u9ebb\u70e6\u7684\u6df1\u6e0a\u3002\n\u60f3\u8c61\u4e00\u4e0b\u8fd9\u6837\u7684\u573a\u666f\uff1a\u4f60\u662f\u4e00\u5bb6\u79fb\u52a8\u5e94\u7528\u521d\u521b\u516c\u53f8\u7684\u6251\u7ffc\u5de5\u7a0b\u5e08\u3002\u6709\u4e00\u5929\uff0c\u4f60\u7684\u4ea7\u54c1\u7ecf\u7406\u6765\u627e\u4f60\uff0c\u8981\u6c42\u4f60\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5f53\u4ed6\u4eec\u5173\u6ce8\u7684\u5546\u54c1\u6253\u6298\u65f6\uff0c\u5411\u7528\u6237\u53d1\u9001\u901a\u77e5\u3002\n\u201c\u6ca1\u95ee\u9898\u201d\uff0c\u4f60\u8bf4\uff0c\u5df2\u7ecf\u5f00\u59cb\u5728Github\u4e0a\u641c\u7d22\u4e00\u4e2a\u5f00\u6e90\u5e93\u6765\u5e2e\u52a9\u4f60\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4ee4\u4eba\u9ad8\u5174\u7684\u662f\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u6709\u4e24\u4e2a\u6d41\u884c\u7684\u5f00\u6e90\u9879\u76ee\u53ef\u4ee5\u540c\u65f6\u5411iOS\u548cAndroid\u53d1\u9001\u901a\u77e5\u3002\n\u50cf\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u4e00\u6837\uff0c\u60a8\u5728Javascript\u65b9\u9762\u6bd4Go\u66f4\u6709\u7ecf\u9a8c\u3002\u56e0\u6b64\uff0c\u60a8\u9009\u62e9\u4e86\u6d41\u884c\u7684\u201c\u5fae\u7b11-SA/\u8282\u70b9-\u63a8\u9001\u670d\u52a1\u5668\u201d\u9879\u76ee\u3002\n\u5174\u594b\u5730\u514b\u9686\u9879\u76ee\u5e76\u51c6\u5907\u5c06\u5176\u90e8\u7f72\u5230Heroku\uff0c\u60a8\u6070\u597d\u5ffd\u7565\u4e86\u8be5\u9879\u76ee\u81ea2015\u5e74\u4ee5\u6765\u5c31\u6ca1\u6709\u66f4\u65b0\u8fc7\u3002(\u4e0e\u622a\u56fe\u4e2d\u7684\u201c3\u670821\u65e5\u201d\u6807\u7b7e\u76f8\u53cd\u3002\u8fd9\u6b63\u662f\u6700\u540e\u4e00\u671f\u7684\u62a5\u9053\u65f6\u95f4\u3002)\u3002\n\u4e00\u5207\u6b63\u5e38\uff0c\u2026\u3002\u4e00\u6bb5\u65f6\u95f4\u3002\u7136\u540e\uff0c2020\u5e7411\u6708\u6765\u4e34\uff0c\u4e00\u5207\u90fd\u5d29\u6e83\u4e86\u3002\u9057\u61be\u7684\u662f\uff0c\u4f60\u6ca1\u6709\u770b\u5230\u82f9\u679c\u5ba3\u5e03\u4ed6\u4eec\u5c06\u5f03\u7528\u65e7\u7684\u63a8\u9001API\u7684\u65b0\u95fb\u3002\u5373\u4f7f\u60a8\u770b\u5230\u4e86\u65b0\u95fb\uff0c\u60a8\u4e5f\u6ca1\u6709\u610f\u8bc6\u5230\u201cnode-ush server\u201d\u9879\u76ee\u4e0d\u652f\u6301\u8be5\u534f\u8bae\u3002\u554a\u54e6\u3002\n\u4f60\u5f88\u5feb\u5c31\u4f1a\u6025\u4e8e\u89e3\u51b3\u95ee\u9898\u3002\u6bcf\u8fc7\u4e00\u5c0f\u65f6\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c31\u4f1a\u6536\u5230\u7528\u6237\u7684\u5dee\u8bc4\u3002\u4f60\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u6700\u53d7\u6b22\u8fce\u7684\u9879\u76ee\u201cappleboy/gorush\u201d\u3002\u8fd9\u4e2a\u9879\u76ee\u8981\u590d\u6742\u5f97\u591a\uff0c\u9700\u8981\u8fd0\u884cDocker\u5bb9\u5668\u3001Redis\u6570\u636e\u5e93\uff0c\u5e76\u5b66\u4e60\u5982\u4f55\u8bbe\u7f6e\u548c\u4fdd\u6301Go\u670d\u52a1\u8fd0\u884c\u3002\u8c22\u5929\u8c22\u5730\uff0c\u4f60\u8ba9\u5b83\u5de5\u4f5c\u4e86\u3002\nGoRush\u662f\u4e00\u4e2a\u53d7\u6b22\u8fce\u7684\u9879\u76ee\uff0c\u6709\u8d85\u8fc7690\u4e2a\u63d0\u4ea4\u3002\u4e0d\u5e78\u7684\u662f\uff0c95%\u7684\u627f\u8bfa\u53ea\u7531\u4e00\u4e2a\u672a\u652f\u4ed8\u7684\u6350\u8d60\u8005\u5b8c\u6210\u3002\n\u5728\u8d21\u732e\u8005\u653e\u5f03\u8be5\u9879\u76ee\u4e4b\u524d\u7684\u51e0\u4e2a\u6708\u5185\uff0c\u4e00\u5207\u90fd\u5f88\u6b63\u5e38\u3002\u4f60\u5e0c\u671b\u5176\u4ed6\u4eba\u80fd\u7ad9\u8d77\u6765\u63a5\u624b\u3002\u53ef\u60b2\u7684\u662f\uff0c\u51e0\u4e4e\u6ca1\u6709\u4eba\u613f\u610f\u627f\u62c5\u4e00\u4e2a\u590d\u6742\u7684\u5f00\u653e\u6e90\u7801\u9879\u76ee\u7684\u65e0\u507f\u5f00\u53d1\u7684\u8d23\u4efb\uff0c\u6bcf\u4e2a\u6708\u90fd\u4f1a\u62a5\u544a\u51e0\u5341\u4e2a\u95ee\u9898\u3002[\u8fd9\u4e2a\u4f8b\u5b50\u8fd8\u6ca1\u6709\u53d1\u751f\uff0c\u4f46\u5b83\u5b8c\u5168\u5728\u53ef\u80fd\u7684\u8303\u56f4\u5185]\u3002\n\u901a\u77e5API\u503e\u5411\u4e8e\u6bcf\u5e74\u6709\u610f\u4e49\u5730\u66f4\u6539\u4e00\u6b21\uff0c\u65f6\u949f\u5f00\u59cb\u6ef4\u7b54\u4f5c\u54cd\u5730\u663e\u793a\u53e6\u4e00\u6b21\u201c\u8282\u70b9\u63a8\u9001\u670d\u52a1\u5668\u201d\u5f0f\u7684\u6545\u969c\uff0c\u5c31\u50cf\u60a8\u4ee5\u524d\u9047\u5230\u7684\u90a3\u6837\u3002\n\u60a8\u66fe\u77ed\u6682\u5730\u8003\u8651\u8fc7\u81ea\u5df1\u5b66\u4e60\u56f4\u68cb\u5e76\u627f\u62c5\u7ef4\u62a4\u5de5\u4f5c\uff0c\u4f46\u5f88\u5feb\u5c31\u653e\u5f03\u4e86\u3002\u60a8\u662f\u79fb\u52a8\u5f00\u53d1\u4eba\u5458\uff0c\u4e0d\u662f\u7cfb\u7edf\u5de5\u7a0b\u5e08\u3002\n\u60a8\u5f00\u59cb\u5bfb\u627e\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\uff0c\u53d1\u73b0\u4e86Firebase\u4e91\u6d88\u606f\u4f20\u9012\u3002\u5b83\u4e0d\u662f\u5f00\u6e90\u7684\uff0c\u4f46\u5b83\u662f\u514d\u8d39\u7684\u3002\u5b83\u540c\u65f6\u652f\u6301iOS\u548cAndroid\uff0c\u800c\u4e14\u5b83\u5c5e\u4e8e\u8c37\u6b4c\u6240\u6709\u3002\u201c\u4e3a\u4ec0\u4e48\u6211\u4e00\u5f00\u59cb\u5c31\u4e0d\u7528\u8fd9\u4e2a\uff1f\uff01\u201d\u60a8\u60ca\u547c\u9053\uff0c\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u5e10\u6237\u3002\u7531\u4e8e\u6709\u6e05\u6670\u7684\u89c6\u9891\u3001\u793a\u4f8b\u9879\u76ee\u548c\u8bf4\u660e\uff0c\u6574\u4e2a\u8fc7\u7a0b\u975e\u5e38\u987a\u5229\u3002\n\u6709\u4e00\u5929\uff0c\u4f60\u7684\u4ea7\u54c1\u7ecf\u7406\u8dd1\u5230\u4f60\u7684\u529e\u516c\u684c\u524d\u3002\u201c\u5b83\u53c8\u574f\u4e86\uff01\u201d\u5979\u558a\u9053\u3002\u60a8\u610f\u8bc6\u5230\u60a8\u7684\u4e00\u4e9b\u6700\u91cd\u8981\u7684\u901a\u77e5\u6ca1\u6709\u5230\u8fbe\u60a8\u7684\u7528\u6237\u3002\u6700\u540e\u8ffd\u67e5\u539f\u56e0\uff0c\u60a8\u53d1\u73b0Firebase\u6ca1\u6709\u6b63\u786e\u5730\u5411\u7528\u6237\u7ec4\u6216Firebase\u79f0\u4e4b\u4e3a\u201c\u4e3b\u9898\u201d\u7684\u7528\u6237\u7ec4\u53d1\u9001\u901a\u77e5\u3002\n\u5728\u901a\u8fc7Firebase\u652f\u6301\u8868\u5355\u53d1\u9001\u4e86\u8fd112\u4e2a\u9519\u8bef\u62a5\u544a\u540e\uff0c\u4ed6\u4eec\u7ec8\u4e8e\u57285\u5929\u540e\u627f\u8ba4\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u677e\u4e86\u4e00\u53e3\u6c14\u540e\uff0c\u4f60\u62ff\u4e86\u4e00\u676f\u5496\u5561\uff0c\u5e0c\u671b\u706b\u57fa\u5730\u56e2\u961f\u51e0\u5206\u949f\u5185\u5c31\u80fd\u628a\u5b83\u4fee\u597d\u3002\u53ef\u60b2\u7684\u662f\uff0c\u5728\u63a8\u51fa\u89e3\u51b3\u65b9\u6848\u4e4b\u524d\uff0c\u8fd9\u51e0\u5206\u949f\u53d8\u6210\u4e8612\u5929\u3002\n\u5728\u8fd917\u5929\u7684\u65f6\u95f4\u91cc\uff0c\u4f60\u7684\u5e94\u7528\u6536\u5230\u4e86\u6570\u767e\u67611\u661f\u7684\u8bc4\u8bba\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u95ee\u9898\u73b0\u5728\u5df2\u7ecf\u89e3\u51b3\uff0c\u60a8\u5e0c\u671b\u5c06\u6765\u6709\u66f4\u597d\u7684\u4f53\u9a8c\u3002\n\u51e0\u4e2a\u6708\u540e\uff0c\u4f60\u53c8\u9047\u5230\u4e86\u95ee\u9898\u3002\u4e00\u4e9biOS\u7528\u6237\u6ca1\u6709\u6536\u5230\u901a\u77e5\u3002\u4f60\u8ba4\u4e3a\u8fd9\u662fFirebase iOS\u79fb\u52a8SDK\u7684\u95ee\u9898\uff0c\u7136\u540e\u4f60\u5728Github\u4e0a\u62a5\u544a\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u4e0e\u60a8\u4e00\u8d77\u52aa\u529b\u7684\u8fd8\u6709\u5176\u4ed6\u51e0\u5341\u540d\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u4eec\u6b63\u5728\u4e3a\u540c\u6837\u7684\u95ee\u9898\u800c\u82e6\u82e6\u6323\u624e\u3002\u8be5\u95ee\u9898\u5927\u7ea6\u9700\u898135\u5929FireBase\u624d\u80fd\u89e3\u51b3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4f60\u5df2\u7ecf\u5931\u53bb\u4e86\u5411\u5927\u91cfiOS\u7528\u6237\u53d1\u9001\u6d88\u606f\u7684\u80fd\u529b\u3002\n\u201c\u8fd9\u5e94\u8be5\u5f88\u7b80\u5355\uff0c\u201d\u4f60\u60f3\uff0c\u60f3\u77e5\u9053\u4f60\u54ea\u91cc\u9519\u4e86\u3002\n\u8fd9\u592a\u75af\u72c2\u4e86\u3002\u901a\u77e5\u5e94\u8be5\u5f88\u7b80\u5355\u3002\u51e0\u4e4e\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u53d1\u9001\u5b83\u4eec\uff0c\u4f46\u662f\u51e0\u4e4e\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u9047\u5230\u76f8\u540c\u7684\u95ee\u9898\u3002\n\u5f53\u6211\u4eec\u4ee5\u524d\u662f\u4e00\u5bb6\u624b\u673a\u6e38\u620f\u5de5\u4f5c\u5ba4\u65f6\uff0c\u6211\u4eec\u81ea\u5df1\u4e5f\u9047\u5230\u4e86\u5f88\u591a\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u6211\u4eec\u521b\u5efa\u4e86OneSignal\u3002\u6211\u4eec\u9700\u8981\u7684\u4e0d\u4ec5\u4ec5\u662f\u201c\u53ea\u9700\u8981\u5de5\u4f5c\u201d\uff0c\u8fd8\u9700\u8981\u652f\u6301\u57fa\u672c\u529f\u80fd\uff0c\u6bd4\u5982\u7ec6\u5206\u3001\u5206\u6790\u3001A/B\u6d4b\u8bd5\uff0c\u4ee5\u53ca\u4e0e\u7b2c\u4e09\u65b9\u7cfb\u7edf\u7684\u96c6\u6210\u3002\u7136\u800c\uff0c\u4e4b\u524d\u7684\u4e00\u5207\u90fd\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u6700\u57fa\u672c\u7684\u8981\u6c42\u3002\n\u6211\u4eec\u770b\u5230\u8bb8\u591a\u5f00\u53d1\u4eba\u5458\u72af\u4e86\u9519\u8bef\uff0c\u8bd5\u56fe\u8fd0\u884c\u4ed6\u4eec\u81ea\u5df1\u7684\u901a\u77e5\u57fa\u7840\u8bbe\u65bd\uff0c\u7ed3\u679c\u5374\u53d1\u73b0\u5b83\u5f88\u5feb\u5c31\u4f1a\u5728\u8d1f\u8f7d\u4e0b\u5d29\u6e83\uff0c\u6216\u8005\u843d\u540e\u4e8e\u6280\u672f\u53d8\u5316\u3002\u6211\u4eec\u4e5f\u6709\u6570\u4ee5\u5343\u8ba1\u7684\u5f00\u53d1\u4eba\u5458\u4ece\u5176\u4ed6\u4f9b\u5e94\u5546(\u5982Firebase)\u8f6c\u5411OneSignal\uff0c\u4ed6\u4eec\u9047\u5230\u4e86\u957f\u671f\u7684\u670d\u52a1\u95ee\u9898\u6216\u65e0\u6cd5\u83b7\u5f97\u652f\u6301\u3002\u6211\u4eec\u7ec8\u4e8e\u7b80\u5316\u4e86\u6240\u6709\u5f00\u53d1\u4eba\u5458\u53d1\u9001\u6709\u6548\u901a\u77e5\u7684\u8fc7\u7a0b\u3002", "note_en": "At first glance, running your own Push Notification server for your mobile app or website might seem simple, but most developers find themselves in a deep pit of trouble.\n Imagine this scenario: You\u2019re a Flutter engineer at a mobile app startup. One day your product manager comes to you and asks you to build a system to send notifications to users when an item they follow goes on sale.\n \u201cNo Problem\u201d, you say, already starting to  search on Github for an open-source library to help you do it. Happily, you see that there are two popular open-source projects to send notifications to both iOS and Android.\n Like most developers, you\u2019re more experienced in Javascript than Go. So you pick the popular \u201c Smile-SA/node-pushserver\u201d project.\n  Excitedly cloning the project and getting ready to deploy it to Heroku, you happen to overlook that  the project hasn\u2019t been updated since 2015. (Contrary to the \u201cMar 21\u201d label in the screenshot. That\u2019s just when the last issue was reported.)\n Everything works fine\u2026for a while. Then November 2020 rolls around and everything breaks. Sadly, you didn\u2019t see the news that Apple announced they would be deprecating their old push API. Even if you had seen the news, you didn\u2019t realize that the \u201c node-pushserver\u201d project doesn\u2019t support this protocol. Uh-oh.\n  You quickly rush to fix the problem. With each passing hour, your app is getting bad reviews from your users. You switch to the next most popular project \u201c appleboy/gorush\u201d. This project is much more complicated, requiring running a Docker container, a Redis database, and learning how to set up and keep a Go service running. Thankfully, you get it working.\n GoRush is a popular project with over 690 commits. Unfortunately,  95% of the commits have been made by just one, unpaid contributor.\n Everything is fine for a few months until the contributor abandons the project. You hope that someone else will rise to take over. Sadly few people want to take on the responsibility of unpaid development of a complicated open source project with dozens of issues reported each month. [This example hasn\u2019t happened, but it\u2019s well within the realm of possibility]\n Notification APIs tend to meaningfully change once per year, the clock starts ticking on another \u201cnode-pushserver\u201d-style failure like the one you had before.\n You briefly consider learning Go and taking on the maintenance work yourself, but quickly give up. You\u2019re a mobile developer, not a systems engineer.\n You start to look for alternate solutions and find Firebase Cloud Messaging. It\u2019s not open source but it\u2019s free. It supports both iOS and Android, and it\u2019s owned by Google. \u201cWhy didn\u2019t I use this in the first place?!\u201d you exclaim, already creating an account. The process is smooth thanks to clear videos, example projects, and instructions.\n One day your product manager runs over to your desk. \u201cIt\u2019s broken again!\u201d she exclaims. You realize that some of your most critical notifications aren\u2019t reaching your users. Finally tracking down the cause, you find that Firebase is not correctly delivering notifications to user groups, or \u201cTopics\u201d as Firebase calls them.\n After sending nearly a dozen bug reports via the Firebase support form they  finally acknowledge the issue 5 days later. Relieved, you grab a coffee expecting it to be fixed from the Firebase team in a few minutes. Sadly, those minutes turn into  12 more days before a fix is rolled out.\n  During this 17-day period, your app has received several hundred 1-star reviews. Fortunately, the problem is now resolved and you hope for a better experience in the future.\n A few months later you run into problems again. Some iOS users aren\u2019t receiving notifications. You believe it\u2019s an issue with the Firebase iOS mobile SDK and you  report the issue on Github. You\u2019re joined by several dozen other developers struggling with the same problem. The issue takes about  35 days for Firebase to fix. Meanwhile, you\u2019ve lost the ability to message a large number of your iOS users.\n  \u201cThis was supposed to be simple,\u201d you think, wondering where you went wrong.\n This is crazy. Notifications should be simple. Nearly every application sends them, yet nearly everyone runs into the same problems.\n We founded  OneSignal after running into many of these problems ourselves when we were previously a mobile game studio. We needed something that would not only \u201cjust work\u201d, but would also support essential features like segmentation, analytics, A/B testing, and integrations with third-party systems. Yet everything before fell way short of the basics.\n We\u2019ve seen many developers make the mistake of trying to run their own notification infrastructure, only to find it quickly crumble under load or fall behind technology changes. We\u2019ve also had thousands of developers switch to OneSignal from other vendors like Firebase who ran into long-lasting service issues or unreachable support.  We\u2019ve finally made it simple for all developers to send effective notifications.", "posttime": "2020-05-13 08:41:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63a8\u9001,build,\u9879\u76ee", "title": "\u4e0d\u8981\u81ea\u5df1\u521b\u5efa\u63a8\u9001\u901a\u77e5", "title_en": "Don\u2019t Build Push Notifications Yourself", "transed": 1, "url": "https://medium.com/@gdeglin/dont-build-push-notifications-yourself-15e2002f1034", "via": "", "real_tags": ["\u63a8\u9001", "build", "\u9879\u76ee"]}, {"category": "", "categoryclass": "", "imagename": "ce801146741ae94b4417a916fca1625a.jpg", "infoid": 1001893, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u7f8e\u56fd\u6cd5\u8b66\u670d\u52a1\u7684\u4e00\u540d\u5b98\u5458\u79f0\uff0c\u53bb\u5e74\u5e74\u5e95\uff0c\u7f8e\u56fd\u6cd5\u8b66\u670d\u52a1\u906d\u53d7\u4e86\u4e00\u6b21\u7f51\u7edc\u653b\u51fb\uff0c\u66b4\u9732\u4e86\u5927\u7ea638.7\u4e07\u540d\u73b0\u4efb\u548c\u524d\u4efb\u56da\u72af\u7684\u4e2a\u4eba\u4fe1\u606f\u3002\n\u6cd5\u8b66\u90e8\u95e8\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u544a\u8bc9Nextgov\uff1a\u201c\u653b\u51fb\u8005\u80fd\u591f\u5229\u7528\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u63d0\u53d6\u5927\u7ea638.7\u4e07\u4eba\u7684\u654f\u611f\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f\u3002\u201d\n\u8fd9\u4f4d\u53d1\u8a00\u4eba\u6307\u7684\u662f\u4e00\u4e2a\u540d\u4e3adsNet\u7684\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u65e8\u5728\u8be5\u673a\u6784\u3001\u8054\u90a6\u6cd5\u9662\u548c\u76d1\u72f1\u5c40\u5185\u90e8\u6536\u5bb9\u548c\u8fd0\u9001\u56da\u72af\u3002\u63d0\u53d6\u7684\u4fe1\u606f\u5305\u62ec\u59d3\u540d\u3001\u5730\u5740\u3001\u51fa\u751f\u65e5\u671f\u548c\u793e\u4fdd\u53f7\u7801\u3002\n\u5173\u4e8e\u8fd9\u8d77\u8fdd\u89c4\u4e8b\u4ef6\u7684\u62a5\u9053\u6700\u65e9\u51fa\u73b0\u5728\u5468\u4e94\uff0c\u5e76\u5f15\u7528\u4e86\u6cd5\u8b66\u670d\u52a1\u5c40\u53d1\u7ed9\u53d7\u5f71\u54cd\u4e2a\u4eba\u7684\u901a\u77e5\u4fe1\u3002ZDNet\u516c\u5e03\u4e86\u8fd9\u5c01\u4fe1\u7684\u526f\u672c\uff0c\u65e5\u671f\u4e3a5\u67081\u65e5\uff0c\u5e76\u5728Twitter\u4e0a\u94fe\u63a5\u5230\u6709\u5173\u5404\u65b9\u7684\u8bc4\u8bba\u3002\n\u4fe1\u4e2d\u5199\u9053\uff1a\u201c2019\u5e7412\u670830\u65e5\uff0c\u7f8e\u56fd\u6cd5\u8b66\u670d\u52a1\u90e8(USMS)\u4fe1\u606f\u6280\u672f\u90e8(ITD)\u6536\u5230\u53f8\u6cd5\u90e8\u5b89\u5168\u8fd0\u8425\u4e2d\u5fc3(JSOC)\u7684\u901a\u77e5\uff0c\u79f0\u4e00\u4e2a\u5b89\u5168\u6f0f\u6d1e\u5f71\u54cd\u5230\u4e00\u4e2a\u9762\u5411\u516c\u4f17\u7684USMS\u670d\u52a1\u5668\uff0c\u8be5\u670d\u52a1\u5668\u5b58\u50a8\u7740\u4e0e\u73b0\u4efb\u548c\u524d\u4efbUSMS\u56da\u72af\u6709\u5173\u7684\u4fe1\u606f\u3002\u201d\u201c\u60a8\u5df2\u88ab\u786e\u8ba4\u4e3a\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f(PII)\u53ef\u80fd\u56e0\u6b64\u6b21\u6cc4\u9732\u800c\u6cc4\u9732\u7684\u4e2a\u4eba\u3002\u201d\n\u8be5\u673a\u6784\u53d1\u8a00\u4eba\u8bc1\u5b9e\u4e86\u4e8b\u4ef6\u53d1\u751f\u7684\u65e5\u671f\uff0c\u5e76\u8868\u793a\uff0c\u7531\u4e8e\u65b0\u7684\u7f51\u7edc\u5b89\u5168\u76d1\u63a7\u5de5\u5177\uff0cJSOC\u80fd\u591f\u68c0\u6d4b\u5230\u5165\u4fb5\u3002\n\u6839\u636e\u8054\u90a6\u4fe1\u606f\u5b89\u5168\u73b0\u4ee3\u5316\u6cd5\u6848\uff0c\u6570\u636e\u6cc4\u9732\u88ab\u5b9a\u4e49\u4e3a\u201c\u91cd\u5927\u4e8b\u4ef6\u201d\u3002\n\u8fd9\u4f4d\u53d1\u8a00\u4eba\u8bf4\uff0c\u9664\u4e86\u53d7\u5f71\u54cd\u7684\u5229\u76ca\u76f8\u5173\u8005\u5916\uff0c\u53f8\u6cd5\u548c\u6cd5\u8b66\u670d\u52a1\u5c40\u8fd8\u901a\u77e5\u4e86\u7f8e\u56fd\u8ba1\u7b97\u673a\u5e94\u6025\u51c6\u5907\u5c0f\u7ec4\u3001\u8054\u90a6\u8c03\u67e5\u5c40\u548c\u56fd\u4f1a\uff0c\u5e76\u8865\u5145\u8bf4\uff0c\u201cUSMS\u548cJSOC\u5df2\u7ecf\u91c7\u53d6\u4e86\u8bb8\u591a\u7ea0\u6b63\u884c\u52a8\uff0c\u4ee5\u9632\u6b62\u672a\u6765\u7684\u653b\u51fb\uff0c\u5305\u62ec\u5728dsNet\u6062\u590d\u670d\u52a1\u4e4b\u524d\u8fdb\u884c\u5168\u9762\u7684\u4ee3\u7801\u5ba1\u67e5/\u66f4\u6b63\u548c\u6d4b\u8bd5\u3002\u201d\n\u8fd9\u4f4d\u53d1\u8a00\u4eba\u8bf4\uff0c\u73b0\u5728\u624d\u901a\u77e5\u53d7\u5f71\u54cd\u7684\u4e2a\u4eba\uff0c\u56e0\u4e3a\u6536\u96c6\u4ed6\u4eec\u7684\u76f8\u5173\u4fe1\u606f\u548c\u8eab\u4efd\u4ee5\u53ca\u6392\u961f\u63d0\u4f9b\u5fc5\u8981\u7684\u63f4\u52a9\u670d\u52a1\u9700\u8981\u65f6\u95f4\u3002\n\u901a\u77e5\u4fe1\u544a\u8bc9\u53d7\u5f71\u54cd\u7684\u4e2a\u4eba\uff0c\u4ed6\u4eec\u7684\u8eab\u4efd\u53ef\u80fd\u4f1a\u88ab\u7a83\u53d6\uff0c\u5e76\u8ba9\u4ed6\u4eec\u6c42\u52a9\u4e8e\u8d44\u6e90\uff0c\u51bb\u7ed3\u4ed6\u4eec\u7684\u4fe1\u7528\uff0c\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u6b3a\u8bc8\u3002", "note_en": "The U.S. Marshals Service suffered a cyberattack that exposed the personal information of approximately 387,000 current and former prisoners at the end of last year, according to an agency official.\n \u201cThe attackers were able to exploit a vulnerability in the system to extract sensitive personally identifiable information on approximately 387,000 individuals,\u201d a Marshals Service spokesperson told  Nextgov.\n The spokesperson was referring to a system called DSNet, which is designed to house and transport prisoners within the agency, the federal courts and the Bureau of Prisons. Information extracted included names, addresses, birth dates and Social Security numbers.\n Reports of the breach  first surfaced on Friday, and cited notification letters the Marshals Service sent to the affected individuals.   ZDNet published a copy of the letter, dated May 1, and linked to comments from concerned parties on Twitter.\n \u201cOn December 30, 2019, the United States Marshals Service (USMS) Information Technology Division (ITD) received notification from the Department of Justice, Security Operations Center (JSOC) of a security breach affecting a public-facing USMS server that houses information pertaining to current and former USMS prisoners,\u201d the letter reads. \u201cYou have been identified as an individual whose personally identifiable information (PII) may have been compromised as a result of this breach.\u201d\n The agency spokesperson confirmed the date of the incident, and said JSOC was able to detect the intrusion due to a new cybersecurity monitoring tool.\n Under the Federal Information Security Modernization Act, the data breach qualifies as a \u201cmajor incident.\u201d\n Justice and Marshals Service alerted the U.S. Computer Emergency Readiness Team, the FBI and Congress, in addition to the affected stakeholders, the spokesperson said, adding \u201cUSMS and the JSOC have taken numerous corrective actions to prevent future attacks, including comprehensive code review/correction and testing before returning DSNet to service.\u201d\n The spokesperson said the affected individuals were only now being notified because of the time it took to gather their relevant information and identity and to line up the necessary assistance services.\n The notification letter advised the affected individuals their identity could be stolen and referred them to resources to freeze their credit and protect themselves from fraud.", "posttime": "2020-05-13 08:13:38", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4e2a\u4eba,service,usms", "title": "\u7f8e\u56fd\u6cd5\u8b66\u670d\u52a1\u8fdd\u89c4\u66b4\u9732\u4e8638.7\u4e07\u540d\u56da\u72af\u7684\u4e2a\u4eba\u6570\u636e", "title_en": "US Marshals Service Breach Exposed Personal Data of 387,000 Prisoners", "transed": 1, "url": "https://www.nextgov.com/cybersecurity/2020/05/us-marshals-service-breach-exposed-personal-data-387000-prisoners/165305/", "via": "", "real_tags": ["\u4e2a\u4eba", "service", "usms"]}, {"category": "", "categoryclass": "", "imagename": "8ac709b57ca45622012b96828f86515e.png", "infoid": 1001892, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SLACK\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5e73\u53f0\uff0c\u5728\u4efb\u4f55\u7ed9\u5b9a\u7684\u4e8b\u4ef6\u4e2d\uff0c\u6240\u6709SLACK\u56e2\u961f\u90fd\u5f88\u5c11\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u62a5\u544a\u7684\u6b63\u5e38\u8fd0\u884c\u65f6\u95f4\u662f\u6839\u636e\u53d7\u5f71\u54cd\u7684\u7528\u6237\u6570\u91cf\u5f97\u51fa\u7684\u5e73\u5747\u503c\u3002", "note_en": "Slack is a distributed platform and during any given incident it is rare for all Slack teams to be affected. For this reason, we report our uptime as an average derived from the number of affected users.", "posttime": "2020-05-13 08:12:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u677e\u5f1b\u4e0b\u6765,slack,\u5f71\u54cd", "title": "\u677e\u5f1b\u4e0b\u6765\u4e86", "title_en": "Slack Is Down", "transed": 1, "url": "https://status.slack.com/", "via": "", "real_tags": ["\u677e\u5f1b\u4e0b\u6765", "slack", "\u5f71\u54cd"]}, {"category": "", "categoryclass": "", "imagename": "6f7bf7cebee0a33bb86e978b1ed8ef37.jpg", "infoid": 1001890, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1\u67088\u65e5\uff0c\u65e7\u91d1\u5c71\u5e02\u957f\u4f26\u6566\u5e03\u8d56\u5fb7\u5ba3\u8a93\u5c31\u4efb\u5979\u7684\u7b2c\u4e00\u4e2a\u5b8c\u6574\u4efb\u671f\u3002\u4f17\u8bae\u9662\u8bae\u957f\u5357\u5e0c\u00b7\u4f69\u6d1b\u897f(Nancy Pelosi)\u5728\u63a8\u7279\u4e0a\u5411\u5979\u8868\u793a\u795d\u8d3a\uff0c\u4ed6\u8bf4\uff1a\u201c\u6211\u671f\u5f85\u7740\u4e0e\u4f60\u5408\u4f5c\uff0c\u7ee7\u7eed\u65e7\u91d1\u5c71\u4f5c\u4e3a\u5168\u7f8e\u8fdb\u6b65\u6307\u8def\u706f\u7684\u81ea\u8c6a\u4f20\u7edf\u3002\u201d\u6211\u4e0d\u77e5\u9053\u4f69\u6d1b\u897f\u4f7f\u7528\u7684\u201c\u8fdb\u6b65\u201d\u662f\u4ec0\u4e48\u5b9a\u4e49\uff0c\u4f46\u4efb\u4f55\u5766\u7387\u7684\u89c2\u5bdf\u8005\u90fd\u4f1a\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u662f\u4e00\u573a\u707e\u96be\u3002\u5e03\u8d56\u5fb7\u5e02\u957f\u5c31\u804c\u7684\u540c\u4e00\u5929\uff0c\u6211\u4ece\u65e7\u91d1\u5c71\u642c\u5230\u4e86\u6d1b\u6749\u77f6\uff0c\u6211\u5728\u5c16\u7aef\u79d1\u6280\u9886\u57df\u5de5\u4f5c\u4e86\u5341\u5e74\u3002\n\u5373\u4f7f\u5728\u76ee\u524d\u7684\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u4e4b\u524d\uff0c\u65e7\u91d1\u5c71\u5c31\u662f\u4e00\u4e2a\u6df1\u9677\u56f0\u5883\u7684\u57ce\u5e02\u3002\u5b83\u5728\u76d7\u7a83\u3001\u5165\u5ba4\u76d7\u7a83\u3001\u7834\u574f\u516c\u7269\u3001\u5546\u5e97\u76d7\u7a83\u548c\u5176\u4ed6\u8d22\u4ea7\u72af\u7f6a\u65b9\u9762\u5c45\u5168\u56fd\u9996\u4f4d\u3002\u5e73\u5747\u6bcf\u5929\u5927\u7ea6\u670960\u8f86\u8f66\u88ab\u76d7\u3002\u536b\u751f\u6761\u4ef6\u5dee\u5f15\u8d77\u7684\u75be\u75c5--\u4f24\u5bd2\u3001\u6591\u75b9\u4f24\u5bd2\u3001\u7532\u578b\u809d\u708e--\u6b63\u4ee5\u60ca\u4eba\u7684\u901f\u5ea6\u518d\u6b21\u51fa\u73b0\u3002\u82ac\u592a\u5c3c\u5728\u5e02\u573a\u8857(Market Street)\u7684\u552e\u4ef7\u7ea6\u4e3a\u6bcf\u724720\u7f8e\u5143\uff0c\u8be5\u5e02\u6bcf\u5e74\u53d1\u653e450\u4e07\u9488\uff0c\u4f60\u53ef\u4ee5\u5728\u516c\u56ed\u548c\u516c\u4ea4\u8f66\u7ad9\u5468\u56f4\u627e\u5230\u4f7f\u7528\u8fc7\u7684\u9488\u5934\uff0c\u7136\u540e\u50cf\u6254\u70df\u5934\u4e00\u6837\u6254\u51fa\u53bb\u3002\u8be5\u5e02\u516c\u5171\u5de5\u7a0b\u90e8\u6bcf\u5929\u90fd\u4f1a\u90e8\u7f72\u7caa\u4fbf\u6e05\u6d01\u5de5-\u4e00\u652f\u201c\u7caa\u4fbf\u5de1\u903b\u961f\u201d\u6765\u6e05\u6d17\u4eba\u884c\u9053\u4e0a\u7684\u6c61\u7269\u3002\n\u8fd9\u53ea\u662f\u5bf9\u7f3a\u4e4f\u536b\u751f\u548c\u666e\u901a\u793c\u4eea\u7684\u7b80\u5355\u603b\u7ed3\u3002\u4e00\u4e2a\u901a\u60c5\u8fbe\u7406\u7684\u4eba\u53ef\u80fd\u4f1a\u5ba3\u5e03\u8fdb\u5165\u7d27\u6025\u72b6\u6001\uff0c\u4f46\u5728\u5979\u7684\u7b2c\u4e00\u6b21\u6b63\u5f0f\u884c\u52a8\u4e2d\uff0c\u5e03\u8d56\u5fb7\u5728\u8d6b\u5e03\u65af\u7279\u5267\u9662(Herbst Theater)\u5ea7\u65e0\u865a\u5e2d\u7684\u89c2\u4f17\u9762\u524d\uff0c\u8ba9\u65e7\u91d1\u5c71\u65b0\u4efb\u5730\u533a\u68c0\u5bdf\u5b98\u5207\u8428\u00b7\u5e03\u4e01(Chesa Boudin)\u5ba3\u8a93\u5c31\u804c\u3002\u7f8e\u56fd\u6700\u9ad8\u6cd5\u9662\u6cd5\u5b98\u7d22\u5c3c\u5a05\u00b7\u7d22\u6258\u9a6c\u7ea6\u5c14(Sonia Sotomayor)\u5728\u4e00\u6bb5\u795d\u8d3a\u89c6\u9891\u4e2d\u8bf4\uff1a\u201c\u5207\u8428\uff0c\u4f60\u4eca\u5929\u63a5\u53d7\u4e86\u4e00\u9879\u975e\u540c\u5bfb\u5e38\u7684\u6311\u6218\u3002\u201d\u201c\u6211\u5e0c\u671b\u4f60\u80fd\u50cf\u4e00\u4e2a\u4f1f\u5927\u7684\u706f\u5854\u4e00\u6837\u5bf9\u8bb8\u591a\u4eba\u8fdb\u884c\u53cd\u601d\u3002\u201d\u5e03\u4e01\u7684\u7b80\u5386\u5938\u8000\u81ea\u5df1\u66fe\u5728\u59d4\u5185\u745e\u62c9\u4e3a\u5df2\u6545\u72ec\u88c1\u8005\u4e4c\u6208\u00b7\u67e5\u97e6\u65af(Hugo Ch\u00e1vez)\u76f4\u63a5\u5de5\u4f5c\u8fc7\u4e00\u6bb5\u65f6\u95f4\uff0c\u67e5\u97e6\u65af\u66fe\u5c06\u4e00\u4e2a\u66fe\u7ecf\u5bcc\u88d5\u7684\u56fd\u5bb6\u5e26\u56de\u9ed1\u6697\u65f6\u4ee3\u3002\u201c\u6211\u4eec\u4e0d\u4f1a\u8d77\u8bc9\u6d89\u53ca\u751f\u6d3b\u8d28\u91cf\u72af\u7f6a\u7684\u6848\u4ef6\uff0c\u201d\u5e03\u4e01\u5728\u7ade\u9009\u65f6\u627f\u8bfa\u3002\u4ed6\u4e00\u5b9a\u89c1\u8bc1\u4e86\u8fd9\u4e00\u653f\u7b56\u5728\u52a0\u62c9\u52a0\u65af\u7684\u6210\u529f\uff0c\u52a0\u62c9\u52a0\u65af\u57282018\u5e74\u88ab\u8bc4\u4e3a\u4e16\u754c\u4e0a\u6700\u5371\u9669\u7684\u57ce\u5e02\u3002\n\u5c31\u8fde\u8fd9\u5ea7\u57ce\u5e02\u7684\u666f\u8c61\u548c\u58f0\u97f3\u90fd\u6697\u793a\u7740\u67d0\u79cd\u9519\u4e71\u3002\u5f53\u65e7\u91d1\u5c71\u6e7e\u533a\u5feb\u901f\u4ea4\u901a(BART)\u7cfb\u7edf\u572820\u4e16\u7eaa70\u5e74\u4ee3\u9996\u6b21\u5efa\u6210\u65f6\uff0c\u5176\u8bbe\u8ba1\u8005\u672a\u80fd\u7406\u89e3\u8f66\u8f6e\u3001\u8f68\u9053\u548c\u96a7\u9053\u4e4b\u95f4\u7684\u58f0\u5b66\u3002\u4ece19\u4e16\u7eaa\u5f00\u59cb\uff0c\u79f0\u804c\u7684\u94c1\u8def\u5de5\u7a0b\u5e08\u5c31\u77e5\u9053\u9525\u5f62\u51f8\u7f18\u8f66\u8f6e\u80fd\u66f4\u597d\u5730\u64cd\u63a7\u8f6c\u5f2f\uff0c\u4ea7\u751f\u7684\u566a\u97f3\u4e5f\u66f4\u5c0f\u3002\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\uff0cBART\u8bbe\u8ba1\u8005\u5ffd\u7565\u4e86\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8f6c\u800c\u91c7\u7528\u76f4\u8fb9\u5706\u67f1\u5f62\u8f6e\u5b50\u3002\u591a\u5e74\u7684\u78e8\u635f\u4f7f\u5c16\u53eb\u58f0\u53d8\u6210\u4e86\u75af\u72c2\u7684\u568e\u53eb\u3002\u6839\u636e\u65e7\u91d1\u5c71\u7eaa\u4e8b\u62a5\u6700\u8fd1\u7684\u4e00\u9879\u7edf\u8ba1\uff0c\u7531\u4e8e\u566a\u97f3\u3001\u6c61\u57a2\u548c\u7f3a\u4e4f\u5b89\u5168\uff0cBART\u5728\u665a\u4e0a\u548c\u5468\u672b\u5931\u53bb\u4e86\u8fd11000\u4e07\u540d\u4e58\u5ba2\u3002\u5b83\u4e5f\u6210\u4e86\u5438\u6bd2\u8005\u548c\u7cbe\u795e\u75c5\u60a3\u8005\u4e8b\u5b9e\u4e0a\u7684\u5e87\u62a4\u6240\uff0c\u8fd9\u4e5f\u4e8e\u4e8b\u65e0\u8865\u3002\n\u4eca\u5929\uff0c\u5728\u65e7\u91d1\u5c71\u51e0\u4e4e\u4e0d\u53ef\u80fd\u5efa\u9020\u4efb\u4f55\u4e1c\u897f\u3002\u57fa\u7840\u8bbe\u65bd\u9879\u76ee\u65e0\u9650\u671f\u81a8\u80c0\u30022001\u5e74\uff0c\u8be5\u5e02\u63d0\u8bae\u5728\u4e3b\u5e72\u9053\u4e4b\u4e00\u8303\u5185\u65af\u4fee\u5efa\u4e00\u6761\u65b0\u7684\u516c\u4ea4\u4e13\u7528\u9053\u3002\u8fd120\u5e74\u540e\uff0c\u65b0\u8f66\u9053\u5b9a\u4e8e2021\u5e74\u5f00\u653e\uff1b\u8303\u5c3c\u65af\u4ecd\u7136\u662f\u4e00\u5806\u5751\u5751\u6d3c\u6d3c\u3001\u8bbe\u5907\u548c\u7ed5\u9053\u800c\u6210\u7684\u4e71\u4e03\u516b\u7cdf\u7684\u4e1c\u897f\u3002\u5e76\u4e0d\u662f\u4e00\u76f4\u90fd\u662f\u8fd9\u6837\u7684\u3002\u572820\u4e16\u7eaa30\u5e74\u4ee3\uff0c\u91d1\u95e8\u5927\u6865\u7528\u4e86\u4e09\u5e74\u534a\u7684\u65f6\u95f4\u5efa\u6210\u3002\u4e3a\u4e86\u7eaa\u5ff5\u5b83\u7684\u5b8c\u6210\uff0c\u4f5c\u4e3a\u4e00\u573a\u91cd\u6f14\uff0c\u8be5\u5e02\u5728\u65e7\u91d1\u5c71\u6e7e\u4e2d\u592e\u521b\u5efa\u4e86\u4e00\u4e2a\u4eba\u5de5\u5c9b\u3002\u91d1\u94f6\u5c9b\u82b1\u4e86\u4e0d\u5230\u4e09\u5e74\u7684\u65f6\u95f4\u624d\u5b8c\u5de5\u3002\n\u8fd9\u5ea7\u57ce\u5e02\u4e5f\u4e0d\u518d\u5efa\u9020\u4f4f\u623f\u3002\u7531\u4e8e\u56fd\u5bb6\u6700\u4e25\u683c\u7684\u5206\u533a\u89c4\u5b9a\u548c\u571f\u5730\u4f7f\u7528\u9650\u5236\uff0c\u5f00\u53d1\u5546\u5728\u5efa\u9020\u65b0\u7684\u516c\u5bd3\u548c\u623f\u5c4b\u65b9\u9762\u8fdb\u884c\u4e86\u6fc0\u70c8\u7684\u6597\u4e89\u3002\u5373\u4f7f\u5728\u83b7\u5f97\u5efa\u9020\u8bb8\u53ef\u4e4b\u540e-\u5728\u7ecf\u5386\u4e86\u591a\u5e74\u7684\u529f\u80fd\u5931\u8c03\u7684\u5ba1\u6279\u7a0b\u5e8f\u4e4b\u540e-\u5efa\u9020\u4e00\u4e2a\u65b0\u7684\u516c\u5bd3\u5355\u5143\u4e5f\u9700\u8981\u5927\u7ea670\u4e07\u7f8e\u5143(\u7ea6\u5408\u4eba\u6c11\u5e01170\u4e07\u5143)\u3002\u56e0\u6b64\uff0c\u4f4f\u623f\u6210\u672c\u98de\u6da8\u3002\u4e00\u5c45\u5ba4\u7684\u79df\u91d1\u4e2d\u503c\u662f\u5168\u56fd\u6700\u8d35\u7684\uff0c\u6bcf\u6708\u7ea63700\u7f8e\u5143\u3002\u8981\u4e70\u4e00\u5957\u72ec\u680b\u4f4f\u5b85\uff0c\u4e00\u4e2a\u5bb6\u5ead\u5e73\u5747\u9700\u8981150\u4e07\u7f8e\u5143-\u4ed6\u4eec\u6700\u597d\u662f\u73b0\u91d1\u4e70\u5bb6\u3002\n\u4f46\u5f53\u5730\u65e0\u80fd\u548c\u4f18\u5148\u4e8b\u9879\u9519\u4f4d\u7684\u9876\u5cf0\u5fc5\u7136\u662f\u505c\u7535\u548c\u706b\u707e\u3002\u5784\u65ad\u516c\u7528\u4e8b\u4e1a\u516c\u53f8PG&Amp\uff1bE\u5728\u53bb\u5e74\u79cb\u5929\u5f00\u59cb\u8f6e\u6d41\u505c\u7535\uff0c\u4ee5\u9632\u6b62\u5728\u5e72\u71e5\u548c\u522e\u98ce\u7684\u5929\u6c14\u51fa\u73b0\u706b\u82b1\u3002\u6570\u767e\u4e07\u4eba\u8fde\u7eed\u51e0\u5929\u65ad\u7535\u3002\u8be5\u516c\u53f8\u7684\u8bb8\u591a\u7535\u7ebf\u90fd\u542b\u6709\u53ef\u4ee5\u8ffd\u6eaf\u523020\u4e16\u7eaa50\u5e74\u4ee3\u7684\u90e8\u4ef6\uff1b\u6709\u4e9b\u53ef\u4ee5\u8ffd\u6eaf\u523020\u4e16\u7eaa20\u5e74\u4ee3\u3002\u636e\u8be5\u516c\u53f8\u79f0\uff0c\u81ea2014\u5e74\u4ee5\u6765\uff0c\u8fd9\u4e9b\u90e8\u4ef6\u5df2\u7ecf\u5f15\u53d1\u4e861961\u8d77\u706b\u707e\u30022018\u5e74\u7684\u8425\u5730\u5927\u706b\u662f\u52a0\u5dde\u5386\u53f2\u4e0a\u6b7b\u4ea1\u4eba\u6570\u6700\u591a\u7684\u4e00\u6b21\uff0c\u662f\u7531\u5854\u697c\u4e0a\u7684\u4e00\u4e2a\u6298\u65ad\u7684\u94a9\u5b50\u5f15\u8d77\u7684\u3002\u5b83\u9020\u621085\u4eba\u6b7b\u4ea1\uff0c15\u4e07\u82f1\u4ea9\u571f\u5730\u88ab\u70e7\u6bc1\uff1b\u4e00\u5e74\u540e\uff0c\u5728\u7d22\u8bfa\u9a6c\u548c\u7eb3\u5e15\u9644\u8fd1\uff0c19\u4e07\u82f1\u4ea9\u7684\u8461\u8404\u56ed\u88ab\u70e7\u6bc1\uff0c22\u4eba\u6b7b\u4ea1\u3002\u6d53\u70df\u98d8\u8fc7\u65e7\u91d1\u5c71\uff0c\u8ba9\u5f53\u5730\u5c45\u6c11\u7a92\u606f\u4e86\u6570\u5468\u4e4b\u4e45\u3002\u5728\u6b64\u671f\u95f4\uff0c\u65e7\u91d1\u5c71\u6210\u4e3a\u4e16\u754c\u4e0a\u6c61\u67d3\u6700\u4e25\u91cd\u7684\u57ce\u5e02\u4e4b\u4e00\u3002\u73b0\u5728\u4eba\u4eec\u6bcf\u5e74\u5341\u6708\u90fd\u4f1a\u56e4\u79ef\u7a7a\u6c14\u6ee4\u6e05\u5668\u548c\u53e3\u7f69\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700\u3002\n\u5f7c\u5f97\u00b7\u8482\u5c14(Peter Thiel)\u6700\u8fd1\u5728\u63a5\u53d7\u80e1\u4f5b\u7814\u7a76\u6240(Hoover Institution)\u7684\u5f7c\u5f97\u00b7\u7f57\u5bbe\u900a(Peter Robinson)\u91c7\u8bbf\u65f6\u8bf4\uff1a\u201c\u4e3a\u4e86\u8ba9\u672a\u6765\u62e5\u6709\u5bf9\u73b0\u5728\u7684\u6743\u529b\uff0c\u5b83\u5fc5\u987b\u4e0e\u73b0\u5728\u4e0d\u540c\u3002\u201d\u201c\u672a\u6765\u6709\u529b\u91cf\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u770b\u8d77\u6765\u4f1a\u4e0d\u4e00\u6837\u7684\u65f6\u4ee3\u3002\u201d\u65e7\u91d1\u5c71\u88ab\u56f0\u5728\u8fc7\u53bb\u3002\u672a\u6765\u5c06\u5728\u522b\u5904\u5efa\u7acb\u3002\u6211\u79bb\u5f00\u53bb\u627e\u5b83\u3002\n\u57ce\u5e02\u6742\u5fd7\u662f\u66fc\u54c8\u987f\u653f\u7b56\u7814\u7a76\u6240(MI)\u7684\u51fa\u7248\u7269\uff0c\u8be5\u7814\u7a76\u6240\u662f\u9886\u5148\u7684\u81ea\u7531\u5e02\u573a\u667a\u56ca\u56e2\u3002\u4f60\u6709\u5174\u8da3\u8d5e\u52a9\u8fd9\u672c\u6742\u5fd7\u5417\uff1f\u4f5c\u4e3a\u7b2c501(C)(3)\u975e\u8425\u5229\u6027\u7ec4\u7ec7\uff0c\u6839\u636e\u6cd5\u5f8b\u89c4\u5b9a\uff0c\u652f\u6301MI\u548c\u201c\u57ce\u5e02\u65e5\u62a5\u201d\u7684\u6350\u6b3e\u662f\u5b8c\u5168\u514d\u7a0e\u7684(EIN#13-2912529)\u3002\u652f\u6491\u70b9", "note_en": "On January 8, London Breed, San Francisco\u2019s mayor, was sworn in for her first full term. House Speaker Nancy Pelosi congratulated her in a tweet, saying, \u201cI look forward to working with you to continue San Francisco\u2019s proud tradition of standing as a guiding light for progress across America.\u201d I don\u2019t know what definition of \u201cprogress\u201d Pelosi is using, but any candid observer would rate the city a catastrophe. Mayor Breed was inaugurated on the same day that I moved from San Francisco to Los Angeles, after ten years working at the cutting edge of science and technology.\n Even before the current Covid-19 pandemic, San Francisco was a deeply troubled city. It ranks first in the nation in theft, burglary, vandalism, shoplifting, and other property crime. On average, about 60 cars get broken into each day. Diseases arising from poor sanitation\u2014typhoid, typhus, hepatitis A\u2014are reappearing at an alarming rate. Fentanyl goes for about $20 a pill on Market Street, and each year the city hands out 4.5 million needles, which you can find used and tossed out like cigarette butts in parks and around bus stops. The city\u2019s department of public works deploys feces cleaners daily\u2014a \u201cpoop patrol\u201d to wash the filth from the sidewalks.\n This is just a brief summary of the lack of hygiene and common decency. A reasonable person might declare an emergency, but in her first official act, Breed swore in Chesa Boudin, San Francisco\u2019s new district attorney, before a packed house at the Herbst Theater. \u201cChesa, you have undertaken a remarkable challenge today,\u201d said U.S. Supreme Court Justice Sonia Sotomayor in a congratulatory video message. \u201cI hope you reflect as a great beacon to many.\u201d Boudin\u2019s r\u00e9sum\u00e9 boasts of a stint working directly for the late dictator Hugo Ch\u00e1vez in Venezuela, who turned a once-rich nation back to the dark ages. \u201cWe will not prosecute cases involving quality-of-life crimes,\u201d Boudin promised during his campaign. He must have witnessed the success of that policy in Caracas, which was voted the world\u2019s most dangerous city in 2018.\n Even the sights and sounds of the city suggest a certain derangement. When the Bay Area Rapid Transit (BART) system was first built in the 1970s, its designers failed to understand the acoustics between wheel, track, and tunnel. Since the nineteenth century, competent railroad engineers have known that a tapered, flanged wheel will handle turns better and generate less noise. For some reason, BART designers ignored this design in favor of a cylindrical wheel with a straight edge. Years of wear and tear have degraded the screech into a mad howl. According to a recent count by the  San Francisco Chronicle, BART has lost nearly 10 million riders on nights and weekends because of the noise, grime, and lack of safety. It doesn\u2019t help that it has also become a de facto shelter for drug addicts and the mentally ill.\n Today, it\u2019s nearly impossible to build anything in San Francisco. Infrastructure projects balloon indefinitely. In 2001, the city proposed a new bus lane on Van Ness, one of the main arteries. Nearly 20 years later, the new lane\u2019s opening is slated for 2021; Van Ness remains a mess of potholes, equipment, and detours. It wasn\u2019t always this way. In the 1930s, the Golden Gate Bridge was built in three and a half years. To commemorate its completion, as an encore, the city created an artificial island in the middle of San Francisco Bay. Treasure Island took under three years to finish.\n The city no longer builds housing, either. Due to the nation\u2019s tightest zoning rules and land-use restrictions, developers struggle mightily to put up new apartments and houses. Even after getting permission to build\u2014following years of scrambling through a dysfunctional approval process\u2014it costs about $700,000 to construct a single new apartment unit. Consequently, the cost of housing has skyrocketed. The median price for a one-bedroom rental is the most expensive in the nation, at about $3,700 per month. To buy a single-family home, a family needs $1.5 million, on average\u2014and they\u2019d better be a cash buyer.\n But the culmination of local incompetence and misplaced priorities has to be the blackouts and fires. The monopoly utility, PG&amp;E, began rolling blackouts this past autumn to prevent sparks in dry and windy weather. Millions went without power for days. Many of the company\u2019s electric lines contain components that go back to the 1950s; some date to the 1920s. These parts have ignited 1,961 fires since 2014, according to the company. The 2018 Camp Fire, the deadliest in California\u2019s history, was caused by a broken hook on a tower. It killed 85 people and torched 150,000 acres; a year later, near Sonoma and Napa, vineyards burned among 190,000 acres, and 22 people were killed. Smoke drifted over San Francisco and choked its residents for weeks. For the duration, San Francisco became one of the most polluted cities in the world. People now stock up on air filters and masks every October for the season of ash.\n San Francisco is a city overwhelmed by its own stupidity, but painful adjustments are coming. For the seventh straight year, more people have left California than have moved in. Tech companies are reconsidering the importance of being in San Francisco. Oracle, for example, has moved its yearly conference to Las Vegas. After nearly 50 years, Charles Schwab is moving its headquarters out of town. And in a recent earnings call with investors, Jack Dorsey, Twitter\u2019s CEO, said that the company planned to have a more distributed workforce in the future and be less concentrated in San Francisco. With tech companies operating remotely while their employees shelter in place, how many of these workers will return to their San Francisco offices after the Covid-19 crisis subsides is an open question.\n \u201cFor the future to have power over the present, it has to be different from the present,\u201d Peter Thiel said in a recent interview with Peter Robinson of the Hoover Institution. \u201cThe future has power because it is a time that will look different.\u201d San Francisco is trapped in the past. The future will be built elsewhere. I left to find it.\n      City Journal is a publication of the Manhattan Institute for Policy Research (MI), a leading free-market think tank. Are you interested in supporting the magazine? As a 501(c)(3) nonprofit, donations in support of MI and  City Journal are fully tax-deductible as provided by law (EIN #13-2912529).  SUPPORT", "posttime": "2020-05-13 07:15:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e7\u91d1\u5c71,havana", "title": "\u7f8e\u56fd\u54c8\u74e6\u90a3\uff1a\u6570\u5343\u4eba\u5bf9\u65e7\u91d1\u5c71\u8bf4\u201c\u518d\u89c1\u201d", "title_en": "America\u2019s Havana: Thousands Say \u201cCiao\u201d to San Francisco", "transed": 1, "url": "https://www.city-journal.org/thousands-leaving-troubled-san-francisco", "via": "", "real_tags": ["\u65e7\u91d1\u5c71", "havana"]}, {"category": "", "categoryclass": "", "imagename": "88fd6ddb8253d4481c2e73bf9c8b9c36.png", "infoid": 1001889, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6211\u5f00\u59cb\u5b66\u4e60\u201c\u9508\u201d\u7684\u65f6\u5019\uff0c\u6211\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u90a3\u5c31\u662f\u542c\u4ece\u5efa\u8bae\uff0c\u5148\u8bfb\u8fd9\u672c\u4e66\u3002\u867d\u7136\u8fd9\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u8d44\u6e90\uff0c\u4f46\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u88ab\u544a\u77e5\u8fd9\u662f\u4e00\u79cd\u538b\u5012\u6027\u7684\u611f\u89c9\u3002\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u6700\u597d\u7684\u5165\u95e8\u65b9\u5f0f\u5c31\u662f\u9605\u8bfb\u8fd9\u672c20\u7ae0\u7684\u4e66\uff01\u5927\u591a\u6570\u4eba\u5728\u5f97\u5230\u8fd9\u6837\u7684\u5efa\u8bae\u4e4b\u524d\u5c31\u5df2\u7ecf\u653e\u5f03\u4e86\u3002\u4ece\u6765\u6ca1\u6709\u4eba\u544a\u8bc9\u522b\u4eba\u8bfb\u4e00\u672c20\u7ae0\u7684\u4e66\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5f00\u59cb\u4f7f\u7528Javascript\u6216Python\u3002\u62c9\u65af\u7279\u7684\u5b66\u4e60\u66f2\u7ebf\u4e0d\u662f\u5f00\u73a9\u7b11\u7684\uff0c\u4f46\u4f60\u5fc5\u987b\u7ed9\u4eba\u4eec\u4ed6\u4eec\u60f3\u8981\u7684\uff0c\u4ed6\u4eec\u60f3\u8981\u7684\u662f\u7f16\u7a0b\uff0c\u800c\u4e0d\u662f\u9605\u8bfb\u7f16\u7a0b\u3002\u7f16\u7a0b\u5f88\u6709\u8da3\uff0c\u800c\u9605\u8bfb\u7f16\u7a0b\u5c31\u4e0d\u90a3\u4e48\u6709\u8da3\u4e86\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u7684\u524d10%\u5c06\u662f\u6211\u7ed9\u4f60\u7684\u5efa\u8bae\uff0c\u544a\u8bc9\u4f60\u5982\u4f55\u57282020\u5e74\u5b66\u4e60Rust\uff0c\u9075\u5faa\u4e00\u79cd\u5b9e\u7528\u7684\u52a8\u624b\u7f16\u7801\u65b9\u6cd5\u3002\u8fd9\u662f\u6587\u7ae0\u7684\u7cbe\u534e\u90e8\u5206\u3002\u5b8c\u6210\u6b64\u90e8\u5206\u540e\uff0c\u60a8\u53ef\u4ee5\u5b89\u5168\u9000\u51fa(\u6211\u4f1a\u544a\u8bc9\u60a8\u4f55\u65f6\u9000\u51fa)\u3002\u8fd9\u7bc7\u6587\u7ae0\u5269\u4e0b\u768490%\u662f\u6211\u5728\u62b1\u6028\u5927\u591a\u6570\u5728\u7ebf\u7f16\u7801\u6311\u6218\u7f51\u7ad9\u5bf9Rust\u7684\u652f\u6301\u5f88\u5dee\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u94c1\u9508\u65b0\u624b\uff0c\u60f3\u8981\u5728\u4e00\u5929\u5185\u5b66\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u4e1c\u897f\uff0c\u4f60\u5e94\u8be5\u9605\u8bfb\u6bd4\u83b1\u59c6\u66f4\u5feb\u7684\u201c\u5b66\u4e60\u94c1\u9508\u7684\u534a\u5c0f\u65f6\u201d\uff0c\u7136\u540e\u67e5\u770b\u4ee4\u4eba\u656c\u754f\u7684\u62c9\u65af\u6797\u65af\u56de\u5fc6\u5f55\u5e76\u5b8c\u6210\u7ec3\u4e60\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u94c1\u9508\u521d\u5b66\u8005\uff0c\u4f60\u5e94\u8be5\u5f00\u59cb\u7ec3\u4e60\u953b\u70bc\u7684\u94c1\u9508\u8d5b\u9053\u3002\u5982\u679c\u4f60\u88ab\u56f0\u4f4f\u4e86\uff0c\u4f60\u5e94\u8be5\u5411\u4f60\u7684\u670b\u53cbGoogle\u548cStackOverflow\u5bfb\u6c42\u5e2e\u52a9\u3002\u6211\u5efa\u8bae\u60a8\u82b1\u70b9\u65f6\u95f4\u8f7b\u677e\u9605\u8bfb\u548c\u6d4f\u89c8Rust Standard Library Docs\uff0c\u5b83\u4ee4\u4eba\u60ca\u53f9\uff0c\u5e76\u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u5b9e\u7528\u793a\u4f8b\u6765\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u5176\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u3002Rust by Example\u4e5f\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u9ad8\u7ea7\u53c2\u8003\uff0c\u60a8\u53ef\u4ee5\u7528\u5b83\u6765\u5feb\u901f\u5b66\u4e60Rust\u8bed\u6cd5\u548c\u7279\u6027\u3002\u5982\u679c\u4f60\u53ea\u60f3\u66f4\u6df1\u5165\u5730\u7406\u89e3\u67d0\u4e2a\u751f\u9508\u7684\u6982\u5ff5\uff0c\u90a3\u4e48\u6211\u5efa\u8bae\u4f60\u5728\u4e66\u4e2d\u627e\u5230\u5408\u9002\u7684\u7ae0\u8282\u6765\u9605\u8bfb\u3002\u5b8c\u6210\u953b\u70bc\u7ec3\u4e60\u6700\u597d\u7684\u90e8\u5206\u662f\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u5176\u4ed6\u6210\u5458\u7684\u6240\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u4f60\u53ef\u4ee5\u6839\u636e\u6700\u591a\u7684\u661f\u53f7\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u800c\u770b\u5230\u7279\u522b\u60ef\u7528\u6216\u806a\u660e\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5b66\u4e60\u65b9\u5f0f\uff01\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u53ef\u80fd\u662f\u4e00\u4e2a\u9ad8\u7ea7\u521d\u5b66\u8005\uff0c\u53ef\u4ee5\u627e\u5230\u81ea\u5df1\u7684\u9053\u8def\u3002\u5982\u679c\u60a8\u9700\u8981\u66f4\u591a\u6307\u5bfc\u5e76\u5e0c\u671b\u7ee7\u7eed\u5f00\u53d1\u5c0f\u800c\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u6211\u5efa\u8bae\u60a8\u505a2018\u5e74\u4ee3\u7801\u6765\u4e34\u65e5\u5386\u4e2d\u7684\u7ec3\u4e60\u3002\u6211\u7279\u522b\u63a8\u83502018\u5e74\u65e5\u5386\u7684\u539f\u56e0\u662f\uff0c\u4e00\u65e6\u4f60\u5b8c\u6210\u4e86\u4e00\u9879\u7ec3\u4e60\uff0c\u4f60\u5c31\u53ef\u4ee5\u5c06\u4f60\u7684\u89e3\u51b3\u65b9\u6848\u4e0eBurntSushi\u76842018\u5e74\u4ee3\u7801\u5148\u950b\u751f\u9508\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\u3002BurntSushi\u7f16\u5199\u4e86\u975e\u5e38\u5e72\u51c0\u3001\u6613\u8bfb\u3001\u60ef\u7528\u7684Rust\u4ee3\u7801\u3002\u9605\u8bfb\u4e00\u4f4d\u7ecf\u9a8c\u4e30\u5bcc\u7684Rustacean\u7684\u4ee3\u7801\u5c06\u4f1a\u6559\u7ed9\u4f60\u548c\u7ec3\u4e60\u672c\u8eab\u4e00\u6837\u591a\u7684\u4e1c\u897f\u3002\n\u53e6\u4e00\u4e2a\u6807\u9898\uff1aRust Beinnger\u53ef\u4ee5\u7528\u6765\u7ec3\u4e60\u7f16\u5199\u5c0f\u800c\u7b80\u5355\u7684Rust\u7a0b\u5e8f\u7684\u514d\u8d39\u5728\u7ebf\u8d44\u6e90\u7684\u8bc4\u8bba\u3002\n\u8fd9\u4e9b\u8d44\u6e90\u4e2d\u7684\u5927\u591a\u6570\u5e76\u4e0d\u662f\u4e13\u95e8\u4e3a\u6559\u6388Rust\u800c\u521b\u5efa\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u90fd\u53ef\u4ee5\u7528\u6765\u5b66\u4e60\u548c\u7ec3\u4e60Rust\uff0c\u5176\u4e2d\u8bb8\u591a\u8d44\u6e90\u660e\u786e\u652f\u6301Rust\u63d0\u4ea4\uff0c\u5e76\u63d0\u4f9b\u7279\u5b9a\u4e8eRust\u7684\u95ee\u9898\u7248\u672c\u3002\nRust\u662fHackerRank\u652f\u6301\u7684\u8bed\u8a00\uff0c\u9664\u975e\u60a8\u4e0d\u5141\u8bb8\u63d0\u4ea4\u5176\u7f51\u7ad9\u4e0a\u5927\u591a\u6570\u95ee\u9898\u7684Rust\u89e3\u51b3\u65b9\u6848\u3002\u6211\u5c1d\u8bd5\u76f4\u63a5\u4e0a\u4f20\u6211\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u4ed6\u4eec\u62d2\u7edd\u4e86\uff1a\n\u8fd9\u771f\u7684\u5f88\u5947\u602a\uff0c\u56e0\u4e3a\u6211\u80fd\u591f\u6d4f\u89c8\u7531\u5176\u4ed6HackerRank\u7528\u6237\u63d0\u4ea4\u7684\u4e0a\u8ff0\u95ee\u9898\u7684Rust\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u6b64\u4ee5\u67d0\u79cd\u65b9\u5f0f\u63d0\u4ea4Rust\u89e3\u51b3\u65b9\u6848\u662f\u53ef\u80fd\u7684\u3002\u6211\u8bd5\u7740\u7528\u8c37\u6b4c\u641c\u7d22\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u8c37\u6b4c\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u6709\u7528\u7684\u7ed3\u679c\u3002\u9664\u4e86\u544a\u8bc9\u4f60\u4e0d\u8981\u50cf\u6211\u90a3\u6837\u6d6a\u8d39\u65f6\u95f4\u5728HackerRank\u4e0a\uff0c\u6211\u6ca1\u6709\u522b\u7684\u529e\u6cd5\u6765\u8bc4\u4ef7HackerRank\u3002\n\u5f53\u6211\u57282012\u5e74\u7b2c\u4e00\u6b21\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u65f6\uff0c\u6211\u7ecf\u5e38\u542c\u8bf4\uff0c\u5982\u679c\u4f60\u60f3\u5feb\u901f\u638c\u63e1\u4e00\u95e8\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u7528\u5b83\u89e3\u51b3\u4e00\u4e9bProject Euler\u95ee\u9898\uff01&#34\uff1b\u8fd9\u5728\u5f53\u65f6\u662f\u4e0d\u9519\u7684\u5efa\u8bae\uff0c\u56e0\u4e3a\u6ca1\u6709\u592a\u591a\u5176\u4ed6\u7684\u9009\u62e9\uff0c\u4f46\u5728\u6211\u770b\u6765\uff0cProject Euler\u4e0e\u7f16\u7a0b\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u3002\u9879\u76eeEuler\u95ee\u9898\u66f4\u591a\u7684\u662f\u6570\u5b66\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u7f16\u7a0b\u95ee\u9898\u3002\u4ed6\u4eec\u7684\u6311\u6218\u51e0\u4e4e\u5b8c\u5168\u5728\u4e8e\u83b7\u5f97\u89e3\u51b3\u65b9\u6848\u6240\u9700\u7684\u6570\u5b66\u63a8\u7406\uff0c\u56e0\u4e3a\u6240\u9700\u7684\u7f16\u7a0b\u901a\u5e38\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u6211\u4e0d\u5efa\u8bae\u89e3\u51b3\u6b27\u62c9\u9879\u76ee\u7684\u95ee\u9898\u4f5c\u4e3a\u5b66\u4e60\u9508\u8680\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u9664\u975e\u4f60\u662f\u4e00\u4e2a\u975e\u5e38\u6570\u5b66\u7684\u6536\u5f55\uff0c\u5e76\u6709\u4e00\u4e9b\u6000\u65e7\u7684\u7f51\u7ad9\u3002\nRuust\u662fLeetCode\u4e0a\u652f\u6301\u7684\u8bed\u8a00\u3002\u5bf9\u4e8eLeetCode\u4e0a\u7684\u6bcf\u4e2a\u95ee\u9898\uff0c\u60a8\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u6a21\u677f\uff0c\u8be5\u6a21\u677f\u901a\u5e38\u5305\u542b\u5355\u4e2a\u672a\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u7136\u540e\u60a8\u5fc5\u987b\u5b9e\u73b0\u5e76\u63d0\u4ea4\u8be5\u51fd\u6570\u624d\u80fd\u89e3\u51b3\u95ee\u9898\u3002\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6848\u6a21\u677f\u53ef\u80fd\u5305\u62ec\u5e26\u6709\u51e0\u4e2a\u672a\u5b9e\u73b0\u65b9\u6cd5\u7684\u7ed3\u6784\u548cImpl\u5757\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u6a21\u677f\u4e0d\u662f\u4eba\u5de5\u521b\u5efa\u7684\uff0c\u5b83\u4eec\u662f\u81ea\u52a8\u751f\u6210\u7684\uff0c\u8fd9\u5bfc\u81f4\u4e86\u5927\u91cf\u975e\u5e38\u7b28\u62d9\u548c\u5355\u4e00\u7684\u9508\u8680\u4ee3\u7801\u3002\u4f8b\u5982\uff1a\n\u9009\u9879&lt\uff1bRc&lt\uff1bRefCell&lt\uff1bNode&gt\uff1b&gt\uff1b&gt\uff1b\u5bf9\u4e8e\u6811\u94fe\u63a5\u548c\u9009\u9879&lt\uff1bBox&lt\uff1bNode&gt\uff1b\u540c\u6837\u6709\u6548\uff0c\u5e76\u4e14\u66f4\u6613\u4e8e\u4f7f\u7528\u3002\n\u53d8\u5f02\u81ea\u8eab\u7684\u65b9\u6cd5\u9700\u8981\u53ef\u53d8\u5730\u501f\u7528\u5b83\uff0c\u4f8b\u5982FN\u63d2\u5165(&amp\uff1bmut self\uff0cval\uff1aI32)\u3002\n\u5e26\u7b26\u53f7\u768432\u4f4d\u6574\u6570\u7528\u4e8e\u6240\u6709\u6570\u5b57\uff0c\u5373\u4f7f\u95ee\u9898\u672a\u9488\u5bf9\u975e\u8d1f\u6574\u6570\u5b9a\u4e49\uff0c\u4f8b\u5982fn nth_fib(n\uff1ai32)-&gt\uff1bi32\u3002\n\u5bf9\u4e8e\u975e\u8d1f\u6574\u6570\u672a\u5b9a\u4e49\u7684\u95ee\u9898\u5e94\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u4f8b\u5982fn nth_fib(n\uff1au32)-&gt\uff1bu32\u3002\n\u51fd\u6570\u59cb\u7ec8\u53d6\u5f97\u5176\u53c2\u6570\u7684\u6240\u6709\u6743\uff0c\u5373\u4f7f\u8fd9\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u4f8b\u5982FN SUM(Nums\uff1aVEC&lt\uff1bI32&gt\uff1b)-&gt\uff1bI32\n\u51fd\u6570\u6709\u65f6\u4f1a\u5ffd\u7565\u57fa\u672c\u9519\u8bef\u60c5\u51b5\uff0c\u4f8b\u5982\u5bf9\u4e8eFN get_max(Nums\uff1aVEC&lt\uff1bI32&gt\uff1b)-&gt\uff1bI32\u5982\u679cNums\u4e3a\u7a7a\uff0c\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48I32\uff1f\n\u5982\u679c\u7ed3\u679c\u53ef\u80fd\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5219\u5e94\u5c06\u8fd4\u56de\u7c7b\u578b\u5305\u88c5\u5728\u9009\u9879\u4e2d\uff0c\u4f8b\u5982fn get_max(number\uff1a&amp\uff1b[I32])-&gt\uff1boption&lt\uff1bI32&gt\uff1b\nLeetCode\u4e0d\u5141\u8bb8\u60a8\u5728\u89e3\u51b3\u65b9\u6848\u4e2d\u5f15\u5165\u7b2c\u4e09\u65b9\u4f9d\u8d56\u9879\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5bf9\u4e8e\u5927\u591a\u6570\u8bed\u8a00\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662fRust\u6709\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6807\u51c6\u5e93\uff0c\u5b83\u751a\u81f3\u4e0d\u5305\u62ec\u6b63\u5219\u8868\u8fbe\u5f0f\u652f\u6301\uff0c\u6240\u4ee5LeetCode\u4e0a\u7684\u8bb8\u591a\u66f4\u590d\u6742\u7684\u5b57\u7b26\u4e32\u89e3\u6790\u95ee\u9898\u5728Rust\u4e2d\u662f\u6beb\u65e0\u610f\u4e49\u7684\u96be\u4ee5\u89e3\u51b3\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u5728\u5176\u6807\u51c6\u5e93\u4e2d\u6709\u6b63\u5219\u8868\u8fbe\u5f0f\u652f\u6301\u7684\u8bed\u8a00\u4e2d\u6709\u4e00\u4e9b\u5fae\u4e0d\u8db3\u9053\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u5e76\u53d1\u7c7b\u522b\u4e2d\u7684\u6240\u6709\u95ee\u9898\u90fd\u4e0d\u63a5\u53d7Rust\u4e2d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4ec0\u4e48\uff1f\u65e0\u6240\u754f\u60e7\u7684\u5e76\u53d1\u662fRust&#39\uff1b\u7684\u4e3b\u8981\u5356\u70b9\u4e4b\u4e00\uff01\n\u89e3\u51b3\u95ee\u9898\u540e\uff0c\u60a8\u53ef\u4ee5\u8f6c\u5230\u95ee\u9898\u7684\u8bc4\u8bba\u90e8\u5206\u67e5\u770b\u5176\u4ed6\u7528\u6237\u7684\u89e3\u51b3\u65b9\u6848(\u56e0\u4e3a\u8bb8\u591a\u7528\u6237\u559c\u6b22\u5728\u90a3\u91cc\u53d1\u5e03\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6848)\uff0c\u4f46\u662f\u7531\u4e8eRust\u5728LeetCode\u4e0a\u5e76\u4e0d\u662f\u5f88\u53d7\u6b22\u8fce\uff0c\u6240\u4ee5\u6709\u65f6\u60a8\u4e0d\u4f1a\u627e\u5230\u4efb\u4f55Rust\u89e3\u51b3\u65b9\u6848\u3002\nLeetCode\u6709\u6570\u91cf\u60ca\u4eba\u7684\u975e\u5e38\u4f4e\u8d28\u91cf\u7684\u95ee\u9898\u3002\u7528\u6237\u53ef\u4ee5\u559c\u6b22\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u559c\u6b22\u95ee\u9898\uff0c\u4f46\u5373\u4f7f\u95ee\u9898\u8fbe\u5230\u975e\u5e38\u9ad8\u7684\u4e0d\u559c\u597d\u7387\uff0c\u95ee\u9898\u4e5f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5220\u9664\u3002\u6211\u5728100+\u6295\u7968\u548c80%+\u4e0d\u559c\u6b22\u7684\u6bd4\u7387\u4e0a\u770b\u5230\u4e86\u5f88\u591a\u95ee\u9898\uff0c\u6211\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8981\u628a\u5b83\u4eec\u653e\u5728\u7f51\u7ad9\u4e0a\u3002\n\u95ee\u9898\u96be\u5ea6\u7b49\u7ea7\u6709\u70b9\u4f4e\u3002\u95ee\u9898\u5206\u4e3a\u5bb9\u6613\u95ee\u9898\u3001\u4e2d\u7b49\u95ee\u9898\u6216\u56f0\u96be\u95ee\u9898\uff0c\u4f46\u6709\u8bb8\u591a\u5bb9\u6613\u95ee\u9898\u7684\u89e3\u51b3\u7387\u4f4e\u4e8e\u8bb8\u591a\u56f0\u96be\u95ee\u9898\u3002\n\u5e76\u975e\u6240\u6709\u95ee\u9898\u90fd\u63a5\u53d7\u6240\u6709\u8bed\u8a00\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u4e14\u60a8\u65e0\u6cd5\u6839\u636e\u95ee\u9898\u63a5\u53d7\u7684\u8bed\u8a00\u7b5b\u9009\u95ee\u9898\u3002\u4f8b\u5982\uff0cLeetCode\u4e0a\u7684\u6240\u6709\u56fe\u5f62\u95ee\u9898\u90fd\u4e0d\u63a5\u53d7\u94c1\u9508\u89e3\u51b3\u65b9\u6848\u3002\nLeetCode\u5728\u9661\u5ced\u7684\u6708\u5ea6\u4ed8\u8d39\u5899\u540e\u9762\u5c4f\u853d\u4e86\u9ad8\u7ea7\u95ee\u9898\uff0c\u4f46\u4e0d\u63d0\u4f9b\u4efb\u4f55\u5f62\u5f0f\u7684\u9ad8\u7ea7\u514d\u8d39\u8bd5\u7528\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65ad\u8d28\u91cf\u662f\u5426\u771f\u7684\u6bd4\u514d\u8d39\u95ee\u9898\u66f4\u597d\u3002\n\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\u9488\u5bf9\u4e00\u5957\u79d8\u5bc6\u7684\u5355\u5143\u6d4b\u8bd5\u8fdb\u884c\u6d4b\u8bd5\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u6ca1\u6709\u901a\u8fc7\u7279\u5b9a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5b83\u4eec\u4f1a\u5411\u60a8\u663e\u793a\u5931\u8d25\u7684\u7528\u4f8b\u3002\nCodewar\u662f\u4e00\u4e2a\u5bb9\u6613\u8bef\u5bfc\u7684\u540d\u5b57\u3002Codewar\u6ca1\u6709\u53d1\u751f\u6218\u4e89\u3002\u89e3\u51b3\u95ee\u9898\u6ca1\u6709\u65f6\u95f4\u9650\u5236\uff0c\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u4e0d\u4f1a\u6839\u636e\u6267\u884c\u901f\u5ea6\u6216\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u8fdb\u884c\u8bc4\u5224\u3002\u4f60\u4e0d\u662f\u5728\u4e0e\u4efb\u4f55\u4eba\u7ade\u4e89\u3002\u8fd9\u4e0d\u662f\u574f\u4e8b\uff0c\u53ea\u662f\u503c\u5f97\u4e00\u63d0\u7684\u662f\u3002\nRuust\u662fCodewar\u652f\u6301\u7684\u8bed\u8a00\u3002\u5bf9\u4e8eCodeWare\u4e0a\u7684\u6bcf\u4e2a\u95ee\u9898\uff0c\u60a8\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u6a21\u677f\uff0c\u8be5\u6a21\u677f\u901a\u5e38\u5305\u542b\u5355\u4e2a\u672a\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u7136\u540e\u60a8\u5fc5\u987b\u5b9e\u73b0\u5e76\u63d0\u4ea4\u8be5\u51fd\u6570\u624d\u80fd\u89e3\u51b3\u95ee\u9898\u3002\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u6a21\u677f\u662f\u7531\u4eba\u521b\u5efa\u7684\uff0c\u5305\u62ec\u4e0d\u719f\u6089\u94c1\u9508\u7684\u4eba\uff0c\u56e0\u6b64\u60a8\u5076\u5c14\u4f1a\u9047\u5230\u4e00\u4e9b\u7b28\u62d9\u548c\u4e0d\u81ea\u7136\u7684\u94c1\u9508\u3002\u4f8b\u5982\uff1a\n\u5bf9\u4e8e\u6ca1\u6709\u4e3a\u975e\u8d1f\u6574\u6570\u5b9a\u4e49\u7684\u95ee\u9898\uff0c\u6709\u65f6\u4f1a\u91c7\u7528\u5e26\u7b26\u53f7\u6574\u6570\u53c2\u6570\uff0c\u4f8b\u5982fn nth_fib(n\uff1aI32)-&gt\uff1bI32\u3002\n\u5982\u679c\u95ee\u9898\u4e0d\u662f\u4e3a\u975e\u8d1f\u6574\u6570\u5b9a\u4e49\u7684\uff0c\u5219\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\u53c2\u6570\uff0c\u4f8b\u5982fn nth_fib(n\uff1au32)-&gt\uff1bu32\u3002\n\u6709\u65f6\u95ee\u9898\u4f1a\u8981\u6c42\u60a8\u4e3a\u7a7a\u503c\u8fd4\u56de-1\uff0c\u4f8b\u5982FN GET_INDEX(\u9488\uff1aI32\uff0c\u5e72\u8349\u5806\uff1a&amp\uff1b[I32])-&gt\uff1bI32\u3002\n\u5982\u679c\u7ed3\u679c\u53ef\u4ee5\u4e3aNULL\uff0c\u5219\u5e94\u5c06\u8fd4\u56de\u7c7b\u578b\u5305\u88c5\u5728\u9009\u9879\u4e2d\uff0c\u4f8b\u5982FN GET_INDEX(\u9488\uff1aI32\uff0c\u5e72\u8349\u5806\uff1a&amp\uff1b[I32])-&gt\uff1b\u9009\u9879&lt\uff1busize&gt\uff1b\n\u4ee5\u4e0a\u6240\u6709\u95ee\u9898\u53ea\u662f\u5076\u5c14\u4f1a\u53d1\u751f\uff0c\u56e0\u4e3a\u5728Codewar\u4e0a\u6709\u4e0d\u540c\u6280\u80fd\u6c34\u5e73\u7684Rustaceans\u5c06\u95ee\u9898\u8f6c\u6362\u4e3a\u94c1\u9508\u3002\u4e0eLeetCode\u76f8\u6bd4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8fdb\u6b65\uff0c\u5728LeetCode\u4e2d\uff0c\u6240\u6709\u751f\u6210\u7684\u9508\u8680\u95ee\u9898\u4ee3\u7801\u90fd\u662f\u7edf\u4e00\u7684\u3002\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0cCodewar\u4e0a\u7684Rust\u793e\u533a\u53ef\u80fd\u503e\u5411\u4e8e\u7f3a\u4e4f\u7ecf\u9a8c\u7684\u4e00\u65b9\uff0c\u56e0\u4e3a\u6211\u5df2\u7ecf\u770b\u5230\u4e00\u4e9b\u975e\u5e38\u53d7\u6b22\u8fce\u7684\u60ef\u7528\u89e3\u51b3\u65b9\u6848\uff0c\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u4e5f\u6709\u4e00\u70b9\u5c34\u5c2c\u3002\u4f8b\u5982\uff1a\n\u6709\u65f6\u5728\u529f\u80fd\u5757\u7684\u672b\u5c3e\u4f7f\u7528\u663e\u5f0f\u8fd4\u56de\uff0c\u4f8b\u5982\u8fd4\u56de\u7ed3\u679c\uff1b\n\u5757\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u6c42\u503c\u5e76\u9690\u5f0f\u8fd4\u56de\u5176\u6700\u540e\u4e00\u9879\uff0c\u4e0d\u9700\u8981\u5728\u51fd\u6570\u5757\u672b\u5c3e\u663e\u5f0f\u8fd4\u56de\uff0c\u4f8b\u5982RESULT\u3002\n\u6211\u7ecf\u5e38\u8bd5\u56fe\u4e0d\u60dc\u4e00\u5207\u4ee3\u4ef7\uff0c\u53ea\u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\u8fed\u4ee3\u5668\u662f\u5bcc\u6709\u8868\u73b0\u529b\u548c\u4e60\u60ef\u7528\u6cd5\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5fc5\u987b\u5728\u4e00\u884c\u4e2d\u94fe\u63a515\u4e2a\u8fed\u4ee3\u5668\uff0c\u5e76\u4e14\u5176\u95f4\u6709\u591a\u4e2a\u7ea7\u522b\u7684\u5d4c\u5957\u8fed\u4ee3\u5668\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u5e94\u8be5\u8003\u8651\u91cd\u6784\u4ee5\u4f7f\u7528\u4e00\u4e9b\u52a9\u624b\u51fd\u6570\u3001\u4e2d\u95f4\u53d8\u91cf\uff0c\u751a\u81f3\u53ef\u80fd\u662ffor\u5faa\u73af\u3002\n\u518d\u8bf4\u4e00\u6b21\uff0c\u4e0a\u8ff0\u95ee\u9898\u53ea\u662f\u5076\u5c14\u4f1a\u53d1\u751f\u3002\u4e00\u4e2a\u6709\u7ecf\u9a8c\u7684Rustacean\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u53d1\u73b0\u5b83\u4eec\uff0c\u4f46\u8fd9\u4e9b\u7f51\u7ad9\u4e0a\u6709\u5f88\u591a\u94c1\u9508\u65b0\u624b\uff0c\u4ed6\u4eec\u6ca1\u6709\u4efb\u4f55\u7ebf\u7d22\uff0c\u4ed6\u4eec\u6b63\u5728\u5b66\u4e60\u53cd\u6a21\u5f0f\u3002\nRust\u5728Codewar\u4e0a\u4f3c\u4e4e\u4e0d\u90a3\u4e48\u53d7\u6b22\u8fce\uff0c\u8be5\u7f51\u7ad9\u67099000\u4e2a\u7ec3\u4e60\uff0c\u4f46\u53ea\u6709300\u4e2a\u88ab\u7ffb\u8bd1\u6210\u4e86Rust\uff1b\n\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u9488\u5bf9\u4e00\u5957\u79d8\u5bc6\u7684\u5355\u5143\u6d4b\u8bd5\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5982\u679c\u60a8\u6ca1\u6709\u901a\u8fc7\u5176\u4e2d\u4e00\u4e2a\u79d8\u5bc6\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u60a8\u5c31\u6ca1\u6709\u770b\u5230\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u5982\u679c\u6d4b\u8bd5\u7528\u4f8b\u6d4b\u8bd5\u7684\u662f\u95ee\u9898\u63cf\u8ff0\u4e2d\u6ca1\u6709\u6e05\u695a\u8bf4\u660e\u7684\u8fb9\u7f18\u7528\u4f8b\uff0c\u8fd9\u5c24\u5176\u4ee4\u4eba\u607c\u706b\u3002\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b2c\u4e09\u65b9\u4f9d\u8d56\u9879\u7684\u5c0f\u767d\u540d\u5355\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5e2e\u52a9\u89e3\u51b3\u4e0eRust\u6709\u5173\u7684\u95ee\u9898\u3002\u8fd9\u4efd\u767d\u540d\u5355\u5305\u62ec\uff1aRand\u3001chrono\u3001regex\u3001serde\u3001itertools\u548clazy_static\uff0c\u8fd9\u6709\u52a9\u4e8e\u5b8c\u5584Rust\u7684\u6807\u51c6\u5e93\uff0c\u4f7f\u5176\u4e0e\u5176\u4ed6\u8bed\u8a00\u66f4\u63a5\u8fd1\u3002\n\u63d0\u4ea4\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u4f1a\u81ea\u52a8\u53d1\u5e03\u8be5\u89e3\u51b3\u65b9\u6848\u3002\u60a8\u53ef\u4ee5\u67e5\u770b\u548c\u63d0\u5347\u5176\u4ed6\u6210\u5458\u7684\u89e3\u51b3\u65b9\u6848\u3002\u60a8\u53ef\u4ee5\u6309\u6700\u5927\u5347\u5e8f\u5bf9\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u67e5\u770b\u7279\u522b\u7b80\u660e\u548c\u806a\u660e\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8fd9\u6709\u65f6\u4e5f\u4f1a\u975e\u5e38\u60ef\u7528(\u4f46\u6709\u65f6\u4e0d\u662f\uff0c\u5982\u4e0a\u6240\u8ff0)\u3002\n\u95ee\u9898\u96be\u5ea6\u8bc4\u5206\u76f8\u5f53\u4e0d\u9519\uff01Codewar\u4e0d\u50cfLeetCode\u90a3\u6837\u5bf9\u95ee\u9898\u8fdb\u884c\u7b80\u5355\u3001\u4e2d\u7b49\u6216\u56f0\u96be\u7684\u8bc4\u5206\uff0c\u800c\u662f\u9009\u62e9\u4ece\u5bb9\u6613\u5230\u56f0\u96be\u7684\u987a\u5e8f\u5bf9\u95ee\u9898\u8fdb\u884c\u8bc4\u5206\uff1a8kyu\u30017kyu\u30016kyu\u30015kyu\u30014kyu\u30013kyu\u30012kyu\u30011kyu\u3002\u6211\u57288kyu-4kyu\u7684\u8303\u56f4\u5185\u5b8c\u6210\u4e8660\u9053\u9898\uff0c\u6bcf\u4e00\u5173\u90fd\u6bd4\u4e0a\u4e00\u5173\u66f4\u96be\u4e00\u4e9b\uff0c\u8fd9\u7b26\u5408\u6211\u7684\u9884\u671f\u3002\n\u201c\u4ee3\u7801\u7684\u51fa\u73b0\u201d\u5b8c\u5168\u662f\u8bed\u8a00\u4e0d\u53ef\u77e5\u7684\u3002\u4e4d\u4e00\u770b\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u51cf\u53f7\uff0c\u4f46\u770b\u770bHackerRank\u3001LeetCode\u548cCodewar\u5728\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u5bf9Rust\u7684\u652f\u6301\u662f\u591a\u4e48\u53ef\u6015\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u52a0\u53f7\u3002\u4ee3\u7801\u7684\u51fa\u73b0\u4e5f\u88ab\u653e\u5728\u524d\u9762\u63d0\u5230\u7684\u7f51\u7ad9\u4e4b\u4e0a\uff0c\u56e0\u4e3a\u5728\u6211\u770b\u6765\uff0cAOC\u7684\u7ec3\u4e60\u771f\u7684\u5f88\u6709\u8da3\uff0c\u591a\u6837\u5316\uff0c\u800c\u4e14\u8d28\u91cf\u5f88\u9ad8\u3002\n\u5728\u4f60\u5b8c\u6210\u7ec3\u4e60\u540e\uff0c\u9664\u975e\u4f60\u5728\u8c37\u6b4c\u4e0a\u641c\u7d22\u522b\u4eba\u7684\u9508\u8680\u89e3\u51b3\u65b9\u6848\uff0c\u5426\u5219\u4f60\u65e0\u6cd5\u770b\u5230\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5373\u4f7f\u4f60\u5728\u90a3\u91cc\u627e\u5230\u4e86\u4e00\u4e9b\uff0c\u4e5f\u4e0d\u77e5\u9053\u4ed6\u4eec\u6709\u591a\u597d\u6216\u6709\u591a\u60ef\u7528\u3002\n\u8981\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u5efa\u8bae\u60a8\u6d4f\u89c8\u4e00\u4e0b2018\u5e74\u65e5\u5386\u95ee\u9898\uff0c\u5e76\u5c06\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u4e0eBurntSushi\u7684AOC 2018\u5e74\u751f\u9508\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\u3002BurntSushi\u7f16\u5199\u4e86\u975e\u5e38\u5e72\u51c0\u3001\u6613\u8bfb\u3001\u60ef\u7528\u7684Rust\u4ee3\u7801\u3002\u5982\u679c\u60a8\u60f3\u6d4f\u89c82019\u5e74\u65e5\u5386\uff0c\u6211\u5efa\u8bae\u60a8\u5c06\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u4e0ebcmyers 2019\u5e74\u94c1\u9508\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\u3002\u6211\u7279\u522b\u63a8\u8350bcmyers\u7684\u539f\u56e0\u662f\uff0c\u4ed6\u5728YouTube\u4e0a\u5236\u4f5c\u4e86\u4e00\u4e2a\u4ed6\u7f16\u7801\u89e3\u51b3\u65b9\u6848\u7684\u64ad\u653e\u5217\u8868\uff0c\u4ed6\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u4ed6\u7684\u601d\u7ef4\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u4ed6\u5728\u7f16\u7801\u65f6\u8981\u505a\u4ed6\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u3002\n\u8bed\u8a00\u4e0d\u53ef\u77e5\u8bba\uff0c\u6240\u4ee5\u867d\u7136\u5b83\u6ca1\u6709\u6559\u4f60\u4efb\u4f55\u751f\u9508\u6a21\u5f0f\uff0c\u4f46\u5b83\u81f3\u5c11\u4e5f\u6ca1\u6709\u6559\u4f60\u4efb\u4f55\u751f\u9508\u53cd\u6a21\u5f0f\u3002\n\u6c99\u6c99\u58f0\u592a\u68d2\u4e86\u3002\u6240\u6709\u7684\u7f57\u65af\u6797\u65af\u7ec3\u4e60\u90fd\u662f\u7528\u7231\u4e3a\u94c1\u9508\u624b\u5de5\u5236\u4f5c\u7684\uff0c\u8fd9\u662f\u4e00\u80a1\u7f8e\u5999\u7684\u65b0\u9c9c\u7a7a\u6c14\u3002\u6700\u540e\u662f\u4e00\u5957\u771f\u6b63\u6559\u4f1a\u4f60\u4e60\u8bed\u751f\u9508\u7684\u7ec3\u4e60\uff01\n\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u5f7b\u5934\u5f7b\u5c3e\u7684\u751f\u9508\u65b0\u624b\uff0c\u4f60\u7edd\u5bf9\u5e94\u8be5\u68c0\u67e5\u4e00\u4e0b\u62c9\u65af\u6797\u65af\uff0c\u5e76\u5f00\u59cb\u7ec3\u4e60\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u4f60\u5148\u8bfb\u201c\u534a\u5c0f\u65f6\u5b66\u9508\u201d\u8fd9\u672c\u4e66\uff0c\u56e0\u4e3a\u5b83\u4f1a\u8ba9\u4f60\u8d85\u7ea7\u5feb\u5730\u638c\u63e1\u5f88\u591a\u9508\u7684\u8bed\u6cd5\u548c\u6982\u5ff5\u3002(\u8bd1\u6ce8\uff1a\u6211\u5f3a\u70c8\u5efa\u8bae\u4f60\u5148\u8bfb\u534a\u4e2a\u5c0f\u65f6\u624d\u80fd\u5b66\u5230\u9508\uff0c\u56e0\u4e3a\u5b83\u4f1a\u8ba9\u4f60\u8d85\u7ea7\u5feb\u5730\u638c\u63e1\u5f88\u591a\u9508\u7684\u8bed\u6cd5\u548c\u6982\u5ff5\u3002)\u3002\n\u6211\u53ea\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u9c81\u65af\u7279\u6797\u65af\u6279\u8bc4\uff1a\u5728\u9519\u8bef\u5904\u7406\u548c\u8f6c\u6362\u7ec3\u4e60\u4e2d\u6709\u4e00\u4e9b\u7a81\u5982\u5176\u6765\u7684\u96be\u5ea6\u5cf0\u503c\uff0c\u6211\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u7528\u6237\u88ab\u8fd9\u4e9b\u7ec3\u4e60\u641e\u5f97\u4e0d\u77e5\u6240\u63aa\u3002\u6211\u60f3\u5f88\u6709\u53ef\u80fd\u633a\u8fc7\u53bb\uff0c\u6216\u8005\u81f3\u5c11\u6211\u5e0c\u671b\u3002\n\u6211\u8fd8\u6709\u4e00\u4e2a\u4e0d\u80fd\u6279\u8bc4\u7684\u5c0f\u95ee\u9898\uff1a\u5b83\u592a\u77ed\u4e86\u3002\u8fd9\u4e0d\u662f\u6279\u8bc4\uff0c\u56e0\u4e3a\u5b83\u662f\u7f57\u65af\u6797\u65af\u7684\u8bbe\u8ba1\u76ee\u6807\u4e4b\u4e00\uff0c\u662f\u5feb\u901f\u800c\u6e29\u548c\u5730\u4ecb\u7ecd\u94c1\u9508\uff0c\u4f46\u5b83\u662f\u5982\u6b64\u4e4b\u597d\uff0c\u5f53\u7136\uff0c\u6211\u5e0c\u671b\u5b83\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u66f4\u957f\u3002\n\u953b\u70bc\u6709\u4e00\u4e2a\u751f\u9508\u7684\u8f68\u8ff9\uff0c\u8fd9\u662f\u4e00\u4e2a\u5927\u81f4\u6309\u79d1\u76ee\u548c\u96be\u5ea6\u6392\u5e8f\u7684\u7ec3\u4e60\u7684\u96c6\u5408\u3002\u94c1\u9508\u8d5b\u9053\u4e0e\u5176\u4ed6\u8d5b\u9053\u6709\u8bb8\u591a\u76f8\u540c\u7684\u7ec3\u4e60\uff0c\u4f46\u6240\u6709\u7684\u7ec3\u4e60\u90fd\u662f\u7531\u7ecf\u9a8c\u4e30\u5bcc\u7684Rustaceans\u7ffb\u8bd1\u6210\u94c1\u9508\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u5728LeetCode\u548cCodewar\u4e0a\u5e38\u89c1\u7684\u5c34\u5c2c\u7684\u7edf\u4e00\u751f\u9508\u95ee\u9898\u3002\u5927\u7ea6\u6709\u5341\u51e0\u4e2a\u7279\u5b9a\u4e8eRust\u7684\u95ee\u9898\u9700\u8981\u60a8\u5b9e\u73b0\u4e00\u4e2a\u6807\u51c6\u5e93\u7279\u5f81\uff0c\u6216\u8005\u7f16\u5199\u4e00\u4e2a\u5b8f\uff0c\u6216\u8005\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u7f16\u5199\u5e76\u884c\u89e3\u51b3\u65b9\u6848\uff0c\u6216\u8005\u7f16\u5199\u4e0d\u5b89\u5168\u7684Rust\u4ee3\u7801\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u7ec3\u4e60\u662f\u8d5b\u9053\u4e0a\u7684\u4eae\u70b9\uff0c\u6211\u5e0c\u671b\u6709\u66f4\u591a\u7684\u7ec3\u4e60\u3002\u4f5c\u4e3a\u4e00\u79cd\u5b66\u4e60\u201c\u9508\u201d\u7684\u8d44\u6e90\uff0c\u953b\u70bc\u662f\u4ec5\u6b21\u4e8e\u201c\u9508\u201d\u7684\u3002\u6211\u628a\u5b83\u653e\u5728\u7f57\u65af\u6797\u65af\u4e0a\u9762\u7684\u552f\u4e00\u539f\u56e0\u662f\uff0c\u7f57\u65af\u6797\u65af\u53ef\u4ee5\u5728\u4e00\u4e2a\u665a\u4e0a\u5b8c\u6210\uff0c\u800cExercism\u7684\u94c1\u9508\u8d5b\u9053\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u5b83\u7684\u5185\u5bb9\u8981\u591a\u5f97\u591a\u3002\n\u5bfc\u5e08\u6a21\u5f0f\u662f\u6ca1\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u7f51\u7ad9\u4e0a\u7684\u5927\u591a\u6570\u94c1\u9508\u5bfc\u5e08\u90fd\u662f\u4e0d\u6d3b\u8dc3\u7684\uff0c\u800c\u4e14\u5b66\u751f\u4eba\u6570\u8fdc\u8fdc\u8d85\u8fc7\u4ed6\u4eec\uff0c\u6240\u4ee5\u6700\u597d\u662f\u5728\u7ec3\u4e60\u6a21\u5f0f\u4e0b\u8fdb\u884c\u4e00\u6b21\u57f9\u8bad\u3002(\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u201c\u6307\u5bfc\u6a21\u5f0f\u201d\u662f\u6ca1\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u7f51\u7ad9\u4e0a\u7684\u5927\u591a\u6570\u201c\u94c1\u9508\u5bfc\u5e08\u201d\u90fd\u662f\u4e0d\u6d3b\u8dc3\u7684\uff0c\u800c\u5b66\u751f\u4eba\u6570\u53c8\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u4ed6\u4eec)\uff0c\u6240\u4ee5\u6700\u597d\u662f\u5728\u5b9e\u8df5\u6a21\u5f0f\u4e0b\u8fdb\u884c\u4e00\u6b21\u57f9\u8bad\u3002\n\u5171\u670992\u4e2a\u7ec3\u4e60\uff0c\u4f46\u5176\u4e2d\u5f88\u5927\u4e00\u90e8\u5206\u5e76\u6ca1\u6709\u771f\u6b63\u6559\u4f1a\u4f60\u4efb\u4f55\u65b0\u4e1c\u897f\uff0c\u6240\u4ee5\u5b83\u4eec\u611f\u89c9\u6709\u70b9\u50cf\u662f\u5fd9\u788c\u7684\u5de5\u4f5c\u3002\u4ed6\u4eec\u53ef\u80fd\u4f1a\u4ece\u8d5b\u9053\u4e0a\u5220\u51cf\u5927\u7ea620\u4e2a\u7ec3\u4e60\uff0c\u8ba9\u8d5b\u9053\u611f\u89c9\u66f4\u7d27\u3002\n\u95ee\u9898\u7684\u96be\u5ea6\u7b49\u7ea7\u6bd4\u8f83\u9ad8\uff0c\u5bb9\u6613\u7684\u95ee\u9898\u5bb9\u6613\uff0c\u4e2d\u7b49\u7684\u95ee\u9898\u4e2d\u7b49\uff0c\u96be\u7684\u95ee\u9898\u96be\u3002\n\u63d0\u4ea4\u89e3\u51b3\u65b9\u6848\u540e\uff0c\u60a8\u53ef\u4ee5\u6d4f\u89c8\u5176\u4ed6\u7528\u6237\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8fd8\u53ef\u4ee5\u6839\u636e\u83b7\u5f97\u6700\u591a\u661f\u7ea7\u7684\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6392\u5e8f\u3002", "note_en": "When I started learning Rust I made the mistake of following the advice to read  The Book first. While it&#39;s a great resource, it&#39;s pretty overwhelming for a beginner to get told  &#34;If you&#39;d like to learn this programming language the best way to start is to read this 20 chapter book!&#34; Most people give up before they even get started when they get advice like this. Nobody ever told someone to read a 20 chapter book just to get started with Javascript or Python. Rust&#39;s learning curve is no joke but you gotta give the people what they want, and they want to program, not read about programming. Programming is fun and reading about programming is not as fun.\n The first 10% of this article is gonna be me giving you advice on how to learn Rust in 2020 following a  practical hands-on coding approach. This is the good part of the article. You can safely exit after this part (I&#39;ll tell you when). The remaining 90% of this article is me ranting about how most online coding challenge sites have poor support for Rust.\n  If you&#39;re a total Rust newbie and want to learn as much as possible in just one day you should read fasterthanlime&#39;s excellent  A half-hour to learn Rust and then checkout the awesome  Rustlings repo and complete the exercises.\n If you&#39;re a Rust beginner you should get started on  Exercism&#39;s Rust Track. If you get stuck you should ask your friends Google and StackOverflow for help. I recommend taking the time to get comfortable reading and navigating the  Rust Standard Library Docs which is amazing and has simple practical examples for how to use everything inside of it.  Rust by Example is also a really good high-level reference that you can use to quickly learn Rust syntax and features. If you want to gain a deeper understanding of a certain Rust concept only then do I recommend finding the appropriate chapter in  The Book to read. The best part of completing an exercise on Exercism is that you get access to all the solutions by other members which you can sort by most-starred to see particularly idiomatic or clever solutions. This is a great way to learn!\n At this point you&#39;re probably an advanced beginner and can find your own path. If you need more guidance and would like to continue working on small simple programs I recommend doing the exercises from the  Advent of Code 2018 Calendar. The reason why I specifically recommended the 2018 calendar is because once you&#39;re finished with an exercise you can compare your solution to  BurntSushi&#39;s Advent of Code 2018 Rust solutions. BurntSushi writes really clean, readable, idiomatic Rust code. Reading the code of an experienced Rustacean will teach you as much as the exercises themselves.\n   Alternative title: Reviews of Free Online Resources a Rust Beinnger can use to Practice Writing Small Simple Rust Programs\n Most of these resources weren&#39;t specifically created for the purpose of teaching Rust, however they can all be used to learn and practice Rust and many of them explicitly support Rust submissions and provide Rust-specific versions of problems.\n   Rust is a supported language on HackerRank except you aren&#39;t allowed to submit Rust solutions to most of the problems on their site. I tried to upload my solution directly and they refused it:\n  This is really strange because I was able to browse Rust solutions for the problem above submitted by other HackerRank users, so it&#39;s possible to submit a Rust solution somehow. I tried Googling this issue and but Google didn&#39;t return any useful results. There&#39;s no way for me to evalute HackerRank other than to tell you not to waste your time with it like I did.\n  When I first started to learn programming back in 2012 I commonly heard  &#34;If you wanna get up to speed quickly in a new programming language solve some Project Euler problems with it!&#34; which was okay advice at the time since there were not many other alternatives but in my opinion Project Euler has very little to do with programming. Project Euler problems are more math problems than they are programming problems. Their challenge lies almost entirely in the mathematical reasoning required to reach the solution as the programming required is usually trivial. I would not recommend solving Project Euler problems as a way to learn Rust unless you&#39;re very mathematically included and have some nostalgia for the site.\n  Rust is a supported language on LeetCode. For every problem on LeetCode you get a solution template which usually contains a single unimplemented function which you then have to implement and submit in order to solve the problem. For more involved problems the solution template might include a  struct and an  impl block with several unimplemented methods. Unfortunately, these solution templates are not created by humans, they are automatically generated, which results in a lot of really awkward and unidiomatic Rust code. Examples:\n Option&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt; is overkill for tree links and  Option&lt;Box&lt;Node&gt;&gt; works just as well and is much easier to work with\n methods that mutate self need to borrow it mutably, e.g.  fn insert(&amp;mut self, val: i32)\n signed 32-bit integers are used for all numbers, even if the problem is undefined for nonnegative integers, e.g.  fn nth_fib(n: i32) -&gt; i32\n problems which are undefined for nonnegative integers should use unsigned integers, e.g.  fn nth_fib(n: u32) -&gt; u32\n functions always take ownership of their arguments, even if it&#39;s unnecessary, e.g.  fn sum(nums: Vec&lt;i32&gt;) -&gt; i32\n functions sometimes ignore basic error cases, e.g. for  fn get_max(nums: Vec&lt;i32&gt;) -&gt; i32 what  i32 should be returned if  nums is empty?\n if a result might be undefined the return type should be wrapped in an  Option, e.g.  fn get_max(nums: &amp;[i32]) -&gt; Option&lt;i32&gt;\n  LeetCode doesn&#39;t allow you to pull in 3rd-party dependencies in solutions. Normally I think this is okay for most languages but Rust in particular has a pretty slim standard library which doesn&#39;t even include regex support so a lot of the more complex string parsing problems on LeetCode are pointlessly difficult to solve in Rust but have otherwise trivial solutions in other languages which have regex support in their standard libraries.\n None of the problems in the  concurrency category accept solutions in Rust. What? Fearless concurrency is one of Rust&#39;s major selling points!\n After solving a problem you can go to the problem&#39;s comments section to see other user&#39;s solutions (as many users like to publish their solutions there) but because Rust isn&#39;t very popular on LeetCode sometimes you won&#39;t find any Rust solutions ;(\n  LeetCode has a surprising amount of very low quality problems. Problems can be liked and disliked by users but problems are never removed even if they hit very high dislike ratios. I&#39;ve seen lots of problems with 100+ votes and 80%+ dislike ratios and I don&#39;t understand why they are kept on the site.\n Problem difficulty ratings are kinda off. Problems are rated as Easy, Medium, or Hard but there are many Easy problems with lower solve rates than many Hard problems.\n Not all problems accept solutions in all languages, and you can&#39;t filter problems by which languages they accept. None of the graph problems on LeetCode accept Rust solutions, for example.\n LeetCode blocks &#34;premium&#34; problems behind a steep monthly paywall but doesn&#39;t offer any kind of premium free-trial so there&#39;s no telling if the quality is actually any better than the free problems.\n  Solutions to problems are tested against a suite of secret unit tests, but if you fail a particular test case they show you the failed case.\n  Codewars is a misleading name. There&#39;s no war going on at Codewars. There&#39;s no time limit to solve problems and your solutions aren&#39;t judged on their speed of execution or memory useage. You aren&#39;t in competition with anyone else. This isn&#39;t a bad thing, just worth pointing out.\n Rust is a supported language on Codewars. For every problem on Codewars you get a solution template which usually contains a single unimplemented function which you then have to implement and submit in order to solve the problem. These solution templates are created by humans, including humans who aren&#39;t familiar with Rust, so you occasionally get some awkward and unidiomatic Rust. Examples:\n sometimes takes signed integer arguments for problems that aren&#39;t defined for nonnegative integers, e.g.  fn nth_fib(n: i32) -&gt; i32\n if a problem isn&#39;t defined for nonnegative integers use unsigned integer arguments, e.g.  fn nth_fib(n: u32) -&gt; u32\n sometimes a problem asks you to return  -1 for the null case, e.g.  fn get_index(needle: i32, haystack: &amp;[i32]) -&gt; i32\n if a result can be null the return type should be wrapped in an  Option, e.g.  fn get_index(needle: i32, haystack: &amp;[i32]) -&gt; Option&lt;usize&gt;\n All of the issues above only happen sometimes since there are Rustaceans of various skill-levels on Codewars translating problems to Rust. This is a huge step up from LeetCode where all of the generated Rust problem code is consistently unidiomatic. However, the Rust community on Codewars as a whole might lean towards the inexperienced side since I&#39;ve seen some highly upvoted &#34;idiomatic&#34; solutions that were also a bit on the awkward side. Examples:\n sometimes use an explicit return at the end of a function block, e.g.  return result;\n blocks are evaluated as expressions and implicitly return their last item, an explicit return at the end of a function block is unnecessary, e.g.  result\n   often try to solve the problem using nothing but iterators at the cost of everything else\n iterators are expressive and idiomatic, but if you have to chain 15 of them in a row and there are multiple levels of nested iterators in-between then perhaps you should consider refactoring to use some helper functions, intermediate variables, and maybe even a for-loop\n Again, the issues above only happen sometimes. An experienced Rustacean can spot them easily but there are a lot of Rust newbies on these sites who have no clue they are learning anti-patterns.\n  Rust doesn&#39;t seem that popular on Codewars, the site has 9000 exercises but only 300 of them have been translated to Rust ;(\n  Your solution is tested against a suite of secret unit tests, if you fail one of the secret unit tests you aren&#39;t shown the failed test case. This is especially annoying if the test case tests for an edge case that wasn&#39;t clearly communicated in the problem description.\n  There&#39;s a small whitelist of 3rd-party dependencies you can use to help solve problems with Rust. This whitelist includes: rand, chrono, regex, serde, itertools, and lazy_static which helps round out Rust&#39;s standard library and puts it more on par with other languages.\n  Submitting a solution to a problem also automatically publishes the solution. You can view and upvote other members&#39; solutions. You can sort solutions by most upvotes to see particularly concise and clever solutions, which sometimes will also be very idiomatic (but sometimes not, as explained above).\n Problem difficulty grading is pretty good! Instead of grading problems as Easy, Medium, or Hard like LeetCode, Codewars chooses to grade problems from easiest to hardest as: 8 kyu, 7 kyu, 6 kyu, 5 kyu, 4 kyu, 3 kyu, 2 kyu, 1 kyu. I completed 60 problems in the 8 kyu - 4 kyu range and every level felt a little more difficult than the last, which aligned with my expectations.\n  Advent of Code is totally language-agnostic. This would seem like a minus at first but seeing how horribly HackerRank, LeetCode, and Codewars handle their support for Rust on their sites it&#39;s actually a plus. Advent of Code also gets placed above the previously mentioned sites because AoC&#39;s exercises are really interesting, diverse, and high quality in my opinion.\n  After you finish an exercise there&#39;s no way to see other people&#39;s Rust solutions unless you search from them on Google, and even after you find some there&#39;s no telling how good or idiomatic they are.\n To solve the above issue I recommend going through the 2018 Calendar problems and comparing your solutions to  BurntSushi&#39;s AoC 2018 Rust solutions. BurntSushi writes really clean, readable, idiomatic Rust code. If you want to go through the 2019 Calendar then I recommend comparing your solutions to  bcmyers&#39; AoC 2019 Rust solutions. The reason I specifically suggest bcmyers&#39; is because he made a  youtube playlist of him coding up the solutions and he does a great job of explaining his thought process and why he&#39;s doing what he&#39;s doing while he&#39;s coding.\n  Language agnostic, so while it doesn&#39;t teach you any Rust patterns it at least doesn&#39;t teach you any Rust anti-patterns either.\n  Rustlings is sooo good. All Rustlings exercises are hand-crafted for Rust with love and it&#39;s a wonderful breath of fresh air. Finally, a set of exercises that really teach you idiomatic Rust!\n If you&#39;re a total Rust newbie you should absolutely checkout  Rustlings and get started on the exercises. I highly recommend reading fasterthanlime&#39;s  A half-hour to learn Rust first as it&#39;ll get you up to speed on a lot of Rust syntax and concepts super quickly.\n I have only 1 tiny Rustlings criticism: there are some sudden difficulty spikes in the &#34;error-handling&#34; and &#34;conversions&#34; exercises that I could see some users getting overwhelmed by. I assume most probably make it through, or at least I hope.\n I also have 1 tiny non-criticism: it&#39;s too short. This is a non-criticism because it&#39;s one of Rustlings design goals to be a quick and gentle introduction to Rust but it&#39;s so good that of course I wish it was somehow longer.\n  Exercism has a Rust track, which is a collection of exercises roughly ordered by subject and difficulty. The Rust track shares a lot of exercises in common with other tracks, but all of the exercises were translated to Rust by experienced Rustaceans and don&#39;t suffer from any of the awkward unidiomatic Rust issues that are common on LeetCode and Codewars. There are about a dozen Rust-specific problems that require you to implement a standard library trait, or write a macro, or write a parallel solution using multiple threads, or write unsafe Rust code. These exercises are by far the highlights of the track and I wish there were more of them. Exercism is second only to Rustlings as a resource for learning Rust. The only reason I placed it above Rustlings is Rustlings can be completed in an evening and Exercism&#39;s Rust track will take at least a month to complete so it just has a lot more content.\n  &#34;Mentored mode&#34; is useless, as most of the Rust mentors on the site are inactive, and the students heavily outnumber them, so it&#39;s much better to go through a track in &#34;practice mode&#34;.\n There are 92 exercises but a good chunk of them don&#39;t really teach you anything new so they kinda feel like busywork. They could probably cut ~20 exercises from the track to make it feel a lot tighter.\n  Problem difficulties are fairly graded, easy problems are easy, medium problems are medium, hard problems are hard.\n   After you submit a solution you can browse other user&#39;s solutions, and you can sort solutions by which received the most stars.", "posttime": "2020-05-13 07:00:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,rust,\u5b66\u4e60,learning,\u95ee\u9898", "title": "2020\u5e74\u7684\u201c\u5b66\u4e60\u9508\u201d", "title_en": "Learning Rust in 2020", "transed": 1, "url": "https://github.com/pretzelhammer/rust-blog/blob/master/posts/learning-rust-in-2020.md", "via": "", "real_tags": ["2020", "rust", "\u5b66\u4e60", "learning", "\u95ee\u9898"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001888, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4f9d\u8d56\u60a8\u7684\u652f\u6301\uff1a\u672c\u7f51\u7ad9\u4e3b\u8981\u7531\u5e7f\u544a\u652f\u6301\u3002\u5e7f\u544a\u4f7f\u8fd9\u4e2a\u7f51\u7ad9\u5728\u8fc7\u53bb\u768415\u5e74\u91cc\u5f97\u4ee5\u7ef4\u6301\u3002\u6211\u4eec\u5c3d\u6700\u5927\u52aa\u529b\u786e\u4fdd\u53ea\u663e\u793a\u5e72\u51c0\u3001\u76f8\u5173\u7684\u5e7f\u544a\uff0c\u5f53\u68c0\u6d4b\u5230\u4efb\u4f55\u4ee4\u4eba\u8ba8\u538c\u7684\u5e7f\u544a\u65f6\uff0c\u6211\u4eec\u4f1a\u5c3d\u5feb\u5c06\u5176\u5220\u9664\u3002\u5982\u679c\u60a8\u60f3\u6d4f\u89c8\u6ca1\u6709\u5e7f\u544a\u7684\u7f51\u7ad9\uff0c\u540c\u65f6\u4ecd\u7136\u652f\u6301\u6211\u4eec\u7684\u5de5\u4f5c\uff0c\u8bf7\u8003\u8651\u6211\u4eec\u7684\u65e0\u5e7f\u544aPhoronix\u6ea2\u4ef7\u3002\u4f60\u4e5f\u53ef\u4ee5\u8003\u8651\u901a\u8fc7\u8d1d\u5b9d\u652f\u4ed8\u5c0f\u8d39\u3002\u81ea\u4eceAMD Renoir\u7b14\u8bb0\u672c\u7535\u8111\u51e0\u5468\u524d\u5f00\u59cb\u53d1\u8d27\u4ee5\u6765\uff0c\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u4e00\u6b3e\u6709\u8da3\u7684\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u7528\u4e8eLinux\u6d4b\u8bd5\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u7528\u4f5c\u6211\u7684\u4e0b\u4e00\u53f0\u4e3b\u8981\u751f\u4ea7\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3002\u9274\u4e8eAMD Zen2\u5728\u53f0\u5f0f\u673a\u548c\u670d\u52a1\u5668\u65b9\u9762\u53d6\u5f97\u7684\u6210\u529f\uff0c\u6211\u4e00\u76f4\u975e\u5e38\u6e34\u671b\u5c1d\u8bd5\u96f7\u8bfa\u963f\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u4e0a\u5468\u6211\u4e70\u4e86\u4e00\u53f0\u642d\u8f7dRyzen 74700U\u7684\u8054\u60f3IdeaPad\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f53\u9a8c\u975e\u5e38\u597d\uff0cLinux\u7684\u6027\u80fd\u4e5f\u5f88\u8ff7\u4eba\u3002\n\u7531\u4e8e\u4f9b\u5e94\u94fe\u95ee\u9898\u5bfc\u81f4Renoir\u7b14\u8bb0\u672c\u7535\u8111\u7684\u53d1\u5e03\u901f\u5ea6\u6ca1\u6709\u8bb8\u591a\u4eba\u5e0c\u671b\u7684\u90a3\u4e48\u5feb\uff0c\u52a0\u4e0a\u76ee\u524d\u6570\u91cf\u6709\u9650\u7684\u673a\u578b\u5927\u591a\u4e0eNVIDIA\u663e\u5361\u914d\u5bf9\uff0c\u82b1\u4e86\u51e0\u5468\u7684\u65f6\u95f4\u624d\u627e\u5230\u4e00\u6b3e\u6709\u8da3\u7684\u673a\u578b\u7528\u4e8eLinux\u6d4b\u8bd5\u3002\u518d\u52a0\u4e0a\u4e0d\u5f97\u4e0d\u8d2d\u4e70\u6211\u4eec\u5728Phoronix\u96f6\u552e\u5e97\u6d4b\u8bd5\u7684\u51e0\u4e4e\u6240\u6709\u7b14\u8bb0\u672c\u7535\u8111\u8fdb\u884cLinux\u6d4b\u8bd5(\u4ee5\u53ca\u51a0\u72b6\u75c5\u6bd2\u731b\u70c8\u62a8\u51fb\u5e7f\u544a\u6536\u5165)\uff0c\u5f53\u6211\u7ec8\u4e8e\u627e\u5230\u8054\u60f3IdeaPad5(14)\u65f6\uff0c\u6211\u5f88\u9ad8\u5174\uff0c\u53ea\u82b1\u4e86816\u7f8e\u5143(\u6b63\u5e38\u96f6\u552e\u4ef7~850\u7f8e\u5143)\u2026\u2026\u3002Ryzen 7 4700U\u914d\u5907\u516b\u6838\u548c\u96c6\u6210\u663e\u5361\u300116 GB RAM\u30011080p\u663e\u793a\u5c4f\u3001512 GB NVMe\u56fa\u6001\u786c\u76d8\u5b58\u50a8\u4ee5\u53ca\u6240\u6709\u5176\u4ed6\u57fa\u672c\u914d\u7f6e\u3002\u633a\u5212\u7b97\u7684\u3002\n\u867d\u7136\u6211\u5728\u8fc7\u53bb\u768420\u5e74\u91cc\u7ecf\u5386\u4e86\u5f88\u591a\u6b21ThinkPad\uff0c\u4f46\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u8d2d\u4e70IdeaPad\uff0c\u6211\u5bf9\u5b83\u7684\u6784\u5efa\u8d28\u91cf\u611f\u5230\u60ca\u559c\u3002\u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u521a\u521a\u6d4b\u8bd5\u4e86\u8fd9\u6b3e\u7b14\u8bb0\u672c\u7535\u8111\u51e0\u5929\uff0c\u4f46\u5b83\u4e00\u76f4\u8fd0\u884c\u5f97\u5f88\u597d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u7684\u786c\u4ef6\u672c\u8eab\u7ed9\u6211\u7559\u4e0b\u4e86\u6df1\u523b\u7684\u5370\u8c61\u3002BIOS\u5141\u8bb8\u8f7b\u677e\u7981\u7528UEFI Secure Boot\u548cAMD PSP\uff0c\u8fd9\u662f\u5b83\u7684\u53e6\u4e00\u4e2a\u4f18\u52bf\u3002\nRyzen 7 4700U\u662f\u4e00\u4e2a\u516b\u6838\u90e8\u4ef6(\u65e0SMT)\uff0c2.0 GHz\u57fa\u672c\u65f6\u949f\uff0c4.1 GHz Boost\u65f6\u949f\uff0c8MB L3\u9ad8\u901f\u7f13\u5b58\uff0c\u9ed8\u8ba4TDP\u4e3a15\u74e6\u3002\u57fa\u4e8eVega\u7684\u663e\u5361\u62e5\u67097\u4e2aGPU\u5185\u6838\u3002\n\u5f53\u4eceUSB\u5f15\u5bfcUbuntu20.04LTS\u5b89\u88c5\u4ecb\u8d28\u65f6\uff0c\u4e00\u5207\u4f3c\u4e4e\u90fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u663e\u793a\u5c4f\u8fc5\u901f\u4eae\u8d77\u5e76\u51fb\u4e2dGNOME 3.36\u684c\u9762\u3002Ubiquity\u5b89\u88c5\u7a0b\u5e8f\u7acb\u5373\u542f\u52a8\uff0cWiFi\u88ab\u68c0\u6d4b\u5230\u5e76\u4e14\u5de5\u4f5c\u6b63\u5e38\uff0c\u5e76\u4e14\u6ca1\u6709NVMe SSD\u5b58\u50a8\u68c0\u6d4b\u95ee\u9898\u3002\n\u603b\u4f53\u6765\u8bf4\uff0c\u4e00\u5207\u4f3c\u4e4e\u4e00\u5e06\u98ce\u987a\uff0c\u4f46\u91cd\u65b0\u542f\u52a8\u5230\u65b0\u5b89\u88c5\u540e\uff0c\u5f88\u5feb\u5c31\u6ce8\u610f\u5230\u4f7f\u7528\u7684\u662fLLVMPipeRender\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u7684Renoir\u56fe\u5f62\u3002Ubuntu20.04LTS\u9644\u5e26Linux5.4\u5185\u6838\u548cMesa20.0\uff0c\u8be5\u5185\u6838\u5bf9\u4e8eRenoir\u6765\u8bf4\u5f00\u7bb1\u5373\u7528\u6709\u70b9\u592a\u65e7\u4e86\u3002\u6240\u4ee5\u6211\u4eceUbuntu Mainline Kernel PPA\u83b7\u53d6\u4e86\u6700\u65b0\u7684Linux5.6\u7a33\u5b9a\u5185\u6838\u5e76\u91cd\u542f\u3002BAM\uff0c\u56fe\u5f62\u5de5\u4f5c\u4e86\uff01\u867d\u7136\u672c\u6587\u4e3b\u8981\u5173\u6ce8\u7684\u662fCPU\u7aef\u6027\u80fd\uff0c\u4f46\u56fe\u5f62\u5de5\u4f5c\u6b63\u5e38\u3002\n\u9274\u4e8e\u8fc7\u53bb\u7684\u4e00\u4e9b\u9ebb\u70e6\u53d1\u5e03\uff0c\u663e\u5361\u652f\u6301\u662f\u8fd9\u6b21Linux\u6d4b\u8bd5\u7684\u4e3b\u8981\u62c5\u5fe7\u4e4b\u4e00\uff0c\u4f46\u957f\u8bdd\u77ed\u8bf4\uff0c\u5f53\u5207\u6362\u5230Linux5.6\u65f6\uff0c\u8054\u60f3IdeaPad\u4e0a\u7684Ryzen 7 4700U\u663e\u5361\u4e00\u76f4\u5de5\u4f5c\u6b63\u5e38\uff0c\u8fd8\u6ca1\u6709\u9047\u5230\u4efb\u4f55\u95ee\u9898\u3002\u53d1\u73b0\u7684\u53e6\u4e00\u4e2a\u8b66\u544a\u662f\uff0c\u5982\u679c\u60f3\u8981\u7535\u6c60\u62a5\u544a\u6b63\u5e38\u5de5\u4f5c\uff0c\u5219\u9700\u8981Linux5.7Git\u3002\n\u8fd9\u6b3e\u7b14\u8bb0\u672c\u7535\u8111\u5373\u5c06\u63a8\u51fa\u5f88\u591a\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4f46\u4eca\u5929\u53ea\u662f\u9488\u5bf9\u5176\u4ed6\u51e0\u53f0\u8fd0\u884cUbuntu Linux\u7684\u7b14\u8bb0\u672c\u7535\u8111\u7684\u521d\u6b65\u9884\u89c8\u3002\u66f4\u591a\u5173\u4e8e\u82f1\u7279\u5c14Gen9/Gen11\u7684\u6548\u7387\uff0c\u7279\u522b\u662f\u56fe\u5f62\u6027\u80fd\u7684\u6d4b\u8bd5\u5c06\u5728\u672a\u6765\u51e0\u5929\u8fdb\u884c\u3002", "note_en": "We Rely On Your Support: This site is primarily supported by advertisements.  Ads are what have allowed this site to be maintained for the past 15 years. We do our best to ensure only clean, relevant ads are shown, when any nasty ads are detected, we work to remove them ASAP. If you would like to view the site without ads while still supporting our work,  please consider  our ad-free Phoronix Premium. You can also consider  a tip via PayPal.   Since AMD Renoir laptops began shipping some weeks ago, I&#39;ve been on the hunt for an interesting laptop to pick up for Linux testing and to potentially even use as my next main production laptop. Given the successes of AMD Zen 2 on the desktop and server front, I&#39;ve been very eager to try out a Renoir laptop and last week picked up a Lenovo IdeaPad with Ryzen 7 4700U and the experience so far has been very good and with captivating Linux performance.\n    Between supply chain issues leading to Renoir laptops not launching as quickly as many would like paired with the limited models available in quantity so far mostly being paired with NVIDIA graphics, it took some weeks to find an interesting model for Linux testing. Paired with having to buy nearly all of the laptops we test at Phoronix retail for Linux testing (and COVID-19 slamming the ad revenues), I was pleased when finally finding the Lenovo IdeaPad 5 (14) for just $816 USD (normal retail price ~$850 USD)... The Ryzen 7 4700U with eight cores and integrated graphics, 16GB of RAM, 1080p display, 512GB NVMe SSD storage, and all of the other basics. Quite the deal.\n    While I&#39;ve gone through many ThinkPads over the past two decades, this was my first time buying an IdeaPad and was pleasantly surprised with the build quality. While I&#39;ve just been testing out this laptop for several days so far, it&#39;s been working out quite well and so far impressed by the hardware itself. The BIOS does allow easily disabling UEFI Secure Boot and AMD PSP as another plus.\n  The Ryzen 7 4700U is an eight core part (no SMT), 2.0GHz base clock, 4.1GHz boost clock, 8MB L3 cache, and a default TDP of 15 Watts. The Vega-based graphics have 7 GPU cores.\n  When booting the Ubuntu 20.04 LTS install media off USB, everything appeared to &#34;just work&#34; with the display quickly lighting up and hitting the GNOME 3.36 desktop. The Ubiquity installer picked right up, the WiFi was detected and working, and no NVMe SSD storage detection issues.\n    Overall everything seemed to be smooth sailing, but after rebooting into the new installation it was quickly noted that LLVMpipe rendering was in use rather than the actual Renoir graphics. Ubuntu 20.04 LTS is shipping with the Linux 5.4 kernel and Mesa 20.0, which that kernel is slightly too old for Renoir out-of-the-box. So I fetched the latest Linux 5.6 stable kernel from the Ubuntu Mainline Kernel PPA and rebooted. Bam, graphics working! The graphics are working fine though in this article is primarily focusing on the CPU side performance.\n    The graphics support were one of the main worries going into this Linux testing given some past troubled launches, but long story short when switching to Linux 5.6 the Ryzen 7 4700U graphics on the Lenovo IdeaPad have been working without hitting any troubles yet. Another caveat discovered is needing Linux 5.7 Git if wanting the battery reporting to work.\n  I&#39;ll have a lot of benchmarks from this laptop coming up but for today is just an initial preview against a few other laptops running Ubuntu Linux. Tests looking more at the efficiency and especially the graphics performance relative to Intel Gen9/Gen11 will be up in the coming days.", "posttime": "2020-05-13 06:31:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,linux,amd,\u5e7f\u544a", "title": "\u6700\u521d\u7684AMD Ryzen 7 4700U Linux\u6027\u80fd\u826f\u597d", "title_en": "Initial AMD Ryzen 7 4700U Linux Performance Is Good", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=article&item=ryzen7-4700u-linux&num=1", "via": "", "real_tags": ["\u6027\u80fd", "linux", "amd", "\u5e7f\u544a"]}]