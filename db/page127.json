[{"category": "", "categoryclass": "", "imagename": "6b3d76de7baac9ff9f3c278d4466bb6c.jpeg", "infoid": 1006044, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Facebook\u5411\u4e00\u5bb6\u7f51\u7edc\u5b89\u5168\u516c\u53f8\u652f\u4ed8\u4e86\u516d\u4f4d\u6570\u7684\u8d39\u7528\uff0c\u8ba9\u4ed6\u4eec\u5f00\u53d1\u4e86\u4e00\u4e2a\u5c3e\u5df4\u96f6\u65e5(Zero-day In Tails)\uff0c\u4ee5\u8bc6\u522b\u6572\u8bc8\u548c\u5a01\u80c1\u5973\u5b69\u7684\u7537\u5b50\u3002", "note_en": "Facebook paid a cybersecurity firm six figures to develop a zero-day in Tails to identify a man who extorted and threatened girls.", "posttime": "2020-06-11 03:00:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,\u5e2e\u52a9,helped", "title": "Facebook\u5e2e\u52a9\u8054\u90a6\u8c03\u67e5\u5c40\u9ed1\u8fdb\u4e86\u4e00\u4e2a\u513f\u7ae5\u6355\u98df\u8005", "title_en": "Facebook Helped the FBI Hack a Child Predator", "transed": 1, "url": "https://www.vice.com/en_us/article/v7gd9b/facebook-helped-fbi-hack-child-predator-buster-hernandez", "via": "", "real_tags": ["facebook", "\u5e2e\u52a9", "helped"]}, {"category": "", "categoryclass": "", "imagename": "4581e3d5057f26452978155e343abb63.jpeg", "infoid": 1006043, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u5c06\u4f7fPixel\u7cfb\u5217\u6210\u4e3a\u8fc4\u4eca\u8868\u73b0\u6700\u597d\u7684\u4e00\u5e74\uff0c\u5c3d\u7ba1\u4e0e\u6392\u540d\u524d\u4e94\u7684\u54c1\u724c\u76f8\u6bd4\uff0c\u8fd9\u4e2a\u6570\u5b57\u76f8\u5f62\u89c1\u7ecc\u3002\n\u8c37\u6b4cPixel3a\u7684\u9500\u91cf\u5f88\u53ef\u80fd\u5360\u5230\u4e86720\u4e07\u90e8\u7684\u5927\u90e8\u5206\u3002", "note_en": "This would make it the best year yet for the Pixel line, although that number pales in comparison to the top-five brands.\n It\u2019s very likely sales of the Google Pixel 3a make up the bulk of that 7.2 million figure.", "posttime": "2020-06-11 02:44:51", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8c37\u6b4c,\u624b\u673a,google,app,year", "title": "\u5c3d\u7ba1Pixel4\u4ee4\u4eba\u5931\u671b\uff0c\u4f462019\u5e74\u662f\u8c37\u6b4c\u624b\u673a\u9500\u91cf\u6700\u597d\u7684\u4e00\u5e74", "title_en": "Despite Disappointing Pixel 4, 2019 Was Google's Best Year for Phone Sales Yet", "transed": 1, "url": "https://www.androidauthority.com/google-pixel-sales-2019-1127410/", "via": "", "real_tags": ["\u8c37\u6b4c", "\u624b\u673a", "google", "app", "year"]}, {"category": "", "categoryclass": "", "imagename": "a498557a343dfd09fe4bac13a5a04699.png", "infoid": 1006042, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ec0\u4e48\u662f\u9759\u6001\u5206\u6790(SA)\uff1f\u597d\u7684\uff0c\u9759\u6001\u610f\u5473\u7740\u201c\u975e\u52a8\u6001\u201d\uff0c\u5373\u4e0d\u5728\u8fd0\u884c\u65f6\u6216\u5728\u8fd0\u884c\u671f\u95f4\u3002\u9759\u6001\u5206\u6790\u662f\u5728\u8f6f\u4ef6\u5f00\u53d1\u7684\u4e0a\u4e0b\u6587\u4e2d\u5728\u7f16\u8bd1\u65f6\u6216\u63a5\u8fd1\u7f16\u8bd1\u65f6\u5b8c\u6210\u7684\u4e8b\u60c5\u3002\u4f46\u9759\u6001\u5206\u6790\u53ea\u662f\u5f62\u5f0f\u94fe\u7684\u4e00\u90e8\u5206\uff0c\u9664\u4e86\u5217\u8f66\u63a7\u5236\u7cfb\u7edf\u7b49\u5173\u952e\u7cfb\u7edf\u5916\uff0c\u901a\u5e38\u4e0d\u4f1a\u5145\u5206\u5229\u7528\u5b83\u3002\n\u5b8c\u6574\u7684\u5f62\u5f0f\u5316\u94fe\u6761\u4ece\u5f62\u5f0f\u5316\u89c4\u8303\u5f00\u59cb\uff0c\u5f62\u5f0f\u5316\u9700\u6c42\u8bc4\u4f30\u662f\u5f62\u5f0f\u5316\u89c4\u8303\u7684\u4e00\u4e2a\u91cd\u8981\u524d\u63d0\uff0c\u8fd9\u4e00\u90e8\u5206\u6d89\u53ca\u7684\u95ee\u9898\u662f\u201c\u4e00\u4e9b\u8f6f\u4ef6\u8981\u505a\u4ec0\u4e48\uff1f\u201d\n\u4e0b\u4e00\u6b65\u662f\u6b63\u5f0f\u7684\u8bbe\u8ba1\u548c\u5efa\u6a21\uff0c\u5b83\u5904\u7406\u8f6f\u4ef6\u662f\u5982\u4f55\u505a\u7684\u95ee\u9898\uff1b\u901a\u5e38\u8fd9\u9996\u5148\u4ee5\u6b63\u5f0f\u7684\u65b9\u5f0f\u63cf\u8ff0\u6570\u636e\u548c\u7b97\u6cd5\uff0c\u7136\u540e\u9a8c\u8bc1\u6a21\u578b\uff0c\u6700\u540e(\u901a\u5e38)\u7528\u4f5c\u6846\u67b6\u5e76\u7528\u4e8e\u4ee3\u7801\u3002\u8fd9\u9879\u5de5\u4f5c\u7684\u76ee\u6807\u5927\u81f4\u76f8\u5f53\u4e8eSpark\u5bf9\u4e8eAda\u7684\u610f\u4e49\uff0c\u5373\u5b83\u5141\u8bb8NIM\u7a0b\u5e8f\u88ab\u6b63\u5f0f\u9a8c\u8bc1\u5176\u6b63\u786e\u6027\u3002\n\u8981\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u901a\u8fc7\u62d3\u5bbd\u89c6\u91ce\uff0c\u770b\u770b\u201c\u8f6f\u4ef6\u5f00\u53d1\u201d\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u6765\u4e86\u89e3\u4e0a\u4e0b\u6587\u548c\u5168\u8c8c\u3002\u8f6f\u4ef6\u5f00\u53d1\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u6709\u70b9\u5947\u602a\u7684\u8fc7\u7a0b\uff0c\u5b83\u662f\u7ffb\u8bd1\u548c\u7406\u89e3\u4e00\u79cd\u8bed\u8a00\uff0c\u5373\u5ba2\u6237\u7528\u4ed6\u4eec\u7684\u8bed\u8a00\u601d\u8003\uff0c\u5728\u4ed6\u4eec\u7684\u4e16\u754c\u91cc\uff0c\u53ef\u80fd\u662f\u5929\u4f53\u7269\u7406\u3001\u9500\u552e\u6216\u5236\u9020\u3002\u800c\u4e14\u4ed6\u4eec\u7ecf\u5e38\u4e0d\u63d0\u5230\u4ed6\u4eec\u8ba4\u4e3a\u662f\u4f17\u6240\u5468\u77e5\u7684\u4e1c\u897f\u3002\u8fd9\u5c31\u662f\u201c\u8fdb\u6765\u201d\u7684\u4e00\u9762\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u201c\u5916\u53d1\u201d\u7684\u786c\u4ef6\uff0c\u6bcf\u4e2a\u6709\u7ecf\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u90fd\u77e5\u9053\uff0c\u5b83\u6709\u81ea\u5df1\u7684\u5371\u9669\u4e4b\u5904\u3002\u8fd8\u6709\u4e00\u4e2a\u590d\u6742\u7684\u7b2c\u4e09\u90e8\u5206\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u5efa\u7acb\u7684\u8f6f\u4ef6\u4e0d\u662f\u76f4\u63a5\u5728\u786c\u4ef6\u4e0a\u8fd0\u884c\u7684\uff0c\u800c\u901a\u5e38\u662f\u5728\u591a\u4e2a\u4e2d\u95f4\u5c42\u4e0a\u8fd0\u884c\u7684\uff0c\u4f8b\u5982\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e93\u3002\n\u5f53\u67d0\u4e2a\u9879\u76ee\u975e\u5e38\u5173\u952e\u65f6\uff0c\u6211\u4eec\u80af\u5b9a\u9700\u8981\u6b63\u5f0f\u7684\u89c4\u8303\uff0c\u8fd8\u5305\u62ec\u4e0e\u6240\u9700\u529f\u80fd\u672c\u8eab\u65e0\u5173\u4f46\u5bf9\u6211\u4eec\u6765\u8bf4\u6709\u4ef7\u503c\u751a\u81f3\u662f\u5173\u952e\u7684\u5b9e\u7528\u56e0\u7d20\u3002\u4e00\u4e2a\u660e\u663e\u7684\u4f8b\u5b50\u662f\u4ee3\u7801\u5fc5\u987b\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u4f53\u7cfb\u7ed3\u6784\u7684\u5217\u8868\u3002\u53e6\u4e00\u4e2a\u4e0d\u592a\u660e\u663e\u7684\u4f8b\u5b50\u662f\u4ee3\u7801\u5c06\u88ab\u89c2\u5bdf\u7684\u5bc6\u5207\u7a0b\u5ea6(\u4f8b\u5982\u65e5\u5fd7\u6587\u4ef6)\u4ee5\u53ca\u54ea\u4e9b\u5931\u8d25\u54cd\u5e94\u662f\u53ef\u63a5\u53d7\u7684\u3002\n\u4f46\u8bf7\u8bb0\u4f4f\uff1a\u6211\u4eec\u7684\u4ee3\u7801\u88ab\u8bc1\u660e\u662f\u6b63\u786e\u7684\u58f0\u660e\u662f\u6211\u4eec\u6240\u80fd\u505a\u51fa\u7684\u6700\u5927\u58f0\u660e\uff0c\u5766\u7387\u5730\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u96be\u4ee5\u5b9e\u73b0\u548c\u975e\u5e38\u7f55\u89c1\u7684\u58f0\u660e\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u63a7\u5236\u4e86\u8bb8\u591a\u5c42\u4e2d\u7684\u4e00\u4e2a\uff0c\u4f46\u9700\u8981\u4e0e\u5b83\u4eec\u4ea4\u4e92\u6216\u4f9d\u8d56\u5b83\u4eec\u3002\n\u9759\u6001(\u7a0b\u5e8f)\u5206\u6790\u662f\u6211\u4eec\u4f5c\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6700\u5173\u5fc3\u7684\u5f62\u5f0f\u94fe\u5143\u7d20\u3002\n\u901a\u5e38\u7684\u201c\u5b9a\u4e49\u201d\uff0c\u8ba9\u6211\u5f15\u7528\u7ef4\u57fa\u767e\u79d1\u7684\u8bdd\u8bf4\uff0c\u201c\u9759\u6001\u7a0b\u5e8f\u5206\u6790\u662f\u5728\u6ca1\u6709\u5b9e\u9645\u6267\u884c\u7a0b\u5e8f\u2026\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u7684\u8ba1\u7b97\u673a\u8f6f\u4ef6\u7684\u5206\u6790\u201d\u3002\u662f\u6b63\u786e\u7684\uff0c\u4f46\u540c\u65f6\u4e5f\u662f\u5b8c\u5168\u4e0d\u591f\u7684\uff0c\u51e0\u4e4e\u6beb\u65e0\u7528\u5904\u3002\n\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u533a\u5206\u7f16\u8bd1\u5668\u7f16\u5199\u4eba\u5458\u548c\u5f00\u53d1\u4eba\u5458\uff0c\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u5fc5\u987b\u533a\u5206\u201c\u4ee3\u7801\u672c\u8eab\u6b63\u786e\u5417\uff1f\u201d\u548c\u201c\u4ee3\u7801\u5728\u903b\u8f91\u4e0a\u662f\u6b63\u786e\u7684\u5417\uff1f\u201d\u3002\u4ece\u7f16\u8bd1\u5668\u7684\u89d2\u5ea6\u770b\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\nvar foo\uff1auint32=0#init var var myArray\uff1aarray[0..\u3002511\uff0cuint32]#\u6211\u4eec\u7684\u6570\u7ec4#.\u3002foo=myArray[100]#\u5c06\u4e00\u4e9b\u5143\u7d20\u5206\u914d\u7ed9foo\u3002\n\u662f\u6b63\u786e\u7684\u3002\u7c7b\u578b\u5339\u914d\u5e76\u4e14\u7d22\u5f15\u5728\u8fb9\u754c\u5185\u3002\u8fd9\u662f\u7f16\u8bd1\u5668\u6240\u5173\u5fc3\u7684\u3002\n\u5c06myArray[100]\u8d4b\u7ed9foo\u662f\u5426\u6709\u610f\u4e49\u5e76\u4e0d\u662f\u7f16\u8bd1\u5668\u5173\u5fc3\u7684\u95ee\u9898\uff0c\u4f46\u662f\u60a8\u5e94\u8be5\u5173\u6ce8\u5b83\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u60a8\u5e0c\u671b\u5e76\u9700\u8981\u60a8\u7684\u4ee3\u7801\u505a\u4e00\u4e9b\u6709\u610f\u4e49\u7684\u4e8b\u60c5\u4ee5\u53ca\u5b83\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u5e0c\u671b\u60a8\u7684\u4ee3\u7801\u5b9e\u73b0\u4e00\u4e9b\u7b97\u6cd5\u3002\n\u9700\u8981\u9759\u6001\u5206\u6790\u7684\u57fa\u672c\u4e0a\u662f\u68c0\u67e5\u7b97\u6cd5\u7684\u6b63\u786e\u6027-\u4f46\u5982\u679c\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u80fd\u529b\u5c06\u76f8\u5f53\u591a\u7684\u7f16\u8bd1\u5668\u5de5\u4f5c\u5378\u8f7d\u5230\u9759\u6001\u5206\u6790\u4e0a\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff1aRange\uff0c\u4ec0\u4e48\u662fRange\uff0c\u4ec0\u4e48\u662fRange\uff0c\u57fa\u672c\u4e0a\u7b49\u540c\u4e8e\u5199var Month\uff1auint8 invar 0&lt\uff1bMonth&lt\uff1b=12\uff0c\u5373\u5e26\u4e0d\u53d8\u91cf\u7684\u53d8\u91cf\u58f0\u660e\u3002\n\u4e0d\u53d8\u91cf\u662f\u5728\u4e0e\u5176\u76f8\u5173\u7684\u9879(\u4f8b\u5982\u53d8\u91cf)\u7684\u751f\u547d\u5468\u671f\u4e2d\u5fc5\u987b\u4e3a\u771f\u7684\u6761\u4ef6\u3002\u5927\u591a\u6570\u8bed\u8a00\u548cSA\u5de5\u5177\u90fd\u5141\u8bb8\u4e0d\u53d8\u91cf\u5728\u67d0\u4e9b\u660e\u786e\u5b9a\u4e49\u7684\u6761\u4ef6\u4e0b\u4e0d\u6210\u7acb\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u975e\u5e38\u63a5\u8fd1\u4e8e\u73b0\u6709\u7684\u5e26\u6709\u9759\u6001\u5206\u6790\u7684\u6a21\u578b\u68c0\u67e5\u5668\u7684\u8868\u793a\u6cd5\u3002\u73b0\u5728\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5e26\u6709\u6708\u4efd\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u90a3\u4e48\u5982\u679c\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u58f0\u660e\u6708\u4efd\u6570\uff0c\u90a3\u4e48\u6309\u6708\u6570\u8bbf\u95ee\u8be5\u6570\u7ec4\u5c06\u59cb\u7ec8\u5728\u9650\u5236\u4e4b\u5185\u3002\n\u66f4\u7b3c\u7edf\u5730\u8bf4\uff1a\u603b\u662f\u5c3d\u53ef\u80fd\u4e25\u683c\u5730\u786e\u5b9a\u60a8\u7684\u7c7b\u578b\u3002\u8fd9\u6761\u975e\u5e38\u7b80\u5355\u7684\u89c4\u5219\u662f\u5b9e\u73b0\u65e0\u9519\u8bef\u4ee3\u7801\u7684\u91cd\u8981\u89c4\u5219\u3002\n\u8ba9\u6211\u518d\u7ed9\u60a8\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1aNIM\u7684\u4f4e\u4f4d\u548c\u9ad8\u4f4d\u8868\u793a\u6cd5\uff0c\u5b83\u63d0\u4f9b\u6570\u7ec4(\u6216\u5e8f\u5217)\u7684\u6700\u4f4e\u548c\u6700\u9ad8\u6709\u6548\u7d22\u5f15\u3002\u5b83\u4e5f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e0d\u53d8\u91cf\uff0c\u5373loop_var.min&lt\uff1b=loop_var&lt\uff1b=loop_var.high\u3002\u5982\u679c\u6211\u60f3\u5728C\u8bed\u8a00\u4e2d\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u6211\u5fc5\u987b\u4e3aFRAMA-C\u8fd9\u6837\u7684\u9759\u6001\u9a8c\u8bc1\u5668\u7f16\u5199\u4e00\u7ec4\u6ce8\u91ca\u3002\u8fd9\u4e24\u4e2a\u793a\u4f8b\u90fd\u5904\u7406\u5728\u9519\u8bef\u5217\u8868\u4e2d\u6392\u5728\u524d\u9762\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u9519\u8bef\u4f1a\u5bfc\u81f4\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u6f0f\u6d1e\u3002\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u51fd\u6570\uff0c\u5b83\u53ea\u8fd4\u56de\u66f4\u4f4e\u7684\u53c2\u6570\u503c(\u4e24\u4e2a\u53c2\u6570\u7684)\uff0c\u5373min\u51fd\u6570\u3002\u8fd9\u5f88\u7b80\u5355\uff0c\u4e0d\u662f\u5417\uff1f\u55ef\uff0c\u5b83\u53d6\u51b3\u4e8e\u4e00\u4e9b\u56e0\u7d20\uff0c\u7279\u522b\u662f\u53c2\u6570\u7c7b\u578b\u3002\n\u5982\u679c\u6211\u4eec\u50cf\u901a\u5e38\u90a3\u6837\u5c06\u5176\u58f0\u660e\u4e3afunc min(a\uff1aint\uff0cb\uff1aint)\uff1aint\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u80fd\u4f1a\u9047\u5230\u95ee\u9898\uff0c\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u5bfb\u5740\u7684\u67d0\u4e9b\u4f53\u7cfb\u7ed3\u6784\u4e0a\uff0c\u5047\u8bbea\u662f-128\uff0cb\u662f0\uff0cint\u662f8\u4f4d\uff0c\u7ed3\u679c\u4f1a\u662f\u4ec0\u4e48\uff1f\u53ef\u80fd\u662f-128\u3002\n\u6211\u4eec\u771f\u6b63\u60f3\u505a\u7684\u662f\u8bf4\u7ed3\u679c\u5b9e\u9645\u4e0a\u662f\u63d0\u4f9b\u7684\u4e24\u4e2a\u503c\u4e2d\u7684\u6700\u5c0f\u503c\uff1b\u4f46\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\u5b57\u662f\u4e00\u4e2a\u6570\u5b66\u58f0\u660e\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u6570\u5b66\u6027\u8d28\u7684\uff0c\u6211\u4eec\u771f\u6b63\u60f3\u8981\u5b9e\u73b0\u7684\u662f\u8fd9\u6837\u7684\uff1a\u201c\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u6570\u5b57\uff0c\u5e76\u8fd4\u56de\u503c\u8f83\u5c0f\u7684\u90a3\u4e2a-\u8fd9\u4e09\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u662f\u81ea\u7136\u6570\u96c6\u7684\u5143\u7d20\uff0c\u4f8b\u5982\u5728-128\u548c+127\u4e4b\u95f4\u201d\u3002\n\u51fd\u6570min(a\uff1aint\uff0cb\uff1aint)\uff1aint=Required((int_min&lt\uff1b=a&lt\uff1bint_Max)and(int_min&lt\uff1b=b&lt\uff1bint_Max))\u786e\u4fdd((int_min&lt\uff1b=result&lt\uff1bint_Max)and((result==a and result&lt\uff1bb)or(result==b and result&lt\uff1ba))\u3002\n\u8fd9\u770b\u8d77\u6765\u53ef\u80fd\u662f\u4e00\u4e2a\u50cf\u6837\u7684\u3001\u5408\u7406\u7684\u89c4\u8303--\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u539f\u56e0\uff1a\n\u5b83\u8fc7\u4e8e\u4f9d\u8d56\u4e8e\u5177\u4f53\u73af\u5883(\u5982\u5b57\u5bbd)\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u7a0b\u5e8f\u5458\u89c4\u8303\u201d(\u4e0e\u6570\u5b66\u89c4\u8303\u76f8\u53cd)\uff0c\u6362\u8a00\u4e4b\uff0c\u5b83\u53ea\u91cd\u590d\u58f0\u660e\uff0c\n\u58f0\u660e(\u4ee3\u7801)\u53ef\u80fd\u4e0d\u591f\u7cbe\u786e\uff0c\u5373\u2018uintX\u2019(\u4f8b\u5982\uff0c\u2018uint16\u2019)\u53ef\u80fd\u4f1a\u66f4\u597d\uff0c\u5e76\u4e14\u4f1a\u9690\u5f0f\u5730\u4f7f\u89c4\u8303\u66f4\u77ed\uff0c\u5e76\u4e14\u3002\n\u89c4\u683c\u4e0d\u662f\u5f88\u6e05\u695a\u548c\u5b8c\u6574\uff0c\u5982\u679ca==b\u600e\u4e48\u529e\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u540e\u7f6e\u6761\u4ef6\u5c06\u4e0d\u6210\u7acb\u3002\n\u51fd\u6570min(a\uff1aint16\uff0cb\uff1aint16)\uff1aint16=\u786e\u4fdd((result==a and result&lt\uff1b=b)or(result==b and result&lt\uff1b=a))\u3002\n\u524d\u7f6e\u6761\u4ef6\u73b0\u5728\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u521b\u5efa(\u57fa\u4e8e\u7cbe\u786e\u7684\u53c2\u6570\u7c7b\u578b)\uff0c\u540e\u7f6e\u6761\u4ef6\u73b0\u5728\u4e5f\u66f4\u7b80\u5355\uff0c\u8fd8\u5305\u62eca==b\u7684\u60c5\u51b5\u3002\n\u201c\u4f46\u662f\u6211\u60f3\u8981\u4e00\u4e2a\u901a\u7528\u7684MIN\u51fd\u6570\uff01\u201d\u4f60\u8bf4\u5462\uff1f\u90a3\u5c31\u628a\u7b2c\u4e00\u4e2a\u7248\u672c\u653e\u5728\u4e0a\u9762\uff0c\u6539\u6b63\u540e\u7f6e\u6761\u4ef6\uff0c\u4f46\u8981\u4e09\u601d\u800c\u540e\u884c\uff0c\u770b\u770b\u8fd9\u662f\u5426\u771f\u7684\u662f\u4f60\u60f3\u8981\u7684\u3002\u7ecf\u9a8c\u6cd5\u5219\uff1a\u628a\u6240\u6709\u4e1c\u897f(\u6bd4\u5982\u7c7b\u578b)\u90fd\u9489\u5f97\u8d8a\u7d27\u8d8a\u597d\u3002\n\u7136\u800c\uff0c\u672c\u4f8b\u7684\u8981\u70b9\u6709\u6240\u4e0d\u540c\uff0c\u5373\u540e\u7f6e\u6761\u4ef6(\u901a\u5e38)\u5e94\u8be5\u505a\u51fa\u4e0e\u51fd\u6570\u6240\u505a\u7684\u4e8b\u60c5\u76f8\u5173\u7684\u8bed\u53e5\uff0c\u4e0e\u5b9e\u73b0\u7684\u7b97\u6cd5\u76f8\u5173\u3002\u6362\u53e5\u8bdd\u8bf4\uff1a\u89c2\u5bdf\u8005\u53ea\u9700\u67e5\u770b\u89c4\u8303(\u800c\u5ffd\u7565\u51fd\u6570\u4f53)\u5c31\u8db3\u4ee5\u77e5\u9053\u51fd\u6570\u6240\u505a\u7684\u4e8b\u60c5\u3002\n\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u5c06\u5f88\u5feb\u8f6c\u5411\u4e00\u4e2a\u6709\u65f6\u4f1a\u5728\u4e0eSA\u76f8\u5173\u7684\u8ba8\u8bba\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\uff1a\u201c\u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u91cf\u5316\u5668\uff0c\u7279\u522b\u662fEXISTS\u91cf\u5316\u5668\uff1f\u201d\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u8ba9\u6211\u5feb\u901f\u4ecb\u7ecd\u53e6\u4e00\u4e2amin\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u9002\u7528\u4e8e\u5217\u8868\uff1a\n\u5f53\u6211\u4eec\u751a\u81f3\u4e0d\u77e5\u9053\u51fd\u6570\u5c06\u4f20\u9012\u591a\u5c11\u4e2a\u503c\u65f6\uff0c\u6211\u4eec\u5982\u4f55\u6307\u5b9a\u540e\u7f6e\u6761\u4ef6(\u540c\u6837\uff1a\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u540e\u7f6e\u6761\u4ef6\u4e5f\u4f1a\u544a\u8bc9\u6211\u4eec\u51fd\u6570\u505a\u4ec0\u4e48)\uff1f\u89e3\u51b3\u65b9\u6848\uff1a\u6211\u4eec\u63d0\u4ea4\u53c2\u6570\u5217\u8868\u4e2d\u4e0d\u5b58\u5728\u5c0f\u4e8eResult\u7684\u5143\u7d20\u3002\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528All Quantor\u5e76\u5c06\u7d22\u5f15\u653e\u5165\u5217\u8868\u4e2d\uff0c\u4f46\u8fd9\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u5f88\u7cdf\u7cd5\u3002\u8fd9\u6837\u66f4\u5bb9\u6613\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u66f4\u6e05\u695a\u5730\u58f0\u660e\u7c7b\u4f3c\u4e8e\u786e\u4fdd(\u503c\u4e2d\u4e0d\u5b58\u5728x\uff1ax&lt\uff1bresult)\u4e4b\u7c7b\u7684\u5185\u5bb9(\u8bfb\u8d77\u6765\u5c31\u50cf\u201c\u5217\u8868\u503c\u4e2d\u6ca1\u6709\u5c0f\u4e8e\u7ed3\u679c\u7684\u5143\u7d20\u201d)\u3002\n\u90a3\u4e48\uff0c\u8fd9\u4e00\u5207\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u5462\uff1f\u6709\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u4f46\u81f3\u5c11\u73b0\u5728\u51e0\u4e4e\u6240\u6709\u7684\u9759\u6001\u5206\u6790\u5668\u90fd\u4f7f\u7528Hoare\u4e09\u5143\u7ec4(\u901a\u5e38\u4e5f\u79f0\u4e3a\u201c\u5951\u7ea6\u5f0f\u8bbe\u8ba1\u201d(Design by Contract\uff0cDBC))\u4f5c\u4e3a\u57fa\u672c\u6846\u67b6\u3002Hoare\u4e09\u5143\u7ec4\u6709\u4e09\u4e2a\u90e8\u5206(\u8fd9\u5e76\u4e0d\u5947\u602a)\uff0c\u5373\u524d\u7f6e\u6761\u4ef6\u3001\u540e\u7f6e\u6761\u4ef6\u548c\u53ef\u9009\u7684\u4e0d\u53d8\u91cf\u3002\n\u63cf\u8ff0\u5b83\u7684\u4e00\u4e2a\u5178\u578b\u4e14\u597d\u7684\u65b9\u6cd5\u662fDBC\u201c\u6559\u79d1\u4e66\u201d\u89e3\u91ca\uff1a\u524d\u7f6e\u6761\u4ef6\u662f\u8c03\u7528\u8005\u5fc5\u987b\u5c65\u884c\u7684\u627f\u8bfa\uff0c\u540e\u7f6e\u6761\u4ef6\u662f\u88ab\u8c03\u7528\u8005\u5fc5\u987b\u5c65\u884c\u7684\u627f\u8bfa\u3002\u6216\u8005\u8bf4\u5f97\u975e\u5e38\u7b80\u5355\uff1a\u5982\u679c\u51fd\u6570/\u8fc7\u7a0b\u662f\u5728\u72b6\u6001(\u901a\u5e38\u662f\u53c2\u6570)\u6ee1\u8db3\u524d\u7f6e\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u7684\uff0c\u90a3\u4e48\u4e00\u65e6\u5b8c\u6210(\u5728\u51fd\u6570\u9000\u51fa\u65f6)\uff0c\u5b83\u80af\u5b9a\u4f1a\u6ee1\u8db3\u540e\u7f6e\u6761\u4ef6\u3002\n\u5c0f\u4f46\u91cd\u8981\u7684\u9644\u6ce8\uff1a\u5927\u591a\u6570\u50cf\u6837\u7684\u9759\u6001\u5206\u6790\u5668\u4e0d\u4f1a\u5c06\u524d\u7f6e\u6761\u4ef6\u548c\u540e\u7f6e\u6761\u4ef6\u4e2d\u7684\u72b6\u6001\u89c4\u8303\u9650\u5236\u4e3a\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u800c\u662f\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u53ef\u8fbe\u72b6\u6001(\u4f8b\u5982\u5168\u5c40\u53d8\u91cf)\uff0c\u5c3d\u7ba1\u53c2\u6570\u548c\u8fd4\u56de\u503c\u662f\u7ecf\u5178\u548c\u6700\u5e38\u7528\u7684\u60c5\u51b5\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u524d\u7f6e\u6761\u4ef6(\u901a\u5e38\u5199\u6210\u201cRequired\u201d)\u7ecf\u5e38\u88ab\u8bef\u89e3\u548c/\u6216\u4ec5(Ab)\u7528\u4e8e\u7b80\u5355\u7684\u53c2\u6570\u68c0\u67e5\uff0c\u4f8b\u5982\u4e3a\u4e86\u907f\u514d\u7a7a\u6307\u9488\uff0c\u8fd9\u8fd8\u7b97\u53ef\u4ee5\uff0c\u4f46\u662f\u524d\u7f6e\u6761\u4ef6\u53ef\u4ee5\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\n\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u8bbe\u60f3\u4e00\u4e2a\u53ea\u5904\u7406\u5947\u6570\u53c2\u6570\u503c\u7684\u51fd\u6570\u3002\u7d20\u6570\u53ef\u80fd\u662f\u4e00\u4e2a\u7528\u4f8b(2\u9664\u5916)\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u53ea\u5904\u7406\u6f5c\u5728\u7d20\u6570\u7684\u51fd\u6570\uff0c\u53ef\u80fd\u662f\u7d20\u6570\u7b5b\u5b50\u4e2d\u7684\u63d0\u70bc\u9636\u6bb5\u3002\u5b9a\u4e49\u548c\u524d\u63d0\u6761\u4ef6\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\u51fd\u6570\u67d0\u4e9bSieve(num\uff1auint64)\uff1abool=#\u7d20\u6570\u4e0d\u662f\u8d1f\u6570\uff0c\u53ef\u4ee5\u53d8\u5927WHERE\u524d\u63d0\u6761\u4ef6(lastDigit(Num)\u4e0d\u5728[&#39\uff1b0&#39\uff1b\uff0c&#39\uff1b5&#39\uff1b]\u4e2d)\u548c(num&gt\uff1b2)\u548c(num%2==1)#body\n\u518d\u6b21\u6ce8\u610f\uff0c\u8fd9\u662f\u5728\u544a\u8bc9\u51fd\u6570\u672c\u8eab\u3001\u9759\u6001\u9a8c\u8bc1\u5668\u548c\u4efb\u4f55\u8c03\u7528\u8005\uff0c\u5373num\u53c2\u6570\u4e0d\u80fd\u4ee50\u62165\u7ed3\u5c3e(\u8d28\u6570\u4e0d\u80fd\u4ee50\u62165\u7ed3\u5c3e)\uff0c\u5927\u4e8e2(\u6211\u4eec\u4e0d\u5173\u5fc31\u548c2)\uff0c\u662f\u5947\u6570(\u5076\u6570&gt\uff1b2\u4e0d\u80fd\u662f\u7d20\u6570)\uff0c\u5e76\u4e14is&lt\uff1b=MAX_UINT64(\u901a\u8fc7\u7c7b\u578b\u9690\u5f0f)\u3002\n\u60a8\u6ce8\u610f\u5230\u6211\u4f7f\u7528lastDigit\u7684\u5c0f\u628a\u620f\u4e86\u5417\uff1f\u5b9e\u9645\u4e0a\uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u628a\u620f\uff0c\u800c\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u5de5\u5177\uff1alastDigit\u88ab\u79f0\u4e3a\u201c\u5e7b\u5f71\u51fd\u6570\u201d\uff0c\u5b83\u662f\u4e00\u4e2a\u4ec5\u5728\u5206\u6790/\u9a8c\u8bc1\u65f6(\u4f46\u901a\u5e38\u4e0d\u662f\u5728\u8fd0\u884c\u65f6)\u5b58\u5728\u7684\u51fd\u6570\uff0c\u4f46\u5728\u5176\u4ed6\u65b9\u9762\u7684\u884c\u4e3a(\u51e0\u4e4e)\u5c31\u50cf\u4efb\u4f55\u51fd\u6570\u4e00\u6837\u3002\u5b8c\u6574\u7684\u4e8b\u5b9e\u662f\uff0c\u5e7b\u5f71\u51fd\u6570(\u5728\u51e0\u4e4e\u6240\u6709\u63d0\u4f9b\u5b83\u4eec\u7684\u5206\u6790\u5668\u4e2d)\u662f\u4e00\u4e2a\u7eaf\u7cb9\u7684\u6570\u5b66(\u62bd\u8c61)\u51fd\u6570\uff0c\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u5f15\u7406\u201d\u3002\u6709\u8da3\u7684\u662f\uff0c\u5e7b\u5f71\u51fd\u6570\u6709\u4e24\u4e2a\u7528\u9014\uff1a\n\u505a\u51fd\u6570\u6240\u505a\u7684\u4e8b\u60c5\uff0c\u5373\u53ef\u91cd\u7528(\u67d0\u4e9b\u6761\u4ef6\u5143\u7d20\u5728\u4ee3\u7801\u8bed\u6599\u5e93\u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u56e0\u6b64\u53ef\u4ee5\u65b9\u4fbf\u5730\u5c06\u5b83\u4eec\u653e\u5165\u865a\u5e7b\u51fd\u6570\u4e2d)\uff1b\u53e6\u5916\uff0c\u5b83\u4eec\u5728\u7f16\u8bd1\u65f6\u6d88\u5931\u3002\n\u540e\u7f6e\u6761\u4ef6(\u901a\u5e38\u5199\u4e3a\u201c\u786e\u4fdd\u201d)\u505a\u7684\u4e8b\u60c5\u4e0e\u6b64\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u5728\u51fd\u6570\u9000\u51fa\u65f6\uff0c\u5b83\u4eec\u6307\u5b9a\u4e86\u51fd\u6570\u4fdd\u8bc1\u4fdd\u6301\u7684\u4e0e\u72b6\u6001\u76f8\u5173\u7684\u6761\u4ef6\u3002\n\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u58f0\u660e\u7ed9\u5b9a\u51fd\u6570\u4ece\u4e0d\u8fd4\u56de\u8d1f\u503c\u6216\u5927\u4e8e42\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8868\u793a\u3002\n\u540c\u6837\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u505a\u4e86\u4e00\u4e2a\u6570\u5b66\u9648\u8ff0\uff0c\u5c3d\u7ba1(\u901a\u5e38)\u662f\u4e0e\u4ee3\u7801\u53d8\u91cf\u76f8\u5173\u7684\u3002\u5c3d\u7ba1\u5e94\u8be5\u6ce8\u610f\uff0c\u4e00\u4e2a\u50cf\u6837\u7684\u9759\u6001\u5206\u6790\u5668\u4e5f\u4f1a\u5229\u7528\u4ee3\u7801\u5143\u7d20\uff0c\u4f8b\u5982\u53d8\u91cf\u58f0\u660e\uff0c\u5e76\u5c06\u5b83\u4eec\u5305\u62ec\u5728\u5176\u5de5\u4f5c\u4e2d\u3002\n\u8ba9\u6211\u4eec\u5feb\u901f\u56de\u5230\u4e0d\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u63a7\u5236\u673a\u5236\u4e2d\u626e\u6f14\u7740\u91cd\u8981\u89d2\u8272\u3002\u9759\u6001\u5206\u6790\u4e2d\u7279\u522b\u6709\u8da3\u7684\u4e00\u70b9\u662f\u786e\u4fdd\u5faa\u73af\u6b63\u786e\u7ec8\u6b62\u3002\n\u5728\u5faa\u73af\u63a7\u5236\u5143\u7d20(\u4f8b\u5982\uff0cfor(i=0\uff1bi&lt\uff1b42\uff1bi++)\u4e2d\u7684\u53d8\u91cfi)\u662f\u53ea\u8bfb\u7684\u8bed\u8a00\u4e2d\uff0c\u95ee\u9898\u4e0d\u90a3\u4e48\u4e25\u91cd\uff0c\u4f46\u662f\u5728\u50cfC\u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\uff0c\u5faa\u73af\u63a7\u5236\u5143\u7d20\u53ef\u4ee5\u88ab\u5206\u914d\u5e76\u4e14\u53ef\u80fd\u76f8\u5f53\u591a\u5730\u201c\u8df3\u6765\u8df3\u53bb\u201d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u6709\u95ee\u9898\u3002\n\u8f93\u5165\u5faa\u73af\u4e0d\u53d8\u91cf(\u5176\u8303\u56f4\u901a\u5e38\u9650\u4e8e\u5faa\u73af)\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u6240\u8c13\u7684\u201c\u51cf\u91cf\u5668\u201d(\u7f16\u8005\u6ce8\uff1a\u4e0d\u8981\u4e0e\u6444\u9b42\u602a\uff1a\u6df7\u6dc6)\uff0c\u8fd9\u662f\u4e00\u79cd\u5faa\u73af\u4e0d\u53d8\u91cf\uff0c\u4ece\u67d0\u4e2a\u503c(\u4f8b\u5982\uff0c\u63a7\u5236\u5143\u7d20\u7684\u6700\u5927\u503c)\u5f00\u59cb\uff0c\u5728\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u540e\u5012\u8ba1\u65f6\u4e00\u4e2a\u3002\u7136\u540e\uff0c\u5206\u6790\u5668\u8bd5\u56fe\u8bc1\u660e\u51cf\u91cf\u5668\u6700\u7ec8\u8fbe\u5230\u96f6\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u5206\u6790\u5668\u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u770b\u3002IF(42)\u5b50\u53e5\u4e2di\u662f1\u8fd8\u662f41\u5bf9\u5206\u6790\u5668\u6765\u8bf4\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5b83\u770b\u5230\u7684\u662f(\u5047\u8bbe\u6211\u662fuint16)i\u7684\u57df\u662f0=i&lt\uff1b65536\u3002\u5982\u679c(i&lt\uff1b42)\u5b50\u53e5\u4e2d\u7684i\u662f1\u8fd8\u662f41\u5bf9\u5206\u6790\u5668\u6765\u8bf4\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5b83\u770b\u5230\u7684\u662f(\u5047\u8bbe\u6211\u662fuint16)i\u7684\u57df\u662f0&lt\uff1b=i&lt\uff1b65536\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5728IF(i&lt\uff1b42)\u5b50\u53e5\u4e2d\uff0ci\u662f1\u8fd8\u662f41\u5bf9\u5206\u6790\u5668\u6765\u8bf4\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5b83\u770b\u5230\u7684\u662f(\u5047\u8bbe\u6211\u662fuint16)i\u7684\u57df\u662f0&lt\uff1b=i&lt\uff1b65536\u3002=i&lt\uff1b42\u548c42&lt\uff1b=i&lt\uff1b65536\uff0c\u8868\u793a\u901a\u5f80IF\u548cELSE\u90e8\u5206\u7684\u5165\u53e3\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u66f4\u591a\u7684\u4e1c\u897f\uff0c\u4f8b\u5982\u4e3a\u4ec0\u4e48\u6709\u4e9b\u5206\u6790\u5668(\u5982Spark)\u7279\u522b\u6709\u7528\uff1a\u8fd9\u662f\u56e0\u4e3a\u5b83\u4eec\u4e0e\u201c\u5bbf\u4e3b\u8bed\u8a00\u201d(Ada)\u7d27\u5bc6\u4ea4\u7ec7\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u53ef\u4ee5\u7406\u89e3\u7f16\u8bd1\u5668\u63d0\u4f9b\u7684\u5927\u91cf\u4fe1\u606f(\u53cd\u4e4b\u4ea6\u7136)\u3002\u57fa\u4e8eLLVM\u7684\u5206\u6790\u5668\u53ef\u4ee5\u53d1\u73b0\u4e00\u79cd\u66f4\u6e29\u548c\u3001\u66f4\u6709\u9650\u4f46\u6709\u70b9\u7c7b\u4f3c\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5927\u91cf\u4fe1\u606f\uff0c\u5c3d\u7ba1\u662f\u5728\u4e2d\u95f4\u4ee3\u7801\u7ea7\u522b\u3002\n\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u662f\uff0cNIM\u5206\u6790\u4e0d\u5fc5\u57fa\u4e8e\u67d0\u4e9b\u4e2d\u95f4\u8868\u793a(\u56e0\u6b64\u53d7\u9650\u4e8e\u4f8b\u5982LLVM)\uff0c\u4f46\u53ef\u4ee5\u5b9e\u73b0\u66f4\u7c7b\u4f3c\u4e8eSPARK\u7684\u89e3\u51b3\u65b9\u6848\u3002\u9759\u6001\u5206\u6790\u4e5f\u5c06\u6781\u5927\u5730\u5e2e\u52a9NIM\u7684\u53d1\u5c55\uff0c\u56e0\u4e3a\u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u4f7f\u5176\u6210\u4e3a\u4e00\u6761\u4ec5\u5145\u5206\u5730\u6307\u5b9a\u548c\u6210\u529f\u9a8c\u8bc1\u5b83\u7684\u89c4\u5219\u3002NIM\u5206\u6790\u4e5f\u5c06\u6781\u5927\u5730\u5e2e\u52a9NIM\u7684\u5f00\u53d1\uff0c\u56e0\u4e3a\u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u4f7f\u5176\u6210\u4e3a\u4e00\u6761\u4ec5\u5145\u5206\u5730\u6307\u5b9a\u548c\u6210\u529f\u9a8c\u8bc1\u5b83\u7684\u89c4\u5219\u3002NIM\u5206\u6790\u53ef\u80fd\u4e0d\u662f\u57fa\u4e8e\u67d0\u79cd\u4e2d\u95f4\u8868\u793a(\u56e0\u6b64\u50cfLLVM\u90a3\u6837\u53d7\u9650)\uff0c\u800c\u662f\u53ef\u4ee5\u5b9e\u73b0\u66f4\u7c7b\u4f3c\u4e8eSPARK\u7684\u89e3\u51b3\u65b9\u6848\u3002\u9759\u6001\u5206\u6790\u4e5f\u5c06\u6781\u5927\u5730\u5e2e\u52a9NIM\u7684\u53d1\u5c55\uff0c\u56e0\u4e3a\u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u4f7f\u5b83\u6210\u4e3a\u4e00\u6761\u4ec5\u5145\u5206\u5730\u6307\u5b9a\u548c\u6210\u529f\u9a8c\u8bc1\u5b83\u7684\u89c4\u5219\u3002\n\u6c42\u89e3\u4e0d\u518d\u662f\u9759\u6001\u5206\u6790\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u4ec0\u4e48\u662f\u9759\u6001\u5206\u6790\u5668\u5462\uff1f\u5b83\u662f\u4ee3\u7801\u548c\u6570\u5b66/\u6c42\u89e3\u4e4b\u95f4\u7684\u201c\u6865\u6881\u201d\uff1b\u5b83\u6536\u96c6\u4ee3\u7801\u4e2d\u5305\u542b\u7684\u6240\u6709\u96f6\u788e\u4fe1\u606f\uff0c\u4ee5\u53ca\u7531\u201c\u6ce8\u91ca\u201d\u4ee3\u7801\u7684\u4eba\u63d0\u4f9b\u7684\u4fe1\u606f\uff0c\u5e76\u4ee5\u6709\u610f\u4e49\u548c\u76f8\u5173\u7684\u65b9\u5f0f\u5c06\u5176\u63d0\u4f9b\u7ed9\u6c42\u89e3\u5668\u3002\n\u542c\u8d77\u6765\u5f88\u7b80\u5355\uff1f\u55ef\uff0c\u662f\u7684\uff0c\u5728\u7406\u8bba\u4e0a\u662f\u7684\uff0c\u4f46\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u4f3c\u4e4e\u662f\u4e00\u9879\u590d\u6742\u800c\u8270\u96be\u7684\u5de5\u4f5c\uff1b\u4e8b\u5b9e\u4e0a\uff0c\u53ea\u6709\u6781\u5c11\u6570\u7684\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u4e9bSA\u529f\u80fd\uff0c\u800c\u4e14SA\u4e3b\u8981\u53ea\u5728\u76f8\u5f53\u5c11\u7684\u51e0\u4e2a\u975e\u5e38\u654f\u611f\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u6709\u529b\u5730\u8868\u660e\u4e86SA\u5e76\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\u3002\u53e6\u4e00\u4e2a\u4f3c\u4e4e\u4e5f\u8bc1\u5b9e\u4e86\u8fd9\u4e00\u89c2\u70b9\u7684\u4e8b\u5b9e\u662f\uff0c\u5b9e\u9645\u4e0a\u53ea\u6709\u5341\u51e0\u5230\u4e24\u4e2a\u5b9e\u9645\u53ef\u7528\u7684\u548c\u4f7f\u7528\u7684\u9759\u6001\u5206\u6790\u5668\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458(\u5305\u62ec\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5f00\u53d1\u4eba\u5458)\u6765\u8bf4\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u4e00\u5b9a\u7684\u9650\u5236\u6216\u8fc7\u4e8e\u590d\u6742\u3002\n\u9759\u6001\u5206\u6790--\u6211\u6307\u7684\u662f\u4e0e\u5176\u201c\u5bbf\u4e3b\u8bed\u8a00\u201d\u7d27\u5bc6\u8026\u5408\u7684SA--\u63d0\u4f9b\u4e24\u5927\u529f\u80fd\uff0c\u5373\uff1a\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u552f\u4e00\u5df2\u77e5\u7684\u901a\u8fc7\u8bc1\u660e\u4ee3\u7801\u662f\u65e0\u9519\u8bef\u7684\u6765\u5b9e\u73b0\u5bf9\u4ee3\u7801\u7684\u5408\u7406\u4fe1\u4efb\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\n\u5bf9\u4e8e\u666e\u901a\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9e\u9645\u53ef\u7528\u7684\u3001\u751a\u81f3\u76f8\u5f53\u65b9\u4fbf\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u8fd9\u79cd\u4fe1\u5fc3\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u9759\u6001\u5206\u6790\u5668\u4e0d\u80fd\u521b\u9020\u5947\u8ff9\uff1b\u5b83\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53ea\u80fd\u8bc1\u660e\u60a8\u63d0\u4f9b\u7ed9\u5b83\u7684\u4e1c\u897f\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u60a8\u4e0d\u63d0\u4f9b\u8981\u9a8c\u8bc1\u7684\u8bed\u53e5/\u6761\u4ef6\uff0c\u60a8\u5c06\u4e0d\u4f1a\u4ece\u4e2d\u83b7\u5f97\u592a\u591a\u4fe1\u606f\u3002\n\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\u5b8c\u5168\u7ecf\u8fc7\u9a8c\u8bc1\u7684seL4\u5185\u6838\u3002\u55ef\uff0c\u4ed6\u4eec\u786e\u5b9e\u91c7\u53d6\u4e86\u8270\u96be\u7684\u8def\u7ebf(\u5f53\u65f6\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u8fd9\u6837\u505a)\uff0c\u4ed6\u4eec\u82b1\u4e86\u5927\u7ea6\u5341\u5e74\u7684\u65f6\u95f4\u624d\u5b8c\u6210\u4e86\u975e\u5e38\u719f\u7ec3\u7684\u4e13\u5bb6\u7684\u5de5\u4f5c\u3002\u4e0eAda/Spark\u76f8\u6bd4\uff0c(\u4ece\u51e0\u5e74\u524d)\u53ef\u80fd\u8fd8\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u4f8b\u5b50\uff0c\u5b83(\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u7d27\u5bc6\u8026\u5408\u7684)\u9759\u6001\u5206\u6790\u5668\u3002\u6211\u4ecd\u7136\u8bb0\u5f97\u6211\u7b2c\u4e00\u6b21\u4f7f\u7528\u5b83\u7684\u7ecf\u5386\u3002\u51e0\u4e4e\u662f\u68a6\u60f3\u6210\u771f\uff0c\u4e0d\u4ec5\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u6ca1\u6709\u535a\u58eb\u5b66\u4f4d\u5c31\u53ef\u4ee5\u5b9e\u9645\u4f7f\u7528\u7684\u4e1c\u897f\uff0c\u800c\u4e14\u56e0\u4e3a\u5b83\u7684\u6548\u7387\u5f88\u9ad8\u3002\u6211\u4ecd\u7136\u8bb0\u5f97\u6211\u7b2c\u4e00\u6b21\u4f7f\u7528\u5b83\u7684\u7ecf\u5386\u3002\u5b83\u51e0\u4e4e\u5b9e\u73b0\u4e86\u4e00\u4e2a\u68a6\u60f3\uff0c\u4e0d\u4ec5\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u4eba\u4e0d\u9700\u8981\u535a\u58eb\u5b66\u4f4d\u5c31\u53ef\u4ee5\u5b9e\u9645\u4f7f\u7528\u7684\u4e1c\u897f\uff0c\u8fd8\u56e0\u4e3a\u5b83\u7684\u6548\u7387\u3002\u6211\u4eec\u901a\u5e38\u4e0d\u80fd\u5728\u201c\u6ce8\u91ca\u201d\u4e0a\u6295\u5165\u6bd4\u5728\u7f16\u5199\u4ee3\u7801\u4e0a\u591a\u5f97\u591a\u7684\u65f6\u95f4\u3002\n\u5982\u679c\u60a8\u5e94\u8be5\u4ece\u672c\u6587\u4e2d\u5e26\u8d70\u4e00\u4ef6\u4e8b\uff0c\u90a3\u5c31\u662f\uff1a\u7528\u5b83\u7684\u8b66\u544a\u8ba9\u60a8\u611f\u5230\u4e0d\u5b89\u7684\u7f16\u8bd1\u5668\u662f\u60a8\u7684\u670b\u53cb\u3002SA\u662f\u5b83\u7684\u67d0\u79cd\u6269\u5c55\u7248\u672c\u3002SA\u662f\u60a8\u7684\u670b\u53cb\uff0c\u800c\u4e14\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u670b\u53cb\uff01\u505a\u51fa\u60a8\u7684\u9009\u62e9\uff1a\u60a8\u53ef\u4ee5\u8ba9\u9759\u6001\u5206\u6790\u5668\u5411\u60a8\u6307\u51fa\u95ee\u9898\u6240\u5728\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u60a8\u7684\u5ba2\u6237\u6307\u51fa\u5b83\u4eec(\u5e76\u5492\u9a82\u60a8)\u3002\n\u60a8\u5e94\u8be5\u6ce8\u610f\u7684\u53e6\u4e00\u70b9\u662f\uff0cSA\u662f(\u57fa\u4e8e)\u60a8\u6b63\u5728\u7f16\u7801\u7684\u53e6\u4e00\u79cd\u89c4\u8303\u3002\u5b83\u4e0d\u662f\u7f3a\u70b9\uff0c\u800c\u662f\u4e00\u4e2a\u4f18\u70b9\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5b8c\u5168\u50cf\u60a8\u7684\u4ee3\u7801/\u60a8\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u5141\u8bb8\u60a8\u7528\u6709\u70b9\u7c7b\u4f3c\u7684\u7b26\u53f7\u6765\u8868\u793a\u60a8\u7684\u7b97\u6cd5\uff0c\u4f46\u9700\u8981\u68c0\u67e5\u7b97\u6cd5\u548c\u7a0b\u5e8f\u5b9e\u73b0\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u5efa\u8bae\u66f4\u8fdb\u4e00\u6b65\uff0c\u5c06\u89c4\u8303\u89c6\u4e3a\u91cd\u8981\u7684\u90e8\u5206\uff0c\u5e76\u5c06\u7f16\u7801\u89c6\u4e3a\u4e00\u4e9b\u201c\u6b21\u8981\u5de5\u4f5c\u201d\u3002\u7f16\u7a0b\u201c\u53ea\u662f\u201d\u5b9e\u73b0\u201c\u5982\u4f55\uff1f\u201d\u7684\u4e00\u90e8\u5206\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u9ad8\u5ea6\u654f\u611f\u7684\u73af\u5883\u4e2d\uff0c\u9996\u5148\u9002\u5f53\u5730(\u6b63\u5f0f\u5730)\u6307\u5b9a\u8981\u505a\u4ec0\u4e48\u3001\u5fc5\u987b\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u4ee5\u53ca\u67d0\u4e2a\u6a21\u5757\u6216\u8fc7\u7a0b\u524d\u540e\u7684\u72b6\u6001\u662f\u4ec0\u4e48\uff0c\u800c\u5b9e\u9645\u5b9e\u73b0\u6a21\u5757\u548c/\u6216\u8fc7\u7a0b\u53ea\u662f\u5012\u6570\u7b2c\u4e8c\u6b65(\u6700\u540e\u4e00\u6b65\u662f\u9a8c\u8bc1\u548c\u6d4b\u8bd5)\uff0c\u800c\u5b9e\u9645\u5b9e\u73b0\u6a21\u5757\u548c/\u6216\u8fc7\u7a0b\u53ea\u662f\u5012\u6570\u7b2c\u4e8c\u6b65(\u6700\u540e\u4e00\u6b65\u662f\u9a8c\u8bc1\u548c\u6d4b\u8bd5)\uff0c\u800c\u5b9e\u9645\u5b9e\u73b0\u6a21\u5757\u548c/\u6216\u8fc7\u7a0b\u53ea\u662f\u5012\u6570\u7b2c\u4e8c\u6b65(\u6700\u540e\u4e00\u6b65\u662f\u9a8c\u8bc1\u548c\u6d4b\u8bd5)\u3002\n\u8fd8\u8981\u6ce8\u610f\u8fd9\u6837\u505a\u7684\u4e00\u4e2a\u7279\u522b\u6709\u7528\u548c\u7f8e\u4e3d\u7684\u526f\u4f5c\u7528\uff1a\u5982\u679c\u67d0\u4e2a\u8fc7\u7a0b\u6216\u6a21\u5757\u9700\u8981\u66f4\u6539\uff0c\u6bd4\u5982\u7531\u4e8e\u67d0\u4e9b\u7ba1\u7406\u66f4\u6539\uff0c\u53ea\u8981\u89c4\u8303(\u201c\u6ce8\u91ca\u201d)\u8db3\u591f\u5b8c\u6574\u548c\u4e25\u5bc6\uff0c\u5219\u8be5\u66f4\u6539\u4e0d\u4f1a\u5bf9\u6574\u4e2a\u7cfb\u7edf\u9020\u6210\u635f\u5bb3\u3002\n\u6211\u5e0c\u671b\u5c06\u6765\u7684\u67d0\u4e2aNIM\u7248\u672cX(\u5177\u6709\u4e0d\u5b8c\u6574\u4f46\u5408\u7406\u7684SA\u7ea7\u522b)\u5c06\u662f\u4e00\u4e2a\u53ef\u4e0eAda/Spark\u76f8\u5ab2\u7f8e\u7684\u98de\u8dc3\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u91cd\u5927\u7684\u98de\u8dc3\uff0c\u56e0\u4e3aNIM\u662f\u4e00\u79cd\u6bd4Ad.\u66f4\u5e38\u7528(\u6216\u5f88\u5feb\u5c06\u4f1a)\u4e14\u66f4\u5bb9\u6613\u4f7f\u7528\u7684\u8bed\u8a00.\u4e00\u65e6\u6709\u4e00\u4e2a\u5e26a-d\uff1aVerify\u5f00\u5173\u7684NIM\u7248\u672c\u53ef\u7528\uff0c\u6211\u4f1a\u9ad8\u5174\u5f97\u8df3\u8d77\u821e\u6765.", "note_en": "What is static analysis (SA)?Well, static means \u2018not dynamic\u2019, i.e. not at or via runtime.Static analysis is something that is done at or near compile time in the context of software development.But static analysis is just one part of the formal chain, which is usually not fully used except for critical systems, such as train control systems.\n The full formal chain starts with formal specification, an important pre-requisite of which is formal requirement assessment.This part deals with the question \u201c what is some software to do?\u201d.\n The next step is formal design and modelling which deals with the question of  how the software is doing it; usually this first describes \u2013 in a formal way \u2013 data and algorithms, then verifies the model and finally is (usually) used as a skeleton and To Do for the code.This work\u2019s goal is roughly comparable to what SPARK is to Ada, i.e. it is what allows Nim programs to be formally verified for correctness.\n   To answer that question we must first understand the context and see the full picture by widening our view and seeing what \u2018software development\u2019 means.Software development can be described as a somewhat strange process that is about translating from \u2013 and understanding! \u2013 one language, namely that of a client, who thinks in  their language and within  their world, which may be astrophysics, sales, or manufacturing.And they often don\u2019t mention what they consider as well-known.That\u2019s the \u2018incoming\u2019 side.\n On the other side, the \u2018outgoing\u2019 one, there is hardware which, as every developer with some experience knows, has its own treacherous spots.There is a complex third part too, because usually the software we build does not run directly on hardware but on usually multiple intermediate layers such as the OS and libraries.\n When some project is critical we definitely want a formal specification, also including pragmatic factors that are not relevant for the desired functionality itself but which are valuable or even critical for us to know.One obvious example is a list of operating systems and architectures on which the code will have to run.Another less obvious example is the question how closely the code will be observed (e.g. log files) and what failure responses are acceptable.\n But again and keep that in mind: The statement that  our code is proven to be correct is the  maximal statement we can make, and frankly one that is very hard to achieve and very rare, because we only control 1 of many layers yet need to interact with them or depend on them.\n  Static (program) analysis is the formal chain element we as software developers are most concerned about.\n The common \u201cdefinition\u201d, let me quote Wikipedia,  \u201cStatic program analysis is the analysis of computer software that is performed without actually executing programs \u2026\u201d is correct but at the same time utterly insufficient and next to useless.\n Why?Because we must differentiate between a compiler writer and a developer or, in other words, between the question \u201cis the code per se correct?\u201d and \u201cis the code logically correct?\u201d.From a compilers perspective the following code:\n var  foo :  uint32  =  0  # init var var  myArray  :  array [ 0  ..  511 ,  uint32 ]  # our array # ... foo  =  myArray [ 100 ]  # assign some element to foo\n is correct.The types match and the index is within bounds.That is what a compiler cares about.\n Does it make sense to assign  myArray[100] to  foo is  not a question a compiler is concerned about.You, however, should be concerned about it.Why?Because you want and need your code to do  something sensible and what it needs to do, or in other words, you want your code to implement some algorithm.\n What one  does need static analysis for is basically to check algorithmic correctness - but if one implements that, one may as well make use of that capability to offload quite a bit of compiler work to static analysis.\n Let me give you an example: ranges.What is a range really?It is basically the same as writing  var month : uint8 invar 0 &lt; month &lt;= 12, i.e. a variable declaration with an invariant.\n An invariant is a condition that must hold true during the life-time of the item (e.g. a variable) it is related to.Most languages and SA tools allow that an invariant can not hold under some clearly defined conditions.\n In fact, the example above is very close to the notation of an existing model checker with static analysis.Now, if one has say a string array with the month names, accessing that array by a month number will always be within bounds if the month number is declared as above.\n Putting it more generally: Always nail down your types as tightly as possible.That very simple rule is an important rule to achieve error free code.\n Let me give you another example: Nim\u2019s  low and  high notation which provides an array\u2019s (or sequence\u2019s) lowest and highest valid index.It too can be seen as an invariant, namely as  loop_var.min &lt;= loop_var &lt;= loop_var.high.If I wanted to get the same in C I would have to write a bunch of annotations for a static verifier like Frama-C.Both of those examples deal with problems that are high up on the list of errors creating real-world vulnerabilities.\n  Let us look at a dead simple function that simply returns the argument value (of two args) that is lower, i.e. a  min function.A no-brainer, right?Well, it depends on some factors, especially on the argument type.\n If we declare it as  func min(a: int, b: int) : int as it\u2019s often done, then we may run into problems.Say for example  a is -128,  b is 0, and  int is 8 bits on some of the architectures we address.What will the result be?Presumably  -128.\n What we really want to do is to say that the result really is the minimum of the two values provided; but the minimum of two numbers is a  mathematical statement.Our goal is of a  mathematical nature and what we really mean to achieve is something like:\u201cThis function takes two numbers and returns the one with the lower value \u2013  and all three, the two parameters and the return value, are elements of the set of natural numbers, e.g. between -128 and +127\u201d.\n  func  min ( a :  int ,  b :  int ):  int  =  require (( INT_MIN  &lt;=  a  &lt;  INT_MAX )  and  ( INT_MIN  &lt;=  b  &lt;  INT_MAX ))  ensure (( INT_MIN  &lt;=  result  &lt;  INT_MAX )  and  (( result  ==  a  and  result  &lt;  b )  or  ( result  ==  b  and  result  &lt;  a )))\n This might look like a decent and sensible specification \u2013 but it isn\u2019t, mainly for three reasons:\n it\u2019s too dependent on concrete circumstances (like word width), i.e. it\u2019s what sometimes is called a \u201cprogrammers spec\u201d (as opposed to a mathematical spec) and only repeats the declaration in other words,\n  the declaration (code) is probably not precise enough, i.e. \u2018uintX\u2019 (e.g. \u2018uint16\u2019) probably would be better and would implicitly make the spec shorter, and\n  the spec isn\u2019t clear and complete; what if  a == b? In that case the postcondition won\u2019t hold.\n  func  min ( a :  int16 ,  b :  int16 ):  int16  =  ensure (( result  ==  a  and  result  &lt;=  b )  or  ( result  ==  b  and  result  &lt;=  a ))\n The precondition is now automatically created by the compiler (based on the precise parameter type) and the, now also simpler, postcondition also covers the case where  a == b.\n \u201cBut I  want a general and generic  min function!\u201d you say?Well, then keep the first version above and just correct the postcondition, but think twice whether this really is what you want.Rule of thumb: Nail everything (e.g. types) down as tightly as possible.\n The main point of this example was however something different, namely that a postcondition (usually) should make statements related to what the function  does, related to the algorithm implemented.In other words: It should be sufficient for an observer to look  only at the specification (and ignore the function body) in order to know what a function does.\n Being at that I\u2019ll quickly deviate to an issue that sometimes comes up in SA related discussions: \u201cwhy would we need quantors, especially the  exists quantor?\u201d.To answer that let me quickly introduce another  min function, one that works on a list:\n  How are we to specify a postcondition (again: ideally one that also tells us what the function does) when we do not even know how many values the function will get passed?Solution: We submit that there exists no element in the parameter list that is smaller than  result.\n We could also use the  all quantor and play with the indices into the list but that would quickly get ugly.It\u2019s easier and, more importantly, more clear to state something like  ensures(not exists x in values: x &lt; result) (read like \u201cthere is no element in the list  values that is smaller than  result\u201d).\n  So, how does all that work?There are different ways but at least nowadays pretty much all static analysers use Hoare triples, often also called \u201cDesign by Contract\u201d (DbC), as a basic framework.Hoare triples have 3 parts (no surprise there), namely a  precondition, a  postcondition, and optionally  invariants.\n They are useful to make statements about functions/procedures.One typical and good way to describe it is a DbC \u201cschoolbook\u201d explanation:A precondition is a promise the caller must fulfill, and a postcondition is a promise the callee must fulfill.Or to put it very simply: if a function/procedure is called with a state (usually the parameters) meeting the preconditions then it  will definitely meet its postconditions once it\u2019s done (at function exit).\n Small but important side note: most decent static analysers do not limit the state specifications in pre and postconditions to parameters and return values but can deal with  any reachable state (e.g. global variables), although parameters and return values are the classical and most used case.\n Unfortunately preconditions (often written as \u201crequire\u201d) are often misunderstood and/or only (ab)used for simple parameter checking, e.g. to avoid null pointers.And that\u2019s halfway OK but preconditions can do much more.\n For a simple example think of a function that is meant to only deal with an odd parameter value.Prime numbers might be a use case (except for  2).Imagine that we wanted a function that only works on potential prime numbers, maybe a refining stage in a prime sieve.The definition and preconditions might look like this:\n func  someSieve ( num :  uint64 ):  bool  =  # primes aren&#39;t negative and can get big  where  precondition ( lastDigit ( num )  not  in [ &#39;0&#39; , &#39;5&#39; ] )  and  ( num  &gt;  2 )  and  ( num  %  2  ==  1 ))  # body\n Again, note that this is telling the function itself, the static verifier, and any caller something, namely that the  num parameter must not end in 0 or in 5 (prime numbers don\u2019t end in 0 or 5), is greater than 2 (we don\u2019t care about 1 and 2), is odd (an even number &gt; 2 can\u2019t be prime), and is  &lt;= MAX_UINT64 (implicit via the type).\n You noted my little trick with  lastDigit?Well, actually it\u2019s not really a trick but a handy device:  lastDigit is called a \u201cghost function\u201d, which is a function that only exists at analysis/verification time (but normally not at run-time) but otherwise acts (almost) just like any function.The full truth is that a ghost function (in almost any analyser offering them) is a purely mathematical (abstract) function, sometimes called \u201clemma\u201d.The interesting point for you is that a ghost function is useful for two things:\n to do what functions do, i.e. to be reusable (certain condition elements occur multiple times in a code corpus so it can be handy to put them into a ghost function); plus they vanish when compiling.\n Postconditions (often written as \u201censure\u201d) do quite the same thing but at function exit.They specify state related conditions that the function guarantees to hold.\n For example, if we stated that a given function never returns a negative value or a value greater than 42 we could express that like this\n  Again, keep in mind that we make a  mathematical statement albeit one that (usually) is related to  code variables.Although it should be noted that a decent static analyser also makes use of code elements, e.g. variable declarations, and includes them in its working.\n Let\u2019s quickly return to invariants because they play a major role with control mechanisms.One particularly interesting point in static analysis is to make sure that loops properly terminate.\n In languages where the loop control element, e.g. the variable  i in  for(i = 0; i &lt; 42; i++), is read-only the problem is less critical, but in languages like C where the loop control element can be assigned to and might \u201cjump around\u201d quite a bit it can become really problematic.\n Enter loop invariants (whose scope is typically limited to the loop).One example is a so called \u2018decrementor\u2019 (editor note: not to be confused with  Dementor :)), a type of loop invariant which starts with some value (e.g. the max value of the control element) and counts down one after each loop iteration.The analyser then tries to prove that the decrementor eventually reaches zero.\n If conditions on the other hand are rather simple.All the analyser must do is to look at the control element domain (its \u201crange\u201d) and for the two possible cases and the \u201cpivot\u201d point.Remember, the analyser looks from a mathematical perspective.Whether  i is  1 or  41 in an  if(i &lt; 42) clause makes little difference to an analyser.What it sees is (assuming  i being an  uint16) that the domain of  i is  0 &lt;= i &lt; 65536 and that 42 is within the domain and the \u201cpivot\u201d which means that the domain is split into two, namely  0 &lt;= i &lt; 42 and  42 &lt;= i &lt; 65536 which represent the entry gate to the  if and the  else part.\n Now we are at a point where we can understand some more things, for example why some analysers (like Spark) are particularly helpful: it\u2019s because they are intimately interwoven with the \u201chost language\u201d (Ada) and hence understand a lot of the information the compiler has available (and vice versa).A more modest and limited but somewhat similar situation can be found with LLVM based analysers because they too have access to a lot of information albeit on the intermediate code level.\n Nim too is in an excellent position to \u201cget married\u201d with static analysis due to the fact that it already has quite a few of \u201chidden invariants\u201d, e.g. ranges and quite some other helpful factors and generally a quite clean basic syntax.Probably even more importantly, Nim analysis doesn\u2019t have to be based on some intermediate representation (and hence limited like e.g. LLVM) but can achieve a solution more similar to Spark.Static analysis will also help Nim development tremendously because we can for example make it a rule that only adequately specified and successfully verified code will be accepted.\n Solving isn\u2019t the problem of static analysis any more, so what is a static analyser then?It is the \u201cbridge\u201d between code and math/solving; it is what collects all the bits and pieces of information contained in the code, as well as the information provided by the person \u201cannotating\u201d the code and feeds it in a meaningful and relevant manner to the solver.\n Sounds simple?Well, yes, in theory but in real life it seems to be a complicated and hard job; the fact that only extremely few languages offer some SA facilities as well as the fact that SA is largely used only in rather few very sensitive projects strongly suggests that SA is  not that simple.Another fact that also seems to confirm that view is the fact that there are only about a dozen or two actually usable and used static analysers, all of which are either somewhat limited or way too complex for most developers including quite experienced ones.\n  Static Analysis \u2013 and I mean SA tightly coupled to its \u201chost language\u201d \u2013 offers two big things, namely:\n the  only way known so far to achieve justified confidence in code by  proving it\u2019s bug free, and\n  an actually usable and even reasonably convenient way for mere mortal developers to achieve that confidence.\n With a caveat: a static analyser can\u2019t do miracles; it largely can only prove correct what you feed to it.If you don\u2019t provide statements/conditions to be verified you won\u2019t get much out of it.\n You\u2019ve probably heard of the fully verified seL4 kernel.Well, they did take the hard route (back then they had to) and it took them about a decade of very skilled specialists work.Compare that to Ada/Spark, probably still  the example of a programming language coming (since some years) with a \u201cbuilt in\u201d (actually quite tightly coupled) static analyser.I still remember my first experience with it.It was almost a dream having come true, not even just because it was something one could actually use without a PhD, but also because efficiency of use and even some convenience have a tangible and significant influence on our income as developers; we usually simply can\u2019t afford to invest way more time in \u201cannotation\u201d than in writing code.\n If there is one thing that you should take with you from this article it is this:The compiler which is unnerving you with its warnings is  your friend.SA is some kind of an extended version of this.SA is  your friend, and a powerful one!Make your choice: you can have the static analyser point out problematic spots to you, or you can have your customers pointing them out (and cursing at you).\n The other point you should take away is that SA is (based on)  another specification of what you are coding.It is  not a disadvantage but an  advantage that it\u2019s not exactly like code/your programming language.It allows you to express your algorithms in a somewhat similar notation but having checked  the algorithm as well as the program implementation.\n In fact, I suggest to even go further and to consider the specification the important part and coding as some \u201csecondary work\u201d.Programming is \u201cjust\u201d the part of implementing the \u201chow?\u201d.And indeed in highly sensitive environments, one  first properly specifies (formally)  what is done, what conditions must be met and what the state has to be before and after some module or procedure, and actually implementing the module and/or procedures is only the second to last step (the last step is verification and testing).\n Also note one particularly useful and beautiful side effect of that:if some procedure or module needed to be changed, say due to some administrative change, that change could not create harm to the whole system  iff the specification (\u201cannotations\u201d) is sufficiently complete and tight.\n I expect some future Nim version X (with a not complete but reasonable level of SA) to be a leap comparable to Ada/Spark, and potentially an even more significant leap because Nim is a language that is (or soon will be) much more used \u2013 and much easier to use \u2013 than Ada.I\u2019ll dance in joy once a Nim version with a  -d:verify switch becomes available.", "posttime": "2020-06-11 02:43:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9759\u6001,static,\u51fd\u6570", "title": "\u9759\u6001\u5206\u6790", "title_en": "Static Analysis", "transed": 1, "url": "https://nim-lang.org/blog/2020/06/08/static-analysis.html", "via": "", "real_tags": ["\u9759\u6001", "static", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "3634b226d5c751ee1dc43ff7a8439a8d.jpg", "infoid": 1006041, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u5728\u5168\u7403\u62e5\u670925\u4ebf\u7528\u6237\uff0c\u6709\u8d23\u4efb\u4f7f\u5176Android\u64cd\u4f5c\u7cfb\u7edf\u5c3d\u53ef\u80fd\u5b89\u5168\u3002\u4f46\u8be5\u516c\u53f8\u6709\u65f6\u96be\u4ee5\u5145\u5206\u5ba1\u67e5Google Play Store\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5141\u8bb8\u6570\u5343\u6216\u6570\u767e\u4e07\u7528\u6237\u7ee7\u7eed\u4e0b\u8f7d\u6076\u610f\u7a0b\u5e8f\u3002\u7136\u800c\uff0c\u968f\u7740\u8c37\u6b4c\u5468\u4e09\u53d1\u5e03Android 11\u6d4b\u8bd5\u7248\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u91c7\u53d6\u63aa\u65bd\uff0c\u8ba9\u6d41\u6c13\u5e94\u7528\u7a0b\u5e8f\u66f4\u96be\u7a83\u53d6\u4f60\u7684\u6570\u636e\uff0c\u5373\u4f7f\u5b83\u4eec\u786e\u5b9e\u6e9c\u8d70\u4e86\u3002\n\u8c37\u6b4c\u591a\u5e74\u6765\u4e00\u76f4\u81f4\u529b\u4e8e\u5728\u5e55\u540e\u9010\u6b65\u52a0\u5f3aAndroid\u7684\u5b89\u5168\u3002\u5b89\u535311\u7684\u53d1\u5e03\u7279\u522b\u5173\u6ce8\u4e8e\u6269\u5927\u9690\u79c1\u6539\u8fdb\uff0c\u8ba9\u4f60\u66f4\u597d\u5730\u63a7\u5236\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u7684\u5185\u5bb9\uff0c\u5e76\u63d0\u4f9b\u66f4\u591a\u65b9\u5f0f\u5728\u5b89\u5353\u96f6\u6563\u4e14\u6742\u4e71\u65e0\u7ae0\u7684\u8bbe\u5907\u7fa4\u4e2d\u5206\u53d1\u8f6f\u4ef6\u66f4\u65b0\u3002\nAndroid 10\u4e5f\u89e3\u51b3\u4e86\u5176\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u8981\u6c42\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u8bf7\u6c42\u6743\u9650\uff0c\u7136\u540e\u66f4\u9891\u7e41\u5730\u91cd\u7533\u7528\u6237\u9009\u62e9\u3002Android 11\u589e\u52a0\u4e86\u4e00\u9879\u529f\u80fd\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u8bf7\u6c42\u9ea6\u514b\u98ce\u3001\u6444\u50cf\u5934\u6216\u4f4d\u7f6e\u7b49\u5185\u5bb9\u7684\u4e00\u6b21\u6027\u6743\u9650\uff0c\u4f5c\u4e3a\u5168\u6709\u6216\u5168\u65e0\u7684\u66ff\u4ee3\u65b9\u6848\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u804a\u5929\u5e94\u7528\u7a0b\u5e8f\u4e0e\u670b\u53cb\u5206\u4eab\u4e00\u6b21\u4f60\u7684\u4f4d\u7f6e\uff0c\u800c\u4e0d\u9700\u8981\u6388\u4e88\u65e0\u9650\u671f\u7684\u4f4d\u7f6e\u8bbf\u95ee\u6743\u9650\uff0c\u6216\u8005\u4e0d\u5fc5\u8bb0\u4f4f\u7a0d\u540e\u91cd\u65b0\u8fdb\u5165\u8bbe\u7f6e\u6765\u64a4\u9500\u6743\u9650\u3002\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4eba\u4eec\u5b9e\u9645\u4e0a\u6b63\u5728\u5229\u7528Android 10\u7684\u8fd9\u4e9b\u529f\u80fd\uff0c\u5e76\u5728\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6743\u9650\u8bbf\u95ee\u6743\u9650\u65f6\u8003\u8651\u81ea\u5df1\u7684\u9009\u62e9\uff0c\u8d1f\u8d23\u9690\u79c1\u95ee\u9898\u7684Android\u4ea7\u54c1\u7ecf\u7406\u590f\u66fc\u00b7D\u00b7\u5e2d\u5c14\u74e6(Charmaine D&39\uff1bSilva)\u8bf4\u3002\u56e0\u6b64\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u8fd9\u4e00\u6b21\u6211\u4eec\u6dfb\u52a0\u4e86\u66f4\u591a\u63a7\u4ef6\u3002\nAndroid 11\u8fd8\u5c06\u63a7\u5236\u4f60\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u679c\u4f60\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6709\u6253\u5f00\u5b83\uff0c\u5b83\u4f1a\u81ea\u52a8\u64a4\u9500\u6743\u9650\u3002\u5982\u679c\u4f60\u518d\u6b21\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u53ef\u4ee5\u968f\u65f6\u6062\u590d\u5b83\u7684\u8bbf\u95ee\uff0c\u4f46\u662f\u6743\u9650\u4e0d\u4f1a\u88ab\u9057\u5fd8\u3002\u8c37\u6b4c\u8ba1\u5212\u572860-90\u5929\u540e\u5c1d\u8bd5\u4e0d\u540c\u7684\u622a\u6b62\u65e5\u671f\uff0c\u76ee\u6807\u662f\u5728\u4e0d\u7834\u574f\u529f\u80fd\u7684\u60c5\u51b5\u4e0b\u6d88\u9664\u6d41\u6d6a\u6743\u9650\u3002\n\u5e2d\u5c14\u74e6\u8bf4\uff1a\u6211\u4eec\u5728\u6211\u4eec\u7684\u6570\u636e\u4e2d\u770b\u5230\uff0c\u4eba\u4eec\u7684\u8bbe\u5907\u4e0a\u6709\u5f88\u591a\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ed6\u4eec\u53ef\u80fd\u5df2\u7ecf\u4f7f\u7528\u4e86\u51e0\u6b21\uff0c\u7136\u540e\u5c31\u5fd8\u8bb0\u4e86\u3002\u4ed6\u4eec\u4e0d\u4f1a\u5378\u8f7d\u5b83\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u9700\u8981\u5378\u8f7d\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u4ecd\u5177\u6709\u4e0e\u5176\u5173\u8054\u7684\u6743\u9650\u3002\u56e0\u6b64\uff0c\u8fd9\u4e00\u65b0\u529f\u80fd\u662f\u4e00\u79cd\u6743\u9650\u81ea\u52a8\u91cd\u7f6e--\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u536b\u751f\u68c0\u67e5\u3002&#34\uff1b\n\u4eceAndroid 11\u4e4b\u540e\u63a8\u51fa\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u59cb\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6743\u9650\u81ea\u52a8\u91cd\u7f6e\u529f\u80fd\u5c06\u5904\u4e8e\u6253\u5f00\u72b6\u6001\uff0c\u8fd9\u662f\u5f00\u53d1\u4eba\u5458\u5728\u8ba1\u5212\u4e2d\u8981\u8003\u8651\u7684\u56e0\u7d20\u3002Android 10\u53ca\u66f4\u4f4e\u7248\u672c\u7684\u73b0\u6709\u5e94\u7528\u7a0b\u5e8f\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u542f\u7528\u8be5\u529f\u80fd\uff0c\u4f46\u7528\u6237\u4ecd\u53ef\u4ee5\u901a\u8fc7\u5207\u6362\u63a7\u4ef6\u6765\u6253\u5f00\u8be5\u529f\u80fd\u3002\u8c37\u6b4c\u8868\u793a\uff0c\u5b83\u6700\u7ec8\u5e0c\u671b\u5c06\u51e0\u4e4e\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u7684\u6743\u9650\u81ea\u52a8\u91cd\u7f6e\u8bbe\u4e3a\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u4f46\u8be5\u516c\u53f8\u5e0c\u671b\u653e\u5bbd\u8fd9\u4e00\u6539\u53d8\uff0c\u4ee5\u514d\u8fd9\u4e00\u53d8\u5316\u65e0\u610f\u4e2d\u7834\u574f\u4e86\u5386\u53f2\u60a0\u4e45\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u529f\u80fd\u3002\nAndroid 11\u8fd8\u5c06\u6269\u5c55\u8c37\u6b4c\u7684\u201c\u4e3b\u7ebf\u9879\u76ee\u201d(Project Mainline)\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u5229\u7528\u8c37\u6b4cPlay\u670d\u52a1(Google Play Services)\u76f4\u63a5\u5411\u7528\u6237\u8bbe\u5907\u63d0\u4f9b\u5173\u952e\u5b89\u5168\u8865\u4e01\u7b49\u4e3b\u7ebf\u8f6f\u4ef6\u66f4\u65b0\uff0c\u800c\u4e0d\u5fc5\u7b49\u5f85\u6bcf\u5bb6\u5236\u9020\u5546\u4e3a\u5176\u8bbe\u5907\u91cf\u8eab\u5b9a\u505a\u66f4\u65b0\u3002Android\u7684\u53bb\u4e2d\u5fc3\u5316\u3001\u9002\u5e94\u6027\u662f\u5176\u6838\u5fc3\u548c\u53d7\u4eba\u559c\u7231\u7684\u5c5e\u6027\u4e4b\u4e00\u3002\u4f46\u5b83\u9650\u5236\u4e86\u8c37\u6b4c\u96c6\u4e2d\u53d1\u5e03\u91cd\u8981\u66f4\u65b0\u7684\u80fd\u529b\u3002\nProject Mainline\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5c06Android\u64cd\u4f5c\u7cfb\u7edf\u6982\u5ff5\u6027\u5730\u62c6\u5206\u6210\u5757\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u5757\u521b\u5efa\u57fa\u7840\u8bbe\u65bd\uff0c\u4ee5\u4fbf\u901a\u8fc7Google Play Store\u8fdb\u884c\u66f4\u65b0\u3002\u5728Android 10\u4e2d\uff0c\u8c37\u6b4c\u9996\u6b21\u63a8\u51fa\u4e8610\u4e2a\u53ef\u4ee5\u63a5\u6536\u66f4\u65b0\u7684\u6a21\u5757\u3002Android 11\u5c06\u518d\u589e\u52a012\u4e2a\u6a21\u5757\uff0c\u5305\u62ec\u4e00\u4e2a\u6743\u9650\u6a21\u5757\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7528\u4e8eAndroid\u7684\u8303\u56f4\u5b58\u50a8\u529f\u80fd\u7684\u6a21\u5757\uff0c\u8be5\u529f\u80fd\u5728Android 11\u4e2d\u53d8\u5f97\u5f3a\u5236\u6027\uff0c\u9650\u5236\u4e86\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5728\u7528\u6237\u8bbe\u5907\u4e0a\u8bbf\u95ee\u6570\u636e\u7684\u8303\u56f4\u3002\u4e3a\u4e86\u5e94\u5bf9\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\uff0c\u8c37\u6b4c\u8fd8\u4f7f\u7528Mainline\u53d1\u5e03\u4e86\u65b0\u7684\u8054\u7cfb\u4eba\u8ffd\u8e2a\u6846\u67b6\u3002\nAndroid\u5e73\u53f0\u5b89\u5168\u4ea7\u54c1\u4e3b\u7ba1\u65af\u8482\u82ac\u00b7\u7d22\u83ab\u5409(Stephan Somogyi)\u8868\u793a\uff0c\u4ece\u8868\u9762\u4e0a\u770b\uff0cProject Mainline\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u5e73\u51e1\u3002\u4f46\u4e8b\u5b9e\u662f\uff0c\u6211\u4eec\u6709\u80fd\u529b\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u8fd9\u8bc1\u660e\u4e86\u6211\u4eec\u591a\u5e74\u6765\u5bf9\u5efa\u7b51\u7684\u6df1\u601d\u719f\u8651\u662f\u503c\u5f97\u7684\u3002Mainline\u548c\u6211\u4eecMainline\u7684\u7ba1\u9053\u7cfb\u7edf\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u80dc\u5229\u3002\n\u7d22\u83ab\u5409\u8868\u793a\uff0cAndroid\u8fc7\u53bb90\u5929\u7684\u5b89\u5168\u8865\u4e01\u4f7f\u7528\u91cf\u6570\u636e\u5448\u7a33\u6b65\u4e0a\u5347\u8d8b\u52bf\u3002\u73b0\u5728\u6709\u8fd11000\u6b3eAndroid\u8bbe\u5907\u6bcf\u6708\u6216\u81f3\u5c11\u6bcf\u5b63\u5ea6\u8fdb\u884c\u4e00\u6b21\u5b89\u5168\u66f4\u65b0\u3002\u8fd9\u4e9b\u8bbe\u5907\u73b0\u5728\u7ea6\u5360Android\u603b\u4eba\u53e3\u768490%\u3002\n\u8003\u8651\u5230\u82f9\u679c\u591a\u5e74\u6765\u5728iOS\u4e0a\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u96c6\u4e2d\u66f4\u65b0\u548c\u5e7f\u6cdb\u91c7\u7528\u65b0\u7248\u672c\uff0c\u4eba\u4eec\u80af\u5b9a\u5f88\u5bb9\u6613\u611f\u89c9\u5230Project Mainline\u6765\u5f97\u592a\u665a\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u8fd9\u4e00\u529f\u80fd\u662fAndroid\u5e73\u8861\u5176\u81ea\u7531\u548c\u5f00\u6e90\u6839\u6e90\u4e0e\u66f4\u597d\u5730\u83b7\u53d6\u6025\u9700\u7684\u4fdd\u62a4\u6027\u66f4\u65b0\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5b83\u53ef\u80fd\u4f1a\u6539\u53d8Android\u6574\u4f53\u5b89\u5168\u7684\u6e38\u620f\u89c4\u5219\u3002\n\u8c37\u6b4c\u7684Android\u6d4b\u8bd5\u7248\u5bf9\u4efb\u4f55\u4eba\u90fd\u662f\u5f00\u653e\u7684\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bbf\u95eeAndroid 11\u7248\u672c\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6d4b\u8bd5\u7248\u4e0d\u662f\u7a33\u5b9a\u7684\u6700\u7ec8\u7248\u672c\uff0c\u53ef\u80fd\u4f1a\u6709\u9519\u8bef\u6216\u5bfc\u81f4\u95ee\u9898\u3002\u5982\u679c\u4f60\u613f\u610f\u7b49\u51e0\u4e2a\u6708\uff0cAndroid 11\u7684\u5b89\u5168\u548c\u9690\u79c1\u6539\u8fdb\u5c06\u57289\u6708\u4efd\u6b63\u5f0f\u4eae\u76f8\u3002\n\u4e0d\u80fd\u51fa\u53bb\u6297\u8bae\u5417\uff1f\u4ee5\u4e0b\u662f\u5982\u4f55\u5728\u5bb6\u4e2d\u63d0\u4f9b\u5e2e\u52a9\u7684\u65b9\u6cd5\u3002\n\ud83d\udc41\u5927\u8111\u662f\u4eba\u5de5\u667a\u80fd\u7684\u6709\u7528\u6a21\u578b\u5417\uff1f\u53e6\u5916\uff1a\u83b7\u53d6\u6700\u65b0\u7684\u4eba\u5de5\u667a\u80fd\u65b0\u95fb\u3002\n\ud83c\udfa7\u4e8b\u60c5\u542c\u8d77\u6765\u4e0d\u592a\u5bf9\u52b2\uff1f\u67e5\u770b\u6211\u4eec\u6700\u559c\u6b22\u7684\u65e0\u7ebf\u8033\u673a\u3001\u97f3\u68d2\u548c\u84dd\u7259\u626c\u58f0\u5668", "note_en": "With 2.5 billion users worldwide, Google has a responsibility to make its Android operating system as secure as possible. But the company has  at times struggled to adequately vet apps in the Google Play Store, allowing malicious programs through that thousands or millions of users go on to download. With Google&#39;s release of the Android 11 Beta on Wednesday, though, the company is taking steps to make it even more difficult for rogue apps to grab your data even when they do slip by.\n Google has worked  for years to incrementally tighten Android security under the hood. And the release of Android 11 is particularly focused on expanding privacy  improvements to give you more control over what your apps can access and giving more ways to distribute software updates across Android&#39;s fragmented and disjointed device population.\n Android 10 addressed some of this as well, requiring that app developers request permissions and then reaffirm user choices more often. Android 11 adds a feature that allows developer to request one-time permissions for things like the microphone, camera, or location as an alternative to all or nothing. You can share your location with a friend through a chat app once, for example, without granting indefinite location access, or having to remember to wade back into settings to revoke the permission later.\n  &#34;We can see that people are actually leveraging these features from Android 10 and thinking about their choices when they\u2019re giving apps access to permissions,&#34; says Charmaine D&#39;Silva, an Android product manager who works on privacy. &#34;So building on that this time we\u2019ve added even more controls.&#34;\n Android 11 will also rein in apps that you don&#39;t use very often, automatically revoking permissions if you don&#39;t open it for a still undetermined period of time. If you start using the app again you can always reinstate its access, but the permission won&#39;t be lurking forgotten. Google plans to experiment with different cutoffs after 60-90 days, with the goal of eliminating stray permissions without breaking functionality.\n  &#34;We\u2019ve seen in our data that people have a lot of apps on their devices that they may have used a couple of times and then forgot about,&#34; D&#39;Silva says. &#34;They don\u2019t uninstall it because they don\u2019t have a need to, but the app still has permissions associated with it. So this new feature is a permissions auto-reset\u2014sort of a hygiene check.&#34;\n  Beginning with apps that debut after Android 11, the permission auto-reset feature will be on by default and something for developers to factor into their plans. Existing apps for Android 10 and below won&#39;t have the feature on by default, but users will still be able to toggle a control to turn it on. Google says that eventually it wants to turn permission auto-reset on bey default for almost every app, but the company wants to ease in so the change doesn&#39;t inadvertently break functionality for longstanding apps.\n Android 11 will also see an expansion of Google&#39;s Project Mainline program, which uses Google Play Services to &#34;mainline&#34; software updates like critical security patches directly to users&#39; devices rather than having to wait for each individual manufacturer to tailor an update for their devices. Android&#39;s decentralized, adaptable nature is one of its core and beloved attributes. But it has limited Google&#39;s ability to centrally distribute important updates.\n Project Mainline works by conceptually breaking the Android operating system into chunks and creating the infrastructure for each of those chunks to be updated through the Google Play Store. In Android 10, Google debuted 10 of these modules that could receive updates. Android 11 will add 12 more, including a permissions module, and one for Android&#39;s Scoped Storage feature, which is becoming mandatory in Android 11 and limits the &#34;scope&#34; or extent of what data apps can access on a user&#39;s device. In response to the Covid-19 pandemic, Google also used Mainline to distribute its new  contact tracing framework.\n  &#34;On the surface Project Mainline could appear mundane,&#34; says Stephan Somogyi, product lead for Android platform security. &#34;But the fact is our ability to do that validates years worth of architectural contemplation. Mainline and our plumbing of Mainline is actually a big win.&#34;\n Somogyi says that Android&#39;s stats on uptake of security patches in the previous 90 days are on a steady upward curve. There are now almost 1,000 Android device models that get security updates once a month or at least once a quarter. And those devices now make up about 90 percent of the total Android population.\n Given that one of Apple&#39;s biggest strengths for years with iOS has been centralized updates and widespread adoption of new releases, it&#39;s certainly easy to feel that Project Mainline is coming far too late. But if the feature is a way for Android to balance its free and open source roots with better access to much needed protective updates it could be a game changer for overall Android security.\n Google&#39;s Android Betas are open for anyone to try; you can access the Android 11 release  here. Just keep in mind that betas aren&#39;t the stable final release and could have bugs or cause problems. If you&#39;re comfortable waiting a few months, the security and privacy improvements of Android 11 will officially debut in September.\n   Can\u2019t go out and protest?  Here\u2019s how to help from home\n    \ud83d\udc41 Is the brain a  useful model for AI? Plus:  Get the latest AI news\n \ud83c\udfa7 Things not sounding right? Check out our favorite  wireless headphones,  soundbars, and  Bluetooth speakers", "posttime": "2020-06-11 01:56:24", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7a0b\u5e8f,android,app,\u63a7\u5236,zombie", "title": "Android 11\u5c06\u5e2e\u52a9\u60a8\u63a7\u5236\u50f5\u5c38\u5e94\u7528\u7a0b\u5e8f\u6743\u9650", "title_en": "Android 11 Will Help You Rein In Zombie App Permissions", "transed": 1, "url": "https://www.wired.com/story/android-11-security-permissions-updates/", "via": "", "real_tags": ["\u7a0b\u5e8f", "android", "app", "\u63a7\u5236", "zombie"]}, {"category": "", "categoryclass": "", "imagename": "9b208d69c46f6405daa00e51e9dd9cf8.jpg", "infoid": 1006040, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5e38\u88ab\u9057\u5fd8\u7684\u8fb9\u7f18\u60c5\u51b5\uff0c\u7f51\u7ad9\u5fd8\u8bb0\u6807\u51c6\u5316\u4e3b\u673a\u540d\uff0c\u5185\u5bb9\u4ecd\u5728\u63d0\u4f9b\uff0c\u4f46\u6d4f\u89c8\u5668\u4e0a\u6ca1\u6709\u5339\u914d\u7684\u4e3b\u673a\u540d\uff0c\u56e0\u6b64\u6ca1\u6709cookie\u548c\u635f\u574f\u7684COR-\u800c\u4e14\u8bb8\u591a\u8f83\u5927\u7684\u7f51\u7ad9\u4f7f\u7528\u4e0d\u540c\u7684\u57df\u540d\u6765\u63d0\u4f9b\u5e7f\u544a/\u5a92\u4f53\uff0c\u767d\u540d\u5355\u4e2d\u4e0d\u5305\u542b\u989d\u5916\u7684\u70b9", "note_en": "It&#39;s a commonly forgotten edge case, websites forget to normalize the hostname, the content is still served, but there&#39;s no hostname match on the browser so no cookies and broken CORS - and lots of bigger sites use a different domain to serve ads/media with a whitelist that doesn&#39;t contain the extra dot", "posttime": "2020-06-11 01:55:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e7f\u544a,\u57df\u540d,youtube,\u4e3b\u673a\u540d", "title": "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u57df\u540d\u540e\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6765\u7ed5\u8fc7YouTube\u5e7f\u544a", "title_en": "You can bypass YouTube ads by adding a dot after the domain", "transed": 1, "url": "https://www.reddit.com/r/webdev/comments/gzr3cq/fyi_you_can_bypass_youtube_ads_by_adding_a_dot/", "via": "", "real_tags": ["\u5e7f\u544a", "\u57df\u540d", "youtube", "\u4e3b\u673a\u540d"]}, {"category": "", "categoryclass": "", "imagename": "644f16d21b1d3ead9d420ebb31855490.jpeg", "infoid": 1006039, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f88\u591a\u65b0\u624b\u5f00\u53d1\u4eba\u5458\u7ecf\u5e38\u5ffd\u7565\u7684\u4e00\u4ef6\u4e8b\u662f\u4ed6\u4eec\u63d0\u4ea4\u6d88\u606f\u7684\u683c\u5f0f\u3002\u683c\u5f0f\u6b63\u786e\u7684\u63d0\u4ea4\u6d88\u606f\u4e0d\u4ec5\u4ec5\u662f\u770b\u8d77\u6765\u6574\u6d01\uff0c\u8fd8\u53ef\u4ee5\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a\n\u4e3a\u4ee3\u7801\u5ba1\u67e5\u8005\u63d0\u4f9b\u4e0a\u4e0b\u6587\uff1a\u4e00\u4e2a\u597d\u7684\u63d0\u4ea4\u6d88\u606f\u4e3a\u5ba1\u67e5\u8005\u63d0\u4f9b\u5173\u4e8e\u63d0\u4ea4\u5b9e\u73b0\u4e86\u4ec0\u4e48\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u9664\u975e\u4ed6\u4eec\u6b63\u5728\u5bfb\u627e\u7ec6\u8282\uff0c\u5426\u5219\u4ed6\u4eec\u4e0d\u9700\u8981\u6df1\u5165\u7814\u7a76\u4ee3\u7801\u3002\u8fd9\u4e3a\u5ba1\u67e5\u8fc7\u7a0b\u8282\u7701\u4e86\u5927\u91cf\u65f6\u95f4\u3002\n\u5e2e\u52a9\u7ef4\u62a4\u529f\u80fd\u65e5\u5fd7\uff1a\u5728\u53d1\u5e03\u4e4b\u524d\u7f16\u5199\u7248\u672c\u8bf4\u660e\u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u901a\u5e38\u53ef\u4ee5\u5feb\u901f\u67e5\u770b\u63d0\u4ea4\u6d88\u606f\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u4ee5\u5168\u9762\u4e86\u89e3\u81ea\u4e0a\u6b21\u53d1\u5e03\u4ee5\u6765\u6dfb\u52a0/\u5220\u9664/\u4fee\u6539\u7684\u529f\u80fd\u3002\n\u63d0\u4f9b\u77e5\u8bc6\u4f20\u6388\uff1a\u5927\u591a\u6570\u9879\u76ee\u6d89\u53ca\u591a\u4e2a\u4eba/\u56e2\u961f\uff0c\u4ece\u4e8b\u4e0d\u540c\u7684\u529f\u80fd\u3002\u6bcf\u4e2a\u5b9e\u4f53\u901a\u5e38\u5728\u5176\u672c\u5730\u5206\u652f\u4e0a\u5de5\u4f5c\uff0c\u5b83\u4eec\u5b9a\u671f\u4e0e\u4e3b\u5206\u652f\u4e00\u8d77\u91cd\u65b0\u5efa\u7acb\u57fa\u7840\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u9002\u5f53\u7684\u63d0\u4ea4\u6d88\u606f\u5168\u9762\u4e86\u89e3\u5176\u4ed6\u5408\u4f5c\u8005\u5b9e\u73b0\u7684\u4ee3\u7801\u66f4\u6539\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u5f00\u53d1\u4eba\u5458\u5728\u4ea4\u53c9\u901a\u4fe1\u4e2d\u82b1\u8d39\u7684\u65f6\u95f4\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u4e00\u4e2a\u597d\u7684\u63d0\u4ea4\u6d88\u606f\u7684\u539f\u56e0\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u5728\u5236\u4f5c\u63d0\u4ea4\u6d88\u606f\u65f6\uff0c\u6709\u4e00\u4e9b\u8981\u70b9\u9700\u8981\u7262\u8bb0\uff0c\u5982\u4e0b\u6240\u8ff0\u3002\n\u4f46\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u63d0\u4ea4\u6d88\u606f\u592a\u957f\uff0c\u65e0\u6cd5\u653e\u5165\u4e00\u884c\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u63d0\u4ea4\u6d88\u606f\u62c6\u5206\u6210\u4e3b\u9898\u548c\u6b63\u6587\u3002\u4e3b\u9898\u548c\u6b63\u6587\u4e4b\u95f4\u7528\u7a7a\u884c\u5206\u9694\u3002\u4f8b\u5982,\u3002\n\u5c06\u5e94\u7528\u7a0b\u5e8f\u4f53\u7cfb\u7ed3\u6784\u5207\u6362\u5230MVM\u5c06\u6709\u5185\u5b58\u7ba1\u7406\u95ee\u9898\u7684\u7ec4\u4ef6\u4eceMVP\u8f6c\u6362\u5230MVVM Arch\u3002\n\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u60a8\u53ef\u4ee5\u8ba9\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u9009\u62e9\u67e5\u770b\u5305\u542b\u8be6\u7ec6\u63d0\u4ea4\u6d88\u606f\u7684git\u65e5\u5fd7(\u901a\u8fc7\u4f7f\u7528git log)\u6216\u4ec5\u5305\u542b\u4e3b\u9898\u7684\u65e5\u5fd7(\u901a\u8fc7\u4f7f\u7528git log--Online)\u3002\n\u786e\u4fdd\u4e3b\u9898\u6587\u672c\u6700\u591a\u4fdd\u755950\u4e2a\u5b57\u7b26\u53ef\u4ee5\u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u60f3\u51fa\u4e00\u79cd\u7b80\u77ed\u800c\u7b80\u660e\u7684\u65b9\u5f0f\u6765\u8bf4\u660e\u4ed6\u4eec\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u4ec0\u4e48\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728Github\u4e2d\uff0c\u5982\u679c\u63d0\u4ea4\u4e3b\u9898\u6587\u672c\u8d85\u8fc750\u4e2a\u5b57\u7b26\uff0c\u5219\u4f1a\u6536\u5230\u8b66\u544a\u3002\u5728\u5217\u8868\u89c6\u56fe\u4e2d\uff0c\u5982\u679c\u4e3b\u9898\u8d85\u8fc772\u4e2a\u5b57\u7b26\uff0c\u5219Github\u4f1a\u7528\u7701\u7565\u53f7\u622a\u65ad\u7ed3\u5c3e\u3002\u56e0\u6b64\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u505a\u6cd5\uff0c\u76ee\u6807\u662f\u4e3b\u9898\u884c\u670950\u4e2a\u5b57\u7b26\uff0c\u540c\u65f6\u4e25\u683c\u63a7\u5236\u4e0d\u8d85\u8fc772\u4e2a\u5b57\u7b26\u3002\n\u6240\u6709\u4e3b\u9898\u884c\u90fd\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u5373\u4fee\u590d\u56fe\u50cf\u88c1\u526a\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4fee\u590d\u56fe\u50cf\u88c1\u526a\u95ee\u9898\u3002\u8fd9\u5f80\u5f80\u4f1a\u4f7f\u60a8\u7684\u6d88\u606f\u5728GIT\u65e5\u5fd7\u4e2d\u770b\u8d77\u6765\u66f4\u52a0\u6574\u6d01\u548c\u7edf\u4e00\u3002\n\u5c06\u4ee3\u7801\u4e2d\u7684\u6bcf\u6b21\u63d0\u4ea4\u89c6\u4e3a\u5e94\u7528\u4e8e\u4ee3\u7801\u5e93\u7684\u66f4\u6539\u3002\u4ee3\u7801\u4e2d\u7684\u6bcf\u4e2a\u63d0\u4ea4\u90fd\u7528\u4e8e\u5e94\u7528\u66f4\u6539\u3002\u5f88\u5c11\u6709\u4f8b\u5b50\u662f\u3002\n\u7528\u4e0a\u8ff0\u8bed\u6c14\u5199\u7684\u53e5\u5b50\u88ab\u79f0\u4e3a\u7948\u4f7f\u8bed\u6c14(\u73b0\u5728\u65f6\u6001)\u3002\u8fd9\u4e0e\u6211\u4eec\u5199\u4fe1\u606f\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6307\u793a\u6027\u8bed\u6c14(\u8fc7\u53bb\u65f6)\u3002\u76f8\u5e94\u7684\u4f8b\u5b50\u6709\u3002\nGit\u63d0\u4ea4\u6700\u597d\u7528\u547d\u4ee4\u6027\u8bed\u6c14\u7f16\u5199\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGit\u4f7f\u7528\u547d\u4ee4\u6027\u8bed\u6c14\u6765\u62a5\u544a\u5176\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u770b\u770bgit merge master\u3001git add index.html\u3001git merge Branch 1\u7b49\u547d\u4ee4\u3002\u5373\u4f7f\u5728Github\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u4e5f\u662f\u4ee5\u547d\u4ee4\u6027\u8bed\u6c14\u7f16\u5199\u7684\uff0c\u4f8b\u5982\uff0c\u6765\u81eauser1/user1Branch\u7684\u5408\u5e76\u62c9\u8bf7\u6c42#10\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u6b64\u547d\u4ee4\u6027\u8bed\u6c14\u89c4\u5219\u4ec5\u9002\u7528\u4e8e\u63d0\u4ea4\u6d88\u606f\u7684\u4e3b\u9898\u3002\u4f60\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u8eab\u4f53\u4e2d\u7684\u4efb\u4f55\u65f6\u6001\u3002", "note_en": "One of the things a lot of newbie developers overlook often is the format of their commit messages. Properly formatted commit messages can do so much more than just looking neat, such as:\n Provide context to the code reviewer: A good commit message provides basic information to the reviewer about what the commit achieves, without them needing to dive into the code unless they are looking for specifics. This saves up a lot of time on the review process.\n Help in maintaining a feature log: While writing release notes before shipping, developers can often quickly look at the history of commit messages to have a broad idea of the features added/removed/modified since the last release.\n Provide knowledge transfer: Most projects involve multiple people/teams working on different features. Each entity generally works on their local branch, which they rebase with the master at regular intervals. In such cases, having a broad idea of the code changes implemented by other collaborators via proper commit messages can save a lot of developer time spent in cross-communication.\n  Now that we have seen the &#39;Why&#39; of a good commit message, let us look at the &#39;How&#39;. There are certain points to be kept in mind while crafting a commit message, which is outlined below.\n    But in other cases, where you feel the commit messages are too long to fit in a single line, then split your commit messages into a subject and body. Separate the subject and body by a blank line. For example,\n Switch app architecture  to MVVMConvert components  with memory management issue  from MVP  to MVVM arch\n By doing so, you give other developers the option to see a git log with a detailed commit message (by using  git log) or a log with just the subject (by using  git log --oneline).\n  Ensuring that the subject text remains 50 characters at maximum encourages developers to think of a brief and concise way about what their code implements. By default, in Github, you get a warning if the commit subject text is more than 50 characters. In a list view, if the subject is more than 72 characters, then Github truncates the end with an ellipsis. Hence, it&#39;s considered a good practice to aim for a subject line with 50 characters while keeping a strong check on not exceeding 72 characters.\n  Begin all subject lines with a capital letter, i.e.  Fix image cropping issues instead of  fix image cropping issues. This tends to give your messages a much neater and uniform look in the git log.\n    Think of each commit in your code as a change that is being applied to your codebase. Each commit in your code is used to apply a change. Few examples are\n  Sentences written in the above tone are what is known as the imperative mood(present tense). This is different from how we are tempted to write messages, called the indicative mood(past tense). Corresponding examples are\n  Git commits are better written in an imperative mood since Git by default uses the imperative mood to report its actions. For example, look at commands such as  git merge master,  git add index.html,  git merge branch1. Even actions performed in Github are written in an imperative mood, for example,  Merge pull request #10 from user1/user1branch.\n     Keep in mind that this rule of imperative mood applies only to the subject of the commit message. Feel free to use any tense in the body.", "posttime": "2020-06-11 01:54:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63d0\u4ea4,good,\u4e3b\u9898", "title": "\u5982\u4f55\u7f16\u5199\u597d\u7684Git\u63d0\u4ea4\u6d88\u606f", "title_en": "How to write good Git commit messages", "transed": 1, "url": "https://altcampus.io/blog/how-to-write-good-git-commit-message", "via": "", "real_tags": ["\u63d0\u4ea4", "good", "\u4e3b\u9898"]}, {"category": "", "categoryclass": "", "imagename": "2caf95cc2bb2d43f8f678498974f1fb3.jpeg", "infoid": 1006037, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3b\u677f\u83b7\u5f97\u7684\u7535\u5b50\u90ae\u4ef6\u8fd8\u62ab\u9732\u4e86\u4ee5\u524d\u672a\u62a5\u9053\u7684NSO\u96c6\u56e2\u4ea7\u54c1\u7684\u65b0\u7ec6\u8282\u3002", "note_en": "Emails obtained by Motherboard also reveal new details about previously unreported NSO Group products.", "posttime": "2020-06-11 01:53:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6280\u672f,tech,\u83b7\u5f97", "title": "\u6d1b\u6749\u77f6\u8b66\u5bdf\u5c40\u4ece\u4ee5\u8272\u5217\u7535\u8bdd\u7a83\u542c\u516c\u53f8NSO Group\u83b7\u5f97\u6280\u672f\u6f14\u793a", "title_en": "LAPD Got Tech Demos from Israeli Phone Hacking Firm NSO Group", "transed": 1, "url": "https://www.vice.com/en_us/article/n7wna7/lapd-phone-hacking-nso-group-westbridge", "via": "", "real_tags": ["\u6280\u672f", "tech", "\u83b7\u5f97"]}, {"category": "", "categoryclass": "", "imagename": "23b916b0168b4e4a9f6cc0747a20b0fb.png", "infoid": 1006035, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u8fd0\u884c\u8bb8\u591a\u540e\u7aef\u670d\u52a1\uff0c\u4e3a\u6211\u4eec\u7684\u5ba2\u6237\u63a7\u5236\u9762\u677f\u3001API\u548c\u6211\u4eec\u8fb9\u7f18\u53ef\u7528\u7684\u529f\u80fd\u63d0\u4f9b\u652f\u6301\u3002\u6211\u4eec\u62e5\u6709\u5e76\u8fd0\u8425\u540e\u7aef\u670d\u52a1\u7684\u7269\u7406\u57fa\u7840\u8bbe\u65bd\u3002\u6211\u4eec\u9700\u8981\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\u5728\u670d\u52a1\u4e4b\u95f4\u8def\u7531\u4efb\u610fTCP\u548cUDP\u6d41\u91cf\uff0c\u4e5f\u9700\u8981\u4ece\u8fd9\u4e9b\u6570\u636e\u4e2d\u5fc3\u5916\u90e8\u8def\u7531\u4efb\u610fTCP\u548cUDP\u6d41\u91cf\u3002\n\u4ee5\u524d\uff0c\u8fd9\u4e9b\u540e\u7aef\u670d\u52a1\u7684\u6240\u6709\u6d41\u91cf\u5728\u5230\u8fbe\u53ef\u7528\u5b9e\u4f8b\u4e4b\u524d\u90fd\u4f1a\u7ecf\u8fc7\u591a\u5c42\u6709\u72b6\u6001TCP\u4ee3\u7406\u548cNAT\u3002\u6b64\u89e3\u51b3\u65b9\u6848\u8fd0\u884c\u4e86\u51e0\u5e74\uff0c\u4f46\u968f\u7740\u6211\u4eec\u7684\u53d1\u5c55\uff0c\u5b83\u7ed9\u6211\u4eec\u7684\u670d\u52a1\u548c\u8fd0\u8425\u56e2\u961f\u5e26\u6765\u4e86\u8bb8\u591a\u95ee\u9898\u3002\u6211\u4eec\u7684\u670d\u52a1\u56e2\u961f\u9700\u8981\u5904\u7406\u53ef\u7528\u6027\u4e0b\u964d\u7684\u95ee\u9898\uff0c\u800c\u6211\u4eec\u7684\u8fd0\u8425\u56e2\u961f\u5728\u9700\u8981\u5bf9\u8d1f\u8f7d\u5747\u8861\u670d\u52a1\u5668\u8fdb\u884c\u7ef4\u62a4\u65f6\u9700\u8981\u4ed8\u51fa\u5f88\u5927\u7684\u52aa\u529b\u3002\n\u8003\u8651\u5230\u6211\u4eec\u7684\u6709\u72b6\u6001TCP\u4ee3\u7406\u548cNAT\u89e3\u51b3\u65b9\u6848\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u6709\u51e0\u4e2a\u76ee\u6807\u6765\u66ff\u4ee3\u8d1f\u8f7d\u5e73\u8861\u670d\u52a1\uff0c\u540c\u65f6\u4fdd\u7559\u5728\u6211\u4eec\u81ea\u5df1\u7684\u57fa\u7840\u8bbe\u65bd\u4e0a\uff1a\n\u901a\u8fc7\u5c06\u51b3\u7b56\u8def\u7531\u5230\u76ee\u7684\u670d\u52a1\u5668\u6765\u4fdd\u7559\u6e90IP\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u652f\u6301\u9700\u8981\u5ba2\u6237\u7aefIP\u5730\u5740\u4f5c\u4e3a\u5176\u64cd\u4f5c\u4e00\u90e8\u5206\u7684\u670d\u52a1\u5668\uff0c\u800c\u65e0\u9700X-Forwarded-For\u6807\u5934\u6216\u4ee3\u7406TCP\u6269\u5c55\u7b49\u53d8\u901a\u65b9\u6cd5\u3002\n\u652f\u6301\u540e\u7aef\u8de8\u591a\u4e2a\u673a\u67b6\u548c\u5b50\u7f51\u7684\u67b6\u6784\u3002\u8fd9\u53ef\u4ee5\u9632\u6b62\u73b0\u6709\u7f51\u7edc\u8bbe\u5907\u65e0\u6cd5\u8def\u7531\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u5141\u8bb8\u8fd0\u8425\u56e2\u961f\u5728\u96f6\u505c\u673a\u65f6\u95f4\u5185\u6267\u884c\u7ef4\u62a4\u3002\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u968f\u65f6\u5220\u9664\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u670d\u52a1\u7684\u4efb\u4f55\u8fde\u63a5\u91cd\u7f6e\u6216\u505c\u673a\u3002\n\u4f7f\u7528\u5e38\u89c1\u4e14\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u7684Linux\u5de5\u5177\u548c\u529f\u80fd\u3002Linux\u4e2d\u6709\u5f88\u591a\u975e\u5e38\u9177\u7684\u7f51\u7edc\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u8bd5\u9a8c\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u4e3a\u90a3\u4e9b\u4e3b\u8981\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u64cd\u4f5c\u5458\u4f18\u5316\u4e00\u4e9b\u6700\u4e0d\u4ee4\u4eba\u60ca\u8bb6\u7684\u884c\u4e3a\u3002\n\u8d1f\u8f7d\u5e73\u8861\u5668\u4e4b\u95f4\u6ca1\u6709\u663e\u5f0f\u8fde\u63a5\u540c\u6b65\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u663e\u8457\u589e\u52a0\u4e86\u7cfb\u7edf\u590d\u6742\u6027\uff0c\u4ece\u800c\u589e\u52a0\u4e86\u51fa\u9519\u7684\u673a\u4f1a\u3002\n\u5141\u8bb8\u4ece\u5148\u524d\u7684\u8d1f\u8f7d\u5e73\u8861\u5668\u5b9e\u73b0\u5206\u9636\u6bb5\u90e8\u7f72\u3002\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u4e24\u4e2a\u5b9e\u73b0\u4e4b\u95f4\u8fc1\u79fb\u7279\u5b9a\u670d\u52a1\u7684\u6d41\u91cf\uff0c\u4ee5\u53d1\u73b0\u95ee\u9898\u5e76\u83b7\u5f97\u5bf9\u7cfb\u7edf\u7684\u4fe1\u5fc3\u3002\n\u4ee5\u524d\uff0c\u5f53\u6d41\u91cf\u5230\u8fbe\u6211\u4eec\u7684\u540e\u7aef\u6570\u636e\u4e2d\u5fc3\u65f6\uff0c\u6211\u4eec\u7684\u8def\u7531\u5668\u4f1a\u6311\u9009\u6570\u636e\u5305\u5e76\u5c06\u5176\u8f6c\u53d1\u5230\u5b83\u6240\u77e5\u9053\u7684L4\u8d1f\u8f7d\u5747\u8861\u5668\u670d\u52a1\u5668\u4e4b\u4e00\u3002\u8fd9\u4e9bL4\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u786e\u5b9a\u6d41\u91cf\u7528\u4e8e\u4ec0\u4e48\u670d\u52a1\uff0c\u7136\u540e\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u670d\u52a1\u7684L7\u670d\u52a1\u5668\u4e4b\u4e00\u3002\n\u6b64\u67b6\u6784\u5728\u6b63\u5e38\u8fd0\u884c\u671f\u95f4\u8fd0\u884c\u826f\u597d\u3002\u4f46\u662f\uff0c\u53ea\u8981\u8d1f\u8f7d\u5e73\u8861\u5668\u96c6\u53d1\u751f\u66f4\u6539\uff0c\u95ee\u9898\u5c31\u4f1a\u5f88\u5feb\u6d6e\u51fa\u6c34\u9762\u3002\u6211\u4eec\u7684\u8def\u7531\u5668\u4f1a\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u65b0\u96c6\uff0c\u5e76\u4e14\u6d41\u91cf\u5f88\u53ef\u80fd\u4f1a\u5230\u8fbe\u4e0e\u4ee5\u524d\u4e0d\u540c\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u3002\u7531\u4e8e\u6bcf\u4e2a\u8d1f\u8f7d\u5e73\u8861\u5668\u7ef4\u62a4\u5176\u81ea\u5df1\u7684\u8fde\u63a5\u72b6\u6001\uff0c\u56e0\u6b64\u5b83\u5c06\u65e0\u6cd5\u4e3a\u8fd9\u4e9b\u65b0\u7684\u6b63\u5728\u8fdb\u884c\u7684\u8fde\u63a5\u8f6c\u53d1\u6d41\u91cf\u3002\u7136\u540e\uff0c\u8fd9\u4e9b\u8fde\u63a5\u5c06\u88ab\u91cd\u7f6e\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u6211\u4eec\u7684\u5ba2\u6237\u5e26\u6765\u9519\u8bef\u3002\n\u5728\u6b63\u5e38\u8fd0\u884c\u671f\u95f4\uff0c\u6211\u4eec\u7684\u65b0\u67b6\u6784\u5177\u6709\u4e0e\u4ee5\u524d\u8bbe\u8ba1\u7c7b\u4f3c\u7684\u884c\u4e3a\u3002\u6211\u4eec\u7684\u8def\u7531\u5668\u5c06\u9009\u62e9L4\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u7136\u540e\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u670d\u52a1\u7684L7\u670d\u52a1\u5668\u3002\n\u5f53\u8d1f\u8f7d\u5747\u8861\u5668\u96c6\u5408\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f1a\u53d1\u751f\u91cd\u5927\u53d8\u5316\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u73b0\u5728\u662f\u65e0\u72b6\u6001\u7684\uff0c\u6240\u4ee5\u8def\u7531\u5668\u9009\u62e9\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u54ea\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\u5e76\u4e0d\u91cd\u8981\uff0c\u5b83\u4eec\u6700\u7ec8\u5c06\u5230\u8fbe\u76f8\u540c\u7684\u540e\u7aef\u670d\u52a1\u5668\u3002\n\u6211\u4eec\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u670d\u52a1\u5668\u4f7f\u7528BGP\u5411\u6570\u636e\u4e2d\u5fc3\u7684\u8def\u7531\u5668\u901a\u544a\u670d\u52a1IP\u5730\u5740\uff0c\u4e0e\u4ee5\u524d\u7684\u89e3\u51b3\u65b9\u6848\u76f8\u540c\u3002\u6211\u4eec\u7684\u8def\u7531\u5668\u6839\u636e\u4e00\u79cd\u79f0\u4e3a\u7b49\u4ef7\u591a\u8def\u5f84\u8def\u7531(ECMP)\u7684\u8def\u7531\u7b56\u7565\u6765\u9009\u62e9\u54ea\u4e9b\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u63a5\u6536\u6570\u636e\u5305\u3002\nECMP\u5bf9\u6570\u636e\u5305\u4e2d\u7684\u4fe1\u606f\u8fdb\u884c\u6563\u5217\u5904\u7406\uff0c\u4ee5\u9009\u62e9\u8be5\u6570\u636e\u5305\u7684\u8def\u5f84\u3002\u8def\u7531\u5668\u4f7f\u7528\u7684\u6563\u5217\u51fd\u6570\u901a\u5e38\u56fa\u5b9a\u5728\u56fa\u4ef6\u4e2d\u3002\u9009\u62e9\u4e0d\u826f\u6563\u5217\u51fd\u6570\u6216\u9009\u62e9\u4e0d\u826f\u8f93\u5165\u7684\u8def\u7531\u5668\u53ef\u80fd\u4f1a\u9020\u6210\u7f51\u7edc\u548c\u670d\u52a1\u5668\u8d1f\u8f7d\u5931\u8861\uff0c\u6216\u7834\u574f\u534f\u8bae\u5c42\u7684\u5047\u8bbe\u3002\n\u6211\u4eec\u4e0e\u7f51\u7edc\u56e2\u961f\u5408\u4f5c\uff0c\u786e\u4fdd\u5728\u6211\u4eec\u7684\u8def\u7531\u5668\u4e0a\u914d\u7f6eECMP\uff0c\u4f7f\u5176\u4ec5\u6839\u636e\u6570\u636e\u5305\u76845\u5143\u7ec4(\u534f\u8bae\u3001\u6e90\u5730\u5740\u548c\u7aef\u53e3\u4ee5\u53ca\u76ee\u7684\u5730\u5740\u548c\u7aef\u53e3)\u8fdb\u884c\u6563\u5217\u3002\n\u4e3a\u4e86\u8fdb\u884c\u7ef4\u62a4\uff0c\u6211\u4eec\u7684\u8fd0\u8425\u5546\u53ef\u4ee5\u64a4\u56deBGP\u4f1a\u8bdd\uff0c\u6d41\u91cf\u5c06\u900f\u660e\u5730\u8f6c\u79fb\u5230\u5176\u4ed6\u8d1f\u8f7d\u5747\u8861\u5668\u3002\u4f46\u662f\uff0c\u5982\u679c\u8d1f\u8f7d\u5e73\u8861\u5668\u7a81\u7136\u53d8\u5f97\u4e0d\u53ef\u7528(\u4f8b\u5982\u5185\u6838\u6b7b\u673a\u6216\u7535\u6e90\u6545\u969c)\uff0c\u5219\u5728BGP\u4fdd\u6301\u8fde\u63a5\u673a\u5236\u5931\u8d25\u548c\u8def\u7531\u5668\u7ec8\u6b62\u4f1a\u8bdd\u4e4b\u524d\u4f1a\u6709\u4e00\u6bb5\u77ed\u6682\u7684\u5ef6\u8fdf\u3002\n\u5728\u8def\u7531\u5668\u548c\u8d1f\u8f7d\u5747\u8861\u5668\u4e4b\u95f4\u4f7f\u7528\u53cc\u5411\u8f6c\u53d1\u68c0\u6d4b(BFD)\u534f\u8bae\uff0c\u8def\u7531\u5668\u53ef\u4ee5\u5728\u66f4\u77ed\u7684\u5ef6\u8fdf\u540e\u7ec8\u6b62BGP\u4f1a\u8bdd\u3002\u4e0d\u540c\u7684\u8def\u7531\u5668\u5bf9BFD\u6709\u4e0d\u540c\u7684\u9650\u5236\u548c\u9650\u5236\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5f88\u96be\u5728\u9891\u7e41\u4f7f\u7528L2\u94fe\u8def\u805a\u5408\u548cVXLAN\u7684\u73af\u5883\u4e2d\u4f7f\u7528\u3002\n\u6211\u4eec\u6b63\u5728\u7ee7\u7eed\u4e0e\u6211\u4eec\u7684\u7f51\u7edc\u56e2\u961f\u5408\u4f5c\uff0c\u4f7f\u7528\u4ed6\u4eec\u6700\u719f\u6089\u7684\u5de5\u5177\u548c\u914d\u7f6e\u6765\u5bfb\u627e\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u51cf\u5c11\u7ec8\u6b62BGP\u4f1a\u8bdd\u7684\u65f6\u95f4\u3002\n\u4e3a\u4e86\u786e\u4fdd\u6240\u6709\u8d1f\u8f7d\u5747\u8861\u5668\u90fd\u5c06\u6d41\u91cf\u53d1\u9001\u5230\u76f8\u540c\u7684\u540e\u7aef\uff0c\u6211\u4eec\u51b3\u5b9a\u4f7f\u7528\u78c1\u60ac\u6d6e\u8fde\u63a5\u8c03\u5ea6\u5668\u3002MagLev\u662f\u4e00\u4e2a\u4e00\u81f4\u7684\u6563\u5217\u8c03\u5ea6\u5668\uff0c\u5b83\u5bf9\u6765\u81ea\u6bcf\u4e2a\u6570\u636e\u5305\u76845\u5143\u7ec4\u4fe1\u606f(\u534f\u8bae\u3001\u6e90\u5730\u5740\u548c\u7aef\u53e3\u4ee5\u53ca\u76ee\u7684\u5730\u5740\u548c\u7aef\u53e3)\u8fdb\u884c\u6563\u5217\uff0c\u4ee5\u786e\u5b9a\u540e\u7aef\u670d\u52a1\u5668\u3002\n\u7531\u4e8e\u662f\u4e00\u81f4\u7684\u6563\u5217\uff0c\u6bcf\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\u90fd\u4f1a\u4e3a\u6570\u636e\u5305\u9009\u62e9\u76f8\u540c\u7684\u540e\u7aef\u670d\u52a1\u5668\uff0c\u800c\u4e0d\u9700\u8981\u4fdd\u6301\u4efb\u4f55\u8fde\u63a5\u72b6\u6001\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u900f\u660e\u5730\u5728\u8d1f\u8f7d\u5747\u8861\u5668\u4e4b\u95f4\u79fb\u52a8\u6d41\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u5b83\u4eec\u4e4b\u95f4\u663e\u5f0f\u7684\u8fde\u63a5\u540c\u6b65\u3002\n\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u666e\u901a\u800c\u53ef\u9760\u7684Linux\u529f\u80fd\u3002\u81ea\u672c\u4e16\u7eaa\u521d\u4ee5\u6765\uff0cLinux\u5df2\u7ecf\u5b9e\u73b0\u4e86\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u7b2c4\u5c42\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u5373IP\u865a\u62df\u670d\u52a1\u5668(IPVS)\u3002IPVS\u4eceLinux4.18\u5f00\u59cb\u5c31\u652f\u6301\u78c1\u60ac\u6d6e\u8c03\u5ea6\u5668\u3002\n\u6211\u4eec\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u548c\u5e94\u7528\u670d\u52a1\u5668\u5206\u5e03\u5728\u591a\u4e2a\u673a\u67b6\u548c\u5b50\u7f51\u4e2d\u3002\u4e3a\u4e86\u8def\u7531\u6765\u81ea\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u6d41\u91cf\uff0c\u6211\u4eec\u9009\u62e9\u4f7f\u7528Foo-over-UDP\u5c01\u88c5\u3002\n\u5728foo-over-UDP\u5c01\u88c5\u4e2d\uff0c\u5728\u539f\u59cb\u6570\u636e\u5305\u5468\u56f4\u6dfb\u52a0\u65b0\u7684IP\u548cUDP\u62a5\u5934\u3002\u5f53\u8fd9\u4e9b\u6570\u636e\u5305\u5230\u8fbe\u76ee\u7684\u670d\u52a1\u5668\u65f6\uff0cLinux\u5185\u6838\u4f1a\u5220\u9664\u5916\u90e8IP\u548cUDP\u62a5\u5934\uff0c\u5e76\u5c06\u5185\u90e8\u6709\u6548\u8d1f\u8f7d\u91cd\u65b0\u63d2\u5165\u7f51\u7edc\u5806\u6808\u8fdb\u884c\u5904\u7406\uff0c\u5c31\u597d\u50cf\u6570\u636e\u5305\u6700\u521d\u662f\u5728\u8be5\u670d\u52a1\u5668\u4e0a\u63a5\u6536\u7684\u4e00\u6837\u3002\n\u4e0e\u5176\u4ed6\u5c01\u88c5\u65b9\u6cd5(\u5982IPIP\u3001GUE\u548cGeneve)\u76f8\u6bd4\uff0c\u6211\u4eec\u89c9\u5f97Foo-over-UDP\u5728\u529f\u80fd\u548c\u7075\u6d3b\u6027\u4e4b\u95f4\u53d6\u5f97\u4e86\u5f88\u597d\u7684\u5e73\u8861\u3002\u76f4\u63a5\u670d\u52a1\u5668\u8fd4\u56de(\u5176\u4e2d\u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u5668\u76f4\u63a5\u56de\u590d\u5ba2\u6237\u7aef\u5e76\u7ed5\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668)\u4f5c\u4e3a\u5c01\u88c5\u7684\u526f\u4ea7\u54c1\u5b9e\u73b0\u3002\u6ca1\u6709\u4e0e\u5c01\u88c5\u76f8\u5173\u8054\u7684\u72b6\u6001\uff0c\u6bcf\u53f0\u670d\u52a1\u5668\u53ea\u9700\u8981\u4e00\u4e2a\u5c01\u88c5\u63a5\u53e3\u5373\u53ef\u4ece\u6240\u6709\u8d1f\u8f7d\u5e73\u8861\u5668\u63a5\u6536\u6d41\u91cf\u3002\n#\u52a0\u8f7dIPV\u548cFOU\u6240\u9700\u7684\u5185\u6838\u6a21\u5757\u3002$modProbe IP_VS&amp\uff1b&amp\uff1bmodProbe IP_VS_mh&amp\uff1b&amp\uff1bmodProbe Fou#\u5728\u8d1f\u8f7d\u5747\u8861\u5668\u548c#\u4e00\u4e2a\u5e94\u7528\u670d\u52a1\u5668\u4e4b\u95f4\u521b\u5efa\u4e00\u6761\u96a7\u9053\u3002IP\u5c31\u662f\u673a\u5668&#39\uff1b#\u7f51\u7edc\u4e0a\u7684\u771f\u5b9eIP\u3002$IP link add name lbtun1 type ipip\\remote 192.0.2.1 local 192.0.2.2 ttl 2\\encap fou encap-SPORT auto encap-dport 5555#\u901a\u77e5\u5185\u6838\u6709\u5173\u53ef\u80fd\u5728\u6b64\u5904\u901a\u544a\u7684VIP\u7684\u4fe1\u606f\u3002$IP route add table local local 198.51.100.0/24\\dev lo proto kernel#\u4e3a\u96a7\u9053\u63d0\u4f9b\u6b64\u8ba1\u7b97\u673a\u672c\u5730\u7684IP\u5730\u5740\u3002#\u6b64\u8ba1\u7b97\u673a\u4e0a\u53d1\u5f80\u6b64IP\u5730\u5740\u7684\u901a\u4fe1\u5c06#\u6cbf\u96a7\u9053\u5411\u4e0b\u53d1\u9001\u3002\u5e76\u4e14\u5b83\u5e94\u8be5\u4f7f\u7528#MagLev\u8c03\u5ea6\u7a0b\u5e8f\u3002$ipvsadm-A-t 198.51.100.1\uff1a80-s mh#\u544a\u8bc9IPV\u6b64\u670d\u52a1\u7684\u540e\u7aef\u3002$ipvsadm-a-t 198.51.100.1\uff1a80-r 203.0.113.1\uff1a80\u3002\n#\u53ef\u80fd\u9700\u8981\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u3002$modproto fou#\u8bbe\u7f6eIPIP\u63a5\u6536\u5668\u3002#ipproto 4=IPIP(\u4e0d\u662fIPv4)$ip for add port 5555 ipproto 4#\u542f\u52a8\u96a7\u9053\u3002$ip link set dev tunl0 up#\u5728\u96a7\u9053\u63a5\u53e3\u4e0a\u7981\u7528\u53cd\u5411\u8def\u5f84\u7b5b\u9009\u3002$sysctl-w net.ipv4.conf.tunl0.rp_filter=0$sysctl-w net.ipv4.conf.all.rp_filter=0\u3002\nIPVS\u4e0d\u652f\u6301\u5c06\u57fa\u4e8eUDP\u7684Foo-over-UDP\u4f5c\u4e3a\u6570\u636e\u5305\u8f6c\u53d1\u65b9\u6cd5\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u9650\u5236\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u865a\u62df\u63a5\u53e3\u6765\u5b9e\u73b0foo-over-UDP\u5c01\u88c5\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528IPVS\u7684\u76f4\u63a5\u6570\u636e\u5305\u8f6c\u53d1\u65b9\u6cd5\u548c\u5185\u6838\u8def\u7531\u8868\u6765\u9009\u62e9\u7279\u5b9a\u7684\u63a5\u53e3\u3002\nLinux\u901a\u5e38\u88ab\u914d\u7f6e\u4e3a\u5ffd\u7565\u5230\u8fbe\u4e0e\u7528\u4e8e\u5e94\u7b54\u7684\u63a5\u53e3\u4e0d\u540c\u7684\u63a5\u53e3\u7684\u6570\u636e\u5305\u3002\u7531\u4e8e\u6570\u636e\u5305\u73b0\u5728\u5c06\u5230\u8fbe\u865a\u62dfTunl0&34\uff1b\u63a5\u53e3\uff0c\u6211\u4eec\u9700\u8981\u5728\u6b64\u63a5\u53e3\u4e0a\u7981\u7528\u53cd\u5411\u8def\u5f84\u8fc7\u6ee4\u3002\u5185\u6838\u4f7f\u7528\u547d\u540d\u63a5\u53e3\u548c\u6240\u6709\u63a5\u53e3\u4e2d\u8f83\u9ad8\u7684\u503c\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u9700\u8981\u51cf\u5c11&#34\uff1b\u6240\u6709&#34\uff1b\u5e76\u8c03\u6574\u5176\u4ed6\u63a5\u53e3\u3002\n\u6211\u4eec\u4ece\u4e92\u8054\u7f51\u63a5\u53d7\u7684\u6700\u5927IPv4\u6570\u636e\u5305\u5927\u5c0f\u6216\u6700\u5927\u4f20\u8f93\u5355\u4f4d(MTU)\u662f1500\u5b57\u8282\u3002\u4e3a\u4e86\u786e\u4fdd\u6211\u4eec\u5728\u5c01\u88c5\u671f\u95f4\u4e0d\u4f1a\u5bf9\u8fd9\u4e9b\u6570\u636e\u5305\u8fdb\u884c\u5206\u6bb5\uff0c\u6211\u4eec\u5c06\u5185\u90e8MTU\u4ece\u9ed8\u8ba4\u503c\u589e\u52a0\uff0c\u4ee5\u9002\u5e94IP\u548cUDP\u62a5\u5934\u3002\n\u56e2\u961f\u4f4e\u4f30\u4e86\u5728\u6211\u4eec\u6240\u6709\u7684\u8bbe\u5907\u673a\u67b6\u4e0a\u66f4\u6362MTU\u7684\u590d\u6742\u6027\u3002\u6211\u4eec\u5fc5\u987b\u8c03\u6574\u6240\u6709\u8def\u7531\u5668\u548c\u4ea4\u6362\u673a\u7684MTU\uff0c\u8c03\u6574\u7ed1\u5b9a\u548cVXLAN\u63a5\u53e3\u7684MTU\uff0c\u6700\u540e\u8c03\u6574\u6211\u4eec\u7684FOO-Over-UDP\u5c01\u88c5\u3002\u5373\u4f7f\u7ecf\u8fc7\u7cbe\u5fc3\u7b56\u5212\u7684\u63a8\u5e7f\uff0c\u6211\u4eec\u4ecd\u7136\u53d1\u73b0\u4e86\u4ea4\u6362\u673a\u548c\u670d\u52a1\u5668\u5806\u6808\u4e2d\u4e0eMTU\u76f8\u5173\u7684\u9519\u8bef\uff0c\u5176\u4e2d\u8bb8\u591a\u9519\u8bef\u9996\u5148\u8868\u73b0\u4e3a\u7f51\u7edc\u5176\u4ed6\u90e8\u5206\u7684\u95ee\u9898\u3002\n\u6211\u4eec\u7f16\u5199\u4e86\u4e00\u4e2a\u8fd0\u884c\u5728\u6bcf\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\u4e0a\u7684GO\u4ee3\u7406\uff0c\u5b83\u4e0e\u8ddf\u8e2a\u670d\u52a1\u4f4d\u7f6e\u7684\u63a7\u5236\u5e73\u9762\u5c42\u540c\u6b65\u3002\u7136\u540e\uff0c\u4ee3\u7406\u6839\u636e\u6d3b\u52a8\u670d\u52a1\u548c\u53ef\u7528\u7684\u540e\u7aef\u670d\u52a1\u5668\u914d\u7f6e\u7cfb\u7edf\u3002\n\u4e3a\u4e86\u914d\u7f6eIPV\u548c\u8def\u7531\u8868\uff0c\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u57fa\u4e8eNetLink Go\u5305\u6784\u5efa\u7684\u5305\u3002\u6211\u4eec\u91cd\u65b0\u5f00\u6e90\u4e86\u6211\u4eec\u4eca\u5929\u6784\u5efa\u7684IPVS NetLink\u5305\uff0c\u5b83\u652f\u6301\u67e5\u8be2\u3001\u521b\u5efa\u548c\u66f4\u65b0IPVS\u865a\u62df\u670d\u52a1\u5668\u3001\u76ee\u7684\u5730\u548c\u7edf\u8ba1\u6570\u636e\u3002\n\u4e0d\u5e78\u7684\u662f\uff0ciptables\u6ca1\u6709\u6b63\u5f0f\u7684\u7f16\u7a0b\u63a5\u53e3\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u6539\u4e3a\u6267\u884ciptables\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4ee3\u7406\u8ba1\u7b97\u4e00\u7ec4\u7406\u60f3\u7684iptables\u94fe\u548c\u89c4\u5219\uff0c\u7136\u540e\u5c06\u5176\u4e0e\u6d3b\u52a8\u89c4\u5219\u8fdb\u884c\u534f\u8c03\u3002\n*filter-A input-d 198.51.100.0/24-m COMMENT--COMMENT\\&#34\uff1bLEIF\uff1anhAi5v93jwQYcJuK&#34\uff1b-j LEIFR-LB-A LEIFR-LB-d 198.51.100.1/32-p TCP-m COMMENT--COMMENT\\&#34\uff1bLEIF\uff1aG4qtNUVFCkLCu4yt&#34\uff1b-m multiport-dports 80-j Leiport\u3002-j Accept-A Leiur-GQ4OKHRLCJYOWIN9-s 172.16.0.0/12-m COMMENT--COMMENT\\&#34\uff1bLEIF\uff1a0XxZ2OwlQWzIYFTD&#34\uff1b-j Accept\u3002\n\u89c4\u5219\u7684iptables\u8f93\u51fa\u53ef\u80fd\u4e0e\u7406\u60f3\u89c4\u5219\u63d0\u4f9b\u7684\u8f93\u5165\u6709\u5f88\u5927\u4e0d\u540c\u3002\u4e3a\u4e86\u907f\u514d\u5728\u6bd4\u8f83\u4e2d\u89e3\u6790\u6574\u4e2aiptables\u89c4\u5219\uff0c\u6211\u4eec\u5c06\u89c4\u5219\u7684\u6563\u5217(\u5305\u62ec\u94fe\u4e2d\u7684\u4f4d\u7f6e)\u5b58\u50a8\u4e3aiptables\u6ce8\u91ca\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6ce8\u91ca\u4e0e\u7406\u60f3\u89c4\u5219\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u786e\u5b9a\u662f\u5426\u9700\u8981\u91c7\u53d6\u4efb\u4f55\u64cd\u4f5c\u3002\u5728\u5171\u4eab\u7684\u94fe(\u5982\u8f93\u5165)\u4e0a\uff0c\u4ee3\u7406\u5ffd\u7565\u975e\u6258\u7ba1\u89c4\u5219\u3002\n\u6211\u4eec\u4f7f\u7528\u8fd9\u91cc\u4ecb\u7ecd\u7684\u7f51\u7edc\u8d1f\u8f7d\u5747\u8861\u4f5c\u4e3aKubernetes\u7684\u8d1f\u8f7d\u5747\u8861\u3002\u63a7\u5236\u5668\u4e3a\u8bf7\u6c42\u8d1f\u8f7d\u5747\u8861IP\u7684Kubernetes\u670d\u52a1\u5206\u914d\u865a\u62dfIP\u5730\u5740\u3002\u8fd9\u4e9bIP\u7531\u4ee3\u7406\u5728IPVS\u4e2d\u914d\u7f6e\u3002\u6d41\u91cf\u5c06\u5b9a\u5411\u5230\u7fa4\u96c6\u8282\u70b9\u7684\u5b50\u96c6\uff0c\u7531Kube-Proxy\u5904\u7406\uff0c\u9664\u975e\u5916\u90e8\u6d41\u91cf\u7b56\u7565\u8bbe\u7f6e\u4e3a&#34\uff1bLocal&#34\uff1b\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6d41\u91cf\u5c06\u53d1\u9001\u5230\u8fd0\u884c\u5de5\u4f5c\u8d1f\u8f7d\u7684\u7279\u5b9a\u540e\u7aef\u3002\n\u8fd9\u5141\u8bb8\u6211\u4eec\u62e5\u6709\u5185\u90e8Kubernetes\u96c6\u7fa4\uff0c\u66f4\u597d\u5730\u590d\u5236\u4e91\u63d0\u4f9b\u5546\u4e0a\u6258\u7ba1\u96c6\u7fa4\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u884c\u4e3a\u3002\u8fd0\u884cKubernetes\u7684\u670d\u52a1(\u5982\u5165\u53e3\u63a7\u5236\u5668\u3001API\u7f51\u5173\u548c\u6570\u636e\u5e93)\u53ef\u4ee5\u8bbf\u95ee\u8d1f\u8f7d\u5747\u8861\u6d41\u91cf\u7684\u6b63\u786e\u5ba2\u6237\u7aefIP\u5730\u5740\u3002\n\u7ee7\u7eed\u5bc6\u5207\u5173\u6ce8IPV\u548c\u66ff\u4ee3\u65b9\u6848\u7684\u672a\u6765\u53d1\u5c55\uff0c\u5305\u62ecnftlb\u548cExpress data path(XDP)\u4ee5\u53caeBPF\u3002\n\u8fc1\u79fb\u5230nftables\u3002\u5355\u4e00\u7684\u4f18\u5148\u7ea7\u548c\u7f3a\u4e4fiptables\u7684\u53ef\u7f16\u7a0b\u63a5\u53e3\u4f7f\u5f97\u5b83\u4e0d\u9002\u5408\u5c06\u81ea\u52a8\u89c4\u5219\u4e0e\u64cd\u4f5c\u5458\u6dfb\u52a0\u7684\u89c4\u5219\u4e00\u8d77\u5305\u542b\u3002\u6211\u4eec\u5e0c\u671b\u968f\u7740\u66f4\u591a\u7684\u9879\u76ee\u548c\u8fd0\u8425\u8f6c\u79fb\u5230nftable\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u5728\u4e0d\u9020\u6210\u8fd0\u8425\u76f2\u70b9\u7684\u60c5\u51b5\u4e0b\u5207\u6362\u5230nftable\u3002\n\u7531\u4e8eBGP\u4fdd\u7559\u8ba1\u65f6\u5668\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u6545\u969c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e34\u65f6\u4e2d\u65ad\u3002\u6211\u4eec\u5e0c\u671b\u6539\u8fdb\u6211\u4eec\u5904\u7406BGP\u4f1a\u8bdd\u6545\u969c\u7684\u65b9\u5f0f\u3002\n\u7814\u7a76\u4f7f\u7528\u8f7b\u91cf\u7ea7\u96a7\u9053\u6765\u51cf\u5c11\u8d1f\u8f7d\u5747\u8861\u5668\u8282\u70b9\u4e0a\u9700\u8981\u7684foo-over-UDP\u63a5\u53e3\u6570\u3002\n\u4f7f\u7528Linux\u5b9e\u73b0\u591a\u5c42\u8d1f\u8f7d\u5747\u8861\u3002\u6587\u68ee\u7279\u00b7\u4f2f\u7eb3\u7279(2018)\u3002\u63cf\u8ff0\u4f7f\u7528IPVS\u548cIPIP\u7684\u7f51\u7edc\u8d1f\u8f7d\u5e73\u8861\u5668\u3002\n\u4ecb\u7ecdGitHub\u8d1f\u8f7d\u5747\u8861\u5668\u3002\u4e54\u00b7\u5a01\u5ec9\u59c6\u65af\uff0c\u897f\u5965\u00b7\u6731\u5229\u5b89(2017)\u3002\u63cf\u8ff0\u4e86\u7c7b\u4f3c\u7684\u62c6\u5206\u7b2c4\u5c42\u548c\u7b2c7\u5c42\u67b6\u6784\uff0c\u4f7f\u7528\u4e00\u81f4\u7684\u54c8\u5e0c\u548cUDP\u4e0a\u7684Foo-over-UDP\u3002\u4ed6\u4eec\u4f3c\u4e4e\u5bf9IPV\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u8fd9\u4e9b\u9650\u5236\u4f3c\u4e4e\u5df2\u7ecf\u89e3\u51b3\u4e86\u3002\nFOO OVER UDP\u3002\u4e54\u7eb3\u68ee\u00b7\u79d1\u6bd4\u7279(2014)\u3002\u63cf\u8ff0IPIP\u548c\u5f53\u65f6\u521a\u521a\u4ecb\u7ecd\u7684foo-over-UDP\u7684\u57fa\u7840\u77e5\u8bc6\u3002\nUDP\u5c01\u88c5\u3001FOU\u3001GUE\u548cRCO\u3002\u6c64\u59c6\u00b7\u8d6b\u4f2f\u7279(2015)\u3002\u4ecb\u7ecd\u4e0d\u540c\u7684UDP\u5c01\u88c5\u9009\u9879\u3002\nBFD(\u53cc\u5411\u8f6c\u53d1\u68c0\u6d4b)\uff1a\u6709\u6548\u5417\uff1f\u503c\u5f97\u5417\uff1f\u6c64\u59c6\u5b66\u6821(2009)\u3002\u8ba8\u8bba\u4f7f\u7528\u901a\u7528\u534f\u8bae\u7684BFD\uff0c\u4ee5\u53ca\u5b83\u5728\u54ea\u91cc\u4f1a\u6210\u4e3a\u95ee\u9898\u3002\n\u8d1f\u8f7d\u5e73\u8861\u78c1\u60ac\u6d6e\u53ef\u7528\u6027", "note_en": "We run many backend services that power our customer dashboard, APIs, and features available at our edge. We own and operate physical infrastructure for our backend services. We need an effective way to route arbitrary TCP and UDP traffic between services and also from outside these data centers.\n Previously, all traffic for these backend services would pass through several layers of stateful TCP proxies and NATs before reaching an available instance. This solution worked for several years, but as we grew it caused our service and operations teams many issues. Our service teams needed to deal with drops of availability, and our operations teams had much toil when needing to do maintenance on load balancer servers.\n  With the experience with our stateful TCP proxy and NAT solutions in mind, we had several goals for a replacement load balancing service, while remaining on our own infrastructure:\n Preserve source IPs through routing decisions to destination servers. This allows us to support servers that require client IP addresses as part of their operation, without workarounds such as X-Forwarded-For headers or the PROXY TCP extension.\n Support an architecture where backends are located across many racks and subnets. This prevents solutions that cannot be routed by existing network equipment.\n Allow operation teams to perform maintenance with zero downtime. We should be able to remove load balancers at any time without causing any connection resets or downtime for services.\n Use Linux tools and features that are commonplace and well-tested. There are a lot of very cool networking features in Linux we could experiment with, but we wanted to optimize for least surprising behavior for operators who do not primarily work with these load balancers.\n No explicit connection synchronization between load balancers. We found that communication between load balancers significantly increased the system complexity, allowing for more opportunities for things to go wrong.\n Allow for staged rollout from the previous load balancer implementation. We should be able to migrate the traffic of specific services between the two implementations to find issues and gain confidence in the system.\n    Previously, when traffic arrived at our backend data centers, our routers would pick and forward packets to one of the L4 load balancers servers it knew about. \u00a0These L4 load balancers would determine what service the traffic was for, then forward the traffic to one of the service&#39;s L7 servers.\n This architecture worked fine during normal operations. However, issues would quickly surface whenever the set of load balancers changed. Our routers would forward traffic to the new set and it was very likely traffic would arrive to a different load balancer than before. As each load balancer maintained its own connection state, it would be unable to forward \u00a0traffic for these new in-progress connections. These connections would then be reset, potentially causing errors for our customers.\n   During normal operations, our new architecture has similar behavior to the previous design. A L4 load balancer would be selected by our routers, which would then forward traffic to a service&#39;s L7 server.\n There&#39;s a significant change when the set of load balancers changes. As our load balancers are now stateless, it doesn&#39;t matter which load balancer our router selects to forward traffic to, they&#39;ll end up reaching the same backend server.\n   Our load balancer servers announce service IP addresses to our data centers\u2019 routers using BGP, unchanged from the previous solution. Our routers choose which load balancers will receive packets based on a routing strategy called equal-cost multi-path routing (ECMP).\n ECMP hashes information from packets to pick a path for that packet. The hash function used by routers is often fixed in firmware. Routers that chose a poor hashing function, or chose bad inputs, can create unbalanced network and server load, or break assumptions made by the protocol layer.\n We worked with our networking team to ensure ECMP is configured on our routers to hash only based on the packet&#39;s 5-tuple\u2014the protocol, source address and port, and destination address and port.\n For maintenance, our operators can withdraw the BGP session and traffic will transparently shift to other load balancers. However, if a load balancer suddenly becomes unavailable, such as with a kernel panic or power failure, there is a short delay before the BGP keepalive mechanism fails and routers terminate the session.\n It&#39;s possible for routers to terminate BGP sessions after a much shorter delay using the Bidirectional Forwarding Detection (BFD) protocol between the router and load balancers. Different routers have different limitations and restrictions on BFD that makes it difficult to use in an environment heavily using L2 link aggregation and VXLANs.\n We&#39;re continuing to work with our networking team to find solutions to reduce the time to terminate BGP sessions, using tools and configurations they&#39;re most comfortable with.\n  To ensure all load balancers are sending traffic to the same backends, we decided to use the  Maglev connection scheduler. Maglev is a consistent hash scheduler hashing a 5-tuple of information from each packet\u2014the protocol, source address and port, and destination address and port\u2014to determine a backend server.\n By being a consistent hash, the same backend server is chosen by every load balancer for a packet without needing to persist any connection state. This allows us to transparently move traffic between load balancers without requiring explicit connection synchronization between them.\n  Where possible, we wanted to use commonplace and reliable Linux features. Linux has implemented a powerful layer 4 load balancer, the IP Virtual Server (IPVS), since the early 2000s. IPVS has supported the Maglev scheduler  since Linux 4.18.\n  Our load balancer and application servers are spread across multiple racks and subnets. To route traffic from the load balancer we opted to use Foo-Over-UDP encapsulation.\n In Foo-Over-UDP encapsulation a new IP and UDP header are added around the original packet. When these packets arrive on the destination server, the Linux kernel removes the outer IP and UDP headers and inserts the inner payload back into the networking stack for processing as if the packet had originally been received on that server.\n Compared to other encapsulation methods\u2014such as IPIP, GUE, and GENEVE\u2014we felt Foo-Over-UDP struck a nice balance between features and flexibility. Direct Server Return, where application servers reply directly to clients and bypass the load balancers, was implemented as a byproduct of the encapsulation. There was no state associated with the encapsulation, each server only required one encapsulation interface to receive traffic from all load balancers.\n  # Load in the kernel modules required for IPVS and FOU.$ modprobe ip_vs &amp;&amp; modprobe ip_vs_mh &amp;&amp; modprobe fou# Create one tunnel between the load balancer and# an application server. The IPs are the machines&#39;# real IPs on the network.$ ip link add name lbtun1 type ipip \\remote 192.0.2.1 local 192.0.2.2 ttl 2 \\encap fou encap-sport auto encap-dport 5555# Inform the kernel about the VIPs that might be announced here.$ ip route add table local local 198.51.100.0/24 \\dev lo proto kernel# Give the tunnel an IP address local to this machine.# Traffic on this machine destined for this IP address will# be sent down the tunnel.$ ip route add 203.0.113.1 dev lbtun1 scope link# Tell IPVS about the service, and that it should use the# Maglev scheduler.$ ipvsadm -A -t 198.51.100.1:80 -s mh# Tell IPVS about a backend for this service.$ ipvsadm -a -t 198.51.100.1:80 -r 203.0.113.1:80\n  # The kernel module may need to be loaded.$ modprobe fou# Setup an IPIP receiver.# ipproto 4 = IPIP (not IPv4)$ ip fou add port 5555 ipproto 4# Bring up the tunnel.$ ip link set dev tunl0 up# Disable reverse path filtering on tunnel interface.$ sysctl -w net.ipv4.conf.tunl0.rp_filter=0$ sysctl -w net.ipv4.conf.all.rp_filter=0\n IPVS does not support Foo-Over-UDP as a packet forwarding method. To work around this limitation, we&#39;ve created virtual interfaces that implement Foo-Over-UDP encapsulation. We can then use IPVS&#39;s direct packet forwarding method along with the kernel routing table to choose a specific interface.\n Linux is often configured to ignore packets that arrive on an interface that is different from the interface used for replies. As packets will now be arriving on the virtual &#34;tunl0&#34; interface, we need to disable reverse path filtering on this interface. The kernel uses the higher value of the named and &#34;all&#34; interfaces, so you may need to decrease &#34;all&#34; and adjust other interfaces.\n  The maximum IPv4 packet size, or maximum transmission unit (MTU), we accept from the internet is 1500 bytes. To ensure we did not fragment these packets during encapsulation we increased our internal MTUs from the default to accommodate the IP and UDP headers.\n The team had underestimated the complexity of changing the MTU across all our racks of equipment. We had to adjust the MTU across all our routers and switches, of our bonded and VXLAN interfaces, and finally our Foo-Over-UDP encapsulation. Even with a carefully orchestrated rollout, and we still uncovered MTU-related bugs with our switches and server stack, many of which manifested first as issues on other parts of the network.\n  We&#39;ve written a Go agent running on each load balancer that synchronizes with a control plane layer that&#39;s tracking the location of services. The agent then configures the system based on active services and available backend servers.\n To configure IPVS and the routing table we&#39;re using packages built upon the  netlink Go package. We&#39;re open sourcing the IPVS netlink package we built today, which supports querying, creating and updating IPVS virtual servers, destinations, and statistics.\n Unfortunately, there is no official programming interface for iptables, so we must instead execute the iptables binary. The agent computes an ideal set of iptables chains and rules, which is then reconciled with the live rules.\n  *filter-A INPUT -d 198.51.100.0/24 -m comment --comment \\&#34;leif:nhAi5v93jwQYcJuK&#34; -j LEIFUR-LB-A LEIFUR-LB -d 198.51.100.1/32 -p tcp -m comment --comment \\&#34;leif:G4qtNUVFCkLCu4yt&#34; -m multiport --dports 80 -j LEIFUR-GQ4OKHRLCJYOWIN9-A LEIFUR-GQ4OKHRLCJYOWIN9 -s 10.0.0.0/8 -m comment --comment \\&#34;leif:G4qtNUVFCkLCu4yt&#34; -j ACCEPT-A LEIFUR-GQ4OKHRLCJYOWIN9 -s 172.16.0.0/12 -m comment --comment \\&#34;leif:0XxZ2OwlQWzIYFTD&#34; -j ACCEPT\n The iptables output of a rule may differ significantly from the input given by our ideal rule. To avoid needing to parse the entire iptables rule in our comparisons, we store a hash of the rule, including the position in the chain, as an iptables comment. We then can compare the comment to our ideal rule to determine if we need to take any actions. On chains that are shared (such as INPUT) the agent ignores unmanaged rules.\n  We use the network load balancer described here as a cloud load balancer for Kubernetes. A controller assigns virtual IP addresses to Kubernetes services requesting a load balancer IP. These IPs get configured by the agent in IPVS. Traffic is directed to a subset of cluster nodes for handling by kube-proxy, unless the External Traffic Policy is set to &#34;Local&#34; in which case the traffic is sent to the specific backends the workloads are running on.\n This allows us to have internal Kubernetes clusters that better replicate the load balancer behavior of managed clusters on cloud providers. Services running Kubernetes, such as ingress controllers, API gateways, and databases, have access to correct client IP addresses of load balanced traffic.\n  Continuing a close eye on future developments of IPVS and alternatives, including nftlb and Express Data Path (XDP) and eBPF.\n Migrate to nftables. The &#34;flat priorities&#34; and lack of programmable interface for iptables makes it ill-suited for including automated rules alongside rules added by operators. We hope as more projects and operations move to nftables we&#39;ll be able to switch without creating a &#34;blind-spot&#34; to operations.\n Failures of a load balancer can result in temporary outages due to BGP hold timers. We&#39;d like to improve how we&#39;re handling the failures with BGP sessions.\n Investigate using Lightweight Tunnels to reduce the number of Foo-Over-UDP interfaces are needed on the load balancer nodes.\n  Multi-tier load-balancing with Linux. Vincent Bernat (2018). Describes a network load balancer using IPVS and IPIP.\n Introducing the GitHub Load Balancer. Joe Williams, Theo Julienne (2017). Describes a similar split layer 4 and layer 7 architecture, using consistent hashing and Foo-Over-UDP. They seemed to have limitations with IPVS that looked to have been resolved.\n Foo over UDP. Jonathan Corbet (2014). Describes the basics of IPIP and Foo-Over-UDP, which was just introduced at the time.\n UDP encapsulation, FOU, GUE, &amp; RCO. Tom Herbert (2015). Describes the different UDP encapsulation options.\n  BFD (Bidirectional Forwarding Detection): Does it work and is it worth it?. Tom School (2009). Discussion on BFD with common protocols and where it can become a problem.\n  Load Balancing  Maglev  Availability", "posttime": "2020-06-11 01:05:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u78c1\u60ac\u6d6e,availability", "title": "\u91c7\u7528\u78c1\u60ac\u6d6e\u6280\u672f\u7684\u9ad8\u53ef\u7528\u6027\u8d1f\u8f7d\u5747\u8861\u5668", "title_en": "High Availability Load Balancers with Maglev", "transed": 1, "url": "https://blog.cloudflare.com/high-availability-load-balancers-with-maglev/", "via": "", "real_tags": ["\u78c1\u60ac\u6d6e"]}, {"category": "", "categoryclass": "", "imagename": "064216e2a2ce474d4f90d4d4d5add6fc.png", "infoid": 1006034, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\u5bf9\u4e8eDART\u56e2\u961f\u6765\u8bf4\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u91cc\u7a0b\u7891\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u96f6\u5b89\u5168\u5de5\u4f5c\u7684\u6280\u672f\u9884\u89c8\u3002\u7a7a\u5b89\u5168\u6027\u53ef\u4ee5\u5e2e\u52a9\u60a8\u907f\u514d\u4e00\u7c7b\u901a\u5e38\u5f88\u96be\u53d1\u73b0\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff0c\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4e00\u7cfb\u5217\u6027\u80fd\u6539\u8fdb\u3002\u6211\u4eec\u73b0\u5728\u53d1\u5e03\u65e9\u671f\u7684\u6280\u672f\u9884\u89c8\uff0c\u6211\u4eec\u671f\u5f85\u60a8\u7684\u53cd\u9988\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u63cf\u8ff0\u4e86DART\u56e2\u961f\u63a8\u51fa\u96f6\u5b89\u5168\u7684\u8ba1\u5212\u3002\u5b83\u8fd8\u89e3\u91ca\u4e86\u6211\u4eec\u6240\u8bf4\u7684\u58f0\u97f3\u7a7a\u5b89\u5168\u6027\u662f\u4ec0\u4e48\u610f\u601d\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5b83\u4e0d\u540c\u4e8e\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u91c7\u7528\u7684\u65b9\u6cd5\u3002\nDART\u662f\u4e00\u79cd\u7c7b\u578b\u5b89\u5168\u8bed\u8a00\u3002\u8fd9\u610f\u5473\u7740\u5f53\u60a8\u83b7\u5f97\u67d0\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u5c5e\u4e8e\u8be5\u7c7b\u578b\u3002\u4f46\u662f\u7c7b\u578b\u5b89\u5168\u672c\u8eab\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u53d8\u91cf\u4e0d\u4e3a\u7a7a\u3002\n\u7a7a\u9519\u8bef\u975e\u5e38\u5e38\u89c1\u3002\u5728GitHub\u4e0a\u641c\u7d22\u4f1a\u53d1\u73b0\u6570\u5343\u4e2a\u7531DART\u4ee3\u7801\u4e2d\u7684\u7a7a\u503c\u5f15\u8d77\u7684\u95ee\u9898\uff0c\u751a\u81f3\u8fd8\u6709\u6570\u5343\u4e2a\u63d0\u4ea4\u8bd5\u56fe\u4fee\u590d\u8fd9\u4e9b\u95ee\u9898\u3002\n\u5c1d\u8bd5\u67e5\u770b\u662f\u5426\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\u53d1\u73b0\u53ef\u7a7a\u6027\u95ee\u9898\uff1a\n\u5982\u679c\u4f7f\u7528NULL\u8c03\u7528\u6b64\u51fd\u6570\uff0c\u80af\u5b9a\u4f1a\u5931\u8d25\uff0c\u4f46\u8fd8\u6709\u7b2c\u4e8c\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651\uff1a\nvoid main(){//\u9519\u8bef\u60c5\u51b51\uff1a\u5c06NULL\u4f20\u9012\u7ed9\u6587\u4ef6\u3002printLengths(Null)\uff1b//\u9519\u8bef\u60c5\u51b52\uff1a\u4f20\u9012\u6587\u4ef6\u5217\u8868\uff0c\u5305\u542bnull\u9879\u3002printLengths([File(&#39\uff1bfilename1&#39\uff1b)\uff0cFile(&#39\uff1bfilename2&#39\uff1b)\uff0cnull])\uff1b}\u3002\n\u4f7f\u7528\u7a7a\u5b89\u5168\u6027\uff0c\u60a8\u53ef\u4ee5\u66f4\u6709\u4fe1\u5fc3\u5730\u5bf9\u4ee3\u7801\u8fdb\u884c\u63a8\u7406\u3002\u4e0d\u518d\u51fa\u73b0\u4ee4\u4eba\u8ba8\u538c\u7684\u8fd0\u884c\u65f6\u7a7a\u53d6\u6d88\u5f15\u7528\u9519\u8bef\u3002\u76f8\u53cd\uff0c\u60a8\u5728\u7f16\u7801\u65f6\u4f1a\u6536\u5230\u9759\u6001\u9519\u8bef\u3002\nDART\u7684\u96f6\u5b89\u5168\u662f\u53ef\u9760\u7684\u3002\u8fd9\u610f\u5473\u7740\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0cDART\u767e\u5206\u4e4b\u767e\u786e\u5b9a\u6587\u4ef6\u5217\u8868\u548c\u5176\u4e2d\u7684\u5143\u7d20\u4e0d\u80fd\u4e3a\u7a7a\u3002\u5f53DART\u5206\u6790\u60a8\u7684\u4ee3\u7801\u5e76\u786e\u5b9a\u67d0\u4e2a\u53d8\u91cf\u4e0d\u53ef\u4e3a\u7a7a\u65f6\uff0c\u8be5\u53d8\u91cf\u59cb\u7ec8\u4e0d\u53ef\u4e3a\u7a7a\uff1a\u5982\u679c\u60a8\u5728\u8c03\u8bd5\u5668\u4e2d\u68c0\u67e5\u6b63\u5728\u8fd0\u884c\u7684\u4ee3\u7801\uff0c\u60a8\u5c06\u770b\u5230\u5728\u8fd0\u884c\u65f6\u4fdd\u6301\u4e0d\u53ef\u4e3a\u7a7a\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5176\u4ed6\u4e00\u4e9b\u5b9e\u73b0\u5e76\u4e0d\u53ef\u9760\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u4ecd\u7136\u9700\u8981\u6267\u884c\u8fd0\u884c\u65f6\u7a7a\u68c0\u67e5\u3002DART\u4e0eSWIFT\u5171\u4eab\u542c\u8d77\u6765\u50cf\u96f6\u7684\u5b89\u5168\u6027\uff0c\u4f46\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e0d\u662f\u5f88\u591a\u3002\nDART\u7684\u7a7a\u5b89\u5168\u6027\u7684\u5065\u58ee\u6027\u8fd8\u6709\u53e6\u4e00\u4e2a\u503c\u5f97\u6b22\u8fce\u7684\u542b\u4e49\uff1a\u5b83\u610f\u5473\u7740\u60a8\u7684\u7a0b\u5e8f\u53ef\u4ee5\u66f4\u5c0f\u3001\u66f4\u5feb\u3002\u7531\u4e8eDART\u786e\u5b9e\u786e\u5b9a\u6587\u4ef6\u4e0d\u4f1a\u4e3a\u7a7a\uff0c\u56e0\u6b64DART\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\u3002\u4f8b\u5982\uff0cDART Ahead-of-time(AOT)\u7f16\u8bd1\u5668\u53ef\u4ee5\u751f\u6210\u66f4\u5c0f\u3001\u66f4\u5feb\u7684\u672c\u673a\u4ee3\u7801\uff0c\u56e0\u4e3a\u5f53\u5b83\u77e5\u9053\u67d0\u4e2a\u53d8\u91cf\u4e0d\u4e3aNULL\u65f6\uff0c\u5b83\u4e0d\u9700\u8981\u6dfb\u52a0\u5bf9NULL\u7684\u68c0\u67e5\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u5e0c\u671b\u7684\u521d\u6b65\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u770b\u5230\u6a21\u62df\u5178\u578b\u98a4\u52a8\u6846\u67b6\u6e32\u67d3\u6a21\u5f0f\u7684\u5fae\u57fa\u51c6\u6d4b\u8bd5\u7684\u6027\u80fd\u63d0\u9ad8\u4e8619%\u3002\n\u5728\u5f00\u59cb\u96f6\u5b89\u5168\u8be6\u7ec6\u8bbe\u8ba1\u4e4b\u524d\uff0cDART\u56e2\u961f\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u4e09\u4e2a\u6838\u5fc3\u539f\u5219\uff1a\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u53ef\u4e3a\u7a7a\u3002\u9664\u975e\u60a8\u663e\u5f0f\u5730\u544a\u8bc9DART\u53d8\u91cf\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u5426\u5219\u5b83\u5c06\u8ba4\u4e3a\u8be5\u53d8\u91cf\u4e0d\u53ef\u4e3a\u7a7a\u3002\u6211\u4eec\u9009\u62e9\u6b64\u9009\u9879\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0c\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u975eNULL\u662fAPI\u4e2d\u6700\u5e38\u89c1\u7684\u9009\u62e9\u3002\n\u9010\u6e10\u53ef\u91c7\u7528\u7684\u3002\u5916\u9762\u6709\u5f88\u591aDART\u4ee3\u7801\u3002\u5fc5\u987b\u80fd\u591f\u9010\u4e2a\u90e8\u5206\u5730\u589e\u91cf\u5730\u8fc1\u79fb\u5230\u96f6\u5b89\u5168\u3002\u5728\u540c\u4e00\u9879\u76ee\u4e2d\u5e94\u8be5\u53ef\u4ee5\u6709\u7a7a\u5b89\u5168\u4ee3\u7801\u548c\u975e\u7a7a\u5b89\u5168\u4ee3\u7801\u3002\u6211\u4eec\u8fd8\u5c06\u63d0\u4f9b\u5de5\u5177\u6765\u5e2e\u52a9\u60a8\u8fdb\u884c\u8fc1\u79fb\u3002\n\u5b8c\u597d\u65e0\u635f\u3002\u5982\u4e0a\u6240\u8ff0\uff0cDART\u7684\u96f6\u5b89\u5168\u6027\u662f\u53ef\u9760\u7684\u3002\u4e00\u65e6\u60a8\u5c06\u6574\u4e2a\u9879\u76ee\u548c\u4f9d\u8d56\u9879\u8fc1\u79fb\u5230\u96f6\u5b89\u5168\uff0c\u60a8\u5c31\u53ef\u4ee5\u83b7\u5f97\u5065\u5168\u6027\u7684\u5168\u90e8\u597d\u5904\u3002\n\u6838\u5fc3\u8bed\u6cd5\u975e\u5e38\u7b80\u5355\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u4e0d\u53ef\u4e3a\u7a7a\u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u58f0\u660e\u3002\u8bf7\u8bb0\u4f4f\uff0c\u4e0d\u53ef\u4e3a\u7a7a\u662f\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u56e0\u6b64\u8fd9\u4e9b\u58f0\u660e\u770b\u8d77\u6765\u5c31\u50cf\u4eca\u5929\u4e00\u6837\uff0c\u4f46\u5b83\u4eec\u7684\u542b\u4e49\u53d1\u751f\u4e86\u53d8\u5316\u3002\n//\u5728\u7a7a\u5b89\u5168DART\u4e2d\uff0c\u8fd9\u4e9b\u90fd\u4e0d\u80fd\u4e3a\u7a7a\u3002var i=42\uff1b\u6700\u540eb=foo()\uff1b\u5b57\u7b26\u4e32m=&#39\uff1b&#39\uff1b\uff1b\nDART\u5c06\u786e\u4fdd\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u5c06NULL\u8d4b\u7ed9\u4e0a\u8ff0\u4efb\u4f55\u53d8\u91cf\u3002\u5982\u679c\u60a8\u5c1d\u8bd5\u5728\u4e00\u5343\u884c\u4e4b\u540e\u6267\u884ci=null\uff0c\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u9759\u6001\u5206\u6790\u9519\u8bef\u548c\u7ea2\u8272\u7684\u66f2\u6298\u7ebf\u6761\uff0c\u5e76\u4e14\u60a8\u7684\u7a0b\u5e8f\u5c06\u62d2\u7edd\u7f16\u8bd1\u3002\n//\u8fd9\u4e9b\u90fd\u662f\u53ef\u4ee5\u4e3a\u7a7a\u7684\u53d8\u91cf\u3002INT\uff1fj=1\uff1b//\u4ee5\u540e\u53ef\u4ee5\u4e3a\u7a7a\u3002\u6700\u540e\u7684Foo\uff1fc=getFoo()\uff1b//\u51fd\u6570\u53ef\u80fd\u8fd4\u56deNULL\u3002\u7ef3\u5b50\uff1fn\uff1b//\u5f00\u59cb\u4e3a\u7a7a\u3002\u5728\u4ee5\u540e\u7684\u4efb\u4f55\u65f6\u95f4\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\u3002\n//\u5728\u51fd\u6570\u53c2\u6570\u4e2d\u3002void bogie(int\uff1fcount){//\u8ba1\u6570\u53ef\u80fd\u4e3a\u7a7a\u3002}//\u5728\u51fd\u6570\u8fd4\u56de\u503c\u4e2d\u3002\u798f\uff1fgetFoo(){//\u53ef\u4ee5\u8fd4\u56denull\u800c\u4e0d\u662ffoo\u3002}//\u8fd8\u6709\uff1a\u6cdb\u578b\u3001typedefs\u3001\u7c7b\u578b\u68c0\u67e5\u7b49\u3002//\u4ee5\u53ca\u4ee5\u4e0a\u5185\u5bb9\u7684\u4efb\u610f\u7ec4\u5408\u3002\n\u4f46\u662f\uff0c\u518d\u4e00\u6b21\uff0c\u6211\u7684\u68a6\u60f3\u662f\u4f60\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u9700\u8981\u4f7f\u7528\uff1f\u60a8\u7684\u7edd\u5927\u591a\u6570\u7c7b\u578b\u5c06\u662f\u4e0d\u53ef\u4e3a\u7a7a\u7684\u3002\nDART\u56e2\u961f\u6b63\u5728\u52aa\u529b\u4f7f\u96f6\u5b89\u5168\u5c3d\u53ef\u80fd\u6613\u4e8e\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5b83\u4f7f\u7528if\u68c0\u67e5\u7a7a\u503c\uff1a\n\u65e0\u6548\u5587\u53ed(int\uff1f\u54cd\u5ea6){\u5982\u679c(\u54cd\u5ea6==NULL){//\u6ca1\u6709\u6307\u5b9a\u54cd\u5ea6\uff0c\u8bf7\u901a\u77e5\u5f00\u53d1\u5546//\u6700\u5927\u54cd\u5ea6\u3002_playSound(&#39\uff1berror.wav&39\uff1b\uff0cvolume\uff1a11)\uff1breturn\uff1b}//\u54cd\u5ea6\u4e0d\u4e3a\u7a7a\uff0c\u8ba9\u6211\u4eec\u5c06\u5176\u94b3\u5236\u5230\u53ef\u63a5\u53d7\u7684\u6c34\u5e73\u3002_playSound(&#39\uff1bhonk.wav&#39\uff1b\uff0c\u97f3\u91cf\uff1aLoudness.clip(0\uff0c11))\uff1b}\u3002\n\u8bf7\u6ce8\u610f\uff0cDART\u662f\u5982\u4f55\u8db3\u591f\u806a\u660e\u5730\u610f\u8bc6\u5230\uff0c\u5728\u6211\u4eec\u4f20\u9012if\u8bed\u53e5\u65f6\uff0c\u54cd\u5ea6\u53d8\u91cf\u4e0d\u80fd\u4e3a\u7a7a\u3002\u56e0\u6b64\uff0cDART\u5141\u8bb8\u6211\u4eec\u8c03\u7528CLAMP()\u65b9\u6cd5\uff0c\u800c\u65e0\u9700\u8df3\u8f6c\u3002\u8fd9\u79cd\u4fbf\u5229\u6027\u662f\u901a\u8fc7\u6240\u8c13\u7684\u6d41\u5206\u6790\u5b9e\u73b0\u7684\uff1aDART\u5206\u6790\u5668\u4f1a\u50cf\u6267\u884c\u4ee3\u7801\u4e00\u6837\u68c0\u67e5\u60a8\u7684\u4ee3\u7801\uff0c\u81ea\u52a8\u627e\u51fa\u6709\u5173\u4ee3\u7801\u7684\u9644\u52a0\u4fe1\u606f\u3002\n\u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u5b83\u663e\u793a\u4e86DART\u53ef\u4ee5\u786e\u4fdd\u53d8\u91cf\u662f\u975eNULL\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6211\u4eec\u59cb\u7ec8\u4e3a\u5176\u8d4b\u503c\u4e3a\u975eNULL\u503c\uff1a\nint sign(Int X){//\u7ed3\u679c\u4e0d\u53ef\u4e3a\u7a7a\u3002INT RESULT\uff1bIF(x&&gt;\uff1b=0){RESULT=1\uff1b}ELSE{RESULT=-1\uff1b}//\u6b64\u65f6\uff0cDART\u77e5\u9053\u7ed3\u679c\u4e0d\u80fd\u4e3a\u7a7a\u3002\u8fd4\u56de\u7ed3\u679c\uff1b}\u3002\n\u5982\u679c\u5220\u9664\u4e0a\u9762\u7684\u4efb\u4f55\u8d4b\u503c(\u4f8b\u5982\uff0c\u901a\u8fc7\u5220\u9664\u7ed3\u679c=-1\uff1b\u884c)\uff0cDART\u4e0d\u80fd\u4fdd\u8bc1\u7ed3\u679c\u4e3a\u975e\u7a7a\uff1a\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u9759\u6001\u9519\u8bef\uff0c\u5e76\u4e14\u60a8\u7684\u4ee3\u7801\u5c06\u4e0d\u4f1a\u7f16\u8bd1\u3002\n\u6d41\u5206\u6790\u53ea\u5728\u51fd\u6570\u5185\u90e8\u5de5\u4f5c\u3002\u5982\u679c\u60a8\u6709\u5168\u5c40\u53d8\u91cf\u6216\u7c7b\u5b57\u6bb5\uff0c\u5219DART\u4e0d\u80fd\u4fdd\u8bc1\u4f55\u65f6\u4e3a\u5176\u8d4b\u503c\u3002DART\u65e0\u6cd5\u5bf9\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6d41\u8fdb\u884c\u5efa\u6a21\u3002\u56e0\u6b64\uff0c\u5982\u679c\u5728\u7b2c\u4e00\u6b21\u8bfb\u53d6\u53d8\u91cf\u4e4b\u524d\u77e5\u9053\u53d8\u91cf\u5c06\u4e3a\u975eNULL\uff0c\u4f46\u4e0d\u80fd\u7acb\u5373\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528new late\u5173\u952e\u5b57\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5c3d\u7ba1v\u5f00\u59cb\u65f6\u672a\u521d\u59cb\u5316\uff0c\u4f46\u5b83\u662f\u975e\u7a7a\u7684\u3002DART\u76f8\u4fe1\u60a8\u5728\u4e3av\u8d4b\u503c\u975e\u7a7a\u503c\u4e4b\u524d\u4e0d\u4f1a\u5c1d\u8bd5\u8bfb\u53d6v\uff0c\u5e76\u4e14\u60a8\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u51fa\u9519\u3002\nDART\u56e2\u961f\u5df2\u7ecf\u5de5\u4f5c\u4e86\u4e00\u5e74\u591a\uff0c\u4ee5\u786e\u4fdd\u6280\u672f\u9884\u89c8\u7684\u96f6\u5b89\u5168\u6027\u3002\u8fd9\u662f\u81ea\u6211\u4eec\u5f15\u5165DART 2\u4ee5\u6765\u5bf9DART\u8bed\u8a00\u589e\u52a0\u7684\u6700\u5927\u4e00\u9879\u529f\u80fd\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u7a81\u7834\u6027\u7684\u53d8\u5316\u3002\u73b0\u6709\u4ee3\u7801\u53ef\u4ee5\u8c03\u5165\u4f7f\u7528\u7a7a\u5b89\u5168\u6027\u7684\u4ee3\u7801\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5373\u4f7f\u5728\u96f6\u5b89\u5168\u6027\u53ef\u7528\u4e4b\u540e\uff0c\u5b83\u4e5f\u5c06\u662f\u4e00\u4e2a\u53ef\u9009\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u5728\u51c6\u5907\u597d\u65f6\u91c7\u7528\u3002\u60a8\u7684\u73b0\u6709\u4ee3\u7801\u5c06\u7ee7\u7eed\u8fd0\u884c\uff0c\u65e0\u9700\u66f4\u6539\u3002\n\u6211\u4eec\u6700\u8fd1\u8fc1\u79fb\u4e86DART\u6838\u5fc3\u5e93\uff0c\u4ee5\u5145\u5206\u4f7f\u7528\u7a7a\u5b89\u5168\u6027\u3002\u4f5c\u4e3anull security\u5411\u540e\u517c\u5bb9\u6027\u7684\u4e00\u4e2a\u793a\u4f8b\uff0c\u6211\u4eec\u66ff\u6362\u4e86\u73b0\u6709\u7684\u6838\u5fc3\u5e93\uff0c\u800c\u4e0d\u4f1a\u7834\u574f\u5728DART\u548cFfltter\u6d4b\u8bd5\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u73b0\u6709\u6d4b\u8bd5\u548c\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u4eec\u751a\u81f3\u5c06\u65b0\u7684\u6838\u5fc3\u5e93\u76f4\u63a5\u653e\u5165\u4ed6\u4eec\u7684\u4ea7\u54c1\u4ee3\u7801\u5e93\u4e2d\uff0c\u6beb\u65e0\u969c\u788d\u5730\u63d0\u4f9b\u7ed9\u8bb8\u591aGoogle\u5185\u90e8\u5ba2\u6237\u3002\u6211\u4eec\u8ba1\u5212\u5728\u529f\u80fd\u542f\u52a8\u65f6\u8fc1\u79fb\u6211\u4eec\u6240\u6709\u7684\u8f6f\u4ef6\u5305\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u4f7f\u7528\u7a7a\u5b89\u5168\uff0c\u6211\u4eec\u5e0c\u671b\u60a8\u4e5f\u80fd\u8fd9\u6837\u505a\u3002\u4f46\u662f\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u65f6\u95f4\u8868\u4e0a\uff0c\u4e00\u4e2a\u5305\u63a5\u4e00\u4e2a\u5305\uff0c\u4e00\u4e2a\u5e94\u7528\u4e00\u4e2a\u5e94\u7528\u3002\n\u6280\u672f\u9884\u89c8\u3002\u8fd9\u5c06\u4e8e\u4eca\u5929\u53d1\u5e03\uff0c\u5e76\u5728DART\u7684\u5f00\u53d1\u9891\u9053\u4e2d\u63d0\u4f9b\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u201c\u7acb\u5373\u8bd5\u7528\u201d\u90e8\u5206\u3002\u60c5\u51b5\u4ecd\u7136\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u8981\u5728\u751f\u4ea7\u4ee3\u7801\u4e2d\u4f7f\u7528\u7a7a\u5b89\u5168\u6027\u3002\u4e0d\u8fc7\uff0c\u4e00\u5b9a\u8981\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u7136\u540e\u7ed9\u6211\u4eec\u53cd\u9988\uff01\n\u6d4b\u8bd5\u7248\u3002\u96f6\u5b89\u5168\u5c06\u5728DART\u7684\u6d4b\u8bd5\u901a\u9053\u4e2d\u63d0\u4f9b\uff0c\u5e76\u4e14\u4e0d\u518d\u662f\u5728\u5b9e\u9a8c\u65d7\u5e1c\u540e\u9762\u3002\u8be5\u529f\u80fd\u5c06\u975e\u5e38\u63a5\u8fd1\u9884\u671f\u7684\u6700\u7ec8\u7248\u672c\u3002\u5982\u679c\u60a8\u62e5\u6709pub.dev\u5305\u6216\u63d2\u4ef6\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fc1\u79fb\u4e86\uff0c\u4f46\u662f\u60a8\u8fd8\u4e0d\u5e94\u8be5\u5c06\u5176\u53d1\u5e03\u4e3a\u7a33\u5b9a\u7248\u672c\u3002\n\u7a33\u5b9a\u91ca\u653e\u3002\u6bcf\u4e2a\u4eba\u90fd\u5c06\u62e5\u6709\u96f6\u5b89\u5168\u6027\uff0c\u5e76\u9f13\u52b1\u60a8\u5c06\u8fc1\u79fb\u540e\u7684\u5305\u548c\u63d2\u4ef6\u53d1\u5e03\u4e3a\u7a33\u5b9a\u7248\u672c\u3002\u60a8\u8fd8\u5e94\u8be5\u8fc1\u79fb\u60a8\u7684\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u6211\u4eec\u8ba1\u5212\u5728\u5e74\u5e95\u524d\u5c06null security\u4f5c\u4e3a\u4e00\u4e2a\u7a33\u5b9a\u7684\u529f\u80fd\u53d1\u5e03\u3002\u4ece\u73b0\u5728\u5230\u90a3\u65f6\uff0c\u6211\u4eec\u5c06\u6dfb\u52a0\u5de5\u5177\u6765\u5e2e\u52a9\u60a8\u786e\u4fdd\u4ee3\u7801\u4e3a\u7a7a\u7684\u5b89\u5168\uff0c\u5305\u62ec\uff1a\n\u652f\u6301\u60a8\u81ea\u52a8\u6267\u884c\u5347\u7ea7\u73b0\u6709\u8f6f\u4ef6\u5305\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u8bb8\u591a\u6b65\u9aa4\u7684\u8fc1\u79fb\u5de5\u5177\u3002\n\u6807\u7b7e\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a\u5305\u662f\u5426\u652f\u6301\u7a7a\u5b89\u5168\u6027\u3002\npub\u8fc7\u65f6\u547d\u4ee4\u7684\u6269\u5c55\uff0c\u652f\u6301\u67e5\u627e\u652f\u6301\u7a7a\u5b89\u5168\u6027\u7684\u4f9d\u8d56\u9879\u7684\u6700\u65b0\u7248\u672c\u3002\n\u73b0\u5728\u5c1d\u8bd5\u96f6\u5b89\u5168\u7684\u6700\u5feb\u65b9\u5f0f\u662f\u4f7f\u7528nullsafety.dartpad.dev\uff0c\u8fd9\u662f\u4e00\u4e2a\u542f\u7528\u4e86\u96f6\u5b89\u5168\u7684Dartpad\u7248\u672c\u3002\u6253\u5f00\u201c\u4f7f\u7528\u4ee3\u7801\u6bb5\u5b66\u4e60\u201d\u4e0b\u62c9\u5217\u8868\uff0c\u53ef\u4ee5\u627e\u5230\u4e00\u7cfb\u5217\u5b66\u4e60\u7ec3\u4e60\uff0c\u8fd9\u4e9b\u7ec3\u4e60\u6f14\u7ec3\u4e86\u7a7a\u5b89\u5168\u7684\u65b0\u8bed\u6cd5\u548c\u57fa\u7840\u77e5\u8bc6\u3002\n\u60a8\u8fd8\u53ef\u4ee5\u5728\u5c0f\u578b\u547d\u4ee4\u884c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5c1d\u8bd5\u7a7a\u5b89\u5168\u6027\u3002(\u6211\u4eec\u8fd8\u6ca1\u6709\u8fc1\u79fb\u50cfFfltter\u8fd9\u6837\u7684\u5927\u578b\u6846\u67b6\u3002)\u3002\u9996\u5148\u4e0b\u8f7ddev-channel DART SDK\u7684\u526f\u672c\uff0c\u7136\u540e\u83b7\u53d6\u6b64\u793a\u4f8bDART CLI\u5e94\u7528\u7a0b\u5e8f\u7684\u526f\u672c(GitHub repo\u3001zip\u5b58\u6863)\u3002\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u7684\u81ea\u8ff0\u6587\u4ef6\u5305\u542b\u4f7f\u7528\u7a7a\u5b89\u5168\u5b9e\u9a8c\u6807\u5fd7\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf4\u660e\u3002\u793a\u4f8b\u4e2d\u7684\u5176\u4ed6\u6587\u4ef6\u63d0\u4f9b\u4e86\u542f\u52a8\u914d\u7f6e\uff0c\u53ef\u4ee5\u5728VS Code\u548cAndroid Studio\u4e2d\u8fdb\u884c\u8c03\u8bd5\u3002\n\u6211\u4eec\u5f88\u9ad8\u5174\u80fd\u4e3aDART\u5e26\u6765\u96f6\u5b89\u5168\u3002\u58f0\u97f3\u7a7a\u5b89\u5168\u6027\u662fDART\u7684\u4e00\u4e2a\u72ec\u7279\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u60a8\u7f16\u5199\u4e0d\u592a\u5bb9\u6613\u51fa\u9519\u7684\u4ee3\u7801\u5e76\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u6211\u4eec\u5e0c\u671b\u60a8\u5728\u6280\u672f\u9884\u89c8\u4e2d\u8bd5\u7528\u8be5\u529f\u80fd\uff0c\u5e76\u901a\u8fc7\u6211\u4eec\u7684\u95ee\u9898\u8ddf\u8e2a\u5668\u7ed9\u6211\u4eec\u53cd\u9988\u3002\u5feb\u4e50\u7684\u7f16\u7801\uff01", "note_en": "Today is a major milestone for the Dart team with the tech preview of our null safety work. Null safety helps you avoid a class of bugs that are often hard to spot, and as an added bonus enables a range of performance improvements. We\u2019re now releasing an early tech preview, and we\u2019re looking forward to your feedback.\n This post describes the Dart team\u2019s plans for rolling out null safety. It also explains what we mean by  sound null safety and  why that\u2019s different from approaches that many other languages take.\n  Dart is a type-safe language. This means that when you get a variable of some type, the compiler can  guarantee that it is of that type. But type safety by itself doesn\u2019t guarantee that the variable is not  null.\n Null errors are very common. A search on GitHub leads to  thousands of issues caused by nulls in Dart code, and even more  thousands of commits trying to fix those issues.\n Try to see if you can spot the nullability problems in the following example code:\n  This function will certainly fail if called with  null, but there\u2019s a second case to consider:\n void main() {  // Error case 1: passing a null to files.  printLengths(null);  // Error case 2: passing list of files, containing a null item.  printLengths([File(&#39;filename1&#39;), File(&#39;filename2&#39;), null]); }\n   With null safety, you can reason about your code with more confidence. No more pesky runtime null dereferencing errors. Instead, you get static errors as you code.\n  Dart\u2019s null safety is  sound. This means that Dart is 100% sure that the  files list, and the elements in it, cannot be  null in the above example. When Dart analyzes your code and determines that a variable is non-nullable, that variable is  always non-nullable: if you inspect your running code in the debugger, you\u2019ll see that non-nullability is retained at runtime. By contrast, some other implementations are unsound, and in many cases still need to perform runtime null checks. Dart shares sound null safety with Swift, but not very many other programming languages.\n The soundness of Dart\u2019s null safety has another welcome implication: it means your programs can be smaller and faster. Because Dart is  really sure that  files is never  null, Dart can optimize. For example, the Dart ahead-of-time (AOT) compiler can produce smaller and faster native code, because it doesn\u2019t need to add checks for nulls when it  knows that a variable isn\u2019t  null.\n We\u2019ve seen some very promising preliminary results. For example, we saw a  19% performance improvement in a microbenchmark that emulates typical Flutter framework rendering patterns.\n  Before starting the detailed design for null safety, the Dart team defined the following three core principles:\n Non-nullable by default. Unless you explicitly tell Dart that a variable can be  null, it will consider it non-nullable. We chose this as the default because we found that non-null was by far the most common choice in APIs.\n Incrementally adoptable. There\u2019s a lot of Dart code out there. It must be possible to migrate to null safety incrementally, part by part. It should be possible to have null-safe and non-null-safe code in the same project. We\u2019ll also provide tools to help you with the migration.\n Fully sound. As mentioned above, Dart\u2019s null safety is sound. Once you migrate your whole project and your dependencies to null safety, you reap the full benefits of soundness.\n  The core syntax is simple enough. Here are some non-nullable variables, declared in different ways. Remember, non-nullable is the default, so these declarations look like they do today, but their meaning changes.\n // In null-safe Dart, none of these can ever be null. var i = 42; final b = Foo(); String m = &#39;&#39;;\n Dart will make sure that you never assign  null to any of the above variables. If you try to do  i = null a thousand lines later, you\u2019ll get a static analysis error and red squiggly lines, and your program will refuse to compile.\n  // These are all nullable variables. int? j = 1; // Can be null later. final Foo? c = getFoo(); // Maybe the function returns null. String? n; // Is null at first. Can be null at any later time, too.\n   // In function parameters. void boogie(int? count) {  // It&#39;s possible that count is null. } // In function return values. Foo? getFoo() {  // Can return null instead of Foo. } // Also: generics, typedefs, type checks, etc. // And any combination of the above.\n But, once again, the dream is that you\u2019ll almost never have to use  ?. The vast majority of your types will be non-nullable.\n  The Dart team is trying hard to make null safety as easy to use as possible. For example, look at this code, which uses  if to check for a null value:\n void honk(int? loudness) {  if (loudness == null) {  // No loudness specified, notify the developer  // with maximum loudness.  _playSound(&#39;error.wav&#39;, volume: 11);  return;  }  // Loudness is non-null, let&#39;s just clamp it to acceptable levels.  _playSound(&#39;honk.wav&#39;, volume: loudness.clamp(0, 11)); }\n Note how Dart is smart enough to realize that by the time we pass that  if statement, the  loudness variable  cannot be  null. And so Dart lets us call the  clamp() method without jumping through hoops. This convenience is enabled by something called  flow analysis: the Dart analyzer goes through your code as if it was executing it, figuring out additional information about your code automatically.\n Here\u2019s another example, which shows a case where Dart can be sure that a variable is non-null because we always assign a non-null value to it:\n int sign(int x) {  // The result is non-nullable.  int result;  if (x &gt;= 0) {  result = 1;  } else {  result = -1;  }  // By this point, Dart knows the result cannot be null.  return result; }\n If you remove any of the assignments above (for example, by deleting the  result = -1; line), Dart cannot guarantee that  result will be non-null: you\u2019ll get a static error and your code won\u2019t compile.\n Flow analysis only works inside functions. If you have a global variable or a class field, then Dart can\u2019t guarantee when it will be assigned what value. Dart can\u2019t model the flow of your whole application. For that reason, you can use the new  late keyword when you   know that a variable will be non-null before you first read it, but you can\u2019t initialize it immediately.\n  Note that  v is non-null, although it starts uninitialized. Dart trusts you that you won\u2019t try to read  v before it\u2019s assigned a non-null value, and your code compiles without errors.\n  The Dart team has been working for more than a year to get null safety to tech preview. It\u2019s the largest addition to the Dart language since we introduced Dart 2. Yet, it\u2019s not a breaking change. Existing code can call into code that uses null safety, and vice versa. Even after null safety is available, it will be an optional feature that you can adopt when you\u2019re ready.  Your existing code will continue to run without change.\n We recently migrated the Dart  core libraries to fully use null safety. As an example of null safety\u2019s backwards compatibility, we replaced the existing core libraries without any breakage in existing tests and test apps running in the Dart and Flutter test environments. We even rolled the new core libraries to our many internal Google customers, directly into their production code bases, without a hitch. We plan on migrating all of our packages and apps to use null safety when the feature launches, and we hope you\u2019ll do the same. But you\u2019ll be able to do it on your timeline, package by package, app by app.\n   Tech preview. This is   launching today, and is available in Dart\u2019s  dev channel. See the \u201cTry it now\u201d section below for details. Things are still subject to change, so  don\u2019t use null safety in production code just yet. Do test things out and  give us feedback, though!\n Beta release. Null safety will be available in Dart\u2019s beta channel, and no longer behind an  experimental flag. The feature will be very close to the expected final version. If you own a  pub.dev package or plugin, this is when you can begin migrating, but you shouldn\u2019t publish it as a stable version just yet.\n Stable release. Everyone will have null safety, and you\u2019ll be encouraged to publish your migrated packages and plugins as stable versions. You should also migrate your production apps.\n If all goes well, we plan to release null safety as a stable feature before the end of the year. Between now and then, we\u2019ll add tooling to help you make your code null safe, including:\n A migration tool to support you in automating many of the steps for upgrading existing packages and apps\n Tags on  pub.dev, so you can tell if a package supports null safety or not\n An extension to the   pub outdated command, with support for finding the latest versions of your dependencies that support null safety\n  The quickest way to try null safety today is through  nullsafety.dartpad.dev, a version of DartPad with null safety enabled. Open the  Learn with Snippets drop-down to find a series of learning exercises that walk through the new syntax and basics of null safety.\n  You can also try null safety in small command-line apps. (We haven\u2019t migrated larger frameworks like Flutter yet.) Start by downloading a copy of the  dev-channel Dart SDK, and then get a copy of  this sample Dart CLI app ( GitHub repo,  zip archive). The sample app\u2019s  README file has instructions for running the app with the null safety experiment flag. Other files in the sample provide launch configurations that enable debugging in VS Code and Android Studio.\n   We\u2019re very happy to bring null safety to Dart. Sound null safety is a distinctive feature of Dart that helps you write less error-prone code and get better performance. We hope you\u2019ll experiment with the feature in tech preview, and  give us feedback through our issue tracker. Happy coding!", "posttime": "2020-06-11 00:48:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "dart,\u58f0\u97f3,sound", "title": "DART\uff1a\u58f0\u97f3\u96f6\u4f4d\u5b89\u5168", "title_en": "Dart: Sound Null Safety", "transed": 1, "url": "https://medium.com/dartlang/announcing-sound-null-safety-defd2216a6f3", "via": "", "real_tags": ["dart", "\u58f0\u97f3", "sound"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006033, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u5efa\u5e10\u6237", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-06-11 00:31:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u52a8\u6c7d\u8f66,batteries,\u521b\u5efa", "title": "\u7528\u8fc7\u7684\u7535\u52a8\u6c7d\u8f66\u7535\u6c60\u53ef\u4ee5\u4e3a\u660e\u5929\u7684\u592a\u9633\u80fd\u53d1\u7535\u573a\u4f9b\u7535", "title_en": "Used EV Batteries Could Power Tomorrow's Solar Farms", "transed": 1, "url": "https://spectrum.ieee.org/energywise/energy/batteries-storage/used-ev-batteries-could-power-tomorrows-solar-farms", "via": "", "real_tags": ["\u7535\u52a8\u6c7d\u8f66", "batteries", "\u521b\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "5930ea8c944162de167c2612c9c69a2f.jpeg", "infoid": 1006032, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9\u5e26\u5bbd\u7684\u9700\u6c42\u6b63\u5728\u63a8\u52a8\u50cfNiometrics\u8fd9\u6837\u7684\u7f51\u7edc\u8f6f\u4ef6\u4f9b\u5e94\u5546\u652f\u6301100 GbE\u7f51\u7edc\u63a5\u53e3\u63a7\u5236\u5668(NIC)\u3002\u6211\u4eec\u7684\u7f51\u7edc\u63a2\u6d4b\u5668\u4f7f\u7528\u6570\u636e\u5e73\u9762\u5f00\u53d1\u5de5\u5177\u5305(DPDK)\u7ed5\u8fc7Linux\u5185\u6838\uff0c\u5c06\u6d41\u91cf\u5b9a\u5411\u5230\u7528\u6237\u7a7a\u95f4\u3002\u8fd9\u6d88\u9664\u4e86NIC\u4e2d\u65ad\u7684\u5f00\u9500\uff0c\u4ee5\u5b9e\u73b0\u9ad8\u5e26\u5bbd\u5904\u7406\u901f\u7387\u3002\u7136\u800c\uff0c100GbE\u7f51\u5361\u5e26\u6765\u4e86\u65b0\u7684\u6311\u6218\u3002\u6211\u4eec\u9762\u4e34\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u5904\u7406\u5668\u95f4\u4e2d\u65ad(IPI)\u5bfc\u81f4\u8f83\u4f4e\u5e26\u5bbd\u7684\u96f6\u661f\u6570\u636e\u5305\u4e22\u5f03\uff0c\u6ca1\u6709\u660e\u663e\u7684\u62e5\u585e\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u8ba8\u8bba\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad\u3001\u4e2d\u65ad\u5904\u7406\u786c\u4ef6\u548c\u5185\u5b58\u7ba1\u7406\u5355\u5143\u3002\u5728\u7b2c\u4e8c\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u4ecb\u7ecd\u7531\u4e8e\u591a\u5957\u63a5\u5b57\u7cfb\u7edf\u4e2d\u7684\u4e2d\u65ad\u5904\u7406\u800c\u5bfc\u81f4\u7684\u6545\u969c\u6392\u9664\u3001\u8c03\u8bd5\u548c\u4fee\u590d\u95ee\u9898\u3002\n\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u4ecb\u7ecd\u4e00\u4e0b\u672c\u6587\u6d89\u53ca\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u73af\u5883\uff1a\n6TB\u5185\u5b58(\u4f7f\u7528hugepagesz=1G\u548chugepages=1024\u4e2a\u5185\u6838\u547d\u4ee4\u884c\u53c2\u6570\u4e3a\u6bcf\u4e2a\u63d2\u69fd\u4fdd\u7559256\u4e2a1G\u5927\u578b\u9875\u9762\uff0c\u4e3a\u5927\u578b\u9875\u9762\u4fdd\u75591 TB)\u3002\n\u4f7f\u7528Isolcpus\u3001NOHZ_FULL\u3001RCU_NOCBS\u548cRCU_NOCB_POLL\u5185\u6838\u547d\u4ee4\u884c\u53c2\u6570\u9694\u79bb\u6240\u6709\u5173\u952e\u5185\u6838\u5e76\u4f7f\u5176\u51e0\u4e4e\u65e0\u6296\u52a8\u3002\n\u5728\u4f7f\u7528DPDK\u7684\u7f51\u7edc\u63a2\u6d4b\u4e2d\uff0c\u6570\u636e\u5305\u63a5\u6536\u7531\u8f6e\u8be2\u6a21\u5f0f\u4e0b\u7684RX\u7ebf\u7a0b\u5904\u7406\u3002\u8fd9\u4e9b\u7ebf\u7a0b\u5728\u7d27\u5bc6\u5faa\u73af\u4e2d\u4e0d\u65ad\u8f6e\u8be2NIC RX\u73af\u4e2d\u7684\u6570\u636e\u5305\u3002\u901a\u8fc7\u5c06\u4e0a\u4e0b\u6587\u5207\u6362\u5230\u5185\u6838\u7a7a\u95f4\u6765\u5904\u7406\u4e2d\u65ad\uff0c\u4ece\u800c\u4e2d\u65ad\u201c\u4e2d\u65ad\u201d\u7528\u6237\u7a7a\u95f4\u4efb\u52a1\u7684\u6267\u884c\u3002\u8fd9\u4f1a\u5f15\u5165\u6296\u52a8\uff0c\u8fd9\u79cd\u6296\u52a8\u975e\u5e38\u7f55\u89c1\uff0c\u4e0d\u4f1a\u5f71\u54cd\u541e\u5410\u91cf\uff0c\u4f46\u5728100GbE\u7f51\u5361\u4e0a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e22\u5305\u3002\u589e\u52a0NIC RX\u73af\u5927\u5c0f(\u6216RX\u73af\u7684\u6570\u91cf)\u53ef\u4ee5\u7f13\u89e3\u6b64\u95ee\u9898\uff0c\u4f46\u5e76\u975e\u603b\u662f\u5982\u6b64\u3002\n\u5728\u6211\u4eec\u63cf\u8ff0\u6bcf\u79cd\u7c7b\u578b\u5982\u4f55\u5f71\u54cd\u9ad8\u6027\u80fd\u7cfb\u7edf\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770bAPIC\u7684\u5185\u5e55\u3002\nAPIC\u4ee3\u8868\u9ad8\u7ea7\u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668\u3002\u5728x86-64\u7cfb\u7edf\u4e2d\uff0c\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5904\u7406\u4e2d\u65ad\uff1a\n\u6bcf\u4e2aCPU\u7684\u672c\u5730APIC\u63a5\u6536\u4e2d\u65ad\uff0c\u5e76\u5c06\u8fd9\u4e9b\u4e2d\u65ad\u53d1\u9001\u5230\u5904\u7406\u5668\u5185\u6838\u8fdb\u884c\u5904\u7406\u3002\u4e2d\u65ad\u53ef\u80fd\u6765\u81ea\u5904\u7406\u5668\u7684\u4e2d\u65ad\u5f15\u811a\u3001\u5185\u90e8\u6e90\u548c\u5916\u90e8I/O APIC(\u6216\u5176\u4ed6\u5916\u90e8\u4e2d\u65ad\u63a7\u5236\u5668)\u3002\n\u5728\u5bf9\u79f0\u591a\u5904\u7406(SMP)\u7cfb\u7edf\u4e2d\uff0c\u672c\u5730APIC\u5411\u7cfb\u7edf\u603b\u7ebf\u4e0a\u7684\u5176\u4ed6\u903b\u8f91\u5904\u7406\u5668\u53d1\u9001IPI\u6d88\u606f\uff0c\u6216\u4ece\u7cfb\u7edf\u603b\u7ebf\u4e0a\u7684\u5176\u4ed6\u903b\u8f91\u5904\u7406\u5668\u63a5\u6536IPI\u6d88\u606f\u3002IPI\u6d88\u606f\u53ef\u7528\u4e8e\u5728\u7cfb\u7edf\u4e2d\u7684\u5904\u7406\u5668\u4e4b\u95f4\u5206\u914d\u4e2d\u65ad\u6216\u6267\u884c\u7cfb\u7edf\u8303\u56f4\u7684\u529f\u80fd(\u4f8b\u5982\u542f\u52a8\u5904\u7406\u5668\u6216\u5728\u4e00\u7ec4\u5904\u7406\u5668\u4e4b\u95f4\u5206\u914d\u5de5\u4f5c)\u3002\nI/O APIC\u662fIntel\u7cfb\u7edf\u82af\u7247\u7ec4\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u4ece\u7cfb\u7edf\u53ca\u5176\u5173\u8054\u7684I/O\u8bbe\u5907\u63a5\u6536\u5916\u90e8\u4e2d\u65ad\u4e8b\u4ef6\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u4e2d\u65ad\u6d88\u606f\u4e2d\u7ee7\u5230\u672c\u5730APIC\u3002\n\u5728SMP\u7cfb\u7edf\u4e2d\uff0cI/O APIC\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u7528\u4e8e\u5c06\u5916\u90e8\u4e2d\u65ad\u5206\u914d\u7ed9\u7cfb\u7edf\u603b\u7ebf\u4e0a\u9009\u5b9a\u5904\u7406\u5668\u6216\u5904\u7406\u5668\u7ec4\u7684\u672c\u5730APIC\u3002\n\u6211\u4eec\u4f7f\u7528irqBalance\u5b88\u62a4\u8fdb\u7a0b\u5c06\u6240\u6709\u5916\u90e8\u4e2d\u65ad\u5904\u7406\u4ece\u53c2\u4e0e\u6570\u636e\u5305\u5904\u7406\u7684\u9694\u79bb\u6838\u5fc3\u79fb\u81f3\u4e00\u7ec4\u4fdd\u7559\u7528\u4e8e\u4e2d\u65ad\u5904\u7406\u7684\u6838\u5fc3\u3002\u8fd9\u53ef\u786e\u4fdd\u5916\u90e8\u4e2d\u65ad\u4e0d\u4f1a\u5bf9\u9694\u79bb\u5185\u6838\u4e0a\u7684\u4efb\u52a1\u9020\u6210\u6296\u52a8\u3002\u5b83\u8fd8\u786e\u4fdd\u4e3aIRQ\u4eb2\u548c\u6027\u5206\u914d\u7684\u6838\u5fc3\u201c\u6700\u63a5\u8fd1\u201d\u8bbe\u5907\u7684NUMA\u8282\u70b9\u3002IRQBALANCE_BANDIRED_CPUS\u73af\u5883\u53d8\u91cf\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u9694\u79bb\u5185\u6838\u7684\u63a9\u7801\uff0c\u4ee5\u786e\u4fdd\u6ca1\u6709\u4e3a\u5b83\u4eec\u5206\u914d\u4e2d\u65ad\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u793a\u4f8b\u6765\u8bf4\u660e\u8fd9\u4e00\u70b9\u3002\n\u5728\u5185\u68382.6.21\u4e4b\u524d\uff0c\u8ba1\u65f6\u5668\u6ef4\u7b54\u4ee5CONFIG_HZ(\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a1000/\u79d2)\u7684\u901f\u7387\u5728\u6bcf\u4e2a\u5185\u6838\u4e0a\u8fd0\u884c\u3002\n\u65e0\u8ba1\u65f6\u5185\u6838(\u5728\u5185\u68382.6.21+\u4e2d)\u7981\u7528\u4e86\u7a7a\u95f2\u5185\u6838\u4e0a\u7684\u5185\u6838\u8ba1\u65f6\u5668\u8ba1\u65f6\u5668\u8ba1\u65f6\u3002\u8c03\u5ea6\u65f6\u949f\u4e2d\u65ad\u7528\u4e8e\u5f3a\u5236\u7e41\u5fd9\u7684\u5185\u6838\u8c03\u5ea6\u591a\u4e2a\u4efb\u52a1\uff0c\u800c\u7a7a\u95f2\u7684\u5185\u6838\u6ca1\u6709\u8981\u8c03\u5ea6\u7684\u4efb\u52a1\uff0c\u56e0\u6b64\u5b83\u4e0d\u9700\u8981\u8c03\u5ea6\u65f6\u949f\u4e2d\u65ad\u3002\nNOHZ_FULL\u5185\u6838\u547d\u4ee4\u884c\u53c2\u6570(\u5728\u5185\u68383.9+\u4e2d\u5f15\u5165)\u662f\u5728\u65e0\u8ba1\u65f6\u5185\u6838\u4e4b\u4e0a\u7684\u4f18\u5316\uff0c\u5b83\u5c06\u65e0\u8ba1\u65f6\u884c\u4e3a\u6269\u5c55\u5230\u53ea\u6709\u4e00\u4e2a\u8fd0\u884c\u4efb\u52a1\u7684\u5185\u6838\u3002\u4ecd\u7136\u9700\u8981\u4e3a\u8fdb\u7a0b\u7ba1\u7406\u64cd\u4f5c(\u5982\u8ba1\u7b97\u6838\u5fc3\u8d1f\u8f7d\u3001\u7ef4\u62a4\u8c03\u5ea6\u5e73\u5747\u503c\u7b49)\u6bcf\u79d2\u5b89\u6392\u4e00\u4e2a\u6ef4\u7b54\u3002\n\u5904\u7406\u5668\u95f4\u4e2d\u65ad\u5141\u8bb8CPU\u5411\u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6CPU\u53d1\u9001\u4e2d\u65ad\u4fe1\u53f7\u3002\u5b83\u4eec\u7531ARCH/x86/include/asm/entry_arch.h\u4e2d\u7684BUILD_INTERRUPT\u5b8f\u5b9a\u4e49\u3002\u5bf9\u4e8eSMP\u5185\u6838\uff0c\u201cSMP_\u201d\u4f4d\u4e8e\u51fd\u6570\u540d\u7684\u524d\u9762\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8eBUILD_INTERRUPT(CALL_Function_Interrupt\uff0cCall_Function_Vector)\uff0c\u8c03\u7528\u51fd\u6570\u4e2d\u65ad\u5411\u91cf\u7531SMP_CALL_Function_Interrupt()\u5904\u7406\u3002\u901a\u8fc7\u8c03\u7528send_ipi_all()\u3001send_ipi_allbutself()\u3001send_ipi_self()\u3001send_ipi_ask_allbuself()&amp\uff1bsend_ipi_ask()\u51fd\u6570\u6307\u9488\u6240\u6307\u5411\u7684\u51fd\u6570\u6765\u5f15\u53d1\u4e2d\u65ad\u3002\n\u547c\u53eb\u529f\u80fd\u4e2d\u65ad\u662f\u53ef\u4ee5\u53d1\u9001\u5230\u591a\u4e2aCPU\u7684IPI\u3002\u5b83\u662f\u901a\u8fc7\u8c03\u7528NATIVE_SEND_CALL_FUNC_IPI()\u5f15\u53d1\u7684\u3002\n\u547c\u53eb\u529f\u80fd\u5355\u6b21\u4e2d\u65ad\u662f\u4e00\u6b21\u53ef\u4ee5\u53d1\u9001\u5230\u4e00\u4e2aCPU\u7684IPI\u3002\u5b83\u662f\u901a\u8fc7\u8c03\u7528NATIVE_SEND_CALL_FUNC_SINGLE_IPI()\u5f15\u53d1\u7684\u3002\nTLB\u51fb\u843d\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684CAL\u4e2d\u65ad\uff0c\u5b83\u6709\u81ea\u5df1\u7684\u8ba1\u6570\u5668\uff0c\u5373/proc/interrupts\u4e2d\u7684TLB\u884c\u3002CAL\u8ba1\u6570\u5668\u4e0d\u5305\u62ecTLB\u51fb\u843d\u3002\n\u8981\u7406\u89e3TLB\u51fb\u843d\u4e2d\u65ad\u7684\u76ee\u7684\uff0c\u6211\u4eec\u9700\u8981\u7b80\u8981\u8ba8\u8bba\u5206\u9875\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u7528\u4e8e\u652f\u6301\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u7684\u5206\u9875\u3002\n\u903b\u8f91\u5730\u5740-\u5305\u62ec\u5728\u673a\u5668\u8bed\u8a00\u6307\u4ee4\u4e2d\u3002\u5b83\u7531\u7ebf\u6bb5\u548c\u504f\u79fb\u7ec4\u6210\u3002\n\u7ebf\u6027\u5730\u5740(\u865a\u62df\u5730\u5740)-\u5355\u4e2a48\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u6700\u9ad8\u53ef\u7528\u4e8e\u5bfb\u5740256TB\u3002\nMMU(\u5b58\u50a8\u5668\u7ba1\u7406\u5355\u5143)\u7684\u5206\u9875\u5355\u5143\u5c06\u7ebf\u6027\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u3002\u4e0b\u56fe\u8bf4\u660e\u4e86\u52304KB\u9875\u7684\u7ebf\u6027\u5730\u5740\u8f6c\u6362\u4e0e\u52301 GB\u9875\u7684\u7ebf\u6027\u5730\u5740\u8f6c\u6362\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u5c06\u7ebf\u6027\u5730\u5740\u8f6c\u6362\u4e3a4KB\u7269\u7406\u9875\u5730\u5740\u6d89\u53ca\u8bbf\u95ee4\u4e2a\u5b58\u50a8\u5668\u4f4d\u7f6e(PML4E\u3001PDPTE\u3001PDE&amp\uff1bPDE)\uff0c\u800c1 GB\u7269\u7406\u9875\u9762\u8bbf\u95ee\u6d89\u53ca\u8bbf\u95ee2\u4e2a\u5b58\u50a8\u5668\u4f4d\u7f6e(PML4E&amp\uff1bPDPTE)\u3002\u8fd9\u5c31\u662f\u8bbf\u95ee1 GB\u5927\u9875\u9762\u6bd4\u8bbf\u95ee4KB\u9875\u9762\u66f4\u5feb\u7684\u539f\u56e0\uff0c\u56e0\u6b64\u63a8\u8350DPDK\u4f7f\u7528\u3002\n\u8f6c\u6362\u540e\u5907\u7f13\u51b2\u5668(TLB)\u662f\u7528\u4e8e\u52a0\u901f\u7ebf\u6027\u5730\u5740\u8f6c\u6362\u7684\u7f13\u5b58\u3002\u5f53\u7b2c\u4e00\u6b21\u4f7f\u7528\u7ebf\u6027\u5730\u5740\u65f6\uff0c\u901a\u8fc7\u7f13\u6162\u8bbf\u95ee\u4e3b\u5b58\u50a8\u5668\u4e2d\u7684\u5206\u9875\u8868\u6765\u8ba1\u7b97\u76f8\u5e94\u7684\u7269\u7406\u5730\u5740\u3002\u7136\u540e\u5c06\u7269\u7406\u5730\u5740\u5b58\u50a8\u5728TLB\u6761\u76ee\u4e2d\uff0c\u4ece\u800c\u53ef\u4ee5\u5feb\u901f\u8f6c\u6362\u5bf9\u76f8\u540c\u7ebf\u6027\u5730\u5740\u7684\u8fdb\u4e00\u6b65\u5f15\u7528\u3002\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2aCPU\u90fd\u6709\u81ea\u5df1\u7684\u672c\u5730TLB\u3002\u4e0e\u786c\u4ef6\u9ad8\u901f\u7f13\u5b58\u76f8\u53cd\uff0cTLB\u7684\u76f8\u5e94\u6761\u76ee\u4e0d\u9700\u8981\u540c\u6b65\uff0c\u56e0\u4e3a\u5728\u4e0d\u540cCPU\u4e0a\u8fd0\u884c\u7684\u8fdb\u7a0b\u53ef\u80fd\u5c06\u76f8\u540c\u7684\u7ebf\u6027\u5730\u5740\u4e0e\u4e0d\u540c\u7684\u7269\u7406\u5730\u5740\u76f8\u5173\u8054\u3002\n\u5728\u540c\u4e00CPU\u4e0a\u7684\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5207\u6362\u65f6\uff0c\u4f1a\u53d1\u751fTLB\u5237\u65b0\u3002\u5f53\u4e24\u4e2a\u8fdb\u7a0b\u5171\u4eab\u76f8\u540c\u7684\u9875\u8868(\u4f8b\u5982\uff0c\u540c\u4e00\u8fdb\u7a0b\u7684\u7ebf\u7a0b)\u65f6\uff0c\u4e0d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\u4ece\u5e38\u89c4\u8fdb\u7a0b\u5207\u6362\u5230\u5185\u6838\u7ebf\u7a0b\u65f6\u4e0d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\n\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\uff0c\u5f53\u5237\u65b0CPU\u4e0a\u7684TLB\u65f6\uff0c\u5185\u6838\u8fd8\u5fc5\u987b\u5237\u65b0\u4f7f\u7528\u76f8\u540c\u9875\u8868\u96c6\u7684CPU\u4e0a\u7684\u76f8\u540cTLB\u6761\u76ee\u3002\u8fd9\u662f\u7531TLB\u51fb\u843d\u4e2d\u65ad\u5b8c\u6210\u7684\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u7ee7\u7eed\u56de\u987e\u5728\u6392\u9664\u4e0e\u4e2d\u65ad\u76f8\u5173\u7684\u6027\u80fd\u95ee\u9898\u65f6\u6240\u7ecf\u5386\u7684\u6b65\u9aa4\u3002\n\u6211\u4eec\u5fc5\u987b\u627e\u5230\u53d1\u9001\u5230\u8fd0\u884c\u5173\u952eRX\u7ebf\u7a0b\u7684\u5185\u6838\u7684\u4e2d\u65ad\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u76d1\u89c6\u5185\u6838\u7684\u4e2d\u65ad\u8ba1\u6570\u5668\u6765\u5b9e\u73b0\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u76d1\u89c6/proc/interrupts\u3002\n\u4ece\u811a\u672c\u7684\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230LOC\u5728\u8fd0\u884c\u5355\u4e2a\u7528\u6237\u7ebf\u7a0b\u7684NOHZ_FULL\u5185\u6838\u4e0a\u6bcf\u79d2\u4f20\u9012\u4e00\u6b21\u3002\u8fd9\u662f\u610f\u6599\u4e4b\u4e2d\u7684\u3002\u6b63\u5728\u4f20\u9001\u7684TLB\u4e2d\u65ad(\u6bcf\u79d26\u4e2a\u4e2d\u65ad)\u662f\u9700\u8981\u8fdb\u4e00\u6b65\u8c03\u8bd5\u7684\u4e2d\u65ad\u3002\n\u8981\u786e\u5b9a\u5904\u7406\u4e2d\u65ad\u7684CPU+\u5185\u6838\u51fd\u6570\uff0c\u6211\u4eec\u5fc5\u987b\u8ba1\u7b97\u51fa\u4e2d\u65ad\u8ba1\u6570\u5668\u9012\u589e\u7684\u4f4d\u7f6e\u3002\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u627e\u5230\u4e2d\u65ad\u8ba1\u6570\u5668\u7b26\u53f7\uff1aARCH/x86/kernel/irq.c\uff1aarcshow_interrupts()\u3002\u5904\u7406\u7a0b\u5e8f\u662f\u4f7f\u7528incirqstat()\u9012\u589e\u8ba1\u6570\u5668\u7684\u51fd\u6570\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0cTLB\u51fb\u843d\u5904\u7406\u7a0b\u5e8f\u4e3aFLUSH_TLB_FUNC()(\u7531CAL\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u8c03\u7528)\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u4e00\u6b65\u67e5\u770b\u8c03\u7528\u5806\u6808\uff0c\u4ee5\u627e\u51fa\u4e2d\u65ad\u4e2d\u6b63\u5728\u6267\u884c\u54ea\u4e9b\u5de5\u4f5c\u3002\u4f8b\u5982\uff0cCAL\u4e2d\u65ad\u53ef\u4ee5\u8c03\u7528\u8bb8\u591a\u4e0d\u540c\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\n\u4f7f\u7528trace-cmd\u5f55\u5236\u65f6\uff0c\u4f7f\u7528\u201ctrace-cmd show\u201d\u67e5\u770b\u8f93\u51fa\u3002\u4f7f\u7528\u201ctrace-cmd report\u201d\u67e5\u770btrace-cmd\u8bb0\u5f55\u5b8c\u6210\u540e\u4fdd\u5b58\u7684\u8f93\u51fa\u3002\n\u8981\u67e5\u770b\u5185\u6838\u4e0a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u6210\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528trace-cmd\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u79d2\u949f\u6211\u4eec\u5f97\u52307\u4e2a\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u5176\u4e2d6\u4e2a\u7528\u4e8eTLB\u51fb\u843dIPI\u5904\u7406\u7a0b\u5e8f\uff0c\u5360\u7528\u4e86\u5173\u952eRX\u7ebf\u7a0b\u5927\u7ea630-35\u5fae\u79d2\u7684\u65f6\u95f4\u3002\u6ce8\u610f\uff1aTLB IPI\u662fCAL IPI\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u56e0\u6b64\u5b83\u7684\u5904\u7406\u7a0b\u5e8f\u4eceSMP_CALL_Function_INTERRUPT()\u5f00\u59cb\u3002\n\u5728\u4ec5\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u9694\u79bbNOHZ_FULL\u5185\u6838\u4e0aLOC-1/\u79d2\u7684\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u6bb5\u3002\n\u5728I/O\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\u7684I/O\u8bf7\u6c42-\u7531\u4e8e\u4e0d\u5e73\u8861\uff0c\u6211\u4eec\u5e94\u8be5\u770b\u4e0d\u5230\u8fd9\u4e9b\u3002\n\u5728IPI\u60c5\u51b5\u4e0b\u5f15\u53d1\u4e2d\u65ad\u7684CPU+\u5185\u6838\u51fd\u6570\u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u7684\u7b26\u53f7\uff0c\u5e76\u901a\u8fc7\u8c03\u7528send_ipi_*\u51fd\u6570\u627e\u5230\u5f15\u53d1\u4e2d\u65ad\u7684\u51fd\u6570\u3002\n\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0cmunmap(2)\u7684\u7cfb\u7edf\u8c03\u7528\u8d1f\u8d23TLB\u51fb\u843d\u4e2d\u65ad\u3002\n\u6b65\u9aa43-\u8c03\u8bd5\u4ee3\u7801\u4ee5\u627e\u51fa\u8d1f\u8d23\u4e2d\u65ad\u7684\u7ebf\u7a0b\u6216\u4efb\u52a1\u6b63\u5728\u505a\u4ec0\u4e48\u3002\n\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\uff0c\u83b7\u53d6Mellanox NIC\u7edf\u8ba1\u4fe1\u606f\u7684DPDK\u8c03\u7528(\u4f7f\u7528FILE*\u64cd\u4f5c)\u8d1f\u8d23TLB\u51fb\u843d\u4e2d\u65ad\uff01\n\u4ece\u4e0a\u9762\u7684\u8c03\u8bd5\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0fclose(3)\u5728\u8bfb\u53d6NIC\u7684Out_Of_Buffer\u8ba1\u6570\u5668(MLX5PMD\u7684imiss\u8ba1\u6570\u5668)\u65f6\u8c03\u7528\u4e86munmap(2)\u3002\u96f6\u661f\u53d1\u751f\u7684\u6570\u636e\u5305\u4e22\u5f03\u662f\u7531\u4e8e\u8bfb\u53d6\u6570\u636e\u5305\u4e22\u5f03\u8ba1\u6570\u5668\u9020\u6210\u7684\u3002\u4f7f\u60c5\u51b5\u66f4\u52a0\u590d\u6742\u7684\u662f\uff0c\u8fd9\u4e9b\u6db2\u6ef4\u662f\u7531\u53e6\u4e00\u4e2a\u540d\u4e3arx_discards_phy\u7684\u8ba1\u6570\u5668\u8ba1\u6570\u7684\u3002\u5c31\u50cf\u859b\u5b9a\u8c14\u8457\u540d\u7684\u601d\u7ef4\u5b9e\u9a8c\u4e00\u6837\uff0c\u8fd9\u4e9b\u6db2\u6ef4\u76f4\u5230\u8bfb\u5230\u6db2\u6ef4\u8ba1\u6570\u5668\u540e\u624d\u51fa\u73b0\u3002\nfscanf(3)\u8c03\u7528\u5bfc\u81f4\u6587\u4ef6\u88abmmap\u2018\u5316\u3002\u968f\u540e\u7684fclose(3)\u5bfc\u81f4\u8c03\u7528munmap(2)\uff0c\u901a\u8fc7\u5bf9\u8c03\u7528fclose(3)\u7684\u5185\u6838\u6267\u884cTLB\u5237\u65b0\u64cd\u4f5c\uff0c\u4eceTLB\u91ca\u653e\u4e0e\u6587\u4ef6\u7f13\u51b2\u533a\u7684\u7269\u7406\u5730\u5740\u76f8\u5173\u8054\u7684\u7ebf\u6027\u5730\u5740\u3002\u8fd9\u8fd8\u4f1a\u5c06TLB\u51fb\u843d\u53d1\u9001\u5230\u6267\u884c\u540c\u4e00\u8fdb\u7a0b\u7684\u6240\u6709\u7ebf\u7a0b(\u5305\u62ec\u5173\u952eRX\u7ebf\u7a0b)\u7684\u6240\u6709\u5185\u6838\u3002\u4fee\u590d\u65b9\u6cd5\u662f\u7528open(2)/read(2)/close(2)\u8c03\u7528\u66ff\u6362\u6587\u4ef6\u6d41\u64cd\u4f5c\u3002\u5411DPDK\u548cMellanox\u62a5\u544a\u4e86\u8be5\u9519\u8bef\u53ca\u5176\u4fee\u590d\uff0c\u5e76\u63a5\u53d7\u4e86\u8be5\u8865\u4e01\u3002\n\u907f\u514d\u8c03\u7528\u4e0a\u8ff0\u4efb\u4f55\u7cfb\u7edf\u8c03\u7528\u7684C\u5e93\u51fd\u6570\uff0c\u6216\u8005\u627e\u51fa\u89e3\u51b3\u529e\u6cd5\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e9bC\u5e93\u8c03\u7528\u3002\u4f8b\u5982\uff0cFile*C\u5e93\u8c03\u7528\u53ef\u4ee5\u4e0e\u4f7f\u7528setvbuf(3)\u8bbe\u7f6e\u7684\u7528\u6237\u7f13\u51b2\u533a\u4e00\u8d77\u4f7f\u7528\u3002\nTLB\u51fb\u843d\u7684\u5f71\u54cd\u968f\u7740\u5185\u6838\u548c\u63d2\u69fd\u6570\u91cf\u7684\u589e\u52a0\u800c\u589e\u52a0\uff0c\u56e0\u4e3a\u51fb\u843d\u7684\u542f\u52a8\u5668\u5185\u6838\u5fc5\u987b\u7b49\u5f85\u5b83\u5411\u5176\u53d1\u9001IPI\u7684\u6240\u6709\u5185\u6838\u7684\u786e\u8ba4\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u7531\u4e8eTLB\u51fb\u843d\u53cc\u63d2\u69fd\u673a\u5668\u5bfc\u81f4\u7684\u4e22\u5305\u7387\u8f83\u4f4e\uff0c\u8be5\u673a\u5668\u7684\u5185\u6838\u6570\u91cf\u662f\u672c\u6587\u6240\u8ff0\u8bbe\u7f6e\u7684\u4e00\u534a\u3002\n\u201c\u8c01\u7167\u770b\u7740\u770b\u5b88\u4eba\uff1f\u201d\u6ce8\u610f\u60a8\u7684\u5ea6\u91cf\u5de5\u5177\u548c\u4ee3\u7801\u4f1a\u7ed9\u5173\u952e\u7ebf\u7a0b\u5e26\u6765\u66f4\u591a\u7684\u4e2d\u65ad\u548c\u6296\u52a8\u3002\u4f8b\u5982\uff0ctrace-cmd\u548cperf\u7b49\u5de5\u5177\u672c\u8eab\u4f7f\u7528IPI\u8fdb\u884c\u8ddf\u8e2a\u548c\u6d4b\u91cf\u3002", "note_en": "The demand for bandwidth is pushing network software vendors like  Niometrics to support 100GbE Network Interface Controllers (NICs). Our network probe uses Data Plane Development Kit ( DPDK) to bypass the Linux kernel and direct traffic to user space. This eliminates the overhead of NIC interrupts to achieve high bandwidth processing rates. The 100GbE NICs, however, brought new challenges. One of the issues we faced was that Interprocessor Interrupts ( IPIs) were causing sporadic packet drops at lower bandwidths with no apparent congestion. In the first part of this post we briefly discuss the different types of interrupts, interrupt handling hardware and the memory management unit. In the second part we offer a glimpse into troubleshooting, debugging and fixing issues due to the interrupt handling in multi-socket systems.\n  Before we start, a description of the hardware and software environment involved in this article:\n 6TB of memory (1 TB reserved for huge pages using   hugepagesz=1G and   hugepages=1024 kernel command line arguments to reserve 256 1G huge pages per socket)\n    All critical cores are isolated and made jitter-free (almost) using   isolcpus,   nohz_full,   rcu_nocbs and   rcu_nocb_poll kernel command line parameters\n   In a network probe using  DPDK, packet reception is handled by RX threads in polling mode. These threads constantly poll the NIC RX rings for packets in a tight loop. Interrupts \u201cinterrupt\u201d the execution of user space tasks by causing a context switch to kernel space to handle the interrupt. This introduces jitter which is too rare to affect throughput, but on 100GbE NICs it can cause packet drops. Increasing the NIC RX ring size (or the number of RX rings) can mitigate this, but not always.\n   Before we describe how each type affects a high performance system, let\u2019s take a look under the hood of the APIC.\n  APIC stands for   Advanced Programmable Interrupt Controller. In x86\u201364 systems, interrupts are handled by:\n   The per CPU local APIC receives interrupts and sends these to the processor core for handling. Interrupts can come from the processor\u2019s interrupt pins, internal sources and an external I/O APIC (or other external interrupt controller).\n In Symmetric Multiprocessing (SMP) systems, the local APIC sends and receives  IPI messages to and from other logical processors on the system bus.  IPI messages can be used to distribute interrupts among the processors in the system or to execute system-wide functions (such as booting up processors or distributing work among a group of processors).\n  The I/O APIC is part of Intel\u2019s system chip set which receives external interrupt events from the system and its associated I/O devices and relays them to the local APIC as interrupt messages.\n In SMP systems, the I/O APIC also provides a mechanism for distributing external interrupts to the local APICs of selected processors or groups of processors on the system bus.\n   We use the    irqbalance daemon to move all external interrupts handling away from isolated cores participating in packet processing to a set of cores reserved for the purpose of interrupt handling. This ensures external interrupts do not cause jitter for tasks on isolated cores. It also ensures IRQ affinity is assigned cores \u201cclosest\u201d to the NUMA node of device. The   IRQBALANCE_BANNED_CPUS environment variable must be set to the mask of isolated cores to ensure no interrupts are assigned to them. Following are some examples to illustrate this.\n        Prior to kernel 2.6.21, the timer tick ran on every core at the rate of CONFIG_HZ (by default, 1000/sec).\n Tickless kernel (in kernels 2.6.21+) disabled the kernel timer tick on idle cores. The scheduling-clock interrupt is used to force a busy core to schedule multiple tasks, and an idle core has no tasks to schedule so it does not require the scheduling-clock interrupt.\n The   nohz_full kernel command line parameter (introduced in kernel 3.9+) is an optimisation on top of the tickless kernel that extends the tickless behaviour to cores which have only one running task. There is still a need to schedule a tick every second for process management operations like calculating core load, maintaining scheduling average, etc.\n   Interprocessor interrupts allow a CPU to send interrupt signals to any other CPU in the system. They are defined by the   BUILD_INTERRUPT macro in  arch/x86/include/asm/entry_arch.h. For SMP kernels, \u201csmp_\u201d is prepended to the function name. E.g., for   BUILD_INTERRUPT(call_function_interrupt, CALL_FUNCTION_VECTOR) the call function interrupt vector is handled by  smp_call_function_interrupt(). An interrupt is raised by calling functions pointed to by  send_IPI_all( ), send_IPI_allbutself( ), send_IPI_self( ), send_IPI_mask_allbutself() &amp; send_IPI_mask() function pointers.\n     The Call Function Interrupt is an  IPI which can be sent to many CPUs. It is raised by calling  native_send_call_func_ipi().\n The Call Function Single Interrupt is an  IPI which can be sent to one CPU at a time. It is raised by calling  native_send_call_func_single_ipi().\n   The TLB shootdown is a special type of CAL interrupt which has its own counter, the TLB line in  /proc/interrupts. The CAL counter does not include TLB shootdowns.\n To understand the purpose of TLB shootdown interrupts, we need to briefly discuss how paging works, because they are used for supporting paging on multiprocessors systems.\n   Logical addresses \u2014 Included in the machine language instructions. It consists of segment and offset.\n Linear addresses (virtual addresses) \u2014 A single 48-bit unsigned integer that can be used to address up to 256TB.\n The paging unit of the MMU (Memory Management Unit) converts linear addresses to physical addresses. The diagrams below illustrate the linear address translation to a 4KB page vs a 1GB page.\n  In brief, converting a linear address to a 4KB physical page address involves accessing 4 memory locations (PML4E, PDPTE, PDE &amp; PDE), while a 1GB physical page access involves accessing 2 memory locations (PML4E &amp; PDPTE). This is why accessing a 1GB huge page is faster than accessing a 4KB page and hence  recommended for use by  DPDK.\n  Translation Lookaside Buffers (TLB) are caches used to speed up linear address translation. When a linear address is used for the first time, the corresponding physical address is computed through  slow accesses to the paging tables in main memory. The physical address is then stored in a TLB entry so that further references to the same linear address can be quickly translated. In a multiprocessor system, each CPU has its own local TLB. Contrary to the hardware cache, the corresponding entries of the TLB need not be synchronised, because processes running on different CPUs may associate the same linear address with different physical ones.\n A TLB flush occurs when switching between 2 processes on same CPU. It does not occur when 2 processes share the same page tables (e.g. threads of same process). It does not occur when switching from a regular process to a kernel thread.\n On multiprocessor systems, when flushing the TLB on a CPU, the kernel must also flush the same TLB entry on the CPUs that are using the same set of page tables. This is done by TLB shootdown interrupts.\n   We now proceed with a retracing of the steps we went through in troubleshooting our interrupt-related performance problems.\n  We had to find the interrupts delivered to cores running the critical RX threads. This can be done by monitoring the interrupt counters for the cores. A simple script can be used to monitor  /proc/interrupts.\n   From the output of the script, we see that LOC is delivered once every second on a   nohz_full core running a single user thread. This is  expected. The TLB interrupts being delivered (6 interrupts/second) are the ones that need to be debugged further.\n     To determine the CPU+kernel function which processes the interrupt, we have to figure out where the interrupt counter is incremented. The interrupt counter symbol can be found here:  arch/x86/kernel/irq.c: arch_show_interrupts(). The handler is the function which increments the counter using inc_irq_stat(). In some cases there is only one interrupt handler. E.g. TLB shootdown handler is flush_tlb_func() (called by interrupt handler of CAL). In other cases we need to look further up the call stack to figure out what work is being done in interrupt. E.g. CAL interrupts can call one of many different functions.\n  Use \u201ctrace-cmd show\u201d to view output while recording with  trace-cmd. Use \u201ctrace-cmd report\u201d to view the output saved after  trace-cmd record finishes.\n   To see the cost of the interrupt handlers on the core, we can use  trace-cmd as follows.\n   From above output we can see that every second we get 7 context switches with 6 of them for the TLB shootdown  IPI handler taking up roughly 30\u201335 microseconds from critical RX thread. NOTE: TLB  IPI is a form of CAL  IPI hence its handler starts from smp_call_function_interrupt().\n   Time period in case of LOC \u2014 1/second on an isolated,   nohz_full core executing one thread only.\n I/O request in case of I/O interrupts \u2014 we shouldn\u2019t see these due to    irqbalance.\n CPU+kernel function which raises the interrupt in case of  IPI  Lookup the symbol of the interrupt vector and find the function raising the interrupt via call to send_IPI_* function.\n    From the above output, we can see that the system call of  munmap(2) is responsible for the TLB shootdown interrupt.\n Step 3 \u2014 Debug Code to Find Out What the Thread or Task Responsible for the Interrupt Is Doing\n  From above output, the  DPDK call for getting Mellanox NIC stats (using  FILE * operations) is responsible for the TLB shootdown interrupt!\n  From debug output above we discovered that the  munmap(2) was being called by  fclose(3) while reading the   out_of_buffer counter for the NIC which is the MLX5 PMD\u2019s   imiss counter. The packet drops which were happening sporadically were due to the read of the packet drop counter. To complicate matters even further these drops were counted by a different counter called   rx_discards_phy. Like Schr\u00f6edinger\u2019s famous thought experiment, these drops were not present until the drop counters were read.\n The  fscanf(3) call leads to the file being mmap\u2019ed. The subsequent  fclose(3) causes  munmap(2) to be called which releases the linear address associated with the physical address of file buffer from TLB by means of a TLB flush operation on the core calling  fclose(3). This also sends TLB shootdowns to all the cores executing threads (including critical RX threads) of the same process. The fix was to replace the file stream operations with  open(2)/ read(2)/ close(2) calls. The  bug and its fix were reported to  DPDK and Mellanox and the  patch was accepted.\n  Avoid C library functions which call any of the above system calls or figure out a workaround to continue using those C library calls. E.g. FILE * C library calls can be used with user buffer set using  setvbuf(3).\n The impact of TLB shootdowns increases with the number of cores and sockets, because the initiator core of the shootdown has to wait for acknowledgment from all the cores to which it sent the  IPI. We noticed fewer packet drops due to TLB shootdown on a 2-socket machine containing half of the number of cores of the setup described in this post.\n \u201cWho watches the watchmen?\u201d Be careful of your measurement tools and code introducing more interrupts and jitter to critical threads. E.g. Tools like  trace-cmd and  perf themselves use  IPIs for tracing and measurement.", "posttime": "2020-06-11 00:29:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u859b\u5b9a\u8c14,dinger,\u4e2d\u65ad", "title": "\u859b\u5b9a\u8c14\u4e22\u5305", "title_en": "Schr\u00f6dinger\u2019s Packet Drops", "transed": 1, "url": "https://medium.com/niometrics-tech-blog/schrodingers-packet-drops-e1556af3e228", "via": "", "real_tags": ["\u859b\u5b9a\u8c14", "dinger", "\u4e2d\u65ad"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006031, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PineTab\u9644\u5e26\u5b89\u88c5\u4e86UBports OS\u7248\u672c\u3002\u8bf7\u6ce8\u610f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6784\u5efa\u4ecd\u5904\u4e8e\u6d4b\u8bd5\u9636\u6bb5\uff0c\u867d\u7136\u5927\u591a\u6570\u6838\u5fc3\u529f\u80fd\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u67d0\u4e9b\u5143\u7d20\u4ecd\u5728\u8fdb\u884c\u4e2d\u3002\n\u7531\u4e8eCOVID19\u5927\u6d41\u884c\u5bfc\u81f4\u822a\u73ed\u51cf\u5c11\u548c\u56fd\u5bb6\u8fb9\u5883\u5173\u95ed\uff0cPineTab\u53ea\u80fd\u5355\u72ec\u8ba2\u8d2d\uff0c\u5176\u4ed6PINE64\u9879\u76ee\u9700\u8981\u5355\u72ec\u8ba2\u8d2d\u3002\n\u5f3a\u70c8\u5efa\u8bae\u5728\u5927\u6d41\u884c\u671f\u95f4\u9009\u62e9DHL\u5feb\u4ef6\uff0c\u7279\u522b\u662f\u6807\u51c6\u548c\u5feb\u4ef6\u4e4b\u95f4\u7684\u4ef7\u683c\u5dee\u8ddd\u8f83\u5c0f\u3002\n\u5c3a\u5bf8\uff1a258 mm x 170 mm x 11.2 mm(\u4ec5\u9650\u5e73\u677f\u7535\u8111)\uff1b262 mm x 180 mm x 21.1 mm(\u5e26\u952e\u76d8\u7684\u5e73\u677f\u7535\u8111)\u3002\nUSB\uff1a1x\u5168USB 2.0 A\u7c7b\u4e3b\u673a\u7aef\u53e3\u30011x\u5fae\u578bUSB OTG\u7aef\u53e3(\u53ef\u7528\u4f5c\u6162\u901f\u5145\u7535\u7aef\u53e3)\u3002\n\u7531\u4e8ePineTab\u5305\u542b\u9502\u79bb\u5b50\u7535\u6c60\uff0c\u56e0\u6b64PineTab\u8ba2\u5355\u7684\u53d1\u8d27\u5904\u7406\u65b9\u5f0f\u5c06\u4e0e\u5176\u4ed6Pine64\u4ea7\u54c1\u4e0d\u540c\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u5141\u8bb8\u5c06PineTab\u4e0e\u5176\u4ed6Pine64\u4ea7\u54c1\u8ba2\u5355\u76f8\u7ed3\u5408\u7684\u539f\u56e0\u3002\u4e0d\u4fbf\u4e4b\u5904\uff0c\u656c\u8bf7\u539f\u8c05\u3002\n\u5c11\u91cf(1-3)\u50cf\u7d20\u7c98\u6ede\u6216\u6b7b\u50cf\u7d20\u662fLCD\u5c4f\u5e55\u7684\u7279\u5f81\u3002\u8fd9\u4e9b\u90fd\u662f\u6b63\u5e38\u7684\uff0c\u4e0d\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u7f3a\u9677\u3002\n\u5728\u5b8c\u6210\u8d2d\u4e70\u65f6\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u4ee5\u8fd9\u4e2a\u4ef7\u683c\u5411PINE64\u793e\u533a\u63d0\u4f9bPineTab\u4f5c\u4e3a\u793e\u533a\u670d\u52a1\u3002\u5982\u679c\u60a8\u8ba4\u4e3a\u4e00\u4e2a\u5fae\u5c0f\u7684\u4e0d\u6ee1\uff0c\u4f8b\u5982\u4e00\u4e2a\u6b7b\u50cf\u7d20\uff0c\u4f1a\u4fc3\u4f7f\u60a8\u63d0\u4ea4PayPal\u4e89\u8bae\uff0c\u90a3\u4e48\u8bf7\u4e0d\u8981\u8d2d\u4e70PineTab\u3002\u8c22\u8c22\u3002", "note_en": "The PineTab comes with UBports OS build installed. Please note that the OS build is still in a beta stage, and while most core functionality works, some elements remain a work-in-progress.\n Due to COVID19 pandemic causing reduce flight and country border closing, the PineTab can only order alone and other PINE64 items needs to be order separately.\n Strongly advise selecting DHL express shipment during pandemic time, especially the price gap between standard and express shipment is small.\n  Dimensions: 258mm x 170mm x 11.2mm (tablet alone); 262mm x 180mm x 21.1mm (tablet with keyboard)\n              USB: 1x full USB 2.0 Type A host port, 1x micro USB OTG port (can be use as slow charging port)\n       Since the PineTab contains a Lithium-ion battery, the shipment of PineTab orders will be handled differently from other Pine64 products. This is why we didn\u2019t allow combining the PineTab with other Pine64 product orders. Sorry for any inconvenience caused.\n Small numbers (1-3) of stuck or dead pixels are a characteristic of LCD screens. These are normal and should not be considered a defect.\n When fulfilling the purchase, please bear in mind that we are offering the PineTab at this price as a community service to PINE64 communities. If you think that a minor dissatisfaction, such as a dead pixel, will prompt you to file a PayPal dispute then please do not purchase the PineTab. Thank you.", "posttime": "2020-06-11 00:12:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u952e\u76d8,\u7535\u8111,tablet,pinetab", "title": "Pinetab-10.1\u82f1\u5bf8Linux\u5e73\u677f\u7535\u8111\uff0c\u5e26\u5206\u79bb\u5f0f\u80cc\u5149\u952e\u76d8", "title_en": "Pinetab \u2013 10.1\u2033 Linux Tablet with Detached Backlit Keyboard", "transed": 1, "url": "https://store.pine64.org/?product=pinetab-10-1-linux-tablet-with-detached-backlit-keyboard", "via": "", "real_tags": ["linux", "\u952e\u76d8", "\u7535\u8111", "tablet", "pinetab"]}, {"category": "", "categoryclass": "", "imagename": "0b735d0daac4fcbba8e0cad0b14e0a3b.jpg", "infoid": 1006030, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c31\u50cf\u4e16\u754c\u4e0a\u6570\u4ee5\u5343\u8ba1\u7684\u5176\u4ed6\u98de\u884c\u5458\u4e00\u6837\uff0c\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u4ed6\u4eec\u770b\u5230\u81ea\u5df1\u7684\u98de\u884c\u5192\u9669\u6d3b\u52a8\u6216\u591a\u6216\u5c11\u5730\u51cf\u5c11\u4e86\u3002\u4f60\u53ef\u80fd\u4f1a\u60f3\uff0c\u73b0\u5728\u662f\u65f6\u5019\u5347\u7ea7\u5230\u4e00\u67b6\u66f4\u8fd0\u52a8\u7684\u98de\u673a\u4e86\uff0c\u4e00\u67b6\u6709\u70b9\u523a\u6fc0\u7684\u98de\u673a\uff0c\u5f53\u4f60\u6ed1\u884c\u7ecf\u8fc7\u65f6\uff0c\u8fd9\u67b6\u98de\u673a\u53ef\u80fd\u4e5f\u4f1a\u6210\u4e3a\u4eba\u4eec\u5728\u5761\u9053\u4e0a\u6307\u7684\u4e1c\u897f\u3002\u55b7\u6c14\u5f0f\u6218\u9e1f\u600e\u4e48\u6837\uff1f\n\u4e54\u6069\u00b7\u5e03\u5170\u5207\u7279(Jon Blanchette)\uff0c\u524d\u901a\u7528\u6c7d\u8f66(General Motors)\u5de5\u7a0b\u5e08\u548c\u7f8e\u56fd\u6d77\u519b\u519b\u5b98\uff0c\u521a\u521a\u5c06\u4ed6\u7684\u7ecf\u5178\u7c73\u683c-17PF\u6218\u6597\u673a\u5728\u7ebd\u7ea6\u57c3\u5c14\u8fc8\u62c9\u6302\u724c\u51fa\u552e\u3002\u5e03\u5170\u5207\u7279\u4e8e1993\u5e74\u4ece\u6ce2\u5170\u5e9f\u589f\u4e2d\u83b7\u6551\uff0c\u4ed6\u82b1\u4e8615\u5e74\u65f6\u95f4\u5c06\u8fd9\u8258\u91d1\u5c5e\u5916\u58f3\u6539\u9020\u6210\u4e16\u754c\u4e0a\u552f\u4e00\u4e00\u67b6\u9002\u5408\u98de\u884c\u7684\u8fd9\u79cd\u578b\u53f7\u7684\u98de\u673a\u3002\u4ed6\u7684\u7c73\u683c\u6210\u4e3a\u4e86\u822a\u5c55\u660e\u661f\uff0c\u770b\u8d77\u6765\u548c60\u5e74\u524d\u7b2c\u4e00\u6b21\u5347\u7a7a\u65f6\u4e00\u6837\u98de\u884c\u3002\u4eca\u5929\uff0c\u4fee\u590d\u540e\u7684\u7c73\u683c-17PF\u53ef\u4ee5\u5b89\u5168\u5730\u6267\u884c\u5b8c\u6574\u7684\u7279\u6280\u98de\u884c\u7a0b\u5e8f\uff0c\u5305\u62ec\u5012\u98de\u548c\u7d27\u51d1\u76848-G\u8f6c\u5f2f\u3002\u8fd9\u662f\u5728\u5c3c\u4e9a\u52a0\u62c9\u96f7\u9706\u822a\u5c55\u671f\u95f4\u9a7e\u9a76\u8231\u5185\u7684\u666f\u8272\u3002\n\u7c73\u683c-17PF\u662f\u82cf\u8054\u7a7a\u519b\u548c\u671d\u9c9c\u7a7a\u519b\u572820\u4e16\u7eaa50\u5e74\u4ee3\u9a7e\u9a76\u7684\u6700\u521d\u7c73\u683c-15\u7684\u5347\u7ea7\uff0c\u662f\u7b2c\u4e00\u67b6\u80fd\u591f\u5728\u591c\u95f4\u548c\u6076\u52a3\u5929\u6c14\u4e0b\u98de\u884c\u7684\u82cf\u8054\u6218\u6597\u673a\u3002\u5728\u8d8a\u5357\u51b2\u7a81\u671f\u95f4\uff0c\u5317\u8d8a\u4e5f\u66fe\u4f7f\u7528\u7c73\u683c-17PF\u6765\u5bf9\u4ed8\u7f8e\u56fd\u6218\u6597\u673a\u3002\u7c73\u683c-17PF\u56e0\u5176\u673a\u52a8\u6027\u548c\u901f\u5ea6\u800c\u5907\u53d7\u559c\u7231\uff0c\u4e8b\u5b9e\u8bc1\u660e\u5b83\u662f\u7f8e\u56fdF-4\u5e7b\u5f71II\u7684\u53ef\u6015\u5bf9\u624b\u3002\u867d\u7136\u98de\u673a\u4e0d\u4f1a\u7a81\u7834\u97f3\u969c\uff0c\u4f46\u914d\u5907\u52a0\u529b\u71c3\u70e7\u5ba4\u768417\u53ef\u4ee5\u975e\u5e38\u63a5\u8fd1\u3002\u7c73\u683c-17PF\u4e00\u76f4\u5728\u670d\u5f79\uff0c\u76f4\u523020\u4e16\u7eaa60\u5e74\u4ee3\u521d\u88ab\u7c73\u683c21-13\u53d6\u4ee3\u3002\n\u201c\u5b83(\u7c73\u683c-17PF)\u4e00\u76f4\u662f\u6211\u4e00\u751f\u4e2d\u6700\u6709\u6fc0\u60c5\u7684\u9879\u76ee\uff0c\u201d\u5e03\u5170\u5207\u7279\u8bf4\u3002\u201c\u6211\u4e3a\u6211\u80fd\u7528\u8fd9\u67b6\u98de\u673a\u53d6\u5f97\u7684\u6210\u5c31\u611f\u5230\u65e0\u6bd4\u81ea\u8c6a\uff0c\u6211\u5e0c\u671b\u5b83\u80fd\u7ed9\u4e0b\u4e00\u4f4d\u673a\u4e3b\u5e26\u6765\u540c\u6837\u7684\u559c\u60a6\u548c\u6ee1\u8db3\u611f\u3002\u201d\u6709\u5173\u8fd9\u79cd\u7a00\u6709\u6218\u9e1f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8054\u7cfb\u5f17\u62c9\u5fb7\u00b7\u5fb7\u62c9\u5179\u591a\u7ef4\u5947(Vlad Drazdovich)\uff0c\u7535\u5b50\u90ae\u4ef6\uff1avlad@redbanyan.com\u3002", "note_en": "Like thousands of other pilots around the world who have watched their flying adventures curtailed to one degree or another over the past few months, you might be thinking this is the time to step up to a sportier airplane, one with a bit of a kick to it, an airplane that might also be something people point to on the ramp when you taxi by. How about a jet warbird?\n Jon Blanchette, a former General Motors engineer and US Navy officer just put his classic MiG-17PF fighter up for sale in Elmira, New York. Rescued from a Polish scrapyard in 1993, Blanchette spent 15 years transforming the hulk of metal back into the only  airworthy copy of this airplane type anywhere in the world. His MiG became an airshow star that looks and flies as it did when it first took to the air six decades ago. Today, the restored MiG-17PF can safely perform a full aerobatic routine, including inverted flight and tight 8-G turns. Here\u2019s a  view from the cockpit during the Thunder of Niagara Airshow.\n The MiG-17PF is an upgrade of the original MiG-15 flown by the Soviet Air Force as well as the North Korean Air Force during the 1950s and was the first Soviet fighter capable of operating at night and during inclement weather. The MiG-17PF was also used by the North Vietnamese against US fighters during the Vietnam conflict. Loved for its maneuverability and speed, the MiG-17PF proved to be a fearsome opponent for the US F-4 Phantom II. Though the airplane won\u2019t break the sound barrier, the afterburner-equipped 17 can come pretty close. The MiG-17PF remained in service until replaced by the MiG 21-13, in the early 1960s.\n \u201cIt [the MiG-17PF] has been the biggest passion project of my life,\u201d Blanchette says. \u201cI am incredibly proud of what I was able to accomplish with this aircraft, and I hope that it will bring the same amount of joy and fulfillment to its next owner.\u201d More information on this rare warbird is available from Vlad Drazdovich at  vlad@redbanyan.com.", "posttime": "2020-06-11 00:11:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9002\u5408,airworthy,\u7f8e\u56fd", "title": "\u6700\u540e\u4e00\u67b6\u9002\u5408\u98de\u884c\u7684\u7c73\u683c-17\u5373\u5c06\u51fa\u552e", "title_en": "Last Airworthy MiG-17 Is Up for Sale", "transed": 1, "url": "https://www.flyingmag.com/story/aircraft/last-airworthy-mig-17-for-sale/", "via": "", "real_tags": ["\u9002\u5408", "airworthy", "\u7f8e\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "d0bbbcf0ec5f1db4b54763c4697a0408.gif", "infoid": 1006029, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b9e\u65f6\u76ee\u6807\u68c0\u6d4b\u6280\u672f\u53d1\u5c55\u8fc5\u901f\u3002\u6539\u5584\u7684\u901f\u5ea6\u751a\u81f3\u66f4\u5feb\u3002\u7ed3\u679c\u4ee4\u4eba\u9707\u60ca\u3002\n3\u670818\u65e5\uff0c\u8c37\u6b4c\u5f00\u6e90\u4e86\u4ed6\u4eec\u7684EfficientDet\u5b9e\u73b0\uff0c\u8fd9\u662f\u4e00\u79cd\u4e0d\u540c\u89c4\u6a21\u7684\u5feb\u901f\u57f9\u8bad\u6a21\u578b\uff0c\u5176\u4e2d\u4e4b\u4e00\u63d0\u4f9b\u5b9e\u65f6\u8f93\u51fa\u30024\u670823\u65e5\uff0cAlexey Bochoviskiy\u7b49\u4eba\u3002\u5f00\u6e90\u7684YOLOv4\u30026\u67089\u65e5\uff0cGlenn Jocher\u5f00\u6e90\u5b9e\u73b0\u4e86YOLOv5\u3002\n\u8df3\u8fc7\u8fd9\u7bc7\u4fe1\u606f\u5e16\u5b50\uff0c\u76f4\u63a5\u8df3\u5230\u6211\u4eec\u7684YOLOv5\u6559\u7a0b\u3002\u51e0\u5206\u949f\u5185\uff0c\u60a8\u5c31\u53ef\u4ee5\u5728\u60a8\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u4e0a\u62e5\u6709\u8bad\u7ec3\u6709\u7d20\u7684YOLOv5\u6a21\u578b\u3002\nYOLO(\u4f60\u53ea\u770b\u4e00\u6b21)\u662fPJ\u00b7\u96f7\u8fea(PJ Reddie)\u6700\u521d\u57282016\u5e74\u51fa\u7248\u7684\u4e00\u672c\u4e66\u4e2d\u521b\u9020\u7684\u4e00\u7cfb\u5217\u6a21\u7279\u3002YOLO\u578b\u53f7\u4ee5\u5176\u9ad8\u6027\u80fd\u548c\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5c0f\u5de7\u800c\u81ed\u540d\u662d\u8457\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u6210\u4e3a\u5b9e\u65f6\u6761\u4ef6\u548c\u8bbe\u5907\u90e8\u7f72\u73af\u5883\u7684\u7406\u60f3\u5019\u9009\u8005\u3002\nPJ Reddie\u7684\u7814\u7a76\u56e2\u961f\u8d1f\u8d23\u968f\u540e\u63a8\u51faYOLOv2\u548cYOLOv3\uff0c\u8fd9\u4e24\u6b3e\u4ea7\u54c1\u5728\u6a21\u578b\u6027\u80fd\u548c\u6a21\u578b\u901f\u5ea6\u65b9\u9762\u90fd\u53d6\u5f97\u4e86\u6301\u7eed\u7684\u6539\u8fdb\u30022020\u5e742\u6708\uff0cPJ\u00b7\u96f7\u8fea(PJ Reddie)\u8868\u793a\uff0c\u4ed6\u5c06\u505c\u6b62\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u7814\u7a76\u3002\n2020\u5e744\u6708\uff0c\u963f\u5217\u514b\u8c22\u00b7\u535a\u5947\u79d1\u592b\u65af\u57fa\u3001\u7b80\u5065-\u59da\u671b\u548c\u5ed6\u5b8f\u6e90\u9a6c\u514b\u00b7\u5ed6\u5b8f\u6e90\u4ecb\u7ecd\u4e86YOLOv4\uff0c\u53d6\u5f97\u4e86\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u6210\u679c\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cYOLOv4\u7684\u8bb8\u591a\u6539\u8fdb\u65e2\u6765\u81ea\u4e8e\u6a21\u578b\u67b6\u6784\uff0c\u4e5f\u6765\u81ea\u4e8e\u6539\u8fdb\u7684\u6570\u636e\u589e\u5f3a\u3002(\u6211\u4eec\u5df2\u7ecf\u5199\u4e86\u4e00\u4e2a\u5173\u4e8eYOLOv4\u7684\u7ec6\u76ee\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u81ea\u5b9a\u4e49\u5bf9\u8c61\u4e0a\u8bad\u7ec3\u4e00\u4e2aYOLOv4\u6a21\u578b\u3002)\u3002\nGlenn Jocher\u53d1\u5e03\u4e86YOLOv5\uff0c\u6709\u8bb8\u591a\u4e0d\u540c\u4e4b\u5904\u548c\u6539\u8fdb\u3002(\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cGlenn\u662f\u9a6c\u8d5b\u514b\u589e\u5f3a\u7684\u521b\u5efa\u8005\uff0c\u8fd9\u662f\u6539\u8fdb\u7684YOLOv4\u4e2d\u5305\u542b\u7684\u4e00\u9879\u6280\u672f\u3002)\u3002\u6b64\u6b21\u53d1\u5e03\u7684YOLOv5\u5305\u62ec\u4e94\u79cd\u4e0d\u540c\u578b\u53f7\u5c3a\u5bf8\uff1aYOLOv5s(\u6700\u5c0f)\u3001YOLOv5m\u3001YOLOv5l\u3001YOLOv5x(\u6700\u5927)\u3002\n\u9996\u5148\uff0c\u8fd9\u662fYOLO\u7cfb\u5217\u4e2d\u7b2c\u4e00\u4e2a\u7528PyTorch\u800c\u4e0d\u662fPJ Reddie\u7684Darknet\u7f16\u5199\u7684\u539f\u751f\u7248\u672c\u3002\u201c\u6697\u7f51\u201d\u662f\u4e00\u4e2a\u975e\u5e38\u7075\u6d3b\u7684\u7814\u7a76\u6846\u67b6\uff0c\u4f46\u5b83\u5728\u6784\u5efa\u65f6\u5e76\u6ca1\u6709\u8003\u8651\u5230\u751f\u4ea7\u73af\u5883\u3002\u5b83\u7684\u7528\u6237\u793e\u533a\u8f83\u5c0f\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u5bfc\u81f4Darknet\u7684\u914d\u7f6e\u66f4\u5177\u6311\u6218\u6027\uff0c\u751f\u4ea7\u5c31\u7eea\u7a0b\u5ea6\u66f4\u4f4e\u3002\n\u56e0\u4e3aYOLOv5\u6700\u521d\u662f\u5728PyTorch\u4e2d\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u5b83\u53d7\u76ca\u4e8e\u5df2\u5efa\u7acb\u7684PyTorch\u751f\u6001\u7cfb\u7edf\uff1a\u652f\u6301\u66f4\u7b80\u5355\uff0c\u90e8\u7f72\u4e5f\u66f4\u5bb9\u6613\u3002\u6b64\u5916\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u66f4\u5e7f\u4e3a\u4eba\u77e5\u7684\u7814\u7a76\u6846\u67b6\uff0c\u5728YOLOv5\u4e0a\u8fed\u4ee3\u5bf9\u4e8e\u66f4\u5e7f\u6cdb\u7684\u7814\u7a76\u793e\u533a\u6765\u8bf4\u53ef\u80fd\u66f4\u5bb9\u6613\u3002\u8fd9\u4e5f\u4f7f\u5f97\u90e8\u7f72\u5230\u79fb\u52a8\u8bbe\u5907\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u56e0\u4e3a\u6a21\u578b\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7f16\u8bd1\u6210ONNX\u548cCoreML\u3002\n\u5176\u6b21\uff0cYOLOv5\u7684\u901f\u5ea6\u975e\u5e38\u5feb\u3002\u5728\u8fd0\u884c\u7279\u65af\u62c9P100\u7684YOLOv5Colab\u7b14\u8bb0\u672c\u4e0a\uff0c\u6211\u4eec\u770b\u5230\u6bcf\u5f20\u56fe\u50cf\u7684\u63a8\u65ad\u65f6\u95f4\u9ad8\u8fbe0.007\u79d2\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u79d2140\u5e27\uff01\u76f8\u6bd4\u4e4b\u4e0b\uff0cYOLOv4\u5728\u8f6c\u6362\u4e3a\u76f8\u540c\u7684Ultralytics PyTorch\u5e93\u540e\u8fbe\u5230\u4e8650FPS\u3002\n\u7b2c\u4e09\uff0cYOLOv5\u662f\u51c6\u786e\u7684\u3002\u5728\u6211\u4eec\u5bf9\u8840\u7ec6\u80de\u8ba1\u6570\u548c\u68c0\u6d4b(Bccd)\u6570\u636e\u96c6\u7684\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u5728\u4ec5\u8bad\u7ec3\u4e86100\u4e2a\u7eaa\u5143\u540e\uff0c\u8fbe\u5230\u4e86\u5927\u7ea60.895\u7684\u5e73\u5747\u5e73\u5747\u7cbe\u5ea6(MAP)\u3002\u8bda\u7136\uff0c\u6211\u4eec\u5728EfficientDet\u548cYOLOv4\u4e2d\u770b\u5230\u4e86\u7c7b\u4f3c\u7684\u6027\u80fd\uff0c\u4f46\u5728\u51c6\u786e\u5ea6\u4e0a\u6ca1\u6709\u4efb\u4f55\u635f\u5931\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u5c11\u80fd\u770b\u5230\u5982\u6b64\u5168\u9762\u7684\u6027\u80fd\u6539\u8fdb\u3002\n\u7b2c\u56db\uff0cYOLOv5\u5f88\u5c0f\u3002\u5177\u4f53\u5730\u8bf4\uff0cYOLOv5\u7684\u6743\u91cd\u6587\u4ef6\u662f27\u5146\u5b57\u8282\u3002\u6211\u4eec\u7684YOLOv4(\u91c7\u7528Darknet\u67b6\u6784)\u7684\u6743\u91cd\u6587\u4ef6\u662f244\u5146\u5b57\u8282\u3002YOLOv5\u6bd4YOLOv4\u5c0f\u8fd190%\u3002\u8fd9\u610f\u5473\u7740YOLOv5\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u90e8\u7f72\u5230\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e0a\u3002\n\u4e3a\u6b64\uff0c\u6211\u4eec\u51fa\u7248\u4e86\u4e00\u672c\u5173\u4e8e\u5982\u4f55\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u57f9\u8badYOLOv5\u7684\u6307\u5357\uff0c\u4f7f\u5b83\u53d8\u5f97\u53c8\u5feb\u53c8\u5bb9\u6613\u3002\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u6807\u51c6\u7684\u53ef\u53ef\u91cd\u91cf\uff0c\u8bf7\u53c2\u9605\u6b64\u7b14\u8bb0\u672c\u3002\n\u60f3\u6210\u4e3a\u7b2c\u4e00\u4e2a\u4e86\u89e3\u65b0\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u6559\u7a0b\u548c\u5185\u5bb9(\u5982\u6211\u4eec\u7684\u5408\u6210\u6570\u636e\u96c6\u521b\u5efa\u6307\u5357)\u7684\u4eba\u5417\uff1f\u8ba2\u9605\u6211\u4eec\u7684\u66f4\u65b0\ud83d\udcec\u3002\nRoboFlow\u901a\u8fc7\u81ea\u52a8\u6279\u6ce8\u8d28\u91cf\u4fdd\u8bc1\u3001\u901a\u7528\u6279\u6ce8\u683c\u5f0f\u8f6c\u6362(\u5982Pascal VOC XML\u5230COCO JSON\u548c\u521b\u5efaTFRecords)\u3001\u56e2\u961f\u5171\u4eab\u548c\u7248\u672c\u63a7\u5236\uff0c\u4ee5\u53ca\u4e0e\u6d41\u884c\u7684\u5f00\u6e90\u8ba1\u7b97\u673a\u89c6\u89c9\u6a21\u578b\u7684\u8f7b\u677e\u96c6\u6210\uff0c\u52a0\u901f\u4e86\u60a8\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u5de5\u4f5c\u6d41\u7a0b\u3002\u5f00\u59cb\u4f7f\u7528\u60a8\u7684\u7b2c\u4e00\u4e2a1000\u5f20\u56fe\u50cf\u662f\u5b8c\u5168\u514d\u8d39\u7684\u3002", "note_en": "Realtime object detection is improving quickly. The  rate of improvement is improving even more quickly. The results are stunning.\n On March 18, Google  open sourced their implementation of  EfficientDet, a fast-training model with various sizes, one of which offers realtime output. On April 23, Alexey Bochoviskiy et al.  open sourced  YOLOv4. On June 9, Glenn Jocher  open sourced an implementation of  YOLOv5.\n Skip this info post and jump straight to our  YOLOv5 tutorial. You&#39;ll have a trained YOLOv5 model on your custom data in minutes.\n  YOLO (You Only Look Once) is a family of models that PJ Reddie originally coined with a 2016  publication. YOLO models are infamous for being highly performant yet incredibly small \u2013 making them ideal candidates for realtime conditions and on-device deployment environments.\n PJ Reddie&#39;s research team is responsible for subsequently introducing YOLOv2 and  YOLOv3, both of which made continued improvement in both model performance and model speed. In February 2020, PJ Reddie noted he would discontinue research in computer vision.\n In April 2020, Alexey Bochkovskiy, Chien-Yao Wang, and Hong-Yuan Mark Liao introduced  YOLOv4, demonstrating impressive gains.\n  Notably, many of YOLOv4&#39;s improvements came from improved  data augmentation as much as model architecture. (We&#39;ve written a  breakdown on YOLOv4 as well as  how to train a YOLOv4 model on custom objects.)\n  Glenn Jocher released  YOLOv5 with a number of differences and improvements. (Notably, Glenn is the creator of mosaic augmentation, which is an included technique in what improved YOLOv4.) The  release of YOLOv5 includes five different models sizes: YOLOv5s (smallest), YOLOv5m, YOLOv5l, YOLOv5x (largest).\n  First, this is the first native release of models in the YOLO family to be written in PyTorch first rather than PJ Reddie&#39;s Darknet. Darknet is an incredibly flexible research framework, but it is not built with production environments in mind. It has a smaller community of users. Taken together, this results in Darknet being more challenging to configure and less production-ready.\n Because YOLOv5 is implemented in PyTorch initially, it benefits from the established PyTorch ecosystem: support is simpler, and deployment is easier. Moreover as a more widely known research framework, iterating on YOLOv5 may be easier for the broader research community. This also makes deploying to mobile devices simpler as the model can be compiled to ONNX and CoreML with ease.\n Second, YOLOv5 is fast \u2013 blazingly fast. In a  YOLOv5 Colab notebook, running a Tesla P100, we saw inference times up to 0.007 seconds per image, meaning  140 frames per second (FPS)! By contrast, YOLOv4 achieved 50 FPS after having been converted to the same Ultralytics PyTorch library.\n Third, YOLOv5 is accurate. In our tests on the  blood cell count and detection (BCCD) dataset, we achieved roughly 0.895 mean average precision ( mAP) after training for just 100 epochs. Admittedly, we saw comparable performance from EfficientDet and YOLOv4, but it is rare to see such across-the-board performance improvements without any loss in accuracy.\n Fourth, YOLOv5 is small. Specifically, a weights file for YOLOv5 is 27 megabytes. Our weights file for YOLOv4 (with Darknet architecture) is 244 megabytes.  YOLOv5 is nearly 90 percent smaller than YOLOv4. This means YOLOv5 can be deployed to embedded devices much more easily.\n     To that end, we&#39;ve published a guide on  how to train YOLOv5 on a custom dataset, making it quick and easy. If you would like to use standard COCO weights, see  this notebook.\n        Want to be the first to know about new  computer vision tutorials\t\t\t\t\tand content like our\t\t\t\t\t synthetic dataset creation guide?\t\t\t\t\t Subscribe to our updates \ud83d\udcec.\n  Roboflow accelerates your computer vision workflow through automated annotation\t\t\t\t\tquality assurance, universal annotation format conversion (like\t\t\t\t\t\t PASCAL VOC XML to COCO JSON and\t\t\t\t\t\t creating TFRecords\t\t\t\t\t), team sharing and versioning, and easy integration with popular\t\t\t\t\t open source computer vision models.\t\t\t\t\tGetting started with your first 1000 images are completely free.", "posttime": "2020-06-11 00:08:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bf9\u8c61,state,yolov5", "title": "YOLOv5\u5728\u8fd9\u91cc\uff1a140 FPS\u7684\u6700\u5148\u8fdb\u7684\u5bf9\u8c61\u68c0\u6d4b", "title_en": "YOLOv5 Is Here: State-of-the-Art Object Detection at 140 FPS", "transed": 1, "url": "https://blog.roboflow.ai/yolov5-is-here/", "via": "", "real_tags": ["\u5bf9\u8c61", "state", "yolov5"]}, {"category": "", "categoryclass": "", "imagename": "04c8023e6809f5bc529b194a453bdf45.jpg", "infoid": 1006028, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u768412\u4e2a\u6708\u91cc\uff0c\u82f1\u7279\u5c14\u6162\u6162\u5f00\u59cb\u62ab\u9732\u5176\u9996\u4e2a\u6df7\u5408x86\u5e73\u53f0Lakefield\u7684\u76f8\u5173\u4fe1\u606f\u3002\u8fd9\u6b3e\u65b0\u5904\u7406\u5668\u7ed3\u5408\u4e86\u4e00\u4e2a\u201c\u5927\u201dCPU\u6838\u5fc3\u548c\u56db\u4e2a\u201c\u5c0f\u201dCPU\u6838\u5fc3\uff0c\u4ee5\u53ca\u5927\u91cf\u7684\u663e\u5361\uff0c\u82f1\u7279\u5c14\u5c06\u63a8\u51fa\u4e00\u79cd\u65b0\u7684\u8ba1\u7b97\u5916\u5f62\u89c4\u683c\u3002\u8fd9\u6b3e\u5904\u7406\u5668\u7684\u4eae\u70b9\u5305\u62ec\u5176\u5360\u5730\u9762\u79ef\u5c0f\uff0c\u8fd9\u662f\u7531\u4e8e\u65b0\u76843D\u5806\u53e0\u201cFoveros\u201d\u6280\u672f\uff0c\u4ee5\u53ca\u5176\u4f4e\u5f85\u673aSoC\u529f\u8017\uff0c\u4f4e\u81f32.5 mW\uff0c\u82f1\u7279\u5c14\u79f0\u8fd9\u6bd4\u4ee5\u524d\u7684\u4f4e\u529f\u8017\u82f1\u7279\u5c14\u5904\u7406\u5668\u4f4e91%\u3002\u4eca\u5929\u7684\u516c\u544a\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7b2c\u4e00\u90e8\u5206\uff0c\u89c4\u8303\u3002\n\u82f1\u7279\u5c14\u5c06\u5728\u5176\u7b2c\u4e00\u4ee3Lakefield\u4e2d\u9996\u6b21\u4eae\u76f8\u8fd9\u4e24\u4e2aSKU\u3002\u8fd9\u4e9bCPU\u5c06\u5728\u9ad8\u7aef\u3001\u59cb\u7ec8\u8054\u7f51\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e2d\u627e\u5230\u5f52\u5bbf\uff0c\u6bd4\u5982\u9884\u8ba1\u5c06\u4e8e\u672c\u6708\u4e0a\u5e02\u7684\u4e09\u661fGalaxy Book S\uff0c\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u5c06\u63a8\u51fa\u7684\u8054\u60f3ThinkPad X1 Fold\uff0c\u4ee5\u53ca\u5fae\u8f6fSurface Book Neo\u3002\n\u8fd9\u4e24\u4e2aSKU\u90fd\u5c06\u914d\u5907\u4e00\u4e2a\u5927\u7684\u2018Sunny Cove\u2019CPU\u6838\u5fc3\uff0c\u4ee5\u53ca\u56db\u4e2a\u5c0f\u7684\u2018Tremont\u2019Atom CPU\u6838\u5fc3\u3002\u8fd9\u4e24\u7ec4\u5185\u6838\u90fd\u53ef\u4ee5\u8bbf\u95ee4MB\u7684\u672b\u7ea7\u9ad8\u901f\u7f13\u5b58\uff0c\u5c3d\u7ba1\u82f1\u7279\u5c14\u5c1a\u672a\u62ab\u9732\u8fd9\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u9ad8\u901f\u7f13\u5b58\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u56fe\u5f62\u65b9\u9762\uff0c\u82f1\u7279\u5c14\u6b63\u5728\u96c6\u6210\u5177\u670964\u4e2a\u6267\u884c\u5355\u5143\u7684Gen11 GPU\uff0c\u4e0e\u82f1\u7279\u5c14\u7684Ice Lake\u5904\u7406\u5668\u4e0a\u7684EU\u6570\u91cf\u76f8\u540c\u3002\u6709\u8da3\u7684\u662f\uff0cIGPU\u7684\u65f6\u949f\u901f\u5ea6\u5927\u7ea6\u662f\u82f1\u7279\u5c14GPU\u901a\u5e38\u7684\u4e00\u534a\uff0c\u65f6\u949f\u901f\u5ea6\u7684\u5cf0\u503c\u4ec5\u4e3a500 MHz-\u8fd9\u8868\u660e\u82f1\u7279\u5c14\u5728\u63d0\u9ad8\u56fe\u5f62\u6027\u80fd\u65b9\u9762\u8d70\u5f97\u65e2\u5e7f\u53c8\u6162\u3002\u4e24\u4e2aCPU\u7684\u989d\u5b9aTDP\u5747\u4e3a7 W\u3002\n\u82f1\u7279\u5c14\u5411\u6211\u4eec\u8bc1\u5b9e\uff0c\u57fa\u9891\u662f\u6240\u6709\u4e94\u4e2a\u5185\u6838\u7684\u7edf\u4e00\u9891\u7387\uff0c\u5355\u6838\u6da1\u8f6e\u9891\u7387\u53ea\u9002\u7528\u4e8e\u5927\u7684Sunny Cove\u5185\u6838\u3002\u5bf9LPDDR4X-4266\u7684\u652f\u6301\u6bd4Ice Lake\u4e2d\u7684\u5185\u5b58\u63a7\u5236\u5668\u9ad8\u51fa\u4e00\u4e2a\u6863\u6b21\uff0c\u540e\u8005\u53ea\u5728LPDDR4X-3733\u4e0a\u8fd0\u884c\uff0c\u5185\u5b58\u901f\u5ea6\u53ef\u80fd\u4f1a\u5927\u5927\u63d0\u9ad8\u6027\u80fd\u3002\n\u4e3a\u4e86\u5728\u8f83\u5c0f\u768412 mm x 12 mm\u7a7a\u95f4\u5185\u652f\u6301\u8fd9\u4e9b\u5904\u7406\u5668\uff0c\u82f1\u7279\u5c14\u6b63\u5728\u4f7f\u7528\u5176\u540d\u4e3aFoveros\u76843D\u5806\u53e0\u6280\u672f\u3002\u8fd9\u610f\u5473\u7740\u82af\u7247\u7684\u903b\u8f91\u533a\u57df(\u5982\u5185\u6838\u548c\u56fe\u5f62)\u4f4d\u4e8e10+nm\u82af\u7247\u4e0a\uff0c\u800c\u82af\u7247\u7684IO\u90e8\u5206\u4f4d\u4e8e22 nm\u7845\u82af\u7247\u4e0a\uff0c\u5e76\u4e14\u5b83\u4eec\u5806\u53e0\u5728\u4e00\u8d77\u3002\u4e3a\u4e86\u4f7f\u8fde\u63a5\u6b63\u5e38\u5de5\u4f5c\uff0c\u82f1\u7279\u5c14\u5728\u4e24\u4e2a\u534a\u7845\u4e4b\u95f4\u542f\u7528\u4e8650\u5fae\u7c73\u7684\u8fde\u63a5\u57ab\uff0c\u4ee5\u53ca\u7535\u6e90\u96c6\u4e2d\u7684TSV(\u901a\u8fc7\u7845\u901a\u5b54)\uff0c\u4ee5\u4fbf\u4e3a\u9876\u5c42\u7684\u5185\u6838\u4f9b\u7535\u3002\n\u82f1\u7279\u5c14\u5217\u51fa\u7684\u8fd9\u4e9b\u82af\u7247\u7684TDP\u4e3a7W\uff0c\u5c3d\u7ba1\u8be5\u516c\u53f8\u5c1a\u672a\u62ab\u9732\u8be5\u82af\u7247\u7684\u6da1\u8f6e\u529f\u7387\u9650\u5236\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u82f1\u7279\u5c14\u6ca1\u6709\u900f\u9732\u9ad8\u901f\u7f13\u5b58\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u5728\u6700\u521d\u7684\u56fe\u8868\u4e2d\uff0c\u6211\u4eec\u770b\u5230POP\u5185\u5b58\u5c06\u88ab\u6dfb\u52a0\u5230\u9876\u90e8\uff0c\u867d\u7136\u82f1\u7279\u5c14\u6ca1\u6709\u63d0\u4f9b\u66f4\u591a\u7ec6\u8282\uff0c\u4f46\u6211\u4eec\u4ece\u4e0a\u4e2a\u6708\u7684\u4e09\u661fGalaxy Book S\u4e2d\u5f97\u77e5\uff0c\u5c06\u6709(\u81f3\u5c11)8 GB\u7684SKU\u4f7f\u7528LPDDR4X\u3002\n\u8003\u8651\u5230\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4eec\u652f\u6301\u4e0d\u540c\u7684\u6307\u4ee4\u96c6\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5185\u6838\u5c06\u5982\u4f55\u5de5\u4f5c\u6709\u5f88\u5927\u7684\u7591\u95ee-\u82f1\u7279\u5c14\u76ee\u524d\u8fd8\u6ca1\u6709\u63d0\u4f9b\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\u3002\u82f1\u7279\u5c14\u5df2\u7ecf\u58f0\u660e\uff0cCPU\u4e0d\u540c\u90e8\u5206\u4e0a\u7684\u7ebf\u7a0b\u8c03\u5ea6\u5c06\u57fa\u4e8e\u786c\u4ef6\u5f15\u5bfc\u7684\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u8fdb\u884c\uff0c\u5c3d\u7ba1\u82f1\u7279\u5c14\u8fd8\u6ca1\u6709\u8be6\u7ec6\u8bf4\u660e\u5176\u786c\u4ef6\u8ddf\u8e2a\u548c\u542f\u7528\u7684\u7ec6\u8282\uff0c\u8bf4\u660e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5728\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u7684\u6f14\u793a\u4e2d\uff0cLakefield\u51e0\u4e4e\u6240\u6709\u4e8b\u60c5\u90fd\u5c06\u4f7f\u7528Tremont\u5185\u6838\uff0c\u5e76\u4e14\u53ea\u8c03\u7528Sunny Cove\u5185\u6838\u8fdb\u884c\u7528\u6237\u4f53\u9a8c\u7c7b\u578b\u7684\u4ea4\u4e92\uff0c\u4f8b\u5982\u6253\u5b57\u6216\u4e0e\u5c4f\u5e55\u4ea4\u4e92\u3002\n\u82f1\u7279\u5c14\u6b63\u8ba1\u5212\u5728\u53d1\u5e03\u540e\u4e3e\u884c\u7b80\u62a5\u4f1a\uff0c\u4f9b\u5a92\u4f53\u63d0\u95ee\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e00\u58f0\u660e\u5c06\u5206\u4e24\u90e8\u5206\u53d1\u5e03\u3002\u8fd9\u662f\u6211\u4eec\u4e8b\u5148\u5f97\u5230\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u901a\u62a5\u516c\u544a\u540e\u7b80\u62a5\u4f1a\u7684\u8be6\u7ec6\u60c5\u51b5\u3002\u4f5c\u4e3a\u8fd9\u4e00\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5411\u82f1\u7279\u5c14\u60ca\u547c\uff0c\u8fd9\u79cd\u5411\u5a92\u4f53\u5c55\u793a\u7ec6\u8282\u7684\u65b9\u5f0f\u662f\u591a\u4e48\u4ee4\u4eba\u6cae\u4e27-\u9996\u5148\u662f\u5bf9\u8bfb\u8005\u6765\u8bf4\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u4eec\u60f3\u4e86\u89e3\u82f1\u7279\u5c14\u4eca\u5929\u665a\u4e9b\u65f6\u5019\u544a\u8bc9\u6211\u4eec\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4f60\u4eec\u90fd\u5fc5\u987b\u56de\u6765\uff1b\u5176\u6b21\u5bf9\u4e8e\u6211\u4eec\uff0c\u4f5c\u4e3a\u5a92\u4f53\uff0c\u4ed6\u4eec\u5c06\u4e0d\u5f97\u4e0d\u4e89\u5148\u6050\u540e\u5730\u8df3\u5230\u7ec6\u8282\u4e0a\uff0c\u51b3\u5b9a\u662f\u5199\u5f97\u5feb\u800c\u9519\u8fc7\u7ec6\u8282\uff0c\u8fd8\u662f\u5199\u5f97\u6162\u800c\u9519\u8fc7\u6d41\u91cf\u7684\u6d6a\u6f6e\u3002\n\u6709\u4e00\u4ef6\u4e8b\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u786e\u8ba4-Sunny Cove\u4f3c\u4e4e\u6ca1\u6709\u542f\u7528AVX-512\u3002\u82f1\u7279\u5c14\u6700\u521d\u7684\u65b0\u95fb\u7a3f\u6307\u51fa\uff0c\u4eba\u5de5\u667a\u80fd\u5de5\u4f5c\u8d1f\u8f7d\u53d1\u751f\u5728CPU\u4e0a\uff1b\u8003\u8651\u5230AVX-512\u6240\u9700\u7684\u989d\u5916\u529f\u8017\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\n\u53d1\u8868\u8bc4\u8bba\u6ca1\u6709\uff0ci3-L13G4\uff0ci5-L16G7\u4ed6\u4eec\u53ea\u662f\u968f\u610f\u629b\u51fa\u6570\u5b57\u548c\u5b57\u6bcd\uff0c\u8fd9\u4e9b\u6570\u5b57\u548c\u5b57\u6bcd\u5728\u4ed6\u4eec\u7684\u540d\u5b57\u4e2d\u5e76\u4e0d\u4ee3\u8868\u4efb\u4f55\u4e1c\u897f--\u662f\u4ec0\u4e48\u8ba9\u4ed6\u4eec\u7684\u540d\u5b57\u53d8\u6210\u4e8613\u800c\u4e0d\u662f16\uff1f\u4e3a\u4ec0\u4e48\u4e00\u4e2a\u662fG4\uff0c\u53e6\u4e00\u4e2a\u662fG7\uff1f\u4ed6\u4eec\u771f\u7684\u9700\u8981\u4e00\u4e2a\u4e0d\u540c\u4e8e\u6e56\u7684\u5730\u8d28\u7279\u5f81\uff0c\u4f46\u90a3\u662f\u53e6\u4e00\u4e2a\u95ee\u9898\u4e86\u3002\u56de\u8986\u3002\n\u6211\u5bf9\u8fd9\u4e2aCPU\u975e\u5e38\u611f\u5174\u8da3\uff0c\u53ef\u80fd\u4f1a\u628a\u6211\u7684E6430\u5347\u7ea7\u5230\u4e00\u4e2a\uff0c\u4f46\u6211\u4f1a\u7b49\u7b2c\u4e8c\u4ee3\uff0c\u8fd9\u6837\u82f1\u7279\u5c14\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u56de\u8986", "note_en": "Over the past 12 months, Intel has slowly started to disclose information about its first hybrid x86 platform, Lakefield. This new processor combines one \u2018big\u2019 CPU core with four \u2018small\u2019 CPU cores, along with a hefty chunk of graphics, with Intel setting out to deliver a new computing form factor. Highlights for this processor include its small footprint, due to new 3D stacking \u2018Foveros\u2019 technology, as well as its low standby SoC power, as low as 2.5 mW, which Intel states is 91% lower than previous low power Intel processors. Today\u2019s announcement comes in two parts: first, the specifications.\n    Intel will debut these two SKUs in its first generation of Lakefield. These CPUs will find homes in premium, always-connected laptops, such as the  Samsung Galaxy Book S expected in markets this month, the  Lenovo ThinkPad X1 Fold, coming later this year, and in the  Microsoft Surface Book Neo.\n  Both SKUs will feature one big \u2018Sunny Cove\u2019 CPU core, along with four little \u2018Tremont\u2019 Atom CPU cores. Both sets of cores will have access to a 4 MB last level cache, although Intel has not yet disclosed what sort of cache this is.\n  Meanwhile on the graphics front, Intel is integrating a Gen11 GPU with 64 execution units, the same number of EUs as on Intel&#39;s Ice Lake processors. Interestingly, the iGPU is clocked about half as high as usual for an Intel GPU, with clockspeeds peaking at just 500 MHz \u2013 suggesting that Intel is going wide and slow to increase graphics performance. Both CPUs will be rated for a TDP of 7 W.\n    Intel confirmed to us that the base frequency is the unified frequency across all five cores, and the single core turbo frequency applies only to the big Sunny Cove core. Support for LPDDR4X-4266 is a notch above the memory controller in Ice Lake, which only runs at LPDDR4X-3733, and the memory speed will likely be a big boost to performance.\n    In order to enable these processors in a small 12mm x 12mm footprint, Intel is using its 3D stacking technology, called Foveros. This means that the logic areas of the chip, such as the cores and the graphics, sit on a 10+ nm die, while the IO parts of the chip are on a 22nm silicon die, and they are stacked together. In order to make the connections work, Intel has enabled 50 micron connection pads between the two silicon halves, along with power-focused TSVs (through silicon vias) in order to power the cores on the top layer.\n    Intel lists the TDP for these chips at 7 W, although the company has not disclosed the turbo power limits for the chip. As mentioned above, Intel hasn\u2019t disclosed how the cache works. In the initial diagrams, we were shown that PoP memory would be added on top, and while Intel hasn&#39;t offered further details there, we know from last month&#39;s Samsung Galaxy Book S reveal that there will be (at least) 8GB SKUs using LPDDR4X.\n  We have big questions as to how each of the cores will work, given that by default they support different instruction sets \u2013 Intel hasn\u2019t provided information on this at this time. Intel has stated that the scheduling of the threads on the different parts of the CPU will occur based on hardware-guided OS scheduling, although again Intel hasn\u2019t gone into the details of its hardware tracking and enablement on how this is done. In the demos we have seen, Lakefield will use the Tremont cores for almost everything, and only call on the Sunny Cove core for user-experience type of interactions, such as typing or interacting with the screen.\n    Intel is planning a post-announcement briefing for press to ask questions, which means that this announcement is coming in two parts. This is the information we\u2019re being given beforehand, and we will update you with the details from the post-announcement briefing. As part of this process, we\u2019ve exclaimed to Intel how this way around of presenting details to the press is frustrating \u2013 firstly for readers, as you all will have to come back if you want to find out what more Intel tells us later today, but secondly for us, as press, who will have to scramble to jump on the details and decide whether to write fast and miss details, or write slow and miss the wave of traffic.\n  One thing we can confirm in advance \u2013 the Sunny Cove does not appear to be AVX-512 enabled. Intel\u2019s initial press release states that AI workloads occur on the CPU; given the extra power draw required for AVX-512, this is probably a good thing.\n  POST A COMMENT      no, i3-L13G4, i5-L16G7 they just throw random numbers and letters that don&#39;t represent anything in their names - what makes it the 13 vs the 16? why is one a G4 and the other a G7?  they really need a geological feature other than &#34;Lake&#34; too, but that&#39;s another issue...  Reply\n    I am very interested in this CPU, will probably upgrade my e6430 to one but I&#39;ll wait for a second generation so intel can iron out the issues.  Reply", "posttime": "2020-06-11 00:03:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82f1\u7279\u5c14,\u516c\u5e03,discloses", "title": "\u82f1\u7279\u5c14\u516c\u5e03\u83b1\u514b\u83f2\u5c14\u5fb7CPU\u89c4\u683c\uff1a64 EU\uff0c\u6700\u9ad83.0 GHz\uff0c7W", "title_en": "Intel Discloses Lakefield CPUs Specifications: 64 EUs, up to 3.0 GHz, 7 W", "transed": 1, "url": "https://www.anandtech.com/show/15841/intel-discloses-lakefield-cpus-specifications-64-execution-units-up-to-30-ghz-7-w", "via": "", "real_tags": ["\u82f1\u7279\u5c14", "\u516c\u5e03", "discloses"]}]