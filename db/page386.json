[{"category": "", "categoryclass": "", "imagename": "fb20b824f3b9718d5a4f9759c54ee98c.jpeg", "infoid": 1001066, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u901a\u4fe1\u7684\u57fa\u672c\u95ee\u9898\u662f\u5728\u4e00\u4e2a\u70b9\u4e0a\u7cbe\u786e\u5730\u6216\u8fd1\u4f3c\u5730\u590d\u5236\u5728\u53e6\u4e00\u4e2a\u70b9\u4e0a\u9009\u62e9\u7684\u6d88\u606f\u3002-\u514b\u52b3\u5fb7\u00b7\u9999\u519c(Claude Shannon)\uff0c1948\u5e74\u3002\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u5728\u7a7a\u95f4\u7ad9\u548c\u5730\u7403\u4e0a\u7684\u5730\u9762\u63a7\u5236\u603b\u90e8\u4e4b\u95f4\u8bbe\u8ba1\u4e00\u4e2a\u901a\u4fe1\u7cfb\u7edf\u3002\u8be5\u7cfb\u7edf\u5c06\u53d1\u9001\u548c\u63a5\u6536\u4e8c\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\uff0c\u5373\uff0c\u4f5c\u4e3a1\u548c0\u7684\u5e8f\u5217\u3002\u5728\u4fe1\u606f\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u53d7\u5230\u5176\u4ed6\u65e0\u7ebf\u7535\u4fe1\u53f7\u7684\u5e72\u6270\uff0c\u56e0\u6b64\u5728\u5730\u9762\u63a7\u5236\u4e2d\u63a5\u6536\u5230\u7684\u4fe1\u606f\u4e0e\u539f\u59cb\u4fe1\u606f\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6709\u6ca1\u6709\u53ef\u80fd\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u53ef\u9760\u7684\u901a\u4fe1\u65b9\u6848\u5462\uff1f\n\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u6dfb\u52a0\u5197\u4f59\uff1a\u5c06\u6bcf\u4e2a\u6bd4\u7279\u53d1\u9001\u51e0\u6b21\uff0c\u6bd4\u59825\u6b21\uff1a\n\u5982\u679c\u5730\u9762\u63a7\u5236\u6536\u5230\u6d88\u606f11101\uff0c\u4ed6\u4eec\u53ef\u4ee5\u76f8\u5f53\u786e\u5b9a\u771f\u6b63\u53d1\u9001\u7684\u662f11111\u3002\u867d\u7136\u8fd9\u4e2a\u7b80\u5355\u7684\u7cfb\u7edf\u53ef\u4ee5\u5de5\u4f5c(\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a)\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u662f\u975e\u5e38\u6d6a\u8d39\u7684\uff1a\u6211\u4eec\u5fc5\u987b\u4e3a\u539f\u59cb\u6d88\u606f\u4e2d\u7684\u6bcf\u4e00\u4f4d\u53d1\u90014\u4e2a\u989d\u5916\u7684\u4f4d\u3002\u56e0\u6b64\uff0c\u4f20\u8f93\u7387\u53ea\u670920%\u3002\u6211\u4eec\u8fd8\u80fd\u505a\u5f97\u66f4\u597d\u5417\uff1f\n\u8fd9\u91cc\u4f3c\u4e4e\u6709\u4e00\u4e2a\u4e24\u96be\u5883\u5730\uff1a\u5982\u679c\u6211\u4eec\u60f3\u8981\u51c6\u786e\uff0c\u6211\u4eec\u5fc5\u987b\u964d\u4f4e\u4f20\u64ad\u7387\u3002\n\u8fd9\u5c31\u662f\u514b\u52b3\u5fb7\u00b7\u9999\u519c\u5728\u4ed61948\u5e74\u7684\u8bba\u6587\u201c\u901a\u4fe1\u7684\u6570\u5b66\u7406\u8bba\u201d\u4e2d\u89e3\u51b3\u7684\u95ee\u9898\u3002\u5728\u4e66\u4e2d\uff0c\u4ed6\u8bc1\u660e\u4e86\u5728\u5608\u6742\u7684\u4fe1\u9053\u4e0a\u53ef\u4ee5\u53ef\u9760\u4f20\u8f93\u7684\u4fe1\u606f\u901f\u7387\u662f\u6709\u6781\u9650\u7684(\u9999\u519c\u6781\u9650)\u3002\u7136\u800c\uff0c\u4f4e\u4e8e\u6b64\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u8d8a\u6765\u8d8a\u5c0f\u7684\u9519\u8bef\u4f20\u8f93\u4fe1\u606f\u3002\u8fd9\u4e2a\u91cd\u8981\u7684\u7ed3\u679c\u544a\u8bc9\u6211\u4eec\uff0c\u5728\u7ed9\u5b9a\u7684\u901a\u4fe1\u4fe1\u9053\u4e0a\u5b58\u5728\u5141\u8bb8\u4efb\u610f\u7cbe\u5ea6\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u5b83\u6ca1\u6709\u544a\u8bc9\u6211\u4eec\u5982\u4f55\u6784\u5efa\u5b83\u3002\n\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5047\u8bbe\u4fe1\u9053\u5177\u6709\u6b63\u786e\u53d1\u9001\u6bd4\u7279\u7684\u6982\u7387p\u548c\u76f8\u5e94\u7684\u53d1\u9001\u9519\u8bef\u6bd4\u7279\u7684\u6982\u73871-p\uff0c\u9999\u519c\u8bc1\u660e\u4e86\u6700\u4f73\u4f20\u8f93\u901f\u7387\u4e3a\uff1a\n\u66f2\u7ebf\u56fe\u5728p=0.5\u9644\u8fd1\u5bf9\u79f0\uff0c\u6700\u5927\u503c\u5728p=0\u548cp=1\u3002p=0\u7684\u60c5\u51b5\u5f88\u6709\u8da3\uff0c\u901a\u9053\u6709\u5b8c\u7f8e\u7684\u566a\u58f0\uff1a\u5b83\u7ffb\u8f6c\u4e86\u539f\u59cb\u6d88\u606f\u4e2d\u7684\u6240\u6709\u6bd4\u7279\u3002\u4f46\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u90a3\u4e48\u4fe1\u606f\u5c31\u4f1a\u88ab\u7b80\u5355\u5730\u7834\u8bd1\uff0c\u6211\u4eec\u5c31\u4f1a\u628a\u5b83\u4eec\u7ffb\u56de\u6765\u3002\n\u8fd9\u4e2a\u516c\u5f0f\u901a\u5e38\u7528\u4fe1\u606f\u71b5\u6765\u8868\u793a\uff0c\u4fe1\u606f\u71b5\u662f\u9999\u519c\u8bbe\u8ba1\u7684\u4e00\u79cd\u8861\u91cf\u6807\u51c6\uff0c\u53ef\u4ee5\u89e3\u91ca\u4e3a\u4e0e\u9891\u9053\u76f8\u5173\u7684\u201c\u4e0d\u786e\u5b9a\u6027\u201d\u6216\u201c\u60ca\u559c\u201d\u7a0b\u5ea6\u3002\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5f53p=1/2\u65f6\uff0c\u71b5\u57281\u5904\u6709\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u5f53p=0\u548cp=1\u65f6\uff0c\u71b5\u57280\u5904\u6709\u4e00\u4e2a\u6700\u5c0f\u503c\u3002\n\u66f4\u4e00\u822c\u5730\uff0c\u7ed9\u5b9a\u53ef\u4ee5\u53d6n\u4e2a\u4e0d\u540c\u503c\u7684\u968f\u673a\u6d88\u606fM\uff0c\u6982\u7387\u4e3ap\u1d62\uff0ci=1\uff0c\u2026\u3002\uff0cn\uff0c\u6211\u4eec\u5c06\u6d88\u606f\u7684\u71b5\u5b9a\u4e49\u4e3a\uff1a\n\u8ba9\u6211\u4eec\u91c7\u53d6\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u5047\u8bbe\u4f60\u5728\u73a9Guess Who\uff0c\u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u4f60\u95ee\u662f/\u4e0d\u662f\u5173\u4e8e\u4f60\u5bf9\u624b\u89d2\u8272\u5916\u89c2\u7684\u95ee\u9898\uff0c\u4ee5\u4fbf\u5728\u4e00\u7ec4\u89d2\u8272\u4e2d\u6311\u51fa\u4ed6\u6216\u5979\u3002\u4f60\u95ee\u81ea\u5df1\uff1a\u6211\u5e94\u8be5\u6309\u4ec0\u4e48\u987a\u5e8f\u63d0\u95ee\u624d\u80fd\u6700\u5927\u9650\u5ea6\u5730\u589e\u52a0\u83b7\u80dc\u7684\u53ef\u80fd\u6027\uff1f\u5373\u5174\u5730\uff0c\u4f60\u53ef\u4ee5\u8bd5\u7740\u5148\u95ee\u4e00\u4e0b\u5927\u591a\u6570\u89d2\u8272\u90fd\u6709\u54ea\u4e9b\u7279\u5f81\u3002\n\u6b64\u5916\uff0c\u6700\u4f18\u95ee\u9898\u662f\u5c06\u603b\u4f53\u5e73\u5747\u5206\u914d\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u65e0\u8bba\u7b54\u6848(\u662f\u6216\u5426)\u5982\u4f55\uff0c\u90fd\u4f1a\u4e22\u5f03\u4e00\u534a\u7684\u5b57\u7b26\u3002\u5728\u4efb\u4f55\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u95ee\u9898\u90fd\u4e0d\u80fd\u83b7\u5f97\u6700\u4f73\u4fe1\u606f\u91cf\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u4f60\u4e0d\u80fd\u6839\u636e\u89d2\u8272\u7684\u7279\u5f81\u5e73\u5747\u5212\u5206\u89d2\u8272\u600e\u4e48\u529e\uff1f\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9996\u5148\u56de\u987e\u4e00\u4e0b\u4e0a\u9762\u5b9a\u4e49\u7684\u71b5\u7684\u6982\u5ff5\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u95ee\u9898\u60f3\u8c61\u6210\u4e00\u4e2a\u53d8\u91cfX\uff0c\u5b83\u628a\u4eba\u53e3\u5206\u6210\u51e0\u7ec4\uff0cx\uff0c\u1d62\uff0c\u6982\u7387\u4e3ap\uff0c\u1d62\u3002\u4f8b\u5982\uff0c\u60f3\u4e00\u4e2a\u5173\u4e8e\u89d2\u8272\u773c\u775b\u989c\u8272\u7684\u95ee\u9898(\u6e38\u620f\u4e2d\u7684\u95ee\u9898\u5728\u6280\u672f\u4e0a\u53ea\u6709\u662f\u6216\u5426\uff0c\u4f46\u8fd9\u662f\u53ef\u4ee5\u6982\u62ec\u7684)\u3002\u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff0c\u95ee\u9898\u7684\u71b5\u5c31\u53d8\u6210\u4e86\uff1a\n\u8fd9\u91cc\u7684\u76f4\u89c9\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4fe1\u606f\u91cf-logp(x\u1d62)\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u4ee5\u975e\u5e38\u4f4e\u7684\u6982\u7387\u6536\u5230\u7b54\u6848(\u5373\uff0c\u6211\u4eec\u8be2\u95ee\u89d2\u8272\u662f\u5426\u5177\u6709\u6781\u5c11\u6570\u4eba\u5171\u4eab\u7684\u7279\u5f81\uff0c\u800c\u7b54\u6848\u662f\u80af\u5b9a\u7684)\uff0c\u6211\u4eec\u83b7\u5f97\u7684\u4fe1\u606f\u91cf\u5c31\u4f1a\u9ad8\u4e8e\u6982\u7387\u66f4\u9ad8\u7684\u7b54\u6848\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u71b5\u4e0e\u4e0d\u786e\u5b9a\u6027\u6709\u5173\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u629b\u786c\u5e01\uff0c\u5f53p=0.5\u65f6\uff0c\u7ed3\u679c\u4e2d\u7684\u4e0d\u786e\u5b9a\u6027\u6bd4p\u7684\u4efb\u4f55\u5176\u4ed6\u503c\u90fd\u9ad8\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u786e\u5b9a\u6027\u8d8a\u5927\u8d8a\u597d\u3002\u4e3a\u4ec0\u4e48\uff1f\u5982\u679c\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5728\u4eba\u53e3\u4e2d\u5206\u5e03\u4e0d\u5747\u5300\u7684\u95ee\u9898\uff0c\u5047\u8bbe\u662f0.7\u548c0.3\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u6027\u683c\u5f88\u6709\u53ef\u80fd\u662f\u572870%\u7684\u4eba\u4e2d\uff0c\u53ea\u6709\u5269\u4e0b\u768430%\u7684\u4eba\u6ca1\u6709\u56de\u7b54\uff0c\u4f46\u5982\u679c\u5212\u5206\u5f97\u66f4\u5747\u5300(\u56e0\u6b64\u4e5f\u66f4\u4e0d\u786e\u5b9a)\uff0c\u6211\u4eec\u603b\u662f\u503e\u5411\u4e8e\u653e\u5f0350%\u7684\u4eba\u53e3\uff0c\u4ece\u800c\u4ea7\u751f\u957f\u671f\u7684\u4f18\u52bf\u3002\u8fd9\u610f\u5473\u7740\u6700\u597d\u7684\u95ee\u9898\u662f\u90a3\u4e9b\u4f7f\u71b5\u6700\u5927\u5316\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u90a3\u4e9b\u4e0d\u786e\u5b9a\u6027\u66f4\u9ad8\u7684\u95ee\u9898\u3002\n\u71b5\u7684\u4e00\u79cd\u5e38\u89c1\u7528\u6cd5\u662f\u5728\u51b3\u7b56\u6811\u4e2d\uff0c\u5728\u51b3\u7b56\u6811\u4e2d\uff0c\u4eba\u4eec\u4f7f\u7528\u4e00\u7ec4\u7279\u5f81(\u5c06\u6570\u636e\u5206\u5272\u6210\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\u7684\u7279\u5f81)\u6765\u6784\u5efa\u5206\u7c7b\u95ee\u9898\u7684\u6d41\u7a0b\u56fe\u3002\u8fd9\u91cc\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898\u662f\uff1a\u6211\u4eec\u5e94\u8be5\u6309\u4ec0\u4e48\u987a\u5e8f\u201c\u5e94\u7528\u201d\u8fd9\u4e9b\u529f\u80fd\u624d\u80fd\u83b7\u5f97\u6700\u4f73\u62c6\u5206\uff1f\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u662f\u9012\u5f52\u5730\u59cb\u7ec8\u4f7f\u7528\u6700\u5927\u5316\u4fe1\u606f\u589e\u76ca\u7684\u529f\u80fd\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u6570\u636e\u96c6S\uff0c\u5e76\u4e14\u6211\u4eec\u7684\u8981\u7d20\u540d\u4e3aX\uff0c\u5219X\u5728S\u4e0a\u83b7\u5f97\u7684\u4fe1\u606fi(S\uff0cX)\u8ba1\u7b97\u5982\u4e0b\uff1a\n\u5176\u4e2dH(S|X)\u662f\u7ed9\u5b9aX\u7684S\u7684\u6761\u4ef6\u71b5\u3002\u76f4\u89c2\u5730\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053X\uff0c\u8fd9\u5c31\u662f\u6570\u636e\u96c6S\u7684\u71b5\u7684\u51cf\u5c11\u3002\u56e0\u6b64\uff0c\u9009\u62e9\u4f7f\u8be5\u503c\u6700\u5927\u5316\u7684\u7279\u5f81X\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5c06\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e0d\u786e\u5b9a\u6027\uff0c\u6709\u6548\u5730\u83b7\u5f97\u6700\u4f73\u5206\u88c2\u3002\n\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u589e\u76ca\u6765\u9009\u62e9\u4e0b\u4e00\u4e2a\u7279\u5f81\u7684\u7b97\u6cd5\u79f0\u4e3a\u8d2a\u5a6a\u7b97\u6cd5\u3002\u8fd9\u7c7b\u7b97\u6cd5\u6ca1\u6709\u8003\u8651\u603b\u4f53\u4fe1\u606f\u589e\u76ca\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b21\u4f18\u67e5\u8be2\uff0c\u4f46\u5b83\u4eec\u884c\u4e3a\u826f\u597d\uff0c\u65b9\u6cd5\u7b80\u5355\u3002\n\u4f8b\u5982\uff0c\u8003\u8651\u4e0b\u56fe\uff0c\u5176\u4e2d\u5bf9\u8457\u540d\u7684\u9e22\u5c3e\u82b1\u6570\u636e\u96c6\u4f7f\u7528\u4e86\u51b3\u7b56\u6811\u65b9\u6cd5\uff0c\u5e76\u9009\u62e9\u4e86\u4e24\u4e2a\u7279\u5f81\uff0c\u5373\u82b1\u74e3\u5bbd\u5ea6\uff0c\u9996\u5148\u4ee50.8 cm\u4f5c\u4e3a\u9608\u503c\uff0c\u7136\u540e\u662f1.75 cm\u3002\u6487\u5f00\u8fd9\u4e9b\u7279\u5b9a\u529f\u80fd\u7684\u9009\u62e9\u65b9\u5f0f\u4e0d\u8c08\uff0c\u4e3a\u4ec0\u4e48\u8981\u5148\u4f7f\u7528\u22640.8\u5462\uff1f\u901a\u8fc7\u6211\u4eec\u63cf\u8ff0\u7684\u4fe1\u606f\u589e\u76ca\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u7b54\u6848\u3002\u6211\u4eec\u5c06\u628a\u5206\u96940.8 cm X\u548cY\u7684\u82b1\u74e3\u5bbd\u5ea6\u7684\u7279\u5f81\u79f0\u4e3aY\u3002\n\u5e94\u7528X\u9996\u5148\u5c06150\u4e2a\u6570\u636e\u70b9(\u901a\u5e38\u4e00\u4e2a\u4f1a\u5728\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u4e4b\u95f4\u62c6\u5206\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u4e2a\u96c6)\u5206\u6210\u4e24\u4e2a\u96c6\uff1a\u4e00\u4e2a\u5305\u542b\u6574\u4e2asetosa\u7c7b(50\u70b9\uff0c\u5bf9\u5e94\u4e8e\u22640.8 cm)\uff0c\u4e0d\u5305\u542b\u5176\u4ed6\u4efb\u4f55\u5185\u5bb9\uff0c\u800c\u53e6\u4e00\u4e2a\u5305\u542b\u5176\u4f59\u90e8\u5206\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e3a\uff1a\n\u53e6\u4e00\u79cd\u662f\u5148\u65bdY\uff0c\u4e00\u5957\u6709\u521a\u6bdb50\u682a\uff0c\u6742\u827249\u682a\uff0c\u5904\u5973\u682a5\u682a(\u22641.75 cm)\uff0c\u53e6\u4e00\u682a\u65e0\u521a\u6bdb\uff0c\u6742\u82721\u682a\uff0c\u5904\u5973\u682a45\u682a\u3002\u8fd9\u5c31\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86\uff1a\n\u56e0\u6b64\uff0cX(\u82b1\u74e3\u5bbd\u5ea6\u5c0f\u4e8e\u6216\u5927\u4e8e0.8 cm)\u7684\u4fe1\u606f\u589e\u76ca\u5927\u4e8eY\u7684\u4fe1\u606f\u589e\u76ca\uff0c\u6211\u4eec\u5e94\u8be5\u9996\u5148\u4f7f\u7528\u5b83\u3002\u8fd9\u5728\u76f4\u89c9\u4e0a\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3aX\u5c06setosa\u7c7b\u4e0e\u5176\u4ed6\u4e24\u4e2a\u5b8c\u5168\u5206\u5f00\uff0c\u800c\u9996\u5148\u4f7f\u7528Y\u5219\u4f1a\u4ea7\u751f\u66f4\u7ea0\u7ed3\u7684\u5206\u88c2\u3002\n\u5f88\u96be\u5938\u5927\u9999\u519c\u5de5\u4f5c\u7684\u91cd\u8981\u6027\uff1a\u4fe1\u606f\u8bba\u5728\u7edf\u8ba1\u63a8\u7406\u548c\u673a\u5668\u5b66\u4e60\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u9057\u4f20\u5b66\u3001\u6570\u636e\u538b\u7f29\u3001\u7f16\u7801\u7406\u8bba\u548c\u5bc6\u7801\u5b66\u7b49\u9886\u57df\u90fd\u6709\u5f88\u591a\u5e94\u7528\u3002\u7531\u4e8e\u88ab\u5f15\u7528\u8d85\u8fc712\u4e07\u6b21\uff0c\u5f88\u5c11\u6709\u8bba\u6587\u80fd\u53f7\u79f0\u5177\u6709\u7c7b\u4f3c\u7684\u5f71\u54cd\u3002\u7528\u4fe1\u606f\u7406\u8bba\u5bb6\u5b89\u4e1c\u5c3c\u00b7\u57c3\u5f17\u83b1\u7c73\u5fb7\u65af(Anthony Ephremides)\u7684\u8bdd\u8bf4\uff1a", "note_en": "The fundamental problem of communication is that of reproducing at one point either exactly or approximately a message selected at another point.  \u2014 Claude Shannon, 1948\n Imagine you were tasked with designing a comunications system between a space station and a ground control headquarters back in Earth. The system would transmit and receive messages encoded in binary, that is, as a sequence of 1s and 0s. As the message travels, there may be interferences from other radio signals, so that what is picked up in ground control is not exactly the same as the original message. Under these circumstances, is it possible to devise a scheme that allows reliable comunication?\n A simple workaround would be to add redundancy: send each bit a number of times, let\u2019s say 5:\n  If ground control receives the message  11101, they could be fairly certain that what was truly sent was  11111. Although this simple system would work (up to a point), we can see that it is very wasteful: we have to send 4 extra bits for every bit in the original message. The  transmission rate is therefore only 20%. Can we do any better?\n There seems to be a dilemma here: if we want accuracy, we must lower the rate of transmission.\n This is the problem Claude Shannon tackled in his 1948 paper  A Mathematical Theory of Communication. In it, he proved that there is a limit for the rate of information that can be reliably transmitted over a noisy channel (the  Shannon limit). However, below this limit we can transmit information with an increasingly small error. This important result tells us that there  exists a code that allows arbitrary accuracy over a given comunication channel, but it does not tell us how to build it.\n More precisely, let\u2019s say a channel has a probability  p of transmitting a bit correctly, and a corresponding probability of 1 \u2014  p of sending the wrong bit, Shannon proved that the optimum rate of transmission is:\n   The plot is symmetrical around  p = 0.5, with maxima at  p = 0 and  p = 1. The case of  p = 0 is interesting, the channel has perfect noise: it flips all the bits in the original message. But if we know that, then the message is trivially deciphered, we just flip them back.\n The formula is commonly stated in terms of  information entropy, a measure Shannon devised that can be interpreted as the level of \u2018uncertainty\u2019 or \u2018surprise\u2019 associated with the channel.\n   We can see that the entropy has a maximum at 1 when  p = \u00bd, and minima at 0 for  p = 0 and  p = 1.\n More generally, given a random message  M that can take  n different values with probability  p\u1d62 for  i = 1,\u2026, n, we define the entropy of the message as:\n   Let\u2019s take a different approach. Suppose you are playing  Guess Who, the game where you ask yes/no questions about the appearance of your opponent\u2019s character in order to single him or her out among a set of characters. You ask yourself: what order should I ask the questions in to maximise the probability of winning? Intutively, you try to ask first about features most of the characters have.\n  Moreover, an optimal question is one that divides the population evenly, that is, one that regardless of the answer ( yes or  no) discards half the characters. In any other case, you are not gaining the optimal amount of information with each question.\n But what if you can\u2019t divide the characters evenly by their characteristics? To answer the question, first we recall the concept of entropy defined above. We can think of a question as a variable  X that splits the population into groups  x\u1d62 with probabilities  p\u1d62. For example, think of a question about the eye color of the character (the questions in the game are technically only  yes or  no but this can be generalized). With this in mind, the entropy of a question becomes:\n  The intuition here is that with each possible answer, we gain an amount of information  \u2014 log  p( x\u1d62), meaning that if we receive an answer with a very low probability (i.e. we ask if the character has a feature that is shared by very few people, and the answer is yes), the amount of information we gained is higher than an answer with more probability.\n On the other hand, entropy is related to uncertainty. For example, if we flip a coin, the uncertainty in the outcome is higher with a  p = 0.5 than with any other value of  p. And in our case, more uncertainty is better. Why? If we choose a question with an uneven distribution in the population, lets say 0.7 and 0.3, the odds are that our character is among the 70%, discarding with the  no answer only the remaining 30%, but with a more even division (and therefore more uncertain), we always tend to discard 50% of the population, leading to an advantage in the long run. This means that the best questions to ask are those that maximize the entropy, i.e, the ones with the higher uncertainty.\n  One common use of entropy is in decision trees, where one uses a set of features (features that split the data into disjoint sets) to construct a flowchart for a classification problem. Here, a common question is: which order should we \u201capply\u201d the features in to get the best splits? A possible solution is to recursively always use the feature that maximizes the  information gain. If we\u2019re working with a dataset  S and our feature is called  X, the information gained on  S by  X,  I( S, X), is calculated as:\n  where  H( S| X) is the conditional entropy of  S given  X. Intuitively, this is just the reduction in the entropy of the dataset  S if we know  X. Thus, it makes sense to choose the features  X that maximize this value, as they will be the ones that reduce uncertainty the most, effectively obtaining the best splits.\n Algorithms that consider the information gain at each node to choose the next feature are called  greedy algorithms. Such algorithms do not take into account the overall information gain and may lead in some cases to suboptimal queries, but they are well-behaved and have a straightforward approach.\n As an example, consider the picture below, where a decision tree method was used on the famous Iris flower dataset and two features were selected, the petal width, first with 0.8 cm as a threshold and then 1.75 cm. Setting aside how these specific features are selected, why use the \u2264 0.8 first? With the information gain calculation we described, we can provide an answer. We will call the feature that separates petal width on 0.8 cm  X and the other one  Y.\n  Applying  X first splits the 150 data points (usually one would split between training and test sets, here for simplicity we use the entire set) into two sets: one containing the entire  setosa class (50 points, corresponding to \u2264 0.8 cm) and nothing else, and the other containing the rest. In that case the calculations yield:\n  On the other hand, applying  Y first gives us one set with 50  setosa, 49  versicolor and 5  virginica (\u2264 1.75 cm) and another with no  setosa, 1  versicolor and 45  virginica. This leaves us with:\n  Thus the information gain from  X (petal width being under or over 0.8 cm) is greater than the one from  Y, and we should use it first. This makes sense intuitively, as  X completely separates the  setosa class from the other two, whereas using  Y first gives a more entangled split.\n  It is hard to overstate the importance of Shannon\u2019s work: the Theory of Information has found  many applications in fields as diverse as statistical inference and machine learning, natural language processing, genetics, data compression, coding theory, and cryptography. With over 120,000 citations, few papers can boast a similar impact. In the words of information theorist Anthony Ephremides:", "posttime": "2020-05-07 19:59:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4fe1\u606f\u8bba,beauty,\u95ee\u9898", "title": "\u7565\u8bba\u4fe1\u606f\u8bba\u4e4b\u7f8e", "title_en": "A brief introduction to the beauty of Information Theory", "transed": 1, "url": "https://notamonadtutorial.com/a-brief-introduction-to-the-beauty-of-information-theory-8357f5b6a355", "via": "", "real_tags": ["\u4fe1\u606f\u8bba", "beauty", "\u95ee\u9898"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001065, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u4f7f\u7528\u8fd0\u884cShor\u7684\u56e0\u5f0f\u5206\u89e3\u7b97\u6cd5\u7684\u5927\u578b\u901a\u7528\u91cf\u5b50\u8ba1\u7b97\u673a\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7834\u89e3RSA\u5bc6\u7801\u7cfb\u7edf\u3002\u7531\u4e8e\u8fd9\u79cd\u5668\u4ef6\u8fd8\u5904\u4e8e\u840c\u82bd\u9636\u6bb5\uff0c\u4e00\u79cd\u6574\u6570\u56e0\u5f0f\u5206\u89e3\u7684\u91cf\u5b50\u9000\u706b\u65b9\u6cd5\u6700\u8fd1\u5df2\u7ecf\u5f15\u8d77\u4e86\u4eba\u4eec\u7684\u5173\u6ce8\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u4f4e\u566a\u58f0D-Wave 2000Q\u8ba1\u7b97\u65f6\u95f4\u3001\u5f53\u524d\u786c\u4ef6\u9650\u5236\u548c\u672a\u6765\u53d1\u5c55\u7684\u6311\u6218\u7684\u5e7f\u6cdb\u7814\u7a76\uff0c\u5206\u6790\u4e86\u6700\u6709\u5e0c\u671b\u901a\u8fc7\u91cf\u5b50\u9000\u706b\u8fdb\u884cRSA\u9ed1\u5ba2\u653b\u51fb\u7684\u7b56\u7565\u3002", "note_en": "Download PDF  Abstract: The RSA cryptosystem could be easily broken with large scale general purposequantum computers running Shor&#39;s factorization algorithm. Being such devicesstill in their infancy, a quantum annealing approach to integer factorizationhas recently gained attention. In this work, we analyzed the most promisingstrategies for RSA hacking via quantum annealing with an extensive study of thelow noise D-Wave 2000Q computational times, current hardware limitations andchallenges for future developments.", "posttime": "2020-05-07 19:59:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,\u9000\u706b,rsa,\u91cf\u5b50", "title": "\u7528\u4f4e\u566a\u58f0D-Wave 2000Q\u91cf\u5b50\u9000\u706b\u673a\u7834\u89e3RSA\u5b89\u5168", "title_en": "Breaking RSA Security with a Low Noise D-Wave 2000Q Quantum Annealer", "transed": 1, "url": "https://arxiv.org/abs/2005.02268", "via": "", "real_tags": ["\u7834\u89e3", "\u9000\u706b", "rsa", "\u91cf\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "8662c525d7a9a906c821b2ca87b16e49.jpg", "infoid": 1001064, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2017\u5e74\uff0c\u8036\u9c81\u5927\u5b66\u82f1\u56fd\u827a\u672f\u4e2d\u5fc3(Yale Center For British Art)\u7684\u9996\u5e2d\u7eb8\u5f20\u4fdd\u7ba1\u5458\u5d14\u7d20\u598d(Soyeon Choi)\u6536\u5230\u4e86\u7f8e\u56fd\u8457\u540d\u519c\u5b66\u5bb6\u4f0a\u83b1\u624e\u00b7\u5e73\u514b\u5c3c(Eliza Pinckney)1753\u5e74\u5199\u7684\u4e00\u5c01\u4fe1\u7684\u4e09\u5bf9\u5f00\u672c\u3002\u88c2\u5f00\u7684\u7eb8\u4e0a\u6f66\u8349\u7684\u7ebf\u6761\u5f88\u4f18\u96c5\uff0c\u4f46\u4ed4\u7ec6\u4e00\u770b\uff0c\u5b83\u4eec\u51e0\u4e4e\u50cf\u662f\u5728\u8df3\u821e\u3002\u5f53\u5d14\u5973\u58eb\u66f4\u4ed4\u7ec6\u5730\u89c2\u5bdf\u65f6\uff0c\u901a\u8fc7\u53cc\u76ee\u5934\u5e26\u653e\u5927\u955c\uff0c\u5979\u770b\u5230\u4e86\u67d0\u4e9b\u5b57\u6bcd\u5468\u56f4\u7684\u7ec6\u5c0f\u88c2\u53e3\uff0c\u4ee5\u53ca\u5176\u4ed6\u5b57\u6bcd\u5468\u56f4\u7684\u952f\u9f7f\u72b6\u6d1e\u3002\n\u7eb8\u5f20\u53d8\u8d28\u7684\u539f\u56e0\u6709\u5f88\u591a\uff1a\u771f\u83cc\u3001\u6c34\u5206\u3001\u70ed\u3001\u5149\u3001\u5927\u6c14\u6c61\u67d3\u7269\u3002\u5728\u5e73\u514b\u5c3c\u7684\u4fe1\u4e2d\uff0c\u5c31\u50cf20\u4e16\u7eaa\u4e4b\u524d\u7684\u8bb8\u591a\u897f\u65b9\u4f5c\u54c1\u4e00\u6837\uff0c\u58a8\u6c34\u672c\u8eab\u6b63\u5728\u4fb5\u8680\u7eb8\u5f20\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u94c1\u80c6\u58a8\u6c34\u8150\u8680\u3002\n\u505a\u4e8620\u591a\u5e74\u7eb8\u5f20\u4fdd\u7ba1\u5458\u7684\u5d14\u5973\u58eb\u548c\u6211\u5728\u5168\u56fd\u5404\u5730\u91c7\u8bbf\u8fc7\u7684\u5176\u4ed6\u51e0\u540d\u7eb8\u5f20\u4fdd\u7ba1\u5458\u8bf4\uff0c\u4ed6\u4eec\u7684\u804c\u8d23\u662f\u907f\u514d\u8fd9\u79cd\u6076\u5316--\u5728\u5386\u53f2\u6587\u732e\u7684\u4f5c\u8005\u548c\u4fdd\u7ba1\u5458\u53bb\u4e16\u5f88\u4e45\u4e4b\u540e\uff0c\u628a\u5386\u53f2\u6587\u732e\u7684\u6027\u8d28\u548c\u5185\u5bb9\u4fdd\u5b58\u5230\u9065\u8fdc\u7684\u672a\u6765\u3002\n\u770b\u7740\u5e73\u514b\u5c3c\u4fe1\u4e0a\u90a3\u4e9b\u7ec6\u5c0f\u7684\u88c2\u75d5\u548c\u6d1e\uff0c\u5d14\u5973\u58eb\u51b3\u5b9a\u7528\u4e16\u754c\u4e0a\u6700\u8584\u7684\u7eb8\uff0c\u5c3d\u53ef\u80fd\u4e0d\u5f15\u4eba\u6ce8\u76ee\u3001\u6700\u7cbe\u81f4\u5730\u7ee7\u7eed\u5199\u4e0b\u53bb\u3002\n\u8fd9\u79cd\u540d\u4e3aTengujo\u7684\u7eb8\u662f\u7531\u65e5\u672c\u9ad8\u77e5\u53bf\u4e00\u5bb6\u540d\u4e3aHidaka Wavi\u7684\u516c\u53f8\u751f\u4ea7\u7684\u3002Hidaka Wavi\u7684\u6240\u6709\u8005\u517c\u8fd0\u8425\u5546Hiroyoshi Chinzei\u6700\u8fd1\u5728\u7535\u8bdd\u4e2d\u544a\u8bc9\u6211\uff0c\u914d\u6599\u5f88\u7b80\u5355\uff0c\u5de5\u827a\u201c\u5e76\u4e0d\u662f\u975e\u5e38\u79d8\u5bc6\u3001\u7279\u6b8a\u7684\u4e8b\u60c5\u201d\u3002\u4f46\u51fa\u73b0\u7684\u4ea7\u54c1\u51e0\u4e4e\u662f\u795e\u5947\u7684\u3002\u7ea4\u7ef4\u7f16\u7ec7\u6210\u8584\u8584\u7684\u683c\u5b50\uff0c\u5b83\u7684\u7a7a\u9699\u548c\u7269\u8d28\u4e00\u6837\u591a\uff1b\u4ece\u6e7f\u7684\u767d\u8272\u5e8a\u5355\u5f00\u59cb\uff0c\u5e72\u71e5\u540e\u51e0\u4e4e\u5b8c\u5168\u900f\u660e\u3002\n\u81ea\u4eceChinzei\u5148\u751f\u7684\u66fe\u7956\u72361949\u5e74\u7b2c\u4e00\u6b21\u521b\u529e\u516c\u53f8\u4ee5\u6765\uff0cHidaka wa i\u5c31\u4e00\u76f4\u4e13\u6ce8\u4e8e\u8be5\u62a5\u7684\u751f\u4ea7\u3002\n\u5728\u5de5\u5382\u5185\u90e8\uff0c\u6e29\u6696\u7684\u78b1\u6027\u6c34\u6d74\u4e2d\u6d78\u6ce1\u7740\u4e00\u84b2\u5f0f\u8033\u7684\u9ad8\u7cb1-\u6851\u6811\u7684\u830e-\u7a7a\u6c14\u662f\u6e7f\u70ed\u7684\u3002\u5de5\u4eba\u4eec\u4eceKozo\u4e2d\u53d6\u51fa\u6c61\u57a2\uff0c\u5c06\u5176\u6572\u6253\u6210\u4e00\u80a1\u80a1\u6d46\u72b6\u7ea4\u7ef4\uff0c\u653e\u5728\u4e00\u4e2a\u88c5\u6709\u6c34\u548cNeri\u7684\u6d74\u7f38\u4e2d\uff0cNeri\u662f\u4e00\u79cd\u4eceTororo-AOI\u5de5\u5382\u63d0\u53d6\u7684\u7c98\u7a20\u6db2\u4f53\uff0c\u4e5f\u88ab\u79f0\u4e3a\u65e5\u843d\u8299\u84c9\u3002\u4e0eNERI\u53cd\u5e94\uff0cKozo\u7ea4\u7ef4\u83b7\u5f97\u4e86\u4e00\u79cd\u7c98\u6027\u7684\u7c98\u6027\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u5206\u89e3\uff0c\u5e76\u88ab\u62c9\u6210\u957f\u957f\u7684\u767d\u8272\u7ef3\u5b50\uff0c\u8fd9\u4e9b\u7ef3\u5b50\u88ab\u4ece\u6d74\u7f38\u4e2d\u53d6\u51fa\uff0c\u5747\u5300\u5730\u94fa\u5c55\u5728\u5c4f\u5e55\u4e0a\u3002\u8fd9\u4e9b\u7ef3\u7d22\u4e00\u8d77\u6309\u6469\uff0c\u7136\u540e\u538b\u5e73\u5230\u51e0\u6839\u8718\u86db\u7f51\u72b6\u7ea4\u7ef4\u7684\u5bbd\u5ea6\u3002\u5f53\u6db2\u4f53\u5e72\u71e5\u65f6\uff0c\u8fd9\u4e9b\u7ea4\u7ef4\u88ab\u7f16\u7ec7\u5728\u4e00\u8d77\uff0c\u5728\u4e00\u5f20\u7cbe\u81f4\u7684\u7eb8\u4e2d\u5f7c\u6b64\u7c98\u8fde\u5728\u4e00\u8d77\u3002\nTengujo\u53ef\u4ee5\u5e2e\u52a9\u52a0\u56fa\u548c\u4fee\u590d\u6765\u81ea\u591a\u4e2a\u6765\u6e90\u7684\u635f\u574f\u3002\u5d14\u5973\u58eb\u79f0\u5b83\u4e3a\u201c\u7eb8\u5f20\u4fdd\u62a4\u4e2d\u7684\u9762\u5305\u548c\u9ec4\u6cb9\u201d\uff0c\u201c\u53ef\u80fd\u662f\u6700\u6e29\u548c\u7684\u52a0\u56fa\u4efb\u4f55\u4e1c\u897f\u7684\u65b9\u5f0f\u201d\u3002\u6709\u65f6\uff0c\u5929\u7434\u662f\u7528\u6765\u5904\u7406\u6591\u70b9\u7684\uff0c\u6709\u65f6\u5219\u662f\u7528\u6765\u5bf9\u624b\u7a3f\u8fdb\u884c\u5b8c\u6574\u7684\u7ebf\u6761\u5904\u7406\u3002\u5b83\u7684\u957f\u7ea4\u7ef4\u63d0\u4f9b\u4e86\u7ed3\u6784\u548c\u652f\u6491\uff0c\u540c\u65f6\u51e0\u4e4e\u5b8c\u5168\u4e0d\u88ab\u6ce8\u610f\u5230\u3002\n\u5728\u9ad8\u77e5\u53bf\u548c\u5c90\u961c\u53bf\uff0c\u8fd9\u79cd\u7eb8\u4f20\u7edf\u4e0a\u662f\u624b\u5de5\u5236\u4f5c\u7684\uff0c\u67091000\u591a\u5e74\u7684\u5386\u53f2\uff0c\u5e76\u88ab\u7528\u4e8e\u8bb8\u591a\u5b9e\u9645\u548c\u4eea\u5f0f\u76ee\u7684-\u5199\u4f5c\u3001\u5370\u5237\u548c\u827a\u672f\u54c1\u3002\u4f46\u572820\u4e16\u7eaa\uff0c\u9020\u7eb8\u5546\u5f00\u59cb\u4f7f\u7528\u673a\u5668\uff0c\u8fd9\u79cd\u673a\u5668\u53ef\u4ee5\u6bd4\u4ee5\u524d\u66f4\u5747\u5300\u5730\u94fa\u5c55\u53ef\u53ef\u7ea4\u7ef4\u3002\u8fd9\u4f7f\u5f97\u5929\u7434\u53ef\u4ee5\u53d8\u5f97\u8d8a\u6765\u8d8a\u8584\uff0c\u540c\u65f6\u4ecd\u7136\u4fdd\u6301\u4e86\u5b83\u7279\u6709\u7684\u7075\u6d3b\u6027\u548c\u5f3a\u5ea6\u3002\u5728\u65e5\u672c\uff0c\u6700\u7ec8\u5728\u4e16\u754c\u5404\u5730\uff0c\u5b83\u6210\u4e3a\u6ed1\u52a8\u95e8\u5957\u3001\u548c\u670d\u5305\u88c5\u548c\u536b\u751f\u7eb8\u7684\u9996\u9009\u6750\u6599\u3002\nTengujo\u53ef\u4ee5\u505a\u5f97\u975e\u5e38\u8584\uff0c\u4ee5\u81f3\u4e8e\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u5b83\u592a\u7a7a\u865a\u4e86\uff0c\u5373\u4f7f\u662f\u6700\u6e29\u548c\u7684\u88c5\u9970\u6027\u7528\u9014\u4e5f\u662f\u5982\u6b64\u3002\u5728\u51e0\u6839\u53ef\u53ef\u7ea4\u7ef4\u7684\u5bbd\u5ea6\u4e0a\uff0c\u7eb8\u5f20\u53d8\u5f97\u50cf\u8682\u8681\u7684\u7fc5\u8180\u4e00\u6837\u8584\u3002\u5230\u90a3\u65f6\uff0c\u53ea\u5269\u4e0b\u4e00\u79cd\u7528\u9014\uff1a\u4fdd\u5b58\u7eb8\u5f20\u3002\n\u8bd5\u56fe\u5927\u5200\u9614\u65a7\u5730\u4fee\u8865\u6587\u6863\u662f\u6709\u98ce\u9669\u7684\uff0c\u56e0\u4e3a\u957f\u671f\u7684\u5316\u5b66\u548c\u7269\u7406\u5f71\u54cd\u662f\u9ad8\u5ea6\u53ef\u53d8\u7684\uff0c\u800c\u4e14\u76f8\u5bf9\u672a\u77e5\u3002\u201c\u6211\u5728\u8fd9\u4e2a\u9886\u57df\u8d8a\u505a\u8d8a\u591a\uff0c\u6211\u89c9\u5f97\u6211\u5e94\u8be5\u505a\u5f97\u8d8a\u6765\u8d8a\u5c11\uff0c\u201d\u5d14\u5973\u58eb\u8bf4\u3002\n\u5927\u7ea6\u516d\u5e74\u524d\uff0c\u65e5\u672c\u56fd\u5bb6\u6863\u6848\u9986(National Archives Of Japan)\u8981\u6c42\u94a6\u6cfd\u5f00\u53d1\u4e00\u79cd\u6bcf\u5e73\u65b9\u7c73\u91cd1.6\u514b\u7684\u85e4\u58f6\uff0c\u6bd4\u5f53\u65f6\u4e16\u754c\u4e0a\u4efb\u4f55\u4e00\u79cd\u7eb8\u90fd\u66f4\u8584\u3001\u66f4\u8f7b\u3002\u4ed6\u82b1\u4e86\u4e24\u5e74\u7684\u65f6\u95f4\u53cd\u590d\u8bd5\u9a8c\uff0c\u7ec6\u5fae\u5730\u6539\u53d8\u4e86\u649e\u51fb\u673a\u7684\u538b\u529b\u3001\u6405\u62cc\u7684\u901f\u5ea6\u3001\u7ea4\u7ef4\u7684\u5bc6\u5ea6\u548c\u6c34\u4e2d\u7684Neri\u3002\u94a6\u6cfd\u8bf4\uff0c\u201c\u6211\u548c\u6211\u7684\u5de5\u4eba\u4eec\u90fd\u5f88\u60ca\u8bb6\u6211\u4eec\u80fd\u505a\u5230\u3002\u201d\n\u8fd9\u5757\u6700\u8584\u7684\u5929\u9e45\u7ed2\u7684\u5bbd\u5ea6\u76f8\u5f53\u4e8e\u4e00\u6839Kozo\u7ea4\u7ef4\u7684\u76f4\u5f84\uff1a0.02\u6beb\u7c73\u3002\u6bd4\u4eba\u7684\u76ae\u80a4\u8fd8\u8584\u3002\u6ca1\u6709\u5176\u4ed6\u516c\u53f8\u80fd\u591f\u590d\u5236\u5b83\u3002\n\u5b83\u73b0\u5728\u88ab\u5356\u5230\u4e16\u754c\u5404\u5730\uff0c\u4ee5\u4fdd\u62a4\u7eb8\u5f20\u3002\u94a6\u6cfd\u5df2\u7ecf\u5411\u56fd\u4f1a\u56fe\u4e66\u9986\u3001\u5362\u6d6e\u5bab\u3001\u5927\u82f1\u535a\u7269\u9986\u548c\u8036\u9c81\u5927\u82f1\u827a\u672f\u4e2d\u5fc3\u9001\u53bb\u4e86\u5377\u8f74\u3002\n\u5d14\u987a\u5b9e\u5c06\u4e00\u67613\u6beb\u7c73\u957f\u7684\u4e1c\u9ad8\u548c\u5929\u6761\u7528\u4e59\u9187\u6d3b\u5316\u7684\u7c98\u5408\u5242\u5237\u5230\u4e00\u8fb9\uff0c\u8f7b\u8f7b\u5730\u906e\u4f4f\u4e86\u5e73\u514b\u5c3c\u53d1\u9ec4\u7684\u9875\u9762\u4e0a\u7684\u4e00\u4e2a\u7455\u75b5\u3002\u8f7b\u8f7b\u4e00\u63a8\uff0c\u6587\u4ef6\u5c31\u878d\u4e3a\u4e00\u4f53\u4e86\u3002\n\u4ece\u6b63\u5e38\u7684\u9605\u8bfb\u8ddd\u79bb\u770b\uff0c\u4f3c\u4e4e\u4ec0\u4e48\u90fd\u6ca1\u6709\u505a\uff0c\u4f46\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5fae\u5c0f\u7684Kozo\u6293\u7740\u58a8\u6c34\uff0c\u4ee5\u6700\u5c0f\u7684\u65b9\u5f0f\u52a0\u5f3a\u4e86\u5b57\u6bcd\u7684\u5f3a\u5ea6\u3002\u4e00\u4e9b\u4e8b\u60c5\uff0c\u53ef\u80fd\u4f1a\u5728\u5f88\u591a\u5e74\u540e\u4ea7\u751f\u5f88\u5927\u7684\u4e0d\u540c\u3002", "note_en": "In 2017, Soyeon Choi, the head paper conservator at the Yale Center for British Art, received three folios of a letter written in 1753 by Eliza Pinckney, a prominent American agriculturalist. The scrawling lines on the cracked paper were elegant, but on close inspection they almost seemed to dance. And when Ms. Choi looked even more closely, through a binocular headband magnifier, she saw tiny rips around certain letters, and jagged holes around others.\n Paper deteriorates for many reasons: fungi, moisture, heat, light, atmospheric pollutants. In Pinckney\u2019s letter, as with many Western writings before the 20th century, the ink itself was eating through the paper, in a process called iron gall ink corrosion.\n Ms. Choi, who has worked as a paper conservator for more than 20 years, and a number of other paper conservators I spoke to around the country, said their duty is to stave off these kinds of deterioration \u2014 to preserve the character and content of historical documents far into the future, long after their authors and conservators are gone.\n Staring at those tiny splits and holes in Pinckney\u2019s letter, Ms. Choi decided to proceed in the least obtrusive, most delicate manner possible: with the thinnest paper in the world.\n  The paper, called tengujo, is made by a company called Hidaka Washi, at a factory in the Kochi prefecture of Japan. The ingredients are simple, and the process is \u201cnot a very secret, special kind of thing,\u201d Hiroyoshi Chinzei, the owner and operator of Hidaka Washi, told me recently over the phone. But the product that emerges is almost magical. The fibers knit together into gossamer lattice that is as much empty space as substance; what starts as a wet, white sheet becomes, on drying, almost completely transparent.\n Hidaka Washi has specialized in the paper\u2019s production since Mr. Chinzei\u2019s great-grandfather first opened the company in 1949.\n  Inside the factory, the air is steamy from warm baths of alkaline water in which bushels of kozo \u2014 the stems of mulberry trees \u2014 are soaked. Workers remove dirt from the kozo and pound it into strands of pulpy fiber, which they lay in a tub containing water and neri, a thick viscous liquid that is derived from the tororo-aoi plant, also known as sunset hibiscus. Reacting with the neri, the kozo fibers gain a sticky, gummy quality, which allows them to be broken down even further and pulled apart into long white ropes, which are removed from the tub and spread out evenly over a screen. The ropes are massaged together and flattened to the width of a couple of spiderweb-like fibers. As the liquid dries away, these fibers are left woven together, clinging to each other in a delicate sheet of paper.\n Tengujo can help reinforce and repair damages from many sources. Ms. Choi calls it \u201cthe bread and butter in paper conservation\u201d and \u201cprobably the most gentle way of reinforcing anything.\u201d Sometimes tengujo is used for spot-treatment, other times to completely line a manuscript. Its long fibers provide structure and support while remaining almost completely unnoticeable.\n  The paper was traditionally crafted by hand for more than 1,000 years in the Kochi and Gifu prefectures, and was used for a number of practical and ceremonial purposes \u2014 for writing, printing and artwork. But in the 20th century, paper manufacturers started using machines, that could spread the kozo fibers more evenly than before. This allowed tengujo to be made thinner and thinner while still retaining its characteristic flexibility and strength. In Japan, and eventually around the world, it became the go-to material for sliding-door covers, kimono wrappings and tissue paper.\n Tengujo can be made so thin that, at a certain point, it is too insubstantial for even the most gentle, decorative uses. At the width of a couple of kozo fibers, the paper becomes as thin as the wings of a mayfly.  Only one use remains then: paper conservation.\n Trying to aggressively mend a document is risky because long-term chemical and physical effects are highly variable and relatively unknown. \u201cThe more and more I am in this field, I feel that I should do less and less,\u201d Ms. Choi said.\n About six years ago, Mr. Chinzei was asked by the National Archives of Japan to develop a tengujo that weighs 1.6 grams per square meter, thinner and lighter than any other paper in the world at the time. It took him two years of trial and error, minutely varying the pressure of the pounding machine, the speed of the mixing, the density of the fiber and neri in the water. \u201cMy workers and I were amazed we could make it,\u201d Mr. Chinzei said.\n The width of this thinnest tengujo is the same as the diameter of a single kozo fiber: 0.02 millimeters. Thinner than human skin. No other company has been able to replicate it.\n It is now sold around the world for paper conservation. Chinzei has sent rolls to the Library of Congress, the Louvre, the British Museum and the Yale Center for British Art.\n Slicing a 3-millimeter strip of Hidaka Washi tengujo with an ethanol-activated adhesive brushed onto one side, Ms. Choi gently covered an imperfection in Pinckney\u2019s yellowing page. With a little push, the papers melted into each other.\n From a normal reading distance it looked as if nothing had been done, but under close examination you could see tiny strands of kozo gripping onto the ink, reinforcing the letter in the smallest way. Something that might, over many years, make a big difference.", "posttime": "2020-05-07 19:59:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e16\u754c,paper,\u7ea4\u7ef4", "title": "\u4e16\u754c\u4e0a\u6700\u8584\u7684\u7eb8", "title_en": "The Thinnest Paper in the World", "transed": 1, "url": "https://www.nytimes.com/2020/05/05/science/the-thinnest-paper-in-the-world.html", "via": "", "real_tags": ["\u4e16\u754c", "paper", "\u7ea4\u7ef4"]}, {"category": "", "categoryclass": "", "imagename": "437a7db4851c8b7e259609e1f956b752.png", "infoid": 1001063, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8be5\u6846\u67b6\u6e90\u4e8exmake\u4e2d\u56fe\u5f62\u83dc\u5355\u914d\u7f6e\u7684\u8981\u6c42\uff0c\u7c7b\u4f3c\u4e8eLinux\u5185\u6838\u7684menuconf\u6765\u914d\u7f6e\u7f16\u8bd1\u53c2\u6570\uff0c\u56e0\u6b64\u4f7f\u7528curses\u548clua\u5b9e\u73b0\u4e86\u8de8\u5e73\u53f0\u7684\u5b57\u7b26\u7ec8\u7aefUI\u5e93\u3002\n$xmake\u8fd0\u884c\u6d4b\u8bd5\u5bf9\u8bdd\u6846$xmake\u8fd0\u884c\u6d4b\u8bd5\u7a97\u53e3$xmake\u8fd0\u884c\u6d4b\u8bd5\u684c\u9762$xmake\u8fd0\u884c\u6d4b\u8bd5\u8f93\u5165\u5bf9\u8bdd\u6846$xmake\u8fd0\u884c\u6d4b\u8bd5mconf\u5bf9\u8bdd\u6846\u3002\n\u672c\u5730ltui=\u9700\u8981(&#34\uff1bltui&34\uff1b)\u672c\u5730\u5e94\u7528\u7a0b\u5e8f=ltui\u3002\u5e94\u7528\u7a0b\u5e8f\u672c\u5730\u4e8b\u4ef6=ltui\u3002\u4e8b\u4ef6\u672c\u5730RECT=ltui\u3002RECT LOCAL WINDOW=ltui\u3002\u7a97\u53e3\u672c\u5730demo=application()\u51fd\u6570demo\uff1ainit()application\u3002init(self\uff0c&#34\uff1bdemo&#34\uff1b)self\uff1aback_set(&#34\uff1bBlue&#34\uff1b)self\uff1ainsert(window\uff1anew(&#34\uff1bwindow.main&#34\uff1b\uff0crect{1\uff0c1\uff0cself\uff1awidth()-1\uff0cself\uff1aHeight()-1}\uff0c&#34\uff1bmain window&#34\uff1b\uff0ctrue))enddemo\uff1arun()\u3002\n\u51fd\u6570\u6f14\u793a\uff1ainit()--.\u3002LOCAL DIALOG_INPUT=\u8f93\u5165DIALOG\uff1aNEW(&#34\uff1bDialog.input&#34\uff1b\uff0cRECT{0\uff0c0\uff0c50\uff0c8})DIALOG_INPUT\uff1aText()\uff1aText_Set(&#34\uff1b\u8bf7\u8f93\u5165\u6587\u672c\uff1a&#34\uff1b)DIALOG_INPUT\uff1aBUTTON_ADD(&#34\uff1bNO&#34\uff1b\uff0c&#34\uff1b&lt\uff1bNo&&gt;\uff1b&#34\uff1b\uff0cFunction(V)DIALOG_INPUT\uff1aQUIT()End)DIALOG_INPUT\uff1aBUTTON_ADD(&)END\u3002\u662f&#34\uff1b\uff0c&#34\uff1b&lt\uff1b\u662f&&gt;\uff1b&#34\uff1b\uff0cfunction(V)DIALOG_INPUT\uff1aQUIT()END)SELF\uff1aINSERT(DIALOG_INPUT\uff0c{centerx=true\uff0ccentery=true})END", "note_en": "This framework originated from the requirements of graphical menu configuration in  xmake.Similar to the linux kernel&#39;s menuconf to configure the compilation parameters, so using curses and lua to implement a cross-platform character terminal ui library.\n          $  xmake run  test dialog$  xmake run  test window$  xmake run  test desktop$  xmake run  test inputdialog$  xmake run  test mconfdialog\n       local ltui  =  require(  &#34;ltui &#34;) local application  = ltui. application local event  = ltui. event local rect  = ltui. rect local window  = ltui. window local demo  =  application() function  demo:init() application. init( self,   &#34;demo &#34;)  self: background_set(  &#34;blue &#34;)  self: insert(window: new(  &#34;window.main &#34;,  rect { 1,  1,  self: width()  -  1,  self: height()  -  1},   &#34;main window &#34;,  true)) enddemo: run()\n      function  demo:init()   -- ...  local dialog_input  = inputdialog: new(  &#34;dialog.input &#34;,  rect { 0,  0,  50,  8}) dialog_input: text(): text_set(  &#34;please input text: &#34;) dialog_input: button_add(  &#34;no &#34;,   &#34;&lt; No &gt; &#34;,  function ( v) dialog_input: quit()  end) dialog_input: button_add(  &#34;yes &#34;,   &#34;&lt; Yes &gt; &#34;,  function ( v) dialog_input: quit()  end)  self: insert(dialog_input, {centerx  =  true, centery  =  true}) end", "posttime": "2020-05-07 19:58:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8de8\u5e73\u53f0,cross,ltui", "title": "LTUI-\u57fa\u4e8eLua\u7684\u8de8\u5e73\u53f0\u7ec8\u7aefUI\u5e93", "title_en": "LTUI \u2013 A cross platform terminal UI library based on Lua", "transed": 1, "url": "https://github.com/tboox/ltui", "via": "", "real_tags": ["\u8de8\u5e73\u53f0", "cross", "ltui"]}, {"category": "", "categoryclass": "", "imagename": "a16397eb55f8b10fdacb1227d4145217.png", "infoid": 1001062, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Fatal Exception\uff1aNSInvalidArgumentException0 CoreFoundation 0x1a5c2896c__exceptionPreprocess1 libobjc.A.dylib 0x1a5941028 objc_exception_throw2 CoreFoundation 0x1a5b26dcc-[NSOrderedSet initWithSet:copyItems\uff1a]3 CoreFoundation 0x1a5c2d048_forwarding_4 CoreFoundation 0x1a5c2f3a0_CF_forwarding_prep_05 FBSDKCoreKit 0x1039830cc+[FBSDKRestrictiveDataFilterManager updateFilters\uff1a]+80(FBSDKRestrictiveDataFilterManager.m:80)6 FBSDKCoreKit 0x103985f34+[FBSDKServerConfigurationManager processLoadRequestResponse:error:appID\uff1a]+240(FBSDKServerConfigurationManager.m:240)7 FBSDKCoreKit 0x103985750__78+[FBSDKServerConfigurationManager loadServerConfigurationWithCompletionBlock\uff1a]_block_invoke+161(FBSDKServerConfigurationManager.m:161)8 FBSDKCoreKit 0x103969c5c-[FBSDKGraphRequestMetadata\u3002invokeCompletionHandlerForConnection:withResults:error\uff1a]+41(FBSDKGraphRequestMetadatAM\uff1a41)9 FBSDKCoreConnection 0x103967534__82-[FBSDKGraphRequestConnection processResultBody:error:metadata:canNotifyDelegate\uff1a]_block_invoke+806(FBSDKGraphRequestConnection.m\uff1a806)10FBSDKCoreKit 0x103967428-[FBSDKGraphRequestConnection processResultBody:error:metadata:canNotifyDelegate\uff1a]+839(FBSDKGraphRequestConnection.m\uff1a839)11 FBSDKGraphRequestConnection.m\uff1a839)11 FBSDKCoreConnection 0x103967428-[FBSDKGraphRequestConnection.m\uff1a839)11 FBSDKCoreConnection\u30020x1a5af822c-[__NSArrayM EnumererateObjectsWithOptions\uff1aUsingBlock\uff1a]14 FBSDKCoreKit 0x103966dfc-[FBSDKGraphRequestConnection Complete eWithResults\uff1anetworkError\uff1a]+767(FBSDKGraphRequestConnection.m\uff1a767)15 FBSDKCoreKit 0x1039662b0-[FBSDKGraphRequestConnection.m\uff1a767)15 FBSDKCoreKit 0x1039662b0-[FBSDKGraphRequestConnection.m\uff1a767\u3002__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__21\u6838\u5fc3\u57fa\u91d1\u4f1a0x1a5b9ea24__CFRunLoopRun22\u6838\u5fc3\u57fa\u91d1\u4f1a0x1a5b9df40CFRunLoopRunSpecific23\u56fe\u5f62\u670d\u52a10x1afe2e534 GSEventRunModal24 UIKitCore 0x1a9d29580 UIApplicationMain25\u6240\u6709\u8f68\u8ff90x10233876c Main+21(UIDevice+Storage.SWIFT\uff1a21)26 lib", "note_en": "Fatal Exception: NSInvalidArgumentException0 CoreFoundation 0x1a5c2896c __exceptionPreprocess1 libobjc.A.dylib 0x1a5941028 objc_exception_throw2 CoreFoundation 0x1a5b26dcc -[NSOrderedSet initWithSet:copyItems:]3 CoreFoundation 0x1a5c2d048 ___forwarding___4 CoreFoundation 0x1a5c2f3a0 _CF_forwarding_prep_05 FBSDKCoreKit 0x1039830cc +[FBSDKRestrictiveDataFilterManager updateFilters:] + 80 (FBSDKRestrictiveDataFilterManager.m:80)6 FBSDKCoreKit 0x103985f34 +[FBSDKServerConfigurationManager processLoadRequestResponse:error:appID:] + 240 (FBSDKServerConfigurationManager.m:240)7 FBSDKCoreKit 0x103985750 __78+[FBSDKServerConfigurationManager loadServerConfigurationWithCompletionBlock:]_block_invoke + 161 (FBSDKServerConfigurationManager.m:161)8 FBSDKCoreKit 0x103969c5c -[FBSDKGraphRequestMetadata invokeCompletionHandlerForConnection:withResults:error:] + 41 (FBSDKGraphRequestMetadata.m:41)9 FBSDKCoreKit 0x103967534 __82-[FBSDKGraphRequestConnection processResultBody:error:metadata:canNotifyDelegate:]_block_invoke + 806 (FBSDKGraphRequestConnection.m:806)10 FBSDKCoreKit 0x103967428 -[FBSDKGraphRequestConnection processResultBody:error:metadata:canNotifyDelegate:] + 839 (FBSDKGraphRequestConnection.m:839)11 FBSDKCoreKit 0x103967038 __64-[FBSDKGraphRequestConnection completeWithResults:networkError:]_block_invoke + 788 (FBSDKGraphRequestConnection.m:788)12 CoreFoundation 0x1a5bfa66c __NSARRAY_IS_CALLING_OUT_TO_A_BLOCK__13 CoreFoundation 0x1a5af822c -[__NSArrayM enumerateObjectsWithOptions:usingBlock:]14 FBSDKCoreKit 0x103966dfc -[FBSDKGraphRequestConnection completeWithResults:networkError:] + 767 (FBSDKGraphRequestConnection.m:767)15 FBSDKCoreKit 0x1039662b0 -[FBSDKGraphRequestConnection completeFBSDKURLSessionWithResponse:data:networkError:] + 634 (FBSDKGraphRequestConnection.m:634)16 FBSDKCoreKit 0x10396443c __36-[FBSDKGraphRequestConnection start]_block_invoke_3 + 242 (FBSDKGraphRequestConnection.m:242)17 libdispatch.dylib 0x1a58ccb7c _dispatch_call_block_and_release18 libdispatch.dylib 0x1a58cdfd8 _dispatch_client_callout19 libdispatch.dylib 0x1a58d9cc8 _dispatch_main_queue_callback_4CF20 CoreFoundation 0x1a5ba3cc8 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__21 CoreFoundation 0x1a5b9ea24 __CFRunLoopRun22 CoreFoundation 0x1a5b9df40 CFRunLoopRunSpecific23 GraphicsServices 0x1afe2e534 GSEventRunModal24 UIKitCore 0x1a9d29580 UIApplicationMain25 AllTrails 0x10233876c main + 21 (UIDevice+Storage.swift:21)26 libdyld.dylib 0x1a5a1ce18 start", "posttime": "2020-05-07 19:58:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ios,facebook,fbsdkgraphrequestconnection", "title": "Facebook iOS SDK\u8fdc\u7a0b\u5d29\u6e83Spotify\u3001TikTok\u3001Pinterest\u3001Winno\u7b49", "title_en": "Facebook iOS SDK Remotely Crashing Spotify, TikTok, Pinterest, Winno and More", "transed": 1, "url": "https://github.com/facebook/facebook-ios-sdk/issues/1374", "via": "", "real_tags": ["ios", "facebook"]}, {"category": "", "categoryclass": "", "imagename": "4bf115361365ef6dcba07ffff833a728.jpg", "infoid": 1001061, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u516b\u5341\u5e74\u4ee3\u521d\u7684\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u5f00\u59cb\u9605\u8bfb\u4e00\u7cfb\u5217\u795e\u79d8\u6545\u4e8b\uff0c\u4e3b\u89d2\u662f\u4e00\u4f4d\u540d\u53eb\u9a6c\u4e01\u00b7\u8d1d\u514b(Martin Beck)\u7684\u745e\u5178\u51f6\u6740\u6848\u4fa6\u63a2\u3002\u5f53\u65f6\u6211\u4f4f\u5728\u4f2f\u514b\u5229\uff0c\u653b\u8bfb\u82f1\u56fd\u6587\u5b66\u535a\u58eb\u5b66\u4f4d\uff0c\u56e0\u4e3a\u6211\u505a\u8fc7\u5404\u79cd\u5404\u6837\u7684\u517c\u804c\u5de5\u4f5c\uff0c\u6211\u8ba4\u8bc6\u5b66\u9662\u5185\u5916\u7684\u5f88\u591a\u4eba\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5065\u8c08\u7684\u4eba\uff0c\u6211\u5f00\u59cb\u544a\u8bc9\u6211\u5468\u56f4\u7684\u6bcf\u4e2a\u4eba\u8fd9\u4e2a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u8b66\u5bdf\u7cfb\u5217\u3002\u5f88\u5feb\uff0c\u6211\u4eec\u90fd\u8bfb\u5230\u4e86\u5b83\u3002\n\u6211\u5f53\u65f6\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u662f\u4e00\u5bf9\u592b\u5987\u5199\u7684\uff0c\u9a6c\u6770\u00b7\u8096\u6c83\u5c14(Maj Sj\u00f6wall)\u548c\u4f69\u5c14\u00b7\u74e6\u6d1b(Per Wahl\u00f6\u00f6)\uff0c\u4ed6\u4eec\u4ece\u4e00\u5f00\u59cb\u5c31\u628a\u5b83\u60f3\u8c61\u6210\u4e00\u7cfb\u5217\u5341\u672c\u4e66\uff0c\u5c06\u4ece\u660e\u663e\u7684\u9a6c\u514b\u601d\u4e3b\u4e49\u89d2\u5ea6\u63cf\u7ed8\u745e\u5178\u793e\u4f1a\u3002\u9a6c\u4e01\u00b7\u8d1d\u514b(Martin Beck)\u7cfb\u5217\u51fa\u7248\u4e8e1965\u5e74\u81f31975\u5e74\u4e4b\u95f4\uff0c\u5728\u63a5\u8fd1\u5c3e\u58f0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u53d8\u5f97\u660e\u663e\u66f4\u52a0\u9ed1\u6697-\u5c3d\u7ba1\u8fd9\u662f\u56e0\u4e3a\u745e\u5178\u672c\u8eab(\u66f4\u4e0d\u7528\u8bf4\u5b83\u4ee5\u5916\u7684\u4e16\u754c)\u5728\u90a3\u5341\u5e74\u91cc\u6076\u5316\u4e86\uff0c\u8fd8\u662f\u56e0\u4e3a\u4f69\u5c14\u00b7\u74e6\u6d1b(Per Wahl\u00f6)\u572870\u5e74\u4ee3\u521d\u5f97\u77e5\u81ea\u5df1\u6b7b\u4e8e\u764c\u75c7\uff0c\u8fd9\u662f\u6ca1\u6709\u4eba\u80fd\u56de\u7b54\u7684\u3002\u540e\u6765\u6211\u4e86\u89e3\u5230\uff0c\u74e6\u6d1b\u53bb\u4e16\u4e8e1975\u5e746\u6708\uff0c\u4e5f\u5c31\u662f\u7b2c\u5341\u5377\u5728\u745e\u5178\u51fa\u7248\u7684\u90a3\u4e00\u5929\uff0c\u4ed6\u50cf\u75af\u5b50\u4e00\u6837\u52aa\u529b\u5de5\u4f5c\uff0c\u4ee5\u6309\u65f6\u5b8c\u6210\u8fd9\u672c\u4e66\u3002(Sj\u00f6wall\u5728\u5f88\u591a\u65b9\u9762\u90fd\u662f\u4ed6\u7684\u5e73\u7b49\u4f19\u4f34--\u4ed6\u4eec\u4f1a\u5728\u665a\u4e0a\u8f6e\u6d41\u5199\u7ae0\u8282\uff0c\u4ee5\u514d\u88ab\u5e74\u5e7c\u7684\u5b69\u5b50\u6253\u65ad\uff0c\u7136\u540e\u4ea4\u6362\u7ae0\u8282\u8fdb\u884c\u7f16\u8f91--\u4ed6\u8bf4\uff0c\u5230\u6700\u540e\uff0c\u74e6\u6d1b\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u81ea\u5df1\u5199\u7684\u3002)(Sj\u00f6wall\u5728\u5f88\u591a\u65b9\u9762\u90fd\u662f\u4ed6\u7684\u5e73\u7b49\u4f19\u4f34--\u4e3a\u4e86\u4e0d\u88ab\u5e74\u5e7c\u7684\u5b69\u5b50\u6253\u65ad\uff0c\u4ed6\u4eec\u4f1a\u8f6e\u6d41\u5199\u7ae0\u8282\uff0c\u7136\u540e\u4ea4\u6362\u7ae0\u8282\u8fdb\u884c\u7f16\u8f91\u3002)\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u4ed6\u7559\u4e0b\u7684\u6b63\u662f\u4ed6\u6253\u7b97\u5199\u7684\u4e1c\u897f\uff1a\u5341\u672c\u4e66\uff0c\u6bcf\u672c\u4e66\u6709\u4e09\u5341\u7ae0\uff0c\u5408\u5728\u4e00\u8d77\uff0c\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u4e00\u7684\u8fde\u7eed\u7684\u793e\u4f1a\u53d9\u4e8b\uff0c\u5728\u67d0\u4e9b\u65b9\u9762\u53ef\u4ee5\u4e0e\u5df4\u5c14\u624e\u514b\u3001\u5de6\u62c9\u6216\u72c4\u66f4\u65af\u7684\u4f5c\u54c1\u76f8\u63d0\u5e76\u8bba\uff0c\u5c3d\u7ba1\u7a7f\u7740\u8b66\u5bdf\u7a0b\u5e8f\u7684\u5916\u8863\u3002\n\u5982\u679c\u8bf4\u9a6c\u4e01\u00b7\u8d1d\u514b(Martin Beck)\u7cfb\u5217\u6539\u53d8\u4e86\u6211\u7684\u751f\u6d3b\uff0c\u90a3\u5c06\u662f\u4e00\u79cd\u620f\u5267\u6027\u7684\u5938\u5f20\uff0c\u4f46\u5c31\u50cf\u6240\u6709\u8fd9\u6837\u7684\u5938\u5f20\u4e00\u6837\uff0c\u8fd9\u4e00\u6b21\u5c06\u5efa\u7acb\u5728\u4e8b\u5b9e\u7684\u57fa\u7840\u4e0a\u3002\u8fd9\u4e9b\u4e66\u5851\u9020\u4e86\u6211\u5bf9\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u534a\u5c9b\u7684\u770b\u6cd5\uff0c\u4e5f\u5851\u9020\u4e86\u6211\u5bf9\u795e\u79d8\u80fd\u505a\u4ec0\u4e48\u7684\u611f\u89c9\u3002\u5982\u679c\u540e\u6765\u6211\u6210\u4e86\u540d\u526f\u5176\u5b9e\u7684\u4e66\u8ff7\uff0c\u6bcf\u5e74\u82b1\u51e0\u767e\u7f8e\u5143(\u5982\u679c\u4e0d\u662f\u51e0\u5343\u7f8e\u5143)\u5728Kindle\u4e0a\u8d2d\u4e70\u745e\u5178\u3001\u4e39\u9ea6\u548c\u632a\u5a01\u7684\u795e\u79d8\u5c0f\u8bf4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e60\u60ef\u65e0\u7591\u53ef\u4ee5\u5f52\u56e0\u4e8e\u9a6c\u4e01\u00b7\u8d1d\u514b\u65af(Martin Becks)\u4e4b\u5916\u7684\u8bb8\u591a\u4e8b\u60c5\uff1a\u4f8b\u5982\uff0c\u6570\u5b57\u56fe\u4e66\u7684\u53d1\u660e\uff0c\u5b83\u5141\u8bb8\u51b2\u52a8\u8d2d\u4e70\u548c\u51e0\u4e4e\u65e0\u9650\u7684\u5b58\u50a8\uff1b\u65af\u8482\u683c\u00b7\u62c9\u5c14\u68ee(Stiig Larsson)\u7684\u5343\u79a7\u5e74\u7cfb\u5217\u7684\u5de8\u5927\u800c\u4ee4\u4eba\u60ca\u8bb6\u7684\u6210\u529f\uff0c\u5b83\u9f13\u52b1\u7f8e\u56fd\u51fa\u7248\u5546\u63a8\u51fa\u6240\u6709\u53ef\u7528\u7684\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u60ca\u609a\u7247\uff1b\u5728\u7f8e\u56fd\u7535\u89c6\u4e0a\u5f15\u5165\u4e86\u957f\u5468\u671f\u7684\u8b66\u5bdf\u7a0b\u5e8f\uff0c\u5305\u62ec\u5e0c\u5c14\u8857\u84dd\u8c03(Hill Street Blues)\u3001\u7ebd\u7ea6\u8b66\u5c40\u84dd(NYPD Blue)\u548c\u6700\u7ec8\u7684\u706b\u7ebf(The Wire)\u7b49\u5b9d\u77f3\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5de9\u56fa\u4e86\u6211\u5bf9\u8fd9\u79cd\u5f62\u5f0f\u7684\u8ff7\u604b\uff1b\u66f4\u4e0d\u7528\u8bf4\u5bf9\u6211\u6765\u8bf4\uff0c\u4ecd\u7136\u5904\u4e8e\u6f5c\u610f\u8bc6\u6c34\u5e73\u7684\u6570\u5341(\u5982\u679c\u4e0d\u662f\u6570\u767e)\u7c7b\u4f3c\u7684\u884c\u4e3a\u5851\u9020\u56e0\u7d20\u3002\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u786e\u5207\u5730\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u4eec\u4f1a\u8bfb\u5230\u6211\u4eec\u8bfb\u5230\u7684\u4e1c\u897f\u3002\u6b64\u523b\uff0c\u6211\u751a\u81f3\u60f3\u4e0d\u8d77\u6765\u662f\u8c01\u6700\u5148\u5411\u6211\u63a8\u8350\u4e86\u9a6c\u4e01\u00b7\u8d1d\u514b\u65af(Martin Becks)\u4e50\u961f(\u5c3d\u7ba1\u6211\u77e5\u9053\u90a3\u662f\u4e00\u4e2a\u4eba\uff0c\u800c\u4e0d\u662f\uff0c\u6bd4\u5982\u8bf4\uff0c\u4e66\u5e97\u9648\u5217\u6216\u62a5\u7eb8\u8bc4\u8bba)\u3002\u4e0d\u7ba1\u662f\u8c01\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u90fd\u503c\u5f97\u6211\u6c38\u8fdc\u611f\u6fc0\u3002\n\u8fd9\u5341\u672c\u4e66\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\uff1f\u6216\u8005--\u4e00\u4e2a\u7a0d\u6709\u4e0d\u540c\u7684\u95ee\u9898--\u662f\u4ec0\u4e48\u57281981\u5e74\u62161982\u5e74\u5438\u5f15\u4e86\u6211\uff0c\u5f53\u65f6\u6211\u5feb30\u5c81\u4e86\uff0c\u7f8e\u56fd\u5373\u5c06\u6210\u4e3a\u4eca\u5929\u7684\u7f8e\u56fd\uff1f\n\u8bf7\u8bb0\u4f4f\uff0c\u7f57\u7eb3\u5fb7\u00b7\u91cc\u6839(Ronald Reagan)\u521a\u521a\u5f53\u9009\u603b\u7edf\u3002\u6211\u4eec\u4e2d\u8bb8\u591a\u6295\u7968\u53cd\u5bf9\u4ed6\u7684\u4eba(\u7279\u522b\u662f\u5728\u4ed6\u62c5\u4efb\u5dde\u957f\u671f\u95f4\u9971\u53d7\u714e\u71ac\u7684\u52a0\u5dde\u4eba)\u53d1\u8a93\uff0c\u5982\u679c\u4ed6\u83b7\u80dc\uff0c\u6211\u4eec\u5c06\u79bb\u5f00\u8fd9\u4e2a\u56fd\u5bb6\u3002\u6211\u4eec\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5b9e\u65bd\u8fd9\u4e9b\u5a01\u80c1--\u6b63\u5982\u6211\u5728\u90a3\u4e4b\u540e\u7684\u51e0\u5e74\u91cc\u53cd\u590d\u4e86\u89e3\u5230\u7684\u90a3\u6837--\u4f46\u5728\u6211\u7684\u60f3\u8c61\u4e2d\uff0c\u81ea\u8d8a\u5357\u6218\u4e89\u4ee5\u6765\uff0c\u745e\u5178\u80af\u5b9a\u662f\u7f8e\u56fd\u6301\u4e0d\u540c\u653f\u89c1\u8005\u7684\u907f\u96be\u6240\uff0c\u662f\u4eba\u4eec\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u4ee5\u9003\u5f80\u7684\u7406\u60f3\u907f\u96be\u6240\u4e4b\u4e00\u3002\u9a6c\u4e01\u00b7\u8d1d\u514b\u5c0f\u8bf4\u6240\u5904\u7684\u793e\u4f1a\u4ee3\u8868\u4e86\u4e00\u79cd\u4eba\u9053\u7684\u3001\u975e\u82cf\u8054\u7684\u793e\u4f1a\u4e3b\u4e49\uff0c\u8fd9\u65e0\u7591\u662f\u5b83\u4eec\u5438\u5f15\u6211\u7684\u4e00\u5927\u90e8\u5206\u3002\u6211\u5f53\u65f6\u6ca1\u6709\u6ce8\u610f\u5230\u7684\u662f\uff0cSj\u00f6wall\u548cWahl\u00f6\u5b9e\u9645\u4e0a\u662f\u591a\u4e48\u4e25\u5389\u5730\u6279\u8bc4\u4ed6\u4eec\u56fd\u5bb6\u5b9e\u884c\u7684\u4e0d\u5145\u5206\u7684\u793e\u4f1a\u4e3b\u4e49\u3002\u76f8\u53cd\uff0c\u6211\u770b\u5230\u7684\u662f\u67aa\u652f\u75af\u72c2\u3001\u4f01\u4e1a\u7ecf\u8425\u3001\u8c0b\u6740\u6848\u7316\u7357\u7684\u7f8e\u56fd\u4e0e\u8fd9\u4e2a\u8fde\u8b66\u5bdf\u90fd\u8ba8\u538c\u67aa\u652f\u7684\u660e\u667a\u5c0f\u56fd\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u5728\u8fd9\u4e2a\u56fd\u5bb6\uff0c\u72af\u7f6a\u88ab\u89c6\u4e3a\u4e00\u4e2a\u793e\u4f1a\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4e2a\u4eba\u7684\u75c5\u7406\uff0c\u7f55\u89c1\u7684\u8fde\u73af\u6216\u5927\u89c4\u6a21\u6740\u4eba\u72af\u7684\u51fa\u73b0\u7acb\u5373\u5f15\u53d1\u4e86\u4e0e\u7f8e\u56fd\u6709\u5145\u5206\u8bb0\u8f7d\u7684\u6b64\u7c7b\u72af\u7f6a\u5386\u53f2\u7684\u6bd4\u8f83\u3002\n\u7136\u540e\u662f\u6211\u5bf9\u9a6c\u4e01\u00b7\u8d1d\u514b\u7684\u51f6\u6740\u6848\u4fa6\u63a2\u56e2\u961f\u7684\u7279\u522b\u559c\u7231\u3002\u56e2\u961f\u7684\u60f3\u6cd5\u672c\u8eab\u5c31\u5f88\u5438\u5f15\u4eba\uff0c\u7279\u522b\u662f\u4e0e\u901a\u5e38\u7684\u7f8e\u56fd\u4fa6\u63a2\u5f62\u6210\u9c9c\u660e\u5bf9\u6bd4\u7684\u662f\uff0c\u7f8e\u56fd\u4fa6\u63a2\u662f\u4e00\u4e2a\u987d\u56fa\u7684\u6d41\u6c13\uff0c\u901a\u5e38\u9119\u89c6\u96c6\u4f53\u7a0b\u5e8f\uff0c\u9009\u62e9\u5355\u72ec\u5de5\u4f5c\uff0c\u4e0d\u53d7\u76d1\u7ba1\u3002\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u7231\u8fd9\u4e2a\u4eba\n\u8981\u4f20\u8fbe\u79d1\u5c14\u4f2f\u683c\u7684\u53ef\u7231\u4e4b\u5904\u5e76\u975e\u6613\u4e8b\u3002\u4ed6\u7684\u9b45\u529b\u548c\u673a\u667a\u867d\u7136\u5f15\u4eba\u6ce8\u76ee\uff0c\u4f46\u5e76\u4e0d\u9002\u5408\u7b80\u5355\u5f15\u7528\uff1b\u5b83\u4eec\u662f\u7d2f\u79ef\u7684\uff0c\u5c31\u50cf\u672c\u7cfb\u5217\u4e2d\u7684\u5176\u4ed6\u4e00\u5207\u4e00\u6837\u3002\u4ed6\u4e5f\u4e0d\u662f\u7279\u522b\u6709\u5438\u5f15\u529b\uff0c\u81f3\u5c11\u5728\u5916\u8868\u4e0a\u662f\u8fd9\u6837\u3002\u9996\u5148\uff0c\u4ed6\u660e\u663e\u8d85\u91cd\uff0c\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u59a8\u788d\u4ed6\u5bf9\u67d0\u4e9b\u5973\u4eba\u975e\u5e38\u6709\u5438\u5f15\u529b(\u7279\u522b\u662f\u4ed6\u500d\u53d7\u8d5e\u8d4f\u4e14\u5e74\u8f7b\u5f97\u591a\u7684\u59bb\u5b50\u5188\u7eb3)\u3002\u4ed6\u6ca1\u6709\u4ed6\u7684\u4e00\u4e9b\u961f\u53cb\u62e5\u6709\u7684\u4efb\u4f55\u7279\u6b8a\u5929\u8d4b-\u6bd4\u5982\u5f17\u96f7\u5fb7\u91cc\u514b\u00b7\u6885\u5170\u5fb7(Fredrik Melander)\u7684\u975e\u51e1\u8bb0\u5fc6\u529b\uff0c\u5188\u74e6\u5c14\u5fb7\u00b7\u62c9\u5c14\u68ee(Gunvald Larsson)\u5de8\u5927\u7684\u8eab\u4f53\u52c7\u6c14\uff0c\u751a\u81f3\u662f\u7f3a\u4e4f\u60f3\u8c61\u529b\u7684\u57c3\u7eb3\u5c14\u00b7\u4f26\u6069(Eina R\u00f6nn)\u7eaf\u7cb9\u7684\u987d\u5f3a\u6bc5\u529b-\u4f46\u4ed6\u7684\u5168\u9762\u667a\u6167\u548c\u654f\u9510\u3001\u8bbd\u523a\u7684\u5e7d\u9ed8\u611f\u4f7f\u4ed6\u6210\u4e3a\u9a6c\u4e01\u00b7\u8d1d\u514b(Martin Beck)\u65e0\u4ef7\u7684\u5408\u4f5c\u8005\u548c\u8bd5\u542c\u677f\u3002\u6b63\u5982\u5728\u672c\u7cfb\u5217\u4e2d\u7ecf\u5e38\u8bf4\u7684\u90a3\u6837\uff0c\u4ed6\u4eec\u4e24\u4e2a\u4eba\u4e0d\u9700\u8981\u89e3\u91ca\u5c31\u80fd\u76f8\u4e92\u7406\u89e3\uff0c\u8fd9\u53ef\u80fd\u662f\u4eb2\u5bc6\u53cb\u8c0a\u7684\u672c\u8d28\u5b9a\u4e49\u3002\u6b63\u5982Sj\u00f6wall\u548cWahl\u00f6\u4e00\u5b9a\u77e5\u9053\u7684\u90a3\u6837\uff0c\u8fd9\u4e5f\u662f\u4e00\u4ef6\u91cd\u8981\u800c\u6301\u4e45\u7684\u4f5c\u54c1\u4e2d\u4efb\u4f55\u4eb2\u5bc6\u5408\u4f5c\u7684\u51b3\u5b9a\u6027\u56e0\u7d20\u3002\n\u4e0a\u4e16\u7eaa60\u5e74\u4ee3\u521d\uff0c\u5f53Sj\u00f6wall\u548cWahl\u00f6\u00f6\u6b63\u5728\u6784\u601d\u4e00\u90e8\u53cd\u6620\u6574\u4e2a\u793e\u4f1a\u7684\u5341\u5377\u672c\u8b66\u5bdf\u7a0b\u5e8f\u65f6\uff0c\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u6587\u5b66\u4e2d\u4ece\u672a\u51fa\u73b0\u8fc7\u8fd9\u6837\u7684\u4f5c\u54c1\u3002\u5230\u90a3\u65f6\uff0c\u7f8e\u56fd\u53ef\u80fd\u5df2\u7ecf\u5236\u4f5c\u4e86\u8fbe\u897f\u5c14\u00b7\u54c8\u7c73\u7279(Dashiell Hammett)\u548c\u57c3\u5fb7\u00b7\u9ea6\u514b\u8d1d\u6069(Ed McBain)\uff0c\u66f4\u4e0d\u7528\u8bf4\u65e0\u6570\u7684\u9ed1\u8272\u4fa6\u63a2\u7247\uff0c\u751a\u81f3\u4e00\u4e9b\u65e9\u671f\u7684\u57ce\u5e02\u7535\u89c6\u8282\u76ee\uff0c\u5982Dragnet\uff0c\u90fd\u5728\u5411\u8fd9\u4e00\u9886\u57df\u9760\u62e2\u3002\u4f46\u662f\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u7684\u4f20\u7edf\u662f\u4e0d\u540c\u7684\u3002\u786e\u5b9e\u6709\u4e00\u4e9b\u8c1c\u56e2\uff0c\u4f46\u5b83\u4eec\u5b8c\u5168\u7f3a\u4e4f\u5e7f\u9614\u7684\u793e\u4f1a\u89c6\u89d2\uff0c\u7f3a\u4e4f\u5bf9\u67d0\u79cd\u73b0\u5b9e\u4e3b\u4e49\u7684\u575a\u6301\uff0c\u800c\u8fd9\u6b63\u662fSj\u00f6wall\u548cWahl\u00f6\u5373\u5c06\u5f15\u5165\u7684\u3002\n\u4f8b\u5982\uff0c\u73b0\u6709\u7684\u4e00\u80a1\uff0c\u662f\u4ece\u4e54\u00b7\u5185\u65af\u5e03(Jo Nesb\u00f8)\u6240\u63cf\u8ff0\u7684\u5317\u6b27\u539f\u59cb\u60ca\u609a\u7247\uff1a1909\u5e74\u7531\u632a\u5a01\u7684\u65af\u6587\u00b7\u57c3\u5c14\u7ef4\u65af\u7279(Sven Elvestad)\u7528\u7b14\u540d\u65af\u5766\u00b7\u91cc\u5f17\u987f(Stein Riverton)\u64b0\u5199\u7684\u4e00\u90e8\u540d\u4e3a\u201c\u94c1\u6218\u8f66\u201d\u7684\u795e\u79d8\u5c0f\u8bf4\u884d\u751f\u800c\u6765\u7684\u3002\u8fd9\u662f\u4e00\u90e8\u53ef\u8bfb\u6027\u5f88\u5f3a\u7684\u4f5c\u54c1\uff0c\u867d\u7136\u6709\u70b9\u6162\uff0c\u800c\u4e14(\u7279\u522b\u662f\u4e0e\u50cf\u5185\u65af\u5821\u8fd9\u6837\u7684\u73b0\u4ee3\u5b9e\u8df5\u8005\u76f8\u6bd4)\u602a\u8bde\u800c\u6beb\u65e0\u60ac\u5ff5\u3002\u201c\u94c1\u6218\u8f66\u201d\u57fa\u672c\u4e0a\u662f\u4e00\u90e8\u4e61\u6751\u522b\u5885\u8c0b\u6740\u6848\u60ac\u6848\uff0c\u6545\u4e8b\u53d1\u751f\u5728\u76db\u590f\u65f6\u8282\u632a\u5a01\u5357\u90e8\u6d77\u5cb8\u7684\u67d0\u4e2a\u7530\u56ed\u8bd7\u822c\u7684\u98ce\u666f\u4e2d-\u8fd9\u4e2a\u5730\u70b9\u548c\u5b63\u8282\u4e00\u8d77\uff0c\u5141\u8bb8\u5348\u591c\u5728\u6d77\u6d0b\u4e0a\u95ea\u8000\u7740\u5927\u91cf\u9ec4\u660f\u822c\u7684\u5149\u7ebf\uff0c\u4ee5\u53ca\u5176\u4ed6\u7c7b\u4f3c\u7684\u6548\u679c\u3002\u6807\u9898\u4e2d\u795e\u79d8\u7684\u53ee\u5f53\u58f0\uff0c\u636e\u8bf4\u662f\u5e7d\u7075\u822c\u7684\u201c\u6218\u8f66\u201d\uff0c\u539f\u6765\u662f\u5f53\u5730\u4e00\u4f4d\u6559\u6388\u53d1\u660e\u7684\u4e00\u79cd\u65b0\u5947\u7684\u98de\u884c\u5668\uff0c\u4ed6\u662f\u8c0b\u6740\u6848\u7684\u53d7\u5bb3\u8005\u4e4b\u4e00\u3002\u6700\u540e\uff0c\u6740\u4eba\u72af\u88ab\u53d1\u73b0\u662f\u6545\u4e8b\u7684\u53d9\u8ff0\u8005\uff0c\u4e00\u4e2a\u5947\u602a\u7684\u96be\u4ee5\u6349\u6478\u7684\u751f\u7269\uff0c\u4ed6\u7684\u7f6a\u884c\u548c\u65b9\u6cd5\u88ab\u4ece\u6700\u8fd1\u7684\u57ce\u5e02\u53eb\u6765\u7684\u798f\u5c14\u6469\u65af\u5f0f\u7684\u4fa6\u63a2\u63ed\u9732\u51fa\u6765-\u5c3d\u7ba1\u5728\u6211\u4eec\u51e0\u4e4e\u5df2\u7ecf\u81ea\u5df1\u5f04\u6e05\u695a\u8fd9\u4e9b\u4e4b\u524d\u3002\u6574\u90e8\u5c0f\u8bf4\u5c31\u50cf\u662f\u57c3\u5fb7\u52a0\u00b7\u7231\u4f26\u00b7\u5761\u548c\u4e9a\u745f\u00b7\u67ef\u5357\u00b7\u9053\u5c14\u7684\u7ed3\u5408\u4f53\uff0c\u4e00\u4e2a\u65e2\u5408\u903b\u8f91\u53c8\u75af\u72c2\u7684\u53d9\u4e8b\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\u90fd\u662f\u975e\u5e38\u7279\u6b8a\u548c\u975e\u5e38\u5c01\u95ed\u7684\uff0c\u5acc\u7591\u4eba\u7684\u6570\u91cf\u6781\u5176\u6709\u9650\uff0c\u5bf9\u6574\u4e2a\u793e\u4f1a\u6ca1\u6709\u4efb\u4f55\u89c6\u89d2\u3002\n\u53e6\u4e00\u4e2a\u5148\u4f8b-\u4e5f\u8bb8\u5728\u98ce\u683c\u548c\u610f\u56fe\u4e0a\u4e0e\u9a6c\u4e01\u00b7\u8d1d\u514b\u65af(Martin Becks)\u751a\u81f3\u66f4\u8fdc\uff0c\u5c3d\u7ba1\u5728\u65f6\u95f4\u548c\u5730\u7406\u4e0a\u66f4\u63a5\u8fd1-\u5305\u62ec20\u4e16\u7eaa\u4e2d\u671f\u4e3a\u513f\u7ae5\u5199\u7684\u5404\u79cd\u745e\u5178\u795e\u79d8\u6545\u4e8b\u3002\u5176\u4e2d\u5305\u62ec\u5965\u514b\u00b7\u970d\u59c6\u4f2f\u683c1948\u5e74\u81f31973\u5e74\u51fa\u7248\u7684\u5173\u4e8e\u79c1\u5bb6\u4fa6\u63a2\u771f\u00b7\u65af\u6587\u987f\u7684\u5c0f\u8bf4\uff0c\u4ee5\u53ca\u5c3c\u5c14\u65af-\u5965\u6d1b\u592b\u00b7\u5f17\u5170\u68ee\u5173\u4e8e\u4fa6\u63a2\u963f\u52a0\u987f\u00b7\u8428\u514b\u65af\u7684\u63d2\u56fe\u4e66\u7c4d\uff0c\u5927\u7ea6\u5728\u540c\u4e00\u65f6\u95f4\u51fa\u7248\u3002\u90a3\u4e9b\u4fa6\u63a2\u4eba\u7269\u663e\u7136\u4e5f\u662f\u4ee5\u798f\u5c14\u6469\u65af\u4e3a\u539f\u578b\u7684\uff0c\u5c3d\u7ba1\u6709\u67d0\u4e9b\u7279\u5f81-\u6bd4\u5982\u5feb\u4e50\u7684\u5706\u5706\u8eab\u6750\u548c\u52a8\u7269\u4f19\u4f34\uff0c\u5728\u8428\u514b\u65af\u7684\u60c5\u51b5\u4e0b-\u8fd9\u4f1a\u4f7f\u4ed6\u4eec\u5bf9\u5b69\u5b50\u4eec\u7279\u522b\u6709\u5438\u5f15\u529b\u3002\u8fd9\u4e00\u7c7b\u578b\u4e2d\u6700\u8457\u540d\u7684\u7cfb\u5217\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u96c7\u4f63\u4e86\u4e00\u4e2a\u5b69\u5b50\u4f5c\u4e3a\u4fa6\u63a2\uff0c\u662f\u963f\u65af\u7279\u4e3d\u5fb7\u00b7\u6797\u5fb7\u683c\u4f26(Astrid Lindgren)\u7684\u4e09\u90e8\u795e\u79d8\u5c0f\u8bf4\uff0c\u4e3b\u89d2\u662f\u4e00\u4e2a\u540d\u53eb\u5361\u5c14\u00b7\u5e03\u9686\u594e\u65af\u7279(Kalle Blomqvist)\u7684\u7537\u5b66\u751f(\u5f53\u8fd9\u4e9b\u4e66\u88ab\u8bc1\u660e\u8db3\u591f\u53d7\u6b22\u8fce\uff0c\u53ef\u4ee5\u51fa\u53e3\u65f6\uff0c\u4ed6\u540e\u6765\u88ab\u91cd\u65b0\u547d\u540d\u4e3a\u6bd4\u5c14\u00b7\u4f2f\u683c\u68ee(Bill Bergson))\u3002\u8fd9\u4e09\u4e2a\u6545\u4e8b\u57281946\u5e74\u81f31953\u5e74\u95f4\u51fa\u73b0\u5728\u745e\u5178\uff0c\u6709\u70b9\u8ba9\u4eba\u60f3\u8d77\u7f8e\u56fd\u7684\u5357\u5e0c\u00b7\u5fb7\u9c81(Nancy Drew)\u7cfb\u5217\uff0c\u8bb2\u8ff0\u4e86\u4e00\u4e2a\u5e74\u8f7b\u7684\u4e1a\u4f59\u4fa6\u63a2\uff0c\u52a0\u4e0a\u5fc5\u8981\u7684\u5e74\u9f84\u76f8\u79f0\u7684\u4f19\u4f34\uff0c\u603b\u662f\u80fd\u6210\u529f\u5730\u667a\u53d6\u574f\u4eba\u3002\u5373\u4f7f\u662f\u73b0\u5728\uff0c\u8fd9\u4e9b\u4e66\u5728\u745e\u5178\u4ecd\u7136\u975e\u5e38\u51fa\u540d\uff0c\u4ee5\u81f3\u4e8e\u5f53\u5229\u65af\u8d1d\u601d\u7684\u76df\u53cb\u3001\u5341\u5b57\u519b\u8bb0\u8005\u7c73\u51ef\u5c14\u00b7\u5e03\u9686\u7ef4\u65af\u7279(Mikael Blomkvist)\u88ab\u670b\u53cb\u4eec\u6635\u79f0\u4e3a\u201cKalle\u201d\u65f6\uff0c\u65af\u8482\u683c\u00b7\u62c9\u5c14\u68ee(StiegLarsson)\u7684\u4eca\u5929\u7684\u8bfb\u8005\u9884\u8ba1\u4f1a\u660e\u767d\u8fd9\u4e2a\u7b11\u8bdd\u3002(\u5728\u745e\u5178\u60ac\u7591\u4f5c\u5bb6\u4e2d\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6c38\u4e0d\u8fc7\u65f6\u7684\u7b11\u8bdd\uff0c\u56e0\u4e3a\u83b1\u592b\u00b7G\u00b7\u7ea6\u7ff0\u00b7W\u00b7\u4f69\u5c14\u677e(Leif G.\u2009W.Persson)\u5728\u4ed6\u6700\u8fd1\u7684\u5c0f\u8bf4\u201c\u5782\u6b7b\u7684\u4fa6\u63a2\u201d\u4e2d\u518d\u6b21\u63d0\u5230\u4e86\u8fd9\u4e2a\u7b11\u8bdd\u3002)\u3002\n\u4f46\u62c9\u5c14\u68ee\u548c\u4f69\u5c14\u68ee\u7684\u4e66\u76f4\u5230\u9a6c\u4e01\u00b7\u8d1d\u514b\u65af\u9996\u6b21\u51fa\u7248\u51e0\u5341\u5e74\u540e\u624d\u5b58\u5728\u3002\u8fd9\u662f\u4e00\u5bf9\u7279\u6b8a\u7684\u4f5c\u5bb6\u5728\u7279\u5b9a\u7684\u5386\u53f2\u65f6\u523b\u5408\u4f5c\u521b\u9020\u7684\n\u8fd9\u4e9b\u4e5f\u4e0d\u662f\u90a3\u79cd\u5217\u51fa\u6240\u6709\u6f5c\u5728\u5acc\u7591\u4eba\u548c\u76f8\u5173\u7ebf\u7d22(\u5982\u679c\u53ef\u80fd\u662f\u5de7\u5999\u5730\u4f2a\u88c5\u7684\u5f62\u5f0f)\u7684\u201c\u516c\u5e73\u201d\u8c1c\u56e2\uff0c\u8db3\u591f\u65e9\u8ba9\u4f60\u81ea\u5df1\u5f97\u51fa\u89e3\u51b3\u65b9\u6848\u3002\u628a\u8fd9\u4e2a\u95ee\u9898\u7559\u7ed9\u963f\u52a0\u838e\u00b7\u514b\u91cc\u65af\u8482\u548c\u5176\u4ed6\u62fc\u56fe\u7231\u597d\u8005\u5427\u3002\u5728\u9a6c\u4e01\u00b7\u8d1d\u514b(Martin Beck)\u7684\u5c0f\u8bf4\u4e2d\uff0c\u51f6\u624b\u53ef\u80fd\u662f\u6211\u4eec\u5728\u7b2c\u4e00\u9875\u9047\u5230\u7684\u67d0\u4e2a\u4eba\uff0c\u4f46\u4ed6\u540c\u6837\u53ef\u80fd\u8981\u5230\u8fd9\u672c\u4e66\u63a5\u8fd1\u5c3e\u58f0\u65f6\u624d\u4f1a\u51fa\u73b0\u3002\u89e3\u51b3\u65b9\u6848\u53ea\u662f\u95ee\u9898\u7684\u4e00\u90e8\u5206\uff1b\u91cd\u8981\u7684\u662f\u5b9e\u73b0\u76ee\u6807\u3002\n\u6e29\u8fea\u00b7\u83b1\u585e\u662f\u201c\u4e09\u4fbf\u58eb\u8bc4\u8bba\u201d\u7684\u521b\u59cb\u4eba\u548c\u7f16\u8f91\u3002\u5979\u5199\u4e86\u4e00\u90e8\u5c0f\u8bf4\u548c11\u90e8\u4e4b\u524d\u7684\u975e\u865a\u6784\u7c7b\u4f5c\u54c1\uff1b\u6700\u8fd1\u51fa\u7248\u7684\u4e66\u7c4d\u5305\u62ec\u201c\u6c89\u9ed8\u7684\u58f0\u97f3\u7684\u97f3\u4e50\u201d\u3001\u201c\u6211\u4e3a\u4ec0\u4e48\u8981\u8bfb\u201d\u548c\u201c\u4f60\u5bf9\u7816\u8bf4\uff1a\u8def\u6613\u65af\u00b7\u5361\u6069\u7684\u4e00\u751f\u201d\uff0c\u8be5\u4e66\u83b7\u5f97\u4e86\u9a6c\u83f2\u5c14\u5fb7\u827a\u672f\u5199\u4f5c\u5956\u548c\u7f8e\u56fd\u975e\u865a\u6784\u7c7b\u7814\u7a76\u5956\u3002\u4f5c\u4e3a\u67cf\u6797\u7f8e\u56fd\u5b66\u9662\u3001\u5361\u5c14\u66fc\u5b66\u8005\u548c\u4f5c\u5bb6\u4e2d\u5fc3\u3001\u53e4\u6839\u6d77\u59c6\u57fa\u91d1\u4f1a\u3001\u745e\u5178\u5b66\u9662\u548c\u8bb8\u591a\u5176\u4ed6\u7ec4\u7ec7\u7684\u8d60\u6b3e\u548c\u5956\u5b66\u91d1\u83b7\u5f97\u8005\uff0c\u5979\u76ee\u524d\u5728\u52a0\u5dde\u4f2f\u514b\u5229\u548c\u7ebd\u7ea6\u5e02\u4e4b\u95f4\u5954\u6ce2\u3002\n\u8282\u9009\u81ea\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u9ed1\u8272\u5c0f\u8bf4\u201c\u8ffd\u5bfb\u5965\u79d8\u201d\uff0c\u4f5c\u8005\uff1a\u6e29\u8fea\u00b7\u83b1\u585e\u3002\u7531Farrar\uff0cStraus\u548cGiroux\u51fa\u7248\u3002\u7248\u6743\u6240\u6709\u00a92020\uff0c\u7248\u6743\u6240\u6709\uff1aWendy Lesser\u3002\u7248\u6743\u6240\u6709\u3002", "note_en": "Sometime in the early eighties, I began reading a series of mysteries that featured a Swedish homicide detective named Martin Beck. I was living in Berkeley at the time, studying for a Ph.D. in English literature as I worked a variety of part-time jobs, and I knew a lot of people both inside and outside the academy. Being a talkative sort, I started telling everyone around me about this incredible Scandinavian cop series. Soon we were all reading it.\n What I knew at the time was that it was written by a couple, Maj Sj\u00f6wall and Per Wahl\u00f6\u00f6, who had from the very beginning envisioned it as a sequence of ten books that would portray Swedish society from a distinctly Marxist perspective. Published between 1965 and 1975, the Martin Beck series grew noticeably darker as it moved toward its end\u2014though whether this was because Sweden itself (not to speak of the world beyond it) had worsened during that decade, or because Per Wahl\u00f6\u00f6 had learned in the early seventies that he was dying of cancer, was something no one could answer. Wahl\u00f6\u00f6 died, I later learned, on the exact day in June of 1975 when the tenth volume was published in Sweden, having worked like a maniac to finish it on time. (Sj\u00f6wall, who was his equal partner in many ways\u2014they would write their alternating chapters at night, so as not to be interrupted by their small children, and would then exchange chapters for editing\u2014has said that at the very end Wahl\u00f6\u00f6 was pretty much writing everything himself.) At any rate, he left behind exactly what he had intended to produce: ten books containing thirty chapters each, which, taken together, constitute a single continuous social narrative comparable in some ways to a Balzac, Zola, or Dickens project, though clothed in the garments of a police procedural.\n It would be a melodramatic exaggeration to say that the Martin Beck series changed my life, but like all such exaggerations, this one would be built on a nugget of truth. Both my idea of Scandinavia and my sense of what a mystery could do were shaped by those books. If I later became a veritable addict of the form, gobbling up hundreds if not thousands of dollars a year in Kindle purchases of Swedish, Danish, and Norwegian mysteries, that habit could no doubt be attributed to many things besides the Martin Becks: the invention of digital books, for instance, which allowed for impulse buying and virtually infinite storage; the massive and surprising success of Stieg Larsson\u2019s Millennium series, which encouraged American publishers to bring out any and every available Scandinavian thriller; the introduction of the long-cycle police procedural on American television, including such gems as  Hill Street Blues,  NYPD Blue, and ultimately  The Wire, all of which cemented my fascination with the form; not to mention dozens if not hundreds of similar behavior-shaping factors that remain, for me, at an unconscious level. We never know for sure why we read what we read. I cannot, at the moment, even call to mind who first recommended the Martin Becks to me (though I know it was a person and not, say, a bookstore display or a newspaper review). Whoever it was, in any case, deserves my eternal gratitude.\n What is so special about these ten books? Or\u2014a slightly different question\u2014what was it that so appealed to me back in 1981 or 1982, when I was about to turn thirty and America was on the verge of becoming what it is today?\n Ronald Reagan, remember, had just been elected president. Many of us who voted against him (particularly among the Californians who had suffered through his governorship) had sworn that we would leave the country if he won. We didn\u2019t actually carry out these threats\u2014one never does, as I have learned repeatedly in the years since\u2014but in my imagination I must have pictured Sweden, that haven for dissident Americans since the time of the Vietnam War, as one of the ideal refuges to which one could flee in such circumstances. That the society in which the Martin Beck novels took place represented a form of humane, non-Soviet socialism was certainly a great part of their appeal for me. What I failed to notice at the time was how severely Sj\u00f6wall and Wahl\u00f6\u00f6 were in fact criticizing the inadequate socialism practiced in their country. Instead, what I saw was the difference between gun-crazy, corporate-run, murder-riddled America and this small, sensible nation where even police officers hated guns, where crime was seen as a social problem rather than an individual pathology, and where the rare appearance of a serial or mass killer instantly provoked comparisons to the well-chronicled history of such crimes in the United States.\n And then there was the specific affection I felt for Martin Beck\u2019s team of homicide detectives. The idea of a team was itself appealing, especially in contrast to the usual American detective, a hardboiled rogue who typically despised collective procedures and chose to work alone and unregulated. But beyond that, I loved the individual characters in the team, who over the course of ten volumes began to seem as familiar to me as most of my real-life acquaintances.\n To begin with, there is Martin Beck himself, who exhibits rectitude, fairness, a decent sense of empathy even for murderers, a useful skepticism about the criminal justice system, a healthy dislike of stupidity, careerism, and greed, and a willingness to let those around him do their best work. His home life, perhaps, leaves something to be desired\u2014alienated from his nagging wife and distant from his two small children, he spends as many hours as possible on the job\u2014but this changes over the course of the ten volumes, as he and his wife divorce and as he bonds with his growing daughter. And though Martin Beck is something of a loner, with few strong emotional ties, he does have a best friend, in the form of Lennart Kollberg, his second-in-command on the national homicide squad.\n Kollberg is one of the great characters of detective fiction. (He is almost always called simply \u201cKollberg\u201d by the omniscient narrator of these books, just as Martin Beck is always called by his full name; it is only the other characters who address them as \u201cMartin\u201d or \u201cLennart.\u201d) His fame, in the years since he came into being, has so transcended his original circumstances that a recent Norwegian mystery writer, Karin Fossum, can name her chief detective\u2019s dog Kollberg and expect everyone to pick up the allusion.\n It\u2019s not easy to convey what is so lovable about Kollberg. His charm and wit, though notable, don\u2019t lend themselves to brief quotation; they are cumulative, like everything else in the series. Nor is he particularly magnetic, at least in terms of looks. For one thing, he\u2019s distinctly overweight, though that doesn\u2019t prevent him from being very attractive to certain women (in particular his much appreciated and significantly younger wife, Gunnar). He doesn\u2019t have any of the special talents some of his teammates possess\u2014the phenomenal memory of Fredrik Melander, say, or the immense physical bravery of Gunvald Larsson, or even the sheer dogged persistence of the unimaginative Einar R\u00f6nn\u2014but his all-round intelligence and sharp, ironic sense of humor make him an invaluable collaborator and sounding board for Martin Beck. As is often remarked in this series, the two of them can understand each other without explaining themselves, which is perhaps the essential definition of a close friendship. It is also, as Sj\u00f6wall and Wahl\u00f6\u00f6 must have known, the defining element of any intimate collaboration on an important and prolonged piece of work.\n  In the early sixties, when Sj\u00f6wall and Wahl\u00f6\u00f6 were formulating their idea for a ten-volume police procedural that would mirror the whole society, nothing of the kind had ever appeared in Scandinavian literature. America may have produced Dashiell Hammett and Ed McBain by then, not to mention numerous noir detective films and even some early urban TV shows, like  Dragnet, that edged toward this territory. But the Scandinavian tradition was different. There were mysteries, true, but they utterly lacked the broad social perspective, the insistence on some kind of realism, that Sj\u00f6wall and Wahl\u00f6\u00f6 were about to introduce.\n One of the existing strands, for example, descended from the book Jo Nesb\u00f8 has described as the original Nordic thriller: a 1909 mystery called  The Iron Chariot, written by Norway\u2019s Sven Elvestad under the pen name Stein Riverton. It\u2019s a readable enough work, though a bit slow and (especially compared to latter-day practitioners like Nesb\u00f8 himself) grotesquely unsuspenseful.  The Iron Chariot is basically a country-house murder mystery, set in an idyllic landscape somewhere on the southern Norwegian coast at the height of summer\u2014a location and a season that together allow for a great deal of crepuscular light shimmering on the ocean at midnight and other effects of that sort. The mysteriously clanking and reputedly ghostly \u201cchariot\u201d of the title turns out to be a newfangled flying machine invented by a local professor, one of the murder victims. In the end, the murderer is revealed to be the story\u2019s narrator, a weirdly impalpable creature whose crimes and methods are exposed by the Holmes-like detective called in from the nearest city\u2014though not before we have pretty much figured them out by ourselves. The whole novel is like a combination of Edgar Allan Poe and Arthur Conan Doyle, a narrative that is at once logical and insane, but in any case very particular and very enclosed, with an extremely limited pool of suspects and no perspective whatsoever on the society at large.\n Another precedent\u2014perhaps even further from the Martin Becks in style and intent, though closer temporally and geographically\u2014consisted of the various Swedish mysteries written for children in the mid-twentieth century. These included \u00c5ke Holmberg\u2019s novels about the private eye Ture Sventon, issued between 1948 and 1973, and Nils-Olof Franz\u00e9n\u2019s illustrated books about the detective Agaton Sax, which came out around the same time. Those detective characters, too, were clearly modeled on Holmes, though with certain features\u2014such as a jolly round figure and an animal associate, in the case of Sax\u2014that would make them especially appealing to children. The most famous series in this genre, perhaps because it actually employed a child as the detective, was Astrid Lindgren\u2019s trio of mysteries featuring a schoolboy named Kalle Blomqvist (a central character who, when the books proved popular enough to export, was later renamed Bill Bergson). These three tales, which appeared in Sweden between 1946 and 1953, are somewhat reminiscent of America\u2019s Nancy Drew series, with a youthful amateur detective who, together with the necessary age-appropriate sidekicks, always succeeds in outwitting the bad guys. Even now, the books remain sufficiently well known in Sweden so that present-day readers of the Stieg Larsson books are expected to get the joke when Lisbeth\u2019s ally, the crusading journalist Mikael Blomkvist, is nicknamed \u201cKalle\u201d by his friends. (This would seem to be a joke that never stales among Swedish mystery writers, for Leif G.\u2009W. Persson brings it up again in his recent novel  The Dying Detective.)\n But the Larsson and Persson books did not exist until decades after the Martin Becks were first published. It took a particular pair of authors working together at a specific moment in history to create that now-dominant form, the modern-day Scandinavian mystery. And despite the fact that they were naive beginners, or perhaps in some ways because of that, their achievement in the form has never been topped.\n  Let\u2019s agree to dispense with any discussion about brow levels. If I happen to invoke Dickens, Balzac, or Dostoyevsky when talking about these books, it is not to insist that Per Wahl\u00f6\u00f6 and Maj Sj\u00f6wall are their equals as the writers of sentences and paragraphs\u2014though nor would I want to grant outright that they are  not at the same level in some other way. After all, Wilkie Collins was a thriller writer of the late nineteenth century whose best novels we are still reading with enormous satisfaction today; with each passing decade, he comes to seem more and more of a Victorian classic. One could also argue that Eric Ambler is as much a twentieth-century stylist as Ernest Hemingway, along the same spare lines, and it is not yet clear, if you ask me, which we\u2019ll be reading longer. My point is not just that we can\u2019t, from our limited perspective, answer questions about longevity and importance. It\u2019s also that I don\u2019t particularly want to.\n What matters to me is how persuasively these mystery writers manage to create a world that one can imaginatively inhabit\u2014for the duration of a first reading, initially, but also long after. The various features of Martin Beck\u2019s world, including his Stockholm streets, his police department colleagues, his lovers, his friends, the crimes he solves, the murderers he pities, the politicians and bureaucrats he deplores, even the apartments he inhabits, all seemed terribly real to me when I first encountered them, and all continue to seem so today, even after one or more rereadings. This is the mystery novel not as a puzzle that can be forgotten as soon as it is solved but as an experience one is living through along with the characters. If they are sometimes \u201cflat\u201d characters in the manner of Dickens\u2019s grotesques or Shakespeare\u2019s clowns, that is not an absence of realism, but rather a realistic acknowledgment that in our own lives most other people remain opaque to us, often memorable mainly through their caricature-able qualities. We do not have the capacity, as George Eliot famously noted, to be fully empathetic at all times. Much of our observant life, and even much of our own experience, is conducted in a kind of shorthand.\n Yet part of what makes the Sj\u00f6wall/Wahl\u00f6\u00f6 books great, in comparison to most other mystery series, is precisely the opposite of this shorthand. They are oddly inclusive, with an eye for extraneous detail and a concern with the kinds of trivialities (subways ridden, meals eaten, suspicions vaguely aroused, meandering conversations, useless trains of thought, sudden bursts of intuition, random acts or events that cause everything to change suddenly) that make up not only every life, but every prolonged police investigation. This means that the timing of the books is, for some readers, excessively slow: we often have to wait for the necessary facts to surface, so we tend to find ourselves floating along rather than racing toward an increasingly visible conclusion. I always tell people that they have to wade through at least the first two volumes,  Roseanna and  The Man  Who Went Up in Smoke, before things really get going in the Martin Beck series. Only when they reach  The Man on the Balcony or, even better,  The Laughing Policeman will they be able to judge how much they like the series. Patience is required of the reader, just as it is of the detective.\n Nor are these the sort of \u201cfair\u201d mystery that lays out all the potential suspects and relevant clues (if perhaps in cleverly disguised form) early enough for you to arrive at the solution yourself. Leave that to Agatha Christie and the other puzzle-mongers. In the Martin Beck novels, the murderer might be someone we meet on the first page, but he equally well might not appear until nearly the end of the volume. The solution is only part of the point; it is getting there that matters.\n  Wendy Lesser is the founder and editor of The Threepenny Review . She has written one novel and eleven previous works of nonfiction; recent books include Music for Silenced Voices , Why I Read , and You Say to Brick: The Life of Louis Kahn , which won the Marfield Prize for Arts Writing and the   America Award for Research Nonfiction. A recipient of grants and fellowships from the American Academy in Berlin, the Cullman Center for Scholars and Writers, the Guggenheim Foundation, the Swedish Academy, and numerous other organizations, she currently divides her time between Berkeley, California, and New York City.\n Excerpted from  Scandinavian Noir: In Pursuit of a Mystery , by Wendy Lesser. Published by Farrar, Straus and Giroux. Copyright \u00a9 2020 by Wendy Lesser. All rights reserved.", "posttime": "2020-05-07 19:58:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed1\u8272,scandinavian,\u7f8e\u56fd", "title": "\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u9ed1\u8272\u7684\u8d77\u6e90", "title_en": "The Origins of Scandinavian Noir", "transed": 1, "url": "https://www.theparisreview.org/blog/2020/05/06/the-origins-of-scandinavian-noir/", "via": "", "real_tags": ["\u9ed1\u8272", "\u7f8e\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001060, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6ce8\u610f\u5230\u6211\u7684\u51e0\u4e2a\u9879\u76ee\u4e2d\u6709\u4e00\u4e2a\u5c0f\u6a21\u5f0f\uff0c\u5176\u4e2d\u6211\u5bf9\u4e00\u4e9b\u4ee3\u7801\u8fdb\u884c\u4e86\u77e2\u91cf\u5316\u548c\u5e76\u884c\u5316\u3002\u6700\u521d\u7684\u7b97\u6cd5\u91c7\u7528\u201c\u63a8\u201d\u7684\u65b9\u5f0f\uff0c\u800c\u4f18\u5316\u540e\u7684\u7b97\u6cd5\u91c7\u7528\u201c\u62c9\u201d\u7684\u65b9\u5f0f\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u63cf\u8ff0\u6211\u7684\u610f\u601d\uff0c\u867d\u7136\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u5c55\u793a\u4e00\u4e9b\u6f02\u4eae\u7684\u89c6\u9891\u3001\u56fe\u7247\u548c\u6f14\u793a\u3002\n\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u662f\u963f\u8d1d\u5c14\u6c99\u5806\u6a21\u578b\uff0c\u5c31\u50cf\u6211\u4e4b\u524d\u7684\u8bb8\u591a\u6a21\u578b\u4e00\u6837\uff0c\u5b83\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u5b8c\u5168\u5438\u5f15\u4e86\u6211\u7684\u6ce8\u610f\u3002\u5b83\u662f\u4e00\u4e2a\u7ec6\u80de\u81ea\u52a8\u673a\uff0c\u6bcf\u4e2a\u7ec6\u80de\u90fd\u662f\u4e00\u5806\u6c99\u7c92-\u4e00\u4e2a\u6c99\u5806\u3002\u5728\u6bcf\u4e00\u6b65\uff0c\u4efb\u4f55\u8d85\u8fc7\u56db\u4e2a\u9897\u7c92\u7684\u6c99\u5806\u90fd\u4f1a\u5c06\u4e00\u4e2a\u9897\u7c92\u6cc4\u6f0f\u5230\u5b83\u7684\u56db\u4e2a4\u4e2a\u76f8\u8fde\u7684\u90bb\u5c45\u4e2d\uff0c\u800c\u4e0d\u8003\u8651\u8fd9\u4e9b\u76f8\u90bb\u5355\u5143\u683c\u4e2d\u7684\u9897\u7c92\u6570\u91cf\u3002\u8fb9\u7f18\u7684\u7ec6\u80de\u5c06\u5b83\u4eec\u7684\u9897\u7c92\u6ea2\u51fa\u5230\u88ab\u9057\u5fd8\u7684\u5730\u65b9\uff0c\u8fd9\u4e9b\u9897\u7c92\u5c31\u4e0d\u590d\u5b58\u5728\u4e86\u3002\n\u968f\u7740\u591a\u4f59\u7684\u6c99\u5b50\u843d\u5230\u8fb9\u7f18\uff0c\u6a21\u578b\u6700\u7ec8\u8fbe\u5230\u4e0d\u7a33\u5b9a\u72b6\u6001\uff0c\u6240\u6709\u7684\u6869\u90fd\u6709\u4e09\u4e2a\u6216\u66f4\u5c11\u7684\u9897\u7c92\u3002\u7136\u800c\uff0c\u76f4\u5230\u706f\u5149\u8fbe\u5230\u7a33\u5b9a\uff0c\u5404\u79cd\u6709\u8da3\u7684\u56fe\u6848\u90fd\u5728\u5143\u80de\u81ea\u52a8\u673a\u4e2d\u8361\u6f3e\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7684\u56fe\u6848\u672c\u8eab\u662f\u7f8e\u4e3d\u548c\u6709\u8da3\u7684\u3002\nNumberphile\u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u89c6\u9891\uff0c\u63cf\u8ff0\u4e86\u5982\u4f55\u5728\u91cd\u590d\u914d\u7f6e\u4e0a\u5f62\u6210\u4e00\u4e2a\u7ec4(\u4e5f\u662f)\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7f51\u683c\u5927\u5c0f\uff0c\u90fd\u6709\u4e00\u4e2a\u7a33\u5b9a\u7684\u8eab\u4efd\u914d\u7f6e\uff0c\u5f53\u201c\u6dfb\u52a0\u201d\u5230\u7ec4\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u5143\u7d20\u65f6\uff0c\u5b83\u5c06\u7a33\u5b9a\u56de\u5230\u8be5\u5143\u7d20\u3002\u8eab\u4efd\u7ed3\u6784\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u5206\u5f62\uff0c\u5176\u672c\u8eab\u4e00\u76f4\u662f\u7814\u7a76\u7684\u70ed\u70b9\u3002\n\u8ba1\u7b97\u8eab\u4efd\u914d\u7f6e\u5b9e\u9645\u4e0a\u5c31\u662f\u4ece\u67d0\u4e9b\u5f00\u59cb\u914d\u7f6e\u5f00\u59cb\u8fd0\u884c\u6a21\u62df\u76f4\u5230\u5b8c\u6210\u51e0\u6b21\u3002\u4ee5\u4e0b\u662f\u8ba1\u7b9764x64\u8eab\u4efd\u914d\u7f6e\u8fc7\u7a0b\u7684\u52a8\u753b\uff1a\n\u4f5c\u4e3a\u5206\u5f62\uff0c\u7f51\u683c\u8d8a\u5927\uff0c\u89c2\u5bdf\u5230\u7684\u81ea\u76f8\u4f3c\u56fe\u6848\u5c31\u8d8a\u591a\u3002\u7f51\u4e0a\u6709\u5f88\u591a\u6837\u672c\uff0c\u6211\u80fd\u627e\u5230\u7684\u6700\u5927\u7684\u5c31\u662f\u7ef4\u57fa\u767e\u79d1\u4e0a\u76843000x3000\u3002\u4f46\u662f\u6211\u60f3\u770b\u4e00\u4e2a\u66f4\u5927\u7684\uff0c\u8be5\u6b7b\u7684\uff01\u56e0\u6b64\uff0c\u8df3\u5230\u6700\u540e\uff0c\u6211\u6700\u7ec8\u8ba1\u7b97\u4e86\u8fd9\u4e2a10000x10000\u8eab\u4efd\u914d\u7f6e\uff1a\n\u6211\u4f7f\u7528OpenMP\u8de8\u5185\u6838\u5e76\u884c\u5316\uff0c\u4f7f\u7528SIMD\u5728\u7ebf\u7a0b\u5185\u5e76\u884c\u5316\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u4e00\u6b21\u64cd\u4f5c32\u4e2a\u6c99\u5806\uff0c\u4e3a\u4e86\u8ba1\u7b97\u8eab\u4efd\u6c99\u5806\uff0c\u6bcf\u4e2a\u6c99\u5806\u53ea\u9700\u89813\u4f4d\u72b6\u6001\uff0c\u56e0\u6b64\u5728\u76f8\u540c\u7684\u786c\u4ef6\u4e0a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u589e\u52a0\u5230\u4e00\u6b2185\u4e2a\u6c99\u5806\u3002\u8f93\u51fa\u683c\u5f0f\u662f\u6211\u4ee5\u524d\u7684\u652f\u67f1Netpbm\uff0c\u5305\u62ec\u89c6\u9891\u8f93\u51fa\u3002\n\u90a3\u4e48\uff0c\u6211\u8bf4\u7684\u63a8\u62c9\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u6a21\u62df\u6c99\u5806\u7684\u5929\u771f\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a\n\u5bf9\u4e8e\u6c99\u5806\u4e2d\u7684\u6bcf\u4e2ai\uff0c{if input[i]&lt\uff1b4{output[i]=input[i]}Else{output[i]=input[i]-4\u5bf9\u4e8e\u90bb\u5c45\u4e2d\u7684\u6bcf\u4e2aj{output[j]=output[j]+1}\u3002\n\u5f53\u7b97\u6cd5\u68c0\u67e5\u6bcf\u4e2a\u5355\u5143\u683c\u65f6\uff0c\u5b83\u4f1a\u5c06\u7ed3\u679c\u63a8\u5165\u516b\u4e2a\u5355\u5143\u683c\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5e76\u53d1\uff0c\u8fd9\u610f\u5473\u7740\u6267\u884c\u7684\u591a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u6539\u53d8\u540c\u4e00\u4e2a\u5355\u5143\uff0c\u8fd9\u9700\u8981\u540c\u6b65\u9501\u3001\u539f\u5b50\u7b49\u3002\u5927\u91cf\u7684\u540c\u6b65\u662f\u6027\u80fd\u7684\u4e27\u949f\u3002\u7ebf\u7a0b\u5c06\u82b1\u8d39\u6240\u6709\u65f6\u95f4\u4e89\u593a\u76f8\u540c\u7684\u8d44\u6e90\uff0c\u5373\u4f7f\u8fd9\u53ea\u662f\u865a\u5047\u7684\u5171\u4eab\u3002\n\u5bf9\u4e8e\u6c99\u5806\u4e2d\u7684\u6bcf\u4e2ai\uff0c{if input[i]&lt\uff1b4{output[i]=input[i]}\u5bf9\u4e8e\u90bb\u5c45\u4e2d\u7684\u6bcf\u4e2aj\uff0c\u5176\u4ed6{output[i]=input[i]-4}{if input[j]&gt\uff1b=4{output[i]=output[i]+1}\u3002\n\u6bcf\u4e2a\u7ebf\u7a0b\u53ea\u4fee\u6539\u4e00\u4e2a\u5355\u5143-\u5b83\u8d1f\u8d23\u66f4\u65b0\u7684\u5355\u5143-\u6240\u4ee5\u4e0d\u9700\u8981\u540c\u6b65\u3002\u5b83\u662f\u7740\u8272\u5668\u53cb\u597d\u7684\uff0c\u5982\u679c\u4f60\u770b\u8fc7\u6211\u5bf9\u5eb7\u5a01\u7684\u751f\u6d3b\u6e38\u620f\u7684WebGL\u5b9e\u73b0\uff0c\u5e94\u8be5\u542c\u8d77\u6765\u5f88\u719f\u6089\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u7b97\u6cd5\u3002\u5982\u679c\u4f60\u5728\u7f51\u4e0a\u641c\u7d22\u5404\u79cd\u963f\u8d1d\u5c14\u6c99\u5806\u7684\u53c2\u8003\u8d44\u6599\uff0c\u4f60\u6700\u7ec8\u4f1a\u770b\u5230Cameron Fish\u57282017\u5e74\u53d1\u8868\u7684\u4e00\u7bc7\u5173\u4e8e\u5728GPU\u4e0a\u8fd0\u884c\u6c99\u5806\u6a21\u62df\u7684\u8bba\u6587\u3002\u4ed6\u5f15\u7528\u4e86\u6211\u7684WebGL\u751f\u6d3b\u6e38\u620f\u7684\u6587\u7ae0\uff0c\u628a\u4e00\u5207\u90fd\u753b\u4e0a\u4e86\u5706\u5708\u3002\u6211\u4eec\u5f53\u65f6\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u4e86\u4ea4\u8c08\uff0c\u4ed6\u4e0e\u6211\u5206\u4eab\u4e86\u4ed6\u7684\u4e92\u52a8\u6a21\u62df\u3002\n\u5411\u91cf\u5316\u8be5\u7b97\u6cd5\u5f88\u7b80\u5355\uff1a\u4e00\u6b21\u52a0\u8f7d\u591a\u4e2a\u6869\uff0c\u6bcf\u4e2aSIMD\u901a\u9053\u4e00\u4e2a\u6869\uff0c\u5e76\u4f7f\u7528\u63a9\u7801\u5b9e\u73b0\u5206\u652f\u3002\u5728\u6211\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u8fd8\u5c55\u5f00\u4e86\u5faa\u73af\u3002\u4e3a\u4e86\u907f\u514dSIMD\u4ee3\u7801\u4e2d\u7684\u8fb9\u754c\u68c0\u67e5\uff0c\u6211\u7528\u96f6\u586b\u5145\u72b6\u6001\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbfedgecells\u5177\u6709\u9759\u6001\u90bb\u5c45\uff0c\u4e0d\u518d\u662f\u7279\u6b8a\u7684\u3002\n\u56de\u5230\u8fc7\u53bb\uff0c\u5176\u4e2d\u4e00\u4e2a\u5f88\u9177\u7684\u56fe\u5f62\u6280\u5de7\u662f\u706b\u7130\u52a8\u753b\u3002\u5b83\u5f88\u5bb9\u6613\u5728\u6709\u9650\u7684\u786c\u4ef6\u4e0a\u5b9e\u73b0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8ba1\u7b97\u5b83\u7684\u6700\u660e\u663e\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\uff0c\u4f8b\u5982\u5728VGA\u7f13\u51b2\u533a\u4e2d\uff0c\u6ca1\u6709\u5916\u90e8\u72b6\u6001\u3002\n\u5c4f\u5e55\u5e95\u90e8\u6709\u4e00\u4e2a\u70ed\u6e90\uff0c\u7b97\u6cd5\u81ea\u4e0b\u800c\u4e0a\u8fd0\u884c\uff0c\u968f\u673a\u5411\u4e0a\u4f20\u64ad\u70ed\u91cf\uff1a\n\u51fd\u6570rand(min\uff0cmax)//\u5bf9\u4e8e\u4ece\u5e95\u90e8\u5f00\u59cb\u7684\u6bcf\u4e2ax\uff0cy\uff0c\u4ee5[min\uff0cmax]\u4e3a\u5355\u4f4d\u7684\u968f\u673a\u6574\u6570{buf[y-1][x+rand(-1\uff0c1)]=buf[y][x]-rand(0\uff0c1)}\n\u4f5c\u4e3a\u63a8\u9001\u7b97\u6cd5\uff0c\u5b83\u5728\u5355\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u4e0d\u80fd\u5f88\u597d\u5730\u8f6c\u6362\u5230\u73b0\u4ee3\u89c6\u9891\u786c\u4ef6\u4e0a\u3002\u56e0\u6b64\uff0c\u5c06\u5176\u8f6c\u6362\u4e3aPull\u7b97\u6cd5\uff01\n\u5bf9\u4e8e\u6bcf\u4e2ax\uff0cy{sx=x+rand(-1\uff0c1)sy=y+rand(1\uff0c2)output[y][x]=input[sy][sx]-rand(0\uff0c1)}\u3002\n\u7ec6\u80de\u5c06\u706b\u4ece\u5e95\u90e8\u5411\u4e0a\u62c9\u8d77\u3002\u5c3d\u7ba1\u8fd9\u4e00\u6b21\u6709\u4e86acatch\uff1a\u8fd9\u4e2a\u7b97\u6cd5\u5c06\u4f1a\u6709\u5fae\u5999\u7684\u4e0d\u540c\u7ed3\u679c\u3002\n\u5728\u539f\u59cb\u7248\u672c\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u72b6\u6001\u7f13\u51b2\u5668\uff0c\u56e0\u6b64\u706b\u7130\u53ef\u4ee5\u5728\u4e00\u6b21\u4f20\u9012\u4e2d\u5411\u4e0a\u4f20\u64ad\u591a\u6b21\u3002\u6211\u5728\u8fd9\u91cc\u7684\u8865\u507f\u662f\u8ba9\u706b\u7130\u7acb\u523b\u4f20\u64ad\u5f97\u66f4\u8fdc\u3002\n\u5728\u539f\u59cb\u7248\u672c\u4e2d\uff0c\u706b\u7130\u53ea\u4f20\u64ad\u5230\u53e6\u4e00\u4e2a\u7ec6\u80de\u3002\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\uff0c\u4e24\u4e2a\u7ec6\u80de\u53ef\u80fd\u4ece\u540c\u4e00\u706b\u7130\u4e2d\u53d6\u51fa\uff0c\u514b\u9686\u5b83\u3002\n\u6700\u540e\u5f88\u96be\u533a\u5206\uff0c\u6240\u4ee5\u8fd9\u5c31\u89e3\u51b3\u4e86\u95ee\u9898\u3002\nrand()\u51fd\u6570\u4e2d\u4ecd\u7136\u5b58\u5728\u6f5c\u5728\u7684\u4e89\u7528\uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u63a5\u53d7x\u548cy\u4f5c\u4e3a\u8f93\u5165\u7684\u6563\u5217\u51fd\u6570\u6765\u89e3\u51b3\u3002\n\u5bf9\u8fd9\u7bc7\u6587\u7ae0\u6709\u4ec0\u4e48\u8bc4\u8bba\u5417\uff1f\u901a\u8fc7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3~Skeeto/public-inbox@lists.sr.ht[\u90ae\u4ef6\u5217\u8868\u793c\u4eea]\u5f00\u59cb\u6211\u7684\u516c\u5171\u6536\u4ef6\u7bb1\u4e2d\u7684\u8ba8\u8bba\uff0c\u6216\u67e5\u770b\u73b0\u6709\u8ba8\u8bba\u3002", "note_en": "I\u2019ve noticed a small pattern across a few of my projects where I hadvectorized and parallelized some code. The original algorithm had a\u201cpush\u201d approach, the optimized version instead took a \u201cpull\u201d approach.In this article I\u2019ll describe what I mean, though it\u2019s mostly just so Ican show off some pretty videos, pictures, and demos.\n  A good place to start is the  Abelian sandpile model, which, likemany before me, completely  captured my attention for awhile.It\u2019s a cellular automaton where each cell is a pile of grains of sand \u2014a sandpile. At each step, any sandpile with more than four grains ofsand spill one grain into its four 4-connected neighbors, regardless ofthe number of grains in those neighboring cell. Cells at the edge spilltheir grains into oblivion, and those grains no longer exist.\n With excess sand falling over the edge, the model eventually hits astable state where all piles have three or fewer grains. However, untilit reaches stability, all sorts of interesting patterns ripple thoughthe cellular automaton. In certain cases, the final pattern itself isbeautiful and interesting.\n Numberphile has a great video describing how to  form a group overrecurrent configurations ( also). In short, for any given gridsize, there\u2019s a stable  identity configuration that, when \u201cadded\u201d toany other element in the group will stabilize back to that element. Theidentity configuration is a fractal itself, and has been a focus ofstudy on its own.\n Computing the identity configuration is really just about running thesimulation to completion a couple times from certain startingconfigurations. Here\u2019s an animation of the process for computing the64x64 identity configuration:\n  As a fractal, the larger the grid, the more self-similar patterns thereare to observe. There are lots of samples online, and the biggest Icould find was  this 3000x3000 on Wikimedia Commons. But I wantedto see one  that\u2019s even bigger, damnit! So, skipping to the end, Ieventually computed this 10000x10000 identity configuration:\n       I used  OpenMP to parallelize across cores, and SIMD to parallelizewithin a thread. Each thread operates on 32 sandpiles at a time.To compute the identity sandpile, each sandpile only needs 3 bits ofstate, so this could potentially be increased to 85 sandpiles at a timeon the same hardware. The output format is my old mainstay, Netpbm, including the video output.\n  So, what do I mean about pushing and pulling? The naive approach tosimulating sandpiles looks like this:\n for each i in sandpiles { if input[i] &lt; 4 { output[i] = input[i] } else { output[i] = input[i] - 4 for each j in neighbors { output[j] = output[j] + 1 } }}\n As the algorithm examines each cell, it  pushes results intoneighboring cells. If we\u2019re using concurrency, that means multiplethreads of execution may be mutating the same cell, which requiressynchronization \u2014 locks,  atomics, etc. That muchsynchronization is the death knell of performance. The threads willspend all their time contending for the same resources, even if it\u2019sjust false sharing.\n  for each i in sandpiles { if input[i] &lt; 4 { output[i] = input[i] } else { output[i] = input[i] - 4 } for each j in neighbors { if input[j] &gt;= 4 { output[i] = output[i] + 1 } }}\n Each thread only modifies one cell \u2014 the cell it\u2019s in charge of updating\u2014 so no synchronization is necessary. It\u2019s shader-friendly and shouldsound familiar if you\u2019ve seen  my WebGL implementation of Conway\u2019s Gameof Life. It\u2019s essentially the same algorithm. If you chase downthe various Abelian sandpile references online, you\u2019ll eventually comeacross a 2017 paper by Cameron Fish about  running sandpile simulationson GPUs. He cites my WebGL Game of Life article, bringingeverything full circle. We had spoken by email at the time, and he shared his  interactive simulation with me.\n Vectorizing this algorithm is straightforward: Load multiple piles atonce, one per SIMD channel, and use masks to implement the branches. Inmy code I\u2019ve also unrolled the loop. To avoid bounds checking in theSIMD code, I pad the state data structure with zeros so that the edgecells have static neighbors and are no longer special.\n  Back in the old days, one of the  cool graphics tricks was fireanimations. It was so easy to implement on limited hardware. Infact, the most obvious way to compute it was directly in theframebuffer, such as in  the VGA buffer, with no outside state.\n There\u2019s a heat source at the bottom of the screen, and the algorithmruns from bottom up, propagating that heat upwards randomly:\n func rand(min, max) // random integer in [min, max]for each x, y from bottom { buf[y-1][x+rand(-1, 1)] = buf[y][x] - rand(0, 1)}\n As a  push algorithm it works fine with a single-thread, butit doesn\u2019t translate well to modern video hardware. So convert it to a pull algorithm!\n for each x, y { sx = x + rand(-1, 1) sy = y + rand(1, 2) output[y][x] = input[sy][sx] - rand(0, 1)}\n Cells pull the fire upward from the bottom. Though this time there\u2019s acatch:  This algorithm will have subtly different results.\n In the original, there\u2019s a single state buffer and so a flame couldpropagate upwards multiple times in a single pass. I\u2019ve compensatedhere by allowing a flames to propagate further at once.\n  In the original, a flame only propagates to one other cell. In thisversion, two cells might pull from the same flame, cloning it.\n In the end it\u2019s hard to tell the difference, so this works out.\n   There\u2019s still potentially contention in that  rand() function, but thiscan be resolved  with a hash function that takes  x and  y asinputs.\n      Have a comment on this article? Start a discussion in my  public inbox by sending an email to   ~skeeto/public-inbox@lists.sr.ht    [ mailing list etiquette] , or see  existing discussions.", "posttime": "2020-05-07 19:58:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e73\u884c,pull,\u7b97\u6cd5", "title": "\u5e73\u884c\u65f6\uff1a\u62c9\u800c\u4e0d\u63a8", "title_en": "When Parallel: Pull, Don't Push", "transed": 1, "url": "https://nullprogram.com/blog/2020/04/30/", "via": "", "real_tags": ["\u5e73\u884c", "pull", "\u7b97\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001059, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u89c1\u8fc7\u5f88\u591a\u7f51\u7ad9\u4ee5\u4e0d\u592a\u7406\u60f3\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002\u5176\u4e2d\u4e00\u4e2a\u5c5e\u4e8e\u4e00\u4e2a\u5ba2\u6237\uff0c\u8be5\u5ba2\u6237\u62e5\u6709\u6765\u81ea\u5176\u6240\u6709\u5b89\u88c5\u7684\u6e90\u6e90\u4e0d\u65ad\u7684\u8f93\u5165\u70b9\u51fb\u6570\u636e\u3002\u4ed6\u4eec\u67096\u53f0Web\u670d\u52a1\u5668\u4f4d\u4e8e\u8d1f\u8f7d\u5747\u8861\u5668\u540e\u9762\uff0c\u6240\u6709\u670d\u52a1\u5668\u90fd\u5728\u5411\u6570\u636e\u5e93\u5199\u5165\u6570\u636e\u3002\u95ee\u9898\u662f\uff0c\u867d\u71365\u52306\u53f0\u673a\u5668\u53ef\u4ee5\u8ddf\u4e0a\u8d1f\u8f7d\uff0c\u4f464\u53f0\u6216\u66f4\u5c11\u7684\u673a\u5668\u5374\u65e0\u6cd5\u627f\u53d7\u3002\u4ed6\u4eec\u9700\u8981\u89e3\u51b3\u95ee\u9898\u3002\n\u5f53\u4e8b\u60c5\u53d8\u5f97\u7cdf\u7cd5\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u4f1a\u53d8\u5f97\u975e\u5e38\u4e11\u964b\u3002\u8ba9\u6211\u4eec\u5047\u8bbe\u4e00\u5207\u5f00\u59cb\u90fd\u5f88\u987a\u5229\u3002\u6240\u6709\u516d\u53f0\u673a\u5668\u90fd\u5728\u55e1\u55e1\u4f5c\u54cd\uff0c\u5904\u7406\u7740\u8d1f\u8f7d\u3002\u7136\u540e\u4e00\u4e9b\u4e0d\u597d\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u5176\u4e2d\u4e00\u4e2a\u9000\u51fa\u4e86\u3002\u73b0\u5728\u6709\u4e94\u53f0\u673a\u5668\u5728\u5904\u7406\u8d27\u7269\uff0c\u6bcf\u4e00\u53f0\u90fd\u63a5\u8fc7\u4e86\u4e00\u4e9b\u95f2\u7f6e\u7684\u4e1c\u897f\u3002\u4ed6\u4eec\u73b0\u5728\u6b63\u5904\u4e8e\u4e34\u754c\u70b9\u3002\u73b0\u5728\u53c8\u6709\u4e00\u4e2a\u4eba\u6b7b\u4e86\u3002\u73b0\u5728\u91cd\u65b0\u5e73\u8861\u5230\u5269\u4f59\u56db\u53f0\u673a\u5668\u7684\u8d1f\u8f7d\u5b9e\u5728\u592a\u5927\u4e86\uff0c\u7ed3\u679c\u5b83\u4eec\u90fd\u6b7b\u4e86\u3002\n\u5934\u51e0\u6b21\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u4ed6\u4eec\u6253\u6765\u7535\u8bdd\uff0c\u8981\u6c42\u91cd\u65b0\u542f\u52a8\u4ed6\u4eec\u7684\u673a\u5668\u3002\u6570\u636e\u4e2d\u5fc3\u4eba\u5458\u786e\u5b9e\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u63a8\u51fa\u4e86\u4e00\u8f86\u6025\u6551\u8f66\uff0c\u5e76\u6309\u987a\u5e8f\u91cd\u65b0\u542f\u52a8\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u5c06\u5f00\u59cb\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u6309\u987a\u5e8f\u91cd\u65b0\u542f\u52a8Apache\u3002\u4e00\u65e6\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ed6\u4eec\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u5c31\u4f1a\u5f00\u59cb\u5411\u90a3\u4e2a*\u4e00\u4e2a*Web\u670d\u52a1\u5668\u53d1\u9001\u6d41\u91cf\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u5b83\u5c31\u4f1a\u6b7b\u53bb\u3002\u7136\u540e\uff0c\u7b2c\u4e8c\u53f0\u91cd\u65b0\u542f\u52a8\u7684\u673a\u5668\u4f1a\u51fa\u73b0\u5e76\u88ab\u7830\u7684\u4e00\u58f0\u649e\u4e0a\uff0c\u7136\u540e\u5c31\u4f1a\u6b7b\u6389\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\u5b83\u7ec8\u4e8e\u5230\u4e86\u5fc5\u987b\u9075\u5faa\u6574\u4e2a\u8352\u8c2c\u8fc7\u7a0b\u7684\u5730\u6b65\u3002\u9996\u5148\uff0c\u9700\u8981\u7981\u7528\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u8fd9\u9700\u8981\u7ed9\u5b9e\u9645\u7ba1\u7406\u8fd9\u4e9b\u8bbe\u5907\u7684\u4eba\u5458\u6253\u7535\u8bdd\u3002\u63a5\u4e0b\u6765\uff0c\u5fc5\u987b\u91cd\u65b0\u542f\u52a8\u6240\u6709Web\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u5fc5\u987b\u4fee\u590d\u914d\u7f6e\u4e2d\u7684\u4efb\u4f55\u95ee\u9898\u3002\u53ea\u6709\u5728\u6240\u6709\u4eba\u90fd\u5065\u5eb7\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u91cd\u65b0\u542f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u7684VIP\u3002\u8fd9\u975e\u5e38\u8017\u65f6\u3001\u5bb9\u6613\u51fa\u9519\uff0c\u800c\u4e14\u624b\u5de5\u64cd\u4f5c\u975e\u5e38\u70e6\u4eba\u3002\n\u6211\u542c\u8bf4\u4e86\u8fd9\u4e00\u5207\uff0c\u7136\u540e\u8bf4\uff0c\u5929\u54ea\uff0c\u5927\u591a\u6570\u8fd0\u8425\u7f51\u7ad9\u7684\u4eba\u90fd\u60f3\u8981\u9ad8\u53ef\u7528\u6027\u548c\u5fc3\u8df3\u3002\u4f60\u4eec\u9700\u8981\u7684\u662f\u5f53\u5b83\u201c\u771f\u7684\u201d\u574f\u4e86\u7684\u65f6\u5019\u5c3d\u91cf\u51cf\u5c11\u505c\u673a\u65f6\u95f4\uff0c\u800c\u4f60\u4eec\u771f\u7684\u9700\u8981\u4e00\u4e2a\u81ea\u6740\u534f\u8bae\u3002\u6211\u628a\u5b83\u63cf\u8ff0\u4e3a\u8fd9\u6837\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5728\u8fd9\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u53f0\u4e3b\u673a\u90fd\u4f1a\u76d1\u63a7\u81ea\u5df1\u7684Web\u670d\u52a1\u5668\uff0c\u5e76\u4f1a\u53d1\u51fa\u4e00\u4e2a\u4fe1\u6807\uff0c\u8bf4\u5b83\u662f\u5065\u5eb7\u7684\u3002\u5176\u4ed6\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u4f1a\u76d1\u89c6\u8fd9\u4e9b\u4fe1\u6807\uff0c\u5e76\u8ddf\u8e2a\u8c01\u8fd8\u6d3b\u7740\u3002\n\u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u6574\u4e2a\u7cfb\u7edf\u4f4e\u4e8e\u67d0\u4e2a\u9608\u503c(\u79f0\u5176\u4e3a\u6700\u5c0f\u9608\u503c\uff0c\u79f0\u5176\u4e3aquorum\uff0c\u7b49\u7b49)\uff0c\u90a3\u4e48\u5269\u4f59\u7684\u6240\u6709\u4e3b\u673a\u90fd\u4f1a\u6545\u610f\u6740\u6b7bApache\u3002\u5f53\u7136\uff0c\u8fd9\u8ba9\u7f51\u7ad9\u762b\u75ea\u4e86\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u4e8b\u60c5\u4f1a\u66f4\u5feb\u5730\u6062\u590d\u8fc7\u6765\u3002\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u91cd\u65b0\u542f\u52a8\u6700\u5c11\u6570\u91cf\u7684\u673a\u5668\uff0c\u5e76\u4e14\u6574\u4e2a\u5207\u6362\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u4e8b\u60c5\u4e0d\u5fc5\u53d1\u751f(\u4e24\u6b21)\u3002\n\u6211\u4eec\u6700\u7ec8\u628a\u5b83\u4f5c\u4e3a\u6d6a\u6d8c\u4fdd\u62a4\u5668\u5356\u7ed9\u4ed6\u4eec\uff0c\u7ed9\u5b83\u7684\u4e8c\u8fdb\u5236\u547d\u540d\uff0c\u4f46\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u5b83\u7684\u610f\u601d\u3002\u987e\u5ba2\u5f88\u559c\u6b22\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5468\u91cc\uff0c\u4ed6\u4eec\u6781\u5927\u5730\u6269\u5c55\u4e86\u914d\u7f6e\uff0c\u5e76\u5f00\u59cb\u5904\u7406\u66f4\u591a\u7684\u6d41\u91cf\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u518d\u5bb3\u6015\u8fc7\u591a\u7684\u6d41\u91cf\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\n\u5f53\u7136\uff0c\u4ed6\u4eec\u53ef\u4ee5\u91cd\u5199\u4ed6\u4eec\u7684\u7f51\u7ad9\u4ee3\u7801\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u8ba9\u673a\u5668\u9677\u5165\u4e00\u573a\u6570GB\u6df1\u7684\u4ea4\u6362\u72c2\u6b22\u3002\u4ed6\u4eec\u672c\u53ef\u4ee5\u5728\u6ca1\u6709\u4efb\u4f55\u4e1c\u9053\u4e3b\u53c2\u4e0e\u7684\u60c5\u51b5\u4e0b\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4ed6\u4eec\u6ca1\u6709\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u6709\u4e86\u4e00\u4e2a\u6545\u4e8b\uff0c\u8bb2\u7684\u662f\u6211\u6709\u4e00\u6b21\u6545\u610f\u8bbe\u8ba1\u4e86\u4e00\u4e9b\u4e1c\u897f\uff0c\u7528\u4ee4\u4eba\u53d1\u75d2\u7684\u6273\u673a\u624b\u6307\u6740\u6b7b\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5e76\u5f88\u9ad8\u5174\u5730\u8ba9\u5ba2\u6237\u4e3a\u6b64\u4e70\u5355\u3002", "note_en": "I&#39;ve seen a lot of web sites implemented in less-than-ideal ways. One of them belonged to a customer which had a relentless torrent of incoming click data from all of their installations. They had six web servers sitting behind a load balancer, all writing to a database. The trouble is that while 5 or 6 machines could keep up with the load, 4 or fewer could not. They needed a fix.\n When things would go bad, they would get pretty ugly. Let&#39;s say everything starts out okay. All six machines are humming along, handling the load. Then something bad happens, and one drops out. Now there are five machines handling the load, and each one has picked up some of the slack. They&#39;re now running right at the breaking point. Now another one of them dies. The load now rebalanced to four remaining machines is just far too big, and they all die as a result.\n The first couple of times this happened, they called in and asked for their machines to be rebooted. The data center people did exactly that, rolling out a crash cart and rebooting them in sequence. So they&#39;d start rebooting, and would restart Apache in sequence. Once that happened, their load balancer would go &#34;aha!&#34;, and start sending traffic to that *one* web server. Unsurprisingly, it would then die. Then the second machine rebooted would come up and get slammed, and would die, and so on.\n It finally got to where this whole ridiculous process had to be followed. First, the load balancer needed to be disabled, necessitating a call to the folks who actually managed those devices. Next, all of the web servers had to be rebooted, and any problem in the config had to be fixed. Only then, with all of them healthy, could the load balancer&#39;s VIP be re-enabled. This was time-consuming, error-prone, and annoyingly manual.\n I heard about all of this and said, gee, most people running web sites want high availability and &#34;heartbeat&#34;. What you guys need is to minimize the downtime when it *does* break, and you really need a  suicide pact. I described it as a system where each host would monitor its own web server, and would send out a beacon saying it was healthy. Every other system would keep tabs on those beacons and keep track of who was still alive.\n If for some reason the entire system dropped below some threshold (call it a minimum, call it quorum, whatever), then every remaining host would purposely kill Apache. Sure, this took the site down, but it meant things would come back up far more quickly. This was possible since only the minimum number of machines had to be rebooted, and the whole &#34;toggle the load balancer&#34; thing didn&#39;t have to happen (twice).\n We wound up selling it to them as &#34;surge protector&#34; to give a name to its binary, &#34;sp&#34;, but everyone really knew what it meant. The customer loved it. They expanded their config enormously over the weeks that followed, and grew to handle much more traffic since they were no longer afraid of what would happen when too much came in.\n Sure, they could have rewritten their web site code so it didn&#39;t send the machines into a many-GB-deep swap fest. They could have done that without getting any hosting people involved. They didn&#39;t, and so now I have a story about the time I purposely designed something to kill a web site with an itchy trigger finger and gladly had a customer pay for it.", "posttime": "2020-05-07 19:58:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bf7\u6c42,web,\u8d1f\u8f7d", "title": "\u5ba2\u6237\u8bf7\u6c42\u7684\u81ea\u6bc1\u7f51\u7ad9(2011)", "title_en": "A self-killing web site requested by a customer (2011)", "transed": 1, "url": "https://rachelbythebay.com/w/2011/06/28/sp/", "via": "", "real_tags": ["\u8bf7\u6c42", "web", "\u8d1f\u8f7d"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001058, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Android\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684WebView\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8fde\u63a5\u5230\u8be5WebView\uff0c\u4ee5\u4fbf\u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u4e2d\u663e\u793a\u7f51\u9875\u3002\u7136\u800c\uff0cAndroid\u7684WebView\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u7528\u6765\u6784\u5efa\u6d4f\u89c8\u5668\u7684\uff0c\u56e0\u6b64\uff0c\u8bb8\u591a\u9ad8\u7ea7WebAPI\u88ab\u7981\u7528\u3002\u6b64\u5916\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u79fb\u52a8\u7684\u76ee\u6807\uff1a\u4e0d\u540c\u7684\u624b\u673a\u53ef\u80fd\u6709\u4e0d\u540c\u7684WebView\u7248\u672c\uff0c\u800c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u7248\u672c\u3002\n\u529f\u80fd\u9f50\u5168\uff1aGeckoView\u65e8\u5728\u901a\u8fc7\u7b80\u5355\u7684API\u5c06Web\u7684\u5168\u90e8\u529f\u80fd\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u662f\u5145\u5206\u5229\u7528Gecko(\u9a71\u52a8Firefox\u7684\u5f15\u64ce)\u7684\u80fd\u529b\uff0c\u800c\u5b83\u7684API\u7c7b\u4f3c\u4e8eWebView\u5e76\u4e14\u6613\u4e8e\u4f7f\u7528\u3002\n\u9002\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u6d4f\u89c8\u5668\uff1aGeckoView\u7279\u522b\u9002\u5408\u6784\u5efa\u79fb\u52a8\u6d4f\u89c8\u5668\uff0c\u4f46\u5b83\u53ef\u4ee5\u4f5c\u4e3aWeb\u5f15\u64ce\u7ec4\u4ef6\u5d4c\u5165\u5230\u4efb\u4f55\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\n\u72ec\u7acb\u7684\uff1a\u56e0\u4e3aGeckoView\u662f\u4e0e\u5e94\u7528\u7a0b\u5e8f\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u72ec\u7acb\u5e93\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u786e\u4fe1\u6d4b\u8bd5\u7684\u4ee3\u7801\u662f\u5b9e\u9645\u8fd0\u884c\u7684\u4ee3\u7801\u3002", "note_en": "Android offers a built-in WebView, which applications can hook into in order to display web pages within the context of their app. However, Android\u2019s WebView is not really intended for building browsers, and hence, many advanced Web APIs are disabled. Furthermore, it is also a moving target: different phones might have different versions of WebView, all of which your app has to support.\n  Full-featured: GeckoView is designed to expose the entire power of the Web to applications, and all that through a straightforward API. Think of it as harnessing the full power of Gecko (the engine that powers Firefox), while its API is WebView-like and easy to use.\n  Suited for apps and browsers: GeckoView is particularly suited for building mobile browsers, but it can be embedded as a web engine component in any kind of app.\n  Self-Contained: Because GeckoView is a standalone library that you bundle with your application, you can be confident that the code you test is the code that will actually run.", "posttime": "2020-05-07 19:58:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "android,geckoview,\u5e94\u7528\u7a0b\u5e8f", "title": "\u9002\u7528\u4e8eAndroid\u7684GeckoView", "title_en": "GeckoView for Android", "transed": 1, "url": "https://mozilla.github.io/geckoview/", "via": "", "real_tags": ["android", "geckoview", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001056, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6709\u4e00\u5806\u968f\u610f\u7684\u62b1\u6028\uff0c\u62b1\u6028\u8fd9\u9879\u4e91\u4e1a\u52a1\u6700\u8fd1\u8fdb\u5c55\u5230\u54ea\u91cc\u53bb\u4e86\u3002\u4f3c\u4e4e\u6709\u592a\u591a\u7684\u4eba\u8ba4\u4e3a\u5728\u522b\u4eba\u7684\u786c\u4ef6\u4e0a\u8fd0\u884c\u865a\u62df\u673a\u662f\u505a\u4efb\u4f55\u4e8b\u60c5\u7684\u552f\u4e00\u65b9\u5f0f\u3002\u8fd9\u5e76\u4e0d\u80fd\u514d\u9664\u4f60\u771f\u6b63\u64c5\u957f\u8fd9\u4ef6\u4e8b\uff0c\u800c\u4e14\u5e38\u5e38\u4f7f\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u5230\u4f60\u6c38\u8fdc\u65e0\u6cd5\u771f\u6b63\u53d1\u5149\u7684\u5730\u6b65\u3002\n\u6211\u4f1a\u76f4\u622a\u4e86\u5f53\u5730\u8bf4\uff1a\u6211\u66f4\u559c\u6b22\u7269\u7406\u786c\u4ef6\u3002\u6211\u786e\u5207\u5730\u77e5\u9053\u6211\u5728\u5904\u7406\u4ec0\u4e48\uff0c\u800c\u4e14\u5f53\u6211\u8bd5\u56fe\u8ffd\u8e2a\u95ee\u9898\u65f6\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u6015\u7684\u4e8b\u60c5\u5728\u53d1\u751f\u3002(\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u201c\u6211\u5f88\u6e05\u695a\u81ea\u5df1\u5728\u5904\u7406\u4ec0\u4e48\uff0c\u5f53\u6211\u8bd5\u56fe\u8ffd\u8e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u6015\u7684\u4e8b\u60c5\u5728\u53d1\u751f\u3002\u201d\u5982\u679c\u78c1\u76d8\u5f88\u6162\uff0c\u6211\u53ef\u4ee5\u627e\u51fa\u539f\u56e0\u3002\u5982\u679c\u7f51\u7edc\u4e0d\u6b63\u5e38\uff0c\u6211\u53ef\u4ee5\u627e\u51fa\u539f\u56e0\u3002\u6ca1\u6709\u4e00\u4e2a\u795e\u79d8\u7684\u4e3b\u673a\u7cfb\u7edf\u751f\u6d3b\u5728\u522b\u4eba\u7684\u4e16\u754c\u91cc\uff0c\u8fd9\u662f\u6211\u65e0\u6cd5\u4f01\u53ca\u7684\u3002\n\u5982\u679c\u4f60\u60f3\u8981\u5173\u4e8e\u751f\u4ea7\u73af\u5883\u7684\u751f\u6d3b\u5965\u79d8\u7684\u4ee4\u4eba\u6ee1\u610f\u7684\u7b54\u6848\uff0c\u4f60\u9700\u8981\u80fd\u591f\u5f04\u6e05\u4e8b\u60c5\u7684\u771f\u76f8\u3002\u6bcf\u6b21\u60a8\u5f15\u5165\u4e00\u4e9b\u865a\u62df\u5316\uff0c\u90fd\u4f1a\u964d\u4f4e\u627e\u5230\u7b54\u6848\u7684\u53ef\u80fd\u6027\u3002\u5f53\u5b83\u8de8\u57df\u8fdb\u5165\u53e6\u4e00\u5bb6\u516c\u53f8\u6216\u4f9b\u5e94\u5546\u6216\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u65f6\uff0c\u60c5\u51b5\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u60a8\u53ea\u80fd\u964d\u4f4e\u60a8\u7684\u6807\u51c6\uff0c\u5e76\u63a5\u53d7\u66f4\u591a\u7684\u4e0d\u786e\u5b9a\u6027\u3001\u574f\u5904\u3001\u505c\u673a\u548c\u5176\u4ed6\u5947\u602a\u7684\u884c\u4e3a\u3002\u4f60\u5fc5\u987b\u63a5\u53d7\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u6709\u4e9b\u4e8b\u60c5\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u771f\u6b63\u597d\u8f6c\u3002\u5c31\u5728\u8fd9\u91cc\uff0c\u8fd9\u4e2a\u56e0\u7d20\u4f1a\u8d76\u8d70\u4e00\u4e9b\u4eba\u3002\u4ed6\u4eec\u8981\u4e48\u52a0\u5165\uff0c\u7136\u540e\u548c\u5e73\u89e3\u51b3\uff0c\u8981\u4e48\u4ece\u4e00\u5f00\u59cb\u5c31\u6c38\u8fdc\u4e0d\u52a0\u5165\u3002\n\u6211\u5e94\u8be5\u63d0\u5230\u7684\u662f\uff0c\u5728\u4e0d\u5b58\u5728\u89e3\u51b3\u95ee\u9898\u7684\u7406\u7531\u7684\u60c5\u51b5\u4e0b\uff0c\u5f15\u5165\u8fd9\u4e9b\u89e3\u51b3\u5947\u70b9\u7684\u65b9\u6cd5\u4e5f\u4e3a\u6c5f\u6e56\u9a97\u5b50\u3001\u6b3a\u8bc8\u548c\u666e\u904d\u7684\u65e0\u80fd\u521b\u9020\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u673a\u4f1a\u3002\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u5f88\u5bb9\u6613\u3002\u6bcf\u6b21\u6709\u4e0d\u597d\u7684\u4e8b\u60c5\u53d1\u751f\uff0c\u4f60\u5c31\u628a\u5b83\u5f52\u548e\u4e8e\u67d0\u4e2a\u5df2\u77e5\u7684\u9ebb\u70e6\u5730\u70b9\u3002\u4eba\u4eec\u559c\u6b22\u4ed6\u4eec\u7684\u66ff\u7f6a\u7f8a\u3002\n\u6240\u6709\u8fd9\u4e9b\u865a\u62df\u673a\u3001\u4e91\u548c\u5f39\u6027\u6269\u5c55\u4e1a\u52a1\u8fd8\u6709\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u65b9\u9762\uff1a\u53ef\u4ee5\u521b\u9020\u7684\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u8d44\u91d1\u6c89\u6ca1\u3002\u4f3c\u4e4e\u6bcf\u4e2a\u4eba\u90fd\u5236\u5b9a\u4e86\u67d0\u79cd\u89c4\u5219\uff0c\u53ea\u5173\u6ce8CPU\u4f7f\u7528\u7387\uff0c\u7136\u540e\u5728\u5b83\u8d85\u8fc7\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u4efb\u4f55\u65f6\u5019\u90fd\u4f1a\u6709\u5e2e\u52a9\u5730\u8bbe\u7f6e\u66f4\u591a\u7684\u5b9e\u4f8b\u3002\n\u8fd9\u5bfc\u81f4\u7684\u53ef\u6015\u884c\u4e3a\u7684\u6570\u91cf\u7b80\u76f4\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u3002\u5b83\u5fc5\u987b\u8ba9\u4eba\u770b\u5230\u624d\u80fd\u8ba9\u4eba\u76f8\u4fe1\u3002\u6211\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u554a\uff0c\u662f\u7684\uff0c\u548c\u6211\u4e00\u8d77\u5728\u8bb0\u5fc6\u7684\u5c0f\u5df7\u91cc\u65c5\u884c\u5427\u3002\n\u6211\u5728\u4e00\u4e2a\u6709\u5f88\u591a\u7269\u7406\u673a\u5668\u7684\u5730\u65b9\u5de5\u4f5c\u3002\u5b83\u8fd8\u6709\u4e00\u6574\u4e2a\u56e2\u961f\uff0c\u9664\u4e86\u8ba1\u5212\u548c\u5206\u914d\u5bb9\u91cf\u4e4b\u5916\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u6362\u8a00\u4e4b\uff0c\u8be5\u7ec4\u7ec7\u786e\u4fdd\u4eba\u4eec\u5728\u9002\u5f53\u7684\u65f6\u5019\u5f97\u5230\u673a\u5668\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u56e0\u4e3a\u4ed6\u4eec\u63d0\u51fa\u4e86\u8981\u6c42\u3002\u800c\u4e14\uff0c\u4ed6\u4eec\u4e5f\u4e0d\u662f\u65e0\u77e5\u7684\u7b97\u5b50\u624b\u3002\n\u56e2\u961f\u5206\u914d\u5de5\u4f5c\u80cc\u540e\u7684\u771f\u6b63\u63a8\u52a8\u529b\u662f\u6211\u7684\u4e00\u4e2a\u670b\u53cb\uff0c\u4e00\u4e2a\u574f\u5bb6\u4f19\u5de5\u7a0b\u5e08\u3002\u5728\u516c\u53f8\u4efb\u804c\u7684\u8fd1\u5341\u5e74\u91cc\uff0c\u4ec5\u8fd9\u4e00\u4eba\u5c31\u53ef\u80fd\u4e3a\u516c\u53f8\u8282\u7701\u4e86\u76f8\u5f53\u4e8e\u591a\u5ea7\u5927\u697c\u7684\u673a\u5668\u3002\n\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u5f88\u7b80\u5355\u3002\u6bcf\u6b21\u6709\u56e2\u961f\u60f3\u8981\u4e00\u5957\u5168\u65b0\u7684\u786c\u4ef6\u65f6\uff0c\u6211\u7684\u670b\u53cb\u5c31\u4f1a\u51fa\u53bb\u770b\u770b\u4ed6\u4eec\u662f\u5982\u4f55\u4f7f\u7528\u73b0\u6709\u786c\u4ef6\u7684\u3002\u8fd9\u4e5f\u4e0d\u4ec5\u4ec5\u662fCPU\u5229\u7528\u7387\u7684\u95ee\u9898\u3002\u6211\u7684\u670b\u53cb\u60f3\u77e5\u9053\u5b83\u662f\u5982\u4f55\u4f7f\u7528CPU\u7684\u3002\u5982\u679c\u5b83\u5728\u505a\u611a\u8822\u548c\u4f4e\u6548\u7684\u4e8b\u60c5\uff0c\u5f53\u4ed6\u4eec\u8fd0\u884c\u5206\u6790\u65f6\uff0c\u5b83\u5c31\u4f1a\u88ab\u6d17\u6389\u3002\u4ed6\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u4e1c\u897f\u5728\u54ea\u91cc\u6d88\u78e8\u65f6\u95f4\u3002\u6bd5\u7adf\uff0c\u5256\u6790\u662f\u4e00\u4ef6\u4e8b\u3002\n\u8fd9\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6548\u679c\uff0c\u8feb\u4f7f\u56e2\u961f\u8bda\u5b9e\u548c\u5766\u7387\u5730\u63cf\u8ff0\u4ed6\u4eec\u7684\u9700\u6c42\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u6d6a\u8d39\uff0c\u7136\u540e\u8ba4\u4e3a\u66f4\u591a\u7684\u786c\u4ef6\u53ef\u4ee5\u62ef\u6551\u4ed6\u4eec\u3002\u4ed6\u4eec\u4e0d\u80fd\u968f\u610f\u82b1\u516c\u53f8\u7684\u94b1\u3002\u6211\u7684\u670b\u53cb\u548c\u5979\u6240\u4ee3\u8868\u7684\u56e2\u961f\u6ca1\u6709\u628a\u4e8b\u60c5\u641e\u5f97\u4e00\u56e2\u7cdf\u3002\n\u4e0d\u8fc7\uff0c\u5176\u4e2d\u4e00\u4e9b\u4e91\u7aef\u7f51\u7ad9\u5c31\u6ca1\u6709\u8fd9\u6837\u7684\u76d1\u7ba1\u4e86\u3002\u4ed6\u4eec\u6784\u5efa\u81ea\u5df1\u7684\u7cfb\u7edf\u53ea\u662f\u4e3a\u4e86\u81ea\u52a8\u6269\u5c55\uff0c\u4e0d\u65ad\u6269\u5c55\uff0c\u4e0d\u65ad\u6269\u5c55\u3002\u5f88\u5feb\uff0c\u5c31\u4f1a\u6709\u51e0\u5341\u4e2a\uff0c\u7136\u540e\u51e0\u767e\u4e2a\uff0c\u751a\u81f3\u51e0\u5343\u4e2a\u8fd9\u6837\u7684\u75af\u72c2\u7684\u4e1c\u897f\u3002\u5982\u679c\u4ed6\u4eec\u7f16\u5199\u4e86\u7cdf\u7cd5\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u4ed6\u4eec\u7684\u8db3\u8ff9\u6bcf\u5929\u90fd\u5728\u589e\u52a0\uff0c\u4ed6\u4eec\u751a\u81f3\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\u53ef\u80fd\u7684\u60c5\u51b5\u662f\uff0c\u56e2\u961f\u672c\u8eab\u5e76\u4e0d\u77e5\u9053\u4ed6\u4eec\u5728\u4f7f\u7528\u591a\u5c11\u53f0\u673a\u5668(\u5b9e\u9645\u4e0a\u662f\u865a\u62df\u673a)\uff0c\u4e5f\u4e0d\u77e5\u9053\u5b83\u7684\u53d8\u5316\u901f\u5ea6\u6709\u591a\u5feb\u3002\n\u6ca1\u6709\u7b49\u540c\u4e8e\u6211\u7684\u670b\u53cb\u7ad9\u5728\u90a3\u91cc\u544a\u8bc9\u4ed6\u4eec\u5148\u4f18\u5316\u4ed6\u4eec\u7cdf\u7cd5\u7684\u4ee3\u7801\uff0c\u7136\u540e\u4ed6\u4eec\u624d\u80fd\u83b7\u5f97\u66f4\u591a\u7684\u786c\u4ef6\u3002\u4f9b\u5e94\u548c\u90e8\u7f72\u7cfb\u7edf\u5c06\u4f1a\u6cc4\u9732\u8fd9\u4e00\u70b9\uff0c\u4ed6\u4eec\u786e\u5b9e\u662f\u8fd9\u6837\u505a\u7684\u3002\n\u901a\u5e38\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\u662f\uff0c\u6709\u4eba\u4f1a\u5b9a\u671f\u8fd0\u884c\u4e00\u4efd\u62a5\u544a\uff0c\u53d1\u73b0\u4e00\u4e9b\u4ee4\u4eba\u5174\u594b\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\uff0c\u54c7\uff0c\u670d\u52a1X\u73b0\u5728\u57281200\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u3002\u600e\u4e48\u4f1a\u51fa\u8fd9\u4e8b\uff1f\u8fd9\u5f88\u5bb9\u6613\u3002\u6ca1\u6709\u4eba\u963b\u6b62\u4ed6\u4eec\u5728\u76ee\u524d\u7684\u8bbe\u7f6e\u4e2d\u9700\u89811200\u53f0\u673a\u5668\u3002\u4eba\u4eec\u7ede\u5c3d\u8111\u6c41\u627f\u8bfa\u4f1a\u505a\u5f97\u66f4\u597d\uff0c\u4f46\u90a3\u4e9b\u611a\u8822\u7684\u4f8b\u5b50\u4ecd\u7136\u5750\u5728\u90a3\u91cc\uff0c\u6574\u65e5\u6574\u591c\u5730\u70e7\u94b1\u3002\n\u5728\u53e6\u4e00\u4e2a\u65b9\u5411\u4e5f\u6709\u4e50\u8da3\u3002\u6709\u4eba\u53ef\u80fd\u4f1a\u8bbe\u7f6e\u4e00\u6761\u89c4\u5219\uff0c\u4e00\u65e6\u4ed6\u4eec\u7684\u5de5\u4f5c\u4f4e\u4e8e\u67d0\u4e2aCPU\u4f7f\u7528\u7387\uff0c\u5c31\u7f29\u51cf\u4ed6\u4eec\u7684\u5de5\u4f5c\u89c4\u6a21\u3002\u4e5f\u8bb8\u6bcf\u5f53\u5229\u7528\u7387\u4f4e\u4e8e10%\u6216\u7c7b\u4f3c\u60c5\u51b5\u65f6\uff0c\u4ed6\u4eec\u5c31\u4f1a\u544a\u8bc9\u7f29\u653e\u5668\u5c06\u5176\u964d\u4f4e\u4e00\u4e2a\u6863\u6b21\u3002\n\u4f60\u8ba4\u4e3a\u5f53\u5b83\u7b2c\u4e00\u6b21\u975e\u5e38\u5b89\u9759\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6709\u4e00\u6b21\u5b83\u964d\u4e0b\u6765\u4e86\uff0c\u7136\u540e\u90a3\u4e2a\u5b9e\u4f8b\u6210\u529f\u5730\u964d\u5230\u4e8610%\u4ee5\u4e0b\uff1f\u5982\u679c\u4f60\u8bf4\u81ea\u52a8\u5b9a\u6807\u5668\u628a\u5b83\u964d\u5230\u96f6\uff0c\u4f60\u5c31\u5bf9\u4e86\uff01\u662f\u7684\uff0c\u6ca1\u6709\u6700\u5c0f\u5c3a\u5bf8\u9650\u5236\uff0c\u8fd9\u5c31\u662f\u4f60\u5f97\u5230\u7684\u3002\n\u66f4\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u663e\u7136\u8fd9\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u4f46\u4e0d\u4f1a\u7acb\u5373\u4fee\u590d\u3002\u4f60\u4f1a\u8ba4\u4e3a\u5b83\u4f1a\u6ce8\u610f\u5230\u5b83\u9700\u8981\u4e00\u4e9b\u80fd\u529b\u6765\u7ba1\u7406\u4e8b\u60c5\uff0c\u7136\u540e\u8fdb\u5165\u4e00\u573a\u62d4\u6cb3\u6bd4\u8d5b\uff0c\u4ece0\u52301\u518d\u52300\u52301\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u4e00\u6574\u665a\u90fd\u662f\u5982\u6b64\u3002\n\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\uff0c\u4e00\u65e6\u6ca1\u6709\u66f4\u591a\u7684\u5b9e\u4f8b\u5728\u8fd0\u884c\uff0c\u4efb\u4f55\u8861\u91cfCPU\u5229\u7528\u7387\u7684\u4e1c\u897f\u90fd\u53ef\u80fd\u9664\u4ee5\u96f6\uff0c\u5e76\u4e14\u4e0d\u80fd\u8d85\u8fc7\u8be5\u70b9\u3002\u4e0d\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u4f3c\u4e4e\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\n\u7136\u540e\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u5de7\u5999\u60c5\u51b5\u3002\u6211\u5728\u522b\u5904\u8c08\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u7ed9\u51fa\u603b\u7ed3\u3002\u60a8\u6709\u4e00\u9879\u670d\u52a1\u5fc5\u987b\u6b63\u5e38\u8fd0\u884c\u3002\u5b83\u5c31\u4f1a\u6b7b\u3002\u5176\u4ed6\u6240\u6709\u8bbe\u5907\u7684\u6d41\u91cf\u90fd\u4f1a\u4e0b\u964d\uff0c\u56e0\u6b64\u5916\u9762\u7684CPU\u5229\u7528\u7387\u4e5f\u4f1a\u4e0b\u964d\u3002\u8fd9\u4e9b\u5176\u4ed6\u670d\u52a1\u90fd\u662f\u6309\u6bd4\u4f8b\u7f29\u51cf\u7684\u3002\n\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u57fa\u672c\u670d\u52a1\u91cd\u65b0\u5f00\u59cb\u5de5\u4f5c\u3002\u8f66\u6d41\u8702\u62e5\u800c\u81f3\uff0c\u7136\u540e..\u3002\u554a\u54e6\uff01\u90a3\u4e9b\u5176\u4ed6\u670d\u52a1\u73b0\u5728\u592a\u5c0f\u4e86\uff0c\u65e0\u6cd5\u5904\u7406\u8d1f\u8f7d\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5b83\u4eec\u4ee5\u4f60\u80fd\u60f3\u8c61\u5230\u7684\u6700\u8106\u5f31\u7684\u65b9\u5f0f\u7f16\u5199\uff0c\u6240\u4ee5\u5b83\u4eec\u751a\u81f3\u4e0d\u80fd\u5ffd\u7565\u989d\u5916\u7684\u6d41\u91cf\u3002\u4ed6\u4eec\u611a\u8822\u5730\u8bd5\u56fe\u627f\u62c5\u6bcf\u4e00\u4ef6\u5373\u5c06\u5230\u6765\u7684\u4e8b\u60c5\uff0c\u5e76\u6ca1\u6709\u62d2\u7edd\u4ed6\u4eec\u6ca1\u6709\u5e0c\u671b\u5904\u7406\u7684\u4e1c\u897f\u7684\u60f3\u6cd5\u3002\n\u73b0\u5728\u5b83\u4eec\u5b8c\u5168\u9971\u548c\u4e86\uff0c\u4ec0\u4e48\u4e5f\u505a\u4e0d\u4e86\uff0cCPU\u50cf\u75af\u4e86\u4e00\u6837\u8fd0\u8f6c\u3002\u81ea\u52a8\u4f38\u7f29\u529f\u80fd\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8ba9\u66f4\u591a\u5b9e\u4f8b\u8fd0\u884c\u53ef\u80fd\u9700\u898110-15\u5206\u949f\u3002\u8fd9\u4e0d\u662f\u5f00\u73a9\u7b11\u3002\u6211\u89c1\u8fc7\u8fd9\u79cd\u60c5\u51b5\uff0c\u60c5\u51b5\u5e76\u4e0d\u4e50\u89c2\u3002\n\u57fa\u672c\u4e0a\uff0c\u4f60\u5e94\u8be5\u80fd\u591f\u628a\u76f8\u5f53\u4e8e\u706b\u7130\u55b7\u5c04\u5668\u7684\u4e1c\u897f\u5bf9\u51c6\u4f60\u7684\u670d\u52a1\uff0c\u5e76\u8ba9\u5b83\u7ee7\u7eed\u5de5\u4f5c\u3002\u5b83\u4e0d\u5fc5\u63a5\u53d7\u989d\u5916\u7684\u8bf7\u6c42\u3002\u5b83\u5e94\u8be5\u53ea\u505a\u5b83\u65e0\u8bba\u5982\u4f55\u90fd\u80fd\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u89c6\u60c5\u51b5\u5ffd\u7565\u6216\u62d2\u7edd\u5176\u4f59\u7684\u4e8b\u60c5\u3002\u8fd9\u6837\uff0c\u81f3\u5c11\u5b83\u53ef\u4ee5\u5f00\u59cb\u5438\u6536\u4e00\u4e9b\u8d1f\u8377\uff0c\u800c\u4e0d\u53ea\u662f\u6210\u4e3a\u95ee\u9898\u7684\u4e00\u90e8\u5206\u3002\n\u60f3\u60f3\u770b\uff1a\u5982\u679c\u60a8\u7684\u670d\u52a1\u7684\u4efb\u4f55\u4e00\u4e2a\u5b9e\u4f8b\u5728\u63d0\u4f9b\u8db3\u591f\u7684\u8d1f\u8f7d\u65f6\u4f1a\u53d1\u751f\u6545\u969c\u548c\u5d29\u6e83\uff0c\u90a3\u4e48\u5c31\u4f1a\u5c06\u8d1f\u8f7d\u91cd\u65b0\u5e73\u8861\u5230\u5176\u4ed6\u5b9e\u4f8b\u4e0a\u3002\u7136\u540e\uff0c\u5176\u4e2d\u4e00\u4e2a\u4f1a\u6cb8\u817e\uff0c\u5b83\u4f1a\u5173\u95ed\uff0c\u4ece\u800c\u5c06\u8d1f\u8f7d\u91cd\u65b0\u5e73\u8861\u5230\u66f4\u5c11\u7684\u5b9e\u4f8b\u4e0a\u3002\u8fd9\u79cd\u60c5\u51b5\u4f1a\u4e00\u76f4\u6301\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u6574\u4ef6\u4e8b\u53d8\u6210\u4e00\u5757\u7194\u5316\u7684\u7194\u6e23\u3002\n\u4f60\u53ef\u4ee5\u544a\u8bc9\u4f60\uff0c\u5f53\u4f60\u62fc\u51d1\u4e00\u4e9b\u53ef\u6015\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u5173\u95ed\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u76f4\u5230\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u65f6\uff0c\u4f60\u5c31\u5904\u4e8e\u8fd9\u6837\u7684\u60c5\u51b5\u3002\u6216\u8005\uff0c\u4e5f\u8bb8\u60a8\u5df2\u7ecf\u5c06\u7f51\u7edc\u8bbe\u7f6e\u4e3a\u4e22\u5f0350%\u7684\u6d41\u91cf\uff0c\u76f4\u5230\u6211\u4eec\u8d76\u4e0a\u4e3a\u6b62\u3002\u5982\u679c\u4f60\u66fe\u7ecf\u4e0d\u5f97\u4e0d\u8fd9\u4e48\u505a\uff0c\u90a3\u4f60\u5c31\u662f\u5728\u8fd0\u884c\u975e\u5e38\u8106\u5f31\u7684\u4e1c\u897f\uff01\u540c\u6837\uff0c\u5982\u679c\u4f60\u66fe\u7ecf\u62c5\u5fc3\u8fc7\u540c\u65f6\u5f00\u59cb\u6240\u6709\u4e8b\u60c5\uff0c\u5426\u5219\u7b2c\u4e00\u4e2a\u5c31\u4f1a\u716e\u719f\uff0c\u7136\u540e\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5c31\u4f1a\u5d29\u6e83\uff0c\u90a3\u5c31\u8ba9\u6211\u7b2c\u4e00\u4e2a\u544a\u8bc9\u4f60\uff1a\u4f60\u5df2\u7ecf\u5904\u4e8e\u4e0d\u5229\u7684\u5883\u5730\u4e86\u3002\n[\u65c1\u6ce8\uff1a\u5982\u679c\u8fd9\u542c\u8d77\u6765\u5f88\u8033\u719f\uff0c\u90a3\u662f\u56e0\u4e3a\u6211\u5728\u5927\u7ea615\u5e74\u524d\u6709\u4e00\u4f4d\u5ba2\u6237\uff0c\u4ed6\u7edd\u5bf9\u62d2\u7edd\u4fee\u590d\u4ed6\u4eec\u7cdf\u7cd5\u7684\u4ee3\u7801\uff0c\u53ea\u60f3\u8981\u66f4\u597d\u7684\u5de5\u5177\u6765\u5e76\u884c\u542f\u52a8\u548c\u505c\u6b62\u4ed6\u4eec\u7684\u4e1c\u897f\u3002\u7ad9\u5728\u6211\u8fd9\u4e00\u8fb9\u7684\u4eba\u5e76\u4e0d\u662f\u5728\u5bfb\u627e\u53c2\u6570\uff0c\u6240\u4ee5\u4ed6\u4eec\u7ed9\u4e86\u4ed6\u4eec\u4e00\u4e2a\u786e\u5207\u7684\u53c2\u6570\u3002\u4ed6\u4eec\u5f88\u9ad8\u5174\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u5fc5\u8003\u8651\u5199\u51fa\u66f4\u597d\u7684\u4ee3\u7801\u3002\u8fd9\u5c31\u662f\u4f60\u60f3\u4ece\u4f60\u7684\u4e1c\u897f\u91cc\u5f97\u5230\u7684\u5417\uff1f]\u3002\n\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u6446\u8131\u8fd9\u79cd\u60c5\u51b5\u3002\u8fd9\u91cc\u53ea\u6709\u4e00\u4e2a\u3002\u60a8\u53ef\u4ee5\u6682\u65f6\u505c\u6b62\u68c0\u67e5\u4fa6\u542c\u5957\u63a5\u5b57\u7684\u65b0\u8fde\u63a5\u3002\u8fd9\u610f\u5473\u7740\u60a8\u505c\u6b62\u8c03\u7528Accept()\u3002\u4fa6\u542c\u961f\u5217\u5c06\u4f1a\u5907\u4efd\uff0c\u7136\u540e\u4f1a\u53d1\u751f\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u5047\u8bbeLinux\uff0c\u90a3\u4e48\u5728\u90a3\u4e4b\u540e\uff0c\u5b83\u53ef\u80fd\u4f1a\u505c\u6b62\u4e3a\u8fde\u63a5\u5c1d\u8bd5\u53d1\u51faSYN/ACK\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u9b54\u672f\u6765\u4f7f\u5176\u4e3b\u52a8RST\u8fd9\u4e9b\u8fde\u63a5\uff0c\u4ee5\u4fbf\u5ba2\u6237\u7aef\u5feb\u901f\u5931\u8d25\u5e76\u7acb\u5373\u8f6c\u5230\u5176\u4ed6\u5730\u65b9\u3002\u7ba1\u4ed6\u5462\u3002\n\u5f53\u4e8b\u60c5\u5e73\u9759\u4e0b\u6765\u540e\uff0c\u4f60\u53ef\u80fd\u4f1a\u518d\u6b21\u5f00\u59cb\u5bfb\u627e\u90a3\u4e9b\u65b0\u7684\u8054\u7cfb\u3002\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u505a\u4e00\u4e9b\u6574\u6d01\u7684\u4e8b\u60c5\uff0c\u5148\u5904\u7406\u6700\u65b0\u7684\uff0c\u56e0\u4e3a\u6700\u8001\u7684\u53ef\u80fd\u5df2\u7ecf\u7528\u5b8c\u4e86\u5927\u90e8\u5206\u7684\u65f6\u95f4\uff0c\u800c\u4e14\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u4f1a\u7559\u4e0b\u6765\u5b8c\u6210\u5de5\u4f5c\u3002\u8fd9\u5c31\u662f\u6211\u5728\u51e0\u4e2a\u6708\u524d\u7684\u4e00\u7bc7\u5e16\u5b50\u4e2d\u6240\u8bf4\u7684\u7cbe\u6311\u7ec6\u9009\u7684\u540e\u8fdb\u5148\u51fa(LIFO)\u3002\u5f53\u4eba\u4eec\u5904\u4e8e\u4e00\u79cdRPC\u5fc3\u6001\u800c\u4e0d\u662f\u7f51\u7edc\u5fc3\u6001\u65f6\uff0c\u4ed6\u4eec\u5f80\u5f80\u4f1a\u60f3\u5230\u8fd9\u7c7b\u4e8b\u60c5\u3002\n\u60f3\u8981\u4e00\u4e2a\u771f\u6b63\u7c97\u7565\u7684\u8282\u6d41\u4f8b\u5b50\u5417\uff1f\u90ae\u4ef6\u5b88\u62a4\u7a0b\u5e8fSendmail\u8ba9\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u7684\u751f\u6d3b\u53d8\u5f97\u6709\u8da3\u4e86\u5f88\u4e45\uff0c\u5b83\u6709\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f\uff0c\u5b83\u53ef\u4ee5\u76d1\u89c6\u673a\u5668\u7684\u5e73\u5747\u8d1f\u8f7d\u3002\u5982\u679c\u5b83\u8d85\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u51f9\u69fd\uff0c\u5b83\u4ecd\u7136\u4f1a\u63a5\u53d7\u4e00\u4e2a\u8fde\u63a5\uff0c\u4f46\u5b83\u4f1a\u7528\u4e00\u4e2a\u9519\u8bef\u5c06\u5b83\u4eec\u6325\u624b\u79bb\u5f00\u3002\u5982\u679c\u5b83\u901a\u8fc7\u4e86\u7b2c\u4e8c\u7ea7\uff0c\u5b83\u5b9e\u9645\u4e0a\u5c06\u505c\u6b62\u76d1\u542c\u7f51\u7edc\uff01\u8fd9\u662f\u5bf9\u7684\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u5173\u95ed\u4fa6\u542c\u5957\u63a5\u5b57\u4ee5\u5f3a\u5236\u62d2\u7edd\u4efb\u4f55\u8fde\u63a5\u5c1d\u8bd5\u3002\n\u8fd9\u6bd4\u6211\u60f3\u8981\u7684\u66f4\u50cf\u662f\u610f\u8bc6\u6d41\uff0c\u4f46\u6240\u6709\u8fd9\u4e9b\u90fd\u9700\u8981\u8d70\u51fa\u53bb\u3002\u53ef\u80fd\u6027\u662f\uff0c\u6211\u4f1a\u56de\u5230\u8fd9\u4e9b\u8981\u70b9\u4e2d\u7684\u4e00\u4e9b\uff0c\u5e76\u5c06\u5b83\u4eec\u7f16\u6210\u4ed6\u4eec\u81ea\u5df1\u7684\u6545\u4e8b\uff0c\u5173\u4e8e\u4ec0\u4e48\u5e94\u8be5\u505a\uff0c\u4ec0\u4e48\u4e0d\u5e94\u8be5\u505a\uff0c\u4ee5\u53ca\u5982\u4f55\u5224\u65ad\u4f60\u7684\u56e2\u961f\u6216\u516c\u53f8\u5df2\u7ecf\u9677\u5165\u56f0\u5883\u3002", "note_en": "I have a bunch of random complaints about where things have gotten of late with this &#34;cloud&#34; business. It seems like far too many people think that running virtual machines on other people&#39;s hardware is the only way to do anything. It doesn&#39;t absolve you from actually being good at this stuff, and frequently complicates matters to where you can never truly shine.\n I&#39;ll say it up front: I prefer physical hardware. I know exactly what I&#39;m working with, and there&#39;s no spooky stuff going on when I try to track down a problem. If the disk is slow, I can find out why. If the network is being odd, I can find out why. There&#39;s no mysterious &#34;host system&#34; that lives in someone else&#39;s world which is beyond my reach.\n If you want satisfying answers to life&#39;s mysteries about production environments, you need to be able to get to the bottom of things. Every time you introduce some bit of virtualization, you have just reduced the likelihood of finding an answer. This gets even worse when it crosses domains into another company or vendor or whatever.\n At that point, you can only drop your standards, and accept more uncertainty, badness, outages, and other strange behaviors. You have to just live with the fact that some things may never truly get better.Just this element right here will chase off some folks. They will either join up and then peace out, or never join in the first place.\n I should mention that introducing these &#34;troubleshooting singularities&#34; where no reasoning can exist to solve a problem also creates a great opportunity for charlatans, fraud, and general incompetence. Why? That&#39;s easy. Every time something bad happens, you just blame it on something at one of those known trouble spots. People love their scapegoats.\n  There&#39;s another &#34;fun&#34; aspect to all of this virtual machine, cloud, and &#34;elastic scaling&#34; business: the incredible money sink that can be created. It seems like everyone sets up some kind of rule that will just keep an eye on CPU utilization and then will &#34;helpfully&#34; stand up more instances any time it goes past a certain point.\n The number of terrible behaviors this enables is just incredible. It has to be seen to be believed. What do I mean? Ah yes, come with me on a little trip down memory lane.\n I worked at a place that had a bunch of physical machines. It also had a whole group that did nothing but plan and allocate capacity. In other words, that group made sure that people got machines when appropriate, not just because they asked for it. Also, they weren&#39;t ignorant bean-counters, either.\n The real driving force behind that team&#39;s allocation efforts was a badass engineer who was a friend of mine. That person alone probably saved the company multiple buildings worth of machines over the almost decade of tenure there.\n How did this work? Easy. Every time some team wanted a whole whack of new hardware, my friend went out and took a look to see how they were using the stuff they already had. It wasn&#39;t just about CPU utilization, either. My friend wanted to know HOW it was using the CPU. If it was doing stupid and inefficient things, it would come out in the wash when they ran the analysis. They could see where this stuff was spending its time. Profiling is a thing, after all.\n This had a nice effect of forcing teams to be honest and forthcoming about their needs, and to not try to be wasteful and then think that more hardware would save them. They didn&#39;t get to spend the company&#39;s money at will. My friend and the team she represented kept things from becoming a free-for-all.\n Some of these &#34;cloud&#34; places, though, don&#39;t have that kind of oversight. They build their systems to just auto-scale up, and up, and up. Soon, there are dozens, then hundreds, then even thousands of these crazy things. If they write bad code, and their footprint goes up every day, they don&#39;t even realize it. Odds are, the teams themselves have no idea how many &#34;machines&#34; (VMs in reality) they are on, or how quickly it&#39;s changing.\n There&#39;s no equivalent of my friend to stand there and tell them to first optimize their terrible code before they can get more hardware. The provisioning and deploy systems will give it away, and so they do.\n What usually happens is that someone will periodically run a report and find out something mind-blowing, like &#34;oh wow, service X now runs on 1200 machines&#34;. How did this happen? That&#39;s easy. Nobody stopped them from needing 1200 machines in their current setup. People wring their hands and promise to do better, but still those stupid instances sit there, burning cash all day and all night.\n  There&#39;s also fun in the other direction. Someone might set up a rule to &#34;scale down&#34; their job once it falls below some CPU utilization. Maybe they tell the scaler to lower it a notch every time the utilization is below 10% or something like that.\n What do you suppose happens the first time it&#39;s very quiet, it&#39;s down at ONE instance, and then that one instance manages to come in under 10%?If you said &#34;the autoscaler lowers it to zero&#34;, you&#39;d be right! Yep, without a minimum size limiter in place, that&#39;s what you get.\n What&#39;s more amazing is that apparently this can happen and then not immediately &#34;fix&#34; itself. You&#39;d think it would notice that it needs SOME capacity to run things, and then get in a tug-of-war, going from 0 to 1 to 0 to 1 and so on all night long.\n Personally, I think whatever was measuring the CPU utilization probably divided by zero once there were no more instances running, and couldn&#39;t run past that point. Not dealing with that kind of scenario seems par for the course.\n  Then there&#39;s a whole other neat situation that can happen. I talked about this elsewhere, but for the sake of completeness will give the summary here. You have a service that has to be up. It dies. Traffic to everything else drops, so the CPU utilization out there drops, too. Those other services scale down.\n At some point, the essential service starts working again. Traffic floods back, and ... uh oh! Those other services are far too small now, and can&#39;t handle the load. Worse still, they&#39;ve been written in the most fragile ways you can imagine, and so they can&#39;t even ignore extra traffic. They stupidly try to take on everything that&#39;s coming in, and have no notion of rejecting the stuff they have no hope of handling.\n Now they&#39;re completely saturated, getting nothing done, and the CPU is running like crazy. The auto-scaling stuff notices, but it might be a good 10-15 minutes to get more instances running. This is not a joke. I&#39;ve seen this happen and it&#39;s not pretty.\n Basically, you should be able to point the equivalent of a flamethrower at your service and have it keep going. It doesn&#39;t have to accept the extra requests. It should just do the ones it would be capable of doing anyway, and ignore or reject the rest as appropriate. That way, at least it can start absorbing SOME of the load instead of just becoming part of the problem.\n Think about it: if any one instance of your service will fall over and crash when presented with enough load, that will then rebalance the load onto the others. One of those will then boil, and it&#39;ll go down, rebalancing the load onto even fewer instances. This will continue until the whole thing is a molten lump of slag.\n You can tell you&#39;re in a situation like this when you rig up horrible things like &#34;turn off the load balancer until we can restart the service&#34;. Or, maybe you&#39;ve &#34;set the network stuff to drop 50% of the traffic until we can catch up&#34;. If you&#39;ve ever had to do this, you&#39;re running incredibly fragile stuff! Likewise, if you&#39;ve ever had to worry about &#34;starting everything at once because otherwise the first one up will get boiled and will crash and then the second and third...&#34;, let me be the first to break it to you:  you&#39;re already in the bad place.\n [Side note: if this sounds familiar, it&#39;s because I had a customer about 15 years ago who absolutely refused to fix their terrible code and just wanted better tooling to start and stop their stuff in parallel. The people on my side weren&#39;t looking for an argument and so gave them exactly that.They were happy because they didn&#39;t have to think about writing better code. Is that what you want from your stuff?]\n There are so many ways out of a situation like this. Here&#39;s just one. You can temporarily stop checking your listening socket(s) for new connections. This means you stop calling accept(). The listenqueue will back up, and then something interesting will happen. Assuming Linux, it&#39;ll probably stop emitting SYN/ACKs for connection attempts after that point. You might do some magic to make it actively RST those connections so clients fail fast and go somewhere else right away. Whatever.\n When things calm down, you maybe start looking for those new connections again. Maybe you do something neat and process the newest ones first, since the oldest ones have probably burned most of their timeout already and won&#39;t stick around to finish the job anyway. This is what I meant by &#34;selective LIFO&#34; in a post from a few months back. It&#39;s the kind of thing people tend to think about when they&#39;re in a &#34;RPC&#34; mindset and not a &#34;web&#34; mindset.\n Want a really rough example of throttling? sendmail, the mail daemon which made life interesting for some of us for far too long, had this thing where it kept tabs on the machine&#39;s load average. If it got up over the first notch, it would still accept a connection, but it would wave them off with an error. If it got past the second notch, it would actually stop listening to the network! That&#39;s right, it would actually close the listening socket to forcibly reject any connection attempts.\n  That was more of a stream-of-consciousness than I intended, but all of it needed to get out there. Odds are, I&#39;ll come back to some of these points and spin them out into their own tales of what to do, what not to do, and how to tell when your team or company has already dug itself into a hole.", "posttime": "2020-05-07 19:57:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9020\u6210,rants,\u4e8b\u60c5", "title": "\u4e00\u5806\u5173\u4e8e\u4e91\u9020\u6210\u7684\u7834\u574f\u7684\u5486\u54ee", "title_en": "A bunch of rants about cloud-induced damage", "transed": 1, "url": "https://rachelbythebay.com/w/2020/05/06/scale/", "via": "", "real_tags": ["\u9020\u6210", "rants", "\u4e8b\u60c5"]}, {"category": "", "categoryclass": "", "imagename": "89fd5fa2d14eb3696862540f7493fbdd.png", "infoid": 1001055, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CuteVariant\u662f\u4e00\u4e2a\u7528Python\u4e3aQt\u7f16\u5199\u7684\u9057\u4f20\u53d8\u5f02\u7684\u8f7b\u91cf\u7ea7\u72ec\u7acb\u67e5\u770b\u5668\u3002\u5b83\u5141\u8bb8\u60a8\u67e5\u770b\u548c\u8fc7\u6ee4VCF\u548c\u5176\u4ed6\u683c\u5f0f\u5316\u6587\u4ef6\u3002\nPyside 2\u76ee\u524d(2019\u5e745\u6708)\u5728Cygwin\u4e0a\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u6b64CuteVariant\u5c06\u4e0d\u80fd\u5728Cygwin\u4e0a\u8fd0\u884c\u3002\n-cutevariant_win_dbg.exe\uff1a\u5728\u540e\u53f0\u6253\u5f00\u63a7\u5236\u53f0\u67e5\u770b\u8c03\u8bd5\u6d88\u606f\u3002\u6ce8\u610f\uff1aQt\u5e93\u4f3c\u4e4e\u6709\u975e\u5e38\u9ad8\u7684\u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u6837\u7684\u8be6\u7ec6\u7a0b\u5ea6\u53ef\u80fd\u4f1a\u4f7f\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002-cutevariant.exe\uff1a\u6807\u51c6\u53ef\u6267\u884c\u6587\u4ef6\u3002\ngit\u514b\u9686git@github.com\uff1alabsquare/cutevariant.gitcd cutevariantviralenv-p/usr/bin/python3venvsource venv/bin/actiateake install_deps#installmake install#pip install-e\u3002Make Run#\u542f\u52a8\u5e94\u7528\u7a0b\u5e8fMake test#start test\u3002\npip install whelgit clone https://github.com/ysard/cutevariant.gitgit fetchgit checkout dev#\u6216develmake install#\u6216pip install--user-e.[dev]\u3002\n\u5f3a\u70c8\u53cd\u5bf9\uff1a\u4ec5\u4e3a900Ko\u4ee5\u4e0b\u7684\u7a0b\u5e8f(\u5305\u62ec550Ko\u7684\u5b57\u4f53\u548c\u56fe\u6807)\uff0c\u60a8\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a350Mo\u7684\u5b58\u6863\u3002", "note_en": "cutevariant is a light standalone viewer of genetic variation written in Python for Qt. It allows you to view and filter VCF and other format files.\n     Pyside2 is not currently (2019 May) functional on Cygwin, so Cutevariant will not work on Cygwin.\n    - cutevariant_win_dbg.exe: Open a console in background to see debugging messages.Note: Qt libs seems to have a very high loglevel and such a verbosity could make the program unusable.- cutevariant.exe: Standard executable.\n    git clone git@github.com:labsquare/cutevariant.gitcd cutevariantvirtualenv -p /usr/bin/python3 venvsource venv/bin/activatemake install_deps # installmake install # pip install -e . make run # start applicationmake test # start tests\n       pip install wheelgit clone  https://github.com/ysard/cutevariant.gitgit fetchgit checkout dev # or develmake install # or pip install --user -e .[dev]\n    Strongly discouraged: You will generate an archive of 350Mo just for a program ofless than 900Ko (including 550Ko of fonts and icons).", "posttime": "2020-05-07 19:57:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u56e0\u7ec4,genomics,install", "title": "CuteVariant-\u57fa\u56e0\u7ec4\u53d8\u5f02\u67e5\u770b\u5668", "title_en": "Cutevariant \u2013 Genomics Variation Viewer", "transed": 1, "url": "https://github.com/labsquare/cutevariant", "via": "", "real_tags": ["\u57fa\u56e0\u7ec4", "genomics", "install"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001054, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5f00\u59cb\u4e86\u89e3CSRF\u4ee4\u724c\u662f\u5982\u4f55\u751f\u6210\u548c\u9a8c\u8bc1\u7684\u3002\u6211\u662f\u901a\u8fc7\u5728Phoenix web\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8ddf\u8e2a\u51fd\u6570\u8c03\u7528\u6d41\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\u8fd9\u662f\u4e00\u4e2a\u8ba9\u6211\u9677\u5165\u4e00\u4e9b\u6df1\u6d1e\u7684\u8fc7\u7a0b\uff0c\u4f46\u6700\u7ec8\u662f\u4e00\u6b21\u6709\u76ca\u7684\u7ecf\u5386\u3002\u5bf9\u672c\u6587\u7684\u5177\u4f53\u7ec6\u8282\u4e0d\u592a\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u8df3\u5230\u5e95\u90e8\u7684\u6458\u8981\u90e8\u5206\u67e5\u627eTL\uff1b\n\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd\u4e86CSRF\u4ee4\u724c\u7684\u751f\u547d\u5468\u671f\u3002\u4e3a\u4e86\u5f00\u59cb\u6211\u4eec\u7684\u65c5\u7a0b\uff0c\u6211\u4eec\u5c06\u5bfc\u822a\u5230\u6b63\u6587\u4e2d\u5305\u542bHTML\u8868\u5355\u7684\u9875\u9762-\u4f8b\u5982\uff0c/login&34\uff1b\u3002\u6211\u4eec\u5c06\u68c0\u67e5\u8868\u5355\u4e2d\u7684\u5b57\u6bb5\uff0c\u4ee5\u67e5\u770b\u662f\u5426\u6709HIDDED_CSRF_TOKEN\u5b57\u6bb5\u3002\u5b83\u662f\u81ea\u52a8\u653e\u5165\u8868\u683c\u4e2d\u7684\u3002\n\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0bPhoenix.HTML.form_tag/3\u7684\u6e90\u4ee3\u7801\uff0c\u770b\u770b\u9b54\u672f\u662f\u5728\u54ea\u91cc\u53d1\u751f\u7684\u3002\u8fd9\u662f\u4ee3\u7801\u4e2d\u6dfb\u52a0\u9690\u85cf\u8f93\u5165\u5b57\u6bb5\u4ee5\u5b58\u50a8\u4ee4\u724c\u7684\u90e8\u5206\u3002\u5f53\u65b9\u6cd5\u662f&#34\uff1bPOST&#34\uff1b\u65f6\uff0c\u5b83\u4f1a\u6dfb\u52a0\u5230\u8868\u5355\u4e2d\u3002\n\u8fdb\u4e00\u6b65\u8ddf\u968f\u4ee3\u7801\uff0c\u6211\u4eec\u770b\u5230Plug.CSRFProtection.get_CSRF_TOKEN_FOR/1\u7528\u4e8e\u751f\u6210\u4ee4\u724c\u3002\u4e0b\u9762\u662f\u4eceIEX\u4ea4\u4e92\u5f0f\u63a7\u5236\u53f0\u8c03\u7528\u51fd\u6570\u793a\u4f8b\u3002\n\u73b0\u5728\uff0c\u8fd9\u770b\u8d77\u6765\u5c31\u50cf\u662f\u4e00\u5806\u968f\u673a\u5b57\u7b26(\u5267\u900f\u63d0\u9192\uff1a\u5b83\u6709\u70b9\u50cf\u662f\u4e00\u5806\u968f\u673a\u5b57\u7b26)\u3002\u8ba9\u6211\u4eec\u66f4\u591a\u5730\u8ddf\u8e2a\u4ee3\u7801\uff0c\u4ee5\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\u3002\n\u7ed3\u679c\u662fGET_CSRF_TOKEN_FOR/1\u6267\u884c\u4e86\u4e00\u4e9b\u5206\u652f\uff0c\u5e76\u6700\u7ec8\u8c03\u7528\u4e86Plug.CSRFProtection.Get_CSRF_TOKEN/0\u3002\u6839\u636e\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5b83\u7684\u5de5\u4f5c\u662f\u751f\u6210\u4e00\u4e2a\u4ee4\u724c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u6d41\u7a0b\u5b57\u5178\u4e2d(\u5982\u679c\u8be5\u4ee4\u724c\u8fd8\u4e0d\u5b58\u5728)\u3002\u4ee4\u724c\u7684\u751f\u6210\u65b9\u5f0f\u5982\u4e0b\u6240\u793a\uff1a\n\u6211\u4eec\u5c06\u6682\u65f6\u5ffd\u7565\u63a9\u7801\u51fd\u6570\uff0c\u5e76\u8df3\u8fc7\u51e0\u4e2a\u4e2d\u95f4\u51fd\u6570\u8c03\u7528\u6765\u67e5\u770bPlug.CSRFProtection.Generate_Token/0\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6700\u7ec8\u8fdb\u5165\u6b63\u9898\u7684\u5730\u65b9\u3002\n\u6709\u4e00\u4e2a\u5bf9Erlang\u51fd\u6570\u7684\u8c03\u7528\uff1acrypt.strong_rand_bytes/1\uff0c\u5b83\u5c06\u751f\u6210N\u4e2a\u968f\u673a\u5b57\u8282\u3002\u6211\u4eec\u5c06\u4e0d\u518d\u6df1\u5165\u4e86\u89e3\u6b64\u51fd\u6570\u7684\u5b9e\u9645\u5de5\u4f5c\u539f\u7406\u3002\u968f\u673a\u6570\u672c\u8eab\u53ef\u80fd\u662f\u53e6\u4e00\u7bc7\u6587\u7ae0\u3002\n\u7136\u540e\u5bf9\u968f\u673a\u5b57\u8282\u8fdb\u884cBase64\u7f16\u7801\u3002\u6211\u5df2\u7ecf\u5199\u4e86\u4e00\u7bc7\u5173\u4e8eBase64\u5982\u4f55\u5de5\u4f5c\u7684\u6587\u7ae0\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u4e0d\u4f1a\u6df1\u5165\u63a2\u8ba8\u8fd9\u4e00\u70b9\u3002\u53ef\u4ee5\u8bf4\uff0c\u5c06\u968f\u673a\u5b57\u8282\u7f16\u7801\u6210\u53ef\u4ee5\u4f7f\u7528HTTP\u5b89\u5168\u4f20\u8f93\u7684\u683c\u5f0f\u662f\u6709\u610f\u4e49\u7684\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4ee4\u724c\u662f\u5982\u4f55\u521b\u5efa\u7684\uff1a\u5b83\u662f\u4e00\u4e2abase64\u7f16\u7801\u7684\u968f\u673a\u5b57\u7b26\u4e32\u3002\u7136\u800c\uff0c\u4e50\u8da3\u5e76\u4e0d\u4ec5\u6b62\u4e8e\u6b64\uff0c\u56e0\u4e3a\u8fd9\u53ea\u662f\u4e00\u4e2a\u672a\u52a0\u63a9\u9970\u7684\u4ee3\u5e01\u3002\u672a\u5c4f\u853d\u7684\u4ee4\u724c\u5df2\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570Plug.CSRFProtection.ask/1\u3002\n\u54c7\uff0c\u73b0\u5728\u8fd9\u4e8b\u53d8\u5f97\u6709\u8da3\u4e86\u3002\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u66f4\u6df1\u5165\u5730\u7814\u7a76Plug.Crypto\u6a21\u5757\u6765\u4e86\u89e3\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u8ba9\u6211\u4eec\u6765\u8ba1\u7b97\u4e00\u4e0b\uff1a\n\u8981\u56de\u7b54\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u5230Plug.Crypto\u6a21\u5757\u5e76\u67e5\u770bMASK/2\u3002\u6211\u4eec\u7a0d\u540e\u5c06\u8fd4\u56de\u5230Plug.CSRFProtection.ask/1\u3002\n@doc&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u8fd9\u4e24\u4e2a\u4ee4\u724c\u8981\u6c42\u5927\u5c0f\u76f8\u540c\u3002&#34\uff1b&#34\uff1b&#34\uff1b@spec ask(inary()\uff0cinary())\uff1a\uff1ainary()def ask(Left\uff0cRight)do MASK(Left\uff0cRight\uff0c&#34\uff1b&#34\uff1b)enddefp MASK(&lt\uff1b&lt\uff1bx\uff0cLeft\uff1aBinary&gt\uff1b&Get\u3002\uff0cacc)\u6267\u884c\u63a9\u7801(\u5de6\u3001\u53f3\uff1b&lt\uff1b&lt\uff1bacc\uff1a\uff1a\u4e8c\u8fdb\u5236\uff0cx^^y^ygt\uff1b&gt\uff1b)enddefp\u63a9\u7801(&lt\uff1b&lt\uff1b&gt\uff1b&gt\uff1b\uff0c&lt\uff1b&lt\uff1b&gt\uff1b&gt\uff1b\uff0cacc)\u6267\u884cACCEND\u3002\n\u4e0d\u8981\u8ba9\u9012\u5f52\u3001\u4e8c\u8fdb\u5236\u6a21\u5f0f\u5339\u914d\u548c^^\u5b8f\u5413\u5230\u60a8\uff01^\u662fBitwise\u6a21\u5757\u4e2d\u7684XOR\u8fd0\u7b97\u7b26\u3002MASK/2\u51fd\u6570\u9012\u5f52\u5730\u5bf9\u4ee4\u724c\u548c\u63a9\u7801\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\u3002\u6ca1\u6709\u592a\u591a\u7684\u4e1a\u52a1\u903b\u8f91\u60c5\u51b5\u9700\u8981XOR\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u6211\u4eec\u6bcf\u5929\u90fd\u8981\u7528\u5230\u7684\u3002\n\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u624b\u52a8\u8fdb\u884cXOR\uff1bC&34\uff1b\u548c&#34\uff1bd&34\uff1b\u3002\u9996\u5148\uff0c\u6211\u4eec\u627e\u5230\u5b57\u7b26\u7684ASCII\u503c\uff0c\u537367\u548c100\u3002\u7136\u540e\u6211\u4eec\u5c06ASCII\u503c\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\uff0c\u53731000011\u548c1100100\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4e8c\u8fdb\u5236\u503c\u6392\u6210\u4e00\u884c\uff0c\u4ee5\u4fbf\u6bd4\u8f83\u6bcf\u4e00\u4f4d\u3002\nXOR\u7684\u89c4\u5219\u662f\u5fc5\u987b\u6709\u4e00\u4e2a\uff0c\u4f46\u4e0d\u80fd\u4e24\u4e2a\u90fd\u6709\uff0c\u624d\u80fd\u4ea7\u751f1\u3002\u4f8b\u5982\uff1a\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u7ed3\u679c0100111\u8f6c\u6362\u56de10\u8fdb\u5236\u6570\u5b57\uff0c\u7136\u540e\u627e\u5230\u76f8\u5e94\u7684ASCII\u7801\u5b57\u7b26\u3002&#34\uff1b&#39\uff1b&#34\uff1b\u662f&#34\uff1bC&#34\uff1bXOR&#34\uff1bd&#34\uff1b\u7684\u7ed3\u679c\u3002\u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3Plug.Crypto.ask/2\u5728\u505a\u4ec0\u4e48\u3002\n\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4ee4\u724c\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u63a9\u7801\u3002\u8fd9\u6709\u70b9\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u63a9\u7801\u51fd\u6570\u672c\u8eab\u4e5f\u6709\u4e00\u4e2a\u540d\u4e3aMASK\u7684\u53d8\u91cf\u3002\u8bf7\u6ce8\u610f\uff0c\u63a9\u7801(\u53d8\u91cf)\u7684\u751f\u6210\u65b9\u5f0f\u4e0e\u4ee4\u724c\u76f8\u540c\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u7b2c\u4e8c\u4e2a\u4ee4\u724c\u3002\u6807\u8bb0\u548c\u63a9\u7801\u53d8\u91cf\u4e00\u8d77\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u7136\u540e\u8fdb\u884cbase64\u7f16\u7801\u3002\u6700\u540e\uff0c\u8fd8\u5c06\u63a9\u7801\u53d8\u91cf\u9644\u52a0\u5230\u5b83\u7684\u6240\u6709\u90e8\u5206\u3002\n\u6211\u4eec\u73b0\u5728\u77e5\u9053\u9762\u5177\u662f\u4ec0\u4e48\u4e86\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6709\u5fc5\u8981\u8fd9\u4e48\u505a\u5462\uff1f\u4ecd\u7136\u5c79\u7acb\u4e0d\u5012\u3002\n\u8ba9\u6211\u4eec\u770b\u770b\u662f\u5426\u6709\u4efb\u4f55\u8bc1\u636e\u8bc1\u660e\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u529f\u80fd\u5b58\u5728\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5728GitHub\u4e0a\u6253\u5f00\u4e00\u4e2agit\u6307\u8d23\u89c6\u56fe\u3002\n\u554a-\u54c8\uff01&#34\uff1b\u5c4f\u853dCSRF\u4ee4\u724c\u4ee5\u907f\u514d\u5165\u4fb5\u653b\u51fb&#34\uff1b-\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u63d0\u4ea4\u6d88\u606f\uff01\u901a\u8fc7\u5bf9\u4ec0\u4e48\u662f\u6f0f\u6d1e\u653b\u51fb\u8fdb\u884c\u4e00\u4e9b\u7814\u7a76\uff0c\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u653b\u51fb\u8005\u80fd\u591f\u53d1\u9001\u4e00\u7cfb\u5217\u8bf7\u6c42\uff0c\u5e76\u9010\u6e10\u8ba1\u7b97\u51fa\u54cd\u5e94\u6b63\u6587\u7684\u4e00\u90e8\u5206\uff0c\u5373\u4f7f\u54cd\u5e94\u662f\u52a0\u5bc6\u7684\u3002\n\u653b\u51fb\u8005\u5229\u7528\u54cd\u5e94\u4f7f\u7528\u538b\u7f29\u7684\u4e8b\u5b9e\uff0c\u5e76\u4e14\u538b\u7f29\u54cd\u5e94\u7684\u5927\u5c0f\u8981\u4e48\u589e\u5927\uff0c\u8981\u4e48\u7f29\u5c0f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5bf9\u5b57\u7b26\u7684\u4e00\u4e2a\u5c0f\u731c\u6d4b\u662f\u6b63\u786e\u7684\u8fd8\u662f\u4e0d\u6b63\u786e\u7684\u3002\u5728SSL\u4e2d\uff0c\u53d1\u73b0\u8be5\u6f0f\u6d1e\u7684\u5b89\u5168\u7814\u7a76\u4eba\u5458\u572830\u79d2\u5185\u5c31\u6d88\u5931\u4e86\uff0c\u4ed6\u4eec\u975e\u5e38\u8be6\u7ec6\u5730\u89e3\u91ca\u548c\u6f14\u793a\u4e86\u8be5\u653b\u51fb\u3002\n\u4ed6\u4eec\u8fd8\u53d1\u5e03\u4e86\u4e00\u7bc7\u8bba\u6587\uff0c\u63d0\u51fa\u4e86\u653b\u51fb\u7f13\u89e3\u65b9\u6848\u3002\u672c\u6458\u5f55\u89e3\u91ca\u4e86Plug.CSRFProtection.ask/1&#39\uff1b\u7684\u7b97\u6cd5\u3002\n\u653b\u51fb\u4f9d\u8d56\u4e8e\u76ee\u6807\u5bc6\u7801\u5728\u8bf7\u6c42\u4e4b\u95f4\u4fdd\u6301\u4e0d\u53d8\u7684\u4e8b\u5b9e\u3002\u867d\u7136\u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e0a\u8f6e\u6362\u79d8\u5bc6\u901a\u5e38\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u4f46\u6c64\u59c6\u00b7\u4f2f\u68ee(Tom Berson)\u63d0\u51fa\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7efc\u5408\u8fd9\u4e00\u6548\u679c\u3002\u4e0d\u662f\u5728\u9875\u9762\u4e2d\u5d4c\u5165\u79d8\u5bc6S\uff0c\u800c\u662f\u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e0a\u751f\u6210\u65b0\u7684\u4e00\u6b21\u6027\u4fbf\u7b7eP\uff0c\u5e76\u5728\u9875\u9762\u4e2d\u5d4c\u5165P||(P\u2295S)\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528||\u8868\u793a\u4e32\u8054\uff0c\u4f7f\u7528\u2295\u8868\u793a\u5f02\u6216\u3002\n\u63a9\u853d\u4ee4\u724c\u6709\u52a9\u4e8e\u9632\u6b62\u653b\u51fb\u8005\u9010\u6e10\u731c\u6d4b\u54cd\u5e94\u6b63\u6587\u7684\u5b57\u7b26\u3002\u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4ee4\u724c\u5728\u4e0d\u540c\u7684\u8bf7\u6c42\u4e4b\u95f4\u4e0d\u4f1a\u6539\u53d8\uff0c\u63a9\u7801\u4e5f\u4f1a\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u4ee4\u724c\u6bcf\u6b21\u5728\u54cd\u5e94\u6b63\u6587\u4e2d\u90fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u8868\u793a\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u67e5\u770b\u4ee4\u724c\u9a8c\u8bc1\u65f6\uff0c\u6211\u4eec\u5c06\u770b\u5230XOR\u63a9\u7801\u53ef\u4ee5\u53cd\u8f6c\u4ee5\u663e\u793a\u539f\u59cb\u4ee4\u724c\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u4e3a\u4ec0\u4e48\u5c4f\u853d\u4ee4\u724c\uff0c\u4ee5\u53ca\u5c4f\u853d\u5b83\u610f\u5473\u7740\u4ec0\u4e48\u3002\u6211\u4eec\u8fd8\u77e5\u9053\u5982\u4f55\u521b\u5efa\u672a\u5c4f\u853d\u7684\u4ee4\u724c\u3002\u7136\u800c\uff0c\u4ec5\u4ec5\u5728HTML\u6587\u6863\u4e2d\u63d2\u5165\u4e00\u4e2a\u4ee4\u724c\u662f\u4e0d\u591f\u7684\u3002\u540c\u6837\u7684\u4ee4\u724c\u4e5f\u653e\u5728\u7528\u6237\u7684\u6d4f\u89c8\u5668cookie\u4e2d\u3002\n\u5982\u679c\u6211\u4eec\u770b\u4e00\u4e0b\u6d4f\u89c8\u5668\u4e2d\u7684cookie\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e9b\u4e1c\u897f\uff0c\u4f46\u5b83\u663e\u7136\u4e0e\u6211\u4eec\u5728HTML\u8868\u5355\u4e2d\u770b\u5230\u7684\u4ee4\u724c\u4e0d\u5339\u914d\u3002\u8fd9\u662f\u56e0\u4e3a\u51e4\u51f0\u536b\u89c6\u5bf9\u997c\u5e72\u8fdb\u884c\u4e86\u52a0\u5bc6\u7b7e\u540d\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u4e0d\u4f1a\u88ab\u7be1\u6539\u3002\n\u6bcf\u4e2aPhoenix\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u4e00\u4e2a\u5728config/config.ex\u4e2d\u5b9a\u4e49\u7684SECRET_KEY_BASE\u503c\uff0c\u8fd9\u5c31\u662f\u83f2\u5c3c\u514b\u65af\u7528\u4f5c\u7b7e\u540d\u7684\u5730\u65b9\u3002\u4f46\u662f\uff0cSECRET_KEY_BASE\u5e94\u8be5\u662f\u6ca1\u6709\u4eba\u77e5\u9053\u7684\u4fdd\u5bc6\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528SECRET_KEY_BASE\u3002\u76f8\u53cd\uff0cPhoneix\u4f9d\u8d56\u4e8ePlug.Crypto.KeyGenerator\u6a21\u5757\u3002\u4ee5\u4e0b\u662f\u6587\u6863\u7684\u6458\u5f55\uff0c\u603b\u7ed3\u4e86Plug.Crypto.KeyGenerator\u6a21\u5757\u7684\u7528\u9014\uff1a\n\u2026\u3002\u8fd9\u4f7f\u5e94\u7528\u7a0b\u5e8f\u5177\u6709\u5355\u4e00\u7684\u5b89\u5168\u5bc6\u94a5\uff0c\u4f46\u907f\u514d\u5728\u591a\u4e2a\u4e0d\u517c\u5bb9\u7684\u4e0a\u4e0b\u6587\u4e2d\u91cd\u7528\u8be5\u5bc6\u94a5\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u4fdd\u62a4\u4f1a\u8bddcookie\u6570\u636e(\u5305\u62ecCSRF\u4ee4\u724c)\u7684\u5b8c\u6574\u6027\u548c\u771f\u5b9e\u6027\u3002\n\u600e\u4e48\u53ef\u80fd\u5728\u6f5c\u5728\u4e0d\u5b89\u5168\u7684\u5730\u65b9\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u7684\u5bc6\u94a5\u5462\uff1fPlug.Crypto.KeyGenerator\u901a\u8fc7\u5b9e\u73b0\u79f0\u4e3a\u57fa\u4e8e\u5bc6\u7801\u7684\u5bc6\u94a5\u6d3e\u751f\u51fd\u65702\u6216PBKDF2\u7684\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u5b83\u4ee5\u76d0\u548c\u79d8\u5bc6\u4f5c\u4e3a\u8f93\u5165\u3002\u7136\u540e\uff0c\u5b83\u91cd\u590d\u5e94\u7528\u4f2a\u968f\u673a\u51fd\u6570(PRF)\u6765\u521b\u5efa\u6d3e\u751f\u5bc6\u94a5\u3002PBKDF2\u7684\u4e00\u4e2a\u91cd\u8981\u7ec6\u8282\u662f\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u6307\u5b9a\u5c06\u5e94\u7528PRF\u7684\u6b21\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u51b3\u5b9a\u7b97\u6cd5\u5e94\u8be5\u82b1\u8d39\u591a\u957f\u65f6\u95f4\u3002\u8fd9\u6709\u52a9\u4e8e\u964d\u4f4e\u66b4\u529b\u653b\u51fb\u7684\u53ef\u884c\u6027\u3002\u8fed\u4ee3\u8ba1\u6570\u9ed8\u8ba4\u4e3a1\uff0c000\uff0c\u8fd9\u662f\u63a8\u8350\u7684\u6700\u5c0f\u503c\u3002\n\u8fd9\u91cc\u4f7f\u7528\u7684PRF\u662fHMAC-sha256\u3002\u5de7\u5408\u7684\u662f\uff0cHMAC\u4e5f\u7528\u4e8e\u6574\u4f53\u7b7e\u540d\u548c\u9a8c\u8bc1\u4f1a\u8bdd\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002\n\u901a\u8fc7\u8bb0\u5f55Plug.Crypto.KeyGenerator.Generate/6\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u53ea\u751f\u6210\u4e00\u6b21\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5\u3002\u6240\u6709\u540e\u7eed\u8bf7\u6c42\u90fd\u4f7f\u7528\u4e00\u4e2a\u7f13\u5b58\u503c\uff0c\u8be5\u503c\u5b58\u50a8\u5728ETS\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b(\u4f4d\u4e32\u662f\u7ed3\u679c\uff0c\u4e5f\u79f0\u4e3a\u6d3e\u751f\u7684\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5)\uff1a\niex(2)&gt\uff1b\uff1aets.lookup(Plug.Keys\uff0c{&#34\uff1b2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34\uff1b\uff0c&#34\uff1b8yQvCfAG&#34\uff1b\uff0c.(2)&gt\uff1b1000\uff0c32\uff0c\uff1asha256})[{{&#34\uff1b2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34\uff1b\uff0c&#34\uff1b8yQvCfAG&#34\uff1b\uff0c1000\uff0c32\uff0c\uff1asha256}\uff0c&lt\uff1b&lt\uff1b125\u3001248\u3001227\u300117\u3001106\u300191\u300167\u300135\u300135\u300199\u3001173\u300158\u300114\u300129\u300196\u3001107\u3001220\u3001193\u3001148\u3001164\u300144\u3001239\u300117\u300158\u3001110\u30019\u3001116\u3001230\u300191\u30019\u3001188\u300188\u3002\n\u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5\u662f\u5982\u4f55\u4ece\u5e94\u7528\u7a0b\u5e8f\u7684SECRET_KEY_BASE\u4e2d\u751f\u6210\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u7528\u4e8e\u5b9e\u9645\u7b7e\u540d\u7684\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0cHMAC\u4e0d\u4ec5\u7528\u4e8e\u751f\u6210\u7b7e\u540d\u5bc6\u94a5\uff0c\u8fd8\u7528\u4e8e\u5bf9\u4f1a\u8bddcookie\u6570\u636e\u8fdb\u884c\u7b7e\u540d\u3002\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u7b7e\u7f72\u6570\u636e\u7684\u76ee\u6807\u4e0d\u662f\u9632\u6b62\u6570\u636e\u88ab\u770b\u5230\uff0c\u800c\u662f\u9a8c\u8bc1\u6570\u636e\u7684\u771f\u5b9e\u6027\u548c\u5b8c\u6574\u6027\u3002\nHMAC\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u5b83\u53cd\u6620\u4e86\u4f5c\u4e3a\u51fd\u6570\u8f93\u5165\u63d0\u4f9b\u7684\u6d88\u606f\u548c\u5bc6\u94a5\u3002\u8be5\u6d88\u606f\u4e0eHMAC\u4e00\u8d77\u53d1\u9001\u3002\u5176\u60f3\u6cd5\u662f\u6d88\u606f\u4e0d\u80fd\u66f4\u6539\uff0c\u56e0\u4e3aHMAC\u5c06\u4e0d\u518d\u5339\u914d\u3002HMAC\u4e5f\u4e0d\u80fd\u66f4\u6539\uff0c\u56e0\u4e3a\u79d8\u5bc6\u5bc6\u94a5\u662f\u672a\u77e5\u7684(\u53d6\u51b3\u4e8e\u5e95\u5c42\u6563\u5217\u51fd\u6570\u7684\u5f3a\u5ea6)\u3002\n\u6211\u4eec\u53ef\u80fd\u4f1a\u8003\u8651\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4f7f\u7528SHA\u54c8\u5e0c\u51fd\u6570\uff0c\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u7684\u6821\u9a8c\u548c\u65b9\u6cd5\u5462\uff1f\u7b54\u6848\u662fHMAC\u4f18\u4e8eSHA-1\u548cSHA-256\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u9632\u6b62\u957f\u5ea6\u6269\u5c55\u653b\u51fb\u3002Computerphile\u6709\u4e00\u6bb5\u5173\u4e8eHMAC\u7684\u5f88\u68d2\u7684\u89c6\u9891\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6d88\u606f\u662f\u5e26\u6709CSRF\u4ee4\u724c\u7684ELEXIR\u6620\u5c04\u3002\u5bc6\u94a5\u662f\u6211\u4eec\u5728\u4e0a\u9762\u8ba8\u8bba\u7684\u6d3e\u751f\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5\uff0c\u5e95\u5c42\u6563\u5217\u51fd\u6570\u662fsha256\u3002\n\u51fd\u6570hmac_sha2_sign/3\u7531Plug.Crypto.MessageVerifier.sign/3\u8c03\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u5b83\u6765\u7406\u89e3\u4f1a\u8bddcookie\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u7684\u3002\n#`payload`\u548c`key`\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0cdigest_type\u4e3a\uff1asha256defp hmac_sha2_sign(payload\uff0ckey\uff0cdigest_type)do tected=HMAC_sha2_to_tected(Digest_Type)PLAN_TEXT=sign_input(Protected\uff0cpayload)Signature=\uff1acrypt.hmac(digest_type\uff0ckey\uff0ccommon_text)encode_Token(PLAN_TEXT\uff0cSignature)end\u3002\n\u6b64\u51fd\u6570\u7684\u7ed3\u679c\u5c06\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u7684Cookie\u7684\u503c\uff1a\n\u8bf7\u6ce8\u610f\uff0c\u6b64\u6587\u672c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728&#34\uff1b.&#34\uff1b&#39\uff1b\u4e4b\u95f4\u62c6\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\u3002\u7b2c\u4e00\u4e2a\u90e8\u5206\u662fhmac_sha2_to_tected(Digest_Type)\u7684\u7ed3\u679c\u3002\u5b83\u53ea\u662f\u5b57\u7b26\u4e32HS256&34\uff1b\u7684Base64\u7f16\u7801\u683c\u5f0f\u3002\n\u7b2c\u4e8c\u90e8\u5206\u4e5f\u662f\u7528Base64\u7f16\u7801\u7684\u3002\u5b83\u8868\u793a\u6b63\u5728\u7b7e\u540d\u7684\u6d88\u606f\uff0c\u6765\u81eaSigning_Input(\u53d7\u4fdd\u62a4\uff0c\u6709\u6548\u8d1f\u8f7d)\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89e3\u7801\uff0c\u7136\u540e\u5c06\u4e8c\u8fdb\u5236\u6587\u4ef6\u7ffb\u8bd1\u6210\u4e00\u4e2a\u9879\u6765\u67e5\u770b\u5b83\uff1a\n\u6700\u540e\u4e00\u90e8\u5206\u662f\u7b7e\u540d\uff0c\u5b83\u6765\u81ea\u4e8e\uff1acrypt.hmac(digest_type\uff0ckey\uff0cPLACE_TEXT)\u3002\u6b63\u5982\u6211\u4eec\u4ece\u51fd\u6570\u53c2\u6570\u4e2d\u770b\u5230\u7684\uff0c\u5b83\u9700\u8981\u4e00\u4e2a\u6563\u5217\u51fd\u6570(Digest_Type)\u3001\u4e00\u4e2a\u5bc6\u94a5\uff0c\u7136\u540e\u662f\u8981\u4fdd\u62a4\u7684\u6d88\u606f\u3002\u7b7e\u540d\u4e5f\u662fBase64\u7f16\u7801\u7684\uff0c\u5e76\u4e0e\u6d88\u606f\u7ed3\u5408\u5728\u4e00\u8d77\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4ee4\u724c\u88ab\u5b89\u5168\u5730\u5b58\u50a8\u5728cookie\u4e2d\uff0c\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u521b\u5efa\u7684\u7ec6\u8282\uff0c\u6700\u540e\u8981\u770b\u7684\u662f\u6570\u636e\u662f\u5982\u4f55\u9a8c\u8bc1\u7684\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u4ee4\u724c\u88ab\u653e\u7f6e\u5728HTML\u6587\u6863\u548cCookie\u4e2d\u3002\u6700\u540e\u8981\u4ecb\u7ecd\u7684\u662f\u5b83\u4eec\u662f\u5982\u4f55\u88ab\u9a8c\u8bc1\u7684\u3002\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4ecePlug.CSRFProtection\u6a21\u5757\u5f00\u59cb\u8ddf\u8e2a\u4ee3\u7801\uff0c\u770b\u770b\u4ee4\u724c\u9a8c\u8bc1\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002\ndefp VERIFIED_REQUEST\uff1f(CONN\uff0cCSRF_TOKEN\uff0cALLOW_HOSTS)\u5728@UNPROTECTED_METHANDS||VALID_CSRF_TOKEN\uff1f(CONN\uff0cCSRF_TOKEN\uff0cConn.body_params[&#34\uff1b_CSRF_TOKEN&#34\uff1b]\uff0cALLOW_HOSTS)||VALID_CSRF_TOKEN\uff1f(CONN\uff0cCSRF_TOKEN\uff0cFIRST_x_CSRF_TOKEN(CONN)\uff0cALLOW_HOSTS)||SKIP_CSRF\u3002\n\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u88ab\u53d1\u9001\u5230VALID_CSRF_TOKEN\uff1f/4\uff0c\u7136\u540e\u53d1\u9001\u5230VALID_MASTED_TOKEN\uff1f/3\u3002\u63a9\u7801\u4e0eHTML\u6b63\u6587\u4e2d\u4ee4\u724c\u5c3e\u90e8\u7684\u6a21\u5f0f\u5339\u914d\u3002\u7136\u540e\uff0cPlug.Crypto.MASKED_COMPARE/3\u80fd\u591f\u6bd4\u8f83\u4ee4\u724c\u662f\u5426\u5339\u914d\u3002\n@doc&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b@spec MASKED_COMPARE(BINARY()\uff0cBINARY()\uff0cBINARY())\uff1a\uff1aboolean()def MASKED_COMPARE(LEFT\uff0cRIGHT\uff0cMASK)\u5f53IS_BINARY(LEFT)\u548cIS_BINARY(RIGHT)AND IS_BINARY(MASK)DO BYTE_SIZE(LEFT)==BYTE_SIZE(\u53f3)AND MASKED_COMPARE(\u5de6\uff0c\u53f3\uff0c\u63a9\u7801\uff0c0)enddefp MASKED_COMPARE(&lt\uff1b&lt\uff1bx\uff0cLEFT\uff1aBINARY&GT\uff1b&GT\u3002&lt\uff1bz\uff0cMASK\uff1a\uff1aBINARY&&gt;\uff1b&&gt;\uff0cacc)do xorred=x^^^(y^^z)MASKED_COMPARE(LEFT\uff0cRIGHT\uff0cMASKED_COMPARE(LEFT\uff0cRIGHT\uff0cMASKED\uff0cACC|xorred)enddefp MASKED_COMPARE(&lt\uff1b&gt\uff1b\uff0c&lt\uff1b&lt\uff1b&gt\uff1b\uff0c&lt\uff1b&lt\uff1b&gt\uff1b\uff0cacc)\u3002\n\u4f5c\u4e3a\u603b\u7ed3\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u56de\u987e\u4e00\u4e0b\u7528\u6237\u8bbf\u95ee\u5177\u6709HTTP\u65b9\u6cd5POST&34\uff1b\u8868\u5355\u7684\u9875\u9762\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\u4e8b\u4ef6\u7684\u987a\u5e8f\u5e76\u4e0d\u610f\u5473\u7740\u5b8c\u5168\u51c6\u786e-\u6211\u5728\u8fd9\u91cc\u7684\u76ee\u6807\u662f\u52fe\u52d2\u51fa\u603b\u4f53\u4e0a\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u6982\u62ec\u6027\u56fe\u666f\u3002\n\u5f53\u6d89\u53ca\u5230\u4fdd\u62a4CSRF\u65f6\uff0cPhoneix\u4f3c\u4e4e\u4f7f\u7528\u4e86\u53cc\u91cd\u63d0\u4ea4Cookie\u7684\u65b9\u6cd5\u3002\n\u751f\u6210\u9875\u9762\u7684HTML\u6807\u8bb0\u3002\u56e0\u4e3aForm\u65b9\u6cd5\u662fPOST\uff0c\u6240\u4ee5Phoenix.HTML.form_tag\u68c0\u6d4b\u5230\u767b\u5f55\u8868\u5355\u5e94\u8be5\u5305\u62ec\u4e00\u4e2aCSRF\u4ee4\u724c\u3002\n\u8c03\u7528Plug.CSRFProtection.get_csrf_token_for(&#34\uff1b/login&#34\uff1b)\uff0c\u5b83\u4f1a\u751f\u6210\u4e00\u4e2a\u5c4f\u853d\u7684CSRF\u4ee4\u724c\u3002\u63a9\u7801\u662f\u5c06\u4ee4\u724c\u548c\u968f\u673a\u5b57\u8282\u8fdb\u884cXOR\u8fd0\u7b97\u7684\u7ed3\u679c\u3002\n\u5982\u679c\u8fdb\u7a0b\u5b57\u5178\u5c1a\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u5c06\u76f8\u540c\u7684\u4ee4\u724c\u6dfb\u52a0\u5230\u8be5\u8fdb\u7a0b\u5b57\u5178\u4e2d\u3002\n\u4ece\u5e94\u7528SECRET_KEY_BASE\u4e2d\u5bfc\u51fa\u5bc6\u94a5\uff0c\u4ee5\u4fbf\u5bf9\u5b58\u50a8\u5728Cookie\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5bc6\u7801\u7b7e\u540d\u3002\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u6570\u636e\u88ab\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u4ee5\u5916\u7684\u5176\u4ed6\u4eba\u66f4\u6539\u3002\u8fd9\u662f\u901a\u8fc7PBKDF2\u5b8c\u6210\u7684\u3002\nCookie\u4e2d\u7684\u6570\u636e(\u5373CSRF\u4ee4\u724c)\u662fBase64\u7f16\u7801\u7684\uff0c\u5e76\u4e0eHMAC-sha256\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u6570\u636e\u88ab\u7be1\u6539\u3002\n\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528HTML\u6807\u8bb0\u54cd\u5e94\u7528\u6237\u6d4f\u89c8\u5668\uff0c\u8be5\u6807\u8bb0\u5728\u8868\u5355\u6b63\u6587\u4e2d\u5305\u542b\u6ce8\u5165\u7684CSRF\u4ee4\u724c\uff0c\u5e76\u4e14\u8fd8\u4f7f\u7528Set-Cookie\u54cd\u5e94\u5934\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e0a\u8bbe\u7f6e\u5177\u6709\u76f8\u540c(\u672a\u5c4f\u853d)\u4ee4\u724c\u7684Cookie\u3002\n\u6b64\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u586b\u5199\u8868\u5355\u5e76\u63d0\u4ea4\u3002\u8fd9\u5c06\u89e6\u53d1HTTP POST\u8bf7\u6c42\uff0c\u5e76\u9a8c\u8bc1\u4ee4\u724c\u3002\n\u9a8c\u8bc1\u4f1a\u8bdd\u6570\u636e\u4ee5\u786e\u4fdd\u5176\u672a\u88ab\u4fee\u6539\u3002\u5982\u679c\u6210\u529f\uff0c\u5219\u663e\u793a/\u8fd4\u56de\u672a\u5c4f\u853d\u7684CSRF\u4ee4\u724c\u3002\n\u5c06\u6765\u81eaHTML\u6b63\u6587\u7684\u63a9\u7801\u4ee4\u724c\u4e0e\u6765\u81ea\u4f1a\u8bdd\u7684\u672a\u63a9\u7801\u4ee4\u724c\u8fdb\u884c\u6bd4\u8f83\u3002\u53ef\u4ee5\u4eceHTML\u6b63\u6587\u4e2d\u7684\u6807\u8bb0\u68c0\u7d22\u6b63\u786e\u7684\u63a9\u7801\u3002\u6bd4\u8f83\u4ee5\u9632\u6b62\u8ba1\u65f6\u653b\u51fb\u7684\u65b9\u5f0f\u8fdb\u884c\u3002\n\u5982\u679c\u4ee3\u5e01\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u5982\u679c\u4ee4\u724c\u4e0d\u5339\u914d\uff0c\u5219\u4f1a\u53d1\u751f\u9519\u8bef\u3002\n\u4ec5\u6b64\u800c\u5df2\uff01\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u7684\uff0c\u4f5c\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u6709\u5f88\u591a\u5947\u7279\u7684\u4e1c\u897f\u6b63\u5728\u8fdb\u884c\uff0c\u5c1d\u8bd5\u5e76\u7406\u89e3\u5b83\u4eec\u662f\u5982\u4f55\u7ed3\u5408\u5728\u4e00\u8d77\u7684\uff0c\u8fd9\u662f\u76f8\u5f53\u4ee4\u4eba\u60ca\u8bb6\u7684\u3002\n\u6b63\u662f\u8fd9\u7c7b\u4e1c\u897f\u8ba9\u6211\u771f\u7684\u5f88\u6b23\u8d4f\u4eba\u4eec\u4e3a\u5236\u4f5c\u548c\u7834\u574f\u8f6f\u4ef6\u6240\u505a\u7684\u6240\u6709\u5de5\u4f5c\u3002\u6211\u8ba4\u4e3a\u5076\u5c14\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0b\u6211\u4eec\u4f7f\u7528\u7684\u6280\u672f\u3001\u5e93\u548c\u6846\u67b6\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5b9e\u8df5\u3002\u8fd9\u662f\u4e00\u4ef6\u5e78\u4e8b\uff0c\u6211\u4eec\u4e0d\u5fc5\u5b8c\u5168\u7406\u89e3\u6240\u6709\u7684\u7ec6\u8282\u5c31\u80fd\u521b\u9020\u5e76\u5bcc\u6709\u6210\u6548\uff0c\u4f46\u65f6\u4e0d\u65f6\u5730\u8fd9\u6837\u505a\u80af\u5b9a\u662f\u6709\u4ef7\u503c\u7684\u3002", "note_en": "I set out to understand how CSRF tokens are generated and validated. I did it by tracing the flow of function calls through a Phoenix web applciation. It was a process that led me down some deep rabbit holes, but ultimately was a rewarding experience. Readers who are less interested in the nitty gritty details of this article can skip to the  summary section toward the bottom for a TL;DR.\n This article details the life of a CSRF token. To begin the journey we will navigate to a page with an HTML form in the body - &#34;/login&#34;, for example. We&#39;ll inspect the fields within the form to see that there&#39;s a hidden  _csrf_token field. It was put in the form automatically.\n  We can take a look at the source code for   Phoenix.HTML.form_tag/3 to see where the magic happens. This is the part of the code that adds a hidden input field to store the token. It is added to the form when the method is &#34;POST&#34;.\n Following the code further, we see that   Plug.CSRFProtection.get_csrf_token_for/1 is used to generate the token. Here&#39;s an example of what that function call looks like from an IEx interactive console.\n  Right now this just looks like a bunch of random characters (spoiler alert: it  sort of is just a bunch of random characters). Let&#39;s trace the code a little more to understand how it works, and why it looks like that.\n  It turns out that  get_csrf_token_for/1 does some branching and winds up calling   Plug.CSRFProtection.get_csrf_token/0. According to the docstring, its job is to generate a token and store it in the process dictionary (if the token does not already exist). A token is generated like this:\n  We will ignore the  mask function for a moment, and skip passed a few intermediary function calls to look at  Plug.CSRFProtection.generate_token/0, which is where we finally get down to brass tacks.\n  There&#39;s a call to the Erlang function  :crypto.strong_rand_bytes/1, which will generate N random bytes. We&#39;re not going to go any deeper to find out how this function actually works. Random numbers could probably be another article in and of itself.\n The random bytes are then Base64 encoded. I already wrote  an article about how Base64 works, so we won&#39;t dive into that either. Suffice to say, it makes sense to encode the random bytes into a format that can safely be transmitted using HTTP.\n We have now learned how the token is created: it&#39;s a Base64-encoded random string of characters. However, the fun does not stop there, because this is just an &#34;unmasked&#34; token. The unmasked token was passed to another function,  Plug.CSRFProtection.mask/1.\n  Wow, now this is getting interesting. We&#39;re going to have to dive deeper into the  Plug.Crypto module to understand what&#39;s going on here. Let&#39;s figure out:\n   To answer the first question, we will dive into the  Plug.Crypto module and look at  mask/2. We&#39;ll return to  Plug.CSRFProtection.mask/1 in a moment.\n @doc &#34;&#34;&#34;Masks the token on the left with the token on the right.Both tokens are required to have the same size.&#34;&#34;&#34;@spec mask(binary(), binary()) :: binary()def mask(left, right) do mask(left, right, &#34;&#34;)enddefp mask(&lt;&lt;x, left::binary&gt;&gt;, &lt;&lt;y, right::binary&gt;&gt;, acc) do mask(left, right, &lt;&lt;acc::binary, x ^^^ y&gt;&gt;)enddefp mask(&lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, acc) do accend\n Don&#39;t let the recursion, binary pattern matching, and  ^^^ macro scare you!  ^^^ is the  XOR operator from the Bitwise module. The  mask/2 function is recursively XORing each character from the token and the mask. There aren&#39;t many business logic situations that call for XOR, so this is not something we get to use on a daily basis.\n   Say we wanted to XOR &#34;C&#34; and &#34;d&#34; by hand. First, we find the ASCII values of the characters, so 67 and 100. Then we convert the ASCII values to binary, so  1000011 and  1100100. Next, we line up the binary values so that it&#39;s easy to compare each bit.\n The rules for XOR is that there must be one or the other but not both in order to produce a  1. For example:\n   Finally, we convert the result,  0100111, back to a Base-10 number and then find the corresponding ASCII character. &#34;&#39;&#34; is the result of &#34;C&#34; XOR &#34;d&#34;. With this knowledge, we can better understand what  Plug.Crypto.mask/2 is doing.\n   The function takes a token, then generates a mask. It&#39;s a bit confusing because the mask function itself also has a variable named  mask. Notice that  mask (the variable) is generated in the same way as the token was, so it can really just be thought of as a second token. The token and the mask variable are XORed together, and then Base64-encoded. Finally, the mask variable is also appended onto it all.\n   We now know  what the mask is, but the question of  why is all this necessary? still stands.\n  Let&#39;s see if there&#39;s any evidence about why this function exists, so We&#39;ll open up a git blame view on GitHub.\n  Ah-ha! &#34;Mask CSRF tokens to avoid breach attacks&#34; - this is a useful commit message! With  a bit of research about what a breach attack is, we can learn that it&#39;s basically when an attacker is able to send a bunch of requests, and incrementally figure out parts of the response body, even when the responses are encrpyted.\n The attacker takes advantage of the fact that the responses use compression, and that the size of the compressed responses either grows or shrinks, depending on if one small guess of a character is correct or incorrect. In  &#34;SSL, gone in 30 seconds&#34;, the security researchers who discovered this vulnerability explain and demonstrate this attack in great detail.\n They have also released  a paper which suggests attack mitigation options. This excerpt explains  Plug.CSRFProtection.mask/1&#39;s algorithm.\n The attack relies on the fact that the targeted secret remains the same between requests. While it is usually impractical to rotate secretson each request, there is a method due to Tom Berson which can synthesize thiseffect. Instead of embedding a secret S in a page, on each request, generate a new onetime pad P, and embed  P || (P \u2295 S) in the page. Here, we use  || to denote concatenation, and  \u2295 to denote XOR.\n Masking the token helps prevent an attacker from incrementally guessing characters of a response body. That&#39;s because even though the token may not change between requests, the mask will. Therefore, the token is represented differently every time in the response body. When we start looking at token validation, we will see that the XOR mask can be reversed to reveal the original token.\n We now know why the token is masked, as well as what it means to mask it. We also know how an unmasked token is created. However, it&#39;s not enough to just insert a token into the HTML document. The same token is also placed in the user&#39;s browser cookies.\n  If we have a look at the cookies in our browser, we&#39;ll see  something, but it obviously doesn&#39;t match the token we looked at from the HTML form. That&#39;s because Phoenix  cryptographically signs cookies so that they cannot be tampered with.\n Every Phoenix app has a  secret_key_base value defined in  config/config.ex, and this is what Phoenix uses as a signature. However,  secret_key_base is supposed to be a secret value that nobody knows, so it&#39;s not an option to use  secret_key_base directly. Instead, Phoneix relies on the  Plug.Crypto.KeyGenerator module. Here is an excerpt from the docs that summarizes the purpose of the  Plug.Crypto.KeyGenerator module:\n \u2026This lets applications have a single secure secret, but avoid reusing that key in multiple incompatible contexts.\n We will now take a look at how the application is able to protect the integrity and authenticity of the session cookie data, which includes the CSRF token.\n  How would it be possible to use the application&#39;s secret key in potentially insecure places?   Plug.Crypto.KeyGenerator accomplishes this by implementing an algorithm called Password-Based Key Derivation Function 2, or  PBKDF2.\n It takes a salt and a secret as its inputs. Then it repeatedly applies a pseudorandom function (PRF) to create a derived key. An important detail of PBKDF2 is that it allows the program to specify how many times the PRF will be applied. In other words, it allows the program to decide how long the algorithm should take. This helps make brute force attacks less feasible.  The iteration count defaults to 1,000 - the recommended minimum.\n The PRF used here is HMAC-sha256. Coincidentally, HMAC is also used to sign and verify the session data as a whole, which we will go over in the next section.\n By logging the result of   Plug.Crypto.KeyGenerator.generate/6 we can see that it a session signing key is only generated once. All subsequent requests use a cached value, which is stored in ETS. Here&#39;s an example of what it looks like (the bitstring is the result, A.K.A. the derived session signing key):\n iex(2)&gt; :ets.lookup(Plug.Keys, {&#34;2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34;, &#34;8yQvCfAG&#34;,...(2)&gt; 1000, 32, :sha256})[ {{&#34;2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34;, &#34;8yQvCfAG&#34;, 1000, 32, :sha256}, &lt;&lt;125, 248, 227, 17, 106, 91, 67, 35, 35, 99, 173, 58, 14, 29, 96, 107, 220, 193, 148, 164, 44, 239, 17, 58, 110, 9, 116, 230, 91, 9, 188, 88&gt;&gt;}]\n Now that we can see how a session signing key is generated from the application&#39;s  secret_key_base, we can learn how it is used to actually sign things.\n  As was mentioned above, HMAC is not only used to generate a signing key, but also used in the process of signing the session cookie data. As we will see, the goal of signing the data is not to prevent it from being seen, but rather to verify the authenticity and integrity of the data.\n   The output of HMAC is a string of bytes that reflects the message and key which was provided as input to the function. The message is sent along side the HMAC. The idea is that the message cannot be changed because the HMAC would no longer match. The HMAC cannot be changed either, because the secret key is not known (dependent on the strength of the underlying hash function).\n A question we might consider is,  Why not just use a SHA hash function directly, or some other kind of &#34;checksum&#34; approach? The answer is that HMAC is superior to sha-1, and sha-256 because it protects against  length extension attacks. Computerphile has a  great video about HMAC.\n In this example, the message is an Elixir map with the CSRF token. The key is the derived session signing key that we talked about above, and the underlying hash function is sha256.\n The function   hmac_sha2_sign/3 is called by  Plug.Crypto.MessageVerifier.sign/3, and we can look at it to understand why the session cookie looks the way it does.\n # `payload` and `key` are binaries, digest_type is :sha256defp hmac_sha2_sign(payload, key, digest_type) do protected = hmac_sha2_to_protected(digest_type) plain_text = signing_input(protected, payload) signature = :crypto.hmac(digest_type, key, plain_text) encode_token(plain_text, signature)end\n The result of this function will be what we can see in the browser as the value of the cookie:\n  Notice that this string of text can be split into three sections between the  &#34;.&#34;&#39;s. The first section is the result of  hmac_sha2_to_protected(digest_type). It&#39;s just a Base64-encoded rendition of the string, &#34;HS256&#34;.\n The second section is also encoded with Base64. It represents the message that is being signed and comes from  signing_input(protected, payload). We can have a look at it by decoding and then translating the binary to a term:\n  The last section is the signature, which comes from  :crypto.hmac(digest_type, key, plain_text). As we can see from the function arguments, it takes a hash function ( digest_type), a key, and then the message to secure. The signature is also Base64-encoded and  joined together with the message.\n Now that we can see the token is securely stored in the cookie, along with the details behind how that gets created, the last thing to look at is how the data is verified.\n  We have seen that a token is placed in the HTML document, as well as in a cookie. The last thing to cover is how they are verified. In the code below, from the   Plug.CSRFProtection module, we can start to follow the code to see how token verification happens.\n defp verified_request?(conn, csrf_token, allow_hosts) do conn.method in @unprotected_methods || valid_csrf_token?(conn, csrf_token, conn.body_params[&#34;_csrf_token&#34;], allow_hosts) || valid_csrf_token?(conn, csrf_token, first_x_csrf_token(conn), allow_hosts) || skip_csrf_protection?(conn)end\n     Both of these are sent to   valid_csrf_token?/4 and then to   valid_masked_token?/3. The mask is  pattern matched out of the tail end of the token from the HTML body.  Plug.Crypto.masked_compare/3 is then able to compare that the tokens match.\n @doc &#34;&#34;&#34;Compares the two binaries (one being masked) in constant-time to avoidtiming attacks.It is assumed the right token is masked according to the given mask.&#34;&#34;&#34;@spec masked_compare(binary(), binary(), binary()) :: boolean()def masked_compare(left, right, mask) when is_binary(left) and is_binary(right) and is_binary(mask) do byte_size(left) == byte_size(right) and masked_compare(left, right, mask, 0)enddefp masked_compare(&lt;&lt;x, left::binary&gt;&gt;, &lt;&lt;y, right::binary&gt;&gt;, &lt;&lt;z, mask::binary&gt;&gt;, acc) do xorred = x ^^^ (y ^^^ z) masked_compare(left, right, mask, acc ||| xorred)enddefp masked_compare(&lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, acc) do acc === 0end\n    To wrap things up let&#39;s do a quick recap of the whole process of when a user visits a page that has a form with HTTP method &#34;POST&#34;. The order of events isn&#39;t meant to be completely accurate - my goal here is to paint a generalized picture of what happens overall.\n Phoneix seems to use the  &#34;Double Submit Cookie&#34; approach when it comes to protecting from CSRF.\n HTML markup for the page is generated.   Phoenix.HTML.form_tag detects that the login form should include a CSRF token, since the form method is  POST.\n Plug.CSRFProtection.get_csrf_token_for(&#34;/login&#34;) is called, and it generates a masked CSRF token. The mask is the result of  XORing the token and &#34;random bytes&#34; together.\n  The same token is  added to the process dictionary if it does not already exist.\n  A key is derived from the applications  secret_key_base in order to cryptographically sign the data stored in the cookie. This is to prevent the data from being changed by someone other than the application itself. This is done with  PBKDF2.\n The data in the cookie (i.e. the CSRF token)  is Base64-encoded and joined together with the output of  a HMAC-sha256 function. This helps prevent the data from being tampered with.\n The application responds to the users browser with the HTML markup, which includes the injected CSRF token in the body of the form, and also uses the  set-cookie response header to set a cookie on the users browser with the same (unmasked) token.\n At this point the user can fill out the form and submit. This will trigger an HTTP POST request, and the tokens will be verified.\n The session data  is verified to ensure it has not been modified. If successful, the unmasked CSRF token  is revealed/returned.\n The masked token from the HTML body, along with the unmasked token from the session  are compared. The correct  mask is retreivable from the token in the HTML body. The comparison happens in a way that prevents timing attacks.\n If the tokens match, then there&#39;s not a problem. An error occurs if the tokens do not match.\n  That&#39;s about it! As we have seen, there&#39;s a lot of fancy stuff going on as part of this process, and its pretty amazinig to try and understand how it all fits together.\n It&#39;s this kind of stuff that makes me really appreciate all of the work that people are doing to both make and break software. I think it&#39;s a good practice to take a close look at the technologies, libraries, and frameworks that we use once in a while. It&#39;s a blessing that we don&#39;t have to totally understand all the details in order to create and be productive, but there is definitely value in doing so from time to time.", "posttime": "2020-05-07 19:56:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u67e5\u770b,csrf,\u51fd\u6570", "title": "\u4ed4\u7ec6\u67e5\u770bCSRF\u4ee4\u724c", "title_en": "Close Look at CSRF Tokens", "transed": 1, "url": "https://denvaar.github.io/articles/csrf_tokens_with_phoenix.html", "via": "", "real_tags": ["\u67e5\u770b", "csrf", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "11c9b04e1ecee11fac42027a651dac8e.png", "infoid": 1001053, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u89c6\u9891\u538b\u7f29\u7684\u9ed8\u8ba4\u5fc3\u7406\u56fe\u50cf\u5305\u542b\u4e0d\u9700\u8981\u7684\u89c6\u9891\u4f2a\u50cf\uff0c\u5982\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u5316\u548c\u5757\u72b6\u3002\u7136\u800c\uff0c\u8fd9\u4f4e\u4f30\u4e86\u538b\u7f29\u89c6\u9891\u5185\u5bb9\u7684\u5b9e\u9645\u590d\u6742\u6027\u3002\u7279\u522b\u662f\uff0c\u5b83\u5ffd\u7565\u4e86\u4e00\u4e2a\u79f0\u4e3a\u5e27\u95f4\u7684\u6709\u8da3\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u6d89\u53ca\u5173\u952e\u5e27\u548c\u589e\u91cf\u5e27\uff0c\u4ee5\u4fbf\u4ee5\u4e00\u79cd\u610f\u5728\u4e0d\u88ab\u6ce8\u610f\u7684\u65b9\u5f0f\u667a\u80fd\u5730\u538b\u7f29\u5185\u5bb9\u3002\n\u672c\u6587\u8be6\u7ec6\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u540c\u65f6\u8fd8\u7ed9\u51fa\u4e86\u6700\u4f73\u5b9e\u8df5\u548c\u7406\u60f3\u7684\u7f16\u7801\u5668\u8bbe\u7f6e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u5e94\u7528\u4e8eIBM Cloud Video\u7684\u5b9e\u51b5\u6d41\u3002\u8be5\u7279\u5b9a\u5efa\u8bae\u4e2d\u7684\u5927\u90e8\u5206\u6d89\u53ca\u7531\u4e8e\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u800c\u5bfc\u81f4\u7684\u6d41\u4f20\u8f93\u3002\u8981\u4e86\u89e3\u6709\u5173\u8be5\u6280\u672f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\u6211\u4eec\u7684\u300a\u81ea\u9002\u5e94\u6d41\u5982\u4f55\u89e3\u51b3\u67e5\u770b\u5668\u5e26\u5bbd\u95ee\u9898\u300b\u767d\u76ae\u4e66\u3002\n\u6d41\u5a92\u4f53\u6280\u672f\u6709\u5f88\u591a\u672f\u8bed\u548c\u65b9\u9762\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\u968f\u7740\u4e00\u4e9b\u4eba\u6210\u4e3a\u4e00\u540d\u6210\u719f\u7684\u64ad\u97f3\u5458\uff0c\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\u5143\u7d20\u4ee5\u4e86\u89e3\u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u6d41\u7a0b\u4ee5\u53ca\u6700\u4f73\u8bbe\u7f6e\u662f\u503c\u5f97\u7684\u3002\n\u4f8b\u5982\uff0c\u5173\u952e\u5e27\u662f\u4e00\u4e9b\u5e7f\u64ad\u516c\u53f8\u4ee5\u524d\u63d0\u5230\u8fc7\u7684\u4e1c\u897f\uff0c\u6216\u8005\u5728Wirecast\u8fd9\u6837\u7684\u7f16\u7801\u5668\u4e2d\u770b\u5230\u8fc7\u8bbe\u7f6e\uff0c\u4f46\u6ca1\u6709\u5b8c\u5168\u610f\u8bc6\u5230\u5b83\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u8fc7\u7a0b\u5bf9\u6d41\u5a92\u4f53\u6709\u591a\u5927\u597d\u5904\u3002\u5173\u952e\u5e27\u662f\u4e00\u4e2a\u91cd\u8981\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u662f\u5e2e\u52a9\u964d\u4f4e\u89c6\u9891\u6240\u9700\u5e26\u5bbd\u7684\u8f83\u957f\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\u3002\u8981\u7406\u89e3\u8fd9\u79cd\u5173\u7cfb\uff0c\u9996\u5148\u9700\u8981\u7406\u89e3\u89c6\u9891\u5e27\u3002\n\u4ece\u9ad8\u5c42\u6b21\u5f00\u59cb\uff0c\u5f88\u53ef\u80fd\u4f1a\u610f\u8bc6\u5230\u89c6\u9891\u5185\u5bb9\u662f\u7531\u4e00\u7cfb\u5217\u5e27\u7ec4\u6210\u7684\u3002\u901a\u5e38\u8868\u793a\u4e3aFPS(\u6bcf\u79d2\u5e27\u6570)\uff0c\u6bcf\u5e27\u90fd\u662f\u9759\u6b62\u56fe\u50cf\uff0c\u5f53\u6309\u987a\u5e8f\u64ad\u653e\u65f6\u4f1a\u521b\u5efa\u8fd0\u52a8\u56fe\u50cf\u3002\u56e0\u6b64\uff0c\u4f7f\u7528FPS\u4e3a30\u521b\u5efa\u7684\u5185\u5bb9\u610f\u5473\u7740\u6bcf\u79d2\u949f\u5c06\u64ad\u653e30\u4e2a\u201c\u9759\u6b62\u56fe\u50cf\u201d\u3002\n\u5728\u4e00\u6bb5\u5e73\u5747\u89c6\u9891\u4e2d\uff0c\u5982\u679c\u6709\u4eba\u62cd\u644490\u4e2a\u8fde\u7eed\u7684\u5e27\u5e76\u5c06\u5176\u5c55\u5f00\uff0c\u4ed6\u4eec\u5c06\u770b\u5230\u8bb8\u591a\u51e0\u4e4e\u76f8\u540c\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4eba\u7ad9\u5728\u4e00\u682a\u9759\u6b62\u7684\u690d\u7269\u65c1\u8fb9\u8bf4\u8bdd\uff0c\u90a3\u4e48\u4e0e\u8be5\u690d\u7269\u6709\u5173\u7684\u4fe1\u606f\u5c31\u4e0d\u592a\u53ef\u80fd\u6539\u53d8\u3002\u7ed3\u679c\uff0c\u8fd9\u5c31\u6d6a\u8d39\u4e86\u5927\u91cf\u5e26\u5bbd\uff0c\u4ec5\u4ec5\u662f\u7528\u6765\u4f20\u8fbe\u67d0\u4e9b\u4e1c\u897f\u6ca1\u6709\u6539\u53d8\u7684\u4fe1\u606f\u3002\n\u56e0\u6b64\uff0c\u5f53\u5bfb\u627e\u6709\u6548\u7684\u65b9\u6cd5\u6765\u538b\u7f29\u89c6\u9891\u5185\u5bb9\u65f6\uff0c\u5e27\u7ba1\u7406\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u539f\u5219\u3002\u56e0\u6b64\uff0c\u5982\u679c\u793a\u4f8b\u4e2d\u7684\u690d\u7269\u4e0d\u4f1a\u6539\u53d8\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5728\u540e\u7eed\u7684\u4e00\u4e9b\u5e27\u4e2d\u7ee7\u7eed\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u6765\u51cf\u5c11\u7a7a\u95f4\u5462\uff1f\n\u8fd9\u79cd\u8ba4\u8bc6\u50ac\u751f\u4e86\u5e27\u95f4\u9884\u6d4b\u7684\u60f3\u6cd5\u3002\u8fd9\u662f\u4e00\u79cd\u89c6\u9891\u538b\u7f29\u6280\u672f\uff0c\u5b83\u5c06\u5e27\u5212\u5206\u4e3a\u5b8f\u5757\uff0c\u7136\u540e\u67e5\u627e\u5757\u4e4b\u95f4\u7684\u5197\u4f59\u3002\u6b64\u8fc7\u7a0b\u901a\u8fc7\u4f7f\u7528\u5173\u952e\u5e27(\u4e5f\u79f0\u4e3aI\u5e27\u6216\u5e27\u5185\u5e27)\u548c\u589e\u91cf\u5e27\u6765\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u5e27\u4ec5\u5b58\u50a8\u56fe\u50cf\u4e2d\u7684\u66f4\u6539\u4ee5\u51cf\u5c11\u5197\u4f59\u4fe1\u606f\u3002\u8fd9\u4e9b\u5e27\u96c6\u5408\u901a\u5e38\u7531\u7f29\u5199\u4e3aGOP\u7684\u201c\u56fe\u7247\u7ec4\u201d\u7684\u76f8\u5f53\u975e\u6280\u672f\u6027\u7684\u540d\u79f0\u6765\u6307\u4ee3\u3002\u7528\u4e8e\u7f16\u7801\u6216\u89e3\u7801\u6570\u5b57\u6570\u636e\u6d41\u7684\u89c6\u9891\u7f16\u89e3\u7801\u5668\u90fd\u5177\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u5e27\u95f4\u7ba1\u7406\u3002H.264\u3001MPEG-2\u548cMPEG-4\u90fd\u4f7f\u7528\u4e09\u5e27\u65b9\u6cd5\uff0c\u5305\u62ec\uff1a\u5173\u952e\u5e27\u3001p\u5e27\u548cb\u5e27\u3002\n\u5173\u952e\u5e27(I\u5e27)\u662f\u89c6\u9891\u4e2d\u56fe\u50cf\u7684\u5b8c\u6574\u5e27\u3002\u540e\u7eed\u5e27(\u589e\u91cf\u5e27)\u4ec5\u5305\u542b\u5df2\u66f4\u6539\u7684\u4fe1\u606f\u3002\u5173\u952e\u5e27\u5c06\u5728\u4e00\u4e2a\u6d41\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5b83\u662f\u5982\u4f55\u521b\u5efa\u7684\uff0c\u6216\u8005\u5b83\u662f\u5982\u4f55\u6d41\u5f0f\u4f20\u8f93\u7684\u3002\n\u5982\u679c\u6709\u4eba\u7528\u8c37\u6b4c\u641c\u7d22\u201c\u5173\u952e\u5e27\u201d\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u4f1a\u627e\u5230\u4e00\u4e9b\u4e0e\u52a8\u753b\u548c\u89c6\u9891\u7f16\u8f91\u76f8\u5173\u7684\u7ed3\u679c\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5173\u952e\u5e27\u4e00\u8bcd\u6765\u8bf4\u660e\u5b83\u4e0e\u89c6\u9891\u538b\u7f29\u7684\u5173\u7cfb\u53ca\u5176\u4e0e\u589e\u91cf\u5e27\u7684\u5173\u7cfb\u3002\n\u4e5f\u79f0\u4e3a\u9884\u6d4b\u5e27\u6216\u9884\u6d4b\u5e27\uff0cp\u5e27\u8ddf\u968f\u53e6\u4e00\u5e27\uff0c\u5e76\u4e14\u5728\u89c6\u9891\u4e2d\u4ec5\u5305\u542b\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u5b83\u88ab\u5f52\u7c7b\u4e3a\u589e\u91cf\u6846\u67b6\u3002P-\u5e27\u5411\u540e\u67e5\u770b\u524d\u4e00\u4e2aP-\u5e27\u6216\u5173\u952e\u5e27(I-\u5e27)\u4ee5\u67e5\u627e\u5197\u4f59\u3002\u5728P\u5e27\u4e2d\u5448\u73b0\u7684\u56fe\u50cf\u91cf\u53d6\u51b3\u4e8e\u5e27\u4e4b\u95f4\u5305\u542b\u7684\u65b0\u4fe1\u606f\u91cf\u3002\n\u4f8b\u5982\uff0c\u67d0\u4eba\u5728\u9759\u6001\u80cc\u666f\u524d\u5bf9\u7740\u6444\u50cf\u673a\u8bb2\u8bdd\uff0c\u53ef\u80fd\u53ea\u5305\u542b\u4e0e\u5176\u8fd0\u52a8\u76f8\u5173\u7684\u4fe1\u606f\u3002\u7136\u800c\uff0c\u5f53\u6444\u50cf\u673a\u6447\u6444\u65f6\uff0c\u67d0\u4eba\u5728\u7530\u91ce\u4e2d\u5954\u8dd1\u65f6\uff0c\u6bcf\u4e2ap\u5e27\u90fd\u4f1a\u6709\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u4ee5\u5339\u914d\u4ed6\u4eec\u7684\u8fd0\u52a8\u548c\u53d8\u5316\u7684\u80cc\u666f\u3002\n\u4e5f\u79f0\u4e3a\u53cc\u5411\u9884\u6d4b\u5e27\uff0cb\u5e27\u8ddf\u968f\u53e6\u4e00\u5e27\uff0c\u5e76\u4e14\u5728\u89c6\u9891\u4e2d\u4ec5\u5305\u542b\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u3002\u5305\u542b\u5728B\u5e27\u4e2d\u7684\u56fe\u50cf\u91cf\u53d6\u51b3\u4e8e\u5e27\u4e4b\u95f4\u7684\u65b0\u4fe1\u606f\u91cf\u3002\n\u4e0eP\u5e27\u4e0d\u540c\uff0cB\u5e27\u53ef\u4ee5\u5411\u540e\u6216\u5411\u540e\u67e5\u770b\u524d\u9762\u6216\u540e\u9762\u7684P\u5e27\u6216\u5173\u952e\u5e27(I\u5e27)\u4ee5\u67e5\u627e\u5197\u4f59\u3002\u8fd9\u4f7f\u5f97B\u5e27\u6bd4P\u5e27\u66f4\u6709\u6548\uff0c\u56e0\u4e3a\u5b83\u4eec\u66f4\u6709\u53ef\u80fd\u627e\u5230\u5197\u4f59\u3002\u4f46\u662f\uff0c\u5f53\u7f16\u7801\u5668\u5185\u90e8\u7684\u7f16\u7801\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u4e3a\u57fa\u7ebf\u65f6\uff0c\u4e0d\u4f7f\u7528b\u5e27\u3002\u8fd9\u610f\u5473\u7740\u7f16\u7801\u5668\u5fc5\u987b\u8bbe\u7f6e\u5728\u57fa\u7ebf\u4e4b\u4e0a\u7684\u7f16\u7801\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982\u201cMain\u201d\u6216\u201cHIGH\u201d\u3002\n\u5173\u4e8e\u7528\u4e8e\u5b9e\u51b5\u6d41\u7684\u89c6\u9891\u538b\u7f29\uff0c\u5728\u7f16\u7801\u5668\u5185\u90e8\u8bbe\u7f6e\u5173\u952e\u5e27\u3002\u8fd9\u662f\u7531\u7f16\u7801\u5668\u5185\u90e8\u6709\u65f6\u79f0\u4e3a\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u7684\u9009\u9879\u914d\u7f6e\u7684\u3002\n\u5173\u952e\u5e27\u95f4\u9694\u63a7\u5236\u5728\u89c6\u9891\u4e2d\u521b\u5efa\u5173\u952e\u5e27(I\u5e27)\u7684\u9891\u7387\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5173\u952e\u5e27\u95f4\u9694\u8d8a\u5927\uff0c\u5e94\u7528\u4e8e\u5185\u5bb9\u7684\u538b\u7f29\u7a0b\u5ea6\u8d8a\u9ad8\uff0c\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u8d28\u91cf\u4f1a\u660e\u663e\u964d\u4f4e\u3002\u6709\u5173\u5173\u952e\u5e27\u95f4\u9694\u5982\u4f55\u5de5\u4f5c\u7684\u793a\u4f8b\uff0c\u5982\u679c\u5c06\u95f4\u9694\u8bbe\u7f6e\u4e3a\u6bcf2\u79d2\u4e00\u6b21\uff0c\u5e76\u4e14\u5e27\u901f\u7387\u4e3a\u6bcf\u79d230\u5e27\uff0c\u8fd9\u5c06\u610f\u5473\u7740\u5927\u7ea6\u6bcf60\u5e27\u751f\u6210\u4e00\u4e2a\u5173\u952e\u5e27\u3002\n\u672f\u8bed\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u4e0d\u662f\u901a\u7528\u7684\uff0c\u5927\u591a\u6570\u7f16\u7801\u5668\u5bf9\u6b64\u90fd\u6709\u81ea\u5df1\u7684\u672f\u8bed\u3002\u4f8b\u5982\uff0cAdobe Flash Media Live\u7f16\u7801\u5668(FMLE)\u548cvMix\u4f7f\u7528\u672f\u8bed\u201c\u5173\u952e\u5e27\u9891\u7387\u201d\u6765\u63cf\u8ff0\u6b64\u8fc7\u7a0b\u3002\u5176\u4ed6\u7a0b\u5e8f\u548c\u670d\u52a1\u53ef\u80fd\u5c06\u8be5\u95f4\u9694\u79f0\u4e3a\u201cGOP\u5927\u5c0f\u201d\u6216\u201cGOP\u957f\u5ea6\u201d\uff0c\u56de\u5230\u201c\u56fe\u7247\u7ec4\u201d\u7684\u7f29\u5199\u3002\n\u5bf9\u4e8eFMLE\uff0c\u901a\u8fc7\u5355\u51fbFormat(\u683c\u5f0f)\u53f3\u4fa7\u7684\u6273\u624b\u56fe\u6807\uff0c\u53ef\u4ee5\u5728\u8f6f\u4ef6\u7f16\u7801\u5668\u4e2d\u627e\u5230\u6b64\u9009\u9879\uff0c\u8868\u793a\u4e3a\u201cKeyframe Frequency\u201d(\u5173\u952e\u5e27\u9891\u7387)\u3002\n\u5728Wirecast\u4e2d\uff0c\u8fd9\u662f\u4ece\u7f16\u7801\u5668\u9884\u8bbe\u83dc\u5355\u4e2d\u8bbe\u7f6e\u7684\uff0c\u8be5\u9009\u9879\u79f0\u4e3a\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u3002\u6709\u7ebf\u5e7f\u64ad\u5219\u4e0d\u540c\uff0c\u56e0\u4e3a\u95f4\u9694\u5b9e\u9645\u4e0a\u662f\u4ee5\u5e27\u8868\u793a\u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e30 FPS\u7684\u5e7f\u64ad\uff0c\u5c06\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u8bbe\u7f6e\u4e3a60\u5e27\u5c06\u5927\u81f4\u5f97\u52302\u79d2\u7684\u5173\u952e\u5e27\u95f4\u9694\uff0c\u56e0\u4e3a\u60a8\u6bcf\u79d2\u670930\u5e27\u3002\n\u5bf9\u4e8evMix\u7f16\u7801\u5668\uff0c\u9700\u8981\u9996\u5148\u5355\u51fb\u6d41\u5f0f\u5904\u7406\u9644\u8fd1\u7684\u9f7f\u8f6e\u56fe\u6807\uff0c\u8fd9\u5c06\u6253\u5f00\u6d41\u5f0f\u5904\u7406\u8bbe\u7f6e\u3002\u5728\u8fd9\u91cc\u7684\u8d28\u91cf\u9009\u9879\u9644\u8fd1\u662f\u53e6\u4e00\u4e2a\u9f7f\u8f6e\u56fe\u6807\uff0c\u5355\u51fb\u6b64\u56fe\u6807\u5c06\u6253\u5f00\u4e00\u4e2a\u83dc\u5355\uff0c\u8be5\u83dc\u5355\u53ef\u4ee5\u4fee\u6539\u201c\u5173\u952e\u5e27\u9891\u7387\u201d\u3002\n\u5728\u5f00\u653e\u5f0f\u5e7f\u64ad\u8f6f\u4ef6(OBS)\u4e2d\uff0c\u5bf9\u4e8e\u7248\u672c0.55b\u4e4b\u540e\u7684\u7248\u672c\uff0c\u53ef\u4ee5\u5728\u9ad8\u7ea7\u4e0b\u7684\u8bbe\u7f6e\u533a\u57df\u4e2d\u8bbe\u7f6e\u5173\u952e\u5e27\u95f4\u9694\u3002\u5bf9\u4e8ev0.542b\u4e4b\u524d\u7684OBS\u7248\u672c\uff0c\u5982\u4f55\u4fee\u6539\u5173\u952e\u5e27\u95f4\u9694\u5e76\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u662f\u8bbe\u7f6e\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u5728\u90a3\u91cc\uff0c\u8f6c\u5230\u9ad8\u7ea7\uff0c\u7136\u540e\u9009\u62e9\u201c\u81ea\u5b9a\u4e49X264\u7f16\u7801\u5668\u8bbe\u7f6e\u201d\u3002\u5728\u8be5\u5b57\u6bb5\u4e2d\uff0c\u9700\u8981\u8f93\u5165\u4ee5\u4e0b\u5b57\u7b26\u4e32\uff1a\u201ckeyint=XX\u201d\uff0cXX\u662f\u89e6\u53d1\u5173\u952e\u5e27\u4e4b\u524d\u7684\u5e27\u6570\u3002\u4e0eWirecast\u7c7b\u4f3c\uff0c\u5982\u679c\u5e0c\u671b\u5173\u952e\u5e27\u95f4\u9694\u4e3a2\u79d2\uff0c\u800cFPS\u4e3a30\u79d2\uff0c\u8bf7\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a\u201ckeyint=60\u201d\u3002\n\u5bf9\u4e8eXSplit\uff0c\u5173\u952e\u5e27\u95f4\u9694\u662f\u901a\u9053\u5c5e\u6027\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u5728\u89c6\u9891\u7f16\u7801\u533a\u57df\u4e0b\uff0c\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5217\u8868\uff0c\u4e0a\u9762\u5199\u7740\u201c\u5173\u952e\u5e27\u95f4\u9694(\u79d2)\u201d\u3002\u6700\u53f3\u8fb9\u662f\u9f7f\u8f6e\u56fe\u6807\u3002\u5355\u51fb\u9f7f\u8f6e\u5c06\u542f\u52a8\u201cVideo Encoding Setup\u201d(\u89c6\u9891\u7f16\u7801\u8bbe\u7f6e)\u5f39\u51fa\u7a97\u53e3\u3002\u8fd9\u5c06\u5141\u8bb8\u7528\u6237\u4ee5\u79d2\u4e3a\u5355\u4f4d\u6307\u5b9a\u5173\u952e\u5e27\u95f4\u9694\u3002\n\u6b64\u89e3\u91ca\u4e2d\u7684\u91cc\u7a0b\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u4e3a\u7f16\u7801\u5668\u7ba1\u7406\u6bd4\u7279\u7387\u548c\u5173\u952e\u5e27\u7684\u65b9\u5f0f\u4e0d\u540c\u3002\u4f7f\u7528\u50cfWirecast\u8fd9\u6837\u7684\u7f16\u7801\u5668\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u4e0e\u5e7f\u64ad\u5728\u79fb\u52a8\u80cc\u666f\u4e0b\u4e0a\u4e0b\u8df3\u8dc3\u7684\u4eba\u76f8\u6bd4\uff0c\u5e7f\u64ad\u5728\u9759\u6b62\u80cc\u666f\u4e0b\u8bb2\u8bdd\u7684\u4eba\u5177\u6709\u201c\u66f4\u9ad8\u7684\u8d28\u91cf\u201d\u3002\u5f53\u5728\u5b83\u4eec\u4e4b\u95f4\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7684\u5e73\u5747\u6bd4\u7279\u7387\u548c\u5173\u952e\u5e27\u95f4\u9694\u65f6\uff0c\u8fd9\u53ef\u4ee5\u88ab\u91cd\u73b0\u3002\u5176\u539f\u56e0\u90e8\u5206\u662f\u7531\u4e8e\u589e\u91cf\u5e27\u5728\u8df3\u8dc3\u793a\u4f8b\u4e2d\u6709\u5927\u91cf\u4fe1\u606f\u8981\u5171\u4eab\u7684\u4e8b\u5b9e\u3002\u5197\u4f59\u975e\u5e38\u5c11\uff0c\u8fd9\u610f\u5473\u7740\u9700\u8981\u5728\u6bcf\u4e2a\u589e\u91cf\u5e27\u4e0a\u4f20\u8f93\u7684\u6570\u636e\u8981\u591a\u5f97\u591a\u3002\n\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u50cfWirecast\u8fd9\u6837\u7684\u7f16\u7801\u5668\uff0c\u5b83\u4f1a\u5c3d\u6700\u5927\u52aa\u529b\u4f7f\u7801\u6d41\u4fdd\u6301\u5728\u9009\u62e9\u7684\u5e73\u5747\u6bd4\u7279\u7387\u9644\u8fd1\u3002\u56e0\u6b64\uff0c\u589e\u91cf\u5e27\u4e2d\u5305\u542b\u7684\u9644\u52a0\u4fe1\u606f\u6240\u9700\u7684\u589e\u52a0\u7684\u5e26\u5bbd\u5bfc\u81f4\u8d28\u91cf\u964d\u4f4e\uff0c\u4ee5\u8bd5\u56fe\u5c06\u5e73\u5747\u6bd4\u7279\u7387\u4fdd\u6301\u5728\u76f8\u540c\u6c34\u5e73\u9644\u8fd1\u3002\n\u4ece\u6765\u6ca1\u6709\u4e00\u4e2a\u884c\u4e1a\u6807\u51c6\uff0c\u5c3d\u7ba110\u79d2\u7ecf\u5e38\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5173\u952e\u5e27\u95f4\u9694\uff0c\u5c3d\u7ba1\u4e0d\u518d\u5efa\u8bae\u6d41\u5a92\u4f53\u4f7f\u752810\u79d2\u3002\u5efa\u8bae\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u5bf9\u4e8e\u6807\u51c6\u768429.97FPS\u6587\u4ef6\uff0c\u751f\u6210\u7684\u5185\u5bb9\u5177\u6709\u8db3\u591f\u7684\u54cd\u5e94\u6027\uff0c\u53ef\u4ee5\u652f\u6301\u4ece\u9884\u89c8\u6ed1\u5757\u8f7b\u677e\u5bfc\u822a\u3002\u4e3a\u4e86\u89e3\u91ca\u66f4\u591a\uff0c\u64ad\u653e\u5668\u4e0d\u80fd\u5728p\u5e27\u6216b\u5e27\u4e0a\u5f00\u59cb\u64ad\u653e\u3002\u56e0\u6b64\uff0c\u4f7f\u752810\u79d2\u7684\u793a\u4f8b\uff0c\u5982\u679c\u6709\u4eba\u8bd5\u56fe\u5bfc\u822a\u5230\u63d0\u8981\u4e2d\u76845\u79d2\u7684\u70b9\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u5c065\u79d2\u79fb\u56de\u6700\u8fd1\u7684\u5173\u952e\u5e27\u5e76\u5f00\u59cb\u64ad\u653e\u3002\u8fd9\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u5e26\u5bbd\u6d88\u8017\u7684\u5f88\u597d\u7684\u6743\u8861\uff0c\u5c3d\u7ba1\u4f5c\u4e3a\u53c2\u8003\uff0cDVD\u9009\u62e9\u4f7f\u7528\u6bd410\u79d2\u5c0f\u5f97\u591a\u7684\u4e1c\u897f\u3002\n\u7136\u800c\uff0c\u5bf9\u4e8e\u76f4\u64ad\u6765\u8bf4\uff0c\u63a8\u8350\u7ea7\u522b\u5374\u5927\u5e45\u4e0b\u964d\u3002\u5176\u539f\u56e0\u662f\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u6d41\u7684\u51fa\u73b0\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089\u81ea\u9002\u5e94\u6d41\u5f0f\u4f20\u8f93\u7684\u4eba\uff0c\u8be5\u6280\u672f\u4f7f\u89c6\u9891\u64ad\u653e\u5668\u80fd\u591f\u57fa\u4e8e\u8bd5\u56fe\u89c2\u770b\u7684\u89c2\u4f17\u5728\u53ef\u7528\u5206\u8fa8\u7387\u548c/\u6216\u6bd4\u7279\u7387\u4e4b\u95f4\u52a8\u6001\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u4e0b\u8f7d\u901f\u5ea6\u8f83\u6162\u7684\u7528\u6237\u5c06\u83b7\u5f97\u8f83\u4f4e\u7684\u6bd4\u7279\u7387\u7248\u672c(\u5982\u679c\u6709)\u3002\u5176\u4ed6\u6807\u51c6\uff0c\u5982\u56de\u653e\u7a97\u53e3\u5927\u5c0f\uff0c\u4e5f\u5c06\u5f71\u54cd\u7ed9\u5b9a\u7684\u6bd4\u7279\u7387\u3002\n\u7136\u800c\uff0c\u771f\u6b63\u7684\u81ea\u9002\u5e94\u6d41\u5a92\u4f53\u4e0d\u4ec5\u5728\u89c6\u9891\u5185\u5bb9\u6700\u521d\u52a0\u8f7d\u65f6\u8fdb\u884c\u8fd9\u79cd\u68c0\u67e5\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u6839\u636e\u89c2\u4f17\u7aef\u7684\u53d8\u5316\u6765\u6539\u53d8\u6bd4\u7279\u7387\u3002\u4f8b\u5982\uff0c\u5982\u679c\u89c2\u4f17\u5728\u4ed6\u4eec\u7684\u624b\u673a\u4e0a\u79fb\u52a8\u5230Wi-Fi\u7f51\u7edc\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u4ed6\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528\u6b63\u5e38\u7684\u8702\u7a9d\u670d\u52a1\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0b\u8f7d\u901f\u5ea6\u53d8\u6162\u3002\u56e0\u6b64\uff0c\u89c2\u4f17\u53ef\u80fd\u8bd5\u56fe\u89c2\u770b\u6bd4\u7279\u7387\u76f8\u5bf9\u4e8e\u5176\u4e0b\u8f7d\u901f\u5ea6\u8fc7\u9ad8\u7684\u5185\u5bb9\u3002\u81ea\u9002\u5e94\u6d41\u4f20\u8f93\u6280\u672f\u5e94\u8be5\u610f\u8bc6\u5230\u8fd9\u79cd\u5dee\u5f02\uff0c\u5e76\u4f7f\u5176\u5207\u6362\u5230\u4e0d\u540c\u7684\u6bd4\u7279\u7387\u3002\n\u5173\u952e\u5e27\u95f4\u9694\u5728\u6b64\u751f\u6548\uff0c\u56e0\u4e3a\u5207\u6362\u53d1\u751f\u5728\u4e0b\u4e00\u4e2a\u5173\u952e\u5e27\u671f\u95f4\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6709\u4eba\u4ee510\u79d2\u7684\u95f4\u9694\u8fdb\u884c\u5e7f\u64ad\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u80fd\u9700\u8981\u957f\u8fbe10\u79d2\u7684\u65f6\u95f4\u624d\u80fd\u6539\u53d8\u6bd4\u7279\u7387\u548c\u5206\u8fa8\u7387\u3002\u8fd9\u6bb5\u65f6\u95f4\u610f\u5473\u7740\u5185\u5bb9\u53ef\u80fd\u4f1a\u5728\u66f4\u6539\u53d1\u751f\u4e4b\u524d\u7f13\u51b2\u5728\u89c2\u4f17\u4e00\u65b9\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u89c2\u4f17\u653e\u5f03\u3002\n\u56e0\u6b64\uff0c\u5efa\u8bae\u5c06\u76f4\u64ad\u7684\u5173\u952e\u5e27\u95f4\u9694\u8bbe\u7f6e\u4e3a2\u79d2\u3002\u8fd9\u4ea7\u751f\u4e86\u8fd9\u6837\u7684\u7ed3\u679c\uff0c\u5176\u4e2d\u89c6\u9891\u8f68\u9053\u53ef\u4ee5\u7ecf\u5e38\u5728\u7528\u6237\u53ef\u80fd\u7531\u4e8e\u5176\u4e0b\u8f7d\u901f\u5ea6\u7684\u964d\u4f4e\u800c\u7ecf\u5386\u7f13\u51b2\u4e4b\u524d\u6709\u6548\u5730\u6539\u53d8\u6bd4\u7279\u7387\u3002\n\u6211\u4eec\u5728\u8fd9\u91cc\u5faa\u73af\uff0c\u4f46\u5728\u8ba8\u8bba\u4ec0\u4e48\u662fIDR\u5e27\u6216\u5373\u65f6\u89e3\u7801\u5237\u65b0\u5e27\u4e4b\u524d\uff0c\u4e86\u89e3p\u5e27\u3001b\u5e27\u5e76\u5b66\u4e60\u81ea\u9002\u5e94\u6d41\u4f20\u8f93\u901f\u6210\u8bfe\u7a0b\u662f\u503c\u5f97\u7684\u3002\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u5173\u952e\u5e27\uff0c\u6bcf\u4e2a\u5173\u952e\u5e27\u53ef\u4ee5\u662f\u57fa\u4e8eIDR\u7684\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u662f\u57fa\u4e8eIDR\u7684\u3002\u4e24\u8005\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u57fa\u4e8eIDR\u7684\u5173\u952e\u5e27\u8d77\u5230\u4e86\u786c\u505c\u6b62\u7684\u4f5c\u7528\u3002IDR\u5e27\u9632\u6b62P\u5e27\u548cB\u5e27\u5f15\u7528\u53d1\u751f\u5728IDR\u5e27\u4e4b\u524d\u7684\u5e27\u3002\u975eIDR\u5173\u952e\u5e27\u5c06\u5141\u8bb8\u8fd9\u4e9b\u5e27\u66f4\u8fdc\u5730\u5411\u540e\u67e5\u627e\u5197\u4f59\u3002\n\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u975eIDR\u5173\u952e\u5e27\u542c\u8d77\u6765\u5f88\u7406\u60f3\uff1a\u5b83\u5141\u8bb8\u67e5\u770b\u66f4\u5927\u7684\u5e27\u6837\u672c\u4ee5\u8fdb\u884c\u5197\u4f59\uff0c\u4ece\u800c\u6781\u5927\u5730\u51cf\u5c0f\u4e86\u6587\u4ef6\u5927\u5c0f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5bfc\u822a\u51fa\u73b0\u4e86\u5f88\u591a\u95ee\u9898\uff0c\u800c\u4e14\u8be5\u529f\u80fd\u5728\u81ea\u9002\u5e94\u6d41\u5a92\u4f53\u4e2d\u4e0d\u80fd\u5f88\u597d\u5730\u53d1\u6325\u4f5c\u7528\u3002\u4ee5\u5bfc\u822a\u4e3a\u4f8b\uff0c\u5047\u8bbe\u67d0\u4eba\u5f00\u59cb\u89c2\u770b6\u5206\u949f\u540e\u7684\u4e00\u6761\u6d41\u3002\u8fd9\u5c06\u5bfc\u81f4\u95ee\u9898\uff0c\u56e0\u4e3aP\u5e27\u548cB\u5e27\u53ef\u80fd\u5f15\u7528\u7684\u4fe1\u606f\u4ece\u672a\u88ab\u67e5\u770b\u5668\u5b9e\u9645\u8bbf\u95ee\u8fc7\u3002\u5bf9\u4e8e\u81ea\u9002\u5e94\u6d41\u5f0f\u4f20\u8f93\uff0c\u5982\u679c\u66f4\u6539\u6bd4\u7279\u7387\u548c\u5206\u8fa8\u7387\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\u8fd9\u662f\u56e0\u4e3a\u65b0\u9009\u62e9\u53ef\u80fd\u5f15\u7528\u67e5\u770b\u5668\u5728\u4e0d\u540c\u8d28\u91cf\u8bbe\u7f6e\u4e0b\u89c2\u770b\u7684\u4e0d\u518d\u5e73\u884c\u7684\u6570\u636e\u3002\u51fa\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u59cb\u7ec8\u5efa\u8bae\u5c06\u5173\u952e\u5e27\u8bbe\u7f6e\u4e3a\u57fa\u4e8eIDR\u3002\n\u901a\u5e38\uff0c\u7f16\u7801\u5668\u8981\u4e48\u63d0\u4f9b\u6253\u5f00\u6216\u5173\u95ed\u57fa\u4e8eIDR\u7684\u5173\u952e\u5e27\u7684\u9009\u9879\uff0c\u8981\u4e48\u6839\u672c\u4e0d\u63d0\u4f9b\u8be5\u9009\u9879\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u63d0\u4f9b\u8be5\u9009\u9879\u7684\u7f16\u7801\u5668\uff0c\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u662f\u8fd9\u6837\u7684\uff0c\u56e0\u4e3a\u7f16\u7801\u5668\u88ab\u8bbe\u7f6e\u4e3a\u53ea\u4f7f\u7528IDR\u5e27\u3002\n\u539f\u5219\u4e0a\uff0c\u81ea\u52a8\u5173\u952e\u5e27\u8bbe\u7f6e\u76f8\u5f53\u4e0d\u9519\u3002\u5b83\u4eec\u5c06\u5728\u573a\u666f\u66f4\u6539\u671f\u95f4\u624b\u52a8\u5f3a\u5236\u6267\u884c\u5173\u952e\u5e27\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4ecePowerPoint\u5e7b\u706f\u7247\u5207\u6362\u5230\u67d0\u4eba\u5728\u76f8\u673a\u524d\u8bb2\u8bdd\u7684\u56fe\u50cf\uff0c\u5219\u4f1a\u5f3a\u5236\u4f7f\u7528\u65b0\u7684\u5173\u952e\u5e27\u3002\u8fd9\u662f\u53ef\u53d6\u7684\uff0c\u56e0\u4e3a\u4e09\u89d2\u6846\u4e0d\u4f1a\u6709\u592a\u591a\u7684\u5de5\u4f5c\uff0c\u65e0\u6cd5\u627e\u5230PowerPoint\u5e7b\u706f\u7247\u548c\u76f8\u673a\u56fe\u50cf\u4e4b\u95f4\u7684\u5197\u4f59\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u6b64\u8fc7\u7a0b\u4e0d\u9002\u7528\u4e8e\u67d0\u4e9b\u81ea\u9002\u5e94\u6d41\u4f20\u8f93\u6280\u672f\uff0c\u5c24\u5176\u662fHLS\u3002HLS\u8fc7\u7a0b\u8981\u6c42\u5173\u952e\u5e27\u662f\u53ef\u9884\u6d4b\u7684\u4e14\u540c\u6b65\u3002\u4f7f\u7528\u201c\u81ea\u52a8\u201d\u8bbe\u7f6e\u5c06\u5728\u5173\u952e\u5e27\u4e4b\u95f4\u521b\u5efa\u53ef\u53d8\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u5982\u679c\u573a\u666f\u66f4\u6539\u53d1\u751f\u5f97\u5f88\u5feb\uff0c\u5219\u5173\u952e\u5e27\u4e4b\u95f4\u7684\u65f6\u95f4\u53ef\u80fd\u662f7\u79d2\uff0c\u7136\u540e\u53ef\u80fd\u662f2\u79d2\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u7f16\u7801\u5668\u6765\u8bf4\uff0c\u8981\u7981\u7528\u201c\u81ea\u52a8\u66f4\u6539\u201d\u6216\u201c\u573a\u666f\u66f4\u6539\u68c0\u6d4b\u201d\u529f\u80fd\uff0c\u8fd9\u901a\u5e38\u53ea\u662f\u8868\u793a\u5173\u952e\u5e27\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u5728OBS\u4e2d\uff0c\u5982\u679c\u5173\u952e\u5e27\u95f4\u9694\u8bbe\u7f6e\u4e3a0\u79d2\uff0c\u5219\u81ea\u52a8\u529f\u80fd\u5c06\u751f\u6548\u3002\u5728\u5176\u4e2d\u653e\u7f6e\u4efb\u4f55\u6570\u5b57\uff0c\u59821\u62162\uff0c\u90fd\u5c06\u7981\u7528\u81ea\u52a8\u529f\u80fd\u3002\n\u5982\u679c\u7f16\u7801\u5668\u548cWirecast\u4e00\u6837\uff0c\u6709\u4e00\u4e2a\u201c\u5173\u952e\u5e27\u5bf9\u9f50\u201d\u9009\u9879\uff0c\u90a3\u4e48\u5e94\u8be5\u77e5\u9053\u8fd9\u4e0d\u662f\u4e00\u4e2a\u76f8\u540c\u7684\u8fc7\u7a0b\u3002\u4f7f\u5173\u952e\u5e27\u5bf9\u9f50\u662f\u7528\u4e8e\u521b\u5efa\u7279\u5b9a\u65f6\u95f4\u6233\u7684\u8fc7\u7a0b\uff0c\u5e76\u4e14\u6700\u9002\u5408\u4e8e\u4f7f\u5e7f\u64ad\u8005\u901a\u8fc7\u7f16\u7801\u5668\u53d1\u9001\u7684\u591a\u4e2a\u6bd4\u7279\u7387\u4fdd\u6301\u540c\u6b65\u3002\n\u968f\u7740\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u7684\u51fa\u73b0\uff0c\u8be5\u884c\u4e1a\u6b63\u5904\u4e8e\u4e00\u4e2a\u5947\u602a\u7684\u5173\u5934\uff0c\u5173\u952e\u5e27\u548c\u76f4\u64ad\u7684\u6700\u4f73\u5b9e\u8df5\u6709\u4e00\u4e2a\u76f8\u5f53\u660e\u786e\u7684\u7b54\u6848\u3002\u8be5\u7b56\u7565\u5305\u62ec\uff1a\n\u6b64\u7b56\u7565\u5141\u8bb8\u8f7b\u677e\u5bfc\u822a\u5185\u5bb9\uff0c\u4ee5\u4fbf\u5728\u5e7f\u64ad\u540e\u6309\u9700\u89c2\u770b\uff0c\u540c\u65f6\u4ecd\u53ef\u83b7\u5f97\u5e27\u7ba1\u7406\u7684\u597d\u5904\uff0c\u5e76\u5728\u51cf\u5c11\u5197\u4f59\u65b9\u9762\u8282\u7701\u5e26\u5bbd\u3002\u5b83\u8fd8\u652f\u6301\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u6d41\uff0c\u8fd9\u662f\u6210\u529f\u76f4\u64ad\u7684\u91cd\u8981\u5143\u7d20\uff0c\u5e76\u4e14\u80fd\u591f\u652f\u6301\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u7684\u89c2\u4f17\u3002\n\u6709\u5173\u5e27\u95f4\u7684\u66f4\u591a\u95ee\u9898\u4ee5\u53caIBM Cloud Video\u5982\u4f55\u901a\u8fc7\u4e91\u8f6c\u7801\u5e2e\u52a9\u60a8\u5728\u63d0\u4f9b\u66f4\u4f4e\u7801\u7387\u9009\u9879\u7684\u540c\u65f6\u63d0\u4f9b\u9ad8\u8d28\u91cf\u89c6\u9891\uff0c\u8bf7\u8054\u7cfb\u9500\u552e\u4eba\u5458\u3002\n\u514d\u8d23\u58f0\u660e\uff1a\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u5e2e\u52a9\u76f4\u64ad\u516c\u53f8\uff0c\u6216\u8005\u81f3\u5c11\u662f\u90a3\u4e9b\u8ba1\u5212\u5065\u5eb7\u7684\u89c6\u9891\u70b9\u64ad\u7b56\u7565\u7684\u4eba\uff0c\u800c\u4e0d\u662f\u6d41\u5a92\u4f53\u3002\u5f53\u7136\uff0c\u6839\u636e\u64ad\u653e\u65b9\u6cd5\u7684\u4e0d\u540c\uff0c\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u521b\u5efa\u53ef\u80fd\u901a\u8fc7\u89c6\u9891\u6587\u4ef6\u64ad\u653e\u7684\u89c6\u9891\u5185\u5bb9\u7684\u610f\u56fe\uff0c\u201c\u573a\u666f\u6539\u53d8\u201d\u9009\u9879\u53ea\u662f\u7406\u60f3\u7684\u9009\u9879\u4e4b\u4e00\u3002\u5f53\u4f7f\u7528\u81ea\u9002\u5e94\u6280\u672f\u65f6\uff0c\u8fd9\u4e9b\u6280\u672f\u4e2d\u7684\u4e00\u4e9b\u6280\u672f\u4ec5\u5728\u4e0e\u6d41\u4f20\u8f93\u76f8\u5173\u7684\u60c5\u51b5\u4e0b\u53d8\u5f97\u4e0d\u53ef\u53d6\u3002\nIBM\u53ef\u80fd\u4f1a\u4f7f\u7528\u6211\u7684\u8054\u7cfb\u6570\u636e\u8ba9\u6211\u968f\u65f6\u4e86\u89e3\u4ea7\u54c1\u3001\u670d\u52a1\u548c\u4ea7\u54c1\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3NETSUPP@us.ibm.com\u968f\u65f6\u64a4\u56de\u60a8\u7684\u8425\u9500\u540c\u610f\u3002\u6b64\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u4efb\u4f55\u6b64\u7c7b\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u6765\u53d6\u6d88\u63a5\u6536\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u3002\n\u6709\u5173\u6211\u4eec\u7684\u5904\u7406\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728IBM\u9690\u79c1\u58f0\u660e\u4e2d\u627e\u5230\u3002\u901a\u8fc7\u63d0\u4ea4\u6b64\u8868\u683c\uff0c\u6211\u627f\u8ba4\u6211\u5df2\u7ecf\u9605\u8bfb\u5e76\u7406\u89e3\u4e86IBM\u9690\u79c1\u58f0\u660e\u3002", "note_en": "The default mental image of video compression involves unwanted video artifacts, like pixelation and blockiness in the image. This sells short, though, the complexity that actually goes into compressing video content. In particular, it overlooks a fascinating process called interframe, which involves keyframes and delta frames to intelligently compress content in a manner that is intended to go unnoticed.\n This article describes this process in detail, while also giving best practices and ideal encoder settings that you can apply to your live streaming at IBM Cloud Video. Much of this specific advice relates to streaming due to adaptive bitrates. To learn more about that technology, reference our\u00a0 How Adaptive Streaming Solves Viewer Bandwidth Issues white paper.\n    There are a lot of terms and aspects of streaming technology that can be taken for granted. As someone matures as a broadcaster, it pays to understand elements in greater detail to learn why a process is done and also optimal settings.\n For example, a keyframe is something a few broadcasters have seen mentioned before, or saw the setting in an encoder like Wirecast, without quite realizing what it is and how beneficial this process is for streaming. A keyframe is an important element, but really only part of a longer process that helps to reduce the bandwidth required for video. To understand this relation, one first needs to understand video frames.\n Starting at a high level, most probably realize that video content is made up of a series of frames. Usually denoted as FPS (frames per second), each frame is a still image that when played in sequence creates a moving picture. So content created that uses a FPS of 30 means there are 30 \u201cstill images\u201d that will play for every second of video.\n   On an average video, if someone were to take 90 consecutive frames and spread them out they will see a lot elements that are pretty much identical. For example, if someone is talking while standing next to a motionless plant it\u2019s unlikely that information related to that plant will change. As a result, that\u2019s a lot of wasted bandwidth used just to convey that something hasn\u2019t changed.\n Consequently, when looking for effective ways to compress video content, frame management became one of the cornerstone principles. So if that plant in the example is not going to change, why not just keep using the same elements in some of the subsequent frames to reduce space?\n This realization gave birth to the idea of interframe prediction. This is a video compression technique that divides frames into macroblocks and then looks for redundancies between blocks. This process works through using keyframes, also known as an i-frame or Intra frame, and delta frames, which only store changes in the image to reduce redundant information. These collection of frames are often referred to by the rather non-technical sounding name of a \u201cgroup of pictures\u201d, abbreviated as GOP. A video codec, used for encoding or decoding a digital data stream, all have some form of interframe management. H.264, MPEG-2 and MPEG-4 all use a three frame approach that includes: keyframes, p-frames, and b-frames.\n   The keyframe (i-frame) is the full frame of the image in a video. Subsequent frames, the delta frames, only contain the information that has changed. Keyframes will appear multiple times within a stream, depending on how it was created or how it\u2019s being streamed.\n If someone were to Google \u201ckeyframe\u201d, they are likely to find some results related to animation and video editing. In this instance, we are using the word keyframe in how it relates to video compression and its relationship to delta frames.\n  Also know as predictive frames or predicted frames, the p-frame follows another frame and only contain part of the image in a video. It is classified as a delta frame for this reason. P-frames look backwards to a previous p-frame or keyframe (i-frame) for redundancies. The amount of image presented in the p-frame depends on the amount of new information contained between frames.\n For example, someone talking to the camera in front of a static background will likely only contain information related to their movement. However, someone running across a field as the camera pans will have a great deal more information with each p-frame to match both their movement and the changing background.\n   Also known as bi-directional predicted frames, the b-frames follow another frame and only contain part of the image in a video. The amount of image contained in the b-frame depends on the amount of new information between frames.\n Unlike p-frames, b-frames can look backward and forward to a previous or later p-frame or keyframe (i-frame) for redundancies. This makes b-frames more efficient as opposed to p-frames, as they are more likely to find redundancies. However, b-frames are not used when the encoding profile is set to baseline inside the encoder. This means the encoder has to be set at an encoding profile above baseline, such as \u201cmain\u201d or \u201chigh\u201d.\n   In regards to video compression for live streaming, a keyframe is set inside the encoder. This is configured by an option sometimes called a \u201ckeyframe interval\u201d inside the encoder.\n The keyframe interval controls how often a keyframe (i-frame) is created in the video. The higher the keyframe interval, generally the more compression that is being applied to the content, although that doesn\u2019t mean a noticeable reduction in quality. For an example of how keyframe intervals work, if your interval is set to every 2 seconds, and your frame rate is 30 frames per second, this would mean roughly every 60 frames a keyframe is produced.\n The term \u201ckeyframe interval\u201d is not universal and most encoders have their own term for this. Adobe Flash Media Live Encoder (FMLE) and vMix, for example, uses the term \u201ckeyframe frequency\u201d to describe this process. Other programs and services might call the interval the \u201cGOP size\u201d or \u201cGOP length\u201d, going back to the \u201cGroup of Pictures\u201d abbreviation.\n    For FMLE, this option, denoted as \u201cKeyframe Frequency\u201d, is found in the software encoder by clicking the wrench icon to the right of format.\n In Wirecast, this is set from the Encoder Presets menu and the option is called \u201ckey frame every\u201d. Wirecast is different as the interval is actually denoted in frames. So for a 30 FPS broadcast, setting the \u201ckey frame every\u201d 60 frames would roughly give a keyframe interval of 2 seconds, as you have 30 frames every second.\n For the vMix encoder, one needs to first click the gear icon near streaming, which opens the Streaming Settings. Near the quality option here is another gear icon and clicking this will open up a menu that has the ability to modify the \u201cKeyframe Frequency\u201d.\n  In Open Broadcast Software (OBS), for versions after\u00a0v0.55b, the keyframe interval can be set in the Settings area under Advanced. For\u00a0 versions of OBS before v0.542b, it\u2019s not very clear how to modify the keyframe interval, but this is actually a component of Settings. Once there, go to Advanced and then select \u201cCustom x264 Encoder Settings\u201d. In this field one needs to enter in the following string: \u201ckeyint=XX\u201d with the XX being the number of frames until a keyframe is triggered. Like Wirecast, if a keyframe interval of 2 seconds is desired and the FPS is 30 seconds enter the following: \u201ckeyint=60\u201d.\n For XSplit, keyframe interval is a component of the channel properties. Under the Video Encoding area, one will find a listing that says \u201cKeyframe Interval (secs)\u201d. To the far right of this is a gear icon. Clicking the gear will launch a \u201cVideo Encoding Setup\u201d popup. This will allow someone to specify the keyframe interval in seconds.\n   Mileage in this explanation might vary, as encoders do manage bitrates and keyframes differently. Using an encoder like Wirecast, one might notice that broadcasting someone talking against a still background has \u201chigher quality\u201d compared to broadcasting someone jumping up and down against a moving background. This can be reproduced when using the same exact average bitrate and keyframe interval between them. The reason for this is because, in part, due to the fact that the delta frames have a ton of information to share in the jumping example. There is very little redundancy, meaning a lot more data that needs to be conveyed on each delta frame.\n If you have an encoder like Wirecast, though, it\u2019s trying its hardest to keep the stream around that average bitrate that was selected. Consequently, the added bandwidth that is needed for the additional information contained in the delta frames results in the quality being reduced to try and keep the average bitrate around the same level.\n   There has never been an industry standard, although 10 seconds is often mentioned as a good keyframe interval, even though that\u2019s no longer suggested for streaming. The reason it was suggested is because, for a standard 29.97 FPS file, the resulting content is responsive enough to support easy navigation from a preview slider. To explain more, a player can not start playback on a p-frame or b-frame. So using the 10 second example, if someone tried to navigate to a point that was 5 seconds into feed it would actually shift 5 seconds back to the nearest keyframe and begin playback. This was considered a good trade off for smaller bandwidth consumption, although for reference DVDs elected to use something much smaller than 10 seconds.\n However, for live streaming, the recommended level has drastically dropped. The reason for this is the advent of adaptive bitrate streaming. For those unfamiliar with adaptive streaming, this technology enables a video player to dynamically change between available resolutions and/or bitates based upon the viewer trying to watch. So someone with a slower download speed will be given a lower bitrate version, if available. Other criteria, like playback window size, will also impact what bitrate is given.\n True adaptive streaming doesn\u2019t just make this check when the video content initially loads, though, but can also alter the bitrate based on changes on the viewer\u2019s side. For example, if a viewer was to move out of range of a Wi-Fi network on their mobile, they will start using their normal cellular service which is liable to result in a slower download speed. As a result, the viewer might be trying to watch content that is too high of a bitrate versus their download speed. The adaptive streaming technology should realize this discrepancy and make the switch to a different bitrate.\n The keyframe interval comes into action here as making that switch occurs during the next keyframe. So if someone is broadcasting with a 10 second interval, that means it could take up to 10 seconds before the bitrate and resolution might change. That length of time means the content might buffer on the viewer\u2019s side before the change occurs, something that could lead to viewer abandonment.\n Because of this, it\u2019s recommended to have your keyframe interval set at 2 seconds for live streaming. This produces a result where the video track can effectively change bitrates often before the user might experience buffering due to a degradation in their download speed.\n   We are looping at this point, but it pays to understand p-frames, b-frames and get a crash course in adaptive streaming before talking about what is an IDR-frame, or Instantaneous Decode Refresh frame. These are actually keyframes and each keyframe can either be IDR based or non-IDR based. The difference between the two is that the IDR based keyframe works as a hardstop. An IDR-frame prevents p-frames and b-frames from referencing frames that occurred before the IDR-frame. A non-IDR keyframe will allow those frames to look further back for redundancies.\n On paper, a non-IDR keyframe sounds ideal: it can greatly reduce file size by being allowed to look at a much larger sample of frames for redundancies. Unfortunately, a lot of issues arise with navigation and the feature does not play nicely with adaptive streaming. For navigation, let\u2019s say someone starts watching 6 minutes into a stream. That\u2019s going to cause issues as the p-frames and b-frames might be referencing information that was never actually accessed by the viewer. For adaptive streaming, a similar issue can arise if the bitrate and resolution are changed. This is because the new selection might reference data that the viewer watched at a different quality setting and is no longer parallel. For these reasons, it\u2019s always recommended to make keyframes IDR based.\n Generally, encoders will either provide the option to turn on or off IDR based keyframes or won\u2019t give the option at all. For those encoders that do not give the option, it\u2019s almost assured to be because the encoder is setup to only use IDR-frames.\n    Auto keyframe settings, in principal, are pretty great. They will manually force a keyframe during a scene change. For example, if you switch from a PowerPoint slide to an image of someone talking in front of a camera that would force a new keyframe. That\u2019s desirable as the delta frames would not have much to work with, unable to find redundancies between the PowerPoint slide and the image from the camera.\n Unfortunately, this process does not work with some adaptive streaming technologies, most notably HLS. The HLS process requires the keyframes to be predictable and in sync. Using an \u201cauto\u201d setting will create variable intervals between keyframes. For example, the time between keyframes might be 7 seconds and then later it might be 2 seconds if a scene change occurs quickly.\n  For most encoders, to disable \u201cauto change\u201d or \u201cscene change detect\u201d features this often just means denoting a keyframe interval. For example, in OBS if a keyframe interval is set at 0 seconds then the auto feature will kick in. Placing any number in there, like 1 or 2, will disable the auto feature.\n If the encoder, like Wirecast, has an option for \u201ckeyframe alignment\u201d, it should be known that this is not the same process. Having keyframes aligned is a process for creating specific timestamps and is best suited for keeping multiple bitrates that the broadcaster is sending through the encoder in sync.\n   With the advent of adaptive bitrates, the industry is at an odd juncture where there is a pretty clear answer on best practices for keyframes and live streaming. That strategy includes:\n  This strategy allows for easy navigation of content, for on demand viewing after a broadcast, while still reaping the benefits of frame management and saving bandwidth on reducing redundancies. It also supports adaptive btirate streaming, an important element of a successful live broadcast and being able to support viewers with slower connections.\n Please\u00a0 Contact Sales for more questions on interframe and how IBM Cloud Video\u00a0can help you deliver high quality video\u00a0alongside lower bitrate options through cloud transcoding.\n  Disclaimer: This article is aimed at helping out live broadcasters or at least those who plan for a healthy video on demand strategy over streaming. The answer to many of these questions would of course be different depending on playback method. For example, for the intention of creating video content that might be played via a video file, the \u201cscene change\u201d option is just one example of something that would be ideal. Some of these techniques only becomes undesirable in relation to streaming when using adaptive technology.\n   IBM may use my contact data to keep me informed of products, services, and offerings\n    You can withdraw your marketing consent at any time by sending an email to  NETSUPP@us.ibm.com. Also, you may unsubscribe from receiving marketing emails by clicking the unsubscribe link in any such email.\n  More information on our processing can be found in the  IBM Privacy Statement. By submitting this form, I am acknowledging that I have read and understand the IBM Privacy Statement.", "posttime": "2020-05-07 19:56:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5173\u952e\u5e27,interframe", "title": "\u5173\u952e\u5e27\u3001\u5e27\u95f4\u548c\u89c6\u9891\u538b\u7f29(2016)", "title_en": "Keyframes, InterFrame and Video Compression (2016)", "transed": 1, "url": "https://blog.video.ibm.com/streaming-video-tips/keyframes-interframe-video-compression/", "via": "", "real_tags": ["\u5173\u952e\u5e27"]}, {"category": "", "categoryclass": "", "imagename": "03c2b6994bb7a2ba451559a8a63f759f.jpg", "infoid": 1001052, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u6709\u7ebf\u7535\u89c6\u65b0\u95fb\u7f51(CNN)-\u5927\u591a\u6570\u90ae\u8f6e\u4e58\u5ba2\u5df2\u7ecf\u56de\u5bb6\uff0c\u66fe\u7ecf\u5c06\u4ed6\u4eec\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u7684\u5de8\u578b\u8239\u53ea\u505c\u6cca\u6216\u91cd\u65b0\u505c\u6cca\u5728\u6c34\u9762\u4e0a\uff0c\u4e3a\u4ed6\u4eec\u65c5\u7a0b\u7684\u4e0b\u4e00\u9636\u6bb5\u91cd\u65b0\u5b9a\u4f4d\u3002\n\u4f46\u662f\uff0c\u5f53\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u6050\u614c\u5e2d\u5377\u5927\u6d0b\u65f6\uff0c\u90a3\u4e9b\u8ba9\u8fd9\u4e9b\u5de8\u5927\u7684\u8239\u53ea\u4fdd\u6301\u8fd0\u8f6c\uff0c\u5e76\u7167\u987e\u5ba2\u4eba\u7684\u8239\u5458\u4eec\u5462\uff1f\n\u5bf9\u4e8e\u8bb8\u591a\u5728\u90ae\u8f6e\u884c\u4e1a\u5de5\u4f5c\u7684\u4eba\u6765\u8bf4\uff0c\u767b\u4e0a\u4e00\u8258\u8f7d\u6709\u51a0\u72b6\u75c5\u6bd2\u643a\u5e26\u8005\u7684\u8239\u53ea\u7684\u5669\u68a6\u4ecd\u5728\u7ee7\u7eed--\u6709\u65f6\u770b\u4e0d\u5230\u7ed3\u675f\u7684\u8ff9\u8c61\u3002\n\u4e0e\u4e16\u9694\u7edd\uff0c\u62d2\u7edd\u5411\u4e58\u5ba2\u63d0\u4f9b\u8fc5\u901f\u9063\u8fd4\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u88ab\u8feb\u5fcd\u53d7\u6ca1\u6709\u62a5\u916c\u7684\u8270\u82e6\u6761\u4ef6\uff0c\u4e00\u4e9b\u88ab\u9694\u79bb\u5728\u6d77\u4e0a\u7684\u4eba\u4e00\u76f4\u5728\u63cf\u8ff0\u56f0\u4f4f\u4ed6\u4eec\u7684\u5b98\u50da\u7ea0\u7ed3\uff0c\u5f80\u5f80\u662f\u5728\u79bb\u6d77\u5cb8\u51e0\u7c73\u8fdc\u7684\u5730\u65b9\u3002\n\u6211\u5e0c\u671b\u6211\u4eec\u4e0d\u4f1a\u88ab\u9057\u5fd8\uff0c\u8001\u5b9e\u8bf4\uff0c\u4e3a\u516c\u4e3b\u90ae\u8f6e\u5de5\u4f5c\u7684\u9a6c\u8096\u6069\u00b7\u83ab\u987f(Mashawn Morton)\u8bf4\u3002\u4f3c\u4e4e\u6ca1\u6709\u4eba\u5173\u5fc3\u6211\u4eec\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\n\u6839\u636e\u7f8e\u56fd\u6d77\u5cb8\u8b66\u536b\u961f\u7684\u6570\u636e\uff0c\u622a\u81f35\u67085\u65e5\uff0c\u7f8e\u56fd\u6e2f\u53e3\u53ca\u5468\u8fb9\u5730\u533a\u4ee5\u53ca\u5df4\u54c8\u9a6c\u548c\u52a0\u52d2\u6bd4\u6d77\u5730\u533a\u768474\u8258\u6e38\u8f6e\u4e0a\u4ecd\u6709\u8d85\u8fc75.7\u4e07\u540d\u8239\u5458\u3002\u66f4\u591a\u7684\u6570\u767e\u4eba\u88ab\u56f0\u5728\u4e16\u754c\u5927\u6d0b\u5176\u4ed6\u5730\u65b9\u7684\u8239\u53ea\u4e0a\u3002\n\u7531\u4e8e\u6ca1\u6709\u4e58\u5ba2\u9700\u8981\u7167\u770b\uff0c\u4ed6\u4eec\u7684\u9694\u79bb\u4e5f\u5df2\u7ecf\u5b8c\u6210\uff0c\u5458\u5de5\u4eec\u4e0d\u7981\u7eb3\u95f7\u4e3a\u4ec0\u4e48\u4e0d\u8ba9\u4ed6\u4eec\u56de\u5bb6\u3002\n\u5728\u7f8e\u56fd\u6c34\u57df\uff0c\u6e38\u8f6e\u9677\u5165\u4e86\u7f8e\u56fd\u536b\u751f\u4fdd\u62a4\u673a\u6784\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3(Centers For Disease Control And Prevention)\u5b9e\u65bd\u7684\u6cd5\u89c4\u7684\u6ce5\u6f6d\u3002\n\u75be\u63a7\u4e2d\u5fc3\u7684\u5b98\u65b9\u89c4\u5b9a\u662f\uff0c\u8239\u5458\u53ea\u80fd\u88ab\u5141\u8bb8\u4e0b\u8239\u9063\u8fd4\u6216\u5728\u4e24\u8258\u8239\u4e4b\u95f4\u8f6c\u79fb\uff0c\u524d\u63d0\u662f\u4ed6\u4eec\u5c06\u7531\u4e13\u95e8\u5305\u673a\u6216\u79c1\u4eba\u8f66\u8f86\u8fd0\u9001\u3002\n\u4e0d\u53d7\u51a0\u72b6\u75c5\u6bd2\u5f71\u54cd\u7684\u6e38\u8f6e\u8239\u5458\u53ef\u4ee5\u901a\u8fc7\u5546\u4e1a\u822a\u7a7a\u4e0a\u5cb8\u548c\u65c5\u884c\uff0c\u4f46\u53ea\u80fd\u5728\u83b7\u5f97CDC\u4e8b\u5148\u6279\u51c6\u7684\u60c5\u51b5\u4e0b\u9010\u6848\u8fdb\u884c\u3002\u90ae\u8f6e\u516c\u53f8\u5fc5\u987b\u586b\u5199\u4e00\u4efd\u58f0\u660e\uff0c\u8bc1\u660e\u8be5\u8239\u6ca1\u6709\u51a0\u72b6\u75c5\u6bd2\u3002\n\u76f4\u5230\u4e0a\u5468\u672b\uff0c\u6839\u636e\u4e00\u4e9b\u8239\u5458\u7684\u8bf4\u6cd5\uff0c\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5b9a\u7684\u6cd5\u5f8b\u540e\u679c\u5df2\u7ecf\u63a8\u8fdf\u4e86\u90ae\u8f6e\u516c\u53f8\u540c\u610f\u8fd9\u4e9b\u89c4\u5b9a\u3002\n\u5468\u65e5\uff0c\u7687\u5bb6\u52a0\u52d2\u6bd4\u53ca\u5176\u65d7\u4e0b\u54c1\u724c\uff0c\u5305\u62ec\u540d\u4eba\u90ae\u8f6e\u516c\u53f8(Celebrity Cruise Line)\u4e0e\u75be\u63a7\u4e2d\u5fc3\u5c31\u8239\u5458\u4e0b\u8239\u8fbe\u6210\u534f\u8bae\uff0c\u5199\u4fe1\u7ed9\u5458\u5de5\u8868\u793a\uff0c\u5c06\u9075\u5b88\u4e25\u683c\u7684\u6307\u5bfc\u65b9\u9488\uff0c\u5e76\u9075\u5b88\u5176\u5f71\u54cd\u3002\nCDC\u5df2\u7ecf\u8981\u6c42\u6211\u548c\u5176\u4ed6\u90ae\u8f6e\u516c\u53f8\u7684\u9886\u5bfc\u4eba\u7b7e\u7f72\u4e00\u5c01\u4fe1\uff0c\u9650\u5236\u6211\u4eec\u9001\u4f60\u56de\u5bb6\u7684\u9009\u62e9\uff0c\u5e76\u4e3a\u4f60\u7684\u884c\u4e3a\u627f\u62c5\u8d23\u4efb\uff0c\u4ee5\u786e\u4fdd\u4ed6\u4eec\u6279\u51c6\u4f60\u4e0b\u8239\uff0c\u540d\u4eba\u90ae\u8f6e\u9996\u5e2d\u6267\u884c\u5b98\u4e3d\u838e\u00b7\u5362\u6258\u592b-\u4f69\u6d1b\u5728CNN\u770b\u5230\u7684\u4e00\u5c01\u4fe1\u4e2d\u5199\u9053\u3002\n\u672c\u7740\u5c3d\u6211\u4eec\u6240\u80fd\u628a\u4f60\u9001\u56de\u5bb6\u7684\u7cbe\u795e\uff0c\u6211\u51b3\u5b9a\u5728\u8fd9\u5c01\u4fe1\u4e0a\u7b7e\u5b57\u3002\n\u5176\u4ed6\u90ae\u8f6e\u516c\u53f8\u53ef\u80fd\u4f1a\u6548\u4eff\uff0c\u4f46\u56f4\u7ed5\u90ae\u8f6e\u7684\u8b66\u60d5\u3001\u75be\u63a7\u4e2d\u5fc3\u653f\u7b56\u7684\u7ec6\u8282\u548c\u5f71\u54cd\u3001\u5546\u4e1a\u822a\u73ed\u7684\u7f3a\u4e4f\u3001\u5927\u8303\u56f4\u7684\u65c5\u884c\u7981\u4ee4\u4ee5\u53ca\u6301\u7eed\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u610f\u5473\u7740\u8bb8\u591a\u8239\u5458\u4ecd\u88ab\u56f0\u5728\u8fd9\u91cc\u3002\n\u7f8e\u56fd\u4eba\u4e9a\u5386\u514b\u65af\u00b7\u963f\u5fb7\u91d1\u65af(Alex Adkins)\u662f\u7687\u5bb6\u52a0\u52d2\u6bd4\u6d77\u81ea\u7531\u53f7(Freedom Of The Sea)\u7684\u9ad8\u7ea7\u821e\u53f0\u6280\u672f\u5458\uff0c\u81ea3\u6708\u4e2d\u65ec\u8fd9\u8258\u8239\u7684\u5ba2\u4eba\u5728\u8fc8\u963f\u5bc6\u5378\u8d27\u4ee5\u6765\uff0c\u4ed6\u4e00\u76f4\u5728\u6d77\u4e0a\u7b49\u5f85\u3002\n\u4ed6\u8bf4\uff1a\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u518d\u4e5f\u6ca1\u6709\u5ba2\u4eba\u4e86\uff0c\u6211\u4eec\u53ea\u662f\u6f02\u6d6e\u5728\u5df4\u5df4\u591a\u65af\u7684\u6d77\u5cb8\u4e0a\u3002\n\u5728\u7b2c\u4e00\u5468\uff0c\u8239\u5458\u4eec\u5229\u7528\u4e86\u6d77\u6d0b\u81ea\u7531\u6e38\u6cf3\u6c60\u548c\u5065\u8eab\u623f\uff0c\u4eab\u53d7\u7740\u7a7a\u65e0\u4e00\u4eba\u7684\u8bbe\u65bd\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u5f00\u59cb\u5f3a\u5236\u8fdb\u884c\u4e3a\u671f\u4e24\u5468\u7684\u81ea\u6211\u9694\u79bb\uff0c\u963f\u5fb7\u91d1\u65af\u8bf4\u3002\n\u963f\u5fb7\u91d1\u65af\u544a\u8bc9CNN\uff0c\u81ea\u90a3\u4ee5\u540e\uff0c\u673a\u7ec4\u4eba\u5458\u88ab\u544a\u77e5\uff0c\u4ed6\u4eec\u4e0d\u518d\u88ab\u89c6\u4e3a\u5728\u804c\u5458\u5de5\uff0c\u4ed6\u4eec\u7684\u5de5\u8d44\u4e00\u76f4\u652f\u4ed8\u52304\u6708\u5e95\u3002\n\u4ed6\u8868\u793a\uff0c\u8ba9\u673a\u7ec4\u4eba\u5458\u56de\u56fd\u7684\u5305\u673a\u52aa\u529b\u4e00\u518d\u9677\u5165\u505c\u6ede\uff0c\u56e0\u4e3a\u7687\u5bb6\u52a0\u52d2\u6bd4\u5c1a\u672a\u7b7e\u7f72CDC\u7a0b\u5e8f\uff0c\u4f46\u4ed6\u627f\u8ba4\uff0c\u5728\u6700\u7ec8\u540c\u610f\u6761\u4ef6\u4e4b\u524d\uff0c\u8be5\u90ae\u8f6e\u516c\u53f8\u9677\u5165\u4e86\u56f0\u5883\u3002\n\u6211\u4eec\u7684\u9886\u5bfc\u4eba\u7b7e\u7f72\u4e86\u8fd9\u4efd\u534f\u8bae\uff0c\u5e0c\u671b\u80fd\u5c3d\u5feb\u5b89\u5168\u5730\u9001\u6211\u4eec\u56de\u5bb6\uff0c\u6211\u5e0c\u671b\u6bcf\u4e2a\u56de\u5bb6\u7684\u4eba\u90fd\u80fd\u7406\u89e3\u4ed6\u4eec\u505a\u51fa\u7684\u5de8\u5927\u727a\u7272\uff0c\u963f\u5fb7\u91d1\u65af\u8bf4\u3002\n\u5bf9\u4e8e\u963f\u5fb7\u91d1\u65af\u548c\u8239\u4e0a\u7684\u8bb8\u591a\u4eba\u6765\u8bf4\uff0c\u65b0\u7684\u53d1\u5c55\u662f\u4e00\u79cd\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u58eb\u6c14\u63d0\u5347\uff0c\u4ed6\u63cf\u8ff0\u4e86\u4e00\u79cd\u5f25\u6f2b\u5728\u8230\u961f\u4e2d\u7684\u6709\u5f62\u7535\u529b\u3002\n\u8fd9\u5c31\u662f\u8bf4\uff0c\u4ed6\u610f\u8bc6\u5230\u5176\u4ed6\u8239\u53ea\u4e0a\u7684\u8bb8\u591a\u5de5\u4eba\u4ecd\u7136\u5446\u5728\u6f02\u6d6e\u7684\u70bc\u72f1\u91cc\u3002\n\u8d1f\u8d23\u76d1\u7ba1\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u90ae\u8f6e\u516c\u53f8\u7684\u90ae\u8f6e\u56fd\u9645\u534f\u4f1a\u544a\u8bc9CNN\uff0c\u5b83\u6b63\u5728\u4e0e\u75be\u63a7\u4e2d\u5fc3\u5408\u4f5c\uff0c\u4ee5\u5e94\u5bf9\u8fd9\u4e9b\u524d\u6240\u672a\u6709\u7684\u6311\u6218\uff0c\u5e76\u5c3d\u5feb\u9063\u8fd4\u8239\u5458\u3002\nCLIA\u7684\u4e00\u4f4d\u4ee3\u8868\u8868\u793a\uff0c\u60c5\u51b5\u975e\u5e38\u590d\u6742\uff0c\u800c\u4e14\u6bcf\u5929\u90fd\u5728\u6f14\u53d8\u3002\n\u83ab\u987f\u662f\u53e6\u4e00\u540d\u4ecd\u5728\u7b49\u5f85\u56de\u5bb6\u7684\u673a\u7ec4\u4eba\u5458\u3002\u4ed6\u8bf4\uff0c\u4ed6\u4e0e\u516c\u4e3b\u90ae\u8f6e\u516c\u53f8\u5408\u4f5c\u4e86\u5927\u7ea65\u5e74\uff0c\u5e76\u4e8e\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u5728\u201c\u5929\u7a7a\u516c\u4e3b\u53f7\u201d\u4e0a\u5f00\u59cb\u4e86\u4ed6\u4e0e\u201c\u516c\u4e3b\u53f7\u201d\u7684\u7b2c\u56db\u4efd\u5408\u540c\u3002\u201c\u5929\u7a7a\u516c\u4e3b\u53f7\u201d\u662f\u4e00\u8258\u5de8\u5927\u7684\u3001\u95ea\u95ea\u53d1\u5149\u7684\u8f6e\u8239\uff0c\u53ef\u5bb9\u7eb33660\u540d\u4e58\u5ba2\u548c1346\u540d\u8239\u5458\u3002\n\u83ab\u987f\u7684\u5de5\u4f5c\u9884\u8ba1\u5c06\u6301\u7eed\u523010\u6708\u4e2d\u65ec\uff0c\u56e0\u4e3a\u8fd9\u8258\u8239\u6a2a\u6e21\u52a0\u52d2\u6bd4\u6d77\u3001\u5927\u897f\u6d0b\uff0c\u8d8a\u8fc7\u6ce2\u7f57\u7684\u6d77\uff0c\u7a7f\u8d8a\u6b27\u6d32\u3002\u968f\u7740\u75ab\u60c5\u5728\u5168\u7403\u8513\u5ef6\uff0c\u90ae\u8f6e\u88ab\u53d6\u6d88\u6216\u53ec\u56de\uff0c\u5929\u7a7a\u516c\u4e3b\u53f7\u4e8e3\u670814\u65e5\u5728\u8fc8\u963f\u5bc6\u5378\u8d27\u3002\n\u5305\u62ec\u83ab\u987f\u5728\u5185\u7684\u8239\u5458\u4ecd\u7559\u5728\u8239\u4e0a\uff0c\u505c\u6cca\u5728\u8be5\u5e02\u7684\u6e2f\u53e3\u3002\u5bb6\u770b\u8d77\u6765\u5f88\u8fd1\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\u8fd8\u5f88\u8fdc\u3002\n\u83ab\u987f\u8bf4\uff0c\u4e00\u5f00\u59cb\uff0c\u4eba\u4eec\u7684\u60c5\u7eea\u662f\u79ef\u6781\u7684\u3002\u83ab\u987f\u8bf4\uff0c\u673a\u7ec4\u4eba\u5458\u8fdb\u5165\u4e86\u5927\u7ea620\u5929\u7684\u81ea\u6211\u9694\u79bb\uff0c\u4e3b\u8981\u5c40\u9650\u5728\u673a\u8231\u5185\uff0c\u4f46\u4ed6\u4eec\u660e\u767d\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u4e0b\u8239\u56de\u5bb6\u4e86\u3002\n\u83ab\u987f\u8bf4\uff0c\u4e00\u65e6\u4e58\u5ba2\u4e0b\u8239\uff0c\u6211\u4eec\u5c31\u611f\u5230\u5b89\u5168\u4e86\u3002\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u751f\u75c5\u7684\u8ff9\u8c61\u3002\u6211\u4eec\u5f88\u9ad8\u5174\u6211\u4eec\u8fd8\u80fd\u62ff\u5230\u5de5\u8d44\uff0c\u800c\u4e14\u8fd8\u5728\u53d7\u96c7\u3002\n\u83ab\u987f\u8bf4\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u63a5\u8fd1\u5c3e\u58f0\u65f6\uff0c\u4ed6\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u88ab\u544a\u77e5\uff0c\u4ed6\u4eec\u7684\u5408\u540c\u5c06\u6b63\u5f0f\u7ed3\u675f\u3002\u4ed6\u8bf4\uff0c\u4ed6\u4eec\u88ab\u544a\u77e5\uff0c\u4ece6\u6708\u4efd\u5f00\u59cb\u5c06\u4e0d\u518d\u652f\u4ed8\u5de5\u8d44\u3002\n\u83ab\u987f\u8bf4\uff1a\u4ed6\u4eec\u5c45\u7136\u8fd8\u80fd\u4ed8\u94b1\u7ed9\u6211\u4eec\uff0c\u8fd9\u8ba9\u6211\u4eec\u975e\u5e38\u60ca\u8bb6\u3002\n\u56db\u6708\uff0c\u5f53\u5bf9\u201c\u5929\u7a7a\u516c\u4e3b\u201d\u53f7\u7684\u9694\u79bb\u7ed3\u675f\u540e\uff0c\u201c\u516c\u4e3b\u53f7\u201d\u5f00\u59cb\u8f6c\u8fd0\u8239\u5458--\u5728\u4e24\u8258\u8239\u4e4b\u95f4\u8f6c\u79fb\u8239\u5458\uff0c\u4ee5\u4fbf\u6839\u636e\u56fd\u7c4d\u5bf9\u5de5\u4eba\u8fdb\u884c\u5206\u7ec4\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e58\u8239\u56de\u5bb6\u6216\u524d\u5f80\u5408\u9002\u7684\u673a\u573a\u3002\n\u5b83\u89e3\u51b3\u4e86\u5546\u4e1a\u822a\u73ed\u7684\u7f3a\u4e4f\uff0c\u4ee5\u53ca\u8ba9\u75be\u63a7\u4e2d\u5fc3\u6279\u51c6\u5305\u673a\u7684\u56f0\u96be\u3002\n\u4e0d\u8fc7\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u5bf9\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u611f\u5230\u6ee1\u610f\u3002\u822a\u884c\u56de\u5bb6\u53ef\u80fd\u9700\u8981\u51e0\u5468\u7684\u65f6\u95f4\uff0c\u800c\u98de\u884c\u9700\u8981\u51e0\u4e2a\u5c0f\u65f6\u3002\u53e6\u5916\uff0c\u8fd8\u6709\u4ea4\u53c9\u611f\u67d3\u7684\u6301\u7eed\u5a01\u80c1\u3002\n[\u8f6c\u8fd0\u5f00\u59cb\u7684\u65f6\u5019]\u83ab\u987f\u8bf4\uff0c\u90a3\u771f\u7684\u662f\u7d27\u5f20\u548c\u538b\u529b\u6c34\u5e73\u5f00\u59cb\u4e0a\u5347\u7684\u65f6\u5019\u3002\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u7f8e\u56fd\u673a\u7ec4\u4eba\u5458\u6765\u8bf4\uff0c\u8f6c\u8fd0\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u3002\u4ed6\u4eec\u505c\u9760\u5728\u8fc8\u963f\u5bc6\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u4e0d\u80fd\u76f4\u63a5\u4e0b\u8239\u5462\uff1f\n\u5929\u7a7a\u516c\u4e3b\u53f7\u662f\u4e00\u8258\u5065\u5eb7\u7684\u8239\uff0c\u6ca1\u6709\u62a5\u544a\u8fc7\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\uff0c\u83ab\u987f\u62c5\u5fc3\u4ed6\u53ef\u80fd\u4f1a\u642c\u5230\u4e4b\u524d\u4e58\u5ba2\u6216\u8239\u5458\u68c0\u6d4b\u5448\u9633\u6027\u7684\u8239\u4e0a\u3002\n\u4eba\u4eec\u60f3\u56de\u5bb6\uff0c\u800c\u4e0d\u662f\u53bb\u53e6\u4e00\u8258\u8239\uff0c\u4ed6\u8bf4\u3002\u8fd9\u4e9b\u4fe1\u606f\u6bcf\u5929\u6bcf\u5c0f\u65f6\u3001\u6bcf\u4e00\u5929\u90fd\u5728\u4e0d\u65ad\u53d8\u5316\u3002\u4e0d\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u8ba9\u4eba\u538b\u529b\u5f88\u5927\u3002\n\u83ab\u987f\u8bf4\uff0c4\u670825\u65e5\uff0c\u4ed6\u548c\u516c\u4e3b\u90ae\u8f6e\u7684\u5176\u4ed6\u7f8e\u56fd\u5458\u5de5\u4e00\u8d77\u4ece\u5929\u7a7a\u516c\u4e3b\u53f7\u8c03\u5230\u4e86\u7fe1\u7fe0\u516c\u4e3b\u53f7\uff0c\u8fd9\u662f\u4e00\u6b21\u53d1\u751f\u5728\u6ce2\u6d9b\u6c79\u6d8c\u7684\u6d77\u9762\u4e0a\u7684\u8f6c\u79fb\u3002\n\u83ab\u987f\u8bf4\uff0c\u6d77\u6d6a\u975e\u5e38\u9ad8\uff0c\u6211\u5b9e\u9645\u4e0a\u62cd\u4e86\u4e00\u4e9b\u89c6\u9891\u7ed9\u6211\u6bcd\u4eb2\uff0c\u544a\u8bc9\u5979\u8fd9\u8258\u5c0f\u8239\u6447\u6643\u5f97\u6709\u591a\u5389\u5bb3\uff0c\u7136\u540e\u6211\u5c31\u5931\u53bb\u4e86\u4e92\u8054\u7f51\u670d\u52a1\u3002\n\u6574\u657424\u5c0f\u65f6\u540e\uff0c\u83ab\u987f\u624d\u5f97\u4ee5\u4e0e\u60ca\u614c\u5931\u63aa\u7684\u6bcd\u4eb2\u91cd\u65b0\u53d6\u5f97\u8054\u7cfb\uff0c\u5e76\u5411\u5979\u4fdd\u8bc1\u4ed6\u6ca1\u4e8b\u3002\n\u83ab\u987f\u8bf4\uff0c\u4ed6\u6700\u8fd1\u542c\u8bf4\u90ae\u8f6e\u516c\u4e3b\u53f7\u7684\u7f8e\u56fd\u8239\u5458\u53ef\u80fd\u4f1a\u518d\u6b21\u88ab\u8f6c\u79fb\u5230\u73ca\u745a\u516c\u4e3b\u53f7\uff0c\u8fd9\u4e00\u6b21\u662f\u9063\u8fd4\u52aa\u529b\u7684\u4e00\u90e8\u5206\uff0c\u5728\u65e9\u4e9b\u65f6\u5019\u7684\u5927\u6d41\u884c\u4e2d\uff0c\u73ca\u745a\u516c\u4e3b\u53f7\u53d1\u751f\u4e86\u51a0\u72b6\u75c5\u6bd2\u6b7b\u4ea1\u4e8b\u4ef6\u3002\n\u4ed6\u8bf4\uff1a\u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u90a3\u4e4b\u524d\uff0c\u75be\u63a7\u4e2d\u5fc3\u4f1a\u89e3\u9664\u7981\u4ee4\uff0c\u5141\u8bb8\u7f8e\u56fd\u4eba\u8fdb\u5165\u7f8e\u56fd\u3002\n\u90ae\u8f6e\u516c\u4e3b\u53f7\u6ca1\u6709\u5177\u4f53\u56de\u7b54\u4e3a\u4ec0\u4e48\u82b1\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\u624d\u5904\u7406\u8239\u5458\u4e0b\u8239\u7684\u95ee\u9898\uff0c\u4e5f\u6ca1\u6709\u5177\u4f53\u56de\u7b54\u4e3a\u4ec0\u4e48\u505c\u6cca\u5728\u7f8e\u56fd\u6e2f\u53e3\u7684\u7f8e\u56fd\u8239\u5458\u53c2\u4e0e\u4e86\u8f6c\u8fd0\u8fc7\u7a0b\uff0c\u800c\u4e0d\u662f\u5141\u8bb8\u4ed6\u4eec\u7559\u5728\u539f\u5730\u76f4\u5230\u4ed6\u4eec\u53ef\u4ee5\u79bb\u5f00\u3002\n\u4e00\u4f4d\u53d1\u8a00\u4eba\u544a\u8bc9CNN\uff0c\u8be5\u516c\u53f8\u575a\u5b9a\u5730\u81f4\u529b\u4e8e\u8ba9\u6211\u4eec\u7684\u8239\u4e0a\u56e2\u961f\u6210\u5458\u5b89\u5168\u5730\u4e0e\u4ed6\u4eec\u7684\u5bb6\u4eba\u56e2\u805a\uff0c\u5e76\u5728\u5b89\u6392\u8fd4\u56de\u672c\u56fd\u7684\u65c5\u884c\u65b9\u9762\u7ee7\u7eed\u53d6\u5f97\u8fdb\u5c55\u3002\n\u8be5\u90ae\u8f6e\u516c\u53f8\u8868\u793a\uff0c\u6bcf\u5929\u6709\u6570\u767e\u540d\u8239\u5458\u4e0b\u8239\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u67094000\u4eba\u8fd4\u56de\u5bb6\u56ed\u3002\n\u514b\u9c81\u65af\u516c\u4e3b\u544a\u8bc9CNN\uff0c\u8be5\u516c\u53f8\u4e00\u76f4\u5728\u79ef\u6781\u51c6\u5907\u548c\u63d0\u4f9b\u8239\u5458\u4e0b\u673a\u8bc1\u660e\uff0c\u4ee5\u7b26\u5408\u75be\u63a7\u4e2d\u5fc3\u7684\u653f\u7b56\uff0c\u8be5\u653f\u7b56\u575a\u6301\u673a\u7ec4\u4eba\u5458\u4e0d\u5f97\u5728\u9152\u5e97\u8fc7\u591c\uff0c\u4e0d\u5f97\u4e58\u5750\u516c\u5171\u4ea4\u901a\u5de5\u5177\u6216\u8fdb\u5165\u673a\u573a\u822a\u7ad9\u697c\u3002\nCaio Saldanha\u662f\u4e00\u540d\u6765\u81ea\u5df4\u897f\u7684DJ\uff0c\u76ee\u524d\u5728\u540d\u4eba\u65e0\u9650\u53f7\u4e0a\uff0c\u4ed6\u544a\u8bc9CNN\uff0c\u7687\u5bb6\u52a0\u52d2\u6bd4\u516c\u53f8\u62e5\u6709\u7684\u540d\u4eba\u516c\u53f8\u6b63\u5728\u5bfb\u627e\u8f6c\u8239\u6ede\u7559\u5728\u5df4\u54c8\u9a6c\u7fa4\u5c9b\u5404\u5730\u7684\u8239\u5458\uff0c\u4f5c\u4e3a\u9063\u8fd4\u52aa\u529b\u7684\u4e00\u90e8\u5206\u3002\nSaldanha\u548c\u4ed6\u7684\u672a\u5a5a\u59bb\u6770\u897f\u5361\u00b7\u5f17\u5170(Jessica Furlan)\u662f\u8239\u4e0a\u6d3b\u52a8\u7684\u4e3b\u6301\u4eba\uff0c\u4ed6\u4eec\u8868\u793a\uff0c\u4ed6\u4eec\u5728\u6d77\u4e0a\u7684\u6f2b\u957f\u7b49\u5f85\u53d8\u5f97\u66f4\u52a0\u4ee4\u4eba\u6cae\u4e27\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e8e3\u670814\u65e5\u5728\u8fc8\u963f\u5bc6\u83b7\u51c6\u767b\u8239\uff0c\u4e00\u5929\u524d\uff0c\u7f8e\u56fd\u653f\u5e9c\u53d1\u5e03\u4e86\u7981\u822a\u4ee4\uff0c\u6682\u505c\u4e86\u6240\u6709\u90ae\u8f6e\u822a\u884c\u3002\n3\u670823\u65e5\uff0cCelebrity Infinity\u7684\u8239\u8236\u7ba1\u7406\u4eba\u5458\u901a\u77e5\u8239\u5458\uff0c\u90a3\u4e9b\u57283\u67089\u65e5\u81f314\u65e5\u671f\u95f4\u5728\u8239\u4e0a\u7684\u4eba\u53ef\u80fd\u63a5\u89e6\u5230\u4e86\u51a0\u72b6\u75c5\u6bd2\u3002\u4e00\u540d\u5728\u6b64\u671f\u95f4\u4e0e\u8239\u5728\u4e00\u8d77\u7684\u8239\u5458\u88ab\u68c0\u6d4b\u51fa\u75c5\u6bd2\u5448\u9633\u6027\u3002\n\u52303\u670828\u65e5\uff0c\u968f\u7740\u8239\u8fdb\u5165\u5c01\u9501\uff0c\u8239\u5458\u4eec\u88ab\u9650\u5236\u5728\u81ea\u5df1\u7684\u8239\u8231\u5185\u3002\n\u4ed6\u8bf4\uff0c\u4ed6\u548c\u672a\u5a5a\u592b\u4ece\u4e00\u95f4\u4ed6\u8ba4\u4e3a\u53d1\u9709\u3001\u5c18\u571f\u98de\u626c\u3001\u73af\u5883\u975e\u5e38\u7cdf\u7cd5\u7684\u5c0f\u5c4b\u642c\u5230\u4e86\u4e00\u95f4\u8d28\u91cf\u66f4\u597d\u7684\u5c0f\u5c4b\uff0c\u5c3d\u7ba1\u90a3\u95f4\u5c0f\u5c4b\u6ca1\u6709\u7a97\u6237\u3002\n\u4e00\u4f4d\u5728\u7687\u5bb6\u52a0\u52d2\u6bd4\u6d77\u6e38\u8239\u5a31\u4e50\u90e8\u5de5\u4f5c\u7684\u82f1\u56fd\u8239\u5458\u8bf4\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u8239\u5458\u90fd\u5728\u8d1d\u58f3\u8231\u5185\uff0c\u6ca1\u6709\u65b0\u9c9c\u7a7a\u6c14\u6216\u81ea\u7136\u5149\u3002\u4ed6\u63a5\u53d7CNN\u91c7\u8bbf\u65f6\u8981\u6c42\u533f\u540d\uff0c\u62c5\u5fc3\u8fd9\u4f1a\u5f71\u54cd\u4ed6\u7684\u5de5\u4f5c\u3002\n\u8428\u5c14\u4e39\u54c8\u8bf4\uff0c\u4ed6\u5bf9\u540d\u4eba\u611f\u5230\u5931\u671b\u3002\u4ed6\u8bf4\uff0c\u4ece\u4e00\u5f00\u59cb\u5c31\u5e94\u8be5\u8981\u6c42\u4e25\u683c\u7684\u793e\u4ea4\u8ddd\u79bb\uff0c\u5e76\u8ba4\u4e3a\u4e00\u4e9b\u673a\u7ec4\u4eba\u5458\u6ca1\u6709\u8db3\u591f\u8ba4\u771f\u5730\u5bf9\u5f85\u75c5\u6bd2\u5a01\u80c1\u3002\n\u6839\u636e\u540d\u4ebaCEO\u4e3d\u838e\u00b7\u5362\u6258\u592b\u00b7\u4f69\u7f57\u5728\u4fe1\u4e2d\u6982\u8ff0\u7684\u65b0\u8ba1\u5212\uff0c\u8428\u5c14\u4e39\u54c8\u548c\u5f17\u5170\u5c06\u8f6c\u4e58\u7687\u5bb6\u52a0\u52d2\u6bd4\u7684\u72c2\u60f3\u66f2\uff0c\u7136\u540e\u4e58\u8239\u56de\u5bb6\u3002\n\u867d\u7136\u9063\u8fd4\u5de5\u4f5c\u4ecd\u5728\u8fdb\u884c\u4e2d\uff0c\u4f46\u5728\u7fe1\u7fe0\u516c\u4e3b\u53f7\u4e0a\uff0c\u83ab\u987f\u8bf4\uff0c\u4ed6\u6bcf\u5929\u7684\u7279\u70b9\u662f\u6bcf\u5929\u4e24\u6b21\u4f53\u6e29\u68c0\u67e5\uff0c\u6307\u5b9a\u7684\u7528\u9910\u65f6\u6bb5\u548c\u793e\u4ea4\u8ddd\u79bb\u3002\n\u4ed6\u8bf4\uff0c\u8fd9\u8258\u8239\u662f\u4e00\u5ea7\u9b3c\u57ce\uff0c\u6ca1\u6709\u4eba\u5916\u51fa\u8d70\u52a8\u3002\u5403\u996d\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u88ab\u6211\u4eec\u7684\u8239\u5206\u5f00\u4e86\u3002\u4e0d\u662f\u4e00\u4e2a\u4eba\u5750\u4e00\u5f20\u684c\u5b50\uff0c\u5c31\u662f\u4e24\u4e2a\u4eba\u5750\u4e00\u5f20\u684c\u5b50\uff0c\u6709\u8ddd\u79bb\u3002\n\u6211\u5728\u770b\u4e66\uff0c\u6211\u5728\u63a5\u89e6\u5dde\u4f17\u8bae\u5458\u548c\u4ee3\u8868\u3002\u6211\u6b63\u5728\u8054\u7cfb\u5f8b\u5e08\u3002\u6211\u5728\u505a\u8fd0\u52a8\uff0c\u6211\u5728\u505a\u6700\u591a30\u4e2a\u5065\u8eab\u5957\u8def\u3002\u6211\u8df3\u82ad\u857e\u821e\uff0c\u6216\u8005\u770b\u7535\u5f71\u3002\n\u5728\u4e16\u754c\u7684\u53e6\u4e00\u7aef\uff0c\u6fb3\u5927\u5229\u4e9a\u6f14\u5458\u5fb7\u9c81\u00b7\u8d39\u5c14\u5229(Drew Fairley)\u5728\u592a\u5e73\u6d0b\u63a2\u9669\u8005\u53f7(Pacific Explorer)\u4e0a\u7b49\u5f85\u9063\u8fd4\uff0c\u8fd9\u662f\u4ed6\u7b2c\u4e00\u6b21\u4e58\u5750\u90ae\u8f6e\u3002\u592a\u5e73\u6d0b\u63a2\u9669\u8005\u53f7\u662f\u5b9d\u6d01\u90ae\u8f6e\u6fb3\u5927\u5229\u4e9a\u516c\u53f8(P&amp\uff1bCruises)\u7684\u4e00\u8258\u8239\uff0c\u76ee\u524d\u6b63\u5728\u83f2\u5f8b\u5bbe\u3002\n\u8fd9\u8258\u8239\u4e8e3\u670816\u65e5\u5728\u6089\u5c3c\u8ba9\u4e58\u5ba2\u4e0b\u8239\uff0c\u4f46\u4e24\u5468\u540e\u88ab\u52d2\u4ee4\u79bb\u5f00\u3002\u622a\u81f35\u67085\u65e5\uff0c\u5b83\u505c\u6cca\u5728\u9a6c\u5c3c\u62c9\u6e7e\u5916\u3002\n\u8d39\u5229\u8bf4\uff1a4\u67082\u65e5\uff0c\u5f53\u6211\u4eec\u88ab\u8981\u6c42\u79bb\u5f00\u6089\u5c3c\u6e2f\u65f6\uff0c\u6211\u8fd8\u5728\u7b7e\u5408\u540c\u3002\u6211\u5df2\u7ecf\u5b8c\u6210\u4e86\u5269\u4f59\u7684\u5408\u540c\uff0c\u6211\u5c06\u4e58\u8239\u524d\u5f80\u9a6c\u5c3c\u62c9\uff0c\u8bd5\u56fe\u5c06\u5176\u9063\u8fd4\u56de\u6089\u5c3c\u3002\n\u4e3a\u4e86\u6253\u53d1\u98de\u673a\u4e0a\u7684\u65f6\u95f4\uff0cFairley\u2018s\u5f00\u59cb\u4e86\u4e00\u4e2a\u5728\u7ebf\u804a\u5929\u8282\u76ee\uff0c\u540d\u5b57\u6070\u5982\u5176\u5206\u5730\u53d6\u540d\u4e3a\u201c\u5b9e\u9645\u7684\u8231\u5ba4\u5b9e\u9645\u53d1\u70e7\u201d(Actual Cabin Actual Fever)\u3002\n\u4e16\u754c\u4e0a\u4ee4\u4eba\u60ca\u53f9\u7684\u521b\u9020\u6027\u6210\u679c\u7ed9\u4e86\u6211\u5f88\u5927\u7684\u542f\u53d1\u3002\u8d39\u5229\u8bf4\uff0c\u8fd9\u5c31\u50cf\u662f\u5bf9\u79d1\u7ef4\u5fb7\u9020\u6210\u7684\u60b2\u4f24\u548c\u6050\u60e7\u7684\u56de\u5e94\u3002\u6b4c\u66f2\u3001\u6f14\u5531\u4f1a\u3001\u827a\u672f\u54c1\u3001\u559c\u5267\u3001\u821e\u8e48\uff0c\u6709\u65f6\u53ea\u662f\u5728\u7f51\u4e0a\u95f2\u901b\u4e00\u6bb5\u65f6\u95f4\u3002\n\u8d39\u5c14\u5229\u5728\u4ed6\u7684Instagram@droozah\u4e0a\u5206\u4eab\u7684\u89c6\u9891\u5438\u5f15\u4e86\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684\u89c2\u4f17\u3002\u4ed6\u51b7\u5632\u70ed\u8bbd\u7684\u5e7d\u9ed8\u548c\u70ed\u60c5--\u6709\u670d\u88c5\u53d8\u5316\u548c\u6b4c\u66f2\uff0c\u8d39\u5c14\u5229\u626e\u6f14\u591a\u4e2a\u89d2\u8272--\u662f\u5927\u70ed\u7684\u79d8\u8bc0\u3002\n\u4ed6\u4eec\u975e\u5e38\u611a\u8822\uff0c\u4f46\u968f\u7740\u65c5\u9014\u53d8\u5f97\u8d8a\u6765\u8d8a\u79bb\u5947\uff0c\u4ed6\u4eec\u53d8\u5f97\u8d8a\u9ed1\uff0c\u4ed6\u8bf4\u3002\n\u5bf9\u4e8e\u8d39\u5c14\u5229\u6765\u8bf4\uff0c\u4ed6\u7684\u89c6\u9891\u63d0\u4f9b\u4e86\u4e00\u4e2a\u521b\u9020\u6027\u7684\u51fa\u53e3--\u5e76\u5e2e\u52a9\u5728\u4e0e\u4e16\u9694\u7edd\u671f\u95f4\u5efa\u7acb\u4e86\u8054\u7cfb\u3002\n&#34\uff1b\u53cd\u5e94\u662f\u7535\u6027\u7684\u3002\u8fd9\u4e48\u591a\u4eba\u5728\u53d1\u4fe1\u606f\u3002\u5728\u8fd9\u4e2a\u5145\u6ee1\u538b\u529b\u7684\u65f6\u671f\uff0c\u4eba\u4eec\u9700\u8981\u54af\u54af\u5730\u7b11\u4e00\u7b11\u3002\n\u6fb3\u5927\u5229\u4e9a\u5b9d\u6d01\u90ae\u8f6e(P&amp\uff1bO Cruises)\u7684\u6bcd\u516c\u53f8\u5609\u5e74\u534e\u516c\u53f8(Carnival Corporation)\u8868\u793a\uff0c\u8be5\u516c\u53f8\u53d7\u5230\u7269\u6d41\u95ee\u9898\u7684\u963b\u788d\uff0c\u4f46\u6b63\u5728\u52aa\u529b\u9063\u8fd4\u5458\u5de5\u3002\n\u5609\u5e74\u534e\u90ae\u8f6e\u516c\u53f8\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u5728\u7ed9CNN\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff0c\u6211\u4eec\u7684\u9996\u8981\u4efb\u52a1\u662f\u5ba2\u4eba\u548c\u673a\u7ec4\u4eba\u5458\u7684\u5b89\u5168\u548c\u5065\u5eb7\uff0c\u4ee5\u53ca\u5408\u89c4\u548c\u73af\u5883\u4fdd\u62a4\u3002\n\u6211\u4eec\u76ee\u524d\u6b63\u5728\u52aa\u529b\u5c06\u6682\u505c\u671f\u95f4\u7684\u673a\u7ec4\u4eba\u5458\u9063\u8fd4\u56de\u4ed6\u4eec\u5404\u81ea\u7684\u56fd\u5bb6\u3002\n\u6700\u8fd1\u51e0\u5929\uff0c\u7531\u4e8e\u6e2f\u53e3\u5173\u95ed\u548c\u5176\u4ed6\u65c5\u884c\u9650\u5236\uff0c\u8fd9\u4e00\u70b9\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u4f46\u6211\u4eec\u7ee7\u7eed\u53d6\u5f97\u5f3a\u52b2\u8fdb\u5c55\u3002\n\u56de\u5230\u4e16\u754c\u7684\u53e6\u4e00\u7aef\uff0c\u83ab\u987f\u5bf9\u4ed6\u7684\u7956\u56fd\u5185\u90e8\u7684\u53cc\u91cd\u6807\u51c6\u8868\u793a\u5931\u671b\u3002\n\u6211\u89c9\u5f97\u6e38\u8f6e\u884c\u4e1a\uff0c\u6211\u4eec\u6b63\u5728\u88ab\u8bcb\u6bc1\u3002\u6211\u89c9\u5f97\u6211\u4eec\u6210\u4e86\u66ff\u7f6a\u7f8a\uff0c\u4ed6\u8bf4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6bd4\u7f8e\u56fd\u4efb\u4f55\u4eba\u90fd\u66f4\u786e\u4fe1\u81ea\u5df1\u8eab\u4f53\u5065\u5eb7\uff0c\u5728\u8239\u4e0a\u7684\u6761\u4ef6\u6bd4\u4efb\u4f55\u4eba\u90fd\u4e25\u683c\u3002\n\u5bf9\u4e8e\u83ab\u987f\u6765\u8bf4\uff0c\u4e00\u4e2a\u8f6c\u6298\u70b9\u662f\u542c\u8bf4\u4f5b\u7f57\u91cc\u8fbe\u5dde\u6b63\u5728\u5f00\u653e\u6d77\u6ee9\u548c\u4f01\u4e1a\uff0c\u4f46\u636e\u62a5\u9053\u62d2\u7edd\u7f8e\u56fd\u6e38\u8f6e\u8239\u5458\u5165\u5883\u3002\n\u6211\u89c9\u5f97\u6211\u4eec\u6b63\u88ab\u5f53\u4f5c\u6ca1\u6709\u72af\u7f6a\u7684\u7f6a\u72af\u5bf9\u5f85\uff0c\u6211\u4eec\u7684\u56fd\u5bb6\u62d2\u7edd\u6211\u4eec\u5165\u5883\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5df2\u7ecf\u8ddf\u8e2a\u6211\u4eec\u7684\u5065\u5eb7\u72b6\u51b5\u4e00\u4e2a\u591a\u6708\u4e86\uff0c\u800c\u4e14\u6211\u4eec\u6ca1\u6709\u751f\u75c5\uff0c\u8fd9\u662f\u2026\u6211\u53ea\u662f\u771f\u7684\u5728\u4e3a\u8fd9\u79cd\u5fc3\u6001\u800c\u82e6\u82e6\u6323\u624e\u3002\u662f\u4ec0\u4e48\u8ba9\u8fd9\u6ca1\u95ee\u9898\u5462\uff1f&#34\uff1b\n\u963f\u5fb7\u91d1\u65af\u5728\u5df4\u5df4\u591a\u65af\u9644\u8fd1\u7684\u6d77\u6d0b\u81ea\u7531\u53f7\u4e0a\u8bf4\uff0c\u4ed6\u5c06\u7ee7\u7eed\u6218\u6597\uff0c\u4e3a\u90a3\u4e9b\u88ab\u56f0\u5728\u6d77\u4e0a\u7684\u4eba\u7167\u4eae\u5149\u660e\uff0c\u5373\u4f7f\u4ed6\u4e0a\u5cb8\u540e\u4e5f\u662f\u5982\u6b64\u3002\n\u4ed6\u8bf4\uff1a\u6211\u771f\u7684\u53ea\u60f3\u5411\u4e16\u754c\u5404\u56fd\u653f\u5e9c\u5f3a\u8c03\uff0c\u4e0d\u8981\u518d\u8bf4\u6700\u540e\u4e00\u8258\u6e38\u8f6e\u5df2\u7ecf\u56de\u5bb6\u4e86\uff0c\u6e38\u8f6e\u4e0a\u7684\u6700\u540e\u4e00\u6279\u4eba\u5df2\u7ecf\u56de\u5bb6\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e0e\u4e8b\u5b9e\u76f8\u53bb\u751a\u8fdc\u3002", "note_en": "(CNN) \u2014  Most cruise passengers  have made their way back home, and the vast ships that once ferried them from port to port are moored up or back on the water, relocating for the next stage in their journeys.\n But what about the crews that kept these gigantic vessels going, and looked after guests as panic over the coronavirus swept across the oceans?\n  For many of those working in the cruise industry, the nightmare of being aboard a ship that had carried people with coronavirus has continued -- sometimes without an end in sight.\n Isolated, denied the swift repatriations offered to passengers and, in some cases, made to endure tough conditions without pay, some of those sequestered at sea have been describing the bureaucratic tangle that has trapped them, often within meters of shore.\n &#34;I&#39;m hoping we don&#39;t get forgotten about, to be honest,&#34; says MaShawn Morton, who works for Princess Cruises. &#34;It seems like nobody cares what&#39;s happening to us out here.&#34;\n As of May 5, there were over 57,000 crew members still aboard 74 cruise ships in and around US ports and the Bahamas and the Caribbean, according to the US Coast Guard. Many more hundreds were stuck on vessels elsewhere across the world&#39;s oceans.\n With no passengers to look after and their quarantines completed, the employees are left wondering why they haven&#39;t been allowed home.\n In American waters, cruise ships have been mired in regulations imposed by the Centers for Disease Control and Prevention, the US health protection agency.\n The  CDC&#39;s official line is that crew members can only be permitted to disembark for repatriation or transfer between ships provided they&#39;ll be transported by specially chartered aircraft or personal vehicles.\n  Cruise ship crew unaffected by Covid-19  are able to disembark and travel via commercial aviation, but only on a case-by-case basis with prior CDC approval. The cruise line must complete a statement &#34;attesting to the status of the ship as free of COVID-19.&#34;\n Until last weekend, the legal consequences of breaching these regulations have, according to some crew, delayed cruise lines from agreeing to them.\n On Sunday, Royal Caribbean and its brands, including Celebrity Cruise Line, reached an agreement with the CDC for disembarking crew, writing to employees to say that it would adhere to the strict guidelines and abide by their implications.\n &#34;The CDC has asked me and other cruise line leaders to sign a letter limiting our options for getting you home and taking responsibility for your actions in order to secure their approval to disembark you,&#34; writes Celebrity Cruises CEO Lisa Lutoff-Perlo, in a letter seen by CNN.\n &#34;In the spirit of doing everything we possibly can to get you home, I have decided to sign this letter.&#34;\n Other cruise lines may follow suit, but a combination of wariness surrounding cruise ships, the details and implications of the CDC&#39;s policies, a lack of commercial flights, widespread travel bans and ongoing uncertainties means many crews remain stuck.\n   American Alex Adkins, a senior stage technician on Freedom of the Seas, a Royal Caribbean ship, has been waiting at sea since mid-March when the vessel&#39;s guests were offloaded in Miami.\n  &#34;Since then, we&#39;ve had no guests and we&#39;ve just been floating off the coast of Barbados,&#34; he says.\n For the first week, the crew took advantage of the Freedom of the Seas&#39; pool and the gym, enjoying facilities empty of guests. Then, they went into a mandatory two-week self-isolation, says Adkins.\n Adkins tells CNN that crew members have since been told that they&#39;re no longer considered working employees and they were paid out through the end of April.\n He said efforts to charter flights to get the crew home stalled repeatedly because Royal Caribbean had yet to sign up to CDC procedures, but he accepts the cruise line was in a difficult position before it finally agreed to the conditions.\n &#34;Our leaders signed it in hopes of getting us home soon and safely, and I hope everyone going home understands the huge sacrifice they made,&#34; says Adkins.\n For Adkins, and many of those on board, the new development has been &#34;an incredible morale boost&#34; and he describes &#34;a tangible electricity permeating through the fleet.&#34;\n That said, he&#39;s aware that many workers on other ships remain in a floating purgatory.\n Cruise Lines International Association, the body that oversees the majority of the world&#39;s cruise lines, tells CNN it is &#34;working with the CDC to address these unprecedented challenges and repatriate crew members as soon as possible.&#34;\n The situation, says a CLIA representative, is &#34;very complex&#34; and &#34;is evolving day by day.&#34;\n  Morton is another crew member still waiting to get home. He says he&#39;s worked with Princess Cruises for about five years and started his fourth Princess contract earlier this year, on board the Sky Princess, a gigantic, gleaming ship that can accommodate 3,660 passengers and 1,346 crew.\n Morton&#39;s job was supposed to last until mid-October as the vessel sailed across the Caribbean, the Atlantic and over to the Baltics and traversed Europe. As the pandemic spread globally and cruises were canceled or recalled, the Sky Princess offloaded its passengers in Miami on March 14.\n Crew members, including Morton, remained on board, moored at the city&#39;s port. Home seems so close, yet so far.\n Morton says that at first, the mood was positive. Morton says crew entered roughly 20 days of self-isolation largely confined to cabins but understanding that they would then be able to disembark and head home.\n &#34;Once the passengers disembarked, we felt safe,&#34; says Morton. &#34;We didn&#39;t have any sign of sickness. We were glad that we were still being paid and employed.&#34;\n Toward the end of this period, Morton said he and his colleagues were told their contract would be formally coming to an end. He said they were informed they would no longer be paid from June onwards.\n &#34;We were actually pretty surprised at the length of time that they were still able to pay us,&#34; says Morton.\n  When quarantine on the Sky Princess came to an end in April, Princess started to trans-ship crewmembers -- moving crew between ships in order to group workers by nationalities so that they can then be sailed directly home or to an appropriate airport.\n It&#39;s a solution to the lack of commercial flights -- and the difficulties in getting the CDC to approve charters.\n   Not all are happy with this solution though. Sailing home can take weeks, where flights take hours. Plus, there&#39;s the ongoing threat of cross-infection.\n &#34;[When trans-shipping began] that&#39;s really when tensions and stress levels began to rise,&#34; says Morton.\n Plus, for American crew members, trans-shipping seemed to make little sense. They were docked in Miami, why couldn&#39;t they just disembark?\n The Sky Princess was a &#34;healthy&#34; ship, with no reported cases of Covid-19 and Morton was concerned he might move to one where passengers or crew had previously tested positive.\n &#34;People wanted to go home instead of going to another ship,&#34; he says. &#34;The information has been changing literally hour by hour, day by day. Not knowing what&#39;s happening has been very stressful.&#34;\n On April 25, Morton says he was moved from the Sky Princess to the Emerald Princess, along with other American employees of Princess Cruises, a transfer that took place in rough seas.\n &#34;The wave swells were very high, I actually took some videos to send to my mother of how bad the tender ship was rocking and then I ended up losing internet service,&#34; says Morton.\n It was a full 24 hours before Morton was able to reconnect with his panicked mother and assure her that he was OK.\n Morton says he recently heard Princess Cruises&#39; American crew are likely going to be moved again as part of the repatriation efforts, this time, to the Coral Princess, which saw Covid-19 fatalities earlier in the pandemic.\n &#34;Right now, we&#39;re hoping that before that happens, the CDC will release the ban, and allow Americans to enter the country,&#34; he says.\n Princess Cruises did not respond specifically to questions about why it&#39;s taken so long to process the crew&#39;s disembarkation, nor why US crew members moored in American ports were involved in the trans-shipping process rather than allowed to remain in situ until they could leave.\n A spokesperson told CNN the company is &#34;deeply committed to reuniting our shipboard team members with their families safely and continue to make progress with arranging travel to their home countries.&#34;\n The cruise line said hundreds of crew members disembark daily, with 4,000 returned home so far.\n Princess Cruises told CNN the company has been actively preparing and providing attestations for crew disembarkation in line with the CDC&#39;s policies, which insist that crew members must not stay overnight at a hotel, use public transport or enter airport terminals.\n    Caio Saldanha, a DJ from Brazil currently on board the Celebrity Infinity ship, tells CNN that Celebrity, owned by Royal Caribbean, is looking to trans-ship crew stuck on ships across the Bahamas, as part of repatriation efforts.\n Saldanha and his fianc\u00e9e Jessica Furlan, an on-board activities host, say their long wait at sea has been made all the more frustrating because they were allowed to board the ship on March 14 in Miami, a day after the US government issued a no-sail order suspending all cruise voyages.\n On March 23, Celebrity Infinity&#39;s ship management  informed crew that those who&#39;d been on board from March 9 through 14 could have been exposed to Covid-19. A crew member who&#39;d been with the ship during this period had tested positive for the virus.\n By March 28, the crew were confined to their cabins as the ship went into lockdown.\n   He says he and his fianc\u00e9 moved from a cabin he characterizes as moldy, dusty and in &#34;really bad condition,&#34; to a better-quality cabin, albeit one that didn&#39;t have windows.\n &#34;Almost all crew cabins are inside shell cabins, with no fresh air or natural light,&#34; says a British crew member who works in the entertainment department of a Royal Caribbean ship. He spoke to CNN on condition of anonymity, worried about the impact on his job.\n Saldanha says he feels let down by Celebrity. He says strict social distancing should have been mandated from the outset and feels the virus threat wasn&#39;t taken seriously enough by some crew members.\n  According to the new plan, outlined in Celebrity CEO Lisa Lutoff-Perlo&#39;s letter, Saldanha and Furlan will transfer to Royal Caribbean&#39;s Rhapsody and travel home by sea.\n    While repatriation efforts are ongoing, on board the Emerald Princess, Morton says his daily routine is characterized by twice daily temperature checks, designated meal slots and social distancing.\n &#34;The ship is a ghost town, nobody&#39;s out and about,&#34; he says. &#34;Mealtimes, we&#39;re all separated by our ships. And it&#39;s either one person to a table or two people to a table, with distance.&#34;\n  &#34;I&#39;m reading books, I&#39;m reaching out to state representatives and delegates. I&#39;m reaching out to lawyers. I&#39;m doing exercises, I&#39;m doing Max 30 Fitness routines. I do a ballet barre, or I watch movies.&#34;\n  On the other side of the world, Drew Fairley, an Australian actor working his first ever cruise, is awaiting repatriation while on board the Pacific Explorer, a P&amp;O Cruises Australia ship that&#39;s currently in the Philippines.\n The ship disembarked passengers on March 16 in Sydney but was ordered to leave two weeks later. As of May 5, it was moored outside Manila Bay.\n &#34;I was still under contract when we were asked to exit Sydney harbor on April 2,&#34; Fairley says. &#34;I&#39;ve played out the rest of my contract sailing to Manila to try and repatriate back to Sydney.\n   To pass time on board, Fairley&#39;s started an online chat show, appropriately entitled &#34;Actual Cabin Actual Fever.&#34;\n &#34;I was very inspired by the amazing creative output in the world. It was like a response to the sadness and fear Covid created,&#34; Fairley says. &#34;Songs, concerts, artwork, comedy, dance and sometimes just hanging out for a while online.&#34;\n Fairley&#39;s videos, shared on his Instagram,  @droozah, have attracted viewers from across the world. His sardonic humor and enthusiasm -- there are costume changes and songs and Fairley plays multiple characters -- were the recipe for a hit.\n &#34;They are very silly but as the journey became more bizarre the darker they become,&#34; he says.\n For Fairley, his videos have provided a creative outlet -- and helped inspire connections during isolation.\n &#34;The response is electric. So many people are sending in messages. People need a giggle in these stressful times.&#34;\n    Carnival Corporation, P&amp;O Cruises Australia&#39;s parent company, said it had been hampered by logistical problems but was working to repatriate its employees.\n &#34;The safety and health of our guests and crew, along with compliance and environmental protection, are our top priorities,&#34; said a Carnival Cruise Line spokesperson in a statement to CNN.\n &#34;We are currently engaged in the effort to repatriate crew members during our pause to their respective home countries.\n &#34;This has become more difficult in recent days because of port closings and other travel restrictions, but we continue to make strong progress.&#34;\n  Back on the other side of the world, Morton expresses frustration over what he sees as double standards within his homeland.\n &#34;I feel that the cruise ship industry, we&#39;re being vilified. I feel like we&#39;re being scapegoated,&#34; he says. &#34;In reality, it&#39;s more certain that I&#39;m healthy and have been under stricter conditions on board a ship than anybody in the States has been.&#34;\n For Morton, a tipping point was hearing that the state of Florida is opening beaches and businesses but reportedly denying entry to American cruise ship crew.\n &#34;I feel like we&#39;re being treated like criminals who have committed no crime, and for our country to refuse us entry, knowing that we&#39;ve been tracking our health for over a month now, and that we are not sick, is...I&#39;m just really struggling for the mindset of that. What makes that okay?&#34;\n Adkins, on board the Freedom of the Seas near Barbados, says he will continue to &#34;keep fighting&#34; to shine a light on those stuck at sea, even after he disembarks.\n  He says: &#34;I really just want to emphasize to all of the governments around the world to stop saying that the last cruise ship has come home, and the last people on cruise ships have come home, because that&#39;s so far from the truth.&#34;", "posttime": "2020-05-07 19:55:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6ede\u7559,stuck,\u8239\u5458", "title": "5.7\u4e07\u4eba\u4ecd\u6ede\u7559\u5728\u6e38\u8f6e\u4e0a", "title_en": "57,000 people are still stuck on cruise ships", "transed": 1, "url": "https://www.cnn.com/travel/article/cruise-ship-crew-stuck-at-sea/index.html", "via": "", "real_tags": ["\u6ede\u7559", "stuck", "\u8239\u5458"]}, {"category": "", "categoryclass": "", "imagename": "7dcfc7ba438ba9a205a0af90946c8ff9.jpg", "infoid": 1001051, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u56fd\u9632\u90e8\u5c31\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u53ca\u5176\u540e\u679c\u8fdb\u884c\u8c08\u5224\uff0c\u519b\u4e8b\u5165\u53e3\u5904\u7406\u7ad9\u6b63\u5728\u4e3a\u5c06\u51a0\u72b6\u75c5\u6bd2\u5e78\u5b58\u8005\u5e26\u5165\u670d\u52a1\u90e8\u95e8\u63d0\u4f9b\u65b0\u7684\u6307\u5bfc\u3002\n\u6839\u636e\u6700\u8fd1\u5728Twitter\u4e0a\u6d41\u4f20\u7684\u4e00\u4efdMEPCOM\u5907\u5fd8\u5f55\uff0c\u8fc7\u53bb\u7684\u51a0\u72b6\u75c5\u6bd2\u8bca\u65ad\u662f\u4e0d\u80fd\u8fdb\u884c\u5904\u7406\u7684\u3002\n\u5728\u75c5\u53f2\u9762\u8c08\u6216\u68c0\u67e5\u671f\u95f4\uff0c\u7ecf\u5b9e\u9a8c\u5ba4\u6d4b\u8bd5\u6216\u4e34\u5e8a\u533b\u751f\u8bca\u65ad\u8bc1\u5b9e\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u53f2\u5c06\u88ab\u6c38\u4e45\u53d6\u6d88\u8d44\u683c\u2026\u2026\u3002\u5907\u5fd8\u5f55\u4e0a\u5199\u7740\u3002\n\u201c\u5728\u7b5b\u67e5\u8fc7\u7a0b\u4e2d\uff0c\u62a5\u544a\u7684\u786e\u8bca\u51a0\u72b6\u75c5\u6bd2\u75c5\u53f2\u5c06\u6ce8\u660e\u2018\u8003\u8651\u53d6\u6d88\u8d44\u683c\u2019\u201dpic.twitter.com/ZKx91AUbXo\u3002\n-Free(@Nathaniel_Free)2020\u5e745\u67084\u65e5\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u5b83\u4e3a\u6b27\u6d32\u8bae\u4f1a\u5de5\u4f5c\u4eba\u5458\u5236\u5b9a\u4e86\u5904\u7406\u6f5c\u5728\u7684\u548c\u5df2\u786e\u8ba4\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u7684\u6307\u5bfc\u65b9\u9488\u3002\u8fd9\u4ece\u6240\u6709MEP\u7684\u7b5b\u67e5\u5f00\u59cb\uff0c\u5305\u62ec\u6d4b\u91cf\u4f53\u6e29\u548c\u56de\u7b54\u6709\u5173\u75c7\u72b6\u548c\u6f5c\u5728\u63a5\u89e6\u7684\u95ee\u9898\u3002\n\u6839\u636e\u8fd9\u4efd\u5907\u5fd8\u5f55\uff0c\u5982\u679c\u7533\u8bf7\u8005\u6ca1\u6709\u901a\u8fc7\u7b5b\u67e5\uff0c\u4ed6\u4eec\u5c06\u4e0d\u4f1a\u63a5\u53d7\u6d4b\u8bd5\uff0c\u4f46\u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u75c7\u72b6\uff0c\u4ed6\u4eec\u53ef\u4ee5\u572814\u5929\u5185\u8fd4\u56de\u3002\u4efb\u4f55\u88ab\u8bca\u65ad\u4e3a\u51a0\u72b6\u75c5\u6bd2\u7684\u4eba\u90fd\u5fc5\u987b\u7b49\u5230\u786e\u8bca\u540e28\u5929\u624d\u80fd\u5411MEPS\u62a5\u544a\u3002\n\u8fd4\u56de\u540e\uff0c\u8bca\u65ad\u7ed3\u679c\u5c06\u88ab\u6807\u8bb0\u4e3a\u201c\u6c38\u4e45\u53d6\u6d88\u201d\u52a0\u5165\u8d44\u683c\u3002\u65b0\u5175\u53ef\u4ee5\u7533\u8bf7\u8c41\u514d\u6240\u6709\u6c38\u4e45\u53d6\u6d88\u8d44\u683c\u7684\u60c5\u51b5\uff0c\u5305\u62ec\u5728\u51a0\u72b6\u75c5\u6bd2\u4e2d\u5e78\u5b58\u4e0b\u6765\u7684\u60c5\u51b5\u3002\u4e0d\u8fc7\uff0c\u5728\u6ca1\u6709\u5c31\u5904\u7406\u51a0\u72b6\u75c5\u6bd2\u7684\u4f8b\u5916\u60c5\u51b5\u63d0\u4f9b\u8fdb\u4e00\u6b65\u6307\u5f15\u7684\u60c5\u51b5\u4e0b\uff0c\u8986\u6838\u5f53\u5c40\u6ca1\u6709\u7406\u7531\u7ed9\u4e88\u8c41\u514d\u3002\nMaxwell\u62d2\u7edd\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4e0e\u5176\u4ed6\u4e0d\u6392\u9664\u670d\u5175\u5f79\u7684\u75c5\u6bd2\u6027\u975e\u6162\u6027\u75c5\u76f8\u6bd4\uff0c\u51a0\u72b6\u75c5\u6bd2\u8bca\u65ad\u5c06\u6c38\u4e45\u53d6\u6d88\u8d44\u683c\u3002\n\u7136\u800c\uff0c\u8003\u8651\u5230\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u6709\u9650\u7814\u7a76\uff0c\u519b\u4e8b\u533b\u7597\u4e13\u4e1a\u4eba\u58eb\u5728\u62db\u52df\u5e78\u5b58\u8005\u65f6\uff0c\u53ef\u80fd\u4f1a\u8bd5\u56fe\u89e3\u51b3\u51e0\u4e2a\u56e0\u7d20\uff1a\u75c5\u6bd2\u9020\u6210\u7684\u547c\u5438\u635f\u5bb3\u662f\u957f\u671f\u7684\u8fd8\u662f\u6c38\u4e45\u6027\u7684\uff0c\u4ee5\u53ca\u8fd9\u662f\u5426\u53ef\u4ee5\u8bc4\u4f30\uff1b\u5373\u4f7f\u6709\u4eba\u8fde\u7eed\u4e24\u6b21\u68c0\u6d4b\u5448\u9634\u6027\uff0c\u53cd\u590d\u53d1\u4f5c\u7684\u53ef\u80fd\u6027\uff1b\u4ee5\u53ca\u4e00\u8f6e\u51a0\u72b6\u75c5\u6bd2\u53ef\u80fd\u4e0d\u80fd\u4e3a\u672a\u6765\u63d0\u4f9b\u5b8c\u5168\u514d\u75ab\u529b\uff0c\u53ef\u80fd\u4f1a\u8ba9\u67d0\u4eba\u9762\u4e34\u518d\u6b21\u611f\u67d3\u5b83\u7684\u66f4\u9ad8\u98ce\u9669\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u66f4\u4e25\u91cd\u7684\u5e76\u53d1\u75c7\u3002\n\u8fd9\u4e00\u4e3e\u63aa\u51fa\u53f0\u4e4b\u9645\uff0c\u8fd9\u4e9b\u670d\u52a1\u673a\u6784\u6b63\u4e3a\u590f\u79cb\u65fa\u5b63\u7684\u6bd5\u4e1a\u540e\u62db\u8058\u4eba\u6570\u6fc0\u589e\u505a\u51c6\u5907\u3002\n\u6700\u8fd1\u51e0\u5468\uff0c\u65b0\u5b66\u5458\u5728\u5f00\u59cb\u57f9\u8bad\u4e4b\u524d\u90fd\u8fdb\u884c\u4e86100%\u7684\u51a0\u72b6\u75c5\u6bd2\u68c0\u6d4b\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5df2\u7ecf\u5728\u5357\u5361\u7f57\u6765\u7eb3\u5dde\u7684\u6770\u514b\u900a\u5821\u548c\u6d77\u519b\u9646\u6218\u961f\u62db\u52df\u5723\u5730\u4e9a\u54e5\u4ed3\u5e93\u53d1\u73b0\u4e86\u96c6\u7fa4\uff0c\u8fd9\u662f\u9646\u519b\u548c\u6d77\u519b\u9646\u6218\u961f\u6700\u5927\u7684\u521d\u59cb\u8fdb\u5165\u8bad\u7ec3\u8bbe\u65bd\u3002", "note_en": "As the Defense Department negotiates its way through the coronavirus pandemic and its fallout,  military entrance processing stations are working with new guidance when it comes to bringing  COVID-19 survivors into the services.\n    A past  COVID-19 diagnosis is a no-go for processing, according to a recently released MEPCOM memo circulating on Twitter.\n  \u201cDuring the medical history interview or examination, a history of COVID-19, confirmed by either a laboratory test or a clinician diagnosis, is permanently disqualifying ...\u201d the memo reads.\n  \u201cDuring the screening process, a reported history of confirmed COVID-19 will be annotated \u2018Considered disqualifying\u2019\u201c  pic.twitter.com/ZKx91AUbXo\n\u2014 Free (@Nathaniel_Free)  May 4, 2020\n    Specifically, it lays out guidelines for MEPS staff to deal with potential, as well as confirmed, coronavirus cases. That starts with screening at all MEPS, which includes taking a temperature and answering questions about symptoms and potential contact.\n    If an applicant fails screening, according to the memo, they won\u2019t be tested, but they can return in 14 days if they\u2019re symptom-free. Anyone who has been diagnosed with COVID-19 will have to wait until 28 days after diagnosis to report to MEPS.\n             Upon return, a diagnosis will be marked as \u201cpermanently disqualifying\u201d for accession. Recruits can apply for waivers for all permanently disqualifying conditions, including surviving COVID-19. However, without any further guidance for exceptions dealing with COVID-19, a review authority would have no justification to grant a waiver.\n  Maxwell declined to explain why a coronavirus diagnosis would be permanently disqualifying, compared to other viral, non-chronic illnesses that do not preclude military service.\n    However, given the limited research on COVID-19, there are likely a few factors that military medical professionals are trying to hash out when it comes to recruiting survivors: Whether respiratory damage from the virus is long-lasting or permanent, and whether that can be assessed; the likelihood of recurring flare-ups, even if someone has had two consecutive negative tests; and the possibility that one bout of COVID-19 might not provide full immunity for the future, and could potentially leave someone at a higher risk to contract it again, perhaps with worse complications.\n    The move comes as the services prepare for a surge of post-graduation recruits during the summer and fall high season.\n  In recent weeks, new trainees have been 100-percent tested for COVID-19 before starting training. So far, clusters have been discovered at  Fort Jackson, South Carolina, and  Marine Corps Recruit Depot San Diego, the Army and Marine Corps\u2019 biggest initial entry training installations.", "posttime": "2020-05-07 19:55:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coronavirus,\u51a0\u72b6\u75c5\u6bd2,\u75c5\u6bd2,\u5e78\u5b58\u8005,survivors", "title": "\u51a0\u72b6\u75c5\u6bd2\u5e78\u5b58\u8005\u88ab\u7981\u6b62\u53c2\u519b", "title_en": "Coronavirus survivors banned from joining the military", "transed": 1, "url": "https://www.militarytimes.com/news/your-military/2020/05/06/coronavirus-survivors-banned-from-joining-the-military/", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u5e78\u5b58\u8005", "survivors"]}]