[{"category": "", "categoryclass": "", "imagename": "4e6f3d78d5447bc65bc249cb9fadd9ec.png", "infoid": 1000494, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u65e9\u4e9b\u65f6\u5019\u5df2\u7ecf\u8ba8\u8bba\u4e86\u4e00\u4e9b\u6d41\u884c\u7528\u4f8b\u7684\u7f16\u5199\u8bb8\u53ef\u89c4\u5219\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u4e3a\u591a\u79df\u6237\u7cfb\u7edf\u7f16\u5199\u6743\u9650\u89c4\u5219\u3002\n\u5982\u679c\u60a8\u7684\u7528\u4f8b\u4e0d\u9700\u8981\u6bcf\u4e2a\u79df\u6237\u89d2\u8272(\u5373\u4e0d\u9700\u8981\u4e0a\u9762\u7684\u7b2c2\u70b9)\uff0c\u90a3\u4e48\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8981\u70b9\u4ee5\u83b7\u5f97\u66f4\u7b80\u5355\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u5c06\u6839\u636eGoogle Cloud Platform(GCP)\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\u7cfb\u7edf\u4e2d\u9884\u5b9a\u4e49\u7684\u89d2\u8272\u6765\u677e\u6563\u5730\u53d1\u5e03\u8fd9\u7bc7\u6587\u7ae0\u3002GCP\u7684\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\u7cfb\u7edf\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u7528\u4f8b\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u662f\u591a\u79df\u6237\u7684\uff0c\u800c\u4e14\u6bcf\u4e2a\u79df\u6237\u5185\u7684\u89d2\u8272\u4e5f\u662f\u5206\u5c42\u7684\u3002\n\u5728GCP\u4e2d\uff0c\u6bcf\u79cd\u8d44\u6e90\u7c7b\u578b\u90fd\u6709\u4e0e\u5176\u5173\u8054\u7684\u89d2\u8272\u3002\u4f8b\u5982\uff1a\u901a\u8fc7STORAGE_ADMIN\u3001STORAGE_EDITOR\u3001STORAGE_VIEWER\u89d2\u8272\u63a7\u5236\u5bf9Google\u4e91\u5b58\u50a8\u5b58\u50a8\u6876\u7684\u8bbf\u95ee\u3002\u7c7b\u4f3c\u5730\uff0c\u89d2\u8272COMPUTE_ADMIN\u3001COMPUTE_EDITOR\u3001COMPUTE_VIEWER\u7b49\u63a7\u5236\u5bf9\u8ba1\u7b97\u5f15\u64ce\u7684\u8bbf\u95ee\u3002\n\u89d2\u8272\u4e5f\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e2a\u8d44\u6e90\u3002\u4f8b\u5982\uff1a\u6bcf\u4e2a\u5b58\u50a8\u6876\u90fd\u6709\u4e00\u4e2a\u4e0e\u5176\u76f8\u5173\u8054\u7684storage_admin\u3001storage_edit\u3001storage_viewer\u89d2\u8272\u3002\u56e0\u6b64\uff0c\u7ed9\u5b9a\u5b58\u50a8\u6876\u7684storage_viewer\u53ea\u80fd\u8bbf\u95ee\u8be5\u5b58\u50a8\u6876\uff0c\u4f46\u5177\u6709\u5168\u5c40storage_viewer\u89d2\u8272\u7684\u7528\u6237\u53ef\u4ee5\u67e5\u770b\u4efb\u4f55\u5b58\u50a8\u6876\u3002\n\u5168\u5c40\u89d2\u8272\u548c\u6309\u8d44\u6e90\u89d2\u8272\u90fd\u662f\u5206\u5c42\u7684\uff0c\u5373\u5b58\u50a8\u7ba1\u7406\u5458\u53ef\u4ee5\u6267\u884c\u5b58\u50a8\u7f16\u8f91\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u4f55\u64cd\u4f5c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\n\u6700\u540e\uff0c\u6bcf\u4e2a\u89d2\u8272\u90fd\u662f\u9488\u5bf9\u6bcf\u4e2a\u9879\u76ee\u7684\uff0c\u56e0\u6b64\u7528\u6237\u53ef\u4ee5\u5728\u4e00\u4e2a\u9879\u76ee\u4e2d\u662fstorage_admin\uff0c\u800c\u5728\u53e6\u4e00\u4e2a\u9879\u76ee\u4e2d\u662fstorage_edit\u3002\n\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86Projects\u8868\u548cUsers\u8868\uff0c\u4ee5\u8ddf\u8e2a\u7cfb\u7edf\u4e2d\u7684\u9879\u76ee\u548c\u7528\u6237\u3002\u89d2\u8272\u8868\u5305\u542b\u6240\u6709\u89d2\u8272\u7684\u5217\u8868\u4ee5\u53ca\u5c42\u6b21\u7ed3\u6784\u4fe1\u606f\u3002USER_PROJECT_ROLES\u5c06\u7528\u6237\u6620\u5c04\u5230\u4ed6\u4eec\u5728\u9879\u76ee\u4e2d\u7684\u89d2\u8272\uff0c\u800cUSER_BACKET_ROLES\u5c06\u7528\u6237\u6620\u5c04\u5230\u7ed9\u5b9a\u5b58\u50a8\u6876\u4e2d\u7684\u89d2\u8272\u3002\n\u6211\u4eec\u8fd8\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4ecestorage_bucket\u5230user_bucket_Roles\u7684\u4e00\u5bf9\u4e00\u5173\u7cfbUSER_BACKET_ROLES\u3002\u8bf7\u6ce8\u610f\uff0c\u6309\u7167\u901a\u7528\u7ea6\u5b9a\uff0c\u5173\u7cfb\u548c\u76ee\u6807\u8868\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002\n\u6ce8\u610f\uff1a\u867d\u7136GCP\u6709\u5f88\u591a\u8d44\u6e90\uff0c\u4f46\u5728\u4e0a\u9762\u7684\u6a21\u5f0f\u4e2d\uff0c\u6211\u4eec\u53ea\u5305\u542b\u4e86STORAGE_BUCKETS\u8868\u3002\u6211\u4eec\u5c06\u7814\u7a76\u5982\u4f55\u7f16\u5199\u6b64\u8868\u7684\u6743\u9650\u89c4\u5219\u3002\u5176\u4ed6\u8868\u7684\u6743\u9650\u89c4\u5219\u5c06\u7c7b\u4f3c\u3002\n\u5728\u5b9e\u8df5\u4e2d\u521b\u5efa\u4e00\u4e2aStorage Bucket\u53ef\u80fd\u4f1a\u6d89\u53ca\u591a\u4e2a\u670d\u52a1\u4e4b\u95f4\u7684\u534f\u8c03\u3001\u5206\u914d\u7a7a\u95f4\u7b49\u3002\u672c\u5e16\u5b50\u7684\u76ee\u6807\u53ea\u662f\u89e3\u91ca\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u4f3c\u4e8eGCP\u7684\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\u7cfb\u7edf\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u5f88\u65b9\u4fbf\u5730\u5ffd\u7565\u8fd9\u4e9b\u590d\u6742\u6027\u3002\n\u4e0e\u524d\u4e00\u7bc7\u6587\u7ae0\u4e2d\u7684\u793a\u4f8b3\u7c7b\u4f3c\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e0b\u9762\u7684\u8981\u70b9\u5c06USER_PROJECT_ROLES\u548cUSER_BACKET_ROLES\u5c55\u5e73\u4e3aFLATEED_USER_PROJECT_ROLES\u548cFLATEED_USER_BOCK_ROLE\u3002\u8fd9\u4f7f\u6211\u4eec\u4e0d\u5fc5\u62c5\u5fc3\u89d2\u8272\u7684\u5c42\u6b21\u7ed3\u6784\u3002\n\u4f8b\u5982\uff0c\u5982\u679c\u5728USER_PROJECT_RULES\u8868\u4e2d\u4e3a\u7528\u6237\u5206\u914d\u4e86STORAGE_ADMIN\u89d2\u8272\uff0c\u5219FLATEED_USER_PROJECT_ROLES\u5c06\u67093\u884c\u4e3a\u5176\u5206\u914d\uff1astorage_admin\u3001storage_Editor\u548cstorage_viewer\u3002\n\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u89d2\u8272\u8fdb\u884c\u4e86\u5efa\u6a21\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528Hasura\u4e2d\u540d\u4e3aUser\u7684\u5355\u4e2a\u89d2\u8272\u6765\u5b9a\u4e49\u6743\u9650\u89c4\u5219\u3002\u6211\u4eec\u5047\u8bbe\u4f1a\u8bdd\u53d8\u91cfX-Hasura-User-ID\u5305\u542buser_id\uff0cX-Hasura-Project-ID\u5305\u542b\u7528\u6237\u8bd5\u56fe\u8bbf\u95ee\u7684\u9879\u76ee\u3002\nSTORAGE_BUKETS\u4e0a\u7684\u6743\u9650\u89c4\u5219\u5982\u679c\u7528\u6237\u5728\u7ed9\u5b9a\u5b58\u50a8\u6876\u4e0a\u5177\u6709STORAGE_VIEWER\u89d2\u8272\u6216\u5177\u6709\u5168\u5c40STORAGE_VIEWER\u89d2\u8272\uff0c\u5219\u53ef\u4ee5\u67e5\u770bSTORAGE_BUKET\u3002\n{&#34\uff1b_AND&#34\uff1b\uff1a[{&#34\uff1b_EXISTS&#34\uff1b\uff1a{&#34\uff1b_TABLE&#34\uff1b\uff1a{&#34\uff1bSCHEMA&#34\uff1b\uff1a&#34\uff1bPUBLIC&#34\uff1b\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1bFLATEED_USER_PROJECT_ROLES&#34\uff1b}\uff0c&#34\uff1b_WHERE&#34\uff1b\uff1a{&#34\uff1b_AND&#34\uff1b\uff1a[{&#34\uff1buser_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bX-hasura-user-id&#34\uff1b}}\uff0c{&#34\uff1b\u89d2\u8272id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bstorage_viewer&#34\uff1b}}\uff0c{&#34\uff1bproject_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bX-Hasura-Project-ID&#34\uff1b}}]}\uff0c{&#34\uff1bproject_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bX-Hasura-Project-ID&#34\uff1b}}]}\u3002\n\u4e0a\u9762\u7684JSON\u4f7f\u7528_EXISTS\u8fd0\u7b97\u7b26\u68c0\u67e5fltened_user_project_Roles\u4e2d\u662f\u5426\u5b58\u5728\u5177\u6709\u7ed9\u5b9a\u89d2\u8272\u3001project_id\u548cuser_id\u7684\u884c\u3002\n{&#34\uff1bUSER_Bucket_Roles&#34\uff1b\uff1a{&#34\uff1b_and&#34\uff1b\uff1a[{&#34\uff1buser_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bX-Hasura-User-ID&#34\uff1b}}\uff0c{&#34\uff1bRole_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bstorage_viewer&#34\uff1b}}]}\u3002\n\u5728\u4e0a\u9762\u7684\u89c4\u5219\u4e2d\uff0cUSER_BACKET_ROLES\u662fSTORAGE_BUCKTS\u548cUSER_BACKET_ROLES\u4e4b\u95f4\u7684\u591a\u5bf9\u591a\u5173\u7cfb\u3002Hasura\u901a\u8fc7\u83b7\u53d6\u5f53\u524d\u884c\u7684USER_BUTCH_ROLES\u5e76\u9a8c\u8bc1USER_ID\u548cROLE_ID\u662f\u5426\u7b49\u4e8e\u7ed9\u5b9a\u503c\u6765\u8bc4\u4f30\u89c4\u5219\u3002\n{&#34\uff1b_or&#34\uff1b\uff1a[{&#34\uff1b_and&#34\uff1b\uff1a[{&#34\uff1b_EXISTS&#34\uff1b\uff1a{&#34\uff1b_table&#34\uff1b\uff1a{&#34\uff1bschema&#34\uff1b\uff1a&#34\uff1bpublic&#34\uff1b\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u6241\u5e73\u5316_USER_PROJECT_ROLES&#34\uff1b}\uff0c&#34\uff1b_WHERE&#34\uff1b\uff1a{&#34\uff1b_and&#34\uff1b\uff1a[{&#34\uff1buser_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bX-Hasura-User-ID&#34\uff1b}}\uff0c{&#34\uff1bRole_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bstorage_viewer&#34\uff1b}}\uff0c{&#34\uff1bproject_id&#34\uff1b\uff1a{&#34\uff1b_eq&#34\uff1b\uff1a&#34\uff1bX-Hasura-Project-ID&#34\uff1b}}]}\uff0c{&#34\uff1bproject_id&#34\uff1b\uff1a.\u3002\n\u66f4\u65b0", "note_en": "We had earlier  covered writing permission rules for few popular use cases. In this post we will look at writing permission rules for a multi-tenant system.\n   If your use case does not require per tenant roles (i.e. does not require point 2. above), then have a look at this  gist for a simpler implementation. We will loosely base this post on  predefined roles in Google cloud platform&#39;s (GCP) role-based access control system. GCP&#39;s role-based access control system is an interesting use case because it is not only multi-tenant, the roles within each tenant are also hierarchical.\n  In GCP, every resource type has roles associated with it. For example: access to Google cloud storage buckets is controlled using  storage_admin,  storage_editor,  storage_viewer roles. Similarly roles  compute_admin,  compute_editor,  compute_viewer, etc control access to the compute engines.\n Roles can be per resource as well. For eg: Each bucket has a  storage_admin,  storage_editor,  storage_viewer role associated with it. So a  storage_viewer for a given bucket can access only that bucket but a someone with a  global  storage_viewer role can view any bucket.\n Both global roles and per resource roles are hierarchical i.e a  Storage Admin can do anything a  Storage Editor can do, etc.\n Finally, every role is per project so a user can be  storage_admin in one project but be  storage_editor in another.\n     We have \u00a0a  projects table and a  users table to keep track of projects and users in the system.  roles table has the list of all roles along with hierarchy information.  user_project_roles maps users to their roles in a project and  user_bucket_roles maps users to their roles for a given bucket.\n We will also assume that we&#39;ve created a one-to-one relationship  user_bucket_roles from  storage_buckets to  user_bucket_roles. Note that keeping with the common convention, the relationship and the target table have the same name.\n Note: While GCP has many resources, in the above schema we have only included the  storage_buckets table. We will be looking at how to write permission rules for this table. Permission rules for other tables would be similar.\n Creating a  Storage Bucket in practice will probably involve coordinating between multiple services, allocating space, etc. The goal for this post is to only explain how to implement a system similar to GCP&#39;s role-based access control system. As such, we will conveniently ignore these complexities.\n  Similar to  Example 3 in the previous post we will flatten  user_project_roles and  user_bucket_roles into  flattened_user_project_roles and  flattened_user_bucket_roles using the gist below. This allows us to not worry about the hierarchy in the roles.\n For example if a user is assigned the  storage_admin role in the  user_project_rules table,  flattened_user_project_roles will have 3 rows assigning them:  storage_admin,  storage_editor and  storage_viewer.\n  Since we have modeled the roles in the database, we will use a single role called  user in Hasura to define permissions rules. We will assume that the session variable  X-Hasura-User-Id contains the  user_id and  X-Hasura-Project-Id contains the project that the user is trying to access.\n Permission rules on storage_buckets  A user can view a  storage_bucket if they have the  storage_viewer role on the given bucket or they have the global  storage_viewer role.\n  { &#34;_and&#34;: [ { &#34;_exists&#34;: { &#34;_table&#34;: { &#34;schema&#34;: &#34;public&#34;, &#34;name&#34;: &#34;flattened_user_project_roles&#34; }, &#34;_where&#34;: { &#34;_and&#34;: [ { &#34;user_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-User-Id&#34; } }, { &#34;role_id&#34;: { &#34;_eq&#34;: &#34;storage_viewer&#34; } }, { &#34;project_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-Project-ID&#34; } } ] } } }, { &#34;project_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-Project-ID&#34; } } ]}\n The above JSON uses the  _exists operator to check if there is a row in the  flattened_user_project_roles with the given role, project_id and user_id.\n  { &#34;user_bucket_roles&#34;: { &#34;_and&#34;: [ { &#34;user_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-User-Id&#34; } }, { &#34;role_id&#34;: { &#34;_eq&#34;: &#34;storage_viewer&#34; } } ] }}\n In the above rule  user_bucket_roles is a many-to-many relationship between  storage_buckets and  user_bucket_roles. Hasura evaluates the rule by fetching  user_bucket_roles for the current row and validating that  user_id and  role_id are equal to the given values.\n  { &#34;_or&#34;: [ { &#34;_and&#34;: [ { &#34;_exists&#34;: { &#34;_table&#34;: { &#34;schema&#34;: &#34;public&#34;, &#34;name&#34;: &#34;flattened_user_project_roles&#34; }, &#34;_where&#34;: { &#34;_and&#34;: [ { &#34;user_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-User-Id&#34; } }, { &#34;role_id&#34;: { &#34;_eq&#34;: &#34;storage_viewer&#34; } }, { &#34;project_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-Project-ID&#34; } } ] } } }, { &#34;project_id&#34;:  ...\n  Update permissions would look the same as the select permissions except we would be using the role_id  storage_editor instead of  storage_viewer\n We also we need to prevent the user from updating the  project_id column of a bucket:\n   Delete permissions would again look the same as the select permissions except we would be using the role_id  storage_admin instead of  storage_viewer\n   { &#34;_exists&#34;: { &#34;_table&#34;: { &#34;schema&#34;: &#34;public&#34;, &#34;name&#34;: &#34;flattened_user_project_roles&#34; }, &#34;_where&#34;: { &#34;_and&#34;: [ { &#34;user_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-User-Id&#34; } }, { &#34;role_id&#34;: { &#34;_eq&#34;: &#34;storage_admin&#34; } }, { &#34;project_id&#34;: { &#34;_eq&#34;: &#34;X-Hasura-Project-ID&#34; } } ] } }}\n We also want the  project_id of the created bucket to be  X-Hasura-Project-Id. We can do this using column presets:\n   We also need rules that allow certain users to assign or remove the roles of other users. We can have roles  role_admin &amp;  role_viewer for being able to edit and view user roles respectively. Permission rules on  user_project_roles and  user_bucket_roles would then look similar to the insert permission rule on  storage_buckets with the role name changed.\n  In this post we&#39;ve seen how to implement permission rules for a full-fledged hierarchical multi-tenant system. Postgres Views and Hasura&#39;s Permission DSL make a rather powerful combination!\n If you are using Hasura and need help with authorization, or want to share some interesting use cases you have implemented, ping us on  Discord or tweet to us at  @HasuraHQ!\n      Hasura is an  open-source engine that gives you realtime GraphQL APIs on new or existing Postgres databases, with built-in support for stitching custom GraphQL APIs and triggering webhooks on database changes.", "posttime": "2020-05-03 22:39:58", "tags": "google,\u7cfb\u7edf,rules,\u89d2\u8272,roles", "title": "\u591a\u79df\u6237\u7cfb\u7edf\u7684\u6388\u6743\u89c4\u5219-Google\u4e91\u5e73\u53f0", "title_en": "Authorization rules for a multi-tenant system \u2013 Google cloud platform", "transed": 1, "url": "https://hasura.io/blog/authorization-rules-for-multi-tenant-system-google-cloud/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["google", "\u7cfb\u7edf", "rules", "\u89d2\u8272", "roles"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000493, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u56f0\u6270\u6211\u4e00\u751f\u7684\u95ee\u9898\u662f\u8eab\u4efd\u95ee\u9898\u3002\u5982\u679c\u7b97\u4e0a\u6211\u7684\u7231\u597d\u5e74\u9650\uff0c\u6211\u5df2\u7ecf\u7f16\u7a0b\u5341\u591a\u5e74\u4e86\u3002\u7136\u800c\uff0c\u6211\u7684\u5174\u8da3\u4e00\u76f4\u8981\u5e7f\u6cdb\u5f97\u591a-\u7ecf\u6d4e\u5b66\u3001\u5fc3\u7406\u5b66\u3001\u6570\u5b66-\u6211\u6d89\u8db3\u7684\u4e8b\u60c5\u5f88\u957f\uff0c\u800c\u4e14\u8fd8\u5728\u4e0d\u65ad\u589e\u52a0-\u8bbe\u8ba1\u3001\u5199\u4f5c\u3001\u77e2\u91cf\u827a\u672f\u3001\u7167\u7247\u7f16\u8f91\u3001\u56fd\u9645\u8c61\u68cb\u3002\u6211\u662f\u4e2a\u4e66\u672c\u4e0a\u7684\u5916\u884c\u3002\u5728\u4f60\u7684\u4e00\u751f\u4e2d\u53ea\u6709\u4e00\u4e2a\u8ffd\u6c42\u7684\u60f3\u6cd5\u5bf9\u6211\u6ca1\u6709\u5438\u5f15\u529b\uff0c\u4e5f\u8bb8\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u6211\u4eba\u751f\u4e2d\u66f4\u5927\u7684\u56f0\u60d1\uff1a\u6211\u7684\u201c\u4f7f\u547d\u201d\u662f\u4ec0\u4e48\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u5341\u5e74\u6216\u4e8c\u5341\u5e74\u91cc\uff0c\u6211\u5e94\u8be5\u5feb\u4e50\u5730\u505a\u4e9b\u4ec0\u4e48\u5462\uff1f\u7f16\u7a0b\u662f\u6211\u4ece\u4e8b\u65f6\u95f4\u6700\u957f\u7684\u5de5\u4f5c\u3002\u6211\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u559c\u6b22\u5b83(\u81f3\u5c11\uff0c\u5f53\u5b98\u50da\u4e3b\u4e49\u6597\u4e89\u51cf\u5c11\u7684\u65f6\u5019)\uff0c\u4f46\u5728\u8fc7\u53bb\u76845-6\u5e74\u91cc\uff0c\u6211\u4e0d\u559c\u6b22\u88ab\u79f0\u4e3a\u7a0b\u5e8f\u5458\u3002\u5728\u6211\u7684\u4e1a\u4f59\u7231\u597d\u5c81\u6708\u91cc\uff0c\u6211\u4e0d\u6015\u4ec5\u4ec5\u4e3a\u4e86\u5236\u9020\u5b83\u7684\u4e50\u8da3\u800c\u5efa\u9020\u4e00\u4e9b\u611a\u8822\u7684\u4e1c\u897f\uff0c\u4f46\u8fd9\u4e9b\u90fd\u5728\u67d0\u4e9b\u65f6\u5019\u6d88\u5931\u4e86\u3002\n\u6211\u4e0d\u77e5\u9053\u5177\u4f53\u662f\u4ec0\u4e48\u65f6\u5019\u53d1\u751f\u7684\uff0c\u4f46\u6211\u77e5\u9053\u6709\u51e0\u4e2a\u5bfc\u706b\u7d22\u3002\u4f46\u6700\u5927\u7684\u95ee\u9898\u662f\u4e0e\u7f16\u7801\u76f8\u5173\u7684\u7eaf\u7cb9\u7684\u5446\u677f\u3002\n\u6211\u5f00\u59cb\u9119\u89c6\u81ea\u5df1\u662f\u4e66\u5446\u5b50\uff0c\u5c3d\u7ba1\u6211\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4e66\u5446\u5b50\u3002\u5f53\u6211\u5f00\u59cb\u66f4\u591a\u5730\u4e86\u89e3\u4e8b\u60c5\u7684\u5546\u4e1a\u65b9\u9762\u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u9010\u6e10\u53d1\u751f\u4e86\u3002\u5e15\u7279\u91cc\u514b\u00b7\u9ea6\u80af\u9f50(Patrick McKenzie)\u5728\u5176\u8457\u540d\u7684\u6587\u7ae0\u201c\u4e0d\u8981\u79f0\u81ea\u5df1\u662f\u7a0b\u5e8f\u5458\u201d\u4e2d\u5199\u9053\uff1a\n\u201c\u7a0b\u5e8f\u5458\u201d\u542c\u8d77\u6765\u5c31\u50cf\u662f\u201c\u628a\u4e00\u4e9b\u80e1\u8a00\u4e71\u8bed\u6253\u6210\u5176\u4ed6\u4e00\u4e9b\u80e1\u8a00\u4e71\u8bed\u7684\u4e0d\u540c\u5bfb\u5e38\u7684\u9ad8\u6210\u672c\u7684\u4eba\u201d\u3002\u5982\u679c\u4f60\u81ea\u79f0\u662f\u7a0b\u5e8f\u5458\uff0c\u90a3\u4e48\u6709\u4eba\u5df2\u7ecf\u5728\u60f3\u529e\u6cd5\u8ba9\u4f60\u88ab\u89e3\u96c7\u4e86\u3002\n\u7a0b\u5e8f\u5458\u5f00\u59cb\u89c9\u5f97\u81ea\u5df1\u50cf\u662f\u4e00\u4e2a\u70ed\u7231\u7f16\u7801\uff0c\u4f46\u5546\u4e1a\u667a\u6167\u4e0d\u8db3\u4ee5\u4ece\u4e2d\u83b7\u5f97\u66f4\u5927\u6536\u76ca\u7684\u4eba\uff0c\u4e00\u4e2a\u4e0d\u4e86\u89e3\u81ea\u5df1\u5de5\u4f5c\u4ef7\u503c\u7684\u7f16\u7801\u7334\u3002\u4e00\u4e2a\u611a\u8822\u7684\u526f\u4e1a\u5f00\u59cb\u542c\u8d77\u6765\u50cf\u662f\u6d6a\u8d39\u4e86\u8d5a\u66f4\u591a\u94b1\u7684\u6f5c\u529b\u3002\u6bd5\u7adf\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u6240\u6709\u7684\u65f6\u95f4\u6765\u5efa\u9020\u4e00\u4e9b\u6709\u5546\u4e1a\u610f\u4e49\u7684\u4e1c\u897f\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u7684\u6280\u672f\u6280\u80fd\u5f00\u59cb\u611f\u89c9\u592a\u6b63\u5e38\uff0c\u592a\u5e73\u6de1\u65e0\u5947\uff0c\u4ee5\u81f3\u4e8e\u4e0d\u518d\u91cd\u8981\u3002\u6bd5\u7adf\uff0c\u4e00\u4e2a\u53ea\u6709\u534a\u4e2a\u5927\u8111\u7684\u4eba\u53ef\u4ee5\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5185\u5b66\u4f1a\u505a\u6211\u505a\u8fc7\u7684\u5927\u591a\u6570\u80ae\u810f\u7684\u4e8b\u60c5(\u6211\u77e5\u9053\uff0c\u8003\u8651\u5230\u6240\u6709\u7684\u7ec6\u5fae\u5dee\u522b\uff0c\u8fd9\u4e0d\u662f\u771f\u7684\uff0c\u4f46\u8fd9\u662f\u6211\u76f8\u4fe1\u7684)\u3002\u662f\u7684\uff0c\u4f60\u4e0d\u7ba1\u600e\u6837\u90fd\u80fd\u62ff\u5230\u4e30\u539a\u7684\u85aa\u6c34\uff0c\u4f46\u4f60\u7684\u540c\u9f84\u4eba\u4e5f\u662f\u5982\u6b64\uff0c\u4e0d\u662f\u5417\uff1f\n\u6211\u60f3\u505a\u7684\u4e0d\u4ec5\u4ec5\u662f\u4e00\u540d\u7a0b\u5e8f\u5458\u3002\u4e00\u4f4d\u7cbe\u901a\u5546\u4e1a\u7684\u987e\u95ee\uff0c\u6216\u8005\u4e5f\u8bb8\u662f\u4e00\u4f4d\u4f01\u4e1a\u5bb6\u3002\u6211\u4e0d\u60f3\u8981\u7f16\u7801\u5668\u7684\u6807\u7b7e\u3002\u6211\u4e0d\u60f3\u628a\u7cbe\u529b\u6d6a\u8d39\u5728\u526f\u4e1a\u4e0a\uff0c\u9664\u975e\u4ed6\u4eec\u6709\u8d5a\u94b1\u7684\u6f5c\u529b\u3002\u6211\u60f3\u8981\u66f4\u591a\u7684\u5546\u4e1a\u98ce\u683c\u7684\u4e1c\u897f\uff1a\u63a5\u89e6\u5ba2\u6237\uff0c\u6216\u8005\u5efa\u7acb\u4e00\u4e2a\u7f51\u7edc\uff0c\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u54c1\u724c\u3002\n\u957f\u8bdd\u77ed\u8bf4\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u6ca1\u6709\u6210\u529f\u3002\u6211\u4e00\u76f4\u5f88\u559c\u6b22\u9020\u4e1c\u897f\uff0c\u4f46\u6211\u5728\u521b\u4e1a\u7684\u5176\u4ed6\u65b9\u9762\u4e0d\u662f\u5f88\u5728\u884c\u3002\u5efa\u9020\u4f1f\u5927\u7684\u4e1c\u897f\u7684\u6301\u7eed\u538b\u529b\u8ba9\u6211\u538b\u529b\u5f88\u5927\uff0c\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u6210\u529f\u53ef\u8a00\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a2016\u5e74\uff0c\u6211\u60f3\u6784\u5efa\u4e00\u6b3e\u5185\u5bb9\u8425\u9500\u5206\u6790\u8f6f\u4ef6\u3002\u6211\u8bd5\u7740\u5728\u5efa\u697c\u524d\u4ea4\u8c08\uff0c\u83b7\u5f97\u4e86\u4e00\u4e9b\u5174\u8da3\uff0c\u4f46\u6211\u88ab\u7f13\u6162\u7684\u9500\u552e\u5468\u671f\u548c\u5bf9\u5e02\u573a\u8425\u9500\u7684\u65e0\u77e5\u5f04\u5f97\u7cbe\u75b2\u529b\u7aed\u3002\n\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u201c\u79d1\u6280\u4eba\u201d\u592a\u8fc7\u5984\u60f3\uff0c\u65e0\u6cd5\u7406\u89e3\u521b\u5efa\u5728\u7ebf\u4f01\u4e1a\u7684\u73b0\u5b9e\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u521d\u521b\u516c\u53f8\u60f3\u505a\u4e0e\u9700\u8981\u505a\u7684\u76f8\u53cd\u7684\u4e8b\u60c5\uff0c\u4f46\u4e5f\u53ef\u80fd\u662f\u592a\u52aa\u529b\u5730\u60f3\u6210\u4e3a\u53e6\u4e00\u4e2a\u4eba\u3002\u4e5f\u8bb8\u6211\u5e94\u8be5\u66f4\u52a0\u52aa\u529b\uff0c\u6d3b\u5f97\u66f4\u4e45\u4e00\u4e9b\uff0c\u4f46\u6211\u6e05\u695a\u5730\u8bb0\u5f97\uff0c\u6211\u88ab\u6240\u6709\u81ea\u6211\u65bd\u52a0\u7684\u538b\u529b\u5f04\u5f97\u7b4b\u75b2\u529b\u5c3d\u3002\u8fd9\u5728\u4efb\u4f55\u610f\u4e49\u4e0a\u90fd\u4e0d\u662f\u4eab\u53d7\u3002\n\u4eca\u5e74\uff0c\u8fd9\u4e00\u5207\u90fd\u6539\u53d8\u4e86\u3002\u4eca\u5e74\u6211\u5fd8\u8bb0\u4e86\u6211\u8ba4\u4e3a\u91cd\u8981\u7684\u4e1c\u897f\uff0c\u660e\u767d\u4e86\u6211\u786e\u5b9e\u559c\u6b22\u7f16\u7a0b\uff0c\u800c\u4e14\u7f16\u7a0b\u6ca1\u6709\u4ec0\u4e48\u53ef\u6015\u4e4b\u5904\u3002\n\u603b\u6709\u66f4\u591a\u7684\u94b1\u53ef\u4ee5\u8d5a\uff0c\u4f46\u5982\u679c\u4f60\u5bf9\u81ea\u5df1\u6240\u5728\u7684\u5730\u65b9\u611f\u5230\u8212\u670d\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u65e0\u4f11\u6b62\u5730\u8ffd\u9010\uff0c\u4ee5\u4f18\u5316\u65f6\u95f4\u548c\u8d39\u7387\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u8ba8\u4ef7\u8fd8\u4ef7\u4e4b\u7c7b\u7684\u4e8b\u60c5\u4e0d\u91cd\u8981\uff0c\u4f46\u5982\u679c\u4f60\u7684\u5de5\u8d44\u4e0d\u662f200\u7f8e\u5143/\u5c0f\u65f6\uff0c\u4f60\u5c31\u4e0d\u662f\u4e00\u4e2a\u5931\u8d25\u8005\u3002\n\u5f53\u4f60\u505a\u4e1c\u897f\u662f\u4e3a\u4e86\u597d\u73a9\uff0c\u89e3\u51b3\u81ea\u5df1\u7684\u95ee\u9898\u65f6\uff0c\u4f60\u6709\u66f4\u9ad8\u7684\u6210\u529f\u673a\u4f1a\u3002\u4e0d\u8981\u7ed9\u81ea\u5df1\u5e26\u6765\u6210\u529f\u7684\u538b\u529b\u3002\u540c\u6837\uff0c\u5bf9\u4e8e\u5176\u4ed6\u4eba\u6765\u8bf4\uff0c\u5b8c\u5168\u76f8\u53cd\u7684\u60c5\u51b5\u53ef\u80fd\u662f\u6b63\u786e\u7684\u3002\n\u6765\u81ea\u6210\u529f\u8005\u7684\u5efa\u8bae\u5e94\u8be5\u5f97\u5230\u5f88\u5927\u91cd\u89c6\uff0c\u4f46\u5176\u4e2d\u5927\u90e8\u5206\u662f\u4e0e\u4e0a\u4e0b\u6587\u76f8\u5173\u7684\uff0c\u4f60\u53ef\u4ee5\u5ffd\u7565\u4e00\u4e9b\u4e0d\u9002\u7528\u4e8e\u4f60\u7684\u4e1c\u897f\u3002\n\u5c3d\u7ba1\u6210\u957f\u5fc3\u6001\u662f\u6b63\u786e\u7684\uff0c\u4f46\u4f60\u5929\u751f\u5c31\u503e\u5411\u4e8e\u5728\u67d0\u4e9b\u4e8b\u60c5\u4e0a\u505a\u5f97\u66f4\u597d\uff0c\u800c\u5728\u5176\u4ed6\u4e8b\u60c5\u4e0a\u7a0d\u5dee\u4e00\u4e9b\u3002\u4e00\u4e2a\u4f8b\u5b50\uff1a\u5f53\u6211\u770b\u5230\u6211\u5468\u56f4\u7684\u9500\u552e\u4eba\u5458\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u4ed6\u4eec\u7edd\u5bf9\u559c\u6b22\u4ea4\u8c08\u3002\u6211\u4e5f\u662f\uff0c\u4f46\u6211\u89c9\u5f97\u6253\u7535\u8bdd\u548c\u5f00\u4f1a\u6709\u70b9\u7d2f\u4eba\uff0c\u9700\u8981\u65f6\u95f4\u91cd\u65b0\u632f\u4f5c\u8d77\u6765\u3002\u5f53\u7136\uff0c\u8fd9\u4e0d\u662f\u6211\u559c\u6b22\u4ee5\u6b64\u4e3a\u751f\u7684\u4e8b\u60c5\u3002\n\u6240\u4ee5\uff0c\u5728\u7ecf\u5386\u4e86\u6f2b\u957f\u800c\u8270\u96be\u7684\u4f11\u606f\u4e4b\u540e\uff0c\u6211\u53c8\u5f00\u59cb\u4e3a\u4e86\u597d\u73a9\u800c\u505a\u4e8b\u4e86\u3002\u6700\u8fd1\uff0c\u6211\u5efa\u7acb\u4e86\uff1a\n\u4e00\u4e2a\u5b8c\u5168\u5728\u6982\u5ff5\u4e0a\u4f7f\u7528\u975e\u5b98\u65b9\u6982\u5ff5API\u7684\u535a\u5ba2\u7cfb\u7edf\u3002\u4f60\u53ea\u9700\u8981\u5728\u6587\u4ef6\u5939\u4e2d\u5199\u4e00\u7bc7\u6587\u7ae0\uff0c\u4ece\u521b\u5efa\u4e00\u7bc7\u6587\u7ae0\u5230\u53d1\u5e03\uff0c\u6240\u6709\u7684\u4e8b\u60c5\u90fd\u4f1a\u5f97\u5230\u5904\u7406\u3002", "note_en": "A question that has haunted me all my life is of identity. If I include my hobbying years, I have been programming for more than a decade. However, my interests have always been much wider\u2014economics, psychology, mathematics\u2014and the list of things that I have dabbled with is long and growing\u2014design, writing, vector art, photo editing, chess. I am a textbook dilettante. The idea of having a single pursuit for your whole life doesn\u2019t appeal to me, and perhaps, never will.\n That leads to my life \u2019s bigger puzzle: what is my \u2018calling \u2019? To put it in other words, what should I be doing happily for the next decade or two? Programming is what I have done for the longest while. I enjoy it to a good extent (at least, when there are less bureaucratic battles to fight), but for the past 5-6 years, I couldn \u2019t enjoy being called a programmer. In my hobbying years, I wasn \u2019t afraid to build something silly just for the fun of making it, but this all disappeared at some  ...\n I don\u2019t know when exactly it happened , but I know there were a few triggers. But the biggest one was the sheer dorkiness associated with coding.\n I started despising being a nerd, even though I was an a archetypical one. This happened gradually when I started to learn a bit more about the business side of things. In his famous essay,  Don\u2019t Call Yourself a Programmer, Patrick Mckenzie wrote:\n \u201cProgrammer\u201d sounds like \u201canomalously high-cost peon who types some mumbo-jumbo into some other mumbo-jumbo.\u201d If you call yourself a programmer, someone is already working on a way to get you fired.\n A programmer started to feel like someone who loves to code, but isn\u2019t business-smart enough to make bigger gains from it, a code monkey who doesn\u2019t understand the value of his/her own work. A silly side-project was beginning to sound like a wasted potential to make more money. After all, you could use all that time to build something commercially meaningful.\n At this point, my technical skills started to feel too normal, too commodotized to be important. After all, a person with half a brain can learn to do most of the CRUD stuff I did in a small timeframe (I know, considering all the nuances, this isn\u2019t true but that\u2019s what I believed). Yes, you get paid well regardless, but your peers did too, didn\u2019t they?\n I wanted to be more than a programmer. A business-savvy consultant, or perhaps, an entrepreneur. I didn\u2019t want the tag of a coder. I didn\u2019t want to waste my effort on side-projects unless they had the potential to make some money. I wanted to more business-esque things: reach out to talk to customers, or build a network, or create a brand.\n Long story short, all of that didn\u2019t work out. I have always enjoyed building things, but I wasn\u2019t great at other aspects of creating a business. And the constant pressure to build something great made me very stressful with scarcely any success to show for it. An example: In 2016, I wanted to build a content marketing analytics software. I tried to talking before building, got some interest, but I was too worn out by slow sales cycle and cluelessness about marketing.\n This can be a story of a \u2018the tech guy\u2019 too delusional to understand realities of creating an online business, or a startup wannabe doing the opposite of what needs to be done, but it\u2019s also of trying too hard to be someone else. Maybe I should have tried harder, survived a bit longer, but I distinctively remember feeling burned out by all the self-imposed pressure. It wasn\u2019t enjoyment in any sense.\n All this changed this year. This year has been about unlearning what I thought was important, understanding that I do enjoy programming and that there\u2019s nothing terrible about it.\n  There always more money to be made, but if you\u2019re comfortable with where you\u2019re, you don\u2019t need to engage in an endless chase to optimize hours and rates. That\u2019s not to say doing something like negotiating salary isn\u2019t important but you aren\u2019t a failure if you\u2019re rate isn\u2019t $200 / hour.\n  You\u2019ve a higher chance of success when you\u2019re making things for fun, solving your own problems. And not stressing yourself about succeeding. Again, completely opposite might be true for someone else.\n  Advice from successful people should be given a lot of weight, but much of it is context-dependent, and you can ignore something that isn\u2019t applicable to you.\n  As much as  growth-mindset is true, you\u2019re genetically predisposed to be better at certain things, while slightly worse at others. An example: When I see sales people around me, I notice that they absolutely love to talk. I do too, but I find calls and meetings a bit exhausting and need time to get back up. Certainly, it\u2019s not something I would enjoy doing for a living.\n So, after a long, hard break, I have started doing things for fun again. Recently, I built:\n A blogging system entirely in Notion using unofficial  Notion API. You just to have to write a post in a folder and everything from creating a post to publishing will be taken care of. This post is published using that.\n  A bunch of automation using  Hammerspoon. For eg, to copy path of Finder\u2019s current location so that it\u2019s easier to go to that directory in CLI.\n    Foundation stone of a personal dashboard. I synced my Android  screentime stats of phone to Notion.\n The answer to question in the headline is very mundane. I started enjoying programming again when I stopped being too particular about what I need to build and started doing things for myself. I am no longer hindered by what\u2019ll eventually be commercially viable. Simple but very effective.", "posttime": "2020-05-03 22:39:24", "tags": "\u7f16\u7a0b,\u4eab\u53d7,enjoying,\u4e1c\u897f,build", "title": "\u6211\u662f\u5982\u4f55\u91cd\u65b0\u5f00\u59cb\u4eab\u53d7\u7f16\u7a0b\u7684", "title_en": "How I Started Enjoying Programming Again", "transed": 1, "url": "https://shubhamjain.co/2020/03/29/how-i-started-enjoying-programming-again", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u7a0b", "\u4eab\u53d7", "enjoying", "\u4e1c\u897f", "build"]}, {"category": "", "categoryclass": "", "imagename": "e5c0558635421c6bdac69563955ac5f1.png", "infoid": 1000492, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7ecf\u5e38\u88ab\u95ee\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u4ea7\u54c1\u7ecf\u7406\u6765\u8bf4\uff0c\u5b66\u4e60\u8be5\u804c\u4f4d\u7684\u57fa\u7840\u77e5\u8bc6\u7684\u6700\u4f73\u65b9\u5f0f\u662f\u4ec0\u4e48\uff0c\u6216\u8005\u5bf9\u4e8e\u4e00\u4e2a\u6709\u7ecf\u9a8c\u7684\u4ea7\u54c1\u7ecf\u7406\u6765\u8bf4\uff0c\u7ee7\u7eed\u638c\u63e1\u4ed6\u4eec\u7684\u624b\u827a\u6700\u597d\u7684\u65b9\u5f0f\u662f\u4ec0\u4e48\u3002\u5927\u591a\u6570\u4eba\u90fd\u5728\u5bfb\u627e\u53ef\u4ee5\u5b66\u4e60\u4ea7\u54c1\u7ba1\u7406\u7684\u4e66\u7c4d\u6216\u8bfe\u7a0b\u7684\u6307\u9488\uff0c\u4f46\u6211\u603b\u662f\u7528\u5b9e\u8df5\u8005\u7684\u535a\u5ba2\u5e16\u5b50\u6765\u56de\u590d\uff0c\u8fd9\u4e9b\u535a\u5ba2\u6587\u7ae0\u5206\u4eab\u4e86\u4ed6\u4eec\u7684\u6700\u4f73\u5b9e\u8df5\u3002\u6211\u4ecd\u7136\u76f8\u4fe1\u8fd9\u4e9b\u4ecd\u7136\u662f\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u6700\u597d\u7684\u8d44\u6e90\u3002\u6240\u4ee5\u6211\u60f3\u5206\u4eab\u6211\u6536\u96c6\u7684\u5e16\u5b50\u2026", "note_en": "I&#39;m often asked what&#39;s the best way for a new product manager to learn the fundamentals of the role or for an experienced product manager to continue to master their craft. Most folks are looking for a pointer to a book or a class they can take on product management, but I always reply with a collection of blog posts from practitioners sharing their best practices. I still believe these remain the very best resources on the topic. So I wanted to share the collection of posts I&#39;ve  ...", "posttime": "2020-05-03 22:39:15", "tags": "\u4ea7\u54c1\u7ecf\u7406,\u4ea7\u54c1,product,collection", "title": "\u9762\u5411\u4ea7\u54c1\u7ecf\u7406\u7684\u8d44\u6e90", "title_en": "Resources for Product Managers", "transed": 1, "url": "https://www.sachinrekhi.com/top-resources-for-product-managers", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u4ea7\u54c1\u7ecf\u7406", "\u4ea7\u54c1", "product"]}, {"category": "", "categoryclass": "", "imagename": "98a8c20a0095c52c4a19e69189be3bf2.jpg", "infoid": 1000491, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2016\u5e74\u590f\u5929\uff0c\u6e38\u620f\u5f00\u53d1\u5546\u5c0f\u5c9b\u79c0\u592b(Hideo Kojima)\u7684\u6700\u65b0\u89c6\u9891\u6e38\u620fDeath Stranding\u5728\u7535\u5b50\u5a31\u4e50\u535a\u89c8\u4f1a(E3)\u7684\u821e\u53f0\u4e0a\u5411\u4e16\u754c\u4ecb\u7ecd\uff0c\u7535\u5b50\u5a31\u4e50\u535a\u89c8\u4f1a\u662f\u6e38\u620f\u884c\u4e1a\u4e00\u5e74\u4e00\u5ea6\u7684\u5546\u5c55\u76db\u4f1a\u3002\u8fd9\u573a\u6d3b\u52a8\u662f\u4e1a\u754c\u6240\u8bf4\u7684\u65b0\u95fb\u53d1\u5e03\u4f1a\uff0c\u4f46\u8fd9\u4e00\u7279\u6b8a\u7684\u5947\u89c2\u66f4\u50cf\u662f\u201c\u91d1\u521a\u201d\u4e2d\u7684\u573a\u666f\uff0c\u5f53\u65f6\u8fd9\u5934\u91ce\u517d\u5728\u767e\u8001\u6c47\u5267\u9662\u5411\u516c\u4f17\u5c55\u793a\u3002\u4e00\u652f\u73b0\u573a\u4ea4\u54cd\u4e50\u56e2\u594f\u54cd\u4e86\u7ea6\u7ff0\u00b7\u5a01\u5ec9\u59c6\u65af\u5f0f\u7684\u54cd\u4eae\u4e50\u8c31.\u3002\n\u5c0f\u5c9b\u7ee7\u7eed\u64ad\u653e\u4e86\u53ef\u80fd\u662f\u6709\u53f2\u4ee5\u6765\u6700\u5947\u602a\u7684\u4e09\u5206\u534a\u949f\u7684\u89c6\u9891\uff0c\u4e3aE3\u821e\u53f0\u589e\u8272\u4e0d\u5c11\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u662f\u4e00\u4e2a\u63a7\u5236\u6050\u9f99\u548c\u5de8\u578b\u780d\u4f10\u6b66\u58eb\u7684\u573a\u5730\u3002\u8fd9\u6bb5\u89c6\u9891\u4ee5\u5a01\u5ec9\u00b7\u5e03\u83b1\u514b(William Blake)\u7684\u4e00\u9996\u8bd7\u5f00\u59cb\uff0c\u4e5f\u5c31\u662f\u201c\u7eaf\u771f\u7684\u5965\u53e4\u4e3d\u65af\u201d\u7684\u7b2c\u4e00\u884c\uff0c\u7136\u540e\u5207\u6362\u5230\u9ad8\u5ea6\u903c\u771f\u7684\u8ba1\u7b97\u673a\u751f\u6210\u7684\u6c99\u5b50\u7684\u7279\u5199\u955c\u5934\u3002\u6444\u50cf\u673a\u6f02\u6d6e\u5728\u6c99\u6ee9\u4e0a\uff0c\u9732\u51fa\u4e00\u5806\u6b7b\u8783\u87f9\u3002\u624b\u5370\u51fa\u73b0\u5728\u6c99\u5b50\u4e0a\uff0c\u7136\u540e\u83ab\u540d\u5176\u5999\u5730\u586b\u6ee1\u4e86\u2026\u3002\n\u6ca1\u6709\u4efb\u4f55\u5173\u4e8e\u6545\u4e8b\uff0c\u6e38\u620f\u73a9\u6cd5\uff0c\u751a\u81f3\u6e38\u620f\u7c7b\u578b\u7684\u6697\u793a\u3002\u8fd9\u4e00\u5207\u90fd\u662f\u60c5\u7eea\u548c\u8c61\u5f81\uff0c\u8fd8\u6709\u8bfa\u66fc\u00b7\u91cc\u5fb7\u65af\u95ea\u4eae\u7684\u81c0\u90e8\u3002\u5b83\u66f4\u50cf\u662f\u4f60\u5728MoMA\u4e0a\u770b\u5230\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u662f\u5728E3\u4e0a\u770b\u5230\u7684\u4e1c\u897f\u3002\u4f46\u662f\u4eba\u7fa4\u53d8\u5f97\u75af\u72c2\u8d77\u6765\u3002\n\u5982\u679c\u4ed6\u663e\u793a\u7684\u662f\u7a7a\u767d\u5c4f\u5e55\uff0c\u53cd\u5e94\u53ef\u80fd\u4e5f\u4e0d\u4f1a\u6709\u592a\u5927\u4e0d\u540c\u3002\u5c0f\u5c9b\u662f\u6781\u5c11\u6570\u4ec5\u51ed\u4ed6\u7684\u540d\u5b57\u5c31\u80fd\u8ba9\u4eba\u5bf9\u6e38\u620f\u4ea7\u751f\u5de8\u5927\u671f\u5f85\u7684\u89c6\u9891\u6e38\u620f\u5f00\u53d1\u5546\u4e4b\u4e00\u3002\u5728\u4ed6\u4ece\u4e8b\u8be5\u884c\u4e1a\u768430\u5e74\u91cc\uff0c\u4ed6\u5bf9\u6e38\u620f\u73a9\u5bb6\u65bd\u52a0\u4e86\u53f2\u8482\u592b\u00b7\u4e54\u5e03\u65af(Steve Jobs)\u5bf9\u7535\u5b50\u4ea7\u54c1\u6d88\u8d39\u8005\u6240\u4ea7\u751f\u7684\u90a3\u79cd\u626d\u66f2\u73b0\u5b9e\u7684\u5f71\u54cd\uff0c\u5177\u6709\u4e00\u79cd\u8fd1\u4e4e\u8d85\u81ea\u7136\u7684\u80fd\u529b\uff0c\u80fd\u591f\u8bf4\u670d\u4eba\u4eec\u63a5\u53d7\u6765\u81ea\u5176\u4ed6\u4efb\u4f55\u4eba\u7684\u60f3\u6cd5\uff0c\u8fd9\u4e9b\u60f3\u6cd5\u4f3c\u4e4e\u5b8c\u5168\u662f\u8352\u8c2c\u7684\u3002..\u3002\n\u8003\u8651\u5230\u4ed6\u4ee5\u524d\u521b\u4f5c\u7684\u7279\u8d28\uff0c\u89c2\u4f17\u53ea\u80fd\u60f3\u77e5\u9053\u4ed6\u6709\u8fd9\u4e48\u591a\u81ea\u7531\u4f1a\u505a\u4ec0\u4e48\u3002\u8fd9\u6b3e\u79bb\u5947\u7684\u9884\u544a\u7247\u7ecf\u8fc7\u4e86\u5b8c\u7f8e\u7684\u6821\u51c6\uff0c\u65e2\u6fc0\u53d1\u4e86\u4eba\u4eec\u7684\u597d\u5947\u5fc3\uff0c\u53c8\u8ba9\u5b83\u65e0\u6cd5\u5b9e\u73b0\uff0c\u4ee4\u4eba\u6293\u72c2\u3002\u201c\u53ea\u8981\u76f8\u4fe1\u6211\uff0c\u201d\u5b83\u8bf4\u3002\u4f1a\u5f88\u68d2\u7684\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u4e09\u5e74\u91cc\uff0c\u5c0f\u5c9b\u5728\u53d6\u7b11\u8fd9\u4e2a\u6e38\u620f\u65b9\u9762\u7ee7\u7eed\u9ed8\u9ed8\u65e0\u95fb\uff0c\u4ee4\u4eba\u6293\u72c2\u3002\u5728\u6b7b\u4ea1\u4e4b\u540e\uff0c\u65af\u7279\u5170\u4e01\u7684\u7092\u4f5c\u5faa\u73af\u672c\u8eab\u5c31\u6709\u70b9\u50cf\u6e38\u620f\uff0c\u56e0\u4e3a\u7403\u8ff7\u4eec\u88ab\u8feb\u6839\u636e\u5c0f\u5c9b\u7684\u96f6\u661f\u6697\u793a\u6765\u6784\u5efa\u4e00\u4e9b\u5173\u4e8e\u8fd9\u4e2a\u6e38\u620f\u7684\u8111\u6d77\u4e2d\u7684\u5f62\u8c61\u3002\u5728\u90a3\u4e9b\u5e74\u91cc\uff0c\u4ed6\u8bf4\u4e86\u5f88\u591a\u8bdd\uff0c\u4ed6\u8bf4\u7684\u6bcf\u4e00\u53e5\u8bdd\u4f3c\u4e4e\u90fd\u628a\u4e8b\u60c5\u641e\u7cca\u6d82\u4e86\u3002\u5f53\u88ab\u8ffd\u95ee\u5177\u4f53\u7ec6\u8282\u65f6\uff0c\u4ed6\u544a\u8bc9\u6570\u5b57\u95f4\u8c0d\u7f51\u7ad9\uff1a\u201c\u8fd9\u5c31\u50cf\u544a\u8bc9\u4f60\u4e00\u90e8\u60ac\u7591\u5c0f\u8bf4\u4e2d\u8c01\u662f\u51f6\u624b\u4e00\u6837\u3002\u201d\n\u6709\u65f6\uff0c\u4ed6\u4f3c\u4e4e\u5728\u63cf\u8ff0\u4e00\u6b3e\u76f8\u5f53\u4f20\u7edf\u7684\u52a8\u4f5c\u6e38\u620f\uff0c\u6709\u8f66\u8f86\uff0c\u6709\u6218\u6597\uff0c\u6709\u4e00\u4e2a\u53ef\u4ee5\u63a2\u7d22\u7684\u4e16\u754c\u3002\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6b7b\u4ea1\u4e4b\u65c5\u542c\u8d77\u6765\u4e0d\u50cf\u4ee5\u524d\u53d1\u751f\u8fc7\u7684\u4e8b\u60c5\u3002\u5c0f\u5c9b\u8868\u793a\uff0c\u5b83\u5c06\u5f00\u521b\u4e00\u79cd\u5168\u65b0\u7684\u6d41\u6d3e--\u201c\u7ebf\u6761\u201d\u6d41\u6d3e\uff1a\u201c\u4f60\u5c06\u8bd5\u56fe\u5f25\u5408\u793e\u4f1a\u7684\u9e3f\u6c9f\uff0c\u201d\u4ed6\u5728Twitter\u4e0a\u5199\u9053\uff0c\u201c\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u4f60\u5c06\u4e0e\u5168\u7403\u5176\u4ed6\u73a9\u5bb6\u5efa\u7acb\u65b0\u7684\u7ebd\u5e26\u6216\u2018\u7ebf\u6761\u2019\u3002\u201d\u901a\u8fc7\u4f60\u73a9\u8fd9\u4e2a\u6e38\u620f\u7684\u7ecf\u5386\uff0c\u6211\u5e0c\u671b\u4f60\u80fd\u7406\u89e3\u2026\u3002\n\u5728\u7ed9Digital Spy\u7684\u53e6\u4e00\u4efd\u58f0\u660e\u4e2d\uff0c\u5c0f\u5c9b\u8bf4\u4ed6\u7684\u7075\u611f\u6765\u81ea\u65e5\u672c\u5c0f\u8bf4\u5bb6\u5b89\u500d\u664b\u4e09(Kobo Abe)\u7684\u77ed\u7bc7\u5c0f\u8bf4\u201c\u7ef3\u5b50\u201d(The Rope)\u3002\u5728\u6545\u4e8b\u4e2d\uff0c\u5b89\u500d\u5199\u9053\uff0c\u4eba\u7c7b\u53d1\u660e\u7684\u7b2c\u4e00\u4e2a\u5de5\u5177\u662f\u68cd\u5b50\u548c\u7ef3\u5b50-\u7b2c\u4e00\u4e2a\u662f\u66b4\u529b\u5de5\u5177\uff0c\u610f\u601d\u662f(\u6b63\u5982\u5c0f\u5c9b\u6240\u8bf4\u7684)\u201c\u8fdc\u79bb\u574f\u4e1c\u897f\u201d\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8fde\u63a5\u5de5\u5177\uff0c\u610f\u601d\u662f\u201c\u628a\u597d\u4e1c\u897f\u653e\u5728\u4f60\u8eab\u8fb9\u201d\u3002\u5c0f\u5c9b\u63a5\u7740\u8bf4\uff1a\u201c\u5728\u201d\u6b7b\u4ea1\u7f20\u7ed5\u201c\u4e2d\uff0c\u201d\u4f60\u5c06\u80fd\u591f\u4f7f\u7528\u76f8\u5f53\u4e8e\u68cd\u5b50\u7684\u4e1c\u897f\u3002\u201c\u3002..\u3002\n\u535a\u5f69\u5a92\u4f53\u4ee5\u5584\u610f\u7684\u96be\u4ee5\u7406\u89e3\u7684\u6001\u5ea6\u62a5\u9053\u4e86\u6240\u6709\u8fd9\u4e9b\u8a00\u8bba\u3002\u7136\u800c\uff0c\u5728\u4e92\u8054\u7f51\u7684\u67d0\u4e9b\u89d2\u843d\uff0c\u968f\u7740\u6e38\u620f\u53d1\u5e03\u7684\u4e34\u8fd1\uff0c\u4f60\u53ef\u4ee5\u611f\u89c9\u5230\u4e00\u80a1\u6000\u7591\u7684\u6697\u6d41\u5f00\u59cb\u62ac\u5934\u3002\u6709\u4f20\u8a00\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u573a\u81ea\u6211\u653e\u7eb5\u7684\u6df7\u4e71\uff0c\u5c0f\u5c9b\u5df2\u7ecf\u5b8c\u5168\u8d70\u5230\u4e86\u5c3d\u5934\u3002\u201c\u6211\u4ecd\u7136\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6e38\u620f\u662f\u5173\u4e8e\u4ec0\u4e48\u7684\u201d\u8fd9\u53e5\u8bdd\u6210\u4e86\u8bb8\u591a\u4e0e\u6b7b\u4ea1\u65af\u7279\u62c9\u4e01\u76f8\u5173\u7684YouTube\u89c6\u9891\u548c\u535a\u5ba2\u4e0b\u7684\u8bc4\u8bba\u533a\u7684\u4e00\u79cd\u6a21\u56e0\u3002\n\u81f3\u4e8e\u6211\uff0c\u6211\u82b1\u4e86\u4e09\u5e74\u65f6\u95f4\u6c89\u8ff7\u4e8e\u8fd9\u6b3e\u6e38\u620f\uff0c\u800c\u5b83\u7684\u521b\u9020\u8005\u58f0\u79f0\u4e0d\u7406\u89e3\u5b83\u3002\u6211\u4ed4\u7ec6\u7814\u8bfb\u65b0\u95fb\uff0c\u548c\u6211\u7684\u6e38\u620f\u73a9\u5bb6\u670b\u53cb\u4e00\u8d77\u63a8\u6d4b\u3002\u6211\u6210\u4e3a\u5c0f\u5c9b\u5728\u63a8\u7279\u4e0a\u7684280\u4e07\u7c89\u4e1d\u4e4b\u4e00\uff0c\u4ed6\u5728\u63a8\u7279\u4e0a\u7a7f\u63d2\u7740\u6b7b\u4ea1\u65af\u7279\u62c9\u4e01\u5e03\u666f\u7684\u6700\u65b0\u6d88\u606f\uff0c\u7a7f\u63d2\u7740\u5173\u4e8e\u4ed6\u751f\u6d3b\u7684\u65e0\u7a77\u65e0\u5c3d\u7684\u7410\u4e8b-\u4ed6\u5403\u4e86\u4ec0\u4e48\u98df\u7269\uff0c\u770b\u4e86\u4ec0\u4e48\u7535\u5f71\uff0c\u8bfb\u4e86\u4ec0\u4e48\u4e66\u3002\u6211\u638c\u63e1\u7684\u4fe1\u606f\u8d8a\u591a\uff0c\u6211\u5c31\u8d8a\u4e13\u6ce8\u4e8e\u6211\u4e0d\u77e5\u9053\u7684\u4e1c\u897f\u3002\u53bb\u5e74\u79cb\u5929\uff0c\u968f\u7740\u6700\u7ec8\u4e0a\u6620\u65e5\u671f\u7684\u5230\u6765\u3002\n\u4f60\u600e\u4e48\u5411\u4e00\u4e2a\u4ece\u6765\u6ca1\u6709\u62ff\u8fc7PlayStation\u63a7\u5236\u5668\u7684\u4eba\u89e3\u91ca\u5c0f\u5c9b\u79c0\u4e8c\u5462\uff1f\u4ed6\u7684\u5d07\u62dc\u8005\u7ecf\u5e38\u5c06\u4ed6\u4e0e\u7535\u5f71\u5236\u4f5c\u4eba\u76f8\u63d0\u5e76\u8bba\uff1a\u6606\u6c40\u00b7\u5854\u4f26\u8482\u8bfa\u3001\u5927\u536b\u00b7\u6797\u5947\u3001\u4e54\u6cbb\u00b7\u5362\u5361\u65af\u3001\u8a79\u59c6\u65af\u00b7\u5361\u6885\u9686\u3002\u6bcf\u79cd\u6bd4\u8f83\u90fd\u6709\u5176\u4f18\u70b9\u3002\u548c\u5362\u5361\u65af\u4e00\u6837\uff0c\u5c0f\u5c9b\u4e5f\u79bb\u4e0d\u5f00\u4e00\u90e8\u6df1\u53d7\u559c\u7231\u7684\u7cfb\u5217\u7535\u5f71\u201c\u91d1\u5c5e\u9f7f\u8f6e\u201d(Metal Gear Solid)\uff0c\u8fd9\u90e8\u7535\u5f71\u5728\u7c89\u4e1d\u4e2d\u83b7\u5f97\u4e86\u795e\u8bdd\u822c\u7684\u5730\u4f4d\uff1b\u548c\u5854\u4f26\u8482\u8bfa\u4e00\u6837\uff0c\u4ed6\u4e5f\u901a\u8fc7\u89e3\u6784\u548c\u81ea\u6211\u53cd\u7701\u7684\u540e\u73b0\u4ee3\u6280\u5de7\u539a\u989c\u65e0\u803b\u5730\u70ab\u8000\u81ea\u5df1\u7684\u7f8e\u5fb7\u3002", "note_en": "Death Stranding, the newest video game from the developer Hideo Kojima, was introduced to the world in the summer of 2016 on a stage at the Electronic Entertainment Expo (E3), the gaming industry \u2019s annual trade-show extravaganza. The event was what the industry calls a press conference, but this particular spectacle more closely resembled the scene in \u201cKing Kong \u201dwhen the beast is displayed to the public in a Broadway theater. A live orchestra struck up a blaring John Williams-style score as the  ...\n Kojima proceeded to play perhaps  the strangest three and a half minutes of videoever to grace the E3 stage. Keep in mind that this is a venue where cybernetic dinosaurs and giant-felling samurai are par for the course. The video opened with a William Blake poem, the first lines of \u201cAuguries of Innocence, \u201dthen cut to a close-up of highly realistic computer-generated sand. The camera floated over the sand, revealing a jumble of dead crabs. Handprints appeared in the sand and then filled up, inexplicably,  ...\n There was no hint as to the story, the gameplay or even the genre of the game. It was all mood and symbol and Norman Reedus\u2019s shiny posterior. It was more like something you\u2019d see at MoMA than at E3. But the crowd went wild.\n The reaction might not have been much different if he had shown a blank screen. Kojima is one of a very few video-game developers who can generate enormous anticipation for a game based on his name alone. Over his 30 years in the industry, he has come to exert the sort of reality-distorting effect on gamers that Steve Jobs did on electronics consumers, with an almost supernatural ability to persuade people to get onboard with ideas that would seem totally preposterous coming from anyone else.  ...\n Given the idiosyncrasies of his previous creations, the audience could only wonder at what he might do with so much freedom. The bizarre trailer was perfectly calibrated to stoke that curiosity while leaving it maddeningly unfulfilled.  Just trust me, it said.  It\u2019s going to be good.\n Over the next three years, Kojima continued to be maddeningly obscure in teasing the game. Following the Death Stranding hype cycle was a bit gamelike in itself, as fans were forced to construct some mental image of the game out of Kojima\u2019s sporadic hints. He talked a lot during those years, and everything he said seemed only to confuse the picture. \u201cIt would be like telling you who\u2019s the killer in a mystery novel,\u201d  he told the website Digital Spy, when pressed for specifics.\n At times, he seemed to be describing a fairly conventional action game, with vehicles and combat and a world to explore. At others, Death Stranding sounded like nothing that had come before. Kojima said it would initiate an entirely new genre, the \u201cstrand \u201dgenre: \u201cYou will attempt to bridge the divides in society, \u201dhe wrote on Twitter, \u201cand in doing create new bonds or \u2018Strands \u2019with other players around the globe. Through your experience playing the game, I hope you \u2019ll come to understand  ...\n In another statement to Digital Spy, Kojima said he was inspired by \u201cThe Rope, \u201da short story by the Japanese novelist Kobo Abe. In the story, Abe writes that the first tools humanity invented were the stick and the rope \u2014the first an instrument of violence, meant (as Kojima put it) to \u201ckeep away bad things, \u201dthe second an instrument of connection, meant to \u201ckeep good things close to you. \u201dIn Death Stranding, \u201cyou will be able to use what will be the equivalent of sticks, \u201dKojima went on.  ...\n The gaming press reported all these utterances with good-natured incomprehension. In some corners of the internet, though, you could sense an undercurrent of skepticism beginning to rise as the game \u2019s release drew closer. There were whispers that it might be a self-indulgent mess, that Kojima had gone entirely off the deep end. The phrase \u201cI still don \u2019t know what this game is about \u201dbecame a sort of meme in the comments section under many Death Stranding-related YouTube videos and blog  ...\n As for me, I spent three years obsessed with this game that its own creator claimed not to understand. I pored over news and speculated with my gamer friends. I became one of Kojima \u2019s 2.8 million followers on Twitter, where he interspersed updates from the Death Stranding set with an endless stream of trivia about his life \u2014what food he ate, what movies he watched, what books he read. The more information I had, the more I fixated on what I didn \u2019t know. Last fall, as the release date finally  ...\n  How do you  explain HideoKojima to someone who has never picked up a PlayStation controller? His admirers have often compared him to filmmakers: Quentin Tarantino, David Lynch, George Lucas, James Cameron. Each comparison has its merits. Like Lucas, Kojima is inseparable from a beloved franchise, in Metal Gear Solid, that has achieved mythic status among fans; like Tarantino, he cheekily shows off his virtuo\u00adsity through postmodern tricks of deconstruction and self-referentiality. The narratives  ...\n Perhaps more notable than his resemblance to any particular film director is the fact that such a comparison would be made at all. Video-game creators tend not to be recognized, much less celebrated; while most film buffs can name the directors of their favorite movies, appreciation of even the best video games often begins and ends with the quality of the experience playing it. The defining characteristic of video games is their interactivity. When you play a game, the thing that sticks  ...\n When you play a Kojima game, though, you know you are playing a Kojima game \u2014 and not just because his name tends to be all over them. The critic Jeremy Parish, one of the sharpest writers on Kojima,  has noted that with each game in the Metal Gear Solid series, from Metal Gear Solid (1998) through Metal Gear Solid V: Phantom Pain (2015), \u201cKojima has been drawing closer to realizing some platonic ideal of \u2018video games\u2019 that exists only in his mind.\u201d\n It is not easy to sum up Kojima \u2019s oeuvre. There are really two ways of looking at him, and they don \u2019t totally fit together. The first is that Kojima is a brilliant innovator who has managed to consistently expand the notion of what video games can be for more than three decades. The Metal Gear Solid series enshrined his reputation as the father of a new genre, \u201cstealth \u201daction, based around sneaking and subterfuge rather than the run-and-gun gameplay favored by most action games then  ...\n Kojima \u2019s second major innovation was the way he applied cinematic storytelling to console video games. Hollywood-style narratives had been tried in games before, but they tended to founder on unimaginative stories, sub-B-movie acting and jarring shifts in visual style between the gameplay and the noninteractive narrative sequences ( \u201ccutscenes, \u201din video game lingo). Dylan Holmes, in his book on video-game story\u00adtelling, \u201cA Mind Forever Voyaging, \u201dhas noted that Metal Gear Solid created  ...\n But then there \u2019s that second, trickier story: about Kojima the egotist, a man grown too infatuated with his own ideas. To praise the Metal Gear Solid series, you must hack through a thick forest of caveats. In addition to being innovative, graphically stunning and meticulously designed, the games are deeply weird and frequently stupid. The game writer Anthony Burch summed up this quality of Kojima \u2019s work perfectly in a book he wrote with his sister, Ashly Burch, about their complicated  ...\n  At its best, what I have come to think of as Kojima Weirdness gives the games a personality seldom found in a big-budget action game. Playing them can feel like exploring the deepest recesses of an obsessive and endlessly imaginative mind. At its worst, though, Kojima Weirdness can leave you shaking your head at just how ridiculous that mind can be. There \u2019s the recurring gag in which characters soil themselves. There are the twisting, sprawling plots that leave you with only the  ...\n \u201cYeah, I do,\u201d the main character replies. \u201cI think at any time, any place, people can fall in love with each other.\u201d\n On balance, I \u2019ve found that the off-kilter writing tends to add to the charm of the series. The same can \u2019t be said for its treatment of women. In the first game, the protagonist, Solid Snake, hits his two female allies with dumb pickup lines within the first 30 seconds or so of meeting them. There \u2019s a whole mission in which you have to identify your sexy sidekick, Meryl, who is disguised as an enemy soldier, by recognizing her backside, which Snake checked out upon meeting her  ...\n   Over time, the series became a flash point in a growing debate around sexism in video games. By 2013, when Kojima revealed that one heroine of Metal Gear Solid V would be a busty female sniper named Quiet, clad in a bikini and torn stockings, it provoked outrage and dismay, even from die-hard fans. \u201cOnce you recognize the secret reason for her exposure, you will feel ashamed of your words &amp; deeds,\u201d  Kojima tweetedin response to the wave of online criticism. The \u201csecret reason  ...\n Even so, the Metal Gear Solid series delivered certain incredible pleasures that no other video games have \u2014pleasures that are difficult to isolate or define. It \u2019s perhaps easiest to explain them in terms of individual moments. Like the mind-blowing moment, in the first Metal Gear Solid, when a floating psychic named Psycho Mantis shows off his psychokinetic powers by moving your controller: After you place it on a flat surface, at his instruction, the game uses the controller  ...\n The more that was revealed about Death Stranding, the more it began to seem like  an entire game made up of such moments, in which you find yourself experiencing something you never expected you would in a video game \u2014something you never even thought to want to experience in a video game, but you do, and somehow it works, and you are almost delirious with surprise and joy, and the experience lodges in your brain like a tiny meteor strike, such that every time you wonder at the  ...\n By the time I met Kojima in October, at his offices in Tokyo, I had played roughly 17 hours of Death Stranding, having received an early-review code two days earlier. It was one of the most fascinating and compelling but also frustrating and boring experiences of my long gaming career. In Death Stranding, you assume the role of Sam Porter Bridges (Reedus), a delivery man working in a postapocalyptic America that has dissolved into scattered communities in underground bunkers  ...\n The plot of the game is preposterous, but its mood is not. The world of Death Stranding is like a depressed survivalist \u2019s fever dream. It \u2019s an unsettling mix of high technology, supernatural horror and pristine wilderness. The game \u2019s vision of postapocalyptic America is a forbidding volcanic landscape of snow-capped peaks and mossy lava fields. Crystal-clear rivers testify to a near-total lack of civilization outside the angular gunmetal buildings that mark the entrances  ...\n The process of gaining access to Kojima \u2019s office had inspired in me a similar sense. In place of a reception area, there was a small white room with a round pillar at the center. A white panel on the left wall silently slid open to reveal a man in a black Kojima Productions T-shirt \u2014this was Aki Saito, Kojima \u2019s personal translator and the communications head of Kojima Productions. Through the door, I was greeted by a narrow hallway with a white, disco-style light-up floor  ...\n The hallway, which bears a striking resemblance to the interior of the ill-fated spaceship in \u201c2001: A Space Odyssey, \u201dstands as a testament to Kojima \u2019s twin obsessions of film and outer space. As a child, Kojima dreamed first of being an astronaut, then a filmmaker. He got his spacefaring dreams from watching the Apollo 11 moon landing and his filmmaking dreams from his father, a huge movie buff. His family had a tradition of watching a movie every night; by the time he  ...\n We reached the end of the hall, and a door slid open, and there was a small woman with dyed pink hair in a large black hooded sweatshirt. This was Ayako Terashima, Kojima \u2019s personal assistant; her fans know her as Touchy! on Twitter, where she has more than 50,000 followers and provides running updates on Kojima \u2019s life. Tera\u00adshima said that Kojima wished to show me a new trailer for Death Stranding that he had just edited. Saito and a Sony P.R. rep led me into a conference  ...\n Saito left, and a few minutes later he returned with Kojima. A youthful 56, Kojima walked in with rapid, precise steps and shook my hand. He was dressed in a light sweater and jeans. He had on thick, round blue plastic glasses; a scruff of beard lent him the nerdy-cool air of the intellectual aesthete. Saito, as he translated for him, revealed a dry sense of humor and a sort of mind-meld with his boss. He translated Kojima \u2019s Japanese into English so quickly that to an  ...\n I awkwardly presented Kojima with a bag of David Lynch-branded coffee, which I had bought at Whole Foods back home. I knew he was a huge Lynch fan; in talking about his preference for being directly involved in every aspect of the creative process, he once said he would \u201crather be a David Lynch than a Spielberg.\u201d\n  Kojima grinned and thanked me with what seemed to be genuine enthusiasm. \u201cI\u2019ve wanted this,\u201d he said.\n Kojima excused himself and went back into the office to prep the trailer. After a few minutes, Saito took me in. It was a large room full of white tables, around which sat dozens of people at PCs. Toward the center of the room was a large TV on a stand in front of a stylish open kitchen area. As Kojima sat down, he warned me that there might be spoilers in the trailer.\n Boy, were there. Even after 17 hours of play, I had seen almost nothing in this trailer. I was surprised, given that reviewers had been explicitly forbidden to even mention anything that happened after the third \u201cepisode\u201d of the game; with this trailer, Kojima was essentially planning to break his own embargo.\n But spoilers be damned, Kojima was going to make the trailer he wanted. Among other things, Kojima is a pioneer of the video-game trailer. A trailer for Metal Gear Solid 2 is  still renowned for the impact it made at E3 back in 2000. A second trailer, presented the following year, ended simply with the word \u201cSubmerges\u201d; afterward, Kojima granted no interviews for six months, letting the clip speak for itself.\n When we were back in the conference room, Kojima told me that the first inkling of Death Stranding came to him about 10 years ago, when he first learned about the phenomenon of mass stranding, in which dolphins and whales mysteriously beach themselves in huge numbers. He liked the phrase and also the image: creatures from another world, washed up on a beach. The idea returned a few years later and coalesced into something more tangible: a melancholy image of a man  ...\n \u201cGuillermo del Toro called me, and he said, \u2018There\u2019s going to be a guy that contacts you called Hideo Kojima, and he\u2019s going to say we\u2019re going to do a game together, and just say yes,\u2019\u201d Reedus told me. \u201cI said, \u2018Who is he?\u2019 And he just said, \u2018Say yes.\u2019\u201d\n The image of a stranded man had an added resonance for Kojima at the time. Earlier that year, he left Konami. \u201cI was almost naked, starting a new company, \u201dhe said in our interview. \u201cI had nothing, so I thought that that image fit perfectly with my image. \u201dHis split with Konami shocked the whole industry, and the reason for it has never been revealed; Kojima hasn \u2019t discussed it, and his P.R. rep told me he wouldn \u2019t answer questions about Konami. Fans and sympathetic  ...\n \u201cI have always had this habit of feeling lonely,\u201d he replied. \u201cThat\u2019s why I create these things in the first place.\u201d Kojima was born in Tokyo in 1963; when he was a year and a half old, his family moved away, eventually settling in the city of Kobe. He became a latchkey kid, he said. Whenever he came home to an empty house after school, he would turn on all the lights and the TV for company.\n Television wasn \u2019t just a distraction; he learned from it. He loved travel shows in particular, which taught him about the world outside Japan. Throughout our interview, Kojima expressed a desire for Death Stranding to offer a similarly edifying experience. He hoped Sam \u2019s journey of reconnection might offer players a metaphor with which to understand a world he described as \u201ccoming apart. \u201d\u201cIt \u2019s not just America, but the problem with the E.U. in Europe, or the  ...\n One of the most interesting aspects of Death Stranding is its multiplayer feature. Many games let you play along with other people, either killing them or cooperating with them or both. In Death Stranding, you don \u2019t quite do either; the presence of other players is felt only indirectly, through items they leave that litter the landscape. You can help them by delivering cargo they \u2019ve dropped, or by leaving useful items or buildings behind. As thanks, you can  ...\n  \u201cYou lose this feeling of solitude when you find out there\u2019s the same people all over the world,\u201d Kojima said. \u201cYou aren\u2019t alone.\u201d I gathered that Kojima imagined this as a more positive alternative to the embattled feeling he gets from the internet. \u201cI go on the internet \u2014 it\u2019s all connected, and everyone is battling each other,\u201d he said. \u201cI wish people would use the technology in a different way.\u201d\n He clearly was worried about how Death Stranding would be received online. \u201cIt \u2019s not really easy to swallow, \u201dhe said. But this was just as he intended: \u201cI want people to feel, \u2018What the hell is this?. \u201dHe suggested that the immediacy of social media exerts a kind of conservatism on popular taste. \u201cRecently there \u2019s social media, and people will kind of start a negative campaign, \u201dhe said. \u201cThey might say, \u2018I don \u2019t really understand it, I \u2019m just stuck, so  ...\n I asked about the criticism he received over the Quiet episode and over the Metal Gear Solid series\u2019s treatment of women more generally. He seemed to acknowledge that his thinking had evolved, even while defending the way he did things in the past. \u201cEntertainment moves on with the era,\u201d he said, adding: \u201cOf course, I can\u2019t do the same thing today. The era is moving; it\u2019s totally different.\u201d\n I should have pointed out that 2015, when Metal Gear Solid V came out, wasn \u2019t all that long ago, but it was clear that my interview was almost up. Soon the Sony P.R. rep told me that there was time for only one more question. Kojima \u2019s response had reminded me of a comment he once made about the timebound nature of video games. He had compared playing an old video game to driving a 30-year-old car \u2014it would get you to your destination, but the ride wouldn  ...\n This was a truth I had come to recognize when playing some of the old Metal Gear Solid games, whose inelegant controls and outdated graphics now significantly dampened the experience for me. I said that it was interesting he was trying to create an enduring experience through an artwork that, in 30 years, perhaps people would no longer find engaging.\n \u201cIt\u2019s not about making people play Death Stranding 30 years from now,\u201d he said. \u201cI just want to make them relive the memories they had, or the impression they had when playing for a long time.\u201d\n The interview was over. Saito handed me a bag full of Kojima Productions swag. Kojima rose, and I shook his hand and thanked him for his time. Then he was back out the door.\n Throughout his career, Kojima \u2019s work has confronted gamers with the question of why they play. Do you want to blow off some steam by blasting away a thousand alien soldiers while luxuriating in the most badass graphics you \u2019ve ever seen? Kojima \u2019s games may not be for you. Do you want to experience the singular creative vision of an uncompromising auteur while luxuriating in the most badass graphics you \u2019ve ever seen? Well, you are probably already a  ...\n One of the defining characteristics of all of Kojima \u2019s games is their narrative ambition. Many video-game stories are perfunctory affairs; the only purpose of the plot is to give a basic motivation for the action. The Metal Gear Solid games, by contrast, try to convey stories of operatic scope and dizzying complexity. Your adventure quickly departs from the straight\u00adforward hero \u2019s journey found in many video games and descends into a labyrinthine techno-military  ...\n In Death Stranding, the story is stripped down by comparison, the ambiguity of its narrative situations more subtle. On the one hand, your journey to \u201cmake America whole, \u201das the former president tells you at the beginning, seems synonymous with progress. You deliver the scattered survivors much-needed medicine, supplies and information. With each node of the Chiral Network you bring online, the surrounding area lights up on your map, and you can now  ...\n  After my interview with Kojima, I spent much of the next few days sequestered in my tiny hotel room in Tokyo, playing Death Stranding on the cheap TV. Once I started guiding Sam along his journey, I found Death Stranding to be not as radically unfamiliar as Kojima \u2019s prerelease hype had suggested. In many ways it hews to the popular conventions of the \u201copen world \u201dgenre \u2014a term that arose to describe titles like Rockstar Games \u2019s famed Grand Theft  ...\n But there  wassomething fundamentally new, I found as I continued to play. Death Stranding manages to transform an act that most open-world games take for granted \u2014the act of traveling from one point to another \u2014into a complicated and meaningful experience. Although you eventually gain access to vehicles, much of the time walking is your only mode of transit. In most games, walking is a mindless chore: You can watch the scenery go by, but there \u2019s  ...\n For a porter, Sam is very unsteady on his feet. Every rock or dip in the terrain can cause him to stumble and fall. Going up or down steep slopes frequently results in a slide amid a shower of rocks and cargo. Sam will topple over in the middle of fording a river if his fast-draining stamina gauge runs out. In order to keep him from falling, you must constantly be ready to pull the left or right trigger, which makes him grab the corresponding strap  ...\n Strangely, I found, this labor made me empathize with Sam to a degree that I had never experienced with a video-game character. I first noticed this near the beginning of the game, when I took shelter in a cave from a B.T.-riddled rainstorm. I didn \u2019t really have any idea what I was doing; a marker off in the distance labeled \u201cPort Knot City \u201dseemed to be where I needed to go. I headed out of the cave and down a path that descended into a ravine.  ...\n A blue indicator below Sam appeared, telling me to pull the right and left triggers on my controller to regain balance, but it vanished as quickly as it had appeared. The path leveled out. Then it descended even more steeply, and Sam began speeding up again. His steps got shorter and quicker as he tried desperately to slow his pace.\n The balance indicator appeared again, but before I could react Sam stumbled over a small rock and went head over heels in five jarring somersaults before regaining his footing and coming to a halt. The boxes I\u2019d been carrying on my back had flown off during the tumble and lay strewn behind me, flashing ominously.\n This left me minorly stunned. I had never tripped in a video game. I\u2019ve  fallena lot: into pits in Super Mario Bros., off the top of a roof of a gutted apartment building in the online shooter PlayerUnknown \u2019s Battlegrounds, off cliff faces in the treasure-hunting adventure series Uncharted. Because it \u2019s self-inflicted, a fall is frustrating in a way that being killed by an enemy isn \u2019t. But usually when you fall, you fall very far, to your death,  ...\n One of the first missions forces Sam to carry his own adoptive mother \u2019s corpse on his back. The load is so unwieldy that even a slight change in direction sends Sam stumbling. Again and again I came close to falling, and each time my heart leapt into my chest. I knew that if I took things slowly I would make it, but it was hard to break my ingrown habits. In most games, whenever you have distance to cover, you tend to run, especially because  ...\n I ultimately did fall with the corpse on my back, while impatiently clambering over some rough terrain. The rumble from the controller as Sam sprawled flat on his face sent a jolt of sickening horror up my spine. As Sam struggled to his feet, I took some small comfort in the fact that he had fallen straight forward, so the corpse didn \u2019t actually touch the ground while he was carry\u00ading it to the incinerator. I was fully immersed in Sam \u2019s bleak  ...\n In our interview, I had asked Kojima about the unusually involved process of walking in the game. He said: \u201cA game is basically not your normal day life. You\u2019re supposed to be a hero. You\u2019re super fast, or you can jump high, or you can fly. That\u2019s the beginning of games, right? But in our game, it\u2019s like a blue-collar worker. You have to watch your step, otherwise you fall, and there\u2019s no character like that.\u201d\n  He went on: \u201cIt\u2019s like a normal self of yourself, where you have to balance, that saves the world. It\u2019s totally different than the characters or the heroes that have appeared in other games. That\u2019s my approach.\u201d He said he wanted to make players ask themselves, \u201cWhy am I doing this?\u201d\n A few weeks after my visit with Kojima in Tokyo, I attended a launch event for Death Stranding in Manhattan. A hundred or so people assembled at a large exhibition space in Chelsea, making the whole thing seem more like the opening of a fancy conceptual-art show than the introduction of a video game. A replica of the white hall from Kojima Productions had been constructed at the entrance; snazzily dressed people sipped cocktails and wine.  ...\n \u201cNo, I\u2019m not,\u201d she said, shaking her head. (She was there because her husband\u2019s son works for Sony Music and helped with the soundtrack.)\n Kojima roamed the gallery wearing a black blazer over a T-shirt, black pants and black-and-white basketball sneakers. A small crowd was trailing him, including a personal cameraman there to document his every move. He stood for much of the night on an elevated stage, hamming it up with members of the cast as guests and media snapped their photographs.\n When I was finally able to get close to him, I asked how he was feeling, now that Death Stranding had been revealed to the world. He smiled and jumped into a minute dissection of the reviews, which had been published a few days earlier. They were generally positive, though substantially less so than those received by any of the games in the Metal Gear Solid series. (Death Stranding has an 82 out of 100 on the review-aggregation site Metacritic,  ...\n He had a theory about the relative difference between European and American reviews. \u201cIn America, they\u2019re used to shooters, so they don\u2019t gulp it down,\u201d Kojima said. \u201cIt\u2019s OK; everyone can evaluate what they want.\u201d He noted that he saw a similar resistance to the stealth concept in the Metal Gear Solid games at the time. \u201cIn three to five years, we will see what people will say.\u201d\n Five years is practically geological time in the video-game industry, but then again, Death Stranding is a game that does not adhere to accepted time conventions. I played as fast as I could, forgoing almost all the side missions, reading barely any of the hundreds of emails you receive that fill in the plot, zooming from one delivery to the next, and it still took me over 60 hours to beat, well above the usual (30 to 40) of most big-budget  ...\n And it seemed as if whatever pleasure I got was directly related to how much I personally struggled. About halfway through the game, there is a brutal section in which you have to make a series of deliveries in a mountain area covered in thigh-high snow. The snow makes walking excruciatingly slow. You can \u2019t run. Sam walks with wide, sloughing steps, pushing against the snow, his face crystallizing in a mask of ice. For two hours straight,  ...\n In \u201cHamlet on the Holodeck, \u201dher classic study of computer-based narrative, the literary theorist Janet Murray explores the narrative potential of journeying through a virtual world. She cites the story of Odysseus \u2019escape from the Cyclops by getting him drunk and sneaking his men out underneath a herd of sheep. Games, she writes, can convey a similar drama of escape by using well-designed puzzles to trap players in space until they  ...\n Sam\u2019s journey reminded me of another character who is glimpsed briefly in the Odyssey: poor Sisyphus, rolling his rock up the hill. He, too, was involved in a struggle against the earth itself. Is it pleasurable? Well, as Camus would say, it\u2019s all how you look at it: \u201cThe absurd man, when he contemplates his torment, silences all the idols.\u201d\n Death Stranding had made me contemplate every exhausting step. At many points, I reflected that if I didn\u2019t have to finish the game in order to write this article, I would have quit. But I\u2019m glad I didn\u2019t \u2014 because I would have missed out on one of the most beautiful and unsettling experiences I\u2019ve ever had in a game.\n It came during a mission in which I was tasked with recovering a machine that a paleontologist had been using to collect samples from a tar pit. The valley was wide and flat, pocked with gaping calderas that blew enormous plumes of steam into the air, like sideways clouds drifting into the sky. After hours of white and gray and blinding snow in the mountains, gazing on the relative liveliness of the valley, the dark green grass  ...\n But when I respawned, there was a huge smoldering crater in the spot where I had died, about a mile wide and a quarter mile deep: a void left by my body. A bit shaken, I collected the paleontologist \u2019s machine and headed back into the mountains. Turning the corner in a wide path, I heard a far-off rumbling sound. Three enormous boulders tumbled slowly down the side of the mountain. For a second I thought they were going to run  ...\n The ups and downs of the previous hour or so, from the pit of boredom to the height of terror and down again to quiet, surreal beauty, had left me overwhelmed. This is not a typical feeling you get from a video game. Video games usually make you feel powerful. It \u2019s film that makes you surrender to the spectacle on the screen. What makes Death Stranding a powerful experience is how it uses its agency-granting power to make you  ...\n After the boulders came to rest, I had the feeling of an eerie presence, something alive in the rough stone spheres that had come to rest in the snow in front of me. I felt as if my entire being had been slightly rearranged, at a molecular level. It was a classic Kojima moment.", "posttime": "2020-05-03 22:17:39", "tags": "\u6e38\u620f,\u5c0f\u5c9b\u79c0\u592b,\u7535\u5b50\u6e38\u620f,\u79c0\u592b,kojima", "title": "\u5c0f\u5c9b\u79c0\u592b\u5947\u7279\u96be\u5fd8\u7684\u7535\u5b50\u6e38\u620f\u4e16\u754c", "title_en": "Hideo Kojima\u2019s Strange, Unforgettable Video-Game Worlds", "transed": 1, "url": "https://www.nytimes.com/2020/03/03/magazine/hideo-kojima-death-stranding-video-game.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6e38\u620f", "\u5c0f\u5c9b\u79c0\u592b", "\u7535\u5b50\u6e38\u620f", "\u79c0\u592b", "kojima"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000490, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4ee5\u524d\u5199\u8fc7\u5173\u4e8e\u5728\u684c\u9762shell\u4f1a\u8bdd\u5d29\u6e83\u540e\u5982\u4f55\u901a\u8fc7dbus\u670d\u52a1\u4eceGNOME\u6587\u672c\u7f16\u8f91\u5668(Gedit)\u6062\u590d\u672a\u4fdd\u5b58\u7684\u6587\u6863\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6765\u81ea\u4ee4\u4eba\u5174\u594b\u7684\u684c\u9762\u7535\u5b50\u90ae\u4ef6\u5e94\u7528\u7a0b\u5e8f\u4e16\u754c\u7684\u7c7b\u4f3c\u800c\u4ee4\u4eba\u5174\u594b\u7684\u6545\u4e8b\uff01\nGNOME\u684c\u9762\u9879\u76ee\u7684\u7535\u5b50\u90ae\u4ef6\u548c\u4e2a\u4eba\u4fe1\u606f\u7ba1\u7406\u5ba2\u6237\u7aefEvolation\u5b58\u5728\u4e25\u91cd\u7684\u6570\u636e\u4e22\u5931\u6f0f\u6d1e\u3002\u4f7f\u7528\u4e2d\u7684Signature Presets\u83dc\u5355\u66f4\u6539\u7b7e\u540d\u540e\uff0c\u6709\u65f6\u4f1a\u5220\u9664\u64b0\u5199\u7a97\u53e3\u4e2d\u7684\u7535\u5b50\u90ae\u4ef6\u6b63\u6587\u6587\u672c\u3002\u6211\u4e0d\u77e5\u9053\u590d\u5236\u5b83\u7684\u786e\u5207\u6b65\u9aa4\uff0c\u4f46\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u5b83\u6bcf\u6708\u5927\u7ea6\u54ac\u6211\u4e24\u6b21\u3002\u7535\u5b50\u90ae\u4ef6\u7684\u5185\u5bb9\u5c06\u88ab\u7b80\u5355\u5220\u9664\uff0c\u9664\u4e86\u65b0\u7b7e\u540d\u5916\uff0c\u60a8\u5c06\u770b\u5230\u4e00\u6761\u7a7a\u6d88\u606f\u3002\n\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u64a4\u6d88\u5386\u53f2\u8bb0\u5f55\u5df2\u88ab\u6e05\u9664\uff0c\u56e0\u6b64\u6211\u65e0\u6cd5\u6309Ctrl+Z\u6765\u6062\u590d\u8349\u7a3f\u3002\u5728\u6211\u5f00\u59cb\u5199\u56de\u4fe1\u4e4b\u524d\uff0c\u6211\u5df2\u7ecf\u5b66\u4f1a\u4e86\u901a\u8fc7\u66f4\u6539\u7b7e\u540d\u6765\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\u6709\u65f6\u6211\u5fd8\u4e86\uff0c\u7136\u540e\u5c31\u662f\u6570\u636e\u4e22\u5931\u7684\u65f6\u5019\u4e86\uff01\u8981\u4e48\u6211\u4e22\u4e86\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u8981\u4e48\u5b83\u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u6211\u4ece\u6765\u6ca1\u6709\u8f93\u8fc7\u4e00\u4e24\u4e2a\u6bb5\u843d\u3002\n\u51e0\u5929\u524d\uff0c\u6211\u4e22\u5931\u4e86\u4e00\u5c01\u82b1\u4e86\u6211\u534a\u4e2a\u5c0f\u65f6\u5199\u7684\u5f88\u957f\u7684\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u5b8c\u5168\u4fdd\u6301\u51b7\u9759\uff0c\u6ca1\u6709\u6cae\u4e27\u5730\u79bb\u5f00\u7535\u8111\u3002(\u4e0d\u662f\u3002)\u3002\u5982\u679c\u6211\u4fdd\u6301\u51b7\u9759\u5e76\u7acb\u5373\u91c7\u53d6\u884c\u52a8\uff0c\u6211\u4e5f\u8bb8\u53ef\u4ee5\u4ece\u8349\u7a3f\u6587\u4ef6\u5939\u4e2d\u6062\u590d\u90e8\u5206\u90ae\u4ef6\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5b83\u88ab\u4e00\u6761\u7a7a\u6d88\u606f\u8986\u76d6\u4e86\u3002\u6211\u5fc5\u987b\u5728\u7a0d\u540e\u67e5\u770b\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u8349\u7a3f\u6587\u4ef6\u5939\u7684\u7248\u672c\u3002\n\u7136\u800c\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5e0c\u671b\u90fd\u7834\u706d\u4e86\u3002\u5f15\u7528\u4e00\u90e8\u5907\u53d7\u559c\u7231\u7684\u53e4\u751f\u7269\u5947\u5e7b\u7535\u5f71\uff1a\u201c\u8fd9\u662fUnix\u7cfb\u7edf\uff01\u6211\u77e5\u9053\u8fd9\u4e2a\uff01\u91cc\u9762\u6709\u6574\u4e2a\u516c\u56ed\u7684\u6240\u6709\u6863\u6848\u3002\u5b83\u544a\u8bc9\u4f60\u4e00\u5207\uff01\u6211\u5fc5\u987b\u627e\u5230\u6b63\u786e\u7684\u6587\u4ef6\u3002\u201c\u3002\n\u8fd9\u4e00\u6b21\uff0c\u5728\u866b\u5b50\u9732\u51fa\u4e11\u964b\u7684\u9762\u5b54\u540e\uff0c\u6211\u6ca1\u6709\u5173\u95ed\u8fdb\u5316\u6216\u64b0\u5199\u7a97\u53e3\u3002\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u7684\u5b8c\u6574\u526f\u672c\u53ef\u80fd\u4f1a\u4fdd\u7559\u5728\u5185\u5b58\u4e2d\u3002\u6211\u7684\u7535\u8111\u670932 GB\u7684\u5185\u5b58\uff0c\u76f2\u76ee\u5730\u68c0\u67e5\u6240\u6709\u5185\u5b58\u5728\u6280\u672f\u4e0a\u65e2\u6709\u6311\u6218\u6027\uff0c\u4e5f\u5f88\u8017\u65f6\u3002\nLinux\u5728/proc/$pid/aps\u4e2d\u7ef4\u62a4\u8fdb\u7a0b\u5185\u5b58\u5206\u914d\u7684\u6620\u5c04\uff0c\u5176\u4e2d$pid\u662f\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u6807\u8bc6\u7b26/\u7f16\u53f7\u3002\u6709\u591a\u79cd\u5de5\u5177\u53ef\u7528\u4e8e\u68c0\u7d22\u4e0e\u8fd9\u4e9b\u5730\u5740\u5bf9\u5e94\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u5e38\u89c4\u6587\u4ef6\u3002\n\u6211\u51b3\u5b9a\u7ec4\u5408\u4f7f\u7528pidof(\u4f5c\u4e3aprocps-ng\u7684\u4e00\u90e8\u5206\u5b89\u88c5)\u6765\u6807\u8bc6\u8fdb\u7a0b\u53f7\uff0c\u4ee5\u53cagcore(\u4f5c\u4e3aGDB(GNU\u8c03\u8bd5\u5de5\u5177\u5957\u4ef6)\u7684\u4e00\u90e8\u5206\u5b89\u88c5)\u6765\u5c06\u8fdb\u7a0b\u7684\u5185\u5b58\u8bfb\u53d6\u5230\u6587\u4ef6\u4e2d\u3002\u4ee5\u4e0b\u662f\u6211\u4f7f\u7528\u7684\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\uff1a\n\u8fd9\u4ea7\u751f\u4e86\u4e00\u4e2a\u5de8\u5927\u76844 GB\u4e8c\u8fdb\u5236\u5185\u5b58\u8f6c\u50a8\u6587\u4ef6\u3002\u5173\u4e8e\u73b0\u4ee3\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u8017\u8d39\u5185\u5b58\u7684\u8bc4\u8bba\u88ab\u6401\u7f6e\u4e00\u8fb9\uff1b\u8fd9\u4ecd\u7136\u662f\u5927\u91cf\u7684\u6570\u636e\u8981\u5904\u7406\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4e13\u95e8\u7684\u5de5\u5177\u6765\u5206\u6790\u6b64\u6570\u636eblob\u3002\u4f46\u662f\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528Nanotext\u7f16\u8f91\u5668\u3002\u5b83\u5728\u5904\u7406\u6d77\u91cf\u6587\u4ef6\u65f6\u5f88\u201c\u8212\u670d\u201d\uff0c\u5f53\u4f60\u7528\u5b83\u6765\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u65f6\u4e5f\u4e0d\u4f1a\u5361\u4f4f\u3002\u6211\u77e5\u9053\u6211\u611f\u5174\u8da3\u7684\u6570\u636e\u5c06\u4ee5UTF-8\u683c\u5f0f\u5b58\u50a8\uff0c\u56e0\u6b64\u6587\u672c\u7f16\u8f91\u5668\u5e94\u8be5.\u3002\n\u641c\u7d22\u8fd9\u4e2a\u5de8\u5927\u7684\u6587\u4ef6\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u3002\u8fd9\u91cc\u6709\u5927\u91cf\u7684\u6570\u636e\u9700\u8981\u7ffb\u6765\u8986\u53bb\u3002\u6211\u6700\u521d\u8ba4\u4e3a\u641c\u7d22\u72ec\u7279\u7684\u5355\u8bcd\u4f1a\u662f\u6700\u597d\u7684\u65b9\u6cd5\u3002\u6211\u627e\u5230\u7684\u7b2c\u4e00\u6253\u5339\u914d\u9879\u662f\u4e0e\u62fc\u5199\u68c0\u67e5\u5668\u76f8\u5173\u7684\u6570\u636e\u3002\u7136\u800c\uff0c\u6211\u6539\u53d8\u4e86\u4e3b\u610f\uff0c\u8f6c\u800c\u5bfb\u627e\u6211\u80fd\u8bb0\u4f4f\u7684\u90e8\u5206\u53e5\u5b50\u7247\u6bb5\u3002\u8fd9\u79cd\u65b0\u65b9\u6cd5\u5c06\u9519\u8fc7\u6d88\u606f\u7684\u4efb\u4f55\u53ef\u5f15\u7528\u6253\u5370(RFC2045)\u8868\u793a\uff0c\u4f46\u4f1a\u63d0\u4f9b\u66f4\u5c11\u7684\u96f6\u6563\u5339\u914d\u3002..\u3002\n\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6211\u80fd\u591f\u8bc6\u522b\u548c\u68c0\u7d22\u5b8c\u6574\u7535\u5b50\u90ae\u4ef6\u7684\u7eaf\u6587\u672c\u526f\u672c\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u4ece\u7f16\u8f91\u7a97\u53e3\u4e2d\u6d88\u5931\u65f6\uff0c\u6211\u4eceRAM\u4e2d\u68c0\u7d22\u5230\u7684\u526f\u672c\u6709\u6211\u9009\u62e9\u7684\u65b0\u7b7e\u540d\u3002\n\u6211\u5f88\u9ad8\u5174\u8fd9\u6b21\u6211\u8bbe\u6cd5\u627e\u56de\u4e86\u90a3\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\u4e0d\u8fc7\uff0c\u6211\u53ef\u80fd\u5e94\u8be5\u7559\u51fa\u4e00\u4e9b\u65f6\u95f4\u8fc1\u79fb\u5230\u53e6\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\u3002\u8fdb\u5316\u662f\u4f1f\u5927\u7684\uff01\u5c24\u5176\u662f\u7535\u5b50\u90ae\u4ef6\u7f16\u5199\u5668\u7a97\u53e3\uff0c\u6211\u9047\u5230\u4e86\u591a\u4e2a\u95ee\u9898\u3002\u5f53\u6211\u4e0d\u80fd\u53ef\u9760\u5730\u4f7f\u7528\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\u6765\u5199\u7535\u5b50\u90ae\u4ef6\u65f6\uff0c\u5b83\u5c31\u6ca1\u6709\u771f\u6b63\u7684\u7528\u5904\u4e86\u3002", "note_en": "I\u2019ve previously written about how I  recovered an unsaved document over the  dbus service from the GNOME Text Editor (GEdit) after the desktop shell session had crashed. Here\u2019s a similar and exciting tale from the exciting world of desktop email applications!\n  Evolution, the GNOME\u2019 desktop project\u2019s email and personal information management client, has a bad data loss bug. It sometimes deletes the email body text in the compose window after changing the signature using the signature presets menu from the. I don\u2019t know the exact steps to reproduce it but it has bitten me about twice a month for the last two years. The contents of the email is simply deleted and you\u2019re left with an empty message except for the new signature.\n    To make matters worse, the Undo history is cleared so I can\u2019t press  Ctrl + Z to restore the draft. I\u2019ve learned to avoid it by changing the signature before I start to write a reply. Sometimes I forget and then it\u2019s data loss bingo-time! Either I\u2019ll lose the email or it\u2019ll function properly. I\u2019ve never lost more than a paragraph or two.\n  A few days ago I lost a long email that had taken me half an hour to compose. I remained completely calm and didn\u2019t walk away from my computer in frustration. (Not.) I might have been able to partially recover the message from the Draft folder if I\u2019d retained my cool and acted immediately. It had been overwritten by an empty message instead. I must look into versioning my email draft folder at a later time.\n  All hope wasn\u2019t lost, however. To quote a beloved paleontology fantasy film: \u201cIt\u2019s a Unix-system! I know this! It has all the files for the whole park. It tells you everything! I\u2019ve gotta find the right file.\u201d\n  This time around, I hadn\u2019t closed Evolution or the compose window after the bug revealed its ugly face. A complete copy of my email could remain in memory. My computer has 32 GB of RAM and going through all of it blindly is both technically challenging and time-consuming.\n  Linux maintains a map of a process\u2019 memory allocations in  /proc/ $pid/maps, where  $pid is the process identifier/number of the running process. There are multiple tools available for retrieving the chunks of memory corresponding to these addresses and saving them to a regular file.\n  I settled on a combination of  pidof (installed as part of  procps-ng) for identifying the process number, and  gcore (installed as part of  gdb, the GNU Debugging Toolsuite) for reading the process\u2019 memory to a file. Here\u2019s the final command I used:\n    This produced a huge 4 GB binary memory dump file. Comments about how memory hungry modern desktop applications are aside; this is still a lot of data to go through. There are specialized tools you can use to analyze this data blob. However, I settled on using the  nanotext editor. It \u2019s \u201ccomfortable \u201dworking with massive files and doesn \u2019t choke when you use it to read reading binary data. I knew that the data I was interested in would be stored in UTF-8 so a text editor should  ...\n  Searching through this huge file took a long while. There \u2019s just a lot of data to churn through. I initially thought that searching for unique words would be the best approach. The first dozen matches I found were data related to the spell-checker. However, I changed my mind and search for partial sentence fragments I could remember instead. This new approach would miss out on any quoted-printable (RFC 2045) representation of the message but would give fewer fragmented matches.  ...\n  Using this method, I was able to identify and retrieve a plain text copy of the complete email. The copy I retrieved from RAM notably had the new signature I\u2019d selected when the email contents disappeared from the editing window.\n  I\u2019m glad I managed to recover the email this time. However, I should probably set aside some time to migrate to another email client. Evolution is great! I\u2019ve run into multiple issues with the email composer window in particular. An email client isn\u2019t really useful when I can\u2019t reliably use it to write emails.", "posttime": "2020-05-03 21:55:38", "tags": "\u7535\u5b50\u90ae\u4ef6,email", "title": "\u6211\u4ece\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7684\u8bb0\u5fc6\u4e2d\u627e\u56de\u4e86\u4e00\u5c01\u4e22\u5931\u7684\u7535\u5b50\u90ae\u4ef6", "title_en": "I recovered a lost email from my email client\u2019s memory", "transed": 1, "url": "https://www.ctrl.blog/entry/restore-lost-email-from-ram.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7535\u5b50\u90ae\u4ef6", "email"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000489, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4efb\u5929\u5802\u6e38\u620f\u7537\u5b69\u989c\u8272\u662f\u4e00\u6b3e\u624b\u6301\u6e38\u620f\u673a\uff0c\u4e8e1998\u5e74\u53d1\u5e03\u3002\u5b83\u4f7f\u7528\u97f3\u9891\u653e\u5927\u5668\u82af\u7247\u6765\u9a71\u52a8\u5185\u90e8\u626c\u58f0\u5668\u6216\u7acb\u4f53\u58f0\u8033\u673a\u3002\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4ece\u7167\u7247\u548c\u89e3\u91ca\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5bf9\u8fd9\u4e2a\u82af\u7247\u8fdb\u884c\u4e86\u9006\u5411\u5de5\u7a0b\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u4e09\u4e2a\u529f\u7387\u8fd0\u7b97\u653e\u5927\u5668\uff0c\u91cc\u9762\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u7535\u8def\u3002\n\u4efb\u5929\u5802\u6e38\u620f\u7537\u5b69\u8272\u5f69\u4e2d\u97f3\u9891\u653e\u5927\u5668\u82af\u7247\u7684\u6a21\u5177\u7167\u7247\u3002\u70b9\u51fb\u8fd9\u5f20(\u6216\u4efb\u4f55\u5176\u4ed6\u56fe\u7247)\u53ef\u4ee5\u770b\u5230\u66f4\u5927\u7684\u56fe\u7247\u3002\u7167\u7247\u7531\u7ea6\u7ff0\u00b7\u9ea6\u514b\u9a6c\u65af\u7279\u63d0\u4f9b\u3002\n\u4e0a\u9762\u7684\u7167\u7247\u663e\u793a\u4e86\u82af\u7247\u5728\u663e\u5fae\u955c\u4e0b\u7684\u7845\u6676\u7247\u3002\u767d\u7ebf\u662f\u82af\u7247\u7684\u91d1\u5c5e\u5c42\uff0c\u8fde\u63a5\u7740\u5143\u4ef6\u3002\u7845\u672c\u8eab\u770b\u8d77\u6765\u662f\u7eff\u8272\u7684\uff0c\u5728\u91d1\u5c5e\u4e0b\u9762\u3002\u5916\u9762\u7684\u9ed1\u8272\u5706\u5708\u662f\u952e\u5408\u5bfc\u7ebf\u8fde\u63a5\uff0c\u5c06\u7845\u82af\u8fde\u63a5\u5230\u82af\u7247\u7684\u5c01\u88c5\u4e0a\u3002\u82af\u7247\u7684\u533a\u57df\u7ecf\u8fc7\u5904\u7406(\u63ba\u6742)\u4ee5\u6539\u53d8\u7845\u7684\u7535\u5b66\u7279\u6027\u3002\u4e0b\u9762\u51e0\u8282\u89e3\u91ca\u4e86\u5143\u4ef6\u662f\u5982\u4f55\u4ea7\u751f\u7684\u3002\n\u653e\u5927\u5668\u82af\u7247\u7531\u88ab\u79f0\u4e3aNPN\u548cPNP\u53cc\u6781\u578b\u6676\u4f53\u7ba1\u7684\u6676\u4f53\u7ba1\u7ec4\u6210\uff0c\u4e0d\u540c\u4e8e\u5904\u7406\u5668\u4e2d\u4f7f\u7528\u7684\u4f4e\u529f\u8017MOS\u6676\u4f53\u7ba1\u3002\u8fd9\u4e9b\u6676\u4f53\u7ba1\u6709\u4e09\u4e2a\u8fde\u63a5\uff1a\u53d1\u5c04\u6781\u3001\u57fa\u6781\u548c\u96c6\u7535\u6781\u3002\u4e0b\u9762\u653e\u5927\u7684\u7167\u7247\u663e\u793a\u4e86\u5176\u4e2d\u4e00\u4e2a\u6676\u4f53\u7ba1\u51fa\u73b0\u5728\u82af\u7247\u4e0a\u3002\u7845\u4e2d\u7565\u5fae\u4e0d\u540c\u7684\u8272\u8c03\u8868\u793a\u5df2\u7ecf\u63ba\u6742\u5f62\u6210N\u548cP\u533a\u7684\u533a\u57df\uff0c\u533a\u57df\u4e4b\u95f4\u6709\u9ed1\u7ebf\u5206\u9694\u3002\u6c14\u6ce1\u72b6\u94f6\u8272\u533a\u57df\u662f\u91d1\u5c5e.\u3002\n\u653e\u5927\u5668\u82af\u7247\u4e2d\u7684NPN\u6676\u4f53\u7ba1\u3002\u96c6\u7535\u6781(C)\u3001\u53d1\u5c04\u6781(E)\u548c\u57fa\u6781(B)\u8fde\u540cN\u548cP\u63ba\u6742\u7684\u7845\u4e00\u8d77\u6807\u8bb0\u3002\n\u7167\u7247\u4e0b\u9762\u662f\u4e00\u5f20\u6a2a\u65ad\u9762\u56fe\uff0c\u8bf4\u660e\u4e86\u6676\u4f53\u7ba1\u662f\u5982\u4f55\u6784\u9020\u7684\u3002\u53d1\u5c04\u6781(E)\u7ebf\u8fde\u63a5\u5230N+\u7845\u3002\u5176\u4e0b\u65b9\u662f\u8fde\u63a5\u5230\u57fa\u89e6\u70b9(B)\u7684P\u5c42\u3002\u4e0b\u9762\u662f(\u95f4\u63a5\u5730)\u8fde\u63a5\u5230\u96c6\u7535\u6781(C)\u7684N+\u5c42\u3002\u5982\u679c\u4f60\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u5782\u76f4\u6a2a\u622a\u9762\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u5f62\u6210\u6676\u4f53\u7ba1\u7684N-P-N\u5c42\u3002\n\u4e0b\u9762\u7684\u7167\u7247\u663e\u793a\u4e86\u4e00\u4e2a\u7528\u6765\u9a71\u52a8\u626c\u58f0\u5668\u7684\u5927\u578b\u8f93\u51fa\u6676\u4f53\u7ba1\u3002\u8fd9\u4e9b\u6676\u4f53\u7ba1\u5fc5\u987b\u4ea7\u751f\u9ad8\u7535\u6d41\u8f93\u51fa\uff0c\u6240\u4ee5\u5b83\u4eec\u6bd4\u5e38\u89c4\u6676\u4f53\u7ba1\u5927\u5f97\u591a\uff0c\u5e76\u4e14\u5177\u6709\u4e0d\u540c\u7684\u7ed3\u6784\u3002\u8bf7\u6ce8\u610f\u53d1\u5c04\u5668\u548c\u57fa\u5ea7\u7684\u591a\u4e2a\u4e92\u9501\u624b\u6307\uff0c\u5468\u56f4\u73af\u7ed5\u7740\u5927\u578b\u6536\u96c6\u5668\u3002\u5982\u679c\u4f60\u56de\u5934\u770b\u82af\u7247\u7167\u7247\uff0c\u4f60\u4f1a\u770b\u5230\u5176\u4e2d\u4e24\u4e2a\u6676\u4f53\u7ba1\u586b\u6ee1\u4e86\u82af\u7247\u7684\u5de6\u4e0a\u89d2\u3002\n\u82af\u7247\u4e2d\u7684\u5927\u7535\u6d41NPN\u8f93\u51fa\u6676\u4f53\u7ba1\u3002\u6807\u8bb0\u6536\u96c6\u5668(C)\u3001\u57fa\u5ea7(B)\u548c\u53d1\u5c04\u5668(E)\u3002\n\u8be5\u82af\u7247\u8fd8\u4f7f\u7528PnP\u6676\u4f53\u7ba1\uff0c\u5176\u7ed3\u6784\u5b8c\u5168\u4e0d\u540c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u30022PNP\u6676\u4f53\u7ba1\u6709\u4e00\u4e2a\u5c0f\u7684\u6b63\u65b9\u5f62\u53d1\u5c04\u6781(P-\u7845)\uff0c\u7531\u4e00\u4e2a\u6b63\u65b9\u5f62\u57fa\u533a(N-\u7845)\u5305\u56f4\uff0c\u8be5\u6b63\u65b9\u5f62\u57fa\u533a\u53c8\u88ab\u96c6\u7535\u6781(P-\u7845)\u5305\u56f4\u3002(\u53d1\u5c04\u6781\u91d1\u5c5e\u8986\u76d6\u53d1\u5c04\u6781\u548c\u57fa\u6781\uff0c\u4f46\u53ea\u8fde\u63a5\u5230\u57fa\u6781\u3002)\u4e0eNPN\u6676\u4f53\u7ba1\u7684\u5782\u76f4\u7ed3\u6784\u4e0d\u540c\uff0c\u8fd9\u4e9b\u533a\u57df\u6c34\u5e73(\u6a2a\u5411)\u5f62\u6210P-N-P\u5939\u5c42\u3002\u8bf7\u6ce8\u610f.\u3002\n\u82af\u7247\u4e2d\u7684PnP\u6676\u4f53\u7ba1\u3002\u96c6\u7535\u6781(C)\u3001\u53d1\u5c04\u6781(E)\u548c\u57fa\u6781(B)\u7684\u8fde\u63a5\u4ee5\u53caN\u548cP\u63ba\u6742\u7684\u7845\u90fd\u6807\u6709\u6807\u7b7e\u3002\u57fa\u5ea7\u56f4\u7ed5\u53d1\u5c04\u6781\u5f62\u6210\u73af\uff0c\u96c6\u7535\u6781\u56f4\u7ed5\u57fa\u5ea7\u5f62\u6210\u73af\u3002\n\u7535\u963b\u5668\u662f\u6a21\u62df\u82af\u7247\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u4e0b\u9762\u7684\u7167\u7247\u663e\u793a\u4e86\u4e00\u4e2a\u957f\u957f\u7684\u952f\u9f7f\u5f62\u7535\u963b\u5668\uff0c\u8fde\u63a5\u5230\u7167\u7247\u5e95\u90e8\u7684\u91d1\u5c5e\u7ebf\u4e0a\u3002(\u7535\u963b\u5668\u5728\u91d1\u5c5e\u5c42\u4e0b\u9762\u6709\u51e0\u4e2a\u70b9\u901a\u8fc7\u3002)\u7535\u963b\u5668\u662f\u7531P\u578b\u7845\u7247\u5f62\u6210\u7684\u3002\u7535\u963b\u4e0e\u7535\u963b\u5668\u7684\u957f\u5ea6\u6210\u6b63\u6bd4\uff0c\u6240\u4ee5\u5927\u503c\u7535\u963b\u5668\u7684\u5f62\u72b6\u662f\u4e4b\u5b57\u5f62\u7684\uff0c\u4ee5\u9002\u5e94\u53ef\u7528\u7a7a\u95f4\u3002\u7531\u4e8e\u7535\u963b\u5668\u76f8\u5bf9\u8f83\u5927\u4e14\u4e0d\u7cbe\u786e\uff0c\u82af\u7247\u8bbe\u8ba1\u8bd5\u56fe\u5c06\u7535\u963b\u7684\u5c3a\u5bf8\u964d\u5230\u6700\u5c0f\u3002\n\u82af\u7247\u5185\u90e8\u7684\u7535\u963b\u5668\uff0c\u4ee5\u53ca\u90e8\u4ef6\u53f7\u3002\u7535\u963b\u5668\u662f\u4e24\u4e2a\u91d1\u5c5e\u89e6\u70b9\u4e4b\u95f4\u7684P\u578b\u7845\u7247\uff0c\u5448\u952f\u9f7f\u5f62\u3002\u5728\u5de6\u4fa7\u548c\u53f3\u4fa7\u53ef\u4ee5\u770b\u5230\u5176\u4ed6\u7535\u963b\u5668\u7684\u4e00\u90e8\u5206\u3002\n\u8fd9\u4e2a\u82af\u7247\u6709\u4e09\u4e2a\u5927\u7535\u5bb9\uff0c\u6bcf\u4e2a\u653e\u5927\u5668\u4e00\u4e2a\u3002\u4e0b\u9762\u7684\u7167\u7247\u663e\u793a\u4e86\u5176\u4e2d\u4e00\u4e2a\u7535\u5bb9\u5668\u3002\u7535\u5bb9\u5668\u53ea\u662f\u4e00\u5c42\u8986\u76d6\u5728\u5e95\u5c42\u7845\u4e0a\u7684\u91d1\u5c5e\uff0c\u7531\u4e00\u5c42\u8584\u7684\u7edd\u7f18\u6c27\u5316\u5c42\u9694\u5f00\u3002\u5728\u8fd9\u4e2a\u82af\u7247\u4e2d\uff0c\u7535\u5bb9\u5668\u662f\u7528\u6765\u786e\u4fdd\u653e\u5927\u5668\u7684\u7a33\u5b9a\u6027\u7684\u3002\u56e0\u4e3a\u5b83\u4eec\u5f88\u5927\uff0c\u6240\u4ee5\u8fd9\u4e09\u4e2a\u7535\u5bb9\u5668\u5f88\u5bb9\u6613\u5728\u82af\u7247\u82af\u7247\u7167\u7247\u4e2d\u88ab\u53d1\u73b0\u3002\n\u97f3\u9891\u82af\u7247\u7684\u4f5c\u7528\u662f\u63a5\u6536CPU\u4ea7\u751f\u7684\u58f0\u97f3\u5e76\u5c06\u5176\u653e\u5927\uff0c\u7528\u4e8e\u5185\u7f6e\u626c\u58f0\u5668\u6216\u5916\u90e8\u8033\u673a\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u82af\u7247\u5728Game Boy\u4e3b\u677f\u4e0a\u7684\u5916\u89c2\u3002\u5b83\u8fd8\u663e\u793a\u4e86\u626c\u58f0\u5668\u3001\u8033\u673a\u63d2\u5b54\u548c\u8c03\u8282\u653e\u5927\u5668\u82af\u7247\u8f93\u5165\u7535\u5e73\u7684\u97f3\u91cf\u63a7\u5236\u3002\n\u8be5\u82af\u7247\u5305\u542b\u4e09\u4e2a\u97f3\u9891\u653e\u5927\u5668\uff1a\u4e00\u4e2a\u7528\u4e8e\u626c\u58f0\u5668\uff0c\u4e24\u4e2a\u7528\u4e8e\u8033\u673a(\u56e0\u4e3a\u5b83\u4eec\u6709\u5de6\u58f0\u9053\u548c\u53f3\u58f0\u9053)\u3002\u8fd9\u4e09\u4e2a\u653e\u5927\u5668\u7684\u8bbe\u8ba1\u51e0\u4e4e\u76f8\u540c\uff0c\u53ea\u662f\u626c\u58f0\u5668\u653e\u5927\u5668\u4f7f\u7528\u66f4\u5927\u7684\u6676\u4f53\u7ba1", "note_en": "The Nintendo Game Boy Color is a handheld game console that was released in 1998.It uses an audio amplifier chip to drive the internal speaker or stereo headphones.In this blog post, I reverse-engineer this chipfrom  die photosandexplain how it works.  1It&#39;s essentially three power op-amps with some interesting circuitry inside.\n Die photo of the audio amplifier chip in the Nintendo Game Boy Color. Click this (or any other image) for a larger image.Photo courtesy of  John McMaster.\n The photo above shows the chip&#39;s silicon die as it appears under a microscope.The white lines are the chip&#39;s metal layer, connecting the components.The silicon itself appears greenish and is underneath the metal.The black circles around the outside are the bond wire connections, where tiny wires connected the silicon die to the chip&#39;s package.Regions of the chip are treated ( doped) to change the electrical properties of the silicon.The next sections explain how components are created  ...\n  The amplifier chip is built from transistors known as NPN and PNP bipolar transistors, different fromthe low-power MOS transistors used in processors.These transistors have three connections: the emitter, the base, and the collector.The magnified photo below shows one of the transistors as it appears on the chip.The slightly different tints in the silicon indicate regions that have been doped to form N and P regions, with dark lines separating the regions.The bubbly silverish areas are the metal  ...\n An NPN transistor in the amplifier chip. The collector (C), emitter (E), and base (B) are labeled, along with N and P doped silicon.\n Underneath the photo is a cross-section drawing illustrating how the transistor is constructed.The emitter (E) wire is connected to N+ silicon. Below that is a P layer connected to the base contact (B). And below that is an N+ layer connected (indirectly) to the collector (C).If you look at the vertical cross-section below the &#39;E&#39;, you can find the N-P-N layers that form the transistor.\n The photo below shows one of the large output transistors used to drive the speaker.These transistors must produce a high-current output, so they are much larger than the regular transistors and have a different structure.Note the multiple interlocking &#34;fingers&#34; of the emitter and base, surrounded by the large collector.If you look back at the die photo, you can see two of these transistors filling the upper left part of the die.\n A large, high-current NPN output transistor in the chip. The collector (C), base (B) and emitter (E) are labeled.\n  The chip also uses PNP transistors, which have an entirely different construction, as shown in the diagram below.  2The PNP transistor has a small square emitter (P-silicon), surrounded by a square base region (N-silicon), which in turn is surrounded by the collector (P-silicon). (The emitter metal covers both the emitter and the base, but is only connected to the base.)These regions form a P-N-P sandwich horizontally (laterally), unlike the vertical structure of the NPN transistors.Note that  ...\n A PNP transistor in the chip. Connections for the collector (C), emitter (E) and base (B) are labeled, along with N and P doped silicon. The base forms a ring around the emitter, and the collector forms a ring around the base.\n  Resistors are an important component of analog chips.The photo below shows a long, zig-zagging resistor, connected to metal wiring at the bottom of the photo. (The resistor passes under the metal layer at several points.)The resistor is formed as a strip of P silicon.The resistance is proportional to the length of the resistor, so large-value resistors have a zig-zag shape to fit in the available space.Because resistors are relatively large and inaccurate, chip designs try to minimize the  ...\n A resistor inside the chip, along with the part number. The resistor is a zig-zagging strip of P silicon between two metal contacts. Parts of other resistors are visible at the left and right.\n  This chip has three large capacitors, one for each amplifier.The photo below shows one of the capacitors.The capacitors are simply a layer of metal over the underlying silicon, separated by a thin insulating oxide layer.In this chip, capacitors are used to ensure the stability of the amplifiers.Because they are large, the three capacitors are easy to spot in the chip die photo.\n   The role of the audio chip is to take the sound generated by the CPU and amplify it, either for the internal speaker or for external headphones.The photo below shows how the chip appears on the Game Boy motherboard. It also shows the speaker, headphone jack, and the volume control that adjuststhe input levels to the amplifier chip.\n  The chip contains three audio amplifiers: one for the speaker and two for the headphones (because they have left and right channels).The design of these three amplifiers is almost identical, except the speaker amplifier uses larger transistors for more output power.The amplifiers use an op-amp, a type of amplifier that uses negative feedback to control the level of amplification.(The feedback resistors are internal to the chip, but it uses external capacitors for filtering.  4)  5  3\n  There are some subcircuits that are very common in analog ICs, but may seem mysterious at first. The current mirror is one of these.The idea is you start with one known current and then you can &#34;clone&#34; multiple copies of the current with a simple transistor circuit, the current mirror.A common use of a current mirror is to replace resistors. As explained earlier, resistors inside ICs are both inconveniently large and inaccurate. It saves space to use a current mirror instead  ...\n The following circuit shows how a current mirror implemented with PNP transistors.  6A reference current &#34;I&#34; passes through the transistor on the left. (In this case, the current is set by the resistor.) Since all the transistors have the same emitter voltage and base voltage, they source the same current, so the currents through each transistor match the reference current on the left.In this mirror, the three transistors on the right are connected so the total output is 3I.Thus,  ...\n Current mirror circuit. The transistors on the right each copy the current on the left.\n  The photo above shows how that current mirror is implemented on the chip with six PNP transistors.Their bases are all connected (top thin metal strip) as are their emitters (wide central middle strip).The leftmost transistor has its base and collector connected, so it controls the current mirror.\n  The second important circuit to understand is the differential pair, the most common two-transistor subcircuit used in analog ICs.   7The differential pair is the basis of an op-amp: it takes two voltages, computes their difference, and amplifies the result.The schematic below shows a simple differential pair. The resistor at the top provides a fixed current I, which is split between the two input transistors. If the input voltages are equal, the current will be split equally into  ...\n Schematic of a simple differential pair circuit. The current source sends a fixed current I through the differential pair. If the two inputs are equal, the current is split equally.\n To improve performance, a differential pair is implemented as shown below.A current mirror at the top provides the fixed current.The two load resistors at the bottom of the differential pair have been replaced by load transistors.The output is taken from one branch of the differential pair and fed into a transistor for more amplification.The output then goes to the amplifier&#39;s high-current output stage (not shown).A compensation capacitor stabilizes the circuit.\n  The diagram below shows the implementation of a differential pair in silicon, corresponding to the schematic above.The circuit has three larger PNP transistors above and three smaller NPN transistors.By following the metal, it can be seen how the circuit corresponds to the schematic.\n   The diagram below shows the main functional blocks of the chip.The upper-left part of the chip has the two large driver transistors for the speaker output (one to pull the signal low and the other to pull the signal high).The remaining circuitry for the speaker amplifier includes the differential pair, current mirrors, and other circuits.The headphone amplifier consists of two nearly-identical blocks: one for the left channel and one for the right.The circuitry for the current  ...\n  Zooming in on the upper-right corner shows the amplifier circuitry for one of the headphone channels.The input signal goes through the differential stage (discussed earlier) and amplification, before going to the output stage, which consists of multipletransistors.Although the speaker amp uses large output transistors, the headphone amp uses 10 regular transistors in parallel; one set to pull the output high andthe second to pull the output low.Resistors are used to generate  ...\n  I created a complete schematic of the chip  here.I won&#39;t explain it in detail here, since its op-amps use a standard  architecture,but I&#39;ll point out some highlights.  9The headphone amplifiers and the speaker amplifier have very similar designs, but there are a few differences.Most notably, the speaker transistors are larger because the speaker requires more current:not just the output transistors, but many of the other transistors in the circuit.The current mirrors  ...\n Part of the reverse-engineered schematic for the AMP-MGB chip. Click  here for the full schematic.\n  This amplifier chip from 1998 has about 100 transistors and is simple enough that the circuitry can be traced out under a microscope.(In comparison, a Pentium II processor from the same time had 7.5 million transistors.)The chip illustrates important analog design functions such as the differential pair and current mirror, and how they can be combined to build an amplifier.People have reverse-engineered many Nintendo chips to help build Nintendo emulators. I don&#39;t think  ...\n I announce my latest blog posts on Twitter, so follow me  @kenshirriff for future articles. I also have an  RSS feed.My KiCad files for the schematic are  on Github.Thanks to John McMaster for providing the chip photos; his page is  here.\n  The audio chip is labeled  AMP MGB, presumably for &#34;amplifier, Mini-Game Boy&#34;. The part number on the 18-pin chip is IR3R53N.\n On this chip, the NPN transistors and PNP transistors look superficially similar, but the PNP transistors are considerably larger.The PNP transistors can also be distinguished by the wide base ring under the square emitter metal.\u00a0 \u21a9\n One interesting thing about the chip is that it has three ground pins (1, 2, and 11), and two power pins (4 and 14).By examining the chip, we can why there are multiple pins.Most of the chip uses the pin 1 ground.The pin 2 ground is used solely for the speaker output transistor.The pin 14 ground is used by the headphone driver circuitry.The separate grounds prevent transients from the high-current output transistors from affecting the rest of the chip.For the power  ...\n I believe the three external filter capacitors implement a high-pass filter for each channel.\u00a0 \u21a9 \u21a9\n The excerpt from the  Game Boy Color Schematic below shows how the audio chip isconnected.The Game Boy CPU chip provides left and right audio channels to the audio chip inputs (LIN and RIN).The chip provides a single-channel speaker output SPKOUT. It also provides two-channel headphone output: HPLOUT and HPROUT.Each channel has an external capacitor attached for filtering: SPKBC, HPLBC, and HPRBC.  4When headphones are plugged in, this signals the SW pin, causing the  ...\n  On the left, the chip receives the audio inputs from the CPU, via a volume control.On the right, the chip is connected to the speaker and headphone jack. The filter capacitors are also connected on the right.The SW input is connected to a switch in the headphone jack; it is normally grounded, but disconnected when headphones are inserted into the jack.\u00a0 \u21a9\n For more information about current mirrors, check  Wikipedia or chapter 3 of Designing Analog Chips.\u00a0 \u21a9\n According to Analysis and Design of Analog Integrated Circuitsdifferential pairs are &#34;perhaps the most widely used two-transistor subcircuits in monolithicanalog circuits&#34; (p214).For more information about differential pairs, see  Wikipedia or chapter 4 of Designing Analog Chips.\u00a0 \u21a9\n The headphone amp or speaker amp are disabled by shutting down their respective current mirrors.Some of the current mirrors remain partially powered, rather than shutting down completely.\u00a0 \u21a9\n The amplifiers use a fairly complex scheme to bias and drive the two output transistors.I&#39;ll explain my understanding of it; follow along with  the schematic.A standard approach is to use diodes to achieve the biasing.However, this chip uses a complex current mirror setup.Looking at the speaker amplifier circuit, transistor Q128 provides the main amplification. The current sunk by this transistor controls the output.The output pull-up transistor Q126 receives  ...", "posttime": "2020-05-03 21:55:22", "tags": "\u6e38\u620f,\u82af\u7247,\u4efb\u5929\u5802,\u9006\u5411\u5de5\u7a0b,engineering", "title": "\u5bf9\u4efb\u5929\u5802\u6e38\u620f\u7537\u5b69\u8272\u5f69\u4e2d\u7684\u97f3\u9891\u82af\u7247\u8fdb\u884c\u9006\u5411\u5de5\u7a0b", "title_en": "Reverse-engineering the audio chip in the Nintendo Game Boy Color", "transed": 1, "url": "http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6e38\u620f", "\u82af\u7247", "\u4efb\u5929\u5802", "\u9006\u5411\u5de5\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000488, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u4e0eTekton\u4e00\u8d77\u521b\u5efaCI\u6e20\u9053\u3002\u5728\u7b2c1\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5728\u672c\u5730\u7c7b\u578b\u96c6\u7fa4\u4e0a\u5b89\u88c5\u4e86Tekton\uff0c\u5e76\u5b9a\u4e49\u4e86\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\uff0c\u8be5\u4efb\u52a1\u514b\u9686GitHub\u5b58\u50a8\u5e93\u5e76\u8fd0\u884cGo\u5e94\u7528\u7a0b\u5e8f(Repo)\u7684\u5e94\u7528\u7a0b\u5e8f\u6d4b\u8bd5\u3002\n\u5728\u8fd9\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2aTask\uff0c\u8be5\u4efb\u52a1\u5c06\u4e3aGo\u5e94\u7528\u7a0b\u5e8f\u6784\u5efaDocker\u6620\u50cf\uff0c\u5e76\u5c06\u5176\u63a8\u9001\u5230DockerHub\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u628a\u6211\u4eec\u7684\u4efb\u52a1\u7ec4\u5408\u6210\u4e00\u6761\u7ba1\u9053\u3002\n\u4e3a\u4e86\u6784\u5efa\u548c\u63a8\u9001\u6211\u4eec\u7684Docker\u955c\u50cf\uff0c\u6211\u4eec\u4f7f\u7528Kaniko\uff0c\u5b83\u53ef\u4ee5\u5728Kubernetes\u96c6\u7fa4\u5185\u6784\u5efaDocker\u955c\u50cf\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8eDocker\u5b88\u62a4\u8fdb\u7a0b\u3002\nKaniko\u5c06\u5728\u540c\u4e00\u547d\u4ee4\u4e2d\u6784\u5efa\u548c\u63a8\u9001\u6620\u50cf\u3002\u8fd9\u610f\u5473\u7740\u5728\u8fd0\u884c\u6211\u4eec\u7684\u4efb\u52a1\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e3aDockerHub\u8bbe\u7f6e\u51ed\u636e\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5c06\u575e\u7ad9\u6620\u50cf\u63a8\u9001\u5230\u6ce8\u518c\u8868\u3002\n\u51ed\u8bc1\u4fdd\u5b58\u5728Kubernetes Secret\u4e2d\u3002\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u521b\u5efa\u540d\u4e3aSecret.yaml\u7684\u6587\u4ef6\uff0c\u5e76\u5c06myusername\u548cmypassword\u66ff\u6362\u4e3a\u60a8\u7684DockerHub\u51ed\u636e\uff1a\n\u6ce8\u610f\u5143\u6570\u636e\u4e2d\u7684tekton.dev/docker-0\u6ce8\u91ca\uff0c\u5b83\u544a\u8bc9Tekton\u8fd9\u4e9b\u51ed\u636e\u6240\u5c5e\u7684Docker\u6ce8\u518c\u8868\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2aServiceAccount\uff0c\u5b83\u4f7f\u7528Basic-User-Pass Secret\u3002\u521b\u5efa\u540d\u4e3aserviceaccount t.yaml\u7684\u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a\n\u73b0\u5728\uff0c\u901a\u8fc7\u6307\u5b9aserviceAccountName\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd0\u884cTekton\u4efb\u52a1\u6216\u7ba1\u9053\u65f6\u4f7f\u7528\u6b64ServiceAccount(\u540d\u4e3abuild-bot)\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u770b\u5230\u8fd9\u65b9\u9762\u7684\u793a\u4f8b\u3002\n\u73b0\u5728\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u51ed\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u521b\u5efa\u5c06\u6784\u5efa\u548c\u63a8\u9001Docker\u6620\u50cf\u7684\u4efb\u52a1\u3002\napiVersion\uff1atekton.dev/v1beta1\u79cd\u7c7b\uff1a\u4efb\u52a1\u5143\u6570\u636e\uff1a\u540d\u79f0\uff1a\u6784\u5efa\u5e76\u63a8\u9001\u89c4\u8303\uff1a\u8d44\u6e90\uff1a\u8f93\u5165\uff1a-\u540d\u79f0\uff1arepo\u7c7b\u578b\uff1aGIT\u6b65\u9aa4\uff1a-\u540d\u79f0\uff1a\u6784\u5efa\u5e76\u63a8\u9001\u6620\u50cf\uff1agcr.io/kaniko-project/Executor\uff1av0.19.0 env\uff1a-name\uff1adocker_config value\uff1a/tekton/home/.docker\u547d\u4ee4\uff1a-/kaniko/Executor--dockerfile=Docker\u3002\n\u4e0e\u7b2c\u4e00\u4e2a\u4efb\u52a1\u7c7b\u4f3c\uff0c\u6b64\u4efb\u52a1\u63a5\u53d7git repo\u4f5c\u4e3a\u8f93\u5165(\u8f93\u5165\u540d\u79f0\u4e3arepo)\uff0c\u5e76\u4e14\u53ea\u5305\u542b\u4e00\u4e2a\u6b65\u9aa4\uff0c\u56e0\u4e3aKaniko\u5728\u540c\u4e00\u547d\u4ee4\u4e2d\u6784\u5efa\u548c\u63a8\u9001\u6620\u50cf\u3002\n\u786e\u4fdd\u521b\u5efa\u4e00\u4e2aDockerHub\u5b58\u50a8\u5e93\uff0c\u5e76\u5c06arthurk/tekton-test\u66ff\u6362\u4e3a\u60a8\u7684\u5b58\u50a8\u5e93\u540d\u79f0\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u5b83\u5c06\u59cb\u7ec8\u6807\u8bb0\u5e76\u63a8\u9001\u5177\u6709\u6700\u65b0\u6807\u8bb0\u7684\u56fe\u50cf\u3002\ntekton\u652f\u6301\u53c2\u6570\uff0c\u4ee5\u907f\u514d\u50cf\u8fd9\u6837\u786c\u7f16\u7801\u503c\u3002\u4e0d\u8fc7\uff0c\u4e3a\u4e86\u4f7f\u672c\u6559\u7a0b\u7b80\u5355\uff0c\u6211\u7701\u7565\u4e86\u5b83\u4eec\u3002\nKaniko\u9700\u8981docker_config env var\u624d\u80fd\u627e\u5230Docker\u51ed\u636e\u3002\n\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6d4b\u8bd5\u6b64\u4efb\u52a1\uff0c\u4e00\u79cd\u662f\u624b\u52a8\u521b\u5efaTaskRun\u5b9a\u4e49\uff0c\u7136\u540e\u4f7f\u7528kubectl\u5e94\u7528\u5b83\uff0c\u53e6\u4e00\u79cd\u662f\u4f7f\u7528Tekton CLI(TKN)\u3002\n\u4e3a\u4e86\u4f7f\u7528kubectl\u8fd0\u884cTask\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2aTaskRun\uff0c\u8be5TaskRun\u770b\u8d77\u6765\u4e0e\u524d\u9762\u7684TaskRun\u5b8c\u5168\u76f8\u540c\uff0c\u53ea\u662f\u6211\u4eec\u73b0\u5728\u6307\u5b9a\u4e86\u4e00\u4e2aServiceAccount(ServiceAccountName)\u5728\u6267\u884c\u4efb\u52a1\u65f6\u4f7f\u7528\u3002\napiVersion\uff1atekton.dev/v1beta1Kind\uff1aTaskRunMetadata\uff1aName\uff1aBuild-and-Push spec\uff1aserviceAccountName\uff1aBuild-bot taskRef\uff1aName\uff1aBuild-and-Push Resources\uff1aInput\uff1a-Name\uff1arepo ResourceRef\uff1aName\uff1aarthurk-tekton-Example\u3002\n\u901a\u8fc7\u5217\u51fa\u6240\u6709\u4ee5\u4efb\u52a1\u540d\u79f0Build-and-Push\u5f00\u5934\u7684Pod\u6765\u5e94\u7528\u4efb\u52a1\u5e76\u68c0\u67e5Pod\u7684\u65e5\u5fd7\uff1a\n$kubectl Apply-f taskrun-build-push.yamltaskrun.tekton.dev/build-and-push\u521b\u5efa$kubectl get pod|grep\u6784\u5efa\u5e76\u63a8\u9001pod-c698q 2/2\u8fd0\u884c0 4s$kubectl\u65e5\u5fd7--\u6240\u6709\u5bb9\u5668\u6784\u5efa\u5e76\u63a8\u9001-pod-c698q--\u5173\u6ce8{&#34\uff1blevel&#34\uff1b\uff1a&#34\uff1binfo&#34\uff1b\uff0c&#34\uff1bts&#34\uff1b\uff1a1588478267.3476844\uff0c&#34\uff1bcaller&#34\uff1b\uff1a&#34\uff1bcreds-init/main.go:44&#34\uff1b\uff0c&#34\uff1bmsg&#34\uff1b\uff1a&#34\uff1bCredentials initialized.&#34\uff1b}{&#34\uff1blevel&#34\uff1b\uff1a&#34\uff1binfo&#34\uff1b\uff0c&#34\uff1bts&#34\uff1b\uff1a1588478279.2681644\uff0c&#34\uff1b\u8c03\u7528\u8005&#34\uff1b\uff1a&#34\uff1bgit/git.go\uff1a136&#34\uff1b\uff0c&#34\uff1bmsg&#34\uff1b\uff1a&#34\uff1b\u6210\u529f.\u3002\n\u4f7f\u7528Tekton CLI\u8fd0\u884c\u4efb\u52a1\u66f4\u52a0\u65b9\u4fbf\u3002\u53ea\u9700\u4e00\u4e2a\u547d\u4ee4\uff0c\u5b83\u5c31\u53ef\u4ee5\u4ece\u4efb\u52a1\u5b9a\u4e49\u751f\u6210TaskRun\u6e05\u5355\uff0c\u5e94\u7528\u5b83\uff0c\u5e76\u8ddf\u8e2a\u65e5\u5fd7\u3002\n$TKN\u4efb\u52a1\u5f00\u59cb\u6784\u5efa\u5e76\u63a8\u9001--inputresource repo=arthurk-tekton-example--\u670d\u52a1\u5e10\u6237\u6784\u5efa-bot--showlog\u4efb\u52a1\u8fd0\u884c\u5df2\u542f\u52a8\uff1a\u6784\u5efa\u5e76\u63a8\u9001-\u8fd0\u884c-ctjvv\u6b63\u5728\u7b49\u5f85\u65e5\u5fd7\u4e3aavailable.[git-source-arthurk-tekton-example-p9zxz]{&#34\uff1blevel&#34\uff1b\uff1a&#34\uff1binfo&#34\uff1b\uff0c&#34\uff1bts&#34\uff1b\uff1a1588479279.271127\uff0c&#34\uff1b\u8c03\u7528\u8005&#34\uff1b\uff1a&#34\uff1bgit/gitvWaiting{&#34\uff1bLevel&#34\uff1b\uff1a&#34\uff1binfo&#34\uff1b\uff0c&#34\uff1bts&#34\uff1b\uff1a1588479279.271127\uff0c&#34\uff1b\u8c03\u7528\u8005&#34\uff1b\uff1a&#34\uff1bgit/git\u3002\uff1a&#34\uff1b\u6210\u529f\u514b\u9686https://github.com/arthurk/tekton-example@301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98.\u3002\n\u540e\u53f0\u53d1\u751f\u7684\u60c5\u51b5\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u5bf9kubectl\u6240\u505a\u7684\u64cd\u4f5c\uff0c\u4f46\u8fd9\u4e00\u6b21\u6211\u4eec\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u4e24\u4e2a\u4efb\u52a1(\u6d4b\u8bd5\u3001\u6784\u5efa\u548c\u63a8\u9001)\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6309\u987a\u5e8f\u8fd0\u884c\u5b83\u4eec\u7684\u7ba1\u9053\uff1a\u9996\u5148\uff0c\u5b83\u5c06\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6d4b\u8bd5\uff0c\u5982\u679c\u901a\u8fc7\uff0c\u5b83\u5c06\u6784\u5efaDocker\u6620\u50cf\u5e76\u5c06\u5176\u63a8\u9001\u5230DockerHub\u3002\napiVersion\uff1atekton.dev/v1beta1ind\uff1aPipelinemetadata\uff1aname\uff1atest-build-push spec\uff1aresources\uff1a-name\uff1arepo\u7c7b\u578b\uff1aGit\u4efb\u52a1\uff1a#\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6d4b\u8bd5-name\uff1atest taskRef\uff1aname\uff1atest resources\uff1ainput\uff1a-name\uff1arepo", "note_en": "In this blog post we&#39;re going to continue creating a CI pipeline with  Tekton. In  Part 1 we installed Tekton on a local  kind cluster and defined our first Task which clones a GitHub repository and runs application tests for a Go application ( repo).\n  In this part we&#39;re going to create a Task that will build a Docker image for our Go application and push it to  DockerHub. Afterward we will combine our tasks into a Pipeline.\n    To build and push our Docker image we use  Kaniko, which can build Docker images inside a Kubernetes cluster without depending on a Docker daemon.\n  Kaniko will build and push the image in the same command. This means before running our task we need to set up credentials for DockerHub so that the docker image can be pushed to the registry.\n  The credentials are saved in a Kubernetes Secret. Create a file named   secret.yaml with the following content and replace  myusername and  mypassword with your DockerHub credentials:\n   Note the  tekton.dev/docker-0 annotation in the metadata which tells Tekton the Docker registry these credentials belong to.\n  Next we create a  ServiceAccount that uses the  basic-user-pass Secret. Create a file named   serviceaccount.yaml with the following content:\n      We can now use this ServiceAccount (named  build-bot) when running Tekton tasks or pipelines by specifying a  serviceAccountName. We will see examples of this below.\n    Now that the credentials are set up we can continue by creating the Task that will build and push the Docker image.\n   apiVersion: tekton.dev/v1beta1kind: Taskmetadata: name: build-and-pushspec: resources: inputs: - name: repo type: git steps: - name: build-and-push image: gcr.io/kaniko-project/executor:v0.19.0 env: - name: DOCKER_CONFIG value: /tekton/home/.docker command: - /kaniko/executor - --dockerfile=Dockerfile - --context=/workspace/repo/src - --destination=arthurk/tekton-test:latest\n  Similarly to the first task this task takes a git repo as an input (the input name is  repo) and consists of only a single step since Kaniko builds and pushes the image in the same command.\n  Make sure to create a DockerHub repository and replace  arthurk/tekton-test with your repository name. In this example it will always tag and push the image with the  latest tag.\n  Tekton has support for  parameters to avoid hardcoding values like this. However to keep this tutorial simple I&#39;ve left them out.\n  The  DOCKER_CONFIG env var is required for Kaniko to be able to  find the Docker credentials.\n     There are two ways we can test this Task, either by manually creating a TaskRun definition and then applying it with  kubectl or by using the Tekton CLI ( tkn).\n      To run the Task with  kubectl we create a TaskRun that looks identical to the  previous with the exception that we now specify a ServiceAccount ( serviceAccountName) to use when executing the Task.\n   apiVersion: tekton.dev/v1beta1kind: TaskRunmetadata: name: build-and-pushspec: serviceAccountName: build-bot taskRef: name: build-and-push resources: inputs: - name: repo resourceRef: name: arthurk-tekton-example\n  Apply the task and check the log of the Pod by listing all Pods that start with the Task name  build-and-push:\n $ kubectl apply -f taskrun-build-push.yamltaskrun.tekton.dev/build-and-push created$ kubectl get pods | grep build-and-pushbuild-and-push-pod-c698q 2/2 Running 0 4s$ kubectl logs --all-containers build-and-push-pod-c698q --follow{&#34;level&#34;:&#34;info&#34;,&#34;ts&#34;:1588478267.3476844,&#34;caller&#34;:&#34;creds-init/main.go:44&#34;, &#34;msg&#34;:&#34;Credentials initialized.&#34;}{&#34;level&#34;:&#34;info&#34;,&#34;ts&#34;:1588478279.2681644,&#34;caller&#34;:&#34;git/git.go:136&#34;,&#34;msg&#34;:&#34;Successfully  ...\n       Running the Task with the Tekton CLI is more convenient. With a single command it generates a TaskRun manifest from the Task definition, applies it, and follows the logs.\n $ tkn task start build-and-push --inputresource repo=arthurk-tekton-example --serviceaccount build-bot --showlogTaskrun started: build-and-push-run-ctjvvWaiting for logs to be available...[git-source-arthurk-tekton-example-p9zxz] {&#34;level&#34;:&#34;info&#34;,&#34;ts&#34;:1588479279.271127,&#34;caller&#34;:&#34;git/git.go:136&#34;,&#34;msg&#34;:&#34;Successfully cloned https://github.com/arthurk/tekton-example @ 301aeaa8f7fa6ec01218ba6c5ddf9095b24d5d98  ...\n  What happens in the background is similar to what we did with kubectl in the previous section but this time we only have to run a single command.\n    Now that we have both of our Tasks ready (test, build-and-push) we can create a Pipeline that will run them sequentially: First it will run the application tests and if they pass it will build the Docker image and push it to DockerHub.\n   apiVersion: tekton.dev/v1beta1kind: Pipelinemetadata: name: test-build-pushspec: resources: - name: repo type: git tasks: # Run application tests - name: test taskRef: name: test resources: inputs: - name: repo # name of the Task input (see Task definition) resource: repo # name of the Pipeline resource # Build docker image and push to registry - name: build-and-push taskRef: name: build-and-push runAfter: - test resources: inputs: - name: repo  ...\n  The first thing we need to define is what resources our Pipeline requires. A resource can either be an input or an output. In our case we only have an input: the git repo with our application source code. We name the resource  repo.\n  Next we define our tasks. Each task has a  taskRef (a reference to a Task) and passes the tasks required inputs.\n     Similar to how we can run as Task by creating a TaskRun, we can run a Pipeline by creating a PipelineRun.\n  This can either be done with kubectl or the Tekton CLI. In the following two sections I will show both ways.\n    To run the file with kubectl we have to create a PipelineRun. Create a file named   pipelinerun.yaml with the following content:\n apiVersion: tekton.dev/v1beta1kind: PipelineRunmetadata: name: test-build-push-prspec: serviceAccountName: build-bot pipelineRef: name: test-build-push resources: - name: repo resourceRef: name: arthurk-tekton-example\n  Apply the file, get the Pods that are prefixed with the PiplelineRun name, and view the logs to get the container output:\n $ kubectl apply -f pipelinerun.yamlpipelinerun.tekton.dev/test-build-push-pr created$ kubectl get pods | grep test-build-push-prtest-build-push-pr-build-and-push-gh4f4-pod-nn7k7 0/2 Completed 0 2m39stest-build-push-pr-test-d2tck-pod-zh5hn 0/2 Completed 0 2m51s$ kubectl logs test-build-push-pr-build-and-push-gh4f4-pod-nn7k7 --all-containers --followINFO[0005] Resolved base name golang:1.14-alpine to golang:1.14-alpineINFO[0005]  ...\n  Next we will run the same Pipeline but we&#39;re going to use the Tekton CLI instead.\n    When using the CLI we don&#39;t have to write a PipelineRun, it will be generated from the Pipeline manifest. By using the  --showlog argument it will also display the Task (container) logs:\n $ tkn pipeline start test-build-push --resource repo=arthurk-tekton-example --serviceaccount build-bot --showlogPipelinerun started: test-build-push-run-9lmfjWaiting for logs to be available...[test : git-source-arthurk-tekton-example-k98k8] {&#34;level&#34;:&#34;info&#34;,&#34;ts&#34;:1588483940.4913514,&#34;caller&#34;:&#34;git/git.go:136&#34;,&#34;msg&#34;:&#34;Successfully cloned https://github.com/arthurk/tekton-example  ...\n    In  Part 1 we installed Tekton on a local Kubernetes cluster, defined a Task, and tested it by creating a TaskRun via YAML manifest as well as the Tekton CLI tkn.\n  In this part we created our first Tektok Pipeline that consists of two tasks. The first one clones a repo from GitHub and runs application tests. The second one builds a Docker image and pushes it to DockerHub.", "posttime": "2020-05-03 21:33:18", "tags": "tekton,ci,\u4efb\u52a1,task", "title": "\u4f7f\u7528Tekton\u521b\u5efaCI\u7ba1\u9053(\u7b2c2/2\u90e8\u5206)", "title_en": "Creating CI Pipelines with Tekton (Part 2/2)", "transed": 1, "url": "https://www.arthurkoziel.com/creating-ci-pipelines-with-tekton-part-2/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["tekton", "ci", "\u4efb\u52a1", "task"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000487, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56f4\u68cb\u662f\u5783\u573e\u6536\u96c6\u7684\uff0c\u94c1\u9508\u4e0d\u662f\u3002\u8fd9\u610f\u5473\u7740\u751f\u9508\u6bd4\u8d70\u5feb\uff0c\u5bf9\u5417\uff1f\u4e0d\uff01\u4e0d\u603b\u662f\u8fd9\u6837\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u5728\u4f7f\u7528\u4e00\u4e2a\u8ba1\u7b97Levenshtein\u7f16\u8f91\u8ddd\u79bb\u7684\u7b97\u6cd5\u65f6\u5076\u7136\u53d1\u73b0\u4e86\u8fd9\u4e2a\u4f8b\u5b50\u3002\u6211\u60f3\u6bd4\u8f83\u76f8\u540c\u7b97\u6cd5\u5728\u51e0\u79cd\u4e0d\u540c\u8bed\u8a00\u4e2d\u7684\u6027\u80fd\u3002\u8fd9\u4e9b\u8bed\u8a00\u4e2d\u6709\u4e24\u79cd\u662f\u201c\u9508\u8ff9\u6591\u6591\u201d\u548c\u201c\u8d70\u4eba\u201d\u3002\n\u4ee4\u6211\u60ca\u8bb6\u7684\u662f\uff0c\u56f4\u68cb\u7248\u672c\u6bd4\u94c1\u9508\u7248\u672c\u5feb\u3002\u5feb\u591a\u4e86\u3002\u6211\u6700\u521d\u7684\u53cd\u5e94\u662f\uff0c\u6211\u4e00\u5b9a\u662f\u4e0d\u6b63\u786e\u5730\u5b9e\u73b0\u4e86\u94c1\u9508\u7248\u672c\u3002\u4e5f\u8bb8\u6211\u5728\u56f4\u68cb\u91cc\u505a\u4e86\u4e00\u4e9b\u4e0d\u5b89\u5168(\u4f46\u901f\u5ea6\u5f88\u5feb)\u7684\u4e8b\u60c5\uff0c\u4f46\u751f\u9508\u4e0d\u8ba9\u6211\u505a\u3002\u4e3a\u4e86\u89e3\u91ca\u8fd9\u4e00\u70b9\uff0c\u6211\u5236\u5b9a\u4e86\u4e00\u4e9b\u57fa\u672c\u89c4\u5219\uff1a\n\u4e60\u60ef\u7528\u6cd5\u8d8a\u591a\u8d8a\u597d\u3002\u4f8b\u5982\uff0cRust\u627f\u8bfa\u96f6\u6210\u672c\u62bd\u8c61\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u8be5\u4f9d\u9760\u5b83\u6765\u7f16\u5199\u5b89\u5168\u4ee3\u7801(&amp\uff1bW)\u3002\n\u6ca1\u6709\u9759\u6001\u5168\u5c40\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\u9700\u8981\u5bf9\u5bb9\u5668\u8fdb\u884c\u5806\u5206\u914d&\u52a8\u6001\u8c03\u6574\u5927\u5c0f\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u6295\u5165\u4f1a\u6709\u591a\u5927\uff01\n\u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u5e94\u8be5\u662f\u60a8\u4e50\u610f\u4ea4\u4ed8\u7ed9Prod\u7684\u4ee3\u7801\u3002\u8fd9\u662f\u6211\u6700\u7ec8\u5f97\u5230\u7684\u7ed3\u8bba\uff1a\nfunc EditDistance(source\uff0ctarget string)int{if len(Source)==0{return len(Target)}if len(Target)==0{return len(Source)}sourceChars\uff1a=[]rune(Source)targetChars\uff1a=[]rune(Target)cache\uff1a=make([]int\uff0clen(Target)+1)for i\uff1a=0\uff1bi&lt\uff1blen(Target)+1\uff1bi++{cache[i]=i}for i\uff0csourceChar\uff1a=range sourceChars{nextDist\uff1a=i+1 for j\uff0ctargetChar\uff1a=range targetChars{currentDist\uff1a=nextDist DistIfSubstitutes\uff1a=cache[j]ifsourceChar\uff01=targetChar{DistIfSubstituty++.", "note_en": "Go is garbage collected, rust is not. That means rust is faster than go, right? No! Not always.\n Let\u2019s take an example that I stumbled across while playing around with an algorithm that calculates Levenshtein edit distances. I wanted to compare the performance of the same algorithm in a bunch of different languages. Two of these languages were rust and go.\n To my surprise, the go version was faster than the rust version. A lot faster. My initial reaction was that I must have implemented the rust version incorrectly. Maybe I was doing some unsafe (but fast) things in go that rust wouldn\u2019t let me do. To account for this, I laid out some ground rules:\n The more idiomatic the better. Rust, for example, promises zero cost abstractions so we should lean on this &amp; write safe code\n No static global variables. This means that containers need to be heap allocated &amp; dynamically sized. We don\u2019t know how big the inputs will be!\n In short, this should be code that you\u2019d happily ship to prod. Here\u2019s what I ended up with:\n   func EditDistance(source, target  string)  int {\t if len(source) ==  0 {\t\t return len(target)\t}\t if len(target) ==  0 {\t\t return len(source)\t}\tsourceChars := []rune(source)\ttargetChars := []rune(target)\tcache := make([] int, len(target)+ 1)\t for i :=  0; i &lt; len(target)+ 1; i++ {\t\tcache[i] = i\t}\t for i, sourceChar :=  range sourceChars {\t\tnextDist := i +  1\t\t for j, targetChar :=  range targetChars {\t\t\tcurrentDist := nextDist\t\t\tdistIfSubstitute := cache[j]\t\t\t ifsourceChar != targetChar { distIfSubstitute++  ...", "posttime": "2020-05-03 21:33:13", "tags": "rust,\u53d8\u5f97,\u751f\u9508", "title": "\u8ba9\u751f\u9508\u53d8\u5f97\u8d8a\u5feb\u8d8a\u597d", "title_en": "Making Rust as Fast as Go", "transed": 1, "url": "https://www.christianfscott.com/making-rust-as-fast-as-go/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["rust", "\u53d8\u5f97", "\u751f\u9508"]}, {"category": "", "categoryclass": "", "imagename": "24d51da21a85571ce94d2a83dcb34447.jpeg", "infoid": 1000486, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5b9e\u73b0\u9ad8\u53ef\u7528\u6027\u5e76\u7b80\u5316\u5bb9\u5668\u7684\u7ba1\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u7fa4\u96c6\u3002\u5b83\u7531\u5b89\u88c5\u4e86\u575e\u7ad9\u5f15\u64ce\u7684\u8026\u5408\u8282\u70b9\u7ec4\u6210\u3002\n\u6bcf\u4e2a\u8282\u70b9\u90fd\u5b89\u88c5\u4e86\u575e\u7ad9\u5f15\u64ce\uff0c\u6807\u51c6\u7a0b\u5e8f\u4e0e\u5355\u8282\u70b9\u575e\u7ad9\u76f8\u540c\u3002\n--autolock-true\u6216false-\u4e3a\u7ba1\u7406\u5668\u8282\u70b9\u542f\u7528\u81ea\u52a8\u9501\u5b9a-\u672c\u5e16\u5b50\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u3002\n--\u53ef\u7528\u6027-\u4e91\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001(\u5141\u8bb8\u65b0\u4efb\u52a1)\u3001\u6682\u505c(\u4e0d\u5141\u8bb8\u6267\u884c\u65b0\u4efb\u52a1\uff0c\u4f46\u65e7\u4efb\u52a1\u4ecd\u5728\u7ee7\u7eed)\u6216\u6392\u51fa(\u4e0d\u5141\u8bb8\u6267\u884c\u65b0\u4efb\u52a1\uff0c\u5982\u679c\u5b58\u5728\u5219\u7acb\u5373\u5b8c\u6210\u65e7\u4efb\u52a1)-\u4e3a\u7ba1\u7406\u5668\u8282\u70b9\u8bbe\u7f6e\u6392\u51fa\uff0c\u4ee5\u521b\u5efa\u6ca1\u6709\u5bb9\u5668\u7684\u7ba1\u7406\u5668\u3002\n--default-addr-pool-\u9ed8\u8ba4\u4e3a10.10.10.0/8-\u6211\u4eec\u53ef\u4ee5\u4e3a\u4f7f\u7528cluster\u521b\u5efa\u7684\u8986\u76d6\u7f51\u7edc\u8bbe\u7f6e\u53e6\u4e00\u4e2a\u5730\u5740\u6c60\u3002\n[lukas@docker-host1~]$docker sarm init--advertise-addr 10.10.10.20--Listen-addr 10.10.10.20\u5df2\u521d\u59cb\u5316\u7684\u7fa4\uff1a\u5f53\u524d\u8282\u70b9(X7mdjbmfz3ttkxbvelriix4yz)\u73b0\u5728\u662f\u7ba1\u7406\u5668\u3002\u8981\u5411\u6b64\u7fa4\u4e2d\u6dfb\u52a0\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1adocker sarm Join--Token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v 10.10.10.20\uff1a2377\u8981\u5411\u6b64\u7fa4\u4e2d\u6dfb\u52a0\u7ba1\u7406\u5668\uff0c\u8bf7\u8fd0\u884c&#39\u3002\n\u5982\u679c\u6211\u4eec\u7a0d\u540e\u9700\u8981\u4ee4\u724c\uff0c\u5e76\u4e14\u6211\u4eec\u6ca1\u6709\u5199\u4e0b\u5b83\u4eec\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4efb\u4f55\u7ba1\u7406\u5668\u8282\u70b9\u83b7\u53d6\u5b83\u4eec\u3002\n[lukas@docker-host1~]$docker sarm Join-Token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-956h96o5ivrekolr42k71bgqc\u8981\u5c06\u7ba1\u7406\u5458\u6dfb\u52a0\u5230\u6b64\u7fa4\u96c6\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1adocker sarm join--Token Manager 10.10.10.20\uff1a2377\u3002\n[lukas@docker-host1~]$docker sarm Join-Token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v\u8981\u5c06Worker\u6dfb\u52a0\u5230\u6b64\u7fa4\u4e2d\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1adocker sarm join--Token work10.10.10.20\uff1a2377\u3002\n\u4ee4\u724c\u5e94\u8be5\u5f97\u5230\u5f88\u597d\u7684\u4fdd\u62a4\uff0c\u5b83\u4eec\u63d0\u4f9b\u5bf9\u96c6\u7fa4\u7684\u8bbf\u95ee\u3002\u5982\u679c\u5b83\u4eec\u5728\u67d0\u4e2a\u5730\u65b9\u6cc4\u6f0f\uff0c\u6211\u4eec\u5e94\u8be5\u7528\u547d\u4ee4\u66f4\u6539\u5b83\u4eec(\u6211\u4eec\u53ef\u4ee5\u8f6e\u6362\u5de5\u4eba\u6216\u7ecf\u7406)\uff1a\n[lukas@docker-host1~]$docker sarm Join-Token--Rotate workerSuccessful Rotated Worker Join\u4ee4\u724c\u3002\u8981\u5c06Worker\u6dfb\u52a0\u5230\u6b64\u7fa4\u4e2d\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1adocker sarm Join--Token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-c7r78dy7kwho1zq3uq7w26xhl 10.10.10.20\uff1a2377\u3002\n[lukas@docker-host2~]$docker\u7fa4\u52a0\u5165--Token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v 10.10.10.20\uff1a2377\u6b64\u8282\u70b9\u4f5c\u4e3a\u5de5\u4f5c\u8005\u52a0\u5165\u7fa4\u3002\n[lukas@docker-host3~]$docker\u7fa4\u52a0\u5165--Token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v 10.10.10.20\uff1a2377\u6b64\u8282\u70b9\u4f5c\u4e3a\u5de5\u4f5c\u8005\u52a0\u5165\u7fa4\u3002\n[lukas@docker-host1~]$docker node lsID\u4e3b\u673a\u540d\u72b6\u6001\u53ef\u7528\u6027\u7ba1\u7406\u5668\u72b6\u6001\u5f15\u64ceVERSIONx7mdjbmfz3ttkxbvelriix4yz*docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v115025a15yvuntv docker-host2.lukas.int Ready Active 19.03.8k61h5c7sqzjepifp6ll.\u3002\n\u5f3a\u70c8\u5efa\u8bae\u751f\u4ea7\u7fa4\u96c6\u4e2d\u81f3\u5c11\u6709\u4e09\u4e2a\u7ba1\u7406\u5668\u8282\u70b9\u7528\u4e8eHA\u3002\u6b64\u914d\u7f6e\u5728\u4e00\u4e2a\u7ba1\u7406\u5668\u8282\u70b9\u4e22\u5931\u540e\u4ecd\u7136\u6709\u6548\u3002\u5728\u8fd9\u6837\u7684\u914d\u7f6e\u4e0b\uff0c\u4ecd\u7136\u53ea\u6709\u4e00\u4f4d\u7ecf\u7406\u5c06\u6210\u4e3a\u9886\u5bfc\u8005\uff0c\u5176\u4f59\u7684\u5c06\u4ece\u4ed6\u90a3\u91cc\u590d\u5236\u6570\u636e\uff0c\u5e76\u7b49\u5f85\u4ed6\u7684\u5d29\u6e83\u3002\n\u6b64\u7c7b\u578b\u7684\u8282\u70b9\u4ec5\u6258\u7ba1\u8ba1\u5212\u5bb9\u5668\u3002\u53ef\u4ee5\u901a\u8fc7docker node\u5347\u7ea7\u547d\u4ee4\u5c06\u5176\u63d0\u5347\u4e3a\u7ecf\u7406\u3002\n[lukas@docker-host1~]$docker\u8282\u70b9\u68c0\u67e5docker-host2.lukas.int--BeautyID\uff1ava779vfr6v115025a15yvuntwHostname\uff1adocker-host2.lukas.int\u8054\u63a5\u4f4d\u7f6e\uff1a2020-04-24 13\uff1a44\uff1a41.431444118+0000utcStatus\uff1aState\uff1aReady Availability\uff1aActive Address\uff1a10.10.10.21Platform\uff1aOperating System\uff1alinux Architecture\uff1ax86_64Resources\uff1acpu\uff1a2 Memory(\u8fde\u63a5\u4f4d\u7f6e\uff1a2020-04-24 13\uff1a44\uff1a41.431444118+0000utcStatus\uff1aState\uff1aReady Availability\uff1aActive Address\uff1a10.10.10.21\u5e73\u53f0\uff1a\u64cd\u4f5c\u7cfb\u7edf\uff1alinux\u67b6\u6784\uff1ax86_64\u8d44\u6e90\uff1aCPU\uff1a2\u5185\u5b58\u3002\n\u5982\u679c\u6ca1\u6709--Pretty\u6807\u5fd7\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u63cf\u8ff0\u8282\u70b9\u7684\u539f\u59cbjson\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528--format\u6807\u5fd7\u4ece\u4e2d\u83b7\u53d6\u786e\u5207\u4fe1\u606f\u3002\n[lukas@docker-host1~]$docker node update--\u53ef\u7528\u6027\u6392\u51fadocker-host3.lukas.intdocker-host3.lukas.int[lukas@docker-host1~]$docker\u8282\u70b9lsID\u4e3b\u673a\u540d\u72b6\u6001\u53ef\u7528\u6027\u7ba1\u7406\u5668\u72b6\u6001\u5f15\u64ceVERSIONx7mdjbmfz3ttkxbvelriix4yz*docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v\u3002\n[lukas@docker-host1~]$docker\u8282\u70b9\u5c06docker-host3.lukas.intNode docker-host3.lukas.int\u63d0\u5347\u4e3a\u7fa4\u4e2d\u7684\u7ecf\u7406\u3002[lukas@docker-host1~]$docker node lsID\u4e3b\u673a\u540d\u72b6\u6001\u53ef\u7528\u6027\u7ba1\u7406\u5668\u72b6\u6001\u5f15\u64ceVERSIONx7mdjbmfz3ttkxbvelriix4yz*docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v115025a15yvuntv docker-host2.lukas.int Ready Active 19.03.8nqe3eyk55lvmwsmqy5\u3002\n\u5982\u679c\u6211\u4eec\u60f3\u4fdd\u62a4\u8fd9\u4e9b\u5bc6\u94a5\uff0c\u53ef\u4ee5\u542f\u7528\u81ea\u52a8\u9501\u5b9a\u529f\u80fd\u3002\u542f\u7528\u540e\uff0c\u5728\u8282\u70b9\u91cd\u542f\u540e\uff0c\u9700\u8981\u4f7f\u7528s\u89e3\u5bc6\u5176\u914d\u7f6e\u6570\u636e", "note_en": "For HA and easier management of our containers we can create swarm cluster. It is composed of couple nodes with docker engine installed.\n     Each node has got docker engine installed with standard procedure as for single node docker.\n      --autolock -  true or  false - enable autolock for manager node - more later in this post\n   --availability - cloud be  active(new tasks allowed),  pause(new tasks not allowed, but old keeps going) or  drain(new tasks not allowed, finish immediately old ones if they exists) - set drain for manager node to create manager without containers on it\n --default-addr-pool - by default  10.10.10.0/8 - we can set another address pool for overlay network created with cluster\n [lukas@docker-host1 ~ ]$ docker swarm init --advertise-addr 10.10.10.20 --listen-addr 10.10.10.20Swarm initialized: current node  (x7mdjbmfz3ttkxbvelriix4yz ) is now a manager.To add a worker to this swarm, run the following command: docker swarm join --token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v 10.10.10.20:2377To add a manager to this swarm, run  &#39;docker swarm join-token manager&#39; and follow the instructions.\n    If we need tokens later and we didn\u2019t write them down we can get them from any manager node.\n  [lukas@docker-host1 ~ ]$ docker swarm join-token managerTo add a manager to this swarm, run the following command: docker swarm join --token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-956h96o5ivrekolr42k71bgqc 10.10.10.20:2377\n  [lukas@docker-host1 ~ ]$ docker swarm join-token workerTo add a worker to this swarm, run the following command: docker swarm join --token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v 10.10.10.20:2377\n  Tokens should be secured well, they give access to cluster. If they leaked somewhere, we should change them with command(we can rotate for worker or manager):\n [lukas@docker-host1 ~ ]$ docker swarm join-token --rotate workerSuccessfully rotated worker join token.To add a worker to this swarm, run the following command: docker swarm join --token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-c7r78dy7kwho1zq3uq7w26xhl 10.10.10.20:2377\n    [lukas@docker-host2 ~ ]$ docker swarm join --token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v 10.10.10.20:2377This node joined a swarm as a worker.\n [lukas@docker-host3 ~ ]$ docker swarm join --token SWMTKN-1-0zwqchv43d2alvl99fgw2mh6cnv7xc8vakspd90yjh4i7eiwwx-cn32plktlwjf8q25azk37ij5v 10.10.10.20:2377This node joined a swarm as a worker.\n    [lukas@docker-host1 ~ ]$ docker node lsID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSIONx7mdjbmfz3ttkxbvelriix4yz * docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v115025a15yvuntv docker-host2.lukas.int Ready Active 19.03.8k61h5c7sqzjepifp6lzjxpr95 docker-host3.lukas.int Ready Active 19.03.8\n    It is strongly recommended to have at least three manager nodes in production cluster for HA. This configuration will survive lost of one manager node. In such configuration still only one of managers will be leader, rest will replicates data from him and waits for his breakdown.\n  This type of nodes only hosts scheduled containers. It can by promoted to manager with  docker node promote command.\n  [lukas@docker-host1 ~ ]$ docker node inspect docker-host2.lukas.int --prettyID:\t\t\tva779vfr6v115025a15yvuntvHostname: \tdocker-host2.lukas.intJoined at: \t2020-04-24 13:44:41.431444118 +0000 utcStatus: State:\t\t\tReady Availability: \tActive Address:\t\t10.10.10.21Platform: Operating System:\tlinux Architecture:\t\tx86_64Resources: CPUs:\t\t\t 2Memory: 1.786GiBPlugins: Log: awslogs, fluentd, gcplogs, gelf, journald, json-file, local, logentries, splunk, syslog Network: bridge, host, ipvlan, macvlan,  ...\n Without  --pretty flag we get raw json describing node. We can get exact information from it with  --format flag.\n      [lukas@docker-host1 ~ ]$ docker node update --availability drain docker-host3.lukas.intdocker-host3.lukas.int [lukas@docker-host1 ~ ]$ docker node lsID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSIONx7mdjbmfz3ttkxbvelriix4yz * docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v115025a15yvuntv docker-host2.lukas.int Ready Active 19.03.8k61h5c7sqzjepifp6lzjxpr95 docker-host3.lukas.int Ready Drain 19.03.8\n   [lukas@docker-host1 ~ ]$ docker node promote docker-host3.lukas.intNode docker-host3.lukas.int promoted to a manager in the swarm. [lukas@docker-host1 ~ ]$ docker node lsID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSIONx7mdjbmfz3ttkxbvelriix4yz * docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v115025a15yvuntv docker-host2.lukas.int Ready Active 19.03.8nqe3eyk55lvmwsmqy5lx8v8vx docker-host3.lukas.int Ready Active Reachable 19.03.8\n           If we want to protect these keys we can enable  autolock feature. When enabled, after node restart his configuration data needs to be decrypted with special key before starting any service on it.\n  You can enable  autolock at cluster initialization with  docker swarm init or later with  docker swarm update.\n [lukas@docker-host1 ~ ]$ docker swarm update --autolock =trueSwarm updated.To unlock a swarm manager after it restarts, run the  `docker swarm unlock `command and provide the following key: SWMKEY-1-fFGBM6X97rFMI/2NHn3meJGH+j5lhLT1VnzgeQcZBAUPlease remember to store this key in a password manager, since without it youwill not be able to restart the manager.\n   [lukas@docker-host1 ~ ]$ docker node promote docker-host2.lukas.intNode docker-host2.lukas.int promoted to a manager in the swarm. [lukas@docker-host1 ~ ]$ docker node lsID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSIONx7mdjbmfz3ttkxbvelriix4yz * docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v115025a15yvuntv docker-host2.lukas.int Ready Active Reachable 19.03.8nqe3eyk55lvmwsmqy5lx8v8vx docker-host3.lukas.int Ready Active 19.03.8\n    [lukas@docker-host2 ~ ]$ docker node lsError response from daemon: Swarm is encrypted and needs to be unlocked before it can be used. Please use  &#34;docker swarm unlock&#34; to unlock it.\n    [lukas@docker-host2 ~ ]$ docker node lsID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSIONx7mdjbmfz3ttkxbvelriix4yz docker-host1.lukas.int Ready Active Leader 19.03.8va779vfr6v115025a15yvuntv * docker-host2.lukas.int Ready Active Reachable 19.03.8nqe3eyk55lvmwsmqy5lx8v8vx docker-host3.lukas.int Ready Active 19.03.8\n  [lukas@docker-host1 ~ ]$ docker swarm unlock-keyTo unlock a swarm manager after it restarts, run the  `docker swarm unlock `command and provide the following key: SWMKEY-1-fFGBM6X97rFMI/2NHn3meJGH+j5lhLT1VnzgeQcZBAUPlease remember to store this key in a password manager, since without it youwill not be able to restart the manager.\n  [lukas@docker-host1 ~ ]$ docker swarm unlock-key --rotateSuccessfully rotated manager unlock key.To unlock a swarm manager after it restarts, run the  `docker swarm unlock `command and provide the following key: SWMKEY-1-RsrHxoajv/57yi9Eng7SDcDS7TGxcWI0MqKrpMTlpWsPlease remember to store this key in a password manager, since without it youwill not be able to restart the manager.\n    If you plan to create service with image from login-secured registry, you should first login:\n [lukas@docker-host1 ~ ]$ docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don &#39;t have a Docker ID, head over to https://hub.docker.com to create one.Username: &lt;username&gt;Password: &lt;password&gt;WARNING! Your password will be stored unencrypted in /home/lukas/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded\n Then you can crate service with optional  --with-registry-auth flag - docker client will copy your authentication information securely to all nodes that will be pulling image for your service.\n   It is strongly advised to not use images names without tag or with  latest tag.\n When Swarm is creating service it resolves name of image and tag into digest hash, from that moment in service configuration resides only hash pointing to image that was tagged  latest at moment of issuing  docker service create command.\n Using  latest tag in service description can lead to mistakes because of fact, that  latest tag moves always to newest software version.\n   We will create docker service named  web_server, there will be two containers deployed around our docker swarm cluster, each of this containers will expose his port 80 on 80 port of docker host machine(it is important to check that port is available on every docker host from swarm cluster). Containers will be hosting Apache version 2.4\n [lukas@docker-host1 ~ ]$ docker service create --with-registry-auth --name web_server --replicas = 2 --publish 80:80 httpd:2.4h6ttr4yuoukc8zhwo4a5oin33overall progress:  2 out of  2 tasks1/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]verify: Service converged\n As in  docker run we can add parameters that will change containers start behaviour or override some image settings like:\n     When creating service there is possibility to set some parameters to contaiers based on service metadata.\n      [lukas@docker-host1 ~ ]$ docker service create --with-registry-auth --name web_server --replicas = 6 --publish target =80,published = 80 --hostname = &#34;{{.Node.ID}}-{{.Service.Name}}&#34; httpd:2.4x0zrp0zkls6v3wfue39638levoverall progress:  6 out of  6 tasks1/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]3/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]4/6:  ...\n     [lukas@docker-host1 ~ ]$ docker service lsID NAME MODE REPLICAS IMAGE PORTSh6ttr4yuoukc web_server replicated 2/2 httpd:2.4 *:80-&gt;80/tcp\n  [lukas@docker-host1 ~ ]$ docker service ps h6ttr4yuoukcID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTSzdv7uqomaz29 web_server.1 httpd:2.4 docker-host3.lukas.int Running Running about a minute agofe36zt5e5zsz web_server.2 httpd:2.4 docker-host2.lukas.int Running Running  59 seconds ago\n      As we see despite that containers are only on  docker-host2 and  docker-host3 machines - service that they serve is available on every node in cluster at port 80. This is default called  ingress mode - all calls on port 80 on every node in swarm cluster are redirected automatically to nodes with containers serving service.\n  If you want to publish ports of service only on nodes where containers from services resides you should deploy it with  mode=host parameter in  --publish flag.\n [lukas@docker-host1 ~ ]$ docker service create --with-registry-auth --name web_server --replicas = 2 --publish mode =host,target =80,published = 80 httpd:2.4s7qjpd70u19ttk49jbgu647p5overall progress:  2 out of  2 tasks1/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]verify: Service converged [lukas@docker-host1 ~ ]$ docker service ps s7qjpd70u19tID NAME IMAGE NODE DESIRED STATE  ...\n  [lukas@docker-host1 ~ ]$ curl -X GET 127.0.0.1:80curl:  (7 ) Failed to connect to 127.0.0.1 port 80: Connection refused\n     As in standard container, in swarm we can create volumes with  --mount flag. We mount  site_content in  /var/html/www location in every container. This volume was not created earlier so docker will create it by himself.\n [lukas@docker-host1 ~ ]$ docker service create --with-registry-auth --name web_server --replicas = 6 --publish target =80,published = 80 --mount source =site_content,target =/var/html/www httpd:2.4fim71hxxnzic4pn9trwh77sjtoverall progress:  6 out of  6 tasks1/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]3/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]  ...\n I created six replicas to show interesting thing - we have three node cluster - so it is highly probable that on some node will be more than one container.\n  [lukas@docker-host2 ~ ]$ docker container lsCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESb5cb6f86ba06 httpd:2.4  &#34;httpd-foreground&#34;  16 seconds ago Up  11 seconds 80/tcp web_server.3.6b9hgq4cjz90aaufplpjt61er262af192ced6 httpd:2.4  &#34;httpd-foreground&#34;  16 seconds ago Up  11 seconds 80/tcp web_server.6.mmkia5wsc7trnaqv9ozil3h0b [lukas@docker-host2 ~ ]$ docker volume lsDRIVER VOLUME NAMElocal site_content\n Exactly one! Service assume that all containers in it do the same, if there will be more that one container per node - these containers will have common volume.\n    [lukas@docker-host1 ~ ]$ docker network create --driver overlay management_networkbrgzvb0gxkb6y8q9mgb4rurwu [lukas@docker-host1 ~ ]$ docker network lsNETWORK ID NAME DRIVER SCOPE [... ]tverx8ooqine ingress overlay swarmbrgzvb0gxkb6 management_network overlay swarm\n  [lukas@docker-host1 ~ ]$ docker service create --with-registry-auth --name web_server --replicas = 2 --publish target =80,published = 80 --network management_network httpd:2.4tbojbrsx89nukjh58vvknru1toverall progress:  2 out of  2 tasks1/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]verify: Service converged\n  [lukas@docker-host2 ~ ]$ docker inspect b8c2037f5235 [  {  &#34;Id&#34;:  &#34;b8c2037f5235515c464e2af9444ab252efd080e1fa23fc0595f22c4a201ef760&#34;,  &#34;Created&#34;:  &#34;2020-04-27T14:29:57.718762759Z&#34;,  &#34;Path&#34;:  &#34;httpd-foreground&#34;,  [... ]  &#34;Networks&#34;:  {  [... ]  &#34;management_network&#34;:  {  &#34;IPAMConfig&#34;:  {  &#34;IPv4Address&#34;:  &#34;10.0.1.3&#34;  },  &#34;Links&#34;: null,  &#34;Aliases&#34;:  [  &#34;b8c2037f5235&#34;\n  By then we was creating services in replicated mode where we set exact number of replicas.\n If we want to have service containers on all available nodes of our cluster then we should run in with  --mode=global.\n [lukas@docker-host1 ~ ]$ docker service create --with-registry-auth --name web_server --mode =global --publish target =80,published = 80 httpd:2.4wh27xrc33f515f8ccjkfqmhpwoverall progress:  3 out of  3 tasksva779vfr6v11: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]nqe3eyk55lvm: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]x7mdjbmfz3tt: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]verify: Service  ...\n  Let\u2019s check what will happen when we remove node from cluster. For simplicity I will set node into  drain mode described earlier.\n   [lukas@docker-host1 ~ ]$ docker service ps wh27xrc33f515f8ccjkfqmhpwID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTSwop37gk76oy1 web_server.x7mdjbmfz3ttkxbvelriix4yz httpd:2.4 docker-host1.lukas.int Running Running  3 minutes agodfgkhs7js37r web_server.va779vfr6v115025a15yvuntv httpd:2.4 docker-host2.lukas.int Running Running  3minutes agowgsf8plhlghg web_server.nqe3eyk55lvmwsmqy5lx8v8vx httpd:2.4 docker-host3.lukas.int Shutdown Shutdown  ...\n   Check service - global service as soon as node became available start new container on it:\n [lukas@docker-host1 ~ ]$ docker service ps wh27xrc33f515f8ccjkfqmhpwID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTSk7l2nnjstjkn web_server.nqe3eyk55lvmwsmqy5lx8v8vx httpd:2.4 docker-host3.lukas.int Running Running less than a second agowop37gk76oy1 web_server.x7mdjbmfz3ttkxbvelriix4yz httpd:2.4 docker-host1.lukas.int Running Running  3minutes agodfgkhs7js37r web_server.va779vfr6v115025a15yvuntv httpd:2.4 docker-host2.lukas.int  ...\n  If we have got couple of nodes in our cluster but want to run service on specific ones, we can use node labeling - placement constraints.\n      For labeling, we can use any key and value that we want. There is no dictionary of available keys.\n   [lukas@docker-host1 ~ ]$ docker service create --with-registry-auth --name web_server --replicas = 2 --publish target =80,published = 80 --constraint node.labels.workload_type = =web httpd:2.4idj6xxlcndqztnaxz2fvn7n5koverall progress:  2 out of  2 tasks1/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]verify: Service converged\n We want replica mode service with two replicas. Only  docker-host3 has got label on it, so both replicas will be started on this node.\n [lukas@docker-host1 ~ ]$ docker service ps idj6xxlcndqztnaxz2fvn7n5kID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTS2wrrvkgtbjks web_server.1 httpd:2.4 docker-host3.lukas.int Running Running  13 seconds ago7z81ske7htq0 web_server.2 httpd:2.4 docker-host3.lukas.int Running Running  13 seconds ago\n   [lukas@docker-host1 ~ ]$ docker service scale web_server = 2web_server scaled to  2overall progress:  2 out of  2 tasks1/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/2: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]verify: Service converged\n   If you want to edit service with  docker service update command docker will do that by restarting containers.\n You can configure how restarting procedure will look like with  docker service create or  docker service update flags:\n --update-failure-action - what to do on failure in container update process - by default:  pause - we can set there  continue\n --update-max-failure-ratio - value from 0 to 1 - how many containers can fail during update process - 0.1 is considered like 10%\n  [lukas@docker-host1 ~ ]$ docker service update --update-delay 5s --update-parallelism  2 web_serverweb_serveroverall progress:  6 out of  6 tasks1/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]3/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]4/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]5/6: running  ...\n  [lukas@docker-host1 ~ ]$ docker service inspect web_server [... ] &#34;UpdateConfig&#34;:  {  &#34;Parallelism&#34;: 2,  &#34;Delay&#34;: 5000000000,  &#34;FailureAction&#34;:  &#34;pause&#34;,  &#34;Monitor&#34;: 5000000000,  &#34;MaxFailureRatio&#34;: 0,  &#34;Order&#34;:  &#34;stop-first&#34;  },  [... ]\n   [lukas@docker-host1 ~ ]$ docker service update --publish-add  80 web_serverweb_serveroverall progress:  2 out of  6 tasks1/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]3/6: ready  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]4/6: ready  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]5/6:6/6:\n  [lukas@docker-host1 ~ ]$ docker service update --publish-rm  80 web_serverweb_serveroverall progress:  0 out of  6 tasks1/6: ready  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]2/6:3/6: ready  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]4/6:5/6:6/6:\n  [lukas@docker-host1 ~ ]$ docker service update --network-add management_network web_serverweb_serveroverall progress:  2 out of  6 tasks1/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]2/6: running  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt; ]3/6: preparing  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]4/6: ready  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]5/6:6/6:\n  [lukas@docker-host1 ~ ]$ docker service update --network-rm management_network web_serverweb_serveroverall progress:  0 out of  6 tasks1/6: ready  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]2/6:3/6:4/6: ready  [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =&gt;  ]5/6:6/6:\n    [lukas@docker-host1 ~ ]$ docker service update --rollback web_serverweb_serverrollback: manually requested rollbackoverall progress: rolling back update:  0 out of  6 tasks1/6:2/6:3/6:4/6: starting  [ = = = = =&gt;  ]5/6:6/6:\n  [lukas@docker-host1 ~ ]$ docker service logs web_serverweb_server.1.ogwy5n7dgw6l@docker-host2.lukas.int | AH00557: httpd: apr_sockaddr_info_get ( ) failed  for 2c910786bf88web_server.1.ogwy5n7dgw6l@docker-host2.lukas.int | AH00558: httpd: Could not reliably determine the server &#39;s fully qualified domain name, using 127.0.0.1. Set the &#39;ServerName &#39; directive globally to suppress this message web_server.1.ogwy5n7dgw6l@docker-host2.lukas.int  ...", "posttime": "2020-05-03 21:33:07", "tags": "docker,sarm,swarm,\u8282\u70b9", "title": "Docker Sarm\u96c6\u7fa4\u5b8c\u6210\u6307\u5357", "title_en": "Docker Swarm Cluster Complete Guide", "transed": 1, "url": "https://knowledgepill.it/posts/docker_swarm_compendium/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["docker", "sarm", "swarm", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000485, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "[\u4e3b\u9875]\u6700\u8fd1\uff0c\u6211\u5c06\u6211\u7684\u9759\u6001\u5341\u4e00\u7ad9\u70b9\u79fb\u5230\u4e86\u4e00\u4e2a\u7801\u5934\u5bb9\u5668\u4e0a\u3002\u8fd9\u662f\u6211\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u5236\u4f5c\u7684\u7b2c\u4e00\u6279\u7801\u5934\u56fe\u50cf\u4e4b\u4e00\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u6548\u7387\u5f88\u4f4e\u3002\n\u6765\u81eanginx\uff1a1.17.10-alpineRUN apk add--update NodeJS npmRUN NPM install-g@11ty/leventyCOPY\u3002/appWORKDIR/appRUN NPM installRun 11.RUN rm-r/usr/share/nginx/html/run cp/app/_site//usr/share/nginx/html/-rEXPOSE 80\u3002\n\u8fd9\u4e2adocker\u56fe\u50cf\u4ea7\u751f\u4e86419MB\u7684\u6700\u7ec8\u56fe\u50cf\uff0c\u5927\u7ea6\u82b1\u4e863\u5206\u949f\u6765\u6784\u5efa\u3002\u8fd9\u5176\u4e2d\u6709\u4e00\u4e9b\u660e\u663e\u7684\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u6bcf\u6b21\u6211\u66f4\u6539\u5b83\u5fc5\u987b\u7ecf\u8fc7\u7684\u4efb\u4f55\u6587\u4ef6\u65f6\uff0c\u90fd\u4f1a\u91cd\u65b0\u5b89\u88c5\u6211\u7684\u6240\u6709node_module\u3002\u5176\u6b21\uff0c\u6211\u5728\u5168\u5c40\u5b89\u88c5Eleviti\uff0c\u540c\u65f6\u5728\u7b2c\u4e8c\u4e2aNPM\u5b89\u88c5\u671f\u95f4\u5b89\u88c5\u5b83\u3002\nfrom nginx\uff1a1.17.10-alpine as npmPackagesRun apk add--update NodeJS npmWORKDIR/appCOPY Package.json.Run NPM installFROM nginx\uff1a1.17.10-alpineRUN apk add--update NodeJS npmWORKDIR/appCOPY--from=npmpackage/app/appCOPY\u3002.RUN NPM\u8fd0\u884c\u6784\u5efa\u8fd0\u884crm-r/usr/share/nginx/html/run cp/app/_site//usr/share/nginx/html/-rEXPOSE 80\u3002\n\u8fd9\u4e2a\u6784\u5efa\u88ab\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u9996\u5148\u5b83\u53ea\u590d\u5236\u4e86Package.json\u5e76\u8fd0\u884cNPM\u5b89\u88c5\u3002\u8fd9\u610f\u5473\u7740\u5047\u8bbePackage.json\u6587\u4ef6\u6839\u672c\u6ca1\u6709\u66f4\u6539\uff0c\u90a3\u4e48\u5728\u7b2c\u4e00\u6b21docker\u6784\u5efa\u4e4b\u540e\uff0c\u5b83\u5c06\u7f13\u5b58node_module\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u5fc5\u5728\u6bcf\u6b21\u6784\u5efa\u65f6\u90fd\u5b89\u88c5NPM\u3002\u8fd9\u4f1a\u5c06\u575e\u7ad9\u56fe\u50cf\u7f29\u5c0f\u5230329MB\uff0c\u7a0d\u597d\u4e00\u4e9b\uff0c\u4f46\u4ecd\u7136\u975e\u5e38\u81c3\u80bf\u3002\u5728\u6d4f\u89c8\u4e86\u4e00\u4e0bdocker\u56fe\u50cf\u540e\uff0c\u6211\u53d1\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u5c06/app\u6587\u4ef6\u5939\u4fdd\u6301\u4e0d\u53d8\u2026\u2026\u3002\nfrom nginx\uff1a1.17.10-alpine as npmPackagesRun apk add--update NodeJS npmWORKDIR/appCOPY Package.json.Run NPM installFROM nginx\uff1a1.17.10-alpine as builderRun apk add--update NodeJS npmWORKDIR/appCOPY--from=npmpackage/app/appCOPY\u3002.RUN NPM\u8fd0\u884cbuildRun rm-r/usr/share/nginx/html/run cp/app/_site//usr/share/nginx/html/-rFROM nginx\uff1a1.17.10-alpineCOPY--from=builder/app/_site//usr/share/nginx/html/expos80\u3002\n\u8fd9\u662f\u6211\u6700\u7ec8\u5f97\u5230\u7684\u6700\u7ec8\u6620\u50cf\uff0c\u8bf7\u6ce8\u610f\u6700\u540e\u4e00\u5c42\u6ca1\u6709\u5b89\u88c5NPM\u6216NodeJS\u3002\u8fd9\u662f\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6b64\u65f6\u6784\u5efa\u5668\u548cnpmPackagelayer\u5df2\u7ecf\u5b8c\u6210\u4e86\u4e0eNodeJS\u76f8\u5173\u7684\u6240\u6709\u5de5\u4f5c\u3002\u8fd9\u5f20\u56fe\u7247\u53ea\u5360\u4e86691MB\uff0c\u8003\u8651\u5230\u6211\u7684\u7f51\u7ad9\u7684\u7f16\u8bd1\u7248\u672c\u7531\u4e8e\u5404\u79cd\u56fe\u7247\u8d85\u8fc7\u4e8650MB\uff0c\u8fd9\u5df2\u7ecf\u76f8\u5f53\u4e0d\u9519\u4e86\u3002\u4e0b\u4e00\u6b65\u7f29\u5c0f\u6211\u7684\u7ad9\u70b9\u7684\u505c\u9760\u7ad9\u56fe\u50cf\u5c06\u662f\u538b\u7f29\u56fe\u50cf\uff0c\u4f46\u8fd9\u4e0e\u505c\u9760\u7ad9\u56fe\u50cf\u662f\u65e0\u5173\u7684\u3002\n\u7f16\u8f91\uff1a\u538b\u7f29\u6240\u6709\u56fe\u7247\u548c\u5916\u798f\u5de5\u827a\u8d44\u6e90\u5305\u540e\uff0c\u6574\u4e2a\u7ad9\u70b9\u4e3a19MB\uff0c\u56fe\u7247\u4e3a39MB\u3002\n\u6c49\u666e\u987f\u00b7\u6469\u5c14(Hampton Moore)\u8457", "note_en": "[ Home]  Recently I moved my static  Eleventy site over to a docker container. This was one of the first docker images I have made in a while so it started inefficient.\n FROM nginx:1.17.10-alpineRUN apk add --update nodejs npmRUN npm install -g @11ty/eleventyCOPY . /appWORKDIR /appRUN npm installRUN eleventy .RUN rm -r /usr/share/nginx/html/RUN cp /app/_site/ /usr/share/nginx/html/ -rEXPOSE 80\n This docker image resulted in a 419MB final image and took about 3 minutes to build. There are some obvious issues with this. For instance every-time I change any file it must go through and reinstall all of my node_modules. Secondly, I was installing Eleventy globally while at the same time installing it during the second npm install.\n FROM nginx:1.17.10-alpine as npmpackagesRUN apk add --update nodejs npmWORKDIR /appCOPY package.json .RUN npm installFROM nginx:1.17.10-alpineRUN apk add --update nodejs npmWORKDIR /appCOPY --from=npmpackages /app /appCOPY . .RUN npm run buildRUN rm -r /usr/share/nginx/html/RUN cp /app/_site/ /usr/share/nginx/html/ -rEXPOSE 80\n This build was segmented into two portions, at first it just copied the package.json and ran npm install. This means that assuming that the package.json file did not change at all then after the first docker build it would cache the node_modules so that it did not have to npm install on each build. This shrunk the docker image down to 329MB, which was a little better, but still heavily bloated. After poking around in the docker image I saw the issue, I was keeping the /app folder even  ...\n FROM nginx:1.17.10-alpine as npmpackagesRUN apk add --update nodejs npmWORKDIR /appCOPY package.json .RUN npm installFROM nginx:1.17.10-alpine as builderRUN apk add --update nodejs npmWORKDIR /appCOPY --from=npmpackages /app /appCOPY . .RUN npm run buildRUN rm -r /usr/share/nginx/html/RUN cp /app/_site/ /usr/share/nginx/html/ -rFROM nginx:1.17.10-alpineCOPY --from=builder /app/_site/ /usr/share/nginx/html/EXPOSE 80\n This is the final image that I ended up with, note how the final layer does not install NPM or NodeJS. This is to save space as at that point the  builder and  npmpackagelayers have already done everything related to NodeJS. This image only took up 69.1MB which is pretty good considering the compiled version of my site is over 50MB due to various images. The next step in shrinking my site&#39;s docker image will be compressing the images down, but that is unrelated to the docker image  ...\n EDIT: After compression of all of the images and WaifuCraft resource pack the whole site is 19MB with the image being 39MB\n By Hampton Moore", "posttime": "2020-05-03 21:10:55", "tags": "docker,\u7ad9\u70b9,static,\u56fe\u50cf,npm", "title": "\u5c06\u6211\u7684\u9759\u6001\u7ad9\u70b9Docker\u6620\u50cf\u4ece419MB\u7f29\u5c0f\u523039MB", "title_en": "Shrinking my static sites Docker image from 419MB to 39MB", "transed": 1, "url": "https://hampton.pw/posts/shrinking-this-sites-docker-image/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["docker", "\u7ad9\u70b9", "static", "\u56fe\u50cf", "npm"]}, {"category": "", "categoryclass": "", "imagename": "43f75cf794e7ae33b9a9491afa17e812.png", "infoid": 1000484, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u8303\u7574\u53ea\u662f\u53e6\u4e00\u79cd\u4ee3\u6570\u7ed3\u6784\uff0c\u5c31\u50cf\u7fa4\u3001\u4e48\u534a\u7fa4\u548c\u73af\u4e00\u6837\u3002\u5b83\u4eec\u662f\u8fd9\u4e9b\u62bd\u8c61\u7684\u4e1c\u897f\uff0c\u5b83\u4eec\u6709\u4e00\u4e9b\u62bd\u8c61\u7684\u65b9\u7a0b\u516c\u7406\u548c\u8fd0\u7b97\u3002\u5b83\u4eec\u662f\u6211\u4eec\u5b8f\u4f1f\u54c1\u7c7b\u4e4b\u65c5\u7684\u4e0b\u4e00\u7ad9\u3002\n\u4e48\u534a\u7fa4\u662f\u4e0e\u5355\u4f4d\u6709\u7ed3\u5408\u8fd0\u7b97\u7684\u4e1c\u897f\u3002\u52a0\u6cd5\u548c0\u4f7f\u6570\u5b57\u6210\u4e3a\u4e48\u534a\u7fa4\u3002\u4e58\u6cd5\u548c1\u662f\u6570\u5b57\u7684\u5355\u72ec\u4e48\u534a\u7fa4\u3002\u4e32\u8054\u548c\u7a7a\u5217\u8868\u4f7f\u5217\u8868\u6210\u4e3a\u4e48\u534a\u7fa4\u3002\u5e76\u96c6\u548c\u7a7a\u96c6\u4f7f\u96c6\u6210\u4e3a\u4e48\u534a\u7fa4\u3002\u6211\u4eec\u53ef\u4ee5\u7528Python\u5bf9\u5176\u8fdb\u884c\u7f16\u7801\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u8fd9\u4e0e\u7c7b\u522b\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u5982\u679c\u67d0\u4ef6\u4e8b\u662f\u4e00\u4e2a\u8303\u7574\uff0c\u90a3\u4e48\u5b83\u9075\u5faa\u5b9a\u4e49\u5b83\u662f\u4e00\u4e2a\u8303\u7574\u610f\u5473\u7740\u4ec0\u4e48\u7684\u516c\u7406\u3002\u5b83\u6709\u6001\u5c04\u548c\u5ba2\u4f53\u3002\u5982\u679c\u5bf9\u8c61\u4e0a\u7684\u5934\u90e8\u4e0e\u5c3e\u90e8\u76f8\u9047\uff0c\u5219\u6784\u6210\u6001\u5c04\u3002\u5355\u4f4d\u6001\u5c04\u603b\u662f\u5b58\u5728\u7684\u3002\n\u5177\u67091\u4e2a\u5bf9\u8c61\u7684\u8303\u7574\u4e2d\u7684\u6001\u5c04\u81ea\u52a8\u670d\u4ece\u4e48\u534a\u7fa4\u516c\u7406\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8303\u7574\u516c\u7406\u6697\u793a\u4e86\u4e48\u534a\u7fa4\u516c\u7406\u3002\u4e07\u7269\u4e4b\u6240\u4ee5\u6784\u6210\uff0c\u662f\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7269\u4f53\u3002\u8fd9\u662f\u4e00\u79cd\u9000\u5316\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u590d\u5408\u8fd0\u7b97\u7b26\u7684\u504f\u597d\u6027\u3002\u56e0\u4e3a\u5355\u4f4d\u6001\u5c04\u662f\u4e00\u4e2a\u5355\u4f4d\uff0c\u6240\u4ee5\u81ea\u52a8\u6709\u4e00\u4e2a\u5408\u6210\u5355\u4f4d\u3002\u7ec4\u5408\u5df2\u8981\u6c42\u662f\u5173\u8054\u7684\u3002\u7830\u3002\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u4e2a\u4e48\u534a\u7fa4\u3002\n\u7ee7\u7eed\u524d\u9762\u6587\u7ae0\u4e2d\u7684\u8868\u793a\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u521b\u5efa\u4e00\u4e2apython\u7c7b\u3002\u6b64\u7c7b\u7684\u5b9e\u4f8b\u662f\u6b64\u7c7b\u522b\u4e2d\u7684\u6001\u5c04\u3002\u5982\u679c\u60a8\u8be2\u95ee\u4efb\u4f55\u6001\u5c04\u7684\u57df\u6216\u4f59\u57df\uff0c\u60a8\u603b\u662f\u4f1a\u5f97\u5230()\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u5bf9\u8c61\u7c7b\u522b\u3002\u5c06\u8fd9\u4e9b\u7c7b\u4e0e\u4e0a\u9762\u7684\u7c7b\u8fdb\u884c\u6bd4\u8f83\u3002\n\u5982\u679c\u6709\u81ea\u7136\u9006\u8fd0\u7b97\uff0c\u67d0\u4e9b\u4e48\u534a\u7fa4\u4e5f\u662f\u7fa4\u3002\u6574\u6570\u662f\u52a0\u6cd5\u4e0b\u7684\u4e00\u4e2a\u7fa4\uff0c\u5176\u4e2d\u8d1f\u6570\u7ed9\u4f60\u5012\u6570\u3002\u4e0d\u8fc7\uff0c\u6709\u4e9b\u4eba\u4e0d\u662f\u3002\u81ea\u7136\u6570(0\uff0c1\uff0c2\u2026)\u3002\u4e0d\u662f\u4e00\u4e2a\u88ab\u52a0\u5165\u7684\u56e2\u4f53\u3002\n\u7c7b\u4f3c\u5730\uff0c\u7fa4\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5bf9\u8c61\u7684\u8303\u7574\uff0c\u9644\u52a0\u7684\u8981\u6c42\u662f\u6bcf\u4e2a\u6001\u5c04\u90fd\u662f\u53ef\u9006\u7684\uff0c\u5e76\u4e14\u603b\u662f\u5b58\u5728\u8fd9\u6837\u7684\u8303\u7574\u3002\nSympy\u5728\u5176\u4e2d\u6709\u7ec4\u3002\u6211\u4eec\u53ef\u4ee5\u5bf9\u8be5\u529f\u80fd\u8fdb\u884c\u5305\u88c5\uff0c\u4f7f\u5176\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5206\u7c7b\u754c\u9762\u3002\u4e3a\u4e86\u4e0e\u6211\u4eec\u4f7f\u7528Python\u7c7b\u8868\u793a\u7c7b\u522b\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u505a\u4e00\u4e9b\u7a0d\u5fae\u4e0d\u5e38\u89c1\u7684\u4e8b\u60c5\uff0c\u5373\u4f7f\u7c7b\u5b9a\u4e49\u751f\u6210\u5668\u51fd\u6570fp_group_cat\u3002\u6bcf\u6b21\u8c03\u7528\u6b64\u51fd\u6570\u65f6\uff0c\u5b83\u90fd\u4f1a\u521b\u5efa\u4e0d\u540c\u7684\u7c7b\u548c\u4e0d\u540c\u7684\u7c7b\u522b\u3002\u6211\u5728\u8fd9\u91cc\u53ea\u5305\u88c5\u4e86\u6709\u9650\u5448\u73b0\u7684\u7fa4\u529f\u80fd\uff0c\u4f46\u4e5f\u6709\u81ea\u7531\u7684\u7fa4\u3001\u6392\u5217\u2026\u2026\u3002\n\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u65b9\u5411\u4e0a\u7b80\u5316\u4e00\u4e2a\u7c7b\u522b\u7684\u529b\u91cf\u3002\u6211\u4eec\u5c06\u4e0d\u518d\u53ea\u6709\u4e00\u4e2a\u7269\u4f53\uff0c\u800c\u662f\u6709\u5f88\u5c11\u7684\u7bad\u5934\u3002\n\u5177\u6709\u591a\u4e2a\u5bf9\u8c61\u4f46\u5b83\u4eec\u4e4b\u95f4\u81f3\u591a\u6709\u4e00\u4e2a\u6001\u5c04\u7684\u8303\u7574\u670d\u4ece\u524d\u5e8f\u516c\u7406\u3002\u5728\u5206\u7c7b\u672f\u8bed\u4e2d\uff0c\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a\u7ec6\u7c7b\u522b\u4efb\u4f55\u5b9e\u9645\u8ba2\u5355(\u5982\u6570\u5b57\u4e0a\u7684LIKE)\u4e5f\u662f\u9884\u8ba2\u5355\uff0c\u4f46\u9884\u8ba2\u5355\u7684\u8981\u6c42\u7a0d\u5f31\u4e00\u4e9b\u3002\u4e0b\u9762\u662f\u6574\u6570\u6392\u5e8f\u7684\u5206\u7c7b\u8868\u793a(\u5c3d\u7ba1\u5b9e\u9645\u4e0a\u76f8\u540c\u7684\u5b9e\u73b0\u4e5f\u9002\u7528\u4e8e\u5b9e\u73b0&lt\uff1b=\u548c==\u7684\u4efb\u4f55python\u7c7b\u578b)\u3002\n\u504f\u5e8f\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u5b50\u96c6\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528python\u96c6\u6765\u8868\u793a\u5b83\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u4f46\u53ef\u80fd\u4ee4\u4eba\u56f0\u60d1\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u4e0d\u662f\u5df2\u7ecf\u5b9a\u4e49\u4e86FinSet\u5417\uff1f\u662f\u7684\uff0c\u4f46\u662f\u8fd9\u4e9b\u662f\u4e0d\u540c\u7684\u7c7b\u522b\u3002\u5728FinSet\u4e2d\uff0c\u6001\u5c04\u662f\u51fd\u6570\u3002\u5728SubSetCat\u4e2d\uff0c\u6001\u5c04\u662f\u5b50\u96c6\u5173\u7cfb(\u5176\u4e2d\u53ef\u4ee5\u6709\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u4e00\u4e2a)\u3002\u5b83\u4eec\u663e\u7136\u4e0d\u662f\u4e00\u56de\u4e8b\uff0c\u5c3d\u7ba1\u4e24\u8005\u90fd\u6709\u5957\u88c5\u3002\u60c5\u51b5\u53d8\u5f97\u66f4\u52a0\u6251\u6714\u8ff7\u79bb..\u3002\n\u9884\u5e8f\u4e0e\u6709\u5411\u65e0\u73af\u56fe(DAG)\u76f8\u5173\uff0c\u6709\u5411\u65e0\u73af\u56fe\u662f\u6307\u6ca1\u6709\u73af\u7684\u6709\u5411\u56fe\u3002\u5982\u679c\u60a8\u7ed9\u6211\u4e00\u4e2aDAG\uff0c\u6709\u4e00\u4e2a\u7531\u8be5DAG\u751f\u6210\u7684\u9884\u8ba2\u5355\u3002\u7ed9\u8bfb\u8005\u7684\u7ec3\u4e60(\u53c8\u540d\u6211\u5f88\u61d2)\uff1a\u4f60\u80fd\u628aNetworkx DAG\u53d8\u6210\u4e00\u4e2a\u7c7b\u522b\u5417\uff1f\n\u8fd9\u5f88\u597d\uff0c\u53ea\u662f\u7528\u4e00\u4e9b\u53ef\u80fd\u66f4\u719f\u6089\u7684\u6982\u5ff5\u6765\u89e3\u91ca\u7c7b\u522b\u3002\u6211\u89c9\u5f97\u6709\u70b9\u4e4f\u5473\u3002\u6211\u4eec\u5e76\u6ca1\u6709\u4ece\u8fd9\u7bc7\u6587\u7ae0\u7684\u5206\u7c7b\u6982\u5ff5\u4e2d\u83b7\u5f97\u4efb\u4f55\u771f\u6b63\u7684\u597d\u5904\u3002\u7136\u800c\uff0c\u5f53\u63d0\u51fa\u4e00\u4e2a\u65b0\u7684\u8303\u7574\u6982\u5ff5\u65f6\uff0c\u60a8\u603b\u662f\u5e94\u8be5\u8003\u8651\u5e7a\u534a\u7fa4\u3001\u7fa4\u548c\u9884\u5e8f\u7684\u4f8b\u5b50\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u80fd\u4f1a\u7b80\u5316\u4e3a\u66f4\u719f\u6089\u7684\u4e1c\u897f\u3002\u6b64\u5916\uff0c\u5230\u8fd9\u4e9b\u7b80\u5355\u5bf9\u8c61\u7684\u6620\u5c04/\u4ece\u8fd9\u4e9b\u7b80\u5355\u5bf9\u8c61\u5230\u66f4\u591a\u5bf9\u8c61\u7684\u6620\u5c04.\u3002\n\u8ba1\u7b97\u7fa4\u8bba\u7684\u65b9\u6cd5\u5f88\u8010\u4eba\u5bfb\u5473\u3002\u5b83\u4eec\u4e2d\u7684\u4e00\u4e9b\u4f3c\u4e4e\u5e94\u8be5\u5ef6\u4f38\u5230\u8303\u7574\u8bba\u3002\u53c2\u89c1RFC Walters\u7684\u8fd9\u672c\u4e66\uff0c\u4f8b\u5982https://www.cambridge.org/core/books/categories-and-computer-science/203EBBEE29BEADB035C9DD80191E67B1\uff0c\u8fd9\u662f\u4e00\u672c\u5728\u5176\u4ed6\u65b9\u9762\u4e5f\u975e\u5e38\u6709\u8da3\u7684\u4e66\u3002(\u611f\u8c22\u57c3\u6587\u00b7\u5e15\u7279\u68ee\u7684\u63d0\u793a)\u3002\n\u4e0b\u6b21\u6211\u60f3\u6211\u4eec\u4f1a\u8ba8\u8bba\u6709\u9650\u8303\u7574\u548c\u6709\u9650Yoneda\u5f15\u7406\u3002", "note_en": "From one perspective, categories are just another algebraic structure, like  groups,  monoids and  rings. They are these abstract things that have some abstract equational axioms and operations. They are the next stop on our magnificent category journey.\n  A monoid is a thing that has an associative operation with a unit. Addition and 0 make numbers a monoid. Multiplication and 1 are a separate monoid for numbers. Concatenation and empty lists make lists a monoid. Union and empty set make sets a monoid. We can encode this in python like so:\n  What does this have to do with categories? Well, if some thing is a category, it obeys the axioms that define what it means to be a category. It has morphisms and objects. The morphisms compose if head meets tail on an object. There are always identity morphism.\n The morphisms in a category with 1 object automatically obey the monoid axioms. In this case, the category axioms imply the monoid axioms. Everything composes because there is only one object. It\u2019s a kind of degenerate case where we are not using the partiality of the composition operator. There is automatically a unit for composition because the identity morphism is a unit. Composition is already required to be associative. Boom. The thing is a monoid.\n Continuing with our representation from  previous  posts, we make a python class for each category. An instance of this class is a morphism in this category. If you ask for the domain or codomain of any morphism, you always get back  () because it is a single object category. Compare these classes with the above classes.\n  Some monoids are also groups if there is a natural inverse operation. The integers are a group under addition where the negative gives you the inverse. Some aren\u2019t though. The natural numbers (0,1,2\u2026) aren\u2019t a group under addition though.\n Similarly groups can be thought of as a category with one object, with the additional requirement that every morphism is invertible, that there is always a   such that  .\n Sympy  has groups in it. We can make a wrapper of that functionality that looks like a categorical interface. To match our pattern of using python classes to represent categories, it is convenient to do the  slightly uncommon thing of making a class definition generator function  fp_group_cat. Every time you call this function, it makes a different class and a different category. I have only here wrapped the finitely presented group functionality, but there are also free groups, permutation  ...\n   We can simplify the power of a category in a different direction. Instead of having only 1 object, we\u2019ll have few arrows.\n A category with many objects but at most a single morphism between a pair of them obeys the axioms of a  preorder. In categorical terminology this is sometimes called a  thin category Any actual order like like   on numbers is also a preorder, but preorders have slightly weaker requirements. Here is a categorical representation of the ordering on integers (although really the same implementation will work for any python type that implements &lt;= and == )\n  An example of a partial order is the subset relationship, which we can represent using python sets. This is an important but perhaps confusing example. Haven \u2019t we already defined FinSet? Yes, but these are different categories. In FinSet, morphisms are functions. In SubSetCat a morphisms is the subset relationship (of which there can either be one or not one). They just plain are not the same thing even though there are sets in the mix for both. The situation is made even more confusing  ...\n  Preorders are related to directed acyclic graphs (DAG), the directed graphs that have no loops. If you give me a DAG, there is a preorder that is generated by that DAG. Exercise for the reader (AKA I\u2019m lazy): Can you turn a Networkx DAG into a category?\n  This is nice and all just to explain categories in terms of some perhaps more familiar concepts. It feels a little ho-hum to me. We are not getting really any benefit from the concept of a category from this post. However, the examples of monoids, groups and preorders are always something you should think about when presented when a new categorical concept, because it probably reduces to something more familiar in this case. In addition, mappings to/from these simple objects to more  ...\n The methods of computational group theory are intriguing. It seems like some of them should extend to category theory. See this book by RFC Walters for example  https://www.cambridge.org/core/books/categories-and-computer-science/203EBBEE29BEADB035C9DD80191E67B1 A very interesting book in other ways too. (Thanks to Evan Patterson for the tip)\n Next time I think we\u2019ll talk about finite categories and the finite Yoneda lemma.", "posttime": "2020-05-03 21:10:51", "tags": "python3,python,\u8303\u7574,category", "title": "Python3\u4e2d\u7684\u8ba1\u7b97\u8303\u7574\u7406\u8bba\uff1a\u4e48\u534a\u7fa4\u3001\u7fa4\u548c\u524d\u5e8f", "title_en": "Computational Category Theory in Python 3: Monoids, Groups, and Preorders", "transed": 1, "url": "http://www.philipzucker.com/computational-category-theory-in-python-3-monoids-groups-and-preorders/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["python3", "python", "\u8303\u7574", "category"]}, {"category": "", "categoryclass": "", "imagename": "dac5116b3828e0ef2169542510341b44.jpg", "infoid": 1000483, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u4e00\u540dIT\u4e13\u4e1a\u4eba\u58eb\u548c\u4fe1\u606f\u5b89\u5168\u7231\u597d\u8005\uff0c\u865a\u62df\u5316\u5373\u4f7f\u4e0d\u662f\u6784\u6210\u6211\u7684\u5de5\u4f5c\u6d41\u7684\u6700\u91cd\u8981\u7684\u8f6f\u4ef6\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\u8f6f\u4ef6\u4e4b\u4e00\u3002\n\u60f3\u8981\u5728\u4e0d\u7834\u574f\u5b9e\u9645\u8bbe\u7f6e\u7684\u60c5\u51b5\u4e0b\u5c1d\u8bd5\u5c16\u7aef\u8f6f\u4ef6\u6216\u64cd\u4f5c\u7cfb\u7edf\u66f4\u65b0\u5417\uff1f\u7ef4\u56fe\u5316\u3002\n\u9700\u8981\u590d\u5236\u95ee\u9898\u5417\uff1f\u865a\u62df\u5316\u6574\u4e2a\u8bbe\u7f6e\u3002(\u989d\u5916\u7684\u597d\u5904\uff1a\u5728VM\u4e0a\u590d\u5236\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u8bbe\u7f6e\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u7528\u4e00\u5343\u4e2a\u592a\u9633\u7684\u529b\u91cf\u6765\u6d4b\u8bd5\u5b83\u3002)\u3002\n\u5982\u679c\u4f60\u62c5\u5fc3\u81ea\u5df1\u7684\u6570\u636e\u548c\u7cfb\u7edf\u5b89\u5168\uff0c\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6bd4\u5982Qubes OS\u3002\u8fd9\u4e00\u5f00\u59cb\u53ef\u80fd\u4f1a\u9020\u6210\u4e0d\u7a33\u5b9a\uff0c\u4f46\u5f52\u6839\u7ed3\u5e95\uff0c\u8fd9\u8ba9\u4f60\u6539\u53d8\u4e86\u5bf9\u4e00\u4e9b\u65e5\u5e38\u4efb\u52a1\u7684\u770b\u6cd5\u3002\n\u957f\u8bdd\u77ed\u8bf4\uff0c\u6211\u7ecf\u5e38\u4f7f\u7528\u865a\u62df\u5316\u3002\u4f5c\u4e3ar/HomeLab\u7684\u4e00\u540d\u6210\u5458\uff0c\u6211\u7684\u5bb6\u5ead\u5b9e\u9a8c\u5ba4\u8bbe\u7f6e\u662f\u4f60\u80fd\u60f3\u8c61\u5230\u7684\u6700\u7ecf\u5178\u7684\u3002\u4e00\u4e9b\u8ba1\u7b97\u673a\u3001\u4ea4\u6362\u673a\u3001\u9632\u706b\u5899\u548c\u8fd0\u884cESXi\u7684Frankenstein\u670d\u52a1\u5668\uff0c\u8be5\u670d\u52a1\u5668\u6258\u7ba1\u4e86\u6211\u6240\u6709\u7684\u5b9e\u9a8c\u5ba4\u548c\u5d29\u6e83\u6d4b\u8bd5\u73af\u5883\u3002\n\u751f\u6d3b\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5de5\u4f5c\u6d41\u7a0b\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u8bbe\u7f6e\u4e5f\u662f\u5f3a\u5236\u6027\u7684\u89c4\u8303\u3002\u90a3\u53c8\u600e\u4e48\u6837\uff1f\u6211\u9700\u8981\u628a\u6211\u7684\u65e7\u865a\u62df\u5b9e\u9a8c\u5ba4\u6539\u9020\u6210\u7b14\u8bb0\u672c\u7535\u8111\u5927\u5c0f\u7684\u5b9e\u9a8c\u5ba4\u3002\n\u6211\u9700\u8981\u80fd\u591f\u8d70\u51fa\u5bb6\u95e8\u5de5\u4f5c\uff0c\u8fd9\u6837\u624d\u80fd\u628a\u5b83\u88c5\u8fdb\u80cc\u5305\u91cc\u3002\n\u4e92\u8054\u7f51\u8fde\u63a5\u4e0d\u4f1a\u662f\u6052\u5b9a\u7684\uff0c\u6240\u4ee5\u5fd8\u4e86\u6240\u6709\u7684\u8fdc\u7a0b\u8bbf\u95ee\u5427\uff0c\u6ca1\u6709\u5bb6\u5ead\u5b9e\u9a8c\u5ba4\u7684VPS\uff0c\u4e5f\u6ca1\u6709\u79df\u7528\u7684\u4e13\u7528\u670d\u52a1\u5668\u3002\n\u4e3a\u4ec0\u4e48\uff1f\u55ef\uff0c\u6211\u4e0d\u4f1a\u8bf4\u5f97\u592a\u8be6\u7ec6\u3002\u6211\u4f1a\u8ba9\u4f60\u628a\u6211\u60f3\u8c61\u6210\u67d0\u79cd\u79d8\u5bc6\u7279\u5de5\uff0c\u5c31\u50cf\u6280\u672f\u4eba\u5458\u8a79\u59c6\u65af\u00b7\u90a6\u5fb7\u2026\u2026\u3002\u6216\u8005\u53ea\u662f\u53e6\u4e00\u4e2a\u602a\u5f02\u7684\u4e66\u5446\u5b50\u559c\u6b22\u602a\u80ce\u3002\n\u56e0\u6b64\uff0c\u6211\u6539\u7528VMware Workstation Pro\u4f5c\u4e3a\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u3002\u4e3a\u4ec0\u4e48\uff1f\u55ef\uff0c\u8fd9\u9700\u8981\u53e6\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u6240\u4ee5\u6211\u4f1a\u628a\u5b83\u7559\u5230\u53e6\u4e00\u5929\u3002\n\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u8fd0\u884c\u7e41\u91cd\u7684\u865a\u62df\u5316\u5b9e\u9a8c\u5ba4(\u6765\u81ea\u7ecf\u5178\u5b9e\u9a8c\u5ba4)\u7684\u4e3b\u8981\u95ee\u9898\u4e4b\u4e00\u662f\uff0c\u60a8\u7684\u8ba1\u7b97\u673a\u6216\u4e3b\u673a\u5e76\u4e0d\u603b\u662f\u5904\u4e8e\u5f00\u673a\u72b6\u6001\uff01\n\u544a\u522b\u4f60\u559c\u6b22\u7684\u88d9\u5e26\u5173\u7cfb\u5de5\u4f5c\u3001\u65e5\u7a0b\u5b89\u6392\u7684\u4efb\u52a1\u7b49\u7b49\u3002\u56e0\u4e3a\uff0c\u5373\u4f7f\u6211\u4eec\u4e0d\u662f\u5b9a\u671f\u8fd0\u884c\u5b83\u4eec\uff0c\u800c\u662f\u5728\u5f15\u5bfc\u6216\u767b\u5f55\u65f6\u8bbe\u7f6e\u5b83\u4eec\uff0c\u8c01\u77e5\u9053\u5462\uff1f\u4e5f\u8bb8\u6211\u767b\u5f55\u662f\u4e3a\u4e86\u68c0\u7d22\u6587\u4ef6\u6216\u5176\u4ed6\u4e1c\u897f\uff0c\u4f46\u6ca1\u6709\u65f6\u95f4\u8fdb\u884c\u5347\u7ea7\u3002\n\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u8fd9\u5c06\u662f\u624b\u52a8\u542f\u52a8\uff0c\u4f46\u4e0d\u4f1a\u6ca1\u6709\u6700\u4f4e\u9650\u5ea6\u7684\u4f18\u5316\uff0c\u8fd9\u5c31\u662fAnsible\u3002\n\u5c06\u6211\u7684\u811a\u672c\u8f6c\u6362\u6210Ansible\u5267\u672c\uff0c\u4f7f\u6211\u53ef\u4ee5\u968f\u65f6\u5347\u7ea7\u591a\u4e2a\u7cfb\u7edf\uff0c\u800c\u65e0\u9700\u624b\u52a8\u5bf9\u6bcf\u4e2a\u7cfb\u7edf\u8fdb\u884c\u5347\u7ea7\u3002\n\u90a3\u4e48\uff0c\u95ee\u9898\u662f\u4ec0\u4e48\u5462\uff1f\u55ef\uff0c\u5c31\u50cf\u6211\u8bf4\u7684\uff0c\u6240\u6709\u7684\u865a\u62df\u673a\u90fd\u6ca1\u6709\u5168\u5929\u5019\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4ecd\u7136\u9700\u8981\u624b\u52a8\u64cd\u4f5c\uff1a\u9010\u4e2a\u542f\u52a8\u865a\u62df\u673a\uff0c\u7b49\u5f85\u5b83\u4eec\u5168\u90e8\u542f\u52a8\u5e76\u8fd0\u884c\uff0c\u7136\u540e\u542f\u52a8\u6211\u7684\u5347\u7ea7\u653b\u7565\u3002\n\u6211\u60f3\u8ba9Ansible\u80fd\u591f\u542f\u52a8\u548c\u505c\u6b62\u6211\u7684VM\uff0c\u8fd9\u5c06\u5141\u8bb8\u6211\u521b\u5efa\u4ee5\u4e0b\u653b\u7565\uff1a\n\u56e0\u6b64\uff0c\u9996\u5148\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u5524\u9192\u5170\u9b54\u672f\u5305\uff0c\u4f46\u6ca1\u6709\u8fd0\u6c14\u5728\u8fd9\u91cc\uff0c\u6ca1\u6709\u8bbe\u6cd5\u4f7f\u5b83\u5de5\u4f5c\uff0c\u6211\u6240\u6709\u7684Google-Fu\u5c1d\u8bd5\u5bfc\u81f410\u5e74\u524d\u7684\u7ebf\u7a0b\u6216\u5173\u4e8eESXi\u7684\u8bdd\u9898\u3002\n\u6211\u8003\u8651\u5728\u6211\u7684\u65b0\u8bbe\u7f6e\u4e2d\u4f7f\u7528ESXi\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f7f\u7528ESXi\u4e0evCenter\u914d\u5408\u4f7f\u7528\u6216\u4e0d\u4e0evCenter\u914d\u5408\u4f7f\u7528\u672c\u53ef\u4ee5\u5e2e\u52a9\u6211\u5b9e\u73b0\u5404\u79cd\u81ea\u52a8\u5316\u76ee\u7684\uff0c\u4f46\u5b83\u4e5f\u6709\u5f88\u591a\u7f3a\u70b9\uff1a\nWorkstation Pro\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0cESXi\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728ESXi\u4e0a\u4f7f\u7528vCenter\u6765\u89e3\u51b3\u3002\u4e0d\u8981\u8bef\u4f1a\u6211\u7684\u610f\u601d\uff0c\u6211\u559c\u6b22vCenter\uff0c\u5b83\u662fESXi\u4e4b\u4e0a\u7684\u4e00\u4e2a\u4ee4\u4eba\u60ca\u53f9\u7684\u8865\u5145(\u6211\u4eca\u5929\u592a\u559c\u6b22VMware\u4e86)\uff0c\u4f46\u662f\u8f6f\u4ef6\u6709\u76ee\u7684\u548c\u7528\u4f8b\u3002\n\u8fd9\u4e0d\u662f\u5b8c\u5168\u5b89\u88c5ESXi&amp\uff1bvCenter\u5c31\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\u3002\u6211\u751a\u81f3\u6ca1\u6709\u63d0\u5230vCenter\u7684RAM\u548cCPU\u9700\u6c42\u3002\n\u7b14\u8bb0\u672c\u7535\u8111\u542f\u52a8\u3001\u542f\u52a8Workstation Pro\u3001ESXi\u542f\u52a8\u3001vCenter\u542f\u52a8\u3001\u4f7f\u7528\u4ece\u6765\u81eavCenter\u7684\u5171\u4eab\u865a\u62df\u673a\u68c0\u7d22\u5230\u7684\u4fe1\u606f\u5237\u65b0Workstation Pro GUI\u3001\u865a\u62df\u673a\u542f\u52a8\u3002\n\u8fd9\u79cd\u8bbe\u7f6e\u662f\u4e0d\u53ef\u6301\u7eed\u7684\u3002\u5c31\u50cf\u6211\u524d\u9762\u8bf4\u7684\uff0c\u60f3\u8c61\u4e00\u4e0b\u8fd9\u4e00\u5207\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5feb\u901f\u6d4b\u8bd5\u6216\u67e5\u627eVM\uff01\n\u90a3\u4e48\uff0c\u56de\u5230\u4e3b\u9898\u4e0a\u6765\uff0c\u6211\u4eec\u8bf4\u5230\u54ea\u91cc\u4e86\uff1f\u662f\u7684\uff0cAnsible\uff0cWorkstation Pro&amp\uff1b\u6211\u65e0\u6cd5\u8ba9WOL\u4e0e\u865a\u62df\u673a\u4e00\u8d77\u5de5\u4f5c\u3002\n\u6211\u7684Github-Fu&amp\uff1bAnsible-Galaxy-Fu\u53ef\u80fd\u6ca1\u6709\u5207\u4e2d\u8981\u5bb3\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\u8fd8\u6ca1\u6709\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u9879\u76ee\u3002\n\u8fd9\u5c31\u662f\u6211\u51b3\u5b9a\u6210\u4e3a\u9996\u5e2d\u6267\u884c\u5b98\u7684\u65f6\u5019\uff0c\u4f3c\u4e4e\u6ca1\u6709\u4eba\u60f3\u8981\u4e5f\u4e0d\u9700\u8981\u5b83\uff0c\u6240\u4ee5\u6211\u4f1a\u5efa\u9020\u5b83\u3002\n\u867d\u7136\u6211\u53ea\u9700\u8981\u4e0e\u7535\u6e90\u72b6\u6001\u76f8\u5173\u7684\u8bf7\u6c42\uff0c\u4f46\u6211\u51b3\u5b9a\u5168\u529b\u4ee5\u8d74\uff0c\u5176\u4ed6\u7684\u4e5f\u8981\u505a\u3002\u8fd9\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u76ee\u7684\uff1a\n\u4e5f\u8bb8\u6211\u5c06\u6765\u4f1a\u9700\u8981\u5176\u4e2d\u7684\u4e00\u4e9b\uff0c\u540c\u65f6\u4e0eAnsible&amp\uff1b\u6211\u7684\u65b0\u5b9e\u9a8c\u5ba4\u76f8\u5904\u5f97\u66f4\u878d\u6d3d\u3002\n\u8be5\u4ee3\u7801\u4ecd\u7136\u662f\u9ed1\u5ba2\u7684\uff0c\u6b63\u5728\u4e0eYandere Simulator\u7684\u7ade\u4e89\uff0c\u4f46\u5b83\u662f\u6709\u6548\u7684\u3002\u6211\u73b0\u5728\u53ef\u4ee5\u4ece\u6211\u7684\u884c\u52a8\u624b\u518c\u542f\u52a8\u865a\u62df\u673a\u4e86\uff01\n\u8fd8\u6709\u5de5\u4f5c\u8981\u505a\uff0c\u56e0\u4e3a\u6211\u4ecd\u7136\u5728\u5b66\u4e60\u5982\u4f55\u4e0eAnsible\u7684\u6a21\u5757\u548c\u7cfb\u7edf\u4ea4\u4e92\uff0c\u56e0\u6b64\uff0c\u9664\u4e86\u4ee3\u7801\u6298\u5c04\u5668\u548c\u4f18\u5316\u6574\u4e2a&#34\uff1b\u8fd4\u56de\u7684\u4fe1\u606f&#34\uff1b\u4e3b\u9898\u662f\u4e00\u4e2a\u5f88\u5927\u7684WIP\u3002\n\u53e6\u5916\uff0c\u6211\u60f3\u8ba9API\u7684\u4f7f\u7528\u7387\u66f4\u9ad8\u4e00\u70b9\u2026\u3002\u4eba\u7c7b\u8bc1\u636e\uff1f\u5b9e\u9645\u4e0a\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u963b\u6b62\u60a8\u65ad\u5f00\u6216\u5220\u9664\u8fd0\u884cAnsible\u7684\u865a\u62df\u673a\u7684\u7f51\u7edc\u9002\u914d\u5668\u3002\n\u53d8\u91cf\u5b9a\u4e49\u4e5f\u662f\u5982\u6b64\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u865a\u62df\u673a\u8bf7\u6c42\u90fd\u4f7f\u7528\u865a\u62df\u673aID\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u5bb9\u6613\u77e5\u9053\u7684\uff0c\u4e5f\u4e0d\u5bb9\u6613\u8bb0\u4f4f", "note_en": "As an IT professional and information security enthusiast, virtualization is one of the most important, if not the most, piece of software composing my workflow.\n  Want to try bleeding edge software or OS updates without broking your actual setup ? Vitualize.\n    Need to replicate an issue ? Virtualize the whole setup. (Bonus: Replicate real life setup on VMs so you can pentest it with the force of a thousand suns.)\n  And if you are concerned about your own data &amp; system security you might come across alternatives operating systems like  Qubes OS. Which at first maybe be destabilizing but in fine made you change your vision of some day to day tasks.\n  Long story short, I use virtualization, a lot. And as a fellow  r/HomeLab member my homelab setup was as classic as you could imagine. Somes computers, switchs, firewalls, and a frankenstein server running ESXi which was hosting all my labs and crashtests environnements.\n Life happens, workflow change, setup&#39;s mandatory specifications too. So, what ? I needed to convert my old virtual lab into a laptop-sized one.\n   I needed to be able to work outside of my house so it need to fit into a backpack.\n  Internet connection would not be constant so forget about all sort of remoting access, no homelab VPS nor rented dedicated server.\n Why? Well, I would not go into details. I&#39;ll let you imagine that I&#39;m some kind of secret agent like a techie James Bond... or just another weird-nerd like Freakazoid.\n  So I switched to VMware Workstation Pro as hypervisor. Why? Well, this would need another blog post so I will save it for another day.\n One of the mains concerns about running heavy virtualization lab on a laptop, coming from a classic lab, is the fact that your machines aren&#39;t turned on all the time nor the host !\n Say goodbye to your loved cronjobs, schreduled tasks and so on. Because, even if instead of running them at regular intervals we set them up like on boot or logon, who knows ? Maybe I&#39;m login on to retrieve a file or something and dont have time for your upgrades.\n From now this will be launched manually but not without minimal optimisation, here come Ansible.\n  Converting my scripts into ansible playbooks allow me to upgrade multiple systems at once, whenever I want but without doing it manually on each one.\n So what&#39;s the catch ? Well, like I said, all the VMs aren&#39;t up &amp; running 24/7 so there is still manual work here: Boot the VMs one by one, wait for them all to be up and running, then launch my upgrading playbook.\n I wanted to give Ansible the ability to start and stop my VMs, this would allow me create playbooks like:\n   So first I have been looking into WakeOnLan Magic Packet but no luck here, didn&#39;t manage to made it work, all my Google-Fu attempts resulted in 10 years old threads or topics about ESXi.\n  I thought about using ESXi in my new setup. In fact, using ESXi with or without vCenter would have helped me for various automations purposes, but it also would have this lot of downsides:\n  Workstation Pro can do it, ESXi can&#39;t. This could be fixed by using vCenter on top of ESXi. Don&#39;t get me wrong I love vCenter, it&#39;s an amazing addition on top of ESXi (I&#39;m giving too much love to VMware today) but softwares have purposes and use cases.\n This isn&#39;t one where a full ESXi &amp; vCenter installation is the answer. And I didn&#39;t even mentionned about vCenter&#39;s RAM &amp; CPU appetite.\n   Laptop booting up, launching Workstation Pro, ESXi booting up, vCenter booting up, refresh Workstation Pro GUI with retrieved infos from shared VMs coming from vCenter, VM booting up.\n This setup is not sustainable. Like i said earlier, imagine all this just to a rapid test or lookup into a VM !\n  So, back to the main topic, where were we ? Yeah Ansible, Workstation Pro &amp; my inability to make WOL working with the VMs.\n   My Github-Fu &amp; Ansible-Galaxy-Fu may not be on point but so far no project are on that topic.\n    This is when I decided to become CEO of &#34;Nobody seems to want nor need it so I will build it&#34;\n      While I only needed the power states related requests I decided to go all in and do the others too. This fulfill multiples purposes:\n  Maybe I would need some of them in the future while getting more confortable with Ansible &amp; my new lab.\n    The code is still hackish and is competing with  Yandere Simulator&#39;s one but it works. I now can boot the VMs from my playbooks !\n  There is still work to do as I am still learning about how modules and systems interacts with Ansible so, in addition to code refractor and optimisation the whole &#34;returned informations&#34; topic is a big WIP.\n  Also, I would like to make the API usage a little more... human proof ? Actually nothing refrain you from disconnecting or delete the network adapter of the VM where Ansible run from.\n Variable definition too, nearly all VM requests use the VM ID, which we don&#39;t know easily nor retain. So if I could find some ways to simplify or automate this it would be great. But other problems are in our way here.\n Renaming a VM is only effective on the GUI, folder name, files names etc, don&#39;t change. So I&#39;m searching a way to do it.\n  VMware Fusion Pro&#39;s REST API seems to be the same as Workstation Pro&#39;s one so porting it would only need to rewrite the powershell code into python, really trivial.\n I started working on it but my actual environnement use a windows host so fixing Workstation Pro&#39;s one is my primary focus.\n However you can send me a MBP 16&#34; 64GB to make me switch if you want.", "posttime": "2020-05-03 21:09:55", "tags": "vmware,\u5f00\u53d1,developing,ansible", "title": "\u6211\u6700\u7ec8\u662f\u5982\u4f55\u5f00\u53d1VMware Workstation Pro Ansible\u6a21\u5757\u7684", "title_en": "How I ended up developing a VMware Workstation Pro Ansible module", "transed": 1, "url": "https://magnier.io/developing-vmware-workstation-pro-ansible-module/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["vmware", "\u5f00\u53d1", "ansible"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000482, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd0\u884c\u811a\u672c\u540e\uff0c\u60a8\u5c06\u770b\u5230\u4e00\u4e2aROFI\u83dc\u5355\u3002\u5982\u679c\u60a8\u7684Notes\u6587\u4ef6\u5939\u662f\u7a7a\u7684\uff0c\u5b83\u5c06\u53ea\u663e\u793a\u4e00\u4e2a\u63d0\u793a\u7b26\u3002\u8f93\u5165\u65b0\u4fbf\u7b3a\u7684\u6807\u9898\u3002\n\u5982\u679c\u60a8\u7684\u8f93\u5165\u5bfc\u81f4\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u4ee5\u60a8\u7684\u8f93\u5165\u4f5c\u4e3a\u6807\u6ce8\u6807\u9898\u7684\u65b0\u6587\u4ef6\uff0c\u5e76\u76f4\u63a5\u6253\u5f00\u8be5\u6587\u4ef6\u8fdb\u884c\u7f16\u8f91\u3002\n\u5982\u679c\u6587\u4ef6\u5939\u4e2d\u6709\u6587\u4ef6\uff0c\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u5b83\u4ee5\u5177\u6709\u66f4\u591a\u9009\u9879\u3002\n\u6253\u5f00\u6587\u4ef6\u4ee5\u8fdb\u884c\u4e30\u5bcc\u7684\u964d\u4ef7\u67e5\u770b\uff0c\u4f8b\u5982\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00GitHub\u4e0a\u7684\u6587\u4ef6\u3002\nmkdir.local/note#\u6216\u4efb\u4f55\u76ee\u5f55\uff0c\u81ea\u5b9a\u4e49\u4f4d\u7f6e\u9700\u8981\u8bbe\u7f6e$NOTES_DIR\u53d8\u91cfcd.local/notesgit init#\u521d\u59cb\u5316\u60a8\u7684git\u5b58\u50a8\u5e93ygit\u8fdc\u7a0b\u6dfb\u52a0\u539f\u70b9.#\u5e76\u6dfb\u52a0\u8fdc\u7a0b\u3002\n\u60a8\u53ef\u80fd\u8fd8\u60f3\u8fdb\u884c\u521d\u59cb\u63d0\u4ea4\u5e76\u63a8\u9001\u3002\u5f53\u63a8\u9001\u65f6\uff0cNotes\u811a\u672c\u4e0d\u4f1a\u8fd9\u6837\u505a--set-upstream\u3002\n\u63a5\u4e0b\u6765\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u70ed\u952e\u6216\u684c\u9762\u6761\u76ee\u6765\u8fd0\u884cnotes.sh\u811a\u672c\u3002\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u51e0\u4e2a\u53d8\u91cf\u3002\n\u7f16\u8f91\u8981\u7528\u6765\u7f16\u8f91\u6587\u4ef6\u7684\u7f16\u8f91\u5668\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528VIM\u4e4b\u7c7b\u7684\u7ec8\u7aef\u7f16\u8f91\u5668\uff0c\u8bf7\u4f7f\u7528\u4e0b\u4e00\u4e2a\u53d8\u91cf\u3002\nTERMINAL_EDITOR\u5982\u679c\u4e0d\u662f0\uff0c\u5b83\u5c06\u9996\u5148\u5728\u7ec8\u7aef\u4e2d\u6253\u5f00\u7f16\u8f91\u5668", "note_en": "After running the script, you will see a  rofi menu.If your notes folder is empty, it will display nothing but a prompt. Enter a title for your new note\n If your input leads to a unique filename, it will create a new file with your input as the markdown titleand open it directly for editing\n If there are files in the folder, you can also select it to have more options\n open the file for rich markdown viewing, such as opening the file on github in browser\n     mkdir .local/notes   # or any directory, custom locations require setting the $NOTES_DIR variable cd .local/notesgit init   # Initialise your git repositorygit remote add origin ...   # And add a remote\n You may also want to make an initial commit and push that.The notes script wont do  --set-upstream when pushing\n Next, set up a hotkey or a desktop entry to run the  notes.sh script.There are a few variables that you can set.\n EDITOR The editor to edit the file with. If you&#39;re using a terminal editor like vim, use this next variable\n TERMINAL_EDITOR If this is not 0, it will open your editor in a terminal first", "posttime": "2020-05-03 21:09:49", "tags": "rofi,note,notes", "title": "\u4f7f\u7528ROFI\u548cGit\u7684\u53ef\u914d\u7f6e\u7b14\u8bb0\u5de5\u5177", "title_en": "A configurable note taking tool using rofi and Git", "transed": 1, "url": "https://github.com/conradludgate/notes_public", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["rofi", "note", "notes"]}, {"category": "", "categoryclass": "", "imagename": "f7d921dcbe60dc1e9675fdc6bda58704.jpg", "infoid": 1000481, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b83\u6bcf\u6b21\u90fd\u4f1a\u628a\u5f00/\u5173\u7684\u6570\u636e\u53d1\u9001\u7ed9\u5b83\u7684\u5236\u9020\u8005\u5417\uff1f\u5728\u90a3\u91cc\u53d1\u751f\u4e86\u4e00\u4e9b\u597d\u4e8b\u60c5\u3002\u8fd9\u5c31\u50cf\u4e00\u4e2a\u89e6\u53d1\u56fe\uff0c\u4f60\u5e94\u8be5\u6bcf\u6b21\u90fd\u7ed9OralB\u7684\u6570\u636e\u9965\u6e34\u7684\u8425\u9500\u4eba\u5458\u90ae\u5bc4\u4e00\u53ea\u5c0f\u732b\u6b7b\u6389\u3002\u5e0c\u671b\u4f60\u4e5f\u80fd\u5728\u4f60\u7684\u8bbe\u7f6e\u4e0a\u8fd0\u884c\u3002", "note_en": "It&#39;s sending that on/off data to it&#39;s makers every time  ?Some good   going on there...  It&#39;s like a trigger graph, you should mail &#34;a kitten dies&#34; every time to OralB&#39;s datahungry marketers.Hope you are running   as well on your   setup.", "posttime": "2020-05-03 20:48:16", "tags": "\u84dd\u7259,controlled,\u6570\u636e", "title": "\u7531OralB\u84dd\u7259\u7259\u5237\u63a7\u5236\u7684\u7167\u660e", "title_en": "Lighting controlled by a OralB Bluetooth toothbrush", "transed": 1, "url": "https://twitter.com/imduffy15/status/1256731450231132160", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u84dd\u7259", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "c95e2edb5b3426e7742480244eea404b.png", "infoid": 1000478, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u90a3\u4ee5\u540e\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u3002\u5f88\u591a\u3002\u6211\u572815\u5929\u5185\u4e3aProduct Hunt\u7684Maker Fest\u63a8\u51fa\u4e86\u4e00\u6b3e\u602a\u5f02\u7684Zoom\u98ce\u683c\u7684\u89c6\u9891\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u83b7\u5f97\u4e86Substack\u7684\u7f16\u5267\u8d44\u52a9\u3002\u53e6\u5916\uff0c\u6211\u660e\u5929\u5c3121\u5c81\u4e86(\ud83e\udd73)\u3002\n\u4f46\u662f\uff0c\u5728\u8fd9\u4e00\u5207\u4e2d\uff0c\u6211\u4e00\u76f4\u5728\u52aa\u529b\u4f7f\u7b2c20\u671f\u53d8\u5f97\u975e\u5e38\u6709\u7528\u3002\n\u4e0d\u4e45\u524d\uff0c\u4e00\u4f4d\u8bfb\u8005\u8ba9\u6211\u505a\u4e00\u671f\u5173\u4e8e\u8bbe\u8ba1\u6570\u636e\u9a71\u52a8\u5e94\u7528\u7a0b\u5e8f\u7684\u4e13\u4e1a\u6280\u5de7\u3002\u6240\u4ee5\u6211\u60f3\uff0c\u201c\u4e3a\u4ec0\u4e48\u4e0d\u627e\u51fa\u5c3d\u53ef\u80fd\u591a\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u7136\u540e\u628a\u5b83\u4eec\u5199\u4e0b\u6765\u5462\uff1f\u201d\n\u60a8\u65e5\u5e38\u4f7f\u7528\u7684\u754c\u9762\u8bbe\u8ba1\u5f97\u76f8\u5f53\u6d41\u7545\u3002\u5e72\u51c0\u3001\u5bbd\u655e\u3001\u7b80\u7ea6\u3002\u5b83\u4eec\u53ef\u4ee5\u5e2e\u52a9\u60a8\u53d1\u9001\u6587\u672c\u3001\u6d41\u5f0f\u64ad\u653e\u89c6\u9891\uff0c\u4ee5\u53ca\u8f7b\u677e\u6eda\u52a8\u60a8\u7684\u65b0\u95fb\u6e90\u3002\n\u5b83\u4eec\u662f\u4e3a\u6027\u80fd\u800c\u5236\u9020\u7684\uff0c\u66f4\u6ce8\u91cd\u529f\u80fd\u800c\u4e0d\u662f\u5f62\u5f0f\u3002\u5b83\u4eec\u4f7f\u60a8\u80fd\u591f\u5206\u6790\u4e1a\u52a1\u8d39\u7528\u3001\u8ddf\u8e2a\u7269\u6d41\u5e76\u76d1\u63a7\u5173\u952e\u6307\u6807\u3002\n\u60a8\u7684\u7528\u6237(\u5f88\u53ef\u80fd\u662f\u9ad8\u7ba1\u3001\u7ecf\u7406\u548c\u5206\u6790\u5e08)\u9700\u8981\u590d\u6742\u6570\u636e\u4e2d\u7684\u7279\u5b9a\u4fe1\u606f\u624d\u80fd\u5b8c\u6210\u5de5\u4f5c\u3002\n\u5e76\u53bb\u9664\u5197\u4f59\u6570\u636e\u3002\u901a\u5e38\uff0c\u4f1a\u663e\u793a\u76f8\u540c\u7684\u6570\u636e\uff0c\u4f46\u4f1a\u6709\u591a\u4e2a\u53d8\u4f53\u3002\n\u5728\u6709\u610f\u4e49\u7684\u5730\u65b9\u7ec4\u5408\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5c06\u540d\u5b57\u548c\u59d3\u6c0f\u5b57\u6bb5\u8f6c\u6362\u4e3a\u5355\u4e2a\u201c\u59d3\u540d\u201d\u5b57\u6bb5\u3002\n\u51cf\u5c11\u663e\u793a\u7ed9\u7528\u6237\u7684\u6570\u636e\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u8c03\u6574\u9875\u9762\u5f62\u72b6\u3002\n\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5f00\u59cb\uff0c\u5c06\u5e2e\u52a9\u60a8\u4ed4\u7ec6\u8003\u8651\u6570\u636e\u4e2d\u7684\u5173\u7cfb\uff0c\u5e76\u575a\u6301\u89e3\u51b3\u60a8\u7528\u6237\u7684\u95ee\u9898\u3002\n\ud83d\udcccBasecamp\u5199\u4e86\u4e00\u7bc7\u975e\u5e38\u56fa\u6267\u5df1\u89c1\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f60\u53ea\u9700\u8981\u8fd9\u4e09\u79cd\u56fe\u8868\u3002\n\ud83d\udd28\u4e00\u4e2a\u5f88\u68d2\u7684\u53ef\u89c6\u5316\u6570\u636e\u5de5\u5177\u662fTableau--\u4f46\u662f\u5b83\u975e\u5e38\u6602\u8d35\u3002\n\ud83d\udcda\u5173\u4e8e\u53ef\u89c6\u5316\u6570\u636e\u7684\u4e00\u672c\u597d\u4e66\u662fDona Wong\u7684\u201c\u534e\u5c14\u8857\u65e5\u62a5\uff1a\u4fe1\u606f\u56fe\u5f62\u6307\u5357\u201d--\u8fd9\u672c\u4e66\u5e76\u4e0d\u8d35\u3002\n\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u6307\u5b57\u4f53\u7c7b\u578b\u3002\u5b57\u4f53\u7c97\u7ec6\u3001\u5b57\u8ddd\u548c\u95f4\u8ddd\u4f1a\u5f71\u54cd\u7528\u6237\u4ece\u754c\u9762\u5feb\u901f\u8bfb\u53d6\u548c\u89e3\u91ca\u6570\u636e\u7684\u80fd\u529b\u3002\n\u4f7f\u7528\u4fdd\u5b88\u7684\u8c03\u8272\u677f\u3002\u4e3a\u91cd\u8981\u6570\u636e\u4fdd\u7559\u9192\u76ee\u7684\u989c\u8272\uff0c\u5982\u9519\u8bef\u6d88\u606f(\u901a\u5e38\u4e3a\u7ea2\u8272)\u3001\u5173\u952e\u6307\u6807\u6216\u94fe\u63a5\u6587\u672c\u3002\n\ud83d\udccc\u5982\u679c\u4f60\u8fd8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u9009\u62e9\u6b63\u786e\u7684\u8c03\u8272\u677f\u6765\u53ef\u89c6\u5316\u6570\u636e\u7684\u4fe1\u606f\uff0c\u6211\u63a8\u8350\u8fd9\u7bc7\u7531Invision\u64b0\u5199\u7684\u6587\u7ae0\u3002\n\u5c3d\u91cf\u51cf\u5c11\u201c\u5bb6\u5177\u201d(\u5373\u5c3a\u5b50\u3001\u65b9\u6846\u3001\u5706\u70b9\u548c\u5176\u4ed6\u89c6\u89c9\u5bfc\u8f68)\u3002\n\u5f53\u589e\u52a0\u754c\u9762\u7684\u5bc6\u5ea6\u65f6\uff0c\u8981\u8003\u8651\u54ea\u4e9b\u5143\u7d20\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u54ea\u4e9b\u5143\u7d20\u66f4\u7b26\u5408\u7f8e\u5b66\u8981\u6c42\u3002\n\u5bc6\u5ea6\u589e\u52a0\u610f\u5473\u7740\u5c4f\u5e55\u4e0a\u4f1a\u663e\u793a\u66f4\u591a\u5185\u5bb9\u3002\u5728\u5904\u7406\u5217\u8868\u3001\u8868\u683c\u548c\u957f\u8868\u5355\u65f6\uff0c\u589e\u52a0\u7684\u5bc6\u5ea6\u4f7f\u4fe1\u606f\u66f4\u6613\u4e8e\u626b\u63cf\u3001\u67e5\u770b\u548c\u6bd4\u8f83\u3002\n\u4e0d\u8981\u589e\u52a0\u63d0\u9192\u7528\u6237\u66f4\u6539\u7684\u7ec4\u4ef6\u7684\u5bc6\u5ea6\uff0c\u4f8b\u5982\u5feb\u6377\u680f\u6216\u5bf9\u8bdd\u6846\u3002\u589e\u52a0\u8b66\u62a5\u7684\u5bc6\u5ea6\u4f1a\u964d\u4f4e\u5b83\u4eec\u7684\u53ef\u8bfb\u6027\uff0c\u4ece\u800c\u964d\u4f4e\u5438\u5f15\u7528\u6237\u6ce8\u610f\u529b\u7684\u6548\u679c\u3002\n\u540c\u6837\uff0c\u4e0d\u8981\u589e\u52a0\u6d89\u53ca\u91cd\u70b9\u4efb\u52a1\u7684\u7ec4\u4ef6\u5bc6\u5ea6\uff0c\u5982\u4e0b\u62c9\u83dc\u5355\u548c\u65e5\u671f\u9009\u62e9\u5668\u3002\u5bc6\u5ea6\u7684\u589e\u52a0\u9650\u5236\u4e86\u53ef\u70b9\u51fb\u7684\u7a7a\u95f4\uff0c\u4ece\u800c\u964d\u4f4e\u4e86\u53ef\u7528\u6027\u3002\n\u5728\u5904\u7406\u5927\u578b\u6570\u636e\u96c6\u65f6\uff0c\u6700\u597d\u5141\u8bb8\u7528\u6237\u5c06\u8be5\u6570\u636e\u5bfc\u51fa\u5230\u53e6\u4e00\u4e2a\u53ef\u4ee5\u66f4\u597d\u5730\u4e0e\u5176\u4ea4\u4e92\u7684\u5de5\u5177\u3002\n\u4f7f\u60a8\u7684\u7528\u6237\u80fd\u591f\u901a\u8fc7XML\u3001XLS\u3001JSON\u6216CSV\u5bfc\u51fa\u4ed6\u4eec\u6b63\u5728\u67e5\u770b\u7684\u6570\u636e\u3002\n\u60a8\u8fd8\u53ef\u4ee5\u505a\u7684\u4e00\u4ef6\u5f88\u9177\u7684\u4e8b\u60c5\u662f\u5c3d\u53ef\u80fd\u591a\u5730\u663e\u793a\u6570\u636e\uff0c\u5982\u679c\u7528\u6237\u60f3\u8981\u67e5\u770b\u66f4\u591a\u6570\u636e\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ef\u4ee5\u5bfc\u51fa\u60a8\u663e\u793a\u7684\u6570\u636e\u4ee5\u53ca\u60a8\u65e0\u6cd5\u653e\u5165\u5c4f\u5e55\u7684\u66f4\u591a\u6570\u636e\u3002\n\u9664\u975e\u4f60\u5df2\u7ecf\u5b8c\u5168\u6392\u9664\u4e86\u754c\u9762\u4e2d\u57fa\u4e8e\u89e6\u6478\u7684\u4ea4\u4e92\uff0c\u5426\u5219\u522b\u5fd8\u4e86\u89e6\u6478\u76ee\u6807\u7684\u6700\u5c0f\u5c3a\u5bf8\u3002\n\ud83d\udccc\u8c37\u6b4c\u7684\u6750\u6599\u8bbe\u8ba1\u6587\u6863\u6709\u5173\u4e8e\u89e6\u6478\u76ee\u6807\u7684\u5f88\u597d\u7684\u6307\u5357\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\n\ud83d\udccc\u4ed6\u4eec\u8fd8\u4e3a\u63d0\u9ad8\u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u7684\u5bc6\u5ea6\u5236\u5b9a\u4e86\u65b0\u7684\u8bbe\u8ba1\u6807\u51c6\u3002\u5173\u4e8e\u5bc6\u5ea6\u5982\u4f55\u5f71\u54cd\u60a8\u7684\u754c\u9762\uff0c\u4ed6\u4eec\u6709\u5f88\u597d\u7684\u63d0\u793a\u548c\u5b9e\u9645\u793a\u4f8b\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u65b9\u9762\u7684\u5185\u5bb9\u3002\n\u5c06\u770b\u4f3c\u65e0\u7528\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6709\u7528\u6570\u636e\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u6587\u672c\u51c6\u786e\u5730\u4f20\u8fbe\u7528\u6237\u60f3\u77e5\u9053\u7684\u4fe1\u606f\u3002\n\u51a0\u72b6\u75c5\u6bd2\u8ffd\u8e2a\u5668\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u7279\u522b\u662f\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e0c\u671b\u4f18\u5148\u5904\u7406\u53ef\u64cd\u4f5c\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u6570\u636e\u91cf\u3002\n\u95ee\u95ee\u81ea\u5df1\uff0c\u201c\u8fd9\u5bf9\u7528\u6237\u5b8c\u6210\u4ed6\u4eec\u7684\u5de5\u4f5c\u91cd\u8981\u5417\uff1f\u201d\n\ud83d\udccc\u6211\u4f7f\u7528\u4e86\u5f88\u591a\u8d44\u6e90\u6765\u6574\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u6700\u6709\u7528\u7684\u4e24\u4e2a\u8d44\u6e90\u662f\uff1a\n\ud83d\udc26\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u8fd9\u4e00\u671f\u3002\u5982\u679c\u4f60\u80fd\u5bf9\u8fd9\u6761\u63a8\u7279\u53d1\u5e16\u8868\u793a\u4e00\u70b9\u7231\u610f\uff0c\u6211\u4f1a\u5f88\u611f\u6fc0\u7684\u3002\n\ud83d\udc4b\u4e5f\u662f\uff0c\u6765\u7535\u62a5\u7fa4\u804a\u91cc\u6253\u4e2a\u62db\u547c\u5427\u3002\u6211\u79f0\u4e4b\u4e3a\u201c\u4ea7\u54c1\u7aa5\u63a2\u201d\nPS.\u3002\u6211\u521a\u521a\u610f\u8bc6\u5230\u6211\u8981\u5728\u621120\u5c81\u7684\u6700\u540e\u4e00\u5929\u53d1\u884c\u7b2c20\u671f(\ud83e\udd2f)\u3002\u53e6\u5916\uff0c\u6211\u4e5f\u4e0d\u671f\u5f85b\u65e5\u613f\u671b\uff0c\u4f46\u662f\uff0c\u5443\uff0c\u5982\u679c\u4f60\u60f3\u7684\u8bdd\u4f60\u53ef\u4ee5(\ud83d\ude09)\u3002", "note_en": "A lot\u2019s happened since then. A good lot. I  launched a weird Zoom-like video app in 15 days for  Product Hunt\u2019s Maker Fest and I received a  writer\u2019s grant from Substack. Plus, I turn 21 tomorrow (\ud83e\udd73).\n But, within all this, I\u2019ve been working hard to make issue #20 supremely useful.\n A while back, a reader asked me to do an issue with some pro tips for designing data-driven apps. So I thought, \u201cwhy not find as many best practices as I can and write about those?\u201d\n        The interfaces you use daily are designed to be fairly frictionless. Clean, spacious, minimal. They help you send texts, stream videos, and mindlessly scroll through your newsfeeds.\n       They\u2019re made for performance, favoring function over form. They enable you to analyze business expenses, track logistics, and monitor key metrics.\n         Your users (most likely executives, managers, and analysts) will need specific information from complex data in order to do their jobs.\n           And get rid of redundant data. Often, the same data is shown but in multiple variations.\n Combine elements where it makes sense. For example, turning first and last name fields into a single \u201cname\u201d field.\n   Another way to reduce the data shown to the user is to  shape the page.\n          Starting this way will help you think through the relationships in the data and stick to solving your user&#39;s problems.\n     \ud83d\udccc  Basecamp wrote a very opinionated  blog post on why you only need these three kinds of charts.\n \ud83d\udd28 A great tool for visualizing data is  Tableau \u2014but it\u2019s uber expensive.\n \ud83d\udcda A great book on visualizing data is  \u201cThe Wall Street Journal: Guide to information Graphics\u201d by Dona Wong \u2014which is  not uber expensive.\n   That don\u2019t simply mean font types. Font weight,  kerning, and spacing impact a user\u2019s ability to quickly read and interpret data from an interface.\n        Use a conservative color palette. Save eye-catching colors for important data \u2014like error messages (usually red), key metrics, or link text.\n   \ud83d\udccc If you still want more info on choosing the right color palettes to visualize data, I recommend  this article by Invision.\n    Keep \u201cfurniture\u201d to a minimum (ie rules, boxes, dots, and other visual guide-rails)\n   When increasing density in your interface, think about which elements are essential and which are more for aesthetic.\n   Increased density means more content on-screen. When working with lists, tables, and long forms added density makes information easier to scan, view and compare.\n      Don\u2019t increase density on components that alert users of changes, such as  snackbars or dialogs. Increasing the density of alerts makes them less readable and less effective at attracting user attention.\n Similarly, don\u2019t increase density of components that involve focused tasks, such as dropdown menus and date pickers. The increased density reduces usability by limiting tappable space.\n     When dealing with large data sets, it may be best to allow users to export that data to another tool where they can interact with it better.\n Give your users the ability to export the data they\u2019re looking at via XML, XLS, JSON, or CSV.\n One cool thing you can also do is display as much data as you can and if the user wants to see more data then they can export the data you display  plus more data that you couldn\u2019t fit into the screen.\n   Unless you\u2019ve completely ruled out touch-based interactions from your interface, don\u2019t forget the minimum sizes for touch targets.\n   \ud83d\udccc Google\u2019s Material Design docs has good guidelines on touch targets that you can find  here.\n \ud83d\udccc They\u2019ve also laid out new design standards for increased density in enterprise apps. They have great tips and practical examples on how density affects your interface. You can read more about that  here.\n  One way to turn seemingly  useless data into  useful data is to use text to communicate exactly what the user wants to know.\n COVID-19 trackers are a good example. With these in particular, you want to prioritize  actionable data over  volume of data.\n        Ask yourself, \u201c Is this important for the user to get their job done?\u201d\n        \ud83d\udccc I used many resources to put this issue together but the two most useful ones were:\n    \ud83d\udc26 I hope you enjoyed this issue. If you could show some love to this tweet thread, I\u2019d really appreciate it.\n  \ud83d\udc4b Also, come say hello in the  Telegram group chat. I call it \u201cProduct Peeps.\u201d\n    PS. I just realized I\u2019m releasing issue #20 on the last day I\u2019ll ever 20 years old (\ud83e\udd2f). Also, not expecting b-day wishes but, uh, you can if you want (\ud83d\ude09).", "posttime": "2020-05-03 20:47:21", "tags": "\u5bc6\u96c6\u578b,design,\u6570\u636e,data", "title": "\u9488\u5bf9\u6570\u636e\u5bc6\u96c6\u578b\u754c\u9762\u7684UX Design Pro\u63d0\u793a", "title_en": "UX Design Pro Tips for Data-Intensive Interfaces", "transed": 1, "url": "https://theproductperson.substack.com/p/-the-product-person-20-ux-design?r=2j20m&utm_campaign=post&utm_medium=web&utm_source=copy", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5bc6\u96c6\u578b", "design", "\u6570\u636e", "data"]}]