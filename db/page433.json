[{"category": "", "categoryclass": "", "imagename": "e0e98d1ec6d9a6744f8a5634fbd56511.png", "infoid": 1000250, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728Erlang\u4e2d\uff0c\u5f88\u5bb9\u6613\u6784\u5efa\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u4f4d\u4e32\u5e76\u5339\u914d\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002\u6211\u9047\u5230\u4e86Mitchell Perilstein\u4e0eErlang\u5728NTP\u65b9\u9762\u7684\u51fa\u8272\u5de5\u4f5c\uff0c\u6211\u60f3\u6211\u8981\u7528\u8fd9\u4e2a\u6765\u89e3\u91ca\u4e00\u4e0b\u4f4d\u4e32\u548c\u4e8c\u8fdb\u5236\u5728Erlang\u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u4f4d\u4e32\u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u4f4d\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u4f4d\u6570\u4e0d\u9700\u8981\u88ab8\u6574\u9664\u3002\n\u6bcf\u4e2a\u5143\u7d20\u6307\u5b9a\u4f4d\u4e32\u7684\u67d0\u4e00\u6bb5\u3002\u6bb5\u662f\u4e8c\u8fdb\u5236\u7684\u4e00\u7ec4\u8fde\u7eed\u4f4d(\u4e0d\u4e00\u5b9a\u5728\u5b57\u8282\u8fb9\u754c\u4e0a)\u3002\n\u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8fd9\u91cc\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u4e3a\u6b64\uff0c\u6709\u5fc5\u8981\u4e86\u89e3\u6574\u4e2a\u8bed\u6cd5\u3002\n\u8fd9\u610f\u5473\u7740\u5728\u5b9e\u9645\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u75280\u4f5c\u4e3a\u503c\uff0c2\u4f5c\u4e3a\u5927\u5c0f(2\u4f4d)\uff0c4\u4f5c\u4e3a\u503c\uff0c3\u4f4d\u4f5c\u4e3a\u5927\u5c0f\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6211\u4eec\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u7c7b\u578b\u8bf4\u660e\u7b26\u3002\nTypeSpecifierList\u662f\u7531\u8fde\u5b57\u7b26\u6216\u7834\u6298\u53f7(-)\u5206\u9694\u7684\u4efb\u610f\u987a\u5e8f\u7684\u7c7b\u578b\u8bf4\u660e\u7b26\u7684\u5217\u8868\u3002\u4efb\u4f55\u7701\u7565\u7684\u7c7b\u578b\u8bf4\u660e\u7b26\u90fd\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\ntype=INTEGER|FLOAT|BINARY|BYTES|BITRING|BITS|UTF8|UTF16|UTF32\u3002\n\u9ed8\u8ba4\u503c\u4e3a\u6574\u6570\u3002\u5b57\u8282\u662f\u4e8c\u8fdb\u5236\u7684\u901f\u8bb0\uff0cBITS\u662f\u4f4d\u4e32\u7684\u901f\u8bb0\u3002\n\u5b83\u53ea\u5728\u5339\u914d\u548c\u7c7b\u578b\u4e3a\u6574\u6570\u65f6\u624d\u91cd\u8981\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7b26\u53f7\u3002\nNative-endian\u610f\u5473\u7740\u5728\u52a0\u8f7d\u65f6\u5c06\u5b57\u7b26\u987a\u5e8f\u89e3\u6790\u4e3a\u5927\u7aef\u6216\u5c0f\u7aef\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u8fd0\u884cErlang\u673a\u5668\u7684CPU\u7684\u672c\u673a\u5b57\u7b26\u987a\u5e8f\u3002\u4ec5\u5f53\u7c7b\u578b\u4e3a\u6574\u578b\u3001utf16\u3001utf32\u6216\u6d6e\u70b9\u578b\u65f6\uff0c\u5b57\u8282\u5e8f\u624d\u91cd\u8981\u3002\u9ed8\u8ba4\u503c\u4e3a\u5927\u3002\n\u76ee\u524d\u6700\u7b80\u5355\u7684\u534f\u8bae\u4e4b\u4e00\u662fNTP\u3002\u5934\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a\n\u5b83\u540c\u65f6\u7528\u4e8e\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u8ba9\u6211\u4eec\u5148\u8d77\u8349\u4e00\u4e0b\u8bf7\u6c42\u5427\u3002\n\u6839\u636e\u5934\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u67092\u4f4d\u6574\u6570(LI)\u30013\u4f4d\u6574\u6570\u7248\u672c\u53f7\u30013\u4f4d\u6574\u6570\u6a21\u5f0f\u30018\u4f4d\u5c42\u30018\u4f4d\u8f6e\u8be2\u30018\u4f4d\u7cbe\u5ea6\u7b49\u7b49\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u7f6e\u524d3\u4e2a\u503c\uff0c\u5176\u4f59\u7684(376\u4f4d)\u53ef\u4ee5\u8bbe\u7f6e\u4e3a0\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Erlang\u7684\u5185\u7f6e\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\uff0cgen_udp\u6709\u4e00\u4e2a\u76f8\u5f53\u5168\u9762\u7684\u4f4e\u7ea7UDP\u5b9e\u73b0\uff0c\u53ef\u4ee5\u505a\u6211\u4eec\u60f3\u505a\u7684\u4e00\u5207\u3002\n%\u6253\u5f00\u672c\u5730\u5957\u63a5\u5b57\uff0c0\u8868\u793a\u5b83\u5c06\u9009\u62e9\u968f\u673a\u672c\u5730\u7aef\u53e3%active=false\u8868\u793a\u6211\u4eec\u9700\u8981\u63a5\u6536\u81ea\u5df1\u76842&&gt;\uff1b{ok\uff0csocket}=gen_udp\uff1aopen(0\uff0c[binary\uff0c{active\uff0cfalse}])\uff0c2&&gt;\uff1bgen_udp\uff1asend(socket\uff0c&#34\uff1b0.europe.pool.ntp.org&#34\uff1b\uff0c123\uff0crequest)\uff0c2&&gt;\u3002{OK\uff0c{_ADDRESS\uff0c_PORT\uff0cRESP}}=gen_udp\uff1arecv(\u5957\u63a5\u5b57\uff0c0\uff0c500)\u3002{OK\uff0c{{212\uff0c59\uff0c0\uff0c1}\uff0c123\uff0c&lt\uff1b&lt\uff1b\uff1b36\uff0c2\uff0c0\uff0c231\uff0c0\uff0c0\uff0c0\uff0c110\uff0c0\uff0c0\uff0c0\uff0c25\uff0c212\uff0c59\uff0c3\uff0c3\uff0c226\uff0c84\uff0c62\uff0c89\uff0c208\uff0c192\uff0c202\uff0c156\uff0c.&gt\uff1b&gt\uff1b}\u3002\n\u54cd\u5e94\u53ea\u662f\u4e00\u4e2a\u6211\u4eec\u9700\u8981\u5206\u5272\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u521b\u5efa\u8bf7\u6c42\u7684\u65b9\u5f0f\u3002\n4&gt\uff1b&lt\uff1b&lt\uff1bLI\uff1a2\uff0c\u7248\u672c\uff1a3\uff0c\u6a21\u5f0f\uff1a3\uff0c_REST/BINARY&gt\uff1b&gt\uff1b=Resp\u3002&lt\uff1b36\uff0c2\uff0c0\uff0c231\uff0c0\uff0c0\uff0c0\uff0c110\uff0c0\uff0c0\uff0c0\uff0c25\uff0c212\uff0c59\uff0c3\uff0c3\uff0c226\uff0c84\uff0c62\uff0c89\uff0c208\uff0c192\uff0c202\uff0c156\uff0c0\uff0c0\uff0c0\uff0c0\uff0c.&gt\uff1b&gt\uff1b5&gt\uff1b{li\uff0cli\uff0cversion\uff0cversion\uff0cmode\uff0cmode}\u3002{li\uff0c0\uff0c\u7248\u672c\uff0c4\uff0c\u6a21\u5f0f\uff0c4}\u3002\n\u5934\u7684\u5176\u4f59\u90e8\u5206\u6709\u70b9\u68d8\u624b\uff0c\u4f46\u662f\u4f7f\u7528\u4f4d\u4e32\u8bed\u6cd5\uff0c\u5b83\u5f88\u5bb9\u6613\u7ba1\u7406\u3002\n6&gt\uff1b&lt\uff1b&lt\uff1bLI\uff1a2\uff0c\u7248\u672c\uff1a3\uff0c\u6a21\u5f0f\uff1a3\uff0c\u5206\u5c42\uff1a8\uff0c\u8f6e\u8be2\uff1a8/\u6709\u7b26\u53f7\uff0c\u7cbe\u5ea6\uff1a8/\u6709\u7b26\u53f7\uff0c6&gT\uff1b\u6839\u76ee\u5f55\uff1a32\uff0c\u6839\u78c1\u76d8\uff1a32\uff0cR1\uff1a8\uff0cR2\uff1a8\uff0cR3\uff1a8\uff0cR4\uff1a8\uff0cRTSI\uff1a32\uff0cRtsF\uff1a32\uff0c6&gt\uff1bOTSI\uff1a32\uff0cOtsF\uff1a32\uff0cRcvI\uff1a32\uff0cRcvF\u3002=\u54cd\u5e94\u3002&lt\uff1b&lt\uff1b36\uff0c2\uff0c0\uff0c231\uff0c0\uff0c0\uff0c0\uff0c110\uff0c0\uff0c0\uff0c0\uff0c25\uff0c212\uff0c59\uff0c3\uff0c3\uff0c226\uff0c84\uff0c62\uff0c89\uff0c208\uff0c192\uff0c202\uff0c156\uff0c0\uff0c0\uff0c0\uff0c0\uff0c.&gt\uff1b&gt\uff1b&gt\uff1b\n\u7406\u89e3\u8fd9\u4e9b\u4ef7\u503c\u9700\u8981\u66f4\u591a\u7684\u8dd1\u817f\u5de5\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5206\u6570\u7684\u6548\u7528\u51fd\u6570\u3002\nb\u57fa\u7840\u8bbe\u65bd(Bin)-&gt\uff1bb\u57fa\u7840\u8bbe\u65bd(Bin\uff0c2\uff0c0)\u3002b\u57fa\u7840\u8bbe\u65bd(0\uff0c_\uff0cFrac)-&gt\uff1bFrac\uff1bb\u57fa\u7840\u8bbe\u65bd(Bin\uff0cN\uff0cFrac)-&gt\uff1bb\u57fa\u7840\u8bbe\u65bd(Bin BSR 1\uff0cN*2\uff0cFrac+(Bin Band 1)/N)\u3002\n\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5904\u7406\u54cd\u5e94\u5e76\u8fd4\u56de\u611f\u5174\u8da3\u7684\u503c\u7684\u51fd\u6570\u3002\n%2208988800\u662f\u504f\u79fb\u91cf(1900\u5e74\u5230UNIX\u7eaa\u5143)PROCESS_ntp_RESPONSE(Ntp_RESPONSE)-&gt\uff1b&lt\uff1b&lt\uff1bLI\uff1a2\uff0c\u7248\u672c\uff1a3\uff0c\u6a21\u5f0f\uff1a3\uff0c\u5206\u5c42\uff1a8\uff0c\u8f6e\u8be2\uff1a8/\u6709\u7b26\u53f7\uff0c\u7cbe\u5ea6\uff1a8/\u6709\u7b26\u53f7\uff0cRootDel\uff1a32\uff0cRootDisp\uff1a32\uff0cR1\uff1a8\uff0cR2\uff1a8\uff0cR3\uff1a8\uff0cR4\uff1a8\uff0cRTSI\uff1a32\uff0cRtsF\uff1a32\uff0cOTSI\uff1a32\uff0cOtsF\uff1a32\uff0cRcvI\uff1a32\uff0cRcvF\uff1a32\uff0cXmtI\uff1a32\uff0cXmtF\uff1a32&gt\uff1b=NTP_RESPONSE\uff0c{NowMS\uff0cNOWS\uff0cNowUS}=Erlang\uff1aTimestamp()\uff0cNowTimestamp=NowMS*1\u30020 e6+NOWS+NOWUS/1000\uff0c\u4f20\u8f93\u65f6\u95f4\u6233=XMTI-2208988800+BINFIC(XMTF)\uff0c{{li\uff0cli}\uff0c{vn.\u3002\n{{li\uff0c0}\uff0c{vn\uff0c4}\uff0c{\u6a21\u5f0f\uff0c4}\uff0c{\u5c42\uff0c2}\uff0c{\u8f6e\u8be2\uff0c3}\uff0c{\u7cbe\u5ea6\uff0c-24}\uff0c{\u6839\u5ef6\u8fdf\uff0c9}\uff0c{\u6839\u5206\u6563\uff0c140}\uff0c{\u5f15\u7528ID\uff0c85\uff0c158\uff0c25\uff0c75}\uff0c{\u5f15\u7528\u65f6\u95f4\u6233\uff0c1588186010\u300275", "note_en": "In Erlang, it is easy to construct binaries and bitstrings and matching binary patterns. I was running into Mitchell Perilstein&#39;s excellent work on NTP with Erlang and I thought I am going to use this to explain how bitstrings and binaries work in Erlang.\n  A bitstring is a sequence of zero or more bits, where the number of bits does not need to be divisible by 8.\n   Each element specifies a certain segment of the bitstring. A segment is a set of contiguous bits of the binary (not necessarily on a byte boundary).\n   Let&#39;s unpack a bit of what is going on here. For this, it is worth knowing the whole syntax.\n    This means in the real-life example, we have 0 as the value, 2 is the size (2 bits), four as a value, 3 bits as size, and so on. We did not specify any of the type specifiers.\n TypeSpecifierList is a list of type specifiers, in any order, separated by hyphens or dash (-). Default values are used for any omitted type specifier.\n  Type  =  integer  |  float  |  binary  |  bytes  |  bitstring  |  bits  |  utf8  |  utf16  |  utf32\n The default is an integer. bytes is a shorthand for binary and bits is a shorthand for bitstring.\n  It only matters for matching and when the type is an integer. The default is unsigned.\n  Native-endian means that the endianness is resolved at load time to be either big-endian or little-endian, depending on what is native for the CPU that the Erlang machine is run on. Endianness only matters when the Type is either integer, utf16, utf32, or float. The default is big.\n  One of the simplest protocols out there is NTP. The header file looks like the following:\n  This is used for both the request and the response. Let&#39;s craft the request first.\n  Based on the header structure we can see that we have a 2-bit integer (Li), 3-bit integer version number, 3-bit integer mode, 8-bit stratum, 8-bit poll, 8-bit precision, and so on. We only need to set the first 3 values, the rest (376 bits) can be 0.\n     We can use Erlang&#39;s built-in functions for this one, gen_udp has a pretty comprehensive low-level UDP implementation, that can do all we want.\n % open a local socket, 0 indicates that it will pick a random local port% active=false means we need to receive ourselves 2 &gt;  { ok ,  Socket }  =  gen_udp : open ( 0 ,  [ binary ,  { active ,  false }]), 2 &gt;  gen_udp : send ( Socket ,  &#34;0.europe.pool.ntp.org&#34; ,  123 ,  Request ), 2 &gt;  { ok ,  {_ Address ,  _ Port ,  Resp }}  =  gen_udp : recv ( Socket ,  0 ,  500 ). { ok ,{{ 212 , 59 , 0 , 1 },  123 ,  &lt;&lt; 36 , 2 , 0 , 231 , 0 , 0 , 0 , 110 , 0 , 0 , 0 , 25 , 212 , 59 , 3 , 3 , 226 , 84 , 62 , 89 ,  208 , 192 , 202 , 156 ,... &gt;&gt; }}\n  The response is just a binary that we need to slice and dice, similarly how we created the request.\n   4 &gt;  &lt;&lt;  Li : 2 ,  Version : 3 ,  Mode : 3 ,  _ rest / binary  &gt;&gt;  =  Resp . &lt;&lt; 36 , 2 , 0 , 231 , 0 , 0 , 0 , 110 , 0 , 0 , 0 , 25 , 212 , 59 , 3 , 3 , 226 , 84 , 62 , 89 ,  208 , 192 , 202 , 156 , 0 , 0 , 0 , 0 , 0 ,... &gt;&gt; 5 &gt;  { li ,  Li ,  version ,  Version ,  mode ,  Mode }. { li , 0 , version , 4 , mode , 4 }\n  The rest of the header a bit more tricky but with the bitstring syntax, it is easy to manage.\n   6 &gt;  &lt;&lt;  LI : 2 ,  Version : 3 ,  Mode : 3 ,  Stratum : 8 ,  Poll : 8 / signed ,  Precision : 8 / signed , 6 &gt;  RootDel : 32 ,  RootDisp : 32 ,  R1 : 8 ,  R2 : 8 ,  R3 : 8 ,  R4 : 8 ,  RtsI : 32 ,  RtsF : 32 , 6 &gt;  OtsI : 32 ,  OtsF : 32 ,  RcvI : 32 ,  RcvF : 32 ,  XmtI : 32 ,  XmtF : 32  &gt;&gt;  =  Resp . &lt;&lt; 36 , 2 , 0 , 231 , 0 , 0 , 0 , 110 , 0 , 0 , 0 , 25 , 212 , 59 , 3 , 3 , 226 , 84 , 62 , 89 ,  208 , 192 , 202 , 156 , 0 , 0 , 0 , 0 , 0 ,... &gt;&gt;\n Making sense of these values requires a bit more legwork. First, we need a utility function for binary fractions.\n  binfrac ( Bin )  -&gt;  binfrac ( Bin ,  2 ,  0 ). binfrac ( 0 ,  _,  Frac )  -&gt;  Frac ; binfrac ( Bin ,  N ,  Frac )  -&gt;  binfrac ( Bin  bsr  1 ,  N * 2 ,  Frac  +  ( Bin  band  1 ) / N ).\n With this function, we can implement the one that processes the response and returns the values we are interested in.\n % 2208988800 is the offset (1900 to Unix epoch) process_ntp_response ( Ntp_response )  -&gt;  &lt;&lt;  LI : 2 ,  Version : 3 ,  Mode : 3 ,  Stratum : 8 ,  Poll : 8 / signed ,  Precision : 8 / signed ,  RootDel : 32 ,  RootDisp : 32 ,  R1 : 8 ,  R2 : 8 ,  R3 : 8 ,  R4 : 8 ,  RtsI : 32 ,  RtsF : 32 ,  OtsI : 32 ,  OtsF : 32 ,  RcvI : 32 ,  RcvF : 32 ,  XmtI : 32 ,  XmtF : 32  &gt;&gt;  =  Ntp_response ,  { NowMS ,  NowS ,  NowUS }  =  erlang : timestamp (),  NowTimestamp  =  NowMS  *  1 . 0 e6  +  NowS  +  NowUS / 1000 ,  TransmitTimestamp  =  XmtI  -  2208988800  +  binfrac ( XmtF ),  {  { li ,  LI },  { vn  ...\n  {{ li , 0 },  { vn , 4 },  { mode , 4 },  { stratum , 2 },  { poll , 3 },  { precision , - 24 },  { rootDelay , 9 },  { rootDispersion , 140 },  { referenceId , 85 , 158 , 25 , 75 },  { referenceTimestamp , 1588186010 . 7517557 },  { originateTimestamp , - 2208988800 },  { receiveTimestamp , 1588186048 . 3557627 },  { transmitTimestamp , 1588186048 . 8841336 },  { clientReceiveTimestamp , 1588186606 . 531 },  { offset , - 557 . 6468663215637 }}\n Please note, this is the first step in the NTP workflow and does not implement the complete NTP protocol. We do not take into consideration a bunch of details.\n Next time we might look into how to implement a simple server (like DNS) in Erlang.", "posttime": "2020-05-02 18:01:46", "tags": "\u5339\u914d,binary,erlang", "title": "\u7528Erlang\u5339\u914d\u4e8c\u8fdb\u5236\u6a21\u5f0f", "title_en": "Matching Binary Patterns with Erlang", "transed": 0, "url": "https://dev.to/l1x/matching-binary-patterns-11kh", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5339\u914d", "binary", "erlang"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000249, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Galen Wolfe-Paly~ravmel-ropdyl OS 1\u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u6570\u5b57\u793e\u533a\u7684\u7b80\u5355\u3001\u7edf\u4e00\u7684\u7cfb\u7edf\u3002OS1\u662f\u4e3a\u5728URBIT\u4e0a\u5206\u4eab\u6d88\u606f\u3001\u94fe\u63a5\u548c\u7b14\u8bb0\u7684\u4e00\u7fa4\u4eba\u51c6\u5907\u7684\u3002\n\u6211\u4eec\u4e3a\u81ea\u5df1\u8bbe\u8ba1\u5e76\u6784\u5efa\u4e86OS1\uff0c\u6211\u4eec\u771f\u7684\u5f88\u4eab\u53d7\u6bcf\u5929\u4f7f\u7528\u5b83\u3002\u6211\u4eec\u6ca1\u6709\u5f04\u6e05\u695a\u5982\u4f55\u5c06\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e2a\u5355\u4e00\u7684\u7cfb\u7edf\u6765\u4e0e\u516c\u53f8\u548c\u6211\u4eec\u771f\u6b63\u4fe1\u4efb\u7684\u66f4\u5e7f\u6cdb\u7684Urbit\u793e\u533a\u4fdd\u6301\u8054\u7cfb\u3002OS1\u8ba9\u4eba\u611f\u89c9\u6211\u4eec\u7684\u516c\u53f8\u548c\u793e\u533a\u5728\u6570\u5b57\u4e16\u754c\u4e2d\u6709\u4e00\u4e2a\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u5bb6\u7684\u5730\u65b9\u3002\n\u5728\u4eca\u5929\u7684\u6570\u5b57\u4e16\u754c\u4e2d\uff0c\u5927\u591a\u6570\u670b\u53cb\u548c\u5408\u4f5c\u8005\u90fd\u4f1a\u540c\u65f6\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u6765\u4fdd\u6301\u8054\u7cfb\u3002\u6211\u4eec\u8ba4\u4e3aOS1\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u6a21\u578b\u3002\u73b0\u5728\u8981\u6c42\u5168\u4e16\u754c\u8f6c\u800c\u4f7f\u7528\u5b83\u8fd8\u4e3a\u65f6\u8fc7\u65e9\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u5e2e\u52a9\u6211\u4eec\u7684\u670b\u53cb\u548c\u90bb\u8fd1\u793e\u533a\u767b\u4e0aUrbit\uff0c\u8ba9\u4ed6\u4eec\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u5e76\u83b7\u5f97\u4ed6\u4eec\u7684\u53cd\u9988\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0bOS1\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u6211\u4eec\u4e00\u76f4\u4ee5\u6765\u662f\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u3002\u7136\u540e\uff0c\u5982\u679c\u4f60\u5bf9OS1\u611f\u5174\u8da3\uff0c\u6211\u4eec\u4f1a\u544a\u8bc9\u4f60\u5982\u4f55\u7533\u8bf7\u793e\u533a\u57fa\u91d1\u3002\nOS 1\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u96c6\u6210\u5de5\u5177\uff0c\u7528\u4e8e\u4e0e\u4e00\u7fa4\u4eba\u8fdb\u884c\u6d88\u606f\u4f20\u9012\u3001\u5171\u4eab\u94fe\u63a5\u548c\u5199\u4f5c\u3002OS1\u4ecb\u4e8e\u201c\u751f\u4ea7\u529b\u8f6f\u4ef6\u201d\u548c\u201c\u793e\u4ea4\u7f51\u7edc\u201d\u4e4b\u95f4\u3002\u6211\u4eec\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u5168\u65b0\u7684\u793e\u4f1a\u8ba1\u7b97\u7684\u5f00\u59cb\u3002\nOS1\u4e0d\u662f\u6211\u4eec\u4e3aUrbit\u6784\u5efa\u63a5\u53e3\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5\uff0c\u4f46\u5b83\u80af\u5b9a\u662f\u6700\u5b8c\u6574\u7684\u3002OS1\u662f\u7b2c\u4e00\u4e2a\u611f\u89c9\u4e0d\u50cf\u662f\u5b9e\u9a8c\u7684URBIT\u754c\u9762\u3002\n\u4eca\u5929\uff0c\u5f53\u60a8\u5f15\u5bfcArvo(Urbit OS\u5185\u6838)\u5e76\u5c06\u6d4f\u89c8\u5668\u8fde\u63a5\u5230\u5b83\u65f6\uff0c\u60a8\u4f1a\u770b\u5230OS1\uff0c\u4f46OS1\u5e76\u4e0d\u662fArvo\u552f\u4e00\u53ef\u80fd\u7684\u5ba2\u6237\u7aef\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u5ba2\u6237\u7aef\uff0c\u6216\u8005\uff0c\u56e0\u4e3a\u5b83\u662f\u5b8c\u5168\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u4fee\u6539OS1\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0cOS1\u5f00\u7bb1\u5373\u7528\uff0c\u611f\u89c9\u5c31\u50cf\u662f\u4e00\u6b3e\u5e94\u7528\u7a0b\u5e8f\u3002\u8003\u8651\u5230\u5b83\u662f\u5728Urbit OS\u4e0a\u8fd0\u884c\u7684-\u5b83\u8fdc\u4e0d\u6b62\u4e8e\u6b64\u3002\u5b83\u662f\u4e00\u53f0\u529f\u80fd\u9f50\u5168\u7684\u901a\u7528\u865a\u62df\u8ba1\u7b97\u673a\uff0c\u5bf9\u60a8\u6765\u8bf4\u65e2\u5b89\u5168\u53c8\u79c1\u5bc6\u3002\u6211\u4eec\u5c06\u5728\u6700\u540e\u56de\u5230\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u3002\n\u8ba9\u6211\u4eec\u9010\u4e00\u4ecb\u7ecd\u4e00\u4e0bOS1\u7684\u529f\u80fd\uff0c\u770b\u770b\u5b83\u662f\u4ec0\u4e48\u6837\u5b50\u3002\n\u7fa4\u7ec4\u662fOS1\u4e2d\u7684\u4e3b\u8981\u6784\u5efa\u5757\uff0c\u7fa4\u7ec4\u53ea\u662f\u5171\u4eab\u4e00\u7ec4\u804a\u5929\u3001\u94fe\u63a5\u548c\u53d1\u5e03\u9891\u9053\u7684\u4eba\u7684\u5217\u8868\u3002\u7fa4\u6709\u70b9\u50cf\u4e00\u4e2a\u8d85\u7ea7\u5f3a\u5927\u7684\u7fa4\u804a\u3002\n\u4e00\u7fa4\u670b\u53cb\u53ef\u80fd\u53ea\u5171\u4eab\u51e0\u4e2a\u804a\u5929\u9891\u9053\u3002\u4e00\u4e2a\u9605\u8bfb\u5c0f\u7ec4\u53ef\u80fd\u53ea\u5171\u4eab\u4e00\u4e2a\u8ba8\u8bba\u4ed6\u4eec\u6b63\u5728\u9605\u8bfb\u7684\u5185\u5bb9\u7684\u53d1\u5e03\u9891\u9053\u548c\u4e00\u4e2a\u5373\u5c06\u51fa\u7248\u7684\u56fe\u4e66\u7684\u94fe\u63a5\u9891\u9053\u3002\u4f5c\u4e3a\u4e00\u5bb6\u516c\u53f8\uff0c\u6211\u4eec\u5171\u4eab\u5404\u79cd\u804a\u5929\u3001\u53d1\u5e03\u548c\u94fe\u63a5\u6e20\u9053\u6765\u5b8c\u6210\u4efb\u52a1\u5e76\u8fdb\u884c\u4ea4\u6d41\u3002\u4f8b\u5982\uff0c\u6bcf\u4e2a\u5de5\u4f5c\u9886\u57df\u90fd\u6709\u804a\u5929\uff0c\u6458\u8981\u548c\u7279\u5199\u8ba8\u8bba\u7684\u53d1\u5e03\u9891\u9053\uff0c\u97f3\u4e50\u3001\u5f71\u54cd\u548c\u53c2\u8003\u7684\u94fe\u63a5\u9891\u9053\u3002..\u3002\n\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u7531\u4ed6\u4eec\u7684URBIT ID\u6807\u8bc6\uff1a\u4e00\u4e2a\u7b80\u77ed\u7684\u3001\u4ee4\u4eba\u96be\u5fd8\u7684\u540d\u5b57\uff0c\u60a8\u62e5\u6709\u79c1\u94a5(\u5b8c\u5168\u5c5e\u4e8e\u60a8)\u3002\u6bcf\u4e2a\u7ec4\u90fd\u662f\u79c1\u4eba\u7684\uff0c\u9700\u8981\u9080\u8bf7\u3002\u7fa4\u7ec4\u662f\u4e0d\u53ef\u53d1\u73b0\u7684\u3002\u4ed6\u4eec\u5e94\u8be5\u662f\u4eba\u4eec\u9ad8\u5ea6\u4fe1\u4efb\u7684\u793e\u533a\u3002\u4e0e\u5176\u8bf4\u662f\u516c\u5171\u6d3b\u52a8\uff0c\u4e0d\u5982\u8bf4\u662f\u516c\u793e\u3002\n\u804a\u5929\u5c31\u662f\u804a\u5929\uff1a\u7528\u4e8e\u540c\u6b65\u901a\u4fe1\u7684\u6d88\u606f\u7684\u987a\u5e8f\u5217\u8868\u3002\u73b0\u5728\u5df2\u7ecf\u6709\u4e00\u767e\u4e07\u79cd\u804a\u5929\u65b9\u5f0f--\u4f46Urbit Chat\u5728\u51e0\u4e2a\u91cd\u8981\u65b9\u9762\u6709\u6240\u4e0d\u540c\u3002\n\u9996\u5148\uff0c\u6bcf\u4e2a\u804a\u5929\u9891\u9053\u53ea\u5728\u4e3b\u6301\u4eba\u548c\u804a\u5929\u6210\u5458\u4e4b\u95f4\u5171\u4eab\u3002\u5f53\u4f60\u4e0e\u4eba\u8fdb\u884cDM\u65f6\uff0c\u6d88\u606f\u662f\u5bf9\u7b49\u53d1\u9001\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8be5\u7cfb\u7edf\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u5206\u6563\u7684\u548c\u5047\u540d\u7684\u3002\u9664\u4e86\u4f60\u7684Urbit ID\u6ca1\u4eba\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u4f60\u7684\u4e8b\u3002\n\u5176\u6b21\uff0c\u6bcf\u6761\u804a\u5929\u6d88\u606f\u90fd\u662f\u7531\u4f60\u7684Urbit ID\u52a0\u5bc6\u548c\u7b7e\u540d\u7684\u3002\u540c\u6837\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u79f0Urbit\u662f\u201c\u5b89\u5168\u7684\u201d\uff0c\u56e0\u4e3a\u5b83\u662f\u672a\u7ecf\u5ba1\u8ba1\u7684-\u4f46\u6211\u4eec\u6b63\u5728\u52aa\u529b\u5728\u4eca\u5e74\u8ba9Urbit\u8fdb\u884c\u5ba1\u8ba1\u3002\n\u7b2c\u4e09\uff0cURBIT OS\u4e2d\u7684\u804a\u5929\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u8239\u8236\u4e4b\u95f4\u53d1\u9001\u6d88\u606f\u7684\u534f\u8bae\u3002\u5f88\u5bb9\u6613\u60f3\u8c61\u5c06\u804a\u5929\u6269\u5c55\u5230\u5404\u79cd\u6709\u8da3\u7684\u65b9\u5411\u3002\u4ec5\u63a5\u53d7\u7279\u5b9a\u6d88\u606f\u7c7b\u578b\u7684\u804a\u5929\u3001\u5177\u6709\u6d88\u5931\u5386\u53f2\u8bb0\u5f55\u7684\u804a\u5929\u3001\u53ea\u80fd\u5728\u4e00\u5929\u4e2d\u7684\u7279\u5b9a\u65f6\u95f4\u53d1\u5e03\u7684\u804a\u5929\uff0c\u7b49\u7b49\u3002\n(\u5982\u679c\u4f60\u597d\u5947\u5730\u60f3\u5c1d\u8bd5\u8fd9\u4e9b\u4e8b\u60c5\u4e4b\u4e00\uff0c\u6216\u8005\u5bf9\u4f60\u60f3\u8981\u8bd5\u9a8c\u7684\u4e1c\u897f\u6709\u4e00\u4e2a\u60f3\u6cd5-\u8003\u8651\u5728\u6211\u4eec\u7684\u62e8\u6b3e\u8ba1\u5212\u4e2d\u63d0\u4ea4\u4e00\u4efd\u63d0\u6848\u3002\u6211\u4eec\u5b9a\u671f\u5956\u52b1\u5730\u5740\u7a7a\u95f4\u65b9\u9762\u7684\u8d21\u732e\u8005\u3002)\u3002\n\u6211\u4eec\u8ba4\u4e3a\u804a\u5929\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u201c\u66f4\u597d\u7684IRC\u201d\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u4eca\u5929\u7684\u57fa\u672c\u5f62\u5f0f\uff0c\u804a\u5929\u5bf9\u4e8e\u4f20\u9012\u5bbe\u81f3\u5982\u5f52\u7684\u611f\u89c9\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u5982\u679c\u6ca1\u6709\u804a\u5929\uff0c\u5c31\u65e0\u6cd5\u4e3a\u7fa4\u7ec4\u63d0\u4f9b\u5b8c\u6574\u7684\u754c\u9762\u3002\nLinks\u6709\u70b9\u50cf\u9ed1\u5ba2\u65b0\u95fb(Hacker News)\u6216Reddit\u3002\u5b83\u53ea\u662f\u4e00\u4e2a\u5e26\u6709\u8bc4\u8bba\u7684\u94fe\u63a5\u96c6\u5408\u3002\u6ca1\u6709\u5347\u804c\u6216\u6392\u5e8f\u3002\u6211\u4eec\u51b3\u5b9a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5c0f\u56e2\u4f53\u6765\u8bf4\uff0c\u66f4\u591a\u7684\u662f\u6536\u96c6\u53c2\u8003\u8d44\u6599\uff0c\u800c\u4e0d\u662f\u51b3\u5b9a\u4ec0\u4e48\u662f\u6700\u4ee4\u4eba\u5174\u594b\u7684--\u4f46\u94fe\u63a5\u7684\u6392\u5217\u53ef\u80fd\u662f\u8d21\u732e\u8005\u8bd5\u9a8c\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u9886\u57df\u3002\n\u6211\u4eec\u4f7f\u7528\u94fe\u63a5\u6765\u6536\u96c6\u5916\u90e8\u5f15\u7528\u5e76\u8ddf\u8e2a\u6211\u4eec\u6b63\u5728\u601d\u8003\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u603b\u662f\u770b\u7740\u6211\u4eec\u5c0f\u5c0f\u7684\u6570\u5b57\u4e16\u754c\u4e4b\u5916\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u5e76\u8c08\u8bba\u5b83\u4eec\u3002Links\u8ba9\u6211\u4eec\u5bf9\u8fd9\u4e9b\u8ba8\u8bba\u8fdb\u884c\u5b58\u6863\u3002", "note_en": "Galen Wolfe-Pauly  ~ravmel-ropdyl        OS 1 is a simple, unified system for building digital communities. OS 1 is for groups of people sharing messages, links, and notes on Urbit.\n We designed and built OS 1 for ourselves, and we\u2019re really enjoying using it every day. Instead of figuring out how to duct tape together apps and services, we use a single system to stay connected with the company and broader Urbit community that we really trust. OS 1 makes it feel like our company and community has a place in the digital world to call home.\n Most groups of friends and collaborators juggle apps and services to stay connected in the digital world today. We think OS 1 is a much better model. It\u2019s still too early to ask the whole world to switch over to it \u2014 but we\u2019re ready to help onboard our friends and adjacent communities into Urbit to have them try it out and get their feedback.\n First, let\u2019s walk through what OS 1 is and how we\u2019ve been using it. Then, if OS 1 is interesting to you, we\u2019ll tell you how to apply for a community grant.\n   OS 1 is a very simple, integrated tool for messaging, sharing links, and writing with a group of people. OS 1 is somewhere between \u2018productivity software\u2019 and a \u2018social network\u2019. We think it\u2019s the beginning of an altogether new breed of social computing.\n OS 1 isn\u2019t our first attempt to build an interface for Urbit, but it\u2019s certainly the most complete. OS 1 is the first Urbit interface that doesn\u2019t feel like an experiment.\n Today, when you boot Arvo (the Urbit OS kernel) and connect your browser to it, you\u2019ll see OS 1. OS 1 isn\u2019t the only possible client for Arvo, though. Anyone could build their own client or, since it\u2019s completely open source, modify OS 1 however they like.\n For most people, out of the box, OS 1 feels like an app. Given that it\u2019s running on Urbit OS \u2014 it\u2019s much more than that. It\u2019s a full-fledged general purpose virtual computer that\u2019s secure and private to you. We\u2019ll come back to what that means at the end.\n Let\u2019s walk through the features of OS 1 one by one to see what it\u2019s like.\n   The group is the main building block in OS 1. A group is simply a list of people that share a set of chat, links, and publish channels. A group is sort of like a super powerful group chat.\n A group of friends might just share a few chat channels. A reading group might just share a publish channel for discussion of what they \u2019re reading and a links channel for upcoming books. As a company, we share a variety of chat, publish, and links channels to get things done and communicate. There are chats for each area of work, publish channels for digests and feature discussion, and links channels for music, influences and references, for example.  ...\n Each person in a group is identified by their  Urbit ID: a short, memorable name that you own with a private key (and belongs to you completely). Each group is private and requires an invite. Groups aren\u2019t discoverable. They\u2019re meant to be high-trust communities of people. More like a commune than a public event.\n    Chat is chat: a sequential list of messages meant for synchronous communication. There are already a million ways to chat \u2014 but Urbit chat differs in a few important ways.\n First, each chat channel is only shared between the host and the members of a chat. When you DM with people, messages are sent peer to peer. The system is, in fact, decentralized and pseudonymous by default. No one knows anything about you outside of your Urbit ID.\n Second, each chat message is encrypted and signed by your Urbit ID. Again, we don\u2019t call Urbit \u2018secure\u2019 yet since it\u2019s unaudited \u2014 but we\u2019re working to have Urbit audited this year.\n Third, chat in Urbit OS is a protocol for sending messages between ships. It\u2019s easy to imagine extending chat in all kinds of fun and interesting directions. Chats that only accept certain message types, chats that have disappearing history, chats that you can only post to during certain times of day, and so on.\n (If you\u2019re curious to try one of these things, or have an idea about something you\u2019d like to experiment with \u2014 consider submitting a proposal in our  grants program. We regularly reward contributor work with address space.)\n We think of chat as a primitive, not simply a \u2018better IRC\u2019. But even in the rudimentary form it\u2019s in today, chat is essential to delivering a feeling of being at home. There\u2019s no way to deliver a complete interface for groups without chat.\n    Links is a bit like Hacker News or Reddit. It\u2019s just a collection of links with comments. There\u2019s no upvoting or sorting. We decided that with a small group it\u2019s more about collecting references than deciding what\u2019s most exciting \u2014 but permutations of Links could be a great area for contributors to experiment with.\n We use links to collect external references and track things we\u2019re thinking about. We\u2019re always looking at things going on outside our small digital universe and talking about them. Links lets us keep an archive of those discussions.\n We originally imagined links as evolving into more of a general-purpose \u2018collection creation\u2019 interface. One where you can pull together images, video, URLs, maybe even runnable code and so on into a single channel. We\u2019ll get there.\n   Publishing is somewhere between a blog and a note-taking system. A Publish notebook is a list of markdown files with optional comments. A private Publish notebook is like a journal, a group notebook can be like a forum (with comments on) or a collaborative blog.\n We use publish for both long-form discussion and one-way communication about what we\u2019re working on in its current form. The editor is calm and simple. In distraction-free mode, it\u2019s a nice place to put a note together.\n Publish, like all our other modules, is an interface to a generalized protocol for storing text. We have high hopes for how Publish can evolve into a flexible tool for notetaking and discussion with richer content types and better controls over structuring discussion.\n   You\u2019ll find a few other things on the home screen: a clock, the weather, and a simple command-line that we call the Dojo. These are system-wide utilities that aren\u2019t group-specific.\n The clock and weather tiles are simple indications of the state of the outside world. We built them because they\u2019re things we wanted to be able to check in on often. When you\u2019re spending much of the day in front of a computer, it\u2019s nice to know if you have enough daylight left to get some exercise in.\n   The Dojo gives you a quick way to see that, under the hood, Urbit OS is a powerful general-purpose system. The system hasn\u2019t evolved to the point that our libraries, frameworks, and modules are polished to our standards. Since it\u2019s still early, we can\u2019t claim that it\u2019s easy to develop on top of this platform. But we want it to become much easier.\n  We made OS 1 because we wanted to begin the process of re-centralizing our digital lives on a platform we actually control. Replacing all the services we use all at once is impossible \u2014 so we picked a suite that we felt would work nicely together. We\u2019ve always felt that one of the most exciting things about Urbit is in bringing your digital life together in a way that feels like home.\n The digital home, we think, is what our computers are meant to be but simply can\u2019t be in a world of cloud services. Once upon a time, thirty years ago, your personal computer was an open-ended tool that was reasonably simple to understand and use, lasted a pretty long time, and belonged to you in every way.\n OS 1 is a first step down the road back to a system that\u2019s simple, durable, and belongs to you in every way. It\u2019s a long road, and we feel like we\u2019ve made a very significant step forward.\n One really critical thing about OS 1 is the pattern of \u2018groups sharing modules\u2019. This pattern makes it perfectly clear how a virtual computer can outcompete a bunch of different services. As the collection of modules in OS 1 \u2192 N grows, we make it easier for others to contribute modules, and we increase the flexibility of connecting modules our system quickly outruns the messy, disconnected world we\u2019re currently stuck in.\n OS 1 isn\u2019t mature enough to be  easy for outside contributors to easily add modules \u2014 but it is  open source, and anyone is welcome to tinker and experiment with modifying it. We run a  grants program to reward contributors for improving any part of Urbit OS. As the system matures we expect this program to expand and accelerate.\n  By using OS 1 you inherit all the benefits of running Urbit OS. Each user runs their own node completely independently. Everyone using Urbit OS owns their own identity and data. And every Urbit OS node communicates over an encrypted and authenticated network. (Again, We don\u2019t yet call Urbit OS \u2018secure\u2019 because it hasn\u2019t been audited.)\n OS 1 is just a client for Urbit OS, of course. Other people could write their own clients that are completely different \u2014 like different windowing systems for Linux. Our hope is to build a client that includes interface components and frameworks that make it exceptionally easy to build modules for groups of people to share. Other clients could potentially invent entirely new ways of interacting with the underlying system.\n There are two threads by which OS 1 evolves into OS 2 and beyond. First, by becoming a more powerful system and second, by adding modules to expand our supported modes for interacting.\n In its current form, OS 1 by no means exposes all the power of the underlying system. Our approach to building OS 1 was to focus on the quality of the UI, and accept that it will feel like a monolithic app. We\u2019re already working to evolve our interface into something that feels flexible to an ordinary user and developers can easily extend and build on top of.\n Specifically, we want better affordances for putting multiple streams of data on the screen at once, better keyboard shortcuts and navigation affordances, better libraries and frameworks for building modules. We want a standalone client and a single login system. These are some of the things currently on the drawing board.\n As far as modules are concerned, there are too many things we\u2019d like to build to list them all. We\u2019d really like to have threaded conversations; short, Twitter-style messages; biometric and status tracking; an e-book reader and annotations system \u2014 and that\u2019s just to name a few we see in the near term.\n We\u2019ve long since felt that the most powerful thing about Urbit is that it\u2019s a general-purpose system. OS 1 puts us on the road to giving people an actual material sense of what using a general-purpose networked computer feels like.\n As we expand the affordances of the system and add modules over the course of OS 1, 2, and beyond we expect to deliver a system that can foster everyday creativity. There\u2019s a long road ahead, in the best possible sense. We\u2019re really excited about what the future holds.\n   As a distributed team trying to stay connected, we like using OS 1 from day to day. We\u2019d really like to hand-onboard a small group of like minded groups of people who want to experiment with living on the fringe of the digital world. Toward this end, we started the community grants program.\n Each community that\u2019s selected will get a block of address space to share, direct support, and (in the near future) free hosting.", "posttime": "2020-05-02 18:01:43", "tags": "urbit,\u804a\u5929,os", "title": "URBIT OS 1", "title_en": "Urbit OS 1", "transed": 0, "url": "https://urbit.org/blog/introducing-os1/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["urbit", "\u804a\u5929", "os"]}, {"category": "", "categoryclass": "", "imagename": "f19df6f03f515cc1e43757e4c51c21df.jpg", "infoid": 1000248, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6cd5\u56fd\u542f\u52a8\u4e86\u4e00\u98792000\u4e07\u6b27\u5143\u7684\u8ba1\u5212\uff0c\u5141\u8bb8\u6240\u6709\u516c\u6c11\u652f\u4ed8\u6700\u9ad850\u6b27\u5143\u7684\u81ea\u884c\u8f66\u7ef4\u4fee\u8d39\u3002\n\u8fd9\u4e9b\u8d44\u91d1\u8fd8\u5c06\u63d0\u4f9b\u81ea\u884c\u8f66\u57f9\u8bad\u548c\u4e34\u65f6\u505c\u8f66\u4f4d\uff0c\u8fd9\u4e9b\u8d44\u91d1\u662f\u5728\u6cd5\u56fd\u5f53\u5c40\u5e0c\u671b\u5c06\u7a7a\u6c14\u6c61\u67d3\u6c34\u5e73\u4fdd\u6301\u5728\u8f83\u4f4e\u6c34\u5e73\u540e\u63a8\u51fa\u7684\uff0c\u6b64\u524d\u6cd5\u56fd\u5f53\u5c40\u5728\u5c01\u9501\u671f\u95f4\u7a7a\u6c14\u6c61\u67d3\u6c34\u5e73\u5927\u5e45\u4e0b\u964d\u3002\n&gt\uff1b&gt\uff1b\u52aa\u529b\u8d76\u5230\u5546\u5e97\uff0c\u5c1d\u8bd56\u671f\u201c\u81ea\u884c\u8f66\u5468\u520a\u201d(Cycling Weekly)\u6742\u5fd7\uff0c\u53ea\u89816 GB\u5c31\u80fd\u9001\u8d27\u4e0a\u95e8\u3002\n\u5728\u6cd5\u56fd\uff0c60%\u7684\u65c5\u884c\u8ddd\u79bb\u4e0d\u52303\u82f1\u91cc\uff0c\u751f\u6001\u8f6c\u578b\u90e8\u957f\u4f0a\u4e3d\u838e\u767d\u00b7\u4f2f\u6069\u8868\u793a\uff0c\u8fd9\u9879\u8ba1\u5212\u65e8\u5728\u51cf\u5c11\u77ed\u9014\u65c5\u884c\u7684\u9a7e\u8f66\u3002\n\u4f2f\u6069\u8bf4\uff1a\u201c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e00\u65f6\u671f\u6210\u4e3a\u8fc8\u5411\u81ea\u884c\u8f66\u6587\u5316\u7684\u65b0\u9636\u6bb5\uff0c\u6211\u4eec\u5e0c\u671b\u81ea\u884c\u8f66\u6210\u4e3a\u53d6\u6d88\u9650\u5236\u7684\u5973\u738b\u3002\u201d\n\u5c06\u5efa\u7acb\u4e00\u4e2a\u75313000\u540d\u6ce8\u518c\u673a\u68b0\u5e08\u7ec4\u6210\u7684\u7f51\u7edc\uff0c50\u6b27\u5143\u7684\u7ef4\u4fee\u8d39\u7528\u5c06\u53ef\u5151\u6362\uff0c\u5982\u66f4\u6362\u8f6e\u80ce\u6216\u66f4\u6362\u94fe\u6761\u3002\u673a\u68b0\u5e08\u5c06\u63d0\u4f9b\u7ef4\u4fee\uff0c\u7136\u540e\u7531\u653f\u5e9c\u62a5\u9500\uff0c\u8fd9\u610f\u5473\u7740\u516c\u6c11\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u6536\u5230\u4efb\u4f55\u94b1\u3002\n\u8fd9\u9879\u8ba1\u5212\u662f\u5728\u627f\u8bfa\u4e3a\u8fde\u63a5\u5df4\u9ece\u5e02\u4e2d\u5fc3\u548c\u4e3b\u8981\u90ca\u533a\u76849\u6761\u53d7\u4fdd\u62a4\u7684\u81ea\u884c\u8f66\u516c\u8def\u7f51\u63d0\u4f9b3\u4ebf\u6b27\u5143\u4e4b\u540e\u51fa\u53f0\u7684\u3002\u5b83\u5c06\u628a\u76ee\u524d370\u516c\u91cc\u7684\u81ea\u884c\u8f66\u9053\u589e\u52a0\u5230650\u516c\u91cc\u3002\n\u6cd5\u56fd\u653f\u5e9c\u6b63\u5728\u6162\u6162\u7ed3\u675f\u4ece5\u670811\u65e5\u5f00\u59cb\u7684\u5c01\u9501\uff0c\u81ea3\u6708\u4efd\u4ee5\u6765\uff0c\u9996\u6b21\u5141\u8bb8\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u91cd\u65b0\u4e0a\u8def\u3002\n\u9a91\u884c\u53ef\u4ee5\u4e0d\u53d7\u65f6\u95f4\u9650\u5236\uff0c\u5728\u79bb\u5bb6100\u516c\u91cc\u7684\u8303\u56f4\u5185\uff0c\u4e0d\u8d85\u8fc710\u4eba\uff0c\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u4e5f\u9700\u8981\u4fdd\u6301\u81f3\u5c1110\u7c73\u7684\u8ddd\u79bb\u3002\n\u804c\u4e1a\u8f66\u624b\uff0c\u6bd4\u5982\u4f4f\u5728\u5c3c\u65af\u9644\u8fd1\u7684\u514b\u91cc\u65af\u00b7\u5f17\u7f57\u59c6(Chris Froome)\uff0c\u53ef\u4ee5\u5728\u6237\u5916\u6062\u590d\u9ad8\u5f3a\u5ea6\u7684\u8bad\u7ec3\uff0c\u4f46\u5fc5\u987b\u81ea\u5df1\u9a91\u8f66\uff0c\u5e76\u5c0a\u91cd\u793e\u4f1a\u8ddd\u79bb\u3002", "note_en": "France has launched a \u20ac20 million scheme that will allow all citizens up to \u20ac50 for bike repairs.\n Cycle training and temporary parking spaces will also be provided by the funds, which have been introduced after French authorities wish to keep air pollution levels low after they dropped significantly during lockdown.\n &gt;&gt; Struggling to get to the shops\u00a0 try 6 issues of Cycling Weekly magazine for just \u00a36 delivered to your door &lt;&lt;\n 60 per cent of journeys in France are less than three miles in distance and Elisabeth Borne, the minister for Ecological Transition, says this scheme is aimed at reducing driving for short journeys.\n \u201cWe want this period to be a new stage towards a cycling culture and we want the bicycle to be the queen of deconfinement,\u201d Borne said.\n   A network of 3,000 registered mechanics will be set up, and \u20ac50 of repairs will be redeemable, such as tyre changes or chain replacements. The mechanics will provide the repairs and then be reimbursed by the government, meaning citizens will not actually receive any money.\n This scheme comes after \u20ac300 million was promised for a network of nine protected cycle highways linking the centre of Paris with key suburbs. It will increase the current 370km of bike paths to 650km.\n       The French government is slowly bringing its lockdown to a close from May 11, with cyclists allowed back onto the roads for the first time since March.\n Rides can be undertaken without a time limit, within 100km of your home, and with no more than 10 people, with cyclists also required to stay at least 10m apart.\n Pro riders, such as Chris Froome who lives near Nice, are allowed to resume high-intensity training outdoors but must ride on their own and respect social distancing.", "posttime": "2020-05-02 18:01:40", "tags": "\u81ea\u884c\u8f66,offers", "title": "\u4e00\u65e6\u5c01\u9501\u7ed3\u675f\uff0c\u6cd5\u56fd\u5411\u6bcf\u4f4d\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u63d0\u4f9b50\u6b27\u5143\u7684\u81ea\u884c\u8f66\u7ef4\u4fee\u8d39", "title_en": "France offers each cyclist \u20ac50 for bike repairs once lockdown ends", "transed": 0, "url": "https://www.cyclingweekly.com/news/latest-news/france-offers-each-cyclist-e50-for-bike-repairs-once-lockdown-ends-455140", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u81ea\u884c\u8f66", "offers"]}, {"category": "", "categoryclass": "", "imagename": "dd9aa5774e794d046367c98db6374860.jpeg", "infoid": 1000247, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9\u4e8e\u786c\u4ef6\u516c\u53f8\u6765\u8bf4\uff0c\u4eca\u5e74\u5df2\u7ecf\u5f00\u59cb\u4e86\u4e00\u4e2a\u574e\u5777\u7684\u5f00\u5c40\uff0c\u6211\u4eec\u624d\u521a\u521a\u5f00\u59cb\u770b\u5230\u51a0\u72b6\u75c5\u6bd2\u6700\u7ec8\u5c06\u5bf9\u5e02\u573a\u4ea7\u751f\u7684\u771f\u6b63\u5f71\u54cd\u3002ARM\u662f\u4e3a\u82f9\u679c\u3001\u9ad8\u901a\u548c\u4e09\u661f\u7b49\u6240\u6709\u516c\u53f8\u8bbe\u8ba1\u82af\u7247\u7684\u82f1\u56fd\u516c\u53f8\uff0c\u8be5\u516c\u53f8\u5e0c\u671b\u901a\u8fc7\u5411\u7b26\u5408\u6761\u4ef6\u7684\u521d\u521b\u516c\u53f8\u514d\u8d39\u63d0\u4f9b\u7ea675%\u7684\u82af\u7247\u7ec4\u5408\u6765\u542f\u52a8\u5f00\u53d1\u3002\n\u6b64\u4e3e\u6807\u5fd7\u7740\u8be5\u516c\u53f8\u7075\u6d3b\u51c6\u5165\u8ba1\u5212\u7684\u6269\u5927\u3002\u6709\u4e86\u5b83\uff0cARM\u5c06\u4e3a\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u7684\u521d\u521b\u4f01\u4e1a\u5f00\u653e\u5176\u77e5\u8bc6\u4ea7\u6743\u7684\u8bbf\u95ee\u3002\u867d\u7136\u4e00\u4e9b\u6700\u5927\u7684\u516c\u53f8\u4e3a\u8fd9\u4e9b\u4fe1\u606f\u5411\u82af\u7247\u8bbe\u8ba1\u8005\u652f\u4ed8\u4e86\u5927\u7b14\u8d39\u7528\uff0c\u4f46\u5bf9\u4e8e\u90a3\u4e9b\u521a\u521a\u8d77\u6b65\u7684\u516c\u53f8\u6765\u8bf4\uff0c\u6210\u672c\u53ef\u80fd\u662f\u4ee4\u4eba\u671b\u800c\u5374\u6b65\u7684\u3002\n\u9ad8\u7ea7\u526f\u603b\u88c1\u8fea\u666e\u8482\u00b7\u74e6\u67e5\u5c3c(Dipti Vachani)\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201c\u5728\u5f53\u4eca\u5145\u6ee1\u6311\u6218\u7684\u5546\u4e1a\u683c\u5c40\u4e2d\uff0c\u63a8\u52a8\u521b\u65b0\u81f3\u5173\u91cd\u8981-\u73b0\u5728\uff0c\u62e5\u6709\u51fa\u8272\u60f3\u6cd5\u7684\u521d\u521b\u4f01\u4e1a\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u9700\u8981\u6700\u5feb\u3001\u6700\u503c\u5f97\u4fe1\u8d56\u7684\u6210\u529f\u548c\u89c4\u6a21\u4e4b\u8def\u3002\u201dARM Startups\u7684\u7075\u6d3b\u63a5\u5165\u4e3a\u65b0\u8fdb\u5165\u7845\u4e1a\u7684\u516c\u53f8\u63d0\u4f9b\u4e86\u4e00\u6761\u66f4\u5feb\u3001\u66f4\u5177\u6210\u672c\u6548\u76ca\u7684\u5de5\u4f5c\u539f\u578b\u4e4b\u8def\uff0c\u4ece\u800c\u589e\u5f3a\u4e86\u6295\u8d44\u8005\u5bf9\u672a\u6765\u8d44\u91d1\u7684\u4fe1\u5fc3\u3002\u201c\u3002\n\u5bf9\u4e8e\u65b0\u5174\u7684\u521d\u521b\u516c\u53f8\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u673a\u4f1a\u3002\u5f53\u7136\uff0cARM\u8fd9\u6837\u505a\u4e0d\u4ec5\u4ec5\u662f\u51fa\u4e8e\u597d\u5fc3\u3002\u5728\u7ecf\u5386\u4e86\u51e0\u5e74\u7684\u5feb\u901f\u878d\u8d44\u548c\u589e\u957f\u540e\uff0c\u8be5\u884c\u4e1a\u53ef\u80fd\u4f1a\u51fa\u73b0\u524d\u6240\u672a\u6709\u7684\u653e\u7f13\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e2e\u52a9\u57f9\u80b2\u786c\u4ef6\u521d\u521b\u4f01\u4e1a\u80af\u5b9a\u7b26\u5408\u8be5\u516c\u53f8\u7684\u65e2\u5f97\u5229\u76ca\u3002\n\u611f\u5174\u8da3\u7684\u5404\u65b9\u53ef\u4ee5\u5728\u6b64\u5904\u8bbf\u95ee\u53ef\u7528IP\u7684\u5b8c\u6574\u5217\u8868\u3002ARM\u8ba4\u4e3a\uff0c\u63a8\u51fa\u9488\u5bf9\u521d\u521b\u4f01\u4e1a\u7684\u7075\u6d3b\u51c6\u5165\u53ef\u4ee5\u5e2e\u52a9\u516c\u53f8\u5c06\u4e0a\u5e02\u65f6\u95f4\u7f29\u77ed\u81f3\u591a\u4e00\u5e74\u3002", "note_en": "The year\u2019s already off to a rocky start for hardware companies, and we\u2019re only beginning to see the true impact COVID-19 will ultimately have on the market. Arm \u2014 the U.K. company behind the designs of chips for everyone from Apple to Qualcomm to Samsung \u2014 is hoping to kickstart developing  by offering up access to around 75% of its chip portfolio for free to qualified startups.\n The move marks an expansion of the company\u2019s Flexible Access program. With it, Arm will open access to its IP for early-stage startups. While some of the biggest companies pay the chip designer big bucks for that information, the cost can be prohibitive for those just starting out.\n \u201cIn today\u2019s challenging business landscape, enabling innovation is critical \u2013 now more than ever, startups with brilliant ideas need the fastest, most trusted route to success and scale,\u201d SVP Dipti Vachani, said in a statement. \u201cArm Flexible Access for Startups offers new silicon entrants a faster, more cost-efficient path to working prototypes, resulting in strengthened investor confidence for future funding.\u201d\n  It\u2019s a nice bit of access for up and coming startups. Of course, Arm\u2019s not simply doing this out of the goodness of its heart. The company certainly has a vested interest in helping foster hardware startups amid what could shape up to be an unprecedented slowdown for the industry after a few years of rapid funding and growth.\n Interested parties can access the full list of available IP  here. Arm believes the launch of Flexible Access for Startups could help companies accelerate time to market by up to a year.", "posttime": "2020-05-02 18:01:38", "tags": "\u514d\u8d39,\u82af\u7247,\u8bbe\u8ba1,\u5904\u4e8e,offering", "title": "ARM\u5411\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u7684\u521d\u521b\u4f01\u4e1a\u63d0\u4f9b\u514d\u8d39\u4f7f\u7528\u5176\u82af\u7247\u8bbe\u8ba1\u7684\u673a\u4f1a", "title_en": "Arm is offering early-stage startups free access to its chip designs", "transed": 0, "url": "https://techcrunch.com/2020/04/29/arm-is-offering-early-stage-startups-free-access-to-its-chip-designs/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u514d\u8d39", "\u82af\u7247", "\u8bbe\u8ba1", "\u5904\u4e8e", "offering"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000246, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Erlang VM\u5728Rust\u4e2d\u7684\u5b9e\u73b0\u3002\u6309\u7167\u8fd9\u4e2a\u91cd\u8981\u6027\u987a\u5e8f\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5b8c\u6574\u3001\u6b63\u786e\u548c\u5feb\u901f\u3002\n\u517c\u5bb9OTP 22+(\u76ee\u524d\u6ca1\u6709\u5206\u53d1\u7684\u6bd4\u7279)-\u6240\u6709\u7684\u4ee3\u7801\u6700\u7ec8\u90fd\u5e94\u8be5\u4e0d\u53d8\u5730\u5728Enigma\u4e0a\u8fd0\u884c\u3002\u4e0d\u652f\u6301\u4e0d\u63a8\u8350\u4f7f\u7528\u7684\u64cd\u4f5c\u7801\u3002\n\u56e0\u4e3a\u5b83\u5f88\u6709\u8da3\uff0c\u800c\u4e14\u6211\u5b66\u5230\u4e86\u5f88\u591a\u3002BEAM\u548cHIPE\u5f88\u68d2\uff0c\u4f46\u5b83\u4eec\u90fd\u5f88\u5927(\u7ea6300K SLOC)\u3002\u4e00\u4e2a\u5c0f\u7684\u5b9e\u73b0\u4f7f\u65b0\u624b\u66f4\u5bb9\u6613\u5b66\u4e60Erlang\u5185\u90e8\u3002\u6211\u4eec\u8fd8\u5f97\u5230\u4e86\u4e00\u4e2a\u5e73\u53f0\uff0c\u53ef\u4ee5\u5feb\u901f\u8fed\u4ee3\u5305\u542b\u5728BEAM\u4e2d\u7684\u60f3\u6cd5\u3002\n\u5efa\u9020\u8c1c\u56e2\u7684\u552f\u4e00\u524d\u63d0\u662f\u94c1\u9508\u3002\u4f7f\u7528Ruaste\u5b89\u88c5\u6700\u65b0\u7684\u591c\u95f4\u94c1\u9508\u3002\u76ee\u524d\uff0c\u6211\u4eec\u4e0d\u518d\u652f\u6301\u7a33\u5b9a/\u6d4b\u8bd5\u7248\uff0c\u56e0\u4e3a\u6211\u4eec\u4f9d\u8d56\u5f02\u6b65/\u7b49\u5f85\uff0c\u8ba1\u5212\u57282019\u5e74\u7b2c\u4e09\u5b63\u5ea6\u7684\u67d0\u4e2a\u65f6\u5019\u8fd0\u884c\u4e0d\u7a33\u5b9a\u7248\u3002\n\u8981\u542f\u52a8OTP\uff0c\u60a8\u8fd8\u9700\u8981\u7f16\u8bd1\u6807\u51c6\u5e93\u3002\u76ee\u524d\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6881\u6784\u5efa\u7cfb\u7edf\uff1a\n\u6211\u4eec\u5e0c\u671b\u5728\u5c06\u6765(\u4e00\u65e6Enigma\u53ef\u4ee5\u8fd0\u884c\u7f16\u8bd1\u5668)\u7b80\u5316\u8fd9\u4e00\u6b65\u3002\n\u8fd0\u884cCargo Run\u4ee5\u5b89\u88c5\u4f9d\u8d56\u9879\u3001\u6784\u5efa\u548c\u8fd0\u884cVM\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u5f15\u5bfcErlang shell(IEX\u4e5f\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u6709\u4e00\u4e9b\u5448\u73b0\u9519\u8bef)\u3002\n\u4e00\u65e6\u6211\u4eec\u8fbe\u5230\u4e00\u5b9a\u7684\u7a33\u5b9a\u6027\uff0c\u5404\u79cd\u5e73\u53f0\u7684\u9884\u5efa\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u53ef\u7528\u3002\n\u6211\u4eec\u5b9e\u73b0\u4e86\u5927\u90e8\u5206\u64cd\u4f5c\u7801\uff0c\u4ee5\u53ca\u5927\u7ea6\u4e00\u534a\u7684BIF\u3002\u60a8\u53ef\u4ee5\u67e5\u770b\u64cd\u4f5c\u7801\u6216BIF\u7684\u8be6\u7ec6\u8fdb\u5ea6\u660e\u7ec6\u3002\n\u7aef\u53e3(\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u652f\u6301\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5f15\u5bfc\u5173\u952e\u7aef\u53e3\u4f5c\u4e3a\u5185\u7f6e\u7aef\u53e3\uff1aTTY\u3001FD)\u3002\nNIF/BIF\u662f\u5728\u67d0\u4e9b\u70b9\u4e0a\u8fdb\u884c\u6536\u76ca\u7684\u671f\u8d27\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u51cf\u6301(\u5141\u8bb8\u66f4\u7b80\u5355\u7684\u6536\u76ca\u5b9e\u73b0)\u3002\n\u7f16\u5199\u66f4\u591a\u5173\u4e8e\u8bb0\u5f55\u8f83\u5c11\u7684\u5149\u675f\u65b9\u9762\u7684\u6587\u6863(\u4e8c\u8fdb\u5236\u5339\u914d\u3001\u65f6\u95f4\u8f6e\u3001\u8fdb\u7a0b\u76d1\u89c6\u5668\u7b49)\u3002\n\u5728\u865a\u62df\u673a\u6ca1\u6709\u8fbe\u5230\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5b8c\u6574\u6027\u4e4b\u524d\uff0c\u8003\u8651\u8fd9\u4e9b\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\n\u6ce8\u610f\uff1aNIF/FFI ABI\u4e0eOTP\u7684\u517c\u5bb9\u6027\u5c06\u662f\u76f8\u5f53\u8270\u5de8\u7684\u5de5\u4f5c\u3002\u4f46\u662f\uff0c\u94c1\u9508\u98ce\u683c\u7684NIF\u754c\u9762\u5c06\u53ef\u7528\u3002\u4e5f\u6709\u53ef\u80fd\u4f7f\u9002\u914d\u5668\u4e0eRustler\u517c\u5bb9\u3002\n\u6700\u7b80\u5355\u7684\u5165\u95e8\u65b9\u6cd5\u662f\u67e5\u770bNotes\u6587\u4ef6\u5939\uff0c\u7136\u540e\u9009\u62e9\u8981\u5b9e\u73b0\u7684BIF\u6216\u64cd\u4f5c\u7801\u3002\u8bf7\u770b\u4e00\u4e0bsrc/bin.rs\u548cbif\u6587\u4ef6\u5939\uff0c\u4e86\u89e3\u5176\u4ed6BIF\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u4e5f\u6709\u51e0\u4e2a\u95ee\u9898\u5f00\u653e\u4e0e\u826f\u597d\u7684\u7b2c\u4e00\u671f\u6807\u7b7e\uff0c\u8fd9\u4e5f\u5c06\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5185\u90e8\u4ecb\u7ecd\u3002\n\u6216\u8005\uff0c\u5728\u4ee3\u7801\u5e93\u4e2d\u641c\u7d22TODO\u3001FIXME\u6216UNIMPLEMED\uff01\uff0c\u5b83\u4eec\u6807\u8bb0\u4e86\u5b58\u5728\u90e8\u5206\u5b9e\u73b0\u7684\u5404\u4e2a\u4f4d\u7f6e\uff0c\u4f46\u9700\u8981\u505a\u66f4\u591a\u7684\u5de5\u4f5c\u3002\n\u76ee\u524d\u7f3a\u5c11\u6d4b\u8bd5\u8986\u76d6\u9762\uff0c\u5e76\u4e14\u6709\u4e0d\u540c\u7ea7\u522b\u7684\u6587\u6863\uff1b\u6211\u5c06\u5f88\u5feb\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002", "note_en": "An implementation of the Erlang VM in Rust. We aim to be complete, correct andfast, in that order of importance.\n OTP 22+ compatible (sans the distributed bits for now) \u2014 all your codeshould eventually run on Enigma unchanged. Deprecated opcodes won&#39;t besupported.\n  Because it&#39;s fun and I&#39;ve been learning a lot. BEAM and HiPE are awesome, butthey&#39;re massive (~300k SLOC). A small implementation makes it easier for newpeople to learn Erlang internals. We also get a platform to quickly iterate onideas for inclusion into BEAM.\n  Only prerequisite to building Enigma is Rust. Use  rustupto install the latest nightly rust. At this time we don&#39;t support stable / betaanymore, because we&#39;re relying on async/await, which is scheduled to run instable some time in Q3 2019.\n To boot up OTP you will also need to compile the standard library. At themoment, that relies on the BEAM build system:\n  We hope to simplify this step in the future (once enigma can run the compiler).\n Run  cargo run to install dependencies, build and run the VM. By default, itwill boot up the erlang shell ( iex also works, but has some rendering bugs).\n  Pre-built binaries for various platforms will be available, once we reach a certain level of stability.\n  We implement most of the opcodes, and about half of all BIFs. You can viewa detailed progress breakdown on  opcodes or  BIFs.\n    Ports (might never be fully supported, we provide a few boot-critical ones as builtins: tty, fd)\n   NIF/BIFs are futures that yield at certain points to play nice with reductions(allows a much simpler yielding implementation)\n  Write more documentation about more sparsely documented BEAM aspects (binary matching, time wheel, process monitors, ...)\n  Until the VM doesn&#39;t reach a certain level of completeness, it doesn&#39;t make sense to consider these.\n  Note: NIF/FFI ABI compatibility with OTP is going to be quite some work. But,a rust-style NIF interface will be available. It would also probably be possibleto make an adapter compatible with  rustler.\n   The easiest way to get started is to look at the  notes folder and pick a BIFor an opcode to implement. Take a look at  src/bif.rs and the  bif folder onhow other BIFs are implemented. There&#39;s also a few issues open with the  good first issue tag, which would also be a good introduction to the internals.\n Alternatively, search the codebase for  TODO,  FIXME or  unimplemented!,those mark various places where a partial implementation exists, but a bit morework needs to be done.\n Test coverage is currently lacking, and there&#39;s varying levels of documentation; I will be addressing these soon.", "posttime": "2020-05-02 18:01:32", "tags": "rust,erlang,run", "title": "\u8c1c\u56e2\uff1aErlang VM\u5728Rust\u4e2d\u7684\u5b9e\u73b0", "title_en": "Enigma: Erlang VM Implementation in Rust", "transed": 0, "url": "https://github.com/archseer/enigma", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["rust", "erlang", "run"]}, {"category": "", "categoryclass": "", "imagename": "2aadf70d9c4fd5c63e2fa4bf4265bb89.jpg", "infoid": 1000245, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6770\u5f17\u91cc\u00b7\u7231\u6cfc\u65af\u5766(Jeffrey Epstein)\u7684\u6570\u767e\u4e07\u7f8e\u5143\u4e3a\u4ed6\u5728\u54c8\u4f5b\u5927\u5b66\u8d62\u5f97\u4e86\u7279\u6b8a\u5f85\u9047\uff1a\u4ed6\u5728\u5927\u5b66\u7814\u7a76\u4eba\u5458\u4e2d\u6709\u4e00\u95f4\u79c1\u4eba\u529e\u516c\u5ba4\uff0c\u4e00\u6761\u4e13\u7528\u7535\u8bdd\u7ebf\uff0c\u4e00\u4e2a\u4e0d\u540c\u5bfb\u5e38\u7684\u8bbf\u95ee\u5956\u5b66\u91d1\u804c\u4f4d\uff0c\u8fd8\u6709\u51e0\u540d\u9ad8\u7ea7\u6559\u804c\u5458\u5de5\u7684\u652f\u6301\uff0c\u8fd9\u4e9b\u6559\u804c\u5458\u5de5\u6566\u4fc3\u7ba1\u7406\u8005\u63a5\u53d7\u8fd9\u4f4d\u91d1\u878d\u5bb6\u7684\u94b1\uff0c\u5c3d\u7ba1\u4ed6\u6709\u767b\u8bb0\u5728\u6848\u7684\u6027\u72af\u7f6a\u8005\u7684\u8bb0\u5f55\u3002\n\u5728\u5468\u4e94\u53d1\u5e03\u7684\u4e00\u4efd\u62a5\u544a\u4e2d\uff0c\u54c8\u4f5b\u6982\u8ff0\u4e86\u4e0e\u81ed\u540d\u662d\u8457\u7684\u7231\u6cfc\u65af\u5766\u7684\u8fd9\u4e9b\u5e7f\u6cdb\u8054\u7cfb\uff0c\u8be6\u7ec6\u63cf\u8ff0\u4e86\u4e00\u6bb5\u8de8\u8d8a25\u5e74\u4ee5\u4e0a\u7684\u5173\u7cfb\u3002\n\u7231\u6cfc\u65af\u5766\u53bb\u5e74\u590f\u5929\u663e\u7136\u662f\u81ea\u6740\u8eab\u4ea1\uff0c\u5f53\u65f6\u4ed6\u56e0\u88ab\u6307\u63a7\u6027\u4ea4\u6613\u672a\u6210\u5e74\u4eba\u800c\u88ab\u5173\u62bc\u5728\u66fc\u54c8\u987f\u7684\u4e00\u6240\u76d1\u72f1\u91cc\uff0c\u4f46\u4ed6\u7684\u4eb2\u5bc6\u5173\u7cfb\u4ee5\u53ca\u5bf9\u79d1\u5b66\u5bb6\u548c\u5b66\u8005\u7684\u7ecf\u6d4e\u652f\u6301\u7ee7\u7eed\u9707\u64bc\u7740\u54c8\u4f5b\u548c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7b49\u9ad8\u7b49\u6559\u80b2\u673a\u6784\u3002\n\u6839\u636e\u54c8\u4f5b\u5927\u5b66\u6cd5\u5f8b\u603b\u987e\u95ee\u548c\u4e00\u5bb6\u5916\u90e8\u5f8b\u5e08\u4e8b\u52a1\u6240\u957f\u8fbe\u4e00\u4e2a\u6708\u7684\u8c03\u67e5\uff0c\u8be5\u5927\u5b66\u57281998\u5e74\u81f32007\u5e74\u671f\u95f4\u4ece\u7231\u6cfc\u65af\u5766\u90a3\u91cc\u83b7\u5f97\u4e86920\u4e07\u7f8e\u5143\u3002\u5728\u7231\u6cfc\u65af\u57662008\u5e74\u88ab\u5224\u6709\u6027\u7f6a\u540e\uff0c\u5f53\u65f6\u7684\u54c8\u4f5b\u6821\u957f\u5fb7\u9c81\u00b7\u5409\u5c14\u5e73\u00b7\u6d6e\u58eb\u5fb7(Drew Gilpin Faust)\u7981\u6b62\u4e86\u8fd9\u4f4d\u91d1\u878d\u5bb6\u7684\u4efb\u4f55\u6350\u6b3e\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6d6e\u58eb\u5fb7\u7684\u51b3\u5b9a\u5bf9\u54c8\u4f5b\u5185\u90e8\u7684\u4e00\u4e9b\u6559\u804c\u5458\u5de5\u548c\u7b79\u6b3e\u4eba\u6765\u8bf4\u5e76\u4e0d\u6e05\u695a\uff0c\u4ed6\u4eec\u591a\u5e74\u6765\u4e00\u76f4\u5728\u6e38\u8bf4\u7ba1\u7406\u4eba\u5458\u4ece\u7231\u6cfc\u65af\u5766\u90a3\u91cc\u62ff\u94b1\u3002\n\u4e2a\u522b\u6559\u6388\u5728\u88ab\u5b9a\u7f6a\u540e\u4e5f\u7ee7\u7eed\u4e0e\u7231\u6cfc\u65af\u5766\u4fdd\u6301\u8054\u7cfb\uff0c\u4e0e\u4ed6\u4f1a\u9762\uff0c\u524d\u5f80\u4ed6\u7684\u5bb6\u4e2d\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd8\u53d7\u76ca\u4e8e\u8fd9\u4f4d\u91d1\u878d\u5bb6\u4e0e\u5176\u4ed6\u53ef\u4ee5\u652f\u6301\u5b66\u672f\u7814\u7a76\u7684\u5bcc\u6709\u6350\u8d60\u8005\u7684\u5173\u7cfb\u3002\n\u54c8\u4f5b\u5927\u5b66\u6821\u957f\u52b3\u4f26\u65af\u00b7\u5df4\u8003(Lawrence Bacow)\u5728\u5411\u793e\u533a\u53d1\u8868\u7684\u8bb2\u8bdd\u4e2d\u8868\u793a\uff0c\u8be5\u6821\u5c06\u5ba1\u67e5\u5176\u5907\u53d7\u4e89\u8bae\u7684\u793c\u7269\u653f\u7b56\u4e2d\u7684\u6f0f\u6d1e\u3002\n\u5df4\u8003\u5728\u7ed9\u54c8\u4f5b\u793e\u533a\u7684\u4e00\u5c01\u4fe1\u4e2d\u8bf4\uff1a\u201c\u4eca\u5929\u53d1\u5e03\u7684\u62a5\u544a\u63cf\u8ff0\u4e86\u6709\u539f\u5219\u7684\u51b3\u7b56\uff0c\u4f46\u4e5f\u63ed\u793a\u4e86\u5fc5\u987b\u89e3\u51b3\u7684\u5236\u5ea6\u548c\u4e2a\u4eba\u7f3a\u9677-\u4e0d\u4ec5\u662f\u4e3a\u4e86\u5927\u5b66\uff0c\u4e5f\u662f\u4e3a\u4e86\u8868\u5f70\u90a3\u4e9b\u8bd5\u56fe\u5c06\u7231\u6cfc\u65af\u5766\u7ef3\u4e4b\u4ee5\u6cd5\u7684\u52c7\u6562\u7684\u4e2a\u4eba\u3002\u201d\n\u5468\u4e94\uff0c\u54c8\u4f5b\u8fd8\u5ba3\u5e03\uff0c\u7531\u4e8e\u9a6c\u4e01\u00b7\u8bfa\u74e6\u514b(Martin Nowak)\u4e0e\u7231\u6cfc\u65af\u5766\u7684\u5173\u7cfb\uff0c\u4ee5\u53ca\u53ef\u80fd\u8fdd\u53cd\u8be5\u6821\u5b89\u5168\u548c\u62e8\u6b3e\u653f\u7b56\u7684\u884c\u4e3a\uff0c\u54c8\u4f5b\u5df2\u7ecf\u8ba9\u751f\u7269\u548c\u6570\u5b66\u6559\u6388\u3001\u54c8\u4f5b\u8fdb\u5316\u52a8\u529b\u5b66\u9879\u76ee(Program For Evative Dynamics)\u4e3b\u4efb\u9a6c\u4e01\u00b7\u8bfa\u74e6\u514b(Martin Nowak)\u5e26\u85aa\u884c\u653f\u4f11\u5047\u3002\n\u7231\u6cfc\u65af\u5766\u7684\u5927\u90e8\u5206\u54c8\u4f5b\u57fa\u91d1\uff0c2003\u5e74\u4e3a650\u4e07\u7f8e\u5143\uff0c\u90fd\u7528\u4e8e\u5efa\u7acb\u8bfa\u74e6\u514b\u7684\u9879\u76ee\u3002\u6839\u636e\u8fd9\u4efd\u62a5\u544a\uff0c\u591a\u5e74\u6765\uff0c\u7231\u6cfc\u65af\u5766\u7ecf\u5e38\u51fa\u73b0\u5728\u8be5\u9879\u76ee\u4f4d\u4e8e\u54c8\u4f5b\u5e7f\u573a\u7684\u529e\u516c\u5ba4\u3002\n\u5728\u8be5\u9879\u76ee\u7684\u5927\u697c\u91cc\uff0c\u7a7a\u95f4\u5f88\u5c11\uff0c\u4f46Office 610\u88ab\u79f0\u4e3a\u201c\u6770\u5f17\u91cc\u529e\u516c\u5ba4\u201d\uff0c\u7231\u6cfc\u65af\u5766\u7528\u81ea\u5df1\u7684\u5730\u6bef\u548c\u7167\u7247\u88c5\u9970\u4e86\u5b83\u3002\u636e\u62a5\u9053\uff0c\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u7231\u6cfc\u65af\u5766\u751a\u81f3\u6709\u81ea\u5df1\u7684\u54c8\u4f5b\u7535\u8bdd\u7ebf\u3002\n2010\u5e74\u51fa\u72f1\u540e\uff0c\u4ed6\u53bb\u8fc7\u90a3\u91cc40\u591a\u6b21\uff0c\u4e00\u76f4\u52302018\u5e74\uff0c\u7ecf\u5e38\u548c\u62c5\u4efb\u4ed6\u52a9\u624b\u7684\u5e74\u8f7b\u5973\u6027\u5728\u4e00\u8d77\u3002\u5c3d\u7ba1\u4e0e\u54c8\u4f5b\u6ca1\u6709\u5b98\u65b9\u8054\u7cfb\uff0c\u7231\u6cfc\u65af\u5766\u8fd8\u662f\u62ff\u5230\u4e86\u8fdb\u5165\u5927\u697c\u548c\u529e\u516c\u5ba4\u7684\u94a5\u5319\u5361\u3002\n\u636e\u62a5\u9053\uff0c\u8bfa\u74e6\u514b\u5141\u8bb8\u7231\u6cfc\u65af\u5766\u5728\u9547\u4e0a\u65f6\u4f7f\u7528\u8be5\u7ec4\u7ec7\u7684\u529e\u516c\u5ba4\u4e3e\u529e\u665a\u5bb4\uff0c\u5e76\u4f1a\u89c1\u54c8\u4f5b\u5927\u5b66\u6559\u5e08\u3001\u5730\u533a\u5b66\u8005\u548c\u653f\u754c\u4eba\u58eb\u3002\n\u7231\u6cfc\u65af\u5766\u7684\u6765\u8bbf\u53ea\u662f\u5728\u8bfa\u74e6\u514b\u5c0f\u7ec4\u7684\u7814\u7a76\u4eba\u5458\u62b1\u6028\u4e4b\u540e\u624d\u505c\u6b62\u7684\u3002\n2013\u5e74\uff0c\u968f\u7740\u66f4\u591a\u9488\u5bf9\u7231\u6cfc\u65af\u5766\u7684\u7834\u574f\u6027\u6307\u63a7\u51fa\u73b0\u5728\u5a92\u4f53\u4e0a\uff0c\u4ed6\u8bd5\u56fe\u63d0\u5347\u81ea\u5df1\u4f5c\u4e3a\u4e0e\u7cbe\u82f1\u673a\u6784\u6709\u6148\u5584\u5173\u7cfb\u7684\u79d1\u5b66\u6350\u8d60\u8005\u7684\u58f0\u8a89\u3002\u8bfa\u74e6\u514b\u5141\u8bb8\u7231\u6cfc\u65af\u5766\u5c06\u4ed6\u7684\u57fa\u91d1\u4f1a\u94fe\u63a5\u5230\u8fd9\u4f4d\u6559\u6388\u7684\u54c8\u4f5b\u7f51\u7ad9\u3002\u8bfa\u74e6\u514b\u8fd8\u5728\u4ed6\u7684\u54c8\u4f5b\u7f51\u7ad9\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u7f51\u9875\uff0c\u4e13\u95e8\u4ecb\u7ecd\u7231\u6cfc\u65af\u5766\u5bf9\u8be5\u7814\u7a76\u9879\u76ee\u7684\u8d21\u732e\u30022014\u5e74\u672b\uff0c\u6027\u4fb5\u5e78\u5b58\u8005\u6743\u76ca\u5021\u5bfc\u8005\u8054\u7cfb\u4e86\u6d6e\u58eb\u5fb7\u548c\u8bfa\u74e6\u514b\u7684\u7ec4\u7ec7\uff0c\u8fd9\u4e00\u505a\u6cd5\u624d\u7ed3\u675f\u3002..\u3002\n\u62a5\u544a\u79f0\uff0c\u8bfa\u74e6\u514b\u548c\u54c8\u4f5b\u533b\u5b66\u9662\u6559\u6388\u4e54\u6cbb\u00b7\u4e18\u5947\u4e5f\u53d7\u76ca\u4e8e\u7231\u6cfc\u65af\u5766\u4e0e\u5176\u4ed6\u5bcc\u6709\u6350\u8d60\u8005\u7684\u5173\u7cfb\uff0c\u5728\u7231\u6cfc\u65af\u5766\u4ecb\u7ecd\u540e\uff0c\u4ed6\u4eec\u57282010\u5e74\u81f32015\u5e74\u95f4\u83b7\u5f97\u4e86\u6570\u767e\u4e07\u7f8e\u5143\u7684\u8d44\u91d1\u3002\n\u54c8\u4f5b\u5927\u5b66\u7684\u62a5\u544a\u8fd8\u53d1\u73b0\uff0c\u5728\u7533\u8bf7\u57fa\u91d1\u4f1a\u62e8\u6b3e\u65f6\uff0c\u8bfa\u74e6\u514b\u8c0e\u79f0\u7231\u6cfc\u65af\u5766\u7684\u4e00\u5bb6\u975e\u8425\u5229\u6027\u7ec4\u7ec7\u7ed9\u4e86\u4ed6\u7684\u7ec4\u7ec7\u8d44\u91d1\u3002\n\u8be5\u62a5\u544a\u8fd8\u8d28\u7591\u4e86\u5f53\u65f6\u7684\u5fc3\u7406\u5b66\u7cfb\u4e3b\u4efb\u65af\u8482\u82ac\u00b7\u79d1\u65af\u6797(Stephen Kosslyn)\u57282005\u5e74\u7ed9\u4e88\u7231\u6cfc\u65af\u5766\u4e00\u4e2a\u5ba2\u5ea7\u7814\u7a76\u5458\u804c\u4f4d\u7684\u51b3\u5b9a\u3002\u79d1\u65af\u6797\u662f\u54c8\u4f5b\u5927\u5b66\u7684\u8363\u4f11\u6559\u6388\uff0c\u4ed6\u4e3a\u7231\u6cfc\u65af\u5766\u62c5\u4fdd\uff0c\u5c3d\u7ba1\u8fd9\u4f4d\u91d1\u878d\u5bb6\u6ca1\u6709\u5b66\u58eb\u5b66\u4f4d\u548c\u8d44\u683c\u6765\u8fdb\u884c\u8fd9\u4e00\u804c\u4f4d\u6240\u9700\u7684\u4e00\u4e9b\u7814\u7a76\u3002\n\u5728\u4f5c\u4e3a\u5ba2\u5ea7\u7814\u7a76\u5458\u7684\u7b2c\u4e8c\u5e74\u7533\u8bf7\u4e66\u4e2d\uff0c\u7231\u6cfc\u65af\u5766\u5199\u9053\uff0c\u4ed6\u8ba1\u5212\u7814\u7a76\u201c\u6743\u529b\u7684\u6765\u6e90\u201d(\u4e3a\u4ec0\u4e48\u6bcf\u4e2a\u4eba\u90fd\u60f3\u8981\uff1f)\u3002\u5728\u4e00\u4e2a\u751f\u6001\u793e\u4f1a\u7cfb\u7edf\u4e2d\uff0c\u5b83\u5c06\u5305\u62ec\u58f0\u8a89\u3001\u4fe1\u4efb\u6216\u656c\u754f\u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u5185\u5728\u7684\u6218\u7565\u4e0a\u4e0d\u540c\u7684\u6b3a\u9a97\u7b56\u7565\u3002\u201c\u3002\n\u7136\u800c\uff0c\u7231\u6cfc\u65af\u5766\u57282006\u5e74\u79cb\u5929\u4e0d\u5f97\u4e0d\u9000\u51fa\u5956\u5b66\u91d1\uff0c\u5f53\u65f6\u4ed6\u9762\u4e34\u4f5b\u7f57\u91cc\u8fbe\u5dde\u975e\u6cd5\u4e0e\u672a\u6210\u5e74\u4eba\u53d1\u751f\u6027\u884c\u4e3a\u7684\u6307\u63a7\u3002\n\u79d1\u65af\u6797\u5468\u4e94\u6ca1\u6709\u56de\u590d\u8bb0\u8005\u7684\u7f6e\u8bc4\u8bf7\u6c42\uff0cb", "note_en": "Jeffrey Epstein\u2019s millions earned him special treatment at Harvard: He had a personal office among university researchers, a dedicated phone line, an unusual visiting fellowship position, and the backing of several high-level faculty who urged administrators to take the financier\u2019s money despite his record as a registered sex offender.\n In a report released on Friday, Harvard outlined these extensive ties with the notorious Epstein, detailing a relationship that spanned more than 25 years.\n Epstein died by an apparent suicide last summer in a Manhattan jail where he was being held on charges of sex trafficking of minors, but his close relationships and financial support of scientists and academics continue to rock higher-education institutions such as Harvard and MIT.\n According to a months-long investigation by Harvard\u2019s general counsel and an outside law firm, the university received $9.2 million from Epstein between 1998 and 2007. After Epstein\u2019s 2008 sex conviction, Harvard\u2019s then-president Drew Gilpin Faust barred any more donations from the financier. Still, Faust\u2019s decision wasn\u2019t clear to some faculty and fund-raisers within Harvard who continued to lobby administrators over the years to take money from Epstein.\n Individual professors also continued their relationships with Epstein after the conviction, meeting with him, traveling to his homes, and in some cases benefiting from the financier\u2019s connections to other wealthy donors who could support academic research.\n In a message to the community, Harvard president Lawrence Bacow said that the university will review gaps in its controversial gifts policies.\n \u201cThe report issued today describes principled decision-making but also reveals institutional and individual shortcomings that must be addressed \u2014 not only for the sake of the University but also in recognition of the courageous individuals who sought to bring Epstein to justice,\u201d Bacow said in a message to the Harvard community.\n On Friday, Harvard also announced that it had placed Martin Nowak, a biology and math professor and director of Harvard\u2019s Program for Evolutionary Dynamics, on paid administrative leave over his ties to Epstein and potential violations of the university\u2019s security and grant funding policies.\n   The bulk of Epstein\u2019s Harvard funding, $6.5 million in 2003, went toward establishing Nowak\u2019s program. Over the years, Epstein was a frequent presence at the program\u2019s offices in Harvard Square, according to the report.\n In the program\u2019s building, space was scarce, but Office 610 was known as \u201cJeffrey\u2019s Office\u201d and Epstein decorated it with his own rug and photographs. For a time, Epstein even had his own Harvard phone line, according to the report.\n He visited there more than 40 times after he was released from jail in 2010 up until 2018, routinely with young women who acted as his assistants. Despite no official connection with Harvard, Epstein was given key cards to enter the building and office.\n Nowak allowed Epstein to use the group\u2019s offices to host dinners and meet with Harvard faculty, area academics, and political figures when he was in town, according to the report.\n Epstein\u2019s visits stopped only after researchers in Nowak\u2019s group complained about them.\n In 2013, as more damaging allegations against Epstein appeared in the media, he sought to burnish his reputation as a scientific benefactor with philanthropic ties to elite institutions. Nowak allowed Epstein to link his foundations to the professor \u2019s Harvard website. Nowak also created a webpage on his Harvard site dedicated to Epstein \u2019s contributions to the research program. The practice only ended when sexual assault survivor advocates contacted Faust and Nowak \u2019s group in late 2014.  ...\n  Nowak and Harvard Medical School professor George Church also benefited from Epstein\u2019s connections to other wealthy donors, receiving millions of dollars in funding between 2010 and 2015 after Epstein made introductions, according to the report.\n Harvard\u2019s report also found that in applying for a foundation grant, Nowak falsely stated that an Epstein nonprofit had given his group money.\n The report also questioned the decision by Stephen Kosslyn, then chairman of the psychology department, to award Epstein a visiting fellow position in 2005. Kosslyn, a professor emeritus at Harvard, vouched for Epstein despite the financier\u2019s lack of a bachelor\u2019s degree and qualifications to conduct some of the research required of the position.\n In his application for a second year as a visiting fellow, Epstein wrote Harvard that he planned to study the \u201cderivation of \u2018power\u2019 (Why does everybody want it?) in an ecological social system that would include variables for reputation, trust or awe, and the inherent strategically diverse tactics of deception.\u201d\n Epstein, however, had to withdraw from the fellowship in the fall of 2006 when he faced Florida charges of unlawful sex with minors.\n Kosslyn did not respond to a request for comment Friday, but told Harvard\u2019s investigators that Epstein \u201cwas barely ever around&#34; during his fellowship, according to the report.\n The 27-page report makes just a glancing mention of the more informal ties that Epstein cultivated with Harvard \u2019s top academics. In 2008, Harvard Law School professor emeritus Alan Dershowitz helped Epstein secure an advantageous plea deal with Florida federal prosecutors related to the sexual abuse charges. One of Epstein \u2019s accusers has alleged that Dershowitz had sex with her when she was under-aged. Dershowitz has denied those allegations and filed a defamation lawsuit against  ...\n  A 2003 article in the Harvard student newspaper also noted that then-university president Larry Summers was well acquainted with Epstein.\n A footnote in Friday\u2019s Harvard report noted, \u201cA number of the Harvard faculty members we interviewed also acknowledged that they visited Epstein at his homes in New York, Florida, New Mexico, or the Virgin Islands, visited him in jail or on work release, or traveled on one of his planes. Faculty members told us that they undertook these off-campus activities primarily in their personal capacities rather than as representatives of Harvard.\u201d\n The report said these additional meetings with Epstein did not seem to violate Harvard\u2019s rules or policies.\n Claudine Gay, Harvard\u2019s dean of the faculty of arts and sciences, said officials will review Nowak\u2019s conduct.\n \u201cWe are reminded on a near daily basis what a privilege it is to be a member of this academic community,\u201d Gay said in her message to Harvard\u2019s students and faculty. \u201cWith that privilege comes a responsibility to hold one another accountable and to make sure, as an institution, we align our practices with the highest ethical standards.\u201d\n  Harvard\u2019s review of its Epstein\u2019s ties comes four months after  MIT released its investigation of the financier\u2019s ties to that institution.\n MIT found that Epstein made at least nine visits to its campus and gave the university $850,000, and that top administrators, including members of the university president\u2019s senior team, and some faculty members showed \u201csignificant errors in judgement\u201d in agreeing to take money from Epstein.\n At MIT, former Media Lab director Joi Ito, who courted Epstein\u2019s money, resigned after the ties became public last fall. The university\u2019s mechanical engineering professor Seth Lloyd, who also sought and received Epstein funding, was placed on paid administrative leave while his department reviewed disciplinary procedures.\n The report cleared MIT president L. Rafael Reif of any wrongdoing and said he had no involvement in approving the gifts. Still, the Epstein episode roiled that campus and left many faculty members unsatisfied with Reif\u2019s leadership.", "posttime": "2020-05-02 18:01:27", "tags": "\u5927\u5b66,\u54c8\u4f5b\u5927\u5b66,epstein,\u7231\u6cfc\u65af\u5766", "title": "\u65b0\u62a5\u544a\u663e\u793a\uff0c\u6770\u5f17\u91cc\u00b7\u7231\u6cfc\u65af\u5766\u4e0e\u54c8\u4f5b\u5927\u5b66\u7684\u8054\u7cfb\u5e7f\u6cdb", "title_en": "Jeffrey Epstein\u2019s Harvard ties were extensive, new report reveals", "transed": 0, "url": "https://www.bostonglobe.com/2020/05/01/metro/jeffrey-epsteins-harvard-ties-were-extensive-new-report-reveals/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5927\u5b66", "\u54c8\u4f5b\u5927\u5b66", "epstein", "\u7231\u6cfc\u65af\u5766"]}, {"category": "", "categoryclass": "", "imagename": "94f4f960c1b1740ecde8e1477c8d23e6.png", "infoid": 1000244, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5df2\u7ecf\u5206\u4eab\u4e86\u5f88\u591a\u5173\u4e8e\u6211\u4eec\u6709\u591a\u559c\u6b22Quic(\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u6784\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u79f0\u4e3aQuicly\u7684\u5b9e\u73b0)\u3002\u5b83\u627f\u8bfa\u51cf\u5c11\u5ef6\u8fdf\u3001\u63d0\u9ad8\u541e\u5410\u91cf\u3001\u6062\u590d\u5ba2\u6237\u7aef\u79fb\u52a8\u6027\uff0c\u5e76\u63d0\u9ad8\u9690\u79c1\u548c\u5b89\u5168\u6027\u3002\u4ee4\u4eba\u5174\u594b\u7684\u662f\uff0cIETF\u7684Quic\u5de5\u4f5c\u7ec4\u73b0\u5728\u6b63\u51c6\u5907\u5b8c\u6210Quic\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\uff0c\u5e76\u4e3a\u5728\u4e92\u8054\u7f51\u4e0a\u90e8\u7f72\u505a\u597d\u51c6\u5907\u3002\u867d\u7136\u8bb8\u591a\u6784\u5efa\u548c\u8ba1\u5212\u4f7f\u7528\u5b83\u7684\u4eba\u5458\u548c\u56e2\u961f\u90fd\u6e34\u671b\u770b\u5230\u5e7f\u6cdb\u7684\u90e8\u7f72\uff0c\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\u4e00\u76f4\u4ee4\u4eba\u62c5\u5fe7\u2026\u2026\u3002\n\u6211\u4eec\u8fd0\u884c\u6d4b\u8bd5\u8bd5\u56fe\u627e\u5230\u4e00\u4e9b\u7b54\u6848\uff0c\u8fd9\u91cc\u662f\u9ad8\u7ea7\u7b54\u6848\uff1a\u662f\u7684\uff0cQuic\u7684\u8ba1\u7b97\u6548\u7387\u53ef\u4ee5\u548cTCP\u4e00\u6837\u9ad8\uff01\n\u5728\u9999\u69df\u7684\u74f6\u5b50\u51fa\u6765\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u627f\u8ba4\u4e00\u4e2a\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\uff1a\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u8bbe\u7f6e\u548c\u57fa\u51c6\uff0c\u6211\u4eec\u9700\u8981\u7528\u66f4\u73b0\u5b9e\u548c\u66f4\u5177\u4ee3\u8868\u6027\u7684\u786c\u4ef6\u548c\u6d41\u91cf\u573a\u666f\u8fdb\u884c\u66f4\u591a\u7684\u6d4b\u8bd5\u3002\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u4e3aTCP\u6216QuIC\u542f\u7528\u4efb\u4f55\u786c\u4ef6\u5378\u8f7d\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u4f7f\u7528\u4e00\u4e2a\u5e26\u6709\u5408\u6210\u6d41\u91cf\u7684\u7b80\u5355\u573a\u666f\u6765\u6d88\u9664\u4e00\u4e9b\u66f4\u660e\u663e\u7684\u8ba1\u7b97\u74f6\u9888\uff0c\u5e76\u6df1\u5165\u4e86\u89e3\u5982\u4f55\u964d\u4f4eQuic\u7684\u6210\u672c\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u5373\u4f7f\u5728\u6211\u4eec\u7684\u7b80\u5355\u573a\u666f\u4e2d\uff0cQuic\u4e5f\u505a\u5f97\u548cTCP\u4e00\u6837\u597d\u3002\n\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u7ec3\u4e60\u76f8\u5f53\u4e8e\u8ba9\u6211\u4eec\u7684\u6c7d\u8f66\u5728\u8d5b\u9053\u4e0a\u4e0e\u4e00\u8f86\u6cd5\u62c9\u5229(Ferrari)\u8fdb\u884c\u826f\u597d\u7684\u6bd4\u8d5b\u3002\u8d5b\u9053\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4eba\u5de5\u7684\u73af\u5883\uff0c\u5728\u4e0a\u9762\u9a7e\u9a76\u6211\u4eec\u7684\u8f66\u7684\u4f53\u9a8c\u5e76\u4e0d\u80fd\u4ee3\u8868\u4f60\u6bcf\u5929\u7684\u4f53\u9a8c(\u9664\u975e\u4f60\u662f\u4e00\u540d\u8d5b\u8f66\u624b)\u3002\u7136\u800c\uff0c\u89e3\u51b3\u5728\u90a3\u6761\u8d5b\u9053\u4e0a\u5f88\u597d\u5730\u6bd4\u8d5b\u7684\u95ee\u9898\u6709\u52a9\u4e8e\u6211\u4eec\u53d1\u73b0\u74f6\u9888\u3002\u8fd9\u91cc\u91cd\u8981\u7684\u548c\u53ef\u8f6c\u8ba9\u7684\u4e1c\u897f\u662f\u6211\u4eec\u5c06\u91c7\u53d6\u7684\u63aa\u65bd\uff0c\u4ee5\u6d88\u9664.\u3002\n\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\uff0cTCP\u4e00\u76f4\u662fWeb\u7684\u4e3b\u529b\uff0c\u591a\u5e74\u6765\uff0c\u4eba\u4eec\u5728\u4f18\u5316\u5176\u5b9e\u73b0\u65b9\u9762\u4ed8\u51fa\u4e86\u5927\u91cf\u52aa\u529b\uff0c\u4ee5\u4f7f\u5176\u5728\u8ba1\u7b97\u4e0a\u66f4\u6709\u6548\u7387\u3002\u7136\u800c\uff0cQuic\u4ecd\u7136\u662f\u4e00\u4e2a\u65b0\u5174\u7684\u534f\u8bae\uff1b\u5b83\u8fd8\u6ca1\u6709\u88ab\u5e7f\u6cdb\u90e8\u7f72\u548c\u8c03\u6574\uff0c\u4ee5\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\u4e0e\u53e4\u8001\u7684TCP\u76f8\u6bd4\uff0c\u8fd9\u6837\u7684\u65b0\u534f\u8bae\u4f1a\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\u91cd\u8981\u7684\u662f\uff0c\u5728\u4e0d\u4e45\u7684\u5c06\u6765\uff0cQuic\u80fd\u50cfTCP\u4e00\u6837\u9ad8\u6548\u5417\uff1f\n\u786e\u8ba4\u5904\u7406\uff1a\u5178\u578bTCP\u8fde\u63a5\u4e2d\u7684\u5f88\u5927\u4e00\u90e8\u5206\u6570\u636e\u5305\u4ec5\u643a\u5e26\u786e\u8ba4\u3002TCP\u786e\u8ba4\u5728\u5185\u6838\u4e2d\u5904\u7406\uff0c\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u90fd\u662f\u5982\u6b64\u3002Quic\u5728\u7528\u6237\u7a7a\u95f4\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u4ea7\u751f\u66f4\u591a\u8de8\u8d8a\u7528\u6237\u5185\u6838\u8fb9\u754c\u7684\u6570\u636e\u526f\u672c\u548c\u66f4\u591a\u4e0a\u4e0b\u6587\u5207\u6362\u3002\u6b64\u5916\uff0cTCP\u786e\u8ba4\u91c7\u7528\u660e\u6587\uff0c\u800cQuic\u786e\u8ba4\u662f\u52a0\u5bc6\u7684\uff0c\u8fd9\u589e\u52a0\u4e86\u4ee5Quic\u53d1\u9001\u548c\u63a5\u6536\u786e\u8ba4\u7684\u6210\u672c\u3002\n\u6bcf\u5305\u53d1\u9001\u5668\u5f00\u9500\uff1a\u5185\u6838\u77e5\u9053TCP\u8fde\u63a5\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bb0\u4f4f\u548c\u91cd\u7528\u8fde\u63a5\u4e2d\u53d1\u9001\u7684\u6240\u6709\u5305\u9884\u8ba1\u4fdd\u6301\u4e0d\u53d8\u7684\u72b6\u6001\u3002\u4f8b\u5982\uff0c\u5185\u6838\u901a\u5e38\u53ea\u9700\u8981\u5728\u8fde\u63a5\u5f00\u59cb\u65f6\u67e5\u627e\u76ee\u7684\u5730\u5740\u7684\u8def\u7531\u6216\u5e94\u7528\u4e00\u6b21\u9632\u706b\u5899\u89c4\u5219\u3002\u7531\u4e8e\u5185\u6838\u6ca1\u6709Quic\u8fde\u63a5\u7684\u8fde\u63a5\u72b6\u6001\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5185\u6838\u64cd\u4f5c\u5c06\u5728\u6bcf\u4e2a\u4f20\u51fa\u7684Quic\u6570\u636e\u5305\u4e0a\u6267\u884c\u3002\n\u7531\u4e8eQuic\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u8fd0\u884c\uff0c\u56e0\u6b64\u4f7f\u7528Quic\u6bd4\u4f7f\u7528TCP\u7684\u6210\u672c\u66f4\u9ad8\u3002\u8fd9\u662f\u56e0\u4e3aQuic\u53d1\u9001\u6216\u63a5\u6536\u7684\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u8de8\u8d8a\u4e86\u7528\u6237\u5185\u6838\u8fb9\u754c\uff0c\u8fd9\u79f0\u4e3a\u4e0a\u4e0b\u6587\u5207\u6362\u3002\n\u4e3a\u4e86\u5f00\u59cb\u56de\u7b54\u6211\u4eec\u524d\u9762\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5f00\u59cb\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002\u6211\u4eec\u4f7f\u7528Quicly\u4f5c\u4e3aQuic\u670d\u52a1\u5668\u548cQuic\u5ba2\u6237\u7aef\u3002Quic\u6570\u636e\u5305\u603b\u662f\u4f7f\u7528TLS1.3\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u4e14\u51fa\u4e8e\u6b64\u76ee\u7684\uff0cQuicly\u4f7f\u7528\u4e86H2O\u7684TLS\u5e93picotls\u3002\u6211\u4eec\u7684\u53c2\u8003TCP\u8bbe\u7f6e\u5c06\u4f7f\u7528\u4f7f\u7528\u539f\u751fLinux TCP\u7684picotl\uff0c\u4ee5\u6700\u5c0f\u5316\u53c2\u8003TCP\u8bbe\u7f6e\u548cQuic\u8bbe\u7f6e\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\n\u8ba1\u7b97\u6548\u7387\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u4e4b\u4e00\u6765\u6d4b\u91cf\uff1a\u901a\u8fc7\u6d4b\u91cf\u4f7f\u7f51\u7edc\u9971\u548c\u6240\u9700\u7684\u8ba1\u7b97\u8d44\u6e90\u91cf\uff0c\u6216\u8005\u901a\u8fc7\u6d4b\u91cf\u6240\u6709\u53ef\u7528\u8ba1\u7b97\u80fd\u529b\u53ef\u6301\u7eed\u7684\u541e\u5410\u91cf\u3002\u4f7f\u7f51\u7edc\u9971\u548c\u4f1a\u56e0\u6570\u636e\u5305\u4e22\u5931\u4ee5\u53ca\u968f\u540e\u7684\u4e22\u5931\u6062\u590d\u548c\u62e5\u585e\u63a7\u5236\u5668\u64cd\u4f5c\u800c\u5f15\u5165\u6613\u53d8\u6027\u3002\u867d\u7136\u5728\u6d4b\u91cf\u6027\u80fd\u65f6\u5305\u62ec\u8fd9\u4e9b\u5185\u5bb9\u5f88\u91cd\u8981\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u907f\u514d\u8fd9\u79cd\u53ef\u53d8\u6027\uff0c\u56e0\u6b64\u9009\u62e9\u4e86.\u3002\n\u53d1\u9001\u8005\u7684\u8ba1\u7b97\u6548\u7387\u5f88\u91cd\u8981\uff0c\u8fd8\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u9996\u5148\uff0c\u5728\u4f20\u8f93\u534f\u8bae\u4e2d\uff0c\u53d1\u9001\u8005\u5f80\u5f80\u9996\u5f53\u5176\u51b2\u5730\u627f\u62c5\u8ba1\u7b97\u6210\u672c\u3002\u8fd9\u662f\u56e0\u4e3a\u53d1\u9001\u5668\u8d1f\u8d23\u5927\u591a\u6570\u8ba1\u7b97\u6602\u8d35\u7684\u4f20\u8f93\u529f\u80fd\uff0c\u4f8b\u5982\u8fd0\u884c\u5b9a\u65f6\u5668\u4ee5\u68c0\u6d4b\u4e22\u5f03\u5728\u7f51\u7edc\u4e2d\u7684\u5206\u7ec4\u5e76\u91cd\u65b0\u53d1\u9001\u5b83\u4eec\uff0c\u76d1\u89c6\u7f51\u7edc\u7684\u5f80\u8fd4\u65f6\u95f4\uff0c\u4ee5\u53ca\u8fd0\u884c\u5e26\u5bbd\u4f30\u8ba1\u5668\u4ee5\u4f7f\u5176\u4e0d\u4f1a\u62e5\u585e\u7f51\u7edc\u3002\u7b2c\u4e8c\uff0c\u670d\u52a1\u5668\u662f.\u3002\n\u5728\u6df1\u5165\u7814\u7a76\u7ed3\u679c\u4e4b\u524d\uff0c\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6211\u4eec\u7684\u5b9e\u9a8c\u8bbe\u7f6e\u3002\u6211\u4eec\u7684\u53d1\u9001\u8005\u5728Intel Core m3-6Y30\u4e0a\u4f7f\u7528Ubuntu19.10(Linux\u5185\u6838\u7248\u672c5.3.0)\uff0c\u9650\u5236\u4e3a\u5355\u6838\u548c\u5355\u7ebf\u7a0b\u3002\u53d1\u4ef6\u4eba\u5df2\u4e09\u6b21\u8fde\u63a5\u5230\u672c\u5730\u7f51\u7edc", "note_en": "We\u2019ve shared a lot about how much   we love QUIC (and why we\u2019re building our own implementation called   quicly). It promises   latency reduction, improved throughput, resilience to client mobility, and increased privacy and security. Excitingly, the   QUIC working groupat the IETF is now on the cusp of getting the first version of QUIC wrapped up and ready for internet-wide deployment. While many of the people and teams building and planning to use it are eager to see wide deployment, one concern keeps  ...\n We ran the tests to try and find some answers, and here\u2019s the high level answer: Yes, QUIC can be as computationally efficient as TCP!\n   Before the bottles of champagne come out, we\u2019ll admit what will soon become obvious: we have a simple setting and benchmark, and that we need to do more testing with more realistic and representative hardware and traffic scenarios. Importantly, we did not have any hardware offload enabled for TCP or QUIC. Our goal was to use a simple scenario with synthetic traffic to eliminate some of the more obvious computational bottlenecks and gain insights into how we might reduce QUIC\u2019s costs.\n That said, we were surprised to find that QUIC did as well as TCP in even our simple scenario.\n You could think of the exercise in this post as equivalent to making our car race well against a Ferrari on a race track. A race track is a highly artificial environment and the experience of driving our car on it is not representative of what you will experience daily (unless you are a race car driver). Working through the problem of racing well on that track however helps us to uncover bottlenecks. And  the important and transferable things here are the measures we would take to remove the  ...\n  TCP has been the workhorse of the web for a long time, and a lot of effort has gone into optimizing its implementations over the years to make it more computationally efficient. QUIC however,\u00a0 is still a nascent protocol; it has yet to be widely deployed and tuned for computational efficiency. How would such a new protocol compare against the venerable TCP? Importantly,  can QUIC be as efficient as TCP in the near future?\n  Acknowledgement processing: A large fraction of packets in a typical TCP connection carry only acknowledgements. TCP acknowledgements are processed within the kernel, both at the sender and the receiver. QUIC does these in user space, resulting in more data copies across the user-kernel boundary and more context switches. Additionally, TCP acknowledgements are in plaintext, while QUIC acknowledgements are encrypted, increasing the cost of sending and receiving acknowledgements in QUIC.\n Per-packet sender overhead: The kernel knows about TCP connections, and can remember and reuse state that is expected to remain unchanged for all packets sent in a connection. For instance, the kernel needs to typically only look up the route for the destination address or apply firewall rules once at the start of the connection. Since the kernel has no connection state for QUIC connections, these kernel operations are performed on every outgoing QUIC packet.\n Since QUIC runs in user space, these costs are higher with QUIC than with TCP. This is because every packet that is either sent or received by QUIC crosses the user-kernel boundary, which is known as a   context switch.\n  To start answering the question we laid out earlier, we set out to do a simple benchmark. We used   quicly  as the QUIC server and as the QUIC client. QUIC packets are always encrypted using TLS 1.3, and quicly  uses   picotls,   H2O\u2019s TLS library, for this purpose. Our reference TCP setup would use picotls  using native Linux TCP to minimize the differences between the reference TCP setup and the QUIC setup.\n Computational efficiency can be measured in one of two ways: by measuring the amount of computational resources required to saturate a network, or by measuring the throughput sustainable with all available computational power. Saturating the network introduces variability due to packet losses and due to subsequent loss recovery and congestion controller actions. While it is important to include these while measuring performance, we wanted to avoid this variability, and therefore chose  ...\n The sender&#39;s computational efficiency is important for two other reasons. First, senders tend to bear the brunt of computational cost in transport protocols. This happens because the sender is responsible for most computationally expensive transport functions, such as running timers to detect packets dropped in the network and retransmitting them, monitoring the network \u2019s round-trip time, and running bandwidth estimators so that it doesn \u2019t congest the network. Second, servers are  ...\n A brief bit about our experimental setup before diving into results. Our sender used Ubuntu 19.10 (linux kernel version 5.3.0) on an Intel Core m3-6Y30, capped to single core and single thread. The sender was connected to the local network through a USB Gigabit-Ethernet adapter that uses the ASIX AX88179 controller. Checksum offloading was enabled for both TCP and UDP. Other hardware optimizations for TCP, such as   TCP Segmentation Offload (TSO), were not used; we plan to use these in  ...\n We are using fairly low-end hardware for our sender here. And that\u2019s just fine \u2013 as noted earlier, in this first step, we care about the measures that we would take to remove the bottlenecks that appear and about their transferability to other environments. In our future steps, we will be looking at server-grade hardware.\n As the first reference benchmark, we measured the maximum achievable raw unencrypted TCP throughput using   iperf. This throughput was 708Mbps.\n As the second reference benchmark, we measured sustained throughput achievable by TLS 1.3 over TCP, using picotls  with AES128-GCM as the cipher. This throughput was 466Mbps, roughly 66% of what we saw with unencrypted TCP. This performance reduction is due to the cost of cryptography, the use of a non-blocking socket, and the cost of interrupting user-space execution to handle incoming acknowledgements. Importantly however, the overheads don&#39;t really impact the question we are  ...\n Finally, we measured sustained throughput with off-the-shelf quicly. This throughput was 196Mbps. QUIC was able to achieve approximately 40% of TLS 1.3 over TCP. QUIC suffered from the costs that we expected, and the initial number was sobering.\n   We wanted to not only measure the cost of running QUIC, we also wanted to see what we could do to lower this cost. And we did not want to limit ourselves to our implementation; we would consider changes or tweaks to the protocol as well. We did this in three steps, and we\u2019ll walk through each one next.\n  Like TCP, the   QUIC specification recommends that a receiver send an acknowledgement for every two packets that it receives. While this is a reasonable default, receiving and processing acknowledgements is a cause of computational cost for a data sender.\u00a0 A receiver could simply send fewer acknowledgements, but doing so can reduce the connection\u2019s throughput, especially early in the connection.\n To understand this, imagine that each acknowledgement received by the sender allows it to increase its rate. The sooner it receives an acknowledgement, the sooner it increases its sending rate. If that rate is low, there are fewer packets going to the receiver per round trip and therefore fewer acknowledgements coming back from it. Reducing the number of acknowledgements for such a connection can measurably reduce the sender\u2019s sending rate and overall performance.\n For a connection that has high throughput, reducing the number of acknowledgements could still mean that enough of them are coming back to not measurably impact the sender\u2019s rate. (This is a bit of a simplification, and the other considerations are explained in a bit more detail   here). In our test setup, we can reduce the acknowledgement frequency without any impact on the sender\u2019s throughput.\n We reduced the acknowledgement frequency from once every two packets to once every ten packets, and as a result, quicly  was able to sustain a throughput of 240Mbps. Doing this benefits the network by reducing the number of acknowledgement packets on the network, and this experiment proves that it also benefits the sender by reducing computational overhead. This result convinced us to implement the   QUIC Delayed ACK extension proposal \u2013\u00a0more on this later.\n    Following the advice of Willem de Bruijn and Eric Dumazet in &#34;  Optimizing UDP for content delivery: GSO, pacing and zerocopy&#34;, we next turned to see if UDP Generic Segmentation Offload might help with reducing the overhead caused by single packet writes and context switches per packet.   Generic Segmentation Offload (GSO)is a Linux feature that allows user-space applications to provide a series of packets as a single unit to the kernel. This unit is passed through the  ...\n By coalescing at most ten UDP packets into one object and sending them using GSO, QUIC\u2019s throughput increased from 240Mbps to 348Mbps \u2013 a 45% increase! To see if coalescing even more would improve performance, we tried coalescing up to 20 UDP packets with GSO. This led to an additional 45% increase in throughput, and QUIC was now zooming along at 431Mbps.\n   This was huge. The per-packet cost of QUIC was clearly a significant bottleneck, and addressing that with GSO helped enormously. We needed to choose a GSO size, which we will discuss later. We then turned our eyes to another parameter that does not get as much attention as it should: packet size.\n  The QUIC specification recommends a conservative default minimum QUIC packet size of 1200 bytes, and quicly  used 1280 bytes. Implementations are allowed to increase packet size if they have reason to believe that the path might support larger packets. Given that the path was able to support 1472-byte QUIC packets, and that TCP was using 1460-byte packets on this path, it made sense for QUIC to use larger packets as well. Increasing this maximum packet size reduces computational  ...\n So, we changed the QUIC packet size from 1280 bytes to 1460 bytes, for parity with the TCP payload size. With this change, quicly  was able to sustain a throughput of 466Mbps \u2013 an 8% increase in throughput.\n     This experiment showed a clear path forward for improving quicly\u2019s efficiency: reducing acknowledgement frequency, coalescing packets with GSO, and using as large a packet size as possible. We now turn to generalizing and adopting these optimizations in a way that they would work well across various environments, minimizing the risk of side-effects.\n  Reducing the acknowledgement frequency to a fixed rate of once per ten packets has a couple of issues. First, as noted above, it can measurably hurt\u00a0 throughput when the connection\u2019s throughput is low to begin with. Second, the client in these experiments is quicly, whereas when running in production, the client will be a browser, which we do not control.\n The answer to both of these problems is the   Delayed Ack extension for QUIC, which enables a sender to dynamically control the acknowledgement frequency of the receiver, based on its current sending rate.\n Since running this experiment, we implemented the delayed ACK extension, with the sender controlling acknowledgement frequency to be once every eighth of its  congestion window, which is approximately once every eighth of its round-trip time. In our experimental setup above, this reduces acknowledgements to once every sixty packets, which is a significantly larger reduction than in our experiment.\n  The GSO experiment showed that coalescing more packets made QUIC more efficient. There\u2019s a cost to GSO however. Coalescing with GSO means that the sender bursts out all these packets into the network, leading to increased short-term pressure on the network\u2019s buffers and an increased probability of packet loss.\n So, with this tradeoff, how many packets should quicly  coalesce? The specified   acceptable burst size for a QUIC sender is ten, which seems like a pretty good recommendation to use here.  quicly has now implemented an option to send GSO bursts of ten packets.\n We note that currently a sender\u2019s   kernel cannot pace these packets out \u2013 that is, send the constituent packets of a GSO burst out at a rate that keeps the network from having to absorb the burst. We would be interested in using such a facility if it were to be implemented in the Linux kernel.\n  The larger the packet size, the better the performance. However, larger packets suffer the risk of getting dropped on some network paths. We could implement mechanisms such as   Path MTU Discovery to detect the largest packet size that could be used on a connection, but this is practically only useful for long-lived connections. For most connections, and during the beginning of all connections, a sender needs to determine a good packet size.\n Instead of using a fixed packet size, the quicly  server now determines its own packet size based on the size of the first packets it receives from the client. Since these packets successfully made it through the network to the server, it is reasonable to expect that the packets of the same size might have a good chance of making it back through the network to the client.\n  With these changes in place, quicly now achieves 464 Mbps (1% faster than TLS 1.3 over TCP) when the first QUIC packets sent by the client are 1460 bytes, and 425Mbps (only 8% slower than TLS 1.3 over TCP) when the first QUIC packets sent by the client are 1350 bytes \u2013 the default packet size used by Chrome.\n  The workload and environment in this experiment represent only one point in the vast space of workloads and environments. Our goal was to see if we could get QUIC to meet TCP\u2019s throughput in this very specific microbenchmark. With further testing and experiments, we will explore and improve QUIC performance in other representative settings and scenarios.\n Significantly however, this experiment shows us that using system optimizations and protocol mechanisms judiciously, QUIC has a fair chance of being as computationally efficient as TCP.\n As we continue work on tuning  our implementation\u2019s performance with further testing and deployment, we will continue to report our findings. Stay tuned!", "posttime": "2020-05-02 18:01:22", "tags": "\u80fd\u5426,match,quic", "title": "QUIC\u80fd\u5426\u4e0eTCP\u7684\u8ba1\u7b97\u6548\u7387\u76f8\u5339\u654c\uff1f", "title_en": "Can QUIC match TCP\u2019s computational efficiency?", "transed": 0, "url": "https://www.fastly.com/blog/measuring-quic-vs-tcp-computational-efficiency", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u80fd\u5426", "match", "quic"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000243, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03\uff0cSourceHut\u9879\u76ee\u4e2d\u5fc3\u73b0\u5728\u53ef\u4ee5\u666e\u904d\u4f7f\u7528\u4e86\uff01\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62SourceHut alpha\u8fdb\u5c55\u4e2d\u6700\u91cd\u8981\u7684\u8fdb\u5c55\u4e4b\u4e00\u3002\u5982\u679c\u60a8\u60f3\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u67e5\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8bf7\u5c1d\u8bd5\u7b7e\u51faSourceHut\u9879\u76ee\uff0c\u6dfb\u52a0\u60a8\u81ea\u5df1\u7684\u9879\u76ee\uff0c\u6216\u6d4f\u89c8public projectindex\u3002\u6709\u5173\u66f4\u5197\u957f\u7684\u4ecb\u7ecd\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\n\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u9879\u76ee\u4e2d\u5fc3\u662f\u5fc5\u8981\u7684\u548c/\u6216\u6709\u8da3\u7684\u5462\uff1fSourceHut\u662f\u7531\u8bb8\u591a\u5c0f\u7684Unix\u98ce\u683c\u7684\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u7ec4\u6210\u7684\uff0c\u6bcf\u4e2a\u5de5\u5177\u90fd\u201c\u505a\u4e00\u4ef6\u4e8b\uff0c\u505a\u597d\u5b83\u201d\u3002\u8fd9\u4e9b\u5de5\u5177\u5305\u62ecGit\u6258\u7ba1\u3001\u9519\u8bef\u8ddf\u8e2a\u3001\u90ae\u4ef6\u5217\u8868\u3001CI\u7b49\u3002\u8fd9\u5141\u8bb8\u60a8\u72ec\u7acb\u4f7f\u7528\u5b83\u4eec\uff0c\u5e76\u968f\u5fc3\u6240\u6b32\u5730\u7f16\u5199\u5b83\u4eec\uff0c\u8fd9\u5f88\u597d\u5730\u53cd\u6620\u4e86\u8bb8\u591a\u9879\u76ee\u662f\u5982\u4f55\u7ec4\u7ec7\u8d77\u6765\u7684\u3002\u5c06\u5176\u4e0eGitHub\u3001GitLab\u3001Gitea\u7b49\u5e73\u53f0\u8fdb\u884c\u6bd4\u8f83\uff0c\u5728\u8fd9\u4e9b\u5e73\u53f0\u4e0a\uff0c\u50cfbug\u8ffd\u8e2a\u5668\u8fd9\u6837\u7684\u8d44\u6e90.\u3002\n\u4f8b\u5982\uff0c\u5728\u73b0\u5b9e\u4e2d\uff0c\u8bb8\u591a\u9879\u76ee\u90fd\u6709\u51e0\u5341\u4e2agit\u62a5\u544a\uff0c\u4f46\u5b83\u4eec\u66f4\u613f\u610f\u5728\u4e00\u4e2a\u5730\u65b9\u63a5\u6536bug\u62a5\u544a\u3002\u9879\u76ee\u7684\u7ec4\u7ec7\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u5728\u201c\u4e00\u5200\u5207\u201d\u7684\u60c5\u51b5\u4e0b\uff0c\u8bb8\u591a\u9879\u76ee\u88ab\u8feb\u6c42\u52a9\u4e8e\u5143\u5b58\u50a8\u5e93\u3001\u673a\u5668\u4eba\u6765\u8ffd\u5bfb\u5728\u9519\u8bef\u4f4d\u7f6e\u53d1\u5e03\u5185\u5bb9\u7684\u8ff7\u8def\u7528\u6237\uff0c\u7b49\u7b49\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u575a\u6301\u5c06\u5355\u4e00\u7684git\u56de\u8d2d\u4f5c\u4e3a\u60a8\u7684\u9879\u76ee\u7684\u9762\u5b54\u662f\u975e\u5e38\u4ee5\u5f00\u53d1\u4eba\u5458\u4e3a\u4e2d\u5fc3\u7684\u3002\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u53c2\u89c2\u8005\u771f\u6b63\u60f3\u8981\u53bb\u4f60\u7684\u9879\u76ee..\u3002\n\u5728SourceHut\u4e0a\u81ea\u7531\u7f16\u5199\u8d44\u6e90\u4ee5\u6ee1\u8db3\u60a8\u9879\u76ee\u7684SNeed\u7684\u80fd\u529b\u89e3\u51b3\u4e86\u8fd9\u4e00\u95ee\u9898\u3002\u6211\u4eec\u65b9\u6cd5\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\u5f88\u96be\u627e\u51fa\u54ea\u4e9b\u8d44\u6e90\u5c5e\u4e8e\u54ea\u4e9b\u9879\u76ee\uff0c\u5e76\u5728\u5b83\u4eec\u4e4b\u95f4\u6765\u56de\u79fb\u52a8\u3002\u65b0\u7684\u9879\u76ee\u4e2d\u5fc3\u4e3a\u60a8\u7684\u9879\u76ee\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5355\u4e00\u7684\u201c\u4e2d\u5fc3\u201d\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff0c\u5bf9\u9879\u76ee\u8fdb\u884c\u4e86\u66f4\u5168\u9762\u7684\u4ecb\u7ecd\uff0c\u5e76\u94fe\u63a5\u5230\u60a8\u7684\u9879\u76ee\u6b63\u5728\u4f7f\u7528\u7684\u6bcf\u4e2a\u5de5\u5177\u3002\u4f60\u53ef\u4ee5\u67090\uff0c1\uff0c\u6216\u4efb\u610f\u6570\u91cf\u7684git\u6216mercurial repos\uff0c\u90ae\u5bc4.\u3002\n\u8be5\u9879\u76ee\u4e2d\u5fc3\u8fd8\u89e3\u51b3\u4e86SourceHut\u7528\u6237\u957f\u671f\u4ee5\u6765\u611f\u5174\u8da3\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u53ef\u53d1\u73b0\u6027\u3002\u60a8\u5982\u4f55\u627e\u5230\u8be5\u5e73\u53f0\u4e0a\u6258\u7ba1\u4e86\u54ea\u4e9b\u9879\u76ee\uff1f\u96c6\u7ebf\u5668\u4f7f\u7528public projectindex\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u60a8\u5728\u8fd9\u91cc\u5217\u51fa\u7684Hubis\u4e0a\u521b\u5efa\u7684\u6bcf\u4e2a\u516c\u5171\u9879\u76ee\uff0c\u60a8\u90fd\u53ef\u4ee5\u641c\u7d22\u6240\u6709\u8fd9\u4e9b\u9879\u76ee\uff0c\u4ee5\u53d1\u73b0\u611f\u5174\u8da3\u7684\u9879\u76ee\u4ee5\u4f9b\u4f7f\u7528\u6216\u8d21\u732e\u3002\u6211\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7279\u8272\u9879\u76ee\u5217\u8868\uff0c\u6211\u5c06\u5728\u5176\u4e2d\u4eb2\u624b\u6311\u9009\u6709\u8da3\u7684\u9879\u76ee\u8fdb\u884c\u5206\u4eab\u3002\n\u8fd9\u4e2a\u7248\u672c\u7684\u96c6\u7ebf\u5668\u662fMVP\uff0c\u6211\u672a\u6765\u8fd8\u60f3\u505a\u66f4\u591a\u7684\u5f00\u53d1\u3002\u5176\u4e2d\u4e00\u4e9b\u5305\u62ec\uff1a\n\u96c6\u7ebf\u5668\u8fd8\u5bf9\u7ad9\u70b9\u7684\u5176\u4f59\u90e8\u5206\u8fdb\u884c\u4e86\u8f83\u5c0f\u7684\u66f4\u6539--\u6bcf\u4e2a\u9875\u9762\u5bfc\u822a\u4e0a\u7684\u201csourcehut\u201d\u94fe\u63a5\u73b0\u5728\u90fd\u4f1a\u628a\u4f60\u5e26\u56de\u96c6\u7ebf\u5668\uff0chg.sr.ht\u5df2\u7ecf\u6210\u4e3a\u5bfc\u822a\u4e2d\u7684\u4e00\u7ea7\u76ee\u6807\u3002\n\u8bf7\u5c1d\u8bd5\u4e00\u4e0b\u8fd9\u9879\u65b0\u670d\u52a1\uff0c\u5982\u679c\u6709\u4efb\u4f55\u53cd\u9988\uff0c\u8bf7\u901a\u8fc7sr.ht\u8ba8\u8bba\u6216\u76f4\u63a5\u53d1\u7535\u5b50\u90ae\u4ef6\u7ed9\u6211\u3002\u597d\u597d\u4eab\u53d7\u5427\uff01", "note_en": "I\u2019m happy to announce that the SourceHut project hub is now available forgeneral use! This is one of the most important developments in the progress ofthe SourceHut alpha thus far. If you want to see how it works interactively, trychecking out the  SourceHut project,  add your ownprojects, or  browse the public projectindex. For a more wordy introduction, read on.\n  So why is the project hub necessary and/or interesting? SourceHut is composedof many small Unix-style tools for software development, which each \u201cdo onething and do it well \u201d. These tools are things like git hosting, bug tracking,mailing lists, CI, and so on. This allows you to use them independently andcompose them however you please, which maps well onto the reality of how manyprojects are organized. Compare this to platforms like GitHub, GitLab, Gitea,and so on, where resources like bug trackers  ...\n In reality, many projects have dozens of git repos but would prefer to receivebug reports in one place, for example. There are many ways projects areorganized, and with a one-size-fits-all approach, many of them are forced toresort to meta-repositories, bots to chase down lost users posting things in thewrong place, and so on. Additionally, this insistence on a single git repo beingthe face of your project is very developer-centric. Only a fraction of visitorsto your project actually want to  ...\n The ability to freely compose resources on SourceHut to suit your project \u2019sneeds addresses this. The primary disadvantage of our approach has beendifficulty in finding out what resources belong to which projects, and gettingaround between them. The new project hub addresses this with a single \u201chub \u201dforyour project, with a more general introduction to the project and links to theeach of the tools your project is using. You can have zero, one, or any numberof git or Mercurial repos, mailing  ...\n The project hub also solves a problem which has long been a matter of interestto SourceHut users: discoverability. How do you find what projects are hosted onthe platform? The hub solves this with the  public projectindex. Each public project which you create on the hubis listed here, and you can search through all of them to discover interestingprojects to use or contribute to. I\u2019ve also added a list of featured projects,where I will be hand-picking interesting projects to share.\n This version of the hub is the  MVP,and there\u2019s more development I want to do in the future. Some of this includes:\n  The hub also comes with smaller changes to the rest of the site \u2014 the\u201csourcehut\u201d link on every page\u2019s navigation will now take you back to the hub,and hg.sr.ht has been made a first-class target in the nav.\n Please give the new service a shot and send along any feedback that comes tomind, via  sr.ht-discuss or by emailing me directly. Enjoy!", "posttime": "2020-05-02 18:01:19", "tags": "\u9879\u76ee,project", "title": "Sourcehut\u9879\u76ee\u4e2d\u5fc3", "title_en": "The Sourcehut Project Hub", "transed": 0, "url": "https://sourcehut.org/blog/2020-04-30-the-sourcehut-hub-is-live/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u9879\u76ee", "project"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000242, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Mun V0.2\u7248\u672c\u5373\u5c06\u53d1\u5e03\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u501f\u6b64\u673a\u4f1a\u66f4\u6df1\u5165\u5730\u7814\u7a76\u4e00\u4e0b\u8fd9\u4e2a\u7248\u672c\u7684\u65b0\u7279\u6027\uff1a\u70ed\u53ef\u91cd\u8f7d\u7ed3\u6784(Hotable Reloadable Structs)\u3002\u80fd\u591f\u6beb\u4e0d\u8d39\u529b\u5730\u70ed\u52a0\u8f7d\u6570\u636e\u662f\u6211\u4eec\u5728\u8bbe\u8ba1Mun\u65f6\u6700\u521d\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u5174\u594b\u5730\u5206\u4eab\u6211\u4eec\u662f\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e00\u58ee\u4e3e\u7684\u3002\n\u5728\u5176\u6838\u5fc3\u90e8\u5206\uff0cMun\u5229\u7528\u4e86\u7531Mun\u7f16\u8bd1\u5668\u751f\u6210\u7684\u51fd\u6570\u548c\u7c7b\u578b\u4fe1\u606f(\u79f0\u4e3a\u7b26\u53f7)\u3002\u5f53\u6e90\u6587\u4ef6\u7684\u66f4\u6539\u5bfc\u81f4\u91cd\u65b0\u7f16\u8bd1\u65f6\uff0c\u8fd0\u884c\u5e93\u4f1a\u68c0\u6d4b\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u5c1d\u8bd5\u70ed\u91cd\u65b0\u52a0\u8f7d\uff1b\u5c06\u65e7\u51fd\u6570\u548c\u7c7b\u578b\u4e0e\u65b0\u7684\u5bf9\u7b49\u51fd\u6570\u548c\u7c7b\u578b\u4e92\u6362\uff0c\u800c\u4e0d\u4f1a\u505c\u6b62\u5bbf\u4e3b\u5e94\u7528\u7a0b\u5e8f\u3002\u867d\u7136\u5728\u5927\u591a\u6570\u8bed\u8a00\u4e2d\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5b8c\u6210\u51fd\u6570\u7684\u70ed\u91cd\u88c5(\u4f8b\u5982\uff0c\u901a\u8fc7\u7528\u56fa\u5b9a\u7684API\u4ea4\u6362\u5171\u4eab\u5e93)\uff0c\u4f46\u662f\u70ed\u91cd\u88c5\u6570\u636e\u8981\u590d\u6742\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u2026\u2026\u3002\n\u7ed9\u5b9a\u7ed3\u6784\u7684\u65b0\u65e7\u5e03\u5c40\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u6bb5\u503c\u4ece\u65e7\u7ed3\u6784\u5b9e\u4f8b\u5185\u5b58\u6620\u5c04\u5230\u65b0\u5b9e\u4f8b\u7684\u5185\u5b58\u4f4d\u7f6e\u3002\u591a\u4e8f\u4e86\u8499\u7684\u7b26\u53f7\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u63a8\u65ad\u51fa\u8fd9\u79cd\u6620\u5c04--\u5c3d\u7ba1\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u672c\u535a\u5ba2\u7684\u5176\u4f59\u90e8\u5206\u5c06\u89e3\u91ca\u6211\u4eec\u5f00\u53d1\u7684\u7b97\u6cd5\uff0c\u4ee5\u521b\u5efa\u4ece\u65e7\u7c7b\u578b\u5217\u8868\u5230\u65b0\u5217\u8868\u7684\u201c\u6b63\u786e\u201d\u5185\u5b58\u6620\u5c04\u3002\n\u8003\u8651\u8fd9\u4e00\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\uff1a\u7ed9\u5b9a\u8d77\u59cb\u72b6\u6001S\u548c\u76ee\u6807\u72b6\u6001G\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u5e8f\u5217[c1\uff0cc2\uff0c..\u3002\u5728\u7406\u60f3\u7684\u4e16\u754c\u91cc\uff0c\u6211\u4eec\u5e94\u8be5\u77e5\u9053\u6240\u6709\u7684\u53d8\u5316\uff0cCi\uff1b\u76f8\u53cd\uff0c\u6211\u4eec\u53ea\u77e5\u9053S\u548cG\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u81ea\u5df1\u63a8\u5bfc\u51fa\u201c\u6b63\u786e\u7684\u201d\u53d8\u5316\u96c6\u5408\u3002\n\u6ce8\u610f\uff1a\u901a\u8fc7IDE\u96c6\u6210\u6765\u83b7\u5f97\u6240\u6709\u66f4\u6539ci\u662f\u53ef\u80fd\u7684\uff0c\u8be5\u96c6\u6210\u5c06\u6240\u6709\u6309\u952e\u7b14\u5212\u8f6c\u6362\u4e3a\u66f4\u6539\u96c6\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u5047\u8bbe\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u4f7f\u7528\u6211\u4eec\u7684\u96c6\u6210-\u4e5f\u4e0d\u80fd\u5047\u8bbe\u5b83\u662f\u5b8c\u7f8e\u7684-\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7528\u4e8e\u6700\u7b80\u5355\u7528\u4f8b\u7684\u597d\u7b97\u6cd5\u3002\n\u4e0e\u6211\u4eec\u7684\u95ee\u9898\u7c7b\u4f3c\u7684\u662fgit diff\uff0c\u5b83\u786e\u5b9a\u4e24\u4e2a\u5217\u8868\u6587\u4ef6\u4e4b\u95f4\u7684\u66f4\u6539\u96c6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgit\u4f7f\u7528Myers diff\u7b97\u6cd5\u6765\u8ba1\u7b97\u4ece\u5f00\u59cb\u72b6\u6001S\u5230\u76ee\u6807\u72b6\u6001G\u7684\u63d2\u5165\u548c\u5220\u9664\u96c6\u3002\u8981\u5168\u9762\u89e3\u91caMyers diff\u7b97\u6cd5\uff0c\u6211\u63a8\u8350\u8fd9\u4e2a\u535a\u5ba2\u3002\nMyers diff\u7b97\u6cd5\u662f\u786e\u5b9a\u4e0d\u540c\u4e4b\u5904\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u6539\u8fdb\u5b83\u7684\u7ed3\u679c\uff0c\u4ee5\u627e\u51fa\u4e24\u4e2a\u7ed3\u6784\u53ef\u80fd\u7684\u4e0d\u540c\u4e4b\u5904\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6700\u597d\u95ee\u95ee\u6211\u4eec\u81ea\u5df1\uff0c\u4e24\u4e2a\u7ed3\u6784\u5217\u8868\u4e4b\u95f4\u53ef\u80fd\u4f1a\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u7ed9\u5b9a\u65e7\u7684\u7ed3\u6784\u7c7b\u578b\u5217\u8868\uff0c\nstruct LayoutA{a\uff1af32\uff0cb\uff1ai16\uff0cc\uff1au8\uff0cd\uff1abool\uff0c}struct LayoutB{e\uff1au128\uff0cf\uff1ai64\uff0c}struct LayoutC{g\uff1abool\uff0c}\u3002\nstruct LayoutBB{//\u91cd\u547d\u540dstruct+Move struct e\uff1au128\uff0cf\uff1ai64\uff0c}struct LayoutA{//\u79fb\u52a8struct c\uff1au8\uff0c//\u79fb\u52a8\u5b57\u6bb5a\uff1af64\uff0c//\u8f6c\u6362\u5b57\u6bb5\u7c7b\u578b+\u79fb\u52a8\u5b57\u6bb5bb\uff1ai16\uff0c//\u91cd\u547d\u540d\u5b57\u6bb5+\u79fb\u52a8\u5b57\u6bb5//d\uff1abool\uff0c//\u5220\u9664\u5b57\u6bb5e\uff1ai16\uff0c//\u63d2\u5165\u5b57\u6bb5}//struct LayoutC{//\u5220\u9664\u7ed3\u6784//g\uff1abool\uff0c/\u3002\n\u60a8\u5c06\u6ce8\u610f\u5230\u4e24\u79cd\u7c7b\u578b\u7684\u5e26\u6ce8\u91ca\u7684\u5dee\u5f02\uff1a\u4e0e\u7ed3\u6784\u6216\u7ed3\u6784\u5b57\u6bb5\u76f8\u5173\u7684\u66f4\u6539\u3002\u7ec6\u5fc3\u7684\u8bfb\u8005\u53ef\u80fd\u5df2\u7ecf\u8ba4\u8bc6\u5230\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b58\u5728\u591a\u4e2a\u53ef\u80fd\u7684\u6ce8\u91ca\u3002\u4f8b\u5982\uff0c\u5bf9LayoutA\uff1a\uff1abb\u7684\u66f4\u6539\u4e5f\u53ef\u4ee5\u5206\u7c7b\u4e3a\u65b0\u63d2\u5165\u7684\u5b57\u6bb5\uff0c\u4ece\u800c\u5bfc\u81f4\u65e7\u7684LayoutA\uff1a\uff1abfield\u88ab\u5220\u9664\u3002\u8fd9\u4e24\u4e2a\u7ed3\u8bba\u90fd\u662f\u6b63\u786e\u7684\uff0c\u4f46\u5728\u8bbe\u8ba1\u6211\u4eec\u7684\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u51b3\u5b9a\u9009\u62e9\u4efb\u4f55\u53ef\u4ee5\u4fdd\u7559\u6570\u636e\u7684\u9009\u62e9\u3002\u6211\u4eec\u5b81\u613f\u6709\u4e00\u4e2a\u7528\u6237\u2026\u2026\u3002\n\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5f97\u51fa\u201c\u6b63\u786e\u201d\u7684\u6620\u5c04\u5462\uff1f\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e9b\u5047\u8bbe\u548c\u9650\u5236\uff0c\u6211\u4eec\u80fd\u591f\u907f\u514d\u5927\u591a\u6570(\u5982\u679c\u4e0d\u662f\u5168\u90e8)\u6a21\u68f1\u4e24\u53ef\u7684\u60c5\u51b5\u3002\u6211\u4eec\u6240\u505a\u7684\u5047\u8bbe\u662f\uff1a\n\u5982\u679c\u65e7\u7ed3\u6784\u7c7b\u578b\u548c\u65b0\u7ed3\u6784\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u662f\u76f8\u540c\u7684\u7c7b\u578b\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u63a5\u53d7\u5bf9\u7ed3\u6784\u53ca\u5176\u5b57\u6bb5\u7684\u4efb\u4f55\u548c\u6240\u6709\u66f4\u6539\u3002LayoutA\u5c31\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\uff1b\u7ed3\u6784\u540d\u79f0\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u662f\u5b83\u88ab\u4e0b\u79fb\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5b83\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u88ab\u7f16\u8f91\u4e86\u3002\n\u5982\u679c\u65e7\u7ed3\u6784\u7c7b\u578b\u548c\u65b0\u7ed3\u6784\u7c7b\u578b\u5177\u6709\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u4f46\u5b83\u4eec\u7684\u5b57\u6bb5\u90fd\u76f8\u540c\uff0c\u5219\u8be5\u7ed3\u6784\u5fc5\u987b\u5df2\u91cd\u547d\u540d\uff0c\u5e76\u4e14\u53ef\u4ee5\u9009\u62e9\u79fb\u52a8\u3002LayoutB\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1b\u8be5\u7ed3\u6784\u88ab\u91cd\u547d\u540d\u4e3aLayoutBB\uff0c\u5e76\u4e14\u5411\u4e0a\u79fb\u52a8\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f46\u662f\u5b83\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u4fdd\u6301\u4e0d\u53d8\u3002\n\u5982\u679c\u65e7\u5b57\u6bb5\u548c\u65b0\u5b57\u6bb5\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u7c7b\u578b\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u4fdd\u6301\u4e0d\u53d8\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u79fb\u52a8\u3002LayoutA\uff1a\uff1aC\u5c31\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\uff1b\u5b57\u6bb5\u540d\u79f0\u548c\u7c7b\u578b\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u5b83\u79fb\u52a8\u4e86\u4e24\u4e2a\u4f4d\u7f6e\u3002\n\u5982\u679c\u65e7\u5b57\u6bb5\u548c\u65b0\u5b57\u6bb5\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u662f\u76f8\u540c\u7684\u5b57\u6bb5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u63a5\u53d7\u7c7b\u578b\u8f6c\u6362\uff0c\u5b57\u6bb5\u53ef\u80fd\u4f1a\u88ab\u79fb\u52a8\u3002LayoutA\uff1a\uff1aA\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1b\u5b57\u6bb5\u540d\u79f0\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u662f\u5b83\u88ab\u4e0b\u79fb\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u5e76\u8fdb\u884c\u4e86\u7c7b\u578b\u8f6c\u6362\u3002\n\u5982\u679c\u65e7\u5b57\u6bb5\u548c\u65b0\u5b57\u6bb5\u540d\u79f0\u4e0d\u540c\u4f46\u7c7b\u578b\u76f8\u540c\uff0c\u5219\u8be5\u5b57\u6bb5\u53ef\u80fd\u5df2\u88ab\u91cd\u547d\u540d\u3002\u7531\u4e8e\u53ef\u4ee5\u6709\u591a\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u5019\u9009\u9879\uff0c\u56e0\u6b64\u6211\u4eec\u63a5\u53d7\u91cd\u547d\u540d", "note_en": "The Mun v0.2 release is on the horizon, so we wanted to take this opportunity to delve a littledeeper into this release\u2019s big newcomer:  hot reloadable structs. Being able to effortlessly hotreload data was what we originally set out to do when designing Mun, so we are excited to share howwe brought this feat about.\n At its core Mun leverages function and type information - known as  symbols - that are generatedby the Mun Compiler. When changes to a source file cause a recompilation, the runtime detects thisand attempts to  hot reload; swapping out old functions and types with their new counterparts,without stopping the host application. Whereas hot reloading of functions can be easily done inmost languages (e.g. by swapping shared libraries with a fixed API), hot reloading data is morecomplicated because it requires  ...\n  Given the old and new layout of a struct, we can  memory map field values from an old structinstance to a new instance\u2019s memory locations. Thanks to Mun\u2019s symbols we can now deduce thismapping - albeit nontrivial. The remainder of this blog will explain the algorithm we\u2019ve developedto create a \u201ccorrect\u201d memory mapping from an old list of types to a new list.\n  Another way of thinking about the problem is: given a starting state  S and goal state  G, we canmake a sequence [ c 1,  c 2, ..  c n] of changes to S - in anyorder - such that we arrive in G. In an ideal world we\u2019d know all of the changes  c i ;instead we only know  S and  G. Thus, we need to deduce the \u201ccorrect\u201d set of changes ourselves.\n Note: It might be possible to obtain all changes  c i  by means of an IDE integrationthat converts all key strokes into a change set, but as we cannot assume that everyone will useour integration - nor that it is perfect - we need a good algorithm for the simplest use case.\n Analogous to our problem is  git diff, which determines the set of changes between two lists offiles. By default, git uses Myers diff algorithm to calculate the set of insertions and deletionsto go from a start state  S to a goal state  G. For a thorough explanation of the Myers diff algorithm, I recommend  this blog.\n  Myers diff algorithm serves as a good starting point to determine what is different, but we need torefine its result to figure out  how two structs might differ.\n  At this point, it\u2019s good to ask ourselves what possible differences could occur between two listsof structs. Given an old list of struct types,\n struct LayoutA  { a : f32 , b : i16 , c : u8 , d :  bool , } struct LayoutB  { e : u128 , f : i64 , } struct LayoutC  { g :  bool , }\n  struct LayoutBB  {  // Rename struct + Move struct e : u128 , f : i64 , } struct LayoutA  {  // Move struct c : u8 ,  // Move field a : f64 ,  // Convert field type + move field bb : i16 ,  // Rename field + move field // d: bool, // Delete field e : i16 ,  // Insert field } //struct LayoutC { // Delete struct // g: bool, //} struct LayoutD  {  // Insert struct z : i64 , }\n you\u2019ll notice two types of annotated differences: changes related to structs or to struct fields.The observant reader might already have recognised that in some cases, there are multiple possibleannotations. E.g. the change to  LayoutA::bb could also be classified as a newly inserted field,causing the old  LayoutA::bfield to be deleted. Both would be valid conclusions, butwhen designing our algorithm we decided to prefer any choice that would allow for data retention.We \u2019d rather have a user  ...\n So, how do we come up with the \u201ccorrect\u201d mapping? By adding some assumptions and restrictions, weare able to avoid most (if not all) ambiguous cases. The assumptions we\u2019ve made are:\n If an old struct type and a new struct type have the same name, they must be the same type. Inthis case, we accept any and all changes to the struct and its fields.  LayoutA is an example of this; the struct name remained the same but it was  moved down by oneposition and all of its field were  edited.\n If an old struct type and a new struct type have different names but their fields are all thesame, then the struct must have been  renamed and can optionally be  moved.  LayoutB is an example of this; the struct was  renamed to  LayoutBB and it was  moved up byone position, but all of its fields remained the same.\n If an old field and new field have the same name and type, they must have remained unchanged. Inthis case, the field can be  moved.  LayoutA::c is an example of this; the field name and type remained the same but it was  movedup two positions.\n If an old field and new field have the same name, they must be the same field. In this case, weaccept a  type conversion and the field can potentially be  moved.  LayoutA::a is an example of this; the field name remained the same but it was  moved down byone position and underwent a  type conversion.\n If an old field and new field have different names but the same type, the field  could havebeen renamed. As there can be multiple candidates with the same type, we accept the  renamed andpotentially  moved field that is closest to the original index of the old field.  LayoutA::b is an example of this; the field was  renamed to  bb and it was  moved down by oneposition. Another candidate would have been the newly inserted field  e which also has the sametype  i16, but would have been moved  ...\n  A struct cannot simultaneously be renamed and its fields edited. This is intended to preventcases such as  LayoutC from being  renamed to  LayoutD and their fields being  editedaccordingly.\n A struct field cannot simultaneously be renamed and its type changed. This is intended toprevent cases such as  LayoutA::d from being  renamed and undergoing a  type conversion to LayoutA::e.\n In both of the above cases, the difference will be recognised as two separate changes: an insertionand a deletion of the struct/field.\n Based on the above assumptions, we can make two enums to classify changes. For memory mapping,renaming of a struct won\u2019t affect the memory\u2019s layout, so we don\u2019t have a separate variant for thatcase.\n enum StructDiff  { Insert , Edit  { diff : Vec &lt;FieldDiff &gt;  } , Move , Delete , } enum FieldDiff  { Insert , Edit  { kind : FieldEditKind  } ,  // in-place edit Move  { edit : Option &lt;FieldEditKind &gt;  } ,  // move &amp; optional edit Delete , } enum FieldEditKind  { ConvertType , Rename , }\n With this knowledge we can create a  refine(insertion: Diff, deletion: Diff) -&gt; Option&lt;StructDiff&gt;function that tries to map pairs of Myers diff insertions and deletions to a  StructDiff::Edit or StructDiff:Move. If a  Diff cannot be refined, it is respectively labelled as StructDiff:Insert or  StructDiff::Delete. The pseudocode of our hot reloading algorithm wouldlook something like this:\n fn  hotreload (old_lib , new_lib )  {  let diff  = myers :: diff (old_lib . struct_types ( ) , new_lib . struct_types ( ) ) ;  let refined_diff  =  {  let  (insertions , deletions )  = diff . split ( ) ;  for insertion  in insertions  {  for deletion  in deletions  {  // try to find an optimal pair using `refine`  }  }  // add unused insertions &amp; deletions result  } ;  map_memory (old_lib .struct_instances , refined_diff ) ; }\n To find  an optimal pair we first calculate the number of changes necessary to convert a deletedstruct\u2019s fields to an inserted struct\u2019s fields - for all possible pairs - using Myers diffalgorithm. Then we perform a greedy search for  (insertion, deletion) pairs with the least numberof changes; until there are no viable candidates left. When a pair does not require any changes toits fields, the struct was merely  moved; otherwise it was  edited.\n For an  edited struct we need to also determine  how its fields differ from the old struct.This is where our assumptions come into play:\n fn  field_diff (old_fields , new_fields )  -&gt; Vec &lt;FieldDiff &gt;  {  let diff  = myers :: diff (old_fields , new_fields ) ;  let  (insertions , deletions )  = diff . split ( ) ;  let  (insertions , deletions )  =  {  for insertion  in insertions  {  for deletion  in deletions  {  // find all fields with the same name and type;  // i.e. `FieldDiff::Move { edit: None }`  }  }  // Continue the search with all unused differences  (unused_insertions , unused_deletions )  } ;  let  (insertions , deletions )  =  {  forinsertion  in  ...\n Step 2 takes priority over step 3 because the uniqueness of field names in a struct allows us toassume with reasonable certainty that the fields were intended to be mapped.\n  That wraps up the calculation of a refined diff between an old and new list of struct types. Usingthe refined diff and Mun\u2019s symbols we can now trivially create a mapping that maps old to new memoryaddresses for all fields, and apply this mapping to all heap-allocated struct instances.\n Hopefully I was able to convey the algorithm clearly, but in case you have any questions feel freeto ask them on  Discord or  Twitter.You can also dive directly into the  Myers diff,  struct diff, field diff,  diff to mapping conversion, or memory mapping source code on our  Github.", "posttime": "2020-05-02 18:01:13", "tags": "app,\u5185\u5b58,\u7ed3\u6784,reloadable,struct", "title": "\u70ed\u53ef\u91cd\u8f7d\u7ed3\u6784\uff1a\u5185\u5b58\u6620\u5c04", "title_en": "Hot Reloadable Structs: Memory Mapping", "transed": 0, "url": "https://mun-lang.org/blog/2020/05/01/memory-mapping/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["app", "\u5185\u5b58", "\u7ed3\u6784", "struct"]}, {"category": "", "categoryclass": "", "imagename": "e96f598423d8b84ab9001f8f36b51a78.jpg", "infoid": 1000241, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e0d\u662f\u6d41\u884c\u75c5\u5b66\u6a21\u5f0f\u3002\u8fd9\u662f\u4e00\u4e2a\u6d41\u884c\u75c5\u5b66\u6a21\u578b\u7684\u90e8\u5206\u6280\u672f\u6f14\u793a\u3002\u4f60\u73b0\u5728\u770b\u5230\u7684\u662f\u82f1\u56fd\u76841000\u4e07\u6a21\u62df\u4eba\u3002\u5728\u8fd9\u4e2a\u56fd\u5bb6\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u5f88\u5c0f\u7684\u673a\u4f1a\u611f\u67d3\u5176\u4ed6\u4eba\uff0c\u800c\u4e14\u8fd9\u79cd\u673a\u4f1a\u968f\u7740\u8ddd\u79bb\u7684\u589e\u52a0\u800c\u4e0b\u964d\u3002\n\u6709\u4e00\u5343\u4e07\u4eba\uff0c\u4f60\u4f1a\u8ba4\u4e3a\u4e0a\u8ff0\u52a8\u753b\u7684\u6bcf\u4e00\u5e27\u90fd\u4f1a\u6d89\u53ca\u5230\u8ba1\u7b97100\u4e07\u4ebf(\u4e00\u5343\u4e07\u5e73\u65b9)\u7684\u4e92\u52a8\u3002\u5373\u4f7f\u5bf9\u4e8e\u73b0\u4ee3\u7684\u7845\u6765\u8bf4\uff0c\u8fd9\u4e5f\u662f\u5f88\u591a\u7684\uff01\u4f46\u662f\uff0c\u7269\u7406\u5b66\u4e2d\u6709\u4e00\u79cd\u9c9c\u4e3a\u4eba\u77e5\u7684\u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728\u6bcf\u5e27\u51e0\u79d2\u949f\u5185\u5b8c\u6210\u8fd9\u4e00\u4efb\u52a1\u3002\n\u8be5\u7b97\u6cd5--\u5feb\u901f\u591a\u6781\u5b50\u65b9\u6cd5--\u5728\u6574\u4f53\u4e0a\u76f8\u5f53\u590d\u6742\u3002\u4f46\u5b83\u6709\u4e00\u4e2a\u5173\u952e\u601d\u60f3\uff0c\u90a3\u5c31\u662f\u5b83\u7684\u9002\u7528\u6027\u5f88\u5e7f\uff0c\u4e3a\u4e86\u5b83\u7684\u7f18\u6545\uff0c\u6211\u5c06\u5728\u4e0d\u4f7f\u7528\u4efb\u4f55\u4ee3\u6570\u7684\u60c5\u51b5\u4e0b\u89e3\u91ca\u8be5\u7b97\u6cd5\u3002\n\u6280\u672f\u7efc\u8ff0\u5feb\u901f\u591a\u6781\u5b50\u65b9\u6cd5\u5c06\u4e8c\u6b21\u65f6\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u95ee\u9898\u8f6c\u5316\u4e3a\u7ebf\u6027\u65f6\u95f4\u95ee\u9898\uff0c\u6700\u8fd1\u7684\u4e00\u4e2a\u79f0\u4e3a\u9ed1\u76d2\u591a\u6781\u5b50\u65b9\u6cd5\u7684\u7248\u672c\u53ef\u4ee5\u5bf9\u4f60\u9009\u62e9\u7684\u4efb\u4f55\u76f8\u4e92\u4f5c\u7528\u90fd\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5173\u952e\u601d\u60f3\u662f\u8fd1\u4f3c\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u8fd9\u4e5f\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u5927\u90e8\u5206\u76ee\u7684\u6240\u5728\u3002\n\u4e5f\u8bb8\u6e90\u5934\u662f\u4e00\u9897\u884c\u661f\uff0c\u800c\u78c1\u573a\u5c31\u662f\u5b83\u7684\u5f15\u529b\u3002\u4e5f\u8bb8\u6e90\u662f\u7c92\u5b50\uff0c\u573a\u662f\u7535\u573a\u3002\u53ef\u80fd\u6e90\u5934\u662f\u611f\u67d3\u8005\uff0c\u800c\u7530\u91ce\u5c31\u662f\u4f20\u64ad\u98ce\u9669\u3002\n\u5bf9\u4e8e\u6211\u4eec\u7684\u76ee\u7684\u6765\u8bf4\uff0c\u8be5\u5b57\u6bb5\u4ee3\u8868\u7684\u5e76\u4e0d\u662f\u90a3\u4e48\u91cd\u8981\uff0c\u56e0\u4e3a\u65e0\u8bba\u5b83\u4ee3\u8868\u4ec0\u4e48\uff0c\u8ba1\u7b97\u5b83\u7684\u65b9\u6cd5\u90fd\u662f\u76f8\u540c\u7684\u3002\u4e3a\u4e86\u8ba1\u7b97\u573a\uff0c\u6211\u4eec\u4f9d\u6b21\u67e5\u770b100\u4e2a\u7b49\u95f4\u8ddd\u7684\u70b9\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u7684\u6e90\u78c1\u573a\u5f3a\u5ea6\uff1a\n\u5982\u679c\u6709\u591a\u4e2a\u6765\u6e90\uff0c\u5219\u5b83\u4eec\u7684\u5b57\u6bb5\u52a0\u5728\u4e00\u8d77\u3002\u8981\u8ba1\u7b97\u67d0\u4e00\u70b9\u7684\u7ec4\u5408\u573a\uff0c\u9700\u8981\u8003\u8651\u6bcf\u4e2a\u6e90\u53d1\u51fa\u7684\u573a\u3002\u5bf9\u4e8e100\u4e2a\u6e90\u548c100\u4e2a\u70b9\uff0c\u9700\u8981\u8fdb\u884c100\u00d7100=10\uff0c000\u6b21\u8ba1\u7b97\uff1a\n\u4e0d\u8fc7\uff0c\u8fd9\u662f\u76f8\u5f53\u6d6a\u8d39\u7684\u3002\u5982\u679c\u6211\u4eec\u6709\u4e00\u5806\u5f7c\u6b64\u63a5\u8fd1\u7684\u6d88\u606f\u6765\u6e90\uff0c\u5c31\u50cf\u6211\u4eec\u4e0b\u9762\u505a\u7684\u90a3\u6837\uff0c\u90a3\u4e48\u4ed6\u4eec\u5bf9\u8fd9\u4e00\u70b9\u7684\u8d21\u732e\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u901a\u8fc7\u4f7f\u7528\u8fd1\u4f3c\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u5de5\u4f5c\uff1a\u5c06\u6240\u6709\u9707\u6e90\u79fb\u52a8\u5230\u540c\u4e00\u5730\u70b9\uff0c\u4ece\u8be5\u5730\u70b9\u8fdb\u884c\u4e00\u6b21\u8ba1\u7b97\uff0c\u7136\u540e\u5c06\u8ba1\u7b97\u51fa\u7684\u573a\u5f3a\u4e58\u4ee5\u8be5\u7ec4\u4e2d\u7684\u9707\u6e90\u6570\u91cf\uff1a\n\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u70b9\u5e76\u4e0d\u5b8c\u5168\u4f4d\u4e8e\u573a\u7ebf\u4e0a\u3002\u8fd9\u662f\u56e0\u4e3a\u53ea\u6709\u5f53\u70b9\u8fdc\u79bb\u9707\u6e90\u65f6\uff0c\u6211\u4eec\u624d\u80fd\u6446\u8131\u8fd9\u79cd\u8fd1\u4f3c\u3002\u5f53\u70b9\u79bb\u9707\u6e90\u5f88\u8fdc\u65f6\uff0c\u9707\u6e90\u53ef\u4ee5\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8\u4e00\u70b9\uff0c\u4e0d\u4f1a\u6709\u592a\u5927\u5f71\u54cd\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u8be5\u70b9\u79bb\u9707\u6e90\u5f88\u8fd1\uff0c\u90a3\u4e48\u6bcf\u4e2a\u9707\u6e90\u7684\u786e\u5207\u4f4d\u7f6e\u5c31\u5f88\u91cd\u8981\u4e86\uff0c\u800c\u8fd9\u79cd\u8fd1\u4f3c\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u53d1\u6325\u4f5c\u7528\uff1a\n\u5e78\u8fd0\u7684\u662f\uff0c\u867d\u7136\u5927\u591a\u6570\u70b9\u4e0e\u5927\u591a\u6570\u6765\u6e90\u76f8\u53bb\u751a\u8fdc\uff0c\u6240\u4ee5\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd1\u4f3c\u6548\u679c\u90fd\u5f88\u597d\u3002\n\u5bf9\u4e8e\u8fdc\u79bb\u4e00\u7ec4\u7684\u6240\u6709\u70b9\uff0c\u5bf9\u6574\u4e2a\u7ec4\u8fdb\u884c\u4e00\u6b21\u8ba1\u7b97\u3002\n\u5bf9\u4e8e\u9760\u8fd1\u7ec4\u7684\u6240\u6709\u70b9\uff0c\u5bf9\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6e90\u8fdb\u884c\u4e00\u6b21\u8ba1\u7b97\u3002\n\u8fd9\u91cc\u7684\u201c\u8fd1\u201d\u548c\u201c\u8fdc\u201d\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u55ef\uff0c\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u5728\u88ab\u8fd1\u4f3c\u7684\u9707\u6e90\u65c1\u8fb9\u7684\u70b9\u4e0a\u4f7f\u7528\u8fd1\u4f3c\u503c\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u6700\u574f\u7684\u60c5\u51b5\uff0c\u4f5c\u4e3a\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u4e00\u4e2a\u7fa4\u4f53\u6ca1\u6709\u5750\u5728\u8be5\u7fa4\u4f53\u6216\u8be5\u7fa4\u4f53\u7684\u90bb\u5c45\u4e4b\u4e0b\uff0c\u6211\u4eec\u5c31\u4f1a\u8bf4\u8fd9\u4e00\u70b9\u6765\u81ea\u8be5\u7fa4\u4f53\u3002\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u8d62\u5f97\u7684\u5206\u6570\u4e0d\u4f1a\u6070\u597d\u63a5\u8fd1\u8fd1\u4f3c\u503c\u3002\n\u603b\u5171\u8fdb\u884c\u4e863\uff0c500\u6b21\u8ba1\u7b97-\u6539\u8fdb\u4e8665%\uff01\u8fd9\u4e0d\u662f\u4e00\u4ef6\u5c0f\u4e8b--\u4f46\u662f\u6211\u4eec\u80fd\u505a\u5f97\u66f4\u597d\u5417\uff1f\n\u55ef\uff0c\u4e0a\u9762\u7684\u56e2\u961f\u89c4\u6a21\u5b8c\u5168\u662f\u968f\u610f\u7684\u3002\u5b83\u4eec\u6ca1\u6709\u7406\u7531\u4e0d\u80fd\u5927\u4e00\u500d\uff1a\n\u603b\u5171\u8fdb\u884c\u4e86\u4e09\u5343\u4e8c\u767e\u6b21\u8ba1\u7b97\u3002\u603b\u4f53\u800c\u8a00\uff0c\u8fd9\u8981\u597d\u4e00\u4e9b\uff0c\u4f46\u5982\u679c\u6211\u4eec\u65e2\u53ef\u4ee5\u4ece\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u83b7\u5f97\u5c11\u91cf\u7684\u8fd1\u8ddd\u79bb\u8ba1\u7b97\uff0c\u53c8\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u83b7\u5f97\u5c11\u91cf\u7684\u8fdc\u8ddd\u79bb\u8ba1\u7b97\uff0c\u60c5\u51b5\u4f1a\u600e\u6837\u5462\uff1f\n\u5927\u6bd4\u4f8b\u5c3a\u548c\u5c0f\u6bd4\u4f8b\u5c3a\u540c\u65f6\u4f7f\u7528\u600e\u4e48\u6837\uff1f\u73b0\u5728\u7684\u8ba1\u5212\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a\n\u5728\u5927\u7ec4\u6bd4\u4f8b\u4e2d\u7684\u4efb\u4f55\u8fdc\u5904\u7684\u70b9\u4e0a\u4f7f\u7528\u5927\u7ec4\u8fd1\u4f3c\u3002\n\u5bf9\u5c0f\u7ec4\u6bd4\u4f8b\u4e2d\u8ddd\u79bb\u8f83\u8fdc\u7684\u4efb\u4f55\u5269\u4f59\u70b9\u4f7f\u7528\u5c0f\u7ec4\u8fd1\u4f3c\u3002\n\u6211\u4eec\u57fa\u672c\u4e0a\u6b63\u5728\u6539\u53d8\u201c\u8fd1\u8ddd\u79bb\u201d\u548c\u201c\u8fdc\u8ddd\u79bb\u201d\u7684\u6982\u5ff5\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6211\u4eec\u5173\u6ce8\u7684\u662f\u5927\u56e2\u4f53\u8fd8\u662f\u5c0f\u56e2\u4f53\u3002\u903b\u8f91\u662f\uff0c\u5bf9\u5927\u7fa4\u4f53\u7684\u8fd1\u4f3c\u8ba1\u7b97\u53ef\u80fd\u4f1a\u4f7f\u6e90\u79fb\u52a8\u5f88\u8fdc\uff0c\u6240\u4ee5\u8fd1\u4f3c\u53ea\u4f1a\u5728\u5f88\u8fdc\u7684\u8ddd\u79bb\u4e0a\u662f\u51c6\u786e\u7684\u3002\u8d8a\u5c0f\u7684\u7ec4\u79fb\u52a8\u7684\u9707\u6e90\u8d8a\u5c11\uff0c\u6240\u4ee5\u8fd1\u4f3c\u5728\u66f4\u5c0f\u7684\u8ddd\u79bb\u4e0a\u5c31\u4f1a\u5f88\u7cbe\u786e\u3002\n\u8fd9\u786e\u5b9e\u4f1a\u8ba9\u6211\u4eec\u7684\u8ba1\u7b97\u51cf\u5c11\u52302500\u6b21\uff0c\u4f46\u6211\u4eec\u6ca1\u6709\u7406\u7531\u4e0d\u518d\u91cd\u590d\u8fd9\u4e2a\u5927\u7fa4\u4f53\u7684\u628a\u620f\u51e0\u6b21\uff1a\n\u8fd9\u662f\u5feb\u901f\u591a\u6781\u5b50\u65b9\u6cd5\u7684\u5173\u952e\u601d\u60f3\uff1a\u6211\u4eec\u5e94\u8be5\u5efa\u7acb\u4e00\u4e2a\u8fd1\u4f3c\u5c42\u6b21\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u53ea\u80fd\u5728\u4e00\u4e2a\u5c3a\u5ea6\u4e0a\u4f7f\u7528\u7684\u4e00\u4e2a\u8fd1\u4f3c\u3002\u53ef\u4ee5\u4f7f\u7528\u8f83\u5c0f\u7684\u8fd1\u4f3c\u503c\u6765\u4ee3\u66ff\u8981\u6c42\u8f83\u9ad8\u7684\u77ed\u7a0b\u8ba1\u7b97\u3002", "note_en": "This is not an epidemiological model. It&#39;s a  tech demo for part of an epidemiological model. What you&#39;re looking at is ten million simulated people in the United Kingdom. Each person has a small chance of infecting each other person in the country, and that chance drops with distance.\n With ten million people, you&#39;d think that each frame of the above animation would involve calculating a hundred trillion (ten million squared) interactions. Even for modern silicon, that&#39;s a lot! But there is a lesser-known algorithm from physics that can do it in a few seconds per frame.\n That algorithm - the  fast multipole method - is pretty involved in its entirety. But it has a key idea in it that&#39;s widely applicable, and for its sake I&#39;m going to explain the algorithm without using any algebra at all.\n Technical SummaryFast multipole methods turn quadratic-time interaction problems into linear-time problems, and a recent version called the black-box multipole method can do it for any interaction you choose. The key idea is  a hierarchy of approximations, and that&#39;s what most of this post is aimed towards explaining.\n    Maybe the source is a planet and the field is its gravity. Maybe the source is a particle and the field is the electric field. Maybe the source is an infected person and the field is the transmission risk.\n What the field represents isn&#39;t so important for our purposes, because whatever it represents the way to calculate it is the same. To calculate the field, we look at each of a 100 equally-spaced points in turn and calculate the strength of the source&#39;s field at each one:\n   If there&#39;s more than one source, then their fields add together. To calculate the combined field at a point, the field emitted by each source needs to be taken into account. With 100 sources and 100 points, there are 100 \u00d7 100 = 10,000 calculations to do:\n   That&#39;s pretty wasteful though. If we&#39;ve got a bunch of sources close to eachother like we do below, then they all make about the same contribution to the point. We could save a lot of work by using an approximation: move all the sources to the same spot, do  one calculation from that spot, and then multiply the calculated field strength by the number of sources in the group:\n  If we look closely, we can see that the point doesn&#39;t  quite lie on the field line. This is because we can only get away with this kind of approximation when the point is far from the sources. When the point is far from the sources, the sources can be shifted left or right a bit without it mattering much. If the point is close to the sources though, then the exact location of each source is important, and the approximation doesn&#39;t work so well:\n   Fortunately though most points are far way from most sources, so  most of the time the approximation works fine.\n  For all the points  far from a group do one calculation for the whole group.\n For all the points  near to a group do one calculation for each source in the group.\n What&#39;s &#39;near&#39; and &#39;far&#39; mean here? Well, the worst case scenario is if the approximation is used on a point that&#39;s  right next to the sources being approximated. As a simple way to avoid this worst-case, we&#39;ll say a point is &#39;far&#39; from a group if it doesn&#39;t sit under that group or the group&#39;s neighbours. That guarantees the point won&#39;t be right next door to the approximation.\n     for 3,500 calculations total - a 65% improvement! That&#39;s no small thing - but can we do better?\n  Well, the group sizes above were totally arbitrary. There&#39;s no reason they can&#39;t be twice as big:\n    for 3,200 calculations in total. That&#39;s a bit better overall, but what about if we could get  both the small number of near calculations from the previous example and the small number of far calculations from this one?\n How about using both the the big scale and small scale at the same time? Now the plan looks like:\n Use the big group approximation on any points far away  in the big group scale.\n Use the small group approximation on any leftover points far away  in the small group scale.\n We&#39;re basically changing the idea of &#39;near&#39; and &#39;far&#39; depending on whether we&#39;re looking at big groups or small groups. The logic is that the approximate calculation with the big group might move the sources a long way, and so the approximation is only going to be accurate at a big distance. Smaller groups move the sources less, and so the approximation is going to be accurate at a smaller distance.\n   does get us down to 2,500 calculations, but there&#39;s no reason we can&#39;t repeat this bigger-groups trick a few more times:\n   This is the key idea in the fast multipole method: rather than using one approximation that can only be used at one scale, we should build a  hierarchy of approximations. Small approximations can be used to replace the short-range calculations that require high accuracy, while big approximations can be used to replace the more numerous low-accuracy long-range calculations.\n For example: at the top level of the previous animation, the approximation might involve moving a source fully one-eighth of the way across the screen! We get away with it because that approximation is only ever used with points more than quarter a screen away from the source. The lowest level of approximations meanwhile only ever get used to replace a small number of calculations, but they&#39;re accurate from 1/16th of a screen on out.\n   So the grouping idea relies on the fact that the greater the distance between a source and point, the less accurate we have to be about exactly where the  source is. But we can rephrase that and also say: the greater the distance between a source and point, the less accurate we have to be about exactly where the  point is!\n   We can see where this is going. Returning to one layer of groups, grouping both sources and points looks like this:\n  And just like before, we can stack groups of different sizes to make things even faster:\n  This is the  fast multipole method at its core: recursively approximate the sources, recursively approximate the points, and get 10,000 calculations down to 1,000.\n That&#39;s the end of the expository part of this post. What follows is decidedly more technical, and discusses the details of the method in the real world.\n  The problem explained above is simplified a  lot from the kind you&#39;d see in the wild.\n The first - obvious - simplification is that the problems given here are all 1D, when the typical problem of interest is 2D or 3D. The same ideas work just as well in higher dimensions however, and it&#39;s possible to design code that handles problems of any dimension.\n Next, the sources here all make the same strength contribution. In the wild, each source usually has a differing mass or charge or infectiousness. This is easy enough to handle: rather than counting the sources when you gather the sources to the middle of a group, you sum them instead.\n Finally, the sources and points in the problem above are evenly distributed. Each group at the bottom has roughly the same number of sources and points in. In the real world this isn&#39;t usually the case. The fix is to replace the &#39;full&#39; binary tree shown above with an &#39;adaptive&#39; binary tree that splits further in regions of higher density. This introduces a fairly substantial amount of complexity.\n In its full generality, the fast multipole method will accelerate any problem that involves measuring the summed influence of many sources at many points. The only restrictions are that each source&#39;s field needs to be the same &#39;shape&#39;, differing only in scale, and the field shape needs to be &#39;nice&#39; in some reasonable ways.\n  In the algorithm described above, the approximation used is the simplest possible: it&#39;s a constant across the group, and the constant is the field strength at the center of the group. This has the advantage of being easy to explain, and frankly for many purposes it&#39;ll do just fine. Some toy experiments with using a constant approximation gave me an MSE of about .1%. But if you want higher accuracy than that, either you need to widen the neighbourhood you consider  ...\n When the algorithm was first developed for physics simulations in the 1980s, the approximation of choice was a  Laurent series. It makes for a really good approximation, but requires a fair bit of hand-rolled maths catered to exactly the field you&#39;re looking at. This is where the name &#39;multipole method&#39; comes from, as Laurent series are defined around &#39;poles&#39; where the approximation becomes infinite. Each group has it&#39;s own &#39;pole&#39;, and hence, multipole!\n The name is a bit of a shame, since the key idea has nothing to do with Laurent series or poles. I suspect if this algorithm had been called the &#39;recursive approximation method&#39;, it&#39;d be a lot more widely known.\n In the more recent &#39;black-box&#39; version from the late 2000s, a  Chebyshev approximationis used instead. The advantage of the Chebyshev approximation is that it requries no domain-specific tuning at all: you can pass an arbitrary field to the code and it&#39;ll figure things out by evaluating it at a handful of points. The downside to the Chebyshev approximation is that it requires more variables and more computation for a given level of accuracy than the Laurent  ...\n In both cases, the number of coefficients used by the approximation can be adjusted. More coefficients means exponentially better accuracy, but a polynomially slower computation.\n  Using the fast multipole method usually only speeds things up for large problems. Depending on how well-optimized your code is, the &#39;crossover point&#39; where the fast multipole method is actually faster than the direct method can be anywhere between a few thousand points and tens of millions. Since the fast multipole method is asymptotically faster it  will eventually win out, but in the real world you might discover that you run out of memory first.\n Eagle-eyed data readers will have noticed that while I&#39;ve claimed the fast multipole method is linear-time, the method involves constructing a tree of groups. Constructing a tree takes more than linear time, so what gives? Well, typical problems aren&#39;t usually stand-alone, but are solved again and again with very similar configurations of sources and points. The epidemiology demo example from the top of the page is a case in point: the &#39;people&#39;  ...\n In problems where the sources or points move from step-to-step though, the tree needs to be updated at each step. Fortunately in most of the problems where sources or points move, they don&#39;t move  much at each step, and you can dynamically re-compute just the bit of the tree that&#39;s relevant, rather than starting over from scratch.\n Something else that&#39;s ignored in the animations above is that in practice, repeatedly updating each point would slow things down to worse than linear time. The solution is to instead make two passes through the whole tree. The first pass is from the bottom up, using the source density of each child group to infer the source density of the parent. Then the second pass is from the top down, calculating the field strength at the center of each group using  ...\n Finally, there is the issue that these are all approximation methods. Approximation methods give approximate answers, and without the  truesolution to hand you can&#39;t tell how accurate the approximation is. Instead, we have to fall back on an analytical bound on the error. There are explicit bounds available for the classical Laurent-series based version, but frustratingly the black-box multipole method paper only offers empirical evidence that the error  ...\n  As with all intricate numerical algorithms, the most important thing is to validate it against a slower, simpler version. This is particularly true of the fast multipole method, where the direct approach can be written in one line of Python. It&#39;s especially useful to design your validation problems so they isolate parts of the maths, like\n check it matches the direct method when you&#39;ve one source and one point and they&#39;re in the  same group\n check it matches the direct method when you&#39;ve one source and one point and they&#39;re in  neighbouring groups\n check it matches the direct method when you&#39;ve one source and one point and they&#39;re  not in neighbouring groups\n One of the nice things about the fast multipole method in particular is that while the final output is approximate, the intermediate numbers that contribute to that approximation have physical, interpretable values. That&#39;s a strong contrast to many other numerical schemes, where the intermediate numbers are really hard to sanity-check.\n The  other nice thing about it comes back to the tree-reuse mentioned above. Most of the complexity comes from building the tree and building lists of which groups interact with which. That can all be implemented and verified independently of the actual numeric code.\n The basics of unit testing aside, I would strongly advise you to implement a version using  static trees and a  constant approximation first. Swapping either of those out - to adaptive trees or a better approximation - will likely introduce a lot of new flaws that hide any older flaws in your core implementation.\n  The genesis of all these words was  my own GPU-accelerated, general-dimensional, dynamic-tree black-box fast multipole method implementation. Fair warning, the code could use some comments.\n This key idea of &#39;recursive approximation&#39; turns up in a few places. I&#39;ve previously run into it\n Most of the educational resources on fast multipole methods take a much more mathematical bent than I have here. They&#39;re also focused on the classic, Laurent-series-based version. Of those resources, my favourites are\n Carrier, Greengard &amp; Rokhlin&#39;s original paper, which is both wonderfully detailed  and one of the few resources to describe dynamic trees.\n While all the attention is on the classical version, the black-box fast multipole method is a great deal more flexible and conceptually simpler to boot.\n  All of this was assembled in the fantastic  ObservableHQ. This was my first experience with the platform, and while animation is  still excruciatingly slow to put together, ObservableHQ made it much less so than I feared it would be.  You can find the code underlying this post here.", "posttime": "2020-05-02 18:01:09", "tags": "\u95ee\u9898,methods,\u8ba1\u7b97,approximation", "title": "\u8d28\u91cf\u95ee\u9898\u7684\u591a\u6781\u5b50\u65b9\u6cd5", "title_en": "Multipole Methods for the Masses", "transed": 0, "url": "https://andyljones.com/posts/multipole-methods.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u95ee\u9898", "methods", "\u8ba1\u7b97"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000240, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "OpenShift do(Odo)\u662f\u4e00\u4e2a\u5feb\u901f\u3001\u8fed\u4ee3\u3001\u7b80\u5355\u7684CLI\u5de5\u5177\uff0c\u9002\u7528\u4e8e\u5728OpenShift\u4e0a\u7f16\u5199\u3001\u6784\u5efa\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u4eba\u5458\u3002<br><br>\u73b0\u6709\u5de5\u5177(\u5982oc)\u66f4\u4fa7\u91cd\u4e8e\u64cd\u4f5c\uff0c\u9700\u8981\u6df1\u5165\u7406\u89e3Kubernetes\u548cOpenShift\u6982\u5ff5\u3002Odo\u4e3a\u5f00\u53d1\u4eba\u5458\u62bd\u8c61\u4e86\u590d\u6742\u7684Kubernetes\u548cOpenShift\u6982\u5ff5\u3002", "note_en": "OpenShift Do (odo) is a fast, iterative, and straightforward CLI tool for developers who write, build, and deploy applications on OpenShift.<br><br>Existing tools such as oc are more operations-focused and require a deep-understanding of Kubernetes and OpenShift concepts. odo abstracts away complex Kubernetes and OpenShift concepts for the developer.", "posttime": "2020-05-02 18:01:06", "tags": "\u53d1\u5e03,\u5f00\u53d1,hat,openshift", "title": "Red Hat\u53d1\u5e03\u65b0\u7684OpenShift CLI\u5f00\u53d1\u5de5\u5177", "title_en": "Red Hat releases new OpenShift CLI developer tool", "transed": 0, "url": "https://odo.dev/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u53d1\u5e03", "\u5f00\u53d1", "hat", "openshift"]}, {"category": "", "categoryclass": "", "imagename": "907e4d850c1c8da20bcb5b089feb01d7.jpg", "infoid": 1000239, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4efd\u8ba3\u544a\u662f\u4e00\u7cfb\u5217\u5173\u4e8e\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u4e2d\u6b7b\u4ea1\u7684\u4eba\u7684\u8ba3\u544a\u7684\u4e00\u90e8\u5206\u3002\u5728\u8fd9\u91cc\u9605\u8bfb\u5173\u4e8e\u5176\u4ed6\u4eba\u7684\u4fe1\u606f\u3002\n\u739b\u5fb7\u7433\u00b7\u514b\u91cc\u666e\u514b(Madeline Kripke)\u62e5\u6709\u4e16\u754c\u4e0a\u6700\u5927\u7684\u79c1\u4eba\u8bcd\u5178\u6536\u85cf\u4e4b\u4e00\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u90fd\u88ab\u585e\u8fdb\u4e86\u5979\u5728\u683c\u6797\u5a01\u6cbb\u6751\u7684\u516c\u5bd3\u91cc\u3002\u5979\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a\u81ea\u7531\u7684(adj.\uff0c\u5982\u4e0d\u541d\u556c\u5730\u7ed9\u4e88)\uff0cComplete[adj.\uff0c\u610f\u601d\u662f\u62e5\u6709\u6240\u6709\u5fc5\u8981\u7684\u6280\u80fd]\u548c\u7279\u6b8a\u7684[adj.\uff0c\u5355\u72ec\u5728\u4e00\u4e2a\u73ed\u7ea7\u91cc]\u3002\n\u4ece\u5979\u7236\u6bcd\u5728\u4e94\u5e74\u7ea7\u7ed9\u5979\u7684\u97e6\u4f2f\u65af\u7279\u5927\u5b66\u5f00\u59cb\uff0c\u5979\u79ef\u7d2f\u4e86\u5927\u7ea62\u4e07\u518c\u4e66\uff0c\u79cd\u7c7b\u7e41\u591a\uff0c\u6bd4\u59821502\u5e74\u5370\u5237\u7684\u4e00\u672c\u62c9\u4e01\u8bed\u8bcd\u5178\uff0c\u4e54\u7eb3\u68ee\u00b7\u65af\u5a01\u592b\u7279(Jonathan Swift)1722\u5e74\u51fa\u7248\u7684\u9898\u4e3a\u201c\u653e\u5c41\u7684\u597d\u5904\u201d\u7684\u5c0f\u518c\u5b50\uff0c\u4ee5\u53ca\u7ebd\u7ea6\u5927\u90fd\u4f1a\u8fd0\u8f93\u5c40(New York Metropolitan Transportation Authority)1980\u5e74\u51fa\u7248\u7684\u6252\u7a83\u4fda\u8bed\u6307\u5357\u3002\n\u514b\u91cc\u666e\u514b\u4e8e4\u670825\u65e5\u5728\u66fc\u54c8\u987f\u53bb\u4e16\uff0c\u4eab\u5e7476\u5c81\u3002\u5979\u7684\u54e5\u54e5\u7d22\u5c14\u00b7\u514b\u91cc\u666e\u514b(Saul Kripke)\u662f\u4e00\u4f4d\u8457\u540d\u7684\u54f2\u5b66\u5bb6\uff0c\u4e5f\u662f\u7ebd\u7ea6\u5e02\u7acb\u5927\u5b66\u7814\u7a76\u751f\u4e2d\u5fc3(City University Of New York Graduate Center)\u7684\u6559\u6388\uff0c\u4ed6\u8bf4\u6b7b\u56e0\u662f\u51a0\u72b6\u75c5\u6bd2\u548c\u80ba\u708e\u5e76\u53d1\u75c7\u3002\n\u514b\u91cc\u666e\u514b\u5973\u58eb\u7684\u6240\u6709\u53c2\u8003\u4e66\u90fd\u6ca1\u6709\u56de\u7b54\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u5979\u7684\u85cf\u54c1\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u572820\u4e16\u7eaa90\u5e74\u4ee3\u4e2d\u671f\uff0c\u5979\u540c\u610f\u79fb\u8d70\u5806\u653e\u5728\u8d70\u5eca\u91cc\u7684\u4e66\u7c4d\uff0c\u4ece\u800c\u907f\u514d\u4e86\u88ab\u9a71\u9010\u3002\u4e4b\u540e\uff0c\u5979\u66fe\u5e0c\u671b\u5c06\u6574\u672c\u6069\u5947\u62c9\u8fbe(\u4fda\u8bed\u7684\u610f\u601d)\u4ece\u5979\u7684\u516c\u5bd3\u548c\u4e09\u4e2a\u4ed3\u5e93\u8f6c\u79fb\u5230\u4e00\u6240\u5927\u5b66\uff0c\u6216\u8005\uff0c\u5982\u679c\u5979\u6709\u81ea\u5df1\u7684\u9009\u62e9\uff0c\u53ef\u4ee5\u628a\u5b83\u5b89\u88c5\u5728\u5979\u81ea\u5df1\u7684\u8bcd\u5178\u56fe\u4e66\u9986\u91cc\uff0c\u4f46\u5979\u4ece\u6765\u6ca1\u6709\u5efa\u8fc7\u3002\n\u201c\u4e0d\u5e78\u7684\u662f\uff0c\u5979\u7684\u6536\u85cf\u4f3c\u4e4e\u6ca1\u6709\u660e\u786e\u7684\u8ba1\u5212\uff0c\u201d\u5979\u7684\u54e5\u54e5\u5728\u63a5\u53d7\u7535\u8bdd\u91c7\u8bbf\u65f6\u8bf4\u3002\u4ed6\u662f\u5979\u552f\u4e00\u7684\u5e78\u5b58\u8005\u3002\u201c\u6211\u4eec\u73b0\u5728\u6b63\u4e0e\u5979\u7684\u4e00\u4e9b\u4e13\u5bb6\u670b\u53cb\u8054\u7cfb\uff0c\u5f81\u6c42\u4ed6\u4eec\u7684\u5efa\u8bae\u3002\u201d\n\u8fd9\u4e9b\u670b\u53cb\u6570\u91cf\u4f17\u591a\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u514b\u91cc\u666e\u514b\u5973\u58eb\u7684\u6177\u6168\u548c\u7cbe\u6e5b\uff0c\u5979\u63d0\u4f9b\u4e86\u8bcd\u6e90\u3001\u53d1\u97f3\u548c\u7528\u6cd5\uff0c\u7279\u522b\u662f\u5404\u79cd\u7c97\u4fd7\u548c\u4fda\u8bed\uff0c\u4ece\u963f\u6839\u5ef7\u7684\u571f\u8457\u884c\u8bdd\u5230\u6742\u800d\u3001\u4f26\u6566\u9ed1\u793e\u4f1a\u3001\u725b\u4ed4\u3001\u6f6e\u4eba\u548c\u51e0\u4ee3\u9752\u5c11\u5e74\uff0c\u90fd\u662f\u5979\u7684\u6177\u6168\u548c\u7cbe\u6e5b\u7684\u8d44\u6e90\u3002\n\u4f46\u201c\u9605\u8bfb\u725b\u6d25\u82f1\u8bed\u8bcd\u5178\uff1a\u4e00\u4e2a\u4eba\uff0c\u4e00\u5e74\uff0c21\uff0c730\u9875\u201d(2008)\u7684\u4f5c\u8005\u963f\u8499\u00b7\u8c22\u4f0a(Ammon Shea)\u8bf4\uff0c\u514b\u91cc\u666e\u514b\u5e76\u4e0d\u662f\u4e00\u4e2a\u4e0d\u5206\u9752\u7ea2\u7682\u767d\u7684\u6f2b\u6e38\u8005\u3002\u201c\u739b\u5fb7\u7433\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u5efa\u9020\u4e86\u4e00\u5ea7\u82f1\u56fd\u8bcd\u5178\u7f16\u7e82\u4f20\u7edf\u7684\u5927\u6559\u5802\uff0c\u6709\u6570\u4e07\u4ef6\u7cbe\u5fc3\u6311\u9009\u7684\u7269\u54c1\u3002\u201d\n\u739b\u5fb7\u7433\u00b7\u8d39\u601d\u00b7\u514b\u91cc\u666e\u514b\u51fa\u751f\u4e8e9\u67081\u65e5\u30021943\u5e749\u67089\u65e5\uff0c\u5728\u5eb7\u6d85\u72c4\u683c\u5dde\u7684\u65b0\u4f26\u6566\uff0c\u5979\u7684\u7236\u4eb2\u62c9\u6bd4\u00b7\u8fc8\u5c14\u00b7S\u00b7\u514b\u91cc\u666e\u514b(Rabbi Myer S.Kripke)\u5728\u90a3\u91cc\u9886\u5bfc\u7740\u4e00\u4e2a\u4fdd\u5b88\u7684\u72b9\u592a\u4f1a\u4f17\u3002\u5979\u7684\u6bcd\u4eb2\u591a\u841d\u897f(Karp)\u00b7\u514b\u91cc\u666e\u514b(Dorothy(Karp)Kripke)\u662f\u4e00\u4f4d\u513f\u7ae5\u5b97\u6559\u4e66\u7c4d\u7684\u4f5c\u8005\u3002\n\u739b\u5fb7\u7433\u5728\u5965\u9a6c\u54c8\u957f\u5927\uff0c\u5979\u7684\u7236\u4eb2\u662f\u8d1d\u4e1d\u00b7\u57c3\u5c14\u72b9\u592a\u6559\u5802\u7684\u62c9\u6bd4\uff0c\u5979\u7684\u7236\u6bcd\u662f\u6295\u8d44\u8005\u6c83\u4f26\u00b7\u5df4\u83f2\u7279(Warren Buffett)\u7684\u670b\u53cb(\u4e5f\u662f\u4ed6\u8d22\u52a1\u5efa\u8bae\u7684\u53d7\u76ca\u8005)\u3002\n\u5979\u4ece\u7236\u6bcd\u90a3\u91cc\u6536\u5230\u4e86\u97e6\u4f2f\u65af\u7279\u5b66\u9662\u7684\u4e66\uff0c\u5979\u544a\u8bc9\u4e39\u5c3c\u5c14\u00b7\u514b\u91cc\u683c(Daniel Krieger)\uff0c\u8981\u5728\u7f51\u7ad9\u4e0a\u5199\u4e00\u7bc7\u5173\u4e8e\u5979\u7684\u4e2a\u4eba\u8d44\u6599\uff0c\u5979\u53d9\u8ff0\u6027\u5730\u544a\u8bc9\u4ed6\uff0c\u201c\u4e3a\u6211\u6253\u5f00\u4e86\u4e16\u754c\uff0c\u56e0\u4e3a\u6211\u53ef\u4ee5\u7528\u6211\u60f3\u8981\u7684\u4efb\u4f55\u8bcd\u6c47\u6c34\u5e73\u9605\u8bfb\u3002\u201d\u5979\u505a\u5230\u4e86\uff0c\u8ba4\u771f\u5730\u8bb0\u5f55\u4e86\u5979\u4e0d\u7406\u89e3\u7684\u5355\u8bcd\u3002\n\u201c\u6211\u610f\u8bc6\u5230\u5b57\u5178\u90fd\u662f\u53ef\u4ee5\u65e0\u9650\u63a2\u7d22\u7684\uff0c\u201d\u5979\u544a\u8bc9\u514b\u91cc\u683c\uff0c\u201c\u6240\u4ee5\u5b83\u4eec\u8ba9\u6211\u5728\u673a\u7f18\u5de7\u5408\u3001\u53d1\u73b0\u548c\u542f\u793a\u7684\u6df7\u5408\u4e2d\u6253\u5f00\u4e86\u65b0\u7684\u53ef\u80fd\u6027\u3002\u201d\n\u5979\u8bf4\uff0c\u5728\u5df4\u7eb3\u5fb7\u5b66\u9662(Barnard College)\u83b7\u5f97\u82f1\u8bed\u5b66\u58eb\u5b66\u4f4d\u540e\uff0c\u5979\u572820\u4e16\u7eaa60\u5e74\u4ee3\u7559\u5728\u7ebd\u7ea6\uff0c\u4f5c\u4e3a\u62ab\u5934\u58eb\u548c\u5b09\u76ae\u58eb\u7684\u6df7\u5408\u4f53\u751f\u6d3b\uff0c\u5f53\u65f6\u5979\u62c5\u4efb\u798f\u5229\u6848\u4ef6\u5de5\u4f5c\u8005\u3001\u6559\u5e08\u548c\u6587\u6848\u7f16\u8f91\uff0c\u5e76\u5c06\u8fd9\u4e9b\u6280\u80fd\u5e94\u7528\u5230\u81ea\u5df1\u7684\u6536\u85cf\u4e2d\u3002\n\u5979\u4f5c\u4e3a\u8bcd\u5178\u7f16\u7e82\u8005\u81ea\u5b66\u6210\u624d\u3002\u4fda\u8bed\u4e13\u5bb6\u6c64\u59c6\u00b7\u8fbe\u5c14\u6cfd\u5c14(Tom Dalzell)\u8bf4\uff0c\u201c\u5979\u7528\u5979\u7236\u4eb2\u5bf9\u5f85\u5b97\u6559\u7684\u540c\u6837\u7684\u5b66\u672f\u548c\u7eaa\u5f8b\u6765\u5bf9\u5f85\u5979\u7684\u6536\u85cf\u548c\u7814\u7a76\uff0c\u5979\u7684\u54e5\u54e5\u4e5f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5bf9\u5f85\u6a21\u6001\u903b\u8f91\u3001\u8bed\u8a00\u54f2\u5b66\u3001\u5f62\u800c\u4e0a\u5b66\u3001\u8ba4\u8bc6\u8bba\u548c\u9012\u5f52\u7406\u8bba\u3002\u201d\n\u201c\u725b\u6d25\u82f1\u8bed\u8bcd\u5178\u201d\u524d\u7f16\u8f91\u6770\u897f\u00b7\u8c22\u5fb7\u52b3\u5c14\u8fd9\u6837\u8bc4\u4ef7\u514b\u91cc\u666e\u514b\uff1a\u201c\u5979\u4e0d\u4ec5\u4ec5\u662f\u79ef\u7d2f\u7d20\u6750\uff0c\u5979\u628a\u6240\u6709\u5185\u5bb9\u90fd\u8bfb\u5b8c\u4e86\uff0c\u8fd8\u80fd\u6839\u636e\u4e00\u90e8\u4f5c\u54c1\u4e0d\u540c\u7248\u672c\u7684\u53d8\u5316\u544a\u8bc9\u4f60\u7f16\u8f91\u7684\u4e2a\u6027\u3002\u201d\n\u540e\u6765\uff0c\u514b\u91cc\u666e\u514b\u6062\u590d\u4e86\u7ae5\u5e74\u65f6\u5728\u7b14\u8bb0\u672c\u4e0a\u8bb0\u5f55\u964c\u751f\u5355\u8bcd\u7684\u4e60\u60ef\uff0c\u4f46\u5979\u4ece\u6765\u6ca1\u6709\u5728\u8bd7\u6b4c\u6216\u6563\u6587\u4e2d\u8fd0\u7528\u8fc7\u81ea\u5df1\u7684\u8bed\u8a00\u80fd\u529b\uff0c\u9664\u4e86\u5076\u5c14\u7684\u8bd7\u53e5\uff0c\u6bd4\u5982\u5979\u5bf9\u4f0a\u5361\u6d1b\u65af\u7684\u9882\u6b4c\uff0c\u8fd9\u9996\u8bd7\u7684\u5f00\u5934\u662f\uff0c\u201c\u5f53\u4ed6\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u98de\u884c\u65f6\uff0c\u4ed6\u4e00\u5b9a\u662f\u5174\u594b\u4e86\u3002\u201d\n\u897f\u8499\u00b7\u6e29\u5f7b\u65af\u7279(Simon Winchester)\u662f2003\u5e74\u51fa\u7248\u7684\u201c\u4e00\u5207\u4e8b\u7269\u7684\u610f\u4e49\uff1a\u725b\u6d25\u82f1\u8bed\u8bcd\u5178\u7684\u6545\u4e8b\u201d(The Meight of Everything\uff1aThe Story of the Oxford English Dictionary)\u4e00\u4e66\u7684\u4f5c\u8005\uff0c\u4ed6\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u8bf4\uff1a\u201c\u6211\u4f1a\u6311\u6218\u5979\uff0c\u8ba9\u5979\u627e\u5230\u8fd9\u5377\u6377\u514b\u5916\u6765\u8bcd\uff0c\u6216\u8005\u90a3\u672c\u683c\u9675\u5170\u4fda\u8bed\u6216\u5929\u4f53\u7269\u7406\u5b66\u5e38\u7528\u672f\u8bed\u7684\u96c6\u5408--\u5979\u603b\u662f\u8bf4\uff0c\u2018\u662f\u7684\uff0c\u6211\u80af\u5b9a\u6211\u653e\u5728\u67d0\u4e2a\u5730\u65b9\u3002\u2019\u5979\u4f1a\u50cf\u5757\u83cc\u730e\u72ac\u4e00\u6837\u6f5c\u5165\u6c34\u4e2d\uff0c\u5f97\u610f\u6d0b\u6d0b\u5730\u6d6e\u51fa\u6c34\u9762\uff0c\u7136\u540e\u6211\u5c31\u4f1a\u9000\u4f11\uff0c\u603b\u662f\u88ab\u51fb\u8d25\u3002\u201d\n\u514b\u91cc\u666e\u514b\u5973\u58eb\u4e0e\u8bed\u8a00\u6709\u5173\u7684\u77ed\u6682\u7ecf\u5386\u5305\u62ec\u4e00\u672c\u8bcd\u5178\u9500\u552e\u5458\u4f7f\u7528\u624b\u518c\u548c\u4e00\u5c01\u4e54\u6cbb\u00b7\u6885\u91cc\u4e9a\u59c6\u5199\u7ed9\u4ed6\u4e08\u592b\u7684\u91cd\u8981\u4fe1\u4ef6\u3002", "note_en": "This obituary is part of a series about people who have died in the coronavirus pandemic. Read about others   here .\n Madeline Kripke, who kept one of the world\u2019s largest private collection of dictionaries, much of it crammed into her Greenwich Village apartment, could be defined this way: liberal [adj., as in giving unstintingly], compleat [adj., meaning having all the requisite skills] and sui generis [adj., in a class by itself].\n Beginning with the Webster\u2019s Collegiate that her parents gave her in the fifth grade, she accumulated an estimated 20,000 volumes as diverse as a Latin dictionary printed in 1502, Jonathan Swift\u2019s 1722 booklet titled \u201cThe Benefits of Farting Explained,\u201d and the New York Metropolitan Transportation Authority\u2019s 1980 guide to pickpocket slang.\n Ms. Kripke (pronounced KRIP-key) died on April 25 in Manhattan at 76. Her brother,  Saul Kripke, a noted philosopher and  professor at the City University of New York Graduate Center, said the cause was the coronavirus and complications of pneumonia.\n One question that none of Ms. Kripke\u2019s reference books answers is what will happen to her collection. After avoiding eviction in the mid-1990s by agreeing to remove the volumes stacked in the hallway, she had hoped to transfer the whole enchilada [slang for the entirety] from her apartment and three warehouses to a university or, if she had her druthers [n., preference], to install it in her own dictionary library, which she never got to build.\n \u201cUnfortunately, it appears that no clear plan existed for her collection,\u201d her brother, her only immediate survivor, said in a phone interview. \u201cWe are now in touch with some of her expert friends for advice.\u201d\n Those friends are legion [adj., multitudinous], thanks to Ms. Kripke\u2019s generosity and virtuosity as a resource on etymology [n., the derivation of words], pronunciation and usage and especially every variety of vulgarity and slang, from the indigenous argot of Argentina to the patois of vaudeville, the London underworld, cowboys, hipsters and generations of teenagers.\n  But Ms. Kripke was not an indiscriminate amasser, said Ammon Shea, the author of \u201c Reading the OED: One Man, One Year, 21,730 Pages\u201d (2008). \u201cMadeline,\u201d he said, \u201cbuilt a cathedral of the English lexicographic tradition, tens of thousands of carefully chosen items.\u201d\n Madeline Faith Kripke was born on Sept. 9, 1943, in New London, Conn., where her father, Rabbi  Myer S. Kripke, headed a Conservative Jewish congregation. Her mother, Dorothy (Karp) Kripke, was an author of children\u2019s religious books.\n Madeline grew up in Omaha, where her father was the rabbi of Beth El Synagogue and where her parents were friends of the investor Warren Buffett (and beneficiaries of his financial advice).\n  The Webster\u2019s Collegiate she received from her parents, she told Daniel Krieger for a profile about her on the website  Narratively, \u201cunlocked the world for me because I could read at any vocabulary level I wanted.\u201d Which she did, conscientiously documenting the words she didn\u2019t understand.\n \u201cI realized that dictionaries were each infinitely explorable,\u201d she told Mr. Krieger, \u201cso they opened me to new possibilities in a mix of serendipity, discovery and revelation.\u201d\n After earning a bachelor\u2019s degree in English from Barnard College, she remained in New York in the 1960s, living as a cross between a beatnik and a hippie, she said, then working as a welfare case worker, a teacher, and a copy editor and proofreader \u2014 skills she would apply to her collecting.\n She was self-taught as a lexicographer. \u201cShe approached her collection and study with the same scholarship and discipline with which her father approached religion,\u201d said Tom Dalzell, a slang expert, \u201cand with which her brother approaches modal logic, philosophy of language, metaphysics, epistemology and recursion theory.\u201d\n Jesse Sheidlower, a former editor at the \u201cOxford English Dictionary,\u201d said of Ms. Kripke, \u201cShe didn\u2019t just accumulate material; she read it all, and could tell you the editor\u2019s personality based on the changes made across varying editions of a work.&#34;\n While she later revived her childhood practice of recording unfamiliar words in a notebook, Ms. Kripke never exploited her command of language in poetry or prose, except for the occasional verse, like her ode to Icarus, which began, \u201cHe must have been high when he first tried to fly.\u201d\n Simon Winchester, the author of \u201c The Meaning of Everything: The Story of the Oxford English Dictionary\u201d (2003), said in an email: \u201cI would challenge her to find this volume of Czech loanwords or that collection of Greenland slang or Common Terms in Astrophysics \u2014 and she\u2019d always say, \u2018Yes, I\u2019m sure I have it somewhere,\u2019 and would dive in like a truffle hound and come up for air holding the volume in triumph, and I would retire, always defeated.\u201d\n  Ms. Kripke\u2019s linguistic-related ephemera included an instruction manual for dictionary salesmen and a pivotal letter from George Merriam to his brother Charles. The letter captured \u201cthe moment when the brothers hatch a plan for getting the rights to Noah Webster\u2019s dictionary \u2014 the Big Bang moment that leads directly to the creation of Merriam-Webster dictionaries,\u201d said John Morse, a former president and publisher of Merriam-Webster.\n About one-fifth of Ms. Kripke\u2019s collection represents what Mr. Winchester described in The New York Review of Books in 2012 as \u201cthe very living and breathing edge of the English language: the ragged and ill-defined omnium gatherum of informal, witty, clever, newborn, and usually impermanent words that constitute what for the past two centuries has been known as slang.\u201d\n Armed with a flashlight, she would hunt down \u201cA Classical Dictionary of the Vulgar Tongue\u201d from 1785; or \u201cThe Pocket Dictionary of Prison Slanguage\u201d (1941), by Clinton T. Duffy, a former warden of San Quentin; or the pornographic comic books known as Tijuana bibles.\n Ms. Kripke sold books, but she acquired even more, with surpassing dedication. As a young collector, she once coveted a 1694 edition of \u201cThe Ladies Dictionary,\u201d which she had found in a London shop at a time when she had only enough money for a planned train trip to France to meet a friend in Nice.", "posttime": "2020-05-02 18:00:55", "tags": "\u5143\u8001,kripke,\u8bcd\u5178", "title": "\u8bcd\u5178\u5143\u8001\u739b\u5fb7\u7433\u00b7\u514b\u91cc\u666e\u514b\u901d\u4e16\uff0c\u4eab\u5e7476\u5c81", "title_en": "Madeline Kripke, Doyenne of Dictionaries, Is Dead at 76", "transed": 0, "url": "https://www.nytimes.com/2020/04/30/nyregion/madeline-kripke-dead-coronavirus.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5143\u8001", "kripke", "\u8bcd\u5178"]}, {"category": "", "categoryclass": "", "imagename": "48761e098b8278920477ecc21ddaaa48.jpg", "infoid": 1000238, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u6709\u6ca1\u6709\u89c9\u5f97\u6709\u4eba\u6b20\u4f60\u94b1\uff1f\u53bb\u5e74\uff0c\u4fe1\u7528\u62a5\u544a\u673a\u6784Equifax\u53d7\u5230\u5f71\u54cd\u5927\u591a\u6570\u7f8e\u56fd\u4eba(56%)\u7684\u5927\u89c4\u6a21\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\u7684\u51b2\u51fb\u3002\u8be5\u516c\u53f8\u540c\u610f\u652f\u4ed87\u4ebf\u7f8e\u5143\uff0c\u8fd9\u662f\u540c\u7c7b\u548c\u89e3\u4e2d\u89c4\u6a21\u6700\u5927\u7684\u548c\u89e3\u534f\u8bae\u4e4b\u4e00\uff0c\u6d89\u53ca\u8eab\u4efd\u4fdd\u62a4\u76d1\u63a7\u670d\u52a1\u548c\u76f4\u63a5\u73b0\u91d1\u652f\u4ed8\uff0c\u4ee5\u5e2e\u52a9\u90a3\u4e9b\u6570\u636e\u88ab\u76d7\u7684\u4eba\u3002\n\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u53ef\u80fd\u57282019\u5e74\u590f\u5929\u8bfb\u5230\u4e86\u4e00\u4e9b\u8fd9\u6837\u7684\u5934\u6761\u65b0\u95fb\uff0c\u66f4\u591a\u7684\u4eba\u5728\u627f\u8bfa\u6bcf\u4e2a\u53d7\u82e6\u653f\u515a\u6700\u9ad8125\u7f8e\u5143\u540e\u4ecd\u7136\u586b\u5199\u4e86\u8868\u683c\u3002\u6709\u51e0\u4e2a\u6700\u540e\u671f\u9650\u548c\u989d\u5916\u7684\u67b7\u9501\uff0c\u4eba\u4eec\u5fc5\u987b\u8df3\u8fc7\uff0c\u4f46275\u5929\u540e\uff1a\u8fd8\u6ca1\u6709\u4eba\u62ff\u5230\u5de5\u8d44\uff0c\u4e5f\u4e0d\u6e05\u695a\u4ed6\u4eec\u662f\u5426\u4f1a\u62ff\u5230\u94b1\u3002\u81ea2017\u5e74\u7b2c\u4e09\u5b63\u5ea6\u5b9e\u9645\u53d1\u751f\u5165\u4fb5\u4ee5\u6765\uff0c\u5df2\u7ecf\u51e0\u4e4e\u662f\u8fd9\u4e00\u65f6\u95f4\u7684\u4e09\u500d(800\u591a\u5929)\u3002\n\u201c275\u5929\u540e\uff1a\u8fd8\u6ca1\u6709\u4eba\u62ff\u5230\u5de5\u8d44\uff0c\u800c\u4e14\u8fd8\u4e0d\u6e05\u695a\u4ed6\u4eec\u662f\u5426\u4f1a\u62ff\u5230\u94b1\u3002\u201d\n\u6839\u636e\u201c\u6d88\u8d39\u8005\u62a5\u544a\u201d\u548c\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u7684\u8bf4\u6cd5\uff0c\u4efb\u4f55\u73b0\u91d1\u652f\u4ed8\u6700\u7ec8\u90fd\u5f88\u53ef\u80fd\u8fdc\u8fdc\u4f4e\u4e8e125\u7f8e\u5143\u7684\u6700\u9ad8\u9650\u989d\u3002\n\u201c\u5927\u91cf\u7684\u73b0\u91d1\u7d22\u8d54\uff0c\u800c\u4e0d\u662f\u4fe1\u7528\u76d1\u63a7\uff0c\u53ea\u610f\u5473\u7740\u4e00\u4ef6\u4e8b\uff1a\u6bcf\u4e2a\u63a5\u53d7\u91d1\u94b1\u9009\u62e9\u6743\u7684\u4eba\u6700\u7ec8\u53ea\u4f1a\u5f97\u5230\u5c11\u91cf\u7684\u94b1\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e48\u591a\u7684\u7d22\u8d54\u7533\u8bf7\uff0c\u4ed6\u4eec\u672c\u53ef\u4ee5\u62ff\u5230\u7684125\u7f8e\u5143\u8fd8\u5dee\u5f97\u5f88\u8fdc\u3002\n\u5f53\u653f\u5e9c\u3001\u4f01\u4e1a\u548c\u4e2a\u4eba\u4e89\u5148\u6050\u540e\u5730\u5728\u540e\u51a0\u72b6\u75c5\u6bd2\u65f6\u4ee3\u62ef\u6551\u4ed6\u4eec\u7684\u7ecf\u6d4e\u672a\u6765\u65f6\uff0c\u4f7f\u7528\u6bcf\u4e2a\u4fe1\u7528125\u7f8e\u5143\u7684\u7f8e\u56fd\u6210\u5e74\u4eba\u53ef\u80fd\u4f1a\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u652f\u4ed8\u6bcf\u5468\u7684\u98df\u54c1\u6742\u8d27\u6216\u6c34\u7535\u8d39\u3002\u8fd9\u8ba9\u6211\u4eec\u4e0d\u7981\u8981\u95ee\uff1aEquifax\u5e94\u8be5\u4e3a\u8fd9\u4e9b\u9519\u8fc7\u7684\u4ed8\u6b3e\u652f\u4ed8\u5229\u606f\u5417\uff1f\u8fd9\u53ef\u80fd\u4f1a\u5bf9\u4ed6\u4eec\u7684\u4fe1\u7528\u8bc4\u5206\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\uff1f\nEquifax\u5728\u4ed6\u4eec\u7684\u7d22\u8d54\u8868\u4e0a\u8bbe\u5b9a\u4e86\u4efb\u610f\u7684\u622a\u6b62\u65e5\u671f\uff0c\u4f46\u4ed6\u4eec\u4ecd\u7136\u5141\u8bb8\u60a8\u57282024\u5e74\u4e4b\u524d\u5728\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u201c\u63d0\u4ea4\u5ef6\u957f\u7684\u7d22\u8d54\u201d\u3002\u90a3\u4e00\u5e74\u5e94\u8be5\u4f1a\u8ba9\u4f60\u77e5\u9053\u4f60\u53ef\u80fd\u8981\u7b49\u591a\u4e45\u624d\u80fd\u5f97\u5230\u56de\u62a5\u3002\n\u603b\u548c\u89e3\u91d1\u989d\u4e3a7\u4ebf\u7f8e\u5143\uff0c\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u5927\u7684\u6570\u636e\u6cc4\u9732\u548c\u89e3\u91d1\u989d\u3002\n\u968f\u7740\u5728\u4e2a\u4eba\u8bbe\u5907\u548c\u5de5\u4f5c\u573a\u6240\u8bbe\u5907\u4e2d\u53d1\u73b0\u66f4\u591a\u7684\u7f51\u7edc\u5b89\u5168\u95ee\u9898\uff0c\u786e\u5b9a\u4fdd\u62a4\u7684\u4f18\u5148\u987a\u5e8f\u4f3c\u4e4e\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u4f46\u6700\u7ec8\u5374\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\u8fd9\u4e9b\u95ee\u9898\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u5bfc\u81f4\u66f4\u591a\u7684\u8fdd\u89c4\u884c\u4e3a\uff0c\u4ee5\u53ca\u4e0e\u6d88\u8d39\u8005\u8fbe\u6210\u66f4\u591a\u548c\u89e3\u3002\n\u4f46\u662f\uff0c\u7f8e\u56fd\u4eba\u6c11\u4f1a\u56e0\u4e3a\u8fd9\u4e9b\u6cc4\u5bc6\u4e8b\u4ef6\u800c\u66b4\u9732\u548c\u53d7\u82e6\u800c\u5f97\u5230\u62a5\u916c\u5417\uff1f\u8fd9\u8fd8\u6709\u5f85\u89c2\u5bdf\uff0c\u800c\u4e14\u8fd8\u6ca1\u6709\u53d1\u751f\u3002\n2019\u5e74\u62a5\u544a\u7684\u6570\u636e\u6cc4\u9732\u6570\u91cf\u4ece\u4e00\u5e74\u524d\u76841257\u8d77\u4e0a\u5347\u4e8617%\uff0c\u8fbe\u52301473\u8d77\uff0c\u6211\u4eec\u731c\u6d4b2020\u5e74\u8fd8\u4f1a\u6709\u53e6\u4e00\u6b21\u589e\u957f\u3002\u6700\u8fd1\uff0c\u8fd9\u4e9b\u8fdd\u89c4\u4e8b\u4ef6\u7684\u8303\u56f4\u4f3c\u4e4e\u4e5f\u5728\u6269\u5927\uff0c\u53bb\u5e74\u6709\u8d85\u8fc740\u4ebf\u6761\u8bb0\u5f55\u7ba1\u7406\u4e0d\u5584\u3002\u88ab\u653b\u51fb\u7684\u7528\u6237\u662f\u5426\u4f1a\u56e0\u4e3a\u4ed6\u4eec\u7684\u6570\u636e\u4e22\u5931\u800c\u5f97\u5230\u8865\u507f\u8fd8\u6709\u5f85\u89c2\u5bdf\uff0c\u4f46\u6211\u4eec\u4f1a\u7ee7\u7eed\u62a5\u9053\u8fd9\u4e00\u60c5\u51b5\u3002", "note_en": "Have you felt someone owes you money? Last year, credit reporting agency Equifax was rocked by a massive  data breach affecting most (56%) Americans. The company agreed to one of the largest settlements of its kind, $700M to be disbursed, covering identity protection monitoring services and direct cash payments to help those whose data had been stolen.\n Many of you probably read some of these headlines in the summer of 2019, and many more still  filled out the forms after promises of up to  $125 per afflicted party. There were several deadlines and additional hoops people had to jump through, but  275 days later: no one has been paid yet, and it\u2019s not clear if they ever will be. It\u2019s been almost three times that time ( 800+ Days) since the breach itself actually  occured in Q3 of 2017.\n \u201c275 days later: no one has been paid yet, and it\u2019s not clear if they ever will be.\u201d\n According to Consumer Reports and the FTC, it\u2019s likely that any cash payments will end up being far less than the maximum of $125.\n \u201cA large number of claims for cash instead of credit monitoring means only one thing: each person who takes the money option will wind up only getting a small amount of money. Nowhere near the $125 they could have gotten if there hadn\u2019t been such an enormous number of claims filed.\u201d\n As governments, businesses and individuals scramble to save their economic futures in a post-Coronavirus world, $125 per credit-using American adults could go a long way towards paying for the weekly groceries or utility bills. It makes us wonder: Should Equifax pay interest on these missed payments? How might it affect their credit score?\n Equifax has placed arbitrary deadlines on their claim forms that have since elapsed, but they still allow you to \u201c file an extended claim\u201d on their website through 2024. That year should give you an idea of how long you\u2019ll likely be waiting for recompense.\n The total settlement was for $700M and was  by far the largest ever for a data breach.\n As more network  security issues are identified in personal, as well as workplace devices, prioritizing protection might seem obvious but end up being a difficult task. These issues will likely cause more breaches in the future, as well as more settlements with consumers.\n But will the American people ever be paid for their exposure and hardships that stem from these breaches? That remains to be seen, and it hasn\u2019t happened yet.\n The number of reported data breaches rose  17% to 1,473 in 2019 from 1,257 a year earlier, and we\u2019re guessing 2020 will see yet another increase. The scope of these breaches also seems to be broadening recently, with  over 4 billion records mismanaged last year. It remains to be seen if exploited users will ever be compensated for their data loss, but we\u2019ll continue to report on the situation.", "posttime": "2020-05-02 18:00:51", "tags": "\u6570\u636e,equifax,\u5f97\u5230,data", "title": "\u81ea\u4eceEquifax\u7684\u6570\u636e\u6cc4\u9732\u548c\u89e3\u4ee5\u6765\u8d85\u8fc7275\u5929\uff0c\u6ca1\u6709\u4eba\u6536\u5230\u4ed8\u6b3e", "title_en": "Over 275 days since Equifax\u2019s data breach settlement and no one has been paid", "transed": 0, "url": "https://www.interest.com/personal-finance/275-days-since-equifax-data-breach-settlement/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6570\u636e", "equifax", "\u5f97\u5230", "data"]}, {"category": "", "categoryclass": "", "imagename": "53712de269b91f598ffad22801bf8d15.png", "infoid": 1000237, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u672c\u7528Rust\u4ece\u5934\u5f00\u59cb\u7f16\u519964\u4f4dRISC-V\u4eff\u771f\u5668\u7684\u4e66\u3002\u5b83\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u572810\u4e2a\u6b65\u9aa4\u4e2d\u5b9e\u73b0\u4eff\u771f\u5668\u3002\u5728\u6700\u540e\u4e00\u6b65\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5728\u6a21\u62df\u5668\u4e2d\u8fd0\u884cxv6\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7c7bUnix\u64cd\u4f5c\u7cfb\u7edf\u3002\n\n\u4f5c\u8005\u662f@d0iasm\uff0c\u8bf7\u968f\u65f6\u901a\u8fc7Twitter\u6216GitHub\u95ee\u9898\u5411\u6211\u8be2\u95ee\u548c\u8bf7\u6c42\u4efb\u4f55\u95ee\u9898\uff01", "note_en": "This is the book for writing a 64-bit RISC-V emulator from scratch in Rust. It shows us how to implement an emulator in 10 steps. You can run    xv6  , a simple Unix-like OS, in your emulator in the final step.\n    \n  Author is    @d0iasm   and please feel free to ask and request anything to me via    Twitter   or    GitHub issues  !", "posttime": "2020-05-02 18:00:48", "tags": "\u7f16\u5199,risc,\u4eff\u771f\u5668,emulator", "title": "\u4ece\u5934\u5f00\u59cb\u7f16\u5199RISC-V\u4eff\u771f\u5668", "title_en": "Writing a RISC-V Emulator from Scratch", "transed": 0, "url": "https://book.rvemu.app/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u5199", "risc", "\u4eff\u771f\u5668", "emulator"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000236, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u521a\u521a\u82b1\u4e86\u5927\u7ea6\u4e09\u4e2a\u661f\u671f\u7684\u65f6\u95f4\uff0c\u4ee5\u4e2a\u4eba\u521b\u59cb\u4eba\u7684\u8eab\u4efd\u542f\u52a8\u4e86\u4e00\u6b3eSaaS\u3002\u5173\u4e8e\u80cc\u666f\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u9605\u8bfb\u6211\u5bf9\u5b83\u7684\u63cf\u8ff0\uff0c\u6211\u5df2\u7ecf\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc\u8ba8\u8bba\u4e86\u5b83\u80cc\u540e\u7684\u7075\u611f\u548c\u52a8\u673a\u3002\n\u57fa\u672c\u6982\u5ff5\u662f\u575a\u5b9e\u7684\uff1a\u4e3a\u5546\u4e1a\u667a\u80fd\u987e\u95ee\u63d0\u4f9b\u4e00\u79cd\u6781\u5176\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u9879\u76ee\u6570\u636e\u3002\n\u5267\u900f\u63d0\u9192\uff1a\u5c3d\u7ba1\u6211\u505a\u4e86\u5f88\u591a\u6b63\u786e\u7684\u4e8b\u60c5\uff0c\u4f46\u5b83\u5931\u8d25\u5f97\u5f88\u60e8\uff1a\n\u6211\u60f3\u51fa\u4e86\u4e00\u4e2a\u60f3\u6cd5\u4f5c\u4e3a\u95ee\u9898\u7684\u5047\u8bbe\u6027\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u4e0d\u662f\u53cd\u8fc7\u6765(\u4f60\u53ef\u4ee5\u9605\u8bfb\u6211\u5173\u4e8e\u63d0\u51faSaaS\u60f3\u6cd5\u7684\u5e16\u5b50\uff0c\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981)\u3002\n\u6211\u5728\u6784\u5efa\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u65f6\u8003\u8651\u5230\u4e86\u4e00\u4e2a\u7279\u5b9a\u7684\u6700\u7ec8\u7528\u6237\uff0c\u8fd9\u662f\u4fdd\u7f57\u00b7\u683c\u96f7\u5384\u59c6(Paul Graham)\u7684\u4f20\u5947\u6587\u7ae0\u201c\u505a\u4e0d\u5230\u89c4\u6a21\u7684\u4e8b\u60c5\u201d(Do Things That No Scale)\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u662f\u4e3a\u6211\u7684\u7236\u4eb2\u6784\u5efa\u7684\uff0c\u4ed6\u81ea\u5df1\u5c31\u662fUX\u65b9\u9762\u7684BI\u987e\u95ee\uff0c\u5b9e\u9645\u4e0a\u5e2e\u52a9\u6211\u8bbe\u8ba1\u548c\u5f00\u53d1\u4e86\u8fd9\u4e2a\u5de5\u5177\u3002\n\u6211\u5728\u77ed\u77ed\u4e03\u5929\u5185\u5efa\u7acb\u4e86\u4e00\u4e2a\u5feb\u901f\u800c\u7cbe\u5e72\u7684\u539f\u578b(\u4ec5\u9650\u524d\u7aef)\uff0c\u4ece\u800c\u7ed9\u4e86\u6211\u81ea\u5df1\u60c5\u611f\u7a7a\u95f4\uff0c\u8ba9\u81ea\u5df1\u5ba2\u89c2\u5730\u5206\u6790\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u800c\u4e0d\u662f\u8fc7\u4e8e\u6267\u7740\u4e8e\u5b83\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd9\u662f\u4e00\u9879\u7e41\u91cd\u7684\u5de5\u4f5c-\u6bcf\u5468\u5de5\u4f5c90\u4e2a\u5c0f\u65f6\uff0c\u751f\u6210\u7684\u8f6f\u4ef6\u5927\u7ea6\u67093000\u884c\u4ee3\u7801(\u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u64cd\u4f5c)\u3002\n\u5728\u5efa\u7acb\u4e86POC\u4e4b\u540e\uff0c\u6211\u5728LinkedIn\u4e0a\u4e0e\u5927\u7ea630\u540dBI\u5de5\u7a0b\u5e08\u548c\u987e\u95ee\u8054\u7cfb\uff0c\u4e0e\u6211\u76ee\u6807\u5e02\u573a\u4e2d\u7684\u4eba\u8fdb\u884c\u4e86\u63a5\u89e6\u3002\u6211\u80fd\u591f\u5c31\u6b64\u8fdb\u884c\u591a\u6b21\u5bf9\u8bdd\uff0c\u4ee5\u6f84\u6e05\u6211\u7684\u4fe1\u606f\uff0c\u5e76\u66f4\u597d\u5730\u7406\u89e3\u5e02\u573a\u7684\u9700\u6c42\u3002\n\u6211\u751a\u81f3\u60f3\u51fa\u4e86\u4e00\u4e2a\u4ee4\u4eba\u6076\u5fc3\u7684\u540d\u5b57\u548c\u57df\u540d\uff1a\u81ea\u884c\u8f66(BI\u4ee3\u8868\u5546\u4e1a\u667a\u80fd\uff0c\u800c\u201c\u81ea\u884c\u8f66\u201d\u6307\u7684\u662f\u53f2\u8482\u592b\u00b7\u4e54\u5e03\u65af(Steve Jobs)\u6240\u8bf4\u7684\u8ba1\u7b97\u673a\u5e94\u8be5\u662f\u5934\u8111\u7684\u81ea\u884c\u8f66)\u3002\n\u5728\u8fd9\u4e2a\u9879\u76ee\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u975e\u5e38\u5174\u594b\uff0c\u6211\u771f\u7684\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u628a\u5b83\u5efa\u8d77\u6765\uff0c\u5e7b\u60f3\u5b83\u5c06\u5982\u4f55\u6539\u53d8\u6211\u7684\u751f\u6d3b\u3002\n\u4f46\u6211\u505a\u9519\u4e86\u4e00\u4ef6\u4e8b\uff0c\u5b83\u4ece\u4e00\u5f00\u59cb\u5c31\u6ce8\u5b9a\u4e86\u6211\u7684\u9879\u76ee\u5931\u8d25\uff0c\u5c3d\u7ba1\u6709\u90a3\u4e9b\u5409\u7965\u800c\u8c26\u900a\u7684\u5f00\u59cb\uff1a\n\u6211\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u7684\u786e\u5207\u65f6\u523b\u662f\u5728\u6211\u89c2\u770bJason Cohen\u5173\u4e8e\u5f15\u5bfc\u4e00\u4e2a\u6210\u529f\u7684SaaS\u7684\u516c\u5f0f\u7684\u6f14\u8bb2\u65f6\u3002Jason\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u4eba\uff0c\u4ed6\u7684\u58f0\u97f3\u5f88\u68d2\uff0c\u4f46\u8fd9\u4e24\u4ef6\u4e8b\u90fd\u4e0d\u80fd\u963b\u6b62\u4ed6\u5728\u90a3\u6b21\u6f14\u8bb2\u4e2d\u63d0\u51fa\u7684\u89c2\u70b9\uff0c\u8ba9\u6211\u610f\u8bc6\u5230\u6211\u5fc5\u987b\u629b\u5f03\u6211\u7684SaaS\u3002\n\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u4e00\u5934\u624e\u8fdb\u53bb\u5427\u3002\u6211\u771f\u7684\u5e0c\u671b\u8fd9\u6b21\u7ecf\u5386\u548c\u5e16\u5b50\u80fd\u8ba9\u4f60\u4e0d\u518d\u72af\u548c\u6211\u4e00\u6837\u7684\u9519\u8bef\u3002\u627c\u6740\u4e00\u4e2a\u9879\u76ee\u5e76\u4e0d\u597d\u73a9\u3002\n\u65e2\u7136\u6211\u521a\u521a\u82b1\u4e86\u5927\u91cf\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u53bb\u6784\u5efa\u4e00\u4e9b\u975e\u5e38\u68d2\u7684\u8f6f\u4ef6\uff0c\u4e3a\u4ec0\u4e48\u6211\u51b3\u5b9a\u653e\u5f03\u5b83\u5462\uff1f\n\u6211\u6700\u521d\u7684\u8ba1\u5212\u662f\u5411\u6bcf\u4e2a\u5ba2\u6237\u6536\u53d6\u5927\u7ea620\u7f8e\u5143/\u6708\u7684\u8d39\u7528\uff0c\u800c\u6211\u7684\u7406\u60f3\u5ba2\u6237\u662f\u4efb\u4f55\u53c2\u4e0eBI\u9879\u76ee\u7684\u4eba(\u55ef\uff0c\u5b83\u6bd4\u8fd9\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u4f46\u4f60\u53ef\u4ee5\u67e5\u770b\u6211\u5bf9\u81ea\u884c\u8f66\u7684\u63cf\u8ff0\u6765\u4e86\u89e3\u66f4\u591a\u4fe1\u606f)\u3002\u5728\u6211\u7684\u7406\u60f3\u4e16\u754c\u91cc\uff0c\u4ed6\u4eec\u4f1a\u638f\u51fa\u94b1\u5305\uff0c\u5f53\u573a\u638f\u51fa\u73b0\u91d1\u3002\u7136\u540e\u4ed6\u4eec\u5c31\u4f1a\u628a\u6bcf\u6708\u7684\u8d26\u5355\u82b1\u5728\u4ed6\u4eec\u7684\u516c\u53f8\u548c\u9884\u4ed8\u6b3e\u7684\u5ba2\u6237\u8eab\u4e0a\uff01\n\u8fd9\u5bf9\u6211\u6765\u8bf4\u4f3c\u4e4e\u5f88\u597d\uff0c\u5728\u6211\u7684\u8111\u6d77\u4e2d\u201c\u8db3\u591f\u597d\u201d\uff0c\u8db3\u4ee5\u8bc1\u660e\u6211\u4e0d\u9700\u8981\u6df1\u5165\u7814\u7a76\u5c31\u53ef\u4ee5\u82b1\u6389\u8fd9\u4e48\u591a\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u3002\n\u4f46\u662f\uff0c\u6770\u68ee\u7684\u89c6\u9891\u9707\u64bc\u4e86\u6211\u7684\u4e16\u754c\uff1a\u4ed6\u8bf4\uff0c\u4f60\u9700\u8981\u5411\u6bcf\u4e2a\u7528\u6237\u6536\u53d6\u81f3\u5c1150\u7f8e\u5143\uff0c\u63a5\u8fd1100\u7f8e\u5143\u7684\u6708\u8d39\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u81ea\u529b\u66f4\u751f\u7684\u4e2a\u4ebaSaaS\u521b\u59cb\u4eba\u3002\n\u6211\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4f60\u5c11\u6536\u8d39\uff0c\u4f60\u53ef\u80fd\u4f1a\u8e52\u8dda\u524d\u884c\uff0c\u6df9\u6ca1\u5728\u652f\u6301\u8bf7\u6c42\u4e2d\uff0c\u6bcf\u5468\u5de5\u4f5c90\u5c0f\u65f6\uff0c\u4f46\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u771f\u6b63\u8fbe\u5230\u9003\u9038\u901f\u5ea6\uff0c\u8fd9\u5e76\u4e0d\u662f\u6211\u771f\u6b63\u60f3\u8981\u7684\u3002\u6211\u8ffd\u6c42\u7684\u662f\u81ea\u7531\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4e0e\u4f17\u4e0d\u540c\u3001\u8981\u6c42\u66f4\u9ad8\u7684\u8001\u677f\u3002\n\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8be6\u8ff0\u6240\u6709\u7684\u6570\u5b66\uff0c\u56e0\u4e3a\u4ed6\u5728\u6f14\u8bb2\u4e2d\u5df2\u7ecf\u505a\u5f97\u5f88\u597d\u4e86\uff0c\u4f46\u4e0d\u7528\u8bf4\uff0c\u6211\u88ab\u8bf4\u670d\u4e86\u3002\n\u95ee\u9898\u662f\uff0c\u4f60\u4e0d\u4f1a\u627e\u5230\u5f88\u591a\u70ed\u8877\u4e8e\u82b1\u8d39\u6bcf\u670875\u7f8e\u5143\u8d26\u5355\u7684BI\u5f00\u53d1\u4eba\u5458\u3002\u5927\u591a\u6570\u5458\u5de5\u6ca1\u6709\u8db3\u591f\u7684\u6d88\u8d39\u5e26\u5bbd\u6765\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\n\u6211\u5f88\u5feb\u610f\u8bc6\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u51b3\u5b9a\u8bd5\u4e00\u8bd5\uff1a\u4e5f\u8bb8\u6211\u53ef\u4ee5\u76f4\u63a5\u5c06\u8f6f\u4ef6\u9500\u552e\u7ed9\u505aBI\u54a8\u8be2\u7684\u4f01\u4e1a\uff0c\u8ba9\u4ed6\u4eec\u4e3a\u4ed6\u4eec\u7684\u5458\u5de5\u63d0\u4f9b\u8f6f\u4ef6\uff1f\n\u4f46\u662f\u518d\u6df1\u6316\u4e00\u4e0b\uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u770b\u8d77\u6765\u771f\u7684\u5f88\u50cf\u4f01\u4e1a\u9500\u552e(\u56e0\u4e3a\u5462\u662f\u4f01\u4e1a\u9500\u552e)\uff0c\u8fd9\u5bf9\u521d\u521b\u6216\u8005\u81ea\u7b79\u8d44\u91d1\u7684\u4e2a\u4eba\u521b\u4e1a\u8005\u6765\u8bf4\u662f\u4e2a\u7981\u5fcc\u3002\u5b8c\u6210\u9500\u552e\u82b1\u8d39\u7684\u65f6\u95f4\u592a\u957f-\u4f01\u4e1a\u9500\u552e\u5468\u671f\u901a\u5e38\u4e3a12\u523018\u4e2a\u6708\u3002\n\u5982\u679c\u6211\u8d70\u8fd9\u6761\u8def\uff0c\u6211\u51e0\u4e4e\u4e0d\u53ef\u80fd\u5728\u6ca1\u6709\u8dd1\u9053\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u90a3\u4e48\u957f\u7684\u53cd\u9988\u5faa\u73af\u6765\u8db3\u591f\u5feb\u5730\u8fed\u4ee3\u6211\u7684\u4ea7\u54c1\u3002\u6211\u81f3\u5c11\u8981\u7b49\u4e00\u5e74\u624d\u80fd\u5356\u51fa\u7b2c\u4e00\u6279\u8d27--\u524d\u63d0\u662f\u6211\u7b2c\u4e00\u6b21\u5c31\u505a\u5bf9\u4e86\u3002\u8003\u8651\u5230\u6211\u7684\u4f01\u4e1a\u9500\u552e\u80cc\u666f(\u6216\u8005\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u6211\u7f3a\u4e4f\u8fd9\u65b9\u9762\u7684\u80cc\u666f)\uff0c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u53ef\u80fd\u6027\u5927\u81f4\u76f8\u5f53\u4e8e\u4e00\u53ea\u7334\u5b50\u5750\u5728\u6253\u5b57\u673a\u524d\u6572\u6253\u838e\u58eb\u6bd4\u4e9a\u7684\u201c\u54c8\u59c6\u96f7\u7279\u201d\u2026\u2026\u3002\n\u800c\u4e14\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u7684\u5e02\u573a\u4e2d\u7684\u5176\u4ed6\u5de5\u5177\u6536\u8d39\u4f4e\u5f97\u79bb\u8c31\uff0c\u4ece3\u7f8e\u5143/\u7528\u6237/\u6708\u523010\u7f8e\u5143/\u7528\u6237/\u6708\u4e0d\u7b49\uff0c\u8fd9\u4e9b\u5176\u4ed6\u5de5\u5177\u901a\u5e38\u662f\u73b0\u6709\u4f01\u4e1a\u7684\u9644\u52a0\u5de5\u5177\uff0c\u56e0\u6b64", "note_en": "I just spent about three weeks bootstrapping a SaaS as a solo founder. For context, you can read my description of it  here, and I\u2019ve talked about the inspiration behind it and motivations  here and  here.\n The basic concept was solid: provide an insanely simple way for business intelligence consultants to manage project data.\n Spoiler alert: it failed miserably, despite the fact that I did a lot of things right:\n I came up with an idea as a hypothetical solution to a problem, instead of the other way around (you can read my post on  coming up with SaaS ideas to understand why this is important)\n I built this solution with a specific end user in mind, a la Paul Graham\u2019s legendary essay  Do Things That Don\u2019t Scale. Specifically, I built it for my dad, who is himself a BI consultant on the UX side of things and actually helped me design and develop the tool\n I built a quick and lean prototype (front end only) in just seven days, thereby giving myself emotional space to analyze the idea objectively without getting too attached to it. This was a TON of work, by the way \u2014 it was a 90 hour week, and the resulting software was around 3,000 lines of code (you can play with it  here).\n After building the POC, I approached people in my target market about it by messaging around thirty BI engineers and consultants on LinkedIn. I was able to have a number of conversations about it to clarify my messaging and understand the market\u2019s need better.\n I even came up with a sick-awesome name and domain: Bicycle (B I for Business Intelligence, and \u201cbicycle\u201d referencing Steve Jobs\u2019 quote that a computer should be a bicycle for the mind).\n I was so excited at the start of this project, and I really had a GREAT time building it out and fantasizing about how it would change my life.\n But I got one thing wrong, and it doomed my project from the very beginning, despite those auspicious yet humble beginnings:\n  The exact moment I realized this was while I watched  Jason Cohen\u2019s talk on the formula for bootstrapping a successful SaaS. Jason\u2019s a funny guy and he has a great speaking voice, but neither of those things prevented the point he made in that talk from making me realize I had to ditch my SaaS.\n So, let\u2019s dive in. I really hope this experience and post will prevent you from making the same mistake that I did. Killing a project is  not fun.\n   Given that I had just put a bunch of time and effort into building some totally awesome software, why did I decide to quit working on it, cold turkey?\n  My initial plan was to charge around $20/mo per customer, where my ideal customer is anybody involved in a BI project (well, it was a little more sophisticated than that, but you can check out  my description of Bicycle to learn more). In my ideal world, they\u2019d whip out their wallet and fork over the cash on the spot. Then they\u2019d expense the monthly bill to their company and  presto \u2014 paying client!\n This seemed fine for me and was \u201cgood enough\u201d in my mind to justify spending the time and effort that I did without digging in further.\n But then Jason\u2019s video rocked my world: he said  you needed to be charging at  least $50, closer to $100, per month, per user, in order to make it as a bootstrapped solo SaaS founder.\n I mean, if you charge less you might be able to hobble along, drowning in support requests and working 90 hrs/wk, but you\u2019ll never really hit escape velocity, and that\u2019s not really what I\u2019m after. I\u2019m after  freedom, not just a different and more demanding boss.\n I won\u2019t go into all the math here, as he\u2019s done that brilliantly already in his talk, but needless to say, I was convinced.\n Problem is,  you won\u2019t find many BI developers who are keen on trying to expense a monthly $75 bill. Most employees don\u2019t have the kind of expense bandwidth to do something like that.\n  I realized this pretty quickly, and decided to try a pivot: maybe I could sell the software directly to businesses who do BI consulting, and let them provide it for their employees?\n But after a bit more digging, it became apparent that this really looks a lot like enterprise sales (because it, uh, IS enterprise sales), which is a no-no for first-time or self-funded solo entrepreneurs. Takes way too long to close a sale \u2014 enterprise sales cycles often run twelve to eighteen months.\n If I went that route, there\u2019s virtually no way I\u2019d be able to iterate quickly enough on my product with a feedback loop that long and no runway. I\u2019d have to wait at least a year before my first sale,  minimum \u2014 and that\u2019s assuming I got everything right the first time around. And given my background in enterprise sales (or more specifically, my lack thereof), the odds of that happening are roughly equivalent to a monkey sitting down at a typewriter and bashing out Shakespeare\u2019s  Hamlet  ...\n Also, it turns out that the other tools in my market charge absurdly low amounts of money, anywhere from $3/user/mo to $10/user/mo, and those other tools are often addons to existing enterprise software which goes for a lot more.\n Economies of scale are much friendlier with those larger companies, because they can afford to spend a lot on marketing and even take a loss on the product if it increases their main offering\u2019s value-add.\n  Plus, my goal is to hit $2k MRR in the next two months, so if I persisted in the enterprise sales route, I\u2019d have to totally throw that goal out.\n So, after having eliminated BI firm employees, and the BI firms themselves, the only remaining target market was independent business intelligence consultants, who are both rare and also don\u2019t have a need for this tool (much of this is confirmed by my market research).\n    I didn\u2019t think through my pricing model thoroughly before beginning, nor did I know what my target numbers should be. My pricing model was as follows: find \u201ca bunch\u201d of users for $10 or $20/mo. Ish. And hope it just worked out.\n At that rate, I\u2019d need to get between 500 and 1,000 users in order to reach an MRR that would let me go full-time. With that many users, as a solo bootstrapper, I\u2019d be spending  all of my time on support, instead of marketing, product development, and learning to play Bach\u2019s  Well-Tempered Clavier on the Yamaha P-515 I just ordered.\n I know now that I probably need around 150 users paying an average of $70/mo to land ~$10k/mo in revenue, without drowning in support requests.\n   So, while you\u2019re vetting your next startup idea,  include pricing as a critical success metric from the very beginning. You can have a great idea, even a valid problem and solution, but if the pricing doesn\u2019t work, it\u2019s worthless.\n  By the way, if this was interesting or valuable to you, you can  follow my journey on Twitter. My goal is to hit $2k MRR in the next two months, before my first child is born in July.", "posttime": "2020-05-02 18:00:45", "tags": "\u9a8c\u8bc1,saas,bi", "title": "SaaS\u4e8b\u540e\u5931\u8d25\uff1a\u9a8c\u8bc1\u60a8\u7684\u5b9a\u4ef7\u6a21\u578b\uff0c\u5c31\u50cf\u6211\u6ca1\u6709\u9a8c\u8bc1\u60a8\u7684\u5b9a\u4ef7\u6a21\u578b\u4e00\u6837", "title_en": "Failed SaaS post-mortem: validate your pricing model like I didn't", "transed": 0, "url": "https://elliotbonneville.com/blog/validate-your-pricing-model-like-i-didnt/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u9a8c\u8bc1", "saas", "bi"]}]