[{"category": "", "categoryclass": "", "imagename": "f13627f58c076365f750f781912434f8.png", "infoid": 1006585, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e00\u6b21\uff0c\u4f20\u8a00\u770b\u8d77\u6765\u5373\u5c06\u53d8\u6210\u73b0\u5b9e\uff1aMac\u6b63\u5728\u8f6c\u5411\u82f9\u679c\u8bbe\u8ba1\u7684\u57fa\u4e8eARM\u7684\u82af\u7247\u3002\u4eca\u5929\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u8fd9\u79cd\u8fc7\u6e21\u7684\u98ce\u9669\u3001\u6311\u6218\u548c\u597d\u5904\u3002\n2021\u5e74\uff0c\u82f9\u679c\u5c06\u63a8\u51fa\u57fa\u4e8e\u81ea\u4e3b\u7814\u53d1\u7684ARM\u67b6\u6784\u5904\u7406\u5668\u7684\u65b0\u4e00\u4ee3Mac\u3002\u5f6d\u535a\u793e(Bloomberg)\u7684\u4e00\u7bc7\u6587\u7ae0\u662f\u8fd9\u4e48\u8bf4\u7684\uff1b\u5b83\u8865\u5145\u8bf4\uff0c\u82f9\u679c\u5c06\u57286\u670822\u65e5\u5f00\u59cb\u7684\u5168\u5728\u7ebfWWDC(\u5168\u7403\u5f00\u53d1\u8005\u5927\u4f1a)\u4e0a\u5ba3\u5e03\u7ec6\u8282\u3002\u8003\u8651\u5230\u5f6d\u535a\u793e\u5728\u62a5\u9053\u82f9\u679c\u65f6\u4ee4\u4eba\u9057\u61be\u4f46\u4ece\u672a\u540e\u6094\u7684\u4e0d\u5f53\u884c\u4e3a\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e00\u9884\u6d4b\u6301\u8c28\u614e\u6001\u5ea6\u3002\u7136\u800c\uff0c\u8fd9\u4e00\u6b21\uff0c\u8fd9\u4e2a\u6545\u4e8b\u4f3c\u4e4e\u662f\u771f\u7684\u3002\n\u4ece\u516c\u5173\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5411ARM\u7684\u8fc7\u6e21\u770b\u8d77\u6765\u50cf\u662f\u4e00\u6b21\u5fae\u5999\u7684\u5e73\u8861\u7ec3\u4e60\u3002\u5982\u679c\u82f9\u679c\u5728\u7b2c\u4e00\u6279\u57fa\u4e8eARM\u7684\u673a\u5668\u8ba1\u5212\u63a8\u51fa\u524d\u516d\u4e2a\u6708\u5ba3\u5e03\u8fd9\u4e00\u4e3e\u63aa\uff0c\u8fd9\u5c06\u5982\u4f55\u5f71\u54cd\u76ee\u524dMac\u7684\u9500\u552e\uff1f\n\u8fd9\u4e2a\u95ee\u9898\u5524\u8d77\u4e86\u4eba\u4eec\u5bf9\u4e9a\u5f53\u00b7\u5965\u65af\u672c(Adam Osborne)\u7684\u8bb0\u5fc6\uff0c\u4ed6\u662f\u7b2c\u4e00\u53f0\u6210\u529f\u7684\u4fbf\u643a\u5f0fCP/M\u8ba1\u7b97\u673a--\u5965\u65af\u672c1\u7684\u521b\u9020\u8005\u30021983\u5e74\uff0c\u8fd9\u4f4d\u535a\u5b66\u7684\u4f01\u4e1a\u5bb6\u6210\u529f\u5730\u627c\u6740\u4e86\u4ed6\u7684\u53d1\u660e\u7684\u9500\u552e\uff0c\u56e0\u4e3a\u4ed6\u627f\u8bfa\uff0c\u5b83\u7684\u7ee7\u4efb\u8005--\u5965\u65af\u672c\u9ad8\u7ba1\u548c\u5965\u65af\u672c\u00b7\u7ef4\u514b\u68ee--\u4f1a\u505a\u5f97\u66f4\u597d\uff0c\u5c31\u7b49\u7740\u77a7\u5427\uff01\u63a8\u9500\u662f\u5982\u6b64\u6709\u8bf4\u670d\u529b\uff0c\u4ee5\u81f3\u4e8e\u987e\u5ba2\u786e\u5b9e\u5728\u7b49\u5f85\u3002\u9500\u552e\u989d\u66b4\u8dcc\uff0c\u5965\u65af\u672c\u7684\u751f\u610f\u4e5f\u662f\u5982\u6b64\u3002\n\u8fd9\u5c31\u662f\u4f17\u6240\u5468\u77e5\u7684\u5965\u65af\u672c\u6548\u5e94\u3002\u591a\u5e74\u6765\uff0c\u5b83\u5f71\u54cd\u4e86\u8bb8\u591a\u79d1\u6280\u516c\u53f8\uff0c\u5176\u4e2d\u6700\u81ed\u540d\u662d\u8457\u7684\u662f\u8bfa\u57fa\u4e9a(Nokia)\u5411Windows Phone\u7684\u5931\u8d25\u8fc7\u6e21\u3002\n\u5728WWDC\u4e0a\uff0c\u6211\u4eec\u5c06\u770b\u5230\u82f9\u679c\u9ad8\u7ba1\u5982\u4f55\u5229\u7528\u4ef7\u683c\u3001\u6027\u80fd\u548c\u4ea7\u54c1\u529f\u80fd\u6765\u7ef4\u6301Mac\u4e1a\u52a1\u7684\u5e73\u8861\uff0c\u4f46\u6211\u4eec\u4e0d\u8981\u5fd8\u8bb0\uff0c\u82f9\u679c\u4e4b\u524d\u4e5f\u66fe\u5c31\u7c7b\u4f3c\u7684\u56f0\u5883\u8fdb\u884c\u8fc7\u8c08\u5224\u3002\u5728\u82f9\u679c2005\u5e746\u6708\u7684WWDC\u4e0a\uff0c\u53f2\u8482\u592b\u00b7\u4e54\u5e03\u65af\u5ba3\u5e03Mac\u5c06\u4ecePowerPC\u5904\u7406\u5668\u8f6c\u5411Intelx86CPU\u82af\u7247\u3002\u65b0\u7684\u82f1\u7279\u5c14Mac\u8981\u52302006\u5e74\u521d\u624d\u80fd\u4e0a\u5e02\u3002\n\u5728\u8fc7\u6e21\u671f\u95f4\uff0cMac\u4e1a\u52a1\u8868\u73b0\u5982\u4f55\uff1f\u4e3a\u4e86\u627e\u51fa\u7b54\u6848\uff0c\u6211\u67e5\u9605\u4e86\u82f9\u679c\u516c\u53f82005\u8d22\u5e74\u548c2006\u8d22\u5e74\u7684\u5b63\u5ea6\u7f8e\u56fd\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a(SEC)\u6587\u4ef6\u3002\u603b\u800c\u8a00\u4e4b\uff0cMac\u7684\u9500\u552e\u975e\u5e38\u6709\u5f39\u6027\u3002\u6ca1\u6709\u5d29\u6e83\uff0c\u6ca1\u6709\u7b49\u5f85\u57fa\u4e8e\u82f1\u7279\u5c14\u7684\u673a\u5668\u3002\u6700\u75b2\u8f6f\u7684\u589e\u957f\u662f\u5728\u622a\u81f32006\u5e743\u6708\u7684\u5b63\u5ea6\uff0cMac\u6536\u5165\u4ec5\u589e\u957f\u4e865%\uff0c\u4f46\u5728\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u5b63\u5ea6\u51fa\u73b0\u53cd\u5f39\uff1a\u5206\u522b\u589e\u957f\u4e8619%\u548c37%\u3002\u6210\u529f\uff01\u8fd9\u5e94\u8be5\u4f1a\u8ba9\u6240\u6709\u4eba\u611f\u5230\u5b89\u6170\uff0c\u56e0\u4e3a\u82f9\u679c\u53ef\u80fd\u4f1a\u7ba1\u74062020-2021\u5e74\u7684\u5904\u7406\u5668\u8fc7\u6e21\uff0c\u800c\u4e0d\u4f1a\u5bf9\u5176\u6536\u5165\u9020\u6210\u91cd\u5927\u6253\u51fb\u3002\n(\u987a\u4fbf\u63d0\u4e00\u53e5\uff1a2006\u5e74\uff0ciPod\u9500\u91cf\u589e\u957f\u4e8675%\uff0c77\u4ebf\u7f8e\u5143\u7684\u6536\u5165\u8d85\u8fc7\u4e8674\u4ebf\u7f8e\u5143\u7684Mac\u6536\u5165\u3002\u82f9\u679c\u5f53\u65f6\u662fiPod\u516c\u53f8\uff0c\u51c6\u5907\u6210\u4e3a\u73b0\u5728\u4e00\u4e9b\u4eba\u6240\u8bf4\u7684iPhone\u516c\u53f8\u3002)\n\u82f9\u679c2020\u4e5f\u66f4\u52a0\u7a33\u5065\u548c\u591a\u6837\u5316\u30022019\u5e74\u7684\u6536\u5165\u4e3a2600\u4ebf\u7f8e\u5143\uff0c\u800c2006\u5e74\u4e3a190\u4ebf\u7f8e\u5143\u3002\u4eca\u5929\uff0cMac\u7684\u6536\u5165\u53ea\u5360\u603b\u9500\u552e\u989d\u768410%\uff1b\u800c\u57282006\u5e74\uff0c\u8fd9\u4e00\u6bd4\u4f8b\u4e3a38%\u3002Mac\u5728\u82f9\u679c\u603b\u6536\u5165\u4e2d\u6240\u5360\u4efd\u989d\u4e0d\u5927\uff0c\u8fd9\u4f7f\u5f97\u6700\u8fd1\u7684\u80a1\u5e02\u9189\u9152\u5f88\u96be\u89e3\u91ca\u3002\u53d7\u660e\u5e74\u65b0ARM Mac\u7684\u4f20\u95fb\u5f71\u54cd\uff0c\u82f9\u679c\u80a1\u4ef7\u5728\u4e0a\u5468\u524d\u4e09\u5929\u6500\u5347\u903e5%\uff0c\u4f30\u503c\u8fbe\u52301.5T\u7f8e\u5143\u4ee5\u4e0a\u7684\u5386\u53f2\u9ad8\u4f4d\u3002\u8fd9\u6ca1\u6709\u610f\u4e49\u3002(\u66f4\u65b0\u7248\uff1a\u5e02\u573a\u8fc5\u901f\u6e05\u9192\uff0c\u5468\u56db\u8dcc\u903e6%\uff0c\u5468\u4e94\u7565\u6709\u53cd\u5f39)\u3002\n\u6487\u5f00\u516c\u5173\u590d\u6742\u6027\u548c\u8fc7\u5ea6\u7684\u5e02\u573a\u70ed\u60c5\u4e0d\u8c08\uff0c\u6211\u4eec\u53ef\u4ee5\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b2021\u5e74Mac\u6539\u7528\u82f9\u679c\u8bbe\u8ba1\u7684ARM\u5904\u7406\u5668\u7684\u4e00\u4e9b\u540e\u679c\u3002\n\u7b2c\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u53d8\u5316\u5c06\u6765\u81ea\u4e0eARM\u884d\u751f\u7269\u76f8\u5173\u7684\u8f83\u4f4e\u529f\u8017\u3002\u51e0\u5e74\u6765\uff0c\u57fa\u51c6\u6d4b\u8bd5\u4e00\u76f4\u6307\u5411\u63d0\u4f9b\u201c\u53f0\u5f0f\u673a\u7ea7\u522b\u201d\u8ba1\u7b97\u80fd\u529b\u7684iPhone\u5904\u7406\u5668\u3002\u7136\u800c\uff0ciPhone\u7ed9\u4eba\u7684\u611f\u89c9\u5e76\u4e0d\u50cfMacBookPro\u90a3\u4e48\u6e29\u6696\u3002\u9664\u4e86\u5728\u6211\u4eec\u7684\u5927\u817f\u4e0a\u66f4\u8212\u9002\u4e4b\u5916\uff0c\u66f4\u4f4e\u7684\u529f\u8017\u5c06\u610f\u5473\u7740\u66f4\u5c0f\u7684\u7535\u6c60\uff0c\u66f4\u957f\u7684\u7535\u6c60\u5bff\u547d\uff0c\u4ee5\u53ca\u76f8\u540c\u5c4f\u5e55\u5c3a\u5bf8\u7684\u66f4\u8f7b\u66f4\u8584\u7684MacBook\u3002\n\u5728\u53f0\u5f0f\u673a\u4e0a\uff0c\u66f4\u4f4e\u7684\u529f\u8017\u548c\u66f4\u8584\u7684\u673a\u8eab\u6ca1\u6709\u4efb\u4f55\u597d\u5904\u3002\u8fd9\u8ba9\u4eba\u731c\u6d4b\uff0cARM\u8fc7\u6e21\u5c06\u4f18\u5148\u8003\u8651\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u800ciMac\u5c06\u7ee7\u7eed\u8fd0\u884c\u5728\u57fa\u4e8e\u82f1\u7279\u5c14\u7684\u786c\u4ef6\u4e0a\u3002\n\u770b\u770bMacOS\u548c\u82f9\u679c\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u5b8c\u5168\u6709\u7406\u7531\u76f8\u4fe1\uff0c\u8fc7\u6e21\u5c06\u50cf2005-2006\u5e74\u4e00\u6837\u4f18\u96c5\u548c\u5e73\u7a33\u3002\u5728\u4e0b\u5468\u7684WWDC\u4e0a\uff0c\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u770b\u5230\u4e00\u4e9b\u5728ARM\u539f\u578b\u4e0a\u8fd0\u884c\u7684\u82f9\u679c\u8f6f\u4ef6\u7684\u6f14\u793a\u3002\n\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\u5219\u662f\u53e6\u4e00\u56de\u4e8b\u3002\u5bf9\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u8fc7\u6e21\u4ece\u6765\u90fd\u4e0d\u4f1a\u5b8c\u5168\u987a\u5229\uff0c\u4ed6\u4eec\u5fc5\u987b\u4e89\u5148\u6050\u540e\u5730\u5bfb\u627e\u5de5\u7a0b\u8d44\u6e90-\u4ee5\u53ca\u8d44\u91d1-\u5c06\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u79fb\u690d\u5230\u65b0\u7684\u5e73\u53f0\u4e0a\u3002\u4e3a\u4e86\u9632\u6b62\u4e0d\u53ef\u907f\u514d\u7684\u62b1\u6028\uff0c\u6211\u4eec\u9884\u8ba1\u82f9\u679c\u5c06\u63d0\u4f9b\u5927\u91cf\u7684\u8f6f\u4ef6\u5de5\u5177\uff0c\u5e76\u4e3a\u5176\u6700\u91cd\u8981\u7684\u7b2c\u4e09\u65b9\u5f00\u53d1\u8005\u63d0\u4f9b\u786c\u4ef6\u6d4b\u8bd5\u53f0-\u5c31\u50cf\u8be5\u516c\u53f8\u57282005\u5e74\u6240\u505a\u7684\u90a3\u6837\u3002\u5728\u4e0b\u5468\u7684WWDC\u4f1a\u8bae\u4e0a\uff0c\u6211\u4eec\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u7684\u5e7f\u64ad\u65f6\u95f4\u4e13\u95e8\u7528\u4e8eARM\u4eff\u771f\u8f6f\u4ef6\u548c\u8fc7\u6e21\u5de5\u5177\u7684\u6f14\u793a\uff0c\u4ee5\u53ca\u6700\u4f73\u5b9e\u8df5\u7684\u89e3\u91ca\u3002\n\u6700\u540e\uff0c\u5c31\u50cf\u642c\u5bb6\u662f\u4e00\u4e2a\u629b\u5f03\u7834\u65e7\u5bb6\u5177\u548c\u7535\u5668\u7684\u673a\u4f1a\u4e00\u6837\uff0c\u6211\u4eec\u9884\u8ba1\u82f9\u679c\u5c06\u4e22\u5f03\u4e00\u4e9b\u53d1\u9709\u7684\u8f6f\u4ef6\u5305\u88b1\uff0c\u7c7b\u4f3c\u4e8e\u6700\u65b0\u7684MacOS Catalina\u7248\u672c\u53bb\u5e74\u505c\u6b62\u652f\u6301\u8f83\u65e7\u768432\u4f4d\u8f6f\u4ef6\u65f6\u6240\u505a\u7684\u4e8b\u60c5\u3002\u56de\u8fc7\u5934\u6765\u770b\uff0c\u8f6c\u541164\u4f4d\u8f6f\u4ef6\u53ef\u80fd\u4e0d\u4ec5\u662f\u4e3a\u4e86\u5b83\u672c\u8eab\uff0c\u4e5f\u662f\u4e3a\u4e86\u8003\u8651ARM\u7684\u8fc7\u6e21\u3002\n\u8fd9\u5e94\u8be5\u4f1a\u88ab\u8bc1\u660e\u662f\u4e00\u6b21\u5f02\u5e38\u6709\u8da3\u7684WWDC\uff0c\u968f\u540e\u662f\u6570\u5468\u7684\u6709\u76ca\u8ba8\u8bba\u3001\u9884\u6d4b\u3001\u8c23\u8a00\uff0c\u5f53\u7136\uff0c\u8fd8\u6709\u5e38\u89c1\u7684\u82f9\u679c\u6ce8\u5b9a\u8981\u5012\u95ed\u7684\u5486\u54ee\u3002\n\u611f\u5174\u8da3\u7684\u8bfb\u8005\u4f1a\u559c\u6b22\u53f2\u8482\u6587\u00b7\u8f9b\u8bfa\u592b\u65af\u57fa(Steven Sinofsky)\u7684arm Macs\u63a8\u7279\u5e16\u5b50\uff0c\u73b0\u5728\u5df2\u7ecf\u53d8\u6210\u4e86\u4e00\u7bc7\u4e2d\u7b49\u89c4\u6a21\u7684\u535a\u5ba2\u6587\u7ae0\uff1aApple Macintosh\u548cARM\u5904\u7406\u5668\u3002\u4f5c\u8005\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8fc7\u6e21\u7684\u6311\u6218\u975e\u5e38\u4e86\u89e3\uff1a\u4ed6\u66fe\u662f\u5fae\u8f6f\u7684Windows\u603b\u88c1\u3002\n\u7ea6\u7ff0\u00b7\u683c\u9c81\u4f2f\u5728\u4ed6\u7684DaringFireball.net\u535a\u5ba2\u4e0a\u4e5f\u6709\u4e24\u7bc7\u76f8\u5173\u7684\u5e16\u5b50\u30022005\u5e746\u6708\u51fa\u7248\u7684\u201c\u8fdc\u79bb\u70b8\u5f39\u201d\u8ba8\u8bba\u4e8615\u5e74\u524d\u5411\u82f1\u7279\u5c14\u7684\u8fc7\u6e21\u3002\u5728\u4e0a\u5468\u53d1\u8868\u7684\u82f9\u679c\u672c\u6708\u5728WWDC\u4e0a\u5ba3\u5e03ARM Mac\u8fc7\u6e21\u7684\u6587\u7ae0\u4e2d\uff0c\u683c\u9c81\u4f2f\u5ba1\u89c6\u4e86\u82f9\u679c\u4eca\u5929\u9762\u4e34\u7684\u9009\u62e9\u548c\u6311\u6218\u3002", "note_en": "This time, it looks like rumors are about to become reality: The Mac is moving to Apple-designed ARM-based chips. Today, we discuss the risks, challenges, and benefits of such a transition.\n  In 2021, Apple will ship a new generation of Macs based on a homegrown  ARM architecture processor. So says a  Bloomberg article; it adds that Apple will announce details at its  all-online WWDC (Worldwide Developers Conference) starting June 22nd. Given Bloomberg\u2019s  regrettable but never regretted misdeeds when reporting on Apple, we approach the prediction with caution. This time, however, the story appears to be true.\n From a PR perspective, the transition to ARM looks like a delicate balancing exercise. If Apple announces the move six months before the first ARM-based machines are scheduled to emerge, how will that effect current Mac sales?\n The question awakens memories of  Adam Osborne, creator of the first successful portable  CP/M computer, the  Osborne 1. In 1983, the polymath entrepreneur managed to kill sales of his creation by promising that its successors, the Osborn Executive and the Osborne Vixen, would be even better,  Just You Wait! The pitch was so persuasive that customers did indeed wait. Sales collapsed and so did Osborne\u2019s business.\n This is known as the  Osborne Effect. Over the years it has afflicted many tech companies, most notoriously Nokia  with its failed transition to Windows Phone.\n At the WWDC we\u2019ll see how Apple execs walk this tight rope using price, performance, and product features to keep the Mac business in balance, but let\u2019s not forget that Apple has negotiated a similar strait before. At Apple\u2019s June 2005 WWDC, Steve Jobs announced that the Mac would move from PowerPC processors to Intel x86 CPU chips. The new Intel Macs wouldn\u2019t be available until early 2006.\n How did the Mac business perform during the transition? To find out I went to Apple\u2019s quarterly SEC filings for fiscal years 2005 and 2006. In summary, Mac sales were remarkably resilient. There was no collapse, no waiting for the Intel-based machines. The weakest growth was in the quarter ending in March 2006 where Mac revenue grew by only 5%, only to rebound in the following two quarters: +19% and +37%, respectively. Success! This should give everyone comfort that Apple is likely to manage the 2020\u20132021 processor transition without a major hit to its revenue.\n (A note in passing: In 2006, iPod units grew 75% and revenue of $7.7B exceeded Mac revenue of $7.4B. Apple was the iPod company back then, getting ready to become the iPhone company, as some call it now.)\n Apple 2020 is also much more robust and diversified. 2019 revenue was $260B vs. $19B in 2006. Mac revenue today represents only 10% of total sales; in 2006, it was 38%. The modest Mac share of total Apple revenue makes recent stock market drunkenness hard to explain. On the rumor of new ARM Macs next year, Apple shares climbed by more than 5% in the first three days last week, reaching an all time high valuation of more than $1.5T. It doesn\u2019t make sense. (Update: The market promptly sobered up and fell more than 6% on Thursday and rebounded a bit on Friday.)\n Setting aside the PR complications and excessive market enthusiasm, we can think through some of the consequences of a switch to Apple-designed ARM processors inside 2021 Macs.\n The first notable change will stem from the lower power dissipation associated with ARM derivatives. For several years now, benchmarks have pointed to iPhone processors that offer \u201cdesktop-class\u201d computing power. And yet, an iPhone doesn\u2019t feel as warm as a MacBookPro. Besides being more comfortable on our laps, lower power dissipation will mean smaller batteries, longer battery life, and lighter and somewhat slimmer MacBooks for the same screen size.\n On a desktop machine, there\u2019s no benefit in lower power dissipation and slimmer bodies. This leads one to speculate that the ARM transition will prioritize laptops while iMacs continue to run on Intel-based hardware.\n Looking at macOS and Apple-written apps, there\u2019s every reason to believe that the transition will be as graceful and smooth as it was in 2005\u20132006. Chances are we\u2019ll see a few demos of Apple software running on an ARM prototype at next week\u2019s WWDC.\n Third-party apps are a different story. Such transitions never go completely smoothly for software developers who must scramble to find the engineering resources \u2014 and the money \u2014 to port their apps to a new platform. To forestall the inevitable grumbling, we expect that Apple will provide plenty of software tools and, for its most important third party developers, hardware test beds \u2014 just as the company did in 2005. At next week\u2019s WWDC sessions, we can expect a substantial amount of airtime dedicated to demos of ARM emulation software and transition tools, and explanations of best practices.\n Finally, just as moving house is an opportunity to leave old, banged-up furniture and appliances behind, we expect Apple will jettison some of its musty software baggage, similar to what the latest macOS Catalina version did when it  stopped supporting older 32-bit software last year. In retrospect, the move to 64-bit software may have been made not just for its own sake, but in contemplation of the ARM transition.\n This should prove to be an unusually interesting WWDC, followed by weeks of helpful discussions, predictions, rumors and, of course, the usual Apple-is-doomed howls.\n  Interested readers will enjoy Steven Sinofsky\u2019s ARM Macs twitter thread now rendered as a Medium blog post:  Apple Macintosh and ARM Processors. The author is unusually knowledgeable about OS transitions challenges: he used to be Microsoft\u2019s President of Windows.\n There are also two relevant John Gruber posts from his  daringfireball.net blog.  Bombs Away, published in June 2005, discussed the transition to Intel 15 years ago. In  On Apple Announcing the ARM Mac Transition at WWDC This Month, published last week, Gruber looks at the options and challenges that Apple faces today.", "posttime": "2020-06-15 06:06:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5965\u65af\u672c,osborning,\u82f9\u679c", "title": "\u5965\u65af\u672c\u7684Mac\u3002\u6216\u8005\u4e0d\u662f", "title_en": "Osborning the Mac. Or Not", "transed": 1, "url": "https://mondaynote.com/osborning-the-mac-or-not-f0bbf4c319f0", "via": "", "real_tags": ["\u5965\u65af\u672c", "osborning", "\u82f9\u679c"]}, {"category": "", "categoryclass": "", "imagename": "5bdece534972fced7fe2fdd95955ada0.png", "infoid": 1006584, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u53d1\u5e03\u201c\u5927\u684c\u5b50\u201d\u8bba\u6587\u5df2\u7ecf\u5c06\u8fd1\u5341\u5e74\u4e86\u3002\u90a3\u5f20\u7eb8\u7684\u8bb8\u591a\u9177\u7684\u65b9\u9762\u4e4b\u4e00\u662f\u5b83\u4f7f\u7528\u7684\u6587\u4ef6\u7ec4\u7ec7\u3002\u5728\u8fd9\u7bc71996\u5e74\u7684\u8bba\u6587\u4e4b\u540e\uff0c\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u88ab\u79f0\u4e3a\u65e5\u5fd7\u7ed3\u6784\u5408\u5e76\u6811(Log Structural Merge Tree)\uff0c\u5c3d\u7ba1\u5176\u4e2d\u63cf\u8ff0\u7684\u7b97\u6cd5\u4e0e\u5927\u591a\u6570\u73b0\u5b9e\u4e16\u754c\u7684\u5b9e\u73b0\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\nLSM\u73b0\u5728\u4f5c\u4e3a\u4e3b\u8981\u7684\u6587\u4ef6\u7ec4\u7ec7\u7b56\u7565\u7528\u4e8e\u8bb8\u591a\u7535\u5b50\u4ea7\u54c1\u4e2d\u3002HBase\u3001Cassandra\u3001LevelDB\u3001SQLite\uff0c\u751a\u81f3MongoDB 3.0\u5728\u6536\u8d2dWiring Tiger\u4e4b\u540e\uff0c\u90fd\u9644\u5e26\u4e86\u4e00\u4e2a\u53ef\u9009\u7684LSM\u5f15\u64ce\u3002\nLSM\u6811\u7684\u6709\u8da3\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4eec\u4e0e\u4e3b\u5bfc\u8be5\u9886\u57df\u6570\u5341\u5e74\u7684\u4e8c\u53c9\u6811\u98ce\u683c\u548c\u6863\u6848\u7ec4\u7ec7\u622a\u7136\u4e0d\u540c\u3002LSM\u4f3c\u4e4e\u51e0\u4e4e\u4e0e\u76f4\u89c9\u76f8\u53cd\uff0c\u5f53\u4f60\u7b2c\u4e00\u6b21\u770b\u5230\u5b83\u65f6\uff0c\u53ea\u6709\u5f53\u4f60\u4ed4\u7ec6\u8003\u8651\u6587\u4ef6\u5728\u73b0\u4ee3\u5185\u5b58\u5bc6\u96c6\u578b\u7cfb\u7edf\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\u65f6\uff0c\u5b83\u624d\u6709\u610f\u4e49\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0cLSM\u6811\u65e8\u5728\u63d0\u4f9b\u6bd4\u4f20\u7edfB+\u6811\u6216ISAM\u65b9\u6cd5\u66f4\u597d\u7684\u5199\u5165\u541e\u5410\u91cf\u3002\u5b83\u4eec\u901a\u8fc7\u6d88\u9664\u6267\u884c\u5206\u6563\u7684\u3001\u975e\u5c31\u5730\u66f4\u65b0\u64cd\u4f5c\u7684\u9700\u8981\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e2a\u597d\u4e3b\u610f\u5462\uff1f\u5176\u6838\u5fc3\u662f\u8001\u95ee\u9898\uff0c\u5373\u78c1\u76d8\u5bf9\u4e8e\u968f\u673a\u64cd\u4f5c\u6765\u8bf4\u901f\u5ea6\u5f88\u6162\uff0c\u4f46\u5728\u987a\u5e8f\u8bbf\u95ee\u65f6\u901f\u5ea6\u5f88\u5feb\u3002\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u8bbf\u95ee\u4e4b\u95f4\u5b58\u5728\u9e3f\u6c9f\uff0c\u800c\u4e0d\u7ba1\u76d8\u662f\u78c1\u6027\u7684\u8fd8\u662f\u56fa\u6001\u7684\uff0c\u751a\u81f3\u662f\u4e3b\u5b58\u50a8\u5668(\u5c3d\u7ba1\u7a0b\u5ea6\u8f83\u5c0f)\u3002\n\u8fd9\u4efdACM\u62a5\u544a\u4e2d\u7684\u6570\u5b57\u5728\u8fd9\u91cc/\u8fd9\u91cc\u53ef\u4ee5\u5f88\u597d\u5730\u8bf4\u660e\u8fd9\u4e00\u70b9\u3002\u5b83\u4eec\u8868\u660e\uff0c\u4e0e\u76f4\u89c9\u76f8\u53cd\uff0c\u987a\u5e8f\u78c1\u76d8\u8bbf\u95ee\u6bd4\u968f\u673a\u8bbf\u95ee\u4e3b\u5b58\u66f4\u5feb\u3002\u66f4\u76f8\u5173\u7684\u662f\uff0c\u5b83\u4eec\u8fd8\u663e\u793a\u5bf9\u78c1\u76d8\u7684\u987a\u5e8f\u8bbf\u95ee(\u65e0\u8bba\u662f\u78c1\u76d8\u8fd8\u662f\u56fa\u6001\u786c\u76d8)\u81f3\u5c11\u6bd4\u968f\u673aIO\u5feb\u4e09\u4e2a\u6570\u91cf\u7ea7\u3002\u8fd9\u610f\u5473\u7740\u8981\u907f\u514d\u968f\u673a\u64cd\u4f5c\u3002\u987a\u5e8f\u8bbf\u95ee\u975e\u5e38\u503c\u5f97\u8bbe\u8ba1\u3002\n\u56e0\u6b64\uff0c\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5c0f\u5c0f\u7684\u601d\u7ef4\u5b9e\u9a8c\uff1a\u5982\u679c\u6211\u4eec\u5bf9\u5199\u5165\u541e\u5410\u91cf\u611f\u5174\u8da3\uff0c\u90a3\u4e48\u4f7f\u7528\u4ec0\u4e48\u662f\u6700\u597d\u7684\u65b9\u6cd5\uff1f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u662f\u7b80\u5355\u5730\u5c06\u6570\u636e\u8ffd\u52a0\u5230\u6587\u4ef6\u4e2d\u3002\u6b64\u65b9\u6cd5\u901a\u5e38\u79f0\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u3001\u65e5\u5fd7\u8bb0\u5f55\u6216\u5806\u6587\u4ef6\uff0c\u5b83\u662f\u5b8c\u5168\u987a\u5e8f\u7684\uff0c\u56e0\u6b64\u53ef\u63d0\u4f9b\u76f8\u5f53\u4e8e\u7406\u8bba\u78c1\u76d8\u901f\u5ea6(\u901a\u5e38\u4e3a\u6bcf\u4e2a\u9a71\u52a8\u5668200-300MB/s)\u7684\u975e\u5e38\u5feb\u7684\u5199\u5165\u6027\u80fd\u3002\n\u5f97\u76ca\u4e8e\u7b80\u5355\u6027\u548c\u6027\u80fd\u65e5\u5fd7/\u65e5\u5fd7\uff0c\u57fa\u4e8e\u65e5\u5fd7/\u65e5\u5fd7\u7684\u65b9\u6cd5\u5728\u8bb8\u591a\u5927\u6570\u636e\u5de5\u5177\u4e2d\u7406\u6240\u5f53\u7136\u5730\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u7136\u800c\uff0c\u5b83\u4eec\u4e5f\u6709\u660e\u663e\u7684\u7f3a\u70b9\u3002\u5728\u627e\u5230\u6240\u9700\u7684\u5bc6\u94a5\u4e4b\u524d\uff0c\u4ece\u65e5\u5fd7\u4e2d\u8bfb\u53d6\u4efb\u610f\u6570\u636e\u5c06\u6bd4\u5411\u5176\u5199\u5165\u8981\u8017\u8d39\u66f4\u591a\u7684\u65f6\u95f4\uff0c\u8fd9\u6d89\u53ca\u5230\u53cd\u5411\u65f6\u95f4\u987a\u5e8f\u626b\u63cf\u3002\n\u8fd9\u610f\u5473\u7740\u65e5\u5fd7\u53ea\u771f\u6b63\u9002\u7528\u4e8e\u7b80\u5355\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5728\u8fd9\u4e9b\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\uff0c\u6570\u636e\u8981\u4e48\u50cf\u5927\u591a\u6570\u6570\u636e\u5e93\u7684\u9884\u5199\u65e5\u5fd7\u90a3\u6837\u5b8c\u6574\u8bbf\u95ee\uff0c\u8981\u4e48\u50cfKafka\u8fd9\u6837\u7684\u7b80\u5355\u6d88\u606f\u4f20\u9012\u4ea7\u54c1\u90a3\u6837\u6309\u5df2\u77e5\u504f\u79fb\u91cf\u8bbf\u95ee\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7684\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u65e5\u5fd7\u6765\u9ad8\u6548\u5730\u6267\u884c\u66f4\u590d\u6742\u7684\u8bfb\u53d6\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5982\u57fa\u4e8e\u952e\u7684\u8bbf\u95ee\u6216\u8303\u56f4\u641c\u7d22\u3002\u5e7f\u4e49\u5730\u8bf4\uff0c\u6709\u56db\u79cd\u6709\u6548\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u8fd9\u91cc\u5e2e\u52a9\u6211\u4eec\uff1a\u4e8c\u8fdb\u5236\u641c\u7d22\u3001\u6563\u5217\u3001B+\u6216\u5916\u90e8\u3002\n\u641c\u7d22\u6392\u5e8f\u6587\u4ef6\uff1a\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d\uff0c\u6309\u5173\u952e\u5b57\u6392\u5e8f\u3002\u5982\u679c\u6570\u636e\u5b9a\u4e49\u4e86\u5bbd\u5ea6\uff0c\u5219\u4f7f\u7528\u4e8c\u8fdb\u5236\u641c\u7d22\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u4f7f\u7528\u9875\u9762\u7d22\u5f15+\u626b\u63cf\u3002\n\u6563\u5217\uff1a\u4f7f\u7528\u6563\u5217\u51fd\u6570\u5c06\u6570\u636e\u62c6\u5206\u6210\u5b58\u50a8\u6876\uff0c\u7a0d\u540e\u53ef\u4ee5\u4f7f\u7528\u8be5\u5b58\u50a8\u6876\u6765\u6307\u5bfc\u6570\u636e\u8bfb\u53d6\u3002\n\u5916\u90e8\u6587\u4ef6\uff1a\u5c06\u6570\u636e\u4fdd\u7559\u4e3a\u65e5\u5fd7/\u5806\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u5355\u72ec\u7684\u6563\u5217\u6216\u6811\u7d22\u5f15\u3002\n\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u663e\u8457\u63d0\u9ad8\u4e86\u8bfb\u53d6\u6027\u80fd(\u6700\u591a\u4e3an-&gt\uff1bO(log(N)\u3002\u5509\uff0c\u8fd9\u4e9b\u7ed3\u6784\u589e\u52a0\u4e86\u987a\u5e8f\uff0c\u800c\u8be5\u987a\u5e8f\u4f1a\u963b\u788d\u5199\u5165\u6027\u80fd\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u9ad8\u901f\u65e5\u5fd7\u6587\u4ef6\u4f1a\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4e22\u5931\u3002\u6211\u60f3\u4f60\u4e0d\u80fd\u65e2\u5403\u86cb\u7cd5\u53c8\u5403\u86cb\u7cd5\u3002\n\u4e00\u4e2a\u503c\u5f97\u505a\u7684\u6d1e\u5bdf\u662f\uff0c\u4e0a\u8ff0\u6240\u6709\u56db\u4e2a\u9009\u9879\u90fd\u5bf9\u6570\u636e\u65bd\u52a0\u4e86\u67d0\u79cd\u5f62\u5f0f\u7684\u603b\u4f53\u7ed3\u6784\u3002\n\u6570\u636e\u88ab\u523b\u610f\u800c\u660e\u786e\u5730\u653e\u7f6e\u5728\u6587\u4ef6\u7cfb\u7edf\u5468\u56f4\uff0c\u4ee5\u4fbf\u7d22\u5f15\u7a0d\u540e\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u5b83\u3002\u6b63\u662f\u8fd9\u79cd\u7ed3\u6784\u4f7f\u5bfc\u822a\u53d8\u5f97\u5feb\u901f\u3002\u5509\uff0c\u5f53\u7136\uff0c\u5728\u5199\u5165\u6570\u636e\u65f6\uff0c\u8fd9\u79cd\u7ed3\u6784\u5fc5\u987b\u5f97\u5230\u5c0a\u91cd\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5f00\u59cb\u901a\u8fc7\u6dfb\u52a0\u968f\u673a\u78c1\u76d8\u8bbf\u95ee\u6765\u964d\u4f4e\u5199\u5165\u6027\u80fd\u7684\u5730\u65b9\u3002\n\u6709\u51e0\u4e2a\u5177\u4f53\u7684\u95ee\u9898\u3002\u6bcf\u6b21\u5199\u5165\u9700\u8981\u4e24\u4e2aIO\uff0c\u4e00\u4e2a\u7528\u4e8e\u8bfb\u53d6\u9875\u9762\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u5c06\u5176\u5199\u56de\u3002\u6211\u4eec\u7684\u65e5\u5fd7/\u65e5\u5fd7\u6587\u4ef6\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5b83\u53ef\u4ee5\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b8c\u6210\u3002\n\u4e0d\u8fc7\uff0c\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u66f4\u65b0\u6563\u5217\u6216B+\u7d22\u5f15\u7684\u7ed3\u6784\u3002\u8fd9\u610f\u5473\u7740\u66f4\u65b0\u6587\u4ef6\u7cfb\u7edf\u7684\u7279\u5b9a\u90e8\u5206\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u5c31\u5730\u66f4\u65b0\uff0c\u9700\u8981\u7f13\u6162\u3001\u968f\u673a\u7684IO\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff1a\u50cf\u8fd9\u6837\u7684\u5c31\u5730\u65b9\u6cd5\u4f1a\u5206\u6563\u6587\u4ef6\u7cfb\u7edf\u6267\u884c\u5c31\u5730\u66f4\u65b0*\u3002\u8fd9\u662f\u6709\u9650\u7684\u3002\n\u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u65b9\u6cd5(4)\u5c06\u7d22\u5f15\u653e\u5165\u65e5\u5fd7-\u4f46\u5c06\u7d22\u5f15\u4fdd\u7559\u5728\u5185\u5b58\u4e2d\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u5c06\u952e\u6620\u5c04\u5230\u65e5\u5fd7\u6587\u4ef6(\u65e5\u5fd7)\u4e2d\u6700\u65b0\u503c\u7684\u4f4d\u7f6e(\u504f\u79fb)\u3002\u8fd9\u79cd\u65b9\u6cd5\u5b9e\u9645\u4e0a\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u56e0\u4e3a\u5b83\u5c06\u968f\u673aIO\u5212\u5206\u4e3a\u76f8\u5bf9\u8f83\u5c0f\u7684\u4e1c\u897f\uff1a\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u952e\u5230\u504f\u79fb\u91cf\u7684\u6620\u5c04\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u67e5\u627e\u4e00\u4e2a\u503c\u5c31\u53ea\u6709\u4e00\u4e2aIO\u4e86\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u4e5f\u5b58\u5728\u53ef\u4f38\u7f29\u6027\u9650\u5236\uff0c\u7279\u522b\u662f\u5f53\u60a8\u6709\u5f88\u591a\u5c0f\u503c\u65f6\u3002\u5982\u679c\u60a8\u7684\u503c\u53ea\u662f\u7b80\u5355\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u7d22\u5f15\u5c06\u5927\u4e8e\u6570\u636e\u6587\u4ef6\u672c\u8eab\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4eceRiak\u5230Oracle Coherence\u7684\u8bb8\u591a\u4ea7\u54c1\u4e2d\u90fd\u4f7f\u7528\u4e86\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e00\u79cd\u660e\u667a\u7684\u6298\u8877\u65b9\u6848\u3002\n\u56e0\u6b64\uff0c\u8fd9\u5c06\u6211\u4eec\u5e26\u5230Log Structure Merge Trees(\u65e5\u5fd7\u7ed3\u6784\u5316\u5408\u5e76\u6811)\u3002LSM\u5bf9\u4e0a\u8ff0\u56db\u4e2a\u95ee\u9898\u91c7\u53d6\u4e86\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u5b83\u4eec\u53ef\u4ee5\u5b8c\u5168\u4ee5\u78c1\u76d8\u4e3a\u4e2d\u5fc3\uff0c\u53ea\u9700\u8981\u5f88\u5c11\u7684\u5185\u5b58\u5b58\u50a8\u6765\u63d0\u9ad8\u6548\u7387\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4fdd\u6301\u6211\u4eec\u4f1a\u4e0e\u7b80\u5355\u65e5\u5fd7\u6587\u4ef6\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u5927\u90e8\u5206\u5199\u5165\u6027\u80fd\u3002\u4e0eB+\u6811\u76f8\u6bd4\uff0c\u7f3a\u70b9\u4e4b\u4e00\u662f\u8bfb\u53d6\u6027\u80fd\u7565\u5dee\u3002\n\u672c\u8d28\u4e0a\uff0c\u4ed6\u4eec\u5c3d\u5176\u6240\u80fd\u4f7f\u78c1\u76d8\u8bbf\u95ee\u6309\u987a\u5e8f\u8fdb\u884c\u3002\u8fd9\u91cc\u4e0d\u80fd\u7528\u6563\u5f39\u67aa\uff01\n*\u5b58\u5728\u8bb8\u591a\u4e0d\u9700\u8981\u5c31\u5730\u66f4\u65b0\u7684\u6811\u7ed3\u6784\u3002\u6700\u53d7\u6b22\u8fce\u7684\u662f\u4ec5\u9644\u52a0\u7684Btree\uff0c\u4e5f\u79f0\u4e3a\u5199\u5165\u65f6\u590d\u5236\u6811\u3002\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u5728\u6811\u7ed3\u6784\u4e2d\u6309\u987a\u5e8f\u8986\u76d6\uff0c\u6bcf\u6b21\u5199\u5165\u53d1\u751f\u65f6\u90fd\u4f1a\u5728\u6587\u4ef6\u7ed3\u675f\u65f6\u6267\u884c\u3002\u65e7\u6811\u7ed3\u6784\u7684\u76f8\u5173\u90e8\u5206(\u5305\u62ec\u9876\u7ea7\u8282\u70b9)\u88ab\u5b64\u7acb\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0c\u7531\u4e8e\u6811\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u987a\u5e8f\u5730\u91cd\u65b0\u5b9a\u4e49\u81ea\u8eab\uff0c\u56e0\u6b64\u907f\u514d\u4e86\u5c31\u5730\u66f4\u65b0\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u4ee5\u4ee3\u4ef7\u4e3a\u4ee3\u4ef7\u7684\uff1a\u6bcf\u6b21\u5199\u5165\u65f6\u91cd\u5199\u7ed3\u6784\u90fd\u975e\u5e38\u5197\u957f\u3002\u5b83\u8fd8\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u5199\u5165\u653e\u5927\uff0c\u8fd9\u5bf9\u5176\u672c\u8eab\u6765\u8bf4\u662f\u4e00\u4e2a\u975e\u5e38\u4e0d\u5229\u7684\u56e0\u7d20\u3002\n\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u57fa\u672cLSM\u6811\u76f8\u5f53\u7b80\u5355\u3002\u4e0d\u662f\u62e5\u6709\u4e00\u4e2a\u5927\u7684\u7d22\u5f15\u7ed3\u6784(\u8fd9\u5c06\u5206\u6563\u6587\u4ef6\u7cfb\u7edf\u6216\u663e\u8457\u589e\u52a0\u5199\u5165\u653e\u5927)\uff0c\u800c\u662f\u5c06\u6279\u91cf\u5199\u5165\u987a\u5e8f\u4fdd\u5b58\u5230\u4e00\u7ec4\u8f83\u5c0f\u7684\u7d22\u5f15\u6587\u4ef6\u4e2d\u3002\u56e0\u6b64\uff0c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u5305\u542b\u4e00\u6279\u8986\u76d6\u77ed\u65f6\u95f4\u7684\u66f4\u6539\u3002\u6bcf\u4e2a\u6587\u4ef6\u5728\u5199\u5165\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c\u6392\u5e8f\uff0c\u56e0\u6b64\u4ee5\u540e\u641c\u7d22\u4f1a\u66f4\u5feb\u3002\u6587\u4ef6\u662f\u4e0d\u53d8\u7684\uff1b\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u66f4\u65b0\u3002\u65b0\u66f4\u65b0\u5c06\u653e\u5165\u65b0\u6587\u4ef6\u4e2d\u3002\u8bfb\u53d6\u68c0\u67e5\u6240\u6709\u6587\u4ef6\u3002\u5b9a\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u4ee5\u4fdd\u6301\u8f83\u4f4e\u7684\u6587\u4ef6\u6570\u3002\n\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u770b\u4e00\u4e0b\u8fd9\u4e00\u70b9\u3002\u5f53\u66f4\u65b0\u5230\u8fbe\u65f6\uff0c\u5b83\u4eec\u88ab\u6dfb\u52a0\u5230\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\uff0c\u8be5\u7f13\u51b2\u533a\u901a\u5e38\u4ee5\u6811(\u7ea2-\u9ed1\u7b49)\u7684\u5f62\u5f0f\u4fdd\u5b58\uff0c\u4ee5\u4fdd\u6301\u952e\u7684\u6392\u5e8f\u3002\u5728\u5927\u591a\u6570\u5b9e\u73b0\u4e2d\uff0c\u6b64\u201c\u5185\u5b58\u8868\u201d\u4f5c\u4e3a\u9884\u5199\u65e5\u5fd7\u590d\u5236\u5230\u78c1\u76d8\u4e0a\uff0c\u4ec5\u7528\u4e8e\u6062\u590d\u76ee\u7684\u3002\u5f53Memtable\u586b\u6ee1\u6392\u5e8f\u7684\u6570\u636e\u65f6\uff0c\u4f1a\u5c06\u5237\u65b0\u5230\u78c1\u76d8\u4e0a\u7684\u65b0\u6587\u4ef6\u3002\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u5199\u5165\u8fdb\u5165\uff0c\u6b64\u8fc7\u7a0b\u4f1a\u91cd\u590d\u3002\u91cd\u8981\u7684\u662f\uff0c\u7cfb\u7edf\u4ec5\u6267\u884c\u987a\u5e8fIO\uff0c\u56e0\u4e3a\u6587\u4ef6\u672a\u88ab\u7f16\u8f91\u3002\u65b0\u6761\u76ee\u6216\u7f16\u8f91\u53ea\u662f\u521b\u5efa\u8fde\u7eed\u7684\u6587\u4ef6(\u53c2\u89c1\u4e0a\u9762\u7684\u56fe)\u3002\n\u56e0\u6b64\uff0c\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u6570\u636e\u8fdb\u5165\u7cfb\u7edf\uff0c\u5c31\u4f1a\u521b\u5efa\u8d8a\u6765\u8d8a\u591a\u7684\u4e0d\u53ef\u66f4\u6539\u7684\u6709\u5e8f\u6587\u4ef6\u3002\u6bcf\u4e00\u4e2a\u90fd\u4ee3\u8868\u4e00\u4e2a\u5c0f\u7684\uff0c\u6309\u65f6\u95f4\u987a\u5e8f\u7684\u53d8\u5316\u5b50\u96c6\uff0c\u4fdd\u6301\u6392\u5e8f\u3002\n\u7531\u4e8e\u4e0d\u66f4\u65b0\u65e7\u6587\u4ef6\uff0c\u56e0\u6b64\u521b\u5efa\u91cd\u590d\u6761\u76ee\u4ee5\u53d6\u4ee3\u5148\u524d\u8bb0\u5f55(\u6216\u5220\u9664\u6807\u8bb0)\u3002\u8fd9\u6700\u521d\u4f1a\u521b\u5efa\u4e00\u4e9b\u5197\u4f59\u3002\n\u7cfb\u7edf\u4f1a\u5b9a\u671f\u6267\u884c\u538b\u7f29\u3002\u538b\u7f29\u4f1a\u9009\u62e9\u591a\u4e2a\u6587\u4ef6\u5e76\u5c06\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u5220\u9664\u4efb\u4f55\u91cd\u590d\u7684\u66f4\u65b0\u6216\u5220\u9664(\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u6b64\u64cd\u4f5c\u7684\u5de5\u4f5c\u539f\u7406)\u3002\u8fd9\u5bf9\u4e8e\u6d88\u9664\u4e0a\u8ff0\u5197\u4f59\u5f88\u91cd\u8981\uff0c\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8981\u4fdd\u6301\u5bf9\u8bfb\u53d6\u6027\u80fd\u7684\u63a7\u5236\uff0c\u8bfb\u53d6\u6027\u80fd\u4f1a\u968f\u7740\u6587\u4ef6\u6570\u91cf\u7684\u589e\u52a0\u800c\u964d\u4f4e\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u56e0\u4e3a\u6587\u4ef6\u662f\u7ecf\u8fc7\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u5408\u5e76\u6587\u4ef6\u7684\u8fc7\u7a0b\u975e\u5e38\u9ad8\u6548\u3002\n\u5f53\u8bf7\u6c42\u8bfb\u53d6\u64cd\u4f5c\u65f6\uff0c\u7cfb\u7edf\u9996\u5148\u68c0\u67e5\u5185\u5b58\u4e2d\u7684\u7f13\u51b2\u533a(\u5185\u5b58\u8868)\u3002\u5982\u679c\u627e\u4e0d\u5230\u5bc6\u94a5\uff0c\u5c06\u6309\u9006\u65f6\u95f4\u987a\u5e8f\u9010\u4e2a\u68c0\u67e5\u5404\u4e2a\u6587\u4ef6\uff0c\u76f4\u5230\u627e\u5230\u5bc6\u94a5\u3002\u6bcf\u4e2a\u6587\u4ef6\u90fd\u4fdd\u6301\u6392\u5e8f\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5bfc\u822a\u3002\u4f46\u662f\uff0c\u968f\u7740\u6587\u4ef6\u6570\u91cf\u7684\u589e\u52a0\uff0c\u8bfb\u53d6\u5c06\u53d8\u5f97\u8d8a\u6765\u8d8a\u6162\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u90fd\u9700\u8981\u68c0\u67e5\u3002\u8fd9\u662f\u4e2a\u95ee\u9898\u3002\n\u56e0\u6b64\uff0cLSM\u6811\u4e2d\u7684\u8bfb\u53d6\u901f\u5ea6\u6bd4\u5b83\u4eec\u7684\u5c31\u5730\u540c\u80de\u6162\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u51e0\u4e2a\u6280\u5de7\u53ef\u4ee5\u4f7f\u6a21\u5f0f\u5177\u6709\u8868\u73b0\u529b\u3002\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u5728\u5185\u5b58\u4e2d\u4fdd\u7559\u4e00\u4e2a\u5b8c\u6574\u7684\u9875\u9762\u7d22\u5f15\u3002\u8fd9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u67e5\u627e\uff0c\u8ba9\u60a8\u201c\u63a5\u8fd1\u201d\u60a8\u7684\u76ee\u6807\u952e\u3002\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u65f6\uff0c\u60a8\u53ef\u4ee5\u4ece\u90a3\u91cc\u8fdb\u884c\u626b\u63cf\u3002LevelDB\u3001RocksDB\u548cBigtable\u901a\u8fc7\u5728\u6bcf\u4e2a\u6587\u4ef6\u7684\u672b\u5c3e\u4fdd\u5b58\u4e00\u4e2a\u5757\u7d22\u5f15\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u901a\u5e38\u6bd4\u76f4\u63a5\u7684\u4e8c\u8fdb\u5236\u641c\u7d22\u5de5\u4f5c\u5f97\u66f4\u597d\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4f7f\u7528\u53ef\u53d8\u957f\u5ea6\u7684\u5b57\u6bb5\uff0c\u5e76\u4e14\u66f4\u9002\u5408\u4e8e\u538b\u7f29\u6570\u636e\u3002\n\u5373\u4f7f\u4f7f\u7528\u6bcf\u4e2a\u6587\u4ef6\u7684\u7d22\u5f15\uff0c\u8bfb\u53d6\u64cd\u4f5c\u4ecd\u5c06\u968f\u7740\u6587\u4ef6\u6570\u91cf\u7684\u589e\u52a0\u800c\u53d8\u6162\u3002\u901a\u8fc7\u5b9a\u671f\u5c06\u6587\u4ef6\u5408\u5e76\u5728\u4e00\u8d77\u6765\u63a7\u5236\u8fd9\u4e00\u70b9\u3002\u8fd9\u6837\u7684\u538b\u7f29\u4f7f\u6587\u4ef6\u6570\u91cf\u548c\u8bfb\u53d6\u6027\u80fd\u4fdd\u6301\u5728\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u3002\n\u5373\u4f7f\u4f7f\u7528\u538b\u7f29\uff0c\u8bfb\u53d6\u4ecd\u7136\u9700\u8981\u8bbf\u95ee\u8bb8\u591a\u6587\u4ef6\u3002\u5927\u591a\u6570\u5b9e\u73b0\u90fd\u901a\u8fc7\u4f7f\u7528\u9ad8\u7ea7Bloom\u8fc7\u6ee4\u5668\u6765\u4f7f\u8fd9\u4e00\u70b9\u65e0\u6548\u3002\u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5305\u542b\u5bc6\u94a5\u7684\u4e00\u79cd\u5185\u5b58\u6548\u7387\u9ad8\u7684\u65b9\u6cd5\u3002\n\u56e0\u6b64\uff0c\u4ece\u201c\u5199\u5165\u201d\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6240\u6709\u5199\u5165\u90fd\u662f\u6279\u5904\u7406\u7684\uff0c\u5e76\u4e14\u4ec5\u6309\u987a\u5e8f\u533a\u5757\u5199\u5165\u3002\u538b\u7f29\u8f6e\u6b21\u8fd8\u4f1a\u5e26\u6765\u989d\u5916\u7684\u5468\u671f\u6027IO\u635f\u5931\u3002\u7136\u800c\uff0c\u8bfb\u53d6\u53ef\u80fd\u4f1a\u5728\u67e5\u627e\u5355\u884c\u65f6\u89e6\u53ca\u5927\u91cf\u6587\u4ef6(\u5373\u8bfb\u53d6\u65f6\u7684\u6563\u5c04\u67aa)\u3002\u8fd9\u5c31\u662f\u7b97\u6cd5\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u6211\u4eec\u7528\u5199\u5165\u7684\u968f\u673aIO\u6362\u53d6\u8bfb\u53d6\u7684\u968f\u673aIO\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u50cfBloom Filter\u8fd9\u6837\u7684\u8f6f\u4ef6\u6280\u5de7\u6216\u50cf\u5927\u578b\u6587\u4ef6\u7f13\u5b58\u8fd9\u6837\u7684\u786c\u4ef6\u6280\u5de7\u6765\u4f18\u5316\u8bfb\u53d6\u6027\u80fd\uff0c\u90a3\u4e48\u8fd9\u79cd\u6743\u8861\u662f\u975e\u5e38\u660e\u667a\u7684\u3002\n\u8981\u4fdd\u6301LSM\u8bfb\u53d6\u76f8\u5bf9\u8f83\u5feb\uff0c\u91cd\u8981\u7684\u662f\u51cf\u5c11\u6587\u4ef6\u6570\u91cf\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u66f4\u6df1\u5165\u5730\u7814\u7a76\u538b\u7f29\u3002\u8be5\u8fc7\u7a0b\u6709\u70b9\u50cf\u5206\u4ee3\u5783\u573e\u6536\u96c6\uff1a\n\u5f53\u521b\u5efa\u4e86\u4e00\u5b9a\u6570\u91cf\u7684\u6587\u4ef6\u65f6\uff0c\u6bd4\u65b9\u8bf4\u521b\u5efa\u4e865\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u670910\u884c\uff0c\u5b83\u4eec\u88ab\u5408\u5e76\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\uff0c\u670950\u884c(\u6216\u8005\u53ef\u80fd\u7a0d\u5fae\u5c11\u4e00\u70b9)\u3002\n\u6b64\u8fc7\u7a0b\u7ee7\u7eed\u8fdb\u884c\uff0c\u521b\u5efa\u4e8610\u4e2a\u4ee5\u4e0a\u7684\u884c\u6587\u4ef6\u3002\u6bcf\u6b21\u7b2c\u4e94\u4e2a\u6587\u4ef6\u586b\u6ee1\u65f6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u90fd\u4f1a\u5408\u5e76\u523050\u4e2a\u884c\u6587\u4ef6\u4e2d\u3002\n\u6700\u7ec8\u67095\u4e2a50\u884c\u6587\u4ef6\u3002\u6b64\u65f6\uff0c5\u4e2a50\u884c\u6587\u4ef6\u5408\u5e76\u4e3a\u4e00\u4e2a250\u884c\u6587\u4ef6\u3002\u8be5\u8fc7\u7a0b\u5c06\u7ee7\u7eed\u521b\u5efa\u8d8a\u6765\u8d8a\u5927\u7684\u6587\u4ef6\u3002\u53c2\u89c1\u56fe\u3002\n\u8fd9\u79cd\u901a\u7528\u65b9\u6cd5\u7684\u524d\u8ff0\u95ee\u9898\u662f\u521b\u5efa\u4e86\u5927\u91cf\u6587\u4ef6\uff1a\u5fc5\u987b\u5355\u72ec\u641c\u7d22\u6240\u6709\u6587\u4ef6\u624d\u80fd\u8bfb\u53d6\u7ed3\u679c(\u81f3\u5c11\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u662f\u8fd9\u6837)\u3002\n\u8f83\u65b0\u7684\u5b9e\u73b0(\u5982\u5728LevelDB\u3001RocksDB\u548cCassandra\u4e2d\u7684\u5b9e\u73b0)\u901a\u8fc7\u5b9e\u73b0\u57fa\u4e8e\u7ea7\u522b(\u800c\u4e0d\u662f\u57fa\u4e8e\u5927\u5c0f)\u7684\u538b\u7f29\u65b9\u6cd5\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002\u8fd9\u51cf\u5c11\u4e86\u5728\u8bfb\u53d6\u6700\u574f\u60c5\u51b5\u65f6\u5fc5\u987b\u53c2\u8003\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u5e76\u964d\u4f4e\u4e86\u5355\u4e2a\u538b\u7f29\u7684\u76f8\u5bf9\u5f71\u54cd\u3002\n1.\u6bcf\u4e2a\u7ea7\u522b\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u5e76\u4fdd\u8bc1\u5176\u4e2d\u6574\u4f53\u4e0d\u4f1a\u6709\u91cd\u53e0\u7684\u952e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bc6\u94a5\u8de8\u53ef\u7528\u6587\u4ef6\u8fdb\u884c\u5206\u533a\u3002\u56e0\u6b64\uff0c\u8981\u627e\u5230\u67d0\u4e00\u7ea7\u522b\u7684\u5bc6\u94a5\uff0c\u53ea\u9700\u67e5\u8be2\u4e00\u4e2a\u6587\u4ef6\u3002\n\u7b2c\u4e00\u7ea7\u662f\u4e0a\u8ff0\u5c5e\u6027\u4e0d\u6210\u7acb\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u5bc6\u94a5\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a\u6587\u4ef6\u3002\n2.\u6587\u4ef6\u5408\u5e76\u5230\u4e0a\u7ea7\uff0c\u4e00\u6b21\u4e00\u4e2a\u6587\u4ef6\u3002\u5f53\u4e00\u4e2a\u7ea7\u522b\u586b\u6ee1\u65f6\uff0c\u4f1a\u4ece\u4e2d\u63d0\u53d6\u4e00\u4e2a\u6587\u4ef6\u5e76\u5408\u5e76\u5230\u4e0a\u9762\u7684\u7ea7\u522b\u4e2d\uff0c\u4ece\u800c\u4e3a\u6dfb\u52a0\u66f4\u591a\u6570\u636e\u521b\u9020\u7a7a\u95f4\u3002\u8fd9\u4e0e\u57fa\u672c\u65b9\u6cd5\u7565\u6709\u4e0d\u540c\uff0c\u5728\u57fa\u672c\u65b9\u6cd5\u4e2d\uff0c\u5c06\u51e0\u4e2a\u5927\u5c0f\u76f8\u4f3c\u7684\u6587\u4ef6\u5408\u5e76\u4e3a\u4e00\u4e2a\u66f4\u5927\u7684\u6587\u4ef6\u3002\n\u8fd9\u4e9b\u53d8\u5316\u610f\u5473\u7740\uff0c\u57fa\u4e8e\u6c34\u5e73\u7684\u538b\u7f29\u65b9\u6cd5\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u5206\u6563\u538b\u5b9e\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u9700\u8981\u66f4\u5c11\u7684\u603b\u7a7a\u95f4\u3002\u5b83\u8fd8\u5177\u6709\u66f4\u597d\u7684\u8bfb\u53d6\u6027\u80fd\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u603bIO\u4f1a\u66f4\u9ad8\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e9b\u8f83\u7b80\u5355\u7684\u9762\u5411\u5199\u5165\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5c06\u770b\u4e0d\u5230\u597d\u5904\u3002\n\u56e0\u6b64\uff0cLSM\u6811\u4f4d\u4e8e\u65e5\u5fd7/\u65e5\u5fd7\u6587\u4ef6\u548c\u4f20\u7edf\u7684\u5355\u4e00\u56fa\u5b9a\u7d22\u5f15(\u5982B+\u6811\u6216Hash\u7d22\u5f15)\u4e4b\u95f4\u3002\u5b83\u4eec\u4e3a\u7ba1\u7406\u4e00\u7ec4\u8f83\u5c0f\u7684\u5355\u4e2a\u7d22\u5f15\u6587\u4ef6\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u3002\n\u901a\u8fc7\u7ba1\u7406\u4e00\u7ec4\u7d22\u5f15\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u7d22\u5f15\uff0cLSM\u65b9\u6cd5\u53ef\u4ee5\u5229\u7528\u4e0eB+\u6216\u54c8\u5e0c\u7d22\u5f15\u4e2d\u7684\u5c31\u5730\u66f4\u65b0\u76f8\u5173\u7684\u6700\u6602\u8d35\u7684\u968f\u673aIO\u6765\u5b9e\u73b0\u5feb\u901f\u7684\u987a\u5e8fIO\u3002\n\u6b63\u5728\u4ed8\u51fa\u7684\u4ee3\u4ef7\u662f\uff0c\u8bfb\u53d6\u5fc5\u987b\u89e3\u51b3\u5927\u91cf\u7684\u7d22\u5f15\u6587\u4ef6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u3002\u6b64\u5916\uff0c\u538b\u7f29\u8fd8\u9700\u8981\u989d\u5916\u7684IO\u6210\u672c\u3002\n\u5982\u679c\u8fd9\u4ecd\u7136\u6709\u70b9\u6a21\u7cca\u4e0d\u6e05\uff0c\u8fd9\u91cc\u548c\u8fd9\u91cc\u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u5f88\u597d\u7684\u89c6\u9891\u63cf\u8ff0\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0cLSM\u5177\u6709\u66f4\u597d\u7684\u5199\u5165\u6027\u80fd\uff0c\u5c3d\u7ba1\u8fd9\u662f\u6709\u4ee3\u4ef7\u7684\u3002\u4e0d\u8fc7\uff0cLSM\u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u597d\u5904\u3002LSM\u6811\u521b\u5efa\u7684SSTables(\u5df2\u6392\u5e8f\u6587\u4ef6)\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u8fd9\u4f7f\u5f97\u5b83\u4eec\u7684\u9501\u5b9a\u8bed\u4e49\u53d8\u5f97\u7b80\u5355\u5f97\u591a\u3002\u901a\u5e38\uff0c\u4e89\u7528\u7684\u552f\u4e00\u8d44\u6e90\u662fMemtable\u3002\u8fd9\u4e0e\u9700\u8981\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u9501\u5b9a\u673a\u5236\u6765\u7ba1\u7406\u4e0d\u540c\u7ea7\u522b\u7684\u66f4\u6539\u7684\u5355\u4e00\u6811\u5f62\u6210\u4e86\u9c9c\u660e\u5bf9\u6bd4\u3002\n\u56e0\u6b64\uff0c\u5f52\u6839\u7ed3\u5e95\uff0c\u95ee\u9898\u53ef\u80fd\u662f\u9884\u671f\u5de5\u4f5c\u8d1f\u8f7d\u7684\u5199\u5165\u5bfc\u5411\u7a0b\u5ea6\u6709\u591a\u9ad8\u3002\u5982\u679c\u60a8\u5173\u5fc3\u5199\u5165\u6027\u80fd\uff0cLSM\u63d0\u4f9b\u7684\u8282\u7701\u5f88\u53ef\u80fd\u662f\u4ef6\u5927\u4e8b\u3002\u5927\u578b\u4e92\u8054\u7f51\u516c\u53f8\u4f3c\u4e4e\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u76f8\u5f53\u575a\u5b9a\u3002\u4f8b\u5982\uff0c\u96c5\u864e\u62a5\u544a\u79f0\uff0c\u5728\u4e8b\u4ef6\u65e5\u5fd7\u548c\u79fb\u52a8\u6570\u636e\u6444\u53d6\u589e\u52a0\u7684\u63a8\u52a8\u4e0b\uff0c\u5de5\u4f5c\u8d1f\u8f7d\u6b63\u5728\u7a33\u6b65\u4ece\u8bfb\u7e41\u91cd\u5411\u8bfb\u5199\u8f6c\u53d8\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u53d7\u4e8b\u4ef6\u65e5\u5fd7\u548c\u79fb\u52a8\u6570\u636e\u6444\u53d6\u589e\u52a0\u7684\u63a8\u52a8\u3002\u4e0d\u8fc7\uff0c\u8bb8\u591a\u4f20\u7edf\u6570\u636e\u5e93\u4ea7\u54c1\u4f3c\u4e4e\u4ecd\u7136\u504f\u7231\u8bfb\u4f18\u5316\u7684\u6587\u4ef6\u7ed3\u6784\u3002\n\u4e0e\u65e5\u5fd7\u7ed3\u6784\u6587\u4ef6\u7cfb\u7edf\u4e00\u6837[\u53c2\u89c1\u811a\u6ce8]\uff0c\u5173\u952e\u8bba\u70b9\u6e90\u4e8e\u5185\u5b58\u53ef\u7528\u6027\u7684\u589e\u52a0\u3002\u6709\u4e86\u66f4\u591a\u7684\u53ef\u7528\u5185\u5b58\uff0c\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u5927\u578b\u6587\u4ef6\u7f13\u5b58\uff0c\u8bfb\u53d6\u81ea\u7136\u4f1a\u5f97\u5230\u4f18\u5316\u3002\u56e0\u6b64\uff0c\u5199\u6027\u80fd(\u5185\u5b58\u4e0d\u4f1a\u968f\u66f4\u591a\u7684\u589e\u52a0\u800c\u63d0\u9ad8)\u6210\u4e3a\u4e3b\u8981\u7684\u5173\u6ce8\u70b9\u3002\u56e0\u6b64\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u786c\u4ef6\u8fdb\u6b65\u5bf9\u8bfb\u53d6\u6027\u80fd\u7684\u5f71\u54cd\u5927\u4e8e\u5bf9\u5199\u5165\u6027\u80fd\u7684\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u9009\u62e9\u5199\u4f18\u5316\u7684\u6587\u4ef6\u7ed3\u6784\u662f\u6709\u610f\u4e49\u7684\u3002\n\u5f53\u7136\uff0c\u50cfLevelDB\u548cCassandra\u8fd9\u6837\u7684LSM\u5b9e\u73b0\u901a\u5e38\u6bd4\u57fa\u4e8e\u5355\u6811\u7684\u65b9\u6cd5(\u5206\u522b\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc)\u63d0\u4f9b\u66f4\u597d\u7684\u5199\u5165\u6027\u80fd\u3002\n\u5728LSM\u65b9\u6cd5\u4e0a\u5df2\u7ecf\u6709\u4e86\u76f8\u5f53\u591a\u7684\u8fdb\u4e00\u6b65\u5de5\u4f5c\u3002\u96c5\u864e\u5f00\u53d1\u4e86\u4e00\u4e2a\u540d\u4e3aPNUTS\u7684\u7cfb\u7edf\uff0c\u5b83\u5c06LSM\u548cB\u6811\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u5c55\u793a\u4e86\u66f4\u597d\u7684\u6027\u80fd\u3002\u201c\u4e0d\u8fc7\uff0c\u6211\u8fd8\u6ca1\u6709\u770b\u5230\u8fd9\u79cd\u7b97\u6cd5\u7684\u516c\u5f00\u5b9e\u73b0\u3002IBM\u548c\u8c37\u6b4c\u6700\u8fd1\u5728\u7c7b\u4f3c\u7684\u8109\u7edc\u4e0a\u505a\u4e86\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u5c3d\u7ba1\u662f\u901a\u8fc7\u4e0d\u540c\u7684\u9053\u8def\u3002\u8fd8\u6709\u4e00\u4e9b\u76f8\u5173\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u5177\u6709\u7c7b\u4f3c\u7684\u7279\u6027\uff0c\u4f46\u4fdd\u7559\u4e86\u603b\u4f53\u7ed3\u6784\u3002\u5176\u4e2d\u5305\u62ec\u5206\u5f62\u6811\u548c\u5206\u5c42\u6811\u3002\n\u5f53\u7136\uff0c\u8fd9\u53ea\u662f\u4e00\u79cd\u9009\u62e9\u3002\u6570\u636e\u5e93\u5229\u7528\u4e86\u5927\u91cf\u5fae\u5999\u4e0d\u540c\u7684\u9009\u9879\u3002\u8d8a\u6765\u8d8a\u591a\u7684\u6570\u636e\u5e93\u4e3a\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u63d0\u4f9b\u4e86\u53ef\u63d2\u62d4\u7684\u6570\u636e\u5f15\u64ce\u3002\u5bf9\u4e8eHDFS\uff0c\u5b83\u662f\u4e00\u79cd\u6d41\u884c\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u5e76\u4e14\u51e0\u4e4e\u662f\u671d\u7740\u76f8\u53cd\u7684\u65b9\u5411\u63a8\u8fdb\u7684(\u901a\u8fc7\u4e13\u680f\u683c\u5f0f\u5b9e\u73b0\u805a\u5408\u6027\u80fd)\u3002MySQL\u6709\u4e00\u4e2a\u5b58\u50a8\u62bd\u8c61\uff0c\u53ef\u4ee5\u4e0e\u8bb8\u591a\u4e0d\u540c\u7684\u5f15\u64ce\u4e00\u8d77\u63d2\u5165\uff0c\u6bd4\u5982TToku\u7684\u57fa\u4e8e\u5206\u5f62\u6811\u7684\u7d22\u5f15\u3002\u8fd9\u4e5f\u9002\u7528\u4e8eMongoDB\u3002Mongo 3.0\u5305\u62ecWiring Tiger\u5f15\u64ce\uff0c\u8be5\u5f15\u64ce\u65e2\u63d0\u4f9bB+&amp\uff1bLSM\u65b9\u6cd5\uff0c\u4e5f\u63d0\u4f9b\u4f20\u7edf\u5f15\u64ce\u3002\u8bb8\u591a\u5173\u7cfb\u6570\u636e\u5e93\u5177\u6709\u53ef\u914d\u7f6e\u7684\u7d22\u5f15\u7ed3\u6784\uff0c\u8fd9\u4e9b\u7ed3\u6784\u4f7f\u7528\u4e0d\u540c\u7684\u6587\u4ef6\u7ec4\u7ec7\u3002\n\u8003\u8651\u5230\u6b63\u5728\u4f7f\u7528\u7684\u786c\u4ef6\uff0c\u8fd9\u4e5f\u662f\u503c\u5f97\u7684\u3002\u6602\u8d35\u7684\u56fa\u6001\u78c1\u76d8(\u5982FusionIO)\u5177\u6709\u66f4\u597d\u7684\u968f\u673a\u5199\u5165\u6027\u80fd\u3002\u8fd9\u9002\u5408\u5c31\u5730\u66f4\u65b0\u65b9\u6cd5\u3002\u66f4\u4fbf\u5b9c\u7684\u56fa\u6001\u786c\u76d8\u548c\u673a\u68b0\u9a71\u52a8\u5668\u66f4\u9002\u5408LSM\u3002LSM\u53ef\u907f\u514d\u8ba9\u56fa\u6001\u786c\u76d8\u88ab\u9057\u5fd8\u7684\u5c0f\u578b\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f**\u3002\n\u4e0d\u8fc7\uff0cLSM\u4e5f\u4e0d\u662f\u6ca1\u6709\u6279\u8bc4\u8005\u3002\u4e0eGC\u4e00\u6837\uff0c\u5b83\u6700\u5927\u7684\u95ee\u9898\u662f\u6536\u96c6\u9636\u6bb5\u53ca\u5176\u5bf9\u5b9d\u8d35IO\u7684\u5f71\u54cd\u3002\u5728\u8fd9\u4e2a\u9ed1\u5ba2\u65b0\u95fb\u5e16\u5b50\u4e0a\u6709\u4e00\u4e2a\u5173\u4e8e\u5176\u4e2d\u4e00\u4e9b\u7684\u6709\u8da3\u7684\u8ba8\u8bba\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u6b63\u5728\u7814\u7a76\u6570\u636e\u4ea7\u54c1\uff0c\u65e0\u8bba\u662fBDB\u548cLevelDb\uff0c\u8fd8\u662fCassandra\u548cMongoDB\uff0c\u60a8\u53ef\u80fd\u4f1a\u5c06\u5b83\u4eec\u7684\u76f8\u5bf9\u6027\u80fd\u7684\u4e00\u5b9a\u6bd4\u4f8b\u4e0e\u5b83\u4eec\u4f7f\u7528\u7684\u6587\u4ef6\u7ed3\u6784\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u6d4b\u91cf\u7ed3\u679c\u4f3c\u4e4e\u652f\u6301\u8fd9\u4e00\u7406\u5ff5\u3002\u5f53\u7136\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u60a8\u4f7f\u7528\u7684\u7cfb\u7edf\u9009\u62e9\u7684\u6027\u80fd\u6743\u8861\u3002\n**\u5728SSD\u4e2d\uff0c\u6bcf\u6b21\u5199\u5165\u90fd\u4f1a\u5bfc\u81f4\u6574\u4e2a512K\u6570\u636e\u5757\u7684\u6e05\u9664\u91cd\u5199\u5468\u671f\u3002\u56e0\u6b64\uff0c\u8f83\u5c0f\u7684\u5199\u5165\u53ef\u80fd\u4f1a\u5728\u9a71\u52a8\u5668\u4e0a\u5f15\u8d77\u4e0d\u6210\u6bd4\u4f8b\u7684\u7ffb\u8f6c\u3002\u7531\u4e8e\u5bf9\u6570\u636e\u5757\u91cd\u5199\u7684\u56fa\u5b9a\u9650\u5236\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4e25\u91cd\u5f71\u54cd\u5b83\u4eec\u7684\u4f7f\u7528\u5bff\u547d\u3002\n\u8fd9\u91cc\u662f\u539f\u59cb\u7684\u65e5\u5fd7\u7ed3\u6784\u5316\u5408\u5e76\u6811\u8bba\u6587\u3002\u5728\u6211\u770b\u6765\uff0c\u8fd9\u786e\u5b9e\u6709\u70b9\u96be\u8ddf\u4e0a\u3002\n\u9664\u4e86\u540d\u79f0\u548c\u5bf9\u5199\u5165\u541e\u5410\u91cf\u7684\u5173\u6ce8\u4e4b\u5916\uff0c\u636e\u6211\u6240\u77e5\uff0cLSM\u548c\u65e5\u5fd7\u7ed3\u6784\u5316\u6587\u4ef6\u7cfb\u7edf\u4e4b\u95f4\u6ca1\u6709\u592a\u591a\u5173\u7cfb\u3002\n\u4eca\u5929\u4f7f\u7528\u7684\u5e38\u89c4\u6587\u4ef6\u7cfb\u7edf\u503e\u5411\u4e8e\u201c\u65e5\u5fd7\u8bb0\u5f55\u201d\uff0c\u4f8b\u5982ext3\u3001ext4\u3001hfs\u7b49\u90fd\u662f\u57fa\u4e8e\u6811\u7684\u65b9\u6cd5\u3002\u4fe1\u606f\u8282\u70b9\u7684\u56fa\u5b9a\u9ad8\u5ea6\u6811\u8868\u793a\u76ee\u5f55\u7ed3\u6784\uff0c\u65e5\u5fd7\u7528\u4e8e\u9488\u5bf9\u6545\u969c\u60c5\u51b5\u63d0\u4f9b\u4fdd\u62a4\u3002\u5728\u8fd9\u4e9b\u5b9e\u73b0\u4e2d\uff0c\u65e5\u5fd7\u662f\u903b\u8f91\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u4f1a\u8bb0\u5f55\u5185\u90e8\u5143\u6570\u636e\u3002\u8fd9\u662f\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\u3002\n\u65e5\u5fd7\u7ed3\u6784\u6587\u4ef6\u7cfb\u7edf\u5728\u95ea\u5b58\u4ecb\u8d28\u4e0a\u5e7f\u6cdb\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5177\u6709\u8f83\u5c0f\u7684\u5199\u5165\u653e\u5927\u3002\u968f\u7740\u6587\u4ef6\u7f13\u5b58\u5f00\u59cb\u5728\u66f4\u4e00\u822c\u7684\u60c5\u51b5\u4e0b\u4e3b\u5bb0\u8bfb\u53d6\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5e76\u4e14\u5199\u5165\u6027\u80fd\u53d8\u5f97\u66f4\u52a0\u5173\u952e\uff0c\u5b83\u4eec\u4e5f\u53d7\u5230\u4e86\u66f4\u591a\u7684\u5173\u6ce8\u3002\n\u5728\u65e5\u5fd7\u7ed3\u6784\u5316\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u6570\u636e\u53ea\u5199\u5165\u4e00\u6b21\uff0c\u76f4\u63a5\u5199\u5165\u65e5\u5fd7\uff0c\u8be5\u65e5\u5fd7\u88ab\u8868\u793a\u4e3a\u6309\u65f6\u95f4\u987a\u5e8f\u524d\u8fdb\u7684\u7f13\u51b2\u533a\u3002\u5b9a\u671f\u5bf9\u7f13\u51b2\u533a\u8fdb\u884c\u5783\u573e\u6536\u96c6\uff0c\u4ee5\u5220\u9664\u5197\u4f59\u5199\u5165\u3002\u4e0eLSM\u7c7b\u4f3c\uff0c\u65e5\u5fd7\u7ed3\u6784\u6587\u4ef6\u7cfb\u7edf\u7684\u5199\u5165\u901f\u5ea6\u66f4\u5feb\uff0c\u4f46\u8bfb\u53d6\u901f\u5ea6\u6bd4\u57fa\u4e8e\u6811\u7684\u53cc\u91cd\u5199\u5165\u6587\u4ef6\u7cfb\u7edf\u6162\u3002\u540c\u6837\uff0c\u5982\u679c\u6709\u5927\u91cfRAM\u53ef\u4f9b\u6587\u4ef6\u7f13\u5b58\u4f7f\u7528\uff0c\u6216\u8005\u4ecb\u8d28\u4e0d\u80fd\u5f88\u597d\u5730\u5904\u7406\u9002\u5f53\u7684\u66f4\u65b0\uff0c\u5c31\u50cf\u95ea\u5b58\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u8fd9\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002", "note_en": "It\u2019s nearly a decade since Google released its \u2018Big Table\u2019 paper. One of the many cool aspects of that paper\u00a0was the file organisation it uses. The approach is more generally known as the Log Structured Merge Tree, after  this 1996 paper, although the algorithm described there differs quite significantly from most real-world implementations.\n LSM is now used in a number of\u00a0products as the main file organisation strategy. HBase, Cassandra, LevelDB, SQLite, even MongoDB 3.0 comes with an optional LSM engine, after it\u2019s acquisition of Wired Tiger.\n What makes LSM trees interesting is their\u00a0departure from binary tree style\u00a0file organisations that have dominated the space for decades. LSM seems almost counter intuitive\u00a0when you first look at\u00a0it, only making sense when you closely consider how files work in modern, memory heavy systems.\n  In a nutshell LSM trees are designed to provide better write throughput than traditional B+ tree or  ISAM approaches. They do this by removing the need to perform dispersed,\u00a0update-in-place operations.\n So why is this a good idea? At its core it\u2019s the old problem of\u00a0disks being slow for random operations,\u00a0but fast when accessed sequentially. A gulf exists between these two types of access, regardless of whether the disk is magnetic or solid state or even, although to a lesser extent, main memory.\n The figures in this ACM report  here/ here\u00a0make the point well. They show that,\u00a0somewhat counter intuitively, sequential disk access is faster than randomly accessing\u00a0main memory. More relevantly they also show sequential access to disk, be it magnetic or SSD, to be at least three orders of magnitude faster than\u00a0random IO. This means random operations are to be avoided. Sequential access is\u00a0well worth designing for.\n So with this in mind lets consider a little thought experiment: if we are interested in write throughput, what is the best method to use?\u00a0A good\u00a0starting point is\u00a0to\u00a0simply append data to a file. This approach, often termed\u00a0logging, journaling or a heap file, is fully sequential so provides very fast write performance equivalent to theoretical disk speeds (typically 200-300MB/s per drive).\n Benefiting from\u00a0both simplicity and performance log/journal\u00a0based approaches have rightfully become  popular in many big data tools. Yet they have an obvious downside. Reading arbitrary data from a log\u00a0will be far more time consuming than writing to it, involving a reverse chronological scan, until the required key is found.\n This means\u00a0logs are only really applicable to\u00a0simple workloads, where\u00a0data is either accessed in its entirety, as in the write-ahead log of most databases, or by a known offset, as in simple messaging products like Kafka.\n So we need more than just a journal to efficiently perform more\u00a0complex read workloads like key based access or a range search. Broadly speaking there are four\u00a0approaches that can help us here: binary search, hash, B+ or external.\n Search Sorted File: save data to a file,\u00a0sorted by key. If data has defined widths use Binary search. If not\u00a0use a\u00a0page index + scan.\n Hash: split the data into buckets using a hash function, which can later be used to direct\u00a0reads.\n  External file: leave the data as a log/heap and create a separate\u00a0hash or tree index into it.\n All these approaches improve read performance significantly ( n-&gt;O(log(n)) in most). Alas these structures add order and that order impedes write performance, so our high speed\u00a0journal file is lost along the way. You can\u2019t have your cake and eat it I guess.\n  An insight that is worth making is that all\u00a0four of the above options impose some form of\u00a0overarching structure on the data.\n Data is deliberately and specifically placed around the file system so the index can quickly find it again\u00a0later. It\u2019s this structure that makes navigation quick. Alas the\u00a0structure must of course be honoured as data is written. This is where we start to degrade write performance by adding in random disk access.\n There are a couple of specific issues. Two IOs are needed for each write, one to read the page and one to write it back. This wasn\u2019t the case with our log/journal file which could do it in one.\n Worse though, we now need to update the structure of the hash or B+ index. This means updating specific parts of the file system. This is known as update-in-place and requires slow, random IO.\u00a0 This point is important:\u00a0in-place approaches like this scatter-gun the file system performing update-in-place*. This is limiting.\n One common solution is to use approach (4) A index into a journal \u2013 but keep the index in memory. So, for example, a Hash Table can be\u00a0used to map keys to the position (offset) of the latest value in a journal file (log). This approach actually works pretty\u00a0well as\u00a0it compartmentalises random IO to something relatively small: the key-to-offset mapping, held in memory. Looking up a value is then\u00a0only a single IO.\n On the other hand there are scalability limits, particularly if you have lots of small values. If your values were just say simple numbers then the index would be larger than the data file itself. Despite this the\u00a0pattern is a sensible compromise which is used in many products from Riak through to Oracle Coherence.\n So this brings us on to Log Structured Merge Trees. LSMs take a different approach to the four above. They can be fully disk-centric, requiring little in memory storage for efficiency, but also hang\u00a0onto much of the write performance we would tie to a simple journal file. The one downside is slightly poorer read performance when compared to say a B+Tree.\n In essence they do everything they can to make disk access\u00a0sequential. No scatter-guns here!\n *A number of tree structures exist which\u00a0do not require update-in-place. Most popular is the\u00a0 append-only Btree, also know as the copy-on-write tree. These work by overwriting\u00a0the tree structure, sequentially,\u00a0at\u00a0the end of\u00a0the file each\u00a0time a write occurs. Relevant parts of the old tree structure, including the top level node, are orphaned. Through this method\u00a0update-in-place is avoided as the tree sequentially redefines itself over time. This method does however come\u00a0at the cost: rewriting the structure on every write is\u00a0verbose. It\u00a0creates a significant amount of write amplification which is a\u00a0downside unto itself.\n   Conceptually the base LSM tree is fairly\u00a0simple. Instead of having one big index structure (which will either\u00a0scatter-gun the file system or add significant write amplification) batches of writes are saved, sequentially, to a set of smaller index files. So each\u00a0file contains a batch of changes covering a short period of time. Each file\u00a0is sorted before it is written so searching it later will be fast. Files are immutable; they are\u00a0never updated. New updates go into new files. Reads inspect all files.\u00a0Periodically files\u00a0are merged together to\u00a0keep the number of files down.\n Lets look at this in a little more detail. When updates arrive\u00a0they are added to an in-memory buffer, which is usually held as a tree (Red-Black etc) to preserve\u00a0key-ordering. This \u2018memtable\u2019 is replicated on disk as a write-ahead-log in most implementations, simply for recovery purposes. When the memtable fills the sorted data\u00a0is flushed to a new\u00a0file on disk. This process repeats as more and more writes come in. Importantly the system is only doing sequential IO as files are not edited. New entries\u00a0or edits simply create successive files (see fig above).\n So as more data comes into the system, more and more of these immutable, ordered files are created. Each one\u00a0representing a small, chronological subset of changes, held sorted.\n As old files are not updated duplicate entries are created to supersede previous records\u00a0(or removal markers). This creates some redundancy initially.\n Periodically the system performs a  compaction.\u00a0Compaction selects multiple files and merges them together, removing any duplicated updates or deletions (more on how this works later). This is important both to remove the aforementioned redundancy but, more importantly, to keep a handle on the read performance which degrades as the number of files increases. Thankfully, because the files are sorted, the process of merging the files is quite efficient.\n When a read operation is requested the system first checks the in memory buffer (memtable). If the key is not found\u00a0the various files will be inspected one by one, in reverse chronological order, until the key is found. Each file is held sorted so it is navigable. However reads will become slower and slower as the number of files increases, as each one needs to be inspected. This is a problem.\n So\u00a0reads in LSM trees are slower than their in-place brethren. Fortunately there are\u00a0a couple of tricks which can make the pattern performant. The most common approach is to\u00a0hold a\u00a0page-index in memory. This provides a lookup which gets you \u2018close\u2019 to your target key. You scan from there as the data is sorted.  LevelDB,  RocksDB\u00a0and BigTable do this with a block-index held at the end of each file. This often works better than straight binary search as it allows the use of variable length fields and is\u00a0better suited to\u00a0compressed data.\n Even with per-file indexes read operations will still slow as the number of files increases. This is kept in check by periodically merging files together. Such compactions keep the number of files,\u00a0and hence\u00a0read performance, within acceptable bounds.\n Even with compaction reads will still need to visit many files. Most implementations void this through the use of a\u00a0 Bloom filter. Bloom filters are a memory efficient way of working out whether a file contains a key.\n So from a \u2018write\u2019 perspective; all writes are batched up and written   only in sequential chunks. There is an additional, periodic IO penalty from compaction rounds. Reads however have\u00a0the potential to touch a\u00a0large number of files when looking up a single row (i.e. scatter-gun on read). This is simply the way the algorithm works. We\u2019re trading random IO on write for random IO on read. This trade off is\u00a0sensible if we can use software tricks like bloom filters or hardware tricks like large file caches to optimise read performance.\n   To keep LSM reads relatively fast it\u2019s important to\u00a0manage-down the number of files, so lets look more deeply at compaction. The process is a bit like generational garbage collection:\n When a certain number of files have been created, say five\u00a0files, each with 10 rows, they are merged into a\u00a0single file, with 50 rows (or maybe slightly less) .\n This process continues with more 10 row files being created. These are merged into 50 row files every time the fifth file fills up.\n Eventually there are five 50 row files. At this point the five\u00a050 row files are merged into one 250\u00a0row file. The process continues creating larger and larger files. See fig.\n The aforementioned issue with this general approach is the large number of files that are created: all must be searched, individually, to read a result (at least in the worst case).\n   Newer implementations, such as those in\u00a0LevelDB, RocksDB and Cassandra, address this problem by implementing a level-based, rather than size-based, approach to compaction. This reduces the number of files that must be consulted for\u00a0the worst case read, as well as reducing the relative impact of a single compaction.\n  1. Each level can contain a number of files and is guaranteed, as a whole, to not have overlapping keys within it. That is to say the keys are partitioned across the available files.\u00a0Thus\u00a0to find a key in a certain level only one file needs to be consulted.\n The first level is a special case where the above property does not hold. Keys can span\u00a0multiple files.\n 2. Files are merged into upper levels\u00a0one file at a time. As a level fills, a single file is plucked from it and merged into the level above creating space for more data to be added. This is slightly different to the base-approach where\u00a0several similarly sized files are merged into a single,\u00a0larger one.\n These changes mean\u00a0the level-based\u00a0approach\u00a0spreads the impact of compaction over time as well as requiring less total space. It also has better read performance. However the total IO is higher for most workloads meaning some of the simpler write-oriented workloads will not see benefit.\n  So LSM trees sit in the middle-ground between a journal/log file and a traditional single-fixed-index such as a B+ tree or Hash index. They provide\u00a0a mechanism for managing a set of smaller, individual index files.\n By managing a group of indexes, rather than a single one, the LSM method\u00a0trades\u00a0the\u00a0expensive random IO associated with update-in-place in B+ or Hash indexes for fast, sequential IO.\n The price being paid is\u00a0that reads have to address a large number of index files rather than just the one. Also there is additional IO cost for compaction.\n If that\u2019s still a little murky there are some other good\u00a0descriptions\u00a0 here and  here.\n   We\u2019ve seen that LSM\u2019s have better write performance albeit a cost. LSM has some other benefits though. The SSTables (the sorted files) a\u00a0LSM tree creates are immutable. This makes the locking semantics over them much simpler. Generally the only resource that is contended is the memtable. This is in contrast to singular trees which require\u00a0elaborate locking mechanisms to manage changes at different levels.\n So ultimately the question is likely to be about how write-oriented expected\u00a0workloads are. If you care about write performance the savings LSM gives are likely to be\u00a0a big deal. The big internet companies seem pretty settled on this subject. Yahoo, for  example, reports a steady progression from read-heavy to read-write workloads, driven largely by the increased ingestion of event logs and mobile data. Many traditional database products still seem to favour more read-optimised file structures though.\n As with Log Structured file systems [see footnote] the key argument stems from the increasing availability of memory. With more memory available reads are naturally optimised through\u00a0large file caches provided by the operating system. Write performance (which memory doesn\u2019t improve with more) thus becomes\u00a0the dominant concern. So put another way, hardware advances are doing more for read performance than they are\u00a0for writes. Thus it makes sense to select a write-optimised file structure.\n Certainly LSM implementations such as LevelDB and Cassandra regularly provide better write performance than single-tree\u00a0based approaches ( here and  here respectively).\n  There has been a fair bit of further work building on the LSM approach. Yahoo developed a system called  Pnuts\u00a0which combines LSM with B trees\u00a0and  demonstrates\u00a0better performance.\u00a0I haven\u2019t seen\u00a0openly available implementations of this algorithm though. IBM and Google have done more\u00a0recent work in\u00a0a similar vein, albeit via a different  path. There are also related\u00a0approaches which have similar properties but retain an overarching structure. These include  Fractal Trees\u00a0and  Stratified Trees.\n This is of course just one alternative. Databases utilise a huge range of subtly different options. An increasing number of databases offer pluggable\u00a0engines for different workloads.\u00a0 Parquet is a popular alternative for HDFS and pushes in pretty much the opposite direction (aggregation performance via\u00a0a columnar format). MySQL \u00a0has a storage abstraction which is pluggable with\u00a0a number of different engines such as\u00a0 Toku\u2018s fractal tree based\u00a0index. This is also available for\u00a0MongoDB. Mongo 3.0 includes the  Wired Tiger engine which provides both\u00a0B+ &amp; LSM approaches along with the legacy engine. Many relational databases have configurable\u00a0index structures that utilise different file organisations.\n It\u2019s also worth\u00a0considering the hardware being used. Expensive solid state disks, like FusionIO, have better random write performance. This suits update-in-place approaches. Cheaper SSDs and mechanical drives are better suited to LSM. LSM\u2019s avoid the small random access patters that thrash SSDs into oblivion**.\n LSM is not without it critics though. It\u2019s biggest problem, like GC, is the collection phases and the effect they have on precious IO. There is an interesting discussion of some of these on  this hacker news thread.\n So if you\u2019re looking at data products, be it BDB\u00a0vs. LevelDb, Cassandra vs.\u00a0MongoDb you may tie some proportion of their relative performance back to the file structures they use.  Measurements appear to back this philosophy. Certainly it\u2019s worth being aware\u00a0of the performance tradeoffs being selected\u00a0by the systems you use.\n   **In SSDs each write incurs a clear-rewrite cycle for a\u00a0whole 512K block. Thus small writes can induce a disproportionate amount of churn on the drive. With fixed limits on block rewrites this can significantly affect their life.\n  The original Log Structured Merge Tree paper  here. It\u00a0is a little\u00a0hard to follow in my opinion.\n  Other than the name, and a focus on write throughput, there isn\u2019t that much relation between LSM and log structured file systems as far as I can see.\n Regular filesystems used today tend to be \u2018Journaling\u2019, for example ext3, ext4, HFS etc are\u00a0tree-based approaches. A fixed height tree of inodes represent the directory structure and a journal is used to protect against failure conditions. In these implementations the journal is logical, meaning it only internal\u00a0metadata will be journaled. This is for performance reasons.\n Log structured file systems are widely used on flash media as they have less write amplification. They are getting more press too as file caching starts to dominate read workloads in more general situations and write performance is becoming more critical.\n In log structured file systems data is written only once, directly to a journal which is\u00a0 represented \u00a0as a chronologically advancing buffer. The buffer is garbage collected periodically to remove redundant writes. Like LSM\u2019s the log structured file system will write faster, but read slower than its dual-writing, tree based counterpart. Again this is\u00a0acceptable where there is lots of RAM available to feed the file cache\u00a0or the media doesn\u2019t deal well with update in place, as is the case with\u00a0flash.", "posttime": "2020-06-15 06:05:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ed3\u6784\u5316,structured,\u6587\u4ef6", "title": "\u65e5\u5fd7\u7ed3\u6784\u5316\u5408\u5e76\u6811(2015)", "title_en": "Log Structured Merge Trees (2015)", "transed": 1, "url": "http://www.benstopford.com/2015/02/14/log-structured-merge-trees/", "via": "", "real_tags": ["\u7ed3\u6784\u5316", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "160f45328a3e67e289fbc31aded8fb7b.jpg", "infoid": 1006583, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8a79\u59c6\u65af\u00b7\u5361\u6885\u9686\u5728\u300a\u963f\u51e1\u8fbe\u300b(2009)\u4e0a\u662010\u5468\u5e74\u4e4b\u9645\u56de\u7b54\u5f71\u8ff7\u63d0\u95ee", "note_en": "James Cameron answering fan questions for the 10th anniversary of the release of Avatar (2009)", "posttime": "2020-06-15 06:05:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u963f\u51e1\u8fbe,cameron,\u5361\u6885\u9686", "title": "\u8a79\u59c6\u65af\u00b7\u5361\u6885\u968610\u5e74\u540e\u5173\u4e8e\u300a\u963f\u51e1\u8fbe\u300b\u7684\u95ee\u7b54", "title_en": "James Cameron Q&A on Avatar 10 years later", "transed": 1, "url": "https://www.youtube.com/watch?v=l6yExegrnr4", "via": "", "real_tags": ["\u963f\u51e1\u8fbe", "cameron", "\u5361\u6885\u9686"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006582, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5e2e\u52a9\u65b0\u51a0\u80ba\u708e\u671f\u95f4\u7684\u6bcf\u4e00\u4e2a\u4eba\uff0c\u65af\u666e\u6797\u683c\u53d1\u653e\u4e86\u5927\u91cf\u514d\u8d39\u6559\u79d1\u4e66\u3002\u8fd9\u5f88\u68d2\uff0c\u4f46\u4ed6\u4eec\u7684\u7f51\u9875\u5e76\u4e0d\u662f\u8d85\u7ea7\u53cb\u597d\u7684\uff0c\u5e0c\u671b\u4f60\u4e0b\u8f7d\u4e00\u4e9bExcel\u8868\u683c\u6765\u5f04\u6e05\u695a\u4ed6\u4eec\u63d0\u4f9b\u7684\u662f\u4ec0\u4e48\u3002\n\u8fd9\u4e2a\u7f51\u9875\u5e0c\u671b\u80fd\u66f4\u5bb9\u6613\u5730\u8bbf\u95ee\u6240\u6709\u8fd9\u4e9b\u77e5\u8bc6\u3002\u4e0d\u7528\u8c22\u3002", "note_en": "To help support everyone during Covid-19,  Springer has released a ton of free textbooks. This is great, but their web page for this is not super friendly, and expects you to  download some Excel sheet to figure out what they have on offer.\n  This web page hopes to make it easier to access  all this knawledge. You\u2019re welcome.", "posttime": "2020-06-15 06:04:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u514d\u8d39,\u65af\u666e\u6797,textbooks,\u65b0\u51a0", "title": "\u6765\u81ea\u65af\u666e\u6797\u683c\u7684\u514d\u8d39\u6559\u79d1\u4e66\uff0c\u5206\u7c7b", "title_en": "Free Textbooks from Springer, Categorised", "transed": 1, "url": "https://hnarayanan.github.io/springer-books/", "via": "", "real_tags": ["\u514d\u8d39", "\u65af\u666e\u6797", "textbooks", "\u65b0\u51a0"]}, {"category": "", "categoryclass": "", "imagename": "f284756e94c235bdedc3e8c6a24924b6.jpg", "infoid": 1006581, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f9b\u514b\u83b1\u00b7\u4f0a\u59c6\u662f\u8036\u9c81\u5927\u5b66\u7684\u7814\u7a76\u751f\uff0c\u4e5f\u662f\u8036\u9c81\u6cd5\u5b66\u9662\u4fe1\u606f\u793e\u4f1a\u9879\u76ee\u7684\u5b66\u751f\u7814\u7a76\u5458\u3002\n\u50cf\u65e0\u6570\u7f8e\u56fd\u4f01\u4e1a\u4e00\u6837\uff0c\u79d1\u6280\u516c\u53f8\u6700\u8fd1\u4e00\u76f4\u5728\u5c55\u793a\u4ed6\u4eec\u5bf9\u79cd\u65cf\u6b63\u4e49\u7684\u652f\u6301\uff0c\u4ed6\u4eec\u7684\u7f51\u7ad9\u548c\u793e\u4ea4\u5a92\u4f53\u4e0a\u5145\u65a5\u7740\u632f\u594b\u4eba\u5fc3\u7684\u9ed1\u4eba\u751f\u547d\u4e5f\u662f\u547d(Black Lives Matter)\u7684\u4fe1\u606f\u3002\n\u4e0e\u5176\u4ed6\u7f8e\u56fd\u4f01\u4e1a\u4e0d\u540c\u7684\u662f\uff0c\u79d1\u6280\u884c\u4e1a\u5b58\u5728\u201c\u4e3b\u4eba\u201d\u548c\u201c\u5974\u96b6\u201d\u7684\u95ee\u9898\u3002\n\u8fd9\u5c31\u662f\u8bb8\u591a\u79d1\u6280\u516c\u53f8\u6240\u8bf4\u7684\u8f6f\u4ef6\u7ec4\u4ef6-\u201c\u4e3b\u201d\u548c\u201c\u4ece\u201d\u88ab\u5199\u5165\u8ba1\u7b97\u673a\u4ee3\u7801\u4e2d-\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u63a7\u5236\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u3002\u4e0d\u662f\u201c\u63a7\u5236\u8005\u201d\u548c\u201c\u8ddf\u968f\u8005\u201d\uff0c\u4e5f\u4e0d\u662f\u201c\u7ba1\u7406\u8005\u201d\u548c\u201c\u5de5\u4eba\u201d\u3002\u662f\u5426\u5e94\u8be5\u8981\u6c42\u975e\u88d4\u7f8e\u56fd\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u7f16\u5199\u4e3b\u8fdb\u7a0b\u547d\u4ee4\u4ece\u5c5e\u8fdb\u7a0b\u7684\u4ee3\u7801\uff1f\n\u591a\u5e74\u6765\uff0c\u5bf9\u79d1\u6280\u884c\u4e1a\u4f7f\u7528\u4e3b/\u4ece\u672f\u8bed\u7684\u62c5\u5fe7\u4e00\u76f4\u5728\u915d\u917f\u4e4b\u4e2d\u30022003\u5e74\uff0c\u6d1b\u6749\u77f6\u53bf\u8981\u6c42\u5546\u8d29\u505c\u6b62\u4f7f\u7528\u5b83\u3002\u4e00\u4e9b\u516c\u53f8\u505a\u51fa\u4e86\u6539\u53d8\uff0c\u53e6\u4e00\u4e9b\u516c\u53f8\u5219\u6ca1\u6709\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5e94\u8be5\u628a\u91cd\u70b9\u653e\u5728\u62d2\u7edd\u7684\u516c\u53f8\u4e0a\u5462\uff1f\n\u56e0\u4e3a\u8f6f\u4ef6\u96c6\u6210\u3002\u4eca\u5929\uff0c\u6ca1\u6709\u4e00\u5bb6\u516c\u53f8\u751f\u4ea7\u6240\u6709\u7684\u8f6f\u4ef6\u7ec4\u4ef6\u3002\u5404\u516c\u53f8\u901a\u529b\u5408\u4f5c\u3002\u65e0\u8bba\u8f6f\u4ef6\u9879\u76ee\u4e2d\u7684\u4e00\u4e2a\u53c2\u4e0e\u8005\u591a\u4e48\u5e0c\u671b\u907f\u514d\u4f7f\u7528\u4e3b/\u4ece\u7ed3\u6784\uff0c\u4e0e\u53e6\u4e00\u4e2a\u53c2\u4e0e\u8005\u4e00\u8d77\u5de5\u4f5c\u901a\u5e38\u610f\u5473\u7740\u6c42\u52a9\u4e8e\u516c\u5171\u7f16\u7801\u8bed\u8a00\u3002\u8fd9\u610f\u5473\u7740\u201c\u975e\u4ece\u5c5e\u4ee3\u7801\u201d\u548c\u201c\u4ece\u5c5e\u4ee3\u7801\u201d\u4e4b\u95f4\u6ca1\u6709\u771f\u6b63\u7684\u533a\u522b\u3002\n\u4ee5\u6d41\u884c\u7684\u5f00\u6e90\u8f6f\u4ef6\u9879\u76eeKubernetes\u4e3a\u4f8b\uff0c\u5b83\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u5728\u4e91\u4e2d\u8f7b\u677e\u5b89\u5168\u5730\u8fd0\u884c\u3002Kubernetes\u660e\u767d\u4e86\uff1aKubernetes\u6ca1\u6709\u63d0\u5230\u201c\u5974\u96b6\u201d\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u201c\u590d\u5236\u54c1\u201d\u548c\u201c\u5de5\u4eba\u201d\uff0c\u751a\u81f3\u201c\u5974\u624d\u201d\u3002\u4f46\u662f\u5b83\u7684\u4ee3\u7801\u5e93\u4ecd\u7136\u5305\u542b200\u591a\u884c\u4f7f\u7528\u201c\u4ece\u201d\u7684\u4ee3\u7801\u3002\u56e0\u4e3a\u5b83\u7684\u4ee3\u7801\u5fc5\u987b\u4e0e\u5176\u4ed6\u4eba\u5bf9\u8bdd\uff0c\u6240\u4ee5\u5373\u4f7f\u662fKubernetes\u4e5f\u4e0d\u80fd\u5b8c\u5168\u907f\u514d\u4f7f\u7528\u672f\u8bed\u3002\nPython\uff0c\u4eba\u5de5\u667a\u80fd\u548c\u673a\u5668\u5b66\u4e60\u7684\u4e8b\u5b9e\u4e0a\u7684\u8bed\u8a00\uff0c\u57282018\u5e74\u91c7\u53d6\u884c\u52a8\u6d88\u9664\u4e86\u8fd9\u79cd\u8bed\u8a00\u3002\u4e0d\u662f\u6ca1\u6709\u4e89\u8bae\u7684\u3002\u5f00\u6e90\u8f6f\u4ef6\u56e2\u961f\u901a\u5e38\u4ee5\u51c6\u6c11\u4e3b\u7684\u65b9\u5f0f\u505a\u51fa\u51b3\u7b56\u30022018\u5e74\u672b\uff0cPython\u7684\u521b\u59cb\u4eba\u4e0d\u5f97\u4e0d\u4ecb\u5165\uff0c\u56e0\u4e3a\u4e00\u4e9b\u5f00\u53d1\u8005\u652f\u6301\u7ee7\u7eed\u4f7f\u7528\u4e3b/\u4ece\u672f\u8bed\u3002\u5176\u4ed6\u4eba\u60f3\u629b\u5f03\u201c\u5974\u96b6\u201d\uff0c\u4f46\u5bf9\u201c\u4e3b\u4eba\u201d\u7684\u53ef\u63a5\u53d7\u6027\u8fdb\u884c\u4e86\u8fa9\u8bba\u3002\n\u201c\u5e08\u7236\u201d\u672c\u8eab\u5c31\u6709\u5f88\u591a\u5185\u6db5\u3002\u201cMaster\u201d\u6765\u81ea\u62c9\u4e01\u8bed\u201cmagister\u201d\uff0c\u610f\u601d\u662f\u67d0\u4e2a\u9886\u57df\u7684\u4e13\u5bb6\uff0c\u6bd4\u5982\u6c34\u7ba1\u5de5\u5927\u5e08\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u8bcd\u4e5f\u4e0e\u5974\u96b6\u5236\u8054\u7cfb\u5728\u4e00\u8d77\u3002(\u6b63\u662f\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u8036\u9c81\u5927\u5b66\u57282016\u5e74\u5c06\u5176\u5bc4\u5bbf\u5b66\u9662\u7ba1\u7406\u4eba\u5458\u7684\u5934\u8854\u4ece\u201c\u7855\u58eb\u201d\u6539\u4e3a\u201c\u5b66\u9662\u6821\u957f\u201d\u3002)\u3002\u8003\u8651\u5230\u201cmaster\u201d\u7684\u4e0d\u540c\u542b\u4e49\uff0c\u4e00\u4e9b\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u4ecd\u7136\u4f7f\u7528\u8fd9\u4e2a\u8bcd\uff0c\u5b83\u4e5f\u4e0eKubernetes\u4e00\u8d77\u4f7f\u7528\u3002\n\u56e0\u6b64\uff0c\u79d1\u6280\u884c\u4e1a\u9700\u8981\u5171\u540c\u884c\u52a8\u8d77\u6765\uff0c\u6452\u5f03\u4e3b/\u4ece\u672f\u8bed\u3002\u5982\u679c\u6709\u8db3\u591f\u591a\u7684\u4e3b\u8981\u53c2\u4e0e\u8005\u540c\u610f\u91c7\u53d6\u8fd9\u4e00\u4e3e\u63aa\uff0c\u79bb\u7fa4\u8005\u5c06\u9700\u8981\u6548\u4eff\uff0c\u5426\u5219\u5c31\u4f1a\u5192\u7740\u9650\u5236\u5176\u4ea7\u54c1\u4e0e\u884c\u4e1a\u6807\u51c6\u517c\u5bb9\u6027\u7684\u98ce\u9669\u3002\n\u5bf9\u4e1a\u754c\u6765\u8bf4\uff0c\u7b2c\u4e00\u6b65\u5c06\u662f\u8fbe\u6210\u5e7f\u6cdb\u7684\u5171\u8bc6\uff0c\u4ece\u6574\u4e2a\u6e90\u4ee3\u7801\u4e2d\u5220\u9664\u4e3b/\u4ece\u63cf\u8ff0\uff0c\u5e76\u7528\u5546\u5b9a\u7684\u8bcd\u8bed\u53d6\u800c\u4ee3\u4e4b\u3002\u662f\u7684\uff0c\u6709\u4e9b\u4ee3\u7801\u53ef\u80fd\u4f1a\u5d29\u6e83\uff1a\u6709\u65f6\u60a8\u5fc5\u987b\u5feb\u901f\u79fb\u52a8\u5e76\u7834\u574f\u4e00\u4e9b\u4e1c\u897f\u3002\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c(Mark Zuckerberg)\u8ba9\u8fd9\u53e5\u8bdd\u51fa\u540d\u4e86-\u5982\u679c\u4ed6\u516c\u5f00\u5ba3\u5e03Facebook\u5c06\u5728\u5176\u516c\u5171\u548c\u79c1\u4eba\u6e90\u4ee3\u7801\u4e2d\u53d6\u4ee3\u4e3b/\u4ece\uff0c\u4ed6\u5c06\u6781\u5927\u5730\u63a8\u52a8\u79d1\u6280\u884c\u4e1a\u6446\u8131\u4e3b/\u4ece\u672f\u8bed\u3002\n\u79d1\u6280\u884c\u4e1a\u4e5f\u5e94\u8be5\u627f\u8bfa\u5728\u6240\u6709\u672a\u6765\u7684\u8f6f\u4ef6\u548c\u786c\u4ef6\u4e2d\u7981\u6b62\u4f7f\u7528\u4e3b/\u4ece\u672f\u8bed\u3002\u8fc7\u65f6\u7684\u60ef\u4f8b\u4e0d\u4ec5\u4ec5\u662f\u8f6f\u4ef6\u95ee\u9898\u3002\u6839\u636e\u786c\u76d8\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u786c\u76d8\u901a\u5e38\u5206\u4e3a\u4e3b\u786c\u76d8\u548c\u4ece\u786c\u76d8\u3002\u5927\u578b\u6570\u636e\u5b58\u50a8\u516c\u53f8\u5e0c\u6377(Seagate)\u63d0\u4f9b\u6709\u5173\u5982\u4f55\u201c\u89e3\u51b3\u4e3b/\u4ece\u95ee\u9898\u201d\u7684\u5728\u7ebf\u5e2e\u52a9\u3002\u5982\u679c\u4ed6\u4eec\u8fd8\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u7f8e\u56fd\u516c\u53f8\u73b0\u5728\u5c31\u5e94\u8be5\u5f00\u59cb\u8fdb\u884c\u8fd9\u6837\u7684\u6545\u969c\u6392\u9664\u3002\n\u8bb8\u591a\u79d1\u6280\u516c\u53f8\u516c\u5f00\u8868\u793a\u6709\u5174\u8da3\u4ece\u4ee3\u8868\u4e0d\u8db3\u7684\u7fa4\u4f53\u4e2d\u62db\u8058\u5458\u5de5\uff0c\u4f46\u4ed6\u4eec\u5728\u6e90\u4ee3\u7801\u4e2d\u4f7f\u7528\u201c\u4e3b\u201d\u548c\u201c\u4ece\u201d\u53d1\u51fa\u4e86\u4ec0\u4e48\u4fe1\u53f7\u5462\uff1f\u8fd9\u4e9b\u516c\u53f8\u5e94\u8be5\u52a0\u500d\u52aa\u529b\u62db\u8058\u9ed1\u4eba\u5458\u5de5\uff0c\u5efa\u7acb\u6280\u672f\u57f9\u8bad\u4e2d\u5fc3\uff0c\u5e76\u5728\u9ed1\u4eba\u793e\u533a\u63d0\u4f9b\u514d\u8d39\u7684\u7f16\u7801\u7a0b\u5e8f-\u5e76\u6d88\u9664\u4ee4\u4eba\u538c\u6076\u7684\u672f\u8bed\u3002", "note_en": "Sinclair Im, a graduate student at Yale University, is a student fellow of the Information Society Project at Yale Law School.\n Like countless U.S. businesses, tech companies lately have been showing their support for racial justice, filling their websites and social media feeds with uplifting Black Lives Matter messages.\n  Unlike other U.S. businesses, the tech industry has a \u201cmaster\u201d and \u201cslave\u201d problem.\n That\u2019s what many tech companies call software components \u2014 \u201cmaster\u201d and \u201cslave\u201d is written into the computer code \u2014 wherein one process controls another. Not \u201ccontroller\u201d and \u201cfollower,\u201d say, or \u201cmanager\u201d and \u201cworker.\u201d Should an African American software developer be required to write code wherein a master process commands slaves?\n  Concern about the tech industry\u2019s use of master/slave terminology has been simmering for years. In  2003, Los Angeles County asked vendors to stop using it. Some companies made changes; others did not. So why shouldn\u2019t the focus stay on the companies that refuse?\n   Because of software integration. Today no single company makes every software component. Companies work together. No matter how much one participant in a software project might wish to avoid using the master/slave construction, working with another participant often means resorting to the common coding language. That means there is no real distinction between \u201cnon-slave code\u201d and \u201cslave code.\u201d\n Consider the popular  open-source software project Kubernetes, which allows applications to run easily and securely in the cloud. Kubernetes gets it: Instead of referring to \u201cslaves,\u201d Kubernetes uses \u201creplicas\u201d and \u201cworkers\u201d and even \u201cminions.\u201d But its code repository still contains more than 200 lines that use \u201cslave.\u201d Because its code must talk to others, even Kubernetes can\u2019t completely avoid the terminology.\n  Python, the de facto language for artificial intelligence and machine learning,  moved to eliminate the language in 2018. Not without controversy. Open-source software groups often make decisions quasi-democratically. In late 2018, the founder of Python had to intervene because some developers supported continuing to use master/slave terminology. Others wanted to jettison \u201cslave\u201d but debated the acceptability of \u201cmaster.\u201d\n  By itself, \u201cmaster\u201d has many connotations. \u201cMaster,\u201d from the Latin \u201cmagister,\u201d can mean someone skilled in a certain field, like a master plumber. But the word is also of course associated with slavery. (It was for this reason that Yale University changed the title of the administrators of its residential colleges from \u201cmaster\u201d to \u201chead of college\u201d in  2016.) Given the various meanings of \u201cmaster,\u201d some software developers still employ the word, and it is used with Kubernetes as well.\n For that reason, the tech industry needs to act collectively to abandon master/slave terminology. If enough major players agree to make the move, outliers would need to follow suit or risk limiting their products\u2019 compatibility with the industry standard.\n  The first step would be for the industry to reach a widespread consensus to excise master/slave descriptions from the entire body of source code and substitute agreed-upon words to take their place. Yes, some code might break: Sometimes you have to move fast and break things. Mark Zuckerberg made that phrase famous \u2014 he could give a tremendous boost to ridding the tech industry of master/slave terminology if he publicly announced that Facebook was replacing master/slave in its public and private source code.\n  The tech industry should also commit to barring master/slave terminology in all future software \u2014 and hardware. The outdated convention is not just a software problem. Hard drives, depending on how they are used, are often categorized into masters and slaves. The large data storage company Seagate offers  online help on how to \u201ctroubleshoot master/slave problems.\u201d If they haven\u2019t already done it, U.S. companies should start such troubleshooting now.\n Many tech companies publicize their interest in hiring from underrepresented groups, but what signal do they send by using \u201cmaster\u201d and \u201cslave\u201d in their source code? The companies should redouble efforts to recruit black employees, set up tech training centers and offer free coding programs in black communities \u2014 and get rid of repellent terminology.", "posttime": "2020-06-15 06:04:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e3b\u4eba,talks", "title": "\u6709\u4e00\u4e2a\u884c\u4e1a\u6bcf\u5929\u90fd\u5728\u8c08\u8bba\u4e3b\u4eba\u548c\u5974\u96b6\u3002\u5b83\u9700\u8981\u505c\u6b62", "title_en": "There\u2019s an industry that talks daily about masters and slaves. It needs to stop", "transed": 1, "url": "https://www.washingtonpost.com/opinions/2020/06/12/tech-industry-has-an-ugly-master-slave-problem/", "via": "", "real_tags": ["\u4e3b\u4eba", "talks"]}, {"category": "", "categoryclass": "", "imagename": "b6f62725351854648dd4b4a0314eebbd.jpeg", "infoid": 1006579, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TornadoVM\u662f\u4e00\u4e2a\u7f16\u7a0b\u548c\u6267\u884c\u6846\u67b6\uff0c\u7528\u4e8e\u5728\u5f02\u6784\u786c\u4ef6(\u591a\u6838CPU\u3001GPU\u548cFPGA)\u4e0a\u5378\u8f7d\u548c\u8fd0\u884cJVM\u5e94\u7528\u7a0b\u5e8f\u3002\n\u4e3aTornadoVM\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5355\u4e00\u6e90\u4ee3\u7801\u7684-\u4f7f\u7528\u76f8\u540c\u7684\u4ee3\u7801\u6765\u8868\u793a\u4e3b\u673a\u4ee3\u7801\u548c\u52a0\u901f\u4ee3\u7801\u3002\n\u53bb\u5e743\u6708\uff0c\u6211\u5728\u4f26\u6566QCon\u505a\u4e86\u4e00\u6b21\u5173\u4e8eTornadoVM\u7684\u6f14\u8bb2\uff0c\u6211\u5728\u4f1a\u4e0a\u4ecb\u7ecd\u4e86TornadoVM\u5e76\u89e3\u91ca\u4e86\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u4eceQCon London\u6f14\u8bb2\u5c55\u5f00\uff0c\u5e76\u8be6\u7ec6\u4ecb\u7ecd\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u901a\u8fc7\u5728\u5f02\u6784\u786c\u4ef6\u4e0a\u81ea\u52a8\u8fd0\u884cJava\u6765\u4ece\u4e2d\u53d7\u76ca\u3002\n\u9996\u5148\uff0c\u6211\u5c06\u63d0\u4f9bTornadoVM\u9879\u76ee\u548c\u67b6\u6784\u7684\u603b\u4f53\u6982\u8ff0\u3002\u5176\u6b21\uff0c\u6211\u4f1a\u7528\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u89e3\u91caTornadoVM\u7684\u4e0d\u540c\u90e8\u5206\u3002\n\u6ca1\u6709\u4e00\u79cd\u5355\u4e00\u7684\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6700\u9002\u5408\u9ad8\u6548\u5730\u6267\u884c\u6240\u6709\u7c7b\u578b\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u8fd9\u5bfc\u81f4\u4e86\u8fd1\u5e74\u6765\u5f02\u6784\u786c\u4ef6\u7684\u6fc0\u589e\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7f16\u5199\u7684\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u53ef\u80fd\u6df7\u5408\u4e86\u8ba1\u7b97\u5143\u7d20\u3002\n\u8fd9\u4e9b\u5143\u7d20\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e0d\u540c\u7684\u786c\u4ef6\u7279\u6027\u3002\u786c\u4ef6\u5f02\u6784\u6027\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u5728\u964d\u4f4e\u80fd\u8017\u7684\u540c\u65f6\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\n\u8fd9\u4e9b\u7528\u4e8e\u8ba1\u7b97\u7684\u65b0\u578b\u5f02\u6784\u8bbe\u5907\u5305\u62ec\u591a\u6838CPU\u3001\u56fe\u5f62\u5904\u7406\u5355\u5143(GPU)\u548c\u73b0\u573a\u53ef\u7f16\u7a0b\u95e8\u9635\u5217(FPGA)\u3002\u8fd9\u79cd\u591a\u6837\u6027\u662f\u5de8\u5927\u7684\uff0c\u4f46\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u6709\u6548\u5730\u5bf9\u8fd9\u4e9b\u65b0\u8bbe\u5907\u8fdb\u884c\u7f16\u7a0b\u3002\n\u6700\u597d\u7684\u4f8b\u5b50\u662f\u4e24\u79cd\u6700\u6d41\u884c\u7684\u5f02\u6784\u7f16\u7a0b\u8bed\u8a00CUDA\u548cOpenCL\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u516c\u5f00\u4e86API\u4e2d\u7684\u51e0\u4e2a\u4f4e\u7ea7\u529f\u80fd\uff0c\u4f7f\u5f97\u975e\u4e13\u5bb6\u7528\u6237\u5f88\u96be\u4f7f\u7528\u5b83\u4eec\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u7a81\u51fa\u663e\u793a\u4e86OpenCL 3.0\u6807\u51c6\u4e2d\u7684\u4ee5\u4e0b\u5f15\u7528\uff1a\nOpenCL\u7684\u76ee\u6807\u662f\u60f3\u8981\u7f16\u5199\u53ef\u79fb\u690d\u4f46\u9ad8\u6548\u4ee3\u7801\u7684\u4e13\u4e1a\u7a0b\u5e8f\u5458\u3002[.]\u3002\u56e0\u6b64\uff0cOpenCL\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f4e\u7ea7\u786c\u4ef6\u62bd\u8c61\u548c\u4e00\u4e2a\u6846\u67b6\u6765\u652f\u6301\u7f16\u7a0b\uff0c\u5e76\u4e14\u66b4\u9732\u4e86\u5e95\u5c42\u786c\u4ef6\u7684\u8bb8\u591a\u7ec6\u8282\u3002\n\u524d\u9762\u7684\u8bed\u53e5\u4e5f\u9002\u7528\u4e8eCUDA\u548c\u7c7b\u4f3c\u7684\u5e76\u884c\u7f16\u7a0b\u6a21\u578b\u3002\u5728\u5de5\u4e1a\u548c\u5b66\u672f\u754c\uff0c\u5f00\u53d1\u4eba\u5458\u503e\u5411\u4e8e\u4f7f\u7528\u9ad8\u7ea7\u7684\u3001\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e9b\u8bed\u8a00\u901a\u5e38\u5728\u6258\u7ba1\u8fd0\u884c\u65f6\u73af\u5883(\u5982Java\u3001R\u3001Python\u548cJavaScript)\u4e0a\u6267\u884c\u3002\u5c3d\u7ba1\u8bb8\u591a\u7a0b\u5e8f\u5458\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u6837\u7684\u7f16\u7a0b\u8bed\u8a00\u5df2\u7ecf\u9002\u7528\u4e8e\u5728\u5f02\u6784\u786c\u4ef6\u4e0a\u900f\u660e\u5730\u6267\u884c\uff0c\u4f46\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u5b83\u4eec\u7684\u652f\u6301\u8981\u4e48\u975e\u5e38\u6709\u9650\uff0c\u8981\u4e48\u4e0d\u5b58\u5728\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8TornadoVM\uff0c\u5b83\u662f\u5f02\u6784\u8ba1\u7b97\u4f4e\u7ea7\u5e76\u884c\u7f16\u7a0b\u8bed\u8a00\u7684\u66ff\u4ee3\u65b9\u6848\u3002\u6211\u4eec\u5c06\u5c55\u793a\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u5728\u4e0d\u9700\u8981\u4e86\u89e3\u5e76\u884c\u8ba1\u7b97\u4f53\u7cfb\u7ed3\u6784\u6216\u5e76\u884c\u7f16\u7a0b\u6a21\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u591a\u6838CPU\u548cGPU\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0cTornadoVM\u662f\u4e00\u4e2a\u9488\u5bf9JVM\u8bed\u8a00\u7684\u5e76\u884c\u7f16\u7a0b\u6846\u67b6\uff0c\u5b83\u53ef\u4ee5\u900f\u660e\u5730\u3001\u52a8\u6001\u5730\u5c06Java\u5b57\u8282\u7801\u5378\u8f7d\u5230OpenCL\u4e2d\uff0c\u5e76\u5728\u5f02\u6784\u786c\u4ef6\u4e0a\u6267\u884c\u751f\u6210\u7684\u4ee3\u7801\u3002\u6b64\u5916\uff0cTornadoVM\u96c6\u6210\u4e86\u4e00\u4e2a\u4f18\u5316\u8fd0\u884c\u65f6\uff0c\u53ef\u4ee5\u91cd\u7528\u8bbe\u5907\u7f13\u51b2\u533a\u5e76\u4fdd\u5b58\u8de8\u8bbe\u5907\u7684\u6570\u636e\u4f20\u8f93\uff0c\u4ee5\u53ca\u4e00\u4e2a\u65b0\u7684\u52a8\u6001\u5e94\u7528\u7a0b\u5e8f\u91cd\u65b0\u914d\u7f6e\u7ec4\u4ef6\uff0c\u7528\u4e8e\u8de8\u8ba1\u7b97\u8bbe\u5907\u6267\u884c\u5b9e\u65f6\u4efb\u52a1\u8fc1\u79fb\u3002\n\u4e0b\u56fe\u663e\u793a\u4e86TornadoVM\u9879\u76ee\u7684\u9ad8\u7ea7\u6982\u8ff0\u3002\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0cTornadoVM\u7531\u5206\u5c42\u7684\u5fae\u5185\u6838\u8f6f\u4ef6\u67b6\u6784\u7ec4\u6210\uff0c\u5176\u4e2d\u6838\u5fc3\u7ec4\u4ef6\u662fTornadoVM\u6267\u884c\u5f15\u64ce\u3002\u5728\u9876\u5c42\uff0cTornadoVM\u5411\u5f00\u53d1\u4eba\u5458\u516c\u5f00API\u3002\u8fd9\u662f\u56e0\u4e3aTornadoVM\u5f53\u524d\u4e0d\u68c0\u6d4b\u5e76\u884c\u6027(\u81ea\u52a8\u5e76\u884c\u5316)\u3002\u76f8\u53cd\uff0c\u5b83\u5229\u7528\u5e76\u884c\u6027\u3002\u56e0\u6b64\uff0cTornadoVM\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u8bc6\u522b\u54ea\u4e9b\u65b9\u6cd5\u6216\u51fd\u6570\u662f\u5728GPU\u548cFPGA\u4e0a\u8fd0\u884c\u7684\u5019\u9009\u65b9\u6cd5\u6216\u51fd\u6570\u3002\n\u6b64\u5916\uff0cTornadoVM\u5305\u542b\u6838\u5fc3\u8fd0\u884c\u65f6\uff0c\u5b83\u5206\u4e3a\u51e0\u4e2a\u7ec4\u4ef6\uff1aa)\u5e26\u6709\u65b0\u5b57\u8282\u7801\u751f\u6210\u5668\u7684\u6570\u636e\u6d41\u4f18\u5316\u5668\uff1bb)\u8fd0\u884c\u65b0\u5b57\u8282\u7801\u7684\u5c0f\u5b57\u8282\u7801\u89e3\u91ca\u5668\uff1b\u4ee5\u53cac)JIT\u7f16\u8bd1\u5668\u548c\u5185\u5b58\u7ba1\u7406\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u91cd\u70b9\u4ecb\u7ecdAPI\u3001\u8fd0\u884c\u65f6\u4ee5\u53ca\u5bf9JIT\u7f16\u8bd1\u5668\u7684\u603b\u4f53\u6982\u8ff0\u3002\n\u6700\u540e\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0cTornadoVM\u76ee\u524d\u4f7f\u7528\u6700\u65b0\u7684JDK(U242)\u548cJVMCI\u652f\u6301Java8\uff0c\u5e76\u901a\u8fc7GraalVM19.3.0\u652f\u6301OpenJDK 11\u3002TornadoVM\u8fd8\u4e0eOpenCL 1.2\u517c\u5bb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u591a\u79cd\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\u5982GPU(AMD\u548cNVIDIA)\u3001FPGA(Xilinx\u548cIntel)\u3001\u96c6\u6210GPU(\u5982MariARM\u548cIntel HD Graphics)\u4ee5\u53ca\u591a\u6838CPU\u3002\n\u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u5b9e\u9645\u4f8b\u5b50\u6765\u8be6\u7ec6\u8bf4\u660e\u4e00\u4e0b\u3002\u5982\u4e0b\u6240\u793a\uff0c\u6211\u5c55\u793a\u4e86\u5982\u4f55\u5728\u591a\u6838CPU\u3001GPU\u548c\u96c6\u6210GPU\u4e0a\u4f7f\u7528TornadoVM\u7f16\u7a0b\u548c\u8fd0\u884c\u77e9\u9635\u4e58\u6cd5\u3002\u77e9\u9635\u4e58\u6cd5\u662f\u7528\u6765\u8bf4\u660eTornadoVM\u4e2d\u4e0d\u540c\u6982\u5ff5\u7684\u7b80\u5355\u4ee3\u7801\uff0c\u5b83\u6784\u6210\u4e86\u8bb8\u591a\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u5e94\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u3002\n\u6ce8\u610f\uff1a\u867d\u7136TornadoVM\u662f\u7528Java\u7f16\u7a0b\u7684\uff0c\u4f46\u662f\u8ba1\u7b97\u5185\u6838\u53ef\u4ee5\u901a\u8fc7GraalVM(Truffle)\u7684Polyglot\u7f16\u7a0b\u6846\u67b6\u5411\u5176\u4ed6JVM\u8bed\u8a00\u516c\u5f00\u3002\n\u7c7b\u8ba1\u7b97{public static void matrix(Final Float[]A\uff0cFinal Float[]B\uff0cFinal Float[]C\uff0cFinal int Size){For(int i=0\uff1bi&lt\uff1bsize\uff1bi++){For(int j=0\uff1bj&lt\uff1bsize\uff1bj++){Float sum=0.0f\uff1bfor(int k=0\uff1bk&lt\uff1bsize\uff1bk++)sum+=A[(i*size)+k]*B[(k*size)+\u3002C[(i*\u5927\u5c0f)+j]=SUM\uff1b}\u3002\n\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u4e86\u7528\u4e8eGPU\u8ba1\u7b97\u7684\u7ecf\u5178\u548c\u89c4\u8303\u7684\u77e9\u9635\u4e58\u6cd5\u793a\u4f8b\u3002\u8981\u4f7f\u7528TornadoVM\u52a0\u901f\u6b64\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u9996\u5148\u5fc5\u987b\u6ce8\u91ca\u53ef\u4ee5\u5e76\u884c\u5316\u7684\u5faa\u73af\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u5168\u5e76\u884c\u5316\u6700\u5916\u9762\u7684\u4e24\u4e2a\u5faa\u73af\uff0c\u5176\u4e2d\u8fed\u4ee3\u4e4b\u95f4\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\u3002\u6211\u4eec\u901a\u8fc7\u4f7f\u7528TornadoVM\u6ce8\u91ca@Parallel\u6765\u6ce8\u91ca\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u7c7b\u8ba1\u7b97{public static void matrix(Final Float[]A\uff0cFinal Float[]B\uff0cFinal Float[]C\uff0cFinal int Size){For(@Parallel int i=0\uff1bi&lt\uff1bsize\uff1bi++){For(@Parallel int j=0\uff1bj&lt\uff1bsize\uff1bj++){Float sum=0.0f\uff1bfor(int k=0\uff1bk&lt\uff1bsize\uff1bk++)sum+=A[(i*size)+k]*B[(k\u3002C[(i*\u5927\u5c0f)+j]=SUM\uff1b}\u3002\n@Parallel\u6ce8\u91ca\u88abTornadoVM JIT\u7f16\u8bd1\u5668(\u5c06Java\u5b57\u8282\u7801\u8f6c\u6362\u4e3aOpenCL)\u7528\u4f5c\u63d0\u793a\u3002\nTornadoVM JIT\u7f16\u8bd1\u5668\u4e0d\u5f3a\u5236\u5e76\u884c\u5316\u3002\u76f8\u53cd\uff0c\u5b83\u68c0\u67e5\u5e26\u6ce8\u91ca\u7684\u5faa\u73af\u662f\u5426\u53ef\u4ee5\u5e76\u884c\u5316\uff0c\u5e76\u66ff\u6362OpenCL\u4e2d\u7b49\u4ef7\u7684\u5e76\u884c\u7d22\u5f15(get_global_id(Dimension))\u7684for-\u5faa\u73af\u3002\u5982\u679cfor\u5faa\u73af\u4e0d\u80fd\u5e76\u884c\u5316\uff0cTornadoVM\u5c31\u9000\u51fa\u5e76\u6267\u884c\u987a\u5e8f\u4ee3\u7801\u3002\n\u6b64\u5916\uff0c\u5f00\u53d1\u4eba\u5458\u5fc5\u987b\u786e\u5b9a\u8981\u52a0\u901f\u54ea\u4e9bJava\u65b9\u6cd5\u3002\u4e3a\u6b64\uff0cTornadoVM\u516c\u5f00\u4e86\u4e00\u4e2a\u57fa\u4e8e\u4efb\u52a1\u7684\u8f7b\u91cf\u7ea7API\uff0c\u8be5API\u8bbe\u7f6e\u8981\u52a0\u901f\u7684\u65b9\u6cd5\u5217\u8868-\u5176\u4e2d\u6bcf\u4e2a\u65b9\u6cd5\u5bf9\u5e94\u4e00\u4e2a\u4efb\u52a1\u3002\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u4efb\u52a1\u8c03\u5ea6\u5668\u521b\u5efa\u4e00\u7ec4\u4efb\u52a1\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u5982\u4f55\u4e3a\u77e9\u9635\u4e58\u6cd5\u793a\u4f8b\u521b\u5efa\u4efb\u52a1\u8ba1\u5212\uff1a\n\u6211\u4eec\u521b\u5efa\u4e00\u4e2aTask-Schedule\u5bf9\u8c61(T)\u3002\u5728\u5176\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4efb\u52a1\u7684\u540d\u79f0\u3002\u53ef\u4ee5\u662f\u4efb\u4f55\u540d\u5b57\u3002\u6b64\u540d\u79f0\u5bf9\u4e8e\u66f4\u6539\u8981\u6267\u884c\u6240\u6709\u4efb\u52a1\u7684\u8bbe\u5907\u975e\u5e38\u6709\u7528\u3002\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u7ec4\u4efb\u52a1\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\uff0c\u4f46\u5b83\u53ef\u4ee5\u662f\u4efb\u610f\u6570\u91cf\u7684\u4efb\u52a1\u3002\n\u4efb\u52a1\u7684\u53c2\u6570\u5982\u4e0b\uff1a\u6211\u4eec\u8fd8\u4f20\u9012\u4e00\u4e2a\u540d\u79f0(\u5728\u672c\u4f8b\u4e2d\u4e3a\u201ct0\u201d)\u548c\u5bf9\u6211\u4eec\u60f3\u8981\u52a0\u901f\u7684\u65b9\u6cd5\u7684\u5f15\u7528(\u5728\u672c\u4f8b\u4e2d\uff0c\u5b83\u6307\u5411Java\u7c7bCompute\u4e2d\u7684matrixMultiply\u65b9\u6cd5\u3002\u5176\u4f59\u53c2\u6570\u5bf9\u5e94\u4e8e\u8be5\u65b9\u6cd5\u7684\u5b9e\u9645\u53c2\u6570\u96c6\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u6307\u51fa\u8981\u4e0e\u4e3b\u673a(CPU)\u540c\u6b65\u7684\u53d8\u91cf\u6216\u6570\u7ec4\u3002\u8fd9\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cGPU\u548cFPGA\u4e0d\u4e0eCPU\u5171\u4eab\u76f8\u540c\u7684\u5185\u5b58\u3002\u56e0\u6b64\uff0cTornadoVM\u8fd0\u884c\u65f6\u5c06\u4e3a\u76ee\u6807\u8bbe\u5907\u4e0a\u7684\u6240\u6709\u53d8\u91cf\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u6267\u884c\u4ece\u4e3b\u673a(CPU)\u5230\u8bbe\u5907(\u4f8b\u5982\uff0cGPU)\u7684\u6570\u636e\u4f20\u8f93\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u6700\u7ec8\u83b7\u5f97\u7ed3\u679c\uff0c\u6211\u4eec\u901a\u8fc7TornadoVMAPI\u8c03\u7528stream Out\u540c\u6b65\u53d8\u91cf\u5217\u8868\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u58f0\u660e\u4e86\u6211\u4eec\u7684\u4efb\u52a1\uff0c\u5e76\u5c06\u5b83\u4eec\u653e\u5728\u53ef\u4ee5\u6267\u884c\u5e76\u884c\u5316\u7684\u4ee3\u7801\u4e2d\u3002\u8981\u4f7f\u7528TornadoVM\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u5728TaskSchedule\u5bf9\u8c61\u4e0a\u8c03\u7528`ecute()`\u65b9\u6cd5\u3002\n\u8fd9\u662f\u4e00\u4e2a\u963b\u585e\u8c03\u7528\uff0c\u5b83\u5c06\u521b\u5efa\u6240\u6709OpenCL\u7f13\u51b2\u533a\uff0c\u521b\u5efa\u6267\u884c\u56fe\uff0c\u5c06\u6240\u6709\u4efb\u52a1\u4eceJava\u5b57\u8282\u7801\u7f16\u8bd1\u4e3aOpenCL\uff0c\u6700\u540e\u5728\u76ee\u6807\u8bbe\u5907\u4e0a\u6267\u884c\u751f\u6210\u7684OpenCL\u7a0b\u5e8f\u3002\u6b64\u5916\uff0cTornadoVM\u53ef\u4ee5\u5c06\u8bb8\u591a\u65b9\u6cd5\u7ec4\u5408\u5728\u4e00\u4e2a\u7f16\u8bd1\u5355\u5143\u4e2d\u4e00\u8d77\u7f16\u8bd1\uff0c\u5e76\u5728\u540c\u4e00\u8bbe\u5907\u4e0a(\u4f8b\u5982\uff0c\u5728\u540c\u4e00GPU\u4e0a)\u6267\u884c\u3002\u8fd9\u4e3a\u4f18\u5316\u4e3b\u673a\u548c\u5f02\u6784\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u521b\u9020\u4e86\u673a\u4f1a\uff0c\u56e0\u4e3a\u5b83\u4eec\u901a\u5e38\u4e0d\u4e0e\u4e3b\u8981\u4e3b\u673a\u5171\u4eab\u5185\u5b58(\u9664\u975e\u8bbe\u5907\u662f\u96c6\u6210\u7684GPU\uff0c\u5982AMD APU\u3001ARM\u9a6c\u91cc\u6216\u82f1\u7279\u5c14HD\u56fe\u5f62GPU)\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u6e90\u4ee3\u7801\u4e2d\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55\u7279\u5b9a\u4e8e\u8bbe\u5907\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u6211\u4eec\u5171\u4eab\u5728\u591a\u6838CPU\u3001GPU\u548cFPGA\u4e0a\u8fd0\u884c\u7684\u76f8\u540c\u4ee3\u7801\u3002TornadoVM\u8fd0\u884c\u65f6\u548cJIT\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u67b6\u6784\u81ea\u52a8\u4f18\u5316\u4ee3\u7801\u3002\n\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u8fd0\u884c\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u3002\u6211\u5c06\u9996\u5148\u5411\u60a8\u5c55\u793a\u5982\u4f55\u8bbe\u7f6eTornadoVM\u73af\u5883\u3002\u5728Github\u4e0a\u6709\u4e00\u4e2a\u5b58\u50a8\u5e93\uff0c\u91cc\u9762\u6709\u6240\u6709\u8fd9\u4e9b\u793a\u4f8b\u3002\n\u6211\u4eec\u5c06\u4f7f\u7528Graal19.3.0\u4f5c\u4e3aJDK\u8fd0\u884cTornadoVM\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u7ecf\u5e38\u66f4\u65b0Graal\u7248\u672c\u3002Graal 20.x\u8ba1\u5212\u5728\u4eca\u5e74\u5e74\u5e95\u96c6\u6210\u5230TornadoVM\u4e2d\u3002\u8981\u6267\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u5047\u8bbe\u5b89\u88c5\u4e86OpenCL\u3002\u8bf7\u5728\u6b64\u5904\u67e5\u770b\u6240\u6709\u524d\u63d0\u6761\u4ef6\u3002\n$mkdir-p TornadoVM$cd TornadoVM$wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-19.3.0/graalvm-ce-java11-linux-amd64-19.3.0.tar.gz$TAR-XF graalvm-ce-java11-linux-amd64-19.3.0.tar.gz$export JAVA_HOME=$pwd/graalvm-ce-java11-19.3.0$git\u514b\u9686--\u6df1\u5ea61 https://github.com/beehive-lab/TornadoVM$cd TornadoVM\u3002$export path=$pwd/bin/bin\uff1a$path$export tornado_sdk=$pwd/bin/sdk$export CMAKE_ROOT=&lt\uff1b\u5c06\u8def\u5f84\u8bbe\u7f6e\u4e3aCMAKE root&gt\uff1b$make graal-jdk-11$export tornado_root=$PWD\n$git\u514b\u9686https://github.com/jjfumero/qconlondon2020-tornadovm$CD qconlondon2020-tornadovm/$export JAVA_HOME=/PATH/to/graalvm-ce-java11-19.3.0$export PATH=&#34\uff1b${PATH}\uff1a${TORNADO_ROOT}/bin/bin/&#34\uff1b##\u5148\u524d\u5b9a\u4e49\u7684$export tornado_sdk=${TORNADO_ROOT}/bin/sdk$export CLASSPATH=TARGET/TORNADO-1.0-SNAPSHOT.jar$MVN\u5168\u65b0\u5b89\u88c5\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u505a\u597d\u4e86\u6267\u884c\u793a\u4f8b\u7684\u4e00\u5207\u51c6\u5907\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u7814\u7a76TornadoVM\u4e2d\u53ef\u7528\u548c\u53ef\u89c1\u7684\u8bbe\u5907\u5f00\u59cb\u3002\n$Tornado--\u8bbe\u5907Tornado\u9a71\u52a8\u7a0b\u5e8f\u6570\u91cf\uff1a1\u8bbe\u5907\u603b\u6570\uff1a3 Tornado\u8bbe\u5907=0\uff1a0 NVIDIA CUDA--GeForce GTX 1050\u5168\u5c40\u5185\u5b58\u5927\u5c0f\uff1a3.9 GB\u672c\u5730\u5185\u5b58\u5927\u5c0f\uff1a48.0 KB\u5de5\u4f5c\u7ec4\u7ef4\u5ea6\uff1a3\u6700\u5927\u5de5\u4f5c\u7ec4\u914d\u7f6e\uff1a[1024,1024\uff0c64]Device OpenCL C\u7248\u672c\uff1aOpenCL C 1.2 Tornado Device=0\uff1a1\u82f1\u7279\u5c14(R)OpenCL--\u82f1\u7279\u5c14(R)\u9177\u777f(TM)i7-7700HQ CPU@2.80 GHz\u5168\u5c40\u5185\u5b58\u5927\u5c0f\uff1a31.0 GB\u672c\u5730\u5185\u5b58\u5927\u5c0f\uff1a32.0 KB\u5de5\u4f5c\u7ec4\u7ef4\u5ea6\uff1a3\u6700\u5927\u5de5\u4f5c\u7ec4\u914d\u7f6e\uff1a[8192,8192\uff0c8192]Device OpenCL C\u7248\u672c\uff1aOpenCL C 1.2 Tornado Device=0\uff1a2\u82f1\u7279\u5c14(R)OpenCL HD\u663e\u5361--\u82f1\u7279\u5c14(R)Gen9 HD\u663e\u5361NEO\u5168\u5c40\u5185\u5b58\u5927\u5c0f\uff1a24.8 GB\u672c\u5730\u5185\u5b58\u5927\u5c0f\uff1a64.0 KB\u5de5\u4f5c\u7ec4\u7ef4\u5ea6\uff1a3\u6700\u5927\u5de5\u4f5c\u7ec4\u914d\u7f6e\uff1a[256,256,256]\u8bbe\u5907OpenCL C\u7248\u672c\uff1aOpenCL C 2.0\u3002\n\u5c31\u6211\u7684\u60c5\u51b5\u800c\u8a00\uff0c\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u6709\u4e09\u4e2a\u8bbe\u5907\u53ef\u7528\uff1aNVIDIA GPU\u3001\u82f1\u7279\u5c14\u591a\u6838CPU\u548c\u82f1\u7279\u5c14\u9ad8\u6e05\u663e\u5361(\u96c6\u6210GPU)\u3002TornadoVM\u9ed8\u8ba4\u9009\u62e9\u8bbe\u59070\u3002\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u4efb\u52a1\u4e0e\u8bbe\u5907\u76f8\u5173\u8054\u6765\u66f4\u6539\u8bbe\u5907\u3002\u8ba9\u6211\u4eec\u4ece\u9ed8\u8ba4\u914d\u7f6e\u5f00\u59cb\u3002\n\u6b64\u7a0b\u5e8f\u6267\u884c\u77e9\u9635\u4e58\u6cd5100\u6b21\uff0c\u5e76\u62a5\u544a\u6bcf\u6b21\u8fed\u4ee3\u7684\u603b\u65f6\u95f4\u3002\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u6765\u6f14\u793a\u53d1\u751f\u4e86\u4ec0\u4e48-\u7a0d\u540e\u6211\u4eec\u5c06\u4f7f\u7528JMH\u8fdb\u884c\u9002\u5f53\u7684\u6027\u80fd\u6bd4\u8f83\u3002\n$Tornado qconlondon.\u77e9\u9635\u4e58\u6cd5512\u9f99\u5377\u98ce\u8ba1\u7b97MxM\u4e3a512x512\u603b\u65f6\u95f4\uff1a77568790(Ns)\uff0c0.0776(S)\u603b\u65f6\u95f4\uff1a3133182(Ns)\uff0c0.0031(S)\u603b\u65f6\u95f4\uff1a3126146(Ns)\uff0c0.0031(S)\u2026\u3002\n\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e00\u6b21\u8fed\u4ee3\u6bd4\u5176\u4f59\u8fed\u4ee3\u82b1\u8d39\u7684\u65f6\u95f4\u66f4\u957f-\u8fd9\u662f\u7531\u4e8eJIT\u7f16\u8bd1\u9884\u70ed\u9020\u6210\u7684\uff0c\u5f53\u6211\u4eec\u4f7f\u7528JMH\u65f6\uff0c\u5b83\u5c06\u6d88\u5931\u3002\n\u7b2c\u4e00\u6b21\u6267\u884c\u4efb\u52a1\u8c03\u5ea6\u65f6\uff0cTornadoVM\u8c03\u7528OpenCL JIT\u7f16\u8bd1\u5668\u4eceJava\u5b57\u8282\u7801\u4f18\u5316\u5e76\u751f\u6210OpenCL C\u4ee3\u7801\u3002\u7136\u540e\uff0c\u4e00\u65e6\u751f\u6210\u4e86\u4ee3\u7801\uff0cTornadoVM\u5c31\u4f1a\u5c06\u751f\u6210\u7684\u4ee3\u7801\u5b89\u88c5\u5728\u4ee3\u7801\u7f13\u5b58\u4e2d\uff0c\u5982\u679c\u5728\u8fd0\u884c\u65f6\u7684\u4efb\u4f55\u65f6\u5019\u518d\u6b21\u6267\u884c\u76f8\u540c\u7684\u4efb\u52a1\uff0c\u5219\u53ef\u4ee5\u91cd\u7528\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e3a\u786e\u4fddTornadoVM\u5728GPU(\u8bbe\u59070)\u4e0a\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u542f\u7528\u8c03\u8bd5\u4fe1\u606f\uff1a\n$tornado--debug qconlondon.MatrixMultiplex 512 tornado Computing MxM of 512x512\u4efb\u52a1\u4fe1\u606f\uff1as0.t0\u5e73\u53f0\uff1aNVIDIA CUDA\u8bbe\u5907\uff1aGeForce GTX 1050 CL_DEVICE_TYPE_GPU(\u53ef\u7528)dims\uff1a2\u5168\u5c40\u5de5\u4f5c\u504f\u79fb\uff1a[0\uff0c0]\u5168\u5c40\u5de5\u4f5c\u5927\u5c0f\uff1a[512,512]\u672c\u5730\u5de5\u4f5c\u5927\u5c0f\uff1a[32\uff0c32\uff0c1]\u3002\n\u592a\u68d2\u4e86\uff0cTornadoVM\u6b63\u5728NVIDIA GTX1050\u4e0a\u8fd0\u884c\u6211\u4eec\u7528\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684Java\u4ee3\u7801\u3002\u4f5c\u4e3a\u53c2\u8003\uff0c\u6211\u4eec\u8fd8\u8fd0\u884c\u987a\u5e8f\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e0d\u9700\u8981\u8c03\u7528TornadoVM JIT\u7f16\u8bd1\u5668\u6765\u52a0\u901f\u4ee3\u7801\u3002\u6211\u4eec\u5411\u7a0b\u5e8f\u4f20\u9012\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u8868\u793a\u8fd9\u4e00\u70b9\uff1a\n$Tornado qconlondon.\u77e9\u9635\u4e58\u6cd5512\u987a\u5e8f\u8ba1\u7b97512x512\u7684MxM\u603b\u65f6\u95f4\uff1a259398036(Ns)\uff0c0.2594(S)\u603b\u65f6\u95f4\uff1a247857535(Ns)\uff0c0.2479(S).\u3002\n\u6211\u4eec\u770b\u5230\u7684\u662f\uff0c\u5373\u4f7f\u4f7f\u7528TornadoVM JIT\u7f16\u8bd1\u5668\uff0c\u7b2c\u4e00\u6b21\u8fed\u4ee3\u7684\u901f\u5ea6\u4e5f\u8981\u5feb3.3\u500d\u3002\u7136\u540e\uff0c\u4ece\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u6bd4Java\u987a\u5e8f\u4ee3\u7801\u5feb80\u500d\u7684\u901f\u5ea6\u3002\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u4f7f\u7528Java JMH\u8fdb\u884c\u7684\u6027\u80fd\u6bd4\u8f83\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u66f4\u6539\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\u3002\u4f8b\u5982\uff0c\u8981\u5728\u82f1\u7279\u5c14\u96c6\u6210\u663e\u5361\u4e0a\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u9009\u9879\u6267\u884c\uff1a\n$tornado-Ds0.t0.device=0\uff1a2--debug qconlondon\u3002\u77e9\u9635\u4e58\u6cd5512\u9f99\u5377\u98ce\u8ba1\u7b97MxM\u5171512x512\u4efb\u52a1\u4fe1\u606f\uff1as0.t0\u5e73\u53f0\uff1a\u82f1\u7279\u5c14(R)OpenCL HD\u663e\u5361\u8bbe\u5907\uff1a\u82f1\u7279\u5c14(R)Gen9 HD Graphics neo CL_DEVICE_TYPE_GPU(\u53ef\u7528)dims\uff1a2\u5168\u5c40\u5de5\u4f5c\u504f\u79fb\uff1a[0\uff0c0]\u5168\u5c40\u5de5\u4f5c\u5927\u5c0f\uff1a[512,512]\u672c\u5730\u5de5\u4f5c\u5927\u5c0f\uff1a[16\uff0c16\u3002\n\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5f00\u59cb\u83b7\u5f97\u4e00\u4e9b\u6027\u80fd\u7ed3\u679c\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u901a\u8fc7Java\u987a\u5e8f\u5b9e\u73b0\u5728\u4e0d\u540cOpenCL\u8bbe\u5907\u4e0a\u8fd0\u884cTornadoVM\u65f6\uff0cTornadoVM\u7684\u52a0\u901f\u6bd4(\u8d8a\u9ad8\u8d8a\u597d)\u3002\u62a5\u544a\u7684\u52a0\u901f\u6bd4\u5bf9\u5e94\u4e8e\u4f7f\u7528Java JMH\u6846\u67b6\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u7684\u5e73\u5747\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u52a0\u901f\u6bd4\u5f88\u9ad8\uff0cy\u8f74\u4ee5\u5bf9\u6570\u523b\u5ea6\u8868\u793a\u3002\u6240\u6709\u4f7f\u7528JMH\u7684\u57fa\u51c6\u6d4b\u8bd5\u90fd\u5305\u542b\u5728\u4e0e\u793a\u4f8b\u76f8\u540c\u7684\u5b58\u50a8\u5e93\u4e2d\u3002\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u4e0eJava HotSpot\u76f8\u6bd4\uff0c\u8fd0\u884c\u5728\u5e26\u6709TornadoVM\u7684\u591a\u6838CPU\u4e0a\u53ef\u4ee5\u83b7\u5f973.6\u500d\u7684\u6027\u80fd\u3002\u5728GPU\u4e0a\u8fd0\u884c\u65f6\uff0c\u4e0e\u7528\u4e8e\u82f1\u7279\u5c14\u9ad8\u6e05\u663e\u5361\u548cNVIDIA 1050\u7684Java\u76f8\u6bd4\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u8fbe39\u500d\u548c270\u500d\u7684\u6027\u80fd\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u7b80\u8981\u4ecb\u7ecd\u4e86TornadoVM API\u4ee5\u53ca\u5982\u4f55\u5728\u7528\u6237\u7ea7\u522b\u4f7f\u7528TornadoVM\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u6df1\u5165\u4e00\u70b9\uff0c\u770b\u770bTornadoVM\u5982\u4f55\u5728\u76ee\u6807\u8bbe\u5907\u4e0a\u6267\u884c\u4ee3\u7801\u3002\n\u4efb\u52a1\u8c03\u5ea6\u7684\u5b9a\u4e49\u548c\u4eceTornadoVMAPI\u5bf9Execute\u65b9\u6cd5\u7684\u8c03\u7528\u5728\u5355\u4e2aJava\u7ebf\u7a0b(\u4f8b\u5982\uff0c\u4e3b\u7ebf\u7a0b)\u4e0a\u8fd0\u884c\u3002Execute\u65b9\u6cd5\u662f\u4e00\u4e2a\u963b\u585e\u8c03\u7528\uff0c\u5f53\u8be5\u65b9\u6cd5\u7684\u6267\u884c\u8fd4\u56de\u65f6\uff0c\u5b83\u4fdd\u8bc1\u5e76\u884c\u8bbe\u5907\u4e0a\u7684\u6267\u884c\u5df2\u7ecf\u5b8c\u6210\u3002\u5f53\u8c03\u7528Execute\u65b9\u6cd5\u65f6\uff0cTornadoVM\u9996\u5148\u6784\u5efa\u4e00\u4e2a\u6570\u636e\u6d41\u56fe\uff0c\u8be5\u56fe\u8868\u793a\u6570\u636e\u5982\u4f55\u8de8\u4efb\u52a1\u8c03\u5ea6\u5185\u7684\u4e0d\u540c\u4efb\u52a1\u8fdb\u884c\u901a\u4fe1\u3002\u6b64\u56fe\u7528\u4e8e\u4f18\u5316\u6570\u636e\u4f20\u8f93\u3002\n\u7136\u540e\uff0cTornadoVM\u751f\u6210\u65b0\u7684\u5b57\u8282\u7801(\u7528\u4e8e\u7f16\u6392\u76ee\u6807\u8bbe\u5907\u4e0a\u7684\u6267\u884c\u7684\u7b80\u5355\u6307\u4ee4\uff0c\u5982COPY_IN\u3001LAUNT\u3001COPY_OUT\u3001BALAR\u7b49)\u3002\u5f53\u4ee3\u7801\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6(\u901a\u8fc7\u542f\u52a8\u5b57\u8282\u7801)\uff0cTornadoVM\u8c03\u7528OpenCL JIT\u7f16\u8bd1\u5668\u5e76\u5c06\u8f93\u5165\u7684Java\u5b57\u8282\u7801\u4ece\u6bcf\u4e2a\u4efb\u52a1(\u6bcf\u4e2a\u8981\u52a0\u901f\u7684Java\u65b9\u6cd5)\u8f6c\u6362\u4e3a\u4f18\u5316\u7684OpenCL C\u4ee3\u7801\u3002\nTornadoVM\u6839\u636e\u76ee\u6807\u8bbe\u5907\u7684\u4e0d\u540c\u4e13\u95e8\u5904\u7406OpenCL C\u4ee3\u7801\uff0c\u8fd9\u610f\u5473\u7740\u4e3aGPU\u751f\u6210\u7684\u4ee3\u7801\u5bf9\u4e8eCPU\u548cFPGA\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u662f\u56e0\u4e3aOpenCL\u4ee3\u7801\u53ef\u4ee5\u8de8\u8bbe\u5907\u79fb\u690d\uff0c\u4f46\u6027\u80fd\u5e76\u4e0d\u7edf\u4e00\u3002\u56e0\u6b64\uff0cTornadoVM\u901a\u8fc7\u5bf9\u6bcf\u4e2a\u8bbe\u5907\u8fdb\u884c\u4e13\u95e8\u5316\u5e76\u5e94\u7528\u4e0d\u540c\u7684\u4f18\u5316\u6765\u63d0\u9ad8\u6027\u80fd\u3002\n\u6ce8\u610f\uff1aTornadoVM JIT\u7f16\u8bd1\u5668\u5728\u5355\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u56e0\u6b64\u5728\u7e41\u91cd\u7684\u8d1f\u8f7d\u4e0b\u53ef\u80fd\u4f1a\u8017\u5c3d\u7f16\u8bd1\u5668\u8d44\u6e90\uff0c\u6b63\u5982\u6211\u4eec\u5728HotSpot\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002\n\u7f16\u8bd1\u7684\u6700\u540e\u4e00\u6b65\u662f\u901a\u8fc7\u8c03\u7528OpenCL\u9a71\u52a8\u7a0b\u5e8f\u4ece\u4f18\u5316\u548c\u4e13\u7528\u7684OpenCL C\u4ee3\u7801\u7f16\u8bd1\u5230\u76ee\u6807\u5e73\u53f0\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5728NVIDIA GPU\u4e0a\u6267\u884c\uff0c\u6b64\u6b65\u9aa4\u5c06\u751f\u6210\u76f8\u5e94\u7684PTX\u4ee3\u7801\u3002\n\u4e00\u65e6\u751f\u6210\u5e76\u7f16\u8bd1\u4e86OpenCL\u4ee3\u7801\uff0cTornadoVM\u5c31\u4f1a\u5728\u76ee\u6807\u8bbe\u5907\u4e0a\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3a\u6b64\uff0cTornadoVM\u90e8\u7f72\u4e86\u8bb8\u591a\u7ebf\u7a0b\u6765\u8fd0\u884c\u5185\u6838\u3002\u8981\u90e8\u7f72\u7684\u7ebf\u7a0b\u6570\u91cf\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u8f93\u5165\u5927\u5c0f\u548c\u786c\u4ef6\u7279\u6027\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u524d\u9762\u5c55\u793a\u7684\u77e9\u9635\u4e58\u6cd5\u793a\u4f8b\u4f7f\u7528512\u00d7512\u4e2a\u7ebf\u7a0b\u7684\u5757\u90e8\u7f72\u5728GPU\u4e0a\u3002\u8fd9\u610f\u5473\u7740TornadoVM\u4ece\u7f16\u5199\u7684\u5355\u7ebf\u7a0bJava\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u4e86512x512\u4e2a\u7ebf\u7a0b\u5757\u3002\u5982\u679c\u76ee\u6807\u8bbe\u5907\u662f\u591a\u6838CPU\uff0c\u5219TornadoVM\u90e8\u7f72\u7684\u7ebf\u7a0b\u6570\u4e0e\u53ef\u7528\u7684\u6700\u5927CPU\u6838\u6570\u76f8\u540c\u3002\n\u5e76\u884c\u8bbe\u5907\u4e0a\u7684\u6267\u884c\u5b8c\u6210\u540e\uff0cTornadoVM\u5c06\u7ed3\u679c\u590d\u5236\u5230Java\u5806(\u901a\u8fc7\u5b57\u8282\u7801copy_out\u4f7f\u5176\u5bf9\u4e3b\u673a\u7aef\u53ef\u89c1)\uff0c\u6700\u540e\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9JVM\u4e2d\u7684\u4e3b\u7ebf\u7a0b\u3002\n\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2TornadoVM\u4e3a\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u7684\u5b57\u8282\u7801\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u4e86\u4f7f\u7528TornadoVM\u7684\u5b57\u8282\u7801\u7684\u8c03\u8bd5\u4fe1\u606f\u8fd0\u884c\u77e9\u9635\u4e58\u6cd5\u65f6\u7684\u7b80\u5316\u8f93\u51fa\uff1a\n$Tornado--printBytecodes qconlondon.MatrixMultiplication 512 Tornado VM\uff1aCOPY_IN[F@3e694b3f on NVIDIA--GeForce GTX 1050 VM\uff1aCOPY_IN[F@397fbdb on NVIDIA--GeForce GTX 1050 VM\uff1aCOPY_IN[F@33d512c1 on NVIDIA--GeForce GTX 1050 VM\uff1a\u542f\u52a8\u4efb\u52a1s0.t0\u3002\n\u6211\u4eec\u524d\u9762\u4ecb\u7ecd\u7684\u77e9\u9635\u4e58\u6cd5\u63a5\u6536\u4e09\u4e2a\u53c2\u6570(\u77e9\u9635A\u3001B\u548cC)\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u53d8\u91cf\uff0cTornadoVM\u6267\u884c\u4ece\u4e3b\u673a\u5230\u8bbe\u5907\u7684\u6570\u636e\u4f20\u8f93(COPY_IN)\u3002\u7136\u540e\uff0c\u5b83\u4f7f\u7528\u542f\u52a8\u5b57\u8282\u7801\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002\n\u56de\u60f3\u4e00\u4e0b\uff0c\u5728\u7b2c\u4e00\u6b21\u6267\u884c\u542f\u52a8\u65f6\uff0cTornadoVM\u8c03\u7528OpenCL JIT\u7f16\u8bd1\u5668\uff0c\u5728\u8be5\u7f16\u8bd1\u5668\u4e2d\uff0c\u4ee3\u7801\u9488\u5bf9\u6bcf\u4e2a\u8ba1\u7b97\u8bbe\u5907\u8fdb\u884c\u4e13\u95e8\u5316\u548c\u4f18\u5316\u3002\u6700\u540e\uff0cTornadoVM\u6267\u884c\u4ece\u8bbe\u5907\u5230\u4e3b\u8981\u4e3b\u673a\u7684\u590d\u5236(STREAM_OUT_BLOCKING)\u4ee5\u83b7\u5f97\u7ed3\u679c\u3002\n\u8ba9\u6211\u4eec\u6df1\u5165\u7814\u7a76TornadoVM\u751f\u6210\u7684OpenCL\u5185\u6838\u3002\u4f7f\u7528TornadoVM\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528--printKernel\u6807\u5fd7\u8c03\u8bd5\u548c\u68c0\u67e5\u751f\u6210\u7684\u5185\u6838\uff0c\u5982\u4e0b\u6240\u793a\uff1a\nTornadoVM\u5728\u4efb\u52a1\u8c03\u5ea6\u5185\u4e3a\u6bcf\u4e2a\u4efb\u52a1\u751f\u6210\u4e00\u4e2a\u5185\u6838\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u751f\u6210\u4e00\u4e2a\u540d\u4e3alookupBufferAddress\u7684\u5185\u6838\uff0c\u8be5\u5185\u6838\u5728VM\u5f15\u5bfc\u671f\u95f4\u6267\u884c\u3002\u8be5\u5185\u6838\u80cc\u540e\u7684\u539f\u56e0\u662f\uff0cTornadoVM\u53ea\u5206\u914d\u4e00\u4e2a\u5927\u7f13\u51b2\u533a\uff0c\u8be5\u7f13\u51b2\u533a\u5145\u5f53\u76ee\u6807\u8bbe\u5907\u4e0a\u7684\u5806\u3002\u4e3a\u6b64\uff0c\u5b83\u9700\u8981\u4e00\u4e2a\u6709\u6548\u7684\u6307\u9488\uff0c\u8be5\u6307\u9488\u5c06\u7528\u4f5c\u76ee\u6807\u8bbe\u5907\u7684\u57fa\u5730\u5740\uff0cTornadoVM\u53ef\u4ee5\u5728\u8be5\u8bbe\u5907\u4e2d\u6267\u884c\u6570\u636e\u4f20\u8f93\u3002lookupBufferAddress\u5185\u6838\u8fd4\u56de\u8fd9\u4e2a\u57fa\u6307\u9488\u3002\n\u7b2c\u4e8c\u4e2a\u5185\u6838\u5bf9\u5e94\u4e8eOpen\u3002\n..", "note_en": "TornadoVM is a programming and execution framework for offloading and running JVM applications on heterogeneous hardware (multi-core CPU, GPUs and FPGAs)\n    Applications written for TornadoVM are single-source -\u00a0 the same code is used to express the host code and the accelerated code\n    Last March, I gave a talk at QCon-London about TornadoVM, where I provided an introduction to TornadoVM and explained how it works. In this article, I expand from the QCon London talk, and I show more details about how developers can benefit from it by automatically running Java on heterogeneous hardware.\n  Firstly, I will provide\u00a0a general overview of the TornadoVM project and architecture. Secondly, I will explain different parts of TornadoVM with a practical example.\n         There is no single computer architecture that is best for executing all types of workloads efficiently. This leads to the proliferation of heterogeneous hardware in recent years which means that every system we program is likely to have a mix of computing elements.\n  Each of these elements has different hardware characteristics. Hardware heterogeneity enables programmers to improve the performance of their applications while decreasing energy consumption.\n  These new heterogeneous devices for computing include multi-core CPUs, Graphics Processing Units (GPUs), and Field Programmable Gate Arrays (FPGAs). This diversity is great, but we need a way to efficiently program these new devices.\n    A prime example is represented by the two most popular heterogeneous programming languages, CUDA and OpenCL. However, they expose several low-level features in the API, making them difficult to be used by non-expert users. As an example, I highlight the following quotation from the  OpenCL 3.0 standard:\n  The target of OpenCL is expert programmers wanting to write portable yet efficient code. [...] Therefore, OpenCL provides a low-level hardware abstraction plus a framework to support programming, and many details of the underlying hardware are exposed.\n  The previous statement also applies to CUDA and similar parallel programming models. Instead of using low-level programming languages, in industry and academia developers tend to use higher-level, object-oriented programming languages, typically executed on managed runtime environments, such as Java, R, Python, and JavaScript. Although many programmers might expect that such programming languages would have already been adapted for transparent execution on heterogeneous hardware, the reality is that their support is either very limited or absent.\n  In this article, we explore TornadoVM, an alternative to low-level parallel programming languages for heterogeneous computing. We show how developers can make use of multi-core CPUs and GPUs without any required knowledge about the parallel computing architectures or parallel programming models.\n  In a nutshell, TornadoVM is a parallel programming framework for JVM languages that can transparently and dynamically offload Java bytecodes into OpenCL, and execute the generated code on heterogeneous hardware. Additionally, TornadoVM integrates an optimizing runtime, that can reuse device buffers and save data transfers across devices, and a novel dynamic application reconfiguration component to perform live task migration across computing devices.\n    The following Figure shows a high-level overview of the TornadoVM project. As we can see, TornadoVM is composed of a layered and  microkernel software architecture, in which the core component is the TornadoVM execution engine. At the top level, TornadoVM exposes an API to the developers. This is because TornadoVM currently does not detect parallelism (auto-parallelization). Instead, it exploits parallelism. Therefore, TornadoVM needs a way to identify which methods or functions are candidates for running on GPUs and FPGAs.\n    Additionally, TornadoVM contains a core-runtime, which is divided into several components: a) the data flow optimizer with a new bytecode generator; b) a small bytecode interpreter to run the new bytecodes, and c) the JIT compiler and memory management.\u00a0 In this article, I will focus on the API, the runtime, and a general overview of the JIT compiler.\n  Finally, as the previous Figure points out, TornadoVM currently supports Java 8, using the latest JDK (u242) and JVMCI, and OpenJDK 11 via GraalVM 19.3.0. TornadoVM is also compatible with OpenCL 1.2, and this leads to run on a broad set of devices such as GPUs (AMD and NVIDIA), FPGAs (Xilinx and Intel), Integrated GPUs (such as Mali ARM and Intel HD Graphics) as well as multi-core CPUs.\n    Let&#39;s get into the details with a practical example. As follows, I show how to program and run matrix multiplication with TornadoVM on multi-core CPUs, GPUs and integrated GPUs. Matrix multiplication is an easy code to start with to illustrate different concepts in TornadoVM, and it constitutes the core of many machine learning and deep learning applications.\n  Note: although TornadoVM is programmed in Java,  compute kernels can be exposed to other JVM languages via the Polyglot programming framework from GraalVM ( Truffle).\n    class Compute { \r public static void matrixMultiplication(final float[] A, final float[] B, final float[] C, final int size) { \r \tfor (int i = 0; i &lt; size; i++) { \r \tfor (int j = 0; j &lt; size; j++) { \r \tfloat sum = 0.0f; \r \tfor (int k = 0; k &lt; size; k++) \r \tsum += A[(i * size) + k] * B[(k * size) + j]; \r C[(i * size) + j] = sum; \r \t} \r \t } \r } \r}\n  The code snippet shows the classic and canonical matrix multiplication example for GPU computing. To accelerate this code snippet with TornadoVM, we first have to annotate the loops that can be parallelized. In this case, we can fully parallelize the two outermost loops, in which there are no dependencies between iterations. We annotate the code by using the TornadoVM annotations  @Parallel as follows:\n  class Compute { \r public static void matrixMultiplication(final float[] A, final float[] B, final float[] C, final int size) { \r \tfor (@Parallel int i = 0; i &lt; size; i++) { \r \tfor (@Parallel int j = 0; j &lt; size; j++) { \r \tfloat sum = 0.0f; \r \tfor (int k = 0; k &lt; size; k++) \r \tsum += A[(i * size) + k] * B[(k * size) + j]; \r C[(i * size) + j] = sum; \r \t} \r \t } \r } \r}\n  The  @Parallel annotation is used as a hint by the TornadoVM JIT compiler (which transforms Java bytecode into OpenCL).\n  The TornadoVM JIT compiler does not force parallelization. Instead, it checks whether the annotated loops can be parallelized, and it replaces the for-loops for the equivalent parallel indexing in OpenCL ( get_global_id(dimension)). If the for-loops cannot be parallelized, TornadoVM bails out and executes the sequential code.\n  Additionally, developers must identify which Java methods to accelerate. To do so, TornadoVM exposes a lightweight task-based API , that sets the list of methods to be accelerated - where each method corresponds to a task. Developers can create a group of tasks via a task-scheduler. The following code snippet shows how to create a task-schedule for the matrix-multiplication example:\n    We create a task-schedule object (t). In its constructor, we pass a name for the task. It could be any name. This name is useful for changing the device in which all tasks are going to be executed. Then we define a set of tasks. In this example, we only have one, but it could be any number of tasks.\n  The parameters for the tasks are as follows: we also pass a name (in this case is \u201c t0\u201d) and a reference to the method we want to accelerate (in this case it points to the method  matrixMultiplication from the Java class  Compute. The rest of the parameters correspond to the actual set of parameters for the method.\n  Finally, we indicate which variables, or arrays, we want to synchronize with the host (the CPU). This is needed because usually, GPUs and FPGAs do not share the same memory as the CPU. Therefore, the TornadoVM runtime will allocate space for all the variables on the target device, and it will perform a data transfer from the host (CPU) to the device (e.g., a GPU). Therefore, to finally obtain the result, we synchronize the list of variables through the TornadoVM API call  streamOut.\n  So far we have declared our tasks, and we have placed them in the code where the parallelization can be performed. To execute the application with TornadoVM, we need to call the `execute()` method on the  TaskSchedule object.\n  This is a blocking call that will create all OpenCL buffers, create a graph of execution, compile all tasks from Java bytecode to OpenCL, and finally execute the generated OpenCL program on the target device. \u00a0Additionally, TornadoVM can combine many methods to be compiled together in a single compilation unit, and be executed on the same device (e.g., on the same GPU). This creates an opportunity for optimizing data transfers between host and heterogeneous devices since they usually do not share the memory with the primary host (unless the device is an integrated GPU, such as AMD APU, ARM Mali or Intel HD Graphics GPUs).\n  Note that we do not set any device-specific information in the source code, and we share the same code for running on multi-core CPU, GPUs and FPGAs. The TornadoVM runtime and JIT compiler will automatically optimize the code depending on the architecture.\n  So, let\u2019s run our code example. I will show you first how to set up the TornadoVM environment. There is a repository on  Github with all these examples.\n    We are going to run TornadoVM using Graal 19.3.0 as a JDK. Note that we update the Graal version frequently. The integration of Graal 20.x into TornadoVM is scheduled for the end of this year. To execute the code, we assume that OpenCL is installed. See all prerequisites  here.\n  $ mkdir -p TornadoVM \r$ cd TornadoVM \r$ wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-19.3.0/graalvm-ce-java11-linux-amd64-19.3.0.tar.gz \r$ tar -xf graalvm-ce-java11-linux-amd64-19.3.0.tar.gz \r$ export JAVA_HOME=$PWD/graalvm-ce-java11-19.3.0 \r$ git clone --depth 1 https://github.com/beehive-lab/TornadoVM \r$ cd TornadoVM \r$ export PATH=$PWD/bin/bin:$PATH \r$ export TORNADO_SDK=$PWD/bin/sdk \r$ export CMAKE_ROOT=&lt;SET YOUR PATH TO CMAKE ROOT&gt; \r$ make graal-jdk-11 \r$ export TORNADO_ROOT=$PWD\n    $ git clone https://github.com/jjfumero/qconlondon2020-tornadovm\r$ cd qconlondon2020-tornadovm/ \r$ export JAVA_HOME=/path/to/graalvm-ce-java11-19.3.0\r$ export PATH=&#34;${PATH}:${TORNADO_ROOT}/bin/bin/&#34; ## Defined previously\r$ export TORNADO_SDK=${TORNADO_ROOT}/bin/sdk \r$ export CLASSPATH=target/tornado-1.0-SNAPSHOT.jar \r$ mvn clean install\n  Now we have everything ready to execute the examples. We can start by exploring which devices are available and visible from TornadoVM.\n  $ tornado --devices\rNumber of Tornado drivers: 1\rTotal number of devices : 3\r\rTornado device=0:0\r\tNVIDIA CUDA -- GeForce GTX 1050\r\t\tGlobal Memory Size: 3.9 GB\r\t\tLocal Memory Size: 48.0 KB\r\t\tWorkgroup Dimensions: 3\r\t\tMax WorkGroup Configuration: [1024, 1024, 64]\r\t\tDevice OpenCL C version: OpenCL C 1.2\r\rTornado device=0:1\r\tIntel(R) OpenCL -- Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz\r\t\tGlobal Memory Size: 31.0 GB\r\t\tLocal Memory Size: 32.0 KB\r\t\tWorkgroup Dimensions: 3\r\t\tMax WorkGroup Configuration: [8192, 8192, 8192]\r\t\tDevice OpenCL C version: OpenCL C 1.2\rTornado device=0:2\r\tIntel(R) OpenCL HD Graphics -- Intel(R) Gen9 HD Graphics NEO\r\t\tGlobal Memory Size: 24.8 GB\r\t\tLocal Memory Size: 64.0 KB\r\t\tWorkgroup Dimensions: 3\r\t\tMax WorkGroup Configuration: [256, 256, 256]\r\t\tDevice OpenCL C version: OpenCL C 2.0\n  In my case, I have three devices available on my laptop: an NVIDIA GPU, an Intel multi-core CPU and an Intel HD Graphics (integrated GPU). TornadoVM selects device 0 by default. However, we can change the device by associating tasks to devices. Let\u2019s start with the default configuration.\n    This program executes the Matrix Multiplication method 100 times and reports the total time per iteration. This method is a simple example to demonstrate what\u2019s happening - later on we\u2019ll do a proper performance comparison using JMH.\n  $ tornado qconlondon.MatrixMultiplication 512 tornado\rComputing MxM of 512x512\rTotal time: 77568790 (ns), 0.0776 (s)\rTotal time: 3133182 (ns), 0.0031 (s)\rTotal time: 3126146 (ns), 0.0031 (s)\r\u2026\n  Note that the first iteration takes longer than the rest of the iterations - this is due to JIT compilation warmup and will disappear as an effect when we\u2019re using JMH.\n  The first time we execute a task-schedule, TornadoVM invokes the OpenCL JIT compiler to optimize and generate OpenCL C code from Java bytecode. Then, once the code is generated, TornadoVM installs the generated code in a code-cache, and the binaries can be reused if the same task is executed again at any point during runtime. To ensure that TornadoVM is running on the GPU (device 0), we can enable debug-information as follows:\n  $ tornado --debug qconlondon.MatrixMultiplication 512 tornado\rComputing MxM of 512x512\rtask info: s0.t0\r\tplatform : NVIDIA CUDA\r\tdevice : GeForce GTX 1050 CL_DEVICE_TYPE_GPU (available)\r\tdims : 2\r global work offset: [0, 0]\r\tglobal work size : [512, 512]\r\tlocal work size : [32, 32, 1]\n  That\u2019s great, TornadoVM is running our Java code for matrix multiplication on an NVIDIA GTX 1050. For reference, let\u2019s also run the sequential application. This is done without invoking the TornadoVM JIT compiler to accelerate the code. We pass an extra parameter to our program to indicate this:\n  $ tornado qconlondon.MatrixMultiplication 512 sequential\rComputing MxM of 512x512\rTotal time: 259398036 (ns), 0.2594 (s)\rTotal time: 247857535 (ns), 0.2479 (s)\r...\n  What we see is that, even with the TornadoVM JIT compiler, the first iteration is 3.3x times faster. Then, from the second iteration,  we get 80x speedup over the Java sequential code.\u00a0 Nevertheless, take this number with caution. In the next section, we introduce a performance comparison using Java JMH.\n    We can change the device in which to run the application from the command. For example, to run on the Intel Integrated Graphics, we can execute with the following options:\n  $ tornado -Ds0.t0.device=0:2 --debug qconlondon.MatrixMultiplication 512 tornado\rComputing MxM of 512x512\rtask info: s0.t0\r\tplatform : Intel(R) OpenCL HD Graphics\r\tdevice : Intel(R) Gen9 HD Graphics NEO CL_DEVICE_TYPE_GPU (available)\r\tdims : 2\r\tglobal work offset: [0, 0]\r\tglobal work size : [512, 512]\r\tlocal work size : [16, 16, 1]\n      With these options, we can easily start getting some performance results. The following figure shows the speedup of TornadoVM when running TornadoVM on different OpenCL devices over the Java sequential implementation (the higher, the better). The speedup reported corresponds to the average value using the Java  JMH framework for benchmarking. Note that the y-axis is represented in logarithmic scale due to the high-speedups. All benchmarks using JMH are included in the same repository with the  examples. As we can see, running on a multi-core CPU with TornadoVM can achieve up to 3.6x compared to Java Hotspot. When running on GPUs, we can achieve up to 39x and 270x compared to Java for Intel HD graphics and NVIDIA 1050 respectively.\n      So far, we have briefly explained the TornadoVM API and how to run applications with TornadoVM at the user level. Let\u2019s now go a bit deeper and see how TornadoVM executes code on the target device.\n      The definition of the task-schedule and the invocation to the execute method from the TornadoVM API runs on a single Java thread (e.g., master thread). The execute method is a blocking call, and, when the execution of the method returns, it guarantees that the execution on the parallel device has finished. When the execute method is invoked, TornadoVM first builds a data flow graph that represents how data are communicated across different tasks within a task-schedule. This graph is used to optimize data transfers.\n  Then, TornadoVM generates new bytecodes (simple instructions to orchestrate the execution on the target devices, such as COPY_IN, LAUNCH, COPY_OUT, BARRIER, etc.). When the code is launched the first time (via the LAUNCH bytecode), TornadoVM invokes the OpenCL JIT compiler and transforms the input Java bytecodes from each task (each Java method to be accelerated) to optimized OpenCL C code.\n  TornadoVM specializes in the OpenCL C code depending on the target device, which means that the code generated for a GPU is different for CPUs and FPGAs. This is due to the fact that OpenCL code is portable across devices, but performance is not uniform. Therefore, TornadoVM increases performance by specializing and applying different optimizations per device.\n  NOTE: The TornadoVM JIT compiler runs in a single thread, so there are concerns about potential exhaustion of compiler resources under heavy load, just as we see in HotSpot.\n  The final step of compilation is performed through an OpenCL driver invocation to compile from the optimized and specialized OpenCL C code to the target platform. For example, if the application is executed on NVIDIA GPUs, this step generates the corresponding  PTX code.\n  Once the OpenCL code is generated and compiled, TornadoVM launches the application on the target device. To do so, TornadoVM deploys many threads for running the kernel. The amount of threads to deploy depends on the input sizes of the applications and the hardware characteristics.\n  For instance, the matrix multiplication example we showed earlier is deployed on the GPU using a block of 512 by 512 threads. This means that TornadoVM deploys a block of 512x512 threads from the single thread Java application that was programmed. If the target device is a multi-core CPU, TornadoVM deploys the same amount of threads as the maximum number of CPU cores available.\n  Once the execution on the parallel device finishes, TornadoVM copies the results to the Java\u2019s heap (to make it visible to the host side through the bytecode COPY_OUT), and finally it returns control to the master thread in JVM.\n  We can query the bytecodes that TornadoVM generates for each application. For instance, the following code snippet shows a simplified output when running the matrix multiplication with\u00a0 debug information of the TornadoVM\u2019s bytecode:\n  $ tornado --printBytecodes qconlondon.MatrixMultiplication 512 tornado\r\rvm: COPY_IN [F@3e694b3f on NVIDIA -- GeForce GTX 1050\rvm: COPY_IN [F@397fbdb on NVIDIA -- GeForce GTX 1050\rvm: COPY_IN [F@33d512c1 on NVIDIA -- GeForce GTX 1050\rvm: LAUNCH task s0.t0-matrixMultiplication on NVIDIA -- GeForce GTX 1050\rvm: STREAM_OUT_BLOCKING [F@33d512c1 on NVIDIA -- GeForce GTX 1050\n  The matrix multiplication method we introduced earlier receives three parameters (matrices A, B and C). For each variable, TornadoVM performs a data transfer from the host to the device (COPY_IN). Then it runs the application by using the LAUNCH bytecode.\n  Just to recall, the first time the LAUNCH is executed, TornadoVM invokes the OpenCL JIT compiler, in which the code is specialized and optimized per computing device. Finally, TornadoVM performs a copy (STREAM_OUT_BLOCKING) from the device to the main hosts to obtain the results.\n    Let\u2019s dig into the OpenCL kernel that TornadoVM generates. With TornadoVM, we can debug and check the generated kernel by using the  --printKernel flag as follows:\n    TornadoVM generates one kernel per task within a task-schedule. Additionally, it generates a kernel called  lookupBufferAddress, that is executed during bootstrap of the VM. The reason behind this kernel is that TornadoVM only allocates one big buffer that acts a heap on the target device. To do so, it needs a valid pointer that will be used as a base address from the target device in which TornadoVM can perform data transfers. The  lookupBufferAddress kernel returns this base pointer.\n  The second kernel corresponds to the Open\n......", "posttime": "2020-06-15 05:46:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,accelerating,tornadovm", "title": "TornadoVM\uff1a\u4f7f\u7528GPU\u548cFPGA\u52a0\u901fJava", "title_en": "TornadoVM: Accelerating Java with GPUs and FPGAs", "transed": 1, "url": "https://www.infoq.com/articles/tornadovm-java-gpu-fpga/", "via": "", "real_tags": ["java", "tornadovm"]}, {"category": "", "categoryclass": "", "imagename": "2bac968bb384d1e29bcb27c2585a2a0d.png", "infoid": 1006578, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u662f\u5426\u89c9\u5f97\u65e0\u529b\u89e3\u51b3\u6280\u672f\u503a\u52a1\u95ee\u9898\uff0c\u56e0\u4e3a\u7ba1\u7406\u5c42\u4f3c\u4e4e\u4e0d\u5728\u4e4e\u4fee\u590d\u5df2\u7ecf\u5b58\u5728\u7684\u4e1c\u897f\uff1f\n\u201c\u5ba2\u6237\u4e0d\u4f1a\u51fa\u94b1\u628a\u6709\u7528\u7684\u4e1c\u897f\u6362\u6210\u53ef\u80fd\u6709\u7528\u7684\u4e1c\u897f\uff01\u201d\n\u7ecf\u7406\u548c\u5f00\u53d1\u4eba\u5458\u6709\u4e0d\u540c\u7684\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4f46\u4ed6\u4eec\u4e3a\u540c\u4e00\u5bb6\u516c\u53f8\u5de5\u4f5c\u3002\u8fd9\u4e9b\u76f8\u4e92\u77db\u76fe\u7684\u89c2\u70b9\u53ef\u4ee5\u901a\u8fc7\u66f4\u597d\u7684\u6c9f\u901a\u6765\u89e3\u51b3\uff0c\u4e00\u4e9b\u8bba\u70b9\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\n\u53ea\u8981\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u8ba1\u5212\uff0c\u8ba9\u4f60\u7684\u56e2\u961f\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u5feb\uff0c\u4f60\u80af\u5b9a\u4f1a\u5f97\u5230\u7ba1\u7406\u5c42\u7684\u652f\u6301\uff01\u4f46\u8861\u91cf\u6280\u672f\u503a\u52a1\u662f\u56f0\u96be\u7684\uff0c\u800c\u4e14\u4ed6\u4eec\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u4e86\u89e3\u6280\u672f\u7ec6\u8282\u2026\u3002\n\u5e0c\u671b\u6709\u4e00\u79cd\u7b80\u5355\u800c\u6709\u6548\u7684\u65b9\u6cd5\u6765\u4f18\u5148\u5904\u7406\u54ea\u4e9b\u79d1\u6280\u503a\u52a1\uff1a\u70ed\u70b9\u5206\u6790\u3002\n\u8fd9\u4e2a\u6982\u5ff5\u5f88\u7b80\u5355\uff0c\u7ba1\u7406\u8005\u53ef\u4ee5\u7406\u89e3\u5176\u4e2d\u7684\u4ef7\u503c\u3002\u4ee3\u7801\u7684\u67d0\u4e9b\u90e8\u5206\u7ecf\u5e38\u66f4\u6539\u3002\u4fdd\u6301\u8fd9\u4e9b\u4e1c\u897f\u7684\u6e05\u6d01\u5bf9\u4f60\u7684\u5de5\u4f5c\u6548\u7387\u6709\u5f88\u5927\u7684\u5f71\u54cd\u3002\u8fd9\u5bf9\u4e1a\u52a1\u6765\u8bf4\u662f\u5f88\u9ad8\u7684\u6295\u8d44\u56de\u62a5\u7387\uff01\n\u6709\u4e86\u70ed\u70b9\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5408\u7406\u7684\u91cd\u6784\u8ba1\u5212\u6765\u8bc1\u660e\u3002\u8fd9\u662f\u5f00\u59cb\u505a\u67d0\u4e8b\u7684\u4e00\u79cd\u975e\u5e38\u52a1\u5b9e\u7684\u65b9\u5f0f\ud83d\udc4a\u3002\n\u4f46\u662f\uff0c\u60a8\u5c06\u5982\u4f55\u89e3\u91ca\u8fd9\u4e2a\u50cf\u6837\u7684\u8ba1\u5212\uff0c\u800c\u4e0d\u4f1a\u8ba9\u5b83\u4eec\u9677\u5165\u5ba2\u6237\u6d41\u5931\u548c\u4ee3\u7801\u590d\u6742\u6027\u7684\u6280\u672f\u7ec6\u8282\u4e4b\u4e2d\u5462\uff1f\u4e95\u2026\u3002\u60a8\u53ef\u4ee5\u7ec3\u4e60\u6f14\u793a\u6280\u5de7\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u201c\u5c01\u95ed\u56fe\u201d\u3002\n\u6811\u72b6\u56fe\u662f\u6700\u6d41\u884c\u7684\u5c01\u95ed\u56fe\u3002\u5982\u679c\u60a8\u66fe\u7ecf\u751f\u6210\u8fc7webpack\u6346\u7ed1\u5305\u7684\u6811\u72b6\u56fe\uff0c\u90a3\u4e48\u60a8\u5df2\u7ecf\u610f\u8bc6\u5230\u5b83\u4eec\u6709\u591a\u5927\u7684\u5e2e\u52a9\uff1a\n\u6211\u5728\u9605\u8bfb\u4e9a\u5f53\u00b7\u6258\u6069\u5e0c\u5c14(Adam Tornhill)\u7684\u201c\u8f6f\u4ef6\u8bbe\u8ba1X-\u5c04\u7ebf\u201d(Software Design X-Rays)\u65f6\u53d1\u73b0\u4e86\u4e00\u4e2a\u60f3\u6cd5\uff0c\u5373\u7528\u76d8\u67dc\u56fe\u6765\u8bc6\u522b\u7cfb\u7edf\u7684\u70ed\u70b9\u3002\u8fd9\u662f\u4e00\u672c\u5f88\u597d\u7684\u4e66\uff0c\u5c55\u793a\u4e86\u57fa\u4e8e\u884c\u4e3a\u5206\u6790\u7406\u89e3\u9057\u7559\u4ee3\u7801\u7684\u6280\u672f\u3002\u603b\u6709\u4e00\u5929\u6211\u4f1a\u5199\u4e00\u7bc7\u5173\u4e8e\u5b83\u7684\u91cd\u8981\u90e8\u5206\u7684\u603b\u7ed3\u2026\u3002\n\u597d\u6d88\u606f\u662f\uff1a\u76d8\u67dc\u56fe\u8868\u5c06\u5e2e\u52a9\u60a8\u5411\u975e\u6280\u672f\u4eba\u5458\u89e3\u91ca\u7cfb\u7edf\u70ed\u70b9\u7684\u5f71\u54cd\u548c\u91cd\u8981\u6027\u3002\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u6d88\u606f\uff1a\u60a8\u53ef\u4ee5\u5728\u51e0\u5206\u949f\u5185\u4e3a\u60a8\u7684\u4ee3\u7801\u5e93\u751f\u6210\u4e00\u4e2a\uff01\n\u8fd9\u662f\u5f88\u68d2\u7684\u4e1c\u897f\uff0c\u4f46\u662fSilvio Montanari\u5728\u4e0a\u9762\u6784\u5efa\u4e86\u4e00\u4e2a\u5de5\u5177\u6765\u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u66f4\u52a0\u7b80\u5355\uff1a\u4ee3\u7801\u53d6\u8bc1\u3002\n\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u8ba9\u60a8\u4f7f\u7528\u884c\u4e3a\u6570\u636e\u4ece\u4ee3\u7801\u5e93\u4e2d\u83b7\u5f97\u5f88\u591a\u6d1e\u5bdf\u529b\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u91cd\u70b9\u5173\u6ce8\u70ed\u70b9\u3002\u8fd9\u662f\u4f60\u9700\u8981\u4e3a\u91cd\u6784\u79d1\u6280\u503a\u52a1\u8fa9\u62a4\u7684\u4e00\u4ef6\u4e8b\u3002\n\u5b83\u5f88\u53d7\u6b22\u8fce\u3002\u4e0d\u7ba1\u60a8\u4f7f\u7528\u7684\u662f\u54ea\u79cd\u8bed\u8a00\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u4f7f\u7528\u8fc7(\u6216\u542c\u8bf4\u8fc7)Docker\u3002\n\u6211\u4e0d\u719f\u6089\u4ee3\u7801\u5e93\u3002\u6211\u6253\u8d4c\u4f60\u4e0d\u662f\u3002\u7136\u800c\uff0c\u6211\u4eec\u5c06\u5728\u51e0\u5206\u949f\u5185\u4ece\u4e2d\u83b7\u5f97\u6d1e\u5bdf\u529b\u3002\n\u4e0e\u771f\u6b63\u7684\u9057\u7559\u4ee3\u7801\u5e93\u76f8\u6bd4\uff0c\u5b83\u7b97\u4e0d\u4e86\u4ec0\u4e48\u3002\u4f46\u8fd9\u5df2\u7ecf\u8db3\u591f\u5927\u4e86\uff0c\u8db3\u4ee5\u8bf4\u660e\u3002\n\u6211\u5728\u5206\u89e3\u6bcf\u4e00\u6b65\u6240\u4ee5\u6ca1\u6709\u9b54\u6cd5\u3002\u6211\u5efa\u8bae\u4f60\u628a\u8fd9\u4e9b\u53f0\u9636\u590d\u5236\u5230\u4f60\u8fd9\u8fb9\uff0c\u8fd9\u6837\u4f60\u5c31\u80fd\u611f\u89c9\u5230\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u6211\u6b63\u5728\u4f7f\u7528Node13.5.0\u3001NPM6.13.4\u548cJava8\u8fd0\u884c\u4ee5\u4e0b\u5206\u6790\u3002\u6211\u4f7f\u7528\u7684\u662fMacOS\uff0c\u4f46\u8fd9\u5728Linux\u4e0a\u5e94\u8be5\u53ef\u4ee5\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u53ef\u80fd\u4e5f\u53ef\u4ee5\u5728Windows\u4e0a\u8fd0\u884c\u3002\n{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u4ee3\u7801\u53d6\u8bc1-\u5206\u6790&#34\uff1b\uff0c&#34\uff1b\u7248\u672c&#34\uff1b\uff1a&#34\uff1b1.0.0&#34\uff1b\uff0c&#34\uff1b\u63cf\u8ff0&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1bMain&#34\uff1b\uff1a&#34\uff1bindex.js&#34\uff1b\uff0c&#34\uff1b\u811a\u672c&#34\uff1b\uff1a{&#34\uff1b\u6d4b\u8bd5&#34\uff1b\uff1a&#34\uff1bECHO\\&#34\uff1b\u9519\u8bef\uff1a\u672a\u6307\u5b9a\u6d4b\u8bd5\\&#34\uff1b&amp\uff1b&amp\uff1b\u9000\u51fa1&#34\uff1b}\uff0c&#34\uff1b\u5173\u952e\u5b57&#34\uff1b\uff1a[]\uff0c&#34\uff1b\u4f5c\u8005&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\u8bb8\u53ef\u8bc1&#34\uff1b\uff1a&#34\uff1bISC&#34\uff1b}\u3002\n\u76f8\u53cd\uff0c\u6211\u5efa\u8bae\u5728\u672c\u5730\u540c\u65f6\u5b89\u88c5\u4e24\u8005\u3002\u8fd9\u5c31\u51cf\u5c11\u4e86\u9700\u8981\u5904\u7406\u7684\u526f\u4f5c\u7528\uff1a\n{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u4ee3\u7801\u53d6\u8bc1-\u5206\u6790&#34\uff1b\uff0c&#34\uff1b\u7248\u672c&#34\uff1b\uff1a&#34\uff1b1.0.0&#34\uff1b\uff0c&#34\uff1b\u63cf\u8ff0&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1bMain&#34\uff1b\uff1a&#34\uff1bindex.js&#34\uff1b\uff0c&#34\uff1b\u811a\u672c&#34\uff1b\uff1a{&#34\uff1b\u6d4b\u8bd5&#34\uff1b\uff1a&#34\uff1bECHO\\&#34\uff1b\u9519\u8bef\uff1a\u672a\u6307\u5b9a\u6d4b\u8bd5\\&#34\uff1b&amp\uff1b&amp\uff1b\u9000\u51fa1&#34\uff1b}\uff0c&#34\uff1b\u5173\u952e\u5b57&#34\uff1b\uff1a[]\uff0c&#34\uff1b\u4f5c\u8005&#34\uff1b\uff1a&#34\uff1b\uff0c&#34\uff1b\u8bb8\u53ef\u8bc1&#34\uff1b\uff1a&#34\uff1bISC&#34\uff1b\uff0c&#34\uff1b\u4f9d\u8d56\u9879&#34\uff1b\uff1a{&#34\uff1bcode-forensics&#34\uff1b\uff1a&#34\uff1b2.3.1&#34\uff1b\uff0c&#34\uff1b\u541e\u54bd&#34\uff1b\uff1a&#34\uff1b4.0.2&#34\uff1b}}\u3002\n{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u4ee3\u7801\u53d6\u8bc1-\u5206\u6790&#34\uff1b\uff0c&#34\uff1b\u7248\u672c&#34\uff1b\uff1a&#34\uff1b1.0.0&#34\uff1b\uff0c&#34\uff1b\u63cf\u8ff0&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1bMain&#34\uff1b\uff1a&#34\uff1bindex.js&#34\uff1b\uff0c&#34\uff1b\u811a\u672c&#34\uff1b\uff1a{&#34\uff1b\u5f00\u59cb&#34\uff1b\uff1a&#34\uff1bGUMP Web\u670d\u52a1\u5668&#34\uff1b}\uff0c&#34\uff1b\u5173\u952e\u5b57&#34\uff1b\uff1a[]\uff0c&#34\uff1b\u4f5c\u8005&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\u8bb8\u53ef\u8bc1&#34\uff1b\uff1a&#34\uff1bISC&#34\uff1b\uff0c&#34\uff1b\u4f9d\u8d56&#34\uff1b\uff1a{&#34\uff1b\u4ee3\u7801\u53d6\u8bc1&#34\uff1b\uff1a&#34\uff1b2.3.1&#34\uff1b\uff0c&#34\uff1b\u54bd\u4e0b&#34\uff1b\uff1a&#34\uff1b4.0.2&#34\uff1b}}\u3002\n\u76ee\u524d\u6ca1\u6709\u62a5\u544a\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u7b2c\u4e00\u4e2a\u62a5\u544a\u3002\n\u811a\u672c\u53ef\u4ee5\u4e0eGulp\u4e00\u8d77\u8fd0\u884c\u3002\u5f53\u6211\u4eec\u5728\u672c\u5730\u5b89\u88c5\u5b83\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4eceNPM\u811a\u672c\u8bbf\u95ee\u5b83\u3002\n{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u4ee3\u7801\u53d6\u8bc1-\u5206\u6790&#34\uff1b\uff0c&#34\uff1b\u7248\u672c&#34\uff1b\uff1a&#34\uff1b1.0.0&#34\uff1b\uff0c&#34\uff1b\u63cf\u8ff0&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1bMain&#34\uff1b\uff1a&#34\uff1bindex.js&#34\uff1b\uff0c&#34\uff1b\u811a\u672c&#34\uff1b\uff1a{&#34\uff1b\u5f00\u59cb&#34\uff1b\uff1a&#34\uff1b\u541e\u54bdWeb\u670d\u52a1\u5668&#34\uff1b\uff0c&#34\uff1b\u70ed\u70b9&#34\uff1b\uff1a&#34\uff1b\u541e\u54bd\u70ed\u70b9\u5206\u6790--dateFrom=2019-06-01--dateTo=2020-06-01&#34\uff1b}\uff0c&#34\uff1b\u5173\u952e\u8bcd&#34\uff1b\uff1a[]\uff0c&#34\uff1b\u4f5c\u8005&#34\uff1b\uff1a&#34\uff1b&#34\uff1b\uff0c&#34\uff1b\u8bb8\u53ef\u8bc1&#34\uff1b\uff1a&#34\uff1bISC&#34\uff1b\uff0c&#34\uff1b\u4f9d\u8d56\u9879&#34\uff1b\uff1a{&#34\uff1b\u4ee3\u7801\u53d6\u8bc1&#34\uff1b\uff1a&#34\uff1b2.3.1&#34\uff1b\uff0c&#34\uff1b\u541e\u54bd&#34\uff1b\uff1a&#34\uff1b4.0.2&#34\uff1b}\u3002\n\u6211\u5df2\u7ecf\u9650\u5236\u4e86\u5206\u6790\u671f\u95f4\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u590d\u5236\u76f8\u540c\u7684\u62a5\u544a\u3002\u60a8\u53ef\u4ee5\u7701\u7565--dateTo\uff0c\u4f46\u662f\u77e5\u9053\u60a8\u53ef\u4ee5\u968f\u65f6\u91cd\u73b0\u60a8\u7684\u5206\u6790\u662f\u5f88\u65b9\u4fbf\u7684\uff01\n\u53e6\u5916\uff0c\u6211\u901a\u5e38\u5efa\u8bae\u5206\u6790\u8fc7\u53bb12\u4e2a\u6708\u7684\u60c5\u51b5\u3002\u4f60\u4e0d\u9700\u8981\u66f4\u591a\u4e86\u3002\n\u8fd9\u662f\u4f60\u8981\u5411\u4f60\u7684\u7ecf\u7406\u4f20\u8fbe\u7684\u4fe1\u606f\u3002\u6211\u4eec\u7684\u76ee\u6807\u4e0d\u662f\u4e3a\u4e86\u6e05\u7406\u4ee3\u7801\u800c\u6e05\u7406\u4ee3\u7801\uff0c\u800c\u662f\u4e3a\u4e86\u4e1a\u52a1\u505a\u51fa\u6218\u7565\u51b3\u7b56\u3002\n\u4eba\u4eec\u4f1a\u660e\u767d\u8fd9\u4e9b\u90fd\u662f\u9700\u8981\u89e3\u51b3\u7684\u5173\u952e\u95ee\u9898\u3002\u6839\u636e\u8fc7\u53bb12\u4e2a\u6708\u7684\u5b9e\u9645\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u662f\u5f71\u54cd\u56e2\u961f\u5de5\u4f5c\u6548\u7387\u7684\u6700\u5927\u969c\u788d\uff01\n\u8be5\u56fe\u662f\u4ea4\u4e92\u5f0f\u7684\u3002\u60a8\u53ef\u4ee5\u5355\u51fb\u6c14\u6ce1\u4ee5\u653e\u5927\u5230\u6587\u4ef6\u7ea7\u3002\n\u6211\u6562\u6253\u8d4c\uff0c\u8fd9\u5df2\u7ecf\u6210\u4e3a\u6355\u6349\u6240\u6709\u866b\u5b50\u7684\u4e0a\u5e1d\u6d4b\u8bd5\u3002\u6211\u5efa\u8bae\u8bc6\u522b\u5e76\u63d0\u53d6\u76f8\u5173\u7684\u6d4b\u8bd5\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u7f16\u5199\u548c\u66f4\u65b0\u5b83\u4eec\u3002\n\u4e3b\u6587\u4ef6\u65b9\u4fbf\u5730\u7ec4\u5408\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u804c\u8d23\u3002\u60a8\u9700\u8981\u4e00\u4e2a\u4e3b\u6587\u4ef6\u3002\u4f46\u5728\u6211\u770b\u6765\uff0c\u5b83\u5982\u6b64\u9891\u7e41\u5730\u88ab\u89e6\u53ca\u8fd9\u4e00\u4e8b\u5b9e\u662f\u4e00\u4e2a\u8ff9\u8c61\uff0c\u8868\u660e\u6211\u4eec\u5728\u90a3\u91cc\u6df7\u5408\u4e86\u4e0d\u540c\u7a0b\u5ea6\u7684\u62bd\u8c61\u3002\u8bc6\u522b\u5e76\u63d0\u53d6\u8fd9\u4e9b\u804c\u8d23\u53ef\u80fd\u4f1a\u5bf9\u4ee3\u7801\u5e93\u7684\u53ef\u7ef4\u62a4\u6027\u4ea7\u751f\u6700\u597d\u7684\u5f71\u54cd\u3002\n\u5728\u51e0\u5206\u949f\u5185\uff0c\u60a8\u5c31\u53ef\u4ee5\u5728\u4e0d\u592a\u4e86\u89e3\u4ee3\u7801\u5e93\u7684\u60c5\u51b5\u4e0b\uff0c\u4f18\u5148\u5904\u7406\u6700\u91cd\u8981\u768410%\u7684\u5de5\u4f5c\u3002\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5728\u6bcf\u5929\u4f7f\u7528\u7684\u4ee3\u7801\u5e93\u4e0a\u4f7f\u7528\u8fd9\u9879\u6280\u80fd\u505a\u4e9b\u4ec0\u4e48\u3002\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u60a8\u5411\u7ba1\u7406\u5c42\u5c55\u793a\u4e86\u6e05\u6670\u7684\u56fe\u8868\uff0c\u5e76\u8d62\u5f97\u4ed6\u4eec\u5bf9\u60a8\u6539\u8fdb\u7cfb\u7edf\u6240\u80fd\u505a\u7684\u6700\u57fa\u672c\u7684\u91cd\u6784\u5de5\u4f5c\u7684\u652f\u6301\u3002\n\u73b0\u5728\uff0c\u7741\u5f00\u773c\u775b\uff0c\u53bb\u751f\u6210\u9057\u7559\u4ee3\u7801\u5e93\u7684\u70ed\u70b9\u56fe\uff01\ud83d\udc4d\u3002\n\u7531\u5728\u52a0\u62ff\u5927\u8499\u7279\u5229\u5c14\u751f\u6d3b\u548c\u5de5\u4f5c\u7684Nicolas Carlo\u64b0\u5199\uff0c\ud83c\udf41\u4ed6\u521b\u5efa\u4e86\u8f6f\u4ef6\u5de5\u5320\u8499\u7279\u5229\u5c14\u793e\u533a\uff0c\u8be5\u793e\u533a\u5173\u5fc3\u6784\u5efa\u53ef\u7ef4\u62a4\u7684\u8f6f\u4ef6\u3002\n\u2190\u8fd4\u56de\u4e3b\u9875", "note_en": "Do you feel powerless to address technical debt, because management doesn\u2019t seem to  care in fixing what\u2019s already there?\n  \u201cClients won\u2019t give money for replacing something that works with something else that may work!\u201d\n Managers and developers have different drivers, but they\u2019re working for the same company. These conflicting points of view can be solved with better communication and  a few arguments can help.\n If only you could come up with a plan to make your team faster than ever, you\u2019ll get management support for sure! But measuring technical debt is hard and they don\u2019t understand technical details anyway\u2026\n Hopefully, there is one simple and efficient way to prioritize which tech debt to address first:  Hotspots analysis.\n The concept is simple enough for managers to understand the value. Some parts of the code are changed frequently. Keeping  these ones clean has a major impact on your productivity. That\u2019s a great ROI for the business!\n With Hotspots, you can build a reasonable refactoring plan to make a case for. It\u2019s a very pragmatic way to start doing  something \ud83d\udc4a\n But how will you explain that decent plan without losing them into technicalities of Churn and Code Complexity? Well\u2026 You can practice your presentation skills, or you can use \u201cEnclosure Diagrams\u201d.\n     Treemaps are the most popular kind of enclosure diagrams. If you ever generated the treemap of a webpack bundle, you already realized how helpful these are:\n  Enclosure diagrams to identify Hotspots of a system is an idea I discovered reading  Software Design X-Rays from  Adam Tornhill. This is an  excellent book that showcases techniques to understand Legacy Code based on behavioral analysis. I will write a summary of its salient parts someday\u2026\n The great news is: an enclosure diagram will help you explain to non-technical people the impact and importance of your system Hotspots.\n And here\u2019s the greater news:  you can generate one for your codebase within a few minutes!\n   That\u2019s great stuff, but  Silvio Montanari built a tool on top to make the process even easier:  code-forensics.\n This tool can give you a lot of insights from your codebase using behavioral data. Here, I\u2019ll focus on Hotspots. This is the one thing you need to make a case for refactoring Tech Debt.\n     It\u2019s very popular. Regardless of what language you\u2019re working with, you may have used (or heard of) Docker already.\n I\u2019m not familiar with the codebase. I bet you\u2019re not. Yet, we\u2019ll get insights within minutes out of it.\n   It\u2019s nothing compared to an actual Legacy codebase. But that\u2019s big enough to illustrate.\n  I\u2019m decomposing every single step so there\u2019s no magic. I suggest you reproduce the steps on your side so you can  feel how it works.\n    For the record, I\u2019m running the following analysis with node 13.5.0, npm 6.13.4, and Java 8. I\u2019m using macOS, but that should work on Linux fine and probably on Windows too.\n          {    &#34;name&#34; :  &#34;code-forensics-analysis&#34; ,    &#34;version&#34; :  &#34;1.0.0&#34; ,    &#34;description&#34; :  &#34;&#34; ,    &#34;main&#34; :  &#34;index.js&#34; ,    &#34;scripts&#34; : {    &#34;test&#34; :  &#34;echo  \\&#34; Error: no test specified \\&#34;  &amp;&amp; exit 1&#34;   },    &#34;keywords&#34; : [],    &#34;author&#34; :  &#34;&#34; ,    &#34;license&#34; :  &#34;ISC&#34;  }\n   Instead, I recommend to install both locally. That\u2019s less side-effects to deal with:\n   {    &#34;name&#34; :  &#34;code-forensics-analysis&#34; ,    &#34;version&#34; :  &#34;1.0.0&#34; ,    &#34;description&#34; :  &#34;&#34; ,    &#34;main&#34; :  &#34;index.js&#34; ,    &#34;scripts&#34; : {    &#34;test&#34; :  &#34;echo  \\&#34; Error: no test specified \\&#34;  &amp;&amp; exit 1&#34;   },    &#34;keywords&#34; : [],    &#34;author&#34; :  &#34;&#34; ,    &#34;license&#34; :  &#34;ISC&#34; ,    &#34;dependencies&#34; : {    &#34;code-forensics&#34; :  &#34;2.3.1&#34; ,    &#34;gulp&#34; :  &#34;4.0.2&#34;   }  }\n       {    &#34;name&#34; :  &#34;code-forensics-analysis&#34; ,    &#34;version&#34; :  &#34;1.0.0&#34; ,    &#34;description&#34; :  &#34;&#34; ,    &#34;main&#34; :  &#34;index.js&#34; ,    &#34;scripts&#34; : {    &#34;start&#34; :  &#34;gulp webserver&#34;   },    &#34;keywords&#34; : [],    &#34;author&#34; :  &#34;&#34; ,    &#34;license&#34; :  &#34;ISC&#34; ,    &#34;dependencies&#34; : {    &#34;code-forensics&#34; :  &#34;2.3.1&#34; ,    &#34;gulp&#34; :  &#34;4.0.2&#34;   }  }\n  There\u2019s no report for the moment, let\u2019s create a first one.\n  Scripts can be run with Gulp. As we installed it locally, we can access it from npm scripts.\n  {    &#34;name&#34; :  &#34;code-forensics-analysis&#34; ,    &#34;version&#34; :  &#34;1.0.0&#34; ,    &#34;description&#34; :  &#34;&#34; ,    &#34;main&#34; :  &#34;index.js&#34; ,    &#34;scripts&#34; : {    &#34;start&#34; :  &#34;gulp webserver&#34; ,    &#34;hotspot&#34; :  &#34;gulp hotspot-analysis --dateFrom=2019-06-01 --dateTo=2020-06-01&#34;   },    &#34;keywords&#34; : [],    &#34;author&#34; :  &#34;&#34; ,    &#34;license&#34; :  &#34;ISC&#34; ,    &#34;dependencies&#34; : {    &#34;code-forensics&#34; :  &#34;2.3.1&#34; ,    &#34;gulp&#34; :  &#34;4.0.2&#34;   }  }\n I\u2019ve constrained the analyzed period so you can reproduce the same reports. You can omit  --dateTo, but it\u2019s convenient to know you can reproduce your analyses at any time!\n Also, I generally recommend analyzing  the past 12 months. You don\u2019t need more.\n            This is the message you will convey to your managers. The goal is not to clean the code for the sake of it, but to  take strategic decisions for the business.\n  People will understand these are the critical bits to address. These are your top blockers for team productivity, based on the past 12 months\u2019  actual work!\n  The diagram is interactive. You can click on the bubbles to zoom in down to the file level.\n  I bet this has become the God Test that catches all bugs. I\u2019d suggest to identify and extract related tests to make it easier to write and update them.\n Main files conveniently combine many different responsibilities. You need a main file. But the fact it\u2019s so frequently touched is an indicator that we\u2019re mixing different levels of abstraction there, in my opinion. Identify and extract these responsibilities will probably have the best impact on the codebase maintainability.\n  Within a few minutes, you were able to prioritize work on the 10% that matters the most, without knowing much about the codebase.\n Imagine what you can do with this skill on the codebase you\u2019re working with every single day.\n Picture yourself presenting clear diagrams to management and win their support for the most foundational refactoring work you can do to improve your system.\n Now, open your eyes and go generate the Hotspots diagram of your Legacy codebase! \ud83d\udc4d\n   Written by   Nicolas Carlo who lives and works in Montreal, Canada \ud83c\udf41 He founded the  Software Crafters Montreal community which cares about building maintainable softwares.\n   \u2190 Go back to the home page", "posttime": "2020-06-15 05:46:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u503a\u52a1,managers,\u4ee3\u7801", "title": "\u7528\u5c01\u95ed\u56fe\u8bf4\u670d\u7ecf\u7406\u89e3\u51b3\u6280\u672f\u503a\u52a1\u95ee\u9898", "title_en": "Convince Managers to Address Tech Debt with Enclosure Diagrams", "transed": 1, "url": "https://understandlegacycode.com/blog/convince-management-to-address-tech-debt-with-enclosure-diagrams/", "via": "", "real_tags": ["\u503a\u52a1", "managers", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006575, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TLS E.RescorlaInternet-Draft RTFM\uff0cInc.\u516c\u5f00\u72b6\u6001\uff1a\u5b9e\u9a8c\u6027K.OkuExpires\uff1a2020\u5e7412\u67083\u65e5Fastly N.Sullivan C.A.Wood Cloudflare 2020\u5e746\u67081\u65e5TLS\u52a0\u5bc6\u7684\u5ba2\u6237\u7aefHello Draft-IETF-TLS-esni-07\u6458\u8981\u672c\u6587\u6863\u63cf\u8ff0\u4e86\u4f20\u8f93\u5c42\u5b89\u5168(TLS)\u4e2d\u7528\u4e8e\u5728\u670d\u52a1\u5668\u516c\u94a5\u4e0b\u52a0\u5bc6ClientHello\u6d88\u606f\u7684\u673a\u5236\u3002\u672c\u5907\u5fd8\u5f55\u7684\u72b6\u6001\u672cInternet-Draft\u5b8c\u5168\u7b26\u5408BCP 78\u7684\u89c4\u5b9a\u63d0\u4ea4\u3002\u4e92\u8054\u7f51\u8349\u6848\u662f\u4e92\u8054\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4(IETF)\u7684\u5de5\u4f5c\u6587\u4ef6\u3002\u8bf7\u6ce8\u610f\uff0c\u5176\u4ed6\u5c0f\u7ec4\u4e5f\u53ef\u4ee5\u5c06\u5de5\u4f5c\u6587\u4ef6\u4f5c\u4e3a\u4e92\u8054\u7f51\u8349\u7a3f\u5206\u53d1\u3002\u76ee\u524d\u7684\u4e92\u8054\u7f51\u8349\u7a3f\u5217\u8868\u5728https://datatracker.ietf.org/drafts/current/.\u3002\u4e92\u8054\u7f51\u8349\u6848\u662f\u6709\u6548\u671f\u6700\u957f\u4e3a6\u4e2a\u6708\u7684\u8349\u6848\u6587\u4ef6\uff0c\u53ef\u968f\u65f6\u66f4\u65b0\u3001\u66ff\u6362\u6216\u88ab\u5176\u4ed6\u6587\u4ef6\u6dd8\u6c70\u3002\u4f7f\u7528\u4e92\u8054\u7f51\u8349\u7a3f\u4f5c\u4e3a\u53c2\u8003\u6750\u6599\u6216\u5c06\u5176\u4f5c\u4e3a\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u4ee5\u5916\u7684\u5f15\u7528\u662f\u4e0d\u5408\u9002\u7684\u3002\u672c\u4e92\u8054\u7f51\u8349\u7a3f\u5c06\u4e8e2020\u5e7412\u67083\u65e5\u5230\u671f\u3002\u7248\u6743\u6240\u6709(C)2020 IETF Trust\u548c\u6307\u5b9a\u4e3a\u6587\u6863\u4f5c\u8005\u7684\u4eba\u5458\u3002\u7248\u6743\u6240\u6709\u3002\u672c\u6587\u4ef6\u53d7BCP78\u548cIETF Trust\u5173\u4e8eIETF\u6587\u4ef6(https://trustee.ietf.org/\u8bb8\u53ef\u8bc1\u4fe1\u606f)\u7684\u6cd5\u5f8b\u89c4\u5b9a\u7684\u7ea6\u675f\uff0c\u81ea\u672c\u6587\u4ef6\u53d1\u5e03\u4e4b\u65e5\u8d77\u751f\u6548\u3002\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u8fd9\u4e9b\u6587\u6863\uff0c\u56e0\u4e3a\u5b83\u4eec\u63cf\u8ff0\u4e86\u60a8\u5bf9\u672c\u6587\u6863\u7684\u6743\u5229\u548c\u9650\u5236\u3002\u672c\u6587\u6863\u4e2d\u63d0\u53d6\u7684\u4ee3\u7801\u7ec4\u4ef6\u5fc5\u987b\u5305\u62ec\u7b80\u5316\u7684BSD\u8bb8\u53ef\u8bc1\u6587\u672c\uff0c\u5982\u4fe1\u6258\u6cd5\u5f8b\u89c4\u5b9a\u7684\u7b2c4.e\u8282\u6240\u8ff0\uff0c\u5e76\u4e14\u5982\u7b80\u5316\u7684BSD\u8bb8\u53ef\u8bc1\u4e2d\u6240\u8ff0\uff0c\u63d0\u4f9b\u7684\u4ee3\u7801\u7ec4\u4ef6\u4e0d\u63d0\u4f9b\u62c5\u4fdd\u3002Rescorla\u7b49\u4eba\u30022020\u5e7412\u67083\u65e5\u5230\u671f[\u7b2c1\u9875]\u3002\n\u4e92\u8054\u7f51\u8349\u6848TLS\u52a0\u5bc6\u5ba2\u6237\u7aef\u4f60\u597d2020\u5e746\u6708\u76ee\u5f551\u3002\u7b80\u4ecb\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30023.\u7ea6\u5b9a\u548c\u5b9a\u4e49\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30024.\u6982\u8ff0\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30024 3.1.\u3002\u62d3\u6251\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30024 3.2.\u3002\u52a0\u5bc6\u7684ClientHello(ECH)\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30025 4.\u52a0\u5bc6\u7684ClientHello\u914d\u7f6e\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30026 5.&#34\uff1bENCRYPTED_CLIENT_HELLO&#34\uff1b\u6269\u5c55\u540d\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30027 6.\u6280\u672f\u6269\u5c55\u540d(&#34\uff1bech_nonce&34\uff1bExtension)\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30029 6.1.\u3002\u5408\u5e76\u5916\u90e8\u6269\u5c55\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30029 7.\u5ba2\u6237\u884c\u4e3a\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300210 7.1\u3002\u6b63\u5728\u53d1\u9001\u52a0\u5bc6\u7684ClientHello\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300210 7.2.\u3002\u63a8\u8350\u7684\u586b\u5145\u65b9\u6848\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300212 7.3.\u3002\u5904\u7406\u670d\u52a1\u5668\u54cd\u5e94\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300212 7.3.1\u3002\u63a5\u53d7ECH\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300213 7.3.2.\u3002\u5df2\u62d2\u7eddECH\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300213 7.3.3.\u3002\u4f60\u597d\uff0c\u91cd\u8bd5\u8bf7\u6c42\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300214 7.4.\u3002\u7ed9\u5ef6\u957f\u4ef6\u6d82\u4e0a\u6da6\u6ed1\u8102\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300215 8.\u9762\u5411\u5ba2\u6237\u7aef\u7684\u670d\u52a1\u5668\u884c\u4e3a\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300216 9.\u517c\u5bb9\u6027\u95ee\u9898\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300218 9.1.\u3002\u9519\u8bef\u914d\u7f6e\u548c\u90e8\u7f72\u95ee\u9898\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300218 9.2.\u3002\u4e2d\u95f4\u5305\u53a2\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300219 10.\u5b89\u5168\u8003\u8651\u4e8b\u9879\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300219 10.1.\u3002\u4e3a\u4ec0\u4e48\u660e\u6587DNS\u6b63\u5e38\uff1f\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300219 10.2.\u3002\u5ba2\u6237\u8ddf\u8e2a\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30022010.3.\u3002\u53ef\u9009\u7684\u8bb0\u5f55\u6458\u8981\u548c\u8bd5\u7528\u89e3\u5bc6\u3002\u3002\u3002\u3002\u3002\u30022010.4.\u3002\u76f8\u5173\u9690\u79c1\u6cc4\u9732\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u30022010.5.\u3002\u5bf9\u7167\u6807\u51c6\u8fdb\u884c\u6bd4\u8f83\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300221 10.5.1.\u3002\u7f13\u89e3\u91cd\u64ad\u653b\u51fb\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300221 10.5.2.\u3002\u907f\u514d\u5e7f\u6cdb\u90e8\u7f72\u7684\u5171\u4eab\u673a\u5bc6\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300221 10.5.3\u3002\u9632\u6b62\u57fa\u4e8eSNI\u7684DoS\u653b\u51fb\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300221 10.5.4.\u3002\u4e0d\u8981\u9732\u51fa\u6765\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300221 10.5.5\u3002\u5411\u524d\u4fdd\u5bc6\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300222 10.5.6\u3002\u9002\u5f53\u7684\u5b89\u5168\u73af\u5883\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300222 10.5.7\u3002\u62c6\u5206\u670d\u52a1\u5668\u6b3a\u9a97\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300222 10.5.8\u3002\u652f\u6301\u591a\u79cd\u534f\u8bae\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300222 10.6.\u3002\u586b\u5145\u7b56\u7565\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300222 10.7.\u3002\u4e3b\u52a8\u653b\u51fb\u7f13\u89e3\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300222 10.7.1\u3002\u5ba2\u6237\u53cd\u5e94\u653b\u51fb\u7f13\u89e3\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300223 10.7.2\u3002\u4f60\u597d\uff0c\u91cd\u8bd5\u8bf7\u6c42\uff0c\u52ab\u6301\u7f13\u89e3\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300224 10.7.3.\u3002\u6062\u590dPSK Oracle Mitigation\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300225 11.IANA\u8003\u8651\u56e0\u7d20\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300225 11.1.\u3002\u66f4\u65b0TLS ExtensionType\u6ce8\u518c\u8868\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300226 11.2.\u3002\u66f4\u65b0TLS\u8b66\u62a5\u6ce8\u518c\u8868\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300226 12.ECHConfig\u6269\u5c55\u6307\u5357\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300226 13.\u63d0\u8ff0\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300226 13.1.\u3002\u89c4\u8303\u6027\u53c2\u8003\u6587\u732e\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u300226 Rescorla\u7b49\u4eba\u30022020\u5e7412\u67083\u65e5\u5230\u671f[\u7b2c2\u9875]\u3002\n\u4e92\u8054\u7f51-\u8349\u7a3f\nInternet-Draft TLS\u52a0\u5bc6\u7684\u5ba2\u6237\u7aefHello 2020\u5e746\u67086.\u6269\u5c55\u540d\u5f53\u4f7f\u7528ECH\u65f6\uff0c\u5ba2\u6237\u7aef\u8fd8\u5fc5\u987b\u5c06\u7c7b\u578b\u4e3a&#34\uff1bech_nonce&34\uff1b\u7684\u6269\u5c55\u540d\u6dfb\u52a0\u5230ClientHelloInternal(\u4f46\u4e0d\u662f\u5916\u90e8\u7684ClientHello)\u3002\u6b64\u968f\u673a\u6570\u786e\u4fdd\u670d\u52a1\u5668\u7684\u52a0\u5bc6\u8bc1\u4e66\u53ea\u80fd\u7531\u53d1\u9001\u6b64ClientHello\u7684\u5b9e\u4f53\u8bfb\u53d6\u3002\u8be5\u6269\u5c55\u5b9a\u4e49\u5982\u4e0b\uff1aenum{ech_nonce(0xff03)\uff0c(65535)}ExtensionType\uff1bstruct{uint8 nonce[16]\uff1b}echnonce\uff1bnonce\u4eceHPKE\u52a0\u5bc6\u4e0a\u4e0b\u6587\u5bfc\u51fa\u768416\u5b57\u8282\u968f\u673a\u6570\u3002\u6709\u5173\u5176\u8ba1\u7b97\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7b2c7.1\u8282\u3002\u6700\u540e\uff0c\u7b2c7\u8282\u548c\u7b2c8\u8282\u4e2d\u7684\u8981\u6c42\u8981\u6c42\u5b9e\u73b0\u9664\u4e86\u8ddf\u8e2a\u7531\u524d\u4e00\u4e2a\u8fde\u63a5\u5efa\u7acb\u7684\u6bcf\u4e2aPSK\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u8ddf\u8e2a\u8be5\u8fde\u63a5\u662f\u5426\u4f7f\u7528&#34\uff1bech_Accept&#34\uff1b\u54cd\u5e94\u7c7b\u578b\u534f\u5546\u4e86\u6b64\u6269\u5c55\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd9\u88ab\u79f0\u4e3aECH PSK\u3002\u5426\u5219\uff0c\u5b83\u5c31\u662f\u975eECH PSK\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5411\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4f1a\u8bdd\u72b6\u6001\u6dfb\u52a0\u65b0\u5b57\u6bb5\u6765\u5b9e\u73b0\u30026.1.\u3002\u5408\u5e76\u5916\u90e8\u6269\u5c55\uff0c\u4e00\u4e9bTLS1.3\u6269\u5c55\u53ef\u80fd\u4f1a\u76f8\u5f53\u5927\uff0c\u5c06\u5b83\u4eec\u540c\u65f6\u5305\u542b\u5728\u5185\u90e8\u548c\u5916\u90e8ClientHello\u4e2d\u5c06\u5bfc\u81f4\u975e\u5e38\u5927\u7684\u6574\u4f53\u5927\u5c0f\u3002\u4e00\u4e2a\u7279\u522b\u75c5\u6001\u7684\u4f8b\u5b50\u662f\u540e\u91cf\u5b50\u7b97\u6cd5\u7684KEY_SHARE\u3002\u4e3a\u4e86\u51cf\u5c11\u91cd\u590d\u6269\u5c55\u540d\u7684\u5f71\u54cd\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u540d&#34\uff1bOUTER_EXTENSIONS&#34\uff1b\u3002enum{OUTER_EXTENSION(0xff04)\uff0c(65535)}ExtensionType\uff1bStruct{ExtensionType Out_Extensions&lt\uff1b2..254&gt\uff1b\uff1buint8\u54c8\u5e0c&lt\uff1b32..255&gt\uff1b}ExterExtensions\uff1bExterExtensions\uff1b\u53ea\u80fd\u5728ClientHelloInside\u4e2d\u4f7f\u7528\u3002\u5b83\u7531\u4e00\u4e2a\u6216\u591a\u4e2aExtensionType\u503c\u7ec4\u6210\uff0c\u6bcf\u4e2a\u503c\u5f15\u7528ClientHelloOuter\u4e2d\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u4ee5\u53ca\u5b8c\u6574ClientHelloInternal\u7684\u6458\u8981\u3002Rescorla\u7b49\u4eba\u30022020\u5e7412\u67083\u65e5\u5230\u671f[\u7b2c9\u9875]\u3002\n\u4e92\u8054\u7f51\u8349\u6848TLS\u52a0\u5bc6\u7684\u5ba2\u6237\u7aefHello 2020\u5e746\u6708\u5f53\u53d1\u9001ClientHello\u65f6\uff0c\u5ba2\u6237\u7aef\u9996\u5148\u8ba1\u7b97ClientHelloInternal\uff0c\u5305\u62ec\u4efb\u4f55PSK\u7ed1\u5b9a\u5668\uff0c\u7136\u540e\u53ef\u4ee5\u66ff\u6362\u5b83\u77e5\u9053\u5c06\u5728ClientHelloExternal\u4e2d\u590d\u5236\u7684\u6269\u5c55\u3002\u4e3a\u6b64\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u4e0e\u7528\u4e8e\u52a0\u5bc6ClienHelloInternal\u7684KDF\u76f8\u540c\u7684\u6563\u5217\u8ba1\u7b97\u6574\u4e2aClientHelloInternal\u6d88\u606f\u7684\u6563\u5217H\u3002\u7136\u540e\uff0c\u5ba2\u6237\u7aef\u5220\u9664\u548c\uff0c\u5e76\u7528\u5355\u4e2a&#34\uff1bOUTER_EXTENSIONS&34\uff1b\u6269\u5c55\u540d\u66ff\u6362ClientHelloInternal\u4e2d\u7684\u6269\u5c55\u540d\u3002OUTER_EXTENSIONS\u5217\u8868\u6309\u7167\u5b83\u4eec\u88ab\u5220\u9664\u7684\u987a\u5e8f\u5305\u62ec\u4eceClientHelloInternal\u4e2d\u5220\u9664\u7684\u90a3\u4e9b\u6269\u5c55\u3002\u8be5\u6563\u5217\u5305\u542b\u4e0a\u9762\u8ba1\u7b97\u7684\u5b8c\u6574\u7684ClientHelloInternal\u6563\u5217H\u3002\u6b64\u8fc7\u7a0b\u7531\u5ba2\u6237\u7aef\u53cd\u8f6c\u3002\n..", "note_en": "tls E. RescorlaInternet-Draft RTFM, Inc.Intended status: Experimental K. OkuExpires: 3 December 2020 Fastly N. Sullivan C.A. Wood Cloudflare 1 June 2020  TLS Encrypted Client Hello  draft-ietf-tls-esni-07Abstract This document describes a mechanism in Transport Layer Security (TLS) for encrypting a ClientHello message under a server public key.Status of This Memo This Internet-Draft is submitted in full conformance with the provisions of  BCP 78 and  BCP 79. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF). Note that other groups may also distribute working documents as Internet-Drafts. The list of current Internet- Drafts is at  https://datatracker.ietf.org/drafts/current/. Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as &#34;work in progress.&#34; This Internet-Draft will expire on 3 December 2020.Copyright Notice Copyright (c) 2020 IETF Trust and the persons identified as the document authors. All rights reserved. This document is subject to  BCP 78 and the IETF Trust&#39;s Legal Provisions Relating to IETF Documents ( https://trustee.ietf.org/  license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the  Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License. Rescorla, et al. Expires 3 December 2020 [Page 1]\n  Internet-Draft TLS Encrypted Client Hello June 2020Table of Contents  1. Introduction . . . . . . . . . . . . . . . . . . . . . . . .  3  2. Conventions and Definitions . . . . . . . . . . . . . . . . .  4  3. Overview . . . . . . . . . . . . . . . . . . . . . . . . . .  4  3.1. Topologies . . . . . . . . . . . . . . . . . . . . . . .  4  3.2. Encrypted ClientHello (ECH) . . . . . . . . . . . . . . .  5  4. Encrypted ClientHello Configuration . . . . . . . . . . . . .  6  5. The &#34;encrypted_client_hello&#34; extension . . . . . . . . . . .  7  6. The &#34;ech_nonce&#34; extension . . . . . . . . . . . . . . . . . .  9  6.1. Incorporating Outer Extensions . . . . . . . . . . . . .  9  7. Client Behavior . . . . . . . . . . . . . . . . . . . . . . .  10  7.1. Sending an encrypted ClientHello . . . . . . . . . . . .  10  7.2. Recommended Padding Scheme . . . . . . . . . . . . . . .  12  7.3. Handling the server response . . . . . . . . . . . . . .  12  7.3.1. Accepted ECH . . . . . . . . . . . . . . . . . . . .  13  7.3.2. Rejected ECH . . . . . . . . . . . . . . . . . . . .  13  7.3.3. HelloRetryRequest . . . . . . . . . . . . . . . . . .  14  7.4. GREASE extensions . . . . . . . . . . . . . . . . . . . .  15  8. Client-Facing Server Behavior . . . . . . . . . . . . . . . .  16  9. Compatibility Issues . . . . . . . . . . . . . . . . . . . .  18  9.1. Misconfiguration and Deployment Concerns . . . . . . . .  18  9.2. Middleboxes . . . . . . . . . . . . . . . . . . . . . . .  19  10. Security Considerations . . . . . . . . . . . . . . . . . . .  19  10.1. Why is cleartext DNS OK? . . . . . . . . . . . . . . . .  19  10.2. Client Tracking . . . . . . . . . . . . . . . . . . . .  20  10.3. Optional Record Digests and Trial Decryption . . . . . .  20  10.4. Related Privacy Leaks . . . . . . . . . . . . . . . . .  20  10.5. Comparison Against Criteria . . . . . . . . . . . . . .  21  10.5.1. Mitigate against replay attacks . . . . . . . . . .  21  10.5.2. Avoid widely-deployed shared secrets . . . . . . . .  21  10.5.3. Prevent SNI-based DoS attacks . . . . . . . . . . .  21  10.5.4. Do not stick out . . . . . . . . . . . . . . . . . .  21  10.5.5. Forward secrecy . . . . . . . . . . . . . . . . . .  22  10.5.6. Proper security context . . . . . . . . . . . . . .  22  10.5.7. Split server spoofing . . . . . . . . . . . . . . .  22  10.5.8. Supporting multiple protocols . . . . . . . . . . .  22  10.6. Padding Policy . . . . . . . . . . . . . . . . . . . . .  22  10.7. Active Attack Mitigations . . . . . . . . . . . . . . .  22  10.7.1. Client Reaction Attack Mitigation . . . . . . . . .  23  10.7.2. HelloRetryRequest Hijack Mitigation . . . . . . . .  24  10.7.3. Resumption PSK Oracle Mitigation . . . . . . . . . .  25  11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  25  11.1. Update of the TLS ExtensionType Registry . . . . . . . .  26  11.2. Update of the TLS Alert Registry . . . . . . . . . . . .  26  12. ECHConfig Extension Guidance . . . . . . . . . . . . . . . .  26  13. References . . . . . . . . . . . . . . . . . . . . . . . . .  26  13.1. Normative References . . . . . . . . . . . . . . . . . .  26 Rescorla, et al. Expires 3 December 2020 [Page 2]\n  Internet-Draft TLS Encrypted Client Hello June 2020  13.2. Informative References . . . . . . . . . . . . . . . . .  27  Appendix A. Alternative SNI Protection Designs . . . . . . . . .  28  A.1. TLS-layer . . . . . . . . . . . . . . . . . . . . . . . .  28  A.1.1. TLS in Early Data . . . . . . . . . . . . . . . . . .  28  A.1.2. Combined Tickets . . . . . . . . . . . . . . . . . .  29  A.2. Application-layer . . . . . . . . . . . . . . . . . . . .  29  A.2.1. HTTP/2 CERTIFICATE Frames . . . . . . . . . . . . . .  29  Appendix B. Total Client Hello Encryption . . . . . . . . . . .  29  Appendix C. Acknowledgements . . . . . . . . . . . . . . . . . .  30 Authors&#39; Addresses . . . . . . . . . . . . . . . . . . . . . . .  30  1. Introduction DISCLAIMER: This is very early a work-in-progress design and has not yet seen significant (or really any) security analysis. It should not be used as a basis for building production systems. Although TLS 1.3 [ RFC8446] encrypts most of the handshake, including the server certificate, there are several ways in which an on-path attacker can learn private information about the connection. The cleartext Server Name Indication (SNI) extension in ClientHello messages, which leaks the target domain for a given connection, is perhaps the most sensitive information unencrypted in TLS 1.3. The target domain may also be visible through other channels, such as cleartext client DNS queries, visible server IP addresses (assuming the server does not use domain-based virtual hosting), or other indirect mechanisms such as traffic analysis. DoH [ I-D.ietf-doh-dns-over-https] and DPRIVE [ RFC7858] [ RFC8094] provide mechanisms for clients to conceal DNS lookups from network inspection, and many TLS servers host multiple domains on the same IP address. In such environments, the SNI remains the primary explicit signal used to determine the server&#39;s identity. The TLS WG has extensively studied the problem of protecting the SNI, but has been unable to develop a completely generic solution. [ I-D.ietf-tls-sni-encryption] provides a description of the problem space and some of the proposed techniques. One of the more difficult problems is &#34;Do not stick out&#34; ([ I-D.ietf-tls-sni-encryption], Section 3.4): if only sensitive or private services use SNI encryption, then SNI encryption is a signal that a client is going to such a service. For this reason, much recent work has focused on concealing the fact that the SNI is being protected. Unfortunately, the result often has undesirable performance consequences, incomplete coverage, or both. The design in this document takes a different approach: it assumes that private origins will co-locate with or hide behind a provider Rescorla, et al. Expires 3 December 2020 [Page 3]\n  Internet-Draft TLS Encrypted Client Hello June 2020 (CDN, application server, etc.) which can protect SNIs for all of the domains it hosts. As a result, SNI protection does not indicate that the client is attempting to reach a private origin, but only that it is going to a particular service provider, which the observer could already tell from the visible IP address. The design in this document introduces a new extension, called Encrypted Client Hello (ECH), which allows clients to encrypt the entirety of their ClientHello to a supporting server. This protects the SNI and other potentially sensitive fields, such as the ALPN list. This extension is only supported with (D)TLS 1.3 [ RFC8446] and newer versions of the protocol.  2. Conventions and Definitions The key words &#34;MUST&#34;, &#34;MUST NOT&#34;, &#34;REQUIRED&#34;, &#34;SHALL&#34;, &#34;SHALL NOT&#34;, &#34;SHOULD&#34;, &#34;SHOULD NOT&#34;, &#34;RECOMMENDED&#34;, &#34;NOT RECOMMENDED&#34;, &#34;MAY&#34;, and &#34;OPTIONAL&#34; in this document are to be interpreted as described in  BCP  14 [ RFC2119] [ RFC8174] when, and only when, they appear in all capitals, as shown here. All TLS notation comes from  [RFC8446], Section\u00a03.  3. Overview This document is designed to operate in one of two primary topologies shown below, which we call &#34;Shared Mode&#34; and &#34;Split Mode&#34;  3.1. Topologies +---------------------+ | | | 2001:DB8::1111 | | | Client &lt;-----&gt; | private.example.org | | | | public.example.com | | | +---------------------+ Server Figure 1: Shared Mode Topology In Shared Mode, the provider is the origin server for all the domains whose DNS records point to it and clients form a TLS connection directly to that provider, which has access to the plaintext of the connection. Rescorla, et al. Expires 3 December 2020 [Page 4]\n  Internet-Draft TLS Encrypted Client Hello June 2020 +--------------------+ +---------------------+ | | | | | 2001:DB8::1111 | | 2001:DB8::EEEE | Client &lt;------------------------------------&gt;| | | public.example.com | | private.example.com | | | | | +--------------------+ +---------------------+ Client-Facing Server Backend Server Figure 2: Split Mode Topology In Split Mode, the provider is _not_ the origin server for private domains. Rather the DNS records for private domains point to the provider, and the provider&#39;s server relays the connection back to the backend server, which is the true origin server. The provider does not have access to the plaintext of the connection.  3.2. Encrypted ClientHello (ECH) ECH works by encrypting the entire ClientHello, including the SNI and any additional extensions such as ALPN. This requires that each provider publish a public key and metadata which is used for ClientHello encryption for all the domains for which it serves directly or indirectly (via Split Mode). This document defines the format of the SNI encryption public key and metadata, referred to as an ECH configuration, and delegates DNS publication details to [ HTTPSSVC], though other delivery mechanisms are possible. In particular, if some of the clients of a private server are applications rather than Web browsers, those applications might have the public key and metadata preconfigured. When a client wants to form a TLS connection to any of the domains served by an ECH-supporting provider, it constructs a ClientHello in the regular fashion containing the true SNI value (ClientHelloInner) and then encrypts it using the public key for the provider. It then constructs a new ClientHello (ClientHelloOuter) with an innocuous SNI (and potentially innocuous versions of other extensions such as ALPN [ RFC7301]) and containing the encrypted ClientHelloInner as an extension. It sends ClientHelloOuter to the server. Upon receiving ClientHelloOuter, the server can then decrypt ClientHelloInner and either terminate the connection (in Shared Mode) or forward it to the backend server (in Split Mode). Note that both ClientHelloInner and ClientHelloOuter are both valid, complete ClientHello messages. ClientHelloOuter carries an encrypted representation of ClientHelloInner in a &#34;encrypted_client_hello&#34; extension, defined in  Section 5. Rescorla, et al. Expires 3 December 2020 [Page 5]\n  Internet-Draft TLS Encrypted Client Hello June 2020  4. Encrypted ClientHello Configuration ClientHello encryption configuration information is conveyed with the following ECHConfigs structure. opaque HpkePublicKey&lt;1..2^16-1&gt;; uint16 HkpeKemId; // Defined in I-D.irtf-cfrg-hpke uint16 HkpeKdfId; // Defined in I-D.irtf-cfrg-hpke uint16 HkpeAeadId; // Defined in I-D.irtf-cfrg-hpke struct { HkpeKdfId kdf_id; HkpeAeadId aead_id; } HpkeCipherSuite; struct { opaque public_name&lt;1..2^16-1&gt;; HpkePublicKey public_key; HkpeKemId kem_id; HpkeCipherSuite cipher_suites&lt;4..2^16-2&gt;; uint16 maximum_name_length; Extension extensions&lt;0..2^16-1&gt;; } ECHConfigContents; struct { uint16 version; uint16 length; select (ECHConfig.version) { case 0xff07: ECHConfigContents; } } ECHConfig; ECHConfig ECHConfigs&lt;1..2^16-1&gt;; The ECHConfigs structure contains one or more ECHConfig structures in decreasing order of preference. This allows a server to support multiple versions of ECH and multiple sets of ECH parameters. The ECHConfig structure contains the following fields: version The version of the structure. For this specification, that value SHALL be 0xff07. Clients MUST ignore any ECHConfig structure with a version they do not understand. contents An opaque byte string whose contents depend on the version Rescorla, et al. Expires 3 December 2020 [Page 6]\n  Internet-Draft TLS Encrypted Client Hello June 2020 of the structure. For this specification, the contents are an ECHConfigContents structure. The ECHConfigContents structure contains the following fields: public_name The non-empty name of the entity trusted to update these encryption keys. This is used to repair misconfigurations, as described in  Section 7.3. public_key The HPKE [ I-D.irtf-cfrg-hpke] public key which can be used by the client to encrypt the ClientHello. kem_id The HPKE [ I-D.irtf-cfrg-hpke] KEM identifier corresponding to public_key. Clients MUST ignore any ECHConfig structure with a key using a KEM they do not support. cipher_suites The list of HPKE [ I-D.irtf-cfrg-hpke] AEAD and KDF identifier pairs clients can use for encrypting the ClientHello. maximum_name_length The largest name the server expects to support, if known. If this value is not known it can be set to zero, in which case clients SHOULD use the inner ClientHello padding scheme described below. That could happen if wildcard names are in use, or if names can be added or removed from the anonymity set during the lifetime of a particular resource record value. extensions A list of extensions that the client can take into consideration when generating a ClientHello message. The purpose of the field is to provide room for additional functionality in the future. See  Section 12 for guidance on what type of extensions are appropriate for this structure. The format is defined in  [RFC8446], Section\u00a04.2. The same interpretation rules apply: extensions MAY appear in any order, but there MUST NOT be more than one extension of the same type in the extensions block. An extension can be tagged as mandatory by using an extension type codepoint with the high order bit set to 1. A client which receives a mandatory extension they do not understand MUST reject the ECHConfig content. Clients MUST parse the extension list and check for unsupported mandatory extensions. If an unsupported mandatory extension is present, clients MUST reject the ECHConfig value.  5. The &#34;encrypted_client_hello&#34; extension The encrypted ClientHelloInner is carried in an &#34;encrypted_client_hello&#34; extension, defined as follows: Rescorla, et al. Expires 3 December 2020 [Page 7]\n  Internet-Draft TLS Encrypted Client Hello June 2020 enum { encrypted_client_hello(0xff02), (65535) } ExtensionType; For clients (in ClientHello), this extension contains the following ClientEncryptedCH structure: struct { HpkeCipherSuite suite; opaque record_digest&lt;0..2^16-1&gt;; opaque enc&lt;1..2^16-1&gt;; opaque encrypted_ch&lt;1..2^16-1&gt;; } ClientEncryptedCH; suite The HpkeCipherSuite cipher suite used to encrypt ClientHelloInner. This MUST match a value provided in the corresponding ECHConfig.cipher_suites list. record_digest A cryptographic hash of the ECHConfig structure from which the ECH key was obtained, i.e., from the first byte of &#34;version&#34; to the end of the structure. This hash is computed using the hash function associated with &#34;suite&#34;, i.e., the corresponding HPKE KDF algorithm hash. enc The HPKE encapsulated key, used by servers to decrypt the corresponding encrypted_ch field. encrypted_ch The serialized and encrypted ClientHelloInner structure, AEAD-encrypted using HPKE with the selected KEM, KDF, and AEAD algorithm and key generated as described below. If the server accepts ECH, it does not send this extension. If it rejects ECH, then it sends the following structure in EncryptedExtensions: struct { ECHConfigs retry_configs; } ServerEncryptedCH; retry_configs An ECHConfigs structure containing one or more ECHConfig structures in decreasing order of preference that the client should use on subsequent connections to encrypt the ClientHelloInner structure. This protocol also defines the &#34;ech_required&#34; alert, which is sent by the client when it offered an &#34;encrypted_client_hello&#34; extension which was not accepted by the server. Rescorla, et al. Expires 3 December 2020 [Page 8]\n  Internet-Draft TLS Encrypted Client Hello June 2020  6. The &#34;ech_nonce&#34; extension When using ECH, the client MUST also add an extension of type &#34;ech_nonce&#34; to the ClientHelloInner (but not to the outer ClientHello). This nonce ensures that the server&#39;s encrypted Certificate can only be read by the entity which sent this ClientHello. This extension is defined as follows: enum { ech_nonce(0xff03), (65535) } ExtensionType; struct { uint8 nonce[16]; } ECHNonce; nonce A 16-byte nonce exported from the HPKE encryption context. See  Section 7.1 for details about its computation. Finally, requirements in  Section 7 and  Section 8 require implementations to track, alongside each PSK established by a previous connection, whether the connection negotiated this extension with the &#34;ech_accept&#34; response type. If so, this is referred to as an &#34;ECH PSK&#34;. Otherwise, it is a &#34;non-ECH PSK&#34;. This may be implemented by adding a new field to client and server session states.  6.1. Incorporating Outer Extensions Some TLS 1.3 extensions can be quite large and having them both in the inner and outer ClientHello will lead to a very large overall size. One particularly pathological example is &#34;key_share&#34; with post-quantum algorithms. In order to reduce the impact of duplicated extensions, the client may use the &#34;outer_extensions&#34; extension. enum { outer_extension(0xff04), (65535) } ExtensionType; struct { ExtensionType outer_extensions&lt;2..254&gt;; uint8 hash&lt;32..255&gt;; } OuterExtensions; OuterExtensions MUST only be used in ClientHelloInner. It consists of one or more ExtensionType values, each of which reference an extension in ClientHelloOuter, and a digest of the complete ClientHelloInner. Rescorla, et al. Expires 3 December 2020 [Page 9]\n  Internet-Draft TLS Encrypted Client Hello June 2020 When sending ClientHello, the client first computes ClientHelloInner, including any PSK binders, and then MAY substitute extensions which it knows will be duplicated in ClientHelloOuter. To do so, the client computes a hash H of the entire ClientHelloInner message with the same hash as for the KDF used to encrypt ClienHelloInner. Then, the client removes and and replaces extensions from ClientHelloInner with a single &#34;outer_extensions&#34; extension. The list of outer_extensions include those which were removed from ClientHelloInner, in the order in which they were removed. The hash contains the full ClientHelloInner hash H computed above. This process is reversed by client\n......", "posttime": "2020-06-15 05:28:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u52a0\u5bc6,encrypted,\u670d\u52a1\u5668", "title": "TLS\u52a0\u5bc6\u5ba2\u6237\u7aefHello(\u4ee5\u524d\u79f0\u4e3aESNI)\u8fdb\u5165\u8349\u7a3f\u72b6\u6001", "title_en": "TLS Encrypted Client Hello (formerly ESNI) Enters Draft Status", "transed": 1, "url": "https://tools.ietf.org/html/draft-ietf-tls-esni-07", "via": "", "real_tags": ["\u52a0\u5bc6", "encrypted", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "15f303f6633ba3cb6fa08eb7d657defc.jpg", "infoid": 1006574, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u957f\u671f\u4ee5\u6765\uff0c\u7535\u5f71\u5386\u53f2\u5b66\u5bb6\u4e00\u76f4\u8ba4\u4e3a\u201c\u4f20\u8bb0\u5973\u5b69\u201d\u5f17\u6d1b\u4f26\u65af\u00b7\u7279\u7eb3\u662f\u7b2c\u4e00\u4f4d\u7535\u5f71\u660e\u661f\u3002\u7136\u800c\uff0c\u4e00\u9879\u65b0\u7684\u7814\u7a76\u8868\u660e\uff0c\u83ab\u91cc\u65af\u00b7\u79d1\u65af\u7279\u6d1b\u662f\u7b2c\u4e00\u4f4d\u5e7f\u4e3a\u4eba\u77e5\u7684\u7535\u5f71\u660e\u661f\u3002\u7279\u91cc\u00b7\u8212\u5c14\u66fc\u7684\u7535\u5f71\u201c\u7b2c\u4e00\u5bb6\u5ead\uff1a\u79d1\u65af\u7279\u6d1b\u7684\u4e0d\u4e3a\u4eba\u77e5\u7684\u6545\u4e8b\u201d\u5f15\u7528\u4e86\u201c\u7535\u5f71\u6545\u4e8b\u6742\u5fd7\u201d1912\u5e74\u7684\u4e00\u9879\u6c11\u610f\u8c03\u67e5\uff0c\u663e\u793a\u79d1\u65af\u7279\u6d1b\u4e0d\u4ec5\u662f\u201c\u6700\u53d7\u6b22\u8fce\u7684\u7403\u5458\u201d\uff0c\u800c\u4e14\u4ed6\u7684\u9009\u7968\u6bd4\u8457\u540d\u660e\u661f\u5f17\u6d1b\u4f26\u65af\u00b7\u52b3\u4f26\u65af\u548c\u5f17\u6d1b\u4f26\u65af\u00b7\u7279\u7eb3\u7684\u603b\u548c\u8fd8\u8981\u591a\u30021924\u5e74\uff0cPhotoplay\u5c06\u4ed6\u547d\u540d\u4e3a\u201c\u7535\u5f71\u754c\u6700\u53d7\u8ba4\u53ef\u7684\u660e\u661f\u201d\u3002\n\u83ab\u91cc\u65af\u00b7\u79d1\u65af\u7279\u6d1b\u4e8e1877\u5e74\u51fa\u751f\u4e8e\u5339\u5179\u5821\uff0c\u5f53\u65f6\u8fd9\u5ea7\u57ce\u5e02\u6b63\u5904\u4e8e\u56f0\u96be\u65f6\u671f\u3002\u8d2b\u7a77\u3001\u751f\u75c5\u7684\u78e8\u574a\u5de5\u4eba\u6bd4\u6bd4\u7686\u662f\uff0c\u9965\u8352\u8086\u8650\u3002\u4ed6\u7684\u7236\u4eb2\u572825\u5c81\u65f6\u53bb\u4e16\uff1b\u4ed6\u7684\u6bcd\u4eb2\u662f\u4e00\u4f4d\u5be1\u5987\uff0c\u79df\u4e86\u4e00\u5ea7\u5927\u623f\u5b50\uff0c\u6536\u7559\u4e86\u5bc4\u5bbf\u8005-\u90fd\u662f\u7231\u5c14\u5170\u5929\u4e3b\u6559\u7684\u78e8\u574a\u5de5\u4eba\u3002\u5339\u5179\u5821\u4e00\u76f4\u662f\u620f\u5267\u7684\u62e5\u62a4\u8005\uff1b\u7136\u800c\uff0c\u5230\u4e8619\u4e16\u7eaa60\u5e74\u4ee3\uff0c\u8457\u540d\u7684\u5339\u5179\u5821\u5267\u9662\u201c\u7981\u6b62\u4e0a\u6d41\u793e\u4f1a\u8fdb\u5165\u201d\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u6210\u4e3a\u201c\u5f53\u5730\u6d41\u6c13\u7684\u4e13\u5c5e\u9886\u57df-\u5728\u8868\u6f14\u671f\u95f4\u516c\u5f00\u996e\u9152\uff0c\u81ea\u59cb\u81f3\u7ec8\u884c\u4e3a\u98a0\u8986\u7684\u5de5\u4eba\u9636\u7ea7\u786c\u6c49\u201d\u3002\u8fd9\u4e2a\u5c0f\u9547\u8feb\u5207\u9700\u8981\u4e00\u6b21\u6587\u5316\u6539\u9769\u3002\n1894\u5e74\uff0c\u83ab\u91cc\u65af\u88ab\u5438\u5f15\u5230\u821e\u53f0\u4e0a\uff0c\u627e\u5230\u4e86\u4ed6\u7684\u7b2c\u4e00\u4efd\u5a31\u4e50\u4e1a\u5de5\u4f5c\uff0c\u6f14\u5531\u201c\u6254\u7816\u5934\u7684\u7c73\u514b\u201d(The Mick Who Well The Brick)\u3002\u8bb8\u591a\u7231\u5c14\u5170\u79fb\u6c11\u559c\u6b22\u6742\u800d\uff0c\u5b83\u5f88\u5feb\u5c31\u6210\u4e86\u4eba\u6c11\u5267\u9662\u3002\u8fd9\u4e9b\u8868\u6f14\u5927\u591a\u662f\u559c\u5267\uff0c\u4e5f\u6709\u5c11\u8bb8\u4f53\u80b2\u8fd0\u52a8\uff0c\u6bd4\u5982\u62f3\u51fb\u3002\u83ab\u91cc\u65af\u8fd8\u66fe\u4e3a\u54c8\u91cc\u00b7\u6234\u7ef4\u65af(Harry Davis)\u5de5\u4f5c\uff0c\u54c8\u91cc\u00b7\u6234\u7ef4\u65af\u662f\u4e00\u4f4d\u5a31\u4e50\u4f01\u4e1a\u5bb6\uff0c\u7ecf\u8425\u7740\u4ece\u535a\u7269\u9986\u548c\u5267\u9662\u5230\u65e9\u671f\u4e94\u5206\u4e4b\u591c\u7684\u4e00\u5207\u4e8b\u52a1\u3002\u8981\u8bc1\u660e\u4ed6\u4f5c\u4e3a\u8868\u6f14\u8005\u7684\u4ef7\u503c\uff0c\u83ab\u91cc\u65af\u9700\u8981\u5728\u6c99\u9f99\u3001\u5267\u573a\u548c\u201c\u80ae\u810f\u7684\u793c\u5802\u201d\u91cc\u78e8\u7ec3\u591a\u5e74\u624d\u80fd\u8bc1\u660e\u4ed6\u4f5c\u4e3a\u4e00\u540d\u8868\u6f14\u8005\u7684\u4ef7\u503c\u3002\n1902\u5e74\uff0c\u83ab\u91cc\u65af\u4e0e\u6885\u00b7\u963f\u5c14\u8212\u514b\u7ed3\u5a5a\uff0c\u540e\u8005\u7684\u7236\u4eb2\u618e\u6068\u6f14\u827a\u8fd9\u4e00\u804c\u4e1a\u3002\u5c3d\u7ba1\u5339\u5179\u5821\u7684\u5a74\u513f\u6b7b\u4ea1\u7387\u662f\u5168\u56fd\u6700\u9ad8\u7684\u4e4b\u4e00\uff0c\u4f46\u6885\u751f\u4e0b\u4e86\u4e24\u4e2a\u5065\u5eb7\u7684\u5973\u513f\uff0c1903\u5e74\u7684\u591a\u6d1b\u4e3d\u4e1d\u548c1906\u5e74\u7684\u6d77\u7433\uff0c\u4e24\u4eba\u90fd\u6ce8\u5b9a\u8981\u53bb\u6f14\u827a\u5708\u3002\u83ab\u91cc\u65af\u662f\u4e00\u540d\u8001\u724c\u821e\u53f0\u5267\u6f14\u5458\uff0c\u4f46\u7535\u5f71\u662f\u65e5\u76ca\u589e\u957f\u7684\u8d8b\u52bf\uff0c\u4e5f\u662f\u62a5\u916c\u66f4\u9ad8\u7684\u8d8b\u52bf\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4ece\u4e8b\u7535\u5f71\u5de5\u4f5c\u88ab\u9ad8\u5c1a\u7684\u5267\u9662\u89c2\u4f17\u89c6\u4e3a\u201c\u827a\u672f\u91cd\u7f6a\u201d\u3002\u83ab\u91cc\u65af\u5bf9\u8fd9\u79cd\u65b0\u5a92\u4f53\u5f88\u611f\u5174\u8da3\uff0c\u4ed6\u4e8e1907\u5e74\u5f00\u59cb\u4e3aVitagraph\u5bfc\u6f14\u8303\u6234\u514b\u00b7\u5e03\u9c81\u514b(Van Dyke Brooke)\u5de5\u4f5c\u3002\n\u83ab\u91cc\u65af\u5f88\u5feb\u5c31\u7740\u624b\u6539\u53d8\u7535\u5f71\u4e1a\u3002\u5728\u821e\u53f0\u4e0a\uff0c\u8fd9\u4f4d\u6f14\u5458\u7684\u5de5\u4f5c\u53ea\u662f\u8868\u6f14\uff0c\u4f46\u5f53\u83ab\u91cc\u65af\u5230\u8fbeVitagraph\u65f6\uff0c\u4ed6\u770b\u5230\u6f14\u5458\u4eec\u5728\u4e0d\u5728\u955c\u5934\u524d\u65f6\u6b63\u5728\u505a\u8bb8\u591a\u5176\u4ed6\u7684\u4efb\u52a1\u3002\u8457\u540d\u7684\u201c\u4f20\u8bb0\u5973\u5b69\u201d\u5f17\u6d1b\u4f26\u65af\u00b7\u7279\u7eb3\u56de\u5fc6\u8bf4\uff0c\u5f53\u5979\u4e0d\u8868\u6f14\u7684\u65f6\u5019\uff0c\u5979\u5728\u603b\u529e\u516c\u5ba4\u8bb0\u8d26\uff0c\u53c2\u52a0\u5546\u52a1\u4f1a\u8bae\uff0c\u5f00\u652f\u7968\u3002\u5728\u5236\u7247\u5382\u7248\u672c\u7684\u201c\u7f57\u5bc6\u6b27\u4e0e\u6731\u4e3d\u53f6\u201d\u4e2d\u9970\u6f14\u7f57\u5bc6\u6b27\u7684\u4fdd\u7f57\u00b7\u6f58\u6cfd\u4e0d\u5f97\u4e0d\u5efa\u9020\u81ea\u5df1\u7684\u9633\u53f0\u3002\u5f53\u83ab\u91cc\u65af\u88ab\u8058\u4e3a\u6f14\u5458\u65f6\uff0c\u4ed6\u5f88\u5feb\u5c31\u88ab\u5b89\u6392\u53bb\u642d\u5efa\u5e03\u666f\u3002\u6d77\u4f26\u8bb0\u5f97\uff0c\u201c\u83ab\u91cc\u65af\u7528\u5f20\u5f00\u7684\u9f3b\u5b54\u6253\u91cf\u7740\u8fd9\u4e2a\u5351\u9119\u7684\u573a\u666f\u3002\u4ed6\u4e0d\u5c51\u4e00\u987e\u5730\u62d2\u7edd\u4e86Vitagraph\u7684\u4e00\u4f4d\u5408\u4f19\u4eba\u7ed9\u4ed6\u7684\u722a\u9524\u3002\u83ab\u91cc\u65af\u5bf9\u6b64\u4e0d\u5c51\u4e00\u987e\uff0cVitagraph\u7684\u9ad8\u7ba1J\u00b7\u65af\u56fe\u5c14\u7279\u00b7\u5e03\u83b1\u514b\u987f\u6700\u7ec8\u5c48\u670d\u4e86\u3002\u6ca1\u8fc7\u591a\u4e45\uff0c\u6728\u5320\u5c31\u88ab\u96c7\u4f63\u4e86\uff0c\u6f14\u5458\u4eec\u53ef\u4ee5\u5168\u795e\u8d2f\u6ce8\u5730\u8868\u6f14\u4e86\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u94f6\u5e55\u5929\u624d\u5728\u638c\u63a7\u5c40\u9762\uff1a\u591a\u6d1b\u96f7\u65af\u8bb0\u5f97\u4e00\u4f4d\u5bfc\u6f14\u544a\u8bc9\u5979\uff0c\u7535\u5f71\u80a1\u7968\u4ecd\u7136\u6bd4\u6f14\u5458\u66f4\u503c\u94b1\u3002\n\u8212\u5c14\u66fc\u8ba4\u4e3a\uff0c\u201cD\u00b7W\u00b7\u683c\u91cc\u83f2\u65af\u4e3a\u7535\u5f71\u5bfc\u6f14\u6240\u505a\u7684\u4e8b\u60c5[\u2026]\u3002\u5bf9\u4e8e\u94f6\u5e55\u8868\u6f14\uff0c\u83ab\u91cc\u65af\u505a\u5230\u4e86\uff1a\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u628a\u6807\u51c6\u63d0\u9ad8\u5230\u4e86\u4e00\u4e2a\u66f4\u9ad8\u7684\u6807\u51c6\uff0c\u5f88\u5feb\u5c31\u6210\u4e3a\u4e86\u5e38\u6001\u3002\u4ed6\u6bd4\u683c\u91cc\u83f2\u65af\u65e9\u4e86\u4e00\u5e74\uff0c\u683c\u91cc\u83f2\u65af\u76f4\u52301908\u5e74\u624d\u5f00\u59cb\u4e3aBiograph\u5de5\u4f5c\u3002\u201c\u3002\u83ab\u91cc\u65af\u6539\u53d8\u4e86\u73a9\u5bb6\u5728\u955c\u5934\u524d\u7684\u884c\u4e3a\u65b9\u5f0f\u3002\u56e0\u4e3a\u6447\u52a8\u901f\u5ea6\u56e0\u6444\u5f71\u5e08\u800c\u5f02\uff0c\u5c31\u50cf\u653e\u6620\u901f\u5ea6\u56e0\u5f71\u9662\u800c\u5f02\u4e00\u6837\uff0c\u65e0\u58f0\u7684\u94f6\u5e55\u4e0a\u4e5f\u6709\u5f88\u5927\u8303\u56f4\u7684\u8fd0\u52a8\u3002\u4e00\u4e9b\u53c2\u5c55\u5546\u751a\u81f3\u52a0\u5feb\u4e86\u4ed6\u4eec\u7684\u7248\u753b\u901f\u5ea6\uff0c\u4ee5\u4fbf\u5728\u4e00\u5929\u5185\u5bb9\u7eb3\u66f4\u591a\u7684\u653e\u6620\u3002\u6b63\u5982\u8212\u5c14\u66fc\u6240\u5c55\u793a\u7684\u90a3\u6837\uff0c\u83ab\u91cc\u65af\u5728\u5f53\u5730\u7684\u5339\u5179\u5821\u516c\u62a5\u548c\u5168\u56fd\u7684Photoplay\u4e2d\u88ab\u8a89\u4e3a\u5b9e\u65bd\u4e86\u4e00\u79cd\u66f4\u6162\u7684\u8868\u6f14\u98ce\u683c\u7684\u660e\u661f\uff0c\u5728\u5c4f\u5e55\u4e0a\u64ad\u653e\u5f97\u66f4\u903c\u771f\u3002\u5230\u4e861910\u5e74\uff0cVitagraph\u5c06\u83ab\u91cc\u65af\u5217\u4e3a\u8be5\u8282\u76ee\u7684\u660e\u661f\uff0c\u5e76\u914d\u4e0a\u8bf8\u5982\u201c\u4e0eMaurice Costello\u4e00\u8d77\u7684Vitagraph\u4e4b\u591c\u201d\u4e4b\u7c7b\u7684\u5ba3\u4f20\u5e7f\u544a\u3002\u6bcf\u5f53\u9700\u8981\u5b69\u5b50\u7684\u65f6\u5019\uff0c\u6d77\u4f26\u548c\u591a\u6d1b\u4e3d\u4e1d\u4e5f\u4f1a\u5f97\u5230\u989d\u5916\u7684\u5c4f\u5e55\u65f6\u95f4\u3002\n\u81ea\u4ece\u51fa\u7248\u7269\u5f00\u59cb\u5173\u6ce8\u83ab\u91cc\u65af\u7684\u5bb6\u5ead\u751f\u6d3b\u540e\uff0c\u4ed6\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u5c31\u5f00\u59cb\u4e0b\u964d\u3002\u5168\u4e16\u754c\u7684\u8ff7\u59b9\u4eec\u7684\u5fc3\u90fd\u5728\u8df3\u52a8\uff0c\u4e0d\u5f97\u4e0d\u627e\u4e00\u4e2a\u65b0\u7684\u3001\u672a\u5a5a\u7684\u65e5\u573a\u5076\u50cf\u3002\u5f53\u4ed6\u66b4\u529b\u9157\u9152\u7684\u6d88\u606f\u4f20\u51fa\u65f6\uff0c\u4ed6\u7684\u58f0\u8a89\u4e5f\u53d7\u5230\u4e86\u635f\u5bb3\u3002\u5230\u4e861913\u5e74\uff0c\u4ed6\u7684\u660e\u661f\u6b63\u5728\u8fc5\u901f\u892a\u8272\uff0c1914\u5e74\u4e4b\u540e\uff0cVitagraph\u4e0d\u518d\u4f7f\u7528\u4ed6\u4f5c\u4e3a\u4e3b\u8981\u7403\u5458\u3002\u83ab\u91cc\u65af\u5728\u7535\u5f71\u548c\u5267\u9662\u4e4b\u95f4\u6765\u56de\u5954\u6ce2\uff0c\u53d1\u73b0\u6bcf\u90e8\u4f5c\u54c1\u7684\u6536\u8d39\u90fd\u8f83\u4f4e\u3002\u8fd9\u5bb6\u4eba\u5f88\u5feb\u53d1\u73b0\u81ea\u5df1\u88ab\u5b64\u7acb\u5728\u4ed6\u4eec\u7684\u957f\u5c9b\u5e84\u56ed\u91cc\uff0c\u53ea\u6709\u6700\u8fd1\u540d\u4eba\u4e91\u96c6\u7684\u6d3e\u5bf9\u624d\u80fd\u7ef4\u6301\u4ed6\u4eec\u7684\u751f\u6d3b\u3002\u8d64\u88f8\u88f8\u7684\u5e76\u5217\n\u591a\u6d1b\u96f7\u65af\u4e0e\u5236\u7247\u5382\u6700\u5927\u7684\u660e\u661f\u7ea6\u7ff0\u00b7\u767d\u745e\u6469(John Barrymore)\u4e00\u8d77\u51fa\u6f14\u4e86\u201c\u6d77\u517d\u201d(1926)\u3002\u767d\u745e\u6469\u5f53\u65f6\u6b63\u4e0e\u739b\u4e3d\u00b7\u963f\u65af\u7279\u6709\u67d3\uff0c\u5979\u88ab\u591a\u6d1b\u4e3d\u4e1d\u8ff7\u4f4f\u4e86\u3002\u83ab\u91cc\u65af\u770b\u5230\u5973\u513f\u88ab\u4ed6\u8ba4\u4e3a\u5e94\u8be5\u6210\u4e3a\u7684\u90a3\u79cd\u660e\u661f\u8ffd\u6c42\u65f6\uff0c\u975e\u5e38\u5ac9\u5992\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u81f3\u5c11\u5bf9\u83ab\u91cc\u65af\u6765\u8bf4\uff0c\u767d\u745e\u6469\u548c\u6885\u5f88\u5feb\u6210\u4e86\u670b\u53cb\u3002\u867d\u7136\u5df4\u91cc\u83ab\u5c14\u5bb6\u65cf\u7684\u4e0d\u673d\u540d\u4eba\u51e0\u5341\u5e74\u6765\u5df2\u7ecf\u5728\u7535\u5f71\u53f2\u4e0a\u7ad9\u7a33\u811a\u8ddf\uff0c\u4f46\u8212\u5c14\u66fc\u7684\u4e66\u901a\u8fc7\u6316\u6398\u79d1\u65af\u7279\u6d1b\u5bb6\u65cf\u4e4b\u524d\u7684\u540d\u6c14\uff0c\u4e3a\u6545\u4e8b\u589e\u52a0\u4e86\u4e00\u4e2a\u957f\u671f\u7f3a\u5931\u7684\u5c42\u9762\u3002\u6b64\u5916\uff0c\u5982\u679c\u6ca1\u6709\u4ed6\u4e0e\u591a\u6d1b\u4e3d\u4e1d\u8fbe\u6210\u7684\u5c4f\u5e55\u5316\u5b66\u53cd\u5e94\uff0c\u767d\u745e\u6469\u5f88\u53ef\u80fd\u4f1a\u6bd4\u4ed6\u66f4\u65e9\u5730\u81ea\u6bc1\u3002\n\u83ab\u91cc\u65af\u5728\u81ea\u6211\u7834\u574f\u7684\u6e38\u620f\u4e2d\u9065\u9065\u9886\u5148\u4e8e\u767d\u745e\u6469\u3002\u4ed6\u7684\u5ac9\u5992\u4fc3\u4f7f\u4ed6\u5bc6\u5207\u5173\u6ce8\u8fd9\u5bb6\u4eba\u5728\u597d\u83b1\u575e\u7684\u6240\u4f5c\u6240\u4e3a\uff0c\u7279\u522b\u662f\u5728\u767d\u745e\u6469\u642c\u5230\u4ed6\u4eec\u90a3\u91cc\u4e4b\u540e\u3002\u591a\u6d1b\u4e3d\u4e1d\u548c\u767d\u745e\u6469\u4e8e1928\u5e74\u7ed3\u5a5a\uff0c\u6b64\u524d\u5979\u66fe\u4e0e\u5236\u7247\u5382\u603b\u88c1\u54c8\u91cc\u00b7\u534e\u7eb3\u7684\u513f\u5b50\u5218\u6613\u65af\u00b7\u534e\u7eb3\u77ed\u6682\u7ea6\u4f1a\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6d77\u4f26\u5728\u201c\u7ebd\u7ea6\u4e4b\u5149\u201d(1928\u5e74)\u4e2d\u83b7\u5f97\u4e86\u4e00\u4e2a\u89d2\u8272\uff0c\u8fd9\u662f\u7b2c\u4e00\u90e8\u957f\u7bc7\u7684\u5168\u5bf9\u8bdd\u7535\u5f71\u3002\u8212\u5c14\u66fc\u8bf4\uff1a\u201c\u5c3d\u7ba1\u591a\u6d1b\u4e3d\u4e1d\u5982\u6b64\u8ff7\u4eba\u548c\u53d7\u6b22\u8fce\uff0c\u4f46\u521b\u9020\u5386\u53f2\u7684\u662f\u6d77\u4f26\u3002\u201d\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u90e8\u7535\u5f71\u4e0d\u8db3\u4ee5\u8d62\u5f97\u5979\u7684\u660e\u661f\u5730\u4f4d\uff0c\u5979\u7684\u804c\u4e1a\u751f\u6daf\u5f88\u5feb\u5c31\u6ce1\u6c64\u4e86\u3002\u5c31\u5979\u800c\u8a00\uff0c\u591a\u6d1b\u4e3d\u4e1d\u5bf9\u9001\u6765\u7684\u5267\u672c\u7c7b\u578b\u611f\u5230\u65e0\u804a\u5f97\u6d41\u4e0b\u4e86\u773c\u6cea\uff0c\u5979\u81ea\u613f\u79bb\u5f00\u5236\u7247\u5382\uff0c\u626e\u6f14\u7ea6\u7ff0\u00b7\u767d\u745e\u6469(John Barrymore)\u7684\u59bb\u5b50\u3002\u8fd9\u5bf9\u592b\u5987\u5f88\u5feb\u5c31\u751f\u4e0b\u4e86\u8fea\u5fb7\uff0c\u4ed6\u4eca\u5929\u4ecd\u7136\u5065\u5728\uff0c\u5e76\u4e3a\u8fd9\u672c\u4e66\u63a5\u53d7\u4e86\u91c7\u8bbf\u3002\u968f\u7740\u767d\u745e\u6469\u4e8b\u4e1a\u7684\u6301\u7eed\u53d1\u5c55\uff0c\u591a\u6d1b\u4e3d\u4e1d\u5f00\u59cb\u5168\u795e\u8d2f\u6ce8\u4e8e\u5bb6\u5ead\u751f\u6d3b\uff0c\u6700\u7ec8\u88ab\u89e3\u96c7\u4e86\u5728\u534e\u7eb3\u5144\u5f1f\u7684\u5408\u540c\u3002\u4e0e\u8bb8\u591a\u5176\u4ed6\u5236\u7247\u5382\u4e00\u6837\uff0c\u534e\u7eb3\u6709\u4e00\u9879\u6761\u6b3e\uff0c\u5141\u8bb8\u4ed6\u4eec\u5728\u5973\u6f14\u5458\u6000\u5b55\u540e\u89e3\u96c7\u5979\u4eec\u3002\u867d\u7136\u591a\u6d1b\u4e3d\u4e1d\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u592a\u613f\u610f\u91cd\u8fd4\u94f6\u5e55\uff0c\u4f46\u8fd9\u4ee4\u4eba\u9707\u60ca\u5730\u63d0\u9192\u4eba\u4eec\uff0c\u5236\u7247\u5382\u5bf9\u81ea\u5df1\u7684\u624d\u534e\u8fdb\u884c\u4e86\u4e25\u5389\u7684\u63a7\u5236\u3002\n\u591a\u6d1b\u4e3d\u4e1d\u548c\u6d77\u4f26\u57281929\u5e74\u7684\u6f14\u51fa\u4e2d\u5f97\u5230\u4e86\u534e\u7eb3\u5144\u5f1f\u7684\u9001\u522b\u3002\u7136\u800c\uff0c\u6885\u6b7b\u540e\uff0c\u8fd9\u5bb6\u4eba\u5f00\u59cb\u5206\u5d29\u79bb\u6790\u3002\u8212\u5c14\u66fc\u5e26\u7740\u8bfb\u8005\u8fdb\u884c\u4e86\u51e0\u6b21\u5947\u602a\u7684\u65c5\u884c\uff0c\u5176\u4e2d\u4e00\u6b21\u662f\u5e74\u8f7b\u7684\u94a2\u7434\u6559\u5e08\u7ef4\u7ef4\u5b89\u00b7\u68ee\u683c\u52d2(Vivienne Sengler)\u8d77\u8bc9\u83ab\u91cc\u65af\uff0c\u8981\u6c42\u4ed6\u8d54\u507f10\u4e07\u7f8e\u5143\uff0c\u636e\u8bf4\u83ab\u91cc\u65af\u89e3\u9664\u4e86\u4ed6\u4eec\u7684\u8ba2\u5a5a\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u662f\u5426\u6709\u4eba\u6c42\u5a5a\uff0c\u4f46\u8212\u5c14\u66fc\u63f4\u5f15\u4e86\u4e00\u5c01\u4fe1\uff0c\u5728\u4fe1\u4e2d\uff0c\u5979\u5a01\u80c1\u8bf4\uff0c\u5982\u679c\u83ab\u91cc\u65af\u4e0d\u56de\u4fe1\uff0c\u5979\u5c31\u4f1a\u81ea\u6740\u3002\u8212\u5c14\u66fc\u8ba4\u4e3a\u68ee\u683c\u52d2\u201c\u5bf9\u4e00\u4e2a\u5931\u8d25\u7684\u7535\u5f71\u660e\u661f\u6000\u6709\u604b\u6bcd\u60c5\u7ed3\u201d\u3002\u8fd9\u6bb5\u5947\u602a\u7684\u63d2\u66f2\u663e\u793a\u4e86\u7535\u5f71\u53d1\u5c55\u7684\u591a\u4e48\u8fc5\u901f\uff0c\u4e00\u4e2a\u4eba\u53ef\u80fd\u662f\u6c89\u9ed8\u65f6\u4ee3\u7684\u4e3b\u8981\u660e\u661f\uff0c\u4f46\u5230\u4e861930\u5e74\u5c31\u88ab\u6dd8\u6c70\u4e86\uff0c\u4f46\u4ecd\u7136\u6709\u4e00\u79cd\u6325\u4e4b\u4e0d\u53bb\u7684\u540d\u4eba\u3002\n\u6d77\u4f26\u540e\u6765\u5ac1\u7ed9\u4e86\u6bd4\u5979\u5927\u5f88\u591a\u5e74\u7684\u6f14\u5458\u517c\u5bfc\u6f14\u6d1b\u5384\u5c14\u00b7\u8c22\u5c14\u66fc(\u53ef\u80fd\u6700\u51fa\u540d\u7684\u662f\u5728\u300a\u5979\u5bf9\u4ed6\u4e0d\u597d\u300b\u4e2d\u6267\u5bfc\u4e86\u6885\u00b7\u97e6\u65af\u7279[1933])\u3002\u4ed6\u4eec\u7684\u5a5a\u59fb\u57281932\u5e74\u7834\u88c2\uff0c\u5f53\u65f6\u8212\u5c14\u66fc\u79f0\u8fd9\u573a\u79bb\u5a5a\u8bc9\u8bbc\u662f\u201c\u597d\u83b1\u575e\u5386\u53f2\u4e0a\u6700\u5177\u7834\u574f\u6027\u7684\u5a5a\u59fb\u8bfd\u8c24\u8fd0\u52a8\u4e4b\u4e00\u201d\u3002\u9996\u5148\uff0c\u8c22\u5c14\u66fc\u5077\u8d70\u4e86\u6d77\u7433\u4ef7\u503c10\u4e07\u7f8e\u5143\u7684\u73e0\u5b9d\uff0c\u6700\u540e\u624d\u5c06\u5176\u5f52\u8fd8\uff1b\u7136\u540e\u4ed6\u6307\u63a7\u5979\u6709\u9157\u9152\u95ee\u9898\uff0c\u8fd9\u80af\u5b9a\u662f\u5bb6\u65cf\u9057\u4f20\u7684\u3002\u6700\u540e\uff0c\u4e5f\u662f\u6700\u5177\u653b\u51fb\u6027\u7684\u662f\uff0c\u4ed6\u63ed\u9732\u4e86\u6d77\u7433\u662f\u4e00\u4e2a\u8272\u60c5\u8bfb\u8005\uff0c\u5411\u6cd5\u5ead\u63d0\u4ea4\u4e86\u5979\u768414\u672c\u4e66\uff0c\u5176\u4e2d\u5305\u62ec\u201c\u8303\u59ae\u00b7\u5e0c\u5c14\u56de\u5fc6\u5f55\u201d(Memoir Of Fanny Hill)\u3002\u8fd9\u4e9b\u6587\u672c\u7684\u6240\u6709\u6743\u4ece\u672a\u660e\u786e\u786e\u5b9a\uff0c\u8fd9\u4e9b\u4e66\u7c4d\u5947\u602a\u5730\u4ece\u6cd5\u9662\u6d88\u5931\u4e86\u3002\u8212\u5c14\u66fc\u8be6\u7ec6\u63cf\u8ff0\u4e86\u968f\u4e4b\u800c\u6765\u7684\u6574\u4e2a\u79bb\u5947\u7684\u4e00\u7cfb\u5217\u4e8b\u4ef6\u3002\u6b63\u5982\u201c\u7535\u5f71\u7ecf\u5178\u201d(Movie Classic)\u57281932\u5e74\u6240\u5199\u7684\u90a3\u6837\uff0c\u201c\u8fd9\u662f\u4e00\u573a\u7f8e\u597d\u7684\u3001\u8001\u5f0f\u7684\u79bb\u5a5a\uff0c\u6709\u70df\u706b\u3001\u773c\u6cea\uff0c\u6709\u6307\u8d23--\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f4\u5230\u4e00\u4e9b\u7535\u5f71\u6743\u52bf\u4eba\u7269\u4ecb\u5165\u5e76\u63a8\u4e0b\u4e86\u8f6f\u8e0f\u677f\u3002\u201d\n\u6d77\u4f26\u6709\u4e00\u8fde\u4e32\u7684\u5384\u8fd0\u4f34\u968f\u7740\u5979\u7684\u4f59\u751f\u3002\u6291\u90c1\u3001\u62d9\u52a3\u7684\u624b\u672f\u3001\u6ee5\u7528\u836f\u7269\u548c\u5728\u7597\u517b\u9662\u5ea6\u8fc7\u7684\u65f6\u95f4\u5c06\u5b9a\u4e49\u5979\u7684\u665a\u5e74\u751f\u6d3b\u3002\u83ab\u91cc\u65af\u548c\u7ea6\u7ff0\u00b7\u767d\u745e\u6469\u4e5f\u4f1a\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5916\u51fa\uff0c\u53ea\u662f\u5e26\u7740\u74f6\u5b50\u3002\u591a\u6d1b\u4e3d\u4e1d\u575a\u6301\u7684\u65f6\u95f4\u8981\u957f\u5f97\u591a\uff0c\u5c3d\u7ba1\u5979\u5728\u597d\u83b1\u575e\u7684\u5de5\u4f5c\u523040\u5e74\u4ee3\u4e2d\u671f\u5c31\u4f1a\u7ed3\u675f\uff0c\u5979\u7684\u6700\u540e\u4e24\u4e2a\u89d2\u8272\u662f\u5728\u201c\u4e86\u4e0d\u8d77\u7684\u5b89\u4f2f\u68ee\u4e00\u5bb6\u201d(1942)\u548c\u201c\u8fd9\u662f\u519b\u961f\u201d(1943)\u4e2d\u3002\n\u4e0e\u8bb8\u591a\u81ed\u540d\u662d\u8457\u7684\u597d\u83b1\u575e\u5bb6\u65cf\u7684\u5386\u53f2\u4e0d\u540c\uff0c\u8212\u5c14\u66fc\u7684\u5386\u53f2\u4e0d\u4f1a\u6c89\u6d78\u5728\u660e\u661f\u7684\u8870\u843d\u4e2d\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u7535\u5f71\u7684\u7b2c\u4e00\u5bb6\u5ead\u5c55\u793a\u4e86\u5bfc\u81f4\u79d1\u65af\u7279\u6d1b\u592b\u5987\u53d6\u5f97\u6210\u5c31\u7684\u529b\u91cf\uff0c\u5728\u4e00\u4e9b\u5f02\u5e38\u56f0\u96be\u7684\u65f6\u671f\uff0c\u5728\u4e00\u79cd\u5168\u65b0\u5a92\u4f53\u7684\u8bde\u751f\u548c\u53d1\u5c55\u4e2d\u3002\u83ab\u91cc\u65af\u3001\u6d77\u4f26\u548c\u591a\u6d1b\u4e3d\u4e1d\u662f\u7b2c\u4e00\u6279\u6311\u6218\u597d\u83b1\u575e\u804c\u4e1a\u751f\u6daf\u7684\u7535\u5f71\u540d\u4eba\uff0c\u4ece\u5e74\u8f7b\u7684\u540d\u6c14\u5230\u4e11\u95fb\u548c\u9057\u5fd8\u3002\u867d\u7136\u767d\u745e\u6469\u592b\u5987\u5c06\u6c38\u8fdc\u88ab\u4eba\u4eec\u8bb0\u4f4f\uff0c\u4f46\u79d1\u65af\u7279\u6d1b\u592b\u5987\u8fd8\u6ca1\u6709\u5206\u4eab\u4ed6\u4eec\u6c38\u6052\u7684\u540d\u4eba\u3002\u8212\u5c14\u66fc\u7684\u4f20\u8bb0\u5728\u7ea0\u6b63\u8fd9\u79cd\u5ffd\u89c6\u65b9\u9762\u8d70\u4e86\u4e00\u6bb5\u8def\uff0c\u8868\u660e\u4ecd\u6709\u8bb8\u591a\u88ab\u9057\u5fd8\u7684\u8001\u597d\u83b1\u575e\u6545\u4e8b\u6709\u5f85\u8bb2\u8ff0\u3002", "note_en": "FILM HISTORIANS HAVE long viewed Florence Turner, the \u201cVitagraph Girl,\u201d as the first movie star. A new study, however, argues that Maurice Costello was the first widely recognized film star. Terry Shulman\u2019s  Film\u2019s First Family: The Untold Story of the Costellos cites a 1912 poll in  Motion Picture Story Magazine showing not only that Costello was the \u201cmost popular player\u201d but also that he had more votes than notable stars Florence Lawrence and Florence Turner combined. In 1924,  Photoplay named him \u201cthe most recognized star in motion pictures.\u201d\n Maurice Costello was born in 1877 in Pittsburgh, at a difficult time for the city. Poor, sick mill workers abounded, and famine was rampant. His father died at 25; his mother was a widow who rented a large house and took on boarders \u2014 all Irish Catholic mill workers. Pittsburgh had been a town that championed theater; by the 1860s, however, the famed Pittsburgh Theater \u201cwas off limits to polite society\u201d because it had become \u201cthe exclusive domain of local rowdies \u2014 working class toughs who drank openly during performances and behaved disruptively throughout.\u201d The town was in desperate need of a cultural overhaul.\n Drawn to the stage, Maurice found his first entertainment job singing \u201cThe Mick Who Threw the Brick\u201d in 1894. Many Irish immigrants were taking to vaudeville, which was quickly becoming the people\u2019s theater. The majority of these acts were comedy, with a dash of athletics such as boxing. Maurice also worked for Harry Davis, an entertainment entrepreneur who ran everything from museums and theaters to the early nickelodeons. It would take Maurice many years of grinding out gigs in saloons, playhouses, and \u201cseedy auditoriums\u201d in order to prove his value as a performer.\n In 1902, Maurice married Mae Altschuk, whose father detested the acting profession. Though Pittsburgh had one of the highest infant mortality rates in the country, Mae gave birth to two healthy daughters, Dolores in 1903 and Helene in 1906, both destined for show business. Maurice was an established stage actor, but movies were the growing \u2014 and better paying \u2014 trend. Unfortunately, working on film was seen by the high-minded theater crowd as an \u201cartistic felony.\u201d Intrigued by the new medium, Maurice began working for Vitagraph director Van Dyke Brooke in 1907.\n Maurice quickly set out to change the film business. On the stage, the actor\u2019s job was solely to act, but when Maurice arrived at Vitagraph, he saw actors doing many other tasks when not in front of the camera. Florence Turner, the famed \u201cVitagraph Girl,\u201d recalled that, when she wasn\u2019t performing, she was keeping books, attending business meetings, and writing checks in the main office. Paul Panzer, who played Romeo in the studio\u2019s version of  Romeo and Juliet, had to build his own balcony. When Maurice was hired as an actor, he was quickly put to work building sets. As Helene remembers, \u201cMaurice surveyed this ignoble scene with flaring nostrils. In cold disdain, he rejected the claw hammer offered him by one of the Vitagraph partners.\u201d Maurice would have none of it, and Vitagraph executive J. Stuart Blackton finally gave in. It was not long before carpenters were hired, and actors could focus fully on acting. This did not mean the screen talent was running the show: Dolores remembers a director telling her that the film stock was still worth more than the actors.\n Shulman argues that \u201cwhat D. W. Griffith did for film direction [\u2026], Maurice did for screen acting: that is, he raised the bar to a higher standard that quickly became the norm. And he did it a year before Griffith, who didn\u2019t come work for Biograph until 1908.\u201d Maurice transformed how players acted in front of the camera. Because cranking speeds varied by cameraperson, just as projection speeds varied by cinema, there was a wide range of movement on the silent screen. Some exhibitors even sped up their prints so as to fit more screenings into a day. As Shulman shows, Maurice was hailed \u2014 locally in the  Pittsburgh Gazette and nationally in  Photoplay \u2014 as the star who implemented a slower style of acting that played back onscreen more realistically. By 1910, Vitagraph was billing Maurice as the star of the program, with promotional blurbs such as, \u201cA Vitagraph Night with Maurice Costello.\u201d Helene and Dolores were also getting screen time as extras whenever children were needed.\n  Maurice\u2019s popularity began to wane once publications started taking note of his family life. The throbbing hearts of fangirls worldwide had to find a new, unmarried matinee idol. His reputation also suffered when news broke of his violent alcoholism. By 1913, his star was fading fast, and after 1914, Vitagraph no longer used him as a primary player. Maurice jumped between film and theater, finding lower billing with each production. The family soon found themselves isolated in their Long Island estate, with only the recent memory of celebrity-studded parties to sustain them. The stark juxtaposition between excess and poverty was something his daughters would never forget.\n Their fortunes changed again when a talent scout from Warner Bros. reached out to Dolores and offered her a screen test. Dolores, Helene, and Mae hopped on a train for Los Angeles while Maurice stayed behind to nurse his ailing stage career. Both Dolores and Helene landed small roles. They warmly remembered meeting Rin Tin Tin, the first star at Warner Bros., along with some of his puppies. In 1925, the Costello girls were given one-year contracts with the studio. Shulman\u2019s narrative of the Costello women\u2019s career adds useful context to our knowledge of the early Warner Bros. studio.\n Dolores was cast alongside John Barrymore, the studio\u2019s biggest star, in  The Sea Beast (1926). Barrymore, who was then having an affair with Mary Astor, was smitten with Dolores. Maurice could not have been more jealous to see his daughter being courted by the type of star he believed he still should be. To make matters worse, at least for Maurice, Barrymore and Mae became fast friends. While the monumental celebrity of the Barrymore family has been solidified in film history for decades, Shulman\u2019s book adds a long-missing layer to the tale, with its excavation of the prior fame of the Costellos. Moreover, without the screen chemistry he achieved with Dolores, Barrymore likely would have self-destructed much sooner than he did.\n  Maurice was well ahead of Barrymore in the game of self-sabotage. His jealousy led him to keep tabs on the family\u2019s doings in Hollywood, especially after Barrymore moved in with them. Dolores and Barrymore wed in 1928, after she had briefly dated Lewis Warner, son of studio president Harry Warner. At the same time, Helene landed a role in  Lights of New York (1928), the first feature-length all-talking film. \u201cFor all Dolores\u2019s glamour and popularity,\u201d Shulman observes, \u201cit was Helene who made history.\u201d Unfortunately, the film was not enough to win her stardom, and her career quickly fizzled. For her part, Dolores, bored to tears over the types of scripts being sent her way, voluntarily left the studio to play wife to John Barrymore. The couple soon gave birth to Dede, who is still alive today and who was interviewed for the book. Dolores, who became absorbed in domestic life as Barrymore\u2019s career continued to take off, was eventually let go from her contract at Warner Bros. Like many other studios, Warners had a clause that legally allowed them to fire actresses if they got pregnant. While Dolores didn\u2019t much care to return to the screen anyway, this stands as a startling reminder of the draconian control the studios had over their talent.\n Dolores and Helene would get their Warner Bros. sendoff in  Show of Shows in 1929. After Mae\u2019s death, however, the family began to unravel. Shulman takes readers on several strange journeys, in one of which a young piano teacher, Vivienne Sengler, sues Maurice for $100,000 after he supposedly broke off their engagement. It\u2019s unclear whether or not there was ever a proposal, but Shulman, who sees Sengler as harboring \u201can oedipal obsession with a washed-up movie star,\u201d cites one letter in which she threatened to kill herself if Maurice didn\u2019t write back. This strange episode shows how quickly the movies evolved, where someone could be a major silent-era star but washed up by 1930, yet still have a kind of lingering celebrity.\n Helene went on to marry actor/director Lowell Sherman, who was many years her senior (and probably best known for directing Mae West in  She Done Him Wrong [1933]). Their marriage fell apart in 1932, during a divorce proceeding that Shulman calls \u201cone of the most damaging marital smear campaigns in Hollywood history.\u201d First, Sherman stole $100,000 worth of Helene\u2019s jewelry before ultimately returning it; then he accused her of having a drinking problem, which certainly ran in the family. Finally, and most aggressively, he exposed Helene as a reader of pornography, submitting 14 of her books to the court, including  The Memoirs of Fanny Hill. The ownership of these texts was never clearly established, and the books strangely went missing from the courthouse. Shulman details the entire bizarre series of events that followed. As  Movie Classic wrote in 1932, \u201cIt was a good, old-fashioned divorce with fireworks, tears, accusations \u2018n\u2019 everything \u2014 that is, until some of the Movie Powers stepped in and pushed down the soft pedal.\u201d\n  Helene had a string of bad luck that followed her for the rest of her life. Episodes of depression, botched surgeries, drug abuse, and time spent in sanitariums would define her later life. Maurice and John Barrymore would go out in similar fashion, by way of the bottle. Dolores hung on much longer, though her stint in Hollywood would be over by the mid-\u201940s, with her last two roles in  The Magnificent Ambersons (1942) and  This is the Army (1943).\n Unlike many histories of notorious Hollywood families, Shulman\u2019s does not wallow in the downfall of its stars. Instead,  Film\u2019s First Family shows the strengths that led to the Costellos\u2019 accomplishments, during some extraordinarily difficult times and amid the birth and growth of an entirely new medium. Maurice, Helene, and Dolores were among the first film celebrities to run the complete gauntlet of a Hollywood career, from youthful fame to scandal and oblivion. While the Barrymores will be remembered forever, the Costellos have yet to share in their enduring celebrity. Shulman\u2019s biography goes some distance toward rectifying this neglect, showing that there are still many forgotten stories of old Hollywood left to be told.", "posttime": "2020-06-15 05:28:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u5f71,movie", "title": "\u88ab\u9057\u5fd8\u7684\u7535\u5f71\u7248\u7a0e", "title_en": "Forgotten Movie Royalty", "transed": 1, "url": "https://lareviewofbooks.org/article/forgotten-movie-royalty/", "via": "", "real_tags": ["\u7535\u5f71", "movie"]}, {"category": "", "categoryclass": "", "imagename": "5db224db473f8eee63db4357c422fe6d.png", "infoid": 1006573, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\nNewt DB\u662f\u4e00\u4e2aPython\u9762\u5411\u5bf9\u8c61\u7684\u6570\u636e\u5e93\uff0c\u5728PostgreSQL http://www.newtdb.org\u4e2d\u5177\u6709\u57fa\u4e8eJSONB\u7684\u8bbf\u95ee\u548c\u641c\u7d22\u529f\u80fd", "note_en": "GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n   Newt DB is a Python object-oriented database with JSONB-based access and search in PostgreSQL    http://www.newtdb.org", "posttime": "2020-06-15 05:27:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgresql,\u6570\u636e\u5e93,database,python,newt", "title": "Newt DB\uff0c\u4e24\u6816\u6570\u636e\u5e93-\u4e0a\u9762\u662fPython\u5bf9\u8c61\uff0c\u4e0b\u9762\u662fPostgreSQL JSONB", "title_en": "Newt DB, the amphibious database \u2013 Python objects above, PostgreSQL JSONB below", "transed": 1, "url": "https://github.com/newtdb/db", "via": "", "real_tags": ["\u6570\u636e\u5e93", "database", "python", "newt"]}, {"category": "", "categoryclass": "", "imagename": "c5275f3a94cf5e09301fead2147ebd1d.jpeg", "infoid": 1006572, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u65e9\u57282013\u5e74\u5c31\u63a8\u51fa\u4e86Hangout\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u5b83\u4e5f\u662f\u8bd5\u56fe\u5c06\u5176\u4e0d\u540c\u7684\u670d\u52a1(Gtalk\uff0cG+Messenger)\u7edf\u4e00\u5230\u4e00\u4e2a\u4ea7\u54c1\u4e2d\uff0c\u800cHangout\u7684\u5b9a\u4f4d\u7c7b\u4f3c\u4e8eWhatsApp\u3002\u8fd9\u4e00\u7b56\u7565\u6709\u4e00\u5b9a\u7684\u9053\u7406\uff0c\u5c3d\u7ba1\u5b83\u4ece\u672a\u771f\u6b63\u8d77\u98de(\u4e0eWhatsApp\u76f8\u6bd4)\u3002\u6700\u5927\u7684\u539f\u56e0\u53ef\u80fd\u662f\uff0c\u6ca1\u6709\u8db3\u591f\u4e13\u6ce8\u4e8e\u4e00\u79cd\u7279\u5b9a\u7684\u6c9f\u901a\u65b9\u5f0f\u3002Hangout\u65e2\u6709\u804a\u5929\u529f\u80fd\uff0c\u4e5f\u6709\u89c6\u9891\u529f\u80fd\uff0c\u6b64\u5916\uff0c\u5b83\u8fd8\u4f5c\u4e3a\u9762\u5411\u4f01\u4e1a\u7684GSuite\u7684\u4e00\u90e8\u5206\u51fa\u552e\u3002\n\u5feb\u8fdb\u52302017\u5e74&Amp\uff1b\u7684\u4ea4\u6d41\u7a7a\u95f4\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u52a0\u5feb\u4e86\u6b65\u4f10\u3002Slake\u4e13\u6ce8\u4e8e\u4f01\u4e1a\u901a\u4fe1\uff0cZoom\u7528\u4e8e\u4f01\u4e1a\u89c6\u9891\u4f1a\u8bae\uff0cWhatsapp Video&amp\uff1bFacetime\u7528\u4e8e\u4e2a\u4eba\u89c6\u9891\u804a\u5929\uff0camp\uff1bWhatsApp(&amp\uff1b\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u7528\u4e8e\u804a\u5929\u7684FB Mess)\u3002\u6240\u6709\u8fd9\u4e9b\u4ea7\u54c1\u90fd\u8868\u660e\uff0c\u4e0d\u540c\u7684\u6c9f\u901a\u9700\u6c42\u9700\u8981\u4e0d\u540c\u7684\u4ea7\u54c1\u3002\u6709\u4e86\u8fd9\u4e00\u70b9\uff0cHangout\u53d1\u73b0\u81ea\u5df1\u5728\u6240\u6709\u8fd9\u4e9b\u7f51\u7ad9\u4e2d\u5904\u4e8e\u4e00\u4e2a\u5947\u602a\u7684\u4f4d\u7f6e\u3002\u8fd9\u5c31\u662f\u8c37\u6b4c\u5f00\u59cb\u5bc6\u5207\u5173\u6ce8\u7684\u65f6\u5019&\u6253\u9020\u4e0e\u5f53\u65f6\u5b9e\u9645\u9700\u6c42\u76f8\u4f3c\u7684\u4ea7\u54c1\u3002\u73b0\u5728\u6211\u4eec\u6709&#34\uff1bMeet&34\uff1b\uff0c&#34\uff1bChat&34\uff1b\uff0c&#34\uff1bDuo&34\uff1b\u548c&#34\uff1bMessages&#34\uff1b\uff0c\u5b83\u4eec\u4e0e\u7ade\u4e89\u5bf9\u624b\u4e0d\u76f8\u4e0a\u4e0b\u3002\nMeet&amp\uff1bDuo\u5206\u522b\u4e0eZoom&amp\uff1bWhatsApp\u89c6\u9891/Facetime\u4e0d\u76f8\u4e0a\u4e0b\u3002\u4f46\u8fd9\u4f3c\u4e4e\u662f\u6700\u6709\u8da3\u7684\u804a\u5929\u4fe1\u606f(Messages&34\uff1b&amp\uff1bChat&34\uff1b)\u3002\n&#34\uff1b\u6d88\u606f&#34\uff1b\u5982\u679c\u60a8\u6ca1\u6709\u6ce8\u610f\u5230\u662f\u9ed8\u8ba4\u6d88\u606f(\u8fd8\u8bb0\u5f97\u5417\uff1f)\u3002\u5b89\u5353\u624b\u673a\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e0e\u60a8\u7684Pixel\u624b\u673a\u4e00\u8d77\u9884\u88c5\uff0c\u5e76\u4e14\u5728\u5176\u4ed6\u624b\u673a\u4e0a\u9884\u88c5\uff0c\u60a8\u5fc5\u987b\u5355\u72ec\u5b89\u88c5\u3002\u6700\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e8b\u5b9e\u662f\uff0c\u5b83\u7684Play\u5546\u5e97\u4e0b\u8f7d\u91cf\u8d85\u8fc7\u4e8610\u4ebf\u6b21\uff01\u8fd9\u6b3e\u5e94\u7528\u73b0\u5728\u652f\u6301Rich Messages\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u5c31\u50cfWhatsApp\u4e00\u6837\u3002\u8c37\u6b4c\u5df2\u7ecf\u4e3a\u5b83\u53d1\u5e03\u4e86\u4e00\u4e2a\u7f51\u9875\u7248\u672c\uff0c\u5c31\u50cfWhatsApp web\u4e00\u6837\u3002\u4e0d\u8fc7\uff0c\u6700\u68d2\u7684\u662f\uff0cDuo\u76f4\u63a5\u96c6\u6210\u5230\u4e86\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u4f7f\u5f97\u8c37\u6b4c\u66f4\u5bb9\u6613\u5411\u7528\u6237\u63a8\u5e7fDuo\u3002\n\u8fd9\u6b3e\u804a\u5929\u5e94\u7528\u975e\u5e38\u4e13\u6ce8\u4e8e\u4f01\u4e1a\u3002\u5b83\u6709\u4e00\u4e2a\u975e\u5e38\u677e\u6563\u7684\u529f\u80fd\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u4e0eMeet\u76f4\u63a5\u96c6\u6210\u7684\u529f\u80fd\u3002\u804a\u5929\u7684\u53e6\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u8c37\u6b4c\u53ef\u4ee5\u5c06\u5b83\u7684\u5176\u4ed6GSuite\u4ea7\u54c1\uff0c\u5982Drive\u3001\u6587\u6863\u3001\u5de5\u4f5c\u8868\u90fd\u96c6\u6210\u5230\u804a\u5929\u4e2d\u3002\u5c06\u5b83\u4e0eMeet\u5206\u5f00\u4e5f\u53ef\u4ee5\u8ba9\u8c37\u6b4c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u9500\u552e\u804a\u5929\u548cMeet\u3002\u4f8b\u5982\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u4eba\u5b89\u6392\u4f1a\u9762\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u6536\u53d6\u804a\u5929\u8d39\u7528\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u5982\u679c\u4eba\u4eec\u559c\u6b22\u89c1\u9762\uff0c\u4ed6\u4eec\u53ef\u80fd\u4e5f\u559c\u6b22\u4f7f\u7528\u804a\u5929\u3002(\u4f46\u6211\u8ba4\u4e3a\u53cd\u8fc7\u6765\u6548\u679c\u4f1a\u66f4\u597d)\u3002\u5728\u672a\u6765\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u770b\u5230Chat\u4e0e\u5176\u4ed6Google\u4ea7\u54c1\uff0c\u5982Docs\uff0cSheet\uff0cCalendar\uff0cGmail\u6709\u66f4\u7d27\u5bc6\u7684\u96c6\u6210\u3002\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u4f01\u4e1a\u5ba2\u6237\u5e0c\u671b\u4ece\u4e00\u4e2a\u5730\u65b9\u505a\u6240\u6709\u4e8b\u60c5\uff0c\u4ee5\u63d0\u9ad8\u751f\u4ea7\u529b\u3002\u8fd9\u4e5f\u4f7f\u5b83\u6210\u4e3a\u5fae\u8f6f\u56e2\u961f\u66f4\u76f4\u63a5\u7684\u7ade\u4e89\u5bf9\u624b\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u8c37\u6b4c\u7684\u901a\u4fe1\u4ea7\u54c1\u73b0\u5728\u4f3c\u4e4e\u66f4\u7b26\u5408\u4e0d\u540c\u7528\u6237\u3001\u4f01\u4e1a\uff0c\u5c24\u5176\u662f\u7ade\u4e89\u5bf9\u624b\u7684\u671f\u671b\u3002\u8fd9\u91cc\u7684\u5173\u952e\u662f\u4ece\u4ea7\u54c1\u7684\u89d2\u5ea6\u6216\u901a\u8fc7\u96c6\u6210\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u63d0\u4f9b\u4ef7\u503c\uff0c\u4ece\u800c\u5e26\u6765\u8db3\u591f\u7684\u5dee\u5f02\u5316\u3002\u4f8b\u5982\uff0c\u4e00\u8d77\u62e8\u6253\u53cc\u4eba\u7535\u8bdd&amp\uff1b\u4e00\u8d77\u89c2\u770bYouTube\u89c6\u9891&\u6216\u4e00\u8d77\u62e8\u6253\u4f1a\u8bae\u7535\u8bdd&amp\uff1b\u81ea\u52a8\u5c06\u4f1a\u8bae\u7b14\u8bb0\u4fdd\u5b58\u5728Google Docs&34\uff1b\u4e2d\u3002", "note_en": "Google launched Hangouts back in 2013.  At that point too, it was an attempt to unify its different services (Gtalk, G+ messenger) into a single product and Hangouts positioned itself similar to WhatsApp. That strategy kind of made sense, though it never really took off (compared to WhatsApp). Biggest reason might be, not focusing enough towards a particular style of communication. Hangouts was chat &amp; video both, plus it was also sold as part of its GSuite offering to enterprise.\n Fast forward to 2017 &amp; the communication space has picked up pace like never before.  You have Slack focused towards enterprise communication, Zoom for business video conferencing, Whatsapp Video &amp; Facetime for personal video chat &amp; WhatsApp (&amp; to some extent FB mess for chat). All these products show that there is a need for different products for different communication needs. With this, Hangouts finds itself in a weird spot among all of these. That&#39;s when Google started paying attention closely &amp; building products which resemble the actual needs of the time. Now we have &#34;Meet&#34;, &#34;Chat&#34;, &#34;Duo&#34; and &#34;Messages&#34; and they closely match the competition.\n   Meet &amp; Duo are on a head to head comparison with Zoom &amp; WhatsApp video/Facetime respectively. But it&#39;s &#34;Messages&#34; &amp; &#34;Chat&#34;, that seems most interesting.\n &#34;Messages&#34; if you haven&#39;t noticed is the default messages (remember?) app on your Android phone.  It comes preinstalled with your Pixel phone &amp; on other phones, you have to separately install it. The most amazing fact is that it surpassed 1 billion play store downloads! The app now supports Rich messages which means it works just like WhatsApp. Google has released a web version for it just like WhatsApp web. The best thing about it though is that Duo is directly integrated in the app which made it easier for Google to promote Duo to users.\n The &#34;Chat&#34; app is very focused towards enterprise.  It has a very slack like functionality plus there is a direct integration with Meet. The other great thing about Chat is that, Google can integrate it&#39;s other GSuite products like Drive, Documents, Sheets all within the Chat. Having it separate from Meet also allows Google to sell Chat vs Meet differently. For e.g they can make Meet for everyone but still keep Chat paid. The idea is that if people like Meet they might like to use Chat too. (But I think it would have worked bettee the other way around). In future we might see Chat having a more close integration with other Google products like Docs, Sheets, Calendar, Gmail. This kind of makes sense because enterprise customers want to do everything from one place to increase productivity. And it also makes it a more direct competitor to Teams from Microsoft. All in all, Google&#39;s communication products seem to be more aligned now with the expectations of different users, the businesses and especially the competition. The key thing here will be to bring enough differentiation from a product standpoint or by providing value through integration of different apps. E.g &#34;Make a Duo call &amp; watch a youtube video together&#34; OR &#34;Make a meet call &amp; automatically save meeting notes in Google Docs&#34;.", "posttime": "2020-06-15 05:27:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,app,\u804a\u5929", "title": "\u5206\u6790-\u4e3a\u4ec0\u4e48\u8c37\u6b4c\u73b0\u5728\u662fSlake\uff0cWhatsApp\u548cZoom\u66f4\u597d\u7684\u7ade\u4e89\u5bf9\u624b\uff1f", "title_en": "Analysis \u2013 Why Google is now a better competitor to Slack, WhatsApp and Zoom?", "transed": 1, "url": "https://cnc.substack.com/p/coming-together-of-googles-communication", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "app", "\u804a\u5929"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006571, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(\u7531\u52b3\u4f26\u65af\u00b7\u514b\u9c81\u7eb3\u64b0\u5199\uff0c\u4e0d\u8fc7\u7f29\u8fdb\u7684\u6bb5\u843d\u901a\u5e38\u662f\u5f15\u53f7)\u3002\u4f60\u53ef\u4ee5\u8054\u7cfb\u52b3\u4f26\u65af\uff1alawrence@krubner.com\uff0c\u6216\u8005\u5728Twitter\u4e0a\u5173\u6ce8\u6211\u3002\n\u56e0\u6b64\uff0c\u4e2a\u4ebaA\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u53d7\u65b0\u4fe1\u606f\u7684\u6709\u5bb3\u5f71\u54cd\u3002\u65b0\u4fe1\u606f\u662f\u5371\u9669\u7684\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u67d0\u4eba\u6539\u53d8\u4e3b\u610f\u3002\u53ea\u9700\u5c06\u65b0\u4fe1\u606f\u58f0\u660e\u4e3a\u65e0\u6548\uff0c\u5373\u53ef\u4f7f\u5176\u53d8\u5f97\u5b89\u5168\u3002A\u76f8\u4fe1\u6240\u6709\u7684\u82cf\u683c\u5170\u4eba\u90fd\u662f\u52c7\u6562\u548c\u53ef\u656c\u7684\uff0c\u4f60\u4e0d\u80fd\u8bf4\u670d\u4ed6\u4eec\u76f8\u53cd\u7684\uff0c\u56e0\u4e3a\u4f60\u63d0\u5230\u7684\u4efb\u4f55\u53cd\u4f8b\u90fd\u662f\u4e00\u4e9b\u5815\u843d\u7684\u4e0d\u771f\u5b9e\u7684\u82cf\u683c\u5170\u4eba\uff0c\u8fd9\u4e0e\u4ed6\u4eec\u5bf9\u771f\u6b63\u7684\u82cf\u683c\u5170\u4eba\u7684\u60f3\u6cd5\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u6bcf\u5f53\u6211\u53cd\u5bf9\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b(OOP)\u65f6\uff0c\u8fd9\u5c31\u662f\u6211\u7684\u7ecf\u9a8c\uff1a\u65e0\u8bba\u6211\u63d0\u51fa\u4ec0\u4e48\u8bc1\u636e\u4f9b\u8003\u8651\uff0c\u90fd\u4f1a\u88ab\u8ba4\u4e3a\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002\u5982\u679c\u6211\u62b1\u6028Java\u592a\u5197\u957f\uff0c\u6211\u4f1a\u88ab\u544a\u77e5True OOP\u7a0b\u5e8f\u5458\u8ba9IDE\u6765\u5904\u7406\u4e00\u4e9b\u6837\u677f\u6587\u4ef6\uff0c\u6216\u8005\u53ef\u80fd\u6709\u4eba\u544a\u8bc9\u6211Scala\u66f4\u597d\u3002\u5982\u679c\u6211\u62b1\u6028Scala\u6d89\u53ca\u592a\u591a\u4eea\u5f0f\uff0c\u6211\u5c31\u4f1a\u88ab\u544a\u77e5Ruby\u7f3a\u4e4f\u4eea\u5f0f\u3002\u5982\u679c\u6211\u62b1\u6028Ruby\u4e2d\u4fee\u8865\u7a0b\u5e8f\u7684\u5371\u9669\uff0c\u6211\u4f1a\u88ab\u544a\u77e5\u771f\u6b63\u7684OOP\u7a0b\u5e8f\u5458\u77e5\u9053\u5982\u4f55\u5c06\u5143\u7f16\u7a0b\u7528\u4e8e\u4ed6\u4eec\u7684\u4f18\u52bf\uff0c\u5982\u679c\u6211\u4e0d\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u90a3\u4e48\u6211\u5c31\u662f\u65e0\u80fd\u7684\u3002\u6211\u5e94\u8be5\u4f7f\u7528\u66f4\u7eaf\u7cb9\u7684\u8bed\u8a00\uff0c\u6216\u8005\u66f4\u5b9e\u7528\u7684\u8bed\u8a00\uff0c\u6211\u5e94\u8be5\u4f7f\u7528\u5177\u6709\u7f16\u8bd1\u65f6\u9759\u6001\u6570\u636e\u7c7b\u578b\u68c0\u67e5\u7684\u8bed\u8a00\uff0c\u6216\u8005\u6211\u5e94\u8be5\u4f7f\u7528\u5141\u8bb8\u6211\u81ea\u7531\u52a8\u6001\u8f93\u5165\u7684\u8bed\u8a00\u3002\u5982\u679c\u6211\u62b1\u6028bug\uff0c\u6211\u88ab\u544a\u77e5\u8fd9\u4e9b\u7279\u5b9a\u7684bug\u5df2\u7ecf\u5728\u65b0\u7248\u672c\u4e2d\u4fee\u590d\u4e86\uff0c\u4e3a\u4ec0\u4e48\u6211\u8fd8\u6ca1\u6709\u5347\u7ea7\uff0c\u6216\u8005\u6211\u88ab\u544a\u77e5\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u5982\u679c\u6211\u4e0d\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u6211\u5c31\u662f\u4e2a\u767d\u75f4\u3002\u5982\u679c\u6211\u62b1\u6028\u6700\u6d41\u884c\u7684\u6846\u67b6\u8fc7\u4e8e\u81c3\u80bf\uff0c\u6211\u4f1a\u88ab\u544a\u77e5\u6ca1\u6709\u4eba\u518d\u4f7f\u7528\u8be5\u6846\u67b6\u3002\u6ca1\u6709\u771f\u6b63\u7684OOP\u7a0b\u5e8f\u5458\u4f1a\u505a\u6211\u62b1\u6028\u7684\u4e8b\u60c5\u3002\n\u4eba\u4eec\u4f1a\u5c06\u8bb8\u591a\u7f8e\u597d\u7684\u60f3\u6cd5\u4e0eOOP\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u6211\u5c06\u5c55\u793a\u4e24\u4e2a\u4e1c\u897f\uff1a\n1)\u3002\u4e0e\u5176\u4ed6\u8bed\u8a00(LISP\u3001\u51fd\u6570\u5f0f\u8bed\u8a00\u7b49)\u76f8\u6bd4\uff0cOOP\u8bed\u8a00\u6ca1\u6709\u72ec\u7279\u7684\u4f18\u52bf\u3002\n2.)\u3002\u4e0e\u5176\u4ed6\u8bed\u8a00(LISP\u3001\u51fd\u6570\u5f0f\u8bed\u8a00\u7b49)\u76f8\u6bd4\uff0cOOP\u8bed\u8a00\u5e26\u6765\u4e86\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\u7684\u6c89\u91cd\u8d1f\u62c5\u3002\n\u90a3\u4e9b\u6f5c\u5728\u7684\u597d\u7279\u6027(\u6570\u636e\u9690\u85cf\u3001\u5951\u7ea6\u6267\u884c\u3001\u591a\u6001\u6027)\u5e76\u4e0d\u662fOOP\u72ec\u6709\u7684\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e9b\u7279\u6027\u7684\u66f4\u5f3a\u7248\u672c\u5728\u975eOOP\u8bed\u8a00\u4e2d\u662f\u53ef\u7528\u7684\u3002\u90a3\u4e9bOOP\u72ec\u6709\u7684\u7279\u6027(\u4f9d\u8d56\u6ce8\u5165\u3001\u5b9e\u4f8b\u5316)\u975e\u5e38\u7cdf\u7cd5\uff0c\u5b83\u4eec\u4e4b\u6240\u4ee5\u5b58\u5728\uff0c\u53ea\u662f\u56e0\u4e3aOOP\u5f88\u7cdf\u7cd5\u3002\n\u6211\u6b63\u5728\u91c7\u53d6\u4e00\u79cd\u666e\u4e16\u7684\u3001\u666e\u4e16\u4e3b\u4e49\u7684\u65b9\u6cd5\u6765\u5904\u7406\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1(OOP)\u3002\u4e0b\u9762\u6211\u5c06\u628a\u6240\u6709\u8fd9\u4e9b\u8bed\u8a00\u79f0\u4e3aOOP\uff1aC++\u3001Java\u3001Scala\u3001PHP\u3001Ruby\u548cJavascript\u3002\u8fd9\u516c\u5e73\u5417\uff1f\u6211\u77e5\u9053\uff0c\u6839\u636e\u4e2a\u4eba\u7ecf\u9a8c\uff0cJava\u7684\u4e00\u4e9b\u652f\u6301\u8005\u4f1a\u62b1\u6028Ruby\u548cPHP\u7f3a\u4e4f\u7f16\u8bd1\u65f6\u6570\u636e\u7c7b\u578b\u68c0\u67e5\uff0c\u56e0\u6b64\u4e0d\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u9762\u5411\u5bf9\u8c61\u7684\u3002\u6211\u77e5\u9053\uff0c\u6839\u636e\u4e2a\u4eba\u7ecf\u9a8c\uff0cRuby\u7684\u4e00\u4e9b\u652f\u6301\u8005\u4f1a\u4e89\u8fa9\u8bf4\uff0c\u5728Ruby\u4e2d\uff0c\u4e00\u5207\u90fd\u662f\u5bf9\u8c61\uff0c\u800cJava\u4ecd\u7136\u6709\u975e\u5bf9\u8c61\u539f\u8bed(\u5982\u6574\u6570)\uff0c\u56e0\u6b64Ruby\u66f4\u50cf\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff0c\u800c\u4e0d\u662fJava\u3002\u6211\u77e5\u9053PHP\u7684\u4e00\u4e9b\u6279\u8bc4\u8005\u4f1a\u4e89\u8fa9\u8bf4\uff0cOOP\u7279\u6027\u662f\u56fa\u5b9a\u5728PHP\u4e0a\u7684\uff0c\u4e0d\u5e94\u8be5\u628a\u5b83\u4f5c\u4e3a\u4e00\u79cdOOP\u8bed\u8a00\u6765\u8ba4\u771f\u5bf9\u5f85\u3002\u6211\u77e5\u9053\u6709\u4e9b\u4eba\u4f1a\u6307\u51faScala\u662f\u591a\u8303\u5f0f\u7684\uff0c\u5728Scala\u4e2d\u4f7f\u7528\u201c\u51fd\u6570\u8303\u5f0f\u201d\u5c31\u50cf\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u8303\u5f0f\u4e00\u6837\u5bb9\u6613\u3002\n\u9274\u4e8e\u8bed\u8a00\u7684\u591a\u6837\u6027\uff0c\u4ee5\u53ca\u7f3a\u4e4f\u6807\u51c6\u5b9a\u4e49\uff0c\u8c08\u8bba\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6709\u610f\u4e49\u5417\uff1f\u6211\u4f1a\u8bf4\u662f\u7684\u3002\u8fd9\u662f\u975e\u5e38\u8feb\u5207\u7684\u9700\u8981\u3002OOP\u53ef\u80fd\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e0d\u660e\u786e\u3001\u6a21\u68f1\u4e24\u53ef\u7684\u6982\u5ff5\uff0c\u4f46\u5b83\u7edd\u5bf9\u4e3b\u5bfc\u7740\u79d1\u6280\u884c\u4e1a\u3002\u8bb8\u591a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u548c\u8bb8\u591a\u516c\u53f8\u90fd\u8ba4\u4e3aOOP\u662f\u5f53\u4eca\u552f\u4e00\u5408\u7406\u7684\u8f6f\u4ef6\u5f00\u53d1\u65b9\u5f0f\u3002\u4efb\u4f55\u53cd\u5bf9OOP\u7684\u4eba\u90fd\u4f1a\u7acb\u5373\u610f\u8bc6\u5230\u4ed6\u4eec\u662f\u5728\u53cd\u5bf9\u4e1a\u754c\u7684\u201c\u4f20\u7edf\u667a\u6167\u201d\u3002\n\u6211\u53bb\u9762\u8bd5\u7684\u65f6\u5019\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u4e0d\u7ba1\u6211\u9762\u8bd5\u7684\u662fRuby\u804c\u4f4d\u3001Java\u804c\u4f4d\u8fd8\u662fPHP\u804c\u4f4d\uff0c\u9762\u8bd5\u5b98\u90fd\u4f1a\u95ee\u6211\u662f\u5426\u77e5\u9053\u4ec0\u4e48\u662fOOP\u3002\u4ed6\u4eec\u8ba9\u6211\u5b9a\u4e49\u201c\u5c01\u88c5\u201d\u548c\u201c\u591a\u6001\u5206\u6d3e\u201d\u3002\u8fd9\u4e9b\u90fd\u662f\u6807\u51c6\u95ee\u9898\uff0c\u6211\u5e94\u8be5\u7ed9\u51fa\u6807\u51c6\u7b54\u6848\u3002\u5f53\u4ed6\u4eec\u95ee\u6211\u201cOOP\u6709\u4ec0\u4e48\u597d\u5904\uff1f\u201d\u6211\u53d1\u73b0\u81ea\u5df1\u60f3\u8981\u7ed9\u51fa\u4e00\u4e2a\u5c34\u5c2c\u7684\u957f\u7b54\u6848\uff0c\u5b83\u5305\u62ec\u201c\u8fd912\u4ef6\u4e8b\u5e94\u8be5\u662fOOP\u7684\u597d\u5904\uff0c\u4f46\u5b9e\u9645\u4e0aOOP\u6ca1\u6709\u72ec\u7279\u7684\u4f18\u70b9\u3002\u201d\u6240\u4ee5\u6211\u6b63\u5728\u5199\u8fd9\u7bc7\u6587\u7ae0\uff0c\u5c06\u6765\uff0c\u5f53\u6211\u5728\u6c42\u804c\u9762\u8bd5\u4e2d\u88ab\u95ee\u5230\u8fd9\u6837\u7684\u95ee\u9898\u65f6\uff0c\u6211\u4f1a\u7b80\u5355\u5730\u628a\u4eba\u4eec\u5f15\u5411\u6211\u5728\u8fd9\u91cc\u5199\u7684\u4e1c\u897f\u3002\n\u8fd9\u4e9b\u771f\u7684\u91cd\u8981\u5417\uff1f\u4f60\u53ef\u80fd\u4f1a\u8bf4\u6211\u662f\u5728\u6d6a\u8d39\u65f6\u95f4\uff0c\u6211\u6b63\u5728\u5199\u4e00\u7bc7\u5f88\u957f\u7684\u6587\u7ae0\uff0c\u53ea\u4f1a\u6d89\u53ca\u4e00\u5806\u5bf9\u4efb\u4f55\u4eba\u90fd\u6ca1\u6709\u597d\u5904\u7684\u8bed\u4e49\u4e0a\u7684\u5439\u6bdb\u6c42\u75b5\u3002\u4f46\u6211\u8ba4\u4e3a\uff0c\u6df7\u4e71\u7684\u5b9a\u4e49\u4f1a\u5bfc\u81f4\u6df7\u4e71\u7684\u601d\u7ef4\uff0c\u6b63\u5982\u5965\u5a01\u5c14\u6240\u63cf\u8ff0\u7684\u90a3\u6837\uff1a\n\u4e00\u4e2a\u7537\u4eba\u53ef\u80fd\u56e0\u4e3a\u4ed6\u89c9\u5f97\u81ea\u5df1\u662f\u4e2a\u5931\u8d25\u8005\u800c\u5f00\u59cb\u559d\u9152\uff0c\u7136\u540e\u56e0\u4e3a\u4ed6\u559d\u9152\u800c\u66f4\u52a0\u5f7b\u5e95\u5730\u5931\u8d25\u3002\u8fd9\u4e0e\u53d1\u751f\u5728\u82f1\u8bed\u4e0a\u7684\u4e8b\u60c5\u975e\u5e38\u76f8\u4f3c\u3002\u5b83\u53d8\u5f97\u4e11\u964b\u548c\u4e0d\u51c6\u786e\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u611a\u8822\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8bed\u8a00\u7684\u61d2\u6563\u4f7f\u6211\u4eec\u66f4\u5bb9\u6613\u4ea7\u751f\u611a\u8822\u7684\u60f3\u6cd5\u3002\u5173\u952e\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u53ef\u9006\u7684\u3002\u73b0\u4ee3\u82f1\u8bed\uff0c\u5c24\u5176\u662f\u4e66\u9762\u8bed\uff0c\u5145\u6ee1\u4e86\u901a\u8fc7\u6a21\u4eff\u4f20\u64ad\u7684\u574f\u4e60\u60ef\uff0c\u53ea\u8981\u613f\u610f\u4ed8\u51fa\u5fc5\u8981\u7684\u52aa\u529b\uff0c\u8fd9\u4e9b\u574f\u4e60\u60ef\u662f\u53ef\u4ee5\u907f\u514d\u7684\u3002\n\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u613f\u610f\u8ba4\u4e3a\u6211\u505a\u4e86\u4e00\u4e9b\u6709\u76ca\u7684\u4e8b\u60c5\uff0c\u53ea\u8981\u6211\u80fd\u591f\u63a5\u53d7\u4e0eOOP\u76f8\u5173\u7684\u5e7f\u6cdb\u7684\u60f3\u6cd5\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u5f88\u957f\uff0c\u5982\u679c\u6211\u4ed4\u7ec6\u9650\u5b9a\u5173\u4e8eOOP\u7684\u6bcf\u4e00\u53e5\u8bdd\uff0c\u5b83\u4f1a\u66f4\u957f\u3002\u8bf7\u6ce8\u610f\uff0c\u4e0b\u9762\uff0c\u5f53\u6211\u5c06\u591a\u8303\u4f8b\u8bed\u8a00(\u5982Scala)\u79f0\u4e3aOOP\u8bed\u8a00\u65f6\uff0c\u6211\u4e13\u95e8\u6307\u7684\u662f\u8be5\u8bed\u8a00\u4e2d\u7684OOP\u7279\u6027\u3002\u6211\u60f3\u8ba9\u60a8\u95ee\u95ee\u81ea\u5df1\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4e00\u79cd\u591a\u8303\u4f8b\u8bed\u8a00\u6765\u7f16\u5199\u201c\u51fd\u6570\u5f0f\u201d\u8303\u4f8b\uff0c\u60a8\u662f\u5426\u771f\u7684\u4ece\u8be5\u8bed\u8a00\u7684\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1(OOP)\u7279\u6027\u4e2d\u83b7\u5f97\u4e86\u4ec0\u4e48\uff1f\u60a8\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u4ece\u6839\u672c\u4e0a\u662f\u201c\u51fd\u6570\u5f0f\u201d\u7684\u8bed\u8a00\uff0c\u800c\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff0c\u66f4\u5bb9\u6613\u5730\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff1f\n\u5728\u79d1\u6280\u535a\u5ba2\u548c\u8bba\u575b\u4e0a\uff0c\u6709\u5f88\u591a\u4eba\u4e3aOOP\u8fa9\u62a4\uff0c\u4ed6\u4eec\u786e\u4fe1\u81ea\u5df1\u77e5\u9053\u81ea\u5df1\u5728\u634d\u536b\u4ec0\u4e48\uff0c\u5c3d\u7ba1\u6ca1\u6709\u4efb\u4f55\u6807\u51c6\u7684\u5b9a\u4e49\u3002\u60f3\u60f3\u201c\u7c73\u5c14\u65af\u901a\u201d\u5728\u9ed1\u5ba2\u65b0\u95fb\u4e0a\u7684\u8fd9\u53e5\u8bdd\uff1a\n\u8fd9\u7bc7\u6587\u7ae0\u548c\u8bb8\u591a\u9f13\u5439\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u6587\u7ae0\u4e00\u6837\uff0c\u5b58\u5728\u4e00\u5b9a\u7684\u8ba4\u77e5\u504f\u5dee\uff0c\u8fd9\u4f7f\u5b83\u770b\u4e0d\u5230OO\u64c5\u957f\u4ec0\u4e48\u3002\nOO\u64c5\u957f\u4ec0\u4e48\uff1f\u663e\u7136\uff0c\u7c73\u5c14\u65af\u901a\u8ba4\u4e3aOO\u64c5\u957f\u52a8\u6001\u3002\u7136\u540e\uff0c\u7c73\u5c14\u65af\u901a\u6279\u8bc4\u4e86Haskel\u5177\u6709\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u7684\u4e8b\u5b9e\uff0c\u5ffd\u7565\u4e86Java\u3001C++\u3001C#\u548c\u8bb8\u591a\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u90fd\u5177\u6709\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u7684\u4e8b\u5b9e\uff1a\nAlan Kay\u5199\u9053\uff1a\u201c\u5236\u9020\u4f1f\u5927\u7684\u3001\u53ef\u6269\u5c55\u7684\u7cfb\u7edf\u7684\u5173\u952e\u66f4\u591a\u7684\u662f\u8bbe\u8ba1\u5176\u6a21\u5757\u5982\u4f55\u901a\u4fe1\uff0c\u800c\u4e0d\u662f\u5b83\u4eec\u7684\u5185\u90e8\u5c5e\u6027\u548c\u884c\u4e3a\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u201d\n\u8981\u5f00\u59cb\u4e86\u89e3\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u8bf7\u8003\u8651Haskell\u4e2d\u4ee4\u4eba\u8ba8\u538c\u7684\u5b57\u7b26\u4e32/Data.Text\u62c6\u5206\u3002String\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5904\u4e8e\u201c\u4e0d\u8003\u8651\u6570\u636e\u201d\u7684\u601d\u7ef4\u6a21\u5f0f\u4e2d\uff0c\u5b83\u8d64\u88f8\u88f8\u5730\u5145\u5f53[Char]\u3002\u73b0\u5728\u60a8\u9677\u5165\u4e86\u56f0\u5883\uff1a\u4e0d\u80fd\u66f4\u6539\u5176\u8868\u793a\u5f62\u5f0f\uff0c\u4e0d\u80fd\u8f7b\u677e\u5f15\u5165Unicode\u7b49\u7b49\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u662f\u5982\u6b64\u4e25\u683c\uff0c\u4ee5\u81f3\u4e8e\u5fc5\u987b\u5f15\u5165\u4e00\u4e2a\u5168\u65b0\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u800c\u6211\u4eec\u4ecd\u5728\u5904\u7406\u5176\u540e\u679c\u3002\n\u4f1f\u5927\u7684\u3001\u53ef\u751f\u957f\u7684\u7cfb\u7edf\uff01\u6211\u4eec\u8f6f\u4ef6\u7684\u5927\u89c4\u6a21\u7ed3\u6784\uff0c\u88ab\u5206\u89e3\u6210\u6a21\u5757\uff0c\u4e0d\u4ec5\u5728\u65f6\u95f4\u4e0a\u51bb\u7ed3\uff0c\u800c\u4e14\u5728\u672a\u6765\u4e5f\u662f\u5982\u6b64\u3002\u6211\u4eec\u7684\u4efb\u52a1\u662f\u601d\u8003\u5173\u7cfb\u548c\u6c9f\u901a\u3002\n\u7c73\u5c14\u65af\u901a\u968f\u540e\u5f15\u7528\u4e86\u539f\u6587\uff0c\u5e76\u660e\u786e\u8868\u793a\u4ed6\u4eec\u771f\u6b63\u5728\u8c08\u8bba\u7684\u662f\u201c\u771f\u6b63\u7684\u52a8\u6001\u8bed\u8a00\u201d\uff0c\u800c\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1(OOP)\uff1a\n\u4e3a\u4e86\u63d0\u51fa\u66f4\u597d\u7684[\u5206\u6d3e]\u89e3\u51b3\u65b9\u6848\uff0cHaskell\u548cClojure\u91c7\u7528\u4e86\u622a\u7136\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u4f46\u90fd\u4f18\u4e8e\u4efb\u4f55OO\u7a0b\u5e8f\u5458\u901a\u5e38\u4f7f\u7528\u7684\u65b9\u6cd5\u3002\n\u201c\u6709\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u5458\u5417\uff1f\u201d\u4e0d\u884c!\u3002\u5728\u771f\u6b63\u7684\u52a8\u6001\u8bed\u8a00\u4e2d\u5b9e\u73b0\u7684OO\u4e0d\u4ec5\u516c\u5f00\u4e86\u56fa\u5b9a\u7684\u5206\u6d3e\u673a\u5236\uff0c\u8fd8\u516c\u5f00\u4e86\u5206\u6d3e\u672c\u8eab\u7684\u673a\u5236\uff0c\u5373\u5143\u5bf9\u8c61\u534f\u8bae\u3002\n\u6709\u5f88\u591aOOP\u8bed\u8a00\u5177\u6709\u9759\u6001\u6570\u636e\u7c7b\u578b\u68c0\u67e5\uff0c\u8fd8\u6709\u4e00\u4e9b\u975eOOP\u8bed\u8a00\u662f\u52a8\u6001\u7684\uff0c\u6240\u4ee5\u7c73\u5c14\u65af\u901a\u6839\u672c\u4e0d\u662f\u5728\u8c08\u8bbaOOP\uff0c\u4f46\u662f\u7c73\u5c14\u65af\u901a\u786e\u4fe1\u4ed6\u4eec\u77e5\u9053\u4ec0\u4e48\u662fOOP\u3002\u8fd9\u662f\u6211\u7ecf\u5e38\u9047\u5230\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u4e00\u4e2aOOP\u7684\u72c2\u70ed\u62e5\u62a4\u8005\uff0c\u4ed6\u4f7f\u7528\u4e86OOP\u7684\u67d0\u79cd\u7279\u6b8a\u5b9a\u4e49\uff0c\u8fd9\u8ba9\u6211\u5b8c\u5168\u63aa\u624b\u4e0d\u53ca\u3002\n\u8bf7\u6ce8\u610f\u8fd9\u91cc\u7684\u8bbd\u523a\uff1a\u7c73\u5c14\u65af\u901a\u5f15\u7528\u4e86\u4e00\u6bb5\u6279\u8bc4Java\u7684\u6587\u7ae0\uff0c\u800c\u7c73\u5c14\u65af\u901a\u5374\u58f0\u79f0\u8fd9\u6bb5\u5173\u4e8e\u201c\u540e\u671f\u7ed1\u5b9a\u201d\u7684\u6587\u7ae0\u5c55\u793a\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u957f\u5904\u3002\u6839\u636e\u8fd9\u4e2a\u5b9a\u4e49\uff0cJava\u4e0d\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff0c\u8fd9\u80af\u5b9a\u4f1a\u8ba9Java\u7a0b\u5e8f\u5458\u5927\u5403\u4e00\u60ca\u3002\n\u540c\u6837\uff0c\u6709\u4e9bOOP\u8bed\u8a00\u6ca1\u6709\u540e\u671f\u7ed1\u5b9a\uff0c\u6709\u4e9b\u975eOOP\u8bed\u8a00\u6709\u540e\u671f\u7ed1\u5b9a\u3002\u4f46\u5bf9\u4e8e\u7c73\u5c14\u65af\u901a\u6765\u8bf4\uff0c\u6ca1\u6709\u54ea\u4e2a\u771f\u6b63\u7684OOP\u7a0b\u5e8f\u5458\u4f1a\u4f7f\u7528\u5e26\u6709\u9759\u6001\u6570\u636e\u7c7b\u578b\u68c0\u67e5\u7684\u8bed\u8a00\u3002\u5728\u7c73\u5c14\u65af\u901a\u53d1\u660e\u4e86\u4e00\u4e2a\u5b8c\u5168\u72ec\u7279\u7684OOP\u5b9a\u4e49\u7684\u7a0b\u5ea6\u4e0a\uff0c\u4ed6\u4eec\u5bf9OOP\u7684\u8bc4\u8bba\u4e0e\u4efb\u4f55\u5176\u4ed6\u60f3\u8981\u8c08\u8bbaOOP\u7684\u4eba\u5b8c\u5168\u65e0\u5173\u3002\u7136\u800c\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u7c73\u5c14\u65af\u901a\u662f\u975e\u5e38\u5e38\u89c1\u7684\uff1a\u6211\u7ecf\u5e38\u9047\u5230\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u4eec\u5bf9OOP\u6709\u7740\u5b8c\u5168\u72ec\u7279\u7684\u5b9a\u4e49\u3002\u8fd9\u4f1a\u8ba9\u6211\u4eec\u5f88\u96be\u8fdb\u884c\u6709\u610f\u4e49\u7684\u5bf9\u8bdd\u3002\n\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u8c08\u8bba\u50cfOOP\u8fd9\u6837\u65e0\u5b9a\u5f62\u7684\u6982\u5ff5\u5462\uff1f\u6ca1\u6709\u6807\u51c6\u7684\u5b9a\u4e49\uff0c\u6240\u4ee5\u6211\u4eec\u6240\u80fd\u505a\u7684\u5c31\u662f\u8c03\u67e5\u51e0\u4e2a\u4e0d\u540c\u7684\u6765\u6e90\uff0c\u5e76\u6536\u96c6\u4e3b\u8981\u7684\u60f3\u6cd5\u3002\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u8fdb\u884c\u8fd9\u9879\u8c03\u67e5\uff1f\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u9996\u5148\u662f\u5386\u53f2\u4e4b\u65c5\uff0c\u542cAlan Kay\u63cf\u8ff0OOP\u7684\u6839\u6e90\uff0c\u7136\u540e\u770b\u770b\u76ee\u524d\u7684\u4e00\u4e9b\u5165\u95e8\u6750\u6599\u5728\u5411\u521d\u5b66\u8005\u4f20\u6388OOP\u7684\u6838\u5fc3\u601d\u60f3\u3002\n\u4eba\u4eec\u5c06\u4f7f\u7528[\u7b14\u8bb0\u672c]\u201cDynabook\u201d\u4ee5\u5728\u5171\u4eab\u5927\u578b\u673a\u4e0a\u65e0\u6cd5\u5b9e\u73b0\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba1\u7b97\uff1b\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u6f5c\u5728\u7528\u6237\u610f\u5473\u7740\u7528\u6237\u754c\u9762\u5c06\u4e0d\u5f97\u4e0d\u6210\u4e3a\u8499\u7279\u68ad\u5229\u548c\u5e03\u9c81\u7eb3\u90a3\u6837\u7684\u5b66\u4e60\u73af\u5883\uff1b\u5bf9\u4e8e\u5927\u8303\u56f4\u3001\u964d\u4f4e\u590d\u6742\u6027\u548c\u6700\u7ec8\u7528\u6237\u8bc6\u5b57\u7684\u9700\u6c42\uff0c\u5c06\u9700\u8981\u5e9f\u9664\u6570\u636e\u548c\u63a7\u5236\u7ed3\u6784\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4e00\u79cd\u66f4\u5177\u751f\u7269\u6027\u7684\u8ba1\u5212\uff0c\u5373\u53d7\u4fdd\u62a4\u7684\u901a\u7528\u7ec6\u80de\u53ea\u901a\u8fc7\u80fd\u591f\u6a21\u62df\u4efb\u4f55\u6240\u9700\u884c\u4e3a\u7684\u6d88\u606f\u8fdb\u884c\u4ea4\u4e92\u3002\n\u2026\u3002\u5728\u8fd9\u4e00\u5207\u4e2d\uff0c\u6211\u610f\u8bc6\u5230\u901a\u5411\u57fa\u4e8e\u5bf9\u8c61\u7684\u7cfb\u7edf\u7684\u6865\u6881\u53ef\u80fd\u662f\u5c06\u6bcf\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u53d1\u9001\u7ed9\u5b83\u7684\u6d88\u606f\u7684\u8bed\u6cd5\u5236\u5bfc\u89e3\u91ca\u5668\u3002\u8fd9\u5c06\u4e00\u4e3e\u5c06\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u4e49\u4e0e\u5b8c\u5168\u53ef\u6269\u5c55\u8bed\u8a00\u7684\u7406\u60f3\u7edf\u4e00\u8d77\u6765\u3002\u8111\u6d77\u4e2d\u7684\u5f62\u8c61\u662f\u4e00\u53f0\u72ec\u7acb\u7684\u8ba1\u7b97\u673a\u5411\u5176\u4ed6\u8ba1\u7b97\u673a\u53d1\u9001\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u5fc5\u987b\u88ab\u63a5\u6536\u8005\u63a5\u53d7\u548c\u7406\u89e3\uff0c\u7136\u540e\u624d\u80fd\u53d1\u751f\u4efb\u4f55\u4e8b\u60c5\u3002\u5728\u4eca\u5929\u7684\u672f\u8bed\u4e2d\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2a\u63d0\u4f9b\u670d\u52a1\u7684\u670d\u52a1\u5668\uff0c\u5176\u90e8\u7f72\u548c\u5224\u65ad\u5b8c\u5168\u53d6\u51b3\u4e8e\u670d\u52a1\u5668\u4e0e\u88ab\u670d\u52a1\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\u6982\u5ff5\u3002\n\u8fd9\u662f\u4e00\u4e2a\u7f8e\u597d\u7684\u613f\u666f\uff0c\u4f46\u8fd9\u4e0e\u6211\u4eec\u73b0\u5728\u6240\u8bf4\u7684\u201c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u201d\u662f\u4e00\u6837\u7684\u5417\uff1f\u5728\u4e0a\u9762\u7684\u5f15\u8ff0\u4e2d\uff0c\u827e\u4f26\u00b7\u51ef\u4f3c\u4e4e\u5728\u63cf\u8ff0\u4e00\u79cd\u63a5\u8fd1\u6211\u4eec\u73b0\u5728\u6240\u8bf4\u7684\u6f14\u5458\u6a21\u578b\u7684\u4e1c\u897f\u3002\n\u53c2\u4e0e\u8005\u662f\u6267\u884c\u51fd\u6570\u7684\u8fdb\u7a0b\u3002\u2026\u3002\u53c2\u4e0e\u8005\u4ece\u4e0d\u5171\u4eab\u72b6\u6001\uff0c\u56e0\u6b64\u6c38\u8fdc\u4e0d\u9700\u8981\u4e89\u7528\u9501\u6765\u8bbf\u95ee\u5171\u4eab\u6570\u636e\u3002\u76f8\u53cd\uff0c\u53c2\u4e0e\u8005\u901a\u8fc7\u53d1\u9001\u4e0d\u53ef\u53d8\u7684\u6d88\u606f\u6765\u5171\u4eab\u6570\u636e\u3002\u4e0d\u80fd\u4fee\u6539\u4e0d\u53ef\u53d8\u6570\u636e\uff0c\u56e0\u6b64\u8bfb\u53d6\u4e0d\u9700\u8981\u9501\u5b9a\u3002\u6d88\u606f\u4ee5\u5f02\u6b65\u65b9\u5f0f\u53d1\u9001\uff0c\u5e76\u7f13\u5b58\u5728\u53c2\u4e0e\u8005\u7684\u90ae\u7bb1\u4e2d\u3002\u90ae\u7bb1\u672c\u8d28\u4e0a\u662f\u5177\u6709\u591a\u4e2a\u751f\u4ea7\u8005(\u5176\u4ed6\u53c2\u4e0e\u8005)\u548c\u5355\u4e2a\u6d88\u8d39\u8005\u7684\u961f\u5217\u3002\u901a\u8fc7\u57fa\u4e8e\u6a21\u5f0f\u5339\u914d\u4ece\u90ae\u7bb1\u63a5\u6536\u6d88\u606f\u6765\u9a71\u52a8\u7279\u5b9a\u53c2\u4e0e\u8005\u3002\n\u827e\u4f26\u00b7\u51ef(Alan Kay)\u5bf9\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1(OOP)\u7684\u7f8e\u4e3d\u63cf\u8ff0\u4e0e\u6211\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u6240\u89c1\u8fc7\u7684\u4efb\u4f55\u4e8b\u60c5\u90fd\u6ca1\u6709\u5173\u7cfb\u3002\u6bcf\u5f53\u6211\u6307\u51fa\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u7ed3\u679c\u4e0e\u627f\u8bfa\u7684\u76f8\u53bb\u751a\u8fdc\u65f6\uff0c\u6211\u7ecf\u5e38\u4f1a\u5f97\u5230\u4e00\u4e2a\u4e0d\u662f\u771f\u6b63\u7684\u82cf\u683c\u5170\u4eba\u7684\u8fa9\u62a4\uff1a\u5982\u679c\u6211\u505a\u5f97\u66f4\u597d\uff0c\u6216\u8005\u4f7f\u7528\u66f4\u7eaf\u7cb9\u7684\u8bed\u8a00\uff0c\u90a3\u4e48\u6211\u5c31\u4f1a\u4f53\u9a8c\u5230\u542f\u8499\uff0c\u7a81\u7136\u4e4b\u95f4\u6211\u5c31\u4f1a\u83b7\u5f97\u771f\u6b63\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u6240\u6709\u597d\u5904\u3002\u7136\u800c\uff0c\u5373\u4f7f\u662f\u827e\u4f26\u00b7\u51ef\u4f3c\u4e4e\u4e5f\u610f\u8bc6\u5230\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u8fdc\u4e0d\u662f\u4ed6\u4e00\u5f00\u59cb\u7684\u6837\u5b50\u3002\u5f53\u7136\uff0c\u4ed6\u610f\u8bc6\u5230\u81ea\u5df1\u7684\u6bcd\u8bedSmalltalk\u4ece\u672a\u6d41\u884c\u8d77\u6765\u3002\u4f46\u662f\u4ed6\u5982\u4f55\u770b\u5f85\u666e\u53ca\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u8bed\u8a00\u5462\uff1f\nSun Microsystems\u6709\u5408\u9002\u7684\u4eba\u5c06Java\u53d8\u6210\u4e00\u79cd\u4e00\u6d41\u7684\u8bed\u8a00\uff0c\u6211\u76f8\u4fe1\u662fSun\u7684\u8425\u9500\u4eba\u5458\u5728\u5b83\u5e94\u8be5\u53d1\u5e03\u4e4b\u524d\u5306\u5fd9\u63a8\u51fa\u4e86\u5b83\u3002\n\u2026\u3002\u5982\u679cSun\u7684\u4e13\u4e1a\u4eba\u5458\u6709\u673a\u4f1a\u4fee\u590dJava\uff0c\u4e16\u754c\u5c06\u4f1a\u53d8\u5f97\u66f4\u52a0\u6109\u5feb\u3002\u8fd9\u4e0d\u662f\u79d8\u5bc6\u4fe1\u606f\u3002\u8fd9\u53ea\u662f\u8fd9\u79cd\u6d41\u884c\u6587\u5316\u7684\u79d8\u5bc6\u3002\n\u827e\u4f26\u00b7\u51ef\u81ea\u5df1\u4ece\u6765\u90fd\u4e0d\u662fOOP\u7684\u76f2\u76ee\u7684\u610f\u8bc6\u5f62\u6001\u634d\u536b\u8005\u3002\u4ed6\u501f\u9274\u4e86Lisp\u7684\u5f88\u591a\u60f3\u6cd5\uff0c\u5e76\u5766\u7387\u5730\u8868\u8fbe\u4e86\u4ed6\u5bf9Lisp\u7684\u94a6\u4f69\uff1a\n\u51ef\u5c06SIMULA\u63cf\u8ff0\u4e3a\u4e00\u5957\u4f1f\u5927\u7684\u8fc7\u6e21\u601d\u60f3\u3002\u6709\u4e86SIMULA\uff0cALGOL\u5757\u53ef\u4ee5\u4f5c\u4e3a\u72ec\u7acb\u7684\u4e1c\u897f\u4f7f\u7528\uff0c\u53ef\u4ee5\u627f\u8f7d\u6570\u636e\u548c\u884c\u4e3a\u30021966\u5e74\uff0c\u5f53\u51ef\u8bfb\u5230\u5c3c\u52a0\u5fb7\u548c\u8fbe\u5c14\u5173\u4e8eSIMULA\u7684\u65e9\u671f\u8bba\u6587\u65f6\uff0c\u4ed6\u521a\u521a\u5b66\u4f1a\u4e86Sketchpad\u3002\u51ef\u5bf9\u4ed6\u540e\u6765\u6240\u8bf4\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8fdb\u884c\u4e86\u751f\u7269\u5b66\u4e0a\u7684\u626d\u66f2\u3002\u201c\u4e00\u5207\u90fd\u662f\u4e00\u4e2a\u7ec6\u80de\uff0c\u201d\u4ed6\u89e3\u91ca\u8bf4\u3002\u201c\u6211\u8865\u5145\u7684\u4e3b\u8981\u4e00\u70b9\u662f\uff0c\u4efb\u4f55\u4e1c\u897f\u90fd\u53ef\u4ee5\u662f\u5bf9\u8c61\u3002\u6709\u4e00\u79cd\u63a5\u53e3\u4ee3\u6570\uff0c\u4eca\u5929\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u591a\u6001\u3002\u51fa\u73b0\u4e86\u8fd9\u4e9b\u89c2\u5ff5\u7684\u78b0\u649e\u548c\u53e3\u9f7f\u4e0d\u6e05\u3002\u201c\u3002Kay\u94a6\u4f69LISP\u63d0\u4f9b\u7684\u4e00\u7ec4\u4f1f\u5927\u7684\u601d\u60f3\uff0c\u5e76\u5c06\u5176\u79f0\u4e3a\u201c\u6709\u53f2\u4ee5\u6765\u8bbe\u8ba1\u7684\u6700\u4f1f\u5927\u7684\u5355\u4e00\u7f16\u7a0b\u8bed\u8a00\u201d\u3002\n\u6211\u81ea\u5df1\u4f7f\u7528OOP\u7684\u7ecf\u9a8c\u662f\u5f00\u4e86\u5f88\u957f\u65f6\u95f4\u7684\u4f1a\u8bae\uff0c\u8ba8\u8bba\u4e00\u4e9b\u6beb\u65e0\u4ef7\u503c\u7684\u7410\u4e8b\uff0c\u6bd4\u5982\u5982\u4f55\u5904\u7406Ruby on rails\u4e2d\u7684\u80d6\u6a21\u578b\u7c7b\uff0c\u628a\u4ee3\u7801\u91cd\u6784\u6210\u66f4\u5c0f\u7684\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u90fd\u662f\u4e00\u4e9b\u5b9e\u7528\u7a0b\u5e8f\u4ee3\u7801\uff0c\u5c3d\u7ba1\u6211\u4eec\u4e0d\u5141\u8bb8\u79f0\u5b83\u4e3a\u5b9e\u7528\u7a0b\u5e8f\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b9e\u7528\u7a0b\u5e8f\u4ee3\u7801\u5728OOP\u4e0b\u88ab\u8ba4\u4e3a\u662f\u4e0d\u597d\u7684\u4e1c\u897f\u3002\u6211\u89c1\u8fc7\u8d85\u667a\u80fd\u7684\u4eba\u6d6a\u8d39\u4e86\u65e0\u6570\u7684\u65f6\u95f4\u6765\u8ba8\u8bba\u5982\u4f55\u5c06\u4f9d\u8d56\u9879\u6ce8\u5165\u7cfb\u7edf\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u4ece\u800c\u4f7f\u6211\u4eec\u80fd\u591f\u6b63\u786e\u5730\u5b9e\u4f8b\u5316\u6211\u4eec\u7684\u5bf9\u8c61\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u5c31\u662fOOP\u7684\u6700\u5927\u60b2\u54c0\uff1a\u8fd9\u4e48\u591a\u624d\u534e\u6a2a\u6ea2\u7684\u5934\u8111\u88ab\u6d6a\u8d39\u5728\u4e00\u4e2a\u65e0\u7528\u7684\u6559\u6761\u4e0a\uff0c\u5b83\u5e26\u6765\u4e86\u5f88\u591a\u75db\u82e6\uff0c\u5374\u6ca1\u6709\u5e26\u6765\u4efb\u4f55\u597d\u5904\u3002\u6700\u7cdf\u7cd5\u7684\u662f\uff0c\u7531\u4e8eOOP\u672a\u80fd\u63d0\u4f9b\u7ed3\u675f\u6211\u4eec\u8f6f\u4ef6\u56f0\u5883\u7684\u7075\u4e39\u5999\u836f\uff0c\u6bcf\u4e00\u4e24\u5e74\u6211\u4eec\u5c31\u4f1a\u53d7\u5230\u4e00\u79cd\u65b0\u7684\u6b63\u7edf\u89c2\u5ff5\u7684\u6b22\u8fce\uff0c\u6bcf\u4e2a\u6b63\u7edf\u89c2\u5ff5\u90fd\u627f\u8bfa\u6700\u7ec8\u4f7fOOP\u6309\u7167\u6700\u521d\u627f\u8bfa\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002\nSG\uff1a\u55ef\uff0c\u6b63\u5982\u5b83\u5728\u540d\u79f0\u4e2d\u6240\u8bf4\uff0cSOAP\u662f\u7528\u6765\u8bbf\u95ee\u8fdc\u7a0b\u5bf9\u8c61\u7684\u3002\nSG\uff1a\u548cCORBA\u5b8c\u5168\u4e00\u6837\uff0c\u53ea\u662f\u66f4\u7b80\u5355\u3002\u6211\u4eec\u4f7f\u7528HTTP\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u4eba\u90fd\u4e0d\u5141\u8bb8\u7a7f\u8d8a\u9632\u706b\u5899\u7684\u590d\u6742\u4f20\u8f93\u534f\u8bae\u3002\u6211\u4eec\u4f7f\u7528\u7684\u4e0d\u662f\u67d0\u79cd\u4e8c\u8fdb\u5236\u6d88\u606f\u683c\u5f0f\uff0c\u800c\u662fXML\u3002\nSG\uff1a\u5f53\u7136\u53ef\u4ee5\u3002\u9996\u5148\u662f\u80a5\u7682\u4fe1\u5c01\u3002\u8fd9\u76f8\u5f53\u7b80\u5355\u3002\u5b83\u53ea\u662f\u4e00\u4e2a\u7531\u5934\u548c\u6b63\u6587\u7ec4\u6210\u7684XML\u6587\u6863\u3002\u5728\u8eab\u4f53\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8fdb\u884cRPC\u8c03\u7528\u3002\nSG\uff1a\u5f53\u7136\u53ef\u4ee5\u3002\u6b63\u5982\u6211\u6240\u8bf4\u7684\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u65b9\u6cd5\u540d\u53ca\u5176\u53c2\u6570\u653e\u5165\u4e3b\u4f53\u4e2d\u6765\u8fdb\u884cRPC\u8c03\u7528\u3002\u65b9\u6cd5\u540d\u662f\u6700\u5916\u5c42\u7684\u5143\u7d20\uff0c\u6bcf\u4e2a\u5b50\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u53c2\u6570\u3002\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u6309\u7167\u89c4\u8303\u7b2c5\u8282\u4e2d\u7684\u89c4\u5b9a\u952e\u5165\u3002\nSG\uff1a\u7aef\u70b9\uff0c\u670d\u52a1\u7684\u5730\u5740\u3002\u60a8\u53ef\u4ee5\u5c06SOAP\u4fe1\u5c01\u53d1\u9001\u5230\u7aef\u70b9\u7684URL\u3002\n\u6234\u592b\uff1a\u55ef\u3002\u5982\u679c\u6211\u5c06\u670d\u52a1\u79fb\u52a8\u5230\u4e0d\u540c\u7684\u7aef\u70b9\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f\u6211\u80fd\u62ff\u56de301\u5417\uff1f\nDev\uff1a\u90a3\u4e48\uff0c\u5f53\u60a8\u8bf4SOAP\u4f7f\u7528HTTP\u65f6\uff0c\u60a8\u7684\u610f\u601d\u662f\u8bf4HTTP\u4e0a\u7684SOAP\u96a7\u9053\u3002\nSG\uff1a\u55ef\uff0c\u201c\u96a7\u9053\u201d\u8fd9\u4e2a\u8bcd\u592a\u96be\u542c\u4e86\u3002\u6211\u4eec\u66f4\u613f\u610f\u8bf4SOAP\u662f\u4ea4\u901a\u4e0d\u53ef\u77e5\u7684\u3002\nDev\uff1a\u4f46\u662fHTTP\u4e0d\u662f\u4e00\u79cd\u4f20\u8f93\u534f\u8bae\uff0c\u5b83\u662f\u4e00\u79cd\u5e94\u7528\u7a0b\u5e8f\u534f\u8bae\u3002\u4e0d\u7ba1\u600e\u6837\uff0cSOAP\u8fd8\u652f\u6301\u54ea\u4e9b\u5176\u4ed6\u201c\u4f20\u8f93\u201d\u5462\uff1f\nSG\uff1a\u55ef\uff0c\u5b98\u65b9\u6ca1\u6709\u3002\u4f46\u4f60\u53ef\u80fd\u4f1a\u652f\u6301\u4ed6\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\u800c\u4e14\u6709\u5f88\u591a\u5e73\u53f0\u652f\u6301JMS\u3001FTP\u548cSMTP\u3002\n\u6234\u592b\uff1a\u8fd8\u6709\u8fd9\u4e9b\u201c\u6f14\u5458\u201d\u548c\u201c\u5fc5\u987b\u7406\u89e3\u201d\u7684\u5c5e\u6027\uff0c\u6709\u4eba\u7528\u8fc7\u5417\uff1f\nDev\uff1a\u55ef\uff0c\u6211\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba9\u4e8b\u60c5\u8fd0\u8f6c\u8d77\u6765\uff0c\u4f46\u524d\u63d0\u662f\u6211\u5fc5\u987b\u575a\u6301\u4f7f\u7528\u4e00\u4e2aSOAP\u5806\u6808\u3002\u6b64\u5916\uff0c\u6211\u4e0d\u80fd\u8bf4\u6211\u559c\u6b22\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u548c\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u60f3\u6cd5\u3002\nSG\uff1a\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff01\u5e8f\u5217\u5316\u5bf9\u8c61\uff01\u60a8\u662f\u4ece\u54ea\u91cc\u5f97\u5230SOAP\u662f\u5173\u4e8eRPC\u7684\u5370\u8c61\u7684\uff1fSOAP\u5b8c\u5168\u662f\u57fa\u4e8e\u6587\u6863\u7684\u6d88\u606f\u4f20\u9012\uff0c\u6211\u7684\u670b\u53cb\u3002\nSG\uff1a\u5fd8\u4e86\u6211\u8bf4\u7684\u8bdd\u5427\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u4f20\u9012\u7c97\u7c92\u5ea6\u7684\u6d88\u606f--\u60a8\u559c\u6b22\u201c\u7c97\u7c92\u5ea6\u201d\u8fd9\u4e2a\u8bcd\u5417\uff1f\u7b26\u5408XML\u67b6\u6784\u7684\u6d88\u606f\u3002\u6211\u4eec\u5c06\u65b0\u6837\u5f0f\u79f0\u4e3a\u6587\u6863/\u6587\u5b57\uff0c\u5c06\u65e7\u6837\u5f0f\u79f0\u4e3arpc/encode\u3002\ndev\uff1a(\u8bfb\u53d6XML Schema\u89c4\u8303)\u3002\u5723\u5f92\u4fdd\u4f51\u6211\u4eec\uff01\u4e9a\u5386\u5c71\u5927\u5927\u5e1d\u65e0\u6cd5\u89e3\u5f00\u8fd9\u4e00\u70b9\u3002\nSG\uff1a\u522b\u62c5\u5fc3\u3002\u60a8\u7684\u5de5\u5177\u5c06\u4e3a\u60a8\u521b\u5efa\u67b6\u6784\u3002\u771f\u7684\uff0c\u90fd\u662f\u5de5\u88c5\u7684\u95ee\u9898\u3002\nSG\uff1a\u55ef\uff0c\u5b83\u4eec\u4f1a\u53cd\u6620\u60a8\u7684\u4ee3\u7801(\u5982\u679c\u53ef\u80fd\u7684\u8bdd)\uff0c\u5e76\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u517c\u5bb9\u7684\u6a21\u5f0f\u3002\nDev\uff1a\u53cd\u601d\u6211\u7684\u4ee3\u7801\uff1f\u6211\u4ee5\u4e3a\u8fd9\u4e00\u5207\u90fd\u662f\u5173\u4e8e\u6587\u6863\u7684\uff0c\u800c\u4e0d\u662f\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u3002\nSG\uff1a\u4f60\u6ca1\u542c\u5230\u6211\u8bf4\u7684\u5417\uff1f\u8fd9\u90fd\u662f\u5de5\u5177\u7684\u95ee\u9898\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4eec\u4e0d\u80fd\u6307\u671b\u60a8\u624b\u52a8\u7f16\u5199XML Schema\u548cWSDL\u3002\u518d\u8bf4\u4e86\uff0c\u8fd9\u53ea\u662f\u4e2a\u7ba1\u9053\u5de5\u7a0b\u3002\u4f60\u4e0d\u9700\u8981\u770b\u7684\u3002\nSG\uff1a\u54e6\uff0c\u6211\u6ca1\u63d0\u5230WSDL\u5417\uff1fW-S-D-L\u3002Web\u670d\u52a1\u63cf\u8ff0\u8bed\u8a00\u3002\u5b83\u662f\u5982\u4f55\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3001\u53c2\u6570\u5217\u8868\u3001\u64cd\u4f5c\u540d\u3001\u4f20\u8f93\u7ed1\u5b9a\u548c\u7aef\u70b9URI\u7684\uff0c\u4ee5\u4fbf\u5ba2\u6237\u7aef\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8bbf\u95ee\u60a8\u7684\u670d\u52a1\u3002\u5feb\u770b\u554a\u3002\ndev\uff1a(\u8bfb\u53d6WSDL\u89c4\u8303)\u3002\u6211\u76f8\u4fe1\u5199\u8fd9\u5c01\u4fe1\u7684\u4eba\u5df2\u7ecf\u88ab\u67aa\u6740\u4e86\u3002\u8fd9\u751a\u81f3\u4e0d\u662f\u5185\u90e8\u4e00\u81f4\u7684\u3002\n\u56f4\u7ed5WSDL\u7b49\u884c\u4e1a\u6807\u51c6\u53d1\u5c55\u8d77\u6765\u7684\u6587\u5316\u5bfc\u81f4\u8a79\u59c6\u65af\u00b7\u5218\u6613\u65af(James Lewis)\u548c\u9a6c\u4e01\u00b7\u798f\u52d2(Martin Fowler)\u62b1\u6028\u201c\u5766\u7387\u5730\u8bf4\uff0c\u590d\u6742\u6027\u4ee4\u4eba\u60ca\u53f9\u201d\uff1a\n\u5f53\u7136\uff0c\u5fae\u670d\u52a1\u793e\u533a\u4e2d\u4f7f\u7528\u7684\u8bb8\u591a\u6280\u672f\u90fd\u662f\u4ece\u5f00\u53d1\u4eba\u5458\u5728\u5927\u578b\u7ec4\u7ec7\u4e2d\u96c6\u6210\u670d\u52a1\u7684\u7ecf\u9a8c\u4e2d\u53d1\u5c55\u800c\u6765\u7684\u3002\u5bb9\u9519\u8bfb\u53d6\u5668\u6a21\u5f0f\u5c31\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\u3002\u4f7f\u7528\u7f51\u7edc\u7684\u52aa\u529b\u8d77\u5230\u4e86\u4f5c\u7528\uff0c\u4f7f\u7528\u7b80\u5355\u7684\u534f\u8bae\u662f\u4ece\u8fd9\u4e9b\u7ecf\u5386\u4e2d\u884d\u751f\u51fa\u6765\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5-\u8fd9\u662f\u5bf9\u4e2d\u592e\u6807\u51c6\u7684\u4e00\u79cd\u53cd\u5e94\uff0c\u8fd9\u79cd\u53cd\u5e94\u5df2\u7ecf\u8fbe\u5230\u4e86\u4ee4\u4eba\u60ca\u53f9\u7684\u590d\u6742\u6027\uff0c\u5766\u7387\u5730\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u4ee4\u4eba\u60ca\u53f9\u7684\u53cd\u5e94\u3002(\u4efb\u4f55\u65f6\u5019\u60a8\u9700\u8981\u672c\u4f53\u6765\u7ba1\u7406\u60a8\u7684\u672c\u4f53\uff0c\u60a8\u90fd\u77e5\u9053\u60a8\u6709\u5f88\u5927\u7684\u9ebb\u70e6\u3002)\u3002\n\u5f53\u7136\uff0c\u5c3d\u7ba1\u5728\u8fd9\u4e9b\u7cfb\u7edf\u4e0a\u6295\u5165\u4e86\u65e0\u6570\u7684\u8d44\u91d1\uff0c\u4e3e\u884c\u4e86\u6210\u5343\u4e0a\u4e07\u7684\u4f1a\u8bae\u548c\u805a\u4f1a\uff0c\u51fa\u7248\u4e86\u51e0\u5341\u672c\u4e66\uff0c\u65e0\u6570\u7684\u79d1\u6280\u516c\u53f8\u50cfCroesus\u4e00\u6837\u81f4\u5bcc\uff0c\u4f46\u5f53\u6211\u63d0\u5230\u8fd9\u4e9b\u6602\u8d35\u7684\u707e\u96be\u65f6\uff0c\u6211\u88ab\u544a\u77e5\u6ca1\u6709\u771f\u6b63\u7684OOP\u7a0b\u5e8f\u5458\u518d\u505a\u8fd9\u4e9b\u65e0\u7a3d\u4e4b\u8c08\u4e86\u3002\u4f46\u662f\uff0c\u4ed6\u4eec\u5f53\u7136\u4f1a\u8fd9\u6837\u505a\uff1a\u7ef4\u62a4\u8fd9\u4e9b\u8106\u5f31\u3001\u5197\u957f\u7684\u9057\u7559\u7cfb\u7edf\u5360OOP\u7a0b\u5e8f\u5458\u6240\u505a\u5de5\u4f5c\u7684\u5f88\u5927\u6bd4\u4f8b\u3002\nSmalltalk\u4e0d\u4ec5\u4ec5\u662f\u5b83\u7684\u8bed\u6cd5\u6216\u7c7b\u5e93\uff0c\u5b83\u751a\u81f3\u4e0e\u7c7b\u65e0\u5173\u3002\u5f88\u62b1\u6b49\uff0c\u6211\u5f88\u4e45\u4ee5\u524d\u5c31\u4e3a\u8fd9\u4e2a\u8bdd\u9898\u521b\u9020\u4e86\u201c\u5bf9\u8c61\u201d\u8fd9\u4e2a\u8bcd\uff0c\u56e0\u4e3a\u5b83\u8ba9\u5f88\u591a\u4eba\u628a\u6ce8\u610f\u529b\u653e\u5728\u6b21\u8981\u7684\u60f3\u6cd5\u4e0a\u3002\u6700\u91cd\u8981\u7684\u60f3\u6cd5\u662f\u201c\u6d88\u606f\u4f20\u9012\u201d\u2026\u3002\u5236\u9020\u4f1f\u5927\u7684\u3001\u53ef\u6269\u5c55\u7684\u7cfb\u7edf\u7684\u5173\u952e\u66f4\u591a\u7684\u662f\u8bbe\u8ba1\u5176\u6a21\u5757\u5982\u4f55\u901a\u4fe1\uff0c\u800c\u4e0d\u662f\u8bbe\u8ba1\u5b83\u4eec\u7684\u5185\u90e8\u5c5e\u6027\u548c\u884c\u4e3a\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u60f3\u60f3\u4e92\u8054\u7f51-\u4e3a\u4e86\u751f\u5b58\uff0c\u5b83(A)\u5fc5\u987b\u5141\u8bb8\u8d85\u8fc7\u4efb\u4f55\u5355\u4e00\u6807\u51c6\u7684\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u60f3\u6cd5\u548c\u5b9e\u73b0\uff0c\u4ee5\u53ca(B)\u5141\u8bb8\u8fd9\u4e9b\u60f3\u6cd5\u4e4b\u95f4\u4e0d\u540c\u7a0b\u5ea6\u7684\u5b89\u5168\u4e92\u64cd\u4f5c\u6027\u3002\u5982\u679c\u4f60\u53ea\u5173\u6ce8\u6d88\u606f\u4f20\u9012-\u5e76\u4e14\u610f\u8bc6\u5230\u4e00\u4e2a\u597d\u7684\u5143\u7cfb\u7edf\u53ef\u4ee5\u540e\u671f\u7ed1\u5b9a\u5bf9\u8c61\u4e2d\u4f7f\u7528\u7684\u5404\u79cd\u4e8c\u7ea7\u67b6\u6784-\u90a3\u4e48\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u5f88\u591a\u57fa\u4e8e\u8bed\u8a00\u3001UI\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8ba8\u8bba\u90fd\u662f\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u7684\u3002\n\u6709\u4eba\u771f\u7684\u8ba4\u4e3aOOP\u662f\u7ed9\u6211\u4eec\u201c\u6d88\u606f\u4f20\u9012\u201d\u7684\u6700\u597d\u65b9\u5f0f\u5417\uff1f\u76ee\u524d\uff0c\u6211\u4eec\u6709\u8bb8\u591a\u6280\u672f\u53ef\u4ee5\u5e2e\u52a9\u4f20\u9012\u6d88\u606f\u3002\u51fd\u6570\u8303\u5f0f\u7684\u5021\u5bfc\u8005\u53ef\u80fd\u4f1a\u8bf4\u8fd9\u6837\u7684\u8bdd\uff1a\u201c\u7eaf\u51fd\u6570\u4e0e\u53c2\u4e0e\u8005\u6a21\u578b\u7684\u7ed3\u5408\u66f4\u8fdb\u4e00\u6b65\u5730\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86Alan Kay\u4f3c\u4e4e\u8ba4\u4e3a\u6700\u597d\u7684\u4e1c\u897f\u201d\uff0c\u4f46\u6211\u8981\u6307\u51fa\u7684\u662f\uff0c\u60a8\u53ef\u4ee5\u5c06\u81ea\u5df1\u9650\u5236\u5728\u4f7f\u7528PHP\uff0c\u5e76\u4e14\u53ea\u4f7f\u7528\u90a3\u4e9b\u65e9\u57282004\u5e74PHP4\u4e2d\u63d0\u4f9b\u7684\u7279\u6027\uff0c\u7136\u540e\u6dfb\u52a0\u4e00\u79cd\u73b0\u4ee3\u6210\u5206f\u3002\n..", "note_en": "(written by lawrence krubner, however indented passages are often quotes). You can contact lawrence at: lawrence@krubner.com, or follow me on  Twitter.\n      Person A is thus protected from the harmful effects of new information. New information is dangerous, as it might cause someone to change their mind. New information can be rendered safe simply by declaring it to be invalid. Person A believes all Scotsman are brave and honorable, and you can not convince them otherwise, for any counter-example you bring up is of some degraded Untrue Scotsman, which has no bearing on whatever they think of True Scotsman. And this is my experience whenever I argue against Object Oriented Programming (OOP): no matter what evidence I bring up for consideration, it is dismissed as irrelevant. If I complain that Java is verbose, I\u2019m told that True OOP Programmers let the IDE take care of some of the boilerplate, or perhaps I am told that Scala is better. If I complain that Scala involves too much ceremony, I\u2019m told that Ruby lacks ceremony. If I complain about the dangers of monkey-patching in Ruby, I\u2019m told that True OOP Programmers know how to use the meta-programming to their advantage, and if I can\u2019t do it then I am simply incompetent. I should use a language that is more pure, or a language that is more practical, I should use a language that has compile-time static data-type checking, or I should use a language that gives me the freedom of dynamic typing. If I complain about bugginess, I\u2019m told that those specific bugs have been fixed in the new version, why haven\u2019t I upgraded, or I\u2019m told there is a common workaround, and I\u2019m an idiot if I didn\u2019t know about it. If I complain that the most popular framework is bloated, I\u2019m told that no one uses that framework any more. No True OOP Programmer ever does whatever it is that I\u2019m complaining about.\n There are many beautiful ideas that people associate with OOP. I am going to show 2 things:\n 1.) compared to other languages (lisps, functional languages, etc) OOP languages have no unique strengths\n 2.) compared to other languages (lisps, functional languages, etc) OOP languages inflict a heavy burden of unneeded complexity\n Those features which are potentially good (data hiding, contract enforcement, polymorphism) are not unique to OOP and, in fact, stronger versions of these things are available in non-OOP languages. Those features that are unique to OOP (dependency injection, instantiation) are awful and exist only because OOP is awful.\n I am taking an ecumenical, universalist approach to OOP. Below I will refer to all of these languages as OOP: C++, Java, Scala, PHP, Ruby, and Javascript. Is that fair? I know, from personal experience, some proponents of Java will complain that Ruby and PHP lack compile time data-type checking and therefore should not be considered OOP. And I know, from personal experience, some proponents of Ruby will argue that in Ruby everything is an object, whereas Java still has non-object primitives (such as integers), and therefore Ruby is more of an OOP language than Java. I know that some critics of PHP will argue that OOP features were bolted on to PHP and it should not be taken seriously as an OOP language. I know some people will point out that Scala is multi-paradigm and it is as easy to work in the \u201cfunctional paradigm\u201d with Scala as it is easy to work with the object oriented paradigm.\n Given the diversity of the languages, and the lack of a standard definition, is it meaningful to talk about OOP at all? I would say yes. The need is urgent. OOP may be a poorly defined, amorphous concept, but it absolutely dominates the tech industry. Many software developers, and many companies, feel that OOP is the only reasonable way to develop software today. Any one who argues against OOP is immediately made conscious of the fact that they are arguing against the \u201cconventional wisdom\u201d of the industry.\n I run into this when I go to a job interview. It does not matter if I interview for a Ruby job, or a Java job, or a PHP job, the job interviewers ask me if I know what OOP is. They ask me to define \u201cencapsulation\u201d and \u201cpolymorphic dispatch\u201d. These are standard questions, to which I am expected to give the standard answers. And when they ask me \u201cWhat are the benefits of OOP?\u201d I find myself wanting to give an awkwardly long answer, which consists \u201cThese are the 12 things that are supposed to be the benefits of OOP, but really OOP has no unique strengths.\u201d And so I am writing this essay, and in the future, when I\u2019m asked questions like this at a job interview, I\u2019ll simply directly people to what I have written here.\n Does any of this really matter? You could argue that I\u2019m wasting my time, that I am writing a very long essay that merely engages in a bunch of semantic hair-splitting that benefits no one. But I would suggest that muddled definitions lead to muddled thinking,  in the manner that Orwell described:\n A man may take to drink because he feels himself to be a failure, and then fail all the more completely because he drinks. It is rather the same thing that is happening to the English language. It becomes ugly and inaccurate because our thoughts are foolish, but the slovenliness of our language makes it easier for us to have foolish thoughts. The point is that the process is reversible. Modern English, especially written English, is full of bad habits which spread by imitation and which can be avoided if one is willing to take the necessary trouble.\n On that basis, I would like to think that I do some good, to the extent that I\u2019m able to take on the broad range of ideas associated with OOP.\n This essay is long, and it would be even longer if I carefully qualified every sentence about OOP. Please note that, below, when I refer to a multi-paradigm language, such as Scala, as an OOP language, I am specifically referring to the OOP qualities in that language. And I would like you to ask yourself, if you use a multi-paradigm language to write in the \u201cfunctional\u201d paradigm, are you actually gaining anything from the OOP qualities of that language? Could you perhaps achieve the same thing, more easily, using a language that is fundamentally \u201cfunctional\u201d, rather than object oriented?\n On tech blogs and forums, there are a great many people who defend OOP, and who feel certain that they know what they are defending, despite the lack of any standard definition.  Consider this remark by \u201cmillstone\u201d on Hacker News:\n This article, like many that cheer functional programming, falls into a certain cognitive bias, that prevents it from seeing what OO is good at.\n What is OO good at? Apparently millstone thinks that OO is good at being dynamic. millstone then criticizes the fact that Haskel has static type checking, ignoring the fact that Java, C++, C# and many other OO languages all have static type checking:\n Alan Kay wrote \u201cThe key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be.\u201d\n To start to see what this means, consider the annoying String / Data.Text split in Haskell. String is very much in the \u201cleave data alone\u201d mindset, baring its guts as a [Char]. Now you\u2019re stuck: you can\u2019t change its representation, you can\u2019t easily introduce Unicode, etc. This proved to be so rigid that an entirely new string type had to be introduced, and we\u2019re still dealing with the fallout.\n Great and growable systems! The large scale structure of our software, decomposed into modules, not just at a moment frozen in time, but in the future as well. We are tasked with thinking about relationships and communication.\n millstone then quotes the original article, and then makes clear they are really talking about \u201d truly dynamic languages\u201d and not OOP:\n To come up with a better solution [for dispatching], Haskell and Clojure take very different approaches, but both excel what any OO programmer is commonly used to.\n \u201cAny OO programmer?\u201d No way! OO as realized in truly dynamic languages exposes not just a fixed dispatch mechanism, but the machinery of dispatch itself, i.e. a metaobject protocol\n There are plenty of OOP languages that have static data-type checking, and there are non-OOP languages that are dynamic, so millstone is not really talking about OOP at all, and yet millstone is certain that they know what OOP is. This is a problem that I run into fairly often: a fierce advocate of OOP who is using some idiosyncratic definition of OOP, which takes me completely off-guard.\n   Please note the irony here: millstone is quoting a passage that is critical of Java, and yet millstone is claiming this passage, about \u201clate binding\u201d, shows what OO is good at. By this definition, Java is not an OOP language, which would surely be a surprise to Java programmers.\n Again, there are OOP languages that have don\u2019t have late binding, and there are non-OOP languages that do have late binding. But for millstone, No True OOP Programmer would ever use a language with static data-type checking. To the extent that millstone is inventing a wholly idiosyncratic definition of OOP, their comments about OOP are wholly irrelevant to anyone else who wants to talk about OOP. And yet, in some sense, millstone is very common: I commonly run into software developers who have wholly idiosyncratic definitions of OOP. This can make it difficult to have a meaningful conversation.\n How should we talk about a concept as amorphous as OOP? There is no standard definition, so the best we can do is survey a few different sources and gather up the main ideas. How should we conduct this survey? Two ways: first, a trip through history, listening to Alan Kay describe the roots of OOP, and then a look at what some current introductory materials are teaching beginners about the core ideas of OOP.\n  One would compute with a [laptop] \u201cDynabook\u201d in a way that would not be possible on a shared mainframe; millions of potential users meant that the user interface would have to become a learning environment along the lines of Montessori and Bruner; and needs for large scope, reduction in complexity, and end-user literacy would require that data and control structures be done away with in favor of a more biological scheme of protected universal cells interacting only through messages that could mimic any desired behavior.\n \u2026Somewhere in all of this, I realized that the bridge to an object-based system could be in terms of each object as a syntax directed interpreter of messages sent to it. In one fell swoop this would unify object-oriented semantics with the ideal of a completely extensible language. The mental image was one of separate computers sending requests to other computers that had to be accepted and understood by the receivers before anything could happen. In today\u2019s terms every object would be a server offering services whose deployment and discretion depended entirely on the server\u2019s notion of relationship with the servee.\n That is a beautiful vision, but is that the same thing as what we now call \u201cobject oriented programming\u201d? In the above quote,  Alan Kay seems to be describing something close to what we would now call the Actor Model.\n An actor is a process that executes a function. \u2026 Actors never share state and thus never need to compete for locks for access to shared data. Instead, actors share data by sending messages that are immutable. Immutable data cannot be modified, so reads do not require a lock. Messages are sent asynchronously and are buffered in an actor\u2019s mailbox. A mailbox is essentially a queue with multiple producers (other actors) and a single consumer. A particular actor is driven by receiving messages from the mailbox based on pattern matching.\n Alan Kay\u2019s beautiful description of OOP bears no relation to anything that I have ever seen in the real world. Whenever I point out that what we ended up with is very far from what we were promised, I am often greeted with a No True Scotsman defense: if only I did things better, or used a purer language, then I would experience Enlightenment, and suddenly I would gain all the benefits of True Object Oriented Programming. And yet, even Alan Kay seems aware of the fact that what we ended up with is far from what he started with. He is, of course, aware that his own language, SmallTalk, never became popular.  But what does he think of the languages which popularized object oriented programming?\n Sun Microsystems had the right people to make Java into a first-class language, and I believe it was the Sun marketing people who rushed the thing out before it should have gotten out.\n \u2026If the pros at Sun had had a chance to fix Java, the world would be a much more pleasant place. This is not secret knowledge. It\u2019s just secret to this pop culture.\n Alan Kay himself has never been a blind, ideological defender of OOP.  He borrowed many ideas from Lisp, and he is open about his admiration of Lisp:\n Kay characterizes SIMULA as a great transitional set of ideas. With SIMULA, Algol blocks could be used as independent things that could carry data and behavior. In 1966, Kay had just learned Sketchpad when he read an early paper on SIMULA by Nygaard and Dahl. Kay put a biological twist on what he would later call object-oriented programming. \u201cEverything is a cell,\u201d he explains. \u201cThe main thing I added is that everything could be an object. There is an interface algebra that today might be called polymorphism. There was a collision of these ideas and LISP.\u201d Kay admires the great set of ideas present in LISP and refers to it as the \u201cgreatest single programming language ever designed.\u201d\n My own experience with OOP involves long meetings debating worthless trivia such as how to deal with fat model classes in Ruby On Rails, refactoring the code into smaller pieces, each piece a bit of utility code, though we were not allowed to call it utility code, because utility code is regarded as a bad thing under OOP. I have seen hyper-intelligent people waste countless hours discussing how to wire together a system of Dependency Injection that will allow us to instantiate our objects correctly. This, to me, is the great sadness of OOP: so many brilliant minds have been wasted on a useless dogma that inflicts much pain, for no benefit. And worst of all, because OOP has failed to deliver the silver bullet that ends our software woes, every year or two we are greeted with a new orthodoxy, each one promising to finally make OOP work the way it was originally promised.\n  SG: Well, just like it says in the name, SOAP is used for accessing remote objects.\n  SG: Exactly like CORBA, only simpler. Instead of some complex transport protocol that no one will let traverse a firewall, we use HTTP. And instead of some binary message format we use XML.\n  SG: Sure thing. First there\u2019s the SOAP envelope. It\u2019s pretty simple. It\u2019s just an XML document consisting of a header and a body. And in the body you make your RPC call.\n  SG: Absolutely. As I was saying, you make your RPC call by putting the method name and its arguments in the body. The method name is the outermost element and each sub-element is a parameter. And all the parameters can be typed as specified right here in Section 5 of the specification.\n    SG: Endpoint, the address of the service. You POST your SOAP envelope to the endpoint\u2019s URL.\n   Dev: Hrrm. And what happens if I move the service to a different endpoint? Do I get a 301 back?\n  Dev: So, when you said SOAP uses HTTP, what you meant to say is SOAP tunnels over HTTP.\n SG: Well, \u2018tunnel\u2019 is such an ugly word. We prefer to say SOAP is transport agnostic.\n Dev: But HTTP isn\u2019t a transport, it\u2019s an application protocol. Anyway, what other \u201ctransports\u201d does SOAP support?\n SG: Well, officially none. But you can potentially support any of \u2018em. And there\u2019s lots of platforms that support JMS, and FTP, and SMTP.\n     Dev: And these \u2018actor\u2019 and \u2018mustUnderstand\u2019 attributes, does anyone use those?\n    Dev: Well, I could mostly make things work, but only if I stick with one SOAP stack. Also, I can\u2019t say I like the idea of remote procedure calls and serializing objects.\n SG: Remote procedure calls! Serialized objects! Where did you get the impression that SOAP was about RPCs? SOAP is all about document-based message passing, my friend.\n  SG: Forget what I said. From here on in we pass around coarse-grained messages \u2014 you like that term, \u2018coarse-grained?\u2019 Messages that conform to an XML Schema. We call the new style Document/Literal and the old style RPC/Encoded.\n   Dev: (Reads XML Schema spec). Saints preserve us! Alexander the Great couldn\u2019t unravel that.\n SG: Don\u2019t worry about it. Your tools will create the schema for you. Really, its all about the tooling.\n  SG: Well, they will reflect on your code (if possible) and autogenerate a compliant schema.\n Dev: Reflect on my code? I thought it was all about documents, not serialized objects.\n SG: Didn\u2019t you hear me? It\u2019s all about the tools. Anyway, we can\u2019t expect you to write XML Schema and WSDL by hand. Besides, its just plumbing. You don\u2019t need to see it.\n  SG: Oh, haven\u2019t I mentioned WSDL? W-S-D-L. Web Services Description Language. It\u2019s how you specify the data types, parameter lists, operation names, transport bindings, and the endpoint URI, so that client developers can access your service. Check it out.\n Dev: (Reads WSDL spec). I trust that the guys who wrote this have been shot. It\u2019s not even internally consistent.\n The culture that grew up around industry standards such as WSDL lead James Lewis and Martin Fowler to complain about \u201c a complexity that is, frankly, breathtaking\u201c:\n Certainly, many of the techniques in use in the microservice community have grown from the experiences of developers integrating services in large organisations. The Tolerant Reader pattern is an example of this. Efforts to use the web have contributed, using simple protocols is another approach derived from these experiences \u2014 a reaction away from central standards that have reached a complexity that is, frankly, breathtaking. (Any time you need an ontology to manage your ontologies you know you are in deep trouble.)\n   But of course, although umpteen millions were invested in these systems, thousands of conferences and MeetUps were held, dozens of books published, and numerous tech companies got rich as Croesus, when I bring up these expensive disasters, I am told that No True OOP Programmer does any of that nonsense any more. But of course, they do: maintaining these fragile, verbose legacy systems makes up a huge percentage of the work that OOP programmers do.\n  Smalltalk is not only its syntax or the class library, it is not even about classes. I\u2019m sorry that I long ago coined the term \u201cobjects\u201d for this topic because it gets many people to focus on the lesser idea. The big idea is \u201cmessaging\u201d \u2026 The key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be. Think of the internet \u2013 to live, it (a) has to allow many different kinds of ideas and realizations that are beyond any single standard and (b) to allow varying degrees of safe interoperability between these ideas. If you focus on just messaging \u2013 and realize that a good metasystem can late bind the various 2nd level architectures used in objects \u2013 then much of the language-, UI-, and OS based discussions on this thread are really quite moot.\n Does anyone really think that OOP is the best way to give us \u201cmessaging\u201d? We have, at this time, numerous technologies that help with messaging. An advocate of the functional paradigm might say something like \u201cPure functions combined with the Actor Model go much further toward giving us what Alan Kay seems to think best\u201d but I\u2019ll point out, you could restrict yourself to using PHP, and only use those features that were available in PHP4, back in 2004, and then add in one modern ingredient, f\n......", "posttime": "2020-06-15 05:26:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,programming,\u9ad8\u6602,oriented,oop", "title": "\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u662f\u4e00\u573a\u4ee3\u4ef7\u9ad8\u6602\u7684\u707e\u96be\uff0c\u5fc5\u987b\u7ed3\u675f", "title_en": "Object Oriented Programming is an expensive disaster which must end", "transed": 1, "url": "http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end", "via": "", "real_tags": ["\u7f16\u7a0b", "\u9ad8\u6602", "oriented", "oop"]}, {"category": "", "categoryclass": "", "imagename": "0d033261ae0fad4093625973c4c3de99.png", "infoid": 1006570, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4fdd\u62a4\u82af\u7247\u514d\u53d7\u7f51\u7edc\u653b\u51fb\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u6210\u672c\u8d8a\u6765\u8d8a\u9ad8\uff0c\u8d44\u6e90\u4e5f\u8d8a\u6765\u8d8a\u5bc6\u96c6\uff0c\u4f46\u968f\u7740\u5176\u4e2d\u4e00\u4e9b\u82af\u7247\u6700\u7ec8\u8fdb\u5165\u4efb\u52a1\u5173\u952e\u578b\u670d\u52a1\u5668\u548c\u6c7d\u8f66\u7b49\u5b89\u5168\u5173\u952e\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u82af\u7247\u4e5f\u53d8\u5f97\u8d8a\u6765\u8d8a\u6709\u5fc5\u8981\u3002\n\u5c3d\u7ba1\u5b89\u5168\u6280\u672f\u7684\u8fdb\u5c55\u53c2\u5dee\u4e0d\u9f50\uff0c\u5e94\u7528\u4e5f\u4e0d\u4e00\u81f4\uff0c\u4f46\u81f3\u5c11\u5728\u8fc7\u53bb\u51e0\u5e74\u91cc\uff0c\u5b89\u5168\u4e00\u76f4\u5728\u534a\u5bfc\u4f53\u884c\u4e1a\u7684\u96f7\u8fbe\u4e0a\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5b89\u5168\u80cc\u540e\u7684\u7ecf\u6d4e\u53d8\u5316\uff0c\u8fd9\u79cd\u60c5\u51b5\u6b63\u5728\u5f00\u59cb\u597d\u8f6c\u3002\u867d\u7136\u5b89\u5168\u4e00\u76f4\u662f\u4e00\u4e2a\u98ce\u9669\u4e0e\u6536\u76ca\u7684\u7b49\u5f0f\uff0c\u4f46\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u5b83\u8ddd\u79bb\u534a\u5bfc\u4f53\u5e02\u573a\u53ea\u6709\u4e00\u6b65\u4e4b\u9065\u3002\u73b0\u5728\u4e0d\u518d\u662f\u8fd9\u6837\u4e86\u3002\u968f\u7740\u7cfb\u7edf\u4f9b\u5e94\u5546\u548cOEM\u8d8a\u6765\u8d8a\u591a\u5730\u8bbe\u8ba1\u81ea\u5df1\u7684\u82af\u7247\uff0c\u800c\u4e0d\u662f\u8d2d\u4e70\u7531\u7b2c\u4e09\u65b9\u5f00\u53d1\u5546\u521b\u5efa\u7684\u5546\u4e1a\u5f00\u53d1\u7684\u8bbe\u5907\u548cIP\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u521b\u5efa\u81ea\u5df1\u7684\u751f\u6001\u7cfb\u7edf\u548c\u9700\u6c42\uff0c\u5b89\u5168\u662f\u4ed6\u4eec\u7684\u5173\u952e\u95ee\u9898\u3002\n\u5b8f\u89c2\u7ecf\u6d4e\u5b66\u3002\u6570\u636e\u7684\u4ef7\u503c\u6b63\u5728\u4e0a\u5347\uff0c\u4ece\u7f51\u7edc\u548c\u8f6f\u4ef6\u4e00\u76f4\u5230\u82af\u7247\u548c\u4e92\u8fde\u7ea7\u522b\uff0c\u8fd9\u4e9b\u6570\u636e\u90fd\u6709\u591a\u4e2a\u5165\u53e3\u70b9\u3002\u7cfb\u7edf\u4f9b\u5e94\u5546\u9762\u4e34\u7740\u9632\u6b62\u5b89\u5168\u6f0f\u6d1e\u7684\u538b\u529b\uff0c\u4ed6\u4eec\u6b63\u5728\u5bf9\u5404\u81ea\u7684\u4f9b\u5e94\u94fe\u65bd\u52a0\u538b\u529b\u3002\n\u5fae\u89c2\u7ecf\u6d4e\u5b66\u3002\u968f\u7740\u65b0\u5e02\u573a\u7684\u51fa\u73b0\uff0c\u7279\u522b\u662fEDGE\u548cAI\uff0c\u82af\u7247\u5236\u9020\u5546\u6b63\u4e89\u5148\u6050\u540e\u5730\u5236\u9020\u5b89\u5168\u6027\u66f4\u5f3a\u7684\u534a\u5b9a\u5236\u82af\u7247\u3002\u4ed6\u4eec\u91c7\u53d6\u4e86\u4e24\u6761\u4e3b\u8981\u9014\u5f84\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4e00\u79cd\u662f\u201c\u8d85\u7ea7\u82af\u7247\u201d\u65b9\u6cd5\uff0c\u53e6\u4e00\u79cd\u662f\u57fa\u4e8e\u74f7\u7816/\u82af\u7247\u7684\u65b9\u6cd5\u3002\u5b89\u5168\u6b63\u88ab\u67b6\u6784\u5230\u8fd9\u4e24\u4e2a\u65b9\u9762\u3002\n\u7eb3\u7c73\u7ecf\u6d4e\u5b66\u3002\u7ecf\u8fc7\u534a\u4e2a\u4e16\u7eaa\u7684\u529f\u80fd\u6269\u5c55\uff0c\u82af\u7247\u5df2\u7ecf\u51cf\u5c11\u5230\u4e86\u6ca1\u6709\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u4fdd\u62a4\u82af\u7247\u4e0a\u7684\u6570\u636e\u7684\u5730\u6b65\u3002\u66f4\u8584\u7684\u7edd\u7f18\u3001\u66f4\u597d\u7684\u626b\u63cf\u5de5\u5177\u548c\u66f4\u591a\u8fdb\u51fa\u82af\u7247\u7684\u65b9\u5f0f\u9700\u8981\u66f4\u590d\u6742\u7684\u5b89\u5168\u65b9\u6848\uff0c\u8fd9\u4e9b\u65b9\u6848\u9700\u8981\u5728\u67b6\u6784\u4e2d\u5b9e\u73b0\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u5f71\u54cd\u529f\u8017\u3001\u6027\u80fd\u548c\u9762\u79ef\u3002\n\u5b8f\u89c2\u7ecf\u6d4e\u8fd9\u4e09\u4e2a\u9a71\u52a8\u56e0\u7d20\u4e2d\u6700\u660e\u663e\u7684\u662f\u5b8f\u89c2\u7ecf\u6d4e\u3002\u5728\u6295\u673a\u6027\u6267\u884c\u548c\u5206\u652f\u9884\u6d4b(Meltdown\u3001Spectre\u3001Prehadow)\u4e2d\u53d1\u73b0\u5907\u53d7\u77a9\u76ee\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u6700\u7ec8\u9700\u8981\u5bf9\u6570\u636e\u4e2d\u5fc3\u8fdb\u884c\u6602\u8d35\u7684\u4fee\u590d\u3002\u6240\u6709\u4e3b\u8981\u7684\u5904\u7406\u5668\u4f9b\u5e94\u5546\u90fd\u5fc5\u987b\u7528\u8f6f\u4ef6\u4fee\u8865\u6f0f\u6d1e\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u6d88\u9664\u4e86\u4e24\u79cd\u63d0\u9ad8\u6027\u80fd\u7684\u6709\u6548\u6280\u672f\u3002\u56e0\u6b64\uff0c\u5347\u7ea7\u670d\u52a1\u5668\u4ee5\u5229\u7528\u6700\u65b0\u5904\u7406\u5668\u7684\u5ba2\u6237\u5931\u53bb\u4e86\u5927\u90e8\u5206\u6027\u80fd\u6539\u8fdb\u3002\u53cd\u8fc7\u6765\uff0c\u8fd9\u53c8\u8feb\u4f7f\u4ed6\u4eec\u589e\u52a0\u66f4\u591a\u7684\u670d\u52a1\u5668\uff0c\u4ee5\u4fbf\u5728\u76f8\u540c\u7684\u65f6\u95f4\u5185\u5904\u7406\u76f8\u540c\u7684\u6570\u636e\u91cf\u3002\n\u8fd9\u662f\u7cfb\u7edf\u4f9b\u5e94\u5546\u9009\u62e9\u5f00\u53d1\u4ed6\u4eec\u81ea\u5df1\u7684\u5b9a\u5236\u82af\u7247\u67b6\u6784\u7684\u90e8\u5206\u539f\u56e0\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u6027\u80fd\u548c\u529f\u8017\u65b9\u9762\u63d0\u4f9b\u66f4\u5927\u7684\u6536\u76ca\u3002\u81ea\u90a3\u4ee5\u540e\uff0c\u8bb8\u591a\u516c\u53f8\u5229\u7528ARM\u5185\u6838\u548c\u81ea\u5b9a\u4e49\u52a0\u901f\u5668(RISC-V\u3001eFPGA)\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u4f9d\u8d56\u82f1\u7279\u5c14\u3001AMD\u3001IBM\u6216NVIDIA\u5904\u7406\u5668\u3002\u8fd9\u4e00\u4e3e\u63aa\u8fd8\u5c06\u82af\u7247\u5b89\u5168\u5b8c\u5168\u7f6e\u4e8e\u4ed6\u4eec\u81ea\u5df1\u7684\u63a7\u5236\u4e4b\u4e0b\uff0c\u5e76\u63d0\u4f9b\u4e86\u8bbe\u8ba1\u81ea\u7531\u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u4e0d\u9700\u8981\u5411\u540e\u517c\u5bb9\u7279\u5b9a\u7684ISA\u3002\n\u6240\u6709\u8fd9\u4e9b\u53d8\u5316\u5c06\u4ea7\u751f\u591a\u5927\u5f71\u54cd\u8fd8\u6709\u5f85\u89c2\u5bdf\u3002\u7136\u800c\uff0c\u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u786c\u4ef6\u653b\u51fb\u7684\u7ecf\u6d4e\u6027\u6b63\u5728\u53d1\u751f\u53d8\u5316\u3002\u4fb5\u5165\u82af\u7247\u548c\u82af\u7247\u7cfb\u7edf\u6240\u9700\u7684\u5de5\u5177\u4e0d\u518d\u662f\u666e\u901a\u7f6a\u72af\u65e0\u6cd5\u4f01\u53ca\u7684\u3002\u6b64\u5916\uff0c\u5728\u8fc7\u53bb\uff0c\u5927\u591a\u6570\u9488\u5bf9\u786c\u4ef6\u7684\u653b\u51fb\u6ca1\u6709\u8f6f\u4ef6\u5165\u4fb5\u90a3\u4e48\u660e\u663e\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e3b\u8981\u6d89\u53ca\u4f01\u4e1a\u548c\u653f\u5e9c\u5b9e\u4f53\uff0c\u800c\u8fd9\u4e24\u4e2a\u5b9e\u4f53\u90fd\u4e0d\u559c\u6b22\u63d0\u9192\u4eba\u4eec\u6ce8\u610f\u5b89\u5168\u6f0f\u6d1e\u3002\u968f\u7740\u8ba1\u7b97\u53d8\u5f97\u66f4\u52a0\u666e\u53ca\u548c\u4e92\u8054\uff0c\u6f5c\u5728\u7684\u653b\u51fb\u9762\u6b63\u5728\u6269\u5927\uff0c\u5305\u62ec\u66f4\u591a\u7684\u8bbe\u5907\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5c06\u589e\u52a0\u786c\u4ef6\u653b\u51fb\u7684\u53ef\u89c1\u6027\u3002\n\u201c\u6709\u56db\u4e2a\u4e3b\u8981\u7684\u653b\u51fb\u9762\uff0c\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e0d\u540c\u7684\u6210\u672c\uff0c\u201dDARPA\u5fae\u7cfb\u7edf\u6280\u672f\u529e\u516c\u5ba4\u7684\u9879\u76ee\u7ecf\u7406Serge Leef\u8bf4\u3002\u201c\u4e00\u4e2a\u662f\u4f9b\u5e94\u94fe\uff0c\u662f\u4ee5PUF(\u7269\u7406\u4e0a\u4e0d\u53ef\u514b\u9686\u7684\u529f\u80fd)\u7684\u5927\u5c0f\u4e3a\u57fa\u7840\u7684\u3002\u8fd9\u91cc\u7684\u6743\u8861\u662f\u5927\u5c0f\uff0c\u800c\u4e0d\u662f\u6027\u80fd\u6216\u529f\u7387\u3002\u7b2c\u4e8c\u79cd\u662f\u65c1\u8def\u653b\u51fb\uff0c\u5728\u8fd9\u79cd\u653b\u51fb\u4e2d\uff0c\u4f60\u62b5\u6d88\u4e86\u6d3b\u52a8\u7684\u95e8\u3002\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u5b89\u5168\u529f\u80fd\u7684\u5927\u5c0f\u7ffb\u4e00\u756a\uff0c\u4e5f\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4ea7\u751f\u968f\u673a\u566a\u97f3\u800c\u8017\u8d39\u7535\u529b\u3002\u7b2c\u4e09\u79cd\u662f\u53cd\u5411\u5de5\u7a0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u903b\u8f91\u9501\u5b9a\u6216\u6a21\u7cca\u5904\u7406\u3002\u56e0\u4e3a\u60a8\u4f7f\u7528\u7684\u662f\u6d3b\u52a8\u7684\u9644\u52a0\u7535\u8def\uff0c\u6240\u4ee5\u5b83\u4f1a\u5bf9\u623f\u5730\u4ea7\u548c\u6027\u80fd\u4ea7\u751f\u5f71\u54cd\u3002\u56db\u662f\u6728\u9a6c\u68c0\u6d4b\u3002\u8fd9\u4e5f\u4f1a\u8017\u8d39\u623f\u5730\u4ea7\u548c\u4e1a\u7ee9\u3002\u201c\u3002\n\u5bf9\u4e8e\u519b\u7528/\u822a\u7a7a\u5e94\u7528\uff0c\u786c\u4ef6\u5b89\u5168\u663e\u7136\u662f\u5fc5\u8981\u7684\u3002\u4f46\u5bf9\u4e8e\u6c7d\u8f66\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u65b0\u7684\u5173\u952e\u95ee\u9898\uff0c\u7531\u4e8e\u8f66\u8f86\u4e2d\u7684\u7535\u5b50\u4f53\u7cfb\u7ed3\u6784\u4e0d\u65ad\u53d1\u5c55\uff0c\u8fd9\u4e2a\u95ee\u9898\u4ecd\u5728\u53d1\u5c55\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u8f85\u52a9\u548c\u6700\u7ec8\u81ea\u52a8\u9a7e\u9a76\u7684\u57fa\u672c\u7b56\u7565\u5df2\u7ecf\u4ece\u5c06\u4e00\u5207\u53d1\u9001\u5230\u4e91\u5e76\u8fd4\u56de\u5230\u8f66\u8f86\uff0c\u5230\u8f66\u8f86\u4e2d\u7684\u96c6\u4e2d\u5904\u7406\uff0c\u7136\u540e\u5230\u5206\u5e03\u5f0f\u5904\u7406\uff0c\u6700\u540e\u662f\u4f20\u611f\u5668\u7ea7\u522b\u7684\u5206\u5e03\u5f0f\u5904\u7406\u4e0e\u7ed3\u6784\u5316\u548c\u6e05\u7406\u6570\u636e\u7684\u96c6\u4e2d\u5904\u7406\u7684\u7ec4\u5408\u3002\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\uff0c\u6c7d\u8f66\u5236\u9020\u5546\u5df2\u7ecf\u610f\u8bc6\u5230\uff0c\u8c01\u62e5\u6709\u7535\u5b50\u57fa\u7840\u8bbe\u65bd\uff0c\u8c01\u5c31\u62e5\u6709\u5e02\u573a\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u88ab\u4f9b\u5e94\u5546\u53d6\u4ee3\u3002\u786e\u4fdd\u6c7d\u8f66\u6570\u636e\u5b89\u5168\u7684\u6218\u7565\u4e5f\u540c\u6837\u6447\u6446\u4e0d\u5b9a\uff0c\u4ee5\u9002\u5e94\u4e0d\u540c\u7684\u67b6\u6784\u3002\u4f46\u7531\u4e8e\u5165\u4fb5\u7684\u8d23\u4efb\u542b\u4e49\u548c\u52d2\u7d22\u8f6f\u4ef6\u7684\u6f5c\u5728\u6210\u672c\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u8ba4\u8bc6\u5230\uff0c\u786c\u4ef6\u548c\u8f6f\u4ef6\u4e00\u6837\u662f\u76ee\u6807\u3002\u8fd9\u91cc\u7684\u65b9\u6cd5\u5f80\u5f80\u5206\u6210\u51e0\u4e2a\u4e0d\u540c\u7684\u9635\u8425\u3002\n\u201c\u653b\u51fb\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u201dTortuga Logic\u7684\u9996\u5e2d\u6267\u884c\u5b98\u6770\u68ee\u00b7\u5965\u4f2f\u683c(Jason Oberg)\u8bf4\u3002\u201c\u4e00\u79cd\u662f\u7269\u7406\u4e0a\u7684\uff0c\u6bd4\u5982\u5411\u82af\u7247\u53d1\u5c04\u6fc0\u5149\uff0c\u4f7f\u7528\u5149\u5b66\u6d4b\u91cf\u548c\u663e\u5fae\u955c\u3002\u8fd9\u8fd8\u5305\u62ec\u7269\u7406\u4fa7\u901a\u9053\u653b\u51fb\uff0c\u5982\u7535\u78c1\u8f90\u5c04\u548c\u70ed\u53d8\u5316\u3002\u8981\u83b7\u5f97\u82af\u7247\u7684\u7269\u7406\u8bbf\u95ee\u6743\u9650\uff0c\u60a8\u9700\u8981\u5b9e\u9645\u62e5\u6709\u8be5\u82af\u7247\u3002\u5728\u6570\u5b57\u9886\u57df\u4e5f\u6709\u4e00\u4e9b\u4e1c\u897f\u53ef\u4ee5\u88ab\u8fdc\u7a0b\u5229\u7528\uff0c\u6bd4\u5982\u4f4e\u7ea7\u5fae\u7801\uff0c\u5b83\u5229\u7528\u4e86\u82af\u7247\u7684\u5b9e\u9645\u95ee\u9898\u3002\u6211\u4eec\u770b\u5230\u8fdc\u7a0b\u653b\u51fb\u6709\u66f4\u591a\u7684\u589e\u957f\uff0c\u7279\u522b\u662f\u5728\u5546\u4e1a\u9886\u57df\u3002\u8fd9\u4e9b\u90fd\u662f\u6700\u53ef\u6015\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u5728\u5de5\u7a0b\u4e2d\u53d1\u73b0\u4e00\u4e2a\u7f3a\u9677\uff0c\u4f60\u4e0d\u9700\u8981\u62c6\u5f00\u4ec0\u4e48\u4e1c\u897f\u6216\u505a\u53cd\u5411\u5de5\u7a0b\u3002\u4f46\u662f\u4f60\u4e5f\u4e0d\u80fd\u7528\u56fa\u4ef6\u6253\u8865\u4e01\u3002\u8fd9\u5c31\u589e\u52a0\u4e86\u4fee\u590d\u7684\u96be\u5ea6\u3002\u201c\u3002\n\u6b64\u5916\uff0c\u65e0\u8bba\u662f\u8c01\u8bbe\u8ba1\u7684\u7cfb\u7edf\uff0c\u51e0\u4e4e\u90fd\u4f7f\u7528\u4e86\u7b2c\u4e09\u65b9IP\u3002\u8fd9\u5728\u6c7d\u8f66\u9886\u57df\u53d8\u5f97\u5c24\u5176\u5177\u6709\u6311\u6218\u6027\uff0c\u56e0\u4e3a\u6c7d\u8f66\u4f9b\u5e94\u94fe\u5e9e\u5927\uff0c\u7cfb\u7edf\u9700\u8981\u5bf9\u5e7f\u6cdb\u7684\u5bf9\u8c61\u548c\u73af\u5883\u6761\u4ef6\u505a\u51fa\u53cd\u5e94\u3002\nClioSoft\u8d1f\u8d23\u5e02\u573a\u8425\u9500\u7684\u526f\u603b\u88c1\u897f\u8499\u00b7\u5170\u65af(Simon Rance)\u8bf4\uff1a\u201c\u6c7d\u8f66\u4e2d\u7684\u8bb8\u591a\u8bbe\u8ba1\u90fd\u662f\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684\uff0c\u5373\u4f7f\u662f\u57fa\u4e8e\u4ece\u4f20\u611f\u5668\u83b7\u5f97\u7684\u6570\u636e\uff0c\u5b83\u4eec\u4e5f\u662f\u53ef\u4ee5\u52a8\u6001\u914d\u7f6e\u7684\u3002\u201d\u201c\u6570\u636e\u6b63\u4ece\u8fd9\u4e9b\u4f20\u611f\u5668\u4f20\u56de\u5904\u7406\u5668\u3002\u4ece\u8f66\u8f86\u5230\u6570\u636e\u4e2d\u5fc3\u518d\u56de\u5230\u8f66\u8f86\u7684\u6d77\u91cf\u6570\u636e\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5fc5\u987b\u8fdb\u884c\u8ffd\u8e2a\u3002\u5982\u679c\u51fa\u4e86\u95ee\u9898\uff0c\u4ed6\u4eec\u5fc5\u987b\u8fdb\u884c\u8ffd\u8e2a\uff0c\u627e\u51fa\u6839\u672c\u539f\u56e0\u662f\u4ec0\u4e48\u3002\u8fd9\u5c31\u662f\u9700\u8981\u586b\u8865\u7684\u5730\u65b9\u3002\u201c\u3002\n\u8ddf\u8e2a\u548c\u5b89\u5168\u901a\u5e38\u5728\u8fc7\u53bb\u662f\u5206\u5f00\u7684\uff0c\u4f46\u8fd9\u79cd\u60c5\u51b5\u6b63\u5728\u5f00\u59cb\u6539\u53d8\uff0c\u7279\u522b\u662f\u968f\u7740ISO26262\u5bf9\u53ef\u8ddf\u8e2a\u6027\u7684\u8981\u6c42\u3002\u5170\u65af\u8bf4\uff1a\u201c\u6211\u4eec\u80af\u5b9a\u5728\u8fd9\u4e2a\u9886\u57df\u770b\u5230\u4e86\u66f4\u591a\u7684\u7275\u5f15\u529b\u3002\u201d\u201c\u534a\u5bfc\u4f53IP\u63d0\u4f9b\u5546\u5df2\u7ecf\u62e5\u6709\u8fd9\u9879\u670d\u52a110\u5e74\u4e86\uff0c\u4f46\u968f\u7740IP\u7684\u591a\u79cd\u4f7f\u7528\uff0c\u7279\u522b\u662f\u5728\u7b7e\u8ba2\u6cd5\u5f8b\u534f\u8bae\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u80af\u5b9a\u4f1a\u4e0d\u65ad\u589e\u957f\u3002\u201d\n\u5fae\u89c2\u7ecf\u6d4e\u5b66\u9700\u8981\u591a\u5c11\u8fd9\u4e9b\u4e0d\u540c\u7684\u5b89\u5168\u65b9\u6cd5\uff0c\u53d6\u51b3\u4e8e\u7ec6\u5206\u5e02\u573a\u548c\u7279\u5b9a\u5e94\u7528\u7684\u9700\u8981\u3002\u6bcf\u4e2a\u5b89\u5168\u89e3\u51b3\u65b9\u6848\u90fd\u6709\u6210\u672c\uff0c\u56e0\u6b64\u5f52\u6839\u7ed3\u5e95\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u4ef7\u503c\u548c\u6bcf\u53f0\u8bbe\u5907\u7684\u4ef7\u683c\u5f39\u6027\u3002\nRambus\u9632\u4f2a\u4ea7\u54c1\u6280\u672f\u603b\u76d1\u65af\u79d1\u7279\u00b7\u8d1d\u65af\u7279(Scott Best)\u8868\u793a\uff1a\u201c\u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u4ed6\u4eec\u662f\u5728\u8ffd\u6c42\u6570\u636e\uff0c\u8fd8\u662f\u5728\u8bd5\u56fe\u7834\u574f\u6574\u4e2a\u7cfb\u7edf\u3002\u201d\u201c\u8fd9\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u653b\u51fb\u9762\u3002\u5bf9\u624b\u4f1a\u7528\u4e0d\u540c\u7684\u5de5\u5177\u548c\u7b56\u7565\u53bb\u5bf9\u4ed8\u90a3\u4e9b\u4eba\uff0c\u800c\u9884\u9632\u548c/\u6216\u62d6\u5ef6\u7684\u5bf9\u7b56\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u6700\u7ec8\u5bf9\u624b\u4f1a\u8d62\uff0c\u6240\u4ee5\u4f60\u8bd5\u7740\u62d6\u5ef6\uff0c\u76f4\u5230\u4ed6\u4eec\u7d2f\u4e86\uff0c\u7136\u540e\u8f6c\u79fb\u5230\u4f60\u7684\u7ade\u4e89\u5bf9\u624b\u7684\u7cfb\u7edf\u4e0a\uff0c\u800c\u7ade\u4e89\u5bf9\u624b\u7684\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u5f3a\u5927\u7684\u5b89\u5168\u6027\u3002\u6211\u4eec\u5728\u6253\u5047\u9886\u57df\u770b\u5230\u4e86\u5f88\u591a\u3002\u901a\u5e38\u4f60\u53ea\u662f\u60f3\u62d6\u5ef6\u65f6\u95f4\u3002\u201c\n\u6210\u529f\u7684\u5ef6\u8fdf\u57fa\u4e8e\u590d\u6742\u7684\u5b89\u5168\u5806\u6808\u548c\u6700\u4f73\u5b9e\u8df5\u3002\u53ea\u8981\u6709\u8db3\u591f\u7684\u51b3\u5fc3\uff0c\u4efb\u4f55\u5b89\u5168\u90fd\u53ef\u4ee5\u88ab\u6253\u7834\u3002\u4f46\u8fd9\u4e5f\u9700\u8981\u653e\u5728\u5411\u8fb9\u7f18\u8ba1\u7b97\u6f14\u8fdb\u7684\u80cc\u666f\u4e0b\u6765\u770b\u5f85\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u53ef\u4ee5\u53d1\u9001\u5230\u4e91\u4e2d\u8fdb\u884c\u5904\u7406\u7684\u7269\u8054\u7f51\u6982\u5ff5\u5728\u5f88\u591a\u65b9\u9762\u90fd\u662f\u884c\u4e0d\u901a\u7684\uff0c\u5305\u62ec\u7535\u529b\u3001\u5ef6\u8fdf\u548c\u6700\u7ec8\u6210\u672c\u3002\u8fd9\u4e00\u6210\u672c\u5305\u62ec\u6765\u56de\u53d1\u9001\u6570\u636e\u6240\u9700\u7684\u7535\u529b\u548c\u5e26\u5bbd\u3001\u5b58\u50a8\u6570\u636e\u6240\u9700\u7684\u5185\u5b58\u91cf\u4ee5\u53ca\u5904\u7406\u5927\u91cf\u6570\u636e\u6240\u9700\u7684\u8d44\u6e90\u3002\n\u5f53\u524d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5728\u66f4\u9760\u8fd1\u6570\u636e\u6e90\u7684\u5730\u65b9\u8fdb\u884c\u66f4\u591a\u7684\u5904\u7406\uff0c\u5728\u90a3\u91cc\u53ef\u4ee5\u5904\u7406\u548c\u6e05\u7406\u6570\u636e\u3002\u8fd9\u9700\u8981\u4e00\u5b9a\u7a0b\u5ea6\u7684\u667a\u80fd\u6765\u786e\u5b9a\u54ea\u4e9b\u662f\u6709\u7528\u7684\u6570\u636e\uff0c\u54ea\u4e9b\u662f\u5783\u573e\u6570\u636e\uff0c\u5e76\u4e14\u9700\u8981\u5c06\u5b89\u5168\u6027\u672c\u5730\u5316\u5e76\u5f88\u597d\u5730\u96c6\u6210\u5230\u8fb9\u7f18\u8bbe\u5907/\u7cfb\u7edf\u67b6\u6784\u4e2d\u3002\n\u6311\u6218\u5728\u4e8e\uff0c\u8fb9\u7f18\u7684\u5927\u90e8\u5206\u5f00\u53d1\u8303\u56f4\u4ece\u9ad8\u5ea6\u5b9a\u5236\u5230\u534a\u5b9a\u5236\u3002\u7ba1\u7406\u8fd9\u4e9b\u6210\u672c\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u8981\u4e48\u5efa\u7acb\u4e00\u4e2a\u5e73\u53f0\uff0c\u5229\u7528\u7c7b\u4f3c\u4e50\u9ad8\u7684\u82af\u7247/\u74f7\u7816\u65b9\u6cd5\uff0c\u8981\u4e48\u91c7\u7528\u8d85\u7ea7\u82af\u7247\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u65b9\u6cd5\uff0c\u73b0\u5728\u90fd\u9700\u8981\u5c06\u5b89\u5168\u57fa\u7840\u8bbe\u65bd\u6269\u5c55\u5230\u6574\u4e2a\u4f9b\u5e94\u94fe\u3002\nDARPA\u7684Leef\u8bf4\uff1a\u201c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u57fa\u4e8e\u78c1\u7816\u7684\u5f02\u6784\u7b56\u7565\u7684\u52aa\u529b\uff0c\u6211\u4eec\u4e5f\u770b\u5230\u4e86\u5177\u6709\u5927\u91cfIP\u5757\u7684\u5de8\u5927\u7684SoC\u5df2\u7ecf\u88ab\u505c\u7528\u3002\u201d\u201c\u56e0\u6b64\uff0c\u60a8\u53ef\u80fd\u6709\u5305\u542b1\u52301,000\u4e2a\u4e0d\u540c\u5757\u7684\u90e8\u4ef6\uff0c\u5176\u4e2d70%\u5904\u4e8e\u5173\u95ed\u72b6\u6001\u3002\u8fd9\u90fd\u662f\u901a\u8fc7\u8f6f\u4ef6\u5b8c\u6210\u7684\uff0c\u6216\u8005\u5728\u60a8\u505c\u7528\u591a\u4e2a\u5757\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u3002\u867d\u7136\u5b83\u5f88\u5927\uff0c\u4f46\u6027\u4ef7\u6bd4\u66f4\u9ad8\u3002\u4f60\u770b\u5230\u7684\u662f\u7ecf\u6d4e\u66f2\u7ebf\u5df2\u7ecf\u6539\u53d8\u3002\u63d0\u5347\u5236\u9020\u4e1a\u7684\u6210\u672c\u66f4\u9ad8\u3002\u201c\u3002\n\u7136\u800c\uff0c\u8fd9\u4e9b\u6a21\u5757\u6216\u5c0f\u82af\u7247\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u9700\u8981\u5b89\u5168\uff0c\u8f6f\u4ef6\u3001\u56fa\u4ef6\u548c\u5141\u8bb8\u4e0d\u540c\u6a21\u5757\u5f7c\u6b64\u901a\u4fe1\u548c\u4e0e\u5916\u90e8\u4e16\u754c\u901a\u4fe1\u7684\u4e92\u8fde\u4e5f\u662f\u5982\u6b64\u3002\u5bf9\u4e8e\u7531\u5355\u4e2a\u4f9b\u5e94\u5546\u5f00\u53d1\u7684\u5e73\u53f0\u4e5f\u662f\u5982\u6b64\uff0c\u5176\u4e2d\u9488\u5bf9\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\u5206\u5c42\u4e86\u4e0d\u540c\u7684\u90e8\u5206\u3002\nMaxim Integrated\u7684Micros\u3001Software&amp\uff1bSecurity\u4e1a\u52a1\u90e8\u6267\u884c\u8463\u4e8b\u514b\u91cc\u65af\u00b7\u963f\u8fea\u65af(Kris Ardis)\u8868\u793a\uff1a\u201c\u6211\u4eec\u5185\u7f6e\u5b89\u5168\u7684\u76ee\u7684\u6709\u5f88\u591a\u3002\u201d\u201c\u5176\u4e00\u5c31\u662f\u5e94\u7528\u7a0b\u5e8f\u7ea7\u7684\u5b89\u5168\u6027\u3002\u4f46\u662f\u6211\u4eec\u4e5f\u8ba4\u4e3a\u6743\u91cd\u548c\u7f51\u7edc\u914d\u7f6e\u662fIP\u3002\u6211\u4eec\u5bf9\u5f85FPGA\u7a0b\u5e8f\u6587\u4ef6\u5c31\u50cf\u5bf9\u5f85\u60a8\u7684\u8f6f\u4ef6\u4e00\u6837\uff0cC\u4ee3\u7801\u5c31\u662f\u60a8\u7684IP\u3002\u6211\u4eec\u5728\u5176\u4e2d\u653e\u7f6e\u5b89\u5168\u52a0\u5bc6\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5b89\u5168\u5730\u52a0\u8f7d\u6587\u4ef6\u3002\u5982\u679c\u60a8\u662f\u4e00\u5bb6\u5408\u540c\u5236\u9020\u5546\uff0c\u5e76\u4e14\u60a8\u4ee5\u539f\u59cb\u6587\u672c\u53d1\u9001\u7f51\u7edc\u6587\u4ef6\uff0c\u5219\u6709\u4eba\u53ef\u4ee5\u83b7\u53d6\u8be5\u6587\u4ef6\u5e76\u5c06\u5176\u7f16\u7a0b\u5230\u60a8\u7684\u82af\u7247\u7684\u4e0d\u540c\u7248\u672c\u4e0a\u3002\u4f46\u5982\u679c\u5b83\u662f\u52a0\u5bc6\u7684\uff0c\u800c\u4e14\u6709\u5b89\u5168\u5f15\u5bfc\uff0c\u90a3\u4e48\u4f60\u7684\u4f53\u91cd\u6587\u4ef6\u5c31\u50cf\u4e00\u4e2a\u5b89\u5168\u5f15\u5bfc\u4e00\u6837\uff0c\u4f1a\u5728\u6b63\u5e38\u8f6f\u4ef6\u4e0b\u53d7\u5230\u4fdd\u62a4\u3002\u8fd9\u4efd\u8def\u7ebf\u56fe\u6709\u5f88\u591a\u90e8\u5206\u3002\u5b83\u4e13\u4e3a\u4e0d\u540c\u7684\u7f51\u7edc\u3001\u5916\u56f4\u8bbe\u5907\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u3002\u4f46\u6211\u4eec\u80af\u5b9a\u4f1a\u770b\u5230\u5176\u4ed6\u79cd\u7c7b\u7684\u5b89\u5168\u548c\u5065\u58ee\u529f\u80fd\u6b63\u5728\u5b9e\u65bd\uff0c\u7279\u522b\u662f\u5728\u4e00\u4e9b\u9ad8\u7aef\u5de5\u4e1a\u548c\u533b\u7597\u5e94\u7528\u4e2d\u3002\u201c\u3002\n\u8fd9\u4e5f\u6709\u5f88\u597d\u7684\u7406\u7531\u3002Synopsys\u9996\u5e2d\u5b89\u5168\u6280\u672f\u4e13\u5bb6\u8fc8\u514b\u00b7\u535a\u5c14\u624e(Mike Borza)\u8868\u793a\uff1a\u201c\u653b\u51fb\u8fc7\u53bb\u4ec5\u9650\u4e8e\u5b89\u5168\u5b9e\u9a8c\u5ba4\uff0c\u4ed6\u4eec\u4f1a\u5728\u90a3\u91cc\u8fdb\u884c\u6545\u969c\u6ce8\u5165\uff0c\u4ee5\u7ed5\u8fc7\u5b89\u5168\u65b9\u6848\u3002\u201d\u201c\u4f46\u968f\u7740\u6210\u50cf\u6280\u672f\u4ef7\u683c\u7684\u4e0b\u964d\uff0c\u5b83\u4e0d\u518d\u53ea\u662f\u7531\u5927\u5b66\u5b9e\u9a8c\u5ba4\u548c\u79c1\u4eba\u5b9e\u9a8c\u5ba4\u5b8c\u6210\u7684\u3002\u653b\u51fb\u4e0d\u518d\u4ec5\u4ec5\u662f\u7814\u7a76\u3002\u786e\u5b9e\u5b58\u5728\u6076\u610f\u653b\u51fb\u3002\u5bf9\u4e8e\u8bb8\u591a\u4eba\u6765\u8bf4\uff0c\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u6df1\u5965\u7684\u95ee\u9898\uff0c\u4f46\u6211\u4eec\u6b63\u5728\u770b\u5230\u82af\u7247\u6280\u672f\u7684\u8fdb\u6b65\u3002\u201c\u3002\n\u7eb3\u7c73\u7ecf\u6d4e\u5b66\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u6bd4\u524d\u6cbf\u8282\u70b9\u66f4\u660e\u663e\uff0c\u5728\u90a3\u91cc\u5efa\u7acb\u6709\u6548\u7684\u5b89\u5168\u53ef\u80fd\u662f\u6700\u4ee4\u4eba\u671b\u800c\u751f\u754f\u7684\u6311\u6218\u3002\u5728\u8fd9\u4e9b\u8282\u70b9\u4e0a\u5f00\u53d1\u7684\u82af\u7247\u662f\u6700\u590d\u6742\u3001\u6700\u6602\u8d35\u7684\uff0c\u901a\u5e38\u4e5f\u662f\u6700\u96be\u4fdd\u62a4\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4eba\u4eec\u8d8a\u6765\u8d8a\u62c5\u5fc3\uff0c\u4e0d\u65ad\u6269\u5927\u89c4\u6a21\u6b63\u5728\u5f00\u8f9f\u65b0\u7684\u653b\u51fb\u9762\uff0c\u8fd9\u5728\u8fc7\u53bb\u662f\u4ece\u672a\u6709\u8fc7\u7684\u3002\n\u572810 nm\u53ca\u4ee5\u4e0b\uff0c\u65e0\u9700\u5b9e\u9645\u63a5\u89e6\u82af\u7247\u5373\u53ef\u626b\u63cf\u52a0\u5bc6\u65b9\u6848\u3002\u51e0\u5e74\u524d\uff0c\u67cf\u6797\u7406\u5de5\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u9996\u6b21\u786e\u5b9a\u8fd9\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u653b\u51fb\u9762\uff0c\u4ed6\u4eec\u5c55\u793a\u4e86\u901a\u8fc7\u572828 nm FPGA\u4e0a\u5229\u7528\u5149\u5b66\u975e\u63a5\u89e6\u5f0f\u63a2\u6d4b\uff0c\u4ed6\u4eec\u80fd\u591f\u5bf9\u82af\u7247\u7684\u6bd4\u7279\u6d41\u52a0\u5bc6\u6267\u884c\u975e\u4fb5\u5165\u6027\u653b\u51fb\u3002\u81ea\u90a3\u4ee5\u540e\uff0cFPGA\u4f9b\u5e94\u5546\u5b89\u88c5\u4e86\u5404\u79cd\u963b\u585e\u548c\u6df7\u6dc6\u6280\u672f\uff0c\u4f46\u4e00\u4e9b\u719f\u6089\u8fd9\u79cd\u65b9\u6cd5\u7684\u5b89\u5168\u4e13\u5bb6\u8868\u793a\uff0c\u4ed6\u4eec\u5bf9\u5728\u4e0d\u63a5\u89e6\u82af\u7247\u7684\u60c5\u51b5\u4e0b\u67e5\u770b\u6570\u636e\u52a0\u5bc6\u65b9\u6848\u662f\u5982\u6b64\u5bb9\u6613\u611f\u5230\u9707\u60ca\u3002\n\u5728\u8fd9\u4e9b\u5de5\u827a\u8282\u70b9\uff0c\u66f4\u8584\u7684\u7edd\u7f18\u5c42\u548c\u66f4\u8584\u7684\u886c\u5e95\u4e5f\u610f\u5473\u7740\u82af\u7247\u4e0a\u6709\u66f4\u591a\u7684\u566a\u97f3\u3002\u5176\u4e2d\u90e8\u5206\u539f\u56e0\u662f\u7535\u78c1\u8f90\u5c04\uff0c\u5b83\u5df2\u7ecf\u9020\u6210\u4e86\u82af\u7247\u4e0a\u7684\u4fe1\u53f7\u5e72\u6270\u3002\u5b83\u4e5f\u53ef\u4ee5\u5728\u82af\u7247\u5916\u542c\u5230\u3002\nAnsys\u7684\u4ea7\u54c1\u8425\u9500\u603b\u76d1\u9a6c\u514b\u00b7\u65af\u6e29\u5b81(Marc Swinnen)\u8868\u793a\uff1a\u201c\u7531\u4e8e\u5b83\u662f\u57fa\u4e8e\u786c\u4ef6\u7684\uff0c\u5982\u679c\u4f60\u7684\u7cfb\u7edf\u6709\u7f3a\u9677\uff0c\u4e00\u65e6\u5b83\u51fa\u73b0\u5728\u73b0\u573a\uff0c\u4f60\u51e0\u4e4e\u65e0\u80fd\u4e3a\u529b\u3002\u201d\u201c\u901a\u8fc7\u8f6f\u4ef6\uff0c\u60a8\u53ef\u4ee5\u53d1\u9001\u8865\u4e01\u3002\u5982\u679c\u901a\u8fc7\u5305\u88f9\u53ef\u4ee5\u542c\u5230\u4fe1\u53f7\uff0c\u4f60\u5fc5\u987b\u91cd\u65b0\u5236\u4f5c\u4e00\u4e2a\u3002\u5b83\u771f\u7684\u9700\u8981\u53ca\u65e9\u8bbe\u8ba1\u3002\u5982\u679c\u4f60\u770b\u4e00\u4e0b\u4fe1\u7528\u5361\u7684\u82af\u7247\uff0c\u6bcf\u4e2a\u4ea4\u6362\u673a\u90fd\u5fc5\u987b\u6d88\u8017\u76f8\u540c\u7684\u7535\u91cf\u3002\u4ed6\u4eec\u88c5\u4e0a\u4e86\u865a\u62df\u5f00\u5173\uff0c\u4ee5\u963b\u6b62\u7535\u5b50\u63a2\u6d4b\u3002\u201c\u3002\n\u867d\u7136\u6269\u5c55\u7684\u7ecf\u6d4e\u6027\u5bf9\u4e00\u4e9b\u516c\u53f8\u4ecd\u7136\u5177\u6709\u8db3\u591f\u7684\u5438\u5f15\u529b\uff0c\u4f46\u5b83\u4eec\u6b63\u5728\u8feb\u4f7f\u82af\u7247\u5236\u9020\u5546\u5728\u8fd9\u4e9b\u9ad8\u7ea7\u8282\u70b9\u4e0a\u5b9e\u65bd\u5b89\u5168\u63aa\u65bd\uff0c\u800c\u8fd9\u4e9b\u63aa\u65bd\u5728\u8f83\u8001\u7684\u8282\u70b9\u4e0a\u662f\u4e0d\u5fc5\u8981\u7684\u3002\nTortuga Logic\u7684Oberg\u8bf4\uff1a\u201c\u5f53\u4f60\u5728\u4e00\u5757\u7269\u7406\u7845\u7247\u4e0a\u53d8\u5f97\u66f4\u7d27\u51d1\u3001\u66f4\u591a\u7684\u6805\u6570\u65f6\uff0c\u7269\u7406\u53d1\u5c04\u91cf\u5c31\u53d8\u5f97\u66f4\u96be\u51cf\u5c11\u3002\u201d\u201c\u5149\u5b66\u662f\u975e\u5e38\u8584\u7684\u3002\u5f88\u591a\u65f6\u5019\uff0c\u4f60\u5728\u8fd9\u4e9b\u82af\u7247\u4e2d\u6dfb\u52a0\u5b89\u5168\u7f51\u683c\uff0c\u8fd9\u6837\u5982\u679c\u6709\u4eba\u5728\u91cc\u9762\u7167\u5c04\u5149\u7ebf\uff0c\u4f60\u5c31\u4e0d\u80fd\u771f\u6b63\u770b\u5230\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u968f\u7740\u7cfb\u7edf\u53d8\u5f97\u8d8a\u6765\u8d8a\u5c0f\uff0c\u8fd9\u4e9b\u6280\u672f\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\u3002\u201c\u3002\n\u8fd9\u4e5f\u5ef6\u4f38\u5230\u5b58\u50a8\u5668\uff0c\u5728\u9ad8\u7ea7\u82af\u7247\u4e2d\uff0c\u5b58\u50a8\u5668\u5f80\u5f80\u5bb9\u6613\u53d7\u5230\u653b\u51fb\uff0c\u56e0\u4e3a\u5b83\u6563\u5e03\u5728\u82af\u7247\u5468\u56f4\uff0c\u4ee5\u4fbf\u51cf\u5c11\u6570\u636e\u9700\u8981\u5728\u5404\u79cd\u5904\u7406\u5143\u4ef6\u4e4b\u95f4\u4f20\u8f93\u7684\u8ddd\u79bb\u3002DRAM\u548cSRAM\u76f8\u5bf9\u5b89\u5168\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u6613\u5931\u6027\u7684\uff0c\u5f53\u5b83\u4eec\u65ad\u7535\u65f6\u6570\u636e\u4f1a\u6d88\u5931\u3002\u4f46\u662f\uff0c\u5728\u8fd9\u4e9b\u524d\u6cbf\u82af\u7247\u4e2d\u90e8\u7f72\u7684\u975e\u6613\u5931\u6027\u5b58\u50a8\u5668\u7c7b\u578b\u4e5f\u5728\u4e0d\u65ad\u589e\u52a0\u3002\nRambus\u7684\u8d1d\u65af\u7279\u8bf4\uff1a\u201c\u6240\u6709\u7684\u5d4c\u5165\u5f0f\u975e\u6613\u5931\u6027\u5b58\u50a8\u5668\u4e00\u822c\u90fd\u6709\u4e24\u79cd\u98ce\u683c\u3002\u201d\u60a8\u8981\u4e48\u4f7f\u7528\u57fa\u4e8e\u7535\u8377\u7684\u65b9\u6cd5\u5b58\u50a8\u6570\u636e\uff0c\u8981\u4e48\u4f7f\u7528\u57fa\u4e8e\u963b\u6297\u7684\u5b58\u50a8\u5668\u5b58\u50a8\u6570\u636e\u3002\u5145\u7535\u8981\u5bb9\u6613\u5f97\u591a\u3002\u6570\u636e\u4f4d\u4e8e\u9694\u79bb\u95e8\u4e0a\u7684\u4f4d\u5355\u5143\u4e2d\uff0c\u6709\u5404\u79cd\u65b9\u6cd5\u53ef\u4ee5\u63d0\u53d6\u8fd9\u4e9b\u6570\u636e\u3002\u6709\u4e00\u79cd\u6280\u672f\u53eb\u505a\u88ab\u52a8\u7535\u538b\u5bf9\u6bd4\u5ea6\uff0c\u5b83\u6d89\u53ca\u5230\u4f7f\u7528\u626b\u63cf\u7535\u5b50\u663e\u5fae\u955c(SEM)\u6765\u5b9e\u9645\u611f\u77e5\u7535\u8377\u578b\u5b58\u50a8\u5668\u4e2d\u7684\u7535\u8377\u3002\u6709\u51e0\u5341\u7bc7\u5173\u4e8e\u4eba\u4eec\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528SEM\u4ece\u4f9d\u8d56\u7535\u8377\u7684\u5d4c\u5165\u5f0f\u975e\u6613\u5931\u6027\u5b58\u50a8\u5668\u4e2d\u63d0\u53d6\u5185\u5bb9\u7684\u8bba\u6587\u3002\u5176\u4ed6\u975e\u6613\u5931\u6027\u5b58\u50a8\u5668-MRAM\u3001RRAM\u3001\u76f8\u53d8\u5b58\u50a8\u5668-\u90fd\u662f\u76f8\u4f3c\u7684\uff0c\u56e0\u4e3a\u4f4d\u5355\u5143\u7684\u963b\u6297\u968f\u7740\u67d0\u7269\u7684\u51fd\u6570\u800c\u6539\u53d8\u3002\u4f60\u6539\u53d8\u94c1\u7535\u5b58\u50a8\u5668\u4e2d\u7684\u78c1\u81ea\u65cb\uff0c\u963b\u6297\u5c31\u4f1a\u6539\u53d8\u3002\u4f60\u5728CBRAM(\u5bfc\u7535\u6865\u63a5RAM)\u4e2d\u5f62\u6210\u4e00\u4e2a\u7535\u611f\u7535\u6865\uff0c\u963b\u6297\u5c31\u4f1a\u6539\u53d8\u3002\u5bf9\u4e8eRRAM\uff0c\u4f60\u6709\u6c27\u5316\u7269\u7a7a\u4f4d\uff0c\u8fd9\u4f1a\u6539\u53d8\u963b\u6297\u3002\u8fd9\u4e9b\u90fd\u662f\u57fa\u4e8e\u963b\u6297\u7684\u5b58\u50a8\u5668\u3002\u597d\u6d88\u606f\u662f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u624b\u66f4\u719f\u6089\u4ee5\u5145\u7535\u4e3a\u57fa\u7840\u7684\u8bb0\u5fc6\u3002\u201c\u3002\n\u89e3\u51b3\u65b9\u6848\u7684\u5bf9\u624b\u901a\u5e38\u5206\u4e3a\u4e09\u4e2a\u9635\u8425\uff1a\u62e5\u6709\u65e0\u9650\u8d44\u6e90\u7684\u5b89\u5168\u56fd\u5bb6\u56fd\u5bb6\uff0c\u5bfb\u6c42\u7528\u52d2\u7d22\u8f6f\u4ef6\u7b49\u6709\u4ef7\u503c\u7684\u4e1c\u897f\u6362\u53d6\u56de\u62a5\u7684\u7f6a\u72af\uff0c\u6216\u8005\u5bfb\u6c42\u6270\u4e71\u67d0\u4e8b\u7684\u5bfb\u6c42\u523a\u6fc0\u7684\u4eba\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u89c4\u5b9a\u98ce\u9669\uff0c\u800c\u98ce\u9669\u53c8\u89c4\u5b9a\u6240\u9700\u7684\u5b89\u5168\u7ea7\u522b\u3002\nFlex Logix\u9996\u5e2d\u6267\u884c\u5b98\u6770\u592b\u00b7\u6cf0\u7279(Geoff Tate)\u8868\u793a\uff1a\u201c\u4efb\u4f55\u4e8b\u60c5\u90fd\u662f\u6709\u6210\u672c\u7684\u3002\u201d\u201c\u56e0\u6b64\uff0c\u56fd\u9632\u65b9\u9762\u7684\u9700\u6c42\u4e0e\u5546\u4e1a\u793e\u533a\u7684\u9700\u6c42\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u5bf9\u7f8e\u56fd\u519b\u65b9\u6765\u8bf4\u5c24\u5176\u56f0\u96be\uff0c\u56e0\u4e3a\u6ca1\u6709\u503c\u5f97\u4fe1\u8d56\u7684\u5de5\u5382\u3002\u8fc7\u53bb\uff0c\u6240\u6709\u82af\u7247\u90fd\u662f\u7531\u7f8e\u56fd\u516c\u53f8\u8bbe\u8ba1\u548c\u5236\u9020\u7684\u3002\u73b0\u5728\uff0c\u82af\u7247\u662f\u901a\u8fc7\u6807\u51c6\u7684\u5546\u4e1a\u6676\u5706\u5382\u8fd0\u884c\u7684\uff0c\u4ed6\u4eec\u65e0\u6cd5\u77e5\u9053\u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u662f\u5426\u5b58\u5728\u7279\u6d1b\u4f0a\u6728\u9a6c\u7a0b\u5e8f\uff0c\u751a\u81f3\u65e0\u6cd5\u77e5\u9053\u82af\u7247\u662f\u5426\u662f\u5047\u5192\u7684\u3002\u4f46\u662f\u6709\u5f88\u591a\u5173\u4e8e\u5904\u7406\u5668\u67b6\u6784\u7684\u95ee\u9898\uff0c\u800c\u8fd9\u5728\u5d4c\u5165\u5f0fFPGA\u4e2d\u662f\u5f88\u96be\u7a81\u7834\u7684\u3002\u6839\u636e\u5b9a\u4e49\uff0cFPGA\u662f\u4e00\u5f20\u767d\u677f\u3002\u201c\u3002\n\u53e6\u4e00\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\u7684\u4e8b\u60c5\u662f\u673a\u5668\u5b66\u4e60\uff0c\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4e00\u628a\u53cc\u5203\u5251\uff0c\u56e0\u4e3a\u5bf9\u624b\u4e00\u5fc3\u60f3\u8981\u4f7f\u7528ML\u6765\u5371\u5bb3\u7cfb\u7edf\uff0c\u5c31\u50cf\u5b89\u5168\u4e13\u5bb6\u60f3\u8981\u4fdd\u62a4\u5b83\u4e00\u6837\u3002\u4f46\u5f53\u4e3a\u5408\u6cd5\u884c\u4e3a\u548c\u6d41\u91cf\u5efa\u7acb\u57fa\u7ebf\u65f6\uff0c\u5b83\u5728\u9632\u5fa1\u65b9\u9762\u5c24\u5176\u6709\u6548\u3002\u5bf9\u4e8e\u82af\u7247\u548cIP\u7684\u6c34\u5370\u4e5f\u662f\u5982\u6b64\u3002\nLeef\u8bf4\uff1a\u201c\u5982\u679c\u4e00\u5bb6\u516c\u53f8\u5373\u5c06\u5411\u5ba2\u6237\u53d1\u8fd0IP\u6838\uff0c\u5ba2\u6237\u53ef\u4ee5\u5728\u95e8\u53e3\u8d70\u6765\u8d70\u53bb\uff0c\u6dfb\u52a0\u81ea\u5df1\u7684\u4ee3\u7801\u3002\u201d\u201c\u4f46IP\u4f9b\u5e94\u5546\u53ef\u4ee5\u5728\u53d1\u5e03\u4e4b\u524d\u4e3a\u8be5IP\u6dfb\u52a0\u6c34\u5370\u3002\u5728\u672a\u6765\uff0c\u8bbe\u8ba1\u8be5IP\u7684\u4e00\u65b9\u53ef\u80fd\u4f1a\u5f3a\u8feb\u8be5IP\u81ea\u6211\u8bc6\u522b\u3002\u201c\u3002\n\u8fd8\u6709\u4e00\u9879\u5de5\u4f5c\u6b63\u5728\u8fdb\u884c\uff0c\u4ee5\u589e\u5f3a\u82af\u7247\u7684\u5f39\u6027\uff0c\u4f7f\u82af\u7247\u5728\u53d7\u5230\u653b\u51fb\u540e\u80fd\u591f\u5b89\u5168\u5730\u91cd\u65b0\u542f\u52a8\u3002ARM\u5728\u8fd9\u65b9\u9762\u7684\u52aa\u529b\u5c24\u4e3a\u79ef\u6781\u3002\u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u5e38\u89c1\u786c\u4ef6\u5f31\u70b9\u7684\u6570\u636e\u5e93\uff0c\u7531MITRE\u5f00\u53d1\uff0cMITRE\u662f\u4e00\u4e2a\u975e\u8425\u5229\u6027\u7ec4\u7ec7\uff0c\u4e3a\u7f8e\u56fd\u653f\u5e9c\u7ba1\u7406\u8054\u90a6\u8d44\u52a9\u7684\u7814\u53d1\u4e2d\u5fc3\u3002Mitre\u4e4b\u524d\u4e00\u76f4\u4e13\u6ce8\u4e8e\u8f6f\u4ef6\u3002\u5b83\u57282\u6708\u4efd\u63a8\u51fa\u4e86\u5305\u62ec\u786c\u4ef6\u5728\u5185\u7684\u6700\u65b0\u6570\u636e\u5e93\u3002\n\u7ed3\u8bba\u5b89\u5168\u6027\u4e00\u76f4\u5305\u62ec\u7ecf\u6d4e\u98ce\u9669\u8bc4\u4f30\u90e8\u5206\uff0c\u4f46\u7531\u4e8e\u590d\u6742\u6027\u589e\u52a0\u548c\u7ec4\u4ef6\u53d8\u8584\uff0c\u4ee5\u53ca\u6570\u636e\u91cf\u548c\u5904\u7406\u6570\u636e\u4ef7\u503c\u7684\u589e\u52a0\uff0c\u98ce\u9669\u6b63\u5728\u589e\u52a0\u3002\u8fd9\u4fc3\u4f7f\u82af\u7247\u5236\u9020\u5546\u5f00\u59cb\u6bd4\u8fc7\u53bb\u66f4\u8ba4\u771f\u5730\u5bf9\u5f85\u5b89\u5168\u95ee\u9898\uff0c\u5e76\u8981\u6c42\u6240\u6709\u4e0e\u4ed6\u4eec\u6709\u4e1a\u52a1\u5f80\u6765\u7684\u4eba\u4e5f\u8fd9\u6837\u505a\u3002\n\u4ee5\u524d\uff0c\u5b89\u5168\u6027\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u529f\u80fd\u3002\u73b0\u5728\uff0c\u5b83\u4e0e\u6d89\u53ca\u4efb\u52a1\u548c\u5b89\u5168\u5173\u952e\u578b\u8bbe\u8ba1\u7684\u5e02\u573a\u4e2d\u7684\u8bbe\u8ba1\u3001\u7cfb\u7edf\u67b6\u6784\u548c\u6f5c\u5728\u8d23\u4efb\u7d27\u5bc6\u4ea4\u7ec7\u5728\u4e00\u8d77\u3002\u800c\u4e14\uff0c\u5728\u7ecf\u6d4e\u9700\u8981\u7684\u5730\u65b9\uff0c\u8be5\u884c\u4e1a\u73b0\u5728\u4f3c\u4e4e\u5df2\u7ecf\u505a\u597d\u4e86\u8ddf\u8fdb\u7684\u51c6\u5907\u3002", "note_en": "Protecting chips from cyberattacks is becoming more difficult, more expensive and much more resource-intensive, but it also is becoming increasingly necessary as some of those chips end up in mission-critical servers and in safety-critical applications such as automotive.\n Security has been on the semiconductor industry\u2019s radar for at least the past several years, despite spotty progress and inconsistent applications of security technology. However, that is starting to change for the better due to shifts in the economics behind security. While security always has been a risk versus benefit equation, for the most part it was one step removed from the semiconductor market. That\u2019s no longer the case. As systems vendors and OEMs increasingly design their own chips, instead of buying commercially developed devices and IP created by third-party developers, they effectively are creating their own ecosystems and requirements, and security is a key concern for them.\n  Macroeconomics. The value of data is rising and there are multiple entry points to that data, from the network and the software all the way down to the chip and interconnect level. System vendors are under pressure to prevent security breaches, and they are exerting pressure across their respective supply chains.\n Microeconomics. As new markets emerge, notably the edge and AI, chipmakers are scrambling to build semi-customized chips with more robust security. They are taking two primary routes to achieve this, a \u201csuperchip\u201d approach and a tile/ chiplet-based approach. Security is being architected into both of these.\n Nanoeconomics. A half century of feature scaling has reduced chips to the point where there is no simple way to protect data on a chip. Thinner insulation, better scanning tools and more ways into and out of a chip demand more complex security schemes, which need to be implemented in the architecture because they can impact power, performance and area.\n Macroeconomics The most visible of these three drivers is macroeconomics. The discovery of high-profile security vulnerabilities in speculative execution and branch prediction (Meltdown, Spectre, Foreshadow) ended up requiring costly fixes for data centers. All of the major processor vendors had to patch holes with software, and in doing so they eliminated two effective techniques for improving performance. As a result, customers that had upgraded their servers to leverage the latest processors lost much of the performance improvement. That, in turn, forced them to add more servers to process the same volume of data in the same amount of time.\n This was part of the reason system vendors opted to develop their own custom chip architectures, which could provide even bigger gains in performance and power. Many have since leveraged  Arm cores and custom accelerators (RISC-V, eFPGAs) rather than just relying on Intel, AMD, IBM or Nvidia processors. That move also puts chip security squarely under their own control, and it has provided an element of design freedom because new solutions do not need to be backward compatible with a particular  ISA.\n How much of an impact all of these changes will have remains to be seen. What is clear, however, is that the economics of hardware attacks are changing. The tools needed to hack into chips and systems of chips are no longer beyond the reach of ordinary criminals. Moreover, in the past, most attacks on hardware were less visible than software breaches because they mainly involved corporations and government entities, neither of which likes to call attention to security breaches. As computing becomes more pervasive and connected, the potential attack surfaces is widening to include many more devices, all of which will increase the visibility of hardware attacks.\n \u201cThere are four main attack surfaces, and each of those has different costs,\u201d said Serge Leef, program manager in DARPA\u2019s Microsystems Technology Office. \u201cOne is the supply chain, which is based on the size of a PUF ( physically unclonable function). The tradeoff here is size, not performance or power. The second is a  side-channel attack, where you cancel out the active gates. That can double the size of the security features, or it can cost power from generating random noise. The third is reverse engineering, where you employ logic locking or obfuscation. Because you\u2019re using additional circuits that are active, it has an impact on real estate and performance. The fourth is Trojan detection. That also costs real estate and performance.\u201d\n For mil/aero applications, hardware security is an obvious necessity. But for automotive, this is a new and critical issue that is still evolving because the electronic architectures in vehicles continue to evolve. Over the past few years the underlying strategy for assisted and ultimately autonomous driving has shifted from sending everything to the cloud and back to the vehicle, to centralized processing in a vehicle, then to distributed processing, and finally to a combination of distributed processing at the sensor level with centralized processing of structured and cleaned data. This is partly due to the fact that carmakers have come to the realization that whoever owns the electronic infrastructure owns the market, and they are not about to be supplanted by their suppliers.\u00a0Strategies for securing that data in autos have likewise seesawed to accommodate different architectures. But due to the liability implications of a breach and the potential cost for ransomware, there is a growing recognition that hardware is as much of a target as software. Approaches here tend to fall into a couple of different camps.\n \u201cThere are two main kinds of attacks,\u201d said Jason Oberg, CEO of  Tortuga Logic. \u201cOne is physical, such as shooting a laser at chip and using optical measurements and microscopes. That also includes physical side-channel attacks, like electromagnetic radiation and thermal changes. Getting physical access to a chip requires you to actually have that chip. There also are things in the digital domain that can get exploited remotely, like low-level microcode, which leverages an actual problem with the chip. We see a lot more growth in the remote attacks, particularly in the commercial domain. Those are the scariest ones, because if you find a flaw in the engineering, you don\u2019t have to tear something apart or do reverse engineering. But you also can\u2019t patch it with firmware. That makes it harder to fix.\u201d\n In addition, regardless of who designs a system, almost all of them utilize third-party IP. This becomes particularly challenging to secure in automotive, where the supply chain is enormous and systems need to react to a broad range of objects and ambient conditions.\n \u201cA lot of designs in automotive are highly configurable, and they\u2019re configurable even on the fly based on the data they\u2019re getting from sensors,\u201d said Simon Rance, vice president of marketing at  ClioSoft. \u201cThe data is going from those sensors back to processors. The sheer amount of data that\u2019s running from the vehicle to the data center and back to the vehicle, all of that has to be traced. If something goes wrong, they\u2019ve got to trace it and figure out what the root cause is. That\u2019s where there\u2019s a need to be filled.\u201d\n Tracking and security typically have been separated in the past, but that\u2019s beginning to change, particularly with  ISO 26262 requirements for traceability. \u201cWe\u2019re definitely seeing a lot more traction in that space,\u201d Rance said. \u201cThe semiconductor IP providers have had this for 10 years, but it\u2019s certainly growing with multiple uses of IP, especially with legal agreements.\u201d\n Microeconomics How many of these various approaches to security are required depends upon the market segment and the need of a particular application. Each security solution has a cost, so it comes down to the value of the data and the price elasticity for each device.\n \u201cThe big question is whether they are going after data, or whether they are they trying to bring down an entire system,\u201d said Scott Best, technical director of anti-counterfeiting products at  Rambus. \u201cThose are two different attack surfaces. The adversary is going to go after those with different sets of tools and strategies, and the countermeasures will be different to either prevent and/or delay. Eventually the adversary will win, so you\u2019re trying to delay until they get tired and move onto your competitor\u2019s system, which doesn\u2019t have as strong security. We see that a lot in the anti-counterfeiting space. Usually you\u2019re just trying to delay.\u201d\n A successful delay is based on a complex security stack coupled with best practices. With enough determination any security can be broken. But this also needs to be viewed in the context of an evolution toward edge computing. The IoT concept that everything can be sent to the cloud for processing has proved to be unworkable on many counts, including power, latency, and ultimately cost. That cost includes everything from the power and bandwidth needed to send data back and forth, the amount of memory needed to store it, and the resources necessary to process large quantities of data.\n The current solution is to do more processing much closer to the source of data, where that data can be processed and cleaned. That requires some level of intelligence to determine what is useful data and what is junk, and it requires security to be localized and well integrated into the edge device/system architecture.\n The challenge is that much of the development at the edge ranges from highly customized to semi-customized. The only ways to manage those costs are to either build a platform, utilize a LEGO-like chiplet/tile approach, or adopt the superchip approach. As a result, the security infrastructure now needs to be extended across the supply chain for whichever approach is used.\n \u201cWe\u2019ve seen efforts for tile-based heterogeneous strategies, and we\u2019ve also seen huge SoCs with a number of IP blocks that have been deactivated,\u201d said DARPA\u2019s Leef. \u201cSo you may have parts with 1 to 1,000 different blocks, where 70% are turned off. This is all done through software, or where you deactivate a number of blocks. Even though it\u2019s large, it\u2019s more cost-effective. What you\u2019re seeing is that the economic curve has changed. It\u2019s more expensive to get manufacturing ramped up.\u201d\n However, each of those blocks or chiplets needs to be secure, and so does the software, the firmware, and the interconnects that allows different blocks to communicate with each other and the outside world. The same is true for platforms developed by a single vendor, where different pieces are layered on for specific applications.\n \u201cWe\u2019ve built in security for a number of purposes,\u201d said Kris Ardis, executive director for  Maxim Integrated\u2018s Micros, Software &amp; Security Business Unit. \u201cOne is just application-level security. But we also consider the weights and the network configuration to be IP. We treat an FPGA program file just like your software, and C code is your IP. One of the reasons we put secure encryption in there is we want to be able to securely load a file. If you\u2019re a contract manufacturer and you ship your network file in raw text, someone can take that and program it on the different versions of your chip. But if it\u2019s encrypted and it has secure boot, then your weight file is just like a secure boot would be protected under normal software. This roadmap has many parts. It\u2019s designed for different networks, peripherals and applications. But we certainly see other kinds of security and robustness features being implemented, particularly for some of the higher-end industrial and medical applications.\u201d\n There is good reason for this, too. \u201cAttacks used to be confined to security labs, where they would do fault injection to bypass security schemes,\u201d said Mike Borza, principal security technologist at  Synopsys. \u201cBut as imaging technology has fallen in price, it\u2019s no longer just being done by university labs and private labs. Attacks are not just research anymore. There are actual malicious attacks. It\u2019s still somewhat of an esoteric concern for many people, but we are are seeing improvements showing up in chips.\u201d\n Nanoeconomics Nowhere is that more evident than at leading-edge nodes, where building in effective security poses perhaps the most daunting challenge. Chips developed at these nodes are the most complex, the most costly, and often the hardest to secure. In fact, there is growing concern that continued scaling is opening up new attack surfaces that never existed in the past.\n At 10nm and below, encryption schemes can be scanned without actually touching a chip. This was first identified as a possible attack surface several years ago by researchers at Technische Universit\u00e4t Berlin, who  demonstrated that by utilizing optical contactless probing on a 28nm FPGA, they were able to execute a non-invasive attack on the chip\u2019s bitstream encryption. FPGA vendors have since installed various blocking and obfuscation techniques, but a number of security experts familiar with this method said they were shocked at how easy it was to view data encryption schemes without ever touching the chip.\n At these process nodes, thinner insulation layers and thinner substrates also mean more noise across a chip. Some of that is due to electromagnetic radiation, which already is causing signal interference on-chip. It can be heard off-chip, as well.\n \u201cSince it\u2019s hardware-based, if there\u2019s a flaw in your system, once it\u2019s out in the field there\u2019s very little you can do about it,\u201d said Marc Swinnen, director of product marketing at  Ansys. \u201cWith software, you can send out a patch. If the signals can be heard through the package, you have to make a new one. It really needs to be designed in early. If you look at the chips for your credit card, every switch has to consume the same amount of power. They put in dummy switches to thwart electronic probing.\u201d\n  While the economics of scaling are still attractive enough for some companies, they are forcing chipmakers to implement security measures at these advanced nodes that are not necessary at older nodes.\n \u201cAs you get more compact, more gate count into a physical piece of silicon, the amount of physical emanations become harder to mitigate,\u201d said Tortuga Logic\u2019s Oberg. \u201cOptical is very thin. A lot of times you add secure meshes into these chips so that if someone shines a light in there, you can\u2019t actually see what\u2019s going on. Those techniques become harder as the system becomes smaller.\u201d\n This extends to memory, as well, which in advanced chips tends to be vulnerable because it is scattered around the die in order to reduce the distance that data needs to travel between various processing elements. DRAM and SRAM are relatively safe, because they are volatile and data disappears when they are powered down. But there are an increasing number of non-volatile memory types being deployed in these leading-edge chips, as well.\n \u201cAll of the embedded non-volatile memories generally come in two flavors,\u201d said Rambus\u2019 Best. \u201cEither you\u2019re storing data using a charge-based approach, or you\u2019re storing the data using an impedance-based memory. Charge is much easier. The data is sitting in a bit cell on an isolated gate, and there are all sorts of ways of extracting that data. There\u2019s a technique called passive voltage contrast, which involves using a scanning electron microscope (SEM) to actually sense what the charge is inside a charge-based memory. There are dozens of papers about people using SEMs in this way to extract content from embedded non-volatile memories that rely on charge. The other non-volatile memories \u2014  MRAM,  RRAM,  phase-change memory \u2014 are all similar in that the impedance of the bit cell changes as the function of something. You change the magnetic spin in an FRAM and the impedance changes. You form an inductive bridge in the CBRAM (conductive-bridging RAM) and the impedance changes. With  RRAM you have oxide vacancies, and that changes the impedance. Those are all impedance-based memories. The good news is that, in general, the adversary is more familiar with memory based on charge.\u201d\n Solutions Adversaries typically fall into three camps with security \u2014 nation states, which have unlimited resources, criminals looking for a payoff with something valuable such as ransomware, or thrill-seekers looking to disrupt something. The application typically dictates the risk, which in turn dictates the required level of security.\n \u201cEverything has a cost,\u201d said Geoff Tate, CEO of  Flex Logix. \u201cSo the needs in defense are different than for the commercial community. This is particularly difficult for the U.S. military because there is no trusted fab. In the past, all chips were designed and fabricated by American companies. Now, chips are run through standard commercial fabs and they have no way of knowing whether something has changed or whether there are Trojans or even whether the chips are counterfeit. But there is a lot of concern about the processor architecture, and that\u2019s a lot harder to breach with an embedded FPGA. By definition, an FPGA is a blank slate.\u201d\n Another thing that can help is machine learning, which is something of a double-edged sword because adversaries are as bent on using ML to compromise systems as security experts are to protect it. But it works particularly well on the defensive side when a baseline is established for legal behavior and traffic. The same is true for watermarking of chips and IP.\n \u201cIf a company is about to ship an IP core to a customer, a customer can walk about the door and add their own code,\u201d said Leef. \u201cBut the IP vendor could watermark that IP before they release it. In the future, the party designing in that IP could force the IP to self-identify.\u201d\n There also is work underway to build resilience into chips, which allows chips to reboot securely after being attacked. Arm has been especially active in this effort. And there is now a database of  common hardware weaknesses, which was developed by  MITRE, a not-for-profit organization that manages federally funded R&amp;D centers for the U.S. government. Mitre previously had focused on software. It introduced its latest database in February that includes hardware.\n Conclusion Security always has included an economic risk assessment component, but the risks are increasing due to increased complexity and thinner components, as well as the increase in the amount of data and the value of processed data. This has prompted chipmakers to begin taking security much more seriously than in the past, and demanding everyone who does business with them to do so, as well.\n Previously, security was largely a standalone feature. It is now tightly intertwined with design, system architecture and potential liability in markets that involve mission- and safety-critical designs. And wherever economics require it, the industry now appears ready to follow.", "posttime": "2020-06-15 05:26:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82af\u7247,\u5b89\u5168,economics", "title": "\u82af\u7247\u5b89\u5168\u7ecf\u6d4e\u5b66\u7684\u6839\u672c\u6027\u53d8\u9769", "title_en": "Fundamental Changes in Economics of Chip Security", "transed": 1, "url": "https://semiengineering.com/fundamental-changes-in-economics-of-security/", "via": "", "real_tags": ["\u82af\u7247", "\u5b89\u5168", "economics"]}, {"category": "", "categoryclass": "", "imagename": "f213cb01bd69d97c06c15655216389ee.jpg", "infoid": 1006569, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u8054\u90a6\u653f\u5e9c\u521a\u521a\u5411\u533a\u5757\u94fe\u521d\u521b\u516c\u53f8Key Retability Network Consensus(KRNC)\u6388\u4e88\u62e8\u6b3e\uff0c\u7814\u7a76\u5c06\u52a0\u5bc6\u8d27\u5e01\u878d\u5165\u7ecf\u6d4e\u7684\u53ef\u884c\u6027\u3002\nCoinDesk\u62a5\u9053\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7f8e\u56fd\u5c06\u8f6c\u5411\u6570\u5b57\u533a\u5757\u94fe\u7f8e\u5143\u3002\u76f8\u53cd\uff0c\u56fd\u5bb6\u79d1\u5b66\u57fa\u91d1\u4f1a\u8d44\u52a9Krnc\u662f\u56e0\u4e3a\u5b83\u5bf9\u63a2\u7d22\u63d0\u9ad8\u6570\u5b57\u4ea4\u6613\u5b89\u5168\u6027\u7684\u65b0\u65b9\u6cd5\u611f\u5174\u8da3\u3002\n\u636eCoinDesk\u62a5\u9053\uff0cKrnc\u6b63\u5728\u5f00\u53d1\u7684\u534f\u8bae\u5c06\u6839\u636e\u7528\u6237\u73b0\u6709\u7684\u8d22\u5bcc\u6bd4\u4f8b\u8ba1\u91cf\u51fa\u4e00\u79cd\u65b0\u7684\u52a0\u5bc6\u8d27\u5e01\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u4ed6\u4eec\u8d2d\u4e70\u6216\u79ef\u6781\u6316\u6398\u65b0\u7684\u52a0\u5bc6\u8d27\u5e01\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u8ba9\u4eba\u4eec\u53d8\u5f97\u66f4\u5bcc\u6709\uff0c\u4f46\u5b83\u4f1a\u8ba9\u4ed6\u4eec\u6709\u53e6\u4e00\u79cd\u5728\u7ebf\u8f6c\u8d26\u7684\u65b9\u5f0f\u3002\nKrnc\u9996\u5e2d\u6267\u884c\u5b98Clint Ehrlich\u5bf9CoinDesk\u8868\u793a\uff1a\u201c\u57fa\u4e8e\u5de5\u4f5c\u8bc1\u660e\u539f\u5219\u8fd0\u884c\u7684\u6bd4\u7279\u5e01\u662f\u6d6a\u8d39\u7684\u3002\u201d\u201c\u8fd9\u9700\u8981\u4eba\u4eec\u6d6a\u8d39\u91d1\u94b1\u548c\u8ba1\u7b97\u80fd\u529b\u6765\u89e3\u51b3\u6beb\u65e0\u610f\u4e49\u7684\u95ee\u9898\u3002\u201d\n\u53d1\u653e\u8fd9\u7b14\u62e8\u6b3e\u7684\u56fd\u5bb6\u79d1\u5b66\u57fa\u91d1\u4f1a(National Science Foundation)\u7ecf\u7406\u5b89\u5a1c\u00b7\u5e03\u96f7\u8fea-\u57c3\u65af\u7279\u7ef4\u65af(Anna Brady-Esteves)\u5f88\u5feb\u6f84\u6e05\u8bf4\uff0c\u653f\u5e9c\u5bf9\u63a2\u7d22\u533a\u5757\u94fe\u548c\u5bc6\u7801\u6280\u672f\u611f\u5174\u8da3\uff0c\u4f46\u8be5\u9879\u76ee\u6ca1\u6709\u5177\u4f53\u7684\u6700\u7ec8\u76ee\u6807-\u7279\u522b\u662f\u6ca1\u6709\u4efb\u4f55\u50cf\u8c61\u5f81\u5316\u7f8e\u5143\u8fd9\u6837\u7684\u4e1c\u897f\u3002\n\u57c3\u65af\u7279\u97e6\u65af\u544a\u8bc9CoinDesk\uff1a\u201c\u6211\u4eec\u4e13\u6ce8\u4e8e\u90a3\u4e9b\u6709\u610f\u4e49\u7684\u6280\u672f\u5de5\u4f5c\u9700\u8981\u5b8c\u6210\u7684\u9879\u76ee\uff0c\u6709\u6f5c\u529b\u63a8\u52a8\u7ade\u4e89\u4f18\u52bf\u548c\u5546\u4e1a\u5f71\u54cd\u3002\u201d", "note_en": "The U.S. federal government just awarded a grant to the blockchain startup Key Retroactivity Network Consensus (KRNC) to study the feasibility of integrating cryptocurrency into the economy.\n That doesn\u2019t mean that the U.S. is going to pivot to a digital blockchain dollar,   CoinDesk  reports. Rather, the National Science Foundation funded KRNC because it\u2019s interested in exploring new ways to improve the security of digital transactions.\n  The protocol KRNC is developing would meter out a new cryptocurrency in proportion to a user\u2019s existing wealth,  CoinDesk reports, instead of requiring them to purchase or  actively mine new crypto. In other words, it wouldn\u2019t make people richer, but it would grant them an alternative means to transfer funds online.\n   \u201cBitcoin, which runs on the principle of Proof-of-Work, is wasteful,\u201d KRNC CEO Clint Ehrlich told  CoinDesk. \u201cIt requires people to waste money and computing power solving pointless problems.\u201d\n  Anna Brady-Esteves, the National Science Foundation manager who issued the grant, was quick to clarify that the government was interested in exploring blockchain and crypto technology, but that there\u2019s no specific end-goal to the project \u2014 especially not anything like  tokenizing the dollar.\n \u201cWe focus on projects where there is meaningful technical work to be done with the potential to drive competitive advantage and impact commercially,\u201d Estevez told  CoinDesk.", "posttime": "2020-06-15 04:37:45", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u542f\u52a8,paid,krnc", "title": "\u7f8e\u56fd\u653f\u5e9c\u521a\u521a\u4e3a\u63a2\u7d22\u6570\u5b57\u7f8e\u5143\u652f\u4ed8\u4e86\u4e00\u9879\u52a0\u5bc6\u542f\u52a8\u8ba1\u5212", "title_en": "The US Government Just Paid a Crypto Startup to Explore Digital Dollars", "transed": 1, "url": "https://futurism.com/the-byte/us-gov-paying-crypto-startup-explore-digital-dollar", "via": "", "real_tags": ["\u542f\u52a8", "paid", "krnc"]}, {"category": "", "categoryclass": "", "imagename": "6ae1ca745e5fa00c56e14f85cd268665.png", "infoid": 1006568, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u7c7b\u5974\u96b6\u5236\u7684\u53ef\u6015\u5f71\u54cd\u7ee7\u7eed\u5f71\u54cd\u7740\u793e\u4f1a\u3002\u5728\u8ba1\u7b97\u673a\u8f6f\u4ef6\u4e2d\u7ecf\u5e38\u4f7f\u7528\u672f\u8bed\u201c\u4ece\u5c5e\u201d\u662f\u5bf9\u4eba\u7c7b\u75db\u82e6\u7ecf\u5386\u7684\u4e0d\u5fc5\u8981\u5f15\u7528\u3002\u6b64\u63d0\u4ea4\u5220\u9664\u4e86\u5bf9\u672f\u8bed\u201c\u4ece\u5c5e\u201d\u7684\u6240\u6709\u53ef\u80fd\u5f15\u7528\u3002\u5b9e\u73b0\u8bf4\u660e\uff1azpool.d/Slaves\u811a\u672c\u91cd\u547d\u540d\u4e3adm-deps\uff0c\u5b83\u4f7f\u7528\u4e0e\u201cdmsetup des`\u201d\u76f8\u540c\u7684\u672f\u8bed\u3002\u5bf9`/sys/class/block/$dev/laves`\u76ee\u5f55\u7684\u5f15\u7528\u4fdd\u6301\u4e0d\u53d8\u3002\u6b64\u76ee\u5f55\u540d\u7531Linux\u5185\u6838\u51b3\u5b9a\u3002\u867d\u7136`dmsetup des`\u63d0\u4f9b\u4e86\u76f8\u540c\u7684\u4fe1\u606f\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u9700\u8981\u63d0\u5347\u7684\u6743\u9650\uff0c\u800c`/sys/.`\u76ee\u5f55\u662f\u5168\u7403\u53ef\u8bfb\u7684\u3002\u5ba1\u9605\u4eba\uff1aBrian Behlendorf&lt\uff1bbehlendorf1@llnl.gov&gt\uff1b\u5ba1\u9605\u4eba\uff1aRyan Moeller&lt\uff1bRyan@iXsystems.com&gt\uff1b\u7b7e\u5b57\u4eba\uff1aMatthew Ahrens&lt\uff1bmahrens@delphix.com&gt\uff1b\u5ba1\u9605\u4eba\uff1aRyan Moeller&lt\uff1bRyan@iXsystems.com&gt\uff1b\u7b7e\u6536\u4eba\uff1aMatthew Ahrens&lt\uff1bmahrens@delphix.com&gt\uff1b", "note_en": "The horrible effects of human slavery continue to impact society. Thecasual use of the term &#34;slave&#34; in computer software is an unnecessaryreference to a painful human experience.This commit removes all possible references to the term &#34;slave&#34;.Implementation notes:The zpool.d/slaves script is renamed to dm-deps, which uses the sameterminology as `dmsetup deps`.References to the `/sys/class/block/$dev/slaves` directory remain. Thisdirectory name is determined by the Linux kernel. Although`dmsetup deps` provides the same information, it unfortunately requireselevated privileges, whereas the `/sys/...` directory is world-readable.Reviewed-by: Brian Behlendorf &lt;behlendorf1@llnl.gov&gt;Reviewed-by: Ryan Moeller &lt;ryan@iXsystems.com&gt;Signed-off-by: Matthew Ahrens &lt;mahrens@delphix.com&gt; Closes  openzfs#10435", "posttime": "2020-06-15 04:37:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5220\u9664,removes,\u5f15\u7528", "title": "ZFS\u5220\u9664\u5bf9Slavery\u7684\u5f15\u7528", "title_en": "ZFS Removes References to Slavery", "transed": 1, "url": "https://github.com/openzfs/zfs/pull/10435", "via": "", "real_tags": ["\u5220\u9664", "removes", "\u5f15\u7528"]}]