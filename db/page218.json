[{"category": "", "categoryclass": "", "imagename": "b7d0c144fb7edbaca9cf58050ae41ce6.jpeg", "infoid": 1003575, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ebd\u7ea6(\u7f8e\u8054\u793e)-\u6839\u636e\u7f8e\u8054\u793e(The Associated Press)\u7684\u4e00\u9879\u7edf\u8ba1\uff0c\u6839\u636e\u4e00\u9879\u6709\u4e89\u8bae\u7684\u5dde\u6307\u4ee4\uff0c\u8d85\u8fc74500\u540d\u6b63\u5728\u5eb7\u590d\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u88ab\u9001\u5f80\u7ebd\u7ea6\u672c\u5df2\u8106\u5f31\u7684\u7597\u517b\u9662\uff0c\u7531\u4e8e\u6709\u4eba\u6279\u8bc4\u8be5\u6307\u4ee4\u52a0\u901f\u4e86\u7f8e\u56fd\u6700\u81f4\u547d\u7684\u75ab\u60c5\u7206\u53d1\uff0c\u8be5\u6307\u4ee4\u6700\u7ec8\u88ab\u5e9f\u9664\u3002\n\u5728\u7ebd\u7ea6\u536b\u751f\u90e8\u62d2\u7edd\u516c\u5e03\u4e24\u5468\u524d\u8fdb\u884c\u7684\u5185\u90e8\u8c03\u67e5\u540e\uff0c\u7f8e\u8054\u793e\u81ea\u5df1\u7f16\u5236\u4e86\u7edf\u8ba1\u6570\u636e\uff0c\u4ee5\u4e86\u89e3\u6839\u636e3\u670825\u65e5\u7684\u6307\u4ee4\uff0c\u6709\u591a\u5c11\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u4ece\u533b\u9662\u51fa\u9662\u5230\u7597\u517b\u9662\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u4ecd\u5728\u6838\u5b9e\u4e0d\u5b8c\u6574\u7684\u6570\u636e\u3002\n\u65e0\u8bba\u603b\u6570\u662f\u591a\u5c11\uff0c\u7597\u517b\u9662\u7ba1\u7406\u4eba\u5458\u3001\u5c45\u6c11\u6743\u76ca\u5021\u5bfc\u8005\u548c\u4eb2\u5c5e\u90fd\u8868\u793a\uff0c\u8fd9\u7ed9\u7597\u517b\u9662\u8bbe\u65bd\u5e26\u6765\u4e86\u4e00\u4e2a\u65e0\u6cd5\u8fa9\u89e3\u7684\u5927\u95ee\u9898\uff0c\u5c31\u8fde\u5dde\u957f\u5b89\u5fb7\u9c81\u00b7\u79d1\u83ab(Andrew Cuomo)--\u8be5\u653f\u7b56\u7684\u4e3b\u8981\u652f\u6301\u8005--\u4e5f\u79f0\u8fd9\u4e9b\u8bbe\u65bd\u662f\u201c\u8fd9\u79cd\u75c5\u6bd2\u7684\u6700\u4f73\u6ecb\u517b\u5730\u201d\u3002\n\u4e39\u5c3c\u5c14\u00b7\u963f\u6bd4\u5c3c(Daniel Arbeeny)\u5728\u8c08\u5230\u8fd9\u9879\u6307\u4ee4\u65f6\u8bf4\uff0c\u201c\u5982\u679c\u4ed6\u4eec\u60f3\u6740\u4eba\uff0c\u8fd9\u662f\u4efb\u4f55\u4eba\u90fd\u80fd\u505a\u51fa\u7684\u6700\u611a\u8822\u7684\u51b3\u5b9a\u3002\u201d\u8be5\u6307\u4ee4\u4fc3\u4f7f\u4ed6\u5c0688\u5c81\u7684\u7236\u4eb2\u4ece\u5e03\u9c81\u514b\u6797\u7684\u4e00\u5bb6\u7597\u517b\u9662\u62c9\u51fa\u6765\uff0c\u90a3\u91cc\u5df2\u670950\u591a\u4eba\u6b7b\u4ea1\u3002\u4ed6\u7684\u7236\u4eb2\u540e\u6765\u5728\u5bb6\u4e2d\u6b7b\u4e8e\u51a0\u72b6\u75c5\u6bd2\u3002\n\u201c\u8fd9\u4e0d\u662f\u706b\u7bad\u79d1\u5b66\uff0c\u201d\u963f\u6bd4\u5c3c\u8bf4\u3002\u201c\u6211\u4eec\u77e5\u9053\u6700\u8106\u5f31\u7684\u4eba--\u8001\u5e74\u4eba\u548c\u53d7\u5f71\u54cd\u7684\u4eba--\u4f4f\u5728\u7597\u517b\u9662\u548c\u5eb7\u590d\u4e2d\u5fc3\u3002\u201d\n\u5728\u5f97\u77e5\u7f8e\u8054\u793e\u7684\u7edf\u8ba1\u6570\u636e\u540e\uff0c\u536b\u751f\u90e8\u5468\u56db\u665a\u4e9b\u65f6\u5019\u8868\u793a\uff0c\u5b83\u201c\u4e0d\u80fd\u5bf9\u6211\u4eec\u6ca1\u6709\u673a\u4f1a\u5ba1\u67e5\u7684\u6570\u636e\u53d1\u8868\u8bc4\u8bba\uff0c\u7279\u522b\u662f\u5728\u6211\u4eec\u4ecd\u5728\u9a8c\u8bc1\u6211\u4eec\u81ea\u5df1\u5bf9\u7597\u517b\u9662\u5165\u9662\u548c\u91cd\u65b0\u5165\u9662\u6570\u636e\u7684\u5168\u9762\u8c03\u67e5\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6b63\u5728\u5e94\u5bf9\u8fd9\u573a\u5168\u7403\u5927\u6d41\u884c\u3002\u201d\n\u6c11\u4e3b\u515a\u4ebaCuomo\u4e8e5\u670810\u65e5\u63a8\u7ffb\u4e86\u8fd9\u4e00\u6307\u4ee4\uff0c\u8be5\u6307\u4ee4\u65e8\u5728\u5e2e\u52a9\u5728\u75c5\u4f8b\u6fc0\u589e\u65f6\u4e3a\u75c5\u60c5\u6700\u4e25\u91cd\u7684\u60a3\u8005\u817e\u51fa\u75c5\u5e8a\u3002\u4f46\u672c\u5468\u4ed6\u7ee7\u7eed\u4e3a\u5176\u8fa9\u62a4\uff0c\u79f0\u4ed6\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u5bfc\u81f4\u7ebd\u7ea65800\u591a\u540d\u62a4\u7406\u548c\u6210\u4eba\u62a4\u7406\u673a\u6784\u6b7b\u4ea1\u7684\u539f\u56e0-\u6bd4\u5176\u4ed6\u4efb\u4f55\u4e00\u4e2a\u5dde\u90fd\u591a-\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u5bb6\u5ead\u5e94\u8be5\u76f4\u8a00\u4e0d\u8bb3\u3002\n\u201c\u4efb\u4f55\u7597\u517b\u9662\u90fd\u53ef\u4ee5\u53ea\u8bf4\uff0c\u2018\u6211\u4e0d\u80fd\u5728\u6211\u7684\u8bbe\u65bd\u91cc\u5904\u7406COVID\u4eba\u5458\uff0c\u2019\u201d\u4ed6\u8bf4\uff0c\u5c3d\u7ba13\u670825\u65e5\u7684\u547d\u4ee4\u6ca1\u6709\u5177\u4f53\u8bf4\u660e\u5bb6\u5ead\u5982\u4f55\u62d2\u7edd\uff0c\u4ed6\u8bf4\uff0c\u201c\u4efb\u4f55\u5c45\u6c11\u90fd\u4e0d\u80fd\u4ec5\u4ec5\u56e0\u4e3a\u786e\u8ba4\u6216\u6000\u7591\u5b58\u5728\u51a0\u72b6\u75c5\u6bd2\u800c\u88ab\u62d2\u7edd\u91cd\u65b0\u5165\u9662\u6216\u8fdb\u5165(\u7597\u517b\u9662)\u201d\u3002\n\u4e00\u4e2a\u591a\u6708\u540e\uff0c\u4e5f\u5c31\u662f4\u670829\u65e5\uff0c\u536b\u751f\u7f72\u6f84\u6e05\uff0c\u5982\u679c\u5bb6\u5ead\u4e0d\u80fd\u6ee1\u8db3\u4efb\u4f55\u65b0\u5c45\u6c11\u7684\u9700\u6c42\uff0c\u5c31\u4e0d\u5e94\u8be5\u63a5\u6536\u4ed6\u4eec\uff0c\u5305\u62ec\u4e00\u4efd\u51a0\u72b6\u75c5\u6bd2\u62a4\u7406\u548c\u9884\u9632\u6807\u51c6\u7684\u6e05\u5355\u3002\n\u957f\u5c9b\u4e0a\u6709460\u4e2a\u5e8a\u4f4d\u7684\u53e4\u5c14\u6e29\u72b9\u592a\u4eba(Gurwin\u72b9\u592a\u4eba)\u57283\u6708\u521d\u4f3c\u4e4e\u5bf9\u51a0\u72b6\u75c5\u6bd2\u505a\u597d\u4e86\u5145\u5206\u7684\u51c6\u5907\uff0c\u7528\u53ef\u79fb\u52a8\u7684\u5899\u58c1\u5c01\u9501\u4e86\u8d70\u5eca\uff0c\u4e0d\u8ba9\u611f\u67d3\u8005\u611f\u67d3\u3002\u4f46\u5728\u56fd\u5bb6\u4e0b\u8fbe\u547d\u4ee4\u540e\uff0c\u4ece\u5f53\u5730\u533b\u9662\u6062\u590d\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u7684\u6d93\u6d93\u7ec6\u6d41\u53d8\u6210\u4e8658\u4eba\u7684\u6d2a\u6d41\u3002\n\u4fee\u5efa\u4e86\u66f4\u591a\u7684\u56f4\u5899\uff0c\u4f46\u5176\u4ed6\u5c45\u6c11\u4ecd\u7136\u5f00\u59cb\u751f\u75c5\u548c\u6b7b\u4ea1\u3002\u6700\u7ec8\uff0c47\u540d\u53e4\u5c14\u6e29\u5c45\u6c11\u6b7b\u4e8e\u786e\u8bca\u6216\u7591\u4f3c\u51a0\u72b6\u75c5\u6bd2\u3002\n\u9996\u5e2d\u6267\u884c\u5b98\u65af\u56fe\u5c14\u7279\u00b7\u963f\u5c14\u9ed8(Stuart Almer)\u8868\u793a\uff0c\u5dde\u653f\u5e9c\u7684\u547d\u4ee4\u201c\u5c06\u5de5\u4f5c\u4eba\u5458\u548c\u5c45\u6c11\u7f6e\u4e8e\u6781\u5927\u7684\u5371\u9669\u4e4b\u4e2d\u201d\u3002\u201c\u6211\u4eec\u4e0d\u80fd\u4ece\u5f15\u8fdb\u9633\u6027\u7684\u4eba\u5230\u611f\u67d3\u75be\u75c5\u7684\u4eba\u4e4b\u95f4\u5212\u6e05\u754c\u9650\uff0c\u4f46\u6211\u4eec\u8c08\u8bba\u7684\u662f\u5e74\u8001\u3001\u8106\u5f31\u548c\u8106\u5f31\u7684\u5c45\u6c11\u3002\u201d\n\u6025\u6027\u540e\u957f\u671f\u62a4\u7406\u533b\u5b66\u4f1a(AMDA)\u4ece\u4e00\u5f00\u59cb\u5c31\u8b66\u544a\u8bf4\uff0c\u5e93\u83ab\u6536\u5bb9\u611f\u67d3\u60a3\u8005\u7684\u547d\u4ee4\u5bf9\u7597\u517b\u9662\u5c45\u6c11\u6784\u6210\u4e86\u201c\u660e\u663e\u548c\u73b0\u5b9e\u7684\u5371\u9669\u201d\u3002\u73b0\u5728\uff0c\u5728\u8be5\u7ec4\u7ec7\u6267\u884c\u59d4\u5458\u4f1a\u4efb\u804c\u7684\u6770\u5f17\u91cc\u00b7N\u00b7\u5c3c\u79d1\u5c14\u65af(Jeffrey N.Nichols)\u8bf4\uff0c\u201c\u8fd9\u9879\u547d\u4ee4\u7684\u5f71\u54cd\u662f\u9020\u62105000\u4eba\u6b7b\u4ea1\u3002\u201d\n\u6839\u636e\u7f8e\u8054\u793e\u7684\u7edf\u8ba1\uff0c\u5728\u5168\u56fd\u8303\u56f4\u5185\uff0c\u8d85\u8fc735500\u4eba\u6b7b\u4e8e\u7597\u517b\u9662\u548c\u957f\u671f\u62a4\u7406\u8bbe\u65bd\u7684\u51a0\u72b6\u75c5\u6bd2\u7206\u53d1\uff0c\u7ea6\u5360\u603b\u6b7b\u4ea1\u4eba\u6570\u7684\u4e09\u5206\u4e4b\u4e00\u3002\n\u5e93\u9ed8\u8f6c\u79fb\u4e86\u5bf9\u7597\u517b\u9662\u6307\u4ee4\u7684\u6279\u8bc4\uff0c\u79f0\u5176\u6e90\u4e8e\u7279\u6717\u666e\u653f\u5e9c\u7684\u6307\u5bfc\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5f88\u5c11\u6709\u5dde\u50cf\u7ebd\u7ea6\u5dde\u548c\u90bb\u8fd1\u7684\u65b0\u6cfd\u897f\u5dde\u90a3\u6837\uff0c\u5728\u5c06\u4f4f\u9662\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u9001\u5f80\u7597\u517b\u9662\u65b9\u9762\u8d70\u5f97\u8fd9\u4e48\u8fdc\uff0c\u65b0\u6cfd\u897f\u5dde\u7684\u7597\u517b\u9662\u6b7b\u4ea1\u4eba\u6570\u4f4d\u5c45\u7b2c\u4e8c\u3002\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7d27\u968f\u5176\u540e\uff0c\u4f46\u5728\u53d7\u5230\u5f3a\u70c8\u6279\u8bc4\u540e\u653e\u677e\u4e86\u8981\u6c42\u3002\n\u4e00\u4e9b\u5dde\u8d70\u4e86\u76f8\u53cd\u7684\u65b9\u5411\u3002\u8def\u6613\u65af\u5b89\u90a3\u5dde\u7981\u6b62\u533b\u9662\u572830\u5929\u5185\u5c06\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u9001\u5230\u7597\u517b\u9662\uff0c\u4f46\u6709\u4e00\u4e9b\u4f8b\u5916\u3002\u867d\u7136\u8def\u6613\u65af\u5b89\u90a3\u5dde\u62a5\u544a\u7684\u4e0e\u51a0\u72b6\u75c5\u6bd2\u76f8\u5173\u7684\u7597\u517b\u9662\u6b7b\u4ea1\u4eba\u6570\u7ea6\u4e3a1000\u4eba\uff0c\u8fdc\u8fdc\u4f4e\u4e8e\u7ebd\u7ea6\uff0c\u4f46\u8fd9\u662f\u8def\u6613\u65af\u5b89\u90a3\u5dde\u5168\u5dde\u6b7b\u4ea1\u4eba\u6570\u768440%\uff0c\u9ad8\u4e8e\u7ebd\u7ea6\u3002\n\u7ebd\u7ea6\u536b\u751f\u5c405\u67088\u65e5\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u5b83\u6ca1\u6709\u8ffd\u8e2a\u6709\u591a\u5c11\u6b63\u5728\u5eb7\u590d\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u6839\u636e\u8be5\u547d\u4ee4\u88ab\u5e26\u5230\u7597\u517b\u9662\u3002\u4f46\u6b63\u662f\u5728\u90a3\u4e00\u523b\uff0c\u5c31\u8fd9\u4e2a\u95ee\u9898\u5bf9\u8be5\u5dde1150\u591a\u5bb6\u7597\u517b\u9662\u548c\u957f\u671f\u62a4\u7406\u673a\u6784\u7684\u7ba1\u7406\u4eba\u5458\u8fdb\u884c\u4e86\u8c03\u67e5\u3002\n\u8fd9\u4e9b\u8c03\u67e5\u7ed3\u679c\u5c1a\u672a\u516c\u5e03\u3002\u4f46\u4e0d\u7ba1\u600e\u6837\uff0c\u536b\u751f\u90e8\u8868\u793a\uff0c\u8fd9\u9879\u8c03\u67e5\u5bf9\u5e93\u9ed85\u670810\u65e5\u7684\u58f0\u660e\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u5373\u201c\u6211\u4eec\u53ea\u662f\u4e0d\u4f1a\u628a\u53bb\u533b\u9662\u5c31\u8bca\u540e\u5448\u9633\u6027\u7684\u4eba\u9001\u5230\u7597\u517b\u9662\u3002\u201d\nCuomo\u8bf4\uff0c\u8fd9\u6837\u7684\u60a3\u8005\u5c06\u88ab\u5b89\u7f6e\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6bd4\u5982\u6700\u521d\u8bbe\u7acb\u4e3a\u4e34\u65f6\u533b\u9662\u7684\u5730\u70b9\u3002\n\u4e13\u95e8\u5904\u7406\u7597\u517b\u9662\u6848\u4ef6\u7684\u7ebd\u7ea6\u5f8b\u5e08\u7ea6\u7ff0\u00b7\u8fbe\u5229(John Dalli)\u8bf4\uff0c\u201c\u5b83\u611f\u67d3\u4e86\u7597\u517b\u9662\u7684\u5927\u91cf\u4eba\uff0c\u4ed6\u4eec\u6ca1\u6709\u7406\u7531\u53d7\u5230\u611f\u67d3\uff0c\u5305\u62ec\u624b\u672f\u540e\u5728\u90a3\u91cc\u8fdb\u884c\u5eb7\u590d\u7684\u77ed\u671f\u5c45\u6c11\u3002\u201d\n\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u65b0\u6765\u7684\u5c45\u6c11\u5e76\u4e0d\u662f\u552f\u4e00\u53ef\u80fd\u7684\u4f20\u67d3\u6e90\u3002\u4e00\u4e9b\u5bb6\u5ead\u8ba4\u4e3a\uff0c\u66f4\u5927\u7684\u8d21\u732e\u6765\u81ea\u5de5\u4f5c\u4eba\u5458\u548c\u5c45\u6c11\uff0c\u4ed6\u4eec\u6ca1\u6709\u610f\u8bc6\u5230\u81ea\u5df1\u611f\u67d3\u4e86\u75c5\u6bd2\u3002\u4e00\u4e9b\u4eba\u8bf4\uff0c\u4ed6\u4eec\u4f1a\u63a5\u53d7\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\uff0c\u800c\u4e0d\u7ba1\u5dde\u653f\u5e9c\u7684\u547d\u4ee4\u3002\n\u83b1\u8335\u8d1d\u514b\u6c64\u666e\u68ee\u4e4b\u5bb6\u7684\u5973\u53d1\u8a00\u4eba\u838e\u62c9\u00b7\u79d1\u4f26\u5185\u6d1b(Sarah Columello)\u8bf4\uff0c\u201c\u6709\u4e9b\u7597\u517b\u9662\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u7a7a\u767d\u3002\u201d\u8fd9\u4e2a\u62e5\u6709100\u5f20\u5e8a\u4f4d\u7684\u8bbe\u65bd\u8bbe\u7acb\u4e86\u4e00\u4e2a\u9694\u79bb\u5355\u5143\uff0c\u9644\u8fd1\u7684\u9644\u5c5e\u533b\u9662\u5df2\u7ecf\u53d1\u9001\u4e86\u81f3\u5c1121\u540d\u60a3\u8005\u3002\u76ee\u524d\u8fd8\u6ca1\u6709\u6b7b\u4ea1\u62a5\u544a\u3002\n\u5e93\u9ed8\u653f\u5e9c\u5b98\u5458\u8bf4\uff0c\u6700\u521d\u7684\u6307\u4ee4\u662f\u5728\u5dde\u957f\u62c5\u5fc3\u533b\u9662\u7cfb\u7edf\u4f1a\u4e0d\u582a\u91cd\u8d1f\u65f6\u53d1\u5e03\u7684\uff0c\u5e76\u4e13\u6ce8\u4e8e\u521b\u9020\u5c3d\u53ef\u80fd\u591a\u7684\u533b\u9662\u7a7a\u95f4\u3002\n\u8fd9\u53d7\u5230\u4e86\u7f8e\u8054\u793e\u7edf\u8ba1\u7684\u4f17\u591a\u533b\u9662\u7cfb\u7edf\u548c\u7597\u517b\u9662\u4e2d\u7684\u4e00\u5bb6\u7684\u6b22\u8fce\u3002\u8bfa\u65af\u97e6\u5c14\u5065\u5eb7\u516c\u53f8\u8bf4\uff0c\u5b83\u7684\u4e09\u4e2a\u533b\u7597\u4e2d\u5fc3\u4e00\u5ea6\u8d1f\u62c5\u8fc7\u91cd\uff0c\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u628a\u4e00\u4e9bICU\u60a3\u8005\u653e\u5728\u8d70\u5eca\u91cc\u3002\u4e3a\u4e86\u7f13\u89e3\u538b\u529b\uff0c\u8be5\u516c\u53f8\u6700\u7ec8\u5c061700\u591a\u540d\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u9001\u5f80\u7597\u517b\u9662\u3002", "note_en": "NEW YORK (AP) \u2014 More than 4,500 recovering coronavirus patients were sent to New York\u2019s already vulnerable nursing homes under a controversial state directive that was ultimately scrapped amid criticisms it was accelerating the nation\u2019s deadliest outbreaks, according to a count by The Associated Press.\n AP compiled its own tally to find out how many COVID-19 patients were discharged from hospitals to nursing homes under the March 25 directive after New York\u2019s Health Department declined to release its internal survey conducted two weeks ago. It says it is still verifying data that was incomplete.\n  Whatever the full number, nursing home administrators, residents\u2019 advocates and relatives say it has added up to a big and indefensible problem for facilities that even Gov. Andrew Cuomo \u2014 the main proponent of the policy \u2014 called \u201cthe optimum feeding ground for this virus.\u201d\n  \u201cIt was the single dumbest decision anyone could make if they wanted to kill people,\u201d Daniel Arbeeny said of the directive, which prompted him to pull his 88-year-old father out of a Brooklyn nursing home where more than 50 people have died. His father later died of COVID-19 at home.\n \u201cThis isn\u2019t rocket science,\u201d Arbeeny said. \u201cWe knew the most vulnerable -- the elderly and compromised -- are in nursing homes and rehab centers.\u201d\n Told of the AP\u2019s tally, the Health Department said late Thursday it \u201ccan\u2019t comment on data we haven\u2019t had a chance to review, particularly while we\u2019re still validating our own comprehensive survey of nursing homes admission and re-admission data in the middle of responding to this global pandemic.\u201d\n Cuomo, a Democrat, on May 10 reversed the directive, which had been intended to help free up hospital beds for the sickest patients as cases surged. But he continued to defend it this week, saying he didn\u2019t believe it contributed to the more than 5,800 nursing and adult care facility deaths in New York \u2014 more than in any other state \u2014 and that homes should have spoken up if it was a problem.\n \u201cAny nursing home could just say, \u2018I can\u2019t handle a COVID person in my facility,\u2019\u201d he said, although the March 25 order didn\u2019t specify how homes could refuse, saying that \u201dno resident shall be denied re-admission or admission to the (nursing home) solely based\u201d on confirmed or suspected COVID-19.\n Over a month later, on April 29, the Health Department clarified that homes should not take any new residents if they were unable to meet their needs, including a checklist of standards for coronavirus care and prevention.\n    Gurwin Jewish, a 460-bed home on Long Island, seemed well-prepared for the coronavirus in early March, with movable walls to seal off hallways for the infected. But after the state order, a trickle of recovering COVID-19 patients from local hospitals turned into a flood of 58 people.\n More walls were put up, but other residents nonetheless began falling sick and dying. In the end, 47 Gurwin residents died of confirmed or suspected COVID-19.\n  The state order \u201cput staff and residents at great risk,\u201d CEO Stuart Almer said. \u201cWe can\u2019t draw a straight line from bringing in someone positive to someone catching the disease, but we\u2019re talking about elderly, fragile and vulnerable residents.\u201d\n The Society for Post-Acute and Long-Term Care Medicine, known as AMDA, had warned from the beginning that Cuomo\u2019s order admitting infected patients posed a \u201cclear and present danger\u201d to nursing home residents. Now, Jeffrey N. Nichols, who serves on the executive committee of the group, said \u201cthe effect of that order was to contribute to 5,000 deaths.\u201d\n Nationally, over 35,500 people have died from coronavirus outbreaks at nursing homes and long-term care facilities, about a third of the overall death toll, according to the AP\u2019s running tally.\n  Cuomo has deflected criticism over the nursing home directive by saying it stemmed from Trump administration guidance. Still, few states went as far as New York and neighboring New Jersey, which has the second-most care home deaths, in discharging hospitalized coronavirus patients to nursing homes. California followed suit but loosened its requirement following intense criticism.\n Some states went in the opposite direction. Louisiana barred hospitals for 30 days from sending coronavirus patients to nursing homes with some exceptions. And while Louisiana reported about 1,000 coronavirus-related nursing home deaths, far fewer than New York, that was 40% of Louisiana\u2019s statewide death toll, a higher proportion than in New York.\n New York\u2019s Health Department told the AP May 8 it was not tracking how many recovering COVID-19 patients were taken into nursing homes under the order. But it was at that very moment surveying administrators of the state\u2019s over 1,150 nursing homes and long-term care facilities on just that question.\n Those survey results have yet to be released. But regardless, the Health Department said, the survey had no bearing on Cuomo\u2019s announcement May 10 that \u201cwe\u2019re just not going to send a person who is positive to a nursing home after a hospital visit.\u201d\n Cuomo said such patients would be accommodated elsewhere, such as sites originally set up as temporary hospitals.\n  \u201cIt infected a great number of people in nursing homes who had no business getting infected, including short-term residents who were there for rehabilitation after surgeries,\u201d said John Dalli, a New York attorney who specializes in nursing home cases.\n  To be sure, incoming residents weren\u2019t the only possible source of infection. Some homes believe a bigger contribution came from staffers and residents unaware they had the virus. And some say they would have taken on COVID-19 patients regardless of the state\u2019s order.\n \u201cThere were nursing homes that realized that there was a void,\u201d said Sarah Colomello, a spokeswoman for Thompson House in Rhinebeck. The 100-bed facility set up an isolated unit where affiliated hospitals nearby have sent at least 21 patients. It has reported no deaths.\n Cuomo administration officials say the original directive came when the governor feared the hospital system would be overwhelmed and was focused on creating as much hospital space as possible.\n That was welcomed by one of the many hospital systems and nursing homes surveyed for AP\u2019s count. Northwell Health said three of its medical centers were so overtaxed at one point they had to put some ICU patients in hallways. To relieve pressure, the company eventually sent more than 1,700 COVID-19 patients to nursing homes.", "posttime": "2020-05-25 07:14:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,\u8ba1\u6570,patients,\u7597\u517b\u9662", "title": "\u7f8e\u8054\u793e\u8ba1\u6570\uff1a\u8d85\u8fc74500\u540d\u75c5\u6bd2\u60a3\u8005\u88ab\u9001\u5f80\u7ebd\u7ea6\u7597\u517b\u9662", "title_en": "AP count: Over 4,500 virus patients sent to NY nursing homes", "transed": 1, "url": "https://apnews.com/5ebc0ad45b73a899efa81f098330204c", "via": "", "real_tags": ["\u75c5\u6bd2", "\u8ba1\u6570", "patients", "\u7597\u517b\u9662"]}, {"category": "", "categoryclass": "", "imagename": "3bc0f90fa18d29ea0d256f37e54d6b20.jpeg", "infoid": 1003574, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56fd\u9645\u7a7a\u95f4\u7ad9\u7684\u4e00\u4e2a\u8f83\u957f\u7684\u7ae0\u8282\u5df2\u7ecf\u7ed3\u675f\u3002\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5df2\u7ecf\u5c06\u517611\u4e2a\u5feb\u9012(\u52a0\u5feb\u5411\u7a7a\u95f4\u7ad9\u5904\u7406\u5b9e\u9a8c)\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u9001\u5230\u4e86\u8f68\u9053\u8bbe\u65bd\uff0c\u8fd9\u662f\u5728\u53d1\u9001\u524d\u4e24\u4e2a\u5feb\u901219\u5e74\u540e\u3002\u5b83\u4eec\u770b\u8d77\u6765\u4e0d\u591a\uff0c\u4f46\u5b83\u4eec\u4e3a\u591a\u8fbe10\u4e2a\u5c0f\u578b\u6709\u6548\u8f7d\u8377\u63d0\u4f9b\u7535\u529b\u3001\u5b58\u50a8\u3001\u6c14\u5019\u63a7\u5236\u548c\u901a\u4fe1-\u5b83\u4eec\u662f\u56fd\u9645\u7a7a\u95f4\u7ad9\u4e0a\u8fd0\u884c\u7684\u8bb8\u591a\u5b9e\u9a8c\u7684\u5173\u952e\uff0c\u5c06\u5e2e\u52a9\u7a7a\u95f4\u7ad9\u53d1\u6325\u5176\u6f5c\u5728\u7684\u7814\u7a76\u80fd\u529b\u3002\n\u8fd9\u6700\u540e\u4e00\u4e2a\u673a\u67b6\u662f\u7531\u4e00\u8258\u65e5\u672c\u8d27\u8239\u643a\u5e26\u7684\uff0c\u5e94\u8be5\u57282020\u5e74\u79cb\u5b63\u4e4b\u524d\u5b89\u88c5\u597d\u5e76\u6295\u5165\u4f7f\u7528\u3002\n\u867d\u7136\u5feb\u9012\u67b6\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u5e94\u8be5\u662f\u6709\u7528\u7684\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u6807\u5fd7\u7740\u7f8e\u56fd\u5b87\u822a\u5c40\u56fd\u9645\u7a7a\u95f4\u7ad9\u5de5\u4f5c\u7684\u4e00\u4e2a\u65f6\u4ee3\u7684\u7ed3\u675f\uff0c\u8fd9\u4e00\u5de5\u4f5c\u59cb\u4e8e\u822a\u5929\u98de\u673a\u7684\u5168\u76db\u65f6\u671f\u3002\u8be5\u673a\u6784\u8ba1\u5212\u5c06\u91cd\u70b9\u66f4\u591a\u5730\u8f6c\u79fb\u5230\u201c\u963f\u8033\u7279\u5f25\u65af\u4e00\u4ee3\u201d\u9879\u76ee\u4e0a\uff0c\u8fd9\u4e9b\u9879\u76ee\u5c06\u6709\u52a9\u4e8e\u592a\u9633\u7cfb\u7684\u63a2\u7d22\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u4e00\u79d1\u5b66\u9635\u5217\u7684\u5b8c\u6210\u6807\u5fd7\u7740\u4e00\u4e2a\u66f4\u96c4\u5fc3\u52c3\u52c3\u7684\u9636\u6bb5\u7684\u5f00\u59cb\u3002", "note_en": "One of the longer chapters of the International Space Station has come to a close. NASA  has sent the last of its 11 ExPRESS (Expedite the Processing of Experiments to the Space Station) science racks to the orbiting facility, 19 years after sending the first two. They don\u2019t look like much, but they provide the power, storage, climate control and communications for up to 10 small payloads \u2014 they\u2019re key to many of the experiments that run aboard the ISS and will help the station live up to its potential research capabilities.\n This last rack was carried aboard a Japanese cargo ship and should be installed and functioning by fall 2020.\n  While the EXPRESS racks should be useful for a while yet, this effectively marks the end of an era for NASA\u2019s ISS work, which began during the  Space Shuttle\u2019s heyday. The agency plans to shift its focus more to \u201c Artemis-generation\u201d projects that will help with exploration of the Solar System. In that light, the completion of this science array marks the start of a more ambitious phase.", "posttime": "2020-05-25 06:59:39", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "nasa,\u56fd\u9645,iss,\u7a7a\u95f4\u7ad9", "title": "19\u5e74\u540e\uff0c\u56fd\u9645\u7a7a\u95f4\u7ad9\u6536\u5230\u4e86\u6700\u540e\u4e00\u4e2aNASA\u79d1\u5b66\u67b6", "title_en": "After 19 Years, the ISS Receives Its Very Last NASA Science Rack", "transed": 1, "url": "https://www.engadget.com/iss-receives-last-nasa-science-rack-194934307.html", "via": "", "real_tags": ["nasa", "\u56fd\u9645", "iss", "\u7a7a\u95f4\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "6f16f00828eb1b4c1d2c0a04e1f3789b.jpg", "infoid": 1003573, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8d39\u7c73-\u72c4\u62c9\u514b\u7edf\u8ba1\u5b66\u6700\u8457\u540d\u7684\u8868\u73b0\u662f\u6ce1\u5229\u4e0d\u76f8\u5bb9\u539f\u7406\uff1a\u6ca1\u6709\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u53ef\u4ee5\u5360\u636e\u76f8\u540c\u7684\u5355\u7c92\u5b50\u6001\u3002\u8fd9\u4e00\u539f\u7406\u5728\u8bb8\u591a\u5b8c\u5168\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u7cfb\u7edf\u4e2d\u5b9e\u65bd\u9ad8\u9636\u5173\u8054\uff0c\u5373\u4f7f\u5728\u6240\u6709\u76f8\u4e92\u4f5c\u7528\u90fd\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e5f\u662f\u6355\u83b7\u7c92\u5b50\u7684\u7279\u6b8a\u51e0\u4f55\u6392\u5217\u7684\u539f\u56e0\u3002\u8fd9\u4e9b\u51e0\u4f55\u7ed3\u6784\u88ab\u79f0\u4e3a\u6ce1\u5229\u6676\u4f53\uff0c\u9884\u6d4b\u4e86\u56da\u7981\u5728\u8c10\u52bf\u4e2d\u7684N\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u539f\u5b50\u7cfb\u7edf\u3002\u5728\u7cfb\u7edf\u7684\u5355\u6b21\u62cd\u6444\u56fe\u7247\u96c6\u5408\u4e2d\uff0c\u5b83\u4eec\u662f\u6700\u5e38\u89c1\u7684\u914d\u7f6e\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u7814\u7a76\u5f53\u8003\u8651\u5230\u73b0\u5b9e\u7684\u5b9e\u9a8c\u9650\u5236\u65f6\uff0c\u6ce1\u5229\u6676\u4f53\u7684\u6613\u788e\u6027\u3002\u8003\u8651\u4e86\u53ef\u4f9b\u5206\u6790\u7684\u5355\u955c\u5934\u6570\u3001\u70ed\u8d77\u4f0f\u548c\u68c0\u6d4b\u6548\u7387\u6709\u9650\u7b49\u56e0\u7d20\u7684\u5f71\u54cd\u3002\u7ed9\u51fa\u4e86\u8fd9\u4e9b\u566a\u58f0\u6e90\u5bf9\u6ce1\u5229\u6676\u4f53\u5b9e\u9a8c\u89c2\u6d4b\u53ef\u80fd\u6027\u7684\u5f71\u54cd\uff0c\u5e76\u786e\u5b9a\u4e86\u63a2\u6d4b\u7c92\u5b50\u51e0\u4f55\u6392\u5217\u7684\u5fc5\u8981\u6761\u4ef6\u3002\n\u8d85\u51b7\u539f\u5b50\u4e0d\u4ec5\u4e3a\u6a21\u62df\u5404\u79cd\u591a\u4f53\u91cf\u5b50\u7cfb\u7edf1\u30012\u30013\u30014\u30015\u30016\u63d0\u4f9b\u4e86\u7406\u60f3\u7684\u64cd\u573a\uff0c\u4e5f\u4e3a\u7814\u7a76\u5c11\u4f53\u7269\u7406\u63d0\u4f9b\u4e86\u7406\u60f3\u7684\u5e73\u53f0\u30027.\u5728\u8d85\u51b7\u539f\u5b50\u63a7\u5236\u548c\u76d1\u6d4b\u65b9\u9762\u53d6\u5f97\u4e86\u524d\u6240\u672a\u6709\u7684\u8fdb\u5c55\uff0c\u5f00\u8f9f\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u53ef\u80fd\u6027\u4e16\u754c\u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5355\u4f4d\u5bfb\u5740\u6280\u672f8\uff0c\u53ef\u4ee5\u5728\u6676\u683c\u7cfb\u7edf\u7684Mott\u7edd\u7f18\u76f8\u4e2d\u83b7\u5f97\u539f\u5b50\u6570\u6da8\u843d\u5f97\u5230\u5145\u5206\u6291\u5236\u7684\u53d7\u63a7\u5c11\u4f53\u7cfb\u7edf\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u5728\u5355\u4e2a\u5fae\u96319\u300110\u4e2d\u786e\u5b9a\u6027\u5730\u5236\u5907\u5c11\u4f53\u7cfb\u7edf\u3002\u53ef\u4ee5\u5728\u5b9a\u4e49\u826f\u597d\u7684\u9ad8\u4fdd\u771f\u91cf\u5b50\u6001\u4e2d\u5236\u59071-10\u4e2a\u8d39\u7c73\u5b50\u539f\u5b50\u7684\u5c0f\u7cfb\u7edf\u3002\n\u6700\u8fd1\u53d1\u5c55\u8d77\u6765\u7684\u5355\u70b9\u8367\u5149\u6210\u50cf\u6280\u672f\u662f\u76d1\u6d4b\u591a\u4f53\u7cfb\u7edf11\uff0c12\uff0c13\uff0c14\uff0c15\uff0c16\uff0c17\uff0c18\u7684\u91cd\u5927\u7a81\u7834\u3002\u8fd9\u9879\u4f1f\u5927\u7684\u6210\u50cf\u6280\u672f\u53ef\u4ee5\u540c\u65f6\u786e\u5b9a\u6240\u6709\u5355\u4e2a\u539f\u5b50\u5728\u5355\u70b9\u5206\u8fa8\u738712\uff0c13\u7684\u5149\u5b66\u6676\u683c\u4e2d\u7684\u4f4d\u7f6e\u3002\u5355\u4e2a\u5b64\u7acb\u9677\u9631\u5185\u7684\u539f\u5b50\u7cfb\u7efc\u7684\u5feb\u7167\u53ef\u80fd\u5305\u542b\u8bb8\u591a\u5173\u4e8e\u8be5\u7cfb\u7edf\u7684\u5173\u952e\u4fe1\u606f\u3002\u5728\u8fd9\u65b9\u9762\u975e\u5e38\u91cd\u8981\u7684\u662f\u9ad8\u9636\u7a7a\u95f4\u5173\u8054\uff0c\u8fd9\u5bf9\u4e8e\u5355\u7c92\u5b50\u63a2\u6d4b\u6765\u8bf4\u662f\u96be\u4ee5\u6349\u6478\u7684\uff0c\u4f46\u53ef\u4ee5\u4eceN\u4f53\u6982\u7387\u5bc6\u5ea619\u300120\u300121\u300122\u4e2d\u63ed\u793a\u51fa\u6765\u3002\u6700\u597d\u7684\u4f8b\u5b50\u4e4b\u4e00\u662f\u6700\u8fd1\u7684\u5b9e\u9a8c22\uff0c\u5728\u5b9e\u9a8c22\u4e2d\uff0c\u901a\u8fc7\u6bd4\u8f83\u7cfb\u7edf\u7684\u8bb8\u591a\u5355\u955c\u5934\u56fe\u50cf\uff0c\u663e\u793a\u4e86\u5728\u73bb\u8272-\u7231\u56e0\u65af\u5766\u51dd\u805a\u4e2d\u521b\u5efa\u7684\u91cc\u5fb7\u5821\u591a\u4f53\u7cfb\u7edf\u4e2d\u81ea\u53d1\u81ea\u7ec4\u7ec7\u6709\u5e8f\u7684\u68c0\u6d4b\u3002\n\u5b9e\u9a8c\u8fdb\u5c55\u6311\u6218\u7406\u8bba\u3002\u7528\u5355\u7c92\u5b50\u5206\u8fa8\u7387\u89c2\u6d4b\u7684\u91cf\u5b50\u591a\u4f53\u7cfb\u7edf\u5f15\u8d77\u4e86\u7269\u7406\u5b66\u5bb6\u7684\u5174\u8da3\uff0c\u56e0\u4e3a\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e0d\u4ec5\u6700\u5e38\u89c1\u7684\u5355\u4f53\u6d4b\u91cf\uff0c\u800c\u4e14\u4e24\u70b9\u5173\u8054\u4e5f\u4e0d\u80fd\u83b7\u5f97\u7684\u4fe1\u606f\u3002\u7406\u89e3\u9700\u8981\u63cf\u8ff0\u8d85\u8d8a\u4e24\u70b9\u76f8\u5173\u6027\u7684\u8fc7\u7a0b\u7684\u4f8b\u5b50\u76f8\u5f53\u591a\u3002\u5b83\u4eec\u5305\u62ec\u4f8b\u5982\u79cd\u5b50\u7eb823\uff0c\u5176\u4e2d\u793a\u51fa\u4e86\u5728N\u4f53\u68c0\u6d4b\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u5e72\u6d89\u6761\u7eb9\u3002\u76f8\u53cd\uff0c\u5728\u4e00\u4f53\u56fe\u50cf\u4e2d\u770b\u4e0d\u5230\u5e72\u6270\u3002\u7c7b\u4f3c\u5730\uff0c\u5b64\u5b50\u51fa\u73b0\u5728\u4e00\u7ef4\u73bb\u8272\u5b50\u7cfb\u7edf\u7684\u7b2c\u4e8c\u7c7b\u6fc0\u53d1\u6001\u4e2d\uff0c\u8be5\u7cfb\u7edf\u901a\u8fc7\u7531Lieb-Liniger\u6a21\u578b24\u63cf\u8ff0\u7684\u77ed\u7a0b\u52bf\u76f8\u4e92\u4f5c\u7528\u3002\u8fd9\u4e9b\u5b64\u5b50\u662f\u7531\u4e8e\u7cfb\u7edf\u4e2d\u7684\u9ad8\u9636\u5173\u8054\u800c\u51fa\u73b0\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5355\u6b21\u63a2\u6d4b\u591a\u4e2a\u539f\u5b50\u65f6\u88ab\u53d1\u73b0\u300225\u4e2d\u7684\u5de5\u4f5c\u6f14\u793a\u4e86\u5982\u4f55\u57fa\u4e8e\u591a\u4f53\u859b\u5b9a\u8c14\u65b9\u7a0b\u7684\u6570\u503c\u89e3\u6765\u6a21\u62df\u4e00\u822c\u8d85\u51b7\u73bb\u8272\u5b50\u7cfb\u7edf\u7684\u5355\u70ae\u5b9e\u9a8c\u3002\u5bf9\u76d1\u6d4b\u591a\u4f53\u52a8\u529b\u5b66\u7684\u968f\u65f6\u95f4\u53d8\u5316\u7684\u5355\u6b21\u56fe\u50cf\u8fdb\u884c\u4e86\u6a21\u62df\uff0c\u63ed\u793a\u4e86\u6709\u5438\u5f15\u529b\u7684BEC\u4e2d\u7684\u8109\u52a8\u6da1\u65cb\u7684\u51fa\u73b0\uff0c\u63d0\u51fa\u4e8626\u6761\u5efa\u8bae\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u7814\u7a76\u4e86\u5c11\u4f53\u7cfb\u7edf\u4e2d\u7684\u53e6\u4e00\u4e2a\u9ad8\u9636\u5173\u8054\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u611f\u5174\u8da3\u7684\u5173\u8054\u5b8c\u5168\u662f\u7531\u4e8e\u91cf\u5b50\u7edf\u8ba1\u548c\u4e0d\u53ef\u533a\u5206\u6027\u3002\u5168\u540c\u7c92\u5b50\u7684\u4e0d\u53ef\u533a\u5206\u6027\u8d28\u5bfc\u81f4\u4e86\u91cf\u5b50\u7269\u7406\u5b66\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u7ed3\u679c\u3002\u5373\u4f7f\u5728\u6ca1\u6709\u4efb\u4f55\u76f8\u4e92\u4f5c\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e5f\u4f1a\u56fa\u6709\u5730\u5f3a\u52a0\u7c92\u5b50\u4e4b\u95f4\u7684\u5173\u8054\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f53\u8bb8\u591a\u96f6\u6e29\u7684\u5b8c\u5168\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u88ab\u56f0\u5728\u5916\u90e8\u7684\u4e8c\u7ef4\u8c10\u6ce2\u9677\u9631\u4e2d\u65f6\uff0c\u8fd9\u4e9b\u7c92\u5b50\u4f1a\u4ee5\u4e00\u79cd\u60ca\u4eba\u7684\u65b9\u5f0f\u81ea\u6211\u5b9a\u5411\uff0c\u63ed\u793a\u51fa\u7279\u5b9a\u7684\u51e0\u4f55\u7ed3\u6784\uff0c\u5373\u6ce1\u5229\u6676\u4f53\u3002\u6211\u4eec\u6700\u8fd1\u5c55\u793a\u4e86\u5982\u4f55\u4ece\u591a\u4f53\u7cfb\u7edf27\u7684\u591a\u5f20\u5355\u955c\u5934\u56fe\u50cf\u4e2d\u63d0\u53d6\u8fd9\u4e9b\u51e0\u4f55\u7ed3\u6784\u3002\u901a\u8fc7\u5bf9\u5927\u91cf\u6570\u636e\u7684\u9002\u5f53\u5206\u6790\uff0c\u7ed9\u51fa\u4e86\u6e05\u6670\u3001\u6beb\u4e0d\u542b\u7cca\u7684\u6ce1\u5229\u6676\u4f53\u56fe\u50cf\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u89c2\u6d4b\u5230\u7684\u56fe\u50cf\u53d7\u5230\u5404\u79cd\u5b9e\u9a8c\u7f3a\u9677\u7684\u5f71\u54cd\u6709\u591a\u5927\uff0c\u4ee5\u53ca\u6ce1\u5229\u6676\u4f53\u7684\u5b58\u5728\u662f\u5426\u80fd\u5f97\u5230\u5b9e\u9a8c\u8bc1\u5b9e\u3002\u6700\u8fd1\u7c7b\u4f3c\u7684\u6ce1\u5229\u7ed3\u6784\n\u5176\u4e2d\\({{\\mathcal H}}_{n}\\)\u662f\\({n}^{th}\\)Hermite\u591a\u9879\u5f0f\uff0c\\({\\mathscr{N}}={{\\mathrm{(2}}^{n+m}n\uff01m\uff01\\sqrt{\\pi})}^{1/2}\\)\u662f\u5f52\u4e00\u5316\u5e38\u6570\u3002\u91cf\u5b50\u6570n\u548cm\u5206\u522b\u679a\u4e3ex\u548cy\u65b9\u5411\u7684\u6fc0\u53d1\u3002\u6211\u4eec\u4f7f\u7528\u81ea\u7136\u8c10\u632f\u5b50\u5355\u4f4d\\({a}_{0}=\\sqrt{\\hslash/M\\omega}\\)\uff0c\u5176\u4e2dM\u662f\u7c92\u5b50\u7684\u8d28\u91cf\u3002\u4e0e\u91cf\u5b50\u6001\\({\\psi}_{Mn}\\)\u76f8\u5bf9\u5e94\u7684\u5355\u7c92\u5b50\u80fd\u91cf\u4e3a\\({E}_{Mn}=(m+n+\\mathm{1)}\\hslash\\omega\\)\uff0c\u6bcf\u4e2a\u80fd\u7ea7\u90fd\u662f\\((m+n+\\mathm{1)})\u500d\u7b80\u5e76\u7684\u3002\n\u5728N\u4f53\u57fa\u6001\u4e0b\uff0c\u6240\u6709\u76f8\u540c\u7684\u8d39\u7c73\u5b50\u539f\u5b50\u5360\u636e\u6700\u4f4e\u7684\u53ef\u7528\u5355\u7c92\u5b50\u91cf\u5b50\u6001\uff0c\u76f4\u5230\u8d39\u7c73\u80fd\u91cf\u3002\u8fd9\u662f\u7531\u4e8e\u6ce1\u5229\u4e0d\u76f8\u5bb9\u539f\u7406\uff0c\u8be5\u539f\u7406\u7981\u6b62\u5b83\u4eec\u5360\u636e\u76f8\u540c\u7684\u91cf\u5b50\u6001\u3002\u5982\u679c\u8d39\u7c73\u80fd\u7ea7\u7684\u72b6\u6001\u6570\u8d85\u8fc7\u5fc5\u987b\u4f4d\u4e8e\u90a3\u91cc\u7684\u7c92\u5b50\u6570\uff0c\u5219\u57fa\u6001\u4e0d\u662f\u552f\u4e00\u5b9a\u4e49\u7684\u3002\u7136\u800c\uff0c\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u5f53N\u2009=\u20091\u30013\u30016\u300110\u300115\u3001\u2026\u3002\uff0c\u76f8\u5e94\u7cfb\u7edf\u7684\u591a\u4f53\u57fa\u6001\u662f\u975e\u7b80\u5e76\u7684\u3002\u663e\u7136\uff0c\u6ce1\u5229\u6676\u4f53\u7684\u51e0\u4f55\u5f62\u72b6\u662f\u7ed9\u5b9a\u72b6\u6001\u7684\u7279\u5f81\u3002\u5982\u679c\u80fd\u91cf\u6ca1\u6709\u552f\u4e00\u5730\u89c4\u5b9a\u72b6\u6001\uff0c\u6211\u4eec\u5c31\u4f1a\u6709\u5404\u79cd\u4e0d\u540c\u7684\u72b6\u6001\u548c\u51e0\u4f55\u6784\u578b\u5bf9\u5e94\u4e8e\u7ed9\u5b9a\u7684\u80fd\u91cf\u3002\u975e\u96f6\u6e29\u5ea6\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u6240\u6709\u76f8\u540c\u80fd\u91cf\u7684\u72b6\u6001\u5bf9\u70ed\u5bc6\u5ea6\u77e9\u9635\u7684\u8d21\u732e\u662f\u76f8\u7b49\u7684\u3002\u8fd9\u91cc\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u9650\u4e8e\u5404\u5411\u540c\u6027\u9677\u9631\u548c\u5b8c\u5168\u5360\u636e\u7684\u8d39\u7c73\u9762\u3002\n\u57fa\u6001\u80fd\u91cf\u662f\u5360\u636e\u6001\u7684\u5355\u7c92\u5b50\u80fd\u91cf\u4e4b\u548c\uff0c\\({{\\mathcal E}}_{0}^{N}/\\hslash\\omega={\\sum}_{i}^{N}({m}_{i}+{n}_{i}+\\mathm{1)})\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u591a\u4f53\u57fa\u6001\u6ce2\u51fd\u6570\\({{\\rm{\\psi}_{0q}^{N}({{\\bf{r}_{1}\uff0c{{\\bf{r}_{2}\uff0c\\ldots\uff0c{{\\bf{r}_{N})\u4e0e\u5355\u7c92\u5b50\u8f68\u9053\u76f8\u5173\u8054\u7684\u4efb\u4f55\u4e24\u7ec4\u7ed9\u5b9a\u7684\\(({m}_{i}\uff0c{n}_{i})\\)\u4e0d\u53ef\u80fd\u76f8\u540c\uff0c\u56e0\u4e3a\u591a\u4f53\u57fa\u6001\u6ce2\u51fd\u6570\\({{\\rm{\\psi}})_{0q}^{N}({{\\bf{r}_{N}\u901a\u8fc7\u65af\u83b1\u7279\u884c\u5217\u5f0f\uff0c\u5360\u636e\u7684\u5355\u7c92\u5b50\u6001\u3002({{\\Rm{\\Psi}{0q}^{N}\\)\u4e2d\u7684\u4e0b\u6807\\(q\\)\u89e3\u91ca\u4e86N\u4f53\u57fa\u6001\u7684\u7b80\u5e76\u3002\u5f53\u7cfb\u7edf\u5904\u4e8e\u57fa\u6001\u65f6\uff0c\\({{\\mathscr{P}_{q}^{N}\\)\u5728\\({{\\bf{r}_{1}\uff0c{{\\bf{r}_{2}\uff0c\\ldots\uff0c{{\\bf{r}_{N})\\)\u53d1\u73b0\u7c92\u5b50\u7684\u6982\u7387\u4e3a\uff1a\n\u6700\u5927\\({{\\mathscr{P}_{q}^{N}\\)\uff0c\u5f0f\u3002(2)\uff0c\u5bb9\u6613\u83b7\u5f97\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8499\u7279\u5361\u7f57\u7b97\u6cd531\u627e\u5230\u5b83\uff0c\u5176\u4e2d\uff0c\u4ece\u968f\u673a\u9009\u62e9\u7684\u521d\u59cb\u6784\u578b\u5f00\u59cb\uff0c\u901a\u8fc7\u79fb\u4f4d\u539f\u5b50\u4f4d\u7f6e\u6765\u63d0\u51fa\u53e6\u4e00\u6784\u578b\u3002\u5982\u679c\u914d\u7f6e\u6bd4\u524d\u4e00\u4e2a\u914d\u7f6e\u66f4\u6709\u53ef\u80fd\uff0c\u5219\u63a5\u53d7\u79fb\u52a8\u3002\n\u7ed3\u679c\u8868\u660e\uff0c\u6b63\u598227\u4e2d\u6240\u793a\uff0c\u539f\u5b50\u7684\u6700\u53ef\u80fd\u6392\u5217\u5728\u96f6\u6e29\u5ea6\u4e0b\u8868\u73b0\u51fa\u72ec\u7279\u7684\u51e0\u4f55\u7ed3\u6784\u3002N\u2009=\u20093\u30016\u300110\u548c15\u7684\u8fd9\u4e9b\u6784\u578b\u5982\u56fe1\u6240\u793a\u3002\u4e09\u4e2a\u539f\u5b50\u5728\u4e00\u4e2a\u7b49\u8fb9\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u4e0a\u5b9a\u5411\u3002\u5728N\u2009=\u20096\u4e2d\u89c2\u5bdf\u5230\u4e00\u79cd\u53cc\u58f3\u5c42\u7ed3\u6784\uff0c\u5176\u4e2d\u4e00\u4e2a\u539f\u5b50\u4f4d\u4e8e\u9677\u9631\u4e2d\u5fc3\uff0c\u4ee3\u8868\u7b2c\u4e00\u4e2a(\u6700\u5185\u5c42)\u7684\u58f3\u5c42\uff0c\u7b2c\u4e8c\u4e2a\u58f3\u5c42\u7531\u4e94\u4e2a\u539f\u5b50\u6392\u5217\u5728\u4e00\u4e2a\u4e94\u8fb9\u5f62\u4e2d\u5f62\u6210\u3002N\u2009=\u200910\u6784\u578b\u5448\u73b0\u51fa\u53cc\u58f3\u7ed3\u6784\uff0c\u5206\u522b\u5177\u6709\u4e09\u89d2\u5f62\u548c\u4e03\u89d2\u5f62\uff0c\u5f62\u6210\u5185\u58f3\u548c\u5916\u58f3\u3002\u5bf9\u4e8eN\u2009=\u200915\u4e2a\u539f\u5b50\uff0c\u51fa\u73b0\u4e86\u7b2c\u4e09\u4e2a\u58f3\u5c42\uff0c\u5176\u4e2d\u4e00\u4e2a\u539f\u5b50\u5360\u636e\u9677\u9631\u4e2d\u5fc3\uff0c\u76f8\u7b49\u95f4\u8ddd\u76845\u4e2a\u548c9\u4e2a\u539f\u5b50\u5f62\u6210\u7b2c\u4e8c\u4e2a\u58f3\u5c42\uff0c\u7b2c\u4e09\u4e2a(\u6700\u5916\u9762\u7684)\u58f3\u5c42\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u58f3\u4f53\u7684\u76f8\u5bf9\u65b9\u5411\u76f8\u5bf9\u4e8e\u5f7c\u6b64\u662f\u521a\u6027\u7684\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u7ed3\u6784\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u90fd\u53ef\u4ee5\u65cb\u8f6c\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\\({{\\mathscr{P}_{Q}^{N}\\)\u7684\u503c\u3002\n\u4e8c\u7ef4\u8c10\u632f\u9631\u4e2d\u76f8\u540c\u8d39\u7c73\u5b50\u5f62\u6210\u7684\u6676\u4f53\u7ed3\u6784\u3002\u84dd\u70b9\u8868\u793a\u901a\u8fc7\u6700\u5927\u5316(A)3\u4e2a\u539f\u5b50\u3001(D)6\u4e2a\u539f\u5b50\u3001(E)10\u4e2a\u539f\u5b50\u548c(F)15\u4e2a\u539f\u5b50\u7684N\u7c92\u5b50\u6982\u7387\u800c\u83b7\u5f97\u7684\u6700\u53ef\u80fd\u7684\u6784\u578b\u3002\u9ed1\u8272\u865a\u7ebf\u3001\u7ea2\u8272\u865a\u7ebf\u548c\u7eff\u8272\u5b9e\u5fc3\u5706\u5206\u522b\u8868\u793a\u7b2c\u4e00\u4e2a\u58f3(\u6700\u91cc\u9762)\u3001\u7b2c\u4e8c\u4e2a\u58f3\u548c\u7b2c\u4e09\u4e2a\u58f3\u3002\u5f53\u7b2c\u4e00\u4e2a\u58f3\u5c42\u7531\u5b58\u5728\u4e8e\u4e2d\u5fc3\u7684\u5355\u4e2a\u539f\u5b50\u7ec4\u6210\u65f6\uff0c\u5b83\u4f1a\u7f29\u5c0f\u5230\u4e00\u4e2a\u70b9\u3002\n\u6211\u4eec\u5047\u8bbe\u5360\u636e\u8c10\u6ce2\u9677\u9631\u7684\u539f\u5b50\u7684\u4f4d\u7f6e\u53ef\u4ee5\u9ad8\u5206\u8fa8\u7387\u5730\u786e\u5b9a\uff0c\u6bd4\u5b83\u4eec\u4e4b\u95f4\u7684\u95f4\u9694\u5927\uff0c\u5b83\u4eec\u7684\u95f4\u9694\u662f\u632f\u5b50\u5355\u4f4d\u957f\u5ea6\u7684\u6570\u91cf\u7ea7\u3002\u8fd9\u4e2a\u5047\u8bbe\u5728\u8fd9\u4e2a\u65f6\u5019\u662f\u76f8\u5f53\u4e50\u89c2\u7684\u3002\u76ee\u524d\uff0c\u539f\u5b50\u8367\u5149\u663e\u5fae\u955c\u7684\u5206\u8fa8\u7387\u9ad8\u4e8e\u6676\u683c\u95f4\u8ddd\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u4f4d\u7f6e\u7684\u539f\u5b50\u3002\u7136\u800c\uff0c\u8981\u89e3\u51b3\u9a7b\u7559\u5728\u540c\u4e00\u5730\u70b9\u7684\u539f\u5b50\u7684\u4f4d\u7f6e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u539f\u5b50\u5e94\u8be5\u5728\u63a2\u6d4b\u5b83\u4eec\u7684\u4f4d\u7f6e\u4e4b\u524d\u88ab\u91ca\u653e\u3002\u53ea\u6709\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u5c55\u5f00\u540e\uff0c\u624d\u80fd\u533a\u5206\u539f\u5b50\u3002\u7136\u800c\uff0c\u5f39\u9053\u81a8\u80c0\u4e0d\u4f1a\u6539\u53d8\u521d\u59cb\u6392\u5217\u7684\u51e0\u4f55\u5f62\u72b6\u3002\u5bf9\u4e8e\u8c10\u6ce2\u7ea6\u675f\u5c55\u5f00d\n\u5b9e\u9645\u4e0a\uff0c\u540c\u65f6\u91cd\u590d\u6d4b\u91cfN\u4e2a\u539f\u5b50\u7684\u4f4d\u7f6e\\({x}_{i}^{s})\u7684L\u7684\u76f4\u65b9\u56fe\u5b9a\u4e49\u4e3a\uff1a\n\u5176\u4e2d\u7d22\u5f15s\u6307\u7684\u662f\u4e0d\u540c\u7684\u6d4b\u91cf\u503c\u3002\u5982\u679c\u7c92\u5b50\u7684\u4f4d\u7f6ex\u4e0e\u4f4d\u4e8eX\u5904\u7684\u63a2\u6d4b\u5668\u7684\u4f4d\u7f6e\u4ee5\u7cbe\u5ea6\\({\\rm{\\Delta}}\\)\u91cd\u5408\uff0c\u5373\u5982\u679c\u5728X\u5468\u56f4\u7684\u4f53\u79ef\\(V={{\\rm{\\Delta}^{2}\\)\u4e2d\u53d1\u73b0\u7c92\u5b50\uff0c\u5219\u51fd\u6570\\(\\Delta({\\bf{x}}-{\\bf{X}})\\)\u7b49\u4e8e1\u3002\u5728\u76f8\u53cd\u7684\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\\(\\Delta({\\bf{x}}-{\\\u3002\u663e\u7136\uff0cH({\\bf{X}})\u4e0e\u91cf\u5b50\u529b\u5b66\u5355\u7c92\u5b50\u6982\u7387\u5206\u5e03\u6210\u6b63\u6bd4\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u6c42\u548c\u7684\u987a\u5e8f\u6765\u770b\u51fa\u6765\u3002\u76f4\u65b9\u56fe\u6ca1\u6709\u5173\u4e8e\u7c92\u5b50\u4f4d\u7f6e\u76f8\u5173\u6027\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u914d\u7f6e\u4e0a\u7684\u6c42\u548c\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e2a\u7c92\u5b50\u72ec\u7acb\u5b8c\u6210\u3002\u8fd9\u5c06\u64e6\u9664\u6709\u5173\u7cfb\u7edf\u4e2d\u7c92\u5b50\u548c\u51e0\u4f55\u4f53\u7684\u76f8\u5bf9\u4f4d\u7f6e\u7684\u4fe1\u606f\u3002\n\u5982\u679c\u6211\u4eec\u624b\u5934\u65e2\u6ca1\u6709\u5173\u4e8e\u7cfb\u7edf\u7684\u4fe1\u606f\uff0c\u4e5f\u6ca1\u6709\u5173\u4e8e\u5b83\u7684\u5bf9\u79f0\u6027\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u5f97\u4e0d\u53c2\u8003\u6761\u4ef6\u6982\u7387\u3002\u5728\u5bf9\u6d4b\u91cf\u7ed3\u679c\u8fdb\u884c\u5904\u7406\u4e4b\u524d\uff0c\u5bf9\u6bcf\u4e2a\u6784\u5f62\u8fdb\u884c\u79fb\u4f4d\uff0c\u5e76\u5c06\u5176\u51e0\u4f55\u4e2d\u5fc3\u5b9a\u4f4d\u5728\u5750\u6807\u7cfb\u4e2d\u5fc3\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u8fd9\u6837\u5c31\u6d88\u9664\u4e86\u8d28\u5fc3\u4f4d\u7f6e\u7684\u91cf\u5b50\u4e0d\u786e\u5b9a\u6027\u3002\u5bfb\u627e\u6700\u53ef\u80fd\u6784\u578b\u7684\u7b97\u6cd5\u662f\u57fa\u4e8e\u540e\u9009\u62e9\u7684\uff0c\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4\u3002(I)\u8981\u6536\u96c6\u5355\u6b21\u62cd\u6444\u7684\u56fe\u50cf\uff0c\u5fc5\u987b\u627e\u5230\u6784\u578b\u7684\u76f4\u65b9\u56fe\uff0c\u5373\u5355\u7c92\u5b50\u6982\u7387\u5bc6\u5ea6\uff0c\u5e76\u786e\u5b9a\u5176\u6700\u5927\u503c\u3002(Ii)\u5728\u4e0b\u4e00\u6b65\u4e2d\uff0c\u5047\u8bbe\u7b2c\u4e00\u4e2a\u7c92\u5b50\u4f4d\u4e8e\u5355\u7c92\u5b50\u5bc6\u5ea6\u6700\u5927\u503c(\u6216\u66f4\u597d\u5730\u5728\u9884\u5148\u8bbe\u5b9a\u7684\u8ddd\u79bb\u5185\uff0c\u6700\u5927\u503c\u4e3a\\(\\varepsilon\\))\uff0c\u5219\u5e94\u627e\u5230\u6761\u4ef6\u6982\u7387\u3002\u4e3a\u6b64\uff0c\u5728\u540e\u9009\u62e9\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u6536\u96c6\u7b26\u5408\u4e0a\u8ff0\u6807\u51c6\u7684\u5355\u5f20\u7167\u7247\u3002\u8fd9\u4e9b\u6784\u578b\u7684\u76f4\u65b9\u56fe\u7ed9\u51fa\u4e86\u4e24\u70b9\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u3002(Iii)\u5047\u8bbe\u7b2c\u4e09\u4e2a\u7c92\u5b50\u7684\u4f4d\u7f6e\u5728\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u9009\u62e9\u540e\u7684\u8fc7\u7a0b\uff0c\u5e76\u6784\u9020\u4e09\u70b9\u6761\u4ef6\u6982\u7387\u3002\u6574\u4e2a\u8fc7\u7a0b\u5fc5\u987b\u91cd\u590d\uff0c\u76f4\u5230\u627e\u5230\u6240\u6709N\u4e2a\u6700\u5927\u503c\u3002\u5728\u6761\u4ef6\u6982\u7387\u6709\u51e0\u4e2a\u5c40\u90e8\u6781\u5927\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b58\u5728\u5168\u5c40\u6781\u5927\u503c\uff0c\u5219\u5e94\u8be5\u9009\u62e9\u5168\u5c40\u6781\u5927\u503c\uff0c\u6216\u8005\u9009\u62e9\u4efb\u4f55\u7b49\u4ef7\u7684\u6781\u5927\u503c\u3002\n\u4e3a\u4e86\u8bf4\u660e\u57fa\u4e8e\u6761\u4ef6\u6982\u7387\u7684\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u5728\u56fe2\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e86\u4e0a\u8ff0\u9488\u5bf9\\(N=3)\u4e2a\u539f\u5b50\u7684\u8fde\u7eed\u6b65\u9aa4\u7684\u7ed3\u679c\u3002\u5728\u7b2c\u4e00\u5e45\u56fe(A)\u4e2d\uff0c\u663e\u793a\u4e86\u6d88\u9664\u8d28\u5fc3\u4e0d\u786e\u5b9a\u6027\u540e\u7684\u5355\u7c92\u5b50\u6982\u7387\u5bc6\u5ea6\u3002\u7531\u4e8e\u8fd9\u79cd\u6d88\u9664\uff0c\u5bc6\u5ea6\u5728\u4e2d\u5fc3\u6709\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u5e76\u5728\u73af\u4e0a\u8fbe\u5230\u6700\u5927\u503c\u3002\u7136\u540e\uff0c\u6211\u4eec\u9009\u62e9\u73af\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5e76\u4e14\u53ea\u4fdd\u7559\u5176\u4e2d\u6709\u7c92\u5b50\u7684\u56fe\u7247\u8ddd\u79bb\u6240\u9009\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8e\\(\\varepsilon\\)\u3002\u5728\u56fe2\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\\(\\varepsilon=0.2\\)\u3002\u8fd9\u6837\u5f97\u5230\u7684\u4e24\u70b9\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u5982\u56fe(B)\u6240\u793a\u3002\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u76f8\u7b49\u7684\u6700\u5927\u503c\u3002\u5728\u7b2c\u4e09\u4e2a\u9762\u677f(C)\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u901a\u8fc7\u540e\u9009\u62e9\u83b7\u5f97\u7684\u4e09\u70b9\u6761\u4ef6\u6982\u7387\u3002\u53ef\u4ee5\u770b\u5230\u4e09\u4f53\u51e0\u7387\u5bc6\u5ea6\u6700\u5927\u7684\u6ce1\u5229\u6676\u4f53\u6784\u578b\u3002\u572840K\u8d85\u51b7\u7cfb\u7edf32\u7684\u5b9e\u9a8c\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u53ea\u89c2\u5bdf\u5230\u4e86\u4e24\u70b9\u5173\u8054\u51fd\u6570\uff0c\u4f46\u9ad8\u9636\u5173\u8054\u4e5f\u5728\u5b9e\u9a8c\u8303\u56f4\u5185\u3002\n\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u3002(A)\u53bb\u9664\u8d28\u5fc3\u4e0d\u786e\u5b9a\u6027\u540e\u7684\u5355\u7c92\u5b50\u5bc6\u5ea6\uff0c(B)\u4e24\u7c92\u5b50\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\uff0c(C)\u4e09\u7c92\u5b50\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u3002\n\u5982\u679c\u7cfb\u7edf\u5177\u6709\u67d0\u4e9b\u5bf9\u79f0\u6027\uff0c\u5219\u4e0a\u8ff0\u8fc7\u7a0b\u662f\u975e\u5e38\u6d6a\u8d39\u7684\u3002\u8bb8\u591a\u6d4b\u91cf\u503c\u53ef\u80fd\u4ec5\u4ec5\u56e0\u4e3a\u5b83\u4eec\u7684\u5bf9\u79f0\u53d8\u6362\u4e0d\u540c\u800c\u4ece\u56fe\u7247\u96c6\u5408\u4e2d\u5220\u9664\u3002\u5728\u56fe2(A)\u4e2d\uff0c\u62cd\u6444\u4e86\u4e00\u4e9b\\(L={10}^{7}\\)\u5feb\u7167\uff0c\u800c\u901a\u5411\u56fe2(C)\u7684\u8fc7\u7a0b\u4ec5\u7559\u4e0b\\(7\\x{10}^{4}\\)\u4e2a\u5feb\u7167\u3002\u6211\u4eec\u7814\u7a76\u7684\u7cfb\u7edf\u5177\u6709\u4e00\u5b9a\u7684\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u53e6\u4e00\u4e2a\u56fe\u50cf\u5904\u7406\u8fc7\u7a0b27\u3002\u8ba9\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5728\u6bcf\u4e00\u6b21\u6d4b\u91cf\u4e2d\uff0c\u5355\u7c92\u5b50\u5bc6\u5ea6\u7684\u65cb\u8f6c\u5bf9\u79f0\u6027\u88ab\u4e0d\u540c\u7a0b\u5ea6\u5730\u7834\u574f\u3002\u6bcf\u4e2a\u6d4b\u5f97\u7684\u6784\u578b\u4ee3\u8868\u4e00\u6574\u7c7b\u6784\u578b\uff0c\u5b83\u4eec\u53ea\u662f\u5728\u5bf9\u79f0\u53d8\u6362\u4e0a\u6709\u6240\u4e0d\u540c\u3002\u6211\u4eec\u5e0c\u671b\u5229\u7528\u8fd9\u4e9b\u5bf9\u79f0\u6027\uff0c\u5c06\u6240\u6709\u5355\u6b21\u62cd\u6444\u7684\u56fe\u7247\u4e0e\u6700\u5927\u5316N\u4f53\u6982\u7387\u7684\u56fe\u7247\u8fdb\u884c\u6bd4\u8f83\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5047\u8bbe\u4e86\u89e3\u624b\u5934\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u77e5\u9053\u96f6\u6e29\u4e0b\u7684\u51e0\u4f55\u6392\u5217\uff0c\u5373\u6ce1\u5229\u6676\u4f53\u7684\u51e0\u4f55\u5f62\u72b6\uff0c\u5047\u8bbe\u5176\u9876\u70b9\u4f4d\u4e8e\\({\\bf{r}_{0}\\}}_{N}=\\{\\bf{r}_{01}\uff0c{{\\bf{r}_{02}\uff0c\\ldots\uff0c{{\\bf{r}_{0n}\u3002\u540e\u8005\u53ef\u4ee5\u4ece\u7406\u8bba\u4e0a\u5f97\u5230\u3002\u7136\u540e\u5c06\u4e0e\u7279\u5b9a\u6d4b\u91cf\u5b9e\u73b0\u76f8\u5bf9\u5e94\u7684\u6240\u6709\u5355\u6b21\u7ed3\u679c\\({\\{\\bf{x}}\\}}_{N}=\\{\\bf{x}_{1}\uff0c{{\\bf{x}_{2}\uff0c\\ldots\uff0c{{\\bf{x}_{N}\\}\\)\u4e0e\n..", "note_en": "The best known manifestation of the Fermi-Dirac statistics is the Pauli exclusion principle: no two identical fermions can occupy the same one-particle state. This principle enforces high-order correlations in systems of many identical fermions and is responsible for a particular geometric arrangement of trapped particles even when all mutual interactions are absent. These geometric structures, called Pauli crystals, are predicted for a system of  N identical atoms trapped in a harmonic potential. They emerge as the most frequent configurations in a collection of single-shot pictures of the system. Here we study how fragile Pauli crystals are when realistic experimental limitations are taken into account. The influence of the number of single-shots pictures available to analysis, thermal fluctuations and finite efficiency of detection are considered. The role of these sources of noise on the possibility of experimental observation of Pauli crystals is shown and conditions necessary for the detection of the geometrical arrangements of particles are identified.\n     Ultracold atoms provide an ideal playground for simulating not only various many-body quantum systems  1, 2, 3, 4, 5, 6, but also for studies of few-body physics  7. Unprecedented progress in controlling and monitoring of ultracold atoms opens a whole world of new possibilities. For example controlled few-body systems with sufficiently suppressed atom number fluctuations can be achieved in the Mott insulating phase of a lattice system via single-site addressing techniques  8. Alternatively, deterministic preparation of a few-body system is possible in a single microtrap  9, 10. Small systems of 1\u201310 fermionic atoms can be prepared in well-defined quantum states with high fidelity.\n Recently developed single-site fluorescence imaging technique is a major breakthrough in monitoring of many-body systems  11, 12, 13, 14, 15, 16, 17, 18. This great imaging techniques can simultaneously determine positions of all individual atoms in optical lattices with single-site resolution  12, 13. Snapshots of the atomic ensemble within a single isolated trap could harbor many crucial information about the system. Very important in this respect are higher-order spatial correlations, which are elusive to one-particle detection, but can be revealed from the  N-body probability density  19, 20, 21, 22. One of the best examples is recent experiment  22 in which the detection of spontaneous self-organized ordering in Rydberg many-body systems created in a Bose-Einstein condensate has been shown by comparing many single-shot pictures of the system.\n Experimental progress challenges theory. Quantum many-body systems observed with single-particle resolution attract interest of physicists because they give access to information which is not accessible not only to the most common one-body measurements, but also to two-point correlations. Examples of processes whose understanding requires description going beyond two-point correlations are quite numerous. They include for instance the seminal paper  23, where appearance of interference fringes in the course of  N-body detection is shown. On contrary, no interference is seen in the one-body picture. Similarly, solitons emerge from a type II excited state of a one-dimensional system of bosons interacting via short-range potential described by the Lieb-Liniger model  24. The solitons appear as a result of high-order correlations in the system and can be uncovered in a single-shot detection of many atoms. The work in  25 has demonstrated how to simulate single-shot experiments of general ultracold bosonic systems based on numerical solutions of the many-body Schr\u00f6dinger equation. Simulations of time-dependent single-shot pictures monitoring many-body dynamics revealing the appearance of fluctuating vortices in attractive BEC were suggested  26.\n In this paper we investigate yet another example of high order correlations in a few-body system. The correlations we are interested in are solely due to the quantum statistics and indistinguishability. Indistinguishable nature of identical particles leads to very important consequences in quantum physics. It inherently imposes correlations between particles, even in absence of any mutual interactions. It turns out that when many identical fermions at zero-temperature are trapped within an external two-dimensional harmonic trap, the particles orient themselves in a striking fashion unveiling specific geometric structures, called Pauli crystals. We have shown recently how to extract these geometric structures from multiple single-shot pictures of the many-body system  27. Suitable analysis of a large number of data gives clear, unequivocal picture of Pauli crystals. There is a question, however, how much the observed images are deteriorated by various experimental imperfections and if the existence of Pauli crystal can be verified experimentally. Very recently analogous Pauli structures has been reported  28. They were obtained by substituting Pauli principle with a \u201cinteraction potential\u201d.\n It was pointed by Wigner  29 that energy of ultradilute electron gas at zero-temperature is dominated by the Coulomb interactions and then electrons arrange themselves in a \u201cWigner crystal\u201d structures. Similarly, ions trapped in a harmonic potential form \u201cCoulomb crystals\u201d  30 - the structures of Wigner crystal geometry. For larger number of atoms,  \\(N\\ge 8\\), the Pauli crystals differ from Wigner and Coulomb crystals. Therefore, it is clear that mutual interactions lead to different arrangements. Therefore, it is interesting to study the crossover effects and transition from Pauli to Coulomb crystals. It requires, however, a detailed knowledge of the N-body wavefunction of interacting system and is beyond the scope of this paper.\n A single-shot measurement via fluorescence microscope can determine the spatial configuration of  N atoms. Detection of Pauli crystals from single-shot measurement\u2019s outcomes may, however, be challenging. In a single-shot the positions of  N-atoms can be obtained but the outcome of such detection is unpredictable because of probabilistic nature of quantum mechanics. It is different in every realization. Therefore it is very difficult to notice any geometric arrangement of atoms. But the most frequent ones might be quite similar  27. In fact  N-body probability density has a maximum for a certain arrangement of fermionic atoms \u2013 Pauli crystals. One can expect that in a collection of  N-particle pictures, there are many such results where atoms occupy positions \u201caround\u201d vertexes of a Pauli crystal. Uncertainties of the positions due to quantum shot-to-shot fluctuations causes the crystal vertexes to be spatially extended even at zero temperature. Moreover, there are several other practical constrains that might lead to additional smearing of crystal vertexes. These are thermal fluctuations, limited number of single-shot experiments, and imperfections due to atom number fluctuation in the measured ensemble of single-shot pictures. All these imperfections may even cause the crystalline structures to be beyond the experimental reach. The present paper provides careful examination of a role of these fluctuations to understand if Pauli crystals can be observed. We take into account practical constraints mentioned above. It is shown below that the geometry of the Pauli crystals remains seen even if it is diffused by some amount of experimental noise. The noise however, has to be rather small.\n We consider non-interacting polarized fermions trapped in a two-dimensional isotropic harmonic potential with the frequency  \\({\\omega }_{x}={\\omega }_{y}=\\omega \\). The single-particle quantum state,  \\({\\psi }_{nm}(x,y)\\), bound in the 2D harmonic trap is given by\n  where  \\({ {\\mathcal H} }_{n}\\) is the  \\({n}^{th}\\) Hermite polynomial,  \\({\\mathscr{N}}={{\\mathrm{(2}}^{n+m}n!m!\\sqrt{\\pi })}^{1/2}\\) is the normalization constant. Quantum numbers  n and  m enumerate excitations in the  x and  y direction, respectively. We use natural harmonic oscillator units,  \\({a}_{0}=\\sqrt{\\hslash /M\\omega }\\), where  M is the mass of the particle. The single-particle energy corresponding to the quantum state  \\({\\psi }_{mn}\\) is  \\({E}_{mn}=(m+n+\\mathrm{1)}\\hslash \\omega \\), and each of these energy levels are  \\((m+n+\\mathrm{1)}\\)-fold degenerate.\n In the  N-body ground state all identical fermionic atoms occupy the lowest available single-particle quantum states up to the Fermi energy. This is due to the Pauli exclusion principle, which prohibits them from occupying the same quantum state. The ground state is not uniquely defined if the number of states at the Fermi level exceeds the number of particles which have to be located there. However, in particular cases when  N\u2009=\u20091, 3, 6, 10, 15, \u2026, the many-body ground state of the corresponding system is non-degenerate. Obviously, geometry of Pauli crystals is characteristic of a given state. If energy does not specify uniquely the state we have a variety of different states and geometric configurations corresponding to a given energy. Non-zero temperature resolves this issue. All states of the same energy contribute with equal weights to the thermal density matrix. Here, for a simplicity, we limit our discussion to isotropic trap and fully occupied Fermi surface.\n The ground state energy is the sum of single particles energies of the occupied states,  \\({ {\\mathcal E} }_{0}^{N}/\\hslash \\omega ={\\sum }_{i}^{N}({m}_{i}+{n}_{i}+\\mathrm{1)}\\). Note that any two given sets of  \\(({m}_{i},{n}_{i})\\) associated with a single-particle orbital cannot be identical since the many-body ground state wavefunction,  \\({{\\rm{\\Psi }}}_{0q}^{N}({{\\bf{r}}}_{1},{{\\bf{r}}}_{2},\\ldots ,{{\\bf{r}}}_{N})\\), is obtained by imposing anti-symmetrization, via the Slater determinant, of the occupied single-particle states. The subscript  \\(q\\) in  \\({{\\rm{\\Psi }}}_{0q}^{N}\\) accounts for the degeneracy of the N-body ground state. The probability,  \\({{\\mathscr{P}}}_{q}^{N}\\), of finding particles at  \\(({{\\bf{r}}}_{1},{{\\bf{r}}}_{2},\\ldots ,{{\\bf{r}}}_{N})\\) when the system is in the ground state is:\n   The maximum of  \\({{\\mathscr{P}}}_{q}^{N}\\), Eq. ( 2), can be easily obtained. For example it can be found by employing the Monte-Carlo algorithm  31, where starting from a randomly chosen initial configuration, another configuration is proposed by shifting the atom positions. The move is accepted if the configuration is more probable than the previous one.\n It turns out that, as it has been shown in  27, the most probable arrangement of atoms manifest unique geometrical structures at zero temperature. These configurations for  N\u2009=\u20093, 6, 10, and 15 are shown in Fig.\u00a0 1. Three atoms orient themselves at the vertexes of an equilateral triangle. A two-shell structure is noticed for  N\u2009=\u20096 with a single atom positioned at the trap center, representing the first (innermost) shell, and the second shell formed by five atoms arranged in a pentagon.  N\u2009=\u200910 configuration exhibits a two-shell structure with a triangle and a heptagon, respectively, forming the inner and outer shells. A third shell emerges for  N\u2009=\u200915 atoms, where one atom occupies the trap center, and equally spaced five and nine atoms form the second, and the third (outermost) shell. It can be seen that the relative orientations of the shells are rigid with respect to each other. However each structure as a whole can be rotated without affecting the value of  \\({{\\mathscr{P}}}_{q}^{N}\\).\n Crystalline structures formed by identical fermions in two-dimensional harmonic trap. The blue dots show the most probable configurations obtained by maximizing the  N-particle probability for ( a) 3 atoms, ( d) 6 atoms, ( e) 10 atoms, and ( f) 15 atoms. The black dotted, the red dashed, and the green solid circles represent the first shell (innermost), second shell, and third shell, respectively. First shell reduces to a point, when it is composed of a single atom present in the center.\n We assume here that positions of atoms occupying the harmonic trap can be determined with high resolution, larger then their separation which is of the order of oscillator unit of length. This assumption is quite optimistic at this moment. At present the resolution of atomic fluorescence microscopes is higher than the lattice spacing and one can distinguish atoms at different sites. It is not possible however, to resolve positions of atoms residing in the same site. To overcome this problem atoms ought to be released prior to detection of their positions. Only after some expansion the atoms can be distinguished. Ballistic expansion however, does not change the geometry of the initial arrangement. For the harmonic confinement expansion does not disturb geometry of the system, it results in scaling of all distances and we ignore it in the following analysis.\n As an outcome of an instantaneous picture of all atoms in their ground state we get a set of  N position vectors. But this outcome is totally unpredictable due to the probabilistic nature of quantum mechanics. Consequently, configurations emerging out of different realizations are different and each of them is unpredictable. Therefore a single picture of  N-body system cannot reveal the geometric configurations of particles predicted by using the probability distribution. The natural strategy could be to repeat the experiment with the same initial state and combine all outcomes of the measurements to form a histogram of atomic positions in 2D-plane. Surprisingly enough, the histogram of repeated measurements does not help too. It gives a one particle density, not the  N-particle correlation function.\n Indeed, the histogram of  L simultaneously repeated measurements of positions  \\({x}_{i}^{s}\\) of  N atoms is defined as:\n  where index  s refers to different measurements. The function  \\(\\delta ({\\bf{x}}-{\\bf{X}})\\) is equal to one if the position  x of a particle coincides with the position of a detector located at  X with an accuracy  \\({\\rm{\\Delta }}\\), i.e. if a particle is found in a volume  \\(V={{\\rm{\\Delta }}}^{2}\\) around  X. In an opposite case, the function  \\(\\delta ({\\bf{x}}-{\\bf{X}})\\) vanishes. Obviously,  \\(H({\\bf{X}})\\) is proportional to a quantum-mechanical one-particle probability distribution. This can be seen by changing the order of summation. The histogram has no information about correlations of particles\u2019 positions because summation over configurations can be done independently for every particle. This erases information about relative positions of particles and a geometry the system.\n If we have no information about the system at hand as well as about its symmetries, then we have to refer to conditional probabilities. Prior to processing the outcomes of measurement it is useful to shift every configuration and locate its geometric center at the center of coordinates system. This way the quantum uncertainty of the center of mass position is eliminated. The algorithm of finding the most probable configuration is based on post-selection and can be divided into three steps. (i) Having collection of single shot pictures one has to find histogram of configurations, i.e. the one-particle probability density, and determine its maximum. (ii) In the next step a conditional probability should be found assuming the first particle to be positioned at the one-particle density maximum (or better within a pre-set distance,  \\(\\varepsilon \\) to the maximum). To this end, in a post-selection procedure, we collect only these single-shots which meet the above criterion. Histogram of theses configurations gives the two-point conditional probability density. (iii) Assuming the third particle\u2019s position to be located at this maximum, we can repeat the post-selection procedure and construct the three-point conditional probability. The whole procedure has to be repeated until all  N maxima are found. In case when there are several local maxima of a conditional probability, one should choose a global maximum if such exists, or any of the equivalent maxima.\n To illustrate this procedure based on conditional probabilities, in Fig.\u00a0 2 we show results of consecutive steps described above for  \\(N=3\\) atoms. In the first panel (a) the one particle probability density, after eliminating the center of mass uncertainty, is shown. Because of this elimination the density has a minimum at the center and reaches a maximal value on a ring. Then we select one point on the ring and keep only the pictures in which there is a particle at a distance smaller then  \\(\\varepsilon \\) from the selected point. In Fig.\u00a0 2, we set  \\(\\varepsilon =0.2\\). Obtained this way two-point conditional probability density is shown in panel (b). Two equal maxima are visible. In the third panel (c) we show three-point conditional probability obtained via post-selection. The Pauli crystal \u2013 configuration maximizing the three-body probability density, can be seen. In expeiment in  40K ultracold system  32, only two-point correlation functions have been observed so far, but higher order correlations are also within experimental reach.\n Conditional probability densities. ( a) one-particle density after removing the center of mass uncertainty, ( b) two-particle conditional probability density, ( c) three-particle conditional probability density.\n  The above procedure is very wasteful if the system has some symmetries. Many measurements might be removed from a collection of pictures only because they differ by a symmetry transformation. In Fig.\u00a0 2(a) some  \\(L={10}^{7}\\) snapshots are taken, while the procedure leading to Fig.\u00a0 2(c) left only about  \\(7\\times {10}^{4}\\) snapshots. The system we study has some symmetry and we will use another procedure of image processing  27. Let us note that in every measurement the rotational symmetry of the one-particle density is broken differently. Each measured configuration represents a whole class of configurations which differ by a symmetry transformation only. We want to take advantage of these symmetries and compare all single-shot pictures, to the one maximizing the  N-body probability. Here we assume that knowing the system at hand we know the geometrical arrangement at zero temperature, i.e., the geometry of the Pauli crystal, the vertexes of which are assumed to be positioned at  \\({\\{{{\\bf{r}}}_{0}\\}}_{N}=\\{{{\\bf{r}}}_{01},{{\\bf{r}}}_{02},\\ldots ,{{\\bf{r}}}_{0N}\\}\\). The latter can be obtained on the theoretical ground. All single-shot outcomes  \\({\\{{\\bf{x}}\\}}_{N}=\\{{{\\bf{x}}}_{1},{{\\bf{x}}}_{2},\\ldots ,{{\\bf{x}}}_{N}\\}\\) corresponding to a particular measured realization are compared then to the pattern after some previous preprocessing - a symmetry transformation.\n As we will not pay attention to a particular enumeration of particles, the only relevant symmetry operation is rotation around the trap center. To eliminate the quantum uncertainty of the center of mass and to concentrate on the relative positions of particles we shift the center of mass of every chosen configuration to the origin of the coordinate system,  \\({\\bf{x}}{\\text{&#39;}}_{i}={{\\bf{x}}}_{i}-{{\\bf{x}}}_{cm}\\) where  \\({{\\bf{x}}}_{cm}=\\mathrm{(1}/N){\\sum }_{i=1}^{N}{{\\bf{x}}}_{i}\\). For simplicity we skip the \u2018  prime\u2019 symbol in the following.\n Quantitative comparison of a particular snapshot to the pattern has to be based on a definition of the distance between the snapshot and the pattern. We will simply use the angular distance (squared) between particles of the pattern and the snapshot. It works well in our case. First, we re-enumerate all particles to order them according to increasing azimuthal angle,  \\({\\varphi }_{i}\\), within every shell, separately. We do the same for the pattern. At this step we use polar coordinates,  \\({{\\bf{x}}}_{i}=({d}_{i},{\\varphi }_{i})\\) for positions of the atoms, and  \\({{\\bf{r}}}_{0i}=({\\rho }_{i}\n......", "posttime": "2020-05-25 06:26:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6ce1\u5229,pauli,\u7c92\u5b50", "title": "\u9502\u4e2d\u6ce1\u5229\u6676\u4f53\u7684\u53ef\u89c2\u6027\u7814\u7a76", "title_en": "On the Observability of Pauli Crystals in Lithium", "transed": 1, "url": "https://www.nature.com/articles/s41598-017-14952-2", "via": "", "real_tags": ["\u6ce1\u5229", "pauli", "\u7c92\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "87e0db1ab08bef61850701bfb5dea5c0.png", "infoid": 1003572, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "{fmt}\u662fC++\u7684\u5f00\u653e\u6e90\u7801\u683c\u5f0f\u5e93\uff0c\u53ef\u4ee5\u5b89\u5168\u5feb\u901f\u5730\u66ff\u4ee3printf\u548ciostream\u3002\n\u9ad8\u6027\u80fd\uff1a\u6bd4printf\u548costream\u7684\u901a\u7528\u6807\u51c6\u5e93\u5b9e\u73b0\u66f4\u5feb\u3002\u8bf7\u53c2\u9605C++\u4e2d\u7684\u901f\u5ea6\u6d4b\u8bd5\u548c\u5feb\u901f\u6574\u6570\u5230\u5b57\u7b26\u4e32\u8f6c\u6362\u3002\n\u6e90\u4ee3\u7801(\u6700\u4f4e\u914d\u7f6e\u4ec5\u7531core.h\u3001format.h\u548cformat-inl.h\u4e09\u4e2a\u5934\u6587\u4ef6\u7ec4\u6210)\u548c\u7f16\u8bd1\u4ee3\u7801\u90fd\u5f88\u5c0f\u3002\u8bf7\u53c2\u89c1\u7f16\u8bd1\u65f6\u95f4\u548c\u4ee3\u7801\u81a8\u80c0\u3002\n\u5b89\u5168\u6027\uff1a\u8be5\u5e93\u662f\u5b8c\u5168\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u62a5\u544a\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u9519\u8bef\uff0c\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u53ef\u9632\u6b62\u7f13\u51b2\u533a\u6ea2\u51fa\u9519\u8bef\u3002\nfmt\uff1a\uff1aprint(&#34\uff1bHello\uff0c{}\uff01&#34\uff1b\uff0c&#34\uff1bworld&#34\uff1b)\uff1b//\u7c7b\u4f3cPython\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5fmt\uff1a\uff1aprintf(&#34\uff1bHello\uff0c%s\uff01&#34\uff1b\uff0c&#34\uff1bworld&#34\uff1b)\uff1b//printf\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5\u3002\nstd\uff1a\uff1astring s=fmt\uff1a\uff1aformat(&#34\uff1bI&#39\uff1bD\u5b81\u613f\u662f{1}\u800c\u4e0d\u662f{0}\u3002(&#34\uff1b\uff0c&#34\uff1bRight&#34\uff1b\uff0c&#34\uff1b)\uff1b//s=&#34\uff1bI&#39\uff1bI&#34\uff1bI&/s=#34\uff1bI&#39\uff1b\u6211\u5b81\u613f\u5feb\u4e50\u4e5f\u4e0d\u613f\u6b63\u786e\u3002\n$c++-iinclude-std=c++14 test.cc.test.cc\uff1a4\uff1a17\uff1a\u6ce8\u610f\uff1a\u5728\u51fd\u6570\u6a21\u677f\u4e13\u95e8\u5316\u5b9e\u4f8b\u5316&#39\uff1bfmt\uff1a\uff1av5\uff1a\uff1aformat&lt\uff1bS\uff0cint&gt\uff1b&#39\uff1b\u8bf7\u6c42\u7684herestd\uff1a\uff1astring s=format(fmt_string(&#34\uff1b{2}&#34\uff1b)\uff0c42)\uff1b^include/fmt/core.h\uff1a778\uff1a19\uff1a\u6ce8\u610f\uff1a\u65e0\u3002^INCLUDE/fmt/Format.h\uff1a2226\uff1a16\uff1a\u6ce8\u610f\uff1a\u5728\u8c03\u7528&#39\uff1b&amp\uff1bchecker.context_-&gt\uff1bon_error(&amp\uff1b&#34\uff1bargument\u7d22\u5f15\u65f6\u8d85\u51fa\u8303\u56f4&#34\uff1b[0])&#39\uff1bCONTEXT_.ON_ERROR(&#34\uff1b\u53c2\u6570\u7d22\u5f15\u8d85\u51fa\u8303\u56f4&#34\uff1b)\uff1b^\u3002\nfmt\uff1a\uff1amemory_buffer buf\uff1bformat_to(buf\uff0c&#34\uff1b{}&#34\uff1b\uff0c42)\uff1b//\u66ff\u6362itoa(42\uff0cbuffer\uff0c10)format_to(buf\uff0c&#34\uff1b{\uff1ax}&#34\uff1b\uff0c42)\uff1b//\u66ff\u6362itoa(42\uff0cbuffer\uff0c16)//\u4f7f\u7528to_string(Buf)\u6216buf.data()\u8bbf\u95ee\u5b57\u7b26\u4e32\n#include&#34\uff1bfmt/format.h&#34\uff1bstruct date{int\u5e74\uff0c\u6708\uff0c\u65e5\uff1b}\uff1b\u6a21\u677f&lt\uff1b&gt\uff1bstruct fmt\uff1a\uff1aFormatter&lt\uff1bdate&gt\uff1b{stexpr auto parse(format_parse_context&amp\uff1bctx){\u8fd4\u56dectx\u3002Begin()\uff1b}Template&lt\uff1bTypeName FormatContext&gt\uff1bAuto Format(Const Date&amp\uff1bd\uff0cFormatContext&amp\uff1bCTX){Return Format_To(CTX.\u3002out()\uff0c&#34\uff1b{}-{}-{}&#34\uff1b\uff0cD.\u5e74\uff0cD.\u6708\uff0cD.\u65e5)\uff1b}}\uff1bstd\uff1a\uff1astring s=fmt\uff1a\uff1aformat(&#34\uff1b\u65e5\u671f\u4e3a{}&#34\uff1b\u65e5\u671f{2012\uff0c12\uff0c9})\uff1b//s==&#34\uff1b\u65e5\u671f\u4e3a2012-12-9&#34\uff1b\n//\u6253\u5370\u683c\u5f0f\u5316\u7684\u9519\u8bef\u6d88\u606f\u3002void vreport_error(const char*format\uff0cfmt\uff1a\uff1aformat_args args){fmt\uff1a\uff1aprint(&#34\uff1berror\uff1a&#34\uff1b)\uff1bfmt\uff1a\uff1avprint(format\uff0cargs)\uff1b}\u6a21\u677f&lt\uff1btypeName.\u3002\u53c2\u6570&&gt;void REPORT_ERROR(\u5e38\u91cf\u5b57\u7b26*\u683c\u5f0f\uff0c\u5e38\u91cf\u53c2\u6570(&A\uff1b).\u3002args){vreport_error(format\uff0cfmt\uff1a\uff1amake_format_args(args.))\uff1b}report_error(&#34\uff1b\u627e\u4e0d\u5230\u6587\u4ef6\uff1a{}&#34\uff1b\uff0c\u8def\u5f84)\uff1b\n\u8bf7\u6ce8\u610f\uff0c\u4e0e\u5b8c\u5168\u53c2\u6570\u5316\u7684\u7248\u672c\u76f8\u6bd4\uff0cvreport_error\u4e0d\u5728\u53c2\u6570\u7c7b\u578b\u4e0a\u53c2\u6570\u5316\uff0c\u8fd9\u53ef\u4ee5\u7f29\u77ed\u7f16\u8bd1\u65f6\u95f4\u5e76\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u3002\n\u4ee5\u4e0a\u7ed3\u679c\u662f\u901a\u8fc7\u4f7f\u7528clang++-O3-DSPEED_TEST-DHAVE_FORMAT\u5728macOS10.14.6\u4e0a\u6784\u5efatinyformat_test.cpp\u5e76\u53d6\u4e09\u6b21\u8fd0\u884c\u4e2d\u7684\u6700\u4f73\u7ed3\u679c\u751f\u6210\u7684\u3002\u5728\u6d4b\u8bd5\u4e2d\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32&#34\uff1b%0.10f\uff1a%04d\uff1a%+g\uff1a%s\uff1a%p\uff1a%c\uff1a%%\\n&#34\uff1b\u6216\u7b49\u6548\u5b57\u7b26\u4e32\u586b\u5145\u4e862,000,000\u6b21\uff0c\u5e76\u5c06\u8f93\u51fa\u53d1\u9001\u5230/dev/null\uff1b\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002\n{fmt}\u5728\u6d6e\u70b9\u683c\u5f0f\u5316(dtoa-Benchmark)\u4e0a\u6bd4std\uff1a\uff1aostrg stream\u548cspintf\u5feb10\u500d\uff0c\u4e0e\u53cc\u91cd\u8f6c\u6362\u4e00\u6837\u5feb\uff1a\n\u811a\u672cbloat-test.pyfrom\u683c\u5f0f\u57fa\u51c6\u6d4b\u8bd5\u91cd\u8981\u9879\u76ee\u7684\u7f16\u8bd1\u65f6\u95f4\u548c\u4ee3\u7801\u81a8\u80c0\u3002\u5b83\u751f\u6210100\u4e2a\u7ffb\u8bd1\u5355\u5143\uff0c\u5e76\u5728\u6bcf\u4e2a\u5355\u5143\u4e2d\u4f7f\u7528printf()\u6216\u5b83\u7684\u4ea4\u66ff\u4f7f\u75285\u6b21\u6765\u6a21\u62df\u4e2d\u578b\u9879\u76ee\u3002\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5927\u5c0f\u548c\u7f16\u8bd1\u65f6\u95f4(Apple LLVM\u7248\u672c8.1.0(clang-802.0.42)\u3001MacOS Sierra\uff0c\u4e09\u9009\u4e00)\u5982\u4e0b\u8868\u6240\u793a\u3002\n\u5982\u60a8\u6240\u89c1\uff0c\u5c31\u4ea7\u751f\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5927\u5c0f\u800c\u8a00\uff0c{fmt}\u7684\u5f00\u9500\u6bd4iostream\u5c1160%\uff0c\u4e0eprintf\u975e\u5e38\u63a5\u8fd1\u3002Boost Format\u548cFolly Format\u7684\u7ba1\u7406\u8d39\u7528\u6700\u5927\u3002\nprintf+string\u4e0eprintf\u76f8\u540c\uff0c\u4f46\u4f7f\u7528\u989d\u5916\u7684&lt\uff1bstring&gt\uff1binclude\u6765\u6d4b\u91cf\u540e\u8005\u7684\u5f00\u9500\u3002\nlibc\u3001lib(Std)c++\u548clibfmt\u90fd\u94fe\u63a5\u4e3a\u5171\u4eab\u5e93\uff0c\u4ec5\u7528\u4e8e\u6bd4\u8f83\u683c\u5f0f\u5316\u51fd\u6570\u5f00\u9500\u3002Boost\u683c\u5f0f\u662f\u4ec5\u9650\u6807\u9898\u7684\u5e93\uff0c\u56e0\u6b64\u5b83\u4e0d\u63d0\u4f9b\u4efb\u4f55\u94fe\u63a5\u9009\u9879\u3002\n\u6709\u5173\u5982\u4f55\u6784\u5efa\u5e93\u548c\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u7684\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u6784\u5efa\u5e93\u3002\n\u57fa\u51c6\u4f4d\u4e8e\u5355\u72ec\u7684\u5b58\u50a8\u5e93\u4e2d\uff0c\u5373\u683c\u5f0f\u57fa\u51c6\uff0c\u56e0\u6b64\u8981\u8fd0\u884c\u57fa\u51c6\uff0c\u60a8\u9996\u5148\u9700\u8981\u514b\u9686\u6b64\u5b58\u50a8\u5e93\u5e76\u4f7f\u7528CMake\u751f\u6210Makefile\uff1a\nScylla\uff1a\u4e0eCassandra\u517c\u5bb9\u7684NoSQL\u6570\u636e\u5b58\u50a8\uff0c\u53ef\u4ee5\u5728\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u6bcf\u79d2\u5904\u7406100\u4e07\u4e2a\u4e8b\u52a1\u3002\n\u5982\u679c\u60a8\u77e5\u9053\u6709\u5176\u4ed6\u4f7f\u7528\u6b64\u5e93\u7684\u9879\u76ee\uff0c\u8bf7\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u6216\u63d0\u4ea4\u95ee\u9898\u7684\u65b9\u5f0f\u8ba9\u6211\u77e5\u9053\u3002\n\u5b8c\u6210\u8fd9\u9879\u4efb\u52a1\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4ece\u6807\u51c6\u7684printf\u51fd\u6570\u7cfb\u5217\u548ciostream\u5230Boost Format\u548cFastFormatlibrary\uff0c\u4e0d\u4e00\u800c\u8db3\u3002\u521b\u5efa\u4e00\u4e2a\u65b0\u5e93\u7684\u539f\u56e0\u662f\uff0c\u6211\u53d1\u73b0\u7684\u6bcf\u4e2a\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u8981\u4e48\u90fd\u5b58\u5728\u4e25\u91cd\u95ee\u9898\uff0c\u8981\u4e48\u6ca1\u6709\u63d0\u4f9b\u6211\u9700\u8981\u7684\u6240\u6709\u529f\u80fd\u3002\nprintf\u7684\u597d\u5904\u662f\uff0c\u4f5c\u4e3aC\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u76f8\u5f53\u5feb\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u83b7\u5f97\u3002\u4e3b\u8981\u7f3a\u70b9\u662f\u5b83\u4e0d\u652f\u6301\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u3002printf\u4e5f\u5b58\u5728\u5b89\u5168\u95ee\u9898\uff0c\u5c3d\u7ba1\u4f7f\u7528__ATTRIBUTE__((format(printf\uff0c.))\u53ef\u4ee5\u7a0d\u5fae\u7f13\u89e3\u8fd9\u4e9b\u95ee\u9898\u3002\u5728GCC\u4e2d\uff0c\u6709\u4e00\u4e2aPOSIX\u6269\u5c55\uff0c\u5b83\u5c06i18nto printf\u6240\u9700\u7684\u4f4d\u7f6e\u53c2\u6570\u6dfb\u52a0\u5230printf\u4e2d\uff0c\u4f46\u5b83\u4e0d\u662fC99\u7684\u4e00\u90e8\u5206\uff0c\u5728\u67d0\u4e9b\u5e73\u53f0\u4e0a\u53ef\u80fd\u4e0d\u53ef\u7528\u3002\n\u201c\u5feb\u901f\u683c\u5f0f\u201d(FastFormat)\u4e00\u4e66\u7684\u4f5c\u8005\u9a6c\u4fee\u00b7\u5a01\u5c14\u900a(Matthew Wilson)\u79f0\u8fd9\u662f\u96ea\u4f5b\u9f99\u5730\u72f1\u3002IOStreamsdon\u6545\u610f\u4e0d\u652f\u6301\u4f4d\u7f6e\u53c2\u6570\u3002\n\u597d\u7684\u65b9\u9762\u662f\uff0ciostream\u652f\u6301\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u5e76\u4e14\u662f\u5b89\u5168\u7684\uff0c\u5c3d\u7ba1\u9519\u8bef\u5904\u7406\u5f88\u7b28\u62d9\u3002\n\u8fd9\u662f\u4e00\u4e2a\u529f\u80fd\u975e\u5e38\u5f3a\u5927\u7684\u5e93\uff0c\u65e2\u652f\u6301\u7c7b\u4f3cprintf\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u4e5f\u652f\u6301\u4f4d\u7f6e\u53c2\u6570\u3002\u5b83\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\u6027\u80fd\u3002\u6839\u636e\u5404\u79cd\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5b83\u6bd4\u8fd9\u91cc\u8003\u8651\u7684\u5176\u4ed6\u65b9\u6cd5\u8981\u6162\u5f97\u591a\u3002BoostFormat\u8fd8\u5b58\u5728\u6784\u5efa\u65f6\u95f4\u8fc7\u957f\u548c\u4e25\u91cd\u7684\u4ee3\u7801\u81a8\u80c0\u95ee\u9898(\u8bf7\u53c2\u9605\u57fa\u51c6\u6d4b\u8bd5)\u3002\n\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u5e93\uff0c\u5b83\u5feb\u901f\u3001\u5b89\u5168\u5e76\u4e14\u6709\u4f4d\u7f6e\u53c2\u6570\u3002\u7136\u800c\uff0c\u5b83\u6709\u5f88\u5927\u7684\u9650\u5236\uff0c\u5f15\u7528\u5b83\u7684\u4f5c\u8005\u7684\u8bdd\uff1a\n\u5b83\u4e5f\u76f8\u5f53\u5927\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u5f88\u91cd\u7684\u4f9d\u8d56\uff0cSTLSoft\uff0c\u8fd9\u5bf9\u4e8e\u5728\u4e00\u4e9b\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\u53ef\u80fd\u662f\u6709\u9650\u5236\u7684\u3002\n\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u683c\u5f0f\u5e93\uff0c\u4f46\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u51b3\u5b9a\u5c06\u5176\u5305\u542b\u5728\u8fd9\u91cc\u3002\u4f5c\u4e3aiostream\uff0c\u5b83\u5b58\u5728\u9010\u5b57\u6df7\u5408\u6587\u672c\u548c\u53c2\u6570\u7684\u95ee\u9898\u3002\u8be5\u5e93\u76f8\u5f53\u5feb\uff0c\u4f46\u662f\u5728\u6574\u6570\u683c\u5f0f\u4e0a\u6bd4\u5728Karma\u81ea\u5df1\u7684\u57fa\u51c6\u4e0a\u7684fmt\uff1a\uff1aformat_int\u8981\u6162\uff0c\u8bf7\u53c2\u9605C++\u4e2d\u7684\u5feb\u901f\u6574\u6570\u5230\u5b57\u7b26\u4e32\u8f6c\u6362\u3002\n\u6a21\u677f\u7c7b\u578b\u540d\u79f0(&lt\uff1bTypeName).\u3002\u53c2\u6570\u81ea\u52a8\u6355\u83b7(\u5e38\u91cf\u53c2\u6570(&A\uff1b).\u3002args){return std\uff1a\uff1amake_tuple(args.)\uff1b}AUTO PRINT_MESSAGE=[](const auto&amp\uff1b.\u3002args){fmt\uff1a\uff1aprint(args.)\uff1b}\uff1b//\u6355\u83b7\u548c\u5b58\u50a8\u53c2\u6570\uff1aauto args=catch(&#34\uff1b{}{}&#34\uff1b\uff0c42\uff0c&#34\uff1bfoo&#34\uff1b)\uff1b//\u6267\u884c\u683c\u5f0f\u5316\uff1astd\uff1a\uff1aApply(print_message\uff0cargs)\uff1b\n\u6587\u6863\u4e2d\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5\u90e8\u5206\u57fa\u4e8e\u9002\u7528\u4e8e\u5f53\u524d\u5e93\u7684Python String module ocumentation\u4e2d\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5\u90e8\u5206\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u672c\u6587\u6863\u662f\u6839\u636ePython Software Foundation\u8bb8\u53ef\u8bc1\u5206\u53d1\u7684\uff0c\u53ef\u5728doc/python-License se.tx.tx.\u4e2d\u627e\u5230\u3002\u5b83\u4ec5\u9002\u7528\u4e8e\u60a8\u5206\u53d1FMT\u6587\u6863\u7684\u60c5\u51b5\u3002\n{fmt}\u5e93\u7531Victor Zverovich(Vitaut)\u548cJonathan M\u00fcller(Foonathan)\u7ef4\u62a4\uff0c\u5176\u4e2d\u6709\u8bb8\u591a\u5176\u4ed6\u4eba\u7684\u8d21\u732e\u3002\u8bf7\u53c2\u9605\u8d21\u732e\u8005\u548c\u53d1\u5e03\u8005\u4e86\u89e3\u5176\u4e2d\u4e00\u4e9b\u540d\u79f0\u3002\u5982\u679c\u60a8\u7684\u8d21\u732e\u6ca1\u6709\u88ab\u6b63\u786e\u5217\u51fa\u6216\u63d0\u53ca\uff0c\u8bf7\u8ba9\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u4f1a\u7ea0\u6b63\u60a8\u7684\u8d21\u732e\u3002(\u6ce8\uff1a{fmt}\u5e93\u662f\u7531Victor Zverovich(Vitaut)\u548cJonathan M\u00fcller(Foonathan)\u7ef4\u62a4\u7684\u3002\u8bf7\u53c2\u9605\u8d21\u732e\u8005\u548c\u53d1\u5e03\u8005)\u3002\n\u672c\u81ea\u8ff0\u6587\u4ef6\u7684\u57fa\u51c6\u6d4b\u8bd5\u90e8\u5206\u548c\u6027\u80fd\u6d4b\u8bd5\u6765\u81eaChris Foster\u7f16\u5199\u7684\u4f18\u79c0tinyformat\u5e93\u3002Boost\u683c\u5f0f\u5e93\u662f\u516c\u8ba4\u7684\uff0c\u56e0\u4e3a\u5b83\u5bf9tinyformat\u4ea7\u751f\u4e86\u4e00\u4e9b\u5f71\u54cd\u3002\u5b9e\u73b0\u4e2d\u4f7f\u7528\u7684\u4e00\u4e9b\u60f3\u6cd5\u501f\u9274\u4e86Loki SafeFormat\u548cClang\u4e2d\u7684Diagnostic API\u3002Format\u5b57\u7b26\u4e32\u8bed\u6cd5\u548c\u6587\u6863\u57fa\u4e8ePython\u7684str.format\u3002\u611f\u8c22Doug Turnbull\u5bf9\u7c7b\u578b\u5b89\u5168API\u7684\u8bbe\u8ba1\u63d0\u51fa\u7684\u5b9d\u8d35\u610f\u89c1\u548c\u8d21\u732e\uff0c\u4ee5\u53caGregory Chaajkowski\u5b9e\u73b0\u4e8c\u8fdb\u5236\u683c\u5f0f\u5316\u7684\u8d21\u732e\u3002\u611f\u8c22Ruslan Baratov\u5bf9\u6574\u6570\u683c\u5f0f\u5316\u7b97\u6cd5\u7684\u5168\u9762\u6bd4\u8f83\u548c\u6709\u5173\u6027\u80fd\u7684\u6709\u7528\u8bc4\u8bba\uff0c\u611f\u8c22Boris Kaul\u4e3aC++\u8ba1\u6570\u6570\u5b57\u57fa\u51c6\u6240\u505a\u7684\u8d21\u732e\u3002\u611f\u8c22CarterLi\u5bf9\u4ee3\u7801\u505a\u51fa\u7684\u5404\u79cd\u6539\u8fdb\u3002", "note_en": "{fmt} is an open-source formatting library for C++.It can be used as a safe and fast alternative to (s)printf and iostreams.\n     High performance: faster than common standard library implementations of printf andiostreams. See  Speed tests and  Fast integer to string conversion in C++.\n Small code size both in terms of source code (the minimum configurationconsists of just three header files,  core.h,  format.h and format-inl.h) and compiled code. See  Compile time and code bloat.\n  Safety: the library is fully type safe, errors in format strings can bereported at compile time, automatic memory management prevents buffer overflowerrors.\n     fmt::print(  &#34;Hello, {}! &#34;,   &#34;world &#34;);   // Python-like format string syntax fmt::printf(  &#34;Hello, %s! &#34;,   &#34;world &#34;);   // printf format string syntax\n  std::string s = fmt::format(  &#34;I&#39;d rather be {1} than {0}. &#34;,   &#34;right &#34;,   &#34;happy &#34;);  // s == &#34;I&#39;d rather be happy than right.&#34;\n   $ c++ -Iinclude -std=c++14 test.cc...test.cc:4:17: note: in instantiation of function template specialization &#39;fmt::v5::format&lt;S, int&gt;&#39; requested herestd::string s = format(FMT_STRING(&#34;{2}&#34;), 42); ^include/fmt/core.h:778:19: note: non-constexpr function &#39;on_error&#39; cannot be used in a constant expression ErrorHandler::on_error(message); ^include/fmt/format.h:2226:16: note: in call to &#39;&amp;checker.context_-&gt;on_error(&amp;&#34;argument index out of range&#34;[0])&#39; context_.on_error(&#34;argument index out of range&#34;); ^\n  fmt::memory_buffer buf; format_to(buf,   &#34;{} &#34;,  42);   // replaces itoa(42, buffer, 10) format_to(buf,   &#34;{:x} &#34;,  42);   // replaces itoa(42, buffer, 16)  // access the string with to_string(buf) or buf.data()\n  # include   &#34;fmt/format.h &#34; struct  date {  int year, month, day;}; template &lt;&gt; struct  fmt::formatter&lt;date&gt; {  constexpr  auto  parse(format_parse_context&amp; ctx) {  return ctx. begin(); }  template &lt; typename FormatContext&gt;  auto  format( const date&amp; d, FormatContext&amp; ctx) {  return  format_to(ctx. out(),   &#34;{}-{}-{} &#34;, d. year, d. month, d. day); }};std::string s = fmt::format(  &#34;The date is {} &#34;, date{ 2012,  12,  9});  // s == &#34;The date is 2012-12-9&#34;\n  // Prints formatted error message. void  vreport_error( const  char* format, fmt::format_args args) {  fmt::print(  &#34;Error:  &#34;);  fmt::vprint(format, args);} template &lt; typename... Args&gt; void  report_error( const  char* format,  const Args &amp; ... args) {  vreport_error(format,  fmt::make_format_args(args...));} report_error(  &#34;file not found: {} &#34;, path);\n Note that  vreport_error is not parameterized on argument types which canimprove compile times and reduce code size compared to a fully parameterizedversion.\n       The above results were generated by building  tinyformat_test.cpp on macOS10.14.6 with  clang++ -O3 -DSPEED_TEST -DHAVE_FORMAT, and taking the best ofthree runs. In the test, the format string  &#34;%0.10f:%04d:%+g:%s:%p:%c:%%\\n&#34;or equivalent is filled 2,000,000 times with output sent to  /dev/null; forfurther details refer to the  source.\n {fmt} is 10x faster than  std::ostringstream and  sprintf on floating-pointformatting ( dtoa-benchmark)and as fast as  double-conversion:\n     The script  bloat-test.pyfrom  format-benchmarktests compile time and code bloat for nontrivial projects.It generates 100 translation units and uses  printf() or its alternativefive times in each to simulate a medium sized project. The resultingexecutable size and compile time (Apple LLVM version 8.1.0 (clang-802.0.42),macOS Sierra, best of three) is shown in the following tables.\n   As you can see, {fmt} has 60% less overhead in terms of resulting binary codesize compared to iostreams and comes pretty close to  printf. Boost Formatand Folly Format have the largest overheads.\n printf+string is the same as  printf but with extra  &lt;string&gt;include to measure the overhead of the latter.\n   libc,  lib(std)c++ and  libfmt are all linked as shared libraries tocompare formatting function overhead only. Boost Format is aheader-only library so it doesn&#39;t provide any linkage options.\n   Please refer to  Building the library for the instructions on how to buildthe library and run the unit tests.\n Benchmarks reside in a separate repository, format-benchmarks,so to run the benchmarks you first need to clone this repository andgenerate Makefiles with CMake:\n        Scylla: A Cassandra-compatible NoSQL data storethat can handle 1 million transactions per second on a single server\n  If you are aware of other projects using this library, please let me knowby  email or by submitting an issue.\n    There are plenty of methods for doing this task, from standard ones likethe printf family of function and iostreams to Boost Format and FastFormatlibraries. The reason for creating a new library is that every existingsolution that I found either had serious issues or didn&#39;t provideall the features I needed.\n   The good thing about  printf is that it is pretty fast and readily availablebeing a part of the C standard library. The main drawback is that itdoesn&#39;t support user-defined types.  printf also has safety issues althoughthey are somewhat mitigated with  __attribute__ ((format (printf, ...)) in GCC.There is a POSIX extension that adds positional arguments required for i18nto  printf but it is not a part of C99 and may not be available on someplatforms.\n       Matthew Wilson, the author of FastFormat, called this &#34;chevron hell&#34;. iostreamsdon&#39;t support positional arguments by design.\n The good part is that iostreams support user-defined types and are safe althougherror handling is awkward.\n   This is a very powerful library which supports both  printf-like formatstrings and positional arguments. Its main drawback is performance. According tovarious benchmarks it is much slower than other methods considered here. BoostFormat also has excessive build times and severe code bloat issues (see Benchmarks).\n   This is an interesting library which is fast, safe and has positionalarguments. However it has significant limitations, citing its author:\n  It is also quite big and has a heavy dependency, STLSoft, which might betoo restrictive for using it in some projects.\n   This is not really a formatting library but I decided to include it here forcompleteness. As iostreams, it suffers from the problem of mixing verbatim textwith arguments. The library is pretty fast, but slower on integer formattingthan  fmt::format_int on Karma&#39;s own benchmark,see  Fast integer to string conversion in C++.\n     template &lt; typename... Args&gt; auto  capture( const Args&amp;... args) {  return  std::make_tuple(args...);} auto print_message = []( const  auto&amp;... args) {  fmt::print(args...);};  // Capture and store arguments: auto args = capture(  &#34;{} {} &#34;,  42,   &#34;foo &#34;);  // Do formatting: std::apply(print_message, args);\n    The  Format String Syntaxsection in the documentation is based on the one from Python  string moduledocumentationadapted for the current library. For this reason the documentation isdistributed under the Python Software Foundation license available in doc/python-license.txt.It only applies if you distribute the documentation of fmt.\n   The {fmt} library is maintained by Victor Zverovich ( vitaut) and Jonathan M\u00fcller ( foonathan) with contributions from many other people.See  Contributors and Releases for some of the names.Let us know if your contribution is not listed or mentioned incorrectly andwe&#39;ll make it right.\n The benchmark section of this readme file and the performance tests are takenfrom the excellent  tinyformat librarywritten by Chris Foster. Boost Format library is acknowledged transitivelysince it had some influence on tinyformat.Some ideas used in the implementation are borrowed from  Loki SafeFormat and  Diagnostic API in Clang.Format string syntax and the documentation are based on Python&#39;s  str.format.Thanks  Doug Turnbull for his valuablecomments and contribution to the design of the type-safe API and Gregory Czajkowski for implementing binaryformatting. Thanks  Ruslan Baratov for comprehensive comparison of integer formatting algorithmsand useful comments regarding performance,  Boris Kaul for C++ counting digits benchmark.Thanks to  CarterLi for contributing variousimprovements to the code.", "posttime": "2020-05-25 06:25:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u73b0\u4ee3,modern,format", "title": "FMT--\u73b0\u4ee3\u683c\u5f0f\u5e93", "title_en": "Fmt \u2013 A Modern Formatting Library", "transed": 1, "url": "https://github.com/fmtlib/fmt", "via": "", "real_tags": ["\u73b0\u4ee3", "modern", "format"]}, {"category": "", "categoryclass": "", "imagename": "e4bc290a41253db0e5d032b846d32d1f.jpeg", "infoid": 1003570, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3\u8b66\u544a\u79f0\uff0c\u7531\u4e8e\u7f8e\u56fd\u5404\u5730\u7684\u9910\u5385\u4ecd\u5728\u5173\u95e8\u4ee5\u51cf\u7f13\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u8001\u9f20\u5728\u5bfb\u627e\u98df\u7269\u7684\u8fc7\u7a0b\u4e2d\u53d8\u5f97\u8d8a\u6765\u8d8a\u5484\u5484\u903c\u4eba\u3002\n\u7531\u4e8e\u8bb8\u591a\u9910\u5385\u73b0\u5728\u53ea\u63d0\u4f9b\u5916\u5356\u670d\u52a1\uff0c\u8fc7\u53bb\u88c5\u6ee1\u6b8b\u6e23\u548c\u5783\u573e\u7684\u5783\u573e\u7bb1\u5df2\u7ecf\u53d8\u5f97\u7a7a\u8361\u8361\u7684\u591a\u4e86-\u5b83\u4eec\u6b63\u53d8\u5f97\u7edd\u671b\u3002\n\u4e00\u4e9b\u53f8\u6cd5\u7ba1\u8f96\u533a\u62a5\u544a\u8bf4\uff0c\u968f\u7740\u556e\u9f7f\u52a8\u7269\u5bfb\u627e\u65b0\u7684\u98df\u7269\u6765\u6e90\uff0c\u556e\u9f7f\u52a8\u7269\u7684\u6d3b\u52a8\u6709\u6240\u589e\u52a0\u3002\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3\u5728\u4e0a\u5468\u53d1\u5e03\u7684\u62a5\u544a\u4e2d\u8bf4\uff0c\u73af\u5883\u5065\u5eb7\u548c\u556e\u9f7f\u52a8\u7269\u63a7\u5236\u9879\u76ee\u53ef\u80fd\u4f1a\u589e\u52a0\u4e0e\u556e\u9f7f\u52a8\u7269\u6709\u5173\u7684\u670d\u52a1\u8bf7\u6c42\uff0c\u4ee5\u53ca\u5173\u4e8e\u4e0d\u5bfb\u5e38\u6216\u653b\u51fb\u6027\u556e\u9f7f\u52a8\u7269\u884c\u4e3a\u7684\u62a5\u544a\u3002\n\u5b83\u5efa\u8bae\u5c01\u9501\u8fdb\u5165\u5bb6\u5ead\u548c\u4f01\u4e1a\u7684\u901a\u9053\uff0c\u6e05\u9664\u6742\u7269\u548c\u8302\u5bc6\u7684\u690d\u88ab\uff0c\u5c06\u5783\u573e\u653e\u5728\u76d6\u5f97\u4e25\u5bc6\u7684\u5783\u573e\u7bb1\u91cc\uff0c\u5e76\u5c06\u5ba0\u7269\u548c\u9e1f\u98df\u4ece\u9662\u5b50\u91cc\u79fb\u8d70\uff0c\u4ee5\u62b5\u5fa1\u5bb3\u866b\u3002\n\u636e\u5bb3\u866b\u63a7\u5236\u516c\u53f8Rentokil\u79f0\uff0c\u5c45\u6c11\u533a\u9644\u8fd1\u556e\u9f7f\u52a8\u7269\u6d3b\u52a8\u7684\u589e\u52a0\u5f15\u8d77\u4e86\u536b\u751f\u5f53\u5c40\u7684\u5173\u6ce8\uff0c\u5df2\u77e5\u8001\u9f20\u4f1a\u4f20\u64ad\u5305\u62ec\u6c99\u95e8\u6c0f\u83cc\u548c\u97e6\u5c14\u6c0f\u75c5\u5728\u5185\u7684\u75be\u75c5\u3002\n\u5728\u7f8e\u56fd\u7684\u51e0\u4e2a\u4e3b\u8981\u57ce\u5e02\uff0c\u6709\u62a5\u9053\u79f0\u7edd\u671b\u7684\u8001\u9f20\u6210\u7fa4\u7ed3\u961f\u5730\u5728\u8857\u4e0a\u5bfb\u627e\u98df\u7269\u3002\n\u636e\u54e5\u4f26\u6bd4\u4e9a\u5e7f\u64ad\u516c\u53f8\u65b0\u95fb\u62a5\u9053\uff0c\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u7684\u89c6\u9891\u663e\u793a\u8001\u9f20\u5728\u901a\u5e38\u6324\u6ee1\u72c2\u6b22\u8005\u7684\u7a7a\u8361\u8361\u7684\u8857\u9053\u4e0a\u5954\u8dd1\u540e\uff0c\u65b0\u5965\u5c14\u826f\u5f53\u5c40\u53d1\u8d77\u4e86\u4e00\u573a\u8bf1\u6355\u548c\u6251\u706d\u556e\u9f7f\u52a8\u7269\u7684\u8fd0\u52a8\u3002\u8fd9\u5ea7\u57ce\u5e02\u7684\u5e02\u957f\u62c9\u6258\u4e9a\u00b7\u574e\u7279\u96f7\u5c14(LaToya Canrell)\u8bf4\uff0c\u8fd9\u4e9b\u8001\u9f20\u5feb\u75af\u4e86\u3002\n\u5728\u7ebd\u7ea6\u5e02\uff0c\u5f53\u5c40\u627f\u8bfa\u52a0\u5f3a\u4e0e\u8001\u9f20\u7684\u6597\u4e89\uff0c\u6709\u62a5\u9053\u79f0\uff0c\u556e\u9f7f\u52a8\u7269\u805a\u96c6\u5728\u7b2c\u516d\u5927\u9053\u7684\u5783\u573e\u4e2d\uff0c\u751a\u81f3\u8bc9\u8bf8\u6740\u5a74\u548c\u5403\u4eba\u6765\u751f\u5b58\u3002\n\u57ce\u5e02\u556e\u9f7f\u5b66\u5bb6\u9c8d\u6bd4\u00b7\u79d1\u91cc\u6839\u544a\u8bc9\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d\uff0c\u4e00\u4f4d\u5bb3\u866b\u4e13\u5bb6\u5728\u7687\u540e\u533a\u4e00\u573a\u53ef\u6015\u7684\u8001\u9f20\u5927\u6218\u540e\u7ed9\u4ed6\u5bc4\u6765\u4e86\u4e00\u5f20\u7167\u7247\u3002\u79d1\u91cc\u6839\u8ba4\u4e3a\uff0c\u4e00\u7fa4\u9965\u997f\u7684\u8001\u9f20\u76f8\u4e92\u653b\u51fb\u3002\u4eba\u884c\u9053\u4e0a\u53ea\u5269\u4e0b\u4e00\u5806\u8001\u9f20\u7684\u56db\u80a2\u3002", "note_en": "Rats are growing increasingly aggressive in their hunt for food as restaurants across the US remain shuttered to slow the spread of the coronavirus, the Centers for Disease Control and Prevention has warned.\n With many restaurants now only open for takeout services, the bins that used to be filled with scraps and refuse the rodents once feasted on are much emptier \u2014 and they are getting desperate.\n &#34;Some jurisdictions have reported an increase in rodent activity as rodents search for new sources of food. Environmental health and rodent control programs may see an increase in service requests related to rodents and reports of unusual or aggressive rodent behavior,&#34;  said the CDC in their release last week.\n   It advises that &#34;sealing up access into homes and businesses, removing debris and heavy vegetation, keeping garbage in tightly covered bins, and removing pet and bird food from their yards&#34; to ward off the pests.\n   The increased rodent activity around residential neighborhoods has health authorities concerned, with rats known to spread illnesses including salmonella and Weil&#39;s disease,  according to pest control firm Rentokil.\n In several major cities in the US, reports have emerged of desperate rats swarming the streets in the search for food.\n Authorities in New Orleans have launched a campaign to trap and kill the rodents,  reported CBS News,\u00a0after videos on social media showed rats scurrying through empty streets usually thronged with revelers. The city&#39;s mayor, LaToya Cantrell, said the rats were going &#34;crazy.&#34;\n In New York City authorities have pledged to step up the fight against rats, amid reports of rodents swarming garbage on 6th Avenue and even  resorting to infanticide and cannibalism to survive.\n   Urban rodentologist Bobby Corrigan told  The Washington Post that a pest expert sent him a photo after a gruesome rat battle in Queens. A hungry nest of rats had turned on each other, Corrigan believes. A pile of rat limbs on the sidewalk was all that remained.", "posttime": "2020-05-25 05:20:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u98df\u7269,rats,\u556e\u9f7f\u52a8\u7269", "title": "\u9910\u5385\u98df\u7269\u4f9b\u5e94\u6d88\u5931\uff0c\u9965\u997f\u7684\u8001\u9f20\u53d8\u6210\u98df\u4eba\u65cf", "title_en": "Starving rats turning into cannibals as restaurant food supply disappears", "transed": 1, "url": "https://www.businessinsider.com/coronavirus-hungry-rats-grow-aggressive-as-us-restaurants-remain-shut-2020-5", "via": "", "real_tags": ["app", "\u98df\u7269", "rats", "\u556e\u9f7f\u52a8\u7269"]}, {"category": "", "categoryclass": "", "imagename": "de002d08a862da5e5e6bcde2e806c0b9.png", "infoid": 1003569, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7531\u4e8e\u9700\u6c42\u5927\u5e45\u4e0b\u964d\uff0c\u5728\u7ecf\u5386\u4e86\u6570\u5468\u7684\u8270\u96be\u4e4b\u540e\uff0c\u6c7d\u8f66\u79df\u8d41\u5de8\u5934\u8d6b\u5179(Hertz)\u4e8e\u5468\u4e94\u6df1\u591c\u6839\u636e\u7834\u4ea7\u6cd5\u7b2c11\u7ae0\u7533\u8bf7\u7834\u4ea7\u4fdd\u62a4\u3002\u81ea\u4ece\u51a0\u72b6\u75c5\u6bd2\u5371\u673a\u5f00\u59cb\u4ee5\u6765\uff0c\u8d6b\u5179\u4e00\u76f4\u5728\u52aa\u529b\u8ba9\u81ea\u5df1\u7684\u5934\u8131\u79bb\u503a\u52a1\uff0c\u4f3c\u4e4e\u8be5\u516c\u53f8\u5df2\u7ecf\u575a\u6301\u4e86\u5c3d\u53ef\u80fd\u957f\u7684\u65f6\u95f4\u3002\u5b83\u7684\u4e8c\u624b\u8f66\u8f66\u961f\u73b0\u5728\u6b63\u5728\u6295\u653e\u5e02\u573a\uff0c\u4e00\u5bb6\u516c\u53f8\u7684\u4e0d\u5e78\u5f88\u5feb\u5c31\u4f1a\u6210\u4e3a\u4e00\u4e9b\u8d2d\u8f66\u8005\u7684\u6740\u624b\u950f\u3002\n\u636e\u6c7d\u8f66\u65b0\u95fb\u62a5\u9053\uff0c\u5728\u4e0e\u503a\u6743\u4eba\u8fdb\u884c\u4e86\u7d27\u5f20\u7684\u4e00\u5929\u8c08\u5224\u540e\uff0c\u8d6b\u5179\u7533\u8bf7\u4e86\u7834\u4ea7\u6cd5\u7b2c11\u7ae0\u7684\u7834\u4ea7\u4fdd\u62a4\u3002\u867d\u7136\u7834\u4ea7\u6cd5\u7b2c11\u7ae0\u5141\u8bb8\u8be5\u516c\u53f8\u7ee7\u7eed\u8fd0\u8425\uff0c\u4ee5\u89e3\u51b3\u5982\u4f55\u507f\u8fd8\u503a\u52a1\uff0c\u5e76\u6709\u671b\u626d\u8f6c\u4e1a\u52a1\uff0c\u4f46\u8fd9\u5bb6\u6c7d\u8f66\u79df\u8d41\u516c\u53f8\u7684\u60c5\u51b5\u76f8\u5f53\u53ef\u6015\uff1a\n\u8d6b\u5179\u8868\u793a\uff0c\u5b83\u670910\u4ebf\u7f8e\u5143\u7684\u73b0\u91d1\u6765\u652f\u6301\u5176\u4e1a\u52a1\uff0c\u5176\u4e2d\u5305\u62ec\u8d6b\u5179\u3001\u7f8e\u5143\u3001\u8282\u4fed\u3001\u8424\u706b\u866b\u3001\u8d6b\u5179\u6c7d\u8f66\u9500\u552e\u548c\u5510\u4f26\u3002\u4f46\u8d6b\u5179\u8868\u793a\uff0c\u5b83\u53ef\u80fd\u9700\u8981\u7b79\u96c6\u66f4\u591a\u8d44\u91d1\uff0c\u6216\u8bb8\u662f\u5728\u7834\u4ea7\u8fc7\u7a0b\u63a8\u8fdb\u7684\u540c\u65f6\u901a\u8fc7\u589e\u52a0\u501f\u6b3e\u6765\u7b79\u96c6\u3002\n\u6cd5\u9662\u7684\u8bf7\u613f\u4e66\u5217\u51fa\u4e86\u7ea6258\u4ebf\u7f8e\u5143\u7684\u8d44\u4ea7\u548c244\u4ebf\u7f8e\u5143\u7684\u503a\u52a1\u3002\u6587\u4ef6\u663e\u793a\uff0c\u8be5\u516c\u53f8\u6700\u5927\u7684\u503a\u6743\u4eba\u5305\u62ecIBM Corp.\u548cLyft Inc.\u3002\n\u8d6b\u5179\u4f20\u7edf\u4e0a\u4e00\u76f4\u662f\u5e95\u7279\u5f8b3\u548c\u5176\u4ed6\u6c7d\u8f66\u5236\u9020\u5546\u8f66\u961f\u6c7d\u8f66\u7684\u4e3b\u8981\u4e70\u5bb6\u3002\u6839\u636e\u7f8e\u56fd\u63d0\u4ea4\u7684\u4e00\u4efd\u6587\u4ef6\uff0c\u53bb\u5e74\uff0c\u8d6b\u5179\u5728\u5176\u7f8e\u56fd\u8f66\u961f\u4e2d\u6301\u6709\u591a\u8fbe56.76\u4e07\u8f86\u6c7d\u8f66\uff0c\u5728\u56fd\u9645\u90e8\u95e8\u6301\u670920.4\u4e07\u8f86\u6c7d\u8f66\uff0c\u5728\u7f8e\u56fd\u7684\u5e73\u5747\u6301\u6709\u671f\u4e3a18\u4e2a\u6708\uff0c\u56fd\u9645\u6c7d\u8f66\u6301\u6709\u671f\u4e3a12\u4e2a\u6708\u3002\n\u6839\u636e\u5907\u6848\u6587\u4ef6\uff0c\u5176\u8f66\u961f\u8f66\u8f86\u7684\u6700\u5927\u4f9b\u5e94\u5546\u662f\u901a\u7528\u6c7d\u8f66(21%)\u3001\u83f2\u4e9a\u7279\u514b\u83b1\u65af\u52d2(18%)\u3001\u798f\u7279(12%)\u3001\u8d77\u4e9a(10%)\u3001\u4e30\u7530(9%)\u3001\u65e5\u4ea7(7%)\u548c\u73b0\u4ee3(5%)\u3002\ufeff\u3002\n\u8d6b\u5179\u901a\u5e38\u79df\u8d41\u5176\u8f66\u961f\uff0c\u800c\u4e0d\u662f\u4e0e\u5176\u5408\u4f5c\u7684\u6c7d\u8f66\u516c\u53f8\u8fdb\u884c\u56de\u8d2d\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8d6b\u5179\u4f1a\u5728\u9700\u6c42\u4e0b\u964d\u65f6\u7b80\u5355\u5730\u51fa\u552e\u591a\u4f59\u7684\u6c7d\u8f66\uff0c\u4f46\u968f\u7740\u4e8c\u624b\u8f66\u9700\u6c42\u968f\u7740\u65c5\u884c\u7684\u51cf\u5c11\u800c\u4e0b\u964d(\u8d6b\u5179\u7684\u5927\u90e8\u5206\u4e1a\u52a1\u90fd\u662f\u5728\u673a\u573a\u5f00\u5c55\u7684)\uff0c\u8be5\u516c\u53f8\u65e0\u6cd5\u7ef4\u6301\u8d1f\u503a\u3002\u4f46\u629b\u552e\u5e93\u5b58\u53ef\u80fd\u8fd8\u4e0d\u591f\u3002\n\u5728\u5f53\u524d\u7684\u5371\u673a\u4e2d\uff0c\u4e8c\u624b\u8f66\u7684\u4ef7\u683c\u4e00\u76f4\u4e0d\u7a33\u5b9a\uff0c\u4f46\u73b0\u5728\u4f3c\u4e4e\u4ed6\u4eec\u5df2\u7ecf\u51b3\u5b9a\u9009\u62e9\u2026\n\u591a\u8bfb\u3002\n\u8d6b\u5179\u5df2\u7ecf\u8bd5\u7740\u5356\u51fa\u8db3\u591f\u591a\u7684\u6c7d\u8f66\u6765\u7ef4\u6301\u8fd0\u8425\uff0c\u4f46\u6ca1\u6709\u594f\u6548\u3002\u636e\u7f8e\u56fd\u6709\u7ebf\u7535\u89c6\u65b0\u95fb\u7f51(CNN)\u62a5\u9053\uff0c3\u6708\u521d\uff0c\u8d6b\u5179\u5728\u7f8e\u56fd\u552e\u51fa\u4e864.1\u4e07\u8f86\u4e8c\u624b\u8f66\uff0c\u4f46\u7531\u4e8e\u56de\u62a5\u840e\u7f29\u548c\u6c7d\u8f66\u62cd\u5356\u505c\u6b62\uff0c\u8d6b\u5179\u8e29\u4e0b\u4e86\u5239\u8f66\u3002\u4e8c\u624b\u8f66\u4ef7\u683c\u968f\u540e\u57284\u6708\u4efd\u4e0b\u8dcc\u4e8634.4%\u3002\u5e02\u573a\u4e0a\u5927\u91cf\u7684\u65b0\u5e93\u5b58\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u538b\u4f4e\u4ef7\u683c\uff0c\u4f7f\u8d6b\u5179\u6781\u96be\u8d70\u51fa\u56f0\u5883\u3002\n\u6c7d\u8f66\u5236\u9020\u5546\u4e5f\u62c5\u5fc3\u79df\u8f66\u5e02\u573a\u7684\u9ebb\u70e6\u3002\u53bb\u5e74\uff0c\u6c7d\u8f66\u79df\u8d41\u8f66\u961f\u5360\u7f8e\u56fd\u6c7d\u8f66\u9500\u91cf\u768410%\uff1b\u5df2\u7ecf\u906d\u53d7\u91cd\u521b\u7684\u6c7d\u8f66\u5236\u9020\u5546\u627f\u53d7\u4e0d\u8d77\u635f\u5931\u3002\u8d6b\u5179\u8fd8\u89e3\u96c7\u4e86\u7f8e\u56fd\u76841.2\u4e07\u540d\u5458\u5de5\uff0c\u53e6\u6709\u7ea64000\u540d\u5458\u5de5\u88ab\u6682\u65f6\u89e3\u96c7-\u8fd9\u4e00\u4f11\u5047\u53ef\u80fd\u4f1a\u88ab\u8bc1\u660e\u662f\u6c38\u4e45\u6027\u7684\u3002\n\u5468\u4e00\uff0c\u8d6b\u5179\u5728\u4e8c\u624b\u8f66\u5e02\u573a\u4e0a\u4ee5\u4e00\u7b14\u5212\u7b97\u7684\u4ef7\u683c\u629b\u552e\u4e86\u4e00\u5806\u5927\u9ec4\u8702\u989c\u8272\u7684\u514b\u5c14\u7ef4\u7279Z06\u3002\u5728\u7533\u8bf7\u516c\u544a\u516c\u5e03\u540e\uff0c\u5468\u516d\u4e0a\u5348\u8d6b\u5179\u7684\u7f51\u7ad9\u4e0a\u6d8c\u73b0\u51fa\u66f4\u591a\u7684\u4e8c\u624b\u8f66\u4ea4\u6613\u3002\u8fd9\u662f\u4e00\u8f862020\u5e74\u7684\u5b9d\u9a6c740i\uff0c\u552e\u4ef752,949\u7f8e\u5143\uff0c\u91cc\u7a0b\u8868\u4e0a\u7684\u884c\u9a76\u91cc\u7a0b\u53ea\u67098,595\u82f1\u91cc\uff0c\u4f8b\u5982\uff0c\u6bd4\u540c\u4e00\u5730\u533a\u7c7b\u4f3c\u91cc\u7a0b\u7684\u540c\u7c7b\u6c7d\u8f66\u6574\u6574\u5c11\u4e865,000-8,000\u7f8e\u5143\u3002\n\u4e5f\u6709\u5f88\u591a\u4e0d\u90a3\u4e48\u534e\u4e3d\u7684\u8f66\u53ef\u4ee5\u4e70\u5230\u50cf\u6837\u7684\u4ea4\u6613\uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u5728\u5e02\u573a\u4e0a\u5bfb\u627e\u4e00\u8f86\u65e7\u7684\u79df\u8f66\u5907\u7528\u8f66\uff0c\u6bd4\u5982\u4e00\u8f86\u4e30\u7530\u5361\u7f57\u62c9(Toyota Corolla)\u6216\u4e00\u8f86\u96ea\u4f5b\u5170\u5854\u970d(Chevy Tahoe)\u3002\u5982\u679c\u4e00\u5bb6\u6210\u7acb\u4e8e1918\u5e74\u7684\u516c\u53f8\u4e0d\u5f97\u4e0d\u5012\u95ed\uff0c\u6d88\u8d39\u8005\u4e0d\u59a8\u628a\u9aa8\u5934\u6311\u5e72\u51c0\u3002", "note_en": "After weeks of hardship due to decimated demand, the car rental giant Hertz filed for Chapter 11 Bankruptcy late Friday night.   Hertz has been struggling to keep its head above water since the Covid-19 crisis began, and it seems the company has held out for as long as it could. Its fleet of used cars are now hitting the market, and one company\u2019s misfortune will soon become some car buyer\u2019s killer deal.\n  After a   tense day of talks with creditors, Hertz filed for Chapter 11 Bankruptcy, according to   Automotive News. While Chapter 11 allows the company to continue to operate in order to figure out how to pay debts and hopefully turn the business around, the situation for the car rental company is pretty dire:\n Hertz said it had $1 billion in cash to support its operations, which include Hertz, Dollar, Thrifty, Firefly, Hertz Car Sales, and Donlen. But it might need to raise more, perhaps through added borrowings while the bankruptcy process moves forward, Hertz said.\n The court petition listed about $25.8 billion in assets and $24.4 billion of debts. Its biggest creditors include IBM Corp. and Lyft Inc., according to the document.\n Hertz has traditionally been a leading buyer of fleet cars from the Detroit 3 and other automakers. Last year, Hertz held as many as 567,600 vehicles in its U.S. fleet and 204,000 in its international unit, holding those in the U.S. for an average of 18 months and international vehicles for 12 months, according to a U.S. filing.\n Its biggest suppliers of fleet vehicles were General Motors (21 percent), Fiat Chrysler (18 percent), Ford (12 percent), Kia (10 percent), Toyota (9 percent), Nissan (7 percent) and Hyundai (5 percent), according to the filing.\ufeff\n    Hertz normally leases its fleet, instead of doing buybacks with the auto companies it works with. Normally, Hertz would simply sell off excessive vehicles when demand dropped, but with the used car demand dropping along with travel (Hertz does most of its business at airports) the company had no way to keep its head above water. But selling off inventory may not be enough.\n Used car prices have been wonky through the current crisis, but it now seems they\u2019ve decided on\u2026\n Read more\n  Hertz already tried selling enough cars to stay afloat, and it didn\u2019t work. In early March Hertz sold 41,000 used cars in the U.S., but pumped the brakes as returns shrank and auto auctions stopped, according to   CNN. Used car prices then fell 34.4 percent in April. A ton of new inventory on the market will likely push prices down even more, making it extremely difficult for Hertz to climb out of the hole it is in.\n  Automakers are also worried about the trouble in the rental car market. Last year car rental fleets accounted for 10 percent of U.S. auto sales; sales already suffering automakers can ill-afford to lose. Hertz also let go of 12,000 employees in the U.S., while some 4,000 were furloughed\u2014a furlough which may prove permanent.\n  On Monday, Hertz dumped a bunch of bumble bee-colored Corvette z06s on to the used car market for a   heck of a good deal. More used car deals were rolling in Saturday morning on Hertz\u2019s website after the filing announcement. Here\u2019s a   2020 BMW 740i for $52,949 and only 8,595 miles on the odometer,   a full $5,000-$8,000 less than similar cars with similar milage in the same area, for instance.\n There are plenty of less flashy cars for decent deals as well, especially if you\u2019re in the market for one of the old rental car standbys, like a Toyota Corolla or a Chevy Tahoe. If a company that has been around since 1918 has to die, consumers might as well pick the bones clean.", "posttime": "2020-05-25 05:04:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6c7d\u8f66,car,\u8d6b\u5179", "title": "\u8d6b\u5179\u6c7d\u8f66\u79df\u8d41\u516c\u53f8\u7533\u8bf7\u7834\u4ea7", "title_en": "Hertz Car Rental Files for Bankruptcy", "transed": 1, "url": "https://jalopnik.com/hertzs-late-night-bankruptcy-filing-sends-ripples-throu-1843628287", "via": "", "real_tags": ["\u6c7d\u8f66", "car", "\u8d6b\u5179"]}, {"category": "", "categoryclass": "", "imagename": "390eabb8be9c52ede60496f5097d56d3.jpg", "infoid": 1003568, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Microsoft\u548cAltran\u53d1\u5e03\u4ee3\u7801\u7f3a\u9677AI\uff0c\u4ee5\u8bc6\u522b\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u6f5c\u5728\u95ee\u9898\u5e76\u63d0\u51fa\u4fee\u590d\u5efa\u8bae\u3002\nAltran\u53d1\u5e03\u4e86\u4e00\u6b3e\u65b0\u5de5\u5177\uff0c\u8be5\u5de5\u5177\u4f7f\u7528\u4eba\u5de5\u667a\u80fd(AI)\u5e2e\u52a9\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u5728\u7f16\u7801\u7ed3\u675f\u65f6\u53d1\u73b0\u9519\u8bef\u3002\n\u5728GitHub\u4e0a\u63d0\u4f9b\u7684Code Defect AI\u4f7f\u7528\u673a\u5668\u5b66\u4e60(ML)\u6765\u5206\u6790\u73b0\u6709\u4ee3\u7801\uff0c\u53d1\u73b0\u65b0\u4ee3\u7801\u4e2d\u7684\u6f5c\u5728\u95ee\u9898\uff0c\u5e76\u5efa\u8bae\u6d4b\u8bd5\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\u9519\u8bef\u3002\nAltran\u96c6\u56e2\u9996\u5e2d\u521b\u65b0\u5b98Walid Negm\u8bf4\uff0c\u8fd9\u4e2a\u65b0\u5de5\u5177\u5c06\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u53d1\u5e03\u9ad8\u8d28\u91cf\u4ee3\u7801\u3002\n\u4ed6\u5728\u4e00\u4efd\u65b0\u95fb\u7a3f\u4e2d\u8868\u793a\uff0c\u8f6f\u4ef6\u53d1\u5e03\u5468\u671f\u9700\u8981\u80fd\u591f\u5e2e\u52a9\u505a\u51fa\u6218\u7565\u5224\u65ad\u7684\u7b97\u6cd5\uff0c\u7279\u522b\u662f\u5728\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u7684\u60c5\u51b5\u4e0b\u3002\n\u4ee3\u7801\u7f3a\u9677\u4eba\u5de5\u667a\u80fd\u4f7f\u7528\u4e86\u51e0\u79cdML\u6280\u672f\uff0c\u5305\u62ec\u968f\u673a\u51b3\u7b56\u68ee\u6797\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u591a\u5c42\u611f\u77e5\u5668(MLP)\u548cLogistic\u56de\u5f52\u3002\u8be5\u5e73\u53f0\u5bf9\u5386\u53f2\u6570\u636e\u8fdb\u884c\u63d0\u53d6\u3001\u5904\u7406\u548c\u6807\u6ce8\uff0c\u8bad\u7ec3\u7b97\u6cd5\uff0c\u5efa\u7acb\u53ef\u9760\u7684\u51b3\u7b56\u6a21\u578b\u3002\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u4ee3\u7801\u7f3a\u9677AI\u4e2d\u7684\u7f6e\u4fe1\u5ea6\u5206\u6570\u6765\u9884\u6d4b\u4ee3\u7801\u662f\u517c\u5bb9\u7684\u8fd8\u662f\u6709\u9519\u8bef\u7684\u3002\n\u5bf9\u4e8e\u5f00\u653e\u6e90\u7801\u7684GitHub\u9879\u76ee\uff0c\u5386\u53f2\u6570\u636e\u662f\u4f7f\u7528RESTful\u63a5\u53e3\u548cGitCLI\u6536\u96c6\u7684\u3002\u6b64\u6570\u636e\u5305\u62ec\u5b8c\u6574\u7684\u63d0\u4ea4\u5386\u53f2\u8bb0\u5f55\u548c\u5b8c\u6574\u7684\u9519\u8bef\u5386\u53f2\u8bb0\u5f55\u3002\n\u5c06\u7279\u5f81\u8bc6\u522b\u3001\u6807\u7b7e\u7f16\u7801\u3001\u4e00\u6b21\u70ed\u7f16\u7801\u3001\u6570\u636e\u7f29\u653e\u548c\u5f52\u4e00\u5316\u7b49\u9884\u5904\u7406\u6280\u672f\u5e94\u7528\u4e8e\u6536\u96c6\u7684\u5386\u53f2\u63d0\u4ea4\u6570\u636e\u3002\n\u5bf9\u9884\u5904\u7406\u540e\u7684\u6570\u636e\u8fdb\u884c\u6807\u8bb0\u3002\u6807\u8bb0\u8fc7\u7a0b\u6d89\u53ca\u7406\u89e3\u4e3a\u6bcf\u4e2a\u5df2\u5173\u95ed\u7684\u95ee\u9898\u6807\u8bb0\u4fee\u590d\u63d0\u4ea4(\u9519\u8bef\u5df2\u88ab\u5173\u95ed)\u7684\u6a21\u5f0f\u3002\u5728\u6536\u96c6\u4fee\u590d\u63d0\u4ea4\u4e4b\u540e\uff0c\u901a\u8fc7\u56de\u6eaf\u4fee\u590d\u63d0\u4ea4\u4e2d\u6bcf\u4e2a\u6587\u4ef6\u7684\u5386\u53f2\u66f4\u6539\u6765\u8bc6\u522b\u5f15\u5165\u9519\u8bef\u7684\u63d0\u4ea4\u3002\n\u5982\u679c\u4e0e\u5e72\u51c0\u8bb0\u5f55\u76f8\u6bd4\uff0c\u6570\u636e\u96c6\u5305\u542b\u7684\u9519\u8bef\u6570\u636e\u975e\u5e38\u5c11\uff0c\u5219\u8fd8\u4f1a\u751f\u6210\u5408\u6210\u6570\u636e\uff0c\u4ee5\u907f\u514d\u504f\u5411\u591a\u6570\u7c7b\u3002\n\u4e00\u65e6\u5b58\u5728\u5177\u6709\u53ef\u63a5\u53d7\u7684\u7cbe\u786e\u5ea6\u548c\u53ec\u56de\u503c\u7684\u6a21\u578b\uff0c\u5c31\u90e8\u7f72\u6240\u9009\u6a21\u578b\u4ee5\u9884\u6d4b\u65b0\u7684\u63d0\u4ea4\u3002\n\u4ee3\u7801\u7f3a\u9677AI\u652f\u6301\u4e0e\u7b2c\u4e09\u65b9\u5206\u6790\u5de5\u5177\u7684\u96c6\u6210\uff0c\u53ef\u4ee5\u5e2e\u52a9\u8bc6\u522b\u7ed9\u5b9a\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u3002\u6b64\u5916\uff0c\u4ee3\u7801\u7f3a\u9677\u4eba\u5de5\u667a\u80fd\u5de5\u5177\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u8bc4\u4f30\u4ee3\u7801\u4e2d\u7684\u54ea\u4e9b\u529f\u80fd\u5728\u9519\u8bef\u4fee\u590d\u65b9\u9762\u5e94\u8be5\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002\n\u5fae\u8f6f\u4eba\u5de5\u667a\u80fd\u5e02\u573a\u90e8\u603b\u7ecf\u7406\u5927\u536b\u00b7\u5361\u83ab\u7eb3\u5728\u4e00\u4efd\u65b0\u95fb\u7a3f\u4e2d\u8868\u793a\uff0c\u5fae\u8f6f\u548cAltran\u4e00\u76f4\u5728\u5408\u4f5c\u6539\u5584\u8f6f\u4ef6\u5f00\u53d1\u5468\u671f\uff0c\u7531Microsoft Azure\u63d0\u4f9b\u652f\u6301\u7684Code Defect AI\u662f\u4e00\u79cd\u521b\u65b0\u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u6765\u5e2e\u52a9\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u3002\n\u4ee3\u7801\u7f3a\u9677AI\u53ef\u4ee5\u6258\u7ba1\u5728\u672c\u5730\uff0c\u4e5f\u53ef\u4ee5\u6258\u7ba1\u5728Microsoft Azure\u7b49\u4e91\u8ba1\u7b97\u5e73\u53f0\u4e0a\u3002\u8be5\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4e0e\u5176\u4ed6\u6e90\u4ee3\u7801\u7ba1\u7406\u5de5\u5177\u96c6\u6210\u3002\n\u5728\u4e00\u4efd\u5173\u4e8e\u4eba\u5de5\u667a\u80fd\u548c\u8f6f\u4ef6\u5f00\u53d1\u7684\u65b0\u62a5\u544a\u4e2d\uff0c\u5fb7\u52e4\u9884\u6d4b\uff0c\u5c06\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u516c\u53f8\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u8f85\u52a9\u7f16\u7801\u5de5\u5177\u3002\u4ece2018\u5e741\u6708\u52302019\u5e749\u6708\uff0c\u8f6f\u4ef6\u4f9b\u5e94\u5546\u63a8\u51fa\u4e86\u6570\u5341\u4e2a\u81f4\u529b\u4e8e\u8fd9\u4e00\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u548c\u521d\u521b\u4f01\u4e1a\uff0c\u5e76\u5728\u7c7b\u4f3c\u7684\u65f6\u95f4\u6846\u67b6\u5185\u7b79\u96c6\u4e867.04\u4ebf\u7f8e\u5143\u3002\n\u5fb7\u52e4(Deloitte)\u5206\u6790\u5e08\u5927\u536b\u00b7\u6c99\u8328\u57fa(David Schatsky)\u548c\u82cf\u62c9\u5e03\u00b7\u90a6\u5e03(Sourabh Bumb)\u8868\u793a\uff0c\u8fd9\u4e9b\u5e73\u53f0\u6700\u5927\u7684\u597d\u5904\u662f\u6548\u7387\u3002\u4ed6\u4eec\u8457\u6709\u201c\u4eba\u5de5\u667a\u80fd\u6b63\u5728\u5e2e\u52a9\u5236\u9020\u66f4\u597d\u7684\u8f6f\u4ef6\u201d\u4e00\u4e66\u3002\u4eba\u5de5\u667a\u80fd\u8f85\u52a9\u7f16\u7801\u7684\u597d\u5904\u5f88\u591a\u3002\u7136\u800c\uff0c\u5bf9\u516c\u53f8\u6765\u8bf4\uff0c\u6700\u4e3b\u8981\u7684\u597d\u5904\u662f\u6548\u7387\u3002\u8bb8\u591a\u65b0\u7684\u4eba\u5de5\u667a\u80fd\u652f\u6301\u7684\u5de5\u5177\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u62fc\u5199\u548c\u8bed\u6cd5\u68c0\u67e5\u5668\uff0c\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u5c06\u4ed6\u4eec\u9700\u8981\u952e\u5165\u7684\u51fb\u952e\u6b21\u6570\u51cf\u5c11\u7ea650%\u3002\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u53d1\u73b0\u9519\u8bef\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u81ea\u52a8\u5316\u786e\u8ba4\u8f6f\u4ef6\u8d28\u91cf\u6240\u9700\u7684\u591a\u8fbe\u4e00\u534a\u7684\u6d4b\u8bd5\u3002\u968f\u7740\u516c\u53f8\u7ee7\u7eed\u4f9d\u8d56\u5f00\u6e90\u4ee3\u7801\uff0c\u8fd9\u4e00\u80fd\u529b\u53d8\u5f97\u66f4\u52a0\u91cd\u8981\u3002\u5fb7\u52e4\u7684\u62a5\u544a\u53ef\u4ee5\u663e\u8457\u52a0\u5feb\u7f16\u7801\u8fc7\u7a0b\uff0c\u5c06\u5f00\u53d1\u4eba\u5458\u9700\u8981\u952e\u5165\u7684\u51fb\u952e\u6b21\u6570\u51cf\u5c11\u4e00\u534a\uff0c\u751a\u81f3\u5728\u4ee3\u7801\u5ba1\u67e5\u6216\u6d4b\u8bd5\u4e4b\u524d\u5c31\u80fd\u6355\u83b7\u9519\u8bef\uff0c\u5e76\u81ea\u52a8\u751f\u6210\u8d28\u91cf\u4fdd\u8bc1\u6240\u9700\u7684\u4e00\u534a\u6d4b\u8bd5\u3002\n\u6839\u636e\u8be5\u62a5\u544a\uff0c\u8fd9\u4e9b\u5de5\u5177\u6700\u9002\u5408\u8f6f\u4ef6\u5f00\u53d1\u6d41\u7a0b\u7684\u8fd9\u4e9b\u8981\u7d20\uff1a\n\u4ece\u6700\u70ed\u95e8\u7684\u7f16\u7a0b\u8bed\u8a00\u5230\u85aa\u6c34\u6700\u9ad8\u7684\u5de5\u4f5c\uff0c\u83b7\u53d6\u60a8\u9700\u8981\u4e86\u89e3\u7684\u5f00\u53d1\u4eba\u5458\u65b0\u95fb\u548c\u63d0\u793a\u3002\u6bcf\u5468\u3002\n\u4eca\u5929\u62a5\u540d", "note_en": "Microsoft and Altran release Code Defect AI to identify potential problems in software development and suggest fixes.\n  Altran has released a new tool that uses  artificial intelligence (AI) to help software engineers spot bugs during the coding process instead of at the end.\n Available on GitHub,  Code Defect AI uses  machine learning (ML) to analyze existing code, spot potential problems in new code, and suggest tests to diagnose and fix the errors.\n Walid Negm, group chief innovation officer at Altran, said that this new tool will help developers release quality code quickly.\n &#34;The software release cycle needs algorithms that can help make strategic judgments, especially as code gets more complex,&#34; he said in a press release.\n  Code Defect AI uses several ML techniques including random decision forests, support vector machines, multilayer perceptron (MLP) and logistic regression. The platform extracts, processes and labels historical data to train the algorithm and build a reliable decision model. Developers can use a confidence score from Code Defect AI that predicts whether the code is compliant or buggy.\n    For an open source GitHub project, historical data is collected using RESTFul interfaces and Git CLI. This data includes complete commit history and complete bugs history.\n Preprocessing techniques like feature identification, label encoding, one hot encoding, data scaling and normalization are applied to the collected historical commit data.\n Labelling is performed on the preprocessed data. The labelling process involves understanding of the pattern in which the fix commits (where a bug has been closed) are tagged for each of the closed issues. After the fix commits are collected, the commits which introduced the bugs are identified by backtracking on historical changes for each file in a fix commit.\n If a data set contains a very small amount of bug data as compared with clean records, synthetic data is also generated to avoid bias toward the majority class.\n  Once there is a model that has acceptable value of precision and recall, the selected model is deployed for prediction on new commits.\n Code Defect AI supports integration with third-party analysis tools and can help identify bugs in a given program code. Also, the Code Defect AI tool allows developers to assess which features in the code should take higher priority in terms of bug fixes.\n &#34;Microsoft and Altran have been working together to improve the software development cycle, and Code Defect AI, powered by Microsoft Azure, is an innovative tool that can help software developers through the use of machine learning,&#34; said David Carmona, general manager of AI marketing at Microsoft, in a press release.\n  Code Defect AI can be hosted on premises as well as on cloud computing platforms such as  Microsoft Azure. The solution can be integrated with other source-code management tools as needed.\n  In a new report about artificial intelligence and software development, Deloitte predicts that more and more companies will use AI-assisted coding tools. From January 2018 to September 2019, software vendors launched dozens of AI-powered software development tools and startups working in this space, and raised $704 million over a similar timeframe.\n The biggest benefit from these platforms is efficiency, according to Deloitte analysts David Schatsky and Sourabh Bumb, the authors of &#34; AI is helping to make better software:&#34;  &#34;The benefits of AI-assisted coding are numerous. However, the principal benefit for companies is efficiency. Many of the new AI-powered tools work in a similar way to spell- and grammar-checkers, enabling coders to reduce the number of keystrokes they need to type by around 50%. They can also spot bugs while code is being written, while they can also automate as many as half of the tests needed to confirm the quality of software.&#34;  This capability is even more important as companies continue to rely on open-source code.  The Deloitte report can speed up the coding process significantly by &#34;reducing the number of keystrokes developers need to type by half, catching bugs even prior to code review or testing, and automatically generating half of the tests needed for quality assurance.&#34;\n According to the report, these tools are best suited for these elements of the software development process:\n  From the hottest programming languages to the jobs with the highest salaries, get the developer news and tips you need to know. Weekly\n      Sign up today", "posttime": "2020-05-25 04:49:17", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4eba\u5de5\u667a\u80fd,\u4ee3\u7801,ai,\u8f6f\u4ef6", "title": "Altran\u7684\u201c\u4ee3\u7801\u7f3a\u9677\u4eba\u5de5\u667a\u80fd\u201d\u4e0e\u4eba\u5de5\u667a\u80fd\u8f85\u52a9\u7f16\u7801\u5de5\u5177\u7684\u5174\u8d77", "title_en": "Altran's 'Code Defect AI' and the Rise of AI-Assisted Coding Tools", "transed": 1, "url": "https://www.techrepublic.com/article/machine-learning-tool-trains-on-old-code-to-spot-bugs-in-new-code/", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u4ee3\u7801", "ai", "\u8f6f\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003567, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2041-8205/895/1/L11\u751f\u7269\u5206\u5b50\u9009\u62e9\u4e86\u4e24\u4e2a\u7ed3\u6784\u4e0a\u7684\u624b\u6027\u4f53\u7cfb\u4e2d\u7684\u4e00\u4e2a\uff0c\u8fd9\u4e24\u4e2a\u4f53\u7cfb\u901a\u8fc7\u955c\u9762\u53cd\u5c04\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u6709\u4eba\u63d0\u51fa\uff0c\u8fd9\u4e00\u9009\u62e9\u662f\u7531\u5b87\u5b99\u5c04\u7ebf\u505a\u51fa\u7684\uff0c\u5b87\u5b99\u5c04\u7ebf\u5df2\u77e5\u5728\u8bf1\u53d8\u8fc7\u7a0b\u4e2d\u8d77\u7740\u91cd\u8981\u4f5c\u7528\u3002\u7814\u7a76\u8868\u660e\uff0c\u4eca\u5929\u5728\u5730\u9762\u4e0a\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u78c1\u6781\u5316\u5b87\u5b99\u5c04\u7ebf\u53ef\u4ee5\u5728\u5b83\u4eec\u8bf1\u5bfc\u7b80\u5355\u7684\u624b\u6027\u5355\u4f53\u7ed3\u6784\u53d8\u5316\u7684\u901f\u5ea6\u4e0a\u65bd\u52a0\u5fae\u5c0f\u4f46\u6301\u4e45\u7684\u624b\u6027\u504f\u5dee\uff0c\u800c\u7b80\u5355\u7684\u624b\u6027\u5355\u4f53\u662f\u751f\u7269\u805a\u5408\u7269\u7684\u57fa\u77f3\u3002\u87ba\u65cb\u751f\u7269\u805a\u5408\u7269\u5e94\u8be5\u6709\u66f4\u5927\u7684\u5f71\u54cd\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u53ef\u80fd\u662f\u6838\u7cd6\u6838\u9178\u548c\u8131\u6c27\u6838\u7cd6\u6838\u9178\u524d\u4f53\u7684\u805a\u5408\u7269\u3002\u7ed3\u679c\u8868\u660e\uff0c\u76f8\u4e92\u4f5c\u7528\u65e2\u53ef\u4ee5\u662f\u9759\u7535\u7684\uff0c\u53ea\u6d89\u53ca\u5206\u5b50\u7535\u573a\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u7535\u78c1\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u78c1\u573a\u7684\u3002\u6709\u4eba\u4e89\u8fa9\u8bf4\uff0c\u8fd9\u79cd\u504f\u89c1\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u8fdb\u5316\u65f6\u95f4\u5c3a\u5ea6\u4e0a\u51fa\u73b0\u5355\u4e00\u7684\u624b\u6027\u751f\u547d\u5f62\u5f0f\u3002\u5982\u679c\u8fd9\u4e00\u673a\u5236\u5360\u4e3b\u5bfc\u5730\u4f4d\uff0c\u90a3\u4e48\u751f\u547d\u7cfb\u7edf\u7684\u60ef\u7528\u624b\u5e94\u8be5\u662f\u666e\u904d\u7684\u3002\u5efa\u8bae\u8fdb\u884c\u5b9e\u9a8c\u4ee5\u8bc4\u4f30\u6b64\u8fc7\u7a0b\u7684\u6709\u6548\u6027\u3002\n\u6709\u751f\u547d\u7684\u6709\u673a\u4f53\u7531\u7528\u7279\u5b9a\u7684\u60ef\u7528\u624b\u7ec4\u7ec7\u8d77\u6765\u7684\u5206\u5b50\u7cfb\u7edf\u7ec4\u6210\u3002\u624b\u6027-\u6216\u624b\u6027-\u6309\u7167\u5f00\u5c14\u6587\u7684\u539f\u59cb\u5b9a\u4e49\uff0c\u662f\u4e00\u4e2a\u7269\u4f53\u7684\u51e0\u4f55\u5c5e\u6027\uff0c\u4e0d\u80fd\u53e0\u52a0\u5728\u5b83\u7684\u955c\u50cf\u4e0a(\u5f00\u5c14\u65871894)\u3002\u5728\u5316\u5b66\u4e0a\uff0c\u540c\u4e00\u624b\u6027\u5206\u5b50\u7684\u955c\u50cf\u79f0\u4e3a\u5bf9\u6620\u4f53\u30024\u4e24\u8005\u5177\u6709\u76f8\u540c\u7684\u5316\u5b66\u7279\u6027\u3002\n\u6838\u7cd6\u6838\u9178\u548c\u8131\u6c27\u6838\u7cd6\u6838\u9178(RNA\u548cDNA)\u8d1f\u8d23\u9057\u4f20\u4fe1\u606f\u7684\u590d\u5236\u548c\u5b58\u50a8\uff0c\u7531\u5177\u6709\u76f8\u540c\u624b\u6027\u7684\u6784\u5efa\u5757\u7ec4\u6210\u7684\u7ebf\u6027\u5e8f\u5217\u7ec4\u6210\uff0c\u79f0\u4e3a\u6838\u82f7\u9178\uff0c\u5176\u6392\u5217\u65e2\u4e0d\u662f\u5468\u671f\u6027\u7684\u4e5f\u4e0d\u662f\u968f\u673a\u7684\uff0c\u5305\u542b\u7ef4\u6301\u751f\u547d\u6240\u9700\u7684\u9057\u4f20\u4fe1\u606f(Schr\u00f6dinger 1944\uff1bShannon 1948\uff1bWatson&Amp\uff1bCrick 1953\uff1bShinitzky\u7b49\u4eba)\u3002(2007\u5e74)\u3002\u6838\u82f7\u9178\u7684\u624b\u6027\u8d4b\u4e88\u4e86\u6838\u9178\u87ba\u65cb\u7ed3\u6784\u3002\u6838\u9178\u662f\u975e\u5e38\u5927\u7684\u5206\u5b50\uff0c\u624b\u6027\u5355\u5143\u4e4b\u95f4\u7684\u626d\u8f6c\u89d2\u6709\u7cfb\u7edf\u5730\u53d8\u5316\uff0c\u5982Ramachandran\u56fe(Keting\u7b49\u4eba)\u6240\u793a\u3002(2011)\uff0c\u8fd9\u8868\u660e\u5373\u4f7f\u662f\u67d4\u6027\u751f\u7269\u805a\u5408\u7269\u4e5f\u4fdd\u6301\u624b\u6027\u3002\u56e0\u4e3aRNA\u548cDNA\u662f\u7531D-\u7cd6\u7ec4\u6210\u7684(\u6309\u7167\u4eba\u7c7b\u60ef\u4f8b\uff0c\u53f3\u65cb)\uff0c\u66f4\u7a33\u5b9a\u7684\u6784\u8c61\u662f\u53f3\u65cb\u87ba\u65cb(\u89c1\u56fe1)\u3002\u7cd6\u7684\u540c\u6e90\u6027\u5bf9\u87ba\u65cb\u7684\u7a33\u5b9a\u6027\u6709\u91cd\u8981\u5f71\u54cd\uff0c\u56e0\u6b64\u5bf9\u9057\u4f20\u5bc6\u7801\u7684\u4fdd\u771f\u5ea6\u6216\u8bef\u5dee\u63a7\u5236\u4e5f\u6709\u91cd\u8981\u5f71\u54cd\u3002\u6240\u670920\u4e2a\u7f16\u7801\u7684\u6c28\u57fa\u9178\u90fd\u662f\u5de6\u6487\u5b50(\u540c\u6837\u662f\u6309\u7167\u4eba\u7c7b\u60ef\u4f8b)\u3002\u6709\u65f6\uff0c\u540c\u4e00\u5206\u5b50\u7684\u4e24\u4e2a\u5bf9\u6620\u4f53\u88ab\u6d3b\u7684\u6709\u673a\u4f53\u4f7f\u7528\uff0c\u4f46\u6570\u91cf\u4e0d\u540c\uff0c\u5b83\u4eec\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\u3002\n\u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\u89c2\u5bdf\u5230\u7684\u57fa\u4e8eDNA/RNA\u7684\u751f\u547d\u663e\u7136\u9009\u62e9\u4e86\u4e00\u79cd\u529f\u80fd\u6027\u624b\u6027\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u751f\u6d3b\uff0c\u4f46\u53e6\u4e00\u79cd\u9009\u62e9\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u90aa\u6076\uff0c\u53ef\u80fd\u5df2\u7ecf\u6cbf\u7740\u4e00\u6761\u72ec\u7acb\u7684\u3001\u540c\u6b65\u7684\u9053\u8def\u53d1\u5c55\u8d77\u6765\uff0c\u505a\u51fa\u4e86\u7c7b\u4f3c\u7684\u8fdb\u5316\u9009\u62e9\uff0c\u4ee5\u5e94\u5bf9\u5171\u540c\u73af\u5883\u7684\u53d8\u5316\uff0c\u9664\u4e86\u975e\u5e38\u5c0f\u7684\u5f71\u54cd\uff0c\u8fd9\u662f\u8fd9\u5c01\u4fe1\u7684\u4e3b\u8981\u4e3b\u9898\u3002\u7136\u800c\uff0c\u8003\u8651\u5230\u9ad8\u590d\u5236\u7387\uff0c\u5728\u8fd9\u4e24\u4e2a\u9009\u62e9\u4e4b\u95f4\u5b9e\u73b0\u7cbe\u786e\u7684\u5e73\u8861\u4f3c\u4e4e\u662f\u4e0d\u592a\u53ef\u80fd\u7684\u3002\u6709\u4e00\u4e2a\u5c0f\u7684\u71b5\u4ee3\u4ef7\uff0c\u4f46\u8fd9\u80af\u5b9a\u662f\u7531\u66f4\u5927\u7684\u4fe1\u606f\u5b58\u50a8\u8bbe\u65bd\u548c\u66f4\u9ad8\u7684\u590d\u5236\u53ef\u9760\u6027\u6765\u652f\u4ed8\u7684(\u859b\u5b9a\u8c141944)\u3002\n\u5bf9\u4e8e\u4eca\u5929\u7684DNA\u6765\u8bf4\uff0c\u8f90\u5c04\u589e\u52a0\u4e86\u57fa\u56e0\u7a81\u53d8\u7684\u9891\u7387\uff1b\u8fd9\u4e00\u70b9\u81eaMuller(1927\u5e74)\u7684\u5f00\u521b\u6027\u5de5\u4f5c\u4ee5\u6765\u5c31\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u8be5\u5de5\u4f5c\u8868\u660e\u7a81\u53d8\u7387\u4e0e\u8f90\u5c04\u5242\u91cf\u6210\u6b63\u6bd4\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u53ef\u5f52\u56e0\u4e8e\u5b87\u5b99\u5c04\u7ebf\u7684\u7535\u79bb\u3002\u00b5\u5b50\u6210\u5206\u5728100 MeV\u4ee5\u4e0a\u7684\u80fd\u91cf\u4e0b\u4e3b\u5bfc\u7740\u5730\u9762\u7c92\u5b50\u7684\u901a\u91cf\uff0c\u8d21\u732e\u4e86\u5b87\u5b99\u5c04\u7ebf\u8f90\u5c04\u5242\u91cf\u768485%(Atri&Amp\uff1bMelott 2011)\u3002\u00b5\u5b50\u7684\u80fd\u91cf\u8db3\u4ee5\u7a7f\u900f\u76f8\u5f53\u6df1\u7684\u5730\u65b9\uff0c\u800c\u4e14\u5b83\u4eec\u5e73\u5747\u800c\u8a00\u662f\u81ea\u65cb\u6781\u5316\u7684\u3002\u81ea\u65cb\u6781\u5316\u8f90\u5c04\u7684\u7535\u79bb\u53ef\u4ee5\u662f\u5bf9\u6620\u9009\u62e9\u6027\u7684(Zel&#39\uff1bdovich\u7b49\u4eba)\u30021977\u5e74)\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8ba4\u4e3a\u6d3b\u7684\u548c\u90aa\u6076\u7684\u6709\u673a\u4f53\u7684\u7a81\u53d8\u7387\u662f\u4e0d\u540c\u7684\u3002\u7531\u4e8e\u6700\u65e9\u548c\u6700\u7b80\u5355\u7684\u751f\u547d\u5f62\u5f0f\u53ef\u80fd\u6709\u6570\u5341\u4ebf\u751a\u81f3\u6570\u4e07\u4ebf\u4ee3\uff0c\u7a81\u53d8\u7387\u7684\u5fae\u5c0f\u5dee\u5f02\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7ef4\u6301\u4e24\u79cd\u65e9\u671f\u624b\u6027\u9009\u62e9\u4e2d\u7684\u4e00\u79cd\u3002\n\u5f53\u5df4\u65af\u5fb7\u53d1\u73b0\u751f\u7269\u7684\u540c\u8d28\u6027\u65f6\uff0c\u4ed6\u8ba4\u8bc6\u5230\u5b83\u662f\u81ea\u7136\u89c4\u5f8b\u4e2d\u67d0\u4e9b\u4e0d\u5bf9\u79f0\u7684\u7ed3\u679c\uff1a\u5982\u679c\u751f\u547d\u7684\u57fa\u7840\u662f\u4e0d\u5bf9\u79f0\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u8d77\u6e90\u662f\u4e0d\u5bf9\u79f0\u7684\u5b87\u5b99\u529b\uff0c\u8fd9\u662f\u5730\u7403\u4e0a\u7684\u751f\u547d\u548c\u5b87\u5b99\u4e4b\u95f4\u7684\u8054\u7cfb\u4e4b\u4e00(\u5df4\u65af\u5fb71860)\u3002\u5982\u679c\u5df4\u65af\u5fb7\u8fd8\u6d3b\u7740\u4e00\u4e2a\u4e16\u7eaa\u4ee5\u540e\uff0c\u5f31\u76f8\u4e92\u4f5c\u7528\u4e2d\u5947\u5076\u7834\u574f\u7684\u53d1\u73b0(Lee&Amp\uff1bYang\uff0c1956\uff1bWu\u7b49\u4eba)\u30021957\u5e74)\u4f1a\u5f3a\u5316\u4ed6\u7684\u89c2\u70b9\u3002\u5f53\u7269\u4f53\u7684\u955c\u50cf\u5728\u81ea\u7136\u754c\u4e2d\u4e0d\u5b58\u5728\u65f6\uff0c\u7531\u4e8e\u5f31\u76f8\u4e92\u4f5c\u7528\u4e2d\u7684\u5b87\u79f0\u7834\u574f\uff0c\u7269\u4f53\u8868\u73b0\u51fa\u7269\u7406\u624b\u6027\u3002R\n\u5982\u679c\u6211\u4eec\u5bfb\u627e\u4e00\u79cd\u901a\u7528\u7684\u624b\u6027\u5149\u6e90\uff0c\u4f7f\u5176\u59cb\u7ec8\u53d1\u51fa\u4e00\u79cd\u504f\u632f\u800c\u4e0d\u662f\u53e6\u4e00\u79cd\u504f\u632f\uff0c\u90a3\u4e48\u4e3a\u4e86\u89e3\u91ca\u666e\u904d\u7684\u4e0d\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u518d\u6b21\u88ab\u5f31\u76f8\u4e92\u4f5c\u7528\u6240\u5438\u5f15\u3002\u4e00\u79cd\u9009\u62e9\u662f\u8c03\u7528\u81ea\u65cb\u6781\u5316\u7c92\u5b50\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u010cerenkov\u8f90\u5c04\u6216\u97e7\u81f4\u8f90\u5c04\u8f90\u5c04\u4e00\u79cd\u611f\u89c9\u7684\u5706\u504f\u632f\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f18\u5148\u5149\u89e3\u5355\u624b\u624b\u6027\u5206\u5b50(Vester\u7b49\u4eba)\u30021959\u5e74\uff1bLahoti&amp\uff1bTakwale 1977\uff1bGusev&amp\uff1bGuseva 2019\u5e74)\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u8c03\u7528\u8d85\u65b0\u661f\u4e2d\u5fae\u5b50(Boyd\u7b49\u4eba\uff0c(2018\u5e74)\u3002\u7136\u800c\uff0c\u8f83\u5c0f\u7684\u624b\u6027\u504f\u5411\u4e0d\u592a\u53ef\u80fd\u5bfc\u81f4\u540c\u624b\u6027\u72b6\u6001\uff0c\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u76ca\u751f\u83cc\u6269\u589e\u673a\u5236\u3002\u8fd9\u8868\u660e\uff0c\u76f8\u53cd\uff0c\u5728\u8fd9\u4e24\u4e2a\u751f\u547d\u7cfb\u7edf\u7684\u8fdb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u8981\u8003\u8651\u5230\u5bf9\u6620\u9009\u62e9\u6027\u504f\u89c1\u3002\n\u9996\u5148\uff0c\u8003\u8651\u4e00\u4e2a\u5c0f\u7684\u624b\u6027\u5206\u5b50\u7684\u6a21\u578b\uff0c\u5b83\u662f\u8f83\u5927\u7684\u87ba\u65cb\u805a\u5408\u7269\u7684\u4e00\u90e8\u5206(\u89c1\u56fe1)\uff0c\u6211\u4eec\u5c06\u5176\u7406\u60f3\u5316\u4e3a\u4e00\u4e2a\u4e0d\u76f8\u7b49\u7684\u4e09\u811a\u67b6\u3002\u5728\u539f\u70b9\u6709\u4e00\u4e2a\u9876\u70b9\u6216\u76ee\u6807\uff0c\u4ee5\u53ca\u4e09\u4e2a\u5e26\u6709\u4f4d\u7f6e\u77e2\u91cf\u7684\u53ef\u533a\u5206\u7684\u539f\u5b50\u6216\u7fa4\u3002\u8fd9\u56db\u4e2a\u70b9\u7684\u70b9\u7535\u8377\u5b58\u5728\u4e00\u4e2a\u7ecf\u5178\u7684\u9759\u7535\u573a\u3002\u5f15\u5165\u4e00\u4e2a\u4f2a\u6807\u91cf(\u53cd\u5c04\u4e0b\u6539\u53d8\u7b26\u53f7)\u5206\u5b50\u624b\u6027\u662f\u6709\u5e2e\u52a9\u7684\uff0c\u5b83\u5fc5\u987b\u5728\u53cd\u5c04\u65f6\u6539\u53d8\u7b26\u53f7\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u660e\u786e\u7684\u9009\u62e9\u662f\u3002\n\u7b2c\u4e8c\u4e2a\u7b80\u5355\u7684\u534a\u7ecf\u5178\u6a21\u578b\u5c06\u7535\u8377\u548c\u7535\u6d41\u9650\u5236\u5728\u56f4\u7ed5\u4e2d\u5fc3\u6838\u7535\u8377\u7684\u7403\u4f53\u8868\u9762\uff0c\u8be5\u4e2d\u5fc3\u6838\u7535\u8377\u88ab\u7403\u4f53\u4e0a\u7684\u51c0\u7535\u8377\u62b5\u6d88\u3002\u7535\u6d41\u5141\u8bb8\u7535\u78c1\u624b\u6027\uff0c\u5177\u6709\u6700\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\u3002\u8fd9\u4e24\u79cd\u6a21\u578b\u9002\u7528\u4e8e\u5929\u7136\u87ba\u65cb\u751f\u7269\u805a\u5408\u7269\u7684\u5c0f\u5206\u5b50\u6216\u5355\u4f53\u3002\n\u6211\u4eec\u7684\u7b2c\u4e09\u4e2a\u7b80\u5355\u6a21\u578b\u6d89\u53ca\u5706\u67f1\u5f62\u7684\u9759\u7535\u52bf\uff0c\u5c31\u50cf\u7406\u53d1\u6746\u4e00\u6837(\u89c1\u74e6\u683c\u7eb3\u7b49\u4eba)\u30021997)\uff0c\u5176\u4e2dk&gt\uff1b\u4e3a0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u9009\u62e9\u5206\u5b50\u624b\u6027\u4f5c\u4e3a\u6d3b(\u6076)\u5206\u5b50\u7684\u624b\u6027\u3002\u8fd9\u4e9b\u5b9a\u4e49\u5982\u56fe1\u6240\u793a\u3002\n\u5e26\u7535\u7684\u5b87\u5b99\u5c04\u7ebf\u8d28\u5b50\uff0c\u5176\u80fd\u91cf\u7565\u9ad8\u4e8e\u03c0\u5b50\u4ea7\u751f\u7684\u9608\u503c\uff0c\u4e0e\u9ad8\u5c42\u5927\u6c14\u4e2d\u7684\u6c2e\u548c\u6c27\u6838\u76f8\u649e\uff0c\u4ea7\u751f\u03c0+\uff0c\u03c0\u2212\u6838(Gaisse2012)\u3002\u03c0+\u5728\u51e0\u7c73\u5185\u8870\u53d8\u6210\u03bc+\uff0c\u534a\u8870\u671f\u7ea6\u4e3a2\u03bcs\uff0c\u534a\u8870\u671f\u4e3ae+\u3002\u7531\u4e8e\u4ecb\u5b50\u6ca1\u6709\u81ea\u65cb\uff0c\u8870\u53d8\u5f88\u5f31\uff0c\u03bc+\u548ce+\u81ea\u65cb\u65b9\u5411\u4f18\u5148\u4e0e\u5b83\u4eec\u7684\u8fd0\u52a8\u65b9\u5411\u53cd\u5bf9\u9f50\uff0c\u4ee5\u4fbf\u5e73\u8861\u4f34\u968f\u7684\u4e2d\u5fae\u5b50\u7684\u53cd\u5e73\u884c\u81ea\u65cb(\u56fe2)\u3002\u76f8\u5173\u7684\u78c1\u5076\u6781\u77e9\u7531\u4e0b\u5f0f\u7ed9\u51fa\u3002\u03c0\u2212\u4f1a\u8870\u53d8\u6210\u03bc\u2212\uff0ce\u2212\u5177\u6709\u4f18\u5148\u5bf9\u9f50\u7684\u81ea\u65cb\uff0c\u4f46\u78c1\u77e9\u4e5f\u662f\u53cd\u5bf9\u9f50\u7684(\u89c1\u56fe2\u548c\u9644\u5f55A)\u3002\n\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u4f2a\u6807\u91cf--\u5bb9\u79ef\u91cf(\u5728\u78c1\u77f3\u4e4b\u540e)\u6765\u8868\u793a\u5b87\u5b99\u5c04\u7ebf\u7684\u7269\u7406\u624b\u6027\u3002\u8fd9\u7531\u4ee5\u4e0b\u5b9a\u4e49\u3002\n\u8fd9\u91cc\u6211\u4eec\u5bf9\u6240\u6709\u7b2c\u4e00\u7c7b\u548c\u52a8\u80fdT\u7684\u5b87\u5b99\u5c04\u7ebf\u8fdb\u884c\u5e73\u5747\uff0c\u8fdc\u8fdc\u9ad8\u4e8e\u9608\u503c\uff0c\u5bf9\u4e8e\u65b0\u521b\u5efa\u7684\u03bc\uff0c\u5bf9\u4e8e\u65b0\u7684e\uff0c\u5728\u03c0\u9759\u6b62\u6846\u67b6\u4e2d(\u89c1\u9644\u5f55)\u3002\u4f1a\u8fdb\u4e00\u6b65\u9000\u5316\uff0c\u56e0\u4e3a\u5b87\u5b99\u5c04\u7ebf\u901a\u8fc7\u7c97\u7565\u5730\u6563\u5c04\u7535\u5b50\u800c\u635f\u5931\u80fd\u91cf\u3002\u6b64\u5916\uff0c\u6b21\u7ea7\u7535\u5b50\u5c06\u5927\u90e8\u5206\u662f\u672a\u6781\u5316\u7684\uff0c\u5e76\u8fdb\u4e00\u6b65\u964d\u4f4e\u7167\u5c04\u5206\u5b50\u7684\u5b87\u5b99\u5c04\u7ebf\u7684\u5bb9\u9650\u3002\n\u5728\u4eca\u5929\u7684\u6d77\u5e73\u9762\u4e0a\uff0c\u5927\u591a\u6570\u5b87\u5b99\u5c04\u7ebf\u662f\u5e73\u5747\u901a\u91cf~160m\u22122 s\u22121(Lipari 1993)\u7684\u00b5\u5b50\u3002\u7136\u800c\uff0c\u901a\u91cf\u548c\u5927\u6c14\u53ef\u80fd\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff1b\u5e74\u8f7b\u7684\u592a\u9633\u548c\u5b83\u7684\u98ce\u53ef\u80fd\u8981\u6d3b\u8dc3\u5f97\u591a\u3002\u6211\u4eec\u79f0\u4e4b\u4e3a\u55b7\u6cc9\u7684\u539f\u751f\u751f\u7269\u573a\u6240\u53ef\u80fd\u4f4d\u4e8e\u5ca9\u77f3\u3001\u6c34\u6216\u51b0\u4e4b\u4e0b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6539\u53d8\u6dcb\u6d74\u7684\u6027\u8d28\u548c\u5bb9\u7eb3\u91cf\u3002\n\u6211\u4eec\u73b0\u5728\u8f6c\u5411\u5c06\u5b87\u5b99\u5c04\u7ebf\u7684\u5bb9\u9650\u4e0e\u5206\u5b50\u624b\u6027\u76f8\u8026\u5408\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u6211\u4eec\u5bfb\u6c42\u4e00\u79cd\u4e0e\u4ea7\u7269\u6210\u6b63\u6bd4\u7684\u6548\u5e94\uff0c\u8fd9\u79cd\u6548\u5e94\u5c06\u533a\u5206\u66b4\u9732\u5728\u76f8\u540c\u5b87\u5b99\u5c04\u7ebf\u901a\u91cf\u4e0b\u7684\u6d3b\u5206\u5b50\u548c\u90aa\u6076\u5206\u5b50-\u624b\u6027\u504f\u5411\u3002\u8fd9\u79cd\u6548\u5e94\u5fc5\u987b\u8f6c\u5316\u4e3a\u6700\u7ec8\u7a81\u53d8\u7387\u7684\u5dee\u5f02\uff0c\u8fd9\u4e00\u9014\u5f84\u5373\u4f7f\u5728\u5f53\u4ee3\u751f\u7269\u5b66\u4e2d\u4e5f\u77e5\u4e4b\u751a\u5c11\u3002\u9ad8\u80fd\u7c92\u5b50\u53ef\u4ee5\u5c40\u90e8\u6fc0\u53d1\u7535\u5b50(Rosenfeld\uff0c1928)\u3002\u901a\u5e38\uff0c\u53bb\u6fc0\u52b1\u662f\u5feb\u901f\u4e14\u65e0\u8f90\u5c04\u7684\uff0c\u5e76\u4e14\u6d89\u53ca\u632f\u52a8\u548c\u65cb\u8f6c\u6a21\u5f0f\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u5185\u90e8\u8f6c\u6362\u53ef\u4ee5\u5f15\u8d77\u5206\u5b50\u7ed3\u6784\u7684\u5c40\u90e8\u53d8\u5316\u3002\u5b87\u5b99\u8f90\u5c04\u8fd8\u4f1a\u8bf1\u5bfc\u7535\u79bb\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u751f\u7269\u5206\u5b50\u7684\u7535\u5b50\u7ed3\u6784\u53d1\u751f\u53d8\u5316\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u7a81\u53d8\u3002\u4eca\u5929\uff0cDNA\u5927\u6982\u6bd4\u7b2c\u4e00\u79cd\u9057\u4f20\u751f\u7269\u805a\u5408\u7269\u66f4\u4e0d\u5bb9\u6613\u51fa\u9519\u3002\u4fee\u590d\u4e5f\u53ef\u80fd\u662f\u751f\u547d\u5f00\u59cb\u65f6\u7684\u4e00\u4e2a\u56e0\u7d20\u3002\n\u8fd9\u91cc\u5047\u8bbe\u5b87\u5b99\u5c04\u7ebf\u672c\u8eab\u5728\u7a7a\u95f4\u4e0a\u662f\u5747\u5300\u7684\uff0c\u5e76\u4e14\u76f8\u5bf9\u4e8e\u5206\u5b50\u662f\u5404\u5411\u540c\u6027\u5206\u5e03\u7684\u3002\u5b83\u4eec\u7684\u5b87\u5b99\u7ebf\u5e73\u5747\u78c1\u77e9\u4e5f\u88ab\u63a8\u5b9a\u4e3a\u4e25\u683c\u53cd\u5e73\u884c\uff0c\u5c3d\u7ba1\u6563\u5c04\u8fc7\u7a0b\u6216\u5916\u90e8\u78c1\u573a\u53ef\u4ee5\u5728\u548c\u4e4b\u95f4\u5f15\u5165\u4e00\u4e2a\u89d2\u5ea6\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u9759\u7535\u76f8\u4e92\u4f5c\u7528\u7684\u624b\u6027\u90e8\u5206\u6d89\u53ca\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684\u529b\uff0c\u9664\u975e\u901f\u5ea6\u53d7\u5230\u6270\u52a8\uff0c\u5426\u5219\u8fd9\u4e2a\u529b\u5c31\u4f1a\u6d88\u5931\u3002\u624b\u6027\u504f\u7f6e\u7684\u8be6\u7ec6\u8ba1\u7b97\u89c1\u9644\u5f55B\u3002\n\u6211\u4eec\u4ece\u4e0d\u76f8\u7b49\u7684\u4e09\u811a\u67b6\u5f00\u59cb(\u5982\u9644\u5f55B\u4e2d\u7684\u56feB1\u6240\u793a)\u3002\u8003\u8651\u4e00\u6761\u5177\u6709\u7535\u8377Qe\u3001\u8d28\u91cfMe\u3001\u4e9a\u76f8\u5bf9\u8bba\u901f\u5ea6\u548c\u649e\u51fb\u53c2\u6570\u77e2\u91cf\u7684\u5b87\u5b99\u7ebf\u76f8\u5bf9\u4e8e\u539f\u70b9\u5904\u7684\u76ee\u6807\u3002\u7531\u4e8e\u7535\u8377q1e\uff0c\u8f68\u9053\u5c06\u53d7\u5230\u5e93\u4ed1\u529b\u7684\u7ebf\u6027\u6444\u52a8\u3002\u8fd9\u5c06\u5bfc\u81f4\u901f\u5ea6\u5fae\u6270\u03b4\uff0c\u5b83\u4e0e\u6765\u81ea\u7b2c\u4e8c\u4e2a\u539f\u5b50\u7684\u7535\u573a\u7ed3\u5408\u5728\u4e00\u8d77\u4ea7\u751f\u4e00\u4e2a\u4e8c\u9636\u624b\u6027\u529b\u3002\u8fd9\u4f1a\u5728\u76ee\u6807\u5904\u4ea7\u751f\u4f4d\u79fb\uff0c\u5e76\u4e14\u4f4d\u79fb\u7684\u68af\u5ea6\u7b49\u540c\u4e8e\u7c92\u5b50\u901a\u91cf\u4e2d\u7684\u624b\u6027\u53d8\u5316\u3002\u7136\u800c\uff0c\u5728\u6211\u4eec\u5e73\u5747\u4e4b\u540e\uff0c\u8fd9\u79cd\u53d8\u5316\u5c31\u6d88\u5931\u4e86\u3002\u8fd9\u662f\u610f\u6599\u4e4b\u4e2d\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u6d89\u53ca\u5230\u4e24\u4e2a\u539f\u5b50\u3002\u6211\u4eec\u5fc5\u987b\u8fdb\u884c\u4e09\u9636\u5fae\u6270\u624d\u80fd\u5f97\u5230\u5e73\u5747\u624b\u5f81\u5dee\u3002\u6b64\u5916\uff0c\u5982\u679c\u4e24\u4e2a\u4e09\u811a\u67b6\u817f\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u624b\u6027\u504f\u7f6e\u5c31\u6d88\u5931\u4e86\u3002\u8fd9\u4e5f\u662f\u610f\u6599\u4e4b\u4e2d\u7684\uff0c\u56e0\u4e3a\u7535\u8377Qi\u662f\u4e58\u6027\u7684\uff0c\u5982\u679c\u952e\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u51e0\u4f55\u7ed3\u6784\u672c\u8eab\u5c31\u4e0d\u662f\u624b\u6027\u7684\u3002\u5982\u679c\u7a81\u53d8\u7684\u6982\u7387\u662fP\uff0c\u800c\u6d3b\u5206\u5b50\u548c\u90aa\u6076\u5206\u5b50\u7684\u8fd9\u4e2a\u6982\u7387\u4e4b\u5dee\u662f\u03b4P\uff0c\u5219(\u5728\u9644\u5f55B\u4e2d\u5bfc\u51fa)\uff0c\u5176\u4e2d\u03b1=~0.0073\u662f\u7cbe\u7ec6\u7ed3\u6784\u5e38\u6570\u3002\u8fd9\u592a\u5c0f\u4e86\uff0c\u4e0d\u80fd\u5f15\u8d77\u4eba\u4eec\u7684\u5174\u8da3\uff0c\u4f46\u786e\u5b9e\u6e05\u695a\u5730\u6307\u51fa\u4e86\u5728\u66f4\u5927\u7684\u5f71\u54cd\u4e2d\u91cd\u8981\u7684\u56e0\u7d20\u3002\n\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5177\u6709\u8868\u9762\u7535\u8377\u548c\u7535\u6d41\u7684\u7403\u4f53(\u5982\u9644\u5f55B\u4e2d\u7684\u56feB2\u6240\u793a)\u3002\u6700\u7b80\u5355\u548c\u6700\u5927\u7684\u624b\u6027\u6548\u5e94\u662f\u7535\u78c1\u7684\uff0c\u5b83\u6765\u81ea\u4e8e\u7535\u5076\u6781\u77e9\u548c\u78c1\u5076\u6781\u77e9\u7684\u7ed3\u5408\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u3002Zel&#39\uff1bdovich\u7b49\u4eba\u901a\u8fc7\u5b8c\u5168\u4e0d\u540c\u7684\u8bba\u8bc1\u5f97\u51fa\u4e86\u7c7b\u4f3c\u7684\u7ed3\u8bba\u3002(1977)\u3002\u7136\u800c\uff0c\u4f3c\u4e4e\u6ca1\u6709\u5f88\u597d\u7684\u7406\u7531\u8bf4\u660e\u4e3a\u4ec0\u4e48\u5e94\u8be5\u662f\u975e\u96f6\u3002\n\u7b2c\u4e09\u4e2a\u9759\u7535\u87ba\u65cb\u6a21\u578b\u4e5f\u662f\u624b\u6027\u7684(\u5982\u9644\u5f55B\u4e2d\u7684\u56feB3\u6240\u793a)\u3002\u6211\u4eec\u5f15\u7528\u4e00\u4e2a\u5404\u5411\u540c\u6027\u7684\u53ef\u53d8\u6027\u03ba\uff0c\u5b83\u662f\u901a\u8fc7\u5206\u5b50\u7684\u5b87\u5b99\u5c04\u7ebf\u8f68\u8ff9\u7684\u6bcf\u5355\u4f4d\u957f\u5ea6\u7684\u6982\u7387\uff0c\u5b83\u5c06\u5bfc\u81f4\u91cd\u5927\u7a81\u53d8\u3002\u6211\u4eec\u5047\u8bbe\u53ef\u53d8\u6027\u03ba\u65e2\u6709\u5f84\u5411\u5206\u91cf\uff0c\u4e5f\u6709\u87ba\u65cb\u5206\u91cf\uff0c\u5c31\u50cf\u9759\u7535\u52bf\u4e00\u6837\u3002\u6211\u4eec\u53d1\u73b0\u4e09\u9636\u624b\u5f81\u504f\u7f6e\u5305\u542b\u4e24\u4e2a\u87ba\u65cb\u56e0\u5b50\u548c\u4e00\u4e2a\u5f84\u5411\u56e0\u5b50\u7684\u9879\u4e4b\u548c\u3002\u5982\u679c\u7ed3\u6784\u4e0e\u6838\u7cd6\u6838\u9178\u5b8c\u5168\u76f8\u4f3c\uff0c\u90a3\u4e48\u504f\u5411\u5f88\u53ef\u80fd\u662f\u7531\u5177\u6709\u8f74\u5bf9\u79f0\u53ef\u53d8\u6027\u7684\u9879\u03ba\u4e3b\u5bfc\u7684\u3002\u539f\u6765\u7684\u5b87\u5b99\u5c04\u7ebf\u6b63\u7535\u5b50\u6570\u91cf\u8d85\u8fc7\u7535\u5b50\uff0c\u5f53\u9047\u5230\u6d3b\u5206\u5b50\u65f6\uff0c\u5b83\u4eec\u4f1a\u5f84\u5411\u5411\u5185\u504f\u8f6c\uff0c\u800c\u4e0e\u90aa\u6076\u5206\u5b50\u76f8\u9047\u65f6\uff0c\u6b63\u7535\u5b50\u4f1a\u5411\u5916\u504f\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4e0e\u78b1\u57fa\u7684\u76f8\u4e92\u4f5c\u7528\u5fc5\u7136\u6bd4\u4e0e\u78f7\u9178\u7cd6\u9aa8\u67b6\u7684\u76f8\u4e92\u4f5c\u7528\u5f15\u8d77\u66f4\u591a\u7684\u7a81\u53d8\u3002\u6574\u4f53\u624b\u6027\u504f\u7f6e\u7531\u7ed9\u51fa\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u8003\u8651\u4e86\u4e00\u4e2a\u7535\u78c1\u87ba\u65cb\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u5355\u4e2a\u5355\u4f53\u643a\u5e26\u78c1\u5076\u6781\u5b50\u548c\u7535\u5076\u6781\u5b50\u3002\u7136\u540e\uff0c\u5c3d\u7ba1\u78c1\u4f53\u4e0d\u50cf\u94c1\u78c1\u4f53\u90a3\u6837\u6392\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u4f46\u53ef\u80fd\u6709\u8db3\u591f\u7684\u8fd1\u90bb\u5173\u8054\uff0c\u4ece\u800c\u4ea7\u751f\u7535\u78c1\u3001\u624b\u6027\u504f\u7f6e\uff0c\u8fd9\u53ef\u80fd\u662f\u9759\u7535\u504f\u7f6e\u7684\u4e24\u500d\u3002\n\u504f\u7f6e(~10\u22127\u7684keV\u7535\u5b50\uff0c\u4e58\u4ee5\u7406\u53d1\u6746\u6a21\u578b\u4e2d\u7684\u5bb9\u79ef\u503c\u548c\u6b63\u8d1f\u7535\u8377\u7684\u5206\u6570\u5dee)\u662f\u6d3b\u4f53\u548c\u6076\u4f53\u4e4b\u95f4\u7a81\u53d8\u7387\u7684\u76f8\u5bf9\u5dee\u5f02\u3002\u5728\u9644\u5f55C\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65e5\u5fd7\n\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\u6765\u786e\u5b9a\u8fd9\u4e9b\u8fc7\u7a0b\u662f\u5426\u8db3\u4ee5\u89e3\u91ca\u540c\u6027\u3002\u7279\u522b\u662f\uff0c\u6709\u5fc5\u8981\u7814\u7a76\u4e0d\u540c\u7684\u7c07\u5c04\u6a21\u578b\uff0c\u4ee5\u4e86\u89e3\u5bb9\u79ef\u7387\u7684\u6f14\u53d8\uff0c\u5e76\u5efa\u7acb\u78b0\u649e\u6fc0\u53d1\u7684\u91cf\u5b50\u529b\u5b66\u6a21\u578b\u3002\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u6548\u5e94\u9700\u8981\u63a2\u7d22\u3002\u4f8b\u5982\uff0c\u7814\u7a76\u8868\u660e\uff0c\u7531\u4e8e\u7535\u5076\u6781-\u7535\u56db\u6781\u76f8\u4e92\u4f5c\u7528\uff0c\u624b\u6027\u5206\u5b50\u5728\u7279\u5b9a\u8868\u9762\u7684\u5438\u9644\u53ef\u4ee5\u4f7f\u5149\u5b66\u6d3b\u6027\u63d0\u9ad8\u51e0\u4e2a\u6570\u91cf\u7ea7(Wu\u7b49\u4eba)\u30022017\u5e74)\u3002\u6240\u7814\u7a76\u7684\u76f8\u4e92\u4f5c\u7528\u5728\u751f\u7269\u73af\u5883\u4e2d\u53ef\u80fd\u6709\u76f8\u4f3c\u4e4b\u5904\u3002\n\u5929\u4f53\u751f\u7269\u5b66\u9762\u4e34\u7684\u4e00\u4e2a\u5173\u952e\u95ee\u9898\u662f\u8bc4\u4f30\u54ea\u4e9b\u73af\u5883\u5b50\u96c6\u662f\u751f\u547d\u51fa\u73b0\u6240\u5fc5\u9700\u7684\u3002\u9668\u77f3\u63d0\u4f9b\u7684\u78b1\u57fa\u805a\u5408\u7684\u826f\u597d\u5019\u9009\u73af\u5883\u662f\u5c0f\u800c\u6e29\u6696\u7684\u6c60\u5858\uff0c\u8fd9\u4e9b\u6c60\u5858\u662f\u7531\u4e0e\u5730\u7403\u65e9\u671f\u706b\u5c71\u6d3b\u52a8\u76f8\u5173\u7684\u70ed\u6db2\u6761\u4ef6\u4ea7\u751f\u7684(Pearce\u7b49\u4eba\u30022017\u5e74)\u3002\u5b83\u4eec\u7684\u6e7f\u5faa\u73af\u548c\u5e72\u5faa\u73af\u5df2\u88ab\u8bc1\u660e\u4fc3\u8fdb\u6838\u82f7\u9178\u805a\u5408\u6210\u957f\u94fe(Da Silva\u7b49\u4eba\u3002(2015\u5e74)\u3002\u4efb\u4f55\u5177\u6709\u6d3b\u8dc3\u5730\u8d28\u8fc7\u7a0b\u548c\u6c34\u7684\u5ca9\u77f3\u884c\u661f\u90fd\u6709\u521b\u9020\u751f\u547d\u7684\u6f5c\u529b\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u652f\u6301\u76f8\u5f53\u5927\u7684\u73af\u5883\u591a\u6837\u6027\uff0c\u7279\u522b\u662f\u57fa\u4e8e\u8868\u9762\u7684\u5730\u70b9\uff0c\u5305\u62ec\u6d77\u6ee9\u548c\u6d77\u51b0\u754c\u9762(ST\u00fceken\u7b49\u4eba)\u3002(2013\u5e74)\u3002Lingam&amp\uff1bLoeb(2018)\u6982\u8ff0\u4e86\u6f6e\u6c50\u5728\u6ca1\u6709\u660e\u6697\u5faa\u73af\u7684\u73af\u5883\u4e2d\u4ea7\u751f\u5e72\u6e7f\u5faa\u73af\u6216\u63d0\u4f9b\u751f\u7269\u8282\u5f8b\u7684\u751f\u7269\u5b66\u540e\u679c\u3002\u504f\u632f\u8f90\u5c04\u7684\u8f90\u5c04\u53ea\u80fd\u5bfc\u81f4\u5c11\u91cf\u7684\u5bf9\u6620\u4f53\u8fc7\u5269\uff0c\u4e0d\u80fd\u89e3\u91ca\u5728\u9668\u77f3\u4e2d\u53d1\u73b0\u7684\u5927\u91cf\u8fc7\u5269(15%)\uff0c\u5fc5\u987b\u5bfb\u6c42\u653e\u5927\u673a\u5236(Glavin\u7b49\u4eba)\u30022019\u5e74)\u3002\u5982\u679c\u5728\u9668\u77f3\u4e0a\u53d1\u73b0\u7684\u6c28\u57fa\u9178\u662f\u751f\u7269\u6210\u56e0\u7684\uff0c\u90a3\u4e48\u5b83\u4eec\u5728\u5730\u7403\u4e0a\u51fa\u73b0\u751f\u547d\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\u5f88\u4e45\u4e86\u3002\n\u672a\u6765\u7684\u592a\u7a7a\u4efb\u52a1\u5c06\u5e26\u7740\u5728\u5c0f\u884c\u661f\u548c\u706b\u661f\u6b21\u8868\u9762\u4e0a\u6536\u96c6\u7684\u6837\u672c\u8fd4\u56de\u5730\u7403(Lauretta\u7b49\u4eba\u30022017\u5e74\uff1bVago\u7b49\u4eba\u30022017\u5e74\uff1bYamaguchi\u7b49\u4eba\u3002(2018\u5e74)\u3002\u8fd9\u5c06\u63d0\u4f9b\u5bf9\u6709\u673a\u5206\u5b50\u7684\u6027\u8d28\u548c\u5b83\u4eec\u7684\u624b\u6027\u7684\u6d1e\u5bdf\u529b\u3002\u7531\u4e8e\u5b87\u5b99\u5c04\u7ebf\u5728\u5f31\u76f8\u4e92\u4f5c\u7528\u548c\u751f\u547d\u7cfb\u7edf\u4e4b\u95f4\u63d0\u4f9b\u4e86\u4e00\u79cd\u5929\u7136\u7684\u8054\u7cfb\uff0c\u6211\u4eec\u9884\u6d4b\uff0c\u5982\u679c\u53d1\u73b0\u4e86\u672c\u571f\u751f\u7269\u805a\u5408\u7269(\u5373\u751f\u547d\u7cfb\u7edf\u7684\u75d5\u8ff9)\uff0c\u5b83\u4eec\u5c06\u4e0e\u5730\u7403\u4e0a\u7684\u751f\u547d\u5177\u6709\u540c\u6837\u7684\u5229\u624b\u3002(\u7c7b\u4f3c\u7684\u8a00\u8bba\u4e5f\u9002\u7528\u4e8e\u672a\u6765\u4ece\u6df1\u5c42\u5730\u4e0b\u5730\u70b9\u8fd4\u56de\u7684\u6837\u672c\u3002)\u3002\u751f\u547d\u6700\u5148\u51fa\u73b0\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u5b87\u5b99\u5c04\u7ebf\u662f\u5426\u5728\u5176\u5f62\u6210\u8fc7\u7a0b\u4e2d\u8d77\u5230\u4e86\u4f5c\u7528\u3002\n..", "note_en": "2041-8205/895/1/L11      Biological molecules chose one of two structurally chiral systems which are related by reflection in a mirror. It is proposed that this choice was made, causally, by cosmic rays, which are known to play a major role in mutagenesis. It is shown that magnetically polarized cosmic rays that dominate at ground level today can impose a small, but persistent, chiral bias in the rate at which they induce structural changes in simple, chiral monomers that are the building blocks of biopolymers. A much larger effect should be present with helical biopolymers, in particular, those that may have been the progenitors of ribonucleic acid and deoxyribonucleic acid. It is shown that the interaction can be both electrostatic, just involving the molecular electric field, and electromagnetic, also involving a magnetic field. It is argued that this bias can lead to the emergence of a single, chiral life form over an evolutionary timescale. If this mechanism dominates, then the handedness of living systems should be universal. Experiments are proposed to assess the efficacy of this process.\n       Living organisms comprise a system of molecules organized with specific handedness. Handedness\u2014or chirality\u2014is, following Kelvin&#39;s original definition, the geometric property of an object that cannot be superimposed on its mirror image (Kelvin  1894). In chemistry, mirror images of the same chiral molecule are called enantiomers.  4 Both share the same chemical characteristics.\n The ribonucleic and deoxyribonucleic acids (RNA and DNA), responsible for the replication and storage of genetic information, are made up of linear sequences of building blocks with the same handedness, called nucleotides, whose arrangement is neither periodic nor random and contains the genetic information needed to sustain life (Schr\u00f6dinger  1944; Shannon  1948; Watson &amp; Crick  1953; Shinitzky et al.  2007). The chirality of the nucleotides confers helical structure on nucleic acids. Nucleic acids are very large molecules and the torsional angles between the chiral units vary systematically, as exhibited by the Ramachandran plot (Keating et al.  2011), which demonstrates that even a flexible biopolymer retains chirality. As RNA and DNA are made of D-sugars (right-handed, by human convention), the more stable conformation is a right-handed helix (see Figure  1). The homochirality of the sugars has important consequences for the stability of the helix and, hence, on the fidelity or error control of the genetic code. All 20 encoded amino acids are left-handed (again by human convention). Sometimes, both enantiomers of the same molecule are used by living organisms, but not in the same quantity, and they perform different tasks.\n  While DNA/RNA-based life, as observed so far, has clearly chosen one functional chirality, which we call &#34;live,&#34; the alternative choice, which we call &#34;evil,&#34; could have developed along a separate, synchronized path making similar evolutionary choices in response to changes in common environments, except for very small effects which are the main topic of this Letter. However, a precise equilibrium between the two choices seems quite unlikely given the high replication rate. There is a small entropic price, but this is surely paid by the greater facility of storing information and the higher reliability of the replication (Schr\u00f6dinger  1944).\n For DNA today, radiation increases the fRequency of gene mutations; this has been known since the pioneering work of Muller ( 1927) that showed that the mutation rate is proportional to the radiation dose, much of it attributable to ionization by cosmic rays. The muon component dominates the flux of particles on the ground at energies above 100 MeV, contributing 85% of the radiation dose from cosmic rays (Atri &amp; Melott  2011). Muons have an energy sufficient to penetrate considerable depths, and they are, on average, spin-polarized. Ionization by spin-polarized radiation could be enantioselective (Zel&#39;dovich et al.  1977). Therefore, we argue that the mutation rate of live and evil organisms would be different. As there could be billions or even trillions of generation of the earliest and simplest life forms, a small difference in the mutation rate could easily sustain one of the two early, chiral choices.\n When Pasteur discovered biological homochirality, he recognized it as a consequence of some asymmetry in the laws of nature: &#34;If the foundation of life is dissymmetric because of dissymmetric cosmic forces operating at its origin, this is one of the links between life on earth and the cosmos&#34; (Pasteur  1860). Had Pasteur been alive a century later, the discovery of parity violation in the weak interaction (Lee &amp; Yang  1956; Wu et al.  1957) would have strengthened his view. An object exhibits  physical chirality when its mirror image does not exist in Nature, as a consequence of parity violation in the weak interaction. The result of applying the parity operation on an elementary weak process, such as the decay,     , is not found in Nature because neutrinos are chiral particles. In the language of quantum mechanics, the basic Hamiltonian of a chiral molecule does not commute with the parity operator and, if we include weak neutral currents, there will be a parity-violating energy difference (PVED) between the two enantiomers (Yamagata  1966). However it is extremely small, ~10 \u221217 kT in water (Salam  1991) and larger consequences of chirality must be sought. While the effectiveness of PVED in generating biological homochirality is still under debate, some authors have attempted to work with this small PVED and shown that it may theoretically suffice to bring strong chiral selectivity (Kondepudi &amp; Nelson  1984). An enantiomeric excess due to neutral weak currents has been reported in crystalline materials (Szab\u00f3-Nagy &amp; Keszthelyi  1999).\n In a beautiful paper, Pierre Curie addressed the question of chirality transfer from light to molecules, specifically involving circular polarization (Curie  1894). The sense of rotation of the polarization direction reflects the underlying chirality of the molecules, though the relationship is not simple and depends upon the wavelength of the light (optical rotatory dispersion). This rotation can be accompanied by a difference in the absorption (circular dichroism), consistent with the Kramers\u2013Kronig relations (Kronig  1926; Kramers  1927). On this basis, it has been suggested that a specific source of circularly polarized light (CPL) might favor one set of enantiomers over the other (Bailey et al.  1998).\n Laboratory experiments have demonstrated that it is possible to induce an enantiomeric excess of amino acids by irradiation of interstellar ice analogs with UV CPL (de Marcellus et al.  2011). However, this raises two problems. First, circular dichroism is also wavelength-, pH-, and molecule-specific (D&#39;hendecourt et al.  2019). It is hard to see how one sense of circular polarization can enforce a consistent chiral bias, given the large range of environments in which the molecules are found. Second, it is often supposed that astronomical sources supply the polarization. However, optical polarimetry within the Galaxy reveals no consistent sense of circular polarization and the observed degrees of polarization in the UV are generally quite small (Bailey  2001).\n If we seek a universal, chiral light source that consistently emits one polarization over another, then we are again drawn to the weak interaction in order to account for a universal asymmetry. One option is to invoke spin-polarized particles, which can radiate one sense of circular polarization through \u010cerenkov radiation or bremsstrahlung and can preferentially photolyze chiral molecules of one handedness (Vester et al.  1959; Lahoti &amp; Takwale  1977; Gusev &amp; Guseva  2019). Another option is to invoke supernova neutrinos (Boyd et al.  2018). However, the small chiral bias is unlikely to lead to a homochiral state and some prebiotic amplification mechanism is still required. This suggests considering, instead, enantioselective bias in the evolution of the two living systems.\n  Consider, first, a model of a small chiral molecule, part of a larger helical polymer (see Figure  1), which we idealize as an unequal tripod. There is a vertex or &#34;target&#34; at the origin and three distinguishable atoms or groups with position vectors     ,     ,     . There is a classical electrostatic field associated with the point charges at these four sites. It is helpful to introduce a pseudoscalar (changes sign under reflection) &#34;molecular chirality,&#34;     , which has to change sign upon reflection and a clear choice is     .\n A second simple, semi-classical model has electrical charge and current confined to the surface of a sphere surrounding a central nuclear charge which is canceled by the net charge on the sphere. The current allows for an electromagnetic chirality, with the simplest expression     . These two models are appropriate for small molecules or monomers that are the constituents of naturally helical biopolymers.\n Our third simple model involves a cylindrical, electrostatic potential, like a &#34;Barber pole&#34; (see Wagner et al.  1997),      with  k\u00a0&gt;\u00a00. In this case, the molecular chirality      can be chosen as      for a live (evil) molecule. These definitions of      are illustrated in Figure  1.\n  Charged cosmic-ray protons, with energies just above the threshold for pion production, collide with nitrogen and oxygen nuclei in the upper atmosphere to create  \u03c0 +,  \u03c0 \u2212\u00a0(Gaisser  2012). The  \u03c0 +\u00a0decay within a few meters into  \u03bc +\u00a0with half life ~2  \u03bcs, which decay, in turn into  e +. As pions are spinless and the decays are weak, the  \u03bc +\u00a0and  e + spin directions     , are preferentially anti-aligned with their direction of motion,     , in order to balance the antiparallel spins of the accompanying neutrinos (Figure  2). The associated magnetic dipole moments are given by     . The  \u03c0 \u2212\u00a0decay into  \u03bc \u2212,  e \u2212\u00a0with preferentially aligned spins but with magnetic moments also anti-aligned with      (see Figure  2 and Appendix  A).\n  We introduce a pseudoscalar quantity, &#34;lodacity&#34; (after lodestone), to express the physical chirality of the cosmic rays. This is defined by\n  where we average over all cosmic rays of type  i and kinetic energy  T. Well above threshold,      for freshly created  \u03bc, and      for new  e, in the pion rest frame (see the Appendices).      will be further degraded as the cosmic rays lose energy through scattering electrons with      roughly. In addition the secondary electrons will be mostly unpolarized and further diminish the lodacity of the cosmic rays that irradiate the molecules.\n At sea level today, most cosmic rays are muons with an average flux ~160 m \u22122 s \u22121 (Lipari  1993). However, the flux and the atmosphere could have been quite different; the young Sun and its wind are likely to have been much more active. The protobiological site, which we call the &#34;fount,&#34; may have been below rock, water, or ice, which can change the shower properties and lodacity.\n  We now turn to the interaction that couples the cosmic-ray lodacity      to the molecular chirality     . We seek an effect that is proportional to the product      which will distinguish live and evil molecules exposed to the same cosmic-ray flux\u2014a chiral bias. This effect must be translated into a difference in the ultimate mutation rate, a pathway that is poorly understood even in contemporary biology. A high-energy particle can excite an electron locally (Rosenfeld  1928). Typically, the de-excitation is fast and radiationless and involves vibrational and rotational modes. This &#34;internal conversion&#34; can therefore cause local structural change in the molecule. Cosmic radiation also induces ionization, which introduces changes in the electronic structure of the biomolecules and can lead to mutations. DNA, today, is presumably a far less error-prone copier than the first genetic biopolymer. Repair may also have been a factor when life began.\n The cosmic rays themselves are supposed here to be spatially homogeneous and isotropically distributed with respect to the molecules. Their cosmic-ray-averaged magnetic moment is also presumed to be strictly antiparallel to      although scattering processes, or an external magnetic field can introduce an angle between      and     . This is important because the chiral part of the electrostatic interaction involves a force given by      which vanishes unless the velocity is perturbed. Details of the calculation of the chiral bias      are presented in Appendix  B.\n We start with the unequal tripod (as illustrated by Figure  B1 in Appendix  B). Consider a cosmic ray with charge  qe, mass  Mm  e, subrelativistic velocity     , and impact parameter vector with respect to the target at the origin given by     . The trajectory will be linearly perturbed by the Coulomb force due to the the charge  Q 1 e at     . This will cause a velocity perturbation  \u03b4    , which creates a second-order chiral force in combination with the electric field from the second atom. This produces a displacement at the target and the gradient of the displacement is equivalent to a chiral change in the particle flux. However, this change vanishes after we average over     . This is expected because we have only involved two of the atoms. We have to go to third-order perturbations to get an average chiral difference. Furthermore, the chiral bias vanishes if two of the tripod legs are of equal length. This is also to be expected because the charges  Q  i are multiplicative, and if the bonds are of equal length then the geometrical structure by itself is not chiral. If the probability of a mutation is  P and the difference between this probability for live and evil molecules is  \u03b4P, then      (derived in Appendix  B), where  \u03b1\u00a0~\u00a00.0073 is the fine-structure constant. This is too small to be of interest but does bring out clearly the factors that are important in a larger effect.\n Next, consider the sphere with surface charge and current (as illustrated by Figure  B2 in Appendix  B). The simplest and largest chiral effect is electromagnetic and comes from combining its electric and magnetic dipole moments. In this case     . A similar conclusion was reached, through a quite different argument, by Zel&#39;dovich et al. ( 1977). However, there seems to be no good reason why      should be non-zero.\n The third, electrostatic helical, model is also chiral (as illustrated by Figure  B3 in Appendix  B). We invoke an isotropic &#34;mutability,&#34;  \u03ba, which is the probability per unit length of cosmic-ray trajectory through the molecule that a significant mutation will result. We suppose that the mutability  \u03ba has both a radial and a helical component, like the electrostatic potential. We find that the third-order chiral bias comprises a sum of terms that contains two helical factors and one radial factor. If the structure is at all similar to RNA then it is likely that the bias is dominated by terms with an axisymmetric mutability,  \u03ba. It appears that the original cosmic-ray positrons, which outnumber the electrons, are deflected radially inward when encountering a live molecule and outward with an evil molecule. This implies that interactions with the nucleobases must cause more mutations than those with the suger-phosphate backbone. The overall chiral bias is given by     .\n Finally, we consider an electromagnetic helical model where we suppose that the individual monomers carry magnetic dipoles as well as electric dipoles. Then, although the magnets do not line up as in a ferromagnet, there may be enough near-neighbor correlation for there to be an electromagnetic, chiral bias which could be      times the electrostatic bias.\n The bias      (~10 \u22127 for keV electrons, times the lodacity and the fractional difference between positive and negative charges in the barber pole model) is the relative difference in the mutation rate between live and evil organisms. In Appendix  C, we use the the logistic equations to model the population growth. Starting with a racemic mix the enantiomeric excess is      where  T is the time multiplied by the growth rate. If we add a balanced, live\u2013evil &#34;conflict&#34; then homochiralization is speeded up. Either way, a small bias in the mutation rate could achieve this on an evolutionary timescale.\n  In this paper, we have proposed that homochirality is a deterministic consequence of the weak interaction, expressed by cosmic irradiation of helical biopolymers which may have affected the way they fold or assemble to make the first living organisms. This is a consequence of the coupling      that can lead to symmetry-breaking as anticipated by Pasteur. The choice that was made is then traceable to the preponderance of baryons over antibaryons, established in the early universe and ultimately to the symmetries of fundamental particle interactions presenting requirements (including leptonic charge parity violation) as first elucidated by Sakharov ( 1967). We have also demonstrated how this quite small chiral bias can lead to homochirality after sufficient generations of self-replicating molecules, and shown how conflict can speed up this Manichean struggle.\n Much more study is needed to determine if these processes suffice to account for homochirality. In particular, it will be necessary to investigate different shower models to understand the evolution of the lodacity and to develop a quantum mechanical model of collisional excitation. There are many other effects to explore. For example, it has been shown that the adsorption of chiral molecules on specific surfaces can enhance the optical activity by several orders of magnitude because of the electric dipole\u2013electric quadrupole interaction (Wu et al.  2017). The interaction investigated may have analogs in biological environments.\n A key issue facing astrobiology is assessing what subset of environments are necessary for the emergence of life. Good candidate environments for the polymerization of meteorite-delivered nucleobases are small, warm ponds produced by hydrothermal conditions associated with volcanic activity on the early Earth (Pearce et al.  2017). Their wet and dry cycles have been shown to promote the polymerization of nucleotides into long chains (Da Silva et al.  2015). Any rocky planet, with active geological processes and water, has the potential to create life, because it is likely to support considerable environmental diversity, in particular, surface-based locales, including beaches and sea-ice interfaces (St\u00fceken et al.  2013). Lingam &amp; Loeb ( 2018) outlined the biological consequences of tides in producing wet\u2013dry cycles or providing biological rhythms in environments where the light\u2013dark cycle is absent. Irradiation by polarized radiation can only lead to small enantiomeric excess, and cannot explain the large excesses (15%) found in meteorites, and amplification mechanisms must be sought (Glavin et al.  2019). Should the amino acids found on meteorites be biogenic, they would have existed long before the appearance of life on Earth.\n Future space missions will return to Earth with samples collected on asteroids and on the Martian sub-surface (Lauretta et al.  2017; Vago et al.  2017; Yamaguchi et al.  2018). This will provide insight on the nature of organic molecules and their chirality. As cosmic rays provide a natural connection between the weak interaction and living systems, we predict that, if ever indigenous biopolymers are found (i.e., traces of living systems), they will have the same handedness as life on Earth. (Similar remarks apply to future samples returned from deep subterranean sites.) Where life appeared first, and whether cosmic rays played a role in its formation, are \n......", "posttime": "2020-05-25 04:47:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u624b\u6027,puzzle", "title": "\u751f\u547d\u7684\u624b\u6027\u4e4b\u8c1c", "title_en": "The Chiral Puzzle of Life", "transed": 1, "url": "https://iopscience.iop.org/article/10.3847/2041-8213/ab8dc6", "via": "", "real_tags": ["\u624b\u6027", "puzzle"]}, {"category": "", "categoryclass": "", "imagename": "186aed713d2dab72c02474a3d379fe25.jpeg", "infoid": 1003566, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8def\u900f\u65e7\u91d1\u5c718\u670823\u65e5\u7535-\u968f\u7740Facebook\u5468\u56db\u91c7\u7528\u6c38\u4e45\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c(Mark Zuckerberg)\u5df2\u5c06\u8fd9\u5bb6\u7845\u8c37\u6700\u5927\u7684\u516c\u53f8\u4e4b\u4e00\u4ece\u5b75\u5316\u5b83\u7684\u5730\u65b9\u89e3\u8131\u51fa\u6765\u3002\n\u4f46\u4ed6\u4e5f\u8ba9\u7845\u8c37\u7684\u4e00\u4e2a\u68a6\u60f3\u7834\u706d\u4e86\uff1a\u6280\u672f\u5de5\u4eba\u9003\u79bb\u65e7\u91d1\u5c71\u6e7e\u533a\u538b\u5012\u6027\u7684\u4f4f\u623f\u6210\u672c\u3001\u80ae\u810f\u7684\u4eba\u884c\u9053\u548c\u62e5\u6324\u7684\u9053\u8def\u65f6\uff0c\u53ef\u4ee5\u968f\u8eab\u643a\u5e26\u4ed6\u4eec\u4e30\u539a\u7684\u5de5\u8d44\u3002\n\u968f\u7740\u505c\u5de5\u8fdb\u5165\u7b2c\u4e09\u4e2a\u6708\uff0c\u5728\u9ad8\u85aa\u79d1\u6280\u5de5\u4f5c\u8005\u4e2d\u5f88\u53d7\u6b22\u8fce\u7684\u7559\u8a00\u677f\u4e0a\uff0c\u5145\u6ee1\u4e86\u5728\u70ed\u5e26\u6d77\u6ee9\u548c\u4e2d\u897f\u90e8\u8d1f\u62c5\u5f97\u8d77\u7684\u5c0f\u9547\u5bbd\u655e\u7684\u623f\u5b50\u91cc\u957f\u671f\u5de5\u4f5c\u7684\u5e7b\u60f3\u3002\n\u201c\u8fd9\u662f\u4e0d\u662f\u610f\u5473\u7740\u6211\u53ef\u4ee5\u5728\u7845\u8c37\u7533\u8bf7\u4e00\u4efd\u5de5\u4f5c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u52a0\u52d2\u6bd4\u6d77\u7b49\u5730\u8fdc\u7a0b\u5de5\u4f5c\uff1f\u201d\u4e00\u4f4d\u7528\u6237\u5728Blind\u4e0a\u5199\u9053\uff0cBlind\u662f\u4e00\u6b3e\u65e8\u5728\u8ba9\u5458\u5de5\u533f\u540d\u4ea4\u6362\u4fe1\u606f\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u6050\u6015\u4e0d\u4f1a\uff0c\u624e\u514b\u4f2f\u683c\u5728\u4ed6\u7684Facebook\u9875\u9762\u4e0a\u5411\u5458\u5de5\u53d1\u8868\u516c\u5f00\u5e7f\u64ad\u7684\u76f4\u64ad\u6d41\u65f6\u8bf4\u3002\n\u8be5\u516c\u53f8\u662f\u7845\u8c37\u6700\u5927\u7684\u96c7\u4e3b\u4e4b\u4e00\uff0c\u5c06\u7ed9\u83b7\u51c6\u8fdc\u7a0b\u5de5\u4f5c\u7684\u7f8e\u56fd\u5458\u5de5\u57282021\u5e741\u67081\u65e5\u4e4b\u524d\u5411\u516c\u53f8\u901a\u62a5\u4ed6\u4eec\u8ba1\u5212\u5728\u54ea\u91cc\u5de5\u4f5c\u7684\u6700\u65b0\u60c5\u51b5\uff0c\u5c4a\u65f6\u4ed6\u4eec\u7684\u5de5\u8d44\u5c06\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u53cd\u6620\u5f53\u5730\u7684\u751f\u6d3b\u6210\u672c\u3002\n\u624e\u514b\u4f2f\u683c\u8bf4\uff0c\u4ed6\u9884\u8ba1Facebook\u4e00\u534a\u7684\u5458\u5de5\u5c06\u5728\u672a\u67655\u523010\u5e74\u5185\u63a5\u53d7\u4ed6\u7684\u63d0\u8bae\u3002\n\u4ed6\u8bf4\uff0c\u8bd5\u56fe\u7ed5\u8fc7\u8fd9\u4e9b\u85aa\u916c\u8c03\u6574\u7684\u5458\u5de5\u5c06\u53d7\u5230\u201c\u4e25\u91cd\u540e\u679c\u201d\u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u516c\u53f8\u9700\u8981\u8003\u8651\u5458\u5de5\u7684\u6240\u5728\u5730\uff0c\u4ee5\u907f\u514d\u8fdd\u53cd\u7a0e\u6cd5\u3002\n\u624e\u514b\u4f2f\u683c\u8868\u793a\uff0cFacebook\u5c06\u901a\u8fc7\u68c0\u67e5\u5458\u5de5\u8bbf\u95ee\u5176VPN\u7684\u4f4d\u7f6e\u6765\u76d1\u63a7\u9075\u5b88\u60c5\u51b5\u3002\u636eCNBC HERE\u62a5\u9053\uff0cFacebook\u8fd8\u4f7f\u7528\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8ffd\u8e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u66fe\u6709\u4e00\u6b21\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u6765\u5bfb\u627e\u6ca1\u6709\u51fa\u73b0\u5728\u5de5\u4f5c\u5c97\u4f4d\u4e0a\u7684\u5b9e\u4e60\u751f\u3002\n\u5c3d\u7ba1\u8bb8\u591a\u79d1\u6280\u5de5\u4f5c\u8005\u68a6\u60f3\u7740\u5728\u4f4e\u7a0e\u6536\u5dde\u62e5\u6709\u672a\u6765\uff0c\u4f46\u7559\u8a00\u677f\u4e0a\u7684\u5176\u4ed6\u4eba\u62c5\u5fc3\uff0c\u8f6c\u5411\u8fdc\u7a0b\u5de5\u4f5c\u53ef\u80fd\u4f1a\u7ed9\u6240\u6709\u4eba\u7684\u5de5\u8d44\u5e26\u6765\u4e0b\u884c\u538b\u529b\uff0c\u5e76\u8b66\u544a\u79f0\uff0c\u8fdc\u79bb\u603b\u90e8\u53ef\u80fd\u4f1a\u8ba9\u516c\u53f8\u7684\u664b\u5347\u53d8\u5f97\u66f4\u52a0\u9661\u5ced\u3002\n\u4e00\u4f4d20\u591a\u5c81\u7684\u524dFacebook\u5458\u5de5\u8868\u793a\uff0c\u8fd9\u4e00\u53d8\u5316\u5c06\u4e3a\u7559\u5728\u52a0\u5dde\u7684\u5458\u5de5\u63d0\u4f9b\u673a\u4f1a\u3002\u4ed620\u591a\u5c81\u65f6\u4f4f\u5728\u7845\u8c37\u90ca\u533a\uff0c\u901a\u52e4\u65f6\u95f4\u5f88\u77ed\u3002\n\u4ed6\u8bf4\uff1a\u201c25\u5c81\u7684\u4eba\u53ef\u80fd\u66f4\u613f\u610f\u5f85\u5728\u65e7\u91d1\u5c71\uff0c\u800c\u90a3\u4e9b\u60f3\u8981\u517b\u5bb6\u7cca\u53e3\u7684\u4eba\u53ef\u80fd\u66f4\u613f\u610f\u642c\u5230\u57ce\u5916\u53bb\u3002\u201d\nFacebook\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8868\u793a\uff0c\u8be5\u516c\u53f8\u4e0d\u6253\u7b97\u5bf9\u9009\u62e9\u7559\u5728\u65e7\u91d1\u5c71\u6e7e\u533a\u7684\u5458\u5de5\u8fdb\u884c\u88c1\u5458\u3001\u5f3a\u5236\u642c\u8fc1\u6216\u5de5\u8d44\u8c03\u6574\u3002\n\u5982\u679c\u5b9e\u9a8c\u6210\u529f\uff0cFacebook\u7684\u4e3e\u52a8\u53ef\u80fd\u4f1a\u4fc3\u4f7f\u5176\u4ed6\u79d1\u6280\u5de8\u5934\u901a\u8fc7\u62e5\u62b1\u8fdc\u7a0b\u5de5\u4f5c\u6765\u4e89\u593a\u5de5\u7a0b\u4eba\u624d-\u4ee5\u53ca\u5176\u4ed6\u5dde\u4e89\u593a\u52a0\u5dde\u4eba\u3002\n\u201c\u90a3\u4e9b\u6e29\u6696\u3001\u9633\u5149\u660e\u5a9a\u7684\u5dde\uff0c\u62e5\u6709\u8d1f\u62c5\u5f97\u8d77\u7684\u4f4f\u623f\u548c\u96f6\u7a0e\u6536\uff0c\u5c06\u4f1a\u770b\u5230\u53d7\u8fc7\u6559\u80b2\u7684\u5bcc\u88d5\u5de5\u4eba\u6d8c\u5165\u3002\u5404\u5dde\u5c06\u9700\u8981\u51cf\u7a0e\u624d\u80fd\u8ddf\u4e0a\uff0c\u201c\u98ce\u6295\u516c\u53f8Social Capital\u9996\u5e2d\u6267\u884c\u5b98\u3001Facebook\u65e9\u671f\u9ad8\u7ba1Chaath Palihapitiya\u5728\u63a8\u7279\u4e0a\u8868\u793a\u3002", "note_en": "SAN FRANCISCO (Reuters) - With Facebook\u2019s adoption of permanent remote work on Thursday, Chief Executive Mark Zuckerberg has untethered one of Silicon Valley\u2019s biggest companies from the place that incubated it.\n But he also dashed a Silicon Valley dream: that tech workers would be able to take their generous salaries with them as they flee the Bay Area\u2019s crushing housing costs, dirty sidewalks and crowded roadways.\n As lockdowns dragged into their third month, message boards popular with well-paid tech workers have lit up with fantasies of working long-term from tropical beaches and spacious houses in affordable small towns in the Midwest.\n \u201cDoes that mean I could apply for a job in Silicon Valley and work remotely from, say, the Caribbean? Asking for a friend,\u201d wrote one user on Blind, an app designed to let workers swap information anonymously.\n Afraid not, Zuckerberg said, addressing employees in a publicly broadcast livestream on his Facebook page.\n The company, one of Silicon Valley\u2019s biggest employers, is giving U.S. staffers who are approved to work remotely until Jan. 1, 2021 to update the company on where they plan to base themselves, at which point their salaries will be adjusted to reflect the local cost of living.\n Zuckerberg said he expects half of Facebook\u2019s workforce to take him up on the offer over the next five to 10 years.\n Employees who attempt to wiggle around those compensation adjustments will be subject to \u201csevere ramifications,\u201d he said, as the company needs to account for employee locations to avoid violating tax laws.\n Zuckerberg said Facebook will monitor adherence by checking where employees access its VPN. Facebook also uses its own apps&#39; to track employee locations, according to CNBC  here one time using the data to find interns who failed to show up for work.\n Even as many tech workers dream of a future in low-tax states, others on message boards fret about how the shift to remote work could exert downward pressure on salaries across the board and warn that being far from headquarters could steepen the climb up the corporate ladder.\n One former Facebook employee, who in his 20s lived in Silicon Valley\u2019s suburbs for the short commute, said the change would open up opportunities even for employees who stay in California.\n \u201cA 25-year-old maybe would rather be in San Francisco, while someone looking to raise a family might prefer to move outside the city,\u201d he said.\n A Facebook spokesman said the company was not planning layoffs, compulsory moves or salary adjustments for employees who opt to stay in the Bay Area.\n  If the experiment is successful, Facebook\u2019s move could prompt other tech giants to compete for engineering talent by embracing remote work - and other states to compete for Californians.\n \u201cThe warm, sunny states with affordable housing and zero taxes will see an influx of educated, rich workers. States will need to cut taxes to keep up,\u201d Chamath Palihapitiya, the chief executive of venture capital firm Social Capital and an early executive at Facebook, said on Twitter.", "posttime": "2020-05-25 04:47:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,require,\u5458\u5de5", "title": "Facebook\u8981\u6c42\u8fdc\u7a0b\u5458\u5de5\u62ab\u9732\u52a0\u85aa\u5730\u70b9", "title_en": "Facebook to require remote workers to disclose location for salary scaling", "transed": 1, "url": "https://mobile.reuters.com/article/idUSKBN22Y1IA", "via": "", "real_tags": ["facebook", "require", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "1b005ed9480bccf726582dce8b3af6cb.png", "infoid": 1003565, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6211\u4eec\u8c08\u5230\u4e13\u5229\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u8c08\u8bba\u7684\u662f\u201c\u5b9e\u7528\u201d\u4e13\u5229\u3002\u5b9e\u7528\u4e13\u5229\u4fdd\u62a4\u58f0\u79f0\u5177\u6709\u5b9e\u9645\u5e94\u7528\u6216\u7528\u9014\u7684\u53d1\u660e\u3002(\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u4ecd\u7136\u58f0\u79f0\u4e00\u4e9b\u5b9e\u9645\u4e0a\u65e0\u7528\u7684\u4e1c\u897f\uff0c\u4f46\u5b83\u4eec\u5e94\u8be5\u662f\u6f5c\u5728\u7684\u6709\u7528\u7684\u3002)\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u201c\u5916\u89c2\u8bbe\u8ba1\u201d\u4e13\u5229\u53ea\u4fdd\u62a4\u5916\u89c2\u8bbe\u8ba1\u7684\u88c5\u9970\u6027\u6216\u88c5\u9970\u6027\u3002\u5b83\u4eec\u4e0d\u4fdd\u62a4\u4efb\u4f55\u7c7b\u578b\u7684\u529f\u80fd\u3002\u5982\u679c\u6709\u529f\u80fd\u6027\u7684\u4f5c\u54c1\u9700\u8981\u4fdd\u62a4\uff0c\u53ea\u6709\u5b9e\u7528\u4e13\u5229\u624d\u884c\u3002\n\u56e0\u4e3a\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u53ea\u80fd\u4fdd\u62a4\u975e\u529f\u80fd\u6027\u4f5c\u54c1\uff0c\u6240\u4ee5\u5b83\u4eec\u6709\u70b9\u50cf\u89c6\u89c9\u4f5c\u54c1\u7684\u7248\u6743\u3002\u4e13\u5229\u8bbe\u8ba1\u7684\u521b\u9020\u529b\u548c\u539f\u521b\u6027\u7684\u95e8\u69db\u5f88\u4f4e--\u4f4e\u5230\u5373\u4f7f\u662f\u6807\u51c6\u7248\u672c\u7684\u56fe\u5f62\u7528\u6237\u754c\u9762\u4e5f\u80fd\u83b7\u5f97\u4e13\u5229\u4fdd\u62a4\uff0c\u6b63\u5982\u6211\u4eec\u672c\u6708\u6700\u65b0\u7684\u611a\u8822\u4e13\u5229\u6240\u663e\u793a\u7684\u90a3\u6837\u3002\n\u4ee5\u4e0b\u662f\u897f\u95e8\u5b50\u533b\u7597\u96c6\u56e2(Siemens Healthcare GmbH)\u62e5\u6709\u7684\u4e00\u9879\u4e13\u5229\u8bbe\u8ba1\uff0c\u897f\u95e8\u5b50\u662f\u6b27\u6d32\u6700\u591a\u4ea7\u7684\u4e13\u5229\u7533\u8bf7\u8005\u897f\u95e8\u5b50\u7684\u4e00\u90e8\u5206\uff1a\n\u8be5\u4e13\u5229\uff0c\u7f8e\u56fd\u4e13\u5229\u53f7\u3002D872,112\u662f\u4e00\u4e2a\u76f8\u5bf9\u6807\u51c6\u7684GUI\uff0c\u6807\u9898\u680f\u4e0b\u9762\u663e\u793a\u4e00\u6392\u6392\u5706\u5f62\u56fe\u6807\u3002\u4f46\u8fd9\u9879\u4e13\u5229\u5e76\u4e0d\u80fd\u4fdd\u62a4\u56fe\u7247\u4e2d\u7684\u6240\u6709\u5185\u5bb9--\u91cd\u8981\u7684\u662f\uff0c\u865a\u7ebf\u5708\u51fa\u7684\u90e8\u5206\u4e0d\u662f\u4e13\u5229\u8bbe\u8ba1\u7684\u4e00\u90e8\u5206\u3002\u8be5\u8bbe\u8ba1\u8fd8\u5305\u62ec\u56fe\u7247\u4e2d\u6ca1\u6709\u7684\u529f\u80fd\uff0c\u5373\u663e\u793a\u5668\u4e2d\u4f7f\u7528\u7684\u989c\u8272\u3002\u8981\u4e86\u89e3\u8fd9\u91cc\u7684\u5b9e\u9645\u4e13\u5229\u662f\u4ec0\u4e48\uff0c\u516c\u4f17\u5fc5\u987b\u505a\u5f97\u66f4\u591a\uff1a\u4ed6\u4eec\u53ef\u4ee5\u5411\u7f8e\u56fd\u4e13\u5229\u5c40\u7533\u8bf7\u5e76\u652f\u4ed8\u4e00\u4efd\u4e13\u5229\u7684\u786c\u62f7\u8d1d\uff0c\u6216\u8005\u5728PTO(\u6781\u5176\u7b28\u91cd)\u7684\u914d\u5bf9\u6570\u636e\u5e93\u4e2d\u5bfc\u822a\uff0c\u5e0c\u671b\u627e\u5230\u6700\u521d\u63d0\u4ea4\u7684\u56fe\u50cf\u7684\u53ef\u4e0b\u8f7d\u7248\u672c\u3002\n\u5728\u56fe\u50cf\u8d28\u91cf\u5dee\u548c\u865a\u7ebf\u8868\u793a\u672a\u53d7\u4fdd\u62a4\u7684\u7279\u5f81\u4e4b\u95f4\uff0c\u751a\u81f3\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8bc6\u522b\u4e13\u5229\u8bbe\u8ba1\u662f\u4ec0\u4e48\u3002\u662f\u4e09\u6392\u5706\u5f62\u56fe\u6807\u7684\u5177\u4f53\u6392\u5217\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u4e3a\u4ec0\u4e48\u67d0\u4e9b\u5706\u5f62\u56fe\u6807\u88ab\u6392\u9664\u5728\u5916\uff1f\u662f\u897f\u95e8\u5b50\u8bbe\u8ba1\u5e08\u4e3a\u8868\u793a\u201c\u7528\u6237\u201d\u548c\u201c\u63a5\u6536\u8005\u201d\u4e4b\u7c7b\u7684\u4e1c\u897f\u800c\u521b\u5efa\u7684\u56fe\u6807\u5417\uff1f\u5982\u679c\u771f\u7684\u8fd9\u4e48\u96be\u8bf4\u51fa\u4e13\u5229\u5916\u89c2\u8bbe\u8ba1\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u90a3\u5c31\u66f4\u96be\u786e\u5b9a\u5176\u4ed6\u8bbe\u8ba1\u662f\u5426\u4fb5\u6743\u4e86\u3002\u4fb5\u6743\u53d6\u51b3\u4e8e\u4e13\u5229\u5916\u89c2\u8bbe\u8ba1\u3001\u88ab\u6307\u63a7\u7684\u5916\u89c2\u8bbe\u8ba1\u548c\u73b0\u6709\u6280\u672f\u4e4b\u95f4\u7684\u6bd4\u8f83\u3002\u4f46\u662f\uff0c\u5728\u660e\u786e\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u4fdd\u62a4\u7684\u5185\u5bb9\u4e4b\u524d\uff0c\u8fd9\u79cd\u5206\u6790\u751a\u81f3\u662f\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u3002\n\u5ba1\u67e5\u6807\u51c6\u4f4e\u3001\u6e05\u6670\u5ea6\u4e0d\u9ad8\u3001\u7531\u6b64\u5bfc\u81f4\u7684\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u8d28\u91cf\u4f4e\u5df2\u7ecf\u6784\u6210\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\u3002\u4f46\u60c5\u51b5\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\u652f\u6301\u4e13\u5229\u7684\u6e38\u8bf4\u8005\u6b63\u5728\u63a8\u52a8\u8d4b\u4e88\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u6240\u6709\u8005\u66f4\u591a\u5bf9\u6280\u672f\u5f00\u53d1\u8005\u548c\u7528\u6237\u7684\u6743\u529b\u3002\u4ed6\u4eec\u63d0\u51fa\u4e86\u4e00\u9879\u6cd5\u6848\uff0c\u8d4b\u4e88\u6d77\u5173\u548c\u8fb9\u5883\u4fdd\u62a4\u5c40\u5728\u8fb9\u5883\u6263\u62bc\u4ea7\u54c1\u7684\u6743\u529b\uff0c\u53ea\u9700\u5bf9\u4ea7\u54c1\u8fdb\u884c\u8bc4\u4f30\uff0c\u5e76\u5c06\u5176\u4e0e\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd9\u4e9b\u4e13\u5229\u7684\u6240\u6709\u8005\u6b63\u5728\u8981\u6c42\u8fd9\u79cd\u65b0\u578b\u7684\u7279\u6b8a\u5f85\u9047\u3002\n\u8d4b\u4e88CBP\u5982\u6b64\u5927\u7684\u6743\u529b\u5c06\u5bf9\u666e\u901a\u6280\u672f\u7528\u6237\u6784\u6210\u771f\u6b63\u7684\u5371\u9669\u3002\u60f3\u8c61\u4e00\u4e0b\uff0cCBP\u8bd5\u56fe\u5224\u5b9a\u50cf\u4e0a\u9762\u8fd9\u6837\u7684\u4e13\u5229\u8bbe\u8ba1\u7684\u4fb5\u6743\u884c\u4e3a\uff0c\u8fd9\u662f\u4e00\u4e2a\u533b\u7597\u8f6f\u4ef6\u7684GUI\u3002\u4e3a\u4e86\u8bc4\u4f30\u4fb5\u6743\u884c\u4e3a\uff0cCBP\u5b98\u5458\u53ef\u4ee5\u68c0\u67e5\u8bbe\u5907\uff0c\u5305\u62ec\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\uff0c\u770b\u770b\u5b83\u4eec\u662f\u5426\u4e0e\u6ce8\u518c\u5904\u7684\u4e13\u5229\u8bbe\u8ba1\u5339\u914d\u3002\u5f53\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e0e\u533b\u7597\u670d\u52a1\u6709\u5173\u65f6\uff0c\u7528\u6237\u7684\u533b\u7597\u9690\u79c1\u53ef\u80fd\u4f1a\u53d7\u5230\u5a01\u80c1\u3002\n\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u62e5\u6709\u8005\u4e0d\u9700\u8981\u6bd4\u73b0\u5728\u66f4\u591a\u7684\u6743\u529b\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5e94\u8be5\u95ee\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u662f\u5426\u5e94\u8be5\u5b58\u5728\u3002\u6211\u4eec\u5df2\u7ecf\u62e5\u6709\u7248\u6743\u4e86\u3002\u5bf9\u6ca1\u6709\u5b9e\u9645\u5e94\u7528\u7684\u4f5c\u54c1\u6388\u4e88\u989d\u5916\u7684\u4e13\u5229\u6743\u662f\u5426\u4f1a\u7ed9\u516c\u4f17\u5e26\u6765\u4efb\u4f55\u597d\u5904\uff0c\u8fd9\u4e00\u70b9\u5e76\u4e0d\u6e05\u695a\u3002", "note_en": "When we talk about patents, we\u2019re usually talking about \u201cutility\u201d patents. Utility patents protect inventions that claim to have some practical application or use. (A lot of them still claim things that are actually  useless, but they\u2019re supposed to be potentially useful.)\n \u201cDesign\u201d patents, by contrast, protect only the ornamental or decorative aspects of a design. They don\u2019t protect any kind of functionality. If there\u2019s a functional work to protect, only a utility patent will do.\n Because design patents can only protect non-functional works, they\u2019re kind of like copyrights for visual works. And the bar for creativity and originality in a patented design is low\u2014so low that even a standard-issue graphical user interface can get patent protection, as our latest Stupid Patent of the Month shows.\n Shown below is a patented design owned by Siemens Healthcare GmbH, a company that\u2019s part of Siemens,  the most prolific patent-filer in Europe:\n  This patent, U.S. Patent No. D872,112, is a relatively standard GUI, with rows of circular icons displayed beneath a header bar. But the patent doesn\u2019t protect everything in that picture\u2014importantly, the portions circled by broken lines are  not part of the patented design. The design also includes features that are not in the picture\u2014namely, the colors used in the display. To understand what\u2019s actually been patented here, a member of the public must do more: they can request and pay for a hard copy of the patent from the U.S. Patent Office or navigate through the PTO\u2019s (extremely clunky)  PAIR database in the hopes of finding a downloadable version of the originally-filed image.\n Between the image\u2019s poor quality and the broken lines denoting unprotected features, it\u2019s practically to impossible to identify what the patented design even is. Is it the specific arrangement of circular icons in the three rows? If so, then why are certain circular icons excluded? Is it the icons that a Siemens designer created to represent things like \u201cusers\u201d and \u201creceivers?\u201d If it\u2019s this hard to say what the patented design actually is, it will be even harder to determine whether other designs are infringing. Infringement turns on the comparison between the patented design, the accused design, and the prior art. But that analysis can\u2019t even happen until it is clear exactly what a design patent protects.\n The low examination standards, lack of clarity, and resulting low quality of design patents already pose a big problem. But it could be about to get worse. Pro-patent lobbyists are pushing to give design patent owners more power over tech developers and users. They\u2019ve  introduced a bill that gives Customs and Border Protection the power to seize products at the border just by sizing them up and comparing them to design patents, whose owners are demanding this new type of special treatment.\n Giving CBP so much power will pose a real danger to ordinary technology users. Imagine CBP trying to determine infringement for a patented design like the one above, which is a GUI for medical software. To assess infringement, CBP officers could examine a device, including software applications, to see if they match patented designs in the registry. When those applications pertain to health services, the medical privacy of users may be at risk.\n Design patents owners don\u2019t need more power than they have today. Instead, we should be asking whether design patents should exist at all. We already have copyright. It\u2019s not clear that granting extra patent rights to works with no practical application provides any benefit to the public at all.", "posttime": "2020-05-25 04:46:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u4e13\u5229,patents", "title": "\u4e3a\u4ec0\u4e48\u8bbe\u8ba1\u4e13\u5229\u5728\u534e\u76db\u987f\u5f97\u5230\u4e86\u63d0\u632f\uff1f", "title_en": "Why are Design Patents getting a boost in DC?", "transed": 1, "url": "https://www.eff.org/deeplinks/2020/01/design-patents-are-useless-so-why-are-they-getting-boost-dc", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u4e13\u5229", "patents"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003564, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2013\u5e7411\u670819\u65e5\u7b2c11\u5377\u7b2c10\u671f\u81ea\u4ece\u7b2c\u4e8c\u79cd\u7f16\u7a0b\u8bed\u8a00\u53d1\u660e\u4ee5\u6765\uff0c\u8bed\u8a00\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u4e00\u76f4\u662f\u4e2a\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6848\u7684\u8303\u56f4\u4ece\u72ec\u7acb\u4e8e\u8bed\u8a00\u7684\u5bf9\u8c61\u6a21\u578b(\u5982COM(\u7ec4\u4ef6\u5bf9\u8c61\u6a21\u578b)\u548cCORBA(\u516c\u5171\u5bf9\u8c61\u8bf7\u6c42\u4ee3\u7406\u4f53\u7cfb\u7ed3\u6784))\u5230\u4e3a\u96c6\u6210\u8bed\u8a00\u800c\u8bbe\u8ba1\u7684VM(\u865a\u62df\u673a)\uff0c\u5982JVM(Java\u865a\u62df\u673a)\u548cCLR(\u516c\u5171\u8bed\u8a00\u8fd0\u884c\u65f6)\u3002\u968f\u7740\u8f6f\u4ef6\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u786c\u4ef6\u53d8\u5f97\u4e0d\u90a3\u4e48\u540c\u8d28\u5316\uff0c\u5355\u4e00\u8bed\u8a00\u6210\u4e3a\u6574\u4e2a\u7a0b\u5e8f\u7684\u6b63\u786e\u5de5\u5177\u7684\u53ef\u80fd\u6027\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u8981\u4f4e\u3002\u968f\u7740\u73b0\u4ee3\u7f16\u8bd1\u5668\u53d8\u5f97\u66f4\u52a0\u6a21\u5757\u5316\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u65b0\u4e00\u4ee3\u6709\u8da3\u7684\u89e3\u51b3\u65b9\u6848\u3002\n1961\u5e74\uff0c\u82f1\u56fd\u516c\u53f8Stantec\u53d1\u5e03\u4e86\u4e00\u6b3e\u540d\u4e3a\u6591\u9a6c\u7684\u8ba1\u7b97\u673a\uff0c\u8fd9\u6b3e\u8ba1\u7b97\u673a\u4e4b\u6240\u4ee5\u6709\u8da3\uff0c\u539f\u56e0\u6709\u5f88\u591a\uff0c\u5c24\u5176\u662f\u5b83\u7684\u57fa\u4e8e\u6570\u636e\u6d41\u7684\u6307\u4ee4\u96c6\u3002\u6591\u9a6c\u5f88\u96be\u4f7f\u7528\u5176\u672c\u673a\u6307\u4ee4\u96c6\u7684\u5b8c\u6574\u5f62\u5f0f\u8fdb\u884c\u7f16\u7a0b\uff0c\u56e0\u6b64\u5b83\u8fd8\u5305\u542b\u4e86\u4e00\u4e2a\u66f4\u4f20\u7edf\u7684\u7248\u672c\uff0c\u79f0\u4e3a\u7b80\u5355\u4ee3\u7801(Simple Code)\u3002\u8be5\u8868\u5355\u9644\u5e26\u4e86\u4e00\u4e9b\u9650\u5236\uff0c\u5305\u62ec\u6bcf\u4e2a\u7a0b\u5e8f\u6700\u591a\u53ea\u80fd\u6709150\u6761\u6307\u4ee4\u3002\u8fd9\u672c\u624b\u518c\u5f88\u6709\u5e2e\u52a9\u5730\u544a\u8bc9\u7528\u6237\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u9650\u5236\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u6709\u4eba\u4f1a\u7f16\u5199\u4e00\u4e2a\u5982\u6b64\u590d\u6742\u7684\u5de5\u4f5c\u7a0b\u5e8f\uff0c\u4ee5\u81f3\u4e8e\u9700\u8981\u8d85\u8fc7150\u6761\u6307\u4ee4\u3002\n\u5982\u4eca\uff0c\u8fd9\u79cd\u8bf4\u6cd5\u4f3c\u4e4e\u5f88\u53ef\u7b11\u3002\u5373\u4f7f\u662f\u76f8\u5bf9\u4f4e\u7ea7\u8bed\u8a00(\u5982C)\u4e2d\u7684\u7b80\u5355\u51fd\u6570\u5728\u7f16\u8bd1\u540e\u4e5f\u6709150\u591a\u6761\u6307\u4ee4\uff0c\u800c\u4e14\u5927\u591a\u6570\u7a0b\u5e8f\u90fd\u8fdc\u8fdc\u4e0d\u6b62\u4e00\u4e2a\u51fd\u6570\u3002\u4ece\u7f16\u5199\u6c47\u7f16\u4ee3\u7801\u5230\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u8f6c\u53d8\u6781\u5927\u5730\u589e\u52a0\u4e86\u53ef\u80fd\u7684\u7a0b\u5e8f\u7684\u590d\u6742\u6027\uff0c\u5404\u79cd\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\u4e5f\u662f\u5982\u6b64\u3002\n\u8f6f\u4ef6\u590d\u6742\u6027\u589e\u52a0\u7684\u8d8b\u52bf\u4e1d\u6beb\u6ca1\u6709\u51cf\u5f31\u7684\u8ff9\u8c61\uff0c\u73b0\u4ee3\u786c\u4ef6\u5e26\u6765\u4e86\u65b0\u7684\u6311\u6218\u300220\u4e16\u7eaa90\u5e74\u4ee3\u672b\uff0c\u7a0b\u5e8f\u5458\u4e0d\u5f97\u4e0d\u7784\u51c6\u90a3\u4e9b\u62bd\u8c61\u578b\u53f7\u5f88\u50cf\u5feb\u901fPDP-11\u7684\u4f4e\u7aefPC\u3002\u5728\u9ad8\u7aef\uff0c\u4ed6\u4eec\u4f1a\u9047\u5230\u50cf\u975e\u5e38\u5feb\u7684PDP-11\u8fd9\u6837\u7684\u62bd\u8c61\u6a21\u578b\uff0c\u53ef\u80fd\u67092\u52304\u4e2a(\u76f8\u540c\u7684)\u5904\u7406\u5668\u3002\u73b0\u5728\uff0c\u79fb\u52a8\u7535\u8bdd\u5f00\u59cb\u51fa\u73b0\u5177\u6709\u76f8\u540cISA(\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784)\u4f46\u901f\u5ea6\u4e0d\u540c\u7684\u516b\u4e2a\u5185\u6838\uff0c\u4e00\u4e9b\u9488\u5bf9\u4e0d\u540c\u5de5\u4f5c\u8d1f\u8f7d(DSP\u3001GPU)\u4f18\u5316\u7684\u5176\u4ed6\u6d41\u5904\u7406\u5668\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e13\u7528\u5185\u6838\u3002\n\u8868\u793a\u7c7b\u7684\u9ad8\u7ea7\u8bed\u8a00(\u7c7b\u4f3c\u4e8e\u4eba\u7c7b\u5bf9\u95ee\u9898\u9886\u57df\u7684\u7406\u89e3)\u548c\u8868\u793a\u7c7b\u7684\u4f4e\u7ea7\u8bed\u8a00(\u7c7b\u4f3c\u4e8e\u786c\u4ef6)\u4e4b\u95f4\u7684\u4f20\u7edf\u5212\u5206\u4e0d\u518d\u9002\u7528\u3002\u6ca1\u6709\u4e00\u79cd\u4f4e\u7ea7\u8bed\u8a00\u5177\u6709\u63a5\u8fd1\u53ef\u7f16\u7a0b\u6570\u636e\u6d41\u5904\u7406\u5668\u3001x86CPU\u3001\u5927\u89c4\u6a21\u591a\u7ebf\u7a0bGPU\u548cVLIW(\u8d85\u957f\u6307\u4ee4\u5b57)DSP(\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668)\u7684\u8bed\u4e49\u3002\u60f3\u8981\u4ece\u53ef\u7528\u7684\u786c\u4ef6\u4e2d\u83b7\u5f97\u6700\u540e\u4e00\u70b9\u6027\u80fd\u7684\u7a0b\u5e8f\u5458\u4e0d\u518d\u6709\u4e00\u79cd\u8bed\u8a00\u53ef\u4ee5\u7528\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u76ee\u6807\u3002\n\u7c7b\u4f3c\u5730\uff0c\u5728\u62bd\u8c61\u5149\u8c31\u7684\u53e6\u4e00\u7aef\uff0c\u7279\u5b9a\u4e8e\u9886\u57df\u7684\u8bed\u8a00\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c\u3002\u9ad8\u7ea7\u8bed\u8a00\u901a\u5e38\u4ee5\u901a\u7528\u6027\u6362\u53d6\u9ad8\u6548\u8868\u793a\u7b97\u6cd5\u5b50\u96c6\u7684\u80fd\u529b\u3002\u66f4\u901a\u7528\u7684\u9ad8\u7ea7\u8bed\u8a00(\u5982Java)\u727a\u7272\u4e86\u76f4\u63a5\u64cd\u4f5c\u6307\u9488\u7684\u80fd\u529b\uff0c\u4ee5\u6362\u53d6\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u66f4\u62bd\u8c61\u7684\u5185\u5b58\u6a21\u578b\u3002SQL\u7b49\u4e13\u7528\u8bed\u8a00\u4f7f\u67d0\u4e9b\u7c7b\u522b\u7684\u7b97\u6cd5\u65e0\u6cd5\u5b9e\u73b0\uff0c\u4f46\u4f7f\u5176\u9886\u57df\u5185\u7684\u5e38\u89c1\u4efb\u52a1\u53ef\u4ee5\u7528\u51e0\u884c\u4ee3\u7801\u6765\u8868\u793a\u3002\n\u60a8\u4e0d\u80fd\u518d\u671f\u671b\u4e00\u4e2a\u91cd\u8981\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u7528\u4e00\u79cd\u8bed\u8a00\u7f16\u5199\u7684\u3002\u9ad8\u7ea7\u8bed\u8a00\u901a\u5e38\u8c03\u7528\u7528\u4f4e\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u4ee3\u7801\u4f5c\u4e3a\u5176\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206(\u4f8b\u5982\uff0cGUI\u5448\u73b0)\uff0c\u4f46\u662f\u6dfb\u52a0\u8c03\u7528\u53ef\u80fd\u5f88\u56f0\u96be\u3002\n\u7279\u522b\u662f\uff0c\u4e24\u79cd\u975eC\u8bed\u8a00\u4e4b\u95f4\u7684\u63a5\u53e3\u901a\u5e38\u5f88\u96be\u6784\u5efa\u3002\u5373\u4f7f\u662f\u76f8\u5bf9\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5982C++\u548cJava\u4e4b\u95f4\u7684\u6865\u63a5\uff0c\u901a\u5e38\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u5904\u7406\uff0c\u9700\u8981C\u63a5\u53e3\u3002Kaffe Native Interface4\u786e\u5b9e\u63d0\u4f9b\u4e86\u8fd9\u6837\u505a\u7684\u673a\u5236\uff0c\u4f46\u5b83\u6ca1\u6709\u88ab\u5e7f\u6cdb\u91c7\u7528\uff0c\u800c\u4e14\u6709\u5c40\u9650\u6027\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u8bed\u8a00\u4e4b\u95f4\u7684\u63a5\u53e3\u95ee\u9898\u5bf9\u7f16\u8bd1\u5668\u7f16\u5199\u4eba\u5458\u6765\u8bf4\u5c06\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\u3002\u5b83\u63d0\u51fa\u4e86\u8bb8\u591a\u6311\u6218\uff0c\u5728\u8fd9\u91cc\u8be6\u7ec6\u8bf4\u660e\u3002\n\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u5c06\u4ee3\u7801\u548c\u6570\u636e\u7684\u4e00\u4e9b\u6982\u5ff5\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u827e\u4f26\u00b7\u51ef(Alan Kay)\u5728\u65bd\u4e50\u516c\u53f8(Xerox Parc)\u65f6\u5e2e\u52a9\u5f00\u53d1\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\uff0c\u4ed6\u5c06\u5bf9\u8c61\u63cf\u8ff0\u4e3a\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u8fdb\u884c\u901a\u4fe1\u7684\u7b80\u5355\u8ba1\u7b97\u673a\u3002\u8fd9\u4e2a\u5b9a\u4e49\u4e3a\u4e0d\u540c\u8bed\u8a00\u586b\u5199\u7ec6\u8282\u7559\u4e0b\u4e86\u5f88\u5927\u7684\u56de\u65cb\u4f59\u5730\uff1a\n\u00b7\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u5e94\u8be5\u6709\u96f6\u4e2a(\u5982GO)\u3001\u4e00\u4e2a(\u5982Smalltalk\u3001Java\u3001JavaScript\u3001Objective-C)\u6216\u591a\u4e2a(\u5982C++\u3001Self\u3001Simula)\u8d85\u7c7b\u6216\u539f\u578b\uff1f\n\u591a\u91cd\u7ee7\u627f\u95ee\u9898\u662f\u6700\u5e38\u89c1\u7684\u7126\u70b9\u9886\u57df\u4e4b\u4e00\u3002\u5355\u4e00\u7ee7\u627f\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u7b80\u5316\u4e86\u5b9e\u73b0\u7684\u8bb8\u591a\u65b9\u9762\u3002\u53ea\u9700\u8ffd\u52a0\u5b57\u6bb5\u5373\u53ef\u6269\u5c55\u5bf9\u8c61\uff1b\u5bf9\u8d85\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362\u53ea\u6d89\u53ca\u5ffd\u7565\u7ed3\u5c3e\uff0c\u800c\u5bf9\u5b50\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362\u4ec5\u6d89\u53ca\u68c0\u67e5-\u6307\u9488\u503c\u4fdd\u6301\u4e0d\u53d8\u3002C++\u4e2d\u7684\u5411\u4e0b\u8f6c\u6362\u9700\u8981\u901a\u8fc7\u8fd0\u884c\u65f6\u5e93\u51fd\u6570\u590d\u6742\u5730\u641c\u7d22\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\u4e2d\u7684\u7ee7\u627f\u56fe\u3002\n\u5b64\u7acb\u5730\u8bf4\uff0c\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u7ee7\u627f\u90fd\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u60f3\u8981\u5c06\u4e00\u4e2aC++\u5bf9\u8c61\u516c\u5f00\u5230Java\u4e2d\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u60a8\u4e5f\u8bb8\u53ef\u4ee5\u9075\u5faa.NET\u6216Kaffe\u65b9\u6cd5\uff0c\u5e76\u4e14\u4ec5\u652f\u6301\u4e0eC++\u7684\u5b50\u96c6(\u6258\u7ba1C++\u6216C++/CLI)\u7684\u76f4\u63a5\u4e92\u64cd\u4f5c\u6027\uff0c\u8be5\u5b50\u96c6\u4ec5\u652f\u6301\u5c06\u5728\u5c4f\u969c\u7684Java\u7aef\u516c\u5f00\u7684\u7c7b\u7684\u5355\u4e00\u7ee7\u627f\u3002\n\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5b9a\u4e49\u4e00\u79cd\u8bed\u8a00\u7684\u5b50\u96c6\uff0c\u8be5\u5b50\u96c6\u6e05\u6670\u5730\u6620\u5c04\u5230\u53e6\u4e00\u79cd\u8bed\u8a00\uff0c\u4f46\u53ef\u4ee5\u7406\u89e3\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u5168\u90e8\u529f\u80fd\u3002\u8fd9\u5c31\u662f\u52a1\u5b9e\u7684Smalltalk\u4e2d\u91c7\u7528\u7684\u65b9\u6cd5\uff1a5\u5141\u8bb8Objective-C++\u5bf9\u8c61(\u53ef\u4ee5\u5c06C++\u5bf9\u8c61\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u5e76\u8c03\u7528\u5b83\u4eec\u7684\u65b9\u6cd5)\u76f4\u63a5\u516c\u5f00\uff0c\u5c31\u50cf\u5b83\u4eec\u662fSmalltalk\u5bf9\u8c61\u4e00\u6837\uff0c\u5171\u4eab\u76f8\u540c\u7684\u5e95\u5c42\u8868\u793a\u3002\n\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4ecd\u7136\u5b58\u5728\u8ba4\u77e5\u969c\u788d\u3002\u5982\u679c\u60a8\u60f3\u8981\u76f4\u63a5\u4f7f\u7528C++\u6846\u67b6\uff0c\u4f8b\u5982\u52a1\u5b9e\u7684Smalltalk\u6216.NET\u4e2d\u7684LLVM\uff0c\u90a3\u4e48\u60a8\u5c06\u9700\u8981\u7f16\u5199\u5355\u7ee7\u627f\u7c7b\u6765\u5c01\u88c5\u8be5\u5e93\u7528\u4e8e\u5176\u5927\u90e8\u5206\u6838\u5fc3\u7c7b\u578b\u7684\u591a\u91cd\u7ee7\u627f\u7c7b\u3002\n\u53e6\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u662f\u907f\u514d\u516c\u5f00\u5bf9\u8c61\u4e2d\u7684\u4efb\u4f55\u5b57\u6bb5\uff0c\u800c\u53ea\u5c06\u6bcf\u4e2aC++\u7c7b\u516c\u5f00\u4e3a\u63a5\u53e3\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u7279\u6b8a\u7684\u7f16\u8bd1\u5668\u652f\u6301\uff0c\u5c31\u4e0d\u53ef\u80fd\u4ece\u6865\u63a5\u7684\u7c7b\u7ee7\u627f\uff0c\u4ece\u800c\u65e0\u6cd5\u7406\u89e3\u67d0\u4e9b\u63a5\u53e3\u662f\u968f\u5b9e\u73b0\u4e00\u8d77\u6765\u7684\u3002\n\u867d\u7136\u590d\u6742\uff0c\u4f46\u4e0e\u5728\u65b9\u6cd5\u67e5\u627e\u542b\u4e49\u4e0d\u540c\u7684\u8bed\u8a00\u4e4b\u95f4\u4ea4\u4e92\u76f8\u6bd4\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u7cfb\u7edf\u3002\u4f8b\u5982\uff0cJava\u548cSmalltalk\u5177\u6709\u51e0\u4e4e\u76f8\u540c\u7684\u5bf9\u8c61\u548c\u5185\u5b58\u6a21\u578b\uff0c\u4f46\u662fJava\u5c06\u65b9\u6cd5\u5206\u6d3e\u7684\u6982\u5ff5\u7ed1\u5b9a\u5230\u7c7b\u5c42\u6b21\u7ed3\u6784\uff0c\u800c\u5728Smalltalk\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u5b9e\u73b0\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u5219\u5b83\u4eec\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\u3002\n\u8fd9\u662fRedline Smalltalk\u9047\u5230\u7684\u95ee\u9898\uff0c1\u5b83\u7f16\u8bd1Smalltalk\u4ee5\u4fbf\u5728JVM\u4e0a\u8fd0\u884c\u3002\u5b83\u5b9e\u73b0Smalltalk\u65b9\u6cd5\u5206\u6d3e\u7684\u673a\u5236\u5305\u62ec\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u751f\u6210\u4e00\u4e2aJava\u63a5\u53e3\uff0c\u7136\u540e\u5728\u5206\u6d3e\u4e4b\u524d\u6267\u884c\u63a5\u6536\u5668\u5230\u76f8\u5173\u63a5\u53e3\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362\u3002\u5411Java\u7c7b\u53d1\u9001\u6d88\u606f\u9700\u8981\u989d\u5916\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u73b0\u6709\u7684Java\u7c7b\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1b\u56e0\u6b64\uff0cRedline Smalltalk\u5fc5\u987b\u9000\u56de\u5230\u4f7f\u7528Java\u7684\u53cd\u5c04API\u3002\nSmalltalk(\u548cObjective-C)\u7684\u65b9\u6cd5\u67e5\u627e\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3a\u6709\u8bb8\u591a\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u7f3a\u5931\u6216\u53d7\u9650\u7684\u7b2c\u4e8c\u6b21\u673a\u4f1a\u5206\u6d3e\u673a\u5236\u3002\u5728\u5c06Objective-C\u7f16\u8bd1\u4e3aJavaScript\u65f6\uff0c\u800c\u4e0d\u662f\u4f7f\u7528JavaScript\u65b9\u6cd5\u8c03\u7528\uff0c\u60a8\u5fc5\u987b\u5c06\u53d1\u9001\u7684\u6bcf\u4e2aObjective-C\u6d88\u606f\u5305\u88c5\u5728\u4e00\u4e2a\u5c0f\u51fd\u6570\u4e2d\uff0c\u8be5\u51fd\u6570\u9996\u5148\u68c0\u67e5\u8be5\u65b9\u6cd5\u662f\u5426\u5b9e\u9645\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8c03\u7528\u4e00\u4e9b\u67e5\u627e\u4ee3\u7801\u3002\n\u8fd9\u5728JavaScript\u4e2d\u76f8\u5bf9\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u4ee5\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u5f0f\u5904\u7406\u5404\u79cd\u51fd\u6570\uff1a\u5982\u679c\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\u4f7f\u7528\u7684\u53c2\u6570\u6bd4\u5b83\u9884\u671f\u7684\u591a\uff0c\u90a3\u4e48\u5b83\u4f1a\u5c06\u5269\u4f59\u7684\u53c2\u6570\u4f5c\u4e3a\u5b83\u53ef\u4ee5\u9884\u671f\u7684\u6570\u7ec4\u6765\u63a5\u6536\u3002\u56f4\u68cb\u4e5f\u4f1a\u505a\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002\u7c7bC\u8bed\u8a00\u53ea\u662f\u5c06\u5b83\u4eec\u653e\u5728\u5806\u6808\u4e0a\uff0c\u5e76\u671f\u671b\u7a0b\u5e8f\u5458\u5728\u4e0d\u8fdb\u884c\u9519\u8bef\u68c0\u67e5\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u5199\u5165\u3002\n\u5185\u5b58\u6a21\u578b\u4e2d\u660e\u663e\u7684\u4e8c\u5206\u6cd5\u662f\u5728\u81ea\u52a8\u91ca\u653e\u548c\u624b\u52a8\u91ca\u653e\u4e4b\u95f4\u3002\u4e00\u4e2a\u7a0d\u5fae\u91cd\u8981\u4e00\u70b9\u7684\u95ee\u9898\u662f\u786e\u5b9a\u6027\u7834\u574f\u548c\u975e\u786e\u5b9a\u6027\u7834\u574f\u4e4b\u95f4\u7684\u533a\u522b\u3002\n\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528Boehm-Demers-Weiser\u5783\u573e\u6536\u96c6\u56683\u8fd0\u884cC\u662f\u6ca1\u6709\u95ee\u9898\u7684(\u9664\u975e\u5185\u5b58\u7528\u5b8c\u5e76\u4e14\u6709\u5f88\u591a\u770b\u8d77\u6765\u50cf\u6307\u9488\u7684\u6574\u6570)\u3002\u5bf9\u4e8eC++\u6765\u8bf4\uff0c\u505a\u540c\u6837\u7684\u4e8b\u60c5\u8981\u56f0\u96be\u5f97\u591a\uff0c\u56e0\u4e3a\u5bf9\u8c61\u91ca\u653e\u662f\u4e00\u4e2a\u53ef\u89c2\u5bdf\u5230\u7684\u4e8b\u4ef6\u3002\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a\nLockHolder\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u5bf9\u8c61\uff1b\u4e92\u65a5\u4f53\u4f20\u5165\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u5176\u6784\u9020\u51fd\u6570\u4e2d\u9501\u5b9a\u4e92\u65a5\u4f53\uff0c\u5e76\u5728\u6790\u6784\u51fd\u6570\u4e2d\u89e3\u9501\u3002\u73b0\u5728\uff0c\u60f3\u8c61\u4e00\u4e0b\u5728\u5b8c\u5168\u5783\u573e\u56de\u6536\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801-\u6790\u6784\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u95f4\u6ca1\u6709\u5b9a\u4e49\u3002\n\u8fd9\u4e2a\u4f8b\u5b50\u76f8\u5bf9\u7b80\u5355\uff0c\u5f88\u5bb9\u6613\u505a\u5bf9\u3002\u6b64\u65f6\u9700\u8981\u5783\u573e\u6536\u96c6\u7684C++\u5b9e\u73b0\u6765\u8fd0\u884c\u6790\u6784\u51fd\u6570\uff0c\u4f46\u4e0d\u9700\u8981\u91ca\u653e\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4e60\u60ef\u7528\u6cd5\u5728\u4ece\u4e00\u5f00\u59cb\u5c31\u652f\u6301\u5783\u573e\u6536\u96c6\u7684\u8bed\u8a00\u4e2d\u662f\u4e0d\u53ef\u7528\u7684\u3002\u6df7\u5408\u5b83\u4eec\u7684\u57fa\u672c\u95ee\u9898\u4e0d\u662f\u786e\u5b9a\u8c01\u8d1f\u8d23\u91ca\u653e\u5185\u5b58\uff1b\u76f8\u53cd\uff0c\u4e3a\u4e00\u4e2a\u6a21\u578b\u7f16\u5199\u7684\u4ee3\u7801\u9700\u8981\u786e\u5b9a\u6027\u64cd\u4f5c\uff0c\u800c\u4e3a\u53e6\u4e00\u4e2a\u6a21\u578b\u7f16\u5199\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u786e\u5b9a\u6027\u64cd\u4f5c\u3002\n\u6709\u4e24\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0C++\u7684\u5783\u573e\u6536\u96c6\uff1a\u7b2c\u4e00\u79cd\u662f\u8ba9\u5220\u9664\u64cd\u4f5c\u7b26\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u4f46\u4e0d\u56de\u6536\u5e95\u5c42\u5b58\u50a8\uff1b\u53e6\u4e00\u79cd\u662f\u5c06\u5220\u9664\u8bbe\u4e3a\u65e0\u64cd\u4f5c\uff0c\u5e76\u5728\u68c0\u6d4b\u5230\u5bf9\u8c61\u4e0d\u53ef\u8bbf\u95ee\u65f6\u8c03\u7528\u6790\u6784\u51fd\u6570\u3002\n\u53ea\u8c03\u7528delete\u7684\u6790\u6784\u51fd\u6570\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\u662f\u76f8\u540c\u7684\uff1a\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u65e0\u64cd\u4f5c\u7684\u3002\u91ca\u653e\u5176\u4ed6\u8d44\u6e90\u7684\u6790\u6784\u51fd\u6570\u662f\u4e0d\u540c\u7684\u3002\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u53ef\u4ee5\u786e\u5b9a\u5730\u8fd0\u884c\uff0c\u4f46\u5982\u679c\u7a0b\u5e8f\u5458\u4e0d\u663e\u5f0f\u5220\u9664\u76f8\u5173\u5bf9\u8c61\uff0c\u5b83\u4eec\u5c06\u65e0\u6cd5\u8fd0\u884c\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u4eec\u6700\u7ec8\u4f1a\u8fd0\u884c\uff0c\u4f46\u4e0d\u4e00\u5b9a\u4f1a\u5728\u5e95\u5c42\u8d44\u6e90\u8017\u5c3d\u65f6\u8fd0\u884c\u3002\n\u6b64\u5916\uff0c\u5728\u8bb8\u591a\u8bed\u8a00\u4e2d\uff0c\u4e00\u4e2a\u76f8\u5f53\u5e38\u89c1\u7684\u4e60\u60ef\u7528\u6cd5\u662f\u81ea\u6709\u5bf9\u8c61\uff0c\u5b83\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\u6216\u6267\u884c\u4e00\u4e2a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u7136\u540e\u89e6\u53d1\u56de\u8c03\u3002\u7136\u540e\uff0c\u56de\u8c03\u7684\u63a5\u6536\u65b9\u8d1f\u8d23\u6e05\u7406\u901a\u77e5\u5668\u3002\u5f53\u5b83\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u65f6\uff0c\u5b83\u4e0e\u5bf9\u8c61\u56fe\u7684\u5176\u4f59\u90e8\u5206\u65ad\u5f00\u8fde\u63a5\uff0c\u56e0\u6b64\u770b\u8d77\u6765\u662f\u5783\u573e\u3002\u5fc5\u987b\u660e\u786e\u544a\u8bc9\u6536\u96c6\u5668\u5b83\u4e0d\u662f\u3002\u8fd9\u4e0e\u6ca1\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u7684\u8bed\u8a00\u4e2d\u7684\u6a21\u5f0f\u76f8\u53cd\uff0c\u5728\u6ca1\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u7684\u8bed\u8a00\u4e2d\uff0c\u9664\u975e\u7cfb\u7edf\u53e6\u884c\u901a\u77e5\uff0c\u5426\u5219\u5047\u5b9a\u5bf9\u8c61\u662f\u6d3b\u52a8\u7684\u3002(\u6c49\u65af\u00b7\u535a\u59c6(Hans Boehm)\u57281996\u5e74\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba\u4e86\u5176\u4e2d\u4e00\u4e9b\u95ee\u9898\u30022)\u3002\n\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u90fd\u51fa\u73b0\u5728\u82f9\u679c\u5c06\u5783\u573e\u6536\u96c6\u6dfb\u52a0\u5230Objective-C\u7684\u5931\u8d25(\u8c22\u5929\u8c22\u5730\uff0c\u4e0d\u518d\u652f\u6301)\u5c1d\u8bd5\u4e2d\u3002\u5f88\u591aObjective-C\u4ee3\u7801\u4f9d\u8d56\u4e8e-dealloc\u65b9\u6cd5\u4e2d\u7684\u8fd0\u884c\u4ee3\u7801\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u4e0e\u4e92\u64cd\u4f5c\u6027\u95ee\u9898\u5bc6\u5207\u76f8\u5173\u3002\u8be5\u5b9e\u73b0\u540c\u65f6\u652f\u6301\u8ddf\u8e2a\u5185\u5b58\u548c\u672a\u8ddf\u8e2a\u5185\u5b58\uff0c\u4f46\u4e0d\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u516c\u5f00\u6b64\u4fe1\u606f\u3002\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\uff1a\nvoid allocateSomeObjects(id*buffer\uff0cint count){for(int i=0\uff1bi&lt\uff1bcount\uff1bi++)for(int i=0\uff1bi&lt\uff1bcount\uff1bi++)for(id allocateSomeObjects(id*buffer\uff0cint count)){0}{0}\u3002\n\u5728\u5783\u573e\u6536\u96c6\u6a21\u5f0f\u4e0b\uff0c\u65e0\u6cd5\u5224\u65ad\u6b64\u4ee3\u7801\u662f\u5426\u6b63\u786e\u3002\u5b83\u7684\u6b63\u786e\u4e0e\u5426\u53d6\u51b3\u4e8e\u547c\u53eb\u8005\u3002\u5982\u679c\u8c03\u7528\u65b9\u4f20\u9012\u4f7f\u7528NSAllocateCollectable()\u5206\u914d\u7684\u7f13\u51b2\u533a\u3001\u5c06NSScannedOption\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5206\u914d\u7684\u7f13\u51b2\u533a\uff0c\u6216\u8005\u4f7f\u7528\u5806\u6808\u4e0a\u5206\u914d\u7684\u7f13\u51b2\u533a\u6216\u4f7f\u7528\u5783\u573e\u6536\u96c6\u652f\u6301\u7f16\u8bd1\u7684\u7f16\u8bd1\u5355\u5143\u4e2d\u7684\u5168\u5c40\u7f13\u51b2\u533a\u5206\u914d\u7684\u7f13\u51b2\u533a\uff0c\u5219\u5bf9\u8c61\u5c06(\u81f3\u5c11)\u4e0e\u7f13\u51b2\u533a\u4e00\u6837\u957f\u3002\u5982\u679c\u8c03\u7528\u65b9\u4f20\u9012\u4f7f\u7528malloc()\u5206\u914d\u7684\u7f13\u51b2\u533a\uff0c\u6216\u8005\u4f5c\u4e3aC\u6216C++\u7f16\u8bd1\u5355\u5143\u4e2d\u7684\u5168\u5c40\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u5bf9\u8c61\u5c06(\u53ef\u80fd)\u5728\u7f13\u51b2\u533a\u4e4b\u524d\u88ab\u91ca\u653e\u3002\u8fd9\u53e5\u8bdd\u4e2d\u7684\u201c\u6f5c\u5728\u201d\u4f7f\u8fd9\u6210\u4e3a\u4e00\u4e2a\u66f4\u5927\u7684\u95ee\u9898\uff1a\u56e0\u4e3a\u5b83\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u5f88\u96be\u8c03\u8bd5\u3002\nObjective-C\u7684ARC(\u81ea\u52a8\u5f15\u7528\u8ba1\u6570)\u6269\u5c55\u4e0d\u63d0\u4f9b\u5b8c\u6574\u7684\u5783\u573e\u6536\u96c6(\u5b83\u4eec\u4ecd\u7136\u5141\u8bb8\u5783\u573e\u5468\u671f\u6cc4\u6f0f)\uff0c\u4f46\u5b83\u4eec\u786e\u5b9e\u6269\u5c55\u4e86\u7c7b\u578b\u7cfb\u7edf\u4ee5\u5b9a\u4e49\u6b64\u7c7b\u7f13\u51b2\u533a\u7684\u6240\u6709\u6743\u7c7b\u578b\u3002\u5c06\u5bf9\u8c61\u6307\u9488\u590d\u5236\u5230C\u9700\u8981\u63d2\u5165\u5305\u542b\u6240\u6709\u6743\u8f6c\u79fb\u7684\u663e\u5f0f\u5f3a\u5236\u8f6c\u6362\u3002\n\u5f15\u7528\u8ba1\u6570\u8fd8\u89e3\u51b3\u4e86\u975e\u5faa\u73af\u6570\u636e\u7684\u786e\u5b9a\u6027\u95ee\u9898\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u4e0e\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u4e92\u64cd\u4f5c\u7684\u6709\u8da3\u65b9\u5f0f\uff1a\u901a\u8fc7\u8bbe\u7f6efree()\u6765\u9012\u51cf\u5f15\u7528\u8ba1\u6570\u3002\u5faa\u73af(\u6216\u6f5c\u5728\u5faa\u73af)\u6570\u636e\u7ed3\u6784\u9700\u8981\u6dfb\u52a0\u5faa\u73af\u68c0\u6d4b\u5668\u3002\u5927\u536b\u00b7F\u00b7\u57f9\u6839(David F.Bacon)\u5728IBM\u7684\u56e2\u961f\u5df2\u7ecf\u4e3a\u5468\u671f\u68c0\u6d4b\u56688\u8bbe\u8ba1\u4e86\u8bb8\u591a\u4ea7\u54c1\uff0c\u53ea\u8981\u6307\u9488\u80fd\u591f\u88ab\u51c6\u786e\u8bc6\u522b\uff0c\u5f15\u7528\u8ba1\u6570\u5c31\u53ef\u4ee5\u6210\u4e3a\u4e00\u79cd\u5b8c\u6574\u7684\u5783\u573e\u6536\u96c6\u673a\u5236\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5faa\u73af\u68c0\u6d4b\u6d89\u53ca\u4ece\u6f5c\u5728\u7684\u5faa\u73af\u5bf9\u8c61\u904d\u5386\u6574\u4e2a\u5bf9\u8c61\u56fe\u3002\u53ef\u4ee5\u91c7\u53d6\u4e00\u4e9b\u7b80\u5355\u7684\u6b65\u9aa4\u6765\u964d\u4f4e\u8fd9\u4e00\u6210\u672c\u3002\u6700\u660e\u663e\u7684\u4e00\u4e2a\u5c31\u662f\u63a8\u8fdf\u5b83\u3002\u5982\u679c\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u9012\u51cf\u4f46\u672a\u91ca\u653e\uff0c\u5219\u8be5\u5bf9\u8c61\u4ec5\u53ef\u80fd\u662f\u5468\u671f\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u5b83\u540e\u6765\u9012\u589e\uff0c\u90a3\u4e48\u5b83\u5c31\u4e0d\u662f\u5783\u573e\u5faa\u73af\u7684\u4e00\u90e8\u5206(\u5b83\u53ef\u80fd\u4ecd\u7136\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u60a8\u73b0\u5728\u8fd8\u4e0d\u5728\u4e4e)\u3002\u5982\u679c\u5b83\u7a0d\u540e\u88ab\u91ca\u653e\uff0c\u5219\u5b83\u662f\u975e\u5faa\u73af\u7684\u3002\n\u5468\u671f\u68c0\u6d4b\u5ef6\u8fdf\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u5f97\u5230\u7684\u4e0d\u786e\u5b9a\u6027\u5c31\u8d8a\u5927\uff0c\u4f46\u662f\u5468\u671f\u68c0\u6d4b\u5668\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u8d8a\u5c11\u3002\n\u5982\u4eca\uff0c\u5927\u591a\u6570\u4eba\u8ba4\u4e3a\u5f02\u5e38\u662f\u7531C++\u666e\u53ca\u7684\uff1a\u5927\u81f4\u7b49\u540c\u4e8eC\u4e2d\u7684setjmp()\u548clong jmp()\uff0c\u5c3d\u7ba1\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u673a\u5236\u3002\n\u5df2\u7ecf\u63d0\u51fa\u4e86\u4e00\u4e9b\u5176\u4ed6\u4f8b\u5916\u673a\u5236\u3002\u5728Smalltalk-80\u4e2d\uff0c\u5f02\u5e38\u5b8c\u5168\u5728\u5e93\u4e2d\u5b9e\u73b0\u3002\u8be5\u8bed\u8a00\u63d0\u4f9b\u7684\u552f\u4e00\u539f\u8bed\u662f\uff0c\u5f53\u60a8\u663e\u5f0f\u5730\u4ece\u95ed\u5305\u8fd4\u56de\u65f6\uff0c\u60a8\u5c06\u4ece\u58f0\u660e\u95ed\u5305\u7684\u4f5c\u7528\u57df\u8fd4\u56de\u3002\u5982\u679c\u5728\u5806\u6808\u4e2d\u5411\u4e0b\u4f20\u9012\u95ed\u5305\uff0c\u5219\u8fd4\u56de\u5c06\u9690\u5f0f\u5c55\u5f00\u5806\u6808\u3002\n\u5f53Smalltalk\u5f02\u5e38\u53d1\u751f\u65f6\uff0c\u5b83\u4f1a\u8c03\u7528\u5806\u6808\u9876\u90e8\u7684\u5904\u7406\u7a0b\u5e8f\u5757\u3002\u7136\u540e\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fd4\u56de\uff0c\u8feb\u4f7f\u5806\u6808\u5c55\u5f00\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u4f1a\u8fdb\u884c\u4e00\u4e9b\u6e05\u7406\u3002\u5806\u6808\u672c\u8eab\u662f\u6fc0\u6d3b\u8bb0\u5f55(\u5373\u5bf9\u8c61)\u7684\u5217\u8868\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u6267\u884c\u66f4\u590d\u6742\u7684\u64cd\u4f5c\u3002Common Lisp\u8fd8\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e30\u5bcc\u7684\u5f02\u5e38\uff0c\u5305\u62ec\u90a3\u4e9b\u652f\u6301\u7acb\u5373\u6062\u590d\u6216\u91cd\u65b0\u542f\u52a8\u7684\u5f02\u5e38\u3002\n\u5373\u4f7f\u5728\u5177\u6709\u7c7b\u4f3c\u5f02\u5e38\u6a21\u578b\u7684\u8bed\u8a00\u4e2d\uff0c\u5f02\u5e38\u4e92\u64cd\u4f5c\u6027\u4e5f\u5f88\u56f0\u96be\u3002\u4f8b\u5982\uff0cC++\u548cObjective-C\u90fd\u6709\u7c7b\u4f3c\u7684\u5f02\u5e38\u6982\u5ff5\uff0c\u4f46\u662f\u671f\u671b\u6355\u6349void*\u7684C++catch\u5757\u5728\u9047\u5230Objective-C\u5bf9\u8c61\u6307\u9488\u65f6\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u5728GNUstep Objective-C\u8fd0\u884c\u65f66\u4e2d\uff0c\u5728\u51b3\u5b9a\u4e0d\u6a21\u4effApple\u7684\u5206\u6bb5\u9519\u8bef\u884c\u4e3a\u540e\uff0c\u6211\u4eec\u9009\u62e9\u4e0d\u6355\u83b7\u5b83\u3002OSX\u7684\u6700\u65b0\u7248\u672c\u90fd\u91c7\u7528\u4e86\u8fd9\u79cd\u884c\u4e3a\uff0c\u4f46\u8fd9\u4e2a\u51b3\u5b9a\u6709\u70b9\u6b66\u65ad\u3002\n\u5373\u4f7f\u60a8\u786e\u5b9e\u4eceC++\u6355\u83b7\u4e86\u5bf9\u8c61\u6307\u9488\uff0c\u8fd9\u4e5f\u4e0d\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u5f53\u5b83\u88ab\u6355\u83b7\u65f6\uff0c\u60a8\u5df2\u7ecf\u4e22\u5931\u4e86\u6240\u6709\u7c7b\u578b\u4fe1\u606f\uff0c\u5e76\u4e14\u65e0\u6cd5\u786e\u5b9a\u5b83\u662fObjective-C\u5bf9\u8c61\u3002\n\u5f53\u60a8\u5f00\u59cb\u8003\u8651\u6027\u80fd\u65f6\uff0c\u66f4\u5fae\u5999\u7684\u95ee\u9898\u5c31\u4f1a\u6084\u6084\u51fa\u73b0\u3002VMKit7\u7684\u65e9\u671f\u7248\u672c(\u5728LLVM\u4e4b\u4e0a\u5b9e\u73b0Java\u548cCLRVM)\u4f7f\u7528\u4e3aC++\u8bbe\u8ba1\u7684\u96f6\u6210\u672c\u5f02\u5e38\u6a21\u578b\u3002\u8fd9\u662f\u96f6\u6210\u672c\uff0c\u56e0\u4e3a\u8fdb\u5165try\u5757\u4e0d\u9700\u8981\u4efb\u4f55\u8d39\u7528\u3002\u7136\u800c\uff0c\u5f53\u629b\u51fa\u5f02\u5e38\u65f6\uff0c\u60a8\u5fc5\u987b\u89e3\u6790\u4e00\u4e9b\u63cf\u8ff0\u5982\u4f55\u5c55\u5f00\u5806\u6808\u7684\u8868\uff0c\u7136\u540e\u8c03\u7528\u6bcf\u4e2a\u5806\u6808\u5e27\u7684\u4e2a\u6027\u51fd\u6570\u6765\u51b3\u5b9a\u662f\u5426(\u4ee5\u53ca\u5728\u54ea\u91cc)\u5e94\u8be5\u6355\u83b7\u5f02\u5e38\u3002\n\u8fd9\u79cd\u673a\u5236\u975e\u5e38\u9002\u5408C++\uff0c\u56e0\u4e3a\u5728C++\u4e2d\u5f88\u5c11\u51fa\u73b0\u5f02\u5e38\uff0c\u4f46\u662fJava\u4f7f\u7528\u5f02\u5e38\u6765\u62a5\u544a\u5927\u91cf\u76f8\u5f53\u5e38\u89c1\u7684\u9519\u8bef\u60c5\u51b5\u3002\u5728\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u653e\u5377\u673a\u7684\u6027\u80fd\u662f\u4e00\u4e2a\u9650\u5236\u56e0\u7d20\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u9488\u5bf9\u53ef\u80fd\u5f15\u53d1\u5f02\u5e38\u7684\u65b9\u6cd5\u4fee\u6539\u4e86\u8c03\u7528\u7ea6\u5b9a\u3002\u8fd9\u4e9b\u51fd\u6570\u5c06\u5f02\u5e38\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u8fd4\u56de(\u901a\u5e38\u5728\u4e0d\u540c\u7684\u5bc4\u5b58\u5668\u4e2d)\uff0c\u6bcf\u4e2a\u8c03\u7528\u53ea\u9700\u68c0\u67e5\u8be5\u5bc4\u5b58\u5668\u662f\u5426\u5305\u542b0\uff0c\u5982\u679c\u4e0d\u5305\u542b\uff0c\u5219\u8df3\u8f6c\u5230\u5f02\u5e38\u5904\u7406\u5757\u3002\n\u5f53\u60a8\u63a7\u5236\u6bcf\u4e2a\u8c03\u7528\u65b9\u7684\u4ee3\u7801\u751f\u6210\u5668\u65f6\uff0c\u8fd9\u5f88\u597d\uff0c\u4f46\u5728\u8de8\u8bed\u8a00\u573a\u666f\u4e2d\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5411C\u6dfb\u52a0\u53e6\u4e00\u4e2a\u53cd\u6620\u6b64\u884c\u4e3a\u7684\u8c03\u7528\u7ea6\u5b9a\u6216\u63d0\u4f9b\u7c7b\u4f3c\u4e8eGO\u4e2d\u901a\u5e38\u7528\u4e8e\u8fd4\u56de\u9519\u8bef\u6761\u4ef6\u7684\u591a\u8fd4\u56de\u503c\u673a\u5236\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u4f46\u8fd9\u5c06\u8981\u6c42\u6bcf\u4e2aC\u8c03\u7528\u8005\u90fd\u4e86\u89e3\u5916\u8bed\u8bed\u4e49\u3002\n\u5f53\u60a8\u5f00\u59cb\u5c06\u51fd\u6570\u5f0f\u8bed\u8a00\u5305\u62ec\u5728\u60a8\u5e0c\u671b\u4e0e\u4e4b\u4e92\u64cd\u4f5c\u7684\u96c6\u5408\u4e2d\u65f6\uff0c\u53ef\u53d8\u6027\u7684\u6982\u5ff5\u5c31\u53d8\u5f97\u5f88\u91cd\u8981\u3002\u50cfHaskell\u8fd9\u6837\u7684\u8bed\u8a00\u6ca1\u6709\u53ef\u53d8\u7c7b\u578b\u3002\u5c31\u5730\u4fee\u6539\u6570\u636e\u7ed3\u6784\u662f\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f5c\u4e3a\u4f18\u5316\u6765\u505a\u7684\u4e8b\u60c5\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5728\u8bed\u8a00\u4e2d\u516c\u5f00\u7684\u4e8b\u60c5\u3002\n\u8fd9\u662fF#\u9047\u5230\u7684\u95ee\u9898\uff0c\u5b83\u4f5c\u4e3aOCaml\u7684\u4e00\u79cd\u65b9\u8a00\u51fa\u552e\uff0c\u53ef\u4ee5\u4e0e\u5176\u4ed6.NET\u8bed\u8a00\u96c6\u6210\uff0c\u4f7f\u7528C#\u7f16\u5199\u7684\u7c7b\uff0c\u7b49\u7b49\u3002C#\u5df2\u7ecf\u6709\u4e86\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u6982\u5ff5\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u62bd\u8c61\uff0c\u4f46\u4e0d\u53ef\u53d8\u7c7b\u53ea\u662f\u4e00\u4e2a\u4e0d\u516c\u5f00\u4efb\u4f55\u975e\u53ea\u8bfb\u5b57\u6bb5\u7684\u7c7b\uff0c\u5e76\u4e14\u53ea\u8bfb\u5b57\u6bb5\u53ef\u4ee5\u5305\u542b\u5bf9\u5bf9\u8c61\u7684\u5f15\u7528(\u901a\u8fc7\u4efb\u610f\u5f15\u7528\u94fe)\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5f15\u7528\u7684\u53ef\u53d8\u5bf9\u8c61\u7684\u72b6\u6001\u53ef\u4ee5\u5728\u51fd\u6570\u4ee3\u7801\u4e0b\u66f4\u6539\u3002\u5728\u5176\u4ed6\u8bed\u8a00(\u5982C++\u6216Objective-C)\u4e2d\uff0c\u53ef\u53d8\u6027\u901a\u5e38\u662f\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e9b\u4e0d\u53ef\u53d8\u7684\u7c7b\u5728\u7c7b\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u6ca1\u6709\u8bed\u8a00\u652f\u6301\uff0c\u4e5f\u6ca1\u6709\u786e\u5b9a\u5bf9\u8c61\u662f\u5426\u53ef\u53d8\u7684\u7b80\u5355\u65b9\u6cd5\u3002\n\u5728\u8bed\u8a00\u63d0\u4f9b\u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\uff0cC\u548cC++\u5177\u6709\u975e\u5e38\u4e0d\u540c\u7684\u53ef\u53d8\u6027\u6982\u5ff5\uff1a\u5bf9\u5bf9\u8c61\u7684\u7279\u5b9a\u5f15\u7528\u53ef\u80fd\u4f1a\u4fee\u6539\u5b83\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u4fee\u6539\u5b83\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5bf9\u8c61\u672c\u8eab\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u4e00\u70b9\uff0c\u518d\u52a0\u4e0a\u6df1\u5ea6\u590d\u5236\u95ee\u9898\uff0c\u4f7f\u5f97\u51fd\u6570\u5f0f\u8bed\u8a00\u548c\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684\u63a5\u53e3\u6210\u4e3a\u4e00\u4e2a\u96be\u9898\u3002\n\u5355\u4f53\u4e3a\u754c\u9762\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8bf1\u4eba\u7684\u53ef\u80fd\u6027\u3002\u5355\u4f53\u662f\u8ba1\u7b97\u6b65\u9aa4\u7684\u6709\u5e8f\u5e8f\u5217\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u4e16\u754c\u4e2d\uff0c\u8fd9\u662f\u4e00\u7cfb\u5217\u6d88\u606f\u53d1\u9001\u6216\u65b9\u6cd5\u8c03\u7528\u3002\u5177\u6709Const(\u5e38\u91cf)\u7684C++\u6982\u5ff5\u7684\u65b9\u6cd5(\u5373\uff0c\u4e0d\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001)\u53ef\u4ee5\u5728Monad\u5916\u90e8\u8c03\u7528\uff0c\u56e0\u6b64\u670d\u4ece\u63a8\u6d4b\u6027\u6267\u884c\u548c\u56de\u6eaf\uff0c\u800c\u5176\u4ed6\u65b9\u6cd5\u5e94\u8be5\u6309\u7167Monad\u5b9a\u4e49\u7684\u4e25\u683c\u987a\u5e8f\u8c03\u7528\u3002\n\u53ef\u53d8\u6027\u548c\u5e76\u884c\u6027\u662f\u5bc6\u5207\u76f8\u5173\u7684\u3002\u7f16\u5199\u53ef\u7ef4\u62a4\u3001\u53ef\u4f38\u7f29\u3001\u5e76\u884c\u4ee3\u7801\u7684\u57fa\u672c\u89c4\u5219\u662f\uff0c\u4efb\u4f55\u5bf9\u8c61\u90fd\u4e0d\u80fd\u65e2\u662f\u53ef\u53d8\u7684\uff0c\u53c8\u662f\u522b\u540d\u7684\u3002\u5728\u7eaf\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u5b9e\u65bd\u8fd9\u4e00\u70b9\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff1a\u6839\u672c\u6ca1\u6709\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\u3002Erlang\u4ee5\u6d41\u7a0b\u5b57\u5178\u7684\u5f62\u5f0f\u5bf9\u53ef\u53d8\u6027\u505a\u51fa\u4e86\u8ba9\u6b65-\u4e00\u4e2a\u4ec5\u53ef\u4ece\u5f53\u524dErlang\u8fdb\u7a0b\u8bbf\u95ee\u7684\u53ef\u53d8\u5b57\u5178\uff0c\u56e0\u6b64\u6c38\u8fdc\u4e0d\u80fd\u5171\u4eab\u3002\n\u5c06\u5177\u6709\u4e0d\u540c\u5171\u4eab\u5185\u5bb9\u6982\u5ff5\u7684\u8bed\u8a00\u8fde\u63a5\u8d77\u6765\u4f1a\u5e26\u6765\u4e00\u4e9b\u72ec\u7279\u7684\u95ee\u9898\u3002\u8fd9\u5bf9\u4e8e\u4ee5\u5927\u89c4\u6a21\u5e76\u884c\u7cfb\u7edf\u6216GPU\u4e3a\u76ee\u6807\u7684\u8bed\u8a00\u6765\u8bf4\u5f88\u6709\u8da3\uff0c\u5728\u8fd9\u4e9b\u7cfb\u7edf\u6216GPU\u4e2d\uff0c\u8bed\u8a00\u7684\u6a21\u578b\u4e0e\u5e95\u5c42\u786c\u4ef6\u5bc6\u5207\u76f8\u5173\u3002\n\u8fd9\u662f\u8bd5\u56fe\u63d0\u53d6\u90e8\u5206C/C++/Fortran\u7a0b\u5e8f\u4ee5\u8f6c\u6362\u4e3aOpenCL\u65f6\u9047\u5230\u7684\u95ee\u9898\u3002\u6e90\u8bed\u8a00\u901a\u5e38\u5c06\u5c31\u5730\u4fee\u6539\u4f5c\u4e3a\u5b9e\u73b0\u7b97\u6cd5\u7684\u6700\u5feb\u65b9\u5f0f\uff0c\u800cOpenCL\u5219\u9f13\u52b1\u5bf9\u6e90\u7f13\u51b2\u533a\u8fdb\u884c\u5904\u7406\u4ee5\u751f\u6210\u8f93\u51fab\u7684\u6a21\u578b\u3002\n..", "note_en": "November 19, 2013   Volume 11, issue 10       Interoperability between languages has been a problem since the second programming language was invented. Solutions have ranged from language-independent object models such as COM (Component Object Model) and CORBA (Common Object Request Broker Architecture) to VMs (virtual machines) designed to integrate languages, such as the JVM (Java Virtual Machine) and CLR (Common Language Runtime). With software becoming ever more complex and hardware less homogeneous, the likelihood of a single language being the correct tool for an entire program is lower than ever. As modern compilers become more modular, there is potential for a new generation of interesting solutions.\n In 1961 the British company Stantec released a computer called the ZEBRA, which was interesting for a number of reasons, not least of which was its data flow-based instruction set. The ZEBRA was quite difficult to program with the full form of its native instruction set, so it also included a more conventional version, called Simple Code. This form came with some restrictions, including a limit of 150 instructions per program. The manual helpfully informs users that this is not a severe limitation, as it is impossible that someone would write a working program so complex that it would need more than 150 instructions.\n Today, this claim seems ludicrous. Even simple functions in a relatively low-level language such as C have more than 150 instructions once they are compiled, and most programs are far more than a single function. The shift from writing assembly code to writing in a higher-level language dramatically increased the complexity of programs that were possible, as did various software engineering practices.\n The trend toward increased complexity in software shows no sign of abating, and modern hardware creates new challenges. Programmers in the late 1990s had to target PCs at the low end that had an abstract model a lot like a fast PDP-11. At the high end, they would have encountered an abstract model like a very fast PDP-11, possibly with two to four (identical) processors. Now, mobile phones are starting to appear with eight cores with the same ISA (instruction set architecture) but different speeds, some other streaming processors optimized for different workloads (DSPs, GPUs), and other specialized cores.\n The traditional division between high-level languages representing the class that is similar to a human&#39;s understanding of the problem domain and low-level languages representing the class similar to the hardware no longer applies. No low-level language has semantics that are close to a programmable data-flow processor, an x86 CPU, a massively multithreaded GPU, and a VLIW (very long instruction word) DSP (digital signal processor). Programmers wanting to get the last bit of performance out of the available hardware no longer have a single language they can use for all probable targets.\n Similarly, at the other end of the abstraction spectrum, domain-specific languages are growing more prevalent. High-level languages typically trade generality for the ability to represent a subset of algorithms efficiently. More general-purpose high-level languages such as Java sacrifice the ability to manipulate pointers directly in exchange for providing the programmer with a more abstract memory model. Specialized languages such as SQL make certain categories of algorithms impossible to implement but make common tasks within their domain possible to express in a few lines.\n You can no longer expect a nontrivial application to be written in a single language. High-level languages typically call code written in lower-level languages as part of their standard libraries (for example, GUI rendering), but adding calls can be difficult.\n In particular, interfaces between two languages that are not C are often difficult to construct. Even relatively simple examples, such as bridging between C++ and Java, are not typically handled automatically and require a C interface. The Kaffe Native Interface 4 did provide a mechanism for doing this, but it was not widely adopted and had limitations.\n The problem of interfacing between languages is going to become increasingly important to compiler writers over the coming years. It presents a number of challenges, detailed here.\n  Object-oriented languages bind some notion of code and data together. Alan Kay, who helped develop object-oriented programming while at Xerox PARC, described objects as &#34;simple computers that communicate via message passing.&#34; This definition leaves a lot of leeway for different languages to fill in the details:\n   \u2022 Should there be zero (e.g., Go), one (e.g., Smalltalk, Java, JavaScript, Objective-C), or many (e.g., C++, Self, Simula) superclasses or prototypes for an object?\n    The question of multiple inheritance is one of the most common areas of focus. Single inheritance is convenient, because it simplifies many aspects of the implementation. Objects can be extended just by appending fields; a cast to the supertype just involves ignoring the end, and a cast to a subtype just involves a check\u2014the pointer values remain the same. Downcasting in C++ requires a complex search of the inheritance graph in the run-time type information via a runtime library function.\n In isolation, both types of inheritance are possible to implement, but what happens if you want, for example, to expose a C++ object into Java? You could perhaps follow the .NET or Kaffe approach, and support direct interoperability with only a subset of C++ (Managed C++ or C++/CLI) that supports single inheritance only for classes that will be exposed on the Java side of the barrier.\n This is a good solution in general: define a subset of one language that maps cleanly to the other but can understand the full power of the other. This is the approach taken in Pragmatic Smalltalk: 5 allow Objective-C++ objects (which can have C++ objects as instance variables and invoke their methods) to be exposed directly as if they were Smalltalk objects, sharing the same underlying representation.\n This approach still provides a cognitive barrier, however. If you want to use a C++ framework directly, such as LLVM from Pragmatic Smalltalk or .NET, then you will need to write single-inheritance classes that encapsulate the multiple-inheritance classes that the library uses for most of its core types.\n Another possible approach would be to avoid exposing any fields within the objects and just expose each C++ class as an interface. This would, however, make it impossible to inherit from the bridged classes without special compiler support to understand that some interfaces came along with implementation.\n Although complex, this is a simpler system than interfacing between languages that differ on what method lookup means. For example, Java and Smalltalk have almost identical object and memory models, but Java ties the notion of method dispatch to the class hierarchy, whereas in Smalltalk two objects can be used interchangeably if they implement methods with the same names.\n This is a problem encountered by RedLine Smalltalk, 1 which compiles Smalltalk to run on JVM. Its mechanism for implementing Smalltalk method dispatch involves generating a Java interface for each method and then performing a cast of the receiver to the relevant interface type before dispatch. Sending messages to Java classes requires extra information, because existing Java classes don&#39;t implement this; thus, RedLine Smalltalk must fall back to using Java&#39;s Reflection APIs.\n The method lookup for Smalltalk (and Objective-C) is more complex, because there are a number of second-chance dispatch mechanisms that are either missing or limited in other languages. When compiling Objective-C to JavaScript, rather than using the JavaScript method invocation, you must wrap each Objective-C message send in a small function that first checks if the method actually exists and, if it doesn&#39;t, calls some lookup code.\n This is relatively simple in JavaScript because it handles variadic functions in a convenient way: if a function or method is called with more arguments than it expects, then it receives the remainder as an array that it can expect. Go does something similar. C-like languages just put them on the stack and expect the programmer to do the write with no error checking.\n  The obvious dichotomy in memory models is between automatic and manual deallocation. A slightly more important concern is the difference between deterministic and nondeterministic destruction.\n It is possible to run C with the Boehm-Demers-Weiser garbage collector 3 without problems in many cases (unless you run out of memory and have a lot of integers that look like pointers). It is much harder to do the same for C++, because object deallocation is an observable event. Consider the following code:\n  The  LockHolder class defines a very simple object; a mutex passes into the object, which then locks the mutex in its constructor and unlocks it in the destructor. Now, imagine running this same code in a fully garbage-collected environment\u2014the time at which the destructor runs is not defined.\n This example is relatively simple to get right. A garbage-collected C++ implementation is required to run the destructor at this point but not to deallocate the object. This idiom is not available in languages that were designed to support garbage collection from the start. The fundamental problem with mixing them is not determining who is responsible for releasing memory; rather, it is that code written for one model expects deterministic operation, whereas code written for the other does not.\n There are two trivial approaches to implementing garbage collection for C++: the first is to make the  delete operator invoke destructors but not reclaim the underlying storage; the other is to make  delete a no-op and call destructors when the object is detected as unreachable.\n Destructors that call only  delete are the same in both cases: they are effectively no-ops. Destructors that release other resources are different. In the first case, they run deterministically but will fail to run if the programmer does not explicitly delete the relevant object. In the second case, they are guaranteed to run eventually but not necessarily by the time the underlying resource is exhausted.\n Additionally, a fairly common idiom in many languages is a self-owned object that waits for some event or performs a long-running task and then fires a callback. The receiver of the callback is then responsible for cleaning up the notifier. While it&#39;s live, it is disconnected from the rest of the object graph and so appears to be garbage. The collector must be explicitly told that it is not. This is the opposite of the pattern in languages without automatic garbage collection, where objects are assumed to be live unless the system is told otherwise. (Hans Boehm discussed some of these issues in more detail in a 1996 paper. 2)\n All of these problems were present with Apple&#39;s ill-fated (and, thankfully, no longer supported) attempt to add garbage collection to Objective-C. A lot of Objective-C code relies on running code in the  -dealloc method. Another issue was closely related to the problem of interoperability. The implementation supported both traced and untraced memory but did not expose this information in the type system. Consider the following snippet:\n void allocateSomeObjects (id * buffer, int count)  {   \u00a0 \u00a0 \u00a0for (int i=0 ; i&lt;count ; i++)   \u00a0 \u00a0 \u00a0{   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0buffer [i] = [SomeClass new];   \u00a0 \u00a0 \u00a0}  }\n In garbage-collected mode, it is impossible to tell if this code is correct. Whether it is correct or not depends on the caller. If the caller passes a buffer allocated with  NSAllocateCollectable(), with  NSScannedOption as the second parameter, or with a buffer allocated on the stack or in a global in a compilation unit compiled with garbage-collection support, then the objects will last (at least) as long as the buffer. If the caller passes a buffer that was allocated with  malloc() or as a global in a C or C++ compilation unit, then the objects will (potentially) be deallocated before the buffer. The  potentially in this sentence makes this a bigger problem: because it&#39;s nondeterministic, it is hard to debug.\n The ARC (Automatic Reference Counting) extensions to Objective-C do not provide complete garbage collection (they still allow garbage cycles to leak), but they do extend the type system to define the ownership type for such buffers. Copying object pointers to C requires the insertion of an explicit cast containing an ownership transfer.\n Reference counting also solves the determinism problem for acyclic data. In addition, it provides an interesting way of interoperating with manual memory management: by making  free() decrement the reference count. Cyclic (or potentially cyclic) data structures require the addition of a cycle detector. David F. Bacon&#39;s team at IBM has produced a number of designs for cycle detectors 8 that allow reference counting to be a full garbage-collection mechanism, as long as pointers can be accurately identified.\n Unfortunately, cycle detection involves walking the entire object graph from a potentially cyclic object. Some simple steps can be taken to lessen this cost. The obvious one is to defer it. An object is only potentially part of a cycle if its reference count is decremented but not deallocated. If it is later incremented, then it is not part of a garbage cycle (it may still be part of a cycle, but you don&#39;t care yet). If it is later deallocated, then it is acyclic.\n The longer you defer cycle detection, the more nondeterminism you get, but the less work the cycle detector has to do.\n  These days, most people think of exceptions in the sense popularized by C++: something that is roughly equivalent to  setjmp() and  longjmp() in C, although possibly with a different mechanism.\n A number of other mechanisms for exceptions have been proposed. In Smalltalk-80, exceptions are implemented entirely in the library. The only primitive that the language provides is that when you explicitly return from a closure, you return from the scope in which the closure was declared. If you pass a closure down the stack, then a return will implicitly unwind the stack.\n When a Smalltalk exception occurs, it invokes a handler block on the top of the stack. This may then return, forcing the stack to unwind, or it may do some cleanup. The stack itself is a list of activation records (which are objects) and therefore may do something more complex. Common Lisp provides a rich set of exceptions too, including those that support resuming or restarting immediately afterward.\n Exception interoperability is difficult even within languages with similar exception models. For example, C++ and Objective-C both have similar notions of an exception, but what should a C++ catch block that expects to catch a  void* do when it encounters an Objective-C object pointer? In the GNUstep Objective-C runtime 6, we chose not to catch it after deciding not to emulate Apple&#39;s behavior of a segmentation fault. Recent versions of OS X have adopted this behavior, but the decision is somewhat arbitrary.\n Even if you do catch the object pointer from C++, that doesn&#39;t mean that you can do anything with it. By the time it&#39;s caught, you&#39;ve lost all of the type information and have no way of determining that it is an Objective-C object.\n Subtler issues creep in when you start to think about performance. Early versions of VMKit 7 (which implements Java and CLR VMs on top of LLVM) used the zero-cost exception model designed for C++. This is  zero cost because entering a try block costs nothing. When throwing an exception, however, you must parse some tables that describe how to unwind the stack, then call into a personality function for each stack frame to decide whether (and where) the exception should be caught.\n This mechanism works very well for C++, where exceptions are rare, but Java uses exceptions to report lots of fairly common error conditions. In benchmarks, the performance of the unwinder was a limiting factor. To avoid this, the calling convention was modified for methods that were likely to throw an exception. These functions returned the exception as a second return value (typically in a different register), and every call just had to check that this register contained 0 or jump to the exception handling block if it did not.\n This is fine when you control the code generator for every caller, but this is not the case in a cross-language scenario. You might address the issue by adding another calling convention to C that mirrors this behavior or that provides something like the multiple-return-values mechanism commonly used in Go for returning error conditions, but that would require every C caller to be aware of the foreign language semantics.\n  When you start to include functional languages in the set with which you wish to interoperate, the notion of mutability becomes important. A language such as Haskell has no mutable types. Modifying a data structure in place is something that the compiler may do as an optimization, but it&#39;s not something exposed in the language.\n This is a problem encountered by F#, which is sold as a dialect of OCaml and can integrate with other .NET languages, use classes written in C#, and so on. C# already has a notion of mutable and immutable types. This is a very powerful abstraction, but an immutable class is simply one that doesn&#39;t expose any fields that are not read only, and a read-only field may contain references to objects that (via an arbitrary chain of references) refer to mutable objects whose state may be changed out from under the functional code. In other languages, such as C++ or Objective-C, mutability is typically implemented within the class system by defining some classes that are immutable, but there is no language support and no easy way of determining whether an object is mutable.\n C and C++ have a very different concept of mutability in the type system provided by the language: a particular reference to an object may or may not modify it, but this doesn&#39;t mean that the object itself won&#39;t change. This, combined with the deep copying problem, makes interfacing functional and object-oriented languages a difficult problem.\n Monads provide some tantalizing possibilities for the interface. A monad is an ordered sequence of computational steps. In an object-oriented world, this is a series of message sends or method invocations. Methods that have the C++ notion of const (i.e., do not modify the state of the object) may be invoked outside of the monad, and so are amenable to speculative execution and backtracking, whereas other methods should be invoked in a strict sequence defined by the monad.\n  Mutability and parallelism are closely related. The cardinal rule for writing maintainable, scalable, parallel code is that no object may be both mutable and aliased. This is trivial to enforce in a purely functional language: no object is mutable at all. Erlang makes one concession to mutability, in the form of a process dictionary\u2014a mutable dictionary that is accessible only from the current Erlang process and so can never be shared.\n Interfacing languages with different notions of what can be shared presents some unique problems. This is interesting for languages intended to target massively parallel systems or GPUs, where the model for the language is intimately tied to the underlying hardware.\n This is the issue encountered when trying to extract portions of C/C++/Fortran programs to turn into OpenCL. The source languages typically have in-place modification as the fastest way of implementing an algorithm, whereas OpenCL encourages a model where a source buffer is processed to generate an output b\n......", "posttime": "2020-05-25 04:15:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u8a00,cross,\u5bf9\u8c61", "title": "\u8de8\u8bed\u8a00\u4e92\u64cd\u4f5c\u6027\u7684\u6311\u6218(2013)", "title_en": "The Challenge of Cross-language Interoperability (2013)", "transed": 1, "url": "https://queue.acm.org/detail.cfm?id=2543971", "via": "", "real_tags": ["\u8bed\u8a00", "cross", "\u5bf9\u8c61"]}, {"category": "", "categoryclass": "", "imagename": "3445c16f7454e9db6b49393651c4472b.jpg", "infoid": 1003563, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u7f51\u7edc\u5b89\u5168\u9886\u57df\uff0c\u603b\u662f\u6709\u5f88\u591a\u4eba\u8c08\u8bba\u57f9\u8bad\u5458\u5de5\u610f\u8bc6\u5230\u7f51\u7edc\u9493\u9c7c\u4f01\u56fe\u7684\u91cd\u8981\u6027\u3002\u57f9\u8bad\u786e\u5b9e\u6709\u6548\uff0c\u4f46\u5b83\u4e0d\u662f\u4e07\u80fd\u7684\uff0c\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u603b\u4f1a\u6709\u5458\u5de5\u5728\u63a5\u53d7\u57f9\u8bad\u540e\u4e0a\u5f53\u53d7\u9a97\u3002\n\u5c3d\u7ba1\u6709\u5404\u79cd\u884c\u4e1a\u4f30\u8ba1\uff0c\u4f46\u4ee3\u7801\u5e93\u7ba1\u7406\u516c\u53f8GitLab Inc.\u3002\u4ed6\u4eec\u51b3\u5b9a\u5bf9\u81ea\u5df1\u7684\u5458\u5de5\u8fdb\u884c\u7f51\u7edc\u9493\u9c7c\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u7ed3\u679c\u5e76\u4e0d\u597d\uff1a\u4e94\u5206\u4e4b\u4e00\u7684\u5458\u5de5\u88ab\u5047\u7535\u5b50\u90ae\u4ef6\u8ff7\u4f4f\u4e86\u3002\n\u5468\u4e09\u5ba3\u5e03\u7684\u6f14\u4e60\u6d89\u53caGitLab\u6a21\u4eff\u9488\u5bf9GitLab\u5458\u5de5\u7684\u7f51\u7edc\u9493\u9c7c\u884c\u52a8\uff0c\u76ee\u7684\u662f\u83b7\u53d6GitLab.com\u51ed\u636e\u3002\u591a\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\u7b49\u9632\u5fa1\u63aa\u65bd\u4e0d\u88ab\u8ba4\u4e3a\u662f\u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\uff0c\u865a\u5047\u7f51\u7edc\u9493\u9c7c\u653b\u51fb\u65e8\u5728\u6a21\u4eff\u57fa\u672c\u653b\u51fb\uff0c\u901a\u8fc7\u865a\u5047\u767b\u5f55\u9875\u9762\u96c6\u4e2d\u5728\u4e3b\u8981\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u4e0a\u3002\n\u8fd9\u6b21\u6f14\u4e60\u80cc\u540e\u7684GitLab\u56e2\u961f\u8d2d\u4e70\u4e86\u57df\u540dgitlab.company\uff0c\u7136\u540e\u4f7f\u7528G Suite\u6765\u7b80\u5316\u9493\u9c7c\u7535\u5b50\u90ae\u4ef6\u7684\u4f20\u9012\u3002\u57df\u540d\u548cG Suite\u670d\u52a1\u88ab\u8bbe\u7f6e\u4e3a\u770b\u8d77\u6765\u5408\u6cd5\uff0c\u5e76\u914d\u6709SSL\u8bc1\u4e66\uff0c\u4ee5\u4f7f\u7535\u5b50\u90ae\u4ef6\u5728\u81ea\u52a8\u7f51\u7edc\u9493\u9c7c\u7f51\u7ad9\u68c0\u6d4b\u548c\u4eba\u5de5\u68c0\u67e5\u4e2d\u770b\u8d77\u6765\u4e0d\u90a3\u4e48\u53ef\u7591\u3002\nGitLab\u768450\u540d\u5458\u5de5\u6536\u5230\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u8981\u6c42\u4ed6\u4eec\u70b9\u51fb\u4e00\u4e2a\u94fe\u63a5\u63a5\u53d7\u5347\u7ea7\u3002\u8fd9\u4e2a\u94fe\u63a5\u5c06\u4ed6\u4eec\u5e26\u5230\u4e86\u5047\u7684gitlab.company\u7f51\u7ad9\uff0c\u4ed6\u4eec\u88ab\u8981\u6c42\u5728\u90a3\u91cc\u8f93\u5165\u4ed6\u4eec\u7684\u767b\u5f55\u8be6\u7ec6\u4fe1\u606f\u3002\n\u79ef\u6781\u7684\u4e00\u9762\u662f\uff0c50\u540d\u76ee\u6807\u5458\u5de5\u4e2d\u53ea\u670917\u4eba\u70b9\u51fb\u4e86\u63d0\u4f9b\u7684\u94fe\u63a5\u3002\u7136\u800c\uff0c\u8fd917\u4eba\u4e2d\u670910\u4eba\u968f\u540e\u8bd5\u56fe\u767b\u5f55\u5230\u5047\u7f51\u7ad9\u3002\u90a3\u4e9b\u767b\u5f55\u5230\u865a\u5047\u7f51\u7ad9\u7684\u4eba\u968f\u540e\u88ab\u91cd\u5b9a\u5411\u81f3GitLab\u624b\u518c\u7684\u7f51\u7edc\u9493\u9c7c\u6d4b\u8bd5\u90e8\u5206\u3002\n\u6536\u5230\u8fd9\u5c01\u865a\u5047\u9493\u9c7c\u90ae\u4ef6\u768450\u540d\u5458\u5de5\u4e2d\uff0c\u67096\u540d\u5411GitLab\u7684\u5b89\u5168\u8fd0\u8425\u56e2\u961f\u62a5\u544a\u79f0\u8be5\u90ae\u4ef6\u53ef\u7591\u3002\n20%\u7684\u6570\u5b57\u4e0e\u66f4\u5e7f\u6cdb\u7684\u884c\u4e1a\u9884\u671f\u5927\u81f4\u6301\u5e73\u3002\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u53d1\u5e03\u7684Verizon 2030\u6570\u636e\u6cc4\u9732\u8c03\u67e5\u62a5\u544a\u53d1\u73b0\uff0c\u8fd1\u56db\u5206\u4e4b\u4e00\u7684\u5165\u4fb5\u6d89\u53ca\u7f51\u7edc\u9493\u9c7c\u3002\n\u5a01\u80c1\u68c0\u6d4b\u516c\u53f8Red Canary Inc.\u7684\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u4ea7\u54c1\u5b98\u514b\u91cc\u65af\u00b7\u7f57\u65af(Chris Rothe)\u544a\u8bc9SiliconANGLE\uff1a\u201c\u7f51\u7edc\u9493\u9c7c\u662f\u65e0\u6cd5\u5b8c\u5168\u9884\u9632\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u201d\u56e0\u4e3a\u7535\u5b50\u90ae\u4ef6\u662f\u4e00\u9879\u5173\u952e\u7684\u4e1a\u52a1\u529f\u80fd\uff0c\u6240\u4ee5\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u5fc5\u987b\u9488\u5bf9\u5176\u4e1a\u52a1\u529f\u80fd\u800c\u4e0d\u662f\u5b89\u5168\u6027\u8fdb\u884c\u4f18\u5316\u3002IT\u56e2\u961f\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u7b56\u7565\u6765\u51cf\u5c11\u6210\u529f\u7684\u7f51\u7edc\u9493\u9c7c\u653b\u51fb\u8005\u7684\u6570\u91cf--\u7535\u5b50\u90ae\u4ef6\u62e6\u622a\u3001\u5265\u79bb\u548c\u5206\u6790\u9644\u4ef6\u3001\u610f\u8bc6\u57f9\u8bad--\u4f46\u6ca1\u6709100%\u7684\u89e3\u51b3\u65b9\u6848\u3002\u201c\u3002\n\u901a\u8fc7\u4e00\u952e\u8ba2\u9605\u6211\u4eec\u7684YouTube\u9891\u9053(\u5982\u4e0b\u6240\u793a)\uff0c\u663e\u793a\u60a8\u5bf9\u6211\u4eec\u4f7f\u547d\u7684\u652f\u6301\u3002\u6211\u4eec\u7684\u8ba2\u9605\u7528\u6237\u8d8a\u591a\uff0cYouTube\u5411\u60a8\u63a8\u8350\u7684\u76f8\u5173\u4f01\u4e1a\u548c\u65b0\u5174\u6280\u672f\u5185\u5bb9\u5c31\u8d8a\u591a\u3002\u8c22\u8c22!\u3002\n\u2026\u3002\u6211\u4eec\u8fd8\u60f3\u544a\u8bc9\u60a8\u6211\u4eec\u7684\u4f7f\u547d\uff0c\u4ee5\u53ca\u60a8\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u5b83\u3002SiliconANGLE Media Inc.\u7684\u5546\u4e1a\u6a21\u5f0f\u662f\u57fa\u4e8e\u5185\u5bb9\u7684\u5185\u5728\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u5e7f\u544a\u3002\u4e0e\u8bb8\u591a\u5728\u7ebf\u51fa\u7248\u7269\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u4ed8\u8d39\u5899\u6216\u6295\u653e\u6a2a\u5e45\u5e7f\u544a\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u8ba9\u6211\u4eec\u7684\u65b0\u95fb\u4fdd\u6301\u5f00\u653e\uff0c\u4e0d\u53d7\u5f71\u54cd\uff0c\u4e5f\u4e0d\u9700\u8981\u8ffd\u9010\u6d41\u91cf\u3002\u5173\u4e8eSiliconANGLE\u7684\u65b0\u95fb\u3001\u62a5\u9053\u548c\u8bc4\u8bba-\u4ee5\u53ca\u6211\u4eec\u7684\u7845\u8c37\u6f14\u64ad\u5ba4\u548cCUBE\u7684\u5168\u7403\u5de1\u56de\u89c6\u9891\u56e2\u961f\u63d0\u4f9b\u7684\u73b0\u573a\u65e0\u811a\u672c\u89c6\u9891-\u9700\u8981\u5927\u91cf\u7684\u8f9b\u52e4\u5de5\u4f5c\u3001\u65f6\u95f4\u548c\u91d1\u94b1\u3002\u8981\u4fdd\u6301\u9ad8\u8d28\u91cf\uff0c\u9700\u8981\u8d5e\u52a9\u5546\u7684\u652f\u6301\uff0c\u8fd9\u4e9b\u8d5e\u52a9\u5546\u4e0e\u6211\u4eec\u5bf9\u65e0\u5e7f\u544a\u65b0\u95fb\u5185\u5bb9\u7684\u613f\u666f\u4fdd\u6301\u4e00\u81f4\u3002\n\u5982\u679c\u60a8\u559c\u6b22\u8fd9\u91cc\u7684\u62a5\u9053\u3001\u89c6\u9891\u91c7\u8bbf\u7b49\u65e0\u5e7f\u544a\u5185\u5bb9\uff0c\u8bf7\u82b1\u70b9\u65f6\u95f4\u67e5\u770b\u4e00\u4e0b\u6211\u4eec\u8d5e\u52a9\u5546\u652f\u6301\u7684\u89c6\u9891\u5185\u5bb9\u6837\u672c\uff0c\u53d1\u63a8\u7279\u8868\u793a\u652f\u6301\uff0c\u5e76\u4e0d\u65ad\u56de\u5230SiliconANGLE\u3002", "note_en": "There\u2019s always a lot of talk in cybersecurity about the importance of training employees to be aware of phishing attempts. Training does work but it\u2019s not a panacea, the reality being is that there will always be employees who get tricked even with training.\n Although\u00a0there are various industry estimates, code repository management firm GitLab Inc. decided to phish their own employees to see what would happen. The result was not good: One in five employees fell for the fake emails.\n The exercise\u00a0announced Wednesday involved GitLab emulate a phishing campaign against GitLab employees with the intent of capturing GitLab.com credentials. Defenses such as multifactor authentication were not considered part of the test, with the fake phishing attack designed to mimic a basic attack concentrating on primary authentication credentials via a fake login page.\n The GitLab team behind the exercise purchased the domain name gitlab.company, then used G Suite to facilitate the delivery of the phishing email. The domain name and G Suite services were set up to look legitimate, complete with SSL certificates to make the emails look less suspicious to automated phishing site detection and human inspection.\n Fifty GitLab employees were targeted with an email that asked them to click on a link to accept an upgrade. The link took them to the fake gitlab.company website where they were asked to enter their login details.\n On the positive side, only 17 of the 50 targeted employees clicked on the provided link. However, 10 of those 17 then attempted to log in on the fake site. Those who logged in on the fake site were then redirected to the  phishing test section of the GitLab Handbook.\n Six of the 50 employees who received the fake phishing email reported the email as suspicious to GitLab\u2019s security operations team.\n The 20% figure is roughly on par with broader industry expectations. The  Verizon 2030 Data Breach Investigations Report released earlier this week found that\u00a0phishing was involved in nearly one-quarter of breaches.\n \u201cPhishing is a great example of something that cannot be fully prevented,\u201d Chris Rothe, co-founder and chief product officer at threat detection firm  Red Canary Inc., told SiliconANGLE . \u201cBecause email is a critical business function, it has to be optimized for its business function and not security in most cases. There are many strategies IT teams can use to reduce the number of successful phishing attackers \u2014 email blocking, stripping and analyzing attachments, awareness training \u2014 but there is no 100% solution.\u201d\n  Show your support for our mission with our one-click subscription to our YouTube channel (below). The more subscribers we have, the more YouTube will suggest relevant enterprise and emerging technology content to you. Thanks!\n  \u2026 We\u2019d also like to tell you about our mission and how you can help us fulfill it. SiliconANGLE Media Inc.\u2019s business model is based on the intrinsic value of the content, not advertising. Unlike many online publications, we don\u2019t have a paywall or run banner advertising, because we want to keep our journalism open, without influence or the need to chase traffic. The journalism, reporting and commentary on\u00a0 SiliconANGLE\u00a0\u2014 along with live, unscripted video from our Silicon Valley studio and globe-trotting video teams at\u00a0  theCUBE\u00a0\u2014 take a lot of hard work, time and money. Keeping the quality high requires the support of sponsors who are aligned with our vision of ad-free journalism content.\n If you like the reporting, video interviews and other ad-free content here,\u00a0please take a moment to check out a sample of the video content supported by our sponsors,\u00a0  tweet your support, and keep coming back to\u00a0  SiliconANGLE.", "posttime": "2020-05-25 03:44:20", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5458\u5de5,employees,\u9493\u9c7c", "title": "20%\u7684GitLab\u5458\u5de5\u5728\u7f51\u7edc\u9493\u9c7c\u6d4b\u8bd5\u4e2d\u4ea4\u51fa\u767b\u5f55\u51ed\u636e", "title_en": "20% of GitLab Employees Handed Over Login Credentials in Phishing Test", "transed": 1, "url": "https://siliconangle.com/2020/05/21/gitlab-runs-phishing-test-employees-20-handing-credentials/", "via": "", "real_tags": ["\u5458\u5de5", "employees", "\u9493\u9c7c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003562, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "int\u89e3\u538b\u7f29\u5668(Void){static int c\uff0clen\uff1bcrBegin\uff1bWhile(1){c=getchar()\uff1bif(c==EOF)Break\uff1bif(c==0xFF){len=getchar()\uff1bc=getchar()\uff1bWhile(len--)crReturn(C)\uff1b}Else crReturn(C)\uff1b}crReturn(EOF)\uff1bcrish\uff1b}\u3002\nvoid parser(Int C){crBegin\uff1bWhile(1){/*\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5df2\u5728c*/if(c==EOF)Break\uff1bif(isalpha(C)){do{add_to_Token(C)\uff1bcrReturn()\uff1b}While(isalpha(C))\uff1bget_Token(Word)\uff1b}add_to_Token(C)\uff1bget_Token(PUNCT)\uff1bcrReturn()\uff1b}crish\uff1b}\u3002\n\u6211\u4eec\u5df2\u7ecf\u5c06\u89e3\u538b\u7f29\u5668\u548c\u89e3\u6790\u5668\u90fd\u91cd\u5199\u4e3a\u88ab\u8c03\u7528\u8005\uff0c\u5bf9\u4e8e\u4e0a\u6b21\u6211\u4eec\u4e0d\u5f97\u4e0d\u8fdb\u884c\u7684\u5927\u89c4\u6a21\u91cd\u6784\uff0c\u6839\u672c\u4e0d\u9700\u8981\u3002\u6bcf\u4e2a\u51fd\u6570\u7684\u7ed3\u6784\u90fd\u7cbe\u786e\u5730\u53cd\u6620\u4e86\u5176\u539f\u59cb\u5f62\u5f0f\u7684\u7ed3\u6784\u3002\u9605\u8bfb\u5668\u53ef\u4ee5\u63a8\u5bfc\u51fa\u89e3\u6790\u5668\u8bc6\u522b\u7684\u8bed\u6cd5\uff0c\u6216\u8005\u8bf4\u89e3\u538b\u5668\u4f7f\u7528\u7684\u538b\u7f29\u6570\u636e\u683c\u5f0f\uff0c\u8fd9\u6bd4\u901a\u8fc7\u8bfb\u53d6\u6a21\u7cca\u7684\u72b6\u6001\u673a\u4ee3\u7801\u5bb9\u6613\u5f97\u591a\u3002\u4e00\u65e6\u60a8\u7406\u89e3\u4e86\u65b0\u7684\u683c\u5f0f\uff0c\u63a7\u5236\u6d41\u5c31\u4f1a\u5f88\u76f4\u89c2\uff1a\u5f53\u89e3\u538b\u7f29\u5668\u6709\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u5b83\u4f1a\u7528crReturn\u5c06\u5176\u4f20\u9012\u56de\u8c03\u7528\u8005\uff0c\u5e76\u5728\u9700\u8981\u53e6\u4e00\u4e2a\u5b57\u7b26\u65f6\u7b49\u5f85\u518d\u6b21\u8c03\u7528\u3002\u5f53\u89e3\u6790\u5668\u9700\u8981\u53e6\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u5b83\u4f7f\u7528crReturn\u8fd4\u56de\uff0c\u5e76\u7b49\u5f85\u4f7f\u7528\u53c2\u6570c\u4e2d\u7684\u65b0\u5b57\u7b26\u518d\u6b21\u8c03\u7528\u3002\u4ee3\u7801\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u7ed3\u6784\u53d8\u5316\uff1aparser()\u73b0\u5728\u5728\u5faa\u73af\u7684\u672b\u5c3e\u6709\u5b83\u7684getchar()(\u597d\u5427\uff0c\u5bf9\u5e94\u7684crReturn)\uff0c\u800c\u4e0d\u662f\u5728\u5f00\u59cb\u5904\uff0c\u56e0\u4e3a\u5f53\u8fdb\u5165\u51fd\u6570\u65f6\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5df2\u7ecf\u5728c\u4e2d\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u8fd9\u79cd\u5fae\u5c0f\u7684\u7ed3\u6784\u53d8\u5316\uff0c\u6216\u8005\u5982\u679c\u6211\u4eec\u771f\u7684\u5bf9\u5b83\u6709\u5f3a\u70c8\u7684\u611f\u89c9\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9aparser()\u9700\u8981\u4e00\u4e2a\u521d\u59cb\u5316\u8c03\u7528\uff0c\u7136\u540e\u624d\u80fd\u5f00\u59cb\u5411\u5b83\u63d0\u4f9b\u5b57\u7b26\u3002\u5f53\u7136\uff0c\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u534f\u7a0b\u5b8f\u6765\u91cd\u5199\u8fd9\u4e24\u4e2a\u4f8b\u7a0b\u3002\u4e00\u4e2a\u5c31\u8db3\u591f\u4e86\uff1b\u53e6\u4e00\u4e2a\u53ef\u4ee5\u662f\u5b83\u7684\u8c03\u7528\u8005\u3002\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6211\u4eec\u8ba1\u5212\u5b9e\u73b0\u7684\u76ee\u6807\uff1a\u4e00\u79cd\u53ef\u79fb\u690d\u7684ANSIC\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u4f20\u9012\u6570\u636e\uff0c\u800c\u65e0\u9700\u5c06\u5176\u91cd\u5199\u4e3a\u663e\u5f0f\u72b6\u6001\u673a\u3002\u6211\u4eec\u901a\u8fc7\u5c06C\u9884\u5904\u7406\u5668\u4e0eswitch\u8bed\u53e5\u7684\u4e00\u4e2a\u5f88\u5c11\u4f7f\u7528\u7684\u7279\u6027\u76f8\u7ed3\u5408\u6765\u521b\u5efa\u9690\u5f0f\u72b6\u6001\u673a\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u628a\u620f\u8fdd\u53cd\u4e86\u4e66\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7f16\u7801\u6807\u51c6\u3002\u8bd5\u7740\u5728\u4f60\u516c\u53f8\u7684\u4ee3\u7801\u4e2d\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d7\u5230\u4e25\u5389\u7684\u65a5\u8d23\uff0c\u5982\u679c\u4e0d\u662f\u7eaa\u5f8b\u5904\u5206\u7684\u8bdd\uff01\u60a8\u5728\u5b8f\u4e2d\u5d4c\u5165\u4e86\u65e0\u4e0e\u4f26\u6bd4\u7684\u82b1\u62ec\u53f7\uff0c\u5728\u5b50\u5757\u4e2d\u4f7f\u7528\u4e86\u5927\u5c0f\u5199\uff0c\u5bf9\u4e8ecrReturn\u5b8f\uff0c\u5176\u5185\u5bb9\u5177\u6709\u6781\u5927\u7684\u7834\u574f\u6027\u3002\u4f60\u6ca1\u6709\u56e0\u4e3a\u8fd9\u79cd\u4e0d\u8d1f\u8d23\u4efb\u7684\u7f16\u7801\u884c\u4e3a\u800c\u88ab\u5f53\u573a\u89e3\u96c7\uff0c\u8fd9\u771f\u662f\u4e2a\u5947\u8ff9\u3002\u4f60\u8be5\u4e3a\u81ea\u5df1\u5bb3\u81ca\u3002\u6211\u8ba4\u4e3a\u8fd9\u91cc\u7684\u7f16\u7801\u6807\u51c6\u6709\u95ee\u9898\u3002\u6211\u5728\u672c\u6587\u4e2d\u5c55\u793a\u7684\u793a\u4f8b\u4e0d\u662f\u5f88\u957f\uff0c\u4e5f\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u5728\u91cd\u5199\u4e3a\u72b6\u6001\u673a\u65f6\u4ecd\u7136\u53ef\u4ee5\u7406\u89e3\u3002\u4f46\u662f\uff0c\u968f\u7740\u51fd\u6570\u53d8\u957f\uff0c\u6240\u9700\u7684\u91cd\u5199\u7a0b\u5ea6\u53d8\u5f97\u66f4\u9ad8\uff0c\u6e05\u6670\u5ea6\u7684\u635f\u5931\u4e5f\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u4e25\u91cd\u3002\u8003\u8651\u4e00\u4e0b\u3002\u7531CASE STATE1\uff1a/*\u6267\u884c\u67d0\u4e9b\u6d3b\u52a8*/IF(\u6761\u4ef6)STATE=STATE2\uff1bELSE STATE=STATE3\u5f62\u5f0f\u7684\u5c0f\u5757\u6784\u5efa\u7684\u51fd\u6570\uff1b\n\u5bf9\u4e8e\u8bfb\u8005\u6765\u8bf4\uff0c\u4e0e\u7531\u5c0f\u5757\u7ec4\u6210\u7684\u51fd\u6570\u6ca1\u6709\u592a\u5927\u4e0d\u540c\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u65b9\uff0c\u53e6\u4e00\u4e2a\u662f\u88ab\u8c03\u7528\u65b9\uff0c\u662f\u771f\u7684\uff0c\u4f46\u51fd\u6570\u7684\u89c6\u89c9\u7ed3\u6784\u662f\u76f8\u540c\u7684\uff0c\u5b83\u4eec\u63d0\u4f9b\u7684\u5bf9\u5176\u5e95\u5c42\u7b97\u6cd5\u7684\u6d1e\u5bdf\u529b\u4e5f\u5b8c\u5168\u4e00\u6837\u5c0f\u3002\u540c\u6837\u4f1a\u56e0\u4e3a\u4f7f\u7528mycoroutine\u5b8f\u800c\u89e3\u96c7\u60a8\u7684\u4eba\uff0c\u4e5f\u4f1a\u56e0\u4e3a\u7528goto\u8bed\u53e5\u8fde\u63a5\u7684\u5c0f\u5757\u6784\u5efa\u51fd\u6570\u800c\u89e3\u96c7\u60a8\uff01\u8fd9\u4e00\u6b21\u4ed6\u4eec\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u51fd\u6570\u5e03\u5c40\u4e25\u91cd\u5730\u6a21\u7cca\u4e86\u7b97\u6cd5\u7684\u7ed3\u6784\u3002\u7f16\u7801\u6807\u51c6\u65e8\u5728\u6e05\u6670\u660e\u4e86\u3002\u901a\u8fc7\u5c06\u5f00\u5173\u3001\u8fd4\u56de\u548c\u7528\u4f8b\u7b49\u91cd\u8981\u5185\u5bb9\u9690\u85cf\u5728\u6df7\u6dc6\u5b8f\u4e2d\uff0c\u7f16\u7801\u6807\u51c6\u4f1a\u58f0\u79f0\u60a8\u6a21\u7cca\u4e86\u7a0b\u5e8f\u7684\u8bed\u6cd5\u7ed3\u6784\uff0c\u8fdd\u53cd\u4e86\u6e05\u6670\u5ea6\u8981\u6c42\u3002\u4f46\u662f\u60a8\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u60a8\u63ed\u793a\u4e86\u7a0b\u5e8f\u7684\u7b97\u6cd5\u7ed3\u6784\uff0c\u800c\u8fd9\u5f88\u53ef\u80fd\u662f\u8bfb\u8005\u60f3\u77e5\u9053\u7684\uff01\u4efb\u4f55\u4ee5\u727a\u7272\u7b97\u6cd5\u6e05\u6670\u5ea6\u4e3a\u4ee3\u4ef7\u800c\u575a\u6301\u53e5\u6cd5\u6e05\u6670\u5ea6\u7684\u7f16\u7801\u6807\u51c6\u90fd\u5e94\u8be5\u91cd\u5199\u3002\u5982\u679c\u4f60\u7684\u96c7\u4e3b\u56e0\u4e3a\u4f60\u4f7f\u7528\u8fd9\u4e2a\u628a\u620f\u800c\u89e3\u96c7\u4e86\u4f60\uff0c\u5728\u4fdd\u5b89\u4eba\u5458\u628a\u4f60\u62d6\u51fa\u5927\u697c\u65f6\uff0c\u53cd\u590d\u544a\u8bc9\u4ed6\u4eec\u8fd9\u4e00\u70b9\u3002\u5728\u4e25\u8083\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u4e2a\u73a9\u5177\u534f\u540c\u7a0b\u5e8f\u5b9e\u73b0\u4e0d\u592a\u53ef\u80fd\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u9759\u6001\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u6216\u591a\u7ebf\u7a0b\u7684\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u80fd\u591f\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u76f8\u540c\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u5728\u7ed9\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u7684\u6bcf\u6b21\u8c03\u7528\u65f6\uff0c\u5728\u76f8\u540c\u4e0a\u4e0b\u6587\u4e2d\u7684\u6700\u540e\u4e00\u6b21\u8fd4\u56de\u4e4b\u540e\u7acb\u5373\u6062\u590d\u63a7\u5236\u3002\u8fd9\u5f88\u5bb9\u6613\u505a\u5230\u3002\u6211\u4eec\u5b89\u6392\u4e00\u4e2a\u989d\u5916\u7684\u51fd\u6570\u53c2\u6570\uff0c\u5b83\u662f\u6307\u5411\u4e0a\u4e0b\u6587\u7ed3\u6784\u7684\u6307\u9488\uff1b\u6211\u4eec\u5c06\u6240\u6709LocalState\u548c\u534f\u7a0b\u72b6\u6001\u53d8\u91cf\u58f0\u660e\u4e3a\u8be5\u7ed3\u6784\u7684\u5143\u7d20\u3002\u6709\u70b9\u96be\u770b\uff0c\u56e0\u4e3a\u7a81\u7136\u4e4b\u95f4\u4f60\u4e0d\u5f97\u4e0d", "note_en": "int decompressor(void) { static int c, len; crBegin; while (1) { c = getchar(); if (c == EOF) break; if (c == 0xFF) { len = getchar(); c = getchar(); while (len--)\t crReturn(c); } else\t crReturn(c); } crReturn(EOF); crFinish;}\n void parser(int c) { crBegin; while (1) { /* first char already in c */ if (c == EOF) break; if (isalpha(c)) { do { add_to_token(c);\t\tcrReturn( ); } while (isalpha(c)); got_token(WORD); } add_to_token(c); got_token(PUNCT);\tcrReturn( ); } crFinish;}\n We have rewritten both decompressor and parser as callees, with noneed at all for the massive restructuring we had to do last time wedid this. The structure of each function exactly mirrors thestructure of its original form. A reader can deduce the grammarrecognised by the parser, or the compressed data format used by thedecompressor, far more easily than by reading the obscurestate-machine code. The control flow is intuitive once you havewrapped your mind around the new format: when the decompressor has acharacter, it passes it back to the caller with crReturn and waits to be called again when anothercharacter is required. When the parser needs another character, itreturns using  crReturn, and waits to be called againwith the new character in the parameter  c. There has been one small structural alteration to the code: parser() now has its  getchar() (well, thecorresponding  crReturn) at the end of the loop insteadof the start, because the first character is already in c when the function is entered. We could accept thissmall change in structure, or if we really felt strongly about it wecould specify that  parser() required an&#34;initialisation&#34; call before you could start feeding it characters. As before, of course, we don&#39;t have to rewrite both routines usingthe coroutine macros. One will suffice; the other can be its caller. We have achieved what we set out to achieve: a portable ANSI C meansof passing data between a producer and a consumer without the needto rewrite one as an explicit state machine. We have done this bycombining the C preprocessor with a little-used feature of the switch statement to create an  implicit statemachine.   Of course, this trick violates every coding standard in the book.Try doing this in your company&#39;s code and you will probably besubject to a stern telling off if not disciplinary action! You haveembedded unmatched braces in macros, used  case withinsub-blocks, and as for the  crReturn macro with itsterrifyingly disruptive contents .\u00a0.\u00a0. It&#39;s a wonder youhaven&#39;t been fired on the spot for such irresponsible codingpractice. You should be ashamed of yourself. I would claim that the coding standards are at fault here. Theexamples I&#39;ve shown in this article are not very long, not verycomplicated, and still just about comprehensible when rewritten asstate machines. But as the functions get longer, the degree ofrewriting required becomes greater and the loss of clarity becomesmuch, much worse. Consider. A function built of small blocks of the form case STATE1: /* perform some activity */ if (condition) state = STATE2; else state = STATE3;\n is not very different, to a reader, from a function built of smallblocks of the form One is caller and the other is callee, true, but the visualstructure of the functions are the same, and the insights theyprovide into their underlying algorithms are exactly as small aseach other. The same people who would fire you for using mycoroutine macros would fire you just as loudly for building afunction out of small blocks connected by  gotostatements! And this time they would be right, because laying out afunction like that obscures the structure of the algorithm horribly. Coding standards aim for clarity. By hiding vital things like switch,  return and  casestatements inside &#34;obfuscating&#34; macros, the coding standards wouldclaim you have obscured the syntactic structure of the program, andviolated the requirement for clarity. But you have done so in thecause of revealing the  algorithmic structure of theprogram, which is far more likely to be what the reader wants toknow! Any coding standard which insists on syntactic clarity at theexpense of algorithmic clarity should be rewritten. If your employerfires you for using this trick, tell them that repeatedly as thesecurity staff drag you out of the building.   In a serious application, this toy coroutine implementation isunlikely to be useful, because it relies on  staticvariables and so it fails to be re-entrant or multi-threadable.Ideally, in a real application, you would want to be able to callthe same function in several different contexts, and at each call ina given context, have control resume just after the last return inthe same context. This is easily enough done. We arrange an extra function parameter,which is a pointer to a context structure; we declare all our localstate, and our coroutine state variable, as elements of thatstructure. It&#39;s a little bit ugly, because suddenly you have to use ctx-&gt;i as a loop counter where you would previouslyjust have used  i; virtually all your serious variablesbecome elements of the coroutine context structure. But it removesthe problems with re-entrancy, and still hasn&#39;t impacted the structure of the routine. (Of course, if C only had Pascal&#39;s  with statement, wecould arrange for the macros to make this layer of indirection trulytransparent as well. A pity. Still, at least C++ users can managethis by having their coroutine be a class member, and keeping allits local variables in the class so that the scoping is implicit.) Included here is a C header file that implements this coroutinetrick as a set of pre-defined macros. There are two sets of macrosdefined in the file, prefixed  scr and  ccr.The  scr macros are the simple form of the technique,for when you can get away with using  static variables;the  ccr macros provide the advanced re-entrant form.Full documentation is given in a comment in the header file itself. Note that Visual C++ version 6 doesn&#39;t like this coroutine trick,because its default debug state (Program Database for Edit andContinue) does something strange to the  __LINE__ macro.To compile a coroutine-using program with VC++ 6, you must turn offEdit and Continue. (In the project settings, go to the &#34;C/C++&#34; tab,category &#34;General&#34;, setting &#34;Debug info&#34;. Select any option other than &#34;Program Database for Edit and Continue&#34;.) (The header file is MIT-licensed, so you can use it in anything youlike without restriction. If you do find something the MIT licencedoesn&#39;t permit you to do, mail me,and I&#39;ll probably give you explicit permission to do it anyway.) Follow this link for  coroutine.h. Thanks for reading. Share and enjoy!   Donald Knuth,  The Art of Computer Programming, Volume1. Addison-Wesley, ISBN 0-201-89683-4. Section 1.4.2 describescoroutines in the &#34;pure&#34; form. http://www.lysator.liu.se/c/duffs-device.htmlis Tom Duff&#39;s own discussion of Duff&#39;s device. Note, right at thebottom, a hint that Duff might also have independently invented thiscoroutine trick or something very like it. Update, 2005-03-07: TomDuff confirms this in a blog comment. The &#34;revolting way to useswitches to implement interrupt driven state machines&#34; of which hespeaks in his original email is indeed the same trick as I describehere. PuTTYis a Win32 Telnet and SSH client. The SSH protocol code containsreal-life use of this coroutine trick. As far as I know, this is theworst piece of C hackery ever seen in serious production code.\n  $Id$ Copyright \u00a9 2000 Simon Tatham. This document is OpenContent. You may copy and use the text under the terms of the OpenContentLicence. Please send comments and criticism to anakin@pobox.com.", "posttime": "2020-05-25 03:43:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u534f\u7a0b,coroutines", "title": "C\u8bed\u8a00\u4e2d\u7684\u534f\u7a0b\u7a0b\u5e8f", "title_en": "Coroutines in C", "transed": 1, "url": "https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u534f\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003560, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6765\u6e90\uff1aGitHub", "note_en": "Source at GitHub", "posttime": "2020-05-25 03:26:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u97f3\u4e50,based,\u6765\u6e90", "title": "Ansiplay.js-\u57fa\u4e8eAnsiplay.exe\u7684\u7b80\u5355ANSI\u97f3\u4e50\u64ad\u653e\u5668", "title_en": "Ansiplay.js \u2013 Simple ANSI Music Player based on Ansiplay.exe", "transed": 1, "url": "https://andyherbert.github.io/ansiplay.js/", "via": "", "real_tags": ["\u97f3\u4e50", "based", "\u6765\u6e90"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003559, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u26ab\ufe0f\u26aa\ufe0f", "note_en": "\u26ab\ufe0f  \u26aa\ufe0f", "posttime": "2020-05-25 03:26:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "lets", "title": "\u8ba9\u6211\u4eec\u4e00\u8d77\u753b\u5427", "title_en": "Lets Draw Together", "transed": 1, "url": "https://multiuser-sketchpad.glitch.me/", "via": "", "real_tags": ["lets"]}]