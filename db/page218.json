[{"category": "", "categoryclass": "", "imagename": "e879bb92b18a967a3af3e32a4b74dace.jpg", "infoid": 1004194, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u529e\u516c\u5ba4\u91cc\uff0c\u684c\u5b50\u5e94\u8be5\u76f8\u8ddd6\u82f1\u5c3a\u3002\u5982\u679c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u96c7\u4e3b\u5e94\u8be5\u8003\u8651\u5728\u684c\u5b50\u5468\u56f4\u7ad6\u8d77\u5851\u6599\u76fe\u724c\u3002\n\u8fd9\u4e9b\u90fd\u662f\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3(Centers For Disease Control And Prevention)\u5173\u4e8e\u7f8e\u56fd\u96c7\u4e3b\u91cd\u65b0\u5f00\u653e\u529e\u516c\u5ba4\u4ee5\u9632\u6b62\u51a0\u72b6\u75c5\u6bd2\u4f20\u64ad\u7684\u6700\u5b89\u5168\u65b9\u5f0f\u7684\u5168\u9762\u65b0\u5efa\u8bae\u3002\n\u5982\u679c\u9075\u5faa\u8fd9\u4e9b\u6307\u5bfc\u65b9\u9488\uff0c\u5c06\u5bfc\u81f4\u4f01\u4e1a\u5de5\u4f5c\u7ecf\u9a8c\u7684\u6df1\u8fdc\u91cd\u5851\u3002\u4ed6\u4eec\u751a\u81f3\u98a0\u8986\u4e86\u591a\u5e74\u6765\u5173\u4e8e\u901a\u52e4\u7684\u5efa\u8bae\uff0c\u6566\u4fc3\u4eba\u4eec\u81ea\u5df1\u5f00\u8f66\u4e0a\u73ed\uff0c\u800c\u4e0d\u662f\u4e58\u5750\u516c\u5171\u4ea4\u901a\u5de5\u5177\u6216\u62fc\u8f66\uff0c\u4ee5\u907f\u514d\u6f5c\u5728\u7684\u75c5\u6bd2\u66b4\u9732\u3002\n\u8fd9\u4e9b\u5efa\u8bae\u4ece\u901a\u98ce\u7cfb\u7edf\u7684\u6280\u672f\u5efa\u8bae(\u6700\u53ef\u53d6\u7684\u662f\u6253\u5f00\u66f4\u591a\u7684\u7a97\u6237)\u5230\u5efa\u8bae\u53d6\u6d88\u62ff\u94c1\u5496\u5561\u673a\u548c\u96f6\u98df\u7bb1\u7b49\u516c\u5171\u798f\u5229\u3002\n\u6307\u5357\u8bf4\uff1a\u201c\u7528\u9884\u5305\u88c5\u7684\u5355\u4efd\u98df\u54c1\u4ee3\u66ff\u5496\u5561\u58f6\u3001\u996e\u6c34\u673a\u548c\u6563\u88c5\u96f6\u98df\u7b49\u9ad8\u89e6\u89c9\u7684\u516c\u5171\u98df\u54c1\u3002\u201d\n\u8fd8\u6709\u4e00\u4e9b\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u5982\u679c\u4e0d\u662f\u51e0\u4e4e\u4e0d\u53ef\u80fd\u7684\u8bdd\uff1a\u201c\u9650\u5236\u7535\u68af\u7684\u4f7f\u7528\u548c\u5360\u7528\uff0c\u4ee5\u4fdd\u6301\u81f3\u5c116\u82f1\u5c3a\u7684\u793e\u4ea4\u8ddd\u79bb\u3002\u201d\n\u7f8e\u56fd\u6700\u5927\u7684\u516c\u5171\u536b\u751f\u673a\u6784CDC\u5728\u5176\u7f51\u7ad9\u4e0a\u53d1\u5e03\u4e86\u8fd9\u4e00\u6307\u5bfc\u65b9\u9488\uff0c\u56e0\u4e3a\u5404\u5dde\u6b63\u5f00\u59cb\u89e3\u9664\u6700\u4e25\u683c\u7684\u5c01\u9501\u547d\u4ee4\u3002\u5546\u5e97\u3001\u9910\u9986\u3001\u6d77\u6ee9\u548c\u516c\u56ed\u6b63\u5728\u5206\u9636\u6bb5\u91cd\u65b0\u5f00\u653e\u3002\u4f46\u5404\u7ea7\u767d\u9886\u529e\u516c\u5ba4\u5458\u5de5\u5927\u591a\u7ee7\u7eed\u5728\u5bb6\u5de5\u4f5c\uff0c\u80fd\u591f\u901a\u8fc7\u7b14\u8bb0\u672c\u7535\u8111\u3001\u89c6\u9891\u4f1a\u8bae\u548c\u677e\u5f1b\u6709\u6548\u5730\u5de5\u4f5c\u3002\n\u5176\u4e2d\u4e00\u4e9b\u63aa\u65bd\u4e0e\u4e00\u4e9b\u96c7\u4e3b\u5df2\u7ecf\u5728\u8ba1\u5212\u7684\u4e8b\u60c5\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u5176\u4ed6\u96c7\u4e3b\u53ef\u80fd\u4f1a\u7b80\u5355\u5730\u8ba4\u4e3a\u8ba9\u5458\u5de5\u5728\u5bb6\u5de5\u4f5c\u66f4\u5bb9\u6613\u3002\n\u7814\u7a76\u8be5\u5730\u533a\u7684\u975e\u8425\u5229\u6027\u667a\u5e93\u7845\u8c37\u5408\u8d44\u4f01\u4e1a\u7684\u603b\u88c1\u517c\u9996\u5e2d\u6267\u884c\u5b98\u62c9\u585e\u5c14\u00b7\u6c49\u8003\u514b(Russell Hancock)\u8868\u793a\uff1a\u201c\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u4f01\u4e1a\u4e0d\u60f3\u91cd\u8fd4\u5de5\u4f5c\u5c97\u4f4d\u3002\u201d\u201c\u4f60\u4e0d\u4f1a\u770b\u5230\u9f13\u58f0\u3001\u97f3\u8c03\u3001\u54ed\u58f0\u548c\u8d76\u56de\u529e\u516c\u5ba4\u7684\u58f0\u97f3\u3002\u201d\n\u6c49\u8003\u514b\u4ee5Twitter\u7b49\u6781\u7aef\u4f8b\u5b50\u4e3a\u4f8b\u8bf4\uff0c\u4ed6\u4ece\u7845\u8c37\u516c\u53f8\u548c\u8be5\u5730\u533a\u4ee5\u5916\u7684\u516c\u53f8\u90a3\u91cc\u90fd\u542c\u5230\u4e86\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002Twitter\u66fe\u8868\u793a\uff0c\u5b83\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u91cd\u8fd4\u516c\u53f8\u529e\u516c\u7a7a\u95f4\u3002\u8bb8\u591a\u4eba\u8ba1\u5212\u901a\u8fc7\u7cbe\u7b80\u9700\u8981\u6765\u5de5\u4f5c\u7684\u4eba\u6765\u4fdd\u6301\u5b89\u5168\uff0c\u540c\u65f6\u5236\u5b9a\u4e0eCDC\u6307\u5bfc\u65b9\u9488\u4e00\u81f4\u7684\u8ba1\u5212\u3002\n\u201c\u4e0d\u95f4\u65ad\u5730\u6d88\u6bd2\u8868\u9762\uff0c\u6e05\u6d17\u6696\u901a\u7a7a\u8c03\uff0c\u201d\u4ed6\u8bf4\uff0c\u4ed6\u6307\u7684\u662f\u901a\u98ce\u7cfb\u7edf\uff0c\u201c\u6253\u5f00\u7a97\u6237\uff0c\u901a\u98ce\uff0c\u6240\u6709\u8fd9\u4e9b\u4e8b\u60c5\u3002\u201d\n\u5927\u578b\u529e\u516c\u5bb6\u5177\u516c\u53f8Knoll\uff0cInc.\u8d1f\u8d23\u5de5\u4f5c\u573a\u6240\u7684\u526f\u603b\u88c1\u7279\u96f7\u897f\u00b7\u6000\u9ed8(Tracy Wmer)\u4e00\u76f4\u5728\u4e0e\u8bb8\u591a\u516c\u53f8\u8ba8\u8bba\u6700\u5b89\u5168\u7684\u91cd\u65b0\u5f00\u4e1a\u65b9\u5f0f\u3002\u4ed6\u8bf4\uff0c\u4ed6\u540c\u610fCDC\u7684\u5927\u90e8\u5206\u5efa\u8bae\uff0c\u4f46\u4ed6\u8865\u5145\u8bf4\uff0c\u6210\u529f\u7684\u91cd\u65b0\u5f00\u4e1a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5c06\u53d6\u51b3\u4e8e\u5458\u5de5\u7684\u5408\u89c4\u3002\n\u4ed6\u8bf4\uff1a\u201c\u6700\u5927\u7684\u56e0\u7d20\u662f\u52b3\u52a8\u529b\u548c\u4ed6\u4eec\u5728\u5b9e\u73b0\u8fd9\u4e00\u73b0\u5b9e\u65f6\u5fc5\u987b\u627f\u62c5\u7684\u4e2a\u4eba\u8d23\u4efb\u3002\u201d\n\u75be\u63a7\u4e2d\u5fc3\u4e5f\u63d0\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u91cd\u7533\u4e86\u4e00\u79cd\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u56fd\u6c11\u53e3\u5934\u7985\u7684\u4e1c\u897f\uff1a\u5b9a\u671f\u6d17\u624b\u81f3\u5c1120\u79d2\uff1b\u4e0d\u78b0\u62f3\u5934\u6216\u63e1\u624b\uff1b\u4e0d\u78b0\u8138\u3002\n\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3\u5efa\u8bae\uff0c\u5bf9\u5458\u5de5\u7684\u9694\u79bb\u5e94\u8be5\u5728\u4ed6\u4eec\u4e0a\u73ed\u4e4b\u524d--\u5728\u901a\u52e4\u65f6\u5f00\u59cb\u3002\u4e0e\u6700\u8fd1\u7684\u516c\u5171\u653f\u7b56\u6307\u5bfc\u65b9\u9488\u622a\u7136\u4e0d\u540c\u7684\u662f\uff0c\u8be5\u673a\u6784\u8868\u793a\uff0c\u4e2a\u4eba\u5e94\u8be5\u72ec\u81ea\u9a7e\u8f66\u4e0a\u73ed\u3002\n\u8be5\u673a\u6784\u8868\u793a\uff0c\u96c7\u4e3b\u5e94\u8be5\u652f\u6301\u8fd9\u4e00\u52aa\u529b\uff1a\u201c\u5411\u5458\u5de5\u63d0\u4f9b\u6fc0\u52b1\uff0c\u9f13\u52b1\u4ed6\u4eec\u4f7f\u7528\u5c3d\u91cf\u51cf\u5c11\u4e0e\u4ed6\u4eba\u8fd1\u8ddd\u79bb\u63a5\u89e6\u7684\u4ea4\u901a\u65b9\u5f0f\uff0c\u6bd4\u5982\u4e3a\u72ec\u81ea\u4e0a\u4e0b\u73ed\u6216\u5355\u4eba\u4e58\u8f66\u7684\u505c\u8f66\u63d0\u4f9b\u8865\u507f\u3002\u201d\n\u89c4\u6a21\u8f83\u5c0f\u7684\u516c\u53f8\u4e5f\u5df2\u7ecf\u5728\u8ba8\u8bba\u5982\u4f55\u91cd\u65b0\u5f00\u4e1a\uff0c\u5176\u4e2d\u4e00\u4e9b\u516c\u53f8\u7684\u60f3\u6cd5\u4e0eCDC\u63a8\u8350\u7684\u60f3\u6cd5\u76f8\u540c\u3002\u4f46\u8bb8\u591a\u529e\u516c\u5ba4\u90fd\u9762\u4e34\u7740\u72ec\u7279\u7684\u6311\u6218\u3002\u4f8b\u5982\uff0c\u90a3\u4e9b\u6ca1\u6709\u5411\u5916\u6253\u5f00\u7684\u7a97\u6237\uff0c\u5141\u8bb8\u901a\u98ce\uff1b\u5f88\u5c11\u6216\u6839\u672c\u6ca1\u6709\u8fdb\u5165\u6237\u5916\u7a7a\u95f4\u7684\u7a97\u6237\uff1b\u6216\u8005\u662f\u5c0f\u800c\u5f00\u653e\u7684\uff0c\u516d\u4e2a\u6708\u524d\u8fd8\u662f\u5fc5\u9700\u54c1\u7684\u5e73\u9762\u56fe\uff0c\u73b0\u5728\u5df2\u7ecf\u88ab\u7981\u6b62\u4f7f\u7528\u3002\n\u4e3a\u8bbe\u65bd\u7ba1\u7406\u884c\u4e1a\u670d\u52a1\u7684\u51fa\u7248\u7269FMLink\u7684\u51fa\u7248\u4eba\u5f7c\u5f97\u00b7\u57fa\u6885\u5c14(Peter Kimmel)\u8bf4\uff0cCDC\u7684\u6307\u5bfc\u65b9\u9488\u662f\u201c\u4e00\u4efd\u5173\u4e8e\u9700\u8981\u505a\u4ec0\u4e48\u7684\u5f88\u597d\u7684\u6e05\u5355\u201d\u3002\n\u4f46\u4ed6\u8bf4\uff0c\u5b83\u4eec\u4e5f\u63d0\u51fa\u4e86\u8bb8\u591a\u95ee\u9898\uff0c\u5305\u62ec\u793e\u4f1a\u758f\u8fdc\u5c06\u5982\u4f55\u53d1\u6325\u4f5c\u7528\u3002\u201c\u8fd9\u610f\u5473\u7740\u6bcf\u5c42\u697c\u7684\u5de5\u4f5c\u573a\u6240\u8981\u5c11\u5f97\u591a\uff0c\u5bc6\u5ea6\u4e5f\u5927\u5927\u964d\u4f4e\u3002\u5269\u4e0b\u7684\u5de5\u4eba\u5c06\u4f4f\u5728\u54ea\u91cc\uff1f\u5bb6\u5177\u5728\u65b0\u7684\u5e03\u5c40\u4e0b\u80fd\u7528\u5417\uff1f\u201c\u3002\u4ed6\u95ee\u3002\n\u4ed6\u8bf4\uff1a\u201c\u867d\u7136\u6709\u5f88\u591a\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u8fd9\u4e9b\u65b9\u6848\u5f80\u5f80\u9700\u8981\u5927\u91cf\u7684\u601d\u8003\u548c\u9884\u7b97\uff0c\u800c\u8fd9\u4e9b\u9884\u7b97\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\u3002\u201d\nMobify\u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u6e29\u54e5\u534e\u7684\u516c\u53f8\uff0c\u62e5\u670940\u540d\u5458\u5de5\uff0c\u5e2e\u52a9\u5927\u578b\u96f6\u552e\u5546\u5efa\u9020\u6570\u5b57\u5e97\u9762\u3002\u4e0a\u5468\uff0c\u8be5\u516c\u53f8\u642c\u56de\u4e86\u529e\u516c\u5ba4\uff0c\u5e76\u5df2\u6309\u7167CDC\u7684\u5efa\u8bae\u8fdb\u884c\u4e86\u591a\u9879\u6539\u53d8\u3002\u8fd9\u680b\u5927\u697c\u7684\u623f\u4e1c\u73b0\u5728\u8981\u6c42\u5728\u7535\u68af\u91cc\u4f7f\u7528\u53e3\u7f69\u3002\u516c\u53f8\u81ea\u5df1\u505a\u51fa\u7684\u5176\u4ed6\u6539\u53d8\u3002\n\u201c\u6bcf\u684c\u4e00\u4eba\u3002\u6211\u4eec\u628a\u7bad\u5934\u653e\u5728\u5730\u677f\u4e0a\uff0c\u8fd9\u6837\u4eba\u4eec\u5c31\u53ef\u4ee5\u671d\u4e00\u4e2a\u65b9\u5411\u53bb\u6d17\u624b\u95f4\uff0c\u4ece\u53e6\u4e00\u4e2a\u65b9\u5411\u51fa\u6765\uff0c\u201c\u8be5\u516c\u53f8\u9996\u5e2d\u6267\u884c\u5b98\u4f0a\u6208\u5c14\u00b7\u6cd5\u83b1\u8328\u57fa(Igor Faletski)\u8bf4\u3002\u201c\u6ca1\u6709\u66f4\u591a\u7684\u5171\u4eab\u98df\u7269\u4e86\u3002\u536b\u751f\u7ad9\u7528\u6e7f\u5dfe\u3002\u201c\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u4ed6\u8bf4\uff0c\u53ef\u80fd\u6709\u4e00\u79cd\u66f4\u5927\u7684\u529b\u91cf\u5728\u8d77\u4f5c\u7528\uff1a\u5de5\u4eba\u672c\u8eab\u7684\u51b2\u52a8\u3002\n\u201c\u81ea\u4ece\u6211\u4eec\u4e0a\u5468\u5f00\u4e1a\u4ee5\u6765\uff0c\u53ea\u67095\u540d\u5458\u5de5\u8fdb\u6765\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u56e0\u4e3a\u529e\u516c\u5ba4\u76f8\u5f53\u5927\uff0c\u6240\u4ee5\u4eba\u4eec\u53ef\u4ee5\u5750\u5728\u4e0d\u540c\u7684\u89d2\u843d\u3002\u201d", "note_en": "Inside the office, desks should be six feet apart. If that isn\u2019t possible, employers should consider erecting plastic shields around desks.\n These are among  sweeping new recommendations from the Centers for Disease Control and Prevention on the safest way for American employers reopening their offices to prevent the spread of the coronavirus.\n If followed, the guidelines would lead to a far-reaching remaking of the corporate work experience. They even upend years of advice on commuting, urging people to drive to work by themselves, instead of taking mass transportation or car-pooling, to avoid potential exposure to the virus.\n The recommendations run from technical advice on ventilation systems (more open windows are most desirable) to suggested abolition of communal perks like latte makers and snack bins.\n \u201cReplace high-touch communal items, such as coffee pots, water coolers, and bulk snacks, with alternatives such as prepackaged, single-serving items,\u201d the guidelines say.\n And some border on the impractical, if not near impossible: \u201cLimit use and occupancy of elevators to maintain social distancing of at least 6 feet.\u201d\n The C.D.C., the nation\u2019s top public health agency, posted the guidelines on its website as states are beginning to lift their most stringent lockdown orders. Shops, restaurants, beaches and parks are reopening in phases. But white-collar office employees at all levels mostly continue to work from home, able to function effectively with laptops, video conferencing and Slack.\n  Some of the measures are in keeping with what some employers are already planning, but other employers may simply decide it\u2019s easier to keep employees working from home.\n \u201cCompanies, surprisingly, don\u2019t want to go back to work,\u201d said Russell Hancock, president and CEO of Joint Venture Silicon Valley, a nonprofit think tank that studies the region. \u201cYou will not see the drum beat and hue and cry and rush to get back to the office.\u201d\n  Citing extreme examples like Twitter, which has said it may never return to corporate office space, Mr. Hancock said that he has heard similar things from both Silicon Valley companies and those outside the region. Many are planning to stay safe by thinning who is required to come to work, along with making plans consistent with the C.D.C. guidelines.\n \u201cIncessant disinfecting of surfaces, cleansing out your HVAC,\u201d he said, referring to the ventilation system, \u201copening windows, ventilation, all of those things.\u201d\n Tracy Wymer, vice president of workplace for Knoll, Inc., a large office-furniture company, who has been in discussions with numerous companies about the safest way to reopen, said he agreed with much of what the C.D.C. was advising but he added that a big part of successful reopening would involve employee compliance.\n  \u201cThe biggest factor is on the work force and the personal responsibility they must take in making this reality work,\u201d he said.\n The C.D.C. addressed that part too, reiterating what has become a kind of national mantra: regular hand washing of at least 20 seconds; no fist bumps or handshakes; no face touching.\n The C.D.C. recommended that the isolation for employees should begin before they get to work \u2014 on their commute. In a stark change from public policy guidelines in the recent past, the agency said individuals should drive to work \u2014 alone.\n Employers should support this effort, the agency said: \u201cOffer employees incentives to use forms of transportation that minimize close contact with others, such as offering reimbursement for parking for commuting to work alone or single-occupancy rides.\u201d\n  Smaller companies also have already been discussing how to reopen, some with the kinds of ideas the C.D.C. is recommending. But there are distinctive challenges in many offices. For instance, those that do not have windows that open to the outside, permitting ventilation; have little or no access to outdoor space; or are small and open, with floor plans that were de rigueur just six months ago and now are verboten.\n  Peter Kimmel, the publisher of FMLink, a publication serving the facilities management industry, said that the C.D.C. guidelines are \u201ca good checklist of what needs to be done.\u201d\n But they also raise numerous questions, he said, including how social distancing will work. \u201cThis means many fewer workplaces per floor, reducing the density considerably. Where will the remaining workers be housed? Will the furniture work in the new layout?\u201d he asked.\n \u201cWhile there are many solutions, these often require substantial thought and a budget that likely doesn\u2019t exist,\u201d he said.\n Mobify, a Vancouver-based company with 40 employees that helps build digital storefronts for major retailers, moved back into its office last week and has already made a number of the changes recommended by the C.D.C. The building\u2019s landlord now requires mask use in the elevator. Other changes the company made on its own.\n \u201cOne person per table. We put arrows on the floor so people will go to the restroom one direction and come out the other,\u201d said Igor Faletski, the company\u2019s chief executive. \u201cNo more shared food. Sanitation stations with wipes.\u201d\n At the same time, he said, there may be a larger force at work: the impulses of the workers themselves.\n \u201cSince we opened up last week, only five employees have come in,\u201d he said. \u201cBecause the office is quite big, there was room for people to sit in different corners.\u201d", "posttime": "2020-05-29 11:07:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5efa\u8bae,recommends", "title": "CDC\u5efa\u8bae\u5bf9\u7f8e\u56fd\u529e\u4e8b\u5904\u8fdb\u884c\u5168\u9762\u6539\u9769", "title_en": "CDC Recommends Sweeping Changes to American Offices", "transed": 1, "url": "https://www.nytimes.com/2020/05/28/health/cdc-coronavirus-offices.html", "via": "", "real_tags": ["\u5efa\u8bae"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004193, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u6211\u5728Haskell\u53d6\u5f97\u8fdb\u5c55\u7684\u6301\u7eed\u52aa\u529b\u7684\u4e00\u90e8\u5206(\u8fd9\u662f\u62112016\u5e74\u7684\u76ee\u6807\u4e4b\u4e00\uff01)\uff0c\u6211\u5728edX\u4e0a\u5173\u6ce8Erik Meijer\u7684\u51fd\u6570\u5f0f\u7f16\u7a0bMOOC\u3002\n\u7b2c\u4e00\u5802\u8bfe\u662f\u975e\u5e38\u57fa\u7840\u7684\u4e1c\u897f\uff0c\u6211\u5f88\u5feb\u5c31\u5b66\u5b8c\u4e86\u3002\u7b2c7\u8bfe\u662f\u5173\u4e8e\u51fd\u6570\u89e3\u6790\u5668\u548cM*(\u53ef\u6015\u7684)\u3002\u8fd9\u5c31\u662f\u6211\u7b2c\u4e00\u6b21\u9047\u5230\u56f0\u96be\u7684\u5730\u65b9\uff0c\u6211\u60f3\u8fd9\u4f1a\u662f\u4e00\u7bc7\u6709\u8da3\u7684\u6587\u7ae0\u3002\u6211\u4ee5\u524d\u5df2\u7ecf\u5728Haskell\u4e2d\u4f7f\u7528\u8fc7\u89e3\u6790\u5668\u7ec4\u5408\u5668(\u4e3b\u8981\u662fParsec\u548cAttoparsec)\uff0c\u4f46\u4ece\u672a\u771f\u6b63\u7406\u89e3\u5b83\u4eec\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6216\u8005\u81f3\u5c11\u4e0d\u8db3\u4ee5\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u89e3\u6790\u5668\u7ec4\u5408\u5668\u3002\u4e0b\u9762\u662f\u6211\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u770b\u6cd5\u3002\u4e0d\u8981\u671f\u5f85\u771f\u6b63\u5148\u8fdb\u7684\u4e1c\u897f\uff01\u8fd9\u53ea\u662f\u5bf9\u57fa\u672c\u6982\u5ff5\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u6784\u5efa\u66f4\u590d\u6742\u3001\u66f4\u6709\u7528\u7684\u5de5\u5177\u3002\u7279\u522b\u662f\uff0c\u6211\u4e0d\u4f1a\u8c08\u8bba\uff1a\n\u7f16\u5199\u60a8\u81ea\u5df1\u7684\u89e3\u6790\u5668\u7ec4\u5408\u5668\u5e93\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\uff0c\u60a8\u5c06\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5b66\u4e60(\u6216\u5de9\u56fa)\u5176\u4ed6\u77e5\u8bc6\uff0c\u6bd4\u5982\uff1a\u51fd\u6570\u5668\u3001\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u7136\u8fd8\u6709Monad\uff0c\u66f4\u4e00\u822c\u7684\u662f\uff0c\u5982\u4f55\u5728Haskell\u4e2d\u8bbe\u8ba1DSL\u3002\u6211\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2a\u6982\u5ff5\u4e86(\u81f3\u5c11\uff0c\u6211\u662f\u8fd9\u4e48\u60f3\u7684\uff0c\u2026)\u3002\uff0c\u4f46\u662f\u4ece\u9ad8\u7ea7\u62bd\u8c61\u4e2d\u77e5\u9053\u67d0\u4ef6\u4e8b\u662f\u4ec0\u4e48\uff0c\u4e0e\u77e5\u9053\u5982\u4f55\u5728\u5177\u4f53\u7c7b\u578b(\u5982\u89e3\u6790\u5668)\u4e0a\u5b9e\u73b0\u5b83\u4e0d\u662f\u4e00\u56de\u4e8b\uff01\n\u6211\u4eec\u53ef\u4ee5\u5c06\u89e3\u6790\u5668\u89c6\u4e3a\u6d88\u8017\u67d0\u4e9b\u8f93\u5165\u7684\u4e1c\u897f\uff0c\u5e76\u8f93\u51fa\u6240\u6d88\u8017\u5185\u5bb9\u7684\u7ed3\u6784\u5316\u8868\u793a\u5f62\u5f0f\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u53ea\u4f7f\u7528\u5b57\u7b26\u4e32(Haskell\u7c7b\u578b\u5b57\u7b26\u4e32)\u3002\u6240\u4ee5\u8fd9\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\u8fd9\u91cc\uff0ca\u8868\u793a\u4ece\u5b57\u7b26\u6d41(\u5b57\u7b26\u4e32)\u6784\u5efa\u7684\u5185\u5bb9\u7684\u7c7b\u578b\u3002\u8fd9\u53ef\u4ee5\u662f\u8bed\u6cd5\u6811\u3001\u6570\u5b57\u5217\u8868\u6216\u5176\u4ed6\u4efb\u4f55\u5185\u5bb9\u3002\u4f8b\u5982\uff0c\u80fd\u591f\u8bc6\u522b\u50cf&#34\uff1b[1\uff0c2\uff0c3\uff0c4]&#34\uff1b\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u7684\u89e3\u6790\u5668\u7684\u7c7b\u578b\u53ef\u4ee5\u662f\uff1aparser[Int](\u6269\u5c55\u4e3astring-&gt\uff1b[Int])\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002\n\u8003\u8651\u5230\u7b2c\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd4\u56dea\u800c\u4e0d\u662fa(\u5728\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u7ed3\u679c)\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u4e30\u5bcc\u7684\u7c7b\u578b\uff0c\u5982\u4efb\u4e00\u79cd\u7c7b\u578b\u6765\u5904\u7406\u89e3\u6790\u9519\u8bef\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u7531a\u548c\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u5143\u7ec4\uff0c\u5b83\u8868\u793a\u672a\u88ab\u89e3\u6790\u5668\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\u90e8\u5206\u3002\u7136\u540e\uff0c\u8be5\u7c7b\u578b\u5c06\u53d8\u4e3a\uff1a\n\u4e3e\u4e00\u4e2a\u5931\u8d25\u7684\u89e3\u6790\u5668\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u6211\u4eec\u524d\u9762\u7684\u80fd\u591f\u5904\u7406\u6574\u6570\u5217\u8868\u7684\u89e3\u6790\u5668\uff0c\u5982\u679c\u60a8\u7ed9\u5b83\u5b57\u7b26\u4e32&#34\uff1b[1\uff0c2&#34\uff1b\uff1b\uff0c\u5b83\u5c06\u5931\u8d25\uff0c\u5e76\u4e14\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u3002\n\u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u6211\u4eec\u5411\u89e3\u6790\u5668\u63d0\u4f9b&#34\uff1b[1\uff0c2\uff0c3\uff0c4]toto&#34\uff1b\uff0c\u5b83\u5c06\u6d88\u8017\u5b57\u7b26\u4e32\u4e2d\u8868\u793a\u6574\u6570\u5217\u8868\u7684\u90e8\u5206\uff0c\u800c\u7559\u4e0b&#34\uff1btoto&#34\uff1b\u4f5c\u4e3a\u5269\u4f59\u7684\u8f93\u5165\u3002\u56e0\u6b64\uff0c\u7ed3\u679c\u5c06\u662f\uff1aJust([1\uff0c2\uff0c3\uff0c4]\uff0c&#34\uff1btoto&#34\uff1b)\u3002\n--\u6b64\u89e3\u6790\u5668\u59cb\u7ec8\u6210\u529f\u5e76\u8fd4\u56de\u4f5c\u4e3a\u8f93\u5165\u7ed9\u5b9a\u7684\u503c--(\u4fdd\u6301\u8f93\u5165\u5b57\u7b26\u4e32\u4e0d\u53d8)\uff1a\uff1aa-&gt\uff1bParser a a=Parser$\\s-&gt\uff1bJust(a\uff0cs)\u3002\n--\u6b64\u89e3\u6790\u5668\u8fd4\u56de\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c--\u7a7a\u8f93\u5165\u65f6\u5931\u8d25\uff1a\uff1aparser Char=Parser$\\s-&gt\uff1bcase s of[]-&gt\uff1bNothing(c\uff1axs)-&gt\uff1bJust(c\uff0cxs)\u3002\n\u57fa\u672c\u89e3\u6790\u5668\u7684\u884c\u4e3a\u4f3c\u4e4e\u4e0e\u9884\u671f\u4e00\u81f4\u3002\u6211\u4eec\u5728\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\u4ec0\u4e48\u4e5f\u5f97\u4e0d\u5230\uff0c\u5e76\u4e14\u4ed6\u4eec\u80fd\u591f\u90e8\u5206\u4f7f\u7528\u8f93\u5165\u3002\u6240\u4ee5\u4e00\u5207\u90fd\u5f88\u597d\uff0c\u4f46\u662f\u66f4\u590d\u6742\u7684\u89e3\u6790\u5668\u5462\uff1f\u6211\u4eec\u5e0c\u671b\u89e3\u6790\u5b57\u7b26\u4e32\u6216\u66f4\u590d\u6742\u7684\u6a21\u5f0f\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u57fa\u672c\u7684\u89e3\u6790\u5668\u5c1d\u8bd5\u4ece\u8f93\u5165\u4e2d\u8bc6\u522b\u5b57\u7b26\u4e32\uff1a\n\uff1a\uff1astring-&gt\uff1bParser String&#34\uff1b&#34\uff1b=return&#34\uff1b&#34\uff1b(c1\uff1axs1)=Parser$\\s-&gt\uff1bcase runParser oneChar of Nothing-&gt\uff1bNothing Just(c2\uff0cREST)-&gt\uff1bif c1==c2\u5219case runParser(String Xs1)Nothing of Nothing-&gt\uff1bNothing Just(Match\uff0crest 2)-&gt\uff1bJust(c2\uff1aMatch\uff0cREST 2\u3002\n\u8fd9\u4e0d\u662f\u5f88\u65b9\u4fbf(\u4f46\u5f88\u6709\u6548)\u2026\u3002\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u4e00\u904d\u53c8\u4e00\u904d\u5730\u7f16\u5199\u6837\u677f\u6765\u7f16\u5199\u89e3\u6790\u5668\u3002\u5e0c\u671b\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u8457\u540d\u7684\u7ed3\u6784\uff0c\u5b83\u5141\u8bb8\u5728Haskell\u4e2d\u8fdb\u884c\u7ec4\u5408\uff0c\u5b83\u53eb\u505aMonad(\u6211\u4e0d\u4f1a\u518d\u505a\u5173\u4e8eMonad\u7684\u6559\u7a0b\uff0c\u6240\u4ee5\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u719f\u6089\u4e86\u8fd9\u4e2a\u6982\u5ff5)\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u6211\u4eec\u7684\u89e3\u6790\u5668\u7c7b\u578b\u6210\u4e3aMonad\u7684\u5b9e\u4f8b\u6765\u907f\u514d\u6240\u6709\u7684\u6837\u677f\u3002\u8fd9\u5c06\u5141\u8bb8\u6211\u4eec\u4f7f\u7528DO\u8bed\u6cd5\u5e72\u51c0\u5730\u7f16\u5199\u6211\u4eec\u7684\u89e3\u6790\u5668\uff01\u751c!\u3002\n\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u6211\u4eec\u7684\u89e3\u6790\u5668\u6210\u4e3a\uff1aFunctor\u3001Applicative\u548cMonad\u7684\u5b9e\u4f8b\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u7684\u89e3\u6790\u5668\u662f\u51fd\u6570\u5668\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c06\u51fd\u6570\u6620\u5c04\u5230\u6211\u4eec\u7684\u89e3\u6790\u7ed3\u679c\u4e0a\uff1a\nInstance functor Parser\u5176\u4e2d--FMAP\uff1a\uff1a(a-&gt\uff1bb)-&gt\uff1bParser a-&gt\uff1bParser b--1.\u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u8fd0\u884cParser\u3002--2.\u5bf9\u89e3\u6790\u7ed3\u679c\u5e94\u7528\u51fd\u6570\u3002FMAP f p=Parser$\\s-&gt\uff1bcase runParser p s of Nothing-&gt\uff1bNothing Just(a\uff0crest)-&gt\uff1bJust(f a\uff0crest)\n--\u89e3\u6790`String`&#34\uff1b42&#34\uff1b\u7136\u540e\u4f7f\u7528`read`\uff1a\uff1aparser Int=(FMAP Read$String&#34\uff1b42&#34\uff1b)parse42&#34\uff1b42\u5c06\u5176\u8f6c\u6362\u4e3a`Int`\uff01&#34\uff1b\n\u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u6211\u4eec\u7684\u89e3\u6790\u5668\u6210\u4e3aApplicative\u7684\u5b9e\u4f8b\u3002\u8fd9\u90e8\u5206\u5bf9\u6211\u6765\u8bf4\u5e76\u4e0d\u660e\u663e\u3002\u6211\u627e\u5230\u7684\u6240\u6709\u793a\u4f8b\u90fd\u662f\u5173\u4e8e\u7b80\u5355\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u6bd4\u5982\u53ef\u80fd\uff0c\u4f46\u6211\u53d1\u73b0\u89e3\u6790\u5668\u975e\u5e38\u4e0d\u540c\u3002\u4f46\u662f\u591a\u4e8f\u4e86\u7c7b\u578b\u548c\u4e00\u4e9b\u7528\u4f8b(\u60a8\u53ef\u4ee5\u5728\u4e0b\u9762\u627e\u5230)\uff0c\u6211\u60f3\u5230\u4e86\u4e0b\u9762\u7684\u5b9e\u73b0(\u5e0c\u671b\u5b83\u662f\u6b63\u786e\u7684\u2026)\u3002\uff1a\n\u5b9e\u4f8b\u5e94\u7528\u89e3\u6790\u5668\uff0c\u5176\u4e2d--PURE\uff1a\uff1aA-&gt\uff1bParser a--\u5728\u89e3\u6790\u5668\u5185\u5305\u88c5\u4e00\u4e2a\u503c\uff0c\u4fdd\u6301\u8f93\u5165\u4e0d\u53d8\u3002Pure a=Parser$\\s-&gt\uff1bJust(a\uff0cs)--(&lt\uff1b*&gt\uff1b)\uff1a\uff1aParser(a-&gt\uff1bb)-&gt\uff1bParser a-&gt\uff1bParser b--1.\u5728\u8f93\u5165\u4e0a\u8fd0\u884c\u7b2c\u4e00\u4e2a\u89e3\u6790\u5668(\u751f\u6210\u51fd\u6570(a-&gt\uff1bb)\u3002--2.\u5bf9\u7b2c\u4e00\u4e2a\u89e3\u6790\u5668\u7559\u4e0b\u7684\u5269\u4f59\u8f93\u5165\u8fd0\u884c\u7b2c\u4e8c\u4e2a\u89e3\u6790\u5668\u3002--3.\u5bf9\u7b2c\u4e8c\u4e2a\u89e3\u6790\u5668\u7684\u7ed3\u679c\u5e94\u7528\u51fd\u6570(a-&gt\uff1bb)\u3002p1&lt\uff1b*&gt\uff1bp2=\u89e3\u6790\u5668$\\s-&gt\uff1bcase runParser p1 s of Nothing-&gt\uff1bNothing Just(f\uff0crest)-&gt\uff1bcase runParser p2 Rest of Nothing-&gt\uff1bNothing Just(a\uff0crest 2)-&gt\uff1bJust(f a\uff0crest 2)\u3002\n\u524d\u4e00\u4e2a\u5b9e\u4f8b\u7684\u7528\u5904\u53ef\u80fd\u5e76\u4e0d\u660e\u663e\uff0c\u4f46\u5b83\u5141\u8bb8\u6211\u4eec\u5728\u89e3\u6790\u5668\u9886\u57df\u5185\u63d0\u5347\u4e00\u4e9b\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u83b7\u53d6\u51e0\u4e2a\u89e3\u6790\u5668\u7684\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u7684\u7ed3\u679c\u5206\u7ec4\u5230\u4e00\u4e2a\u5143\u7ec4\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Applicative\u6765\u5b9e\u73b0\uff1a\n\u8fd9\u662f\u6211\u4eec\u5c06\u7528\u6765\u5c06\u539f\u59cb\u89e3\u6790\u7ed3\u6784\u8f6c\u6362\u4e3a\u6211\u4eec\u81ea\u5df1\u7684\u7c7b\u578b(\u4f8b\u5982\uff1aAST)\u7684\u6784\u9020\u3002\n\u6570\u636eAST=Foo String|Bar String|Pair Char Char\u6d3e\u751f(\u663e\u793a)\uff0cparseBar\uff0cparsePair\uff1a\uff1aparser AST=Foo&lt\uff1b$&gt\uff1bString&#34\uff1bfoo&#34\uff1b=Bar&lt\uff1b$&gt\uff1bString&#34\uff1bbar&#34\uff1b=Pair&lt\uff1b$&gt\uff1boneChar&lt\uff1b*&gt\uff1boneChar\u3002\n\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u6211\u4eec\u7684\u89e3\u6790\u5668\u662fMonad\u3002\u8fd9\u610f\u5473\u7740\u5b83\u5fc5\u987b\u5b9e\u73b0\uff1a&gt\uff1b&gt\uff1b=\uff0c&gt\uff1b&gt\uff1b&gt\uff1b\uff0c\u8fd4\u56de\u548c\u5931\u8d25\uff1a\n\u5b9e\u4f8b\u5355\u9879\u89e3\u6790\u5668WHERE--(&gt\uff1b&gt\uff1b=)\uff1a\uff1aParser a-&gt\uff1b(a-&gt\uff1bParser b)-&gt\uff1bParser b--1.\u5728\u8f93\u5165\u65f6\u8fd0\u884c\u7b2c\u4e00\u4e2a\u89e3\u6790\u5668\u3002--2.\u5c06\u89e3\u6790\u7ed3\u679c\u53cd\u9988\u7ed9`f`\u3002--3.\u5728\u5269\u4f59\u90e8\u5206\u8fd0\u884c\u7b2c\u4e8c\u4e2a\u89e3\u6790\u5668(`f`\u7684\u7ed3\u679c)--input(\u7531\u7b2c\u4e00\u4e2a\u89e3\u6790\u5668\u7559\u4e0b)p&gt\uff1b=f=Parser$\\s-&gt\uff1bcase runParser p s of Nothing-&gt\uff1bNothing Just(a\uff0crest)-&gt\uff1brunParser(F A)rest--(&gt\uff1b&gt\uff1b)\uff1aparser a--&gt\uff1bParser b-&gt\uff1bParser b--1.\u8fd0\u884c\u3002--2.\u5bf9\u5269\u4f59\u8f93\u5165(\u7b2c\u4e00\u4e2a\u89e3\u6790\u5668\u7559\u4e0b)\u8fd0\u884c\u7b2c\u4e8c\u4e2a\u89e3\u6790\u5668--\u6211\u4eec\u5ffd\u7565\u7b2c\u4e00\u4e2a\u89e3\u6790\u5668\u7684\u7ed3\u679c\u3002p1&gt\uff1b&gt\uff1bp2=\u89e3\u6790\u5668$\\s-&gt\uff1bcase runParser p1s of Nothing-&gt\uff1bNothing Just(_\uff0cREST)-&gt\uff1brunParser p2 rest--return\uff1a\uff1aA-&gt\uff1bParser a return=\u7eaf--FAIL\uff1a\uff1aString-&gt\uff1bParser a Fail_=Parser(Const Nothing)\n\u591a\u4e8f\u4e86\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528DO\u8bed\u6cd5\u7cd6\uff0c\u8fd9\u5c06\u7b80\u5316\u66f4\u590d\u6742\u7684\u89e3\u6790\u5668\u7684\u5b9e\u73b0\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u80fd\u505a\u4e9b\u4ec0\u4e48\u3002\n--\u4ece\u8f93\u5165\u89e3\u6790\u7279\u5b9a\u7684`Char`\uff1a\uff1aChar-&gt\uff1bParser Char c=do C1&lt\uff1b-oneChar\u5982\u679cc==C1\uff0c\u5219\u8fd4\u56deC1\u5426\u5219\u5931\u8d25\u3002\n--\u4ece\u8f93\u5165\u89e3\u6790\u7279\u5b9a\u6a21\u5f0f\uff1a\uff1astring-&gt\uff1bParser string[]=return[](c\uff1axs)=do c1&lt\uff1b-char c rest&lt\uff1b-string&#39\uff1bxs return(c1\uff1arest)\u3002\ndo\u8868\u793a\u6cd5\u4f7f\u7ec4\u5408\u89e3\u6790\u5668\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff01\u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u6784\u5efa\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u66f4\u591a\u7684\u89e3\u6790\u7ec4\u5408\u7b26\uff1a\u9009\u9879\u3001\u8bb8\u591a\u3001\u9009\u9879\u7b49\u7b49\u3002\u4f46\u662f\u6211\u5c06\u628a\u5b83\u7559\u4f5c\u7ec3\u4e60\u3002\n\u6b64\u5916\uff0c\u5b9e\u73b0\u9519\u8bef\u62a5\u544a\u673a\u5236\u4ee5\u53ca\u4f4d\u7f6e\u8ddf\u8e2a(\u5b9a\u4f4d\u8f93\u5165\u4e2d\u7684\u9519\u8bef)\u4f1a\u5f88\u6709\u8da3\uff0c\u4f46\u6211\u5c06\u628a\u5b83\u7559\u7ed9\u53e6\u4e00\u4e2a\u535a\u5ba2\u5e16\u5b50(\u6216\u8005\u4f5c\u4e3a\u8bfb\u8005\u7684\u7ec3\u4e60\uff01)\u3002\n\u5b9e\u73b0(\u975e\u5e38)\u57fa\u672c\u7684\u89e3\u6790\u7ec4\u5408\u5668\u4f7f\u6211\u66f4\u597d\u5730\u7406\u89e3\u4e86Parsec\u6216Attoparsec\u7b49\u5e93\u7684\u57fa\u7840\uff0c\u5e76\u5b9e\u73b0\u4e86Applicative\u548cMonad\u7b49\u7c7b\u578b\u7c7b\u7684\u4e0d\u90a3\u4e48\u5fae\u4e0d\u8db3\u9053\u7684\u5b9e\u4f8b\u3002\u867d\u7136\u5f88\u57fa\u672c\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u662f\u66f4\u719f\u6089Haskell\u7684\u7c7b\u4f3cDSL\u7684\u529f\u80fd\uff0c\u5e76\u611f\u53d7\u8be5\u8bed\u8a00\u5728\u7279\u5b9a\u9886\u57df\u5efa\u6a21\u65b9\u9762\u63d0\u4f9b\u7684\u5f3a\u5927\u529f\u80fd\u7684\u597d\u65b9\u6cd5\u3002", "note_en": "As part of my ongoing effort to make progress in Haskell (that\u2019s one of my goals for 2016!), I\u2019m following the  MOOC on functionnal programming by  Erik Meijer on  edX.\n The first lessons were pretty basic stuff, and I got through them quickly. Lesson 7 is about  Functional parsers and M***** (scary). This is where I encountered my first difficulties, and I thought it would be an interesting writing. I already used parser combinators in Haskell before (mainly  Parsec and  Attoparsec), but never really understood how they worked, or at least not enough to implement one myself. So here is my take on the subject. Don\u2019t expect really advanced stuff! It\u2019s just an introduction to the basic concepts, on which we could build more complex and useful tools. In particular,  I won\u2019t talk about:\n    One of the interesting facts about writing your own parser combinators library, is that you will learn (or consolidate) other knowledges in the process, like:  Functors,  Applicatives and, of course,  Monads, and more generaly, how to  design DSL in Haskell. I already knew about this concepts (at least, that\u2019s what I thought\u2026), but knowing what something is from a high level of abstraction,  is not the same as knowing how to implement it on a concrete type (like a Parser)!\n  We can view a  Parser as  something that consumes some input, and outputs a structured representation of what was consumed. For the sake of simplicity, we\u2019ll only consume strings (Haskell type  String). So that would be something like:\n  Here  a represents the type of what is  built from the stream of characters ( String). This could be a syntactic tree, or a list of numbers, or anything else. For example a parser that is able to recognize a string like  &#34;[1, 2, 3, 4]&#34; could have the type:  Parser [Int] (expended to  String -&gt; [Int]), which means it takes a  String and output a  list of integers.\n   To take into account the first point, we could return  Maybe a instead of  a (resulting in  Nothing in case of failure). Note that we could also use a richer type like  Either to handle parsing errors. And for the second point, we can return a tuple of a  a and a  String, which represents the part of the string that wasn\u2019t consumed by the parser. The type would then become:\n  As an example of a parser that would fail, if you take our previous  parser that is able to handle a list of integers, if you give it the string  &#34;[1 ,2&#34;, it will fail, and return  Nothing.\n Similarly, if we feed the  parser with  &#34;[1, 2, 3, 4]toto&#34;, it will consume the part of the string that represents the list of integers, and leave  &#34;toto&#34; as a remaining input. Thus the result would be:  Just ([1, 2, 3, 4], &#34;toto&#34;).\n   -- This parser always succeeds and returns the value given as input -- (leaving the input string intact)  :: a -&gt;  Parser a  a =  Parser $ \\s -&gt;  Just (a, s)\n -- This parser returns the first char of the input string, and -- fail on empty input  ::  Parser  Char  =  Parser $ \\s -&gt;  case s  of [] -&gt;  Nothing (c:xs) -&gt;  Just (c, xs)\n          The basic parsers seem to behave as expected. We get  Nothing in case of failure, and they are able to partially consume the input. So all is good, but what about more complex parsers? We would like to parse strings, or more complex patterns. Let\u2019s try to recognize a string from the input, using our basic parsers:\n ::  String -&gt;  Parser  String   &#34;&#34; = return  &#34;&#34;  (c1:xs1) =  Parser $ \\s -&gt;  case runParser oneChar s  of  Nothing -&gt;  Nothing  Just (c2, rest) -&gt;  if c1 == c2  then  case runParser (string xs1) rest  of  Nothing -&gt;  Nothing  Just (match, rest2) -&gt;  Just (c2:match, rest2)  else  Nothing\n       This isn\u2019t very convenient (but it works)\u2026 Because we have to write the boilerplate to  compose parsers over and over. Hopefully, we know a famous structure that allows composition in Haskell, and this is called  Monad (and I won\u2019t make yet another tutorial on  Monads, so I will assume you already are familiar with this concept). That means we could avoid all the boilerplate, by making our  Parser type an instance of  Monad. This would allow us to use the  do syntax to cleanly compose our parsers! Sweet!\n To do so, we\u2019ll have to make our  Parser an instance of:  Functor,  Applicative and  Monad.\n  First of all, our Parser is an instance of   Functor, which means we can  map functions over the result of our parsing:\n instance  Functor  Parser  where  -- fmap :: (a -&gt; b) -&gt; Parser a -&gt; Parser b  -- 1. Run parser on input string.  -- 2. Apply function on result of parsing. fmap f p =  Parser $ \\s -&gt;  case runParser p s  of  Nothing -&gt;  Nothing  Just (a, rest) -&gt;  Just (f a, rest)\n -- Parse `String` &#34;42&#34; and then convert it to `Int` using `read`  ::  Parser  Int  = (fmap read $ string  &#34;42&#34;)  parse42  &#34;42 is the answer!&#34;\n   Secondly, we can make our parser an instance of   Applicative. This part wasn\u2019t obvious for me. All the examples I found were about instances for easy types like  Maybe, but I found a  Parser to be pretty different. But thanks to the types and some use-cases (that you\u2019ll find below), I figured the following implementation (which will hopefully be correct\u2026):\n instance  Applicative  Parser  where  -- pure :: a -&gt; Parser a  -- Wrap a value inside a parser, leaving input unchanged. pure a =  Parser $ \\s -&gt;  Just (a, s)  -- (&lt;*&gt;) :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b  -- 1. Run first parser on input (resulting in a function (a -&gt; b).  -- 2. Run second parser on remaining input, left by first parser.  -- 3. Apply function (a -&gt; b) on result of second parser. p1 &lt;*&gt; p2 =  Parser $ \\s -&gt;  case runParser p1 s  of  Nothing -&gt;  Nothing  Just (f, rest) -&gt;  case runParser p2 rest  of  Nothing -&gt;  Nothing  Just (a, rest2) -&gt;  Just (f a, rest2)\n The usefulness of the previous instance might not be obvious, but it allows us to  lift some function inside the realm of parsers. For example if we want to take the result of several parsers and then group their results into a tuple, we can do it using  Applicatives:\n   This is the kind of constructs we will use to convert the raw parsed structure into our own types (e.g: an AST).\n data  AST =  Foo  String |  Bar  String |  Pair  Char  Char  deriving ( Show) , parseBar, parsePair ::  Parser  AST  =  Foo &lt;$&gt; string  &#34;foo&#34;  =  Bar &lt;$&gt; string  &#34;bar&#34;  =  Pair &lt;$&gt; oneChar &lt;*&gt; oneChar\n      Last but not least, our parser is a   Monad. Which means it must implement:  &gt;&gt;=,  &gt;&gt;,  return and  fail:\n instance  Monad  Parser  where  -- (&gt;&gt;=) :: Parser a -&gt; (a -&gt; Parser b) -&gt; Parser b  -- 1. Run first parser on input.  -- 2. Feed result of parsing to `f`.  -- 3. Run second parser (result of `f`) on remaining  -- input (left by first parser) p &gt;&gt;= f =  Parser $ \\s -&gt;  case runParser p s  of  Nothing -&gt;  Nothing  Just (a, rest) -&gt; runParser (f a) rest  -- (&gt;&gt;) :: Parser a -&gt; Parser b -&gt; Parser b  -- 1. Run first parser on input.  -- 2. Run second parser on remaining input (left by first parser)  -- We ignore result of first parser. p1 &gt;&gt; p2 =  Parser $ \\s -&gt;  case runParser p1 s  of  Nothing -&gt;  Nothing  Just (_, rest) -&gt; runParser p2 rest  -- return :: a -&gt; Parser a return = pure  -- fail :: String -&gt; Parser a fail _ =  Parser (const  Nothing)\n Thanks to this definition we can use the  do syntactic sugar, which will ease the implementation of more complex parsers. Let\u2019s see what we can do.\n -- Parse a specific `Char` from the input  ::  Char -&gt;  Parser  Char  c =  do c1 &lt;- oneChar  if c == c1  then return c1  else failure\n     -- Parse a specific pattern from the input  ::  String -&gt;  Parser  String  [] = return []  (c:xs) =  do c1 &lt;- char c rest &lt;- string&#39; xs return (c1:rest)\n    The  do notation makes it very easy to combine parsers! We now have some basic building blocks that we could use to implement more parsing combinators:  choice,  many,  option, etc. But I\u2019ll leave it as an exercise.\n Moreover, it would be interesting to implement an error reporting mechanism, as well as position tracking (to locate errors in the input), but I\u2019ll leave it for another blog-post (or as an exercise for the reader!).\n  Implementing (very) basic parsing combinators led me to better understand the foundation of libraries like  Parsec or  Attoparsec, and to implement not so trivial instances of typeclasses like  Applicatives and  Monads. Although basic, I think it\u2019s a good way to be more familiar with the  DSL-like capabilities of Haskell, and to feel the power that the language offers in term of domain-specific modeling.", "posttime": "2020-05-29 10:51:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ec4\u5408,parser,\u89e3\u6790\u5668", "title": "\u89e3\u6790\u5668\u7ec4\u5408\u5668\u4e2d\u6709\u4ec0\u4e48\uff1f(2016)", "title_en": "What's in a Parser Combinator? (2016)", "transed": 1, "url": "https://remusao.github.io/posts/whats-in-a-parser-combinator.html", "via": "", "real_tags": ["\u7ec4\u5408", "parser", "\u89e3\u6790\u5668"]}, {"category": "", "categoryclass": "", "imagename": "9ba0a0bdd754737729998585710c3a1d.png", "infoid": 1004192, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6587\u672c\u5448\u73b0\u5728\u4e00\u5c0f\u90e8\u5206\u7f51\u7ad9\u4e0a\u51fa\u73b0\u6545\u969c\u3002\u5b83\u4eec\u901a\u5e38\u662f\u4e3b\u8981\u7684\u7f51\u7ad9\uff0c\u5728\u90a3\u91cc\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u60f3\u5230\u4f1a\u6709\u5982\u6b64\u57fa\u672c\u7684\u4e1c\u897f\u88ab\u7834\u574f\uff0c\u6bd4\u5982Apple.com\uff0cimgix.com\uff0c\u751a\u81f3\u6211\u4eec\u4eb2\u5207\u7684\u4e3b\u673a\u5a92\u4ecb\u3002\u81f3\u5c11\u6709\u4e24\u4e2abug\u5b58\u5728\uff0c\u636e\u6211\u6240\u77e5\uff0c\u5b83\u4eec\u8fd8\u6ca1\u6709\u88ab\u6e05\u695a\u5730\u8bc6\u522b\u3001\u8bb0\u5f55\uff0c\u751a\u81f3\u6ca1\u6709\u547d\u540d\u3002\u6211\u5e0c\u671b\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u53ef\u80fd\u5df2\u7ecf\u627e\u5230\u4e86\u539f\u56e0\u3002\n\u5b83\u4eec\u53ef\u80fd\u53ea\u5728Windows\u4e0a\u53d1\u751f\uff0c\u5c3d\u7ba1\u5b83\u4eec\u4f3c\u4e4e\u4e0d\u662fWindows\u7684bug\u3002\u6211\u8ba4\u4e3a\u8fd9\u4e9b\u9519\u8bef\u4e4b\u6240\u4ee5\u9003\u8fc7\u4e86\u4eba\u4eec\u7684\u6ce8\u610f\uff0c\u662f\u56e0\u4e3a\u5728\u7f51\u7edc\u5f00\u53d1\u793e\u533a\u7684\u67d0\u4e9b\u975e\u4e13\u4e1a\u7684\u89d2\u843d\u91cc\uff0c\u5947\u602a\u5730\u7f3a\u4e4f\u5bf9Windows\u7684\u6d4b\u8bd5\u3002\n\u5751\u5751\u6d3c\u6d3c\u7684\u6587\u5b57\uff1a\u6587\u5b57\u4ece\u5b57\u9762\u4e0a\u770b\u662f\u7834\u788e\u7684\uff0c\u5c31\u50cf\u4e0b\u9762\u82f9\u679c\u7684\u9875\u9762\u4e0a\u663e\u793a\u7684\u90a3\u6837\u3002\u4e22\u5931\u4e86\u5c0f\u5757\u788e\u7247\u3002\u82f9\u679c\u7684\u7f51\u7ad9\u5728Windows\u4e0a\uff0c\u5728\u6240\u6709\u6d4f\u89c8\u5668\u4e2d\u90fd\u662f\u8fd9\u6837\u88ab\u7834\u574f\u7684\uff0c\u81f3\u5c11\u6709\u4e24\u5e74\u7684\u65f6\u95f4\u3002\n\u6d82\u62b9\u6587\u672c\uff1a\u6587\u672c\u88ab\u6d82\u62b9\uff0c\u5b57\u5f62\u7ebf\u6761\u7c97\u7ec6\u5728\u8d85\u8584\u548c\u8fc7\u5ea6\u7c97\u4f53\u4e4b\u95f4\u968f\u673a\u53d8\u5316\u3002\n\u8bf7\u770bSuper\u4e2dS\u7684\u9876\u90e8\u548cComputer\u4e2dC\u7684\u9876\u90e8\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u7ebf\u6761\u5728\u54ea\u91cc\u6298\u65ad\uff0c\u51e0\u4e4e\u6d88\u5931\u4e86\uff0c\u5c31\u50cf\u6709\u4eba\u7528\u767d\u8272\u6cb9\u6f06\u6d82\u62b9\u4e00\u6837\u3002\u770b\u770biPad\u548cPro\u4e2dP\u7684\u9876\u90e8\u7684\u952f\u9f7f\u72b6\u3002(\u4ec5\u4f9b\u53c2\u8003\uff0c\u8fd9\u79cd\u5b57\u4f53\u662fMyriad Set Pro\u3002)\u3002\n\u82f9\u679c\u7684\u7f51\u7ad9\u5728Windows\u4e0a\u5c31\u50cf\u8fd9\u6837\u762b\u75ea\u4e86\u81f3\u5c11\u4e24\u5e74\u3002\u6211\u5728\u591a\u4e2aWindows8.1\u548c10\u53f0\u673a\u5668\u4e0a\u7684\u6240\u6709\u4e3b\u8981\u6d4f\u89c8\u5668\u4e0a\u770b\u5230\u4e86\u5b83\uff1aIE11\u3001Chrome\u3001Firefox\u3001Edge\uff0c\u6211\u60f3\u751a\u81f3\u8fd8\u6709Opera(\u57fa\u4e8eChromium)\u3002\n\u57282016\u5e74\u672b\u62162017\u5e74\u521d\u7684\u67d0\u4e2a\u65f6\u5019\uff0c\u8fd9\u4e2a\u95ee\u9898\u5728Microsoft Edge\u4e2d\u6d88\u5931\u4e86-\u6211\u4e0d\u77e5\u9053Edge\u53d1\u751f\u4e86\u4ec0\u4e48\u53d8\u5316\uff0c\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u82f9\u679c\u7684\u7f51\u7ad9\u5728Chrome\u3001Firefox\u548c\u5176\u4ed6\u6d4f\u89c8\u5668\u4e0a\u4ecd\u7136\u65e0\u6cd5\u4f7f\u7528\u3002\u76f4\u5230\u6211\u5728Quora\u4e0a\u95ee\u662f\u5426\u6709\u4eba\u77e5\u9053\u82f9\u679c\u7684\u6587\u672c\u6e32\u67d3\u4e3a\u4ec0\u4e48\u4f1a\u635f\u574f\uff0c\u82f9\u679c\u624d\u4fee\u590d\u4e86\u8fd9\u4e2a\u9519\u8bef\u3002\n\u6211\u5f88\u5c11\u5728\u7f51\u4e0a\u770b\u5230\u8fd9\u4e2a\u95ee\u9898\u3002Wired.com\u7684\u6587\u672c\u5728\u51e0\u5e74\u524d\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u88ab\u7834\u574f--\u8fd9\u662f\u6211\u8bb0\u5fc6\u4e2d\u552f\u4e00\u7684\u53e6\u4e00\u4e2a\u6848\u4f8b\u3002\u81ea\u90a3\u4ee5\u540e\uff0c\u4ed6\u4eec\u4fee\u590d\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u540e\u6765\u53c8\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7cdf\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u6807\u9898\u9009\u62e9\u4e86\u51e0\u4e4e\u65e0\u6cd5\u9605\u8bfb\u7684\u5b57\u4f53\uff1a\n\u8fd9\u79cd\u5b57\u4f53\u66f4\u9002\u5408\u5974\u96b6\u6240\u6709\u7684\u96ea\u8304\u5e97\uff0c\u800c\u4e0d\u662f\u79d1\u6280/\u5de6\u7ffc\u8bc4\u8bba\u7f51\u7ad9\u3002\n\u5982\u4f60\u6240\u89c1\uff0c\u6587\u672c\u6781\u5176\u6c61\u8ff9\u6591\u6591\u3002\u5b57\u4f53\u662f\u963f\u9edb\u5c14\u00b7\u6851\u65af\uff0c\u6839\u672c\u4e0d\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002\u8fd9\u662f\u5728imgix\u7684\u5f00\u53d1\u6587\u6863\u9875\u9762\u4e0a\u3002\u6211\u57282016\u5e747\u6708\u4e3a\u4ed6\u4eec\u5199\u4e86\u4e00\u4efd\u9519\u8bef\u62a5\u544a\uff0c\u6709\u5f88\u591a\u7ec6\u8282\u548c\u622a\u56fe\uff0c\u4f46\u4ed6\u4eec\u6ca1\u6709\u4fee\u590d\u3002\u4ed6\u4eec\u8bf4\u4ed6\u4eec\u4e0d\u80fd\u590d\u5236\u5b83\uff0c\u8fd9\u5f88\u5947\u602a\uff0c\u56e0\u4e3a\u6211\u53ef\u4ee5\u5728\u4efb\u4f55Windows\u673a\u5668\u4e0a\u7528\u4efb\u4f55\u6d4f\u89c8\u5668\u590d\u5236\u5b83\u3002\u516d\u4e2a\u6708\u540e\uff0c\u6211\u5728Quora\u4e0a\u8be2\u95ee\u4e86\u8fd9\u4ef6\u4e8b--\u6211\u6ca1\u6709\u65f6\u95f4\u9694\u79bb\u8fd9\u4e2a\u6f0f\u6d1e\uff0c\u4f46\u6211\u975e\u5e38\u597d\u5947\u662f\u5426\u6709\u4eba\u9694\u79bb\u4e86\u3002\n\u76f4\u5230\u51e0\u5206\u949f\u524d\uff0c\u6211\u8fd8\u4ee5\u4e3aimgix\u548c\u82f9\u679c\u4e00\u6837\uff0c\u5728Quora\u4e0a\u8be2\u95ee\u4e86\u8fd9\u4e2a\u95ee\u9898\u540e\u5c31\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u73b0\u5728\u6211\u610f\u8bc6\u5230\uff0c\u4ed6\u4eec\u53ef\u80fd\u5df2\u7ecf\u5728\u6587\u6863\u9875\u9762\u4e0a\u4fee\u590d\u4e86\u5b83\uff0c\u4f46\u73b0\u5728\u4ed6\u4eec\u7684\u4e3b\u9875\u5bfc\u822a\u5b50\u83dc\u5355\u88ab\u751f\u52a8\u5730\u3001\u75db\u82e6\u5730\u635f\u574f\u4e86\uff1a\n\u60a8\u53ef\u4ee5\u5728\u5b83\u4eec\u7684\u4e3b\u83dc\u5355\u6807\u9898\u4e2d\u770b\u5230\u4e00\u4e9b\u6c61\u70b9\uff0c\u4f46\u5b83\u786e\u5b9e\u4f1a\u5728\u5f39\u51fa\u83dc\u5355\u4e2d\u5f39\u51fa\u3002\u4e0a\u9762\u7684\u56fe\u7247\u5728\u5927\u591a\u6570\u663e\u793a\u5668\u4e0a\u90fd\u6bd4\u771f\u4eba\u5927\u5c0f\u5c0f\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u70b9\u51fb\u6216\u70b9\u51fb\u5b83\uff0c\u5b83\u5e94\u8be5\u4f1a\u5c55\u5f00\uff0c\u4f60\u4f1a\u66f4\u5168\u9762\u5730\u611f\u53d7\u5230\u8fd9\u4e2a\u9519\u8bef\u3002\u7f51\u7edc\u4e0a\u7684\u6587\u672c\u6ca1\u6709\u7406\u7531\u4f1a\u53d8\u6210\u8fd9\u4e2a\u6837\u5b50--\u4e5f\u5c31\u662f\u8bf4\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u3002\n\u5f53imgix\u8bf4\u4ed6\u4eec\u4e0d\u80fd\u91cd\u73b0\u8fd9\u4e00\u70b9\u65f6\uff0c\u6211\u60f3\u5230\u4e86Medium\u7f51\u9875\u8bbe\u8ba1\u5e08Marcin Wichary\u5728Medium\u7ecf\u5386\u4e86\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u5b57\u4f53\u9519\u8bef\u540e\u5199\u7684\u4e00\u7bc7\u4ee4\u4eba\u60ca\u53f9\u7684\u5e16\u5b50\u3002\u4ed6\u6307\u51fa\uff0c\u7531\u4e8e\u8be5\u9519\u8bef\u53ea\u53d1\u751f\u5728Windows\u548cLinux\u4e0a\uff0c\u4ed6\u5fc5\u987b\u542f\u52a8\u4e00\u4e9b\u865a\u62df\u673a\u624d\u80fd\u91cd\u73b0\u5b83(\u8bf7\u6ce8\u610f\uff0c\u8fd9\u662f\u5728\u66f4\u6539/\u9519\u8bef\u88ab\u63a8\u9001\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u540e)\u3002\n\u6211\u5dee\u70b9\u4ece\u6905\u5b50\u4e0a\u6454\u4e0b\u6765\u3002Medium\u6ca1\u6709\u5728Windows\u4e0a\u6d4b\u8bd5\u5417\uff1f\u4ed6\u4eec\u7684\u529e\u516c\u5ba4\u91cc\u6ca1\u6709\u4efb\u4f55\u771f\u6b63\u7684Windows\u673a\u5668\uff0c\u751a\u81f3\u8fdeQA\u90fd\u6ca1\u6709\uff1f\u5b83\u4eec\u5b8c\u5168\u4f9d\u8d56\u4e8e\u865a\u62df\u673a\uff0c\u53ef\u9884\u89c1\u7684\u5de5\u4f5c\u6469\u64e6\u5c06\u5bfc\u81f4\u8f83\u5c11\u7684\u6d4b\u8bd5\uff0c\u751a\u81f3\u4e0d\u4f1a\u8fdb\u884c\u6d4b\u8bd5\u3002\u5b83\u8fd8\u5bfc\u81f4\u4e0eUI/GPU\u76f8\u5173\u7684\u884c\u4e3a\u7f3a\u4e4f\u6709\u6548\u6027\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u8bb8\u591a\u9057\u6f0f\u7684bug\u3002\u6211\u4e0d\u6562\u76f8\u4fe1\u50cfMedium\u8fd9\u6837\u7684\u5927\u51fa\u7248\u5546\u4f1a\u5982\u6b64\u9c81\u83bd\uff0c\u8fd9\u8ba9\u6211\u6000\u7591\u5982\u679cIMGIX\u200a-\u200a\u5c31\u662f\u8fd9\u6837\uff0c\u4ed6\u4eec\u53ef\u80fd\u4e5f\u6ca1\u6709Windows\u673a\u5417\uff1f\n\u8fd9\u53e5\u8bdd\u51fa\u81ea\u201c\u7ef4\u7279\u7eaa\u4e8b\u62a5\u201d\u7684\u4e00\u7bc7\u6587\u7ae0\u3002\u5b57\u4f53\u662fAdobe\u7684Source Sans Pro\uff0c\u7edd\u5bf9\u4e0d\u5e94\u8be5\u662f\u8fd9\u4e2a\u6837\u5b50\u3002\u67e5\u770bTypekit\u4e0a\u7684\u5b57\u4f53\uff0c\u5728Windows\u4e0a\uff0c\u5728\u4efb\u4f55\u6d4f\u89c8\u5668\u4e2d\uff0c\u770b\u770b\u5b83\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u3002\u5b9e\u9645\u4e0a\uff0c\u4efb\u4f55\u5b57\u4f53\u6216\u5b57\u4f53\u90fd\u4e0d\u5e94\u8be5\u662f\u90a3\u6837\u7684\u3002\u6c61\u8ff9\u662f\u4e2a\u866b\u5b50\u3002\nMarcin Wichary\u7684\u5e16\u5b50\u5df2\u7ecf\u88ab\u7f16\u8f91\uff0c\u53bb\u6389\u4e86Medium\u6ca1\u6709\u5728Windows\u548cLinux\u4e0a\u6d4b\u8bd5\uff0cVM\u7684\u4f7f\u7528\u7b49\u90e8\u5206\u3002\u6211\u731c\u5b83\u5f97\u5230\u4e86\u5f3a\u70c8\u7684\u53cd\u5e94\uff0cMedium\u7684CTO Dan Pupius\u5728\u540e\u7eed\u7684\u5e16\u5b50\u4e2d\u8bd5\u56fe\u6709\u70b9\u5012\u9000\uff0c\u4ed6\u4f3c\u4e4e\u6697\u793a25%\u7684\u7528\u6237\u5e76\u4e0d\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6570\u5b57\u3002\u4ed6\u8bf4\u201c\u4e0d\u523025%\u201d(\u90a3\u4e48\uff0c24%\uff1f)\u3002\u7684\u4e2d\u7b49\u8bbf\u95ee\u8005\u90fd\u5728Windows\u4e0a\uff0c\u5c31\u597d\u50cf\u8fd9\u662f\u5728\u8bc1\u660e\u2026\u662f\u6e05\u767d\u7684\u4e00\u6837\nWindows\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u5e73\u53f0\u3002\u53f0\u5f0f\u673a\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5e73\u53f0\uff0c\u5728\u53ef\u9884\u89c1\u7684\u672a\u6765--\u5b83\u662f\u6211\u4eec\u5de5\u4f5c\u7684\u5730\u65b9\u3002\u6240\u6709\u51fa\u7248\u5546\u90fd\u5e94\u8be5\u5728Windows\u3001Mac\u548cLinux\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u9664\u975e99%\u5de6\u53f3\u7684\u8bfb\u8005\u53ea\u6765\u81ea\u4e00\u4e2a\u5e73\u53f0\u3002\n\u5728\u505a\u6211\u4eec\u7684\u5de5\u4f5c\u3001\u6d4b\u8bd5\u7b49\u65b9\u9762\uff0c\u5728\u7f51\u7edc\u5f00\u53d1\u7684\u67d0\u4e9b\u89d2\u843d\u5b58\u5728\u7740\u82f9\u679c\u7684\u504f\u89c1\uff0c\u8fd9\u662f\u9700\u8981\u963b\u6b62\u7684\u3002\u5f00\u53d1\u8005\u548c\u7528\u6237\u6709\u5f88\u591a\u5408\u7406\u7684\u7406\u7531\u9009\u62e9Windows10\uff0c\u800c\u4e0d\u662fMac(\u6216Linux)\u3002(\u4f8b\u5982\uff0c\u4e00\u4e2a\u539f\u56e0\u53ef\u80fd\u662f\u82f9\u679c\u6700\u8fd1\u53d6\u6d88\u4e86\u7b14\u8bb0\u672c\u7535\u8111\u6240\u6709\u6700\u6709\u7528\u7684\u7aef\u53e3\uff0c\u5947\u602a\u7684\u662f\uff0c\u540c\u65f6\u5927\u5e45\u63d0\u9ad8\u4e86\u4ef7\u683c-\u5f88\u5c11\u6709\u4eba\u613f\u610f\u82b12800\u7f8e\u5143\u4e70\u4e00\u53f0\u8fde\u4e00\u4e2a\u6807\u51c6USB\u7aef\u53e3\u90fd\u6ca1\u6709\uff0c\u800c\u4e14\u53ea\u670916 GB\u8fc7\u65f6\u667a\u80fd\u624b\u673aRAM(LPDDR3)\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3002\u5728\u7f8e\u56fd\u4ee5\u5916\uff0c\u751a\u81f3\u53ea\u662f\u67d0\u4e9b\u7f8e\u56fd\u57ce\u5e02\uff0c\u4eba\u4eec\u5bf9Mac\u7684\u5174\u8da3\u6025\u5267\u4e0b\u964d\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u53ea\u5728Mac\u4e0a\u6d4b\u8bd5\uff0c\u4f60\u5c31\u662f\u5728\u8fb9\u7f18\u5316\u4eba\u7c7b\u4e2d\u7684\u7edd\u5927\u591a\u6570\u4eba\u3002)\u3002\n\u6211\u6709\u65f6\u975e\u5e38\u6279\u8bc4\u5fae\u8f6f\uff0c\u4f46\u4f5c\u4e3a\u4e00\u540dQA\u7ecf\u7406\uff0c\u6211\u4e0d\u53ef\u80fd\u628aWindows\u7559\u7ed9VM\uff0c\u6211\u4e5f\u4e0d\u53ef\u80fd\u63a5\u53d7\u6587\u672c\u5448\u73b0\u50cf\u6211\u4eec\u4e0a\u9762\u770b\u5230\u7684\u90a3\u6837\u7cdf\u7cd5\u3002\u597d\u7684\u6587\u672c\u6e32\u67d3\u5f88\u5bb9\u6613\u5728Windows\u4e0a\u5b9e\u73b0\uff0c\u7edd\u5927\u591a\u6570\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\u90fd\u80fd\u505a\u5230(\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u672c\u5730\u6216UWP\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u5f3a\u70c8\u63a8\u8350\u5fae\u8f6f\u7684DirectWrite API)\u3002\n\u6211\u6ca1\u6709\u592a\u591a\u7684\u65f6\u95f4\u6765\u9694\u79bb\u8fd9\u4e9b\u9519\u8bef\uff0c\u6240\u4ee5\u6211\u5e0c\u671b\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u6211\u8ba4\u4e3a\u8fd9\u5c06\u4e0e\u5b57\u4f53\u6587\u4ef6\u6709\u5173\uff0c\u4f46\u4e0d\u4f1a\u50cfttf vs otf\u6216woff vs woff2\u90a3\u6837\u660e\u663e\u3002\u8fd9\u53ef\u80fd\u4e0eOTF\u6765\u6e90\u5b57\u4f53\u4e2d\u7684GLIF\u8868\u9009\u62e9\u6709\u5173\u3002\u6709\u4ec0\u4e48\u4e3b\u610f\u5417\uff1f\nJoe Duarte\u662f\u4e00\u540d\u6570\u636e\u79d1\u5b66\u5bb6\u3001\u793e\u4f1a\u79d1\u5b66\u5bb6\u548c\u8f6f\u4ef6QA\u987e\u95ee\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7grasion@protonmail.com\u8054\u7cfb\u5230\u4ed6\u3002", "note_en": "Text rendering is broken on a small percentage of websites. They\u2019re often major websites where you\u2019d never expect something so basic to be broken, like Apple.com, imgix.com, and even our gracious host Medium. There are at least two bugs out there, and to my knowledge they\u2019ve not been clearly identified, documented, or even given names. I\u2019m hoping that some of you might have figured out the causes.\n They might only happen on Windows, though they don\u2019t seem to be Windows bugs. I think these bugs have escaped attention because of a bizarre lack of testing on Windows in certain unprofessional corners of the web development community.\n  Pockmarked text: Text is literally broken, like on Apple\u2019s page below. missing small pieces. Apple\u2019s website was broken this way on Windows, in all browsers, for at least  two years.\n Smudged text: Text is smudged, with glyph line thickness varying randomly between super-thin and overly bold.\n  Look at the top of the  S in Super and the top of the  C in Computer. You can see where the lines break, almost disappear, like someone dabbed them with white paint. And look at the jaggedness at the tops of the Ps in iPad and Pro. (FYI, that typeface is Myriad Set Pro.)\n Apple\u2019s website was broken on Windows like this for  at least two years. I saw it on multiple Windows 8.1 and 10 machines in all major browsers: IE11, Chrome, Firefox, Edge, and I think even Opera (which is based on Chromium).\n At some point in late 2016 or early 2017, the problem disappeared in Microsoft Edge \u2014 I have no idea what changed in Edge that would fix this problem, but Apple\u2019s site remained broken in Chrome, Firefox and other browsers. Apple didn\u2019t fix the bug until  I asked on Quora if anyone knew why Apple\u2019s text rendering was broken.\n I\u2019ve very rarely seen this problem on the web. Wired.com\u2019s text was broken in the exact same way a few years ago \u2014 that\u2019s the only other case I remember. They\u2019ve since fixed it, but then made things worse by choosing an almost unreadable typeface for their titles:\n  This typeface is more suited to a slave-owning cigar shop than a technology/leftist commentary website.\n  As you can see, the text is extremely smudged. The typeface is Adelle Sans, and it\u2019s not supposed to look that way at all. This was on imgix\u2019s dev docs page. I wrote up a bug report for them in July 2016, with lots of detail and screenshots, but they didn\u2019t fix it. They said they couldn\u2019t reproduce it, which was odd because I could reproduce it on any Windows machine in any browser. Then I asked about it on Quora six months later \u2014 I didn\u2019t have time to isolate the bug, but I was very curious if someone else had.\n Until a few minutes ago, I thought imgix fixed it after I asked about it on Quora, just as Apple had. Now I realize that they might have fixed it on the docs page, but now their homepage nav submenus are vividly, painfully broken:\n  You can see a bit of the smudge in their main menu titles, but it really pops out in the fly-out menu. The image above is smaller than life-size on most displays, so if you click or tap it should expand and you\u2019ll get a fuller sense of the bug. There\u2019s no reason why text on the web should ever look like this \u2014 that is, there\u2019s no question that this is a bug.\n When imgix said they couldn\u2019t repro this, I thought about the  amazing post written by Medium web designer Marcin Wichary after Medium had experienced a really bad font bug. He noted that since the bug was only happening on Windows and Linux, he had to fire up some VMs to reproduce it (note that this was  after the change/bug had been pushed to production).\n I almost fell out of my chair.  Medium didn\u2019t test on Windows? They didn\u2019t have any actual Windows machines in the office, not even for QA? They depended entirely on VMs, with the predictable effort friction that will lead to less testing, or even no testing. It also leads to a lack of validity for UI/GPU-related behaviors and can result in a lot of missed bugs. I couldn\u2019t believe that a major publisher like Medium could be so reckless, and it made me wonder if that\u2019s what was going on at imgix\u200a\u2014\u200amight they not have any Windows machines either?\n   That\u2019s from  an article in Chronicle Vitae. The font is Adobe\u2019s Source Sans Pro, and it definitely isn\u2019t supposed to look like that. View the  font at Typekit, on Windows, in any browser, to see how it\u2019s supposed to look. And realistically,  no typeface or font is supposed to look like that. Smudge is a bug.\n Marcin Wichary\u2019s post has since been edited to remove the part about Medium not testing on Windows and Linux, the use of VMs, etc. I guess it got a strong reaction, and Medium CTO Dan Pupius tried to backpedal a bit in a  follow-up post where he seemed to suggest that 25% of your users is not an enormous number. He said \u201cfewer than 25%\u201d (so, 24%?) of Medium visitors were on Windows, as though this were somehow exculpatory\u2026\n  Windows is an important platform. The desktop is a very important platform, and will be for the foreseeable future \u2014 it\u2019s where we work. All publishers should be testing on Windows, Mac, and Linux unless 99 percent or so of their readers are coming from only one platform.\n There\u2019s an Apple bias in certain corners of web development that needs to be discouraged when it comes to doing our jobs, testing, etc. There are many reasonable reasons for developers and users to choose Windows 10 over a Mac (or a Linux). (For example, one reason would be that Apple recently stripped all the most useful ports from its laptops and, strangely, dramatically increased their price at the same time \u2014 few people are willing to spend $2800 for a laptop that lacks even a single standard USB port, and which sports a mere 16 GB of obsolete  smartphone RAM (LPDDR3). Outside of the US, or even just certain US cities, interest in Macs drops dramatically, so if you\u2019re only testing on Macs, you\u2019re marginalizing a large majority of humanity.)\n I\u2019ve been  extremely critical of Microsoft at times, but as a QA Manager, there\u2019s no way I\u2019d leave Windows to VMs, and there\u2019s no way I\u2019d be okay with text rendering as broken as we see above. Good text rendering is easy to achieve on Windows, and the vast majority of websites and apps achieve it (if you\u2019re building a native or UWP app, I highly recommend Microsoft\u2019s  DirectWrite API).\n I haven\u2019t had much time to isolate these bugs, so I\u2019m hoping some of you know what\u2019s going on. I assume it\u2019s going to be something to do with the font files, but not something obvious like ttf vs otf, or woff vs woff2. It might have to do with the glyf table choice in otf-sourced fonts. Any ideas?\n  Joe Duarte is a data scientist, social scientist, and software QA consultant. You can reach him at   gravity@protonmail.com .", "posttime": "2020-05-29 10:35:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b57\u4f53,web,windows", "title": "\u4e24\u4e2a\u4f3c\u4e4e\u6ca1\u6709\u4eba\u8c08\u8bba\u7684\u795e\u79d8\u7684\u7f51\u7edc\u5b57\u4f53\u9519\u8bef(2018)", "title_en": "Two mysterious web font bugs that no one seems to be talking about (2018)", "transed": 1, "url": "https://medium.com/@ValidScience/two-mysterious-web-font-bugs-that-no-one-seems-to-be-talking-about-861022e7fe69", "via": "", "real_tags": ["\u5b57\u4f53", "web", "windows"]}, {"category": "", "categoryclass": "", "imagename": "e4803f54cf48c9505ad91d4b21acf084.jpeg", "infoid": 1004191, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8def\u900f\u67cf\u67978\u670823\u65e5-\u5fb7\u56fd\u5916\u4ea4\u90e8\u5468\u56db\u53ec\u89c1\u4fc4\u7f57\u65af\u9a7b\u67cf\u6797\u5927\u4f7f\uff0c\u5c312015\u5e74\u5fb7\u56fd\u8bae\u4f1a\u4e0b\u9662\u906d\u9ed1\u5ba2\u653b\u51fb\u4e00\u4e8b\uff0c\u4ee5\u201c\u6700\u5f3a\u70c8\u7684\u63aa\u8f9e\u201d\u63d0\u51fa\u63a7\u8bc9\uff0c\u5e76\u8ba8\u8bba\u53ef\u80fd\u5bf9\u8d23\u4efb\u4eba\u5b9e\u65bd\u7684\u5236\u88c1\u3002\n\u4fc4\u7f57\u65af\u5426\u8ba4\u4e86\u6709\u5173\u5176\u519b\u4e8b\u60c5\u62a5\u662f\u6b64\u6b21\u7f51\u7edc\u653b\u51fb\u7684\u5e55\u540e\u9ed1\u624b\u7684\u6307\u63a7\uff0c\u6b64\u524d\u6709\u5a92\u4f53\u62a5\u9053\u79f0\uff0c\u6570\u636e\u88ab\u76d7\uff0c\u5176\u4e2d\u5305\u62ec\u6765\u81ea\u5fb7\u56fd\u603b\u7406\u5b89\u683c\u62c9\u00b7\u9ed8\u514b\u5c14(Angela Merkel)\u9009\u533a\u529e\u516c\u5ba4\u7684\u7535\u5b50\u90ae\u4ef6\u3002\n\u5fb7\u56fd\u5916\u4ea4\u90e8\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff0c\u56fd\u52a1\u79d8\u4e66\u7c73\u683c\u5c14\u00b7\u4f2f\u6770(Miguel Berger)\u544a\u8bc9\u5927\u4f7f\uff0c\u653f\u5e9c\u5c06\u547c\u5401\u5bf9\u6b64\u6b21\u653b\u51fb\u7684\u8d23\u4efb\u4eba\u63f4\u5f15\u6b27\u76df\u7684\u7f51\u7edc\u5236\u88c1\u673a\u5236\u3002\n\u6b27\u76df\u53bb\u5e74\u6279\u51c6\u4e86\u4e00\u9879\u5236\u5ea6\uff0c\u51bb\u7ed3\u9ed1\u5ba2\u5728\u6b27\u76df\u7684\u8d44\u4ea7\uff0c\u5e76\u7981\u6b62\u4ed6\u4eec\u8fdb\u5165\u3002\n5\u67085\u65e5\uff0c\u8054\u90a6\u68c0\u5bdf\u5b98\u5c31\u6b64\u6b21\u88ad\u51fb\u5bf9\u4fc4\u7f57\u65af\u56fd\u6c11\u5fb7\u7c73\u7279\u91cc\u00b7\u5df4\u4e01(Dmitry Badin)\u53d1\u51fa\u4e86\u902e\u6355\u4ee4\uff0c\u5fb7\u56fd\u5916\u4ea4\u90e8\u8868\u793a\uff0c\u6709\u53ef\u4fe1\u8bc1\u636e\u8868\u660e\uff0c\u88ad\u51fb\u53d1\u751f\u65f6\uff0c\u4ed6\u662fGRU\u519b\u4e8b\u60c5\u62a5\u90e8\u95e8\u7684\u4e00\u5458\u3002\n\u5916\u4ea4\u90e8\u8868\u793a\uff1a\u201c\u9488\u5bf9\u5df4\u4e01\u5148\u751f\u7684\u902e\u6355\u4ee4\u662f\u57fa\u4e8e\u5f3a\u70c8\u6000\u7591\u88ab\u544a\u4e0e\u5176\u4ed6\u8fc4\u4eca\u533f\u540d\u7684\u4eba\u5408\u8c0b\uff0c\u4ee3\u8868\u5916\u56fd\u7279\u52e4\u5c40\u5bf9\u5fb7\u56fd\u8fdb\u884c\u60c5\u62a5\u6d3b\u52a8\u7684\u57fa\u7840\u4e0a\u53d1\u51fa\u7684\u3002\u201d\n\u5728\u5468\u4e09\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\uff0c\u4fc4\u7f57\u65af\u9a7b\u67cf\u6797\u5927\u4f7f\u9986\u8868\u793a\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5fb7\u56fd\u5b98\u5458\u8fd8\u65e0\u6cd5\u63d0\u4f9b\u4e8b\u5b9e\u6765\u652f\u6301\u5bf9\u83ab\u65af\u79d1\u7684\u6307\u63a7\u3002\n\u5fb7\u56fd\u5916\u4ea4\u90e8\u8fd8\u8868\u793a\uff0c\u5176\u8bc4\u4f30\u53d7\u5230\u6b63\u5728\u8fdb\u884c\u7684\u8c03\u67e5\u7684\u5f71\u54cd\uff0c\u8c03\u67e5\u5bf9\u8c61\u662f\u4e00\u540d\u4fc4\u7f57\u65af\u88d4\u683c\u9c81\u5409\u4e9a\u7537\u5b50\uff0c\u8fd9\u540d\u524d\u8f66\u81e3\u53db\u519b\u53bb\u5e74\u590f\u5929\u5728\u67cf\u6797\u88ab\u8c0b\u6740\uff0c\u5bfc\u81f4\u5916\u4ea4\u9a71\u9010\u4e92\u6362\u3002\n\u201c\u653f\u5e9c.\u3002\u660e\u786e\u4fdd\u7559\u91c7\u53d6\u8fdb\u4e00\u6b65\u63aa\u65bd\u7684\u6743\u5229\u3002\u201c\u5916\u4ea4\u90e8\u8bf4\u3002", "note_en": "BERLIN (Reuters) - Germany\u2019s foreign ministry called in the Russian ambassador in Berlin on Thursday to complain \u201cin the strongest possible terms\u201d about a hack attack on the German lower house of parliament in 2015 and discuss possible sanctions against those responsible.\n Russia has rejected allegations that its military intelligence was behind the cyber attack after media reported that data had been stolen, including emails from Chancellor Angela Merkel\u2019s constituency office.\n State Secretary Miguel Berger told the ambassador that the government would call for the EU\u2019s cyber sanctions mechanism to be invoked against those responsible for the attack, said the German ministry in a statement.\n The EU last year approved a system to freeze hackers\u2019 assets in the bloc and banning them from entry.\n Federal prosecutors issued an arrest warrant on May 5 for Russian national Dmitry Badin over the attack and the German ministry said there was credible evidence that he was part of the GRU\u00a0military intelligence service at the time of the attack.\n \u201cThe arrest warrant against Mr\u00a0Badin was issued on the basis of the strong suspicion that the accused conspired with other hitherto anonymous persons to carry out intelligence activities against Germany on behalf of the secret service of a foreign power,\u201d said the ministry.\n In a statement on Wednesday, the Russian embassy in Berlin said German officials so far had not been able to present facts to underpin the accusations against Moscow.\n The German ministry also said its assessment was affected by an ongoing investigation into the murder of a Russian-Georgian man, a former Chechen rebel, in Berlin last summer which led to an exchange of diplomatic expulsions.\n \u201cThe government... expressly reserves the right to take further measures,\u201d said the foreign ministry.", "posttime": "2020-05-29 10:20:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u9ed1\u5ba2,calls,\u8868\u793a", "title": "\u5fb7\u56fd\u56e0\u9ed1\u5ba2\u88ad\u51fb\u53ec\u89c1\u4fc4\u7f57\u65af\u7279\u4f7f", "title_en": "Germany Calls In Russian Envoy Over Hack Attack", "transed": 1, "url": "https://www.reuters.com/article/us-germany-russia-idUSKBN2342F7", "via": "", "real_tags": ["\u9ed1\u5ba2", "calls", "\u8868\u793a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004189, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "OpenSSL 3.0\u662f\u76ee\u524d\u6b63\u5728\u5f00\u53d1\u7684OpenSSL\u7684\u4e0b\u4e00\u4e2a\u7248\u672c\u3002\u672c\u9875\u9762\u65e8\u5728\u4e3a\u4e0b\u8f7dalpha/beta\u7248\u672c\u6216\u8ba1\u5212\u4ece\u5148\u524d\u7248\u672c\u7684OpenSSL\u5347\u7ea7\u52303.0\u7684\u7528\u6237\u63d0\u4f9b\u5907\u6ce8\u96c6\u5408\u3002\nOpenSSL 3.0\u662f\u4e00\u4e2a\u4e3b\u8981\u7248\u672c\uff0c\u56e0\u6b64\u5f53\u524d\u4f7f\u7528\u65e7\u7248\u672cOpenSSL\u7684\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u81f3\u5c11\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u624d\u80fd\u4f7f\u7528\u65b0\u7248\u672c\u3002\u5982\u679c\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4ee5\u524d\u4f7f\u7528OpenSSL 1.1.1\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u4f7f\u7528OpenSSL 3.0\u3002\u4f46\u662f\uff0c\u8fd9\u662f\u4e0d\u80fd\u4fdd\u8bc1\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5229\u7528OpenSSL 3.0\u4e2d\u63d0\u4f9b\u7684\u4e00\u4e9b\u65b0\u529f\u80fd(\u5982FIPS\u6a21\u5757\u7684\u53ef\u7528\u6027)\uff0c\u5219\u53ef\u80fd\u8fd8\u9700\u8981\u8fdb\u884c\u66f4\u6539\u3002\n\u5728\u4ee5\u524d\u7684\u7248\u672c\u4e2d\uff0cOpenSSL\u662f\u5728\u53cc\u91cdOpenSSL\u548cSSLeay\u8bb8\u53ef\u4e0b\u8bb8\u53ef\u7684(\u8fd9\u4e24\u4e2a\u8bb8\u53ef\u90fd\u9002\u7528)\u3002\u4eceOpenSSL 3.0\u5f00\u59cb\uff0c\u8fd9\u88abApache License v2\u6240\u53d6\u4ee3\u3002\nOpenSSL 1.1.1\u7684\u4e3b\u8981\u53d8\u5316\u4e4b\u4e00\u662f\u5f15\u5165\u4e86\u63d0\u4f9b\u8005\u6982\u5ff5\u3002\u63d0\u4f9b\u8005\u6536\u96c6\u5728\u4e00\u8d77\u5e76\u63d0\u4f9b\u53ef\u7528\u7684\u7b97\u6cd5\u5b9e\u73b0\u3002\u4f7f\u7528OpenSSL 3.0\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u6216\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a\u8981\u4e3a\u4efb\u4f55\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u54ea\u4e9b\u63d0\u4f9b\u7a0b\u5e8f\u3002OpenSSL 3.0\u6807\u914d\u4e864\u79cd\u4e0d\u540c\u7684\u63d0\u4f9b\u8005\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u7b2c\u4e09\u65b9\u53ef\u80fd\u4f1a\u5206\u53d1\u53ef\u4ee5\u63d2\u5165OpenSSL\u7684\u5176\u4ed6\u63d0\u4f9b\u7a0b\u5e8f\u3002\u901a\u8fc7\u63d0\u4f9b\u7a0b\u5e8f\u63d0\u4f9b\u7684\u6240\u6709\u7b97\u6cd5\u5b9e\u73b0\u90fd\u53ef\u4ee5\u901a\u8fc7API\u96c6\u8fdb\u884c\u8bbf\u95ee\u3002\u5b83\u4eec\u4e0d\u80fd\u4f7f\u7528\u4f4e\u7ea7API\u8bbf\u95ee(\u89c1\u4e0b\u6587)\u3002\nOpenSSL\u8fc7\u53bb\u63d0\u4f9b\u4e86\u4e24\u7ec4\u7528\u4e8e\u8c03\u7528\u52a0\u5bc6\u7b97\u6cd5\u7684API\uff1aEVP\uff1bAPI\u548c\u4f4e\u7ea7API\u3002EVP API\u901a\u5e38\u8bbe\u8ba1\u4e3a\u8de8\u6240\u6709\u7b97\u6cd5\u7c7b\u578b\u5de5\u4f5c\u3002\u4f4e\u7ea7API\u9488\u5bf9\u7279\u5b9a\u7684\u7b97\u6cd5\u5b9e\u73b0\u3002\u4f8b\u5982\uff0cEVP\u63a5\u53e3\u63d0\u4f9b\u51fd\u6570`EVP_EncryptInit_ex`\u3001`EVP_EncryptUpdate`\u548c`EVP_EncryptFinal`\u8fdb\u884c\u5bf9\u79f0\u52a0\u5bc6\u3002\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u4e0e\u7b97\u6cd5AES\u3001ChaCha\u30013DES\u7b49\u4e00\u8d77\u4f7f\u7528\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8981\u4f7f\u7528\u4f4e\u7ea7API\u8fdb\u884cAES\u52a0\u5bc6\uff0c\u60a8\u5fc5\u987b\u8c03\u7528AES\u7279\u5b9a\u51fd\u6570\uff0c\u5982`AES_SET_ENCRYPT_KEY`\u3001`AES_ENCRYPT`\u7b49\u30023DES\u7684\u529f\u80fd\u4e0d\u540c\u3002\n\u957f\u671f\u4ee5\u6765\uff0cOpenSSL\u5f00\u53d1\u56e2\u961f\u4e00\u76f4\u975e\u6b63\u5f0f\u5730\u4e0d\u9f13\u52b1\u4f7f\u7528\u4f4e\u7ea7API\u3002\u7136\u800c\uff0c\u5728OpenSSL3.0\u4e2d\uff0c\u8fd9\u4e00\u70b9\u53d8\u5f97\u66f4\u52a0\u6b63\u5f0f\u3002\u6240\u6709\u8fd9\u6837\u7684\u4f4e\u7ea7API\u90fd\u5df2\u5f03\u7528\u3002\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u4f46\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u5f00\u59cb\u770b\u5230\u4e0d\u63a8\u8350\u4f7f\u7528\u7684\u8b66\u544a(\u8fd9\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u5bf9\u6b64\u7684\u652f\u6301)\u3002\u4e0d\u63a8\u8350\u4f7f\u7528\u7684API\u53ef\u80fd\u4f1a\u4eceOpenSSL\u7684\u672a\u6765\u7248\u672c\u4e2d\u5220\u9664\uff0c\u56e0\u6b64\u5f3a\u70c8\u5efa\u8bae\u60a8\u66f4\u65b0\u4ee3\u7801\u4ee5\u4f7f\u7528EVP API\u3002\n\u4e00\u4e9b\u901a\u8fc7EVP API\u53ef\u7528\u7684\u52a0\u5bc6\u7b97\u6cd5\u73b0\u5728\u88ab\u8ba4\u4e3a\u662f\u9057\u7559\u7684\uff0c\u5f3a\u70c8\u53cd\u5bf9\u4f7f\u7528\u5b83\u4eec\u3002\u8fd9\u4e9b\u9057\u7559\u7684EVP\u7b97\u6cd5\u5728OpenSSL 3.0\u4e2d\u4ecd\u7136\u53ef\u7528\uff0c\u4f46\u4e0d\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u3002\u5982\u679c\u8981\u4f7f\u7528\u5b83\u4eec\uff0c\u5219\u5fc5\u987b\u52a0\u8f7d\u65e7\u7248\u63d0\u4f9b\u7a0b\u5e8f\u3002\u8fd9\u53ef\u4ee5\u50cf\u66f4\u6539\u914d\u7f6e\u6587\u4ef6\u4e00\u6837\u7b80\u5355\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u5b8c\u6210(\u89c1\u4e0b\u6587)\u3002\n\u652f\u6301\u63d0\u4f9b\u7a0b\u5e8f\u7684\u91cd\u6784\u4e0e\u7528\u4e8e\u652f\u6301\u5f15\u64ce\u7684API\u53d1\u751f\u5185\u90e8\u51b2\u7a81\uff0c\u5305\u62ec\u5f15\u64ceAPI\u548c\u521b\u5efa\u6216\u4fee\u6539\u81ea\u5b9a\u4e49\u65b9\u6cd5\u7684\u4efb\u4f55\u51fd\u6570(\u4f8b\u5982\uff0cEVP_MD_METH_NEW\u3001EVP_CIPHER_METH_NEW\u3001EVP_PKEY_METH_NEW\u3001RSA_METH_NEW\u3001EC_KEY_METHOD_NEW\u7b49)\u3002\u8fd9\u4e9b\u51fd\u6570\u5728OpenSSL 3.0\u4e2d\u5df2\u5f03\u7528\uff0c\u8fd9\u4e9bAPI\u7684\u7528\u6237\u5e94\u8be5\u77e5\u9053\uff0c\u4f7f\u7528\u5b83\u4eec\u53ef\u80fd\u4f1a\u7ed5\u8fc7\u63d0\u4f9b\u5546\u9009\u62e9\u548c\u914d\u7f6e\uff0c\u4ece\u800c\u5e26\u6765\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\u3002\u8fd9\u4e0e\u7f16\u5199\u4e3a\u4f7f\u7528OpenSSL 3.0 FIPS\u6a21\u5757\u7684\u5e94\u7528\u7a0b\u5e8f\u7279\u522b\u76f8\u5173\uff0c\u5982\u4e0b\u6240\u8ff0\u3002\u5f3a\u70c8\u9f13\u52b1\u5916\u90e8\u5f15\u64ce\u7684\u521b\u5efa\u8005\u548c\u7ef4\u62a4\u8005\u91cd\u6784\u4ee3\u7801\uff0c\u4f7f\u7528\u65b0\u7684\u63d0\u4f9b\u8005API\u5c06\u5f15\u64ce\u8f6c\u6362\u4e3a\u63d0\u4f9b\u8005\uff0c\u5e76\u907f\u514d\u4f7f\u7528\u8fc7\u65f6\u7684\u65b9\u6cd5\u3002\nOpenSSL\u7248\u672c\u63a7\u5236\u65b9\u6848\u57283.0\u7248\u4e2d\u6709\u6240\u66f4\u6539\u3002\u65b0\u7684\u7248\u672c\u5316\u65b9\u6848\u5177\u6709\u4ee5\u4e0b\u683c\u5f0f\uff1a\n\u5bf9\u4e8e\u7248\u672c1.1.1\u53ca\u66f4\u4f4e\u7248\u672c\uff0c\u4e0d\u540c\u7684\u4fee\u8865\u7a0b\u5e8f\u7ea7\u522b\u7531\u53d1\u5e03\u7248\u672c\u53f7\u672b\u5c3e\u7684\u5b57\u6bcd\u8868\u793a\u3002\u8fd9\u5c06\u4e0d\u518d\u4f7f\u7528\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u8865\u4e01\u7ea7\u522b\u7531\u7248\u672c\u4e2d\u7684\u6700\u7ec8\u6570\u5b57\u6307\u793a\u3002\u7b2c\u4e8c\u4e2a(\u6b21\u8981)\u6570\u5b57\u7684\u66f4\u6539\u8868\u793a\u53ef\u80fd\u6dfb\u52a0\u4e86\u65b0\u529f\u80fd\u3002\u5177\u6709\u76f8\u540c\u4e3b\u7f16\u53f7\u7684OpenSSL\u7248\u672c\u4e0eAPI\u548cABI\u517c\u5bb9\u3002\u5982\u679c\u4e3b\u673a\u53f7\u66f4\u6539\uff0c\u5219\u4e0d\u80fd\u4fdd\u8bc1API\u548cABI\u517c\u5bb9\u6027\u3002\n\u8bc1\u4e66\u7ba1\u7406\u534f\u8bae(CMP\uff0cRFC 4210)\u7684\u5b9e\u65bd\u8fd8\u5305\u62ecCRMF(RFC 4211)\u548cHTTP\u4f20\u8f93(RFC 6712)\u3002\nlibcrypto\u4e2d\u6b63\u786e\u7684HTTP(S)\u5ba2\u6237\u7aef\uff0c\u652f\u6301GET\u548cPOST\u3001\u91cd\u5b9a\u5411\u3001\u7eaf\u6587\u672c\u548cASN.1\u7f16\u7801\u7684\u5185\u5bb9\u3001\u4ee3\u7406\u548c\u8d85\u65f6\u3002\nOpenSSL\u9519\u8bef\u4ee3\u7801\u7684\u529f\u80fd\u4ee3\u7801\u90e8\u5206\u4e0d\u518d\u76f8\u5173\uff0c\u59cb\u7ec8\u8bbe\u7f6e\u4e3a\u96f6\u3002\u76f8\u5173\u51fd\u6570\u5df2\u5f03\u7528\u3002\n\u5806\u6808\u548c\u6563\u5217\u5b8f\u5df2\u88ab\u6e05\u9664\uff0c\u56e0\u6b64\u7c7b\u578b\u5b89\u5168\u5305\u88c5\u5668\u5728\u4efb\u4f55\u5730\u65b9\u58f0\u660e\u4e00\u6b21\u5373\u53ef\u5b9e\u73b0\u3002\u6709\u5173\u5806\u6808\uff0c\u8bf7\u53c2\u9605https://www.openssl.org/docs/manmaster/man3/DEFINE_STACK_OF.html\u7684\u624b\u518c\u9875\uff0c\u5e0c\u671b\u4e00\u65e6PR\u5408\u5e76\uff0c\u5f88\u5feb\u5c31\u4f1a\u6709https://www.openssl.org/docs/manmaster/man3/DECLARE_LHASH_OF.html(\u4f46\u5728\u64b0\u5199\u672c\u6587\u65f6\u8fd8\u6ca1\u6709)\u3002\n\u6709\u5173\u5982\u4f55\u6784\u5efa\u548c\u5b89\u88c5OpenSSL 3.0\u7684\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u53d1\u884c\u7248\u9876\u90e8\u7684INSTALL.md\u6587\u4ef6\u3002\u8fd8\u8bf7\u53c2\u9605\u9002\u7528\u4e8e\u60a8\u7684\u7279\u5b9a\u5e73\u53f0\u7684\u5404\u79cd\u5e73\u53f0\u7279\u5b9a\u8bf4\u660e\u6587\u4ef6\u3002\n\u6ce8\u610f\uff1aOpenSSL 3.0 Alpha 1\u7248\u672c\u5305\u542b\u4e00\u4e2a\u5728\u53d1\u5e03\u8fc7\u7a0b\u4e2d\u5f15\u5165\u7684\u9519\u8bef\uff0c\u8be5\u9519\u8bef\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\u3002\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u53ef\u4f9b\u9009\u62e9\uff1a\n\u7f16\u8f91\u5206\u53d1\u9876\u90e8\u7684\u7248\u672c\u6587\u4ef6\u4ee5\u5220\u9664RELEASE_DATE\u884c\u4e0a\u65e5\u671f\u5468\u56f4\u7684\u5f15\u53f7\uff0c\u5373\u4f7f\u8be5\u884c\u5982\u4e0b\u6240\u793a\uff1a\n\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4eceOpenSSL 1.1.1\u5347\u7ea7\u5230OpenSSL 3.0\u5e94\u8be5\u76f8\u5bf9\u7b80\u5355\u3002\u5982\u679c\u60a8\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4f4e\u7ea7API(\u5982\u4e0a\u6240\u8ff0)\uff0c\u5219\u6700\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5f88\u53ef\u80fd\u5728\u7f16\u8bd1\u5e94\u7528\u7a0b\u5e8f\u65f6\u5f00\u59cb\u770b\u5230\u5f03\u7528\u8b66\u544a\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u67093\u4e2a\u9009\u62e9\uff1a\n1)\u5ffd\u7565\u8b66\u544a\u3002\u5b83\u4eec\u53ea\u662f\u8b66\u544a\u800c\u5df2\u3002\u4e0d\u63a8\u8350\u4f7f\u7528\u7684\u51fd\u6570\u4ecd\u7136\u5b58\u5728\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u3002\u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u4eceOpenSSL\u7684\u672a\u6765\u7248\u672c\u4e2d\u5220\u9664\u3002\n3)\u79fb\u9664\u60a8\u4f7f\u7528\u7684\u5e95\u5c42\u63a5\u53e3\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981\u91cd\u5199\u4ee3\u7801\u4ee5\u6539\u7528EVP API\u3002\n\u4eceOpenSSL 1.0.2\u5347\u7ea7\u5230OpenSSL 3.0\u53ef\u80fd\u8981\u56f0\u96be\u5f97\u591a\u3002\u9664\u4e86\u4e0a\u9762\u5173\u4e8e\u4ece1.1.1\u5347\u7ea7\u4e00\u8282\u4e2d\u8ba8\u8bba\u7684\u95ee\u9898\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u4e3b\u8981\u4e8b\u9879\u5305\u62ec\uff1a\n1)\u4eceOpenSSL 1.0.2\u5f00\u59cb\uff0c\u6784\u5efa\u548c\u5b89\u88c5\u8fc7\u7a0b\u53d1\u751f\u4e86\u91cd\u5927\u53d8\u5316\u3002\u6709\u5173\u5982\u4f55\u4e3a\u60a8\u7684\u5e73\u53f0\u6784\u5efa\u548c\u5b89\u88c5OpenSSL\u7684\u8bf4\u660e\uff0c\u8bf7\u67e5\u770b\u5b89\u88c5\u9876\u90e8\u7684\u6587\u4ef6INSTALL.md\u3002\u5982\u679c\u9002\u7528\u4e8e\u60a8\u7684\u5e73\u53f0\uff0c\u8fd8\u8981\u7b7e\u51fa\u540c\u4e00\u76ee\u5f55\u4e2d\u7684\u5404\u79cd\u6ce8\u91ca\u6587\u4ef6\u3002\n2)\u5728OpenSSL 3.0\u4e2d\uff0c\u5f88\u591a\u7ed3\u6784\u90fd\u662f\u4e0d\u900f\u660e\u7684\u3002\u7ed3\u6784\u5b9a\u4e49\u5df2\u4ece\u516c\u5171\u5934\u6587\u4ef6\u4e2d\u5220\u9664\uff0c\u5e76\u79fb\u81f3\u5185\u90e8\u5934\u6587\u4ef6\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u4e0d\u80fd\u518d\u5806\u6808\u5206\u914d\u67d0\u4e9b\u7ed3\u6784\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u5fc5\u987b\u662f\u901a\u8fc7\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u5206\u914d\u7684\u5806(\u901a\u5e38\u8fd9\u4e9b\u51fd\u6570\u540d\u6709`_new`\u540e\u7f00)\u3002\u6b64\u5916\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528&#34\uff1bsetter&34\uff1b\u6216&#34\uff1bgetter&#34\uff1b\u51fd\u6570\u6765\u8bbf\u95ee\u8fd9\u4e9b\u7ed3\u6784\u4e2d\u7684\u5b57\u6bb5\u3002\nEVP_MD_CTX*MD_CTX\uff1bMD_CTX=EVP_MD_CTX_NEW()\uff1bIF(MD_CTX==NULL)/*\u9519\u8bef*/\uff1b/*\u4f7f\u7528MD_CTX*/EVP_MD_CTX_FREE(MD_CTX)\uff1b\n3)\u6dfb\u52a0\u4e86\u5bf9TLSv1.3\u7684\u652f\u6301\uff0c\u8fd9\u5bf9SSL/TLS\u5e94\u7528\u7a0b\u5e8f\u6709\u5f88\u591a\u5f71\u54cd\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605TLS1.3\u9875\u9762\u3002\n\u6709\u5173OpenSSL\u7248\u672c1.0.2\u548c1.1.0\u4e4b\u95f4\u91cd\u5927\u66f4\u6539\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605OpenSSL 1.1.0\u66f4\u6539\u9875\u9762\u3002\nOpenSSL2.0FIPS\u5bf9\u8c61\u6a21\u5757\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u4e0b\u8f7d\uff0c\u5fc5\u987b\u5355\u72ec\u6784\u5efa\uff0c\u7136\u540e\u96c6\u6210\u5230\u4e3bOpenSSL 1.0.2\u6784\u5efa\u4e2d\u3002\u5728OpenSSL 3.0\u4e2d\uff0cFIPS\u652f\u6301\u5b8c\u5168\u96c6\u6210\u5230OpenSSL\u7684\u4e3b\u7ebf\u7248\u672c\u4e2d\uff0c\u4e0d\u518d\u9700\u8981\u5355\u72ec\u4e0b\u8f7d\u3002\u60a8\u4e0d\u9700\u8981\u91c7\u53d6\u5355\u72ec\u7684\u6784\u5efa\u6b65\u9aa4\u6765\u6dfb\u52a0FIPS\u652f\u6301-\u5b83\u662f\u9ed8\u8ba4\u6784\u5efa\u7684\u3002\u60a8\u786e\u5b9e\u9700\u8981\u91c7\u53d6\u63aa\u65bd\u6765\u786e\u4fdd\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662fOpenSSL 3.0\u4e2d\u7684FIPS\u6a21\u5757\u3002\u6709\u5173\u6b64\u914d\u7f6e\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u8bf4\u660e\u3002\n\u51fd\u6570\u8c03\u7528&#39\uff1bfips_mode()&#39\uff1b\u548c&#39\uff1bfips_mode_set()&#39\uff1b\u5df2\u4eceOpenSSL 3.0\u4e2d\u5220\u9664\u3002\u60a8\u5e94\u8be5\u91cd\u5199\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee5\u4e0d\u4f7f\u7528\u5b83\u4eec\u3002\u8bf7\u53c2\u9605\u4e0b\u9762\u5173\u4e8e\u5982\u4f55\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u4ee5\u4f7f\u7528OpenSSL 3.0\u4e2d\u7684FIPS\u6a21\u5757\u7684\u90e8\u5206\u3002\n\u4e00\u65e6\u6784\u5efa\u5e76\u5b89\u88c5\u4e86OpenSSL\uff0c\u60a8\u5c06\u9700\u8981\u91c7\u53d6\u660e\u786e\u7684\u6b65\u9aa4\u6765\u5b8c\u6210FIPS\u6a21\u5757\u7684\u5b89\u88c5(\u5982\u679c\u60a8\u5e0c\u671b\u4f7f\u7528\u5b83)\u3002OpenSSL 3.0 FIPS\u652f\u6301\u662f\u4ee5FIPS\u63d0\u4f9b\u7a0b\u5e8f\u7684\u5f62\u5f0f\u63d0\u4f9b\u7684\uff0c\u5728Unix\u4e0a\uff0c\u8be5\u63d0\u4f9b\u7a0b\u5e8f\u4f4d\u4e8e\u4e00\u4e2a`fips.so`\u6587\u4ef6\u4e2d\u3002\u5728Windows\u4e0a\uff0c\u8fd9\u5c06\u79f0\u4e3a`fips.dll`\u3002\u5b89\u88c5OpenSSL 3.0\u540e\uff0c\u6b64\u6587\u4ef6\u7684\u9ed8\u8ba4\u4f4d\u7f6e\u5728Unix\u4e0a\u4e3a&#39\uff1b/usr/local/lib/ossl-module/fips.so&#39\uff1b\uff0c\u5728Windows\u4e0a\u4e3a&#39\uff1bC\uff1a\\Program Files\\openssl\\lib\\ossl-module\\fips.dll&#39\uff1b\u3002\n\u8981\u5b8c\u6210\u5b89\u88c5\uff0c\u60a8\u9700\u8981\u8fd0\u884cfipsinstall\u547d\u4ee4\u884c\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a\n\u751f\u6210FIPS\u6a21\u5757\u914d\u7f6e\u6587\u4ef6\u8f93\u51fa\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u6a21\u5757\u7684\u4fe1\u606f\uff0c\u5982\u81ea\u68c0\u72b6\u6001\u548c\u6a21\u5757\u6821\u9a8c\u548c\u3002\nFIPS\u6a21\u5757\u5fc5\u987b\u8fd0\u884c\u81ea\u68c0\uff0c\u5e76\u5728\u8981\u4f7f\u7528FIPS\u6a21\u5757\u7684\u6bcf\u53f0\u8ba1\u7b97\u673a\u4e0a\u751f\u6210FIPS\u6a21\u5757\u914d\u7f6e\u6587\u4ef6\u8f93\u51fa\u3002\u60a8\u4e0d\u5f97\u5c06FIPS\u6a21\u5757\u914d\u7f6e\u6587\u4ef6\u8f93\u51fa\u6570\u636e\u4ece\u4e00\u53f0\u8ba1\u7b97\u673a\u590d\u5236\u5230\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u3002\n$openssl fipsinstall-out/usr/local/ssl/fipsmode.cnf-module/usr/local/lib/ossl-module/fips.so-Provider_name fips-mac_name hmac-macopt\u6458\u8981\uff1aSHA256-macopt hekey\uff1a00-Section_name fips_sect\u3002\n\u5982\u679c\u5c06OpenSSL\u5b89\u88c5\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u5219\u9700\u8981\u76f8\u5e94\u5730\u8c03\u6574\u8f93\u51fa\u548c\u6a21\u5757\u8def\u5f84\u3002\n\u4f7f\u7528OpenSSL 1.1.1\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u5927\u591a\u53ea\u80fd\u4f7f\u7528OpenSSL 3.0\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u5229\u7528OpenSSL 3.0\u63d0\u4f9b\u7684\u4e00\u4e9b\u65b0\u529f\u80fd\uff0c\u5219\u9700\u8981\u8fdb\u884c\u66f4\u6539\u3002\u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u4e86\u89e3OpenSSL 3.0\u4e2d\u5f15\u5165\u7684\u4e00\u4e9b\u65b0\u6982\u5ff5\u3002\n\u53ef\u4ee5\u5c06\u5e93\u4e0a\u4e0b\u6587\u89c6\u4e3aOpenSSL\u64cd\u4f5c\u7684\u4f5c\u7528\u57df\u3002\u6240\u6709\u529f\u80fd\u90fd\u5728\u5e93\u4e0a\u4e0b\u6587\u7684\u8303\u56f4\u5185\u8fd0\u884c\u3002\u591a\u4e2a\u5e93\u4e0a\u4e0b\u6587\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5e93\u4e0a\u4e0b\u6587\u53ef\u4ee5\u8fdb\u884c\u4e0d\u540c\u7684\u914d\u7f6e\u3002\u5e93\u4e0a\u4e0b\u6587\u7531\u65b0\u5f15\u5165\u7684openssl_ctx\u7c7b\u578b\u8868\u793a\u3002\u8bf7\u53c2\u9605\u6b64\u5904\u7684\u624b\u518c\u9875\u3002\nOpenSSL\u4e2d\u5f15\u5165\u4e86\u8bb8\u591a\u63a5\u53d7OPENSSL_CTX\u53c2\u6570\u7684\u65b0\u51fd\u6570\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f1.1.1\u4e2d\u5b58\u5728\u7684\u4e00\u4e9b\u5176\u4ed6\u51fd\u6570\u7684\u53d8\u4f53\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u5927\u81f4\u76f8\u540c-\u53ea\u662f\u5b83\u4eec\u73b0\u5728\u5728\u7ed9\u5b9a\u5e93\u4e0a\u4e0b\u6587\u7684\u8303\u56f4\u5185\u64cd\u4f5c\u3002\n\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u3002\u6b64\u5e93\u4e0a\u4e0b\u6587\u59cb\u7ec8\u5b58\u5728\uff0c\u5982\u679c\u60a8\u672a\u4ee5\u5176\u4ed6\u65b9\u5f0f\u6307\u5b9a\uff0c\u5219\u8fd9\u662f\u5c06\u4f7f\u7528\u7684\u5e93\u4e0a\u4e0b\u6587\u3002\u4efb\u4f55\u63a5\u53d7OPENSSL_CTX\u503c\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u90fd\u5c06\u63a5\u53d7\u8be5\u53c2\u6570\u7684\u503cNULL\uff0c\u4ee5\u4fbf\u5f15\u7528\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u3002\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7openssl_ctx_new()\u51fd\u6570\u663e\u5f0f\u521b\u5efa\u65b0\u6587\u4ef6\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u624b\u518c\u9875\u3002\n\u914d\u7f6e\u6587\u4ef6\u5f71\u54cd\u7ed9\u5b9a\u5e93\u4e0a\u4e0b\u6587\u3002\u5f88\u53ef\u80fd\u6b63\u5728\u4f7f\u7528\u591a\u4e2a\u5e93\u4e0a\u4e0b\u6587\uff0c\u6bcf\u4e2a\u5e93\u4e0a\u4e0b\u6587\u90fd\u914d\u7f6e\u4e86\u4e0d\u540c\u7684\u914d\u7f6e\u6587\u4ef6(\u8bf7\u53c2\u89c1\u624b\u518c\u9875\u4e0a\u63cf\u8ff0\u7684openssl_ctx_load_config()\u51fd\u6570)\u3002\n\u63d0\u4f9b\u7a0b\u5e8f\u662f\u7b97\u6cd5\u5b9e\u73b0\u7684\u5bb9\u5668\u3002\u6bcf\u5f53\u901a\u8fc7EVP API\u4f7f\u7528\u52a0\u5bc6\u7b97\u6cd5\u65f6\uff0c\u90fd\u4f1a\u9009\u62e9\u63d0\u4f9b\u8005\u3002\u5b9e\u9645\u4e0a\uff0c\u6b63\u662f\u63d0\u4f9b\u7a0b\u5e8f\u5b9e\u73b0\u5b8c\u6210\u4e86\u6240\u9700\u5de5\u4f5c\u3002\u6709\u56db\u4e2a\u63d0\u4f9b\u7a0b\u5e8f\u968fOpenSSL\u4e00\u8d77\u5206\u53d1\u3002\u5728\u672a\u6765\uff0c\u6211\u4eec\u5e0c\u671b\u7b2c\u4e09\u65b9\u5206\u53d1\u4ed6\u4eec\u81ea\u5df1\u7684\u63d0\u4f9b\u8005\uff0c\u8fd9\u4e9b\u63d0\u4f9b\u8005\u53ef\u4ee5\u52a8\u6001\u5730\u6dfb\u52a0\u5230OpenSSL\u4e2d\u3002\u5728\u8fd9\u91cc\u7684\u624b\u518c\u9875\u4e0a\u53ef\u4ee5\u627e\u5230\u6709\u5173\u7f16\u5199\u63d0\u4f9b\u7a0b\u5e8f\u7684\u6587\u6863\u3002\n\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\u3002\u5b83\u6536\u96c6\u4e86\u6240\u6709\u6807\u51c6\u7684\u5185\u7f6eOpenSSL\u7b97\u6cd5\u5b9e\u73b0\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u660e\u786e\u6307\u5b9a\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9(\u4f8b\u5982\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6216\u901a\u8fc7\u914d\u7f6e)\uff0c\u5219\u8fd9\u662f\u5c06\u4f7f\u7528\u7684\u63d0\u4f9b\u7a0b\u5e8f\u3002\u5982\u679c\u8fd8\u6ca1\u6709\u52a0\u8f7d\u5176\u4ed6\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u4ece\u63d0\u4f9b\u7a0b\u5e8f\u83b7\u53d6\u7b97\u6cd5\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u52a0\u8f7d\u3002\u5982\u679c\u5df2\u7ecf\u52a0\u8f7d\u4e86\u53e6\u4e00\u4e2a\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u5219\u4e0d\u4f1a\u81ea\u52a8\u52a0\u8f7d\u8be5\u63d0\u4f9b\u7a0b\u5e8f\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u5c06\u5176\u4e0e\u5176\u4ed6\u63d0\u4f9b\u7a0b\u5e8f\u7ed3\u5408\u4f7f\u7528\uff0c\u5219\u5fc5\u987b\u663e\u5f0f\u52a0\u8f7d\u5b83\u3002\u8fd9\u662f\u4e00\u4e2a\u5185\u7f6e\u7684\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5185\u7f6e\u4e8elibcrypto\u4e2d\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u5355\u72ec\u7684\u6a21\u5757\u5b58\u5728\u3002\n\u4f20\u7edf\u63d0\u4f9b\u7a0b\u5e8f\u3002\u8fd9\u662f\u4e0d\u518d\u5e38\u7528\u6216\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528\u7684\u9057\u7559\u7b97\u6cd5\u7684\u96c6\u5408\u3002\u4f46\u662f\uff0c\u51fa\u4e8e\u5411\u540e\u517c\u5bb9\u6027\u7684\u539f\u56e0\uff0c\u67d0\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u52a0\u8f7d\u6b64\u63d0\u4f9b\u7a0b\u5e8f\u3002\u8fd9\u53ef\u80fd\u610f\u5473\u7740\uff0c\u67d0\u4e9b\u4ece\u65e9\u671f\u7248\u672c\u7684OpenSSL\u5347\u7ea7\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u53d1\u73b0\u67d0\u4e9b\u7b97\u6cd5\u4e0d\u518d\u53ef\u7528\uff0c\u9664\u975e\u5b83\u4eec\u663e\u5f0f\u52a0\u8f7d\u65e7\u7248\u63d0\u4f9b\u7a0b\u5e8f\u3002\u4f20\u7edf\u63d0\u4f9b\u8005\u4e2d\u7684\u7b97\u6cd5\u5305\u62ecMD2\u3001MD4\u3001MDC2\u3001RMD160\u3001CAST5\u3001BF(Blowfish)\u3001IDEA\u3001SEED\u3001RC2\u3001RC4\u3001RC5\u548cDES(\u4f46\u4e0d\u5305\u62ec3DES)\u3002\nFIPS\u63d0\u4f9b\u5546\u3002\u5b83\u5305\u542b\u53ef\u4ece\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\u83b7\u5f97\u7684\u7b97\u6cd5\u5b9e\u73b0\u7684\u5b50\u96c6\u3002\u6b64\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u63d0\u4f9b\u7684\u7b97\u6cd5\u7b26\u5408FIPS\u6807\u51c6\u3002\u6b64\u63d0\u4f9b\u7a0b\u5e8f\u5c06\u901a\u8fc7FIPS140-2\u9a8c\u8bc1\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e0e\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u7684\u7b49\u6548\u7b97\u6cd5\u76f8\u6bd4\uff0c\u6b64\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u7684\u7b97\u6cd5\u5b9e\u73b0\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u7ec6\u5fae\u7684\u884c\u4e3a\u5dee\u5f02\u3002\u8fd9\u901a\u5e38\u662f\u4e3a\u4e86\u7b26\u5408FIPS\u6807\u51c6\u3002\n\u7a7a\u63d0\u4f9b\u7a0b\u5e8f\u3002\u6b64\u63d0\u4f9b\u7a0b\u5e8f\u662flibcrypto\u7684\u5185\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4e0d\u5305\u542b\u7b97\u6cd5\u5b9e\u73b0\u3002\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u81ea\u52a8\u52a0\u8f7d\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6539\u4e3a\u52a0\u8f7d\u7a7a\u63d0\u4f9b\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u975e\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u5e0c\u671b\u786e\u4fdd\u4e0d\u4f1a\u610f\u5916\u4f7f\u7528\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\uff0c\u8fd9\u4f1a\u5f88\u6709\u7528\u3002\n\u53ef\u4ee5\u5728OpenSSL\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u8981\u52a0\u8f7d\u7684\u63d0\u4f9b\u7a0b\u5e8f\u3002\u6709\u5173\u5982\u4f55\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\u4ee5\u53ca\u5982\u4f55\u81ea\u52a8\u6fc0\u6d3b\u5b83\u4eec\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64\u5904\u7684\u624b\u518c\u9875\u3002\u8fd9\u662f\u5728\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u548c\u6fc0\u6d3b\u4f20\u7edf\u63d0\u4f9b\u7a0b\u5e8f\u548c\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\u7684\u6700\u5c0f\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\u3002\nopenssl_conf=openssl_init[openssl_init]Providers=Provider_sect[Provider_sect]\u9ed8\u8ba4=default_sect\u9057\u7559=Legacy_sect[default_sect]activate=1\u3002\n\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u52a0\u8f7d\u5b83\u4eec\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u9057\u7559\u63d0\u4f9b\u7a0b\u5e8f\u52a0\u8f7d\u5230\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u5c06\u63d0\u4f9b\u7a0b\u5e8f\u663e\u5f0f\u52a0\u8f7d\u5230\u5e93\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5c06\u4e0d\u518d\u81ea\u52a8\u52a0\u8f7d\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\u3002\u56e0\u6b64\uff0c\u60a8\u901a\u5e38\u8fd8\u5e0c\u671b\u663e\u5f0f\u52a0\u8f7d\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n#include&lt\uff1bstdio.h&gt\uff1b#include&lt\uff1bstdlib.h&gt\uff1b#include&lt\uff1bopenssl/provider.h&gt\uff1bint main(Void){OSSL_Provider*Legacy\uff1bOSSL_Provider*Deflt\uff1b/*\u5c06\u591a\u4e2a\u63d0\u4f9b\u7a0b\u5e8f\u52a0\u8f7d\u5230\u9ed8\u8ba4(\u7a7a)\u5e93\u4e0a\u4e0b\u6587*/Legacy=OSSL_PROVIDER_LOAD(NULL\uff0c&#34\uff1bLegacy&34\uff1b)\uff1b\u5982\u679c(Legacy=NULL){printf(&\u3002}deflt=OSSL_PROVIDER_LOAD(NULL\uff0c&#34\uff1bDEFAULT&#34\uff1b)\uff1bIF(DEFLT==NULL){printf(&#34\uff1b\u65e0\u6cd5\u52a0\u8f7d\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\\n&#34\uff1b)\uff1bOSSL_PROVIDER_UNLOAD(\u65e7\u7248)\uff1bEXIT(EXIT_FAILURE)\uff1b}/*\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206*/OSSL_PROVIDER_UNLOAD(\u65e7\u7248)\uff1bOSSL_PROVIDER_UNLOAD(DEFLT)\uff1bEXIT(EXIT_SUCCESS)\uff1b}\n\u4e3a\u4e86\u4f7f\u7528\u52a0\u5bc6\u7b97\u6cd5(\u5982AES)\uff0c\u5fc5\u987b\u9996\u5148\u4ece\u5df2\u52a0\u8f7d\u5230\u6b63\u5728\u4f7f\u7528\u7684\u5e93\u4e0a\u4e0b\u6587\u4e2d\u7684\u53ef\u7528\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u83b7\u53d6\u8be5\u7b97\u6cd5\u7684\u5b9e\u73b0\u3002\u8fd9\u53ef\u4ee5\u9690\u5f0f\u6216\u663e\u5f0f\u5b8c\u6210\u3002\n\u4f7f\u7528\u9690\u5f0f\u83b7\u53d6\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9700\u8981\u6267\u884c\u4efb\u4f55\u7279\u6b8a\u64cd\u4f5c\u3002\u7b97\u6cd5\u5b9e\u73b0\u5c06\u7531\u76f8\u5173API\u81ea\u52a8\u83b7\u53d6\u3002\u4f8b\u5982\uff1a\nEVP_MD_CTX*mdctx\uff1bmdctx=EVP_MD_CTX_NEW()\uff1bIF(mdctx==NULL)\u8f6c\u5230\u9519\u8bef\uff1bIF(EVP_DigestInit_EX(mdctx\uff0cEVP_sha256()\uff0cNULL)\uff01=1)\u8f6c\u5230\u9519\u8bef\uff1b\n\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u521d\u59cb\u5316\u6458\u8981\u64cd\u4f5c\u4ee5\u4f7f\u7528SHA256\u7b97\u6cd5\u3002evp_DigestInit_ex()\u51fd\u6570\u5c06\u5728\u9700\u8981\u65f6\u81ea\u52a8\u4ece\u53ef\u7528\u7684\u63d0\u4f9b\u7a0b\u5e8f\u83b7\u53d6SHA256\u7b97\u6cd5\u7684\u5b9e\u73b0\u3002\u5b83\u5c06\u4f7f\u7528\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u548c\u9ed8\u8ba4\u5c5e\u6027\u67e5\u8be2\u5b57\u7b26\u4e32(\u89c1\u4e0b\u6587)\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n\u901a\u8fc7\u663e\u5f0f\u83b7\u53d6\uff0c\u5e94\u7528\u7a0b\u5e8f\u83b7\u53d6\u8981\u9884\u5148\u4f7f\u7528\u7684\u5b9e\u73b0\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9\u76f8\u5173\u7684EVP API\u3002\u4f8b\u5982\uff1a\nEVP_MD_CTX*mdctx\uff1bEVP_MD*sha256\uff1bmdctx=EVP_MD_CTX_NEW()\uff1bIF(mdctx==NULL)GOTO ERR\uff1b/**\u6b64\u5904\u5c06\u5e93CTX\u8bbe\u7f6e\u4e3aNULL\u4f1a\u5c06\u7b97\u6cd5\u4ece*\u52a0\u8f7d\u5230\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u4e2d\u7684\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u63d0\u53d6*/sha256=EVP_MD_FETCH(NULL\uff0c&#34\uff1bSHA2-256&#34\uff1b\uff0cNULL)\uff1bIF(sha256=NULL)*/sha256=EVP_MD_FETCH(NULL\uff0c&#34\uff1bSHA2-256&#34\uff1b\uff0cNULL)\uff1bIF(sha256=NULL)\u3002/*\u663e\u5f0f\u62c9\u53d6\u8fd4\u56de\u5fc5\u987b\u91ca\u653e\u7684\u52a8\u6001\u5bf9\u8c61*/EVP_MD_FREE(Sha256)\uff1b\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u5f0f\u5730\u4ece\u52a0\u8f7d\u5230\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u4e2d\u7684\u4e00\u7ec4\u53ef\u7528\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u83b7\u53d6\u4e86SHA256\u7684\u5b9e\u73b0\u3002\n\u4f7f\u7528\u663e\u5f0fFETCH\uff0c\u6211\u4eec\u53ef\u4ee5\u53e6\u5916\u63d0\u4f9b\u4e00\u4e2a\u5c5e\u6027\u67e5\u8be2\uff0c\u4ee5\u8fdb\u4e00\u6b65\u6307\u5b9a\u6211\u4eec\u5e0c\u671b\u83b7\u5f97\u7684\u5b9e\u73b0\u3002\u4f8b\u5982\uff1a\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u663e\u5f0f\u83b7\u53d6SHA256\u7b97\u6cd5\u7684FIPS\u9a8c\u8bc1\u5b9e\u73b0\u3002\u8fd9\u6837\u7684\u5b9e\u73b0\u5b58\u5728\u4e8eFIPS\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5c06FIPS\u63d0\u4f9b\u7a0b\u5e8f\u52a0\u8f7d\u5230\u9ed8\u8ba4\u5e93\u4e0a\u4e0b\u6587\u4e2d\u624d\u80fd\u6210\u529f\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0e\u6761\u4ef6\u5339\u914d\u7684\u7b97\u6cd5\u5b9e\u73b0\uff0c\u5219\u83b7\u53d6\u5c06\u5931\u8d25\u3002\n\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u63d0\u4f9b\u7a0b\u5e8f\u624b\u518c\u9875\u4e2d\u5173\u4e8e\u83b7\u53d6\u7b97\u6cd5\u7684\u90e8\u5206\uff1a[1]\u3002\n\u5982\u679c\u4e0d\u9700\u8981\u7279\u5b9a\u7684\u5c5e\u6027\u67e5\u8be2\uff0c\u5219\u53ef\u4ee5\u4e3a\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4f20\u9012NULL\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u7684\u4efb\u4f55\u7279\u6027\u67e5\u8be2\u90fd\u4f1a\u4e0e\u9ed8\u8ba4\u7279\u6027\u67e5\u8be2\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5982\u679c\u672a\u6307\u5b9a\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\uff0c\u5219\u9ed8\u8ba4\u7279\u6027\u67e5\u8be2\u4e3a\u7a7a\u3002\u4f46\u662f\uff0c\u53ef\u4ee5\u5bf9\u6b64\u8fdb\u884c\u66f4\u6539\uff0c\u4ee5\u4fbf\u6bcf\u6b21\u63d0\u53d6\u90fd\u81ea\u52a8\u7ee7\u627f\u8fd9\u4e9b\u9ed8\u8ba4\u5c5e\u6027\u3002\u9ed8\u8ba4\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u3002\u6709\u5173\u5982\u4f55\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u4e0e\u5176\u4ed6\u63d0\u4f9b\u7a0b\u5e8f\u540c\u65f6\u52a0\u8f7dFIPS\u6a21\u5757\u4e00\u8282\u3002\n\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u5c5e\u6027\u5f53\u524d\u5728OpenSSL 3.0 Alpha 1\u6216Alpha 2\u7248\u672c\u4e2d\u4e0d\u8d77\u4f5c\u7528\u3002\nOpenSSL\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u4e0eFIPS\u6a21\u5757\u7ed3\u5408\u4f7f\u7528\u3002\u54ea\u79cd\u65b9\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u5c06\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\u7684\u5177\u4f53\u60c5\u51b5\u548c\u4f60\u8bd5\u56fe\u5b9e\u73b0\u7684\u76ee\u6807\u3002\u8bf7\u6ce8\u610f\uff0c\u65e7\u51fd\u6570fips_mode()\u548cfips_mode_set()\u4e0d\u518d\u5b58\u5728\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u4f7f\u7528\u5b83\u4eec\uff0c\u5219\u5fc5\u987b\u4ece\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5220\u9664\u5b83\u4eec\u3002\n\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u6240\u6709\u4f7f\u7528OpenSSL\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ec5\u5c06FIPS\u6a21\u5757\u7528\u4e8e\u52a0\u5bc6\u7b97\u6cd5\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6765\u5b9e\u73b0\u3002\u53ea\u8981\u5e94\u7528\u7a0b\u5e8f\u662f\u6839\u636eOpenSSL 3.0\u6784\u5efa\u548c\u94fe\u63a5\u7684\uff0c\u5e76\u4e14\u4e0d\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u6216\u5176\u8bbe\u7f6e\u7684\u52a0\u8f7d\uff0c\u5219\u5b83\u4eec\u5c06\u81ea\u52a8\u5f00\u59cb\u4f7f\u7528FIPS\u6a21\u5757\uff0c\u800c\u4e0d\u9700\u8981\u8fdb\u4e00\u6b65\u66f4\u6539\u4efb\u4f55\u4ee3\u7801\u3002\n\u4e3a\u6b64\uff0c\u5fc5\u987b\u4fee\u6539\u9ed8\u8ba4\u7684OpenSSL\u914d\u7f6e\u6587\u4ef6\u3002\u6b64\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u5c06\u53d6\u51b3\u4e8e\u5e73\u53f0\u4ee5\u53ca\u6784\u5efa\u8fc7\u7a0b\u4e2d\u63d0\u4f9b\u7684\u4efb\u4f55\u9009\u9879\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u68c0\u67e5\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\uff1a\n\u6ce8\u610f\uff1a\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\u9ed8\u8ba4\u5b89\u88c5OpenSSL\u3002\u6ca1\u6709Correc\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u9519\u8bef\u3002\n..", "note_en": "OpenSSL 3.0 is the next release of OpenSSL that is currently in development. This page is intended as a collection of notes for people downloading the alpha/beta releases or who are planning to upgrade from a previous version of OpenSSL to 3.0.\n    OpenSSL 3.0 is a major release and consequently any application that currently uses an older version of OpenSSL will at the very least need to be recompiled in order to work with the new version. It is the intention that the large majority of applications will work unchanged with OpenSSL 3.0 if those applications previously worked with OpenSSL 1.1.1. However this is not guaranteed and some changes may be required in some cases. Changes may also be required if applications need to take advantage of some of the new features available in OpenSSL 3.0 such as the availability of the FIPS module.\n  In previous versions, OpenSSL was licensed under the dual  OpenSSL and SSLeay licenses (both licenses apply). From OpenSSL 3.0 this is replaced by the  Apache License v2.\n  One of the key changes from OpenSSL 1.1.1 is the introduction of the Provider concept. Providers collect together and make available algorithm implementations. With OpenSSL 3.0 it is possible to specify, either programmatically or via a config file, which providers you want to use for any given application. OpenSSL 3.0 comes with 4 different providers as standard. Over time third parties may distribute additional providers that can be plugged into OpenSSL. All algorithm implementations available via providers are accessed through the &#34;EVP&#34; set of APIs. They cannot be accessed using the &#34;low level&#34; APIs (see below).\n  OpenSSL has historically provided two sets of APIs for invoking cryptographic algorithms: the &#34;EVP&#34; APIs and the &#34;low level&#34; APIs. The EVP APIs are typically designed to work across all algorithm types. The &#34;low level&#34; APIs are targeted at a specific algorithm implementation. For example, the EVP APIs provide the functions `EVP_EncryptInit_ex`, `EVP_EncryptUpdate` and `EVP_EncryptFinal` to perform symmetric encryption. Those functions can be used with the algorithms AES, CHACHA, 3DES etc. On the other hand to do AES encryption using the low level APIs you would have to call AES specific functions such as `AES_set_encrypt_key`, `AES_encrypt`, and so on. The functions for 3DES are different.\n Use of the low level APIs has been informally discouraged by the OpenSSL development team for a long time. However in OpenSSL 3.0 this is made more formal. All such low level APIs have been deprecated. You may still  use them in your applications, but you may start to see deprecation warnings during compilation (dependent on compiler support for this). Deprecated APIs may be removed from future versions of OpenSSL so you are strongly encouraged to update your code to use the EVP APIs instead.\n  Some cryptographic algorithms that were available via the EVP APIs are now considered legacy and their use is strongly discouraged. These legacy EVP algorithms are still available in OpenSSL 3.0 but not by default. If you want to use them then you must load the legacy provider. This can be as simple as a config file change, or can be done programmatically (see below).\n  The refactoring to support Providers conflicts internally with the APIs used to support engines, including the ENGINE API and any function that creates or modifies custom &#34;METHODS&#34; (for example EVP_MD_meth_new, EVP_CIPHER_meth_new, EVP_PKEY_meth_new, RSA_meth_new, EC_KEY_METHOD_new, etc.). These functions are being deprecated in OpenSSL 3.0, and users of these APIs should know that their use can likely bypass provider selection and configuration, with unintended consequences. This is particularly relevant for applications written to use the OpenSSL 3.0 FIPS module, as detailed below.Authors and maintainers of external engines are strongly encouraged to refactor their code transforming engines into providers using the new Provider API and avoiding deprecated methods.\n  The OpenSSL versioning scheme has changed with the 3.0 release. The new versioning scheme has this format:\n  For version 1.1.1 and below different patch levels were indicated by a letter at the end of the release version number. This will no longer be used and instead the patch level is indicated by the final number in the version. A change in the second (MINOR) number indicates that new features may have been added. OpenSSL versions with the same major number are API and ABI compatible. If the major number changes then API and ABI compatibility is not guaranteed.\n  Implementation of the Certificate Management Protocol (CMP,  RFC 4210) also covering CRMF ( RFC 4211) and HTTP transfer ( RFC 6712)\n A proper HTTP(S) client in libcrypto supporting GET and POST, redirection, plain and ASN.1-encoded contents, proxies, and timeouts\n  The function code part of an OpenSSL error code is no longer relevant and is always set to zero. Related functions are deprecated.\n The STACK and HASH macro&#39;s have been cleaned up, so that the type-safe wrappers are declared everywhere and implemented once. See the manpage at  https://www.openssl.org/docs/manmaster/man3/DEFINE_STACK_OF.html for stack, and hopefully soon once the PR is merged,  https://www.openssl.org/docs/manmaster/man3/DECLARE_LHASH_OF.html (but not yet as of this writing).\n  Please refer to the INSTALL.md file in the top of the distribution for instructions on how to build and install OpenSSL 3.0. Please also refer to the various platform specific NOTES files for your specific platform.\n NOTE: The OpenSSL 3.0 alpha 1 release contains an error introduced during the release process which results in a failed compilation. There are two workarounds to choose between:\n edit the VERSION file in the top of the distribution to remove the quotes around the date on the RELEASE_DATE line, i.e. make that line look like this:\n   Upgrading to OpenSSL 3.0 from OpenSSL 1.1.1 should be relatively straight forward in most cases. The most likely area where you will encounter problems is if you have used low level APIs in your code (as discussed above). In that case you are likely to start seeing deprecation warnings when compiling your application. If this happens you have 3 options:\n 1) Ignore the warnings. They are just warnings. The deprecated functions are still present and you may still use them. However be aware that they may be removed from a future version of OpenSSL.\n  3) Remove your usage of the low level APIs. In this case you will need to rewrite your code to use the EVP APIs instead.\n   Upgrading to OpenSSL 3.0 from OpenSSL 1.0.2 is likely to be significantly more difficult. In addition to the issues discussed above in the section about upgrading from 1.1.1, the main things to be aware of are:\n 1) The build and installation procedure has changed significantly since OpenSSL 1.0.2. Check the file INSTALL.md in the top of the installation for instructions on how to build and install OpenSSL for your platform. Also checkout the various NOTES files in the same directory, as applicable for your platform.\n 2) Many structures have been made opaque in OpenSSL 3.0. The structure definitions have been removed from the public header files and moved to internal header files. In practice this means that you can no longer stack allocate some structures. Instead they must be heap allocated through some function call (typically those function names have a `_new` suffix to them). Additionally you must use &#34;setter&#34; or &#34;getter&#34; functions to access the fields within those structures.\n      EVP_MD_CTX *md_ctx;md_ctx = EVP_MD_CTX_new();if (md_ctx == NULL) /* Error */;/* Do something with the md_ctx */EVP_MD_CTX_free(md_ctx);\n 3) Support for TLSv1.3 has been added which has a number of implications for SSL/TLS applications. See the  TLS1.3 page for further details.\n More details about the breaking changes between OpenSSL versions 1.0.2 and 1.1.0 can be found on the  OpenSSL 1.1.0 Changes page.\n  The OpenSSL 2.0 FIPS Object Module was a separate download that had to be built separately and then integrated into your main OpenSSL 1.0.2 build. In OpenSSL 3.0 the FIPS support is fully integrated into the mainline version of OpenSSL and is no longer a separate download. You do not need to take separate build steps to add the FIPS support - it is built by default. You  do need to take steps to ensure that your application is  using the FIPS module in OpenSSL 3.0. See the further notes below on configuring this.\n The function calls &#39;FIPS_mode()&#39; and &#39;FIPS_mode_set()&#39; have been removed from OpenSSL 3.0. You should rewrite your application to not use them. See the sections below on how to write applications to use the FIPS Module in OpenSSL 3.0.\n  Once OpenSSL has been built and installed you will need to take explicit steps to complete the installation of the FIPS module (if you wish to use it). The OpenSSL 3.0 FIPS support is in the form of the FIPS provider which, on Unix, is in a `fips.so` file. On Windows this will be called `fips.dll`. Following installation of OpenSSL 3.0 the default location for this file is &#39;/usr/local/lib/ossl-modules/fips.so&#39; on Unix or &#39;C:\\Program Files\\OpenSSL\\lib\\ossl-modules\\fips.dll&#39; on Windows.\n To complete the installation you need to run the &#39;fipsinstall&#39; command line application. This does 2 things:\n Generates FIPS module config file output containing information about the module such as the self test status, and the module checksum\n The FIPS module  must have the self tests run, and the FIPS module config file output generated on  every machine that it is to be used on. You  must not copy the FIPS module config file output data from one machine to another.\n  $ openssl fipsinstall -out /usr/local/ssl/fipsmodule.cnf -module /usr/local/lib/ossl-modules/fips.so -provider_name fips -mac_name HMAC -macopt digest:SHA256 -macopt hexkey:00 -section_name fips_sect\n If you installed OpenSSL to a different location, you need to adjust the output and module path accordingly.\n  Applications written to work with OpenSSL 1.1.1 will mostly just work with OpenSSL 3.0. However changes will be required if you want to take advantage of some of the new features that OpenSSL 3.0 makes available. In order to do that you need to understand some new concepts introduced in OpenSSL 3.0.\n  A library context can be thought of as a &#34;scope&#34; for OpenSSL operations. All functionality operates with the scope of a library context. Multiple library contexts may exist at the same time, and they each may be configured differently. A library context is represented by the newly introduced OPENSSL_CTX type. See the man page  here.\n Many new functions have been introduced into OpenSSL that take an OPENSSL_CTX parameter. In many cases these are variants of some other function that existed in 1.1.1 and work in much the same way - except that they now operate within the scope of the given library context.\n All applications have available to them the &#34;default library context&#34;. This library context always exists and, if you don&#39;t otherwise specify one, this is the library context that will be used. Any function that takes an OPENSSL_CTX value as a parameter will accept the value NULL for that parameter in order to refer to the default library context. You can also explicitly create new ones via the OPENSSL_CTX_new() function. See the man page for further details.\n Config files affect a given library context. It is quite possible to have multiple library contexts in use, with each one having been configured with a different config file (see the OPENSSL_CTX_load_config() function described on the man page).\n  Providers are containers for algorithm implementations. Whenever a cryptographic algorithm is used via the EVP APIs a provider is selected. It is that provider implementation that actually does the required work. There are four providers distributed with OpenSSL. In the future we expect third parties to distribute their own providers which can be added to OpenSSL dynamically. Documentation about writing providers is available on the man page  here.\n  The default provider. This collects together all of the standard built-in OpenSSL algorithm implementations. If an application doesn&#39;t specify anything else explicitly (e.g. in the application or via config), then this is the provider that will be used. It is loaded automatically the first time that we try to get an algorithm from a provider if no other provider has been loaded yet. If another provider has already been loaded then it won&#39;t be loaded automatically. Therefore if you want to use it in conjunction with other providers then you must load it explicitly. This is a &#34;built-in&#34; provider which means that it is built into libcrypto and does not exist as a separate standalone module.\n The legacy provider. This is a collection of legacy algorithms that are either no longer in common use or strongly discouraged from use. However some applications may need to use these algorithms for backwards compatibility reasons. This provider is NOT loaded by default. This may mean that some applications upgrading from earlier versions of OpenSSL may find that some algorithms are no longer available unless they load the legacy provider explicitly. Algorithms in the legacy provider include MD2, MD4, MDC2, RMD160, CAST5, BF (Blowfish), IDEA, SEED, RC2, RC4, RC5 and DES (but not 3DES).\n The FIPS provider. This contains a sub-set of the algorithm implementations available from the default provider. Algorithms available in this provider conform to FIPS standards. It is intended that this provider will be FIPS140-2 validated. In some cases there may be minor behavioural differences between algorithm implementations in this provider compared to the equivalent algorithm in the default provider. This is typically in order to conform to FIPS standards.\n The null provider. This provider is &#34;built-in&#34; to libcrypto and contains no algorithm implementations. In order to guarantee that the default provider is not automatically loaded, the null provider can be loaded instead. This can be useful if you are using non-default library contexts and want to ensure that the default library context is never used &#34;by accident&#34;.\n Providers to be loaded can be specified in the OpenSSL config file. See the man page  herefor information about how to configure providers via the config file, and how to automatically activate them.This is a minimal config file example to load and activate both the legacy and the default provider in the default library context.\n openssl_conf = openssl_init [openssl_init] providers = provider_sect [provider_sect] default = default_sect legacy = legacy_sect [default_sect] activate = 1 [legacy_sect] activate = 1\n It is also possible to load them programmatically. For example you can load the legacy provider into the default library context as shown below. Note that once you have explicitly loaded a provider into the library context the default provider will no longer be automatically loaded. Therefore you will often also want to explicitly load the default provider, as is done here:\n #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;openssl/provider.h&gt; int main(void) { OSSL_PROVIDER *legacy; OSSL_PROVIDER *deflt; /* Load Multiple providers into the default (NULL) library context */ legacy = OSSL_PROVIDER_load(NULL, &#34;legacy&#34;); if (legacy == NULL) { printf(&#34;Failed to load Legacy provider\\n&#34;); exit(EXIT_FAILURE); } deflt = OSSL_PROVIDER_load(NULL, &#34;default&#34;); if (deflt == NULL) { printf(&#34;Failed to load Default provider\\n&#34;); OSSL_PROVIDER_unload(legacy); exit(EXIT_FAILURE); } /* Rest of application */ OSSL_PROVIDER_unload(legacy); OSSL_PROVIDER_unload(deflt); exit(EXIT_SUCCESS); }\n  In order to use a cryptographic algorithm (such as AES) then an implementation for it must first be &#34;fetched&#34; from the available providers that have been loaded into the library context being used. This can be done either implicitly or explicitly.\n With implicit fetching the application does not need to do anything special. Algorithms implementations will be fetched automatically by the relevant APIs. For example:\n EVP_MD_CTX *mdctx; mdctx = EVP_MD_CTX_new(); if (mdctx == NULL) goto err; if (EVP_DigestInit_ex(mdctx, EVP_sha256(), NULL)\u00a0!= 1) goto err;\n In this code we are initialising a digest operation to use the SHA256 algorithm. The EVP_DigestInit_ex() function will automatically fetch an implementation of the SHA256 algorithm from the available providers when it needs to. It will do so using the default library context and the default property query string (see below).\n With explicit fetching an application fetches the implementation to be used up front, and then passes that to the relevant EVP API. For example:\n EVP_MD_CTX *mdctx; EVP_MD *sha256; mdctx = EVP_MD_CTX_new(); if (mdctx == NULL) goto err; /* * Setting the library ctx to NULL here fetches the algorithm from the providers loaded * into the default library context */ sha256 = EVP_MD_fetch(NULL, &#34;SHA2-256&#34;, NULL); if (sha256 == NULL) goto err; if (EVP_DigestInit_ex(mdctx, sha256, NULL)\u00a0!= 1) goto err; /* Explicit fetches return a dynamic object that must be freed */ EVP_MD_free(sha256);\n In this example we have explicitly fetched an implementation of SHA256 from the set of available providers loaded into the default library context.\n With an explicit fetch we can additionally supply a property query to further specify which implementation we wish to obtain. For example:\n  Here we are explicitly fetching a FIPS validated implementation of the SHA256 algorithm. Such an implementation exists in the FIPS provider, so we would need to have ensured that the FIPS provider was loaded into the default library context in order for this to be successful. If no algorithm implementation that matches the criteria can be located then the fetch will fail.\n See the section on fetching algorithms in the provider man page for further details:  [1].\n If no specific property query is required then NULL can be passed for the last argument. In any case any supplied property query is combined with the default property query. If nothing else is specified then the default property query is empty. However this can be changed so that every fetch automatically inherits these default properties. Default properties can either be set programmatically or via a config file. See the section  Loading the FIPS module at the same time as other providers for an example of how to do this.\n Note that default properties are not currently functional in the OpenSSL 3.0 alpha 1 or alpha 2 releases.\n  There are a number of different ways that OpenSSL can be used in conjunction with the FIPS module. Which is the correct approach to use will depend on your own specific circumstances and what you are attempting to achieve. Note that the old functions FIPS_mode() and FIPS_mode_set() are no longer present so you must remove them from your application if you use them.\n  One simple approach is to cause all applications that are using OpenSSL to only use the FIPS module for cryptographic algorithms by default.\n This approach can be done purely via configuration. As long as applications are built and linked against OpenSSL 3.0 and do not override the loading of the default config file or its settings then they will automatically start using the FIPS module without the need for any further code changes.\n To do this the default OpenSSL config file will have to be modified. The location of this config file will depend on the platform, and any options that were given during the build process. You can check the location of the config file by running this command:\n  Caution: Many Operating Systems install OpenSSL by default. It is a common error to not have the correc\n......", "posttime": "2020-05-29 10:03:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "openssl", "title": "OpenSSL 3.0", "title_en": "OpenSSL 3.0", "transed": 1, "url": "https://wiki.openssl.org/index.php/OpenSSL_3.0", "via": "", "real_tags": ["openssl"]}, {"category": "", "categoryclass": "", "imagename": "5d7b448d74f5680ab8739edcd3634074.png", "infoid": 1004187, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u7684\u5de5\u4f5c\u663e\u793a\uff0c\u901a\u8fc7\u5728\u5927\u91cf\u6587\u672c\u8bed\u6599\u5e93\u4e0a\u8fdb\u884c\u9884\u5148\u57f9\u8bad\uff0c\u7136\u540e\u5bf9\u7279\u5b9a\u4efb\u52a1\u8fdb\u884c\u5fae\u8c03\uff0c\u5728\u8bb8\u591aNLP\u4efb\u52a1\u548c\u57fa\u51c6\u65b9\u9762\u53d6\u5f97\u4e86\u5b9e\u8d28\u6027\u8fdb\u5c55\u3002\u867d\u7136\u8fd9\u79cd\u65b9\u6cd5\u5728\u4f53\u7cfb\u7ed3\u6784\u4e0a\u901a\u5e38\u4e0e\u4efb\u52a1\u65e0\u5173\uff0c\u4f46\u5b83\u4ecd\u7136\u9700\u8981\u6570\u5343\u6216\u6570\u4e07\u4e2a\u793a\u4f8b\u7684\u7279\u5b9a\u4e8e\u4efb\u52a1\u7684\u5fae\u8c03\u6570\u636e\u96c6\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4eba\u7c7b\u901a\u5e38\u53ea\u9700\u51e0\u4e2a\u4f8b\u5b50\u6216\u7b80\u5355\u7684\u6307\u4ee4\u5c31\u80fd\u5b8c\u6210\u4e00\u9879\u65b0\u7684\u8bed\u8a00\u4efb\u52a1-\u8fd9\u662f\u76ee\u524d\u7684NLP\u7cfb\u7edf\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4ecd\u7136\u96be\u4ee5\u505a\u5230\u7684\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u6269\u5c55\u8bed\u8a00\u6a21\u578b\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u4e0e\u4efb\u52a1\u65e0\u5173\u7684\u3001\u4e0d\u592a\u53ef\u80fd\u5b9e\u73b0\u7684\u6027\u80fd\uff0c\u6709\u65f6\u751a\u81f3\u8fbe\u5230\u4e86\u4e0e\u4ee5\u524d\u6700\u5148\u8fdb\u7684\u5fae\u8c03\u65b9\u6cd5\u7684\u7ade\u4e89\u529b\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u8bad\u7ec3\u4e86GPT-3\uff0c\u4e00\u4e2a\u67091750\u4ebf\u4e2a\u53c2\u6570\u7684\u81ea\u56de\u5f52\u8bed\u8a00\u6a21\u578b\uff0c\u6bd4\u4ee5\u524d\u7684\u4efb\u4f55\u975e\u7a00\u758f\u8bed\u8a00\u6a21\u578b\u90fd\u591a\u4e8610\u500d\uff0c\u5e76\u6d4b\u8bd5\u4e86\u5b83\u5728\u5c11\u955c\u5934\u73af\u5883\u4e0b\u7684\u6027\u80fd\u3002\u5bf9\u4e8e\u6240\u6709\u4efb\u52a1\uff0cGPT-3\u5728\u6ca1\u6709\u4efb\u4f55\u6e10\u53d8\u66f4\u65b0\u6216\u5fae\u8c03\u7684\u60c5\u51b5\u4e0b\u5e94\u7528\uff0c\u4efb\u52a1\u548c\u5c11\u91cf\u6f14\u793a\u5b8c\u5168\u901a\u8fc7\u4e0e\u6a21\u578b\u7684\u6587\u672c\u4ea4\u4e92\u6307\u5b9a\u3002GPT-3\u5728\u8bb8\u591aNLP\u6570\u636e\u96c6\u4e0a\u90fd\u53d6\u5f97\u4e86\u5f88\u597d\u7684\u6027\u80fd\uff0c\u5305\u62ec\u7ffb\u8bd1\u3001\u95ee\u7b54\u548c\u5b8c\u5f62\u586b\u7a7a\u4efb\u52a1\uff0c\u4ee5\u53ca\u4e00\u4e9b\u9700\u8981\u5373\u65f6\u63a8\u7406\u6216\u9886\u57df\u8c03\u6574\u7684\u4efb\u52a1\uff0c\u5982\u89e3\u4e71\u5355\u8bcd\u3001\u5728\u53e5\u5b50\u4e2d\u4f7f\u7528\u65b0\u8bcd\u6216\u6267\u884c3\u4f4d\u6570\u7b97\u672f\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u786e\u5b9a\u4e86GPT-3\u5728\u5c11\u6570\u60c5\u51b5\u4e0b\u5b66\u4e60\u4ecd\u7136\u56f0\u96be\u7684\u4e00\u4e9b\u6570\u636e\u96c6\uff0c\u4ee5\u53caGPT-3\u5728\u5927\u578b\u7f51\u7edc\u8bed\u6599\u5e93\u4e0a\u9762\u4e34\u7684\u65b9\u6cd5\u8bba\u95ee\u9898\u3002\u6700\u540e\uff0c\u6211\u4eec\u53d1\u73b0GPT-3\u53ef\u4ee5\u751f\u6210\u4eba\u7c7b\u8bc4\u4ef7\u8005\u96be\u4ee5\u533a\u5206\u7684\u65b0\u95fb\u6587\u7ae0\u6837\u672c\u3002\u6211\u4eec\u8ba8\u8bba\u4e86\u8fd9\u4e00\u53d1\u73b0\u548cGPT-3\u603b\u4f53\u4e0a\u7684\u66f4\u5e7f\u6cdb\u7684\u793e\u4f1a\u5f71\u54cd\u3002\n175b_samples.jsonl-\u6765\u81eaGPT-3(p=.85\uff0ct=1)\u7684\u65e0\u6761\u4ef6\u3001\u672a\u8fc7\u6ee4\u76842048\u4e2a\u4ee4\u724c\u6837\u672c\u3002\u5185\u5bb9\u8b66\u544a\uff1aGPT-3\u6839\u636e\u6765\u81eaWeb\u7684\u4efb\u610f\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u6b64\u53ef\u80fd\u5305\u542b\u653b\u51fb\u6027\u5185\u5bb9\u548c\u8bed\u8a00\u3002\noveroverfrequency.md-13\u514b\u7684\u6837\u672c\u5728\u6211\u4eec\u7684\u8bad\u7ec3\u6570\u636e\u548c\u57fa\u51c6\u4e4b\u95f4\u91cd\u53e0\uff0c\u7531\u8bad\u7ec3\u96c6\u4e2d\u7684\u9891\u7387\u9009\u62e9\u3002\n@\u6587\u7ae0{brown2020language\uff0ctitle={\u8bed\u8a00\u6a21\u578b\u662f\u5c11\u6570\u5b66\u4e60\u8005}\uff0c\u4f5c\u8005={Tom B.Brown\u548cBenjamin Mann\uff0cNick Ryder\uff0cMelanie Subbiah\uff0cJared Kaplan\uff0cPrafulla Dhariwal\uff0cArvind Neelakantan\uff0cPranav Shyam\uff0cGirish Sastry\uff0cAmanda Askell\u548cSandhini Agarwal\uff0cAriel Herbert-Voss\uff0cGretchen Krueger\u548cTom Henighan\u3002ArchivePrefix={arxiv}\uff0cprimary Class={cs.CL}}", "note_en": "Recent work has demonstrated substantial gains on many NLP tasks and benchmarks by pre-training on a large corpus of text followed by fine-tuning on a specific task. While typically task-agnostic in architecture, this method still requires task-specific fine-tuning datasets of thousands or tens of thousands of examples. By contrast, humans can generally perform a new language task from only a few examples or from simple instructions \u2013 something which current NLP systems still largely struggle to do. Here we show that scaling up language models greatly improves task-agnostic, few-shot performance, sometimes even reaching competitiveness with prior state-of-the-art fine-tuning approaches. Specifically, we train GPT-3, an autoregressive language model with 175 billion parameters, 10x more than any previous non-sparse language model, and test its performance in the few-shot setting. For all tasks, GPT-3 is applied without any gradient updates or fine-tuning, with tasks and few-shot demonstrations specified purely via text interaction with the model. GPT-3 achieves strong performance on many NLP datasets, including translation, question-answering, and cloze tasks, as well as several tasks that require on-the-fly reasoning or domain adaptation, such as unscrambling words, using a novel word in a sentence, or performing 3-digit arithmetic. At the same time, we also identify some datasets where GPT-3&#39;s few-shot learning still struggles, as well as some datasets where GPT-3 faces methodological issues related to training on large web corpora. Finally, we find that GPT-3 can generate samples of news articles which human evaluators have difficulty distinguishing from articles written by humans. We discuss broader societal impacts of this finding and of GPT-3 in general.\n  175b_samples.jsonl - Unconditional, unfiltered 2048 token samples from GPT-3 with p=.85, t=1.\u3000 CONTENT WARNING: GPT-3 was trained on arbitrary data from the web, so may contain offensive content and language.\n  overlap_frequency.md - Samples of 13-gram overlaps between our training data and benchmarks, selected by frequency in the training set.\n  @article{brown2020language, title={Language Models are Few-Shot Learners}, author={Tom B. Brown and Benjamin Mann and Nick Ryder and Melanie Subbiah and Jared Kaplan and Prafulla Dhariwal and Arvind Neelakantan and Pranav Shyam and Girish Sastry and Amanda Askell and Sandhini Agarwal and Ariel Herbert-Voss and Gretchen Krueger and Tom Henighan and Rewon Child and Aditya Ramesh and Daniel M. Ziegler and Jeffrey Wu and Clemens Winter and Christopher Hesse and Mark Chen and Eric Sigler and Mateusz Litwin and Scott Gray and Benjamin Chess and Jack Clark and Christopher Berner and Sam McCandlish and Alec Radford and Ilya Sutskever and Dario Amodei}, year={2020}, eprint={2005.14165}, archivePrefix={arXiv}, primaryClass={cs.CL}}", "posttime": "2020-05-29 10:02:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u8a00,language,\u4efb\u52a1", "title": "GPT-3\uff1a\u8bed\u8a00\u6a21\u578b\u662f\u5c11\u6709\u7684\u5b66\u4e60\u8005", "title_en": "GPT-3: Language Models Are Few-Shot Learners", "transed": 1, "url": "https://github.com/openai/gpt-3", "via": "", "real_tags": ["\u8bed\u8a00", "language", "\u4efb\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004186, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u6700\u8fd1\u7684\u5de5\u4f5c\u8868\u660e\uff0c\u901a\u8fc7\u5728\u5927\u91cf\u6587\u672c\u8bed\u6599\u5e93\u4e0a\u8fdb\u884c\u9884\u57f9\u8bad\uff0c\u7136\u540e\u9488\u5bf9\u7279\u5b9a\u4efb\u52a1\u8fdb\u884c\u5fae\u8c03\uff0c\u5728\u8bb8\u591aNLP\u4efb\u52a1\u548c\u57fa\u51c6\u65b9\u9762\u90fd\u53d6\u5f97\u4e86\u5b9e\u8d28\u6027\u8fdb\u5c55\u3002\u867d\u7136\u8fd9\u79cd\u65b9\u6cd5\u5728\u4f53\u7cfb\u7ed3\u6784\u4e0a\u901a\u5e38\u4e0e\u4efb\u52a1\u65e0\u5173\uff0c\u4f46\u5b83\u4ecd\u7136\u9700\u8981\u6570\u5343\u6216\u6570\u4e07\u4e2a\u793a\u4f8b\u7684\u7279\u5b9a\u4e8e\u4efb\u52a1\u7684\u5fae\u8c03\u6570\u636e\u96c6\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4eba\u7c7b\u901a\u5e38\u53ea\u9700\u51e0\u4e2a\u4f8b\u5b50\u6216\u7b80\u5355\u7684\u6307\u4ee4\u5c31\u80fd\u5b8c\u6210\u4e00\u9879\u65b0\u7684\u8bed\u8a00\u4efb\u52a1--\u8fd9\u662f\u76ee\u524d\u7684NLP\u7cfb\u7edf\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4ecd\u7136\u96be\u4ee5\u505a\u5230\u7684\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u6269\u5c55\u4e0a\u884c\u8bed\u8a00\u6a21\u578b\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u4e0e\u4efb\u52a1\u65e0\u5173\u7684\u3001\u6781\u5c11\u7684\u6027\u80fd\uff0c\u6709\u65f6\u751a\u81f3\u8fbe\u5230\u4e86\u4e0e\u5148\u524d\u6700\u5148\u8fdb\u7684\u5fae\u8c03\u65b9\u6cd5\u7684\u7ade\u4e89\u529b\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u8bad\u7ec3\u4e86GPT-3\uff0c\u4e00\u4e2a\u67091750\u4ebf\u4e2a\u53c2\u6570\u7684\u81ea\u56de\u5f52\u8bed\u8a00\u6a21\u578b\uff0c\u6bd4\u4ee5\u524d\u7684\u4efb\u4f55\u975e\u7a00\u758f\u8bed\u8a00\u6a21\u578b\u90fd\u591a\u4e8610\u500d\uff0c\u5e76\u6d4b\u8bd5\u4e86\u5b83\u5728\u5c11\u5c04\u60c5\u51b5\u4e0b\u7684\u6027\u80fd\u3002\u5bf9\u4e8e\u6240\u6709\u4efb\u52a1\uff0cGPT-3\u5728\u6ca1\u6709\u4efb\u4f55\u68af\u5ea6\u66f4\u65b0\u6216\u5fae\u8c03\u7684\u60c5\u51b5\u4e0b\u5e94\u7528\uff0c\u4efb\u52a1\u548c\u5c11\u91cf\u6f14\u793a\u5b8c\u5168\u901a\u8fc7\u4e0e\u6a21\u578b\u7684\u6587\u672c\u4ea4\u4e92\u6307\u5b9a\u3002GPT-3\u5728\u8bb8\u591aNLP\u6570\u636e\u96c6\u4e0a\u90fd\u53d6\u5f97\u4e86\u5f88\u597d\u7684\u6027\u80fd\uff0c\u5305\u62ec\u7ffb\u8bd1\u3001\u95ee\u7b54\u548c\u5b8c\u5f62\u586b\u7a7a\u4efb\u52a1\uff0c\u4ee5\u53ca\u4e00\u4e9b\u9700\u8981\u5373\u65f6\u63a8\u7406\u6216\u9886\u57df\u8c03\u6574\u7684\u4efb\u52a1\uff0c\u5982\u89e3\u4e71\u5355\u8bcd\u3001\u5728\u53e5\u5b50\u4e2d\u4f7f\u7528\u65b0\u8bcd\u6216\u6267\u884c3\u4f4d\u6570\u7b97\u672f\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u786e\u5b9a\u4e86\u4e00\u4e9bGPT-3\u7684\u5c11\u673a\u4f1a\u5b66\u4e60\u4ecd\u7136\u56f0\u96be\u7684\u6570\u636e\u96c6\uff0c\u4ee5\u53caGPT-3\u5728\u5927\u578b\u7f51\u7edc\u8bed\u6599\u5e93\u4e0a\u9762\u4e34\u7684\u65b9\u6cd5\u8bba\u95ee\u9898\u3002\u6700\u540e\uff0c\u6211\u4eec\u53d1\u73b0GPT-3\u53ef\u4ee5\u751f\u6210\u4eba\u7c7b\u8bc4\u4ef7\u8005\u96be\u4ee5\u533a\u5206\u7684\u65b0\u95fb\u6587\u7ae0\u6837\u672c\u3002\u6211\u4eec\u8ba8\u8bba\u4e86\u8fd9\u4e00\u53d1\u73b0\u7684\u66f4\u5e7f\u6cdb\u7684\u793e\u4f1a\u5f71\u54cd\uff0c\u4ee5\u53caGPT-3\u7684\u4e00\u822c\u5f71\u54cd\u3002", "note_en": "Download PDF  Abstract: Recent work has demonstrated substantial gains on many NLP tasks andbenchmarks by pre-training on a large corpus of text followed by fine-tuning ona specific task. While typically task-agnostic in architecture, this methodstill requires task-specific fine-tuning datasets of thousands or tens ofthousands of examples. By contrast, humans can generally perform a new languagetask from only a few examples or from simple instructions - something whichcurrent NLP systems still largely struggle to do. Here we show that scaling uplanguage models greatly improves task-agnostic, few-shot performance, sometimeseven reaching competitiveness with prior state-of-the-art fine-tuningapproaches. Specifically, we train GPT-3, an autoregressive language model with175 billion parameters, 10x more than any previous non-sparse language model,and test its performance in the few-shot setting. For all tasks, GPT-3 isapplied without any gradient updates or fine-tuning, with tasks and few-shotdemonstrations specified purely via text interaction with the model. GPT-3achieves strong performance on many NLP datasets, including translation,question-answering, and cloze tasks, as well as several tasks that requireon-the-fly reasoning or domain adaptation, such as unscrambling words, using anovel word in a sentence, or performing 3-digit arithmetic. At the same time,we also identify some datasets where GPT-3&#39;s few-shot learning still struggles,as well as some datasets where GPT-3 faces methodological issues related totraining on large web corpora. Finally, we find that GPT-3 can generate samplesof news articles which human evaluators have difficulty distinguishing fromarticles written by humans. We discuss broader societal impacts of this findingand of GPT-3 in general.", "posttime": "2020-05-29 10:02:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,brown,\u4efb\u52a1", "title": "\u201cGPT-3\uff1a\u8bed\u8a00\u6a21\u578b\u662f\u5c11\u6709\u7684\u5b66\u4e60\u8005\u201d\uff0cBrown\u7b49\u4eba\u30022020(OpenAI)", "title_en": "\u201cGPT-3: Language Models Are Few-Shot Learners\u201d, Brown et al. 2020 (OpenAI)", "transed": 1, "url": "https://arxiv.org/abs/2005.14165", "via": "", "real_tags": ["2020", "brown", "\u4efb\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "7ba293785210f22723e14e58f1921c63.jpg", "infoid": 1004184, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df(American Civil Liberties Union)\u6b63\u5728\u8d77\u8bc9\u6709\u4e89\u8bae\u7684\u9762\u90e8\u8bc6\u522b\u516c\u53f8Clearview AI\u8fdd\u53cd\u4f0a\u5229\u8bfa\u4f0a\u5dde\u751f\u7269\u8bc6\u522b\u4fe1\u606f\u9690\u79c1\u6cd5(BIPA)\uff0c\u6307\u63a7\u8be5\u516c\u53f8\u5728\u4f0a\u5229\u8bfa\u4f0a\u5dde\u516c\u6c11\u4e0d\u77e5\u60c5\u6216\u672a\u7ecf\u4ed6\u4eec\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u975e\u6cd5\u6536\u96c6\u548c\u5b58\u50a8\u6570\u636e\uff0c\u7136\u540e\u5c06\u5176\u6280\u672f\u4f7f\u7528\u6743\u51fa\u552e\u7ed9\u6267\u6cd5\u90e8\u95e8\u548c\u79c1\u4eba\u516c\u53f8\u3002\u5b8c\u6574\u7684\u6295\u8bc9\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\n\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df(ACLU)\u5f8b\u5e08\u5185\u68ee\u00b7\u5f17\u91cc\u5fb7\u00b7\u97e6\u65af\u52d2(Nathan Freed Wessler)\u5728\u4e00\u7bc7\u6982\u8ff0\u8bc9\u8bbc\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u5199\u9053\uff1a\u201c\u5728\u516c\u4f17\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5bb6\u516c\u53f8\u5411\u79c1\u4eba\u516c\u53f8\u3001\u8b66\u5bdf\u3001\u8054\u90a6\u673a\u6784\u548c\u5bcc\u4eba\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u5e9e\u5927\u7684\u9762\u90e8\u6307\u7eb9\u6570\u636e\u5e93\uff0c\u5141\u8bb8\u4ed6\u4eec\u4f7f\u7528\u4eba\u8138\u8bc6\u522b\u6280\u672f\u79d8\u5bc6\u8ddf\u8e2a\u5e76\u7784\u51c6\u4efb\u4f55\u4ed6\u4eec\u60f3\u8981\u7684\u4eba\u3002\u201d\u201c\u90a3\u5bb6\u516c\u53f8\u5c31\u662fClearview AI\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u5236\u6b62\uff0c\u5b83\u5c06\u7ec8\u7ed3\u6211\u4eec\u6240\u77e5\u7684\u9690\u79c1\u3002\u201d\n\u201c\u90a3\u5bb6\u516c\u53f8\u5c31\u662fClearview AI\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u5236\u6b62\uff0c\u5b83\u5c06\u7ec8\u7ed3\u6211\u4eec\u6240\u77e5\u7684\u9690\u79c1\u3002\u201d\nClearview AI\u5728\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u58f0\u540d\u9e4a\u8d77\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u5a92\u4f53\u62a5\u9053\uff0c\u5305\u62ec\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b(New York Times)1\u6708\u4efd\u7684\u4e00\u9879\u9ad8\u8c03\u8c03\u67e5\uff0c\u8c03\u67e5\u663e\u793a\uff0cClearview AI\u7684\u6280\u672f\u975e\u5e38\u51c6\u786e\uff0c\u5e76\u5728\u6267\u6cd5\u673a\u6784\u548c\u79c1\u8425\u90e8\u95e8\u516c\u53f8\u4e2d\u5f97\u5230\u5e7f\u6cdb\u4f7f\u7528\u3002\u8be5\u516c\u53f8\u5de5\u5177\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u662f\u56e0\u4e3aClearview\u8fdd\u53cd\u4e86\u8fd9\u4e9b\u5e73\u53f0\u7684\u89c4\u5219\uff0c\u4ece\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u4e0a\u6293\u53d6\u4e86\u7167\u7247\u548c\u5176\u4ed6\u6570\u636e\uff0c\u4ea7\u751f\u4e86\u4e00\u4e2a\u8d85\u8fc730\u4ebf\u5f20\u56fe\u7247\u7684\u6570\u636e\u5e93\uff0c\u7136\u540e\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u8bad\u7ec3\u7684\u590d\u6742\u7b97\u6cd5\u5c06\u8fd9\u4e9b\u56fe\u7247\u4e0e\u4e0a\u4f20\u7684\u7167\u7247\u8fdb\u884c\u5339\u914d\u3002\n\u5728\u8fc7\u53bb\u7684\u4e94\u4e2a\u6708\u91cc\uff0c\u79d1\u6280\u516c\u53f8\u5411Clearview\u53d1\u51fa\u4e86\u65e0\u6570\u7684\u505c\u6b62\u4ee4\uff0c\u4f46\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u8be5\u516c\u53f8\u662f\u5426\u9075\u5b88\u4e86\u547d\u4ee4\uff0c\u5220\u9664\u4e86\u4ece\u516c\u5171\u793e\u4ea4\u7f51\u7edc\u9875\u9762\u548c\u5e16\u5b50\u4e2d\u7a83\u53d6\u7684\u6570\u636e\u3002\u8be5\u516c\u53f8\u5bf9\u6279\u8bc4\u7684\u56de\u5e94\u662f\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5c06\u5176\u5de5\u5177\u63d0\u4f9b\u7ed9\u516c\u4f17\u4f9b\u4e2a\u4eba\u4f7f\u7528\uff0c\u6700\u8fd1\u8fd8\u8868\u793a\uff0c\u5c06\u505c\u6b62\u5411\u79c1\u8425\u516c\u53f8\u51fa\u552e\u5176\u6280\u672f\uff0c\u53ea\u4e13\u6ce8\u4e8e\u6267\u6cd5\u3002\u7136\u800c\uff0c\u8bb8\u591a\u5a92\u4f53\u62a5\u9053\u53d1\u73b0\uff0cClearview\u5c06\u5176\u4ea7\u54c1\u63d0\u4f9b\u7ed9\u6295\u8d44\u8005\u3001\u77e5\u540d\u9ad8\u7ba1\u548c\u5176\u4ed6\u4e2a\u4eba\uff0c\u4f5c\u4e3a\u63a8\u5e7f\u8be5\u4ea7\u54c1\u7684\u8bd5\u7528\u671f\u7684\u4e00\u90e8\u5206\uff0c\u6279\u8bc4\u4eba\u58eb\u62c5\u5fc3\u5176\u9762\u90e8\u8bc6\u522b\u7cfb\u7edf\u662f\u7316\u7357\u4fb5\u72af\u6c11\u6743\u7684\u57fa\u7840\u3002\nClearview\u5728\u6211\u4eec\u4e0d\u77e5\u60c5\u6216\u672a\u7ecf\u6211\u4eec\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u5efa\u7acb\u4e86\u6570\u5341\u4ebf\u4e2a\u9762\u90e8\u6307\u7eb9\u7684\u6d77\u91cf\u6570\u636e\u5e93\uff0c\u5236\u9020\u4e86\u6211\u4eec\u957f\u671f\u4ee5\u6765\u62c5\u5fc3\u7684\u5669\u68a6\u573a\u666f\uff0c\u5e76\u8d8a\u8fc7\u4e86\u8bb8\u591a\u516c\u53f8\u751a\u81f3\u62d2\u7edd\u5c1d\u8bd5\u7684\u9053\u5fb7\u754c\u9650\u3002\u636e\u6211\u4eec\u6240\u77e5\uff0c\u7f8e\u56fd\u653f\u5e9c\u6216\u4efb\u4f55\u4e00\u5bb6\u7f8e\u56fd\u516c\u53f8\u90fd\u6ca1\u6709\u6c47\u7f16\u8fc7\u5982\u6b64\u5e9e\u5927\u7684\u751f\u7269\u8bc6\u522b\u5b9d\u5e93\u3002\u201c\u97e6\u65af\u52d2\u89e3\u91ca\u8bf4\u3002\u201c\u96ea\u4e0a\u52a0\u971c\u7684\u662f\uff0cClearview\u51fa\u552e\u4e00\u6b3e\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5141\u8bb8\u5176\u5ba2\u6237-\u751a\u81f3\u662f\u90a3\u4e9b\u8bd5\u7528\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u5ba2\u6237-\u4e0a\u4f20\u4e00\u5f20\u672a\u77e5\u8005\u7684\u7167\u7247\uff0c\u5e76\u7acb\u5373\u6536\u5230\u4e00\u7ec4\u5339\u914d\u7684\u7167\u7247\u3002\u201d\n\u6253\u51fbClearview\u53ef\u80fd\u88ab\u8bc1\u660e\u6709\u6548\u7684\u884c\u4e3a\u7684\u4e00\u4e2a\u9014\u5f84\u662fBIPA\uff0c\u8fd9\u662f\u4f0a\u5229\u8bfa\u4f0a\u5dde\u7684\u9690\u79c1\u6cd5\uff0c\u4e5f\u662f\u7f8e\u56fd\u4ec5\u6709\u7684\u51e0\u9879\u4fdd\u62a4\u9762\u90e8\u8bc6\u522b\u6570\u636e\u4e0d\u88ab\u6ee5\u7528\u7684\u7acb\u6cd5\u4e4b\u4e00\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u8fd9\u9879\u6cd5\u5f8b\u63a8\u52a8Facebook\u5c31\u4e0a\u4f20\u5230\u5176\u793e\u4ea4\u7f51\u7edc\u7684\u7167\u7247\u4f7f\u7528\u672a\u7ecf\u6388\u6743\u7684\u9762\u90e8\u8bc6\u522b\u8fbe\u62105.5\u4ebf\u7f8e\u5143\u7684\u548c\u89e3\u3002\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u8868\u793a\uff0c\u201cClearview\u7684\u884c\u4e3a\u663e\u7136\u8fdd\u53cd\u4e86BIPA\u201d\uff0c\u8be5\u6cd5\u6848\u8981\u6c42\u516c\u53f8\u5728\u51fa\u4e8e\u4efb\u4f55\u539f\u56e0\u6536\u96c6\u548c\u5b58\u50a8\u4efb\u4f55\u751f\u7269\u7279\u5f81\u8bc6\u522b\u4fe1\u606f\u65f6\uff0c\u65e0\u8bba\u662f\u9762\u90e8\u6307\u7eb9\u8fd8\u662f\u6307\u7eb9\uff0c\u90fd\u8981\u901a\u77e5\u516c\u6c11\u5e76\u83b7\u5f97\u4e66\u9762\u540c\u610f\u3002\n\u5f53Clearview\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u5ba3\u5e03\u4e0d\u518d\u5c06\u5176\u6280\u672f\u51fa\u552e\u7ed9\u79c1\u8425\u516c\u53f8\u65f6\uff0c\u5b83\u8bd5\u56fe\u7ed5\u8fc7BIPA\u3002Clearview\u5ba3\u5e03\u8fd9\u4e00\u6d88\u606f\u662f\u4f0a\u5229\u8bfa\u4f0a\u5dde\u53e6\u4e00\u8d77\u57fa\u4e8eBIPA\u7684\u8bc9\u8bbc\u7684\u4e00\u90e8\u5206\uff0c\u8be5\u516c\u53f8\u5c06\u8fd9\u4e00\u51b3\u5b9a\u4e0e\u4e0d\u518d\u5411\u8be5\u5dde\u4efb\u4f55\u7ec4\u7ec7\u63d0\u4f9b\u4ea7\u54c1\u7684\u51b3\u5b9a\u5e76\u5217\u4e3a\u81ea\u613f\u884c\u52a8\uff0c\u65e0\u8bba\u8be5\u7ec4\u7ec7\u662f\u79c1\u4eba\u516c\u53f8\u8fd8\u662f\u6267\u6cd5\u673a\u6784\u3002\u8be5\u516c\u53f8\u8fd8\u8868\u793a\uff0c\u5c06\u4e0d\u518d\u4ece\u4f0a\u5229\u8bfa\u4f0a\u5dde\u7684IP\u5730\u5740\u6536\u96c6\u6570\u636e\uff0c\u91c7\u53d6\u989d\u5916\u63aa\u65bd\u9632\u6b62\u6536\u96c6\u4f0a\u5229\u8bfa\u4f0a\u5dde\u5c45\u6c11\u7684\u6570\u636e\uff0c\u5e76\u5efa\u7acb\u4e00\u4e2a\u9009\u62e9\u9000\u51fa\u5de5\u5177\uff0c\u4f46\u76ee\u524d\u5c1a\u4e0d\u6e05\u695aClearview\u5728\u6b64\u540e\u51e0\u5468\u5b9e\u9645\u4e0a\u91c7\u53d6\u4e86\u54ea\u4e9b\u63aa\u65bd(\u5982\u679c\u6709\u7684\u8bdd)\u3002\n\u901a\u8fc7\u7ee7\u7eed\u5b58\u50a8\u4f0a\u5229\u8bfa\u4f0a\u5dde\u5c45\u6c11\u7684\u4fe1\u606f\uff0cClearview\u4f3c\u4e4e\u4ecd\u53ef\u80fd\u53d7\u5230BIPA\u7684\u7ea6\u675f\uff0c\u8fd9\u7ed9\u4e86\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u53e6\u4e00\u4e2a\u63d0\u8d77\u8bc9\u8bbc\u7684\u673a\u4f1a\u3002\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u8868\u793a\uff0c\u5b83\u6b63\u5728\u4e0e\u5f53\u5730\u7684\u4f0a\u5229\u8bfa\u4f0a\u5dde\u5206\u4f1a\u548c\u57c3\u5fb7\u68ee\u00b7PC\u5f8b\u5e08\u4e8b\u52a1\u6240\u5408\u4f5c\uff0c\u5e76\u8981\u6c42\u6cd5\u9662\u8981\u6c42Clearview\u5220\u9664\u5176\u5b58\u50a8\u7684\u6240\u6709\u4f0a\u5229\u8bfa\u4f0a\u5dde\u5c45\u6c11\u7684\u751f\u7269\u8bc6\u522b\u6570\u636e\uff0c\u5e76\u505c\u6b62\u6536\u96c6\u4efb\u4f55\u65b0\u6570\u636e\uff0c\u76f4\u5230\u5b83\u80fd\u591f\u9075\u5b88BIPA\u7684\u540c\u610f\u89c4\u5219\u3002\n\u201c\u5982\u679c\u5141\u8bb8\uff0cClearview\u5c06\u6467\u6bc1\u6211\u4eec\u7684\u533f\u540d\u6743\u548c\u9690\u79c1\u6743--\u4ee5\u53ca\u8fd9\u4e24\u8005\u5e26\u6765\u7684\u5b89\u5168\u4fdd\u969c\uff0c\u201d\u97e6\u65af\u52d2\u5199\u9053\u3002\u201c\u4eba\u4eec\u53ef\u4ee5\u6539\u53d8\u81ea\u5df1\u7684\u540d\u5b57\u548c\u5730\u5740\uff0c\u4ee5\u4fdd\u62a4\u81ea\u5df1\u7684\u4e0b\u843d\u548c\u8eab\u4efd\u4e0d\u53d7\u8bd5\u56fe\u4f24\u5bb3\u4ed6\u4eec\u7684\u4eba\u7684\u4f24\u5bb3\uff0c\u4f46\u4ed6\u4eec\u4e0d\u80fd\u6539\u53d8\u81ea\u5df1\u7684\u8138\u3002\u201d", "note_en": "The American Civil Liberties Union is  suing controversial facial recognition firm Clearview AI for violation of the Illinois Biometric Information Privacy Act (BIPA), alleging the company illegally collected and stored data on Illinois citizens without their knowledge or consent and then sold access to its technology to law enforcement and private companies. The  full complaint is available here.\n \u201cUnbeknownst to the public, this company has offered up this massive faceprint database to private companies, police, federal agencies, and wealthy individuals, allowing them to secretly track and target whomever they wished using face recognition technology,\u201d writes ACLU attorney Nathan Freed Wessler in a  blog post outlining the lawsuit. \u201cThat company is Clearview AI, and it will end privacy as we know it if it isn\u2019t stopped.\u201d\n \u201cThat company is Clearview AI, and it will end privacy as we know it if it isn\u2019t stopped.\u201d\n Clearview AI rose to prominence earlier this year thanks to media reports, including a  high-profile investigation from  The New York Times in January, that revealed its technology is highly accurate and in widespread use throughout both law enforcement agencies and private sector companies. The reason the company\u2019s tool is effective is because Clearview scraped photographs and other data from social media sites against those platforms\u2019 rules, resulting in a database of more than 3 billion images which are then matched against an uploaded photo using sophisticated algorithms trained by machine learning.\n Tech companies have sent  numerous cease and desist orders to Clearview over the past five months, but it\u2019s unclear if the company has ever complied with orders to remove data it\u2019s siphoned from public social networks\u2019 pages and posts. The company has responded to criticism by claiming it would never offer its tool to the public for individual use and more recently said it would  stop selling its technology to private companies and focus only on law enforcement. However, numerous media reports have discovered that Clearview provided its product to investors, high-profile executives, and other individuals as part of trial periods to promote the product, and critics fear its facial recognition system is the foundation for rampant civil rights violations.\n \u201cBy building a mass database of billions of faceprints without our knowledge or consent, Clearview has created the nightmare scenario that we\u2019ve long feared, and has crossed the ethical bounds that many companies have refused to even attempt. Neither the United States government nor any American company is known to have ever compiled such a massive trove of biometrics,\u201d Wessler explains. \u201cAdding fuel to the fire, Clearview sells access to a smartphone app that allows its customers \u2014 and even those using the app on a trial basis \u2014 to upload a photo of an unknown person and instantaneously receive a set of matching photos.\u201d\n One avenue to combat Clearview\u2019s conduct that may prove effective is BIPA, the Illinois privacy law and one of the only pieces of US legislation that protects facial recognition data from misuse. It\u2019s the same law that earlier this year  pushed Facebook to a $550 million settlement over its use of unauthorized facial recognition on photos uploaded to its social network. The ACLU says \u201cClearview\u2019s actions clearly violate BIPA,\u201d which demands a company inform citizens and gain written consent when any biometric identifier, be it a faceprint or a fingerprint, is collected and stored for any reason.\n  Clearview has tried to skirt BIPA when it announced earlier this month that it would no longer sell its technology to private companies. Clearview made the announcement as part of a separate BIPA-based lawsuit in Illinois, and the company framed the decision as a voluntary action alongside its decision to no longer provide its product to any organization in the state regardless of whether it was a private company or law enforcement agency. The company also said it would no longer collect data from Illinois-based IP addresses, take additional measures to prevent data collection on Illinois residents, and build an opt-out tool, but it\u2019s not clear what steps, if any, Clearview has actually taken in the weeks since.\n By continuing to store information on Illinois residents, it appears Clearview may still be subject to BIPA, giving the ACLU an opportunity to file another suit. The ACLU says it\u2019s teaming up with its local Illinois chapter and the law firm Edelson PC, and it\u2019s asking that a court demand Clearview delete all biometric data on Illinois residents it has stored and to cease collecting any new data until it can comply with BIPA\u2019s consent rules.\n \u201cIf allowed, Clearview will destroy our rights to anonymity and privacy \u2014 and the safety and security that both bring,\u201d Wessler writes. \u201cPeople can change their names and addresses to shield their whereabouts and identities from individuals who seek to harm them, but they can\u2019t change their faces.\u201d", "posttime": "2020-05-29 09:46:56", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5669\u68a6\u822c,accuses,clearview", "title": "\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u6307\u8d23Clearview AI\u9690\u79c1\u95ee\u9898\u662f\u201c\u5669\u68a6\u822c\u7684\u573a\u666f\u201d", "title_en": "ACLU Accuses Clearview AI of Privacy 'Nightmare Scenario'", "transed": 1, "url": "https://www.theverge.com/2020/5/28/21273388/aclu-clearview-ai-lawsuit-facial-recognition-database-illinois-biometric-laws", "via": "", "real_tags": ["\u5669\u68a6\u822c", "accuses", "clearview"]}, {"category": "", "categoryclass": "", "imagename": "1dbc7ea383c33145f870d8f243ce9421.png", "infoid": 1004183, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u4eca\u5929\u53d1\u5e03\u4e86Android Studio4.0\uff0c\u8fd9\u662f\u5176\u96c6\u6210\u5f00\u53d1\u73af\u5883(IDE)\u7684\u6700\u65b0\u7248\u672c\u3002Android Studio4.0\u5e94\u8be5\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u201c\u66f4\u667a\u80fd\u5730\u7f16\u5199\u4ee3\u7801\u3001\u66f4\u5feb\u5730\u6784\u5efa\u548c\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\u201d\u3002\u65b0\u7248\u672c\u6070\u597d\u5728\u8c37\u6b4c\u4e0b\u5468\u53d1\u5e03Android 11 Beta 1\u4e4b\u524d\u53d1\u5e03\u3002\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u7684\u539f\u56e0\uff0c\u8c37\u6b4c\u63a8\u8fdf\u4e86Android 11\u6d4b\u8bd5\u7248\u7684\u8ba1\u5212\u3002\nAndroid\u662f\u4e00\u4e2a\u5e9e\u5927\u7684\u5e73\u53f0\uff0c\u6bcf\u6708\u6d3b\u8dc3\u8bbe\u5907\u8d85\u8fc725\u4ebf\u53f0\u3002\u867d\u7136\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6IDE\u5728Android\u4e0a\u6784\u5efa\uff0c\u4f46Android Studio\u6700\u5148\u63a8\u51fa\u4e86\u6700\u65b0\u529f\u80fd\u3002\u7248\u672c4.0\u5305\u62ec\u4e00\u4e2a\u65b0\u7684\u52a8\u753b\u7f16\u8f91\u5668\u3001\u4e00\u4e2a\u6784\u5efa\u5206\u6790\u5668\u548cJava 8\u8bed\u8a00API\u3002Google\u8fd8\u5bf9CPU Profiler\u7528\u6237\u754c\u9762\u8fdb\u884c\u4e86\u5f7b\u5e95\u6539\u9020\uff0c\u5e76\u6539\u8fdb\u4e86\u5e03\u5c40\u68c0\u67e5\u5668(Layout Inspector)\u3002\n\u60a8\u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u4ecedeveloper.android.com/studio\u4e0b\u8f7d\u9002\u7528\u4e8eWindows\u3001Mac\u548cLinux\u7684Android Studio4.0\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5728\u4f7f\u7528Android Studio\uff0c\u60a8\u53ef\u4ee5\u5728\u5bfc\u822a\u83dc\u5355\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u672c(Help=&gt\uff1b\u5728Windows/Linux\u4e0a\u68c0\u67e5\u66f4\u65b0\uff0cAndroid Studio=&gt\uff1b\u5728OS X\u4e0a\u68c0\u67e5\u66f4\u65b0)\u3002\n\u8c37\u6b4c\u57282\u6708\u4efd\u53d1\u5e03\u4e86Android Studio3.6\u3002\u7248\u672c\u53f74.0\u8868\u660e\uff0c\u5bf9\u4e8e\u4e3aAndroid\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u548c\u6e38\u620f\u7684\u4efb\u4f55\u4eba\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u7248\u672c\u3002\nVB Transform 2020 Online-7\u670815-17\u65e5\u3002\u52a0\u5165\u9886\u5148\u7684\u4eba\u5de5\u667a\u80fd\u9ad8\u7ba1\uff1a\u6ce8\u518c\u514d\u8d39\u76f4\u64ad\u3002\n\u4e0b\u9762\u60a8\u5c06\u53d1\u73b0Android Studio4.0\u7684\u7279\u6027\u6309\u7c7b\u522b\u7ec6\u5206\uff1a\u8bbe\u8ba1\u3001\u5f00\u53d1\u548c\u6784\u5efa\u3002\u65b0\u7248\u672c\u8fd8\u5305\u62ec\u901a\u5e38\u7684\u6027\u80fd\u6539\u8fdb\u548c\u65b0\u529f\u80fd\u4e4b\u4e0a\u7684\u9519\u8bef\u4fee\u590d(\u5b8c\u6574\u7248\u672c\u8bf4\u660e)\u3002\u8c37\u6b4c\u6ca1\u6709\u900f\u9732\u5176\u4e0b\u4e00\u7248\u672c\u7684\u8ba1\u5212\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u5728\u516c\u53f8\u7684I/O\u5f00\u53d1\u8005\u5927\u4f1a\u4e0a\u5f97\u5230\u63d0\u793a\uff0c\u4f462020\u5e74\u662f\u5947\u602a\u7684\u4e00\u5e74\u3002\n\u52a8\u753b\u7f16\u8f91\u5668\uff1aMotionLayout\u63a5\u53e3\u8fdb\u4e00\u6b65\u6269\u5c55\u4e86ConstraintLayout\u7684\u4e30\u5bcc\u529f\u80fd\uff0c\u5e2e\u52a9Android\u5f00\u53d1\u8005\u5728\u5e94\u7528\u4e2d\u7ba1\u7406\u590d\u6742\u7684\u8fd0\u52a8\u548cwidget\u52a8\u753b\u3002\u73b0\u5728\uff0c\u5c06\u6b64API\u4e0e\u65b0\u7684\u52a8\u753b\u7f16\u8f91\u5668\u4e00\u8d77\u4f7f\u7528\u66f4\u52a0\u5bb9\u6613-\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u3001\u7f16\u8f91\u548c\u9884\u89c8MotionLayout\u52a8\u753b\u7684\u754c\u9762\u3002\u60a8\u4e0d\u518d\u9700\u8981\u521b\u5efa\u548c\u4fee\u6539\u590d\u6742\u7684XML\u6587\u4ef6\uff1b\u52a8\u753b\u7f16\u8f91\u5668\u5c06\u4e3a\u60a8\u751f\u6210\u8fd9\u4e9b\u6587\u4ef6\uff0c\u5e76\u652f\u6301\u7f16\u8f91\u7ea6\u675f\u96c6\u3001\u53d8\u6362\u3001\u5173\u952e\u5e27\u548c\u89c6\u56fe\u5c5e\u6027\u3002\u5982\u679c\u60a8\u786e\u5b9e\u60f3\u8981\u67e5\u770b\u7f16\u8f91\u5668\u521b\u5efa\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u5355\u51fb\u4e00\u4e0b\u5373\u53ef\u3002\u5bf9\u4e8e\u5df2\u7ecf\u4f7f\u7528ConstraintLayout\u7684\u5f00\u53d1\u4eba\u5458\uff0cIDE\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c06\u5176\u8f6c\u6362\u4e3aMotionLayout\u3002\n\u5347\u7ea7\u7684\u5e03\u5c40\u68c0\u67e5\u5668\uff1a\u8c03\u67e5\u7279\u5b9a\u5c5e\u6027\u7684\u503c\u4ece\u4f55\u800c\u6765\uff0c\u6216\u67e5\u770b\u5d4c\u5957\u89c6\u56fe\u7684\u5b9e\u65f6\u4e09\u7ef4\u8868\u793a\u4ee5\u68c0\u67e5\u89c6\u56fe\u5c42\u6b21\u3002\u901a\u8fc7\u5e03\u5c40\u68c0\u67e5\u5668\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee\u4e0e\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u4fdd\u6301\u66f4\u65b0\u7684\u6570\u636e\uff0c\u5e76\u63d0\u4f9b\u6709\u5173\u5982\u4f55\u89e3\u6790\u8d44\u6e90\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u901a\u8fc7\u4ece\u4e3b\u83dc\u5355\u4e2d\u9009\u62e9\u89c6\u56fe&gt\uff1b\u5de5\u5177\u7a97\u53e3&gt\uff1b\u5e03\u5c40\u68c0\u67e5\u5668\u6765\u4f7f\u7528\u5b9e\u65f6\u7248\u9762\u68c0\u67e5\u5668\u3002\u5982\u679c\u60a8\u6b63\u5728\u90e8\u7f72\u5230\u8fd0\u884cAPI 29\u7ea7\u522b\u6216\u66f4\u9ad8\u7ea7\u522b\u7684\u8bbe\u5907\uff0c\u5219\u53ef\u4ee5\u8bbf\u95ee\u5176\u4ed6\u529f\u80fd\uff0c\u4f8b\u5982\u968f\u7740\u89c6\u56fe\u66f4\u6539\u800c\u66f4\u65b0\u7684\u52a8\u6001\u5e03\u5c40\u5c42\u6b21\u7ed3\u6784\u3001\u8fd8\u53ef\u4ee5\u5e2e\u52a9\u60a8\u786e\u5b9a\u5982\u4f55\u89e3\u6790\u8d44\u6e90\u503c\u7684\u8be6\u7ec6\u89c6\u56fe\u5c5e\u6027\uff0c\u4ee5\u53ca\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8fUI\u7684\u5b9e\u65f63D\u6a21\u578b\u3002\u5728\u80fd\u591f\u8c03\u8bd5UI\u7684\u540c\u65f6\uff0c\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u5bfc\u822a\u3001\u8bbe\u7f6e\u52a8\u753b\u4ee5\u53ca\u5728\u89c6\u56fe\u4e4b\u95f4\u5207\u6362\u3002\n\u5e03\u5c40\u9a8c\u8bc1\uff1a\u5f53\u60a8\u9488\u5bf9\u591a\u79cd\u5916\u5f62\u56e0\u7d20\u3001\u5c4f\u5e55\u5927\u5c0f\u548c\u5206\u8fa8\u7387\u8fdb\u884c\u5f00\u53d1\u65f6\uff0c\u60a8\u9700\u8981\u9a8c\u8bc1\u60a8\u5bf9UI\u6240\u505a\u7684\u66f4\u6539\u5728\u60a8\u652f\u6301\u7684\u6bcf\u4e2a\u5c4f\u5e55\u4e0a\u662f\u5426\u90fd\u5f88\u68d2\u3002\u4f7f\u7528\u5e03\u5c40\u9a8c\u8bc1\u7a97\u53e3\uff0c\u60a8\u53ef\u4ee5\u540c\u65f6\u9884\u89c8\u4e0d\u540c\u5c4f\u5e55\u548c\u914d\u7f6e\u4e0a\u7684\u5e03\u5c40\u3002\u8981\u5f00\u59cb\uff0c\u8bf7\u5355\u51fbIDE\u53f3\u4e0a\u89d2\u7684\u5e03\u5c40\u9a8c\u8bc1\u9009\u9879\u5361\u3002\nCPU Profiler UI\u5347\u7ea7\uff1a\u8be5CPU Profiler\u65e8\u5728\u63d0\u4f9b\u6709\u5173\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7ebf\u7a0b\u6d3b\u52a8\u548c\u8ddf\u8e2a\u8bb0\u5f55\u7684\u4e30\u5bcc\u4fe1\u606f\u3002CPU\u5f55\u5236\u73b0\u5728\u4e0e\u4e3b\u5206\u6790\u5668\u65f6\u95f4\u7ebf\u5206\u79bb\uff0c\u5e76\u6309\u7ec4\u7ec4\u7ec7\u3002\u60a8\u53ef\u4ee5\u4e0a\u4e0b\u79fb\u52a8\u7ec4\uff0c\u6216\u62d6\u653e\u7ec4\u4e2d\u7684\u5355\u4e2a\u9879\u76ee\u4ee5\u8fdb\u884c\u5176\u4ed6\u81ea\u5b9a\u4e49\u3002\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u7ebf\u7a0b\u6d3b\u52a8\u65f6\u95f4\u7ebf\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u6d3b\u52a8(\u5305\u62ec\u65b9\u6cd5\u3001\u51fd\u6570\u548c\u4e8b\u4ef6)\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u7528\u65b0\u7684\u5bfc\u822a\u5feb\u6377\u952e\u8f7b\u677e\u79fb\u52a8\u6570\u636e-\u4f8b\u5982\u4f7f\u7528W\u3001A\u3001S\u548cD\u952e\u8fdb\u884c\u7ec6\u7c92\u5ea6\u7f29\u653e\u548c\u5e73\u79fb\u3002Google\u8fd8\u91cd\u65b0\u8bbe\u8ba1\u4e86\u7cfb\u7edf\u8ddf\u8e2aUI\uff0c\u4ee5\u4fbf\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u72ec\u7279\u7684\u7740\u8272\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u8fdb\u884c\u89c6\u89c9\u533a\u5206\uff0c\u5bf9\u7ebf\u7a0b\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u4fbf\u9996\u5148\u663e\u793a\u8f83\u7e41\u5fd9\u7684\u7ebf\u7a0b\uff0c\u5e76\u4e14\u60a8\u73b0\u5728\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u53ea\u67e5\u770b\u60a8\u9009\u62e9\u7684\u7ebf\u7a0b\u7684\u6570\u636e\u3002CPU\u6027\u80fd\u5206\u6790\u5668\u7684\u8d28\u91cf\u4e5f\u5e94\u8be5\u66f4\u597d--\u81eaAndroid Studio3.6\u4ee5\u6765\uff0c\u8c37\u6b4c\u5df2\u7ecf\u770b\u5230\u7528\u6237\u62a5\u544a\u7684\u5f55\u97f3\u9519\u8bef\u7387\u5927\u5e45\u4e0b\u964d\u3002\n\u7f16\u5199\u4ee3\u7801\u6536\u7f29\u89c4\u5219\u65f6\u7684\u667a\u80fd\u7f16\u8f91\u5668\u529f\u80fd\uff1aAndroid Gradle plugin 3.4.0\u4e2d\u5f15\u5165\u4e86r8\uff0c\u5c06\u53bb\u4e11\u5316\u3001\u6536\u7f29\u3001\u6a21\u7cca\u3001\u4f18\u5316\u548cDexing\u7ed3\u5408\u5728\u4e00\u8d77-\u5bfc\u81f4\u663e\u8457\u7684\u6784\u5efa\u6027\u80fd\u6539\u8fdb\u3002\u5728\u4e3aR8\u521b\u5efa\u89c4\u5219\u6587\u4ef6\u65f6\uff0cAndroid Studio\u73b0\u5728\u63d0\u4f9b\u667a\u80fd\u7f16\u8f91\u5668\u529f\u80fd\uff0c\u4f8b\u5982\u8bed\u6cd5\u7a81\u51fa\u663e\u793a\u3001\u5b8c\u6210\u548c\u9519\u8bef\u68c0\u67e5\u3002\u8be5\u7f16\u8f91\u5668\u8fd8\u4e0eAndroid\u9879\u76ee\u96c6\u6210\uff0c\u4e3a\u6240\u6709\u7c7b\u3001\u65b9\u6cd5\u548c\u5b57\u6bb5\u63d0\u4f9b\u5b8c\u6574\u7684\u7b26\u53f7\u5b8c\u6210\uff0c\u5e76\u5305\u62ec\u5feb\u901f\u5bfc\u822a\u548c\u91cd\u6784\u3002\nIntelliJ IDEA 2019.3\u5e73\u53f0\u66f4\u65b0\uff1a\u6838\u5fc3Android Studio IDE\u5df2\u66f4\u65b0\uff0c\u589e\u52a0\u4e86IntelliJ IDEA 2019.3\u7248\u548c2019.3.3\u7248\u7684\u6539\u8fdb\u3002\u8fd9\u4e9b\u6539\u8fdb\u4e3b\u8981\u96c6\u4e2d\u5728\u6574\u4e2aIDE\u7684\u8d28\u91cf\u548c\u6027\u80fd\u6539\u8fdb\u4e0a\u3002\nKotlin Android live Templates\uff1a\u4e00\u4e2aIntelliJ\u529f\u80fd\uff0c\u5141\u8bb8\u60a8\u901a\u8fc7\u952e\u5165\u7b80\u5355\u7684\u5173\u952e\u5b57\u5c06\u5e38\u89c1\u7ed3\u6784\u63d2\u5165\u5230\u4ee3\u7801\u4e2d\u3002Android Studio\u73b0\u5728\u4e3a\u60a8\u7684Kotlin\u4ee3\u7801\u63d0\u4f9b\u4e86\u7279\u5b9a\u4e8eAndroid\u7684\u5b9e\u65f6\u6a21\u677f\u3002\u4f8b\u5982\uff0c\u53ea\u9700\u952e\u5165toast\uff0c\u7136\u540e\u6309Tab\u952e\u5373\u53ef\u5feb\u901f\u63d2\u5165Toast\u7684\u6837\u677f\u4ee3\u7801\u3002\u8981\u67e5\u770b\u53ef\u7528\u5b9e\u65f6\u6a21\u677f\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u5bfc\u822a\u5230\u7f16\u8f91\u5668&&gt;\u5b9e\u65f6\u6a21\u677f(\u5728\u7f16\u8f91\u5668\u8bbe\u7f6e(\u6216\u9996\u9009\u9879)\u5bf9\u8bdd\u6846\u4e2d)\u3002\nClangd\u5bf9C++\u7684\u652f\u6301\uff1a\u5bf9\u4e8e\u7f16\u5199C++\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0cclangd\u73b0\u5728\u662f\u4ee3\u7801\u5bfc\u822a\u3001\u5b8c\u6210\u3001\u68c0\u67e5\u4ee5\u53ca\u663e\u793a\u4ee3\u7801\u9519\u8bef\u548c\u8b66\u544a\u7684\u4e3b\u8981\u8bed\u8a00\u5206\u6790\u5f15\u64ce\u3002\u8c37\u6b4c\u73b0\u5728\u8fd8\u4e0eAndroid Studio\u6346\u7ed1\u5728\u4e00\u8d77\u3002\u8981\u914d\u7f6eClangd\u6216Clang-Tidy\u884c\u4e3a\uff0c\u8bf7\u8f6c\u5230IDE\u8bbe\u7f6e(\u6216\u9996\u9009\u9879)\u5bf9\u8bdd\u6846\uff0c\u5bfc\u822a\u5230\u8bed\u8a00&amp\uff1b\u6846\u67b6&gt\uff1bC/C++&gt\uff1bClangd\u6216Clang-Tidy\uff0c\u7136\u540e\u914d\u7f6e\u9009\u9879\u3002\n\u6784\u5efa\u5206\u6790\u5668\uff1a\u8fc7\u65f6\u6216\u914d\u7f6e\u9519\u8bef\u7684\u4efb\u52a1\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6784\u5efa\u65f6\u95f4\u66f4\u957f\uff0c\u4ece\u800c\u5bfc\u81f4\u53d7\u632b\u548c\u5de5\u4f5c\u6548\u7387\u4e0b\u964d\u3002Build Analyzer\u901a\u8fc7\u7a81\u51fa\u663e\u793a\u5bf9\u603b\u4f53\u6784\u5efa\u65f6\u95f4\u6700\u8d1f\u8d23\u7684\u63d2\u4ef6\u548c\u4efb\u52a1\uff0c\u5e76\u5efa\u8bae\u7f13\u89e3\u6027\u80fd\u8870\u9000\u7684\u6b65\u9aa4\uff0c\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u4e86\u89e3\u548c\u89e3\u51b3\u6784\u5efa\u4e2d\u7684\u74f6\u9888\u3002\nD8\u548cR8\u4e2d\u7684Java 8\u8bed\u8a00\u5e93\u53bb\u7cd6\u5316\uff1aAndroid Gradle\u63d2\u4ef6\u7684\u4ee5\u524d\u7248\u672c\u901a\u8fc7\u4e00\u4e2a\u79f0\u4e3a\u53bb\u7cd6\u5316\u7684\u8fc7\u7a0b\uff0c\u4e3a\u6240\u6709API\u7ea7\u522b\u652f\u6301\u5404\u79cdJava 8\u8bed\u8a00\u7279\u6027\uff0c\u4f8b\u5982lambda\u8868\u8fbe\u5f0f\u548c\u65b9\u6cd5\u5f15\u7528\u3002\u73b0\u5728\uff0c\u65e0\u8bba\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684minSdkVersion\u662f\u4ec0\u4e48\uff0c\u53bb\u4e11\u5316\u5f15\u64ce\u90fd\u5df2\u7ecf\u6269\u5c55\u5230\u652f\u6301Java\u8bed\u8a00API\u3002\u8fd9\u610f\u5473\u7740\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u8bed\u8a00API\uff0c\u8fd9\u4e9bAPI\u4ee5\u524d\u53ea\u5728\u6700\u8fd1\u7684Android\u7248\u672c\u4e2d\u53ef\u7528(\u4f8b\u5982java.util.stream\u3001java.util.function\u548cjava.time)\u3002\n\u529f\u80fd\u5bf9\u529f\u80fd\u4f9d\u8d56\u5173\u7cfb\uff1a\u73b0\u5728\u53ef\u4ee5\u6307\u5b9a\u52a8\u6001\u529f\u80fd\u6a21\u5757\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u529f\u80fd\u6a21\u5757\u3002\u80fd\u591f\u5b9a\u4e49\u6b64\u5173\u7cfb\u53ef\u786e\u4fdd\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5177\u6709\u89e3\u9501\u9644\u52a0\u529f\u80fd\u6240\u9700\u7684\u6a21\u5757\uff0c\u4ece\u800c\u51cf\u5c11\u8bf7\u6c42\u5e76\u4f7f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u66f4\u5bb9\u6613\u6a21\u5757\u5316\u3002\u4f8b\u5982\uff0c\uff1aVideo\u6444\u50cf\u5934\u529f\u80fd\u53ef\u80fd\u53d6\u51b3\u4e8e\uff1a\u6444\u50cf\u5934\u529f\u80fd\u3002\u5982\u679c\u7528\u6237\u60f3\u8981\u89e3\u9501\u5f55\u5236\u89c6\u9891\u7684\u80fd\u529b\uff0c\u4f60\u7684\u5e94\u7528\u4f1a\u5728\u8bf7\u6c42\uff1a\u89c6\u9891\u65f6\u81ea\u52a8\u4e0b\u8f7dRequired\uff1aCamera\u6a21\u5757\u3002\n\u542f\u7528\u6216\u7981\u7528\u6784\u5efa\u529f\u80fd\u7684\u65b0\u9009\u9879\uff1aAndroid Gradle\u63d2\u4ef6\u5185\u7f6e\u4e86\u5bf9\u73b0\u4ee3\u5e93(\u5982\u6570\u636e\u7ed1\u5b9a\u548c\u89c6\u56fe\u7ed1\u5b9a)\u548c\u6784\u5efa\u529f\u80fd(\u5982\u81ea\u52a8\u751f\u6210\u7684BuildConfig\u7c7b)\u7684\u652f\u6301\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u80fd\u5e76\u4e0d\u662f\u6bcf\u4e2a\u9879\u76ee\u90fd\u9700\u8981\u8fd9\u4e9b\u5e93\u548c\u529f\u80fd\u3002\u73b0\u5728\u53ef\u4ee5\u7981\u7528\u79bb\u6563\u751f\u6210\u529f\u80fd\uff0c\u8fd9\u6709\u52a9\u4e8e\u4f18\u5316\u5927\u578b\u9879\u76ee\u7684\u751f\u6210\u6027\u80fd\u3002\n\u5bf9Kotlin DSL\u811a\u672c\u6587\u4ef6\u7684\u57fa\u672c\u652f\u6301\uff1a\u5bf9Kotlin DSL\u751f\u6210\u811a\u672c\u6587\u4ef6(*.kts)\u7684\u5185\u7f6e\u652f\u6301\u610f\u5473\u7740Kotlin\u751f\u6210\u811a\u672c\u63d0\u4f9b\u4e00\u6574\u5957\u5feb\u901f\u4fee\u590d\uff0c\u5e76\u53d7\u9879\u76ee\u7ed3\u6784\u5bf9\u8bdd\u6846\u652f\u6301\u3002\u8c37\u6b4c\u5c06\u5728\u660e\u5e74\u7ee7\u7eed\u6539\u8fdbAndroid Gradle\u63d2\u4ef6\u7684DSL API\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4Kotlin\u811a\u672c\u7528\u6237\u7684API\u53d1\u751f\u91cd\u5927\u53d8\u5316\u3002\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u8fd9\u4e9b\u4fee\u590d\u5c06\u4e3aKotlin\u811a\u672c\u7528\u6237\u5e26\u6765\u66f4\u52a0\u60ef\u7528\u3001\u6613\u4e8e\u4f7f\u7528\u7684DSL\u3002\n\u4f9d\u8d56\u6027\u5143\u6570\u636e\uff1a\u5f53\u4f7f\u7528Android Gradle plugin 4.0.0\u53ca\u66f4\u9ad8\u7248\u672c\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u8be5\u63d2\u4ef6\u5305\u62ec\u63cf\u8ff0\u7f16\u8bd1\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5e93\u4f9d\u8d56\u9879\u7684\u5143\u6570\u636e\u3002\u4e0a\u8f7d\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0cPlay Console\u4f1a\u68c0\u67e5\u6b64\u5143\u6570\u636e\u4ee5\u9488\u5bf9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684SDK\u548c\u4f9d\u8d56\u9879\u7684\u5df2\u77e5\u95ee\u9898\u63d0\u4f9b\u8b66\u62a5\uff0c\u5e76\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u63d0\u4f9b\u53ef\u884c\u7684\u53cd\u9988\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\u6570\u636e\u88ab\u538b\u7f29\uff0c\u7531Google Play\u7b7e\u540d\u5bc6\u94a5\u52a0\u5bc6\uff0c\u5e76\u5b58\u50a8\u5728\u60a8\u7684\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u7684\u7b7e\u540d\u5757\u4e2d\u3002\n\u6700\u540e\uff0cAndroid Gradle plugin 4.0.0\u901a\u8fc7\u4f7f\u7528Java8\u8bed\u8a00API(\u4e0d\u7ba1\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u4f4eAPI\u7ea7\u522b)\u652f\u6301Android Studio\u7684build Analyzer\uff0c\u5e76\u5728\u52a8\u6001\u529f\u80fd\u6a21\u5757\u4e4b\u95f4\u521b\u5efa\u529f\u80fd\u5bf9\u529f\u80fd\u7684\u4f9d\u8d56\u5173\u7cfb\u3002", "note_en": "Google today  launched Android Studio 4.0, the latest version of its integrated development environment (IDE). Android Studio 4.0 is supposed to help developers \u201ccode smarter, build faster, and design apps.\u201d The new release comes right before Google\u2019s Android 11 Beta 1 launch next week. Google  delayed its Android 11 beta schedule due to the coronavirus.\n Android is a massive platform with  over 2.5 billion monthly active devices. While developers can use other IDEs to build on Android, the latest features arrive first in Android Studio. Version 4.0 includes a new Motion Editor, a Build Analyzer, and Java 8 language APIs. Google also overhauled the CPU Profiler user interface and improved the Layout Inspector.\n  You can now download Android Studio 4.0 for Windows, Mac, and Linux directly from  developer.android.com/studio. If you are already using Android Studio, you can get the latest version in the navigation menu (Help =&gt; Check for Update on Windows/Linux and Android Studio =&gt; Check for Updates on OS X).\n Google released  Android Studio 3.6 in February. The version number 4.0 suggests this is a major release for anyone who builds apps and games for Android.\n  VB Transform 2020 Online - July 15-17. Join leading AI executives:  Register for the free livestream.\n Below you\u2019ll find Android Studio 4.0 features broken down by category: design, develop, and build. The new version also includes the usual performance improvements and bug fixes on top of the new features ( full release notes). Google didn\u2019t share its plans for the next version. Normally we\u2019d get hints at the company\u2019s I/O developer conference, but 2020 is a weird year.\n  Motion Editor: The\u00a0 MotionLayout API\u00a0extends the rich capabilities of\u00a0 ConstraintLayout to help Android developers manage complex motion and widget animation in their apps. It\u2019s now easier to use this API with the new Motion Editor \u2014\u00a0an interface for creating, editing, and previewing  MotionLayout animations. You no longer have to create and modify complex XML files; the Motion Editor generates them for you, with support for editing constraint sets, transitions, keyframes, and view attributes. If you do want to see the code the editor creates, it is one click away. For developers already using  ConstraintLayout, the IDE can easily convert those to\u00a0 MotionLayout.\n Upgraded Layout Inspector: Investigate where a value for a particular attribute came from or see a live 3D representation of nested views to inspect your view hierarchy. The Layout Inspector gives you access to data that stays updated with your running app and providing insights on how resources are being resolved. Use the live Layout Inspector by selecting View &gt; Tool Windows &gt; Layout Inspector from the main menu. If you are deploying to a device running API 29 level or higher, you have access to additional features, such as a dynamic layout hierarchy that updates as views change, detailed view attributes that also help you determine how resource values are resolved, and a live 3D model of your running app\u2019s UI. Navigate, animate, and transition between views on your running app while being able to debug your UI.\n Layout Validation: When you\u2019re developing for multiple form-factors, screen sizes, and resolutions, you need to verify that changes you make to your UI look great on every screen you support. With the Layout Validation window, you can preview layouts on different screens and configurations simultaneously. To get started, click on the Layout Validation\u00a0tab in the top-right corner of the IDE.\n  CPU Profiler UI upgrades: The\u00a0 CPU profiler is designed to provide a rich amount of information about your app\u2019s thread activity and trace recordings. CPU recordings are now separated from the main profiler timeline and organized in groups. You can move groups up and down, or drag-and-drop individual items within a group for additional customization. You can now view all thread activity in the Thread Activity timeline (including methods, functions, and events) and try new navigation shortcuts to easily move around the data \u2014 such as using W, A, S, and D keys for fine-grained zooming and panning. Google also redesigned the System Trace UI so Events are uniquely colored for better visual distinction, threads are sorted to surface the busier ones first, and you can now focus on seeing data for only the threads you select. The quality of the CPU profiler should also be better \u2014 Google has seen a significant decrease in the user-reported error rates of recordings since Android Studio 3.6.\n Smart editor features when writing rules for code shrinking: R8 was introduced in Android Gradle plugin 3.4.0 to combine desugaring, shrinking, obfuscating, optimizing, and dexing \u2014 resulting in noticeable build performance improvements. When creating rules files for R8, Android Studio now provides smart editor features, such as syntax highlighting, completion, and error checking. The editor also integrates with your Android project to provide full symbol completion for all classes, methods, and fields, and includes quick navigation and refactoring.\n IntelliJ IDEA 2019.3 platform update: The core Android Studio IDE has been updated with improvements from IntelliJ IDEA\u00a0 2019.3\u00a0and\u00a0 2019.3.3\u00a0releases. These improvements largely focus on quality and performance improvements across the IDE.\n Kotlin Android live templates: An IntelliJ feature that allows you to insert common constructs into your code by typing simple keywords. Android Studio now includes Android-specific live templates for your Kotlin code. For example, simply type  toast\u00a0and press the Tab key to quickly insert boilerplate code for a Toast. For a full list of available live templates, navigate to\u00a0Editor &gt; Live Templates\u00a0in the\u00a0Settings\u00a0(or\u00a0Preferences) dialog.\n Clangd support for C++: For developers writing C++,  clangd is now the primary language analysis engine for code navigation, completion, inspection, and showing code errors and warnings. Google also now bundles clang-tidy with Android Studio. To configure Clangd or Clang-Tidy behavior, go to the IDE Settings\u00a0(or\u00a0Preferences) dialog, navigate to\u00a0Languages &amp; Frameworks &gt; C/C++ &gt; Clangd\u00a0or\u00a0Clang-Tidy, and configure the options.\n  Build Analyzer: Outdated or misconfigured tasks can cause longer build times that lead to frustration and lost productivity. The Build Analyzer helps developers understand and address bottlenecks in your build by highlighting the plugins and tasks that are most responsible for your overall build time and by suggesting steps to mitigate regressions.\n Java 8 Language library desugaring in D8 and R8: Previous versions of the Android Gradle plugin supported a variety of Java 8 language features for all API levels, such as lambda expressions and method references, through a process called\u00a0 desugaring. Now, the desugaring engine has been extended to support Java language APIs, regardless of your app\u2019s minSdkVersion. This means that you can now use standard language APIs, which were previously available in only recent Android releases (such as java.util.stream, java.util.function and java.time).\n Feature-on-feature dependencies: You can now specify that a Dynamic Feature module depends on another feature module. Being able to define this relationship ensures that your app has the required modules to unlock additional functionality, resulting in fewer requests and easier modularization of your app. For example, a  :video\u00a0feature can depend on the\u00a0 :camera\u00a0feature. If a user wants to unlock the ability to record videos, your app automatically downloads the required  :camera module when it requests\u00a0 :video.\n New options to enable or disable build features: The Android Gradle plugin has built-in support for modern libraries, such as data binding and view binding, and build features, such as auto-generated BuildConfig classes. However, you might not need these libraries and features for every project. You can now disable discrete build features, which can help optimize build performance for larger projects.\n Essential support for Kotlin DSL script files: Built-in support for Kotlin DSL build script files (*.kts) means that Kotlin build scripts offer a full suite of quick fixes and are supported by the Project Structure dialog. Google will continue to refine the Android Gradle Plugin\u2019s DSL API throughout the next year, which may result in breaking API changes for Kotlin script users. Long term, these fixes will make for a more idiomatic, easy-to-use DSL for Kotlin script users.\n Dependencies metadata: When building your app using Android Gradle plugin 4.0.0 and higher, the plugin includes metadata that describes the library dependencies that are compiled into your app. When uploading your app, the Play Console inspects this metadata to provide alerts for known issues with SDKs and dependencies your app uses, and, in some cases, provide actionable feedback to resolve those issues. The data is compressed, encrypted by a Google Play signing key, and stored in the signing block of your release app.\n Lastly, Android Gradle plugin 4.0.0 includes support for Android Studio\u2019s Build Analyzer by using Java 8 language APIs (regardless of your app\u2019s minimum API level), and creating feature-on-feature dependencies between Dynamic Feature modules.", "posttime": "2020-05-29 09:15:18", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "java,google,android,\u8c37\u6b4c,\u63a8\u51fa", "title": "\u8c37\u6b4c\u63a8\u51faAndroid Studio4.0\uff0c\u5185\u7f6e\u52a8\u753b\u7f16\u8f91\u5668\u3001Build Analyzer\u548cJava8API", "title_en": "Google Launches Android Studio 4.0 With Motion Editor, Build Analyzer, and Java 8 APIs", "transed": 1, "url": "https://venturebeat.com/2020/05/28/google-launches-android-studio-4-0-with-motion-editor-build-analyzer-and-java-8-apis/", "via": "", "real_tags": ["java", "google", "android", "\u8c37\u6b4c", "\u63a8\u51fa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004182, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728Ry\u57282018\u5e745\u6708\u4f7f\u539f\u578b\u53ef\u89c1\u540e\u4e0d\u4e45\uff0c\u6211\u5c31\u5f00\u59cb\u4e3aDeno\u505a\u8d21\u732e\u3002\u4eba\u4eec\u6700\u5e38\u95ee\u7684\u95ee\u9898\u662f\u201c\u5305\u88c5\u7ba1\u7406\u5458\u5728\u54ea\u91cc\uff1f\u201d\u5f88\u591a\u65f6\u5019\u751a\u81f3\u4e0d\u662f\u4ee5\u95ee\u9898\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u5b83\u662f\u8fd9\u6837\u7684\u58f0\u660e\uff1a\u201c\u6211\u8ba4\u4e3a\u8fea\u8bfa\u8ba4\u771f\u5bf9\u5f85\u5b89\u5168\u95ee\u9898\uff0c\u4ec5\u4ec5\u4ece\u4e92\u8054\u7f51\u4e0a\u4e0b\u8f7d\u8d44\u6e90\u662f\u4e0d\u5b89\u5168\u7684\u3002\u201d\u6216\u8005\u201c\u6211\u600e\u4e48\u53ef\u80fd\u7ba1\u7406\u6211\u7684\u4f9d\u8d56\u5173\u7cfb\u5462\uff1f\u201d\n\u5728\u6211\u770b\u6765\uff0c\u6211\u4eec\u9700\u8981\u6539\u53d8\u6211\u4eec\u7684\u601d\u7ef4\u6a21\u5f0f\u3002\u5f88\u591a\u4eba\u8ba4\u4e3a\u5305\u7ba1\u7406\u5668\u548c\u96c6\u4e2d\u4ee3\u7801\u6ce8\u518c\u4e2d\u5fc3\u65e0\u5904\u4e0d\u5728\uff0c\u8fd9\u662f\u62e5\u6709\u5305\u7ba1\u7406\u5668\u548c\u96c6\u4e2d\u4ee3\u7801\u6ce8\u518c\u4e2d\u5fc3\u7684\u8981\u6c42\u3002\u56e0\u4e3a\u5b83\u4eec\u5b58\u5728\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u4eec\u662f\u5fc5\u9700\u7684\u3002\u5b83\u4eec\u4e4b\u6240\u4ee5\u5b58\u5728\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u4ee5\u7279\u5b9a\u7684\u65b9\u5f0f\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u6211\u4eec\u521a\u521a\u63a5\u53d7\u5b83\u4eec\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u552f\u4e00\u9014\u5f84\u3002\u6211\u8ba4\u4e3a\u8fd9\u4e0d\u662f\u771f\u7684\u3002\n\u4e3a\u4e86\u53d1\u5e03\u7f51\u7ad9\uff0c\u6211\u4eec\u4e0d\u4f1a\u767b\u5f55\u5230Google\u4e2d\u592e\u670d\u52a1\u5668\uff0c\u7136\u540e\u5c06\u6211\u4eec\u7684\u7f51\u7ad9\u4e0a\u4f20\u5230\u6ce8\u518c\u8868\u3002\u7136\u540e\uff0c\u5982\u679c\u6709\u4eba\u60f3\u8981\u67e5\u770b\u6211\u4eec\u7684\u7f51\u7ad9\uff0c\u4ed6\u4eec\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u8be5\u5de5\u5177\u4f1a\u5728\u6211\u4eec\u672c\u5730\u673a\u5668\u4e0a\u7684browser.json\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6761\u76ee\uff0c\u5e76\u83b7\u53d6\u6574\u4e2a\u7f51\u7ad9\uff0c\u4ee5\u53ca\u8be5\u7f51\u7ad9\u94fe\u63a5\u5230\u6211\u4eec\u672c\u5730\u7f51\u7ad9\u76ee\u5f55\u7684\u4efb\u4f55\u5176\u4ed6\u7f51\u7ad9\uff0c\u7136\u540e\u5728\u6211\u4eec\u542f\u52a8\u6d4f\u89c8\u5668\u4ee5\u5b9e\u9645\u67e5\u770b\u8be5\u7f51\u7ad9\u4e4b\u524d\u3002\u90a3\u592a\u75af\u72c2\u4e86\uff0c\u5bf9\u5427\uff1f\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u63a5\u53d7\u8fd0\u884c\u4ee3\u7801\u7684\u6a21\u578b\u5462\uff1f\nDeno CLI\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u6d4f\u89c8\u5668\u7c7b\u4f3c\uff0c\u4f46\u9002\u7528\u4e8e\u4ee3\u7801\u3002\u60a8\u5728\u4ee3\u7801\u4e2d\u5bfc\u5165URL\uff0cDeno\u5c06\u83b7\u53d6\u8be5\u4ee3\u7801\u5e76\u5c06\u5176\u7f13\u5b58\u5230\u672c\u5730\uff0c\u5c31\u50cf\u6d4f\u89c8\u5668\u4e00\u6837\u3002\u6b64\u5916\uff0c\u4e0e\u6d4f\u89c8\u5668\u4e00\u6837\uff0c\u60a8\u7684\u4ee3\u7801\u8fd0\u884c\u5728\u6c99\u7bb1\u4e2d\uff0c\u6c99\u7bb1\u5bf9\u60a8\u8fd0\u884c\u7684\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u4fe1\u4efb\uff0c\u65e0\u8bba\u5176\u6765\u6e90\u5982\u4f55\u3002\u60a8\uff0c\u8c03\u7528\u4ee3\u7801\u7684\u4eba\uff0c\u5728\u5916\u90e8\u544a\u8bc9\u4ee3\u7801\u5b83\u80fd\u505a\u4ec0\u4e48\u548c\u4e0d\u80fd\u505a\u4ec0\u4e48\u3002\u6b64\u5916\uff0c\u4e0eabrowser\u7c7b\u4f3c\uff0c\u4ee3\u7801\u53ef\u4ee5\u8bf7\u6c42\u60a8\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\u7684\u6743\u9650\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u6388\u4e88\u8005\u62d2\u7edd\u3002\nHTTP\u534f\u8bae\u63d0\u4f9b\u4e86\u63d0\u4f9b\u6709\u5173\u4ee3\u7801\u7684\u4fe1\u606f\u6240\u9700\u7684\u4e00\u5207\uff0cDeno\u5c1d\u8bd5\u5145\u5206\u5229\u7528\u8be5\u534f\u8bae\uff0c\u800c\u4e0d\u5fc5\u521b\u5efa\u65b0\u534f\u8bae\u3002\n\u9996\u5148\u8981\u8003\u8651\u7684\u662f\uff0c\u5c31\u50cf\u6d4f\u89c8\u5668\u4e00\u6837\uff0cDeno CLI\u4e0d\u60f3\u5bf9\u60a8\u8fd0\u884c\u7684\u4ee3\u7801\u6709\u4efb\u4f55\u610f\u89c1\u3002\u5b83\u5217\u51fa\u4e86\u5982\u4f55\u83b7\u53d6\u4ee3\u7801\u7684\u89c4\u5219\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u5c06\u81ea\u8eab\u4e0e\u5176\u8fd0\u884c\u7684\u673a\u5668\u8fdb\u884c\u6c99\u7bb1\u3002\u5728\u6211\u770b\u6765\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5e94\u8be5\u6709\u7684\u89c2\u70b9\u3002\n\u5728Node.js/npm\u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u5c06\u672c\u5730\u673a\u5668\u4e0a\u7684\u4ee3\u7801\u7ba1\u7406\u4e0e\u96c6\u4e2d\u7684\u4ee3\u7801\u6ce8\u518c\u8868\u6df7\u4e3a\u4e00\u8c08\uff0c\u4ee5\u5e2e\u52a9\u53d1\u73b0\uff0c\u5728\u6211\u770b\u6765\uff0c\u4e24\u8005\u90fd\u6709\u975e\u5e38\u7cdf\u7cd5\u7684\u7f3a\u9677\u3002\n\u65e9\u5728\u4e92\u8054\u7f51\u7684\u65e9\u671f\uff0c\u6211\u4eec\u5c31\u8bd5\u9a8c\u4e86NPM\u7c7b\u578b\u7684\u53ef\u53d1\u73b0\u6027\u3002\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u7f51\u7ad9\u6dfb\u52a0\u5230Yahoo\uff01\u5728\u6b63\u786e\u7684\u5206\u7c7b\u4e0b\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u51fa\u73b0\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u641c\u7d22\u529f\u80fd\uff0c\u4f46\u5b83\u7684\u7ed3\u6784\u90fd\u662f\u57fa\u4e8e\u63d0\u4f9b\u5185\u5bb9\u7684\u4eba\u7684\u610f\u89c1\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u5bf9\u6d88\u8d39\u8005\u9700\u6c42\u7684\u4f18\u5316\u3002\u6700\u7ec8\uff0c\u8c37\u6b4c(Google)\u51fa\u73b0\u4e86\u3002\u4e3a\u4ec0\u4e48\u8c37\u6b4c\u4f1a\u8d62\uff1f\u56e0\u4e3a\u5b83\u5f88\u6709\u7528\u3002\u5b83\u5c06\u7b80\u5355\u7684\u9700\u6c42\u8868\u8fbe(\u641c\u7d22\u8bcd)\u4e0e\u6ee1\u8db3\u9700\u6c42\u7684\u6700\u76f8\u5173\u7684\u7f51\u9875\u76f8\u5339\u914d\u7684\u7f51\u7ad9\u7f16\u5165\u7d22\u5f15\uff0c\u8003\u5bdf\u4e86\u591a\u4e2a\u56e0\u7d20\uff0c\u5305\u62ec\u5c06\u5185\u5bb9\u63d0\u4f9b\u5546\u63d0\u4f9b\u7684\u5143\u6570\u636e\u4f5c\u4e3a\u5176\u4e2d\u4e00\u4e2a\u56e0\u7d20\u63d0\u4f9b\u7ed9\u5185\u5bb9\u63d0\u4f9b\u5546\u3002\n\u867d\u7136\u6211\u4eec\u8fd8\u6ca1\u6709\u7528\u4e8eDeno\u7684\u4ee3\u7801\u7684\u6a21\u578b\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u53ef\u4ee5\u5de5\u4f5c\u7684\u6a21\u578b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u8c37\u6b4c\u662f\u56e0\u4e3a\u5b83\u4e3a\u6211\u4eec\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u88ab\u544a\u77e5\u201c\u4f60\u5fc5\u987b\u4f7f\u7528\u8c37\u6b4c\u201d\uff0c\u800c\u4e14\u8c37\u6b4c\u8fd8\u6709\u5176\u4ed6\u53ef\u884c\u7684\u66ff\u4ee3\u65b9\u6848\u3002\n\u6211\u5728Twitter\u4e0a\u4e0e\u52b3\u91cc\u00b7\u6c83\u65af(Laurie Voss)\u8fdb\u884c\u4e86\u4e00\u70b9\u8fa9\u8bba\uff0c\u6211\u60f3\u8bf4\u7684\u662f\uff0c\u4ed6\u5bf9NPM\u751f\u6001\u7cfb\u7edf\u6709\u516c\u5e73\u7684\u4e86\u89e3\u3002\u4ed6\u8ba4\u4e3aDeno\u9700\u8981\u80cc\u5305\u7ecf\u7406\uff0c\u800c\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u662f\u6211\u60f3\u8868\u8fbe\u7684\u60f3\u6cd5\u7684\u4e00\u4e2a\u66f4\u957f\u7684\u957f\u7bc7\u5927\u8bba\u7248\u672c\uff0c\u4f46Laurie\u63d0\u51fa\u4e86\u4e00\u4e2a\u975e\u5e38\u6709\u9053\u7406\u7684\u89c2\u70b9\u3002\n\u7136\u800c\uff0c\u6211\u4eec\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5728\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u5728GitHub\u4e0a\uff0c\u56e0\u4e3a\u7ef4\u62a4\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\u7684\u95ee\u9898\u662f\u5bfc\u81f4\u96c6\u4e2d\u5316\u7cfb\u7edf\u7684\u793e\u4f1a\u548c\u58f0\u8a89\u95ee\u9898\uff0c\u5c3d\u7ba1\u6ca1\u6709\u8fd9\u6837\u7684\u6280\u672f\u8981\u6c42\u3002\n-Laurie Voss(@seldo)2020\u5e745\u670815\u65e5\u3002\nGitHub\u4e4b\u6240\u4ee5\u6210\u4e3a\u5f00\u6e90\u4ee3\u7801\u7684\u53d1\u6e90\u5730\uff0c\u662f\u56e0\u4e3a\u5b83\u975e\u5e38\u6709\u7528\uff0c\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u5e76\u4e14\u6784\u5efa\u5728\u4e8b\u5b9e\u4e0a\u7684\u6e90\u4ee3\u7801\u7248\u672c\u63a7\u5236\u5de5\u5177git\u4e4b\u4e0a\u3002\u4eceDeno CLI\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4e0d\u5e94\u8be5\u5bf9\u60a8\u7684\u6e90\u4ee3\u7801\u6765\u6e90\u6709\u4efb\u4f55\u6280\u672f\u9650\u5236\uff0c\u800c\u662f\u7531\u66f4\u5e7f\u6cdb\u7684\u751f\u6001\u7cfb\u7edf\u6765\u521b\u5efa\u548c\u4e0b\u653e\u4f7fDeno\u7684\u4ee3\u7801\u53ef\u88ab\u53d1\u73b0\u7684\u65b9\u6cd5\uff0c\u5f88\u53ef\u80fd\u662f\u4ee5\u6211\u4eec\u8fd9\u4e9b\u521b\u5efaCLI\u7684\u4eba\u4ece\u672a\u60f3\u8fc7\u7684\u521b\u65b0\u65b9\u5f0f\u3002\n\u5728NPM\u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u6210\u4e86\u4e00\u4e2a\u95ee\u9898\u3002\u7531\u4e8e\u5bf9\u8bed\u4e49\u7248\u672c\u63a7\u5236\u7684\u4e25\u91cd\u4f9d\u8d56\uff0c\u4ee5\u53ca\u5f80\u5f80\u6765\u81eaNode.js/npm\u751f\u6001\u7cfb\u7edf\u7684\u590d\u6742\u4f9d\u8d56\u56fe\uff0c\u62e5\u6709\u53ef\u91cd\u590d\u7684\u6784\u5efa\u6210\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u95ee\u9898\u3002Yarn\u5f15\u5165\u4e86\u9501\u6587\u4ef6\u7684\u6982\u5ff5\uff0cnpm\u7d27\u968f\u5176\u540e\u3002\n\u6211\u4e2a\u4eba\u7684\u611f\u89c9\u662f\uff0c\u8fd9\u6709\u70b9\u50cf\u662f\u5c3e\u5df4\u5728\u6447\u72d7\uff0c\u56e0\u4e3a\u751f\u6001\u7cfb\u7edf\u4e2d\u5f00\u53d1\u8005\u7684\u884c\u4e3a\u9020\u6210\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7136\u540e\u9700\u8981\u4e00\u4e2a\u4e0d\u5b8c\u7f8e\u7684\u89e3\u51b3\u65b9\u6848\u6765\u89e3\u51b3\u5b83\u3002\u6211\u4eec\u4e2d\u4efb\u4f55\u4e00\u4e2a\u957f\u671f\u4f7f\u7528\u8be5\u751f\u6001\u7cfb\u7edf\u7684\u4eba\u90fd\u77e5\u9053\uff0c\u89e3\u51b3\u8bb8\u591a\u95ee\u9898\u7684\u65b9\u6cd5\u662frm-rf node_module package-lock.json&amp\uff1b&amp\uff1bnpm install(rm-rf\u8282\u70b9\u6a21\u5757\u5305-lock.json&amp\uff1b&amp\uff1bnpm install)\u3002\n\u8bdd\u867d\u5982\u6b64\uff0c\u5fb7\u8bfa\u5bf9\u6b64\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u6848\u3002\u9996\u5148\uff0c\u662f\u8fea\u8bfa\u7f13\u5b58\u6a21\u5757\u3002\u8be5\u7f13\u5b58\u53ef\u4ee5\u7b7e\u5165\u5230\u60a8\u7684\u6e90\u4ee3\u7801\u7ba1\u7406\u4e2d\uff0c\u5e76\u4e14--cached-only\u6807\u5fd7\u5c06\u786e\u4fdd\u4e0d\u4f1a\u5c1d\u8bd5\u68c0\u7d22\u8fdc\u7a0b\u6a21\u5757\u3002DENO_DIR\u73af\u5883\u53d8\u91cf\u53ef\u7528\u4e8e\u6307\u5b9a\u7f13\u5b58\u7684\u4f4d\u7f6e\uff0c\u4ee5\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002\n\u5176\u6b21\uff0cDeno\u652f\u6301\u9501\u5b9a\u6587\u4ef6\u3002--lock lock.json--lock-write\u5c06\u5199\u51fa\u4e00\u4e2a\u9501\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u7ed9\u5b9a\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6240\u6709\u4f9d\u8d56\u9879\u7684\u6563\u5217\u3002\u8fd9\u5c06\u7528\u4e8e\u5728\u4f7f\u7528--lock lock.json\u65f6\u9a8c\u8bc1\u5c06\u6765\u7684\u8fd0\u884c\u3002\n\u8fd8\u6709\u51e0\u4e2a\u5176\u4ed6\u547d\u4ee4\u53ef\u4ee5\u4f7f\u7ba1\u7406\u53ef\u91cd\u590d\u6784\u5efa\u3002Deno\u7f13\u5b58\u5c06\u89e3\u6790\u6240\u63d0\u4f9b\u6a21\u5757\u7684\u6240\u6709\u4f9d\u8d56\u9879\uff0c\u5e76\u586b\u5145Deno\u7f13\u5b58\u3002Deno\u6346\u7ed1\u5305\u53ef\u7528\u4e8e\u751f\u6210\u5de5\u4f5c\u8d1f\u8f7d\u7684\u5355\u4e2a\u6587\u4ef6\u201c\u6784\u5efa\u201d\uff0c\u6240\u6709\u4f9d\u8d56\u9879\u90fd\u5df2\u89e3\u6790\u5e76\u5305\u542b\u5728\u8be5\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u672a\u6765\u7684Deno\u8fd0\u884c\u547d\u4ee4\u53ea\u9700\u8981\u8be5\u5355\u4e2a\u6587\u4ef6\u3002\n\u8fd9\u662f\u6211\u8ba4\u4e3a\u6211\u4eec\u6709\u4e00\u4e2a\u626d\u66f2\u7684\u601d\u7ef4\u6a21\u5f0f\u7684\u53e6\u4e00\u4e2a\u9886\u57df\u3002\u65e0\u8bba\u51fa\u4e8e\u4ec0\u4e48\u539f\u56e0\uff0c\u6211\u4eec\u90fd\u4fe1\u4efb\u96c6\u4e2d\u6ce8\u518c\u8868\u4e2d\u7684\u4ee3\u7801\u3002\u6211\u4eec\u751a\u81f3\u60f3\u90fd\u4e0d\u60f3\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u6211\u4eec\u76f8\u4fe1\u8be5\u4ee3\u7801\u5df2\u7ecf\u5b8c\u5168\u5ba1\u67e5\u4e86\u5b83\u7684\u6240\u6709\u4f9d\u8d56\u9879\uff0c\u5e76\u4e14\u8fd9\u4e9b\u4f9d\u8d56\u9879\u662f\u503c\u5f97\u4fe1\u4efb\u7684\u3002\u6211\u4eec\u5feb\u901f\u641c\u7d22\u5e76\u952e\u5165npm\uff0c\u5b89\u88c5\u4e00\u4e9b\u968f\u673a\u5305\uff0c\u7136\u540e\u60f3\u201c\u8fd9\u5f88\u597d\uff01\u201d\u6211\u8ba4\u4e3a\uff0cNPM\u4e00\u63fd\u5b50\u751f\u6001\u7cfb\u7edf\u5df2\u7ecf\u8ba9\u4eba\u4ea7\u751f\u4e86\u4e00\u79cd\u81ea\u6ee1\u7684\u611f\u89c9\u3002\n\u4e3a\u4e86\u5f25\u8865\u8fd9\u79cd\u677e\u61c8\u548c\u81ea\u6ee1\uff0c\u6211\u4eec\u5728\u6211\u4eec\u7684\u5de5\u5177\u94fe\u4e2d\u5b9e\u73b0\u4e86\u5b89\u5168\u76d1\u63a7\u8f6f\u4ef6\uff0c\u4ee5\u5206\u6790\u6211\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\u548c\u6570\u5343\u884c\u4ee3\u7801\uff0c\u8ba9\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4e00\u4e9b\u4ee3\u7801\u53ef\u80fd\u662f\u53ef\u5229\u7528\u7684\u3002\u516c\u53f8\u8bbe\u7f6e\u79c1\u6709\u6ce8\u518c\u4e2d\u5fc3\u6765\u6258\u7ba1\u53ef\u80fd\u6bd4\u5355\u4e2a\u516c\u5171\u6ce8\u518c\u4e2d\u5fc3\u7a0d\u5fae\u591a\u5ba1\u67e5\u7684\u5305\u3002\n\u611f\u89c9\u8fd9\u91cc\u7684\u623f\u95f4\u91cc\u6709\u4e00\u5934\u5927\u8c61\u3002\u6700\u597d\u7684\u7b56\u7565\u662f\u6211\u4eec\u4e0d\u80fd\u76f8\u4fe1\u4efb\u4f55\u4ee3\u7801\u3002\u4e00\u65e6\u6211\u4eec\u5efa\u7acb\u4e86\u8fd9\u4e00\u70b9\uff0c\u90a3\u4e48\u6253\u5f00\u5b83\u7684\u5907\u4efd\u5c31\u53d8\u5f97\u66f4\u5bb9\u6613\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u5305\u7ba1\u7406\u5668\u548c\u4e2d\u592e\u6ce8\u518c\u8868\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u751a\u81f3\u5bf9\u8fd9\u4e2a\u95ee\u9898\u6709\u5b9e\u8d28\u6027\u7684\u5e2e\u52a9\uff0c\u90a3\u6211\u4eec\u5c31\u662f\u5728\u6b3a\u9a97\u81ea\u5df1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u8ba4\u4e3a\u4ed6\u4eec\u662f\u5728\u5229\u7528\u8ba9\u6211\u4eec\u7684\u8b66\u536b\u5931\u671b\u3002\u201c\u55ef\uff0c\u5b83\u662f\u5728NPM\u4e0a\u64ad\u51fa\u7684\uff0c\u5982\u679c\u5b83\u5bf9\u6211\u4e0d\u597d\uff0c\u80af\u5b9a\u4f1a\u6709\u4eba\u628a\u5b83\u64a4\u4e0b\u3002\u201d\n\u8fea\u8bfa\u5728\u8fd9\u65b9\u9762\u6ca1\u6709\u6211\u60f3\u7684\u90a3\u4e48\u597d\uff0c\u4f46\u5b83\u662f\u4ece\u4e00\u4e2a\u5f88\u597d\u7684\u4f4d\u7f6e\u5f00\u59cb\u7684\u3002\u5b83\u5728\u542f\u52a8\u65f6\u6ca1\u6709\u4fe1\u4efb\uff0c\u5e76\u4e14\u63d0\u4f9b\u76f8\u5f53\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u3002\u6211\u4e2a\u4eba\u4e0d\u559c\u6b22\u7684\u4e00\u4ef6\u4e8b\u662f\u6709-A\u6807\u5fd7\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u5728\u8bf4\u201c\u54e6\uff0c\u8036\uff0c\u5141\u8bb8\u4e00\u5207\u201d\uff0c\u8fd9\u5bf9\u4e8e\u6cae\u4e27\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\u662f\u4e00\u4ef6\u975e\u5e38\u5bb9\u6613\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u4e0d\u662f\u5f04\u6e05\u695a\u4ed6\u4eec\u771f\u6b63\u9700\u8981\u7684\u662f\u4ec0\u4e48\u3002\n\u4e5f\u5f88\u96be\u6253\u7834\u8fd9\u4e9b\u6743\u9650\uff0c\u8bf4\u201c\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u91cc\u7684\u53e6\u4e00\u6bb5\u4ee3\u7801\u4e0d\u80fd\u201d\uff0c\u6216\u8005\u5f53\u4ee3\u7801\u63d0\u793a\u63d0\u5347\u6743\u9650\u65f6\uff0c\u8fd9\u4e9b\u4ee3\u7801\u662f\u4ece\u54ea\u91cc\u6765\u7684\u3002\u5e0c\u671b\u6211\u4eec\u80fd\u627e\u51fa\u4e00\u79cd\u6613\u4e8e\u4f7f\u7528\u7684\u673a\u5236\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5728\u8fd0\u884c\u65f6\u5c06\u662f\u6709\u6548\u548c\u9ad8\u6027\u80fd\u7684\u4e1c\u897f\uff0c\u8bd5\u56fe\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u3002\n\u4e0d\u8fc7\uff0c\u5728\u6211\u770b\u6765\uff0c\u6700\u8fd1\u7684\u4e00\u4e2a\u53d8\u5316\u662f\uff0cDeno\u4e0d\u518d\u5141\u8bb8\u4f60\u964d\u4f4e\u8fdb\u53e3\u5546\u54c1\u7684\u7b49\u7ea7\uff0c\u8fd9\u662f\u4e00\u4e2a\u597d\u7684\u53d8\u5316\u3002\u5982\u679c\u67d0\u4e2a\u5185\u5bb9\u662f\u4ecehttps\uff1a//\u5bfc\u5165\u7684\uff0c\u5219\u5b83\u53ea\u80fd\u4ece\u5176\u4ed6https\uff1a//\u4f4d\u7f6e\u5bfc\u5165\u3002\u8fd9\u9075\u5faa\u4e86\u4e0d\u80fd\u964d\u7ea7\u4f20\u8f93\u7684\u6d4f\u89c8\u5668\u6a21\u578b\u3002\u6211\u4ecd\u7136\u8ba4\u4e3a\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u627c\u6740\u4efb\u4f55\u4e0d\u50cf\u670d\u52a1\u5de5\u4f5c\u8005\u9700\u8981https://\uff0c\u90a3\u6837\u7684\u8fdc\u7a0b\u8fdb\u53e3\u662f\u4ef6\u597d\u4e8b\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u62ed\u76ee\u4ee5\u5f85\u3002\n\u6211\u8ba4\u4e3a\u6211\u4eec\u9700\u8981\u5766\u7387\u5730\u8c08\u8bbaNPM\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u8001\u5b9e\u8bf4\uff0c\u5b83\u574f\u4e86\u3002\u4e00\u4e2a\u652f\u6301\u6bcf\u5468\u4e0b\u8f7d\u548c\u5b89\u88c55\u884c\u4ee3\u78013000\u4e07\u6b21\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5728\u8fc7\u53bb9\u5e74\u91cc\u4e00\u76f4\u5b58\u5728\u4e8e\u6bcf\u4e2a\u6d4f\u89c8\u5668\u4e2d\uff0c\u800cNode.jis\u662f\u4e00\u4e2a\u652f\u79bb\u7834\u788e\u7684\u751f\u6001\u7cfb\u7edf\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b9e\u9645\u4ee3\u7801\u662f132\u5b57\u8282\uff0c\u4f46\u662f\u5305\u5927\u5c0f\u662f3.4KB\u3002\u53ef\u8fd0\u884c\u4ee3\u7801\u662f\u5305\u5927\u5c0f\u76843.8%\u3002\u201c\u8fd9\u5f88\u597d\uff01\u201d\n\u6211\u7684\u89c2\u70b9\u662f\uff0c\u8fd9\u5176\u4e2d\u6d89\u53ca\u5230\u51e0\u4e2a\u56e0\u7d20\u3002\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u662f\u6211\u4eec\u98a0\u5012\u4e86\u6a21\u578b\uff0c\u6211\u8bf4\u8fc7Deno\u662f\u4ee3\u7801\u7684\u6d4f\u89c8\u5668\u3002\u95ee\u9898\u662f\uff0c\u8fd9\u79cd\u5411\u540e\u7684\u6a21\u5f0f\u5df2\u7ecf\u5f71\u54cd\u4e86\u6211\u4eec\u521b\u5efa\u7f51\u7ad9\u7684\u65b9\u5f0f\u3002\u867d\u7136\u6211\u4eec\u6ca1\u6709\u4e2d\u592e\u6ce8\u518c\u8868\uff0c\u4f46\u5f53\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u7f51\u7ad9\u65f6\uff0c\u6211\u4eec\u4e0b\u8f7d\u6211\u4eec\u4f9d\u8d56\u7684\u6240\u6709\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u70d8\u7119\u6210\u6211\u4eec\u52a0\u8f7d\u5230\u670d\u52a1\u5668\u4e0a\u7684\u4e1c\u897f\uff0c\u7136\u540e\u6bcf\u4e2a\u7528\u6237\u5c06\u4e00\u5806\u4ee3\u7801\u4e0b\u8f7d\u5230\u4ed6\u4eec\u7684\u672c\u5730\u673a\u5668\u4e0a\u3002\u4e00\u4e9b\u8bc1\u636e\u8868\u660e\uff0c\u4e0b\u8f7d\u4ee3\u7801\u4e2d\u53ea\u670910%\u5de6\u53f3\u662f\u8be5\u7ad9\u70b9\u6216Web\u5e94\u7528\u7a0b\u5e8f\u72ec\u6709\u7684\uff0c\u5176\u4f59\u7684\u90fd\u662f\u6211\u4eec\u4e0b\u8f7d\u5230\u5f00\u53d1\u5de5\u4f5c\u7ad9\u5e76\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u6240\u6709\u4ee3\u7801\u3002\u8fd9\u4e00\u6a21\u5f0f\u6b63\u5728\u88ab\u6253\u7834\uff0c\u8fd9\u662f\u79ef\u96ea\u7b49\u89e3\u51b3\u65b9\u6848\u8bd5\u56fe\u89e3\u51b3\u7684\u4e00\u4e9b\u95ee\u9898\u3002\n\u53e6\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u662f\u6211\u4eec\u7684\u4f9d\u8d56\u9879\u6ca1\u6709\u4e0e\u6211\u4eec\u7684\u4ee3\u7801\u8026\u5408\u3002\u6211\u4eec\u5c06\u4f9d\u8d56\u9879\u653e\u5728Package.json\u4e2d\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u4f7f\u7528\u4e86Json\uff0c\u90a3\u4e48\u65e0\u8bba\u8be5\u4ee3\u7801\u662f\u5426\u4f7f\u7528\uff0c\u90fd\u662f\u5b8c\u5168\u89e3\u8026\u7684\u3002\u867d\u7136\u6211\u4eec\u7684\u4ee3\u7801\u8868\u8fbe\u4e86\u6211\u4eec\u5728\u5176\u4ed6\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u5185\u5bb9\uff0c\u4f46\u5b83\u4e0e\u8be5\u4ee3\u7801\u7684\u7248\u672c\u662f\u975e\u5e38\u677e\u6563\u8026\u5408\u7684\u3002\u5b83\u5305\u542b\u5728Package.json\u4e2d\uff0c\u5c3d\u7ba1\u5b83\u5bf9\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u6709\u6700\u5927\u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u662f\u5b9e\u9645\u4f7f\u7528\u4f9d\u8d56\u4ee3\u7801\u7684\u4ee3\u7801\u3002\n\u8fd9\u5c31\u628a\u6211\u4eec\u5e26\u5230\u4e86Deno\u6a21\u5f0f\uff0c\u6211\u559c\u6b22\u79f0\u4e4b\u4e3aDep-in-JS\uff0c\u56e0\u4e3a\u6240\u6709\u9177\u7684\u5b69\u5b50\u90fd\u5728\u505a*-in-JS\u7684\u4e8b\u60c5\u3002\u663e\u5f0f\u5730\u5c06\u6211\u4eec\u7684\u5916\u90e8\u4f9d\u8d56\u9879\u58f0\u660e\u4e3aURL\u610f\u5473\u7740\u4ee3\u7801\u4f9d\u8d56\u4e8e\u5176\u4ed6\u4ee3\u7801\u662f\u7b80\u6d01\u548c\u6e05\u6670\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u7684\u4ee3\u7801\u548c\u4f9d\u8d56\u9879\u7d27\u5bc6\u8026\u5408\u5728\u4e00\u8d77\u3002\u5982\u679c\u8981\u67e5\u770b\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u53ea\u9700\u5bf9\u672c\u5730\u6216\u8fdc\u7a0b\u6a21\u5757\u4f7f\u7528Deno\u4fe1\u606f\uff1a\n$DENO INFO https://deno.land/x/oak/examples/server.tslocal\uff1a$deno/deps/https/deno.land/d355242ae8430f3116c34165bdae5c156dca21aeef521e45acb51fcd21c9f724type\uff1a\u7c7b\u578b\u811a\u672c\u7f16\u8bd1\uff1a$deno/gen/https/deno.land/x/oak/examples/server.ts.jsmap\uff1a$deno/gen/https/deno.land/x/oak/examples/server.ts.js.mapdeps:https://deno.land/x/oak/examples/server.ts https://deno.land/std@0.53.0/fmt/colors\u251c\u2500\u2500\u3002.TS https://deno.land/x/oak/mod.ts https://deno.land/x/oak/application.ts https://deno.land/x/oak/context.ts https://deno.land/x/oak/cookies.ts https://deno.land/x/oak/httpError.ts https://deno.land/x\u2514\u2500\u252c\u251c\u2500\u252c\u2502\u251c\u2500\u252c\u2502\u2502\u251c\u2500\u2500\u2502\u2502\u251c\u2500\u252c\u2502\u2514\u2500\u252c.ts\u3002/Oak/Deps.ts https://deno.land/std@0.53.0/hash/sha256.ts https://deno.land/std@0.53.0/http/server.ts https://deno.land/std@0.53.0/encoding/utf8.ts https://deno.land/std@0\u2502\u251c\u2500\u2500\u2502\u251c\u2500\u252c\u2502\u251c\u2500\u2500\u2502\u251c\u2500\u252cOak\u3002.53.0/io/bufio.ts https://deno.land/std@0.53.0/io/util.ts--snip--\u2502\u251c\u2500\u252c\u3002\nDeno\u5bf9\u4ee3\u7801\u7684\u201c\u7248\u672c\u201d\u6ca1\u6709\u5f3a\u70c8\u7684\u770b\u6cd5\u3002URL\u5c31\u662fURL\uff0c\u867d\u7136Deno\u9700\u8981\u9002\u5f53\u7684\u5a92\u4f53\u7c7b\u578b\u624d\u80fd\u7406\u89e3\u5982\u4f55\u5904\u7406\u4ee3\u7801\uff0c\u4f46\u662f\u6240\u6709\u5173\u4e8e\u63d0\u4f9b\u4ec0\u4e48\u4ee3\u7801\u7684\u201c\u610f\u89c1\u201d\u90fd\u7559\u7ed9Web\u670d\u52a1\u5668\u3002\u670d\u52a1\u5668\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u5176\u6838\u5fc3\u5185\u5bb9\u7684\u8bed\u4e49\u7248\u672c\u63a7\u5236\uff0c\u6216\u8005\u6267\u884cURL\u5230\u5b83\u60f3\u8981\u7684\u8d44\u6e90\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u201c\u795e\u5947\u201d\u6620\u5c04\u3002\u5fb7\u8bfa\u4e0d\u5728\u4e4e\u3002\u4f8b\u5982\uff0chttps://deno.land/x/\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2aURL\u91cd\u5b9a\u5411\u670d\u52a1\u5668\uff0c\u5b83\u91cd\u5199URL\u4ee5\u5728\u91cd\u5b9a\u5411\u7684URL\u4e2d\u5305\u542bGIT\u63d0\u4ea4\u5f0f\u7684\u5f15\u7528\u3002\u56e0\u6b64\uff0chttps://deno.land/x/oak@v4.0.0/mod.ts\u53d8\u6210\u4e86https://raw.githubusercontent.com/oakserver/oak/v4.0.0/mod.ts\uff0c\uff0cGitHub\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u7248\u672c\u5316\u6a21\u5757\u3002\n\u5f53\u7136\uff0c\u5728\u4ee3\u7801\u5e93\u4e2d\u4f20\u64ad\u201c\u7248\u672c\u5316\u201d\u7684\u8fdc\u7a0bURL\u6ca1\u6709\u591a\u5927\u610f\u4e49\uff0c\u6240\u4ee5\u4e0d\u8981\u8fd9\u4e48\u505a\u3002\u4e0d\u8fc7\uff0c\u4f9d\u8d56\u9879\u53ea\u662f\u4f5c\u4e3a\u4ee3\u7801\u7f16\u5199\u7684\u4e00\u5927\u4f18\u70b9\u662f\uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u65b9\u5f0f\u6765\u6784\u5efa\u5b83\u4eec\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u7ea6\u5b9a\u662f\u4f7f\u7528des.ts\uff0c\u5b83\u53ef\u4ee5\u91cd\u65b0\u5bfc\u51fa\u60a8\u53ef\u80fd\u9700\u8981\u7684\u6240\u6709\u4f9d\u8d56\u9879\u3002\u770b\u770bOak\u670d\u52a1\u5668\u7684\u7248\u672c\uff1a\n//\u7248\u6743\u6240\u67092018-2020\u6a61\u6811\u7f51\u4f5c\u8005\u3002\u7248\u6743\u6240\u6709\u3002\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u8bb8\u53ef\u8bc1\u3002//\u6b64\u6587\u4ef6\u5305\u542bOak\u6240\u4f9d\u8d56\u7684\u5916\u90e8\u4f9d\u8d56\u9879//`std`\u4f9d\u8d56\u9879\u4ece&#34\uff1bhttps://deno.land/std@0.51.0/hash/sha256.ts&#34\uff1b\uff1bexport{Response\uff0cServe\uff0cServer\uff0cServerRequest\uff0cServeTLS}\u4ece&#34\uff1bhttps://deno.land/std@0.51.0/http/server.ts&#34\uff1b\uff1bexport{STATUS\uff0cSTATUS_TEXT\uff0c}\u5bfc\u51fa{HmacSha256}\uff0c\u6765\u81ea&#34\uff1bhttps://deno.land/std@0.51.0/http/http_status.ts&#34\uff1b\uff1bexport{Cookie\uff0cCookie\uff0csetCookie\uff0cgetCookie\uff0cDelCookie\uff0c}\u6765\u81ea&#34\uff1bhttps://deno.land/std@0.51.0/http/cookie.ts&#34\uff1b\uff1bexport{basename\uff0cextname\uff0cJoin\uff0cisAbsolute\uff0cNormize\uff0cParse\uff0cResolve\uff0cSep}\u6765\u81ea&#34\uff1bhttps://deno.land/std@0.51.0/path/mod.ts&#34\uff1b\uff1b\u7684{BaseName\uff0cExtName\uff0cJoin\uff0cisAbsolute\uff0cNormize\uff0cParse\uff0cResolve\uff0cSep\u4ece&#34\uff1b\u5bfc\u51fa{assert}\u3002https://deno.land/std@0.51.0/testing/asserts.ts&#34\uff1b\uff1b//\u7b2c\u4e09\u65b9\u4f9d\u8d56\u9879\u4ece&#34\uff1bhttps://deno.land/x/media_types@v2.3.1/m\u5bfc\u51fa{Content Type\uff0cLookup\uff0c}\n\u6211\u521b\u5efa\u4e86Oak\u670d\u52a1\u5668\uff0c\u5e76\u901a\u8fc7\u5927\u7ea640\u4e2a\u7248\u672c\u7684Deno\u548cDeno STD\u5e93\u7ef4\u62a4\u4e8618\u4e2a\u6708\uff0c\u5305\u62ec\u5c06media_type\u4ece\u5185\u90e8\u79fb\u52a8\u5230OAK\uff0c\u518d\u79fb\u5230STD\u5e93\uff0c\u7ed3\u679c\u53ea\u662f\u5c06\u5176\u4ece\u6807\u51c6\u5e93\u201c\u5f39\u51fa\u201d\u6210\u4e3a\u81ea\u5df1\u7684\u4e1c\u897f\u3002\u6211\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u201c\u563f\uff0c\u6211\u9700\u8981\u80cc\u5305\u7ecf\u7406\u5e2e\u6211\u7ba1\u7406\u8fd9\u4ef6\u4e8b\u201d\u3002\nTypeScript\u7684\u597d\u5904\u4e4b\u4e00\u662f\u60a8\u53ef\u4ee5\u5168\u9762\u9a8c\u8bc1\u60a8\u7684\u4ee3\u7801\u4e0e\u5176\u4ed6\u4ee3\u7801\u7684\u517c\u5bb9\u6027\u3002\u5982\u679c\u60a8\u7684\u4f9d\u8d56\u9879\u662f\u4e3aDeno\u7f16\u5199\u7684\u201c\u539f\u59cb\u201d\u6253\u5b57\u811a\u672c\uff0c\u8fd9\u5f88\u597d\uff0c\u4f46\u662f\u5047\u8bbe\u60a8\u5e0c\u671b\u5229\u7528\u5c06\u6253\u5b57\u811a\u672c\u9884\u5904\u7406\u4e3aJavaScript\u7684\u4f18\u52bf\uff0c\u4f46\u4ecd\u7136\u80fd\u591f\u5b89\u5168\u5730\u4f7f\u7528\u8fdc\u7a0b\u4ee3\u7801\u3002Deno\u652f\u6301\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u6700\u65e0\u7f1d\u7684\u662f\u5bf9X-TypeScript-Types\u5934\u6587\u4ef6\u7684\u652f\u6301\u3002\u6b64\u6807\u5934\u5411Deno\u6307\u793a\u7c7b\u578b\u6587\u4ef6\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5728\u5bf9\u60a8\u6240\u4f9d\u8d56\u7684JavaScript\u6587\u4ef6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u65f6\u53ef\u4ee5\u4f7f\u7528\u8be5\u6807\u5934\u3002Pika CDN\u652f\u6301\u8fd9\u4e00\u70b9\u3002CDN\u4e0a\u53ef\u7528\u7684\u3001\u5177\u6709\u5173\u8054\u7c7b\u578b\u7684\u4efb\u4f55\u5305\u90fd\u5c06\u63d0\u4f9b\u8be5\u6807\u5934\uff0cDeno\u4e5f\u5c06\u83b7\u53d6\u8fd9\u4e9b\u7c7b\u578b\u5e76\u4f7f\u7528\u8be5WHENTYPE\u68c0\u67e5\u6587\u4ef6\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u5c06\u8fdc\u7a0b(\u6216\u672c\u5730)\u4f9d\u8d56\u9879\u201c\u91cd\u65b0\u6620\u5c04\u201d\u5230\u4ee3\u7801\u4e2d\u8868\u8fbe\u7684\u5185\u5bb9\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u7a33\u5b9a\u7684\u5bfc\u5165\u6620\u5c04\u5b9e\u73b0\u3002\u8fd9\u662f\u4e00\u4e2a\u63d0\u6848\u89c4\u8303\uff0c\u662fW3C\u5b75\u5316\u5668\u7684\u4e00\u90e8\u5206\uff0c\u6d4f\u89c8\u5668\u6807\u51c6\u5c31\u51fa\u81ea\u8be5\u5b75\u5316\u5668\u3002\u5b83\u5141\u8bb8\u63d0\u4f9b\u4e00\u4e2a\u6620\u5c04\uff0c\u8be5\u6620\u5c04\u5c06\u4ee3\u7801\u4e2d\u7684\u7279\u5b9a\u4f9d\u8d56\u9879\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u8d44\u6e90\uff0c\u65e0\u8bba\u662f\u672c\u5730\u6587\u4ef6\u8fd8\u662f\u8fdc\u7a0b\u6a21\u5757\u3002\n\u6211\u4eec\u5728\u5fb7\u8bfa\u5b9e\u65bd\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u4e3a\u6211\u4eec\u771f\u7684\u5e0c\u671b\u5b83\u80fd\u88ab\u5e7f\u6cdb\u91c7\u7528\u3002\u9057\u61be\u7684\u662f\uff0c\u8fd9\u53ea\u662fChrome\u7684\u539f\u521b\u8bd5\u9a8c\uff0c\u8fd8\u6ca1\u6709\u5f97\u5230\u66f4\u5e7f\u6cdb\u7684\u91c7\u7528\u3002\u8fd9\u5bfc\u81f4\u6211\u4eec\u628a\u5b83\u653e\u5728Deno 1.0\u7684--\u4e0d\u7a33\u5b9a\u6807\u5fd7\u540e\u9762\u3002\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6b7b\u80e1\u540c\u7684\u98ce\u9669\uff0c\u5e94\u8be5\u907f\u514d\u3002\n\u6211\u6000\u7591\u5f88\u591a\u4eba\u4ecd\u7136\u5e26\u7740\u5bf9Deno\u7684\u6a21\u578b\u7684\u53cd\u5bf9\u6e05\u5355\u800c\u6765\u3002\u6211\u8ba4\u4e3a\u5fb7\u8bfa\u8bd5\u56fe\u91c7\u53d6\u7684\u7b56\u7565\uff0c\u4e5f\u662f\u6211\u975e\u5e38\u8d5e\u540c\u7684\uff0c\u662f\u5728\u771f\u6b63\u7684\u95ee\u9898\u51fa\u73b0\u65f6\u5904\u7406\u5b83\u4eec\u3002\u6211\u542c\u5230\u7684\u8bb8\u591a\u53cd\u5bf9\u610f\u89c1\u90fd\u6765\u81ea\u90a3\u4e9b\u521a\u63a5\u89e6Deno\u7684\u4eba\uff0c\u4ed6\u4eec\u6ca1\u6709\u4f7f\u7528\u8fc7Deno\uff0c\u4e5f\u6ca1\u6709\u8bd5\u56fe\u7406\u89e3\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u65b9\u5f0f\u3002\n\u8bdd\u867d\u5982\u6b64\uff0c\u5982\u679c\u6211\u4eec\u96c6\u4f53\u9047\u5230\u95ee\u9898\uff0c\u5e76\u4e14Deno CLI\u4e2d\u6709\u8feb\u5207\u9700\u8981\u66f4\u6539\u7684\u4e1c\u897f\uff0c\u6211\u76f8\u4fe1\u5b83\u4f1a\u53d1\u751f\uff0c\u4f46\u662f\u5f88\u591a\u95ee\u9898\u6839\u672c\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u6709\u5176\u4ed6\u65b9\u6cd5\u6765\u89e3\u51b3\u5b83\u4eec\uff0c\u800c\u4e0d\u9700\u8981\u60a8\u7684\u8fd0\u884c\u65f6\u6709\u5f3a\u70c8\u7684\u610f\u89c1\u6216\u8026\u5408\u5230\u5916\u90e8\u7a0b\u5e8f\u6765\u7ba1\u7406\u60a8\u7684\u4ee3\u7801\u3002\n\u56e0\u6b64\uff0c\u6211\u5bf9\u60a8\u7684\u6311\u6218\u662f\uff0c\u7a0d\u5fae\u8003\u8651\u4e00\u4e0b\u6ca1\u6709\u5305\u7ba1\u7406\u5668\u6216\u96c6\u4e2d\u5305\u5b58\u50a8\u5e93\uff0c\u770b\u770b\u8fdb\u5c55\u5982\u4f55\u3002\u4f60\u53ef\u80fd\u518d\u4e5f\u56de\u4e0d\u53bb\u4e86\uff01", "note_en": "I started contributing to Deno soon after Ry made the prototype visible inMay 2018. The most frequent question that people have is \u201cwhere is the packagemanager?\u201d which often times isn\u2019t even in the form of a question. It isstatements like \u201cI thought Deno took security seriously, and just downloadingresources off the internet is insecure.\u201d or \u201cHow can I possibly manage mydependencies?\u201d\n In my opinion, we need to shift our mental model. Lots of folks take theubiquity of package managers and centralized code registries as a requirementto have a package manager and a centralized code registries. Because they existdoesn\u2019t mean they are required. They came into existence because they solvedproblems in a particular way, and we have just accepted them as the only way tosolve that problem. I would argue that isn\u2019t true.\n  In order to publish a website, we don\u2019t login to a central Google server, andupload our website to the registry. Then if someone wants to view our website,they use a command line tool, which adds an entry to our  browser.json file onour local machine and goes and fetches the whole website, plus any otherwebsites that the one website links to to our local  websites directory beforewe then fire up our browser to actually look at the website. That would beinsane, right? So why accept that model for running code?\n The Deno CLI works like a browser, but for code. You import a URL in the codeand Deno will go and fetch that code and cache it locally, just like a browser.Also, like a browser, your code runs in a sandbox, which has zero trust of thecode you are running, irrespective of the source. You, the person invoking thecode, get to tell that code what it can and can\u2019t do, externally. Also, like abrowser, code can ask you permission to do things, which you can choose to grantor deny.\n The HTTP protocol provides everything that is needed to provide informationabout the code, and Deno tries to fully leverage that protocol, without havingto create a new protocol.\n  The first thing to think about is that, like a browser, the Deno CLI doesn\u2019twant to have any opinions about what code you run. It lays out the rules of howcode is fetched, and how it sandboxes itself from the machine it runs on. In myopinion, that is as much of an opinion a runtime should have.\n In the Node.js/npm ecosystem, we have conflated the management of code on ourlocal machine, with a centralized registry of code to help facilitate discovery.In my opinion, both have really bad flaws.\n Back in the early days of the internet, we experimented with npm type ofdiscoverability. You would go add your website to Yahoo! under the rightcategorization and people would come along, maybe use the search function, butit was all structured based on the opinions of those providing the content, notreally based on optimizing for the needs of the consumer. Eventually along cameGoogle. Why did Google win? Because it was useful. It indexed websites in away that matched simple expressions of need (search terms) with the mostrelevant web pages that met that need, looking at multiple factors, includingmeta data provided the content provider as one factor in the mix.\n While we don\u2019t have that model quite yet for code for Deno, it is a model thatworks. In addition, we use Google because it solves problems for us, instead ofbeing told \u201cyou must use Google\u201d, as well as there are also other viablealternatives to Google.\n I got into a bit of a debate with Laurie Voss on twitter, someone who knows afair deal about the npm ecosystem I would say. He argued that Deno needed apackage manager, and this blog post is a longer winded version of the thoughtsI wanted to express, but Laurie raised a very valid point.\n And yet there all our code is, in the same place, on GitHub, because the problems of maintaining a software ecosystem are social and reputational ones that lead to a centralized system, despite there being no technical requirement that it be that way.\n\u2014 Laurie Voss (@seldo)  May 15, 2020\n GitHub has become the home for open source code, because it was useful andsolved problems, and built on top of the  de facto source code versioning tool,git. From the Deno CLI perspective, there should be no technical restrictionsto where you source code from, it is up to the wider eco-system to create andevolve ways to make code for Deno discoverable, probably in innovative ways thatcould never have been conceived by those of us creating the CLI.\n  In the npm eco-system, this became a problem. Because of the heavy reliance onsemantic versioning, and the complex dependency graphs that tend to come fromthe Node.js/npm eco-system, having a repeatable build became a real problem.Yarn introduced the concept of lock files, of which npm followed suit.\n My personal feeling is it was a bit of the tail wagging the dog, in that thebehaviours of developers in the eco-system created a problem that then neededan imperfect solution to fix it. Any of us that have lived with the eco-systemfor a long time know that the fix to a lot of issues is rm -rf node_modules package-lock.json &amp;&amp; npm install.\n  That being said, Deno has two solutions for that. First, is that Deno cachesmodules. That cache can be checked into your source control, and the --cached-only flag will ensure that there is not attempts to retrieve remotemodules. The  DENO_DIR environment variable can be used to specify where thecache is located to provide further flexibility.\n Second, Deno supports lock files.  --lock lock.json --lock-write would writeout a lock file with hashes of all the dependencies for a given workload. Thiswould be used to validate future runs when the  --lock lock.json is used.\n There are also a couple other commands that make managing repeatable builds. deno cache would resolve all the dependencies for a supplied module andpopulate the Deno cache.  deno bundle can be used to generate a single file\u201cbuild\u201d of a workload which all the dependencies are resolved and included inthat file, so only that single file is needed for future  deno run commands.\n  This is another area where I think we have a skewed mental model. For whateverreason, we put trust in code that is in a centralized registry. We don\u2019t eventhink about it. Not only that, we trust that that code has fully vetted all ofits dependencies and that those are to be trusted to. We do a quick search andtype in  npm install some-random-package and think \u201cThis is Fine!\u201d I argue therich npm package eco-system has lulled is into a sense of complacency.\n To compensate for this laxness and complacency, we implement security monitoringsoftware in our tool chains, to analyse our dependencies and the thousands uponthousand lines of code to let us know that maybe some of the code isexploitable. Corporations setup private registries to host packages that mightbe vetted slightly more than the single public registry.\n It feels like there is an elephant in the room here. The best strategy is weshouldn\u2019t trust any code. Once we have that established, then opening it backup becomes a little be easier. But we are lying to ourselves if we think apackage manager and a centralised registry solve this problem, or evensubstantially help with this problem. In fact, I argue they make use let ourguards down. \u201cWell it is on npm, if it were bad for me, surely someone wouldtake it down.\u201d\n Deno in this aspect isn\u2019t quite as done as I think it should be, but it isstarting from a good position. It has zero trust at startup, and providesfairly fine grained permissions. One of the things I personally dislike is thatthere is the  -A flag, which is basically saying \u201coh yeah allow everything\u201dwhich is such an easy thing for a frustrated developer to do instead of figuringout what they really need.\n It is also hard to break down those permissions, to say \u201cthis code can do this,but this other code over here can\u2019t\u201d or when code prompts to escalate privilegeswhere is that code coming from. Hopefully we can figure out an easy to usemechanism coupled with something that would be effective and performant atruntime to try to solve those challenges.\n A recent change though, which is a good one, in my opinion, is that Deno nolonger allows you to downgrade your imports. If something is imported from https:// then it can only import from other  https:// locations. Thisfollows the browser model of not being able to downgrade transport. I stillthink longer term it would be good to kill off any remote imports that aren\u2019tover  https://, much like Service Workers require HTTPS, so we will see whatthe future holds.\n  I think we need to talk frankly about dependencies in the npm ecosystem. To behonest, it is broken. An ecosystem that enables 5 lines of codeto be downloaded and installed  30 million times a week for code thathas been in every browser for the last 9 years and never was needed in Node.jsis a broken ecosystem. This one example, the actual code is 132 bytes, but thepackage size is 3.4kb. The runnable code is 3.8% of the package size. \u201cThis isFine!\u201d\n My opinion is that there are several factors involved in this. A big part of itis that we have the model inverted, which I talked about Deno being a browserfor code. The problem is that this backwards model has infected how we createwebsites. While we don\u2019t have a central registry, when we build a website,we download all the code we depend up and bake it into something that we loadup on a server, and then each user downloads a bunch of code to their localmachine. Some evidence is that only around 10% of that code that is downloadedis unique to that site or web application, the rest is all that code we aredownloading to our development workstation and bundling up. This model beingbroken are some of the problems solutions like Snowpack are trying to solve.\n Another significant problem is that our dependencies are not coupled with ourcode. We put dependencies in our  package.json but if our code actually usesthat code or not is totally decoupled. While our code expresses what we areusing out of that other code, it is very loosely coupled to the version of thatcode. That is contained in the  package.json, though it has the biggest impacton the code we write, because it is the code that is actually consuming thedependent code.\n This leads us to the Deno model, which I like to call  Deps-in-JS, since allthe cool kids are doing  *-in-JS things. Explicitly stating our externaldependencies as URLs means that the code depends upon the other code is conciseand clear, and our code and dependencies are tightly coupled together. If youwant to see that dependency graph, you simply need to use  deno info with alocal or remote module:\n $ deno info https://deno.land/x/oak/examples/server.tslocal: $deno/deps/https/deno.land/d355242ae8430f3116c34165bdae5c156dca21aeef521e45acb51fcd21c9f724type: TypeScriptcompiled: $deno/gen/https/deno.land/x/oak/examples/server.ts.jsmap: $deno/gen/https/deno.land/x/oak/examples/server.ts.js.mapdeps:https://deno.land/x/oak/examples/server.ts \u251c\u2500\u2500 https://deno.land/std@0.53.0/fmt/colors.ts \u2514\u2500\u252c https://deno.land/x/oak/mod.ts \u251c\u2500\u252c https://deno.land/x/oak/application.ts \u2502 \u251c\u2500\u252c https://deno.land/x/oak/context.ts \u2502 \u2502 \u251c\u2500\u2500 https://deno.land/x/oak/cookies.ts \u2502 \u2502 \u251c\u2500\u252c https://deno.land/x/oak/httpError.ts \u2502 \u2502 \u2502 \u2514\u2500\u252c https://deno.land/x/oak/deps.ts \u2502 \u2502 \u2502 \u251c\u2500\u2500 https://deno.land/std@0.53.0/hash/sha256.ts \u2502 \u2502 \u2502 \u251c\u2500\u252c https://deno.land/std@0.53.0/http/server.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 https://deno.land/std@0.53.0/encoding/utf8.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c https://deno.land/std@0.53.0/io/bufio.ts \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c https://deno.land/std@0.53.0/io/util.ts--snip--\n Deno has no strong opinions around \u201cversions\u201d of code. A URL is a URL is a URL.While Deno requires an appropriate media type in order to understand how totreat code, all the \u201copinions\u201d about what code to serve up is left up to theweb server. A server can implement semantic versioning to its hearts content,or do any sort of \u201cmagical\u201d mapping of URLs to resources it wants. Deno doesn\u2019tcare. For example  https://deno.land/x/ is effectively nothing but a URLredirect server, where it rewrites URLs to include a git commit-ish referencein the redirected URL. So  https://deno.land/x/oak@v4.0.0/mod.ts becomes https://raw.githubusercontent.com/oakserver/oak/v4.0.0/mod.ts, which GitHubserves up a nice versioned module.\n Of course spreading \u201cversioned\u201d remote URLs throughout your codebase doesn\u2019tmake a lot of sense, so don\u2019t do that. The great thing about the dependenciesjust being code though is that you can structure them any way you want to. Acommon convention is to use a  deps.ts which re-exports all the dependenciesyou might want. Take a look at the one for oak server:\n // Copyright 2018-2020 the oak authors. All rights reserved. MIT license.// This file contains the external dependencies that oak depends upon// `std` dependenciesexport { HmacSha256 } from &#34;https://deno.land/std@0.51.0/hash/sha256.ts&#34;;export { Response, serve, Server, ServerRequest, serveTLS,} from &#34;https://deno.land/std@0.51.0/http/server.ts&#34;;export { Status, STATUS_TEXT,} from &#34;https://deno.land/std@0.51.0/http/http_status.ts&#34;;export { Cookies, Cookie, setCookie, getCookies, delCookie,} from &#34;https://deno.land/std@0.51.0/http/cookie.ts&#34;;export { basename, extname, join, isAbsolute, normalize, parse, resolve, sep,} from &#34;https://deno.land/std@0.51.0/path/mod.ts&#34;;export { assert } from &#34;https://deno.land/std@0.51.0/testing/asserts.ts&#34;;// 3rd party dependenciesexport { contentType, lookup,} from &#34;https://deno.land/x/media_types@v2.3.1/mod.ts&#34;;\n I created oak server and maintained for 18 months through about 40 releases ofDeno and the Deno  std library, including moving of  media_types from internalto oak, out to the  std library, to only have it be \u201cejected\u201d from the  stdlibrary to be its own thing. Not once did I think to myself \u201chey, I need apackage manager to manage this for me\u201d.\n One of the benefits of TypeScript is that you can get comprehensive validationof compatibility of your code with other code. If your dependencies are \u201craw\u201dTypeScript written for Deno, this is great, but let\u2019s say that you want to takeadvantage of pre-processing of the TypeScript to JavaScript, but still have theability to consume that remote code safely. Deno supports a couple differentways to allow that to happen, but the most seamless is the support for the X-TypeScript-Types header. This header indicates to Deno where a types fileis located which can be used when type checking the JavaScript file that youare depending upon.  Pika CDN supports this. Anypackages that are available on the CDN that have types associated with them willserve up that header and Deno will also fetch those types and use that whentype checking the file.\n All this being said, there may still be a need to \u201cremap\u201d a remote (or local)dependency to what is expressed in the code. In this case, the unstableimplementation of  import-maps can beused. It is a proposal specification that is part of the W3C incubator wherebrowser standards come out of. It allows a map to be provided which will mapa particular dependency in code to another resource, be it a local file or aremote module.\n We had it implemented in Deno for an extended period of time, as we had reallyhoped that it would become adopted widely. Sadly, it was only an origin trial in Chrome andhasn\u2019t gotten wider adoption yet. This led us to putting it behind the --unstable flag for Deno 1.0. My personal opinion is that it is still a bigrisk of being a dead end, and should be avoided.\n  I suspect a lot of people are still coming with a list of objections to themodel that Deno has. I think the strategy Deno has tried to take, which I amvery aligned to, is to deal with real problems when they arise. A lot of theobjections I hear are from people who are new to Deno, who haven\u2019t worked withit, who haven\u2019t tried to understand that there might be a different way.\n All that being said, if we collectively run into a problem and there is acompelling need to change something in the Deno CLI, I am confident that it willhappen, but a lot of problems simply don\u2019t exist, or there are other ways tosolve them that don\u2019t require your runtime to have strong opinions or be coupledto an external programme to manage your code.\n So my challenge to you is, flirt a bit with not having a package manager ora centralised package repository and see how it goes. You might never go back!", "posttime": "2020-05-29 09:13:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,browser", "title": "Deno\u662f\u4e00\u4e2a\u4ee3\u7801\u6d4f\u89c8\u5668", "title_en": "Deno Is a Browser for Code", "transed": 1, "url": "https://kitsonkelly.com/posts/deno-is-a-browser-for-code/", "via": "", "real_tags": ["\u4ee3\u7801", "browser"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004181, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u5efa\u5e10\u6237", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-05-29 09:13:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5236\u4f5c,electric,\u521b\u5efa", "title": "\u5229\u7528\u5f31\u7535\u573a\u5236\u4f5c\u6740\u6bd2\u53e3\u7f69", "title_en": "Using Weak Electric Fields to Make Virus-Killing Face Masks", "transed": 1, "url": "https://spectrum.ieee.org/the-human-os/biomedical/devices/using-weak-electric-fields-to-make-viruskilling-face-masks", "via": "", "real_tags": ["\u5236\u4f5c", "electric", "\u521b\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "a7c2118b381dd60f6fdd768b721657e5.jpg", "infoid": 1004178, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u7531\u516d\u4e2a\u90e8\u5206\u7ec4\u6210\u7684\u7cfb\u5217\u88ab\u8bbe\u8ba1\u6210\u53f2\u8bd7\u6e38\u620f\u7684\u201c\u50cf\u6211\u662f(\u4e8c\u5341\u4e94)\u4e2a\u4eba\u4e00\u6837\u89e3\u91ca\u201d\u7684\u7248\u672c\u3002\u6216\u8005\uff0c\u5982\u679c\u4f60\u60f3\u56de\u523020\u4e16\u7eaa90\u5e74\u4ee3\uff0c\u5f53\u65f6\u6ce2\u6258\u9a6c\u514b\u8ba1\u7b97\u673a\u7cfb\u7edf\u516c\u53f8(Potomac Computer Systems)\u6210\u7acb\u7684\u65f6\u5019\uff0c\u201c\u611a\u4eba\u53f2\u8bd7\u6e38\u620f\u201d(Eic Games For Dummies)\u3002\u76f8\u5e94\u5730\uff0c\u6280\u672f\u672f\u8bed\u548c\u5176\u4ed6\u7ec6\u8282\u5df2\u88ab\u56de\u907f\u548c\u7b80\u5316\u3002\n\u53f2\u8bd7\u6e38\u620f\u7531\u8482\u59c6\u00b7\u65af\u5a01\u5c3c(Tim Sweeney)\u548c\u9a6c\u514b\u00b7\u96f7\u6069(Mark Rein)\u4e8e1991\u5e74\u521b\u7acb\u3002\u65af\u5a01\u5c3c\u662f\u9996\u5e2d\u6267\u884c\u5b98\u548c\u5927\u80a1\u4e1c/\u63a7\u80a1\u80a1\u4e1c\uff0c\u800c\u817e\u8baf\u62e5\u6709\u5927\u7ea640%\u7684\u80a1\u4efd\u3002\u4f5c\u4e3a\u4e00\u5bb6\u79c1\u8425\u516c\u53f8\uff0cEtic\u4e0d\u516c\u5f00\u62ab\u9732\u5176\u8d22\u52a1\u72b6\u51b5\u3002\u636e\u5a92\u4f53\u62a5\u9053\uff0c\u8be5\u516c\u53f8\u57282018\u5e74(\u4e0a\u4e00\u6b21\u878d\u8d44\u65f6)\u7684\u4f30\u503c\u7ea6\u4e3a150\u4ebf\u7f8e\u5143\uff0c\u6839\u636e\u5f6d\u535a\u793e(Bloomberg)\u7684\u8bf4\u6cd5\uff0c\u76ee\u524d\u6b63\u5728\u4ee5\u201c\u660e\u663e\u66f4\u9ad8\u201d\u7684\u4ef7\u683c\u7b79\u96c6\u66f4\u591a\u8d44\u91d1\u3002\n\u4e0eFacebook\u3001\u4e9a\u9a6c\u900a\u3001\u82f9\u679c\u3001\u5fae\u8f6f\u548c\u8c37\u6b4c\u4ef7\u503c6000\u4ebf\u81f31.4\u4e07\u4ebf\u7f8e\u5143\u76f8\u6bd4\uff0cEtic\u7684\u4f30\u503c\u5e76\u4e0d\u7b97\u9ad8\u3002\u7136\u800c\uff0cEtic\u6709\u6f5c\u529b\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5927\u3001\u6700\u6709\u5f71\u54cd\u529b\u7684\u79d1\u6280\u516c\u53f8\u4e4b\u4e00\u3002\u5bf9\u4e8e\u90a3\u4e9b\u53ea\u77e5\u9053\u201c\u53f2\u8bd7\u201d\u662f\u70ed\u95e8\u89c6\u9891\u6e38\u620f\u201c\u5821\u5792\u4e4b\u591c\uff1a\u7687\u5ba4\u4f5c\u6218\u201d\u6807\u5fd7\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u6709\u4e9b\u5938\u5f20\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u662f\u201c\u53f2\u8bd7\u201d\u6e38\u620f\u7684\u957f\u671f\u7c89\u4e1d\u4e5f\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u6837\u7684\u8bf4\u6cd5\u5f88\u5947\u602a\uff0c\u56e0\u4e3a\u5821\u5792\u4e4b\u591c\u5728\u4e09\u5e74\u5185\u521b\u9020\u7684\u6536\u5165\u6bd4\u201c\u53f2\u8bd7\u201d\u5176\u4ed6\u6e38\u620f\u5728\u51e0\u4e4e\u51e0\u5341\u5e74\u91cc\u521b\u9020\u7684\u6536\u5165\u8fd8\u8981\u591a\u3002\u4f46\u5728\u5e55\u540e\uff0c\u770b\u8d77\u6765\u53f2\u8bd7\u5c06\u8d8a\u6765\u8d8a\u6709\u53ef\u80fd\u6210\u4e3a\u793e\u4f1a\u6570\u5b57\u672a\u6765\u7684\u4e2d\u5fc3\u3002\n\u8fd9\u4e00\u6f5c\u529b\u6e90\u4e8eEtic\u7684\u6838\u5fc3\u4e1a\u52a1\u865a\u5e7b\u5f15\u64ce\u7684\u5b9e\u529b\uff0c\u8be5\u5f15\u64ce\u5df2\u7ecf\u88ab\u7528\u6765\u5236\u4f5c\u8bb8\u591a\u4e16\u754c\u9886\u5148\u7684\u6e38\u620f\u3001\u7535\u5f71\u548c\u865a\u62df\u4f53\u9a8c\u3002\u8fd9\u5f53\u7136\u5305\u62ec\u53f2\u8bd7\u516c\u53f8\u7684\u5821\u5792\u4e4b\u591c\uff0c\u5b83\u662f\u5168\u7403\u73a9\u5f97\u6700\u591a\u3001\u5229\u6da6\u6700\u9ad8\u7684\u7f51\u7edc\u4e16\u754c\u4e4b\u4e00\u3002\u8fd9\u6b3e\u201c\u6e38\u620f\u201d\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u4e0d\u5bb9\u5ffd\u89c6\uff1b\u7136\u800c\uff0c\u4e0d\u592a\u660e\u663e\u7684\u662f\uff0c\u8fd9\u79cd\u6210\u529f\u662f\u5982\u4f55\u8ba9Etic\u8fc5\u901f\u8f6c\u578b\u548c\u6269\u5927\u4e1a\u52a1\u7684\u3002\u8fd9\u5305\u62ec2018\u5e74\u53f2\u8bd7\u6e38\u620f\u5546\u5e97\u7684\u53d1\u5e03\uff0c2019\u5e74\u53f2\u8bd7\u5728\u7ebf\u670d\u52a1\u7684\u6d4b\u8bd5\u7248\u53d1\u5e03\u548c\u5bf9\u793e\u4ea4\u89c6\u9891\u5e94\u7528Houseparty\u7684\u6536\u8d2d\uff0c\u4ee5\u53ca2020\u5e74\u53f2\u8bd7\u6e38\u620f\u51fa\u7248\u7684\u63ed\u5e55\u3002Etic\u73b0\u5728\u62e5\u6709350\u591a\u4e07\u7528\u6237\u548c23\u4ebf\u793e\u4ea4\u7f51\u7edc\uff0c\u662f\u4e92\u8054\u7f51\u4e0a\u89c4\u6a21\u6700\u5927\u3001\u589e\u957f\u6700\u5feb\u7684\u793e\u4ea4\u7f51\u7edc\u4e4b\u4e00\u3002\nEPIC\u65e5\u76ca\u589e\u957f\u7684\u5b9e\u529b\u5df2\u7ecf\u8feb\u4f7f\u5a92\u4f53\u548c\u5a31\u4e50\u4e1a\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\u3002\u8fd9\u5305\u62ec\u8feb\u4f7f\u7d22\u5c3c(Sony)\u548c\u5fae\u8f6f(Microsoft)\u7b49\u84dd\u7b79\u80a1\u5de8\u5934\u5f00\u653e\u90e8\u5206\u5c01\u95ed\u7684\u6e38\u620f\u751f\u6001\u7cfb\u7edf\uff0c\u8bf4\u670d\u597d\u83b1\u575e\u4f20\u5947\u5de8\u5934\u5141\u8bb8\u4ed6\u4eec\u7684\u7279\u8bb8\u7ecf\u8425\u6743\u6df7\u6742\u5728\u4e00\u8d77\uff0c\u5411\u4e16\u754c\u5c55\u793a\u66fe\u7ecf\u88ab\u8ba4\u4e3a\u53ea\u6709\u201cIRL\u201d\u7684\u4f53\u9a8c\uff0c\u6bd4\u5982\u548c\u670b\u53cb\u4e00\u8d77\u53bb\u542c\u6f14\u5531\u4f1a\uff0c\u53ea\u6709\u5728\u7f51\u4e0a\u624d\u6709\u53ef\u80fd\u53d8\u5f97\u66f4\u597d\u3002\n\u4f46\u662f\uff0c\u5982\u679cEtic\u6210\u529f\u5730\u6253\u9020\u4e86\u5b83\u7684\u201c\u98de\u8f6e\u201d\uff0c\u5b83\u5c06\u66f4\u620f\u5267\u6027\u5730\u91cd\u5851\u6570\u5b57\u4e16\u754c-\u4ece\u6570\u636e\u548c\u9690\u79c1\u6743\uff0c\u5230\u65b0\u5174\u7684\u6280\u672f\u6807\u51c6\uff0c\u5229\u6da6\u5206\u914d\uff0c\u4ee5\u53ca\u4eba\u7c7b\u5de5\u4f5c\u548c\u653e\u677e\u7684\u65b9\u5f0f\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u5bf9\u65af\u5a01\u5c3c\u5bf9\u793e\u4f1a\u672a\u6765\u7684\u957f\u671f\u613f\u666f\u81f3\u5173\u91cd\u8981\uff1aMetaverse\u3002\n\u5728\u8fd9\u672c\u5165\u95e8\u8bfb\u7269\u4e2d\uff0c\u6211\u4eec\u5c06\u5411\u8bfb\u8005\u4ecb\u7ecd\u53f2\u8bd7\u6e38\u620f\u7684\u6bcf\u4e2a\u9886\u57df-\u8be6\u7ec6\u8bf4\u660e\u5b83\u4e3a\u4ec0\u4e48\u5b58\u5728\uff0c\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5b83\u5e0c\u671b\u5b9e\u73b0\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u5b83\u5f88\u91cd\u8981\uff0c\u4ee5\u53ca\u5b83\u5c06\u5982\u4f55\u52a0\u5f3a\u53f2\u8bd7\u6e38\u620f\u7684\u6574\u4f53\u3002", "note_en": "This six-part series is designed to be an \u201cExplain Like I\u2019m (Twenty) Five\u201d edition of Epic Games. Or if you want a throwback to the 1990s, when then-Potomac Computer Systems was founded, \u201cEpic Games For Dummies\u201d. Technical terms and other details have been eschewed and simplified accordingly.\n Epic Games was founded by Tim Sweeney and Mark Rein in 1991. Sweeney is the CEO and majority/controlling shareholder, while Tencent owns roughly 40%. As a private company, Epic does not publicly disclose its financials. According to press reports, it was valued at roughly $15B in 2018 (when it last raised capital) and is currently raising more at a \u201csignificantly higher\u201d price,  per Bloomberg.\n Compared to Facebook, Amazon, Apple, Microsoft and Google, which are worth $600B to $1.4T, Epic\u2019s valuation is modest. However, Epic has the potential to become one of the largest, most influential tech companies in the world. This might seem hyperbolic to those who know Epic only as the marker of the hit video game  Fortnite: Battle Royale. In fact, even long-time fans of Epic\u2019s games might find such a pronouncement odd given  Fortnite has generated more revenue in three years than the rest of Epic has in almost as many decades. But behind the scenes, it looks increasingly likely that Epic will be at the very center of society\u2019s digital future.\n This potential stems from the strength of Epic\u2019s core business, the Unreal Engine, which is already used to produce many of the world\u2019s leading games, movies and virtual experiences. This includes, of course, Epic\u2019s  Fortnite, which is one of the most played and profitable online worlds globally. The popularity of this \u201cgame\u201d is hard to miss; what\u2019s less apparent, though, is how this success has enabled Epic to rapidly transform and expand its business. This includes the 2018 launch of Epic Games Store, the 2019 beta-release of Epic Online Services and acquisition of social video app Houseparty, and the 2020 unveiling of Epic Games Publishing. And with 350MM+ users and 2.3B social connections, Epic now operates one of the Internet\u2019s largest and fastest growing social networks.\n Epic\u2019s growing strength has already forced enormous change in the media and entertainment industry. This includes forcing blue chip giants like Sony and Microsoft to open up parts of their closed gaming ecosystems, convincing storied Hollywood giants to allow their franchises to intermingle, and showing the world that experiences once thought to be \u201cIRL\u201d only, like going to a concert with friends, had the potential to be even better when online-only.\n But if Epic is successful in building out its \u2018flywheel\u2019, it will even more dramatically reshape the digital world - from data and privacy rights, to emergent technical standards, the distribution of profits, and the very ways in which humans work and relax. And all of this is critical to Sweeney\u2019s long-term vision of society\u2019s future: the Metaverse.\n  Throughout this primer, we will walk readers through each area of Epic Game - detailing why it exists, how it works, what it hopes to achieve, why it matters, and how it will strengthen Epic Games overall.", "posttime": "2020-05-29 08:41:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,games,\u53f2\u8bd7", "title": "\u53f2\u8bd7\u6e38\u620f\u5165\u95e8\u8bfb\u672c", "title_en": "The Epic Games Primer", "transed": 1, "url": "https://www.matthewball.vc/all/epicgamesprimermaster", "via": "", "real_tags": ["\u6e38\u620f", "games", "\u53f2\u8bd7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004177, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b9e\u65f6\u975e\u5e38\u7b80\u5355Microsoft Research TechnicalReport MSR-TR-2005-30(2005\u5e743\u67084\u65e5)\u3002\u5728\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u88abFormalMethods\u62d2\u7edd\u3002\u53ef\u7528\u6027\u5728\u7ebf\u5e94\u8be5\u5f88\u660e\u663e\uff0c\u4e0d\u9700\u8981\u7279\u6b8a\u7684\u903b\u8f91\u6216\u8bed\u8a00\u6765\u7f16\u5199\u5b9e\u65f6\u89c4\u8303\u6216\u5bf9\u5176\u8fdb\u884c\u63a8\u7406\u3002\u6709\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff1a\u53ea\u9700\u4f7f\u7528\u53d8\u91cf\u6765\u8868\u793a\u65f6\u95f4\u3002\u9a6c\u4e01\u00b7\u963f\u5df4\u8fea\u548c\u6211\u5728[106]\u4e00\u4e66\u4e2d\u8868\u660e\uff0c\u5728TLA\u4e2d\u53ef\u4ee5\u975e\u5e38\u4f18\u96c5\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e00\u79cd\u66f4\u7b80\u5355\u3001\u66f4\u76f4\u63a5\u7684\u65b9\u6cd5\u9002\u7528\u4e8e\u4efb\u4f55\u660e\u667a\u7684\u6b63\u5f0f\u65b9\u6cd5\uff0c\u4f46\u5b83\u8fc7\u4e8e\u7b80\u5355\u548c\u660e\u663e\u7684\u6d6e\u5938\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u5355\u3001\u66f4\u76f4\u63a5\u7684\u65b9\u6cd5\u6765\u7f16\u5199\u6216\u63a8\u7406\u5b9e\u65f6\u89c4\u8303\u3002\u4f46\u6709\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u592a\u7b80\u5355\uff0c\u4e5f\u592a\u660e\u663e\u7684\u6d6e\u5938\u3002\u56e0\u6b64\uff0c\u6211\u5728[106]\u4e00\u4e66\u4e2d\u5c55\u793a\u4e86\u8fd9\u4e00\u70b9\u3002\u66f4\u7b80\u5355\u3001\u66f4\u76f4\u622a\u4e86\u5f53\u7684\u65b9\u6cd5\u9002\u7528\u4e8e\u4efb\u4f55\u660e\u667a\u7684\u6b63\u5f0f\u65b9\u6cd5\uff0c\u4f46\u5b83\u8fc7\u4e8e\u7b80\u5355\u548c\u660e\u663e\u7684\u6d6e\u5938\u3002\u7b49\u7b49\u3002\u6ca1\u6709\u7406\u7531\u7528\u5b83\u4eec\u6765\u4ee3\u66ff\u7b80\u5355\u3001\u660e\u663e\u7684\u65b9\u6cd5\u3002\u800c\u4e14\uff0c\u7531\u4e8e\u6ca1\u6709\u4eba\u5199\u5173\u4e8e\u5904\u7406\u5b9e\u65f6\u7684\u7b80\u5355\u65b9\u6cd5\u7684\u8bba\u6587\uff0c\u4eba\u4eec\u4f3c\u4e4e\u8ba4\u4e3a\u4ed6\u4eec\u9700\u8981\u4f7f\u7528\u5b9e\u65f6\u903b\u8f91\u3002\u5f88\u81ea\u7136\uff0c\u6211\u89c9\u5f97\u8fd9\u76f8\u5f53\u70e6\u4eba\u3002\u6240\u4ee5\u5f53\u6211\u542c\u8bf4\u4e00\u4f4d\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u6b63\u8ba1\u5212\u5199\u4e00\u672c\u5173\u4e8e\u8fd9\u4e9b\u5b9e\u65f6\u903b\u8f91\u4e4b\u4e00\u7684\u4e66\u65f6\uff0c\u6211\u51b3\u5b9a\u662f\u65f6\u5019\u518d\u5199\u4e00\u7bc7\u8bba\u6587\u6765\u89e3\u91ca\u8fd9\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u4e86\u3002(\u6240\u4ee5\u5f53\u6211\u542c\u8bf4\u4e00\u4f4d\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u6b63\u8ba1\u5212\u5199\u4e00\u672c\u5173\u4e8e\u5176\u4e2d\u4e00\u79cd\u5b9e\u65f6\u903b\u8f91\u7684\u4e66\u65f6\uff0c\u6211\u51b3\u5b9a\u662f\u65f6\u5019\u518d\u5199\u4e00\u7bc7\u8bba\u6587\u6765\u89e3\u91ca\u8fd9\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u4e86\u3002)", "note_en": "Real Time is Really Simple Microsoft Research TechnicalReport MSR-TR-2005-30 (4 March 2005).\u00a0 Rejected by  FormalMethods in Systems Design.  AvailableOn-Line It should be quite obvious that no special logic or language is neededto write or reason about real-time specifications.\u00a0 There&#39;s a simpleway to do it: just use a variable to represent time.\u00a0Mart\u00edn Abadi and I showed in [106] that this can be done very elegantly inTLA.\u00a0 A simpler, more straightforward approach works withany sensible formal method, but it&#39;s too simple and obvious topublish.\u00a0 So instead, hundreds of papers and theses have been writtenabout special real-time logics and languages--even though, for mostpurposes, there&#39;s no reason to use them instead of the simple, obviousapproach.\u00a0 And since no one writes papers about the simple way ofhandling real time, people seem to assume that they need to use areal-time logic.\u00a0 Naturally, I find this rather annoying.\u00a0 So when Iheard that a computer scientist was planning to write a book about oneof these real-time logics, I decided it was time to write anotherpaper explaining the simple approach.", "posttime": "2020-05-29 08:40:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5170\u6ce2\u7279,leslie,\u65b9\u6cd5", "title": "\u83b1\u65af\u5229\u00b7\u5170\u6ce2\u7279\u7684\u4f5c\u54c1", "title_en": "The Writings of Leslie Lamport", "transed": 1, "url": "https://lamport.azurewebsites.net/pubs/pubs.html", "via": "", "real_tags": ["\u5170\u6ce2\u7279", "leslie", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "2f0fddb12e01bc4d1a2f693a6ac26a2e.jpg", "infoid": 1004176, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5dde\u957f\u52a0\u6587\u00b7\u7ebd\u745f\u59c6(Gavin Newsom)\u63d0\u8bae\uff0c\u5bf9\u4e8e\u5e0c\u671b\u4f7f\u7528\u8054\u90a6\u51a0\u72b6\u75c5\u6bd2\u6551\u6d4e\u8d44\u91d1\u5c06\u9152\u5e97\u6539\u9020\u6210\u65e0\u5bb6\u53ef\u5f52\u8005\u4f4f\u623f\u7684\u5e02\u53bf\uff0c\u53ef\u4ee5\u514d\u9664\u5dde\u73af\u5883\u6cd5\u89c4\u3002\n\u4ed6\u7684\u8ba1\u5212\u4e8e\u5468\u4e94\u63d0\u4ea4\u7ed9\u52a0\u5dde\u7acb\u6cd5\u673a\u6784\uff0c\u5c06\u88ab\u6dfb\u52a0\u5230\u5dde\u9884\u7b97\u8c08\u5224\u4e2d\uff0c\u5982\u679c\u8be5\u8ba1\u5212\u4fdd\u6301\u4e0d\u53d8\uff0c\u5b83\u5c06\u6d88\u9664\u53cd\u5bf9\u8005\u7528\u6765\u5bf9\u6297\u4ed6\u4eec\u4e0d\u60f3\u8981\u7684\u793e\u533a\u9879\u76ee\u7684\u4e00\u4e2a\u5173\u952e\u5de5\u5177\u3002\u6839\u636e\u6cd5\u5f8b\uff0c\u9884\u7b97\u5e94\u8be5\u57286\u670815\u65e5\u4e4b\u524d\u901a\u8fc7\u3002\n\u5728\u4eca\u5e74\u51ac\u5929\u5927\u6d41\u884c\u6765\u88ad\u4e4b\u524d\uff0c\u5dde\u957f\u66fe\u8868\u793a\uff0c\u4ed6\u5e0c\u671b\u52a0\u5dde\u73af\u5883\u8d28\u91cf\u6cd5\u6848(CEQA)\u4e0b\u7684\u76d1\u7ba1\u653e\u677e\u5bf9\u8bb8\u591a\u7c7b\u578b\u7684\u65e0\u5bb6\u53ef\u5f52\u8005\u4f4f\u623f\u7684\u76d1\u7ba1\uff0c\u800c\u8fd9\u9879\u76ee\u524d\u7684\u8ba1\u5212-\u4ee5\u9884\u7b97\u8c08\u5224\u9644\u52a0\u7684\u201c\u9884\u544a\u7247\u6cd5\u6848\u201d\u7684\u5f62\u5f0f\u53d1\u9001-\u7f29\u5c0f\u4e86\u8fd9\u4e00\u96c4\u5fc3\u3002\n\u7136\u800c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bf9\u65e7\u91d1\u5c71\u7b49\u57ce\u5e02\u4ea7\u751f\u5de8\u5927\u5f71\u54cd\uff0c\u622a\u81f3\u5468\u4e8c\uff0c\u65e7\u91d1\u5c71\u79df\u7528\u76841,100\u591a\u4e2a\u9152\u5e97\u623f\u95f4\u5bb9\u7eb3\u4e86\u6613\u53d7\u65b0\u51a0\u80ba\u708e\u5f71\u54cd\u6216\u60a3\u6709\u652f\u4ed8\u5b9d\u7684\u65e0\u5bb6\u53ef\u5f52\u8005\u3002\u5dde\u957f\u7684\u201c\u623f\u95f4\u94a5\u5319\u8ba1\u5212\u201d\u5728\u5927\u6d41\u884c\u671f\u95f4\u5728\u5168\u5dde\u8303\u56f4\u5185\u4e3a\u65e0\u5bb6\u53ef\u5f52\u8005\u8d2d\u4e70\u4e8615,000\u4e2a\u9152\u5e97\u623f\u95f4\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5927\u7ea6\u6709\u4e00\u534a\u7684\u623f\u95f4\u5df2\u7ecf\u5165\u9a7b\u3002\n\u65e7\u91d1\u5c71\u5e02\u957fLondon Breed\u7684\u53d1\u8a00\u4eba\u6770\u592b\u00b7\u514b\u91cc\u5766(Jeff Cretan)\u8868\u793a\uff0c\u4ed6\u7684\u8001\u677f\u5e0c\u671b\u7ebd\u745f\u59c6\u7684\u8ba1\u5212\u80fd\u901a\u8fc7\u672a\u6765\u7684\u9884\u7b97\u8c08\u5224\u3002\n\u514b\u91cc\u5766\u8bf4\uff1a\u201c\u5e02\u957f\u4e00\u76f4\u4e13\u6ce8\u4e8e\u51cf\u5c11\u963b\u788d\u4f4f\u623f\u5efa\u8bbe\u7684\u969c\u788d\u548c\u5b98\u50da\u4f5c\u98ce\uff0c\u6211\u4eec\u5b8c\u5168\u652f\u6301\u4efb\u4f55\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u5e2e\u52a9\u6211\u4eec\u66f4\u5feb\u5730\u5c06\u9152\u5e97\u53d8\u6210\u4f4f\u623f\u3002\u201d\n\u9152\u5e97\u4e1a\u9886\u8896\u5468\u4e8c\u5bf9\u300a\u7eaa\u4e8b\u62a5\u300b\u8868\u793a\uff0c\u4ed6\u4eec\u5e0c\u671b\u5728\u5bf9\u8be5\u63d0\u6848\u91c7\u53d6\u7acb\u573a\u4e4b\u524d\u5bf9\u5176\u8fdb\u884c\u5ba1\u67e5\u3002\n\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u6216\u5168\u5dde\u8303\u56f4\u5185\u5c06\u6570\u5343\u540d\u65e0\u5bb6\u53ef\u5f52\u8005\u6536\u5bb9\u5728\u79df\u8d41\u9152\u5e97\u623f\u95f4\u7684\u8ba1\u5212\u770b\u4e0d\u5230\u5feb\u901f\u7ed3\u675f\u7684\u8ff9\u8c61\uff0c\u62a2\u5360\u9152\u5e97\u4f5c\u4e3a\u6c38\u4e45\u4f4f\u623f\u7684\u524d\u666f\u53ea\u662f\u76ee\u524d\u7684\u524d\u666f-\u4e00\u79cd\u524d\u666f\u3002\u4f46\u65e0\u5bb6\u53ef\u5f52\u8005\u7ec4\u7ec7\u8868\u793a\uff0c\u8fd9\u53ef\u80fd\u662f\u672a\u6765\u7684\u53cc\u8d62\uff0c\u65e2\u786e\u4fdd\u4e86\u53ef\u80fd\u5728\u7ecf\u6d4e\u4f4e\u8ff7\u4e2d\u82e6\u82e6\u6323\u624e\u7684\u9152\u5e97\u6240\u6709\u8005\u7684\u6536\u5165\uff0c\u540c\u65f6\u53c8\u5728\u65e7\u91d1\u5c71\u7b49\u57ce\u5e02\u5efa\u9020\u4e86\u5ec9\u4ef7\u7684\u65e0\u5bb6\u53ef\u5f52\u8005\u4f4f\u623f\uff0c\u5728\u90a3\u91cc\uff0c\u6b64\u7c7b\u4f4f\u623f\u7684\u6bcf\u5957\u4ef7\u683c\u901a\u5e38\u8d85\u8fc760\u4e07\u7f8e\u5143\u3002\n\u201c\u6211\u8ba4\u4e3a\u8fd9\u5f88\u68d2\uff0c\u201d\u65e7\u91d1\u5c71\u5dde\u6c11\u4e3b\u515a\u53c2\u8bae\u5458\u65af\u79d1\u7279\u00b7\u7ef4\u7eb3(Scott Wiener)\u8bf4\uff0c\u4ed6\u53bb\u5e74\u6210\u529f\u5730\u8ba9\u7acb\u6cd5\u901a\u8fc7\uff0c\u5728\u5efa\u9020\u670d\u52a1\u4e30\u5bcc\u7684\u5bfc\u822a\u4e2d\u5fc3\u907f\u96be\u6240\u65f6\u514d\u9664\u4e86CEQA\u89c4\u5b9a\u3002\u4ed6\u6307\u51fa\uff0c\u52a0\u5dde\u65e0\u5bb6\u53ef\u5f52\u4eba\u53e3\u5360\u5168\u56fd\u603b\u4eba\u53e3\u7684\u56db\u5206\u4e4b\u4e00\uff0c\u4e3a15.1\u4e07\u4eba--\u201c\u8fd9\u662f\u4e00\u79cd\u6781\u7aef\u5f97\u4ee4\u4eba\u9707\u60ca\u7684\u60c5\u51b5\u201d--\u4ed6\u8bf4\uff0c\u8be5\u5dde\u9700\u8981\u679c\u65ad\u5730\u521b\u9020\u6027\u5730\u5c06\u4eba\u4eec\u7559\u5728\u5ba4\u5185\u3002\n\u5468\u4e8c\uff0c\u7ef4\u7eb3\u62c5\u4efb\u4e3b\u5e2d\u7684\u53c2\u8bae\u9662\u4f4f\u623f\u59d4\u5458\u4f1a(Senate Housing Committee)\u6279\u51c6\u4e86\u4ed6\u64b0\u5199\u7684\u6cd5\u6848\uff0c\u8be5\u6cd5\u6848\u5c06\u628a\u5bfc\u822a\u4e2d\u5fc3\u7684\u8c41\u514d\u6743\u6269\u5927\u5230\u6240\u6709\u907f\u96be\u6240\uff0c\u5e76\u52a0\u5feb\u5728\u5168\u5dde\u5404\u5730\u7684\u6559\u5802\u623f\u4ea7\u548c\u5176\u4ed6\u571f\u5730\u4e0a\u5efa\u8bbe\u7ecf\u6d4e\u9002\u7528\u623f\u3002\u7ef4\u7eb3\u8bf4\uff0c\u7ebd\u745f\u59c6\u5173\u4e8e\u9152\u5e97\u7684\u63d0\u8bae\u5c06\u662f\u5bf9\u8fd9\u4e00\u6218\u7565\u7684\u6709\u76ca\u8865\u5145\u3002\n\u4ed6\u8bf4\uff1a\u201c\u5982\u679c\u6211\u4eec\u6709\u672a\u5f97\u5230\u5145\u5206\u5229\u7528\u7684\u9152\u5e97\u6216\u6c7d\u8f66\u65c5\u9986\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u6539\u9020\u6210\u4f4f\u623f--\u55ef\uff0c\u6c38\u4e45\u4f4f\u623f\u662f\u89e3\u51b3\u65e0\u5bb6\u53ef\u5f52\u95ee\u9898\u7684\u529e\u6cd5\u3002\u201d\u201c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u65e2\u6709\u5367\u5ba4\u53c8\u6709\u536b\u751f\u95f4\u7684\u5730\u65b9\uff0c\u53ea\u9700\u8981\u505a\u4e00\u70b9\u5de5\u4f5c\u5c31\u53ef\u4ee5\u628a\u5b83\u6539\u5efa\u6210\u4f4f\u623f\uff0c\u90a3\u4e48\u8fd9\u751a\u81f3\u90fd\u4e0d\u662f\u95ee\u9898\u3002\n\u201c\u8fd9\u4e0d\u5e94\u8be5\u53d7\u5230CEQA\u7684\u5236\u7ea6\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u53ea\u662f\u4e00\u4ef6\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002\u201c", "note_en": "Gov. Gavin Newsom is proposing that state environmental regulations be waived for cities and counties that want to convert hotels into homeless housing using federal coronavirus relief funding.\n  His plan was sent to the California Legislature on Friday to be added to the state budget negotiations, and if it remains intact it would eliminate a key tool opponents use to fight projects they don\u2019t want in their neighborhoods. By law, the budget is supposed to be passed by June 15.\n  Before the pandemic hit this winter, the governor had said he wanted regulations under the California Environmental Quality Act (CEQA) eased for many types of homeless housing, and this current plan \u2014 sent in the form of a \u201ctrailer bill\u201d addition to budget talks \u2014 narrows that ambition.\n  It could have a huge effect, however, in cities such as San Francisco, where more than 1,100 hotel rooms leased by the city as of Tuesday were housing homeless people vulnerable to or suffering from COVID-19. The governor\u2019s \u201cProject Roomkey\u201d has acquired 15,000 hotel rooms statewide for homeless people during the pandemic, about half of which have been occupied to date.\n  Jeff Cretan, spokesman for San Francisco Mayor London Breed, said his boss hopes Newsom\u2019s plan makes it through the budget talks that lie ahead.\n  \u201cThe mayor has been focused on reducing barriers and bureaucracy that get in the way of building housing, and we\u2019re fully supportive of anything like this that helps us turn hotels into housing faster,\u201d Cretan said.\n  Hotel industry leaders told The Chronicle on Tuesday that they wanted to examine the proposal before taking a position on it.\n  With no quick end in sight to the coronavirus pandemic or the statewide programs that are sheltering thousands of homeless people in leased hotel rooms, the prospect of snatching up hotels for permanent housing is just that for now \u2014 a prospect. But homeless organizations have said it could be a win-win in the future, ensuring revenue for hotel owners who might struggle in the economic downturn while at the same time creating cheap homeless housing in cities like San Francisco, where such housing typically costs north of $600,000 a unit.\n  \u201cI think it\u2019s great,\u201d said state Sen. Scott Wiener, D-San Francisco, who last year succeeded in getting legislation passed waiving CEQA regulations when building service-enriched Navigation Center shelters. Noting that California has a quarter of the nation\u2019s homeless population, at 151,000 \u2014 \u201can outrageously extreme situation\u201d \u2014 he said the state needs to be assertively creative about keeping people indoors.\n  On Tuesday, the Senate Housing Committee that Wiener chairs approved bills he wrote that would expand his Navigation Center waiver to all shelters, and speed up construction of affordable housing around the state on church properties and other lands. Newsom\u2019s proposal for hotels would be a useful addition to that strategy, Wiener said.\n  \u201cIf we have underutilized hotels or motels that we can convert into housing \u2014 well, permanent housing is the solution to homelessness,\u201d he said. \u201cAnd if you have an existing place with a bedroom and a bathroom, and it just needs a little work to convert it into housing, then it\u2019s not even a question.\n  \u201cThat should not be subject to CEQA. That to me is just something that needs to be done.\u201d", "posttime": "2020-05-29 08:40:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9152\u5e97,proposes,\u4f4f\u623f", "title": "\u7ebd\u745f\u59c6\u5efa\u8bae\u5728\u5c06\u9152\u5e97\u6539\u5efa\u4e3a\u4f4f\u623f\u65f6\u653e\u5f03\u73af\u5883\u5ba1\u67e5", "title_en": "Newsom proposes ditching environmental review when converting hotels int housing", "transed": 1, "url": "https://www.sfchronicle.com/bayarea/article/Newsom-proposes-sidestepping-CEQA-to-speed-up-15296502.php", "via": "", "real_tags": ["\u9152\u5e97", "proposes", "\u4f4f\u623f"]}, {"category": "", "categoryclass": "", "imagename": "35ce32a92bc5a5a86a9b2cf785a06e29.jpeg", "infoid": 1004174, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(\u8def\u900f\u793e)-\u7f8e\u56fd\u56fd\u5bb6\u5b89\u5168\u5c40(US National Security Agency)\u5468\u56db\u8b66\u544a\u653f\u5e9c\u5408\u4f5c\u4f19\u4f34\u548c\u79c1\u8425\u516c\u53f8\uff0c\u4fc4\u7f57\u65af\u7684\u4e00\u6b21\u9ed1\u5ba2\u884c\u52a8\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u7684\u5165\u4fb5\u6280\u672f\u6765\u653b\u51fb\u5de5\u4e1a\u516c\u53f8\u7ecf\u5e38\u7528\u6765\u7ba1\u7406\u8ba1\u7b97\u673a\u57fa\u7840\u8bbe\u65bd\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u5b89\u5168\u5c40\u7f51\u7edc\u5b89\u5168\u5408\u4f5c\u4e2d\u5fc3\u4e3b\u4efb\u517c\u5c40\u957f\u9053\u683c\u00b7\u514b\u96f7\u65af(Doug Cress)\u8bf4\uff0c\u201c\u8fd9\u662f\u4e00\u4e2a\u6b63\u5728\u88ab\u79ef\u6781\u5229\u7528\u7684\u6f0f\u6d1e\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u53d1\u5e03\u8fd9\u4efd\u901a\u77e5\u3002\u201d\u201c\u6211\u4eec\u771f\u7684\u5f88\u60f3\u8981\u2026\u3002\u8ba9\u66f4\u5e7f\u6cdb\u7684\u7f51\u7edc\u5b89\u5168\u754c\u8ba4\u771f\u5bf9\u5f85\u8fd9\u4ef6\u4e8b\u3002\u201c\u3002\n\u8fd9\u4efd\u901a\u77e5\u662f\u8be5\u95f4\u8c0d\u673a\u6784\u4e3a\u5206\u4eab\u53ef\u91c7\u53d6\u884c\u52a8\u7684\u7f51\u7edc\u9632\u5fa1\u4fe1\u606f\u800c\u53d1\u5e03\u7684\u4e00\u7cfb\u5217\u516c\u5f00\u62a5\u544a\u7684\u4e00\u90e8\u5206\u3002\u8be5\u673a\u6784\u65e2\u8d1f\u8d23\u6536\u96c6\u5916\u56fd\u60c5\u62a5\uff0c\u4e5f\u8d1f\u8d23\u4fdd\u62a4\u56fd\u9632\u90e8\u7684\u56fd\u5185\u7cfb\u7edf\u3002\nCress\u62d2\u7edd\u8ba8\u8bba\u54ea\u4e9b\u5546\u4e1a\u90e8\u95e8\u53d7\u5230\u7684\u5f71\u54cd\u6700\u5927\uff0c\u6709\u591a\u5c11\u7ec4\u7ec7\u4f7f\u7528\u4fc4\u7f57\u65af\u7684\u6280\u672f\u53d7\u5230\u4e86\u653b\u51fb\uff0c\u6216\u8005\u7f51\u7edc\u95f4\u8c0d\u884c\u52a8\u7684\u76ee\u6807\u662f\u5426\u662f\u7279\u5b9a\u7684\u5730\u7406\u533a\u57df\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u5b89\u5168\u5c40\u8868\u793a\uff0c\u6b64\u6b21\u9ed1\u5ba2\u6d3b\u52a8\u76f4\u63a5\u4e0e\u4fc4\u7f57\u65af\u4e3b\u8981\u60c5\u62a5\u5c40(GRU)\u5185\u7684\u4e00\u4e2a\u7279\u5b9a\u90e8\u95e8\u6709\u5173\uff0c\u8be5\u90e8\u95e8\u540d\u4e3a\u201c\u7279\u79cd\u6280\u672f\u4e3b\u4e2d\u5fc3\u201d(Main Center For Special Technologies)\u3002\u7f51\u7edc\u5b89\u5168\u7814\u7a76\u754c\u5c06\u8fd9\u4e2a\u9ed1\u5ba2\u7ec4\u7ec7\u79f0\u4e3a\u201c\u6c99\u866b\u201d\uff0c\u6b64\u524d\u66fe\u5c06\u5176\u4e0e\u9488\u5bf9\u4e4c\u514b\u5170\u7535\u529b\u751f\u4ea7\u8bbe\u65bd\u7684\u7834\u574f\u6027\u7f51\u7edc\u653b\u51fb\u8054\u7cfb\u5728\u4e00\u8d77\u3002\n\u7f8e\u56fd\u56fd\u52a1\u537f\u8fc8\u514b\u00b7\u5e9e\u76ae\u6b27(Mike Pompeo)\u4e5f\u57282\u6708\u4efd\u6307\u8d23\u540c\u4e00\u4e2aGRU\u5355\u4f4d\u5bf9\u683c\u9c81\u5409\u4e9a\u56fd\u5bb6\u53d1\u52a8\u7f51\u7edc\u653b\u51fb\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u5b89\u5168\u5c40(NSA)\u5468\u56db\u53d1\u5e03\u7684\u5b89\u5168\u8b66\u62a5\u89e3\u91ca\u4e86\u4fc4\u7f57\u65af\u519b\u4e8b\u60c5\u62a5\u673a\u6784GRU\u7684\u9ed1\u5ba2\u5982\u4f55\u5229\u7528Exim\u7684\u8f6f\u4ef6\u6f0f\u6d1e\u3002Exim\u662f\u4e00\u79cd\u90ae\u4ef6\u4f20\u8f93\u4ee3\u7406\uff0c\u5728\u57fa\u4e8eUnix\u7684\u64cd\u4f5c\u7cfb\u7edf(\u5982Linux)\u4e0a\u5f88\u5e38\u89c1\u3002\u8be5\u6f0f\u6d1e\u5df2\u4e8e\u53bb\u5e74\u6253\u4e0a\u8865\u4e01\uff0c\u4f46\u4e00\u4e9b\u7528\u6237\u5c1a\u672a\u66f4\u65b0\u7cfb\u7edf\u4ee5\u5f25\u8865\u5b89\u5168\u6f0f\u6d1e\u3002\n\u514b\u96f7\u65af\u8bf4\uff1a\u201c\u80fd\u591f\u83b7\u5f97\u8fdb\u5165\u7f51\u7edc\u7684\u6865\u63a5\u70b9\u7684\u6839\u8bbf\u95ee\u6743\uff0c\u8ba9\u4f60\u6709\u5982\u6b64\u591a\u7684\u80fd\u529b\u548c\u80fd\u529b\u6765\u9605\u8bfb\u7535\u5b50\u90ae\u4ef6\uff0c\u5728\u7f51\u7edc\u4e2d\u5bfc\u822a\u548c\u64cd\u7eb5\uff0c\u6240\u4ee5\u8fd9\u66f4\u591a\u7684\u662f\u5173\u4e8e\u6211\u4eec\u8bd5\u56fe\u5e2e\u52a9\u4eba\u4eec\u7406\u89e3\u7684\u5371\u9669\u3002\u201d", "note_en": "(Reuters) - The U.S. National Security Agency on Thursday warned government partners and private companies about a Russian hacking operation that uses a special intrusion technique to target operating systems often used by industrial firms to manage computer infrastructure.\n \u201cThis is a vulnerability that is being actively exploited, that\u2019s why we\u2019re bringing this notification out,\u201d said Doug Cress, chief of the cybersecurity collaboration center and directorate at NSA. \u201cWe really want\u2026 the broader cybersecurity community to take this seriously.\u201d\n The notice is part of a series of public reports by the spy agency, which is responsible for both collecting foreign intelligence and protecting Defense Department systems at home, to share actionable cyber defense information.\n Cress declined to discuss which business sectors had been most affected, how many organizations were compromised using the Russian technique, or whether the cyber espionage operation targeted a specific geographic region.\n The NSA said the hacking activity was tied directly to a specific unit within Russia\u2019s Main Intelligence Directorate, also known as the GRU, named the Main Center for Special Technologies. The cybersecurity research community refers to this same hacking group as \u201cSandworm,\u201d and has previously connected it to disruptive cyberattacks against Ukrainian electric production facilities.\n Secretary of State Mike Pompeo also called out the same GRU unit in February for conducting a cyberattack against the country of Georgia.\n A security alert published by the NSA on Thursday explains how hackers with GRU, Russia\u2019s military intelligence, are leveraging a software vulnerability in Exim, a mail transfer agent common on Unix-based operating systems, such as Linux. The vulnerability was patched last year, but some users have not updated their systems to close the security gap.\n \u201cBeing able to gain root access to a bridge point into a network gives you so much ability and capability to read email, to navigate across and maneuver through the network,\u201d said Cress, \u201cso it\u2019s more about the danger we\u2019re trying to help people understand.\u201d", "posttime": "2020-05-29 08:08:37", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u9ed1\u5ba2,\u8b66\u544a,warns,\u7f51\u7edc", "title": "\u7f8e\u56fd\u56fd\u5bb6\u5b89\u5168\u5c40\u8b66\u544a\u79f0\uff0c\u4fc4\u7f57\u65af\u6b63\u5728\u5bf9\u7f8e\u56fd\u7cfb\u7edf\u53d1\u52a8\u9ed1\u5ba2\u653b\u51fb", "title_en": "NSA Warns of Ongoing Russian Hacking Campaign Against US Systems", "transed": 1, "url": "https://www.reuters.com/article/us-cyber-usa-russia-idUSKBN2342RE", "via": "", "real_tags": ["\u9ed1\u5ba2", "\u8b66\u544a", "warns", "\u7f51\u7edc"]}]