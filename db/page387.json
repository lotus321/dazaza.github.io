[{"category": "", "categoryclass": "", "imagename": "26b84a86800a731030ff2028a4cc736f.jpg", "infoid": 1000725, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u4eec\u7684\u6700\u4f73CPU\u6307\u5357\u7cfb\u5217\u4e2d\uff0c\u8fd9\u91cc\u662f\u6211\u4eec\u63a8\u8350\u7684\u5de5\u4f5c\u7ad9CPU\u5217\u8868\u7684\u6700\u65b0\u66f4\u65b0\u3002\u6587\u672c\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u4f1a\u66f4\u65b0\uff0c\u4ee5\u53cd\u6620\u64b0\u5199\u65f6\u7684\u5b9a\u4ef7\u3002\u56fe\u8868\u4e2d\u7684\u6570\u5b57\u53cd\u6620\u4e86MSRP\u3002\n\u6709\u65f6\u9009\u62e9CPU\u5f88\u56f0\u96be\u3002\u6240\u4ee5\u6211\u4eec\u4f1a\u5e2e\u4f60\u63a9\u62a4\u7684\u3002\u5728\u6211\u4eec\u7684CPU\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u4e3a\u60a8\u6311\u9009\u4e86\u4e00\u4e9b\u53ef\u7528\u7684\u6700\u597d\u7684\u5904\u7406\u5668\uff0c\u5e76\u4ece\u6211\u4eec\u7684\u8bc4\u8bba\u4e2d\u63d0\u4f9b\u4e86\u6570\u636e\u3002\u6211\u4eec\u7684\u5de5\u4f5c\u7ad9\u6700\u4f73CPU\u6307\u5357\u4e3b\u8981\u6db5\u76d6\u6d88\u8d39\u8005\u53ef\u7528\u7684\u5de5\u4f5c\u7ad9\u5904\u7406\u5668\uff0c\u5c3d\u7ba1\u6709\u4e9b\u670d\u52a1\u5668\u4ea7\u54c1\u6db5\u76d6\u4e86\u8fd9\u4e24\u4e2a\u7ec6\u5206\u5e02\u573a\u3002\nEPYC 7302P(2 TB/skt)\u82f1\u7279\u5c14\u7ea7\u8054\u6e56(2 TB/skt\uff1f)\u82f1\u7279\u5c14\u81f3\u5f3a+Optane(4.5 TB/skt)\u3002\n\u968f\u7740\u6211\u4eec\u8fc8\u51652020\u5e74\uff0c\u9ad8\u7aef\u53f0\u5f0f\u673a\u5e02\u573a\u4f1a\u6709\u6240\u653e\u7f13\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u6682\u65f6\u5750\u5728\u4e00\u4e9b\u65b0\u786c\u4ef6\u4e0a\uff0c\u56e0\u4e3a\u4ed6\u4eec\u77e5\u9053\u81ea\u5df1\u7684\u94b1\u662f\u6700\u5212\u7b97\u7684\u3002\u968f\u7740AMD\u7684\u7b2c\u4e09\u4ee3ThreadRipper\u5904\u7406\u5668\u548cIntel\u7684Cascade Lake-X\u786c\u4ef6\u7684\u53d1\u5e03\uff0c\u6211\u4eec\u73b0\u5728\u6b63\u5904\u4e8e\u8fd9\u4e2a\u5b89\u9759\u7684\u65f6\u671f\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e9b\u5efa\u8bae\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u9ad8\u7aef\u53f0\u5f0f\u673a\u7528\u6237\uff0c\u7279\u522b\u662f\u4e13\u4e1a\u4eba\u58eb\u6765\u8bf4\uff0c\u7531\u4e8e\u541e\u5410\u91cf\u7684\u589e\u52a0\uff0c\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u644a\u9500\u786c\u4ef6\u6210\u672c\uff0c\u4ef7\u683c\u548c\u5bff\u547d\u53ef\u80fd\u4e0d\u662f\u95ee\u9898\u3002\u6b64\u5916\uff0c\u4f01\u4e1a\u751a\u81f3\u5b66\u672f\u673a\u6784\u53ef\u80fd\u4f1a\u9996\u9009\u9884\u5efa\u7cfb\u7edf\u7684\u4f9b\u5e94\u5546\uff0c\u56e0\u6b64\u5c06\u4f53\u9a8c\u5230\u4e0e\u7b80\u5355\u5730\u8d2d\u4e70\u5904\u7406\u5668\u4e0d\u540c\u7684\u6210\u672c\u7ed3\u6784-\u4ed6\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u7cfb\u7edf\u53ef\u80fd\u5177\u6709\u5ef6\u957f\u7684\u90e8\u4ef6\u548c\u652f\u6301\u4fdd\u4fee\uff0c\u751a\u81f3\u53ef\u80fd\u5177\u6709\u6e10\u8fdb\u7684\u81ea\u52a8\u5347\u7ea7\uff0c\u8fd9\u5c06\u7531\u4f9b\u5e94\u5546\u6765\u63d0\u4f9b\u3002\u5e0c\u671b\u8fd9\u4efd\u6e05\u5355\u5728\u4e3a\u4ed6\u4eec\u7684\u5ba2\u6237\u6784\u5efa\u7cfb\u7edf\u65f6\u4e5f\u80fd\u5bf9\u8fd9\u4e9b\u4f9b\u5e94\u5546\u6709\u7528\u3002\n\u53e6\u5916\uff0c\u4e3a\u4e86\u89e3\u51b3\u5728AMD\u7684Ryzen\u548cThreadRipper\u5e73\u53f0\u4e0a\u7684ECC\u95ee\u9898\u3002ECC\u4f4d\u4e8e\u8fd9\u4e00\u5730\u533a\uff0c\u8fd9\u7c7b\u5de5\u4f5c\uff0c\u4f46\u5b83\u662f\u672a\u7ecf\u9a8c\u8bc1\u7684\u3002\u8fd8\u6709\u6240\u8c13\u7684\u975e\u5b98\u65b9\u652f\u6301\uff0c\u8fd9\u4e0e\u5b98\u65b9\u8d44\u683c\u4e0d\u540c\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0cRyzen\u548cThreadRipper CPU\u90fd\u4e0d\u662fECC\u7684\u6b63\u5f0f\u5408\u683c\u5904\u7406\u5668\uff0c\u4f46\u662f\u5b83\u4eec\u4e2d\u7684\u5927\u591a\u6570(\u5982\u679c\u4e0d\u662f\u5168\u90e8)\u5c06\u663e\u793a\u975e\u5b98\u65b9\u652f\u6301\u3002\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u80fd\u4f1a\u8d77\u4f5c\u7528\uff0c\u4f46AMD\u4e0d\u4f1a\u4e3a\u6b64\u7ed9\u4f60\u5e2e\u52a9\u3002\u5bf9\u6b64\uff0c\u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a\n\u9996\u5148\uff0c\u5b83\u9700\u8981\u4e3b\u677f\u652f\u6301\u3002\u4e00\u4e9b\u4f9b\u5e94\u5546\u6b63\u5728\u8bbe\u8ba1\u5177\u6709ECC\u652f\u6301\u7684\u7535\u8def\u677f\uff0c\u4e00\u4e9b\u4f9b\u5e94\u5546\u5c06\u6b63\u5f0f\u83b7\u5f97\u652f\u6301ECC\u7684\u8d44\u683c\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u4f9b\u5e94\u5546\u5217\u51fa\u4e86\u5b98\u65b9\u652f\u6301\uff0c\u4eceAMD\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u60a8\u4e5f\u5c5e\u4e8e\u975e\u5b98\u65b9\u652f\u6301\u3002\n\u5176\u6b21\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u5b83\u662f\u5426\u8d77\u4f5c\u7528\u4e86\u3002\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u5728\u4e3b\u677f\u4e0a\u62e5\u6709\u975e\u6b63\u5f0f\u652f\u6301ECC\u7684CPU\u548c\u6b63\u5f0f\u652f\u6301ECC\u7684ECC\u5185\u5b58\uff0c\u5e76\u4e14\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u786e\u5b9a\u94fe\u4e2d\u7684\u6240\u6709\u90e8\u5206\u662f\u5426\u90fd\u652f\u6301ECC\u3002\u4f46\u4e0b\u4e00\u4e2a\u95ee\u9898\u662f\u5b83\u662f\u5426\u771f\u7684\u8d77\u4f5c\u7528\u4e86--\u4e00\u4e9b\u8f6f\u4ef6\u53ea\u68c0\u67e5\u5b83\u662f\u5426\u652f\u6301ECC\u6807\u5fd7\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u6d4b\u8bd5\u5b83\u3002\u6709\u62a5\u544a\u79f0\uff0c\u6839\u636e\u5927\u591a\u6570\u8861\u91cf\u6807\u51c6\uff0c\u7528\u6237\u5df2\u5c06\u94fe\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u6392\u5e8f\u5e76\u62a5\u544a\u4e3a\u6b63\u5728\u5de5\u4f5c\uff0c\u4f46\u6ca1\u6709\u4e00\u9879\u5b9e\u9645\u542f\u7528\u3002\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u7279\u5b9a\u9a71\u52a8\u7a0b\u5e8f\u6216BIOS\u95ee\u9898\u9020\u6210\u7684\u3002\u67d0\u4e9b\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u663e\u793a\u627e\u5230\u3001\u8fd0\u884c\u4f46\u672a\u542f\u7528ECC\u6216\u7c7b\u4f3c\u7684\u6587\u5b57\u3002\u6700\u7ec8\uff0c\u60a8\u9700\u8981\u80fd\u591f\u652f\u6301ECC\u8ddf\u8e2a\uff0c\u8fd9\u5728\u6d88\u8d39\u7ea7\u4e3b\u677f\u4e0a\u901a\u5e38\u4e0d\u53d7\u672c\u5730\u652f\u6301\u3002\u5728\u670d\u52a1\u5668\u7ea7\u4e3b\u677f\u4e0a\uff0c\u662f\u8fd9\u6837\u7684\u3002\n\u8fd9\u662f\u4e00\u4e2a\u96f7\u533a\uff0c\u4f60\u7684\u91cc\u7a0b\u6570\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u6211\u4eec\u8fd9\u91cc\u7684\u5efa\u8bae\u662f\uff0c\u5982\u679c\u60a8\u7edd\u5bf9\u9700\u8981\u4e00\u4e2a\u5e26\u6709ECC\u7684AMD CPU\u4f5c\u4e3a\u6784\u5efa\u7684\u5173\u952e\u4efb\u52a1\u90e8\u5206\uff0c\u90a3\u4e48\u53ef\u4ee5\u9009\u62e9EPYC\u3002\n\u56e0\u6b64\uff0c\u9a6c\u4e0a\u5c31\u4f1a\u6709\u5f3a\u70c8\u7684\u6297\u8bae\uff0c\u56e0\u4e3a\u6211\u4e0d\u5efa\u8bae\u5728\u8fd9\u91cc\u4f7f\u7528\u4efb\u4f55\u82f1\u7279\u5c14CPU\u3002\u82f1\u7279\u5c14\u6700\u8fd1\u572811\u6708\u63a8\u51fa\u4e86Cascade Lake-X\u5237\u65b0\u5e73\u53f0\uff0c\u4ef7\u683c\u660e\u663e\u4f4e\u4e8e\u4e0a\u4e00\u4ee3Skylake Refresh-X\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u4f1a\u6210\u4e3a\u95ee\u9898\u5462\uff1f\u5b83\u5206\u4e3a\u51e0\u4e2a\u9636\u6bb5\u3002\n\u9996\u5148\uff0c\u82f1\u7279\u5c14\u6700\u8fd1\u7684\u751f\u4ea7\u6301\u7eed\u4f9b\u4e0d\u5e94\u6c42\u3002\u56e0\u6b64\uff0c\u8be5\u516c\u53f8\u4e3b\u8981\u4e13\u6ce8\u4e8e\u5236\u9020\u9ad8\u6027\u80fd\u786c\u4ef6\uff0c\u4e3b\u8981\u662fXeon\u7cfb\u5217\u3002\u82f1\u7279\u5c14\u4e4b\u524d\u66fe\u627f\u8bfa\u7ee7\u7eed\u4ee5\u9177\u777fi9\u548c\u9177\u777fi7\u786c\u4ef6\u4fdd\u4f4f\u5e02\u573a\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u7f8e\u56fd\u7684\u4e3b\u8981\u7535\u5b50\u96f6\u552e\u5546\u627e\u4e0d\u5230\u4efb\u4f55HEDT\u5904\u7406\u5668\u7684\u4e8b\u5b9e\u662f\u4e00\u4e2a\u76f8\u5f53\u4ee4\u4eba\u62c5\u5fe7\u7684\u95ee\u9898\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6d88\u8d39\u7ea7\u76849900K\u5904\u7406\u5668\u4f3c\u4e4e\u786e\u5b9e\u4f9b\u5e94\u5145\u8db3\u3002\n\u6b64\u5916\uff0c\u7531\u4e8e\u5e93\u5b58\u4e0d\u8db3\u548c\u7f3a\u4e4f\u83b7\u5f97\u65b0\u5e93\u5b58\u7684\u627f\u8bfa\uff0c\u7f8e\u56fd\u7684\u4e3b\u8981\u7f51\u5e97\u751a\u81f3\u4ece\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u5b8c\u5168\u5220\u9664\u4e86\u82f1\u7279\u5c14\u7684\u4ea7\u54c1\u9875\u9762\u3002\u5c3d\u7ba1\u82f1\u7279\u5c14\u9996\u5e2d\u6267\u884c\u5b98\u9c8d\u52c3\u00b7\u65af\u65fa\u751a\u81f3\u5728\u4e00\u5c01\u9898\u4e3a\u201c\u6211\u4eec\u4e3a\u4f60\u800c\u6765\u201d\u7684\u516c\u5f00\u4fe1\u4e2d\u5199\u4e0b\u4e86\u7ef4\u6301\u751f\u4ea7\u548c\u652f\u6301\u5ba2\u6237\u7684\u5185\u5bb9\uff0c\u4f46\u8fd9\u4e00\u70b9\u4ecd\u7136\u5b58\u5728\u3002\u5728\u4e9a\u9a6c\u900a\u4e0a\u641c\u7d22\u9ad8\u7aef\u7684Cascade Lake-X Corei9-10980XE\u6ca1\u6709\u663e\u793a\u5217\u8868\uff0c\u53ea\u6709\u7b2c\u4e8c\u4ef6\u5b9e\u9645\u4e0a\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6ca1\u6709\u5e93\u5b58\u7684\u76f8\u5173CPU\u3002\u7b2c\u4e09\u65b9\u6709\u4e00\u4e9b\u5e93\u5b58\uff0c\u4f8b\u5982Newegg\u4e0a\u7684\u6838\u5fc3\u8ba1\u6570\u6700\u4f4e\u7684\u6a21\u578b\uff0c\u4f46\u6ca1\u6709\u5e93\u5b58\u3002B&amp\uff1bH\u6709\u6240\u6709CPU\u7684\u5217\u8868\uff0c\u4f46\u6240\u6709CPU\u90fd\u6ca1\u6709\u5e93\u5b58\u6216\u5ef6\u4ea4\u8ba2\u5355\u3002\n\u82f1\u7279\u5c14\u8868\u793a\uff0c\u52302020\u5e74\uff0c\u5176\u5904\u7406\u5668\u4ecd\u5c06\u5b58\u5728\u4f9b\u5e94\u95ee\u9898\u3002\u9274\u4e8eHEDT\u5e02\u573a\u53ea\u5360\u516c\u53f8\u603b\u541e\u5410\u91cf\u7684\u5f88\u5c0f\u4e00\u90e8\u5206\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5e02\u573a\u76ee\u524d\u53ef\u80fd\u4e0d\u662f\u751f\u4ea7\u7684\u4f18\u5148\u7ea7\u3002\u6b64\u5916\uff0c\u8003\u8651\u5230\u82f1\u7279\u5c14\u6700\u8fd1\u7f29\u5c0f\u4e86\u5176Cooper Lake Xeon\u5e73\u53f0\u7684\u8303\u56f4\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u82f1\u7279\u5c14\u7684HEDT\u5e73\u53f0\u672a\u6765\u4f1a\u6709\u4ec0\u4e48\u3002\u8be5\u516c\u53f8\u521a\u521a\u53d1\u5e03\u4e86Comet Lake\u5904\u7406\u5668\uff0c\u4f46\u8fd9\u53ea\u662f\u6d88\u8d39\u8005\u5e73\u53f0\u4e0a\u53cc\u901a\u9053\u8bbe\u8ba1\u7684\u6700\u591a10\u4e2a\u5185\u6838\u3002\n\u6709\u65f6\uff0c\u60a8\u9700\u8981\u7684\u53ea\u662f\u6838\u5fc3--\u8981\u4e48\u662f\u5927\u91cf\u865a\u62df\u673a\u7684\u6838\u5fc3\uff0c\u8981\u4e48\u662f\u9ad8\u5ea6\u5e76\u884c\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u6216\u8005\u5176\u4ed6\u4ec0\u4e48\u3002AMD\u548c\u82f1\u7279\u5c14\u90fd\u8bd5\u56fe\u4e3a\u5176\u4f01\u4e1a\u7ea7\u4ea7\u54c1\u7ebf\u4fdd\u7559\u5176\u6700\u9ad8\u5185\u6838\u6570\u91cf\u7684\u786c\u4ef6\uff0c\u4f8b\u598264\u6838EPYC\u548c28/56\u6838Xeons\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e9b\u786c\u4ef6\u8fd8\u9700\u8981\u4e3a\u591a\u63d2\u69fd\u529f\u80fd\u6216RDIMM\u652f\u6301\u548cRAS\u529f\u80fd\u7b49\u529f\u80fd\u652f\u4ed8\u989d\u5916\u8d39\u7528\u3002\n\u5bf9\u4e8e\u66f4\u591a\u7684\u201c\u6d88\u8d39\u8005\u201d\u786c\u4ef6\uff0c\u63d0\u4f9b\u7684\u6700\u9ad8\u5185\u6838\u6570\u91cf\u662fAMD\u768464\u4e2a\u5185\u6838\uff0cThreadRipper 3990X\uff0c\u76ee\u524d\u552e\u4ef7\u4e3a3700\u7f8e\u5143\uff0c\u5efa\u8bae\u96f6\u552e\u4ef7\u4e3a3990\u7f8e\u5143\u3002\u8be5\u82af\u7247\u63d0\u4f9b56\u4e2aPCIe 4.0\u901a\u9053\uff0c\u53e6\u59168\u4e2a\u901a\u9053\u7528\u4e8e\u82af\u7247\u7ec4\uff0c\u57fa\u9891\u4e3a2.9 GHz\uff0cTurbo\u4e3a4.3 GHz\u3002\u6211\u4eec\u5728\u4ef7\u503c20000\u7f8e\u5143\u7684\u82f1\u7279\u5c14\u9ad8\u7ea7\u4f01\u4e1aCPU\u4e0a\u6d4b\u8bd5\u4e86ThreadRipper 3990X\uff0c\u5e76\u6d4b\u8bd5\u4e86\u4ee4\u4eba\u5c34\u5c2c\u7684\u5e76\u884c\u5de5\u4f5c\u8d1f\u8f7d\u3002\n\u5982\u679c\u9700\u8981ECC\uff0c\u7528\u6237\u5982\u679c\u60f3\u53bbEPYC\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u83b7\u5f9764\u4e2a\u5185\u6838\u3002\u5355\u8def64\u6838EPYC 7702P\u662f\u8fd9\u91cc\u7684\u6b63\u786e\u9009\u62e9\uff0c\u5efa\u8bae\u96f6\u552e\u4ef7\u4e3a4425\u7f8e\u5143\uff0c\u6216\u8005\u8bf4\u6700\u8fd1\u7684\u96f6\u552e\u4ef7\u4e3a4784\u7f8e\u5143\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4ef7\u683c\uff0c\u786c\u4ef6\u67092.0 GHz\u7684\u57fa\u9891\u548c3.35 GHz\u7684turbo\u9891\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbf\u95ee8\u4e2a\u5b8c\u6574\u7684\u5185\u5b58\u901a\u9053\u3002ThreadRipper 3990X\u5177\u6709\u66f4\u9ad8\u7684\u9891\u7387\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u7684TDP\u66f4\u9ad8(200W\u6bd4280W)\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c3990X\u53ea\u6709\u56db\u4e2a\u5185\u5b58\u901a\u9053\u3002\u91cd\u8981\u7684\u662f\u8981\u7262\u8bb0\u8fd9\u4e00\u70b9\u3002\n\u82f1\u7279\u5c14\u7684\u4ea7\u54c1\u5305\u62ec56\u6838\u7684Cascade Lake-AP\u5904\u7406\u5668\uff0c\u4f46\u8fd9\u4e9b\u5904\u7406\u5668\u53ea\u80fd\u4f5c\u4e3a\u9ed8\u8ba4\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\uff0c\u82f1\u7279\u5c14\u7684\u5408\u4f5c\u4f19\u4f34\u53ef\u4ee5\u5728\u5176\u4e0a\u9500\u552e\u3002\u82f1\u7279\u5c14\u4ecd\u7136\u62d2\u7edd\u900f\u9732\u8fd9\u6b3e\u5904\u7406\u5668\u7684\u4ef7\u683c\uff0c\u5c3d\u7ba1\u6211\u4eec\u4f30\u8ba1\u5b83\u7684\u4ef7\u683c\u572825000\u7f8e\u5143\u5de6\u53f3\u3002\u670928\u4e2a\u5185\u6838\u7684\u81f3\u5f3aW-3175X\u5f85\u552e\uff0c\u552e\u4ef7\u4e3a3100\u7f8e\u5143\uff0c\u4f46\u53ea\u6709\u4e00\u534a\u5185\u6838\u7684\u4ef7\u683c\u51e0\u4e4e\u76f8\u540c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cEPYC7702P\u662f\u4e00\u4e2a\u53ef\u4ee5\u73b0\u6210\u8d2d\u4e70\u7684\u63d2\u5165\u5f0f\u90e8\u4ef6\uff0c\u5f97\u5230\u4e86\u6211\u4eec\u7684\u6295\u7968\u3002\n\u6700\u8fd1HEDT\u66f4\u65b0\u7684\u6700\u4f73\u6027\u80fd\u4e4b\u4e00\u662fThreadRipper 3970X\u3002\u5728\u91c7\u7528\u7edf\u4e00\u5185\u5b58\u8bbe\u8ba1\u7684\u9ad8\u7aef\u53f0\u5f0f\u673a\u5e73\u53f0\u4e0a\u4ee5\u82f1\u7279\u5c14\u4e0d\u4e45\u524d\u63d0\u4f9b\u768410\u4e2a\u5185\u6838\u7684\u4ef7\u683c\u63d0\u4f9b32\u4e2a\u5185\u6838\uff0c\u6bcf\u7f8e\u5143\u7684\u5185\u6838\u6570\u91cf\u662f\u4e00\u4e2a\u60ca\u4eba\u7684\u98de\u8dc3\uff0c\u800c\u5f53\u4f60\u8003\u8651\u5230ThreadRipper\u62e5\u6709\u66f4\u9ad8\u7684IPC\u548c\u6fc0\u8fdb\u7684\u9891\u7387\u65f6\uff0c\u5b83\u5c31\u66f4\u52a0\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\n\u4e0a\u4e00\u4ee332\u6838\u7b2c\u4e8c\u4ee3Threadriper\u7684\u4e3b\u8981\u62b1\u6028\u662f\u5185\u5b58\u5206\u5e03\u4e0d\u5747\uff0c\u8fd9\u4e00\u70b9\u968f\u77403970X\u4e00\u8d77\u6d88\u5931\u4e86\uff0c\u5141\u8bb8\u66f4\u7edf\u4e00\u7684\u8bbe\u8ba1\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5728\u5de5\u4f5c\u7ad9\u4e0a\u5f88\u597d\u5730\u5b8c\u6210\u60a8\u60f3\u8981\u505a\u7684\u6240\u6709\u4e8b\u60c5\u3002\n\u5728\u6211\u4eec\u76843970X\u8bc4\u6d4b\u4e2d\uff0c\u6211\u7528\u4e86\u201c\u8840\u6d17\u201d\u8fd9\u4e2a\u8bcd\uff0c\u56e0\u4e3a\u5728\u4efb\u4f55\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u9177\u777fi9-10980XE\u60f3\u8981\u505a\u5f97\u5f88\u597d\uff0c3970X\u90fd\u4f1a\u83b7\u80dc\uff0c\u6709\u65f6\u4f1a\u56e0\u4e3a\u62e5\u6709\u51e0\u4e4e\u4e24\u500d\u7684\u5185\u6838\u800c\u5927\u5e45\u9886\u5148\u300210980XE\u8d62\u5f97\u7684\u552f\u4e00\u4e00\u6b21\u591a\u7ebf\u7a0b\u6d4b\u8bd5\u662f\u4e0eAVX512\u76f8\u5173\u7684\uff0c\u4e00\u4e9b\u4eba\u62b1\u6028\u8bf4\uff0c\u6211\u6ca1\u6709\u6307\u51fa10980XE\u4e5f\u4ee5\u5f88\u5c0f(\u4f4e\u4e8e3%)\u7684\u5229\u6da6\u7387\u8d62\u5f97\u4e8635+\u6e38\u620f\u6d4b\u8bd5\uff0c\u4f46\u90a3\u4e9b\u4eba\u663e\u7136\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5904\u7406\u5668\u662f\u600e\u4e48\u56de\u4e8b\u3002\u5bf9\u4e8e\u4efb\u4f55\u4eba\u6765\u8bf4\uff0c3970X\u90fd\u662f\u4e00\u6b3e\u5f88\u597d\u7684\u5904\u7406\u5668\uff0c\u53ea\u8981\u4ed6\u4eec\u80fd\u4e3a\u82af\u7247\u652f\u4ed82000\u7f8e\u5143\uff0c\u53e6\u5916\u518d\u652f\u4ed8100\u7f8e\u5143\u4ee5\u4e0a\u7684\u6563\u70ed\u8d39(\u7136\u540e\u662f500\u7f8e\u5143\u4ee5\u4e0a\u7684\u5185\u5b58\uff0c500\u7f8e\u5143\u7684\u4e3b\u677f\uff0c\u7b49\u7b49)\u3002\n\u5bf9\u4e8e\u4efb\u4f55\u60f3\u8981\u66f4\u5177\u6210\u672c\u6548\u76ca\u7684\u9ad8\u7aef\u53f0\u5f0f\u673a\u7cfb\u7edf\u7684\u4eba\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u770b\u770b\u4e2d\u5c42\u53f0\u5f0f\u673a\u6765\u8282\u7701\u4e00\u4e9b\u94b1\u3002\u8fd9\u5c31\u662f\u82f1\u7279\u5c14\u5b9e\u9645\u4e0a\u66f4\u5177\u7ade\u4e89\u529b\u7684\u5730\u65b9\uff1ai9-10980XE\u670918\u4e2a\u5185\u6838\uff0cOEM\u4ef7\u683c\u4e3a979\u7f8e\u5143\uff0c\u800c24\u6838TR 3960X\u7684\u4ef7\u683c\u4e3a1399\u7f8e\u5143\u3002\u6bcf\u4e2a\u6838\u5fc3\u7684\u6210\u672c\u663e\u7136\u5f88\u63a5\u8fd1\uff0c\u4e24\u4e2a\u5904\u7406\u5668\u7684\u6210\u672c\u90fd\u572855\u7f8e\u5143\u5de6\u53f3\uff0c\u800c\u4e14\u4e24\u4e2a\u5904\u7406\u5668\u90fd\u6709\u52a0\u5206(\u5c3d\u7ba1\u5728\u6211\u4eec\u7684\u6d4b\u8bd5\u4e2d\uff0c24\u6838\u786e\u5b9e\u7ecf\u5e38\u9886\u5148\uff0c\u8fd9\u53ef\u80fd\u662f\u610f\u6599\u4e4b\u4e2d\u7684)\u3002\n\u5728\u4ee5\u524d\u7684\u6307\u5357\u4e2d\uff0c\u7531\u4e8e\u53ef\u7528\u6027\u7684\u4e0d\u540c\uff0c\u8fd9\u4e00\u90e8\u5206\u59cb\u7ec8\u662f\u4e0d\u540c\u7684\u3002\u7136\u800c\uff0c\u5c3d\u7ba1\u82f1\u7279\u5c14\u4ecd\u7136\u5b58\u5728\u95ee\u9898\uff0c\u4f46\u8fd9\u4e00\u6b21AMD\u7684\u9009\u62e9\u4f3c\u4e4e\u5f88\u591a\u3002\u5176\u4e2d\u4e00\u4e9b\u5904\u7406\u5668\u6700\u7ec8\u843d\u5165\u7cfb\u7edf\u5efa\u9020\u5546\u6216\u539f\u59cb\u8bbe\u5907\u5236\u9020\u5546(\u5c24\u5176\u662f\u82f1\u7279\u5c14)\u624b\u4e2d\uff0c\u800c\u4e0d\u662f\u8fdb\u5165\u96f6\u552e\u5e02\u573a\u3002\n\u8fd9\u91cc\u7684\u4e00\u4e2a\u9009\u62e9\u662f\u770b\u770bAMD\u7684Ryzen93950X\uff0c\u5c3d\u7ba1\u5728\u9ad8\u7aef\u684c\u9762\u7a7a\u95f4\uff0c\u5982\u679c\u4f60\u9700\u8981\u5927\u91cf\u7684\u5185\u5b58\u6216PCIe\u901a\u9053\uff0c\u8fd9\u5e76\u4e0d\u662f\u5f88\u5408\u9002\u3002Ryzen 9 3950X\u5728\u67d0\u4e9b\u5730\u533a\u4e5f\u5f88\u96be\u627e\u5230\u3002\n\u53ef\u4ee5\u9009\u62e9\u67e5\u770b\u8f83\u65e7\u7684\u786c\u4ef6\u3002AMD\u768416\u6838\u7b2c\u4e8c\u4ee3Threadriper 2950X\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u5c3d\u7ba1\u8003\u8651\u5230\u7b2c\u4e09\u4ee3\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u6211\u53ef\u80fd\u4f1a\u907f\u514d\u66f4\u9ad8\u7684\u5185\u6838\u6570\u91cf\uff0c\u9664\u975e\u5b83\u771f\u7684\u5f88\u4fbf\u5b9c\u3002\u82f1\u7279\u5c14\u4ecd\u5728\u9500\u552eSkylake-X\u5904\u7406\u5668\uff0c\u5e0c\u671b\u5f53\u8fd9\u7bc7\u6587\u7ae0\u4e0a\u7ebf\u65f6\uff0c\u4ed6\u4eec\u80fd\u4eab\u53d7\u534a\u4ef7\u6298\u6263\uff0c\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u4e0d\u662f\u65e2\u5b9a\u7684\u3002\n\u5982\u679c\u4f60\u771f\u7684\u60f3\u8981\u6700\u597d\u7684\u4e2d\u7aef\u786c\u4ef6\uff0c\u5bf9\u4e8eAMD\uff0c\u6211\u5efa\u8bae\u4f60\u4e70\u4fbf\u5b9c\u76842950X\uff0c\u6216\u8005\u7b49\u52303960X\u4e0a\u5e02\u3002\n\u6211\u5728\u8fd9\u91cc\u6dfb\u52a0\u4e86AVX\u5904\u7406\u5668\u7684\u5efa\u8bae\uff0c\u56e0\u4e3a\u5982\u679c\u7528\u6237\u53ef\u80fd\u9047\u5230AVX\u52a0\u901f\uff0c\u5b83\u5c06\u4f7f\u7528\u9488\u5bf9\u6d88\u8d39\u8005\u548c\u9ad8\u7aef\u684c\u9762\u7528\u6237\u7684\u8f6f\u4ef6\u3002\u82f1\u7279\u5c14\u4e00\u76f4\u5728\u63a8\u52a8\u5176AVX512\u652f\u6301\uff0c\u751a\u81f3\u5c06\u5176\u5f15\u5165\u5176\u6d88\u8d39\u7c7b\u7b14\u8bb0\u672c\u7535\u8111\u5904\u7406\u5668\uff0c\u4ee5\u52aa\u529b\u63a8\u52a8DLBoost\u7b49\u4ea7\u54c1\u63d0\u9ad8AI\u541e\u5410\u91cf\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u5728\u82f1\u7279\u5c14\u9047\u5230\u7684\u4e00\u4e2a\u75db\u70b9\u5b9e\u9645\u4e0a\u662f\u83b7\u5f97\u4e86\u4e00\u4efdAVX512\u4f7f\u7528\u6848\u4f8b\u7684\u5217\u8868\uff1a\u4f7f\u7528AVX512\u7684\u786e\u5207\u8f6f\u4ef6\u793a\u4f8b\u3002\u5b83\u901a\u5e38\u662f\u9488\u5bf9\u975e\u5e38\u5177\u4f53\u7684\u4e1c\u897f\u800c\u6dfb\u52a0\u7684\uff0c\u6bd4\u5982Photoshop\u4e2d\u7684\u67d0\u4e2a\u6ee4\u955c\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u7279\u522b\u7248\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4f46\u6700\u7ec8\u9ad8\u6027\u80fd\u8ba1\u7b97\u9886\u57df\u7684\u4eba\u4f1a\u4ece\u4e2d\u83b7\u76ca\u6700\u591a\u3002\u5bf9\u4e8e\u90a3\u4e9b\u7528\u6237\uff0c\u8fd9\u4e2a\u5efa\u8bae\u662f\u7ed9\u60a8\u7684\u3002\n\u6211\u4eec\u7684\u9177\u777fi9-10980XE\u5ba1\u6838\u793a\u4f8b\u3002\u8fd9\u662f\u4e00\u4e2aQS(\u5408\u683c\u6837\u672c)\u82af\u7247\uff0c\u8fd9\u610f\u5473\u7740\u5c3d\u53ef\u80fd\u63a5\u8fd1\u96f6\u552e\u3002\n\u4f60\u80fd\u4e70\u5230\u7684\u9002\u7528\u4e8eAVX512\u7684\u6700\u597d\u7684\u9ad8\u7aef\u53f0\u5f0f\u673a\u73b0\u6210\u5904\u7406\u5668\u662f\u9177\u777fi9-10980XE\uff0c\u5b83\u768418\u6838\u90fd\u652f\u6301AVX512\u3002\u5982\u679c\u60a8\u9700\u8981ECC\uff0c\u90a3\u4e48Xeon W-3275/3175X\u5c06\u662f\u60a8\u6700\u597d\u7684\u9009\u62e9\uff0c\u4f46\u5b83\u7684\u6210\u672c\u4f1a\u7a0d\u9ad8\u4e00\u4e9b\uff0c\u5e76\u4e14\u9700\u8981\u4e00\u4e2a\u7279\u6b8a\u7684Xeon W\u4e3b\u677f\u3002\u5982\u679c\u4e0d\u8003\u8651\u6210\u672c\uff0c\u5219\u8fc1\u79fb\u5230\u5177\u6709Xeon Scalable\u5904\u7406\u5668\u7684\u53cc\u63d2\u69fd\u7cfb\u7edf\u53ef\u80fd\u66f4\u53ef\u53d6\uff0c\u4e0d\u8fc7\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4f1a\u5f15\u5165\u975e\u7edf\u4e00\u5185\u5b58\u8bbf\u95ee(NUMA)\u73af\u5883\uff0c\u5982\u679c\u8f6f\u4ef6\u4e0d\u652f\u6301NUMA\uff0c\u5219\u4f1a\u963b\u6b62\u6279\u91cf\u6570\u636e\u4f20\u8f93\u3002\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u901a\u5e38\u9996\u9009\u5355\u63d2\u5ea7\u3002\u82f1\u7279\u5c14\u5728\u8fd9\u91cc\u7684\u4e0d\u5229\u4e4b\u5904\u662f\u627e\u5230\u4e00\u4e2a\u5f85\u552e\u7684CPU\u3002\n\u6bcf\u63d2\u69fd\u9ad8\u8fbe2 TB\u7684AMD EPYC\u3001\u91c7\u7528Optane DCPMM\u7684\u82f1\u7279\u5c14\u81f3\u5f3a\uff0c\u6bcf\u63d2\u69fd\u9ad8\u8fbe4.5 TB\uff0c\u6216\u82f1\u7279\u5c14\u9177\u777fi9-10900X(\u6216\u4efb\u4f55\u9177\u777fi9-109xx\u7cfb\u5217)\u3002\n\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u673a\u6216\u9ad8\u5185\u5b58\u4f7f\u7528\u60c5\u5f62\u8981\u6c42\uff0c\u6709\u4e9b\u7528\u6237\u53ea\u662f\u4e3a\u4e86\u63d0\u4f9b\u5185\u5b58\u652f\u6301\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u95ee\u9898\uff0c\u6709\u65f6\u5185\u5b58\u5bb9\u91cf\u6bd4\u8ba1\u7b97\u6027\u80fd\u66f4\u91cd\u8981\uff0c\u56e0\u4e3a\u8f6f\u4ef6\u9700\u8981\u4ee5TB\u4e3a\u5355\u4f4d\u7684\u5de5\u4f5c\u7a7a\u95f4-\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06DRAM\u589e\u52a0\u4e00\u500d\u81f3128 GB\u6216\u66f4\u591a\u603b\u662f\u6bd4\u589e\u52a0\u8ba1\u7b97\u66f4\u6709\u5229\uff0c\u56e0\u4e3a\u5b83\u51cf\u5c11\u4e86\u5728DRAM\u548c\u5b58\u50a8\u4e4b\u95f4\u6765\u56de\u79fb\u52a8\u6570\u636e\u7684\u538b\u529b\u3002\u901a\u5e38\u4e5f\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u4f7f\u7528\u5e26ECC\u7684RDIMM\uff0c\u56e0\u4e3a\u968f\u7740\u5185\u5b58\u5bb9\u91cf\u7684\u589e\u52a0\uff0c\u9519\u8bef\u4f4d\u7ffb\u8f6c\u7684\u53ef\u80fd\u6027\u786e\u5b9e\u4f1a\u968f\u7740\u5185\u5b58\u5bb9\u91cf\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\u8fd9\u4e00\u4ea7\u54c1\u7c7b\u522b\u7684\u5185\u5b58\u4ef7\u683c\u901a\u5e38\u4e5f\u6bd4CPU\u6210\u672c\u9ad8\u51fa\u4e00\u4e2a\u6570\u91cf\u7ea7\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u79cd\u9009\u62e9\u662fEPYC\uff0c\u50cf\u552e\u4ef7500\u7f8e\u5143\u76847232P\u53ef\u4ee5\u8f7b\u677e\u652f\u63012TB\u7684LRDIMM(\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u8981\u8d2d\u4e70*\u90a3\u4e48\u591a\u5185\u5b58\uff0c\u90a3\u4e48\u4ee54784\u7f8e\u5143\u7684\u4ef7\u683c\u8d2d\u4e7064\u68387702P\u5e76\u4e0d\u662f\u4ec0\u4e48\u98de\u8dc3)\u3002\n\u4f7f\u7528x86\u5904\u7406\u5668\u83b7\u5f97\u66f4\u591a\u5185\u5b58\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u9009\u62e9\u914d\u5907Optane DC\u6c38\u4e45\u5185\u5b58\u7684\u82f1\u7279\u5c14\u81f3\u5f3a\u53ef\u6269\u5c55\u5904\u7406\u5668\uff0c\u6bcf\u4e2a\u63d2\u69fd\u5141\u8bb8\u9ad8\u8fbe4.5 TB\u7684\u5185\u5b58\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u6570\u5b57\uff0c\u4f60\u5fc5\u987b\u6295\u8d44\u4e8eM\u4e2a\u5904\u7406\u5668\u4e2d\u7684\u4e00\u4e2a\uff0c\u8fd9\u4f1a\u4f7f\u82af\u7247\u7684\u6210\u672c\u518d\u589e\u52a03000\u7f8e\u5143\u3002\u8fd9\u91cc\u7684\u53e6\u4e00\u4e2a\u56e0\u7d20\u662fOptane DCPMM\u4e0d\u80fd\u901a\u8fc7\u901a\u5e38\u7684\u6e20\u9053\u514d\u8d39\u9500\u552e\uff1a\u5b83\u901a\u5e38\u662fOEM\u7cfb\u7edf\u6784\u5efa\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u7528\u6237\u6700\u7ec8\u5c06\u83b7\u5f97\u7279\u5b9aOEM\u7684\u652f\u6301\u8054\u7cfb\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u4f01\u4e1a\u548c\u7814\u7a76\u793e\u533a\uff0c\u8fd9\u5e94\u8be5\u662f\u5408\u9002\u7684-\u8bf7\u54a8\u8be2\u60a8\u9996\u9009\u7684OEM\uff0c\u4e86\u89e3\u4ed6\u4eec\u63d0\u4f9b\u7684\u4ea7\u54c1\u3002\n\u6211\u8fd8\u60f3\u5728\u8fd9\u91cc\u4e3a\u82f1\u7279\u5c14\u6700\u65b0\u7684Cascade Lake-X\u5904\u7406\u5668\u8bf4\u53e5\u8bdd\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6709\u56db\u4e2a\u901a\u9053/\u516b\u4e2a\u5185\u5b58\u63d2\u69fd\u548c\u6bcf\u4e2a\u63d2\u69fd32 GB\u7684DRAM\uff0c\u5219\u6700\u5927\u53ef\u8fbe256 GB\u3002\u4f46\u8db3\u591f\u6709\u8da3\u7684\u662f\uff0c\u5f53\u4e0eASRock X299\u4e3b\u677f(X299X Taichi\u3001X299 Steel Legend\u6216X299 Creator)\u914d\u5bf9\u65f6\uff0c\u8fd9\u4e9b\u4e3b\u677f\u73b0\u5728\u53ef\u4ee5\u652f\u6301128 GB RDIMM\uff0c\u5141\u8bb8\u6bcf\u4e2a\u5355\u4e2a\u63d2\u69fd\u67091 TB\u7684DRAM\u3002\n\u76ee\u524d\uff0c\u534e\u7855\u4e5f\u5728\u8003\u8651\u542f\u7528LRDIMM\u652f\u6301\u3002\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u65b0\u7684\u53d1\u5c55\uff0c\u7531ASRock\u7684\u4e00\u540d\u5de5\u7a0b\u5e08\u5728\u4ed6\u7684\u4e2a\u4eba\u793e\u4ea4\u5a92\u4f53\u8d26\u6237\u4e0a\u53d1\u5e03\uff0c\u4f46\u6240\u9700\u7684BIOS\u73b0\u5728\u662f\u516c\u5f00\u7684\uff0c\u5bf9\u4e8e\u6295\u8d44\u4e8e\u82f1\u7279\u5c14\u751f\u6001\u7cfb\u7edf\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u975e\u5e38\u503c\u5f97\u4e00\u770b\u3002\n\u5bf9\u4e8e\u4efb\u4f55\u60f3\u8981\u4ee5\u6700\u5c11\u7684$$\u83b7\u5f97\u6700\u591a\u5185\u6838\u7684\u4eba\u6765\u8bf4\uff0c\u5f53\u5b83\u4eec\u6253\u6298\u65f6\uff0c\u6211\u4eec\u7684\u9009\u62e9\u5fc5\u987b\u662f16\u6838ThreadRipper 2950X\u62161950X\u3002\u968f\u7740\u65b0\u76843000\u7cfb\u5217\u5f00\u7ebf\u5668\u5904\u7406\u5668\u7684\u63a8\u51fa\uff0c\u4ee5\u524d\u7684\u90e8\u4ef6\u7ecf\u5e38\u4ee5\u4f4e\u4ef7\u627e\u5230\uff0c\u4e00\u4e9b\u96f6\u552e\u5546\u5e0c\u671b\u6e05\u7a7a\u5e93\u5b58\u3002\u6211\u4eec\u770b\u5230\uff0c\u5373\u4f7f\u5728\u4e9a\u9a6c\u900a\u4e0a\uff0c2950X\u5904\u7406\u5668\u7684\u4ef7\u683c\u4e5f\u4f4e\u81f3GB330/400\u7f8e\u5143(\u76ee\u524d\u4e3a500\u7f8e\u5143)\uff0c\u800c1950X\u5904\u7406\u5668\u7684\u4ef7\u683c\u4e3a250\u7f8e\u5143\u3002\n\u62e5\u6709\u56db\u901a\u9053\u5185\u5b58\u548c64\u4e2aPCIe\u901a\u9053\u7528\u4e8e\u751f\u4ea7\u8005\u5de5\u4f5c\u6d41\u662f\u975e\u5e38\u68d2\u7684-\u6b63\u5982\u6211\u4eec\u5728\u8bc4\u8bba\u4e2d\u6307\u51fa\u7684\u90a3\u6837\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u8986\u76d6\u4e86\u5927\u591a\u6570(\u4f46\u4e0d\u662f\u5168\u90e8)\u9ad8\u7aef\u53f0\u5f0f\u673a\u57fa\u7840\uff0c\u56e0\u6b64\u503c\u5f97\u7814\u7a76\u54ea\u4e9b\u6700\u9002\u5408\u76ee\u6807\u8f6f\u4ef6\u3002\u4f46\u4e0e\u51e0\u5e74\u524d\u7684\u65e7\u786c\u4ef6\u76f8\u6bd4\uff0c\u8fd9\u5bf9\u5f88\u591a\u4eba\u6765\u8bf4\u662f\u975e\u5e38\u503c\u5f97\u5347\u7ea7\u7684\u3002\u4e0e2970WX/2990WX\u76f8\u6bd4\uff0c2950X\u5728\u591a\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u4e0a\u7684\u6027\u80fd\u4e5f\u66f4\u597d\uff0c\u800c\u4e14\u4ef7\u683c\u4fbf\u5b9c\u5f97\u591a\uff0c\u7269\u6709\u6240\u503c\u3002\n\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u9884\u7b97\u5185\u7684HEDT\u7cfb\u7edf\uff0c\u95ee\u9898\u662f\u5b83\u662f\u5fc5\u987b\u662f\u65b0\u7684\u8fd8\u662f\u8981\u7528\u7684\u3002\u5728\u8bb8\u591a\u4e13\u4e1a\u60c5\u51b5\u4e0b\uff0cNEW\u4ecd\u7136\u662f\u9996\u9009\uff0c\u800c\u5728\u8fd9\u91cc\u83b7\u5f97\u9636\u68af\u7684\u5904\u7406\u5668\u662fAMD\u7684ThreadRipper 1900X\u30028\u6838\u5904\u7406\u5668\u63d0\u4f9b\u9ad8\u5bb9\u91cf\u5185\u5b58\u652f\u6301\uff0c\u5927\u91cfPCIe\u901a\u9053\uff0cThreadRipper\u7684\u4f4e\u7aef\u4e3b\u677f\u73b0\u5728\u6b63\u8fdb\u5165\u4e2d\u4f4e\u7aef\u5b9a\u4ef7\u3002\u5728\u51cf\u4ef7\u9500\u552e\u4e2d\uff0c1900X\u7684\u4ef7\u683c\u4e0d\u5230200\u7f8e\u5143(\u6709\u94b1\u7684\u7528\u6237\u53ef\u80fd\u4f1a\u8f6c\u800c\u5bfb\u627e\u4fbf\u5b9c\u76841950X)\uff0c\u5bf9\u4e8e\u9ad8\u7aef\u53f0\u5f0f\u673a\u5904\u7406\u5668\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u75af\u72c2\u7684\u4f4e\u4ef7\u3002\n\u6211\u4eec\u6b63\u5904\u4e8e\u9ad8\u7aef\u53f0\u5f0f\u673a\u5e02\u573a\u76f8\u5bf9\u7a33\u5b9a\u7684\u65f6\u671f\u3002AMD\u548c\u82f1\u7279\u5c14\u6700\u8fd1\u90fd\u6709\u6700\u65b0\u4e00\u4ee3\u786c\u4ef6\u7684\u91cd\u5927\u53d1\u5e03\uff0c\u6211\u4eec\u81f3\u5c11\u8fd8\u67092-3\u4e2a\u5b63\u5ea6\u624d\u4f1a\u8c08\u8bba\u4e0b\u4e00\u4ee3\u90e8\u4ef6\uff0c\u5982\u679c\u4e0d\u662f\u66f4\u957f\u7684\u8bdd\uff0c\u8fd8\u67092\u4e2a\u5b63\u5ea6\u624d\u4f1a\u53d1\u5e03\u3002\u4eca\u5929\u8d2d\u4e70\u7684\u4efb\u4f55\u7cfb\u7edf\u90fd\u5c06\u6301\u7eed\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u6b64\uff0c\u57282020\u5e74\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u4eba\u4eec\u90fd\u4e0d\u4f1a\u6709\u592a\u591a\u671f\u5f85\u3002\n\u5bf9\u4e8e\u82f1\u7279\u5c14\u6765\u8bf4\uff0c\u60c5\u51b5\u4e1d\u6beb\u4e0d\u660e\u6717\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u82f1\u7279\u5c14\u8ba1\u5212\u5728\u8fd9\u4e00\u9886\u57df\u63a8\u51fa\u4ec0\u4e48\u4ea7\u54c1\uff0c\u4e5f\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u63a8\u51fa\u3002\u8be5\u516c\u53f8\u6700\u8fd1\u5c06\u5176Cooper Lake Xeon\u5e73\u53f0\u7684\u8303\u56f4\u7f29\u5c0f\u4e3a\u53ea\u9009\u62e9\u5ba2\u6237\uff0c\u8fd9\u4e5f\u505c\u6b62\u4e86\u4efb\u4f55HEDT\u4ea7\u54c1\u3002\u8fd9\u610f\u5473\u7740\u5373\u5c06\u4e0a\u5e02\u7684\u4e0b\u4e00\u4ee3Xeon\u5e94\u8be5\u662f\u8be5\u516c\u53f810\u7eb3\u7c73\u5236\u7a0b\u4e0a\u7684\u51b0\u6e56\u3002\u7531\u4e8e\u8fd9\u6b3e\u4ea7\u54c1\u7684\u9884\u8ba1\u53d1\u5e03\u65e5\u671f\u4e3a2020\u5e74\u5e95\uff0c\u4eba\u4eec\u5bf9\u5b9e\u9645\u63a8\u51fa\u591a\u5c11\u6b3e\u6709\u5f88\u591a\u62c5\u5fe7-\u51b0\u6e56\u81f3\u5f3a\u662f\u5426\u4f1a\u5168\u9762\u4e0a\u5e02\uff0c\u6027\u80fd\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u7136\u540e\u5bf9\u4e8eHEDT\u5e02\u573a\uff0c\u5b83\u5c06\u5728\u4ec0\u4e48\u65f6\u5019\u8fc7\u6ee4\u6389\u5462\uff1f\u3002\u8fd9\u4e9b\u90fd\u662f\u6211\u60f3\u77e5\u9053\u82f1\u7279\u5c14\u73b0\u5728\u662f\u5426\u53ef\u4ee5\u6697\u793a\u7684\u95ee\u9898--\u5bf9\u4e8e\u90a3\u4e2a\u5236\u9020\u8fc7\u7a0b\uff0c\u5173\u952e\u5c06\u662f\u8bd5\u56fe\u5236\u9020\u51fa\u5b83\u80fd\u505a\u5230\u7684\u6700\u5177\u6210\u672c\u6548\u76ca\u7684\u90e8\u4ef6\uff0c\u800cHEDT\u5e76\u4e0d\u80fd\u4e0e\u9ad8\u7aefXeon\u7ec4\u4ef6\u76f8\u63d0\u5e76\u8bba\u3002\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e0a\uff0c\u82f1\u7279\u5c142020\u5e74\u7684HEDT\u524d\u666f\u770b\u8d77\u6765\u5f88\u53ef\u6015\uff0c\u6211\u4eec\u5bf92021\u5e74\u621610 nm\u4e00\u65e0\u6240\u77e5\u3002\n\u8fd9\u65b9\u9762\u7684\u4eae\u70b9\u662fAMD\u7684ThreadRipper 3990X\u3002\u8be5\u516c\u53f8\u63a8\u51fa\u4e8664\u6838\u7248\u672c\u7684Zen 2\u9ad8\u7aef\u53f0\u5f0f\u673a\u7cfb\u5217\uff0c\u8fd9\u662f64\u6838EPYC\u5904\u7406\u5668\u4e4b\u4e00\uff0c\u4f46\u62e5\u6709\u4e00\u534a\u7684\u5185\u5b58\u3001\u4e00\u534a\u7684PCIe\u548c\u66f4\u9ad8\u7684280W TDP\uff0c\u4ee5\u63d0\u9ad8\u9891\u7387\u3002\u201c\u6211\u4eec\u9884\u8ba1Zen 3\u4ea7\u54c1\u5c06\u4e8e2020\u5e74\u5e95\u5f00\u59cb\u4e0a\u5e02\uff0c\u5c3d\u7ba1AMD\u627f\u8bfa\u5728\u4eca\u5e74\u5e74\u5e95\u4e4b\u524d\u63a8\u51faEPYC\u548cRyzen\u90e8\u4ef6\uff0c\u4f46\u6211\u4eec\u9884\u8ba1HEDT\u5e02\u573a\u5c06\u5904\u4e8e\u8fd9\u4e00\u4ea7\u54c1\u70ed\u6f6e\u7684\u540e\u7aef\u3002\u201d\n\u770b\u6765\u4eca\u5929\u8d2d\u4e70\u7684\u4efb\u4f55HEDT\u7cfb\u7edf\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u90fd\u4e0d\u4f1a\u8fc7\u65f6\u3002\n\u8fdb\u51652020\u5e74\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u672a\u676512-18\u4e2a\u6708\u5185\u66f4\u65b0\u6211\u4eec\u7684\u57fa\u51c6\u5957\u4ef6\u3002\u6700\u8fd1\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2aAI\u57fa\u51c6\u6d4b\u8bd5\u3001\u66f4\u591a\u7684\u5ef6\u8fdf\u6d4b\u8bd5\u3001\u6307\u4ee4\u96c6\u6d4b\u8bd5\u3001NAMD(\u76ee\u524d\u9650\u5236\u4e3a64\u4e2a\u7ebf\u7a0b)\u3001\u4e00\u4e2a\u91cd\u91cf\u7ea7\u7684\u5355\u7ebf\u7a0b\u6709\u9650\u6a21\u62df\u6d4b\u8bd5\uff0c\u4ee5\u53ca\u5728CPU\u4e0a\u6e32\u67d3\u7684CROSITION\u3002\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u66f4\u591a\u4ee5\u5de5\u4f5c\u7ad9\u4e3a\u91cd\u70b9\u7684\u6d4b\u8bd5\uff0c\u6700\u597d\u662f\u4f7f\u7528\u53ef\u4ee5\u81ea\u52a8\u5316\u7684Windows\u7248\u514d\u8bb8\u53ef\u8bc1\u8f6f\u4ef6\u3002\u5982\u679c\u4f60\u6709\u4ec0\u4e48\u60f3\u6cd5\uff0c\u8bf7\u544a\u8bc9\u6211\u4eec\u3002\u6216\u8005\uff0c\u5982\u679c\u4efb\u4f55ISV/\u8f6f\u4ef6\u4f9b\u5e94\u5546\u6b63\u5728\u9605\u8bfb\u672c\u6587\uff0c\u8ba4\u4e3a\u8be5\u8f6f\u4ef6\u975e\u5e38\u9002\u5408\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b89\u6392\u65b0\u95fb\u8bb8\u53ef\uff0c\u8bf7\u52a1\u5fc5\u4e0e\u5176\u8054\u7cfb\u3002\n\u53d1\u8868\u8bc4\u8bba\u6ca1\u6709\u5355\u6838\u7c7b\u522b\uff1f\u9057\u61be\u7684\u662f\uff0c\u5927\u591a\u6570\u5de5\u4f5c\u7ad9\u90fd\u662f\u5728\u540c\u6b65\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u4f7f\u7528\u7684\uff0c\u8fd9\u4e9b\u5de5\u4f5c\u8d1f\u8f7d\u4e0d\u4f1a\u8de8\u6838\u5fc3\u5747\u8861\u8d1f\u8f7d\u3002\u56de\u8986\u3002\n\u5927\u591a\u6570\uff1f\u4f60\u4f3c\u4e4e\u4e0d\u660e\u767d\u90a3\u662f\u4ec0\u4e48\u610f\u601d\u3002\u4ec5\u9650\u5355\u6838\u7684\u5de5\u4f5c\u8d1f\u8f7d\u662f\u5c0f\u4f17\u4ea7\u54c1\uff0c\u4efb\u4f55\u7cfb\u7edf(\u82f1\u7279\u5c14\u6216AMD)\u90fd\u80fd\u63d0\u4f9b\u8db3\u591f\u4e0d\u9519\u7684\u5355\u6838\u6027\u80fd\u3002\u56de\u8986\u3002\n\u6211\u4e0d\u77e5\u9053\u5927\u591a\u6570\u60c5\u51b5\uff0c\u4f46AutoCAD\u4e3b\u8981\u662f\u4e00\u4e2a\u5355\u6838\u5fc3\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u662f\u5e7f\u6cdb\u4f7f\u7528\u7684\u5de5\u4f5c\u7ad9\u8f6f\u4ef6\u3002\u5b83\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u662f\u53d7CPU\u9650\u5236\u7684\uff0c\u56e0\u6b64\u5355\u6838\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002\u56de\u8986\u3002\nAutodesk\u6709\u8bb8\u591a\u4ea7\u54c1\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u6216\u8005\u6ca1\u6709\u5f88\u597d\u5730\u5229\u7528\u591a\u7ebf\u7a0b\u3002\u8fd8\u6709\u8bb8\u591a\u79d1\u5b66\u5de5\u4f5c\u8d1f\u8f7d\u6ca1\u6709\u5185\u7f6e\u7ebf\u7a0b\u3002\u8fd9\u5305\u62ec\u8bb8\u591aR(\u6216\u65e7\u7684S)\u5305\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u79d1\u5b66\u6846\u67b6\u9700\u8981\u5feb\u901f\u7684\u5355\u6838\u6027\u80fd\u3002\u5bf9\u4e8e\u8bb8\u591a\u4eba\u6765\u8bf4\uff0c\u8fd9\u786e\u5b9e\u5305\u62ec\u5927\u591a\u6570\u5de5\u4f5c\u91cf\u3002\u8fd9\u5f53\u7136\u4e0d\u662f\u901a\u7528\u7684\uff0c\u4f46\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u6709\u73b0\u4ee3\u4ee3\u7801\u5e93\u3001\u79ef\u6781\u7684\u8f6f\u4ef6\u4f18\u5316\u6216\u53ef\u5e76\u884c\u7684\u4ee3\u7801\u8def\u5f84\u3002\u56de\u8986\u3002\n\u5b58\u5728\u8bb8\u591a\u5355\u7ebf\u7a0b\u6216\u4e25\u91cd\u591a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\n..", "note_en": "In our series of Best CPU guides, here\u2019s the latest update to our recommended workstation CPUs list. All numbers in the text are updated to reflect pricing at the time of writing. Numbers in graphs reflect MSRP.\n    Sometimes choosing a CPU is hard. So we&#39;ve got you covered. In our CPU Guides, we give you our pick of some of the best processors available, supplying data from our reviews. Our Best CPUs for Workstations guide mostly covers workstation processors available to consumers, although some server products cover both segments.\n  EPYC 7302P (2 TB/skt) \r\t\t\tIntel Cascade Lake (2 TB/skt?) \r\t\t\tIntel Xeon + Optane (4.5 TB/skt)\n  As we move through 2020, there comes a time when the high-end desktop market slows down a bit and everyone can sit on some new hardware for a while, knowing that they have the best for their money. With the release of AMD\u2019s Third Generation Threadripper processors and Intel\u2019s Cascade Lake-X hardware, we are now in that quiet period and we can give some recommendations.\n  It is worth noting that for some high-end desktop users, particularly professionals that can amortize the cost of the hardware over time due to their increased throughput, price and longevity might not be an issue. Also, businesses or even academic institutions may have preferred vendors for their pre-built systems, and as a result will experience a different cost structure than just simply buying a processor \u2013 they end up with a system that might have an extended parts and support warranty, or even with progressive automatic upgrades, and it will be up to the vendor to supply that. Hopefully this list can be useful to those vendors as well when it comes to building systems for their customers.\n    Also, to address the issue of ECC on AMD&#39;s Ryzen and Threadripper platforms. ECC lies in this region of &#39;it kind of works&#39; but isn&#39;t validated. There is what&#39;s called &#39;unofficial support&#39;, which is different to &#39;official qualification&#39;. Technically, none of the Ryzen and Threadripper CPUs are &#39;officially qualified&#39; for ECC, however most of them (if not all) will exhibit unofficial support. This means that it might work, but AMD won&#39;t give you assistance for it. There are two caveats to this:\n  First, it requires motherboard support. Some vendors are designing their boards with ECC support, and some will formally qualify supporting ECC. Note that even if the vendor lists official support, you are in &#39;unofficial support&#39; from AMD&#39;s perspective.\n  Secondly, there&#39;s the &#39;is it working&#39; question. Sure you can have a CPU that unofficially supports ECC, and ECC memory in a motherboard that &#39;officially supports&#39; ECC, and there are tools in the OS to determine that all the parts of the chain support it. But the next question is if it actually works - some software only checks the &#39;does it support ECC&#39; flag, rather than actually testing for it. There are reports of users who, by most measures, have everything in the chain sorted and reported as working, but none of it is actually enabled. This could be down to specific drivers, or a BIOS issue. Some software might say &#39;ECC found, running, but not enabled&#39;, or words to that effect. Ultimately you need the ability to support ECC tracking, which often isn&#39;t supported natively on consumer grade motherboards. On server grade motherboards, it is.\n  It&#39;s a minefield, and your mileage may vary. Our recommendation here is that if you absolutely need an AMD CPU with ECC as a mission critical part of your build, go for EPYC.\n    So straight off the bat, there\u2019s going to be an outcry that I\u2019m not recommending any Intel CPUs here. Intel recently launched its Cascade Lake-X Refresh platform in November with significantly lower prices than the previous Skylake Refresh-X generation, so why is this a problem? It comes in several stages.\n  Firstly, Intel\u2019s recent production demand continues to outstrip supply. As a result, the company is focusing on manufacturing mostly its high performance hardware, mostly in its Xeon line. Intel has previously made a commitment to still keeping the market with Core i9 and Core i7 hardware, so the fact that we can\u2019t find any HEDT processors to buy at the major etailers in the US is quite a concern. The consumer 9900K processors do seem to be in good supply by comparison.\n  Also, major etailers in the US have even gone so far as to remove Intel \u00a0product pages from their website completely, due to both the lack of stock and the lack of a commitment to obtaining new stock. This is despite Intel\u2019s CEO Bob Swan even writing about maintaining production and supporting its customers in an open letter entitled \u2018 We Are Here For You\u2019. Searching for the top-end Cascade Lake-X Corei9-10980XE on  Amazon shows no listing, and only the second item actually gives a relevant CPU that isn\u2019t in stock. There is some stock at third parties, such as on Newegg with the  lowest core count model, but out of stock.  B&amp;H has listings for all CPUs, but zero stock or back-order for all of them.\n  Intel has stated that through 2020 there will still be supply issues for its processors. Given that the HEDT market is a thin slice of the company\u2019s total throughput, it means that this market might be low priority for production right now. Also, given that Intel has  recently reduced the scope of its Cooper Lake Xeon platform, at this point we don\u2019t know what\u2019s in store for Intel\u2019s HEDT platform in the future. The company has just announced its  Comet Lake processors, but this is only up to 10 cores for a dual channel design on the consumer platform.\n      Sometimes all you want are cores - either for masses of virtual machines, or highly parallel workloads, or something else. Both AMD and Intel try to keep their highest core count hardware for their enterprise lines, such as 64-core EPYCs and 28/56-core Xeons, which means that these also come at an additional cost for features such as multi-socket capabilities or RDIMM support and RAS features.\n  For more \u2018consumer\u2019 hardware, the highest core count on offer is 64 cores from AMD, with the Threadripper 3990X, currently available for $3700 from its MSRP of $3990. This chip gives 56 lanes of PCIe 4.0, with another 8 lanes for the chipset, and comes in at a base frequency of 2.9 GHz and turbo of 4.3 GHz. \u00a0We tested the Threadripper 3990X against $20k of Intel\u2019s premium enterprise CPUs, and for workloads that were embarrassingly parallel.\n        If there is a need for ECC, users can get 64 cores in this way if they want to go EPYC. The single socket 64-core EPYC 7702P is the right choice here, with an MSRP of $4425, or a recent retail price of $4784. For that price the hardware has a base frequency of 2.0 GHz and a turbo frequency of 3.35 GHz, and access to eight full memory channels. The Threadripper 3990X has higher frequencies due to its higher TDP (200W vs. 280W), but as far the 3990X only has four memory channels. It will be important to keep this in mind.\n    Intel\u2019s offerings go up to the 56-core Cascade Lake-AP processors, but these are only available as part of a default server system that Intel\u2019s partners can sell on. Intel still refuses to attribute a price to this processor, although we\u2019ve estimated it around $25000. There is the Xeon W-3175X up for sale, with 28-cores, for $3100, but this is almost the same cost for only half the cores. The EPYC 7702P in this instance, being a socketed part that can be purchased off the shelf, gets our vote.\n      One of the peak performers of the recent HEDT refreshes was the Threadripper 3970X. Offering 32 cores on a high-end desktop platform with a unified memory design at a price where Intel used to offer 10 cores not too long ago is an astonishing leap in cores per dollar, and when you factor in that the Threadripper has a higher IPC and an aggressive frequency makes it all the more impressive.\n  The main complaint with the previous generation 32-core 2 nd gen Threadripper was the un-even memory distribution, and that is gone with the 3970X, allowing for a more unified design that does almost everything you want to do on a workstation really well.\n    In  our 3970X review, I used the word \u2018bloodbath\u2019, because any benchmark where the Core i9-10980XE wanted to do well, the 3970X came and won, sometimes by a large margin by having nearly double the cores. The only multi-threaded test that the 10980XE won was AVX512 related, and some people complained that I didn\u2019t point at the 35+ gaming tests where the 10980XE also won by small (sub-3%) margins, but those people clearly don\u2019t know what these processors are about. The 3970X is a fine processor for anyone who can lay down $2000 for the chip and another $100+ for cooling (then $500+ for memory, $500 for motherboard, etc).\n        For anyone wanting a more cost-effective high-end desktop system, then we can save some monies by looking at the mid-stack. This is where Intel is actually a bit more competitive: 18 cores in the i9-10980XE for an OEM price of $979 compared to the 24 core TR 3960X at $1399. Cost per core is obviously close, around $55/core for both, and both processors have plus points (although in our tests, the 24-core does pull ahead more often than not as is perhaps to be expected).\n    In previous guides this segment has always been varied due to availability. However while Intel still has issues, AMD\u2019s options seem plentiful this time around. Some of these processors are ending up in the hands of system builders or OEMs (especially in Intel\u2019s case), rather than going to retail.\n    One option here is to look at AMD\u2019s Ryzen 9 3950X, although in the high-end desktop space this isn\u2019t really suitable if you need lots of memory or lots of PCIe lanes. The Ryzen 9 3950X is also hard to find in certain regions.\n  There is an option of looking at older hardware. Finding a good deal on AMD\u2019s 16-core 2 nd generation Threadripper, the 2950X, is a good option, although given the performance of the 3rd generation hardware, I would perhaps avoid higher core counts unless it was really cheap. Intel is still selling the Skylake-X processors, and hopefully when this post goes live they will have half-price discounts applied, although that might not be a given.\n  If you really want the best mid-tier hardware, for AMD I\u2019d suggest a cheap 2950X or wait until a 3960X is available.\n      I have added an AVX processor suggestion here for the simple fact that if a user is likely to encounter AVX acceleration, it\u2019s going to be with software aimed at prosumers and high-end desktop users. Intel has been pushing its AVX512 support, even bringing it into its consumer laptop processors, in an effort to drive things like DLBoost to enhance AI throughput. One of the pain points I\u2019ve had with Intel over the last couple of years is actually getting a list of AVX512 use cases: exact software examples where AVX512 is used. It often gets added for very specific things, like a certain filter in Photoshop, or a special edition of a benchmark, but ultimately those in the HPC space get the most from it. For those users, this suggestion is for you.\n  Our Core i9-10980XE review sample. It&#39;s a QS (Qualification Sample) chip, \rwhich is meant to be as near as retail as possible.\n  The best high-end desktop off-the-shelf processor for AVX512 you can buy is the Core i9-10980XE, with 18-cores that all enable AVX512. If you need ECC, then the Xeon W-3275/3175X is going to be your best bet, but it will cost a bit more and a special Xeon W motherboard is needed. If cost is no object, then moving into a dual socket system with Xeon Scalable processors might be preferable, although take note that this introduces a non-uniform memory access (NUMA) environment, which would inhibit bulk data transfer if the software is not NUMA-aware. To be on the safe side usually single socket is preferred.\u00a0The downside to going Intel here is finding a CPU for sale.\n    AMD EPYC up to 2 TB per socket, \rIntel Xeon with Optane DCPMM up to 4.5 TB per socket, \ror Intel Core i9-10900X (or any Core i9-109xx series)\n  Some users are in it just for the memory support, either due to multiple VMs or high-memory use-case requirements. For these, sometimes the memory capacity is more important than the compute performance, as the software requires workspace in the terabytes \u2013 in this case doubling up to 128 GB of DRAM or more is always more beneficial than adding compute, as it reduces the pressure on moving data back and forth between DRAM and storage. Normally it is in this instance too that RDIMMs with ECC are recommended, just because as the memory capacity gets larger, the chance of an errant bit flip does scale with memory capacity. The price of the memory in this product category normally outweighs the CPU cost by an order of magnitude as well.\n    In this instance, one choice is an EPYC, something like the  7232P at $500 will easily support 2 TB of LRDIMMs (mind you, if you\u2019re buying *that* much memory, then going for the  64-core 7702P at $4784 isn\u2019t that much of a leap) out of the box.\n  The only way to get more memory than this with an x86 processor would be to look to Intel Xeon Scalable processors equipped with Optane DC Persistent Memory, allowing up to 4.5 TB per socket. In order to get that amount, you have to invest in one of the M processors, which adds another $3k to the cost of the chip. The other factor here is that Optane DCPMM isn\u2019t freely for sale through usual channels: it typically comes as part of an OEM system build, and as a result the user will end up with a support contact for a specific OEM. For bigger businesses and research communities, that should be suitable \u2013 check with your preferred OEM with what they have to offer.\n  I also want to put in a word here for Intel\u2019s latest Cascade Lake-X processors. Normally, with four channels / eight memory slots and 32 GB of DRAM per slot, this would max out at 256 GB. But interestingly enough, when paired with an ASRock X299 motherboard (either the X299X Taichi, the X299 Steel Legend, or the X299 Creator), these motherboards can now support 128 GB RDIMMs, allowing for 1 TB of DRAM per single socket.\n    At this time ASRock is looking into also enabling LRDIMM support. This is a relatively new development, posted by one of ASRock\u2019s engineers to his personal social media accounts, but the BIOSes required are now public, and for users invested in the Intel ecosystem this is well worth a look.\n      For anyone wanting the most cores for the least amount of $$$, then our pick has to go to the 16-core Threadripper 2950X or 1950X when these are on sale. With the launch of the new 3000 series Threadripper processors, the previous parts are often found at low prices with some retailers looking to empty their stock of them. We\u2019ve seen 2950X processors as low as \u00a3330/$400 even on Amazon (currently $500), and 1950X for $250.\n      Having four channel memory and 64 PCIe lanes for prosumer workflows is great \u2013 as we noted in our reviews these processors cover most, but not all, the high-end desktop bases, so it is worth researching what works best for the intended software. But compared to several years old hardware, this is very much a worthy upgrade for a lot of people. The 2950X also performs better on a number of workloads compared to the 2970WX/2990WX, and can be found for a lot cheaper, making it a worthwhile purchase.\n      If you want a HEDT system on a budget, the question to ask is if it has to be new or used. In a lot of professional circumstances, new is still preferred, and the processor to get on the ladder here is AMD\u2019s Threadripper 1900X. The 8-core processor offers high capacity memory support, lots of PCIe lanes, and the low-end motherboards for Threadripper are now entering that low-to-mid range pricing. In a sale, the 1900X can be found for under $200 (users with more money might look for a cheap 1950X instead), which seems like a crazy low price for a high-end desktop processor.\n      We\u2019re at a time where the high-end desktop market is relatively stable. Both AMD and Intel have recently had big launches of the latest generation hardware, and we\u2019re at least 2-3 quarters away from even speaking about the next generation parts, if not longer, and another 2 quarters away from launch. Any system purchased today will be set to last for a long time, and as a result, there isn\u2019t much to look forward to for most of 2020.\n  For Intel, the situation is not clear in the slightest. We don\u2019t know what Intel plans to launch in this space, or when. The company recently  reduced the scope of its Cooper Lake Xeon platform to select customers only, which also puts a stop to any HEDT product. This means that the next generation Xeon coming to market should be Ice Lake on the company\u2019s 10nm process. With an expected launch date of late 2020 for this, there are lots of concerned thoughts as to how many will actually be available \u2013 will Ice Lake Xeon be in general availability, what will the performance be like, and then for the HEDT market, when will it filter down? These are all questions I wonder if Intel can even hint at right now \u2013 for that manufacturing process, the key would be trying to manufacture the most cost effective parts that it can, and HEDT doesn\u2019t hold a candle to the premium Xeon components. At this point in time, Intel\u2019s HEDT future in 2020 looks dire, and we have no idea about 2021 or 10nm.\n    The highlight on this perspective is AMD\u2019s Threadripper 3990X. The company launched a 64 core version of its Zen 2 high-end desktop family, which is one of the 64-core EPYC processors but with half the memory, half the PCIe, and a higher 280W TDP to drive the frequency higher.\u00a0We&#39;re expecting Zen 3 products to start coming by the end of 2020, and although AMD has committed to both EPYC and Ryzen parts being available by the end of the year, we expect the HEDT market to be at the back end of that product rush, so we&#39;re looking into the middle of 2021 for a Threadripper refresh.\n  It seems then that any HEDT system purchased today isn&#39;t going to be obsolete for a long while yet.\n              Moving into 2020, we&#39;re looking to update our benchmark suite for the next 12-18 months. Recently we&#39;ve added an AI benchmark, more latency tests, instruction set testing, NAMD (limited to 64 threads right now), a heavy single threaded-limited simulation test, and Crysis rendered on the CPU. We&#39;re on the lookout for more workstation-focused tests, preferably with licence-free software for Windows that can be automated. If you have any ideas, please let us know. Or, if any ISV / software vendor is reading this, think the software is a good fit, and can arrange press licenses, please do get in touch.\n  POST A COMMENT      No Single-core category? Sadly most workstations are used in synchronous workloads that do not balance loads across cores.  Reply\n  Most? You don\u2019t appear to understand what that means. Single core only workloads are niche, and any system (Intel or AMD) provides decent enough single core performance.  Reply\n  Don&#39;t know about &#39;most&#39;, but AutoCAD is mostly a single-core application, and it&#39;s widely used workstation software. It is CPU bound in many cases, thus single-core performance is critical.  Reply\n  Autodesk has a number of products that are single-threaded or don&#39;t make good use of multithreading. There are also a number of scientific workloads that have no threading built-in. This includes many R (or old S) packages. In addition, there are plenty of scientific frameworks that need fast single core performance.  For many people, this does include &#34;most&#34; workloads. This certainly isn&#39;t universal, but not everyone has the luxury of modern codebases, agressive software optimization or parallelizable code paths.  Reply\n  There are many single-threaded or badly multi-threaded workloads arou\n......", "posttime": "2020-05-05 18:43:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,anandtech,cpus,\u5904\u7406\u5668,intel", "title": "AnandTech\uff1a\u5de5\u4f5c\u7ad9\u7684\u6700\u4f73CPU\uff0c2020\u5e745\u6708", "title_en": "AnandTech: Best CPUs for Workstations, May 2020", "transed": 1, "url": "https://www.anandtech.com/show/11891/best-cpus-for-workstations", "via": "", "real_tags": ["2020", "anandtech", "cpus", "\u5904\u7406\u5668", "intel"]}, {"category": "", "categoryclass": "", "imagename": "27037f3d6116bb61e74f4c78d02e50b4.png", "infoid": 1000724, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Amazon RDS for PostgreSQL\u73b0\u5728\u652f\u6301\u4e3b\u8981\u7248\u672c12\u3002PostgreSQL 12\u5305\u62ec\u66f4\u597d\u7684\u7d22\u5f15\u7ba1\u7406\u3001\u6539\u8fdb\u7684\u5206\u533a\u529f\u80fd\u3001\u7b26\u5408SQL/JSON\u89c4\u8303\u7684JSON\u8def\u5f84\u67e5\u8be2\u3001\u652f\u6301ICU\u63d0\u4f9b\u7684\u6392\u5e8f\u7684\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u548c\u4e0d\u533a\u5206\u91cd\u97f3\u7684\u4e0d\u786e\u5b9a\u6392\u5e8f\u3001\u6539\u8fdb\u67e5\u8be2\u8ba1\u5212\u7684\u6700\u5e38\u89c1\u503c\u7edf\u8ba1\u4fe1\u606f\u3001\u521b\u5efa\u4f7f\u7528\u8868\u8fbe\u5f0f\u8ba1\u7b97\u503c\u7684\u751f\u6210\u5217\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002\n\u6b64\u7248\u672c\u5c06\u6269\u5c55\u5305\u62ecPostGIS\u66f4\u65b0\u52303.0\u7248\uff0cPGAudit\u66f4\u65b0\u52301.4\u7248\uff0cwal2json\u66f4\u65b0\u52302.1\u7248\uff0cPLV8\u66f4\u65b0\u52302.3.14\u7248\uff0cOrafce\u66f4\u65b0\u52303.8\u7248\uff0cpg_repack\u66f4\u65b0\u52301.4.5\u7248\uff0cpg_hint_plan\u66f4\u65b0\u52301.3.5.22a77c\u7248\uff0cpglogic\u66f4\u65b0\u52302.3.0\u7248\u3002\n\u8981\u4f7f\u7528\u65b0\u7248\u672c\uff0c\u60a8\u53ea\u9700\u5728AWS\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\u5355\u51fb\u51e0\u4e0b\u5373\u53ef\u521b\u5efa\u65b0\u7684Amazon RDS for PostgreSQL\u6570\u636e\u5e93\u5b9e\u4f8b\u3002\nAmazon RDS for PostgreSQL\u4f7f\u60a8\u53ef\u4ee5\u5728\u4e91\u4e2d\u8f7b\u677e\u8bbe\u7f6e\u3001\u64cd\u4f5c\u548c\u6269\u5c55PostgreSQL\u90e8\u7f72\u3002\u6709\u5173\u5b9a\u4ef7\u8be6\u7ec6\u4fe1\u606f\u548c\u533a\u57df\u53ef\u7528\u6027\uff0c\u8bf7\u53c2\u9605Amazon RDS for PostgreSQL\u5b9a\u4ef7\u3002\u6709\u5173PostgreSQL 12\u65b0\u529f\u80fd\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeAWS\u6570\u636e\u5e93\u535a\u5ba2\u3002", "note_en": "Amazon RDS for PostgreSQL now supports major version 12.  PostgreSQL 12 includes better management of indexing, improved partitioning capabilities, JSON path queries per SQL/JSON specifications, nondeterministic collations that support case-insensitive and accent-insensitive comparisons for ICU provided collations, most common-value statistics for improved query plans, creation of generated columns that computes values with an expression, and many additional features.\n  This release updates extensions including  PostGIS to version 3.0,  PGAudit to version 1.4,  wal2json to version 2.1,  PLV8 to version 2.3.14,  Orafce to version 3.8,  pg_repack to version 1.4.5,  pg_hint_plan to version 1.3.5.22a77c, and  pglogical to version 2.3.0.\n  To use the new version, you can create a new  Amazon RDS for PostgreSQL database instance with just a few clicks in the  AWS Management Console.\n  Amazon RDS for PostgreSQL makes it easy to set up, operate, and scale PostgreSQL deployments in the cloud. See  Amazon RDS for PostgreSQL Pricing for pricing details and regional availability.\u00a0Learn more about the new functionality of PostgreSQL 12 in the  AWS Database Blog.", "posttime": "2020-05-05 18:42:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,postgresql,rds,version", "title": "Amazon RDS\u73b0\u5728\u652f\u6301PostgreSQL 12", "title_en": "Amazon RDS Now Supports PostgreSQL 12", "transed": 1, "url": "https://aws.amazon.com/about-aws/whats-new/2020/03/amazon-rds-now-supports-postgresql-12/", "via": "", "real_tags": ["amazon", "rds", "version"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000722, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eceJSON\u3001\u6a21\u5f0f\u548cGraphQL\u751f\u6210\u6a21\u578b\u548c\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5feb\u901f\u3001\u5b89\u5168\u5730\u5904\u7406\u6570\u636e\u3002\n\u7acb\u5373\u751f\u6210\u4ee3\u7801\u3002\n{\uff1a[{\uff1a&#34\uff1bAtticus&#34\uff1b\uff0c\uff1a100}\uff0c{\uff1a&#34\uff1bCleo&#34\uff1b\uff0c\uff1a900}\uff0c{\uff1a&#34\uff1bOrly&#34\uff1b}\uff0c{\uff1a&#34\uff1bJasper&#34\uff1b}]}\u3002\n\u7c7bmyData{\uff1aPerson[]\uff1bStatic(\uff1aString){\u2026\u3002}}\u7c7b\u4eba\u5458{\uff1astring\uff1b\uff1aint\uff1f\uff1b}\u3002\n\u8bbeDATA=MyData\u3002(&#39\uff1b{&#34\uff1bPeople&#34\uff1b\uff1a[{&#34\uff1bname&#34\uff1b\uff1a&#34\uff1bOlivia&#34\uff1b}]}&#39\uff1b)\u3002{\u6253\u5370(\u4eba\u5458\u3002)\u3002\u4e00\u4e2a\u4eba\u3002++}\u9ad8\u5206\u53ef\u80fd\u672a\u5b9a\u4e49\u3002\n\u4ecenpm\u5b89\u88c5\u5feb\u901f\u7c7b\u578b\u751f\u6210\u7b80\u5355JSON\u793a\u4f8b$ECHO&#39\uff1b[1\uff0c2\uff0c3.14]&#39\uff1b|\u5feb\u901f\u7c7b\u578b--lang Go\u4e3a\u6bd4\u7279\u5e01API\u751f\u6210C#$QuickType https://blockchain.info/latestblock-o LatestBlock.cs\u4e3a\u5929\u6c14API\u751f\u6210\u6253\u5b57\u811a\u672c\u548c\u8fd0\u884c\u65f6\u68c0\u67e5$QuickType https://goo.gl/Dq2yKd-o Weather.ts--\u8fd0\u884c\u65f6-\u7c7b\u578b\u68c0\u67e5\u4ece\u6253\u5b57\u811a\u672c\u7c7b\u578b\u751f\u6210C#\u7c7b\u4ece\u793a\u4f8b\u76ee\u5f55\u751f\u6210SWIFT alum.json artist.cs\u3002\n\u4e00\u4e2a\u597d\u7684\u662f\u91d1\u8272\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u90fd\u662f\u8fc7\u65f6\u7684\uff0c\u6216\u8005\u6839\u672c\u5c31\u4e0d\u80fd\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f7f\u7528\u3002\n\u8fd9\u9700\u8981\u5f88\u5927\u7684\u52aa\u529b\uff0c\u5e76\u4e14\u5fc5\u987b\u5728API\u66f4\u6539\u65f6\u8fdb\u884c\u66f4\u65b0\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u4f60\u5e94\u8be5\u4e13\u6ce8\u4e8e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u8fd9\u662f\u4e00\u79cd\u4ee4\u4eba\u4e0d\u5feb\u7684\u7f16\u7a0b\u65b9\u5f0f\uff0c\u5e76\u4e14\u4f7f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u53d7\u5230API\u66f4\u6539\u7684\u5f71\u54cd\u3002\n\u7ed9\u5b9a\u793a\u4f8bAPI\u54cd\u5e94\u540e\uff0cQuickType\u5c06\u4ee5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8bed\u8a00\u751f\u6210\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\u5e93\u3002\n\u5f53API\u66f4\u6539\u65f6\uff0cQuickType\u53ef\u4ee5\u91cd\u65b0\u751f\u6210\u7c7b\u578b\uff0c\u56e0\u6b64\u60a8\u53ea\u9700\u66f4\u65b0\u53d7\u5f71\u54cd\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801(\u5982\u679c\u6709\u7684\u8bdd)\u5373\u53ef\u3002\n\u5728\u5904\u7406\u7c7b\u578b\u5316API\u6570\u636e\u65f6\uff0c\u5145\u5206\u5229\u7528\u7f16\u8f91\u5668\u6216IDE(\u81ea\u52a8\u5b8c\u6210\u3001\u91cd\u6784)\u3002", "note_en": "Generate models and serializers from JSON, schema, and GraphQL for working with data quickly &amp; safely in any programming language.\n Generate Code Now\n {  : [ {  :  &#34;Atticus&#34;,  :  100 }, {  :  &#34;Cleo&#34;,  :  900 }, {  :  &#34;Orly&#34; }, {  :  &#34;Jasper&#34; } ]}\n class  MyData {  :  Person[];  static  ( :  string) {\u2026}} class  Person {  :  string;  :  int?;}\n let  data =  MyData. ( &#39;{ &#34;people&#34;: [ { &#34;name&#34;: &#34;Olivia&#34; } ]}&#39;) for  person  in  data.  {  print( person. )  person. ++} highScore may be undefined\n Install quicktype from npm  Generate Go for a simple JSON sample $ echo &#39;[1, 2, 3.14]&#39; | quicktype --lang go  Generate C# for a Bitcoin API $ quicktype https://blockchain.info/latestblock -o LatestBlock.cs  Generate TypeScript and runtime checks for a weather API $ quicktype https://goo.gl/Dq2yKd -o Weather.ts --runtime-typecheck  Generate C# classes from TypeScript types  Generate Swift from a directory of samples  album.json artist.json track.json $ quicktype spotify-api-samples -o SpotifyClient.swift\n A good one is golden, however most are outdated or simply unavailable in your app\u2019s programming language.\n  Takes a lot of effort and must be updated when the API changes. You should be focused on your app, anyway.\n  This is an unpleasant way to program and leaves your app vulnerable to API changes.\n Given sample API responses, quicktype will generate an easy-to-use client library in your app\u2019s language.\n  quicktype can regenerate types when APIs change, so you can simply update affected app code, if any.\n  Get more out of your editor or IDE (autocomplete, refactoring) when working with typed API data.", "posttime": "2020-05-05 18:40:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,json,convert,\u751f\u6210,generate", "title": "QuickType-\u5c06JSON\u8f6c\u6362\u6210\u4efb\u4f55\u8bed\u8a00\u7684\u534e\u4e3d\u3001\u7c7b\u578b\u5b89\u5168\u7684\u4ee3\u7801", "title_en": "Quicktype - convert JSON into gorgeous, typesafe code in any language", "transed": 1, "url": "https://quicktype.io", "via": "", "real_tags": ["\u4ee3\u7801", "json", "convert", "\u751f\u6210", "generate"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000721, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up", "posttime": "2020-05-05 18:40:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,algorithms,\u5f3a\u5316,reinforcement,\u5ba1\u67e5", "title": "\u7f51\u683c\u4e16\u754c\u4e2d\u7684\u8868\u683c\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5", "title_en": "Tabular Reinforcement Learning Algorithms in Gridworld", "transed": 1, "url": "https://github.com/laxatives/rl/blob/master/gridworld_mdp.ipynb", "via": "", "real_tags": ["\u7b97\u6cd5", "\u5f3a\u5316", "\u5ba1\u67e5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000720, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u672c\u7b14\u8bb0\u672c\u4e2d\uff0c\u6211\u4eec\u53cd\u590d\u6c42\u89e3\u4e00\u4e2a\u7b80\u5355\u7684\u73af\u5883\uff0c\u63a2\u7d22\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u7684\u7279\u70b9\uff1a{\u7ebf\u6027\u89c4\u5212(LP)\u3001\u52a8\u6001\u89c4\u5212(DP)\u3001\u8499\u7279\u5361\u7f57(MC)\u548c\u65f6\u5dee\u5b66\u4e60(TD)}\u3002\u5bf9\u4e8eMC\u548cTD\uff0c\u6211\u4eec\u8fd8\u5728\u9884\u6d4b\u3001\u6309\u7b56\u7565\u63a7\u5236\u548c\u975e\u7b56\u7565\u63a7\u5236\u65b9\u9762\u63a2\u7d22\u4e86\u66f4\u591a\u7684\u95ee\u9898\u7a7a\u95f4\u3002\nfrom__Future__import print_function from IPython.display\u5bfc\u5165Display\uff0cclear_output from datetime import datetime\uff0ctimeDelta from itertools\u4ecePANDA\u5bfc\u5165\u4ea7\u54c1\u3002ploting import register_matplotlib_Converters\u5bfc\u5165ipywidget\u4e0enp\u4e00\u6837\u5bfc\u5165umpy\u4f5c\u4e3anP\u5bfc\u5165matplotlib.pylot\u4f5c\u4e3aPLT\u5bfc\u5165\u718a\u732b\u4f5c\u4e3aPD\u5bfc\u5165\u968f\u673a\u5bfc\u5165TensorFlow\u4f5c\u4e3aTF PD\u3002\u9009\u9879\u3002\u663e\u793a\u3002MAX_COLUMNS=NONE REGISTER_matplotlib_Converters()%matplotlib\u5185\u8054\u3002\n%pip install ortools from ortools.line_solver import pyspraplp#\u9996\u6b21\u5b89\u88c5\u540e\u9700\u8981\u91cd\u65b0\u542f\u52a8\u7b14\u8bb0\u672c\u7535\u8111_=pyspraplp\u3002\u6c42\u89e3\u5668(&#39\uff1bLinearProgrammingGridWorld&#39\uff1b\uff0cpyraplp)\u3002\u6c42\u89e3\u5668\u3002GLOP_LINEAR_PROGRAM)\u3002\n\u5728\u7d22\u5f15\u4e2d\u67e5\u627e\uff1ahttps://pypi.org/simple\uff0chttps://pypi.lyft.net/pypi/Requirement\u5df2\u7ecf\u6ee1\u8db3\uff1a/CODE/venvs/venv/lib/python3.6/site-Packages(7.6.7691)\u4e2d\u7684ortools\u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff1a/code/venvs/venv/lib/python3.6/site-Packages(From Ortools)(3.11.3)\u4e2d\u7684\u534f\u8baebuf&gt\uff1b=3.11.2in/code/venvs/venv/lib/python3.6/site-Packages(From Ortools)(3.11.3)\u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff1a6&gt\uff1b=1.10 in/code/venvs/venv/lib/python3.6/site-Packages(From Ortools)(1.12.0)\u5df2\u6ee1\u8db3\u8981\u6c42\uff1a/code/venvs/venv/lib/python3.6/site-Packages(from protocol buf&gt\uff1b=3.11.2-&gt\uff1bor tools)(45.2.0)\u6ce8\u610f\uff1a\u60a8\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u542f\u52a8\u5185\u6838\u624d\u80fd\u4f7f\u7528\u66f4\u65b0\u7684\u8f6f\u4ef6\u5305\u3002\n#\u6700\u4f18\u7b56\u7565\uff0cGamma=0.9 Expect_Values=Np\u3002array([[22.0\uff0c24.4\uff0c22.0\uff0c19.4\uff0c17.5]\uff0c[19.8\uff0c22.0\uff0c19.8\uff0c17.8\uff0c16.0]\uff0c[17.8\uff0c19.8\uff0c17.8\uff0c16.0\uff0c14.4]\uff0c[16.0\uff0c17.8\uff0c16.0\uff0c14.4\uff0c13.0]\uff0c[14.4\uff0c16.0\uff0c14.4\uff0c13.0\uff0c11.7])\u3002\n\u4ece\u679a\u4e3e\u5bfc\u5165\u679a\u4e3e\u7c7b\u64cd\u4f5c(\u679a\u4e3e)\uff1a\u5317=&#39\uff1bN&#39\uff1b\uff0c0\uff0c\u03bbx\uff1a(X[0]-1\uff0cx[1])\uff0c(0\uff0c1)\u4e1c=&#39\uff1bE&#39\uff1b1\uff0c\u03bbx\uff1a(x[0]\uff0cx[1]+1)\uff0c(1\uff0c0)\u897f=&#39\uff1bW&#39\uff1b\uff0c2\uff0c\u03bbx\uff1a(X[0]\uff0cx[1]-1)\uff0c(-1\uff0c0)South=&#39\uff1bS&#39\uff1b\uff0c3\uff0c\u03bbx\uff1a(x[0]+1\uff0cx[1])\uff0c(0\uff0c-1)def__init__(self\uff0cdisplay_name\uff0cindex\uff0cTransition\uff0cDirection)\uff1aself\u3002DISPLAY_NAME=\u663e\u793a\u540d\u79f0\u81ea\u8eab\u3002INDEX=\u7d22\u5f15\u81ea\u8eab\u3002TRANSPION=TRANSPION#Numpy\u884c-\u4e3b\u5750\u6807SELF\u3002\u65b9\u5411=\u65b9\u5411#matplotlib\u5750\u6807def__str__(Self)\uff1a\u8fd4\u56de\u81ea\u8eab\u3002\u663e\u793a\u540d\u79f0\u3002\n\u7c7bAgent(Object)\uff1adef__init__(self\uff0cname)\uff1aself\u3002name=name def policy(self\uff0cstate)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u8fd4\u56de\u7ed9\u5b9a\u72b6\u6001\u7684\u64cd\u4f5c&#34\uff1b&#34\uff1b&#34\uff1b\u5f15\u53d1NotImplementedError()\u3002\nGreedyAgent\u7c7b(\u4ee3\u7406)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u8fd9\u4e2a\u4ee3\u7406\u62e5\u6709\u5173\u4e8e\u73af\u5883\u8f6c\u6362\u6982\u7387\u548c\u5956\u52b1\u7684\u5b8c\u6574\u4fe1\u606f\u3002\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u4e8e\u73af\u5883\u672a\u77e5\u7684\u590d\u6742\u95ee\u9898\u662f\u4e0d\u53ef\u884c\u7684\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(SELF\uff0cSTATE_VALUES=NONE\uff0cNAME=&#39\uff1bOPTIME&#39\uff1b\uff0cGAMMA=0.9)\uff1aSUPER()\u3002__init__(Name)\u5982\u679cSTATE_VALUES\u4e3aNONE\uff1aSTATE_VALUES=NP\u3002\u968f\u673a\u7684\u3002Randn(5\uff0c5)Self\u3002STATE_VALUES=STATE_VALUES#v(S)\u81ea\u8eab\u3002Gamma=Gamma Self\u3002Environment=GridWorld()def policy(self\uff0cstate)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u4f7f\u7528\u786e\u5207\u7684\u8fc7\u6e21/\u5956\u52b1\u7ed3\u679c\u8fdb\u884c\u7b56\u7565\u8fed\u4ee3\u3002&#34\uff1b&#34\uff1b&#34\uff1baction=one max_action_value=-1000\u8868\u793a\u6b63\u5728\u6267\u884c\u64cd\u4f5c\uff1a\u81ea\u6211\u3002\u73af\u5883\u3002set_state(State)s1\uff0cr=self\u3002\u73af\u5883\u3002\u8f6c\u6362(A)action_value=r+self\u3002\u4f3d\u9a6c*\u81ea\u6211\u3002STATE_VALUES[S1]if action_value&gt\uff1bmax_action_value\uff1aaction=a max_action_value=action_value\u8fd4\u56de\u64cd\u4f5c\n\u7c7bEpsilonGreedyAgent(GreedyAgent)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u5e26\u6709epsilon\u8d2a\u5a6a\u63a2\u7d22\u7684GreedyAgent\u3002\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u4e8e\u73af\u5883\u672a\u77e5\u7684\u590d\u6742\u95ee\u9898\u662f\u4e0d\u53ef\u884c\u7684\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(self\uff0cepsilon=1e-2\uff0c**kwargs)\uff1aSuper()\u3002__init__(**kwargs)\u81ea\u6211\u3002epsilon=epsilon\u5b9a\u4e49\u7b56\u7565(\u81ea\u8eab\uff0c\u72b6\u6001)\uff1a\u5982\u679c\u662f\u968f\u673a\u7684\u3002\u968f\u673a()&lt\uff1b\u81ea\u8eab\u3002\u57c3\u666e\u897f\u9686\uff1a\u968f\u673a\u8fd4\u56de\u3002CHOICE([a for a in Action])\u8fd4\u56deSUPER()\u3002\u7b56\u7565(\u5dde)\u3002\n\u7c7bLearnedAgent(Agent)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u4ece\u968f\u673a\u7b56\u7565\u5f00\u59cb\u5b66\u4e60\u6700\u4f18\u7b56\u7565\uff0c\u5e76\u4e14\u6ca1\u6709\u5148\u9a8c\u8bb0\u5f55\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(self\uff0cname=&#39\uff1bLearning&#39\uff1b\uff0cGamma=0.9\uff0cdim=5\uff0cepsilon=0)\uff1aSuper()\u3002__init__(\u540d\u79f0)\u81ea\u8eab\u3002ACTION_VALUES=NP\u3002\u968f\u673a\u7684\u3002Randn(5\uff0c5\uff0c4)#q(s\uff0ca)self\u3002_POLICY={s\uff1a\u968f\u673a\u3002\u4ea7\u54c1(Range(DIM)\uff0cRange(DIM))}Self\u7684\u9009\u62e9([a for a in Action])\u3002Gamma=Gamma Self\u3002epsilon=epsilon\u5b9a\u4e49\u7b56\u7565(\u81ea\u8eab\uff0c\u72b6\u6001)\uff1a\u5982\u679c\u662f\u968f\u673a\u7684\u3002\u968f\u673a()&lt\uff1b\u81ea\u8eab\u3002\u57c3\u666e\u897f\u9686\uff1a\u968f\u673a\u8fd4\u56de\u3002Choose([a for a in Action])\u8fd4\u56deSelf\u3002_policy[state]def update_state_policy(self\uff0cs)\uff1aold_action=self\u3002_POLICY[s]STRATE=True max_action_value=-1000 for a in Action\uff1aaction_value=self\u3002ACTION_VALUES[(s[0]\uff0cs[1]\uff0ca.\u3002index)]if action_value&gt\uff1bmax_action_value\uff1aaction=a max_action_value=action_value if action\uff01=old_action\uff1apolicy_Stability=false self\u3002_POLICY[s]=action return\u7a33\u5b9a\u5b9a\u4e49POLICY_IMPORT(SELF)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u6839\u636e\u6211\u4eec\u6700\u65b0\u7684ACTION_VALUES&#34\uff1b&#34\uff1b&#34\uff1bPOLICY_STRATE=Self\u4e2ds\u7684True\u66f4\u65b0\u6211\u4eec\u7684\u7b56\u7565\u3002_\u7b56\u7565\u3002KEYS()\uff1aSTRATE=SELF\u3002UPDATE_STATE_POLICY\u5982\u679c\u4e0d\u7a33\u5b9a\uff1aPOLICY_STRATE=FALSE RETURN POLICY\u3002\n\u7c7bGridWorld(Object)\uff1adef__init__(self\uff0cinitial_state=(0\uff0c0))\uff1aself\u3002DIM=5\u81ea\u8eab\u3002STATE=\u521d\u59cb\u72b6\u6001\u5b9a\u4e49SET_STATE(SELF\uff0cSTATE)\uff1aSELF\u3002STATE=STATE DEF_TRANSION_STATE(SELF\uff0cACTION)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bx\uff0cy=ACTION\u3002\u8fc7\u6e21(\u81ea\u6211\u3002\u72b6\u6001)\u5982\u679cx&lt\uff1b0\u6216x&gt\uff1b=SELF\u3002\u6234\u59c6\uff1a\u56de\u5f52\u81ea\u6211\u3002\u72b6\u6001\u4e3ay&lt\uff1b0\u6216y&gt\uff1b=self\u3002\u6234\u59c6\uff1a\u56de\u5f52\u81ea\u6211\u3002\u72b6\u6001\u8fd4\u56dex\uff0cy\u5b9a\u4e49\u8f6c\u6362(Self\uff0caction)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u5982\u679cSelf\uff0c\u5219&#34\uff1b&#34\uff1b&#34\uff1breward=0\u3002STATE==(0\uff0c1)\uff1a#\u7279\u6b8a\u72b6\u6001A NEW_STATE=(4\uff0c1)REWARY=10 ELIF SELF\u3002STATE==(0\uff0c3)\uff1a#\u7279\u6b8a\u72b6\u6001B NEW_STATE=(2\uff0c3)REWARY=5 ELSE\uff1aNEW_STATE=SELF\u3002_TRANSPATION_STATE(Action)#\u5982\u679cNEW_STATE==SELF\uff0c\u5219\u79fb\u52a8\u65e0\u6548\u3002\u72b6\u6001\uff1a\u5956\u52b1=-1\u81ea\u6211\u3002STATE=NEW_STATE\u8fd4\u56deNEW_STATE\uff0c\u5956\u52b1\u3002\n\u7ed9\u5b9a\u6559\u79d1\u4e66\u4e0a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u7684\u4ee3\u7406\u901a\u5e38\u76f4\u63a5\u79fb\u52a8\u5230\u4f4d\u7f6e(1\uff0c4)\u6765\u9886\u53d610\u5206\u5956\u52b1\u3002\n\u5b9a\u4e49DISPLAY_STATE_VALUES(STATE_VALUES\uff0c\u6807\u9898=\u65e0)\uff1aFIG\uff0cAX=PLT\u3002\u5b50\u56fe(\u56fe\u5927\u5c0f=(4.8\uff0c4.8))\uff0c\u5982\u679c\u6807\u9898\uff1aAX\u3002set_title(Title)#\u5c06\u884c\u8f83\u957f\u7684umpy\u5750\u6807\u8f6c\u6362\u4e3amatplotlib\u5750\u6807Transform_Values=np\u3002rot90(STATE_VALUES\u3002t)im=ax\u3002imshow(Transform_Values\uff0cCmap=&#39\uff1bhot&39\uff1b)\u56fe\u3002\u4ea7\u54c1(\u8303\u56f4(5)\uff0c\u8303\u56f4(5))\u4e2ds\u7684ColorBar(im\uff0cax=ax)agent=GreedyAgent(State_Value)\uff1aaction=agent\u3002\u7b56\u7565dx\uff0cdy=\u64cd\u4f5c\u3002\u65b9\u5411#\u5c06\u884c\u6570\u8f83\u591a\u7684\u591a\u4e2a\u5750\u6807\u53d8\u6362\u4e3amatplotlib\u5750\u6807x\uff0cy=s[1]\uff0c4-s[0]ax\u3002\u7bad\u5934(x-0.25*dx\uff0cy-0.25*dy\uff0c0.5*dx\uff0c0.5*dy\uff0chead_width=0.05)\u8f74\u3002set_xlim(-0.5\uff0c4.5)ax\u3002set_ylim(-0.5\uff0c4.5)PLT\u3002show()def display_state(state\uff0cfig=NONE\uff0cAX=NONE)\uff1a\u5982\u679cAX==NONE\uff1aFIG\uff0cAX=PLT\u3002\u5b50\u56fe(\u56fe\u5927\u5c0f=(6.4*2\uff0c4.8))GRID=NP\u3002\u96f6((5\uff0c5))\u6805\u683c[STATE[0]\uff0cSTATE[1]]=1 AX\u3002imshow(grid\uff0ccmap=#39\uff1bviridis\uff1b)display(\u56fe)Clear_Output(Wait=True)PLT\u3002show()\u3002\n\u7cbe\u786e\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5bf9\u516c\u5f0f\u3001\u8d85\u53c2\u6570\u6781\u5176\u654f\u611f\uff0c\u5e76\u4e14\u4e0d\u80fd\u6269\u5c55\u5230\u9664\u4e86\u6700\u7b80\u5355\u7684\u95ee\u9898\u4e4b\u5916\u7684\u4efb\u4f55\u95ee\u9898\uff0c\u800c\u4e0d\u4f1a\u8fdb\u884c\u5267\u70c8\u7684\u7b80\u5316/\u5047\u8bbe\u3002\ndef SOLVE_OPTIMIZATION(Gamma=0.9\uff0cDim=5)\uff1a\u89e3\u7b97\u5668=pyspraplp\u3002\u6c42\u89e3\u5668(&#39\uff1bLinearProgrammingGridWorld&#39\uff1b\uff0cpyraplp)\u3002\u6c42\u89e3\u5668\u3002GLOP_LINEAR_PROGRAM)STATE_VALUES={s\uff1a\u6c42\u89e3\u5668\u3002NumVar(-\u6c42\u89e3\u5668\u3002\u65e0\u7a77()\uff0c\u6c42\u89e3\u5668\u3002\u4ea7\u54c1(range(Dim)\uff0crange(Dim))}Objective=\u6c42\u89e3\u5668\u4e2ds\u7684infinity()\uff0cf&#39\uff1bstate_{s[0]}_{s[1]}&#39\uff1b)\u3002\u76ee\u7684()\u76ee\u7684\u3002SetMinimization()Environment=GridWorld()#\u76ee\u6807\uff1a\u6700\u5c0f\u5316STATE_VALUES\u4e2ds0\uff0cv_s0\u7684\u6240\u6709s\u7684sum(v(S))\u3002\u9879\u76ee()\uff1a\u5ba2\u89c2\u3002\u8bbe\u7f6e\u7cfb\u6570(v_s0\uff0c1)#\u6700\u4f18\uff1av(S)=max_a{r+\u03b3*v(s&\n\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u548c\u56f4\u7ed5v(S)-v*(S)\u4e4b\u95f4\u7684\u8bef\u5dee\u5b9a\u4e49\u7684\u635f\u5931(\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8eGautam Kedia\u6e05\u7406\u4e86\u635f\u5931\u51fd\u6570)\u3002\nTF\u3002\u914d\u7f6e\u3002\u5b9e\u9a8c\u6027Run_Functions_Eagerly(True)@Tf\u3002\u51fd\u6570def get_Problem(Gamma\uff0cConstraint_Payment\uff0cSTATE_VALUES=NONE\uff0cDIM=5)\uff1a#TODO\uff1a\u5982\u679cSTATE_VALUES==NONE\uff1aSTATE_VALUES={s\uff1atf\uff0c\u5219\u8bbe\u7f6e\u66f4\u597d\u7684\u521d\u59cb\u503c\u3002\u53d8\u91cf(np.\u3002\u968f\u673a\u7684\u3002Rand()\uff0cname=f&#39\uff1bstate_{s[0]}_{s[1]}&#39\uff1b\uff0cdtype=tf\u3002Float32)for s in product(range(Dim)\uff0crange(Dim))}Errors=[]Environment=GridWorld()for s0\uff0cv_s0 in state_value\u3002Items()\uff1aACTION_VALUES=[]for a in Action\uff1a#\u786e\u5b9a\u6027\u5730\u5c06(s\uff0ca)\u5e94\u7528\u4e8eGridWorld\u4ee5\u83b7\u53d6(s&#39\uff1b\uff0cr)\u73af\u5883\u3002set_state(S0)s1\uff0cr=\u73af\u5883\u3002\u8f6c\u6362(A)v_s1=STATE_VALUES[S1]ACTION_VALUE=r+\u03b3*v_S1 ACTION_VALUES\u3002\u8ffd\u52a0(action_value-v_s0)\u9519\u8bef\u3002\u8ffd\u52a0(Tf.\u3002Reduce_max(Action_Values)\u76ee\u6807=Tf\u3002REDUTE_SUM(TF.\u3002Square(\u9519\u8bef)\uff0cname=&#39\uff1bObjective&#39\uff1b)\u8fd4\u56de\u76ee\u6807\uff0cSTATE_VALUES\u5b9a\u4e49PLOT_LP_STATE_VALUES(STATE_VALUES_DICT\uff0cTITLE=NONE)\uff1aLP_VALUES=NP\u3002\u5bf9\u4e8e(x\uff0cy)\uff0cSTATE_VALUES_DICT\u4e2d\u7684\u53d8\u91cf\u4e3a\u96f6((5\uff0c5))\u3002Items()\uff1alp_values[x\uff0cy]=var\u3002Numpy()DISPLAY_STATE_VALUES(LP_VALUES\uff0cTITLE=TITLE)\u8fd4\u56deLP_VALUES def solve_gradients_tf(\u4f3d\u9a6c=0.9\uff0c\u7ea6\u675f_\u7f5a\u91d1=10\uff0c\u8fed\u4ee3=50000\uff0c\u505c\u6b62_\u589e\u91cf=1e-4\uff0c\u5bf9\u6570\u9891\u7387=NONE)\uff1a\u5982\u679cLOG_FREQUENCE\u4e3aNONE\uff1aLOG_FREQUENCE=\u8fed\u4ee3+1\u4f18\u5316\u5668=TF\u3002\u773c\u955c\u86c7\u3002\u4f18\u5316\u5668\u3002ADAM()PRIV_LOSS_VALUE=1e9 LOSS_HISTORY=[]Objective\uff0cSTATE_VALUES=Get_Problem(Gamma=Gamma\uff0cConstraint_Payment=Constraint_Payment)\uff0c\u8303\u56f4(1\uff0c\u8fed\u4ee3)\uff1a\u4f7f\u7528TF\u3002GradientTape()AS TAPE\uff1aOBJECT\uff0cSTATE_VALUES=GET_PROBUCT(GAMA=GAMA\uff0cCONSTRAINT_PINDITY=CONSTRAINT_PINDY\uff0cSTATE_VALUES=STATE_VALUES)\u3002\u503c())\u635f\u5931=\u76ee\u6807\u68af\u5ea6=\u78c1\u5e26\u3002\u68af\u5ea6(Lost\uff0cTraining_vars)\u4f18\u5316\u5668\u3002\u5e94\u7528\u68af\u5ea6(zip(grads\uff0cTraining_vars))LOSS_VALUE=LOSS\u3002Numpy()LOSS_HISTORY\u3002APPEND(LOSS_VALUE)IF I%LOG_FREQUENCE==0\uff1aPRINT(f&#39\uff1bIteration{i}\uff1aLoss={Lost_Value}&#39\uff1b)PLOT_LP_STATE_VALUES(STATE_VALUES\uff0cTitle=f&#39\uff1bIteration{i}&#39\uff1b)If abs(prev_Loss_Value-Loss_Value)&lt\uff1bSTOPING_DELTA\uff1aBreak PRIV_LOSS_VALUE=LOSS_VALUE RETURN STATE_VALUES\u3002\n#\u53bb\u559d\u676f\u5496\u5561\uff0c\u8fd9\u5c06\u9700\u8981\u5927\u7ea620\u5206\u949f\u7684\u65f6\u95f4\uff0cLP_STATE_VALUES=SOLVE_GRANDIONS_TF(GAMMA=0.9\uff0cSTOPING_DELTA=0.1)PLOT_LP_STATE_VALUES(LP_STATE_VALUES\uff0cTitle=&#39\uff1bTensorFlow\u68af\u5ea6\u4e0b\u964d&#39\uff1b)\u3002\nArray([[21.97758293\uff0c24.41950417\uff0c21.97759247\uff0c19.41941071\uff0c17.47755814]\uff0c[19.77989769\uff0c21.97759819\uff0c19.77980042\uff0c17.801651\uff0c16.02147293]\uff0c[17.80190659\uff0c19.77986145\uff0c17.8018322\uff0c16.02175903\uff0c14.41941547]\uff0c[16.02163315\uff0c17.80198097\uff0c16.02163696\uff0c14.41940784\uff0c12.97757339]\uff0c[14.41948891\uff0c16.021698\uff0c14.41958618\uff0c12.97769833\uff0c12.97769833]])\u3002\n\u6570\u7ec4([[22.\u3002\u300124.4\u300122\u3002\uff0c19.4\uff0c17.5]\uff0c[19.8\uff0c22.\u3002\uff0c19.8\uff0c17.8\uff0c16.]\uff0c[17.8\uff0c19.8\uff0c17.8\uff0c16.\uff0c14.4]\uff0c[16\uff0c17.8\uff0c16.\uff0c14.4\uff0c13.]\uff0c[14.4\uff0c16.\uff0c14.4\uff0c13.\uff0c11.7])\u3002\n\u53e6\u4e00\u79cd\u627e\u5230\u7cbe\u786e\u89e3\u51b3\u65b9\u6848\u7684\u7b56\u7565\u3002\u8fd9\u8fd8\u9700\u8981\u5bf9\u73af\u5883\u6709\u5b8c\u7f8e\u7684\u4e86\u89e3\uff0c\u5e76\u4e14\u4e0d\u80fd\u6269\u5c55\u5230\u590d\u6742\u7684\u95ee\u9898\u3002\u5b83\u7684\u6536\u655b\u6027\u4fdd\u8bc1\u4e5f\u6bd4\u7ebf\u6027\u89c4\u5212\u5f31\u3002\u52a8\u6001\u89c4\u5212\u53ef\u4ee5\u5904\u7406\u6bd4\u7ebf\u6027\u89c4\u5212\u66f4\u5927\u7684\u95ee\u9898\uff0c\u4f46\u662f\u72b6\u6001\u7a7a\u95f4\u5448\u6307\u6570\u589e\u957f\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u89e3\u51b3\u6700\u5927\u7684\u95ee\u9898\u3002\ndef value_iteration(Gamma=0.9\uff0c\u03b5=1e-4)\uff1aSTATE_VALUES=Np\u3002\u968f\u673a\u7684\u3002RANDN(5\uff0c5)DIM=5\u73af\u5883=GridWorld()Delta=1000\u800cDelta&gt\uff1bepsilon\uff1a\u4ea7\u54c1\u4e2dS0\u7684\u589e\u91cf=0(Range(DIM)\uff0cRange(DIM))\uff1aV_S0=STATE_VALUES[S0]#\u7b56\u7565\uff1aARG-MAX ACTION-VALUE\uff0c\u5177\u6709\u5173\u4e8e\u73af\u5883OPTIME_ACTION_VALUE=-1000\u7684\u5b8c\u7f8e\u4fe1\u606f\u5728\u64cd\u4f5c\u4e2d\uff1a#\u786e\u5b9a\u6027\u5730\u5c06(s\uff0ca)\u5e94\u7528\u4e8eGridworld\u73af\u5883\u3002set_state(S0)s1\uff0cr=\u73af\u5883\u3002\u8f6c\u6362(a\u3002\nArray([[21.97747629\uff0c24.4194222\uff0c21.97747998\uff0c19.4194222\uff0c17.47747998]\uff0c[19.77972866\uff0c21.97747998\uff0c19.77973198\uff0c17.80175878\uff0c16.0215829]\uff0c[17.8017558\uff0c19.77973198\uff0c17.80175878\uff0c16.0215829\uff0c14.41942461]\uff0c[16.02158022\uff0c17.80175878\uff0c16.0215829\uff0c14.41942461\uff0c12.97748215]\uff0c[14.4194222\uff0c16.0215829\uff0c14.41942461\uff0c12.97748215\uff0c12.97748215]])\n\u8499\u7279\u5361\u7f57\u7b97\u6cd5\u662f\u7b2c\u4e00\u7c7b\u53ef\u6269\u5c55\u5230\u590d\u6742\u73b0\u5b9e\u95ee\u9898\u7684\u7b97\u6cd5\u3002\u4e0e\u4ee5\u524d\u7684\u65b9\u6cd5\u4e0d\u540c\uff0c\u8499\u7279\u5361\u7f57\u65b9\u6cd5\u4e0d\u9700\u8981\u73af\u5883\u6a21\u578b\uff0c\u65e2\u53ef\u4ee5\u4ece\u6a21\u62df\u4e8b\u4ef6\u4e2d\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5b9e\u9645\u7ecf\u9a8c\u4e2d\u5b66\u4e60\u3002\u6b64\u5916\uff0c\u5982\u679c\u53ea\u6709\u7279\u5b9a\u533a\u57df\u4e0e\u6211\u4eec\u7684\u7528\u4f8b\u76f8\u5173\uff0c\u5219\u6b64\u7b56\u7565\u4e0d\u9700\u8981\u5bf9\u6bcf\u4e2a\u5dde\u8fdb\u884c\u7cbe\u786e\u4f30\u8ba1\u3002\n\u7136\u800c\uff0c\u8499\u7279\u5361\u6d1b\u9700\u8981\u4e00\u79cd\u751f\u6210\u60c5\u8282\u7684\u7b56\u7565\uff0c\u65e0\u8bba\u662f\u9488\u5bf9\u7b56\u7565\u4e0a\u7684\u5b66\u4e60\u3001\u7b56\u7565\u5916\u7684\u5b66\u4e60\u3001\u6a21\u62df\u8fd8\u662f\u56de\u6d4b\u3002\u5982\u679c\u6ca1\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u63a2\u7d22\uff0c\u4f8b\u5982\u03b5-\u8d2a\u5a6a\u7b56\u7565\uff0c\u8fd9\u4e9b\u7b97\u6cd5\u90fd\u4e0d\u4f1a\u5728\u5408\u7406\u7684\u65f6\u95f4\u5185\u4ea7\u751f\u5408\u7406\u7684\u7ed3\u679c\u3002\u8fd9\u662f\u4e00\u4e2a\u6781\u5176\u5f3a\u70c8\u7684\u8ff9\u8c61\uff0c\u8868\u660e\u6709\u76d1\u7763\u7684\u5b66\u4e60\u65b9\u6cd5\u4f1a\u5929\u771f\u5730\u8fbe\u5230\u6b21\u4f18\u7b56\u7565\uff0c\u800c\u6c38\u8fdc\u627e\u4e0d\u5230\u9003\u79bb\u5c40\u90e8\u6781\u5c0f\u503c\u6240\u9700\u7684\u6570\u636e\u3002\n#TODO\uff1a\u63d0\u524d\u505c\u6b62def MC_Prediction(EVERY_ACVISE=FALSE\uff0cGAMA=0.9\uff0cDIM=5\uff0cT=32\uff0cIterations=int(1e4)\uff0cLOG_FREQUENCE=NONE)\uff1a\u5982\u679cLOG_FREQUENCE\u4e3aNONE\uff1aLOG_FREQUENCE=Iterations+1#GreedyAgent\u5728\u8fd9\u91cc\u4e25\u91cd\u5931\u8d25(\u53ef\u80fd\u76d1\u7763\u5b66\u4e60\u4e5f\u4f1a\u5931\u8d25)agent=EpsilonGreedyAgent(name=&#39\uff1b\u7b2c\u4e00\u503cMC\u9884\u6d4b&#39\uff1b)\u8fd4\u56de{s\uff1a(0\uff0c0)for s in product(range(Dim)\uff0crange(Dim))}Environment=GridWorld()for i in range(1\uff0citerations)\uff1aif i%log_Frequency==0\uff1adisplay_state_value(\u4ee3\u7406\u3002STATE_VALUES\uff0cTitle=f&#39\uff1bMC\u9884\u6d4b\uff1a\u8fed\u4ee3{i}&#39\uff1b)#\u6a21\u62df\u5267\u96c6S0=(\u968f\u673a\u3002\u968f\u673a\u6570(0\uff0c4)\uff0c\u968f\u673a\u6570\u3002RANDINT(0\uff0c4))\u73af\u5883\u3002SET_STATE(S0)\u63d2\u66f2=[S0]#S0\uff0ca0\uff0cs1\uff0cr1\uff0ca1\uff0cs2\uff0cr2\uff0ca2\uff0cs3.\u3002FOR_IN\u8303\u56f4(T)\uff1aA0=\u5ea7\u5e2d\u3002\u7b56\u7565(S0)S1\uff0cR1=\u73af\u5883\u3002\u8fc7\u6e21(A0)\u96c6\u3002EXTEND([a0\uff0cs1\uff0cr1])s0=s1#\u5f53j&gt\u65f6\uff0c\u4ece\u5267\u96c6\u7ed3\u5c3eret=0 j=T-1 SEPTION_RETURNS={}\u5f00\u59cb\u56de\u653e([a0\uff0cs1\uff0cr1])s0=s1#\uff1b0\uff1ar1=SEPTION[3*j+3]s0=SEPTION[3*j-1]j-=1 ret=r1+Gamma*ret SESSION_RETURNS[s0]=ret if Every_access\uff1aean_ret\uff0cc=Returns[s0]\u8fd4\u56de[s0]=((ean_ret*c+ret)/(c+1)\uff0cc+1)#\u66f4\u65b0SESSION_RENS\u4e2ds\uff0cret\u7684\u72b6\u6001\u503cv(S)\u3002Items()\uff1a\u5982\u679c\u4e0d\u662fEVERY_ACCESS\uff1aMean_ret\uff0cc=\u8fd4\u56de[s]\u8fd4\u56de[s]=((Mean_ret*c+ret)/(c+1)\uff0cc+1)agent\u3002STATE_VALUES[s]=\u9000\u8d27[s][0]\u9000\u8d27\u4ee3\u7406\u3002\nArray([[16.88336638\uff0c19.11593205\uff0c15.90961158\uff0c14.10295261\uff0c12.66921586]\uff0c[10.19679358\uff0c16.39664102\uff0c9.64112818\uff0c12.32284046\uff0c7.02133044]\uff0c[12.84864394\uff0c14.33527863\uff0c7.98370027\uff0c10.955611\uff0c5.55804087]\uff0c[6.35501717\uff0c12.15020809\uff0c7.09423013\uff0c9.42028638\uff0c8.57767909]\uff0c[5.13072527\uff0c10.60466385\uff0c5.11104244\uff0c8.28273845\uff0c8.28273845]])\u3002\n\u4f7f\u7528\u672c\u671f\u8282\u76ee\u4e2d\u6240\u6709\u53ef\u7528\u7684\u793a\u4f8b\uff0c\u800c\u4e0d\u662f\u4ec5\u9488\u5bf9\u6bcf\u4e2a\u5dde\u4f7f\u7528\u6700\u65e9\u7684\u793a\u4f8b\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f7f\u7528\u66f4\u591a\u7684\u6570\u636e\u6765\u4f30\u8ba1\u5dde\u4ef7\u503c\uff0c\u5373\u4f7f\u8fd9\u4e00\u96c6\u63a5\u8fd1\u5c3e\u58f0\u7684\u4f8b\u5b50\u4e0d\u662f\u975e\u5e38\u7cbe\u786e\u7684\u4f30\u8ba1\u3002\nArray([[15.75148645\uff0c14.64272644\uff0c15.7478293\uff0c13.97882859\uff0c10.39855134]\uff0c[13.88160682\uff0c10.6009308\uff0c13.97915625\uff0c12.37753395\uff0c10.17550269]\uff0c[6.95911765\uff0c8.5517532\uff0c8.20427254\uff0c10.83583432\uff0c8.98310377]\uff0c[8.1790024\uff0c7.07004833\uff0c3.72116253\uff0c9.01227403\uff0c7.80683278]\uff0c[4.35314417\uff0c5.67303207\uff0c2.75351299\uff0c7.98036612\uff0c7.98036612]])\u3002\n\u8fd9\u662f\u6211\u4eec\u7684\u5206\u6790\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u9700\u8981\u51c6\u786e\u7684\u73af\u5883\u6a21\u578b\u7684\u4f8b\u5b50\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u6211\u4eec\u7684\u4ee3\u7406\u4e0e\u73af\u5883\u4ea4\u4e92\u4ee5\u751f\u6210\u65b0\u7684\u6837\u672c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u901a\u8fc7\u5f71\u54cd\u7528\u6237\u6765\u5b66\u4e60\uff0c\u4e0d\u7ba1\u662f\u597d\u662f\u574f\uff0c\u5373\u4f7f\u8fd9\u610f\u5473\u7740\u5728\u77ed\u671f\u5185\u7ed9\u6211\u4eec\u7684\u7528\u6237\u5e26\u6765\u53ef\u6015\u7684\u4f53\u9a8c\u3002\ndef MC_CONTROL(EVERY_ACCESS=FALSE\uff0cGAMA=0.9\uff0cDIM=5\uff0cT=32\uff0cIterations=int(1e4)\uff0clog_Frequency=None)\uff1a\u5982\u679clog_Frequency\u4e3aNONE\uff1aLOG_FREQUENCE=Iterations+1 agent=LearnedAgent(Name=&#39\uff1bMC Control&#39\uff1b\uff0cepsilon=0.01)#\u8fd9\u4e0d\u4f1a&#39\uff1bt\u5728\u6ca1\u6709\u67d0\u4e9b\u63a2\u7d22\u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\u8fd4\u56de={(x\uff0cy\uff0ca)\uff1a(0\uff0c0)for x\uff0cy\uff0ca in product(range(Dim)\uff0crange(Dim)\uff0c[a for a in action])}Environment=Gridworld()for i in range(1\uff0c\u8fed\u4ee3\u6570)\uff1aif i%log_Frequency==0\uff1adisplay_state_value(\u4ee3\u7406\u3002ACTION_VALUES\u3002Max(\u8f74=2)\uff0ctitle=f&#39\uff1bMC\u63a7\u5236\uff1a\u8fed\u4ee3{i}&#39\uff1b)#\u4ece\u968f\u673a(\u72b6\u6001\uff0c\u52a8\u4f5c)x\uff0cy\uff0ca0=(\u968f\u673a.\u3002\u968f\u673a\u6570(0\uff0c4)\uff0c\u968f\u673a\u6570\u3002\u968f\u673a\u6570(0\uff0c4)\uff0c\u968f\u673a\u6570\u3002\u9009\u62e9([a for a in Action]))s0=(x\uff0cy)\u73af\u5883\u3002SET_STATE(S0)\u63d2\u66f2=[S0]#S0\uff0ca0\uff0cs1\uff0cr1\uff0ca1\uff0cs2\uff0cr2\uff0ca2\uff0cs3.\u3002FOR_IN\u8303\u56f4(T)\uff1aS1\uff0cR1=\u73af\u5883\u3002\u8fc7\u6e21(A0)\u96c6\u3002EXTEND([a0\uff0cs1\uff0cr1])a0=\u5ea7\u5e2d\u3002POLICY(S1)#\u4ece\u5267\u96c6\u7ed3\u5c3e\u5411\u540e\u56de\u653eret=0 j=T-1 SEPTION_RETURNS={\n..", "note_en": "In this notebook, we repeatedly solve a simple environment to explore the characteristics of the following algorithm classes, { Linear Programming (LP),  Dynamic Programming (DP),  Monte Carlo (MC), and  Temporal Difference Learning (TD)}. For  MC and  TD, we also explore further problem spaces in  Prediction,  On-Policy Control, and  Off-Policy Control.\n  from  __future__  import  print_function from  IPython.display  import  display ,  clear_output from  datetime  import  datetime ,  timedelta from  itertools  import  product from  pandas.plotting  import  register_matplotlib_converters import  ipywidgets  as  widgets import  numpy  as  np import  matplotlib.pyplot  as  plt import  pandas  as  pd import  random import  tensorflow  as  tf pd . options . display . max_columns  =  None register_matplotlib_converters () % matplotlib inline\n  % pip install ortools from  ortools.linear_solver  import  pywraplp # need to restart notebook after installing first time _  =  pywraplp . Solver ( &#39;LinearProgrammingGridworld&#39; ,  pywraplp . Solver . GLOP_LINEAR_PROGRAMMING )\n Looking in indexes: https://pypi.org/simple, https://pypi.lyft.net/pypi/Requirement already satisfied: ortools in /code/venvs/venv/lib/python3.6/site-packages (7.6.7691)Requirement already satisfied: protobuf&gt;=3.11.2 in /code/venvs/venv/lib/python3.6/site-packages (from ortools) (3.11.3)Requirement already satisfied: six&gt;=1.10 in /code/venvs/venv/lib/python3.6/site-packages (from ortools) (1.12.0)Requirement already satisfied: setuptools in /code/venvs/venv/lib/python3.6/site-packages (from protobuf&gt;=3.11.2-&gt;ortools) (45.2.0)Note: you may need to restart the kernel to use updated packages.\n   # optimal strategy, gamma=0.9 expected_values  =  np . array ([  [ 22.0 ,  24.4 ,  22.0 ,  19.4 ,  17.5 ],  [ 19.8 ,  22.0 ,  19.8 ,  17.8 ,  16.0 ],  [ 17.8 ,  19.8 ,  17.8 ,  16.0 ,  14.4 ],  [ 16.0 ,  17.8 ,  16.0 ,  14.4 ,  13.0 ],  [ 14.4 ,  16.0 ,  14.4 ,  13.0 ,  11.7 ] ])\n  from  enum  import  Enum class  Action ( Enum ):  NORTH  =  &#39;N&#39; ,  0 ,  lambda  x :  ( x [ 0 ]  -  1 ,  x [ 1 ]),  ( 0 ,  1 )  EAST  =  &#39;E&#39; ,  1 ,  lambda  x :  ( x [ 0 ],  x [ 1 ]  +  1 ),  ( 1 ,  0 )  WEST  =  &#39;W&#39; ,  2 ,  lambda  x :  ( x [ 0 ],  x [ 1 ]  -  1 ),  ( - 1 ,  0 )  SOUTH  =  &#39;S&#39; ,  3 ,  lambda  x :  ( x [ 0 ]  +  1 ,  x [ 1 ]),  ( 0 ,  - 1 )  def  __init__ ( self ,  display_name ,  index ,  transition ,  direction ):  self . display_name  =  display_name  self . index  =  index  self . transition  =  transition  # numpy row-major coordinates  self . direction  =  direction  # matplotlib coordinates  def  __str__ ( self ):  return  self . display_name\n  class  Agent ( object ):  def  __init__ ( self ,  name ):  self . name  =  name  def  policy ( self ,  state ):  &#34;&#34;&#34;Return an Action given STATE&#34;&#34;&#34;  raise  NotImplementedError ()\n class  GreedyAgent ( Agent ):  &#34;&#34;&#34;  This agent has perfect information regarding the environment transition probabilities and rewards.    This approach is infeasible for complex problems where the environment is unknown.  &#34;&#34;&#34;  def  __init__ ( self ,  state_values = None ,  name = &#39;Optimal&#39; ,  gamma = 0.9 ):  super () . __init__ ( name )  if  state_values  is  None :  state_values  =  np . random . randn ( 5 ,  5 )  self . state_values  =  state_values  # v(s)  self . gamma  =  gamma  self . environment  =  Gridworld ()  def  policy ( self ,  state ):  &#34;&#34;&#34;Policy iteration using the exact transition/reward outcomes.&#34;&#34;&#34;  action  =  None  max_action_value  =  - 1000  for  a  in  Action :  self . environment . set_state ( state )  s1 ,  r  =  self . environment . transition ( a )  action_value  =  r  +  self . gamma  *  self . state_values [ s1 ]  if  action_value  &gt;  max_action_value :  action  =  a  max_action_value  =  action_value  return  action\n class  EpsilonGreedyAgent ( GreedyAgent ):  &#34;&#34;&#34;  GreedyAgent with epsilon greedy exploration.    This approach is infeasible for complex problems where the environment is unknown.  &#34;&#34;&#34;  def  __init__ ( self ,  epsilon = 1e-2 ,  ** kwargs ):  super () . __init__ ( ** kwargs )  self . epsilon  =  epsilon  def  policy ( self ,  state ):  if  random . random ()  &lt;  self . epsilon :  return  random . choice ([ a  for  a  in  Action ])  return  super () . policy ( state )\n class  LearnedAgent ( Agent ):  &#34;&#34;&#34;Learn the Optimal Policy beginning with a random policy and no priors.&#34;&#34;&#34;  def  __init__ ( self ,  name = &#39;Learned&#39; ,  gamma = 0.9 ,  dim = 5 ,  epsilon = 0 ):  super () . __init__ ( name )  self . action_values  =  np . random . randn ( 5 ,  5 ,  4 )  # q(s, a)  self . _policy  =  { s :  random . choice ([ a  for  a  in  Action ])  for  s  in  product ( range ( dim ),  range ( dim ))}  self . gamma  =  gamma  self . epsilon  =  epsilon  def  policy ( self ,  state ):  if  random . random ()  &lt;  self . epsilon :  return  random . choice ([ a  for  a  in  Action ])  return  self . _policy [ state ]  def  update_state_policy ( self ,  s ):  old_action  =  self . _policy [ s ]  stable  =  True  max_action_value  =  - 1000  for  a  in  Action :  action_value  =  self . action_values [( s [ 0 ],  s [ 1 ],  a . index )]  if  action_value  &gt;  max_action_value :  action  =  a  max_action_value  =  action_value  if  action  !=  old_action :  policy_stable  =  False  self . _policy [ s ]  =  action  return  stable  def  policy_improvement ( self ):  &#34;&#34;&#34;Update our policy based on our latest action_values&#34;&#34;&#34;  policy_stable  =  True  for  s  in  self . _policy . keys ():  stable  =  self . update_state_policy ( s )  if  not  stable :  policy_stable  =  False  return  policy_stable\n  class  Gridworld ( object ):  def  __init__ ( self ,  initial_state = ( 0 ,  0 )):  self . dim  =  5  self . state  =  initial_state  def  set_state ( self ,  state ):  self . state  =  state  def  _transition_state ( self ,  action ):  &#34;&#34;&#34;Try to apply the ACTION and check whether it is valid&#34;&#34;&#34;  x ,  y  =  action . transition ( self . state )  if  x  &lt;  0  or  x  &gt;=  self . dim :  return  self . state  elif  y  &lt;  0  or  y  &gt;=  self . dim :  return  self . state  return  x ,  y  def  transition ( self ,  action ):  &#34;&#34;&#34;Apply the given ACTION to the current state and return the new state and reward.&#34;&#34;&#34;  reward  =  0  if  self . state  ==  ( 0 ,  1 ):  # special state A   new_state  =  ( 4 ,  1 )  reward  =  10  elif  self . state  ==  ( 0 ,  3 ):  # specal state B  new_state  =  ( 2 ,  3 )  reward  =  5  else :  new_state  =  self . _transition_state ( action )  # invalid move  if  new_state  ==  self . state :  reward  =  - 1  self . state  =  new_state  return  new_state ,  reward\n Given the textbook solution, our agent generally moves straight to position  (1, 4) to collect the 10 reward.\n def  display_state_values ( state_values ,  title = None ):  fig ,  ax  =  plt . subplots ( figsize = ( 4.8 ,  4.8 ))  if  title :  ax . set_title ( title )  # Transform row-major numpy coords to matplotlib coords   transformed_values  =  np . rot90 ( state_values . T )  im  =  ax . imshow ( transformed_values ,  cmap = &#39;hot&#39; )  fig . colorbar ( im ,  ax = ax )  agent  =  GreedyAgent ( state_values )  for  s  in  product ( range ( 5 ),  range ( 5 )):  action  =  agent . policy ( s )  dx ,  dy  =  action . direction  # Transform row-major numpy coords to matplotlib coords  x ,  y  =  s [ 1 ],  4  -  s [ 0 ]  ax . arrow ( x  -  0.25  *  dx ,  y  -  0.25  *  dy ,  0.5  *  dx ,  0.5  *  dy ,  head_width = 0.05 )  ax . set_xlim ( - 0.5 ,  4.5 )  ax . set_ylim ( - 0.5 ,  4.5 )  plt . show ()  def  display_state ( state ,  fig = None ,  ax = None ):  if  ax  ==  None :  fig ,  ax  =  plt . subplots ( figsize = ( 6.4 * 2 ,  4.8 ))  grid  =  np . zeros (( 5 ,  5 ))  grid [ state [ 0 ],  state [ 1 ]]  =  1  ax . imshow ( grid ,  cmap = &#39;viridis&#39; )  display ( fig )  clear_output ( wait = True )  plt . show ()\n  An exact solution, but extremely sensitive to formulation, hyperparameters, and unscaleable to anything but the simplest problems without making drastic simplifications/assumptions.\n def  solve_optimization ( gamma = 0.9 ,  dim = 5 ):  solver  =  pywraplp . Solver ( &#39;LinearProgrammingGridworld&#39; ,  pywraplp . Solver . GLOP_LINEAR_PROGRAMMING )  state_values  =  { s :  solver . NumVar ( - solver . infinity (),  solver . infinity (),  f &#39;state_ {s[0]} _ {s[1]} &#39; )  for  s  in  product ( range ( dim ),  range ( dim ))}  objective  =  solver . Objective ()  objective . SetMinimization ()  environment  =  Gridworld ()  # Objective: minimize sum(v(s)) for all s  for  s0 ,  v_s0  in  state_values . items ():  objective . SetCoefficient ( v_s0 ,  1 )  # Optimal: v(s) = max_a{r + gamma * v(s&#39;)}  for  a  in  Action :  # Deterministically apply (s, a) to Gridworld to get (s&#39;, r)  environment . set_state ( s0 )  s1 ,  r  =  environment . transition ( a )  v_s1  =  state_values [ s1 ]  # Constraint: v(s) - gamma * v(s&#39;) &gt;= r  constraint  =  solver . Constraint ( r ,  solver . infinity ())  constraint . SetCoefficient ( v_s0 ,  1 )  constraint . SetCoefficient ( v_s1 ,  - gamma )  print ( f &#39;Number of variables={solver.NumVariables()}, constraints={solver.NumConstraints()}&#39; )  solver . EnableOutput ()  status  =  solver . Solve ()  if  status  ==  solver . OPTIMAL :  values  =  np . zeros (( 5 ,  5 ))  for  ( x ,  y ),  var  in  state_values . items ():  values [ x ,  y ]  =  var . solution_value ()  return  values  else :  if  status  ==  solver . FEASIBLE :  print ( &#39;A potentially suboptimal solution was found.&#39; )  else :  print ( &#39;The solver could not solve the problem.&#39; )\n array([[ 3.00730776, 10.02435919, 3.00730776, 5.13874615, 1.54162384], [ 0.90219233, 3.00730776, 0.90219233, 1.54162384, 0.46248715], [ 0.2706577 , 0.90219233, 0.2706577 , 0.46248715, 0.13874615], [ 0.08119731, 0.2706577 , 0.08119731, 0.13874615, 0.04162384], [ 0.02435919, 0.08119731, 0.02435919, 0.04162384, 0.01248715]])\n Using gradient descent and a loss defined around the error between  v(s) - v*(s) (big thanks to Gautam Kedia for cleaning up the loss function).\n tf . config . experimental_run_functions_eagerly ( True ) @tf . function def  get_problem ( gamma ,  constraint_penalty ,  state_values = None ,  dim = 5 ):  # TODO: set better initial values  if  state_values  ==  None :  state_values  =  { s :  tf . Variable ( np . random . rand (),  name = f &#39;state_ {s[0]} _ {s[1]} &#39; ,  dtype = tf . float32 )  for  s  in  product ( range ( dim ),  range ( dim ))}  errors  =  []  environment  =  Gridworld ()  for  s0 ,  v_s0  in  state_values . items ():  action_values  =  []  for  a  in  Action :  # Deterministically apply (s, a) to Gridworld to get (s&#39;, r)  environment . set_state ( s0 )  s1 ,  r  =  environment . transition ( a )  v_s1  =  state_values [ s1 ]  action_value  =  r  +  gamma  *  v_s1  action_values . append ( action_value  -  v_s0 )  errors . append ( tf . reduce_max ( action_values ))  objective  =  tf . reduce_sum ( tf . square ( errors ),  name = &#39;objective&#39; )  return  objective ,  state_values def  plot_lp_state_values ( state_values_dict ,  title = None ):  lp_values  =  np . zeros (( 5 ,  5 ))  for  ( x ,  y ),  var  in  state_values_dict . items ():  lp_values [ x ,  y ]  =  var . numpy ()  display_state_values ( lp_values ,  title = title )  return  lp_values def  solve_gradients_tf ( gamma = 0.9 ,  constraint_penalty = 10. ,  iterations = 50000 ,  stopping_delta = 1e-4 ,  log_frequency = None ):  if  log_frequency  is  None :  log_frequency  =  iterations  +  1  optimizer  =  tf . keras . optimizers . Adam ()  prev_loss_value  =  1e9  loss_history  =  []  objective ,  state_values  =  get_problem ( gamma = gamma ,  constraint_penalty = constraint_penalty )  for  i  in  range ( 1 ,  iterations ):  with  tf . GradientTape ()  as  tape :  objective ,  state_values  =  get_problem ( gamma = gamma ,  constraint_penalty = constraint_penalty ,  state_values = state_values )  trainable_vars  =  list ( state_values . values ())  loss  =  objective  grads  =  tape . gradient ( loss ,  trainable_vars )  optimizer . apply_gradients ( zip ( grads ,  trainable_vars ))  loss_value  =  loss . numpy ()  loss_history . append ( loss_value )  if  i  %  log_frequency  ==  0 :  print ( f &#39;Iteration  {i} : Loss= {loss_value} &#39; )  plot_lp_state_values ( state_values ,  title = f &#39;Iteration  {i} &#39; )  if  abs ( prev_loss_value  -  loss_value )  &lt;  stopping_delta :  break  prev_loss_value  =  loss_value  return  state_values\n # Go get a coffee, this will take ~20 minutes lp_state_values  =  solve_gradients_tf ( gamma = 0.9 ,  stopping_delta = 0.1 ) plot_lp_state_values ( lp_state_values ,  title = &#39;Tensorflow Gradient Descent&#39; )\n array([[21.97758293, 24.41950417, 21.97759247, 19.41941071, 17.47755814], [19.77989769, 21.97759819, 19.77980042, 17.801651 , 16.02147293], [17.80190659, 19.77986145, 17.8018322 , 16.02175903, 14.41941547], [16.02163315, 17.80198097, 16.02163696, 14.41940784, 12.97757339], [14.41948891, 16.021698 , 14.41958618, 12.97769833, 11.68007278]])\n array([[22. , 24.4, 22. , 19.4, 17.5], [19.8, 22. , 19.8, 17.8, 16. ], [17.8, 19.8, 17.8, 16. , 14.4], [16. , 17.8, 16. , 14.4, 13. ], [14.4, 16. , 14.4, 13. , 11.7]])\n Another strategy for finding the exact solution. This also requires a perfect understanding of the environment and not scaleable to complex problems. It also has weaker convergence guarantees than Linear Programming. Dynamic Programming can handle larger problems than Linear Programming, however the state-space grows exponentially and we must use other methods for the largest problems.\n def  value_iteration ( gamma = 0.9 ,  epsilon = 1e-4 ):  state_values  =  np . random . randn ( 5 ,  5 )  dim  =  5  environment  =  Gridworld ()  delta  =  1000  while  delta  &gt;  epsilon :  delta  =  0  for  s0  in  product ( range ( dim ),  range ( dim )):  v_s0  =  state_values [ s0 ]  # Policy: arg-max action-value, having perfect information about the environment  optimal_action_value  =  - 1000  for  a  in  Action :  # Deterministically apply (s, a) to Gridworld  environment . set_state ( s0 )  s1 ,  r  =  environment . transition ( a )  v_s1  =  state_values [ s1 ]  action_value  =  r  +  gamma  *  v_s1  optimal_action_value  =  max ( action_value ,  optimal_action_value )  state_values [ s0 ]  =  optimal_action_value  delta  +=  abs ( v_s0  -  optimal_action_value )  return  state_values\n array([[21.97747629, 24.4194222 , 21.97747998, 19.4194222 , 17.47747998], [19.77972866, 21.97747998, 19.77973198, 17.80175878, 16.0215829 ], [17.8017558 , 19.77973198, 17.80175878, 16.0215829 , 14.41942461], [16.02158022, 17.80175878, 16.0215829 , 14.41942461, 12.97748215], [14.4194222 , 16.0215829 , 14.41942461, 12.97748215, 11.67973394]])\n Monte Carlo is the first class of algorithm that is scaleable to complex real world problems. Unlike the previous approaches, Monte Carlo methods do not require a model of the environment, learning from both simulated episodes and actual experience. Additionally, this strategy does not require precise estimation of every state if only particular regions are relevant to our use-case.\n However Monte Carlo requires a strategy for generating episodes, either for on-policy learning, off-policy learning, simulation, or back-test. None of the these algorithms generate sensible results in a reasonable amount of time without some form of exploration, such as epsilon-greedy policies. This is an extremely strong indication that a supervised learning approach would naively reach a suboptimal policy while never finding the data necessary to escape the local minima.\n # TODO: early stopping def  mc_prediction ( every_visit = False ,  gamma = 0.9 ,  dim = 5 ,  T = 32 ,  iterations = int ( 1e4 ),  log_frequency = None ):  if  log_frequency  is  None :  log_frequency  =  iterations  +  1  # GreedyAgent fails spectacularly here (likely supervised learning would also fail)  agent  =  EpsilonGreedyAgent ( name = &#39;First-Value MC Prediction&#39; )  returns  =  { s :  ( 0 ,  0 )  for  s  in  product ( range ( dim ),  range ( dim ))}  environment  =  Gridworld ()  for  i  in  range ( 1 ,  iterations ):  if  i  %  log_frequency  ==  0 :  display_state_values ( agent . state_values ,  title = f &#39;MC Prediction: Iteration  {i} &#39; )  # Simulate episode  s0  =  ( random . randint ( 0 ,  4 ),  random . randint ( 0 ,  4 ))  environment . set_state ( s0 )  episode  =  [ s0 ]  # s0, a0, s1, r1, a1, s2, r2, a2, s3...  for  _  in  range ( T ):  a0  =  agent . policy ( s0 )  s1 ,  r1  =  environment . transition ( a0 )  episode . extend ([ a0 ,  s1 ,  r1 ])  s0  =  s1  # Replay backwards from the end of the episode  ret  =  0  j  =  T  -  1  episode_returns  =  {}  while  j  &gt;  0 :  r1  =  episode [ 3 * j  +  3 ]  s0  =  episode [ 3 * j  -  1 ]  j  -=  1  ret  =  r1  +  gamma  *  ret  episode_returns [ s0 ]  =  ret  if  every_visit :  mean_ret ,  c  =  returns [ s0 ]  returns [ s0 ]  =  (( mean_ret  *  c  +  ret )  /  ( c  +  1 ),  c  +  1 )  # Update state values v(s)  for  s ,  ret  in  episode_returns . items ():  if  not  every_visit :  mean_ret ,  c  =  returns [ s ]  returns [ s ]  =  (( mean_ret  *  c  +  ret )  /  ( c  +  1 ),  c  +  1 )  agent . state_values [ s ]  =  returns [ s ][ 0 ]  return  agent\n array([[16.88336638, 19.11593205, 15.90961158, 14.10295261, 12.66921586], [10.19679358, 16.39664102, 9.64112818, 12.32284046, 7.02133044], [12.84864394, 14.33527863, 7.98370027, 10.955611 , 5.55804087], [ 6.35501717, 12.15020809, 7.09423013, 9.42028638, 8.57767909], [ 5.13072527, 10.60466385, 5.11104244, 8.28273845, 7.46509452]])\n Use every available example in the episode, instead of the earliest example only for each state. In other words, use more data to estimate state-value, even if the examples near the end of the episode are not very precise estimates.\n array([[15.75148645, 14.64272644, 15.7478293 , 13.97882859, 10.39855134], [13.88160682, 10.6009308 , 13.97915625, 12.37753395, 10.17550269], [ 6.95911765, 8.5517532 , 8.20427254, 10.83583432, 8.98310377], [ 8.1790024 , 7.07004833, 3.72116253, 9.01227403, 7.80683278], [ 4.35314417, 5.67303207, 2.75351299, 7.98036612, 6.97511888]])\n This is the first example in our analysis that does not need an accurate model of the environment. Instead, we use our Agent to interact with the environment to generate new samples. In other words, we learn through affecting users, for better or worse, even if this means giving our users a terrible experience in the short term.\n def  mc_control ( every_visit = False ,  gamma = 0.9 ,  dim = 5 ,  T = 32 ,  iterations = int ( 1e4 ),  log_frequency = None ):  if  log_frequency  is  None :  log_frequency  =  iterations  +  1  agent  =  LearnedAgent ( name = &#39;MC Control&#39; ,  epsilon = 0.01 )  # this doesn&#39;t work without some exploration  returns  =  {( x ,  y ,  a ):  ( 0 ,  0 )  for  x ,  y ,  a  in  product ( range ( dim ),  range ( dim ),  [ a  for  a  in  Action ])}  environment  =  Gridworld ()  for  i  in  range ( 1 ,  iterations ):  if  i  %  log_frequency  ==  0 :  display_state_values ( agent . action_values . max ( axis = 2 ),  title = f &#39;MC Control: Iteration  {i} &#39; )  # Simulate episode from random (state, action)  x ,  y ,  a0  =  ( random . randint ( 0 ,  4 ),  random . randint ( 0 ,  4 ),  random . choice ([ a  for  a  in  Action ]))  s0  =  ( x ,  y )  environment . set_state ( s0 )  episode  =  [ s0 ]  # s0, a0, s1, r1, a1, s2, r2, a2, s3...  for  _  in  range ( T ):  s1 ,  r1  =  environment . transition ( a0 )  episode . extend ([ a0 ,  s1 ,  r1 ])  a0  =  agent . policy ( s1 )  # Replay backwards from the end of the episode  ret  =  0  j  =  T  -  1  episode_returns  =  {\n......", "posttime": "2020-05-05 18:40:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,algorithms,\u5b66\u4e60,learning,state", "title": "\u7f51\u683c\u4e16\u754c\u4e2d\u7684\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5", "title_en": "Reinforcement Learning Algorithms in Gridworld", "transed": 1, "url": "https://nbviewer.jupyter.org/url/github.com/laxatives/rl/blob/master/gridworld_mdp.ipynb", "via": "", "real_tags": ["\u7b97\u6cd5", "\u5b66\u4e60", "learning", "state"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000719, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Nativefier\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b80\u6d01\u548c\u6700\u5c11\u7684\u914d\u7f6e\u8f7b\u677e\u5730\u4e3a\u4efb\u4f55\u7f51\u7ad9\u521b\u5efa\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u3002\u5e94\u7528\u7a0b\u5e8f\u7531Electron\u6253\u5305\u5728\u64cd\u4f5c\u7cfb\u7edf\u53ef\u6267\u884c\u6587\u4ef6(.app\u3001.exe\u7b49)\u4e2d\u3002\u9002\u7528\u4e8eWindows\u3001MacOS\u548cLinux\u3002\n\u6211\u4e4b\u6240\u4ee5\u8fd9\u6837\u505a\uff0c\u662f\u56e0\u4e3a\u6211\u538c\u5026\u4e86\u5728\u4f7f\u7528Facebook Messenger\u6216Whatsapp Web(\u76f8\u5173\u9ed1\u5ba2\u65b0\u95fb\u5e16\u5b50)\u65f6\uff0c\u4e0d\u5f97\u4e0d\u5728\u6d4f\u89c8\u5668\u4e0a\u4f7f\u7528\u2318-Tab\u6216Alt-Tab\u952e\uff0c\u7136\u540e\u5728\u4f17\u591a\u6253\u5f00\u7684\u6807\u7b7e\u4e2d\u8fdb\u884c\u641c\u7d22\u3002\n\u53ef\u9009\u4f9d\u8d56\u9879\uff1a\u7528\u4e8e\u5728\u975eWindows\u5e73\u53f0\u4e0b\u6253\u5305Windows\u5e94\u7528\u7a0b\u5e8f\u7684WINE\u3002\u786e\u4fdd\u9152\u5728\u4f60\u7684$\u8def\u5f84\u4e0a\u3002\nNativefier\u5c06\u5c1d\u8bd5\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u3001\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u67b6\u6784\uff0c\u4ee5\u53ca\u5176\u4ed6\u9009\u9879\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06--name&#34\uff1b\u4ecb\u8d28&#34\uff1b\u6307\u5b9a\u4e3a\u547d\u4ee4\u884c\u9009\u9879\u7684\u4e00\u90e8\u5206\u6765\u8986\u76d6\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u6216\u5176\u4ed6\u9009\u9879\uff1a\n\u9605\u8bfbAPI\u6587\u6863(\u6216nativefier--help)\uff0c\u4e86\u89e3\u53ef\u7528\u4e8e\u914d\u7f6e\u6253\u5305\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u547d\u4ee4\u884c\u6807\u5fd7\u3002\n\u8981\u8ba9\u5e94\u7528\u7a0b\u5e8f/\u57df\u540d\u9ed8\u8ba4\u4f7f\u7528\u9ad8\u5206\u8fa8\u7387\u56fe\u6807\uff0c\u8bf7\u5411\u56fe\u6807\u5e93\u6295\u7a3f\uff01\n\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u83dc\u5355\u5904\u4e8e\u9690\u85cf\u72b6\u6001\uff0c\u4ee5\u5b9e\u73b0\u6700\u5c0f\u7684UI\u3002\u60a8\u53ef\u4ee5\u6309ALT\u952e\u76d8\u952e\u8fdb\u884c\u8bbf\u95ee\u3002\n\u5e26\u6709\u9002\u5f53\u7ba1\u9053\u7684\u6a21\u677f\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u5728./app\u6587\u4ef6\u5939\u4e2d\u3002\u5f53\u8fd0\u884c\u672c\u673a\u7a0b\u5e8f\u65f6\uff0c\u8be5\u6a21\u677f\u88ab\u53c2\u6570\u5316\uff0c\u5e76\u4f7f\u7528\u7535\u5b50\u6253\u5305\u7a0b\u5e8f\u6253\u5305\u3002\n\u6b64\u5916\uff0c\u6211\u5c06GitCloud\u6784\u5efa\u4e3a\u4f7f\u7528GitHub\u4f5c\u4e3a\u56fe\u6807\u7d22\u5f15\uff0c\u5e76\u4f7f\u7528pageIcon\u56de\u9000\u4eceURL\u63a8\u65ad\u76f8\u5173\u56fe\u6807\u3002\nDockerfile\u7684\u4f7f\u7528\u65b9\u5f0f\u4e0eNormal\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u7c7b\u4f3c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u6267\u884c\u547d\u4ee4nativefier--help\u3002\u5728\u4f7f\u7528\u6620\u50cf\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u6784\u5efa\u5b83\uff1a\n\u5728\u6b64\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u7b2c\u4e00\u4e2a\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u5230\u672c\u5730$target-path\u3002\u786e\u4fdd\u60a8\u5bf9$target-path\u5177\u6709\u5199\u5165\u6743\u9650\uff1a\n\u60a8\u8fd8\u53ef\u4ee5\u4f20\u9012\u672c\u5730\u5316\u6807\u5fd7\uff0c\u5e76\u6302\u8f7d\u5176\u4ed6\u5377\u4ee5\u63d0\u4f9b\u672c\u5730\u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u8981\u4f7f\u7528\u56fe\u6807\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\nDocker run-v$path_to_icon/\uff1a/src-v$target-path\uff1a/target local/nativefier--icon/src/icon.png--name WhatsApp-p linux-a x64 https://my-web-app.com//target/", "note_en": "Nativefier is a command-line tool to easily create a desktop application for any web site with succinct and minimal configuration. Apps are wrapped by  Electron in an OS executable ( .app,  .exe, etc.) for use on Windows, macOS and Linux.\n I did this because I was tired of having to  \u2318-tab or  alt-tab to my browser and then search through the numerous open tabs when I was using  Facebook Messenger or  Whatsapp Web ( relevant Hacker News thread).\n     Optional dependencies: Wine to package Windows apps under non-Windows platforms. Make sure  wine is in your  $PATH.\n     Nativefier will attempt to determine the app name, your OS and processor architecture, among other options. If desired, the app name or other options can be overwritten by specifying the  --name &#34;Medium&#34; as part of the command line options:\n  Read the  API documentation (or  nativefier --help) for other command-line flags that can be used to configure the packaged app.\n To have high-resolution icons used by default for an app/domain, please contribute to the  icon repository!\n Note that the application menu is hidden by default for a minimal UI. You can press the  alt keyboard key to access it.\n  A template app with the appropriate plumbing is included in the  ./app folder. When  nativefier is run, this template is parameterized, and packaged using  Electron Packager.\n In addition, I built  GitCloud to use GitHub as an icon index, and also the  pageIcon fallback to infer a relevant icon from a URL.\n     The  Dockerfile is designed to be used like the &#34;normal&#34; nativefier app. By default, the command  nativefier --help will be executed. Before you can use the image, you have to build it:\n  After that, you can build your first nativefier app to the local  $TARGET-PATH. Ensure you have write access to the  $TARGET-PATH:\n  You can also pass nativefier flags, and mount additional volumes to provide local files. For example, to use a icon:\n docker run -v $PATH_TO_ICON/:/src -v $TARGET-PATH:/target local/nativefier --icon /src/icon.png --name whatsApp -p linux -a x64 https://my-web-app.com/ /target/", "posttime": "2020-05-05 18:40:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,app,\u7f51\u9875,page,\u5e94\u7528\u7a0b\u5e8f", "title": "\u4f7f\u4efb\u4f55\u7f51\u9875\u6210\u4e3a\u684c\u9762\u5e94\u7528\u7a0b\u5e8f", "title_en": "Make any web page a desktop application", "transed": 1, "url": "https://github.com/jiahaog/nativefier", "via": "", "real_tags": ["\u7a0b\u5e8f", "app", "\u7f51\u9875", "page", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "59d8feaa20495cf51f62a026e1bb62f1.jpeg", "infoid": 1000717, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u8ba9\u4eba\u4eec\u5f88\u4e3a\u96be\uff0c\u8ba9\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u82b1\u4e00\u5206\u949f\u601d\u8003\u6211\u8981\u627e\u7684\u662f\u4ec0\u4e48\u3002\u8fd9\u662f\u4e0d\u662f\u67d0\u79cd\u9677\u9631\uff1f\u4ed6\u662f\u4e0d\u662f\u60f3\u627e\u4e2a\u4e0d\u96c7\u6211\u7684\u7406\u7531\uff1f\u6211\u60f3\u8981\u7684\u4e1c\u897f\u7684\u8bc9\u8bbc\u65f6\u6548\u5230\u4e86\u5417\uff1f\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5b9e\u5b9e\u5728\u5728\u7684\u62c5\u5fe7\uff0c\u4f46\u6211\u4e0d\u662f\u6765\u8fd9\u91cc\u8bc4\u5224\u9519\u8bef\u7684\u3002\u6211\u662f\u6765\u5224\u65ad\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002\u6211\u5728\u542cKaizen\u7684DevOps\u7ec3\u4e60\u3002\u6539\u5584\u662f\u65e5\u672c\u4eba\u4e0d\u65ad\u5b9e\u8df5\u548c\u6539\u8fdb\u7684\u7406\u5ff5\u3002\u5728DevOps\u4e2d\uff0c\u8fd9\u5c31\u662f\u4ece\u5931\u8d25\u4e2d\u5b66\u4e60\u3002\n\u6bcf\u4e2a\u4eba\u90fd\u505a\u8fc7\u4e00\u4e9b\u5f53\u65f6\u770b\u8d77\u6765\u50cf\u662f\u5927\u95ee\u9898\u7684\u4e8b\u60c5\uff0c\u4e5f\u8bb8\u771f\u7684\u662f\u8fd9\u6837\u3002\u6211\u76f8\u4fe1\u4f60\u4eec\u73b0\u5728\u90fd\u5728\u60f3\u4f60\u4eec\u505a\u8fc7\u7684\u4e8b\u3002\u6211\u8bb0\u5f97\u6709\u4e00\u6b21\u6211\u5bfc\u81f4\u591a\u4e2a\u5dde\u7684DMV\u505c\u673a\uff0c\u6216\u8005\u6709\u4e00\u6b21\u6211\u4e0d\u5c0f\u5fc3\u4e22\u5f03\u4e86\u6574\u4e2a\u751f\u4ea7\u6570\u636e\u5e93\uff0c\u56e0\u4e3a\u6211\u4ee5\u4e3a\u6211\u5728Dev\u4e2d\u3002\u54ce\u5466\u3002\n\u73b0\u5728\uff0c\u5f53\u6211\u95ee\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u6211\u5e0c\u671b\u5f97\u5230\u4e0d\u540c\u7684\u7b54\u6848\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6211\u62db\u8058\u7684\u7ea7\u522b\u3002JR\u6216\u5165\u95e8\u7ea7\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u4e13\u4e1a\u77e5\u8bc6\uff0c\u6240\u4ee5\u6211\u4f1a\u8981\u6c42\u4e00\u4e2a\u4e2a\u4eba\u6545\u4e8b\u3002\u518d\u4e00\u6b21\uff0c\u6211\u4e3e\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u628a\u6574\u7f50\u6cb9\u6f06\u6d12\u5728\u786c\u6728\u5730\u677f\u4e0a\uff0c\u6216\u8005\u91cd\u65b0\u7ec4\u88c5\u5f15\u64ce\uff0c\u7ed3\u679c\u5374\u5f88\u96be\u627e\u5230\u628a\u8fd9\u51e0\u4e2a\u87ba\u6bcd\u548c\u87ba\u6813\u653e\u5728\u4e00\u8fb9\u7684\u7528\u9014\u3002\u90a3\u8f86\u8f66\u5728\u90a3\u4e4b\u540e\u51e0\u5e74\u90fd\u8dd1\u5f97\u5f88\u597d\uff0c\u5982\u679c\u4f60\u62c5\u5fc3\u7684\u8bdd\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u9762\u8bd5\u7684\u662f\u8d44\u6df1\u6216\u5efa\u7b51\u5e08\u804c\u4f4d\u7684\u4eba\uff0c\u6211\u4f1a\u4ece\u4ed6\u4eec\u7684\u804c\u4e1a\u751f\u6d3b\u4e2d\u671f\u5f85\u4e00\u4e9b\u4e1c\u897f\u3002\u73b0\u5728\u5f53\u4f60\u8bb2\u8fd9\u4e2a\u6545\u4e8b\u7684\u65f6\u5019\uff0c\u6211\u4e0d\u9700\u8981\u7ec6\u8282\uff0c\u9664\u975e\u4f60\u5bf9\u6b64\u611f\u5230\u6ee1\u610f\u3002\u6211\u77e5\u9053\u5728\u6211\u7684\u5de5\u4f5c\u4e2d\uff0c\u6211\u4f1a\u65f6\u4e0d\u65f6\u5730\u7b7e\u7f72\u65b0\u53d1\u5c55\u533a\u3002\u6240\u4ee5\u4ed6\u4eec\u53ef\u80fd\u4e0d\u80fd\u900f\u9732\u4efb\u4f55\u4e8b\u60c5\uff0c\u6240\u4ee5\u6211\u4f1a\u8bd5\u7740\u8ba9\u4ed6\u4eec\u8bb2\u4e00\u4ef6\u4e2a\u4eba\u8da3\u4e8b\u3002\n\u4e0d\u8fc7\uff0c\u8001\u5b9e\u8bf4\uff0c\u5982\u679c\u4ed6\u4eec\u544a\u8bc9\u6211\u4e00\u4e9b\u4e8b\u60c5\uff0c\u8fd9\u4e2a\u6545\u4e8b\u53ea\u662f\u4e00\u4e2a\u989d\u5916\u7684\u5956\u52b1\u3002\u4f46\u6211\u60f3\u77e5\u9053\u7684\u662f\u95ee\u9898\u662f\u5426\u89e3\u51b3\u4e86\u3002\u66f4\u597d\u7684\u662f\uff0c\u4ed6\u4eec\u77e5\u9053\u5b83\u662f\u600e\u4e48\u4fee\u597d\u7684\u5417\u3002\u6211\u4e4b\u6240\u4ee5\u8fd9\u6837\u8bf4\uff0c\u662f\u56e0\u4e3a\u6211\u4e0d\u4ecb\u610f\u4ed6\u4eec\u4e0d\u662f\u4fee\u597d\u5b83\u7684\u4eba\uff0c\u4f46\u6211\u5e0c\u671b\u5982\u679c\u4ed6\u4eec\u5f04\u574f\u4e86\u5b83\uff0c\u4ed6\u4eec\u4f1a\u82b1\u65f6\u95f4\u5f04\u6e05\u695a\u5b83\u662f\u600e\u4e48\u4fee\u597d\u7684\u3002\u8bb0\u4f4f\uff0c\u8fd9\u662f\u5173\u4e8e\u6539\u5584\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u81ea\u5df1\u505a\u4e86\u4ec0\u4e48\uff0c\u4f60\u5c31\u4e0d\u4f1a\u8fdb\u6b65\u3002\u6240\u4ee5\u73b0\u5728\u662f\u4f60\u4eec\u5e94\u8be5\u5f00\u59cb\u505a\u7b14\u8bb0\u7684\u65f6\u5019\u4e86\u3002\n\u73b0\u5728\u518d\u8bf4\u4e00\u904d\uff0c\u6839\u636e\u4f60\u9762\u8bd5\u7684\u7ea7\u522b\u4e0d\u540c\uff0c\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u90fd\u53ef\u80fd\u4e0d\u540c\u3002\u4f5c\u4e3a\u5165\u95e8\u7ea7\u6216JR\u9762\u8bd5\uff0c\u6211\u5e0c\u671b\u5176\u4ed6\u4eba\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u6211\u5e0c\u671b\u4ed6\u4eec\u80fd\u544a\u8bc9\u6211\u539f\u56e0\u3002\u9ad8\u7ea7\u6216\u66f4\u9ad8\u7ea7\u522b\u53ef\u80fd\u4fee\u590d\u4e86\u9519\u8bef\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5bf9\u8be5\u95ee\u9898\u6709\u6700\u591a\u7684\u4e86\u89e3\u3002\u6216\u8005\u8ba9\u5176\u4ed6\u90e8\u95e8\u53c2\u4e0e\u8fdb\u6765\u3002\n\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u4f46\u4e0d\u80fd\u544a\u8bc9\u4f60\u8fd9\u600e\u4e48\u4f1a\u4ee4\u4eba\u62c5\u5fe7\u3002\u4ed6\u4eec\u662f\u4e0d\u662f\u4e0d\u8bb0\u5f97\u4ed8\u51fa\u4e86\u4ec0\u4e48\u4ee3\u4ef7\uff0c\u8fd9\u662f\u80af\u5b9a\u7684\u3002\u7279\u522b\u662f\u5982\u679c\u8fd9\u662f\u51e0\u5e74\u524d\u7684\u8bdd\uff0c\u4ece\u73b0\u5728\u5230\u90a3\u65f6\uff0c\u6211\u4eec\u90fd\u5fd8\u8bb0\u4e86\u5f88\u591a\u4e1c\u897f\u3002\u4f46\u5982\u679c\u4ed6\u4eec\u8bf4\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u53e6\u4e00\u4e2a\u4eba\u4fee\u597d\u4e86\uff0c\u6211\u5c31\u79bb\u5f00\u4e86\u3002\u8fd9\u4ee4\u4eba\u62c5\u5fe7\uff0c\u56e0\u4e3a\u8fd9\u8868\u660e\u4ed6\u4eec\u53ef\u80fd\u6ca1\u6709\u4ece\u9519\u8bef\u4e2d\u5438\u53d6\u6559\u8bad\uff0c\u5f88\u53ef\u80fd\u4f1a\u518d\u6b21\u72af\u4e0b\u9519\u8bef\u3002\n\u4f46\u662f\u5982\u679c\u4f60\u5f97\u4e0d\u5230\u4efb\u4f55\u7b54\u6848\u5462\uff1f\u8be5\u4eba\u58f0\u79f0\u4ed6\u4eec\u4ece\u672a\u6253\u788e\u8fc7\u4efb\u4f55\u4e1c\u897f\u3002\u518d\u8bf4\u4e00\u6b21\uff0cJR\u6216\u66f4\u4f4e\u7684\u4ed6\u4eec\u53ef\u80fd\u6ca1\u6709\u6253\u788e\u4efb\u4f55\u4e1c\u897f\u3002\u4ed6\u4eec\u8fd8\u6ca1\u6709\u673a\u4f1a\u6253\u7834\u4efb\u4f55\u4e1c\u897f\u3002\u9ad8\u7ea7\u8fd8\u662f\u66f4\u9ad8\u7ea7\uff1f\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u8d85\u7ea7\u5371\u9669\u4fe1\u53f7\u3002\u5982\u679c\u4ed6\u4eec\u4ec0\u4e48\u90fd\u4e0d\u80fd\u544a\u8bc9\u6211\uff0c\u8981\u4e48\u4ed6\u4eec\u5728\u5bf9\u6211\u6492\u8c0e\uff0c\u8981\u4e48\u4ed6\u4eec\u4ece\u6765\u6ca1\u6709\u88ab\u4fe1\u4efb\u8fc7\u8981\u6253\u7834\u7684\u4e1c\u897f\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u4e0d\u77e5\u9053\u54ea\u4e2a\u66f4\u7cdf\u3002\u518d\u8bf4\u4e00\u6b21\uff0c\u5982\u679c\u4ed6\u4eec\u544a\u8bc9\u4f60\u4ed6\u4eec\u6709\u6cd5\u5f8b\u539f\u56e0\u4e0d\u80fd\u544a\u8bc9\u4f60\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u6743\u8861\u8fd9\u4e2a\u7b54\u6848\u3002\n\u6240\u4ee5\u6211\u60f3\u8fd9\u5c31\u8ba9\u6211\u4e3a\u6211\u4e0a\u9762\u7684\u9519\u8bef\u8d1f\u8d23\u4e86\u3002\u4e2d\u65ad\u662f\u7531\u624b\u52a8\u90e8\u7f72\u548c\u6253\u5f00\u7684RDP\u4f1a\u8bdd\u592a\u591a\u9020\u6210\u7684\u3002\u5728\u7a97\u53e3\u4e4b\u95f4\u79fb\u52a8\u5e76\u610f\u5916\u90e8\u7f72\u5230\u9519\u8bef\u7684\u670d\u52a1\u5668\u3002\u8be5\u95ee\u9898\u5df2\u901a\u8fc7\u56de\u6eda\u89e3\u51b3\uff0c\u6211\u4eec\u901a\u8fc7\u4e3a\u5c06\u6765\u81ea\u52a8\u90e8\u7f72\u6765\u963b\u6b62\u8be5\u95ee\u9898\u3002\u81f3\u4e8e\u6570\u636e\u5e93\uff0c\u5728\u5f00\u59cb\u5904\u7406\u7834\u574f\u6027\u7684\u4e1c\u897f\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5907\u4efd\u3002\u5373\u4f7f\u4f60\u8ba4\u4e3a\u662f\u6234\u592b\uff01", "note_en": "It puts people on the spot, makes them have to think for a minute about what I\u2019m looking for. Is this some sort of trap? Is he trying to find a reason to not hire me? Is the statute of limitations up for the thing I\u2019m thinking of? All of those are solid concerns, but I\u2019m not here to judge the mistake. I\u2019m here to judge how you resolved the issue. I\u2019m listening for the DevOps practice of Kaizen. Kaizen is the Japanese concept of practice and continuous improvement. And in DevOps that is learning from failure.\n Everybody has done something that seemed like huge problem at the time, and maybe it really was. I\u2019m sure you\u2019re all thinking of something right now you\u2019ve done. I remember the time I caused an outage to multiple state\u2019s DMVs, or that one time I accidentally dropped an entire production database because I thought I was in Dev. Oops.\n Now when I ask this question, I expect different answers depending on the level that I\u2019m hiring. Jr or entry level might not have anything professionally, so I\u2019ll ask for a personal story. And again, I give an example of spilling an entire can of paint on a hardwood floor or reassembling an engine only to struggle to find a purpose for this handful of nuts and bolts to the side. That car ran great for years after that in case you were worried.\n  Now if I\u2019m interviewing somebody coming in for a Sr or Architect position I expect something from their professional life. Now when you tell this story, I don\u2019t need specifics, unless you\u2019re comfortable with that. I know in my line of work that I sign NDAs from time to time. So they might not be able to disclose anything, so I\u2019ll try and get them to give a personal anecdote.\n  Honestly though, the story is just a bonus if they tell me something. But what I am looking for is if the problem got fixed. And better yet, do they know how it got fixed. I say how because I don\u2019t mind if they weren\u2019t the one who fixed it, but I hope if they broke it they took the time to figure out how it was fixed. Remember, this is about Kaizen and you can\u2019t improve if you don\u2019t know what you did. So this is when you should start taking your notes.\n  Now again, depending on the level you\u2019re interviewing for, the answers to all of these might be different. As an entry level or Jr interview I expect somebody else will have fixed the issue, but I hope that they can tell me why. Sr or higher probably fixed the mistake because they had the most knowledge of the issue. Or the had to pull the  andon cord and get other departments involved.\n If they know that the issue was resolved, but can\u2019t tell you how this can be a cause for concern. Do they not remember what it took, sure that could be. Especially if this was from years ago, we have all forgotten a lot between now and then. But if they say, I don\u2019t know, this other guy fixed it and I moved on. That is concerning, because it shows they probably didn\u2019t learn from their mistake and are likely to commit it again.\n  But what if you\u2019re not given any answer? The person claims they have never broken anything. Once again, Jr or lower they might not have broken anything. They haven\u2019t been given the chance yet to break anything. Sr or higher? This should be a super red flag. If they can\u2019t tell me anything, either they are lying to me or they have never been trusted with something to break. And honestly, I don\u2019t know which is worse. Once again, if they tell you that they have some legal reason they can\u2019t tell you then you have to weigh that answer.\n So I guess that leaves me to answer for my mistakes above. The outage was caused by a manual deployment and having too many RDP sessions open. Moving between windows and accidentally deploying to the wrong servers. The issue was resolved with roll back, and we stopped that issue by automating the deploy for the future. As for the database, always take a backup before you start to work on something destructive. Even if you think it\u2019s dev!", "posttime": "2020-05-05 18:39:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5931\u8d25,biggest,\u9519\u8bef,fixed", "title": "\u4f60\u662f\u4f60\u6700\u5927\u7684\u5931\u8d25", "title_en": "You are your biggest failure", "transed": 1, "url": "https://medium.com/devops-dudes/you-are-your-biggest-failure-48f3f389e97d", "via": "", "real_tags": ["\u5931\u8d25", "biggest", "\u9519\u8bef", "fixed"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000716, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u67d0\u4e9bWord\u529f\u80fd\u65e0\u6cd5\u5728Google Docs\u4e2d\u663e\u793a\uff0c\u5982\u679c\u60a8\u8fdb\u884c\u66f4\u6539\uff0c\u8fd9\u4e9b\u529f\u80fd\u5c06\u88ab\u5220\u9664", "note_en": "Some Word features can&#39;t be displayed in Google Docs and will be dropped if you make changes", "posttime": "2020-05-05 17:39:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coronavirus,\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,\u4e8c\u9636,consequences", "title": "\u51a0\u72b6\u75c5\u6bd2\u7684\u4e8c\u9636\u548c\u4e09\u9636\u540e\u679c", "title_en": "Second and third order consequences of coronavirus", "transed": 1, "url": "https://docs.google.com/document/d/17YkH4kc63t7JI7JJZR6i3-iebJd7kfRAzAK_ssl8bt4/edit?usp=sharing", "via": "", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "\u4e8c\u9636"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000715, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u6bcf\u4e00\u5929\uff0c\u201dParesh Raichura\u8bf4\uff0c\u201c\u6211\u90fd\u5728\u5bfb\u627e\u65b0\u7684\u8bfb\u7269\u3002\u201d\u5728\u524d\u5f80\u91d1\u4e1d\u96c0\u7801\u5934(Canary Wharf)\u7684\u4e00\u5c0f\u65f6\u901a\u52e4\u9014\u4e2d\uff0c\u4ed6\u62ff\u8d77\u4e86Time Out\u3001\u5f53\u5730\u62a5\u7eb8\u6216\u514d\u8d39\u62a5\u7eb8Metro\uff0c\u4f46\u4ed6\u8bf4\uff1a\u201c\u6211\u5df2\u7ecf\u4e0d\u518d\u8bfb\u6211\u8fc7\u53bb\u8bfb\u7684\u6240\u6709\u957f\u7bc7\u5c0f\u8bf4\u4e86\u3002\u201d\u91d1\u4e1d\u96c0\u7801\u5934\u662f\u4ed6\u4e3a\u91d1\u878d\u76d1\u5bdf\u5458\u5de5\u4f5c\u7684\u5730\u65b9\u3002\n\u4ed6\u8038\u8038\u80a9\u3002\u201c\u592a\u4e45\u4e86\u3002\u6ca1\u65f6\u95f4\u4e86\u3002\u4e00\u65e6\u5f00\u59cb\uff0c\u5c31\u505c\u4e0d\u4e0b\u6765\u4e86\u3002\u201c\u3002\n\u56e0\u6b64\uff0c\u4ed6\u5bf9\u5de5\u4f5c\u573a\u6240\u9644\u8fd1\u7684\u4e00\u9879\u65b0\u4e3e\u63aa\u611f\u5230\u9ad8\u5174\uff0c\u5728\u90a3\u91cc\uff0c\u53ea\u9700\u6309\u4e0b\u4e00\u4e2a\u6309\u94ae\uff0c\u4ed6\u5c31\u4f1a\u6536\u5230\u4e00\u5c0f\u6bb5\u5927\u5c0f\u7684\u77ed\u7bc7\u5c0f\u8bf4\uff0c\u6253\u5370\u5728\u4e00\u5f20\u957f\u5377\u7eb8\u4e0a\uff0c\u9605\u8bfb\u65f6\u95f4\u4e0d\u8d85\u8fc7\u51e0\u5206\u949f\u3002\n\u201c\u6211\u5f88\u5b88\u65e7\uff0c\u6211\u559c\u6b22\u62ff\u5728\u624b\u91cc\u7684\u4e1c\u897f\uff0c\u201d\u4ed6\u770b\u7740\u5377\u8f74\u8d5e\u8bb8\u5730\u8bf4\u3002\u4ed6\u6253\u5370\u4e86\u65b0\u7684\u5c0f\u8bf4\u81ea\u52a8\u552e\u8d27\u673a\u63d0\u4f9b\u76841\u5206\u949f\u30013\u5206\u949f\u548c5\u5206\u949f\u7684\u6545\u4e8b\uff0c\u201c\u53ea\u662f\u4e3a\u4e86\u6d4b\u8bd5\u4e00\u4e0b\u201d\u3002\n\u4e0d\u4f1a\u6709\u5f88\u591a\u4eba\u89c9\u5f97\u4ed6\u4eec\u9700\u8981\u66f4\u591a\u7684\u4e1c\u897f\u6765\u652f\u914d\u4ed6\u4eec\u7684\u65f6\u95f4\u548c\u6ce8\u610f\u529b\u3002\u4f46\u5bf9\u4e8e\u90a3\u4e9b\u786e\u5b9e\u611f\u5230\u5a31\u4e50\u4e0d\u8db3\u3001\u5206\u5fc3\u6216\u53d7\u5230\u653b\u51fb\u7684\u4eba\uff0c\u91d1\u4e1d\u96c0\u7801\u5934\u5e84\u56ed\u5728\u5546\u4e1a\u533a\u5468\u56f4\u7684\u8d2d\u7269\u4e2d\u5fc3\u548c\u7eff\u5730\u4e0a\u5b89\u88c5\u4e86\u4e09\u4e2a\u201c\u77ed\u7bc7\u5c0f\u8bf4\u7ad9\u201d\u3002\n\u4e66\u592a\u957f\u4e86\uff0c\u8fd9\u4e00\u53d1\u5c55\u901a\u8fc7\u89e3\u91ca\u7684\u65b9\u5f0f\u63d0\u4f9b\u4e86\u89e3\u91ca\uff0c\u5e76\u63f4\u5f15\u7814\u7a76\u79f0\uff0c\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u8d85\u8fc7\u4e09\u5206\u4e4b\u4e00\u7684\u82f1\u56fd\u4eba\u653e\u5f03\u4e86\u5c0f\u8bf4\u6216\u975e\u865a\u6784\u7c7b\u4f5c\u54c1\u3002\u6309\u7167\u903b\u8f91\uff0c\u7ed9\u6211\u4eec\u4e00\u4e2a\u6211\u4eec\u80fd\u5728\u54fc\u5531\u4e00\u9996\u6d41\u884c\u6b4c\u66f2\u7684\u65f6\u95f4\u91cc\u8bfb\u5230\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u53ef\u80fd\u771f\u7684\u80fd\u8bfb\u5230\u6700\u540e\u3002\n\u4ece\u672c\u5468\u6e05\u6668\u901a\u52e4\u8005\u7684\u53cd\u5e94\u6765\u5224\u65ad\uff0c\u4ed6\u4eec\u53ef\u80fd\u8bf4\u5bf9\u4e86-\u5c3d\u7ba1\u8fd9\u4e9b\u6545\u4e8b\u662f\u514d\u8d39\u7684\uff0c\u51e0\u79d2\u949f\u5c31\u80fd\u6253\u5370\u51fa\u6765\uff0c\u8fd9\u65e0\u7591\u662f\u6709\u5e2e\u52a9\u7684\u3002\n\u201c\u6211\u8ba4\u4e3a\u8fd9\u5f88\u9177--\u53ea\u662f\u4e3a\u4e86\u8ba9\u4eba\u4eec\u9605\u8bfb\uff0c\u201d\u5728\u6469\u6839\u5927\u901a(JP Morgan)\u8d22\u52a1\u90e8\u5de5\u4f5c\u3001\u5f80\u8fd4\u4e8e\u4f26\u6566\u5317\u90e8\u7684\u82ad\u6bd4\u5854\u00b7\u6bd4\u65af\u9a6c\u5c14(Babita Bismal)\u8bf4\u3002\n\u78b0\u5de7\u7684\u662f\uff0c\u6bd4\u65af\u9a6c\u5c14\u7684\u5305\u91cc\u6709\u8fd9\u4e24\u6837\u4e1c\u897f\uff0c\u51c6\u5907\u56de\u5bb6\u7684\u8def\u4e0a\u7528\u3002\u4f46\u662f\uff0c\u5979\u8bf4\uff1a\u201c\u6211\u6709\u5b69\u5b50\uff0c\u6211\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5bf9\u624b\u673a\u4e0a\u763e\u3002\u6211\u51e0\u4e4e\u662f\u5728\u9f13\u52b1\u4ed6\u4eec\u770b\u7535\u89c6\u3002\u201c\u3002\u5979\u5df2\u7ecf\u6253\u5370\u4e86\u4e00\u4e2a5\u5206\u949f\u7684\u6545\u4e8b-\u8482\u57c3\u91cc\u00b7\u79d1\u6c83\u7f57(Thierry Covolo)\u7684\u201c\u66b4\u98ce\u96e8\u4e2d\u7684\u706f\u5149\u201d(Light In The Storm)-\u7a0d\u540e\u5c06\u5728\u597912\u5c81\u548c17\u5c81\u7684\u5b69\u5b50\u8eab\u4e0a\u8bd5\u7528\u3002\n\u8fd9\u4e00\u89c2\u70b9\u5f97\u5230\u4e86\u5176\u4ed6\u901a\u52e4\u8005\u7684\u547c\u5e94\uff0c\u4ed6\u4eec\u8868\u793a\uff0c\u6709\u4e00\u4e9b\u4e1c\u897f\u53ef\u4ee5\u5206\u6563\u4ed6\u4eec\u5bf9\u624b\u673a\u7684\u6ce8\u610f\u529b\uff0c\u8fd9\u51e0\u4e4e\u8ba9\u4ed6\u4eec\u677e\u4e86\u4e00\u53e3\u6c14\u3002(\u91d1\u878d\u8f6f\u4ef6\u5f00\u53d1\u5546\u67e5\u7406\u00b7\u6000\u5c14\u5fb7(Charlie Wild)\u8868\u793a\uff1a\u201c\u6211\u786e\u5b9e\u540c\u610fInstagram\u6709\u70b9\u592a\u591a\uff0c\u800c\u6c83\u7279\u65af\u901a(Waterstone)\u4e0d\u591f\u7684\u8bf4\u6cd5\u3002\u201d)\u3002\n\u201c\u6211\u559c\u6b22\u770b\u4e66\uff0c\u201d\u524d\u53f0\u63a5\u5f85\u5458\u517c\u5b9e\u4e60\u7406\u53d1\u5e08\u5c71\u59c6\u00b7\u5170\u91d1\u8bf4\uff0c\u201c\u4f46\u5728\u4e00\u5f20\u7eb8\u4e0a\u6709\u4e00\u4e9b\u4e1c\u897f\uff0c\u4e00\u4e9b\u6709\u5f62\u7684\u4e1c\u897f\uff0c\u771f\u7684\u5f88\u597d\u3002\u201d\u8fd9\u4e9b\u5929\u6765\uff0c\u4e00\u5207\u90fd\u5728\u7535\u8bdd\u91cc\u3002\u201c\u3002\u5979\u6253\u5370\u4e86\u4e00\u4e2a\u4e00\u5206\u949f\u7684\u6545\u4e8b\uff0c\u8fd9\u662f\u5c0f\u8bf4\u5bb6\u5b89\u4e1c\u5c3c\u00b7\u970d\u6d1b\u7ef4\u8328(Anthony Horowitz)\u4e3a\u8be5\u9879\u76ee\u7279\u522b\u59d4\u6258\u7684\u4e00\u90e8(\u975e\u5e38)\u7b80\u77ed\u7684\u4fa6\u63a2\u5c0f\u8bf4\u201c\u7f57\u5bbe\u900a\u5148\u751f\u4e4b\u6b7b\u201d(The Death Of Robinson)\u3002\n\u5979\u4f1a\u5728\u56de\u5bb6\u7684\u8def\u4e0a\u770b\u5417\uff1f\u201c\u5b9e\u9645\u4e0a\u53ef\u80fd\u662f\u5728\u6211\u5348\u4f11\u7684\u65f6\u5019\u3002\u6211\u8fc7\u4e00\u4f1a\u513f\u518d\u6765\u62ff\u4e94\u5206\u949f\u7684\u3002\u7b49\u6211\u6709\u66f4\u591a\u7684\u65f6\u95f4\u518d\u770b\u3002\u201c", "note_en": "\u201cEvery single day,\u201d says Paresh Raichura, \u201cI\u2019m on the lookout for something new to read.\u201d On his hour-long commute to Canary Wharf, where he works for the Financial Ombudsman, he picks up  Time Out or a local paper or the freesheet Metro, but says: \u201cI\u2019ve stopped reading all the long novels I used to read.\u201d\n  He shrugs. \u201cToo long. Lack of time. Once you start, you can\u2019t stop.\u201d\n And so he is delighted by a new initiative close to his workplace where, at the push of a button, he is delivered a bitesize short story, printed on to a long spool of paper, that takes no more than a few minutes to read.\n \u201cI\u2019m old-fashioned, I like something to hold in my hands,\u201d he says approvingly, looking at the scrolls. He has printed off one each of the one-, three- and five-minute stories offered by the new fiction vending machine, \u201cjust to test them out\u201d.\n There can\u2019t be many people who feel they need more things to command their time and attention. But for those who do feel insufficiently entertained, distracted or assailed, the  Canary Wharf estate has installed three  \u201cshort story stations\u201d in the shopping malls and green spaces around the commercial district.\n Books are too long, the development offers by way of explanation, citing research that more than a third of Britons have abandoned a novel or nonfiction work in the past year. Give us a something that we can read in the time it takes to hum a pop song, goes the logic, and we might actually make it to the end.\n And to judge by the reaction of early morning commuters this week, they might be on to something \u2013 though the fact that the stories are free and print off in a few seconds undoubtedly helps.\n  \u201cI think it\u2019s cool \u2013 just to get people reading,\u201d says Babita Bismal, who works in the finance department at JP Morgan and commutes from north London.\n  As it happens, Bismal has both in her bag for her journey home. But, she says: \u201cI have children, and I can see them getting addicted to their phones. I\u2019m almost encouraging them to watch TV instead.\u201d She has printed off a five-minute story \u2013 Alight in the Storm by  Thierry Covolo \u2013 and will try it on her 12- and 17-year-olds later.\n  It is a sentiment echoed by other commuters, who express almost relief to have something to distract them from their handsets. (\u201cI do agree that there\u2019s a bit too much Instagram and not enough Waterstones,\u201d says Charlie Wild, a financial software developer.)\n \u201cI love reading,\u201d says Sam Rankin, a receptionist and trainee barber, \u201cbut it\u2019s so nice to have something on a piece of paper, something tangible. These days everything is on a phone.\u201d She has printed off a one-minute story, a (very) brief whodunnit called The Death of Mr Robinson that has been specially commissioned for the project from novelist  Anthony Horowitz.\n Will she read it on the way home? \u201cProbably on my lunchbreak actually. I\u2019ll come back to get a five-minute one later. To read when I get a bit more time.\u201d", "posttime": "2020-05-05 16:56:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u514d\u8d39,mac,\u77ed\u7bc7\u5c0f\u8bf4,short,\u4e1c\u897f", "title": "\u514d\u8d39\u77ed\u7bc7\u5c0f\u8bf4\u81ea\u52a8\u552e\u8d27\u673a\u8ba9\u901a\u52e4\u8005\u611f\u5230\u9ad8\u5174(2019\u5e74)", "title_en": "Free short story vending machines delight commuters (2019)", "transed": 1, "url": "https://www.theguardian.com/books/2019/apr/06/free-short-story-vending-machines-delight-commuters", "via": "", "real_tags": ["\u514d\u8d39", "mac", "\u77ed\u7bc7\u5c0f\u8bf4", "short", "\u4e1c\u897f"]}, {"category": "", "categoryclass": "", "imagename": "2ddcffbfc7cf94016ad34bb9886f99d7.png", "infoid": 1000714, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u5bf9\u4e00\u7684\u4f1a\u8bae\u975e\u5e38\u6709\u52a9\u4e8e\u56e2\u961f\u6210\u5458\u7684\u4e13\u4e1a\u548c\u4e2a\u4eba\u6210\u957f\u3002\n\u672c\u6307\u5357\u6db5\u76d6\u4e86\u60a8\u53ef\u80fd\u72af\u7684\u524d20\u4e2a\u5e38\u89c1\u9519\u8bef\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u5b83\u4eec\u3002", "note_en": "One-on-one meetings are great to support the professional and personal growth of team members.\n This guide covers the top 20 common mistakes you can make, and how to avoid them.", "posttime": "2020-05-05 16:56:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u907f\u514d,mistakes,\u56e2\u961f,covers", "title": "\u5e94\u907f\u514d\u7684\u4e00\u5bf9\u4e00\u9519\u8bef", "title_en": "One-on-One Mistakes to Avoid", "transed": 1, "url": "https://www.collard.app/one-on-one-mistakes", "via": "", "real_tags": ["\u907f\u514d", "mistakes", "\u56e2\u961f", "covers"]}, {"category": "", "categoryclass": "", "imagename": "3ead85a49479211865de95072dc9a580.jpg", "infoid": 1000713, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2007\u5e7411\u670816\u65e5\u738b\u6b4c\u5728\u65af\u5766\u798f\u5927\u5b66\u4eba\u673a\u4ea4\u4e92\u7814\u8ba8\u4f1a\u4e0a\u7684\u6f14\u8bb2(CS547)\u3002\u5728\u8fd9\u4e2a\u6f14\u8bb2\u7684\u7b2c\u4e00\u90e8\u5206\uff0cGE\u4ecb\u7ecd\u4e86\u2026\u2026", "note_en": "November 16, 2007 lecture by Ge Wang for the Stanford University Human-Computer Interaction Seminar (CS 547). In the first part of this talk, Ge presents the...", "posttime": "2020-05-05 16:53:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,\u5927\u5b66,programming language,\u7f16\u7a0b\u8bed\u8a00,computer", "title": "Chuck\uff1a\u4e00\u79cd\u8ba1\u7b97\u673a\u97f3\u4e50\u7f16\u7a0b\u8bed\u8a00(\u65af\u5766\u798f\u5927\u5b66\uff0c2007)", "title_en": "ChucK: A Computer Music Programming Language (Stanford University, 2007)", "transed": 1, "url": "https://www.youtube.com/watch?v=2rpk461T6l4", "via": "", "real_tags": ["\u7f16\u7a0b", "\u5927\u5b66", "language", "\u7f16\u7a0b\u8bed\u8a00", "computer"]}, {"category": "", "categoryclass": "", "imagename": "153b4fde87231fc3351ee941a316b79f.jpg", "infoid": 1000712, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Bjarne Stroustrup\u662fC++\u7684\u521b\u5efa\u8005\uff0cC++\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c40\u5e74\u540e\u4ecd\u7136\u662f\u4e16\u754c\u4e0a\u6700\u6d41\u884c\u548c\u529f\u80fd\u6700\u5f3a\u5927\u7684\u8bed\u8a00\u4e4b\u4e00\u3002\u5b83\u7684.\u3002", "note_en": "Bjarne Stroustrup is the creator of C++, a programming language that after 40 years is still one of the most popular and powerful languages in the world. Its...", "posttime": "2020-05-05 16:41:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,stroustrup,languages", "title": "Bjarne Stroustrup\uff1aC++[\u89c6\u9891]", "title_en": "Bjarne Stroustrup: C++ [video]", "transed": 1, "url": "https://www.youtube.com/watch?v=uTxRF5ag27A", "via": "", "real_tags": ["c++", "languages"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000711, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56de\u6536\u5546\u548c\u7ffb\u65b0\u5546\u5f00\u59cb\u62a5\u5e9f\u5c31\u5728\u4e24\u5e74\u524d\u8017\u8d443000\u7f8e\u5143\u7684\u8bbe\u5907\u3002", "note_en": "Recyclers and refurbishers are beginning to scrap devices that cost $3,000 just two years ago.", "posttime": "2020-05-05 16:27:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82af\u7247,app,mac,apple,\u82f9\u679c", "title": "\u82f9\u679cT2\u5b89\u5168\u82af\u7247\u7ed9MacBook\u7ffb\u65b0\u5546\u5e26\u6765\u5669\u68a6", "title_en": "Apple\u2019s T2 Security Chip Has Created a Nightmare for MacBook Refurbishers", "transed": 1, "url": "https://www.vice.com/en_us/article/akw558/apples-t2-security-chip-has-created-a-nightmare-for-macbook-refurbishers", "via": "", "real_tags": ["\u82af\u7247", "app", "mac", "apple", "\u82f9\u679c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000709, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PL/SQL\u662f\u5168\u7403\u6392\u540d\u524d\u4e8c\u5341\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002\u867d\u7136\u6211\u4e0d\u662fMatthew Symonds\u7684\u6210\u5458\uff0c\u8fd9\u4e5f\u4e0d\u662f\u4ec0\u4e48\u8f6f\u4ef6\uff0c\u4f46\u662fPL/SQL\u7684\u5386\u53f2\u6bd4\u201cOracle7\u62e5\u6709\u5148\u8fdb\u7684\u4f53\u7cfb\u7ed3\u6784\uff0c\u5e76\u4e14\u50cfSybase\u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7\u5176\u4f18\u96c5\u7684\u65b0PL/SQL\u7f16\u7a0b\u8bed\u8a00\u5b8c\u5168\u53ef\u7f16\u7a0b\u201d\u66f4\u6709\u4ef7\u503c\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u6211\u7684OOW/OCO\u4f1a\u8bae\u548c\u76f8\u5173\u7684\u535a\u5ba2\u7cfb\u5217\u201c\u63ed\u5f00PL/SQL\u7684\u795e\u79d8\u9762\u7eb1\uff1a\u7f16\u8bd1\u5355\u5143\u7684\u751f\u547d\u201d\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u60f3\u5305\u62ec\u4e00\u4e9b\u5386\u53f2\u7684\u539f\u56e0\u3002\n\u5f53\u6211\u7b2c\u4e00\u6b21\u5f00\u59cb\u5199\u8fd9\u6bb5\u5386\u53f2\u65f6\uff0c\u6211\u60f3\u6700\u591a\u53ea\u6709\u51e0\u6bb5\u3002\u7136\u800c\uff0c\u6211\u6316\u6398\u5f97\u8d8a\u6df1\uff0c\u4e0e\u6211\u4ea4\u8c08\u7684\u4eba\u8d8a\u591a\uff0c\u8fd9\u4e2a\u6545\u4e8b\u5c31\u53d8\u5f97\u8d8a\u6709\u8da3\u3002\u6709\u4e00\u6b21\uff0c\u6211\u51b3\u5b9a\u6211\u4e0d\u80fd\u628a\u6240\u6709\u8fd9\u6bb5\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u5386\u53f2\u7559\u5728\u526a\u8f91\u5ba4\u7684\u5730\u677f\u4e0a\u3002\n\u7531\u4e8e\u8fd9\u662f\u6211\u5199\u8fc7\u7684\u6700\u957f\u7684\u5e16\u5b50-\u800c\u4e14\u6211\u6709\u66f4\u591a\u7684\u5185\u5bb9\u53ef\u7528-\u6211\u6b63\u5728\u4e0e\u7532\u9aa8\u6587\u7684Aaron Lazenby\u5408\u4f5c(\u5e0c\u671b)\u5c06\u8fd9\u7bc7\u6587\u7ae0\u6269\u5c55\u4e3aOracle Connect\u7684\u534f\u4f5c\u591a\u90e8\u5206\u6587\u7ae0\u96c6\u3002\u56e0\u6b64\uff0c\u6b64\u6761\u76ee\u4ec5\u6db5\u76d6PL/SQL\u6765\u6e90\u7684\u5b50\u96c6\u3002\u867d\u7136\u8bb8\u591a\u539f\u59cb\u7684\u5e95\u5c42\u4ee3\u7801\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u8fd9\u7bc7\u6587\u7ae0\u5e76\u6ca1\u6709\u4ecb\u7ecd\u4f18\u5316\u7f16\u8bd1\u5668\u6539\u8fdb\u7684\u5386\u53f2\u3002\n\u5f7c\u5f97\u00b7\u514b\u83b1\u5c14\u7684\u804c\u4e1a\u751f\u6daf\u59cb\u4e8e1972\u5e74\u5728\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u6570\u636e\u516c\u53f8(CDC)\u3002\u867d\u7136CDC\u5df2\u4e0d\u590d\u5b58\u5728\uff0c\u4f46\u5728\u6574\u4e2a20\u4e16\u7eaa60\u5e74\u4ee3\u548c70\u5e74\u4ee3\uff0c\u5b83\u90fd\u662f\u7f8e\u56fd\u6700\u9876\u5c16\u7684\u5927\u578b\u673a\u548c\u8d85\u7ea7\u8ba1\u7b97\u673a\u516c\u53f8\u4e4b\u4e00\u3002\u5728\u8f6f\u4ef6\u65b9\u9762\uff0cCDC\u7684\u7f16\u8bd1\u5668\u4ea7\u54c1\u90e8\u6253\u9020\u4e86\u9996\u4e2a\u5546\u7528\u7684PASCAL\u7f16\u8bd1\u5668\u3002Peter\u5728\u8fd9\u4e2a\u90e8\u95e8\u7684\u89d2\u8272\u5305\u62ec\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u5f00\u53d1\uff0c\u4e13\u6ce8\u4e8e\u6784\u5efa\u4e16\u754c\u4e0a\u6700\u5feb\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\u5904\u7406\u5668\u3002\u5728\u4ed6\u516d\u5e74\u7684\u4efb\u671f\u5185\uff0cPeter\u4e0d\u4ec5\u6539\u8fdb\u4e86CDC\u7684\u7f16\u8bd1\u5668\uff0c\u8fd8\u5b66\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u6574\u4f53\u8bed\u8a00\u53d1\u5c55\u7684\u77e5\u8bc6\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4e86\u89e3\u4e86\u4e0e\u4e4b\u76f8\u5173\u7684\u5b9e\u9645\u95ee\u9898\u3002\u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u5f7c\u5f97\u79bb\u5f00\u4e86\u75be\u63a7\u4e2d\u5fc3\uff0c\u6210\u4e3a\u4e86\u4e00\u540d\u987e\u95ee\u3002\n\u51e0\u5e74\u540e\uff0c\u4e5f\u5c31\u662f1984\u5e74\uff0c\u5f7c\u5f97\u7ffb\u9605\u4e86\u5f53\u5730\u4e00\u5bb6\u65e7\u91d1\u5c71\u6e7e\u533a\u7684\u6280\u672f\u51fa\u7248\u7269\uff0c\u5bfb\u627e\u66f4\u591a\u4e0e\u54a8\u8be2\u76f8\u5173\u7684\u5de5\u4f5c\u3002\u8be5\u51fa\u7248\u7269\u4e2d\u5305\u542b\u7684\u662f\u4e00\u5219\u6765\u81ea\u7532\u9aa8\u6587\u7684\u5e7f\u544a\u3002\u901a\u8fc7\u5c0f\u9053\u6d88\u606f\uff0c\u5f7c\u5f97\u542c\u8bf4\u7532\u9aa8\u6587\u6b63\u5728\u5c06\u6570\u636e\u5e93\u79fb\u690d\u5230\u8bb8\u591a\u4e0d\u540c\u7684\u5e73\u53f0\u4e0a\uff0c\u5176\u4e2d\u4e00\u4e2a\u4ed6\u76f8\u5f53\u4e86\u89e3\u3002\u5f7c\u5f97\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u4e00\u4e9b\u5408\u540c\u5de5\u4f5c\u7684\u7edd\u4f73\u673a\u4f1a\uff0c\u4e8e\u662f\u7ed9\u7532\u9aa8\u6587\u6253\u4e86\u4e2a\u7535\u8bdd\u3002\u51e0\u5929\u540e\uff0c\u5f7c\u5f97\u4f1a\u89c1\u4e86\u4ed6\u7684\u9c8d\u52c3\u00b7\u7c73\u7eb3\u548c\u6bd4\u5c14\u00b7\u5f17\u83b1\u5fb7\u63a5\u53d7\u91c7\u8bbf\u3002\n\u6700\u521d\uff0c\u4e09\u4eba\u56de\u987e\u4e86\u5f7c\u5f97\u4e0e\u8fd0\u52a8\u76f8\u5173\u7684\u7ecf\u5386\u3002\u7531\u4e8e\u7532\u9aa8\u6587\u8fd8\u5728\u5f00\u53d1SQL\u548c\u9884\u7f16\u8bd1\u5668\uff0c\u4ee5\u53ca\u4e0eOracle\u6570\u636e\u5e93\u8fde\u63a5\u7684\u57fa\u4e8e\u8868\u5355\u7684\u754c\u9762\uff0c\u56e0\u6b64\u5c0f\u7ec4\u8fd8\u8ba8\u8bba\u4e86Peter\u5728\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u5f00\u53d1\u65b9\u9762\u7684\u80cc\u666f\u3002\u5728\u90a3\u6b21\u4f1a\u8bae\u7ed3\u675f\u65f6\uff0c\u9c8d\u52c3\u548c\u6bd4\u5c14\u8bf4\u670d\u5f7c\u5f97\u63a5\u53d7\u4e86\u4e00\u4efd\u5168\u804c\u5de5\u4f5c\uff1b\u5f7c\u5f97\u6210\u4e3a\u7532\u9aa8\u6587\u7684\u7b2c13\u4f4d\u5f00\u53d1\u4eba\u5458\u3002\nPeter\u4e0d\u662f\u5178\u578b\u7684Oracle\u5f00\u53d1\u4eba\u5458\u3002\u4ed6\u7684\u961f\u53cb\u5f62\u5bb9\u5f7c\u5f97\u662f\u4e00\u4f4d\u53cb\u597d\u3001\u968f\u548c\u3001\u80fd\u5e72\u3001\u80fd\u529b\u5f88\u5f3a\u7684\u5efa\u7b51\u5e08\uff0c\u4ed6\u4e0d\u4ec5\u4ee5\u806a\u660e\u8457\u79f0\uff0c\u800c\u4e14\u8fd8\u56e0\u4e3a\u4ed6\u5bf9\u6c34\u548c\u5e06\u677f\u8fd0\u52a8\u7684\u70ed\u7231\u800c\u95fb\u540d\uff0c\u4ed6\u51e0\u4e4e\u6bcf\u5929\u90fd\u8fd9\u6837\u505a\u3002\u5f7c\u5f97\u628a\u201c\u52aa\u529b\u5de5\u4f5c\uff0c\u52aa\u529b\u73a9\u800d\u201d\u8fd9\u53e5\u53e4\u8001\u7684\u5ea7\u53f3\u94ed\u653e\u5728\u5fc3\u4e0a\uff0c\u52aa\u529b\u5b9e\u73b0\u4ee4\u4eba\u6ee1\u610f\u7684\u5de5\u4f5c\u4e0e\u751f\u6d3b\u7684\u5e73\u8861-\u8fd9\u662f\u4ed6\u5728\u6574\u4e2a\u804c\u4e1a\u751f\u6daf\u4e2d\u78e8\u7ec3\u5f97\u5b8c\u7f8e\u7684\u3002\n\u5728\u7532\u9aa8\u6587\u7684\u5934\u516d\u4e2a\u6708\u91cc\uff0cPeter\u7684\u804c\u8d23\u66f4\u591a\u7684\u662f\u4e0e\u9879\u76ee\u7ba1\u7406\u76f8\u5173\u7684\uff0c\u800c\u4e0d\u662f\u6280\u672f\u4e0a\u7684\u3002Bob\u5e0c\u671b\u4e13\u6ce8\u4e8e\u5f00\u53d1\uff0c\u5e76\u4f9d\u8d56Peter\u6765\u7ba1\u7406\u65e5\u5e38\u9879\u76ee\u4efb\u52a1\u3002\u867d\u7136\u5f7c\u5f97\u559c\u6b22\u8fd9\u4efd\u5de5\u4f5c\uff0c\u4f46\u6c9f\u901a\u5374\u53d8\u5f97\u8d8a\u6765\u8d8a\u6709\u6311\u6218\u6027\u3002\u201c\u5230\u90a3\u65f6\uff0c\u9c8d\u52c3\u548c\u62c9\u91cc\u5df2\u7ecf\u5728\u4e00\u8d77\u5de5\u4f5c\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u201d\u5f7c\u5f97\u56de\u5fc6\u9053\uff0c\u201c\u5bf9\u4ed6\u4eec\u6765\u8bf4\uff0c\u76f4\u63a5\u4ea4\u6d41\u662f\u5f88\u81ea\u7136\u7684\uff0c\u4f5c\u4e3a\u4e2d\u95f4\u4eba\uff0c\u6ca1\u8fc7\u591a\u4e45\uff0c\u6bcf\u4e2a\u4eba\u90fd\u610f\u8bc6\u5230\u6211\u662f\u7b2c\u4e09\u8005\u3002\u201d\u4e3a\u4e86\u51cf\u5c11\u8fd9\u79cd\u6469\u64e6\uff0c\u6bcf\u4e2a\u4eba\u90fd\u8ba4\u4e3a\u5f7c\u5f97\u4e13\u6ce8\u4e8e\u6280\u672f\u5de5\u4f5c\u4f1a\u66f4\u597d\u3002\n\u8003\u8651\u5230\u4ed6\u5728\u7f16\u7a0b\u8bed\u8a00\u65b9\u9762\u7684\u80cc\u666f\uff0cPeter\u5f00\u59cb\u7814\u7a76Oracle\u7684\u9884\u7f16\u8bd1\u5668\u3002\u6ca1\u8fc7\u591a\u4e45\uff0c\u53e6\u4e00\u4e2a\u95ee\u9898\u5c31\u51fa\u73b0\u4e86\uff1a\u7ade\u4e89\u3002\n\u5728\u90a3\u4e9b\u65e5\u5b50\u91cc\uff0c\u51e0\u4e2a\u6570\u636e\u5e93\u4f9b\u5e94\u5546\u6709\u7b80\u5355\u7684\u6570\u636e\u89e6\u53d1\u5668\u3002\u540c\u6837\uff0c\u6570\u636e\u5e93\u6267\u884c\u8fc7\u7a0b\u51fd\u6570\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7528\u53e6\u4e00\u79cd\u8bed\u8a00\u7f16\u5199\u3001\u7f16\u8bd1\u548c\u7f16\u5199\u63a5\u53e3\u3002PL/SQL\u6700\u521d\u7684\u4ea7\u54c1\u7ecf\u7406Ken Rudin\u56de\u5fc6\u8bf4\uff1a\u201c\u7531\u4e8e\u8fd9\u4e9b\u65b9\u6cd5\u6709\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u800c\u4e0d\u662f\u5b9e\u73b0\u7c7b\u4f3c\u7684\u529f\u80fd\uff0cOracle\u5e0c\u671b\u8d85\u8d8a\u7ade\u4e89\u5bf9\u624b\uff0c\u5e76\u63d0\u4f9b\u6570\u636e\u5e93\u5185\u90e8\u7684\u5b8c\u6574\u8fc7\u7a0b\u7f16\u7a0b\u80fd\u529b\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u7532\u9aa8\u6587\u5f88\u65e9\u5c31\u610f\u8bc6\u5230\uff0c\u4e00\u81f4\u7684\u8fc7\u7a0b\u6027\u8bed\u8a00\u5c06\u5728\u591a\u79cd\u5de5\u5177\u4e2d\u53d7\u76ca\u3002\u201c\u3002\u8fd9\u79cd\u8bed\u8a00\u5c31\u662fPL/SQL\uff0c\u800c\u6700\u9002\u5408\u53d1\u660e\u5b83\u7684\u4eba\u662f\u5f7c\u5f97\u00b7\u514b\u83b1\u5c14(Peter Clare)\u3002\n\u4e3a\u4e86\u521b\u5efaPL/SQL\uff0cPeter\u4e0e\u7b2c\u4e00\u4f4d\u6b63\u5f0f\u7684PL/SQL\u5f00\u53d1\u4eba\u5458Kendall Jensen\u5bc6\u5207\u5408\u4f5c\u3002\u201cKendall\u662f\u5173\u952e\u4eba\u7269\uff0c\u201dPeter\u63d0\u5230\uff0c\u201c\u4ed6\u771f\u7684\u4e86\u89e3\u6784\u5efa\u73b0\u4ee3\u7f16\u8bd1\u5668\uff0c\u5e76\u4e14\u4e86\u89e3\u6240\u6709\u6700\u65b0\u7684\u5de5\u5177\u3002\u201d\u9996\u5148\uff0c\u5f7c\u5f97\u8981\u6c42\u80af\u5fb7\u5c14\u5c3d\u5176\u6240\u80fd\u5730\u5bfb\u627e\u6709\u5173Ada\u7f16\u7a0b\u8bed\u8a00\u7684\u4e00\u5207\u4fe1\u606f\u3002\n\u80af\u5fb7\u5c14\u7acb\u5373\u76f4\u5954\u65af\u5766\u798f\u56fe\u4e66\u9986\uff0c\u641c\u7d22\u4efb\u4f55\u53ef\u4ee5\u627e\u5230\u7684\u827e\u8fbe\u7814\u7a76\u8d44\u6599\u3002\u80af\u5fb7\u5c14\u6293\u8d77\u4ed6\u80fd\u62ff\u5230\u7684\u6bcf\u4e00\u672c\u4e66\uff0c\u56de\u5230\u7532\u9aa8\u6587\u529e\u516c\u5ba4\uff0c\u5f00\u59cb\u9605\u8bfb\u3002\u4ed6\u62ff\u8d77\u7684\u5176\u4e2d\u4e00\u672c\u4e66\u662f\u7531Gerhard Goos\u3001William A.Wulf\u3001Arthur Evans Jr.\u548cKenneth J.Butler\u51fa\u7248\u7684\u4e00\u672c\u540d\u4e3a\u201c\u6234\u5b89\u5a1c\uff1aAda\u7684\u4e2d\u95f4\u8bed\u8a00\u201d\u7684\u4e66\uff0c\u4f5c\u8005\u662fGerhard Goos\u3001William A.Wulf\u3001Arthur Evans Jr.\u548cKenneth J.Butler\u3002\u672c\u51fa\u7248\u7269\u4f5c\u4e3a\u53c2\u8003\u624b\u518c\u7f16\u5199\uff0c\u4e0d\u4ec5\u5305\u542bAda\u8bed\u8a00\u548c\u8bed\u6cd5\uff0c\u8fd8\u5305\u542bAda\u7684\u63cf\u8ff0\u6027\u4e2d\u95f4\u5c5e\u6027\u8868\u793a\u6cd5\u7684\u63a5\u53e3\u5b9a\u4e49\u8bed\u8a00(IDL)\u89c4\u8303-Ada\u662f\u5f53\u65f6\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684Ada\u548c\u4e2d\u95f4\u8868\u793a\u6cd5\u3002\u6709\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c1987\u5e741\u6708\uff0cPL/SQL\u7f16\u8bd1\u5668\u4ee3\u7801\u7684\u7b2c\u4e00\u884c\u5c31\u7f16\u5199\u5b8c\u6210\u4e86\u3002\nPL/SQL\u7f16\u8bd1\u5668\u4e00\u5f00\u59cb\u662f\u89c4\u8303\u7684\u9010\u5b57\u526f\u672c\u3002Kendall\u4f7f\u7528\u624b\u518c\u7684Ada\u8bed\u6cd5\u7f16\u5199\u4e86\u539f\u59cb\u7684\u57fa\u4e8eYACC\u7684\u89e3\u6790\u5668\uff0c\u5e76\u76f4\u63a5\u4ece\u8bed\u6cd5\u89c4\u5219\u64cd\u4f5c\u751f\u6210\u4e86\u4e00\u68f5Diana\u6811\u3002\u4e0e\u5176\u4ed6\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u4e0d\u540c\uff0c\u5176\u4ed6\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u751f\u6210\u4e00\u4e2a\u975e\u5e38\u62bd\u8c61\u7684\u8bed\u6cd5\u6811\uff0c\u7136\u540e\u5c06\u8be5\u6811\u7ffb\u8bd1\u6210\u4e2d\u95f4\u8bed\u8a00\uff0c\u800c\u8fd9\u79cd\u76f4\u63a5\u7684\u65b9\u6cd5\u5bf9\u4e8e\u7c7b\u4f3cAda\u7684\u8bed\u8a00\u5f88\u6709\u6548-\u7279\u522b\u662f\u5f53\u53c2\u8003\u624b\u518c\u4ee5\u4ea4\u9519\u7684\u65b9\u5f0f\u8868\u793aIDL\u548c\u8bed\u6cd5\u65f6\u3002\u4e3a\u4ec0\u4e48PL/SQL\u7684\u8bed\u6cd5\u548c\u529f\u80fd\u96c6\u6a21\u4effAda\uff1f\nAda\u572820\u4e16\u7eaa80\u5e74\u4ee3\u88ab\u8ba4\u4e3a\u662fPascal\u7684\u7ee7\u4efb\u8005\uff0c\u662f\u4e00\u79cd\u540e\u8d77\u4e4b\u79c0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5728\u7f8e\u56fd\u653f\u5e9c\u4e2d\u7279\u522b\u53d7\u6b22\u8fce\u3002\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e00\u70b9\uff0c\u4ee5\u53ca\u7532\u9aa8\u6587\u5f53\u65f6\u4e0e\u653f\u5e9c\u4f17\u6240\u5468\u77e5\u7684\u5de5\u4f5c\u5173\u7cfb\uff0c\u8bb8\u591a\u4eba\u8ba4\u4e3aAda\u88ab\u9009\u4e2d\u3002\u867d\u7136\u8fd9\u4e00\u65b9\u9762\u589e\u52a0\u4e86\u8bed\u8a00\u7684\u53ef\u4fe1\u5ea6\uff0c\u4f46\u5b83\u66f4\u591a\u7684\u662f\u4e00\u79cd\u5207\u9898\u7684\u597d\u5904\uff0c\u800c\u4e0d\u662f\u6545\u610f\u7684\u8bbe\u8ba1\u51b3\u5b9a\u3002\u5b9e\u9645\u4e0a\uff0c\u5f00\u53d1\u56e2\u961f\u5e0c\u671bPL/SQL\u6210\u4e3a\u4e00\u79cd\u66f4\u5f3a\u7c7b\u578b\u7684\u8bed\u8a00\u3002\u5728\u90a3\u4e9b\u65e5\u5b50\u91cc\uff0c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u662f\u5f3a\u7c7b\u578b\u7684\uff0cOracle\u4e0d\u60f3\u5728\u6570\u636e\u5e93\u4e2d\u63d0\u4f9b\u7f29\u51cf\u7684\u529f\u80fd\u3002\u5c3d\u7ba1\u5f00\u53d1\u4eba\u5458\u5728\u6570\u636e\u5e93\u548cPL/SQL\u5f15\u64ce\u4e4b\u95f4\u7684\u7c7b\u578b\u8f6c\u6362\u65b9\u9762\u505a\u51fa\u4e86\u8ba9\u6b65\uff0c\u4e00\u4e9b\u4eba\u540e\u6765\u5bf9\u6b64\u611f\u5230\u9057\u61be\uff0c\u4f46Ada\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u7b80\u5355\u3001\u5b89\u5168\u548c\u6a21\u5757\u5316\u7684\u8bed\u8a00\u3002\u540c\u6837\uff0cPL/I\u662fSQL\u548cAda\u7684\u57fa\u7840\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u5e76\u4f7fAda\u6210\u4e3a\u5efa\u6a21Oracle\u8fc7\u7a0b\u6027\u8bed\u8a00\u7684\u7406\u60f3\u4e4b\u9009\u3002\n\u6700\u7ec8\uff0c\u5f7c\u5f97\u548c\u80af\u5fb7\u5c14\u65e0\u6cd5\u72ec\u81ea\u5b8c\u6210\u66f4\u591a\u7684\u4efb\u52a1\u3002\u56e0\u6b64\uff0c\u66f4\u591a\u7684\u5f00\u53d1\u4eba\u5458\u52a0\u5165\u4e86\u56e2\u961f\u3002\u867d\u7136Kendall\u7ee7\u7eed\u62e5\u6709\u89e3\u6790\u5668\u548c\u6574\u4e2aPL/SQL\u8bed\u6cd5\uff0c\u8fd9\u662f\u4ed6\u559c\u6b22\u7684\uff0c\u4f46\u6bcf\u4e2a\u65b0\u5f00\u53d1\u4eba\u5458\u90fd\u4e13\u95e8\u7814\u7a76\u4e00\u4e2a\u7279\u5b9a\u7684\u7ec4\u4ef6\u3002\u7b2c\u4e00\u4e2a\u662f\u52b3\u4f26\u65af\u00b7\u4f11\u65af(Laurence Hughes)\uff0c\u4ed6\u505a\u4e86\u4e00\u4e9b\u6e05\u7406\u5de5\u4f5c\uff0c\u62ff\u8d77\u4e86\u5404\u79cd\u96f6\u788e\u7684\u4e1c\u897f\uff0c\u5f00\u59cb\u671d\u7740\u67d0\u79cd\u8868\u9762\u4e0a\u7684\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5411\u6784\u5efa\uff0c\u5e76\u5f00\u59cb\u76d1\u7763\u4ee3\u7801\u7684\u751f\u6210\u548c\u6267\u884c\u3002Pierre Dufour\u5f88\u5feb\u5c31\u52a0\u5165\u4e86\uff0c\u5728\u4e13\u6ce8\u4e8e\u66f4\u9ad8\u7684\u8bed\u4e49\u5c42\u4e4b\u524d\uff0c\u4ed6\u5bf9\u89e3\u6790\u5668\u505a\u4e86\u4e00\u4e9b\u6539\u8fdb\uff0c\u5e76\u6539\u8fdb\u4e86Diana\u6811\u7684\u6ce8\u91ca\u3002\u6700\u540e\u52a0\u5165\u7684\u662f\u683c\u96f7\u00b7\u514b\u6d1b\u65af\u66fc\u3002\nGray\u56de\u5fc6\u9053\uff1a\u201c\u5230\u6211\u6765\u5230\u7532\u9aa8\u6587\u7684\u65f6\u5019\uff0c\u8be5\u56e2\u961f\u5df2\u7ecf\u4e3a\u5176\u5e38\u7528\u7684\u63a7\u5236\u6d41\u547d\u4ee4\u548c\u6807\u91cf\u6570\u636e\u7c7b\u578b\u5b9e\u73b0\u4e86\u7f16\u8bd1\u5668\u548c\u89e3\u91ca\u5668\u3002\u201dPL/SQL\u7684\u53d1\u5c55\u6765\u5f97\u6b63\u662f\u65f6\u5019\uff0c\u56e0\u4e3a\u5b66\u672f\u754c\u5df2\u7ecf\u63a2\u7d22\u4e86\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u7684\u6982\u5ff5\uff0c\u4f46\u8fd8\u6ca1\u6709\u7528\u4e8e\u5546\u4e1a\u4ea7\u54c1\u7684\u811a\u672c\u8bed\u8a00\u3002Gray\u81f4\u529b\u4e8e\u8be5\u8bed\u8a00\u7684\u51e0\u4e2a\u65b9\u9762\uff0c\u4f8b\u5982\u6539\u8fdb\u5185\u5b58\u7ba1\u7406\uff0c\u4ee5\u53ca\u63a5\u7ba1Laurence\u5728\u9762\u5411\u5bf9\u8c61\u652f\u6301\u65b9\u9762\u7684\u6700\u521d\u5de5\u4f5c\u3002\u201cGray\u5bf9\u8bed\u8a00\u7684\u7406\u89e3\u662f\u6211\u6240\u8ba4\u8bc6\u7684\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u6bd4\u62df\u7684\uff0c\u201dPeter\u56de\u5fc6\u9053\uff0c\u201c\u4ed6\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u65b9\u9762\u6709\u4e30\u5bcc\u7684\u7ecf\u9a8c\uff0c\u5bf9\u6240\u6709\u4e0e\u4e4b\u76f8\u5173\u7684\u95ee\u9898\u90fd\u6709\u6e05\u6670\u7684\u7406\u89e3\u3002\u201d\u5f53\u591a\u4e2a\u5f00\u53d1\u4eba\u5458\u90fd\u5728\u5f00\u53d1PPL/SQL\u65f6\uff0c\u6709\u4e00\u4e2a\u4eba\u5728\u4e0e\u4e4b\u5408\u4f5c\uff1aJames Mallory\u3002\n1987\u5e74\uff0c\u8a79\u59c6\u65af\u5728\u65af\u5766\u798f\u5927\u5b66\u7684\u6691\u5047\u671f\u95f4\u5f00\u59cb\u4e86\u4ed6\u5728\u7532\u9aa8\u6587\u7684\u7b2c\u4e00\u6b21\u5de5\u4f5c\u3002\u4f5c\u4e3a\u4e0d\u5f00\u53d1\u8bed\u8a00\u672c\u8eab\u7684\u201c\u7b2c\u4e00\u4e2aPL/SQL\u7a0b\u5e8f\u5458\u201d\uff0c\u4ed6\u4e3aPL/SQLV1\u7f16\u5199\u4e86\u89c4\u8303\u7684\u201cHello World\u201d\u548c\u8d28\u91cf\u4fdd\u8bc1\u6d4b\u8bd5\u5957\u4ef6\u3002\u201c\u6211\u4eec\u7814\u7a76\u8fd9\u95e8\u8bed\u8a00\u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u201dPeter\u56de\u5fc6\u9053\uff0c\u201c\u5f53\u4f60\u81ea\u5df1\u6d4b\u8bd5\u4e00\u95e8\u8bed\u8a00\u65f6\uff0c\u4f60\u77e5\u9053\u8981\u907f\u514d\u7f16\u8bd1\u5668\u65e0\u6cd5\u5904\u7406\u7684\u67d0\u4e9b\u4e8b\u60c5\u3002\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u80fd\u6709\u4e00\u53cc\u65b0\u9c9c\u7684\u773c\u775b\u73a9\u5f04\u8fd9\u95e8\u8bed\u8a00\u662f\u5f88\u597d\u7684\u3002\u201c\u3002\n\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0cKendall\u7684\u8fdc\u89c1\u5353\u8bc6(\u9884\u5148\u5b9e\u73b0\u6574\u4e2a\u89c4\u8303\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u652f\u6301PL/SQLV1\u6240\u9700\u7684\u5b50\u96c6)\u589e\u5f3a\u4e86\u5728\u4ee5\u540e\u7684\u5f00\u53d1\u4e2d\u6dfb\u52a0\u9644\u52a0\u529f\u80fd\u7684\u80fd\u529b\u3002\u4f8b\u5982\uff0c\u867d\u7136PL/SQL V1\u53ea\u652f\u6301\u7b80\u5355\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u5728PL/SQL V2\u4e2d\u6dfb\u52a0\u5305\u4e3b\u8981\u9700\u8981\u6dfb\u52a0\u4ee3\u7801\u751f\u6210\u5668\u548c\u89e3\u91ca\u5668-\u5927\u591a\u6570\u89e3\u6790\u5668\u548cDIANA\u652f\u6301\u5df2\u7ecf\u5b58\u5728\u3002\u683c\u96f7\u8bb0\u5f97\uff0c\u201c\u80af\u5fb7\u5c14\u603b\u662f\u5bf9\u9879\u76ee\u4fdd\u6301\u4e00\u4e2a\u6e05\u6670\u7684\u6982\u8ff0\uff1b\u4ed6\u4ece\u4e0d\u8ff7\u5931\u5728\u6742\u8349\u4e1b\u751f\u7684\u6742\u8349\u4e2d\uff0c\u603b\u662f\u51b7\u9759\u5730\u770b\u5f85\u4f18\u5148\u4e8b\u9879\uff0c\u5e76\u4e14\u968f\u65f6\u53ef\u4ee5\u5e2e\u52a9\u89e3\u51b3\u68d8\u624b\u7684\u95ee\u9898\u3002\u201d\n\u8fd9\u4e00\u5207\u90fd\u662f\u5728\u9c8d\u52c3\u00b7\u7c73\u7eb3\u7684\u592a\u5e73\u6d0b\u9ad8\u5730\u5bb6\u5ead\u529e\u516c\u5ba4\u8fdb\u884c\u7684\u4e00\u7cfb\u5217\u8ba8\u8bba\u4e2d\u5f00\u59cb\u7684\u3002\u5728\u90a3\u91cc\uff0cBob\u3001Peter\u548cRoger Bamford\u4f1a\u9762\uff0c\u5c31\u5982\u4f55\u5411\u975eOracle\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u8f7b\u677e\u6269\u5c55\u6838\u5fc3\u670d\u52a1\u5668\u529f\u80fd\u7684\u80fd\u529b\u4ea4\u6362\u610f\u89c1\u3002\u201c\u4e0eRoger\u9762\u5bf9\u9762\u5730\u805a\u5728\u4e00\u8d77\u603b\u662f\u6709\u76ca\u7684\uff0c\u201dPeter\u56de\u5fc6\u9053\uff0c\u201c\u4ed6\u662f\u4e00\u4e2a\u975e\u5e38\u806a\u660e\u7684\u4eba-\u6211\u603b\u662f\u4ece\u4ed6\u90a3\u91cc\u5b66\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u6570\u636e\u5e93\u7684\u77e5\u8bc6\uff0c\u4ed6\u4e5f\u4ece\u6211\u90a3\u91cc\u5b66\u5230\u4e86\u5f88\u591a\u5173\u4e8ePL/SQL\u7684\u77e5\u8bc6\u3002\u201d\nPL/SQL\u5f15\u64ce\u7684\u4f53\u7cfb\u7ed3\u6784\u4f5c\u4e3aOracle\u4ea7\u54c1\u7684\u53ef\u5d4c\u5165\u7ec4\u4ef6\uff0c\u4e3aOracle\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4f18\u52bf\u3002\u9996\u5148\uff0c\u5f15\u64ce\u53ef\u4ee5\u4ece\u6570\u636e\u5e93\u672c\u8eab\u5185\u90e8\u6267\u884c\u670d\u52a1\u5668\u7aef\u3002\u5176\u6b21\uff0c\u5f15\u64ce\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u8fd0\u884c\uff0c\u5e76\u96c6\u6210\u5230\u5176\u4ed6Oracle\u4ea7\u54c1(\u4f8b\u5982SQL*Forms)\u4e2d\u3002\u6700\u540e\uff0c\u5f15\u64ce\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u5ba2\u6237\u7aef\u65b9\u5f0f\u6267\u884c\uff0c\u4f46\u66f4\u52a0\u72ec\u7acb\uff0c\u56e0\u4e3a\u5b83\u5728TimesTen\u4e2d\u63d0\u4f9bPL/SQL\u652f\u6301\u3002\n\u867d\u7136\u670d\u52a1\u5668\u7aefPL/SQL\u662f\u5927\u591a\u6570\u4eba\u719f\u6089\u7684\u5f62\u5f0f\uff0c\u4f46\u5b83\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u624d\u80fd\u5f00\u59cb\u5de5\u4f5c\u3002\u201c\u8ba9PL/SQL\u5728\u670d\u52a1\u5668\u7aef\u8fd0\u884c\u662f\u4e00\u573a\u5669\u68a6\uff0c\u201dPierre\u56de\u5fc6\u8bf4\uff0c\u201c\u6700\u521d\uff0c\u5b83\u9002\u5408\u6570\u636e\u5e93\uff0c\u5c31\u50cf\u68af\u5f62\u7684\u5706\u5f62\u9489\u5b50\u4e00\u6837\u3002\u201dPeter\u8fd8\u8bb0\u5f97\uff0c\u201c\u5c06PL/SQL\u653e\u5165V7\u6570\u636e\u5e93\u6709\u70b9\u50cf\u662f\u4e00\u9879\u9ed1\u5ba2\u5de5\u4f5c\uff0c\u4f46\u8fd9\u662f\u4e00\u9879\u5fc5\u8981\u7684\u9ed1\u5ba2\u5de5\u4f5c\u3002\u201d\u201c\u7b2c\u4e00\u6b21\u524a\u51cf\u662f\u6709\u76ca\u7684\uff0c\u201dPeter\u7ee7\u7eed\u8bf4\uff0c\u201c\u56e0\u4e3a\u6570\u636e\u5e93\u56e2\u961f\u4ece\u6211\u4eec\u90a3\u91cc\u5b66\u5230\u4e86\u5f88\u591a\uff0c\u6211\u4eec\u4e5f\u4ece\u4ed6\u4eec\u90a3\u91cc\u5b66\u5230\u4e86\u5f88\u591a\u3002\u8fd9\u662f\u6bcf\u4e2a\u56e2\u961f\u7b2c\u4e00\u6b21\u770b\u5230\u53e6\u4e00\u4e2a\u56e2\u961f\u9762\u4e34\u7684\u95ee\u9898\u3002\u201c\u3002\n\u4ece\u5ba2\u6237\u7aef\u7684\u89d2\u5ea6\u6765\u770b\uff0cPL/SQL\u5f15\u64ce\u4e0d\u4ec5\u53ef\u4ee5\u5728\u8868\u5355\u4e2d\u4f7f\u7528\uff0c\u8fd8\u53ef\u4ee5\u5728\u51e0\u4e2a\u81ea\u5b9a\u4e49\u5782\u76f4\u5de5\u5177\u4e2d\u4f7f\u7528\u3002Gray\u56de\u5fc6\u8bf4\uff0c\u201c\u6211\u4eec\u4e0eOracle\u5ba2\u6237\u7aef\u4ea7\u54c1\u7684\u8bbe\u8ba1\u4eba\u5458\u8fdb\u884c\u4e86\u7d27\u5f20\u7684\u4f1a\u8bae\uff0c\u6211\u4eec\u8bd5\u56fe\u5c55\u793a\u4ed6\u4eec\u5982\u4f55\u901a\u8fc7\u4f7f\u7528\u4f5c\u7528\u57df\u800c\u4e0d\u662f\u540d\u79f0\u7a7a\u95f4\u5728PL/SQL\u4e2d\u5bf9\u5176\u5e94\u7528\u7a0b\u5e8f\u7684\u8bed\u4e49\u8fdb\u884c\u5efa\u6a21\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6ca1\u6709\u540d\u5b57\u8d44\u683c\uff0c\u8fd9\u5e76\u4e0d\u603b\u662f\u53ef\u80fd\u7684\uff0c\u4e00\u4e9b\u8bbe\u8ba1\u5e08\u8ba4\u4e3a\u8fd9\u5f88\u5c34\u5c2c\u3002\n\u5c3d\u7ba1PL/SQL\u5f15\u64ce\u4f9d\u8d56\u4e8e\u4e0eOracle\u6570\u636e\u5e93\u5171\u4eab\u7684\u5927\u91cf\u5e95\u5c42\u5e73\u53f0\u652f\u6301\u548c\u5185\u5b58\u7ba1\u7406\u4ee3\u7801\uff0c\u4f46\u662fPL/SQL\u5f15\u64ce\u5411\u5e95\u5c42\u6570\u636e\u5e93\u5c55\u793a\u4e86\u4e00\u4e2a\u975e\u5e38\u62bd\u8c61\u7684\u6e38\u6807\u63a5\u53e3\u3002\u201c\u6211\u4eec\u7528\u6765\u5c06\u6570\u636e\u5e93\u4e0ePL/SQL\u5206\u5f00\u7684\u6e38\u6807\u63a5\u53e3\u662f\u6700\u6574\u6d01\u7684\u90e8\u5206\u4e4b\u4e00\uff0c\u201dKendall\u56de\u5fc6\u9053\u3002\u5728Oracle\u4e2d\uff0cPL/SQL\u6e38\u6807\u63a5\u53e3\u6620\u5c04\u5230\u6570\u636e\u5e93\u5185\u6838\u67e5\u8be2\u5c42\uff0c\u800c\u5728TimesTen\u4e2d\uff0c\u5b83\u662f\u4e0eTimesTen\u5f15\u64ce\u5b8c\u5168\u72ec\u7acb\u7684\u8fde\u63a5\u3002\n\u57281989\u5e74\u672b\u62161990\u5e74\u521d\uff0c\u7532\u9aa8\u6587\u5df2\u7ecf\u6709\u4e86\u76f8\u5f53\u5927\u7684\u53d1\u5c55\u3002\u56e0\u6b64\uff0c\u51fa\u73b0\u4e86\u5c06\u591a\u4e2a\u5f00\u53d1\u56e2\u961f\u5408\u5e76\u4e3a\u66f4\u5927\u7684\u56e2\u961f\u7684\u60c5\u51b5\u3002PL/SQL\u56e2\u961f\u4e5f\u4e0d\u4f8b\u5916\uff0c\u9884\u7f16\u8bd1\u7ec4\u7684\u5176\u4ed6\u51e0\u540d\u6210\u5458\u4e5f\u52a0\u5165\u4e86PL/SQL\u5f00\u53d1\u3002\u8003\u8651\u5230\u5f00\u53d1\u4eba\u5458\u6280\u80fd\u7684\u76f8\u4f3c\u6027\uff0c\u8fd9\u79cd\u91cd\u7ec4\u5bf9Oracle\u6709\u5229\uff0c\u5e76\u7acb\u5373\u6539\u8fdb\u4e86PL/SQL\u3002\u503c\u5f97\u6ce8\u610f\u7684\u7acb\u7aff\u89c1\u5f71\u7684\u6539\u8fdb\u662f\u7279\u91cc\u548c\u6770\u5f17\u91cc\u00b7\u5965\u5c14\u91d1\u7684\u5de5\u4f5c\u6210\u679c\uff1b\u8fd9\u5bf9\u5144\u5f1f\u4eb2\u5207\u5730\u88ab\u79f0\u4e3a\u201c\u795e\u5947\u53cc\u80de\u80ce\u201d\u3002\nPierre\u56de\u5fc6\u8bf4\uff1a\u201cTerry\u975e\u5e38\u5e78\u8fd0\uff0c\u4ed6\u62e5\u6709\u6211\u4eec\u7684YACC\u6280\u672f\uff0c\u8be5\u6280\u672f\u662fPL/SQL\u548c\u9884\u7f16\u8bd1\u5668\u7684\u57fa\u7840\u3002\u201dTerry\u4e00\u76f4\u5bf9\u7f16\u7a0b\u8bed\u8a00\u5145\u6ee1\u70ed\u60c5\u3002\u7279\u91cc\u8bf4\uff1a\u201c\u6784\u5efa\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5141\u8bb8\u7528\u6237\u5728\u9ad8\u5c42\u6b21\u4e0a\u6307\u5b9a\u8ba1\u7b97\u673a\u5e94\u8be5\u505a\u4ec0\u4e48\uff0c\u5e76\u5c06\u8fd9\u79cd\u613f\u671b\u8f6c\u5316\u4e3a\u8ba1\u7b97\u673a\u80fd\u591f\u7406\u89e3\u548c\u6267\u884c\u7684\u4e1c\u897f\uff0c\u5728\u6211\u770b\u6765\u4e00\u76f4\u90fd\u6709\u4e9b\u795e\u5947\u3002\u201d\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u52a0\u5165PL/SQL\u5f00\u53d1\u4e4b\u524d\uff0c\u4ed6\u82b1\u4e86\u51e0\u5e74\u65f6\u95f4\u6539\u8fdbOracle\u7684\u9884\u7f16\u8bd1\u5668\u3002\u5728\u6b64\u671f\u95f4\uff0c\u9664\u4e86\u8bb8\u591a\u5176\u4ed6\u4e8b\u60c5\u5916\uff0cTerry\u8fd8\u5bf9SQLLIB(\u6240\u6709Oracle\u9884\u7f16\u8bd1\u5668\u90fd\u4e3a\u5176\u751f\u6210\u4ee3\u7801\u7684\u5e95\u5c42\u5171\u4eab\u5e93)\u8fdb\u884c\u4e86\u91cd\u5927\u6539\u8fdb\uff0c\u5e76\u521b\u5efa\u4e86SLAX\uff0c\u8fd9\u662fPL/SQL\u81f3\u4eca\u4ecd\u4f9d\u8d56\u7684\u8bed\u6cd5\u5206\u6790\u5668\u751f\u6210\u5668\u3002\u4f46\u662f\uff0cSLAX\u4e0d\u662f\u4e3aPL/SQL\u521b\u5efa\u7684\u3002\n\u572820\u4e16\u7eaa80\u5e74\u4ee3\uff0cOracle\u652f\u6301\u5c06SQL\u9884\u7f16\u8bd1\u5668\u7528\u4e8eAda\u3001C/C++\u3001COBOL\u3001FORTRAN\u3001PASCAL\u548cPPL/I\u7b49\u5bbf\u4e3b\u7f16\u7a0b\u8bed\u8a00\u3002\u5f53\u65f6\uff0c\u6bcf\u4e2a\u9884\u7f16\u8bd1\u5668\u90fd\u4f7f\u7528\u624b\u5199\u89e3\u6790\u5668-\u8fd9\u4f7f\u5f97\u8ddf\u8e2a\u6bcf\u4e2a\u9884\u7f16\u8bd1\u5668\u652f\u6301\u54ea\u4e9b\u529f\u80fd\u53d8\u5f97\u56f0\u96be\u3002\u6216\u8005\uff0c\u901a\u8fc7\u4f7f\u7528\u89e3\u6790\u5668\u751f\u6210\u5668\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u6307\u5b9a\u5bbf\u4e3b\u8bed\u8a00\u7684\u8bed\u6cd5\u5e76\u751f\u6210\u7528\u4e8e\u89e3\u6790\u5b83\u7684\u4ee3\u7801\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u867d\u7136\u8fd9\u4f7f\u5f97\u5b9a\u4e49\u9884\u7f16\u8bd1\u5668(\u901a\u8fc7exec SQL)\u548c\u5bbf\u4e3b\u8bed\u8a00\u652f\u6301\u7684\u5d4c\u5165\u5f0fSQL\u7684\u8bed\u6cd5\u53d8\u5f97\u5f88\u5bb9\u6613\uff0c\u4f46\u662f\u540c\u65f6\u89e3\u6790\u4e24\u8005\u662f\u6709\u95ee\u9898\u7684\u3002\n\u5728\u8bed\u8a00\u5206\u6790\u4e2d\uff0c\u5b64\u5c9b\u6587\u6cd5\u662f\u4e00\u79cd\u5305\u542b\u5728\u53e6\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\u8bed\u6cd5\u3002\u5b58\u50a8\u5728\u5bbf\u4e3b\u8bed\u8a00(C\u3001COBOL\u7b49)\u4e2d\u7684\u5d4c\u5165\u5f0fSQL\u88ab\u8ba4\u4e3a\u662f\u5b64\u5c9b\u8bed\u6cd5\u3002YACC\u662f\u5f53\u65f6\u5353\u8d8a\u7684\u89e3\u6790\u5668\u751f\u6210\u5668\uff0c\u5b83\u6ca1\u6709(\u73b0\u5728\u4ecd\u7136\u6ca1\u6709)\u771f\u6b63\u652f\u6301\u5b64\u5c9b\u8bed\u6cd5\u3002\u8ba9YACC\u89e3\u6790\u5b64\u5c9b\u8bed\u6cd5\u662f\u5f88\u75db\u82e6\u7684\u3002\n\u4ece\u6280\u672f\u89d2\u5ea6\u770b\uff0c\u8981\u4f7fYACC\u5728\u540c\u4e00\u89e3\u6790\u5668\u4e2d\u7684\u591a\u4e2a\u8bed\u6cd5\u4e4b\u95f4\u5207\u6362\uff0c\u5fc5\u987b\u6307\u5b9a\u7528\u6237\u770b\u4e0d\u89c1\u7684\u7279\u5b9a\u8bed\u6cd5\u7b26\u53f7\u3002\u7136\u540e\uff0c\u89e3\u6790\u5668\u548c\u8bcd\u6cd5\u5206\u6790\u5668\u5fc5\u987b\u56f4\u7ed5\u8981\u6807\u8bb0\u5316\u7684\u8bed\u8a00\u548c\u8981\u89e3\u6790\u7684\u8bed\u8a00\u76f8\u4e92\u901a\u4fe1\u3002\u5f53\u8bcd\u6cd5\u5206\u6790\u5668\u8bc6\u522b\u5230\u5b64\u5c9b\u8bed\u6cd5\u65f6\uff0c\u5b83\u4f1a\u5207\u6362\u72b6\u6001\u5e76\u5fc5\u987b\u6ce8\u5165\u6b64\u7279\u5b9a\u7b26\u53f7\uff0c\u4ee5\u4fbfYACC\u53ef\u4ee5\u9009\u62e9\u6b63\u786e\u7684\u5b64\u5c9b\u8bed\u6cd5\u89c4\u5219(\u800c\u4e0d\u662f\u5bbf\u4e3b\u8bed\u8a00\u89c4\u5219)\u3002\u540c\u6837\uff0c\u5f53YACC\u8ba4\u4e3a\u5b83\u5df2\u7ecf\u89e3\u6790\u4e86\u5b64\u5c9b\u8bed\u6cd5\u65f6\uff0c\u5b83\u5fc5\u987b\u901a\u77e5\u8bcd\u6cd5\u5206\u6790\u5668\u5b83\u5e94\u8be5\u5c06\u5176\u72b6\u6001\u5207\u6362\u56de\u5bbf\u4e3b\u8bed\u8a00\u3002\u5c3d\u7ba1YACC\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u6240\u6709\u65b9\u6cd5\u90fd\u540c\u6837\u75db\u82e6\u3002\u7531\u4e8e\u9884\u7f16\u8bd1\u7ec4\u9700\u8981\u80fd\u591f\u5728\u591a\u4e2a\u5bbf\u4e3b\u8bed\u8a00\u4e2d\u96c6\u6210\u76f8\u540c\u7684\u5d4c\u5165\u5f0fSQL\u89e3\u6790\u5668\uff0c\u56e0\u6b64\u4ed6\u4eec\u9700\u8981\u4e00\u79cd\u5de5\u5177\u6765\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u8f93\u5165SLAX\u3002\nSLAX\u7684\u53d1\u97f3\u662fslack\uff0c\u5b83\u662f\u4e00\u4e2a\u5185\u90e8\u89e3\u6790\u5668\u751f\u6210\u5668\uff0c\u57fa\u672c\u4e0a\u4e0eYACC\u517c\u5bb9\u3002\u867d\u7136\u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u7f29\u5199\uff0c\u4f46\u5176\u5b9e\u4e0d\u7136\u3002SLAX\u4ee3\u8868\u5206\u6bb5\u8bed\u8a00YACC\u3002\u6ca1\u9519\uff0cSLAX\u4e2dX\u7684\u6b63\u786e\u53d1\u97f3\u662fK\u3002\u867d\u7136SLAX\u6ca1\u6709\u4e0eYACC\u5171\u4eab\u4ee3\u7801\uff0c\u4f46\u5f53\u4ed6\u7ed9\u5b83\u547d\u540d\u65f6\uff0cTerry\u51b3\u5b9a\u606d\u656c\u5730\u5411YACC\u81f4\u656c\u3002\u50cf\u5927\u591a\u6570\u5de5\u5177\u4e00\u6837\uff0c\u5b83\u505a\u5f97\u5f88\u597d\u3002\u7136\u800c\uff0c\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0cSLAX\u9700\u8981\u4fee\u6539\uff0c\u5e76\u6700\u7ec8\u88ab\u91cd\u5199\u3002\u7ea6\u7ff0\u00b7\u897f\u660e\u65af\u57fa\u7528\u7279\u91cc\u6240\u8bf4\u7684\u201c\u6b63\u786e\u7684\u65b9\u5f0f\u201d\u8fdb\u884c\u4e86\u91cd\u5199\u3002SLAX\u5df2\u7ecf\u662f\u4e00\u4e2a\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u5de5\u5177\uff0c\u5b83\u662fPL/SQL\u89e3\u6790\u5668\u4f7f\u7528YACC\u7684\u5929\u7136\u66ff\u4ee3\u54c1\u3002Terry\u57281990\u5e74\u7684\u67d0\u4e2a\u65f6\u5019\u5f00\u59cb\u7814\u7a76PL/SQL\u65f6\uff0c\u5c06PL/SQL\u4eceYACC\u8f6c\u6362\u5230\u4e86SLAX\uff0c\u4e4b\u540e\u6539\u8fdb\u4e86\u5e95\u5c42\u89e3\u6790\u5668\u672c\u8eab\u3002\n\u5728\u6b64\u671f\u95f4\uff0c\u7279\u91cc\u628a\u4ed6\u7684\u5f1f\u5f1f\u6770\u5f17\u91cc\u5e26\u4e0a\u4e86\u8239\u3002\u4e0e\u4eab\u53d7\u524d\u7aef\u7f16\u8bd1\u5668\u5de5\u4f5c\u7684Terry\u4e0d\u540c\uff0cJeffrey\u66f4\u559c\u6b22\u540e\u7aef\uff1a\u5177\u4f53\u5730\u8bf4\uff0c\u5c31\u662f\u4ee3\u7801\u751f\u6210\u548c\u6267\u884c\u3002\u201c\u6770\u5f17\u91cc\u662f\u975e\u51e1\u7684\uff0c\u201d\u5f7c\u5f97\u8bf4\u3002\n\u6700\u521d\uff0cPL/SQL\u5f00\u53d1\u7684\u91cd\u70b9\u662f\u8bed\u8a00\u672c\u8eab\uff0c\u6027\u80fd\u4e0d\u662f\u5173\u952e\u56e0\u7d20\u3002\u4f46\u662f\uff0c\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u5ba2\u6237\u5f00\u59cb\u4f7f\u7528PL/SQL\uff0c\u6027\u80fd\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\u4e3b\u8981\u7684\u6027\u80fd\u74f6\u9888\u662f\u7b2c\u4e00\u4e2a\u7248\u672c\u7684PL/SQL\u865a\u62df\u673a\u7a0b\u5e8f(\u201cVM\u201d)\uff0c\u5b83\u662f\u4e00\u4e2a\u57fa\u4e8e\u5806\u6808\u7684\u5b57\u8282\u7801\u89e3\u91ca\u5668\uff0c\u7c7b\u4f3c\u4e8e\u5f53\u65f6\u7684\u6807\u51c6PASCAL\u5b57\u8282\u7801(p-code)\u89e3\u91ca\u5668\u3002\n\u5728\u57fa\u4e8e\u5806\u6808\u7684\u865a\u62df\u673a\u4e2d\uff0c\u8868\u8fbe\u5f0f\u64cd\u4f5c\u6570\u88ab\u63a8\u9001\u5230\u5806\u6808\u4e0a\uff0c\u7136\u540e\u5728\u9700\u8981\u8ba1\u7b97\u65f6\u5f39\u51fa\u3002\u5bf9\u4e8e\u5f53\u65f6\u7684\u673a\u5668\u6765\u8bf4\uff0c\u8fd9\u592a\u6162\u4e86\u3002\u5728\u8f6f\u4ef6\u4e2d\u89e3\u91ca\u6bcf\u4e2a\u5b57\u8282\u7801\u6307\u4ee4\u7684\u5f00\u9500\u662f\u76f8\u5f53\u5927\u7684\uff1b\u4e00\u4e2a\u7b80\u5355\u7684\u8ba1\u7b97\u53ef\u80fd\u9700\u8981\u51e0\u5341\u6761\u6307\u4ee4\uff0c\u800c\u6267\u884c\u4e2d\u82b1\u8d39\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u5728\u4e86\u8fd9\u4e2a\u5f00\u9500\u4e0a\u3002\n\u5728Ada\u4e2d\uff0c\u8fd9\u66f4\u7cdf\u7cd5\uff0c\u56e0\u4e3a\u64cd\u4f5c\u6570\u53ef\u4ee5\u5f15\u7528\u591a\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u8de8\u591a\u4e2a\u8f6f\u4ef6\u5305\u5f15\u7528\u53d8\u91cf\u3002\u56e0\u6b64\uff0cJeffrey\u9996\u5148\u91cd\u5199\u4e86\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5e76\u4e3a\u64cd\u4f5c\u6570\u521b\u5efa\u4e86\u4e00\u79cd\u201c\u8ff7\u4f60\u89e3\u91ca\u5668\u201d\uff0c\u8fd9\u6837\uff0c\u65e0\u8bba\u64cd\u4f5c\u6570\u7684\u5730\u5740\u591a\u4e48\u590d\u6742\uff0c\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5355\u5b57\u8282\u7801\u6307\u4ee4\u7684\u4e00\u90e8\u5206\u6765\u68c0\u7d22\u64cd\u4f5c\u6570\u3002\u8fd9\u4e00\u6539\u53d8\u5927\u5927\u964d\u4f4e\u4e86\u6307\u4ee4\u89e3\u7801\u7684\u5f00\u9500\uff0c\u5e76\u4f7f\u5927\u578bPL/SQL\u7a0b\u5e8f\u66f4\u52a0\u53ef\u884c\u3002\u80af\u5fb7\u5c14\u56de\u5fc6\u8bf4\uff0c\u5173\u4e8e\u8fd9\u4e00\u6539\u8fdb\uff0c\u201c\u6211\u8bb0\u5f97\u6211\u770b\u5230\u8fc7\u5b83\u3002\u8fd9\u662f\u4e00\u6bb5\u7cbe\u5f69\u800c\u7f8e\u4e3d\u7684\u4ee3\u7801--\u771f\u7684\u5f88\u4f18\u96c5\u3002\u201c\u30021990\u5e74\u91cd\u65b0\u52a0\u5165\u7532\u9aa8\u6587\u7684James\u4e5f\u63d0\u5230\u4e86\u65b0\u865a\u62df\u673a\u7684\u6548\u7387\u6709\u591a\u9ad8\u3002\n\u6700\u7ec8\uff0c\u4ece\u6700\u521d\u7684\u65e5\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5c06\u4ecePL/SQL\u8f6c\u5411-\u8981\u4e48\u79bb\u5f00Oracle\uff0c\u8981\u4e48\u8f6c\u5230\u5176\u4ed6\u9879\u76ee\u3002Gray Clossman\u63a5\u7740\u5728\u7532\u9aa8\u6587\u6784\u5efa\u4e86\u5176\u4ed6\u4e0e\u8bed\u8a00\u76f8\u5173\u7684\u529f\u80fd\uff0c\u4f8b\u5982SSQLJ\u3002Pierre Dufour\u8f6c\u5230\u4e86\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7aef\uff0c\u5728\u90a3\u91cc\u4ed6\u4ece\u4e8bCRM\u5de5\u4f5c\uff0c\u5e76\u6784\u5efa\u4e86\u4e00\u4e2a\u4ec5\u9650\u5185\u90e8\u7684PL/SQL\u7f16\u8bd1\u5668Rosetta\uff0c\u8fd9\u4f7f\u5f97\u5728Java\u548cPL/SQL\u4e4b\u95f4\u65e0\u9700\u4fee\u6539\u5c31\u53ef\u4ee5\u8fdb\u884c\u8c03\u7528\u6210\u4e3a\u53ef\u80fd\u3002\u5728\u5468\u672b\u770b\u5230\u4e00\u4e2a\u5b9e\u73b0ANSI SQL\u6a21\u5757\u8bed\u8a00\u7684\u5de5\u5177\u7684\u6f14\u793a\u540e\uff0cTerry Olkin\u6784\u5efa\u4e86\u4e00\u4e2a\u539f\u578b\uff0c\u8be5\u539f\u578b\u4e3aOracle\u505a\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u8fd9\u5bfc\u81f4\u4e86Oracle SQL*Module\u4ea7\u54c1\u7684\u521b\u5efa\u3002\n\u5f53\u88ab\u95ee\u53ca\u5728\u7532\u9aa8\u6587\u5de5\u4f5c\u7684\u60f3\u6cd5\u65f6\uff0c\u5f7c\u5f97\u8bf4\uff1a\u201c\u6211\u5ea6\u8fc7\u4e86\u9ec4\u91d1\u5c81\u6708\u3002\u6570\u636e\u5e93\u56e2\u961f\u4ee4\u4eba\u60ca\u53f9\uff0c\u4e00\u7fa4\u771f\u6b63\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5f00\u53d1\u4eba\u5458\u3002\u6211\u4e5f\u559c\u6b22\u548c\u9500\u552e\u4eba\u5458\u4e00\u8d77\u5de5\u4f5c--\u7cbe\u529b\u5145\u6c9b--\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u5e76\u80fd\u8ba9\u522b\u4eba\u76f8\u4fe1\u4f60\u80fd\u6267\u884c\uff0c\u4f60\u5c31\u80fd\u505a\u5230\u3002\u201c\u3002\u201c\u8fd9\u662f\u4e00\u573a\u7206\u70b8\uff0c\u201dKendall\u56de\u5fc6\u9053\uff0c\u201c\u76f4\u5230PL/SQL\u53d8\u5f97\u6d41\u884c\u8d77\u6765\uff0c\u6211\u4eec\u624d\u5f00\u59cb\u7ba1\u7406\u5b83\u7684\u4e00\u5207\u3002\u201d\u683c\u96f7\u4e5f\u6709\u7c7b\u4f3c\u7684\u8bb0\u5fc6\uff0c\u201c\u8fd9\u4e2a\u56e2\u961f\u662f\u81ea\u6211\u542f\u52a8\u7684\uff0c\u5b8c\u5168\u53ef\u9760\u3002\u6bcf\u4e2a\u6210\u5458\u90fd\u652f\u6301\u4efb\u4f55\u8054\u5408\u5f00\u53d1\u52aa\u529b\u3002\u548c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\u662f\u4e00\u79cd\u4e50\u8da3\u3002\u201c\u3002\n\u4ece\u9886\u5bfc\u529b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6240\u6709\u6700\u521d\u7684\u56e2\u961f\u6210\u5458\u5728\u4e2a\u6027\u548c\u6280\u672f\u80fd\u529b\u65b9\u9762\u90fd\u5bf9Peter\u6709\u7740\u7f8e\u597d\u7684\u56de\u5fc6\u3002\u80af\u5fb7\u5c14\u8bf4\uff0c\u201c\u6211\u4ece\u6765\u6ca1\u6709\u4e0e\u4efb\u4f55\u4eba\u5408\u4f5c\u8fc7\uff0c\u4ed6\u4eec\u7684\u6c9f\u901a\u6c34\u5e73\u5982\u6b64\u4e4b\u9ad8\u3002\u201dTerry\u7ee7\u7eed\u8bf4\uff0c\u201cPeter\u662fPL/SQL\u80cc\u540e\u7684\u667a\u56ca\uff0c\u4e5f\u662f\u6211\u89c1\u8fc7\u7684\u6700\u597d\u7684\u4eba\u4e4b\u4e00\u3002\u201d\u683c\u96f7\u9644\u548c\u9053\uff1a\u201c\u5f7c\u5f97\u662f\u6700\u597d\u7684\u4f4d\u7f6e\u3002\n..", "note_en": "PL/SQL is one of the\u00a0 top twenty programming languages\u00a0in the world. While I\u2019m no\u00a0 Matthew Symonds, and this is no\u00a0 Softwar, the history of PL/SQL deserves a helluva lot more than, \u201cOracle 7 had an advanced architecture and, like Sybase, was fully programmable via its elegant new PL/SQL programming language.\u201d That\u2019s why, during the process working on my OOW/OCO session and related blog series, \u201c Demystifying PL/SQL: The Life of a Compilation Unit,\u201d I wanted to include some of that history.\n When I first began writing this history, I figured it would be a few paragraphs at most. The deeper I dug and the more people I spoke with, however, the more fascinating the story became. At one point, I decided there was no way I could leave all of this impressive history on the cutting-room floor.\n As this is the longest post I\u2019ve written\u2013and I have even more content available\u2013I\u2019m working with Aaron Lazenby at Oracle to (hopefully) extend this into a collaborative multi-part set of articles for\u00a0 Oracle Connect. For that reason, this entry covers only a subset of the origins of PL/SQL. While much of the original underlying code still exists, this post does not cover the history of the\u00a0 optimizing compiler improvements.\n    Peter Clare\u2019s career began in 1972 at\u00a0 Control Data Corporation\u00a0(CDC). Although CDC no longer exists, throughout the 1960s and 1970s, it was one of the top mainframe and supercomputer companies in the United States. In terms of software, CDC\u2019s Compiler Products Division created the first commercial\u00a0 Pascal\u00a0compiler. Peter\u2019s role in this division consisted of language and compiler development focused on building the world\u2019s fastest computer language processors. During his six-year tenure there, Peter not only improved CDC\u2019s compilers but also learned a great deal about overall language development and, more importantly, the practical issues related to it. With this knowledge, Peter left CDC and became a consultant.\n Years later, in 1984, Peter thumbed through one of the local bay area tech publications looking for additional consulting-related work. Contained inside that publication was an advertisement from\u00a0 Oracle. Through the grapevine, Peter had heard Oracle was in the process of porting the database to many different platforms, one of which he knew rather well. Thinking it may be an excellent opportunity for some contract work, Peter gave Oracle a call. A few days later, Peter met with\u00a0 Bob Miner\u00a0and Bill Friend for an interview.\n Initially, the trio reviewed Peter\u2019s porting-related experience. As Oracle was also working on\u00a0 SQL\u00a0 precompilers\u00a0and a\u00a0 forms-based interface\u00a0to the\u00a0 database, the group additionally discussed Peter\u2019s background in language and compiler development. By the end of that meeting, Bob and Bill convinced Peter to accept a full-time job; Peter became the thirteenth developer at Oracle.\n Peter wasn\u2019t your stereotypical Oracle developer. Described by his teammates as a friendly, easy-going, competent, and highly-capable architect, Peter was not only known for being smart, but also for his love of the water and\u00a0 windsurfing, which he did almost every day. Peter took the old, \u201cwork hard, play hard\u201d motto to heart, striving to achieve a fulfilling work-life balance \u2013 one he honed to perfection throughout his career.\n In his first six months at Oracle, Peter\u2019s responsibilities were more project management related than technical. Bob wanted to focus on development and relied on Peter to manage day-to-day project tasks. Although Peter enjoyed the work, communication became increasingly challenging. \u201cBy that time, Bob and Larry had been working together for quite a while,\u201d Peter remembered, \u201cit was natural for them to communicate directly with each other and, as the man-in-the-middle, it didn\u2019t take long for everyone to realize I was the third wheel.\u201d To reduce this friction, everyone agreed it would be better for Peter to focus on technical work.\n Given his background in programming languages, Peter began working on Oracle\u2019s precompilers. It wasn\u2019t long until another issue arose: competition.\n In those days, a couple of database vendors had simple\u00a0 triggers. Similarly, the only way for the database to execute a procedural function was to write it in another language, compile it, and write an interface. Ken Rudin, PL/SQL\u2019s initial product manager, recalls, \u201cas these approaches were somewhat limiting, rather than implement comparable functionality, Oracle wanted to leapfrog the competition and offer a complete procedural programming capability that lived inside the database. Thankfully, Oracle had realized early on that a consistent procedural language would be beneficial across multiple tools.\u201d That language was PL/SQL, and the best person to invent it was Peter Clare.\n To create PL/SQL, Peter worked closely with Kendall Jensen, the first official developer of PL/SQL. \u201cKendall was the key person,\u201d mentions Peter, \u201che really understood building modern compilers and knew all the latest tools.\u201d To begin, Peter asked Kendall to find everything he could on the\u00a0 Ada programming language.\n Immediately, Kendall went straight to the Stanford Library to search for whatever Ada research material was available. Kendall grabbed a copy of everything he could, returned to the Oracle office, and began reading. One of the books he picked-up was a publication titled, \u201c DIANA: An Intermediate Language for Ada,\u201d by Gerhard Goos, William A. Wulf, Arthur Evans Jr., and Kenneth J. Butler. This publication, written as a reference manual, contained not only the Ada language\u00a0 grammar\u00a0but also the\u00a0 Interface Definition Language\u00a0(IDL) specification of the Descriptive Intermediate Attributed Notation for Ada \u2013 the predominant Ada\u00a0 intermediate representation\u00a0of the time. With this information at hand, in January of 1987, the first line of PL/SQL\u00a0 compiler\u00a0code was written.\n The PL/SQL compiler began as a verbatim copy of the specification. Kendall wrote the original\u00a0 YACC-based parser using the manual\u2019s Ada grammar and generated a\u00a0 DIANA\u00a0tree directly from the syntactic rule actions. Unlike compilers for other languages, which often generate an\u00a0 abstract syntax tree\u00a0and then translate that tree to the intermediate language, this direct approach worked well for an Ada-like language \u2013 particularly as the reference manual represented the IDL and grammar in an interlaced fashion. Why were PL/SQL\u2019s syntax and feature-set modeled after Ada?\n Considered the successor to Pascal, in the 1980s, Ada was an up-and-coming programming language that was particularly popular within the United States government. It is because of this, and Oracle\u2019s well-known working relationship with the government at that time, that many believe Ada was selected. While that aspect added a degree of credibility to the language, it was more of a tangential benefit than an intentional design decision. In reality, the development team wanted PL/SQL to be a\u00a0 strongly typed language. In those days, most programming languages were strongly typed, and Oracle didn\u2019t want to offer reduced capabilities within the database. Although the developers made concessions for\u00a0 type conversion\u00a0between the database and PL/SQL engines, which some regretted later, Ada was known to be a simple, safe, and modular language. Likewise,\u00a0 PL/I\u00a0was the basis of both SQL and Ada, which meant they shared many similarities and made Ada ideal for modeling Oracle\u2019s procedural language after.\n Eventually, there were more tasks than Peter and Kendall could accomplish on their own. As such, additional developers joined the team. While Kendall continued to own the parser and overall\u00a0 PL/SQL syntax, which he enjoyed, each new developer specialized in a specific component. The first, Laurence Hughes, performed some cleanup work, picked up various bits-and-pieces, started building toward some semblance of\u00a0 object-orientedness, and landed on overseeing\u00a0 code generation\u00a0and\u00a0 execution. Pierre Dufour joined soon after, making a few improvements to the parser before focusing on the\u00a0 semantic layer\u00a0and improving the DIANA tree annotations. Last to join was Gray Clossman.\n \u201cBy the time I came to Oracle, the group had already implemented a compiler and\u00a0 interpreter\u00a0for its\u00a0 flow-of-control commands\u00a0and\u00a0 scalar data types.\u201d, recalls Gray. \u201cThe development of PL/SQL came at an exciting time because many programming-language concepts had been explored in academia, but were not yet available in\u00a0 scripting languages\u00a0for commercial products.\u201d Gray worked on several aspects of the language, such as improving\u00a0 memory management\u00a0and taking over Laurence\u2019s initial work on object-oriented support. \u201cGray understood languages like no one else I\u2019ve ever known.\u201d, Peter recalls, \u201che had a lot of experience in functional programming and had a clear understanding of all the issues related to it.\u201d While multiple developers worked\u00a0 on\u00a0PL/SQL, one worked\u00a0 with\u00a0it: James Mallory.\n James began his first stint at Oracle during his summer break from Stanford in 1987. As the \u201cfirst PL/SQL programmer\u201d not developing the language itself, he wrote the canonical \u201c Hello World\u201d as well as a quality assurance\u00a0 test suite\u00a0for PL/SQL V1. \u201cWe had been working on the language for a while,\u201d Peter recalls, \u201cand when you test a language yourself, you know to avoid certain things the compiler can\u2019t handle. It\u2019s good to have a fresh set of eyes play with the language every once in a while.\u201d\n Over time, Kendall\u2019s foresight\u2013to implement the entire specification upfront, rather than only the subset required to support PL/SQL V1\u2013resulted in an increased ability to add additional functionality later in development. As an example, while PL/SQL V1 only supported simple procedures, the addition of packages in PL/SQL V2 primarily required additions to the code generator and interpreter \u2013 the majority of parser and DIANA support was already present. Gray remembers, \u201cKendall always maintained a clear overview of the project; he never got lost in the weeds, always saw the priorities calmly, and was available to help work through a knotty problem.\u201d\n   It all began during a series of discussions that took place at Bob Miner\u2019s Pacific Heights home office. There, Bob, Peter, and Roger Bamford met to exchange ideas concerning how to provide non-Oracle developers with the ability to extend core server functionality easily. \u201cGetting together face-to-face with Roger was always beneficial,\u201d Peter remembers, \u201che\u2019s an incredibly intelligent guy \u2013 I always learned a lot about the database from him, and he learned a lot about PL/SQL from me.\u201d\n The architecture of the PL/SQL engine, as an\u00a0 embeddable component\u00a0for Oracle products, afforded Oracle several advantages. First, the engine could execute server-side from within the database itself. Second, the engine could operate client-side, integrated into other Oracle products (e.g., SQL*Forms.) Lastly, the engine could execute in a similar client-side fashion, but more independently, as it does to provide PL/SQL support in\u00a0 TimesTen.\n While server-side PL/SQL is the form most people are familiar with, it took a significant amount of time and effort to get working. \u201cGetting PL/SQL to run server-side was a nightmare,\u201d Pierre recalled, \u201cinitially, it fit into the database about as well as round pegs fit into trapezoids.\u201d Peter also remembers, \u201cgetting PL/SQL into the V7 database was a bit of a hack job, but a necessary hack job.\u201d \u201cThe first cut was beneficial,\u201d Peter continues, \u201cbecause the database team learned a lot from us, and we learned a lot from them. It was the first time each team saw the problems the other team faced.\u201d\n From a client-side perspective, the PL/SQL engine was not only available in Forms, but also several custom vertical tools. Gray recalls, \u201cWe had stressful meetings with designers of Oracle\u2019s client-side products where we tried to show how they could model the semantics of their applications in PL/SQL by using scoping rather than namespaces. Indeed, that was not always possible without name qualification, which some designers found awkward.\u201d\n Although the PL/SQL engine is dependent on a substantial amount of underlying platform support and memory management code shared with the Oracle Database, the PL/SQL engine sports an\u00a0 abstract\u00a0 cursor\u00a0 interface\u00a0to the underlying database. \u201cThe cursor interface we came up with to separate the database from PL/SQL was one of the neatest parts,\u201d recalls Kendall. In Oracle, the PL/SQL cursor interface is mapped to the database kernel query layer while, in TimesTen, it\u2019s an\u00a0 independent connection\u00a0to the TimesTen engine.\n In late 1989 or early 1990, Oracle had grown considerably. As a result, the consolidation of multiple development teams into larger groups occurred. The PL/SQL team was no exception, and several other members of the precompiler team joined PL/SQL development. Given the similarity in developer skillsets, this restructuring worked to Oracle\u2019s advantage and resulted in several immediate improvements to PL/SQL. Notable immediate improvements were the fruit born from the work of Terry and Jeffrey Olkin; brothers referred to fondly as \u201cThe Wondertwins.\u201d\n \u201cTerry was super to have around,\u201d recalled Pierre, \u201che owned our YACC technology that underlay PL/SQL and precompilers.\u201d Terry has always had a passion for programming languages. \u201cBuilding a programming language that allows a user to specify what the computer should do, at a high level, and transforming that desire into something the computer understands and can execute has always seemed somewhat magical to me,\u201d Terry says. That\u2019s why, before joining PL/SQL development, he spent several years improving Oracle\u2019s precompilers. During that time, in addition to many other things, Terry made significant improvements to\u00a0 SQLLIB, the underlying shared library all Oracle precompilers generated code for, and created SLAX, the\u00a0 parser generator\u00a0PL/SQL relies on to this day. SLAX, however, was not created for PL/SQL.\n In the 1980s, Oracle supported SQL precompilers for the\u00a0 Ada,\u00a0 C/ C++,\u00a0 COBOL,\u00a0 FORTRAN,\u00a0 Pascal, and\u00a0 PL/I\u00a0host programming languages. At the time, each precompiler used a hand-written parser \u2013 this made it difficult to track which features each supported. Alternatively, by using a parser generator, the developers could more easily specify the grammar of the host language and generate the code to parse it. Unfortunately, while this made it easy to define the grammar of the embedded SQL supported by the precompiler (via EXEC SQL) and the host language, parsing both at the same time was problematic.\n In language\u00a0 parsing, an\u00a0 island grammar\u00a0is a grammar of one programming language contained within that of another programming language. Embedded SQL, stored within a host language (C, COBOL, etc.), is considered the island grammar. YACC, the preeminent parser generator of the time, did not (and still does not) truly support island grammars. Getting YACC to parse an island grammar is painful.\n From a technical standpoint, for YACC to switch between multiple grammars in the same parser, a specific\u00a0 symbol, invisible to the user, must be specified. The parser and\u00a0 lexer\u00a0must then communicate with each other around which language to tokenize and which to parse. When the lexer identifies the island grammar, it switches states and must inject this specific symbol so YACC can select the proper island grammar rule (rather than the host language rule). Likewise, when YACC believes it has parsed the island grammar, it must inform the lexer that it should switch its state back to the host language. Although there are other ways to do this with YACC, all are equally painful. As the precompiler group needed to be able to integrate the same embedded SQL parser within multiple host languages, they needed a tool that would allow them to do that easily. Enter SLAX.\n SLAX, pronounced as slack, is an internal mostly-YACC-compatible parser generator. While it may look like an acronym, it isn\u2019t. SLAX stands for Segmented Language YACC. That\u2019s right, the proper pronunciation of the X in SLAX is as a K. While SLAX shared no code with YACC, when he named it, Terry decided to give a respectful tip of the hat to YACC. Like most tools, it did its job well. After a while, however, SLAX needed to be modified and was eventually rewritten. John Ciminski performed the rewrite in what Terry referred to as \u201cThe Right Way.\u201d Already a proven tool, SLAX was a natural replacement for the PL/SQL parser\u2019s use of YACC. Terry transitioned PL/SQL from YACC to SLAX when he began working on PL/SQL sometime in 1990, before improving the underlying parser itself.\n During this time, Terry brought his brother, Jeffrey, on board. Unlike Terry, who enjoyed frontend compiler work, Jeffrey preferred the backend: specifically, code generation and execution. \u201cJeffrey was phenomenal,\u201d remarked Peter.\n Initially, the focus on PL/SQL development was the language itself, and performance wasn\u2019t a critical aspect. But, as more and more customers began to use PL/SQL, performance became an issue. The primary performance bottleneck was the first version of the PL/SQL\u00a0 virtual machine\u00a0(\u201cVM\u201d), which was a stack-based byte code interpreter similar to standard\u00a0 Pascal byte code (p-code) interpreters\u00a0of the time.\n In a\u00a0 stack-based virtual machine, expression operands are pushed onto the stack then popped as they when needed for computation. For machines of the time, this was too slow. The overhead interpreting each byte code instruction in software was significant; A simple computation could take dozens of instructions, and most of the time spent in execution went toward that overhead.\n In Ada, this is worse as operands can refer to variables within multiple\u00a0 scopes\u00a0and across multiple\u00a0 packages. As such, Jeffrey first rewrote all of that and created a kind of \u201cmini-interpreter\u201d for operands, so that retrieval of an operand, no matter how complex its address, could be performed as part of a single byte code instruction. This change substantially reduced the overhead for instruction decoding and made large PL/SQL programs more feasible. On this improvement, Kendall recalls, \u201cI remember looking at it. It was brilliant and beautiful code \u2013 really elegant.\u201d James, who rejoined Oracle again in 1990, mentioned how much more efficient the new virtual machine was as well.\n  Eventually, everyone from the initial days would move on from PL/SQL \u2013 either leaving Oracle or moving to other projects. Gray Clossman went on to build other language-related features at Oracle, such as\u00a0 SQLJ. Pierre Dufour moved to the\u00a0 applications-side, where he worked on CRM as well as built an internal-only PL/SQL compiler, Rosetta, that made it possible to make calls between Java and PL/SQL without modification. After seeing a demo of a tool implementing the ANSI SQL Module Language\u2013over the weekend\u2013Terry Olkin built a prototype that did the same for Oracle, which led to the creation of the\u00a0 SQL*Module\u00a0product.\n  When asked what he thought of working at Oracle, Peter says, \u201cI got the golden years. The database group was amazing, a truly incredible group of developers. I also loved working with the sales guys\u2013the energy\u2013it was the kind of place where if you had an idea and could make someone believe you could execute on it, you could.\u201d \u201cIt was a blast,\u201d recalls Kendall, \u201cUntil PL/SQL became popular, we got to manage everything about it.\u201d Gray shares a similar memory, \u201cThe team was self-starting and completely reliable. Each member held up their end of any joint development effort. It was a joy to work with them.\u201d\n From a leadership perspective, all of the initial team members had a fond recollection of Peter in terms of both personality and technical competency. Kendall states, \u201cI\u2019ve never worked with anyone else who communicated at such a high level.\u201d Terry continues, \u201cPeter was the brains behind PL/SQL and also one of the nicest people I\u2019ve ever met.\u201d Gray seconded this with, \u201cPeter was the best pos\n......", "posttime": "2020-05-05 16:11:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sql,history,peter", "title": "\u7b80\u77ed\u4f46(\u975e\u5e38)\u51c6\u786e\u7684PL/SQL\u5386\u53f2\u8bb0\u5f55", "title_en": "A (Not So) Brief but (Very) Accurate History of PL/SQL", "transed": 1, "url": "http://oracle-internals.com/blog/2020/04/29/a-not-so-brief-but-very-accurate-history-of-pl-sql/", "via": "", "real_tags": ["sql", "history", "peter"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000708, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Sonic Pi\u7531Sam Aaron\u4ee3\u8868\u97f3\u4e50\u59d4\u5458\u4f1a\u5c0f\u7ec4\uff0c\u8fd9\u662fABRSM\u53d1\u8d77\u7684\u4e00\u9879\u65b0\u8c03\u67e5\uff0c\u65e8\u5728\u63a2\u7d22\u5982\u4f55\u66f4\u597d\u5730\u7ef4\u6301\u548c\u652f\u6301\u97f3\u4e50\u5b66\u4e60\u7684\u8fdb\u6b65\u548c\u8fdb\u6b65\u3002\n\u7cbe\u5f69\u7684\u88f8\u4f53\u79d1\u5b66\u5bb6\u5728BBC\u7535\u53f0\u73b0\u573a\u76f4\u64ad\u7684\u91c7\u8bbf\u4e2d\u62a5\u9053\u4e86Sonic Pi\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u6536\u542c\u548c\u9605\u8bfb\u3002\n\u751f\u6d3b\u5927\u7206\u70b8\u535a\u89c8\u4f1a\u662f\u82f1\u56fd\u4e3a\u5e74\u8f7b\u4eba\u4e3e\u529e\u7684\u6700\u5927\u89c4\u6a21\u7684STEM\u5e86\u795d\u6d3b\u52a8\u30022018\u5e74\uff0cSonic Pi Band\u8868\u6f14\u4e86\u4e00\u7cfb\u5217\u8282\u76ee\uff0c\u6f14\u793a\u5982\u4f55\u73b0\u573a\u7f16\u7801\u81ea\u5df1\u7684\u4e50\u961f\u3002\n\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684Mehackit Sonic Pi\u521b\u610f\u7f16\u7801\u8d44\u6e90\u5df2\u7ecf\u901a\u8fc7\u4e86\u82ac\u5170\u6559\u80b2\u6807\u51c6Kakoa\u7684\u6559\u80b2\u8d28\u91cf\u8ba4\u8bc1\u3002\nSonic Pi\u662fConvo\u7684\u6559\u80b2\u5408\u4f5c\u4f19\u4f34\uff0cConvo\u662f\u7687\u5bb6\u963f\u5c14\u4f2f\u7279\u97f3\u4e50\u5385(Royal Albert Hall)\u96c4\u5fc3\u52c3\u52c3\u7684\u65b0\u4f5c\u54c1\uff0c\u4ee51000\u540d\u5e74\u8f7b\u7684\u5668\u4e50\u6f14\u594f\u5bb6\u548c\u6b4c\u624b\u4e3a\u7279\u8272\uff0c\u7ed3\u5408\u4e86\u4f20\u7edf\u4e50\u5668\u548c\u4ee3\u7801\u3002\u5728\u8fd9\u91cc\u89c2\u770b\u6f14\u51fa\u3002\n2017\u5e74\uff0c\u975e\u6d32\u548c\u82ac\u5170\u7684\u6280\u672f\u548c\u6559\u80b2\u521b\u65b0\u8005\u5408\u4f5c\uff0c\u4f7f\u7528Sonic Pi\u63d0\u4f9b\u521b\u610f\u7f16\u7801\u7814\u8ba8\u4f1a\uff0c\u5438\u5f15\u4e8610\u4e2a\u975e\u6d32\u56fd\u5bb6\u7684\u8fd12000\u540d\u513f\u7ae5\u53c2\u52a0\u3002\n\u8c37\u6b4c\u5df2\u7ecf\u5ba3\u5e03Sonic Pi\u662f\u4ed6\u4eec\u6b63\u5728\u4f7f\u7528\u6216\u8ba4\u4e3a\u5f88\u91cd\u8981\u7684\u51e0\u4e2a\u9879\u76ee\u4e4b\u4e00\u3002\nSonic Pi\u4e0e\u4e50\u5668\u5236\u9020\u5546Boss&amp\uff1bKorg\u4e00\u8d77\u5165\u56f4\u97f3\u4e50\u6559\u5e08\u6700\u4f73\u97f3\u4e50\u6559\u80b2\u4ea7\u54c1\u5956\u51b3\u8d5b\u3002\n\u8428\u59c6\u00b7\u4e9a\u4f26\u57282016\u5e74\u7a46\u683c\u8282\u4e0a\u4e0eSonic Pi\u4e00\u8d77\u8868\u6f14\u3002\u201c\u6eda\u77f3\u201d\u6742\u5fd7\u5728\u4ed6\u4eec\u5bf9\u7535\u5f71\u8282\u7684\u8bc4\u8bba\u4e2d\u91cd\u70b9\u4ecb\u7ecd\u4e86\u4ed6\u7684\u8868\u6f14\uff0c\u5e76\u8bf4\u5b83\u8d85\u8d8a\u4e86\u73b0\u5728\u3002\n\u8fd9\u4e9b\u83b7\u5956\u5b66\u751f\u8d62\u5f97\u4e86\u4e00\u573a\u6fc0\u52a8\u4eba\u5fc3\u7684\u5343\u8f7d\u96be\u9022\u7684\u6bd4\u8d5b\uff0c\u8ba9\u4ed6\u4eec\u7684\u97f3\u901f\u6d3e\u97f3\u4e50\u5728\u56fd\u9645\u7a7a\u95f4\u7ad9\u4e0a\u7531\u82f1\u56fd\u5b87\u822a\u5458\u8482\u59c6\u00b7\u76ae\u514b(Tim Peake)\u64ad\u653e\u3002\n\u7b2c\u4e00\u7535\u53f0DJ MistaJam\u548c\u73b0\u573a\u7f16\u7801\u5668\u8428\u59c6\u00b7\u4e9a\u4f26\u7528Sonic Pi\u521b\u4f5c\u4e86\u4e00\u9996\u97f3\u4e50\uff0c\u7075\u611f\u6765\u81ea\u4e8eBizet\u7684\u5361\u95e8\uff1b\n\u585e\u5df4\u65af\u8482\u5b89\u00b7\u5170\u8bfa(S\u00e9bastien Rnoru)\u51fa\u7248\u4e86\u4e00\u4efd\u6559\u7a0b\uff0c\u8bb2\u8ff0\u4ed6\u662f\u5982\u4f55\u4e3a\u611a\u8822\u7684\u670b\u514b(Daft Punk)\u5236\u4f5c\u7684\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u7a7a\u6c14\u52a8\u529b\u5b66\u5c01\u9762\u8fdb\u884c\u7f16\u7801\u7684\u3002\nSonic Pi\u51fa\u73b0\u5728\u82f1\u56fd\u56fd\u5bb6\u513f\u7ae5\u65b0\u95fb\u8282\u76eeCBBC Newsround\u4e2d\uff0c\u4e3b\u6301\u4eba\u8a79\u59ae\u00b7\u52b3\u4f26\u65af(Jenny Lawrence)\u9996\u6b21\u53d1\u73b0\u4e86Live Coding\u3002\nSonic Pi\uff1aLive&amp\uff1bCoding\u9879\u76ee\u63a8\u51fa\u4e86\u4e00\u7cfb\u5217\u7531\u827a\u672f\u5bb6\u4f7f\u7528Sonic Pi\u521b\u4f5c\u7684Pop Pi\u97f3\u4e50\u89c6\u9891\u3002\n\u827a\u672f\u5bb6\u6731\u8bfa\u9879\u76ee\u5199\u7684\u662f\u6700\u8fd1\u7684Sonic Pi Live&Amp\uff1bCoding\u6691\u671f\u5b66\u6821\uff0c\u670960\u540d10-14\u5c81\u7684\u5b69\u5b50\u5728\u5251\u6865\u8def\u53e3\u7684\u821e\u53f0\u4e0a\u5b66\u4e60\u7f16\u7a0b\u548c\u8868\u6f14\u3002", "note_en": "Sonic Pi is represented by Sam Aaron on The Music Commission panel, a new enquiry launched by ABRSM exploring how to better sustain &amp; support progress &amp; progression in learning music.\n  The wonderful Naked Scientists covered Sonic Pi in an interview which was broadcast live on BBC radio and is available to listen and read  here.\n  The Big Bang Fair is the UK&#39;s largest celebration of STEM for young people. In 2018 the Sonic Pi Band performed a series of shows demonstrating how to live code your own band.\n  The incredible  Mehackit Sonic Pi creative coding resource has been certified by the Finnish Education Standard Kakoa for its educational quality.\n  Sonic Pi was an Education Partner for Convo, an ambitious new work at the Royal Albert Hall featuring 1,000 young instrumentalists &amp; singers combining traditional instruments &amp; code.   Watch the performance here\n  In 2017, African and Finnish tech and education innovators collaborated to use Sonic Pi to deliver creative coding workshops engaging almost 2000 children in 10 African countries.\n  Google have announced Sonic Pi as one of a number of projects they either use or think are important.\n  Sonic Pi was listed as a finalist for the  Music Teacher Best Music Education Product Award alongside music instrument manufacturers Boss &amp; Korg.\n  Sam Aaron performed with Sonic Pi at Moogfest 2016. Rolling Stone featured his performance in their  review of the festival and said it  &#34;transcended the present&#34;.\n  These are the winning students  that won an exciting once-in-a-lifetime competition to get their Sonic Pi music played onboard the International Space Station by UK astronaut Tim Peake.\n  Radio 1 DJ MistaJam and Live Coder Sam Aaron compose a piece of music using Sonic Pi, inspired by Bizet&#39;s &#39;Carmen&#39;\n  S\u00e9bastien Rannou has published a tutorial on how he live coded his fabulous  cover of Aerodynamic by Daft Punk.\n  Sonic Pi was featured on the UK national children&#39;s news programme  CBBC Newsround - with presenter Jenny Lawrence discovering Live Coding for the first time.\n  The Sonic Pi: Live &amp; Coding project has launched   a series of 10 &#34;Pop Pi&#34; music videos created by artists using Sonic Pi.\n  Artists Juneau Projects  write about the recent Sonic Pi Live &amp; Coding Summer School which involved 60 children aged 10-14 learning to code and perform on stage at Cambridge Junction.", "posttime": "2020-05-05 15:56:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u97f3\u4e50\u521b\u4f5c,pi", "title": "Sonic Pi\u662f\u4e00\u4e2a\u57fa\u4e8e\u4ee3\u7801\u7684\u97f3\u4e50\u521b\u4f5c\u548c\u6f14\u594f\u5de5\u5177", "title_en": "Sonic Pi is a code-based music creation and performance tool", "transed": 1, "url": "https://sonic-pi.net/", "via": "", "real_tags": ["\u4ee3\u7801", "\u97f3\u4e50\u521b\u4f5c", "pi"]}]