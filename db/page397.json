[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1001060, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6ce8\u610f\u5230\u6211\u7684\u51e0\u4e2a\u9879\u76ee\u4e2d\u6709\u4e00\u4e2a\u5c0f\u6a21\u5f0f\uff0c\u5176\u4e2d\u6211\u5bf9\u4e00\u4e9b\u4ee3\u7801\u8fdb\u884c\u4e86\u77e2\u91cf\u5316\u548c\u5e76\u884c\u5316\u3002\u6700\u521d\u7684\u7b97\u6cd5\u91c7\u7528\u201c\u63a8\u201d\u7684\u65b9\u5f0f\uff0c\u800c\u4f18\u5316\u540e\u7684\u7b97\u6cd5\u91c7\u7528\u201c\u62c9\u201d\u7684\u65b9\u5f0f\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u63cf\u8ff0\u6211\u7684\u610f\u601d\uff0c\u867d\u7136\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u5c55\u793a\u4e00\u4e9b\u6f02\u4eae\u7684\u89c6\u9891\u3001\u56fe\u7247\u548c\u6f14\u793a\u3002\n\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u662f\u963f\u8d1d\u5c14\u6c99\u5806\u6a21\u578b\uff0c\u5c31\u50cf\u6211\u4e4b\u524d\u7684\u8bb8\u591a\u6a21\u578b\u4e00\u6837\uff0c\u5b83\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u5b8c\u5168\u5438\u5f15\u4e86\u6211\u7684\u6ce8\u610f\u3002\u5b83\u662f\u4e00\u4e2a\u7ec6\u80de\u81ea\u52a8\u673a\uff0c\u6bcf\u4e2a\u7ec6\u80de\u90fd\u662f\u4e00\u5806\u6c99\u7c92-\u4e00\u4e2a\u6c99\u5806\u3002\u5728\u6bcf\u4e00\u6b65\uff0c\u4efb\u4f55\u8d85\u8fc7\u56db\u4e2a\u9897\u7c92\u7684\u6c99\u5806\u90fd\u4f1a\u5c06\u4e00\u4e2a\u9897\u7c92\u6cc4\u6f0f\u5230\u5b83\u7684\u56db\u4e2a4\u4e2a\u76f8\u8fde\u7684\u90bb\u5c45\u4e2d\uff0c\u800c\u4e0d\u8003\u8651\u8fd9\u4e9b\u76f8\u90bb\u5355\u5143\u683c\u4e2d\u7684\u9897\u7c92\u6570\u91cf\u3002\u8fb9\u7f18\u7684\u7ec6\u80de\u5c06\u5b83\u4eec\u7684\u9897\u7c92\u6ea2\u51fa\u5230\u88ab\u9057\u5fd8\u7684\u5730\u65b9\uff0c\u8fd9\u4e9b\u9897\u7c92\u5c31\u4e0d\u590d\u5b58\u5728\u4e86\u3002\n\u968f\u7740\u591a\u4f59\u7684\u6c99\u5b50\u843d\u5230\u8fb9\u7f18\uff0c\u6a21\u578b\u6700\u7ec8\u8fbe\u5230\u4e0d\u7a33\u5b9a\u72b6\u6001\uff0c\u6240\u6709\u7684\u6869\u90fd\u6709\u4e09\u4e2a\u6216\u66f4\u5c11\u7684\u9897\u7c92\u3002\u7136\u800c\uff0c\u76f4\u5230\u706f\u5149\u8fbe\u5230\u7a33\u5b9a\uff0c\u5404\u79cd\u6709\u8da3\u7684\u56fe\u6848\u90fd\u5728\u5143\u80de\u81ea\u52a8\u673a\u4e2d\u8361\u6f3e\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7684\u56fe\u6848\u672c\u8eab\u662f\u7f8e\u4e3d\u548c\u6709\u8da3\u7684\u3002\nNumberphile\u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u89c6\u9891\uff0c\u63cf\u8ff0\u4e86\u5982\u4f55\u5728\u91cd\u590d\u914d\u7f6e\u4e0a\u5f62\u6210\u4e00\u4e2a\u7ec4(\u4e5f\u662f)\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7f51\u683c\u5927\u5c0f\uff0c\u90fd\u6709\u4e00\u4e2a\u7a33\u5b9a\u7684\u8eab\u4efd\u914d\u7f6e\uff0c\u5f53\u201c\u6dfb\u52a0\u201d\u5230\u7ec4\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u5143\u7d20\u65f6\uff0c\u5b83\u5c06\u7a33\u5b9a\u56de\u5230\u8be5\u5143\u7d20\u3002\u8eab\u4efd\u7ed3\u6784\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u5206\u5f62\uff0c\u5176\u672c\u8eab\u4e00\u76f4\u662f\u7814\u7a76\u7684\u70ed\u70b9\u3002\n\u8ba1\u7b97\u8eab\u4efd\u914d\u7f6e\u5b9e\u9645\u4e0a\u5c31\u662f\u4ece\u67d0\u4e9b\u5f00\u59cb\u914d\u7f6e\u5f00\u59cb\u8fd0\u884c\u6a21\u62df\u76f4\u5230\u5b8c\u6210\u51e0\u6b21\u3002\u4ee5\u4e0b\u662f\u8ba1\u7b9764x64\u8eab\u4efd\u914d\u7f6e\u8fc7\u7a0b\u7684\u52a8\u753b\uff1a\n\u4f5c\u4e3a\u5206\u5f62\uff0c\u7f51\u683c\u8d8a\u5927\uff0c\u89c2\u5bdf\u5230\u7684\u81ea\u76f8\u4f3c\u56fe\u6848\u5c31\u8d8a\u591a\u3002\u7f51\u4e0a\u6709\u5f88\u591a\u6837\u672c\uff0c\u6211\u80fd\u627e\u5230\u7684\u6700\u5927\u7684\u5c31\u662f\u7ef4\u57fa\u767e\u79d1\u4e0a\u76843000x3000\u3002\u4f46\u662f\u6211\u60f3\u770b\u4e00\u4e2a\u66f4\u5927\u7684\uff0c\u8be5\u6b7b\u7684\uff01\u56e0\u6b64\uff0c\u8df3\u5230\u6700\u540e\uff0c\u6211\u6700\u7ec8\u8ba1\u7b97\u4e86\u8fd9\u4e2a10000x10000\u8eab\u4efd\u914d\u7f6e\uff1a\n\u6211\u4f7f\u7528OpenMP\u8de8\u5185\u6838\u5e76\u884c\u5316\uff0c\u4f7f\u7528SIMD\u5728\u7ebf\u7a0b\u5185\u5e76\u884c\u5316\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u4e00\u6b21\u64cd\u4f5c32\u4e2a\u6c99\u5806\uff0c\u4e3a\u4e86\u8ba1\u7b97\u8eab\u4efd\u6c99\u5806\uff0c\u6bcf\u4e2a\u6c99\u5806\u53ea\u9700\u89813\u4f4d\u72b6\u6001\uff0c\u56e0\u6b64\u5728\u76f8\u540c\u7684\u786c\u4ef6\u4e0a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u589e\u52a0\u5230\u4e00\u6b2185\u4e2a\u6c99\u5806\u3002\u8f93\u51fa\u683c\u5f0f\u662f\u6211\u4ee5\u524d\u7684\u652f\u67f1Netpbm\uff0c\u5305\u62ec\u89c6\u9891\u8f93\u51fa\u3002\n\u90a3\u4e48\uff0c\u6211\u8bf4\u7684\u63a8\u62c9\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u6a21\u62df\u6c99\u5806\u7684\u5929\u771f\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a\n\u5bf9\u4e8e\u6c99\u5806\u4e2d\u7684\u6bcf\u4e2ai\uff0c{if input[i]&lt\uff1b4{output[i]=input[i]}Else{output[i]=input[i]-4\u5bf9\u4e8e\u90bb\u5c45\u4e2d\u7684\u6bcf\u4e2aj{output[j]=output[j]+1}\u3002\n\u5f53\u7b97\u6cd5\u68c0\u67e5\u6bcf\u4e2a\u5355\u5143\u683c\u65f6\uff0c\u5b83\u4f1a\u5c06\u7ed3\u679c\u63a8\u5165\u516b\u4e2a\u5355\u5143\u683c\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5e76\u53d1\uff0c\u8fd9\u610f\u5473\u7740\u6267\u884c\u7684\u591a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u6539\u53d8\u540c\u4e00\u4e2a\u5355\u5143\uff0c\u8fd9\u9700\u8981\u540c\u6b65\u9501\u3001\u539f\u5b50\u7b49\u3002\u5927\u91cf\u7684\u540c\u6b65\u662f\u6027\u80fd\u7684\u4e27\u949f\u3002\u7ebf\u7a0b\u5c06\u82b1\u8d39\u6240\u6709\u65f6\u95f4\u4e89\u593a\u76f8\u540c\u7684\u8d44\u6e90\uff0c\u5373\u4f7f\u8fd9\u53ea\u662f\u865a\u5047\u7684\u5171\u4eab\u3002\n\u5bf9\u4e8e\u6c99\u5806\u4e2d\u7684\u6bcf\u4e2ai\uff0c{if input[i]&lt\uff1b4{output[i]=input[i]}\u5bf9\u4e8e\u90bb\u5c45\u4e2d\u7684\u6bcf\u4e2aj\uff0c\u5176\u4ed6{output[i]=input[i]-4}{if input[j]&gt\uff1b=4{output[i]=output[i]+1}\u3002\n\u6bcf\u4e2a\u7ebf\u7a0b\u53ea\u4fee\u6539\u4e00\u4e2a\u5355\u5143-\u5b83\u8d1f\u8d23\u66f4\u65b0\u7684\u5355\u5143-\u6240\u4ee5\u4e0d\u9700\u8981\u540c\u6b65\u3002\u5b83\u662f\u7740\u8272\u5668\u53cb\u597d\u7684\uff0c\u5982\u679c\u4f60\u770b\u8fc7\u6211\u5bf9\u5eb7\u5a01\u7684\u751f\u6d3b\u6e38\u620f\u7684WebGL\u5b9e\u73b0\uff0c\u5e94\u8be5\u542c\u8d77\u6765\u5f88\u719f\u6089\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u7b97\u6cd5\u3002\u5982\u679c\u4f60\u5728\u7f51\u4e0a\u641c\u7d22\u5404\u79cd\u963f\u8d1d\u5c14\u6c99\u5806\u7684\u53c2\u8003\u8d44\u6599\uff0c\u4f60\u6700\u7ec8\u4f1a\u770b\u5230Cameron Fish\u57282017\u5e74\u53d1\u8868\u7684\u4e00\u7bc7\u5173\u4e8e\u5728GPU\u4e0a\u8fd0\u884c\u6c99\u5806\u6a21\u62df\u7684\u8bba\u6587\u3002\u4ed6\u5f15\u7528\u4e86\u6211\u7684WebGL\u751f\u6d3b\u6e38\u620f\u7684\u6587\u7ae0\uff0c\u628a\u4e00\u5207\u90fd\u753b\u4e0a\u4e86\u5706\u5708\u3002\u6211\u4eec\u5f53\u65f6\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u4e86\u4ea4\u8c08\uff0c\u4ed6\u4e0e\u6211\u5206\u4eab\u4e86\u4ed6\u7684\u4e92\u52a8\u6a21\u62df\u3002\n\u5411\u91cf\u5316\u8be5\u7b97\u6cd5\u5f88\u7b80\u5355\uff1a\u4e00\u6b21\u52a0\u8f7d\u591a\u4e2a\u6869\uff0c\u6bcf\u4e2aSIMD\u901a\u9053\u4e00\u4e2a\u6869\uff0c\u5e76\u4f7f\u7528\u63a9\u7801\u5b9e\u73b0\u5206\u652f\u3002\u5728\u6211\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u8fd8\u5c55\u5f00\u4e86\u5faa\u73af\u3002\u4e3a\u4e86\u907f\u514dSIMD\u4ee3\u7801\u4e2d\u7684\u8fb9\u754c\u68c0\u67e5\uff0c\u6211\u7528\u96f6\u586b\u5145\u72b6\u6001\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbfedgecells\u5177\u6709\u9759\u6001\u90bb\u5c45\uff0c\u4e0d\u518d\u662f\u7279\u6b8a\u7684\u3002\n\u56de\u5230\u8fc7\u53bb\uff0c\u5176\u4e2d\u4e00\u4e2a\u5f88\u9177\u7684\u56fe\u5f62\u6280\u5de7\u662f\u706b\u7130\u52a8\u753b\u3002\u5b83\u5f88\u5bb9\u6613\u5728\u6709\u9650\u7684\u786c\u4ef6\u4e0a\u5b9e\u73b0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8ba1\u7b97\u5b83\u7684\u6700\u660e\u663e\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\uff0c\u4f8b\u5982\u5728VGA\u7f13\u51b2\u533a\u4e2d\uff0c\u6ca1\u6709\u5916\u90e8\u72b6\u6001\u3002\n\u5c4f\u5e55\u5e95\u90e8\u6709\u4e00\u4e2a\u70ed\u6e90\uff0c\u7b97\u6cd5\u81ea\u4e0b\u800c\u4e0a\u8fd0\u884c\uff0c\u968f\u673a\u5411\u4e0a\u4f20\u64ad\u70ed\u91cf\uff1a\n\u51fd\u6570rand(min\uff0cmax)//\u5bf9\u4e8e\u4ece\u5e95\u90e8\u5f00\u59cb\u7684\u6bcf\u4e2ax\uff0cy\uff0c\u4ee5[min\uff0cmax]\u4e3a\u5355\u4f4d\u7684\u968f\u673a\u6574\u6570{buf[y-1][x+rand(-1\uff0c1)]=buf[y][x]-rand(0\uff0c1)}\n\u4f5c\u4e3a\u63a8\u9001\u7b97\u6cd5\uff0c\u5b83\u5728\u5355\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u4e0d\u80fd\u5f88\u597d\u5730\u8f6c\u6362\u5230\u73b0\u4ee3\u89c6\u9891\u786c\u4ef6\u4e0a\u3002\u56e0\u6b64\uff0c\u5c06\u5176\u8f6c\u6362\u4e3aPull\u7b97\u6cd5\uff01\n\u5bf9\u4e8e\u6bcf\u4e2ax\uff0cy{sx=x+rand(-1\uff0c1)sy=y+rand(1\uff0c2)output[y][x]=input[sy][sx]-rand(0\uff0c1)}\u3002\n\u7ec6\u80de\u5c06\u706b\u4ece\u5e95\u90e8\u5411\u4e0a\u62c9\u8d77\u3002\u5c3d\u7ba1\u8fd9\u4e00\u6b21\u6709\u4e86acatch\uff1a\u8fd9\u4e2a\u7b97\u6cd5\u5c06\u4f1a\u6709\u5fae\u5999\u7684\u4e0d\u540c\u7ed3\u679c\u3002\n\u5728\u539f\u59cb\u7248\u672c\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u72b6\u6001\u7f13\u51b2\u5668\uff0c\u56e0\u6b64\u706b\u7130\u53ef\u4ee5\u5728\u4e00\u6b21\u4f20\u9012\u4e2d\u5411\u4e0a\u4f20\u64ad\u591a\u6b21\u3002\u6211\u5728\u8fd9\u91cc\u7684\u8865\u507f\u662f\u8ba9\u706b\u7130\u7acb\u523b\u4f20\u64ad\u5f97\u66f4\u8fdc\u3002\n\u5728\u539f\u59cb\u7248\u672c\u4e2d\uff0c\u706b\u7130\u53ea\u4f20\u64ad\u5230\u53e6\u4e00\u4e2a\u7ec6\u80de\u3002\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\uff0c\u4e24\u4e2a\u7ec6\u80de\u53ef\u80fd\u4ece\u540c\u4e00\u706b\u7130\u4e2d\u53d6\u51fa\uff0c\u514b\u9686\u5b83\u3002\n\u6700\u540e\u5f88\u96be\u533a\u5206\uff0c\u6240\u4ee5\u8fd9\u5c31\u89e3\u51b3\u4e86\u95ee\u9898\u3002\nrand()\u51fd\u6570\u4e2d\u4ecd\u7136\u5b58\u5728\u6f5c\u5728\u7684\u4e89\u7528\uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u63a5\u53d7x\u548cy\u4f5c\u4e3a\u8f93\u5165\u7684\u6563\u5217\u51fd\u6570\u6765\u89e3\u51b3\u3002\n\u5bf9\u8fd9\u7bc7\u6587\u7ae0\u6709\u4ec0\u4e48\u8bc4\u8bba\u5417\uff1f\u901a\u8fc7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3~Skeeto/public-inbox@lists.sr.ht[\u90ae\u4ef6\u5217\u8868\u793c\u4eea]\u5f00\u59cb\u6211\u7684\u516c\u5171\u6536\u4ef6\u7bb1\u4e2d\u7684\u8ba8\u8bba\uff0c\u6216\u67e5\u770b\u73b0\u6709\u8ba8\u8bba\u3002", "note_en": "I\u2019ve noticed a small pattern across a few of my projects where I hadvectorized and parallelized some code. The original algorithm had a\u201cpush\u201d approach, the optimized version instead took a \u201cpull\u201d approach.In this article I\u2019ll describe what I mean, though it\u2019s mostly just so Ican show off some pretty videos, pictures, and demos.\n  A good place to start is the  Abelian sandpile model, which, likemany before me, completely  captured my attention for awhile.It\u2019s a cellular automaton where each cell is a pile of grains of sand \u2014a sandpile. At each step, any sandpile with more than four grains ofsand spill one grain into its four 4-connected neighbors, regardless ofthe number of grains in those neighboring cell. Cells at the edge spilltheir grains into oblivion, and those grains no longer exist.\n With excess sand falling over the edge, the model eventually hits astable state where all piles have three or fewer grains. However, untilit reaches stability, all sorts of interesting patterns ripple thoughthe cellular automaton. In certain cases, the final pattern itself isbeautiful and interesting.\n Numberphile has a great video describing how to  form a group overrecurrent configurations ( also). In short, for any given gridsize, there\u2019s a stable  identity configuration that, when \u201cadded\u201d toany other element in the group will stabilize back to that element. Theidentity configuration is a fractal itself, and has been a focus ofstudy on its own.\n Computing the identity configuration is really just about running thesimulation to completion a couple times from certain startingconfigurations. Here\u2019s an animation of the process for computing the64x64 identity configuration:\n  As a fractal, the larger the grid, the more self-similar patterns thereare to observe. There are lots of samples online, and the biggest Icould find was  this 3000x3000 on Wikimedia Commons. But I wantedto see one  that\u2019s even bigger, damnit! So, skipping to the end, Ieventually computed this 10000x10000 identity configuration:\n       I used  OpenMP to parallelize across cores, and SIMD to parallelizewithin a thread. Each thread operates on 32 sandpiles at a time.To compute the identity sandpile, each sandpile only needs 3 bits ofstate, so this could potentially be increased to 85 sandpiles at a timeon the same hardware. The output format is my old mainstay, Netpbm, including the video output.\n  So, what do I mean about pushing and pulling? The naive approach tosimulating sandpiles looks like this:\n for each i in sandpiles { if input[i] &lt; 4 { output[i] = input[i] } else { output[i] = input[i] - 4 for each j in neighbors { output[j] = output[j] + 1 } }}\n As the algorithm examines each cell, it  pushes results intoneighboring cells. If we\u2019re using concurrency, that means multiplethreads of execution may be mutating the same cell, which requiressynchronization \u2014 locks,  atomics, etc. That muchsynchronization is the death knell of performance. The threads willspend all their time contending for the same resources, even if it\u2019sjust false sharing.\n  for each i in sandpiles { if input[i] &lt; 4 { output[i] = input[i] } else { output[i] = input[i] - 4 } for each j in neighbors { if input[j] &gt;= 4 { output[i] = output[i] + 1 } }}\n Each thread only modifies one cell \u2014 the cell it\u2019s in charge of updating\u2014 so no synchronization is necessary. It\u2019s shader-friendly and shouldsound familiar if you\u2019ve seen  my WebGL implementation of Conway\u2019s Gameof Life. It\u2019s essentially the same algorithm. If you chase downthe various Abelian sandpile references online, you\u2019ll eventually comeacross a 2017 paper by Cameron Fish about  running sandpile simulationson GPUs. He cites my WebGL Game of Life article, bringingeverything full circle. We had spoken by email at the time, and he shared his  interactive simulation with me.\n Vectorizing this algorithm is straightforward: Load multiple piles atonce, one per SIMD channel, and use masks to implement the branches. Inmy code I\u2019ve also unrolled the loop. To avoid bounds checking in theSIMD code, I pad the state data structure with zeros so that the edgecells have static neighbors and are no longer special.\n  Back in the old days, one of the  cool graphics tricks was fireanimations. It was so easy to implement on limited hardware. Infact, the most obvious way to compute it was directly in theframebuffer, such as in  the VGA buffer, with no outside state.\n There\u2019s a heat source at the bottom of the screen, and the algorithmruns from bottom up, propagating that heat upwards randomly:\n func rand(min, max) // random integer in [min, max]for each x, y from bottom { buf[y-1][x+rand(-1, 1)] = buf[y][x] - rand(0, 1)}\n As a  push algorithm it works fine with a single-thread, butit doesn\u2019t translate well to modern video hardware. So convert it to a pull algorithm!\n for each x, y { sx = x + rand(-1, 1) sy = y + rand(1, 2) output[y][x] = input[sy][sx] - rand(0, 1)}\n Cells pull the fire upward from the bottom. Though this time there\u2019s acatch:  This algorithm will have subtly different results.\n In the original, there\u2019s a single state buffer and so a flame couldpropagate upwards multiple times in a single pass. I\u2019ve compensatedhere by allowing a flames to propagate further at once.\n  In the original, a flame only propagates to one other cell. In thisversion, two cells might pull from the same flame, cloning it.\n In the end it\u2019s hard to tell the difference, so this works out.\n   There\u2019s still potentially contention in that  rand() function, but thiscan be resolved  with a hash function that takes  x and  y asinputs.\n      Have a comment on this article? Start a discussion in my  public inbox by sending an email to   ~skeeto/public-inbox@lists.sr.ht    [ mailing list etiquette] , or see  existing discussions.", "posttime": "2020-05-07 19:58:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e73\u884c,pull,\u7b97\u6cd5", "title": "\u5e73\u884c\u65f6\uff1a\u62c9\u800c\u4e0d\u63a8", "title_en": "When Parallel: Pull, Don't Push", "transed": 1, "url": "https://nullprogram.com/blog/2020/04/30/", "via": "", "real_tags": ["\u5e73\u884c", "pull", "\u7b97\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001059, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u89c1\u8fc7\u5f88\u591a\u7f51\u7ad9\u4ee5\u4e0d\u592a\u7406\u60f3\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002\u5176\u4e2d\u4e00\u4e2a\u5c5e\u4e8e\u4e00\u4e2a\u5ba2\u6237\uff0c\u8be5\u5ba2\u6237\u62e5\u6709\u6765\u81ea\u5176\u6240\u6709\u5b89\u88c5\u7684\u6e90\u6e90\u4e0d\u65ad\u7684\u8f93\u5165\u70b9\u51fb\u6570\u636e\u3002\u4ed6\u4eec\u67096\u53f0Web\u670d\u52a1\u5668\u4f4d\u4e8e\u8d1f\u8f7d\u5747\u8861\u5668\u540e\u9762\uff0c\u6240\u6709\u670d\u52a1\u5668\u90fd\u5728\u5411\u6570\u636e\u5e93\u5199\u5165\u6570\u636e\u3002\u95ee\u9898\u662f\uff0c\u867d\u71365\u52306\u53f0\u673a\u5668\u53ef\u4ee5\u8ddf\u4e0a\u8d1f\u8f7d\uff0c\u4f464\u53f0\u6216\u66f4\u5c11\u7684\u673a\u5668\u5374\u65e0\u6cd5\u627f\u53d7\u3002\u4ed6\u4eec\u9700\u8981\u89e3\u51b3\u95ee\u9898\u3002\n\u5f53\u4e8b\u60c5\u53d8\u5f97\u7cdf\u7cd5\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u4f1a\u53d8\u5f97\u975e\u5e38\u4e11\u964b\u3002\u8ba9\u6211\u4eec\u5047\u8bbe\u4e00\u5207\u5f00\u59cb\u90fd\u5f88\u987a\u5229\u3002\u6240\u6709\u516d\u53f0\u673a\u5668\u90fd\u5728\u55e1\u55e1\u4f5c\u54cd\uff0c\u5904\u7406\u7740\u8d1f\u8f7d\u3002\u7136\u540e\u4e00\u4e9b\u4e0d\u597d\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u5176\u4e2d\u4e00\u4e2a\u9000\u51fa\u4e86\u3002\u73b0\u5728\u6709\u4e94\u53f0\u673a\u5668\u5728\u5904\u7406\u8d27\u7269\uff0c\u6bcf\u4e00\u53f0\u90fd\u63a5\u8fc7\u4e86\u4e00\u4e9b\u95f2\u7f6e\u7684\u4e1c\u897f\u3002\u4ed6\u4eec\u73b0\u5728\u6b63\u5904\u4e8e\u4e34\u754c\u70b9\u3002\u73b0\u5728\u53c8\u6709\u4e00\u4e2a\u4eba\u6b7b\u4e86\u3002\u73b0\u5728\u91cd\u65b0\u5e73\u8861\u5230\u5269\u4f59\u56db\u53f0\u673a\u5668\u7684\u8d1f\u8f7d\u5b9e\u5728\u592a\u5927\u4e86\uff0c\u7ed3\u679c\u5b83\u4eec\u90fd\u6b7b\u4e86\u3002\n\u5934\u51e0\u6b21\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u4ed6\u4eec\u6253\u6765\u7535\u8bdd\uff0c\u8981\u6c42\u91cd\u65b0\u542f\u52a8\u4ed6\u4eec\u7684\u673a\u5668\u3002\u6570\u636e\u4e2d\u5fc3\u4eba\u5458\u786e\u5b9e\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u63a8\u51fa\u4e86\u4e00\u8f86\u6025\u6551\u8f66\uff0c\u5e76\u6309\u987a\u5e8f\u91cd\u65b0\u542f\u52a8\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u5c06\u5f00\u59cb\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u6309\u987a\u5e8f\u91cd\u65b0\u542f\u52a8Apache\u3002\u4e00\u65e6\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ed6\u4eec\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u5c31\u4f1a\u5f00\u59cb\u5411\u90a3\u4e2a*\u4e00\u4e2a*Web\u670d\u52a1\u5668\u53d1\u9001\u6d41\u91cf\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u5b83\u5c31\u4f1a\u6b7b\u53bb\u3002\u7136\u540e\uff0c\u7b2c\u4e8c\u53f0\u91cd\u65b0\u542f\u52a8\u7684\u673a\u5668\u4f1a\u51fa\u73b0\u5e76\u88ab\u7830\u7684\u4e00\u58f0\u649e\u4e0a\uff0c\u7136\u540e\u5c31\u4f1a\u6b7b\u6389\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\u5b83\u7ec8\u4e8e\u5230\u4e86\u5fc5\u987b\u9075\u5faa\u6574\u4e2a\u8352\u8c2c\u8fc7\u7a0b\u7684\u5730\u6b65\u3002\u9996\u5148\uff0c\u9700\u8981\u7981\u7528\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u8fd9\u9700\u8981\u7ed9\u5b9e\u9645\u7ba1\u7406\u8fd9\u4e9b\u8bbe\u5907\u7684\u4eba\u5458\u6253\u7535\u8bdd\u3002\u63a5\u4e0b\u6765\uff0c\u5fc5\u987b\u91cd\u65b0\u542f\u52a8\u6240\u6709Web\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u5fc5\u987b\u4fee\u590d\u914d\u7f6e\u4e2d\u7684\u4efb\u4f55\u95ee\u9898\u3002\u53ea\u6709\u5728\u6240\u6709\u4eba\u90fd\u5065\u5eb7\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u91cd\u65b0\u542f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u7684VIP\u3002\u8fd9\u975e\u5e38\u8017\u65f6\u3001\u5bb9\u6613\u51fa\u9519\uff0c\u800c\u4e14\u624b\u5de5\u64cd\u4f5c\u975e\u5e38\u70e6\u4eba\u3002\n\u6211\u542c\u8bf4\u4e86\u8fd9\u4e00\u5207\uff0c\u7136\u540e\u8bf4\uff0c\u5929\u54ea\uff0c\u5927\u591a\u6570\u8fd0\u8425\u7f51\u7ad9\u7684\u4eba\u90fd\u60f3\u8981\u9ad8\u53ef\u7528\u6027\u548c\u5fc3\u8df3\u3002\u4f60\u4eec\u9700\u8981\u7684\u662f\u5f53\u5b83\u201c\u771f\u7684\u201d\u574f\u4e86\u7684\u65f6\u5019\u5c3d\u91cf\u51cf\u5c11\u505c\u673a\u65f6\u95f4\uff0c\u800c\u4f60\u4eec\u771f\u7684\u9700\u8981\u4e00\u4e2a\u81ea\u6740\u534f\u8bae\u3002\u6211\u628a\u5b83\u63cf\u8ff0\u4e3a\u8fd9\u6837\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5728\u8fd9\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u53f0\u4e3b\u673a\u90fd\u4f1a\u76d1\u63a7\u81ea\u5df1\u7684Web\u670d\u52a1\u5668\uff0c\u5e76\u4f1a\u53d1\u51fa\u4e00\u4e2a\u4fe1\u6807\uff0c\u8bf4\u5b83\u662f\u5065\u5eb7\u7684\u3002\u5176\u4ed6\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u4f1a\u76d1\u89c6\u8fd9\u4e9b\u4fe1\u6807\uff0c\u5e76\u8ddf\u8e2a\u8c01\u8fd8\u6d3b\u7740\u3002\n\u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u6574\u4e2a\u7cfb\u7edf\u4f4e\u4e8e\u67d0\u4e2a\u9608\u503c(\u79f0\u5176\u4e3a\u6700\u5c0f\u9608\u503c\uff0c\u79f0\u5176\u4e3aquorum\uff0c\u7b49\u7b49)\uff0c\u90a3\u4e48\u5269\u4f59\u7684\u6240\u6709\u4e3b\u673a\u90fd\u4f1a\u6545\u610f\u6740\u6b7bApache\u3002\u5f53\u7136\uff0c\u8fd9\u8ba9\u7f51\u7ad9\u762b\u75ea\u4e86\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u4e8b\u60c5\u4f1a\u66f4\u5feb\u5730\u6062\u590d\u8fc7\u6765\u3002\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u91cd\u65b0\u542f\u52a8\u6700\u5c11\u6570\u91cf\u7684\u673a\u5668\uff0c\u5e76\u4e14\u6574\u4e2a\u5207\u6362\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u4e8b\u60c5\u4e0d\u5fc5\u53d1\u751f(\u4e24\u6b21)\u3002\n\u6211\u4eec\u6700\u7ec8\u628a\u5b83\u4f5c\u4e3a\u6d6a\u6d8c\u4fdd\u62a4\u5668\u5356\u7ed9\u4ed6\u4eec\uff0c\u7ed9\u5b83\u7684\u4e8c\u8fdb\u5236\u547d\u540d\uff0c\u4f46\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u5b83\u7684\u610f\u601d\u3002\u987e\u5ba2\u5f88\u559c\u6b22\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5468\u91cc\uff0c\u4ed6\u4eec\u6781\u5927\u5730\u6269\u5c55\u4e86\u914d\u7f6e\uff0c\u5e76\u5f00\u59cb\u5904\u7406\u66f4\u591a\u7684\u6d41\u91cf\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u518d\u5bb3\u6015\u8fc7\u591a\u7684\u6d41\u91cf\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\n\u5f53\u7136\uff0c\u4ed6\u4eec\u53ef\u4ee5\u91cd\u5199\u4ed6\u4eec\u7684\u7f51\u7ad9\u4ee3\u7801\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u8ba9\u673a\u5668\u9677\u5165\u4e00\u573a\u6570GB\u6df1\u7684\u4ea4\u6362\u72c2\u6b22\u3002\u4ed6\u4eec\u672c\u53ef\u4ee5\u5728\u6ca1\u6709\u4efb\u4f55\u4e1c\u9053\u4e3b\u53c2\u4e0e\u7684\u60c5\u51b5\u4e0b\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4ed6\u4eec\u6ca1\u6709\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u6709\u4e86\u4e00\u4e2a\u6545\u4e8b\uff0c\u8bb2\u7684\u662f\u6211\u6709\u4e00\u6b21\u6545\u610f\u8bbe\u8ba1\u4e86\u4e00\u4e9b\u4e1c\u897f\uff0c\u7528\u4ee4\u4eba\u53d1\u75d2\u7684\u6273\u673a\u624b\u6307\u6740\u6b7b\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5e76\u5f88\u9ad8\u5174\u5730\u8ba9\u5ba2\u6237\u4e3a\u6b64\u4e70\u5355\u3002", "note_en": "I&#39;ve seen a lot of web sites implemented in less-than-ideal ways. One of them belonged to a customer which had a relentless torrent of incoming click data from all of their installations. They had six web servers sitting behind a load balancer, all writing to a database. The trouble is that while 5 or 6 machines could keep up with the load, 4 or fewer could not. They needed a fix.\n When things would go bad, they would get pretty ugly. Let&#39;s say everything starts out okay. All six machines are humming along, handling the load. Then something bad happens, and one drops out. Now there are five machines handling the load, and each one has picked up some of the slack. They&#39;re now running right at the breaking point. Now another one of them dies. The load now rebalanced to four remaining machines is just far too big, and they all die as a result.\n The first couple of times this happened, they called in and asked for their machines to be rebooted. The data center people did exactly that, rolling out a crash cart and rebooting them in sequence. So they&#39;d start rebooting, and would restart Apache in sequence. Once that happened, their load balancer would go &#34;aha!&#34;, and start sending traffic to that *one* web server. Unsurprisingly, it would then die. Then the second machine rebooted would come up and get slammed, and would die, and so on.\n It finally got to where this whole ridiculous process had to be followed. First, the load balancer needed to be disabled, necessitating a call to the folks who actually managed those devices. Next, all of the web servers had to be rebooted, and any problem in the config had to be fixed. Only then, with all of them healthy, could the load balancer&#39;s VIP be re-enabled. This was time-consuming, error-prone, and annoyingly manual.\n I heard about all of this and said, gee, most people running web sites want high availability and &#34;heartbeat&#34;. What you guys need is to minimize the downtime when it *does* break, and you really need a  suicide pact. I described it as a system where each host would monitor its own web server, and would send out a beacon saying it was healthy. Every other system would keep tabs on those beacons and keep track of who was still alive.\n If for some reason the entire system dropped below some threshold (call it a minimum, call it quorum, whatever), then every remaining host would purposely kill Apache. Sure, this took the site down, but it meant things would come back up far more quickly. This was possible since only the minimum number of machines had to be rebooted, and the whole &#34;toggle the load balancer&#34; thing didn&#39;t have to happen (twice).\n We wound up selling it to them as &#34;surge protector&#34; to give a name to its binary, &#34;sp&#34;, but everyone really knew what it meant. The customer loved it. They expanded their config enormously over the weeks that followed, and grew to handle much more traffic since they were no longer afraid of what would happen when too much came in.\n Sure, they could have rewritten their web site code so it didn&#39;t send the machines into a many-GB-deep swap fest. They could have done that without getting any hosting people involved. They didn&#39;t, and so now I have a story about the time I purposely designed something to kill a web site with an itchy trigger finger and gladly had a customer pay for it.", "posttime": "2020-05-07 19:58:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bf7\u6c42,web,\u8d1f\u8f7d", "title": "\u5ba2\u6237\u8bf7\u6c42\u7684\u81ea\u6bc1\u7f51\u7ad9(2011)", "title_en": "A self-killing web site requested by a customer (2011)", "transed": 1, "url": "https://rachelbythebay.com/w/2011/06/28/sp/", "via": "", "real_tags": ["\u8bf7\u6c42", "web", "\u8d1f\u8f7d"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001058, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Android\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684WebView\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8fde\u63a5\u5230\u8be5WebView\uff0c\u4ee5\u4fbf\u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u4e2d\u663e\u793a\u7f51\u9875\u3002\u7136\u800c\uff0cAndroid\u7684WebView\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u7528\u6765\u6784\u5efa\u6d4f\u89c8\u5668\u7684\uff0c\u56e0\u6b64\uff0c\u8bb8\u591a\u9ad8\u7ea7WebAPI\u88ab\u7981\u7528\u3002\u6b64\u5916\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u79fb\u52a8\u7684\u76ee\u6807\uff1a\u4e0d\u540c\u7684\u624b\u673a\u53ef\u80fd\u6709\u4e0d\u540c\u7684WebView\u7248\u672c\uff0c\u800c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u7248\u672c\u3002\n\u529f\u80fd\u9f50\u5168\uff1aGeckoView\u65e8\u5728\u901a\u8fc7\u7b80\u5355\u7684API\u5c06Web\u7684\u5168\u90e8\u529f\u80fd\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u662f\u5145\u5206\u5229\u7528Gecko(\u9a71\u52a8Firefox\u7684\u5f15\u64ce)\u7684\u80fd\u529b\uff0c\u800c\u5b83\u7684API\u7c7b\u4f3c\u4e8eWebView\u5e76\u4e14\u6613\u4e8e\u4f7f\u7528\u3002\n\u9002\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u6d4f\u89c8\u5668\uff1aGeckoView\u7279\u522b\u9002\u5408\u6784\u5efa\u79fb\u52a8\u6d4f\u89c8\u5668\uff0c\u4f46\u5b83\u53ef\u4ee5\u4f5c\u4e3aWeb\u5f15\u64ce\u7ec4\u4ef6\u5d4c\u5165\u5230\u4efb\u4f55\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\n\u72ec\u7acb\u7684\uff1a\u56e0\u4e3aGeckoView\u662f\u4e0e\u5e94\u7528\u7a0b\u5e8f\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u72ec\u7acb\u5e93\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u786e\u4fe1\u6d4b\u8bd5\u7684\u4ee3\u7801\u662f\u5b9e\u9645\u8fd0\u884c\u7684\u4ee3\u7801\u3002", "note_en": "Android offers a built-in WebView, which applications can hook into in order to display web pages within the context of their app. However, Android\u2019s WebView is not really intended for building browsers, and hence, many advanced Web APIs are disabled. Furthermore, it is also a moving target: different phones might have different versions of WebView, all of which your app has to support.\n  Full-featured: GeckoView is designed to expose the entire power of the Web to applications, and all that through a straightforward API. Think of it as harnessing the full power of Gecko (the engine that powers Firefox), while its API is WebView-like and easy to use.\n  Suited for apps and browsers: GeckoView is particularly suited for building mobile browsers, but it can be embedded as a web engine component in any kind of app.\n  Self-Contained: Because GeckoView is a standalone library that you bundle with your application, you can be confident that the code you test is the code that will actually run.", "posttime": "2020-05-07 19:58:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "android,geckoview,\u5e94\u7528\u7a0b\u5e8f", "title": "\u9002\u7528\u4e8eAndroid\u7684GeckoView", "title_en": "GeckoView for Android", "transed": 1, "url": "https://mozilla.github.io/geckoview/", "via": "", "real_tags": ["android", "geckoview", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001056, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6709\u4e00\u5806\u968f\u610f\u7684\u62b1\u6028\uff0c\u62b1\u6028\u8fd9\u9879\u4e91\u4e1a\u52a1\u6700\u8fd1\u8fdb\u5c55\u5230\u54ea\u91cc\u53bb\u4e86\u3002\u4f3c\u4e4e\u6709\u592a\u591a\u7684\u4eba\u8ba4\u4e3a\u5728\u522b\u4eba\u7684\u786c\u4ef6\u4e0a\u8fd0\u884c\u865a\u62df\u673a\u662f\u505a\u4efb\u4f55\u4e8b\u60c5\u7684\u552f\u4e00\u65b9\u5f0f\u3002\u8fd9\u5e76\u4e0d\u80fd\u514d\u9664\u4f60\u771f\u6b63\u64c5\u957f\u8fd9\u4ef6\u4e8b\uff0c\u800c\u4e14\u5e38\u5e38\u4f7f\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u5230\u4f60\u6c38\u8fdc\u65e0\u6cd5\u771f\u6b63\u53d1\u5149\u7684\u5730\u6b65\u3002\n\u6211\u4f1a\u76f4\u622a\u4e86\u5f53\u5730\u8bf4\uff1a\u6211\u66f4\u559c\u6b22\u7269\u7406\u786c\u4ef6\u3002\u6211\u786e\u5207\u5730\u77e5\u9053\u6211\u5728\u5904\u7406\u4ec0\u4e48\uff0c\u800c\u4e14\u5f53\u6211\u8bd5\u56fe\u8ffd\u8e2a\u95ee\u9898\u65f6\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u6015\u7684\u4e8b\u60c5\u5728\u53d1\u751f\u3002(\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u201c\u6211\u5f88\u6e05\u695a\u81ea\u5df1\u5728\u5904\u7406\u4ec0\u4e48\uff0c\u5f53\u6211\u8bd5\u56fe\u8ffd\u8e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u6015\u7684\u4e8b\u60c5\u5728\u53d1\u751f\u3002\u201d\u5982\u679c\u78c1\u76d8\u5f88\u6162\uff0c\u6211\u53ef\u4ee5\u627e\u51fa\u539f\u56e0\u3002\u5982\u679c\u7f51\u7edc\u4e0d\u6b63\u5e38\uff0c\u6211\u53ef\u4ee5\u627e\u51fa\u539f\u56e0\u3002\u6ca1\u6709\u4e00\u4e2a\u795e\u79d8\u7684\u4e3b\u673a\u7cfb\u7edf\u751f\u6d3b\u5728\u522b\u4eba\u7684\u4e16\u754c\u91cc\uff0c\u8fd9\u662f\u6211\u65e0\u6cd5\u4f01\u53ca\u7684\u3002\n\u5982\u679c\u4f60\u60f3\u8981\u5173\u4e8e\u751f\u4ea7\u73af\u5883\u7684\u751f\u6d3b\u5965\u79d8\u7684\u4ee4\u4eba\u6ee1\u610f\u7684\u7b54\u6848\uff0c\u4f60\u9700\u8981\u80fd\u591f\u5f04\u6e05\u4e8b\u60c5\u7684\u771f\u76f8\u3002\u6bcf\u6b21\u60a8\u5f15\u5165\u4e00\u4e9b\u865a\u62df\u5316\uff0c\u90fd\u4f1a\u964d\u4f4e\u627e\u5230\u7b54\u6848\u7684\u53ef\u80fd\u6027\u3002\u5f53\u5b83\u8de8\u57df\u8fdb\u5165\u53e6\u4e00\u5bb6\u516c\u53f8\u6216\u4f9b\u5e94\u5546\u6216\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u65f6\uff0c\u60c5\u51b5\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u60a8\u53ea\u80fd\u964d\u4f4e\u60a8\u7684\u6807\u51c6\uff0c\u5e76\u63a5\u53d7\u66f4\u591a\u7684\u4e0d\u786e\u5b9a\u6027\u3001\u574f\u5904\u3001\u505c\u673a\u548c\u5176\u4ed6\u5947\u602a\u7684\u884c\u4e3a\u3002\u4f60\u5fc5\u987b\u63a5\u53d7\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u6709\u4e9b\u4e8b\u60c5\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u771f\u6b63\u597d\u8f6c\u3002\u5c31\u5728\u8fd9\u91cc\uff0c\u8fd9\u4e2a\u56e0\u7d20\u4f1a\u8d76\u8d70\u4e00\u4e9b\u4eba\u3002\u4ed6\u4eec\u8981\u4e48\u52a0\u5165\uff0c\u7136\u540e\u548c\u5e73\u89e3\u51b3\uff0c\u8981\u4e48\u4ece\u4e00\u5f00\u59cb\u5c31\u6c38\u8fdc\u4e0d\u52a0\u5165\u3002\n\u6211\u5e94\u8be5\u63d0\u5230\u7684\u662f\uff0c\u5728\u4e0d\u5b58\u5728\u89e3\u51b3\u95ee\u9898\u7684\u7406\u7531\u7684\u60c5\u51b5\u4e0b\uff0c\u5f15\u5165\u8fd9\u4e9b\u89e3\u51b3\u5947\u70b9\u7684\u65b9\u6cd5\u4e5f\u4e3a\u6c5f\u6e56\u9a97\u5b50\u3001\u6b3a\u8bc8\u548c\u666e\u904d\u7684\u65e0\u80fd\u521b\u9020\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u673a\u4f1a\u3002\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u5f88\u5bb9\u6613\u3002\u6bcf\u6b21\u6709\u4e0d\u597d\u7684\u4e8b\u60c5\u53d1\u751f\uff0c\u4f60\u5c31\u628a\u5b83\u5f52\u548e\u4e8e\u67d0\u4e2a\u5df2\u77e5\u7684\u9ebb\u70e6\u5730\u70b9\u3002\u4eba\u4eec\u559c\u6b22\u4ed6\u4eec\u7684\u66ff\u7f6a\u7f8a\u3002\n\u6240\u6709\u8fd9\u4e9b\u865a\u62df\u673a\u3001\u4e91\u548c\u5f39\u6027\u6269\u5c55\u4e1a\u52a1\u8fd8\u6709\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u65b9\u9762\uff1a\u53ef\u4ee5\u521b\u9020\u7684\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u8d44\u91d1\u6c89\u6ca1\u3002\u4f3c\u4e4e\u6bcf\u4e2a\u4eba\u90fd\u5236\u5b9a\u4e86\u67d0\u79cd\u89c4\u5219\uff0c\u53ea\u5173\u6ce8CPU\u4f7f\u7528\u7387\uff0c\u7136\u540e\u5728\u5b83\u8d85\u8fc7\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u4efb\u4f55\u65f6\u5019\u90fd\u4f1a\u6709\u5e2e\u52a9\u5730\u8bbe\u7f6e\u66f4\u591a\u7684\u5b9e\u4f8b\u3002\n\u8fd9\u5bfc\u81f4\u7684\u53ef\u6015\u884c\u4e3a\u7684\u6570\u91cf\u7b80\u76f4\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u3002\u5b83\u5fc5\u987b\u8ba9\u4eba\u770b\u5230\u624d\u80fd\u8ba9\u4eba\u76f8\u4fe1\u3002\u6211\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u554a\uff0c\u662f\u7684\uff0c\u548c\u6211\u4e00\u8d77\u5728\u8bb0\u5fc6\u7684\u5c0f\u5df7\u91cc\u65c5\u884c\u5427\u3002\n\u6211\u5728\u4e00\u4e2a\u6709\u5f88\u591a\u7269\u7406\u673a\u5668\u7684\u5730\u65b9\u5de5\u4f5c\u3002\u5b83\u8fd8\u6709\u4e00\u6574\u4e2a\u56e2\u961f\uff0c\u9664\u4e86\u8ba1\u5212\u548c\u5206\u914d\u5bb9\u91cf\u4e4b\u5916\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u6362\u8a00\u4e4b\uff0c\u8be5\u7ec4\u7ec7\u786e\u4fdd\u4eba\u4eec\u5728\u9002\u5f53\u7684\u65f6\u5019\u5f97\u5230\u673a\u5668\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u56e0\u4e3a\u4ed6\u4eec\u63d0\u51fa\u4e86\u8981\u6c42\u3002\u800c\u4e14\uff0c\u4ed6\u4eec\u4e5f\u4e0d\u662f\u65e0\u77e5\u7684\u7b97\u5b50\u624b\u3002\n\u56e2\u961f\u5206\u914d\u5de5\u4f5c\u80cc\u540e\u7684\u771f\u6b63\u63a8\u52a8\u529b\u662f\u6211\u7684\u4e00\u4e2a\u670b\u53cb\uff0c\u4e00\u4e2a\u574f\u5bb6\u4f19\u5de5\u7a0b\u5e08\u3002\u5728\u516c\u53f8\u4efb\u804c\u7684\u8fd1\u5341\u5e74\u91cc\uff0c\u4ec5\u8fd9\u4e00\u4eba\u5c31\u53ef\u80fd\u4e3a\u516c\u53f8\u8282\u7701\u4e86\u76f8\u5f53\u4e8e\u591a\u5ea7\u5927\u697c\u7684\u673a\u5668\u3002\n\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u5f88\u7b80\u5355\u3002\u6bcf\u6b21\u6709\u56e2\u961f\u60f3\u8981\u4e00\u5957\u5168\u65b0\u7684\u786c\u4ef6\u65f6\uff0c\u6211\u7684\u670b\u53cb\u5c31\u4f1a\u51fa\u53bb\u770b\u770b\u4ed6\u4eec\u662f\u5982\u4f55\u4f7f\u7528\u73b0\u6709\u786c\u4ef6\u7684\u3002\u8fd9\u4e5f\u4e0d\u4ec5\u4ec5\u662fCPU\u5229\u7528\u7387\u7684\u95ee\u9898\u3002\u6211\u7684\u670b\u53cb\u60f3\u77e5\u9053\u5b83\u662f\u5982\u4f55\u4f7f\u7528CPU\u7684\u3002\u5982\u679c\u5b83\u5728\u505a\u611a\u8822\u548c\u4f4e\u6548\u7684\u4e8b\u60c5\uff0c\u5f53\u4ed6\u4eec\u8fd0\u884c\u5206\u6790\u65f6\uff0c\u5b83\u5c31\u4f1a\u88ab\u6d17\u6389\u3002\u4ed6\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u4e1c\u897f\u5728\u54ea\u91cc\u6d88\u78e8\u65f6\u95f4\u3002\u6bd5\u7adf\uff0c\u5256\u6790\u662f\u4e00\u4ef6\u4e8b\u3002\n\u8fd9\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6548\u679c\uff0c\u8feb\u4f7f\u56e2\u961f\u8bda\u5b9e\u548c\u5766\u7387\u5730\u63cf\u8ff0\u4ed6\u4eec\u7684\u9700\u6c42\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u6d6a\u8d39\uff0c\u7136\u540e\u8ba4\u4e3a\u66f4\u591a\u7684\u786c\u4ef6\u53ef\u4ee5\u62ef\u6551\u4ed6\u4eec\u3002\u4ed6\u4eec\u4e0d\u80fd\u968f\u610f\u82b1\u516c\u53f8\u7684\u94b1\u3002\u6211\u7684\u670b\u53cb\u548c\u5979\u6240\u4ee3\u8868\u7684\u56e2\u961f\u6ca1\u6709\u628a\u4e8b\u60c5\u641e\u5f97\u4e00\u56e2\u7cdf\u3002\n\u4e0d\u8fc7\uff0c\u5176\u4e2d\u4e00\u4e9b\u4e91\u7aef\u7f51\u7ad9\u5c31\u6ca1\u6709\u8fd9\u6837\u7684\u76d1\u7ba1\u4e86\u3002\u4ed6\u4eec\u6784\u5efa\u81ea\u5df1\u7684\u7cfb\u7edf\u53ea\u662f\u4e3a\u4e86\u81ea\u52a8\u6269\u5c55\uff0c\u4e0d\u65ad\u6269\u5c55\uff0c\u4e0d\u65ad\u6269\u5c55\u3002\u5f88\u5feb\uff0c\u5c31\u4f1a\u6709\u51e0\u5341\u4e2a\uff0c\u7136\u540e\u51e0\u767e\u4e2a\uff0c\u751a\u81f3\u51e0\u5343\u4e2a\u8fd9\u6837\u7684\u75af\u72c2\u7684\u4e1c\u897f\u3002\u5982\u679c\u4ed6\u4eec\u7f16\u5199\u4e86\u7cdf\u7cd5\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u4ed6\u4eec\u7684\u8db3\u8ff9\u6bcf\u5929\u90fd\u5728\u589e\u52a0\uff0c\u4ed6\u4eec\u751a\u81f3\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\u53ef\u80fd\u7684\u60c5\u51b5\u662f\uff0c\u56e2\u961f\u672c\u8eab\u5e76\u4e0d\u77e5\u9053\u4ed6\u4eec\u5728\u4f7f\u7528\u591a\u5c11\u53f0\u673a\u5668(\u5b9e\u9645\u4e0a\u662f\u865a\u62df\u673a)\uff0c\u4e5f\u4e0d\u77e5\u9053\u5b83\u7684\u53d8\u5316\u901f\u5ea6\u6709\u591a\u5feb\u3002\n\u6ca1\u6709\u7b49\u540c\u4e8e\u6211\u7684\u670b\u53cb\u7ad9\u5728\u90a3\u91cc\u544a\u8bc9\u4ed6\u4eec\u5148\u4f18\u5316\u4ed6\u4eec\u7cdf\u7cd5\u7684\u4ee3\u7801\uff0c\u7136\u540e\u4ed6\u4eec\u624d\u80fd\u83b7\u5f97\u66f4\u591a\u7684\u786c\u4ef6\u3002\u4f9b\u5e94\u548c\u90e8\u7f72\u7cfb\u7edf\u5c06\u4f1a\u6cc4\u9732\u8fd9\u4e00\u70b9\uff0c\u4ed6\u4eec\u786e\u5b9e\u662f\u8fd9\u6837\u505a\u7684\u3002\n\u901a\u5e38\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\u662f\uff0c\u6709\u4eba\u4f1a\u5b9a\u671f\u8fd0\u884c\u4e00\u4efd\u62a5\u544a\uff0c\u53d1\u73b0\u4e00\u4e9b\u4ee4\u4eba\u5174\u594b\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\uff0c\u54c7\uff0c\u670d\u52a1X\u73b0\u5728\u57281200\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u3002\u600e\u4e48\u4f1a\u51fa\u8fd9\u4e8b\uff1f\u8fd9\u5f88\u5bb9\u6613\u3002\u6ca1\u6709\u4eba\u963b\u6b62\u4ed6\u4eec\u5728\u76ee\u524d\u7684\u8bbe\u7f6e\u4e2d\u9700\u89811200\u53f0\u673a\u5668\u3002\u4eba\u4eec\u7ede\u5c3d\u8111\u6c41\u627f\u8bfa\u4f1a\u505a\u5f97\u66f4\u597d\uff0c\u4f46\u90a3\u4e9b\u611a\u8822\u7684\u4f8b\u5b50\u4ecd\u7136\u5750\u5728\u90a3\u91cc\uff0c\u6574\u65e5\u6574\u591c\u5730\u70e7\u94b1\u3002\n\u5728\u53e6\u4e00\u4e2a\u65b9\u5411\u4e5f\u6709\u4e50\u8da3\u3002\u6709\u4eba\u53ef\u80fd\u4f1a\u8bbe\u7f6e\u4e00\u6761\u89c4\u5219\uff0c\u4e00\u65e6\u4ed6\u4eec\u7684\u5de5\u4f5c\u4f4e\u4e8e\u67d0\u4e2aCPU\u4f7f\u7528\u7387\uff0c\u5c31\u7f29\u51cf\u4ed6\u4eec\u7684\u5de5\u4f5c\u89c4\u6a21\u3002\u4e5f\u8bb8\u6bcf\u5f53\u5229\u7528\u7387\u4f4e\u4e8e10%\u6216\u7c7b\u4f3c\u60c5\u51b5\u65f6\uff0c\u4ed6\u4eec\u5c31\u4f1a\u544a\u8bc9\u7f29\u653e\u5668\u5c06\u5176\u964d\u4f4e\u4e00\u4e2a\u6863\u6b21\u3002\n\u4f60\u8ba4\u4e3a\u5f53\u5b83\u7b2c\u4e00\u6b21\u975e\u5e38\u5b89\u9759\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6709\u4e00\u6b21\u5b83\u964d\u4e0b\u6765\u4e86\uff0c\u7136\u540e\u90a3\u4e2a\u5b9e\u4f8b\u6210\u529f\u5730\u964d\u5230\u4e8610%\u4ee5\u4e0b\uff1f\u5982\u679c\u4f60\u8bf4\u81ea\u52a8\u5b9a\u6807\u5668\u628a\u5b83\u964d\u5230\u96f6\uff0c\u4f60\u5c31\u5bf9\u4e86\uff01\u662f\u7684\uff0c\u6ca1\u6709\u6700\u5c0f\u5c3a\u5bf8\u9650\u5236\uff0c\u8fd9\u5c31\u662f\u4f60\u5f97\u5230\u7684\u3002\n\u66f4\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u663e\u7136\u8fd9\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u4f46\u4e0d\u4f1a\u7acb\u5373\u4fee\u590d\u3002\u4f60\u4f1a\u8ba4\u4e3a\u5b83\u4f1a\u6ce8\u610f\u5230\u5b83\u9700\u8981\u4e00\u4e9b\u80fd\u529b\u6765\u7ba1\u7406\u4e8b\u60c5\uff0c\u7136\u540e\u8fdb\u5165\u4e00\u573a\u62d4\u6cb3\u6bd4\u8d5b\uff0c\u4ece0\u52301\u518d\u52300\u52301\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u4e00\u6574\u665a\u90fd\u662f\u5982\u6b64\u3002\n\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\uff0c\u4e00\u65e6\u6ca1\u6709\u66f4\u591a\u7684\u5b9e\u4f8b\u5728\u8fd0\u884c\uff0c\u4efb\u4f55\u8861\u91cfCPU\u5229\u7528\u7387\u7684\u4e1c\u897f\u90fd\u53ef\u80fd\u9664\u4ee5\u96f6\uff0c\u5e76\u4e14\u4e0d\u80fd\u8d85\u8fc7\u8be5\u70b9\u3002\u4e0d\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u4f3c\u4e4e\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\n\u7136\u540e\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u5de7\u5999\u60c5\u51b5\u3002\u6211\u5728\u522b\u5904\u8c08\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u7ed9\u51fa\u603b\u7ed3\u3002\u60a8\u6709\u4e00\u9879\u670d\u52a1\u5fc5\u987b\u6b63\u5e38\u8fd0\u884c\u3002\u5b83\u5c31\u4f1a\u6b7b\u3002\u5176\u4ed6\u6240\u6709\u8bbe\u5907\u7684\u6d41\u91cf\u90fd\u4f1a\u4e0b\u964d\uff0c\u56e0\u6b64\u5916\u9762\u7684CPU\u5229\u7528\u7387\u4e5f\u4f1a\u4e0b\u964d\u3002\u8fd9\u4e9b\u5176\u4ed6\u670d\u52a1\u90fd\u662f\u6309\u6bd4\u4f8b\u7f29\u51cf\u7684\u3002\n\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u57fa\u672c\u670d\u52a1\u91cd\u65b0\u5f00\u59cb\u5de5\u4f5c\u3002\u8f66\u6d41\u8702\u62e5\u800c\u81f3\uff0c\u7136\u540e..\u3002\u554a\u54e6\uff01\u90a3\u4e9b\u5176\u4ed6\u670d\u52a1\u73b0\u5728\u592a\u5c0f\u4e86\uff0c\u65e0\u6cd5\u5904\u7406\u8d1f\u8f7d\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5b83\u4eec\u4ee5\u4f60\u80fd\u60f3\u8c61\u5230\u7684\u6700\u8106\u5f31\u7684\u65b9\u5f0f\u7f16\u5199\uff0c\u6240\u4ee5\u5b83\u4eec\u751a\u81f3\u4e0d\u80fd\u5ffd\u7565\u989d\u5916\u7684\u6d41\u91cf\u3002\u4ed6\u4eec\u611a\u8822\u5730\u8bd5\u56fe\u627f\u62c5\u6bcf\u4e00\u4ef6\u5373\u5c06\u5230\u6765\u7684\u4e8b\u60c5\uff0c\u5e76\u6ca1\u6709\u62d2\u7edd\u4ed6\u4eec\u6ca1\u6709\u5e0c\u671b\u5904\u7406\u7684\u4e1c\u897f\u7684\u60f3\u6cd5\u3002\n\u73b0\u5728\u5b83\u4eec\u5b8c\u5168\u9971\u548c\u4e86\uff0c\u4ec0\u4e48\u4e5f\u505a\u4e0d\u4e86\uff0cCPU\u50cf\u75af\u4e86\u4e00\u6837\u8fd0\u8f6c\u3002\u81ea\u52a8\u4f38\u7f29\u529f\u80fd\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8ba9\u66f4\u591a\u5b9e\u4f8b\u8fd0\u884c\u53ef\u80fd\u9700\u898110-15\u5206\u949f\u3002\u8fd9\u4e0d\u662f\u5f00\u73a9\u7b11\u3002\u6211\u89c1\u8fc7\u8fd9\u79cd\u60c5\u51b5\uff0c\u60c5\u51b5\u5e76\u4e0d\u4e50\u89c2\u3002\n\u57fa\u672c\u4e0a\uff0c\u4f60\u5e94\u8be5\u80fd\u591f\u628a\u76f8\u5f53\u4e8e\u706b\u7130\u55b7\u5c04\u5668\u7684\u4e1c\u897f\u5bf9\u51c6\u4f60\u7684\u670d\u52a1\uff0c\u5e76\u8ba9\u5b83\u7ee7\u7eed\u5de5\u4f5c\u3002\u5b83\u4e0d\u5fc5\u63a5\u53d7\u989d\u5916\u7684\u8bf7\u6c42\u3002\u5b83\u5e94\u8be5\u53ea\u505a\u5b83\u65e0\u8bba\u5982\u4f55\u90fd\u80fd\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u89c6\u60c5\u51b5\u5ffd\u7565\u6216\u62d2\u7edd\u5176\u4f59\u7684\u4e8b\u60c5\u3002\u8fd9\u6837\uff0c\u81f3\u5c11\u5b83\u53ef\u4ee5\u5f00\u59cb\u5438\u6536\u4e00\u4e9b\u8d1f\u8377\uff0c\u800c\u4e0d\u53ea\u662f\u6210\u4e3a\u95ee\u9898\u7684\u4e00\u90e8\u5206\u3002\n\u60f3\u60f3\u770b\uff1a\u5982\u679c\u60a8\u7684\u670d\u52a1\u7684\u4efb\u4f55\u4e00\u4e2a\u5b9e\u4f8b\u5728\u63d0\u4f9b\u8db3\u591f\u7684\u8d1f\u8f7d\u65f6\u4f1a\u53d1\u751f\u6545\u969c\u548c\u5d29\u6e83\uff0c\u90a3\u4e48\u5c31\u4f1a\u5c06\u8d1f\u8f7d\u91cd\u65b0\u5e73\u8861\u5230\u5176\u4ed6\u5b9e\u4f8b\u4e0a\u3002\u7136\u540e\uff0c\u5176\u4e2d\u4e00\u4e2a\u4f1a\u6cb8\u817e\uff0c\u5b83\u4f1a\u5173\u95ed\uff0c\u4ece\u800c\u5c06\u8d1f\u8f7d\u91cd\u65b0\u5e73\u8861\u5230\u66f4\u5c11\u7684\u5b9e\u4f8b\u4e0a\u3002\u8fd9\u79cd\u60c5\u51b5\u4f1a\u4e00\u76f4\u6301\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u6574\u4ef6\u4e8b\u53d8\u6210\u4e00\u5757\u7194\u5316\u7684\u7194\u6e23\u3002\n\u4f60\u53ef\u4ee5\u544a\u8bc9\u4f60\uff0c\u5f53\u4f60\u62fc\u51d1\u4e00\u4e9b\u53ef\u6015\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u5173\u95ed\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u76f4\u5230\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u65f6\uff0c\u4f60\u5c31\u5904\u4e8e\u8fd9\u6837\u7684\u60c5\u51b5\u3002\u6216\u8005\uff0c\u4e5f\u8bb8\u60a8\u5df2\u7ecf\u5c06\u7f51\u7edc\u8bbe\u7f6e\u4e3a\u4e22\u5f0350%\u7684\u6d41\u91cf\uff0c\u76f4\u5230\u6211\u4eec\u8d76\u4e0a\u4e3a\u6b62\u3002\u5982\u679c\u4f60\u66fe\u7ecf\u4e0d\u5f97\u4e0d\u8fd9\u4e48\u505a\uff0c\u90a3\u4f60\u5c31\u662f\u5728\u8fd0\u884c\u975e\u5e38\u8106\u5f31\u7684\u4e1c\u897f\uff01\u540c\u6837\uff0c\u5982\u679c\u4f60\u66fe\u7ecf\u62c5\u5fc3\u8fc7\u540c\u65f6\u5f00\u59cb\u6240\u6709\u4e8b\u60c5\uff0c\u5426\u5219\u7b2c\u4e00\u4e2a\u5c31\u4f1a\u716e\u719f\uff0c\u7136\u540e\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5c31\u4f1a\u5d29\u6e83\uff0c\u90a3\u5c31\u8ba9\u6211\u7b2c\u4e00\u4e2a\u544a\u8bc9\u4f60\uff1a\u4f60\u5df2\u7ecf\u5904\u4e8e\u4e0d\u5229\u7684\u5883\u5730\u4e86\u3002\n[\u65c1\u6ce8\uff1a\u5982\u679c\u8fd9\u542c\u8d77\u6765\u5f88\u8033\u719f\uff0c\u90a3\u662f\u56e0\u4e3a\u6211\u5728\u5927\u7ea615\u5e74\u524d\u6709\u4e00\u4f4d\u5ba2\u6237\uff0c\u4ed6\u7edd\u5bf9\u62d2\u7edd\u4fee\u590d\u4ed6\u4eec\u7cdf\u7cd5\u7684\u4ee3\u7801\uff0c\u53ea\u60f3\u8981\u66f4\u597d\u7684\u5de5\u5177\u6765\u5e76\u884c\u542f\u52a8\u548c\u505c\u6b62\u4ed6\u4eec\u7684\u4e1c\u897f\u3002\u7ad9\u5728\u6211\u8fd9\u4e00\u8fb9\u7684\u4eba\u5e76\u4e0d\u662f\u5728\u5bfb\u627e\u53c2\u6570\uff0c\u6240\u4ee5\u4ed6\u4eec\u7ed9\u4e86\u4ed6\u4eec\u4e00\u4e2a\u786e\u5207\u7684\u53c2\u6570\u3002\u4ed6\u4eec\u5f88\u9ad8\u5174\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u5fc5\u8003\u8651\u5199\u51fa\u66f4\u597d\u7684\u4ee3\u7801\u3002\u8fd9\u5c31\u662f\u4f60\u60f3\u4ece\u4f60\u7684\u4e1c\u897f\u91cc\u5f97\u5230\u7684\u5417\uff1f]\u3002\n\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u6446\u8131\u8fd9\u79cd\u60c5\u51b5\u3002\u8fd9\u91cc\u53ea\u6709\u4e00\u4e2a\u3002\u60a8\u53ef\u4ee5\u6682\u65f6\u505c\u6b62\u68c0\u67e5\u4fa6\u542c\u5957\u63a5\u5b57\u7684\u65b0\u8fde\u63a5\u3002\u8fd9\u610f\u5473\u7740\u60a8\u505c\u6b62\u8c03\u7528Accept()\u3002\u4fa6\u542c\u961f\u5217\u5c06\u4f1a\u5907\u4efd\uff0c\u7136\u540e\u4f1a\u53d1\u751f\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u5047\u8bbeLinux\uff0c\u90a3\u4e48\u5728\u90a3\u4e4b\u540e\uff0c\u5b83\u53ef\u80fd\u4f1a\u505c\u6b62\u4e3a\u8fde\u63a5\u5c1d\u8bd5\u53d1\u51faSYN/ACK\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u9b54\u672f\u6765\u4f7f\u5176\u4e3b\u52a8RST\u8fd9\u4e9b\u8fde\u63a5\uff0c\u4ee5\u4fbf\u5ba2\u6237\u7aef\u5feb\u901f\u5931\u8d25\u5e76\u7acb\u5373\u8f6c\u5230\u5176\u4ed6\u5730\u65b9\u3002\u7ba1\u4ed6\u5462\u3002\n\u5f53\u4e8b\u60c5\u5e73\u9759\u4e0b\u6765\u540e\uff0c\u4f60\u53ef\u80fd\u4f1a\u518d\u6b21\u5f00\u59cb\u5bfb\u627e\u90a3\u4e9b\u65b0\u7684\u8054\u7cfb\u3002\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u505a\u4e00\u4e9b\u6574\u6d01\u7684\u4e8b\u60c5\uff0c\u5148\u5904\u7406\u6700\u65b0\u7684\uff0c\u56e0\u4e3a\u6700\u8001\u7684\u53ef\u80fd\u5df2\u7ecf\u7528\u5b8c\u4e86\u5927\u90e8\u5206\u7684\u65f6\u95f4\uff0c\u800c\u4e14\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u4f1a\u7559\u4e0b\u6765\u5b8c\u6210\u5de5\u4f5c\u3002\u8fd9\u5c31\u662f\u6211\u5728\u51e0\u4e2a\u6708\u524d\u7684\u4e00\u7bc7\u5e16\u5b50\u4e2d\u6240\u8bf4\u7684\u7cbe\u6311\u7ec6\u9009\u7684\u540e\u8fdb\u5148\u51fa(LIFO)\u3002\u5f53\u4eba\u4eec\u5904\u4e8e\u4e00\u79cdRPC\u5fc3\u6001\u800c\u4e0d\u662f\u7f51\u7edc\u5fc3\u6001\u65f6\uff0c\u4ed6\u4eec\u5f80\u5f80\u4f1a\u60f3\u5230\u8fd9\u7c7b\u4e8b\u60c5\u3002\n\u60f3\u8981\u4e00\u4e2a\u771f\u6b63\u7c97\u7565\u7684\u8282\u6d41\u4f8b\u5b50\u5417\uff1f\u90ae\u4ef6\u5b88\u62a4\u7a0b\u5e8fSendmail\u8ba9\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u7684\u751f\u6d3b\u53d8\u5f97\u6709\u8da3\u4e86\u5f88\u4e45\uff0c\u5b83\u6709\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f\uff0c\u5b83\u53ef\u4ee5\u76d1\u89c6\u673a\u5668\u7684\u5e73\u5747\u8d1f\u8f7d\u3002\u5982\u679c\u5b83\u8d85\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u51f9\u69fd\uff0c\u5b83\u4ecd\u7136\u4f1a\u63a5\u53d7\u4e00\u4e2a\u8fde\u63a5\uff0c\u4f46\u5b83\u4f1a\u7528\u4e00\u4e2a\u9519\u8bef\u5c06\u5b83\u4eec\u6325\u624b\u79bb\u5f00\u3002\u5982\u679c\u5b83\u901a\u8fc7\u4e86\u7b2c\u4e8c\u7ea7\uff0c\u5b83\u5b9e\u9645\u4e0a\u5c06\u505c\u6b62\u76d1\u542c\u7f51\u7edc\uff01\u8fd9\u662f\u5bf9\u7684\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u5173\u95ed\u4fa6\u542c\u5957\u63a5\u5b57\u4ee5\u5f3a\u5236\u62d2\u7edd\u4efb\u4f55\u8fde\u63a5\u5c1d\u8bd5\u3002\n\u8fd9\u6bd4\u6211\u60f3\u8981\u7684\u66f4\u50cf\u662f\u610f\u8bc6\u6d41\uff0c\u4f46\u6240\u6709\u8fd9\u4e9b\u90fd\u9700\u8981\u8d70\u51fa\u53bb\u3002\u53ef\u80fd\u6027\u662f\uff0c\u6211\u4f1a\u56de\u5230\u8fd9\u4e9b\u8981\u70b9\u4e2d\u7684\u4e00\u4e9b\uff0c\u5e76\u5c06\u5b83\u4eec\u7f16\u6210\u4ed6\u4eec\u81ea\u5df1\u7684\u6545\u4e8b\uff0c\u5173\u4e8e\u4ec0\u4e48\u5e94\u8be5\u505a\uff0c\u4ec0\u4e48\u4e0d\u5e94\u8be5\u505a\uff0c\u4ee5\u53ca\u5982\u4f55\u5224\u65ad\u4f60\u7684\u56e2\u961f\u6216\u516c\u53f8\u5df2\u7ecf\u9677\u5165\u56f0\u5883\u3002", "note_en": "I have a bunch of random complaints about where things have gotten of late with this &#34;cloud&#34; business. It seems like far too many people think that running virtual machines on other people&#39;s hardware is the only way to do anything. It doesn&#39;t absolve you from actually being good at this stuff, and frequently complicates matters to where you can never truly shine.\n I&#39;ll say it up front: I prefer physical hardware. I know exactly what I&#39;m working with, and there&#39;s no spooky stuff going on when I try to track down a problem. If the disk is slow, I can find out why. If the network is being odd, I can find out why. There&#39;s no mysterious &#34;host system&#34; that lives in someone else&#39;s world which is beyond my reach.\n If you want satisfying answers to life&#39;s mysteries about production environments, you need to be able to get to the bottom of things. Every time you introduce some bit of virtualization, you have just reduced the likelihood of finding an answer. This gets even worse when it crosses domains into another company or vendor or whatever.\n At that point, you can only drop your standards, and accept more uncertainty, badness, outages, and other strange behaviors. You have to just live with the fact that some things may never truly get better.Just this element right here will chase off some folks. They will either join up and then peace out, or never join in the first place.\n I should mention that introducing these &#34;troubleshooting singularities&#34; where no reasoning can exist to solve a problem also creates a great opportunity for charlatans, fraud, and general incompetence. Why? That&#39;s easy. Every time something bad happens, you just blame it on something at one of those known trouble spots. People love their scapegoats.\n  There&#39;s another &#34;fun&#34; aspect to all of this virtual machine, cloud, and &#34;elastic scaling&#34; business: the incredible money sink that can be created. It seems like everyone sets up some kind of rule that will just keep an eye on CPU utilization and then will &#34;helpfully&#34; stand up more instances any time it goes past a certain point.\n The number of terrible behaviors this enables is just incredible. It has to be seen to be believed. What do I mean? Ah yes, come with me on a little trip down memory lane.\n I worked at a place that had a bunch of physical machines. It also had a whole group that did nothing but plan and allocate capacity. In other words, that group made sure that people got machines when appropriate, not just because they asked for it. Also, they weren&#39;t ignorant bean-counters, either.\n The real driving force behind that team&#39;s allocation efforts was a badass engineer who was a friend of mine. That person alone probably saved the company multiple buildings worth of machines over the almost decade of tenure there.\n How did this work? Easy. Every time some team wanted a whole whack of new hardware, my friend went out and took a look to see how they were using the stuff they already had. It wasn&#39;t just about CPU utilization, either. My friend wanted to know HOW it was using the CPU. If it was doing stupid and inefficient things, it would come out in the wash when they ran the analysis. They could see where this stuff was spending its time. Profiling is a thing, after all.\n This had a nice effect of forcing teams to be honest and forthcoming about their needs, and to not try to be wasteful and then think that more hardware would save them. They didn&#39;t get to spend the company&#39;s money at will. My friend and the team she represented kept things from becoming a free-for-all.\n Some of these &#34;cloud&#34; places, though, don&#39;t have that kind of oversight. They build their systems to just auto-scale up, and up, and up. Soon, there are dozens, then hundreds, then even thousands of these crazy things. If they write bad code, and their footprint goes up every day, they don&#39;t even realize it. Odds are, the teams themselves have no idea how many &#34;machines&#34; (VMs in reality) they are on, or how quickly it&#39;s changing.\n There&#39;s no equivalent of my friend to stand there and tell them to first optimize their terrible code before they can get more hardware. The provisioning and deploy systems will give it away, and so they do.\n What usually happens is that someone will periodically run a report and find out something mind-blowing, like &#34;oh wow, service X now runs on 1200 machines&#34;. How did this happen? That&#39;s easy. Nobody stopped them from needing 1200 machines in their current setup. People wring their hands and promise to do better, but still those stupid instances sit there, burning cash all day and all night.\n  There&#39;s also fun in the other direction. Someone might set up a rule to &#34;scale down&#34; their job once it falls below some CPU utilization. Maybe they tell the scaler to lower it a notch every time the utilization is below 10% or something like that.\n What do you suppose happens the first time it&#39;s very quiet, it&#39;s down at ONE instance, and then that one instance manages to come in under 10%?If you said &#34;the autoscaler lowers it to zero&#34;, you&#39;d be right! Yep, without a minimum size limiter in place, that&#39;s what you get.\n What&#39;s more amazing is that apparently this can happen and then not immediately &#34;fix&#34; itself. You&#39;d think it would notice that it needs SOME capacity to run things, and then get in a tug-of-war, going from 0 to 1 to 0 to 1 and so on all night long.\n Personally, I think whatever was measuring the CPU utilization probably divided by zero once there were no more instances running, and couldn&#39;t run past that point. Not dealing with that kind of scenario seems par for the course.\n  Then there&#39;s a whole other neat situation that can happen. I talked about this elsewhere, but for the sake of completeness will give the summary here. You have a service that has to be up. It dies. Traffic to everything else drops, so the CPU utilization out there drops, too. Those other services scale down.\n At some point, the essential service starts working again. Traffic floods back, and ... uh oh! Those other services are far too small now, and can&#39;t handle the load. Worse still, they&#39;ve been written in the most fragile ways you can imagine, and so they can&#39;t even ignore extra traffic. They stupidly try to take on everything that&#39;s coming in, and have no notion of rejecting the stuff they have no hope of handling.\n Now they&#39;re completely saturated, getting nothing done, and the CPU is running like crazy. The auto-scaling stuff notices, but it might be a good 10-15 minutes to get more instances running. This is not a joke. I&#39;ve seen this happen and it&#39;s not pretty.\n Basically, you should be able to point the equivalent of a flamethrower at your service and have it keep going. It doesn&#39;t have to accept the extra requests. It should just do the ones it would be capable of doing anyway, and ignore or reject the rest as appropriate. That way, at least it can start absorbing SOME of the load instead of just becoming part of the problem.\n Think about it: if any one instance of your service will fall over and crash when presented with enough load, that will then rebalance the load onto the others. One of those will then boil, and it&#39;ll go down, rebalancing the load onto even fewer instances. This will continue until the whole thing is a molten lump of slag.\n You can tell you&#39;re in a situation like this when you rig up horrible things like &#34;turn off the load balancer until we can restart the service&#34;. Or, maybe you&#39;ve &#34;set the network stuff to drop 50% of the traffic until we can catch up&#34;. If you&#39;ve ever had to do this, you&#39;re running incredibly fragile stuff! Likewise, if you&#39;ve ever had to worry about &#34;starting everything at once because otherwise the first one up will get boiled and will crash and then the second and third...&#34;, let me be the first to break it to you:  you&#39;re already in the bad place.\n [Side note: if this sounds familiar, it&#39;s because I had a customer about 15 years ago who absolutely refused to fix their terrible code and just wanted better tooling to start and stop their stuff in parallel. The people on my side weren&#39;t looking for an argument and so gave them exactly that.They were happy because they didn&#39;t have to think about writing better code. Is that what you want from your stuff?]\n There are so many ways out of a situation like this. Here&#39;s just one. You can temporarily stop checking your listening socket(s) for new connections. This means you stop calling accept(). The listenqueue will back up, and then something interesting will happen. Assuming Linux, it&#39;ll probably stop emitting SYN/ACKs for connection attempts after that point. You might do some magic to make it actively RST those connections so clients fail fast and go somewhere else right away. Whatever.\n When things calm down, you maybe start looking for those new connections again. Maybe you do something neat and process the newest ones first, since the oldest ones have probably burned most of their timeout already and won&#39;t stick around to finish the job anyway. This is what I meant by &#34;selective LIFO&#34; in a post from a few months back. It&#39;s the kind of thing people tend to think about when they&#39;re in a &#34;RPC&#34; mindset and not a &#34;web&#34; mindset.\n Want a really rough example of throttling? sendmail, the mail daemon which made life interesting for some of us for far too long, had this thing where it kept tabs on the machine&#39;s load average. If it got up over the first notch, it would still accept a connection, but it would wave them off with an error. If it got past the second notch, it would actually stop listening to the network! That&#39;s right, it would actually close the listening socket to forcibly reject any connection attempts.\n  That was more of a stream-of-consciousness than I intended, but all of it needed to get out there. Odds are, I&#39;ll come back to some of these points and spin them out into their own tales of what to do, what not to do, and how to tell when your team or company has already dug itself into a hole.", "posttime": "2020-05-07 19:57:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9020\u6210,rants,\u4e8b\u60c5", "title": "\u4e00\u5806\u5173\u4e8e\u4e91\u9020\u6210\u7684\u7834\u574f\u7684\u5486\u54ee", "title_en": "A bunch of rants about cloud-induced damage", "transed": 1, "url": "https://rachelbythebay.com/w/2020/05/06/scale/", "via": "", "real_tags": ["\u9020\u6210", "rants", "\u4e8b\u60c5"]}, {"category": "", "categoryclass": "", "imagename": "89fd5fa2d14eb3696862540f7493fbdd.png", "infoid": 1001055, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CuteVariant\u662f\u4e00\u4e2a\u7528Python\u4e3aQt\u7f16\u5199\u7684\u9057\u4f20\u53d8\u5f02\u7684\u8f7b\u91cf\u7ea7\u72ec\u7acb\u67e5\u770b\u5668\u3002\u5b83\u5141\u8bb8\u60a8\u67e5\u770b\u548c\u8fc7\u6ee4VCF\u548c\u5176\u4ed6\u683c\u5f0f\u5316\u6587\u4ef6\u3002\nPyside 2\u76ee\u524d(2019\u5e745\u6708)\u5728Cygwin\u4e0a\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u6b64CuteVariant\u5c06\u4e0d\u80fd\u5728Cygwin\u4e0a\u8fd0\u884c\u3002\n-cutevariant_win_dbg.exe\uff1a\u5728\u540e\u53f0\u6253\u5f00\u63a7\u5236\u53f0\u67e5\u770b\u8c03\u8bd5\u6d88\u606f\u3002\u6ce8\u610f\uff1aQt\u5e93\u4f3c\u4e4e\u6709\u975e\u5e38\u9ad8\u7684\u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u6837\u7684\u8be6\u7ec6\u7a0b\u5ea6\u53ef\u80fd\u4f1a\u4f7f\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002-cutevariant.exe\uff1a\u6807\u51c6\u53ef\u6267\u884c\u6587\u4ef6\u3002\ngit\u514b\u9686git@github.com\uff1alabsquare/cutevariant.gitcd cutevariantviralenv-p/usr/bin/python3venvsource venv/bin/actiateake install_deps#installmake install#pip install-e\u3002Make Run#\u542f\u52a8\u5e94\u7528\u7a0b\u5e8fMake test#start test\u3002\npip install whelgit clone https://github.com/ysard/cutevariant.gitgit fetchgit checkout dev#\u6216develmake install#\u6216pip install--user-e.[dev]\u3002\n\u5f3a\u70c8\u53cd\u5bf9\uff1a\u4ec5\u4e3a900Ko\u4ee5\u4e0b\u7684\u7a0b\u5e8f(\u5305\u62ec550Ko\u7684\u5b57\u4f53\u548c\u56fe\u6807)\uff0c\u60a8\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a350Mo\u7684\u5b58\u6863\u3002", "note_en": "cutevariant is a light standalone viewer of genetic variation written in Python for Qt. It allows you to view and filter VCF and other format files.\n     Pyside2 is not currently (2019 May) functional on Cygwin, so Cutevariant will not work on Cygwin.\n    - cutevariant_win_dbg.exe: Open a console in background to see debugging messages.Note: Qt libs seems to have a very high loglevel and such a verbosity could make the program unusable.- cutevariant.exe: Standard executable.\n    git clone git@github.com:labsquare/cutevariant.gitcd cutevariantvirtualenv -p /usr/bin/python3 venvsource venv/bin/activatemake install_deps # installmake install # pip install -e . make run # start applicationmake test # start tests\n       pip install wheelgit clone  https://github.com/ysard/cutevariant.gitgit fetchgit checkout dev # or develmake install # or pip install --user -e .[dev]\n    Strongly discouraged: You will generate an archive of 350Mo just for a program ofless than 900Ko (including 550Ko of fonts and icons).", "posttime": "2020-05-07 19:57:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u56e0\u7ec4,genomics,install", "title": "CuteVariant-\u57fa\u56e0\u7ec4\u53d8\u5f02\u67e5\u770b\u5668", "title_en": "Cutevariant \u2013 Genomics Variation Viewer", "transed": 1, "url": "https://github.com/labsquare/cutevariant", "via": "", "real_tags": ["\u57fa\u56e0\u7ec4", "genomics", "install"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001054, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5f00\u59cb\u4e86\u89e3CSRF\u4ee4\u724c\u662f\u5982\u4f55\u751f\u6210\u548c\u9a8c\u8bc1\u7684\u3002\u6211\u662f\u901a\u8fc7\u5728Phoenix web\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8ddf\u8e2a\u51fd\u6570\u8c03\u7528\u6d41\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\u8fd9\u662f\u4e00\u4e2a\u8ba9\u6211\u9677\u5165\u4e00\u4e9b\u6df1\u6d1e\u7684\u8fc7\u7a0b\uff0c\u4f46\u6700\u7ec8\u662f\u4e00\u6b21\u6709\u76ca\u7684\u7ecf\u5386\u3002\u5bf9\u672c\u6587\u7684\u5177\u4f53\u7ec6\u8282\u4e0d\u592a\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u8df3\u5230\u5e95\u90e8\u7684\u6458\u8981\u90e8\u5206\u67e5\u627eTL\uff1b\n\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd\u4e86CSRF\u4ee4\u724c\u7684\u751f\u547d\u5468\u671f\u3002\u4e3a\u4e86\u5f00\u59cb\u6211\u4eec\u7684\u65c5\u7a0b\uff0c\u6211\u4eec\u5c06\u5bfc\u822a\u5230\u6b63\u6587\u4e2d\u5305\u542bHTML\u8868\u5355\u7684\u9875\u9762-\u4f8b\u5982\uff0c/login&34\uff1b\u3002\u6211\u4eec\u5c06\u68c0\u67e5\u8868\u5355\u4e2d\u7684\u5b57\u6bb5\uff0c\u4ee5\u67e5\u770b\u662f\u5426\u6709HIDDED_CSRF_TOKEN\u5b57\u6bb5\u3002\u5b83\u662f\u81ea\u52a8\u653e\u5165\u8868\u683c\u4e2d\u7684\u3002\n\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0bPhoenix.HTML.form_tag/3\u7684\u6e90\u4ee3\u7801\uff0c\u770b\u770b\u9b54\u672f\u662f\u5728\u54ea\u91cc\u53d1\u751f\u7684\u3002\u8fd9\u662f\u4ee3\u7801\u4e2d\u6dfb\u52a0\u9690\u85cf\u8f93\u5165\u5b57\u6bb5\u4ee5\u5b58\u50a8\u4ee4\u724c\u7684\u90e8\u5206\u3002\u5f53\u65b9\u6cd5\u662f&#34\uff1bPOST&#34\uff1b\u65f6\uff0c\u5b83\u4f1a\u6dfb\u52a0\u5230\u8868\u5355\u4e2d\u3002\n\u8fdb\u4e00\u6b65\u8ddf\u968f\u4ee3\u7801\uff0c\u6211\u4eec\u770b\u5230Plug.CSRFProtection.get_CSRF_TOKEN_FOR/1\u7528\u4e8e\u751f\u6210\u4ee4\u724c\u3002\u4e0b\u9762\u662f\u4eceIEX\u4ea4\u4e92\u5f0f\u63a7\u5236\u53f0\u8c03\u7528\u51fd\u6570\u793a\u4f8b\u3002\n\u73b0\u5728\uff0c\u8fd9\u770b\u8d77\u6765\u5c31\u50cf\u662f\u4e00\u5806\u968f\u673a\u5b57\u7b26(\u5267\u900f\u63d0\u9192\uff1a\u5b83\u6709\u70b9\u50cf\u662f\u4e00\u5806\u968f\u673a\u5b57\u7b26)\u3002\u8ba9\u6211\u4eec\u66f4\u591a\u5730\u8ddf\u8e2a\u4ee3\u7801\uff0c\u4ee5\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\u3002\n\u7ed3\u679c\u662fGET_CSRF_TOKEN_FOR/1\u6267\u884c\u4e86\u4e00\u4e9b\u5206\u652f\uff0c\u5e76\u6700\u7ec8\u8c03\u7528\u4e86Plug.CSRFProtection.Get_CSRF_TOKEN/0\u3002\u6839\u636e\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5b83\u7684\u5de5\u4f5c\u662f\u751f\u6210\u4e00\u4e2a\u4ee4\u724c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u6d41\u7a0b\u5b57\u5178\u4e2d(\u5982\u679c\u8be5\u4ee4\u724c\u8fd8\u4e0d\u5b58\u5728)\u3002\u4ee4\u724c\u7684\u751f\u6210\u65b9\u5f0f\u5982\u4e0b\u6240\u793a\uff1a\n\u6211\u4eec\u5c06\u6682\u65f6\u5ffd\u7565\u63a9\u7801\u51fd\u6570\uff0c\u5e76\u8df3\u8fc7\u51e0\u4e2a\u4e2d\u95f4\u51fd\u6570\u8c03\u7528\u6765\u67e5\u770bPlug.CSRFProtection.Generate_Token/0\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6700\u7ec8\u8fdb\u5165\u6b63\u9898\u7684\u5730\u65b9\u3002\n\u6709\u4e00\u4e2a\u5bf9Erlang\u51fd\u6570\u7684\u8c03\u7528\uff1acrypt.strong_rand_bytes/1\uff0c\u5b83\u5c06\u751f\u6210N\u4e2a\u968f\u673a\u5b57\u8282\u3002\u6211\u4eec\u5c06\u4e0d\u518d\u6df1\u5165\u4e86\u89e3\u6b64\u51fd\u6570\u7684\u5b9e\u9645\u5de5\u4f5c\u539f\u7406\u3002\u968f\u673a\u6570\u672c\u8eab\u53ef\u80fd\u662f\u53e6\u4e00\u7bc7\u6587\u7ae0\u3002\n\u7136\u540e\u5bf9\u968f\u673a\u5b57\u8282\u8fdb\u884cBase64\u7f16\u7801\u3002\u6211\u5df2\u7ecf\u5199\u4e86\u4e00\u7bc7\u5173\u4e8eBase64\u5982\u4f55\u5de5\u4f5c\u7684\u6587\u7ae0\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u4e0d\u4f1a\u6df1\u5165\u63a2\u8ba8\u8fd9\u4e00\u70b9\u3002\u53ef\u4ee5\u8bf4\uff0c\u5c06\u968f\u673a\u5b57\u8282\u7f16\u7801\u6210\u53ef\u4ee5\u4f7f\u7528HTTP\u5b89\u5168\u4f20\u8f93\u7684\u683c\u5f0f\u662f\u6709\u610f\u4e49\u7684\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4ee4\u724c\u662f\u5982\u4f55\u521b\u5efa\u7684\uff1a\u5b83\u662f\u4e00\u4e2abase64\u7f16\u7801\u7684\u968f\u673a\u5b57\u7b26\u4e32\u3002\u7136\u800c\uff0c\u4e50\u8da3\u5e76\u4e0d\u4ec5\u6b62\u4e8e\u6b64\uff0c\u56e0\u4e3a\u8fd9\u53ea\u662f\u4e00\u4e2a\u672a\u52a0\u63a9\u9970\u7684\u4ee3\u5e01\u3002\u672a\u5c4f\u853d\u7684\u4ee4\u724c\u5df2\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570Plug.CSRFProtection.ask/1\u3002\n\u54c7\uff0c\u73b0\u5728\u8fd9\u4e8b\u53d8\u5f97\u6709\u8da3\u4e86\u3002\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u66f4\u6df1\u5165\u5730\u7814\u7a76Plug.Crypto\u6a21\u5757\u6765\u4e86\u89e3\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u8ba9\u6211\u4eec\u6765\u8ba1\u7b97\u4e00\u4e0b\uff1a\n\u8981\u56de\u7b54\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u5230Plug.Crypto\u6a21\u5757\u5e76\u67e5\u770bMASK/2\u3002\u6211\u4eec\u7a0d\u540e\u5c06\u8fd4\u56de\u5230Plug.CSRFProtection.ask/1\u3002\n@doc&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u8fd9\u4e24\u4e2a\u4ee4\u724c\u8981\u6c42\u5927\u5c0f\u76f8\u540c\u3002&#34\uff1b&#34\uff1b&#34\uff1b@spec ask(inary()\uff0cinary())\uff1a\uff1ainary()def ask(Left\uff0cRight)do MASK(Left\uff0cRight\uff0c&#34\uff1b&#34\uff1b)enddefp MASK(&lt\uff1b&lt\uff1bx\uff0cLeft\uff1aBinary&gt\uff1b&Get\u3002\uff0cacc)\u6267\u884c\u63a9\u7801(\u5de6\u3001\u53f3\uff1b&lt\uff1b&lt\uff1bacc\uff1a\uff1a\u4e8c\u8fdb\u5236\uff0cx^^y^ygt\uff1b&gt\uff1b)enddefp\u63a9\u7801(&lt\uff1b&lt\uff1b&gt\uff1b&gt\uff1b\uff0c&lt\uff1b&lt\uff1b&gt\uff1b&gt\uff1b\uff0cacc)\u6267\u884cACCEND\u3002\n\u4e0d\u8981\u8ba9\u9012\u5f52\u3001\u4e8c\u8fdb\u5236\u6a21\u5f0f\u5339\u914d\u548c^^\u5b8f\u5413\u5230\u60a8\uff01^\u662fBitwise\u6a21\u5757\u4e2d\u7684XOR\u8fd0\u7b97\u7b26\u3002MASK/2\u51fd\u6570\u9012\u5f52\u5730\u5bf9\u4ee4\u724c\u548c\u63a9\u7801\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\u3002\u6ca1\u6709\u592a\u591a\u7684\u4e1a\u52a1\u903b\u8f91\u60c5\u51b5\u9700\u8981XOR\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u6211\u4eec\u6bcf\u5929\u90fd\u8981\u7528\u5230\u7684\u3002\n\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u624b\u52a8\u8fdb\u884cXOR\uff1bC&34\uff1b\u548c&#34\uff1bd&34\uff1b\u3002\u9996\u5148\uff0c\u6211\u4eec\u627e\u5230\u5b57\u7b26\u7684ASCII\u503c\uff0c\u537367\u548c100\u3002\u7136\u540e\u6211\u4eec\u5c06ASCII\u503c\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\uff0c\u53731000011\u548c1100100\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4e8c\u8fdb\u5236\u503c\u6392\u6210\u4e00\u884c\uff0c\u4ee5\u4fbf\u6bd4\u8f83\u6bcf\u4e00\u4f4d\u3002\nXOR\u7684\u89c4\u5219\u662f\u5fc5\u987b\u6709\u4e00\u4e2a\uff0c\u4f46\u4e0d\u80fd\u4e24\u4e2a\u90fd\u6709\uff0c\u624d\u80fd\u4ea7\u751f1\u3002\u4f8b\u5982\uff1a\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u7ed3\u679c0100111\u8f6c\u6362\u56de10\u8fdb\u5236\u6570\u5b57\uff0c\u7136\u540e\u627e\u5230\u76f8\u5e94\u7684ASCII\u7801\u5b57\u7b26\u3002&#34\uff1b&#39\uff1b&#34\uff1b\u662f&#34\uff1bC&#34\uff1bXOR&#34\uff1bd&#34\uff1b\u7684\u7ed3\u679c\u3002\u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3Plug.Crypto.ask/2\u5728\u505a\u4ec0\u4e48\u3002\n\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4ee4\u724c\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u63a9\u7801\u3002\u8fd9\u6709\u70b9\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u63a9\u7801\u51fd\u6570\u672c\u8eab\u4e5f\u6709\u4e00\u4e2a\u540d\u4e3aMASK\u7684\u53d8\u91cf\u3002\u8bf7\u6ce8\u610f\uff0c\u63a9\u7801(\u53d8\u91cf)\u7684\u751f\u6210\u65b9\u5f0f\u4e0e\u4ee4\u724c\u76f8\u540c\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u7b2c\u4e8c\u4e2a\u4ee4\u724c\u3002\u6807\u8bb0\u548c\u63a9\u7801\u53d8\u91cf\u4e00\u8d77\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u7136\u540e\u8fdb\u884cbase64\u7f16\u7801\u3002\u6700\u540e\uff0c\u8fd8\u5c06\u63a9\u7801\u53d8\u91cf\u9644\u52a0\u5230\u5b83\u7684\u6240\u6709\u90e8\u5206\u3002\n\u6211\u4eec\u73b0\u5728\u77e5\u9053\u9762\u5177\u662f\u4ec0\u4e48\u4e86\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6709\u5fc5\u8981\u8fd9\u4e48\u505a\u5462\uff1f\u4ecd\u7136\u5c79\u7acb\u4e0d\u5012\u3002\n\u8ba9\u6211\u4eec\u770b\u770b\u662f\u5426\u6709\u4efb\u4f55\u8bc1\u636e\u8bc1\u660e\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u529f\u80fd\u5b58\u5728\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5728GitHub\u4e0a\u6253\u5f00\u4e00\u4e2agit\u6307\u8d23\u89c6\u56fe\u3002\n\u554a-\u54c8\uff01&#34\uff1b\u5c4f\u853dCSRF\u4ee4\u724c\u4ee5\u907f\u514d\u5165\u4fb5\u653b\u51fb&#34\uff1b-\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u63d0\u4ea4\u6d88\u606f\uff01\u901a\u8fc7\u5bf9\u4ec0\u4e48\u662f\u6f0f\u6d1e\u653b\u51fb\u8fdb\u884c\u4e00\u4e9b\u7814\u7a76\uff0c\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u653b\u51fb\u8005\u80fd\u591f\u53d1\u9001\u4e00\u7cfb\u5217\u8bf7\u6c42\uff0c\u5e76\u9010\u6e10\u8ba1\u7b97\u51fa\u54cd\u5e94\u6b63\u6587\u7684\u4e00\u90e8\u5206\uff0c\u5373\u4f7f\u54cd\u5e94\u662f\u52a0\u5bc6\u7684\u3002\n\u653b\u51fb\u8005\u5229\u7528\u54cd\u5e94\u4f7f\u7528\u538b\u7f29\u7684\u4e8b\u5b9e\uff0c\u5e76\u4e14\u538b\u7f29\u54cd\u5e94\u7684\u5927\u5c0f\u8981\u4e48\u589e\u5927\uff0c\u8981\u4e48\u7f29\u5c0f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5bf9\u5b57\u7b26\u7684\u4e00\u4e2a\u5c0f\u731c\u6d4b\u662f\u6b63\u786e\u7684\u8fd8\u662f\u4e0d\u6b63\u786e\u7684\u3002\u5728SSL\u4e2d\uff0c\u53d1\u73b0\u8be5\u6f0f\u6d1e\u7684\u5b89\u5168\u7814\u7a76\u4eba\u5458\u572830\u79d2\u5185\u5c31\u6d88\u5931\u4e86\uff0c\u4ed6\u4eec\u975e\u5e38\u8be6\u7ec6\u5730\u89e3\u91ca\u548c\u6f14\u793a\u4e86\u8be5\u653b\u51fb\u3002\n\u4ed6\u4eec\u8fd8\u53d1\u5e03\u4e86\u4e00\u7bc7\u8bba\u6587\uff0c\u63d0\u51fa\u4e86\u653b\u51fb\u7f13\u89e3\u65b9\u6848\u3002\u672c\u6458\u5f55\u89e3\u91ca\u4e86Plug.CSRFProtection.ask/1&#39\uff1b\u7684\u7b97\u6cd5\u3002\n\u653b\u51fb\u4f9d\u8d56\u4e8e\u76ee\u6807\u5bc6\u7801\u5728\u8bf7\u6c42\u4e4b\u95f4\u4fdd\u6301\u4e0d\u53d8\u7684\u4e8b\u5b9e\u3002\u867d\u7136\u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e0a\u8f6e\u6362\u79d8\u5bc6\u901a\u5e38\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u4f46\u6c64\u59c6\u00b7\u4f2f\u68ee(Tom Berson)\u63d0\u51fa\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7efc\u5408\u8fd9\u4e00\u6548\u679c\u3002\u4e0d\u662f\u5728\u9875\u9762\u4e2d\u5d4c\u5165\u79d8\u5bc6S\uff0c\u800c\u662f\u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e0a\u751f\u6210\u65b0\u7684\u4e00\u6b21\u6027\u4fbf\u7b7eP\uff0c\u5e76\u5728\u9875\u9762\u4e2d\u5d4c\u5165P||(P\u2295S)\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528||\u8868\u793a\u4e32\u8054\uff0c\u4f7f\u7528\u2295\u8868\u793a\u5f02\u6216\u3002\n\u63a9\u853d\u4ee4\u724c\u6709\u52a9\u4e8e\u9632\u6b62\u653b\u51fb\u8005\u9010\u6e10\u731c\u6d4b\u54cd\u5e94\u6b63\u6587\u7684\u5b57\u7b26\u3002\u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4ee4\u724c\u5728\u4e0d\u540c\u7684\u8bf7\u6c42\u4e4b\u95f4\u4e0d\u4f1a\u6539\u53d8\uff0c\u63a9\u7801\u4e5f\u4f1a\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u4ee4\u724c\u6bcf\u6b21\u5728\u54cd\u5e94\u6b63\u6587\u4e2d\u90fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u8868\u793a\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u67e5\u770b\u4ee4\u724c\u9a8c\u8bc1\u65f6\uff0c\u6211\u4eec\u5c06\u770b\u5230XOR\u63a9\u7801\u53ef\u4ee5\u53cd\u8f6c\u4ee5\u663e\u793a\u539f\u59cb\u4ee4\u724c\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u4e3a\u4ec0\u4e48\u5c4f\u853d\u4ee4\u724c\uff0c\u4ee5\u53ca\u5c4f\u853d\u5b83\u610f\u5473\u7740\u4ec0\u4e48\u3002\u6211\u4eec\u8fd8\u77e5\u9053\u5982\u4f55\u521b\u5efa\u672a\u5c4f\u853d\u7684\u4ee4\u724c\u3002\u7136\u800c\uff0c\u4ec5\u4ec5\u5728HTML\u6587\u6863\u4e2d\u63d2\u5165\u4e00\u4e2a\u4ee4\u724c\u662f\u4e0d\u591f\u7684\u3002\u540c\u6837\u7684\u4ee4\u724c\u4e5f\u653e\u5728\u7528\u6237\u7684\u6d4f\u89c8\u5668cookie\u4e2d\u3002\n\u5982\u679c\u6211\u4eec\u770b\u4e00\u4e0b\u6d4f\u89c8\u5668\u4e2d\u7684cookie\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e9b\u4e1c\u897f\uff0c\u4f46\u5b83\u663e\u7136\u4e0e\u6211\u4eec\u5728HTML\u8868\u5355\u4e2d\u770b\u5230\u7684\u4ee4\u724c\u4e0d\u5339\u914d\u3002\u8fd9\u662f\u56e0\u4e3a\u51e4\u51f0\u536b\u89c6\u5bf9\u997c\u5e72\u8fdb\u884c\u4e86\u52a0\u5bc6\u7b7e\u540d\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u4e0d\u4f1a\u88ab\u7be1\u6539\u3002\n\u6bcf\u4e2aPhoenix\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u4e00\u4e2a\u5728config/config.ex\u4e2d\u5b9a\u4e49\u7684SECRET_KEY_BASE\u503c\uff0c\u8fd9\u5c31\u662f\u83f2\u5c3c\u514b\u65af\u7528\u4f5c\u7b7e\u540d\u7684\u5730\u65b9\u3002\u4f46\u662f\uff0cSECRET_KEY_BASE\u5e94\u8be5\u662f\u6ca1\u6709\u4eba\u77e5\u9053\u7684\u4fdd\u5bc6\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528SECRET_KEY_BASE\u3002\u76f8\u53cd\uff0cPhoneix\u4f9d\u8d56\u4e8ePlug.Crypto.KeyGenerator\u6a21\u5757\u3002\u4ee5\u4e0b\u662f\u6587\u6863\u7684\u6458\u5f55\uff0c\u603b\u7ed3\u4e86Plug.Crypto.KeyGenerator\u6a21\u5757\u7684\u7528\u9014\uff1a\n\u2026\u3002\u8fd9\u4f7f\u5e94\u7528\u7a0b\u5e8f\u5177\u6709\u5355\u4e00\u7684\u5b89\u5168\u5bc6\u94a5\uff0c\u4f46\u907f\u514d\u5728\u591a\u4e2a\u4e0d\u517c\u5bb9\u7684\u4e0a\u4e0b\u6587\u4e2d\u91cd\u7528\u8be5\u5bc6\u94a5\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u4fdd\u62a4\u4f1a\u8bddcookie\u6570\u636e(\u5305\u62ecCSRF\u4ee4\u724c)\u7684\u5b8c\u6574\u6027\u548c\u771f\u5b9e\u6027\u3002\n\u600e\u4e48\u53ef\u80fd\u5728\u6f5c\u5728\u4e0d\u5b89\u5168\u7684\u5730\u65b9\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u7684\u5bc6\u94a5\u5462\uff1fPlug.Crypto.KeyGenerator\u901a\u8fc7\u5b9e\u73b0\u79f0\u4e3a\u57fa\u4e8e\u5bc6\u7801\u7684\u5bc6\u94a5\u6d3e\u751f\u51fd\u65702\u6216PBKDF2\u7684\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u5b83\u4ee5\u76d0\u548c\u79d8\u5bc6\u4f5c\u4e3a\u8f93\u5165\u3002\u7136\u540e\uff0c\u5b83\u91cd\u590d\u5e94\u7528\u4f2a\u968f\u673a\u51fd\u6570(PRF)\u6765\u521b\u5efa\u6d3e\u751f\u5bc6\u94a5\u3002PBKDF2\u7684\u4e00\u4e2a\u91cd\u8981\u7ec6\u8282\u662f\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u6307\u5b9a\u5c06\u5e94\u7528PRF\u7684\u6b21\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u51b3\u5b9a\u7b97\u6cd5\u5e94\u8be5\u82b1\u8d39\u591a\u957f\u65f6\u95f4\u3002\u8fd9\u6709\u52a9\u4e8e\u964d\u4f4e\u66b4\u529b\u653b\u51fb\u7684\u53ef\u884c\u6027\u3002\u8fed\u4ee3\u8ba1\u6570\u9ed8\u8ba4\u4e3a1\uff0c000\uff0c\u8fd9\u662f\u63a8\u8350\u7684\u6700\u5c0f\u503c\u3002\n\u8fd9\u91cc\u4f7f\u7528\u7684PRF\u662fHMAC-sha256\u3002\u5de7\u5408\u7684\u662f\uff0cHMAC\u4e5f\u7528\u4e8e\u6574\u4f53\u7b7e\u540d\u548c\u9a8c\u8bc1\u4f1a\u8bdd\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002\n\u901a\u8fc7\u8bb0\u5f55Plug.Crypto.KeyGenerator.Generate/6\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u53ea\u751f\u6210\u4e00\u6b21\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5\u3002\u6240\u6709\u540e\u7eed\u8bf7\u6c42\u90fd\u4f7f\u7528\u4e00\u4e2a\u7f13\u5b58\u503c\uff0c\u8be5\u503c\u5b58\u50a8\u5728ETS\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b(\u4f4d\u4e32\u662f\u7ed3\u679c\uff0c\u4e5f\u79f0\u4e3a\u6d3e\u751f\u7684\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5)\uff1a\niex(2)&gt\uff1b\uff1aets.lookup(Plug.Keys\uff0c{&#34\uff1b2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34\uff1b\uff0c&#34\uff1b8yQvCfAG&#34\uff1b\uff0c.(2)&gt\uff1b1000\uff0c32\uff0c\uff1asha256})[{{&#34\uff1b2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34\uff1b\uff0c&#34\uff1b8yQvCfAG&#34\uff1b\uff0c1000\uff0c32\uff0c\uff1asha256}\uff0c&lt\uff1b&lt\uff1b125\u3001248\u3001227\u300117\u3001106\u300191\u300167\u300135\u300135\u300199\u3001173\u300158\u300114\u300129\u300196\u3001107\u3001220\u3001193\u3001148\u3001164\u300144\u3001239\u300117\u300158\u3001110\u30019\u3001116\u3001230\u300191\u30019\u3001188\u300188\u3002\n\u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5\u662f\u5982\u4f55\u4ece\u5e94\u7528\u7a0b\u5e8f\u7684SECRET_KEY_BASE\u4e2d\u751f\u6210\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u7528\u4e8e\u5b9e\u9645\u7b7e\u540d\u7684\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0cHMAC\u4e0d\u4ec5\u7528\u4e8e\u751f\u6210\u7b7e\u540d\u5bc6\u94a5\uff0c\u8fd8\u7528\u4e8e\u5bf9\u4f1a\u8bddcookie\u6570\u636e\u8fdb\u884c\u7b7e\u540d\u3002\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u7b7e\u7f72\u6570\u636e\u7684\u76ee\u6807\u4e0d\u662f\u9632\u6b62\u6570\u636e\u88ab\u770b\u5230\uff0c\u800c\u662f\u9a8c\u8bc1\u6570\u636e\u7684\u771f\u5b9e\u6027\u548c\u5b8c\u6574\u6027\u3002\nHMAC\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u5b83\u53cd\u6620\u4e86\u4f5c\u4e3a\u51fd\u6570\u8f93\u5165\u63d0\u4f9b\u7684\u6d88\u606f\u548c\u5bc6\u94a5\u3002\u8be5\u6d88\u606f\u4e0eHMAC\u4e00\u8d77\u53d1\u9001\u3002\u5176\u60f3\u6cd5\u662f\u6d88\u606f\u4e0d\u80fd\u66f4\u6539\uff0c\u56e0\u4e3aHMAC\u5c06\u4e0d\u518d\u5339\u914d\u3002HMAC\u4e5f\u4e0d\u80fd\u66f4\u6539\uff0c\u56e0\u4e3a\u79d8\u5bc6\u5bc6\u94a5\u662f\u672a\u77e5\u7684(\u53d6\u51b3\u4e8e\u5e95\u5c42\u6563\u5217\u51fd\u6570\u7684\u5f3a\u5ea6)\u3002\n\u6211\u4eec\u53ef\u80fd\u4f1a\u8003\u8651\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4f7f\u7528SHA\u54c8\u5e0c\u51fd\u6570\uff0c\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u7684\u6821\u9a8c\u548c\u65b9\u6cd5\u5462\uff1f\u7b54\u6848\u662fHMAC\u4f18\u4e8eSHA-1\u548cSHA-256\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u9632\u6b62\u957f\u5ea6\u6269\u5c55\u653b\u51fb\u3002Computerphile\u6709\u4e00\u6bb5\u5173\u4e8eHMAC\u7684\u5f88\u68d2\u7684\u89c6\u9891\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6d88\u606f\u662f\u5e26\u6709CSRF\u4ee4\u724c\u7684ELEXIR\u6620\u5c04\u3002\u5bc6\u94a5\u662f\u6211\u4eec\u5728\u4e0a\u9762\u8ba8\u8bba\u7684\u6d3e\u751f\u4f1a\u8bdd\u7b7e\u540d\u5bc6\u94a5\uff0c\u5e95\u5c42\u6563\u5217\u51fd\u6570\u662fsha256\u3002\n\u51fd\u6570hmac_sha2_sign/3\u7531Plug.Crypto.MessageVerifier.sign/3\u8c03\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u5b83\u6765\u7406\u89e3\u4f1a\u8bddcookie\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u7684\u3002\n#`payload`\u548c`key`\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0cdigest_type\u4e3a\uff1asha256defp hmac_sha2_sign(payload\uff0ckey\uff0cdigest_type)do tected=HMAC_sha2_to_tected(Digest_Type)PLAN_TEXT=sign_input(Protected\uff0cpayload)Signature=\uff1acrypt.hmac(digest_type\uff0ckey\uff0ccommon_text)encode_Token(PLAN_TEXT\uff0cSignature)end\u3002\n\u6b64\u51fd\u6570\u7684\u7ed3\u679c\u5c06\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u7684Cookie\u7684\u503c\uff1a\n\u8bf7\u6ce8\u610f\uff0c\u6b64\u6587\u672c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728&#34\uff1b.&#34\uff1b&#39\uff1b\u4e4b\u95f4\u62c6\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\u3002\u7b2c\u4e00\u4e2a\u90e8\u5206\u662fhmac_sha2_to_tected(Digest_Type)\u7684\u7ed3\u679c\u3002\u5b83\u53ea\u662f\u5b57\u7b26\u4e32HS256&34\uff1b\u7684Base64\u7f16\u7801\u683c\u5f0f\u3002\n\u7b2c\u4e8c\u90e8\u5206\u4e5f\u662f\u7528Base64\u7f16\u7801\u7684\u3002\u5b83\u8868\u793a\u6b63\u5728\u7b7e\u540d\u7684\u6d88\u606f\uff0c\u6765\u81eaSigning_Input(\u53d7\u4fdd\u62a4\uff0c\u6709\u6548\u8d1f\u8f7d)\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89e3\u7801\uff0c\u7136\u540e\u5c06\u4e8c\u8fdb\u5236\u6587\u4ef6\u7ffb\u8bd1\u6210\u4e00\u4e2a\u9879\u6765\u67e5\u770b\u5b83\uff1a\n\u6700\u540e\u4e00\u90e8\u5206\u662f\u7b7e\u540d\uff0c\u5b83\u6765\u81ea\u4e8e\uff1acrypt.hmac(digest_type\uff0ckey\uff0cPLACE_TEXT)\u3002\u6b63\u5982\u6211\u4eec\u4ece\u51fd\u6570\u53c2\u6570\u4e2d\u770b\u5230\u7684\uff0c\u5b83\u9700\u8981\u4e00\u4e2a\u6563\u5217\u51fd\u6570(Digest_Type)\u3001\u4e00\u4e2a\u5bc6\u94a5\uff0c\u7136\u540e\u662f\u8981\u4fdd\u62a4\u7684\u6d88\u606f\u3002\u7b7e\u540d\u4e5f\u662fBase64\u7f16\u7801\u7684\uff0c\u5e76\u4e0e\u6d88\u606f\u7ed3\u5408\u5728\u4e00\u8d77\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4ee4\u724c\u88ab\u5b89\u5168\u5730\u5b58\u50a8\u5728cookie\u4e2d\uff0c\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u521b\u5efa\u7684\u7ec6\u8282\uff0c\u6700\u540e\u8981\u770b\u7684\u662f\u6570\u636e\u662f\u5982\u4f55\u9a8c\u8bc1\u7684\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u4ee4\u724c\u88ab\u653e\u7f6e\u5728HTML\u6587\u6863\u548cCookie\u4e2d\u3002\u6700\u540e\u8981\u4ecb\u7ecd\u7684\u662f\u5b83\u4eec\u662f\u5982\u4f55\u88ab\u9a8c\u8bc1\u7684\u3002\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4ecePlug.CSRFProtection\u6a21\u5757\u5f00\u59cb\u8ddf\u8e2a\u4ee3\u7801\uff0c\u770b\u770b\u4ee4\u724c\u9a8c\u8bc1\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002\ndefp VERIFIED_REQUEST\uff1f(CONN\uff0cCSRF_TOKEN\uff0cALLOW_HOSTS)\u5728@UNPROTECTED_METHANDS||VALID_CSRF_TOKEN\uff1f(CONN\uff0cCSRF_TOKEN\uff0cConn.body_params[&#34\uff1b_CSRF_TOKEN&#34\uff1b]\uff0cALLOW_HOSTS)||VALID_CSRF_TOKEN\uff1f(CONN\uff0cCSRF_TOKEN\uff0cFIRST_x_CSRF_TOKEN(CONN)\uff0cALLOW_HOSTS)||SKIP_CSRF\u3002\n\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u88ab\u53d1\u9001\u5230VALID_CSRF_TOKEN\uff1f/4\uff0c\u7136\u540e\u53d1\u9001\u5230VALID_MASTED_TOKEN\uff1f/3\u3002\u63a9\u7801\u4e0eHTML\u6b63\u6587\u4e2d\u4ee4\u724c\u5c3e\u90e8\u7684\u6a21\u5f0f\u5339\u914d\u3002\u7136\u540e\uff0cPlug.Crypto.MASKED_COMPARE/3\u80fd\u591f\u6bd4\u8f83\u4ee4\u724c\u662f\u5426\u5339\u914d\u3002\n@doc&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b@spec MASKED_COMPARE(BINARY()\uff0cBINARY()\uff0cBINARY())\uff1a\uff1aboolean()def MASKED_COMPARE(LEFT\uff0cRIGHT\uff0cMASK)\u5f53IS_BINARY(LEFT)\u548cIS_BINARY(RIGHT)AND IS_BINARY(MASK)DO BYTE_SIZE(LEFT)==BYTE_SIZE(\u53f3)AND MASKED_COMPARE(\u5de6\uff0c\u53f3\uff0c\u63a9\u7801\uff0c0)enddefp MASKED_COMPARE(&lt\uff1b&lt\uff1bx\uff0cLEFT\uff1aBINARY&GT\uff1b&GT\u3002&lt\uff1bz\uff0cMASK\uff1a\uff1aBINARY&&gt;\uff1b&&gt;\uff0cacc)do xorred=x^^^(y^^z)MASKED_COMPARE(LEFT\uff0cRIGHT\uff0cMASKED_COMPARE(LEFT\uff0cRIGHT\uff0cMASKED\uff0cACC|xorred)enddefp MASKED_COMPARE(&lt\uff1b&gt\uff1b\uff0c&lt\uff1b&lt\uff1b&gt\uff1b\uff0c&lt\uff1b&lt\uff1b&gt\uff1b\uff0cacc)\u3002\n\u4f5c\u4e3a\u603b\u7ed3\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u56de\u987e\u4e00\u4e0b\u7528\u6237\u8bbf\u95ee\u5177\u6709HTTP\u65b9\u6cd5POST&34\uff1b\u8868\u5355\u7684\u9875\u9762\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\u4e8b\u4ef6\u7684\u987a\u5e8f\u5e76\u4e0d\u610f\u5473\u7740\u5b8c\u5168\u51c6\u786e-\u6211\u5728\u8fd9\u91cc\u7684\u76ee\u6807\u662f\u52fe\u52d2\u51fa\u603b\u4f53\u4e0a\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u6982\u62ec\u6027\u56fe\u666f\u3002\n\u5f53\u6d89\u53ca\u5230\u4fdd\u62a4CSRF\u65f6\uff0cPhoneix\u4f3c\u4e4e\u4f7f\u7528\u4e86\u53cc\u91cd\u63d0\u4ea4Cookie\u7684\u65b9\u6cd5\u3002\n\u751f\u6210\u9875\u9762\u7684HTML\u6807\u8bb0\u3002\u56e0\u4e3aForm\u65b9\u6cd5\u662fPOST\uff0c\u6240\u4ee5Phoenix.HTML.form_tag\u68c0\u6d4b\u5230\u767b\u5f55\u8868\u5355\u5e94\u8be5\u5305\u62ec\u4e00\u4e2aCSRF\u4ee4\u724c\u3002\n\u8c03\u7528Plug.CSRFProtection.get_csrf_token_for(&#34\uff1b/login&#34\uff1b)\uff0c\u5b83\u4f1a\u751f\u6210\u4e00\u4e2a\u5c4f\u853d\u7684CSRF\u4ee4\u724c\u3002\u63a9\u7801\u662f\u5c06\u4ee4\u724c\u548c\u968f\u673a\u5b57\u8282\u8fdb\u884cXOR\u8fd0\u7b97\u7684\u7ed3\u679c\u3002\n\u5982\u679c\u8fdb\u7a0b\u5b57\u5178\u5c1a\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u5c06\u76f8\u540c\u7684\u4ee4\u724c\u6dfb\u52a0\u5230\u8be5\u8fdb\u7a0b\u5b57\u5178\u4e2d\u3002\n\u4ece\u5e94\u7528SECRET_KEY_BASE\u4e2d\u5bfc\u51fa\u5bc6\u94a5\uff0c\u4ee5\u4fbf\u5bf9\u5b58\u50a8\u5728Cookie\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5bc6\u7801\u7b7e\u540d\u3002\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u6570\u636e\u88ab\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u4ee5\u5916\u7684\u5176\u4ed6\u4eba\u66f4\u6539\u3002\u8fd9\u662f\u901a\u8fc7PBKDF2\u5b8c\u6210\u7684\u3002\nCookie\u4e2d\u7684\u6570\u636e(\u5373CSRF\u4ee4\u724c)\u662fBase64\u7f16\u7801\u7684\uff0c\u5e76\u4e0eHMAC-sha256\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u6570\u636e\u88ab\u7be1\u6539\u3002\n\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528HTML\u6807\u8bb0\u54cd\u5e94\u7528\u6237\u6d4f\u89c8\u5668\uff0c\u8be5\u6807\u8bb0\u5728\u8868\u5355\u6b63\u6587\u4e2d\u5305\u542b\u6ce8\u5165\u7684CSRF\u4ee4\u724c\uff0c\u5e76\u4e14\u8fd8\u4f7f\u7528Set-Cookie\u54cd\u5e94\u5934\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e0a\u8bbe\u7f6e\u5177\u6709\u76f8\u540c(\u672a\u5c4f\u853d)\u4ee4\u724c\u7684Cookie\u3002\n\u6b64\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u586b\u5199\u8868\u5355\u5e76\u63d0\u4ea4\u3002\u8fd9\u5c06\u89e6\u53d1HTTP POST\u8bf7\u6c42\uff0c\u5e76\u9a8c\u8bc1\u4ee4\u724c\u3002\n\u9a8c\u8bc1\u4f1a\u8bdd\u6570\u636e\u4ee5\u786e\u4fdd\u5176\u672a\u88ab\u4fee\u6539\u3002\u5982\u679c\u6210\u529f\uff0c\u5219\u663e\u793a/\u8fd4\u56de\u672a\u5c4f\u853d\u7684CSRF\u4ee4\u724c\u3002\n\u5c06\u6765\u81eaHTML\u6b63\u6587\u7684\u63a9\u7801\u4ee4\u724c\u4e0e\u6765\u81ea\u4f1a\u8bdd\u7684\u672a\u63a9\u7801\u4ee4\u724c\u8fdb\u884c\u6bd4\u8f83\u3002\u53ef\u4ee5\u4eceHTML\u6b63\u6587\u4e2d\u7684\u6807\u8bb0\u68c0\u7d22\u6b63\u786e\u7684\u63a9\u7801\u3002\u6bd4\u8f83\u4ee5\u9632\u6b62\u8ba1\u65f6\u653b\u51fb\u7684\u65b9\u5f0f\u8fdb\u884c\u3002\n\u5982\u679c\u4ee3\u5e01\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u5982\u679c\u4ee4\u724c\u4e0d\u5339\u914d\uff0c\u5219\u4f1a\u53d1\u751f\u9519\u8bef\u3002\n\u4ec5\u6b64\u800c\u5df2\uff01\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u7684\uff0c\u4f5c\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u6709\u5f88\u591a\u5947\u7279\u7684\u4e1c\u897f\u6b63\u5728\u8fdb\u884c\uff0c\u5c1d\u8bd5\u5e76\u7406\u89e3\u5b83\u4eec\u662f\u5982\u4f55\u7ed3\u5408\u5728\u4e00\u8d77\u7684\uff0c\u8fd9\u662f\u76f8\u5f53\u4ee4\u4eba\u60ca\u8bb6\u7684\u3002\n\u6b63\u662f\u8fd9\u7c7b\u4e1c\u897f\u8ba9\u6211\u771f\u7684\u5f88\u6b23\u8d4f\u4eba\u4eec\u4e3a\u5236\u4f5c\u548c\u7834\u574f\u8f6f\u4ef6\u6240\u505a\u7684\u6240\u6709\u5de5\u4f5c\u3002\u6211\u8ba4\u4e3a\u5076\u5c14\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0b\u6211\u4eec\u4f7f\u7528\u7684\u6280\u672f\u3001\u5e93\u548c\u6846\u67b6\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5b9e\u8df5\u3002\u8fd9\u662f\u4e00\u4ef6\u5e78\u4e8b\uff0c\u6211\u4eec\u4e0d\u5fc5\u5b8c\u5168\u7406\u89e3\u6240\u6709\u7684\u7ec6\u8282\u5c31\u80fd\u521b\u9020\u5e76\u5bcc\u6709\u6210\u6548\uff0c\u4f46\u65f6\u4e0d\u65f6\u5730\u8fd9\u6837\u505a\u80af\u5b9a\u662f\u6709\u4ef7\u503c\u7684\u3002", "note_en": "I set out to understand how CSRF tokens are generated and validated. I did it by tracing the flow of function calls through a Phoenix web applciation. It was a process that led me down some deep rabbit holes, but ultimately was a rewarding experience. Readers who are less interested in the nitty gritty details of this article can skip to the  summary section toward the bottom for a TL;DR.\n This article details the life of a CSRF token. To begin the journey we will navigate to a page with an HTML form in the body - &#34;/login&#34;, for example. We&#39;ll inspect the fields within the form to see that there&#39;s a hidden  _csrf_token field. It was put in the form automatically.\n  We can take a look at the source code for   Phoenix.HTML.form_tag/3 to see where the magic happens. This is the part of the code that adds a hidden input field to store the token. It is added to the form when the method is &#34;POST&#34;.\n Following the code further, we see that   Plug.CSRFProtection.get_csrf_token_for/1 is used to generate the token. Here&#39;s an example of what that function call looks like from an IEx interactive console.\n  Right now this just looks like a bunch of random characters (spoiler alert: it  sort of is just a bunch of random characters). Let&#39;s trace the code a little more to understand how it works, and why it looks like that.\n  It turns out that  get_csrf_token_for/1 does some branching and winds up calling   Plug.CSRFProtection.get_csrf_token/0. According to the docstring, its job is to generate a token and store it in the process dictionary (if the token does not already exist). A token is generated like this:\n  We will ignore the  mask function for a moment, and skip passed a few intermediary function calls to look at  Plug.CSRFProtection.generate_token/0, which is where we finally get down to brass tacks.\n  There&#39;s a call to the Erlang function  :crypto.strong_rand_bytes/1, which will generate N random bytes. We&#39;re not going to go any deeper to find out how this function actually works. Random numbers could probably be another article in and of itself.\n The random bytes are then Base64 encoded. I already wrote  an article about how Base64 works, so we won&#39;t dive into that either. Suffice to say, it makes sense to encode the random bytes into a format that can safely be transmitted using HTTP.\n We have now learned how the token is created: it&#39;s a Base64-encoded random string of characters. However, the fun does not stop there, because this is just an &#34;unmasked&#34; token. The unmasked token was passed to another function,  Plug.CSRFProtection.mask/1.\n  Wow, now this is getting interesting. We&#39;re going to have to dive deeper into the  Plug.Crypto module to understand what&#39;s going on here. Let&#39;s figure out:\n   To answer the first question, we will dive into the  Plug.Crypto module and look at  mask/2. We&#39;ll return to  Plug.CSRFProtection.mask/1 in a moment.\n @doc &#34;&#34;&#34;Masks the token on the left with the token on the right.Both tokens are required to have the same size.&#34;&#34;&#34;@spec mask(binary(), binary()) :: binary()def mask(left, right) do mask(left, right, &#34;&#34;)enddefp mask(&lt;&lt;x, left::binary&gt;&gt;, &lt;&lt;y, right::binary&gt;&gt;, acc) do mask(left, right, &lt;&lt;acc::binary, x ^^^ y&gt;&gt;)enddefp mask(&lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, acc) do accend\n Don&#39;t let the recursion, binary pattern matching, and  ^^^ macro scare you!  ^^^ is the  XOR operator from the Bitwise module. The  mask/2 function is recursively XORing each character from the token and the mask. There aren&#39;t many business logic situations that call for XOR, so this is not something we get to use on a daily basis.\n   Say we wanted to XOR &#34;C&#34; and &#34;d&#34; by hand. First, we find the ASCII values of the characters, so 67 and 100. Then we convert the ASCII values to binary, so  1000011 and  1100100. Next, we line up the binary values so that it&#39;s easy to compare each bit.\n The rules for XOR is that there must be one or the other but not both in order to produce a  1. For example:\n   Finally, we convert the result,  0100111, back to a Base-10 number and then find the corresponding ASCII character. &#34;&#39;&#34; is the result of &#34;C&#34; XOR &#34;d&#34;. With this knowledge, we can better understand what  Plug.Crypto.mask/2 is doing.\n   The function takes a token, then generates a mask. It&#39;s a bit confusing because the mask function itself also has a variable named  mask. Notice that  mask (the variable) is generated in the same way as the token was, so it can really just be thought of as a second token. The token and the mask variable are XORed together, and then Base64-encoded. Finally, the mask variable is also appended onto it all.\n   We now know  what the mask is, but the question of  why is all this necessary? still stands.\n  Let&#39;s see if there&#39;s any evidence about why this function exists, so We&#39;ll open up a git blame view on GitHub.\n  Ah-ha! &#34;Mask CSRF tokens to avoid breach attacks&#34; - this is a useful commit message! With  a bit of research about what a breach attack is, we can learn that it&#39;s basically when an attacker is able to send a bunch of requests, and incrementally figure out parts of the response body, even when the responses are encrpyted.\n The attacker takes advantage of the fact that the responses use compression, and that the size of the compressed responses either grows or shrinks, depending on if one small guess of a character is correct or incorrect. In  &#34;SSL, gone in 30 seconds&#34;, the security researchers who discovered this vulnerability explain and demonstrate this attack in great detail.\n They have also released  a paper which suggests attack mitigation options. This excerpt explains  Plug.CSRFProtection.mask/1&#39;s algorithm.\n The attack relies on the fact that the targeted secret remains the same between requests. While it is usually impractical to rotate secretson each request, there is a method due to Tom Berson which can synthesize thiseffect. Instead of embedding a secret S in a page, on each request, generate a new onetime pad P, and embed  P || (P \u2295 S) in the page. Here, we use  || to denote concatenation, and  \u2295 to denote XOR.\n Masking the token helps prevent an attacker from incrementally guessing characters of a response body. That&#39;s because even though the token may not change between requests, the mask will. Therefore, the token is represented differently every time in the response body. When we start looking at token validation, we will see that the XOR mask can be reversed to reveal the original token.\n We now know why the token is masked, as well as what it means to mask it. We also know how an unmasked token is created. However, it&#39;s not enough to just insert a token into the HTML document. The same token is also placed in the user&#39;s browser cookies.\n  If we have a look at the cookies in our browser, we&#39;ll see  something, but it obviously doesn&#39;t match the token we looked at from the HTML form. That&#39;s because Phoenix  cryptographically signs cookies so that they cannot be tampered with.\n Every Phoenix app has a  secret_key_base value defined in  config/config.ex, and this is what Phoenix uses as a signature. However,  secret_key_base is supposed to be a secret value that nobody knows, so it&#39;s not an option to use  secret_key_base directly. Instead, Phoneix relies on the  Plug.Crypto.KeyGenerator module. Here is an excerpt from the docs that summarizes the purpose of the  Plug.Crypto.KeyGenerator module:\n \u2026This lets applications have a single secure secret, but avoid reusing that key in multiple incompatible contexts.\n We will now take a look at how the application is able to protect the integrity and authenticity of the session cookie data, which includes the CSRF token.\n  How would it be possible to use the application&#39;s secret key in potentially insecure places?   Plug.Crypto.KeyGenerator accomplishes this by implementing an algorithm called Password-Based Key Derivation Function 2, or  PBKDF2.\n It takes a salt and a secret as its inputs. Then it repeatedly applies a pseudorandom function (PRF) to create a derived key. An important detail of PBKDF2 is that it allows the program to specify how many times the PRF will be applied. In other words, it allows the program to decide how long the algorithm should take. This helps make brute force attacks less feasible.  The iteration count defaults to 1,000 - the recommended minimum.\n The PRF used here is HMAC-sha256. Coincidentally, HMAC is also used to sign and verify the session data as a whole, which we will go over in the next section.\n By logging the result of   Plug.Crypto.KeyGenerator.generate/6 we can see that it a session signing key is only generated once. All subsequent requests use a cached value, which is stored in ETS. Here&#39;s an example of what it looks like (the bitstring is the result, A.K.A. the derived session signing key):\n iex(2)&gt; :ets.lookup(Plug.Keys, {&#34;2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34;, &#34;8yQvCfAG&#34;,...(2)&gt; 1000, 32, :sha256})[ {{&#34;2/JWt8kJK5ybWYFPqXGDZj0o3LuKerv1CnG/F8LVbLi71hZTYllzKxP9HMpT+y0m&#34;, &#34;8yQvCfAG&#34;, 1000, 32, :sha256}, &lt;&lt;125, 248, 227, 17, 106, 91, 67, 35, 35, 99, 173, 58, 14, 29, 96, 107, 220, 193, 148, 164, 44, 239, 17, 58, 110, 9, 116, 230, 91, 9, 188, 88&gt;&gt;}]\n Now that we can see how a session signing key is generated from the application&#39;s  secret_key_base, we can learn how it is used to actually sign things.\n  As was mentioned above, HMAC is not only used to generate a signing key, but also used in the process of signing the session cookie data. As we will see, the goal of signing the data is not to prevent it from being seen, but rather to verify the authenticity and integrity of the data.\n   The output of HMAC is a string of bytes that reflects the message and key which was provided as input to the function. The message is sent along side the HMAC. The idea is that the message cannot be changed because the HMAC would no longer match. The HMAC cannot be changed either, because the secret key is not known (dependent on the strength of the underlying hash function).\n A question we might consider is,  Why not just use a SHA hash function directly, or some other kind of &#34;checksum&#34; approach? The answer is that HMAC is superior to sha-1, and sha-256 because it protects against  length extension attacks. Computerphile has a  great video about HMAC.\n In this example, the message is an Elixir map with the CSRF token. The key is the derived session signing key that we talked about above, and the underlying hash function is sha256.\n The function   hmac_sha2_sign/3 is called by  Plug.Crypto.MessageVerifier.sign/3, and we can look at it to understand why the session cookie looks the way it does.\n # `payload` and `key` are binaries, digest_type is :sha256defp hmac_sha2_sign(payload, key, digest_type) do protected = hmac_sha2_to_protected(digest_type) plain_text = signing_input(protected, payload) signature = :crypto.hmac(digest_type, key, plain_text) encode_token(plain_text, signature)end\n The result of this function will be what we can see in the browser as the value of the cookie:\n  Notice that this string of text can be split into three sections between the  &#34;.&#34;&#39;s. The first section is the result of  hmac_sha2_to_protected(digest_type). It&#39;s just a Base64-encoded rendition of the string, &#34;HS256&#34;.\n The second section is also encoded with Base64. It represents the message that is being signed and comes from  signing_input(protected, payload). We can have a look at it by decoding and then translating the binary to a term:\n  The last section is the signature, which comes from  :crypto.hmac(digest_type, key, plain_text). As we can see from the function arguments, it takes a hash function ( digest_type), a key, and then the message to secure. The signature is also Base64-encoded and  joined together with the message.\n Now that we can see the token is securely stored in the cookie, along with the details behind how that gets created, the last thing to look at is how the data is verified.\n  We have seen that a token is placed in the HTML document, as well as in a cookie. The last thing to cover is how they are verified. In the code below, from the   Plug.CSRFProtection module, we can start to follow the code to see how token verification happens.\n defp verified_request?(conn, csrf_token, allow_hosts) do conn.method in @unprotected_methods || valid_csrf_token?(conn, csrf_token, conn.body_params[&#34;_csrf_token&#34;], allow_hosts) || valid_csrf_token?(conn, csrf_token, first_x_csrf_token(conn), allow_hosts) || skip_csrf_protection?(conn)end\n     Both of these are sent to   valid_csrf_token?/4 and then to   valid_masked_token?/3. The mask is  pattern matched out of the tail end of the token from the HTML body.  Plug.Crypto.masked_compare/3 is then able to compare that the tokens match.\n @doc &#34;&#34;&#34;Compares the two binaries (one being masked) in constant-time to avoidtiming attacks.It is assumed the right token is masked according to the given mask.&#34;&#34;&#34;@spec masked_compare(binary(), binary(), binary()) :: boolean()def masked_compare(left, right, mask) when is_binary(left) and is_binary(right) and is_binary(mask) do byte_size(left) == byte_size(right) and masked_compare(left, right, mask, 0)enddefp masked_compare(&lt;&lt;x, left::binary&gt;&gt;, &lt;&lt;y, right::binary&gt;&gt;, &lt;&lt;z, mask::binary&gt;&gt;, acc) do xorred = x ^^^ (y ^^^ z) masked_compare(left, right, mask, acc ||| xorred)enddefp masked_compare(&lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, acc) do acc === 0end\n    To wrap things up let&#39;s do a quick recap of the whole process of when a user visits a page that has a form with HTTP method &#34;POST&#34;. The order of events isn&#39;t meant to be completely accurate - my goal here is to paint a generalized picture of what happens overall.\n Phoneix seems to use the  &#34;Double Submit Cookie&#34; approach when it comes to protecting from CSRF.\n HTML markup for the page is generated.   Phoenix.HTML.form_tag detects that the login form should include a CSRF token, since the form method is  POST.\n Plug.CSRFProtection.get_csrf_token_for(&#34;/login&#34;) is called, and it generates a masked CSRF token. The mask is the result of  XORing the token and &#34;random bytes&#34; together.\n  The same token is  added to the process dictionary if it does not already exist.\n  A key is derived from the applications  secret_key_base in order to cryptographically sign the data stored in the cookie. This is to prevent the data from being changed by someone other than the application itself. This is done with  PBKDF2.\n The data in the cookie (i.e. the CSRF token)  is Base64-encoded and joined together with the output of  a HMAC-sha256 function. This helps prevent the data from being tampered with.\n The application responds to the users browser with the HTML markup, which includes the injected CSRF token in the body of the form, and also uses the  set-cookie response header to set a cookie on the users browser with the same (unmasked) token.\n At this point the user can fill out the form and submit. This will trigger an HTTP POST request, and the tokens will be verified.\n The session data  is verified to ensure it has not been modified. If successful, the unmasked CSRF token  is revealed/returned.\n The masked token from the HTML body, along with the unmasked token from the session  are compared. The correct  mask is retreivable from the token in the HTML body. The comparison happens in a way that prevents timing attacks.\n If the tokens match, then there&#39;s not a problem. An error occurs if the tokens do not match.\n  That&#39;s about it! As we have seen, there&#39;s a lot of fancy stuff going on as part of this process, and its pretty amazinig to try and understand how it all fits together.\n It&#39;s this kind of stuff that makes me really appreciate all of the work that people are doing to both make and break software. I think it&#39;s a good practice to take a close look at the technologies, libraries, and frameworks that we use once in a while. It&#39;s a blessing that we don&#39;t have to totally understand all the details in order to create and be productive, but there is definitely value in doing so from time to time.", "posttime": "2020-05-07 19:56:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u67e5\u770b,csrf,\u51fd\u6570", "title": "\u4ed4\u7ec6\u67e5\u770bCSRF\u4ee4\u724c", "title_en": "Close Look at CSRF Tokens", "transed": 1, "url": "https://denvaar.github.io/articles/csrf_tokens_with_phoenix.html", "via": "", "real_tags": ["\u67e5\u770b", "csrf", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "11c9b04e1ecee11fac42027a651dac8e.png", "infoid": 1001053, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u89c6\u9891\u538b\u7f29\u7684\u9ed8\u8ba4\u5fc3\u7406\u56fe\u50cf\u5305\u542b\u4e0d\u9700\u8981\u7684\u89c6\u9891\u4f2a\u50cf\uff0c\u5982\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u5316\u548c\u5757\u72b6\u3002\u7136\u800c\uff0c\u8fd9\u4f4e\u4f30\u4e86\u538b\u7f29\u89c6\u9891\u5185\u5bb9\u7684\u5b9e\u9645\u590d\u6742\u6027\u3002\u7279\u522b\u662f\uff0c\u5b83\u5ffd\u7565\u4e86\u4e00\u4e2a\u79f0\u4e3a\u5e27\u95f4\u7684\u6709\u8da3\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u6d89\u53ca\u5173\u952e\u5e27\u548c\u589e\u91cf\u5e27\uff0c\u4ee5\u4fbf\u4ee5\u4e00\u79cd\u610f\u5728\u4e0d\u88ab\u6ce8\u610f\u7684\u65b9\u5f0f\u667a\u80fd\u5730\u538b\u7f29\u5185\u5bb9\u3002\n\u672c\u6587\u8be6\u7ec6\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u540c\u65f6\u8fd8\u7ed9\u51fa\u4e86\u6700\u4f73\u5b9e\u8df5\u548c\u7406\u60f3\u7684\u7f16\u7801\u5668\u8bbe\u7f6e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u5e94\u7528\u4e8eIBM Cloud Video\u7684\u5b9e\u51b5\u6d41\u3002\u8be5\u7279\u5b9a\u5efa\u8bae\u4e2d\u7684\u5927\u90e8\u5206\u6d89\u53ca\u7531\u4e8e\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u800c\u5bfc\u81f4\u7684\u6d41\u4f20\u8f93\u3002\u8981\u4e86\u89e3\u6709\u5173\u8be5\u6280\u672f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\u6211\u4eec\u7684\u300a\u81ea\u9002\u5e94\u6d41\u5982\u4f55\u89e3\u51b3\u67e5\u770b\u5668\u5e26\u5bbd\u95ee\u9898\u300b\u767d\u76ae\u4e66\u3002\n\u6d41\u5a92\u4f53\u6280\u672f\u6709\u5f88\u591a\u672f\u8bed\u548c\u65b9\u9762\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\u968f\u7740\u4e00\u4e9b\u4eba\u6210\u4e3a\u4e00\u540d\u6210\u719f\u7684\u64ad\u97f3\u5458\uff0c\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\u5143\u7d20\u4ee5\u4e86\u89e3\u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u6d41\u7a0b\u4ee5\u53ca\u6700\u4f73\u8bbe\u7f6e\u662f\u503c\u5f97\u7684\u3002\n\u4f8b\u5982\uff0c\u5173\u952e\u5e27\u662f\u4e00\u4e9b\u5e7f\u64ad\u516c\u53f8\u4ee5\u524d\u63d0\u5230\u8fc7\u7684\u4e1c\u897f\uff0c\u6216\u8005\u5728Wirecast\u8fd9\u6837\u7684\u7f16\u7801\u5668\u4e2d\u770b\u5230\u8fc7\u8bbe\u7f6e\uff0c\u4f46\u6ca1\u6709\u5b8c\u5168\u610f\u8bc6\u5230\u5b83\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u8fc7\u7a0b\u5bf9\u6d41\u5a92\u4f53\u6709\u591a\u5927\u597d\u5904\u3002\u5173\u952e\u5e27\u662f\u4e00\u4e2a\u91cd\u8981\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u662f\u5e2e\u52a9\u964d\u4f4e\u89c6\u9891\u6240\u9700\u5e26\u5bbd\u7684\u8f83\u957f\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\u3002\u8981\u7406\u89e3\u8fd9\u79cd\u5173\u7cfb\uff0c\u9996\u5148\u9700\u8981\u7406\u89e3\u89c6\u9891\u5e27\u3002\n\u4ece\u9ad8\u5c42\u6b21\u5f00\u59cb\uff0c\u5f88\u53ef\u80fd\u4f1a\u610f\u8bc6\u5230\u89c6\u9891\u5185\u5bb9\u662f\u7531\u4e00\u7cfb\u5217\u5e27\u7ec4\u6210\u7684\u3002\u901a\u5e38\u8868\u793a\u4e3aFPS(\u6bcf\u79d2\u5e27\u6570)\uff0c\u6bcf\u5e27\u90fd\u662f\u9759\u6b62\u56fe\u50cf\uff0c\u5f53\u6309\u987a\u5e8f\u64ad\u653e\u65f6\u4f1a\u521b\u5efa\u8fd0\u52a8\u56fe\u50cf\u3002\u56e0\u6b64\uff0c\u4f7f\u7528FPS\u4e3a30\u521b\u5efa\u7684\u5185\u5bb9\u610f\u5473\u7740\u6bcf\u79d2\u949f\u5c06\u64ad\u653e30\u4e2a\u201c\u9759\u6b62\u56fe\u50cf\u201d\u3002\n\u5728\u4e00\u6bb5\u5e73\u5747\u89c6\u9891\u4e2d\uff0c\u5982\u679c\u6709\u4eba\u62cd\u644490\u4e2a\u8fde\u7eed\u7684\u5e27\u5e76\u5c06\u5176\u5c55\u5f00\uff0c\u4ed6\u4eec\u5c06\u770b\u5230\u8bb8\u591a\u51e0\u4e4e\u76f8\u540c\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4eba\u7ad9\u5728\u4e00\u682a\u9759\u6b62\u7684\u690d\u7269\u65c1\u8fb9\u8bf4\u8bdd\uff0c\u90a3\u4e48\u4e0e\u8be5\u690d\u7269\u6709\u5173\u7684\u4fe1\u606f\u5c31\u4e0d\u592a\u53ef\u80fd\u6539\u53d8\u3002\u7ed3\u679c\uff0c\u8fd9\u5c31\u6d6a\u8d39\u4e86\u5927\u91cf\u5e26\u5bbd\uff0c\u4ec5\u4ec5\u662f\u7528\u6765\u4f20\u8fbe\u67d0\u4e9b\u4e1c\u897f\u6ca1\u6709\u6539\u53d8\u7684\u4fe1\u606f\u3002\n\u56e0\u6b64\uff0c\u5f53\u5bfb\u627e\u6709\u6548\u7684\u65b9\u6cd5\u6765\u538b\u7f29\u89c6\u9891\u5185\u5bb9\u65f6\uff0c\u5e27\u7ba1\u7406\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u539f\u5219\u3002\u56e0\u6b64\uff0c\u5982\u679c\u793a\u4f8b\u4e2d\u7684\u690d\u7269\u4e0d\u4f1a\u6539\u53d8\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5728\u540e\u7eed\u7684\u4e00\u4e9b\u5e27\u4e2d\u7ee7\u7eed\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u6765\u51cf\u5c11\u7a7a\u95f4\u5462\uff1f\n\u8fd9\u79cd\u8ba4\u8bc6\u50ac\u751f\u4e86\u5e27\u95f4\u9884\u6d4b\u7684\u60f3\u6cd5\u3002\u8fd9\u662f\u4e00\u79cd\u89c6\u9891\u538b\u7f29\u6280\u672f\uff0c\u5b83\u5c06\u5e27\u5212\u5206\u4e3a\u5b8f\u5757\uff0c\u7136\u540e\u67e5\u627e\u5757\u4e4b\u95f4\u7684\u5197\u4f59\u3002\u6b64\u8fc7\u7a0b\u901a\u8fc7\u4f7f\u7528\u5173\u952e\u5e27(\u4e5f\u79f0\u4e3aI\u5e27\u6216\u5e27\u5185\u5e27)\u548c\u589e\u91cf\u5e27\u6765\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u5e27\u4ec5\u5b58\u50a8\u56fe\u50cf\u4e2d\u7684\u66f4\u6539\u4ee5\u51cf\u5c11\u5197\u4f59\u4fe1\u606f\u3002\u8fd9\u4e9b\u5e27\u96c6\u5408\u901a\u5e38\u7531\u7f29\u5199\u4e3aGOP\u7684\u201c\u56fe\u7247\u7ec4\u201d\u7684\u76f8\u5f53\u975e\u6280\u672f\u6027\u7684\u540d\u79f0\u6765\u6307\u4ee3\u3002\u7528\u4e8e\u7f16\u7801\u6216\u89e3\u7801\u6570\u5b57\u6570\u636e\u6d41\u7684\u89c6\u9891\u7f16\u89e3\u7801\u5668\u90fd\u5177\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u5e27\u95f4\u7ba1\u7406\u3002H.264\u3001MPEG-2\u548cMPEG-4\u90fd\u4f7f\u7528\u4e09\u5e27\u65b9\u6cd5\uff0c\u5305\u62ec\uff1a\u5173\u952e\u5e27\u3001p\u5e27\u548cb\u5e27\u3002\n\u5173\u952e\u5e27(I\u5e27)\u662f\u89c6\u9891\u4e2d\u56fe\u50cf\u7684\u5b8c\u6574\u5e27\u3002\u540e\u7eed\u5e27(\u589e\u91cf\u5e27)\u4ec5\u5305\u542b\u5df2\u66f4\u6539\u7684\u4fe1\u606f\u3002\u5173\u952e\u5e27\u5c06\u5728\u4e00\u4e2a\u6d41\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5b83\u662f\u5982\u4f55\u521b\u5efa\u7684\uff0c\u6216\u8005\u5b83\u662f\u5982\u4f55\u6d41\u5f0f\u4f20\u8f93\u7684\u3002\n\u5982\u679c\u6709\u4eba\u7528\u8c37\u6b4c\u641c\u7d22\u201c\u5173\u952e\u5e27\u201d\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u4f1a\u627e\u5230\u4e00\u4e9b\u4e0e\u52a8\u753b\u548c\u89c6\u9891\u7f16\u8f91\u76f8\u5173\u7684\u7ed3\u679c\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5173\u952e\u5e27\u4e00\u8bcd\u6765\u8bf4\u660e\u5b83\u4e0e\u89c6\u9891\u538b\u7f29\u7684\u5173\u7cfb\u53ca\u5176\u4e0e\u589e\u91cf\u5e27\u7684\u5173\u7cfb\u3002\n\u4e5f\u79f0\u4e3a\u9884\u6d4b\u5e27\u6216\u9884\u6d4b\u5e27\uff0cp\u5e27\u8ddf\u968f\u53e6\u4e00\u5e27\uff0c\u5e76\u4e14\u5728\u89c6\u9891\u4e2d\u4ec5\u5305\u542b\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u5b83\u88ab\u5f52\u7c7b\u4e3a\u589e\u91cf\u6846\u67b6\u3002P-\u5e27\u5411\u540e\u67e5\u770b\u524d\u4e00\u4e2aP-\u5e27\u6216\u5173\u952e\u5e27(I-\u5e27)\u4ee5\u67e5\u627e\u5197\u4f59\u3002\u5728P\u5e27\u4e2d\u5448\u73b0\u7684\u56fe\u50cf\u91cf\u53d6\u51b3\u4e8e\u5e27\u4e4b\u95f4\u5305\u542b\u7684\u65b0\u4fe1\u606f\u91cf\u3002\n\u4f8b\u5982\uff0c\u67d0\u4eba\u5728\u9759\u6001\u80cc\u666f\u524d\u5bf9\u7740\u6444\u50cf\u673a\u8bb2\u8bdd\uff0c\u53ef\u80fd\u53ea\u5305\u542b\u4e0e\u5176\u8fd0\u52a8\u76f8\u5173\u7684\u4fe1\u606f\u3002\u7136\u800c\uff0c\u5f53\u6444\u50cf\u673a\u6447\u6444\u65f6\uff0c\u67d0\u4eba\u5728\u7530\u91ce\u4e2d\u5954\u8dd1\u65f6\uff0c\u6bcf\u4e2ap\u5e27\u90fd\u4f1a\u6709\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u4ee5\u5339\u914d\u4ed6\u4eec\u7684\u8fd0\u52a8\u548c\u53d8\u5316\u7684\u80cc\u666f\u3002\n\u4e5f\u79f0\u4e3a\u53cc\u5411\u9884\u6d4b\u5e27\uff0cb\u5e27\u8ddf\u968f\u53e6\u4e00\u5e27\uff0c\u5e76\u4e14\u5728\u89c6\u9891\u4e2d\u4ec5\u5305\u542b\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u3002\u5305\u542b\u5728B\u5e27\u4e2d\u7684\u56fe\u50cf\u91cf\u53d6\u51b3\u4e8e\u5e27\u4e4b\u95f4\u7684\u65b0\u4fe1\u606f\u91cf\u3002\n\u4e0eP\u5e27\u4e0d\u540c\uff0cB\u5e27\u53ef\u4ee5\u5411\u540e\u6216\u5411\u540e\u67e5\u770b\u524d\u9762\u6216\u540e\u9762\u7684P\u5e27\u6216\u5173\u952e\u5e27(I\u5e27)\u4ee5\u67e5\u627e\u5197\u4f59\u3002\u8fd9\u4f7f\u5f97B\u5e27\u6bd4P\u5e27\u66f4\u6709\u6548\uff0c\u56e0\u4e3a\u5b83\u4eec\u66f4\u6709\u53ef\u80fd\u627e\u5230\u5197\u4f59\u3002\u4f46\u662f\uff0c\u5f53\u7f16\u7801\u5668\u5185\u90e8\u7684\u7f16\u7801\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u4e3a\u57fa\u7ebf\u65f6\uff0c\u4e0d\u4f7f\u7528b\u5e27\u3002\u8fd9\u610f\u5473\u7740\u7f16\u7801\u5668\u5fc5\u987b\u8bbe\u7f6e\u5728\u57fa\u7ebf\u4e4b\u4e0a\u7684\u7f16\u7801\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982\u201cMain\u201d\u6216\u201cHIGH\u201d\u3002\n\u5173\u4e8e\u7528\u4e8e\u5b9e\u51b5\u6d41\u7684\u89c6\u9891\u538b\u7f29\uff0c\u5728\u7f16\u7801\u5668\u5185\u90e8\u8bbe\u7f6e\u5173\u952e\u5e27\u3002\u8fd9\u662f\u7531\u7f16\u7801\u5668\u5185\u90e8\u6709\u65f6\u79f0\u4e3a\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u7684\u9009\u9879\u914d\u7f6e\u7684\u3002\n\u5173\u952e\u5e27\u95f4\u9694\u63a7\u5236\u5728\u89c6\u9891\u4e2d\u521b\u5efa\u5173\u952e\u5e27(I\u5e27)\u7684\u9891\u7387\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5173\u952e\u5e27\u95f4\u9694\u8d8a\u5927\uff0c\u5e94\u7528\u4e8e\u5185\u5bb9\u7684\u538b\u7f29\u7a0b\u5ea6\u8d8a\u9ad8\uff0c\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u8d28\u91cf\u4f1a\u660e\u663e\u964d\u4f4e\u3002\u6709\u5173\u5173\u952e\u5e27\u95f4\u9694\u5982\u4f55\u5de5\u4f5c\u7684\u793a\u4f8b\uff0c\u5982\u679c\u5c06\u95f4\u9694\u8bbe\u7f6e\u4e3a\u6bcf2\u79d2\u4e00\u6b21\uff0c\u5e76\u4e14\u5e27\u901f\u7387\u4e3a\u6bcf\u79d230\u5e27\uff0c\u8fd9\u5c06\u610f\u5473\u7740\u5927\u7ea6\u6bcf60\u5e27\u751f\u6210\u4e00\u4e2a\u5173\u952e\u5e27\u3002\n\u672f\u8bed\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u4e0d\u662f\u901a\u7528\u7684\uff0c\u5927\u591a\u6570\u7f16\u7801\u5668\u5bf9\u6b64\u90fd\u6709\u81ea\u5df1\u7684\u672f\u8bed\u3002\u4f8b\u5982\uff0cAdobe Flash Media Live\u7f16\u7801\u5668(FMLE)\u548cvMix\u4f7f\u7528\u672f\u8bed\u201c\u5173\u952e\u5e27\u9891\u7387\u201d\u6765\u63cf\u8ff0\u6b64\u8fc7\u7a0b\u3002\u5176\u4ed6\u7a0b\u5e8f\u548c\u670d\u52a1\u53ef\u80fd\u5c06\u8be5\u95f4\u9694\u79f0\u4e3a\u201cGOP\u5927\u5c0f\u201d\u6216\u201cGOP\u957f\u5ea6\u201d\uff0c\u56de\u5230\u201c\u56fe\u7247\u7ec4\u201d\u7684\u7f29\u5199\u3002\n\u5bf9\u4e8eFMLE\uff0c\u901a\u8fc7\u5355\u51fbFormat(\u683c\u5f0f)\u53f3\u4fa7\u7684\u6273\u624b\u56fe\u6807\uff0c\u53ef\u4ee5\u5728\u8f6f\u4ef6\u7f16\u7801\u5668\u4e2d\u627e\u5230\u6b64\u9009\u9879\uff0c\u8868\u793a\u4e3a\u201cKeyframe Frequency\u201d(\u5173\u952e\u5e27\u9891\u7387)\u3002\n\u5728Wirecast\u4e2d\uff0c\u8fd9\u662f\u4ece\u7f16\u7801\u5668\u9884\u8bbe\u83dc\u5355\u4e2d\u8bbe\u7f6e\u7684\uff0c\u8be5\u9009\u9879\u79f0\u4e3a\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u3002\u6709\u7ebf\u5e7f\u64ad\u5219\u4e0d\u540c\uff0c\u56e0\u4e3a\u95f4\u9694\u5b9e\u9645\u4e0a\u662f\u4ee5\u5e27\u8868\u793a\u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e30 FPS\u7684\u5e7f\u64ad\uff0c\u5c06\u201c\u5173\u952e\u5e27\u95f4\u9694\u201d\u8bbe\u7f6e\u4e3a60\u5e27\u5c06\u5927\u81f4\u5f97\u52302\u79d2\u7684\u5173\u952e\u5e27\u95f4\u9694\uff0c\u56e0\u4e3a\u60a8\u6bcf\u79d2\u670930\u5e27\u3002\n\u5bf9\u4e8evMix\u7f16\u7801\u5668\uff0c\u9700\u8981\u9996\u5148\u5355\u51fb\u6d41\u5f0f\u5904\u7406\u9644\u8fd1\u7684\u9f7f\u8f6e\u56fe\u6807\uff0c\u8fd9\u5c06\u6253\u5f00\u6d41\u5f0f\u5904\u7406\u8bbe\u7f6e\u3002\u5728\u8fd9\u91cc\u7684\u8d28\u91cf\u9009\u9879\u9644\u8fd1\u662f\u53e6\u4e00\u4e2a\u9f7f\u8f6e\u56fe\u6807\uff0c\u5355\u51fb\u6b64\u56fe\u6807\u5c06\u6253\u5f00\u4e00\u4e2a\u83dc\u5355\uff0c\u8be5\u83dc\u5355\u53ef\u4ee5\u4fee\u6539\u201c\u5173\u952e\u5e27\u9891\u7387\u201d\u3002\n\u5728\u5f00\u653e\u5f0f\u5e7f\u64ad\u8f6f\u4ef6(OBS)\u4e2d\uff0c\u5bf9\u4e8e\u7248\u672c0.55b\u4e4b\u540e\u7684\u7248\u672c\uff0c\u53ef\u4ee5\u5728\u9ad8\u7ea7\u4e0b\u7684\u8bbe\u7f6e\u533a\u57df\u4e2d\u8bbe\u7f6e\u5173\u952e\u5e27\u95f4\u9694\u3002\u5bf9\u4e8ev0.542b\u4e4b\u524d\u7684OBS\u7248\u672c\uff0c\u5982\u4f55\u4fee\u6539\u5173\u952e\u5e27\u95f4\u9694\u5e76\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u662f\u8bbe\u7f6e\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u5728\u90a3\u91cc\uff0c\u8f6c\u5230\u9ad8\u7ea7\uff0c\u7136\u540e\u9009\u62e9\u201c\u81ea\u5b9a\u4e49X264\u7f16\u7801\u5668\u8bbe\u7f6e\u201d\u3002\u5728\u8be5\u5b57\u6bb5\u4e2d\uff0c\u9700\u8981\u8f93\u5165\u4ee5\u4e0b\u5b57\u7b26\u4e32\uff1a\u201ckeyint=XX\u201d\uff0cXX\u662f\u89e6\u53d1\u5173\u952e\u5e27\u4e4b\u524d\u7684\u5e27\u6570\u3002\u4e0eWirecast\u7c7b\u4f3c\uff0c\u5982\u679c\u5e0c\u671b\u5173\u952e\u5e27\u95f4\u9694\u4e3a2\u79d2\uff0c\u800cFPS\u4e3a30\u79d2\uff0c\u8bf7\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a\u201ckeyint=60\u201d\u3002\n\u5bf9\u4e8eXSplit\uff0c\u5173\u952e\u5e27\u95f4\u9694\u662f\u901a\u9053\u5c5e\u6027\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u5728\u89c6\u9891\u7f16\u7801\u533a\u57df\u4e0b\uff0c\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5217\u8868\uff0c\u4e0a\u9762\u5199\u7740\u201c\u5173\u952e\u5e27\u95f4\u9694(\u79d2)\u201d\u3002\u6700\u53f3\u8fb9\u662f\u9f7f\u8f6e\u56fe\u6807\u3002\u5355\u51fb\u9f7f\u8f6e\u5c06\u542f\u52a8\u201cVideo Encoding Setup\u201d(\u89c6\u9891\u7f16\u7801\u8bbe\u7f6e)\u5f39\u51fa\u7a97\u53e3\u3002\u8fd9\u5c06\u5141\u8bb8\u7528\u6237\u4ee5\u79d2\u4e3a\u5355\u4f4d\u6307\u5b9a\u5173\u952e\u5e27\u95f4\u9694\u3002\n\u6b64\u89e3\u91ca\u4e2d\u7684\u91cc\u7a0b\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u4e3a\u7f16\u7801\u5668\u7ba1\u7406\u6bd4\u7279\u7387\u548c\u5173\u952e\u5e27\u7684\u65b9\u5f0f\u4e0d\u540c\u3002\u4f7f\u7528\u50cfWirecast\u8fd9\u6837\u7684\u7f16\u7801\u5668\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u4e0e\u5e7f\u64ad\u5728\u79fb\u52a8\u80cc\u666f\u4e0b\u4e0a\u4e0b\u8df3\u8dc3\u7684\u4eba\u76f8\u6bd4\uff0c\u5e7f\u64ad\u5728\u9759\u6b62\u80cc\u666f\u4e0b\u8bb2\u8bdd\u7684\u4eba\u5177\u6709\u201c\u66f4\u9ad8\u7684\u8d28\u91cf\u201d\u3002\u5f53\u5728\u5b83\u4eec\u4e4b\u95f4\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7684\u5e73\u5747\u6bd4\u7279\u7387\u548c\u5173\u952e\u5e27\u95f4\u9694\u65f6\uff0c\u8fd9\u53ef\u4ee5\u88ab\u91cd\u73b0\u3002\u5176\u539f\u56e0\u90e8\u5206\u662f\u7531\u4e8e\u589e\u91cf\u5e27\u5728\u8df3\u8dc3\u793a\u4f8b\u4e2d\u6709\u5927\u91cf\u4fe1\u606f\u8981\u5171\u4eab\u7684\u4e8b\u5b9e\u3002\u5197\u4f59\u975e\u5e38\u5c11\uff0c\u8fd9\u610f\u5473\u7740\u9700\u8981\u5728\u6bcf\u4e2a\u589e\u91cf\u5e27\u4e0a\u4f20\u8f93\u7684\u6570\u636e\u8981\u591a\u5f97\u591a\u3002\n\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u50cfWirecast\u8fd9\u6837\u7684\u7f16\u7801\u5668\uff0c\u5b83\u4f1a\u5c3d\u6700\u5927\u52aa\u529b\u4f7f\u7801\u6d41\u4fdd\u6301\u5728\u9009\u62e9\u7684\u5e73\u5747\u6bd4\u7279\u7387\u9644\u8fd1\u3002\u56e0\u6b64\uff0c\u589e\u91cf\u5e27\u4e2d\u5305\u542b\u7684\u9644\u52a0\u4fe1\u606f\u6240\u9700\u7684\u589e\u52a0\u7684\u5e26\u5bbd\u5bfc\u81f4\u8d28\u91cf\u964d\u4f4e\uff0c\u4ee5\u8bd5\u56fe\u5c06\u5e73\u5747\u6bd4\u7279\u7387\u4fdd\u6301\u5728\u76f8\u540c\u6c34\u5e73\u9644\u8fd1\u3002\n\u4ece\u6765\u6ca1\u6709\u4e00\u4e2a\u884c\u4e1a\u6807\u51c6\uff0c\u5c3d\u7ba110\u79d2\u7ecf\u5e38\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5173\u952e\u5e27\u95f4\u9694\uff0c\u5c3d\u7ba1\u4e0d\u518d\u5efa\u8bae\u6d41\u5a92\u4f53\u4f7f\u752810\u79d2\u3002\u5efa\u8bae\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u5bf9\u4e8e\u6807\u51c6\u768429.97FPS\u6587\u4ef6\uff0c\u751f\u6210\u7684\u5185\u5bb9\u5177\u6709\u8db3\u591f\u7684\u54cd\u5e94\u6027\uff0c\u53ef\u4ee5\u652f\u6301\u4ece\u9884\u89c8\u6ed1\u5757\u8f7b\u677e\u5bfc\u822a\u3002\u4e3a\u4e86\u89e3\u91ca\u66f4\u591a\uff0c\u64ad\u653e\u5668\u4e0d\u80fd\u5728p\u5e27\u6216b\u5e27\u4e0a\u5f00\u59cb\u64ad\u653e\u3002\u56e0\u6b64\uff0c\u4f7f\u752810\u79d2\u7684\u793a\u4f8b\uff0c\u5982\u679c\u6709\u4eba\u8bd5\u56fe\u5bfc\u822a\u5230\u63d0\u8981\u4e2d\u76845\u79d2\u7684\u70b9\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u5c065\u79d2\u79fb\u56de\u6700\u8fd1\u7684\u5173\u952e\u5e27\u5e76\u5f00\u59cb\u64ad\u653e\u3002\u8fd9\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u5e26\u5bbd\u6d88\u8017\u7684\u5f88\u597d\u7684\u6743\u8861\uff0c\u5c3d\u7ba1\u4f5c\u4e3a\u53c2\u8003\uff0cDVD\u9009\u62e9\u4f7f\u7528\u6bd410\u79d2\u5c0f\u5f97\u591a\u7684\u4e1c\u897f\u3002\n\u7136\u800c\uff0c\u5bf9\u4e8e\u76f4\u64ad\u6765\u8bf4\uff0c\u63a8\u8350\u7ea7\u522b\u5374\u5927\u5e45\u4e0b\u964d\u3002\u5176\u539f\u56e0\u662f\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u6d41\u7684\u51fa\u73b0\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089\u81ea\u9002\u5e94\u6d41\u5f0f\u4f20\u8f93\u7684\u4eba\uff0c\u8be5\u6280\u672f\u4f7f\u89c6\u9891\u64ad\u653e\u5668\u80fd\u591f\u57fa\u4e8e\u8bd5\u56fe\u89c2\u770b\u7684\u89c2\u4f17\u5728\u53ef\u7528\u5206\u8fa8\u7387\u548c/\u6216\u6bd4\u7279\u7387\u4e4b\u95f4\u52a8\u6001\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u4e0b\u8f7d\u901f\u5ea6\u8f83\u6162\u7684\u7528\u6237\u5c06\u83b7\u5f97\u8f83\u4f4e\u7684\u6bd4\u7279\u7387\u7248\u672c(\u5982\u679c\u6709)\u3002\u5176\u4ed6\u6807\u51c6\uff0c\u5982\u56de\u653e\u7a97\u53e3\u5927\u5c0f\uff0c\u4e5f\u5c06\u5f71\u54cd\u7ed9\u5b9a\u7684\u6bd4\u7279\u7387\u3002\n\u7136\u800c\uff0c\u771f\u6b63\u7684\u81ea\u9002\u5e94\u6d41\u5a92\u4f53\u4e0d\u4ec5\u5728\u89c6\u9891\u5185\u5bb9\u6700\u521d\u52a0\u8f7d\u65f6\u8fdb\u884c\u8fd9\u79cd\u68c0\u67e5\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u6839\u636e\u89c2\u4f17\u7aef\u7684\u53d8\u5316\u6765\u6539\u53d8\u6bd4\u7279\u7387\u3002\u4f8b\u5982\uff0c\u5982\u679c\u89c2\u4f17\u5728\u4ed6\u4eec\u7684\u624b\u673a\u4e0a\u79fb\u52a8\u5230Wi-Fi\u7f51\u7edc\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u4ed6\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528\u6b63\u5e38\u7684\u8702\u7a9d\u670d\u52a1\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0b\u8f7d\u901f\u5ea6\u53d8\u6162\u3002\u56e0\u6b64\uff0c\u89c2\u4f17\u53ef\u80fd\u8bd5\u56fe\u89c2\u770b\u6bd4\u7279\u7387\u76f8\u5bf9\u4e8e\u5176\u4e0b\u8f7d\u901f\u5ea6\u8fc7\u9ad8\u7684\u5185\u5bb9\u3002\u81ea\u9002\u5e94\u6d41\u4f20\u8f93\u6280\u672f\u5e94\u8be5\u610f\u8bc6\u5230\u8fd9\u79cd\u5dee\u5f02\uff0c\u5e76\u4f7f\u5176\u5207\u6362\u5230\u4e0d\u540c\u7684\u6bd4\u7279\u7387\u3002\n\u5173\u952e\u5e27\u95f4\u9694\u5728\u6b64\u751f\u6548\uff0c\u56e0\u4e3a\u5207\u6362\u53d1\u751f\u5728\u4e0b\u4e00\u4e2a\u5173\u952e\u5e27\u671f\u95f4\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6709\u4eba\u4ee510\u79d2\u7684\u95f4\u9694\u8fdb\u884c\u5e7f\u64ad\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u80fd\u9700\u8981\u957f\u8fbe10\u79d2\u7684\u65f6\u95f4\u624d\u80fd\u6539\u53d8\u6bd4\u7279\u7387\u548c\u5206\u8fa8\u7387\u3002\u8fd9\u6bb5\u65f6\u95f4\u610f\u5473\u7740\u5185\u5bb9\u53ef\u80fd\u4f1a\u5728\u66f4\u6539\u53d1\u751f\u4e4b\u524d\u7f13\u51b2\u5728\u89c2\u4f17\u4e00\u65b9\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u89c2\u4f17\u653e\u5f03\u3002\n\u56e0\u6b64\uff0c\u5efa\u8bae\u5c06\u76f4\u64ad\u7684\u5173\u952e\u5e27\u95f4\u9694\u8bbe\u7f6e\u4e3a2\u79d2\u3002\u8fd9\u4ea7\u751f\u4e86\u8fd9\u6837\u7684\u7ed3\u679c\uff0c\u5176\u4e2d\u89c6\u9891\u8f68\u9053\u53ef\u4ee5\u7ecf\u5e38\u5728\u7528\u6237\u53ef\u80fd\u7531\u4e8e\u5176\u4e0b\u8f7d\u901f\u5ea6\u7684\u964d\u4f4e\u800c\u7ecf\u5386\u7f13\u51b2\u4e4b\u524d\u6709\u6548\u5730\u6539\u53d8\u6bd4\u7279\u7387\u3002\n\u6211\u4eec\u5728\u8fd9\u91cc\u5faa\u73af\uff0c\u4f46\u5728\u8ba8\u8bba\u4ec0\u4e48\u662fIDR\u5e27\u6216\u5373\u65f6\u89e3\u7801\u5237\u65b0\u5e27\u4e4b\u524d\uff0c\u4e86\u89e3p\u5e27\u3001b\u5e27\u5e76\u5b66\u4e60\u81ea\u9002\u5e94\u6d41\u4f20\u8f93\u901f\u6210\u8bfe\u7a0b\u662f\u503c\u5f97\u7684\u3002\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u5173\u952e\u5e27\uff0c\u6bcf\u4e2a\u5173\u952e\u5e27\u53ef\u4ee5\u662f\u57fa\u4e8eIDR\u7684\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u662f\u57fa\u4e8eIDR\u7684\u3002\u4e24\u8005\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u57fa\u4e8eIDR\u7684\u5173\u952e\u5e27\u8d77\u5230\u4e86\u786c\u505c\u6b62\u7684\u4f5c\u7528\u3002IDR\u5e27\u9632\u6b62P\u5e27\u548cB\u5e27\u5f15\u7528\u53d1\u751f\u5728IDR\u5e27\u4e4b\u524d\u7684\u5e27\u3002\u975eIDR\u5173\u952e\u5e27\u5c06\u5141\u8bb8\u8fd9\u4e9b\u5e27\u66f4\u8fdc\u5730\u5411\u540e\u67e5\u627e\u5197\u4f59\u3002\n\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u975eIDR\u5173\u952e\u5e27\u542c\u8d77\u6765\u5f88\u7406\u60f3\uff1a\u5b83\u5141\u8bb8\u67e5\u770b\u66f4\u5927\u7684\u5e27\u6837\u672c\u4ee5\u8fdb\u884c\u5197\u4f59\uff0c\u4ece\u800c\u6781\u5927\u5730\u51cf\u5c0f\u4e86\u6587\u4ef6\u5927\u5c0f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5bfc\u822a\u51fa\u73b0\u4e86\u5f88\u591a\u95ee\u9898\uff0c\u800c\u4e14\u8be5\u529f\u80fd\u5728\u81ea\u9002\u5e94\u6d41\u5a92\u4f53\u4e2d\u4e0d\u80fd\u5f88\u597d\u5730\u53d1\u6325\u4f5c\u7528\u3002\u4ee5\u5bfc\u822a\u4e3a\u4f8b\uff0c\u5047\u8bbe\u67d0\u4eba\u5f00\u59cb\u89c2\u770b6\u5206\u949f\u540e\u7684\u4e00\u6761\u6d41\u3002\u8fd9\u5c06\u5bfc\u81f4\u95ee\u9898\uff0c\u56e0\u4e3aP\u5e27\u548cB\u5e27\u53ef\u80fd\u5f15\u7528\u7684\u4fe1\u606f\u4ece\u672a\u88ab\u67e5\u770b\u5668\u5b9e\u9645\u8bbf\u95ee\u8fc7\u3002\u5bf9\u4e8e\u81ea\u9002\u5e94\u6d41\u5f0f\u4f20\u8f93\uff0c\u5982\u679c\u66f4\u6539\u6bd4\u7279\u7387\u548c\u5206\u8fa8\u7387\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\u8fd9\u662f\u56e0\u4e3a\u65b0\u9009\u62e9\u53ef\u80fd\u5f15\u7528\u67e5\u770b\u5668\u5728\u4e0d\u540c\u8d28\u91cf\u8bbe\u7f6e\u4e0b\u89c2\u770b\u7684\u4e0d\u518d\u5e73\u884c\u7684\u6570\u636e\u3002\u51fa\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u59cb\u7ec8\u5efa\u8bae\u5c06\u5173\u952e\u5e27\u8bbe\u7f6e\u4e3a\u57fa\u4e8eIDR\u3002\n\u901a\u5e38\uff0c\u7f16\u7801\u5668\u8981\u4e48\u63d0\u4f9b\u6253\u5f00\u6216\u5173\u95ed\u57fa\u4e8eIDR\u7684\u5173\u952e\u5e27\u7684\u9009\u9879\uff0c\u8981\u4e48\u6839\u672c\u4e0d\u63d0\u4f9b\u8be5\u9009\u9879\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u63d0\u4f9b\u8be5\u9009\u9879\u7684\u7f16\u7801\u5668\uff0c\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u662f\u8fd9\u6837\u7684\uff0c\u56e0\u4e3a\u7f16\u7801\u5668\u88ab\u8bbe\u7f6e\u4e3a\u53ea\u4f7f\u7528IDR\u5e27\u3002\n\u539f\u5219\u4e0a\uff0c\u81ea\u52a8\u5173\u952e\u5e27\u8bbe\u7f6e\u76f8\u5f53\u4e0d\u9519\u3002\u5b83\u4eec\u5c06\u5728\u573a\u666f\u66f4\u6539\u671f\u95f4\u624b\u52a8\u5f3a\u5236\u6267\u884c\u5173\u952e\u5e27\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4ecePowerPoint\u5e7b\u706f\u7247\u5207\u6362\u5230\u67d0\u4eba\u5728\u76f8\u673a\u524d\u8bb2\u8bdd\u7684\u56fe\u50cf\uff0c\u5219\u4f1a\u5f3a\u5236\u4f7f\u7528\u65b0\u7684\u5173\u952e\u5e27\u3002\u8fd9\u662f\u53ef\u53d6\u7684\uff0c\u56e0\u4e3a\u4e09\u89d2\u6846\u4e0d\u4f1a\u6709\u592a\u591a\u7684\u5de5\u4f5c\uff0c\u65e0\u6cd5\u627e\u5230PowerPoint\u5e7b\u706f\u7247\u548c\u76f8\u673a\u56fe\u50cf\u4e4b\u95f4\u7684\u5197\u4f59\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u6b64\u8fc7\u7a0b\u4e0d\u9002\u7528\u4e8e\u67d0\u4e9b\u81ea\u9002\u5e94\u6d41\u4f20\u8f93\u6280\u672f\uff0c\u5c24\u5176\u662fHLS\u3002HLS\u8fc7\u7a0b\u8981\u6c42\u5173\u952e\u5e27\u662f\u53ef\u9884\u6d4b\u7684\u4e14\u540c\u6b65\u3002\u4f7f\u7528\u201c\u81ea\u52a8\u201d\u8bbe\u7f6e\u5c06\u5728\u5173\u952e\u5e27\u4e4b\u95f4\u521b\u5efa\u53ef\u53d8\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u5982\u679c\u573a\u666f\u66f4\u6539\u53d1\u751f\u5f97\u5f88\u5feb\uff0c\u5219\u5173\u952e\u5e27\u4e4b\u95f4\u7684\u65f6\u95f4\u53ef\u80fd\u662f7\u79d2\uff0c\u7136\u540e\u53ef\u80fd\u662f2\u79d2\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u7f16\u7801\u5668\u6765\u8bf4\uff0c\u8981\u7981\u7528\u201c\u81ea\u52a8\u66f4\u6539\u201d\u6216\u201c\u573a\u666f\u66f4\u6539\u68c0\u6d4b\u201d\u529f\u80fd\uff0c\u8fd9\u901a\u5e38\u53ea\u662f\u8868\u793a\u5173\u952e\u5e27\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u5728OBS\u4e2d\uff0c\u5982\u679c\u5173\u952e\u5e27\u95f4\u9694\u8bbe\u7f6e\u4e3a0\u79d2\uff0c\u5219\u81ea\u52a8\u529f\u80fd\u5c06\u751f\u6548\u3002\u5728\u5176\u4e2d\u653e\u7f6e\u4efb\u4f55\u6570\u5b57\uff0c\u59821\u62162\uff0c\u90fd\u5c06\u7981\u7528\u81ea\u52a8\u529f\u80fd\u3002\n\u5982\u679c\u7f16\u7801\u5668\u548cWirecast\u4e00\u6837\uff0c\u6709\u4e00\u4e2a\u201c\u5173\u952e\u5e27\u5bf9\u9f50\u201d\u9009\u9879\uff0c\u90a3\u4e48\u5e94\u8be5\u77e5\u9053\u8fd9\u4e0d\u662f\u4e00\u4e2a\u76f8\u540c\u7684\u8fc7\u7a0b\u3002\u4f7f\u5173\u952e\u5e27\u5bf9\u9f50\u662f\u7528\u4e8e\u521b\u5efa\u7279\u5b9a\u65f6\u95f4\u6233\u7684\u8fc7\u7a0b\uff0c\u5e76\u4e14\u6700\u9002\u5408\u4e8e\u4f7f\u5e7f\u64ad\u8005\u901a\u8fc7\u7f16\u7801\u5668\u53d1\u9001\u7684\u591a\u4e2a\u6bd4\u7279\u7387\u4fdd\u6301\u540c\u6b65\u3002\n\u968f\u7740\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u7684\u51fa\u73b0\uff0c\u8be5\u884c\u4e1a\u6b63\u5904\u4e8e\u4e00\u4e2a\u5947\u602a\u7684\u5173\u5934\uff0c\u5173\u952e\u5e27\u548c\u76f4\u64ad\u7684\u6700\u4f73\u5b9e\u8df5\u6709\u4e00\u4e2a\u76f8\u5f53\u660e\u786e\u7684\u7b54\u6848\u3002\u8be5\u7b56\u7565\u5305\u62ec\uff1a\n\u6b64\u7b56\u7565\u5141\u8bb8\u8f7b\u677e\u5bfc\u822a\u5185\u5bb9\uff0c\u4ee5\u4fbf\u5728\u5e7f\u64ad\u540e\u6309\u9700\u89c2\u770b\uff0c\u540c\u65f6\u4ecd\u53ef\u83b7\u5f97\u5e27\u7ba1\u7406\u7684\u597d\u5904\uff0c\u5e76\u5728\u51cf\u5c11\u5197\u4f59\u65b9\u9762\u8282\u7701\u5e26\u5bbd\u3002\u5b83\u8fd8\u652f\u6301\u81ea\u9002\u5e94\u6bd4\u7279\u7387\u6d41\uff0c\u8fd9\u662f\u6210\u529f\u76f4\u64ad\u7684\u91cd\u8981\u5143\u7d20\uff0c\u5e76\u4e14\u80fd\u591f\u652f\u6301\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u7684\u89c2\u4f17\u3002\n\u6709\u5173\u5e27\u95f4\u7684\u66f4\u591a\u95ee\u9898\u4ee5\u53caIBM Cloud Video\u5982\u4f55\u901a\u8fc7\u4e91\u8f6c\u7801\u5e2e\u52a9\u60a8\u5728\u63d0\u4f9b\u66f4\u4f4e\u7801\u7387\u9009\u9879\u7684\u540c\u65f6\u63d0\u4f9b\u9ad8\u8d28\u91cf\u89c6\u9891\uff0c\u8bf7\u8054\u7cfb\u9500\u552e\u4eba\u5458\u3002\n\u514d\u8d23\u58f0\u660e\uff1a\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u5e2e\u52a9\u76f4\u64ad\u516c\u53f8\uff0c\u6216\u8005\u81f3\u5c11\u662f\u90a3\u4e9b\u8ba1\u5212\u5065\u5eb7\u7684\u89c6\u9891\u70b9\u64ad\u7b56\u7565\u7684\u4eba\uff0c\u800c\u4e0d\u662f\u6d41\u5a92\u4f53\u3002\u5f53\u7136\uff0c\u6839\u636e\u64ad\u653e\u65b9\u6cd5\u7684\u4e0d\u540c\uff0c\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u521b\u5efa\u53ef\u80fd\u901a\u8fc7\u89c6\u9891\u6587\u4ef6\u64ad\u653e\u7684\u89c6\u9891\u5185\u5bb9\u7684\u610f\u56fe\uff0c\u201c\u573a\u666f\u6539\u53d8\u201d\u9009\u9879\u53ea\u662f\u7406\u60f3\u7684\u9009\u9879\u4e4b\u4e00\u3002\u5f53\u4f7f\u7528\u81ea\u9002\u5e94\u6280\u672f\u65f6\uff0c\u8fd9\u4e9b\u6280\u672f\u4e2d\u7684\u4e00\u4e9b\u6280\u672f\u4ec5\u5728\u4e0e\u6d41\u4f20\u8f93\u76f8\u5173\u7684\u60c5\u51b5\u4e0b\u53d8\u5f97\u4e0d\u53ef\u53d6\u3002\nIBM\u53ef\u80fd\u4f1a\u4f7f\u7528\u6211\u7684\u8054\u7cfb\u6570\u636e\u8ba9\u6211\u968f\u65f6\u4e86\u89e3\u4ea7\u54c1\u3001\u670d\u52a1\u548c\u4ea7\u54c1\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3NETSUPP@us.ibm.com\u968f\u65f6\u64a4\u56de\u60a8\u7684\u8425\u9500\u540c\u610f\u3002\u6b64\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u4efb\u4f55\u6b64\u7c7b\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u53d6\u6d88\u8ba2\u9605\u94fe\u63a5\u6765\u53d6\u6d88\u63a5\u6536\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u3002\n\u6709\u5173\u6211\u4eec\u7684\u5904\u7406\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728IBM\u9690\u79c1\u58f0\u660e\u4e2d\u627e\u5230\u3002\u901a\u8fc7\u63d0\u4ea4\u6b64\u8868\u683c\uff0c\u6211\u627f\u8ba4\u6211\u5df2\u7ecf\u9605\u8bfb\u5e76\u7406\u89e3\u4e86IBM\u9690\u79c1\u58f0\u660e\u3002", "note_en": "The default mental image of video compression involves unwanted video artifacts, like pixelation and blockiness in the image. This sells short, though, the complexity that actually goes into compressing video content. In particular, it overlooks a fascinating process called interframe, which involves keyframes and delta frames to intelligently compress content in a manner that is intended to go unnoticed.\n This article describes this process in detail, while also giving best practices and ideal encoder settings that you can apply to your live streaming at IBM Cloud Video. Much of this specific advice relates to streaming due to adaptive bitrates. To learn more about that technology, reference our\u00a0 How Adaptive Streaming Solves Viewer Bandwidth Issues white paper.\n    There are a lot of terms and aspects of streaming technology that can be taken for granted. As someone matures as a broadcaster, it pays to understand elements in greater detail to learn why a process is done and also optimal settings.\n For example, a keyframe is something a few broadcasters have seen mentioned before, or saw the setting in an encoder like Wirecast, without quite realizing what it is and how beneficial this process is for streaming. A keyframe is an important element, but really only part of a longer process that helps to reduce the bandwidth required for video. To understand this relation, one first needs to understand video frames.\n Starting at a high level, most probably realize that video content is made up of a series of frames. Usually denoted as FPS (frames per second), each frame is a still image that when played in sequence creates a moving picture. So content created that uses a FPS of 30 means there are 30 \u201cstill images\u201d that will play for every second of video.\n   On an average video, if someone were to take 90 consecutive frames and spread them out they will see a lot elements that are pretty much identical. For example, if someone is talking while standing next to a motionless plant it\u2019s unlikely that information related to that plant will change. As a result, that\u2019s a lot of wasted bandwidth used just to convey that something hasn\u2019t changed.\n Consequently, when looking for effective ways to compress video content, frame management became one of the cornerstone principles. So if that plant in the example is not going to change, why not just keep using the same elements in some of the subsequent frames to reduce space?\n This realization gave birth to the idea of interframe prediction. This is a video compression technique that divides frames into macroblocks and then looks for redundancies between blocks. This process works through using keyframes, also known as an i-frame or Intra frame, and delta frames, which only store changes in the image to reduce redundant information. These collection of frames are often referred to by the rather non-technical sounding name of a \u201cgroup of pictures\u201d, abbreviated as GOP. A video codec, used for encoding or decoding a digital data stream, all have some form of interframe management. H.264, MPEG-2 and MPEG-4 all use a three frame approach that includes: keyframes, p-frames, and b-frames.\n   The keyframe (i-frame) is the full frame of the image in a video. Subsequent frames, the delta frames, only contain the information that has changed. Keyframes will appear multiple times within a stream, depending on how it was created or how it\u2019s being streamed.\n If someone were to Google \u201ckeyframe\u201d, they are likely to find some results related to animation and video editing. In this instance, we are using the word keyframe in how it relates to video compression and its relationship to delta frames.\n  Also know as predictive frames or predicted frames, the p-frame follows another frame and only contain part of the image in a video. It is classified as a delta frame for this reason. P-frames look backwards to a previous p-frame or keyframe (i-frame) for redundancies. The amount of image presented in the p-frame depends on the amount of new information contained between frames.\n For example, someone talking to the camera in front of a static background will likely only contain information related to their movement. However, someone running across a field as the camera pans will have a great deal more information with each p-frame to match both their movement and the changing background.\n   Also known as bi-directional predicted frames, the b-frames follow another frame and only contain part of the image in a video. The amount of image contained in the b-frame depends on the amount of new information between frames.\n Unlike p-frames, b-frames can look backward and forward to a previous or later p-frame or keyframe (i-frame) for redundancies. This makes b-frames more efficient as opposed to p-frames, as they are more likely to find redundancies. However, b-frames are not used when the encoding profile is set to baseline inside the encoder. This means the encoder has to be set at an encoding profile above baseline, such as \u201cmain\u201d or \u201chigh\u201d.\n   In regards to video compression for live streaming, a keyframe is set inside the encoder. This is configured by an option sometimes called a \u201ckeyframe interval\u201d inside the encoder.\n The keyframe interval controls how often a keyframe (i-frame) is created in the video. The higher the keyframe interval, generally the more compression that is being applied to the content, although that doesn\u2019t mean a noticeable reduction in quality. For an example of how keyframe intervals work, if your interval is set to every 2 seconds, and your frame rate is 30 frames per second, this would mean roughly every 60 frames a keyframe is produced.\n The term \u201ckeyframe interval\u201d is not universal and most encoders have their own term for this. Adobe Flash Media Live Encoder (FMLE) and vMix, for example, uses the term \u201ckeyframe frequency\u201d to describe this process. Other programs and services might call the interval the \u201cGOP size\u201d or \u201cGOP length\u201d, going back to the \u201cGroup of Pictures\u201d abbreviation.\n    For FMLE, this option, denoted as \u201cKeyframe Frequency\u201d, is found in the software encoder by clicking the wrench icon to the right of format.\n In Wirecast, this is set from the Encoder Presets menu and the option is called \u201ckey frame every\u201d. Wirecast is different as the interval is actually denoted in frames. So for a 30 FPS broadcast, setting the \u201ckey frame every\u201d 60 frames would roughly give a keyframe interval of 2 seconds, as you have 30 frames every second.\n For the vMix encoder, one needs to first click the gear icon near streaming, which opens the Streaming Settings. Near the quality option here is another gear icon and clicking this will open up a menu that has the ability to modify the \u201cKeyframe Frequency\u201d.\n  In Open Broadcast Software (OBS), for versions after\u00a0v0.55b, the keyframe interval can be set in the Settings area under Advanced. For\u00a0 versions of OBS before v0.542b, it\u2019s not very clear how to modify the keyframe interval, but this is actually a component of Settings. Once there, go to Advanced and then select \u201cCustom x264 Encoder Settings\u201d. In this field one needs to enter in the following string: \u201ckeyint=XX\u201d with the XX being the number of frames until a keyframe is triggered. Like Wirecast, if a keyframe interval of 2 seconds is desired and the FPS is 30 seconds enter the following: \u201ckeyint=60\u201d.\n For XSplit, keyframe interval is a component of the channel properties. Under the Video Encoding area, one will find a listing that says \u201cKeyframe Interval (secs)\u201d. To the far right of this is a gear icon. Clicking the gear will launch a \u201cVideo Encoding Setup\u201d popup. This will allow someone to specify the keyframe interval in seconds.\n   Mileage in this explanation might vary, as encoders do manage bitrates and keyframes differently. Using an encoder like Wirecast, one might notice that broadcasting someone talking against a still background has \u201chigher quality\u201d compared to broadcasting someone jumping up and down against a moving background. This can be reproduced when using the same exact average bitrate and keyframe interval between them. The reason for this is because, in part, due to the fact that the delta frames have a ton of information to share in the jumping example. There is very little redundancy, meaning a lot more data that needs to be conveyed on each delta frame.\n If you have an encoder like Wirecast, though, it\u2019s trying its hardest to keep the stream around that average bitrate that was selected. Consequently, the added bandwidth that is needed for the additional information contained in the delta frames results in the quality being reduced to try and keep the average bitrate around the same level.\n   There has never been an industry standard, although 10 seconds is often mentioned as a good keyframe interval, even though that\u2019s no longer suggested for streaming. The reason it was suggested is because, for a standard 29.97 FPS file, the resulting content is responsive enough to support easy navigation from a preview slider. To explain more, a player can not start playback on a p-frame or b-frame. So using the 10 second example, if someone tried to navigate to a point that was 5 seconds into feed it would actually shift 5 seconds back to the nearest keyframe and begin playback. This was considered a good trade off for smaller bandwidth consumption, although for reference DVDs elected to use something much smaller than 10 seconds.\n However, for live streaming, the recommended level has drastically dropped. The reason for this is the advent of adaptive bitrate streaming. For those unfamiliar with adaptive streaming, this technology enables a video player to dynamically change between available resolutions and/or bitates based upon the viewer trying to watch. So someone with a slower download speed will be given a lower bitrate version, if available. Other criteria, like playback window size, will also impact what bitrate is given.\n True adaptive streaming doesn\u2019t just make this check when the video content initially loads, though, but can also alter the bitrate based on changes on the viewer\u2019s side. For example, if a viewer was to move out of range of a Wi-Fi network on their mobile, they will start using their normal cellular service which is liable to result in a slower download speed. As a result, the viewer might be trying to watch content that is too high of a bitrate versus their download speed. The adaptive streaming technology should realize this discrepancy and make the switch to a different bitrate.\n The keyframe interval comes into action here as making that switch occurs during the next keyframe. So if someone is broadcasting with a 10 second interval, that means it could take up to 10 seconds before the bitrate and resolution might change. That length of time means the content might buffer on the viewer\u2019s side before the change occurs, something that could lead to viewer abandonment.\n Because of this, it\u2019s recommended to have your keyframe interval set at 2 seconds for live streaming. This produces a result where the video track can effectively change bitrates often before the user might experience buffering due to a degradation in their download speed.\n   We are looping at this point, but it pays to understand p-frames, b-frames and get a crash course in adaptive streaming before talking about what is an IDR-frame, or Instantaneous Decode Refresh frame. These are actually keyframes and each keyframe can either be IDR based or non-IDR based. The difference between the two is that the IDR based keyframe works as a hardstop. An IDR-frame prevents p-frames and b-frames from referencing frames that occurred before the IDR-frame. A non-IDR keyframe will allow those frames to look further back for redundancies.\n On paper, a non-IDR keyframe sounds ideal: it can greatly reduce file size by being allowed to look at a much larger sample of frames for redundancies. Unfortunately, a lot of issues arise with navigation and the feature does not play nicely with adaptive streaming. For navigation, let\u2019s say someone starts watching 6 minutes into a stream. That\u2019s going to cause issues as the p-frames and b-frames might be referencing information that was never actually accessed by the viewer. For adaptive streaming, a similar issue can arise if the bitrate and resolution are changed. This is because the new selection might reference data that the viewer watched at a different quality setting and is no longer parallel. For these reasons, it\u2019s always recommended to make keyframes IDR based.\n Generally, encoders will either provide the option to turn on or off IDR based keyframes or won\u2019t give the option at all. For those encoders that do not give the option, it\u2019s almost assured to be because the encoder is setup to only use IDR-frames.\n    Auto keyframe settings, in principal, are pretty great. They will manually force a keyframe during a scene change. For example, if you switch from a PowerPoint slide to an image of someone talking in front of a camera that would force a new keyframe. That\u2019s desirable as the delta frames would not have much to work with, unable to find redundancies between the PowerPoint slide and the image from the camera.\n Unfortunately, this process does not work with some adaptive streaming technologies, most notably HLS. The HLS process requires the keyframes to be predictable and in sync. Using an \u201cauto\u201d setting will create variable intervals between keyframes. For example, the time between keyframes might be 7 seconds and then later it might be 2 seconds if a scene change occurs quickly.\n  For most encoders, to disable \u201cauto change\u201d or \u201cscene change detect\u201d features this often just means denoting a keyframe interval. For example, in OBS if a keyframe interval is set at 0 seconds then the auto feature will kick in. Placing any number in there, like 1 or 2, will disable the auto feature.\n If the encoder, like Wirecast, has an option for \u201ckeyframe alignment\u201d, it should be known that this is not the same process. Having keyframes aligned is a process for creating specific timestamps and is best suited for keeping multiple bitrates that the broadcaster is sending through the encoder in sync.\n   With the advent of adaptive bitrates, the industry is at an odd juncture where there is a pretty clear answer on best practices for keyframes and live streaming. That strategy includes:\n  This strategy allows for easy navigation of content, for on demand viewing after a broadcast, while still reaping the benefits of frame management and saving bandwidth on reducing redundancies. It also supports adaptive btirate streaming, an important element of a successful live broadcast and being able to support viewers with slower connections.\n Please\u00a0 Contact Sales for more questions on interframe and how IBM Cloud Video\u00a0can help you deliver high quality video\u00a0alongside lower bitrate options through cloud transcoding.\n  Disclaimer: This article is aimed at helping out live broadcasters or at least those who plan for a healthy video on demand strategy over streaming. The answer to many of these questions would of course be different depending on playback method. For example, for the intention of creating video content that might be played via a video file, the \u201cscene change\u201d option is just one example of something that would be ideal. Some of these techniques only becomes undesirable in relation to streaming when using adaptive technology.\n   IBM may use my contact data to keep me informed of products, services, and offerings\n    You can withdraw your marketing consent at any time by sending an email to  NETSUPP@us.ibm.com. Also, you may unsubscribe from receiving marketing emails by clicking the unsubscribe link in any such email.\n  More information on our processing can be found in the  IBM Privacy Statement. By submitting this form, I am acknowledging that I have read and understand the IBM Privacy Statement.", "posttime": "2020-05-07 19:56:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5173\u952e\u5e27,interframe", "title": "\u5173\u952e\u5e27\u3001\u5e27\u95f4\u548c\u89c6\u9891\u538b\u7f29(2016)", "title_en": "Keyframes, InterFrame and Video Compression (2016)", "transed": 1, "url": "https://blog.video.ibm.com/streaming-video-tips/keyframes-interframe-video-compression/", "via": "", "real_tags": ["\u5173\u952e\u5e27"]}, {"category": "", "categoryclass": "", "imagename": "03c2b6994bb7a2ba451559a8a63f759f.jpg", "infoid": 1001052, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u6709\u7ebf\u7535\u89c6\u65b0\u95fb\u7f51(CNN)-\u5927\u591a\u6570\u90ae\u8f6e\u4e58\u5ba2\u5df2\u7ecf\u56de\u5bb6\uff0c\u66fe\u7ecf\u5c06\u4ed6\u4eec\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u7684\u5de8\u578b\u8239\u53ea\u505c\u6cca\u6216\u91cd\u65b0\u505c\u6cca\u5728\u6c34\u9762\u4e0a\uff0c\u4e3a\u4ed6\u4eec\u65c5\u7a0b\u7684\u4e0b\u4e00\u9636\u6bb5\u91cd\u65b0\u5b9a\u4f4d\u3002\n\u4f46\u662f\uff0c\u5f53\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u6050\u614c\u5e2d\u5377\u5927\u6d0b\u65f6\uff0c\u90a3\u4e9b\u8ba9\u8fd9\u4e9b\u5de8\u5927\u7684\u8239\u53ea\u4fdd\u6301\u8fd0\u8f6c\uff0c\u5e76\u7167\u987e\u5ba2\u4eba\u7684\u8239\u5458\u4eec\u5462\uff1f\n\u5bf9\u4e8e\u8bb8\u591a\u5728\u90ae\u8f6e\u884c\u4e1a\u5de5\u4f5c\u7684\u4eba\u6765\u8bf4\uff0c\u767b\u4e0a\u4e00\u8258\u8f7d\u6709\u51a0\u72b6\u75c5\u6bd2\u643a\u5e26\u8005\u7684\u8239\u53ea\u7684\u5669\u68a6\u4ecd\u5728\u7ee7\u7eed--\u6709\u65f6\u770b\u4e0d\u5230\u7ed3\u675f\u7684\u8ff9\u8c61\u3002\n\u4e0e\u4e16\u9694\u7edd\uff0c\u62d2\u7edd\u5411\u4e58\u5ba2\u63d0\u4f9b\u8fc5\u901f\u9063\u8fd4\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u88ab\u8feb\u5fcd\u53d7\u6ca1\u6709\u62a5\u916c\u7684\u8270\u82e6\u6761\u4ef6\uff0c\u4e00\u4e9b\u88ab\u9694\u79bb\u5728\u6d77\u4e0a\u7684\u4eba\u4e00\u76f4\u5728\u63cf\u8ff0\u56f0\u4f4f\u4ed6\u4eec\u7684\u5b98\u50da\u7ea0\u7ed3\uff0c\u5f80\u5f80\u662f\u5728\u79bb\u6d77\u5cb8\u51e0\u7c73\u8fdc\u7684\u5730\u65b9\u3002\n\u6211\u5e0c\u671b\u6211\u4eec\u4e0d\u4f1a\u88ab\u9057\u5fd8\uff0c\u8001\u5b9e\u8bf4\uff0c\u4e3a\u516c\u4e3b\u90ae\u8f6e\u5de5\u4f5c\u7684\u9a6c\u8096\u6069\u00b7\u83ab\u987f(Mashawn Morton)\u8bf4\u3002\u4f3c\u4e4e\u6ca1\u6709\u4eba\u5173\u5fc3\u6211\u4eec\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\n\u6839\u636e\u7f8e\u56fd\u6d77\u5cb8\u8b66\u536b\u961f\u7684\u6570\u636e\uff0c\u622a\u81f35\u67085\u65e5\uff0c\u7f8e\u56fd\u6e2f\u53e3\u53ca\u5468\u8fb9\u5730\u533a\u4ee5\u53ca\u5df4\u54c8\u9a6c\u548c\u52a0\u52d2\u6bd4\u6d77\u5730\u533a\u768474\u8258\u6e38\u8f6e\u4e0a\u4ecd\u6709\u8d85\u8fc75.7\u4e07\u540d\u8239\u5458\u3002\u66f4\u591a\u7684\u6570\u767e\u4eba\u88ab\u56f0\u5728\u4e16\u754c\u5927\u6d0b\u5176\u4ed6\u5730\u65b9\u7684\u8239\u53ea\u4e0a\u3002\n\u7531\u4e8e\u6ca1\u6709\u4e58\u5ba2\u9700\u8981\u7167\u770b\uff0c\u4ed6\u4eec\u7684\u9694\u79bb\u4e5f\u5df2\u7ecf\u5b8c\u6210\uff0c\u5458\u5de5\u4eec\u4e0d\u7981\u7eb3\u95f7\u4e3a\u4ec0\u4e48\u4e0d\u8ba9\u4ed6\u4eec\u56de\u5bb6\u3002\n\u5728\u7f8e\u56fd\u6c34\u57df\uff0c\u6e38\u8f6e\u9677\u5165\u4e86\u7f8e\u56fd\u536b\u751f\u4fdd\u62a4\u673a\u6784\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3(Centers For Disease Control And Prevention)\u5b9e\u65bd\u7684\u6cd5\u89c4\u7684\u6ce5\u6f6d\u3002\n\u75be\u63a7\u4e2d\u5fc3\u7684\u5b98\u65b9\u89c4\u5b9a\u662f\uff0c\u8239\u5458\u53ea\u80fd\u88ab\u5141\u8bb8\u4e0b\u8239\u9063\u8fd4\u6216\u5728\u4e24\u8258\u8239\u4e4b\u95f4\u8f6c\u79fb\uff0c\u524d\u63d0\u662f\u4ed6\u4eec\u5c06\u7531\u4e13\u95e8\u5305\u673a\u6216\u79c1\u4eba\u8f66\u8f86\u8fd0\u9001\u3002\n\u4e0d\u53d7\u51a0\u72b6\u75c5\u6bd2\u5f71\u54cd\u7684\u6e38\u8f6e\u8239\u5458\u53ef\u4ee5\u901a\u8fc7\u5546\u4e1a\u822a\u7a7a\u4e0a\u5cb8\u548c\u65c5\u884c\uff0c\u4f46\u53ea\u80fd\u5728\u83b7\u5f97CDC\u4e8b\u5148\u6279\u51c6\u7684\u60c5\u51b5\u4e0b\u9010\u6848\u8fdb\u884c\u3002\u90ae\u8f6e\u516c\u53f8\u5fc5\u987b\u586b\u5199\u4e00\u4efd\u58f0\u660e\uff0c\u8bc1\u660e\u8be5\u8239\u6ca1\u6709\u51a0\u72b6\u75c5\u6bd2\u3002\n\u76f4\u5230\u4e0a\u5468\u672b\uff0c\u6839\u636e\u4e00\u4e9b\u8239\u5458\u7684\u8bf4\u6cd5\uff0c\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5b9a\u7684\u6cd5\u5f8b\u540e\u679c\u5df2\u7ecf\u63a8\u8fdf\u4e86\u90ae\u8f6e\u516c\u53f8\u540c\u610f\u8fd9\u4e9b\u89c4\u5b9a\u3002\n\u5468\u65e5\uff0c\u7687\u5bb6\u52a0\u52d2\u6bd4\u53ca\u5176\u65d7\u4e0b\u54c1\u724c\uff0c\u5305\u62ec\u540d\u4eba\u90ae\u8f6e\u516c\u53f8(Celebrity Cruise Line)\u4e0e\u75be\u63a7\u4e2d\u5fc3\u5c31\u8239\u5458\u4e0b\u8239\u8fbe\u6210\u534f\u8bae\uff0c\u5199\u4fe1\u7ed9\u5458\u5de5\u8868\u793a\uff0c\u5c06\u9075\u5b88\u4e25\u683c\u7684\u6307\u5bfc\u65b9\u9488\uff0c\u5e76\u9075\u5b88\u5176\u5f71\u54cd\u3002\nCDC\u5df2\u7ecf\u8981\u6c42\u6211\u548c\u5176\u4ed6\u90ae\u8f6e\u516c\u53f8\u7684\u9886\u5bfc\u4eba\u7b7e\u7f72\u4e00\u5c01\u4fe1\uff0c\u9650\u5236\u6211\u4eec\u9001\u4f60\u56de\u5bb6\u7684\u9009\u62e9\uff0c\u5e76\u4e3a\u4f60\u7684\u884c\u4e3a\u627f\u62c5\u8d23\u4efb\uff0c\u4ee5\u786e\u4fdd\u4ed6\u4eec\u6279\u51c6\u4f60\u4e0b\u8239\uff0c\u540d\u4eba\u90ae\u8f6e\u9996\u5e2d\u6267\u884c\u5b98\u4e3d\u838e\u00b7\u5362\u6258\u592b-\u4f69\u6d1b\u5728CNN\u770b\u5230\u7684\u4e00\u5c01\u4fe1\u4e2d\u5199\u9053\u3002\n\u672c\u7740\u5c3d\u6211\u4eec\u6240\u80fd\u628a\u4f60\u9001\u56de\u5bb6\u7684\u7cbe\u795e\uff0c\u6211\u51b3\u5b9a\u5728\u8fd9\u5c01\u4fe1\u4e0a\u7b7e\u5b57\u3002\n\u5176\u4ed6\u90ae\u8f6e\u516c\u53f8\u53ef\u80fd\u4f1a\u6548\u4eff\uff0c\u4f46\u56f4\u7ed5\u90ae\u8f6e\u7684\u8b66\u60d5\u3001\u75be\u63a7\u4e2d\u5fc3\u653f\u7b56\u7684\u7ec6\u8282\u548c\u5f71\u54cd\u3001\u5546\u4e1a\u822a\u73ed\u7684\u7f3a\u4e4f\u3001\u5927\u8303\u56f4\u7684\u65c5\u884c\u7981\u4ee4\u4ee5\u53ca\u6301\u7eed\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u610f\u5473\u7740\u8bb8\u591a\u8239\u5458\u4ecd\u88ab\u56f0\u5728\u8fd9\u91cc\u3002\n\u7f8e\u56fd\u4eba\u4e9a\u5386\u514b\u65af\u00b7\u963f\u5fb7\u91d1\u65af(Alex Adkins)\u662f\u7687\u5bb6\u52a0\u52d2\u6bd4\u6d77\u81ea\u7531\u53f7(Freedom Of The Sea)\u7684\u9ad8\u7ea7\u821e\u53f0\u6280\u672f\u5458\uff0c\u81ea3\u6708\u4e2d\u65ec\u8fd9\u8258\u8239\u7684\u5ba2\u4eba\u5728\u8fc8\u963f\u5bc6\u5378\u8d27\u4ee5\u6765\uff0c\u4ed6\u4e00\u76f4\u5728\u6d77\u4e0a\u7b49\u5f85\u3002\n\u4ed6\u8bf4\uff1a\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u518d\u4e5f\u6ca1\u6709\u5ba2\u4eba\u4e86\uff0c\u6211\u4eec\u53ea\u662f\u6f02\u6d6e\u5728\u5df4\u5df4\u591a\u65af\u7684\u6d77\u5cb8\u4e0a\u3002\n\u5728\u7b2c\u4e00\u5468\uff0c\u8239\u5458\u4eec\u5229\u7528\u4e86\u6d77\u6d0b\u81ea\u7531\u6e38\u6cf3\u6c60\u548c\u5065\u8eab\u623f\uff0c\u4eab\u53d7\u7740\u7a7a\u65e0\u4e00\u4eba\u7684\u8bbe\u65bd\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u5f00\u59cb\u5f3a\u5236\u8fdb\u884c\u4e3a\u671f\u4e24\u5468\u7684\u81ea\u6211\u9694\u79bb\uff0c\u963f\u5fb7\u91d1\u65af\u8bf4\u3002\n\u963f\u5fb7\u91d1\u65af\u544a\u8bc9CNN\uff0c\u81ea\u90a3\u4ee5\u540e\uff0c\u673a\u7ec4\u4eba\u5458\u88ab\u544a\u77e5\uff0c\u4ed6\u4eec\u4e0d\u518d\u88ab\u89c6\u4e3a\u5728\u804c\u5458\u5de5\uff0c\u4ed6\u4eec\u7684\u5de5\u8d44\u4e00\u76f4\u652f\u4ed8\u52304\u6708\u5e95\u3002\n\u4ed6\u8868\u793a\uff0c\u8ba9\u673a\u7ec4\u4eba\u5458\u56de\u56fd\u7684\u5305\u673a\u52aa\u529b\u4e00\u518d\u9677\u5165\u505c\u6ede\uff0c\u56e0\u4e3a\u7687\u5bb6\u52a0\u52d2\u6bd4\u5c1a\u672a\u7b7e\u7f72CDC\u7a0b\u5e8f\uff0c\u4f46\u4ed6\u627f\u8ba4\uff0c\u5728\u6700\u7ec8\u540c\u610f\u6761\u4ef6\u4e4b\u524d\uff0c\u8be5\u90ae\u8f6e\u516c\u53f8\u9677\u5165\u4e86\u56f0\u5883\u3002\n\u6211\u4eec\u7684\u9886\u5bfc\u4eba\u7b7e\u7f72\u4e86\u8fd9\u4efd\u534f\u8bae\uff0c\u5e0c\u671b\u80fd\u5c3d\u5feb\u5b89\u5168\u5730\u9001\u6211\u4eec\u56de\u5bb6\uff0c\u6211\u5e0c\u671b\u6bcf\u4e2a\u56de\u5bb6\u7684\u4eba\u90fd\u80fd\u7406\u89e3\u4ed6\u4eec\u505a\u51fa\u7684\u5de8\u5927\u727a\u7272\uff0c\u963f\u5fb7\u91d1\u65af\u8bf4\u3002\n\u5bf9\u4e8e\u963f\u5fb7\u91d1\u65af\u548c\u8239\u4e0a\u7684\u8bb8\u591a\u4eba\u6765\u8bf4\uff0c\u65b0\u7684\u53d1\u5c55\u662f\u4e00\u79cd\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u58eb\u6c14\u63d0\u5347\uff0c\u4ed6\u63cf\u8ff0\u4e86\u4e00\u79cd\u5f25\u6f2b\u5728\u8230\u961f\u4e2d\u7684\u6709\u5f62\u7535\u529b\u3002\n\u8fd9\u5c31\u662f\u8bf4\uff0c\u4ed6\u610f\u8bc6\u5230\u5176\u4ed6\u8239\u53ea\u4e0a\u7684\u8bb8\u591a\u5de5\u4eba\u4ecd\u7136\u5446\u5728\u6f02\u6d6e\u7684\u70bc\u72f1\u91cc\u3002\n\u8d1f\u8d23\u76d1\u7ba1\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u90ae\u8f6e\u516c\u53f8\u7684\u90ae\u8f6e\u56fd\u9645\u534f\u4f1a\u544a\u8bc9CNN\uff0c\u5b83\u6b63\u5728\u4e0e\u75be\u63a7\u4e2d\u5fc3\u5408\u4f5c\uff0c\u4ee5\u5e94\u5bf9\u8fd9\u4e9b\u524d\u6240\u672a\u6709\u7684\u6311\u6218\uff0c\u5e76\u5c3d\u5feb\u9063\u8fd4\u8239\u5458\u3002\nCLIA\u7684\u4e00\u4f4d\u4ee3\u8868\u8868\u793a\uff0c\u60c5\u51b5\u975e\u5e38\u590d\u6742\uff0c\u800c\u4e14\u6bcf\u5929\u90fd\u5728\u6f14\u53d8\u3002\n\u83ab\u987f\u662f\u53e6\u4e00\u540d\u4ecd\u5728\u7b49\u5f85\u56de\u5bb6\u7684\u673a\u7ec4\u4eba\u5458\u3002\u4ed6\u8bf4\uff0c\u4ed6\u4e0e\u516c\u4e3b\u90ae\u8f6e\u516c\u53f8\u5408\u4f5c\u4e86\u5927\u7ea65\u5e74\uff0c\u5e76\u4e8e\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u5728\u201c\u5929\u7a7a\u516c\u4e3b\u53f7\u201d\u4e0a\u5f00\u59cb\u4e86\u4ed6\u4e0e\u201c\u516c\u4e3b\u53f7\u201d\u7684\u7b2c\u56db\u4efd\u5408\u540c\u3002\u201c\u5929\u7a7a\u516c\u4e3b\u53f7\u201d\u662f\u4e00\u8258\u5de8\u5927\u7684\u3001\u95ea\u95ea\u53d1\u5149\u7684\u8f6e\u8239\uff0c\u53ef\u5bb9\u7eb33660\u540d\u4e58\u5ba2\u548c1346\u540d\u8239\u5458\u3002\n\u83ab\u987f\u7684\u5de5\u4f5c\u9884\u8ba1\u5c06\u6301\u7eed\u523010\u6708\u4e2d\u65ec\uff0c\u56e0\u4e3a\u8fd9\u8258\u8239\u6a2a\u6e21\u52a0\u52d2\u6bd4\u6d77\u3001\u5927\u897f\u6d0b\uff0c\u8d8a\u8fc7\u6ce2\u7f57\u7684\u6d77\uff0c\u7a7f\u8d8a\u6b27\u6d32\u3002\u968f\u7740\u75ab\u60c5\u5728\u5168\u7403\u8513\u5ef6\uff0c\u90ae\u8f6e\u88ab\u53d6\u6d88\u6216\u53ec\u56de\uff0c\u5929\u7a7a\u516c\u4e3b\u53f7\u4e8e3\u670814\u65e5\u5728\u8fc8\u963f\u5bc6\u5378\u8d27\u3002\n\u5305\u62ec\u83ab\u987f\u5728\u5185\u7684\u8239\u5458\u4ecd\u7559\u5728\u8239\u4e0a\uff0c\u505c\u6cca\u5728\u8be5\u5e02\u7684\u6e2f\u53e3\u3002\u5bb6\u770b\u8d77\u6765\u5f88\u8fd1\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\u8fd8\u5f88\u8fdc\u3002\n\u83ab\u987f\u8bf4\uff0c\u4e00\u5f00\u59cb\uff0c\u4eba\u4eec\u7684\u60c5\u7eea\u662f\u79ef\u6781\u7684\u3002\u83ab\u987f\u8bf4\uff0c\u673a\u7ec4\u4eba\u5458\u8fdb\u5165\u4e86\u5927\u7ea620\u5929\u7684\u81ea\u6211\u9694\u79bb\uff0c\u4e3b\u8981\u5c40\u9650\u5728\u673a\u8231\u5185\uff0c\u4f46\u4ed6\u4eec\u660e\u767d\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u4e0b\u8239\u56de\u5bb6\u4e86\u3002\n\u83ab\u987f\u8bf4\uff0c\u4e00\u65e6\u4e58\u5ba2\u4e0b\u8239\uff0c\u6211\u4eec\u5c31\u611f\u5230\u5b89\u5168\u4e86\u3002\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u751f\u75c5\u7684\u8ff9\u8c61\u3002\u6211\u4eec\u5f88\u9ad8\u5174\u6211\u4eec\u8fd8\u80fd\u62ff\u5230\u5de5\u8d44\uff0c\u800c\u4e14\u8fd8\u5728\u53d7\u96c7\u3002\n\u83ab\u987f\u8bf4\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u63a5\u8fd1\u5c3e\u58f0\u65f6\uff0c\u4ed6\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u88ab\u544a\u77e5\uff0c\u4ed6\u4eec\u7684\u5408\u540c\u5c06\u6b63\u5f0f\u7ed3\u675f\u3002\u4ed6\u8bf4\uff0c\u4ed6\u4eec\u88ab\u544a\u77e5\uff0c\u4ece6\u6708\u4efd\u5f00\u59cb\u5c06\u4e0d\u518d\u652f\u4ed8\u5de5\u8d44\u3002\n\u83ab\u987f\u8bf4\uff1a\u4ed6\u4eec\u5c45\u7136\u8fd8\u80fd\u4ed8\u94b1\u7ed9\u6211\u4eec\uff0c\u8fd9\u8ba9\u6211\u4eec\u975e\u5e38\u60ca\u8bb6\u3002\n\u56db\u6708\uff0c\u5f53\u5bf9\u201c\u5929\u7a7a\u516c\u4e3b\u201d\u53f7\u7684\u9694\u79bb\u7ed3\u675f\u540e\uff0c\u201c\u516c\u4e3b\u53f7\u201d\u5f00\u59cb\u8f6c\u8fd0\u8239\u5458--\u5728\u4e24\u8258\u8239\u4e4b\u95f4\u8f6c\u79fb\u8239\u5458\uff0c\u4ee5\u4fbf\u6839\u636e\u56fd\u7c4d\u5bf9\u5de5\u4eba\u8fdb\u884c\u5206\u7ec4\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e58\u8239\u56de\u5bb6\u6216\u524d\u5f80\u5408\u9002\u7684\u673a\u573a\u3002\n\u5b83\u89e3\u51b3\u4e86\u5546\u4e1a\u822a\u73ed\u7684\u7f3a\u4e4f\uff0c\u4ee5\u53ca\u8ba9\u75be\u63a7\u4e2d\u5fc3\u6279\u51c6\u5305\u673a\u7684\u56f0\u96be\u3002\n\u4e0d\u8fc7\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u5bf9\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u611f\u5230\u6ee1\u610f\u3002\u822a\u884c\u56de\u5bb6\u53ef\u80fd\u9700\u8981\u51e0\u5468\u7684\u65f6\u95f4\uff0c\u800c\u98de\u884c\u9700\u8981\u51e0\u4e2a\u5c0f\u65f6\u3002\u53e6\u5916\uff0c\u8fd8\u6709\u4ea4\u53c9\u611f\u67d3\u7684\u6301\u7eed\u5a01\u80c1\u3002\n[\u8f6c\u8fd0\u5f00\u59cb\u7684\u65f6\u5019]\u83ab\u987f\u8bf4\uff0c\u90a3\u771f\u7684\u662f\u7d27\u5f20\u548c\u538b\u529b\u6c34\u5e73\u5f00\u59cb\u4e0a\u5347\u7684\u65f6\u5019\u3002\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u7f8e\u56fd\u673a\u7ec4\u4eba\u5458\u6765\u8bf4\uff0c\u8f6c\u8fd0\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u3002\u4ed6\u4eec\u505c\u9760\u5728\u8fc8\u963f\u5bc6\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u4e0d\u80fd\u76f4\u63a5\u4e0b\u8239\u5462\uff1f\n\u5929\u7a7a\u516c\u4e3b\u53f7\u662f\u4e00\u8258\u5065\u5eb7\u7684\u8239\uff0c\u6ca1\u6709\u62a5\u544a\u8fc7\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\uff0c\u83ab\u987f\u62c5\u5fc3\u4ed6\u53ef\u80fd\u4f1a\u642c\u5230\u4e4b\u524d\u4e58\u5ba2\u6216\u8239\u5458\u68c0\u6d4b\u5448\u9633\u6027\u7684\u8239\u4e0a\u3002\n\u4eba\u4eec\u60f3\u56de\u5bb6\uff0c\u800c\u4e0d\u662f\u53bb\u53e6\u4e00\u8258\u8239\uff0c\u4ed6\u8bf4\u3002\u8fd9\u4e9b\u4fe1\u606f\u6bcf\u5929\u6bcf\u5c0f\u65f6\u3001\u6bcf\u4e00\u5929\u90fd\u5728\u4e0d\u65ad\u53d8\u5316\u3002\u4e0d\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u8ba9\u4eba\u538b\u529b\u5f88\u5927\u3002\n\u83ab\u987f\u8bf4\uff0c4\u670825\u65e5\uff0c\u4ed6\u548c\u516c\u4e3b\u90ae\u8f6e\u7684\u5176\u4ed6\u7f8e\u56fd\u5458\u5de5\u4e00\u8d77\u4ece\u5929\u7a7a\u516c\u4e3b\u53f7\u8c03\u5230\u4e86\u7fe1\u7fe0\u516c\u4e3b\u53f7\uff0c\u8fd9\u662f\u4e00\u6b21\u53d1\u751f\u5728\u6ce2\u6d9b\u6c79\u6d8c\u7684\u6d77\u9762\u4e0a\u7684\u8f6c\u79fb\u3002\n\u83ab\u987f\u8bf4\uff0c\u6d77\u6d6a\u975e\u5e38\u9ad8\uff0c\u6211\u5b9e\u9645\u4e0a\u62cd\u4e86\u4e00\u4e9b\u89c6\u9891\u7ed9\u6211\u6bcd\u4eb2\uff0c\u544a\u8bc9\u5979\u8fd9\u8258\u5c0f\u8239\u6447\u6643\u5f97\u6709\u591a\u5389\u5bb3\uff0c\u7136\u540e\u6211\u5c31\u5931\u53bb\u4e86\u4e92\u8054\u7f51\u670d\u52a1\u3002\n\u6574\u657424\u5c0f\u65f6\u540e\uff0c\u83ab\u987f\u624d\u5f97\u4ee5\u4e0e\u60ca\u614c\u5931\u63aa\u7684\u6bcd\u4eb2\u91cd\u65b0\u53d6\u5f97\u8054\u7cfb\uff0c\u5e76\u5411\u5979\u4fdd\u8bc1\u4ed6\u6ca1\u4e8b\u3002\n\u83ab\u987f\u8bf4\uff0c\u4ed6\u6700\u8fd1\u542c\u8bf4\u90ae\u8f6e\u516c\u4e3b\u53f7\u7684\u7f8e\u56fd\u8239\u5458\u53ef\u80fd\u4f1a\u518d\u6b21\u88ab\u8f6c\u79fb\u5230\u73ca\u745a\u516c\u4e3b\u53f7\uff0c\u8fd9\u4e00\u6b21\u662f\u9063\u8fd4\u52aa\u529b\u7684\u4e00\u90e8\u5206\uff0c\u5728\u65e9\u4e9b\u65f6\u5019\u7684\u5927\u6d41\u884c\u4e2d\uff0c\u73ca\u745a\u516c\u4e3b\u53f7\u53d1\u751f\u4e86\u51a0\u72b6\u75c5\u6bd2\u6b7b\u4ea1\u4e8b\u4ef6\u3002\n\u4ed6\u8bf4\uff1a\u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u90a3\u4e4b\u524d\uff0c\u75be\u63a7\u4e2d\u5fc3\u4f1a\u89e3\u9664\u7981\u4ee4\uff0c\u5141\u8bb8\u7f8e\u56fd\u4eba\u8fdb\u5165\u7f8e\u56fd\u3002\n\u90ae\u8f6e\u516c\u4e3b\u53f7\u6ca1\u6709\u5177\u4f53\u56de\u7b54\u4e3a\u4ec0\u4e48\u82b1\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\u624d\u5904\u7406\u8239\u5458\u4e0b\u8239\u7684\u95ee\u9898\uff0c\u4e5f\u6ca1\u6709\u5177\u4f53\u56de\u7b54\u4e3a\u4ec0\u4e48\u505c\u6cca\u5728\u7f8e\u56fd\u6e2f\u53e3\u7684\u7f8e\u56fd\u8239\u5458\u53c2\u4e0e\u4e86\u8f6c\u8fd0\u8fc7\u7a0b\uff0c\u800c\u4e0d\u662f\u5141\u8bb8\u4ed6\u4eec\u7559\u5728\u539f\u5730\u76f4\u5230\u4ed6\u4eec\u53ef\u4ee5\u79bb\u5f00\u3002\n\u4e00\u4f4d\u53d1\u8a00\u4eba\u544a\u8bc9CNN\uff0c\u8be5\u516c\u53f8\u575a\u5b9a\u5730\u81f4\u529b\u4e8e\u8ba9\u6211\u4eec\u7684\u8239\u4e0a\u56e2\u961f\u6210\u5458\u5b89\u5168\u5730\u4e0e\u4ed6\u4eec\u7684\u5bb6\u4eba\u56e2\u805a\uff0c\u5e76\u5728\u5b89\u6392\u8fd4\u56de\u672c\u56fd\u7684\u65c5\u884c\u65b9\u9762\u7ee7\u7eed\u53d6\u5f97\u8fdb\u5c55\u3002\n\u8be5\u90ae\u8f6e\u516c\u53f8\u8868\u793a\uff0c\u6bcf\u5929\u6709\u6570\u767e\u540d\u8239\u5458\u4e0b\u8239\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u67094000\u4eba\u8fd4\u56de\u5bb6\u56ed\u3002\n\u514b\u9c81\u65af\u516c\u4e3b\u544a\u8bc9CNN\uff0c\u8be5\u516c\u53f8\u4e00\u76f4\u5728\u79ef\u6781\u51c6\u5907\u548c\u63d0\u4f9b\u8239\u5458\u4e0b\u673a\u8bc1\u660e\uff0c\u4ee5\u7b26\u5408\u75be\u63a7\u4e2d\u5fc3\u7684\u653f\u7b56\uff0c\u8be5\u653f\u7b56\u575a\u6301\u673a\u7ec4\u4eba\u5458\u4e0d\u5f97\u5728\u9152\u5e97\u8fc7\u591c\uff0c\u4e0d\u5f97\u4e58\u5750\u516c\u5171\u4ea4\u901a\u5de5\u5177\u6216\u8fdb\u5165\u673a\u573a\u822a\u7ad9\u697c\u3002\nCaio Saldanha\u662f\u4e00\u540d\u6765\u81ea\u5df4\u897f\u7684DJ\uff0c\u76ee\u524d\u5728\u540d\u4eba\u65e0\u9650\u53f7\u4e0a\uff0c\u4ed6\u544a\u8bc9CNN\uff0c\u7687\u5bb6\u52a0\u52d2\u6bd4\u516c\u53f8\u62e5\u6709\u7684\u540d\u4eba\u516c\u53f8\u6b63\u5728\u5bfb\u627e\u8f6c\u8239\u6ede\u7559\u5728\u5df4\u54c8\u9a6c\u7fa4\u5c9b\u5404\u5730\u7684\u8239\u5458\uff0c\u4f5c\u4e3a\u9063\u8fd4\u52aa\u529b\u7684\u4e00\u90e8\u5206\u3002\nSaldanha\u548c\u4ed6\u7684\u672a\u5a5a\u59bb\u6770\u897f\u5361\u00b7\u5f17\u5170(Jessica Furlan)\u662f\u8239\u4e0a\u6d3b\u52a8\u7684\u4e3b\u6301\u4eba\uff0c\u4ed6\u4eec\u8868\u793a\uff0c\u4ed6\u4eec\u5728\u6d77\u4e0a\u7684\u6f2b\u957f\u7b49\u5f85\u53d8\u5f97\u66f4\u52a0\u4ee4\u4eba\u6cae\u4e27\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e8e3\u670814\u65e5\u5728\u8fc8\u963f\u5bc6\u83b7\u51c6\u767b\u8239\uff0c\u4e00\u5929\u524d\uff0c\u7f8e\u56fd\u653f\u5e9c\u53d1\u5e03\u4e86\u7981\u822a\u4ee4\uff0c\u6682\u505c\u4e86\u6240\u6709\u90ae\u8f6e\u822a\u884c\u3002\n3\u670823\u65e5\uff0cCelebrity Infinity\u7684\u8239\u8236\u7ba1\u7406\u4eba\u5458\u901a\u77e5\u8239\u5458\uff0c\u90a3\u4e9b\u57283\u67089\u65e5\u81f314\u65e5\u671f\u95f4\u5728\u8239\u4e0a\u7684\u4eba\u53ef\u80fd\u63a5\u89e6\u5230\u4e86\u51a0\u72b6\u75c5\u6bd2\u3002\u4e00\u540d\u5728\u6b64\u671f\u95f4\u4e0e\u8239\u5728\u4e00\u8d77\u7684\u8239\u5458\u88ab\u68c0\u6d4b\u51fa\u75c5\u6bd2\u5448\u9633\u6027\u3002\n\u52303\u670828\u65e5\uff0c\u968f\u7740\u8239\u8fdb\u5165\u5c01\u9501\uff0c\u8239\u5458\u4eec\u88ab\u9650\u5236\u5728\u81ea\u5df1\u7684\u8239\u8231\u5185\u3002\n\u4ed6\u8bf4\uff0c\u4ed6\u548c\u672a\u5a5a\u592b\u4ece\u4e00\u95f4\u4ed6\u8ba4\u4e3a\u53d1\u9709\u3001\u5c18\u571f\u98de\u626c\u3001\u73af\u5883\u975e\u5e38\u7cdf\u7cd5\u7684\u5c0f\u5c4b\u642c\u5230\u4e86\u4e00\u95f4\u8d28\u91cf\u66f4\u597d\u7684\u5c0f\u5c4b\uff0c\u5c3d\u7ba1\u90a3\u95f4\u5c0f\u5c4b\u6ca1\u6709\u7a97\u6237\u3002\n\u4e00\u4f4d\u5728\u7687\u5bb6\u52a0\u52d2\u6bd4\u6d77\u6e38\u8239\u5a31\u4e50\u90e8\u5de5\u4f5c\u7684\u82f1\u56fd\u8239\u5458\u8bf4\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u8239\u5458\u90fd\u5728\u8d1d\u58f3\u8231\u5185\uff0c\u6ca1\u6709\u65b0\u9c9c\u7a7a\u6c14\u6216\u81ea\u7136\u5149\u3002\u4ed6\u63a5\u53d7CNN\u91c7\u8bbf\u65f6\u8981\u6c42\u533f\u540d\uff0c\u62c5\u5fc3\u8fd9\u4f1a\u5f71\u54cd\u4ed6\u7684\u5de5\u4f5c\u3002\n\u8428\u5c14\u4e39\u54c8\u8bf4\uff0c\u4ed6\u5bf9\u540d\u4eba\u611f\u5230\u5931\u671b\u3002\u4ed6\u8bf4\uff0c\u4ece\u4e00\u5f00\u59cb\u5c31\u5e94\u8be5\u8981\u6c42\u4e25\u683c\u7684\u793e\u4ea4\u8ddd\u79bb\uff0c\u5e76\u8ba4\u4e3a\u4e00\u4e9b\u673a\u7ec4\u4eba\u5458\u6ca1\u6709\u8db3\u591f\u8ba4\u771f\u5730\u5bf9\u5f85\u75c5\u6bd2\u5a01\u80c1\u3002\n\u6839\u636e\u540d\u4ebaCEO\u4e3d\u838e\u00b7\u5362\u6258\u592b\u00b7\u4f69\u7f57\u5728\u4fe1\u4e2d\u6982\u8ff0\u7684\u65b0\u8ba1\u5212\uff0c\u8428\u5c14\u4e39\u54c8\u548c\u5f17\u5170\u5c06\u8f6c\u4e58\u7687\u5bb6\u52a0\u52d2\u6bd4\u7684\u72c2\u60f3\u66f2\uff0c\u7136\u540e\u4e58\u8239\u56de\u5bb6\u3002\n\u867d\u7136\u9063\u8fd4\u5de5\u4f5c\u4ecd\u5728\u8fdb\u884c\u4e2d\uff0c\u4f46\u5728\u7fe1\u7fe0\u516c\u4e3b\u53f7\u4e0a\uff0c\u83ab\u987f\u8bf4\uff0c\u4ed6\u6bcf\u5929\u7684\u7279\u70b9\u662f\u6bcf\u5929\u4e24\u6b21\u4f53\u6e29\u68c0\u67e5\uff0c\u6307\u5b9a\u7684\u7528\u9910\u65f6\u6bb5\u548c\u793e\u4ea4\u8ddd\u79bb\u3002\n\u4ed6\u8bf4\uff0c\u8fd9\u8258\u8239\u662f\u4e00\u5ea7\u9b3c\u57ce\uff0c\u6ca1\u6709\u4eba\u5916\u51fa\u8d70\u52a8\u3002\u5403\u996d\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u88ab\u6211\u4eec\u7684\u8239\u5206\u5f00\u4e86\u3002\u4e0d\u662f\u4e00\u4e2a\u4eba\u5750\u4e00\u5f20\u684c\u5b50\uff0c\u5c31\u662f\u4e24\u4e2a\u4eba\u5750\u4e00\u5f20\u684c\u5b50\uff0c\u6709\u8ddd\u79bb\u3002\n\u6211\u5728\u770b\u4e66\uff0c\u6211\u5728\u63a5\u89e6\u5dde\u4f17\u8bae\u5458\u548c\u4ee3\u8868\u3002\u6211\u6b63\u5728\u8054\u7cfb\u5f8b\u5e08\u3002\u6211\u5728\u505a\u8fd0\u52a8\uff0c\u6211\u5728\u505a\u6700\u591a30\u4e2a\u5065\u8eab\u5957\u8def\u3002\u6211\u8df3\u82ad\u857e\u821e\uff0c\u6216\u8005\u770b\u7535\u5f71\u3002\n\u5728\u4e16\u754c\u7684\u53e6\u4e00\u7aef\uff0c\u6fb3\u5927\u5229\u4e9a\u6f14\u5458\u5fb7\u9c81\u00b7\u8d39\u5c14\u5229(Drew Fairley)\u5728\u592a\u5e73\u6d0b\u63a2\u9669\u8005\u53f7(Pacific Explorer)\u4e0a\u7b49\u5f85\u9063\u8fd4\uff0c\u8fd9\u662f\u4ed6\u7b2c\u4e00\u6b21\u4e58\u5750\u90ae\u8f6e\u3002\u592a\u5e73\u6d0b\u63a2\u9669\u8005\u53f7\u662f\u5b9d\u6d01\u90ae\u8f6e\u6fb3\u5927\u5229\u4e9a\u516c\u53f8(P&amp\uff1bCruises)\u7684\u4e00\u8258\u8239\uff0c\u76ee\u524d\u6b63\u5728\u83f2\u5f8b\u5bbe\u3002\n\u8fd9\u8258\u8239\u4e8e3\u670816\u65e5\u5728\u6089\u5c3c\u8ba9\u4e58\u5ba2\u4e0b\u8239\uff0c\u4f46\u4e24\u5468\u540e\u88ab\u52d2\u4ee4\u79bb\u5f00\u3002\u622a\u81f35\u67085\u65e5\uff0c\u5b83\u505c\u6cca\u5728\u9a6c\u5c3c\u62c9\u6e7e\u5916\u3002\n\u8d39\u5229\u8bf4\uff1a4\u67082\u65e5\uff0c\u5f53\u6211\u4eec\u88ab\u8981\u6c42\u79bb\u5f00\u6089\u5c3c\u6e2f\u65f6\uff0c\u6211\u8fd8\u5728\u7b7e\u5408\u540c\u3002\u6211\u5df2\u7ecf\u5b8c\u6210\u4e86\u5269\u4f59\u7684\u5408\u540c\uff0c\u6211\u5c06\u4e58\u8239\u524d\u5f80\u9a6c\u5c3c\u62c9\uff0c\u8bd5\u56fe\u5c06\u5176\u9063\u8fd4\u56de\u6089\u5c3c\u3002\n\u4e3a\u4e86\u6253\u53d1\u98de\u673a\u4e0a\u7684\u65f6\u95f4\uff0cFairley\u2018s\u5f00\u59cb\u4e86\u4e00\u4e2a\u5728\u7ebf\u804a\u5929\u8282\u76ee\uff0c\u540d\u5b57\u6070\u5982\u5176\u5206\u5730\u53d6\u540d\u4e3a\u201c\u5b9e\u9645\u7684\u8231\u5ba4\u5b9e\u9645\u53d1\u70e7\u201d(Actual Cabin Actual Fever)\u3002\n\u4e16\u754c\u4e0a\u4ee4\u4eba\u60ca\u53f9\u7684\u521b\u9020\u6027\u6210\u679c\u7ed9\u4e86\u6211\u5f88\u5927\u7684\u542f\u53d1\u3002\u8d39\u5229\u8bf4\uff0c\u8fd9\u5c31\u50cf\u662f\u5bf9\u79d1\u7ef4\u5fb7\u9020\u6210\u7684\u60b2\u4f24\u548c\u6050\u60e7\u7684\u56de\u5e94\u3002\u6b4c\u66f2\u3001\u6f14\u5531\u4f1a\u3001\u827a\u672f\u54c1\u3001\u559c\u5267\u3001\u821e\u8e48\uff0c\u6709\u65f6\u53ea\u662f\u5728\u7f51\u4e0a\u95f2\u901b\u4e00\u6bb5\u65f6\u95f4\u3002\n\u8d39\u5c14\u5229\u5728\u4ed6\u7684Instagram@droozah\u4e0a\u5206\u4eab\u7684\u89c6\u9891\u5438\u5f15\u4e86\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684\u89c2\u4f17\u3002\u4ed6\u51b7\u5632\u70ed\u8bbd\u7684\u5e7d\u9ed8\u548c\u70ed\u60c5--\u6709\u670d\u88c5\u53d8\u5316\u548c\u6b4c\u66f2\uff0c\u8d39\u5c14\u5229\u626e\u6f14\u591a\u4e2a\u89d2\u8272--\u662f\u5927\u70ed\u7684\u79d8\u8bc0\u3002\n\u4ed6\u4eec\u975e\u5e38\u611a\u8822\uff0c\u4f46\u968f\u7740\u65c5\u9014\u53d8\u5f97\u8d8a\u6765\u8d8a\u79bb\u5947\uff0c\u4ed6\u4eec\u53d8\u5f97\u8d8a\u9ed1\uff0c\u4ed6\u8bf4\u3002\n\u5bf9\u4e8e\u8d39\u5c14\u5229\u6765\u8bf4\uff0c\u4ed6\u7684\u89c6\u9891\u63d0\u4f9b\u4e86\u4e00\u4e2a\u521b\u9020\u6027\u7684\u51fa\u53e3--\u5e76\u5e2e\u52a9\u5728\u4e0e\u4e16\u9694\u7edd\u671f\u95f4\u5efa\u7acb\u4e86\u8054\u7cfb\u3002\n&#34\uff1b\u53cd\u5e94\u662f\u7535\u6027\u7684\u3002\u8fd9\u4e48\u591a\u4eba\u5728\u53d1\u4fe1\u606f\u3002\u5728\u8fd9\u4e2a\u5145\u6ee1\u538b\u529b\u7684\u65f6\u671f\uff0c\u4eba\u4eec\u9700\u8981\u54af\u54af\u5730\u7b11\u4e00\u7b11\u3002\n\u6fb3\u5927\u5229\u4e9a\u5b9d\u6d01\u90ae\u8f6e(P&amp\uff1bO Cruises)\u7684\u6bcd\u516c\u53f8\u5609\u5e74\u534e\u516c\u53f8(Carnival Corporation)\u8868\u793a\uff0c\u8be5\u516c\u53f8\u53d7\u5230\u7269\u6d41\u95ee\u9898\u7684\u963b\u788d\uff0c\u4f46\u6b63\u5728\u52aa\u529b\u9063\u8fd4\u5458\u5de5\u3002\n\u5609\u5e74\u534e\u90ae\u8f6e\u516c\u53f8\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u5728\u7ed9CNN\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff0c\u6211\u4eec\u7684\u9996\u8981\u4efb\u52a1\u662f\u5ba2\u4eba\u548c\u673a\u7ec4\u4eba\u5458\u7684\u5b89\u5168\u548c\u5065\u5eb7\uff0c\u4ee5\u53ca\u5408\u89c4\u548c\u73af\u5883\u4fdd\u62a4\u3002\n\u6211\u4eec\u76ee\u524d\u6b63\u5728\u52aa\u529b\u5c06\u6682\u505c\u671f\u95f4\u7684\u673a\u7ec4\u4eba\u5458\u9063\u8fd4\u56de\u4ed6\u4eec\u5404\u81ea\u7684\u56fd\u5bb6\u3002\n\u6700\u8fd1\u51e0\u5929\uff0c\u7531\u4e8e\u6e2f\u53e3\u5173\u95ed\u548c\u5176\u4ed6\u65c5\u884c\u9650\u5236\uff0c\u8fd9\u4e00\u70b9\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u4f46\u6211\u4eec\u7ee7\u7eed\u53d6\u5f97\u5f3a\u52b2\u8fdb\u5c55\u3002\n\u56de\u5230\u4e16\u754c\u7684\u53e6\u4e00\u7aef\uff0c\u83ab\u987f\u5bf9\u4ed6\u7684\u7956\u56fd\u5185\u90e8\u7684\u53cc\u91cd\u6807\u51c6\u8868\u793a\u5931\u671b\u3002\n\u6211\u89c9\u5f97\u6e38\u8f6e\u884c\u4e1a\uff0c\u6211\u4eec\u6b63\u5728\u88ab\u8bcb\u6bc1\u3002\u6211\u89c9\u5f97\u6211\u4eec\u6210\u4e86\u66ff\u7f6a\u7f8a\uff0c\u4ed6\u8bf4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6bd4\u7f8e\u56fd\u4efb\u4f55\u4eba\u90fd\u66f4\u786e\u4fe1\u81ea\u5df1\u8eab\u4f53\u5065\u5eb7\uff0c\u5728\u8239\u4e0a\u7684\u6761\u4ef6\u6bd4\u4efb\u4f55\u4eba\u90fd\u4e25\u683c\u3002\n\u5bf9\u4e8e\u83ab\u987f\u6765\u8bf4\uff0c\u4e00\u4e2a\u8f6c\u6298\u70b9\u662f\u542c\u8bf4\u4f5b\u7f57\u91cc\u8fbe\u5dde\u6b63\u5728\u5f00\u653e\u6d77\u6ee9\u548c\u4f01\u4e1a\uff0c\u4f46\u636e\u62a5\u9053\u62d2\u7edd\u7f8e\u56fd\u6e38\u8f6e\u8239\u5458\u5165\u5883\u3002\n\u6211\u89c9\u5f97\u6211\u4eec\u6b63\u88ab\u5f53\u4f5c\u6ca1\u6709\u72af\u7f6a\u7684\u7f6a\u72af\u5bf9\u5f85\uff0c\u6211\u4eec\u7684\u56fd\u5bb6\u62d2\u7edd\u6211\u4eec\u5165\u5883\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5df2\u7ecf\u8ddf\u8e2a\u6211\u4eec\u7684\u5065\u5eb7\u72b6\u51b5\u4e00\u4e2a\u591a\u6708\u4e86\uff0c\u800c\u4e14\u6211\u4eec\u6ca1\u6709\u751f\u75c5\uff0c\u8fd9\u662f\u2026\u6211\u53ea\u662f\u771f\u7684\u5728\u4e3a\u8fd9\u79cd\u5fc3\u6001\u800c\u82e6\u82e6\u6323\u624e\u3002\u662f\u4ec0\u4e48\u8ba9\u8fd9\u6ca1\u95ee\u9898\u5462\uff1f&#34\uff1b\n\u963f\u5fb7\u91d1\u65af\u5728\u5df4\u5df4\u591a\u65af\u9644\u8fd1\u7684\u6d77\u6d0b\u81ea\u7531\u53f7\u4e0a\u8bf4\uff0c\u4ed6\u5c06\u7ee7\u7eed\u6218\u6597\uff0c\u4e3a\u90a3\u4e9b\u88ab\u56f0\u5728\u6d77\u4e0a\u7684\u4eba\u7167\u4eae\u5149\u660e\uff0c\u5373\u4f7f\u4ed6\u4e0a\u5cb8\u540e\u4e5f\u662f\u5982\u6b64\u3002\n\u4ed6\u8bf4\uff1a\u6211\u771f\u7684\u53ea\u60f3\u5411\u4e16\u754c\u5404\u56fd\u653f\u5e9c\u5f3a\u8c03\uff0c\u4e0d\u8981\u518d\u8bf4\u6700\u540e\u4e00\u8258\u6e38\u8f6e\u5df2\u7ecf\u56de\u5bb6\u4e86\uff0c\u6e38\u8f6e\u4e0a\u7684\u6700\u540e\u4e00\u6279\u4eba\u5df2\u7ecf\u56de\u5bb6\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e0e\u4e8b\u5b9e\u76f8\u53bb\u751a\u8fdc\u3002", "note_en": "(CNN) \u2014  Most cruise passengers  have made their way back home, and the vast ships that once ferried them from port to port are moored up or back on the water, relocating for the next stage in their journeys.\n But what about the crews that kept these gigantic vessels going, and looked after guests as panic over the coronavirus swept across the oceans?\n  For many of those working in the cruise industry, the nightmare of being aboard a ship that had carried people with coronavirus has continued -- sometimes without an end in sight.\n Isolated, denied the swift repatriations offered to passengers and, in some cases, made to endure tough conditions without pay, some of those sequestered at sea have been describing the bureaucratic tangle that has trapped them, often within meters of shore.\n &#34;I&#39;m hoping we don&#39;t get forgotten about, to be honest,&#34; says MaShawn Morton, who works for Princess Cruises. &#34;It seems like nobody cares what&#39;s happening to us out here.&#34;\n As of May 5, there were over 57,000 crew members still aboard 74 cruise ships in and around US ports and the Bahamas and the Caribbean, according to the US Coast Guard. Many more hundreds were stuck on vessels elsewhere across the world&#39;s oceans.\n With no passengers to look after and their quarantines completed, the employees are left wondering why they haven&#39;t been allowed home.\n In American waters, cruise ships have been mired in regulations imposed by the Centers for Disease Control and Prevention, the US health protection agency.\n The  CDC&#39;s official line is that crew members can only be permitted to disembark for repatriation or transfer between ships provided they&#39;ll be transported by specially chartered aircraft or personal vehicles.\n  Cruise ship crew unaffected by Covid-19  are able to disembark and travel via commercial aviation, but only on a case-by-case basis with prior CDC approval. The cruise line must complete a statement &#34;attesting to the status of the ship as free of COVID-19.&#34;\n Until last weekend, the legal consequences of breaching these regulations have, according to some crew, delayed cruise lines from agreeing to them.\n On Sunday, Royal Caribbean and its brands, including Celebrity Cruise Line, reached an agreement with the CDC for disembarking crew, writing to employees to say that it would adhere to the strict guidelines and abide by their implications.\n &#34;The CDC has asked me and other cruise line leaders to sign a letter limiting our options for getting you home and taking responsibility for your actions in order to secure their approval to disembark you,&#34; writes Celebrity Cruises CEO Lisa Lutoff-Perlo, in a letter seen by CNN.\n &#34;In the spirit of doing everything we possibly can to get you home, I have decided to sign this letter.&#34;\n Other cruise lines may follow suit, but a combination of wariness surrounding cruise ships, the details and implications of the CDC&#39;s policies, a lack of commercial flights, widespread travel bans and ongoing uncertainties means many crews remain stuck.\n   American Alex Adkins, a senior stage technician on Freedom of the Seas, a Royal Caribbean ship, has been waiting at sea since mid-March when the vessel&#39;s guests were offloaded in Miami.\n  &#34;Since then, we&#39;ve had no guests and we&#39;ve just been floating off the coast of Barbados,&#34; he says.\n For the first week, the crew took advantage of the Freedom of the Seas&#39; pool and the gym, enjoying facilities empty of guests. Then, they went into a mandatory two-week self-isolation, says Adkins.\n Adkins tells CNN that crew members have since been told that they&#39;re no longer considered working employees and they were paid out through the end of April.\n He said efforts to charter flights to get the crew home stalled repeatedly because Royal Caribbean had yet to sign up to CDC procedures, but he accepts the cruise line was in a difficult position before it finally agreed to the conditions.\n &#34;Our leaders signed it in hopes of getting us home soon and safely, and I hope everyone going home understands the huge sacrifice they made,&#34; says Adkins.\n For Adkins, and many of those on board, the new development has been &#34;an incredible morale boost&#34; and he describes &#34;a tangible electricity permeating through the fleet.&#34;\n That said, he&#39;s aware that many workers on other ships remain in a floating purgatory.\n Cruise Lines International Association, the body that oversees the majority of the world&#39;s cruise lines, tells CNN it is &#34;working with the CDC to address these unprecedented challenges and repatriate crew members as soon as possible.&#34;\n The situation, says a CLIA representative, is &#34;very complex&#34; and &#34;is evolving day by day.&#34;\n  Morton is another crew member still waiting to get home. He says he&#39;s worked with Princess Cruises for about five years and started his fourth Princess contract earlier this year, on board the Sky Princess, a gigantic, gleaming ship that can accommodate 3,660 passengers and 1,346 crew.\n Morton&#39;s job was supposed to last until mid-October as the vessel sailed across the Caribbean, the Atlantic and over to the Baltics and traversed Europe. As the pandemic spread globally and cruises were canceled or recalled, the Sky Princess offloaded its passengers in Miami on March 14.\n Crew members, including Morton, remained on board, moored at the city&#39;s port. Home seems so close, yet so far.\n Morton says that at first, the mood was positive. Morton says crew entered roughly 20 days of self-isolation largely confined to cabins but understanding that they would then be able to disembark and head home.\n &#34;Once the passengers disembarked, we felt safe,&#34; says Morton. &#34;We didn&#39;t have any sign of sickness. We were glad that we were still being paid and employed.&#34;\n Toward the end of this period, Morton said he and his colleagues were told their contract would be formally coming to an end. He said they were informed they would no longer be paid from June onwards.\n &#34;We were actually pretty surprised at the length of time that they were still able to pay us,&#34; says Morton.\n  When quarantine on the Sky Princess came to an end in April, Princess started to trans-ship crewmembers -- moving crew between ships in order to group workers by nationalities so that they can then be sailed directly home or to an appropriate airport.\n It&#39;s a solution to the lack of commercial flights -- and the difficulties in getting the CDC to approve charters.\n   Not all are happy with this solution though. Sailing home can take weeks, where flights take hours. Plus, there&#39;s the ongoing threat of cross-infection.\n &#34;[When trans-shipping began] that&#39;s really when tensions and stress levels began to rise,&#34; says Morton.\n Plus, for American crew members, trans-shipping seemed to make little sense. They were docked in Miami, why couldn&#39;t they just disembark?\n The Sky Princess was a &#34;healthy&#34; ship, with no reported cases of Covid-19 and Morton was concerned he might move to one where passengers or crew had previously tested positive.\n &#34;People wanted to go home instead of going to another ship,&#34; he says. &#34;The information has been changing literally hour by hour, day by day. Not knowing what&#39;s happening has been very stressful.&#34;\n On April 25, Morton says he was moved from the Sky Princess to the Emerald Princess, along with other American employees of Princess Cruises, a transfer that took place in rough seas.\n &#34;The wave swells were very high, I actually took some videos to send to my mother of how bad the tender ship was rocking and then I ended up losing internet service,&#34; says Morton.\n It was a full 24 hours before Morton was able to reconnect with his panicked mother and assure her that he was OK.\n Morton says he recently heard Princess Cruises&#39; American crew are likely going to be moved again as part of the repatriation efforts, this time, to the Coral Princess, which saw Covid-19 fatalities earlier in the pandemic.\n &#34;Right now, we&#39;re hoping that before that happens, the CDC will release the ban, and allow Americans to enter the country,&#34; he says.\n Princess Cruises did not respond specifically to questions about why it&#39;s taken so long to process the crew&#39;s disembarkation, nor why US crew members moored in American ports were involved in the trans-shipping process rather than allowed to remain in situ until they could leave.\n A spokesperson told CNN the company is &#34;deeply committed to reuniting our shipboard team members with their families safely and continue to make progress with arranging travel to their home countries.&#34;\n The cruise line said hundreds of crew members disembark daily, with 4,000 returned home so far.\n Princess Cruises told CNN the company has been actively preparing and providing attestations for crew disembarkation in line with the CDC&#39;s policies, which insist that crew members must not stay overnight at a hotel, use public transport or enter airport terminals.\n    Caio Saldanha, a DJ from Brazil currently on board the Celebrity Infinity ship, tells CNN that Celebrity, owned by Royal Caribbean, is looking to trans-ship crew stuck on ships across the Bahamas, as part of repatriation efforts.\n Saldanha and his fianc\u00e9e Jessica Furlan, an on-board activities host, say their long wait at sea has been made all the more frustrating because they were allowed to board the ship on March 14 in Miami, a day after the US government issued a no-sail order suspending all cruise voyages.\n On March 23, Celebrity Infinity&#39;s ship management  informed crew that those who&#39;d been on board from March 9 through 14 could have been exposed to Covid-19. A crew member who&#39;d been with the ship during this period had tested positive for the virus.\n By March 28, the crew were confined to their cabins as the ship went into lockdown.\n   He says he and his fianc\u00e9 moved from a cabin he characterizes as moldy, dusty and in &#34;really bad condition,&#34; to a better-quality cabin, albeit one that didn&#39;t have windows.\n &#34;Almost all crew cabins are inside shell cabins, with no fresh air or natural light,&#34; says a British crew member who works in the entertainment department of a Royal Caribbean ship. He spoke to CNN on condition of anonymity, worried about the impact on his job.\n Saldanha says he feels let down by Celebrity. He says strict social distancing should have been mandated from the outset and feels the virus threat wasn&#39;t taken seriously enough by some crew members.\n  According to the new plan, outlined in Celebrity CEO Lisa Lutoff-Perlo&#39;s letter, Saldanha and Furlan will transfer to Royal Caribbean&#39;s Rhapsody and travel home by sea.\n    While repatriation efforts are ongoing, on board the Emerald Princess, Morton says his daily routine is characterized by twice daily temperature checks, designated meal slots and social distancing.\n &#34;The ship is a ghost town, nobody&#39;s out and about,&#34; he says. &#34;Mealtimes, we&#39;re all separated by our ships. And it&#39;s either one person to a table or two people to a table, with distance.&#34;\n  &#34;I&#39;m reading books, I&#39;m reaching out to state representatives and delegates. I&#39;m reaching out to lawyers. I&#39;m doing exercises, I&#39;m doing Max 30 Fitness routines. I do a ballet barre, or I watch movies.&#34;\n  On the other side of the world, Drew Fairley, an Australian actor working his first ever cruise, is awaiting repatriation while on board the Pacific Explorer, a P&amp;O Cruises Australia ship that&#39;s currently in the Philippines.\n The ship disembarked passengers on March 16 in Sydney but was ordered to leave two weeks later. As of May 5, it was moored outside Manila Bay.\n &#34;I was still under contract when we were asked to exit Sydney harbor on April 2,&#34; Fairley says. &#34;I&#39;ve played out the rest of my contract sailing to Manila to try and repatriate back to Sydney.\n   To pass time on board, Fairley&#39;s started an online chat show, appropriately entitled &#34;Actual Cabin Actual Fever.&#34;\n &#34;I was very inspired by the amazing creative output in the world. It was like a response to the sadness and fear Covid created,&#34; Fairley says. &#34;Songs, concerts, artwork, comedy, dance and sometimes just hanging out for a while online.&#34;\n Fairley&#39;s videos, shared on his Instagram,  @droozah, have attracted viewers from across the world. His sardonic humor and enthusiasm -- there are costume changes and songs and Fairley plays multiple characters -- were the recipe for a hit.\n &#34;They are very silly but as the journey became more bizarre the darker they become,&#34; he says.\n For Fairley, his videos have provided a creative outlet -- and helped inspire connections during isolation.\n &#34;The response is electric. So many people are sending in messages. People need a giggle in these stressful times.&#34;\n    Carnival Corporation, P&amp;O Cruises Australia&#39;s parent company, said it had been hampered by logistical problems but was working to repatriate its employees.\n &#34;The safety and health of our guests and crew, along with compliance and environmental protection, are our top priorities,&#34; said a Carnival Cruise Line spokesperson in a statement to CNN.\n &#34;We are currently engaged in the effort to repatriate crew members during our pause to their respective home countries.\n &#34;This has become more difficult in recent days because of port closings and other travel restrictions, but we continue to make strong progress.&#34;\n  Back on the other side of the world, Morton expresses frustration over what he sees as double standards within his homeland.\n &#34;I feel that the cruise ship industry, we&#39;re being vilified. I feel like we&#39;re being scapegoated,&#34; he says. &#34;In reality, it&#39;s more certain that I&#39;m healthy and have been under stricter conditions on board a ship than anybody in the States has been.&#34;\n For Morton, a tipping point was hearing that the state of Florida is opening beaches and businesses but reportedly denying entry to American cruise ship crew.\n &#34;I feel like we&#39;re being treated like criminals who have committed no crime, and for our country to refuse us entry, knowing that we&#39;ve been tracking our health for over a month now, and that we are not sick, is...I&#39;m just really struggling for the mindset of that. What makes that okay?&#34;\n Adkins, on board the Freedom of the Seas near Barbados, says he will continue to &#34;keep fighting&#34; to shine a light on those stuck at sea, even after he disembarks.\n  He says: &#34;I really just want to emphasize to all of the governments around the world to stop saying that the last cruise ship has come home, and the last people on cruise ships have come home, because that&#39;s so far from the truth.&#34;", "posttime": "2020-05-07 19:55:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6ede\u7559,stuck,\u8239\u5458", "title": "5.7\u4e07\u4eba\u4ecd\u6ede\u7559\u5728\u6e38\u8f6e\u4e0a", "title_en": "57,000 people are still stuck on cruise ships", "transed": 1, "url": "https://www.cnn.com/travel/article/cruise-ship-crew-stuck-at-sea/index.html", "via": "", "real_tags": ["\u6ede\u7559", "stuck", "\u8239\u5458"]}, {"category": "", "categoryclass": "", "imagename": "7dcfc7ba438ba9a205a0af90946c8ff9.jpg", "infoid": 1001051, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u56fd\u9632\u90e8\u5c31\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u53ca\u5176\u540e\u679c\u8fdb\u884c\u8c08\u5224\uff0c\u519b\u4e8b\u5165\u53e3\u5904\u7406\u7ad9\u6b63\u5728\u4e3a\u5c06\u51a0\u72b6\u75c5\u6bd2\u5e78\u5b58\u8005\u5e26\u5165\u670d\u52a1\u90e8\u95e8\u63d0\u4f9b\u65b0\u7684\u6307\u5bfc\u3002\n\u6839\u636e\u6700\u8fd1\u5728Twitter\u4e0a\u6d41\u4f20\u7684\u4e00\u4efdMEPCOM\u5907\u5fd8\u5f55\uff0c\u8fc7\u53bb\u7684\u51a0\u72b6\u75c5\u6bd2\u8bca\u65ad\u662f\u4e0d\u80fd\u8fdb\u884c\u5904\u7406\u7684\u3002\n\u5728\u75c5\u53f2\u9762\u8c08\u6216\u68c0\u67e5\u671f\u95f4\uff0c\u7ecf\u5b9e\u9a8c\u5ba4\u6d4b\u8bd5\u6216\u4e34\u5e8a\u533b\u751f\u8bca\u65ad\u8bc1\u5b9e\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u53f2\u5c06\u88ab\u6c38\u4e45\u53d6\u6d88\u8d44\u683c\u2026\u2026\u3002\u5907\u5fd8\u5f55\u4e0a\u5199\u7740\u3002\n\u201c\u5728\u7b5b\u67e5\u8fc7\u7a0b\u4e2d\uff0c\u62a5\u544a\u7684\u786e\u8bca\u51a0\u72b6\u75c5\u6bd2\u75c5\u53f2\u5c06\u6ce8\u660e\u2018\u8003\u8651\u53d6\u6d88\u8d44\u683c\u2019\u201dpic.twitter.com/ZKx91AUbXo\u3002\n-Free(@Nathaniel_Free)2020\u5e745\u67084\u65e5\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u5b83\u4e3a\u6b27\u6d32\u8bae\u4f1a\u5de5\u4f5c\u4eba\u5458\u5236\u5b9a\u4e86\u5904\u7406\u6f5c\u5728\u7684\u548c\u5df2\u786e\u8ba4\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u7684\u6307\u5bfc\u65b9\u9488\u3002\u8fd9\u4ece\u6240\u6709MEP\u7684\u7b5b\u67e5\u5f00\u59cb\uff0c\u5305\u62ec\u6d4b\u91cf\u4f53\u6e29\u548c\u56de\u7b54\u6709\u5173\u75c7\u72b6\u548c\u6f5c\u5728\u63a5\u89e6\u7684\u95ee\u9898\u3002\n\u6839\u636e\u8fd9\u4efd\u5907\u5fd8\u5f55\uff0c\u5982\u679c\u7533\u8bf7\u8005\u6ca1\u6709\u901a\u8fc7\u7b5b\u67e5\uff0c\u4ed6\u4eec\u5c06\u4e0d\u4f1a\u63a5\u53d7\u6d4b\u8bd5\uff0c\u4f46\u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u75c7\u72b6\uff0c\u4ed6\u4eec\u53ef\u4ee5\u572814\u5929\u5185\u8fd4\u56de\u3002\u4efb\u4f55\u88ab\u8bca\u65ad\u4e3a\u51a0\u72b6\u75c5\u6bd2\u7684\u4eba\u90fd\u5fc5\u987b\u7b49\u5230\u786e\u8bca\u540e28\u5929\u624d\u80fd\u5411MEPS\u62a5\u544a\u3002\n\u8fd4\u56de\u540e\uff0c\u8bca\u65ad\u7ed3\u679c\u5c06\u88ab\u6807\u8bb0\u4e3a\u201c\u6c38\u4e45\u53d6\u6d88\u201d\u52a0\u5165\u8d44\u683c\u3002\u65b0\u5175\u53ef\u4ee5\u7533\u8bf7\u8c41\u514d\u6240\u6709\u6c38\u4e45\u53d6\u6d88\u8d44\u683c\u7684\u60c5\u51b5\uff0c\u5305\u62ec\u5728\u51a0\u72b6\u75c5\u6bd2\u4e2d\u5e78\u5b58\u4e0b\u6765\u7684\u60c5\u51b5\u3002\u4e0d\u8fc7\uff0c\u5728\u6ca1\u6709\u5c31\u5904\u7406\u51a0\u72b6\u75c5\u6bd2\u7684\u4f8b\u5916\u60c5\u51b5\u63d0\u4f9b\u8fdb\u4e00\u6b65\u6307\u5f15\u7684\u60c5\u51b5\u4e0b\uff0c\u8986\u6838\u5f53\u5c40\u6ca1\u6709\u7406\u7531\u7ed9\u4e88\u8c41\u514d\u3002\nMaxwell\u62d2\u7edd\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4e0e\u5176\u4ed6\u4e0d\u6392\u9664\u670d\u5175\u5f79\u7684\u75c5\u6bd2\u6027\u975e\u6162\u6027\u75c5\u76f8\u6bd4\uff0c\u51a0\u72b6\u75c5\u6bd2\u8bca\u65ad\u5c06\u6c38\u4e45\u53d6\u6d88\u8d44\u683c\u3002\n\u7136\u800c\uff0c\u8003\u8651\u5230\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u6709\u9650\u7814\u7a76\uff0c\u519b\u4e8b\u533b\u7597\u4e13\u4e1a\u4eba\u58eb\u5728\u62db\u52df\u5e78\u5b58\u8005\u65f6\uff0c\u53ef\u80fd\u4f1a\u8bd5\u56fe\u89e3\u51b3\u51e0\u4e2a\u56e0\u7d20\uff1a\u75c5\u6bd2\u9020\u6210\u7684\u547c\u5438\u635f\u5bb3\u662f\u957f\u671f\u7684\u8fd8\u662f\u6c38\u4e45\u6027\u7684\uff0c\u4ee5\u53ca\u8fd9\u662f\u5426\u53ef\u4ee5\u8bc4\u4f30\uff1b\u5373\u4f7f\u6709\u4eba\u8fde\u7eed\u4e24\u6b21\u68c0\u6d4b\u5448\u9634\u6027\uff0c\u53cd\u590d\u53d1\u4f5c\u7684\u53ef\u80fd\u6027\uff1b\u4ee5\u53ca\u4e00\u8f6e\u51a0\u72b6\u75c5\u6bd2\u53ef\u80fd\u4e0d\u80fd\u4e3a\u672a\u6765\u63d0\u4f9b\u5b8c\u5168\u514d\u75ab\u529b\uff0c\u53ef\u80fd\u4f1a\u8ba9\u67d0\u4eba\u9762\u4e34\u518d\u6b21\u611f\u67d3\u5b83\u7684\u66f4\u9ad8\u98ce\u9669\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u66f4\u4e25\u91cd\u7684\u5e76\u53d1\u75c7\u3002\n\u8fd9\u4e00\u4e3e\u63aa\u51fa\u53f0\u4e4b\u9645\uff0c\u8fd9\u4e9b\u670d\u52a1\u673a\u6784\u6b63\u4e3a\u590f\u79cb\u65fa\u5b63\u7684\u6bd5\u4e1a\u540e\u62db\u8058\u4eba\u6570\u6fc0\u589e\u505a\u51c6\u5907\u3002\n\u6700\u8fd1\u51e0\u5468\uff0c\u65b0\u5b66\u5458\u5728\u5f00\u59cb\u57f9\u8bad\u4e4b\u524d\u90fd\u8fdb\u884c\u4e86100%\u7684\u51a0\u72b6\u75c5\u6bd2\u68c0\u6d4b\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5df2\u7ecf\u5728\u5357\u5361\u7f57\u6765\u7eb3\u5dde\u7684\u6770\u514b\u900a\u5821\u548c\u6d77\u519b\u9646\u6218\u961f\u62db\u52df\u5723\u5730\u4e9a\u54e5\u4ed3\u5e93\u53d1\u73b0\u4e86\u96c6\u7fa4\uff0c\u8fd9\u662f\u9646\u519b\u548c\u6d77\u519b\u9646\u6218\u961f\u6700\u5927\u7684\u521d\u59cb\u8fdb\u5165\u8bad\u7ec3\u8bbe\u65bd\u3002", "note_en": "As the Defense Department negotiates its way through the coronavirus pandemic and its fallout,  military entrance processing stations are working with new guidance when it comes to bringing  COVID-19 survivors into the services.\n    A past  COVID-19 diagnosis is a no-go for processing, according to a recently released MEPCOM memo circulating on Twitter.\n  \u201cDuring the medical history interview or examination, a history of COVID-19, confirmed by either a laboratory test or a clinician diagnosis, is permanently disqualifying ...\u201d the memo reads.\n  \u201cDuring the screening process, a reported history of confirmed COVID-19 will be annotated \u2018Considered disqualifying\u2019\u201c  pic.twitter.com/ZKx91AUbXo\n\u2014 Free (@Nathaniel_Free)  May 4, 2020\n    Specifically, it lays out guidelines for MEPS staff to deal with potential, as well as confirmed, coronavirus cases. That starts with screening at all MEPS, which includes taking a temperature and answering questions about symptoms and potential contact.\n    If an applicant fails screening, according to the memo, they won\u2019t be tested, but they can return in 14 days if they\u2019re symptom-free. Anyone who has been diagnosed with COVID-19 will have to wait until 28 days after diagnosis to report to MEPS.\n             Upon return, a diagnosis will be marked as \u201cpermanently disqualifying\u201d for accession. Recruits can apply for waivers for all permanently disqualifying conditions, including surviving COVID-19. However, without any further guidance for exceptions dealing with COVID-19, a review authority would have no justification to grant a waiver.\n  Maxwell declined to explain why a coronavirus diagnosis would be permanently disqualifying, compared to other viral, non-chronic illnesses that do not preclude military service.\n    However, given the limited research on COVID-19, there are likely a few factors that military medical professionals are trying to hash out when it comes to recruiting survivors: Whether respiratory damage from the virus is long-lasting or permanent, and whether that can be assessed; the likelihood of recurring flare-ups, even if someone has had two consecutive negative tests; and the possibility that one bout of COVID-19 might not provide full immunity for the future, and could potentially leave someone at a higher risk to contract it again, perhaps with worse complications.\n    The move comes as the services prepare for a surge of post-graduation recruits during the summer and fall high season.\n  In recent weeks, new trainees have been 100-percent tested for COVID-19 before starting training. So far, clusters have been discovered at  Fort Jackson, South Carolina, and  Marine Corps Recruit Depot San Diego, the Army and Marine Corps\u2019 biggest initial entry training installations.", "posttime": "2020-05-07 19:55:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coronavirus,\u51a0\u72b6\u75c5\u6bd2,\u75c5\u6bd2,\u5e78\u5b58\u8005,survivors", "title": "\u51a0\u72b6\u75c5\u6bd2\u5e78\u5b58\u8005\u88ab\u7981\u6b62\u53c2\u519b", "title_en": "Coronavirus survivors banned from joining the military", "transed": 1, "url": "https://www.militarytimes.com/news/your-military/2020/05/06/coronavirus-survivors-banned-from-joining-the-military/", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u5e78\u5b58\u8005", "survivors"]}, {"category": "", "categoryclass": "", "imagename": "c1ae0580288f24a30726a1298792fca9.png", "infoid": 1001050, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8ba1\u7b97\u673a\u662f\u590d\u6742\u7684\u673a\u5668\uff0c\u65e8\u5728\u6267\u884c\u4e00\u9879\u7b80\u5355\u7684\u4efb\u52a1\uff1a\u8fd0\u884c\u7a0b\u5e8f-\u6d4f\u89c8\u5668\u3001\u6587\u672c\u7f16\u8f91\u5668\u3001\u7f51\u7edc\u670d\u52a1\u5668\u3001\u89c6\u9891\u6e38\u620f\u7b49-\u64cd\u4f5c\u6570\u636e-\u7167\u7247\u3001\u97f3\u4e50\u3001\u6587\u672c\u6587\u4ef6\u3001\u6570\u636e\u5e93\u7b49\u3002\n\u5728\u4e0d\u4f7f\u7528\u65f6\uff0c\u8fd9\u6837\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u4f1a\u548c\u5e73\u5730\u5b58\u5728\u4e8e\u786c\u76d8\u9a71\u52a8\u5668\u4e2d\uff0c\u5373\u4f7f\u60a8\u7684\u8ba1\u7b97\u673a\u5df2\u5173\u95ed\uff0c\u786c\u76d8\u9a71\u52a8\u5668\u4e5f\u8d1f\u8d23\u4f7f\u4fe1\u606f\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\u3002\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u610f\u5473\u7740\u8be2\u95ee\u5904\u7406\u5668(\u4e5f\u79f0\u4e3a\u3002\u4e2d\u592e\u5904\u7406\u5355\u5143\u6216CPU)\u6765\u8bfb\u53d6\u548c\u6267\u884c\u7ec4\u6210\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u673a\u5668\u6307\u4ee4\uff0c\u4ee5\u53ca\u4efb\u4f55\u9644\u52a0\u7684\u6570\u636e\u5904\u7406\u3002\n\u786c\u76d8\u5b58\u50a8\u4e86\u5927\u91cf\u4fe1\u606f\uff0c\u4f46\u901f\u5ea6\u975e\u5e38\u6162\u3002\u6bd4\u5904\u7406\u5668\u6162\u5f97\u591a\uff1a\u76f4\u63a5\u4ece\u786c\u76d8\u8bfb\u53d6\u6307\u4ee4\u7684CPU\u5c06\u6210\u4e3a\u6574\u4e2a\u7cfb\u7edf\u7684\u4e25\u91cd\u74f6\u9888\u3002\u4e3a\u6b64\uff0c\u7a0b\u5e8f\u53ca\u5176\u6570\u636e\u9996\u5148\u88ab\u590d\u5236\u5230\u4e3b\u5b58\u50a8\u5668(\u53c8\u540d\uff1a\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\u6216RAM)\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u6bd4\u786c\u76d8\u9a71\u52a8\u5668\u5c0f\u4f46\u901f\u5ea6\u5feb\u5f97\u591a\u7684\u5b58\u50a8\u786c\u4ef6\u7ec4\u4ef6\uff0c\u56e0\u6b64\u5904\u7406\u5668\u53ef\u4ee5\u4ece\u90a3\u91cc\u8bfb\u53d6\u6307\u4ee4\u800c\u4e0d\u4f1a\u964d\u4f4e\u901f\u5ea6\u3002\n\u4e3b\u5b58\u50a8\u5668\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u957f\u4e32\u5355\u5143\uff0c\u6bcf\u4e2a\u5355\u5143\u5305\u542b\u4e00\u4e9b\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5e76\u6807\u6709\u4e00\u4e2a\u79f0\u4e3a\u5b58\u50a8\u5668\u5730\u5740\u7684\u6570\u5b57\u3002\u6839\u636e\u7cfb\u7edf\u4e2d\u53ef\u7528\u7684\u4e3b\u5185\u5b58\u91cf\uff0c\u5185\u5b58\u5730\u5740\u7684\u8303\u56f4\u4ece0\u5230N\u3002\u7a0b\u5e8f\u4f7f\u7528\u7684\u5730\u5740\u8303\u56f4\u79f0\u4e3a\u5730\u5740\u7a7a\u95f4\u3002\n\u5728\u8ba1\u7b97\u673a\u5386\u53f2\u4e4b\u521d(\u5982\u4eca\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u4e5f\u662f\u5982\u6b64)\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u6574\u4e2a\u4e3b\u5b58\u50a8\u5668\uff0c\u800c\u5b83\u7684\u7ba1\u7406\u5219\u7559\u7ed9\u7a0b\u5e8f\u5458\u3002\u4e3a\u8fd9\u4e9b\u673a\u5668\u7f16\u5199\u8f6f\u4ef6\u5f88\u6709\u6311\u6218\u6027\uff1a\u5f00\u53d1\u4eba\u5458\u7684\u90e8\u5206\u5de5\u4f5c\u662f\u8bbe\u8ba1\u4e00\u79cd\u7ba1\u7406RAM\u8bbf\u95ee\u7684\u597d\u65b9\u6cd5\uff0c\u5e76\u786e\u4fdd\u6574\u4e2a\u7a0b\u5e8f\u4e0d\u4f1a\u6ea2\u51fa\u53ef\u7528\u5185\u5b58\u3002\n\u968f\u7740\u591a\u4efb\u52a1\u5904\u7406\u7684\u51fa\u73b0\uff0c\u5f53\u591a\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5728\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u65f6\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u68d8\u624b\u3002\u7a0b\u5e8f\u5458\u4e0d\u5f97\u4e0d\u9762\u5bf9\u65b0\u7684\u5173\u952e\u95ee\u9898\uff1a\n\u5185\u5b58\u5e03\u5c40-\u5728\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u4e4b\u540e\u4f4d\u4e8eRAM\u4e2d\u7684\u7a0b\u5e8f\u7684\u5730\u5740\u7a7a\u95f4\u5c06\u504f\u79fb\u4e00\u5b9a\u7684\u91cf\uff0c\u4e0d\u518d\u5904\u4e8e\u521d\u59cb\u8303\u56f40\u5230N\u4e4b\u95f4\uff0c\u8fd9\u662f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u989d\u5916\u75db\u70b9\uff1b\n\u5185\u5b58\u788e\u7247-\u5f53\u4e8b\u7269\u6765\u56de\u79fb\u52a8\u5230\u5185\u5b58\u65f6\uff0c\u53ef\u7528\u7a7a\u95f4\u4f1a\u88ab\u5206\u5272\u6210\u8d8a\u6765\u8d8a\u5c0f\u7684\u533a\u5757\u3002\u8fd9\u5c06\u4f7f\u5bfb\u627e\u53ef\u7528\u7a7a\u95f4\u5728\u5185\u5b58\u4e2d\u52a0\u8f7d\u65b0\u7a0b\u5e8f\u548c\u6570\u636e\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff1b\n\u5b89\u5168\u6027-\u5982\u679c\u7a0b\u5e8fA\u610f\u5916\u8986\u76d6\u4e86\u7a0b\u5e8fB\u7684\u5185\u5b58\u600e\u4e48\u529e\uff1f\u6216\u8005\uff0c\u66f4\u7cdf\u7cd5\u7684\u662f\uff1a\u5982\u679c\u5b83\u6545\u610f\u4ece\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u8bfb\u53d6\u654f\u611f\u6570\u636e\uff0c\u5982\u5bc6\u7801\u6216\u4fe1\u7528\u5361\u4fe1\u606f\uff0c\u8be5\u600e\u4e48\u529e\uff1f\n\u56e0\u6b64\uff0c\u5bf9\u4e8e20\u4e16\u7eaa60\u5e74\u4ee3\u65e9\u671f\u7684\u786c\u4ef6\u67b6\u6784\u5e08\u6765\u8bf4\uff0c\u5f88\u660e\u663e\uff0c\u4e00\u79cd\u5f62\u5f0f\u7684\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u53ef\u4ee5\u663e\u8457\u7b80\u5316\u7f16\u7a0b\u5e76\u89e3\u51b3\u66f4\u5173\u952e\u7684\u5185\u5b58\u4fdd\u62a4\u95ee\u9898\u3002\u6700\u7ec8\uff0c\u4ed6\u4eec\u63d0\u51fa\u4e86\u4eca\u5929\u6240\u719f\u77e5\u7684\u865a\u62df\u5185\u5b58\u3002\n\u5728\u865a\u62df\u5185\u5b58\u4e2d\uff0c\u7a0b\u5e8f\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7269\u7406RAM\u3002\u76f8\u53cd\uff0c\u5b83\u4e0e\u79f0\u4e3a\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u865a\u5e7b\u5730\u5740\u7a7a\u95f4\u4ea4\u4e92\u3002\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u5904\u7406\u5668\u534f\u540c\u5de5\u4f5c\uff0c\u4ee5\u63d0\u4f9b\u8fd9\u6837\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u8fdf\u65e9\u5c06\u5176\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002\n\u6bcf\u6b21\u5185\u5b58\u8bbf\u95ee\u90fd\u662f\u901a\u8fc7\u865a\u62df\u5730\u5740\u6267\u884c\u7684\uff0c\u8be5\u865a\u62df\u5730\u5740\u5e76\u4e0d\u6307\u5411\u5185\u5b58\u4e2d\u7684\u5b9e\u9645\u7269\u7406\u4f4d\u7f6e\u3002\u7a0b\u5e8f\u603b\u662f\u8bfb\u53d6\u6216\u5199\u5165\u865a\u62df\u5730\u5740\uff0c\u5e76\u4e14\u5b83\u5b8c\u5168\u4e0d\u77e5\u9053\u5e95\u5c42\u786c\u4ef6\u4e2d\u6b63\u5728\u53d1\u751f\u4ec0\u4e48\u3002\n\u5728\u4e0a\u56fe\u4e2d\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u865a\u62df\u5230\u7269\u7406\u8f6c\u6362\u7684\u5b9e\u9645\u793a\u4f8b\uff0c\u5b83\u63ed\u793a\u4e86\u865a\u62df\u5185\u5b58\u7684\u4e24\u4e2a\u4e3b\u8981\u4f18\u52bf\uff1a\n\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u6709\u4e00\u4e2a\u4ece0\u5f00\u59cb\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4-\u8fd9\u5927\u5927\u7b80\u5316\u4e86\u7a0b\u5e8f\u5458\u7684\u751f\u6d3b\uff1a\u4e0d\u518d\u9700\u8981\u624b\u52a8\u8ddf\u8e2a\u5185\u5b58\u504f\u79fb\u91cf\uff1b\n\u865a\u62df\u5185\u5b58\u59cb\u7ec8\u662f\u8fde\u7eed\u7684\uff0c\u5373\u4f7f\u5e95\u5c42\u7684\u7269\u7406\u5bf9\u5e94\u5185\u5b58\u4e0d\u662f\u8fd9\u6837\u7684-\u64cd\u4f5c\u7cfb\u7edf\u5c06\u628a\u53ef\u7528\u7684\u90e8\u5206\u6536\u96c6\u5230\u4e00\u4e2a\u7edf\u4e00\u7684\u865a\u62df\u5185\u5b58\u5757\u4e2d\uff0c\u8fd9\u662f\u4e00\u9879\u8270\u5de8\u7684\u5de5\u4f5c\u3002\n\u865a\u62df\u5185\u5b58\u673a\u5236\u8fd8\u89e3\u51b3\u4e86RAM\u6709\u9650\u7684\u95ee\u9898\uff1a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7ed9\u4eba\u4e00\u79cd\u4f7f\u7528\u672a\u5b9a\u4e49\u7684\u5185\u5b58\u91cf(\u901a\u5e38\u5927\u4e8e\u7269\u7406\u5185\u5b58\u91cf)\u7684\u5370\u8c61\u3002\u6b64\u5916\uff0c\u865a\u62df\u5185\u5b58\u4fdd\u8bc1\u4e86\u5b89\u5168\u6027\uff1a\u7a0b\u5e8fA\u4e0d\u80fd\u5728\u4e0d\u89e6\u53d1\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\u8bfb\u53d6\u6216\u5199\u5165\u5206\u914d\u7ed9\u7a0b\u5e8fB\u7684\u865a\u62df\u5185\u5b58\u3002\u5728\u4e0b\u9762\u7684\u6bb5\u843d\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u6240\u6709\u8fd9\u4e9b\u9b54\u672f\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\n\u865a\u62df\u5185\u5b58\u673a\u5236\u9700\u8981\u4e00\u4e2a\u4f4d\u7f6e\u6765\u5b58\u50a8\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u865a\u62df\u5730\u5740X\uff0c\u7cfb\u7edf\u5fc5\u987b\u80fd\u591f\u627e\u5230\u76f8\u5e94\u7684\u7269\u7406\u5730\u5740Y\u3002\u4f46\u662f\uff0c\u60a8\u4e0d\u80fd\u5c06\u8fd9\u6837\u7684\u4fe1\u606f\u4fdd\u5b58\u4e3a1\uff1a1\u5173\u7cfb\uff1a\u8fd9\u5c06\u9700\u8981\u4e00\u4e2a\u4e0e\u6574\u4e2aRAM\u4e00\u6837\u5927\u7684\u6570\u636e\u5e93\uff01\n\u73b0\u4ee3\u865a\u62df\u5185\u5b58\u5b9e\u73b0\u901a\u8fc7\u5c06\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u89e3\u91ca\u4e3a\u4e00\u957f\u4e32\u56fa\u5b9a\u5927\u5c0f\u7684\u5c0f\u5757\u6765\u89e3\u51b3\u6b64\u95ee\u9898(\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u95ee\u9898)\u3002\u865a\u62df\u5185\u5b58\u7684\u5757\u79f0\u4e3a\u9875\uff0c\u7269\u7406\u5185\u5b58\u7684\u5757\u79f0\u4e3a\u5e27\u3002\u5185\u5b58\u7ba1\u7406\u5355\u5143(MMU)\u662fCPU\u4e2d\u7684\u4e00\u4e2a\u786c\u4ef6\u7ec4\u4ef6\uff0c\u5b83\u5c06\u9875\u9762\u548c\u5e27\u4e4b\u95f4\u7684\u6620\u5c04\u4fe1\u606f\u5b58\u50a8\u5728\u79f0\u4e3a\u9875\u8868\u7684\u7279\u6b8a\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u9875\u8868\u7c7b\u4f3c\u4e8e\u6570\u636e\u5e93\u8868\uff0c\u5176\u4e2d\u6bcf\u884c\u90fd\u5305\u542b\u4e00\u4e2a\u9875\u7d22\u5f15\u53ca\u5176\u5bf9\u5e94\u7684\u5e27\u7d22\u5f15\u3002\u6bcf\u4e2a\u8fd0\u884c\u7684\u7a0b\u5e8f\u5728MMU\u4e2d\u90fd\u6709\u4e00\u4e2a\u9875\u8868\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\u8be5\u4fe1\u606f\u8db3\u4ee5\u8ba9MMU\u6267\u884c\u865a\u62df\u5230\u7269\u7406\u7684\u8f6c\u6362\u3002\u5f53\u7a0b\u5e8f\u8bfb\u53d6\u6216\u5199\u5165\u865a\u62df\u5730\u5740\u65f6\uff0c\u5b83\u4f1a\u5524\u9192MMU\uff0cMMU\u8fdb\u800c\u83b7\u53d6\u9875\u7d22\u5f15(1)\uff0c\u5e76\u5728\u7a0b\u5e8f\u7684\u9875\u8868\u4e2d\u641c\u7d22\u76f8\u5e94\u7684\u5e27\u3002\u4e00\u65e6\u627e\u5230\u5e27\uff0cMMU\u5c31\u5229\u7528\u5e27\u504f\u79fb\u91cf(2)\u627e\u5230\u786e\u5207\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u56de\u7a0b\u5e8f\u3002\u6b64\u65f6\u8f6c\u6362\u5b8c\u6210\uff1a\u7a0b\u5e8f\u5728RAM\u4e2d\u6709\u4e00\u4e2a\u7269\u7406\u5730\u5740\uff0c\u53ef\u4ee5\u901a\u8fc7\u865a\u62df\u5730\u5740\u8bfb\u53d6\u6216\u5199\u5165\u3002\n\u867d\u7136\u7a0b\u5e8f\u88ab\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ade\u4e89\u3001\u5e72\u51c0\u548c\u6574\u6d01\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u4f46\u662f\u64cd\u4f5c\u7cfb\u7edf\u548c\u786c\u4ef6\u90fd\u88ab\u5141\u8bb8\u5728\u540e\u53f0\u7528\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u6570\u636e\u505a\u75af\u72c2\u7684\u4e8b\u60c5\u3002\n\u4f8b\u5982\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7ecf\u5e38\u5ef6\u8fdf\u4ece\u786c\u76d8\u9a71\u52a8\u5668\u52a0\u8f7d\u7a0b\u5e8f\u90e8\u5206\uff0c\u76f4\u5230\u7a0b\u5e8f\u5c1d\u8bd5\u4f7f\u7528\u5b83\u3002\u67d0\u4e9b\u4ee3\u7801\u5c06\u4ec5\u5728\u521d\u59cb\u5316\u671f\u95f4\u6216\u53d1\u751f\u7279\u6b8a\u60c5\u51b5\u65f6\u8fd0\u884c\u3002\u7a0b\u5e8f\u7684\u9875\u8868\u53ef\u4ee5\u7528\u6307\u5411\u4e0d\u5b58\u5728\u6216\u5c1a\u672a\u5206\u914d\u7684\u5e27\u7684\u6761\u76ee\u6765\u586b\u5145\u3002\u4e0a\u9762\u7684\u56fe\u50cf3\u63cf\u8ff0\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u5176\u4e2d\u6700\u540e\u4e24\u9875\u6ca1\u6709\u6620\u5c04\u5230\u4efb\u4f55\u5730\u65b9\u3002\n\u8fd9\u6837\u7684\u6280\u5de7\u5bf9\u5e94\u7528\u7a0b\u5e8f\u662f\u5b8c\u5168\u900f\u660e\u7684\uff0c\u5b83\u4e00\u76f4\u5728\u8bfb\u5199\u81ea\u5df1\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u4e0d\u77e5\u9053\u80cc\u666f\u566a\u97f3\u3002\u7136\u800c\uff0c\u7a0b\u5e8f\u8fdf\u65e9\u4f1a\u60f3\u8981\u8bbf\u95ee\u4e00\u4e2a\u6ca1\u6709\u6620\u5c04\u5230RAM\u7684\u865a\u62df\u5730\u5740\uff1a\u600e\u4e48\u529e\uff1f\n\u5f53\u7a0b\u5e8f\u8bbf\u95ee\u5f53\u524d\u672a\u6620\u5c04\u5230\u7269\u7406\u5e27\u7684\u9875\u4e0a\u7684\u865a\u62df\u5730\u5740\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u9875\u9519\u8bef(\u4e5f\u79f0\u4e3a\u9875\u672a\u547d\u4e2d)\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5f53\u9875\u9762\u5b58\u5728\u4e8e\u7a0b\u5e8f\u7684\u9875\u8868\u4e2d\uff0c\u4f46\u6307\u5411\u7269\u7406\u5185\u5b58\u4e2d\u4e0d\u5b58\u5728\u6216\u5c1a\u4e0d\u53ef\u7528\u7684\u5e27\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u9875\u9762\u9519\u8bef\u3002\nMMU\u68c0\u6d4b\u5230\u9875\u9762\u9519\u8bef\uff0c\u5e76\u5c06\u6d88\u606f\u91cd\u5b9a\u5411\u5230\u64cd\u4f5c\u7cfb\u7edf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5c3d\u5176\u6240\u80fd\u5728\u7269\u7406\u5b58\u50a8\u5668\u4e2d\u67e5\u627e\u7528\u4e8e\u6620\u5c04\u7684\u5e27\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u9664\u975e\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u3002\n\u5206\u9875\u662f\u53e6\u4e00\u4e2a\u5185\u5b58\u7ba1\u7406\u6280\u5de7\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5c06\u4e00\u4e9b\u9875\u9762\u79fb\u52a8\u5230\u786c\u76d8\u9a71\u52a8\u5668\uff0c\u4ee5\u4fbf\u5728\u6ca1\u6709\u66f4\u591a\u7269\u7406\u5185\u5b58\u53ef\u7528\u65f6\u4e3a\u5176\u4ed6\u7a0b\u5e8f\u6216\u6570\u636e\u817e\u51fa\u7a7a\u95f4\u3002\u6709\u65f6\u5b83\u4e5f\u88ab\u79f0\u4e3a\u4ea4\u6362\uff0c\u5c3d\u7ba1\u4e0d\u662f\u767e\u5206\u4e4b\u767e\u6b63\u786e\u3002\u4ea4\u6362\u5c31\u662f\u5c06\u6574\u4e2a\u8fc7\u7a0b\u79fb\u52a8\u5230\u78c1\u76d8\u3002\u6709\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u5728\u9700\u8981\u65f6\u4e5f\u4f1a\u8fd9\u6837\u505a\u3002\n\u5206\u9875\u7ed9\u7a0b\u5e8f\u4ee5\u65e0\u9650\u53ef\u7528RAM\u7684\u9519\u89c9\u3002\u64cd\u4f5c\u7cfb\u7edf\u4e50\u89c2\u5730\u5141\u8bb8\u865a\u62df\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u5927\u4e8e\u7269\u7406\u5185\u5b58\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5b83\u77e5\u9053\u5728\u9700\u8981\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5c06\u6570\u636e\u79fb\u5165\u548c\u79fb\u51fa\u786c\u76d8\u9a71\u52a8\u5668\u3002\u67d0\u4e9b\u7cfb\u7edf(\u4f8b\u5982Windows)\u4e3a\u6b64\u4f7f\u7528\u79f0\u4e3a\u5206\u9875\u6587\u4ef6\u7684\u7279\u6b8a\u6587\u4ef6\u3002\u5176\u4ed6\u7684(\u4f8b\u5982Linux)\u6709\u4e00\u4e2a\u79f0\u4e3a\u4ea4\u6362\u533a\u7684\u4e13\u7528\u786c\u76d8\u5206\u533a(\u4e0d\u8fc7\uff0c\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c\u73b0\u4ee3Linux\u6267\u884c\u5206\u9875\u800c\u4e0d\u662f\u4ea4\u6362)\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u786c\u76d8\u6bd4\u4e3b\u5b58\u50a8\u5668\u6162\u5f97\u591a\u3002\u56e0\u6b64\uff0c\u5f53\u53d1\u751f\u9875\u9762\u9519\u8bef\u5e76\u4e14\u9875\u9762\u4e34\u65f6\u79fb\u52a8\u5230\u786c\u76d8\u9a71\u52a8\u5668\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u4ece\u8fd0\u884c\u7f13\u6162\u7684\u4ecb\u8d28\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u79fb\u56de\u5185\u5b58\uff0c\u4ece\u800c\u5bfc\u81f4\u5ef6\u8fdf\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u8f83\u5c11\u7684\u5206\u9875\u610f\u5473\u7740\u7cfb\u7edf\u7684\u8fd0\u884c\u6548\u7387\u66f4\u9ad8\u3002\n\u5f53\u7cfb\u7edf\u5728\u5206\u9875\u4e0a\u82b1\u8d39\u7684\u65f6\u95f4\u6bd4\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u65f6\u95f4\u66f4\u591a\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u6296\u52a8\uff0c\u8fd9\u662f\u7531\u6301\u7eed\u7684\u9875\u9762\u9519\u8bef\u6d41\u89e6\u53d1\u7684\u3002\u5982\u679c\u60a8\u8fd0\u884c\u7684\u7a0b\u5e8f\u592a\u591a\uff0c\u586b\u6ee1\u4e86\u6574\u4e2aRAM\u548c/\u6216\u786c\u76d8\u4e0a\u7684\u5206\u9875\u533a\u57df\u672a\u4f18\u5316\uff0c\u5219\u4f1a\u51fa\u73b0\u8fd9\u79cd\u6781\u7aef\u60c5\u51b5\u3002\u64cd\u4f5c\u7cfb\u7edf\u8bd5\u56fe\u8ddf\u4e0a\u5927\u91cf\u7684\u9875\u9762\u9519\u8bef\u8bf7\u6c42\uff0c\u4e0d\u65ad\u5730\u5728\u786c\u76d8\u548c\u7269\u7406\u5185\u5b58\u4e4b\u95f4\u79fb\u52a8\u6570\u636e\uff0c\u4f7f\u7cfb\u7edf\u9677\u5165\u505c\u987f\u3002\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0RAM\u5bb9\u91cf\u3001\u51cf\u5c11\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u6570\u91cf\u6216\u901a\u8fc7\u8c03\u6574\u4ea4\u6362\u6587\u4ef6\u7684\u5927\u5c0f\u6765\u907f\u514d\u6296\u52a8\u3002\n\u865a\u62df\u5185\u5b58\u8fd8\u4e3a\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5b89\u5168\u6027\uff1a\u60a8\u7684\u6d4f\u89c8\u5668\u53ef\u4ee5\u7aa5\u63a2\u6587\u672c\u7f16\u8f91\u5668\u7684\u865a\u62df\u5185\u5b58\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u800c\u4e0d\u4f1a\u89e6\u53d1\u9519\u8bef\u3002\u5185\u5b58\u4fdd\u62a4\u7684\u4e3b\u8981\u76ee\u7684\u662f\u9632\u6b62\u8fdb\u7a0b\u8bbf\u95ee\u4e0d\u5c5e\u4e8e\u5b83\u7684\u5185\u5b58\u3002\n\u5185\u5b58\u4fdd\u62a4\u673a\u5236\u901a\u5e38\u7531MMU\u53ca\u5176\u7ba1\u7406\u7684\u9875\u8868\u63d0\u4f9b\uff0c\u800c\u5176\u4ed6\u4f53\u7cfb\u7ed3\u6784\u53ef\u80fd\u4f7f\u7528\u4e0d\u540c\u7684\u786c\u4ef6\u7b56\u7565\u3002\u5f53\u7a0b\u5e8f\u8bd5\u56fe\u8bbf\u95ee\u5b83\u4e0d\u62e5\u6709\u7684\u865a\u62df\u5185\u5b58\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u4f1a\u89e6\u53d1\u65e0\u6548\u9875\u9762\u9519\u8bef\u3002MMU\u548c\u64cd\u4f5c\u7cfb\u7edf\u6355\u83b7\u4fe1\u53f7\u5e76\u5f15\u53d1\u79f0\u4e3a\u5206\u6bb5\u6545\u969c(\u5728Unix\u4e0a)\u6216\u8bbf\u95ee\u51b2\u7a81(\u5728Windows\u4e0a)\u7684\u6545\u969c\u6761\u4ef6\u3002\u4f5c\u4e3a\u54cd\u5e94\uff0c\u64cd\u4f5c\u7cfb\u7edf\u901a\u5e38\u4f1a\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\u5206\u6bb5\u6545\u969c\u548c\u8bbf\u95ee\u51b2\u7a81\u4e5f\u7ecf\u5e38\u88ab\u9519\u8bef\u5730\u5f15\u53d1\u3002\u6267\u884c\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u7f16\u7a0b\u8bed\u8a00\u4f7f\u60a8\u80fd\u591f\u7559\u51fa\u4e00\u90e8\u5206\u5185\u5b58\u7528\u4e8e\u5b58\u50a8\u7a0b\u5e8f\u6570\u636e\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5c06\u4e3a\u60a8\u63d0\u4f9b\u5927\u91cf\u7a7a\u95f2\u5185\u5b58(\u4e5f\u79f0\u4e3a\u3002\u7f13\u51b2\u533a)\u6839\u636e\u7a0b\u5e8f\u7684\u9700\u8981\u8fdb\u884c\u8bfb\u5199\u3002\u4f46\u662f\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u963b\u6b62\u60a8\u5728\u7f13\u51b2\u533a\u8fb9\u754c\u4e4b\u5916\u8bfb\u53d6\u6216\u5199\u5165\uff0c\u4ece\u800c\u8bbf\u95ee\u4e0d\u5c5e\u4e8e\u60a8\u7684\u7a0b\u5e8f\u6216\u6839\u672c\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u3002\u64cd\u4f5c\u7cfb\u7edf\u5c06\u68c0\u6d4b\u5230\u975e\u6cd5\u8bbf\u95ee\u5e76\u53d1\u51fa\u901a\u5e38\u7684\u8fdd\u89c4\u4fe1\u53f7\u3002\n\u865a\u62df\u5185\u5b58\u4e3a\u8bb8\u591a\u5176\u4ed6\u6709\u8da3\u7684\u4e3b\u9898\u94fa\u5e73\u4e86\u9053\u8def\u3002\u4f8b\u5982\uff0c\u4e0e\u4f20\u7edf\u7684\u8bfb\u5199\u6587\u4ef6\u65b9\u5f0f\u76f8\u6bd4\uff0c\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u62bd\u8c61\u3002\u5185\u5b58\u6620\u5c04\u5141\u8bb8\u7a0b\u5e8f\u76f4\u63a5\u4ece\u786c\u76d8\u9a71\u52a8\u5668\u8bbf\u95ee\u6587\u4ef6\uff0c\u5c31\u50cf\u5b83\u5df2\u7ecf\u5b8c\u5168\u52a0\u8f7d\u5230RAM\u4e2d\u4e00\u6837\uff0c\u800c\u4e0d\u662f\u624b\u52a8\u5c06\u6570\u636e\u590d\u5236\u5230\u5185\u5b58\u4e2d\u4ee5\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002\u5fc5\u8981\u65f6\uff0c\u865a\u62df\u5185\u5b58\u673a\u5236\u5c06\u7167\u5e38\u8d1f\u8d23\u5c06\u6570\u636e\u4ece\u786c\u76d8\u79fb\u52a8\u5230RAM\u3002\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u7b80\u5316\u4e86\u7a0b\u5e8f\u5458\u7684\u5de5\u4f5c\uff0c\u901a\u5e38\u4f1a\u52a0\u5feb\u6587\u4ef6\u8bbf\u95ee\u64cd\u4f5c\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u70b9\u51fb\u6b64\u5904\u3002\n\u865a\u62df\u5185\u5b58\u4e5f\u4f7f\u5f97\u5bf9\u5185\u5b58\u6d88\u8017\u8fdb\u884c\u63a8\u7406\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u5047\u8bbe\u60a8\u7684\u67d0\u4e2a\u7a0b\u5e8f\u5360\u7528300\u5146\u5b57\u8282\u7684\u5185\u5b58\uff1a\u5b83\u662f\u865a\u62df\u7684\u8fd8\u662f\u7269\u7406\u7684\uff1f\u8be5\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\u662f\u5426\u5df2\u5206\u9875\u5230\u78c1\u76d8\uff1f\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u4f20\u547c\u64cd\u4f5c\u662f\u5426\u8db3\u591f\u5feb\u5462\uff1f\u6b64\u5916\uff0c\u5982\u679c\u60a8\u60f3\u8ba9\u7cfb\u7edf\u4fdd\u6301\u826f\u597d\u72b6\u6001\uff0c\u8c03\u4f18\u5206\u9875\u6587\u4ef6/\u4ea4\u6362\u533a\u57df\u4e5f\u662f\u91cd\u8981\u7684\u4e00\u6b65\u3002\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\u6765\u6d4b\u91cf\u548c\u8c03\u6574\u5185\u5b58\uff1a\u66f4\u591a\u4fe1\u606f\u8bf7\u5355\u51fb\u6b64\u5904\u548c\u6b64\u5904\u3002\n\u8ba1\u7b97\u673a\u5e0c\u671b-\u8bb0\u5fc6\u5f7c\u5f97\u00b7J\u00b7\u4e39\u5b81-\u5728\u5185\u5b58\u6210\u4e3a\u865a\u62df\u5b89\u5353\u6743\u5a01\u4e4b\u524d-\u4ec0\u4e48\u662f\u865a\u62df\u5185\u5b58\uff1fKernel.org-\u5185\u5b58\u7ba1\u7406\u64cd\u4f5c\u7cfb\u7edf\uff1a\u4e09\u4e2a\u7b80\u5355\u7684\u90e8\u5206-\u7b2c18\u7ae0\uff1a\u5206\u9875Philippe\u7684Opmann-\u81ea\u4e0b\u800c\u4e0a\u7684\u5206\u9875\u8ba1\u7b97\u673a\u79d1\u5b66\u5165\u95e8-\u7b2c6\u7ae0\uff1a\u865a\u62df\u5185\u5b58John T.Bell\u535a\u58eb-\u64cd\u4f5c\u7cfb\u7edf\uff0c\u865a\u62df\u5185\u5b58\u5806\u6808\u6ea2\u51fa-\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u662f\u5426\u4f7f\u7528\u5206\u9875\u548c\u5206\u6bb5\uff1fStackOverflow-\u4ec0\u4e48\u662f\u62bd\u6253\uff1f\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\u7ef4\u57fa\u767e\u79d1-\u5185\u5b58\u5730\u5740\u7ef4\u57fa\u767e\u79d1-\u5206\u9875\u7ef4\u57fa\u767e\u79d1-\u5730\u5740\u7a7a\u95f4\u7ef4\u57fa\u767e\u79d1-\u865a\u62df\u5185\u5b58\u7ef4\u57fa\u767e\u79d1-\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7ef4\u57fa\u767e\u79d1-\u98a0\u8986\u7ef4\u57fa\u767e\u79d1-\u5206\u6bb5\u6545\u969cITPro Today-\u5206\u9875\u6027\u80fdAleph One-\u4e3a\u4e86\u4e50\u8da3\u548c\u5229\u6da6\u7c89\u788e\u5806\u6808\u3002\n\u975e\u5e38\u597d\u7684\u865a\u62df\u5185\u5b58101\u3002\u4e00\u4e9b\u57fa\u672c\u9762\u662f\u503c\u5f97\u4e86\u89e3\u7684\uff0c\u5c3d\u7ba1\u5b83\u4eec\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5728\u5e55\u540e\u53d1\u751f\uff0c\u5e76\u81ea\u6211\u7ba1\u7406\u3002", "note_en": "Computers are complex machines designed to perform a simple task: to run programs \u2014 browsers, text editors, web servers, video games, ... \u2014 that operate on data \u2014 photos, music, text files, databases and so on.\n When not in use, such programs and data live peacefully in the  hard drive, the device responsible for keeping information alive even if your computer is turned off. Running an application means to ask the  processor (a.k.a. Central Processing Unit or CPU) to read and execute the machine instructions that make up the computer program, along with any additional data processing.\n Hard drives store huge amount of information, yet they are terribly  slow. Way slower than the processor: a CPU that reads instructions from a hard drive directly would become a serious bottleneck for the whole system. For this reason, the program and its data are first copied to the  main memory (a.k.a. Random Access Memory or RAM), another storage hardware component smaller than a hard drive but much faster, so that the processor can read instructions from there without speed penalties.\n The main memory can be seen as a long list of  cells, each one containing some binary data and marked with a number called the  memory address. Memory addresses span from 0 to N, based on the amount of main memory available in the system. The range of addresses used by a program is called the  address space.\n   In the beginning of the computer history (and also nowadays in  embedded systems), programs had access to the  entire main memory and its management was left to the programmer. Writing software for those machines was challenging: part of the developer&#39;s job was to devise a good way to manage RAM accesses and make sure that the whole program would not overflow the available memory.\n Things got trickier with the advent of  multitasking, when multiple programs could run on the same computer. Programmers had to face new critical issues:\n memory layout \u2014 programs located in RAM after the first one would have their address space offset by a certain amount, no longer in the initial range 0 to N. An additional pain point to take care of during development;\n memory fragmentation \u2014 as things are moved back and forth to memory, the available space becomes fragmented into smaller and smaller chunks. This would make it harder to find available space to load new programs and data in memory;\n security \u2014 what if program A accidentally overwrites program B&#39;s memory? Or, even worse: what if it deliberately reads sensitive data from another program, such as passwords or credit card information?\n So it was pretty obvious to hardware architects in the early 1960s that a form of automatic memory management could significantly simplify programming and fix the more critical memory protection problem. Eventually they came up with what is known today as  virtual memory.\n  In virtual memory, a program does not have direct access to physical RAM. Instead, it interacts with an  illusory address space called  virtual address space. The operating system works together with the processor to provide such virtual address space and convert it, sooner or later, into the physical one.\n Every memory access is performed through a  virtual address that does not refer to the actual physical location in memory. A program always reads or write the virtual address, and it&#39;s completely unaware of what is going on in the underlying hardware.\n   In the picture above you can see an example of virtual to physical translation in action, which reveals two main benefits of the virtual memory:\n each program has a virtual address space that starts from 0 \u2014 this simplifies a lot the programmer&#39;s life: no need to manually keep track of memory offsets anymore;\n virtual memory is always contiguous, even if the underlying physical counterpart isn&#39;t \u2014 the operating system does the hard job of gathering the available pieces together into a single, uniform virtual memory chunk.\n The virtual memory mechanism also solves the problem of a limited RAM: every process is given the impression that it is working with an undefined amount of memory, often larger than the physical one. Moreover, the virtual memory guarantees  security: program A can&#39;t read or write virtual memory assigned to program B without triggering an operating system error. We will see how all of this magic is possible in the following paragraphs.\n   The virtual memory mechanism needs a place to store the mapping between virtual and physical addresses. That is, given a virtual address X, the system must be able to find the corresponding physical address Y. However, you can&#39;t save such information as a 1:1 relationship: it would require a database as big as the whole RAM!\n Modern virtual memory implementations overcome this problem (and many others) by interpreting the virtual and the physical memory as a long list of small, fixed-size chunks. The chunks of the virtual memory are called  pages and the chunks of the physical one are called  frames. The  Memory Management Unit (MMU) is a hardware component in the CPU that stores the mapping information between pages and frames inside a special data structure called  page table. A page table is like a database table where each row contains a page index and the frame index it corresponds to. Every running program has a page table in the MMU, as you can see in the picture below.\n     This information is enough for the MMU to perform the virtual to physical conversion. When a program reads or write a virtual address, it wakes up the MMU which in turn grabs the page index (1) and searches for the corresponding frame in the program&#39;s page table. Once the frame is found, the MMU makes use of the frame offset (2) to find the exact physical memory address and pass it back to the program. At this point the conversion is done: the program has a physical address in RAM to read or write through the virtual one.\n  While programs are provided with a continguous, clean and tidy virtual address space, both the operating system and the hardware are allowed to do crazy things in the background with data residing in the physical memory.\n For example, the operating system often delays loading parts of a program from the hard drive until the program attempts to use it. Some of the code will only be run during initialization or when a special condition occurs. A program&#39;s page table may be filled with entries that point to non-existing or not yet allocated frames. This case is depicted by the image 3. above, where the last two pages map to nowhere.\n Tricks like this one are completely transparent to the application, which keeps reading and writing its own virtual address space unaware of the background noise. However, sooner or later the program may want to access one of the virtual addresses that don&#39;t map to the RAM: what to do?\n  A  page fault (also known as  page miss) occurs when a program accesses a virtual address on a page not currently mapped to a physical frame. More specifically, a page fault takes place when the page exists in the program&#39;s page table but points to a non-existent or not yet available frame in the physical memory.\n The MMU detects the page fault and redirects the message to the operating system, which will do its best to find a frame in the physical memory for the mapping. Most of the time this is a straightforward operation, unless the system is running out of RAM.\n  Paging is another memory management trick: the operating system moves  some pages to the hard drive, to make room for other programs or data when there is no more physical memory available. Sometimes it is also called  swapping, although not 100% correct. Swapping is about moving the  entire process to disk. Some operating systems do this too, when needed.\n Paging gives programs the illusion of an unlimited amount of available RAM. The operating system optimistically allows for a virtual memory address space larger than the physical one, knowing that data can be moved in and out the hard drive in case of need. Some systems (e.g. Windows) make use of a special file called  paging file for this purpose. Others (e.g. Linux) have a dedicated hard drive partition called  swap area (for historical reasons though, modern Linux performs paging instead of swapping).\n Unfortunately the hard drive is way slower than the main memory. So when a page fault occurs  and the page was temporarily moved to the hard drive, the operating system has to read data from the sluggish medium and move it back to memory, causing a lag. All in all, less paging means a system that runs more efficiently.\n  Thrashing occurs when the system spends more time in paging than running applications, triggered by a constant stream of page faults. This is an extreme corner case that happens if you are running too many programs that fill up the entire RAM and/or the paging area on the hard drive is unoptimized. The operating system tries to keep up with the large amount of page fault requests, constantly moving data between the hard drive and the physical memory, grinding the system to a halt. Thrashing can be avoided by increasing the amount of RAM, reducing the number of programs being run or again by adjusting the size of the swap file.\n   Virtual memory also provides  security across running applications: your browser can&#39;t peep into your text editor&#39;s virtual memory and vice versa without triggering an error. The main purpose of memory protection is to prevent a process from accessing memory that doesn&#39;t belong to it.\n The memory protection mechanism is usually provided by the MMU and the page tables it manages, while other architectures may use different hardware strategies. When a program tries to access a portion of virtual memory it doesn&#39;t own, an  invalid page fault is triggered. The MMU and the operating system catch the signal and raise a failure condition called  segmentation fault (on Unix) or  access violation (on Windows). The operating system usually kills the program in response.\n Segmentation faults and access violations are also often raised by mistake. Programming languages that perform manual memory management give you the ability to set aside portions of memory to be used to store program data: the operating system will provide you with a nice chunk of free memory (a.k.a. a  buffer) to read and write according to your program&#39;s needs. However, nothing prevents you to read or write outside the buffer boundaries, accessing memory that doesn&#39;t belong to your program or simply doesn&#39;t exist. The operating system would detect the illegal access and raise the usual violation signal.\n  Virtual memory paves the road for many other interesting topics. For example,   memory-mapped files are a powerful abstraction over the traditional way of reading and writing files. Instead of manually copying data into memory in order to operate on it, memory mapping allows a program to access a file directly from the hard drive as if it was already fully loaded in RAM. The virtual memory mechanism will take care of moving data from the hard drive to RAM as usual, when necessary. Memory-mapped files simplify the programmer&#39;s work and usually speed up file access operations. More information  here.\n Virtual memory also makes more difficult to reason about memory consumption. Suppose one of your programs is taking up 300 megabytes of memory: is it virtual or physical? Is part of that space paged to disk? And if it is, will the paging operations be fast enough? Also, tuning the paging file/swap area is an important step if you want to keep your system in a good shape. Operating systems provide many tools to measure and adjust memory: more information  here and  here.\n  Computer Hope \u2014  Memory Peter J. Denning \u2014  Before memory was virtual Android Authority \u2014  What is virtual memory? Kernel.org \u2014  Memory Management Operating Systems: Three Easy Pieces \u2014  Chapter 18: Paging Philippe&#39;s Oppermann \u2014  Introduction to Paging Computer Science from the Bottom Up \u2014  Chapter 6. Virtual Memory Dr. John T. Bell \u2014  Operating systems, Virtual Memory StackOverflow \u2014  Do modern OS&#39;s use paging and segmentation? StackOverflow \u2014  What is thrashing? Why does it occur? Wikipedia \u2014  Memory address Wikipedia \u2014  Paging Wikipedia \u2014  Address space Wikipedia \u2014  Virtual memory Wikipedia \u2014  Virtual address space Wikipedia \u2014  Thrashing Wikipedia \u2014  Segmentation fault ITPro Today \u2014  Paging Performance Aleph One \u2014  Smashing The Stack For Fun And Profit\n      Very good 101 on Virtual Memory. Some fundamentals are worthy to know, although they have been happening behind the scene and self-managed for decades.", "posttime": "2020-05-07 19:55:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5b58,\u865a\u62df\u5185\u5b58,virtual", "title": "\u865a\u62df\u5185\u5b58\u7b80\u4ecb", "title_en": "An introduction to virtual memory", "transed": 1, "url": "https://www.internalpointers.com/post/introduction-virtual-memory", "via": "", "real_tags": ["\u5185\u5b58", "\u865a\u62df\u5185\u5b58", "virtual"]}, {"category": "", "categoryclass": "", "imagename": "9dbd425a36a6d7391053f207d124ef95.png", "infoid": 1001049, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u4e2a\u5468\u672b\u524d\uff0c\u6211\u5f00\u59cb\u4e86\u6211\u6240\u8c13\u7684\u201c\u9ec4\u6cb9\u9762\u5305\u201d\u65c5\u6e38\u5b63\u8282\u3002\u6211\u6709\u4e24\u573a\u6f14\u51fa\uff0c\u4e00\u573a\u5728\u957f\u5c9b\uff0c\u53e6\u4e00\u573a\u5728\u7ebd\u7ea6\u5dde\u7684\u8428\u62c9\u6258\u52a0\u3002\u6211\u611f\u5192\u5f97\u5389\u5bb3\uff0c\u4f46\u633a\u8fc7\u6765\u4e86\uff0c\u56de\u5bb6\u67e5\u770b\u4e86\u51e0\u5929\u7684\u7535\u5b50\u90ae\u4ef6\u3002\n\u8d77\u521d\u6211\u4e0d\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u3002\u5f53\u6211\u8bbf\u95ee\u6211\u7684\u8d26\u6237\u65f6\uff0c\u6211\u4e0d\u65ad\u5730\u5728\u7535\u8111\u4e0a\u770b\u5230\u81ea\u5df1\u7684\u8138\u5728\u5411\u6211\u95ea\u70c1\uff0c\u5939\u5728\u73af\u7403\u5f71\u57ce\u706b\u707e\u7684\u7167\u7247\u548c\u5176\u4ed6\u4e00\u4e9b\u65b0\u95fb\u4e4b\u95f4\u3002\u4f46\u4e0d\u662f\u73b0\u5728\u7248\u672c\u7684\u6211\u7684\u8138-1990\u5e74\u524d\u7684\u8138\u3002\n\u6211\u60f3\u77e5\u9053\u6211\u7684\u7f8e\u56fd\u5728\u7ebf\u7684\u7167\u7247\u978b\u76d2\u662f\u4e0d\u662f\u7206\u5f00\u4e86\uff0c\u4e0d\u77e5\u4f55\u6545\u5728\u7f51\u4e0a\u4ee5\u516c\u5f00\u7684\u65b9\u5f0f\u6cc4\u9732\u4e86\u3002\u7136\u540e\u6211\u8bfb\u4e86\u8fd9\u7bc7\u6587\u7ae0\uff0c\u5185\u5bb9\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\u201c\u5979\u7684\u7b2c\u4e00\u9996\u70ed\u95e8\u6b4c\u66f2\u201d\u5362\u5361\u201c(Luka)\u5c06\u8650\u5f85\u513f\u7ae5\u7684\u8bdd\u9898\u5e26\u5165\u4e86\u524d40\u540d\u3002\u4f46\u662f\u5979\u7684\u53e6\u4e00\u4e2a\u662f\u4ec0\u4e48\u5462\uff1f\u63d0\u793a\uff1a\u6717\u6717\u4e0a\u53e3\uff01\u201c\u3002\n\u6211\u76ef\u7740\u5c4f\u5e55\u770b\u4e86\u51e0\u5206\u949f\uff0c\u56e0\u4e3a\u5b83\u6bcf\u9694\u51e0\u79d2\u949f\u5c31\u4f1a\u4ece\u6211\u7684\u8138\u53d8\u6210\u73af\u7403\u7684\u706b\uff0c\u518d\u5230\u53e6\u4e00\u5f20\u7167\u7247\u3002\u6211\u4e08\u592b\u4fdd\u7f57\u8ddf\u5728\u6211\u540e\u9762\u3002\n\u201c\u70b9\u51fb\u5427\uff01\u201d\u4ed6\u8bf4\u3002\u6211\u8fd9\u6837\u505a\u4e86\uff0c\u5e76\u8bfb\u5230\u4e86\u4e0b\u9762\u7684\u5185\u5bb9\uff1a\u201c\u8fd9\u4f4d\u7ebd\u7ea6\u4eba\u5173\u4e8e\u4e00\u4e2a\u88ab\u8650\u5f85\u513f\u7ae5\u7684\u8f9b\u9178\u6545\u4e8b\u7ed9\u6d41\u884c\u97f3\u4e50\u6392\u884c\u699c\u7684\u9ad8\u7aef\u5e26\u6765\u4e86\u4e00\u5242\u793e\u4f1a\u610f\u8bc6\u3002\u7ef4\u5609\u7b2c\u4e8c\u6b21\u4e5f\u662f\u6700\u540e\u4e00\u6b21\u767b\u4e0a\u6392\u884c\u699c\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u4e00\u9996\u4e09\u5e74\u524d\u7684\u6b4c\u66f2\u7684\u6700\u521d\u672a\u7ecf\u6388\u6743\u7684\u6df7\u97f3\uff0c\u8fd9\u9996\u6b4c\u662f\u5173\u4e8e\u5979\u6700\u559c\u6b22\u7684\u66fc\u54c8\u987f\u6cb9\u52fa\u9910\u5385\u7684\uff0c\u8fd9\u4e2a\u5730\u65b9\u5f88\u5feb\u5c31\u4f1a\u56e0\u4e3a\u51fa\u73b0\u5728\u300a\u5b8b\u98de\u6b63\u4f20\u300b(Seinfeld)\u4e2d\u800c\u53d8\u5f97\u66f4\u52a0\u51fa\u540d\u3002\n\u201c\u4ec0\u4e48\uff1f\u201d\u6211\u8bf4\u4e86\u3002\u201c\u6211\u89c9\u5f97\u633a\u4e0d\u9519\u7684\u3002\u201d\u6211\u9519\u8fc7\u4e86\u6807\u9898\uff0c\u6807\u9898\u662f\uff1a\u201c\u4e24\u4e2a\u5947\u8ff9\uff01\u201d\n\u8fd9\u662f\u4e00\u4e2a\u6211\u6700\u8fd1\u7ecf\u5e38\u51fa\u73b0\u7684\u540d\u5355\uff0c\u6240\u4ee5\u6211\u51e0\u4e4e\u5df2\u7ecf\u4e60\u60ef\u4e86\u3002\u5f53\u7136\uff0c\u4ed6\u662f\u5bf9\u7684\uff0c\u8fd9\u662f\u5728\u8d2c\u4f4e\u6211-\u8fd9\u8ba9\u6211\u770b\u8d77\u6765\u597d\u50cf\u4e0d\u77e5\u4f55\u6545\u6210\u529f\u5730\u5c16\u53eb\u51fa\u4e86\u90a3\u4e24\u9996\u6b4c\uff0c\u7136\u540e\u62d6\u7740\u811a\u6b65\u56de\u5230\u4e86\u63a5\u5f85\u5458\u7684\u5c97\u4f4d\u4e0a\uff0c\u8fd9\u4e0d\u662f\u771f\u7684\u3002\n\u6211\u66f4\u613f\u610f\u770b\u5230\u7684\u662f\uff0c\u6211\u670920\u591a\u5e74\u7684\u804c\u4e1a\u751f\u6daf\uff0c\u6709\u4e00\u5927\u5806\u5f88\u591a\u4eba\u77e5\u9053\u5e76\u60f3\u542c\u7684\u6b4c\u66f2\uff0c\u662f\u7684\uff0c\u5176\u4e2d\u4e24\u9996\u662f\u524d40\u540d\u7684\u70ed\u95e8\u6b4c\u66f2\u3002\u6709\u4ec0\u4e48\u597d\u62b1\u6028\u7684\uff1f\u5b83\u4eec\u5c31\u50cf\u5723\u4ee3\u4e0a\u9762\u7684\u6a31\u6843\u3002\u6211\u4e3a\u4ec0\u4e48\u4e0d\u60f3\u8981\u5462\uff1f\u4ed6\u4eec\u662f\u6211\u7684\u62a4\u7167\uff0c\u79bb\u5f00\u4e86\u6211\u5728\u529e\u516c\u5ba4\u7684\u751f\u6d3b\uff0c\u5230\u4e86\u6211\u53ef\u4ee5\u53bb\u97e9\u56fd\u7684\u8def\u4e0a\u7684\u751f\u6d3b\uff0c\u62a4\u7167\u76d6\u7ae0\u7684\u4eba\u8bf4\uff0c\u201c\u82cf\u73ca\uff0c\u4f60\u662f\u7ef4\u52a0\u5417\uff1f\u201d\u8fd9\u91cc\u7684\u6bcf\u4e2a\u4eba\u90fd\u8ba4\u8bc6\u4f60\u3002\u201c\u3002\u5f53\u4ed6\u8bfb\u5230\u6211\u7684\u540d\u5b57\u65f6\uff0c\u4ed6\u7684\u773c\u795e\u4f1a\u56e0\u6fc0\u52a8\u800c\u53d8\u5316\u3002\n\u6240\u4ee5\u6211\u62d2\u7edd\u4e3a\u8fd9\u4e9b\u70b9\u51fb\u91cf\u611f\u5230\u5c34\u5c2c\u3002\u5b83\u4e0d\u4f1a\u4ece\u5176\u4ed6\u6b4c\u66f2\u4e2d\u6d88\u5931\u3002\u4f46\u6211\u7ecf\u5e38\u5728\u60f3\uff0c\u201c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a\u4eba\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u662f\u5176\u4ed6\u4eba\u5462\uff1f\u201c\u3002\u8fd8\u6709\u5176\u4ed6\u6b4c\u66f2\u540c\u6837\u95ea\u4eae\u95ea\u4eae\uff0c\u5927\u8c03\u548c\u7535\u53f0\u53cb\u597d\uff0c\u5982\u201c\u68a6\u60f3\u4e4b\u4e66\u201d\u3001\u201c\u6ca1\u6709\u5ec9\u4ef7\u7684\u523a\u6fc0\u201d\u6216\u201c\u5f17\u5170\u514b\u548c\u827e\u5a03\u201d\u7b49\u7b49\u3002\u4f46\u6ca1\u6709\u4ec0\u4e48\u80fd\u50cf\u8fd9\u4e24\u4e2a\u4eba\u90a3\u6837\u957f\u5bff\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u3002\n\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u6211\u542c\u8fc7\u8fd9\u4e24\u9996\u6b4c\u90fd\u88ab\u63cf\u8ff0\u4e3a\u201c\u4fa5\u5e78\u201d\uff0c\u4f46\u6211\u771f\u7684\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\u3002\u4ed6\u4eec\u7684\u751f\u4ea7\u6295\u5165\u4e86\u5927\u91cf\u8270\u82e6\u7684\u5de5\u4f5c\uff0c\u7279\u522b\u662f\u5728\u5b89\u6392\u65b9\u9762\u3002\u4ee5\u201c\u5362\u5361\u201d\u4e3a\u4f8b\u3002\u6211\u4e00\u76f4\u5728\u542c\u5362\u00b7\u91cc\u5fb7\u7684\u201c\u67cf\u6797\u201d\u4e13\u8f91-\u5728\u90a3\u5f20\u5531\u7247\u91cc\uff0c\u4ed6\u5f39\u539f\u58f0\u5409\u4ed6\uff0c\u4e13\u8f91\u4e2d\u6709\u76f8\u5f53\u591a\u7684\u5185\u5bb9\u662f\u5173\u4e8e\u5305\u62ec\u5bb6\u5ead\u66b4\u529b\u5728\u5185\u7684\u5404\u79cd\u8650\u5f85\u884c\u4e3a\u7684\u3002\n\u5f53\u65f6\u6211\u6f14\u5531\u7684\u65f6\u5019\uff0c\u201c\u5362\u5361\u201d\u8fd8\u4e0d\u662f\u4e00\u9996\u6d41\u884c\u6b4c\u66f2\u3002\u6211\u4f1a\u5728\u821e\u53f0\u4e0a\u770b\u4eba\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5728\u601d\u8003\u6b4c\u8bcd\u65f6\u8138\u8272\u53d1\u751f\u4e86\u53d8\u5316\uff1b\u4ed6\u4eec\u4f1a\u76b1\u8d77\u7709\u5934\uff0c\u7136\u540e\u662f\u603b\u4f53\u4e0a\u4e0d\u9ad8\u5174\u7684\u8868\u60c5\uff0c\u7136\u540e\u662f\u76f4\u89c6\u5730\u677f\u7684\u6012\u5bb9\uff0c\u6700\u540e\u662f\u96f6\u661f\u7684\u52c9\u5f3a\u7684\u638c\u58f0\u3002\u7136\u540e\u662f\u5bf9\u5176\u4ed6\u4e1c\u897f\u7684\u8bf7\u6c42\uff0c\u901a\u5e38\u662f\u201c\u5409\u666e\u8d5b\u4eba\u201d\u6216\u5927\u8c03\u7684\u4e1c\u897f\uff0c\u4f34\u968f\u7740\u5408\u5531\u3002\n\u5f53\u65f6\u662f\u6211\u7684\u7ecf\u7eaa\u4eba\u7f57\u6069\u00b7\u8d39\u5c14\u65af\u5766(Ron Fierstein)\u62d4\u51fa\u4e86\u201c\u5362\u5361\u201d(Luka)\u3002\u201c\u8fd9\u9996\u6b4c\u662f\u4e0d\u662f\u8ddf\u6211\u60f3\u7684\u4e00\u6837\uff1f\u201d\u4e00\u5929\uff0c\u4ed6\u5728\u6c11\u4fd7\u57ce\u540e\u9762\u95ee\u9053\u3002\u6211\u5bf9\u90a3\u6b21\u8c08\u8bdd\u7684\u8bb0\u5fc6\u662f\u8fd9\u6837\u7684\uff1a\n\u201c\u6211\u4e0d\u77e5\u9053\uff0c\u201d\u6211\u8bf4\u3002\u201c\u4f60\u89c9\u5f97\u8fd9\u662f\u5173\u4e8e\u4ec0\u4e48\u7684\uff1f\u201d\n\u201c\u9664\u975e\u6211\u5f04\u9519\u4e86\uff0c\u5426\u5219\u8fd9\u4f3c\u4e4e\u662f\u4ece\u4e00\u4e2a\u88ab\u8650\u5f85\u7684\u513f\u7ae5\u7684\u89d2\u5ea6\u6765\u770b\u7684\u3002\u201d\n\u201c\u4e00\u4e2a\u4f4f\u5728\u6211\u697c\u91cc\u76849\u5c81\u7537\u5b69\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u4ed6\u6ca1\u6709\u88ab\u8650\u5f85\u3002\u6211\u559c\u6b22\u5362\u5361\u8fd9\u4e2a\u540d\u5b57\uff0c\u5b83\u662f\u4e16\u754c\u901a\u7528\u7684\u3002\u53ef\u80fd\u662f\u5973\u5b69\u4e5f\u53ef\u80fd\u662f\u7537\u5b69\uff0c\u4e5f\u53ef\u80fd\u662f\u4efb\u4f55\u56fd\u7c4d\u3002\u201c\u3002\n\u201c\u55ef\uff0c\u6211\u60f3\u90a3\u9996\u6b4c\u53ef\u80fd\u4f1a\u5927\u53d7\u6b22\u8fce\u3002\u201d\u4ed6\u8bf4\u3002\u6211\u5728\u8fd9\u91cc\u671d\u4ed6\u543c\u53eb\u3002\n\u201c\u4f60\u5728\u8bf4\u4ec0\u4e48\uff1f\u6ca1\u4eba\u60f3\u542c\u8650\u5f85\u513f\u7ae5\u7684\u4e8b\u3002\u6ca1\u4eba\u8981\u90a3\u9996\u6b4c\u3002\u4ed6\u4eec\u60f3\u8981\u201c\u5409\u666e\u8d5b\u4eba\u201d\u6216\u201c\u5973\u738b\u4e0e\u58eb\u5175\u201d\u3002\u201c\u3002\n\u201c\u8fd9\u662f\u4e00\u9996\u5173\u4e8e\u793e\u4f1a\u95ee\u9898\u7684\u6b4c\u3002\u5173\u4e8e\u793e\u4f1a\u95ee\u9898\u7684\u6b4c\u66f2\u5f88\u91cd\u8981\u3002\u6211\u4eec\u73b0\u5728\u6ca1\u6709\u8db3\u591f\u7684\u6570\u91cf\u4e86\u3002\u8fd9\u4e00\u4ee3\u4eba\u9700\u8981\u62e5\u6709\u66f4\u591a\u3002\u201c\u3002\u90a3\u662f\u57281985\u5e74\u3002\n\u201c\u6211\u5199\u8fd9\u672c\u4e66\u4e0d\u662f\u4e3a\u4e86\u5199\u4e00\u4e2a\u793e\u4f1a\u95ee\u9898--\u6211\u5199\u7684\u662f\u4e00\u5e45\u5c0f\u5c0f\u7684\u8096\u50cf\u753b\u3002\u6211\u8ba8\u538c\u5173\u4e8e\u793e\u4f1a\u95ee\u9898\u7684\u6b4c\u66f2\u3002\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u5b83\u4eec\u4e0d\u7ba1\u7528\u3002\u201c\u3002\n\u201c\u55ef\uff0c\u8fd9\u4ecd\u7136\u662f\u4e00\u9996\u5173\u4e8e\u793e\u4f1a\u95ee\u9898\u7684\u6b4c\u3002\u8fd9\u662f\u8650\u5f85\u513f\u7ae5\u7684\u95ee\u9898\uff0c\u4f60\u81ea\u5df1\u4e5f\u8bf4\u8fc7\u3002\u4f60\u600e\u4e48\u80fd\u8bf4\u5b83\u4eec\u4e0d\u8d77\u4f5c\u7528\u5462\uff1f\u6211\u4eec\u7528\u4e03\u5341\u5e74\u4ee3\u7684\u97f3\u4e50\u963b\u6b62\u4e86\u8d8a\u5357\u6218\u4e89\uff01\u201c\u3002\u4ed6\u5f00\u59cb\u5927\u558a\u5927\u53eb\uff0c\u8138\u988a\u901a\u7ea2\u3002\n\u5728\u90a3\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5e26\u6709\u793e\u4ea4\u4fe1\u606f\u7684\u6b4c\u66f2\u662f\u5426\u594f\u6548\u8fdb\u884c\u4e86\u534a\u4e2a\u5c0f\u65f6\u7684\u8fa9\u8bba-\u6211\u6301\u66f4\u4e3a\u6124\u4e16\u5ac9\u4fd7\u7684\u89c2\u70b9\uff0c\u5373\u5982\u679c\u5b83\u4eec\u771f\u7684\u594f\u6548\uff0c\u90a3\u4e48\u9c8d\u52c3\u00b7\u8fea\u4f26\u548c\u743c\u00b7\u8d1d\u5179\u5c31\u53ef\u4ee5\u7ed3\u675f\u6240\u6709\u7684\u6218\u4e89\u3002\u8fd8\u6709\u6bd4\u201c\u6218\u4e89\u5927\u5e08\u201d\u66f4\u597d\u7684\u53cd\u6218\u6b4c\u66f2\u5417\uff1f\u7136\u800c\uff0c\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u4eec\u5c31\u4e00\u76f4\u5904\u4e8e\u6218\u4e89\u72b6\u6001\u3002\u7f57\u6069\u558a\u9053\uff0c\u97f3\u4e50\u662f\u7f8e\u56fd\u6587\u5316\u5bf9\u8bdd\u7684\u4e00\u90e8\u5206\uff0c\u8fd8\u6709\u5e2e\u52a9\u5851\u9020\u4e00\u4e2a\u56fd\u5bb6\u51b3\u7b56\u7684\u6e38\u884c\u548c\u6297\u8bae\u6d3b\u52a8\u3002\n\u8bf4\u6211\u5bf9\u6b64\u6301\u6000\u7591\u6001\u5ea6\u662f\u5b8c\u5168\u4f4e\u4f30\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u540c\u610f\u5f00\u59cb\u201c\u5362\u5361\u201d\u7684\u524d\u671f\u5236\u4f5c\u3002\u6211\u4eec\u751a\u81f3\u51b3\u5b9a\u4e0d\u628a\u5b83\u653e\u5728\u6211\u5f53\u65f6\u6b63\u5728\u5236\u4f5c\u7684\u7b2c\u4e00\u5f20\u4e13\u8f91\u4e2d\uff0c\u800c\u662f\u63a8\u8fdf\u5230\u7b2c\u4e8c\u5f20\u4e13\u8f91\u3002\n\u9a6c\u4e0a\u53d1\u751f\u7684\u4e00\u4ef6\u4e8b\u662f\u5236\u7247\u4eba\u53f2\u8482\u592b\u00b7\u963f\u8fbe\u535a\u5728\u8857\u4e0a\u9047\u5230\u4e86\u4e00\u4e2a\u53eb\u5f7c\u5f97\u00b7\u4f0d\u5fb7\u7684\u952e\u76d8\u624b\u3002\u53f2\u8482\u592b\u7ed9\u4ed6\u5f39\u4e86\u8fd9\u9996\u6b4c\uff0c\u4ed6\u9a6c\u4e0a\u5c31\u6709\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u7f16\u66f2\u7684\u60f3\u6cd5\u3002\n\u6211\u7684\u60f3\u6cd5\u901a\u5e38\u5f88\u7b80\u5355\uff0c\u65cb\u5f8b\u4f18\u7f8e\u3002\u4f0d\u5fb7\u5148\u751f\u6240\u505a\u7684\u662f\u4e3a\u5409\u4ed6\u72ec\u594f\u521b\u9020\u4e86\u4e00\u4e2a\u7a7a\u95f4\uff0c\u5e76\u6539\u53d8\u4e86\u7b2c\u56db\u8282\u7684\u65cb\u5f8b\u3002\u5728\u5531\u4e86\u51e0\u5e74\u8fd9\u9996\u6b4c\u540e\uff0c\u6211\u9010\u6e10\u610f\u8bc6\u5230\uff0c\u8fd9\u662f\u8fd9\u9996\u6b4c\u7684\u60c5\u611f\u9ad8\u6f6e\uff0c\u56e0\u4e3a\u5b83\u5531\u5230\u4e86\u90a3\u91cc--\u201c\u4f60\u4e0d\u4f1a\u95ee\u4e3a\u4ec0\u4e48\uff01\u201d--\u800c\u4e14\u662f\u6211\u97f3\u57df\u7684\u9876\u7aef\u548c\u65cb\u5f8b\u7684\u9876\u7aef\u3002\n\u6211\u53eb\u5362\u5361\uff0c\u6211\u4f4f\u5728\u4e8c\u697c\uff0c\u6211\u4f4f\u5728\u4f60\u697c\u4e0a\u3002\u662f\u7684\uff0c\u6211\u60f3\u4f60\u4ee5\u524d\u89c1\u8fc7\u6211\u3002\n\u5982\u679c\u4f60\u5728\u6df1\u591c\u542c\u5230\u4ec0\u4e48\uff0c\u4ec0\u4e48\u9ebb\u70e6\uff0c\u4ec0\u4e48\u6253\u67b6\uff0c\u522b\u95ee\u6211\u662f\u4ec0\u4e48\u3002\n\u6211\u60f3\u662f\u56e0\u4e3a\u6211\u7b28\u624b\u7b28\u811a\uff0c\u6211\u8bd5\u7740\u4e0d\u5927\u58f0\u8bf4\u8bdd\uff0c\u4e5f\u8bb8\u662f\u56e0\u4e3a\u6211\u75af\u4e86\uff0c\u6211\u8bd5\u7740\u4e0d\u8868\u73b0\u5f97\u592a\u9a84\u50b2\u3002\n\u4ed6\u4eec\u53ea\u6253\u5230\u4f60\u54ed\uff0c\u4e4b\u540e\u4f60\u4e0d\u4f1a\u95ee\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u518d\u4e89\u8fa9\uff0c\u4f60\u53ea\u662f\u4e0d\u518d\u4e89\u8fa9\uff0c\u4f60\u5c31\u662f\u4e0d\u518d\u4e89\u8fa9\u3002\n\u662f\u7684\uff0c\u6211\u60f3\u6211\u5f88\u597d\uff0c\u6211\u53c8\u8d70\u8fdb\u95e8\u4e86\u597d\u5427\uff0c\u5982\u679c\u4f60\u95ee\u6211\u8fd9\u5c31\u662f\u6211\u8981\u8bf4\u7684\uff0c\u53cd\u6b63\u8fd9\u4e0d\u5173\u4f60\u7684\u4e8b\uff0c\u6211\u60f3\u6211\u60f3\u4e00\u4e2a\u4eba\u5446\u7740\uff0c\u6ca1\u6709\u7834\u788e\u7684\u4e1c\u897f\uff0c\u6ca1\u6709\u6254\u4e1c\u897f\u3002\n\u6211\u53eb\u5362\u5361\uff0c\u6211\u4f4f\u5728\u4e8c\u697c\uff0c\u6211\u4f4f\u5728\u4f60\u697c\u4e0a\u3002\u662f\u7684\uff0c\u6211\u60f3\u4f60\u4ee5\u524d\u89c1\u8fc7\u6211\u3002\n\u5982\u679c\u4f60\u6df1\u591c\u542c\u5230\u4ec0\u4e48\uff0c\u4ec0\u4e48\u9ebb\u70e6\uff0c\u4ec0\u4e48\u6253\u67b6\uff0c\u522b\u95ee\u6211\u662f\u4ec0\u4e48\u3002\n\u4ed6\u4eec\u53ea\u6253\u5230\u4f60\u54ed\uff0c\u4e4b\u540e\u4f60\u4e0d\u518d\u95ee\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u518d\u4e89\u8fa9\uff0c\u4f60\u53ea\u662f\u4e0d\u518d\u4e89\u8fa9\uff0c\u4f60\u5c31\u662f\u4e0d\u518d\u4e89\u8fa9\u3002\n\u6240\u4ee5\uff0c\u5f53\u4f60\u542c\u5230\u8fd9\u9996\u6b4c\u65f6\uff0c\u5b83\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u65cb\u5f8b\u60f3\u6cd5\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u5448\u73b0\u4e86\u4e09\u6b21-\u7b2c\u56db\u8282\u8bb2\u8ff0\u4e86\u4e00\u4e2a\u6545\u4e8b\uff0c\u7528\u597d\u7684\u53d9\u4e8b\u65b9\u5f0f\u753b\u51fa\u4e86\u4e00\u6761\u5f27\u7ebf\uff0c\u5f53\u6b4c\u66f2\u7ed3\u675f\u65f6\uff0c\u4f60\u4f1a\u89c9\u5f97\u81ea\u5df1\u597d\u50cf\u5728\u60c5\u611f\u4e0a\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u8fd9\u5c31\u662f\u7f16\u66f2\u7684\u76ee\u7684-\u4ee5\u97f3\u4e50\u7684\u65b9\u5f0f\u628a\u90a3\u91cc\u7684\u4e1c\u897f\u653e\u5728\u4e00\u8d77\uff0c\u628a\u97f3\u4e50\u50cf\u62fc\u56fe\u4e00\u6837\u7f16\u6392-\u68b3\u7406\u51fa\u6b4c\u66f2\u7684\u60c5\u611f\uff0c\u5e76\u4ee5\u4e00\u79cd\u8ba9\u4ed6\u4eec\u5728\u60c5\u611f\u4e0a\u88ab\u201c\u51fb\u4e2d\u201d\u7684\u65b9\u5f0f\u5448\u73b0\u7ed9\u516c\u4f17\u3002\u7a0d\u540e\u518d\u8bb2\u3002\n\u6211\u4eec\u8fd8\u505a\u4e86\u5f88\u591a\u5176\u4ed6\u7684\u5de5\u4f5c\u3002\u6211\u4eec\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u5927\u94a5\u5319\u91cc\u3002\u6211\u662f\u6545\u610f\u8fd9\u6837\u5199\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u60b2\u4f24\u7684\u5c0f\u7537\u5b69\u5728\u95e8\u53e3\u53f0\u9636\u4e0a\u7528\u5c0f\u8c03\u53d7\u82e6\u7684\u523b\u677f\u5370\u8c61\u8ba9\u6211\u975e\u5e38\u6124\u6012\u3002\u5728\u6211\u770b\u6765\uff0c\u5927\u591a\u6570\u7ecf\u5e38\u88ab\u8650\u5f85\u7684\u5b69\u5b50\u4e00\u5f00\u59cb\u90fd\u4f1a\u611f\u5230\u60b2\u4f24\u548c\u5bb3\u6015\uff0c\u4f46\u6700\u7ec8\u4e5f\u4f1a\u63a5\u53d7\u8fd9\u662f\u751f\u6d3b\u7684\u73b0\u5b9e\uff0c\u751a\u81f3\u662f\u4f60\u53ef\u80fd\u4f1a\u671f\u5f85\u7684\u4e8b\u60c5\u3002\u8fd9\u662f\u4e00\u4e2a\u6b63\u5728\u53d1\u5c55\u7684\u5b9e\u4e8b\u6c42\u662f\u7684\u95ee\u9898\u3002\u6240\u4ee5\u6211\u9009\u4e86\u4e00\u628a\u4e3b\u8981\u94a5\u5319\uff0c\u6211\u4eec\u90fd\u7559\u7740\u3002\n\u5947\u602a\u7684\u662f\uff0c\u5f53\u8fd9\u9996\u6b4c\u5b8c\u6210\u65f6\uff0c\u90a3\u79cd\u968f\u610f\u7684\u5927\u8c03\u97f3\u8d28\u542c\u8d77\u6765\u6b22\u5feb\u3001\u4e50\u89c2\uff0c\u751a\u81f3\u662f\u80dc\u5229\uff0c\u8fd9\u5e76\u4e0d\u662f\u6211\u7684\u672c\u610f\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u4e54\u6069\u00b7\u6208\u767b(Jon Gordon)\u7684\u5409\u4ed6\u72ec\u594f\uff0c\u6709\u70b9\u53d7U2\u7684\u201c\u8fb9\u7f18\u201d(The Edge)\u7684\u5f71\u54cd\u3002\u6211\u4eec\u5f53\u65f6\u662fU2\u7684\u8d85\u7ea7\u7c89\u4e1d\uff0c\u4ed6\u4eec1986\u5e74\u6765\u770b\u6211\u4eec\u5728\u90fd\u67cf\u6797\u7684\u6f14\u51fa\u3002\u5b89\u4e1c\u00b7\u6851\u79d1(Anton Sanko)\u5728\u4ed6\u52a0\u5165\u4e50\u961f\u7684\u8bd5\u955c\u4e2d\u626e\u6f14\u4e86\u6211\u7684\u89d2\u8272\uff0c\u90e8\u5206\u539f\u56e0\u662f\u6d41\u884c\u5408\u6210\u7684\u58f0\u97f3\u548c\u90e8\u5206\u3002\u5728\u4ed6\u63a5\u8fd1\u8fd9\u9996\u6b4c\u7684\u65b9\u5f0f\u4e2d\uff0c\u524d\u56db\u4e2a\u97f3\u7b26\u542c\u8d77\u6765\u51e0\u4e4e\u662f\u5efa\u7b51\u5b66\u7684\uff0c\u7ed9\u6211\u7559\u4e0b\u4e86\u6df1\u523b\u7684\u5370\u8c61\u3002\n\u8fd9\u9996\u6b4c\u81f3\u5c11\u82b1\u4e86\u4e00\u5e74\u7684\u65f6\u95f4\u624d\u88ab\u7f16\u6392\u3001\u5236\u4f5c\u548c\u6253\u78e8\u5230\u5b83\u51fa\u6765\u65f6\u7684\u5149\u6cfd\u3002\u6211\u4e00\u904d\u53c8\u4e00\u904d\u5730\u91cd\u590d\u6211\u7684\u58f0\u97f3\uff0c\u53f2\u8482\u592b\u00b7\u963f\u8fbe\u535a(Steve Addabbo)\u63a7\u5236\u7740\u6211\u7684\u58f0\u97f3\u3002\u201c\u4e3a\u4ec0\u4e48\u6211\u8981\u518d\u505a\u4e00\u6b21\u5462\uff1f\u6211\u5f97\u53bb\u5199\u5b8c\u6211\u7684\u5176\u4ed6\u6b4c\u8bcd\u4e86\u3002\u6211\u4e0d\u60f3\u518d\u8fd9\u6837\u505a\u4e86\u3002\u201c\u3002(\u5f53\u65f6\uff0cLenny Kaye\u6b63\u5728\u5e2e\u6211\u5b8c\u6210\u4e00\u4e9b\u6b4c\u8bcd\uff0c\u7279\u522b\u662f\u201c\u94c1\u8f68\u201d\uff0c\u8fd9\u9996\u6b4c\u8ba9\u6211\u5f88\u5934\u75bc\u3002)\u3002\n\u6211\u6b63\u5728\u8003\u8651\u8bf7\u9732\u897f\u00b7\u5361\u666e\u5170\u65af\u57fa(Lucy Kaplansky)\u62c5\u4efb\u80cc\u666f\u4eba\u58f0-\u6211\u559c\u6b22\u4e0e80\u5e74\u4ee3\u521d\u6211\u6c89\u6d78\u5728\u5176\u4e2d\u7684\u6c11\u4fd7\u573a\u666f\u4fdd\u6301\u8054\u7cfb-\u4f46\u6211\u5df2\u7ecf\u5728\u524d\u4e00\u5e74\u9080\u8bf7\u5979\u5728\u201c\u4e2d\u5fc3\u5de6\u7ffc\u201d(Left Of Center)\u4e2d\u6f14\u5531\u3002\u6240\u4ee5\u6211\u95ee\u4e86\u8096\u6069\u00b7\u79d1\u5c14\u6587\uff0c\u4ed6\u542c\u8d77\u6765\u5f88\u68d2\u3002\u6211\u7684\u7ba1\u7406\u5c42\u975e\u5e38\u559c\u6b22\u5979\uff0c\u4ed6\u4eec\u6700\u7ec8\u7b7e\u4e0b\u4e86\u5979\uff0c\u5e76\u5904\u7406\u4e86\u5979\u591a\u5e74\u7684\u804c\u4e1a\u751f\u6daf\u3002\n\u6211\u88ab\u8bd5\u56fe\u5728\u6700\u540e\u671f\u9650\u524d\u5b8c\u6210\u5176\u4ed6\u6b4c\u66f2\u7684\u52aa\u529b\u641e\u5f97\u5fc3\u70e6\u610f\u4e71\uff0c\u56e0\u4e3a\u6211\u5bf9\u201c\u5362\u5361\u201d\u611f\u5230\u7d27\u5f20\u3002\u6211\u611f\u89c9\u81ea\u5df1\u88ab\u6307\u7532\u540a\u5728\u60ac\u5d16\u4e0a--\u8fd9\u79cd\u611f\u89c9\u5728\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\u5df2\u7ecf\u6709\u8fc7\u5f88\u591a\u6b21\u4e86\u3002\u8bb0\u8005\u4eec\u6709\u65f6\u4f1a\u5199\u5230\u6211\u7684\u201c\u8f7b\u677e\u7684\u5f55\u5236\u8ba1\u5212\u201d\uff0c\u8fd9\u771f\u662f\u592a\u597d\u7b11\u4e86\uff01\u5982\u679c\u4f60\u5bf9\u653e\u677e\u7684\u60f3\u6cd5\u662f\u7528\u6307\u7532\u6302\u5728\u60ac\u5d16\u4e0a\uff0c\u6211\u60f3\u8fd9\u662f\u5bf9\u7684\u3002\n\u6211\u4e0e\u96ea\u83b1\u00b7\u96c5\u5e93\u65af(Shelley Yackus)\u5750\u5728\u4e00\u8d77\uff0c\u4ed6\u662f\u90a3\u4e2a\u65f6\u4ee3\u7684\u4e00\u4f4d\u9876\u5c16\u5de5\u7a0b\u5e08-\u6211\u4eec\u5f97\u5230\u4e86\u4ed6\uff0c\u8fd9\u662f\u4e00\u4ef6\u5927\u4e8b\uff0c\u4ed6\u5bf9\u5531\u7247\u7684\u6574\u4f53\u97f3\u8d28\u505a\u51fa\u4e86\u5f88\u5927\u8d21\u732e\u3002\u6211\u9f13\u52b1\u4ed6\u53d1\u51fa\u9f13\u58f0\u3002\u6bcf\u4e2a\u4eba\u603b\u662f\u8e2e\u7740\u811a\u7ed5\u7740\u539f\u58f0\u5409\u4ed6\uff0c\u5e0c\u671b\u9f13\u58f0\u542c\u8d77\u6765(\u770b\u8d77\u6765)\u662f\u5076\u7136\u7684\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u4e0d\u4f1a\u8ba9\u5409\u4ed6\u9eef\u7136\u5931\u8272\uff0c\u4f46\u8fd9\u4e00\u6b21\u5409\u4ed6\u7684\u58f0\u97f3\u53c8\u597d\u542c\u53c8\u4e30\u6ee1\uff0c\u6240\u4ee5\u6ca1\u6709\u7406\u7531\u8fd9\u4e48\u5ba2\u6c14\u3002\n\u636e\u6211\u6240\u77e5\uff0c\u6211\u4eec\u521a\u521a\u5b8c\u6210\u8fd9\u5f20\u4e13\u8f91\uff0c\u5b83\u5c31\u8ba1\u5212\u5728\u516d\u4e03\u5468\u540e\u53d1\u884c\u3002\u5f53\u5b83\u51fa\u6765\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6b63\u5728\u8def\u4e0a\uff0c\u4e00\u591c\u4e4b\u95f4\u60c5\u51b5\u53d1\u751f\u4e86\u53d8\u5316\u3002\u4ece\u5b57\u9762\u4e0a\u770b\u3002\u4e00\u5929\u665a\u4e0a\uff0c\u6211\u4eec\u5728\u901a\u5e38\u5ea7\u65e0\u865a\u5e2d\u7684\u5267\u9662\u548c\u4ff1\u4e50\u90e8\u6f14\u51fa\u3002\u7b2c\u4e8c\u5929\uff0c\u4e4b\u540e\u7684\u6bcf\u4e00\u5929\uff0c\u6bcf\u4e2a\u4f1a\u573a\u90fd\u5ea7\u65e0\u865a\u5e2d\u3002\u8fd9\u6301\u7eed\u4e86\u4eca\u5e74\u5269\u4e0b\u7684\u65f6\u95f4\uff0c\u5305\u62ec\u5728\u5361\u5185\u57fa\u97f3\u4e50\u5385\u7684\u4e24\u573a\u6f14\u51fa\u548c\u5728\u65e0\u7ebf\u7535\u57ce\u7684\u4e00\u573a\u6f14\u51fa\u3002\u201c\u5362\u5361\u201d\u5df2\u7ecf\u88ab\u9001\u5230\u7535\u53f0\uff0c\u51e0\u4e4e\u7acb\u523b\u5c31\u88ab\u63a5\u53d7\u4e86\u3002\n\u4e3a\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e48\u5927\u7684\u53cd\u54cd\uff1f\u5176\u4e2d\u4e00\u4e9b\u662f\u4e3b\u9898--\u5f88\u591a\u4eba\u7ed9\u6211\u5199\u4e86\u4ed6\u4eec\u7684\u7ecf\u5386\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u76f4\u6301\u7eed\u5230\u4e0a\u5468\u672b\uff0c\u4e00\u4e2a\u5341\u51e0\u5c81\u7684\u5973\u5b69\u544a\u8bc9\u6211\uff0c\u5979\u662f\u8650\u5f85\u513f\u7ae5\u7684\u53d7\u5bb3\u8005\uff0c\u5979\u771f\u7684\u8ba4\u540c\u8fd9\u4e2a\u89d2\u8272\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u4ee4\u4eba\u60ca\u8bb6\u7684-\u6765\u81ea\u4e16\u754c\u5404\u5730\uff0c\u5305\u62ec\u7f8e\u56fd\u8fd9\u91cc\u7684\u8fd9\u4e48\u591a\u6765\u81ea\u4e0d\u540c\u6587\u5316\u7684\u4eba\u90fd\u8ba4\u540c\u8fd9\u4e2a\u89d2\u8272\u3002\u6211\u539f\u4ee5\u4e3a\u8fd9\u662f\u5173\u4e8e\u4e00\u4e2a\u5c0f\u7684\u4e2a\u4eba\u95ee\u9898\uff0c\u4f46\u7f57\u6069\u662f\u6b63\u786e\u7684\uff1a\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u793e\u4f1a\u95ee\u9898\u3002\n\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u8fd9\u9996\u6b4c\u7684\u58f0\u97f3\uff0c\u5b83\u7684\u5316\u5b66\u53cd\u5e94\uff0c\u56e0\u4e3a\u5f88\u591a\u4eba\u4e0d\u77e5\u9053\u8fd9\u9996\u6b4c\u662f\u5173\u4e8e\u4ec0\u4e48\u7684\u3002\u5b83\u5728\u6536\u97f3\u673a\u91cc\u542c\u8d77\u6765\u5f88\u597d\u542c\uff0c\u5728\u67d0\u4e9b\u6b4c\u66f2\u4e4b\u524d\u548c\u4e4b\u540e\u90fd\u5f88\u597d\u542c\uff0c\u6240\u6709\u4e0d\u540c\u7684\u5236\u4f5c\u8d28\u91cf\u90fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u51dd\u805a\u5728\u4e00\u8d77\uff0c\u4eba\u4eec\u8bb0\u5f97\u5e76\u60f3\u518d\u542c\u4e00\u904d\u3002\u6709\u4e9b\u4e8b\u60c5\u6709\u9b54\u529b--\u4f8b\u5982\uff0c\u6709\u4eba\u544a\u8bc9\u6211\uff0c\u201c\u5362\u5361\u201d\u5728\u5370\u5c3c\u8bed\u4e2d\u7684\u610f\u601d\u662f\u201c\u53d7\u4f24\u7684\u201d\uff0c\u6211\u5199\u8fd9\u9996\u6b4c\u7684\u65f6\u5019\u80af\u5b9a\u4e0d\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\n\u5728\u8d5e\u8a89\u3001\u6210\u529f\u548c\u8f9b\u52e4\u5de5\u4f5c\u7684\u540c\u65f6\uff0c\u6279\u8bc4\u3001\u620f\u4eff\u548c\u62b1\u6028\u4e5f\u968f\u4e4b\u800c\u6765\u3002\u201c\u6211\u4e0d\u60f3\u5728\u65e9\u4e0a\u559d\u5496\u5561\u7684\u65f6\u5019\u542c\u5230\u8650\u5f85\u513f\u7ae5\u7684\u6d88\u606f\uff0c\u201d\u4e00\u4f4d\u7537\u58eb\u5728\u4fe1\u4e2d\u5199\u9053\u3002\u6700\u7cdf\u7cd5\u7684\u4fe1\u4ef6\u6765\u81ea\u8650\u5f85\u513f\u7ae5\u673a\u6784\u3002\u201c\u4f60\u600e\u4e48\u6562\u8bf4\u8fd9\u5b69\u5b50\u8981\u4e3a\u81ea\u5df1\u7684\u8650\u5f85\u8d1f\u8d23\uff01\u201d\u5f00\u59cb\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u8fc7\u7a0b\u3002\u6700\u540e\uff0c\u6211\u628a\u90a3\u4e9b\u4fe1\u548c\u4e00\u888b\u6076\u641e\u4e00\u8d77\u6254\u6389\u4e86\uff0c\u8fd9\u5305\u6076\u641e\u5f80\u5f80\u662f\u8fd9\u6837\u5f00\u5934\u7684\uff1a\u201c\u6211\u53eb\u4e1d\u74dc\uff0c\u6211\u4f4f\u5728\u536b\u751f\u95f4\u5730\u677f\u4e0a\u7684\u2026\u3002\u201d\u54c8\u54c8\u3002\u5f88\u6709\u8da3\u3002\u4e0b\u4e00\u4f4d\uff0c\u8bf7\u3002\n\u201cHit\u201d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u540d\u5b57--\u4e00\u79cd\u4e0e\u5927\u91cf\u4eba\u540c\u65f6\u8fdb\u884c\u7d27\u5f20\u4ea4\u6d41\u7684\u611f\u89c9\u3002\u5c31\u50cf\u68d2\u7403\u548c\u7403\u68d2\u4e00\u6837\uff0c\u4e00\u4e2a\u7834\u88c2\u7684\uff0c\u5feb\u901f\u7684\u8fde\u63a5\u3002\u5c31\u50cf\u6bd2\u54c1\u4e00\u6837\uff0c\u73b0\u5b9e\u7684\u7a81\u7136\u6539\u53d8\u3002\u4f60\u4f1a\u4e60\u60ef\u7684\u3002\n\u8fd9\u79cd\u7279\u522b\u7684\u7d27\u5f20\u6301\u7eed\u4e86\u5927\u7ea68\u4e2a\u6708\uff0c\u6211\u60f3\u76f4\u5230\u7279\u857e\u897f\u00b7\u67e5\u666e\u66fc(Tracy Chapman)\u51fa\u73b0\u5728\u201c\u6eda\u77f3\u201d(Rolling Stone)\u7684\u5c01\u9762\u4e0a\u3002\u5728\u90a3\u4e4b\u540e\uff0c\u201c\u6c64\u59c6\u7684\u665a\u9910\u201d\u4e5f\u5f88\u53d7\u6b22\u8fce\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u662f\u4e00\u79cd\u4e0e\u201c\u5362\u5361\u201d\u622a\u7136\u4e0d\u540c\u7684\u4f53\u9a8c\u3002\u5b83\u5df2\u7ecf\u6709\u4e86\u81ea\u5df1\u5947\u602a\u7684\u5386\u53f2\uff0c\u8fd9\u8ba9\u6211\u611f\u5230\u975e\u5e38\u81ea\u8c6a\u3002\u7a0d\u540e\u518d\u8bb2\u3002\u81f3\u4e8e\u6210\u4e3a\u4e24\u6b21\u6210\u529f\u7684\u5947\u8ff9-\u55ef\uff0c\u6211\u8ba4\u4e3a\u8fd9\u6bd4\u4e00\u6b21\u6210\u529f\u7684\u5947\u8ff9\u8981\u597d\u5f97\u591a\uff0c\u975e\u5e38\u611f\u8c22\u3002\n\u82cf\u73ca\u5a1c\u00b7\u7ef4\u52a0(Suzanne Vega)\u662f\u4e00\u4f4d\u6b4c\u624b\u517c\u4f5c\u66f2\u5bb6\uff0c\u5979\u572820\u4e16\u7eaa80\u5e74\u4ee3\u7684\u6210\u529f\u5e2e\u52a9\u5efa\u7acb\u4e86\u6709\u58f0\u6c11\u8c23\u8fd0\u52a8\uff0c\u5979\u5df2\u7ecf\u53d1\u884c\u4e868\u5f20\u4e13\u8f91\uff0c\u5176\u4e2d\u5305\u62ec\u767d\u91d1\u9500\u91cf\u5f88\u9ad8\u7684\u300a\u5b64\u72ec\u7ad9\u7740\u300b(Solsus Standing\uff0c1987)\uff0c\u70ed\u95e8\u5355\u66f2\u300a\u5362\u5361\u300b(Luka)\uff0c\u4ee5\u53ca2007\u5e74\u84dd\u97f3\u5531\u7247\u516c\u53f8(Blue Note Records)\u7684\u5531\u7247\u300a\u7f8e\u5973\u4e0e\u72af\u7f6a\u300b(Beauty And Crity)\u3002\u5979\u4e5f\u662f\u4e00\u672c\u8bd7\u96c6\u7684\u4f5c\u8005\uff0c\u4e5f\u662f\u516c\u5171\u5e7f\u64ad\u7cfb\u5217\u5267\u201c\u7f8e\u56fd\u5c0f\u725b\u961f\u201d(American Mavericks)\u7684\u4e3b\u6301\u4eba\u3002\u5979\u7684\u7f51\u7ad9\u662fsuzannvega.com\u3002", "note_en": "A couple of weekends ago I began what I call my \u201cbread-and-butter\u201d touring season. I had two shows, one in Long Island and one in Saratoga, N.Y. I had a raging head cold, but made it through and came home to check on a few days worth of e-mails.\n    At first I couldn\u2019t tell what was going on. As I went to access my account, I kept seeing my own face flashing at me on my computer, in between photos of a fire at the Universal Studios and some other news item. But not a current version of my face \u2014 one from before 1990.\n  I wondered if my AOL shoebox of photos had burst open and was somehow leaking online in a public way. Then I read the text, which said something like, \u201cHer first hit, \u2018Luka,\u2019 brought the subject of child abuse to the Top 40. But what was her other one? Hint: It\u2019s catchy!\u201d\n  I looked at the screen for a few minutes as it changed from my face to the fire at Universal to the other photo every few seconds. My husband, Paul, came up behind me.\n  \u201cClick on it!\u201d he said. I did, and read what followed: \u201cThis New Yorker\u2019s poignant tale of an abused child brought a dose of social awareness to the upper reaches of the pop charts. Vega made her second and final chart visit thanks to an initially unauthorized remix of a three-year-old song about her favorite Manhattan greasy-spoon eatery, a place soon to be even better known from being featured in \u2018Seinfeld\u2019 episodes.\u201d\n    \u201cWhat?\u201d I said. \u201cI thought it was kind of nice.\u201d I had missed the headline, which read: \u201cTwo-Hit Wonders!\u201d\n    It\u2019s a list I have shown up on fairly often recently, so I had almost gotten used to it. Of course, he\u2019s right, and it\u2019s demeaning \u2014 it makes me look as though somehow I managed to squeak out those two songs and then shuffle back to being a receptionist, which isn\u2019t true.\n  The way I prefer to see it is that I have had a 20-plus-year career, with a big back catalog of songs that a lot of people know, and want to hear, and yes, two of those songs were big Top 40 hits. What\u2019s to complain about? They are like the cherries on top of the sundae. Why would I not want that? They have been my passport out of a life in an office, to a life on the road where I can go to Korea and the guy who stamps the passport says, \u201cAre you Vega, Suzanne? Everybody knows you here.\u201d And his eyes change with emotion when he reads my name.\n    So I refuse to be embarrassed by those hits. It doesn\u2019t take away from the rest of the songs. But I have often wondered, \u201cWhy those two? Why not the others?\u201d There were other songs just as sparkly and and shiny and major key and radio friendly like \u201cBook of Dreams\u201d or \u201cNo Cheap Thrill\u201d or \u201cFrank &amp; Ava\u201d and so forth. But nothing has had the longevity of those two. So far, anyway.\n  Why is that? I have heard both songs described as \u201cflukes,\u201d but I really don\u2019t think that is the case. A lot of hard work went into their production, especially in the arrangements. Let\u2019s look at \u201cLuka,\u201d for example. I had been listening to Lou Reed\u2019s \u201cBerlin\u201d album \u2014 on that record he plays acoustic guitar, and a fair amount of the album is about abuse of all kinds including domestic abuse.\n  \u201cLuka\u201d was not a popular song when I would perform it back then. I would watch people from the stage. You could see their faces change as they thought about the lyrics; a frown would appear, then a general look of unhappiness, followed by a scowl directed at the floor and, at the conclusion, a smattering of reluctant applause. Then a request for something else, usually \u201cGypsy\u201d or something in a major key with a chorus.\n  It was my manager at the time, Ron Fierstein, who plucked \u201dLuka\u201d out. \u201cIs that song about what I think it\u2019s about?\u201d he asked one day in the back of Folk City. My memory of that conversation goes something like this:\n  \u201cI don\u2019t know,\u201d I said. \u201cWhat do you think it\u2019s about?\u201d\n  \u201cUnless I am mistaken it seems to be from the point of view of a child who is abused.\u201d\n      \u201cA 9-year-old boy who lives in my building. Who is not abused, by the way. I like the name Luka, it\u2019s universal. It could be a girl or boy and it could be any nationality.\u201d\n  \u201cWell, I think that song could be a hit.\u201d he said. Here I hooted at him.\n  \u201cWhat are you talking about? Nobody wants to hear about child abuse. Nobody asks for that song. They want \u2018Gypsy\u2019 or \u2018The Queen and the Soldier.\u2019\u201d\n  \u201cIt\u2019s a song about a social issue. Songs about social issues are important. We don\u2019t have enough of them now. This generation needs to have more.\u201d This was in 1985.\n  \u201cI didn\u2019t write it to be be about a social issue \u2014 I wrote it as a little portrait. I hate songs about social issues. Everybody knows they don\u2019t work.\u201d\n  \u201cWell, it is still a song about a social issue. It\u2019s the issue of child abuse, you said it yourself. And how can you say they don\u2019t work? We stopped the Vietnam War with the music we made in the 70\u2019s!\u201d he began to shout, his cheeks flushing pink.\n  We had a half-hour argument after that about whether songs with a social message worked or not \u2014 me taking the more cynical view that if they really worked then Bob Dylan and Joan Baez would have been able to end all wars. Was there a better anti-war song than \u201cMasters of War\u201d? And yet we had been at war since. Ron shouted that music was part of the dialogue of American culture, along with the marches and the protests that helped to shape the decisions of a nation.\n  To say I was skeptical is to completely understate it, but I agreed to start on the pre-production for \u201cLuka.\u201d We even decided not to put it on the first album, which I was working on at the time, but to delay it for the second one.\n  One of the things that happened right away is that the producer Steve Addabbo ran into a keyboard player named Peter Wood in the street. Steve played him the song and he had some ideas immediately about how it should be arranged.\n  My ideas are usually simple, melodically. What Mr. Wood did was to create a space for the guitar solo and changed the melody line of the fourth verse. This, I have come to realize after years of singing the song, is the emotional climax of the song, because it goes up there \u2014 \u201cYou don\u2019t ask WHY!\u201d \u2014 and is at the top of my range and the top of the melody.\n    My name is Luka I live on the second floor I live upstairs from you Yes I think you\u2019ve seen me before\n  If you hear something late at night Some kind of trouble, some kind of fight Just don\u2019t ask me what it was Just don\u2019t ask me what it was Just don\u2019t ask me what it was\n      I think it\u2019s because I\u2019m clumsy I try not to talk too loud Maybe it\u2019s because I\u2019m crazy I try not to act too proud\n  They only hit until you cry And after that you don\u2019t ask why You just don\u2019t argue anymore You just don\u2019t argue anymore You just don\u2019t argue anymore\n        Yes I think I\u2019m okay I walked into the door again Well, if you ask that\u2019s what I\u2019ll say And it\u2019s not your business anyway I guess I\u2019d like to be alone With nothing broken, nothing thrown\n      My name is Luka I live on the second floor I live upstairs from you Yes I think you\u2019ve seen me before\n  If you hear something late at night Some kind of trouble some kind of fight Just don\u2019t ask me what it was Just don\u2019t ask me what it was Just don\u2019t ask me what it was\n      They only hit until you cry And after that you don\u2019t ask why You just don\u2019t argue any more You just don\u2019t argue any more You just don\u2019t argue any more.\n  So, when you hear the song, it\u2019s not just one melodic idea presented the same way three times \u2014 that fourth verse tells a story, makes an arc the same way a good narrative does, and when the song concludes you feel as though you have been somewhere emotionally. This is the purpose of an arranger \u2014 to take what\u2019s there musically and arrange the music like a puzzle \u2014 to tease out the emotions of the song and present it to the public in a way that they are \u201chit\u201d emotionally. More on that later.\n  We did a lot of other work as well. We kept it in a major key. I had written it that way deliberately, because the stereotype of a sad little boy on a doorstep suffering in a minor key made me furious. It seemed to me that most children who are abused regularly are sad and scared in the beginning but also eventually accept it as a fact of life, as something you might even expect. There is a matter-of-factness that develops. So I chose a major key, which we kept.\n  Weirdly, when the song was done, that casual major-key quality sounded cheerful, upbeat and even triumphant, which wasn\u2019t my intention. Some of it was Jon Gordon\u2019s ringing guitar solo, somewhat influenced by U2\u2019s the Edge. We were huge U2 fans at the time and they came to our show in Dublin in 1986. Some of it was the pop synth sound and part that Anton Sanko played me at his audition to be in the band. Those first four notes ascending sounded almost architectural in how he approached the song, and I was deeply impressed.\n  It took at least a year before the song was arranged, produced and burnished to the sheen that it came out with. I redid my vocal over and over again with Steve Addabbo at the controls. \u201cWhy do I have to do it again? I need to go finish my other lyrics. I don\u2019t want to do it again.\u201d (At that point, Lenny Kaye was helping me to finish some lyrics, especially to \u201cIronbound,\u201d which I was really having trouble with.)\n  I was thinking of asking Lucy Kaplansky to do the background vocals \u2014 I liked staying in touch with the folk scene I had been steeped in during the early \u201880s \u2014 but I had already asked her to sing on \u201cLeft of Center\u201d the year before. So I asked Shawn Colvin, who sounded great. My management liked her so much they ended up signing her and handled her career for years.\n  I was hugely distracted by trying to finish the other songs by the deadline to feel any nervousness about \u201cLuka.\u201d I felt that I was hanging from a cliff by my nails \u2014 a feeling I have had many times in my career. How funny that journalists sometimes write about my \u201crelaxed recording schedule\u201d! If your idea of relaxing is hanging by your nails from a cliff, I guess that\u2019s correct.\n  I sat in on the mixes with Shelley Yackus, a top-notch engineer of that era \u2014 it was a big deal that we got him and he contributed a lot to the overall sound of the record. I encouraged him to bring out the sound of the drums. Everyone always tiptoed around the acoustic guitars and wanted the drums to sound (seem) accidental so they didn\u2019t overshadow the guitar, but this time the guitar sound was nice and fat, so there was no reason to be so polite.\n  We had barely finished the album when it was scheduled for release six or seven weeks later, as I remember it. We were on the road when it came out and things changed overnight. Literally. One night we were playing the usual half-filled theaters and clubs. The next day, and every day after that, each venue was full. This continued for the rest of the year and included two shows at Carnegie Hall and one at Radio City. \u201cLuka\u201d had been delivered to radio and accepted almost immediately.\n  Why? Why the huge response? Some of it was the topic \u2014 so many people wrote me of their experiences. This has continued right up until this past weekend, when a teenaged girl told me she had been a victim of child abuse and that she really identified with the character. This was astonishing to me \u2014 that so many people from so many cultures from all over the world, including here in America, identified with the character. I had believed it was about a small personal issue, but Ron had been correct: it was about a huge social one.\n  A lot of it was the sound of the song, the chemistry of it, since many people had no idea what the song was about. It sounded good on the radio, sounded good before and after certain songs, all the different qualities of the production gelled in a certain way that people remembered and wanted to hear again. There was a magic about certain things \u2014 I have been told that \u201cLuka\u201d means \u201cwounded\u201d in Indonesian, for example, which I certainly didn\u2019t know when I wrote the song.\n  Along with acclaim, success and hard work also came criticisms, parodies and complaints. \u201cI don\u2019t want to hear about child abuse when I am drinking coffee in the morning,\u201d one guy wrote in. The worst letters were from child abuse agencies. \u201cHow  dare you suggest that the child is responsible for his own abuse!\u201d began a typical one. I threw those letters away, eventually, along with a bag of parodies, which tended to start, \u201cMy name is Loofah, I live on the bathroom floor\u2026\u201d Ha ha. Very funny. Next, please.\n  \u201cHit\u201d is a good name for it \u2014 a feeling of intense communication with a huge amount of people at the same time. As with a baseball and a bat, a cracking, quick connection. As with drugs, a sudden alteration of reality. You could get used to it.\n  That particular intensity lasted about eight months, I\u2019d say until Tracy Chapman appeared on the cover of Rolling Stone. \u201cTom\u2019s Diner\u201d was a hit too, after that, but proved to be a very different experience than \u201cLuka.\u201d It has gone on to have its own weird history of which I am very proud. More on that later. As for being a two-hit wonder \u2014 well, I think it\u2019s better than being a one-hit wonder, thank you very much.\n      Suzanne Vega, a singer and songwriter whose success in the 1980s helped establish the acoustic folk-pop movement, has released eight albums, including the platinum-selling \u201cSolitude Standing\u201d (1987) with the hit single \u201cLuka\u201d and the 2007 recording \u201cBeauty and Crime\u201d on Blue Note Records. She is also the author of a book of poetry and was a host of the public radio series \u201cAmerican Mavericks.\u201d Her Web site is  suzannevega.com.", "posttime": "2020-05-07 19:55:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e78\u5b58,surviving,\u9996\u6b4c", "title": "\u4ece\u547d\u4e2d\u4e2d\u5e78\u5b58\u4e0b\u6765(2008)", "title_en": "Surviving the Hits (2008)", "transed": 1, "url": "https://opinionator.blogs.nytimes.com//2008/06/18/surviving-the-hits/", "via": "", "real_tags": ["\u5e78\u5b58", "surviving", "\u9996\u6b4c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001047, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u73b0\u5728\uff0c\u6709\u4e00\u4e2a\u9b54\u672f\u620f\u6cd5\u3002\u6446\u5728\u4f60\u9762\u524d\u7684\u662f\u4e00\u5757239\u4e58200\u82f1\u5bf8\u7684\u5eb7\u5a01\u7684\u201c\u751f\u6d3b\u7684\u6e38\u620f\u201d(Game Of Life)\u68cb\u76d8\uff1a\n\u5982\u679c\u6211\u4eec\u4ece\u8fd9\u4e2a\u914d\u7f6e\u5f00\u59cb\uff0c\u7136\u540e\u6267\u884c\u6e38\u620f\u7684\u4e00\u4e2a\u6b65\u9aa4\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u4ee5\u4e0b\u662f\u4e0b\u4e00\u4ee3\u7684\u5feb\u7167\uff1a\n\u8fd9\u4e2a\u628a\u620f\u662f\u600e\u4e48\u7528\u7684\uff1f(\u8fd9\u4e0d\u662f\u6076\u4f5c\u5267-\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64RLEfile\u5728copy.sh/life\u4e0a\u4eb2\u81ea\u5c1d\u8bd5\u3002)\u3002\n\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u4ece\u5b83\u662f\u600e\u4e48\u4e0d\u8d77\u4f5c\u7528\u7684\u5f00\u59cb\u5427\u3002\u5c06\u751f\u547d\u5f62\u6001\u6027\u5730\u53cd\u8f6c--\u8fd9\u662f\u4e00\u95e8\u201c\u63a0\u593a\u201d\u7684\u827a\u672f--\u662f\u4e00\u4e2a\u5f88\u96be\u63a2\u7d22\u7684\u95ee\u9898\uff0c\u5728\u8fd9\u79cd\u89c4\u6a21\u4e0a\u505a\u8fd9\u4ef6\u4e8b\u5728\u8ba1\u7b97\u4e0a\u662f\u4e0d\u53ef\u884c\u7684\u3002\u60f3\u8c61\u4e00\u4e0b\u641c\u7d22($2^{239\\times200}$)\u53ef\u80fd\u7684\u914d\u7f6e\uff01\u90a3\u80af\u5b9a\u662f\u65e0\u671b\u7684\u2026\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u94fe\u63a5\u7684\u6f14\u8bb2\u5206\u4eab\u4e86\u4e00\u4e9b\u806a\u660e\u7684\u7b97\u6cd5\uff0c\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u4eec\u4ecd\u7136\u9700\u8981\u6574\u657410\u5206\u949f\u7684\u65f6\u95f4\u624d\u80fd\u4e3a\u4e00\u575710x10\u82f1\u5bf8\u7684\u5c0f\u7535\u8def\u677f\u627e\u5230\u524d\u4efb\u3002\n\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd1\u4f3c\u98a0\u5012\u751f\u547d\u5f62\u6001\u8981\u5bb9\u6613\u5f97\u591a--\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u8fde\u7eed\u4f18\u5316\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u6700\u559c\u6b22\u7684\u7b97\u6cd5-\u68af\u5ea6\u4e0b\u964d\u6765\u89e3\u51b3\uff0c\u800c\u4e0d\u662f\u68d8\u624b\u7684\u79bb\u6563\u641c\u7d22\u95ee\u9898\u3002\n\u8fd9\u4e2a\u60f3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\u4ece\u968f\u673a\u7684\u7535\u8def\u677f\u914d\u7f6e($b$)\u5f00\u59cb\uff0c\u7136\u540e\u8ba1\u7b97($b^\\Prime$)\uff0c\u8fd9\u662f\u4eba\u751f\u4e00\u6b65\u4e4b\u540e\u7684\u7ed3\u679c\u3002\u73b0\u5728\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u76ee\u6807\u56fe\u50cf($t$)\uff0c\u8ba1\u7b97\u5bfc\u6570($\\frac{\\Partial}{\\Partial b}\\sum|b^\\Prime-t|$)\uff0c\u8fd9\u544a\u8bc9\u6211\u4eec\u5982\u4f55\u66f4\u6539($b$)\u4f7f($b^\\Prime$)\u66f4\u63a5\u8fd1($t$)\u3002\u7136\u540e\u91c7\u53d6\u6e10\u53d8\u4e0b\u964d\u7684\u6b65\u9aa4\uff0c\u7136\u540e\u51b2\u6d17\u5e76\u91cd\u590d\uff01\n\u597d\u5427\uff0c\u597d\u5427\uff0c\u6211\u77e5\u9053\u4f60\u5728\u60f3\u4ec0\u4e48\uff1a\u751f\u6d3b\u662f\u4e0d\u53ef\u533a\u5206\u7684\uff01\u4f60\u8bf4\u5f97\u5bf9\u3002\u751f\u6d3b\u662f\u5728\u5e03\u5c14\u683c\u4e0a\u73a9\u7684\uff0c\u5730\u56fe($b\\mapstto b^\\Prime$)\u4e0d\u53ef\u80fd\u662f\u8fde\u7eed\u7684\uff0c\u66f4\u4e0d\u7528\u8bf4\u53ef\u5fae\u4e86\u3002\n\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u53ef\u4ee5\u505a\u51fa\u4e00\u4e2a\u201c\u5c3d\u6700\u5927\u52aa\u529b\u201d\u7684\u53ef\u533a\u5206\u7684\u7c7b\u6bd4\u5462\uff1f\u8ba9\u6211\u4eec\u5728\u5b9e\u6570\u7f51\u683c\u4e0a\u73a9\u751f\u6d3b\uff0c\u5b9e\u6570\u7f51\u683c\u4e2d\u7684\u201c\u6b7b\u201d\u7ec6\u80de\u4e3a0\uff0c\u201c\u6d3b\u201d\u7ec6\u80de\u4e3a1\u3002\u6211\u4eec\u80fd\u4e0d\u80fd\u53ea\u7528\u53ef\u5fae\u64cd\u4f5c\u6765\u201c\u5b9e\u73b0\u201d\u751f\u547d\u7684\u4e00\u6b65\u5462\uff1f\u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u3002\n\u6211\u4eec\u5c06\u5206\u522b\u67e5\u770b\u6bcf\u4e2a\u5355\u5143\u683c($c$)\u3002\u7b2c\u4e00\u6b65\u662f\u8ba1\u7b97\u6211\u4eec\u6d3b\u7740\u7684\u90bb\u5c45\u3002\u55ef\uff0c\u5982\u679c\u201c\u6d3b\u7684\u201d\u7ec6\u80de\u662f1\uff0c\u800c\u201c\u6b7b\u7684\u201d\u7ec6\u80de\u662f0\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u6240\u67098\u4e2a\u90bb\u5c45\u7684\u503c\u76f8\u52a0\uff0c\u5f97\u5230\u6211\u4eec\u7684\u6d3b\u7684\u90bb\u5c45\u8ba1\u6570($n$)\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u60f3\u53d8\u5f97\u66f4\u806a\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u9ad8\u6548\u5730\u5b9e\u73b0\u4e3a\u4e0e\u4ee5\u4e0b\u5185\u6838\u7684\u5377\u79ef\uff1a\n\\[\\BEGIN{bMatrix}1&amp\uff1b1&amp\uff1b1\\\\1&amp\uff1b0&amp\uff1b1\\\\1&amp\uff1b1&amp\uff1b1\\end{bMatrix}\\]\u3002\n\u5f88\u597d\uff0c\u6211\u4eec\u77e5\u9053($n$)\uff0c\u5f53\u7136\u4e5f\u77e5\u9053\u6211\u4eec\u81ea\u5df1\u76840/1\u503c($c$)\u3002\u4e0b\u4e00\u6b65\u662f\u5f04\u6e05\u695a\u8fd9\u4e2a\u7ec6\u80de\u5728\u4e0b\u4e00\u4ee3\u662f\u5426\u8fd8\u6d3b\u7740\u3002\u89c4\u5219\u5982\u4e0b\uff1a\n\u5982\u679c\u7ec6\u80de\u662f\u6d3b\u7684\uff0c($c=1$)\uff0c\u90a3\u4e48\u5b83\u6d3b\u7740\u7684\u5145\u8981\u6761\u4ef6\u662f($n=2$)\u6216($n=3$)\u3002\n\u5982\u679c\u7ec6\u80de\u6b7b\u4ea1\uff0c($c=0$)\uff0c\u90a3\u4e48\u5f53\u4e14\u4ec5\u5f53($n=3$)\uff0c\u5b83\u624d\u4f1a\u590d\u6d3b\u3002\n\u8ba9\u6211\u4eec\u5148\u63a5\u8fd1(2)\u3002\u5f53($n=3$)\u4e3a1\u65f6\uff0c\u4ec0\u4e48\u51fd\u6570\u4e3a1\uff0c\u5426\u5219\u4e3a0\uff1f\u5f53\u7136\u662f\u201c\u5cf0\u503c\u4e3a-3\u201d\u51fd\u6570\u3002\u8fd9\u662f\u4e0d\u53ef\u5fae\u7684\uff0c\u4f46\u662f\u4ee53\u4e3a\u4e2d\u5fc3\u7684\u7a84\u9ad8\u65af\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff01\u5982\u679c\u9002\u5f53\u7f29\u653e\uff0c\u9ad8\u65af\u5728\u8f93\u51653\u5904\u4e3a1\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u51e0\u4e4e\u4e3a\u96f6\u3002\u8bf7\u53c2\u89c1\u6b64\u56fe\u8868\uff1a\n\u540c\u6837\uff0c\u5bf9\u4e8e(1)\u4ee52.5\u4e3a\u4e2d\u5fc3\u7684\u9002\u5f53\u7f29\u653e\u7684\u9ad8\u65af\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u7ebf\u6027\u63d2\u503c\u5728\u95e8($c$)\u4e0b\u5bf9\u8fd9\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u591a\u8def\u590d\u7528\u3002\u56e0\u4e3a($c\\\u7ea60$)\u6216($c\\\u7ea61$)\uff0c\u6211\u4eec\u77e5\u9053($ca+(1-c)b$)\u5c31\u50cf\u5199\u4f5c\uff0c\u5982\u679cc\uff0c\u5219a\uff0c\u5426\u5219b\u3002\n\u8bf7\u6ce8\u610f\uff0c\u4f8b\u5982\u4f7f\u7528tanh\u51fd\u6570\u5c06\u8be5\u51fd\u6570\u7684\u8f93\u51fa\u201c\u94b3\u5236\u201d\u4e3a0\u62161\u662f\u503c\u5f97\u7684\u3002\u8fd9\u6837\uff0c\u5355\u5143\u683c\u503c\u59cb\u7ec8\u63a5\u8fd10\u62161\u3002\n\u597d\u7684\uff0c\u592a\u597d\u4e86\uff01\u73b0\u5728\u5269\u4e0b\u7684\u5de5\u4f5c\u5c31\u662f\u7528PyTorch\u7f16\u5199\u8fd9\u6bb5\u4ee3\u7801\u5e76\u8c03\u7528.backward()\u2026\u3002\n\u2026\u3002\u51e0\u79d2\u949f\u4e4b\u5185\uff0c\u5b83\u5c31\u5f00\u59cb\u5b66\u4e60\u4e86\uff01\u8fd9\u91cc\u662f\u68af\u5ea6\u4e0b\u964d\u6bcf100\u6b65\u7684GIF($b$)\u3002\n(\u6ce8\u610f\uff1a\u6b64GIF\u4e2d\u7684\u76ee\u6807\u56fe\u50cf($t$)\u662f\u4e00\u4e2a\u5168\u767d\u77e9\u5f62\uff1bmyjanky PyTorch\u6e10\u53d8\u4e0b\u964d\u4f1a\u627e\u5230\u7a00\u758f\u914d\u7f6e\uff0c\u4ece\u800c\u4ea7\u751f\u201c\u8fc7\u5ea6\u586b\u5145\u201d\u7684\u5b57\u6bb5\uff0c\u5176\u4e2d\u51e0\u4e4e90%\u7684\u7ec6\u80de\u90fd\u662f\u6d3b\u7684\u3002)\u3002\n\u770b\u7740\u90a3\u5f20GIF\uff0c\u7f8e\u4e3d\u7684\u8ff7\u5bab\u56fe\u6848\u8ba9\u6211\u60f3\u8d77\u4e86\u4e00\u4e9b\u770b\u4f3c\u4e0d\u76f8\u5e72\u7684\u4e1c\u897f\uff1a\u5de8\u578b\u6cb3\u8c5a\u7684\u76ae\u80a4\u3002\u8fd9\u91cc\u6709\u4e00\u5f20\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\u7684\u56fe\u7247\uff1a\n\u5f53\u5fae\u5c0f\u7684\u6270\u52a8\u6270\u4e71\u4e0d\u7a33\u5b9a\u7684\u5747\u5300\u72b6\u6001\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u7c7b\u4f3c\u6cb3\u8c5a\u8eab\u4e0a\u7684\u56fe\u6848\uff0c\u8fd9\u662f\u201c\u5bf9\u79f0\u7834\u7f3a\u201d\u7684\u7ed3\u679c\u3002\u8fd9\u4e9b\u60f3\u6cd5\u6700\u5148\u662f\u7531\u827e\u4f26\u00b7\u56fe\u7075\u63cf\u8ff0\u7684(\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u88ab\u79f0\u4e3a\u56fe\u7075\u6a21\u5f0f)\u3002\u8fd9\u662f1952\u5e74\u7684\u7eb8\u3002\n\u6211\u4e0d\u7981\u60f3\u77e5\u9053\u8fd9\u91cc\u662f\u5426\u4e5f\u6709\u4e00\u79cd\u53cd\u5e94\u6269\u6563\u6a21\u578b\u5f0f\u7684\u6548\u5e94\u5728\u8d77\u4f5c\u7528\uff0c\u5bf9\u79f0\u6027\u88ab($b$)\u7684\u968f\u673a\u521d\u59cb\u5316\u6253\u7834\u4e86\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5b83\u5c06\u5728\u7ec6\u80de\u3001\u5143\u80de\u81ea\u52a8\u673a\u3001\u56fe\u7075\u5b8c\u5907\u6027\u548c\u56fe\u7075\u6a21\u5f0f\u2026\u4e4b\u95f4\u521b\u5efa\u76f8\u5f53\u597d\u7684\u8fde\u63a5", "note_en": "And now, a magic trick. Before you is a 239-by-200 Conway\u2019s Game of Life board:\n  What happens if we start from this configuration and take a single step of thegame? Here is a snapshot of the next generation:\n    How does this trick work? (It\u2019s not a hoax \u2014 you can try it yourself at copy.sh/life using  this RLEfile.)\n Well, let\u2019s start with how it  doesn\u2019t work. Reversing Life configurationsexactly \u2014 the art of \u201catavising\u201d \u2014 is  a hard searchproblem,and doing it at this scale would be computationally infeasible. Imaginesearching through ($ 2^{239\\times200} $) possible configurations! Surely thatis hopeless\u2026 indeed, the talk I linked shares some clever algorithms thatnonetheless take a full 10 minutes to find a predecessor for a tiny 10-by-10board.\n But it turns out that  approximately reversing a Life configuration is mucheasier \u2014 instead of a tricky discrete search problem, we have an easy continuous optimization problem for which we can use our favorite algorithm,gradient descent.\n Here is the idea: Start with a random board configuration ($ b $) and compute($ b^\\prime $), the result after one step of Life. Now, for some target image($ t $) compute the derivative ($ \\frac{\\partial}{\\partial b} \\sum|b^\\prime-t|$), which tells us how to change ($ b $) to make ($ b^\\prime $) closer to ($ t$). Then take a step of gradient descent, and rinse and repeat!\n Okay, okay, I know what you\u2019re thinking:  Life isn\u2019t differentiable! You\u2019reright. Life is played on a grid of bools, and there is no way the map ($ b\\mapsto b^\\prime $) is continuous, let alone differentiable.\n But suppose we could make a \u201cbest effort\u201d differentiable analogue? Let us playLife on a grid of real numbers that are 0 for \u201cdead\u201d cells and 1 for \u201clive\u201dcells. Can we \u201cimplement\u201d a step of Life using only differentiable operations?Let\u2019s try.\n We will look at each cell ($ c $) individually. The first step is to count ourlive neighbors. Well, if \u201clive\u201d cells are 1 and \u201cdead\u201d cells are 0, then we cansimply add up the values of all 8 of our neighbors to get our live neighborcount ($ n $). Indeed, if we wanted to be clever, we could implement thisefficiently as a convolution with this kernel:\n \\[\\begin{bmatrix}1 &amp; 1 &amp; 1 \\\\1 &amp; 0 &amp; 1 \\\\1 &amp; 1 &amp; 1\\end{bmatrix}\\]\n Good, so we know ($ n $) and of course our own 0/1 value ($ c $). The next stepis to figure out whether this cell will be alive in the next generation. Hereare the rules:\n If the cell is alive, ($ c = 1 $), then it stays alive if and only if ($ n =2 $) or ($ n = 3 $).\n If the cell is dead, ($ c = 0 $), then it comes to life if and only if ($ n= 3 $).\n Let us approach (2) first. What function is 1 when ($ n = 3 $) and 0 otherwise?The \u201cspike-at-3\u201d function, of course. That\u2019s not differentiable, but a narrowGaussian centered at 3 is  almost the same thing! If scaled appropriately, theGaussian is one at input 3, and  almost zero everywhere else. See this graph:\n  Similarly, for (1) an appropriately-scaled Gaussian centered at 2.5 gets thejob done. Finally, we can mux these two cases under gate ($ c $) by simplelinear interpolation. Because ($ c \\approx 0 $) or ($ c \\approx 1 $), we knowthat ($ ca + (1-c)b $) is just like writing  if c then a else b.\n   Note that it\u2019s worth \u201cclamping\u201d the output of that function to 0 or 1 using,say, the tanh function. That way cell values always end up close to 0 or 1.\n Okay, great! Now all that\u2019s left to do is to write this in PyTorch and call.backward()\u2026\n \u2026and it begins to learn, within seconds! Here is a GIF of ($ b $) at every100 steps of gradient descent.\n  (Note: This GIF is where the target image ($ t $) is an all-white rectangle; myjanky PyTorch gradient descent finds sparse configurations that give birth toan \u201coverpopulated\u201d field where nearly 90% of cells are alive.)\n  Looking at that GIF, the beautiful labyrinthine patterns reminded me ofsomething seemingly unrelated: the skin of a giant pufferfish. Here\u2019s a picturefrom Wikipedia:\n    Patterns like the one on the pufferfish come about as a result of\u201csymmetry-breaking,\u201d when small perturbations disturb an unstable homogeneousstate. The ideas were first described by Alan Turing (and thus the patterns arecalled  Turing Patterns). Here\u2019shis  1952paper.\n I can\u2019t help but wonder if there\u2019s a reaction-diffusion-model-esque effect atwork here as well, the symmetry being broken by the random initialization of ($b $). If that\u2019s the case, it would create quite a wonderful connection betweencells, cellular automata, Turing-completeness, and Turing patterns\u2026", "posttime": "2020-05-07 19:54:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u53cd\u8f6c,gradient,\u7ec6\u80de", "title": "\u5eb7\u5a01\u68af\u5ea6\uff1a\u7528\u53ef\u5fae\u89c4\u5212\u53cd\u8f6c\u751f\u6d3b", "title_en": "Conway's Gradient: Reversing Life with differentiable programming", "transed": 1, "url": "http://hardmath123.github.io/conways-gradient.html", "via": "", "real_tags": ["\u53cd\u8f6c", "gradient", "\u7ec6\u80de"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001046, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Clash\u662f\u4e00\u79cd\u51fd\u6570\u5f0f\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\uff0c\u5b83\u501f\u9274\u4e86\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00Haskell\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u3002\u5b83\u4e3a\u7ec4\u5408\u65f6\u5e8f\u7535\u8def\u548c\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u63d0\u4f9b\u4e86\u4e00\u79cd\u719f\u6089\u7684\u7ed3\u6784\u8bbe\u8ba1\u65b9\u6cd5\u3002Clash\u7f16\u8bd1\u5668\u5c06\u8fd9\u4e9b\u9ad8\u7ea7\u63cf\u8ff0\u8f6c\u6362\u4e3a\u4f4e\u7ea7\u53ef\u7efc\u5408\u7684VHDL\u3001Verilog\u6216SystemVerilog\u3002\nClash\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u5728\u8bb8\u53ef\u7684BSD2\u8bb8\u53ef\u4e0b\u83b7\u5f97\u8bb8\u53ef\uff0c\u5e76\u7531QBayLogic\u79ef\u6781\u7ef4\u62a4\u3002\nClash\u6784\u5efa\u5728Haskell\u4e4b\u4e0a\uff0c\u8fd9\u4e3a\u826f\u597d\u7c7b\u578b\u7684\u4ee3\u7801\u63d0\u4f9b\u4e86\u6781\u597d\u7684\u57fa\u7840\u3002\u4e0eClash\u7684\u6807\u51c6\u5e93\u4e00\u8d77\uff0c\u5f88\u5bb9\u6613\u6784\u5efa\u53ef\u6269\u5c55\u548c\u53ef\u91cd\u7528\u7684\u786c\u4ef6\u8bbe\u8ba1\u3002\n\u5c06\u60a8\u7684\u8bbe\u8ba1\u52a0\u8f7d\u5230\u89e3\u91ca\u5668\u4e2d\uff0c\u65e0\u9700\u8bbe\u7f6e\u6d4b\u8bd5\u53f0\u5373\u53ef\u8f7b\u677e\u6d4b\u8bd5\u6240\u6709\u7ec4\u4ef6\u3002\n\u5c3d\u7ba1Clash\u63d0\u4f9b\u4e86\u8bb8\u591a\u529f\u80fd\uff0c\u4f46\u6709\u65f6\u9700\u8981\u76f4\u63a5\u8bbf\u95eeVHDL\u3001Verilog\u6216SystemVerilog\u3002Clash\u5141\u8bb8\u60a8\u4f7f\u7528\u5176\u81ea\u5df1\u7684\u6a21\u677f\u7cfb\u7edf\u6267\u884c\u6b64\u64cd\u4f5c\u3002\nClash\u5141\u8bb8\u7a0b\u5e8f\u5458\u5728\u6ca1\u6709\u786c\u7f16\u7801\u957f\u5ea6\u6216\u5143\u7d20\u7c7b\u578b\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u51fd\u6570\uff0c\u4f8b\u5982\u6b64FIR\u6ee4\u6ce2\u5668\uff1a\nFIR\u7cfb\u6570x=DOTP\u7cfb\u6570(\u7a97\u53e3x)\uff0c\u5176\u4e2dDOTP as bs=sum(zipWith(*)as bs)\u3002\nClash\u5c06\u901a\u8fc7\u5176\u5f3a\u5927\u7684\u7c7b\u578b\u63a8\u7406\u7cfb\u7edf\u627e\u51fa\u6b64\u51fd\u6570\u7684\u7c7b\u578b\u3002\u8981\u4f7f&#34\uff1block&#34\uff1b\u7c7b\u578b\u5c31\u4f4d\uff0c\u6211\u4eec\u53ef\u4ee5\u90e8\u5206\u5e94\u7528`fir`\uff1a\n--\u63a8\u65ad\uff1a\u4fe1\u53f7dom Int-&gt\uff1b\u4fe1\u53f7dom Int fir3int=FIR(3\uff1a&gt\uff1b4\uff1a&gt\uff1b5\uff1a&gt\uff1bNil)--\u63a8\u65ad\uff1a\u4fe1\u53f7dom Float-&gt\uff1b\u4fe1\u53f7dom Float fir4Float=FIR(3.5\uff1a&gt\uff1b4.2\uff1a&gt\uff1b3.0\uff1a&gt\uff1b6.1\uff1a&gt\uff1bNil)\u3002\n\u5982\u679c\u60a8\u786e\u5b9e\u9009\u62e9\u663e\u5f0f\u7f16\u5199\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u6dfb\u52a0\u5176\u4ed6\u7ea6\u675f\u3002Clash\u5c06\u68c0\u67e5\u8fd9\u4e9b\u7ea6\u675f\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u5219\u62d2\u7edd\u7f16\u8bd1\u3002\u4ee5\u4e0b\u793a\u4f8b\u5b9e\u73b0\u5b8c\u5168\u5e76\u884c\u77e9\u9635\u4e58\u6cd5\u7b97\u6cd5\uff1ammult--Dimension Constraints\uff1ana~mb=&gt\uff1b1&lt\uff1b=mb--\u5141\u8bb8\u6a21\u62df\u8bbf\u95eemb/nb\uff1a=&gt\uff1bKnownNAt mb=&gt\uff1bKnownNAt nb--Arguments\uff1a=&gt\uff1bVec ma(Vec NA Int)-&gt\uff1bVec mb(Vec Nb Int)-Result\uff1a-&gt\u3002VEC ma(Vec Nb Int)mmult Ma MB=result\uff0c\u5176\u4e2dMBT=\u8f6c\u7f6eMB\u70b9a b=sum$zipWith(*)a b result=map(\\ar-&gt\uff1bdot ar&lt\uff1b$&gt\uff1bMBT)mA", "note_en": "Clash is a functional hardware description language that borrows both its syntax and semantics from the functional programming language  Haskell. It provides a familiar structural design approach to both combinational and synchronous sequential circuits. The Clash compiler transforms these high-level descriptions to low-level synthesizable  VHDL,  Verilog, or  SystemVerilog.\n Clash is an  open-source project, licensed under the permissive  BSD2 license, and actively maintained by  QBayLogic.\n   Clash is built on Haskell which provides an excellent foundation for well-typed code. Together with Clash&#39;s standard library it is easy to build scalable and reusable hardware designs.\n  Load your designs in an interpreter and easily test all your component without needing to setup a test bench.\n  Although Clash offers many features, you sometimes need to directly access VHDL, Verilog, or SystemVerilog directly. Clash allows you to do this with its own templating system.\n  Clash allows programmers to write function without hardcoded length or element type information, such as this FIR filter:\n  fir  coeffs  x  =  dotp  coeffs  ( window  x )  where  dotp  as  bs  =  sum  ( zipWith  ( * )  as  bs )\n  Clash will figure out the type of this function through its powerful type inference system. To &#34;lock&#34; types in place, we can partially apply `fir`:\n  -- inferred: Signal dom Int -&gt; Signal dom Int fir3int  =  fir  ( 3  :&gt;  4  :&gt;  5  :&gt;  Nil ) -- inferred: Signal dom Float -&gt; Signal dom Float fir4float  =  fir  ( 3.5  :&gt;  4.2  :&gt;  3.0  :&gt;  6.1  :&gt;  Nil )\n  If you do choose to write types explicitely, you can add additional constraints. Clash will check these constraints and refuse to compile if they are not met. The following example implements a fully parallel matrix multiplication algorithm: mmult  -- Dimension constraints:  ::  na  ~  mb  =&gt;  1  &lt;=  mb  -- Allow simulation to access mb/nb:  =&gt;  KnownNat  mb  =&gt;  KnownNat  nb  -- Arguments:  =&gt;  Vec  ma  ( Vec  na  Int )  -&gt;  Vec  mb  ( Vec  nb  Int )  -- Result:  -&gt;  Vec  ma  ( Vec  nb  Int ) mmult  mA  mB  =  result  where  mBT  =  transpose  mB  dot  a  b  =  sum  $  zipWith  ( * )  a  b  result  =  map  ( \\ ar  -&gt;  dot  ar  &lt;$&gt;  mBT )  mA", "posttime": "2020-05-07 19:54:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u786c\u4ef6,\u73b0\u4ee3,modern,mb", "title": "Clash\uff1a\u4e00\u79cd\u73b0\u4ee3\u7684\u3001\u51fd\u6570\u5f0f\u7684\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00", "title_en": "Clash: A modern, functional, hardware description language", "transed": 1, "url": "https://clash-lang.org/", "via": "", "real_tags": ["\u786c\u4ef6", "\u73b0\u4ee3", "modern", "mb"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001044, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u76845\u5e74\u591a\u65f6\u95f4\u91cc\uff0cWINK\u7684\u4f7f\u547d\u4e00\u76f4\u662f\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u201c\u66f4\u7b80\u5355\u3001\u66f4\u667a\u80fd\u7684\u5bb6\u201d\uff0c\u540c\u65f6\u4fdd\u62a4\u6211\u4eec\u5ba2\u6237\u7684\u9690\u79c1\u3002\u6211\u4eec\u8ffd\u6c42\u7b80\u5355\u6027\u548c\u5b89\u5168\u6027\u7684\u65b9\u6cd5\u63a8\u52a8\u4e86\u6211\u4eec\u7684\u8bbe\u8ba1\u4ece\u7528\u6237\u4f53\u9a8c\u5230\u5e55\u540e\u6280\u672f\u3002\n\u6211\u4eec\u7406\u89e3\u667a\u80fd\u5bb6\u5c45\u662f\u9700\u8981\u4fe1\u4efb\u548c\u53ef\u9760\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u8ba4\u8bc6\u5230\u6700\u8fd1\u53d1\u751f\u7684\u4e8b\u4ef6\u7ed9\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u5e26\u6765\u4e86\u4e00\u4e9b\u4e0d\u786e\u5b9a\u6027\u3002\u6211\u4eec\u5bf9\u7ed9\u60a8\u5e26\u6765\u7684\u4e0d\u4fbf\u8868\u793a\u6b49\u610f\uff0c\u5e76\u5e0c\u671b\u5206\u4eab\u4e00\u4e9b\u80cc\u666f\u4fe1\u606f\u4ee5\u53ca\u524d\u8fdb\u7684\u9053\u8def\u3002\n\u81ea2014\u5e74\u4ee5\u6765\uff0cWink\u5df2\u7ecf\u6210\u957f\u4e3a\u652f\u6301400\u591a\u4e07\u53f0\u8054\u7f51\u8bbe\u5907\u3002\u5728\u6b64\u671f\u95f4\uff0cWink\u5b8c\u5168\u4f9d\u8d56\u786c\u4ef6\u9500\u552e\u7684\u4e00\u6b21\u6027\u8d39\u7528\u6765\u652f\u4ed8\u6301\u7eed\u7684\u4e91\u6210\u672c\u3001\u5f00\u53d1\u548c\u5ba2\u6237\u652f\u6301\u3002\u5bf9Wink\u6765\u8bf4\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u672c\u5730\u548c\u8fdc\u7a0b\u8bbf\u95ee\u4ed6\u4eec\u7684\u8bbe\u5907\u603b\u662f\u8981\u4ed8\u51fa\u4ee3\u4ef7\u7684\uff0c\u591a\u5e74\u6765\uff0c\u6211\u4eec\u5728\u964d\u4f4e\u8fd9\u4e9b\u6210\u672c\u65b9\u9762\u53d6\u5f97\u4e86\u5f88\u5927\u8fdb\u5c55\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u6301\u8fd9\u4e00\u529f\u80fd\u3002\nWINK\u5df2\u7ecf\u91c7\u53d6\u4e86\u8bb8\u591a\u63aa\u65bd\u6765\u4fdd\u6301\u60a8\u7684\u4e2d\u5fc3\u7684\u84dd\u706f\u4eae\u7740\uff0c\u7136\u800c\uff0c\u957f\u671f\u6210\u672c\u548c\u6700\u8fd1\u7684\u7ecf\u6d4e\u4e8b\u4ef6\u7ed9\u6211\u4eec\u7684\u4e1a\u52a1\u5e26\u6765\u4e86\u989d\u5916\u7684\u538b\u529b\u3002\u4e0e\u51fa\u552e\u7528\u6237\u6570\u636e\u4ee5\u62b5\u6d88\u63d0\u4f9b\u514d\u8d39\u670d\u52a1\u76f8\u5173\u6210\u672c\u7684\u516c\u53f8\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u662f\u8fd9\u6837\u505a\u7684\u3002\u6570\u636e\u9690\u79c1\u662fWink\u7684\u6838\u5fc3\u4ef7\u503c\u89c2\u4e4b\u4e00\uff0c\u6211\u4eec\u8ba4\u4e3a\u7528\u6237\u6570\u636e\u6c38\u8fdc\u4e0d\u5e94\u8be5\u88ab\u51fa\u552e\u7528\u4e8e\u8425\u9500\u6216\u4efb\u4f55\u76ee\u7684\u3002\n\u5bf9\u4e8e\u5982\u4f55\u6269\u5c55Wink\u7684\u529f\u80fd\u5e76\u6ee1\u8db3\u6211\u4eec\u7528\u6237\u7fa4\u7684\u4f17\u591a\u8981\u6c42\uff0c\u6211\u4eec\u6709\u5f88\u591a\u5f88\u68d2\u7684\u60f3\u6cd5\u3002\u4e3a\u4e86\u6ee1\u8db3\u53d1\u5c55\u548c\u6301\u7eed\u589e\u957f\u7684\u9700\u8981\uff0c\u6211\u4eec\u5c06\u4ece2020\u5e745\u670813\u65e5\u5f00\u59cb\u8fc7\u6e21\u52304.99\u7f8e\u5143\u7684\u6708\u5ea6\u8ba2\u9605\u3002\u8fd9\u9879\u8d39\u7528\u7684\u8bbe\u8ba1\u662f\u5c3d\u53ef\u80fd\u9002\u4e2d\u7684\u3002\u60a8\u7684\u652f\u6301\u5c06\u4f7f\u6211\u4eec\u80fd\u591f\u7ee7\u7eed\u4e3a\u60a8\u63d0\u4f9b\u60a8\u6240\u4f9d\u8d56\u7684\u529f\u80fd\uff0c\u5e76\u4e13\u6ce8\u4e8e\u52a0\u901f\u65b0\u7684\u96c6\u6210\u548c\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u3002\n\u5982\u679c\u4f60\u9009\u62e9\u4e0d\u6ce8\u518c\u8ba2\u9605\uff0c\u4f60\u5c06\u65e0\u6cd5\u518d\u901a\u8fc7\u5e94\u7528\u7a0b\u5e8f\u3001\u8bed\u97f3\u63a7\u5236\u6216API\u8bbf\u95ee\u4f60\u7684Wink\u8bbe\u5907\uff0c\u5e76\u4e14\u4f60\u7684\u81ea\u52a8\u64cd\u4f5c\u5c06\u57285\u670813\u65e5\u88ab\u7981\u7528\u3002\u5982\u679c\u4f60\u51b3\u5b9a\u7a0d\u540e\u8ba2\u9605\uff0c\u4f60\u7684\u8bbe\u5907\u8fde\u63a5\u3001\u8bbe\u7f6e\u548c\u81ea\u52a8\u64cd\u4f5c\u5c06\u88ab\u91cd\u65b0\u6fc0\u6d3b\u3002\n\u6211\u4eec\u7684\u7528\u6237\u793e\u533a\u662fWink\u4e0d\u53ef\u6216\u7f3a\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u7ee7\u7eed\u6210\u4e3a\u60a8\u503c\u5f97\u4fe1\u8d56\u7684\u667a\u80fd\u5bb6\u5c45\u63d0\u4f9b\u5546\u3002\u8bbf\u95eescription.wink.com\u5e76\u8ba2\u9605\u3002", "note_en": "Wink\u2019s mission for the past 5+ years has been to provide users with a \u2018Simpler, Smarter Home,\u2019 while maintaining privacy for our customers. Our approach to simplicity and security has driven our design from the user experience to the technology behind the scenes.\n We understand that a smart home is something that needs to be trusted and dependable, and we recognize that recent events have created some uncertainty around the reliability of the system. We apologize for these inconveniences and want to share some background information as well as the path forward.\n Since 2014, Wink has grown to support more than 4 million connected devices. During this time, Wink has relied solely on the one-time fee derived from hardware sales to cover ongoing cloud costs, development, and customer support. Providing users with local and remote access to their devices will always come at a cost for Wink, and over the years we have made great progress toward reducing these costs so that we can maintain that feature.\n Wink has taken many steps in an effort to keep your Hub\u2019s blue light on, however, long term costs and recent economic events have caused additional strain on our business. Unlike companies that sell user data to offset costs associated with offering free services, we do not. Data privacy is one of Wink\u2019s core values, and we believe that user data should never be sold for marketing or any purpose.\n We have a lot of great ideas on how to expand on Wink\u2019s capabilities and satisfy the many requests from our user base. In order to provide for development and continued growth, we are transitioning to a $4.99 monthly subscription, starting on May 13, 2020. This fee is designed to be as modest as possible. Your support will enable us to continue providing you with the functionality that you\u2019ve come to rely on, and focus on accelerating new integrations and app features.\n Should you choose not to sign up for a subscription you will no longer be able to access your Wink devices from the app, with voice control or through the API, and your automations will be disabled on May 13. Your device connections, settings and automations can be reactivated if you decide to subscribe at a later date.\n Our user community is integral to Wink, and we want to continue to be your trusted smart home provider. Visit  subscription.wink.com and subscribe.", "posttime": "2020-05-07 19:54:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7728\u773c,wink", "title": "\u7728\u773c\u8ba2\u9605", "title_en": "Wink Subscription", "transed": 1, "url": "https://blog.wink.com/wink-blog/2020/5/6/introducing-wink-subscription", "via": "", "real_tags": ["\u7728\u773c", "wink"]}, {"category": "", "categoryclass": "", "imagename": "40c084415cda03650064ce1eed8b3c85.jpeg", "infoid": 1001043, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\nvoid SeedInftion(Double\uff0cint*\uff0cint\uff0cint)\uff1b//\u6dfb\u52a0Run Number\u4f5c\u4e3a\u4e8b\u4ef6\u65e5\u5fd7\u53c2\u6570\uff1aggilani-15/10/2014\u3002\nvoid InfectSweep(Double\uff0cint)\uff1b//\u5c06int\u4f5c\u4e3a\u53c2\u6570\u6dfb\u52a0\u5230InfectSweep\u4ee5\u8bb0\u5f55\u8fd0\u884c\u7f16\u53f7\uff1aggilani-15/10/14\u3002\nvoid SaveOriginDestMatrix(Void)\uff1b//\u65b0\u589e\u4fdd\u5b58\u539f\u76ee\u6807\u77e9\u9635\u529f\u80fd\uff0c\u53ef\u4ee5\u4e0e\u4e3b\u7ed3\u679c\u5206\u5f00\uff1aggilani-13/02/15\u3002\nvoid SaveRandomSeeds(Void)\uff1b//\u589e\u52a0\u4e86\u4fdd\u5b58\u6bcf\u6b21\u8fd0\u884c\u968f\u673a\u79cd\u5b50\u7684\u51fd\u6570\uff1aggilani-09/03/17\u3002\nvoid SaveEvents(Void)\uff1b//\u65b0\u589e\u6b64\u51fd\u6570\u4fdd\u5b58\u6240\u6709\u5b9e\u73b0\u7684\u611f\u67d3\u4e8b\u4ef6\uff1aggilani-15/10/14\u3002\n/*\u3002/*/*/\n/*\u5168\u5c40\u53d8\u91cf(CovidSim.h\u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u7ed3\u6784\u548c\u4e00\u4e9b\u5bb9\u5668)-\u7a0d\u540e\u5206\u914d\u7684\u5185\u5b58\u3002\n/*\u3002/*/*/\u3002\n/TimeSeries\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3aResults\u7684\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8(\u6beb\u4e0d\u5947\u602a)\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u91cf\u7684\u65f6\u95f4\u5e8f\u5217\u3002\u4e3b\u8981\u5728RecordSample\u4e2d\u4f7f\u7528\u3002\n/TSMeanNE\u548cTSVarNE\u662f\u975e\u706d\u7edd\u65f6\u95f4\u5e8f\u5217\u7684\u5747\u503c\u548c\u65b9\u5dee\u3002TSMeanE\u548cTSVarE\u662f\u7edd\u8ff9\u65f6\u95f4\u5e8f\u5217\u7684\u5747\u503c\u548c\u65b9\u5dee\u3002TSMean\u548cTSVar\u662f\u6307\u5411\u5df2\u706d\u7edd\u6216\u672a\u706d\u7edd\u7684\u6307\u9488\u3002\nResults*TimeSeries\uff0c*TSMean\uff0c*TSVar\uff0c*TSMeanNE\uff0c*TSVarNE\uff0c*TSMeanE\uff0c*TSVarE\uff1b/RecordSample\uff0cRecordInfTypes\uff0cSaveResults\u4e2d\u4f7f\u7528\u7684\u65f6\u95f4\u5e8f\u5217\u3002TSMean\u548cTSVar\u3002\n//\u6bcf\u4e2a\u50cf\u7d20\u6700\u591a\u53ef\u5bb9\u7eb320\u4ebf\u4eba\uff0c\u5e94\u8be5\u8db3\u591f\u4e86\u3002\nint32_t*bmPopulation\uff1b//\u6bcf\u4e2a\u4f4d\u56fe\u50cf\u7d20\u7684\u79cd\u7fa4\u3002\u7279\u6b8a\u503c-1\u8868\u793a&#34\uff1b\u56fd\u5bb6\u8fb9\u754c&#34\uff1b\ngotP=goto=gotL=gots=gota=gotAP=gotScF=gotPP=0\uff1b\nfprintf(stderr\uff1bsizeof(Int)=%i sizeof(Long)=%i sizeof(\u6d6e\u52a8)=%i sizeof(Double)=%i sizeof(\u65e0\u7b26\u53f7\u77ed\u6574\u578b)=%i sizeof(int*)=%i\\n&34\uff1b\uff0c(Int)sizeof(Int)\uff0c(Int)sizeof(Long)\uff0c(Int)sizeof(\u6d6e\u70b9)\uff0c(Int)sizeof(Double)\uff0c(Int)sizeof(Double)\uff0c(int\u3002\n/\u8bfb\u53d6\u547d\u4ee4\u884c\u53c2\u6570-\u5f88\u591a\u5185\u5bb9\uff0c\u4f8b\u5982\u968f\u673a\u6570\u79cd\u5b50\uff1b(PRE)\u53c2\u6570\u6587\u4ef6\uff1b\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1b\u603b\u4f53\u6570\u636e\uff1b\u8f93\u51fa\u76ee\u5f55\uff1f\u7b49\u3002\nP.PlaceCloseIndesThresh=P.LoadSaveNetwork=P.DoHeteroDensity=P.DoPeriodicBoraries=P.DoSchoolFile=P.DoAdunitDemog=P.OutputDensFile=P.MaxNumThread=P.DoIntervenonFile=0\uff1b\nP.KernelOffsetScale=P.KernelPowerScale=1.0\uff1b//\u6dfb\u52a0\u4e86\u8be5\u9009\u9879\uff0c\u53ea\u6709\u5728\u547d\u4ee4\u884c\u8f93\u5165\u65f6\u624d\u4f1a\u66f4\u6539\u5185\u6838\u53c2\u6570\uff1aggilani-15/10/2014\u3002\n/\u6eda\u52a8\u67e5\u770b\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u9884\u8ba1\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u5404\u79cdIF\u8bed\u53e5\u3002\n\u5982\u679c((argv[i][0]\uff01=&#39\uff1b/&#39\uff1b)&amp\uff1b&amp\uff1b((argv[i][2]\uff01=&#39\uff1b\uff1a&#39\uff1b)&amp\uff1b&amp\uff1b(argv[i][3]\uff01=&#39\uff1b\uff1a&#39\uff1b))perr=1\uff1b\nELSE IF(argv[i][1]==&#39\uff1bK&#39\uff1b&amp\uff1b&amp\uff1bargv[i][2]==&#39\uff1bP&#39\uff1b&amp\uff1b&amp\uff1bargv[3]==&#39\uff1b\uff1a\uff1a&#39\uff1b)//\u6dfb\u52a0\u4e86\u5185\u6838\u80fd\u529b\u548c\u504f\u79fb\u7f29\u653e\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8f7b\u677e\u66f4\u6539\uff0c\u4ee5\u4fbf\u5feb\u901f\u66f4\u6539\u5185\u6838\uff1aggilani-15/10/14\u3002\n\u5426\u5219\uff0c\u5982\u679c(argv[i][1]==&#39\uff1bC&#39\uff1b&amp\uff1b&amp\uff1bargv[i][2]==&#39\uff1bL&#39\uff1b&amp\uff1b&amp\uff1bargv[i][3]==&#39\uff1bP&#39\uff1b&amp\uff1b&amp\uff1bargv[i][4]==&#39\uff1b1&#39\uff1b&amp\uff1b&amp\uff1bargv[i][5]==&#39\uff1b\uff1a&#\u3002)//\u901a\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u7684param-\u4e0eparam\u6587\u4ef6\u4e2d\u7684#1\u5339\u914d\n\u5426\u5219\uff0c\u5982\u679c(argv[i][1]==&#39\uff1bC&#39\uff1b&amp\uff1b&amp\uff1bargv[i][2]==&#39\uff1bL&#39\uff1b&amp\uff1b&amp\uff1bargv[i][3]==&#39\uff1bP&#39\uff1b&amp\uff1b&amp\uff1bargv[i][4]==&#39\uff1b2&#39\uff1b&amp\uff1b&amp\uff1bargv[i][5]==&#39\uff1b\uff1a&#\u3002)//\u901a\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u7684param-\u4e0eparam\u6587\u4ef6\u4e2d\u7684#2\u5339\u914d\u3002\n\u5426\u5219\uff0c\u5982\u679c(argv[i][1]==&#39\uff1bC&#39\uff1b&amp\uff1b&amp\uff1bargv[i][2]==&#39\uff1bL&#39\uff1b&amp\uff1b&amp\uff1bargv[i][3]==&#39\uff1bP&#39\uff1b&amp\uff1b&amp\uff1bargv[i][4]==&#39\uff1b3&#39\uff1b&amp\uff1b&amp\uff1bargv[i][5]==&#39\uff1b\uff1a&#\u3002)//\u901a\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u7684param-\u4e0eparam\u6587\u4ef6\u4e2d\u7684#3\u5339\u914d\u3002\n\u5426\u5219\uff0c\u5982\u679c(argv[i][1]==&#39\uff1bC&#39\uff1b&amp\uff1b&amp\uff1bargv[i][2]==&#39\uff1bL&#39\uff1b&amp\uff1b&amp\uff1bargv[i][3]==&#39\uff1bP&#39\uff1b&amp\uff1b&amp\uff1bargv[i][4]==&#39\uff1b4&#39\uff1b&amp\uff1b&amp\uff1bargv[i][5]==&#39\uff1b\uff1a&#\u3002)//\u901a\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u7684param-\u4e0eparam\u6587\u4ef6\u4e2d\u7684#4\u5339\u914d\u3002\n\u5426\u5219\uff0c\u5982\u679c(argv[i][1]==&#39\uff1bC&#39\uff1b&amp\uff1b&amp\uff1bargv[i][2]==&#39\uff1bL&#39\uff1b&amp\uff1b&amp\uff1bargv[i][3]==&#39\uff1bP&#39\uff1b&amp\uff1b&amp\uff1bargv[i][4]==&#39\uff1b5&#39\uff1b&amp\uff1b&amp\uff1bargv[i][5]==&#39\uff1b\uff1a&#\u3002)//\u901a\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u7684param-\u4e0eparam\u6587\u4ef6\u4e2d\u7684#5\u5339\u914d\u3002\n\u5426\u5219\uff0c\u5982\u679c(argv[i][1]==&#39\uff1bC&#39\uff1b&amp\uff1b&amp\uff1bargv[i][2]==&#39\uff1bL&#39\uff1b&amp\uff1b&amp\uff1bargv[i][3]==&#39\uff1bP&#39\uff1b&amp\uff1b&amp\uff1bargv[i][4]==&#39\uff1b6&#39\uff1b&amp\uff1b&amp\uff1bargv[i][5]==&#39\uff1b\uff1a&#\u3002)//\u901a\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u7684param-\u4e0eparam\u6587\u4ef6\u4e2d\u7684#6\u5339\u914d\u3002\nIF(PERR)ERR_CRICAL_FMT(&#34\uff1b\u8bed\u6cd5\uff1a\\n%s/P\uff1aParamFile/O\uff1aOutputFile[/AP\uff1aAirTravelFile][/s\uff1aSchoolFile][/D\uff1aDensityFile][/L\uff1aNetworkFileToLoad|/S\uff1aNetworkFileToSave][/R\uff1aR0scaling]Seed1 Seed2 Seed3 Seed4\\n&#34\uff1b\uff0cargv[0])\uff1b\n/*//*\u3002/*/*\u3002\n/*//*\u3002/*/*\n/*//*\u3002/*/*\u3002\n/*//*\u3002/*/*\u3002\nIF(\uff01GotAP)ERR_CRICAL_FMT(&#34\uff1b\u8bed\u6cd5\uff1a\\n%s/P\uff1aParamFile/O\uff1aOutputFile/AP\uff1aAirTravelFile[/s\uff1aSchoolFile][/D\uff1aDensityFile][/L\uff1aNetworkFileToLoad|/S\uff1aNetworkFileToSave][/R\uff1aR0scaling]Seed1 Seed2 Seed3 Seed4\\n&#34\uff1b\uff0cargv[0])\uff1b\n/*//*\u3002/*/*\u3002\n/*//*\u3002/*/*\u3002\n/*//*\u3002/*/*\u3002\n/*//*\u3002/*/*\u3002\nInitModel(I)\uff1b//\u5c06\u8fd0\u884c\u53f7\u4f20\u5165RunModel\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd0\u884c\u53f7\u4fdd\u5b58\u5728\u611f\u67d3\u4e8b\u4ef6\u65e5\u5fd7\u4e2d\uff1aggilani-15/10/2014\n{//\u5df2\u4e2d\u65ad\u4ee5\u91cd\u7f6e\u5047\u671f\u65f6\u95f4\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u76ee\u524d\u4ec5\u5728\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\u53d1\u751f\uff0c\u65e0\u8bba\u6b63\u5728\u8fd0\u884c\u591a\u5c11\u6b21\u5b9e\u73b0\u3002\nfor(i=0\uff1bi&lt\uff1bmax_Countries\uff1bi++){CountryNames[i]=CountryNameBuf+128*i\uff1bCountryNames[i][0]=0\uff1b}\u3002\nfor(i=0\uff1bi&lt\uff1bMAX_ADUNITS\uff1bi++){AdunitListNames[i]=AdunitListNamesBuf+128*i\uff1bAdunitListNames[i][0]=0\uff1b}\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u672a\u706d\u7edd\u7684\u5b9e\u73b0\u6570&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(p.nrn)\uff0c1\uff0c1\uff0c0))p.nrn=p.nr\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u5b9a\u4e49\u5c0f\u7206\u53d1\u7684\u6700\u5927\u75c5\u4f8b\u6570&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.SmallEpidemicCases)\uff0c1\uff0c1\uff0c0)P.SmallEpidemicCases=-1\uff1b\nGetInputParameter(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u6bcf\u7a7a\u95f4\u5355\u5143\u683c\u5bbd\u5ea6\u7684\u5fae\u5355\u5143\u6570&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(p.nmcl)\uff0c1\uff0c1\uff0c0)\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bReset Seed for\u6bcf\u6b21\u8fd0\u884c&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.ResetSeeds)\uff0c1\uff0c1\uff0c0))P.ResetSeeds=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u4e3a\u6bcf\u6b21\u8fd0\u884c&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.KeepSameSeeds)\uff0c1\uff0c1\uff0c0))P.KeepSameSeeds=0\uff1b//\u6dfb\u52a0\u6b64\u547d\u4ee4\u4ee5\u63a7\u5236\u4f7f\u7528\u54ea\u4e9b\u79cd\u5b50\uff1aGigilani 27/11/19\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bReset SeedsPostIntervention&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.ResetSeedsPostIntervention)\uff0c1\uff0c1\uff0c0))p.ResetSeedsPostIntervention=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u5e72\u9884\u540e\u91cd\u7f6e\u79cd\u5b50\u7684\u65f6\u95f4&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.TimeToResetSeeds)\uff0c1\uff0c1\uff0c0)P.TimeToResetSeeds=1000000\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bInclude\u5bb6\u5ead&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoHousehold)\uff0c1\uff0c1\uff0c0)P.DoHousehold=1\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputAge&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputAge)\uff0c1\uff0c1\uff0c0)P.OutputAge=1\uff1b/\u9ed8\u8ba4\u6253\u5f00\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputSeverityAdminUnit&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputSeverityAdminUnit)\uff0c1\uff0c1\uff0c0)P.OutputSeverityAdminUnit=1\uff1b/\u9ed8\u8ba4\u6253\u5f00\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputR0&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputR0)\uff0c1\uff0c1\uff0c0))p.OutputR0=0\uff1b/\u9ed8\u8ba4\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputControls&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputControls)\uff0c1\uff0c1\uff0c0)P.OutputControls=0\uff1b/\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputCountry&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputCountry)\uff0c1\uff0c1\uff0c0)P.OutputCountry=0\uff1b/\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputAdUnitVar&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputAdUnitVar)\uff0c1\uff0c1\uff0c0)P.OutputAdUnitVar=0\uff1b/\u9ed8\u8ba4\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputHousehold&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputHousehold)\uff0c1\uff0c1\uff0c0)P.OutputHousehold=0\uff1b/\u9ed8\u8ba4\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputInfType&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputInfType)\uff0c1\uff0c1\uff0c0)P.OutputInfType=0\uff1b/\u9ed8\u8ba4\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputNonSeverity&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputNonSeverity)\uff0c1\uff0c1\uff0c0)P.OutputNonSeverity=0\uff1b/\u9ed8\u8ba4\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1bOutputNonSummaryResults&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputNonSummaryResults)\uff0c1\uff0c1\uff0c0)P.OutputNonSummaryResults=0\uff1b/\u9ed8\u8ba4\u5173\u95ed\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b)\u66f4\u6b63\u5bb6\u5ead\u5206\u914d\u540e\u7684\u5e74\u9f84\u5206\u5e03\uff0c\u4ee5\u7cbe\u786e\u5339\u914d\u6307\u5b9a\u7684\u4eba\u53e3\u7edf\u8ba1&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoCorrectAgeDist)\uff0c1\uff0c1\uff0c0)p.DoCorrectAgeDist=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u5305\u62ec\u56fd\u5bb6/\u5730\u533a\u5185\u7684\u884c\u653f\u5355\u4f4d&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoAdUnits)\uff0c1\uff0c1\uff0c0))p.DoAdUnits=1\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u9664\u6570&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.CountryDivisor)\uff0c1\uff0c1\uff0c0))P.CountryDivisor=1\uff1b\n\u5982\u679c(\uff01(AdunitNamesBuf=(char*)malloc(3*ADUNIT_LOOKUP_SIZE*360*sizeof(Char)ERR_CRICAL(&#34\uff1b\u65e0\u6cd5\u5206\u914d\u4e34\u65f6\u5b58\u50a8\\n&#34\uff1b)\uff1b\nAdunitNames[3*i+1]=AdunitNamesBuf+3*i*360+60\uff1b\nAdunitNames[3*i+2]=AdunitNamesBuf+3*i*360+160\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bDivisor for Level 1\u7ba1\u7406\u5355\u5143&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.AdunitLevel1Divisor)\uff0c1\uff0c1\uff0c0)P.AdunitLevel1Divisor=1\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bMask for Level 1\u7ba1\u7406\u5355\u5143&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.AdunitLevel1Mask)\uff0c1\uff0c1\uff0c0))P.AdunitLevel1Mask=1000000000\uff1b\nNA=(GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\uff0c&#34\uff1b%s&#34\uff1b\uff0c(void*)AdunitNames\uff0c3*ADUNIT_LOOKUP_SIZE\uff0c1\uff0c0))/3\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u8981\u5305\u62ec\u7684\u56fd\u5bb6/\u5730\u533a\u6570&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1bnc\uff0c1\uff0c1\uff0c0))nc=0\uff1b\nGetInputParameter(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u8981\u5305\u542b\u7684\u56fd\u5bb6/\u5730\u533a\u540d\u79f0\u5217\u8868&#34\uff1b\uff0c&#34\uff1b%s&#34\uff1b\uff0c(NC&gt\uff1b1)\uff1f(void*)CountryNames)\uff1a((void*)CountryNames[0])\uff0cNC\uff0c1\uff0c0)\uff1b\n\u5982\u679c((AdunitNames[3*i+1][0])&amp\uff1b&amp\uff1b(\uff01strcmp(AdunitNames[3*i+1]\uff0cCountryNames[j])&amp\uff1b&amp\uff1b(atoi(AdunitNames[3*i])\uff01=0)\u3002\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u8981\u5305\u62ec&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.NumAdunit)\uff0c1\uff0c1\uff0c0))P.NumAdunit=0\uff1b\nGetInputParameter(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u8981\u5305\u62ec\u76841\u7ea7\u7ba1\u7406\u5355\u5143\u5217\u8868&#34\uff1b\uff0c&#34\uff1b%s&#34\uff1b\uff0c(P.NumAdunit&gt\uff1b1)\uff1f((void*)AdunitListNames)\uff1a((void*)AdunitListNames[0])\uff0cP.NumAdunit\uff0c1\uff0c0)\uff1b\n\u5bf9\u4e8e(j=0\uff1b(j&lt\uff1bna)&amp\uff1b&amp\uff1b(\uff01f)\uff1bj++)f=(\uff01strcmp(AdunitNames[3*j+2]\uff0cAdunitListNames[i]))\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff1b&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoAdunitOutput)\uff0c1\uff0c1\uff0c0))p.DoAdunitOutput=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u884c\u653f\u5355\u4f4d\u8fb9\u754c&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoAdunitBoraryOutput)\uff0c1\uff0c1\uff0c0)p.DoAdunitOveraryOutput=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u6b63\u786e\u7684\u7ba1\u7406\u5355\u5143\u4eba\u53e3&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoCorrectAdunitPop)\uff0c1\uff0c1\uff0c0)P.DoCorrectAdunitPop=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bFix Pull Size at\u6307\u5b9a\u503c&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoSpecifyPop)\uff0c1\uff0c1\uff0c0))P.DoSpecifyPop=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bAdminFile_dat\uff1b&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.AdunitBitmapDivisor)\uff0c1\uff0c1\uff0c0))p.AdunitBitmapDivisor=1\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u53ea\u8f93\u51fa\u4e00\u4e2a\u884c\u653f\u5355\u4f4d&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoOutputPlaceDistForOneAdunit)\uff0c1\uff0c1\uff0c0))p.DoOutputPlaceDistForOneAdunit=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u8981\u8f93\u51fa\u7684\u5bb6\u5ead\u8ddd\u79bb\u5206\u5e03&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.OutputPlaceDistAdunit)\uff0c1\uff0c1\uff0c0))p.DoOutputPlaceDistForOneAdunit=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1binclude age&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(p.doage)\uff0c1\uff0c1\uff0c0))p.doage=1\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u521d\u59cb\u514d\u75ab\u5145\u5f53\u90e8\u5206\u514d\u75ab&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoPartialImmunity)\uff0c1\uff0c1\uff0c0))p.DoPartialImmunity=1\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cPreParamFile_dat\uff0c&#34\uff1b\u521d\u59cb\u514d\u75ab\u9002\u7528\u4e8e\u6240\u6709\u5bb6\u5ead\u6210\u5458&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoWholeHouseholdImmunity)\uff0c1\uff0c1\uff0c0)p.DoWholeHouseholdImmunity=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bInclude\u7a7a\u95f4\u4f20\u8f93&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.DoSpatial)\uff0c1\uff0c1\uff0c0))P.DoSpatial=1\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u5185\u6838\u7b2c\u4e09\u4e2a\u53c2\u6570&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.MoveKernelP3)\uff0c1\uff0c1\uff0c0))p.MoveKernelP3=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bKernel 4 param&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.MoveKernelP4)\uff0c1\uff0c1\uff0c0))p.MoveKernelP4=0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bKernel Shape&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.MoveKernelShape)\uff0c1\uff0c1\uff0c0))P.MoveKernelShape=1.0\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bAirport Kernel Type&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.AirportKernelType)\uff0c1\uff0c1\uff0c0))p.AirportKernelType=P.MoveKernelType\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bAirport Kernel Scale&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.AirportKernelScale)\uff0c1\uff0c1\uff0c0))p.AirportKernelScale=P.MoveKernelScale\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bAirport Kernel Shape&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.AirportKernelShape)\uff0c1\uff0c1\uff0c0))p.AirportKernelShape=P.MoveKernelShape\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bAirport Kernel 3param&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.AirportKernelP3)\uff0c1\uff0c1\uff0c0))p.AirportKernelP3=P.MoveKernelP3\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bAirport Kernel 4 param&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.AirportKernelP4)\uff0c1\uff0c1\uff0c0))p.AirportKernelP4=P.MoveKernelP4\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u4f4d\u7f6e\u7c7b\u578b\u6570&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)&amp\uff1b(P.PlaceTypeNum)\uff0c1\uff0c1\uff0c0))P.PlaceTypeNum=0\uff1b\nGetInputParameter(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bfor age group 1 in place type&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)P.PlaceTypeAgeMin\uff0cP.PlaceTypeNum\uff0c1\uff0c0)\uff1b\nGetInputParameter(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1bage group 1 in place type&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)P.PlaceTypeAgeMax\uff0cP.PlaceTypeNum\uff0c1\uff0c0)\uff1b\nGetInputParameter(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u5e74\u9f84\u7ec41\u5728\u4f4d\u6bd4\u4f8b\u7c7b\u578b&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.PlaceTypePropAgeGroup)\uff0cP.PlaceTypeNum\uff0c1\uff0c0)\uff1b\n\u5982\u679c(\uff01GetInputParameter2(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u5e74\u9f84\u7ec42\u7684\u5c31\u5730\u6bd4\u4f8b\u7c7b\u578b&#34\uff1b\uff0c&#34\uff1b%lf&#34\uff1b\uff0c(void*)&amp\uff1b(P.PlaceTypePropAgeGroup2)\uff0cP.PlaceTypeNum\uff0c1\uff0c0))\u3002\nGetInputParameter(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u5e74\u9f84\u7ec42\u7684\u6700\u5c0f\u5e74\u9f84\u5c31\u5730\u7c7b\u578b&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)P.PlaceTypeAgeMin2\uff0cP.PlaceTypeNum\uff0c1\uff0c0)\uff1b\nGetInputParameter(ParamFile_dat\uff0cAdminFile_dat\uff0c&#34\uff1b\u5e74\u9f84\u7ec42\u7684\u6700\u957f\u5e74\u9f84\u4f4d\u7f6e\u7c7b\u578b&#34\uff1b\uff0c&#34\uff1b%i&#34\uff1b\uff0c(void*)P.PlaceTypeAgeMax2\uff0cP.placeType\u3002\n..", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n       void  SeedInfection( double,  int*,  int,  int);   //adding run number as a parameter for event log: ggilani - 15/10/2014\n        void  InfectSweep( double,  int);   //added int as argument to InfectSweep to record run number: ggilani - 15/10/14\n            void  SaveOriginDestMatrix( void);   //added function to save origin destination matrix so it can be done separately to the main results: ggilani - 13/02/15\n      void  SaveRandomSeeds( void);   //added this function to save random seeds for each run: ggilani - 09/03/17\n  void  SaveEvents( void);   //added this function to save infection events from all realisations: ggilani - 15/10/14\n                          ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** /////\n  ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** GLOBAL VARIABLES (some structures in CovidSim.h file and some containers) - memory allocated later.\n  ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** ///// ***** /////\n                        //// TimeSeries is an array of type results, used to store (unsurprisingly) a time series of every quantity in results. Mostly used in RecordSample.\n  //// TSMeanNE and TSVarNE are the mean and variance of non-extinct time series. TSMeanE and TSVarE are the mean and variance of extinct time series. TSMean and TSVar are pointers that point to either extinct or non-extinct.\n  results* TimeSeries, * TSMean, * TSVar, * TSMeanNE, * TSVarNE, * TSMeanE, * TSVarE;   //// TimeSeries used in RecordSample, RecordInfTypes, SaveResults. TSMean and TSVar\n                                    // These allow up to about 2 billion people per pixel, which should be ample.\n  int32_t *bmPopulation;   // The population in each bitmap pixel. Special value -1 means &#34;country boundary&#34;\n                                          GotP = GotO = GotL = GotS = GotA = GotAP = GotScF = GotPP =  0;\n      fprintf(stderr,   &#34;sizeof(int)=%i sizeof(long)=%i sizeof(float)=%i sizeof(double)=%i sizeof(unsigned short int)=%i sizeof(int *)=%i \\n &#34;, ( int) sizeof( int), ( int) sizeof( long), ( int) sizeof( float), ( int) sizeof( double), ( int) sizeof( unsigned  short  int), ( int) sizeof( int*));\n      ///// Read in command line arguments - lots of things, e.g. random number seeds; (pre)parameter files; binary files; population data; output directory? etc.\n                          P. PlaceCloseIndepThresh = P. LoadSaveNetwork = P. DoHeteroDensity = P. DoPeriodicBoundaries = P. DoSchoolFile = P. DoAdunitDemog = P. OutputDensFile = P. MaxNumThreads = P. DoInterventionFile =  0;\n      P. KernelOffsetScale = P. KernelPowerScale =  1.0;   //added this so that kernel parameters are only changed if input from the command line: ggilani - 15/10/2014\n      //// scroll through command line arguments, anticipating what they can be using various if statements.\n      if ((argv[i][ 0] !=   &#39;/ &#39;) &amp;&amp; ((argv[i][ 2] !=   &#39;: &#39;) &amp;&amp; (argv[i][ 3] !=   &#39;: &#39;))) Perr =  1;\n                                                                            else  if (argv[i][ 1] ==   &#39;K &#39; &amp;&amp; argv[i][ 2] ==   &#39;P &#39; &amp;&amp; argv[i][ 3] ==   &#39;: &#39;)   //added Kernel Power and Offset scaling so that it can easily be altered from the command line in order to vary the kernel quickly: ggilani - 15/10/14\n                else  if (argv[i][ 1] ==   &#39;C &#39; &amp;&amp; argv[i][ 2] ==   &#39;L &#39; &amp;&amp; argv[i][ 3] ==   &#39;P &#39; &amp;&amp; argv[i][ 4] ==   &#39;1 &#39; &amp;&amp; argv[i][ 5] ==   &#39;: &#39;)   // generic command line specified param - matched to #1 in param file\n        else  if (argv[i][ 1] ==   &#39;C &#39; &amp;&amp; argv[i][ 2] ==   &#39;L &#39; &amp;&amp; argv[i][ 3] ==   &#39;P &#39; &amp;&amp; argv[i][ 4] ==   &#39;2 &#39; &amp;&amp; argv[i][ 5] ==   &#39;: &#39;)   // generic command line specified param - matched to #2 in param file\n        else  if(argv[i][ 1] ==   &#39;C &#39; &amp;&amp; argv[i][ 2] ==   &#39;L &#39; &amp;&amp; argv[i][ 3] ==   &#39;P &#39; &amp;&amp; argv[i][ 4] ==   &#39;3 &#39; &amp;&amp; argv[i][ 5] ==   &#39;: &#39;)   // generic command line specified param - matched to #3 in param file\n        else  if(argv[i][ 1] ==   &#39;C &#39; &amp;&amp; argv[i][ 2] ==   &#39;L &#39; &amp;&amp; argv[i][ 3] ==   &#39;P &#39; &amp;&amp; argv[i][ 4] ==   &#39;4 &#39; &amp;&amp; argv[i][ 5] ==   &#39;: &#39;)   // generic command line specified param - matched to #4 in param file\n        else  if(argv[i][ 1] ==   &#39;C &#39; &amp;&amp; argv[i][ 2] ==   &#39;L &#39; &amp;&amp; argv[i][ 3] ==   &#39;P &#39; &amp;&amp; argv[i][ 4] ==   &#39;5 &#39; &amp;&amp; argv[i][ 5] ==   &#39;: &#39;)   // generic command line specified param - matched to #5 in param file\n        else  if(argv[i][ 1] ==   &#39;C &#39; &amp;&amp; argv[i][ 2] ==   &#39;L &#39; &amp;&amp; argv[i][ 3] ==   &#39;P &#39; &amp;&amp; argv[i][ 4] ==   &#39;6 &#39; &amp;&amp; argv[i][ 5] ==   &#39;: &#39;)   // generic command line specified param - matched to #6 in param file\n                                                                                                                                                    if (Perr)  ERR_CRITICAL_FMT(  &#34;Syntax: \\n%s /P:ParamFile /O:OutputFile [/AP:AirTravelFile] [/s:SchoolFile] [/D:DensityFile] [/L:NetworkFileToLoad | /S:NetworkFileToSave] [/R:R0scaling] Seed1 Seed2 Seed3 Seed4 \\n &#34;, argv[ 0]);\n    //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n    //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n                                                    //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n    //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n              if (!GotAP)  ERR_CRITICAL_FMT(  &#34;Syntax: \\n%s /P:ParamFile /O:OutputFile /AP:AirTravelFile [/s:SchoolFile] [/D:DensityFile] [/L:NetworkFileToLoad | /S:NetworkFileToSave] [/R:R0scaling] Seed1 Seed2 Seed3 Seed4 \\n &#34;, argv[ 0]);\n        //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n    //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n                                            //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n    //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// **** //// ****\n                                                                                      InitModel(i);   //passing run number into RunModel so we can save run number in the infection event log: ggilani - 15/10/2014\n      {   // has been interrupted to reset holiday time. Note that this currently only happens in the first run, regardless of how many realisations are being run.\n                                                                                                                for (i =  0; i &lt; MAX_COUNTRIES; i++) { CountryNames[i] = CountryNameBuf +  128 * i; CountryNames[i][ 0] =  0; }\n    for (i =  0; i &lt; MAX_ADUNITS; i++) { AdunitListNames[i] = AdunitListNamesBuf +  128 * i; AdunitListNames[i][ 0] =  0; }\n                                  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Number of non-extinct realisations &#34;,   &#34;%i &#34;, ( void*) &amp; (P. NRN),  1,  1,  0)) P. NRN = P. NR;\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Maximum number of cases defining small outbreak &#34;,   &#34;%i &#34;, ( void*) &amp; (P. SmallEpidemicCases),  1,  1,  0)) P. SmallEpidemicCases = - 1;\n    GetInputParameter(ParamFile_dat, PreParamFile_dat,   &#34;Number of micro-cells per spatial cell width &#34;,   &#34;%i &#34;, ( void*) &amp; (P. NMCL),  1,  1,  0);\n    if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Reset seeds for every run &#34;,   &#34;%i &#34;, ( void*) &amp; (P. ResetSeeds),  1,  1,  0)) P. ResetSeeds =  0;\n      if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Keep same seeds for every run &#34;,   &#34;%i &#34;, ( void*) &amp; (P. KeepSameSeeds),  1,  1,  0)) P. KeepSameSeeds =  0;   //added this to control which seeds are used: ggilani 27/11/19\n    if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Reset seeds after intervention &#34;,   &#34;%i &#34;, ( void*) &amp; (P. ResetSeedsPostIntervention),  1,  1,  0)) P. ResetSeedsPostIntervention =  0;\n      if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Time to reset seeds after intervention &#34;,   &#34;%i &#34;, ( void*) &amp; (P. TimeToResetSeeds),  1,  1,  0)) P. TimeToResetSeeds =  1000000;\n    if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Include households &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoHouseholds),  1,  1,  0)) P. DoHouseholds =  1;\n    if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputAge &#34;\t\t\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputAge)\t\t\t\t\t,  1,  1,  0)) P. OutputAge =  1;\t\t\t\t  //// ON by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputSeverityAdminUnit &#34;\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputSeverityAdminUnit)\t,  1,  1,  0)) P. OutputSeverityAdminUnit =  1;\t  //// ON by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputR0 &#34;\t\t\t\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputR0)\t\t\t\t\t,  1,  1,  0)) P. OutputR0 =  0;\t\t\t\t   //// OFF by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputControls &#34;\t\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputControls)\t\t\t,  1,  1,  0)) P. OutputControls =  0;\t\t   //// OFF by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputCountry &#34;\t\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputCountry)\t\t\t\t,  1,  1,  0)) P. OutputCountry =  0;\t\t   //// OFF by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputAdUnitVar &#34;\t\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputAdUnitVar)\t\t\t,  1,  1,  0)) P. OutputAdUnitVar =  0;\t\t   //// OFF by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputHousehold &#34;\t\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputHousehold)\t\t\t,  1,  1,  0)) P. OutputHousehold =  0;\t\t   //// OFF by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputInfType &#34;\t\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputInfType)\t\t\t\t,  1,  1,  0)) P. OutputInfType =  0;\t\t   //// OFF by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputNonSeverity &#34;\t\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputNonSeverity)\t\t\t,  1,  1,  0)) P. OutputNonSeverity =  0;\t\t  //// OFF by default.\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;OutputNonSummaryResults &#34;\t,   &#34;%i &#34;, ( void*) &amp; (P. OutputNonSummaryResults)\t,  1,  1,  0)) P. OutputNonSummaryResults =  0;\t  //// OFF by default.\n              if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Correct age distribution after household allocation to exactly match specified demography &#34;,   &#34;%i &#34;, ( void*)&amp;(P. DoCorrectAgeDist),  1,  1,  0)) P. DoCorrectAgeDist =  0;\n                            if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Include administrative units within countries &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoAdUnits),  1,  1,  0)) P. DoAdUnits =  1;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Divisor for countries &#34;,   &#34;%i &#34;, ( void*) &amp; (P. CountryDivisor),  1,  1,  0)) P. CountryDivisor =  1;\n          if (!(AdunitNamesBuf = ( char*) malloc( 3 * ADUNIT_LOOKUP_SIZE *  360 *  sizeof( char))))  ERR_CRITICAL(  &#34;Unable to allocate temp storage \\n &#34;);\n            AdunitNames[ 3 * i +  1] = AdunitNamesBuf +  3 * i *  360 +  60;\n  AdunitNames[ 3 * i +  2] = AdunitNamesBuf +  3 * i *  360 +  160;\n    if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Divisor for level 1 administrative units &#34;,   &#34;%i &#34;, ( void*)&amp;(P. AdunitLevel1Divisor),  1,  1,  0)) P. AdunitLevel1Divisor =  1;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Mask for level 1 administrative units &#34;,   &#34;%i &#34;, ( void*)&amp;(P. AdunitLevel1Mask),  1,  1,  0)) P. AdunitLevel1Mask =  1000000000;\n  na = ( GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Codes and country/province names for admin units &#34;,   &#34;%s &#34;, ( void*)AdunitNames,  3 * ADUNIT_LOOKUP_SIZE,  1,  0)) /  3;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Number of countries to include &#34;,   &#34;%i &#34;, ( void*)&amp;nc,  1,  1,  0)) nc =  0;\n          GetInputParameter(ParamFile_dat, AdminFile_dat,   &#34;List of names of countries to include &#34;,   &#34;%s &#34;, (nc &gt;  1) ? (( void*)CountryNames) : (( void*)CountryNames[ 0]), nc,  1,  0);\n        if ((AdunitNames[ 3 * i +  1][ 0]) &amp;&amp; (! strcmp(AdunitNames[ 3 * i +  1], CountryNames[j])) &amp;&amp; ( atoi(AdunitNames[ 3 * i]) !=  0))\n                        if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Number of level 1 administrative units to include &#34;,   &#34;%i &#34;, ( void*) &amp; (P. NumAdunits),  1,  1,  0)) P. NumAdunits =  0;\n          GetInputParameter(ParamFile_dat, AdminFile_dat,   &#34;List of level 1 administrative units to include &#34;,   &#34;%s &#34;, (P. NumAdunits &gt;  1) ? (( void*)AdunitListNames) : (( void*)AdunitListNames[ 0]), P. NumAdunits,  1,  0);\n              for (j =  0; (j &lt; na) &amp;&amp; (!f); j++) f = (! strcmp(AdunitNames[ 3 * j +  2], AdunitListNames[i]));\n                                          if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Output incidence by administrative unit &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoAdunitOutput),  1,  1,  0)) P. DoAdunitOutput =  0;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Draw administrative unit boundaries on maps &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoAdunitBoundaryOutput),  1,  1,  0)) P. DoAdunitBoundaryOutput =  0;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Correct administrative unit populations &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoCorrectAdunitPop),  1,  1,  0)) P. DoCorrectAdunitPop =  0;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Fix population size at specified value &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoSpecifyPop),  1,  1,  0)) P. DoSpecifyPop =  0;\n    if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Divisor for administrative unit codes for boundary plotting on bitmaps &#34;,   &#34;%i &#34;, ( void*) &amp; (P. AdunitBitmapDivisor),  1,  1,  0)) P. AdunitBitmapDivisor =  1;\n  if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Only output household to place distance distribution for one administrative unit &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoOutputPlaceDistForOneAdunit),  1,  1,  0)) P. DoOutputPlaceDistForOneAdunit =  0;\n      if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Administrative unit for which household to place distance distribution to be output &#34;,   &#34;%i &#34;, ( void*) &amp; (P. OutputPlaceDistAdunit),  1,  1,  0)) P. DoOutputPlaceDistForOneAdunit =  0;\n                    if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Include age &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoAge),  1,  1,  0)) P. DoAge =  1;\n                              if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Initial immunity acts as partial immunity &#34;,   &#34;%i &#34;, ( void*)&amp;(P. DoPartialImmunity),  1,  1,  0)) P. DoPartialImmunity =  1;\n      if (! GetInputParameter2(ParamFile_dat, PreParamFile_dat,   &#34;Initial immunity applied to all household members &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoWholeHouseholdImmunity),  1,  1,  0)) P. DoWholeHouseholdImmunity =  0;\n                                                                                                                                    if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Include spatial transmission &#34;,   &#34;%i &#34;, ( void*) &amp; (P. DoSpatial),  1,  1,  0)) P. DoSpatial =  1;\n              if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Kernel 3rd param &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. MoveKernelP3),  1,  1,  0)) P. MoveKernelP3 =  0;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Kernel 4th param &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. MoveKernelP4),  1,  1,  0)) P. MoveKernelP4 =  0;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Kernel Shape &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. MoveKernelShape),  1,  1,  0)) P. MoveKernelShape =  1.0;\n          if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Airport Kernel Type &#34;,   &#34;%i &#34;, ( void*) &amp; (P. AirportKernelType),  1,  1,  0)) P. AirportKernelType = P. MoveKernelType;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Airport Kernel Scale &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. AirportKernelScale),  1,  1,  0)) P. AirportKernelScale = P. MoveKernelScale;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Airport Kernel Shape &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. AirportKernelShape),  1,  1,  0)) P. AirportKernelShape = P. MoveKernelShape;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Airport Kernel 3rd param &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. AirportKernelP3),  1,  1,  0)) P. AirportKernelP3 = P. MoveKernelP3;\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Airport Kernel 4th param &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. AirportKernelP4),  1,  1,  0)) P. AirportKernelP4 = P. MoveKernelP4;\n          if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Number of types of places &#34;,   &#34;%i &#34;, ( void*)&amp;(P. PlaceTypeNum),  1,  1,  0)) P. PlaceTypeNum =  0;\n                GetInputParameter(ParamFile_dat, AdminFile_dat,   &#34;Minimum age for age group 1 in place types &#34;,   &#34;%i &#34;, ( void*)P. PlaceTypeAgeMin, P. PlaceTypeNum,  1,  0);\n  GetInputParameter(ParamFile_dat, AdminFile_dat,   &#34;Maximum age for age group 1 in place types &#34;,   &#34;%i &#34;, ( void*)P. PlaceTypeAgeMax, P. PlaceTypeNum,  1,  0);\n  GetInputParameter(ParamFile_dat, AdminFile_dat,   &#34;Proportion of age group 1 in place types &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. PlaceTypePropAgeGroup), P. PlaceTypeNum,  1,  0);\n  if (! GetInputParameter2(ParamFile_dat, AdminFile_dat,   &#34;Proportion of age group 2 in place types &#34;,   &#34;%lf &#34;, ( void*) &amp; (P. PlaceTypePropAgeGroup2), P. PlaceTypeNum,  1,  0))\n                      GetInputParameter(ParamFile_dat, AdminFile_dat,   &#34;Minimum age for age group 2 in place types &#34;,   &#34;%i &#34;, ( void*)P. PlaceTypeAgeMin2, P. PlaceTypeNum,  1,  0);\n  GetInputParameter(ParamFile_dat, AdminFile_dat,   &#34;Maximum age for age group 2 in place types &#34;,   &#34;%i &#34;, ( void*)P. PlaceTypeAgeMax2, P. PlaceType\n......", "posttime": "2020-05-07 19:53:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u51a0\u72b6\u75c5\u6bd2,\u75c5\u6bd2,\u7406\u5de5\u5b66\u9662,imperial", "title": "\u5e1d\u56fd\u7406\u5de5\u5b66\u9662\u51a0\u72b6\u75c5\u6bd2\u5efa\u6a21\u4ee3\u7801/\u5c3c\u5c14\u00b7\u5f17\u683c\u68ee(\u4e3b\u8981\u90e8\u5206)", "title_en": "Code for Covid-19 modelling by the Imperial College/Neil Ferguson (main part)", "transed": 1, "url": "https://github.com/mrc-ide/covid-sim/blob/bd87d475563cd54978325bf73ce45e80a7c8de65/src/CovidSim.cpp", "via": "", "real_tags": ["\u4ee3\u7801", "\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u7406\u5de5\u5b66\u9662", "imperial"]}]