[{"category": "", "categoryclass": "", "imagename": "9ba6b1b1a5caf04db0e72719d99583df.jpg", "infoid": 1006478, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5468\u524d\u7684\u4e00\u5929\u65e9\u4e0a\uff0c\u6211\u548c\u6211\u7684\u670b\u53cb\u970d\u62c9\u897f\u5965\u804a\u5929\uff0c\u4ed6\u662f\u7ebd\u7ea6\u5e02\u5730\u533a\u7684\u4e00\u540d\u6570\u5b66\u5bb6\u3002\u4ed6\u544a\u8bc9\u6211\uff0c\u4ed6\u5728\u56db\u6708\u4efd\u5931\u53bb\u4e86\u51e0\u4e2a\u661f\u671f\u7684\u55c5\u89c9\u3002\u4ed6\u5728\u4e3a\u903e\u8d8a\u8282\u505a\u996d\uff0c\u751a\u81f3\u95fb\u4e0d\u5230\u5409\u83f2\u5c14\u7279\u9c7c\u7684\u5473\u9053\u3002\u4ed6\u6ca1\u6709\u591a\u60f3\u8fd9\u4ef6\u4e8b\uff0c\u4e5f\u6ca1\u6709\u628a\u5b83\u4e0e\u4ed6\u5df2\u7ecf\u6709\u51e0\u5929\u8f7b\u5fae\u751f\u75c5\u8fd9\u4e00\u4e8b\u5b9e\u8054\u7cfb\u8d77\u6765\u3002\u6211\u5efa\u8bae\u4ed6\u63a5\u53d7sars-cov-2\u6297\u4f53\u68c0\u6d4b\uff0c\u8fd9\u662f\u5bfc\u81f4\u65b0\u51a0\u80ba\u708e\u7684\u75c5\u6bd2\uff1b\u6211\u8fd8\u5efa\u8bae\u4ed6\u505a\u4e00\u4e2a\u4e0e\u6700\u8fd1\u547c\u5438\u9053\u75be\u75c5\u76f8\u5173\u7684\u55c5\u89c9\u548c\u5473\u89c9\u75c7\u72b6\u7684\u5728\u7ebf\u8c03\u67e5(\u7a0d\u540e\u4f1a\u6709\u66f4\u591a\u4ecb\u7ecd)\u3002\u7ed3\u679c\u53d1\u73b0\u970d\u62c9\u897f\u5965\u6709\u6297\u4f53\uff0c\u6240\u4ee5\u4ed6\u7b7e\u7ea6\u6350\u732e\u8840\u6d46\u3002\u8fd9\u662f\u4e00\u4e2a\u5e78\u8fd0\u7684\u8bca\u65ad\uff0c\u52a0\u4e0a\u65f6\u95f4\u548c\u5730\u7406\u56e0\u7d20\uff1b\u4e0e\u65b0\u51a0\u80ba\u708e\u6709\u5173\u7684\u55c5\u89c9\u548c\u5473\u89c9\u75c7\u72b6\u4f3c\u4e4e\u8868\u73b0\u4e3a\u7a81\u7136\u7684\u55c5\u89c9\u51cf\u9000\u6216\u55c5\u89c9\u4e27\u5931(\u55c5\u89c9\u51cf\u5f31\u6216\u4e27\u5931)\uff0c\u4f46\u4ec5\u4ec5\u56e0\u4e3a\u4f60\u95fb\u4e0d\u5230\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u611f\u67d3\u4e86\u75c5\u6bd2\u3002\n\u5728\u4e00\u4e9b\u4eba\u4e2d\uff0c\u55c5\u89c9\u969c\u788d\u662f\u65b0\u51a0\u80ba\u708e\u7684\u9996\u53d1\u6216\u65e9\u671f\u75c7\u72b6\uff0c\u5bf9\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u662f\u552f\u4e00\u7684\u75c7\u72b6\u3002\u56e0\u6b64\uff0c\u4eba\u4eec\u5f88\u5bb9\u6613\u5c06\u55c5\u89c9\u7f3a\u5931\u89c6\u4e3a\u8bca\u65ad\u3002\u4e8b\u5b9e\u4e0a\uff0c\u73b0\u5728\uff0c\u968f\u7740\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u5728\u5168\u56fd\u548c\u4e16\u754c\u5404\u5730\u8086\u8650\uff0c\u7a81\u7136\u5931\u53bb\u55c5\u89c9\uff0c\u7279\u522b\u662f\u5728\u4e00\u4e2a\u611f\u67d3\u7387\u5f88\u9ad8\u7684\u57ce\u5e02\uff0c\u4e0e\u65b0\u51a0\u80ba\u708e\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u53ef\u80fd\u6027\u6700\u5927\u3002\u55c5\u89c9\u529f\u80fd\u969c\u788d\u73b0\u5728\u88ab\u5217\u4e3a\u8fd9\u79cd\u75be\u75c5\u7684\u5173\u952e\u75c7\u72b6\u4e4b\u4e00\uff0c\u533b\u751f\u4eec\u88ab\u63d0\u4f9b\u4e86\u6d4b\u8bd5\u55c5\u89c9\u529f\u80fd\u7684\u6307\u5bfc\u3002\n\u7136\u800c\uff0c\u55c5\u89c9\u4e27\u5931\u662f\u8bb8\u591a\u75be\u75c5\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u4ece\u7b80\u5355\u7684\u611f\u5192\uff0c\u5230\u9f3b\u7aa6\u611f\u67d3\uff0c\u518d\u5230\u65e9\u671f\u7684\u963f\u5c14\u8328\u6d77\u9ed8\u6c0f\u75c7\u548c\u5e15\u91d1\u68ee\u6c0f\u75c7\uff0c\u6216\u8005\u53ea\u662f\u8870\u8001\u3002\u55c5\u89c9\u51cf\u9000\u548c\u55c5\u89c9\u51cf\u9000\u76f8\u5f53\u5e38\u89c1\uff0c40\u5c81\u4ee5\u4e0a\u7684\u7f8e\u56fd\u4eba\u4e2d\u670912.4%\u60a3\u6709\u67d0\u79cd\u7a0b\u5ea6\u7684\u55c5\u89c9\u51cf\u9000\uff0c3%\u7684\u7f8e\u56fd\u4eba\u5728\u5404\u4e2a\u5e74\u9f84\u6bb5\u90fd\u60a3\u6709\u55c5\u89c9\u51cf\u9000\u3002\u867d\u7136\u55c5\u89c9\u969c\u788d\u53ef\u80fd\u662f\u4e00\u79cd\u6709\u7528\u7684\u75c7\u72b6\uff0c\u53ef\u4ee5\u5728\u5927\u6d41\u884c\u671f\u95f4\u6000\u7591\u611f\u67d3\uff0c\u5e76\u8868\u660e\u662f\u4e00\u79cd\u6d4b\u8bd5\uff0c\u4f46\u5b83\u672c\u8eab\u5e76\u4e0d\u80fd\u8bca\u65ad\u65b0\u51a0\u80ba\u708e\u3002\u7528\u55c5\u89c9\u4e27\u5931\u6765\u9884\u6d4b\u75c5\u4eba\u7684\u75c5\u60c5\u4e5f\u5f88\u6709\u8bf1\u60d1\u529b\u3002\u52a0\u5dde\u5927\u5b66\u5723\u5730\u4e9a\u54e5\u5206\u6821(University of California\uff0cSan Diego)\u7684\u7814\u7a76\u4eba\u5458\u8fdb\u884c\u4e86\u4e00\u9879\u65b0\u7684\u7814\u7a76\uff0c\u5bf9\u76f8\u5bf9\u8f83\u5c11\u7684\u60a3\u8005\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u7ed3\u679c\u8868\u660e\uff0c\u55c5\u89c9\u4e27\u5931\u53ef\u80fd\u9884\u793a\u7740\u4e0d\u90a3\u4e48\u4e25\u91cd\u7684\u75be\u75c5\u4e0d\u592a\u53ef\u80fd\u9700\u8981\u4f4f\u9662\u6cbb\u7597\u3002\u7136\u800c\uff0c\u5c11\u6570\u4f4f\u9662\u7684\u53d7\u8bd5\u8005\u5728\u8be5\u7814\u7a76\u4e2d\u6536\u96c6\u4e86\u55c5\u89c9\u6570\u636e\uff0c\u8fd9\u8868\u660e\u4ec5\u51ed\u55c5\u89c9\u4e27\u5931\u8fd8\u4e0d\u80fd\u5f97\u51fa\u4ec0\u4e48\u5173\u4e8e\u9884\u540e\u7684\u7ed3\u8bba\u3002\n\u4ece\u66f4\u79ef\u6781\u7684\u65b9\u9762\u6765\u770b\uff0c\u65b0\u51a0\u80ba\u708e\u7a81\u7136\u5931\u53bb\u55c5\u89c9\u53ef\u80fd\u6709\u52a9\u4e8e\u6211\u4eec\u4e86\u89e3SARS-CoV-2\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u30022\u6708\u4e0b\u65ec\uff0c\u5316\u5b66\u611f\u89c9\u79d1\u5b66\u5bb6\u5f00\u59cb\u5728\u63a8\u7279\u7b49\u793e\u4ea4\u5a92\u4f53\u4e0a\u8ba8\u8bba\u62a5\u9053\u7684\u65b0\u51a0\u80ba\u708e\u76f8\u5173\u55c5\u89c9\u969c\u788d\uff0c\u5e76\u6210\u7acb\u4e86\u4e00\u4e2a\u540d\u4e3a\u5168\u7403\u5316\u5b66\u611f\u89c9\u7814\u7a76\u8054\u76df\u7684\u56fd\u9645\u7ec4\u7ec7\u3002\u8fd9\u79cd\u5feb\u901f\u548c\u9ad8\u5ea6\u534f\u4f5c\u7684\u52aa\u529b\u5bfc\u81f4\u5728\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u7acb\u5927\u5b66\u5efa\u7acb\u4e86\u4e00\u9879\u5728\u7ebf\u8c03\u67e5\uff0c\u5e76\u5f00\u59cb\u5728\u5168\u7403\u8303\u56f4\u5185\u6536\u96c6\u6570\u636e\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6709\u8d85\u8fc73\u4e07\u4efd\u4ee531\u79cd\u8bed\u8a00\u8fdb\u884c\u7684\u8c03\u67e5\u56de\u590d\u3002\u8fd9\u4e00\u7ed3\u679c\u5c06\u4f7f\u8be5\u8054\u76df\u7684\u7814\u7a76\u4eba\u5458\u80fd\u591f\u95ee\uff0c\u4e0e\u65b0\u51a0\u80ba\u708e\u548c\u5176\u4ed6\u547c\u5438\u9053\u75be\u75c5\u76f8\u5173\u7684\u55c5\u89c9\u3001\u5473\u89c9\u6216\u9f3b/\u53e3\u5316\u5b66\u611f\u89c9(\u53e3\u3001\u9f3b\u548c\u76ae\u80a4\u7684\u5316\u5b66\u654f\u611f\u6027)\u662f\u5426\u663e\u8457\u964d\u4f4e\u3002\n\u4ece\u8c03\u67e5\u53d1\u5e0311\u5929\u540e\u7684\u8ba1\u5212\u6570\u636e\u4e2d\u63d0\u53d6\u7684\u7b2c\u4e00\u4efd\u8bba\u6587\u663e\u793a\uff0c\u65b0\u51a0\u80ba\u708e\u7684\u6b63\u5e38\u55c5\u89c9\u529f\u80fd\u5e73\u5747\u635f\u5931\u4e86\u8fd180%\uff0c\u5473\u89c9\u529f\u80fd\u5e73\u5747\u635f\u5931\u4e8669%\uff0c\u5316\u5b66\u611f\u89c9\u529f\u80fd\u5e73\u5747\u635f\u5931\u4e8639%\u3002\u4e0b\u4e00\u7bc7\u8bba\u6587\u5c06\u8ba8\u8bba\u65b0\u51a0\u80ba\u708e\u7684\u5316\u5b66\u611f\u89c9\u75c7\u72b6\u4e0e\u5176\u4ed6\u547c\u5438\u7cfb\u7edf\u75be\u75c5\u7684\u533a\u522b\u3002\u8fd9\u662f\u56fd\u9645\u5f00\u653e\u79d1\u5b66\u4e2d\u7684\u4e00\u9879\u5de8\u5927\u52aa\u529b\uff0c\u5728700\u591a\u540d\u79d1\u5b66\u5bb6\u7684\u677e\u6563\u56e2\u961f\u4e2d\uff0c\u9884\u5148\u6ce8\u518c\u4e86\u5047\u8bbe\uff0c\u5f00\u653e\u4e86\u53ef\u7528\u7684\u5206\u6790\u4ee3\u7801\u548c\u6570\u636e\uff0c\u4ee5\u53ca\u6536\u96c6\u548c\u5206\u6790\u4f17\u5305\u6570\u636e\u7684\u5927\u578b\u56e2\u961f\u79d1\u5b66\u65b9\u6cd5\u3002\u5176\u4ed6\u51e0\u9879\u4f17\u5305\u7814\u7a76\u6b63\u5904\u4e8e\u65e9\u671f\u548c\u540e\u671f\u89c4\u5212\u9636\u6bb5\uff0c\u5c06\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u53d1\u5e03\u3002\n\u5f53\u5168\u4e16\u754c\u7684\u65b0\u95fb\u62a5\u9053\u5bfc\u81f4\u79d1\u5b66\u5bb6\u5f00\u59cb\u8fd9\u4e9b\u9879\u76ee\u65f6\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u8c03\u67e5\u6765\u544a\u8bc9\u6211\u4eec\u55c5\u89c9\u969c\u788d\u662f\u4e00\u79cd\u75c7\u72b6\uff1f\u65b0\u51a0\u80ba\u708e\u5728\u5168\u7403\u8303\u56f4\u5185\u7684\u611f\u67d3\u7387\u610f\u5473\u7740\uff0c\u540c\u65f6\u611f\u67d3\u547c\u5438\u9053\u75c5\u6bd2\u7684\u4eba\u6570\u6bd4\u901a\u5e38\u60c5\u51b5\u4e0b\u591a\u51fa\u8bb8\u591a\u500d\u3002\u547c\u5438\u9053\u75c5\u6bd2\u901a\u5e38\u4f1a\u5bfc\u81f4\u6682\u65f6\u6027\u6216\u6c38\u4e45\u6027\u7684\u55c5\u89c9\u969c\u788d\u548c\u5473\u89c9\u969c\u788d(\u5473\u89c9\u626d\u66f2)\u3002\u53ef\u80fd\u662f\u53d7\u611f\u67d3\u4eba\u6570\u4e4b\u591a\u8ba9\u6211\u4eec\u6ce8\u610f\u5230\u4e86\u901a\u5e38\u7684\u55c5\u89c9\u4e27\u5931\u6c34\u5e73\uff0c\u5e76\u8ba4\u4e3a\u8fd9\u662f\u975e\u540c\u5bfb\u5e38\u7684\u3002\n\u7136\u800c\uff0c\u4ece\u4e00\u4e9b\u65e9\u671f\u7814\u7a76\u6765\u770b\uff0c\u65b0\u51a0\u80ba\u708e\u51fa\u73b0\u7684\u55c5\u89c9\u969c\u788d\u786e\u5b9e\u51fa\u73b0\u5728\u533b\u9662\u5c31\u8bca\u768430%-98%\u7684\u611f\u67d3\u8005\u8eab\u4e0a\uff0c\u8fdc\u8fdc\u8d85\u8fc7\u5176\u4ed6\u5df2\u77e5\u7684\u547c\u5438\u9053\u611f\u67d3\u3002(\u81ed\u540d\u662d\u8457\u7684\u662f\uff0c\u8de8\u5730\u70b9\u3001\u8de8\u6587\u5316\u548c\u8de8\u573a\u666f\u7684\u55c5\u89c9\u529f\u80fd\u6d4b\u8bd5\u5f88\u96be\u6807\u51c6\u5316\uff0c\u56e0\u6b64\u8fd9\u5bfc\u81f4\u4e86\u4f30\u8ba1\u7684\u4f4e\u8840\u75c7\u7387\u5b58\u5728\u5f88\u5927\u5dee\u5f02\u3002)\u3002\u53e6\u4e00\u4e2a\u56fd\u9645\u4eba\u7fa4\nACE2\u548cTMPRSS2\u5728\u591a\u79cd\u7c7b\u578b\u7684\u7ec6\u80de\u4e2d\u5747\u6709\u8868\u8fbe\uff0c\u5728\u9f3b\u3001\u5589\u548c\u4e0a\u652f\u6c14\u7ba1\u6c14\u9053\u4e2d\u5927\u91cf\u8868\u8fbe\u3002\u5728\u9f3b\u5b50\u4e2d\uff0c\u547c\u5438\u4e0a\u76ae(RE)\u548c\u55c5\u89c9\u4e0a\u76ae(OSE)\u90fd\u6709\u8868\u8fbe\uff0c\u4f46\u5728\u55c5\u89c9\u4e0a\u76ae\u4e2d\u7684\u8868\u8fbe\u6c34\u5e73\u8981\u9ad8\u5f97\u591a\u3002\u5728OSE\u4e2d\uff0c\u8fd9\u4e9b\u86cb\u767d\u5728\u652f\u6301(\u652f\u6301)\u548c\u55c5\u89c9\u5e72\u7ec6\u80de\u4ee5\u53ca\u8f83\u4f4e\u6c34\u5e73\u7684\u9c8d\u66fc\u817a\u548c\u5fae\u7ed2\u6bdb\u7ec6\u80de\u4e2d\u8868\u8fbe\u3002\u6240\u6709\u8fd9\u4e9b\u7ec6\u80de\u90fd\u6709\u52a9\u4e8e\u7ef4\u6301\u611f\u89c9\u795e\u7ecf\u5143\u548c\u7c98\u6db2\u5c42\u7684\u5065\u5eb7\uff0c\u8fd9\u6837\u6c14\u5473\u5c31\u53ef\u4ee5\u9002\u5f53\u5730\u6fc0\u6d3b\u795e\u7ecf\u5143\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f3c\u4e4e\u55c5\u89c9\u611f\u89c9\u795e\u7ecf\u5143\u672c\u8eab\u6ca1\u6709\u6b63\u786e\u7684\u8868\u8fbe\u6a21\u5f0f\u6765\u7ed3\u5408SARS-CoV-2\uff0c\u8fd9\u610f\u5473\u7740\u75c5\u6bd2\u53ef\u80fd\u4e0d\u4f1a\u76f4\u63a5\u5165\u4fb5\u8fd9\u4e9b\u76f4\u63a5\u5728\u55c5\u7403\u76ae\u8d28\u7a81\u89e6\u7684\u795e\u7ecf\u5143\u3002\n\u6709\u8bc1\u636e\u8868\u660e\uff0c\u75c5\u6bd2\u53ef\u4ee5\u901a\u8fc7\u9f3b\u5b50\u548c\u55c5\u7403\u4ee5\u53ca\u5176\u4ed6\u9014\u5f84\u8fc1\u79fb\u5230\u4e2d\u67a2\u795e\u7ecf\u7cfb\u7edf\uff0c\u800c\u4e0d\u4f1a\u4fb5\u5165\u611f\u89c9\u795e\u7ecf\u5143\u3002\u7136\u800c\uff0c\u8840\u7ba1\u7d27\u5f20\u7d20\u8f6c\u6362\u91762\u548cTMPRSS2\u7684\u8868\u8fbe\u6a21\u5f0f\u4ee5\u53ca\u7a81\u7136\u53d1\u4f5c\u548c\u76f8\u5bf9\u8f83\u5feb\u7684\u6062\u590d\u8868\u660e\uff0c\u65b0\u51a0\u80ba\u708e\u55c5\u89c9\u4e27\u5931\u4e0d\u662f\u7531\u4e8e\u4e2d\u67a2\u795e\u7ecf\u7cfb\u7edf\u7684\u635f\u5bb3\uff0c\u800c\u662f\u7531\u4e8e\u55c5\u89c9\u4fe1\u606f\u5728\u8fdb\u5165\u5927\u8111\u4e4b\u524d\u4e22\u5931\u6240\u81f4\u3002\u5982\u679c\u75c7\u72b6\u662f\u96c6\u4e2d\u9a71\u52a8\u7684\uff0c\u6211\u4eec\u9884\u8ba1\u8fc7\u7a0b\u548c\u6062\u590d\u4f1a\u66f4\u6162\uff0c\u4ee5\u53ca\u66f4\u590d\u6742\u7684\u4e00\u7cfb\u5217\u75c7\u72b6\uff0c\u5305\u62ec\u53ef\u80fd\u7684\u5e7b\u89c9\u6216\u5e7b\u89c9(\u626d\u66f2\u6216\u5e7b\u89c9\u7684\u6c14\u5473)\uff0c\u8fd9\u4e9b\u90fd\u6ca1\u6709\u62a5\u9053\u3002\n\u611f\u89c9\u4e0a\u76ae\u4e2d\u7684\u708e\u75c7\u53ef\u4ee5\u5c06\u6c14\u6d41\u9650\u5236\u5230\u9f3b\u5b50\u4e0a\u65b9\u76f8\u5bf9\u8f83\u5c0f\u7684\u55c5\u88c2\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u9f3b\u585e\u6216\u547c\u5438\u4e2d\u65ad\u7684\u611f\u89c9\uff0c\u6b63\u5982\u4e00\u4efd\u5df2\u53d1\u8868\u7684\u75c5\u4f8b\u62a5\u544a\u6240\u8bc1\u660e\u7684\u90a3\u6837\u3002SE\u4e2d\u7684\u652f\u6301\u7ec6\u80de\u7684\u635f\u4f24\u4e5f\u53ef\u80fd\u5728\u8bb8\u591a\u65b9\u9762\u5f71\u54cd\u611f\u89c9\u795e\u7ecf\u5143\u7684\u529f\u80fd(\u4ee3\u8c22\u3001\u7ed3\u6784\u3001\u708e\u75c7)\uff0c\u56e0\u6b64\u5373\u4f7f\u6c14\u5473\u53ef\u4ee5\u5230\u8fbe\u795e\u7ecf\u5143\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u65e0\u6cd5\u4f20\u9012\u4fe1\u53f7\u3002\n\u5927\u591a\u6570\u60a3\u8005\u7684\u55c5\u89c9\u529f\u80fd\u6062\u590d\u76f8\u5bf9\u8f83\u5feb\uff0c\u8fd9\u4e5f\u652f\u6301\u4e86\u4e00\u79cd\u4e0d\u4f1a\u6740\u6b7b\u55c5\u89c9\u611f\u89c9\u795e\u7ecf\u5143\u7684\u5916\u5468\u539f\u56e0\u3002\u867d\u7136\u8fd9\u4e9b\u795e\u7ecf\u5143\u5728\u6574\u4e2a\u751f\u547d\u4e2d\u786e\u5b9e\u4f1a\u518d\u751f\uff0c\u4f46\u5b83\u4eec\u4e0d\u4f1a\u7a81\u7136\u518d\u751f\uff0c\u800c\u662f\u5728\u4e00\u4e2a\u9700\u898130\u5929\u6216\u66f4\u957f\u65f6\u95f4\u7684\u8fc7\u7a0b\u4e2d\u611f\u89c9\u4f1a\u9010\u6e10\u6539\u5584\u3002(\u4e00\u4e9b\u56e0\u75c5\u6bd2\u5bfc\u81f4\u55c5\u89c9\u969c\u788d\u7684\u4eba\u5c1a\u672a\u6062\u590d\u55c5\u89c9\u3002\u8fd9\u53ef\u80fd\u8868\u660e\u611f\u89c9\u795e\u7ecf\u5143\u7684\u5e7f\u6cdb\u6b7b\u4ea1\u6216\u67d0\u4e9b\u4e2a\u4f53\u7684\u4e2d\u67a2\u635f\u4f24\u3002)\u3002\u56e0\u4e3a\u55c5\u89c9\u75c7\u72b6\u53ef\u4ee5\u5728\u75be\u75c5\u7684\u65e9\u671f\u51fa\u73b0\uff0c\u5728\u547c\u5438\u9053\u75c7\u72b6\u4e4b\u524d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u4e86\u89e3\u75c5\u6bd2\u8fdb\u5165\u55c5\u89c9\u4e0a\u76ae\u7ec6\u80de\u7684\u60c5\u51b5\u5bf9\u4e86\u89e3\u611f\u67d3\u7279\u522b\u91cd\u8981\u3002\n\u8fd9\u4e2a\u8c1c\u56e2\u4ecd\u6709\u8bb8\u591a\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\uff0c\u4f46\u53f2\u65e0\u524d\u4f8b\u7684\u56fd\u9645\u5408\u4f5c\u548c\u65e9\u671f\u6570\u636e\u7684\u5171\u4eab\u65e0\u7591\u5c06\u6bd4\u5f80\u5e38\u66f4\u5feb\u5730\u63a8\u8fdb\u7814\u7a76\u3002\u55c5\u89c9\u8054\u7cfb\u662f\u75c5\u6bd2\u673a\u5236\u7684\u4e00\u6761\u91cd\u8981\u7ebf\u7d22\uff0c\u5b83\u5229\u7528\u4e86\u5316\u5b66\u611f\u5b98\u79d1\u5b66\u5bb6\u6570\u5341\u5e74\u7684\u57fa\u7840\u7814\u7a76\uff0c\u8fd9\u4e9b\u7814\u7a76\u76f8\u5bf9\u9ed8\u9ed8\u65e0\u95fb\uff0c\u5e76\u5c06\u55c5\u89c9\u7f3a\u5931\u4f5c\u4e3a\u4e00\u79cd\u611f\u89c9\u969c\u788d\u5f15\u8d77\u4e86\u4eba\u4eec\u7684\u5173\u6ce8\u3002", "note_en": "One morning a few weeks ago I was chatting with my friend Horacio, a mathematician in the New York City area. He told me he\u2019d lost his sense of smell for a couple of weeks in April. He was cooking for Passover and couldn\u2019t even smell the gefilte fish. He didn\u2019t think much of it and didn\u2019t connect it to the fact that he had been slightly ill for a few days. I suggested that he get tested for antibodies of SARS-CoV-2, the virus that causes COVID-19; and that he take an  online survey for smell and taste symptoms associated with recent respiratory illness (more on that shortly). It turned out Horacio had antibodies, so he signed up to donate plasma. This was a lucky diagnosis aided by timing and geography; smell and taste symptoms associated specifically with COVID-19 seem to appear as sudden hyposmia or anosmia (decrease or loss of smell), but just because you can\u2019t smell doesn\u2019t mean you have the virus.\n  In some people, anosmia is the first or an early symptom, and for some the only symptom, of COVID-19. It is therefore tempting to look to anosmia as diagnostic. Indeed, right now, with the novel coronavirus raging across the country and world, a sudden loss of smell, especially in a city with large infection rates, is more likely associated with COVID-19 than anything else. Olfactory dysfunction is now listed as one of the key symptoms of the disease, and  physicians are offered guidance for testing olfactory function.\n  However, smell loss is an important component of many conditions, from a simple cold, to a sinus infection, to early stage Alzheimer\u2019s and Parkinson\u2019s diseases, or simply aging.  Hyposmia and anosmia are quite common, 12.4 percent of Americans over the age of 40 have some hyposmia and 3 percent of Americans are anosmic across a wide range of ages. While anosmia might be a helpful symptom to suspect infection in the midst of a pandemic, and indicate a test, it\u2019s not by itself diagnostic of COVID-19. It is also tempting to use the loss of smell to predict how a patient will fare.  A new study from researchers at the University of California, San Diego, tested a relatively small cohort of patients and suggests that smell loss may predict less severe disease less likely to require hospitalization. However, the small number of subjects who were hospitalized and for whom smell data were collected in that study suggests that little can yet be concluded regarding prognosis from smell loss alone.\n  On a more positive note, the sudden loss of smell in COVID-19 may help us understand how SARS-CoV-2 works. In late February, chemosensory scientists began discussing reported COVID-19 associated anosmia on twitter and other social media, and formed an international group called  Global Chemosensory Research Consortium. This fast and extremely collaborative effort resulted in the creation of an online survey hosted at Penn State and began collecting data globally. To date, there are over 30,000 responses to the survey in 31 languages. The results will allow researchers in the consortium to ask whether there is significant decrease in smell, taste, or nasal/oral chemesthetic (chemical sensitivity of mouth, nose and skin) sensation associated with COVID-19 and other respiratory illnesses.\n  The first  paper from a planned data pull 11 days after the survey was posted show an average loss of close to 80 percent of normal smell function, 69 percent of normal taste function, and 39 percent of normal chemesthetic function from COVID-19. The next paper will address the differences between chemosensory symptoms of COVID-19 compared to other respiratory illnesses. This has been a tremendous effort in international open science, with preregistered hypotheses, openly available analysis code and data, and a large team science approach to collecting and analyzing crowd-sourced data, in a slack group of over 700 scientists. Several other crowd-sourced studies are in the early and late planning phases and will be released in the near future.\n  Why would we need surveys to tell us that anosmia is a symptom when worldwide reports of anosmia in the news led scientists to start these projects? The rate of infection of COVID-19 across the globe means that there are many times more people infected with a respiratory virus at the same time than is normally the case. Respiratory viruses can often lead to temporary or permanent anosmia and dysgeusia (distortions in taste). It was possible that the sheer number of infected people led us to notice the usual level of anosmia and to consider this as extraordinary.\n  It does appear, however,  from a few early studies, that the anosmia seen with COVID-19 is present in 30\u201398 percent of infected people seen in hospitals, far more than occurs with other known respiratory infections. (Testing smell function is notoriously difficult to standardize across locations, cultures and scenarios, so this leads to a high variance in the estimated prevalence of hyposmia.) Another international  crowdsourced study asked people to test themselves with household items and report the intensity of the odors of, for example, peanut butter, vanilla and toothpaste. A recent  study looked at the subset of those data from Sweden and reported that the prevalence of hyposmia tracks with the estimated population infection rate. These studies indicate that there is something special about the virus that attacks the sense of smell in particular, which may help us understand how the virus works.\n  How does the virus attack the sense of smell? Research is coming out fast, and we have access to early reports, often via preprint servers that have not yet passed the peer review process and should be interpreted with caution (as is the case with many of the studies discussed above). Mechanistic studies indicate what factors are relevant to hyposmia and anosmia. Most scientists agree that SARS-CoV-2, like the earlier known SARS-CoV, uses the angiotensin-converting enzyme 2 (ACE2) receptor to gain entry to cells via binding with spike protein.  SARS-CoV-2 additionally appears to need TMPRSS2, a protease, to help prime the spike protein in the process of gaining entry to cells and a few other proteins. This means that cells must express all of these proteins for the virus to be able to infiltrate them and hijack their machinery to replicate.\n  ACE2 and TMPRSS2 are expressed in many types of cells, and quite abundantly in the nose, throat, and upper bronchial airways. In the nose, expression is seen in both the respiratory epithelium (RE) and the olfactory sensory epithelium (OSE)  but in much higher levels in the OSE. In the OSE, the proteins are expressed in the  sustentacular (supporting) and olfactory stem cells  as well as in the Bowman\u2019s (mucus) glands and microvillar cells in lower levels. All of these cells help maintain the health of the sensory neurons and the mucus layer so that odors can properly activate the neurons. So far, it appears that olfactory sensory neurons themselves do not  have the right expression patterns to bind SARS-CoV-2, which means that the virus may not directly invade these neurons that synapse directly in cortex in the olfactory bulbs.\n    There is  evidence that the virus can migrate into the central nervous system  via the nose and olfactory bulbs as well as by other routes without invading the sensory neurons. However, the expression patterns of ACE2 and TMPRSS2 and the sudden onset and relatively fast recovery suggest that COVID-19 anosmia is not caused by damage to the central nervous system but rather by the loss of smell information before it gets to the brain. If the symptoms were centrally driven, we would expect a slower process and recovery as well as a more complex range of symptoms, including possibly parosmia or phantosmia (distorted or hallucinated smells), which have not been  reported.\n  Inflammation in the sensory epithelium could restrict airflow to the relatively small olfactory cleft, high up in the nose, without causing the feeling of a stuffy nose or interruption of breathing, as demonstrated in a published  case report. Damage to the sustentacular cells in the SE could also affect functioning of the sensory neurons in many ways (metabolic, structural, inflammatory), so that even if odors can get to the neurons, they may not be able to transmit signals.\n  The relatively fast recovery of olfactory function in most patients also lends support to a peripheral cause that does not kill the olfactory sensory neurons. Although these neurons do regenerate throughout life, they do not do so suddenly but rather in a process that takes 30 days or more in which sensation would gradually improve. (Some people who became anosmic as a result of the virus have not yet recovered their sense of smell. This may point to widespread death of sensory neurons or central damage in some individuals.) Because olfactory symptoms can occur very early in the disease, before respiratory symptoms, this may make understanding the virus\u2019 entry into cells in the olfactory sensory epithelium particularly important for understanding infection.\n  There are still many open questions to this mystery, but unprecedented international collaborations and sharing of early data will undoubtedly move research forward faster than usual. The olfactory link is an important clue as to the virus\u2019 mechanisms and has leveraged many decades of basic research from chemosensory scientists that has gone on in relative obscurity and put a spotlight on anosmia as a sensory disability.", "posttime": "2020-06-14 08:46:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u80ba\u708e,lose,\u55c5\u89c9", "title": "\u65b0\u51a0\u80ba\u708e\u4e3a\u4f55\u8ba9\u4eba\u4e27\u5931\u55c5\u89c9", "title_en": "Why Covid-19 Makes People Lose Their Sense of Smell", "transed": 1, "url": "https://www.scientificamerican.com/article/why-covid-19-makes-people-lose-their-sense-of-smell/", "via": "", "real_tags": ["\u80ba\u708e", "lose", "\u55c5\u89c9"]}, {"category": "", "categoryclass": "", "imagename": "2739bba9a4455848c181602ed7d2a315.png", "infoid": 1006477, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u6b63\u5728\u4e0b\u964d\uff0c\u4f46\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u7ebd\u7ea6\u5730\u533a\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u6b63\u5728\u4e0b\u964d\u3002\n\u91cd\u8981\u539f\u56e0\uff1a\u8be5\u56fd\u53d7\u707e\u6700\u4e25\u91cd\u7684\u5730\u533a\u6b63\u5728\u597d\u8f6c\uff0c\u867d\u7136\u8fd9\u663e\u7136\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u4f46\u5b83\u4e0d\u5e94\u8be5\u7ed9\u5176\u4ed6\u5730\u533a\u5e26\u6765\u865a\u5047\u7684\u5b89\u5168\u611f\uff0c\u5176\u4e2d\u8bb8\u591a\u5730\u533a\u7684\u65b0\u75c5\u4f8b\u6b63\u5728\u6025\u5267\u4e0a\u5347\u3002\n\u5927\u5c40\u662f\uff1a\u628a\u7ebd\u7ea6\u548c\u65b0\u6cfd\u897f\u4ece\u753b\u9762\u4e2d\u5254\u9664\uff0c\u628a\u7f8e\u56fd\u4ece\u753b\u9762\u4e2d\u5254\u9664\u3002\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u4e0d\u4f1a\u4e0b\u964d\u3002\u4ed6\u4eec\u4fdd\u6301\u7a33\u5b9a\uff0c\u6216\u7565\u6709\u589e\u52a0\u3002\n\u7ebd\u7ea6\u5730\u533a\u7684\u5927\u91cf\u75c5\u4f8b\u5728\u65e9\u671f\u63a8\u9ad8\u4e86\u5168\u56fd\u7684\u75c5\u4f8b\u6570\u91cf\uff0c\u6240\u4ee5\u7ebd\u7ea6\u53ca\u5176\u5468\u8fb9\u5730\u533a\u7684\u5927\u5e45\u4e0b\u964d\u4e5f\u4f1a\u63a8\u52a8\u5168\u56fd\u7684\u4e0b\u964d\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\n\u662f\u7684\uff0c\u4f46\u662f\uff1a\u73b0\u5728\u75c5\u6bd2\u65e0\u5904\u4e0d\u5728\u3002\u7ebd\u7ea6\u7684\u6539\u5584\u5e76\u4e0d\u80fd\u786e\u4fdd\u5176\u4ed6\u5730\u65b9\u7684\u75ab\u60c5\u5f97\u5230\u63a7\u5236\u3002\n\u5305\u62ec\u5fb7\u514b\u8428\u65af\u5dde\u3001\u4e9a\u5229\u6851\u90a3\u5dde\u548c\u4fc4\u52d2\u5188\u5dde\u5728\u5185\u7684\u51e0\u4e2a\u4eba\u53e3\u7a20\u5bc6\u7684\u5dde\u7684\u75ab\u60c5\u6b63\u5728\u6076\u5316\u3002\n\u4e00\u53e5\u8bdd\uff1a\u5168\u56fd\u8303\u56f4\u5185\u6848\u4ef6\u4e0b\u964d\u7684\u8d8b\u52bf\uff0c\u8fd9\u4e3b\u8981\u53cd\u6620\u4e86\u7ebd\u7ea6\u5730\u533a\u7684\u8d8b\u52bf\uff0c\u4e0d\u5e94\u8be5\u7ed9\u5176\u4ed6\u5730\u65b9\u5e26\u6765\u4e00\u79cd\u9519\u8bef\u7684\u5b89\u5168\u611f\u3002", "note_en": "Coronavirus cases in the U.S. are going down \u2014 but that\u2019s mainly because coronavirus cases in the New York area are going down.\n Why it matters: The country\u2019s hardest-hit region is getting better, and while that\u2019s obviously a good thing, it shouldn\u2019t provide a false sense of security for other regions, many of which are seeing new cases rise sharply.\n The big picture: Take New York and New Jersey out of the picture, and the U.S.\u2019 coronavirus cases aren\u2019t going down. They\u2019re holding steady, or slightly increasing.\n The large number of cases in the New York region drove up the national number of cases in the early going, and so it\u2019s no surprise that big decreases in and around New York would also drive nationwide decreases.\n Yes, but: The virus is everywhere now. Improvement in New York doesn\u2019t ensure the outbreak is under control anywhere else.\n Several populated states \u2014 including Texas, Arizona and Oregon \u2014 that are seeing their outbreaks get worse.\n The bottom line: The nationwide trend of declining cases, that&#39;s mainly a reflection of the New York region\u2019s trend, shouldn\u2019t provide a false sense of security elsewhere.", "posttime": "2020-06-14 08:46:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coronavirus,\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,york,\u7ebd\u7ea6", "title": "\u7ebd\u7ea6\u6b63\u5728\u8ba9\u7f8e\u56fd\u3002\u51a0\u72b6\u75c5\u6bd2\u7684\u8d8b\u52bf\u770b\u8d77\u6765\u6bd4\u5b9e\u9645\u60c5\u51b5\u8981\u597d\u3002", "title_en": "New York is making the U.S.' coronavirus trends look better than they are", "transed": 1, "url": "https://www.axios.com/us-coronavirus-new-cases-second-wave-new-york-b6eda2dc-ef39-4b61-9385-d02a2fd3c494.html", "via": "", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "york", "\u7ebd\u7ea6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006476, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u641c\u7d22\u7ed3\u679c\u4e0a\u7684\u56fe\u7247\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\uff0c\u6211\u4e0d\u6e05\u695a\u4e3a\u4ec0\u4e48\u8fd9\u53ea\u4f1a\u51fa\u73b0\u5728\u82f1\u56fd\u548c\u7f8e\u56fd\u3002\u8003\u8651\u5230\u76ee\u524d\u6211\u4eec\u56fd\u5bb6\u56f4\u7ed5\u4e18\u5409\u5c14\u7684\u4e89\u8bae\uff0c\u8fd9\u7279\u522b\u6709\u8da3\u3002\u66f4\u6709\u8da3\u7684\u662f\uff0c\u5e0c\u7279\u52d2\u3001\u65af\u5927\u6797\u548c\u6bdb\u7684\u7167\u7247\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002\n\u4f60\u80fd\u6062\u590d\u4e18\u5409\u5c14\u7684\u7167\u7247\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u4f60\u80fd\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4e0d\u6062\u590d\u5417\uff1f\n\u6211\u5728\u7f8e\u56fd\u641c\u7d22\u4e86\u82f1\u56fd\u9996\u76f8\u7684\u7167\u7247\uff0c\u7136\u540e\u5728\u9876\u90e8\u7684\u65cb\u8f6c\u6728\u9a6c\u4e0a\u67e5\u770b\u4e86\u6e29\u65af\u987f\u00b7\u4e18\u5409\u5c14(Winston Churchill)\u7684\u7167\u7247\u3002\u6211\u6ca1\u6709\u770b\u5230\uff0c\u4f46\u7136\u540e\u70b9\u51fb\u53f3\u8fb9\u7684\u7bad\u5934\uff0c\u8fd9\u6837\u5c31\u4f1a\u51fa\u73b0\u66f4\u591a\u7167\u7247\uff0c\u8fd9\u662f\u6211\u770b\u5230\u7684\u3002\u5b83\u770b\u8d77\u6765\u50cf\u662f\u9ed8\u8ba4\u7684\u7167\u7247\u3002\n\u55e8\uff0c\u662f\u7684\uff0c\u8fd9\u5c31\u662f\u95ee\u9898\u6240\u5728-\u4e18\u5409\u5c14\u7684\u7167\u7247\u5df2\u7ecf\u88ab\u5220\u9664\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4e00\u5f20\u9ed8\u8ba4\u7684\u7a7a\u767d\u56fe\u50cf\u3002\u6b63\u5982\u6211\u5728\u95ee\u9898\u4e2d\u6240\u8bf4\uff0c\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u82f1\u56fd\u548c\u7f8e\u56fd\uff0c\u4f46\u4e0d\u53d1\u751f\u5728\u5176\u4ed6\u56fd\u5bb6\u3002\n\u7136\u540e\u6211\u5bf9\u6e29\u65af\u987f\u00b7\u4e18\u5409\u5c14(Winston Churchill)\u8fdb\u884c\u4e86\u56fe\u7247\u641c\u7d22\u3002\u6211\u5411\u4e0b\u6eda\u52a8\u4e86\u9875\u9762\uff0c\u4f46\u6ca1\u6709\u770b\u5230\u5f53\u4f60\u548c\u6211\u8fdb\u884c\u82f1\u56fd\u9996\u76f8\u56fe\u7247\u641c\u7d22\u65f6\uff0c\u51fa\u73b0\u5728\u9876\u90e8\u65cb\u8f6c\u6728\u9a6c\u4e2d\u7684\u9ed8\u8ba4\u56fe\u7247\u3002\n\u5b83\u5728\u5357\u975e\u4e5f\u6ca1\u6709\u51fa\u73b0\uff0c\u770b\u8d77\u6765\u8c37\u6b4c\u6b63\u5728\u8bd5\u56fe\u6446\u8131\u4e18\u5409\u5c14\u3002\n\u8fd9\u79cd\u505a\u6cd5\u9700\u8981\u505a\u4e9b\u53ef\u803b\u7684\u4e8b\u60c5\uff01\u4f60\u53ef\u4ee5\u5728\u8c37\u6b4c\u4e0a\u641c\u7d22\u4e00\u4e9b\u975e\u5e38\u90aa\u6076\u7684\u4e1c\u897f\uff01\u5982\u679c\u6ca1\u6709\u4e18\u5409\u5c14\uff0c\u5f88\u53ef\u80fd\u5c31\u4e0d\u4f1a\u6709\u8c37\u6b4c\u3002\n\u901a\u77e5\u5f53\u524d\u5df2\u5173\u95ed\uff0c\u60a8\u4e0d\u4f1a\u6536\u5230\u66f4\u65b0\u3002\u8981\u6253\u5f00\u5b83\u4eec\uff0c\u8bf7\u8f6c\u5230\u60a8\u7684\u4e2a\u4eba\u8d44\u6599\u9875\u9762\u4e0a\u7684\u901a\u77e5\u9996\u9009\u9879\u3002\n\u4efb\u4f55\u8bbf\u95ee\u6216\u8ba2\u9605\u6b64\u5e16\u5b50\u901a\u77e5\u7684\u4eba\u90fd\u53ef\u4ee5\u770b\u5230\u6b64\u4fe1\u606f\u3002\u4f60\u786e\u5b9a\u8981\u7ee7\u7eed\u5417\uff1f\n\u60a8\u7684\u901a\u77e5\u5f53\u524d\u5df2\u5173\u95ed\uff0c\u60a8\u5c06\u4e0d\u4f1a\u6536\u5230\u8ba2\u9605\u66f4\u65b0\u3002\u8981\u6253\u5f00\u5b83\u4eec\uff0c\u8bf7\u8f6c\u5230\u60a8\u4e2a\u4eba\u8d44\u6599\u9875\u9762\u4e0a\u7684\u901a\u77e5\u9996\u9009\u9879\u3002\n\u8c37\u6b4c\u975e\u5e38\u4e25\u8083\u5730\u5bf9\u5f85\u6ee5\u7528\u5176\u670d\u52a1\u7684\u95ee\u9898\u3002\u6211\u4eec\u81f4\u529b\u4e8e\u6839\u636e\u60a8\u5c45\u4f4f\u7684\u56fd\u5bb6\u7684\u6cd5\u5f8b\u5904\u7406\u6b64\u7c7b\u8650\u5f85\u884c\u4e3a\u3002\u5f53\u60a8\u63d0\u4ea4\u62a5\u544a\u65f6\uff0c\u6211\u4eec\u5c06\u5bf9\u5176\u8fdb\u884c\u8c03\u67e5\u5e76\u91c7\u53d6\u9002\u5f53\u7684\u884c\u52a8\u3002\u53ea\u6709\u5f53\u6211\u4eec\u9700\u8981\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u6216\u6709\u66f4\u591a\u4fe1\u606f\u8981\u5206\u4eab\u65f6\uff0c\u6211\u4eec\u624d\u4f1a\u56de\u590d\u60a8\u3002\n\u8c37\u6b4c\u975e\u5e38\u4e25\u8083\u5730\u5bf9\u5f85\u6ee5\u7528\u5176\u670d\u52a1\u7684\u95ee\u9898\u3002\u6211\u4eec\u81f4\u529b\u4e8e\u6839\u636e\u60a8\u5c45\u4f4f\u7684\u56fd\u5bb6\u7684\u6cd5\u5f8b\u5904\u7406\u6b64\u7c7b\u8650\u5f85\u884c\u4e3a\u3002\u5f53\u60a8\u63d0\u4ea4\u62a5\u544a\u65f6\uff0c\u6211\u4eec\u5c06\u5bf9\u5176\u8fdb\u884c\u8c03\u67e5\u5e76\u91c7\u53d6\u9002\u5f53\u7684\u884c\u52a8\u3002\u53ea\u6709\u5f53\u6211\u4eec\u9700\u8981\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u6216\u6709\u66f4\u591a\u4fe1\u606f\u8981\u5206\u4eab\u65f6\uff0c\u6211\u4eec\u624d\u4f1a\u56de\u590d\u60a8\u3002", "note_en": "The images on the search results are taken from Wikipedia, it\u2019s not clear to me why this would break in only the UK and the US. It\u2019s especially interesting given the current controversy around Churchill in our countries. Even more interesting is that pictures of Hitler, Stalin and Mao are shown with no issues.\n  Can you please reinstate Churchill\u2019s picture, and if not, can you explain why you won\u2019t?\n    I did a search for &#34;UK Prime Ministers&#34; in the US and then checked the carousel at the top for Winston Churchill&#39;s picture.\u00a0 I didn&#39;t see it, but then click on the arrow to the right so that more pictures would show up and here is what I saw.\u00a0 It looks like a default picture.\n Hi,  Yes, that is the issue - the picture of Churchill has been removed and replaced by a default, blank image. As stated in my question, this happens in the UK and US, but not in other countries.\n Then I did an image search for\u00a0 Winston Churchill.\u00a0 I scrolled down the page and couldn&#39;t see the default picture that showed up in the carousel at the top when you and I did the &#34;UK Prime Minister&#34; image search.\n    It&#39;s not showing in South Africa either, it would appear that Google are trying to get rid of Churchill\n  disgraceful something needs to be done about this practice! you can search for some seriously evil stuff on google! if it wasn&#39;t for Churchill there probably wouldn&#39;t be a google\n      Notifications are currently  off and you won&#39;t receive updates. To turn them on, go to\u00a0 Notifications preferences\u00a0on your\u00a0   Profile\u00a0page.\n      This information will be visible to anyone who visits or subscribes to notifications for this post. Are you sure you want to continue?\n        Your notifications are currently off and you won&#39;t receive subscription updates. To turn them on, go to  Notifications preferences on your  Profile page.\n  Google takes abuse of its services very seriously. We&#39;re committed to dealing with such abuse according to the laws in your country of residence. When you submit a report, we&#39;ll investigate it and take the appropriate action. We&#39;ll get back to you only if we require additional details or have more information to share.\n  Google takes abuse of its services very seriously. We&#39;re committed to dealing with such abuse according to the laws in your country of residence. When you submit a report, we&#39;ll investigate it and take the appropriate action. We&#39;ll get back to you only if we require additional details or have more information to share.", "posttime": "2020-06-14 08:29:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,\u4e18\u5409\u5c14,support", "title": "\u8c37\u6b4c\u652f\u6301\uff1a\u82f1\u56fd/\u7f8e\u56fd\u641c\u7d22\u7ed3\u679c\u4e2d\u5220\u9664\u6e29\u65af\u987f\u00b7\u4e18\u5409\u5c14\u7684\u56fe\u7247", "title_en": "Google Support: Winston Churchill\u2019s Image Removed in UK/US Search Results", "transed": 1, "url": "https://support.google.com/websearch/thread/53297714", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u4e18\u5409\u5c14", "support"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006475, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u5bfb\u6c42\u5728GPU\u4e0a\u5feb\u901f\u6e32\u67d32D\u77e2\u91cf\u56fe\u5f62\u4e4b\u524d\uff0c\u6211\u5df2\u7ecf\u53d1\u5e03\u4e86Piet-GPU\u66f4\u65b0\uff0c\u5e76\u5bf9\u4e2d\u95f4\u6392\u5e8f\u67b6\u6784\u8fdb\u884c\u4e86\u66f4\u6df1\u5165\u7684\u63a2\u7d22\u3002\u8fd9\u4e9b\u4e2d\u95f4\u7ed3\u679c\u663e\u793a\u4e86\u5e0c\u671b\uff0c\u4f46\u6ca1\u6709\u8fbe\u5230\u6211\u5bf9\u771f\u6b63\u9ad8\u6027\u80fd2D GPU\u6e32\u67d3\u7684\u613f\u666f\u3002\n\u73b0\u5728\uff0c\u6211\u5f88\u9ad8\u5174\u63d0\u51fa\u4e00\u4e2a\u6211\u76f8\u4fe1\u80fd\u591f\u5b9e\u73b0\u8fd9\u4e00\u613f\u666f\u7684\u67b6\u6784\u3002\u6027\u80fd\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8be5\u4f53\u7cfb\u7ed3\u6784\u6e90\u81ea\u539f\u5219\u5e76\u5efa\u7acb\u5728\u901a\u7528\u7ba1\u9053\u4e0a\uff0c\u800c\u4e0d\u662f\u670d\u52a1\u4e8e\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u7684\u9ed1\u5ba2\u96c6\u5408\u3002\u5c3d\u53ef\u80fd\u591a\u7684\u5de5\u4f5c\u88ab\u5378\u8f7d\u5230GPU\u4e0a\uff0c\u8fd9\u6700\u5927\u9650\u5ea6\u5730\u964d\u4f4e\u4e86UI\u6e32\u67d3\u4e2d\u51fa\u73b0Jack\u7684\u98ce\u9669\uff0c\u5e76\u8ba9\u6211\u4eec\u53ef\u4ee5\u5229\u7528GPU\u6280\u672f\u4e0d\u65ad\u63d0\u9ad8\u7684\u6027\u80fd\u3002\n\u6b64\u5916\uff0c\u6b64\u5448\u73b0\u7ba1\u9053\u975e\u5e38\u9002\u5408\u5b8c\u5168\u52a8\u6001\u548c(\u90e8\u5206)\u9759\u6001\u5185\u5bb9\u3002\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u9884\u8ba1\u7b97\uff0c\u800c\u662f\u5c06\u573a\u666f\u5feb\u901f\u5904\u7406\u6210\u5e73\u94fa\uff0c\u4ee5\u4fbf\u5728\u7ba1\u9053\u672b\u7aef\u8fdb\u884c\u201c\u7cbe\u7ec6\u5149\u6805\u5316\u201d\u3002\u5373\u4f7f\u8fd9\u6837\uff0c\u573a\u666f\u7684\u9759\u6001\u7247\u6bb5\u4e5f\u53ef\u4ee5\u5bb9\u6613\u5730\u4fdd\u7559\u5e76\u7f1d\u5408\u5728\u4e00\u8d77\uff0c\u4ece\u800c\u6700\u5c0f\u5316\u4e86CPU\u7aef\u7684\u6210\u672c\u3002\n\u6211\u4e5f\u60f3\u5766\u7387\u5730\u8bf4\u51fa\u8fd9\u9879\u5de5\u4f5c\u7684\u5c40\u9650\u6027\u3002\u9996\u5148\uff0c\u6210\u50cf\u6a21\u578b\u4ecd\u7136\u76f8\u5f53\u6709\u9650\uff0c\u56e0\u4e3a\u6211\u4e00\u76f4\u4e13\u6ce8\u4e8e\u8def\u5f84\u6e32\u67d3\u3002\u6211\u76f8\u4fe1\u7ba1\u9053\u7684\u4e00\u822c\u6027\u8d28\u4f7f\u8be5\u4f53\u7cfb\u7ed3\u6784\u9002\u5408\u66f4\u4e30\u5bcc\u7684\u56fe\u50cf\u6a21\u578b\uff0c\u5982SVG\u6216PDF\uff0c\u4f46\u5728\u5b83\u771f\u6b63\u5b9e\u73b0\u4e4b\u524d\uff0c\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u731c\u6d4b\u3002\u5176\u6b21\uff0c\u8be5\u5b9e\u65bd\u4e25\u91cd\u4f9d\u8d56GPU\u8ba1\u7b97\u80fd\u529b\uff0c\u56e0\u6b64\u4e0d\u4f1a\u5728\u8f83\u65e7\u7684\u786c\u4ef6\u6216\u9a71\u52a8\u7a0b\u5e8f\u4e0a\u8fd0\u884c\u3002\u6211\u8fd8\u5e94\u8be5\u6307\u51fa\uff0cPathFinder\u5728\u8fd9\u4e24\u4e2a\u65b9\u9762\u90fd\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u6545\u4e8b\uff1b\u7279\u522b\u662f\u5b83\u6709\u4e00\u4e2a\u201c\u6df7\u5408\u5339\u914d\u201d\u7684\u67b6\u6784\uff0c\u6240\u4ee5\u9664\u4e86\u7cbe\u7ec6\u7684\u5149\u6805\u5316\u4e4b\u5916\uff0c\u5f88\u591a\u5de5\u4f5c\u90fd\u53ef\u4ee5\u5728CPU\u4e0a\u5b8c\u6210\u3002\n\u53e6\u4e00\u4e2a\u9650\u5236\u662f\u590d\u6742\u573a\u666f\u53ef\u80fd\u9700\u8981\u5927\u91cf\u5185\u5b58\u3002\u5f53\u7136\uff0c\u5f53\u524d\u7684\u5b9e\u73b0\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u806a\u660e\u7684\u4e8b\u60c5\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u5b83\u53ea\u662f\u5206\u914d\u7f13\u51b2\u533a\uff0c\u5e0c\u671b\u7f13\u51b2\u533a\u8db3\u591f\u5927\u3002\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u5b83\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u662f\u4e00\u4e2a\u989d\u5916\u590d\u6742\u6027\u7684\u6765\u6e90\u3002\n\u6211\u4e0d\u6253\u7b97\u5728\u8fd9\u91cc\u6df1\u5165\u5230\u6781\u7aef\u7684\u7ec6\u8282\uff0c\u800c\u662f\u8bd5\u7740\u63d0\u4f9b\u4e00\u4e2a\u6982\u62ec\u6027\u7684\u4ecb\u7ecd\u3002\n\u8be5\u4f53\u7cfb\u7ed3\u6784\u7262\u56fa\u5730\u57fa\u4e8e\u4ee5\u524d\u7684\u6392\u5e8f\u4e2d\u95f4\u8bbe\u8ba1\u3002\u4e0d\u8fc7\uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5bf9\u8def\u5f84\u6bb5\u7684\u5904\u7406\u3002\u5728\u5148\u524d\u7684\u8bbe\u8ba1\u4e2d\uff0c\u6240\u6709\u5143\u7d20(\u5305\u62ec\u8def\u5f84\u6bb5)\u90fd\u6309\u6392\u5e8f\u987a\u5e8f\u901a\u8fc7\u7ba1\u9053\u8fdb\u884c\u7cbe\u7ec6\u5149\u6805\u5316\u3002\u7ecf\u9a8c\u8bc4\u4f30\u8868\u660e\uff0c\u901a\u8fc7\u7ba1\u9053\u7684\u7ba1\u9053\u5143\u4ef6\u7684\u6210\u672c\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\n\u6709\u4e86\u8fd9\u4e9b\u8bc1\u636e\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u53d8\u5f97\u6e05\u6670\u8d77\u6765\u3002\u8def\u5f84\u5185\u7684\u5404\u4e2a\u8def\u5f84\u6bb5\u6839\u672c\u4e0d\u9700\u8981\u4fdd\u6301\u6392\u5e8f\u3002\u5bf9\u4e8e\u586b\u5145\uff0c\u603b\u7f20\u7ed5\u6570(\u5728\u6297\u952f\u9f7f\u6e32\u67d3\u60c5\u51b5\u4e0b\u4e3a\u7cbe\u786e\u9762\u79ef\u8ba1\u7b97)\u662f\u6bcf\u4e2a\u8def\u5f84\u6bb5\u8d21\u732e\u7684\u603b\u548c\u3002\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e\u7b14\u5212\u7684\u8ddd\u79bb\u573a\u6e32\u67d3\uff0c\u6700\u7ec8\u8ddd\u79bb\u662f\u5230\u6bcf\u4e2a\u7b14\u5212\u6bb5\u7684\u6700\u5c0f\u8ddd\u79bb\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u64cd\u4f5c\u90fd\u662f\u5173\u8054\u7684\u548c\u53ef\u4ea4\u6362\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u5904\u7406\u5355\u4e2a\u5143\u7d20\u3002\n\u56e0\u6b64\uff0c\u7ba1\u9053\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7528\u4e8e\u586b\u5145\u548c\u7b14\u5212\u8def\u5f84(\u4ee5\u53ca\u5c06\u6765\u7684\u5176\u4ed6\u56fe\u5f62\u5143\u7d20)\u7684\u6392\u5e8f\u4e2d\u95f4\u8def\u5f84\uff0c\u4ee5\u53ca\u7528\u4e8e\u8def\u5f84\u6bb5\u7684\u672a\u6392\u5e8f\u7ba1\u9053\u3002\u4e3a\u4e86\u534f\u8c03\u4e24\u8005\uff0c\u6bcf\u6761\u8def\u5f84\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u4e2aid(\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2a\u5e8f\u5217\u53f7)\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8def\u5f84\u6bb5\u90fd\u88ab\u8d4b\u4e88\u5176\u76f8\u5e94\u8def\u5f84\u7684id\u3002\u7b80\u5355\u7684\u74e6\u7247\u5206\u914d\u5185\u6838\u4e3a\u6bcf\u6761\u8def\u5f84\u5206\u914d\u548c\u521d\u59cb\u5316\u74e6\u7247\u7684\u77e9\u5f62\u533a\u57df\u3002\u7136\u540e\uff0c\u7c97\u8def\u5f84\u5149\u6805\u5316\u76f4\u63a5\u4ece\u8def\u5f84\u6bb5\u5f00\u59cb\uff0c\u901a\u8fc7\u4f7f\u7528\u539f\u5b50\u4ea4\u6362\u5c06\u6bb5\u63d2\u5165\u94fe\u8868\u7ed3\u6784\u6765\u7ed8\u5236\u5230\u74e6\u7247\u7ed3\u6784\u4e2d\u3002\n\u6392\u5e8f\u7ba1\u9053\u4e2d\u7684\u7c97\u5149\u6805\u5316\u7c7b\u4f3c\u4e8e\u524d\u9762\u7684\u4e2d\u95f4\u6392\u5e8f\u4f53\u7cfb\u7ed3\u6784\uff0c\u4f46\u6709\u4e00\u4e9b\u6539\u8fdb\u3002\u5b83\u68c0\u67e5\u6bcf\u4e2a\u8def\u5f84\u7684\u77e9\u5f62\u5e73\u94fa\u533a\u57df\uff0c\u5e76\u4f7f\u7528\u5185\u90e8\u4f4d\u56fe\u6807\u8bb0\u975e\u7a7a\u5e73\u94fa(\u8fd9\u662f\u4e00\u4e2a\u9ad8\u5ea6\u5e76\u884c\u548c\u8d1f\u8f7d\u5e73\u8861\u7684\u64cd\u4f5c)\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u4e00\u4e2a\u5e73\u94fa\uff0c\u5e76\u6309\u6392\u5e8f\u987a\u5e8f\u4e3a\u5982\u6b64\u6807\u8bb0\u7684\u6bcf\u4e2a\u5143\u7d20\u8f93\u51fa\u547d\u4ee4\u3002\n\u80cc\u666f\u5904\u7406\u5b9e\u9645\u4e0a\u6bd4\u4ee5\u524d\u7684\u7248\u672c\u66f4\u7b80\u5355\u3002\u5f53\u9700\u8981\u80cc\u666f(\u6a2a\u8de8\u6c34\u5e73\u5e73\u94fa\u8fb9\u754c\u7684\u8def\u5f84\u6bb5)\u65f6\uff0c\u53ea\u9700\u5728\u8be5\u5e73\u94fa\u7684\u80cc\u666f\u4e0a\u6dfb\u52a0+1\u6216-1\u5373\u53ef\u3002\u7136\u540e\uff0c\u53e6\u4e00\u4e2a\u5185\u6838\u5728\u5e73\u94fa\u626b\u63cf\u7ebf\u4e0a\u6267\u884c\u524d\u7f00\u6c42\u548c\uff0c\u5c06\u80cc\u666f\u4f20\u64ad\u5230\u53f3\u4fa7\u3002\u5177\u6709\u975e\u96f6\u80cc\u666f\u4f46\u6ca1\u6709\u8def\u5f84\u6bb5\u7684\u74f7\u7816\u5c06\u83b7\u5f97\u201c\u7eaf\u8272\u201d\u547d\u4ee4\u3002\u8be5\u4f53\u7cfb\u7ed3\u6784\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\uff0c\u5bf9\u4e8e\u9ad8\u5ea6\u590d\u6742\u7684\u8def\u5f84\uff0c\u6ca1\u6709O(n^2)\uff0c\u5c31\u50cf\u5728\u524d\u9762\u7684\u8fed\u4ee3\u4e2d\u4e00\u6837\uff0c\u4e5f\u6ca1\u6709\u5176\u4ed6\u57fa\u4e8eGPU\u7684\u6e32\u67d3\u5668\uff0c\u5982slug\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u6027\u80fd\u662f\u4ee4\u4eba\u6ee1\u610f\u7684\uff0c\u8fd9\u662f\u4ee5\u524d\u7684\u8fed\u4ee3\u6240\u4e0d\u80fd\u5b9e\u73b0\u7684\uff0c\u4e0d\u4ec5\u56e0\u4e3a\u5b83\u5f88\u5feb(\u662f)\uff0c\u800c\u4e14\u56e0\u4e3a\u5b83\u662f\u53ef\u4ee5\u7406\u89e3\u7684\u3002\u7ba1\u9053\u4e2d\u7684\u6bcf\u4e00\u7b14\u6210\u672c\u90fd\u6709\u5176\u539f\u56e0\u3002\u60a8\u5fc5\u987b\u5bf9\u8def\u5f84\u8fdb\u884c\u6392\u5e8f\u5e76\u6309\u987a\u5e8f\u5408\u6210\u5b83\u4eec\uff0c\u8fd9\u6837\u505a\u662f\u6709\u4ee3\u4ef7\u7684\u3002\u4f46\u662f\u53ea\u6709\u8def\u5f84\uff0c\u800c\u4e0d\u662f\u8def\u5f84\u4e2d\u7684\u6bb5\uff0c\u6240\u4ee5\u6210\u672c\u8981\u4f4e\u5f97\u591a\u3002\u7ba1\u9053\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7279\u6027\u662f\u201c\u6027\u80fd\u5e73\u6ed1\u201d\uff1b\u4e0d\u5b58\u5728\u6027\u80fd\u4e0b\u964d\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\n\u57282D\u6e32\u67d3\u6587\u732e\u4e2d\u6709\u4e24\u6761\u4e3b\u8981\u8def\u7ebf\u3002\u4e00\u79cd\u662f\u8ba9\u66f2\u7ebf\u4e0e\u50cf\u7d20\u76f4\u63a5\u4ea4\u4e92\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5148\u5c06\u66f2\u7ebf\u5c55\u5e73\u4e3a\u591a\u6bb5\u7ebf\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u7f3a\u70b9\u3002\u57fa\u672c\u4e0a\uff0c\u884c\u66f4\u5bb9\u6613\u5904\u7406\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u6570\u91cf\u66f4\u591a\u3002\n\u4e4b\u524d\uff0c\u5728PathFinder\u4e4b\u540e\uff0c\u6211\u5728CPU\u4e0a\u8fdb\u884c\u4e86\u5c55\u5e73\u3002\u5f53\u524d\u7684\u4ee3\u7801\u5e93\u662f\u5c06\u6241\u5e73\u5316\u79fb\u52a8\u5230GPU\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u3002\u5b83\u4f7f\u7528\u4e86\u522b\u51fa\u5fc3\u88c1\u7684\u65b0\u5c55\u5e73\u7b97\u6cd5\uff0c\u5c3d\u7ba1\u8be5\u5b9e\u73b0\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u82b1\u54e8\u4e4b\u5904\uff1b\u5c3d\u7ba1\u8be5\u7b97\u6cd5\u5177\u6709\u6709\u52a9\u4e8e\u5e76\u884c\u5b9e\u73b0\u7684\u7279\u6027\uff0c\u4f8b\u5982\u5728\u751f\u6210\u4efb\u4f55\u70b9\u4e4b\u524d\u8ba1\u7b97\u7cbe\u786e\u7684\u7ec6\u5206\u6570\u91cf\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u5b9e\u73b0\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u4e00\u6761\u66f2\u7ebf\u3002\n\u65e9\u671f\u7248\u672c\u7684\u4ee3\u7801\uff0c\u5728GPU\u6241\u5e73\u5316\u4e4b\u524d\uff0c\u6709\u4e00\u4e2a\u9ad8\u5ea6\u5e76\u884c\u7684\u3001\u8d1f\u8f7d\u5e73\u8861\u7684\u7ebf\u6761\u201c\u80d6\u7ebf\u6e32\u67d3\u201d\u5b9e\u73b0\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u5728\u66f2\u7ebf\u6241\u5e73\u5316\u7248\u672c\u4e2d\u4fdd\u7559\u8fd9\u4e00\u70b9\u3002\u5e94\u8be5\u53ef\u4ee5\u5c06\u8fd9\u4e24\u8005\u7ed3\u5408\u8d77\u6765\uff1b\u901a\u5e38\u7684\u65b9\u6cd5\u662f\u5b58\u50a8\u5728\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u7ebf\u6bb5\u961f\u5217\uff0c\u5176\u4e2d\u66f2\u7ebf\u5c55\u5e73\u586b\u5145\u961f\u5217\uff0c\u53e6\u4e00\u4e2a\u9636\u6bb5\u6392\u7a7a\u961f\u5217\uff0c\u5c06\u5176\u8f93\u51fa\u5230\u5168\u5c40\u5185\u5b58\u3002\u8fd9\u4ecd\u7136\u662f\u672a\u6765\u7684\u5de5\u4f5c\uff0c\u7279\u522b\u662f\u5728\u6027\u80fd\u76f8\u5f53\u4e0d\u9519\u7684\u60c5\u51b5\u4e0b\u3002\u8fd9\u4e2a\u7b97\u6cd5\u5f88\u806a\u660e\uff0c\u6211\u5e0c\u671b\u6211\u6709\u673a\u4f1a\u66f4\u8be6\u7ec6\u5730\u63cf\u8ff0\u5b83\u3002\n\u5373\u4f7f\u5728\u5b58\u5728\u7f29\u653e\u548c\u65cb\u8f6c\u7684\u60c5\u51b5\u4e0b\uff0c\u5728GPU\u4e0a\u6267\u884c\u62fc\u5408\u4e5f\u4f1a\u89e3\u9501\u56fe\u5c42\u4f18\u5316\u3002\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u6700\u91cd\u8981\u7684\u5b9e\u9645\u7ed3\u679c\u662f\u5b57\u4f53\u5448\u73b0-\u5b57\u5f62\u53ef\u4ee5\u5448\u73b0\u4e3a\u4efb\u4f55\u5927\u5c0f\uff0c\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u4efb\u610f\u4eff\u5c04\u53d8\u6362\uff0c\u800c\u4e0d\u9700\u8981\u5728CPU\u4e0a\u8fdb\u884c\u4efb\u4f55\u91cd\u65b0\u7f16\u7801\u5de5\u4f5c\u3002\n\u9996\u5148\uff0c\u662f\u514d\u8d23\u58f0\u660e\u3002GPU\u6e32\u67d3\u5668\u7684\u6027\u80fd\u8bc4\u4f30\u5f88\u56f0\u96be\u3002\u6709\u5982\u6b64\u591a\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u9a71\u52a8\u7a0b\u5e8f\u7684\u7ec6\u8282\u3001\u5448\u73b0\u6548\u679c\u548c\u5408\u6210\u5668\u3001\u6d41\u6c34\u7ebf\uff0c\u56e0\u4e3a\u6709\u5f02\u6b65\u9636\u6bb5\uff0c\u54ea\u4e9b\u5f00\u9500\u6765\u6e90\u8981\u8ba1\u6570\uff0c\u54ea\u4e9b\u53ef\u4ee5\u5728\u591a\u4e2a\u5e27\u4e0a\u644a\u9500\u3002\u7531\u4e8eGPU\u901f\u5ea6\u5982\u6b64\u4e4b\u5feb\uff0c\u5373\u4f7f\u4e0a\u4f20\u6570\u636e\u7684CPU\u6210\u672c\u5f88\u5c0f\uff0c\u4e5f\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u6b64\u5916\uff0c\u5bf9\u8ba1\u65f6\u5668\u67e5\u8be2\u7684\u652f\u6301\u8d28\u91cf\u5dee\u522b\u5f88\u5927(\u5c3d\u7ba1\u5b83\u5bf9Vulkan\u6765\u8bf4\u76f8\u5f53\u4e0d\u9519)\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u7ee9\u6548\u6570\u636e\u5e94\u8be5\u6301\u4fdd\u7559\u6001\u5ea6\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u6211\u8ba4\u4e3a\u6d4b\u91cf\u7ed3\u679c\u8db3\u4ee5\u8bc1\u660e\u6211\u4eec\u770b\u5230\u7684\u6d89\u53caCPU\u7684\u6e32\u67d3\u6280\u672f\u6709\u4e86\u5de8\u5927\u7684\u6539\u8fdb\u3002\n\u8fd9\u4e9b\u6d4b\u91cf\u662f\u5728\u4e00\u53f0\u5343\u5146\u5b57\u8282\u7684Aero 14\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u5b8c\u6210\u7684\uff0c\u8be5\u7b14\u8bb0\u672c\u7535\u8111\u914d\u5907\u4e86Intel i7-7700HQ CPU\uff0c\u4ee5\u53ca\u8fd0\u884cWindows 10\u7684NVIDIA GTX 1060\u548c\u96c6\u6210HD 630\u663e\u5361\u3002Piet-GPU\u7684\u8f93\u51fa\u753b\u5e03\u4e3a2048x1536\uff0c\u5176\u4ed6\u6e32\u67d3\u5668\u7684\u8f93\u51fa\u753b\u5e03\u5927\u81f4\u7c7b\u4f3c\u3002\u8001\u864e\u7684\u6bd4\u4f8b\u56e0\u5b50\u662f8\u500d\uff0c\u7eb8\u5f20-1\u548c\u5df4\u9ece-30K\u7684\u6bd4\u4f8b\u56e0\u5b50\u662f1.5\u500d\u3002\n\u6211\u6bd4\u8f83\u4e86\u4e09\u4e2a\u6e32\u67d3\u5668\u3002\u5bf9\u4e8ePiet-GPU\uff0c\u6211\u53ea\u8ba1\u7b97\u6e32\u67d3\u65f6\u95f4\uff0c\u4e0d\u8ba1\u7b97\u7f16\u7801\u65f6\u95f4\u3002\u6211\u89c9\u5f97\u8fd9\u662f\u516c\u5e73\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u4e3a\u91cd\u7528\u7f16\u7801\u5c42\u800c\u8bbe\u8ba1\u7684\uff1b\u5b83\u4eec\u53ef\u4ee5\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u8fdb\u884c\u4efb\u610f\u4eff\u5c04\u53d8\u6362\u3002\u7f16\u7801\u7684\u6210\u672c\u4e0e\u6e32\u67d3\u7684\u6210\u672c\u662f\u76f8\u540c\u7684\u6570\u91cf\u7ea7\uff1b\u5bf9\u4e8eTiger\u6765\u8bf4\u5927\u7ea6\u662f200us\uff0c\u5927\u7ea6\u6bd4\u89e3\u6790SVG\u5c11\u4e00\u4e2a\u6570\u91cf\u7ea7\u3002\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u90fd\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4fdd\u7559\u5c42\u4ee5\u5b9e\u73b0\u826f\u597d\u7684\u6027\u80fd\u3002\n\u5bf9\u4e8ePathFinder\uff0c\u6211\u53ea\u6bd4\u8f83\u4e3b\u5206\u652f(\u4f4d\u4e8e0f35009)\u3002\u5047\u8bbeCPU\u548cGPU\u662f\u6d41\u6c34\u7ebf\u7684\uff0c\u6211\u91c7\u7528\u6700\u5927\u7684CPU\u548cGPU\u65f6\u95f4\u3002\u8fd9\u662f\u6177\u6168\u7684\uff0c\u56e0\u4e3a\u5047\u8bbe\u53ef\u80fd\u4e0d\u6210\u7acb\uff0c\u4f8b\u5982\uff0c\u5982\u679cCPU\u8d1f\u8f7d\u5f88\u9ad8\uff0c\u6b63\u5728\u4e3a\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u5176\u4ed6\u5904\u7406\u3002\u6211\u8fd8\u5e94\u8be5\u6ce8\u610f\u5230\uff0c\u6709\u4e00\u4e2a\u5f00\u53d1\u5206\u652f\u5c06\u5927\u90e8\u5206\u5e73\u94fa\u79fb\u52a8\u5230GPU\u4e0a\uff0c\u5e76\u663e\u793a\u51fa\u975e\u5e38\u6709\u5e0c\u671b\u7684\u6027\u80fd\uff0c\u53ef\u4e0ePiet-GPU\u76f8\u5ab2\u7f8e\u3002\n\u5bf9\u4e8ecairo\uff0c\u6211\u4f7f\u7528resvg\u7684rendersvg\u5de5\u5177\u7684--perf\u9009\u9879\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002\u6211\u53ea\u8ba1\u7b97\u201c\u6e32\u67d3\u201d\u65f6\u95f4\uff0c\u800c\u4e0d\u8ba1\u7b97\u201c\u9884\u5904\u7406\u201d\u65f6\u95f4\u3002\u540e\u8005\u5c06\u4f7f\u603b\u65f6\u95f4\u518d\u589e\u52a0\u7ea650%\u3002\u6211\u8fd8\u5c1d\u8bd5\u4e86raqote\u540e\u7aef\uff0c\u53d1\u73b0\u5b83\u6bd4cairo\u5927\u7ea6\u61621.5\u52302\u500d\u3002\n\u6211\u8fd8\u5e94\u8be5\u6ce8\u610f\u5230\uff0c\u4e0e\u4e0a\u4e00\u6b21\u4e0d\u540c\uff0c\u6211\u901a\u8fc7\u9884\u5148\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5c06\u6b63\u786e\u7684\u7b14\u5212\u6837\u5f0f\u5e94\u7528\u5230\u4e86Paris-30k\u793a\u4f8b\u4e2d\u3002\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u589e\u52a0\u4e86\u6e32\u67d3\u65f6\u95f4\uff0c\u5e76\u4f7f\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u7684\u6bd4\u8f83\u66f4\u52a0\u516c\u5e73\u3002\u6211\u5e0c\u671b\u901a\u8fc7\u8ddd\u79bb\u573a\u6e32\u67d3\u6280\u672f(\u7279\u522b\u9002\u5408\u5706\u5f62\u8fde\u63a5\u548c\u5c01\u53e3)\u548c\u8def\u5f84\u5230\u8def\u5f84\u8f6c\u6362\u7684\u7ec4\u5408\uff0c\u6709\u53ef\u80fd\u5728GPU\u7aef\u5e94\u7528\u7b14\u5212\u6837\u5f0f\uff0c\u8fd9\u53ef\u80fd\u5177\u6709\u4e0e\u5c55\u5e73\u5927\u81f4\u76f8\u4f3c\u7684\u6027\u80fd\u914d\u7f6e\u6587\u4ef6\u3002\n\u7531\u4e8ePiet-GPU\u6e32\u67d3\u82b1\u8d39\u7684\u65f6\u95f4\u51e0\u4e4e\u4e0d\u53ef\u89c1\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u5c06y\u8f74\u91cd\u65b0\u8c03\u6574\u4e3a\u6700\u592750ms\uff1a\n\u6211\u53d1\u73b0\u8fd9\u4e9b\u975e\u5e38\u4ee4\u4eba\u5174\u594b\u7684\u7ed3\u679c\u3002\u5c06\u6e32\u67d3\u8f6c\u79fb\u5230GPU\u610f\u5473\u7740\u5373\u4f7f\u5bf9\u4e8e\u975e\u5e38\u590d\u6742\u7684\u6587\u6863\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u4ea4\u4e92\u5e27\u901f\u7387\uff0c\u5373\u4f7f\u5728\u82f1\u7279\u5c14630\u4e0a\uff0c\u7eb8\u5f20\u793a\u4f8b(\u5bc6\u96c6\u77e2\u91cf\u6587\u672c)\u7684\u8fd0\u884c\u65f6\u95f4\u4e5f\u662f7.6ms\uff0c\u8fd9\u610f\u5473\u774060fps\u662f\u53ef\u80fd\u7684\uff0c\u5e76\u4e14\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u53ef\u7528\u3002(\u66f4\u8be6\u7ec6\u7684\u6d4b\u91cf\u5728\u7535\u5b50\u8868\u683c\u4e2d\u63d0\u4f9b\uff0c\u4f46\u6839\u636e\u4e00\u822c\u7ecf\u9a8c\uff0c\u82f1\u7279\u5c14HD 630\u7684\u901f\u5ea6\u6bd4GTX 1060\u6162\u7ea65\u500d)\u3002\u6211\u4e0d\u77e5\u9053\u6709\u4efb\u4f55\u53d1\u5e03\u7684\u6e32\u67d3\u5668\u5177\u6709\u7c7b\u4f3c\u7684\u6027\u80fd\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4eca\u5929\u4f7f\u7528\u7684\u5f88\u591a\u8f6f\u4ef6\u90fd\u505c\u7559\u5728CPU\u6e32\u67d3\u4e0a\uff0c\u6027\u80fd\u8fdc\u8fdc\u4e0d\u53caGPU\u4e0a\u7684\u6027\u80fd\u3002\u6211\u4eec\u5e94\u8be5\u505a\u5f97\u66f4\u597d\u3002\n\u6211\u4e0d\u6253\u7b97\u8be6\u7ec6\u6bd4\u8f83\u5f53\u524d\u7684\u4ee3\u7801\u5e93\u548c\u4e0a\u4e00\u7bc7\u6587\u7ae0\u3002\u6211\u770b\u5230\u8fdb\u5165\u7c97\u7565\u5149\u6805\u5316\u7684\u65f6\u95f4\u6bd4\u4f8b\u4e0b\u964d\u4e86\uff0c\u4f46\u662f\u5f53\u6211\u6539\u53d8\u6dfb\u52a0GPU\u4fa7\u7684\u6241\u5e73\u5316\u65f6\uff0c\u65f6\u95f4\u5c31\u589e\u52a0\u4e86\u3002\u5f53\u7136\uff0c\u603b\u4f53\u6027\u80fd\u8981\u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u73b0\u5728\u80fd\u591f\u8f6c\u6362\u5411\u91cf\u5c42\uff0c\u800c\u4ee5\u524d\u8fd9\u9700\u8981\u5728CPU\u4e0a\u91cd\u65b0\u6241\u5e73\u5316\u3002\u6b64\u5916\uff0c\u6211\u77e5\u9053\u6709\u5f88\u591a\u4f18\u5316\u7684\u673a\u4f1a\uff0c\u6240\u4ee5\u6211\u5f88\u6709\u4fe1\u5fc3\u53ef\u4ee5\u628a\u6570\u5b57\u964d\u5f97\u66f4\u4f4e\u3002\u4f46\u662f\u8fd9\u79cd\u4ee4\u4eba\u7740\u8ff7\u7684\u4f18\u5316\u9700\u8981\u5927\u91cf\u7684\u65f6\u95f4\u548c\u7cbe\u529b\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6211\u4f1a\u8d28\u7591\u5b83\u7684\u4ef7\u503c\uff1b\u6211\u76f8\u4fe1\u5f53\u524d\u7684\u4ee3\u7801\u5e93\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e9b\u60f3\u6cd5\u662f\u53ef\u884c\u7684\u3002\n\u6211\u76f8\u4fe1\u6211\u5df2\u7ecf\u4ee4\u4eba\u4fe1\u670d\u5730\u8bc1\u660e\uff0c\u5c06\u6240\u6709\u76842D\u6e32\u67d3\u4efb\u52a1\u8f6c\u79fb\u5230GPU\u662f\u53ef\u884c\u7684\uff0c\u5e76\u4ea7\u751f\u51fa\u8272\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u60f3\u6cd5\u662f\u901a\u7528\u7684\uff0c\u5e94\u8be5\u5f88\u597d\u5730\u9002\u5e94\u4e00\u7cfb\u5217\u56fe\u5f62\u57fa\u5143\u548c\u7cbe\u7ec6\u6e32\u67d3\u6280\u672f\u3002\u6211\u76f8\u4fe1\u5b83\u4f5c\u4e3a\u4e00\u7bc7\u5b66\u672f\u8bba\u6587\u4f1a\u6709\u5f88\u597d\u7684\u8868\u73b0\uff0c\u6211\u60f3\u627e\u65f6\u95f4\u628a\u5b83\u5199\u6210\u8fd9\u6837\u3002\n\u5df2\u7ecf\u8d70\u5230\u8fd9\u4e00\u6b65\u4e86\uff0c\u6211\u4e0d\u786e\u5b9a\u6211\u8fd8\u60f3\u8ba9Piet-GPU\u4ee3\u7801\u5e93\u8d70\u591a\u8fdc\u3002\u6211\u8ba4\u4e3a\u4e00\u4e2a\u7406\u60f3\u7684\u7ed3\u679c\u662f\u5c06\u8fd9\u4e9b\u60f3\u6cd5\u5408\u5e76\u5230\u50cfPathFinder\u8fd9\u6837\u7684\u73b0\u6709\u5f00\u6e90\u6e32\u67d3\u5668\u4e2d\uff0c\u5e76\u5bf9\u8fd9\u65b9\u9762\u7684\u8fdb\u5c55\u611f\u5230\u9f13\u821e\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u6211\u76f8\u4fe1\u63a2\u7d22\u4ee5GPU\u4e3a\u4e2d\u5fc3\u7684\u5c42\u65b9\u6cd5\u8fd8\u662f\u6709\u4e00\u4e9b\u597d\u5904\u7684\u3002\n\u6240\u6709\u8fd9\u4e9b\u5de5\u4f5c\u90fd\u662f\u5728\u6211\u81ea\u5df1\u7684\u65f6\u95f4\u91cc\u505a\u7684\u3002\u6839\u636e\u6211\u7684\u8bb8\u53ef\u653f\u7b56\uff0c\u4e0eslug\u7b49\u5176\u4ed6\u5e93\u4e0d\u540c\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u662f\u5728\u8bb8\u53ef\u7684\u5f00\u653e\u6e90\u7801\u8bb8\u53ef\u4e0b\u53d1\u5e03\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u4e13\u5229\u4fdd\u62a4\u3002\u5c55\u671b\u672a\u6765\uff0c\u6211\u7684\u65f6\u95f4\u5df2\u7ecf\u8bf4\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u56e0\u4e3a\u6211\u5c06\u5168\u804c\u4ece\u4e8bRunebender\u548c\u5fb7\u9c81\u4f0a\u7684\u5de5\u4f5c\uff0c\u8c37\u6b4c\u5b57\u4f53\u5c06\u4e3a\u6211\u63d0\u4f9b\u6177\u6168\u7684\u8d44\u91d1\u652f\u6301\u3002\u4f46\u6211\u9f13\u52b1\u7f16\u5199\u65b02D\u6e32\u67d3\u5f15\u64ce\u7684\u4eba\u8003\u8651\u6211\u5df2\u7ecf\u63a2\u7d22\u8fc7\u7684\u6280\u672f\uff0c\u5e76\u53ef\u80fd\u5bf9\u54a8\u8be2\u5b89\u6392\u6301\u5f00\u653e\u6001\u5ea6\u3002\n\u5bf9\u66f4\u591a\u7ec6\u8282\u611f\u5174\u8da3\u7684\u4eba(\u56e0\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u662f\u4e00\u4e2a\u9ad8\u7ea7\u6982\u8ff0)\u53ef\u80fd\u60f3\u8981\u9605\u8bfb\u6211\u5728\u5b9e\u73b0\u524d\u9762\u7684\u6392\u5e8f\u4e2d\u95f4\u4f53\u7cfb\u7ed3\u6784\u4e4b\u540e\u5f00\u59cb\u7f16\u7801\u4e4b\u524d\u7f16\u5199\u7684\u8bbe\u8ba1\u6587\u6863\u3002\u5728Xi zulip\u4e0a\u6709\u5927\u91cf\u5173\u4e8e#GPU\u6d41\u7684\u975e\u5e38\u8be6\u7ec6\u7684\u8ba8\u8bba(\u9700\u8981\u6ce8\u518c\uff0c\u4efb\u4f55\u62e5\u6709Github\u5e10\u6237\u7684\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528)\u3002\n\u6211\u4ece\u4e2d\u5b66\u5230\u4e86\u5f88\u591a\uff0c\u5e0c\u671b\u5176\u4ed6\u4eba\u4e5f\u80fd\u5b66\u5230\u3002\u6211\u5e0c\u671b\u6211\u4eec\u80fd\u5171\u540c\u5230\u8fbe\u4e00\u4e2aGUI\u548c\u5176\u4ed62D\u6e32\u67d3\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684jank\u662f\u4e0d\u5bfb\u5e38\u7684\uff0c\u800c\u4e0d\u662f\u89c4\u8303\u7684\u4e16\u754c\u3002\u786c\u4ef6\u5f53\u7136\u53ef\u4ee5\u652f\u6301\u5b83\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u6784\u5efa\u5f15\u64ce\u5e76\u5c06\u5176\u96c6\u6210\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u95ee\u9898\u3002", "note_en": "Previously on my quest for fast rendering of 2D vector graphics on GPU, I have posted a  piet-gpu update and a deeper exploration into a  sort-middle architecture. These intermediate results showed promise, but fell short of my vision for truly high performance 2D GPU rendering.\n I am now pleased to present an architecture that I believe does realize this vision. The performance is impressive, but more than that, the architecture is derived from principles and is founded on a general pipeline, as opposed to being a collection of hacks in the service of benchmark results. As much work as possible is offloaded to the GPU, which minimizes the risk of jank in UI rendering and lets us exploit the continuing performance improvements in GPU technology.\n Further, this rendering pipeline is well suited both for fully dynamic and (partially) static content. It does not rely on precomputation, instead quickly processing the scenes into tiles for \u201cfine rasterization\u201d at the of the pipeline. Even so, static fragments of the scene can readily be retained and stitched together, so that the CPU-side cost is minimized.\n  I also want to be up-front about the limitations of the work. First, the imaging model is still fairly limited, as I\u2019ve been focusing on path rendering. I believe that the general nature of the pipeline makes the architecture amenable to a richer imaging model such as SVG or PDF, but until that\u2019s actually implemented, it\u2019s somewhat speculative. Second, the implementation relies heavily on GPU compute capabilities, so will not run on older hardware or drivers. I should also note that  Pathfinder has a much better story on both fronts; in particular it has a \u201cmix and match\u201d architecture so that much work besides the fine rasterization can be done on CPU.\n Another limitation is that complex scenes can require lots of memory. Certainly the current implementation doesn\u2019t do anything clever to deal with this, it just allocates buffers which are hopefully big enough. There are ways to deal with it, but unfortunately it is a source of additional complexity.\n   I\u2019m not going to go into extreme detail here, rather try to provide an overview.\n  The architecture is firmly based on the previous  sort-middle design. The major difference, though, is the handling of path segments. In the previous design,  all elements, path segments included, were carried through the pipeline in sorted order to fine rasterization. Empirical evaluation showed that plumbing elements through the pipeline had a nontrivial cost.\n Given this evidence, the solution became clear. Individual path segments within a path do not need to be kept sorted at all. For a fill, the total winding number (or exact area calculation in the case of antialiased rendering) is the sum of the contributions from each path segment. Similarly, for distance field rendering of strokes, the final distance is the minimum of that to each stroke segment. In both cases, the operation is associative and commutative, so the individual elements can be processed in any order.\n Thus, the pipeline splits into two parts; a sort-middle path for filled and stroked paths (and, in the future, other graphic elements), and an unsorted pipeline for path segments. To coordinate the two, each path is assigned an id (just a sequence number, really), and each path segment is ascribed to its corresponding path\u2019s id. A simple  tile allocation kernel allocates and initializes a rectangular region of tiles for each path. Then coarse path rasterization proceeds directly from the path segments, drawing into the tile structures by using an  atomicExchange to insert segments into a linked list structure.\n Coarse rasterization in the sorted pipeline is similar to the previous sort-middle architecture, with some refinement. It inspects the rectangular tile region for each path, and marks non-empty tiles using an internal bitmap (this is a highly parallel and load-balanced operation). Then, each thread processes one tile, and outputs commands for each element that was so marked, in sorted order.\n Backdrop processing is actually more straightforward than the previous version. When backdrop is needed (a path segment crossing a horizontal tile boundary), there\u2019s just a simple  atomicAdd of +1 or -1 to the backdrop for that tile. Then, another kernel performs a prefix sum across a scanline of tiles, propagating that backdrop to the right. Tiles with nonzero backdrop but also no path segments get a \u201csolid color\u201d command. One of the nice things about this architecture is that there is no O(n^2) for highly complex paths, as there was in previous iterations, and also other GPU-based renderers such as  Slug.\n To me, the performance is satisfying in a way not fulfilled by previous iterations, not only because it\u2019s fast (it is), but because it\u2019s  understandable. Every cost in the pipeline has a reason. You have to keep paths sorted and composite them in order, and there\u2019s a cost to doing that. But only paths, not segments within a path, so the cost is a lot less. And a nice feature of the pipeline is \u201cperformance smoothness;\u201d there aren\u2019t workloads where the performance degrades.\n  There are two major lines of approach in the 2D rendering literature. One is for curves to interact directly with pixels. The other is for curves to be  flattened into polylines first. Both approaches have advantages and disadvantages. Basically, lines are simpler to handle, but there are more of them.\n Previously, following Pathfinder, I had the flattening on the CPU. The current codebase is the first iteration that moves the flattening to GPU. It uses the fancy new flattening algorithm, though there is nothing particularly fancy about the implementation; though the algorithm has features that are helpful to parallel implementation, such as computing the exact number of subdivisions before producing any of the points, this was a fairly straightforward implementation, each thread processing one curve.\n An  earlier version of the code, before GPU flattening, had a highly parallel, load balanced implementation of \u201cfat line rendering\u201d of lines, but I didn\u2019t retain this for the curve-flattening version. It should be possible to combine the two; the general approach would be a queue of line segments stored in shared memory, with curve flattening filling the queue and another stage draining it, doing the output to global memory. This remains as future work, especially as performance is pretty good as-is. The algorithm is clever, and I hope I get a chance to describe it in more detail.\n Doing flattening on the GPU unlocks layer optimizations, even in the presence of zoom and rotation. Almost certainly, the most important practical consequence is font rendering \u2014 a glyph can be rendered at any size, actually with arbitrary affine transformation, without any re-encoding work on the CPU.\n  First, a disclaimer. Performance evaluation of GPU renderers is  hard. There are so many variables, including details of drivers, effects of presentation and the compositor, pipelining because there are async stages, which sources of overhead to count and which can be amortized over multiple frames. Because GPUs are so fast, even a small CPU cost for uploading data is significant. Also, quality of support for timer queries varies a lot (though it\u2019s pretty good for Vulkan). Because of all that, the performance numbers should be taken with a grain of salt. Even so, I think the measurements are good enough to demonstrate the  massive improvements we see over rendering techniques that involve the CPU.\n These measurements were done on a Gigabyte Aero 14 laptop with an Intel i7-7700HQ CPU, and both an Nvidia GTX 1060 and integrated HD 630 graphics, running Windows 10. The output canvas is 2048x1536 for piet-gpu and generally similar for the other renderers. The scale factor is 8x for tiger and 1.5x for paper-1 and paris-30k.\n I compare three renderers. For piet-gpu I am counting only the rendering time, not encoding. I feel this is fair because it is designed to reuse encoded layers; they can be rotated, zoomed, and subjected to arbitrary affine transformations. The cost of encoding is on the same order of magnitude as rendering; for tiger it is about 200us, and about an order of magnitude less than parsing the SVG. Any application will  need a way to retain layers some way or other in order to achieve good performance.\n For  Pathfinder I am comparing only the master branch (at  0f35009). I take the maximum of CPU and GPU times, assuming that they are pipelined. This is generous, as the assumption might not be valid, for example if the CPU is highly loaded doing other processing for the application. I should also note that there is a  development branch which moves most of the tiling to the GPU and is showing  extremely promising performance, comparable to piet-gpu.\n For  Cairo I am benchmarking using the  --perf option to  resvg\u2019s rendersvg tool. I am counting only the \u201crendering\u201d and not \u201cpreprocessing\u201d times. The latter would add about another 50% to the total time. I also tried the  raqote backend and found it to be approximately 1.5x to 2x slower than Cairo.\n I should also note that, unlike last time around, I  am applying correct stroke style to the paris-30k example, by doing preprocessing beforehand. This adds somewhat to rendering time, and makes the comparison with other renderers more fair. I am hopeful that it is possible to apply stroke styles GPU-side, through a combination of distance field rendering techniques (especially good for round joins and caps) and path-to-path transformations, which would probably have a performance profile broadly similar to flattening.\n   Since the amount of time taken by piet-gpu rendering is barely visible, let\u2019s rescale the y axis to a maximum of 50ms:\n  I find these really exciting results. Moving rendering to GPU means that interactive frame rates are possible even with very complex documents, and even on Intel 630 the paper-1 example (dense vector text) runs in 7.6ms, meaning 60fps is possible with plenty of room to spare. (More detailed measurements are in a  spreadsheet, but as a general rule of thumb, the Intel HD 630 is about 5x slower than the GTX 1060). I am unaware of any published renderer with comparable performance.\n Unfortunately, a lot of software we use today is stuck on CPU rendering, which has performance nowhere near what is possible on GPU. We should do better.\n  I\u2019m not going to go into a lot of detail comparing the current codebase with the previous post. I saw the fraction of time going into coarse rasterization go down, but then as I made changes to add GPU-side flattening, the time went up. Of course, the overall performance is dramatically better because it is now capable of transformable vector layers, and previously that would have required re-flattening on the CPU. In addition, I am aware of a number of opportunities for optimization, so I am quite confident I could bring the numbers still lower. But this obsessive optimization takes a huge amount of time and effort, and at some point I question how valuable it is; I believe the current codebase stands in proving the ideas viable.\n  I believe I have demonstrated convincingly that moving alomst all of the 2D rendering task to the GPU is viable and yields excellent performance. Further, the ideas are general, and should adapt well to a range of graphics primitives and fine rendering techniques. I believe it would hold up well as an academic paper, and would like to find the time to write it up as such.\n Having got this far, I\u2019m not sure how much farther I want to take the piet-gpu codebase. I think an ideal outcome would be to have the ideas folded into existing open-source renderers like Pathfinder, and am encouraged by progress on that front. Even so, I believe there is some benefit to exploring a GPU-centric approach to layers.\n All of this work has been on my own time. In accordance with my  licensing policies, everything is published under a permissive open source license, and with no patent protection, unlike other libraries such as  Slug. Going forward, my time is pretty well spoken for, as I\u2019m going to be working on  Runebender and  druid full-time with generous financial support from Google Fonts. But I encourage people writing new 2D rendering engines to consider the techniques I\u2019ve explored, and might be open to consulting arrangements.\n People who are interested in more details (as this post is something of a high level overview) may want to read the  design document I wrote after implementing the previous sort-middle architecture and before starting coding on this. And there\u2019s a  ton of quite detailed discussion on the  #gpu stream on the xi zulip (signup required, open to anyone with a Github account).\n I\u2019ve learned a lot from this, and hope others do too. And I hope we can collectively get to a world where jank in GUI and other 2D rendering applications is unusual, rather than the norm. The hardware can certainly support it, it\u2019s just a question of building the engine and integrating it into applications.", "posttime": "2020-06-14 08:12:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "gpu,rendering", "title": "GPU\u4e0a\u7684\u5feb\u901f2D\u6e32\u67d3", "title_en": "Fast 2D Rendering on GPU", "transed": 1, "url": "https://raphlinus.github.io/rust/graphics/gpu/2020/06/13/fast-2d-rendering.html", "via": "", "real_tags": ["gpu", "rendering"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006474, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8868\u793a\u4e0d\u53d8\u91cf\u662f\u4fdd\u5b58\u6a21\u5757\u4ea7\u751f\u7684\u62bd\u8c61\u7c7b\u578b\u7684\u6240\u6709\u503c\u7684\u5c5e\u6027\u3002\u8868\u793a\u4e0d\u53d8\u91cf\u5728\u8f6f\u4ef6\u5de5\u7a0b\u548c\u7a0b\u5e8f\u9a8c\u8bc1\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5f00\u53d1\u4e86\u4e00\u4e2a\u53cd\u4f8b\u9a71\u52a8\u7684\u7b97\u6cd5\uff0c\u7528\u4e8e\u63a8\u5bfc\u8db3\u4ee5\u9690\u542b\u6a21\u5757\u6240\u9700\u89c4\u8303\u7684\u8868\u793a\u4e0d\u53d8\u91cf\u3002\u5173\u952e\u7684\u65b0\u9896\u6027\u662f\u7c7b\u578b\u5bfc\u5411\u7684\u53ef\u89c6\u5f52\u7eb3\u6982\u5ff5\uff0c\u5b83\u786e\u4fdd\u7b97\u6cd5\u5728\u51cf\u5f31\u548c\u52a0\u5f3a\u5019\u9009\u4e0d\u53d8\u91cf\u4e4b\u95f4\u4ea4\u66ff\u65f6\u671d\u7740\u5176\u76ee\u6807\u524d\u8fdb\u3002\u8be5\u7b97\u6cd5\u7531\u4e00\u4e2a\u57fa\u4e8e\u5b9e\u4f8b\u7684\u7efc\u5408\u5f15\u64ce\u548c\u4e00\u4e2a\u9a8c\u8bc1\u5668\u53c2\u6570\u5316\uff0c\u5e76\u8bc1\u660e\u4e86\u5b83\u5bf9\u4e8e\u6709\u9650\u7c7b\u578b\u4e0a\u7684\u4e00\u9636\u6a21\u5757\u662f\u53ef\u9760\u548c\u5b8c\u5907\u7684\uff0c\u5047\u8bbe\u5408\u6210\u5668\u548c\u9a8c\u8bc1\u5668\u4e5f\u662f\u5982\u6b64\u3002\u6211\u4eec\u5728\u4e00\u4e2a\u540d\u4e3aHanoi\u7684\u5de5\u5177\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u60f3\u6cd5\uff0c\u8be5\u5de5\u5177\u5408\u6210\u9012\u5f52\u6570\u636e\u7c7b\u578b\u7684\u8868\u793a\u4e0d\u53d8\u91cf\u3002\u6cb3\u5185\u4e0d\u4ec5\u5904\u7406\u4e00\u9636\u7801\u7684\u4e0d\u53d8\u91cf\uff0c\u8fd8\u5904\u7406\u9ad8\u9636\u7801\u7684\u4e0d\u53d8\u91cf\u3002\u5728\u540e\u7aef\uff0c\u6cb3\u5185\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3aMyth\u7684\u679a\u4e3e\u5408\u6210\u5668\u548c\u4e00\u4e2a\u679a\u4e3e\u6d4b\u8bd5\u5de5\u5177\u4f5c\u4e3a\u9a8c\u8bc1\u5668\u3002\u56e0\u4e3a\u6cb3\u5185\u4f7f\u7528\u6d4b\u8bd5\u6765\u9a8c\u8bc1\uff0c\u6240\u4ee5\u5b83\u662f\u4e0d\u53ef\u9760\u7684\uff0c\u5c3d\u7ba1\u6211\u4eec\u7684\u7ecf\u9a8c\u8bc4\u4f30\u8868\u660e\uff0c\u5728\u6211\u4eec\u8c03\u67e5\u7684\u57fa\u51c6\u4e0a\u5b83\u662f\u6210\u529f\u7684\u3002\n\u6211\u4eec\u4ecb\u7ecd\u4e86Analytic Program Repair\uff0c\u8fd9\u662f\u4e00\u79cd\u6570\u636e\u9a71\u52a8\u7684\u7b56\u7565\uff0c\u7528\u4e8e\u901a\u8fc7\u4fee\u590d\u9519\u8bef\u7684\u7a0b\u5e8f\u6765\u63d0\u4f9b\u5bf9\u7c7b\u578b\u9519\u8bef\u7684\u53cd\u9988\u3002\u6211\u4eec\u7684\u7b56\u7565\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u6d1e\u5bdf\u529b\uff0c\u5373\u7c7b\u4f3c\u7684\u9519\u8bef\u4e5f\u6709\u7c7b\u4f3c\u7684\u4fee\u590d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u4e0d\u826f\u7c7b\u578b\u7a0b\u5e8f\u5bf9\u53ca\u5176\u56fa\u5b9a\u7248\u672c\u7684\u8bad\u7ec3\u6570\u636e\u96c6\u6765\uff1a(1)\u901a\u8fc7\u5c06\u8bad\u7ec3\u96c6\u4e2d\u6240\u505a\u7684\u7f16\u8f91\u62bd\u8c61\u548c\u5212\u5206\u6210\u5177\u6709\u4ee3\u8868\u6027\u7684\u6a21\u677f\u96c6\u6765\u5b66\u4e60\u5019\u9009\u4fee\u590d\u6a21\u677f\u7684\u96c6\u5408\uff1b(2)\u901a\u8fc7\u5728\u8bad\u7ec3\u96c6\u4e2d\u4f7f\u7528\u7684\u4fee\u590d\u6a21\u677f\u4e0a\u8bad\u7ec3\u591a\u7c7b\u5206\u7c7b\u5668\uff0c\u4ece\u7ed9\u5b9a\u7684\u9519\u8bef\u4e2d\u9884\u6d4b\u5408\u9002\u7684\u6a21\u677f\uff1b(3)\u901a\u8fc7\u679a\u4e3e\u548c\u6392\u5e8f\u4e0e\u9884\u6d4b\u6a21\u677f\u5339\u914d\u7684\u6b63\u786e(\u4f8b\u5982\uff0c\u7c7b\u578b\u826f\u597d\u7684)\u672f\u8bed\u6765\u4ece\u6a21\u677f\u5408\u6210\u5177\u4f53\u7684\u4fee\u590d\u3002\u6211\u4eec\u5df2\u7ecf\u5728Rite\u4e2d\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u65b9\u6cd5\uff1aOCaml\u7a0b\u5e8f\u7684\u7c7b\u578b\u9519\u8bef\u62a5\u544a\u5de5\u5177\u3002\u6211\u4eec\u57284500\u4e2a\u9519\u8bef\u7c7b\u578b\u7684Ocaml\u7a0b\u5e8f\u8bed\u6599\u5e93\u4e0a\u5bf9Rite\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\u8fdb\u884c\u4e86\u8bc4\u4f30\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u6765\u81ea\u5165\u95e8\u7f16\u7a0b\u8bfe\u7a0b\u7684\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u5bf9\u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\u7684\u8d28\u91cf\u8fdb\u884c\u4e86\u7528\u6237\u7814\u7a76\uff0c\u663e\u793a\u51fa\u9519\u8bef\u6d88\u606f\u7684\u4f4d\u7f6e\u548c\u6700\u7ec8\u4fee\u590d\u8d28\u91cf\u5728\u7edf\u8ba1\u610f\u4e49\u4e0a\u4f18\u4e8e\u6700\u5148\u8fdb\u7684\u5de5\u5177\u3002\n\u6700\u8fd1\u7684\u7a0b\u5e8f\u5408\u6210\u6280\u672f\u901a\u8fc7\u5c06\u4f4e\u7ea7\u4e09\u89d2\u5f62\u7f51\u683c\u53cd\u7f16\u8bd1\u6210\u6784\u9020\u6027\u5b9e\u4f53\u51e0\u4f55(CSG)\u8868\u8fbe\u5f0f\u6765\u5e2e\u52a9\u7528\u6237\u5b9a\u5236CAD\u6a21\u578b(\u4f8b\u5982\uff0c\u7528\u4e8e3D\u6253\u5370)\u3002\u5728\u6ca1\u6709\u5faa\u73af\u6216\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8f91CSG\u53ef\u80fd\u9700\u8981\u8bb8\u591a\u534f\u8c03\u7684\u66f4\u6539\uff0c\u800c\u73b0\u6709\u7684\u7f51\u683c\u53cd\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u542f\u53d1\u5f0f\u7b97\u6cd5\u53ef\u80fd\u4f1a\u6df7\u6dc6\u9ad8\u7ea7\u7ed3\u6784\u3002\n\u672c\u6587\u63d0\u51fa\u4e86\u7b2c\u4e8c\u4e2a\u53cd\u7f16\u8bd1\u9636\u6bb5\uff0c\u4ee5\u7a33\u5065\u5730\u5c06\u975e\u7ed3\u6784\u5316CSG\u8868\u8fbe\u5f0f\u6536\u7f29\u4e3a\u5177\u6709MAP\u548cFold\u8fd0\u7b97\u7b26\u7684\u66f4\u5177\u53ef\u7f16\u8f91\u6027\u7684\u7a0b\u5e8f\u3002\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u4e2a\u5de5\u5177Szalinski\uff0c\u5b83\u4f7f\u7528\u76f8\u7b49\u9971\u548c\u548c\u4fdd\u6301\u8bed\u4e49\u7684CAD\u91cd\u5199\u6765\u9ad8\u6548\u5730\u641c\u7d22\u8f83\u5c0f\u7684\u7b49\u4ef7\u7a0b\u5e8f\u3002Szalinski\u4f9d\u8d56\u4e8e\u9006\u53d8\u6362\uff0c\u8fd9\u662f\u6c42\u89e3\u8005\u63a8\u6d4b\u6027\u5730\u5c06\u7b49\u4ef7\u9879\u6dfb\u52a0\u5230E\u56fe\u4e2d\u7684\u4e00\u79cd\u65b0\u65b9\u6cd5\u3002\u6211\u4eec\u5728\u6848\u4f8b\u7814\u7a76\u4e2d\u5bf9Szalinski\u8fdb\u884c\u4e86\u5b9a\u6027\u8bc4\u4f30\uff0c\u5c55\u793a\u4e86\u5b83\u5982\u4f55\u4e0e\u73b0\u6709\u7684\u7f51\u683c\u53cd\u7f16\u8bd1\u5668\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u6f14\u793a\u4e86Szalinski\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u5185\u7f29\u5c0f\u5927\u578b\u6a21\u578b\u3002\n\u8fde\u7eed\u6807\u8bb0\u542f\u7528\u8bed\u8a00\u4e2d\u7684\u52a8\u6001\u7ed1\u5b9a\u548c\u4e0a\u4e0b\u6587\u68c0\u67e5\uff0c\u5e76\u6b63\u786e\u5904\u7406\u5c3e\u90e8\u8c03\u7528\u548c\u4e00\u6d41\u7684\u3001\u591a\u63d0\u793a\u7684\u3001\u5e26\u5206\u9694\u7b26\u7684\u5ef6\u7eed\u3002\u5ef6\u7eed\u6807\u8bb0\u6700\u7b80\u5355\u3001\u6700\u76f4\u63a5\u7684\u7528\u6cd5\u662f\u5b9e\u73b0\u52a8\u6001\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u5982\u5f53\u524d\u8f93\u51fa\u6d41\u6216\u5f53\u524d\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002\u5176\u4ed6\u7528\u9014\u5305\u62ec\u7528\u4e8e\u8c03\u8bd5\u6216\u5b89\u5168\u68c0\u67e5\u7684\u5806\u6808\u68c0\u67e5\u3001\u6b63\u5728\u8fdb\u884c\u7684\u8ba1\u7b97\u7684\u5e8f\u5217\u5316\u4ee5\u53ca\u5197\u4f59\u68c0\u67e5\u7684\u8fd0\u884c\u65f6\u7701\u7565\u3002\u901a\u8fc7\u5411\u7f16\u7a0b\u8bed\u8a00\u7684\u7528\u6237\u516c\u5f00\u8fde\u7eed\u6807\u8bb0\uff0c\u53ef\u4ee5\u5c06\u66f4\u591a\u7c7b\u578b\u7684\u8bed\u8a00\u6269\u5c55\u5b9e\u73b0\u4e3a\u5e93\uff0c\u800c\u65e0\u9700\u8fdb\u4e00\u6b65\u66f4\u6539\u7f16\u8bd1\u5668\u3002\u540c\u65f6\uff0c\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u7cfb\u7edf\u5fc5\u987b\u63d0\u4f9b\u8fde\u7eed\u6807\u8bb0\u7684\u6709\u6548\u5b9e\u73b0\uff0c\u4ee5\u786e\u4fdd\u5e93\u5b9e\u73b0\u7684\u8bed\u8a00\u6269\u5c55\u4e0e\u66f4\u6539\u7f16\u8bd1\u5668\u4e00\u6837\u6709\u6548\u3002\u6211\u4eec\u5b9e\u73b0\u7684CHEZ\u65b9\u6848\u7684\u5ef6\u7eed\u6807\u8bb0(\u652f\u6301\u7403\u62cd)\u4f7f\u5f97\u52a8\u6001\u7ed1\u5b9a\u548c\u67e5\u627e\u53d8\u5f97\u6052\u5b9a\u548c\u5feb\u901f\uff0c\u4fdd\u7559\u4e86CHEZ\u65b9\u6848\u7684\u4e00\u6d41\u5ef6\u7eed\u7684\u6027\u80fd\uff0c\u5e76\u4e14\u5bf9\u4e0d\u4f7f\u7528\u4e00\u6d41\u5ef6\u7eed\u6216\u6807\u8bb0\u7684\u7a0b\u5e8f\u7247\u65ad\u65bd\u52a0\u4e86\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u7684\u5f00\u9500\u3002(=\u3002\n\u5b57\u8282\u53ef\u5bfb\u5740\u6c38\u4e45\u5b58\u50a8\u5668(\u5982Intel/Micron 3D XPoint)\u662f\u4e00\u79cd\u65b0\u5174\u7684\u6280\u672f\uff0c\u5b83\u5728\u6613\u5931\u6027\u5b58\u50a8\u5668\u548c\u6c38\u4e45\u5b58\u50a8\u4e4b\u95f4\u67b6\u8d77\u4e86\u4e00\u5ea7\u6865\u6881\u3002\u6c38\u4e45\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5728\u5d29\u6e83\u548c\u91cd\u65b0\u542f\u52a8\u540e\u4ecd\u7136\u5b58\u5728\uff1b\u4f46\u662f\uff0c\u8981\u786e\u4fdd\u8fd9\u4e9b\u6570\u636e\u5728\u6545\u969c\u540e\u4fdd\u6301\u4e00\u81f4\u662f\u4e00\u4ef6\u5177\u6709\u6311\u6218\u6027\u7684\u4e8b\u60c5\u3002\u73b0\u6709\n\u5177\u6709\u9ad8\u7ea7\u63a7\u5236\u529f\u80fd\u7684\u9ad8\u7ea7\u8bed\u8a00\u7684\u5b9e\u73b0\u8005\u53ef\u80fd\u4f1a\u95ee\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u201c\u6211\u7684\u5b9e\u73b0\u7684\u6700\u4f73\u9009\u62e9\u662f\u4ec0\u4e48\uff1f\u4e0d\u5e78\u7684\u662f\uff0c\u76ee\u524d\u7684\u6587\u732e\u6ca1\u6709\u63d0\u4f9b\u592a\u591a\u6307\u5bfc\uff0c\u56e0\u4e3a\u4ee5\u524d\u7684\u7814\u7a76\u5728\u65b9\u6cd5\u8bba\u4e0a\u5b58\u5728\u5404\u79cd\u7f3a\u9677\uff0c\u5bf9\u4e8e\u73b0\u4ee3\u786c\u4ef6\u6765\u8bf4\u5df2\u7ecf\u8fc7\u65f6\u4e86\u3002\u201d\u5728\u7f3a\u4e4f\u6700\u8fd1\u826f\u597d\u6807\u51c6\u5316\u7684\u8861\u91cf\u6807\u51c6\u548c\u5bf9\u5176\u5b9e\u65bd\u7ec6\u8282\u7684\u6574\u4f53\u6982\u8ff0\u7684\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9\u6218\u7565\u65f6\u963b\u529b\u6700\u5c0f\u7684\u8def\u5f84\u662f\u4fe1\u4efb\u6c11\u4fd7\uff0c\u4f46\u6c11\u4fd7\u4e5f\u662f\u503c\u5f97\u6000\u7591\u7684\u3002\n\u672c\u6587\u8bd5\u56fe\u901a\u8fc7\u5bf9\u5b9e\u73b0\u8c03\u7528\u5806\u6808\u548c\u5ef6\u7eed\u7684\u516d\u79cd\u4e0d\u540c\u65b9\u6cd5\u8fdb\u884c\u201c\u82f9\u679c\u5bf9\u82f9\u679c\u201d\u7684\u6bd4\u8f83\u6765\u7ea0\u6b63\u8fd9\u79cd\u60c5\u51b5\u3002\u8fd9\u79cd\u6bd4\u8f83\u4f7f\u7528\u76f8\u540c\u7684\u6e90\u8bed\u8a00\u3001\u7f16\u8bd1\u5668\u6d41\u6c34\u7ebf\u3001LLVM\u540e\u7aef\u548c\u8fd0\u884c\u65f6\u7cfb\u7edf\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5b9e\u73b0\u7b56\u7565\u7684\u4e0d\u540c\u3002\u6211\u4eec\u6bd4\u8f83\u4e86\u4e0d\u540c\u65b9\u6cd5\u7684\u5b9e\u73b0\u6311\u6218\u3001\u5b83\u4eec\u7684\u987a\u5e8f\u6027\u80fd\uff0c\u4ee5\u53ca\u5b83\u4eec\u652f\u6301\u9ad8\u7ea7\u63a7\u5236\u673a\u5236(\u5305\u62ec\u652f\u6301\u5927\u91cf\u7ebf\u7a0b\u4ee3\u7801)\u7684\u9002\u7528\u6027\u3002\u9664\u4e86\u5b9e\u73b0\u7b56\u7565\u7684\u6bd4\u8f83\uff0c\u8bba\u6587\u7684\u8d21\u732e\u8fd8\u5305\u62ec\u4e00\u4e9b\u6709\u7528\u7684\u5b9e\u73b0\u6280\u672f\uff0c\u6211\u4eec\u5728\u6b64\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u3002\n\u5728\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u4e2d\uff0c\u5728\u90e8\u5206\u4e0a\u4e0b\u6587\u4e0a\u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\u662f\u5177\u6709\u6311\u6218\u6027\u7684\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u4e2a\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5b83\u901a\u8fc7\u5bf9\u7a0b\u5e8f\u7684\u7ed3\u6784\u3001\u540d\u79f0\u548c\u6a21\u5f0f\u8fdb\u884c\u6982\u7387\u63a8\u7406\u6765\u9884\u6d4b\u7c7b\u578b\u3002\u8be5\u7f51\u7edc\u4f7f\u7528\u6df1\u5ea6\u76f8\u4f3c\u6027\u5b66\u4e60\u6765\u5b66\u4e60\u7c7b\u578b\u7a7a\u95f4-\u7c7b\u578b\u79bb\u6563\u7a7a\u95f4\u7684\u8fde\u7eed\u677e\u5f1b-\u4ee5\u53ca\u5982\u4f55\u5c06\u7b26\u53f7(\u5373\u6807\u8bc6\u7b26)\u7684\u7c7b\u578b\u5c5e\u6027\u5d4c\u5165\u5176\u4e2d\u3002\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u7684\u6a21\u578b\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\u6027\u5b66\u4e60\u6765\u9884\u6d4b\u7c7b\u578b\u7684\u5f00\u653e\u8bcd\u6c47\u8868\uff0c\u5305\u62ec\u7a00\u6709\u7c7b\u578b\u548c\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u3002\u6211\u4eec\u5728Typilus for Python\u4e2d\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06TypeSpace\u4e0e\u53ef\u9009\u7684\u7c7b\u578b\u68c0\u67e5\u5668\u76f8\u7ed3\u5408\u3002\u6211\u4eec\u8bc1\u660e\u4e86\u9525\u866b\u80fd\u51c6\u786e\u5730\u9884\u6d4b\u7c7b\u578b\u3002Typilus\u81ea\u4fe1\u5730\u9884\u6d4b70%\u7684\u53ef\u6ce8\u91ca\u7b26\u53f7\u7684\u7c7b\u578b\uff1b\u5f53\u5b83\u9884\u6d4b\u4e00\u4e2a\u7c7b\u578b\u65f6\uff0c\u8be5\u7c7b\u578b\u9009\u62e9\u6027\u5730\u68c0\u67e595%\u7684\u65f6\u95f4\u3002Typilus\u8fd8\u53ef\u4ee5\u53d1\u73b0\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u6ce8\u91ca\uff1b\u4e24\u4e2a\u91cd\u8981\u4e14\u6d41\u884c\u7684\u5f00\u6e90\u5e93\uff0cairseq\u548callennlp\uff0c\u63a5\u53d7\u4e86\u6211\u4eec\u7684Pull\u8bf7\u6c42\uff0c\u4fee\u590d\u4e86Typilus\u53d1\u73b0\u7684\u6ce8\u91ca\u9519\u8bef\u3002\n\u9a8c\u8bc1\u771f\u5b9e\u4e16\u754c\u7684\u7a0b\u5e8f\u901a\u5e38\u9700\u8981\u63a8\u65ad\u5177\u6709\u975e\u7ebf\u6027\u7ea6\u675f\u7684\u5faa\u73af\u4e0d\u53d8\u91cf\u3002\u8fd9\u5728\u6267\u884c\u8bb8\u591a\u6570\u503c\u64cd\u4f5c\u7684\u7a0b\u5e8f\u4e2d\u5c24\u5176\u5982\u6b64\uff0c\u4f8b\u5982\u822a\u7a7a\u7535\u5b50\u8bbe\u5907\u6216\u5de5\u4e1a\u5de5\u5382\u7684\u63a7\u5236\u7cfb\u7edf\u3002\u6700\u8fd1\uff0c\u6570\u636e\u9a71\u52a8\u7684\u5faa\u73af\u4e0d\u53d8\u91cf\u63a8\u7406\u65b9\u6cd5\u663e\u793a\u51fa\u5f88\u597d\u7684\u5e94\u7528\u524d\u666f\uff0c\u7279\u522b\u662f\u5728\u7ebf\u6027\u5faa\u73af\u4e0d\u53d8\u91cf\u65b9\u9762\u3002\u7136\u800c\uff0c\u5c06\u6570\u636e\u9a71\u52a8\u63a8\u7406\u5e94\u7528\u4e8e\u975e\u7ebf\u6027\u5faa\u73af\u4e0d\u53d8\u91cf\u662f\u5177\u6709\u6311\u6218\u6027\u7684\uff0c\u56e0\u4e3a\u9ad8\u9636\u9879\u7684\u6570\u91cf\u548c\u5e45\u5ea6\u90fd\u5f88\u5927\uff0c\u5728\u5c11\u91cf\u6837\u672c\u4e0a\u5b58\u5728\u8fc7\u62df\u5408\u7684\u53ef\u80fd\u6027\uff0c\u4ee5\u53ca\u53ef\u80fd\u5b58\u5728\u7684\u975e\u7ebf\u6027\u4e0d\u7b49\u5f0f\u754c\u7684\u5927\u7a7a\u95f4\u3002\n\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u65b0\u7684\u7528\u4e8e\u4e00\u822cSMT\u5b66\u4e60\u7684\u795e\u7ecf\u7ed3\u6784--\u95e8\u63a7\u8fde\u7eed\u903b\u8f91\u7f51\u7edc(G-CLN)\uff0c\u5e76\u5c06\u5176\u5e94\u7528\u4e8e\u975e\u7ebf\u6027\u56de\u8def\u4e0d\u53d8\u5b66\u4e60\u3002G-CLN\u6269\u5c55\u4e86\u8fde\u7eed\u903b\u8f91\u7f51\u7edc(CLN)\u7684\u7ed3\u6784\uff0c\u589e\u52a0\u4e86\u95e8\u63a7\u5355\u5143\u548c\u4e22\u5f03\uff0c\u4f7f\u6a21\u578b\u80fd\u591f\u7a33\u5065\u5730\u5b66\u4e60\u5927\u91cf\u9879\u4e0a\u7684\u4e00\u822c\u4e0d\u53d8\u91cf\u3002\u4e3a\u4e86\u89e3\u51b3\u6709\u9650\u7a0b\u5e8f\u91c7\u6837\u5f15\u8d77\u7684\u8fc7\u62df\u5408\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u5206\u6570\u91c7\u6837-\u5faa\u73af\u8bed\u4e49\u5bf9\u8fde\u7eed\u51fd\u6570\u7684\u4e00\u79cd\u5408\u7406\u653e\u677e\uff0c\u6709\u52a9\u4e8e\u5728\u5b9e\u57df\u4e0a\u8fdb\u884c\u65e0\u754c\u91c7\u6837\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u65b0\u7684CLN\u6fc0\u6d3b\u51fd\u6570-\u5206\u6bb5\u6709\u504f\u4e8c\u6b21\u5355\u4f4d(PBQU)\uff0c\u7528\u4e8e\u81ea\u7136\u5730\u5b66\u4e60\u7d27\u4e0d\u7b49\u5f0f\u754c\u3002\n\u6211\u4eec\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u7ed3\u5408\u5230\u4e00\u4e2a\u975e\u7ebf\u6027\u5faa\u73af\u4e0d\u53d8\u91cf\u63a8\u7406\u7cfb\u7edf\u4e2d\uff0c\u8be5\u7cfb\u7edf\u53ef\u4ee5\u5b66\u4e60\u4e00\u822c\u7684\u975e\u7ebf\u6027\u5faa\u73af\u4e0d\u53d8\u91cf\u3002\u6211\u4eec\u5728\u975e\u7ebf\u6027\u5faa\u73af\u4e0d\u53d8\u91cf\u7684\u57fa\u51c6\u4e0a\u5bf9\u6211\u4eec\u7684\u7cfb\u7edf\u8fdb\u884c\u4e86\u8bc4\u4f30\uff0c\u7ed3\u679c\u8868\u660e\u5b83\u89e3\u51b3\u4e8627\u4e2a\u95ee\u9898\u4e2d\u768426\u4e2a\uff0c\u6bd4\u4ee5\u524d\u7684\u5de5\u4f5c\u591a\u4e863\u4e2a\uff0c\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u4e3a53.3\u79d2\u3002\u901a\u8fc7\u89e3\u51b3\u7ebf\u6027Code2Inv\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u7684\u6240\u6709124\u4e2a\u95ee\u9898\uff0c\u8fdb\u4e00\u6b65\u8bc1\u660e\u4e86G-CLN\u7684\u6cdb\u578b\u5b66\u4e60\u80fd\u529b\u3002\u6211\u4eec\u8fd8\u8fdb\u884c\u4e86\u5b9a\u91cf\u7684\u7a33\u5b9a\u6027\u8bc4\u4f30\uff0c\u7ed3\u679c\u8868\u660eG-CLN\u5728\u4e8c\u6b21\u95ee\u9898\u4e0a\u7684\u6536\u655b\u901f\u5ea6\u4e3a97.5%\uff0c\u6bd4CLN\u6a21\u578b\u63d0\u9ad8\u4e8639.2%\u3002\n\u5b66\u4e60\u795e\u7ecf\u7a0b\u5e8f\u5d4c\u5165\u662f\u5728\u7a0b\u5e8f\u8bed\u8a00\u7814\u7a76\u4e2d\u5229\u7528\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u5173\u952e-\u7cbe\u786e\u800c\u6709\u6548\u7684\u7a0b\u5e8f\u8868\u793a\u4f7f\u6df1\u5c42\u6a21\u578b\u80fd\u591f\u5e94\u7528\u4e8e\u5e7f\u6cdb\u7684\u7a0b\u5e8f\u5206\u6790\u4efb\u52a1\u3002\u73b0\u6709\u7684\u65b9\u6cd5\u4e3b\u8981\u662f\u4ece\u6e90\u4ee3\u7801\u4e2d\u5b66\u4e60\u5d4c\u5165\u7a0b\u5e8f\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u4e0d\u80fd\u6355\u83b7\u6df1\u5165\u3001\u7cbe\u786e\u7684\u7a0b\u5e8f\u8bed\u4e49\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4ece\u8fd0\u884c\u65f6\u4fe1\u606f\u4e2d\u5b66\u4e60\u7684\u6a21\u578b\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u7a0b\u5e8f\u6267\u884c\u7684\u8d28\u91cf\uff0c\u4ece\u800c\u5bfc\u81f4\u8bad\u7ec3\u540e\u7684\u6a21\u578b\u5177\u6709\u9ad8\u5ea6\u4e0d\u540c\u7684\u8d28\u91cf\u3002\u672c\u6587\u901a\u8fc7\u5f15\u5165\u4e00\u79cd\u65b0\u7684\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u6765\u514b\u670d\u73b0\u6709\u65b9\u6cd5\u7684\u8fd9\u4e9b\u56fa\u6709\u7f3a\u9677\u3002\n\u9759\u6001\u4e8c\u8fdb\u5236\u91cd\u5199\u5728\u8f6f\u4ef6\u5b89\u5168\u548c\u7cfb\u7edf\u4e2d\u6709\u8bb8\u591a\u91cd\u8981\u7684\u5e94\u7528\uff0c\u5982\u786c\u5316\u3001\u4fee\u590d\u3001\u4fee\u8865\u3001\u63d2\u88c5\u548c\u8c03\u8bd5\u3002\u867d\u7136\u5df2\u7ecf\u63d0\u51fa\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u9759\u6001\u4e8c\u8fdb\u5236\u91cd\u5199\u5de5\u5177\uff0c\u4f46\u5927\u591a\u6570\u90fd\u4f9d\u8d56\u4e8e\u4ece\u8f93\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u6062\u590d\u63a7\u5236\u6d41\u4fe1\u606f\u3002\u6062\u590d\u6b65\u9aa4\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u91cd\u5199\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u79fb\u52a8\u6307\u4ee4\uff0c\u8fd9\u610f\u5473\u7740\u9700\u8981\u76f8\u5e94\u5730\u8c03\u6574\u91cd\u5199\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u8df3\u8f6c\u76ee\u6807\u96c6\u3002\u7531\u4e8e\u63a7\u5236\u6d41\u4fe1\u606f\u7684\u9759\u6001\u6062\u590d\u901a\u5e38\u662f\u4e00\u4e2a\u96be\u9898\uff0c\u56e0\u6b64\u5927\u591a\u6570\u5de5\u5177\u4f9d\u8d56\u4e8e\u4e00\u7ec4\u7b80\u5316\u7684\u8bd5\u63a2\u6cd5\u6216\u5047\u8bbe\uff0c\u4f8b\u5982\u7279\u5b9a\u7684\u7f16\u8bd1\u5668\u3001\u7279\u5b9a\u7684\u6e90\u8bed\u8a00\u6216\u4e8c\u8fdb\u5236\u6587\u4ef6\u5143\u4fe1\u606f\u3002\u7136\u800c\uff0c\u4f9d\u8d56\u4e8e\u5047\u8bbe\u6216\u542f\u53d1\u5f0f\u65b9\u6cd5\u5728\u5b9e\u8df5\u4e2d\u5f80\u5f80\u4f38\u7f29\u6027\u5f88\u5dee\uff0c\u800c\u4e14\u5927\u591a\u6570\u6700\u5148\u8fdb\u7684\u9759\u6001\u4e8c\u8fdb\u5236\u91cd\u5199\u5de5\u5177\u65e0\u6cd5\u5904\u7406\u975e\u5e38\u5927/\u590d\u6742\u7684\u7a0b\u5e8f\uff0c\u5982Web\u6d4f\u89c8\u5668\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86E9Patch\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u9759\u6001\u91cd\u5199x86_64\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5de5\u5177\uff0c\u5b83\u4e0d\u9700\u8981\u4efb\u4f55\u63a7\u5236\u6d41\u4fe1\u606f\u3002\u4e3a\u6b64\uff0cE9Patch\u5f00\u53d1\u4e86\u4e00\u5957\u4e8c\u8fdb\u5236\u91cd\u5199\u65b9\u6cd5\uff0c\u4f8b\u5982\u6307\u4ee4\u53cc\u5173\u3001\u586b\u5145\u548c\u9a71\u9010\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u79fb\u52a8\u5176\u4ed6\u6307\u4ee4\u7684\u60c5\u51b5\u4e0b\u5411\u8e66\u5e8a\u63d2\u5165\u8df3\u8f6c\u3002\u7531\u4e8e\u8fd9\u4fdd\u7559\u4e86\u8df3\u8f6c\u76ee\u6807\u96c6\uff0c\u56e0\u6b64\u6d88\u9664\u4e86\u5bf9\u63a7\u5236\u6d41\u6062\u590d\u548c\u76f8\u5173\u8bd5\u63a2\u6cd5\u7684\u9700\u8981\u3002\u56e0\u6b64\uff0cE9Patch\u5728\u8bbe\u8ba1\u4e0a\u662f\u5065\u58ee\u7684\uff0c\u53ef\u4ee5\u6269\u5c55\u5230\u975e\u5e38\u5927\u7684(&gt\uff1b100MB)\u5265\u79bb\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5305\u62ecGoogle Chrome\u548cFirefox Web\u6d4f\u89c8\u5668\u3002\u6211\u4eec\u8fd8\u8bc4\u4f30\u4e86E9Patch\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6709\u6548\u6027\uff0c\u4f8b\u5982\u4e8c\u8fdb\u5236\u68c0\u6d4b\u3001\u5f3a\u5316\u548c\u4fee\u590d\u3002\n\u73b0\u4ee3\u8f6f\u4ef6\u7cfb\u7edf\u5e7f\u6cdb\u4f7f\u7528\u4eceC\u548cC++\u6d3e\u751f\u7684\u5e93\u3002\u7136\u800c\uff0c\u7531\u4e8e\u8fd9\u4e9b\u8bed\u8a00\u7f3a\u4e4f\u5185\u5b58\u5b89\u5168\uff0c\u8fd9\u4e9b\u5e93\u53ef\u80fd\u4f1a\u53d7\u5230\u6f0f\u6d1e\u7684\u5f71\u54cd\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u5e94\u7528\u7a0b\u5e8f\u9762\u4e34\u6f5c\u5728\u7684\u653b\u51fb\u3002\u4f8b\u5982\uff0cglibc\u4e2d\u5b58\u5728\u5927\u91cf\u9762\u5411\u8fd4\u56de\u7684\u7f16\u7a0b\u5c0f\u5de5\u5177\uff0c\u5b83\u4eec\u5141\u8bb8\u5c06\u8bed\u4e49\u6709\u6548\u4f46\u6076\u610f\u7684\u56fe\u7075\u5b8c\u6574\u548c\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u62fc\u63a5\u5728\u4e00\u8d77\u3002\u867d\u7136CVE\u4f1a\u88ab\u53d1\u73b0\uff0c\u800c\u4e14\u901a\u5e38\u4f1a\u6253\u8865\u4e01\u548c\u8865\u6551\uff0c\u4f46\u8fd9\u6837\u7684\u5c0f\u5de5\u5177\u4f1a\u6210\u4e3a\u672a\u6765\u672a\u88ab\u53d1\u73b0\u7684\u653b\u51fb\u7684\u57fa\u7840\uff0c\u4e3a\u751f\u6210\u6076\u610f\u7a0b\u5e8f\u6253\u5f00\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u53ef\u80fd\u6027\u3002\u56e0\u6b64\uff0c\u56fe\u4e66\u9986\u7684\u6b64\u7c7b\u5c0f\u5de5\u5177\u7684\u6570\u91cf\u548c\u8868\u73b0\u529b(\u6548\u7528)\u7684\u663e\u8457\u51cf\u5c11\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u3002\n\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\u6765\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u7684\u5e93\u51fd\u6570\uff0c\u8be5\u65b9\u6cd5\u4fa7\u91cd\u4e8e\u201c\u53ea\u83b7\u5f97\u60a8\u60f3\u8981\u7684\u201d\u539f\u5219\u3002\u8fd9\u4e0e\u76ee\u524d\u4fa7\u91cd\u4e8e\u201c\u524a\u51cf\u4e0d\u9700\u8981\u7684\u4e1c\u897f\u201d\u7684\u505a\u6cd5\u6709\u5f88\u5927\u4e0d\u540c\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u4fa7\u91cd\u4e8e\u6839\u636e\u9700\u8981\u6fc0\u6d3b/\u53bb\u6fc0\u6d3b\u5e93\u51fd\u6570\uff0c\u4ee5\u51cf\u5c11\u52a8\u6001\u94fe\u63a5\u7684\u4ee3\u7801\u9762\uff0c\u4ece\u800c\u5927\u5927\u964d\u4f4e\u6784\u5efa\u6076\u610f\u7a0b\u5e8f\u7684\u53ef\u80fd\u6027\u3002\u5176\u5173\u952e\u601d\u60f3\u662f\u4ec5\u52a0\u8f7d\u5c06\u5728\u8fd0\u884c\u65f6\u5728\u5e94\u7528\u7a0b\u5e8f\u5185\u7684\u6bcf\u4e2a\u5e93\u8c03\u7528\u70b9\u4f7f\u7528\u7684\u5e93\u51fd\u6570\u96c6\u3002\u8fd9\u79cd\u9700\u6c42\u9a71\u52a8\u52a0\u8f7d\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u8f93\u5165\u611f\u77e5\u7684Oracle\uff0c\u5b83\u53ef\u4ee5\u9884\u6d4b\u6267\u884c\u671f\u95f4\u7ed9\u5b9a\u8c03\u7528\u70b9\u6240\u9700\u7684\u4e00\u7ec4\u8fd1\u4e4e\u7cbe\u786e\u7684\u5e93\u51fd\u6570\u3002\u9884\u6d4b\u7684\u51fd\u6570\u88ab\u53ca\u65f6\u52a0\u8f7d\uff0c\u5e76\u5728\u8fd4\u56de\u65f6\u5378\u8f7d\u3002\n\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8e\u51b3\u7b56\u6811\u7684\u9884\u6d4b\u5668\uff0c\u5b83\u8d77\u5230\u4e86\u9884\u8a00\u673a\u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4f18\u5316\u7684\u8fd0\u884c\u65f6\u7cfb\u7edf\uff0c\u5b83\u76f4\u63a5\u4e0eGNU libc\u548clibstdc++\u7b49\u5e93\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e00\u8d77\u5de5\u4f5c\u3002\u7ed3\u679c\u8868\u660e\uff0c\u5e73\u5747\u800c\u8a00\uff0c\u8be5\u65b9\u6848\u51cf\u5c11\u4e8697.2%\u7684\u5e93\u66b4\u9732\u4ee3\u7801\u8868\u9762\uff0c\u51cf\u5c11\u4e8697.9%\u7684\u94fe\u63a5\u5e93\u4e2d\u7684ROP\u5c0f\u5de5\u5177\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5b9e\u73b0\u4e86\u81f3\u5c1197%\u7684\u9884\u6d4b\u51c6\u786e\u7387\uff0c\u5e76\u4e14\u5728SPEC 2006\u7684\u6240\u6709\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u6240\u6709\u5e93\u7684\u8fd0\u884c\u5f00\u9500\u589e\u52a0\u4e8618%(Glibc\u4e3a16%\uff0c\u5176\u4ed6\u5e93\u4e3a2%)\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5728\u4e24\u4e2a\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f(sshd\u548cnginx)\u4e0a\u6f14\u793a\u4e86BlankIt\uff0c\u5b83\u4eec\u5177\u6709\u9ad8\u6d88\u80c0\u548c\u4f4e\u5f00\u9500\u3002\n\u5e76\u53d1\u5206\u79bb\u903b\u8f91\u5bf9\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u7684\u63a8\u7406\u5df2\u7ecf\u53d6\u5f97\u4e86\u5f88\u5927\u7684\u6210\u529f\u3002\u8fd9\u4e00\u6210\u529f\u6e90\u4e8e\u4ed6\u4eec\u5728\u591a\u4e2a\u5c42\u6b21\u4e0a\u7684\u6a21\u5757\u5316\u5e94\u7528\uff0c\u5bfc\u81f4\u6839\u636e\u7a0b\u5e8f\u7ed3\u6784\u3001\u7a0b\u5e8f\u72b6\u6001\u548c\u5355\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5206\u89e3\u7684\u8bc1\u660e\u3002\u5c3d\u7ba1\u6709\u8fd9\u4e9b\u8fdb\u6b65\uff0c\u4f46\u8981\u5b9e\u73b0\u8de8\u4e0d\u540c\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u7684\u8bc1\u660e\u91cd\u7528\u4ecd\u7136\u5f88\u56f0\u96be\u3002\u5bf9\u4e8e\u5927\u7c7b\u641c\u7d22\u7ed3\u6784\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5c06\u7ebf\u7a0b\u5b89\u5168\u8bc1\u660e\u4e0e\u7ed3\u6784\u5b8c\u6574\u6027\u8bc1\u660e\u89e3\u8026\u6765\u5b9e\u73b0\u8fdb\u4e00\u6b65\u7684\u8bc1\u660e\u6a21\u5757\u6027\u3002\u6211\u4eec\u7684\u5de5\u4f5c\u57fa\u4e8eShasha\u548cGoodman\u7684\u6a21\u677f\u7b97\u6cd5\uff0c\u5b83\u4eec\u89c4\u5b9a\u4e86\u7ebf\u7a0b\u5982\u4f55\u4ea4\u4e92\uff0c\u4f46\u4ece\u5185\u5b58\u4e2d\u8282\u70b9\u7684\u5177\u4f53\u5e03\u5c40\u4e2d\u62bd\u8c61\u51fa\u6765\u3002\u5728\u6700\u8fd1\u63d0\u51fa\u7684\u7ec4\u5408\u62bd\u8c61\u6d41\u6846\u67b6\u548c\u5206\u79bb\u903b\u8f91IRIS\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u8bc1\u660e\u6a21\u677f\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u4ee5\u53ca\u5982\u4f55\u5b9e\u4f8b\u5316\u5b83\u4eec\u4ee5\u83b7\u5f97\u591a\u4e2a\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u5b9e\u73b0\u3002\n\u6211\u4eec\u901a\u8fc7\u5c06\u7a0b\u5e8f\u673a\u68b0\u5316\u6765\u6f14\u793a\u6211\u4eec\u7684\u65b9\u6cd5\n\u56e0\u679c\u4e00\u81f4\u6027\u662f\u5f31\u4e8e\u987a\u5e8f\u4e00\u81f4\u6027\u7684\u6700\u57fa\u672c\u3001\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u4e00\u81f4\u6027\u6a21\u578b\u4e4b\u4e00\u3002\u672c\u6587\u7814\u7a76\u4e86\u5728\u56e0\u679c\u4e00\u81f4\u5171\u4eab\u5185\u5b58\u6a21\u578b\u4e0b\u8fd0\u884c\u7684\u6709\u9650\u72b6\u6001\u5e76\u53d1\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u8d28\u9a8c\u8bc1\u95ee\u9898\u3002\u5bf9\u4e8e\u56e0\u679c\u4e00\u81f4\u6027\u7684\u6807\u51c6\u6a21\u578b(\u4e5f\u79f0\u4e3a\u56e0\u679c\u6536\u655b\u548c\u5f3a\u91ca\u653e\u83b7\u53d6)\uff0c\u6211\u4eec\u5efa\u7acb\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u53ef\u5224\u65ad\u6027\u3002\u6211\u4eec\u7684\u8bc1\u660e\u57fa\u4e8e\u7ebf\u7a0b\u6f5c\u529b\u7684\u6982\u5ff5\uff0c\u901a\u8fc7\u5f00\u53d1\u4e00\u79cd\u66ff\u4ee3\u7684\u64cd\u4f5c\u8bed\u4e49\u8fdb\u884c\u8bc1\u660e\uff0c\u8be5\u8bed\u4e49\u7b49\u4ef7\u4e8e\u73b0\u6709\u7684\u58f0\u660e\u6027\u8bed\u4e49\uff0c\u5e76\u6784\u6210\u4e86\u4e00\u4e2a\u7ed3\u6784\u826f\u597d\u7684\u8f6c\u6362\u7cfb\u7edf\u3002\u7279\u522b\u5730\uff0c\u6211\u4eec\u7684\u7ed3\u679c\u5141\u8bb8\u5bf9C/C++11(RA)\u7684\u53d1\u5e03/\u83b7\u53d6\u7247\u6bb5\u4e2d\u7684\u4e00\u5927\u7c7b\u7a0b\u5e8f\u8fdb\u884c\u9a8c\u8bc1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u867d\u7136\u6700\u8fd1\u663e\u793aRA\u4e0b\u7684\u9a8c\u8bc1\u5bf9\u4e8e\u4e00\u822c\u7a0b\u5e8f\u662f\u4e0d\u53ef\u786e\u5b9a\u7684\uff0c\u4f46\u662f\u7531\u4e8eRA\u4e0e\u6211\u4eec\u5728\u8fd9\u91cc\u7814\u7a76\u7684\u5199/\u5199\u65e0\u7ade\u4e89\u7a0b\u5e8f\u7684\u6a21\u578b\u4e00\u81f4\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8fd9\u7c7b\u5e7f\u6cdb\u4f7f\u7528\u7684\u7a0b\u5e8f\uff0cRA\u4e0b\u7684\u9a8c\u8bc1\u7684\u53ef\u5224\u65ad\u6027\u4ece\u6211\u4eec\u7684\u7ed3\u679c\u5f97\u51fa\u3002\u65b0\u7684\u64cd\u4f5c\u8bed\u4e49\u4e5f\u53ef\u4ee5\u72ec\u7acb\u7528\u4e8e\u5f31\u4e00\u81f4\u6027\u5171\u4eab\u5b58\u50a8\u6a21\u578b\u7684\u7814\u7a76\u548c\u9a8c\u8bc1\u3002\n\u5f02\u6b65\u7a0b\u5e8f\u662f\u51fa\u4e86\u540d\u7684\u96be\u4ee5\u63a8\u7406\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u4ea7\u751f\u4ee5\u4e0d\u786e\u5b9a\u65b9\u5f0f\u5f02\u6b65\u751f\u6548\u7684\u8ba1\u7b97\u4efb\u52a1\u3002\u516c\u5f0f\u7684\u5f52\u7eb3\u4e0d\u53d8\u91cf\u7684\u8bbe\u8ba1\u3002\n..", "note_en": "A representation invariant is a property that holds of all values of abstract type produced by a module. Representation invariants play important roles in software engineering and program verification. In this paper, we develop a counterexample-driven algorithm for inferring a representation invariant that is sufficient to imply a desired specification for a module. The key novelty is a type-directed notion of visible inductiveness, which ensures that the algorithm makes progress toward its goal as it alternates between weakening and strengthening candidate invariants. The algorithm is parameterized by an example-based synthesis engine and a verifier, and we prove that it is sound and complete for first-order modules over finite types, assuming that the synthesizer and verifier are as well. We implement these ideas in a tool called Hanoi, which synthesizes representation invariants for recursive data types. Hanoi not only handles invariants for first-order code, but higher-order code as well. In its back end, Hanoi uses an enumerative synthesizer called Myth and an enumerative testing tool as a verifier. Because Hanoi uses testing for verification, it is not sound, though our empirical evaluation shows that it is successful on the benchmarks we investigated.\n      We introduce Analytic Program Repair, a data-driven strategy for providing feedback for type-errors via repairs for the erroneous program. Our strategy is based on insight that similar errors have similar repairs. Thus, we show how to use a training dataset of pairs of ill-typed programs and their fixed versions to: (1)\u00a0 learn a collection of candidate repair templates by abstracting and partitioning the edits made in the training set into a representative set of templates; (2)\u00a0 predict the appropriate template from a given error, by training multi-class classifiers on the repair templates used in the training set; (3)\u00a0 synthesize a concrete repair from the template by enumerating and ranking correct (e.g. well-typed) terms matching the predicted template. We have implemented our approach in Rite: a type error reporting tool for OCaml programs. We present an evaluation of the  accuracy and  efficiency of Rite on a corpus of 4,500 ill-typed Ocaml programs drawn from two instances of an introductory programming course, and a user-study of the  quality of the generated error messages that shows the locations and final repair quality to be better than the state-of-the-art tool in a statistically-significant manner.\n      Recent program synthesis techniques help users customize CAD models(e.g., for 3D printing) by decompiling low-level triangle meshes to Constructive Solid Geometry (CSG) expressions. Without loops or functions, editing CSG can require many coordinated changes, and existing mesh decompilers use heuristics that can obfuscate high-level structure.\n  This paper proposes a second decompilation stage to robustly &#34;shrink&#34; unstructured CSG expressions into more editable programs with map and fold operators. We present Szalinski, a tool that uses Equality Saturation with semantics-preserving CAD rewrites to efficiently search for smaller equivalent programs. Szalinski relies on inverse transformations, a novel way for solvers to speculatively add equivalences to an E-graph. We qualitatively evaluate Szalinski in case studies, show how it composes with an existing mesh decompiler, and demonstrate that Szalinski can shrink large models in seconds.\n        Continuation marks enable dynamic binding and context inspection in a language with proper handling of tail calls and first-class, multi-prompt, delimited continuations. The simplest and most direct use of continuation marks is to implement dynamically scoped variables, such as the current output stream or the current exception handler. Other uses include stack inspection for debugging or security checks, serialization of an in-progress computation, and run-time elision of redundant checks. By exposing continuation marks to users of a programming language, more kinds of language extensions can be implemented as libraries without further changes to the compiler. At the same time, the compiler and runtime system must provide an efficient implementation of continuation marks to ensure that library-implemented language extensions are as effective as changing the compiler. Our implementation of continuation marks for Chez Scheme (in support of Racket) makes dynamic binding and lookup constant-time and fast, preserves the performance of Chez Scheme&#39;s first-class continuations, and imposes negligible overhead on program fragments that do not use first-class continuations or marks.\n      Byte-addressable persistent memory, such as Intel/Micron 3D XPoint, is an emerging technology that bridges the gap between volatile memory and persistent storage. Data in persistent memory survives crashes and restarts; however, it is challenging to ensure that this data is consistent after failures. Existing approaches incur significant performance costs to ensure crash consistency.\n  This paper introduces  Crafty, a new approach for ensuring consistency and atomicity on persistent memory operations using  commodity hardware with existing hardware transactional memory (HTM) capabilities, while incurring low overhead. Crafty employs a novel technique called  nondestructive undo logging that leverages commodity HTM to control persist ordering. Our evaluation shows that Crafty outperforms state-of-the-art prior work under low contention, and performs competitively under high contention.\n      The efficient implementation of function calls and non-local control transfers is a critical part of modern language implementations and is important in the implementation of everything from recursion, higher-order functions, concurrency and coroutines, to task-based parallelism. In a compiler, these features can be supported by a variety of mechanisms, including call stacks, segmented stacks, and heap-allocated continuation closures.\n  An implementor of a high-level language with advanced control features might ask the question ``what is the best choice for my implementation?&#39;&#39; Unfortunately, the current literature does not provide much guidance, since previous studies suffer from various flaws in methodology and are outdated for modern hardware. In the absence of recent, well-normalized measurements and a holistic overview of their implementation specifics, the path of least resistance when choosing a strategy is to trust folklore, but the folklore is also suspect.\n  This paper attempts to remedy this situation by providing an ``apples-to-apples&#39;&#39; comparison of six different approaches to implementing call stacks and continuations. This comparison uses the same source language, compiler pipeline, LLVM-backend, and runtime system, with the only differences being those required by the differences in implementation strategy. We compare the implementation challenges of the different approaches, their sequential performance, and their suitability to support advanced control mechanisms, including supporting heavily threaded code. In addition to the comparison of implementation strategies, the paper&#39;s contributions also include a number of useful implementation techniques that we discovered along the way.\n        Type inference over partial contexts in dynamically typed languages is challenging. In this work, we present a graph neural network model that predicts types by probabilistically reasoning over a program\u2019s structure, names, and patterns. The network uses deep similarity learning to learn a TypeSpace \u2014 a continuous relaxation of the discrete space of types \u2014 and how to embed the type properties of a symbol (i.e. identifier) into it. Importantly, our model can employ one-shot learning to predict an open vocabulary of types, including rare and user-defined ones. We realise our approach in Typilus for Python that combines the TypeSpace with an optional type checker. We show that Typilus accurately predicts types. Typilus confidently predicts types for 70% of all annotatable symbols; when it predicts a type, that type optionally type checks 95% of the time. Typilus can also find incorrect type annotations; two important and popular open source libraries, fairseq and allennlp, accepted our pull requests that fixed the annotation errors Typilus discovered.\n      Verifying real-world programs often requires inferring loop invariants with nonlinear constraints. This is especially true in programs that perform many numerical operations, such as control systems for avionics or industrial plants. Recently, data-driven methods for loop invariant inference have shown promise, especially on linear loop invariants. However, applying data-driven inference to nonlinear loop invariants is challenging due to the large numbers of and large magnitudes of high-order terms, the potential for overfitting on a small number of samples, and the large space of possible nonlinear inequality bounds.\n  In this paper, we introduce a new neural architecture for general SMT learning, the Gated Continuous Logic Network (G-CLN), and apply it to nonlinear loop invariant learning. G-CLNs extend the Continuous Logic Network (CLN) architecture with gating units and dropout, which allow the model to robustly learn general invariants over large numbers of terms. To address overfitting that arises from finite program sampling, we introduce fractional sampling\u2014a sound relaxation of loop semantics to continuous functions that facilitates unbounded sampling on the real domain. We additionally design a new CLN activation function, the Piecewise Biased Quadratic Unit (PBQU), for naturally learning tight inequality bounds.\n  We incorporate these methods into a nonlinear loop invariant inference system that can learn general nonlinear loop invariants. We evaluate our system on a benchmark of nonlinear loop invariants and show it solves 26 out of 27 problems, 3 more than prior work, with an average runtime of 53.3 seconds. We further demonstrate the generic learning ability of G-CLNs by solving all 124 problems in the linear Code2Inv benchmark. We also perform a quantitative stability evaluation and show G-CLNs have a convergence rate of 97.5% on quadratic problems, a 39.2% improvement over CLN models.\n      Learning neural program embeddings is key to utilizing deep neural networks in program languages research --- precise and efficient program representations enable the application of deep models to a wide range of program analysis tasks. Existing approaches predominately learn to embed programs from their source code, and, as a result, they do not capture deep, precise program semantics. On the other hand, models learned from runtime information critically depend on the quality of program executions, thus leading to trained models with highly variant quality. This paper tackles these inherent weaknesses of prior approaches by introducing a new deep neural network, Liger, which learns program representations from a mixture of symbolic and concrete execution traces. We have evaluated Liger on two tasks: method name prediction and semantics classification. Results show that Liger is significantly more accurate than the state-of-the-art static model code2seq in predicting method names, and requires on average around 10x fewer executions covering nearly 4x fewer paths than the state-of-the-art dynamic model DYPRO in both tasks. Liger offers a new, interesting design point in the space of neural program embeddings and opens up this new direction for exploration.\n        We present VeRA, a system for verifying the  range analysis pass in browser just-in-time (JIT) compilers. Browser developers write range analysis routines in a subset of C++, and verification developers write infrastructure to verify custom analysis properties. Then, VeRA automatically verifies the range analysis routines, which browser developers can integrate directly into the JIT. We use VeRA to translate and verify Firefox range analysis routines, and it detects a new, confirmed bug that has existed in the browser for six years.\n      Static binary rewriting has many important applications in software security and systems, such as hardening, repair, patching, instrumentation, and debugging. While many different static binary rewriting tools have been proposed, most rely on recovering control flow information from the input binary. The recovery step is necessary since the rewriting process may move instructions, meaning that the set of jump targets in the rewritten binary needs to be adjusted accordingly. Since the static recovery of control flow information is a hard problem in general, most tools rely on a set of simplifying heuristics or assumptions, such as specific compilers, specific source languages, or binary file meta information. However, the reliance on assumptions or heuristics tends to scale poorly in practice, and most state-of-the-art static binary rewriting tools cannot handle very large/complex programs such as web browsers.\n  In this paper we present E9Patch, a tool that can statically rewrite x86_64 binaries without any knowledge of control flow information. To do so, E9Patch develops a suite of binary rewriting methodologies---such as instruction punning, padding, and eviction---that can insert jumps to trampolines without the need to move other instructions. Since this preserves the set of jump targets, the need for control flow recovery and related heuristics is eliminated. As such, E9Patch is robust by design, and can scale to very large (&gt;100MB) stripped binaries including the Google Chrome and FireFox web browsers. We also evaluate the effectiveness of E9Patch against realistic applications such as binary instrumentation, hardening and repair.\n      Modern software systems make extensive use of libraries derived from C and C++. Because of the lack of memory safety in these languages, however, the libraries may suffer from vulnerabilities, which can expose the applications to potential attacks. For example, a very large number of return-oriented programming gadgets exist in glibc that allow stitching together semantically valid but malicious Turing-complete and -incomplete programs. While CVEs get discovered and often patched and remedied, such gadgets serve as building blocks of future undiscovered attacks, opening an ever-growing set of possibilities for generating malicious programs. Thus, significant reduction in the quantity and expressiveness (utility) of such gadgets for libraries is an important problem.\n  In this work, we propose a new approach for handling an application\u2019s library functions that focuses on the principle of \u201cgetting only what you want.\u201d This is a significant departure from the current approaches that focus on \u201ccutting what is unwanted.\u201d Our approach focuses on activating/deactivating library functions on demand in order to reduce the dynamically linked code surface, so that the possibilities of constructing malicious programs diminishes substantially. The key idea is to load only the set of library functions that will be used at each library call site within the application at runtime. This approach of demand-driven loading relies on an input-aware oracle that predicts a near-exact set of library functions needed at a given call site during the execution. The predicted functions are loaded just in time and unloaded on return.\n  We present a decision-tree based predictor, which acts as an oracle, and an optimized runtime system, which works directly with library binaries like GNU libc and libstdc++. We show that on average, the proposed scheme cuts the exposed code surface of libraries by 97.2%, reduces ROP gadgets present in linked libraries by 97.9%, achieves a prediction accuracy in most cases of at least 97%, and adds a runtime overhead of 18% on all libraries (16% for glibc, 2% for others) across all benchmarks of SPEC 2006. Further, we demonstrate BlankIt on two real-world applications, sshd and nginx, with a high amount of debloating and low overheads.\n        Concurrent separation logics have had great success reasoning about concurrent data structures. This success stems from their application of modularity on multiple levels, leading to proofs that are decomposed according to program structure, program state, and individual threads. Despite these advances, it remains difficult to achieve proof reuse across different data structure implementations. For the large class of  search structures, we demonstrate how one can achieve further proof modularity by decoupling the proof of thread safety from the proof of structural integrity. We base our work on the  template algorithms of Shasha and Goodman that dictate how threads interact but abstract from the concrete layout of nodes in memory. Building on the recently proposed flow framework of compositional abstractions and the separation logic Iris, we show how to prove correctness of template algorithms, and how to instantiate them to obtain multiple verified implementations.\n  We demonstrate our approach by mechanizing the proofs of three concurrent search structure templates, based on link, give-up, and lock-coupling synchronization, and deriving verified implementations based on B-trees, hash tables, and linked lists. These case studies include algorithms used in real-world file systems and databases, which have been beyond the capability of prior automated or mechanized verification techniques. In addition, our approach reduces proof complexity and is able to achieve significant proof reuse.\n      Safely writing high-performance concurrent programs is notoriously difficult. To aid developers, we introduce Armada, a language and tool designed to formally verify such programs with relatively little effort. Via a C-like language and a small-step, state-machine-based semantics, Armada gives developers the flexibility to choose arbitrary memory layout and synchronization primitives so they are never constrained in their pursuit of performance. To reduce developer effort, Armada leverages SMT-powered automation and a library of powerful reasoning techniques, including rely-guarantee, TSO elimination, reduction, and alias analysis. All these techniques are proven sound, and Armada can be soundly extended with additional strategies over time. Using Armada, we verify four concurrent case studies and show that we can achieve performance equivalent to that of unverified code.\n      Causal consistency is one of the most fundamental and widely used consistency models weaker than sequential consistency. In this paper, we study the verification of safety properties for finite-state concurrent programs running under a causally consistent shared memory model. We establish the decidability of this problem for a standard model of causal consistency (called also &#34;Causal Convergence&#34; and &#34;Strong-Release-Acquire&#34;). Our proof proceeds by developing an alternative operational semantics, based on the notion of a thread potential, that is equivalent to the existing declarative semantics and constitutes a well-structured transition system. In particular, our result allows for the verification of a large family of programs in the Release/Acquire fragment of C/C++11 (RA). Indeed, while verification under RA was recently shown to be undecidable for general programs, since RA coincides with the model we study here for write/write-race-free programs, the decidability of verification under RA for this widely used class of programs follows from our result. The novel operational semantics may also be of independent use in the investigation of weakly consistent shared memory models and their verification.\n      Asynchronous programs are notoriously difficult to reason about because they spawn computation tasks which take effect asynchronously in a nondeterministic way. Devising inductive invariants fo\n......", "posttime": "2020-06-14 07:55:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u7f16\u7a0b,programming,\u8bba\u6587,\u8bbe\u8ba1", "title": "\u7f16\u7a0b\u8bed\u8a00\u8bbe\u8ba1\u4e0e\u5b9e\u73b0(PLDI)2020\u8bba\u6587\u96c6", "title_en": "Programming Language Design and Implementation (PLDI) 2020 Proceedings", "transed": 1, "url": "http://sigplan.org/OpenTOC/pldi20.html", "via": "", "real_tags": ["2020", "\u7f16\u7a0b", "\u8bba\u6587", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "a98acebf44ce873a1a02db66d68457ce.png", "infoid": 1006473, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4efd\u62a5\u544a\u5c55\u793a\u4e86\u7531JetBrains\u8fdb\u884c\u7684\u7b2c\u56db\u6b21\u5e74\u5ea6\u5f00\u53d1\u8005\u751f\u6001\u7cfb\u7edf\u8c03\u67e5\u7684\u7efc\u5408\u7ed3\u679c\u3002\u6211\u4eec\u57282020\u5e74\u521d\u5bf919696\u540d\u5f00\u53d1\u4eba\u5458\u8fdb\u884c\u4e86\u8c03\u67e5\uff0c\u4ed6\u4eec\u7684\u53cd\u9988\u5e2e\u52a9\u6211\u4eec\u786e\u5b9a\u4e86\u6709\u5173\u5de5\u5177\u3001\u6280\u672f\u3001\u7f16\u7a0b\u8bed\u8a00\u548c\u5f00\u53d1\u4e16\u754c\u8bb8\u591a\u5176\u4ed6\u4ee4\u4eba\u5174\u594b\u7684\u65b9\u9762\u7684\u6700\u65b0\u8d8b\u52bf\u3002\n\u5728\u8fc7\u53bb12\u4e2a\u6708\u4f7f\u7528\u7684\u8bed\u8a00\u5217\u8868\u4e2d\u5df2\u7ecf\u8d85\u8fc7\u4e86Java\u3002\u5b83\u662f\u5b66\u4e60\u6700\u591a\u7684\u8bed\u8a00\u3002\u5728\u8fc7\u53bb\u768412\u4e2a\u6708\u91cc\uff0c30%\u7684\u53d7\u8bbf\u8005\u5df2\u7ecf\u5f00\u59cb\u6216\u7ee7\u7eed\u5b66\u4e60Python--\u751a\u81f3\u6bd4\u53bb\u5e74\u8fd8\u8981\u591a\u3002\n\u60a8\u662f\u5426\u8ba1\u5212\u5728\u672a\u676512\u4e2a\u6708\u5185\u91c7\u7528\u6216\u8fc1\u79fb\u5230\u5176\u4ed6\u8bed\u8a00\uff1f\u5982\u679c\u662f\u7684\u8bdd\uff0c\u53bb\u54ea\u51e0\u4e2a\u5462\uff1f\n\u6253\u5b57\u7a3f\u5728\u7a33\u6b65\u589e\u957f\u3002\u5b83\u7684\u4f7f\u7528\u7387\u4ece2017\u5e74\u768412%\u548c1%\u7684\u4e3b\u8981\u8bed\u8a00\u5206\u522b\u4e0a\u5347\u52302020\u5e74\u768428%\u548c12%\u3002\n\u672c\u5730\u5de5\u5177\u4ecd\u7136\u662f\u79fb\u52a8\u5f00\u53d1\u6700\u6d41\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4e09\u5206\u4e4b\u4e8c\u7684\u79fb\u52a8\u5f00\u53d1\u8005\u4f7f\u7528\u5b83\u4eec\u3002\u6b64\u5916\uff0c\u4e00\u534a\u7684\u79fb\u52a8\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u8de8\u5e73\u53f0\u6280\u672f\u6216\u6846\u67b6\u3002\u5728\u8fd9\u4e9b\u6846\u67b6\u4e2d\uff0cReaction Native\u4ecd\u7136\u662f\u6700\u53d7\u6b22\u8fce\u7684\uff0c\u88ab42%\u7684\u79fb\u52a8\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u3002\n\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u98a4\u52a8\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u6709\u6240\u589e\u52a0\uff0c\u5176\u4efd\u989d\u589e\u957f\u4e869\u4e2a\u767e\u5206\u70b9\u3002\u5728\u540c\u4e00\u65f6\u671f\uff0cCordova\u3001Ionic\u548cXamarin\u7684\u80a1\u4ef7\u5206\u522b\u4e0b\u8dcc\u4e86\u7ea610\u4e2a\u767e\u5206\u70b9\u3002\n\u60a8\u76ee\u524d\u6b63\u5728\u5f00\u53d1\u7684\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u54ea\u4e9b\u7ec4\u4ef6\uff1f\n\u672c\u8282\u4e2d\u7684\u95ee\u9898\u4f1a\u663e\u793a\u7ed9\u52fe\u9009\u4e86\u201c\u6570\u636e\u5206\u6790\u201d\u3001\u201c\u6570\u636e\u5de5\u7a0b\u201d\u6216\u201c\u673a\u5668\u5b66\u4e60\u201d\u7684\u53d7\u8bbf\u8005\uff0c\u4ed6\u4eec\u4f1a\u95ee\u201c\u60a8\u53c2\u4e0e\u4e86\u54ea\u4e9b\u7c7b\u578b\u7684\u6d3b\u52a8\uff1f\u201d\u6216\u8005\u95ee\u9898\u4e2d\u7684\u201c\u6570\u636e\u5206\u6790\u5e08/\u6570\u636e\u5de5\u7a0b\u5e08/\u6570\u636e\u79d1\u5b66\u5bb6\u201d\uff0c\u201c\u65e0\u8bba\u60a8\u7684\u804c\u4f4d\u7ea7\u522b\u5982\u4f55\uff0c\u4ee5\u4e0b\u54ea\u4e00\u9879\u6700\u80fd\u63cf\u8ff0\u60a8\u7684\u5de5\u4f5c\u89d2\u8272\uff1f\u201d\n\u6b63\u5982\u4f60\u53ef\u4ee5\u4ece\u4ed6\u4eec\u7684\u56de\u7b54\u4e2d\u4e86\u89e3\u5230\u7684\u90a3\u6837\uff0c\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u4e0d\u9700\u8981\u4efb\u4f55\u5927\u6570\u636e\u5de5\u5177\u6765\u5b8c\u6210\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002", "note_en": "This report presents the combined results of the fourth annual Developer Ecosystem Survey conducted by JetBrains. Feedback from 19,696 developers whom we surveyed in the beginning of 2020 helped us identify the latest trends around tools, technologies, programming languages, and many other exciting facets of the development world.\n  has overtaken Java in the list of languages used in the last 12 months. It is the most studied language. In the last 12 months 30% of respondents have started or continued to learn Python\u00a0\u2014 even more than last year.\n   Do you plan to adopt or migrate to other languages in the next 12 months? If so, to which ones?\n   Typescript is growing steadily. It has progressed from being used by 12% and being the primary language for 1% in 2017, to 28% and 12%, respectively, in 2020.\n Native tools remain the most popular solution for mobile development. They are used by two thirds of mobile developers. Additionally, half of mobile developers use cross-platform technologies or frameworks. Among these frameworks, React Native is still the most popular and is used by 42% of mobile developers.\n  The popularity of Flutter has increased over the last year, as its share has grown by 9 percentage points. In the same period, the shares of Cordova, Ionic, and Xamarin declined by roughly 10 percentage points each.\n Which of the following components do you use in the mobile app you are currently developing?\n Questions in this section were shown to respondents who had checked \u201cData Analysis\u201d, \u201cData Engineering\u201d, or \u201cMachine Learning\u201d) in question \u201cIn which kinds of activities are you involved?\u201d or \u201cData Analyst / Data Engineer / Data Scientist\u201d in question \u201cWhich of the following best describes your job role regardless of the level of your position?\u201d.\n A lot of them, as you can get from their answers, don\u2019t need any big data tool for their work.", "posttime": "2020-06-14 07:39:08", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5f00\u53d1,\u53d1\u5e03,java,python,\u53d6\u4ee3", "title": "Python\u4f1a\u53d6\u4ee3Java\u5417\uff1fJetBrains\u53d1\u5e03\u201c\u5f00\u53d1\u8005\u751f\u6001\u7cfb\u7edf\u72b6\u51b5\u201d\u8c03\u67e5", "title_en": "Python Overtakes Java?  JetBrains Releases 'State of Developer Ecosystem' Survey", "transed": 1, "url": "https://www.jetbrains.com/lp/devecosystem-2020/", "via": "", "real_tags": ["\u5f00\u53d1", "\u53d1\u5e03", "java", "python", "\u53d6\u4ee3"]}, {"category": "", "categoryclass": "", "imagename": "a9ec8dfc0bb098bb65e3b564b0e5f563.jpeg", "infoid": 1006472, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u6700\u5c0f\u7684LZMA(Minlzma)\u9879\u76ee\u65e8\u5728\u63d0\u4f9b\u4e00\u4e2a\u6700\u5c0f\u7684\u3001\u8de8\u5e73\u53f0\u7684\u3001\u9ad8\u5ea6\u6ce8\u91ca\u7684\u3001\u7b26\u5408\u6807\u51c6\u7684C\u5e93(Minlzlib)\uff0c\u7528\u4e8e\u5728XZ\u5bb9\u5668\u4e2d\u4ee5LZMA\u683c\u5f0f\u89e3\u538bLZMA2\u5c01\u88c5\u7684\u538b\u7f29\u6570\u636e\uff0c\u5c31\u50cf\u53ef\u4ee5\u7528Python3.6\u30017-zip\u548cxzutils\u751f\u6210\u7684\u90a3\u6837\u3002\u6b64\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u3001\u53ef\u79fb\u690d\u7684\u547d\u4ee4\u884c\u5de5\u5177(Minlzdec)\uff0c\u7528\u4e8e\u6267\u884c\u6240\u63d0\u4f9b\u7684\u8f93\u5165\u6587\u4ef6\u7684\u529f\u80fd\u3002\n/*@Brief\u5c06XZ\u6d41\u4eceInputBuffer\u89e3\u538b\u7f29\u5230OutputBuffer\u3002**@Description XZ\u6d41\u5fc5\u987b\u5305\u542b\u5e26\u6709LZMA2\u8fc7\u6ee4\u5668*\u4e14\u6ca1\u6709BJC2\u8fc7\u6ee4\u5668\u7684\u5355\u4e2a\u5757\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684LZMA\u5c5e\u6027\uff0c\u5e76\u4f7f\u7528*CRC32\u6216NONE\u4f5c\u4e3a\u6821\u9a8c\u548c\u7c7b\u578b\u3002**@param[in]InputBuffer-\u5305\u542bXZ\u6d41\u7684\u5b8c\u5168\u5f62\u6210\u7684\u7f13\u51b2\u533a\u3002*@param[in]InputSize-\u8f93\u5165\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002*@param[inopt]OutputBuffer-\u63a5\u6536\u8f93\u51fa\u7684\u5b8c\u5168\u5206\u914d\u7684\u7f13\u51b2\u533a\u3002*\u8c03\u7528\u8005\u5982\u679c\u4e0d\u60f3\u89e3\u538b\uff0c\u53ef\u4ee5\u4f20\u5165NULL\uff0c*\u5e76\u5c06OutputSize\u8bbe\u7f6e\u4e3a0\uff0c\u4ee5\u67e5\u8be2*\u89e3\u538b\u540e\u7f13\u51b2\u533a\u7684\u6700\u7ec8\u9884\u671f\u5927\u5c0f\u3002*@param[InOut]OutputSize-on input\uff0c\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002\u8f93\u51fa\u65f6\uff0c\u89e3\u538b\u7f29\u7ed3\u679c\u7684*\u5927\u5c0f\u3002**@return true-OutputBuffer\u4e2d\u8f93\u5165\u7f13\u51b2\u533a\u5df2\u5b8c\u5168\u89e3\u538b\u7f29*false-\u89e3\u538b\u8fc7\u7a0b\u4e2d\u5931\u8d25\u3002*/bool XzDecode(uint8_t*InputBuffer\uff0cuint32_t InputSize\uff0cuint8_t*OutputBuffer\uff0cuint32_t*OutputSize)\uff1b\n\u4e3a\u4e86\u63d0\u4f9b\u6781\u5927\u7684\u7b80\u5355\u6027\u3001\u5feb\u901f\u7684\u6027\u80fd\u3001\u6700\u5c0f\u7684\u6e90\u4ee3\u7801\u548c\u8f83\u5c0f\u7684\u7f16\u8bd1\u5927\u5c0f\uff0cminlzlib\u5bf9\u8f93\u5165\u6587\u4ef6\u8fdb\u884c\u4e86\u67d0\u4e9b\u5047\u8bbe\uff0c\u5e76\u5177\u6709\u67d0\u4e9b\u7ea6\u675f\u6216\u9650\u5236\uff1a\n\u6574\u4e2a\u8f93\u51fa\u7f13\u51b2\u533a\u5fc5\u987b\u5206\u914d\u56fa\u5b9a\u7684\u5927\u5c0f--\u4f46\u662f\uff0c\u8c03\u7528\u65b9\u53ef\u4ee5\u67e5\u8be2\u6240\u9700\u7684\u5927\u5c0f\u3002\nXZ\u6587\u4ef6\u5fc5\u987b\u662f&#34\uff1b\u5b9e\u4f53&#34\uff1b\uff0c\u5373\uff1a\u5355\u4e2a\u5757(\u91cd\u7f6e\u5355\u4e2a\u5b57\u5178/\u5c5e\u6027)\u3002\nLZMA2\u5c5e\u6027\u5b57\u8282\u5fc5\u987b\u6307\u793aLZMA\u5c5e\u6027lc=3\u3001pb=2\u3001lc=0\u3002\nXZ\u5757\u4e0d\u5f97\u5177\u6709\u53ef\u9009\u7684&#34\uff1b\u538b\u7f29\u5927\u5c0f&#34\uff1b\u548c/\u6216&#34\uff1b\u672a\u538b\u7f29\u5927\u5c0f&#34\uff1bVLI\u5143\u6570\u636e\u3002\n\u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u8fd9\u4e9b\u5047\u8bbe\u53ef\u80fd\u770b\u8d77\u6765\u8fc7\u4e8e\u4e25\u683c\uff0c\u4f46\u5b83\u4eec\u4e0exzutils\u3001\u9009\u62e9XZ\u4f5c\u4e3a\u683c\u5f0f\u65f6\u76847-zip\u548cPython LZMA\u6a21\u5757\u751f\u6210\u7684\u5e38\u89c1\u6587\u4ef6\u76f8\u5bf9\u5e94\u3002\u5927\u591a\u6570\u7f16\u7801\u5668\u4e0d\u652f\u6301XZ/LZMA2&LZMA2\u58f0\u79f0\u7684\u7edd\u5927\u591a\u6570\u529f\u80fd\uff0c\u5982SHA256\u6216CRC64\u3001\u591a\u5757\u7b49\u3002\nMINLZ_INTEGRITY_CHECKS--\u6b64\u9009\u9879\u914d\u7f6e\u662f\u5426\u5e94\u8be5\u6267\u884c\u6216\u8df3\u8fc7XZ\u6570\u636e\u7ed3\u6784\u548c\u538b\u7f29\u5757\u7684CRC32\u6821\u9a8c\u548c\u3002\u5220\u9664\u6b64\u529f\u80fd\u53ef\u63d0\u9ad8\u6027\u80fd\uff0c\u8be5\u6027\u80fd\u968f\u8f93\u5165\u6587\u4ef6\u7684\u5927\u5c0f\u800c\u6269\u5c55\u3002\u5176\u7ed3\u679c\u662f\u5e93\u5927\u5c0f\u7684\u589e\u52a0\u6700\u5c0f\uff0c\u5e76\u4e14\u8fd8\u9700\u8981\u5b9e\u73b0\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684CRC32\u6821\u9a8c\u548c\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5bf9\u5e94\u4e8e\u4ee5\u4e0b\u539f\u578b\uff1auint32_t OsComputeCrc32(uint32_t\u521d\u59cb\uff0c\u5e38\u91cfuint8_t*data\uff0cuint32_t\u957f\u5ea6)\uff1b\nMINLZ_META_CHECKS--\u8be5\u9009\u9879\u914d\u7f6e\u662f\u5426\u5e94\u8be5\u5b8c\u5168\u4fe1\u4efb\u8f93\u5165\u6587\u4ef6\u4ee5\u7b26\u5408minlzlib\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u68c0\u67e5\u5404\u79cd\u6d41\u5934\u6807\u5fd7\u6216\u5757\u5934\u6807\u5fd7\u548c\u5176\u4ed6\u5c5e\u6027\u3002\u6b64\u5916\uff0c\u7d22\u5f15\u548c\u6d41\u811a\u4e5f\u88ab\u5b8c\u5168\u5ffd\u7565\u3002\u6b64\u6a21\u5f0f\u53ef\u5728\u7ea63.6 GHz\u7684\u5355\u5904\u7406\u5668\u4e0a\u5b9e\u73b010kb\u4ee5\u4e0b\u7684\u5e93\uff0c\u53ef\u89e3\u7801100MB/s\u3002\u4ec5\u5f53\u8f93\u5165\u6587\u4ef6\u5728\u52a0\u5bc6\u7684\u9632\u7be1\u6539\u5b89\u5168\u901a\u9053\u6216\u5bb9\u5668(\u5982\u7b7e\u540d\u7684\u6563\u5217)\u4e2d\u5305\u88c5\u6216\u4f20\u9012\u65f6\uff0c\u624d\u5efa\u8bae\u8fd9\u6837\u505a\u3002\n\u5728Visual Studio 2019\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528File-&gt\uff1bOpen-&gt\uff1bCMake\u5e76\u5c06\u5176\u6307\u5411\u9876\u7ea7CMakeFiles.txt\uff0c\u7136\u540e\u9009\u62e9Win-AMD64\u76ee\u6807\u6216Win-Release-AMD64\u76ee\u6807\u3002\u524d\u8005\u6784\u5efa\u6ca1\u6709\u4f18\u5316\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u540e\u8005\u6784\u5efa\u5e26\u6709\u8c03\u8bd5\u7b26\u53f7\u7684\u5b8c\u5168\u4f18\u5316\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6(\u4e3a\u4e86\u63d0\u9ad8\u901f\u5ea6)\u3002\n\u4f5c\u8005\u8981\u611f\u8c22\u4ee5\u4e0b\u5de8\u4eba\u7684\u80a9\u5934\uff0c\u4ed6\u4eec\u7684\u4ee3\u7801\u3001\u6587\u6863\u548c\u7f16\u5199\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\u529f\u4e0d\u53ef\u6ca1\uff1a", "note_en": "The Minimal LZMA ( minlzma) project aims to provide a minimalistic, cross-platform, highly commented, standards-compliant C library ( minlzlib) for decompressing LZMA2-encapsulated compressed data in LZMA format within an XZ container, as can be generated with Python 3.6, 7-zip, and xzutils. Additionally, a simple, portable, command-line tool ( minlzdec) is provided for excercising the functionality on a provided input file.\n  /**  * @brief Decompresses an XZ stream from InputBuffer into OutputBuffer.  *  * @description The XZ stream must contain a single block with an LZMA2 filter  * and no BJC2 filters, using default LZMA properties, and using  * either CRC32 or None as the checksum type.  *  * @param[in] InputBuffer - A fully formed buffer containing the XZ stream.  * @param[in] InputSize - The size of the input buffer.  * @param[inopt] OutputBuffer - A fully allocated buffer to receive the output.  * Callers can pass in NULL if they do not intend to decompress,  * in combination with setting OutputSize to 0, in order to query  * the final expected size of the decompressed buffer.  * @param[inout] OutputSize - On input, the size of the buffer. On output, the  * size of the decompressed result.  *  * @return true - The input buffer was fully decompressed in OutputBuffer  * false - A failure occured during the decompression process.   */ bool XzDecode (  uint8_t* InputBuffer,  uint32_t InputSize,  uint8_t* OutputBuffer,  uint32_t* OutputSize );\n  In order to provide its vast simplicity, fast performance, minimal source, and small compiled size,  minlzlib makes certain assumptions about the input file and has certain restrictions or limitations:\n The entire output buffer must be allocated with a fixed size -- however, callers are able to query the required size\n The XZ file must be &#34;solid&#34;, i.e.: a single block (with a single dictionary/properties reset)\n The LZMA2 property byte must indicate the LZMA properties  lc = 3,  pb = 2,  lc = 0\n The XZ block must not have the optional &#34;compressed size&#34; and/or &#34;uncompressed size&#34; VLI metadata\n Note that while these assumptions may seem overly restrictive, they correspond to the usual files produced by  xzutils,  7-zip when choosing XZ as the format, and the  Python  LZMA module. Most encoders do not support the vast majority of XZ/LZMA2&#39;s purported capabilities, such as SHA256 or CRC64, multiple blocks, etc.\n      MINLZ_INTEGRITY_CHECKS -- This option configures whether or not CRC32 checksumming of the XZ data structures and compressed block should be performed, or skipped. Removing this functionality gains an increase in performance which scales with the size of the input file. It results in a minimal increase in library size, and also requires the implementation of a platform-specific CRC32 checksum function that correponds to the following prototype:  uint32_t OsComputeCrc32(uint32_t Initial, const uint8_t* Data, uint32_t Length);\n MINLZ_META_CHECKS -- This option configures whether or nor the input files should be fully trusted to conform to the requirements of  minlzlib and do not require checking the various stream header flags or block header flags and other attributes. Additionally, the index and stream footer are completely ignored. This mode results in a sub-10KB library that can decode 100MB/s on a ~3.6GHz single-processor. This is only recommended if the input file is wrapped or delivered in a cryptographically tamper-proof secure channel or container (such as a signed hash).\n    Within Visual Studio 2019, you can use File-&gt;Open-&gt;CMake and point it at the top-level  CMakeFiles.txt, and choose either the  win-amd64 target or the  win-release-amd64 target. The former builds a binary with no optimizations, the later builds a fully optimized binary (for speed) with debug symbols.\n    The author would like to thank the shoulders of the following giants, whose code, documentation, and writing was monumental in this effort:", "posttime": "2020-06-14 07:38:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "lzma,minimal,xz", "title": "Minlzma-\u6700\u5c0fLZMA\u9879\u76ee", "title_en": "Minlzma \u2013 Minimal LZMA Project", "transed": 1, "url": "https://github.com/ionescu007/minlzma", "via": "", "real_tags": ["lzma", "minimal", "xz"]}, {"category": "", "categoryclass": "", "imagename": "03eda71fa51016add1e5961ca0e7d92c.jpg", "infoid": 1006471, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6765\u81ea\u6089\u5c3c\u65b0\u5357\u5a01\u5c14\u58eb\u5927\u5b66\u7684\u5316\u5b66\u5de5\u7a0b\u5e08\u5df2\u7ecf\u5f00\u53d1\u51fa\u65b0\u6280\u672f\uff0c\u5e2e\u52a9\u5c06\u6709\u5bb3\u7684\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u8f6c\u5316\u4e3a\u5316\u5b66\u79ef\u6728\uff0c\u4ee5\u5236\u9020\u6709\u7528\u7684\u5de5\u4e1a\u4ea7\u54c1\uff0c\u5982\u71c3\u6599\u548c\u5851\u6599\u3002\u5982\u679c\u5728\u5de5\u4e1a\u73af\u5883\u4e2d\u5f97\u5230\u9a8c\u8bc1\u5e76\u5927\u89c4\u6a21\u91c7\u7528\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u5728\u4e16\u754c\u5411\u7eff\u8272\u7ecf\u6d4e\u8fc7\u6e21\u7684\u8fc7\u7a0b\u4e2d\u7ed9\u4e16\u754c\u5e26\u6765\u5598\u606f\u7684\u7a7a\u95f4\u3002\n\u5728\u4eca\u5929\u53d1\u8868\u5728\u201c\u5148\u8fdb\u80fd\u6e90\u6750\u6599\u201d\u6742\u5fd7\u4e0a\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\uff0c\u65b0\u5357\u5a01\u5c14\u58eb\u5927\u5b66\u5316\u5b66\u5de5\u7a0b\u5b66\u9662\u7684Rahman Daiyan\u535a\u58eb\u548cEmma Lovell\u535a\u58eb\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4e00\u79cd\u521b\u9020\u7eb3\u7c73\u9897\u7c92\u7684\u65b9\u6cd5\uff0c\u8fd9\u79cd\u7eb3\u7c73\u9897\u7c92\u53ef\u4ee5\u4fc3\u8fdb\u5c06\u5e9f\u5f03\u7684\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u6709\u7528\u7684\u5de5\u4e1a\u96f6\u90e8\u4ef6\u3002\n\u7814\u7a76\u4eba\u5458\u5728\u201c\u79d1\u5b66\u5bb6\u201d\u7f57\u65af\u00b7\u963f\u8fc8\u52d2\u6559\u6388\u9886\u5bfc\u7684\u7c92\u5b50\u4e0e\u50ac\u5316\u7814\u7a76\u5b9e\u9a8c\u5ba4\u5f00\u5c55\u4e86\u8fd9\u9879\u5de5\u4f5c\uff0c\u4ed6\u4eec\u53d1\u73b0\uff0c\u901a\u8fc7\u4f7f\u7528\u706b\u7130\u55b7\u96fe\u70ed\u89e3(FSP)\u6280\u672f\u5728\u975e\u5e38\u9ad8\u7684\u6e29\u5ea6\u4e0b\u5236\u9020\u6c27\u5316\u950c\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5236\u9020\u51fa\u7eb3\u7c73\u9897\u7c92\uff0c\u4f5c\u4e3a\u50ac\u5316\u5242\u5c06\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u5408\u6210\u6c14-\u4e00\u79cd\u6c22\u6c14\u7684\u6df7\u5408\u7269\uff0c\u5e76\u7528\u4e8e\u5de5\u4e1a\u4ea7\u54c1\u7684\u5236\u9020\u3002\u7814\u7a76\u4eba\u5458\u8bf4\uff0c\u4e0e\u76ee\u524d\u53ef\u7528\u7684\u65b9\u6cd5\u76f8\u6bd4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u66f4\u4fbf\u5b9c\uff0c\u66f4\u80fd\u6ee1\u8db3\u91cd\u5de5\u4e1a\u7684\u8981\u6c42\u3002\n\u6d1b\u7ef4\u5c14\u535a\u58eb\u8bf4\uff1a\u6211\u4eec\u4f7f\u7528\u71c3\u70e7\u6e29\u5ea6\u4e3a2000\u534e\u6c0f\u5ea6\u7684\u660e\u706b\u5236\u9020\u6c27\u5316\u950c\u7eb3\u7c73\u9897\u7c92\uff0c\u7136\u540e\u5229\u7528\u7535\u80fd\u5c06\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u5408\u6210\u6c14\u3002\n\u5408\u6210\u6c14\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u4e50\u9ad8\u7684\u5316\u5b66\u7b49\u4ef7\u7269\uff0c\u56e0\u4e3a\u6c22\u548c\u4e00\u6c27\u5316\u78b3\u8fd9\u4e24\u4e2a\u7ec4\u6210\u90e8\u5206\u53ef\u4ee5\u4e0d\u540c\u7684\u6bd4\u4f8b\u7528\u4e8e\u5236\u9020\u5408\u6210\u67f4\u6cb9\u3001\u7532\u9187\u3001\u9152\u7cbe\u6216\u5851\u6599\u7b49\u975e\u5e38\u91cd\u8981\u7684\u5de5\u4e1a\u524d\u4f53\u3002\n\u56e0\u6b64\uff0c\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u6211\u4eec\u6b63\u5728\u505a\u7684\u662f\u5c06\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u8fd9\u4e9b\u524d\u4f53\uff0c\u8fd9\u4e9b\u524d\u4f53\u53ef\u4ee5\u7528\u6765\u5236\u9020\u6240\u6709\u8fd9\u4e9b\u91cd\u8981\u7684\u5de5\u4e1a\u5316\u5b66\u54c1\u3002\n\u6234\u71d5\u535a\u58eb\u8bf4\uff0c\u5728\u5de5\u4e1a\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u542b\u6709FSP\u4ea7\u751f\u7684\u6c27\u5316\u950c\u9897\u7c92\u7684\u7535\u89e3\u69fd\u5c06\u5e9f\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u6709\u7528\u7684\u5408\u6210\u6c14\u6392\u5217\u3002\n\u4ece\u53d1\u7535\u5382\u6216\u6c34\u6ce5\u5382\u6392\u51fa\u7684\u4e8c\u6c27\u5316\u78b3\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7535\u89e3\u69fd\uff0c\u5728\u91cc\u9762\u6211\u4eec\u6709\u4e00\u4e2a\u7535\u6781\u5f62\u5f0f\u7684\u706b\u7130\u55b7\u6d82\u7684\u6c27\u5316\u950c\u6750\u6599\u3002\u4ed6\u8bf4\uff0c\u5f53\u6211\u4eec\u628a\u5e9f\u65e7\u7684\u4e8c\u6c27\u5316\u78b3\u6392\u5165\u65f6\uff0c\u5b83\u662f\u7528\u7535\u529b\u5904\u7406\u7684\uff0c\u7136\u540e\u4ee5\u4e00\u6c27\u5316\u78b3\u548c\u6c22\u7684\u6df7\u5408\u7269\u7684\u5408\u6210\u6c14\u7684\u5f62\u5f0f\u4ece\u51fa\u53e3\u91ca\u653e\u51fa\u6765\u3002\n\u7814\u7a76\u4eba\u5458\u8bf4\uff0c\u5b9e\u9645\u4e0a\uff0c\u4ed6\u4eec\u6b63\u5728\u5173\u95ed\u5de5\u4e1a\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u6709\u5bb3\u6e29\u5ba4\u6c14\u4f53\u7684\u78b3\u5faa\u73af\u3002\u901a\u8fc7\u5bf9FSP\u6280\u672f\u71c3\u70e7\u7eb3\u7c73\u9897\u7c92\u7684\u65b9\u5f0f\u8fdb\u884c\u5fae\u5c0f\u8c03\u6574\uff0c\u4ed6\u4eec\u53ef\u4ee5\u786e\u5b9a\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4ea7\u751f\u7684\u5408\u6210\u6c14\u4f53\u79ef\u6728\u7684\u6700\u7ec8\u6df7\u5408\u7269\u3002\n\u6234\u71d5\u535a\u58eb\u8bf4\uff0c\u76ee\u524d\u4f60\u7528\u5929\u7136\u6c14\u751f\u4ea7\u5408\u6210\u6c14--\u4e5f\u5c31\u662f\u7528\u5316\u77f3\u71c3\u6599\u751f\u4ea7\u5408\u6210\u6c14\u3002\u4f46\u662f\u6211\u4eec\u6b63\u5728\u5229\u7528\u5e9f\u5f03\u7684\u4e8c\u6c27\u5316\u78b3\uff0c\u7136\u540e\u6839\u636e\u4f60\u60f3\u5728\u54ea\u4e2a\u884c\u4e1a\u4f7f\u7528\u5b83\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u5408\u6210\u6c14\u3002\n\u4f8b\u5982\uff0c\u4e00\u6c27\u5316\u78b3\u548c\u6c22\u6c14\u4e4b\u95f4\u7684\u6bd4\u4f8b\u4e3a1\uff1a1\uff0c\u8fd9\u5c31\u4f7f\u5f97\u5408\u6210\u6c14\u53ef\u4ee5\u7528\u4f5c\u71c3\u6599\u3002\u4f46\u6234\u71d5\u535a\u58eb\u8bf4\uff0c\u56db\u4efd\u4e00\u6c27\u5316\u78b3\u548c\u4e00\u4efd\u6c22\u6c14\u7684\u6bd4\u4f8b\u9002\u5408\u5236\u9020\u5851\u6599\u3002\n\u5728\u9009\u62e9\u4f5c\u4e3a\u50ac\u5316\u5242\u65f6\uff0c\u7814\u7a76\u4eba\u5458\u786e\u4fdd\u4e86\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u4ecd\u7136\u662f\u8fd9\u4e2a\u9886\u57df\u4ee5\u524d\u5c1d\u8bd5\u8fc7\u7684\u4e00\u79cd\u66f4\u4fbf\u5b9c\u7684\u66ff\u4ee3\u65b9\u6848\u3002\n\u6234\u71d5\u535a\u58eb\u8bf4\uff0c\u8fc7\u53bb\u7684\u5c1d\u8bd5\u90fd\u4f7f\u7528\u4e86\u6602\u8d35\u7684\u6750\u6599\uff0c\u5982\u94af\uff0c\u4f46\u8fd9\u662f\u7b2c\u4e00\u6b21\u5c06\u6fb3\u5927\u5229\u4e9a\u5f53\u5730\u5f00\u91c7\u7684\u4e00\u79cd\u975e\u5e38\u4fbf\u5b9c\u3001\u50a8\u91cf\u4e30\u5bcc\u7684\u6750\u6599\u6210\u529f\u5730\u5e94\u7528\u4e8e\u5e9f\u7269\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u7684\u95ee\u9898\u3002\nLovell\u535a\u58eb\u8865\u5145\u8bf4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5438\u5f15\u4eba\u7684\u53e6\u4e00\u4e2a\u539f\u56e0\u662f\u4f7f\u7528FSP\u706b\u7130\u7cfb\u7edf\u6765\u521b\u5efa\u548c\u63a7\u5236\u8fd9\u4e9b\u6709\u4ef7\u503c\u7684\u6750\u6599\u3002\n\u5979\u8bf4\uff1a\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u5de5\u4e1a\u5316\u4f7f\u7528\uff0c\u53ef\u4ee5\u89c4\u6a21\u5316\uff0c\u5236\u4f5c\u6750\u6599\u975e\u5e38\u8fc5\u901f\uff0c\u975e\u5e38\u6709\u6548\u3002\n\u6211\u4eec\u4e0d\u9700\u8981\u62c5\u5fc3\u4f7f\u7528\u975e\u5e38\u6602\u8d35\u7684\u91d1\u5c5e\u548c\u524d\u4f53\u7684\u590d\u6742\u5408\u6210\u6280\u672f-\u6211\u4eec\u53ef\u4ee5\u71c3\u70e7\u5b83\uff0c\u572810\u5206\u949f\u5185\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e9b\u9897\u7c92\u51c6\u5907\u597d\u3002\u901a\u8fc7\u63a7\u5236\u71c3\u70e7\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u6240\u9700\u5408\u6210\u6c14\u79ef\u6728\u7684\u6bd4\u4f8b\u3002\n\u867d\u7136\u8fd9\u4e24\u5bb6\u516c\u53f8\u5df2\u7ecf\u5efa\u9020\u4e86\u4e00\u53f0\u7535\u89e3\u69fd\uff0c\u5e76\u7528\u542b\u6709\u6c61\u67d3\u7269\u7684\u4e8c\u6c27\u5316\u78b3\u5e9f\u6c14\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u4f46\u5c06\u8fd9\u9879\u6280\u672f\u63a8\u5e7f\u5230\u53ef\u4ee5\u8f6c\u5316\u53d1\u7535\u5382\u6392\u653e\u7684\u6240\u6709\u4e8c\u6c27\u5316\u78b3\u7684\u5730\u6b65\uff0c\u4ecd\u6709\u4e00\u6bb5\u8def\u8981\u8d70\u3002\n\u6211\u4eec\u7684\u60f3\u6cd5\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e8c\u6c27\u5316\u78b3\u7684\u70b9\u6e90\uff0c\u6bd4\u5982\u71c3\u7164\u53d1\u7535\u5382\u3001\u71c3\u6c14\u53d1\u7535\u5382\uff0c\u751a\u81f3\u662f\u5929\u7136\u6c14\u77ff\u5c71\uff0c\u5728\u90a3\u91cc\u4f60\u53ef\u4ee5\u91ca\u653e\u5927\u91cf\u7684\u7eaf\u4e8c\u6c27\u5316\u78b3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e9b\u5de5\u5382\u7684\u540e\u7aef\u57fa\u672c\u4e0a\u6539\u9020\u8fd9\u9879\u6280\u672f\u3002\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u6355\u83b7\u4ea7\u751f\u7684\u4e8c\u6c27\u5316\u78b3\uff0c\u5e76\u5c06\u5176\u8f6c\u5316\u4e3a\u5bf9\u5de5\u4e1a\u6709\u5de8\u5927\u4ef7\u503c\u7684\u4e1c\u897f\uff0c\u6d1b\u7ef4\u5c14\u535a\u58eb\u8bf4\u3002\n\u8be5\u5c0f\u7ec4\u7684\u4e0b\u4e00\u4e2a\u9879\u76ee\u5c06\u662f\u5728\u70df\u6c14\u73af\u5883\u4e2d\u6d4b\u8bd5\u4ed6\u4eec\u7684\u7eb3\u7c73\u6750\u6599\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u5bf9\u6076\u52a3\u6761\u4ef6\u548c\u5de5\u4e1a\u6c14\u4f53\u4e2d\u53d1\u73b0\u7684\u5176\u4ed6\u5316\u5b66\u7269\u8d28\u5177\u6709\u8010\u53d7\u6027\u3002\u66f4\u591a\u4fe1\u606f\uff1aRahman Daiyan\u7b49\u4eba\uff0c\u53d1\u73b0\u7528\u4e8e\u53ef\u63a7\u5408\u6210\u6c14\u4f53\u751f\u4ea7\u7684\u5de5\u7a0b\u6c27\u5316\u950c\u7535\u50ac\u5316\u5242\u4e2d\u7684\u539f\u5b50\u5c3a\u5ea6\u7a33\u5b9a\u6027\u548c\u53cd\u5e94\u6027\uff0c\u5148\u8fdb\u80fd\u6e90\u6750\u6599(2020)\u3002doi\uff1a10.1002/aenm.202001381", "note_en": "Chemical engineers from UNSW Sydney have developed new technology that helps convert harmful carbon dioxide emissions into chemical building blocks to make useful industrial products like fuel and plastics.    And if validated in an industrial setting and adopted on a large scale, the process could give the world breathing space as it transitions towards a green economy.\n  In a paper published today in the journal  Advanced Energy Materials, Dr. Rahman Daiyan and Dr. Emma Lovell from UNSW&#39;s School of Chemical Engineering detail a way of creating nanoparticles that promote conversion of waste carbon dioxide into useful industrial components.\n    The researchers, who carried out their work in the Particles and Catalysis Research Laboratory led by Scientia Professor Rose Amal, show that by making zinc oxide at very high temperatures using a technique called flame spray pyrolysis (FSP), they can create nanoparticles which act as the catalyst for turning carbon dioxide into &#39;syngas&#39; - a mix of hydrogen and   used in the manufacture of industrial products. The researchers say this method is cheaper and more scalable to the requirements of heavy industry than what is available today.\n  &#34;We used an open flame, which burns at 2000 degrees, to create nanoparticles of zinc oxide that can then be used to convert CO 2, using electricity, into syngas,&#34; says Dr. Lovell.\n  &#34;Syngas is often considered the chemical equivalent of Lego because the two building blocks\u2014hydrogen and carbon monoxide\u2014can be used in different ratios to make things like synthetic diesel, methanol, alcohol or plastics, which are very important industrial precursors.\n  &#34;So essentially what we&#39;re doing is converting CO 2 into these precursors that can be used to make all these vital industrial chemicals.&#34;\n    In an industrial setting, an electrolyser containing the FSP-produced zinc oxide particles could be used to convert the waste CO 2 into useful permutations of syngas, says Dr. Daiyan.\n  &#34;Waste CO 2 from say, a power plant or cement factory, can be passed through this electrolyser, and inside we have our flame-sprayed zinc oxide material in the form of an electrode. When we pass the waste CO 2 in, it is processed using electricity and is released from an outlet as syngas in a mix of CO and hydrogen,&#34; he says.\n    The researchers say in effect, they are closing the carbon loop in industrial processes that create harmful greenhouse gases. And by making small adjustments to the way the nanoparticles are burned by the FSP technique, they can determine the eventual mix of the syngas building blocks produced by the carbon dioxide conversion.\n  &#34;At the moment you generate syngas by using natural gas\u2014so from fossil fuels,&#34; Dr. Daiyan says. &#34;But we&#39;re using waste carbon dioxide and then converting it to syngas in a ratio depending on which industry you want to use it in.&#34;\n  For example, a one to one ratio between the carbon monoxide and hydrogen lends itself to syngas that can be used as fuel. But a ratio of four parts carbon monoxide and one part hydrogen is suitable for the creation of plastics, Dr. Daiyan says.\n    In choosing   as their catalyst, the researchers have ensured that their solution has remained a cheaper alternative to what has been previously attempted in this space.\n  &#34;Past attempts have used expensive materials such as palladium, but this is the first instance where a very cheap and abundant material, mined locally in Australia, has been successfully applied to the problem of waste carbon dioxide conversion,&#34; Dr. Daiyan says.\n  Dr. Lovell adds that what also makes this method appealing is using the FSP flame system to create and control these valuable materials.\n  &#34;It means it can be used industrially, it can be scaled, it&#39;s super quick to make the materials and very effective,&#34; she says.\n  &#34;We don&#39;t need to worry about complicated synthesis techniques that use really expensive metals and precursors\u2014we can burn it and in 10 minutes have these particles ready to go. And by controlling how we burn it, we can control those ratios of desired syngas building blocks.&#34;\n    While the duo have already built an electrolyser that has been tested with waste CO 2 gas that contains contaminants, scaling the technology up to the point where it could convert all of the waste   dioxide emitted by a power plant is still a way down the track.\n  &#34;The idea is that we can take a point source of CO 2, such as a coal fired power plant, a gas power plant, or even a natural gas mine where you liberate a huge amount of pure CO 2 and we can essentially retrofit this technology at the back end of these plants. Then you could capture that produced CO 2 and convert it into something that is hugely valuable to industry,&#34; says Dr. Lovell.\n  The group&#39;s next project will be to test their nanomaterials in a flue gas setting to ensure they are tolerant to the harsh conditions and other chemicals found in industrial   gas.        More information:\t\t\t\t\t\t\t\t\t\t\t\tRahman Daiyan et al, Uncovering Atomic\u2010Scale Stability and Reactivity in Engineered Zinc Oxide Electrocatalysts for Controllable Syngas Production,  Advanced Energy Materials (2020).  DOI: 10.1002/aenm.202001381", "posttime": "2020-06-14 06:48:16", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5de5\u7a0b\u5e08,engineers,\u4e8c\u6c27\u5316\u78b3", "title": "\u5316\u5b66\u5de5\u7a0b\u5e08\u5c06\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u6709\u7528\u7684\u5de5\u4e1a\u6750\u6599", "title_en": "Chemical Engineers Turn Carbon Dioxide Into Useful Industrial Materials", "transed": 1, "url": "https://phys.org/news/2020-06-neat-carbon-dioxide-material.html", "via": "", "real_tags": ["\u5de5\u7a0b\u5e08", "engineers", "\u4e8c\u6c27\u5316\u78b3"]}, {"category": "", "categoryclass": "", "imagename": "8050ade216cbe5005b32f5275dbc31dd.jpg", "infoid": 1006470, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5e74\u524d\uff0c\u6211\u5973\u513f\u4e0a\u4e2d\u5b66\u7684\u65f6\u5019\uff0c\u5979\u8981\u590d\u4e60\u4e00\u573a\u201c\u79d1\u5b66\u65b9\u6cd5\u4e94\u6b65\u66f2\u201d\u7684\u6d4b\u9a8c\u3002\u5979\u6beb\u4e0d\u8d39\u529b\u5730\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\u8bb0\u5fc6\u4e86\u4e94\u4e2a\u5355\u8bcd\uff0c\u4f46\u5979\u4e5f\u5fc5\u987b\u51c6\u5907\u597d\u89e3\u91ca\u5b83\u4eec\uff0c\u5728\u90a3\u91cc\u5979\u9047\u5230\u4e86\u9ebb\u70e6\uff0c\u76f4\u5230\u5979\u6709\u4e86\u4e00\u4e2a\u597d\u4e3b\u610f\uff1a\u8fd9\u662f\u5979\u7684\u6bcd\u4eb2\u7684\u4e00\u4e2a\u673a\u4f1a\uff0c\u5979\u7684\u6bcd\u4eb2\u6559\u6388\u5e76\u64b0\u5199\u4e86\u79d1\u5b66\u53f2\uff0c\u8ba9\u81ea\u5df1\u53d8\u5f97\u6709\u7528\u4e86\u3002\u201c\u6211\u60f3\u89c2\u5bdf\u3001\u5047\u8bbe\u3001\u9884\u6d4b\u3001\u5b9e\u9a8c\u3001\u786e\u8ba4\u662f\u6709\u610f\u4e49\u7684\uff0c\u201d\u5979\u5bf9\u6211\u8bf4\uff0c\u201c\u4f46\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u662f\u5047\u8bbe\u3001\u89c2\u5bdf\u3001\u9884\u6d4b\u3001\u5b9e\u9a8c\u3001\u786e\u8ba4\u5462\uff1f\u201d\u8fd8\u662f\u9884\u6d4b\u3001\u89c2\u5bdf\u3001\u786e\u8ba4\u3001\u5047\u8bbe\u3001\u5b9e\u9a8c\uff1f\u6216\u2026\u201c\u3002\n\u201c\u5b8c\u5168\u6b63\u786e\uff0c\u201d\u6211\u6253\u65ad\u4e86\u5979\uff0c\u5979\u8fd8\u6ca1\u6765\u5f97\u53ca\u544a\u8bc9\u6211\u8fd9\u4e94\u4e2a\u8bcd\u7684\u5168\u90e8120\u79cd\u7ec4\u5408\u3002\u7136\u540e\uff0c\u6211\u975e\u4f46\u6ca1\u6709\u89e3\u51b3\u5979\u7684\u95ee\u9898\uff0c\u53cd\u800c\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7cdf\u3002(\u6bcd\u4eb2\u662f\u7528\u6765\u5e72\u4ec0\u4e48\u7684\uff1f)\u3002\u201c\u4ed6\u4eec\u771f\u7684\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8d70\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u8ba4\u4e3a\u5b83\u4eec\u66f4\u6709\u53ef\u80fd\u540c\u65f6\u53d1\u751f\u3002\u6b64\u5916\uff0c\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5305\u62ec\u8bb8\u591a\u5176\u4ed6\u90e8\u5206\uff0c\u5982\u6bd4\u8f83\u3001\u5f62\u5f0f\u5316\u3001\u7c7b\u63a8\u3001\u89e3\u91ca\u3001\u53ef\u89c6\u5316\u2026\u3002\u5979\u770b\u4e86\u6211\u4e00\u773c\u201c\u7236\u6bcd\u5f88\u6709\u9b45\u529b\uff0c\u4f46\u7528\u5904\u4e0d\u5927\u201d\uff0c\u7136\u540e\u53c8\u8f6c\u8fc7\u5934\u6765\u770b\u5979\u7684\u7b14\u8bb0\u3002\u5982\u679c\u6211\u80fd\u8ba9\u5979\u53c2\u8003\u4ea8\u5229\u00b7M\u00b7\u8003\u5c14\u65af\u7684\u201c\u79d1\u5b66\u65b9\u6cd5\uff1a\u4ece\u8fbe\u5c14\u6587\u5230\u675c\u5a01\u7684\u601d\u7ef4\u8fdb\u5316\u201d(The Science Method\uff1aan Evolution of Think from Darwin to Dewey)\u5c31\u597d\u4e86\u3002\u8003\u5c14\u65af\u7684\u4e66\u4e5f\u6ca1\u6709\u89e3\u51b3\u5979\u7684\u95ee\u9898\uff0c\u800c\u662f\u628a\u5b83\u53d8\u6210\u4e86\u4e00\u4e2a\u66f4\u5927\u66f4\u6709\u8da3\u7684\u73b0\u8c61\u3002(\u4e66\u662f\u7528\u6765\u505a\u4ec0\u4e48\u7684\uff1f)\u3002\n\u79d1\u5b66\u7684\u65b9\u6cd5\u662f\u4ec0\u4e48\uff0c\u5b83\u662f\u4ec0\u4e48\u65f6\u5019\u3001\u4ec0\u4e48\u5730\u65b9\u3001\u600e\u4e48\u4f1a\u50cf\u5b69\u5b50\u4eec\u8bf4\u7684\u90a3\u6837\u6210\u4e3a\u4e00\u4ef6\u4e8b\u7684\u5462\uff1f\u201c\u79d1\u5b66\u65b9\u6cd5\u201d\u7684\u6743\u5a01\u5b9a\u4e49\u5e38\u5e38\u8bf4\uff0c\u5b83\u7531\u4e00\u7cfb\u5217\u7a0b\u5e8f\u7ec4\u6210\uff0c\u5305\u62ec\u89c2\u5bdf\u3001\u5b9e\u9a8c\u4ee5\u53ca\u901a\u8fc7\u5f52\u7eb3\u548c\u6f14\u7ece\u63a8\u7406\u5f62\u6210\u548c\u68c0\u9a8c\u5047\u8bf4\u3002\u8fd9\u6837\u7684\u63cf\u8ff0\u901a\u5e38\u5c06\u79d1\u5b66\u7684\u6210\u529f\u5f52\u529f\u4e8e\u81ea17\u4e16\u7eaa\u4ee5\u6765\u8fd9\u4e9b\u7a0b\u5e8f\u7684\u5e94\u7528\uff0c\u4ee5\u53ca\u5f17\u6717\u897f\u65af\u00b7\u57f9\u6839\u548c\u827e\u8428\u514b\u00b7\u725b\u987f\u7b49\u4eba\u7684\u5de5\u4f5c\u3002\u4f46\u662f\uff0c\u57f9\u6839\u3001\u725b\u987f\u621617\u4e16\u7eaa\u7684\u5176\u4ed6\u4efb\u4f55\u4eba\u90fd\u4e0d\u4f1a\u627f\u8ba4\u8fd9\u4e2a\u77ed\u8bed\uff1b\u800c\u4e14\uff0c\u4ed6\u4eec\u90fd\u4e0d\u4f1a\u540c\u610f\u73b0\u5728\u7684\u6807\u51c6\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\u57f9\u6839\u62d2\u7edd\u6f14\u7ece\u63a8\u7406\uff0c\u8ba4\u4e3a\u8fd9\u662f\u7cdf\u7cd5\u7684\u65e7\u4e9a\u91cc\u58eb\u591a\u5fb7\u65b9\u6cd5\uff0c\u800c\u79d1\u5b66\u53f2\u4e0a\u6700\u5927\u80c6\u7684\u5047\u8bbe\u4e4b\u4e00-\u5b87\u5b99\u4ee5\u592a\u7684\u4f5c\u8005\u725b\u987f\u5219\u5426\u8ba4\u5047\u8bbe\u5728\u4ed6\u7684\u79d1\u5b66\u4e2d\u626e\u6f14\u4efb\u4f55\u89d2\u8272\uff0c\u4ed6\u8457\u540d\u5730\u5ba3\u79f0\u201c\u6ca1\u6709Fingo\u7684\u5047\u8bbe\u201d(\u6211\u6ca1\u6709\u63d0\u51fa\u4efb\u4f55\u5047\u8bbe)\u3002\n\u8003\u5c14\u65af\u5c06\u79d1\u5b66\u65b9\u6cd5\u8ffd\u6eaf\u5230\u6bd4\u79d1\u5b66\u9769\u547d\u66f4\u665a\u7684\u65f6\u671f--19\u4e16\u7eaa\u672b\u548c20\u4e16\u7eaa\u521d\u3002\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u5b83\u4e0e\u667a\u529b\u5730\u7406\u5b66\u7684\u7ed3\u6784\u6027\u8f6c\u53d8\u4e0d\u8c0b\u800c\u5408\uff1a\u79d1\u5b66\u548c\u4eba\u6587\u88ab\u5206\u6210\u4e24\u4e2a\u4e0d\u540c\u7684\u5927\u9646\u3002\u4e3a\u4e86\u8bc1\u660e\u5b83\u7684\u2026", "note_en": "A few years ago, when my daughter was in middle school, she had to study for a quiz on \u201cthe five steps of the scientific method.\u201d She had no problem memorizing five words in a given order, but she also had to be ready to explain them, and there she ran into trouble, until she was seized by a bright idea: here was a chance for her mother, who taught and wrote about the history of science, to make herself useful. \u201cI guess it makes sense for it to be observation, hypothesis, prediction, experiment, confirmation,\u201d she said to me, \u201cbut why couldn\u2019t it be hypothesis, observation, prediction, experiment, confirmation? Or prediction, observation, confirmation, hypothesis, experiment? Or\u2026\u201d\n  \u201cExactly,\u201d I interrupted, before she could offer me all 120 permutations of the five words. Then, rather than solving her problem, I made it worse. (What are mothers for?) \u201cThey could really go in any order. Actually, I think they\u2019re likelier to occur simultaneously. Also, they could include plenty of other parts, like comparison, formalization, analogy, interpretation, visualization\u2026\u201d She gave me her \u201cparents are charming but of scant utility\u201d look and turned back to her notes. If only I could have referred her to Henry M. Cowles\u2019s  The Scientific Method: An Evolution of Thinking from Darwin to Dewey. Cowles\u2019s book doesn\u2019t solve her problem either, but makes it into a much bigger and more interesting phenomenon. (What are books for?)\n  What is the scientific method, and when, where, and how did it become, as the kids say, a thing? Authoritative definitions of \u201cthe scientific method\u201d often state that it consists of a set of procedures including observation, experimentation, and the formation and testing of hypotheses by inductive and deductive reasoning. Such accounts, as a rule, ascribe science\u2019s successes to the application of these procedures ever since the seventeenth century and the work of people such as Francis Bacon and Isaac Newton. But neither Bacon nor Newton nor anyone else in the seventeenth century would have recognized the phrase; moreover, neither would have agreed with current standard definitions. Bacon, for instance, rejected deductive reasoning as the bad old Aristotelian approach, and Newton, author of one of the boldest hypotheses in the history of science\u2014the universal aether\u2014denied any role for hypotheses in his science, famously declaring \u201chypotheses non fingo\u201d (I frame no hypotheses).\n  Cowles traces the scientific method to a later period than the Scientific Revolution\u2014the late nineteenth and early twentieth centuries. This makes sense, since it coincides with a tectonic shift in intellectual geography: the splitting of the sciences and the humanities into two diverging continents. To prove its\u2026", "posttime": "2020-06-14 06:47:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u601d\u8003,thinking,\u5047\u8bbe", "title": "\u53ea\u8981\u7528\u4f60\u7684\u601d\u8003\u6cf5", "title_en": "Just Use Your Thinking Pump", "transed": 1, "url": "https://www.nybooks.com/articles/2020/07/02/just-use-your-thinking-pump/", "via": "", "real_tags": ["\u601d\u8003", "thinking", "\u5047\u8bbe"]}, {"category": "", "categoryclass": "", "imagename": "fe6f825b70b1ccd0929cc4906daa76f6.jpg", "infoid": 1006469, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\uff0c\u7e41\u661f\u586b\u6ee1\u4e86\u591c\u7a7a\u3002\u4f46\u662f\uff0c\u5f53\u5b87\u5b99\u8fd8\u5904\u4e8e\u521d\u7ea7\u9636\u6bb5\u65f6\uff0c\u5b83\u6839\u672c\u6ca1\u6709\u6052\u661f\u3002\u4e00\u4e2a\u56fd\u9645\u79d1\u5b66\u5bb6\u56e2\u961f\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u63a5\u8fd1\u4e8e\u63a2\u6d4b\u3001\u6d4b\u91cf\u548c\u7814\u7a76\u8fd9\u4e2a\u65f6\u4ee3\u7684\u4fe1\u53f7\uff0c\u81ea\u4ece\u90a3\u4e2a\u6ca1\u6709\u6052\u661f\u7684\u65f6\u4ee3\u5728\u5927\u7ea6130\u4ebf\u5e74\u524d\u7ed3\u675f\u4ee5\u6765\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u4e00\u76f4\u5728\u5b87\u5b99\u4e2d\u4f20\u64ad\u3002\u8be5\u56e2\u961f\u7531\u534e\u76db\u987f\u5927\u5b66(University Of Washington)\u3001\u58a8\u5c14\u672c\u5927\u5b66(University Of Melbourne)\u3001\u79d1\u5ef7\u5927\u5b66(Curtin University)\u548c\u5e03\u6717\u5927\u5b66(Brown University)\u7684\u7814\u7a76\u4eba\u5458\u9886\u5bfc\uff0c\u53bb\u5e74\u5728\u201c\u5929\u4f53\u7269\u7406\u6742\u5fd7\u201d(AstroPhysical Journal)\u4e0a\u62a5\u544a\u79f0\uff0c\u4ed6\u4eec\u5df2\u7ecf\u5c06Murchison Widefield\u9635\u5217\u6536\u96c6\u7684\u65e0\u7ebf\u7535\u53d1\u5c04\u6570\u636e\u63d0\u9ad8\u4e86\u8fd110\u500d\u3002\u7814\u7a76\u5c0f\u7ec4\u6210\u5458\u76ee\u524d\u6b63\u5728\u641c\u5bfb\u8fd9\u67b6\u4f4d\u4e8e\u504f\u8fdc\u897f\u6fb3\u5927\u5229\u4e9a\u7684\u5c04\u7535\u671b\u8fdc\u955c\u7684\u6570\u636e\uff0c\u4ee5\u5bfb\u627e\u6765\u81ea\u6211\u4eec\u5b87\u5b99\u4e2d\u8fd9\u4e2a\u77e5\u4e4b\u751a\u5c11\u7684\u4fe1\u53f7\u7684\u8b66\u793a\u4fe1\u53f7\u3002\n\u5a01\u65af\u5eb7\u661f\u5927\u5b66\u7269\u7406\u5b66\u6559\u6388\u3001\u56e2\u961f\u6210\u5458\u7c73\u683c\u5c14\u00b7\u83ab\u62c9\u83b1\u65af\u8bf4\uff1a\u201c\u6211\u4eec\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u65f6\u4ee3\u7684\u5b87\u5b99\u5c5e\u6027\u5bf9\u7b2c\u4e00\u6279\u6052\u661f\u7684\u5f62\u6210\u4ea7\u751f\u4e86\u91cd\u5927\u5f71\u54cd\uff0c\u5e76\u542f\u52a8\u4e86\u4eca\u5929\u5b87\u5b99\u7684\u7ed3\u6784\u7279\u5f81\u3002\u201d\u90a3\u4e2a\u65f6\u4ee3\u7269\u8d28\u5728\u5b87\u5b99\u4e2d\u7684\u5206\u5e03\u65b9\u5f0f\u5f88\u53ef\u80fd\u51b3\u5b9a\u4e86\u4eca\u5929\u661f\u7cfb\u548c\u661f\u7cfb\u56e2\u7684\u5206\u5e03\u65b9\u5f0f\u3002\n\u5728\u8fd9\u4e2a\u9ed1\u6697\u65f6\u4ee3\u4e4b\u524d\uff0c\u5b87\u5b99\u662f\u708e\u70ed\u800c\u7a20\u5bc6\u7684\u3002\u7535\u5b50\u548c\u5149\u5b50\u6709\u89c4\u5f8b\u5730\u76f8\u4e92\u7f20\u7ed5\uff0c\u4f7f\u5b87\u5b99\u53d8\u5f97\u4e0d\u900f\u660e\u3002\u4f46\u5f53\u5b87\u5b99\u7684\u5e74\u9f84\u4e0d\u5230\u4e00\u767e\u4e07\u5e74\u65f6\uff0c\u7535\u5b50-\u5149\u5b50\u76f8\u4e92\u4f5c\u7528\u5c31\u53d8\u5f97\u7f55\u89c1\u4e86\u3002\u4e0d\u65ad\u81a8\u80c0\u7684\u5b87\u5b99\u53d8\u5f97\u8d8a\u6765\u8d8a\u900f\u660e\u548c\u9ed1\u6697\uff0c\u5f00\u59cb\u4e86\u5b83\u7684\u9ed1\u6697\u65f6\u4ee3\u3002\n\u6ca1\u6709\u6052\u661f\u7684\u65f6\u4ee3\u6301\u7eed\u4e86\u6570\u4ebf\u5e74\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u4e2d\u6027\u7684-\u6ca1\u6709\u5168\u9762\u7684\u7535\u8377-\u4e3b\u5bfc\u4e86\u5b87\u5b99\u3002\n\u83ab\u62c9\u83b1\u65af\u8bf4\uff0c\u5728\u8fd9\u4e2a\u9ed1\u6697\u7684\u65f6\u4ee3\uff0c\u6211\u4eec\u5f53\u7136\u6ca1\u6709\u57fa\u4e8e\u5149\u7684\u4fe1\u53f7\u53ef\u4ee5\u7814\u7a76\u6765\u4e86\u89e3\u5b83--\u6ca1\u6709\u53ef\u89c1\u5149\uff01\u4f46\u662f\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u4fe1\u53f7\u6211\u4eec\u53ef\u4ee5\u5bfb\u627e\u3002\u5b83\u6765\u81ea\u6240\u6709\u7684\u4e2d\u6027\u6c22\u3002\u6211\u4eec\u4ece\u672a\u6d4b\u91cf\u8fc7\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u5b83\u5c31\u5728\u90a3\u91cc\u3002\u5b83\u5f88\u96be\u63a2\u6d4b\u5230\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e2a\u4fe1\u53f7\u53d1\u51fa\u540e\u7684130\u4ebf\u5e74\u91cc\uff0c\u6211\u4eec\u7684\u5b87\u5b99\u53d8\u5f97\u975e\u5e38\u5fd9\u788c\uff0c\u5145\u65a5\u7740\u6765\u81ea\u6052\u661f\u3001\u661f\u7cfb\u751a\u81f3\u6211\u4eec\u7684\u6280\u672f\u7684\u5176\u4ed6\u6d3b\u52a8\uff0c\u8fd9\u4e9b\u6d3b\u52a8\u6df9\u6ca1\u4e86\u6765\u81ea\u4e2d\u6027\u6c22\u7684\u4fe1\u53f7\u3002\n\u83ab\u62c9\u83b1\u65af\u548c\u4ed6\u7684\u56e2\u961f\u5bfb\u627e\u7684130\u4ebf\u5e74\u524d\u7684\u4fe1\u53f7\u662f\u7535\u78c1\u6ce2\u53d1\u5c04\uff0c\u4e2d\u6027\u6c22\u572821\u5398\u7c73\u7684\u6ce2\u957f\u4e0a\u53d1\u5c04\u3002\u81ea\u90a3\u65f6\u4ee5\u6765\uff0c\u5b87\u5b99\u4e00\u76f4\u5728\u81a8\u80c0\uff0c\u5c06\u4fe1\u53f7\u5ef6\u4f38\u5230\u8fd12\u7c73\u3002\n\u83ab\u62c9\u83b1\u65af\u8bf4\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u5e94\u8be5\u5305\u542b\u5173\u4e8e\u9ed1\u6697\u65f6\u4ee3\u548c\u7ed3\u675f\u5b83\u7684\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002\n\u5f53\u5b87\u5b99\u53ea\u670910\u4ebf\u5c81\u7684\u65f6\u5019\uff0c\u6c22\u539f\u5b50\u5f00\u59cb\u805a\u96c6\u5e76\u5f62\u6210\u7b2c\u4e00\u6279\u6052\u661f\uff0c\u7ed3\u675f\u4e86\u9ed1\u6697\u65f6\u4ee3\u3002\u6765\u81ea\u7b2c\u4e00\u6279\u6052\u661f\u7684\u5149\u5f00\u542f\u4e86\u4e00\u4e2a\u65b0\u7eaa\u5143-\u518d\u7535\u79bb\u65f6\u4ee3-\u6765\u81ea\u8fd9\u4e9b\u6052\u661f\u7684\u80fd\u91cf\u5c06\u5927\u90e8\u5206\u4e2d\u6027\u6c22\u8f6c\u5316\u4e3a\u7535\u79bb\u7b49\u79bb\u5b50\u4f53\u3002\u76f4\u5230\u4eca\u5929\uff0c\u7b49\u79bb\u5b50\u4f53\u4ecd\u7136\u4e3b\u5bfc\u7740\u661f\u9645\u7a7a\u95f4\u3002\n\u83ab\u62c9\u83b1\u65af\u8bf4\uff0c\u518d\u7535\u79bb\u65f6\u4ee3\u548c\u4e4b\u524d\u7684\u9ed1\u6697\u65f6\u4ee3\u662f\u7406\u89e3\u6211\u4eec\u7684\u7279\u5f81\u7684\u5173\u952e\u65f6\u671f\uff0c\u6bd4\u5982\u4e3a\u4ec0\u4e48\u6211\u4eec\u6709\u4e00\u4e9b\u533a\u57df\u5145\u6ee1\u661f\u7cfb\uff0c\u800c\u53e6\u4e00\u4e9b\u533a\u57df\u76f8\u5bf9\u7a7a\u65f7\uff0c\u7269\u8d28\u7684\u5206\u5e03\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u6697\u7269\u8d28\u548c\u6697\u80fd\u91cf\u3002\nMurchison\u9635\u5217\u662f\u56e2\u961f\u7684\u4e3b\u8981\u5de5\u5177\u3002\u8fd9\u67b6\u5c04\u7535\u671b\u8fdc\u955c\u75314096\u4e2a\u5076\u6781\u5929\u7ebf\u7ec4\u6210\uff0c\u53ef\u4ee5\u6355\u6349\u5230\u50cf\u4e2d\u6027\u6c22\u7684\u7535\u78c1\u7279\u5f81\u8fd9\u6837\u7684\u4f4e\u9891\u4fe1\u53f7\u3002\n\u4f46\u662f\u8fd9\u4e9b\u4f4e\u9891\u4fe1\u53f7\u5f88\u96be\u63a2\u6d4b\u5230\uff0c\u56e0\u4e3a\u6765\u81ea\u5b87\u5b99\u4e2d\u5176\u4ed6\u6765\u6e90\u7684\u7535\u78c1\u566a\u58f0\uff0c\u5305\u62ec\u661f\u7cfb\u548c\u4eba\u7c7b\u6d3b\u52a8\u3002\u83ab\u62c9\u83b1\u65af\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u5df2\u7ecf\u5f00\u53d1\u51fa\u8d8a\u6765\u8d8a\u590d\u6742\u7684\u65b9\u6cd5\u6765\u8fc7\u6ee4\u8fd9\u79cd\u566a\u97f3\uff0c\u5e76\u4f7f\u5b83\u4eec\u66f4\u63a5\u8fd1\u90a3\u4e2a\u4fe1\u53f7\u30022019\u5e74\uff0c\u7814\u7a76\u4eba\u5458\u5ba3\u5e03\uff0c\u4ed6\u4eec\u5df2\u7ecf\u4ece\u8d85\u8fc721\u4e2a\u5c0f\u65f6\u7684Murchison Array\u6570\u636e\u4e2d\u8fc7\u6ee4\u51fa\u4e86\u7535\u78c1\u5e72\u6270-\u5305\u62ec\u6765\u81ea\u6211\u4eec\u81ea\u5df1\u7684\u65e0\u7ebf\u7535\u5e7f\u64ad\u7684\u7535\u78c1\u5e72\u6270\u3002\n\u5f80\u524d\u770b\uff0c\u8be5\u56e2\u961f\u6709\u5927\u7ea63000\u5c0f\u65f6\u7684\u5c04\u7535\u671b\u8fdc\u955c\u6536\u96c6\u7684\u989d\u5916\u6392\u653e\u6570\u636e\u3002\u7814\u7a76\u4eba\u5458\u6b63\u8bd5\u56fe\u8fc7\u6ee4\u6389\u5e72\u6270\uff0c\u5e76\u66f4\u63a5\u8fd1\u90a3\u4e2a\u96be\u4ee5\u6349\u6478\u7684\u4fe1\u53f7-\u4ee5\u53ca\u5b83\u53ef\u4ee5\u7167\u4eae\u7684\u9ed1\u6697\u65f6\u4ee3\u3002\u66f4\u591a\u4fe1\u606f\uff1aW.Li\u7b49\u4eba\u3002\u7b2c\u4e00\u5b63MWA\u7b2c\u4e8c\u9636\u6bb5\u7684\u518d\u7535\u79bb\u529f\u7387\u8c31\u7ed3\u679c\u5728\u7ea2\u79fb7\uff0c\u5929\u4f53\u7269\u7406\u6742\u5fd7(2019\u5e74)\u3002\u7f51\u5740\uff1a10.3847/15384357/ab55e4", "note_en": "Today, stars fill the night sky. But when the universe was in its infancy, it contained no stars at all. And an international team of scientists is closer than ever to detecting, measuring and studying a signal from this era that has been traveling through the cosmos ever since that starless era ended some 13 billion years ago.    That team\u2014led by researchers at the University of Washington, the University of Melbourne, Curtin University and Brown University\u2014reported last year in the  Astrophysical Journal that it had achieved an almost 10-fold improvement of radio emission data collected by the Murchison Widefield Array. Team members are currently scouring the data from this radio telescope in remote Western Australia for a telltale signal from this poorly understood &#34; &#34; of our universe.\n    &#34;We think the properties of the universe during this era had a major effect on the formation of the first stars and set in motion the structural features of the universe today,&#34; said team member Miguel Morales, a UW professor of physics. &#34;The way matter was distributed in the universe during that era likely shaped how galaxies and galactic clusters are distributed today.&#34;\n  Before this dark age, the universe was hot and dense. Electrons and photons regularly snared one another, making the universe opaque. But when the universe was less than a million years old, electron\u2013photon interactions became rare. The expanding universe became increasingly transparent and dark, beginning its dark age.\n   The starless era lasted hundreds of millions of years during which neutral   \u2014  with no overall charge\u2014dominated the cosmos.\n  &#34;For this dark age, of course there&#39;s no light-based signal we can study to learn about it\u2014there was no visible light!&#34; said Morales. &#34;But there is a specific signal we can look for. It comes from all that neutral hydrogen. We&#39;ve never measured this signal, but we know it&#39;s out there. And it&#39;s difficult to detect because in the 13 billion years since that signal was emanated, our universe has become a very busy place, filled with other activity from stars, galaxies and even our technology that drown out the signal from the neutral hydrogen.&#34;\n    The 13 billion-year-old signal that Morales and his team are after is electromagnetic radio emission that the neutral hydrogen emanated at a wavelength of 21 centimeters. The universe has expanded since that time, stretching the signal out to nearly 2 meters.\n  That signal should harbor information about the dark age and the events that ended it, Morales said.\n  When the universe was just 1 billion years old, hydrogen atoms began to aggregate and form the first stars, bringing an end to the dark age. The light from those first stars kicked off a new era\u2014the Epoch of Reionization\u2014in which energy from those stars converted much of the neutral hydrogen into an ionized plasma. That plasma dominates interstellar space to this day.\n   &#34;The Epoch of Reionization and the dark age preceding it are critical periods for understanding features of our  , such as why we have some regions filled with galaxies and others relatively empty, the distribution of matter and potentially even dark matter and dark energy,&#34; said Morales.\n  The Murchison Array is the team&#39;s primary tool. This radio telescope consists of 4,096 dipole antennas, which can pick up low-frequency signals like the electromagnetic signature of neutral hydrogen.\n  But those sorts of low-frequency signals are difficult to detect due to electromagnetic &#34;noise&#34; from other sources bouncing around the cosmos, including galaxies,   and human activity. Morales and his colleagues have developed increasingly sophisticated methods to filter out this noise and bring them closer to that signal. In 2019, the researchers announced that they had filtered out electromagnetic interference\u2014including from our own radio broadcasts\u2014from more than 21 hours of Murchison Array data.\n  Moving forward, the team has about 3,000 hours of additional emission data collected by the radio telescope. The researchers are trying to filter out interference and get even closer to that elusive signal from  \u2014and the dark age it can illuminate.        More information:\t\t\t\t\t\t\t\t\t\t\t\tW. Li et al. First Season MWA Phase II Epoch of Reionization Power Spectrum Results at Redshift 7,  The Astrophysical Journal (2019).  DOI: 10.3847/1538-4357/ab55e4", "posttime": "2020-06-14 06:46:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b87\u5b99,year,\u4fe1\u53f7", "title": "\u6765\u81ea\u5b87\u5b99\u201c\u9ed1\u6697\u65f6\u4ee3\u201d\u7ec8\u7ed3\u7684120\u4ebf\u5e74\u524d\u7684\u4fe1\u53f7", "title_en": "12 Billion-year-old signal from the end of the universe's 'dark age'", "transed": 1, "url": "https://phys.org/news/2020-06-scientists-billion-year-old-universe-dark-age.html", "via": "", "real_tags": ["\u5b87\u5b99", "year", "\u4fe1\u53f7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006467, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u91cc\u662f\u6240\u6709\u53ef\u4e0eULX3S FPGA ESP32\u677f\u914d\u5408\u4f7f\u7528\u7684\u793e\u533a\u9879\u76ee\u7684\u53d1\u6e90\u5730\u3002\n\u9ad8\u7ea7\u793a\u4f8bEmard\u7684ADC\u3001DVI\u3001JTAG\u3001OLED\u3001ov7670\u3001PS2\u3001SDRAM\u3001SPI RAM\u3001USB\u7b49\u3002\nf32c\u53ef\u91cd\u5b9a\u5411\u7684\u6807\u91cf\u6d41\u6c34\u7ebf32\u4f4d\u5904\u7406\u5668\u5185\u6838\uff0c\u53ef\u6267\u884cRISC-V\u6216MIPS\u7684\u5b50\u96c6\u3002\nFM\u8df3\u86a4\u6536\u97f3\u673a\u8c03\u9891\u6536\u97f3\u673aFPGA\u4e0e\u7b80\u5355\u7684RLC\u7f51\u7edc\u548c\u6a21\u62df\u6bd4\u8f83\u5668(\u7247\u4e0a\u63d0\u4f9b\uff0c\u4e0d\u9700\u8981ADC)\u3002\n\u7528\u4e8e\u57fa\u4e8eFPGA\u768432\u4f4dMIPS\u548cRISC-V\u8f6fCPU\u5185\u6838(F32c)\u7684FPGArduino Arduino\u5185\u6838\u6269\u5c55\u3002\u53e6\u8bf7\u53c2\u9605FPGArduino\u6e90\u4ee3\u7801\u3001\u6b64\u63cf\u8ff0\u3001\u6b64\u89c6\u9891\u548c\u6b64\u89c6\u9891\u3002\nJupiter Ace Ulx3S\u7684Jupiter Ace\u7248\u672c\uff0c\u4f7f\u7528PS/2\u952e\u76d8\uff0c\u5177\u6709HDMI\u8f93\u51fa\u3002\n\u5e26\u6709VexRiscv CPU\u7684Litex Linux Linux\uff0c\u8fd9\u662f\u4e00\u6b3e\u652f\u6301Linux\u768432\u4f4dRISC-V CPU\uff0c\u7528Spinal HDL\u7f16\u5199\u3002\nMicropython-ESP32 Emard\u516c\u53f8\u7684Micropython\u5728ESP32\u4e0a\u8fd0\u884c\uff1bLattice ECP5 FPGA JTAG\u7684JTAG\u7f16\u7a0b\u4e0e\u5237\u65b0\u3002\n\u5965\u5fb7\u4fee\u65af\u7814\u8ba8\u4f1a-\u53c2\u52a0\u5728\u8428\u683c\u52d2\u5e03\u4e3e\u884c\u7684Radiona\u6d3b\u52a8\u4e2d\u4f7f\u7528ULX3S\u7684FPGA\u5965\u5fb7\u4fee\u65af\u7814\u8ba8\u4f1a\u7684\u6750\u6599\u3002\nOrao Emard\u662fGrant Seale\u5728FPGA\u4e0a\u4eff\u771fCompukit UK101\u7684\u6770\u4f5c\u3002\n\u83f2\u5c3c\u514b\u65af\u62f1\u5eca\u57c3\u9a6c\u5fb7\u7684\u83f2\u5c3c\u514b\u65af(AMSTAR)FPGA-DAR-2016(\u4ec5\u4f9b\u6559\u80b2\u4f7f\u7528)\u3002\nRDS\u8c03\u5236\u5668\u7528\u4e8eFPGA\u7684RDS\u8c03\u5236\u5668\u6b64\u4ee3\u7801\u968fFM\u53d1\u5c04\u673a\u4e00\u8d77\u63d0\u4f9b\u3002\u4e0d\u9700\u8981\u5916\u90e8\u7ec4\u4ef6\u3002\nST7789\u663e\u793a\u5668\u4e0a\u7684SlabBoy\u6e38\u620f\u7537\u5b69\uff0c\u5b83\u8fd8\u4e0d\u80fd\u8fd0\u884cGameBoy\u6e38\u620f\uff0c\u4f46\u53ef\u4ee5\u8fd0\u884c\u7b80\u5355\u7684\u6c47\u7f16\u7a0b\u5e8f\u793a\u4f8b\u3002\nALI Express\u7684ST7789\u663e\u793a\u5668\u6162\u901fMicroPython\u9a71\u52a8\u7a0b\u5e8f\uff0c\u7528\u4e8e\u4e0d\u5e26CS\u5f15\u811a\u7684240x240 ST7789\u663e\u793a\u5668\u3002\nTI-99A\u4ece\u672a\u53d1\u5e03TI-99/4A\u7cfb\u5217\u4e2d\u7684\u5bb6\u7528\u8ba1\u7b97\u673a\uff0c\u5728ULX3S FPGA\u677f\u4e0a\u5b9e\u73b0\u3002\u53e6\u89c1TI99/2\u3002\nTic Tac Toe\u8fd9\u662f\u201cTic Tac Toe\u201d(\u96f6\u548c\u5341\u5b57)\u5728Verilog\u4e2d\u7684\u5b9e\u73b0\u3002\u7528\u6237\u4e0eFPGA\u5bf9\u6218\u3002\n\u5f00\u6e90FPGA\u8fd0\u52a8\u4e2d\u7684\u8c01\u4ebaHackaday\u5706\u684c\u4f1a\u8bae\u8ba8\u8bba2019\u5e74\u7684\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48", "note_en": "This is the home of all the awesome repos and forks of community projects that can be used with the ULX3S FPGA ESP32 board.\n     Advanced Examples emard\u2019s ADC, DVI, JTAG, OLED, ov7670, PS2, SDRAM, SPI RAM, USB and more.\n                    f32c retargetable, scalar, pipelined, 32-bit processor core which can execute subsets of either RISC-V or MIPS\n  FM Flea Radio FM radio receiver for FPGA with simple RLC network and analog comparator (available on-chip, no ADC required).\n  FPGArduino Arduino core extensions for FPGA-based 32-bit MIPS and RISC-V soft CPU cores (f32c). See also  FPGArduino source,  this description,  this video and  this video\n        Jupiter Ace A version of the Jupiter Ace for the Ulx3s using a PS/2 keyboard, and with HDMI output.\n    LiteX Linux Linux with VexRiscv CPU, a 32-bits Linux Capable RISC-V CPU written in Spinal HDL\n      Micropython - ESP32 emard\u2019s micropython running on ESP32; JTAG programming and flashing of Lattice ECP5 FPGA JTAG\n        Odysseus Workshop - material for participation at FPGA Odysseus with ULX3S Workshop at Radiona event in Zagreb\n  Orao emard\u2019s fork of  Grant Seale\u2019s great work for emulation of Compukit UK101 on FPGA\n      Phoenix Arcade emard\u2019s Phoenix (Amstar) FPGA - DAR - 2016 (Educational use only)\n    RDS Modulator RDS modulator for FPGA; This code comes complete with FM transmitter. No external components are needed.\n    Slabboy gameboy on an ST7789 display, which can\u2019t yet run Gameboy games, but can run simple assembler examples\n      ST7789 display slow MicroPython driver for 240x240 ST7789 display without CS pin from Ali Express\n  TI-99 A never released home computer in the TI-99/4A family, implemented on the ULX3S fpga board. See also  TI99/2\n  Tic tac toe This is an implementation of \u201cTic Tac Toe\u201d (noughts and crosses) in Verilog. The user plays against the FPGA\n            Hackaday round table of who\u2019s-who in the Open Source FPGA movement discusses what\u2019s next in 2019", "posttime": "2020-06-14 06:29:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,fpga,runs", "title": "Hackable 150\u7f8e\u5143FPGA\u5728RISC-V\u53ca\u66f4\u591a\u5e73\u53f0\u4e0a\u8fd0\u884cLinux", "title_en": "Hackable 150$ FPGA runs Linux on RISC-V & more", "transed": 1, "url": "https://ulx3s.github.io/", "via": "", "real_tags": ["linux", "fpga", "runs"]}, {"category": "", "categoryclass": "", "imagename": "7e7fecb78bdb0957db227b29529a32cd.png", "infoid": 1006466, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f39\u6027\u5806\u6808(\u4e5f\u79f0\u4e3aELK)\u53ef\u4ee5\u4e3a\u60a8\u7684\u751f\u4ea7\u670d\u52a1\u5e26\u6765\u5f88\u591a\u4ef7\u503c\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u7684\u670d\u52a1\u4e2d\u4e0d\u4f7f\u7528\u7ed3\u6784\u5316\u65e5\u5fd7\uff0c\u90a3\u4e48\u5b83\u5c31\u6ca1\u6709\u592a\u5927\u7684\u4ef7\u503c\u3002\n\u5728\u6211\u6700\u8fd1\u7684\u4e00\u7bc7\u5e16\u5b50\u4e2d\uff0c\u6211\u5199\u5230\u4e86\u9e8b\u9e7f\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u4f60\u5e94\u8be5\u5173\u5fc3\u5b83\u3002\u6211\u8fd8\u5199\u4e86\u4e00\u7bc7\u5173\u4e8e\u5982\u4f55\u5c06elk\u4e0e\u4f60\u7684Go\u5e94\u7528\u7a0b\u5e8f\u96c6\u6210\u7684\u6559\u7a0b\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u5e26\u60a8\u4e86\u89e3\u5982\u4f55\u5c06\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u96c6\u6210\u5230Go\u670d\u52a1\u4e2d\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5177\u6709\u51e0\u4e2a\u57fa\u672c\u7aef\u70b9\u7684\u793a\u4f8bHTTP\u670d\u52a1\uff0c\u5e76\u5c06\u4f7f\u7528zap\u5e93\u53d1\u51fa\u9519\u8bef/\u6210\u529f\u65e5\u5fd7\uff0c\u5176\u4e2d\u8fd8\u5c06\u5305\u62ec\u4e00\u4e9b\u7279\u5b9a\u4e8e\u57df\u7684\u4fe1\u606f\u3002\n\u76ee\u524d\uff0crepo\u6709\u4e00\u4e2amain.go\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5177\u6709\u4e09\u4e2a\u4e0d\u540c\u7aef\u70b9\u7684http\u5904\u7406\u7a0b\u5e8f\uff1a\n\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u5e76\u4e0d\u6267\u884c\u4efb\u4f55\u7279\u6b8a\u64cd\u4f5c\uff0c\u5b83\u4eec\u53ea\u662f\u5728\u88ab\u8c03\u7528\u65f6\u8fd4\u56de\u72b6\u6001OK\u3002\n\u76ee\u524d\uff0c\u5b83\u6240\u505a\u7684\u662f\u5c06\u6807\u51c6http.ResponseWriter\u5305\u88c5\u5230statusWriter\u4e2d\uff0c\u540e\u8005\u8bb0\u5f55\u8fd4\u56de\u7684http\u72b6\u6001\u4ee3\u7801\u3002\n\u9664\u4e86GO\u5e94\u7528\u7a0b\u5e8f\u4e4b\u5916\uff0c\u5728\u5206\u652f\u7684\u6839\u76ee\u5f55\u4e2d\u8fd8\u6709\u4e00\u4e2aGO-elk-Exercise-reqs.json\u6587\u4ef6\u3002\u5b83\u662f\u4e00\u7ec4\u5bfc\u51fa\u7684\u8bf7\u6c42\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u5bfc\u5165\u60a8\u9009\u62e9\u7684REST\u5ba2\u6237\u7aef\u3002\n\u6211\u7528\u7684\uff0c\u5e76\u63a8\u8350\u7684\uff0c\u662f\u5931\u7720\u75c7\u3002\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u8be5\u6587\u4ef6\uff0c\u53ea\u9700\u5c06\u8be5\u6587\u4ef6\u5bfc\u5165\u5230\u60a8\u7684\u5931\u7720\u5de5\u4f5c\u533a\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679c\u4e00\u5207\u90fd\u6210\u529f\u4e86\uff0c\u60a8\u5c06\u83b7\u5f97\u6240\u6709\u5fc5\u8981\u7684HTTP\u8bf7\u6c42\u5bfc\u5165\u5230\u60a8\u7684\u5de5\u4f5c\u533a\u4e2d\uff0c\u5e76\u4e14\u6240\u6709\u5fc5\u8981\u7684\u6570\u636e(\u4f8b\u5982\u6807\u5934)\u90fd\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u3002\n\u6216\u8005\uff0c\u5982\u679c\u5bfc\u5165\u4e0d\u9002\u7528\u4e8e\u60a8\u7684REST\u5ba2\u6237\u7aef\uff0c\u4e0b\u9762\u662f\u8bf7\u6c42\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u5b83\u4eec\uff1a\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u5728\u6210\u529f(\u72b6\u6001\u7801\u5c0f\u4e8e400)\u6216\u9519\u8bef(\u72b6\u6001\u7801\u5927\u4e8e\u6216\u7b49\u4e8e400)\u65f6\u53d1\u51fa\u7ed3\u6784\u5316\u65e5\u5fd7\u6765\u5b8c\u6210loggingMiddleware\u529f\u80fd\u3002\n\u5982\u679c\u6210\u529f\uff0c\u6211\u4eec\u5c06\u901a\u8fc7logger.Info\u5199\u201c\u5165\u7ad9\u8bf7\u6c42\u6210\u529f\u201d\u3002\n\u5982\u679c\u51fa\u73b0\u9519\u8bef\u7684\u72b6\u6001\u7801\uff0c\u6211\u4eec\u4f1a\u5728\u9ed8\u8ba4\u7684\u9519\u8bef\u952e\u4e2d\u5199\u5165\u201c\u5165\u7ad9\u8bf7\u6c42\u5931\u8d25\uff0c\u72b6\u6001\u4e3a[\u8fd4\u56de\u7684\u72b6\u6001\u7801]\u201d\uff0c\u9ed8\u8ba4\u7684\u9519\u8bef\u952e\u4e2d\u4f1a\u5199\u4e0b\u201cInbound Request Failed with Status[Returned Status code]\u201d\u3002\n\u4ee5\u4e0b\u662f\u6211\u4eec\u5c06\u5728\u6559\u7a0b\u7ed3\u675f\u65f6\u53d1\u51fa\u7684\u793a\u4f8b\u65e5\u5fd7\u884c\uff1a\n\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u5c06\u4e00\u6b65\u4e00\u6b65\u5730\u5411\u60a8\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u9010\u6b65\u4ecb\u7ecd\u5e94\u7528\u7a0b\u5e8f&&\u5b9e\u73b0\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u662f\u5982\u4f55\u5c06\u65e5\u5fd7\u4f5c\u4e3a\u4e2d\u95f4\u4ef6\u63d2\u5165\u7684\u3002\n\u8fd9\u4f7f\u5f97\u7f16\u5199\u57df\u7279\u5b9a\u903b\u8f91\u7684\u5f00\u53d1\u4eba\u5458\u4e0d\u77e5\u9053\u5982\u4f55\u8bb0\u5f55\u4ed6\u4eec\u7684HTTP\u8c03\u7528\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\n\u6b64\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8\u6211\u4eec\u5728\u6bcf\u4e2a\u8981\u68c0\u6d4b\u7684\u7aef\u70b9\u4e0a\u91cd\u7528\u65e5\u5fd7\u4e2d\u95f4\u4ef6\uff0c\u800c\u4e0d\u662f\u5c06\u4ee3\u7801\u590d\u5236\u7c98\u8d34\u5230\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u4e2d\u3002\n\u6700\u540e\uff0c\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6545\u610f\u4fdd\u6301\u7b80\u5355\u3002\u5728\u5b9e\u9645\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u6b64\u4e2d\u95f4\u4ef6\u4f5c\u4e3aFX\u6a21\u5757\u5305\u542b\u5728\u5185\uff0c\u4f5c\u4e3a\u6bcf\u4e2a\u5fae\u670d\u52a1\u7684\u57fa\u51c6FX\u6a21\u5757\u7684\u4e00\u90e8\u5206\u3002\n\u6211\u4eec\u5c06\u4ece\u7b80\u5355\u5730\u5bf9\u6bcf\u4e2a\u6210\u529f\u6216\u5931\u8d25\u7684http\u8c03\u7528\u53d1\u51fa\u65e5\u5fd7\u6d88\u606f\u5f00\u59cb\u3002\n\u5728\u540e\u9762\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e2a\u6570\u7ec4\u7528\u6211\u4eec\u60f3\u8981\u5728\u65e5\u5fd7\u4e2d\u53d1\u51fa\u7684\u7279\u5b9a\u952e\u586b\u5145\u5b83\u3002\n\u63a5\u4e0b\u6765\uff0c\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u4f7f\u7528logger.Info\u548clogger.Error\uff0c\u5e76\u663e\u793a\u5404\u81ea\u7684\u6210\u529f/\u9519\u8bef\u6d88\u606f\u3002\u8fd8\u5305\u62ec\u5f53\u524d\u4e3a\u7a7a\u4f46\u5c06\u5728\u4e0b\u4e00\u6b65\u4e2d\u586b\u5145\u7684\u6240\u6709\u65e5\u5fd7\u8bb0\u5f55\u5b57\u6bb5\u3002\n\u6211\u4eec\u8fd8\u5c06\u9519\u8bef\u6d88\u606f\u5c01\u88c5\u5728zap.Error\u5b57\u6bb5\u4e2d\u3002\u8fd9\u5c06\u5728\u5355\u72ec\u7684\u9519\u8bef\u5b57\u6bb5\u4e2d\u4f20\u64ad\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u4e14\u8fd8\u5c06\u5305\u62ec\u5806\u6808\u8ddf\u8e2a\u3002\n\u901a\u8fc7\u4f7f\u7528go run main.go\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u5e76\u4eceREST\u5ba2\u6237\u673a\u53d1\u9001http\u8bf7\u6c42\u6765\u6d4b\u8bd5\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002\n\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u4e0b\u9762\u662f\u60a8\u5e94\u8be5\u5728\u5c4f\u5e55\u4e0a\u770b\u5230\u7684\u793a\u4f8b\u65e5\u5fd7\u884c\uff1a\n\u8ba9\u6211\u4eec\u7ee7\u7eed\u6dfb\u52a0\u6211\u4eec\u9700\u8981\u7684\u5176\u4f59\u5bc6\u94a5\u3002\n\u8981\u5c06\u8c03\u7528\u7684\u7aef\u70b9\u548cHTTP\u65b9\u6cd5\u5305\u62ec\u5728\u7ed3\u6784\u5316\u65e5\u5fd7\u4e2d\uff0c\u60a8\u5fc5\u987b\u4ece*http.Request\u5bf9\u8c61\u4e2d\u83b7\u53d6\u5b83\u4eec\u3002\n\u6267\u884c\u4e0e\u4e0a\u4e00\u8282\u7c7b\u4f3c\u7684\u6d4b\u8bd5\uff0c\u5e76\u770b\u5230\u60a8\u7684\u65e5\u5fd7\u73b0\u5728\u5305\u62ec\u7aef\u70b9\u548chttp\u65b9\u6cd5\uff1a\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4ecehttp\u8bf7\u6c42\u4e2d\u63d0\u53d6\u5934\u90e8\uff0c\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u65e5\u5fd7\u4e2d\uff1a\n\u6dfb\u52a0\u6b64\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u53ef\u4ee5\u5728\u672c\u7ec3\u4e60\u5f00\u59cb\u65f6\u770b\u5230\u9884\u671f\u7684\u65e5\u5fd7\uff1a\n\u73b0\u5728\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u5f88\u597d\u5730\u638c\u63e1\u4e86\u4ec0\u4e48\u662f\u7ed3\u6784\u5316\u65e5\u5fd7\uff0c\u4ee5\u53ca\u5982\u4f55\u5728Go\u670d\u52a1\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\n\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u5229\u7528\u5b83\u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u6211\u5728\u8fd9\u7bc7\u6587\u7ae0\u5f00\u5934\u94fe\u63a5\u7684\u5176\u4ed6\u4e00\u4e9b\u6587\u7ae0\u3002", "note_en": "The  Elastic stack (also referred to as ELK) can bring a lot of value to your production services. But it is not that much of value if you don\u2019t use structured logs in your services.\n In  one of my latest posts, I wrote about what ELK is and why you should care. I also wrote a tutorial about  how to integrate ELK with your Go app.\n In this article, I will walk you through how to integrate structured logging in your Go services. We will use a sample HTTP service with a few basic endpoints and we\u2019ll use the  zap library to emit logs on error/success, which would also include some domain-specific info.\n    Currently, the repo has a  main.go file which has http handlers for three different endpoints:\n  The handlers themselves don\u2019t do anything special, they simply return a  status OK when invoked.\n  Currently, what it does is it wraps the standard  http.ResponseWriter into a  statusWriter, which records the returned http status code.\n   In addition to the Go application, you have a file  go-elk-exercise-reqs.json in the branch\u2019s root. It is an exported set of requests you can import in a REST client of your choice.\n The one I use, and recommend, is  Insomnia. If you want to use that one, simply import the file in your insomnia workspace like this:\n    If everything was successful, you\u2019ll get all necessary HTTP requests imported in you workspace with all necessary data already setup (e.g. headers).\n Alternatively, if the import doesn\u2019t work for your rest client, here is what the requests are, so that you can add them manually:\n        In this tutorial, we\u2019ll complete the loggingMiddleware function by emitting structured logs on success (status code is less than 400) or error (status code is greater than or equal to 400).\n   In case of a success, we\u2019ll write  \u201cInbound request succeeded\u201d via  logger.Info.\n In case of a bad status code, we\u2019ll write  \u201cInbound request failed with status [returned status code]\u201d via  logger.Error in the default  error key.\n Here is an example log line we\u2019ll emit by the end of the tutorial:\n In the following section, I will walk you through how to achieve this step by step.\n  In this section, we will go through the application &amp; implement structured logging step by step.\n A noteworthy thing to notice is how we are plugging in logging as a middleware.\n This makes the developers writing the domain-specific logic unaware of the implementation details of how their http invocations are logged.\n Additionally, it allows us to reuse the logging middleware on each endpoint we want instrumented, rather than copy-pasting the code in each handler.\n And finally, this application is kept simple on purpose. In a real application, you might want to include this middleware as a  Fx module which you include as part of your baseline Fx modules for each of your microservices.\n    We\u2019ll start by simply emitting log messages on each successful or failed http call.\n  We\u2019ll use this array in the later steps to populate it with the specific keys we want to emit in our logs.\n Next, use  logger.Info and  logger.Error in the appropriate spots with their respective success/error messages. Also include all logging fields which are currently empty, but will be filled in in the next steps.\n We also encapsulate the error message in a  zap.Error field. This will propagate the error message in a separate  error field and will also include the stack trace.\n Test that everything works correctly by running your application using  go run main.go and sending an http request from your rest client.\n If everything went well, here is a sample log line you should see on your screen:\n    Let\u2019s move on with adding the rest of the keys we\u2019ll need.\n  To include the invoked endpoint and the HTTP method in the structured logs, you will have to take them from the  *http.Request object.\n  Make a similar test as in the previous section and see that your logs now include the endpoint and http method:\n    Here, we extract the headers from the http request and add them to our logs:\n After you add this, we should be able to see the log as expected from the beginning of this exercise:\n   You should now have a good grasp of what structured logs are and how to use them in your Go services.\n If you want to learn more about how to leverage it, check out some of the other articles I\u2019ve linked at the beginning of the post.", "posttime": "2020-06-14 06:10:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ed3\u6784\u5316,structured,\u65e5\u5fd7", "title": "Go\u4e2d\u7684\u7ed3\u6784\u5316\u65e5\u5fd7", "title_en": "Structured Logs in Go", "transed": 1, "url": "https://pmihaylov.com/go-structured-logs/", "via": "", "real_tags": ["\u7ed3\u6784\u5316", "\u65e5\u5fd7"]}, {"category": "", "categoryclass": "", "imagename": "100bf375773e0b6b1ce19fbb04944f8c.png", "infoid": 1006465, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4e0d\u4f1a\u6fc0\u6012\u52a8\u7269\u6743\u5229\u6d3b\u52a8\u5bb6\uff0c\u800c\u53ea\u4f1a\u6210\u4e3a\u5496\u5561\u56e0\u6e38\u8bf4\u8005\u7684\u7a9d\u70b9\u3002", "note_en": "Instead of irritating animal-rights activists we&#39;ll just end up being shills for the caffeine lobby.", "posttime": "2020-06-14 05:54:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sexually,\u6743\u5229", "title": "\u907f\u514d\u4f7f\u7528\u5e26\u6027\u529f\u80fd\u7684\u5341\u516d\u8fdb\u5236\u5e38\u91cf", "title_en": "Avoid sexually charged hexadecimal constants", "transed": 1, "url": "https://github.com/riscv/riscv-asm-manual/commit/219a2b2ee359e6feaab69033f228c528e800b8bd", "via": "", "real_tags": ["sexually", "\u6743\u5229"]}, {"category": "", "categoryclass": "", "imagename": "a62291d4590d1fd0bee058f8a5f13899.png", "infoid": 1006464, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\uff1b\u4ee5\u524d\u7684\u7248\u672c\uff0c()\u3002\u8fd9\u662f\u4fee\u6539\u5386\u53f2\u63d0\u8981\u7684\u6458\u8981\uff0c\u4e0e\u6211\u7684\u6350\u8d60\u8005\u5728Patreon\u4e0a\u5e26\u7ed9\u60a8\u7684\u5185\u5bb9\u91cd\u53e0\u3002\n\u7531\u4e8e\u8fbe\u5230\u4e86TinyLetter5000\u8ba2\u9605\u8005\u7684\u9650\u5236\uff0c\u8fd9\u4efd\u65f6\u4e8b\u901a\u8baf\u672c\u6708\u8f6c\u79fb\u5230\u4e86Substack\u3002\u9664\u4e86\u5df2\u77e5\u7684\u957f\u5ea6\u622a\u65ad\u95ee\u9898\u5916\uff0c\u8bf7\u544a\u8bc9\u6211\u4efb\u4f55\u95ee\u9898\u3002(\u8bf7\u6ce8\u610f\uff0c\u5728\u684c\u9762\u4e0a\u9605\u8bfb\u7f51\u7ad9\u7248\u672c\u662f\u6ce8\u91ca\u7b49\u7684\u63a8\u8350\u65b9\u5f0f\u3002)\u3002\nOn\uff0cBrown\u7b49\u4eba2020\u5e74(\u6bd4\u8f83\uff1b\u968f\u673a\u6837\u672c\uff1b\u5e26\u771f\u5b9e\u4e16\u754c\u6f14\u793a\u7684\u201cOpenAI\u201d)\u3002\n\u5b66\u4f1a\u5b66\u4e60\u3002OA\u53d1\u5e03\u4e86\u4eba\u4eec\u671f\u5f85\u5df2\u4e45\u7684\u540e\u7eed\u4ea7\u54c1\uff0c\u4e00\u4e2a\u53ef\u4ee5\u7edf\u6cbb\u6240\u6709\u4eba\u7684\u6a21\u578b\uff1a117\u2715\u7684175B\u53c2\u6570\u6a21\u578b\uff0c\u5b83\u5177\u6709\u66f4\u5f3a\u5927\u7684\u8bed\u8a00\u751f\u6210\u529f\u80fd\uff0c\u4f7f\u5b83\u80fd\u591f\u89e3\u51b3\u4ece\u7b97\u672f\u5230\u82f1\u8bed\u7ffb\u8bd1\uff0c\u4ece\u89e3\u5b57\u8c1c\u5230\u7c7b\u6bd4\u7684\u5404\u79cd\u95ee\u9898-\u7eaf\u7cb9\u662f\u4ece\u6587\u672c\u793a\u4f8b\u7684\u63d0\u793a\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u4e13\u95e8\u7684\u57f9\u8bad\u6216\u5fae\u8c03\uff0c\u53ea\u662f\u5bf9\u5927\u578b\u4e92\u8054\u7f51\u6587\u672c\u8bed\u6599\u5e93\u7684\u4e0b\u4e00\u8bcd\u9884\u6d4b\u8bad\u7ec3\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7684\u6ce8\u610f\u529b\u673a\u5236\u8d77\u5230\u4e86\u901a\u8fc7\u8bad\u7ec3\u8db3\u591f\u591a\u6837\u7684\u6570\u636e1\u6765\u201c\u5b66\u4f1a\u5b66\u4e60\u201d\u7684\u4f5c\u7528\uff0c\u8feb\u4f7f\u5b83\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b66\u4e60\u666e\u901a\u7684\u6587\u672c\u5173\u7cfb\u3002\u5c31\u50cfOpenAI\u51e0\u5468\u524d\u5ba3\u5e03\u7684\u90a3\u6837\uff0c\u4f3c\u4e4e\u5df2\u7ecf\u6c89\u6ca1\u5f97\u51e0\u4e4e\u65e0\u5f71\u65e0\u8e2a\uff0c\u6240\u4ee5\u6211\u5c06\u6bd4\u5f80\u5e38\u66f4\u6df1\u5165\u3002\n\u201c\u653b\u51fb\u53ea\u4f1a\u53d8\u5f97\u66f4\u597d\u3002\u201d\u4e24\u5e74\u524d\uff0c\u6709\u8da3\u7684\u662f\uff0c\u5b83\u7684\u201c\u60c5\u611f\u795e\u7ecf\u5143\u201d\u662f\u6709\u7528\u7684\u9884\u8bad\u548c\u53ef\u7231\u7684\u30021\u5e74\u524d\uff0c\u51ed\u501f\u5176\u51fa\u8272\u7684\u6587\u672c\u751f\u6210\u548c\u5fae\u8c03\u80fd\u529b\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u4eca\u5e74\u662f\u53ef\u6015\u7684\u4e00\u5e74\uff0c\u56e0\u4e3a\u4e0e2\u76f8\u6bd4\uff0c\u5b83\u662f\u4e00\u4e2a\u5c0f\u800c\u6d45\u7684\u6a21\u578b\uff0c\u7b80\u5355\u7684\u7edf\u4e00\u4f53\u7cfb\u7ed3\u67843\u4ee5\u6700\u611a\u8822\u7684\u65b9\u5f0f(\u4e0b\u4e00\u4e2a\u6587\u672c\u4ee4\u724c\u7684\u5355\u5411\u9884\u6d4b)\u5728\u5355\u4e2a\u8d2b\u7a77\u7684\u6a21\u6001(\u968f\u673a\u4e92\u8054\u7f51\u6587\u672c\u8f6c\u50a84)\u4e0a\u5bf9\u5fae\u5c0f\u6570\u636e(\u9002\u5408\u7b14\u8bb0\u672c\u7535\u8111)\u8fdb\u884c\u8bad\u7ec3\uff0c\u7136\u800c\uff0c\u7b2c\u4e00\u4e2a\u7248\u672c\u5df2\u7ecf\u8868\u73b0\u51fa\u75af\u72c2\u7684\u8fd0\u884c\u65f6\u5143\u5b66\u4e60-\u800c\u4e14\u4f38\u7f29\u66f2\u7ebf\u4ecd\u7136\u4e0d\u5f2f\u66f2\uff01\u8fd9\u4e9b\u6837\u672c\u4e5f\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u8981\u597d\uff0c\u65e0\u8bba\u662f\u53d1\u660e\u65b0\u7684\u9634\u830e\u7b11\u8bdd\uff0c\u8fd8\u662f\u5199\u5173\u4e8e\u65cb\u8f6c\u9635\u5217\u7684\u6587\u7ae0(\u5927\u90e8\u5206\u90fd\u662f\u6709\u6548\u7684)\u3002\n\u4e0d\u662f\u5168\u90e8\uff0c\u800c\u662f\u5f88\u5927\u4e00\u90e8\u5206\u3002\u5b83\u662f\u5728\u6bcf\u9879\u4efb\u52a1\u4e0a\u90fd\u8bbe\u7f6e\u7684\u5417\uff1f\u4e0d\uff0c\u5f53\u7136\u4e0d\u662f\u3002\u4f46\u95ee\u9898\u4e0d\u662f\u6211\u4eec\u80fd\u5426\u5728\u6cd5\u5f8b\u4e0a\u627e\u5230\u4efb\u4f55\u53ef\u80fd\u4e0d\u8d77\u4f5c\u7528\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u3002\u800c\u4e14\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u66f4\u597d\u5730\u5de5\u4f5c(\u53c2\u89c1\u201c\u9650\u5236\u201d\u4e00\u8282\u4e2d\u7684\u51e0\u4e2a)\u3002\u6709\u6ca1\u6709\u50cf\u64cd\u7eb5\u673a\u5668\u4eba\u7ed5\u7740SF\u5411\u4eba\u7c7b\u53d1\u5c04\u6fc0\u5149\u548c\u706b\u7bad\u4e4b\u7c7b\u7684\u4e8b\u60c5\uff1f\u4e0d\uff0c\u5f53\u7136\u4e0d\u662f\u3002\u5b83\u201c\u4ec5\u4ec5\u201d\u662f\u4e00\u4e2a\u6587\u672c\u9884\u6d4b\u6a21\u578b\uff0c\u4e00\u4e2a\u611a\u8822\u7684\u6587\u672c\u4e13\u5bb6\uff1b\u4f46\u6211\u4eec\u5e94\u8be5\u8bb0\u4f4f\uff0c\u4e00\u4e2a\u611a\u8822\u7684\u4e13\u5bb6\u53ea\u662f\u4e00\u4e2a\u57fa\u56e0\u7a81\u53d8\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u8fdc\u79bb\u6b63\u5e38\u4eba\u7684\u5c0f\u8111\u635f\u4f24\u3002\u5982\u679cRL\u662f\u76d1\u7763\u5b66\u4e60\u9876\u90e8\u7684\u6a31\u6843\uff0c\u800c\u975e\u76d1\u7763\u5b66\u4e60\u662f\u65e0\u76d1\u7763\u5b66\u4e60\u86cb\u7cd5\u4e0a\u7684\u7cd6\u971c\uff0c\u90a3\u4e48\uff0c\u9762\u5305\u5e08\u4eec\u6b63\u5728\u53d8\u5f97\u76f8\u5f53\u4e0d\u9519\u3002\n\u7f29\u653e\u4ecd\u5728\u5de5\u4f5c\u3002\u6211\u5f88\u60ca\u8bb6\uff0c\u56e0\u4e3a\u6211\u9884\u8ba1\u66f4\u63a5\u8fd1100b\u7684\u53c2\u6570\uff0c\u6211\u8ba4\u4e3a/\u7684\u6027\u80fd\u8868\u660e\uff0c\u5c3d\u7ba1\u6709\u7f29\u653e\u8bba\u65876\uff0c\u4f46\u7f29\u653e\u66f2\u7ebf\u5df2\u7ecf\u5f00\u59cb\u5f2f\u66f2\uff0c\u5230100b\u65f6\uff0c\u53ef\u80fd\u5f88\u96be\u8bc1\u660e\u8fdb\u4e00\u6b65\u7f29\u653e\u662f\u5408\u7406\u7684\u3002\u7136\u800c\uff0c\u5728\u6bd4\u4f8b\u56e0\u5b50\u6ca1\u6709\u660e\u663e\u53d8\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u8fbe\u5230\u4e86\u8fd9\u4e2a\u6570\u5b57\u7684\u4e24\u500d\uff1a\u5b83\u7684\u6bd4\u4f8b\u4ecd\u7136\u5927\u81f4\u662f\u5bf9\u6570/\u5e42\u5f8b\uff0c\u5c31\u50cf\u9884\u6d4b\u7684\u90a3\u6837\uff0c\u89c4\u6a21\u5c0f\u5f97\u591a\u7684\u6a21\u578b\u4e5f\u6ca1\u6709\u8fbe\u5230\u8fd9\u6837\u7684\u6c34\u5e73\uff0c\u5373\u6536\u76ca\u5b9e\u9645\u4e0a\u505c\u6b62\u589e\u957f\uff0c\u6216\u8005\u5f00\u59cb\u9700\u8981\u5927\u5e45\u63d0\u9ad8\uff0c\u8fdc\u8fdc\u8d85\u51fa\u4e86\u53ef\u884c\u6027\u3002\u8fd9\u8868\u660e\uff0c\u91c7\u7528\u6570\u4e07\u4ebf\u4e2a\u53c2\u6570\u662f\u53ef\u80fd\u7684\uff0c\u4e5f\u662f\u6709\u7528\u7684(\u8fd9\u4e9b\u53c2\u6570\u4ecd\u5728\u53ef\u7528\u8ba1\u7b97\u548c\u5b89\u57f9\u9884\u7b97\u4e4b\u5185\uff0c\u53ea\u9700\u8981\u6570\u5343\u4e2a\u6807\u666e\u9884\u7b97\uff0c\u6216\u8bb8\u9700\u89811000\u4e07\u81f31\u4ebf\u7f8e\u5143\u9884\u7b97\uff0c\u5047\u8bbe\u4e0d\u4f1a\u6709\u4efb\u4f55\u6539\u5584\uff0c\u53c2\u89c1\u672c\u671f\u7684Hernandez&amp\uff1bBrown 2020\u7b49)\uff0c\u518d\u770b\u770b\u56fe\u8868\uff0c\u8bb8\u591a\u57fa\u51c6(\u6bd4\u5982)\u5c06\u4e0b\u964d10\u4e2a\u53c2\u6570\u3002\n\u201c\u6839\u636e\u201d\u8fc8\u5411\u672a\u6765\u201c\u7684\u58ee\u89c2\u8868\u73b0\u63a8\u65ad\uff0c\u751f\u547d\u3001\u5b87\u5b99\u548c\u4e07\u7269\u7684\u7b54\u6848\u4ec5\u4ec5\u662f4.398\u4e07\u4ebf\u4e2a\u53c2\u6570\u3002\u201d\n\u6211\u4eec\u4e0d\u77e5\u9053\u5982\u4f55\u8bad\u7ec3NN\u3002\u6b63\u5982\u6211\u4e00\u76f4\u8bf4\u7684\u90a3\u6837\uff0c\u201cNN\u662f\u61d2\u60f0\u7684\u201d\uff0c\u5f53\u6211\u4eec\u63a8\u52a8\u4ed6\u4eec\u8d85\u8d8a\u7b80\u5355\u7684\u7b54\u6848&\u5ec9\u4ef7\u7684\u6377\u5f84\u65f6\uff0c\u4ed6\u4eec\u80fd\u505a\u7684\u6bd4\u6211\u4eec\u8ba9\u4ed6\u4eec\u505a\u7684\u8981\u591a\u5f97\u591a\u3002\u8d8a\u786c\u8d8a\u5927\uff0c\u8d8a\u597d\u3002(\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u63d0\u5230\u534a\u76d1\u7763\u5b66\u4e60\u7684\u6700\u65b0\u8fdb\u5c55&\u57fa\u4e8e\u6a21\u578b\u7684\u590d\u5174\u3002)\u3002\n\u89c4\u6a21\u7684\u597d\u5904\uff1a\u7a33\u5b9a\u6027\uff0c\u2192\uff0c\u6cdb\u5316\uff0c\u2192\uff0c\u5143\u5b66\u4e60\u3002\u867d\u7136DL\u53d7\u5230\u5176\u8bad\u7ec3\u548c\u6570\u636e\u7684\u963b\u788d\uff0c\u4f46DL\u5374\u4eab\u53d7\u7740\u4e00\u79cd\u4e0d\u5408\u7406\u6709\u6548\u7684\u7ef4\u5ea6\u52a0\u6301--\u4ec5\u4ec5\u5728\u5927\u91cf\u6570\u636e\u4e0a\u7b80\u5355\u5730\u8bad\u7ec3\u4e00\u4e2a\u5927\u578b\u6a21\u578b\u5c31\u80fd\u4ea7\u751f\u66f4\u597d\u7684\u7279\u6027\uff0c\u6bd4\u5982\u5143\u5b66\u4e60\uff0c\u800c\u4e0d\u9700\u8981\u5728\u67b6\u6784\u4e2d\u5efa\u7acb\u54ea\u6015\u662f\u4e00\u4e01\u70b9\u7684\u4e1c\u897f\uff1b\u603b\u7684\u6765\u8bf4\uff0c\u5728\u66f4\u591a\u66f4\u96be\u7684\u4efb\u52a1\u4e0a\u8fdb\u884c\u8bad\u7ec3\u4f1a\u521b\u9020\u51fa\u66f4\u63a5\u8fd1\u4eba\u7c7b\u7684\u6027\u80fd\u3001\u901a\u7528\u6027\u548c\u5065\u58ee\u6027\u3002OA5\u4e0d\u4ec5\u53ef\u4ee5\u6269\u5c55\u5230\u6570\u767e\u4e07\u4e2a\u5c0f\u6279\u91cf\uff0c\u800c\u4e14\u53ef\u4ee5\u7a33\u5b9a\u5728\u6570\u767e\u4e07\u4e2a\u5c0f\u6279\u91cf\u3002OA5-Like\u5728\u5927\u89c4\u6a21\u56fe\u50cf\u6570\u636e\u96c6(\u5982&amp\uff1b\u53d7\u76ca\u4e8e\u5f02\u5e38\u5927\u7684\u5c0f\u6279\u91cf)\u65f6\u7a33\u5b9a\uff0c\u800c\u5206\u7c7b\u5668(\u5982Transfer&amp\uff1bRobutify)\u5177\u6709\u7c7b\u4f3c\u4eba\u7c7b\u7684\u9519\u8bef7\uff0c\u591a\u6a21\u6001\u5b66\u4e60\u5728\u8f83\u5c11\u7684\u6570\u636e(\u4f8b\u5982\uff0c\u6fc0\u52b1)\u4e0a\u4ea7\u751f\u66f4\u597d\u7684\u8868\u793a\uff0c\u800cS\u53ef\u4ee5\u3002\u8fbe\u5230\u4eba\u7684\u6c34\u5e73\uff0c\u4e0e\u6570\u767e\u540d\u7ade\u4e89\u7684\u81ea\u6211\u53c2\u4e0e\u8005\u4e00\u8d77\u8986\u76d6\u53ef\u80fd\u7684\u7b56\u7565\u3002\u6a21\u4eff\u5b66\u4e60\u559c\u6b22\u6982\u62ec\u5728\u51e0\u767e\u4e2a\u4efb\u52a1\u4e0a\uff0c\u8bad\u7ec3\u51fa\u4e00\u5f20\u6df1\u539a\u7684\u7f51\u3002\u5f53W\u5d4c\u5165\u8db3\u591f\u6df1\u65f6\uff0c\u6216\u8005\u5728//\u6709\u8db3\u591f\u7684\u6837\u672c\u4ee5\u5f3a\u5236\u56e0\u5f0f\u5206\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u89e3\u7f20\u51fa\u73b0\u3002\u5728\u6570\u767e\u4e07\u4e2a\u57df\u968f\u673a\u7684\u8bad\u7ec3\u4e2d\uff0c\u8bf1\u5bfc\u4e86\u7c7b\u4f3c\u7684\u9690\u5f0f\u5143\u5b66\u4e60\uff0c\u5728\u6bcf\u4e2a\u8fd0\u884c\u65f6\u8c03\u7528\u671f\u95f4\uff0c\u63a2\u6d4b\u5176\u73af\u5883\u5e76\u5c06\u5176\u5bf9\u673a\u5668\u4eba\u624b\u63a7\u5236\u7684\u7406\u89e3\u7f16\u7801\u5230\u5176\u9690\u85cf\u72b6\u6001\uff1b\u5e76\u4e14\u901a\u8fc72\u9636\u7f29\u653e\u6bd4\u4f20\u7edf\u7684\u673a\u5668\u4eba\u89c4\u5212\u5668\u6027\u80fd\u66f4\u597d\u3002\u6216\u8005\uff0c\u6570\u767e\u4e2a\u7ea7\u522b\u7684\u57f9\u8bad\u5355\u72ec\u57f9\u8bad\u7279\u5de5\uff0c\u4f46\u5728\u6570\u5343\u4e2a\u7ea7\u522b\uff0c\u4ed6\u4eec\u5f00\u59cb\u6982\u62ec\u5230\u770b\u4e0d\u89c1\u7684\u7ea7\u522b\u3002\u4ec5\u4ec5\u901a\u8fc7\u8bad\u7ec3\u4e00\u4e2a\u66f4\u5927\u7684\u6a21\u578b\u6765\u7814\u7a76\u66f4\u4e30\u5bcc\u7684\u4fe1\u53f7\uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u641c\u7d22\uff0c\u5c31\u8bc1\u660e\u4e86\u771f\u6b63\u7684\u8d85\u4eba\u4e0d\u4f1a\u4ea7\u751f\u201c\u9519\u89c9\u201d&\u800c\u4e14\uff0c\u5c31\u8fd9\u4e00\u70b9\u800c\u8a00\uff0c\u8fd8\u5c55\u793a\u4e86\uff0c\u4ec5\u4ec5\u662f\u7aef\u5230\u7aef\u5730\u8bad\u7ec3\uff0c\u6839\u636e\u8db3\u591f\u7684\u6570\u636e\u9884\u6d4b\u5956\u52b1\uff0c\u5c31\u8db3\u4ee5\u53d6\u4ee3AlphaZero\uff0c\u9690\u542b\u5730\u5b66\u4e60\u6811\u641c\u7d22(\u4f46\u66f4\u597d)\u3002\u4e0d\u80dc\u679a\u4e3e\u3002\n\u4f38\u7f29\u6027\u5047\u8bbe\u8ba4\u4e3a\uff0c\u4e00\u65e6\u6211\u4eec\u627e\u5230\u4e86\u50cf\u81ea\u6211\u5173\u6ce8\u6216\u5377\u79ef\u8fd9\u6837\u7684\u53ef\u6269\u5c55\u67b6\u6784\uff0c\u6211\u4eec\u53ea\u9700\u8bad\u7ec3\u8d8a\u6765\u8d8a\u5927\u7684NN\uff0c\u8d8a\u6765\u8d8a\u590d\u6742\u7684\u884c\u4e3a\u5c31\u4f1a\u81ea\u7136\u800c\u7136\u5730\u6210\u4e3a\u9488\u5bf9\u6240\u6709\u4efb\u52a1\u548c\u6570\u636e\u8fdb\u884c\u4f18\u5316\u7684\u6700\u7b80\u5355\u65b9\u5f0f\uff0c\u8fd9\u4e00\u5047\u8bbe\u770b\u8d77\u6765\u8d8a\u6765\u8d8a\u53ef\u4fe1\u3002\n\u4e00\u76f4\u5728\u8ffd\u8e2a\u30022020\u5e74\u662f\u56de\u987e\u8fc7\u53bb\u5341\u5e74\u7684\u6700\u597d\u65f6\u673a\u3002\u57282010\u5e74\uff0c\u4eba\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u628a\u4e16\u754c\u4e0a\u6240\u6709\u771f\u6b63\u76f8\u4fe1\u6df1\u5ea6\u5b66\u4e60\u7684\u4eba\u90fd\u5b89\u6392\u5230\u4e00\u4e2a\u4e2d\u7b49\u5927\u5c0f\u7684\u4f1a\u8bae\u5ba4\u91cc(\u5176\u4e2d3\u4e2a\u4eba\u6b63\u5728\u5fd9\u4e8e\u521b\u5efa\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u7a0d\u5fae\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e2e\u52a9)\u30022010\u5e74\uff0c\u5bf9\u673a\u5668\u5b66\u4e60\u611f\u5174\u8da3\u7684\u4eba\u53ef\u80fd\u5df2\u7ecf\u8bfb\u5230\u4e86\u4e00\u4e9b\u5173\u4e8e\u4f7f\u7528\u5168\u90e8100-200\u4e07\u4e2a\u53c2\u6570\u8bc6\u522b\u624b\u5199\u6570\u5b57\u7684\u5185\u5bb9\uff0c\u6216\u8005\u5bf9\u6807\u51c6\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\u8bed\u97f3\u8bc6\u522b\u8fdb\u884c\u4e86\u4e00\u4e9b\u9002\u5ea6\u7684\u795e\u7ecf\u8c03\u6574\u3002\u57282010\u5e74\uff0c\u8c01\u4f1a\u9884\u6d4b\uff0c\u5728\u63a5\u4e0b\u6765\u768410\u5e74\u91cc\uff0c\u6df1\u5ea6\u5b66\u4e60\u5c06\u7ecf\u5386\u5bd2\u6b66\u7eaa\u7684\u7206\u70b8\uff0c\u5bfc\u81f4\u6574\u4e2a\u673a\u5668\u5b66\u4e60\u4e2d\u66ff\u4ee3\u65b9\u6cd5\u7684\u5927\u89c4\u6a21\u706d\u7edd\uff0c\u6a21\u578b\u5c06\u6269\u5c55\u52301.75\u4ebf\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e9b\u5de8\u5927\u7684\u6a21\u578b\u5c06\u81ea\u53d1\u5730\u53d1\u5c55\u6240\u6709\u8fd9\u4e9b\u80fd\u529b\uff0c\u9664\u4e86\u5c11\u6570\u88ab\u4eba\u5de5\u667a\u80fd\u793e\u533a\u5176\u4ed6\u4eba(\u522b\u7ba1\u4e16\u754c)\u8ba4\u4e3a\u662f\u6545\u610f\u6b3a\u9a97\u7684\u8001\u6d3e\u72c2\u70ed\u5206\u5b50\u4e4b\u5916\u7684\u5c11\u6570\u987d\u56fa\u8fde\u63a5\u4e3b\u4e49\u8005\uff0c\u5982Schmidhuber\uff0cSutskever\uff0cLegg\uff0c&Amp\uff1bAmot\uff1b\n\u540e\u89c1\u4e4b\u660e\u662f20/20\u3002\u5373\u4f7f\u57282015\u5e74\uff0c\u6269\u5c55\u5047\u8bf4\u4f3c\u4e4e\u4e5f\u975e\u5e38\u503c\u5f97\u6000\u7591\uff1a\u6bd5\u7adf\uff0c\u4f60\u9700\u8981\u4e00\u4e9b\u4e1c\u897f\u6765\u8fdb\u884c\u6269\u5c55\uff0c\u800c\u4e14\u6211\u4eec\u5f88\u5bb9\u6613\u770b\u5230\u73b0\u6709\u7cfb\u7edf\u4e2d\u7684\u7f3a\u9677\uff0c\u7136\u540e\u60f3\u8c61\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u6d88\u5931\uff0c\u8fdb\u5c55\u4f1a\u5728\u73b0\u5728\u4efb\u4f55\u4e00\u4e2a\u6708\u3001\u5f88\u5feb\u5c31\u4f1a\u51fa\u73b0\u3002\u5c31\u50cf\u57fa\u56e0\u7ec4\u5b66\u9769\u547d\u4e00\u6837\uff0c\u51e0\u4f4d\u6709\u8fdc\u89c1\u7684\u9884\u8a00\u5bb6\u63a8\u65ad\uff0c\u80da\u80ce\u6240\u9700\u7684\u57fa\u56e0\u5c06\u5448\u6307\u6570\u7ea7\u589e\u957f&\u5f88\u5feb\u5c31\u4f1a\u4ea7\u751f\u5f3a\u5927\u7684\u57fa\u56e0\uff0c\u800c\u6e05\u9192\u7684\u4e13\u5bb6\u5219\u5bf9\u201c\u7f3a\u5931\u7684\u9057\u4f20\u6027\u201d\u7ede\u5c3d\u8111\u6c41&\u5632\u7b11\u8fd9\u6837\u7684n\u8981\u6c42\u5982\u4f55\u88ab\u8bc1\u660e\u662f\u4e00\u4e2a\u5931\u8d25\u7684\u8303\u5f0f\u3002\u672a\u6765\u4e00\u5f00\u59cb\u662f\u7f13\u6162\u7684\uff0c\u7136\u540e\u5f88\u5feb\u5c31\u4f1a\u5230\u6765\u3002\u7136\u800c\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\uff1a\u6240\u6709\u7684\u8363\u8a89\u5c5e\u4e8e\u72c2\u70ed\u8005\uff0c\u803b\u8fb1\u548c\u803b\u8fb1\u5c5e\u4e8e\u6279\u8bc4\u8005\uff018\u5982\u679c\u6709\u4eba\u80fd\u56de\u523010\u5e74\u524d\uff0c\u751a\u81f35\u5e74\u524d\uff0c\u770b\u7740\u6bcf\u4e00\u4f4d\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u4eba\u5458\u8bfb\u5230\u8fd9\u7bc7\u8bba\u6587\u2026\u90fd\u4f1a\u5934\u6655\u76ee\u7729\u5c31\u597d\u4e86\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u73b0\u5728\u4f3c\u4e4e\u6ca1\u6709\u51e0\u4e2a\u4eba\u5934\u8111\u53d1\u70ed\uff0c\u56e0\u4e3a\u4eba\u7c7b\u4e8b\u540e\u8bf8\u845b\u4eae\u7684\u80fd\u529b\u662f\u65e0\u7a77\u65e0\u5c3d\u7684(\u201c\u6211\u53ef\u4ee5\u901a\u8fc7\u5fae\u8c03\u5f97\u5230\u90a3\u4e48\u591a\uff0c\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u6211\u4e00\u76f4\u90fd\u9884\u6d4b\u5230\u4e86\uff0c\u591a\u4e48\u65e0\u804a\u201d)\u3002(\u5982\u679c\u60a8\u4ecd\u7136\u786e\u5b9a\u5728\u672a\u6765\u51e0\u5341\u5e74\u5185\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u53ef\u80fd\u6027\u51e0\u4e4e\u4e3a\u96f6\uff0c\u4e3a\u4ec0\u4e48\uff1f\u4f60\u6709\u6ca1\u6709--\u4e66\u9762\u9884\u6d4b--\u50cf\u8fd9\u6837\u7684\u80fd\u529b\uff1f\u8fd9\u662f\u4f60\u8ba4\u4e3a\u4eba\u5de5\u667a\u80fd\u5931\u8d25\u5728\u672a\u6765\u51e0\u5341\u5e74\u7684\u6837\u5b50\u5417\uff1f\u4ec0\u4e48\u5177\u4f53\u7684\u4efb\u52a1\uff0c\u4ec0\u4e48\u5177\u4f53\u7684\u6570\u5b57\uff0c\u4f1a\u8ba9\u4f60\u4fe1\u670d\u5462\uff1f\u4e16\u754c\u770b\u8d77\u6765\u4f1a\u6709\u4ec0\u4e48\u4e0d\u540c\n\uff0cHernandez&amp\uff1bBrown 2020(/\uff1b\u7b2c\u4e00\u4e2a\u539f\u578b\u4ece\u6765\u4e0d\u662f\u6700\u597d\u7684\u539f\u578b\uff0c\u4f46\u5982\u679c\u6709\u8db3\u591f\u7684\u8ba1\u7b97\u65f6\u95f4\uff0c\u60a8\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6539\u8fdb\uff0c\u5e76\u5f04\u6e05\u695a\u5e94\u8be5\u5982\u4f55\u4ece\u5934\u5230\u5c3e\u5b8c\u6210\u5b83\uff0c\u672c\u6587\u91cf\u5316\u4e86\u81ea2012\u5e74\u4ee5\u6765\u7684\u795e\u7ecf\u7f51\u7edc\u786c\u4ef6\u8fc7\u5269\uff1a\u201c\u73b0\u5728\u8bad\u7ec3\u2715\u9700\u8981\u7684\u8ba1\u7b97\u51cf\u5c11\u4e8644\u2026\u3002\u8fbe\u5230AlexNet\u7684\u6c34\u5e73\u201c\u3002\u4e0d\u8db3\u4e3a\u5947(\u5982in)\uff1b\u53c2\u9605/\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u5982\u4f55\u8bad\u7ec3\u6b63\u786e\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u5e76\u7528\u6700\u7b80\u5355\u7684\u4e8b\u60c5\u72af\u4e0b\u5de8\u5927\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u80fd\u529b\u4f1a\u50cfResnet\u6216EfficientNet\u4e00\u6837\u8df3\u8dc3\uff0c\u6216\u8005\u5076\u5c14\u63d0\u9192\u6211\u4eec\u3002)\u3002\n\uff0cSvyatkovski\u7b49\u4eba2020\u5e74(\u4e0d\u6e05\u695a\u662f\u5426\u5e94\u7528\uff1b\u53e6\u8bf7\u53c2\u9605\u5c11\u6570\u4ee3\u7801\u5b8c\u6210\u529f\u80fd)\u3002\n(\uff1b\u4e00\u4e2a\u6a21\u578b\uff0c7\u4e2a\u6570\u636e\u96c6\uff0c8900\u4e07\u5f20\u56fe\u50cf\uff0c83\u4e2a\u635f\u5931/\u4efb\u52a1\uff0c\u5168\u7403\u641c\u7d22\u8d28\u91cf\u63d0\u5347+8%)\u3002\n()\uff1b(\u4e00\u4e2a\u7b80\u5355\u4f46\u9ad8\u8d28\u91cf\u7684\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0a\u627e\u5230\uff1b\u6709\u8da3\u7684\u662f\uff0c\u7531\u4e8e\u6cd5\u5f8b\u4e0a\u7684\u6a21\u7cca\u6027&amp\uff1b\u4e00\u4e9b\u827a\u672f\u5bb6\u5982\u4f55\u8868\u73b0\u5f97\u50cf\u52a8\u7269\u4e00\u6837\uff0c\u5486\u54ee\u7740\u201c\u5077\u7a83\u201d&amp\uff1b\u514d\u8d39\u7684Fursonas\u662f\u4e00\u53ea\u7a7f\u7740\u7f8a\u76ae\u7684\u72fc\uff0c\u6270\u4e71\u4e86\u4ed6\u4eec\u7684\u5544\u98df\u987a\u5e8f9-\u5c3d\u7ba1\u521b\u4f5c\u8005\u5df2\u7ecf\u667a\u80dc\u4e86\u7eb8\u8001\u864e\u7684\u5a01\u80c1\uff0c\u4f46\u8fd9\u4e9b\u4ee4\u4eba\u4e0d\u5feb\u7684\u95ee\u9898\u5c06\u56f0\u6270ML\uff0c\u56e0\u4e3aDL\u6a21\u7279\u50cf\u5154\u5b50\u4e00\u6837\u7e41\u6b96)\u3002\n\uff0cSommers&Amp\uff1bBohns 2019(\u4eba\u4eec\u4e0d\u5584\u4e8e\u9884\u6d4b\u5bf9\u8b66\u65b9\u8981\u6c42\u7684\u62b5\u5236\uff1b\u53e6\u89c1)\u3002\n\uff0cHedrick 2017 10(\u201c\u2026\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5343\u5e74\u91cc\uff0c\u6211\u4eec\u4eba\u7c7b\u4e00\u76f4\u662f\u5730\u7403\u4e0a\u60a3\u75c5\u6700\u4e25\u91cd\u7684\u7269\u79cd\u201c\uff1b\u8ddf\u8fdb)\u3002\n\uff0cDANES&A\uff1bWidom 2020(\u5fc3\u7406\u5b66\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u662f\u6709\u610f\u4e49\u7684\uff0c\u9664\u975e\u4ece\u4e2a\u4f53\u5dee\u5f02\u7684\u89d2\u5ea6\u6765\u770b)\u3002\n\uff0cCurran&amp\uff1bHauser 2019(\u201c\u8725\u8734\u4eba\u6052\u5b9a\u201d\u54cd\u5e94\u8005\u5982\u4f55\u8bc1\u660e\u8fd9\u4e00\u70b9\uff1f\u6216\u8005\uff0c\u201c\u81ea\u7531\u56de\u5e94\u662f\u9b54\u9b3c\u201d)\n\uff0cBigelow\u7b49\u4eba2014(\u4e3a\u4ec0\u4e48\u6570\u636e\u53ef\u89c6\u5316\u5982\u6b64\u7cdf\u7cd5-\u8868\u9762\u4e0a\u5f88\u6f02\u4eae\uff0c\u4f46\u5374\u5177\u6709\u8bef\u5bfc\u6027\u6216\u65e0\u7528\uff1f\u56e0\u4e3a\u8bb8\u591a\u8bbe\u8ba1\u5e08\u4e0d\u770b\u6570\u636e\uff0c\u6240\u4ee5\u907f\u514d\u81ea\u52a8\u624b\u52a8\u521b\u5efa\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u6f02\u4eae\u7684\u5f62\u72b6/\u989c\u8272&amp\uff1b\u559c\u6b22\u6446\u5f04\u6570\u636e\uff0c\u800c\u5ffd\u7565\u4e86\u8bfb\u8005)\u3002\nYanet al 2020(\u201c\u91c7\u7528\u5e7f\u544a\u62e6\u622a\u5668\u7684\u7528\u6237\u968f\u540e\u6d88\u8d39\u5bf9\u5e94\u4e8e10%\u591a\u4e2a\u7c7b\u522b\u768420%\u4ee5\u4e0a\u7684\u65b0\u95fb\u6587\u7ae0\u3002\u8fd9\u79cd\u5f71\u54cd\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u6301\u7eed\u5b58\u5728\u2026\u201c\u3002\uff1b\u8bf7\u53c2\u9605)\u3002\n(\u4f9b\u9700\u60c5\u51b5\uff1a\u5982\u679c\u5141\u8bb8\u6da8\u4ef7\uff0c\u53e3\u7f69\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u5f88\u5bb9\u6613\u5236\u9020&\u51fa\u552e\u5e76\u4e0d\u8fdd\u6cd5)\u3002\n(\u5f17\u5170\u514b\u00b7\u5e03\u62c9\u8428(Frank Bourassa)\u5982\u4f55\u6b3a\u9a97\u4e00\u5bb6\u745e\u58eb\u78e8\u574a\u5411\u4ed6\u51fa\u552e\u72ec\u4e00\u65e0\u4e8c\u7684\u4e9a\u9ebb\u7eb8\uff0c\u4e3aPerfect&amp\uff1b\u521b\u9020\u4e863.1725\u4ebf\u7f8e\u5143\u76842.012\u4ebf\u7f8e\u5143\uff0c\u57fa\u672c\u4e0a\u900d\u9065\u6cd5\u5916)\u3002\n\u201cun Jour joueur\u201d(\u4e4c\u9e26\u7684Jig\uff1bune semaine chez les\u00c9carlates{2018})[\u53e4\u5178]\u3002\n\u201cBons et Mauvais jours\u201d(Raven\u2018s Jig\uff1bune semaine chez les\u00c9carlates{2018})[\u53e4\u5178]\u3002\n\u201c\u5df4\u5c14\u8482\u9a6c\u5c14\u7684\u65e9\u6668\u201d(Mane in Green\uff1bII.The Journey[\u8ff7\u5931\u84dd\u5b9d\u77f3\u7684\u63a2\u7d22-EP\u30022]{2017})[\u5668\u4e50\u6447\u6eda]\u3002\n\u201c\u98ce\u66b4\u6765\u4e86[\u5355\u4e00\u76ee\u7684\u7684\u56de\u5fc6]\u201d(UnDreamedPanic\u58ee\u4e3e\u3002Metajoker\uff1bIgnite{2020})[\u5ca9\u77f3]\n\u201c\u6765\u5427\uff0c\u751c\u871c\u7684\u6b7b\u795e[Komm\uff0cS\u00fcsser Tod]\u201d(\u666e\u62c9\u8482\u5a1c\u7235\u58eb\u58ee\u4e3e\u3002Niklas Gabrielsson\uff1b\u52a8\u753b\u6807\u51c6\u7b2c6\u5377{2019})[\u7235\u58eb\u4e50]\u3002\n(\u73b0\u5728)\u8ba1\u7b97\u6210\u672c\u51e0\u4e4e\u4e0d\u4f1a\u8d85\u8fc7\u51e0\u767e\u4e07\u7f8e\u5143\uff0c\u800c\u4e14\u8fd0\u884c\u6210\u672c\u4e5f\u5f88\u4f4e(\u7b2c39\u9875\uff1a\u201c\u5373\u4f7f\u6709\u5b8c\u6574\u7684175B\uff0c\u4ece\u4e00\u4e2a\u8bad\u7ec3\u6709\u7d20\u7684\u6a21\u578b\u751f\u6210100\u9875\u5185\u5bb9\u7684\u6210\u672c\u5927\u7ea6\u662f0.4\u5343\u74e6\u65f6\uff0c\u6216\u8005\u53ea\u9700\u8981\u51e0\u7f8e\u5206\u7684\u80fd\u6e90\u6210\u672c\u3002\u201d)\uff0c\u800c(\u5426\u5219\u65e0\u7528\u7684)\u6df1\u84dd\u4eba\u5de5\u667a\u80fd\u9879\u76ee\u636e\u8bf4\u8981\u82b1\u8d39&GT\uff1b\u6700\u540e\u4e00\u6b21\u8fed\u4ee3\u76841051.97\u4ebf\u7f8e\u5143(1.91\u4ebf\u7f8e\u5143\u7684\u62a5\u544a\u4f3c\u4e4e\u4e0e\u8bb8\u5b97\u8861\u7684\u300a\u6df1\u84dd\u80cc\u540e\u300b(Pg187)\u4e2d\u63d0\u5230\u7684\u5ba3\u4f20\u9884\u4f30\u4ef7\u503c\u76f8\u6df7\u6dc6)\uff0c\u4ee5\u53ca\u50cfBlow&GT\uff1b5000\u2715\u8fd9\u6837\u7684\u5927\u79d1\u5b66\u9879\u76ee\u7684\u8d44\u91d1\u5927\u591a\u5931\u8d25\u4e86\u3002\u51e0\u5341\u5e74\u524d\uff0c\u7528\u5168\u7403\u8ba1\u7b97\u8d44\u6e90\u548c\u79d1\u5b66\u9884\u7b97\u5c31\u53ef\u4ee5\u505a\u5230\uff1b\u800c\u4eca\u5929\u7684\u786c\u4ef6\u548c\u9884\u7b97\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u77e5\u9053\u6216\u4e0d\u60f3\u505a\uff0c\u53c8\u80fd\u505a\u4ec0\u4e48\u5462\uff1f\u5b58\u5728\u786c\u4ef6\u60ac\u7f6e\u3002(\u53e6\u8bf7\u53c2\u9605\u5168\u8111\u4eff\u771f\u8def\u7ebf\u56fe&amp\uff1b)\u21a9\ufe0e\u3002\n\u4f8b\u5982\uff0c\u4e0d\u4f7f\u7528\u6216\u795e\u7ecf\u4f53\u7cfb\u7ed3\u6784\u641c\u7d22\u6765\u5c1d\u8bd5\u5b9a\u5236\u6a21\u578b\uff0c\u751a\u81f3\u4e0d\u51b3\u5b9a\u57fa\u672c\u7684\u8d85\u53c2\u6570\uff0c\u5982\u5bbd\u5ea6(\u5982\u56fe\u6240\u793a\uff0c\u5373\u4f7f\u5728\u201c\u6613\u4e8e\u7406\u89e3\u548c\u624b\u5de5\u4f18\u5316\u7684\u9999\u8349\u4f53\u7cfb\u7ed3\u6784\u201d\u4e2d\uff0c\u8fd9\u4e5f\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u4e0d\u540c)\u3002\u21a9\ufe0e\u3002\n\u751a\u81f3\u6ca1\u6709-\u6240\u4ee5\u6ca1\u6709\u8c37\u6b4c\u56fe\u4e66\uff0c\u6ca1\u6709Arxiv\uff0c\u6ca1\u6709\u5229\u666e\u6839\uff0c\u6ca1\u6709Sci-Hub\u2026\u3002\u21a9\ufe0e\u3002\n\u201c\u4e00\u4e2a\u7537\u4eba\u5728\u533b\u751f\u7684\u529e\u516c\u5ba4\uff0c\u533b\u751f\u544a\u8bc9\u4ed6\uff0c\u201d\u6211\u6709\u4e00\u4e9b\u597d\u6d88\u606f\u548c\u4e00\u4e9b\u574f\u6d88\u606f\u8981\u544a\u8bc9\u4f60\u3002\u201c/\u90a3\u4e2a\u4eba\u8bf4\uff0c\u201d\u55ef\uff0c\u6211\u73b0\u5728\u4e0d\u80fd\u63a5\u53d7\u8fd9\u4e2a\u574f\u6d88\u606f\uff0c\u6240\u4ee5\u5148\u544a\u8bc9\u6211\u8fd9\u4e2a\u597d\u6d88\u606f\u3002\u201c/\u533b\u751f\u8bf4\uff0c\u201d\u597d\u6d88\u606f\u662f\u4f60\u6709\u4e00\u4e2a18\u82f1\u5bf8\u7684\u9634\u830e\u3002\u201c/\u8fd9\u4e2a\u4eba\u770b\u8d77\u6765\u5446\u4e86\u4e00\u4f1a\u513f\uff0c\u7136\u540e\u95ee\uff0c\u201d\u574f\u6d88\u606f\u662f\u4ec0\u4e48\uff1f\u201c/\u533b\u751f\u8bf4\uff0c\u201d\u55ef\uff0c\u597d\u6d88\u606f\u662f\u4f60\u6709\u4e00\u4e2a18\u82f1\u5bf8\u7684\u9634\u830e\u3002\u201c/\u8fd9\u4e2a\u7537\u4eba\u770b\u8d77\u6765\u5446\u4e86\u4e00\u4f1a\u513f\uff0c\u7136\u540e\u95ee\uff0c\u201d\u574f\u6d88\u606f\u662f\u4ec0\u4e48\uff1f\u201c/\u533b\u751f\u8bf4\uff0c\u201d\u55ef\uff0c\u597d\u6d88\u606f\u662f\u4f60\u7684\u9634\u830e\u670918\u82f1\u5bf8\u3002\u201c\u3002\u201c\u4f60\u7684\u8111\u5b50\u5728\u4f60\u90a3\u8bdd\u513f\u91cc\u3002\u201d\u201c\u21a9\ufe0e\u201d\n\u5177\u4f53\u5730\u8bf4\uff1a\u3001\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u5927\u578b\u6a21\u578b\u7684\u8ffd\u6c42\u51e0\u4e4e\u5b8c\u5168\u662f\u7531OpenAI&amp\uff1b\u884c\u4e1a\u5b9e\u4f53\u63a8\u52a8\u7684(\u540e\u8005\u6ee1\u8db3\u4e8e\u5c0f\u5f97\u591a\u7684\u6a21\u578b)\uff0c\u5b66\u672f\u754c\u8868\u73b0\u51fa\u4e86\u51e0\u4e4e\u5b8c\u5168\u7684\u538c\u6076(\u751a\u81f3\u662f\u538c\u6076)\u3002\u5c3d\u7ba1\u6240\u6709\u7684\u6bd4\u4f8b\u5047\u8bbe\u662f\u201c\u663e\u800c\u6613\u89c1\u7684\u201d\uff0c\u6bd4\u4f8b\u662f\u201c\u9884\u6d4b\u7684\u201d\uff0c\u4f46\u4eba\u4eec\u5bf9\u5b9e\u9645\u64cd\u4f5c\u7684\u5174\u8da3\u5374\u975e\u5e38\u5c0f\u3002\u4e5f\u8bb8\u6211\u4eec\u5e94\u8be5\u66f4\u591a\u5730\u5173\u6ce8\u4eba\u4eec\u505a\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u8bf4\u4ec0\u4e48\u3002\u21a9\ufe0e\u3002\n\u56fe\u50cf\u7f29\u653e\u5b9e\u9a8c\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u65b9\u9762\u662f\uff0c\u5373\u4f7f\u5728\u539f\u59cb\u4efb\u52a1\u7684\u6027\u80fd\u201c\u6301\u5e73\u201d\u4e8e\u63a5\u8fd1\u6807\u7b7e\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0c\u8fc1\u79fb\u5b66\u4e60\u4ecd\u5728\u7ee7\u7eed\u6539\u5584\u3002\u663e\u7136\uff0c\u5185\u90e8\u8868\u793a\uff0c\u5373\u4f7f\u4ec5\u7528\u4e8e\u5206\u7c7b\uff0c\u56e0\u6b64\u5206\u6570\u4e0d\u80fd\u589e\u52a0\u8d85\u8fc7\u4e00\u4e2a\u5c0f\u7684\u767e\u5206\u6bd4\uff0c\u4e5f\u4f1a\u53d8\u5f97\u66f4\u50cf\u4eba\u7c7b\u7684\u7f16\u7801\uff1f\u6211\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u8bed\u8a00\u6a21\u578b\uff0c\u635f\u5931\u7684\u6700\u540e\u4e00\u90e8\u5206\u4f3c\u4e4e\u5bf9\u751f\u6210\u7684\u6837\u672c\u8d28\u91cf\u6709\u5f88\u5927\u5f71\u54cd\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u53ea\u6709\u5728\u5b8c\u6210\u4e86\u6240\u6709\u66f4\u7b80\u5355\u7684\u5efa\u6a21\u4e4b\u540e\uff0c\u61d2\u60f0\u7684\u8bed\u8a00\u6a21\u578b\u624d\u88ab\u8feb\u901a\u8fc7\u66f4\u6b63\u786e\u5730\u5efa\u6a21\u66f4\u590d\u6742\u7684\u4e1c\u897f(\u5982\u903b\u8f91\u3001\u5bf9\u8c61\u3001\u4e16\u754c\u77e5\u8bc6\u7b49)\u6765\u6324\u51fa\u4e0b\u4e00\u6b65\u7684\u6027\u80fd\u3002\u21a9\ufe0e\u3002\n\u73b0\u5728\uff0c\u8fd9\u79cd\u53ef\u80fd\u6027\u5f88\u5c0f\uff0c\u800c\u4e14\u5df2\u7ecf\u5f00\u59cb\u8ba9\u52a0\u91cc\u00b7\u9a6c\u5e93\u65af(Gary Marcus)\u7b49\u4eba\u5bf9WinoGrande\u611f\u5230\u6709\u70b9\u7d27\u5f20\uff0c\u4ed6\u4eec\u5df2\u7ecf\u5f00\u59cb\u601d\u8003\u4e3a\u4ec0\u4e48Winograd\u6a21\u5f0f\u662f\u5e38\u8bc6\u63a8\u7406/\u667a\u80fd\u7684\u826f\u597d\u8861\u91cf\u6807\u51c6(\u56e0\u4e3a\u667a\u80fd\uff0c\u5f53\u7136\uff0c\u662f\u4efb\u4f55\u4eba\u5de5\u667a\u80fd\u8fd8\u4e0d\u80fd\u505a\u7684\u4e8b\u60c5)\u3002\u21a9\ufe0e\n\u522b\u62c5\u5fc3\uff1a\u6211\u4eec\u5df2\u7ecf\u6709\u7a7a\u5934--\u505a\u7a7a\u548c\u505a\u7a7a\u8033\u6735--\u6765\u5bf9\u51b2\u5f17\u7d22\u7eb3\u901a\u80c0\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5efa\u8bae\u572890\u5e74\u4ee3\u7684\u5f62\u8c61\u5b8f\u89c2\u57fa\u91d1\u4e2d\u6301\u6709\u5927\u91cf\u5934\u5bf8\uff0c\u4ee5\u4fbf\u4ece\u8f6c\u5411\u4f18\u8d28\u548c\u7f8a\u7fa4\u7684\u8fc7\u7a0b\u4e2d\u53d7\u76ca\uff1a\u8fd9\u5c06\u662f\u4e00\u4e2a\u53e4\u602a\u503a\u5238\u7684\u718a\u5e02-\u8fd9\u5e76\u4e0d\u662f\u725b\u5e02\u3002\u21a9\ufe0e\u3002\n\uff0cSabin&amp\uff1bBoulger 1973(\u5728\u7334\u5b50\u548c\u7334\u5b50\u7ec4\u7ec7\u4e2d\u7a7f\u884c\u6570\u5341\u6b21)\u3002\n\u21a9\ufe0e", "note_en": "This is the   edition of  ; previous,   ( ). This is a summary of the revision-history   feed, overlapping with my   &amp;  ; brought to you by my donors on  Patreon.\n The newsletter moved this month to  Substack due to reaching the TinyLetter 5000-subscriber limit. Please let me know of any issues beyond the known issue of length truncation. (Note that reading the website version on desktop is the recommended way for annotations etc.)\n On  , Brown et al 2020 ( , compare  ;  random samples;  \u201cOpenAI  \u201d with real-world demos)\n Learning to learn. OA releases the long-awaited followup to  , one model to rule them all: a 117\u2715 larger 175b-parameter model with far more powerful language generation, which lets it solve a wide variety of problems from arithmetic to English translation to unscrambling anagrams to   analogies\u2014purely from being prompted with text examples, without any specialized training or finetuning whatsoever, merely next-word prediction training on a big Internet text corpus. This implies  \u2019s attention mechanisms serve as   that have \u201clearned to learn\u201d by training on sufficiently varied data  1, forcing it to do more than just learn ordinary textual relationships. Like OpenAI\u2019s   just weeks ago, the announcement of   appears to have sunk almost without a trace, so I will go into more depth than usual.\n \u201cAttacks only get better.\u201d 2 years ago,   was interestingly useful pretraining and adorable with its \u201csentiment neuron\u201d. 1 year ago,   was impressive with its excellent text generation &amp; finetuning capabilities. This year,   is scary because it\u2019s a small &amp; shallow model compared to what\u2019s possible  2, with a simple uniform architecture  3 trained in the dumbest way possible (unidirectional prediction of next text token) on a single impoverished modality (random Internet   text dumps  4) on tiny data (fits on a laptop), and yet, the first version already manifests crazy runtime meta-learning\u2014and the scaling curves  still are not bending! The samples are also better than ever, whether it\u2019s   inventing new penis jokes  5 or writing (mostly working)   about rotating arrays.\n Not the whole picture, but a big part. Does it set   on every task? No, of course not. But the question is not whether we can lawyerly find any way in which it might not work, but  . And there are many ways it might work better (see the  \u201cLimitations\u201d section for just a few). Does    do anything like steer a robot around SF shooting lasers and rockets at humans? No, of course not. It is \u2018just\u2019 a text prediction model, an idiot savant of text; but an idiot savant, we should remember, is only a genetic mutation or bit of brain damage away from a normal human. If RL is the cherry on the top of the supervised learning, and unsupervised learning is the frosting on top of the unsupervised learning cake, well, the bakers are getting pretty good.\n Scaling still working. I was surprised, as I had expected closer to 100b parameters, and I thought that the performance of  / / / / /  suggested that, the scaling papers  6 notwithstanding, the scaling curves had started to bend and by 100b, it might be hard to justify further scaling. However,   hits twice that without noticeable change in scaling factors: its scaling continues to be roughly logarithmic/power-law, as it was for much smaller models &amp; as forecast, and it has not hit a regime where gains effectively halt or start to require increases vastly beyond feasibility. That suggests that it would be both possible and useful to head to trillions of parameters (which are still well within available compute &amp; budgets, requiring merely thousands of  s &amp; perhaps $10\u2013$100m budgets assuming no improvements which of course there will be, see Hernandez &amp; Brown 2020 etc in this issue), and eyeballing the graphs, many benchmarks like the     would fall by 10t parameters.\n \u201cExtrapolating the spectacular performance of   into the future suggests that the answer to life, the universe and everything is just 4.398 trillion parameters.\u201d\n We don\u2019t know how to train NNs. As I keep saying, \u201cNNs are lazy\u201d and can do far more than we make them do when we push them beyond easy answers &amp; cheap shortcuts. The   is the harder and bigger, the better. (Besides  , one could mention recent progress in semi-supervised learning &amp; the model-based   renaissance.)\n Blessings of scale: stability\u2192generalization\u2192meta-learning.   is hamstrung by its training &amp; data, but DL enjoys an unreasonably effective blessing of dimensionality\u2014just simply training a  big model on a  lot of data induces better properties like meta-learning without even the slightest bit of that architecture being built in; and in general, training on more and harder tasks creates ever more human-like performance, generalization, and robustness.  OA5 does not just scale to, but stabilizes at, minibatches of millions due to  . OA5-like,   stabilizes at large-scale image datasets like   &amp; benefits from unusually large minibatches, while classifier  s like   transfer &amp; robustify with human-like errors  7, multimodal learning produces better representations on less data (eg  / , motivating  ), and  s can  .   reaches human-level with hundreds of competing self-players to cover possible strategies. Imitation learning   like   generalizes at hundreds of tasks to train a deep net. Disentanglement emerges in   with sufficiently deep  w embeddings, or in  / /  with enough samples to force factorization. Training   on millions of domain randomizations induced similar implicit meta-learning where during each runtime invocation, the   probes its environment and encodes its understanding of robot hand control into its hidden state; and   outperforms classical robot planners by scaling 2 orders. Or in  , training on hundreds of levels trains agents individually, but at thousands of levels, they begin to generalize to unseen levels.   demonstrated truly superhuman Go without \u2018delusions\u2019 just by training a bigger model on a richer signal &amp; pro-level play without any search\u2014and  , for that matter, demonstrated that just training an   end-to-end to predict a reward on enough data is enough to obsolete even AlphaZero and learn tree search implicitly (but better). And on and on.\n The  scaling hypothesis that, once we find a scalable architecture like self-attention or convolutions, we can simply train ever larger NNs and ever more sophisticated behavior will emerge naturally as the easiest way to optimize for all the tasks &amp; data, looks increasingly plausible.\n Keeping track.   in 2020 makes as good a point as any to take a look back on the past decade. In 2010, one could easily fit everyone in the world who genuinely believed in deep learning into a moderate-sized conference room (assisted slightly by the fact that 3 of them were busy founding  ). Someone interested in machine learning in 2010  might have read about some stuff in recognizing hand-written digits using all of 1\u20132 million parameters, or some modest neural tweaks to standard hidden Markov model voice-recognition. In 2010, who would have predicted that over the next 10 years, deep learning would undergo a Cambrian explosion causing a mass extinction of alternative approaches throughout machine learning, that models would scale up to 175,000 million parameters, and that these enormous models would just spontaneously develop all these capabilities, aside from a few diehard connectionists written off as willfully-deluded old-school fanatics by the rest of the AI community (never mind the world), such as  , Schmidhuber, Sutskever, Legg, &amp; Amodei?\n Hindsight is 20/20. Even in 2015, the scaling hypothesis seemed highly dubious: you needed something to scale, after all, and it was all too easy to look at flaws in existing systems and imagine that they would never go away and progress would sigmoid any month now, soon. Like the genomics revolution where a few far-sighted seers extrapolated that the necessary  n for  es would increase exponentially &amp; deliver powerful  es soon, while sober experts wrung their hands over \u201cmissing heritability\u201d &amp; the miraculous complexity of biology &amp; scoff about how such  n requirements proved   was a failed paradigm, the future arrived at first slowly and then quickly. Yet, here we are: all honor to the fanatics, and shame and humiliation to the critics!  8 If only one could go back 10 years, or even 5, to watch every AI researchers\u2019 head explode reading this paper\u2026 Unfortunately, few heads appear to be exploding now, because human capacity for hindsight &amp; excuses is boundless (\u201cI can get that much with finetuning, anyway I predicted it all along, how boring\u201d) and  . (If you are still  certain that there is near-zero probability of   in the next few decades, why? Did you predict\u2014in writing\u2014capabilities like  ? Is this how you expect AI failure to look in the decades beforehand? What specific task, what specific number, would convince you otherwise? How would the world look different than it does now if these crude prototype insect-brain-sized DL systems were not on a path to success?)\n Authority without accountability. What should we think about the experts? Projections of failure were made by eminent, respectable, serious people. They spoke in considered tones of why AI hype was excessive and might trigger an \u201cAI winter\u201d, and the fundamental flaws of fashionable approaches and why brute force could not work. These statements were made routinely in 2014, 2015, 2016\u2026 And they were wrong. I am aware of few issuing a  mea culpa or reflecting on it.\n Phatic, not predictive. There is, however, a certain tone of voice the bien pensant all speak in, whose sound is the same whether right or wrong; a tone shared with many statements in January to March of this year; a tone we can also find in a 1940  Scientific American article authoritatively titled,  , which advised the reader to not be concerned about it any longer \u201cand get sleep\u201d. (\u2018It\u2019 was the atomic bomb, about which certain scientists had stopped talking, raising public concerns; not only could it happen, the British bomb project had already begun, and 5 years later it did happen.)\n The iron law of bureaucracy: Cathedral gothic. This tone of voice is the voice of  . The voice of authority insists on calm, and people not \u201cpanicking\u201d (the chief of sins). The voice of authority assures you that it won\u2019t happen (because it can\u2019t happen). The voice utters simple arguments about why the status quo will prevail, and considers only how the wild new idea could fail (and not all the possible options). The voice is not, and does not deal in, uncertainty; things will either happen or they will not, and since it will not happen, there is no need to take any precautions (and you should not worry because it can\u2019t happen). The voice does not believe in drawing lines on graphs (it is rank numerology). The voice does not issue any numerical predictions (which could be falsified). The voice is opposed to unethical things like randomized experiments on volunteers (but will overlook the insult). The voice does not have a model of the future (because a model implies it does not already know the future). The voice is concerned about its public image (and unkind gossip about it by other speakers of the voice). The voice is always sober, respectable, and credentialed (the voice would be pleased to write an op-ed for your national magazine and/or newspaper). The voice speaks, and is not spoken to (you cannot ask the voice what objective fact would change its mind). The voice never changes its mind (until it does). The voice is never surprised by events in the world (only disappointed). The voice advises you to go back to sleep (right now).\n , Hernandez &amp; Brown 2020 ( / ; the first prototype is never the best one, but given enough compute &amp; time, you can refine it and figure out how it should have been done all along, and this paper quantifies the neural net hardware overhang just since 2012: \u201cit now takes 44\u2715 less compute to train\u2026to the level of AlexNet\u201d. Unsurprising\u2014eg the   in  :  ; see  / . We don\u2019t know how to train the right kind of neural nets and make huge mistakes with the simplest things, as capability jumps like resnets or EfficientNet or   occasionally remind us.)\n , Svyatkovskiy et al 2020 (unclear if application of  ; see also the   few-shot code completion abilities)\n ( ; one model, 7 datasets, 89m images, 83 losses/tasks, and +8% search quality boost worldwide)\n     ( );     (a simple but high-quality   of  , also available on  ; interesting for how   due to legal fuzziness &amp; some artists acting like animals, howling about \u2018theft\u2019 &amp; free fursonas being a wolf in sheep\u2019s clothing upsetting their pecking order  9\u2014though the creator has outfoxed the paper tiger threats, these kittlesome questions will dog ML as DL models multiply like rabbits)\n      , Sommers &amp; Bohns 2019 (people are bad at predicting resistance to police requests; see also  )\n  , Hedrick 2017  10 (\u201c\u2026for the past few thousand years, we human beings have been the most diseased species on earth\u201d; followup to  )\n   , Danese &amp; Widom 2020 (nothing in psychology makes sense except in the light of individual-differences)\n  , Curran &amp; Hauser 2019 (how do \u201clizardman constant\u201d responders justify it? Or, \u2018free response is the devil\u2019)\n  , Bigelow et al 2014 (why are data visualizations so bad\u2014superficially pretty but misleading or useless? Because many designers don\u2019t look at the data, avoid automation &amp; create manually so they can focus on pretty shapes/colors &amp; enjoying fiddling with it, and ignore readers)\n , Yan et al 2020 (\u201cUsers who adopt ad blockers subsequently consume 20% more news articles corresponding to 10% more categories. The effect persists over time\u2026\u201d; see  )\n  (supply and demand: masks can be easily made anywhere  if prices are allowed to rise &amp; they are not illegal to sell)\n (how Frank Bourassa tricked a Swiss mill into selling him the unique   linen-paper to create  $317            250   2012m in perfect   &amp; mostly got away with it)\n  \u201cUn Jour Joueur\u201d (Raven\u2019s Jig;  Une Semaine chez les \u00c9carlates {2018}) [classical]\n \u201cBons et mauvais Jours\u201d (Raven\u2019s Jig;  Une Semaine chez les \u00c9carlates {2018}) [classical]\n  \u201cMorning in Baltimare\u201d (Mane in Green;  II. The Journey [The Quest of the Lost Sapphire\u2014Ep. 2] {2017}) [instrumental rock]\n     \u201cThe Storm Is Coming   [Single Purpose Remix]\u201d (UndreamedPanic feat. Metajoker;  Ignite {2020}) [rock]\n  \u201cCome, Sweet Death [ Komm, s\u00fcsser Tod]\u201d (Platina Jazz feat. Niklas Gabrielsson;   Anime Standards Vol. 6 {2019}) [jazz]\n hardly costs more than a few million dollars of compute (now) and is cheap to run (pg39: \u201cEven with the full   175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or only a few cents in energy costs.\u201d), while  \u2019s (otherwise useless) Deep Blue AI project reputedly cost &gt; $10            5   1997m for the final iteration (reports of  $192            100   1997m appear to be a confusion with the estimated value of  publicity mentioned in pg187 of Hsu\u2019s  Behind Deep Blue) and Big Science projects like   blow &gt;5000\u2715 the funding to mostly fail.   could have been done decades ago with global computing resources &amp; scientific budgets; what could be done with today\u2019s hardware &amp; budgets that we just don\u2019t know or care to do? There  is a hardware overhang. (See also the   Whole Brain Emulation Roadmap &amp;  .) \u21a9\ufe0e\n Eg no use of   or neural architecture search to try to tailor the model, or even decide basic hyperparameters like widths (which as   shows, can make quite a different even in \u201cwell-understood and hand-optimized vanilla architectures\u201d). \u21a9\ufe0e\n Not even  s\u2014so no Google Books, no Arxiv, no Libgen, no Sci-Hub\u2026 \u21a9\ufe0e\n \u2018A man is at the doctor\u2019s office, and the doctor tells him, \u201cI\u2019ve got some good news and some bad news for you.\u201d / The man says, \u201cWell, I can\u2019t take the bad news right now, so give me the good news first.\u201d / The doctor says, \u201cWell, the good news is that you have an 18-inch penis.\u201d / The man looks stunned for a moment, and then asks, \u201cWhat\u2019s the bad news?\u201d / The doctor says, \u201cYour brain\u2019s in your dick.\u201d\u2019 \u21a9\ufe0e\n Specifically:  ,  ,  ,  ,  ,  ,  ,  . It is noteworthy that the pursuit of large models is driven almost exclusively by OpenAI &amp; industry entities (the latter of which are content with far smaller models), and that academia has evinced an almost total disinterest (disgust, even). For all that the scaling hypothesis is \u2018obvious\u2019 and scaling is \u2018predicted\u2019, there is remarkably little interest in actually  doing it. Perhaps we should pay more attention to what people do rather than what they say. \u21a9\ufe0e\n One interesting aspect of image scaling experiments is that even when performance is \u2018plateauing\u2019 on the original task &amp; approaching label error, the transfer learning continues to improve. Apparently the internal representations, even when adequate for mere classification and so the score cannot increase more than a small percentage, become more human-like\u2014encoding  ? I\u2019ve noticed with language models, the final fractions of a loss appear to make a substantial difference to generated sample quality, perhaps because it is only after all the easier modeling is finished that the lazy language model is forced to squeeze out the next bit of performance by more correctly modeling more sophisticated things like logic, objects, world-knowledge, etc. \u21a9\ufe0e\n Now that  \u2019s few-shot and   have begun to make people like Gary Marcus feel slightly nervous about WinoGrande, they have begun   for why Winograd schemas   good measures of commonsense reasoning/intelligence (because intelligence, of course, is whatever AI can\u2019t do yet). \u21a9\ufe0e\n Don\u2019t worry: we already have short-shorts &amp; ear-  to hedge against fursona inflation. That said, we advise taking a large position in equineties image macro funds to benefit from a flight to quality and herding: it\u2019ll be a bear market for kinky bonds\u2014and that\u2019s no bull. \u21a9\ufe0e\n , Sabin &amp; Boulger 1973 (making     by dozens of passages through monkeys &amp; monkey tissues)\n \u21a9\ufe0e", "posttime": "2020-06-14 05:53:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "gpt,reflections,\u5b66\u4e60", "title": "\u5173\u4e8eGPT-3\u8003\u8bd5\u7684\u51e0\u70b9\u601d\u8003", "title_en": "Reflections on GPT-3", "transed": 1, "url": "https://www.gwern.net/newsletter/2020/05#gpt-3", "via": "", "real_tags": ["gpt", "\u5b66\u4e60"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006462, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u4fee\u526a\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u53c2\u6570\u5df2\u7ecf\u4ea7\u751f\u4e86\u6d53\u539a\u7684\u5174\u8da3\uff0c\u56e0\u4e3a\u5728\u8bad\u7ec3\u548c\u9a8c\u8bc1\u671f\u95f4\u6f5c\u5728\u5730\u8282\u7701\u4e86\u65f6\u95f4\u3001\u5185\u5b58\u548c\u7cbe\u529b\u3002\u6700\u8fd1\u7684\u5de5\u4f5c\u5df2\u7ecf\u901a\u8fc7\u4e00\u7cfb\u5217\u6602\u8d35\u7684\u8bad\u7ec3\u548c\u4fee\u526a\u5468\u671f\u786e\u5b9a\u4e86\u5728\u521d\u59cb\u5316\u65f6\u4e2d\u5956\u5f69\u7968\u6216\u7a00\u758f\u96e8\u5b50\u7f51\u7edc\u7684\u5b58\u5728\u3002\u8fd9\u5c31\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u672c\u95ee\u9898\uff1a\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u65f6\u8bc6\u522b\u9ad8\u5ea6\u7a00\u758f\u7684\u53ef\u8bad\u7ec3\u5b50\u7f51\u7edc\uff0c\u800c\u4e0d\u9700\u8981\u7ecf\u8fc7\u8bad\u7ec3\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u67e5\u770b\u6570\u636e\uff1f\u6211\u4eec\u901a\u8fc7\u7406\u8bba\u9a71\u52a8\u7684\u7b97\u6cd5\u8bbe\u8ba1\u7ed9\u51fa\u4e86\u80af\u5b9a\u7684\u7b54\u6848\u3002\u6211\u4eec\u9996\u5148\u7528\u6570\u5b66\u516c\u5f0f\u548c\u5b9e\u9a8c\u9a8c\u8bc1\u4e86\u4e00\u4e2a\u5b88\u6052\u5b9a\u5f8b\uff0c\u5b83\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u73b0\u6709\u7684\u57fa\u4e8e\u68af\u5ea6\u7684\u526a\u679d\u7b97\u6cd5\u5728\u521d\u59cb\u5316\u65f6\u4f1a\u906d\u53d7\u5c42\u574d\u584c\uff0c\u6574\u4e2a\u5c42\u7684\u8fc7\u65e9\u526a\u679d\u4f1a\u5bfc\u81f4\u7f51\u7edc\u4e0d\u53ef\u8bad\u7ec3\u3002\u8fd9\u4e00\u7406\u8bba\u8fd8\u89e3\u91ca\u4e86\u5982\u4f55\u5b8c\u5168\u907f\u514d\u5c42\u574d\u584c\uff0c\u4ece\u800c\u6fc0\u53d1\u4e86\u4e00\u79cd\u65b0\u7684\u526a\u679d\u7b97\u6cd5\u8fed\u4ee3\u7a81\u89e6\u6d41\u4fee\u526a(SynFlow)\u3002\u8be5\u7b97\u6cd5\u53ef\u4ee5\u89e3\u91ca\u4e3a\u5728\u53d7\u9650\u4e8e\u7a00\u758f\u6027\u7ea6\u675f\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u521d\u59cb\u5316\u65f6\u4fdd\u6301\u901a\u8fc7\u7f51\u7edc\u7684\u7a81\u89e6\u5f3a\u5ea6\u7684\u603b\u6d41\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7b97\u6cd5\u6ca1\u6709\u53c2\u8003\u8bad\u7ec3\u6570\u636e\uff0c\u5728\u4e00\u7cfb\u5217\u6a21\u578b(VGG\u548cResNet)\u3001\u6570\u636e\u96c6(CIFAR-10/100\u548cTiny ImageNet)\u548c\u7a00\u758f\u7ea6\u675f(\u9ad8\u8fbe99.9%)\u4e0a\u7684\u521d\u59cb\u5316\u6027\u80fd\u59cb\u7ec8\u4f18\u4e8e\u73b0\u6709\u7684\u6700\u5148\u8fdb\u7684\u526a\u679d\u7b97\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u6570\u636e\u4e0d\u53ef\u77e5\u7684\u4fee\u526a\u7b97\u6cd5\u6311\u6218\u4e86\u73b0\u6709\u7684\u8303\u5f0f\uff0c\u5373\u5fc5\u987b\u4f7f\u7528\u6570\u636e\u6765\u91cf\u5316\u54ea\u4e9b\u7a81\u89e6\u662f\u91cd\u8981\u7684\u3002", "note_en": "Download PDF  Abstract: Pruning the parameters of deep neural networks has generated intense interestdue to potential savings in time, memory and energy both during training and attest time. Recent works have identified, through an expensive sequence oftraining and pruning cycles, the existence of winning lottery tickets or sparsetrainable subnetworks at initialization. This raises a foundational question:can we identify highly sparse trainable subnetworks at initialization, withoutever training, or indeed without ever looking at the data? We provide anaffirmative answer to this question through theory driven algorithm design. Wefirst mathematically formulate and experimentally verify a conservation lawthat explains why existing gradient-based pruning algorithms at initializationsuffer from layer-collapse, the premature pruning of an entire layer renderinga network untrainable. This theory also elucidates how layer-collapse can beentirely avoided, motivating a novel pruning algorithm Iterative Synaptic FlowPruning (SynFlow). This algorithm can be interpreted as preserving the totalflow of synaptic strengths through the network at initialization subject to asparsity constraint. Notably, this algorithm makes no reference to the trainingdata and consistently outperforms existing state-of-the-art pruning algorithmsat initialization over a range of models (VGG and ResNet), datasets(CIFAR-10/100 and Tiny ImageNet), and sparsity constraints (up to 99.9percent). Thus our data-agnostic pruning algorithm challenges the existingparadigm that data must be used to quantify which synapses are important.", "posttime": "2020-06-14 05:35:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u795e\u7ecf\u7f51\u7edc,\u5b88\u6052,neural,\u7b97\u6cd5", "title": "\u57fa\u4e8e\u8fed\u4ee3\u5b88\u6052\u7a81\u89e6\u6d41\u7684\u65e0\u6570\u636e\u4fee\u526a\u795e\u7ecf\u7f51\u7edc", "title_en": "Pruning neural networks without any data by iteratively conserving synaptic flow", "transed": 1, "url": "https://arxiv.org/abs/2006.05467", "via": "", "real_tags": ["\u795e\u7ecf\u7f51\u7edc", "\u5b88\u6052", "neural", "\u7b97\u6cd5"]}]