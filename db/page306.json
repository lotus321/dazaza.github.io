[{"category": "", "categoryclass": "", "imagename": "48ceba31cf05faab0f4fac42132df37c.jpg", "infoid": 1002670, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u6211\u7684\u4e16\u754c\u201d\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u56fd\u9645\u73b0\u8c61\uff0c\u4f46\u5b83\u7684\u89c4\u6a21\u8fd8\u5728\u4e0d\u65ad\u6269\u5927\u3002\u5fae\u8f6f\u8868\u793a\uff0c\u5176\u5df2\u670911\u5e74\u5386\u53f2\u7684\u4e16\u754c\u6784\u5efa\u6e38\u620f\u9500\u91cf\u8d85\u8fc72\u4ebf\u4efd\uff0c\u6bcf\u6708\u6709\u8d85\u8fc71.26\u4ebf\u4eba\u73a9\u8fd9\u6b3e\u6e38\u620f\u3002\n\u8fd9\u4e2a\u6e38\u620f\u6700\u8fd1\u7684\u5927\u90e8\u5206\u6210\u529f\u90fd\u662f\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u671f\u95f4\u53d6\u5f97\u7684\u3002\u5fae\u8f6f\u8868\u793a\uff0c4\u6708\u4efd\uff0c\u52a0\u5165\u5176\u6e38\u620f\u793e\u533a\u7684\u65b0\u73a9\u5bb6\u6570\u91cf\u589e\u52a0\u4e8625%\uff0c\u4e00\u8d77\u73a9\u6e38\u620f\u7684\u4eba\u6570\u6fc0\u589e\u4e8640%\u3002\n\u5fae\u8f6f\u201c\u6211\u7684\u4e16\u754c\u201d\u5de5\u4f5c\u5ba4\u8d1f\u8d23\u4eba\u6d77\u4f26\u00b7\u848b\u5468\u4e00\u5728\u4e00\u7bc7\u535a\u6587\u4e2d\u5199\u9053\uff0c\u5728\u8fd9\u4e2a\u975e\u5e38\u65f6\u671f\uff0c\u6211\u4eec\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u52a0\u610f\u8bc6\u5230\u50cf\u201c\u6211\u7684\u4e16\u754c\u201d\u8fd9\u6837\u7684\u6e38\u620f\u5728\u9003\u907f\u65e5\u5e38\u751f\u6d3b\u3001\u57f9\u517b\u670b\u53cb\u548c\u5bb6\u4eba\u4e4b\u95f4\u7684\u793e\u4ea4\u8054\u7cfb\u65b9\u9762\u53ef\u4ee5\u53d1\u6325\u7684\u91cd\u8981\u4f5c\u7528\u3002\u8fd9\u4e00\u58f0\u660e\u662f\u5728\u5fae\u8f6f5\u670819-20\u65e5\u5728\u7ebf\u4e3e\u529e\u7684Build Developer\u6d3b\u52a8\u4e4b\u524d\u53d1\u5e03\u7684\u3002\n\u201c\u6211\u7684\u4e16\u754c\u201d\u7684\u6210\u529f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8e\u5b83\u7684\u5f00\u653e\u5f0f\u8bbe\u8ba1\uff0c\u9f13\u52b1\u73a9\u5bb6\u63a2\u7d22\uff1b\u5728\u6e38\u620f\u4e2d\u627e\u5230\u7269\u54c1\u548c\u5730\u70b9\uff1b\u7136\u540e\u5efa\u9020\u4ed6\u4eec\u559c\u6b22\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u5b83\u7684\u6210\u529f\u8fd8\u5e2e\u52a9\u50ac\u751f\u4e86\u5176\u4ed6\u6e38\u620f\uff0c\u6bd4\u5982\u201c\u6211\u7684\u4e16\u754c\u4e16\u754c\u201d\uff0c\u8be5\u516c\u53f8\u5229\u7528\u667a\u80fd\u624b\u673a\uff0c\u4ee5\u7c7b\u4f3c\u4e8e\u201c\u7cbe\u7075\u5b9d\u53ef\u68a6Go\u201d\u7684\u65b9\u5f0f\uff0c\u5c06\u201c\u6211\u7684\u4e16\u754c\u201d\u6e38\u620f\u8986\u76d6\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u3002\u5fae\u8f6f\u8fd8\u8ba1\u5212\u53d1\u5e03\u4e00\u6b3e\u65b0\u7684\u52a8\u4f5c\u5192\u9669\u6e38\u620f\uff0c\u540d\u4e3a\u201c\u6211\u7684\u4e16\u754c\u5730\u4e0b\u57ce\u201d\uff0c\u73a9\u5bb6\u5728\u63a2\u7d22\u6e38\u620f\u4e16\u754c\u7684\u540c\u65f6\uff0c\u4e0e\u56e4\u79ef\u7684\u50f5\u5c38\u751f\u7269\u640f\u6597\u3002\n\u968f\u7740\u4eba\u4eec\u7eb7\u7eb7\u907f\u96be\u4ee5\u51cf\u7f13\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u6211\u7684\u4e16\u754c\u548c\u5176\u4ed6\u89c6\u9891\u6e38\u620f\u7684\u9500\u91cf\u548c\u6e38\u620f\u6027\u4e00\u76f4\u5728\u589e\u957f\u3002\u6839\u636e\u7ea6\u7ff0\u00b7\u970d\u666e\u91d1\u65af\u5927\u5b66(Johns Hopkins University)\u6c47\u7f16\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u5df2\u5bfc\u81f4\u8d85\u8fc730.6\u4e07\u540d\u60a3\u8005\u6b7b\u4ea1\uff0c\u8d85\u8fc7450\u4e07\u4eba\u611f\u67d3\u3002\u7531\u4e8e\u5bb6\u91cc\u6709\u8fd9\u4e48\u591a\u4eba\uff0c\u73a9\u6e38\u620f\u7684\u4eba\u6570\u6fc0\u589e\uff0c\u9500\u91cf\u4e5f\u968f\u4e4b\u589e\u52a0\u3002\n\u6839\u636e\u5e02\u573a\u89c2\u5bdf\u673a\u6784NPD Group\u6c47\u7f16\u7684\u6570\u636e\uff0c\u5728\u622a\u81f33\u6708\u4efd\u7684\u5b63\u5ea6\u91cc\uff0c\u4eba\u4eec\u4ec5\u5728\u6e38\u620f\u4e0a\u5c31\u82b1\u8d39\u4e8695.8\u4ebf\u7f8e\u5143\uff0c\u6bd4\u53bb\u5e74\u540c\u671f\u589e\u957f\u4e8611%\u3002\u63a8\u52a8\u8fd9\u4e2a\u521b\u7eaa\u5f55\u5b63\u5ea6\u7684\u662f\u300a\u52a8\u7269\u7a7f\u8d8a\uff1a\u65b0\u5730\u5e73\u7ebf\u300b\u3001\u300a\u4f7f\u547d\u53ec\u5524\uff1a\u73b0\u4ee3\u6218\u4e89\u300b\u3001\u300a\u672b\u65e5\u6c38\u6052\u300b\u3001\u300a\u9f99\u73e0Z\uff1a\u5361\u5361\u7f57\u300b\u3001\u300a\u5821\u5792\u4e4b\u591c\u300b\u3001\u300a\u4fa0\u76d7\u730e\u8f66\u624bV\u300b\u3001\u300a\u6211\u7684\u4e16\u754c\u300b\u3001\u7f8e\u56fd\u804c\u68d2\u5927\u8054\u76df\u7684\u300a\u79c020\u300b\u548c\u300aNBA2K20\u300b\u3002\n\u4e3a\u4e86\u5e2e\u52a9\u5927\u591a\u6570\u8981\u5230\u79cb\u5b63\u624d\u80fd\u91cd\u8fd4\u6821\u56ed\u7684\u5b66\u751f\uff0c\u5fae\u8f6f\u5c06\u5176\u6559\u80b2\u7248\u201c\u6211\u7684\u4e16\u754c\u201d\u514d\u8d39\u63d0\u4f9b\u7ed9\u6559\u5e08\uff0c\u76f4\u52306\u6708\u4efd\u3002\u5fae\u8f6f\u8868\u793a\uff0c\u81ea3\u6708\u4efd\u4f5c\u4e3a\u4e3b\u8981\u6e38\u620f\u201c\u6211\u7684\u4e16\u754c\u201d\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u4ee5\u6765\uff0c\u5176\u6559\u80b2\u5185\u5bb9\u7684\u4e0b\u8f7d\u91cf\u5df2\u8d85\u8fc75000\u4e07\u6b21\u3002\n\u5c0a\u91cd\u4ed6\u4eba\uff0c\u4fdd\u6301\u6587\u660e\u793c\u8c8c\uff0c\u4e0d\u79bb\u9898\u3002\u6211\u4eec\u5220\u9664\u8fdd\u53cd\u6211\u4eec\u653f\u7b56\u7684\u8bc4\u8bba\uff0c\u6211\u4eec\u9f13\u52b1\u60a8\u9605\u8bfb\u8fd9\u4e9b\u8bc4\u8bba\u3002\u6211\u4eec\u53ef\u4ee5\u968f\u65f6\u5173\u95ed\u8ba8\u8bba\u7ebf\u7a0b\u3002", "note_en": "Minecraft has already become an international phenomenon, but it keeps getting bigger.  Microsoft said its 11-year-old world-building game crossed 200 million copies sold, with more than 126 million people playing each month.\n Much of the game&#39;s recent success has come during the\u00a0  coronavirus pandemic. Microsoft said that in April, it tallied a 25% increase in the number of new players joining its game community, and a 40% spike in the number of people playing together.\n &#34;In these extraordinary times, we&#39;re reminded more than ever before of the important role games like Minecraft can play in providing an escape from the day-to-day and fostering social connections between friends and families,&#34; Helen Chiang, Microsoft&#39;s head of Minecraft studio Mojang, wrote in a blog post Monday. The announcement came ahead of Microsoft&#39;s Build developer event, being   held online May 19-20.\n                                             Minecraft&#39;s success is partly thanks to its open-ended design, encouraging players to explore; find items and places within the game; and then   build whatever they like. Its success has helped spawn other games,\u00a0  such as Minecraft Earth, the company&#39;s effort to use   smartphones to  overlay Minecraft gameplay on the real world in a way similar to  Pokemon Go. Microsoft is also planning to release a new action-adventure title called  Minecraft Dungeons, where players fight hoards of zombielike creatures while exploring the game&#39;s world.\n Minecraft and other  video games have been notching larger sales and gameplay as people shelter in place to   slow the spread of the novel coronavirus, which has killed more than 306,000 patients and infected more than 4.5 million people, according to  data compiled by Johns Hopkins University. With so many people at home,   game playing has spiked, and sales have followed.\n For the quarter ended in March, people spent $9.58 billion just on games, up 11% from a year ago, according to data compiled by market watcher NPD Group. Driving the record-setting quarter were sales of\u00a0 Animal Crossing: New Horizons,\u00a0 Call of Duty: Modern Warfare,\u00a0 Doom Eternal,\u00a0 Dragon Ball Z: Kakarot,\u00a0 Fortnite,\u00a0 Grand Theft Auto V,\u00a0 Minecraft,\u00a0 MLB The Show 20\u00a0and\u00a0 NBA 2K20.\n To help students, most of whom  aren&#39;t able to return to school until the fall, Microsoft made  its education edition of Minecraft available to teachers for free until June. Microsoft said its education content has been downloaded more than 50 million times since it was offered as a part of the main Minecraft game in March.\n  Be respectful, keep it civil and stay on topic. We delete comments that violate  our policy, which we encourage you to read. Discussion threads can be closed at any time at our discretion.", "posttime": "2020-05-19 01:45:09", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u51a0\u72b6\u75c5\u6bd2,\u75c5\u6bd2,\u6e38\u620f,month,\u4e16\u754c", "title": "\u201c\u6211\u7684\u4e16\u754c\u201d\u6e38\u620f\u201c\u5c16\u5cf0\u201d\uff0c\u5728\u51a0\u72b6\u75c5\u6bd2\u4e2d\u6bcf\u6708\u8d85\u8fc71.26\u4ebf\u5efa\u9020\u8005", "title_en": "Minecraft Play Spikes, Tops 126M Builders a Month Amid COVID-19", "transed": 1, "url": "https://www.cnet.com/news/amid-covid-19-minecraft-sees-sharp-spikes-over-126m-players-a-month/", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u6e38\u620f", "month", "\u4e16\u754c"]}, {"category": "", "categoryclass": "", "imagename": "868d114f08bd6616448d2d2e68138591.jpeg", "infoid": 1002669, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5305\u4e3b\u8981\u5bfc\u5165(&#34\uff1bfmt&#34\uff1b&#34\uff1bos&#34\uff1b&#34\uff1bgithub.com/duythinht/dbml-go/parser&#34\uff1b&#34\uff1bgithub.com/duythinht/dbml-go/scanner&#34\uff1b)Funcc Main(){f\uff0c_\uff1a=os\u3002\u6253\u5f00(&#34\uff1btest.dbml&#34\uff1b)s\uff1a=scanner\u3002NewScanner(F)parser\uff1a=parser\u3002NewParser(S)dbml\uff0cerr\uff1a=parser\u3002\u5982\u679cerr\uff01=nil{fmt\uff0c\u5219\u89e3\u6790()\u3002\u6253\u5370(&#34\uff1b%s\\n&#34\uff1b\uff0c\u9519\u8bef)\u64cd\u4f5c\u7cfb\u7edf\u3002\u9000\u51fa(1)}//\u6b64\u5904\u5904\u7406dbml}\u3002\n\u7528\u6cd5\uff1adbml-gen-go-model[\u6807\u5fd7]\u6807\u5fd7\uff1a-f\uff0c--from string source of dbml\uff0c\u53ef\u4ee5\u662fhttps://dbdiagram.io/.|file_name.dbml(\u9ed8\u8ba4\u503c&#34\uff1bdatabase.dbml&#34\uff1b)-h\uff0c--dbml-gen-go-model-o\u7684\u5e2e\u52a9\uff0c--out\u5b57\u7b26\u4e32\u8f93\u51fa\u6587\u4ef6\u5939(\u9ed8\u8ba4\u503c&#34\uff1bmodel&#34\uff1b)-p\uff0c--\u6253\u5305\u591a\u4e2a\u6587\u4ef6\u7684\u5355\u4e2a\u5b57\u7b26\u4e32(\u9ed8\u8ba4\u503c&#34\uff1bmodel&#34\uff1b)\u3002\n//database ase.dbmlTable Users as U{id int[pk\uff0cUnique\uff0cIncreate]//\u81ea\u52a8\u9012\u589eFULL_NAME varchar[NOT NULL\uff0cUNIQUE\uff0cDEFAULT\uff1a1]CREATED_AT TIMESTAMP COUNTRY_CODE int\u6ce8\u610f\uff1a&#39\uff1bKhong Hieu DUOC&#39\uff1b}\u3002\n//dbml-gen-go-model\u751f\u6210\u7684\u4ee3\u7801\u3002\u8bf7\u52ff\u7f16\u8f91\u3002//\u53d7duythinht@2020\u5305\u6a21\u578b\u652f\u6301//\u4e3a\u8868&#39\uff1bUsers&#39\uff1btype user struct{id int`db\uff1a&#34\uff1bid&#34\uff1bmapstruct\uff1a&#34\uff1bid&#34\uff1b`FullName string`db\uff1a&#34\uff1bfull_name&#34\uff1bjson\uff1a&#34\uff1bfull_name&#34\uff1bmapstructure\uff1a&#34\uff1bfull_name&#34\uff1b\u751f\u6210\u7684\u7c7b\u578b\u4e3a&#39\uff1bUsers&#39\uff1btype user struct{id int`db\uff1a&#34\uff1bid&#34\uff1bmapstructure\uff1a&#34\uff1bid&#34\uff1b`FullName string`db\uff1a&#34\uff1bfull_name&#34\uff1bCREATED_AT&#34\uff1bMAPSTRUCTURE\uff1a&#34\uff1bCREATED_AT&#34\uff1b`CountryCode int`db\uff1a&#34\uff1bCOUNTRY_CODE&#34\uff1bjson\uff1a&#34\uff1bCOUNTRY_CODE&#34\uff1bmapstructure\uff1a&#34\uff1bCOUNTRY_CODE&#34\uff1b`}//table&#39\uff1bUsers&#39\uff1b\u5143\u6570\u636e\u7ed3\u6784type__tbl_Users struct{ID string FullName string CreatedAt String CountryCode string}//table&#\u3002\u5143\u6570\u636e\u4fe1\u606fvar_tbl_users=__tbl_Users{CountryCode\uff1a&#34\uff1b\uff0cCreatedAt\uff1a&#34\uff1bCreated_at&#34\uff1b\uff0cFullName\uff1a&#34\uff1bFull_Name&#34\uff1b\uff0cID\uff1a&#34\uff1bid&#34\uff1b\uff0c}//Columns\u8fd4\u56de\u8868&#39\uff1bUsers&#39\uff1b\u7684\u5217\u8868\u5217\u540d\u79f0\u3002func(*__tbl_users)column()[]string{return[]string{&#34\uff1bid&#34\uff1b\uff0c&#34\uff1bfull_name&#34\uff1b\uff0c&#34\uff1bcreate_at&#34\uff1b\uff0c&#34\uff1bCountry_code&#34\uff1b}}//DataColumns\u8fd4\u56de\u8868&#39\uff1b\u7528\u6237&#39\uff1b\u9664&#39\uff1bid&#39\uff1b\u4e4b\u5916\u7684\u5217\u8868\u5217\u7684\u540d\u79f0\u3002Columns func(*__tbl_users)DataColumns()[]string{return[]string{&#34\uff1bfull_name&#34\uff1b\uff0c&#34\uff1bcreate_at&#34\uff1b\uff0c&#34\uff1bCountry_code&#34\uff1b}}//string\u8fd4\u56de\u8868&#39\uff1bUsers&#39\uff1bFunc(*__tbl_Users)string()string{return&#34\uff1bUsers&#34\uff1b}//TBL\u8fd4\u56de\u8868&#39\u3002Users&39\uff1bfunc(*user)tbl()*__tbl_Users{return&amp\uff1b_tbl_Users}", "note_en": "package main import (\t &#34;fmt&#34;\t &#34;os&#34;\t &#34;github.com/duythinht/dbml-go/parser&#34;\t &#34;github.com/duythinht/dbml-go/scanner&#34;) func  main() {\t f,  _  :=  os. Open( &#34;test.dbml&#34;)\t s  :=  scanner. NewScanner( f)\t parser  :=  parser. NewParser( s)\t dbml,  err  :=  parser. Parse()\t if  err  !=  nil {  fmt. Printf( &#34;%s \\n&#34;,  err)  os. Exit( 1) }  // process dbml here}\n   Usage: dbml-gen-go-model [flags]Flags: -f, --from string source of dbml, can be https://dbdiagram.io/... | file_name.dbml (default &#34;database.dbml&#34;) -h, --help help for dbml-gen-go-model -o, --out string output folder (default &#34;model&#34;) -p, --package string single for multiple files (default &#34;model&#34;)\n   // database.dbmlTable users as U { id int [pk, unique, increment] // auto-increment full_name varchar [not null, unique, default: 1] created_at timestamp country_code int Note: &#39;khong hieu duoc&#39;}\n    // Code generated by dbml-gen-go-model. DO NOT EDIT. // Supported by duythinht@2020 package model // User is generated type for table &#39;users&#39; type  User  struct {\t ID  int  `db:&#34;id&#34; json:&#34;id&#34; mapstructure:&#34;id&#34;`\t FullName  string  `db:&#34;full_name&#34; json:&#34;full_name&#34; mapstructure:&#34;full_name&#34;`\t CreatedAt  int  `db:&#34;created_at&#34; json:&#34;created_at&#34; mapstructure:&#34;created_at&#34;`\t CountryCode  int  `db:&#34;country_code&#34; json:&#34;country_code&#34; mapstructure:&#34;country_code&#34;`} // table &#39;users&#39; metadata Structure type  __tbl_users  struct {\t ID  string\t FullName  string\t CreatedAt  string\t CountryCode  string} // table &#39;users&#39; metadata info var  _tbl_users  =  __tbl_users{\t CountryCode:  &#34;country_code&#34;,\t CreatedAt:  &#34;created_at&#34;,\t FullName:  &#34;full_name&#34;,\t ID:  &#34;id&#34;,} // Columns return list columns&#39;s name for table &#39;users&#39; func ( * __tbl_users)  Columns() [] string {\t return [] string{ &#34;id&#34;,  &#34;full_name&#34;,  &#34;created_at&#34;,  &#34;country_code&#34;}} // DataColumns return list columns&#39;s name for table &#39;users&#39; except &#39;id&#39; columns func ( * __tbl_users)  DataColumns() [] string {\t return [] string{ &#34;full_name&#34;,  &#34;created_at&#34;,  &#34;country_code&#34;}} // String return name of table &#39;users&#39; func ( * __tbl_users)  String()  string {\t return  &#34;users&#34;} // TBL return metadata info for table &#39;users&#39; func ( * User)  TBL()  * __tbl_users {\t return  &amp; _tbl_users}", "posttime": "2020-05-19 01:44:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "database,\u6570\u636e\u5e93,\u8bbe\u8ba1,model,dbml", "title": "\u4ece\u6570\u636e\u5e93\u8bbe\u8ba1\u751f\u6210GO\u6a21\u578b", "title_en": "Generate Go model from database design", "transed": 1, "url": "https://github.com/duythinht/dbml-go", "via": "", "real_tags": ["database", "\u6570\u636e\u5e93", "\u8bbe\u8ba1", "model", "dbml"]}, {"category": "", "categoryclass": "", "imagename": "41148f03a54bd7bd3b849388761b4a7c.png", "infoid": 1002668, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u505a\u4e86\u786c\u4ef6\u8c03\u67e5\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u77e5\u9053\u82f1\u7279\u5c14\u6700\u65b0\u7684\u4e3b\u6d41\u67b6\u6784\u5728\u54ea\u91cc\u3002\u51b0\u6e56\u5931\u8e2a\u4e86\uff01\n\u597d\u6d88\u606f\u662f\uff1a\u5c31\u5728\u8fd9\u91cc\uff0c\u2026\u3002\u800c\u4e14\u5f88\u6709\u8da3\u3002\u6211\u4eec\u5c06\u76f4\u63a5\u8fdb\u5165\u4e0a\u6b21\u5bf9Skylake\u5ba2\u6237\u7aef\u6240\u505a\u7684\u76f8\u540c\u5206\u6790\u3002\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u8bfb\u8fc7\u7b2c\u4e00\u7bc7\u6587\u7ae0\uff0c\u60a8\u53ef\u80fd\u60f3\u4ece\u90a3\u91cc\u5f00\u59cb\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5f15\u7528\u90a3\u91cc\u4ecb\u7ecd\u7684\u6982\u5ff5\uff0c\u800c\u4e0d\u4f1a\u5728\u8fd9\u91cc\u91cd\u65b0\u89e3\u91ca\u5b83\u4eec\u3002\n\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u60a8\u53ef\u4ee5\u8df3\u5230\u8c03\u67e5\u7ed3\u679c\u7684\u4e00\u53e3\u5927\u5c0f\u7248\u672c\u7684\u6458\u8981\u3002\n\u8ba9\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b\u603b\u4f53\u6027\u80fd\uff1a\u50cf\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5fae\u4f53\u7cfb\u7ed3\u6784\u6240\u505a\u7684\u90a3\u6837\uff0c\u9762\u5bf9\u586b\u51450\u548c\u586b\u51451\u3002\u8bf7\u8bb0\u4f4f\uff0c\u586b\u51450\u7528\u96f6\u586b\u5145\u533a\u57df\uff0c\u800c\u586b\u51451\u7528\u503c1\u586b\u5145\u533a\u57df(\u4f5c\u4e3a4\u5b57\u8282\u6574\u6570)\u3002\n\u6240\u6709\u8fd9\u4e9b\u6d4b\u8bd5\u90fd\u8fd0\u884c\u57283.5 GHz\u3002\u8be5\u82af\u7247\u7684\u6700\u5927\u5355\u6838\u6da1\u8f6e\u589e\u538b\u9891\u7387\u4e3a3.7 GHz\uff0c\u4f46\u7531\u4e8eAVX-512\u65f6\u949f\u6548\u5e94\u548c\u5176\u4ed6\u5185\u6838\u5076\u5c14\u4f1a\u6fc0\u6d3b\uff0c\u56e0\u6b64\u5f88\u96be\u5728\u6b64\u9891\u7387\u4e0b\u6301\u7eed\u8fd0\u884c\u30023.5 GHz\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6298\u8877\u65b9\u6848\uff0c\u53ef\u4ee5\u4fdd\u6301\u82af\u7247\u5728\u76f8\u540c\u9891\u7387\u4e0b\u8fd0\u884c\uff0c\u540c\u65f6\u4fdd\u6301\u63a5\u8fd1\u7406\u60f3\u7684\u6da1\u8f6e\u589e\u538b\u3002\u7981\u7528turbo\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u8be5\u82af\u7247\u5728\u6ca1\u6709turbo\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u57281.1 GHz\uff0c\u8fd9\u4f1a\u5728\u4f7f\u7528uncore\u548cRAM\u65f6\u5f15\u5165\u5f88\u5927\u7684\u5931\u771f\u3002\n\u56fe7a\u56fe7b\u8fd9\u4e24\u4e2a\u6709\u51e0\u4e2a\u5173\u952e\u533a\u522b\u3002\u9996\u5148\uff0c\u56fe7a\u5728L1\u533a\u57df\u7684\u53f3\u534a\u90e8\u5206\u53d1\u751f\u4e86\u8fd9\u79cd\u5947\u602a\u7684\u4e8b\u60c5\uff1a\u6709\u4e24\u4e2a\u660e\u663e\u4e14\u4e0d\u540c\u7684\u6027\u80fd\u7ea7\u522b\u53ef\u89c1\uff0c\u6bcf\u4e2a\u7ea7\u522b\u5927\u7ea6\u6709\u4e00\u534a\u7684\u6837\u672c\u3002\n\u7b2c\u4e8c\u4ef6\u4e8b\u662f\uff0c\u867d\u7136\u8fd9\u4e24\u4e2a\u66f2\u7ebf\u56fe\u5728L3\u548cRAM\u533a\u57df\u90fd\u663e\u793a\u4e86\u4e00\u4e9b\u96f6\u4f18\u5316\u6548\u679c\uff0c\u4f46\u56fe7b\u4e2d\u7684\u5f71\u54cd\u8981\u5927\u5f97\u591a\uff1a\n\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5730\u5757\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\u7b2c\u4e00\u4e2a\u662f\u7528-march=local\u7f16\u8bd1\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u7528-march=icelake-client\u7f16\u8bd1\u7684\u3002\n\u56e0\u4e3a\u6211\u662f\u5728Ice Lake\u5ba2\u6237\u7aef\u7cfb\u7edf\u4e0a\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u5b83\u4eec\u4f1a\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u4f46\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u5b83\u4eec\u4e0d\u4f1a\u8fd9\u6837\u505a\u3002\u4e3b\u8981\u533a\u522b\u662f-march=ative\u4f1a\u751f\u6210\u5982\u4e0b\u6240\u793a\u7684512\u4f4d\u6307\u4ee4(\u5bf9\u4e8e\u4e3b\u5faa\u73af)\uff1a\n\u3002l4\uff1avmovdqu32[rax]\uff0czmm0\u6dfb\u52a0rax\uff0c512 vmovdqu32[rax-448]\uff0czmm0 vmovdqu32[rax-384]\uff0czmm0 vmovdqu32[rax-320]\uff0czmm0 vmovdqu32[rax-256]\uff0czmm0 vmovdqu32[rax-192]\uff0czmm0 vmovdqu32[rax-128]\uff0czmm0\u3002L4\u3002\n\u3002l4\uff1avmovdqu32[rax]\uff0cymm0 vmovdqu32[rax+32]\uff0cymm0 vmovdqu32[rax+64]\uff0cymm0 vmovdqu32[rax+96]\uff0cymm0 vmovdqu32[rax+128]\uff0cymm0 vmovdqu32[rax+160]\uff0cymm0 vmovdqu32[rax+192]\uff0cymm0 vmovdqu32[rax+192]\u3002L4\u3002\n\u5927\u591a\u6570\u7f16\u8bd1\u5668\u9ed8\u8ba4\u4f7f\u7528256\u4f4d\u6307\u4ee4\uff0c\u5373\u4f7f\u5bf9\u4e8e\u652f\u6301AVX-512\u7684\u76ee\u6807\u4e5f\u662f\u5982\u6b64(\u539f\u56e0\uff1a\u964d\u9891\uff0c\u6240\u4ee5\u8fd9\u91cc\u5947\u602a\u7684\u662f-march=\u539f\u751f\u7248\u672c\u3002\u6240\u6709\u65e9\u671f\u7684x86\u6d4b\u8bd5\u90fd\u4f7f\u7528256\u4f4d\u6307\u4ee4\u3002\n\u89c2\u5bdf\u5230\u56fe7a\u662f\u8fd0\u884c512\u4f4d\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u518d\u52a0\u4e0a\u5bf9\u6570\u636e\u7684\u7aa5\u63a2\uff0c\u8fd9\u8ba9\u6211\u4eec\u7acb\u5373\u89e3\u5f00\u4e86\u53cc\u6a21\u5f0f\u884c\u4e3a\u7684\u8c1c\u56e2\u3002\n\u4ee5\u4e0b\u662f\u7f13\u51b2\u533a\u5927\u5c0f\u4e3a9864\u768417\u4e2a\u6837\u672c\u7684\u539f\u59cb\u6570\u636e\uff1a\n\u5bf9\u4e8e\u586b\u51450\u548c\u586b\u51451\u7684\u6d4b\u8bd5\uff0c\u6027\u80fd\u9075\u5faa\u7279\u5b9a\u7684\u6a21\u5f0f\uff1a\u5bf9\u4e8e\u524d9-10\u4e2a\u6837\u672c\uff0c\u5f00\u59cb\u65f6\u901f\u5ea6\u8f83\u6162(\u7ea690 Gb/s)\uff0c\u7136\u540e\u7a81\u7136\u8dc3\u5347\u5230\u8f83\u9ad8\u7684\u6027\u80fd\u7ea7\u522b(\u63a5\u8fd1200 Gb/s)\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u53ea\u662f\u7535\u538b\u548c\u9891\u7387\u7ba1\u7406\u518d\u6b21\u54ac\u6211\u4eec\u4e00\u53e3\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u9891\u7387\u53d8\u5316\uff1a\u539f\u59cb\u6570\u636e\u6709\u4e00\u4e2a\u9891\u7387\u5217\uff0c\u663e\u793a\u8bd5\u9a8c\u59cb\u7ec8\u8fd0\u884c\u57283.5 GHz\u3002\u4ec5\u5b58\u5728\u7535\u538b\u53d8\u5316\uff0c\u5e76\u4e14\u5f53\u7535\u538b\u53d8\u5316\u65f6\uff0cCPU\u4ee5\u964d\u4f4e\u7684\u8c03\u5ea6\u541e\u5410\u91cf2\u8fd0\u884c\u3002\n\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u7684\u8bd5\u7528\u96c6(\u65b0\u7684\u7f13\u51b2\u533a\u5927\u5c0f\u503c)\u91cd\u590d\u6b64\u6548\u679c\u7684\u539f\u56e0\u662f\uff0c\u6bcf\u4e2a\u65b0\u7684\u8bd5\u7528\u96c6\u4e4b\u524d\u90fd\u6709\u4e00\u4e2a100ms\u7684\u81ea\u65cb\u7b49\u5f85\uff1a\u8be5\u81ea\u65cb\u7b49\u5f85\u4e0d\u8fd0\u884c\u4efb\u4f55AVX-512\u6307\u4ee4\uff0c\u56e0\u6b64CPU\u4e0b\u964d\u56de\u8f83\u4f4e\u7684\u7535\u538b\u7535\u5e73\uff0c\u5e76\u4e14\u6b64\u8fc7\u7a0b\u91cd\u590d\u3002\u5f53\u57fa\u51c6\u8fdb\u5165L2\u533a\u57df\u65f6\uff0c\u8fd9\u79cd\u5f71\u54cd\u5c31\u4f1a\u505c\u6b62\uff0c\u56e0\u4e3a\u5728\u90a3\u91cc\u5b83\u8db3\u591f\u6162\uff0c\u4ee5\u81f3\u4e8e\u88ab\u4e22\u5f03\u768410\u6b21\u9884\u70ed\u8bd5\u9a8c\u8db3\u4ee5\u5438\u6536\u5207\u6362\u5230\u66f4\u9ad8\u7535\u538b\u7535\u5e73\u7684\u65f6\u95f4\u3002\n\u6211\u4eec\u53ea\u9700\u5220\u9664100ms\u7684\u9884\u70ed(\u5c06--\u9884\u70ed-ms=0\u4f20\u9012\u7ed9\u57fa\u51c6)\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u65e0\u9884\u70ed\u7248\u672c(\u6211\u4eec\u4fdd\u755910\u4e2a\u9884\u70ed\u8bd5\u9a8c\uff0c\u5b83\u4eec\u5e94\u8be5\u8db3\u591f\u4e86)\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u5269\u4e0b\u7b2c\u4e8c\u4e2a\u6548\u679c\uff0c\u5373256\u4f4d\u5b58\u50a8\u7248\u672c\u663e\u793a\u975e\u5e38\u6709\u6548\u7684\u6d88\u9664\uff0c\u800c\u4e0d\u662f512\u4f4d\u7248\u672c\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u505c\u6b62\u6311\u9009256\u5230512\u4e4b\u95f4\u7684\u6536\u85cf\u5939(\u628a\u5b83\u653e\u5230\u60a8\u7684\u5806\u6808\u4e0a\uff0c\u6211\u4eec\u7a0d\u540e\u518d\u8ba8\u8bba\u5b83)\uff0c\u53ea\u5173\u6ce8256\u4f4d\u5b58\u50a8\u7684\u6d88\u9664\u884c\u4e3a\u3002\n\u4e0b\u9762\u662f256\u4f4d\u5b58\u50a8\u7248\u672c\u7684L3\u533a\u57df\u7684\u7279\u5199\uff0c\u8fd8\u663e\u793a\u4e86L2\u9010\u51fa\u7c7b\u578b\uff0c\u5982\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u6240\u8ba8\u8bba\u7684\uff1a\n\u56fe8\u6211\u4eec\u6700\u7ec8\u5b9e\u73b0\u4e86\u96be\u4ee5\u6349\u6478\u7684(\u63a5\u8fd1)100%\u6d88\u9664\u5197\u4f59\u96f6\u5546\u5e97\uff01\u586b\u5145\u503c\u4e3a0\u7684\u6848\u4f8b\u572896%\u7684\u65e0\u63d0\u793a(\u6d88\u96643\u4e2a)\u9010\u51fa\u65f6\u8fbe\u5230\u5cf0\u503c\u3002\u5178\u578b\u7684L3\u5e26\u5bbd\u5728\u6d88\u9664\u7684\u60c5\u51b5\u4e0b\u7ea6\u4e3a59 Gb/s\uff0c\u5728\u672a\u6d88\u9664\u7684\u60c5\u51b5\u4e0b\u4e3a\u7ea642 Gb/s\uff0c\u52a0\u901f\u6bd4\u8d85\u8fc740%\uff01\u6240\u4ee5\u8fd9\u5bf9\u51b0\u6e56\u6765\u8bf4\u662f\u4e00\u4ef6\u6f5c\u5728\u7684\u5927\u4e8b\u3002\n\u4e0e\u4e0a\u6b21\u4e00\u6837\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u68c0\u67e5\u975e\u6838\u5fc3\u8ddf\u8e2a\u5668\u6027\u80fd\u8ba1\u6570\u5668\uff0c\u4ee5\u67e5\u770b\u901a\u5e38\u4f1a\u5199\u56de\u5185\u5b58\u7684\u8f83\u5927\u7f13\u51b2\u533a\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u3002\n\u56fe9\u4e0eL3\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u6211\u4eec\u770b\u5230\u5b58\u50a8\u6d88\u9664\u4f3c\u4e4e\u670996%\u7684\u6548\u7387\uff1a\u5bf9\u4e8e\u586b\u51450\u7684\u60c5\u51b5\uff0c\u53bb\u6838\u5230\u5185\u5b58\u5199\u56de\u7684\u6570\u91cf\u6301\u5e73\u4e8e4%\u3002\u5c06\u5176\u4e0e\u56fe3\u8fdb\u884c\u6bd4\u8f83\uff0c\u56fe3\u662f\u5728Skylake-S\u4e0a\u8fd0\u884c\u7684\u76f8\u540c\u57fa\u51c6\uff0c\u8bf7\u6ce8\u610f\uff0c\u53ea\u6d88\u9664\u4e86\u4e00\u534a\u5bf9RAM\u7684\u5199\u5165\u3002\n\u6b64\u56fe\u8868\u8fd8\u5305\u62ecalt01\u57fa\u51c6\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u6b64\u57fa\u51c6\u6d4b\u8bd5\u5199\u516564\u5b57\u8282\u76840\u548c64\u5b57\u8282\u76841\u3002\u8fd9\u610f\u5473\u7740\uff0c\u901a\u8fc7\u96f6\u8fc7\u96f6\u6d88\u9664\uff0c\u6700\u591a\u53ea\u80fd\u6d88\u9664\u4e00\u534a\u7684\u884c\u3002\u5728Skylake-S\u4e0a\uff0c\u53ea\u6709\u5927\u7ea650%\u7684\u5408\u683c(\u96f6)\u884c\u88ab\u53d6\u6d88\uff0c\u4f46\u5728\u8fd9\u91cc\u6211\u4eec\u53c8\u4e00\u6b21\u8fbe\u5230\u4e8696%\u7684\u53d6\u6d88\uff01\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728alt01\u7684\u60c5\u51b5\u4e0b\uff0c\u6d88\u9664\u4e8648%\u7684\u6240\u6709\u5199\u5165\uff0c\u5176\u4e2d\u4e00\u534a\u662f\u51681\u5199\u5165\uff0c\u4e0d\u7b26\u5408\u6761\u4ef6\u3002\nRAM\u533a\u57df\u7684\u5168\u96f6\u60c5\u51b5\u7684\u6e10\u8fd1\u52a0\u901f\u6bd4\u5c0f\u4e8eL3\u533a\u57df\uff0c\u7ea6\u4e3a23%\uff0c\u4f46\u8fd9\u4ecd\u7136\u4e0d\u662f\u4e00\u4e2a\u4e0d\u5bb9\u5ffd\u89c6\u7684\u95ee\u9898\u3002\u4ea4\u66ff\u60c5\u51b5\u7684\u52a0\u901f\u6bd4\u4e3a10%\uff0c\u7565\u4f4e\u4e8e\u5168\u96f6\u60c5\u51b54\u597d\u5904\u7684\u4e00\u534a\u3002\u5728L3\u533a\u57df\uff0c\u6211\u4eec\u8fd8\u6ce8\u610f\u5230alt01\u6d88\u9664\u7684\u597d\u5904\u4ec5\u7ea6\u4e3a7%\uff0c\u8fdc\u4f4e\u4e8e\u60a8\u9884\u671f\u7684\u7ea620%\u7684\u597d\u5904(\u5982\u679c\u60a8\u524a\u51cf\u5168\u96f6\u60c5\u51b5\u4e0b\u770b\u5230\u768440%\u597d\u5904)\u3002\u6211\u4eec\u5728Skylake-S\u4e0a\u770b\u5230\u4e86\u7c7b\u4f3c\u7684\u6548\u679c\u3002\n\u6700\u540e\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cuncore\u4e2d\u7684\u8fd9\u4e00\u5c0f\u5e45\u4e0a\u5347\u5199\u5165\u4e86\u586b\u51450\u7684\u60c5\u51b5\uff1a\n\u8fd9\u6070\u597d\u53d1\u751f\u5728\u4eceL3\u5230RAM\u7684\u8f6c\u6362\u8fc7\u7a0b\u4e2d\uff0c\u6b64\u65f6\u5199\u5165\u5e73\u7f13\u964d\u81f3\u6bcf\u884c0.04\uff0c\u4f46\u8fd9\u79cd\u4e0a\u5347\u662f\u76f8\u5f53\u7a33\u5b9a\u7684\u3002\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u6548\u679c\uff0c\u53ef\u80fd\u4e0eL3\u7f13\u5b585\u7684\u81ea\u9002\u5e94\u7279\u6027\u6709\u5173\u3002\n\u5982\u679c\u6211\u4eec\u56de\u6eaf\u65f6\u95f4\uff0c\u662f\u65f6\u5019\u5f39\u51fa\u5fc3\u7406\u5806\u6808\u5e76\u8fd4\u56de\u5230\u6211\u4eec\u4e4b\u524d\u6ce8\u610f\u5230\u7684\u4e8b\u60c5\uff1a\u4e0e512\u4f4d\u5b58\u50a8\u76f8\u6bd4\uff0c256\u4f4d\u5b58\u50a8\u4f3c\u4e4e\u5728L3\u533a\u57df\u83b7\u5f97\u4e86\u66f4\u597d\u7684\u6027\u80fd\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u7531\u4e8e-march\u6807\u5fd7\u4e2d\u7684\u610f\u5916\u884c\u4e3a\uff0c\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u4e86256\u4f4d\u548c512\u4f4d\u7248\u672c\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f9d\u8d56\u4e8e\u8fd9\u79cd\u602a\u5f02\u76846\uff0c\u8ba9\u6211\u4eec\u53ea\u7f16\u5199\u7a0d\u5fae\u61d2\u60f0\u76847\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u663e\u5f0f\u4f7f\u7528256\u4f4d\u548c512\u4f4d\u5b58\u50a8\uff0c\u4f46\u5728\u5176\u4ed6\u65b9\u9762\u662f\u76f8\u540c\u7684\u3002\u586b\u5145256_0\u4f7f\u7528256\u4f4d\u5b58\u50a8\u5e76\u5199\u5165\u96f6\uff0c\u6211\u5c06\u8ba9\u60a8\u6a21\u5f0f\u5339\u914d\u5176\u4f59\u7684\u540d\u79f0\u3002\n\u56fe10\u6b64\u56fe\u8868\u4ec5\u663e\u793a\u4e8617\u4e2a\u8bd5\u9a8c\u7684\u4e2d\u4f4d\u6570\u3002\u60a8\u53ef\u4ee5\u67e5\u770b\u539f\u59cb\u6570\u636e\u6765\u4e86\u89e3\u8bd5\u9a8c\u65b9\u5dee\uff0c\u4f46\u5b83\u901a\u5e38\u5f88\u4f4e\u3002\n\u5728L1\u533a\u57df\u4e2d\uff0c512\u4f4d\u65b9\u6cd5\u901a\u5e38\u83b7\u80dc\uff0c\u5199\u51650\u62161\u4e4b\u95f4\u6ca1\u6709\u660e\u663e\u533a\u522b(\u6708\u7403\u7684\u4e24\u534a\u5927\u591a\u5bf9\u9f50)\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c256\u4f4d\u7684\u5546\u5e97\u4e0e512\u4f4d\u7684\u5546\u5e97\u5927\u4f53\u4e0a\u662f\u6709\u7ade\u4e89\u529b\u7684\uff1a\u5b83\u4eec\u7684\u541e\u5410\u91cf\u8fd8\u4e0d\u5230512\u4f4d\u7684\u4e00\u534a\u3002\u8fd9\u8981\u5f52\u529f\u4e8e\u51b0\u6e56\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u5546\u5e97\u6e2f\u53e3\u3002\u5982\u679c\u6ca1\u6709\u8be5\u529f\u80fd\uff0c\u57283.5 GHz\u65f6\u60a8\u5c06\u88ab\u9650\u5236\u4e3a112 Gb/s\uff0c\u4f46\u5728\u8fd9\u91cc\uff0c256\u4f4d\u5b58\u50a8\u53ef\u4ee5\u8f7b\u677e\u8fbe\u5230~190 Gb/s\uff0c512\u4f4d\u5b58\u50a8\u53ef\u4ee5\u8f7b\u677e\u8fbe\u5230~195 Gb/s\u3002512\u4f4d\u5b58\u50a8\u53ef\u80fd\u7565\u6709\u4f18\u52bf\uff0c\u56e0\u4e3a\u6267\u884c\u7684\u6307\u4ee4\u603b\u6570\u8f83\u5c11(\u7ea6\u4e3a256\u4f4d\u60c5\u51b5\u7684\u4e00\u534a)\u548c\u76f8\u5173\u7684\u4e8c\u9636\u6548\u5e94\u3002\n\u7136\u800c\uff0c\u5728L2\u533a\u57df\uff0c256\u4f4d\u65b9\u6cd5\u4f3c\u4e4e\u9065\u9065\u9886\u5148\u3002\u8fd9\u6709\u70b9\u50cf\u6c34\u725b\u6bd4\u5c14\u961f\u8d62\u5f97\u4e86\u8d85\u7ea7\u7897\uff1a\u8fd9\u662f\u4e0d\u5e94\u8be5\u53d1\u751f\u7684\u3002\n\u56fe11 256\u4f4d\u57fa\u51c6\u6d4b\u8bd5\u5f00\u59cb\u65f6\u4e0e\u5176512\u4f4d\u57fa\u51c6\u5927\u81f4\u6301\u5e73\uff0c\u4f46\u968f\u540e\u968f\u7740\u533a\u57df\u63a5\u8fd1L2\u7684\u5b8c\u6574\u5927\u5c0f\u800c\u9010\u6e10\u8fdc\u79bb\u3002\u5230L2\u533a\u57df\u7ed3\u675f\u65f6\uff0c\u5b83\u4eec\u62e5\u6709\u8fd113%\u7684\u4f18\u52bf\u3002\u8fd9\u9002\u7528\u4e8e\u4e24\u79cd\u586b\u5145256\u7248\u672c--\u51990\u548c\u51991\u7684\u98ce\u683c\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u6548\u5e94\u4f3c\u4e4e\u4e0d\u80fd\u7528\u5546\u5e97\u6dd8\u6c70\u6765\u89e3\u91ca\uff1a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5546\u5e97\u88ab\u6dd8\u6c70\u4e86\uff0c\u800c\u4e14\u53ea\u6709\u5f53\u533a\u57df\u662fL3\u5927\u5c0f\u65f6\uff0c\u6dd8\u6c70\u624d\u5f00\u59cb\u53d1\u6325\u660e\u663e\u7684\u4f5c\u7528\u3002\n\u5728L3\u4e2d\uff0c\u60c5\u51b5\u53d1\u751f\u4e86\u53d8\u5316\uff1a\u73b0\u5728256\u4f4d\u7248\u672c\u786e\u5b9e\u9886\u5148\u4e86\uff0c\u4f46\u53ea\u6709\u5199\u96f6\u7684\u7248\u672c\u3002256\u4f4d\u548c512\u4f4d\u5355\u586b\u5145\u7248\u672c\u7684\u541e\u5410\u91cf\u4e0b\u964d\uff0c\u51e0\u4e4e\u8fbe\u5230\u76f8\u540c\u7684\u6c34\u5e73(\u4f46256\u4f4d\u7248\u672c\u4f3c\u4e4e\u4ecd\u7136\u7565\u5fae\u9886\u5148\uff0c\u4f46\u901f\u5ea6\u63d0\u9ad8\u4e86\u7ea62%)\u3002256\u4f4d\u586b\u96f6\u7248\u672c\u73b0\u5728\u9886\u5148\u4e86\u5927\u7ea645%\uff01\n\u8ba9\u6211\u4eec\u53ea\u5173\u6ce8\u5199\u5165\u96f6\u7684\u4e24\u4e2a\u57fa\u51c6\uff1a\u586b\u5145256_0\u548c\u586b\u5145512_0\uff0c\u5e76\u6253\u5f00L2\u9010\u51fa\u8ba1\u6570\u5668(\u60a8\u73b0\u5728\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u4e86\u90a3\u4e2a\u8ba1\u6570\u5668)\uff1a\n\u4ec5\u663e\u793aL2\u7ebf\u8def\u8f93\u51fa\u9759\u9ed8\u4e8b\u4ef6-\u9a71\u9010\u7684\u5176\u4f59\u90e8\u5206\u7167\u5e38\u5904\u4e8e\u975e\u9759\u9ed8\u72b6\u6001\u3002\n\u5c3d\u7ba1\u6211\u4e0d\u5f97\u4e0d\u8ba9\u53f3\u8f74\u4f20\u8bf4\u5728\u5267\u60c5\u4e2d\u95f4\u6f02\u6d6e\u7740\uff0c\u4f46\u6211\u5e0c\u671b\u6545\u4e8b\u662f\u6e05\u6670\u7684\uff1a256\u4f4d\u5546\u5e97\u4ee5\u901a\u5e3896%\u7684\u6bd4\u7387\u88ab\u6dd8\u6c70\uff0c\u4f46512\u4f4d\u5546\u5e97\u5374\u5f98\u5f8a\u5728\u7edd\u5bf9\u50cf\u5929\u7a7a\u6e56(Skylake)\u4e00\u6837\u7684\u7ea656%\u7684\u6c34\u5e73\u4e0a\uff0c\u6211\u5e0c\u671b\u6545\u4e8b\u662f\u6e05\u6670\u7684\uff1a256\u4f4d\u5546\u5e97\u4ee5\u901a\u5e3896%\u7684\u6bd4\u7387\u88ab\u6dd8\u6c70\uff0c\u4f46512\u4f4d\u5546\u5e97\u5374\u5f98\u5f8a\u5728\u7edd\u5bf9\u50cf\u5929\u7a7a\u6e56(Skylake)\u4e00\u6837\u768456%\u3002\u6211\u4e0d\u80fd\u80af\u5b9a\uff0c\u4f46\u6211\u9884\u8ba1\u8fd9\u79cd\u95e8\u5e97\u6dd8\u6c70\u7684\u5dee\u5f02\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u89e3\u91ca\u4e86\u4e1a\u7ee9\u5dee\u5f02\u3002\n\u6211\u8fd8\u68c0\u67e5\u4e86\u5173\u95ed\u9884\u53d6\u65f6\u7684\u884c\u4e3a\uff0c\u4f46\u6a21\u5f0f\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5728L3\u4e2d\u7684\u6027\u80fd\u90fd\u6709\u6240\u964d\u4f4e(\u60a8\u53ef\u4ee5\u81ea\u5df1\u770b\u770b)\u3002\u6709\u8da3\u7684\u662f\uff0c\u5bf9\u4e8e\u96f6\u8fc7\u96f6\u5b58\u50a8\uff0cL3\u4e2d\u7684256\u4f4d\u5b58\u50a8\u6027\u80fd\u51e0\u4e4e\u4e0eL2\u4e2d\u7684512\u4f4d\u5b58\u50a8\u6027\u80fd\u76f8\u540c\uff01\u5728\u6027\u80fd\u65b9\u9762(\u5728\u6b64\u57fa\u51c6\u6d4b\u8bd5\u4e2d)\uff0c\u5b83\u51e0\u4e4e\u4e3a\u60a8\u8d2d\u4e70\u4e86\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u6574\u4e2a\u7ea7\u522b\u3002\n\u901a\u5e38\u6211\u4f1a\u8bd5\u7740\u731c\u6d4b\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4f46\u8fd9\u6b21\u6211\u4e0d\u4f1a\u8fd9\u4e48\u505a\u4e86\u3002\u6211\u5c31\u662f\u4e0d\u77e5\u90539\u3002\u6574\u4e2a\u4e8b\u60c5\u975e\u5e38\u4ee4\u4eba\u8d39\u89e3\uff0c\u56e0\u4e3aL1\u4e4b\u540e\u7684\u4e00\u5207\u90fd\u662f\u5728\u7f13\u5b58\u7ebf\u7684\u57fa\u7840\u4e0a\u64cd\u4f5c\u7684\uff1a\u6211\u4eec\u5e0c\u671b\u6838\u5fc3\u5728\u4e00\u4e2a\u7ebf\u5185\u521b\u5efa\u7684\u7ec6\u7c92\u5ea6\u5b58\u50a8\u6a21\u5f0f\u57fa\u672c\u4e0a\u5bf9\u7f13\u5b58\u7cfb\u7edf\u7684\u5176\u4f59\u90e8\u5206\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u770b\u5230\u6574\u884c\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5185\u6838\u662f\u4ee5\u4e24\u4e2a256\u4f4d\u5757\u8fd8\u662f\u5355\u4e2a512\u4f4d\u5757\u5199\u5165\u9ad8\u901f\u7f13\u5b58\u7ebf\uff0c\u5728L3\u4e2d\u751a\u81f3\u5728RAM10\u4e2d\u5b58\u5728\u4e00\u4e9b\u8f83\u5927\u7684\u5f71\u54cd\u3002\n\u6211\u4eec\u53d1\u73b0\uff0c\u6700\u521d\u5728Skylake\u5ba2\u6237\u7aef\u4e0a\u53d1\u73b0\u7684\u5546\u5e97\u6d88\u9664\u4f18\u5316\u4ecd\u7136\u5b58\u5728\u4e8eIce Lake\u4e2d\uff0c\u5e76\u4e14\u5728\u6211\u4eec\u7684Fill\u57fa\u51c6\u4e2d\u7684\u6548\u7387\u5927\u7ea6\u662fFill\u57fa\u51c6\u7684\u4e24\u500d\u3002\u89c2\u5bdf\u5230\u6d88\u9664\u4e8696%\u7684L2\u5199\u56de(\u5230L3)\u548cL3\u5199\u56de(\u5230RAM)\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0cSkylake\u53ea\u670950%\u523060%\u3002\u6211\u4eec\u53d1\u73b0\uff0cL3\u533a\u57df\u7684\u52a0\u901f\u6bd4\u9ad8\u8fbe45%\uff0cRAM\u7684\u52a0\u901f\u6bd4\u7ea6\u4e3a25%\uff0c\u800cSkylake\u7684\u52a0\u901f\u6bd4\u4e0d\u523020%\u3002\n\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u9488\u5bf9L2\u7f13\u5b58\u6216\u66f4\u5927\u5927\u5c0f\u7684\u533a\u57df\u8fdb\u884c\u586b\u96f6\u5199\u5165\u65f6\uff0c256\u4f4d\u5199\u5165\u901a\u5e38\u6bd4512\u4f4d\u5199\u5165\u5feb\u5f97\u591a\u3002\u8fd9\u5bf9L2\u7684\u5f71\u54cd\u6700\u5927\uff0c\u5728L2\u4e2d\uff0c256\u4f4d\u8fc7\u96f6\u5199\u5165\u6bd4512\u4f4d\u5199\u5165\u5feb45%\u3002\u6211\u4eec\u53d1\u73b0\u5373\u4f7f\u5bf9\u4e8e\u975e\u96f6\u5199\u5165\u4e5f\u6709\u7c7b\u4f3c\u7684\u5f71\u54cd\uff0c\u4f46\u4ec5\u5728L2\u4e2d\u3002\n\u76ee\u524d\u8fd8\u6ca1\u6709\u53d1\u5e03\u7684Sunny Cove\u670d\u52a1\u5668\u82af\u7247\u662f\u5426\u4f1a\u8868\u73b0\u51fa\u540c\u6837\u7684\u4f18\u5316\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u3002\n\u9664\u975e\u4f60\u53ea\u4e3a\u81ea\u5df1\u7684\u7b14\u8bb0\u672c\u7535\u8111\u8fdb\u884c\u5f00\u53d1\uff0c\u5426\u5219\u622a\u81f32020\u5e745\u6708\uff0c\u51b0\u6e56\u90e8\u7f72\u5728\u4f60\u6240\u5173\u5fc3\u7684\u4e3b\u673a\u603b\u6570\u7684\u5f88\u5c0f\u4e00\u90e8\u5206\u4e0a\uff0c\u6240\u4ee5\u524d\u4e00\u7bc7\u6587\u7ae0\u4e2d\u7684\u6807\u9898\u5efa\u8bae\u662f\u9002\u7528\u7684\uff1a\u8fd9\u79cd\u4f18\u5316\u4e0d\u9002\u7528\u4e8e\u8db3\u591f\u7684\u786c\u4ef6\uff0c\u4e0d\u8db3\u4ee5\u8ba9\u4f60\u4e13\u95e8\u9488\u5bf9\u5b83\u3002\u8fd9\u79cd\u60c5\u51b5\u5728\u672a\u6765\u53ef\u80fd\u4f1a\u968f\u7740\u201c\u51b0\u6e56\u201d\u548c\u7eed\u96c6\u7684\u63a8\u51fa\u800c\u6539\u53d8\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f71\u54cd\u7684\u5927\u5c0f\u53ef\u80fd\u4f7f\u5176\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u503c\u5f97\u4f18\u5316\u3002\n\u5982\u679c\u4f60\u6709\u4ec0\u4e48\u8981\u8bf4\u7684\uff0c\u8bf7\u5728\u4e0b\u9762\u7559\u8a00\u6216\u5728\u9ed1\u5ba2\u65b0\u95fb\u4e0a\u8ba8\u8bba\u3002\n\u5b83\u5b9e\u9645\u4e0a\u4ecd\u5728\u4f7f\u7528evex\u7f16\u7801\u7684avx-512\u6307\u4ee4vmovdqu32\uff0c\u8fd9\u91cc\u7684\u6548\u7387\u66f4\u9ad8\u4e00\u4e9b\uff0c\u56e0\u4e3aavx-512\u5bf9\u504f\u79fb\u91cf\u7684\u7f16\u7801\u66f4\u7d27\u51d1\uff0c\u504f\u79fb\u91cf\u662f\u5411\u91cf\u5927\u5c0f\u7684\u500d\u6570(\u901a\u5e38\u662f\u8fd9\u6837)\u3002-\u21a9\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u541e\u5410\u91cf\u53ea\u51cf\u5c11\u4e86\u4e00\u534a\uff0c\u800c\u5f53\u6211\u4eec\u5728SKx\u4e0a\u67e5\u770b\u8c03\u5ea6\u9650\u5236\u65f6\uff0c\u541e\u5410\u91cf\u53ea\u6709\u56db\u5206\u4e4b\u4e00\uff0c\u56e0\u6b64\u6839\u636e\u8fd9\u4e2a\u975e\u5e38\u521d\u6b65\u7684\u7ed3\u679c\uff0c\u51b0\u6e56\u7684\u8c03\u5ea6\u9650\u5236\u4f3c\u4e4e\u4e0d\u90a3\u4e48\u4e25\u91cd(\u8fd9\u9700\u8981\u66f4\u6df1\u5165\u7684\u7814\u7a76\uff1a\u6211\u4eec\u4ece\u672a\u4f7f\u7528\u5546\u5e97\u5728SKx\u4e0a\u8fdb\u884c\u6d4b\u8bd5)\u3002-\u21a9\u3002\n\u4e25\u683c\u6765\u8bf4\uff0c\u65e0\u58f0\u51b2\u9500\u662f\u6d88\u9664\u7684\u5145\u5206\u6761\u4ef6\uff0c\u4f46\u4e0d\u662f\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u6b64\u662f\u6d88\u9664\u95e8\u5e97\u6570\u91cf\u7684\u4e0b\u9650\u3002\u636e\u6211\u6240\u77e5\uff0c100%\u7684\u95e8\u5e97\u90fd\u88ab\u6dd8\u6c70\u4e86\uff0c\u4f46\u5176\u4e2d4%\u7684\u95e8\u5e97\u662f\u975e\u9759\u9ed8\u56de\u5199\u7684(\u4f46\u4e0d\u662f\u4fee\u6539\u540e\u7684\u72b6\u6001)\u3002--\u21a9\u3002\n\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u53ef\u80fd\u662f\uff0c\u53ea\u5199\u5165\u4ea4\u66ff\u884c\u6bd4\u8fde\u7eed\u5199\u5165\u4e00\u534a\u6570\u636e\u7684\u6210\u672c\u8981\u9ad8\u4e00\u4e9b\u3002\u5f53\u7136\uff0c\u8fd9\u663e\u7136\u66f4\u63a5\u8fd1\u6838\u5fc3\uff0c\u56e0\u4e3a\u60a8\u63a5\u89e6\u7684\u9875\u9762\u6570\u91cf\u662f\u8fde\u7eed\u60c5\u51b5\u4e0b\u7684\u4e00\u534a\uff0c\u9700\u8981\u7684\u9875\u9762\u904d\u5386\u6570\u91cf\u662f\u4e00\u534a\uff0c\u9884\u53d6\u66f4\u6709\u6548\uff0c\u56e0\u4e3a\u60a8\u8de8\u8d8a\u4e86\u4e00\u534a\u76844K\u8fb9\u754c(4K\u8fb9\u754c\u5904\u7684\u9884\u53d6\u5b58\u50a8)\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u5373\u4f7f\u5728\u5185\u5b58\u63a5\u53e3\uff0c\u4ea4\u66ff\u884c\u5199\u5165\u4e5f\u53ef\u80fd\u6548\u7387\u8f83\u4f4e\uff0c\u56e0\u4e3a\u60a8\u4ece\u6253\u5f00\u6bcf\u4e2aDRAM\u9875\u4e2d\u83b7\u5f97\u7684\u597d\u5904\u8f83\u5c11\uff0c\u4e0d\u80fd\u8d85\u8fc764\u5b57\u8282\u7684\u7a81\u53d1\uff0c\u7b49\u7b49\u3002\u5728\u4e00\u79cd\u75c5\u6001\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u63a7\u5236\u5668\u5c06\u4ea4\u66ff\u884c\u6620\u5c04\u5230\u4ea4\u66ff\u901a\u9053\uff0c\u5219\u4ea4\u66ff\u884c\u53ef\u80fd\u662f\u5e26\u5bbd\u7684\u4e00\u534a\uff0c\u56e0\u4e3a\u60a8\u5c06\u4ec5\u8bbf\u95ee\u5355\u4e2a\u901a\u9053\u3002\u6211\u4eec\u53ef\u4ee5\u8bd5\u7740\u901a\u8fc7\u5c1d\u8bd5\u66f4\u7c97\u7c92\u5ea6\u7684\u4ea4\u7ec7\u6765\u9694\u79bb\u8fd9\u79cd\u6548\u679c\u3002--\u21a9\u3002\nL3\u80fd\u591f\u786e\u5b9a\u5f53\u524d\u7684\u8bbf\u95ee\u6a21\u5f0f\u662f\u5426\u4f1a\u66f4\u597d\u5730\u670d\u52a1\u4e8e\u7c7b\u4f3cMRU\u9a71\u9010\u7b56\u7565\u7684\u4e1c\u897f\uff0c\u4f8b\u5982\uff0c\u5f53\u6570\u636e\u6d41\u5728\u6ca1\u6709\u91cd\u7528\u7684\u60c5\u51b5\u4e0b\u88ab\u8bbf\u95ee\u65f6\uff0c\u6700\u597d\u662f\u5feb\u901f\u5c06\u8be5\u6570\u636e\u8e22\u51fa\u7f13\u5b58\uff0c\u800c\u4e0d\u662f\u9a71\u9010\u5176\u4ed6\u53ef\u80fd\u6709\u7528\u7684\u6570\u636e\u3002-\u21a9\n\u6bd5\u7adf\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f88\u6709\u53ef\u80fd\u4f1a\u5728\u540e\u6765\u7684GCC\u7248\u672c\u4e2d\u5f97\u5230\u4fee\u590d\u3002--\u21a9\u3002\n\u4ece\u6211\u4e0d\u505a\u4efb\u4f55\u6807\u91cf\u5934\u6216\u5c3e\u5904\u7406\u7684\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd9\u4e9b\u90fd\u662f\u61d2\u60f0\u7684\uff1a\u5373\u4f7f\u6ca1\u6709\u5269\u4e0b64\u5b57\u8282\uff0c\u6700\u540e\u7684\u8fed\u4ee3\u4e5f\u53ea\u6267\u884c\u5168\u5bbdSIMD\u5b58\u50a8\uff1a\u6211\u4eec\u6700\u591a\u752863\u5b57\u8282\u8986\u76d6\u7f13\u51b2\u533a\u3002\u6211\u4eec\u5728\u5206\u914d\u7f13\u51b2\u533a\u65f6\u4f1a\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u65b9\u6cd5\u662f\u786e\u4fdd\u5206\u914d\u81f3\u5c11\u8d85\u51fa\u8be5\u6570\u91cf\u3002\u8fd9\u5bf9\u4e8e\u8f83\u5927\u7684\u7f13\u51b2\u533a\u6765\u8bf4\u65e0\u5173\u7d27\u8981\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u4e0e\u51c6\u786e\u6267\u884c\u586b\u5145\u7684\u65b9\u6cd5\u76f8\u6bd4\uff0c\u6b64\u7248\u672c\u5bf9\u4e8e\u975e\u5e38\u5c0f\u7684\u7f13\u51b2\u533a\u5c06\u83b7\u5f97\u63d0\u5347\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4eec\u5bf9\u8fd9\u91cc\u7684\u5927\u7f13\u51b2\u5f88\u611f\u5174\u8da3\u3002--\u21a9\u3002\n\u6700\u6709\u53ef\u80fd\u7684\u662f\uff0cL1\u5177\u6709\u5355\u4e2a64\u5b57\u8282\u5bbd\u7684\u5199\u5165\u7aef\u53e3\uff0c\u5982SKX\uff0c\u5e76\u4e14\u5b58\u50a8\u7f13\u51b2\u5668\u5934\u90e8\u7684\u63d0\u4ea4\u903b\u8f91\u53ef\u4ee5\u5411\u524d\u770b\u4e00\u4e2a\u5b58\u50a8\uff0c\u4ee5\u67e5\u770b\u5b83\u662f\u5426\u5728\u540c\u4e00\u884c\u4e2d\uff0c\u4ee5\u4fbf\u5728\u5355\u4e2a\u5468\u671f\u5185\u5c06\u4e24\u4e2a\u5b58\u50a8\u51fa\u5217\u3002\u5982\u679c\u6ca1\u6709\u6b64\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u5728\u6bcf\u4e2a\u5468\u671f\u6267\u884c\u4e24\u4e2a\u5b58\u50a8\uff0c\u4f46\u53ea\u80fd\u63d0\u4ea4\u4e00\u4e2a\uff0c\u56e0\u6b64\u957f\u671f\u5b58\u50a8\u541e\u5410\u91cf\u5c06\u88ab\u9650\u5236\u4e3a\u6bcf\u4e2a\u5468\u671f\u4e00\u4e2a\u3002\u201c\u21a9\u3002\n\u6211\u6492\u8c0e\u4e86\u3002\u6211\u81f3\u5c11\u6709\u4e00\u4e9b\u60f3\u6cd5\u3002CPU\u529f\u7387\u9884\u7b97\u53ef\u80fd\u5728\u6838\u5fc3\u548c\u975e\u6838\u5fc3\u4e4b\u95f4\u52a8\u6001\u5212\u5206\uff0c\u5e76\u4e14\u7531\u4e8e512\u4f4d\u5b58\u50a8\u89e6\u53d1AVX-512\u529f\u7387\u9884\u7b97\uff0c\u6240\u4ee5\u7528\u4e8e\u975e\u6838\u5fc3\u7684\u529f\u7387\u8f83\u5c11\uff0c\u5e76\u4e14\u5b83\u4ee5\u8f83\u4f4e\u7684\u9891\u7387\u8fd0\u884c(\u53ef\u4ee5\u68c0\u67e5)\u3002\u8fd9\u4f3c\u4e4e\u4e0d\u592a\u53ef\u80fd\uff0c\u56e0\u4e3a\u8fd9\u5e94\u8be5\u4e0d\u4f1a\u660e\u663e\u5f71\u54cd\u6dd8\u6c70\u7684\u673a\u4f1a\u3002--\u21a9\u3002\n\u6211\u4eec\u6ca1\u6709\u4ed4\u7ec6\u89c2\u5bdfRAM\u4e2d\u7684\u5f71\u54cd\uff0c\u4f46\u5b83\u4ecd\u7136\u5b58\u5728\uff0c\u5c3d\u7ba1\u5e45\u5ea6\u8f83\u4f4e\u3002256\u4f4d\u8fc7\u96f6\u5199\u5165\u6bd4\u540c\u7c7b\u578b\u7684512\u4f4d\u5199\u5165\u5feb\u7ea610%.(\u5b8c)\u21a9", "note_en": "If you made it down to the  hardware survey on the last post, you might have  wondered where Intel\u2019s newest mainstream architecture was.  Ice Lake was missing!\n Well good news: it\u2019s here\u2026 and it\u2019s interesting. We\u2019ll jump right into the same analysis we did last time for Skylake client. If you haven\u2019t read the  first article you\u2019ll probably want to start there, because we\u2019ll refer to concepts introduced there without reexplaining them here.\n As usual, you can skip to the  summary for the bite sized version of the findings.\n   Let\u2019s first take a look at the overall performance: facing off  fill0 vs  fill1 as we\u2019ve been doing for every microarchitecture. Remember,  fill0 fills a region with zeros, while  fill1 fills a region with the value one (as a 4-byte  int).\n All of these tests run at 3.5 GHz. The max single-core turbo for this chip is at 3.7 GHz, but is difficult to run in a sustained manner at this frequency, because of AVX-512 clocking effects and because other cores occasionally activate. 3.5 GHz is a good compromise that keeps the chip running at the same frequency, while remaining close to the ideal turbo. Disabling turbo is not a good option, because this chip runs at 1.1 GHz without turbo, which would introduce a large distortion when exercising the uncore and RAM.\n  Figure 7a    Figure 7b   Those two have a couple of key differences. The first is this weird thing that  Figure 7a has going on in the right half of the L1 region: there are two obvious and distinct performance levels visible, each with roughly half the samples.\n  The second thing is that while both of the plots show  some of the zero optimization effect in the L3 and RAM regions, the effect is  much larger in  Figure 7b:\n  So what\u2019s the difference between these two plots? The top one was compiled with  -march=native, the second with  -march=icelake-client.\n Since I\u2019m compiling this  on the Ice Lake client system, I would expect these to do the same thing, but for  some reason they don\u2019t. The primary difference is that  -march=native  generates 512-bit instructions like so (for the main loop):\n . L4 :  vmovdqu32  [rax],  zmm0  add  rax ,  512  vmovdqu32  [ rax - 448 ] ,  zmm0  vmovdqu32  [ rax - 384 ] ,  zmm0  vmovdqu32  [ rax - 320 ] ,  zmm0  vmovdqu32  [ rax - 256 ] ,  zmm0  vmovdqu32  [ rax - 192 ] ,  zmm0  vmovdqu32  [ rax - 128 ] ,  zmm0  vmovdqu32  [ rax - 64 ] ,  zmm0  cmp  rax ,  r9  jne  . L4\n  . L4 :  vmovdqu32  [rax],  ymm0  vmovdqu32  [ rax + 32 ] ,  ymm0  vmovdqu32  [ rax + 64 ] ,  ymm0  vmovdqu32  [ rax + 96 ] ,  ymm0  vmovdqu32  [ rax + 128 ] ,  ymm0  vmovdqu32  [ rax + 160 ] ,  ymm0  vmovdqu32  [ rax + 192 ] ,  ymm0  vmovdqu32  [ rax + 224 ] ,  ymm0  add  rax ,  256  cmp  rax ,  r9  jne  . L4\n Most compilers use 256-bit instructions by default even for targets that support AVX-512 (reason:  downclocking, so the  -march=native version is the weird one here. All of the earlier x86 tests used 256-bit instructions.\n The observation that  Figure 7a results from running 512-bit instructions, combined with a peek at the data lets us immediately resolve the mystery of the bi-modal behavior.\n Here\u2019s the raw data for the 17 samples at a buffer size of 9864:\n  The performance follows a specific pattern with respect to the trials for both  fill0 and  fill1: it starts out slow (about 90 GB/s) for the first 9-10 samples then suddenly jumps up the higher performance level (close to 200 GB/s). It turns out this is just  voltage and frequency management biting us again. In this case there is no frequency change: the  raw data has a frequency column that shows the trials always run at 3.5 GHz. There is only a voltage change, and while the voltage is changing, the CPU runs with reduced dispatch throughput  2.\n The reason this effect repeats for every new set of trials (new buffer size value) is that each new set of trials is preceded by a 100 ms spin wait: this spin wait doesn\u2019t run any AVX-512 instructions, so the CPU drops back to the lower voltage level and this process repeats. The effect stops when the benchmark moves into the L2 region, because there it is slow enough that the 10 discarded warmup trials are enough to absorb the time to switch to the higher voltage level.\n We can avoid this problem simply by removing the 100 ms warmup (passing  --warmup-ms=0 to the benchmark), and for the rest of this post we\u2019ll discuss the no-warmup version (we keep the 10 warmup  trials and they should be enough).\n  So we\u2019re left with the second effect, which is that the 256-bit store version shows  very effective elimination, as opposed to the 512-bit version. For now let\u2019s stop picking favorites between 256 and 512 (push that on your stack, we\u2019ll get back to it), and just focus on the elimination behavior for 256-bit stores.\n Here\u2019s the closeup of the L3 region for the 256-bit store version, showing also the L2 eviction type, as discussed in the previous post:\n  Figure 8  We finally have the elusive (near) 100% elimination of redundant zero stores! The  fill0 case peaks at 96% silent (eliminated  3) evictions. Typical L3 bandwidth is ~59 GB/s with elimination and ~42 GB/s without, for a better than 40% speedup! So this is a potentially a big deal on Ice Lake.\n Like last time, we can also check the uncore tracker performance counters, to see what happens for larger buffers which would normally write back to memory.\n  Figure 9   As with the L3 case, we see that the store elimination appears 96% effective: the number of uncore to memory writebacks flatlines at 4% for the  fill0 case. Compare this to   Figure 3, which is the same benchmark running on Skylake-S, and note that only half the writes to RAM are eliminated.\n This chart also includes results for the  alt01 benchmark. Recall that this benchmark writes 64 bytes of zeros alternating with 64 bytes of ones. This means that, at best, only half the lines can be eliminated by zero-over-zero elimination. On Skylake-S, only about 50% of eligible (zero) lines were eliminated, but here we again get to 96% elimination! That is, in the  alt01 case, 48% of all writes were eliminated, half of which are all-ones and not eligible.\n The asymptotic speedup for the all zero case for the RAM region is less than the L3 region, at about 23% but that\u2019s still not exactly something to sneeze at. The speedup for the alternating case is 10%, somewhat less than half the benefit of the all zero case  4. In the L3 region, we also note that the benefit of elimination for  alt01 is only about 7%, much smaller than the ~20% benefit you\u2019d expect if you cut the 40% benefit the all-zeros case sees. We saw a similar effect in Skylake-S.\n Finally it\u2019s worth noting that this little uptick in uncore writes in the  fill0 case:\n  This happens right around the transition from L3 to RAM, and this, the writes flatline down to 0.04 per line, but this uptick is fairly consistently reproducible. So there\u2019s some interesting effect there, probably, perhaps related to the adaptive nature of the L3 caching  5.\n  If we rewind time, time to pop the mental stack and return to something we noticed earlier: that 256-bit stores seemed to get superior performance for the L3 region compared to 512-bit ones.\n Remember that we ended up with 256-bit and 512-bit versions due to unexpected behavior in the  -march flag. Rather they  relying on this weirdness  6, let\u2019s just write slighly lazy  7  methods that explicitly use 256-bit and 512-bit stores but are otherwise identical.  fill256_0 uses 256-bit stores and writes zeros, and I\u2019ll let you pattern match the rest of the names.\n   Figure 10  This chart shows only the the median of 17 trials. You can look at the raw data for an idea of the trial variance, but it is generally low.\n In the L1 region, the 512-bit approach usually wins and there is no apparent difference between writing 0 or 1 (the two halves of the moon mostly line up). Still, 256-bit stores are roughly  competitive with 512-bit: they aren\u2019t running at half the throughput. That\u2019s thanks to the second store port on Ice Lake. Without that feature, you\u2019d be limited to 112 GB/s at 3.5 GHz, but here we handily reach ~190 GB/s with 256-bit stores, and ~195 GB/s with 512-bit stores. 512-bit stores probably have a slight advantage just because of fewer total instructions executed (about half of the 256-bit case) and associated second order effects.\n  In the L2 region, however, the 256-bit approaches seem to pull ahead. This is a bit like the Buffalo Bills winning the Super Bowl: it just isn\u2019t supposed to happen.\n   Figure 11  The 256-bit benchmarks start roughly tied with their 512 bit cousins, but then steadily pull away as the region approaches the full size of the L2. By the end of the L2 region, they have nearly a ~13% edge. This applies to  both  fill256 versions \u2013 the zeros-writing and ones-writing flavors. So this effect doesn\u2019t seem explicable by store elimination: we already know ones are eliminated, and elimination only starts to play an obvious role when the region is L3-sized.\n In the L3, the situation changes: now the 256-bit version really pulls ahead,  but only the version that writes zeros. The 256-bit and 512-bit one-fill versions fall down in throughput, nearly to the same level (but the 256-bit version still seems  slightly but measurably ahead at ~2% faster). The 256-bit zero fill version is now ahead by roughly 45%!\n Let\u2019s concentrate only on the two benchmarks that write zero:  fill256_0 and  fill512_0, and turn on the L2 eviction counters (you probably saw that one coming by now):\n  Only the  L2 Lines Out Silent event is shown \u2013 the balance of the evictions are  non-silent as usual.\n Despite the fact that I had to leave the right axis legend just kind floating around in the middle of the plot, I hope the story is clear: 256-bit stores get eliminated at the usual 96% rate, but 512-bit stores are hovering at a decidedly Skylake-like ~56%. I can\u2019t be sure, but I expect this difference in store elimination largely explains the performance difference.\n I checked also the behavior with prefetching off, but the pattern is very similar, except with both approaches having reduced performance in L3 (you can  see for yourself). It is interesting to note that for zero-over-zero stores, the 256-bit store performance  in L3 is almost the same as the 512-bit store performance  in L2! It buys you almost a whole level in the cache hierarchy, performance-wise (in this benchmark).\n Normally I\u2019d take a shot at guessing what\u2019s going on here, but this time I\u2019m not going to do it. I just don\u2019t know  9. The whole thing is very puzzling, because everything after the L1 operates on a cache-line basis: we expect the fine-grained pattern of stores made by the core,  within a line to basically be invisible to the rest of the caching system which sees only full lines. Yet there is some large effect in the L3 and even in RAM  10 related to whether the core is writing a cache line in two 256-bit chunks or a single 512-bit chunk.\n  We have found that the store elimination optimization originally uncovered on Skylake client is still present in Ice Lake and is roughly twice as effective in our fill benchmarks. Elimination of 96% L2 writebacks (to L3) and L3 writebacks (to RAM) was observed, compared to 50% to 60% on Skylake. We found speedups of up to 45% in the L3 region and speedups of about 25% in RAM, compared to improvements of less than 20% in Skylake.\n We find that when zero-filling writes occur to a region sized for the L2 cache or larger, 256-bit writes are often significantly  faster than 512-bit writes. The effect is largest for the L2, where 256-bit zero-over-zero writes are up to  45% faster than 512-bit writes. We find a similar effect even for non-zeroing writes, but only in the L2.\n  It is an interesting open question whether the as-yet-unreleased  Sunny Cove server chips will exhibit this same optimization.\n  Unless you are developing only for your own laptop, as of May 2020 Ice Lake is deployed on a microscopic fraction of total hosts you would care about, so the headline advice in the previous post applies: this optimization doesn\u2019t apply to enough hardware for you to target it specifically. This might change in the future as Ice Lake and sequels roll out in force. In that case, the magnitude of the effect might make it worth optimizing for in some cases.\n     If you have something to say, leave a comment below or discuss on  Hacker News.\n    It\u2019s actually still using the EVEX-encoded AVX-512 instruction  vmovdqu32, which is somewhat more efficient here because AVX-512 has more compact encoding of offsets that are a multiple of the vector size (as they usually are).\u00a0 \u21a9\n  In this case, the throughput is only halved, versus the 1/4 throughput when we looked at dispatch throttling on  SKX, so based on this very preliminary result it seems like the dispatch throttling might be less severe in Ice Lake (this needs a deeper look: we never used stores to test on  SKX).\u00a0 \u21a9\n  Strictly speaking, a silent writeback is a  sufficient, but not a  necessary condition for elimination, so it is a lower bound on the number of eliminated stores. For all I know, 100% of stores are eliminated, but out of those 4% are written back not-silently (but not in a modified state).\u00a0 \u21a9\n  One reason could be that writing only alternating lines is somewhat more expensive than writing half the data but contiguously. Of course this is obviously true closer to the core, since you touch half the number of the pages in the contiguous case, need half the number of page walks, prefetching is more effective since you cross half as many 4K boundaries (prefetch stores at 4K boundaries) and so on. Even at the memory interface, alternating line writes might be less efficient because you get less benefit from opening each DRAM page, can\u2019t do longer than 64-byte bursts, etc. In a pathological case, alternating lines could be  half the bandwidth if the controller maps alternating lines to alternating channels, since you\u2019ll only be accessing a single channel. We could try to isolate this effect by trying more coarse grained interleaving.\u00a0 \u21a9\n  The L3 is capable of determining if the current access pattern would be better served by something like an  MRU eviction strategy, for example when a stream of data is being accessed without reuse, it would be better to kick that data out of the cache quickly, rather than evicting other data that may be useful.\u00a0 \u21a9\n  After all, there\u2019s a good chance it will be fixed in a later version of gcc.\u00a0 \u21a9\n  These are lazy in the sense that I don\u2019t do any scalar head or tail handling: the final iteration just does a full width  SIMD store even if there aren\u2019t 64 bytes left: we overwrite the buffer by up to 63 bytes. We account for this when we allocate the buffer by ensuring the allocation is oversized by at least that amount. This doesn\u2019t matter for larger buffers, but it means this version will get a boost for very small buffers versus approaches that do the fill exactly. In any case, we are interested in large buffers here.\u00a0 \u21a9\n  Most likely, the L1 has a single 64 byte wide write port, like  SKX, and the commit logic at the head of the store buffer can look ahead one store to see if it is in the same line in order to dequeue two stores in a single cycle. Without this feature, you could  execute two stores per cycle, but only commit one, so the long-run store throughput would be limited to one per cycle.\u00a0 \u21a9\n  Well I lied. I at least have some ideas. It may be that the CPU power budget is dynamically partitioned between the core and uncore, and with 512-bit stores triggering the AVX-512 power budget, there is less power for the uncore and it runs at a lower frequency (that could be checked). This seems unlikely given that it should not obviously affect the elimination chance.\u00a0 \u21a9\n  We didn\u2019t take a close look at the effect in RAM but it persists, albeit at a lower magnitude. 256-bit zero-over-zero writes are about 10% faster than 512-bit writes of the same type.\u00a0 \u21a9", "posttime": "2020-05-19 01:43:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5546\u5e97,lake,\u5b58\u50a8", "title": "\u51b0\u6e56\u5546\u5e97\u7684\u6dd8\u6c70", "title_en": "Ice Lake Store Elimination", "transed": 1, "url": "https://travisdowns.github.io/blog/2020/05/18/icelake-zero-opt.html", "via": "", "real_tags": ["\u5546\u5e97", "lake", "\u5b58\u50a8"]}, {"category": "", "categoryclass": "", "imagename": "54c5cf51c6f893a676d95ecb99a49c6c.png", "infoid": 1002667, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u8fde\u7eed14\u5929\u6bcf\u665a\u77614\u4e2a\u5c0f\u65f6\uff0c\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u5bf9\u8ba4\u77e5\u7684\u5f71\u54cd(\u901a\u8fc7\u5fc3\u7406\u8fd0\u52a8\u8b66\u6212\u4efb\u52a1\u3001\u81ea\u5b9a\u4e49\u7b2c\u4e00\u4eba\u79f0\u5c04\u51fb\u573a\u666f\u548cSAT\u8fdb\u884c\u8bc4\u4f30)\u3002\u6211\u662f\u4e00\u540d22\u5c81\u7684\u7537\u6027\uff0c\u901a\u5e38\u7761\u7720\u65f6\u95f4\u4e3a7-8\u5c0f\u65f6\u3002\n\u6211\u5b8c\u5168\u6e05\u9192(\u975e\u5e38\u7c97\u7565\u5730)85%\u7684\u65f6\u95f4\u662f\u6e05\u9192\u7684\uff0c10%\u7684\u65f6\u95f4\u662f\u4e2d\u5ea6\u56f0\u5026\u7684\uff0c5%\u7684\u65f6\u95f4\u662f\u5b8c\u5168\u7761\u7740\u7684\u3002\u901a\u8fc7\u73a915-20\u5206\u949f\u7684\u7535\u5b50\u6e38\u620f\uff0c\u6211\u53ef\u4ee5\u968f\u65f6\u4ece\u201c\u5165\u7761\u201d\u5230\u201c\u5b8c\u5168\u6e05\u9192\u201d\u3002\u6700\u7ec8\uff0c\u6211\u6bcf\u5929\u5927\u7ea6\u73a930-90\u5206\u949f\u7684\u89c6\u9891\u6e38\u620f\uff0c\u5728\u5b9e\u9a8c\u671f\u95f4\uff0c\u6211\u80fd\u591f\u5728\u6bcf\u5929\u8d85\u8fc716\u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\u91cc\u5145\u5206\u53d1\u6325\u6548\u7387\u3002\n\u6211\u6ca1\u6709\u6d4b\u91cf\u6211\u7684\u56f0\u5026\u7a0b\u5ea6\u3002\u7136\u800c\uff0c\u5728\u6574\u4e2a\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4e0d\u5f97\u4e0d\u62b5\u5236\u89c4\u5f8b\u7684\u7761\u7720\u51b2\u52a8\uff0c\u6709\u51e0\u6b21\u5f53\u6211\u4e0d\u60f3\u73a9\u7535\u5b50\u6e38\u620f\u7684\u65f6\u5019\uff0c\u6211\u975e\u5e38\u63a5\u8fd1\u5b9e\u9a8c\u5931\u8d25\uff0c\u6709\u4e00\u6b21\u6211\u5728\u6905\u5b50\u4e0a\u7761\u7740\u4e86\uff0c\u51e0\u5206\u949f\u540e\u88ab\u6211\u7684\u59bb\u5b50\u53eb\u9192\u3002\u8fd9\u4e2a\u7761\u7720\u65f6\u95f4\u8868\u6781\u96be\u7ef4\u6301\u3002\n\u7f3a\u4e4f\u5bf9\u8ba4\u77e5\u80fd\u529b\u7684\u5f71\u54cd\u662f\u4ee4\u4eba\u60ca\u8bb6\u7684\uff0c\u53ef\u80fd\u53cd\u6620\u4e86\u771f\u6b63\u7f3a\u4e4f\u8ba4\u77e5\u969c\u788d\uff0c\u6211\u5e0c\u671b\u8bc1\u660e\u7531\u4e8e\u957f\u671f\u7761\u7720\u5265\u593a\u800c\u7f3a\u4e4f\u8ba4\u77e5\u969c\u788d\uff0c\u7f3a\u4e4f\u76f2\u76ee\u7684\u504f\u5411\u6d4b\u91cf\uff0c\u7f3a\u4e4f\u7edf\u8ba1\u80fd\u529b\uff0c\u548c/\u6216\u5176\u4ed6\u56e0\u7d20\u3002\n\u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u5b9e\u9a8c\u63d0\u4f9b\u4e86\u5f3a\u6709\u529b\u7684\u8bc1\u636e\uff0c\u8bc1\u660e\u6211\u572812-14\u5929\u91cc\u6bcf\u5929\u77614\u5c0f\u65f6\u6ca1\u6709\u7ecf\u5386\u8fc7\u91cd\u5927\u7684\u8ba4\u77e5\u969c\u788d\uff0c\u800c\u4e14\u5b83\u63d0\u4f9b\u4e86\u5fae\u5f31\u7684\u63d0\u793a\u6027\u8bc1\u636e\uff0c\u8868\u660e\u6839\u672c\u6ca1\u6709\u8ba4\u77e5\u969c\u788d\u3002\n\u6211\u8ba1\u5212\u5728\u8fd9\u4e2a\u5b9e\u9a8c\u4e4b\u540e\u8fdb\u884c\u6025\u6027\u7761\u7720\u5265\u593a\u5b9e\u9a8c(75\u5c0f\u65f6\u4e0d\u7761\u89c9)\u548c\u66f4\u957f\u65f6\u95f4\u7684\u90e8\u5206\u7761\u7720\u5265\u593a\u5b9e\u9a8c(\u6bcf\u5929\u7761\u77204\u5c0f\u65f6\uff0c\u6301\u7eed(\u53ef\u80fd)30\u5929\u6216\u66f4\u957f\u65f6\u95f4)\u3002\n\u6211\u5bf9\u5c06\u6211\u7684\u7ed3\u679c\u63a8\u5e7f\u7ed9\u5176\u4ed6\u4eba\u6301\u8c28\u614e\u6001\u5ea6\uff0c\u5e76\u6b22\u8fce\u72ec\u7acb\u590d\u5236\u8fd9\u4e2a\u5b9e\u9a8c\u3002\n\u6211\u7528\u6765\u6267\u884c\u7edf\u8ba1\u548c\u7ed8\u5236\u56fe\u8868\u7684\u6240\u6709\u811a\u672c\u3001\u6240\u6709\u539f\u59cb\u6570\u636e\u4ee5\u53ca\u590d\u5236\u5b9e\u9a8c\u6240\u9700\u7684\u6240\u6709\u914d\u7f6e\u6587\u4ef6\u90fd\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\uff0c\u5206\u522b\u662fAimGood(5.99\u7f8e\u5143)\u548cInquisite6 Lab(30\u5929\u8bd5\u7528\u671f)\u3002\u8fd9\u91cc\u548cGitHub\u4e0a\u63d0\u4f9b\u4e86\u9884\u5206\u6790\u8ba1\u5212\u3002\n\u989d\u5916\u89c9\u9192\u7684\u7d2f\u79ef\u6210\u672c\uff1a\u6162\u6027\u7761\u7720\u9650\u5236\u548c\u5b8c\u5168\u7761\u7720\u5265\u593a\u5bf9\u795e\u7ecf\u884c\u4e3a\u529f\u80fd\u548c\u7761\u7720\u751f\u7406\u7684\u5242\u91cf\u53cd\u5e94\u5f71\u54cd\u8303\u4e1c\u6069H\uff0c\u9ea6\u65af\u6797G\uff0c\u7a46\u6797\u987fJM\uff0c\u4e01\u683c\u65afDF\u3002\u989d\u5916\u89c9\u9192\u7684\u7d2f\u79ef\u6210\u672c\uff1a\u6162\u6027\u7761\u7720\u9650\u5236\u548c\u5b8c\u5168\u7761\u7720\u5265\u593a\u5bf9\u795e\u7ecf\u884c\u4e3a\u529f\u80fd\u548c\u7761\u7720\u751f\u7406\u7684\u5242\u91cf\u53cd\u5e94\u6548\u5e94\u3002\u7761\u5427\u30022003\u5e743\u67081\u65e5\uff1b26(2)\uff1a117-26\u3002\u662f\u7531\u6c49\u65af\u00b7P\u00b7A\u00b7\u8303\u00b7\u4e1c\u6069\u3001\u683c\u96f7\u683c\u00b7\u6885\u65af\u6797\u3001\u73cd\u59ae\u7279\u00b7M\u00b7\u7a46\u6797\u987f\u548c\u5927\u536b\u00b7F\u00b7\u4e01\u683c\u65af\u57282003\u5e74\u53d1\u8868\u5728\u201c\u7761\u7720\u201d\u6742\u5fd7\u4e0a\u7684\u4e00\u9879\u7814\u7a76\u3002\n\u4ece\u90a3\u65f6\u8d77\uff0c\u5b83\u5df2\u7ecf\u6210\u4e3a\u7761\u7720\u79d1\u5b66\u4e2d\u6700\u8457\u540d\u7684\u5b9e\u9a8c\u4e4b\u4e00\uff0c\u7d2f\u79ef\u4e862700\u591a\u6b21\u5f15\u7528\uff0c\u5176\u53d1\u73b0\u8fdb\u5165\u4e86\u6d41\u884c\u6587\u5316\u3002\u7279\u522b\u662f\uff0c\u4eba\u4eec\u6ca1\u6709\u6ce8\u610f\u5230\u7531\u4e8e\u7761\u7720\u4e0d\u8db3\u800c\u9020\u6210\u7684\u8ba4\u77e5\u969c\u788d\uff0c\u4ee5\u53ca\u8fde\u7eed\u4e24\u5468\u6bcf\u665a\u77616\u4e2a\u5c0f\u65f6\u5c31\u8db3\u4ee5\u4ea7\u751f\u91cd\u5927\u8ba4\u77e5\u969c\u788d\u7684\u60f3\u6cd5\u4f3c\u4e4e\u90fd\u6e90\u4e8e\u8fd9\u9879\u7814\u7a76\u3002\n\u6211\u5bf9\u8fd9\u9879\u7814\u7a76\u7684\u53d1\u73b0\u5f88\u611f\u5174\u8da3\uff0c\u5bf9\u9a6c\u4fee\u00b7\u6c83\u514b(Matthew Walker)\u7684\u201c\u4e3a\u4ec0\u4e48\u6211\u4eec\u7761\u89c9\u201d\u7684\u8c03\u67e5\u63d0\u9ad8\u4e86\u6211\u5bf9\u7761\u7720\u79d1\u5b66\u7684\u5174\u8da3\uff0c\u6211\u51b3\u5b9a\u5c1d\u8bd5\u90e8\u5206\u590d\u5236\u548c\u63a8\u5e7f\u5b83\u3002\n\u5b9e\u9a8c\u524d7\u5929\uff0c\u6211\u7ed9\u81ea\u5df18\u5c0f\u65f6(23\uff1a30-07\uff1a30)\u7684\u7761\u7720\u65f6\u95f4\uff0c\u4ee5\u786e\u4fdd\u6211\u6ca1\u6709\u4efb\u4f55\u7761\u7720\u6b20\u8d26\u3002\u6211\u8fd9\u51e0\u5929(2020-03-27\u52302020-04-02)\u7684\u5e73\u5747\u7761\u7720\u65f6\u95f4\u662f7.78\u5c0f\u65f6(\u6807\u51c6\u8bef\u5dee\uff1a0.15\u5c0f\u65f6)\u3002\n\u6211\u6bcf\u665a(3\uff1a30-7\uff1a30)\u77614\u4e2a\u5c0f\u65f6\uff0c\u8fde\u7eed14\u5929(Van Donen\u7b49\u4eba\u7684\u5b9e\u9a8c\u6761\u4ef6\u4e4b\u4e00)\u30022003\u5e74)\uff0c\u6240\u6709\u5176\u4ed6\u7761\u7720\u90fd\u88ab\u7981\u6b62\uff0c\u5e76\u5c06\u5265\u593a\u7761\u7720(\u6cbb\u7597)\u7b2c12\u5929\u3001\u7b2c13\u5929\u548c\u7b2c14\u5929\u7684\u8ba4\u77e5\u80fd\u529b\u4e0e\u6b63\u5e38\u72b6\u6001(\u5bf9\u7167\u7ec4)\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u6211\u6ca1\u6709\u6bcf\u5929\u6d4b\u8bd5\u81ea\u5df1\uff0c\u56e0\u4e3aVan Donen\u7b49\u4eba\u57284\u5c0f\u65f6\u6761\u4ef6\u4e0b\u7684\u8ba4\u77e5\u7f3a\u9677\u662f\u5355\u8c03\u589e\u52a0\u7684\uff0c\u800c\u4e14\u6211\u53ea\u5bf9\u7761\u7720\u5265\u593a\u6700\u4e25\u91cd\u7684\u540e\u679c\u611f\u5174\u8da3\u3002\n\u5728\u5b9e\u9a8c\u671f\u95f4\uff0c\u6211\u4e00\u76f4\u5446\u5728\u5ba4\u5185\u3002\u6211\u5de5\u4f5c\uff0c\u73a9\u7535\u5b50\u6e38\u620f\uff0c\u770b\u7535\u5f71\uff0c\u6d4f\u89c8\u4e92\u8054\u7f51\uff0c\u770b\u4e66\uff0c\u5728\u516c\u5bd3\u91cc\u8d70\u6765\u8d70\u53bb\uff0c\u4f46\u6ca1\u6709\u53c2\u52a0\u4efb\u4f55\u6fc0\u70c8\u7684\u6d3b\u52a8\u3002\u6211\u907f\u514d\u9633\u5149\u76f4\u5c04\uff0c\u7761\u89c9\u65f6\u5173\u6389\u6240\u6709\u7684\u706f\u3002\n\u5728\u5b9e\u9a8c\u524d\u4e24\u5468\u6216\u5b9e\u9a8c\u671f\u95f4\uff0c\u6211\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u5496\u5561\u56e0\u3001\u9152\u7cbe\u3001\u70df\u8349\u548c/\u6216\u836f\u7269\u3002\n\u5728\u5b9e\u9a8c\u524d\u7684\u4e24\u5468\u91cc\uff0c\u6211\u53ea\u5728\u4e2d\u534812\u70b9\u5230\u665a\u4e0a8\u70b9\u8fdb\u98df\uff0c\u5e76\u5728\u5b9e\u9a8c\u671f\u95f4\u7ee7\u7eed\u8fd9\u4e2a\u65f6\u95f4\u8868\u3002\u6211\u7684\u996e\u98df\u6ca1\u6709\u5176\u4ed6\u9650\u5236\u3002\n\u6211\u6ca1\u6709\u4efb\u4f55\u5185\u79d1\u3001\u7cbe\u795e\u75c5\u5b66\u6216\u7761\u7720\u76f8\u5173\u7684\u75be\u75c5\uff0c\u9664\u4e86\u5076\u5c14\u4f1a\u611f\u5230\u80f8\u90e8\u6709\u538b\u529b\u76f8\u5173\u7684\u538b\u529b\uff0c\u5728\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\u6211\u4e5f\u6ca1\u6709\u7ecf\u5386\u4efb\u4f55\u4e0d\u5bfb\u5e38\u7684\u75c7\u72b6\u3002\n\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u6211\u65e2\u6ca1\u6709\u4e0a\u8fc7\u591c\u73ed\uff0c\u4e5f\u6ca1\u6709\u4e0a\u8fc7\u8f6e\u73ed\u3002\u5728\u5b9e\u9a8c\u4e4b\u524d\u76843\u4e2a\u6708\u91cc\uff0c\u6211\u6ca1\u6709\u8de8\u8d8a\u65f6\u533a\u65c5\u884c\u3002\n\u56fe4.\u6211\u5728\u5b9e\u9a8c\u4e2d\u6267\u884c\u7684\u4efb\u52a1\u7247\u6bb5\u3002\u5de6\uff1aPvt\u3002\u4e2d\u5fc3\uff1aGuzey_Arena_0\u3002\u53f3\uff1aSat\u3002\u4f7f\u7528ezgif.com\u521b\u5efa\u3002\n\u7cbe\u795e\u8fd0\u52a8\u8b66\u6212\u4efb\u52a1\u672c\u8d28\u4e0a\u662f\u4e00\u9879\u957f\u8fbe10\u5206\u949f\u7684\u53cd\u5e94\u6d4b\u8bd5\uff0c\u5df2\u7ecf\u6210\u4e3a\u7761\u7720\u7814\u7a76\u4e2d\u8bc4\u4f30\u6e05\u9192\u7a0b\u5ea6\u7684\u6807\u51c6\u65b9\u6cd5\u3002\u5206\u6790PVT\u6570\u636e\u7684\u6807\u51c6\u65b9\u6cd5\u662f\u8ba1\u7b97\u4f1a\u8bdd\u4e2d\u7684\u6d41\u901d\u6b21\u6570(\u54cd\u5e94\u65f6\u95f4\u4e3a&gt\uff1b=500ms\u7684\u8bd5\u9a8c)\u3002\u8fd9\u5c31\u662f\u6211\u5206\u6790\u6570\u636e\u7684\u65b9\u5f0f\u3002\nguzey_arena_0\u662f\u7b2c\u4e00\u4eba\u79f0\u5c04\u51fb\u573a\u666f\uff0c\u5728\u8be5\u573a\u666f\u4e2d\uff0c\u73a9\u5bb6\u5fc5\u987b\u5c3d\u5feb\u6740\u6b7b\u5728\u7ade\u6280\u573a\u5468\u56f4\u5954\u8dd1\u768420\u4e2a\u673a\u5668\u4eba(\u4e00\u6b21\u670910\u4e2a\u673a\u5668\u4eba\u51fa\u73b0\uff0c\u5b83\u4eec\u5728\u6740\u622e\u65f6\u5728\u968f\u673a\u4f4d\u7f6e\u91cd\u65b0\u51fa\u73b0)\u3002\u8fd9\u4e00\u573a\u666f\u9700\u8981\u5feb\u901f\u53cd\u5e94\u65f6\u95f4(\u673a\u5668\u4eba\u7ecf\u5e38\u6539\u53d8\u65b9\u5411\u5e76\u51fa\u73b0\u5728\u968f\u673a\u4f4d\u7f6e)\u3001\u6218\u672f\u601d\u7ef4(\u4f60\u5fc5\u987b\u9009\u62e9\u8ffd\u9010\u54ea\u4e2a\u673a\u5668\u4eba\u4ee5\u53ca\u5728\u54ea\u91cc\u5bfb\u627e\u5b83\u4eec)\u548c\u7cbe\u7ec6\u8fd0\u52a8\u6280\u80fd(\u4f60\u5fc5\u987b\u4f7f\u7528\u952e\u76d8\u56db\u5904\u79fb\u52a8\uff0c\u5e76\u4f7f\u7528\u9f20\u6807\u7cbe\u786e\u7784\u51c6)\u3002\nGUZEY_ARENA_0\u662f\u6211\u6700\u5173\u5fc3\u7684\u8003\u8bd5\u3002\u6211\u8ba4\u4e3a\u5b83\u4f18\u4e8ePVT\u6709\u51e0\u4e2a\u539f\u56e0\uff1a\n\u6211\u76f8\u4fe1\u5b83\u5bf9\u6211\u6765\u8bf4\u66f4\u5177\u5916\u5728\u6548\u529b\u3002guzey_arena_0\u6bd4PVT\u66f4\u5438\u5f15\u4eba\uff0c\u4e5f\u66f4\u597d\u5730\u53cd\u6620\u4e86\u6211\u901a\u5e38\u4ece\u4e8b\u7684\u6d3b\u52a8(\u5199\u4f5c\u3001\u7f16\u7801\u3001\u73a9\u89c6\u9891\u6e38\u620f)\u3002PVT\u53ef\u80fd\u662f\u50cf\u957f\u9014\u9a7e\u9a76\u8fd9\u6837\u4e4f\u5473\u7684\u4efb\u52a1\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6a21\u5f0f\uff0c\u4f46\u6211\u6bcf\u5929\u5f88\u5c11\u6709\u8fd9\u6837\u7684\u4efb\u52a1(\u800c\u4e14\u6839\u672c\u4e0d\u5f00\u8f66)\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u9700\u8981\u5b9e\u9645\u7684\u601d\u8003\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u53cd\u5e94\u65f6\u95f4\uff0c\u56e0\u6b64\u66f4\u9002\u5408\u4e8e\u8bc4\u4f30\u5bf9\u590d\u6742\u8ba4\u77e5\u80fd\u529b\u7684\u5f71\u54cd\u3002\n\u5b83\u540c\u65f6\u6d4b\u8bd5\u51e0\u79cd\u8ba4\u77e5\u548c\u8fd0\u52a8\u6280\u80fd\uff0c\u56e0\u6b64\u8fd9\u4e09\u79cd\u80fd\u529b\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u90fd\u4f1a\u88ab\u6d4b\u8bd5\u53d1\u73b0\u3002\nSAT\u662f\u4e00\u9879\u957f\u8fbe3\u5c0f\u65f6\u7684\u7efc\u5408\u6d4b\u8bd5\uff0c\u7531\u8bed\u8a00(\u6587\u672c\u7406\u89e3\u3001\u8bed\u6cd5\u7b49)\u7ec4\u6210\u3002\u8fd8\u6709\u6570\u5b66\u9898\u3002\u5728\u7f8e\u56fd\uff0c\u8fd9\u662f\u8bc4\u4f30\u5927\u5b66\u51c6\u5907\u60c5\u51b5\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u6bcf\u5e74\u6709\u6570\u767e\u4e07\u9ad8\u4e2d\u751f\u53c2\u52a0\u3002\n\u6211\u5728\u5f00\u59cb\u5265\u593a\u7761\u7720\u524d1\u5929\u4ee5\u53ca\u7ed3\u675f\u7761\u7720\u5265\u593a\u540e\u7b2c4\u5929\u548c\u7b2c5\u5929\u8fdb\u884c\u4e86\u5bf9\u7167\u6d4b\u91cf\u3002\u6211\u5728\u5265\u593a\u7761\u7720\u7684\u7b2c12\u5929\u3001\u7b2c13\u5929\u548c\u7b2c14\u5929\u8fdb\u884c\u4e86\u6cbb\u7597\u6d4b\u91cf\u3002\n\u5728\u9884\u5206\u6790\u8ba1\u5212(PAP)\u4e2d\u8be6\u7ec6\u63cf\u8ff0\u4e86\u6570\u636e\u6536\u96c6\uff0c\u4ee5\u53ca\u6211\u5904\u7406\u5b9e\u8df5\u6548\u679c\u7684\u7b56\u7565\u3002\u8ba8\u8bba\u4e2d\u63cf\u8ff0\u4e86\u4e0ePAP\u7684\u6240\u6709\u504f\u5dee\u3002\n\u6211\u5bf9PVT\u548cGuzey_Arena\u8fdb\u884c\u914d\u5bf9t\u68c0\u9a8c\uff0c\u5c06\u6cbb\u7597\u548c\u63a7\u5236\u6761\u4ef6\u7684\u5747\u503c\u57280.025.0 5\u663e\u8457\u6027\u6c34\u5e73(0.0 5\u663e\u8457\u6027\u6c34\u5e73\uff0cBonferroni\u6821\u6b632\u6b21\u6bd4\u8f83)\u4e0e\u53cc\u4fa7\u66ff\u4ee3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\u3002\n\u6211\u6ca1\u6709\u63d0\u5230t\u68c0\u9a8c\u5c06\u662f\u914d\u5bf9t\u68c0\u9a8c\uff0c\u56e0\u4e3a\u6211\u6ca1\u6709\u610f\u8bc6\u5230\u72ec\u7acb\u6837\u672c\u7684t\u68c0\u9a8c\u548c\u914d\u5bf9\u6837\u672c\u7684t\u68c0\u9a8c\u662f\u4e0d\u540c\u7684\u3002\n\u5728pap\u4e2d\uff0c\u6211\u8ba1\u7b97\u4e86pvt\u548cguzey_arena_0\u6240\u9700\u7684\u6837\u672c\u5927\u5c0f\uff0c\u4ee5\u4fbf\u80fd\u591f\u57280.025\u7684\u663e\u8457\u6027\u6c34\u5e73\u548c0.895\u6b21\u65b9(0.895\u6b21\u65b9\u786e\u4fdd\u6211\u8fbe\u52300.8\u8054\u5408\u6b21\u65b9(\u5982\u679c\u8fd9\u4e24\u4e2a\u5047\u8bbe\u90fd\u4e3a\u5047\uff0c\u5219\u6b63\u786e\u62d2\u7edd\u8fd9\u4e24\u4e2a\u96f6\u5047\u8bbe\u7684\u6982\u7387)\u4e0b\u5206\u522b\u68c0\u6d4b\u52300.8%\u548c0.5%\u7684\u6548\u679c\u5927\u5c0f)\u3002\n\u8ba1\u7b97\u7684\u6837\u672c\u91cf\u662fPVT\u768439\u5bf9\u89c2\u6d4b\u548cGuzey_ARENA_0\u768499\u5bf9\u89c2\u6d4b\u3002\u8fd9\u4e9b\u662f\u6211\u6536\u96c6\u7684\u6837\u672c\u5927\u5c0f\u3002\n\u7136\u800c\uff0c\u8fd9\u4e9b\u6837\u672c\u91cf\u8ba1\u7b97\u662f\u4e0d\u6b63\u786e\u7684\u3002\u7531\u4e8e\u914d\u5bf9t-\u68c0\u9a8c\u7684\u529f\u6548\u9ad8\u4e8e\u72ec\u7acb\u6837\u672ct-\u68c0\u9a8c\uff0c\u7ed3\u679c\u8868\u660e\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u6837\u672c\u5927\u5c0f\uff0c\u6211\u80fd\u591f\u68c0\u6d4b\u5230\u7684\u6548\u5e94\u5927\u5c0f\u5206\u522b\u662fpvt\u76840.58%\u548cguzey_arena_0\u76840.35%(\u57280.025\u7684\u663e\u8457\u6027\u6c34\u5e73\u548c0.895\u7684\u5e42)\u3002\n\u56fe5.\u5de6\uff1a\u79d1\u6069\u7684d\u4e3a0.58\u3002\u53f3\uff1a\u79d1\u6069\u7684D\u4e3a0.35\u3002\u548cR\u5fc3\u7406\u5b66\u5bb6\u4e00\u8d77\u521b\u9020\u7684\u3002\n\u9274\u4e8e\u89c2\u5bdf\u7684\u6570\u91cf\u975e\u5e38\u5c11\uff0c\u6211\u4e0d\u4f1a\u5bf9SAT\u6570\u636e\u8fdb\u884c\u4efb\u4f55\u7edf\u8ba1\u3002\n\u8003\u8651\u5230\u6211\u5728\u8ba8\u8bbaSAT\u7ed3\u679c\uff0c\u5c3d\u7ba1\u6211\u6ca1\u6709\u5bf9\u5b83\u4eec\u8fdb\u884c\u4efb\u4f55\u7edf\u8ba1\uff0c\u4f46\u6211\u53ea\u4fee\u6b63\u4e862\u4e2a\u6bd4\u8f83\uff0c\u8fd9\u8ba9\u6211\u611f\u5230\u6709\u70b9\u5947\u602a\u3002\n\u6458\u8981\uff1a\u5728\u5bf9\u7167\u7ec4\u548c\u6cbb\u7597\u6761\u4ef6\u4e0b\uff0c\u6211\u7684PVT\u8868\u73b0\u5728\u7edf\u8ba1\u5b66\u4e0a\u6ca1\u6709\u663e\u8457\u5dee\u5f02\u3002\n\u6458\u8981\uff1a\u5728\u5bf9\u7167\u7ec4\u548c\u6cbb\u7597\u6761\u4ef6\u4e0b\uff0c\u6211\u7684Guzey_arena_0\u6027\u80fd\u6ca1\u6709\u7edf\u8ba1\u5b66\u4e0a\u7684\u663e\u8457\u5dee\u5f02\u3002\n\u63a7\u5236\u5206\u6570(\u6570\u5b66\uff0c\u8bed\u6587)\uff1a(710,760)\uff0c(780,760)(750,690)\uff1b\u6cbb\u7597\u5206\u6570(\u6570\u5b66\uff0c\u8bed\u6587)\uff1a(730,720)\uff0c(790,740)\uff0c(790,750)(\u8d8a\u591a\u8d8a\u597d)\u3002\n\u6211\u7684\u5173\u952e\u5047\u8bbe\u662fPVT\u4e0a\u7684\u5931\u8bef\u6570\u91cf\u589e\u52a0\u4e86\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u9879\u65e0\u804a\u5f97\u50cf\u5730\u72f1\u4e00\u6837\u7684\u4efb\u52a1\u3002\u4ec5\u4ec5\u76ef\u7740\u7535\u8111\u770b\u5c31\u662f10\u5206\u949f\uff0c\u7b49\u5f85\u7ea2\u70b9\u5468\u671f\u6027\u5730\u51fa\u73b0\u3002\u6240\u4ee5\u6211\u8ba4\u4e3a\u88ab\u5265\u593a\u7761\u7720\u7684\u4eba\u53ea\u662f\u5728\u4efb\u52a1\u8fc7\u7a0b\u4e2d\u7761\u7740\u4e86\uff0c\u4f46\u5176\u4ed6\u65b9\u9762\u529f\u80fd\u6b63\u5e38\uff0c\u4ed6\u4eec\u7684\u8ba4\u77e5\u529f\u80fd\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u6211\u9884\u8ba1\u6211\u7684PVT\u6027\u80fd\u4f1a\u4e0b\u964d\uff0c\u4f46\u827e\u59c6\u795e\u7684\u6027\u80fd\u4e0d\u4f1a\u4e0b\u964d\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u9879\u6709\u8da3\u7684\u4efb\u52a1\uff0c\u5c3d\u7ba1\u5b83\u4e3b\u8981\u4f9d\u8d56\u4e8e\u6ce8\u610f\u529b\u6765\u63d0\u9ad8\u6027\u80fd\u3002\n\u6211\u7684\u7b2c\u4e00\u4e2a\u5047\u8bbe\u6ca1\u6709\u5f97\u5230\u8bc1\u5b9e\u3002\u5728\u5bf9\u7167\u7ec4\u548c\u6cbb\u7597\u6761\u4ef6\u4e0b\uff0c\u6211\u7684PVT\u8868\u73b0\u6ca1\u6709\u5dee\u522b\u3002\u6211\u4ee5\u4e3a\u5728\u6d4b\u8bd5\u671f\u95f4\u6211\u4f1a\u5f00\u59cb\u5165\u7761\uff0c\u8fdb\u5165\u5fae\u7761\u72b6\u6001\uff0c\u4f46\u4f3c\u4e4e\u89c6\u9891\u6e38\u620f-\u6bcf\u5f53\u6211\u611f\u89c9\u592a\u56f0\u7684\u65f6\u5019\u5c31\u73a9-\u523a\u6fc0\u6211\u5230\u4e86\u8fd9\u6837\u7684\u7a0b\u5ea6\uff0c\u5373\u4f7f\u505a\u4e00\u4e2a\u65e0\u804a\u768410\u5206\u949f\u957f\u7684\u6d4b\u8bd5\u4e5f\u4e0d\u8db3\u4ee5\u8bf1\u5bfc\u5fae\u7761\u3002\n\u6211\u76f8\u4fe1\u6211\u7684PVT\u6570\u636e\u8d28\u91cf\u4e0d\u662f\u5f88\u9ad8\u3002\u9996\u5148\uff0c\u867d\u7136\u6211\u8ba1\u5212\u57287\uff1a40\u300113\uff1a00\u300113\uff1a20\u300113\uff1a40\u300116\uff1a00\u300116\uff1a20\u300116\uff1a40\u300119\uff1a20\u300119\uff1a40\u300122\uff1a00\u300122\uff1a20\u300122\uff1a40\u4e58\u5750PVT\uff0c\u4f46\u6709\u65f6\u4f1a\u5fd8\u8bb0\uff0c\u6709\u65f6\u4f1a\u5728\u6307\u5b9a\u65f6\u95f4\u5185\u5fd9\u788c\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u6211\u5728\u6307\u5b9a\u65f6\u95f4\u76845-10\u5206\u949f\u5185\u53c2\u52a0\u4e86\u7edd\u5927\u591a\u6570\u6d4b\u8bd5(\u6700\u5927\u5ef6\u8fdf\uff1a22\u5206\u949f)\uff0c\u4f46\u6211\u6ca1\u6709\u5b8c\u5168\u6309\u65f6\u53c2\u52a0PVT\u3002\u6709\u4eba\u53ef\u80fd\u4f1a\u4e89\u8fa9\u8bf4\uff0c\u6211\u7b56\u7565\u6027\u5730\u63a8\u8fdf\u4e86PVT\u8bfe\u7a0b\uff0c\u4ee5\u4fbf\u5728\u6211\u5f00\u59cb\u611f\u89c9\u66f4\u8b66\u89c9\u7684\u65f6\u5019\u53c2\u52a0\u6d4b\u8bd5\u3002\u6b64\u5916\uff0c\u5728\u8fdb\u884c\u63a7\u5236\u6d4b\u91cf\u7684\u6700\u540e\u4e24\u5929\u91cc\uff0c\u6211\u975e\u5e38\u65e0\u804a\uff0c\u6709\u65f6\u4f1a\u5206\u5fc3\u5e76\u9677\u5165\u601d\u8003\uff0c\u8fd9\u5bfc\u81f4\u6211\u6bcf\u4e2a\u4f1a\u8bdd\u90fd\u4f1a\u67093\u52304\u6b21\u5931\u8bef(\u5982\u56fe1\u6240\u793a)\u3002\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u4e9b\u5931\u8bef\u4ee3\u8868\u6211\u7f3a\u4e4f\u8b66\u89c9\u6027\u3002\u6700\u540e\uff0c\u6211\u4e0d\u5f97\u4e0d\u5c06\u6700\u540e\u4e00\u6b21\u6cbb\u7597\u65e5\u7684\u6700\u540e3\u6b21\u6d4b\u8bd5\u7684\u65f6\u95f4\u4ece22\uff1a00\uff0c22\uff1a20\uff0c22\uff1a40\u6539\u4e3a21\uff1a00\uff0c21\uff1a20\uff0c21\uff1a40\uff0c\u56e0\u4e3a\u6211\u572822\uff1a00\u4e0a\u5e8a\u7761\u89c9\uff0c\u800c\u6211\u5728\u64b0\u5199\u65b9\u6848\u65f6\u6ca1\u6709\u8003\u8651\u5230\u8fd9\u4e00\u70b9(\u6240\u6709\u8fd9\u4e9b\u66f4\u6539\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230)\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u8ba4\u4e3aPVT\u7684\u6570\u636e\u6709\u529b\u5730\u8868\u660e\uff0c\u5728\u5b9e\u9a8c\u671f\u95f4\uff0c\u6211\u80fd\u591f\u63a7\u5236\u81ea\u5df1\u7684\u56f0\u5026\u7a0b\u5ea6\uff0c\u4f46\u6211\u4e0d\u8ba4\u4e3a\u53ef\u4ee5\u4ece\u4e2d\u5f97\u51fa\u592a\u591a\u5176\u4ed6\u7ed3\u8bba\u3002\u5728\u6211\u770b\u6765\uff0c\u8fd9\u79cd\u89e3\u91ca\u4f3c\u4e4e\u5f88\u6709\u8bf4\u670d\u529b\uff0c\u4f46\u6211\u6b22\u8fce\u4efb\u4f55\u53ef\u80fd\u6311\u6218\u5b83\u7684\u8fdb\u4e00\u6b65\u6279\u8bc4\u3002\n\u6211\u6ca1\u6709\u628a\u63e1\u3002\u6211\u4e0d\u8ba4\u4e3a\u6211\u6709\u4efb\u4f55\u7a81\u53d8\u4f7f\u6211\u9700\u8981\u66f4\u5c11\u7684\u7761\u7720\uff0c\u56e0\u4e3a\u6211\u901a\u5e38\u7761\u77207-8\u5c0f\u65f6\u3002\u6211\u8ba4\u4e3a\u6700\u5408\u7406\u7684\u89e3\u91ca\u662f\uff0c\u6211\u7684\u8ba4\u77e5\u8868\u73b0\u5e76\u6ca1\u6709\u53d7\u5230\u6162\u6027\u5931\u7720\u7684\u592a\u5927\u5f71\u54cd\u3002\n\u4f3c\u4e4e\u4eba\u4eec\u5bf9\u7761\u7720\u4e0d\u8db3\u7684\u53cd\u5e94\u5dee\u5f02\u5f88\u5927\u3002\u4f8b\u5982\uff0cVan Donen\u7b49\u4eba\u30022004\u5e74\u8303\u4e1c\u6069H\uff0c\u9ea6\u65af\u6797G\uff0cDinges DF\u3002\u5904\u7406\u75b2\u52b3\u548c\u8868\u73b0\u7684\u65f6\u95f4\u52a8\u6001\u4e2d\u7684\u4e2a\u4f53\u95f4\u5dee\u5f02\uff1a\u91cd\u8981\u6027\u548c\u6280\u5de7\u3002\u822a\u7a7a\u3001\u592a\u7a7a\u548c\u73af\u5883\u533b\u5b66\u30022004\u5e743\u67081\u65e5\uff1b75(3)\uff1aA147-54\u3002(\u540c\u4e00\u7b2c\u4e00\u4f5c\u8005\u7684\u53e6\u4e00\u7bc7\u8bba\u6587)\u53d1\u73b0\uff1a\n\u901a\u8fc7\u7cbe\u795e\u8fd0\u52a8\u8b66\u6212\u4efb\u52a1\u7684\u8868\u73b0\u5931\u8bef\u6765\u8861\u91cf(13)\uff0c\u53d1\u73b0\u4e00\u4e9b\u53d7\u8bd5\u8005\u56e0\u7761\u7720\u4e0d\u8db3\u800c\u53d7\u5230\u7684\u635f\u5bb3\u6bd4\u5176\u4ed6\u53d7\u8bd5\u8005\u4e25\u91cd\u5f97\u591a(\u56fe1\uff0c\u5de6\u4fa7\u9762\u677f)\u3002\u56e0\u6b64\uff0c\u4e00\u4e9b\u53d7\u8bd5\u8005\u4f3c\u4e4e\u76f8\u5bf9\u5bb9\u6613\u53d7\u5230\u7761\u7720\u4e0d\u8db3\u9020\u6210\u7684\u8868\u73b0\u969c\u788d\u7684\u5f71\u54cd\uff0c\u800c\u53e6\u4e00\u4e9b\u53d7\u8bd5\u8005\u4f3c\u4e4e\u76f8\u5bf9\u6709\u5f39\u6027\u3002\u6709\u8da3\u7684\u662f\uff0c\u6b63\u5982\u8c03\u67e5\u548c\u65e5\u5e38\u65e5\u8bb0\u6240\u4fdd\u8bc1\u7684\u90a3\u6837\uff0c\u8106\u5f31\u548c\u6709\u5f39\u6027\u7684\u4eba\u5728\u4ed6\u4eec\u8ba4\u4e3a\u9700\u8981\u6216\u7ecf\u5e38\u83b7\u5f97\u7684\u7761\u7720\u65f6\u95f4\u4e0a\u6ca1\u6709\u663e\u8457\u5dee\u5f02\u3002\u8fd9\u8868\u660e\uff0c\u6613\u53d7\u7761\u7720\u4e0d\u8db3\u5f71\u54cd\u7684\u4e2a\u4f53\u4e4b\u95f4\u7684\u5dee\u5f02\u4e0d\u4ec5\u4ec5\u662f\u7531\u7761\u7720\u9700\u6c42\u7684\u5dee\u5f02\u51b3\u5b9a\u7684(42)\u3002\n\u56fe6.\u5728\u5b9e\u9a8c\u5ba4\u73af\u5883\u4e2d\uff0c\u5728\u5b8c\u5168\u5265\u593a\u7761\u7720\u768440\u5c0f\u65f6\u5185\uff0c\u7cbe\u795e\u8fd0\u52a8\u8b66\u6212\u4efb\u52a1(PVT\uff1b\u5de6\u624b\u9762\u677f)\u548c\u65af\u5766\u798f\u55dc\u7761\u91cf\u8868(SSS\uff1b\u53f3\u624b\u9762\u677f)\u7684\u4e3b\u89c2\u55dc\u7761\u5206\u6570\u5bfc\u81f4\u795e\u7ecf\u884c\u4e3a\u8868\u73b0\u4e0b\u964d(11)\u3002\u661f\u53f7\u663e\u793a\u6700\u5bb9\u6613\u5931\u7720(\u7c7b\u578b1)\u76848\u540d\u53d7\u8bd5\u8005\u7684PVT\u8868\u73b0\u5931\u8bef\u548cSSS\u55dc\u7761\u8bc4\u5206\uff1b\u5706\u70b9\u663e\u793a\u6700\u5bb9\u6613\u5931\u7720(\u7c7b\u578b3)\u76847\u540d\u53d7\u8bd5\u8005\u7684\u6570\u636e\u3002\u5c3d\u7ba1\u5728\u7cbe\u795e\u8fd0\u52a8\u80fd\u529b\u635f\u5bb3\u65b9\u9762\u6709\u76f8\u5f53\u5927\u7684\u5dee\u5f02\uff0c\u4f46\u8fd9\u4e24\u7ec4\u4e4b\u95f4\u5728\u55dc\u7761\u8bc4\u5206\u65b9\u9762\u6ca1\u6709\u7edf\u8ba1\u5b66\u4e0a\u7684\u663e\u8457\u5dee\u5f02\u3002\u8f6c\u8f7d\u81eaVan Donen\u7b49\u4eba\u30022004\u5e74\u3002\n\u6211\u7684\u7b2c\u4e8c\u4e2a\u5047\u8bbe\u5f97\u5230\u4e86\u8bc1\u5b9e\u3002\u5728\u5bf9\u7167\u548c\u6cbb\u7597\u6761\u4ef6\u4e0b\uff0c\u6211\u7684Guzey_arena_0\u8868\u73b0\u6ca1\u6709\u5dee\u522b\u3002\n\u6211\u76f8\u4fe1\u6211\u7684guzey_arena_0\u6570\u636e\u8d28\u91cf\u5f88\u9ad8\u3002\u6211\u5728\u76f8\u540c\u7684\u73af\u5883\u4e2d\u53c2\u52a0\u6d4b\u8bd5\uff0c\u51e0\u4e4e\u603b\u662f\u5168\u795e\u8d2f\u6ce8\u4e8e\u6d4b\u8bd5\u3002\u4e0ePVT\u4e00\u6837\uff0c\u6211\u53ea\u5728\u8ba1\u5212\u65f6\u95f4(\u51e0\u4e4e\u603b\u662f\u5728\u8ba1\u5212\u65f6\u95f4\u76845-10\u5206\u949f\u5185)\u6267\u884c\u6d4b\u8bd5\u3002\u548cPVT\u4e00\u6837\uff0c\u6211\u4e0d\u5f97\u4e0d\u66f4\u6539\u4e00\u4e9b\u6d4b\u8bd5\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u6211\u5fd8\u4e86\u89e3\u91ca\u5728\u5b9e\u9a8c\u7684\u6700\u540e6\u5929\u91cc\u6211\u7761\u5f97\u66f4\u65e9\u7684\u539f\u56e0(\u6240\u6709\u8fd9\u6837\u7684\u66f4\u6539\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230)\u3002\u5728\u4e00\u6b21\u6cbb\u7597\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4e0d\u5c0f\u5fc3\u53d6\u4e8612\u4e2a\u6837\u672c\u3002\u6211\u53d1\u73b0\uff0c\u5f53\u6211\u4ece\u89c6\u9891\u4e2d\u63d0\u53d6\u6570\u636e\u65f6\uff0c\u6211\u9519\u8bef\u5730\u8ba1\u7b97\u4e86\u5728\u90a3\u6b21\u4f1a\u8bdd\u4e2d\u91c7\u96c6\u7684\u6837\u672c\u6570\u91cf\uff0c\u5e76\u4e14\u6ca1\u6709\u5c06\u6837\u672c12\u5305\u62ec\u5728\u6570\u636e\u4e2d\uff0c\u56e0\u4e3a\u6211\u4f7f\u7528\u7684\u914d\u5bf9\u6837\u672ct-test\u4f9d\u8d56\u4e8e\u5339\u914d\u7684\u6570\u636e\uff0c\u800c\u6211\u7684\u8ba1\u5212\u662f\u5728\u6bcf\u6b21\u4f1a\u8bdd\u4e2d\u6070\u597d\u6536\u96c611\u4e2a\u6837\u672c\u3002\u5373\u4f7f\u5f53\u5305\u62ec\u8be5\u6837\u672c\u65f6\uff0c\u63a7\u5236\u5e73\u5747\u503c\u4ecd\u7136\u4e0d\u663e\u8457\u5730\u9ad8\u4e8e\u5904\u7406\u5e73\u5747\u503c\u3002\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u8ba4\u4e3aGuzey_Arena_0\u5f3a\u70c8\u8868\u660e\u5728\u6cbb\u7597\u6761\u4ef6\u4e0b\u6ca1\u6709\u91cd\u5927\u7684\u8ba4\u77e5\u6076\u5316\u3002\u6211\u8ba4\u4e3a\uff0c\u5b83\u63d0\u4f9b\u4e86\u9002\u5ea6\u7684\u8bc1\u636e\uff0c\u8868\u660e\u5728\u6cbb\u7597\u6761\u4ef6\u4e0b\u6ca1\u6709\u4e2d\u5ea6\u7684\u8ba4\u77e5\u6076\u5316\u3002\u6211\u8ba4\u4e3a\uff0c\u8fd9\u662f\u4e00\u4e2a\u5fae\u5f31\u7684\u8bc1\u636e\uff0c\u8868\u660e\u5728\u6cbb\u7597\u6761\u4ef6\u4e0b\u6839\u672c\u6ca1\u6709\u8ba4\u77e5\u80fd\u529b\u7684\u6076\u5316\u3002\n\u4e0eguzey_arena_0\u76f8\u53cd\uff0cSAT\u6709\u4e00\u4e2a\u7edd\u5bf9\u4e0a\u9650(\u6bcf\u4e2a\u90e8\u5206800\u4e2a)\uff0c\u6211\u77e5\u9053\u6211\u53ef\u4ee5\u63a5\u8fd1\u8fd9\u4e2a\u4e0a\u9650(\u81f3\u5c11\u6570\u5b66\u90e8\u5206\u662f\u8fd9\u6837)\uff0c\u56e0\u6b64\u521b\u5efa\u4e86\u4e00\u4e2a\u9690\u5f0f\u7684\u63a7\u5236\u6761\u4ef6\uff0c\u4f7f\u5176\u4e0d\u53d7\u6211\u6709\u610f\u8bc6\u6216\u65e0\u610f\u8bc6\u5730\u8bd5\u56fe\u6291\u5236\u6211\u7684\u63a7\u5236\u6027\u80fd\u7684\u5f71\u54cd\u3002\u8fd9\u610f\u5473\u7740\uff0c\u6570\u5b66\u90e8\u5206\u7684\u5206\u6570\u5728800\u5206\u5de6\u53f3\uff0c\u8bed\u8a00\u90e8\u5206\u7684\u5206\u6570\u5728700\u5230750\u5206\u4e4b\u95f4\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u597d\u7684\u8bc1\u636e\uff0c\u8868\u660e\u8ba4\u77e5\u80fd\u529b\u6ca1\u6709\u4e25\u91cd\u6076\u5316\u3002\n\u5728\u6cbb\u7597\u7684\u7b2c12\u5929\u3001\u7b2c13\u5929\u548c\u7b2c14\u5929\uff0c\u6211\u5728SAT\u7684(\u6570\u5b66\u3001\u8bed\u8a00)\u90e8\u5206\u5f97\u5230\u4e86(730,720)\u3001(790,740)\u548c(790,750)\u5206\uff0c\u800c\u5728\u63a7\u5236\u65e5\u5f97\u5230\u4e86(710,760)\u3001(780,760)\u548c(750,690)\u5206\u3002\u6570\u5b66\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u4f4e\u63a7\u5236\u5206\u6570\u662f\u7531\u4e8e\u7f3a\u4e4f\u7ec3\u4e60\u548c\u6211\u5728\u4e00\u9053\u95ee\u9898\u4e0a\u9677\u5165\u56f0\u5883\u540e\u65f6\u95f4\u6240\u5269\u65e0\u51e0\u7684\u7ed3\u679c\u3002\u8bed\u8a00\u90e8\u5206\u7684\u6700\u540e\u4e00\u4e2a\u4f4e\u63a7\u5236\u5206\u6570\u662f\u56e0\u4e3a\u6211\u5bf9\u8fde\u7eed5\u5929\u53c2\u52a0SAT\u53d8\u5f97\u975e\u5e38\u538c\u5026\uff0c\u6c89\u6d78\u572810\u5206\u949f\u7684\u601d\u8003\u4e2d\uff0c\u4e0d\u5f97\u4e0d\u5306\u5fd9\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u8ba4\u4e3aSAT\u7684\u6570\u636e\u6709\u529b\u5730\u8868\u660e\uff0c\u6211\u7684\u8ba4\u77e5\u5728\u8bb8\u591a\u65b9\u9762\u90fd\u6ca1\u6709\u4e25\u91cd\u6216\u4e2d\u5ea6\u7684\u8ba4\u77e5\u6076\u5316\uff0c\u56e0\u4e3a\u8fd9\u9879\u6d4b\u8bd5\u5305\u62ec(\u5bf9\u6211\u6765\u8bf4)\u5177\u6709\u6311\u6218\u6027\u7684\u9605\u8bfb\u7406\u89e3\u95ee\u9898\uff0c\u9700\u8981\u5feb\u901f\u7684\u6570\u5b66\u601d\u7ef4\u3002\u6211\u8ba4\u4e3a\uff0c\u5b83\u51e0\u4e4e\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u5173\u4e8e\u8f7b\u5fae\u8ba4\u77e5\u6076\u5316\u7684\u8bc1\u636e\uff0c\u56e0\u4e3a\u6211\u901a\u5e38\u5728\u6bcf\u4e00\u8282\u7ed3\u675f\u65f6\u90fd\u6709\u7a7a\u95f2\u65f6\u95f4\uff0c\u6211\u7528\u8fd9\u4e9b\u65f6\u95f4\u6765\u4ed4\u7ec6\u68c0\u67e5\u6211\u7684\u53cd\u5e94\uff0c\u800c\u8f7b\u5fae\u7684\u8ba4\u77e5\u6076\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6211\u5f97\u5230\u5927\u81f4\u76f8\u540c\u7684\u5206\u6570\uff0c\u4f46\u5269\u4e0b\u7684\u65f6\u95f4\u66f4\u5c11\u4e86\u3002\n\u6211\u5b8c\u5168\u6e05\u9192(\u975e\u5e38\u7c97\u7565\u5730)85%\u7684\u65f6\u95f4\u662f\u6e05\u9192\u7684\uff0c10%\u7684\u65f6\u95f4\u662f\u4e2d\u5ea6\u56f0\u5026\u7684\uff0c5%\u7684\u65f6\u95f4\u662f\u5b8c\u5168\u7761\u7740\u7684\u3002\u4e3b\u89c2\u4e0a\uff0c\u6211\u89c9\u5f97\u6211\u6bcf\u5929\u589e\u52a0\u4e862\u52303\u4e2a\u5c0f\u65f6\u7684\u5de5\u4f5c\u65f6\u95f4\u3002\n\u6b64\u5916\uff0c\u6211\u7684\u7761\u7720\u503a\u52a1\u4f3c\u4e4e\u5e76\u6ca1\u6709\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u589e\u52a0\u3002\u6211\u7684\u5370\u8c61\u662f\uff0c\u5728\u6025\u6027\u7761\u7720\u5265\u593a\u671f\u95f4\uff0c\u7531\u4e8e\u4e00\u4e2a\u4eba70\u591a\u4e2a\u5c0f\u65f6\u6ca1\u6709\u7761\u89c9\uff0c\u5927\u591a\u6570\u523a\u6fc0\u90fd\u4e0d\u8d77\u4f5c\u7528\uff0c\u8fd9\u610f\u5473\u7740\u89c6\u9891\u6e38\u620f\u4e0d\u518d\u80fd\u591f\u8ba9\u4eba\u5b8c\u5168\u6e05\u9192\u3002\u76f8\u53cd\uff0c\u6211\u53d1\u73b0\u901a\u8fc7\u73a915-20\u5206\u949f\u7684\u7535\u5b50\u6e38\u620f\uff0c\u6211\u53ef\u4ee5\u968f\u65f6\u4ece\u201c\u5165\u7761\u201d\u5230\u201c\u5b8c\u5168\u6e05\u9192\u201d\u3002\u6700\u7ec8\uff0c\u6211\u6bcf\u5929\u5927\u7ea6\u73a930-90\u5206\u949f\u7684\u7535\u5b50\u6e38\u620f\u3002\n\u6700\u540e\uff0c\u5373\u4f7f\u6211\u6ca1\u6709\u611f\u89c9\u5230\u8ba4\u77e5\u80fd\u529b\u7684\u6076\u5316\uff0c\u4e5f\u6ca1\u6709\u79ef\u7d2f\u7761\u7720\u503a\u52a1\uff0c\u7ef4\u6301\u8fd9\u6837\u7684\u7761\u7720\u65f6\u95f4\u8868\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u6211\u4e0d\u5f97\u4e0d\u62b5\u5236\u89c4\u5f8b\u7684\u7761\u7720\u51b2\u52a8\uff0c\u6709\u51e0\u6b21\u5f53\u6211\u4e0d\u60f3\u73a9\u7535\u5b50\u6e38\u620f\u7684\u65f6\u5019\uff0c\u6211\u975e\u5e38\u63a5\u8fd1\u5b9e\u9a8c\u5931\u8d25\uff0c\u6709\u4e00\u6b21\u6211\u5728\u6905\u5b50\u4e0a\u7761\u7740\u4e86\uff0c\u51e0\u5206\u949f\u540e\u88ab\u6211\u7684\u59bb\u5b50\u53eb\u9192\u3002\u5076\u5c14\uff0c\u5f53\u6211\u8bd5\u56fe\u770b\u770b\u6211\u662f\u5426\u80fd\u5728\u6ca1\u6709\u7535\u5b50\u6e38\u620f\u7684\u60c5\u51b5\u4e0b\u5b8c\u5168\u6062\u590d\u8b66\u89c9\u65f6\uff0c\u6211\u4f1a\u9677\u5165\u4e00\u7cfb\u5217\u957f\u8fbe\u51e0\u79d2\u949f\u7684\u5fae\u7761\u7720\u3002\u5982\u679c\u4e0d\u662f\u6211\u82b1\u4e86\u8fd9\u4e48\u591a\u65f6\u95f4\u8bbe\u8ba1\u548c\u516c\u5f00\u5ba3\u5e03\u6211\u7684\u5b9e\u9a8c\uff0c\u6211\u89c9\u5f97\u6211\u4e0d\u53ef\u80fd\u5728\u8fd914\u5929\u91cc\u4fdd\u6301\u8fd9\u4e2a\u65f6\u95f4\u8868\u3002\n\u5728\u6cbb\u7597\u7b2c10\u5929\u7684\u665a\u4e0a\uff0c\u6211\u7ed9\u4e00\u4f4d\u670b\u53cb\u6253\u4e86\u4e2a\u7535\u8bdd\uff0c\u6211\u7ecf\u5e38\u548c\u4ed6\u804a\u5929\u3002\u6211\u4eec\u82b1\u4e86\u4e00\u4e2a\u5c0f\u65f6\u8ba8\u8bba\u51e0\u7bc7\u5b66\u672f\u8bba\u6587\u7684\u4f18\u7f3a\u70b9\u3002\u5728\u5bf9\u8bdd\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u6211\u90fd\u5904\u4e8e\u80fd\u529b\u7684\u5dc5\u5cf0\u72b6\u6001\uff0c\u4e0d\u5f97\u4e0d\u4e0d\u65ad\u5730\u8fdb\u884c\u590d\u6742\u7684\u8fa9\u8bba\uff0c\u5e76\u5728\u5306\u5fd9\u4e2d\u8fdb\u884c\u5927\u91cf\u601d\u8003\uff0c\u8fd9\u5bf9\u6211\u7684\u957f\u671f\u8bb0\u5fc6\u3001\u77ed\u671f\u8bb0\u5fc6\u3001\u903b\u8f91\u601d\u7ef4\u548c\u8bf4\u8bdd\u80fd\u529b\u9020\u6210\u4e86\u6c89\u91cd\u7684\u8d1f\u62c5\u3002\u6253\u5b8c\u7535\u8bdd\u540e\uff0c\u6211\u95ee\u90a3\u4f4d\u670b\u53cb\uff0c\u4ed6\u662f\u5426\u6ce8\u610f\u5230\u6211\u5df2\u7ecf\u8fde\u7eed10\u5929\u6bcf\u665a\u77614\u4e2a\u5c0f\u65f6\u4e86\u3002\u4ed6\u5199\u9053\uff1a\n\u6211\u7684\u5ba4\u53cb\u77e5\u9053\u6211\u7684\u5b9e\u9a8c\uff0c\u4ed6\u95ee\u6211\uff0c\u5728\u6211\u6062\u590d\u7761\u7720\u4e24\u665a\u540e\uff0c\u6211\u6bcf\u665a\u8fd8\u80fd\u7761\u591a\u4e45\uff0c\u610f\u601d\u662f\u8bf4\uff0c\u5728\u6211\u4e0d\u518d\u88ab\u5265\u593a\u7761\u7720\u540e\uff0c\u4ed6\u6ca1\u6709\u6ce8\u610f\u5230\u6211\u7684\u72b6\u6001\u6709\u4efb\u4f55\u663e\u8457\u7684\u53d8\u5316\u3002\u6211\u901a\u5e38\u6bcf\u5929\u548c\u4ed6\u804a30-60\u5206\u949f\u3002\n\u6211\u559c\u6b22\u9192\u7740\uff0c\u4e0d\u559c\u6b22\u7761\u89c9\u3002\u56e0\u6b64\uff0c\u6211\u53d1\u73b0\u7761\u7720\u5265\u593a\u5bf9\u8ba4\u77e5\u6ca1\u6709\u5f71\u54cd\u3002\u4e0e\u6cbb\u7597\u6761\u4ef6\u76f8\u6bd4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6211\u5728\u63a7\u5236\u6761\u4ef6\u4e0b\u4e0d\u90a3\u4e48\u52aa\u529b\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u8ba9\u81ea\u5df1\u5bf9\u7761\u7720\u65f6\u95f4\u89c6\u800c\u4e0d\u89c1\u3002\u6211\u5728SAT\u5c0f\u8282\u4e2d\u8ba8\u8bba\u4e86\u5728\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u80cc\u666f\u4e0b\u6ca1\u6709\u5931\u660e\u7684\u95ee\u9898\u3002\n\u6211\u5173\u5fc3\u6211\u7684\u8ba4\u77e5\u80fd\u529b\u56e0\u7761\u7720\u4e0d\u8db3\u800c\u53d1\u751f\u7684\u54ea\u6015\u662f\u6700\u5c0f\u7684\u53d8\u5316\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6548\u679c\u5927\u5c0f\u4e3a\u201c\u4ec5\u201d0.1\uff0c\u6211\u4ecd\u7136\u5173\u5fc3\u5b83\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u5728\u8fd9\u4e2a\u5b9e\u9a8c\u4e2d\u68c0\u6d4b\u5230\u8fd9\u6837\u7684\u6548\u679c\uff0c\u6211\u5fc5\u987b\u82b1\u8d3940\u591a\u4e2a\u5c0f\u65f6\u4e3aguzey_arena_0\u6536\u96c61224\u5bf9\u89c2\u6d4b\u6570\u636e\u3002\n\u5982\u679c\u6211\u653e\u5f03PVT\uff0c\u53ea\u7a7f\u5b54\uff0c\u60c5\u51b5\u770b\u8d77\u6765\u4e5f\u4e0d\u4f1a\u597d\u5f88\u591a\u3002\n..", "note_en": "I slept 4 hours a night for 14 days and didn\u2019t find any effects on cognition (assessed via Psychomotor Vigilance Task, a custom first-person shooter scenario, and SAT). I\u2019m a 22-year-old male and normally I sleep 7-8 hours.\n I was fully alert (very roughly) 85% of the time I was awake, moderately sleepy 10% of the time I was awake, and was outright falling asleep 5% of the time. I was able to go from \u201cfalling asleep\u201d to \u201cfully alert\u201d at all times by playing video games for 15-20 minutes. I ended up playing video games for approximately 30-90 minutes a day and was able to be fully productive for more than 16 hours a day for the duration of the experiment.\n I did not measure my sleepiness. However, for the entire duration of the experiment I had to resist regular urges to sleep and on several occasions when I did not want to play video games was very close to failing the experiment, having at one point fallen asleep in my chair and being awakened a few minutes later by my wife. This sleep schedule was extremely difficult to maintain.\n Lack of effect on cognitive ability is surprising and may reflect true lack of cognitive impairment, my desire to demonstrate lack of cognitive impairment due to chronic sleep deprivation and lack of blinding biasing the measurements, lack of statistical power, and/or other factors.\n I believe that this experiment provides strong evidence that I experienced no major cognitive impairment as a result of sleeping 4 hours per day for 12-14 days and that it provides weak suggestive evidence that there was no cognitive impairment at all.\n I plan to follow this experiment up with an acute sleep deprivation experiment (75 hours without sleep) and longer partial sleep deprivation experiments (4 hours of sleep per day for (potentially) 30 and more days).\n I\u2019m wary of generalizing my results to other people and welcome independent replications of this experiment.\n All scripts I used to perform statistics and to draw graphs, all raw data, and all configuration files for Aimgod ( costs $5.99) and for Inquisit 6 Lab ( has a 30-day trial) necessary to replicate the experiment are available on  GitHub. Pre-analysis plan is available  here and on  GitHub.\n   The cumulative cost of additional wakefulness: dose-response effects on neurobehavioral functions and sleep physiology from chronic sleep restriction and total sleep deprivation      \r Van Dongen H, Maislin G, Mullington JM, Dinges DF. The cumulative cost of additional wakefulness: dose-response effects on neurobehavioral functions and sleep physiology from chronic sleep restriction and total sleep deprivation. Sleep. 2003 Mar 1;26(2):117-26.\r is a study published in journal  Sleep in 2003 by Hans P.A. Van Dongen, Greg Maislin, Janet M. Mullington, and David F. Dinges.\n Since then it has become one of the most well-known experiments in sleep science, accumulating more than 2700 citations and having its findings enter the popular culture. In particular, it appears that the idea that people do not notice the cognitive impairment due to sleep deprivation and that sleeping 6 hours a night for two weeks is enough to produce significant cognitive impairment both originate from this study.\n Intrigued by the study\u2019s findings and having my interest in sleep science heightened by  my investigation into Matthew Walker\u2019s  Why We Sleep, I decided to attempt to partially replicate and extend it.\n   I gave myself a sleep opportunity of 8 hours (23:30-07:30) for 7 days prior to the experiment to make sure I don\u2019t have any sleep debt carried over. My average sleep duration in these days (2020-03-27 to 2020-04-02) was 7.78 hours (standard error: 0.15 hours).\n I slept for 4 hours a night (3:30-7:30) for 14 days (one of the experimental conditions in Van Dongen et al. 2003), with all other sleep being prohibited, and compared my cognitive abilities on days 12, 13, and 14 of sleep deprivation ( treatment) to my normal state ( control). I did not test myself every day because the cognitive deficits in the 4-hour condition were increasing monotonically in Van Dongen et al., and I was only interested in the most severe consequences of sleep deprivation.\n I remained inside for the duration of the experiment. I worked, played video games, watched movies, browsed the internet, read, walked around the apartment, but did not engage in any vigorous activities. I avoided direct sunlight and turned off all lights during sleep times.\n I did not use any caffeine, alcohol, tobacco, and/or medications in the 2 weeks before the experiment or during the experiment.\n I only ate from 12pm to 8pm for the 2 weeks before the experiment and continued this schedule during the experiment. My diet was not otherwise restricted.\n I do not have any medical, psychiatric or sleep-related disorders, aside from occasionally experiencing stress-related strain in my chest, and I did not experience any unusual symptoms during the experiment.\n I worked neither regular night nor rotating shift work within the past 2 years. I have not travelled across time zones in the 3 months before the experiment.\n   Figure 4. Clips of tasks I performed in the experiment. Left: PVT. Center: guzey_arena_0. Right: SAT. Created with  ezgif.com.\n Psychomotor Vigilance Task is essentially a 10-minute-long reaction test that has become a standard way to assess wakefulness in sleep research. The standard way to analyze PVT data is to count the number of lapses (trials in which response time was &gt;=500ms) in a session. This is how I analyzed the data.\n guzey_arena_0 is a first-person shooter scenario in which the player has to kill 20 bots running around the arena as quickly as possible (10 bots are present at a time and they respawn in a random location on kill). The scenario requires a mix of quick reaction time (bots frequently change directions and appear in random locations), tactical thinking (you have to choose which bot to pursue and where to look for them), and fine-motor skills (you have to move your around using the keyboard and aim accurately using the mouse).\n guzey_arena_0 is the test I care the most about. I believe it\u2019s superior to PVT for several reasons:\n I believe it is more externally valid for me. guzey_arena_0 is much more engaging than PVT and mirrors the activities I commonly engage in (writing, coding, playing video games) much better. PVT might be a good model of boring tasks like long-distance driving, but I have few such tasks day-to-day (and don\u2019t drive at all)\n crucially, it requires actual  thinking, rather just reaction time and is thus better suited to assess the impact on complex cognitive abilities\n it tests several cognitive and motor skills at the same time, so a deterioration in any of those three abilities will be picked up by the test\n The  SAT is a 3-hour-long composite test that consists of verbal (text comprehension, grammar, etc.) and math problems. It is the standard way to assess college preparedness in the US and is taken by million of high school students every year.\n  I took control measurements 1 day before starting sleep deprivation and on days 4 and 5 after I ended sleep deprivation. I took treatment measurements on days 12, 13, and 14 of sleep deprivation.\n Data collection, as well as my strategy to deal with practice effects is described in detail in  pre-analysis plan ( PAP). All deviations from PAP are described in  Discussion.\n I performed paired t-tests for PVT and for guzey_arena comparing the means of treatment and control conditions at 0.025 significance level (0.05 significance level, Bonferroni-corrected for 2 comparisons) against a two-sided alternative.\n   I did not mention that t-tests will be paired t-tests, because I did not realize that t-tests for independent samples and for paired samples are different.\n In PAP, I calculated the required sample sizes for PVT and for guzey_arena_0 to be able to detect an effect-size of 0.8 and 0.5 respectively, at 0.025 significance level and 0.895 power (0.895 power ensures that I achieve 0.8 joint power (probability to correctly reject both null hypotheses if they\u2019re both false)).\n The calculated sample size was 39 pairs of observations for PVT and 99 pairs of observations for guzey_arena_0. These are the sample sizes I collected.\n However, these sample size calculations were incorrect. Because the power of a paired t-test is higher than of an independent samples t-test, it turned out that the effect-sizes I was able to detect for these sample sizes was 0.58 for PVT and 0.35 for guzey_arena_0 (at 0.025 significance level and 0.895 power).\n  Figure 5. Left: Cohen&#39;s d of 0.58. Right: Cohen&#39;s d of 0.35. Created with  R Psychologist.\n I am not performing any statistics on the SAT data, in light of extremely small number of observations.\n I feel slightly weird that I\u2019m only correcting for 2 comparisons, given that I\u2019m discussing the SAT results, even though I\u2019m not performing any statistics on them.\n       Summary: There was no statistically significant difference in my PVT performance between control and treatment conditions.\n       Summary: There was no statistically significant difference in my guzey_arena_0 performance between control and treatment conditions.\n   Control scores (math,verbal): (710,760), (780,760) (750,690); treatment scores (math,verbal): (730,720), (790,740), (790,750) (more is better).\n    My key hypothesis is that the number of lapses on PVT increases because it\u2019s a boring as hell task. It\u2019s 10 minutes just staring into the computer waiting for the red dot to appear periodically. So I think that sleep deprived are just falling asleep during the task but are otherwise functioning normally and their cognitive function is not compromised. Therefore,  I expect that my PVT performance will deteriorate but Aimgod performance will not, since this is an interesting task, even though it primarily relies on attention for performance.\n  My first hypothesis was not confirmed. There was no difference in my PVT performance between control and treatment conditions. I thought that during the test I would start falling asleep and fall into microsleeps but it seems that video games \u2013 which I played whenever I was feeling too sleepy \u2013 stimulated me to the point that even doing a boring 10-minute-long test was not enough to induce microsleeps.\n I believe that the quality of my PVT data is not very high. First, while I planned to take PVT at 7:40, 13:00, 13:20, 13:40, 16:00, 16:20, 16:40, 19:00 19:20, 19:40, 22:00, 22:20, 22:40, sometimes I forgot about it and sometimes I was busy during the designated time. As a result, even though I took the vast majority of tests within 5-10 minutes of designated time (largest delay: 22 minutes), I did not take PVT exactly on time. It could be argued that I strategically delayed my PVT sessions in order to take the test when I start feeling more alert. Further, I was extremely bored in the last 2 days of taking control measurements and sometimes got distracted and lost in thought, which resulted in me getting 3 and 4 lapses per session (as can be seen on Figure 1). I do not believe that these lapses represent my lack of alertness. Finally, I had to change the timing of last 3 tests on the last treatment day from 22:00, 22:20, 22:40 to 21:00, 21:20, 21:40 because I was going to bed at 22:00 and I did not account for this when writing the protocol (all such changes can be found  here).\n To conclude, I believe that PVT data strongly suggests that I was able to control my level of sleepiness for the duration of the experiment but I don\u2019t think much else can be concluded from it. This interpretation seems to me to be robust, but I welcome any further criticisms that might challenge it.\n  I\u2019m not sure. I don\u2019t think that I have any mutations that make me need less sleep, given that I sleep 7-8 hours normally. I believe that the most plausible explanation is that my cognitive performance was just not affected by chronic loss of sleep that much.\n It seems that there\u2019s very high variation in how people respond to sleep deprivation. For example,  Van Dongen et al. 2004      \r Van Dongen H, Maislin G, Dinges DF. Dealing with inter-individual differences in the temporal dynamics of fatigue and performance: importance and techniques. Aviation, space, and environmental medicine. 2004 Mar 1;75(3):A147-54.\r (a different paper by the same first author) find that:\n As measured by performance lapses on a psychomotor vigilance task (13), some subjects were found to have much greater impairment from sleep loss than others (Fig. 1, left-hand panel). Thus, some subjects seemed to be relatively vulnerable to performance impairment due to sleep loss, while others seemed to be relatively resilient. Interestingly, vulnerable and resilient individuals did not differ significantly in the amount of sleep they felt they needed or routinely obtained, as assured by surveys and daily diaries. This suggests that inter-individual differences in vulnerability to sleep loss are not just determined by differences in sleep need (42).\n Figure 6. Neurobehavioral performance lapses on a psychomotor vigilance task (PVT; left-hand panel) and subjective sleepiness score on the Stanford Sleepiness Scale (SSS; right-hand panel) during 40 h of total sleep deprivation in a laboratory environment (11). Stars show PVT performance lapses and SSS sleepiness scores for the eight subjects most resilient to sleep loss (type 1); dots show the data for the 7 subjects most vulnerable to sleep loss (type 3). Despite the considerable difference in psychomotor performance impairment, there was no statistically significant difference in the profile of sleepiness scores between these two groups. Reprinted from  Van Dongen et al. 2004.\n  My second hypothesis was confirmed. There was no difference in my guzey_arena_0 performance between control and treatment conditions.\n I believe that the quality of my guzey_arena_0 data is high. I took tests in the same environment and was virtually always fully focused on them. Like with PVT, I performed the tests only approximately at the planned time (almost always within 5-10 minutes of the scheduled time). Also like with PVT, I had to change the time I took some of the tests at because I forgot to account for me going to bed earlier in the last 6 days of the experiment (all such changes can be found  here). During one of the treatment sessions I accidentally took 12 samples. I discovered that I miscounted the number of samples I took in that session when I was extracting the data from the video and did not include sample 12 in the data, since the paired sample t-test I use relies on data being matched and my plan was to collect precisely 11 samples in each session. Even when including that sample, the control mean remains non-significantly higher than treatment mean.\n To conclude, I believe that guzey_arena_0 strongly suggests that there was no major cognitive deterioration in the treatment condition. I believe that it provides moderate evidence that there was no moderate cognitive deterioration in the treatment condition. I believe that it is weakly suggestive evidence that there was no cognitive deterioration at all in the treatment condition.\n  In contrast to guzey_arena_0, the SAT has an absolute ceiling (800 on each section), which I know I\u2019m able to approach (at least for the math section), thus creating an implicit control condition and making it immune to the effect of me consciously or unconsciously trying to suppress my control performance. This means that hitting a score in the vicinity of 800 on the math section and somewhere between 700 and 750 on the verbal section is a pretty good evidence of lack of major cognitive deterioration.\n I ended up getting (730,720), (790,740), and (790,750) on (math,verbal) sections of SAT on days 12, 13, and 14 of treatment and getting (710,760), (780,760), and (750,690) on control days. The first low control score on the math section is a result of lack of practice and me running out of time after getting stuck on a question. The last low control score on the verbal section is a result of me becoming very bored with taking the SAT 5 days in a row, getting lost in thought for 10 minutes, and having to rush.\n To conclude, I believe that the SAT data strongly suggests that there was no major or moderate cognitive deterioration in many aspects of my cognition, given that test includes challenging (to me) reading comprehension questions and requires quick mathematical thinking. I believe that it provides barely any evidence regarding minor cognitive deterioration, given that I usually end up having free time at the end of every section, which I use to double check my responses, and minor cognitive deterioration could result in me getting roughly the same score but with less time left.\n  I was fully alert (very roughly) 85% of the time I was awake, moderately sleepy 10% of the time I was awake, and was outright falling asleep 5% of the time. Subjectively, I felt that I gained somewhere between 2 and 3 hours of productive time every day.\n Further, it appears that my sleep debt was not increasing over time. My impression is that during acute sleep deprivation, as one doesn\u2019t sleep for 70+ hours, most stimulation ceases to work, meaning that video games are no longer able to bring one back to full alertness. In contrast to that, I found that I was able to go from \u201cfalling asleep\u201d to \u201cfully alert\u201d at all times by playing video games for 15-20 minutes. I ended up playing video games for approximately 30-90 minutes a day.\n Finally, even though I felt no cognitive deterioration and no accumulating sleep debt, maintaining this sleep schedule was incredibly hard. I had to resist regular urges to sleep and on several occasions when I did not want to play video games was very close to failing the experiment, having at one point fallen asleep in my chair and being awakened a few minutes later by my wife. Occasionally, when I tried to see if I could regain full alertness without video games, I would fall into a series of several-seconds-long microsleeps. I do not feel that I would\u2019ve been able to maintain this schedule for these 14 days, had I not committed so hard to it by spending so much time designing it and publicly announcing my experiment.\n  In the evening of day 10 of treatment I had a call with a friend whom I talk to regularly. We spent an hour discussing strengths and weaknesses of several academic papers. For the majority of the conversation I was functioning at the peak of my ability, having to constantly engage with complex arguments and to do a lot of thinking on the fly, which taxed my long-term memory, short-term memory, logical thinking, and speaking ability. After the call I asked that friend if he noticed that I\u2019d been sleeping for 4 hours a night for 10 days. He wrote:\n   My roommate, who knew about my experiment, asked me how long I will continue to sleep for 4 hours a night after I had 2 nights of recovery sleep, meaning that he did not notice any significant changes in my state after I stopped being sleep deprived. I usually talk to him for 30-60 minutes a day.\n   I like being awake and I do not like sleeping. Thus, I was motivated to find the absence of effect of sleep deprivation on cognition. This might have resulted in me trying less hard in the control condition, compared to treatment condition. Unfortunately, I do not know how to blind myself to the amount of sleep I get. I discussed the lack of blinding in the context of this experiment in subsection  SAT.\n  I care about even the smallest changes in my cognitive ability due to sleep deprivation. For example, if the effect-size is \u201conly\u201d 0.1, I still care about it. However, in order to detect such effect in this experiment, I would have had to spend more than 40 hours collecting 1224 pairs of observations for guzey_arena_0.\n The situation would not look much better if I ditched PVT and only performe\n......", "posttime": "2020-05-19 01:42:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba4\u77e5,\u7761\u7720,cognition", "title": "12~14\u5929\u6bcf\u665a4\u5c0f\u65f6\u7761\u7720\u5bf9\u8ba4\u77e5\u7684\u5f71\u54cd", "title_en": "The Effects on Cognition of Sleeping 4 Hours per Night for 12-14 Days", "transed": 1, "url": "https://guzey.com/science/sleep/14-day-sleep-deprivation-self-experiment/", "via": "", "real_tags": ["\u8ba4\u77e5", "\u7761\u7720", "cognition"]}, {"category": "", "categoryclass": "", "imagename": "8c7adb1ae17b415394ffd7e664238229.jpg", "infoid": 1002666, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u4e2a\u6c22\u539f\u5b50\u76f8\u4e92\u9760\u8fd1\u7684\u827a\u672f\u6e32\u67d3\u3002\u4ed6\u4eec\u5728\u4ec0\u4e48\u65f6\u5019\u89e6\u6478\uff1f\u8fd9\u53d6\u51b3\u4e8e\u4f60\u6240\u8bf4\u7684\u89e6\u6478\u662f\u4ec0\u4e48\u610f\u601d\u3002\u516c\u5171\u9886\u57df\u56fe\u50cf\uff0c\u6765\u6e90\uff1a\u514b\u91cc\u65af\u6258\u5f17\u00b7S\u00b7\u8d1d\u5c14\u5fb7(Christopher S.Baird)\u3002\n\u7b54\u6848\u53d6\u51b3\u4e8e\u4f60\u6240\u8bf4\u7684\u89e6\u6478\u662f\u4ec0\u4e48\u610f\u601d\u3002\u5728\u539f\u5b50\u6c34\u5e73\u4e0a\uff0c\u89e6\u6478\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u542b\u4e49\uff1a1)\u4e24\u4e2a\u7269\u4f53\u76f8\u4e92\u5f71\u54cd\uff0c2)\u4e24\u4e2a\u7269\u4f53\u76f8\u4e92\u663e\u8457\u5f71\u54cd\uff0c\u62163)\u4e24\u4e2a\u7269\u4f53\u4f4d\u4e8e\u5b8c\u5168\u76f8\u540c\u7684\u4f4d\u7f6e\u3002\u8bf7\u6ce8\u610f\uff0c\u65e5\u5e38\u7684\u89e6\u6478\u6982\u5ff5(\u5373\u4e24\u4e2a\u7269\u4f53\u7684\u786c\u8fb9\u754c\u5b58\u5728\u4e8e\u540c\u4e00\u4f4d\u7f6e)\u5728\u539f\u5b50\u6c34\u5e73\u4e0a\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u539f\u5b50\u6ca1\u6709\u786c\u8fb9\u754c\u3002\u539f\u5b50\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u5b9e\u5fc3\u7403\u4f53\u3002\u5b83\u4eec\u662f\u6a21\u7cca\u7684\u91cf\u5b50\u6982\u7387\u4e91\uff0c\u5145\u6ee1\u7535\u5b50\uff0c\u6563\u5e03\u6210\u6ce2\u6d6a\u5f62\u7684\u4e91\u72b6\uff0c\u79f0\u4e3a\u8f68\u9053\u3002\u5c31\u50cf\u5929\u7a7a\u4e2d\u7684\u4e91\u4e00\u6837\uff0c\u539f\u5b50\u53ef\u4ee5\u6709\u4e00\u4e2a\u5f62\u72b6\u548c\u4f4d\u7f6e\uff0c\u800c\u6ca1\u6709\u786c\u8fb9\u754c\u3002\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u539f\u5b50\u6709\u9ad8\u5bc6\u5ea6\u7684\u533a\u57df\u548c\u4f4e\u5bc6\u5ea6\u7684\u533a\u57df\u3002\u5f53\u6211\u4eec\u8bf4\u4e00\u4e2a\u539f\u5b50\u5750\u5728A\u70b9\u65f6\uff0c\u6211\u4eec\u771f\u6b63\u7684\u610f\u601d\u662f\u539f\u5b50\u7684\u6982\u7387\u4e91\u7684\u9ad8\u5bc6\u5ea6\u90e8\u5206\u4f4d\u4e8eA\u70b9\u3002\u5982\u679c\u4f60\u628a\u4e00\u4e2a\u7535\u5b50\u653e\u5728\u76d2\u5b50\u91cc(\u5c31\u50cf\u91cf\u5b50\u70b9\u6fc0\u5149\u5668\u6240\u505a\u7684\u90a3\u6837)\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7535\u5b50\u5927\u90e8\u5206\u90fd\u5728\u76d2\u5b50\u91cc\u3002\u7535\u5b50\u7684\u6ce2\u51fd\u6570\u7684\u4e00\u90e8\u5206\u901a\u8fc7\u76d2\u5b50\u7684\u58c1\u6cc4\u6f0f\u51fa\u6765\uff0c\u76f4\u5230\u65e0\u9650\u5927\u3002\u8fd9\u4f7f\u5f97\u7528\u4e8e\u626b\u63cf\u96a7\u9053\u663e\u5fae\u955c\u7684\u91cf\u5b50\u96a7\u9053\u6548\u5e94\u6210\u4e3a\u53ef\u80fd\u3002\u8003\u8651\u5230\u539f\u5b50\u7684\u975e\u56fa\u4f53\u6027\u8d28\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u89e6\u6478\u7684\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u542b\u4e49\u3002\n1.\u5982\u679c\u628a\u63a5\u89e6\u7406\u89e3\u4e3a\u4e24\u4e2a\u539f\u5b50\u76f8\u4e92\u5f71\u54cd\uff0c\u90a3\u4e48\u539f\u5b50\u603b\u662f\u63a5\u89e6\u7684\u3002\u76f8\u8ddd\u4e00\u82f1\u91cc\u7684\u4e24\u4e2a\u539f\u5b50\u7684\u6ce2\u51fd\u6570\u4ecd\u7136\u91cd\u53e0\u3002\u5982\u679c\u4e00\u4e2a\u539f\u5b50\u4e0e\u53e6\u4e00\u4e2a\u539f\u5b50\u7684\u4e2d\u5fc3\u76f8\u8ddd\u4e00\u82f1\u91cc\uff0c\u90a3\u4e48\u5b83\u4e0e\u53e6\u4e00\u4e2a\u539f\u5b50\u4e2d\u5fc3\u91cd\u53e0\u5904\u7684\u6ce2\u51fd\u6570\u7684\u632f\u5e45\u4f1a\u5c0f\u5f97\u79bb\u8c31\uff0c\u4f46\u4e0d\u4f1a\u662f\u96f6\u3002\u539f\u5219\u4e0a\uff0c\u4e24\u4e2a\u539f\u5b50\u65e0\u8bba\u5728\u5b87\u5b99\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e\u90fd\u4f1a\u76f8\u4e92\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u4eec\u5411\u56db\u9762\u516b\u65b9\u5ef6\u4f38\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u539f\u5b50\u7684\u8ddd\u79bb\u8d85\u8fc7\u51e0\u7eb3\u7c73\uff0c\u5b83\u4eec\u5bf9\u5f7c\u6b64\u7684\u5f71\u54cd\u901a\u5e38\u4f1a\u53d8\u5f97\u975e\u5e38\u5c0f\uff0c\u4ee5\u81f3\u4e8e\u88ab\u66f4\u8fd1\u7684\u539f\u5b50\u7684\u5f71\u54cd\u6240\u63a9\u76d6\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u76f8\u8ddd\u4e00\u82f1\u91cc\u7684\u4e24\u4e2a\u539f\u5b50\u53ef\u80fd\u662f\u63a5\u89e6\u7684(\u5982\u679c\u6211\u4eec\u5c06\u63a5\u89e6\u5b9a\u4e49\u4e3a\u539f\u5b50\u6ce2\u51fd\u6570\u7684\u91cd\u53e0)\uff0c\u4f46\u8fd9\u79cd\u63a5\u89e6\u901a\u5e38\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002\n\u8fd9\u662f\u4ec0\u4e48\u611f\u4eba\u7684\u4e1c\u897f\uff1f\u5728\u7269\u7406\u4e16\u754c\u4e2d\uff0c\u7269\u4f53\u76f8\u4e92\u5f71\u54cd\u7684\u57fa\u672c\u65b9\u5f0f\u53ea\u6709\u56db\u79cd\uff1a\u901a\u8fc7\u7535\u78c1\u529b\u3001\u901a\u8fc7\u5f3a\u6838\u529b\u3001\u901a\u8fc7\u5f31\u6838\u529b\u3001\u901a\u8fc7\u5f15\u529b\u3002\u6784\u6210\u539f\u5b50\u6838\u7684\u4e2d\u5b50\u548c\u8d28\u5b50\u76f8\u4e92\u675f\u7f1a\uff0c\u5e76\u901a\u8fc7\u8fd9\u4e24\u79cd\u6838\u529b\u53d1\u751f\u53cd\u5e94\u3002\u7ec4\u6210\u539f\u5b50\u5176\u4f59\u90e8\u5206\u7684\u7535\u5b50\u88ab\u7535\u78c1\u529b\u675f\u7f1a\u5728\u539f\u5b50\u6838\u4e0a\u3002\u539f\u5b50\u88ab\u675f\u7f1a\u5728\u5206\u5b50\u4e2d\uff0c\u5206\u5b50\u88ab\u7535\u78c1\u529b\u675f\u7f1a\u5728\u65e5\u5e38\u7269\u54c1\u4e2d\u3002\u6700\u540e\uff0c\u884c\u661f(\u4ee5\u53ca\u5176\u4ed6\u5927\u578b\u5929\u6587\u7269\u4f53)\u548c\u884c\u661f\u8868\u9762\u7684\u5b8f\u89c2\u7269\u4f53\u7531\u4e8e\u91cd\u529b\u800c\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5982\u679c\u4e24\u4e2a\u539f\u5b50\u76f8\u8ddd\u4e00\u7c73\uff0c\u5b83\u4eec\u5c31\u4f1a\u901a\u8fc7\u6240\u6709\u56db\u79cd\u57fa\u672c\u529b\u76f8\u4e92\u63a5\u89e6\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5178\u578b\u7684\u539f\u5b50\u6765\u8bf4\uff0c\u7535\u78c1\u529b\u5f80\u5f80\u4f1a\u51cc\u9a7e\u4e8e\u5176\u4ed6\u529b\u4e4b\u4e0a\u3002\u8fd9\u79cd\u89e6\u6478\u4f1a\u5bfc\u81f4\u4ec0\u4e48\u5462\uff1f\u5982\u679c\u4e24\u4e2a\u539f\u5b50\u76f8\u8ddd\u592a\u8fdc\uff0c\u4e0e\u5468\u56f4\u7684\u5176\u4ed6\u7269\u4f53\u76f8\u6bd4\uff0c\u5b83\u4eec\u7684\u76f8\u4e92\u4f5c\u7528\u592a\u5f31\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u7ed3\u679c\u3002\u5f53\u4e24\u4e2a\u539f\u5b50\u8db3\u591f\u63a5\u8fd1\u65f6\uff0c\u8fd9\u79cd\u76f8\u4e92\u4f5c\u7528\u53ef\u4ee5\u5bfc\u81f4\u5f88\u591a\u4e8b\u60c5\u3002\u6574\u4e2a\u5316\u5b66\u9886\u57df\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u7814\u7a76\u5f53\u539f\u5b50\u63a5\u8fd1\u5230\u8db3\u4ee5\u76f8\u4e92\u5f71\u54cd\u65f6\u53d1\u751f\u7684\u6240\u6709\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u5982\u679c\u4e24\u4e2a\u539f\u5b50\u662f\u975e\u53cd\u5e94\u6027\u7684\uff0c\u5e76\u4e14\u4e0d\u5f62\u6210\u5171\u4ef7\u952e\u3001\u79bb\u5b50\u952e\u6216\u6c22\u952e\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u7535\u78c1\u76f8\u4e92\u4f5c\u7528\u901a\u5e38\u91c7\u7528\u8303\u5fb7\u74e6\u529b\u7684\u5f62\u5f0f\u3002\u5728\u8303\u5fb7\u5899\u6548\u5e94\u4e2d\uff0c\u76f8\u4e92\u9760\u8fd1\u7684\u4e24\u4e2a\u539f\u5b50\u5728\u5f7c\u6b64\u4e4b\u95f4\u4ea7\u751f\u7535\u5076\u6781\u77e9\uff0c\u7136\u540e\u8fd9\u4e9b\u5076\u6781\u5b50\u901a\u8fc7\u9759\u7535\u5438\u5f15\u800c\u76f8\u4e92\u5f31\u5438\u5f15\u3002\u867d\u7136\u6839\u636e\u89e6\u6478\u7684\u5b9a\u4e49\uff0c\u5730\u7403\u4e0a\u7684\u6240\u6709\u539f\u5b50\u603b\u662f\u63a5\u89e6\u5230\u5730\u7403\u4e0a\u7684\u6240\u6709\u5176\u4ed6\u539f\u5b50\u7684\u8bf4\u6cd5\u662f\u4e25\u683c\u6b63\u786e\u7684\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5f88\u6709\u5e2e\u52a9\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u5b9a\u4e49\u4e00\u4e2a\u5305\u542b\u5927\u90e8\u5206\u539f\u5b50\u7684\u6709\u6548\u5468\u957f\uff0c\u7136\u540e\u8bf4\u539f\u5b50\u7684\u4efb\u4f55\u90e8\u5206\u8d85\u51fa\u8fd9\u4e2a\u5468\u957f\u90fd\u4e0d\u503c\u5f97\u6ce8\u610f\u3002\u8fd9\u5c31\u628a\u6211\u4eec\u5e26\u5230\u4e86\u6211\u4eec\u5bf9\u89e6\u6478\u7684\u4e0b\u4e00\u4e2a\u5b9a\u4e49\u3002\n2.\u5982\u679c\u89e6\u6478\u610f\u5473\u7740\u4e24\u4e2a\u539f\u5b50\u76f8\u4e92\u5f71\u54cd\u5f88\u5927\uff0c\u90a3\u4e48\u539f\u5b50\u786e\u5b9e\u4f1a\u63a5\u89e6\uff0c\u4f46\u53ea\u6709\u5f53\u5b83\u4eec\u8db3\u591f\u8fd1\u7684\u65f6\u5019\u3002\u95ee\u9898\u662f\uff0c\u4ec0\u4e48\u6784\u6210\u4e86\u91cd\u8981\u7684\u610f\u4e49\u662f\u53ef\u4ee5\u89e3\u91ca\u7684\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u539f\u5b50\u7684\u5916\u5468\u5b9a\u4e49\u4e3a\u5305\u542b95%\u539f\u5b50\u7684\u6570\u5b66\u8868\u9762&#3", "note_en": "Artistic rendering of two hydrogen atoms moving close to each other. At what point do they &#34;touch&#34;? It depends on what you mean by touch. Public Domain Image, source: Christopher S. Baird.\n  The answer depends on what you mean by &#34;touch&#34;. There are three possible meanings of touch at the atomic level: 1) two objects influence each other, 2) two objects influence each other significantly, or 3) two objects reside in the exact same location. Note that the everday concept of touch (i.e the hard boundaries of two objects exist at the same location) makes no sense at the atomic level because atoms don&#39;t have hard boundaries. Atoms are not really solid spheres. They are fuzzy quantum probability clouds filled with electrons spread out into waving cloud-like shapes called &#34;orbitals&#34;. Like a cloud in the sky, an atom can have a shape and a location without having a hard boundary. This is possible because the atom has regions of high density and regions of low density. When we say that an atom is sitting at point A, what we really mean is that the high-density portion of the atom&#39;s probability cloud is located at point A. If you put an electron in a box (as is done in quantum dot lasers), that electron is only  mostly in the box. Part of the electron&#39;s wavefunction leaks through the walls of the box and out to infinity. This makes possible the effect of quantum tunneling, which is used in scanning tunneling microscopes. With the non-solid nature of atoms in mind, let us look at each of the possible meanings of touching.\n  1. If &#34;touching&#34; is taken to mean that two atoms influence each other, then atoms are always touching. Two atoms that are held a mile apart still have their wavefunctions overlapping. The amplitude of one atom&#39;s wavefunction at the point where it overlaps with the other atom&#39;s center will be ridiculously small if they are a mile apart, but it will not be zero. In principle, two atoms influence each other no matter where they are in the universe because they extend out in all directions. In practice, if two atoms are more than a few nanometers apart, their influence on each other typically becomes so small that it is overshadowed by the influence of closer atoms. Therefore, although two atoms a mile apart may technically be touching (if we define touching as the overlap of atomic wavefunctions), this touching is typically so insignificant that it can be ignored.\n  What is this &#34;touching&#34;? In the physical world, there are only four fundamental ways for objects to influence each other: through the electromagnetic force, through the strong nuclear force, through the weak nuclear force, and through the force of gravity. Neutrons and protons that make up the nucleus of an atom are bound to each other and undergo reactions via the two nuclear forces. The electrons that make up the rest of the atom are bound to the nucleus by the electromagnetic force. Atoms are bound into molecules, and molecules are bound into everyday objects by the electromagnetic force. Finally, planets (as well as other large astronomical objects) and macroscopic objects on the planet&#39;s surface are bound together by gravity. If two atoms are held a meter apart, they are touching each other through all four fundamental forces. However, for typical atoms, the electromagnetic force tends to dominate over the other forces. What does this touching lead to? If two atoms are too far apart, their interaction is too weak compared to other surrounding bodies to amount to anything. When the two atoms get close enough, this interaction can lead to many things. The entire field of chemistry can be summed up as the study of all the interesting things that happen when atoms get close enough to influence each other electromagnetically. If two atoms are non-reactive and don&#39;t form covalent, ionic, or hydrogen bonds, then their electromagnetic interaction typically takes the form of the Van der Walls force. In the Van der Walls effect, two atoms brought close to each other induce electric dipole moments in each other, and these dipoles then attract each other weakly through electrostatic attraction. While the statement that &#34;all atoms on the planet are always touching all other atoms on the planet&#34; is strictly true according to this definition of touching, it is not very helpful. Instead, we can arbitrarily define an effective perimeter that contains most of the atom, and then say that any part of the atom that takes extends beyond that perimeter is not worth noticing. This takes us to our next definition of touching.\n  2. If &#34;touching&#34; is taken to mean that two atoms influence each other significantly, then atoms do indeed touch, but only when they get close enough. The problem is that what constitutes &#34;significant&#34; is open to interpretation. For instance, we can define the outer perimeter of an atom as the mathematical surface that contains 95% of the atom&#39;s electron mass. As should be obvious at this point, a perimeter that contains 100% of the atom would be larger than the earth. With 95% of the atom&#39;s electron probability density contained in this mathematical surface, we could say that atoms do not touch until their 95% regions begin to overlap. Another way to assign an effective edge to an atom is to say it exists halfway between two atoms that are covalently bonded. For instance, two hydrogen atoms that are covalently bonded to each other to form an H 2 molecule have their centers separated by 50 picometers. They can be thought of as &#34;touching&#34; at this separation. In this approach, atoms touch whenever they are close enough to potentially form a chemical bond.\n  3. If &#34;touching&#34; is taken to mean that two atoms reside in the exact same location, then two atoms never touch at room temperature because of the Pauli exclusion principle. The Pauli exclusion principle is what keeps all the atoms in our body from collapsing into one point. Interestingly, at very low temperatures, certain atoms can be coaxed into the exact same location. The result is known as a Bose-Einstein condensate.\n  Again, atoms never touch in the everyday sense of the word for the simple reason that they don&#39;t have hard boundaries. But in every other sense of the word &#34;touch&#34; that has meaning at the atomic level, atoms certainly touch.", "posttime": "2020-05-19 01:41:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u539f\u5b50,atoms", "title": "\u539f\u5b50\u66fe\u7ecf\u63a5\u89e6\u8fc7\u5f7c\u6b64\u5417\uff1f(2013)", "title_en": "Do atoms ever touch each other? (2013)", "transed": 1, "url": "https://wtamu.edu/~cbaird/sq/2013/04/16/do-atoms-ever-actually-touch-each-other/", "via": "", "real_tags": ["\u539f\u5b50", "atoms"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002665, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u624b\u673a\u5b9a\u4f4d\u6570\u636e\u663e\u793a\uff0c\u53cd\u5c01\u9501\u6297\u8bae\u6d3b\u52a8\u7684\u793a\u5a01\u8005-\u5176\u4e2d\u4e00\u4e9b\u4e0eC Ovid-19\u6848\u4ef6\u6709\u5173-\u7ecf\u5e38\u957f\u9014\u8dcb\u6d89\u6570\u767e\u82f1\u91cc\u524d\u5f80\u6d3b\u52a8\u73b0\u573a\uff0c\u8fd4\u56de\u5404\u81ea\u5dde\u7684\u5404\u4e2a\u5730\u65b9\uff0c\u751a\u81f3\u8d8a\u5883\u8fdb\u5165\u90bb\u8fd1\u7684\u5dde\u3002\u8fd9\u4e9b\u6570\u636e\u662f\u7531\u8fdb\u6b65\u8fd0\u52a8\u7ec4\u7ec7\u4fdd\u62a4\u533b\u7597\u4fdd\u9669\u59d4\u5458\u4f1a(Committee To Protect Medicare)\u63d0\u4f9b\u7ed9\u300a\u536b\u62a5\u300b(The Guardian)\u7684\uff0c\u5b83\u63d0\u51fa\u4e86\u8fd9\u6837\u4e00\u79cd\u53ef\u80fd\u6027\uff0c\u5373\u6297\u8bae\u6d3b\u52a8\u5c06\u5728\u5c06\u51a0\u72b6\u75c5\u6bd2\u75ab\u60c5\u4f20\u64ad\u5230\u8fc4\u4eca\u611f\u67d3\u76f8\u5bf9\u8f83\u5c11\u7684\u5730\u533a\u65b9\u9762\u53d1\u6325\u4f5c\u7528\u3002\u533f\u540d\u4f4d\u7f6e\u6570\u636e\u662f\u4ece\u9009\u62e9\u52a0\u5165\u7684\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u83b7\u53d6\u7684\uff0cVoteMap\u516c\u53f8\u7684\u6570\u636e\u79d1\u5b66\u5bb6\u5229\u7528\u5b83\u6765\u786e\u5b9a\u53c2\u52a04\u6708\u5e95\u548c5\u6708\u521d\u6297\u8bae\u6d3b\u52a8\u7684\u8bbe\u5907\u7684\u79fb\u52a8\u60c5\u51b5\uff0c\u8fd9\u4e94\u4e2a\u5dde\u5206\u522b\u662f\u5bc6\u6b47\u6839\u5dde\u3001\u5a01\u65af\u5eb7\u661f\u5dde\u3001\u4f0a\u5229\u8bfa\u4f0a\u5dde\u3001\u79d1\u7f57\u62c9\u591a\u5dde\u548c\u4f5b\u7f57\u91cc\u8fbe\u5dde\u3002\n\u7136\u540e\uff0c\u4ed6\u4eec\u521b\u5efa\u4e86\u53ef\u89c6\u5316\u56fe\u50cf\uff0c\u8ddf\u8e2a\u8fd9\u4e9b\u8bbe\u5907\u5728\u6297\u8bae\u6d3b\u52a8\u7ed3\u675f\u540e\u957f\u8fbe48\u5c0f\u65f6\u7684\u79fb\u52a8\u3002\u53ef\u89c6\u5316\u4ec5\u663e\u793a\u5dde\u5185\u7684\u79fb\u52a8\uff0c\u8fd9\u662f\u7531\u4e8e\u5206\u6790\u5e08\u5728\u521b\u5efa\u5b83\u4eec\u65f6\u6240\u505a\u7684\u67e5\u8be2\u3002\u4f46VoteMap\u7684\u6267\u884c\u526f\u603b\u88c1\u3001\u6570\u636e\u79d1\u5b66\u5bb6\u6770\u91cc\u7c73\u00b7\u8d39\u5c14\u8868\u793a\uff0c\u5728\u6f5c\u5728\u7684\u539f\u59cb\u6570\u636e\u4e2d\uff0c\u8bb8\u591a\u88ab\u89c6\u4e3a\u5230\u8fbe\u5dde\u8fb9\u754c\u7684\u8bbe\u5907\u90fd\u4f1a\u7ee7\u7eed\u7a7f\u8fc7\u8fd9\u4e9b\u8bbe\u5907\u3002\u4e00\u9879\u53ef\u89c6\u5316\u663e\u793a\uff0c\u5728\u5bc6\u6b47\u6839\u5dde\u5170\u8f9b\u5e02\uff0c\u57284\u670830\u65e5\u7684\u6297\u8bae\u6d3b\u52a8\u4e2d\uff0c\u6b66\u88c5\u6297\u8bae\u8005\u51b2\u8fdb\u56fd\u4f1a\u5927\u53a6\uff0c\u5dde\u8b66\u5bdf\u88ab\u8feb\u5c01\u9501\u5dde\u957f\u683c\u96f7\u7434\u00b7\u60e0\u7279\u9ed8(Gretchen Whitmer)\u7684\u901a\u9053\uff0c\u53ef\u4ee5\u770b\u5230\u6297\u8bae\u73b0\u573a\u51fa\u73b0\u7684\u8bbe\u5907\u6b63\u5728\u8fd4\u56de\u8be5\u5dde\u6240\u6709\u5730\u533a\uff0c\u4ece\u5e95\u7279\u5f8b\u5230\u8be5\u5dde\u5317\u90e8\u7684\u504f\u8fdc\u57ce\u9547\u3002\u6570\u636e\u4e2d\u53ef\u4ee5\u770b\u5230\u7684\u4e00\u4e2a\u8bbe\u5907\u5f80\u8fd4\u4e8e\u8ddd\u79bb\u9996\u90fd\u8d85\u8fc7180\u82f1\u91cc\u7684\u963f\u592b\u987f\u3002\u5176\u4ed6\u4eba\u5230\u8fbe\u4e86\u5370\u7b2c\u5b89\u7eb3\u5dde\u7684\u8fb9\u754c\uff0c\u4e00\u4e9b\u4eba\u8d8a\u8fc7\u4e86\u5370\u7b2c\u5b89\u7eb3\u5dde\u7684\u8fb9\u754c\u3002\u57284\u670819\u65e5\u4e39\u4f5b\u201c\u683c\u6805\u884c\u52a8\u201d\u6297\u8bae\u4e4b\u540e\u768448\u5c0f\u65f6\u5185\uff0c\u8bbe\u5907\u5230\u8fbe\u4e86\u90bb\u8fd1\u5dde\u7684\u8fb9\u754c\uff0c\u5305\u62ec\u6000\u4fc4\u660e\u5dde\u3001\u5185\u5e03\u62c9\u65af\u52a0\u5dde\u3001\u4fc4\u514b\u62c9\u4f55\u9a6c\u5dde\u3001\u65b0\u58a8\u897f\u54e5\u5dde\u548c\u72b9\u4ed6\u5dde\u30024\u670818\u65e5\uff0c\u5728\u4f5b\u7f57\u91cc\u8fbe\u5dde\uff0c\u8bbe\u5907\u8fd4\u56de\u5230\u534a\u5c9b\u6240\u6709\u5730\u533a\uff0c\u5e76\u4e00\u76f4\u5ef6\u4f38\u5230\u4f50\u6cbb\u4e9a\u5dde\u8fb9\u5883\u30024\u670824\u65e5\uff0c\u5728\u5a01\u65af\u5eb7\u661f\u5dde\uff0c\u8bbe\u5907\u53c8\u56de\u5230\u4e86\u683c\u6797\u6e7e\u548c\u6c83\u7d22\u7b49\u8f83\u5c0f\u7684\u57ce\u9547\uff0c\u4ee5\u53ca\u660e\u5c3c\u82cf\u8fbe\u5dde\u548c\u4f0a\u5229\u8bfa\u4f0a\u5dde\u7684\u8fb9\u754c\u3002\n\u7ee74\u6708\u4efd\u7684\u7b2c\u4e00\u6ce2\u53cd\u5c01\u9501\u6297\u8bae\u6d3b\u52a8\u4e4b\u540e\uff0c\u6d41\u884c\u75c5\u5b66\u5bb6\u8b66\u544a\u8bf4\uff0c\u8fd9\u4e9b\u6297\u8bae\u6d3b\u52a8\u53ef\u80fd\u4f1a\u5bfc\u81f4\u65b0\u7684\u75c5\u4f8b\u6fc0\u589e\u30024\u6708\u4e0b\u65ec\uff0c\u5728\u5317\u5361\u7f57\u6765\u7eb3\u5dde\uff0c\u8be5\u5dde\u53cd\u5c01\u9501\u6297\u8bae\u6d3b\u52a8\u7684\u4e00\u540d\u9886\u5bfc\u4eba\u7684\u51a0\u72b6\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\uff0c\u4f46\u5979\u8868\u793a\u5c06\u53c2\u52a0\u672a\u6765\u7684\u96c6\u4f1a\u3002\n\u4fdd\u62a4\u533b\u7597\u4fdd\u9669\u59d4\u5458\u4f1a(Committee To Protect Medicare)\u6267\u884c\u4e3b\u4efb\u7f57\u5e03\u00b7\u6234\u7ef4\u68ee(Rob Davidson)\u535a\u58eb\u8868\u793a\uff0c\u5c3d\u7ba1\u201c\u5f88\u96be\u5728\u8bbe\u5907\u3001\u53c2\u52a0\u6297\u8bae\u7684\u4e2a\u4eba\u548c\u75c5\u4f8b\u4e4b\u95f4\u5212\u6e05\u754c\u9650\u201d\uff0c\u4f46\u6570\u636e\u8868\u660e\uff0c\u6297\u8bae\u6d3b\u52a8\u53ef\u80fd\u662f\u91cd\u5927\u7684\u6d41\u884c\u75c5\u4e8b\u4ef6\u3002\u201c\u6211\u4eec\u5728\u6297\u8bae\u6d3b\u52a8\u4e2d\u770b\u5230\u7684\u884c\u4e3a\u5177\u6709\u5f88\u9ad8\u7684\u611f\u67d3\u98ce\u9669\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6297\u8bae\u8005\u4ece\u4e00\u4e2a\u9ad8\u5ea6\u96c6\u4e2d\u7684\u6d3b\u52a8\u5f00\u59cb\uff0c\u7136\u540e\u5e7f\u6cdb\u5206\u6563\uff0c\u201c\u4ed6\u8865\u5145\u8bf4\u3002\u6234\u7ef4\u68ee\u4ee5\u6c11\u4e3b\u515a\u4eba\u7684\u8eab\u4efd\u7ade\u9009\u56fd\u4f1a\u8bae\u5458\uff0c\u4ed6\u8bf4\uff0c\u4ed6\u548c\u4ed6\u7684\u5021\u5bfc\u56e2\u4f53\u76ee\u524d\u90fd\u6ca1\u6709\u4e0e\u6c11\u4e3b\u515a\u6709\u5173\u8054\u3002\u8be5\u7ec4\u7ec7\u7531300\u591a\u540d\u201c\u533b\u751f\u7ec4\u6210\uff0c\u4ed6\u4eec\u62c5\u5fc3\u4ed6\u4eec\u75c5\u4eba\u7684\u533b\u7597\u4fdd\u5065\u5df2\u7ecf\u53d8\u5f97\u8d1f\u62c5\u4e0d\u8d77\u201d\u3002\u5728\u63a8\u7279\u4e0a\u5e7f\u6cdb\u5206\u4eab\u7684\u4e00\u7cfb\u5217\u89c6\u9891\u548c\u5e16\u5b50\u4e2d\uff0c\u6234\u7ef4\u68ee\u6279\u8bc4\u4e86\u7279\u6717\u666e\uff0c\u5e76\u8bd5\u56fe\u6d88\u9664\u4ed6\u6240\u8bf4\u7684\u201c\u5bf9\u516c\u5171\u536b\u751f\u7684\u4e0d\u4fe1\u4efb\u201d\uff0c\u8fd9\u79cd\u4e0d\u4fe1\u4efb\u662f\u201c\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u5728\u4ed6\u7684\u8fd0\u52a8\u4e2d\u717d\u52a8\u7684\u201d\u3002", "note_en": "Cellphone location data suggests that demonstrators at anti-lockdown protests \u2013  some of which have been connected with C ovid-19 cases \u2013 are often traveling hundreds of miles to events, returning to all parts of their states, and even crossing into neighboring ones.   The data, provided to the Guardian by the progressive campaign group the Committee to Protect Medicare, raises the prospect that the protests will play a role in spreading the coronavirus epidemic to areas which have, so far, experienced relatively few infections.   The anonymized location data was captured from opt-in cellphone apps, and data scientists at the firm VoteMap used it to determine the movements of devices present at protests in late April and early May in five states: Michigan, Wisconsin, Illinois, Colorado and Florida.\n  They then created visualizations that tracked the movements of those devices up to 48 hours after the conclusion of protests. The visualizations only show movements within states, due to the queries analysts made in creating them. But the data scientist Jeremy Fair, executive-vice president of VoteMap, says that many of the devices that are seen to reach state borders are seen to continue across them in the underlying raw data.   One visualization shows that in Lansing, Michigan, after a 30 April protest in which  armed protesters stormed the capit ol building and state police were forced to physically block access to Governor Gretchen Whitmer, devices which had been present at the protest site can be seen returning to all parts of the state, from Detroit to remote towns in the state\u2019s north.  One device visible in the data traveled to and from Afton, which is over 180 miles from the capital. Others reached, and some crossed, the Indiana border.   In the 48 hours following a 19 April \u201cOperation Gridlock\u201d protest in Denver, devices reached the borders of neighboring states including Wyoming, Nebraska, Oklahoma, New Mexico and Utah.   In Florida on 18 April, devices returned to all parts of the peninsula and up to the Georgia border. In Wisconsin on 24 April, devices returned to smaller towns like Green Bay and Wausau, and the borders of Minnesota and Illinois.\n  Following the initial wave of anti-lockdown protests in April, epidemiologists  warned that they could lead to a new surge in cases.   In North Carolina in late April, one of the leaders of the state\u2019s anti-lockdown protests  tested positive for Covid-19 but said she would attend future rallies.\n Dr Rob Davidson, executive director of the Committee to Protect Medicare, said that although \u201cit\u2019s hard to draw a straight line between devices, individuals at these protests, and cases\u201d, the data suggests that the protests may be epidemiologically significant events.  \u201cThe behavior we\u2019re seeing at protests carries a high risk of infection. We can see protesters are going from a highly concentrated event and then dispersing widely,\u201d he added.   Davidson, who has run for Congress as a Democrat, said that neither he nor his advocacy group were currently affiliated with the Democratic party. The group is made up of more than 300 \u201cdoctors who are concerned that the healthcare for their patients has become unaffordable\u201d.   In a series of widely shared videos and  threads on Twitter, Davidson has criticized Trump, and attempted to dispel what he calls the \u201cdistrust in public health\u201d which \u201cDonald Trump has fomented in his movement\u201d.", "posttime": "2020-05-19 01:41:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u624b\u673a,\u75c5\u6bd2,\u6570\u636e,protests,\u8bbe\u5907", "title": "\u624b\u673a\u6570\u636e\u663e\u793a\uff0c\u7f8e\u56fd\u5c01\u9501\u6297\u8bae\u6d3b\u52a8\u53ef\u80fd\u5e7f\u6cdb\u4f20\u64ad\u4e86\u75c5\u6bd2", "title_en": "US lockdown protests may have spread virus widely, cellphone data suggests", "transed": 1, "url": "https://www.theguardian.com/us-news/2020/may/18/lockdown-protests-spread-coronavirus-cellphone-data", "via": "", "real_tags": ["\u624b\u673a", "\u75c5\u6bd2", "\u6570\u636e", "protests", "\u8bbe\u5907"]}, {"category": "", "categoryclass": "", "imagename": "67b7a85eaa8b05887a33b151c8d7f9f2.png", "infoid": 1002664, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6211\u9605\u8bfb\u5173\u4e8eJavaScript\u627f\u8bfa\u7684MDN\u6587\u6863\u65f6\uff0c\u6211\u610f\u8bc6\u5230Promise.all\u548cPromise.allSetted\u4e4b\u95f4\u7684\u533a\u522b\u5e76\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\u7684\u3002\u6765\u81ea\u4e0a\u9762\u94fe\u63a5\u7684\u6587\u6863\uff1a\u627f\u8bfa\u662f\u5728\u521b\u5efa\u627f\u8bfa\u65f6\u4e0d\u4e00\u5b9a\u77e5\u9053\u7684\u503c\u7684\u4ee3\u7406\u3002\u5b83\u5141\u8bb8\u60a8\u5c06\u5904\u7406\u7a0b\u5e8f\u4e0e\u5f02\u6b65\u64cd\u4f5c\u7684\u6700\u7ec8\u6210\u529f\u503c\u6216\u5931\u8d25\u539f\u56e0\u76f8\u5173\u8054\u3002\n\u627f\u8bfa\u5904\u4e8e\u4ee5\u4e0b\u72b6\u6001\u4e4b\u4e00\uff1a\u5f85\u5b9a\uff1a\u521d\u59cb\u72b6\u6001\uff0c\u65e2\u4e0d\u5c65\u884c\u4e5f\u4e0d\u62d2\u7edd\u3002\u5df2\u5b8c\u6210\uff1a\u8868\u793a\u64cd\u4f5c\u6210\u529f\u5b8c\u6210\u3002Rejected\uff1a\u8868\u793a\u64cd\u4f5c\u5931\u8d25\u3002\n\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u5b9e\u4f8b\u5316\u627f\u8bfa\uff1aTLDR\uff1bPromise.all\u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u627f\u8bfa\u65e0\u6cd5\u89e3\u6790\uff0c\u90fd\u5c06\u7acb\u5373\u62d2\u7edd\uff0c\u800cPromise.allSetted\u5c06\u7b49\u5f85\u6240\u6709\u627f\u8bfa\u7684\u5b8c\u6210\u3002\u5411Promise.all()\u4f20\u9012\u4e00\u4e2a\u53ef\u8fed\u4ee3(\u901a\u5e38\u662f\u7531\u5176\u4ed6\u627f\u8bfa\u7ec4\u6210\u7684\u6570\u7ec4)\uff0c\u5e76\u5c1d\u8bd5\u89e3\u6790\u6240\u6709\u627f\u8bfa\u3002\u5982\u679c\u8fd9\u4e9b\u627f\u8bfa\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u629b\u51fa\u4f8b\u5916\u6216\u62d2\u7edd\uff0cPromise.all\u5c06\u7acb\u5373\u8c03\u7528\u5176\u62d2\u7edd\u3002\u60a8\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528try/catch\u6216.catch()\u5c06Promise.all()\u62ec\u8d77\u6765\u3002const promiseFunction=Async()=&gt\uff1b{const ResolvingPromise=new Promise(Resolve=&gt\uff1bsetTimeout(()=&gt\uff1bResolve(&#39\uff1bSuccess&39\uff1b)\uff0c1000))\uff1bConst RejectingPromise=New Promise((Resolve\uff0cReject)=&gt\uff1bsetTimeout(()=&gt\uff1bReject(&#39\uff1bsetTimeout(&#39\uff1bFail&39\uff1b)\uff0c500))\uff1b\u5c1d\u8bd5{const\u3002all([ResolvingPromise\uff0cRejectingPromise])\uff1b}catch(E){//e\u662f&#39\uff1bFAIL&39\uff1b\uff0c\u8fd9\u662f\u6765\u81eaRejectingPromise//ResolvingPromise=Promise{&lt\uff1bPending&&gt;\uff1b}\u63a7\u5236\u53f0\u7684Reject\u51fd\u6570\u7684\u5185\u5bb9\u3002log(E)\uff1b}}\uff1bpromiseFunction()\uff1b\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u5f53\u8c03\u7528console.log(E)\u65f6\uff0cResolution vingPromise\u7684\u72b6\u6001\u4ecd\u7136\u662f\u6302\u8d77\u3002catch\u8bed\u53e5\u4e2d\u8c03\u7528\u7684\u4ee3\u7801\u5728promiseFunction\u8c03\u7528\u540e\u5927\u7ea6500ms\u8fd0\u884c-\u56e0\u4e3arejectingPromise\u5728500ms\u4e4b\u540e\u62d2\u7edd\u3002const promisvingFunction=Async()=&gt\uff1b{const ResolvingPromise=new Promise(Resolve=&gt\uff1bsetTimeout(()=&gt\uff1bResolve(&#39\uff1bSuccess&39\uff1b)\uff0c1000))\uff1bConst ResolvingPromiseTwo=New Promise((Resolve\uff0cReject)=&gt\uff1bsetTimeout(()=&gt\uff1bResolve(&#39\uff1bSuccessTwo&39\uff1b)\uff0c500)\u3002all([ResolvingPromise\uff0cResolvingPromiseTwo])\uff1bConsole\u3002log(AllPromises)\uff1b//allPromises=[&#39\uff1bSUCCESS&#39\uff1b\uff0c&#39\uff1bSUCCESS TWO&#39\uff1b]}catch(E){//\u63a7\u5236\u53f0\u4ece\u4e0d\u6267\u884c\u6b64\u4ee3\u7801\u5757\u3002log(E)\uff1b}}\uff1bpromiseFunction()\uff1b\nPromise.All\u5728\u8c03\u7528\u540e\u89e3\u67901000ms-ResolvingPromiseTwo\u5728500ms\u540e\u89e3\u6790\uff0cResvingPromise\u57281s\u540e\u89e3\u6790\uff0c\u8fd9\u5b8c\u6210\u4e86\u6240\u6709\u627f\u8bfa\uff0c\u8fd9\u5141\u8bb8Promise.All\u627f\u8bfa\u89e3\u6790\u3002Promise.all()\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u4f20\u9012\u7ed9\u5b83\u7684\u6bcf\u4e2a\u627f\u8bfa\u7684\u89e3\u6790\u503c\uff0c\u6309\u7167\u5b83\u4eec\u88ab\u4f20\u9012\u7684\u987a\u5e8f\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4=[&#39\uff1bSUCCESS&#39\uff1b\uff0c&#39\uff1bSUCCESS TWO&#39\uff1b]\u3002\u8fd8\u4f1a\u5411Promise.allSetted()\u4f20\u9012\u4e00\u4e2a\u53ef\u8fed\u4ee3(\u901a\u5e38\u662f\u7531\u5176\u4ed6\u627f\u8bfa\u7ec4\u6210\u7684\u6570\u7ec4)\uff0c\u5e76\u5c06\u5c1d\u8bd5\u89e3\u6790\u6240\u6709\u627f\u8bfa\u3002\u5982\u679c\u8fd9\u4e9b\u627f\u8bfa\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u629b\u51fa\u4f8b\u5916\u6216\u62d2\u7edd\uff0c\u5219\u5176\u72b6\u6001\u8bbe\u7f6e\u4e3a\u62d2\u7edd\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u6ce8\u610f\u4e8b\u9879\u662fPromise.allSetted\u6c38\u8fdc\u4e0d\u4f1a\u629b\u51fa\u3002\u60a8\u4e0d\u9700\u8981\u7528try/catch\u5305\u88c5\u5b83-\u5b83\u603b\u662f\u4f1a\u89e3\u51b3\u7684\u3002const promiseFunction=Async()=&gt\uff1b{const ResolvingPromise=new Promise(Resolve=&gt\uff1bsetTimeout(()=&gt\uff1bResolve(&#39\uff1bSuccess&39\uff1b)\uff0c1000))\uff1bConst RejectingPromise=New Promise((Resolve\uff0cReject)=&gt\uff1bsetTimeout(()=&gt\uff1bReject(&#39\uff1bsetTimeout(&#39\uff1bFail&39\uff1b)\uff0c500))\uff1b\u5c1d\u8bd5{const\u3002allSetted([ResolvingPromise\uff0cRejectingPromise])\uff1b\u63a7\u5236\u53f0\u3002log(AllPromises)\uff1b//allPromises//[//{\u72b6\u6001\uff1a&#34\uff1b\u5df2\u5b8c\u6210&#34\uff1b\uff0c\u503c\uff1a&#39\uff1b\u6210\u529f&#39\uff1b}\uff0c//{\u72b6\u6001\uff1a&#34\uff1b\u62d2\u7edd&#34\uff1b\uff0c\u539f\u56e0\uff1a&#39\uff1b\u5931\u8d25&#39\uff1b}//]}catch(E){//\u6b64\u4ee3\u7801\u5757\u4ece\u672a\u5728\u63a7\u5236\u53f0\u6267\u884c\u3002log(E)\uff1b}}\uff1bpromiseFunction()\uff1b\nPromise.allSetted\u57281\u79d2\u540e\u89e3\u6790-\u5b83\u7b49\u5f85\u6240\u6709\u627f\u8bfa\uff0c\u800c\u4e0d\u7ba1\u5b83\u4eec\u7684\u72b6\u6001\u5982\u4f55\uff0c\u6216\u8005\u5b83\u4eec\u662f\u5426\u62d2\u7edd\u3002\u7136\u540e\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\u3002\u8fd9\u53d6\u51b3\u4e8e\u6253\u7535\u8bdd\u7684\u4eba\u68c0\u67e5\u6bcf\u4e2a\u627f\u8bfa\u662f\u5151\u73b0\u8fd8\u662f\u88ab\u62d2\u7edd\u3002\u5982\u679c\u5b83\u5df2\u5b8c\u6210\uff0c\u5219\u5bf9\u8c61\u7684\u503c\u5c06\u5305\u542b\u5df2\u89e3\u6790\u7684\u5185\u5bb9\u3002\u5982\u679c\u72b6\u6001\u4e3aRejected\uff0c\u5b83\u5c06\u5305\u542b\u4e00\u4e2a\u540d\u4e3aReason\u7684\u952e\uff0c\u5373\u629b\u51fa\u6216\u62d2\u7edd\u7684\u5185\u5bb9\u3002Promise\u4e2d\u8fd8\u6709\u53e6\u4e00\u4e2a\u5229\u76ca\u51fd\u6570\uff0c\u79f0\u4e3aPromise.race\u3002Promise.race()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u53ef\u8fed\u4ee3\u4e2d\u7684\u4e00\u4e2a\u627f\u8bfa\u5b9e\u73b0\u6216\u62d2\u7edd\u65f6\u7acb\u5373\u5b9e\u73b0\u6216\u62d2\u7edd\uff0c\u5e76\u5e26\u6709\u6765\u81ea\u8be5\u627f\u8bfa\u7684\u503c\u6216\u539f\u56e0\u30021\u4e2a\u3002\nconst promiseFunction=Async()=&gt\uff1b{const ResolvingPromise=New Promise(Resolve=&gt\uff1bsetTimeout(()=&gt\uff1bResolve(&#39\uff1bSuccess&#39\uff1b)\uff0c1000))\uff1bConst ResolvingPromiseTwo=New Promise((Resolve\uff0cReject)=&gt\uff1bsetTimeout(()=&", "note_en": "I was  reading the MDN docs on JavaScript promises and realized that the difference between  Promise.all and  Promise.allSettled wasn\u2019t immediately obvious.  From the docs linked above: A  Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action\u2019s eventual success value or failure reason.\n A Promise is in one of these states:   pending: initial state, neither fulfilled nor rejected.   fulfilled: meaning that the operation completed successfully.   rejected: meaning that the operation failed.\n You can instantiate a promise like so:   tldr;  Promise.all will immediately reject if any of the promises fail to resolve, wherease  Promise.allSettled will await the completion of all promises.  Promise.all() is passed an iterable (usually an array of other promises) and will attempt to resolve all of them. If any of these promises throws an exception or  rejects,  Promise.all will immediateley invoke its  reject. You should always surround  Promise.all() with a  try/catch or a  .catch(). const  promiseFunction  =  async  ()  =&gt;  {  const  resolvingPromise  =  new  Promise ( resolve  =&gt;  setTimeout (()  =&gt;  resolve ( &#39; success &#39; ),  1000 ));  const  rejectingPromise  =  new  Promise (( resolve ,  reject )  =&gt;  setTimeout (()  =&gt;  reject ( &#39; fail &#39; ),  500 ));  try  {  const  allPromises  =  await  Promise . all ([ resolvingPromise ,  rejectingPromise ]);  }  catch  ( e )  { \t // e is &#39;fail&#39;, which is the contents of the reject function from rejectingPromise  // resolvingPromise = Promise\u00a0{&lt;pending&gt;}  console . log ( e );  } }; promiseFunction ();\n In the above code snippet, when  console.log(e) is called, the status of  resolvingPromise will still be pending. The code invoked in the catch statement is run roughly  500ms after the  promiseFunction invocation - since  rejectingPromise rejects after 500ms. const  promiseFunction  =  async  ()  =&gt;  {  const  resolvingPromise  =  new  Promise ( resolve  =&gt;  setTimeout (()  =&gt;  resolve ( &#39; success &#39; ),  1000 ));  const  resolvingPromiseTwo  =  new  Promise (( resolve ,  reject )  =&gt;  setTimeout (()  =&gt;  resolve ( &#39; successTwo &#39; ),  500 ));  try  {  const  allPromises  =  await  Promise . all ([ resolvingPromise ,  resolvingPromiseTwo ]);  console . log ( allPromises );  // allPromises = [&#39;success&#39;, &#39;successTwo&#39;]  }  catch  ( e )  {  // this code block is never executed  console . log ( e );  } }; promiseFunction ();\n The  Promise.all resolves 1000ms after invocation -  resolvingPromiseTwo resolves after 500ms, and  resolvingPromise resolves after 1s, which completes all the promises, which allows the  Promise.all promise to resolve.  Promise.all() returns an array with the resolved value of each of the Promises passed to it, in the order in which they are passed. In the above case, it is an array of strings =  [&#39;success&#39;, &#39;successTwo&#39;].  Promise.allSettled() is also passed an iterable (usually an array of other promises) and will attempt to resolve all of them. If any of these promises throws an exception or  rejects, its status is set to  rejected. An important note is that  Promise.allSettled  can never throw. You do not need to wrap it with  try/catch - it will always resolve. const  promiseFunction  =  async  ()  =&gt;  {  const  resolvingPromise  =  new  Promise ( resolve  =&gt;  setTimeout (()  =&gt;  resolve ( &#39; success &#39; ),  1000 ));  const  rejectingPromise  =  new  Promise (( resolve ,  reject )  =&gt;  setTimeout (()  =&gt;  reject ( &#39; fail &#39; ),  500 ));  try  {  const  allPromises  =  await  Promise . allSettled ([ resolvingPromise ,  rejectingPromise ]);  console . log ( allPromises );  // allPromises  // [  // {status: &#34;fulfilled&#34;, value: &#39;success&#39;},  // {status: &#34;rejected&#34;, reason: &#39;fail&#39;}  // ]  }  catch  ( e )  {  // this code block is never executed  console . log ( e );  } }; promiseFunction ();\n Promise.allSettled resolves after 1s - it awaits all the promises, regardless of their status or if they  reject. It then returns an array of objects. It\u2019s up to the caller to check if each promise  fulfilled or  rejected. If it  fulfilled, the  value of the object will be contain what was  resolved. If the status is  rejected, it will contain a key called  reason, which is what was thrown or  rejected.  There is also another interest function in  Promise called  Promise.race. The  Promise.race() method returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise.   1\n const  promiseFunction  =  async  ()  =&gt;  {  const  resolvingPromise  =  new  Promise ( resolve  =&gt;  setTimeout (()  =&gt;  resolve ( &#39; success &#39; ),  1000 ));  const  resolvingPromiseTwo  =  new  Promise (( resolve ,  reject )  =&gt;  setTimeout (()  =&gt;  resolve ( &#39; successTwo &#39; ),  500 ));  try  {  const  racedPromises  =  await  Promise . race ([ resolvingPromise ,  resolvingPromiseTwo ]);  console . log ( racedPromises );  // both promises would&#39;ve resolved, but resolvingPromiseTwo was faster, so racedPromises = &#39;successTwo&#39;`  }  catch  ( e )  {  // this code block is only executed if the first promise to settle rejects/throws  console . log ( e );  } }; promiseFunction ();\n In the above,  console.log(racedPromises) is called 500ms after invocation - both promises would\u2019ve resolved, but  resolvingPromiseTwo was faster, and it is what  Promise.race resolves with. This is pretty specific behavior - most of the time this is probably  not what you want, but it\u2019s pretty neat!", "posttime": "2020-05-19 01:02:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,javascript,\u627f\u8bfa", "title": "JavaScript Promise.all\u4e0ePromise.allSetted", "title_en": "JavaScript Promise.all vs. Promise.allSettled", "transed": 1, "url": "https://blog.jonlu.ca/posts/promises?ref=hnm18", "via": "", "real_tags": ["java", "\u627f\u8bfa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002663, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6700\u8fd1\u7684\u4e00\u4e2a\u9879\u76ee\u4e2d\uff0c\u6211\u4e0d\u5f97\u4e0d\u7814\u7a76\u68c0\u6d4brootkit\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u6355\u6349\u5b83\u4eec\u7684\u6700\u6709\u6548\u63aa\u65bd\u3002\u5f53\u6211\u95ee\u5230\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u6211\u95ee\u5230\uff0crootkit\u7684\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u662f\u4ec0\u4e48\uff0c\u5b83\u4eec\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u6211\u7684\u641c\u7d22\u6700\u7ec8\u8ba9\u6211\u627e\u5230\u4e86TrendMicro RootkitBuster\uff0c\u5b83\u5c06\u81ea\u5df1\u63cf\u8ff0\u4e3a\u201c\u4e00\u4e2a\u626b\u63cf\u9690\u85cf\u6587\u4ef6\u3001\u6ce8\u518c\u8868\u9879\u3001\u8fdb\u7a0b\u3001\u9a71\u52a8\u7a0b\u5e8f\u548c\u4e3b\u5f15\u5bfc\u8bb0\u5f55(MBR)\u4ee5\u8bc6\u522b\u548c\u5220\u9664rootkit\u7684\u514d\u8d39\u5de5\u5177\u201d\u3002\n\u5b83\u5439\u5618\u7684\u7279\u70b9\u80af\u5b9a\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\u3002\u4ed6\u4eec\u58f0\u79f0\u68c0\u6d4b\u5230\u4e86\u51e0\u79cdRootkit\u7528\u6765\u5c06\u81ea\u5df1\u94bb\u8fdb\u673a\u5668\u7684\u6280\u672f\uff0c\u4f46\u5b83\u662f\u5982\u4f55\u5728\u5f15\u64ce\u76d6\u4e0b\u5de5\u4f5c\u7684\uff0c\u6211\u4eec\u4f1a\u6ee5\u7528\u5b83\u5417\uff1f\u6211\u51b3\u5b9a\u901a\u8fc7\u9006\u5411\u5de5\u7a0b\u627e\u51fa\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u8fd9\u81f3\u5c11\u53ef\u4ee5\u8bf4\u662f\u628a\u6211\u5e26\u5165\u4e86\u4e00\u4e2a\u6c38\u8fdc\u7ed9\u6211\u7559\u4e0b\u4f24\u75a4\u7684\u5154\u5b50\u6d1e\u4ee3\u7801\u6d1e\u4e2d\u3002\n\u5f00\u59cb\u5192\u9669\u65f6\uff0c\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u4f1a\u6536\u5230Process Hacker\u53d1\u51fa\u7684\u5947\u5999\u8b66\u544a\uff0c\u79f0\u5df2\u7ecf\u5b89\u88c5\u4e86\u65b0\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002\n\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u826f\u597d\u7684\u5f00\u7aef\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4efd\u8d8b\u52bf\u79d1\u6280\u7684\u201c\u5171\u540c\u9a71\u52a8\u7a0b\u5e8f\u201d\uff0c\u8fd9\u7edd\u5bf9\u662f\u503c\u5f97\u7814\u7a76\u7684\u4e1c\u897f\u3002\u9664\u4e86\u8be5\u9a71\u52a8\u7a0b\u5e8f\u6b63\u5728\u5b89\u88c5\u4e4b\u5916\uff0c\u8fd9\u4e2a\u53cb\u597d\u7684\u7a97\u53e3\u4e5f\u6253\u5f00\u4e86\uff0c\u63d0\u793a\u6211\u63a5\u53d7\u8d8b\u52bf\u79d1\u6280\u7684\u7528\u6237\u534f\u8bae\u3002\n\u6211\u73b0\u5728\u8fd8\u6ca1\u6709\u5fc3\u60c5\u628a\u81ea\u5df1\u7684\u7075\u9b42\u4ea4\u7ed9\u9b54\u9b3c\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u6761\u6b3e\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u6761\u6b3e\uff0c\u58f0\u660e\u201c\u60a8\u540c\u610f\u4e0d\u5c1d\u8bd5\u5bf9\u2026\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\u3001\u53cd\u7f16\u8bd1\u3001\u4fee\u6539\u3001\u7ffb\u8bd1\u3001\u53cd\u6c47\u7f16\u3001\u53d1\u73b0\u6e90\u4ee3\u7801\u6216\u521b\u5efa\u6d3e\u751f\u4f5c\u54c1\u3002\u201c\u3002\n\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u5728\u6211\u63a5\u53d7\u4efb\u4f55\u6761\u6b3e\u4e4b\u524d\uff0c\u8d8b\u52bf\u79d1\u6280\u5df2\u7ecf\u5728\u6211\u7684\u673a\u5668\u4e0a\u90e8\u7f72\u4e86\u4ed6\u4eec\u7684\u8f6f\u4ef6\u3002\u6709\u8da3\u7684\u662f\uff0c\u5f53\u6211\u8bd5\u56fe\u901a\u8fc7\u53f3\u952e\u5355\u51fb\u5e94\u7528\u7a0b\u5e8f\u5e76\u6309\u4e0b\u201c\u5173\u95ed\u7a97\u53e3\u201d\u6765\u9000\u51fa\u8be5\u8fc7\u7a0b\u65f6\uff0c\u5b83\u5b8c\u5168\u907f\u5f00\u4e86\u8bb8\u53ef\u534f\u8bae\uff0c\u8f6c\u5230\u626b\u63cf\u4eea\u7684\u4e3b\u5c4f\u5e55\uff0c\u5c3d\u7ba1\u6211\u9009\u62e9\u4e86\u201c\u6211\u4e0d\u63a5\u53d7\u8bb8\u53ef\u534f\u8bae\u7684\u6761\u6b3e\u201d\u9009\u9879\u3002\u8c22\u8c22\u8d8b\u52bf\u79d1\u6280\uff01\n\u5f53\u6211\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u4e2a\u5feb\u901f\u7684\u547d\u4ee4\u63d0\u793a\u7b26\u95ea\u70c1\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u662f\u4e00\u4e2a7-Zip\u81ea\u89e3\u538b\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u7ed3\u679c\uff0c\u5b83\u5c06\u5176\u4f59\u7684\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6\u89e3\u538b\u5230%temp%\\RootkitBuster\u3002\nTmcomm\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6807\u7b7e\u4e3a\u201cTrendMicro Common Module\u201d\u548c\u201cTrend Micro Eyes\u201d\u3002\u5feb\u901f\u6d4f\u89c8\u8be5\u9a71\u52a8\u7a0b\u5e8f\u8868\u660e\uff0c\u5b83\u63a5\u53d7\u4e86\u6765\u81ea\u7279\u6743\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684\u901a\u4fe1\uff0c\u5e76\u6267\u884c\u4e86\u975e\u7279\u5b9a\u4e8erootkit Remover\u672c\u8eab\u7684\u5e38\u89c1\u64cd\u4f5c\u3002\u8be5\u9a71\u52a8\u7a0b\u5e8f\u4e0d\u4ec5\u5728Rootkit Buster\u4e2d\u4f7f\u7528\uff0c\u800c\u4e14\u5728\u8d8b\u52bf\u79d1\u6280\u7684\u6574\u4e2a\u4ea7\u54c1\u7ebf\u4e2d\u90fd\u6709\u5b9e\u65bd\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u7814\u7a76tmcomm\u9a71\u52a8\u7a0b\u5e8f\u3002\u6211\u4eec\u5c06\u628a\u7814\u7a76\u91cd\u70b9\u653e\u5728\u5bfb\u627e\u6ee5\u7528\u9a71\u52a8\u7a0b\u5e8f\u529f\u80fd\u7684\u4e0d\u540c\u65b9\u6cd5\u4e0a\uff0c\u6700\u7ec8\u76ee\u6807\u662f\u80fd\u591f\u6267\u884c\u5185\u6838\u4ee3\u7801\u3002\u6211\u51b3\u5b9a\u4e0d\u68c0\u67e5tmrkb.sys\uff0c\u56e0\u4e3a\u867d\u7136\u6211\u786e\u5b9a\u5b83\u662f\u6613\u53d7\u653b\u51fb\u7684\uff0c\u4f46\u5b83\u4f3c\u4e4e\u53ea\u7528\u4e8erootkit Buster\u3002\n\u8ba9\u6211\u4eec\u4ece\u57fa\u672c\u9a71\u52a8\u7a0b\u5e8f\u5f00\u59cb\u6211\u4eec\u7684\u5192\u9669\u4e4b\u65c5\uff0c\u5b83\u4f3c\u4e4e\u4e0d\u4ec5\u7528\u4e8e\u8fd9\u4e2arootkit Remover\u5b9e\u7528\u7a0b\u5e8f\uff0c\u800c\u4e14\u8fd8\u7528\u4e8e\u5176\u4ed6\u51e0\u4e2a\u8d8b\u52bf\u79d1\u6280\u4ea7\u54c1\u3002\u6b63\u5982\u6211\u5728\u4e0a\u4e00\u8282\u4e2d\u6240\u8bf4\u7684\uff0c\u975e\u5e38\u7b80\u5355\u5730\u6d4f\u89c8\u4e00\u4e0b\u9a71\u52a8\u7a0b\u5e8f\u5c31\u4f1a\u53d1\u73b0\uff0c\u5b83\u786e\u5b9e\u5141\u8bb8\u6765\u81ea\u7279\u6743\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684\u901a\u4fe1\u3002\n\u9a71\u52a8\u7a0b\u5e8f\u91c7\u53d6\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u4e4b\u4e00\u662f\u521b\u5efa\u4e00\u4e2a\u8bbe\u5907\u6765\u63a5\u53d7\u6765\u81ea\u7528\u6237\u6a21\u5f0f\u7684IOCTL\u901a\u4fe1\u3002\u9a71\u52a8\u7a0b\u5e8f\u5728\u8def\u5f84\\Device\\TmComm\u521b\u5efa\u4e00\u4e2a\u8bbe\u5907\uff0c\u5e76\u5728\\DosDevices\\TmComm(\u53ef\u901a\u8fc7\\\\.\\global\\TmComm\u8bbf\u95ee)\u521b\u5efa\u6307\u5411\u8be5\u8bbe\u5907\u7684\u7b26\u53f7\u94fe\u63a5\u3002\u9a71\u52a8\u7a0b\u5e8f\u5165\u53e3\u70b9\u521d\u59cb\u5316\u4e86\u5728\u6574\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u5927\u91cf\u7c7b\u548c\u7ed3\u6784\uff0c\u4f46\u662f\uff0c\u51fa\u4e8e\u6211\u4eec\u7684\u76ee\u7684\uff0c\u6ca1\u6709\u5fc5\u8981\u6db5\u76d6\u6bcf\u4e2a\u7c7b\u548c\u7ed3\u6784\u3002\n\u6211\u5f88\u9ad8\u5174\u770b\u5230\u8d8b\u52bf\u79d1\u6280\u505a\u51fa\u4e86\u6b63\u786e\u7684\u51b3\u5b9a\uff0c\u5c06\u4ed6\u4eec\u7684\u8bbe\u5907\u9650\u5236\u4e3a\u7cfb\u7edf\u7528\u6237\u548c\u7ba1\u7406\u5458\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5373\u4f7f\u6211\u4eec\u786e\u5b9e\u53d1\u73b0\u4e86\u53ef\u5229\u7528\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u4efb\u4f55\u901a\u4fe1\u90fd\u81f3\u5c11\u9700\u8981\u7ba1\u7406\u6743\u9650\uff0c\u6240\u4ee5\u4e1a\u754c\u4e2d\u6709\u76f8\u5f53\u5927\u4e00\u90e8\u5206\u4eba\u4e0d\u4f1a\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u6f0f\u6d1e\u3002\u4f8b\u5982\uff0cMicrosoft\u672c\u8eab\u5e76\u4e0d\u5c06\u7ba1\u7406\u5458\u5230\u5185\u6838\u89c6\u4e3a\u5b89\u5168\u8fb9\u754c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u83b7\u5f97\u4e86\u5927\u91cf\u7684\u8bbf\u95ee\u6743\u9650\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u8d8b\u52bf\u79d1\u6280\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u7684\u53ef\u5229\u7528\u4ee3\u7801\u5c06\u6beb\u65e0\u7528\u5904\u3002\n\u9a71\u52a8\u7a0b\u5e8f\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u7ec4\u4ef6\u662f\u5b83\u7684\u201cTrueApi\u201d\u7c7b\uff0c\u5b83\u5728\u9a71\u52a8\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u671f\u95f4\u5b9e\u4f8b\u5316\u3002\u8be5\u7c7b\u5305\u542b\u6307\u5411\u5728\u6574\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u5bfc\u5165\u51fd\u6570\u7684\u6307\u9488\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u98a0\u5012\u7684\u7ed3\u6784\uff1a\nstruct TrueApi{Byte Initialized\uff1bPVOID ZwQuerySystemInformation\uff1bPVOID ZwCreateFile\uff1bPVOID unk1\uff1b//\u521d\u59cb\u5316\u4e3aNULL\u3002PVOID ZwQueryDirectoryFile\uff1bPVOID ZwClose\uff1bPVOID ZwOpenDirectoryObjectWrapper\uff1bPVOID ZwQueryDirectoryObject\uff1bPVOID ZwDuplicateObject\uff1bPVOID unk2\uff1b//\u521d\u59cb\u5316\u4e3aNULL\u3002PVOID ZwOpenKey\uff1bPVOID ZwEnumerateKey\uff1bPVOID ZwEnumerateValueKey\uff1bPVOID ZwCreateKey\uff1bPVOID ZwQueryValueKey\uff1bPVOID ZwQueryKey\uff1bPVOID ZwDeleteKey\uff1bPVOID ZwTerminateProcess\uff1bPVOID ZwOpenProcess\uff1bPVOID ZwSetValueKey\uff1bPVOID ZwDeleteValueKey\u3002PVOID ZwQuerySecurityObject\uff1bPVOID unk3\uff1b//\u521d\u59cb\u5316\u4e3a\u7a7aPVOID unk4\uff1b//\u521d\u59cb\u5316\u4e3a\u7a7aPVOID ZwSetSecurityObject\uff1b}\uff1b\n\u67e5\u770b\u4ee3\u7801\uff0cTrueApi\u4e3b\u8981\u7528\u4f5c\u76f4\u63a5\u8c03\u7528\u51fd\u6570\u7684\u66ff\u4ee3\u65b9\u6cd5\u3002\u6211\u6709\u6839\u636e\u7684\u731c\u6d4b\u662f\uff0c\u8d8b\u52bf\u79d1\u6280\u5728\u521d\u59cb\u5316\u65f6\u7f13\u5b58\u8fd9\u4e9b\u5bfc\u5165\u7684\u51fd\u6570\uff0c\u4ee5\u907f\u514d\u5ef6\u8fdf\u7684IAT\u6302\u94a9\u3002\u4f46\u662f\uff0c\u7531\u4e8eTrueApi\u662f\u901a\u8fc7\u67e5\u770b\u5bfc\u5165\u8868\u6765\u89e3\u6790\u7684\uff0c\u56e0\u6b64\u5982\u679c\u5b58\u5728\u5728\u9a71\u52a8\u7a0b\u5e8f\u52a0\u8f7d\u65f6\u6302\u94a9IAT\u7684rootkit\uff0c\u5219\u6b64\u673a\u5236\u662f\u65e0\u7528\u7684\u3002\n\u4e0eTrueApi\u7c7b\u4f3c\uff0cXrayApi\u662f\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u7684\u53e6\u4e00\u4e2a\u4e3b\u8981\u7c7b\u3002\u6b64\u7c7b\u7528\u4e8e\u8bbf\u95ee\u591a\u4e2a\u4f4e\u7ea7\u8bbe\u5907\uff0c\u5e76\u76f4\u63a5\u4e0e\u6587\u4ef6\u7cfb\u7edf\u4ea4\u4e92\u3002XrayConfig\u7684\u4e00\u4e2a\u4e3b\u8981\u7ec4\u4ef6\u662f\u5b83\u7684\u201cconfig\u201d\u3002\u4ee5\u4e0b\u662f\u8868\u793a\u914d\u7f6e\u6570\u636e\u7684\u90e8\u5206\u53cd\u5411\u5de5\u7a0b\u7ed3\u6784\uff1a\nstruct XrayConfigData{WORD SIZE\uff1bCHAR PAD1[2]\uff1bDWORD SystemBuildNumber\uff1bDWORD UnkOffset1\uff1bDWORD UnkOffset2\uff1bDWORD UnkOffset3\uff1bChar Pad2[4]\uff1bPVOID NotificationEntryIdentifier\uff1bPVOID NtoskrnlBase\uff1bPVOID IopRootDeviceNode\uff1bPVOID PpDevNodeLockTree\uff1bPVOID ExInitial.\u3002\n\u914d\u7f6e\u6570\u636e\u5b58\u50a8Windows\u5185\u6838\u4e2d\u5185\u90e8/\u672a\u8bb0\u5f55\u53d8\u91cf\u7684\u4f4d\u7f6e\uff0c\u5982IopRootDeviceNode\u3001PpDevNodeLockTree\u3001ExInitializeNPagedLookasideListInternal\u548cExDeleteNPagedLookasideList\u3002\u6211\u731c\u6d4b\u8fd9\u95e8\u8bfe\u7684\u76ee\u7684\u662f\u76f4\u63a5\u8bbf\u95ee\u4f4e\u7ea7\u8bbe\u5907\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u53ef\u80fd\u88ab\u52ab\u6301\u7684\u6709\u6587\u6863\u8bb0\u5f55\u7684\u65b9\u6cd5\u3002\n\u5728\u6211\u4eec\u8fdb\u5165\u9a71\u52a8\u7a0b\u5e8f\u5141\u8bb8\u6211\u4eec\u505a\u4ec0\u4e48\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3IOCTL\u8bf7\u6c42\u662f\u5982\u4f55\u5904\u7406\u7684\u3002\n\u5728\u4e3b\u8c03\u5ea6\u51fd\u6570\u4e2d\uff0cTrend Micro\u9a71\u52a8\u7a0b\u5e8f\u5c06IRP_MJ_DEVICE_CONTROL\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u6211\u79f0\u4e3aTmIoctlRequest\u7684\u4e13\u6709\u7ed3\u6784\u3002\nTrend Micro\u7ec4\u7ec7IOCTL\u8bf7\u6c42\u8c03\u5ea6\u7684\u65b9\u5f0f\u662f\u6709\u51e0\u4e2a\u201c\u8c03\u5ea6\u8868\u201d\u3002\u201c\u57fa\u672c\u8c03\u5ea6\u8868\u201d\u7b80\u5355\u5730\u5305\u542bIOCTL\u4ee3\u7801\u548c\u76f8\u5e94\u7684\u201c\u5b50\u8c03\u5ea6\u529f\u80fd\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u60a8\u53d1\u9001\u4ee3\u7801\u4e3a0xDEADBEEF\u7684IOCTL\u8bf7\u6c42\u65f6\uff0c\u5b83\u5c06\u6bd4\u8f83\u6b64\u57fa\u672c\u8c03\u5ea6\u8868\u7684\u6bcf\u4e2a\u6761\u76ee\uff0c\u5982\u679c\u5b58\u5728\u5177\u6709\u5339\u914d\u4ee3\u7801\u7684\u8868\u6761\u76ee\uff0c\u5219\u4f20\u9012\u6570\u636e\u3002\u57fa\u8868\u6761\u76ee\u53ef\u4ee5\u7531\u4ee5\u4e0b\u7ed3\u6784\u8868\u793a\uff1a\n\u5728\u8c03\u7528DispatchFunction\u4e4b\u540e\uff0c\u5b83\u901a\u5e38\u4f1a\u9a8c\u8bc1\u6240\u63d0\u4f9b\u7684\u4e00\u4e9b\u6570\u636e\uff0c\u8303\u56f4\u4ece\u57fa\u672c\u7684nullptr\u68c0\u67e5\u5230\u68c0\u67e5\u8f93\u5165\u548c\u8f93\u51fa\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002\u7136\u540e\uff0c\u8fd9\u4e9b\u201c\u5b50\u5206\u6d3e\u51fd\u6570\u201d\u6839\u636e\u7528\u6237\u8f93\u5165\u7f13\u51b2\u533a\u4e2d\u4f20\u9012\u7684\u4ee3\u7801\u8fdb\u884c\u53e6\u4e00\u6b21\u67e5\u627e\uff0c\u4ee5\u627e\u5230\u76f8\u5e94\u7684\u201c\u5b50\u8868\u6761\u76ee\u201d\u3002\u5b50\u8868\u6761\u76ee\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u7ed3\u6784\u8868\u793a\uff1a\n\u5728\u8c03\u7528\u5b9e\u9645\u6267\u884c\u6240\u8bf7\u6c42\u64cd\u4f5c\u7684PrimaryRoutine\u4e4b\u524d\uff0c\u5b50\u8c03\u5ea6\u51fd\u6570\u8c03\u7528ValidatorRoutine\u3002\u6b64\u4f8b\u7a0b\u5728\u8f93\u5165\u7f13\u51b2\u533a\u4e0a\u6267\u884c\u201c\u7279\u5b9a\u4e8e\u64cd\u4f5c\u201d\u7684\u9a8c\u8bc1\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5bf9PrimaryRoutine\u5c06\u4f7f\u7528\u7684\u6570\u636e\u6267\u884c\u68c0\u67e5\u3002\u53ea\u6709\u5f53ValidatorRoutine\u6210\u529f\u8fd4\u56de\u65f6\uff0c\u624d\u4f1a\u8c03\u7528PrimaryRoutine\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u57fa\u672c\u4e86\u89e3\u4e86IOCTL\u8bf7\u6c42\u662f\u5982\u4f55\u5904\u7406\u7684\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u4eec\u5141\u8bb8\u6211\u4eec\u505a\u4ec0\u4e48\u3002\u56de\u987e\u5b58\u50a8\u201c\u5b50\u8c03\u5ea6\u51fd\u6570\u201d\u7684\u201c\u57fa\u672c\u8c03\u5ea6\u8868\u201d\u7684\u5b9a\u4e49\uff0c\u8ba9\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u6bcf\u4e2a\u57fa\u8868\u6761\u76ee\uff0c\u5e76\u627e\u51fa\u6bcf\u4e2a\u5b50\u8c03\u5ea6\u8868\u5141\u8bb8\u6211\u4eec\u505a\u4ec0\u4e48\uff01\n\u7b2c\u4e00\u4e2a\u5206\u6d3e\u8868\u4f3c\u4e4e\u4e0e\u6587\u4ef6\u7cfb\u7edf\u4ea4\u4e92\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u9996\u5148\uff0c\u201c\u5b50\u8c03\u5ea6\u8868\u201d\u6761\u76ee\u7684\u4ee3\u7801\u662f\u901a\u8fc7\u4ece\u8f93\u5165\u7f13\u51b2\u533a\u7684\u8d77\u59cb\u5904\u53d6\u6d88\u5f15\u7528DWORD\u6765\u83b7\u5f97\u7684\u3002\u8fd9\u610f\u5473\u7740\u8981\u6307\u5b9a\u8981\u6267\u884c\u54ea\u4e2a\u5b50\u5206\u6d3e\u6761\u76ee\uff0c\u53ea\u9700\u5728\u8f93\u5165\u7f13\u51b2\u533a\u7684\u5e95\u90e8\u8bbe\u7f6e\u4e00\u4e2aDWORD\uff0c\u4f7f\u5176\u4e0e\u6761\u76ee\u7684**OperationCode**\u76f8\u5bf9\u5e94\u3002\n\u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u751f\u6d3b\u66f4\u8f7b\u677e\uff0c\u8d8b\u52bf\u79d1\u6280\u65b9\u4fbf\u5730\u5305\u62ec\u4e86\u5927\u91cf\u7684\u8c03\u8bd5\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e86\u89e3\u51fd\u6570\u7684\u4f5c\u7528\u3002\u4e0b\u9762\u662f\u6211\u5728\u6b64\u5b50\u8c03\u5ea6\u8868\u4e2d\u98a0\u5012\u7684\u529f\u80fd\u4ee5\u53ca\u5b83\u4eec\u5141\u8bb8\u6211\u4eec\u6267\u884c\u7684\u64cd\u4f5c\u3002\n\u6b64\u8c03\u5ea6\u8868\u4e3b\u8981\u7528\u4e8e\u63a7\u5236\u9a71\u52a8\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u626b\u63cf\u529f\u80fd\u3002\u6b64\u5b50\u8c03\u5ea6\u8868\u4e2d\u7684\u8bb8\u591a\u51fd\u6570\u4f7f\u7528\u5355\u72ec\u7684\u626b\u63cf\u7ebf\u7a0b\uff0c\u901a\u8fc7\u5404\u79cd\u65b9\u6cd5(\u6709\u8bb0\u5f55\u7684\u548c\u672a\u8bb0\u5f55\u7684)\u540c\u6b65\u641c\u7d22\u8fdb\u7a0b\u3002\n\u5982\u679c\u7cfb\u7edf\u201c\u53d7\u652f\u6301\u201d\uff0c\u5219\u8fd4\u56deTRUE(\u65e0\u8bba\u5b83\u4eec\u662f\u5426\u5177\u6709\u7528\u4e8e\u60a8\u7684\u6784\u5efa\u7684\u786c\u7f16\u7801\u504f\u79fb\u91cf)\u3002\n\u8fd9\u4e9bIOCTL\u56f4\u7ed5\u7740\u4e00\u4e9b\u6211\u79f0\u4e4b\u4e3a\u201c\u5fae\u4efb\u52a1\u201d\u548c\u201c\u5fae\u626b\u63cf\u201d\u7684\u7ed3\u6784\u3002\u4ee5\u4e0b\u662f\u53cd\u5411\u5de5\u7a0b\u6784\u5efa\u7684\u7ed3\u6784\uff1a\nstruct MicroTaskVtable{PVOID\u6784\u9020\u5668\uff1bPVOID\u65b0\u8282\u70b9\uff1bPVOID\u5220\u9664\u8282\u70b9\uff1bPVOID\u63d2\u5165\uff1bPVOID\u63d2\u5165\u4e4b\u540e\uff1bPVOID\u63d2\u5165\u4e4b\u524d\uff1bPVOID\u7b2c\u4e00\u4e2a\uff1bPVOID\u4e0b\u4e00\u4e2a\uff1bPVOID\u79fb\u9664\uff1bPVOID RemoveHead\uff1bPVOID RemoveTail\uff1bPVOID unk2\uff1bPVOID IsEmpty\uff1b}\uff1bstruct MicroTask{MicroTaskVtable*vtable\uff1bPVOPVOID self2\uff1b//ptr\u81ea\u8eab\u3002DWORD_PTR unk1\uff1bPVOID\u5185\u5b58\u5206\u914d\u5668\uff1bPVOID CurrentListItem\uff1bPVOID PreviousListItem\uff1bDWORD ListSize\uff1bDWORD unk4\uff1b//\u521d\u59cb\u5316\u4e3aNULL\u3002\u5b57\u7b26\u5217\u8868\u540d\u79f0[50]\uff1b}\uff1bstruct MicroScanVtable{PVOID Constructor\uff1bPVOID GetTask\uff1b}\uff1bstruct MicroScan{MicroScanVtable*vtable\uff1bDWORD Tag\uff1b//Always&#39\uff1bPANS&#39\uff1b\u3002\u5b57\u7b26PAD1[4]\uff1bDWORD64\u4efb\u52a1\u5927\u5c0f\uff1b\u5fae\u4efb\u52a1\u4efb\u52a1[4]\uff1b}\uff1b\n\u5bf9\u4e8e\u6b64\u5b50\u8c03\u5ea6\u8868\u4e2d\u7684\u5927\u591a\u6570IOCTL\uff0c\u9a71\u52a8\u7a0b\u5e8f\u586b\u5145\u7684\u5ba2\u6237\u7aef\u4f20\u5165\u4e00\u4e2aMicroScan\u3002\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u5982\u4f55\u6ee5\u7528\u8fd9\u79cd\u4fe1\u4efb\u3002\n\u5f53\u6211\u6700\u521d\u5bf9\u6b64\u5b50\u8c03\u5ea6\u8868\u4e2d\u7684\u51fd\u6570\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\u65f6\uff0c\u6211\u975e\u5e38\u56f0\u60d1\uff0c\u56e0\u4e3a\u4ee3\u7801\u201c\u770b\u8d77\u6765\u4e0d\u6b63\u786e\u201d\u3002\u5b83\u770b\u8d77\u6765\u50cf\u662f\u5ba2\u6237\u7aef\u5c06GetProcessesAllMethods\u7b49\u51fd\u6570\u8fd4\u56de\u7684MicroScan\u5185\u6838\u6307\u9488\u76f4\u63a5\u4f20\u9012\u7ed9DeleteTaskResults\u7b49\u5176\u4ed6\u51fd\u6570\u3002\u7136\u540e\uff0c\u8fd9\u4e9b\u51fd\u6570\u5c06\u91c7\u7528\u8fd9\u4e2a\u4e0d\u53d7\u4fe1\u4efb\u7684\u5185\u6838\u6307\u9488\uff0c\u5e76\u4e14\u5728\u7c7b\u7684\u57fa\u7840\u4e0a\u6307\u5b9a\u7684\u865a\u62df\u51fd\u6570\u8868\u4e2d\u51e0\u4e4e\u6ca1\u6709\u9a8c\u8bc1\u8c03\u7528\u51fd\u6570\u3002\n\u67e5\u770bDeleteTaskResults\u5b50\u5206\u6d3e\u8868\u6761\u76ee\u7684\u201c\u9a8c\u8bc1\u4f8b\u7a0b\u201d\uff0c\u5728\u8f93\u5165\u7f13\u51b2\u533a+0x10\u5904\u6307\u5b9a\u7684MicroScan\u5b9e\u4f8b\u4e0a\u6267\u884c\u7684\u552f\u4e00\u9a8c\u8bc1\u662f\u786e\u4fdd\u5b83\u662f\u6709\u6548\u7684\u5185\u6838\u5730\u5740\u3002\n\u9664\u4e86\u786e\u4fdd\u63d0\u4f9b\u7684\u6307\u9488\u5728\u5185\u6838\u5185\u5b58\u4e2d\u4e4b\u5916\uff0c\u552f\u4e00\u7684\u5176\u4ed6\u68c0\u67e5\u662f\u5728DeleteTaskResults\u4e2d\u8fdb\u884c\u7b80\u5355\u68c0\u67e5\uff0c\u4ee5\u786e\u4fddMicroScan\u7684\u6807\u8bb0\u6210\u5458\u662fPANS\u3002\n\u7531\u4e8eDeleteTaskResults\u8c03\u7528\u5728MicroScan\u5b9e\u4f8b\u7684\u865a\u62df\u51fd\u6570\u8868\u4e2d\u6307\u5b9a\u7684\u6784\u9020\u51fd\u6570\uff0c\u8981\u8c03\u7528\u4efb\u610f\u5185\u6838\u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\uff1a\n\u80fd\u591f\u5206\u914d\u81f3\u5c1110\u5b57\u8282\u7684\u5185\u6838\u5185\u5b58(\u7528\u4e8evtable\u548ctag)\u3002\n\u63a7\u5236\u5206\u914d\u7684\u5185\u6838\u5185\u5b58\u6765\u8bbe\u7f6e\u865a\u62df\u51fd\u6570\u8868\u6307\u9488\u548c\u6807\u7b7e\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u5f53\u6d89\u53ca\u5230\u4ece\u7528\u6237\u6a21\u5f0f\u5206\u914d\u548c\u63a7\u5236\u5185\u6838\u5185\u5b58\u65f6\uff0c\u6211\u7684\u4e00\u4f4d\u5bfc\u5e08Alex Ionescu\u80fd\u591f\u4e3a\u6211\u6307\u660e\u6b63\u786e\u7684\u65b9\u5411\u30022010\u5e74\u7684\u4e00\u4efdHackInTheBox\u6742\u5fd7\u4e0a\u6709\u4e00\u7bc7\u7531Matthew Jurczyk\u64b0\u5199\u7684\u540d\u4e3a\u201c\u5728Windows7\u4e2d\u4fdd\u7559\u5bf9\u8c61\u201d\u7684\u6587\u7ae0\u3002\u672c\u6587\u8ba8\u8bba\u4e86\u4f7f\u7528Windows7\u4e2d\u5f15\u5165\u7684APC\u4fdd\u7559\u5bf9\u8c61\u4ece\u7528\u6237\u6a21\u5f0f\u5206\u914d\u53ef\u63a7\u5185\u6838\u5185\u5b58\u3002\u603b\u4f53\u601d\u8def\u662f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528ApcRoutine\u548cApcArgumentX\u6210\u5458\u4f5c\u4e3a\u5185\u6838\u5185\u5b58\u4e2d\u6240\u9700\u7684\u6570\u636e\u5c06APC\u6392\u961f\u5230APC\u4fdd\u7559\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528NtQuerySystemInformation\u5728\u5185\u6838\u5185\u5b58\u4e2d\u67e5\u627eAPC\u4fdd\u7559\u5bf9\u8c61\u3002\u6b64\u4fdd\u7559\u5bf9\u8c61\u5c06\u5728\u4e00\u884c\u4e2d\u5305\u542b\u4ee5\u524d\u6307\u5b9a\u7684KAPC\u53d8\u91cf\uff0c\u4ece\u800c\u5141\u8bb8\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u591a\u8fbe32\u5b57\u8282\u7684\u5185\u6838\u5185\u5b58(\u572864\u4f4d\u4e0a)\uff0c\u5e76\u77e5\u9053\u5185\u6838\u5185\u5b58\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\uff0c\u6211\u5f3a\u70c8\u5efa\u8bae\u60a8\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u3002\n\u8fd9\u4e2a\u6280\u5de7\u5728Windows10\u4e2d\u4ecd\u7136\u6709\u6548\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u80fd\u591f\u6ee1\u8db3\u6240\u6709\u4e09\u4e2a\u8981\u6c42\u3002\u901a\u8fc7\u4f7f\u7528APC\u4fdd\u7559\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3aMicroScan\u7ed3\u6784\u5206\u914d\u81f3\u5c1110\u4e2a\u5b57\u8282\uff0c\u5e76\u5b8c\u5168\u7ed5\u8fc7\u4e0d\u5145\u5206\u7684\u68c0\u67e5\u3002\u7ed3\u679c\u662f\u4ec0\u4e48\u5462\uff1f\u8c03\u7528\u4efb\u610f\u5185\u6838\u6307\u9488\u7684\u80fd\u529b\uff1a\n\u867d\u7136\u6211\u5728DeleteTaskResults\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u53d7\u653b\u51fb\u7684\u4ee3\u7801\u7684\u5177\u4f53\u793a\u4f8b\uff0c\u4f46\u6211\u5728\u8868\u4e2d\u7528\u661f\u53f7\u6807\u8bb0\u7684\u4efb\u4f55\u51fd\u6570\u90fd\u662f\u6613\u53d7\u653b\u51fb\u7684\u3002\u5b83\u4eec\u90fd\u4fe1\u4efb\u4e0d\u53d7\u4fe1\u4efb\u7684\u5ba2\u6237\u7aef\u6307\u5b9a\u7684\u5185\u6838\u6307\u9488\uff0c\u5e76\u6700\u7ec8\u8c03\u7528MicroScan\u5b9e\u4f8b\u7684\u865a\u62df\u51fd\u6570\u8868\u4e2d\u7684\u51fd\u6570\u3002\n\u5f53\u6211\u5728\u8c03\u8bd5\u5b57\u7b26\u4e32\u4e2d\u770b\u5230\u5b83\u7684\u540d\u79f0\u65f6\uff0c\u8fd9\u4e2a\u51fd\u6570\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\u3002\u4f7f\u7528\u6b64\u5b50\u8c03\u5ea6\u8868\u51fd\u6570\uff0c\u4e0d\u53d7\u4fe1\u4efb\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u6ce8\u518c\u591a\u8fbe16\u4e2a\u5728\u5378\u8f7d\u9a71\u52a8\u7a0b\u5e8f\u65f6\u8c03\u7528\u7684\u4efb\u610f\u201c\u5378\u8f7d\u4f8b\u7a0b\u201d\u3002\u6b64\u51fd\u6570\u7684\u9a8c\u8bc1\u5668\u4f8b\u7a0b\u68c0\u67e5\u6765\u81ea\u4e0d\u53ef\u4fe1\u5ba2\u6237\u7aef\u7f13\u51b2\u533a\u7684\u8be5\u6307\u9488\u7684\u6709\u6548\u6027\u3002\u5982\u679c\u8c03\u7528\u65b9\u6765\u81ea\u7528\u6237\u6a21\u5f0f\uff0c\u5219\u9a8c\u8bc1\u5668\u5bf9\u4e0d\u53d7\u4fe1\u4efb\u7684\u6307\u9488\u8c03\u7528ProbeForRead\u3002\u5982\u679c\u8c03\u7528\u65b9\u6765\u81ea\u5185\u6838\u6a21\u5f0f\uff0c\u5219\u9a8c\u8bc1\u5668\u5c06\u68c0\u67e5\u5b83\u662f\u5426\u4e3a\u6709\u6548\u7684\u5185\u6838\u5185\u5b58\u5730\u5740\u3002\n\u6b64\u51fd\u6570\u4e0d\u80fd\u7acb\u5373\u7528\u4e8e\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u3002\u95ee\u9898\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f\u7528\u6237\u6a21\u5f0f\u8c03\u7528\u8005\uff0c\u5219\u5fc5\u987b\u63d0\u4f9b\u7528\u6237\u6a21\u5f0f\u6307\u9488\uff0c\u56e0\u4e3a\u9a8c\u8bc1\u5668\u4f8b\u7a0b\u4f7f\u7528ProbeForRead\u3002\u5f53\u9a71\u52a8\u7a0b\u5e8f\u5378\u8f7d\u65f6\uff0c\u5c06\u8c03\u7528\u6b64\u7528\u6237\u6a21\u5f0f\u6307\u9488\uff0c\u4f46\u7531\u4e8eSMEP\u7b49\u7f13\u89e3\u63aa\u65bd\uff0c\u5b83\u4e0d\u4f1a\u505a\u592a\u591a\u4e8b\u60c5\u3002\u6211\u5c06\u5728\u540e\u9762\u7684\u5c0f\u8282\u4e2d\u5f15\u7528\u6b64\u51fd\u6570\uff0c\u4f46\u662f\u770b\u5230\u4e00\u4e2a\u4e0d\u53ef\u4fe1\u7684\u7528\u6237\u6a21\u5f0f\u5ba2\u6237\u7aef\u80fd\u591f\u6307\u793a\u9a71\u52a8\u7a0b\u5e8f\u8c03\u7528\u4efb\u610f\u6307\u9488\u7684\u8bbe\u8ba1\u771f\u7684\u5f88\u53ef\u6015\u3002\n\u6b64\u5b50\u8c03\u5ea6\u8868\u7528\u4e8e\u4e0eXrayApi\u4ea4\u4e92\u3002\u867d\u7136Xray Api\u901a\u5e38\u7531\u5185\u6838\u4e2d\u5b9e\u73b0\u7684\u626b\u63cf\u4f7f\u7528\uff0c\u4f46\u6b64\u5b50\u8c03\u5ea6\u8868\u4e3a\u5ba2\u6237\u7aef\u4e0e\u7269\u7406\u9a71\u52a8\u5668\u4ea4\u4e92\u63d0\u4f9b\u4e86\u6709\u9650\u7684\u8bbf\u95ee\u6743\u9650\u3002\n\u6700\u540e\u7684\u5b50\u5206\u6d3e\u7528\u4e8e\u626b\u63cf\u5404\u79cd\u7cfb\u7edf\u7ed3\u6784\u4e2d\u7684\u6302\u94a9\u3002\u770b\u5230Trend Micro\u68c0\u67e5\u5728\u5bf9\u8c61\u7c7b\u578b\u3001\u4e3b\u8981\u51fd\u6570\u8868\u751a\u81f3\u51fd\u6570\u5185\u8054\u6302\u94a9\u4e2d\u5305\u62ec\u6302\u94a9\u7684\u5404\u79cd\u6302\u94a9\u662f\u5f88\u6709\u8da3\u7684\u3002\n\u662f\u7684\uff0cTMXMSCheckSystemObjectByName2\u5c31\u50cf\u542c\u8d77\u6765\u90a3\u4e48\u7cdf\u7cd5\u3002\u5728\u76f4\u63a5\u67e5\u770b\u51fd\u6570\u4e4b\u524d\uff0c\u4e0b\u9762\u662f\u540e\u9762\u4f7f\u7528\u7684\u51e0\u4e2a\u53cd\u5411\u5de5\u7a0b\u7ed3\u6784\uff1a\nstruct CheckSystemObjectParams{PVOID Src\uff1bPVOID DST\uff1bDWORD Size\uff1bDWORD*Outsize\uff1b}\uff1bstruct TXMSParams{DWORD OutStatus\uff1bDWORD HandlerID\uff1bChar unk[0x38]\uff1bCheckSystemObjectParams*CheckParams\uff1b}\uff1b\nTMXMSCheckSystemObjectByName2\u63a5\u53d7\u6e90\u6307\u9488\u3001\u76ee\u6807\u6307\u9488\u548c\u5b57\u8282\u5927\u5c0f\u3002\u4e3aTMXMSCheckSystemObjectByName2\u8c03\u7528\u7684\u9a8c\u8bc1\u5668\u51fd\u6570\u68c0\u67e5\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u672c\u8d28\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u6709\u6548\u7684CheckParams\u7ed3\u6784\uff0c\u5e76\u4e14\u6211\u4eec\u4f20\u9012\u7684DST\u6307\u9488\u4f4d\u4e8e\u7528\u6237\u6a21\u5f0f\u5185\u5b58\u4e2d\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u51fd\u6570\u672c\u8eab\uff1a\n\u5c3d\u7ba1for\u5faa\u73af\u770b\u8d77\u6765\u53ef\u80fd\u5f88\u53ef\u6015\uff0c\u4f46\u5b83\u6240\u505a\u7684\u53ea\u662f\u68c0\u67e5\u4e00\u7cfb\u5217\u5185\u6838\u5185\u5b58\u7684\u4f18\u5316\u65b9\u6cd5\u3002\u5bf9\u4e8eSrc\u5230Src+Size\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5185\u5b58\u9875\uff0c\u8be5\u51fd\u6570\u8c03\u7528MmIsAddressValid\u3002\u771f\u6b63\u53ef\u6015\u7684\u90e8\u5206\u662f\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u8fd9\u4e9b\u884c\u91c7\u7528\u4e0d\u53d7\u4fe1\u4efb\u7684Src\u6307\u9488\uff0c\u5e76\u5c06\u5927\u5c0f\u5b57\u8282\u590d\u5236\u5230\u4e0d\u53d7\u4fe1\u4efb\u7684dst\u6307\u9488\u2026\u3002\u54ce\u5440\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528memmove\u64cd\u4f5c\u6765\u8bfb\u53d6\u4efb\u610f\u5185\u6838\u6307\u9488\uff0c\u4f46\u662f\u5199\u5165\u4efb\u610f\u5185\u6838\u6307\u9488\u53c8\u5982\u4f55\u5462\uff1f\u95ee\u9898\u662fTMXMSCheckSystemObjectByName2\u7684\u9a8c\u8bc1\u5668\u8981\u6c42\u76ee\u6807\u662f\u7528\u6237\u6a21\u5f0f\u5185\u5b58\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4ee3\u7801\u4e2d\u8fd8\u6709\u53e6\u4e00\u4e2a\u9519\u8bef\u3002\n\u4e0b\u4e00\u884c*params-&gt\uff1boutsize=size\uff1b\u4ece\u6211\u4eec\u7684\u7ed3\u6784\u4e2d\u83b7\u53d6size\u6210\u5458\uff0c\u5e76\u5c06\u5176\u653e\u5728\u7531\u4e0d\u53d7\u4fe1\u4efb\u7684outsize\u6210\u5458\u6307\u5b9a\u7684\u6307\u9488\u5904\u3002\u6ca1\u6709\u5bf9\u7279\u5927\u53f7\u6307\u5411\u4ec0\u4e48\u8fdb\u884c\u9a8c\u8bc1\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2aIOCTL\u8c03\u7528\u4e2d\u6700\u591a\u7f16\u5199\u4e00\u4e2aDWORD\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cSrc\u6307\u9488\u9700\u8981\u6307\u5411\u6700\u5927\u5b57\u8282\u5927\u5c0f\u7684\u6709\u6548\u5185\u6838\u5185\u5b58\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\uff0c\u6211\u521a\u521a\u4f20\u9012\u4e86ntoskrnl\u6a21\u5757\u7684\u57fa\u7840\u4f5c\u4e3a\u6e90\u3002\n\u4f7f\u7528\u8fd9\u4e2a\u4efb\u610f\u7684\u5199\u539f\u8bed\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u524d\u9762\u627e\u5230\u7684\u5378\u8f7d\u4f8b\u7a0b\u6280\u5de7\u6765\u6267\u884c\u4ee3\u7801\u3002\u5c3d\u7ba1\u5982\u679c\u6211\u4eec\u4ece\u7528\u6237\u6a21\u5f0f\u8c03\u7528\uff0c\u9a8c\u8bc1\u5668\u4f8b\u7a0b\u4f1a\u963b\u6b62\u6211\u4eec\u4f20\u5165\u5185\u6838\u6307\u9488\uff0c\u4f46\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u901a\u8fc7\u9a8c\u8bc1\u5668\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528WRITE\u539f\u8bed\u5199\u5165\u9a71\u52a8\u7a0b\u5e8f\u7684.Data\u90e8\u5206\u5185\u7684\u5378\u8f7d\u4f8b\u7a0b\u6570\u7ec4\uff0c\u5e76\u653e\u7f6e\u6240\u9700\u7684\u6307\u9488\u3002\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u559c\u6b22\u5728\u6211\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u575a\u6301\u4e25\u683c\u7684\u5b89\u5168\u6027\uff0c\u4f46\u8fd9\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u8ba9\u6211\u6253\u7834\u4e86\u8fd9\u4e2a\u4f20\u7edf\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4e0d\u4f1a\u8ba8\u8bba\u9a71\u52a8\u7a0b\u5e8f\u7684\u5b89\u5168\u95ee\u9898\uff0c\u800c\u662f\u5168\u7403\u6570\u767e\u4e07\u8d8b\u52bf\u79d1\u6280\u5ba2\u6237\u4f7f\u7528\u7684\u53ef\u6015\u4ee3\u7801\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u8be5\u51fd\u6570\u6709\u4e00\u4e2a\u4ece0\u52300x10000\u7684for\u5faa\u73af\uff0c\u9012\u589e4\uff0c\u5e76\u68c0\u7d22\u5f53\u524d\u7d22\u5f15\u540e\u9762\u7684\u8fdb\u7a0b\u5bf9\u8c61(\u5982\u679c\u6709)\u3002\u5982\u679c\u7d22\u5f15\u786e\u5b9e\u4e0e\u67d0\u4e2a\u8fdb\u7a0b\u5339\u914d\uff0c\u5219\u8be5\u51fd\u6570\u68c0\u67e5\u8be5\u8fdb\u7a0b\u7684\u540d\u79f0\u662f\u5426\u4e3acsrss.exe\u3002\u5982\u679c\u8fdb\u7a0b\u540d\u4e3acsrss.exe\uff0c\u5219\u6700\u7ec8\u68c0\u67e5\u8be5\u8fdb\u7a0b\u7684\u4f1a\u8bddID\u662f\u5426\u4e3a0\u3002\u6765\u5427\uff0c\u4f19\u8ba1\u4eec\uff0c\u786e\u5b9e\u6709\u8bb0\u5f55\u5728\u6848\u7684api\u53ef\u4ee5\u679a\u4e3e\u5185\u6838\u2026\u4e2d\u7684\u8fdb\u7a0b\u3002\u66b4\u529b\u6709\u4ec0\u4e48\u610f\u4e49\uff1f\n\u5f53\u6211\u7b2c\u4e00\u6b21\u770b\u5230\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u6211\u4e0d\u786e\u5b9a\u6211\u770b\u5230\u7684\u662f\u4ec0\u4e48\u3002\u8be5\u51fd\u6570\u63a5\u53d7\u5f53\u524d\u8fdb\u7a0b(\u6070\u597d\u662f\u7cfb\u7edf\u8fdb\u7a0b)\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u7cfb\u7edf\u7ebf\u7a0b\u4e2d\u8c03\u7528\u7684\uff0c\u7136\u540e\u5b83\u5728\u7b2c\u4e00\u4e2a0x1000\u5b57\u8282\u4e2d\u641c\u7d22\u5b57\u7b26\u4e32\u201csystem\u201d\u3002\u73b0\u5728\u53d1\u751f\u7684\u662f\u2026\u3002Trend Micro\u901a\u8fc7\u5728\u5176EPROCESS\u7ed3\u6784\u4e2d\u67e5\u627e\u7cfb\u7edf\u8fdb\u7a0b\u7684\u5df2\u77e5\u540d\u79f0\uff0c\u5bf9EPROCESS\u7ed3\u6784\u7684ImageFileName\u6210\u5458\u8fdb\u884c\u66b4\u529b\u653b\u51fb\u3002\u5982\u679c\u9700\u8981\u8fdb\u7a0b\u7684ImageFileName\uff0c\u53ea\u9700\u4f7f\u7528\u5e26\u6709ProcessImageFileName\u7c7b\u2026\u7684ZwQueryInformationProcess\u3002\n\u5728\u6b64\u51fd\u6570\u4e2d\uff0cTrend Micro\u4f7f\u7528csrss\u8fdb\u7a0b\u7684PID\u6765\u66b4\u529b\u5f3a\u5236EPROCESS\u7ed3\u6784\u7684PEB\u6210\u5458\u3002\u8be5\u51fd\u6570\u4f7f\u7528PsLookupProcessByProcessId\u68c0\u7d22csrss\u8fdb\u7a0b\u7684EPROCESS\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528ZwQueryInformationProcess\u68c0\u7d22PebBaseAddress\u3002\u4f7f\u7528\u8fd9\u4e9b\u6307\u9488\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u4e0e\u5df2\u77e5PEB\u6307\u9488\u5339\u914d\u7684\u4ece0\u52300x2000\u7684\u6bcf\u4e2a\u504f\u79fb\u91cf\u3002\u5982\u679c\u60a8\u53ea\u80fd\u4f7f\u7528ZwQueryInformationProcess\uff0c\u5c31\u50cf\u60a8\u5df2\u7ecf\u4f7f\u7528\u2026\u4e00\u6837\uff0c\u90a3\u4e48\u67e5\u627ePEB\u6210\u5458\u7684\u504f\u79fb\u91cf\u53c8\u6709\u4ec0\u4e48\u610f\u4e49\u5462\n\u5728\u8fd9\u91cc\uff0cTrend Micro\u4f7f\u7528\u5177\u6709\u5df2\u77e5\u8d77\u59cb\u5730\u5740\u7684\u5f53\u524d\u7cfb\u7edf\u7ebf\u7a0b\u6765\u66b4\u529b\u5f3a\u5236ETHREAD\u7ed3\u6784\u7684StartAddress\u6210\u5458\u3002\u4e0d\u9700\u8981\u67e5\u627e\u539f\u59cb\u504f\u79fb\u91cf\u7684\u53e6\u4e00\u79cd\u60c5\u51b5\u3002ZwQueryInformationThread\u6709\u4e00\u4e2a\u534a\u6587\u6863\u5316\u7684\u7c7b\uff0c\u540d\u4e3aThreadQuerySetWin32StartAddress\uff0c\u5b83\u4e3a\u60a8\u63d0\u4f9b\u7ebf\u7a0b\u7684\u8d77\u59cb\u5730\u5740\u3002\n\u5f53\u6211\u6700\u521d\u53cd\u7f16\u8bd1\u6b64\u51fd\u6570\u65f6\uff0c\u6211\u8ba4\u4e3aIDA Pro\u53ef\u80fd\u4f1a\u7b80\u5316Memset\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6b64\u51fd\u6570\u6240\u505a\u7684\u4e00\u5207\u5c31\u662f\u5c06\u6240\u6709TrueApi\u7ed3\u6784\u6210\u5458\u8bbe\u7f6e\u4e3a\u96f6\u3002\u6211\u51b3\u5b9a\u5e26\u4e0a\u3002\n..", "note_en": "For a recent project, I had to do research into methods rootkits are detected and the most effective measures to catch them when I asked the question, what are some existing solutions to rootkits and how do they function? My search eventually landed me on the  TrendMicro RootkitBuster which describes itself as \u201cA free tool that scans hidden files, registry entries, processes, drivers, and the master boot record (MBR) to identify and remove rootkits\u201d.\n The features it boasted certainly caught my attention. They were claiming to detect several techniques rootkits use to burrow themselves into a machine, but how does it work under the hood and can we abuse it? I decided to find out by reverse engineering core components of the application itself, leading me down a rabbit hole of code that scarred me permanently, to say the least.\n  Starting the adventure, launching the application resulted in a fancy warning by  Process Hacker that a new driver had been installed.\n  Already off to a good start, we got a copy of Trend Micro\u2019s \u201ccommon driver\u201d, this was definitely something to look into. Besides this driver being installed, this friendly window opened prompting me to accept Trend Micro\u2019s user agreement.\n  I wasn\u2019t in the mood to sign away my soul to the devil just yet, especially since the terms included a clause stating  \u201cYou agree not to attempt to reverse engineer, decompile, modify, translate, disassemble, discover the source code of, or create derivative works from\u2026\u201c.\n Thankfully, Trend Micro already deployed their software on to my machine before I accepted any terms. Funnily enough, when I tried to exit the process by right-clicking on the application and pressing \u201cClose Window\u201d, it completely evaded the license agreement and went to the main screen of the scanner, even though I had selected the \u201cI do not accept the terms of the license agreement\u201d option. Thanks Trend Micro!\n  I noticed a quick command prompt flash when I started the application. It turns out this was the result of a 7-Zip Self Extracting binary which extracted the rest of the application components to  %TEMP%\\RootkitBuster.\n   The  tmcomm driver which was labeled as the \u201cTrendMicro Common Module\u201d and \u201cTrend Micro Eyes\u201d. A quick overlook of the driver indicated that it accepted communication from  privileged user-mode applications and performed common actions that are not specific to the Rootkit Remover itself. This driver  is not only used in the Rootkit Buster and is implemented throughout Trend Micro\u2019s product line.\n In the follow sections, we\u2019ll be deep diving into the  tmcomm driver . We\u2019ll focus our research into finding different ways to abuse the driver\u2019s functionality, with the end goal being able to execute kernel code. I decided not to look into the  tmrkb.sys because although I am sure it is vulnerable, it seems to only be used for the Rootkit Buster.\n  Let\u2019s begin our adventure with the base driver that appears to be used not only for this Rootkit Remover utility, but several other Trend Micro products as well. As I stated in the previous section, a very brief look-over of the driver revealed that it does allow for communication from  privileged user-mode applications.\n  One of the first actions the driver takes is to create a device to accept IOCTL communication from user-mode. The driver creates a device at the path  \\Device\\TmComm and a symbolic link to the device at  \\DosDevices\\TmComm (accessible via  \\\\.\\Global\\TmComm). The driver entrypoint initializes a significant amount of classes and structure used throughout the driver, however, for our purposes, it is not necessary to cover each one.\n I was happy to see that Trend Micro made the correct decision of restricting their device to the  SYSTEM user and Administrators. This meant that even if we did find exploitable code, because any communication would require at least Administrative privileges, a significant amount of the industry would not consider it a vulnerability. For example,  Microsoft themselves do not consider Administrator to Kernel to be a security boundary because of the significant amount of access they get. This does not mean however exploitable code in Trend Micro\u2019s drivers won\u2019t be useful.\n   A large component of the driver is its \u201cTrueApi\u201d class which is instantiated during the driver\u2019s entrypoint. The class contains pointers to  imported functions that get used throughout the driver. Here is a reversed structure:\n struct  TrueApi {\t BYTE  Initialized ;\t PVOID  ZwQuerySystemInformation ;\t PVOID  ZwCreateFile ;\t PVOID  unk1 ;  // Initialized as NULL.\t PVOID  ZwQueryDirectoryFile ;\t PVOID  ZwClose ;\t PVOID  ZwOpenDirectoryObjectWrapper ;\t PVOID  ZwQueryDirectoryObject ;\t PVOID  ZwDuplicateObject ;\t PVOID  unk2 ;  // Initialized as NULL.\t PVOID  ZwOpenKey ;\t PVOID  ZwEnumerateKey ;\t PVOID  ZwEnumerateValueKey ;\t PVOID  ZwCreateKey ;\t PVOID  ZwQueryValueKey ;\t PVOID  ZwQueryKey ;\t PVOID  ZwDeleteKey ;\t PVOID  ZwTerminateProcess ;\t PVOID  ZwOpenProcess ;\t PVOID  ZwSetValueKey ;\t PVOID  ZwDeleteValueKey ;\t PVOID  ZwCreateSection ;\t PVOID  ZwQueryInformationFile ;\t PVOID  ZwSetInformationFile ;\t PVOID  ZwMapViewOfSection ;\t PVOID  ZwUnmapViewOfSection ;\t PVOID  ZwReadFile ;\t PVOID  ZwWriteFile ;\t PVOID  ZwQuerySecurityObject ;\t PVOID  unk3 ;  // Initialized as NULL.\t PVOID  unk4 ;  // Initialized as NULL.\t PVOID  ZwSetSecurityObject ; };\n Looking at the code, the TrueApi is primarily used as an alternative to calling the functions directly. My educated guess is that Trend Micro is caching these imported functions at initialization to evade  delayed IAT hooks. Since the TrueApi is resolved by looking at the import table however, if there is a rootkit that hooks the IAT on driver load, this mechanism is useless.\n  Similar to the TrueApi, the XrayApi is another major class in the driver. This class is used to access several low-level devices and to interact directly with the filesystem. A major component of the XrayConfig is its \u201cconfig\u201d. Here is a partially reverse-engineered structure representing the config data:\n struct  XrayConfigData {\t WORD  Size ;\t CHAR  pad1 [ 2 ];\t DWORD  SystemBuildNumber ;\t DWORD  UnkOffset1 ;\t DWORD  UnkOffset2 ;\t DWORD  UnkOffset3 ;\t CHAR  pad2 [ 4 ];\t PVOID  NotificationEntryIdentifier ;\t PVOID  NtoskrnlBase ;\t PVOID  IopRootDeviceNode ;\t PVOID  PpDevNodeLockTree ;\t PVOID  ExInitializeNPagedLookasideListInternal ;\t PVOID  ExDeleteNPagedLookasideList ;\t CHAR  unkpad3 [ 16 ];\t PVOID  KeAcquireInStackQueuedSpinLockAtDpcLevel ;\t PVOID  KeReleaseInStackQueuedSpinLockFromDpcLevel ;\t ... };\n The config data stores the location of internal/undocumented variables in the Windows Kernel such as the  IopRootDeviceNode,  PpDevNodeLockTree,  ExInitializeNPagedLookasideListInternal, and  ExDeleteNPagedLookasideList. My educated guess for the purpose of this class is to access low-level devices directly rather than use documented methods which could be hijacked.\n  Before we get into what the driver allows us to do, we need to understand how IOCTL requests are handled.\n In the primary dispatch function, the Trend Micro driver converts the data alongside a  IRP_MJ_DEVICE_CONTROL request to a proprietary structure I call a  TmIoctlRequest.\n  The way Trend Micro organized dispatching of IOCTL requests is by having several \u201cdispatch tables\u201d. The \u201cbase dispatch table\u201d simply contains an IOCTL Code and a corresponding \u201csub dispatch function\u201d. For example, when you send an IOCTL request with the code  0xDEADBEEF, it will compare each entry of this base dispatch table and pass along the data if there is a table entry that has the matching code. A base table entry can be represented by the structure below:\n  After the  DispatchFunction is called, it typically verifies some of the data provided ranging from basic  nullptr checks to checking the size of the input and out buffers. These \u201csub dispatch functions\u201d then do another lookup based on a code passed in the user input buffer to find the corresponding \u201csub table entry\u201d. A sub table entry can be represented by the structure below:\n  Before calling the  PrimaryRoutine, which actually performs the requested action, the sub dispatch function calls the  ValidatorRoutine. This routine does \u201caction-specific\u201d validation on the input buffer, meaning that it performs checks on the data the  PrimaryRoutine will be using. Only if the  ValidatorRoutine returns successfully will the  PrimaryRoutine be called.\n Now that we have a basic understanding of how IOCTL requests are handled, let\u2019s explore what they allow us to do. Referring back to the definition of the \u201cbase dispatch table\u201d, which stores \u201csub dispatch functions\u201d, let\u2019s explore each base table entry and figure out what each sub dispatch table allows us to do!\n   This first dispatch table appears to interact with the filesystem, but what does that actually mean? To start things off, the code for the \u201csub dispatch table\u201d entry is obtained by dereferencing a  DWORD from the start of the input buffer. This means that to specify which sub dispatch entry you\u2019d like to execute, you simply need to set a  DWORD at the base of the input buffer to correspond with that entries\u2019  **OperationCode**.\n To make our lives easier, Trend Micro conveniently included a significant amount of debugging strings, often giving an idea of what a function does. Here is a table of the functions I reversed in this sub dispatch table and what they allow us to do.\n    This dispatch table is primarily used to control the driver\u2019s  process scanning features. Many functions in this sub dispatch table use a separate scanning thread to synchronously search for processes via various methods both documented and undocumented.\n Returns TRUE if the system is \u201csupported\u201d (whether or not they have hardcoded offsets for your build).\n These IOCTLs revolve around a few structures I call \u201cMicroTask\u201d and \u201cMicroScan\u201d. Here are the structures reverse-engineered:\n struct  MicroTaskVtable {\t PVOID  Constructor ;\t PVOID  NewNode ;\t PVOID  DeleteNode ;\t PVOID  Insert ;\t PVOID  InsertAfter ;\t PVOID  InsertBefore ;\t PVOID  First ;\t PVOID  Next ;\t PVOID  Remove ;\t PVOID  RemoveHead ;\t PVOID  RemoveTail ;\t PVOID  unk2 ;\t PVOID  IsEmpty ; }; struct  MicroTask {\t MicroTaskVtable *  vtable ;\t PVOID  self1 ;  // ptr to itself.\t PVOID  self2 ;  // ptr to itself.\t DWORD_PTR  unk1 ;\t PVOID  MemoryAllocator ;\t PVOID  CurrentListItem ;\t PVOID  PreviousListItem ;\t DWORD  ListSize ;\t DWORD  unk4 ;  // Initialized as NULL.\t char  ListName [ 50 ]; }; struct  MicroScanVtable {\t PVOID  Constructor ;\t PVOID  GetTask ; }; struct  MicroScan {\t MicroScanVtable *  vtable ;\t DWORD  Tag ;  // Always &#39;PANS&#39;.\t char  pad1 [ 4 ];\t DWORD64  TasksSize ;\t MicroTask  Tasks [ 4 ]; };\n For most of the IOCTLs in this sub dispatch table, a MicroScan is passed in by the client which the driver populates. We\u2019ll look into how we can abuse this trust in the next section.\n  When I was initially reverse engineering the functions in this sub dispatch table, I was quite confused because the code \u201cdidn\u2019t seem right\u201d. It appeared like the  MicroScan kernel pointer returned by functions such as  GetProcessesAllMethods was being directly passed onto other functions such as  DeleteTaskResults by  the client. These functions would then take this untrusted kernel pointer and with almost no validation call functions in the virtual function table specified at the base of the class.\n  Taking a look at the \u201cvalidation routine\u201d for the  DeleteTaskResults sub dispatch table entry, the only validation performed on the  MicroScan instance specified at the input buffer  + 0x10 was making sure it was a valid kernel address.\n  The only other check besides making sure that the supplied pointer was in kernel memory was a simple check in  DeleteTaskResults to make sure the  Tag member of the  MicroScan is  PANS.\n  Since  DeleteTaskResults calls the constructor specified in the virtual function table of the  MicroScan instance, to call an arbitrary kernel function we need to:\n Be able to allocate at least 10 bytes of kernel memory (for vtable and tag).\n  Control the allocated kernel memory to set the virtual function table pointer and the tag.\n Fortunately a mentor of mine,  Alex Ionescu, was able to point me in the right direction when it comes to allocating and controlling kernel memory from user-mode. A  HackInTheBox Magazine from 2010 had an article by  Matthew Jurczyk called \u201cReserve Objects in Windows 7\u201d. This article discussed using APC Reserve Objects, which was introduced in Windows 7, to allocate controllable kernel memory from user-mode. The general idea is that you can queue an Apc to an Apc Reserve Object with the  ApcRoutine and  ApcArgumentX members being the data you want in kernel memory and then use  NtQuerySystemInformation to find the Apc Reserve Object in kernel memory. This reserve object will have the previously specified  KAPC variables in a row, allowing a user-mode application to control up to 32 bytes of kernel memory (on 64-bit) and know the location of the kernel memory. I would strongly suggest reading the article if you\u2019d like to learn more.\n This trick still works in Windows 10, meaning we\u2019re able to meet all three requirements. By using an Apc Reserve Object, we can allocate at least 10 bytes for the  MicroScan structure and bypass the inadequate checks completely. The result? The ability to call arbitrary kernel pointers:\n  Although I provided a specific example of vulnerable code in  DeleteTaskResults, any of the functions I marked in the table with asterisks are vulnerable. They all trust the kernel pointer specified by the untrusted client and end up calling a function in the  MicroScan instance\u2019s virtual function table.\n       This function caught my eye the moment I saw its name in a debug string. Using this sub dispatch table function, an  untrusted client can register up to 16 arbitrary \u201cunload routines\u201d that get called when the driver unloads. This function\u2019s validator routine checks this pointer from the untrusted client buffer for validity. If the caller is from user-mode, the validator calls  ProbeForRead on the untrusted pointer. If the caller is from kernel-mode, the validator checks that it is a valid kernel memory address.\n This function cannot immediately be used in an exploit from user-mode. The problem is that if we\u2019re a user-mode caller, we  must provide a user-mode pointer, because the validator routine uses  ProbeForRead. When the driver unloads, this user-mode pointer gets called, but it won\u2019t do much because of mitigations such as  SMEP. I\u2019ll reference this function in a later section, but it is genuinely scary to see an untrusted user-mode client being able to direct a driver to call an arbitrary pointer  by design.\n  This sub dispatch table is used to interact with the XrayApi. Although the Xray Api is generally used by scans implemented in the kernel, this sub dispatch table provides limited access for the client to interact with physical drives.\n    The final sub dispatch is used to scan for hooks in a variety of system structures. It was interesting to see the variety of hooks Trend Micro checks for including hooks in object types, major function tables, and even function inline hooks.\n   Yeah,  TMXMSCheckSystemObjectByName2 is as bad as it sounds. Before looking at the function directly, here\u2019s a few reverse engineered structures used later:\n struct  CheckSystemObjectParams {  PVOID  Src ;  PVOID  Dst ;  DWORD  Size ;  DWORD *  OutSize ; }; struct  TXMSParams {  DWORD  OutStatus ;  DWORD  HandlerID ;  CHAR  unk [ 0x38 ];  CheckSystemObjectParams *  CheckParams ; };\n TMXMSCheckSystemObjectByName2 takes in a Source pointer, Destination pointer, and a Size in bytes. The validator function called for  TMXMSCheckSystemObjectByName2 checks the following:\n  Essentially, this means that we need to pass a valid  CheckParams structure and the  Dst pointer we pass is in user-mode memory. Now let\u2019s look at the function itself:\n  Although that for loop may seem scary, all it is doing is an optimized method of checking a range of kernel memory. For every memory page in the range  Src to  Src + Size, the function calls  MmIsAddressValid. The real scary part is the following operations:\n  These lines take an untrusted  Src pointer and copies  Size bytes to the untrusted  Dst pointer\u2026 yikes. We can use the  memmove operations to read an arbitrary kernel pointer, but what about writing to an arbitrary kernel pointer? The problem is that the validator for  TMXMSCheckSystemObjectByName2 requires that the destination is user-mode memory. Fortunately, there is another bug in the code.\n The next  *params-&gt;OutSize = Size; line takes the  Size member from our structure and places it at the pointer specified by the untrusted  OutSize member. No verification is done on what  OutSize points to, thus we can write up to a DWORD each IOCTL call. One caveat is that the  Src pointer would need to point to valid kernel memory for up to  Size bytes. To meet this requirement, I just passed the base of the  ntoskrnl module as the source.\n Using this arbitrary write primitive, we can use the previously found unload routines trick to execute code. Although the validator routine prevents us from passing in a kernel pointer if we\u2019re calling from user-mode, we don\u2019t actually need to go through the validator. Instead, we can write to the unload routine array inside of the driver\u2019s  .data section using our write primitive and place the pointer we want.\n  Typically, I like sticking to strictly security in my blog posts, but this driver made me break that tradition. In this section, we won\u2019t be covering the security issues of the driver, rather the terrible code that\u2019s used by millions of Trend Micro customers around the world.\n   Let\u2019s take a look at what\u2019s happening here. This function has a for loop from 0 to 0x10000, incrementing by 4, and retrieves the object of the process behind the current index (if there is one). If the index does match a process, the function checks if the name of the process is  csrss.exe. If the process is named  csrss.exe, the final check is that the session ID of the process is 0. Come on guys, there is literally documented API to enumerate processes from kernel\u2026 what\u2019s the point of bruteforcing?\n    When I first saw this code, I wasn\u2019t sure what I was looking at. The function takes the current process, which happens to be the System process since this is called in a System thread, then it searches for the string \u201cSystem\u201d in the first 0x1000 bytes. What\u2019s happening is\u2026 Trend Micro is bruteforcing the  ImageFileName member of the  EPROCESS structure by looking for the known name of the System process inside of its  EPROCESS structure. If you wanted the  ImageFileName of a process, just use  ZwQueryInformationProcess with the  ProcessImageFileName class\u2026\n   In this function, Trend Micro uses the PID of the  csrss process to brute force the  Peb member of the  EPROCESS structure. The function retrieves the  EPROCESS object of the  csrss process by using  PsLookupProcessByProcessId and it retrieves the  PebBaseAddress by using  ZwQueryInformationProcess. Using those pointers, it tries every offset from 0 to 0x2000 that matches the known  Peb pointer. What\u2019s the point of finding the offset of the  Peb member when you can just use  ZwQueryInformationProcess, as you already do\u2026\n   Here Trend Micro uses the current system thread with a known start address to brute force the  StartAddress member of the  ETHREAD structure. Another case where finding the raw offset is unnecessary. There is a semi-documented class of  ZwQueryInformationThread called  ThreadQuerySetWin32StartAddress which gives you the start address of a thread.\n   When I initially decompiled this function, I thought IDA Pro might be simplifying a  memset operation, because all this function was doing was setting all of the  TrueApi structure members to zero. I decided to tak\n......", "posttime": "2020-05-19 01:01:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rootkit,pvoid", "title": "\u5982\u4f55\u4f7f\u7528Trend Micro\u7684Rootkit Remover\u5b89\u88c5Rootkit", "title_en": "How to Use Trend Micro's Rootkit Remover to Install a Rootkit", "transed": 1, "url": "https://d4stiny.github.io/How-to-use-Trend-Micro-Rootkit-Remover-to-Install-a-Rootkit/", "via": "", "real_tags": ["rootkit", "pvoid"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002662, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "[\u5217\u8868\u4e2d\u7684\u4e0a\u4e00\u4e2a][\u5217\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a][\u7ebf\u7a0b\u4e2d\u7684\u524d\u4e00\u4e2a][\u7ebf\u7a0b\u4e2d\u7684\u4e0b\u4e00\u4e2a]\u5217\u8868\uff1aopenbsd-techSubject\uff1aclarityFrom\uff1a&lt\uff1bjohnc()armadilloSpace\uff01COM&gt\uff1b\u65e5\u671f\uff1a2020-05-16 19\uff1a13\uff1a37\u6d88\u606f-ID\uff1a20200516121337.533b97457880de85c8001c140e636eb6.035aeb57e5.wbe()\u7535\u5b50\u90ae\u4ef618\uff01\u597d\u7238\u7238\uff01com[\u4e0b\u8f7d\u539f\u59cb\u6d88\u606f\u6216\u6b63\u6587](\u4e0d\u786e\u5b9a\u8fd9\u662f\u5c5e\u4e8etech@\u8fd8\u662fmisc@)\u5173\u4e8e\u975e\u529f\u80fd\u4ee3\u7801\u66f4\u6539\u7684\u60f3\u6cd5\u662f\u4ec0\u4e48\uff0c\u8fd9\u4e9b\u66f4\u6539\u53ea\u662f\u4e3a\u4e86\u5728\u4e0d\u66f4\u6539\u529f\u80fd\u7684\u60c5\u51b5\u4e0b\u63d0\u9ad8\u6e05\u6670\u5ea6\uff1f\u4f8b\u5982\uff0c\u5728wsdisplay_mulops\u7ed3\u6784\u4e2d\uff0c\u6709int(*alloc_attr)(void*c\uff0cint fg\uff0cint bg\uff0cint flag\uff0clong*attrp)\uff1bvoid(*unpack_attr)(void*c\uff0clong attr\uff0cint*fg\uff0cint*bg\uff0cint*ul)\uff1b\u5728\u7ed3\u6784\u7684\u672b\u5c3e\u662f\u8fd9\u6837\u7684\u6ce8\u91ca\uff0c\u8fd9\u8868\u660e\u81f3\u5c11\u6709\u4eba(\u9664\u4e86\u6211\u4e4b\u5916)\u88ab\u5b83\u5f04\u7cca\u6d82\u4e86\uff1a/*XXX\u9700\u8981\u4e00\u4e2afree_attr()\uff1f*/\u6211\u5efa\u8baealloc_attr\u5e94\u8be5\u91cd\u547d\u540d\u4e3apack_attr\uff0c\u4f46\u662f\u572839\u4e2a\u72ec\u7279\u7684\u6587\u4ef6\u4e2d\uff0calloc_attr\u4e0a\u670984\u4e2a\u5339\u914d\u9879\u3002\u540c\u6837\uff0c\u6211\u5728\u9605\u8bfb\u4ee3\u7801\u65f6\u4f1a\u505a\u7b14\u8bb0\uff0c\u5e76\u4e14\u5728\u5404\u79cd\u6587\u4ef6\u548c\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u6ce8\u91ca\u53ef\u4ee5\u5e2e\u52a9\u5176\u4ed6\u4eba\u66f4\u5feb\u5730\u638c\u63e1\u672a\u6765\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u6211\u662f\u8fd9\u6837\u505a\u7684\u3002\u6211\u5e0c\u671b\u5199\u4e00\u7bc7\u5173\u4e8e\u6211\u7684\u63a2\u7d22\u7684\u50cf\u6837\u7684\u6587\u7ae0\uff0c\u4f46\u5185\u8054\u6ce8\u91ca\u662f\u66f4\u6301\u4e45\u7684\u6587\u6863\u3002[\u5217\u8868\u4e2d\u7684\u4e0a\u4e00\u4e2a][\u5217\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a][\u7ebf\u7a0b\u4e2d\u7684\u4e0a\u4e00\u4e2a][\u7ebf\u7a0b\u4e2d\u7684\u4e0b\u4e00\u4e2a]", "note_en": "[ prev in list] [ next in list] [ prev in thread] [ next in thread]   List:  openbsd-techSubject:  Code changes for clarityFrom:  &lt;johnc () armadilloaerospace ! com&gt;Date:  2020-05-16 19:13:37Message-ID:  20200516121337.533b97457880de85c8001c140e636eb6.035aeb57e5.wbe () email18 ! godaddy ! com[Download RAW  message or  body](Not sure if this belongs in tech@ or misc@)What is the thinking around non-functional code changes that justimprove clarity without functionality changes? I can imagine badexperiences with that, but there is certainly room for improvement.For instance, in the wsdisplay_emulops structure, there are:int\t(*alloc_attr)(void *c, int fg, int bg, int flags, long *attrp);void\t(*unpack_attr)(void *c, long attr, int *fg, int *bg, int *ul);And at the end of the structure is this comment, showing that atleast someone (other than me) was confused by it:\t/* XXX need a free_attr() ??? */I would suggest that alloc_attr should be renamed to pack_attr, butthere are 84 matches on alloc_attr across 39 unique files.Similarly, I am taking notes as I read the code, and adding a fewcomments in various files and functions could help other people getup to speed much faster in the future, but I am hesitant to submitpatches. I am hoping to write a decent article about my explorations,but inline comments are more durable documentation. [ prev in list] [ next in list] [ prev in thread] [ next in thread]", "posttime": "2020-05-19 01:01:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,carmack,attr", "title": "John Carmack\u6b63\u5728\u9605\u8bfb\u548c\u8d21\u732eOpenBSD\u6e90\u4ee3\u7801", "title_en": "John Carmack is reading and contributing to OpenBSD source code", "transed": 1, "url": "https://marc.info/?l=openbsd-tech&m=158965652915344&w=2", "via": "", "real_tags": ["\u4ee3\u7801", "carmack", "attr"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002661, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u5230\u8fbe\u7f8e\u56fd\u540e\u7684\u5934\u4e24\u4e2a\u6708\uff0c\u540e\u671f\u98ce\u9669\u6295\u8d44(VC)\u6d3b\u52a8\u6ca1\u6709\u663e\u8457\u53d8\u5316\uff0c\u4f46\u65e9\u671f\u98ce\u9669\u6295\u8d44\u6d3b\u52a8\u4e0b\u964d\u4e8638%\u3002\u65e9\u671f\u98ce\u9669\u6295\u8d44\u5bf9\u5e02\u573a\u72b6\u51b5\u7684\u7279\u522b\u654f\u611f\u6027-\u6211\u4eec\u8868\u660e\uff0c\u8fd9\u57281976\u5e74\u81f32017\u5e7440\u5e74\u7684\u8870\u9000\u4e2d\u662f\u5e38\u89c1\u7684-\u5f15\u53d1\u4e86\u4eba\u4eec\u5bf9\u98ce\u9669\u6295\u8d44\u7684\u987a\u5468\u671f\u6027\u53ca\u5176\u5bf9\u521b\u65b0\u7684\u5f71\u54cd\u7684\u8d28\u7591\uff0c\u7279\u522b\u662f\u8003\u8651\u5230\u98ce\u9669\u6295\u8d44\u76f8\u5bf9\u4e0d\u53d7\u516c\u5f00\u5e02\u573a\u5f71\u54cd\u7684\u666e\u904d\u8bf4\u6cd5\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u5bf9\u521b\u65b0\u7684\u5f71\u54cd\u5e76\u4e0d\u662f\u826f\u6027\u7684\uff1a\u7531\u98ce\u6295\u652f\u6301\u7684\u516c\u53f8\u5728\u7ecf\u6d4e\u8870\u9000\u671f\u95f4\u8fdb\u884c\u7684\u521b\u65b0\u88ab\u5f15\u7528\u7684\u6b21\u6570\u8f83\u5c11\uff0c\u539f\u521b\u6027\u8f83\u5dee\uff0c\u4e00\u822c\u6027\u8f83\u5dee\uff0c\u4e0e\u57fa\u7840\u79d1\u5b66\u7684\u5173\u8054\u5ea6\u4e5f\u8f83\u4f4e\u3002\u5bf9\u4e8e\u7531\u65e9\u671f\u98ce\u9669\u57fa\u91d1\u8d44\u52a9\u7684\u521d\u521b\u4f01\u4e1a\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5f71\u54cd\u66f4\u4e3a\u660e\u663e\u3002\u8003\u8651\u5230\u98ce\u9669\u6295\u8d44\u5728\u4e3a\u7ecf\u6d4e\u4e2d\u7684\u7a81\u7834\u6027\u521b\u65b0\u63d0\u4f9b\u8d44\u91d1\u65b9\u9762\u626e\u6f14\u7684\u91cd\u8981\u89d2\u8272\uff0c\u6211\u4eec\u7684\u53d1\u73b0\u5bf9\u66f4\u5e7f\u6cdb\u5730\u8ba8\u8bba\u8de8\u5546\u4e1a\u5468\u671f\u7684\u521b\u65b0\u7684\u6027\u8d28\u5177\u6709\u91cd\u8981\u610f\u4e49", "note_en": "Although late-stage venture capital (VC) activity did not change dramatically in the first two months after the COVID-19 pandemic reached the U.S., early-stage VC activity declined by 38%. The particular sensitivity of early-stage VC investment to market conditions\u2014which we show to be common across recessions spanning four decades from 1976 to 2017\u2014raises questions about the pro-cyclicality of VC and its implications for innovation, especially in light of the common narrative that VC is relatively insulated from public markets. We find that the implications for innovation are not benign: innovation conducted by VC-backed firms in recessions is less highly cited, less original, less general, and less closely related to fundamental science. These effects are more pronounced for startups financed by early-stage venture funds. Given the important role that VC plays in financing breakthrough innovations in the economy, our findings have implications for the broader discussion on the nature of innovation across business cycles", "posttime": "2020-05-19 01:01:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8d44\u672c,capital,\u521b\u65b0", "title": "\u98ce\u9669\u8d44\u672c\u5982\u4f55\u8ddf\u968f\u7ecf\u6d4e\u4e0b\u6ed1\u5e76\u9650\u5236\u521b\u65b0", "title_en": "How venture capital follows the economy down and curtails innovation", "transed": 1, "url": "https://www.nber.org/papers/w27150", "via": "", "real_tags": ["\u8d44\u672c", "capital", "\u521b\u65b0"]}, {"category": "", "categoryclass": "", "imagename": "fcd32b4f875a968af27581eaf5699dc5.png", "infoid": 1002660, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee5Android 10\u4e3a\u76ee\u6807\u7684\u4e0d\u53d7\u4fe1\u4efb\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5bf9\u5e94\u7528\u7a0b\u5e8f\u4e3b\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u8c03\u7528exec()\u3002\u6267\u884c\u53ef\u5199\u5e94\u7528\u7a0b\u5e8f\u4e3b\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5c5e\u4e8eW^X\u8fdd\u89c4\u3002\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u53ea\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u7684APK\u6587\u4ef6\u4e2d\u534a\u5d4c\u5165\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002\n\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u89e3\u51b3\uff0cTermux\u9700\u8981\u66f4\u65b0\u5176\u76ee\u6807API\u3002\u6b64\u9875\u9762\u7528\u4e8e\u6536\u96c6\u6709\u5173\u5982\u4f55\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u60f3\u6cd5\u548c\u4fe1\u606f\u3002", "note_en": "Untrusted apps that target Android 10 cannot invoke exec() on files withinthe app&#39;s home directory. This execution of files from the writable app homedirectory is a W^X violation. Apps should load only the binary code that&#39;sembedded within an app&#39;s APK file.\n In the long run this needs to be fixed and Termux needs to update its target API.This page is for gathering ideas and information about how to work around this.", "posttime": "2020-05-19 01:00:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,android,\u627c\u6740,termux,\u5e94\u7528\u7a0b\u5e8f", "title": "Android 10\u6b63\u5728\u627c\u6740Termux\u7ec8\u7aef\u5e94\u7528", "title_en": "Android 10 Is killing Termux terminal app", "transed": 1, "url": "https://github.com/termux/termux-packages/wiki/Termux-and-Android-10", "via": "", "real_tags": ["app", "android", "\u627c\u6740", "termux", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "9b73312c19476fb321721106cc36795f.png", "infoid": 1002659, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4efb\u5929\u5802\u7684\u76ee\u6807\u662f\u4e3a\u73a9\u5bb6\u63d0\u4f9b\u5c3d\u53ef\u80fd\u597d\u7684\u56fe\u5f62\uff0c\u4e3a\u6b64\uff0c\u5b83\u5c06\u4e0e\u8ba1\u7b97\u673a\u56fe\u5f62\u9886\u57df\u6700\u5927\u7684\u53c2\u4e0e\u8005\u4e4b\u4e00\u5408\u4f5c\uff0c\u751f\u4ea7\u7ec8\u6781\u56fe\u5f62\u82af\u7247\u3002\n\u5176\u7ed3\u679c\u662f\u4e3a\u8fd9\u5bb6\u4eba\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u6f02\u4eae\u7684\u63a7\u5236\u53f0\uff0c\u5e76\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u672c500\u9875\u7684\u624b\u518c\u3002\n\u522b\u62c5\u5fc3\uff0c\u6211\u5411\u4f60\u4fdd\u8bc1\uff0c\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u4f1a\u90a3\u4e48\u957f&\u6211\u5f88\u4eab\u53d7\uff01\n\u4e3b\u5904\u7406\u5668\u662f\u8fd0\u884c\u9891\u7387\u4e3a93.75 MHz\u7684NEC VR4300\uff0c\u5b83\u662fSilicon Graphics\u7684MIPS R4300i\u7684\u4e8c\u8fdb\u5236\u517c\u5bb9\u7248\u672c\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\nMIPS III ISA\uff1a\u53d6\u4ee3MIPS II\uff0c\u91c7\u7528\u65b0\u768464\u4f4d\u6307\u4ee4\u300264\u4f4d\u5b57\u79f0\u4e3a\u53cc\u5b57\u3002\n5\u7ea7\u6d41\u6c34\u7ebf\uff1a\u6700\u591a\u53ef\u4ee5\u540c\u65f6\u6267\u884c5\u6761\u6307\u4ee4(\u8be6\u7ec6\u8bf4\u660e\u53ef\u4ee5\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u627e\u5230)\u3002\n24 KB\u4e00\u7ea7\u7f13\u5b58\uff1a\u5206\u4e3a16 KB\u7528\u4e8e\u6307\u4ee4\uff0c8 KB\u7528\u4e8e\u6570\u636e\u3002\n\u6b64\u5c01\u88c5\u4e2d\u8fd8\u5305\u62ec\u4e00\u4e2a\u5185\u90e864\u4f4dFPU\uff0cCPU\u5c06\u5176\u8bc6\u522b\u4e3a\u534f\u5904\u7406\u5668(COP1)\uff0c\u5c3d\u7ba1\u8be5\u5355\u5143\u5b89\u88c5\u5728ALU\u65c1\u8fb9\uff0c\u5e76\u4e14\u53ea\u80fd\u901a\u8fc7ALU\u6d41\u6c34\u7ebf\u8bbf\u95ee\uff0c\u8fd9\u610f\u5473\u7740\u672c\u8eab\u4e0d\u5b58\u5728\u534f\u540c\u5904\u7406\u3002\nRAM\u7684\u7ec4\u88c5\u65b9\u5f0f\u9075\u5faa\u7edf\u4e00\u5185\u5b58\u67b6\u6784\u6216\u201cUMA\u201d\uff0c\u5373\u6240\u6709\u53ef\u7528RAM\u4ec5\u96c6\u4e2d\u5728\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4efb\u4f55\u9700\u8981RAM\u7684\u7ec4\u4ef6\u90fd\u5c06\u8bbf\u95ee\u6b64\u5171\u4eab\u4f4d\u7f6e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ef2\u88c1\u5176\u8bbf\u95ee\u7684\u7ec4\u4ef6\u662fGPU\u3002\n\u9009\u62e9\u6b64\u8bbe\u8ba1\u7684\u539f\u56e0\u662f\uff0c\u5b83\u8282\u7701\u4e86\u5927\u91cf\u7684\u751f\u4ea7\u6210\u672c\uff0c\u800c\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u7ba1\u7406\u4e0d\u5f53\uff0c\u5b83\u4f1a\u589e\u52a0\u8bbf\u95ee\u4e89\u7528\u3002\n\u7531\u4e8e\u7edf\u4e00\u5185\u5b58\u67b6\u6784\uff0cCPU\u4e0d\u518d\u80fd\u591f\u76f4\u63a5\u8bbf\u95eeRAM\uff0c\u56e0\u6b64GPU\u4e5f\u5c06\u63d0\u4f9bDMA\u529f\u80fd\u3002\n\u9664\u4e86UMA\u4e4b\u5916\uff0cRAM\u7684\u7ed3\u6784\u6709\u70b9\u590d\u6742\uff0c\u6240\u4ee5\u6211\u5c06\u5c3d\u91cf\u4fdd\u6301\u7b80\u5355\uff0c\u8fd9\u91cc\u662f&amp\uff1bmldr\u3002\n\u7cfb\u7edf\u7269\u7406\u4e0a\u5305\u542b4.5MB\u7684RAM\uff0c\u4f46\u662f\u5b83\u662f\u4f7f\u75289\u4f4d\u6570\u636e\u603b\u7ebf\u8fde\u63a5\u7684\uff0c\u5176\u4e2d\u7b2c9\u4f4d\u4fdd\u7559\u7ed9GPU(\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd)\u3002\u56e0\u6b64\uff0c\u9664GPU\u4e4b\u5916\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u6700\u591a\u53ea\u80fd\u627e\u52304 MB\u3002\n\u5b89\u88c5\u5728\u7535\u8def\u677f\u4e0a\u7684RAM\u7c7b\u578b\u88ab\u79f0\u4e3aRambus DRAM\u6216\u7b80\u79f0\u201cRDRAM\u201d\uff0c\u8fd9\u53ea\u662f\u53e6\u4e00\u4e2a\u5728\u6210\u4e3a\u4e0b\u4e00\u6807\u51c6\u65f6\u4e0eSDRAM\u7ade\u4e89\u7684\u8bbe\u8ba1\u3002RDRAM\u4ee5\u4e32\u884c\u65b9\u5f0f\u8fde\u63a5(\u6bcf\u6b21\u4f20\u8f93\u4e00\u4f4d)\uff0c\u800cSDRAM\u4f7f\u7528\u5e76\u884c\u8fde\u63a5(\u4e00\u6b21\u4f20\u8f93\u591a\u4f4d)\u3002\nRDRAM\u7684\u5ef6\u8fdf\u4e0e\u5b89\u88c5\u7684\u5b58\u50a8\u4f53\u6570\u91cf\u6210\u6b63\u6bd4\uff0c\u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8003\u8651\u5230\u6b64\u7cfb\u7edf\u62e5\u6709\u7684RAM\u6570\u91cf\uff0c\u6240\u4ea7\u751f\u7684\u5ef6\u8fdf\u662f\u76f8\u5f53\u5927\u7684\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8fd9\u4e2a\u63a7\u5236\u53f0\u4e0a\u7684\u53ef\u7528RAM\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5Expansion Pak\u9644\u4ef6\u6765\u6269\u5c55\uff1a\u4e00\u4e2a\u5916\u89c2\u522b\u81f4\u7684\u5c0f\u76d2\u5b50\uff0c\u5305\u542b4.5MB\u3002\u5947\u602a\u7684\u662f\uff0cRAM\u603b\u7ebf\u5fc5\u987b\u7ec8\u6b62\uff0c\u6240\u4ee5\u63a7\u5236\u53f0\u603b\u662f\u9644\u5e26\u4e00\u4e2a\u7ec8\u7ed3\u5668(\u79f0\u4e3a\u8df3\u7ebf\u5305)\u6765\u4ee3\u66ff\u6269\u5c55\u5305\u3002\u73b0\u5728\uff0c\u60a8\u53ef\u80fd\u4f1a\u95ee\uff0c\u5982\u679c\u60a8\u5728\u6ca1\u6709\u5b89\u88c5\u4efb\u4f55Pak\u7684\u60c5\u51b5\u4e0b\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff1f\u4ece\u5b57\u9762\u4e0a\u770b\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7a7a\u767d\u5c4f\u5e55\uff01\n\u56fe\u5f62\u7684\u6838\u5fc3\u9a7b\u7559\u5728\u7531Silicon Graphics\u8bbe\u8ba1\u7684\u4e00\u4e2a\u540d\u4e3aReality Co-Processor\u7684\u5de8\u578b\u82af\u7247\u4e0a\uff0c\u8fd0\u884c\u901f\u5ea6\u4e3a62.5 MHz\u3002\u8fd9\u4e2a\u8f6f\u4ef6\u5305\u5305\u542b\u5f88\u591a\u7535\u8def\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u89c9\u5f97\u5f88\u96be\u8ddf\u4e0a\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u56fe\u5f62\u5b50\u7cfb\u7edf\u7684\u67b6\u6784\u975e\u5e38\u590d\u6742\uff01\u8fd9\u79cd\u8bbe\u8ba1\u7684\u4e3b\u8981\u7406\u5ff5\u662f\uff0cGPU\u4e0d\u50cf\u7ade\u4e89\u5bf9\u624b\u7684\u90a3\u6837\u662f\u4e00\u4e2a\u201c\u7b80\u5355\u201d\u7684\u5149\u6805\u5316\u5668\uff0c\u76f8\u53cd\uff0c\u5b83\u8fd8\u5e94\u8be5\u80fd\u591f\u52a0\u901f\u51e0\u4f55\u8ba1\u7b97(\u5378\u8f7dCPU)\uff0c\u4e3a\u6b64\uff0c\u9700\u8981\u66f4\u591a\u7684\u7535\u8def\u3002\n\u8bdd\u867d\u5982\u6b64\uff0c\u8be5\u82af\u7247\u5206\u4e3a\u4e09\u4e2a\u4e3b\u8981\u6a21\u5757\uff0c\u5176\u4e2d\u4e24\u4e2a\u7528\u4e8e\u56fe\u5f62\u5904\u7406\uff1a\n\u6807\u91cf\u5355\u5143\uff1a\u57fa\u4e8eMIPS R400\u7684CPU\uff0c\u5b9e\u73b0R400\u6307\u4ee4\u96c6\u7684\u5b50\u96c6\u3002\n\u5411\u91cf\u5355\u5143\uff1a\u752832\u4e2a128\u4f4d\u5bc4\u5b58\u5668\u6267\u884c\u5411\u91cf\u8fd0\u7b97\u7684\u534f\u5904\u7406\u5668\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u88ab\u5206\u62108\u4e2a\u90e8\u5206\uff0c\u4e00\u6b21\u64cd\u4f5c8\u4e2a16\u4f4d\u77e2\u91cf(\u5c31\u50cf\u4f20\u7edfCPU\u4e0a\u7684SIMD\u6307\u4ee4\u4e00\u6837)\u3002\n\u7cfb\u7edf\u63a7\u5236\uff1a\u63d0\u4f9bDMA\u529f\u80fd\u5e76\u63a7\u5236\u5176\u90bb\u5c45\u6a21\u5757RDP(\u7a0d\u540e\u8be6\u7ec6\u4ecb\u7ecd)\u7684\u53e6\u4e00\u4e2a\u534f\u5904\u7406\u5668\u3002\n\u4e3a\u4e86\u64cd\u4f5c\u8be5\u6a21\u5757\uff0cCPU\u5728RAM\u4e2d\u5b58\u50a8\u4e00\u7cfb\u5217\u79f0\u4e3a\u663e\u793a\u5217\u8868\u7684\u547d\u4ee4\u4ee5\u53ca\u5c06\u8981\u64cd\u4f5c\u7684\u6570\u636e\uff0c\u7136\u540eRSP\u8bfb\u53d6\u8be5\u5217\u8868\u5e76\u5bf9\u5176\u5e94\u7528\u6240\u9700\u7684\u64cd\u4f5c\u3002\u53ef\u7528\u7684\u529f\u80fd\u5305\u62ec\u51e0\u4f55\u4f53\u53d8\u6362(\u5982\u900f\u89c6\u6295\u5f71)\u3001\u526a\u88c1\u548c\u7167\u660e\u3002\n\u8fd9\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u5b83\u662f\u5982\u4f55\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u5462\uff1f\u55ef\uff0c\u6709\u8da3\u7684\u662f\uff1a\u4e0e\u5b83\u7684\u7ade\u4e89\u5bf9\u624b(PS1\u548c\u571f\u661f)\u4e0d\u540c\uff0c\u51e0\u4f55\u5f15\u64ce\u5e76\u4e0d\u662f\u786c\u8fde\u7ebf\u7684\u3002\u76f8\u53cd\uff0cRSP\u5305\u542b\u4e00\u4e9b\u5185\u5b58(4KB\u7528\u4e8e\u6307\u4ee4\uff0c4KB\u7528\u4e8e\u6570\u636e)\u6765\u5b58\u50a8\u5fae\u7801\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u8d85\u8fc71000\u6761\u6307\u4ee4\u7684\u5c0f\u7a0b\u5e8f\uff0c\u7528\u4e8e\u5b9e\u73b0\u56fe\u5f62\u6d41\u6c34\u7ebf\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u6307\u5bfc\u6807\u91cf\u5355\u5143\u5e94\u8be5\u5982\u4f55\u64cd\u4f5c\u6211\u4eec\u7684\u56fe\u5f62\u6570\u636e\u3002\u5fae\u7801\u5728\u8fd0\u884c\u65f6\u7531CPU\u9988\u9001\u3002\n\u4efb\u5929\u5802\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u5fae\u7801\u53ef\u4f9b\u9009\u62e9\uff0c\u4e0eSNES\u7684\u540e\u53f0\u6a21\u5f0f\u7c7b\u4f3c\uff0c\u6bcf\u4e2a\u5fae\u7801\u90fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5e73\u8861\u8d44\u6e90\u3002\n\u5728RSP\u5904\u7406\u5b8c\u6211\u4eec\u7684\u591a\u8fb9\u5f62\u6570\u636e\u4e4b\u540e\uff0c\u5b83\u5c06\u5f00\u59cb\u5411\u4e0b\u4e00\u4e2a\u6a21\u5757RDP\u53d1\u9001\u5149\u6805\u5316\u547d\u4ee4\u6765\u7ed8\u5236\u5e27\u3002\u8fd9\u4e9b\u547d\u4ee4\u8981\u4e48\u4f7f\u7528\u79f0\u4e3aXbus\u7684\u4e13\u7528\u603b\u7ebf\u53d1\u9001\uff0c\u8981\u4e48\u901a\u8fc7\u4e3bRAM\u53d1\u9001\u3002\nRDP\u662f\u53e6\u4e00\u4e2a\u5904\u7406\u5668(\u8fd9\u6b21\u5177\u6709\u56fa\u5b9a\u529f\u80fd)\uff0c\u5b83\u5305\u62ec\u591a\u4e2a\u5f15\u64ce\uff0c\u7528\u4e8e\u5c06\u7eb9\u7406\u6620\u5c04\u5230\u591a\u8fb9\u5f62\u3001\u6df7\u5408\u989c\u8272\u548c\u6784\u5efa\u65b0\u6846\u67b6\u3002\n\u5b83\u53ef\u4ee5\u5c06\u4e09\u89d2\u5f62\u6216\u77e9\u5f62\u4f5c\u4e3a\u56fe\u5143\u5904\u7406\uff0c\u540e\u8005\u5bf9\u4e8e\u7ed8\u5236\u7cbe\u7075\u975e\u5e38\u6709\u7528\u3002RDP\u7684\u5149\u6805\u5316\u7ba1\u9053\u5305\u542b\u4ee5\u4e0b\u5757\uff1a\n\u7eb9\u7406\u5355\u5143\uff1a\u4f7f\u75284KB\u7684\u4e13\u7528\u5185\u5b58(\u79f0\u4e3a\u201cTMEM\u201d)\u5904\u7406\u7eb9\u7406\uff0c\u6700\u591a\u53ef\u4f7f\u75288\u4e2a\u5e73\u94fa\u7528\u4e8e\u7eb9\u7406\u3002\u5b83\u53ef\u4ee5\u5bf9\u5b83\u4eec\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u53cc\u7ebf\u6027\u8fc7\u6ee4\uff1a\u5c06\u9009\u5b9a\u76842D\u7eb9\u7406\u6620\u5c04\u52303D\u5f62\u72b6\u4e0a\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u5e73\u6ed1\u4ee5\u907f\u514d\u50cf\u7d20\u5316\u533a\u57df\u3002\u4e00\u4e2a\u201c\u5b8c\u6574\u201d\u7684\u8fc7\u6ee4\u5668\u9700\u8981\u56db\u4e2a\u70b9\u6765\u6267\u884c\u63d2\u503c\uff0c\u7136\u800c\uff0c\u8fd9\u4e2a\u63a7\u5236\u53f0\u53ea\u4f7f\u7528\u4e86\u4e09\u4e2a\u70b9(\u4e09\u89d2\u5f62\u63d2\u503c)\uff0c\u5bfc\u81f4\u4e86\u4e00\u4e9b\u5f02\u5e38\u3002\u56e0\u6b64\uff0c\u67d0\u4e9b\u7eb9\u7406\u5fc5\u987b\u4e8b\u5148\u201c\u8c03\u6574\u201d\u3002\nMIP\u6620\u5c04\uff1a\u6839\u636e\u7eb9\u7406\u7684\u7ec6\u8282\u7ea7\u522b\u81ea\u52a8\u9009\u62e9\u7eb9\u7406\u7684\u7f29\u5c0f\u7248\u672c\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8ba1\u7b97\u8fdc\u79bb\u6444\u5f71\u673a\u53ef\u89c1\u7684\u5927\u578b\u7eb9\u7406\uff0c\u5e76\u9632\u6b62\u51fa\u73b0\u952f\u9f7f\u3002\u5982\u679c\u542f\u7528\uff0cN64\u5c06\u6539\u7528\u4e09\u7ebf\u6027\u8fc7\u6ee4\u6620\u5c04\u7eb9\u7406\u3002\u6b64\u65b0\u7b97\u6cd5\u8fd8\u5c06\u5728mipmap\u4e4b\u95f4\u8fdb\u884c\u63d2\u503c\uff0c\u4ee5\u67d4\u5316\u7ec6\u8282\u7ea7\u522b\u7684\u7a81\u7136\u53d8\u5316\u3002\n\u900f\u89c6\u6821\u6b63\uff1a\u9009\u62e9\u5c06\u7eb9\u7406\u6620\u5c04\u5230\u4e09\u89d2\u5f62\u7684\u7b97\u6cd5\u3002\u4e0e\u5176\u4ed6\u7b97\u6cd5\u4e0d\u540c\uff0c\u8be5\u7b97\u6cd5\u8003\u8651\u4e86\u6bcf\u4e2a\u57fa\u672c\u4f53\u7684\u6df1\u5ea6\u503c\uff0c\u4ece\u800c\u83b7\u5f97\u4e86\u66f4\u597d\u7684\u6548\u679c\u3002\n\u989c\u8272\u7ec4\u5408\u5668\uff1a\u6df7\u5408\u548c\u63d2\u503c\u591a\u5c42\u989c\u8272(\u4f8b\u5982\uff0c\u5e94\u7528\u7740\u8272\u5668)\u3002\n\u6df7\u5408\u5668\uff1a\u5c06\u50cf\u7d20\u4e0e\u5f53\u524d\u5e27\u7f13\u51b2\u533a\u6df7\u5408\uff0c\u4ee5\u5e94\u7528\u534a\u900f\u660e\u3001\u6297\u952f\u9f7f\u3001\u96fe\u5316\u548c\u6296\u52a8\u3002\u5b83\u8fd8\u6267\u884cz\u7f13\u51b2(\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd)\u3002\n\u5b58\u50a8\u5668\u63a5\u53e3\uff1a\u7531\u524d\u9762\u7684\u5757\u7528\u6765\u8bfb\u5199RAM\u4e2d\u7684\u5f53\u524d\u5e27\u7f13\u51b2\u533a\u548c/\u6216\u586b\u5145TMEM\u3002\nRDP\u63d0\u4f9b\u56db\u79cd\u529f\u80fd\u6a21\u5f0f\uff0c\u6bcf\u79cd\u6a21\u5f0f\u90fd\u4ee5\u4e0d\u540c\u65b9\u5f0f\u7ec4\u5408\u8fd9\u4e9b\u6a21\u5757\uff0c\u4ee5\u4f18\u5316\u7279\u5b9a\u64cd\u4f5c\u3002\n\u7531\u4e8e\u6b64\u6a21\u5757\u4e0d\u65ad\u66f4\u65b0\u5e27\u7f13\u51b2\u533a\uff0c\u56e0\u6b64\u5b83\u5904\u7406RAM\u7684\u65b9\u5f0f\u975e\u5e38\u4e0d\u540c\uff1a\u8fd8\u8bb0\u5f97\u4e0d\u5bfb\u5e38\u76849\u4f4d\u201c\u5b57\u8282\u201d\u5417\uff1f\u7b2c\u4e5d\u4f4d\u7528\u4e8e\u4e0e\u5e27\u7f13\u51b2\u533a\u76f8\u5173\u7684\u8ba1\u7b97(\u5982z\u7f13\u51b2\u548c\u6297\u952f\u9f7f)\uff0c\u5e76\u4e14\u53ea\u80fd\u901a\u8fc7\u5185\u5b58\u63a5\u53e3\u8bbf\u95ee\u3002\n\u4ea7\u751f\u7684\u5e27\u7f13\u51b2\u533a\u5fc5\u987b\u53d1\u9001\u5230\u89c6\u9891\u7f16\u7801\u5668\u624d\u80fd\u5728\u5c4f\u5e55\u4e0a\u663e\u793a(DMA\u548c\u89c6\u9891\u63a5\u53e3\u7ec4\u4ef6\u662f\u5b8c\u6210\u6b64\u4efb\u52a1\u7684\u5173\u952e)\u3002\n\u7406\u8bba\u4e0a\u6700\u5927\u5bb9\u91cf\u4e3a24\u4f4d\u8272\u6df1(1680\u4e07\u8272)\u548c640x480\u5206\u8fa8\u7387(\u6216PAL\u533a\u57df\u4e2d\u7684720x576)\u3002\u6211\u63d0\u5230\u8fd9\u662f\u201c\u7406\u8bba\u4e0a\u7684\u201d\uff0c\u56e0\u4e3a\u4f7f\u7528\u6700\u5927\u7684\u80fd\u529b\u53ef\u80fd\u4f1a\u8017\u8d39\u8d44\u6e90\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5458\u4f1a\u503e\u5411\u4e8e\u4f7f\u7528\u8f83\u4f4e\u7684\u7edf\u8ba1\u6570\u636e\u6765\u91ca\u653e\u8db3\u591f\u7684\u8d44\u6e90\u7528\u4e8e\u5176\u4ed6\u670d\u52a1\u3002\n\u8ba9\u6211\u4eec\u628a\u524d\u9762\u6240\u6709\u7684\u89e3\u91ca\u90fd\u653e\u5728\u6b63\u786e\u7684\u89d2\u5ea6\uff0c\u56e0\u4e3a\u6211\u5c06\u501f\u7528\u4efb\u5929\u5802\u7684\u8d85\u7ea7\u9a6c\u91cc\u596564\u6765\u7b80\u800c\u8a00\u4e4b\u5730\u5c55\u793a\u4e00\u4e2a\u6846\u67b6\u662f\u5982\u4f55\u7ec4\u6210\u7684\uff1a\n\u9996\u5148\uff0c\u6211\u4eec\u76843D\u6a21\u578b\u4f4d\u4e8e\u76d2\u5f0fROM\u4e2d\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u6301\u7a33\u5b9a\u7684\u5e26\u5bbd\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u5c06\u5b83\u4eec\u590d\u5236\u5230RAM\u4e2d\u3002\n\u7136\u540e\u662f\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u6784\u5efa\u573a\u666f\u7684\u65f6\u5019\u4e86\uff0cCPU\u53ef\u4ee5\u81ea\u5df1\u5b8c\u6210\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\uff0c\u6240\u4ee5\u4efb\u52a1\u88ab\u59d4\u6258\u7ed9RCP\u3002CPU\u5c06\u6539\u4e3a\u5411RCP\u53d1\u9001\u547d\u4ee4\uff0c\u8fd9\u662f\u901a\u8fc7\u6267\u884c\u4ee5\u4e0b\u4efb\u52a1\u6765\u5b8c\u6210\u7684\uff1a\n\u7ec4\u6210\u5305\u542bRSP\u8981\u6267\u884c\u7684\u64cd\u4f5c\u7684\u663e\u793a\u5217\u8868\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728RAM\u4e2d\u3002\n\u4e4b\u540e\uff0cRSP\u5c06\u5f00\u59cb\u6267\u884c\u7b2c\u4e00\u6279\u4efb\u52a1\uff0c\u7ed3\u679c\u5c06\u4ee5\u5149\u6805\u5316\u547d\u4ee4\u7684\u5f62\u5f0f\u53d1\u9001\u5230RDP\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u6210\u529f\u5730\u5904\u7406\u4e86\u6211\u4eec\u7684\u6570\u636e\u5e76\u5bf9\u5176\u5e94\u7528\u4e86\u4e00\u4e9b\u6548\u679c\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u9700\u8981\uff1a\n\u6b63\u5982\u60a8\u53ef\u80fd\u731c\u5230\u7684\u90a3\u6837\uff0c\u8fd9\u4e9b\u4efb\u52a1\u5c06\u7531RDP\u6267\u884c\u3002CPU\u4f1a\u5c06\u6570\u636e(\u5982\u7eb9\u7406)\u653e\u5230RAM\u4e0a\uff0c\u8fd9\u4e2a\u6a21\u5757\u6709\u56fa\u5b9a\u7684\u6d41\u6c34\u7ebf\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u4efb\u52a1\u9009\u62e9\u6700\u4f73\u7684\u64cd\u4f5c\u6a21\u5f0f\u6765\u63d0\u9ad8\u5e27\u7387\u3002\n\u4e00\u65e6RDP\u5b8c\u6210\u6570\u636e\u5904\u7406\uff0c\u5b83\u5c06\u628a\u6700\u7ec8\u7684\u4f4d\u56fe\u5199\u5165RAM\u4e2d\u7684\u5e27\u7f13\u51b2\u533a\u3002\u4e4b\u540e\uff0cCPU\u5fc5\u987b\u5c06\u65b0\u5e27\u4f20\u8f93\u5230\u89c6\u9891\u63a5\u53e3(\u6700\u597d\u4f7f\u7528DMA)\uff0c\u89c6\u9891\u63a5\u53e3\u518d\u5c06\u5176\u53d1\u9001\u5230\u89c6\u9891\u7f16\u7801\u5668\u8fdb\u884c\u663e\u793a\u3002\n\u8fd9\u91cc\u6709\u4e00\u4e9b\u8d85\u7ea7\u4efb\u5929\u5802\u4ee5\u524d\u76842D\u89d2\u8272\u7684\u4f8b\u5b50\uff0c\u5b83\u4eec\u662f\u4e3a\u65b0\u76843D\u65f6\u4ee3\u91cd\u65b0\u8bbe\u8ba1\u7684\uff0c\u5b83\u4eec\u662f\u4ea4\u4e92\u5f0f\u7684\uff0c\u6240\u4ee5\u6211\u9f13\u52b1\u4f60\u53bb\u770b\u770b\u5b83\u4eec\uff01\n\u5982\u679c\u4f60\u8bfb\u8fc7\u4ee5\u524d\u7684\u63a7\u5236\u53f0\uff0c\u4f60\u4f1a\u9047\u5230\u5173\u4e8e\u66f2\u9762\u53ef\u89c1\u6027\u7684\u65e0\u4f11\u6b62\u7684\u95ee\u9898\uff0c\u73b0\u5728\u4f60\u53ef\u80fd\u8ba4\u4e3a\u591a\u8fb9\u5f62\u6392\u5e8f\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u5728\u672c\u7cfb\u5217\u4e2d\uff0cRDP\u7b2c\u4e00\u6b21\u91c7\u7528\u4e86\u4e00\u79cd\u79f0\u4e3aZ-Buffering\u7684\u57fa\u4e8e\u786c\u4ef6\u7684\u65b9\u6cd5\u3002\u7b80\u800c\u8a00\u4e4b\uff0cRDP\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u4e2a\u540d\u4e3aZ-Buffer\u7684\u989d\u5916\u7f13\u51b2\u533a\u3002\u8fd9\u4e0e\u5e27\u7f13\u51b2\u533a\u7684\u5c3a\u5bf8\u76f8\u540c\uff0c\u4f46\u662f\u6bcf\u4e2a\u6761\u76ee\u90fd\u5305\u542b\u6700\u8fd1\u50cf\u7d20\u76f8\u5bf9\u4e8e\u6444\u5f71\u673a\u7684\u6df1\u5ea6(Z\u503c)\uff0c\u800c\u4e0d\u662f\u5b58\u50a8RGB\u503c\u3002\n\u5728RDP\u6805\u683c\u5316\u77e2\u91cf\u4e4b\u540e\uff0c\u5c06\u65b0\u50cf\u7d20\u7684z\u503c\u4e0eZ\u7f13\u51b2\u5668\u4e2d\u7684\u76f8\u5e94\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u65b0\u50cf\u7d20\u5305\u542b\u8f83\u5c0f\u7684z\u503c\uff0c\u5219\u610f\u5473\u7740\u65b0\u50cf\u7d20\u4f4d\u4e8e\u524d\u4e00\u4e2a\u50cf\u7d20\u7684\u524d\u9762\uff0c\u56e0\u6b64\u5b83\u5c06\u5e94\u7528\u4e8e\u5e27\u7f13\u51b2\u533a\uff0c\u5e76\u4e14z\u7f13\u51b2\u533a\u4e5f\u4f1a\u66f4\u65b0\u3002\u5426\u5219\uff0c\u8be5\u50cf\u7d20\u5c06\u88ab\u4e22\u5f03\u3002\n\u603b\u4f53\u800c\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u53d7\u6b22\u8fce\u7684\u8865\u5145\uff1a\u7a0b\u5e8f\u5458\u4e0d\u518d\u9700\u8981\u62c5\u5fc3\u5b9e\u73b0\u57fa\u4e8e\u8f6f\u4ef6\u7684\u591a\u8fb9\u5f62\u6392\u5e8f\u65b9\u6cd5\uff0c\u8fd9\u4f1a\u8017\u5c3d\u5927\u91cf\u7684CPU\u8d44\u6e90\u3002\u4f46\u662f\uff0cZ\u7f13\u51b2\u533a\u5e76\u4e0d\u80fd\u4f7f\u60a8\u514d\u4e8e\u8f93\u5165\u4e0d\u5fc5\u8981\u7684\u51e0\u4f55\u4f53(\u4e22\u5f03\u6216\u900f\u7ed8\uff0c\u4e24\u8005\u90fd\u4f1a\u6d88\u8017\u8d44\u6e90)\u3002\u4e3a\u6b64\uff0c\u6e38\u620f\u5f15\u64ce\u53ef\u80fd\u4f1a\u9009\u62e9\u5305\u62ec\u906e\u6321\u5254\u9664\u7b97\u6cd5\uff0c\u4ee5\u5c3d\u65e9\u4e22\u5f03\u4e0d\u53ef\u89c1\u7684\u51e0\u4f55\u4f53\u3002\nSGI\u663e\u7136\u5728\u8fd9\u4e2a\u7cfb\u7edf\u4e0a\u6295\u5165\u4e86\u5927\u91cf\u6280\u672f\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u662f\u4e00\u6b3e\u9762\u5411\u5bb6\u5ead\u7684\u6e38\u620f\u673a\uff0c\u56e0\u6b64\uff0c\u5b83\u5fc5\u987b\u964d\u4f4e\u6210\u672c\u3002\u4e00\u4e9b\u8270\u96be\u7684\u51b3\u5b9a\u7ed9\u7a0b\u5e8f\u5458\u5e26\u6765\u4e86\u56f0\u96be\u7684\u6311\u6218\uff1a\n\u7531\u4e8e\u56fe\u5f62\u6d41\u6c34\u7ebf\u4e2d\u7684\u7ec4\u4ef6\u548c\u64cd\u4f5c\u6570\u91cf\u5de8\u5927\uff0cRCP\u6700\u7ec8\u975e\u5e38\u5bb9\u6613\u51fa\u73b0\u505c\u6ede\uff1a\u8fd9\u662f\u4e00\u79cd\u4e0d\u53d7\u6b22\u8fce\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6240\u9700\u7684\u6570\u636e\u5728\u6d41\u6c34\u7ebf\u540e\u9762\u5ef6\u8fdf\uff0c\u5b50\u7ec4\u4ef6\u4f1a\u5728\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\u4fdd\u6301\u7a7a\u95f2\u3002\n\u8fd9\u603b\u662f\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff0c\u5e76\u7531\u7a0b\u5e8f\u5458\u6765\u907f\u514d\u5b83\u4eec\u3002\u867d\u7136\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u4e00\u4e9bCPU\uff0c\u5982\u6807\u91cf\u5355\u5143\uff0c\u5b9e\u73b0\u4e86\u4e00\u79cd\u79f0\u4e3a\u65c1\u8def\u7684\u529f\u80fd\uff0c\u5b83\u901a\u8fc7\u7ed5\u8fc7\u4e00\u4e9b\u53ef\u4ee5\u8df3\u8fc7\u7684\u6267\u884c\u9636\u6bb5\u6765\u4ee5\u66f4\u5feb\u7684\u901f\u5ea6\u6267\u884c\u7c7b\u4f3c\u7684\u6307\u4ee4\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5fc5\u987b\u8ba1\u7b97\u8fde\u7eed\u7684\u52a0\u6cd5\u6307\u4ee4\uff0c\u5219\u4e0d\u9700\u8981\u5c06\u7ed3\u679c\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u5728\u6bcf\u6b21\u52a0\u6cd5\u5b8c\u6210\u65f6\u5c06\u5176\u8bfb\u56de\uff0c\u800c\u662f\u53ef\u4ee5\u5bf9\u6240\u6709\u52a0\u6cd5\u4fdd\u6301\u4f7f\u7528\u76f8\u540c\u7684\u5bc4\u5b58\u5668\uff0c\u5e76\u5728\u6700\u540e\u4e00\u6b21\u52a0\u6cd5\u5b8c\u6210\u540e\u8fdb\u884c\u56de\u5199\u3002\n\u5728RDP\u5185\u90e8\u67094KB\u7684\u7eb9\u7406\u5185\u5b58\u53ef\u7528\u4f5c\u7eb9\u7406\u7f13\u5b58\uff0c\u5176\u4e3b\u8981\u76ee\u6807\u662f\u907f\u514d\u505c\u6b62RAM\u7684\u8bfb\u53d6\u5468\u671f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c4KB\u78b0\u5de7\u4e0d\u8db3\u4ee5\u5904\u7406\u9ad8\u5206\u8fa8\u7387\u7eb9\u7406\u3002\u6b64\u5916\uff0c\u5982\u679c\u4f7f\u7528mipmap\uff0c\u5219\u53ef\u7528\u7f13\u5b58\u91cf\u5c06\u51cf\u5c11\u4e00\u534a\u3002\n\u56e0\u6b64\uff0c\u4e00\u4e9b\u6e38\u620f\u4f7f\u7528\u7eaf\u8272\u548cGouraud\u7740\u8272(\u5982\u8d85\u7ea7\u9a6c\u91cc\u596564)\uff0c\u800c\u53e6\u4e00\u4e9b\u6e38\u620f\u5219\u4f9d\u8d56\u4e8e\u9884\u8ba1\u7b97\u7eb9\u7406(\u4f8b\u5982\uff0c\u5fc5\u987b\u6df7\u5408\u591a\u4e2a\u5c42)\u3002\n\u5728\u6211\u4eec\u8fdb\u5165\u7ec6\u8282\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u5b9a\u4e49\u97f3\u9891\u5b50\u7cfb\u7edf\u7684\u4e24\u4e2a\u7aef\u70b9\uff1a\n\u6211\u4eec\u7684\u8d77\u70b9\u662f\u76d2\u5f0fROM\uff0c\u5b83\u5305\u542b\u53ea\u6709CPU\u624d\u80fd\u89e3\u91ca\u7684\u6570\u636e\u3002\n\u7ec8\u70b9\u662f\u6570\u6a21\u8f6c\u6362\u5668\u6216\u201cDAC\u201d\uff0c\u5b83\u53ea\u7406\u89e3\u6ce2\u5f62\u6570\u636e\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u4e24\u7aef\u8fde\u63a5\u8d77\u6765\u5462\uff1f\u6e38\u620f\u673a\u901a\u5e38\u5305\u62ec\u4e00\u4e2a\u4e13\u95e8\u7684\u97f3\u9891\u82af\u7247\uff0c\u4e3a\u6211\u4eec\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4efb\u5929\u580264\u6ca1\u6709\u8fd9\u6837\u7684\u4e13\u7528\u82af\u7247\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4efb\u52a1\u5206\u5e03\u5728\u8fd9\u4e9b\u7ec4\u4ef6\u4e0a\uff1a\n\u4e3bCPU\uff1a\u5c06\u97f3\u9891\u6570\u636e\u4ece\u6e38\u620f\u7684ROM\u4f20\u8f93\u5230RAM\uff0c\u7136\u540e\u521d\u59cb\u5316\u97f3\u9891\u5217\u8868\u4ee5\u4f9bRSP\u4f7f\u7528\u3002\nRSP\uff1a\u901a\u8fc7\u4f7f\u7528\u66f4\u591a\u7684\u5fae\u7801\uff0c\u5b83\u89e3\u91ca\u5148\u524d\u5b58\u50a8\u5728RAM\u4e2d\u7684\u97f3\u9891\u5217\u8868\uff0c\u5e76\u5bf9\u97f3\u9891\u6570\u636e\u6267\u884c\u6240\u9700\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u5305\u62ec\uff1a\n\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u7ed3\u679c\u6570\u636e\u662f\u6ce2\u5f62\u6570\u636e\u3002\u7136\u540e\u5c06\u5176\u53d1\u9001\u5230\u97f3\u9891\u63a5\u53e3\u6216\u201cAI\u201d\u6a21\u5757\uff0c\u7136\u540e\u518d\u5c06\u5176\u4f20\u8f93\u5230\u6570\u6a21\u8f6c\u6362\u5668\u3002\u5f97\u5230\u7684\u6ce2\u5f62\u5305\u542b\u4e24\u4e2a\u901a\u9053(\u56e0\u4e3a\u6211\u4eec\u7684\u7cfb\u7edf\u662f\u7acb\u4f53\u58f0\u7684)\uff0c\u6bcf\u4e2a\u901a\u9053\u90fd\u670916\u4f4d\u5206\u8fa8\u7387\u3002\n\u662f\u65f6\u5019\u68c0\u67e5\u4e3aN64\u5236\u4f5c\u7684\u914d\u4e50\u4e86\u3002\u6709\u592a\u591a(\u597d\u7684)\u8981\u5728\u672c\u6587\u4e2d\u63d0\u53ca\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u5438\u5f15\u4e86\u6211\u7684\u6ce8\u610f\uff1a\n\u91c7\u6837\u7387\u6700\u9ad8\u53ef\u8fbe44.1 Hz\uff0c\u4f46\u4f7f\u7528\u6700\u9ad8\u91c7\u6837\u7387\u4f1a\u5360\u7528\u5927\u91cfCPU\u5468\u671f\u3002\n\u901a\u9053\u7684\u6570\u91cf\u6ca1\u6709\u4e25\u683c\u7684\u9650\u5236\uff0c\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8eRSP\u80fd\u591f\u6df7\u5408\u591a\u5c11(\u5982\u679c\u5904\u7406ADPCM\uff0c\u901a\u5e38\u5927\u7ea616-24\u4e2a\u901a\u9053\uff1b\u5982\u679c\u5904\u7406PCM\uff0c\u901a\u5e38\u5927\u7ea6100\u4e2a\u901a\u9053)\u3002\n\u5185\u5b58\u662f\u53e6\u4e00\u4e2a\u4ee4\u4eba\u62c5\u5fe7\u7684\u95ee\u9898\uff0c\u800c\u7ade\u4e89\u5bf9\u624b\u4f9d\u8d56\u66f4\u5927\u7684\u4ecb\u8d28(\u5373CD-ROM)\u548c\u4e13\u7528\u97f3\u9891\u5185\u5b58\uff0c\u800c\u4efb\u5929\u580264\u58a8\u76d2\u5b58\u50a8\u7684\u6570\u636e(\u66f4\u4e0d\u7528\u8bf4\u97f3\u4e50\u6570\u636e)\u8981\u5c11\u5f97\u591a\uff0c\u800c\u4e14\u5fc5\u987b\u4e0e\u5176\u4ed6\u7ec4\u4ef6\u5171\u4eab\u5176\u4e3b\u5185\u5b58\u3002\u51fa\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u73a9\u5bb6\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230N64\u7aef\u53e3\u5305\u542b\u7684\u97f3\u4e50\u8d28\u91cf\u8f83\u5dee\u6216\u4e50\u8c31\u91cd\u590d\u3002\u514b\u670d\u8fd9\u4e00\u9650\u5236\u7684\u4e00\u79cd\u65b9\u6cd5\u5305\u62ec\u5b9e\u73b0\u4e00\u4e2a\u8f6f\u4ef6\u5b9a\u5e8f\u5668\uff0c\u8be5\u8f6f\u4ef6\u5b9a\u5e8f\u5668\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u4f7f\u7528\u9884\u5148\u586b\u5145\u7684\u4e00\u7ec4\u58f0\u97f3(\u7c7b\u4f3c\u4e8eMIDI\u97f3\u4e50)\u6765\u201c\u6784\u9020\u201d\u6837\u672c\u3002\n\u4e0ePS1\u548c\u571f\u661f\u7c7b\u4f3c\uff0cN64\u6e38\u620f\u662f\u4e3a\u88f8\u673a\u7f16\u5199\u7684\u3002\u4f46\u662f\uff0c\u6ca1\u6709\u53ef\u7528\u7684BIOS\u4f8b\u7a0b\u6765\u7b80\u5316\u67d0\u4e9b\u64cd\u4f5c\u3002\u4f5c\u4e3a\u66ff\u4ee3\uff0c\u6e38\u620f\u5d4c\u5165\u4e86\u5c0f\u578b\u64cd\u4f5c\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e86\u76f8\u5f53\u5927\u7684\u62bd\u8c61\u91cf\u6765\u6709\u6548\u5730\u5904\u7406CPU\u3001GPU\u548cI/O\u3002\n\u8fd9\u4e0d\u662f\u6211\u4eec\u6700\u521d\u53ef\u80fd\u60f3\u8c61\u7684\u4f20\u7edf\u684c\u9762\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u5360\u7528\u7a7a\u95f4\u6700\u5c0f\u7684\u5fae\u5185\u6838\uff0c\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a\n\u5185\u6838\u662f\u901a\u8fc7\u4f7f\u7528\u4efb\u5929\u5802\u7684\u5e93\u81ea\u52a8\u5d4c\u5165\u7684\uff0c\u6b64\u5916\uff0c\u5982\u679c\u7a0b\u5e8f\u5458\u51b3\u5b9a\u4e0d\u5305\u62ec\u5176\u4e2d\u4e00\u4e2a\u5e93\uff0c\u5185\u6838\u7684\u76f8\u5e94\u90e8\u5206\u5c06\u88ab\u8df3\u8fc7\uff0c\u4ee5\u907f\u514d\u6d6a\u8d39\u76d2\u5f0f\u78c1\u5e26\u7a7a\u95f4\u3002\n\u6b63\u5982\u60a8\u73b0\u5728\u6240\u77e5\u9053\u7684\uff0cI/O\u6ca1\u6709\u76f4\u63a5\u8fde\u63a5\u5230CPU\uff0c\u6240\u4ee5RCP\u7684\u7b2c\u4e09\u4e2a\u6a21\u5757(\u6211\u5230\u73b0\u5728\u8fd8\u6ca1\u6709\u63d0\u5230\u8fc7)\u7528\u4f5cI/O\u63a5\u53e3\uff0c\u5b83\u4e3b\u8981\u4e0eCPU\u3001\u63a7\u5236\u5668\u3001\u6e38\u620f\u76d2\u548c\u97f3\u9891/\u89c6\u9891DAC\u901a\u4fe1\u3002\n\u4efb\u5929\u5802\u4fdd\u7559\u4e86\u76d2\u5f0f\u4ecb\u8d28\u8fdb\u884c\u5b58\u50a8\uff0c\u56e0\u6b64\uff0c\u6e38\u620f\u4eab\u6709\u66f4\u9ad8\u7684\u5e26\u5bbd(\u6839\u636eROM\u7684\u901f\u5ea6\uff0c\u57285-50MB/s\u4e4b\u95f4)\uff0c\u540c\u65f6\u5236\u4f5c\u6210\u672c\u4e5f\u66f4\u9ad8\u3002\u5e02\u573a\u4e0a\u53d1\u73b0\u7684\u6700\u5927\u7684\u58a8\u76d2\u670964MB\u3002\n\u5728\u76d2\u5f0f\u78c1\u5e26\u5185\u90e8\uff0c\u5236\u9020\u5546\u53ef\u80fd\u5305\u62ec\u989d\u5916\u7684\u5b58\u50a8\u5668(\u4ee5EEPROM\u3001\u95ea\u5b58\u6216\u5e26\u7535\u6c60\u7684SRAM\u7684\u5f62\u5f0f)\u6765\u4fdd\u5b58\u4fdd\u5b58\uff0c\u4f46\u662f\u8fd9\u4e0d\u518d\u662f\u4e00\u4e2a\u5f3a\u70c8\u7684\u8981\u6c42\uff0c\u56e0\u4e3a\u67d0\u4e9b\u9644\u4ef6\u4e5f\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u4fdd\u5b58\u3002\n\u4efb\u5929\u580264\u63a7\u5236\u5668\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u63d2\u5165\u9644\u4ef6\u7684\u63a5\u53e3\uff0c\u5176\u4e2d\u4e00\u4e9b\u662f\uff1a\n\u63a7\u5236\u5668\u5305\uff1a\u7528\u4e8e\u5b58\u50a8\u3001\u4fdd\u5b58\u6570\u636e\u5e76\u5728\u5176\u4ed6\u63a7\u5236\u53f0\u4e0a\u4f7f\u7528\u7684\u53e6\u4e00\u79cd\u4ecb\u8d28(\u7c7b\u4f3c\u4e8e\u7d22\u5c3c\u7684\u5b58\u50a8\u5361)\u3002\nRumble Pak\uff1a\u5305\u542b\u4e00\u4e2a\u5c0f\u578b\u9a6c\u8fbe\uff0c\u7528\u4e8e\u63d0\u4f9b\u89e6\u89c9\u53cd\u9988\uff0c\u53ef\u8ba9\u73a9\u5bb6\u6c89\u6d78\u5728\u67d0\u4e9b\u6e38\u620f\u4e2d\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u6b3e\u6e38\u620f\u673a\u7684\u4e3b\u677f\u5e95\u90e8\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u63a5\u53e3\uff0c\u539f\u672c\u662f\u4f9b\u5c1a\u672a\u53d1\u5e03\u7684\u78c1\u76d8\u9a71\u52a8\u5668\u4f7f\u7528\u7684\uff0c\u8fd9\u662f\u4e00\u79cd\u5305\u542b\u4e13\u6709\u78c1\u76d8\u8bfb\u53d6\u5668\u7684\u201c\u989d\u5916\u5730\u677f\u201d\uff0c\u5c3d\u7ba1\u5982\u6b64\uff0c\u8be5\u9a71\u52a8\u5668\u53ea\u5728\u65e5\u672c\u53d1\u5e03\uff0c\u5e76\u6700\u7ec8\u53d6\u6d88\u4e86\u5728\u4e16\u754c\u5176\u4ed6\u5730\u533a\u7684\u9500\u552e\u3002\n\u4e00\u822c\u6765\u8bf4\uff0c\u5f00\u53d1\u4e3b\u8981\u662f\u7528C\u8bed\u8a00\u8fdb\u884c\u7684\uff0c\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\uff0c\u4e5f\u4f7f\u7528\u4e86\u6c47\u7f16\u8bed\u8a00\u3002\u867d\u7136\u8be5\u7cfb\u7edf\u5305\u542b64\u4f4d\u6307\u4ee4\u96c6\uff0c\u4f4664\u4f4d\u6307\u4ee4\u5f88\u5c11\u4f7f\u7528\uff0c\u56e0\u4e3a\u5728\u5b9e\u8df5\u4e2d\uff0c32\u4f4d\u6307\u4ee4\u6070\u597d\u6267\u884c\u5f97\u66f4\u5feb\uff0c\u5e76\u4e14\u9700\u8981\u4e00\u534a\u7684\u5b58\u50a8\u7a7a\u95f4\u3002\n\u4e3a\u4e86\u547d\u4ee4RCP\uff0c\u5e93\u5305\u542b\u591a\u4e2a\u62bd\u8c61\u5c42\uff0c\u4f8b\u5982\uff0c\u50cfGraphics Binary Interface\u6216\u2018GBI\u2019\u8fd9\u6837\u7684\u7ed3\u6784\u88ab\u8bbe\u8ba1\u6210\u66f4\u5bb9\u6613\u5730\u7ec4\u5408\u5fc5\u8981\u7684\u663e\u793a\u5217\u8868\uff0c\u540c\u6837\u9002\u7528\u4e8e\u97f3\u9891\u51fd\u6570(\u5176\u7ed3\u6784\u88ab\u79f0\u4e3aAudio Binary Interface\u6216\u2018ABI\u2019)\u3002\n\u5728\u5fae\u7801\u5f00\u53d1\u65b9\u9762\uff0c\u4efb\u5929\u5802\u5df2\u7ecf\u63d0\u4f9b\u4e86\u4e00\u5957\u5fae\u7801\u7a0b\u5e8f\u53ef\u4f9b\u9009\u62e9\uff0c\u7136\u800c\uff0c\u5982\u679c\u5f00\u53d1\u8005\u60f3\u8981\u5b9a\u5236\u5b83\uff0c\u8fd9\u786e\u5b9e\u662f\u4e00\u9879\u5177\u6709\u6311\u6218\u6027\u7684\u4efb\u52a1\uff1aScalar Unit\u6307\u4ee4\u96c6\u6700\u521d\u6ca1\u6709\u6587\u6863(\u5f53\u7136\u662f\u5e94\u4efb\u5929\u5802\u7684\u8981\u6c42)\uff0c\u540e\u6765\u8be5\u516c\u53f8\u6539\u53d8\u4e86\u7acb\u573a\uff0cSGI\u6700\u7ec8\u53d1\u5e03\u4e86\u4e00\u4e9b\u5fae\u7801\u7f16\u7a0b\u6587\u6863\u3002\n\u7528\u4e8e\u5f00\u53d1\u7684\u786c\u4ef6\u5305\u62ecSGI\u63d0\u4f9b\u7684\u5de5\u4f5c\u7ad9\uff0c\u6bd4\u5982Indy\u673a\u5668\uff0c\u5b83\u9644\u5e26\u4e86\u4e00\u4e2a\u540d\u4e3aU64\u7684\u989d\u5916\u5b50\u677f\uff0c\u5176\u4e2d\u5305\u542b\u96f6\u552e\u63a7\u5236\u53f0\u7684\u786c\u4ef6\u548cI/O\u3002\u8fd8\u4e3aWindows\u8ba1\u7b97\u673a\u63d0\u4f9b\u4e86\u5de5\u5177\u3002\n\u5176\u4ed6\u7b2c\u4e09\u65b9\u5de5\u5177\u5305\u542b\u5728\u5e26\u6709\u8fde\u63a5\u5230\u5de5\u4f5c\u7ad9\u7684\u957f\u5e26\u72b6\u7535\u7f06\u7684\u58a8\u76d2\u4e2d\u3002\u8be5\u76d2\u5b89\u88c5\u5728\u96f6\u552e\u4efb\u5929\u580264\u4e2d\uff0c\u4f46\u5305\u62ec\u5c06\u8bfb\u53d6\u8bf7\u6c42\u4ece\u63a7\u5236\u53f0\u91cd\u5b9a\u5411\u5230\u5de5\u4f5c\u7ad9RAM\u7684\u5185\u90e8\u7535\u8def\u3002\u90e8\u7f72/\u8c03\u8bd5\u8fc7\u7a0b\u662f\u901a\u8fc7\u5c06\u6e38\u620f\u7684\u526f\u672c\u4f20\u8f93\u5230RAM\u6765\u6267\u884c\u7684\uff0c\u7136\u540e\uff0c\u5f53\u63a7\u5236\u53f0\u6253\u5f00\u65f6\uff0c\u5b83\u5c06\u4ece\u90a3\u91cc\u5f00\u59cb\u8bfb\u53d6\u3002\n\u53cd\u76d7\u7248\u7cfb\u7edf\u662fSNES CIC\u7684\u5ef6\u7eed\u3002\u6b63\u5982\u4f60\u6240\u77e5\u9053\u7684\uff0c\u76d7\u7248\u68c0\u6d4b\u548c\u533a\u57df\u9501\u5b9a\u90fd\u8981\u5f52\u529f\u4e8eCIC\u82af\u7247(\u5b83\u5fc5\u987b\u51fa\u73b0\u5728\u6bcf\u4e2a\u6388\u6743\u7684\u6e38\u620f\u76d2\u4e2d)\uff0c\u4efb\u5929\u580264\u6539\u8fdb\u4e86\u8fd9\u4e2a\u7cfb\u7edf\uff0c\u8981\u6c42\u4e0d\u540c\u7684\u6e38\u620f\u5177\u6709\u7279\u5b9a\u53d8\u4f53\u7684CIC\u82af\u7247\uff0c\u4ee5\u786e\u4fdd\u76d2\u4e0d\u662f\u5047\u5192\u7684\u6216\u5305\u542bCIC\u514b\u9686\uff0c\u5916\u56f4\u63a5\u53e3\u6216\u201cPIF\u201d\u4f1a\u5728\u6e38\u620f\u5f00\u59cb\u65f6\u548c\u6e38\u620f\u671f\u95f4\u8fdb\u884c\u6821\u9a8c\u548c\u68c0\u67e5\uff0c\u4ee5\u76d1\u7763\u5b89\u88c5\u5728\u76d2\u4e0a\u7684\u5f53\u524dCIC\u3002\n\u5982\u679c\u7531\u4e8e\u4efb\u4f55\u539f\u56e0\uff0cPIF\u8ba4\u4e3a\u5f53\u524d\u7684\u58a8\u76d2\u65e0\u6548\uff0c\u5219\u4f1a\u5bfc\u81f4\u63a7\u5236\u53f0\u6c38\u4e45\u51bb\u7ed3\u3002\n\u533a\u57df\u9501\u5b9a\u662f\u901a\u8fc7\u5728\u4e0d\u540c\u533a\u57df\u4e4b\u95f4\u7a0d\u5fae\u6539\u53d8\u58a8\u76d2\u7684\u5f62\u72b6\u6765\u5b8c\u6210\u7684\uff0c\u8fd9\u6837\u7528\u6237\u5c31\u4e0d\u80fd\u4ece\u4e0d\u540c\u7684\u533a\u57df\u5c06\u6e38\u620f\u7269\u7406\u5730\u63d2\u5165\u5230N64\u4e0a\u3002\n\u603b\u4f53\u800c\u8a00\uff0c\u7531\u4e8e\u76d2\u5f0f\u4ecb\u8d28\u7684\u4f7f\u7528\uff0c\u76d7\u7248\u95ee\u9898\u5e76\u6ca1\u6709\u592a\u5927\u7684\u62c5\u5fe7\uff0c\u5c3d\u7ba1\u6e38\u620f\u4ef7\u683c\u6bd4\u57fa\u4e8eCD\u7684\u6e38\u620f\u4ef7\u683c\u9ad8\u51fa\u4e09\u500d\u3002\n\u5c3d\u7ba1\u770b\u8d77\u6765\u53ef\u80fd\u5f88\u50bb\uff0c\u4f46\u4efb\u5929\u5802\u7559\u4e0b\u4e86\u4e00\u6247\u95e8\u662f\u5f00\u7740\u7684\uff1a\u78c1\u76d8\u9a71\u52a8\u5668\u7aef\u53e3\u3002\n\u4e00\u4e9b\u516c\u53f8\u4e3a\u4e86\u5f00\u53d1\u81ea\u5df1\u7684\u786c\u4ef6\u800c\u9006\u5411\u8bbe\u8ba1\u4e86\u754c\u9762\uff0c\u4e00\u4e9b\u7531\u6b64\u4ea7\u751f\u7684\u4ea7\u54c1\u6210\u4e3a\u4e86\u76d7\u7248\u7684\u95ee\u9898\u3002\n\u6211\u60f3\u503c\u5f97\u4e00\u63d0\u7684\u662fDoctor v64\uff0c\u8fd9\u6b3e\u8bbe\u5907\u4e0e\u78c1\u76d8\u9a71\u52a8\u5668\u7aef\u53e3\u7684\u5f62\u72b6\u76f8\u540c\uff0c\u4f46\u5305\u62ec\u4e00\u4e2aCD-ROM\u9a71\u52a8\u5668\uff0c\u7528\u4e8e\u5c06\u76d2\u5f0f\u78c1\u5e26\u7684\u5185\u5bb9\u514b\u9686\u5230CD\u4e0a\uff0c\u76f8\u53cd\u7684\u60c5\u51b5(\u4eceCD\u8bfb\u53d6ROM)\u4e5f\u662f\u53ef\u80fd\u7684\u3002\n\u5f53\u6211\u8fd8\u662f\u4e2a\u5b69\u5b50\u7684\u65f6\u5019\n..", "note_en": "Nintendo\u2019s goal was to give players the  best graphics possible, for this it will partner with one of the biggest players in computer graphics to produce the  ultimate graphics chip.\n The result was a nice-looking console for the family&amp;mldr and a 500-page manual for the developer.\n Don\u2019t worry, I promise you this article will not be  that long&amp;mldr Enjoy!\n   The main processor is a  NEC VR4300 that runs at 93.75 MHz, it\u2019s a binary-compatible version of Silicon Graphics\u2019  MIPS R4300i that features:\n A  MIPS III ISA: Succeeds the MIPS II featuring new 64-bit instructions. 64-bit words are called  doublewords.\n  5-stage pipeline: Up to five instructions can be executed simultaneously (a detailed explanation can be found in a  previous article).\n 24 KB L1 cache: Divided in 16 KB for instructions and 8 KB for data.\n An internal  64-bit FPU is also included in this package, the CPU identifies it as a co-processor ( COP1) although the unit is fitted next to the ALU and it\u2019s only accessed through the ALU pipeline, meaning there\u2019s no co-processing per se.\n  The way RAM is assembled follows the  unified-memory architecture or \u2018UMA\u2019 where all available RAM is centralised in one place only and any component that requires RAM will access this shared location. The component arbitrating its access is, in this case, the GPU.\n The reason for choosing this design comes to the fact that it saves a considerable amount of production costs while, on the other side, it increments access contention if not managed properly.\n  Due to the unified memory architecture, the CPU no longer has direct access to RAM, so the GPU will be providing DMA functionality as well.\n  Apart from the UMA, the structure of RAM is a little bit complicated, so I\u2019ll try to keep it simple, here it goes&amp;mldr\n The system physically contains  4.5 MB of RAM, however it\u2019s connected using a  9-bit data bus where the 9th bit is reserved for the GPU (more details later). As a consequence, every component except the GPU will only find  up to 4 MB.\n The type of RAM fitted in the board is called  Rambus DRAM or \u2018RDRAM\u2019 for short, this was just another design that competed against SDRAM on becoming the next standard. RDRAM is connected in  serial (where transfers are done one bit at a time) while SDRAM uses a  parallel connection (transfers multiple bits at a time).\n RDRAM\u2019s latency is directly proportional to the number of banks installed so in this case, with the amount of RAM this system has, the resulting latency  is significant.\n By contrast, the amount of available RAM on this console  can be expanded by installing the  Expansion Pak accessory: A fancy-looking small box that includes 4.5 MB. Curiously enough, the RAM bus must be terminated, so the console always shipped with a terminator (called  Jumper Pak) fitted in the place of the Expansion Pak. Now, you may ask, what would happen if you switch on the console without any  Pak installed?  Literally nothing, you get a blank screen!\n   The core of the graphics reside on a huge chip designed by Silicon Graphics called  Reality Co-Processor running at 62.5 MHz. This package contains  a lot of circuitry so don\u2019t worry if you find it difficult to follow, the graphics sub-system has a very complex architecture! The main philosophy of this design is that the GPU is not meant to be a \u2018simple\u2019 rasteriser like the  competitor\u2019s. Instead, it should also be capable of  accelerating geometry calculations (offloading the CPU), and for that, more circuitry will be needed.\n Having said that, this chip is divided into three main modules, two of them are used for graphics processing:\n The  Scalar Unit: A MIPS R400-based CPU which implements a subset of the R400 instruction set.\n The  Vector Unit: A co-processor that performs vector operations with 32 128-bit registers. Each register is  sliced in eight parts to operate eight 16-bit vectors at once (just like SIMD instructions on conventional CPUs).\n The  System Control: Another co-processor that provides DMA functionality and controls its neighbour module, the RDP (more about it later on).\n In order to operate this module, the CPU stores in RAM a series of commands called  Display list along with the data that will be manipulated, then the RSP reads the list and applies the required operations on it. The available features include geometry transformations (such as perspective projection), clipping and lighting.\n This seems straightforward, but how does it perform these operations? Well, here\u2019s the interesting part: Unlike its competitors (PS1 and Saturn),  the geometry engine is not hard-wired. Instead, the RSP contains some memory (4 KB for instructions and 4 KB for data) to store  microcode, a small program, with no more than 1000 instructions, that  implements the graphics pipeline. In other words, it directs the Scalar Unit on how it should operate our graphics data. The microcode is fed by the CPU during runtime.\n Nintendo provided different microcodes to choose from and, similarly to the  SNES\u2019 background modes, each one balances the resources differently.\n After the RSP finished processing our polygon data, it will start sending  rasterisation commands to the next module, the  RDP, to draw the frame. These commands are either sent using a dedicated bus called  XBUS or through main RAM.\n The RDP is another processor (this time with fixed functionality) that includes multiple engines used to map textures onto our polygons, mix colours and build the new frame.\n It can process either  triangles or  rectangles as primitives, the latter is useful for drawing sprites. The RDP\u2019s rasterisation pipeline contains the following blocks:\n A  Texture Unit: Processes textures using 4 KB of dedicated memory (called \u2018TMEM\u2019) allowing up to eight tiles to be used for texturing. It can perform the following operations on them: Bilinear filtering: Maps the selected 2D texture over the 3D shape and smooths it to avoid pixelated areas. A \u2018complete\u2019 filter would require four points to carry out the interpolation, however, this console only uses three ( triangular interpolation) resulting in some anomalies. Thus, certain textures will have to be \u2018adapted\u2019 beforehand.\n Mip-Mapping: Automatically selects a scaled-down version of the texture depending on its  level of detail. This avoids computing large textures that would be seen far away from the camera and prevents aliasing. If enabled, the N64 maps textures using  trilinear filtering instead. This new algorithm will also interpolate between the mipmaps to soften sudden changes in the level of detail.\n Perspective correction: Chosen algorithm for mapping textures onto triangles. Unlike  other algorithms, this one takes into account the depth value of each primitive, achieving better results.\n A  Colour Combiner: Mixes and interpolates multiples layers of colours (for instance, to apply shaders).\n A  Blender: Mixes pixels against the current frame-buffer to apply translucency, anti-aliasing, fog, dithering. It also performs z-buffering (more about it later on).\n A  Memory interface: Used by the previous blocks to read and write the current frame-buffer in RAM and/or fill the TMEM.\n The RDP provides four modes of functioning, each mode combines these blocks differently in order to optimise specific operations.\n Since this module is constantly updating the frame-buffer, it handles RAM very differently: Remember the unusual 9-bit \u2018byte\u2019? The ninth bit is used for frame-buffer-related calculations (like z-buffering and antialiasing) and can only be accessed through the Memory interface.\n  The resulting frame-buffer must be sent to the  Video Encoder in order to display it on screen ( DMA and the  Video Interface component are essential to accomplish this).\n The theoretical maximum capabilities are 24-bit colour depth (16.8 million colours) and 640x480 resolution (or 720x576 in the PAL region). I mention it as \u2018theoretical\u2019 since using the maximum capabilities can be resource-hungry, so programmers will tend to use lower stats to free up enough resources for other services.\n  Let\u2019s put all the previous explanations into perspective, for that I\u2019ll borrow Nintendo\u2019s  Super Mario 64 to show, in a nutshell, how a frame is composed:\n To start with, our 3D models are located in the cartridge ROM, but in order to keep a steady bandwidth, we need to copy them to RAM first.\n Then it\u2019s time to build a scene using our models, the CPU could do it by itself but it may take ages, so the task is delegated to the RCP. The CPU will instead send orders to the RCP, this is done by carrying out these tasks:\n Compose the Display List that contains the operations to be carried out by the RSP and store it in RAM.\n Afterwards, the RSP will start performing the first batch of tasks and the result will be sent to the RDP in the form of rasterisation commands.\n So far we managed to process our data and apply some effects on it, but we still need to:\n  As you may guess, these tasks will be performed by the RDP. The CPU will feed the data (such as textures) by placing it on RAM, this module has a fixed pipeline but we can select the optimal mode of operation based on the current task to improve the frame-rate.\n Once the RDP finishes processing the data, it will write the final bitmap to the frame-buffer area in RAM. Afterwards, the CPU must transfer the new frame to the  Video Interface (preferably using the DMA) which will in turn sent it to the  Video Encoder for display.\n   Here are some examples of previous 2D characters for the  Super Nintendo that have been redesigned for the new 3D era, they are interactive so I encourage you to check them out!\n   If you\u2019ve read about the previous consoles, you came across the never-ending problem regarding  visibility of surfaces and by now may think polygon sorting is the only way out of this. Well, for the first time in this series, the RDP features a hardware-based approach called  Z-buffering. In a nutshell, the RDP allocates an extra buffer called  Z-Buffer in memory. This has the same dimensions of a frame-buffer, but instead of storing RGB values, each entry contains the depth (Z-value) of the nearest pixel with respect to the camera.\n After the RDP rasterises the vectors, the z-value of the new pixel is compared against the respective value in Z-buffer. If the new pixel contains a smaller z-value, it means the new pixel is positioned in front of the previous one, so it\u2019s applied onto the frame-buffer and the z-buffer is also updated. Otherwise, the pixel is discarded.\n Overall, this is a huge welcomed addition: Programmers do not need to worry anymore about implementing  software-based polygon sorting methods which drain a lot of CPU resources. However, Z-buffer does not save you from feeding unnecessary geometry (discarded or overdrawn, both consuming resources). For this, game engines may choose to include an  occlusion culling algorithm to discard unseen geometry as early as possible.\n  SGI clearly invested a lot of technology into this system. Nonetheless, this was a console meant for the household and as such, it had to keep its cost down. Some hard decisions resulted in difficult challenges for programmers:\n Due to the huge number of components and operations in the graphics pipeline, the RCP ended up being very susceptible to  stalls: An undesirable situation where sub-components keep idling for considerable periods because the required data is delayed at the back of the pipeline.\n This will always result in performance degradation and is up to the programmer to avoid them. Although to make things easier, some CPUs such as the Scalar Unit implement a feature called  Bypassing which enables to execute similar instructions at a faster rate by bypassing some execution stages that can be skipped.For example, if we have to compute sequential  ADD instructions there\u2019s no need to write the result back to a register and then read it back every time each  ADD is finished, we can instead keep using the same register for all additions and do the write-back once the last  ADD is completed.\n Inside the RDP there are 4 KB Texture memory available to be used as  Texture Cache, its main goal is to avoid stalling read cycles from RAM. Unfortunately, in practice 4 KB happened to be insufficient for high-resolution textures. Furthermore, if mipmapping is used, the available amount of cache is then reduced to half.\n As a result, some games used solid colours with Gouraud shading (like  Super Mario 64) and others relied on pre-computed textures (for example, where multiple layers had to be mixed).\n   Before we go into the details, let\u2019s define the two endpoints of the audio sub-system:\n Our starting point is the cartridge ROM, it contains data that only the CPU can interpret.\n The ending point is the  Digital-to-Analog converter or \u2018DAC\u2019, which only understands  waveform data.\n Now, how do we connect both ends? Consoles normally include a dedicated audio chip that does the work for us. Unfortunately, the Nintendo 64  doesn\u2019t have such dedicated chip, so this task is distributed across these components:\n The  main CPU: Transfers the audio data from the game\u2019s ROM to RAM, then it initialises  Audio Lists to be used by the RSP.\n The  RSP: With the use of even more microcode, it interprets the audio lists previously stored in RAM and performs the required operations to the audio data which, for example, can include:\n The resulting data is, as expected, waveform data. This is then sent to the  Audio Interface or \u2018AI\u2019 block which will then transfer it to the digital-to-analogue converter. The resulting waveform contains two channels (since our system is stereo) with 16-bit resolution each.\n   Time to checkout the soundtracks made for the N64. There are too many (good ones) to mention in this article, so here are some that caught my attention:\n    Sampling rate can be up to 44.1Hz, but using the top rate will steal lots of CPU cycles.\n There\u2019s no strict limit in the number of channels, it all depends how much the RSP is capable of mixing (often around 16-24 channels if processing ADPCM or ~100 if PCM).\n Memory is another concern, while competitors relied on larger mediums (i.e. CD-ROM) and dedicated audio memory, Nintendo 64 cartridges hold much less data (let alone music data) and have to share its main memory with other components. For those reasons, players may notice that N64 ports contain lesser quality music or repeated scores. A method for overcoming this limitation consisted in implementing a software sequencer that could \u2018construct\u2019 the samples at runtime using a pre-populated set of sounds (similar to MIDI music).\n   Similar to the PS1 and Saturn, N64 games are written for bare-metal. However, there are no BIOS routines available to simplify some operations. As a substitute,  games embed small OS that provides a fair amount of abstraction to efficiently handle the CPU, GPU and I/O.\n This is not the conventional  desktop OS that we may imagine at first, it\u2019s just a micro-kernel with the smallest footprint possible that provides the following functionality:\n  The kernel is automatically embedded by using Nintendo\u2019s libraries, additionally, if programmers decide not to include one of the libraries, the respective portion of the kernel is skipped to avoid cartridge space being wasted.\n  As you know by now, I/O is not directly connected to the CPU, so the RCP\u2019s third module (which I haven\u2019t mentioned until now) serves as an  I/O interface, it basically communicates with the CPU, controllers, game cartridge and Audio/Video DACs.\n   Nintendo held on to the cartridge medium for storage and as a consequence, games enjoyed higher bandwidths (between 5-50 MB/s depending on the ROM\u2019s speed) while being more expensive to produce. The biggest cartridge found in the market has 64 MB.\n Inside cartridges manufacturers may include extra memory (in the form of  EEPROM,  flash or  SRAM with a battery) to hold saves, however this is not a strong requirement any more since certain accessories could be used to store saves as well.\n  The Nintendo 64 controller included a connector used to plug in accessories, some of them are:\n The  Controller Pak: Another medium (similar to Sony\u2019s  Memory Card) used to store save data and use it on other consoles.\n The  Rumble Pak: Contains a small motor in order to provide haptic feedback, useful for immersing the player on certain games.\n  Apart from that, this console included a special connector at the bottom of its motherboard which was meant to be used by the yet-unreleased  Disk drive, some sort of an \u2018extra floor\u2019 that contained a proprietary disk reader, the drive was only released on Japan nonetheless and eventually cancelled for the rest of the world.\n  In general, development was mainly done in C, assembly was also used to achieve better performance. While this system contained a 64-bit instruction set, 64-bit instructions were rarely used since in practice, 32-bit instructions happened to be faster to execute and required half the storage.\n Libraries contained several layers of abstractions in order to command the RCP, for example, structs like the  Graphics Binary Interface or \u2018GBI\u2019 were designed to assemble the necessary Display lists more easily, the same applied for audio functions (its struct was called  Audio Binary Interface or \u2018ABI\u2019).\n In terms of microcode development, Nintendo already provided a set of microcode programs to choose from, however if developers wanted to customise it, that would indeed be a challenging tasks: The Scalar Unit instruction set wasn\u2019t initially documented (at the request of Nintendo, of course), later on the company changed its position and SGI finally released some documentation for microcode programming.\n Hardware used for development included workstations supplied by SGI, like the  Indy machine which came with an extra daughterboard called  U64 that contains the hardware and I/O of the retail console. Tools were supplied for Windows computers as well.\n Other third-party tools consisted in cartridges featuring a long ribbon cable that connected to the workstation. This cartridge fitted in a retail Nintendo 64 but included internal circuitry to redirect the  read requests from the console to the workstation\u2019s RAM. The deployment/debugging process was carried out by transferring a copy of the game to RAM and then, when the console was switched on, it would start reading from there.\n   The anti-piracy system is a continuation of the  SNES\u2019 CIC. As you know, bootleg detection and region locking are possible thanks to the CIC chip (which must be present in every  authorised game cartridge), the Nintendo 64 improved this system by requiring different games to have a specific variant of the CIC chips in order to make sure the cartridge was not a counterfeit or contained a CIC clone, the  Peripheral Interface or \u2018PIF\u2019 would do checksum checks at the start and during gameplay to supervise current CIC installed on the cartridge.\n If by any reason the PIF considers the current cartridge is not valid, it will then induce the console in a permanent freeze.\n Region-locking was done by slightly altering the shape of the cartridge between different regions so the user can\u2019t physically insert the game on an N64 from a different region.\n Overall, there was not too much concern regarding piracy thanks to the use of cartridge medium, although game prices were three times higher than CD-based ones.\n  As silly as it may seem, Nintendo left one door opened: The  Disk Drive port.\n A few companies reversed engineered the interface in order to develop their own hardware, and some of the resulting products became a concern for piracy.\n I guess the one worth mentioning is the  Doctor v64, this device has the same shape as the Disk Drive port but included a CD-ROM drive that\u2019s used to clone the contents of the cartridge to a CD, the opposite (reading Roms from a CD) is also possible.\n  When I was a kid \n......", "posttime": "2020-05-19 00:59:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4efb\u5929\u5802,\u5b9e\u7528,practical,ram", "title": "\u4efb\u5929\u580264\u67b6\u6784--\u5b9e\u7528\u5206\u6790", "title_en": "Nintendo 64 Architecture \u2013 A Practical Analysis", "transed": 1, "url": "https://copetti.org/projects/consoles/nintendo-64/", "via": "", "real_tags": ["\u4efb\u5929\u5802", "\u5b9e\u7528", "practical", "ram"]}, {"category": "", "categoryclass": "", "imagename": "a5ce040108f606b498af773bb48f8c94.jpg", "infoid": 1002658, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u8f6f\u627f\u8ba4\u81ea\u5df1\u5173\u4e8e\u5f00\u6e90\u7684\u770b\u6cd5\u662f\u9519\u8bef\u7684\uff0c\u6b64\u524d\u8be5\u516c\u53f8\u5728\u684c\u9762\u7edf\u6cbb\u5730\u4f4d\u7684\u5dc5\u5cf0\u65f6\u671f\u4e0e\u5b83\u548cLinux\u8fdb\u884c\u4e86\u591a\u5e74\u7684\u6597\u4e89\u3002\u5fae\u8f6f\u524d\u9996\u5e2d\u6267\u884c\u5b98\u53f2\u8482\u592b\u00b7\u9c8d\u5c14\u9ed8(Steve Ballmer)\u57282001\u5e74\u66fe\u5c06Linux\u79f0\u4e3a\u201c\u4e00\u79cd\u5728\u77e5\u8bc6\u4ea7\u6743\u610f\u4e49\u4e0a\u4f9d\u9644\u4e8e\u5b83\u6240\u89e6\u53ca\u7684\u4e00\u5207\u7684\u764c\u75c7\u201d\u3002\n\u5fae\u8f6f\u603b\u88c1\u5e03\u62c9\u5fb7\u00b7\u53f2\u5bc6\u65af(Brad Smith)\u73b0\u5728\u8ba4\u4e3a\uff0c\u8be5\u516c\u53f8\u5bf9\u5f00\u6e90\u7684\u770b\u6cd5\u662f\u9519\u8bef\u7684\u3002\u53f2\u5bc6\u65af\u5728\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6700\u8fd1\u7684\u4e00\u6b21\u6d3b\u52a8\u4e2d\u8bf4\uff1a\u201c\u5f53\u5f00\u6e90\u5728\u672c\u4e16\u7eaa\u521d\u7206\u53d1\u65f6\uff0c\u5fae\u8f6f\u7ad9\u5728\u4e86\u5386\u53f2\u7684\u9519\u8bef\u4e00\u8fb9\uff0c\u6211\u53ef\u4ee5\u8bf4\u6211\u4e2a\u4eba\u4e5f\u662f\u5982\u6b64\u3002\u201d\u53f2\u5bc6\u65af\u5df2\u7ecf\u5728\u5fae\u8f6f\u5de5\u4f5c\u4e86\u8d85\u8fc725\u5e74\uff0c\u5728\u4e0e\u5f00\u6e90\u8f6f\u4ef6\u7684\u6597\u4e89\u4e2d\uff0c\u4ed6\u662f\u8be5\u516c\u53f8\u7684\u8d44\u6df1\u5f8b\u5e08\u4e4b\u4e00\u3002\n\u201c\u597d\u6d88\u606f\u662f\uff0c\u5982\u679c\u751f\u547d\u8db3\u591f\u957f\uff0c\u4f60\u53ef\u4ee5\u5b66\u4e60\u2026\u3002\u4f60\u9700\u8981\u6539\u53d8\uff0c\u201c\u53f2\u5bc6\u65af\u8865\u5145\u8bf4\u3002\u4e0e\u7ed9Linux\u8d34\u4e0a\u764c\u75c7\u6807\u7b7e\u7684\u65e5\u5b50\u76f8\u6bd4\uff0c\u5fae\u8f6f\u80af\u5b9a\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5316\u3002\u8fd9\u5bb6\u8f6f\u4ef6\u5de8\u5934\u73b0\u5728\u662f\u4e16\u754c\u4e0a\u6700\u5927\u7684\u5f00\u6e90\u9879\u76ee\u8d21\u732e\u8005\uff0c\u51fb\u8d25\u4e86Facebook\u3001Docker\u3001Google\u3001Apache\u548c\u8bb8\u591a\u5176\u4ed6\u516c\u53f8\u3002\n\u8fd1\u5e74\u6765\uff0c\u5fae\u8f6f\u9010\u6e10\u91c7\u7528\u5f00\u6e90\uff0c\u5305\u62ec\u5f00\u6e90\u7684PowerShell\u3001Visual Studio Code\uff0c\u751a\u81f3Microsoft Edge\u7684\u539f\u521bJavaScript\u5f15\u64ce\u3002\u5fae\u8f6f\u8fd8\u4e0eCanonical\u5408\u4f5c\uff0c\u5c06Ubuntu\u5f15\u5165Windows10\uff0c\u5e76\u6536\u8d2d\u4e86Xamarin\u6765\u5e2e\u52a9\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\uff0c\u6536\u8d2d\u4e86GitHub\u6765\u7ef4\u62a4\u5f00\u53d1\u4eba\u5458\u6d41\u884c\u7684\u4ee3\u7801\u5e93\u3002\n\u5fae\u8f6f\u751a\u81f3\u5728\u672c\u6708\u665a\u4e9b\u65f6\u5019\u53d1\u5e03\u7684Windows10\u66f4\u65b0\u4e2d\u53d1\u5e03\u4e86\u5b8c\u6574\u7684Linux\u5185\u6838\uff0c\u5e76\u4e8e\u53bb\u5e74\u8f6c\u5411Edge\u7684Chromium\u6d4f\u89c8\u5668\u5f15\u64ce\u3002\u5fae\u8f6f\u8fd8\u5728\u4e0e\u5f00\u6e90\u793e\u533a\u5408\u4f5c\uff0c\u4e3aWindows10\u521b\u5efaPowerToys\uff0c\u8be5\u516c\u53f8\u65b0\u7684\u5f00\u653e\u8bbe\u8ba1\u7406\u5ff5\u53ef\u80fd\u610f\u5473\u7740\uff0c\u5728\u672a\u6765\u51e0\u5e74\u91cc\uff0c\u6211\u4eec\u5c06\u5728Windows\u4e2d\u770b\u5230\u66f4\u591a\u7684\u5f00\u6e90\u52aa\u529b\u3002", "note_en": "Microsoft has admitted it was wrong about open source, after the company battled it and Linux for years at the height of its desktop domination. Former Microsoft CEO Steve Ballmer famously branded Linux \u201ca cancer that attaches itself in an intellectual property sense to everything it touches\u201d  back in 2001.\n Microsoft president Brad Smith now believes the company was wrong about open source. \u201cMicrosoft was on the wrong side of history when open source exploded at the beginning of the century, and I can say that about me personally,\u201d said Smith in a  recent MIT event. Smith has been at Microsoft for more than 25 years and was one of the company\u2019s senior lawyers during its battles with open-source software.\n  \u201cThe good news is that, if life is long enough, you can learn \u2026 that you need to change,\u201d  added Smith. Microsoft has certainly changed since the days of branding Linux a cancer. The software giant is now the single largest contributor to open-source projects in the world, beating Facebook, Docker, Google, Apache, and many others.\n Microsoft has gradually been adopting open source in recent years, including open-sourcing  PowerShell,  Visual Studio Code, and even Microsoft Edge\u2019s original  JavaScript engine. Microsoft has also partnered with Canonical to bring  Ubuntu to Windows 10, and it  acquired Xamarin to aid mobile app development and  GitHub to maintain the popular code repository for developers.\n Microsoft is even  shipping a full Linux kernel in a Windows 10 update that will release later this month, and it  moved to the Chromium browser engine for Edge last year. Microsoft is also collaborating with open-source communities to  create PowerToys for Windows 10, and the company\u2019s new  open design philosophy may mean we\u2019ll see a lot more open-source efforts in Windows in the years to come.", "posttime": "2020-05-19 00:58:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,microsoft,\u5fae\u8f6f,\u770b\u6cd5,wrong", "title": "\u5fae\u8f6f\uff1a\u6211\u4eec\u5bf9\u5f00\u6e90\u7684\u770b\u6cd5\u662f\u9519\u8bef\u7684", "title_en": "Microsoft: We were wrong about open source", "transed": 1, "url": "https://www.theverge.com/2020/5/18/21262103/microsoft-open-source-linux-history-wrong-statement", "via": "", "real_tags": ["\u5f00\u6e90", "microsoft", "\u5fae\u8f6f", "\u770b\u6cd5", "wrong"]}, {"category": "", "categoryclass": "", "imagename": "3c20f1cae91d07b40aba3402e70cd285.png", "infoid": 1002657, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u751f\u6d3b\u4e2d\uff0c\u6709\u65f6\u4f60\u4f1a\u6536\u5230\u4e00\u5c01\u975e\u5e38\u611a\u8822\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u4ee5\u81f3\u4e8e\u4f60\u771f\u7684\u4ece\u6905\u5b50\u4e0a\u7ad9\u8d77\u6765\uff0c\u53ea\u662f\u4e3a\u4e86\u4e0d\u6253\u4f60\u7684\u663e\u793a\u5668\u3002\n\u8ba9\u6211\u4eec\u56de\u5230\u5f00\u5934\uff0c2020\u5e744\u67086\u65e5\u3002\u5728\u6ce8\u518c\u4e86Brother Hackathon 2020\u540e\uff0c\u6211\u6536\u5230\u4e86\u4e00\u53f0\u5168\u65b0\u7684Brother QL-820NWB\u6807\u7b7e\u6253\u5370\u673a\uff0c\u5e76\u5f00\u59cb\u5728Android\u4e0a\u505a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u624b\u673a\u5e94\u7528\u3002\u9ed1\u5ba2\u9a6c\u62c9\u677e\u6709\u51e0\u4e2a\u8ff7\u4f60\u9ed1\u5ba2\u9a6c\u62c9\u677e\u6311\u6218\uff0c\u8ba9\u4eba\u4eec\u6709\u673a\u4f1a\u521b\u9020\u4e00\u4e9b\u6709\u8da3\u7684\u66f4\u5c0f\u7684\u60f3\u6cd5\uff0c\u4e3b\u8981\u662f\u56f4\u7ed5\u539f\u578b\u3002\n\u6211\u5df2\u7ecf\u51b3\u5b9a\u5e94\u5bf9\u6311\u62182\u548c\u6311\u62183\u3002\u6311\u62182\u662f\u521b\u5efa\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5141\u8bb8\u4f01\u4e1a\u521b\u5efa\u7b80\u5355\u7684\u6807\u5fd7\uff0c\u7528\u4e8e\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u671f\u95f4\u8fdb\u884c\u4ea4\u6d41\u3002\u6311\u62183\u662f\u521b\u5efa\u4e00\u4e2a\u65e0\u9700\u5927\u91cf\u6570\u636e\u8f93\u5165(\u4f20\u611f\u5668\u3001\u6444\u50cf\u5934\uff0c\u8bf8\u5982\u6b64\u7c7b\u7684\u4e1c\u897f)\u5373\u53ef\u6253\u5370\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u6311\u62182\u6700\u7ec8\u521b\u5efa\u4e86SignPrinterApp\uff0c\u8fd9\u662f\u4e00\u4e2a\u514d\u8d39\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u751f\u6210\u53ef\u6253\u5370\u7684\u6807\u5fd7\uff0c\u53ef\u4ee5\u5728\u4e00\u5957Brother\u6253\u5370\u673a\u4e0a\u6253\u5370\uff0c\u6216\u8005\u4fdd\u5b58\u5230\u56fe\u50cf\u4e2d\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u5728\u4efb\u4f55\u6253\u5370\u673a\u8bbe\u5907\u4e0a\u6253\u5370\u3002\n\u5728\u53d1\u5e03\u4e86\u51e0\u4e2a\u7248\u672c\u540e\uff0c\u6211\u7ec8\u4e8e\u6709\u4e86\u4e00\u4e2a\u8db3\u591f\u597d\u7684\u7248\u672c\uff0c\u4ee3\u53f7\u4e3a\u2018Prod\u2019\u548c\u2018ProD2\u2019\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3aSignPrinterApp\u2026\u53d1\u5e03\u5230Google play\u4e0a\u3002\u5b83\u968f\u540e\u4f5c\u4e3a\u514d\u8d39\u5e94\u7528\u7a0b\u5e8f\u53d1\u5e03\uff0c\u5e76\u5206\u522b\u4e8e4\u670820\u65e5\u548c4\u670823\u65e5\u83b7\u5f97\u6279\u51c6\u3002\n\u56db\u5929\u540e\uff0c\u6211\u6536\u5230\u4e86\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u5e94\u7528\u7a0b\u5e8f\u88ab\u4eceGoogle Play\u4e0b\u67b6\u3002\n\u5bf9\u771f\u5b9e\u7684\u4eba\u6216\u4e00\u7fa4\u4eba\u56e0\u81ea\u6740\u3001\u8fc7\u91cf\u670d\u836f\u3001\u81ea\u7136\u539f\u56e0\u7b49\u6b7b\u4ea1\u7f3a\u4e4f\u654f\u611f\u5ea6\u3002\n\u5f88\u96be\u5426\u8ba4\u51a0\u72b6\u75c5\u6bd2\u7684\u5a01\u80c1\uff0c\u540c\u65f6\u9f13\u52b1\u4eba\u4eec\u6253\u5370\u6807\u5fd7\u8fdb\u884c\u4ea4\u6d41\uff0c\u6216\u8005\u4ece\u5141\u8bb8\u4eba\u4eec\u4ea4\u6d41\u4ed6\u4eec\u7684\u673a\u6784\u662f\u5982\u4f55\u8fd0\u8425\u7684\u514d\u8d39\u5e94\u7528\u7a0b\u5e8f\u4e2d\u83b7\u5229\u3002\n\u770b\u5230\u4e00\u4e2a\u88ab\u6279\u51c6\u5e76\u53d1\u5e03\u4e86\u4e24\u6b21\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5728\u6ca1\u6709\u8b66\u544a\u751a\u81f3\u505c\u7528\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8fdb\u5165\u6682\u505c\u72b6\u6001\uff0c\u8fd9\u771f\u7684\u5f88\u6709\u8da3\u3002\n\u4e0a\u8bc9\u7a0b\u5e8f\u4ee5\u6062\u590d\u2026\u7ed3\u675f\u3002\u4f46\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539\u3002\n\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u521b\u5efa\u4e86\u4e00\u6b3e\u544a\u8bc9\u4eba\u4eec\u6d17\u624b\u3001\u5446\u5728\u5bb6\u91cc\u3001\u793e\u4ea4\u8ddd\u79bb\u6216\u4efb\u4f55\u7c7b\u4f3c\u2026\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8bf7\u786e\u4fdd\u3002\u8c37\u6b4c\u53ea\u662f\u5e0c\u671bAndroid\u7528\u6237\u4e0d\u77e5\u9053\u8fd9\u4e00\u70b9\u3002", "note_en": "Sometimes in life, you get an email that is so dumb, so so so stupid that you literally get up from your chair just to not punch your monitor.\n  Let\u2019s rewind back to the beginning, April 6th, 2020. After signing up for the  Brother Hackathon 2020, I received a brand new Brother QL-820NWB label printer and began doing some work on Android to set up a mobile app. The hackathon had a couple of mini-hackathon challenges to get people a chance to create some interesting smaller ideas, mostly around prototyping.\n I had decided to tackle Challenge 2 and Challenge 3. Challenge 2 is creating an application to allow businesses to create simple signs that could be used to communicate during the COVID-19 pandemic. Challenge 3 is creating an application to print without a lot of data entry (sensors, camera, that kinda thing).\n Challenge 2 ended up with the creation of the SignPrinterApp, a free application to generate printable signs that can be printed on a set of Brother printers or saved to an image and printed basically on any printer device.\n  After a couple of releases, I finally had a good enough version, codenamed  \u2018PROD\u2019 and \u2018PROD2\u2019 and released them to Google Play as the SignPrinterApp\u2026 which was then released as a free app and approved on April 20th and April 23rd respectively\n  Four days later, I received this email and the app was pulled from Google Play\n   Lacking sensitivity regarding the death of a real person or group of people due to suicide, overdose, natural causes, etc.\n It\u2019s kind of hard to deny the COVID-19 threat while encouraging people to print signs to communicate, or profit from a free app that allows people to communicate how their establishment is operating.\n It\u2019s really interesting to see that an app that had been approved and released twice can go directly to suspension without a warning or even deactivation.\n The appeals process ended with reinstatement\u2026 but with the following changes needing to be made.\n  So make sure if you ever create an app that tells people to wash their hands, stay at home, social distance or anything like that\u2026 Google just wants Android users to not know about that.", "posttime": "2020-05-19 00:58:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51a0\u72b6\u75c5\u6bd2,google,\u75c5\u6bd2,\u8c37\u6b4c,\u5e94\u7528\u7a0b\u5e8f", "title": "\u6709\u4e00\u6b21\u8c37\u6b4c\u8ba9\u5173\u4e8e\u51a0\u72b6\u75c5\u6bd2\u7684\u4ea4\u6d41\u53d8\u5f97\u66f4\u52a0\u56f0\u96be", "title_en": "That one time Google made it more difficult to communicate about Covid-19", "transed": 1, "url": "https://medium.com/@lazherrera/that-one-time-google-made-it-more-difficult-to-communicate-about-covid-19-cf29c3751c69", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "google", "\u75c5\u6bd2", "\u8c37\u6b4c", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "3975da58fb653520c4643547d75cbd74.jpg", "infoid": 1002656, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u81ea\u7531\u65b0\u95fb\u62a5\u9053\uff0c\u660e\u5c3c\u82cf\u8fbe\u5dde\u4e00\u540d\u7537\u5b50\u56e0\u51fb\u843d\u65e0\u4eba\u673a\u800c\u9762\u4e34\u4e24\u9879\u91cd\u7f6a\u6307\u63a7\u3002\n\u8fd9\u8d77\u4e8b\u4ef6\u59cb\u4e8e\u4e00\u540d\u672a\u900f\u9732\u59d3\u540d\u7684\u7537\u5b50\u9a7e\u9a76\u65e0\u4eba\u673a\u98de\u8d8a\u5df4\u7279\u83f2\u5c14\u5fb7\u98df\u54c1\u516c\u53f8(Butterfield Foods)\uff0c\u8be5\u516c\u53f8\u662f\u660e\u5c3c\u82cf\u8fbe\u5dde\u5357\u90e8\u5c0f\u9547\u5df4\u7279\u83f2\u5c14\u5fb7(Butterfield)\u7684\u4e00\u5bb6\u8089\u5236\u54c1\u751f\u4ea7\u5546-\u5305\u62ec\u9e21\u8089\u3002\u8fd9\u540d\u7537\u5b50\u540e\u6765\u544a\u8bc9\u4e00\u540d\u8b66\u957f\u526f\u624b\uff0c\u4ed6\u8bd5\u56fe\u8bc1\u660e\u9e21\u662f\u56e0\u4e3a\u5927\u6d41\u884c\u800c\u88ab\u5bb0\u6740\u7684\u3002\n\u4e24\u540d\u5458\u5de5\u8d70\u8fd1\u8fd9\u540d\u7537\u5b50\uff0c\u95ee\u4ed6\u5728\u505a\u4ec0\u4e48\u3002\u4e0d\u4e45\u4e4b\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u5c06\u65e0\u4eba\u673a\u4ece\u7a7a\u4e2d\u51fb\u843d\u3002\u8fd9\u540d\u7537\u5b50\u8bf4\uff0c\u4ed6\u7684\u65e0\u4eba\u673a\u4ef7\u503c1900\u7f8e\u5143\u3002\n\u81ea\u7531\u65b0\u95fb\u62a5\u79f0\uff0c\u5f53\u5c40\u902e\u6355\u4e8634\u5c81\u7684\u7537\u5b50\u7279\u62c9\u7ef4\u65af\u00b7\u675c\u5b89\u00b7\u6e29\u7279\u65af(Travis Duane Winters)\uff0c\u5e76\u5728\u6c83\u901a\u4e07\u53bf\u5730\u533a\u6cd5\u9662\u5bf9\u4ed6\u63d0\u51fa\u6307\u63a7\u3002\u5b98\u5458\u4eec\u8868\u793a\uff0c\u6e29\u7279\u65af\u627f\u8ba4\u5f00\u67aa\u6253\u6b7b\u4e86\u8fd9\u67b6\u65e0\u4eba\u673a\u3002\u4ed6\u9762\u4e34\u5211\u4e8b\u6bc1\u574f\u8d22\u4ea7\u548c\u5728\u57ce\u5e02\u8303\u56f4\u5185\u9c81\u83bd\u5f00\u67aa\u7684\u6307\u63a7\u3002\n\u8fd9\u5df2\u7ecf\u4e0d\u662f\u7b2c\u4e00\u6b21\u6709\u4eba\u51fb\u843d\u65e0\u4eba\u673a\u4e86\u3002\u6211\u4eec\u62a5\u9053\u4e862016\u5e74\u548c2017\u5e74\u53d1\u751f\u7684\u51e0\u8d77\u6b64\u7c7b\u67aa\u51fb\u4e8b\u4ef6\u3002\u5728\u4e00\u4e2a\u6848\u4f8b\u4e2d\uff0c\u4e00\u540d\u7537\u5b50\u8d77\u8bc9\u4e00\u540d\u90bb\u5c45\uff0c\u5f53\u4ed6\u7684\u65e0\u4eba\u673a\u98de\u8d8a\u90bb\u5c45\u7684\u571f\u5730\u65f6\uff0c\u8fd9\u540d\u90bb\u5c45\u5f00\u67aa\u6253\u6b7b\u4e86\u4ed6\u3002\u4e00\u540d\u8054\u90a6\u6cd5\u5b98\u4ee5\u7a0b\u5e8f\u4e3a\u7531\u9a73\u56de\u4e86\u8fd9\u8d77\u8bc9\u8bbc\uff0c\u53d1\u73b0\u5b83\u5e94\u8be5\u63d0\u4ea4\u7ed9\u5dde\u6cd5\u9662\uff0c\u800c\u4e0d\u662f\u8054\u90a6\u6cd5\u9662\u3002\n\u7f8e\u56fd\u8054\u90a6\u822a\u7a7a\u7ba1\u7406\u5c40(Federal Aviation Administration)\u8868\u793a\uff0c\u6839\u636e\u540c\u6837\u7684\u8054\u90a6\u822a\u7a7a\u6cd5\uff0c\u51fb\u843d\u65e0\u4eba\u673a\u662f\u975e\u6cd5\u7684\uff0c\u540c\u6837\u7684\u8054\u90a6\u822a\u7a7a\u6cd5\u89c4\u5b9a\u51fb\u843d\u673a\u7ec4\u4eba\u5458\u98de\u673a\u662f\u975e\u6cd5\u7684\u3002\u4f46\u6211\u4eec\u4e0d\u77e5\u9053\u6709\u4efb\u4f55\u4eba\u6839\u636e\u8fd9\u4e9b\u6cd5\u5f8b\u88ab\u8d77\u8bc9\u7684\u6848\u4f8b\u3002\n\u51fb\u843d\u4e00\u67b6\u5c0f\u578b\u6444\u5f71\u65e0\u4eba\u673a\u7684\u6cd5\u5f8b\u5c31\u50cf\u51fb\u843d\u4e00\u67b6\u6709\u4eba\u9a7e\u9a76\u7684\u98de\u673a\u4e00\u6837\u9002\u7528\u5417\uff1f\u6211\u6ca1\u770b\u9519\u5427\uff1f\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\u90a3\u5c31\u662f..\u3002\u75af\u4e86\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u8fd9\u540d\u7537\u5b50\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5728\u57ce\u5e02\u91cc\u5f00\u67aa(\u53d6\u51b3\u4e8e\u5177\u4f53\u60c5\u51b5)\u800c\u53d7\u5230\u8c34\u8d23\u6216\u5165\u72f1\u51e0\u4e2a\u6708\uff0c\u4f46\u6211\u4e0d\u6562\u76f8\u4fe1\u4ed6\u771f\u7684\u9762\u4e34\u7740\u4e00\u4e9b\u7c7b\u4f3c\u7684\u6307\u63a7\uff0c\u5c31\u50cf\u4ed6\u5728\u4e4c\u514b\u5170\u4e0a\u7a7a\u51fb\u843d\u4e86\u9a6c\u6765\u897f\u4e9a\u822a\u7a7a\u516c\u53f8\u7684\u98de\u673a\u4e00\u6837\uff1f\n\u8fd9\u662f\u540c\u4e00\u6761\u6cd5\u5f8b\u3002\u7f8e\u56fd\u8054\u90a6\u6cd5\u5f8b\u89c4\u5b9a\uff0c\u5411\u98de\u673a\u5c04\u51fb\u662f\u975e\u6cd5\u7684\uff0c\u65e0\u8bba\u98de\u673a\u662f\u6709\u4eba\u9a7e\u9a76\u8fd8\u662f\u65e0\u4eba\u9a7e\u9a76\u3002\u5982\u679c\u4f60\u77e5\u9053\u98de\u673a\u662f\u65e0\u4eba\u9a7e\u9a76\u7684\uff0c\u8fd9\u5c06\u662f\u91cf\u5211\u7684\u4e00\u4e2a\u56e0\u7d20\uff0c\u4e3b\u5f20\u6bd4\u5411\u6709\u4eba\u9a7e\u9a76\u98de\u673a\u5c04\u51fb\u7684\u4eba\u8f7b\u5224\u3002\u4f46\u662f\uff0c\u65e2\u7136\u4e00\u6761\u6cd5\u5f8b\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f60\u4e3a\u4ec0\u4e48\u9700\u8981\u4e24\u6761\u4e0d\u540c\u7684\u6cd5\u5f8b\u5462\uff1f\n\u5df4\u7279\u83f2\u5c14\u5fb7\u98df\u54c1\u516c\u53f8(Butterfield Foods)\u662f\u660e\u5c3c\u82cf\u8fbe\u5dde\u5357\u90e8\u5df4\u7279\u83f2\u5c14\u5fb7\u5c0f\u9547\u7684\u4e00\u5bb6\u8089\u5236\u54c1\u751f\u4ea7\u5546\uff0c\u5176\u4e2d\u5305\u62ec\u9e21\u8089\u3002\u8fd9\u540d\u7537\u5b50\u540e\u6765\u544a\u8bc9\u4e00\u540d\u8b66\u957f\u526f\u624b\uff0c\u4ed6\u8bd5\u56fe\u8bc1\u660e\u9e21\u662f\u56e0\u4e3a\u5927\u6d41\u884c\u800c\u88ab\u5bb0\u6740\u7684\u3002\u6211\u60f3\u4ed6\u4eec\u6bcf\u5929\u90fd\u5728\u90a3\u91cc\u5bb0\u6740\u9e21\uff0c\u4e0d\u7ba1\u6709\u6ca1\u6709\u5927\u6d41\u884c\u3002\u8fd9\u4f4d\u65e0\u4eba\u673a\u64cd\u4f5c\u5458\u5230\u5e95\u60f3\u8bc1\u660e\u4ec0\u4e48\uff1f\n\u6211\u6000\u7591\u8fd9\u5b9e\u9645\u4e0a\u4e0e\u51a0\u72b6\u75c5\u6bd2\u5bfc\u81f4\u5927\u91cf\u5bb6\u755c\u88ab\u6251\u6740\u7684\u62a5\u9053\u6709\u5173\u3002\u5f53\u8089\u7c7b\u52a0\u5de5\u5382\u4e25\u91cd\u7f3a\u4e4f\u5de5\u4eba\u65f6\uff0c\u4ed6\u4eec\u65e0\u6cd5\u7ba1\u7406\u4ed6\u4eec\u62e5\u6709\u7684\u7272\u755c\u6570\u91cf\uff0c\u6709\u51e0\u5bb6\u5df2\u7ecf\u5f00\u59cb\u5927\u89c4\u6a21\u5c60\u5bb0\uff0c\u5e76\u5c06\u8eab\u4f53\u503e\u5012\u5728\u96c6\u4f53\u7272\u755c\u575f\u5893\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6d6a\u8d39\uff0c\u56e0\u4e3a\u4e25\u9177\u7684\u8003\u9a8c\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u98df\u7269\u3002\u9e21\u901a\u5e38\u5728\u5ba4\u5185\u5c60\u5bb0\u548c\u52a0\u5de5\u3002\u4ed6\u53ef\u80fd\u662f\u60f3\u62cd\u4e0b\u4e00\u5806\u5806\u88ab\u503e\u5012\u7684\u9e21\u5c38\u7684\u7167\u7247\uff0c\u4ee5\u5c55\u793a\u8fd9\u4e9b\u5927\u89c4\u6a21\u6251\u6740\u4ea7\u751f\u7684\u5e9f\u7269\u3002", "note_en": "A Minnesota man is facing two felony charges for shooting down a drone,  The Free Press reports.\n The incident began when an unnamed man flew a drone over Butterfield Foods, a producer of meat products\u2014including chicken\u2014in the Southern Minnesota town of Butterfield. The man later told a sheriff&#39;s deputy he was trying to prove that chickens were being slaughtered because of the pandemic.\n Two employees approached the man and asked him what he was doing. Soon afterward, someone else shot the drone out of the sky.\u00a0The man says his drone cost $1,900.\n The authorities arrested 34-year-old\u00a0Travis Duane Winters and charged him in Watonwan County District Court, The Free Press says. Officials say Winters admitted to shooting the drone. He faces charges of\u00a0criminal damage to property and reckless discharge of a weapon within city limits.\n This is not the first time someone has shot down a drone. We  reported on several such shootings in 2016 and 2017. In one case, a man sued a neighbor who shot his drone when it flew over the neighbor&#39;s land. A federal judge  dismissed that lawsuit\u00a0on procedural grounds, finding that it should have been filed in state, not federal, courts.\n The Federal Aviation Administration has said that shooting down a drone is illegal under the same federal aviation laws that make it illegal to shoot down a crewed aircraft. But we don&#39;t know of any cases of people being prosecuted under those laws.\n  The same law for shooting down a small photography drone applies as if you shoot down a manned aircraft? Did I read that right? If so that\u2019s... insane. I mean this guy should probably get a reprimand or do a few months in jail for discharging a firearm in the city (depending on exact circumstances) but I can\u2019t believe he actually faces some similar charges as if he shot down the Malaysian Airlines plane over Ukraine?\n It\u2019s the same law. There\u2019s a US federal law saying that shooting at aircraft is illegal, whether the aircraft is manned or unmanned.   If you knew the aircraft was unmanned, that would be a factor in sentencing, arguing for a lesser sentence than someone who shoots at a manned aircraft. But why would you need two separate laws when one will do?\n  Butterfield Foods, a producer of meat products\u2014including chicken\u2014in the Southern Minnesota town of Butterfield. The man later told a sheriff&#39;s deputy he was trying to prove that chickens were being slaughtered because of the pandemic  I&#39;d imagine they slaughter chicken there everyday, pandemic or no pandemic. What did this drone operator really try to prove?\n I suspect this actually has to do with reports of mass culling of livestock due to COVID-19. When meat processing plants get severely short on workers, they can\u2019t manage the volumes of livestock they have, and several have begun mass slaughtering and dumping bodies into mass livestock graves. It\u2019s an enormous waste, since there\u2019s not any food being produced from the ordeal.   Chickens are normally slaughtered and processed indoors. He was probably trying to get pictures of piles of dumped chicken carcasses, to show the waste from these mass cullings.", "posttime": "2020-05-19 00:43:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51fb\u843d,shoots,\u65e0\u4eba\u673a", "title": "\u660e\u5c3c\u82cf\u8fbe\u5dde\u4e00\u540d\u7537\u5b50\u51fb\u843d\u65e0\u4eba\u673a\uff0c\u88ab\u63a7\u91cd\u7f6a", "title_en": "Man shoots down drone, gets hit with felony charges in Minnesota", "transed": 1, "url": "https://arstechnica.com/tech-policy/2020/05/minnesota-man-faces-felony-charges-for-shooting-down-drone/", "via": "", "real_tags": ["\u51fb\u843d", "shoots", "\u65e0\u4eba\u673a"]}]