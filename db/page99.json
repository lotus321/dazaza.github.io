[{"category": "", "categoryclass": "", "imagename": "2d94d5529d0b7c91cd5b9d44602205b3.jpg", "infoid": 1006282, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SpaceX\u6700\u8fd1\u7ecf\u5386\u4e86\u5f88\u591a\u8d77\u4f0f\u30025\u670830\u65e5\u661f\u671f\u516d\uff0c\u8be5\u516c\u53f8\u521b\u9020\u4e86\u5386\u53f2\uff0c\u4ed6\u4eec\u7684\u673a\u7ec4\u4eba\u5458\u9f99\u98de\u8239\u4ece\u7f8e\u56fd\u5b87\u822a\u5c40\u80af\u5c3c\u8fea\u822a\u5929\u4e2d\u5fc3\u8d77\u98de\uff0c\u8f7d\u7740\u4e24\u540d\u5b87\u822a\u5458\u8fdb\u5165\u592a\u7a7a\u3002\u4f46\u5c31\u5728\u4e00\u5929\u524d\uff0cSpaceX\u5de5\u7a0b\u5e08\u548c\u5730\u52e4\u4eba\u5458\u5728\u9759\u6001\u5c04\u51fb\u6d4b\u8bd5\u4e2d\u76ee\u7779\u4e86\u4ed6\u4eec\u7684\u7b2c\u56db\u8258\u661f\u9645\u98de\u8239\u539f\u578b(SN4)\u5728\u8bd5\u9a8c\u53f0\u4e0a\u7206\u70b8\uff0c\u4f7f\u5176\u6210\u4e3a\u8fde\u7eed\u7b2c\u56db\u4e2a\u4e22\u5931\u7684\u539f\u578b\u3002\n\u4f46\u6839\u636eSpaceX\u4e00\u540d\u5de5\u7a0b\u5e08\u548c\u9ad8\u7ba1\u6700\u8fd1\u7684\u6d88\u606f\uff0c\u4ee5\u53ca\u57c3\u9686\u00b7\u9a6c\u65af\u514b(Elon Musk)\u53d1\u7ed9SpaceX\u5458\u5de5\u7684\u4e00\u5c01\u5185\u90e8\u7535\u5b50\u90ae\u4ef6\uff0c\u5f88\u660e\u663e\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u5168\u529b\u7814\u53d1\u661f\u9645\u98de\u8239\u539f\u578b\uff0c\u5e76\u53ef\u80fd\u5728\u5e74\u5e95\u524d\u8fdb\u884c\u8f68\u9053\u98de\u884c\u3002\u4e00\u4e2a\u96c4\u5fc3\u52c3\u52c3\u7684\u76ee\u6807\uff0c\u4f46\u4f60\u4e0d\u80fd\u6210\u4e3a\u4e00\u5bb6\u516c\u53f8\u7684\u8d1f\u8d23\u4eba\uff0c\u8fd9\u5bb6\u516c\u53f8\u628a\u53ef\u91cd\u7528\u6027\u4f5c\u4e3a\u4e00\u4ef6\u4e8b\uff0c\u5e76\u901a\u8fc7\u60b2\u89c2\u4e3b\u4e49\u8005\u6765\u6062\u590d\u7f8e\u56fd\u672c\u571f\u7684\u53d1\u5c04\u80fd\u529b\uff01\n\u4e0d\u4e45\u524d\uff0cSpaceX\u516c\u53f8\u7684\u5de5\u7a0b\u5e08\u786e\u5b9a\u4e86SN4\u7206\u70b8\u7684\u539f\u56e0\uff0c\u79f0\u8fd9\u662f\u4e00\u6761\u63a8\u8fdb\u5242\u7ba1\u7ebf\u65ad\u5f00\u7684\u7ed3\u679c\u3002\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e2a\u4e3b\u8981\u7684\u6db2\u4f53\u7532\u70f7\u6cc4\u6f0f\uff0c\u7136\u540e\u70b9\u71c3\uff0c\u5bfc\u81f4\u4e86\u58ee\u89c2\u7684\u7206\u70b8\uff0c\u5b8c\u5168\u6467\u6bc1\u4e86SN4\u3002\u8fd9\u4e0e\u4e4b\u524d(5\u670819\u65e5)\u9759\u6001\u7740\u706b\u6d4b\u8bd5\u65f6\u53d1\u751f\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u5f53\u65f6SN4\u5e95\u90e8\u9644\u8fd1\u56e0\u7532\u70f7\u7ba1\u7ebf\u7206\u88c2\u800c\u53d1\u751f\u5c0f\u706b\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u731b\u79bd\u53d1\u52a8\u673a\u5728\u7834\u88c2\u53d1\u751f\u524d\u5df2\u7ecf\u70b9\u706b\u6574\u6574\u4e24\u5206\u949f\uff0c\u6709\u6548\u5730\u5b8c\u6210\u4e86\u53d1\u52a8\u673a\u7684\u7b2c\u4e94\u6b21\u9759\u6001\u70b9\u706b\u8bd5\u9a8c\u3002\u7ed3\u5408\u5176\u4ed6\u6210\u529f\uff0cSpaceX\u7684\u603b\u5de5\u7a0b\u5e08\u6c49\u65af\u00b7\u79d1\u5c3c\u683c\u65af\u66fc(Hans K\u00f6nigsmann)\u6700\u8fd1\u8868\u793a\uff0c\u8df3\u8dc3\u6d4b\u8bd5\u53ef\u80fd\u5f88\u5feb\u5c31\u4f1a\u5f00\u59cb\uff0c\u8fd9\u5bf92020\u5e74\u524d\u7684\u8f68\u9053\u98de\u884c\u6765\u8bf4\u662f\u4e2a\u597d\u5146\u5934\u3002\u6b63\u5982\u4ed6\u5728\u63a5\u53d7\u5fb7\u56fd\u520a\u7269\u201c\u660e\u955c\u201d(Der Speigel)\u91c7\u8bbf\u65f6\u6240\u8bf4\uff1a\n\u201c\u6211\u5e0c\u671b\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5468\u5185\u8fdb\u884c\u9996\u6b21\u8bd5\u98de\uff0c\u6bd4\u5982\u8bf4\uff0c\u5728150\u7c73\u7684\u9ad8\u5ea6\u8fdb\u884c\u8bd5\u98de\u3002\u6211\u4eec\u4f1a\u8fd9\u6837\u505a\u51e0\u6b21\u3002\u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u4eca\u5e74\u5e74\u5e95\u8fdb\u5165\u8f68\u9053\u3002\u6216\u8005\u53ef\u80fd\u9700\u8981\u66f4\u957f\u4e00\u70b9\u7684\u65f6\u95f4\u3002\u201c\u3002\n\u8fd9\u8bdd\u51fa\u81ea\u516c\u53f8\u603b\u5de5\u7a0b\u5e08\u4e4b\u53e3\uff0c\u4e0d\u80fd\u6389\u4ee5\u8f7b\u5fc3\u3002\u4ed6\u7684\u4f30\u8ba1\u662f\u6b63\u786e\u7684\uff0c\u5047\u8bbe\u8df3\u8dc3\u6d4b\u8bd5\u5728\u672a\u6765\u51e0\u5468\u5f00\u59cb\uff0c\u8f68\u9053\u98de\u884c\u53ef\u80fd\u57282020\u5e74\u5e95\u4e4b\u524d\u53d1\u751f\u3002\u7b2c\u4e00\u6b21\u6d4b\u8bd5\u5c06\u6d89\u53ca\u4e00\u4e2a\u5355\u5f15\u64ce\u539f\u578b\uff0c\u98de\u884c\u5230150\u7c73(~500\u82f1\u5c3a)\u7684\u9ad8\u5ea6\uff0c\u7136\u540e\u8fdb\u884c\u63a7\u5236\u7740\u9646\u3002\n\u8fd9\u5c06\u4eceSpaceX\u505c\u6b62\u7684StarHopper\u539f\u578b\u5f00\u59cb\uff0c\u8be5\u539f\u578b\u4e8e2019\u5e748\u670825\u65e5\u5b8c\u6210\u4e86150\u7c73\u7684\u8df3\u8dc3\u6d4b\u8bd5\u3002\u8003\u8651\u5230SpaceX\u5728\u8fc7\u53bb\u4e00\u5e74\u4e2d\u7ecf\u5386\u7684\u6240\u6709\u632b\u6298\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u5047\u8bbe\u8f68\u9053\u98de\u884c\u53ef\u80fd\u5728\u516d\u4e2a\u6708\u540e\u8fdb\u884c\uff0c\u8fd9\u6709\u70b9\u4e50\u89c2\u3002\u4f46\u8fd9\u4e0eSpaceX\u7684\u5feb\u901f\u539f\u578b\u548c\u8fed\u4ee3\u65b9\u6cd5\u662f\u4e00\u81f4\u7684\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u4f7f\u4ed6\u4eec\u80fd\u591f\u5feb\u901f\u5730\u521b\u5efa\u539f\u578b\uff0c\u5728\u8bbe\u8ba1\u4e0a\u6709\u5f88\u5c0f\u7684\u53d8\u5316\uff0c\u5e76\u4ece\u6bcf\u4e00\u4e2a\u9519\u8bef\u4e2d\u5b66\u4e60\u3002\u8fd9\u6b63\u662fSpaceX\u516c\u53f8\u81ea2020\u5e74\u521d\u4ee5\u6765\u4e00\u76f4\u5728\u505a\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u8981\u628a\u5b83\u4eec\u63a8\u5230\u6781\u9650\uff0c\u5feb\u901f\u66f4\u6362\uff0c\u7528\u7ec4\u5408\u540e\u7684\u6570\u636e\u6765\u6539\u5584\u6574\u4f53\u8bbe\u8ba1\u3002\u5728\u8fd9\u65b9\u9762\uff0cSpaceX\u6b63\u5728\u9075\u5faa\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5728\u963f\u6ce2\u7f57\u65f6\u4ee3\u6240\u505a\u7684\u76f8\u540c\u65b9\u6cd5\u3002\n\u6309\u7167\u8fd9\u79cd\u65b9\u6cd5\uff0cSpaceX\u516c\u53f8\u6b63\u5728\u4f7f\u7528\u4ed6\u4eec\u7684SN5\u539f\u578b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5de5\u7a0b\u5e08\u4eec\u5728\u8be5\u516c\u53f8\u4f4d\u4e8e\u535a\u5361\u5947\u5361\u7684\u5357\u5f97\u514b\u8428\u65af\u5dde\u53d1\u5c04\u573a\u5b8c\u6210\u4e86\u8fd9\u4e00\u539f\u578b\u7684\u5efa\u9020\u3002\u6b64\u5916\uff0cCNBC\u6700\u8fd1\u8fd8\u83b7\u5f97\u4e86\u4e00\u5c01\u5168\u516c\u53f8\u8303\u56f4\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u9a6c\u65af\u514b\u5728\u90ae\u4ef6\u4e2d\u6307\u793a\u5458\u5de5\u201c\u620f\u5267\u6027\u5730\u3001\u7acb\u5373\u201d\u52a0\u5feb\u201c\u661f\u9645\u98de\u8239\u201d\u7684\u5f00\u53d1\u3002\n\u9a6c\u65af\u514b\u57286\u67086\u65e5(\u661f\u671f\u516d)\u4f20\u9605\u4e86\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u4ed6\u8868\u793a\uff0c\u6240\u6709SpaceX\u4eba\u5458\u90fd\u88ab\u544a\u77e5\u201c\u8bf7\u8003\u8651SpaceX\u7684\u9996\u8981\u4efb\u52a1(\u9664\u4e86\u4efb\u4f55\u53ef\u4ee5\u964d\u4f4e\u201d\u9f99\u201c\u8fd4\u56de\u98ce\u9669\u7684\u4e8b\u60c5)--\u201d\u661f\u9645\u98de\u8239\u201c\u3002\u201d\u8003\u8651\u5230\u4e58\u5458\u9f99\u7684\u6210\u529f\u53d1\u5c04\uff0cSpaceX\u5df2\u7ecf\u5c65\u884c\u4e86\u4f5c\u4e3aNASA\u5546\u4e1a\u4e58\u5458\u8ba1\u5212\u4e00\u90e8\u5206\u7684\u8d23\u4efb\uff0c\u8fd9\u662f\u9002\u5f53\u7684\u3002\n\u8be5\u8ba1\u5212\u7684\u76ee\u7684\u662f\u901a\u8fc7\u5236\u9020\u80fd\u591f\u8f7d\u7740\u5b87\u822a\u5458\u5f80\u8fd4\u56fd\u9645\u7a7a\u95f4\u7ad9(ISS)\u7684\u4e58\u5458\u7ea7\u822a\u5929\u5668\uff0c\u6062\u590d\u7f8e\u56fd\u56fd\u5185\u7684\u53d1\u5c04\u80fd\u529b\u3002\u673a\u7ec4\u4eba\u5458\u9f99\u662fSpaceX\u5bf9\u8be5\u9879\u76ee\u7684\u8d21\u732e\uff0c\u800c\u6ce2\u97f3\u516c\u53f8\u91c7\u53d6\u7684\u662fCST-100\u661f\u7a7a\u5ba2\u673a\u7684\u5f62\u5f0f-\u5728\u83b7\u5f97\u8ba4\u8bc1\u4e4b\u524d\uff0c\u8be5\u516c\u53f8\u4ecd\u7136\u9700\u8981\u6210\u529f\u5730\u5b8c\u6210\u56fd\u9645\u7a7a\u95f4\u7ad9\u7684\u65e0\u4eba\u548c\u6709\u4eba\u4efb\u52a1\u3002\n\u968f\u7740\u201c\u4e58\u5458\u9f99\u201d\u7684\u8ba4\u8bc1\uff0cSpaceX\u516c\u53f8\u7684\u5168\u90e8\u6ce8\u610f\u529b\u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u6295\u5411\u4ed6\u4eec\u7684\u4e0b\u4e00\u4ee3\u8d85\u91cd\u578b\u53d1\u5c04\u7cfb\u7edf\u3002\u4e0e\u5176\u524d\u8eab\u4e00\u6837\uff0c\u4e0b\u4e00\u6b65\u5c06\u8fdb\u884c\u4f4e\u6e29\u8d1f\u8f7d\u6d4b\u8bd5\uff0c\u7136\u540e\u5bf9\u5176\u552f\u4e00\u7684\u731b\u79bd\u53d1\u52a8\u673a\u8fdb\u884c\u9759\u6001\u70b9\u706b\u6d4b\u8bd5\u3002\u4e00\u65e6\u5b8c\u6210\uff0c\u5c31\u6709\u7406\u7531\u8ba4\u4e3aSpaceX\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5468\u5185\u4f7f\u7528SN5\u8fdb\u884c150\u7c73\u8df3\u8dc3\u6d4b\u8bd5\u3002\n\u9664\u975e\u6709\u4efb\u4f55\u989d\u5916\u7684\u632b\u6298\uff0cSN5\u53ef\u4ee5\u5b89\u88c5\u4e00\u4e2a\u9f3b\u9525\uff0c\u895f\u7ffc\uff0c\u5e76\u5b89\u88c5\u4e09\u4e2a\u731b\u79bd\u53d1\u52a8\u673a\u6765\u6267\u884c20\u516c\u91cc(\u7ea665,600\u82f1\u5c3a\u621612\u82f1\u91cc)\u7684\u98de\u884c\uff0c\u8fd9\u5c06\u4ee5\u8d85\u97f3\u901f\u518d\u5165\u548c\u63a7\u5236\u7740\u9646\u7ed3\u675f\u3002\u8fd9\u5c06\u662f\u4f7f\u7528\u516d\u4e2a\u731b\u79bd\u53d1\u52a8\u673a\u8fdb\u884c\u5168\u9762\u8f68\u9053\u98de\u884c\u4e4b\u524d\u7684\u6700\u540e\u4e00\u6b65\uff0c\u968f\u540e\u662f\u5b8c\u6210\u661f\u9645\u98de\u8239\u7684\u8bbe\u8ba1\u5e76\u5f00\u59cb\u5546\u4e1a\u751f\u4ea7\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u516c\u53f8\u8fd8\u5c06\u81f4\u529b\u4e8e\u53d1\u5c04\u7cfb\u7edf\u7684\u8d85\u91cd\u578b\u90e8\u4ef6\u3002\u5c31\u50cf\u661f\u9645\u98de\u8239\u4e00\u6837\uff0c\u8fd9\u5c06\u5305\u62ec\u5bf9\u539f\u578b\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3001\u53d1\u52a8\u673a\u6d4b\u8bd5\u548c\u9010\u6b65\u63d0\u9ad8\u8df3\u8dc3\u6d4b\u8bd5\u3002\u4e00\u65e6\u96c6\u6210\uff0c\u53d1\u5c04\u7cfb\u7edf\u5c06\u80fd\u591f\u5c65\u884cSpaceX\u7684\u627f\u8bfa\uff0c\u5373\u63d0\u4f9b\u6709\u6548\u8f7d\u8377\u548c\u673a\u7ec4\u4eba\u5458\u670d\u52a1\uff0c\u4ee5\u652f\u6301Artemis\u9879\u76ee\uff0c\u5f00\u5c55\u6708\u7403\u65c5\u6e38\uff0c\u5e76\u5c06\u4eba\u9001\u4e0a\u706b\u661f\u3002\nNASA\u548cSpaceX\u90fd\u5e0c\u671b\u5728\u672a\u6765\u51e0\u5e74\u5185\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002\u5373\u4f7f\u65f6\u95f4\u8868\u8bc1\u660e\u662f\u7075\u6d3b\u7684\uff0c\u90a3\u4e5f\u80af\u5b9a\u662f\u4ee4\u4eba\u5174\u594b\u7684\u65f6\u523b\uff01", "note_en": "SpaceX has had a lot of ups and downs lately. On  Saturday, May 30th, the company made history when their  Crew Dragon spacecraft took off from the NASA Kennedy Space Center, carrying two astronauts to space. But just a day before, SpaceX engineers and ground crews watched their fourth  Starship prototype (SN4)  explode on its testbed during a static fire test, making it the fourth prototype in a row to be lost.\n But according to  recent news from a SpaceX engineer and executive, as well as an  internal email from Elon Musk to SpaceX employees, it is clear that the company is all-in with the  Starship prototype and could conduct an orbital flight before the end of the year. An ambitious goal, but you don\u2019t get to be the head of a company that makes reusability a thing and restores domestic launch capability to US soil by being a pessimist!\n  Not long ago, SpaceX engineers determined the cause of the SN4 explosion, saying that it was the result of a propellant line disconnecting. This led to a major liquid methane leak that then ignited, leading to the spectacular explosion that completely destroyed the SN4. This is similar to what happened during the previous static fire test (on May 19th) where a small fire broke out near the base of SN4 due to a burst methane line.\n   Nevertheless, the Raptor engine had fired for a full two-minutes before the rupture took place, which effectively completed the fifth static fire test of the engine. Combined with other successes, SpaceX\u2019s chief engineer Hans K\u00f6nigsmann recently indicated that hop tests could begin shortly, which bodes well for an orbital flight before 2020 is over. As he said during an interview with the German publication   Der Speigel:\n \u201c I expect first test flights in, say, 150 meters altitude in the coming weeks. We\u2019ll do that a couple of times. If everything works out, we want to go into orbit at the end of the year. Or maybe it will take a little longer.\u201c\n Coming from the company\u2019s chief engineer, this should not be taken idly. And he is correct in his estimation that an orbital flight could happen before the end of 2020, assuming that hop tests begin in the coming weeks. The first test would involve a single-engine prototype flying to an altitude of 150 m (~500 ft) and then making a controlled landing.\n This would pick up where SpaceX left off with the  Starhopper prototype, which completed a 150-m hop test on  August 25th, 2019. Given all of the setbacks SpaceX has experienced this past year, one would think that it\u2019s a bit optimistic to assume that an orbital flight could take place just six months from now. But this is in keeping with SpaceX\u2019s rapid prototyping and iterative approach.\n   This method allows them to create prototypes rapidly, with small variations in design, and learn from every mistake. This is precisely what SpaceX has been doing since early 2020, which is to push them to their limits, replace them quickly, and use the combined data to improve the overall design. In this respect, SpaceX is following the same approach that NASA did back in the Apollo Era.\n True to this approach, SpaceX is moving ahead with tests using their SN5 prototype, which engineers finished constructing at the company\u2019s South Texas Launch Sight at Boca Chica. In addition, a company-wide email was recently obtained by CNBC, in which Musk instructed employees to accelerate the development of the  Starship \u201cdramatically and immediately.\u201d\n According to Musk, who circulated the email on Saturday, June 6th, all SpaceX personnel were told to \u201cPlease consider the top SpaceX priority (apart from anything that could reduce Dragon return risk) to be Starship.\u201d This is appropriate considering that with the successful launch of the Crew Dragon, SpaceX has fulfilled its responsibilities as part of NASA\u2019s Commercial Crew Program.\n  The aim of this program is to restore domestic launch capability to the US by creating crew-rated spacecraft that can carry astronauts to and from the International Space Station (ISS). The  Crew Dragon was SpaceX\u2019s contribution to the program while Boeing\u2019s took the form of the   CST-100 Starliner \u2013 which still needs to complete a successful uncrewed and crewed mission to the ISS before it can be certified.\n  With the Crew Dragon certified, SpaceX\u2019s full attention can now be directed towards their next-generation super-heavy launch system. As with its predecessors, the next step will be to conduct a cryogenic load test followed by a static fire test of its lone Raptor engine. Once that\u2019s done, it\u2019s reasonable to assume SpaceX will mount a 150-meter hop test using the SN5 in the next few weeks.\n Barring any additional setbacks, the SN5 could be fitted with a nosecone, flaps, and be fitted with three Raptor engines to perform a 20 km (about 65,600 ft or 12 mi) flight, which will conclude with a supersonic reentry and controlled landing. This will be the last step before a full-scale orbital flight using six Raptor engines can take place, followed by the finalizing of the  Starship\u2018s design and the start of commercial production.\n  In the meantime, the company will also be working on the  Super Heavy element of the launch system. Like the  Starship, this will involve putting prototypes through pressure testing, engine tests, and progressively higher hop tests. Once integrated, the launch system will be able to fulfill SpaceX\u2019s commitment to provide payload and crew services in support of Project Artemis, conduct lunar tourism, and send people to Mars.\n Both NASA and SpaceX hope to accomplish this in the next few years. Even if the timetables proves flexible, it\u2019s sure to be an exciting time!", "posttime": "2020-06-12 21:39:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u98de\u8239,prototypes,spacex", "title": "\u4e00\u65e6\u661f\u9645\u98de\u8239\u539f\u578b\u505c\u6b62\u7206\u70b8\uff0c\u6211\u4eec\u4eca\u5e74\u5c31\u53ef\u4ee5\u770b\u5230\u8f68\u9053\u53d1\u5c04", "title_en": "Once Starship Prototypes stop Exploding we could see an Orbital Launch this Year", "transed": 1, "url": "https://www.universetoday.com/146472/once-starship-prototypes-are-done-exploding-we-could-see-an-orbital-launch-this-year/", "via": "", "real_tags": ["\u98de\u8239", "spacex"]}, {"category": "", "categoryclass": "", "imagename": "29f431b683968bc8e10189be95343339.jpg", "infoid": 1006280, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e09\u665a\u4e0a\uff0cZFS\u7684\u521b\u59cb\u5f00\u53d1\u8005Matthew Ahrens\u5411OpenZFS\u9879\u76ee\u63d0\u4ea4\u4e86\u4e00\u4e2a\u672c\u5e94\u662f\u7b80\u5355\u7684\u3001\u6ca1\u6709\u4e89\u8bae\u7684\u8bf7\u6c42\uff1a\u5728\u4e0d\u5f15\u8d77\u6280\u672f\u95ee\u9898\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u8865\u4e01\u5220\u9664\u4e86\u5bf9\u5974\u96b6\u7684\u5f15\u7528\uff0c\u800c\u4ee3\u4e4b\u4ee5\u5bb6\u5c5e\u3002\n\u8fd9\u4e2a\u8865\u4e01\u4e0d\u4f1a\u6539\u53d8\u4ee3\u7801\u7684\u8fd0\u884c\u65b9\u5f0f-\u5b83\u53ea\u662f\u5728\u603b\u517148\u884c\u4ee3\u7801\u4e2d\u66f4\u6539\u53d8\u91cf\u540d\u79f0\uff0c\u4f7f\u5176\u4e0eLinux\u4e0a\u6e38\u8bbe\u5907\u6620\u5c04\u5668\u7684\u672f\u8bed\u4e00\u81f4(\u5220\u9664\u4e8642\u884c\uff0c\u589e\u52a0\u4e8648\u884c\uff1b\u8fd8\u7565\u5fae\u6269\u5c55\u4e86\u4e00\u4e2a\u6ce8\u91ca\u5757\uff0c\u4ee5\u4f7f\u5176\u66f4\u5177\u63cf\u8ff0\u6027)\u3002\n\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u4e92\u8054\u7f51\u4e0a\uff0c\u6124\u6012\u7684\u53cd\u5bf9\u8005\u7a81\u7136\u51fa\u73b0\u5728\u62c9\u53d6\u8bf7\u6c42\u4e0a\uff0c\u8bc4\u8bba\u5f88\u5feb\u5c31\u5bf9\u975e\u8d21\u732e\u8005\u5173\u95ed\u4e86\u3002\u6211\u7b2c\u4e00\u6b21\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u662f\u4f5c\u4e3ar/zfs subreddit\u7684\u4e3b\u6301\u4eba\uff0c\u4e00\u65e6\u5bf9\u516c\u5173\u672c\u8eab\u7684\u8bc4\u8bba\u4e0d\u518d\u53ef\u80fd\uff0c\u6ea2\u51fa\u7684\u5185\u5bb9\u5c31\u4f1a\u6cc4\u6f0f\u51fa\u6765\u3002\n\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u8981\u6253\u8865\u4e01\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u51e0\u4e2a\u6709\u6548\u7684\u7b54\u6848\u3002\u5bf9\u4e8e\u90a3\u4e9b\u9664\u4e86\u6e05\u6670\u4e4b\u5916\u62d2\u7edd\u601d\u8003\u4efb\u4f55\u4e8b\u60c5\u7684\u4eba\u6765\u8bf4\uff0c\u4efb\u4f55\u6280\u672f\u548c\u4eba\u7c7b\u5974\u5f79\u4e4b\u95f4\u90fd\u6ca1\u6709\u5f88\u597d\u7684\u63cf\u8ff0\u5173\u7cfb-\u800c\u4e14\u4eba\u7c7b\u8fd9\u4e2a\u672f\u8bed\u8fdc\u8fdc\u65e9\u4e8e\u4efb\u4f55\u5de5\u7a0b\u6216\u6280\u672f\u7528\u9014\u3002\u66ff\u6362\u4e3b/\u4ece\u672f\u8bed\u901a\u5e38\u4f1a\u4ea7\u751f\u66f4\u7cbe\u786e\u3001\u66f4\u5bb9\u6613\u53d1\u73b0\u7684\u6280\u672f\u63cf\u8ff0\u3002\nOpenZFS\u5e76\u4e0d\u662f\u8fd9\u79cd\u6d88\u9664\u6b67\u4e49\u52aa\u529b\u7684\u524d\u6cbf\u3002\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u9879\u76ee\u5df2\u7ecf\u653e\u5f03\u5e76\u66ff\u6362\u4e86\u4e3b/\u4ece\u672f\u8bed\uff0c\u5305\u62ecBIND DNS\u670d\u52a1\u5668\u3001Drupal Web\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u548cRedis\u6570\u636e\u5b58\u50a8\u3002\u7279\u522b\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u867d\u7136\u8fd9\u4e09\u4e2a\u9879\u76ee\u90fd\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u539f\u59cb\u4e3b/\u4ece\u672f\u8bed\uff0c\u4f46\u66ff\u6362\u7684\u672f\u8bed\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u6bcf\u4e2a\u9879\u76ee\u4e2d\u63cf\u8ff0\u7684\u5b9e\u9645\u5173\u7cfb\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u9879\u76ee\u6765\u8bf4\uff0c\u5bf9\u4e8e\u76f8\u540c\u7684\u539f\u59cb\u672f\u8bed\u6765\u8bf4\uff0c\u6700\u660e\u667a\u7684\u66ff\u4ee3\u65b9\u6cd5\u4e5f\u662f\u4e0d\u540c\u7684\u3002\n\u5bf9\u4e8eBIND DNS\u670d\u52a1\u5668\uff0cInternet\u7cfb\u7edf\u8054\u76df\u5c06\u4e3b/\u4ece\u670d\u52a1\u5668\u66ff\u6362\u4e3a\u4e3b/\u6b21\u670d\u52a1\u5668\u3002\u5bf9\u4e8eDrupal\u6765\u8bf4\uff0c\u66ff\u4ee3\u65b9\u6848\u662f\u4e3b\u670d\u52a1\u5668/\u526f\u672c\u670d\u52a1\u5668\uff0c\u800c\u5bf9\u4e8eRedis\u6765\u8bf4\uff0c\u5b83\u662f\u9886\u5bfc\u8005/\u8ffd\u968f\u8005\u3002\u4e0d\u540c\u7684\u66ff\u6362\u672f\u8bed\u4e4b\u6240\u4ee5\u5b58\u5728\uff0c\u662f\u56e0\u4e3a\u771f\u6b63\u7684\u529f\u80fd\u4e0d\u540c--\u56e0\u6b64\uff0c\u5bf9\u539f\u59cb\u672f\u8bed\u7684\u66ff\u6362\u66f4\u80fd\u63cf\u8ff0\u5e55\u540e\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u60c5\u3002\n\u5982\u524d\u6240\u8ff0\uff0cOpenZFS\u7edd\u4e0d\u662f\u7b2c\u4e00\u4e2a\u66f4\u65b0\u5176\u4ee3\u7801\u5e93\u548c\u6587\u6863\u4ee5\u5220\u9664\u5bf9\u5974\u96b6\u5236\u7684\u5f15\u7528\u7684\u9879\u76ee\u3002\u5c3d\u7ba1\u5bf9\u4e3b/\u4ece\u672f\u8bed\u7684\u6295\u8bc9\u81f3\u5c11\u65e9\u572820\u4e16\u7eaa90\u5e74\u4ee3\u5c31\u5df2\u7ecf\u6d41\u4f20\u5f00\u6765\uff0c\u4f46\u7f8e\u56fd\u4e3b\u6d41\u5a92\u4f53\u7b2c\u4e00\u6b21\u5927\u89c4\u6a21\u66dd\u5149\u662f\u57282003\u5e74\uff0c\u5f53\u65f6\u8be5\u53bf\u7684\u4e00\u540d\u9ed1\u4eba\u96c7\u5458\u5c31\u5f55\u50cf\u5e26\u8bbe\u5907\u4e0a\u7684\u4e3b/\u4ece\u6807\u7b7e\u63d0\u51fa\u4e86\u6295\u8bc9\u3002\n\u9664\u4e86\u5177\u4f53\u9879\u76ee\u4e2d\u7684\u5177\u4f53\u672f\u8bed\u66f4\u65b0\u5916\uff0cIETF(\u4e92\u8054\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4)\u57282018\u5e74\u53d1\u5e03\u4e86\u4e00\u4efd\u5907\u5fd8\u5f55\uff0c\u627f\u8ba4\u5e76\u6982\u8ff0\u4e86\u95ee\u9898\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e3b/\u4ece\u548c\u9ed1\u540d\u5355/\u767d\u540d\u5355\u672f\u8bed\u7684\u5177\u4f53\u66ff\u4ee3\u65b9\u6848\u3002\n\u867d\u7136\u6280\u672f\u51c6\u786e\u6027\u548c\u5148\u4f8b\u662f\u4ece\u4ee3\u7801\u5e93\u4e2d\u5220\u9664\u4e3b/\u4ece\u672f\u8bed\u7684\u6b63\u5f53\u7406\u7531\uff0c\u4f46\u5b83\u4eec\u5f53\u7136\u4e0d\u662f\u552f\u4e00\u7684\u539f\u56e0\u3002Ahrens&#39\uff1bOwner Pull Request\u5f88\u6709\u8bf4\u670d\u529b\u5730\u63cf\u8ff0\u4e86\u8fd9\u4e00\u70b9\uff1a\n\u4eba\u7c7b\u5974\u96b6\u5236\u7684\u53ef\u6015\u5f71\u54cd\u7ee7\u7eed\u5f71\u54cd\u7740\u793e\u4f1a\u3002\u5728\u8ba1\u7b97\u673a\u8f6f\u4ef6\u4e2d\u968f\u610f\u4f7f\u7528\u672f\u8bed\u201c\u5974\u96b6\u201d\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u6307\u7684\u662f\u4eba\u7c7b\u75db\u82e6\u7684\u7ecf\u5386\u3002\n\u8fd9\u4e0d\u5e94\u8be5\u6709\u4ec0\u4e48\u4e89\u8bae\uff0c\u5373\u4f7f\u8fd9\u662f\u7b2c\u4e00\u6b21\u6295\u7a3f\u4eba\u7684\u9a7e\u8f66\u62c9\u8f66\u8bf7\u6c42\u3002\u5f53\u7136\uff0cAhrens\u5e76\u975e\u5982\u6b64-\u4ed6\u662f\u4ece2001\u5e74\u5f00\u59cb\u521b\u5efaSun Microsystems ZFS\u7684\u4e09\u4f4d\u5f00\u53d1\u4eba\u5458\u4e4b\u4e00\uff0c\u4eca\u5929\u4ed6\u4ecd\u7136\u662fOpenZFS\u9879\u76ee\u7684\u4e3b\u8981\u5f00\u53d1\u4eba\u5458\u3002\n\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5f88\u660e\u663e\uff0c\u4e00\u4e2a\u4eba\u5bf9\u968f\u610f\u7684\u5974\u96b6\u5236\u7c7b\u6bd4\u7684\u53cd\u5e94\u4e0d\u4f1a\u5426\u5b9a\u53e6\u4e00\u4e2a\u4eba\u4e0e\u5974\u96b6\u5236\u7684\u5386\u53f2\u73b0\u5b9e\u53ca\u5176\u6301\u7eed\u7684\u4ee3\u9645\u5f71\u54cd\u7684\u7ecf\u5386\u3002\nAhrens&39\uff1bPull\u8bf7\u6c42\u5df2\u7ecf\u7531\u9996\u5e2d\u5f00\u53d1\u4eba\u5458Brian Behlendorf\u548cRyan Moeller\u5ba1\u6838\uff0c\u5e76\u5408\u5e76\u5230OpenZFS\u9879\u76ee\u5e93\u4e2d\u3002", "note_en": "On Wednesday evening, ZFS founding developer Matthew Ahrens submitted what should have been a simple, non-controversial pull  request to the OpenZFS project: wherever possible without causing technical issues, the patch removed references to &#34;slaves&#34; and replaced them with &#34;dependents.&#34;\n This patch in question doesn&#39;t change the way the code functions\u2014it simply changes variable names in a way that brings them in conformance with Linux upstream  device-mapper\u00a0terminology, in 48 total lines of code (42 removed and 48 added; with one comment block expanded slightly to be more descriptive).\n But this being the Internet, unfortunately, outraged naysayers descended on the pull request, and the comments were quickly closed to non-contributors. I first became aware of this as the moderator of the r/zfs  subreddit where the overflow spilled once comments on the PR itself were no longer possible.\n  There are several valid answers to the &#34;Why patch?&#34; question. For those who refuse to think of anything but clarity, there is no good descriptive relationship between any technology and human slavery\u2014and the human term far predates any engineering or technical use. Replacing &#34;master/slave&#34; terminology generally results in a more precise, easily discoverable technical description.\n OpenZFS is not on the leading edge of this disambiguation effort. Some notable projects that have discarded and replaced master/slave terminology include the BIND DNS server, Drupal Web application framework, and Redis datastore. It is particularly telling that, although all three projects used the same original &#34;master/slave&#34; terms, the replacements were different. That&#39;s because the actual relationship described is different in each project, and so the most sensible replacement for the same original term is different for each project.\n For the BIND DNS server, the Internet Systems Consortium replaced master/slave with primary/secondary. For Drupal, the replacement is primary/replica, and for Redis, it&#39;s leader/follower. The different replacement terms exist because the real functions are different\u2014and the replacement for the original terminology is therefore more descriptive of what&#39;s actually happening underneath the hood.\n  As mentioned previously, OpenZFS is by no means the first project to update its codebase and documentation to remove references to slavery. Although complaints about master/slave terminology circulated at least as far back as the 1990s, the first large mainstream American exposure came from Los Angeles in 2003, where a black employee of the county filed a  complaint concerning master/slave labels on videotape devices.\n In addition to specific terminology updates in specific  projects, the IETF (Internet Engineering Task Force) published a  memo\u00a0in 2018 acknowledging and outlining the problem and offering specific alternatives to both master/slave and blacklist/whitelist terminology.\n  While technical accuracy and precedent are valid reasons to remove master/slave terminology from a codebase, they are of course not the only reason. Ahrens&#39; own pull request describes this eloquently enough:\n The horrible effects of human slavery continue to impact society. The casual use of the term &#34;slave&#34; in computer software is an unnecessary reference to a painful human experience.\n There should be nothing controversial about this, even if this were a drive-by pull request from a first-time contributor. Ahrens, of course, is anything but\u2014he was one of the three founding Sun Microsystems ZFS developers beginning in 2001, and he remains a lead developer of the OpenZFS project today.\n More importantly, it should be obvious that one person&#39;s impervious reaction to casual slavery-based analogies does not negate another person&#39;s experiences with slavery&#39;s historical reality and its ongoing generational effects.\n Ahrens&#39; pull request has been reviewed by fellow lead developers Brian Behlendorf and Ryan Moeller and merged into the OpenZFS project repository.", "posttime": "2020-06-12 21:06:14", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4ee3\u7801,\u653b\u51fb\u6027,removed,\u672f\u8bed", "title": "OpenZFS\u4ece\u5176\u4ee3\u7801\u4e2d\u5220\u9664\u4e86\u653b\u51fb\u6027\u672f\u8bed", "title_en": "OpenZFS Removed Offensive Terminology From Its Code", "transed": 1, "url": "https://arstechnica.com/tech-policy/2020/06/openzfs-removed-master-slave-terminology-from-its-codebase/", "via": "", "real_tags": ["\u4ee3\u7801", "\u653b\u51fb\u6027", "removed", "\u672f\u8bed"]}, {"category": "", "categoryclass": "", "imagename": "3ff293138ef66fa2d2bd2134ad31e3f2.jpg", "infoid": 1006279, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u51a0\u72b6\u75c5\u6bd2\u6765\u88ad\u65f6\uff0c\u5927\u591a\u6570\u5dde\u6682\u505c\u4e86\u9a71\u9010-\u4f46\u8fd9\u4e9b\u9650\u5236\u51e0\u4e4e\u5728\u66f4\u6177\u6168\u7684\u5931\u4e1a\u6551\u6d4e\u91d1\u5373\u5c06\u67af\u7aed\u7684\u540c\u65f6\u5230\u671f\u3002\n\u91cd\u8981\u539f\u56e0\uff1a\u5bf9\u4e8e\u5df2\u7ecf\u627f\u53d7\u4e86\u65b0\u51a0\u80ba\u708e\u6700\u4e25\u91cd\u5f71\u54cd\u7684\u7f8e\u56fd\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e00\u53cc\u91cd\u6253\u51fb\u5f88\u5bb9\u6613\u52a0\u5267\u623f\u5730\u4ea7\u5371\u673a\u3002\n\u6839\u636e\u6bcf\u5468\u4eba\u53e3\u666e\u67e5\u8c03\u67e5\u65b0\u51a0\u80ba\u708e\u5bf9\u7f8e\u56fd\u4eba\u7684\u5f71\u54cd\uff0c\u57285\u6708\u4efd\u63a5\u53d7\u8c03\u67e5\u7684\u6210\u5e74\u4eba\u4e2d\uff0c\u6709\u4e94\u5206\u4e4b\u4e00\u7684\u4eba\u8868\u793a\uff0c\u4ed6\u4eec\u5bf9\u81ea\u5df1\u6709\u80fd\u529b\u652f\u4ed86\u6708\u4efd\u5230\u671f\u7684\u623f\u79df\u6216\u62b5\u62bc\u8d37\u6b3e\u51e0\u4e4e\u6ca1\u6709\u4fe1\u5fc3\u3002\n\u57ce\u5e02\u7814\u7a76\u6240(Urban Institute)\u5bf9\u4eba\u53e3\u666e\u67e5\u6570\u636e\u7684\u5206\u6790\u53d1\u73b0\uff0c\u8fd125%\u7684\u9ed1\u4eba\u79df\u623f\u8005\u4e0a\u4e2a\u6708\u63a8\u8fdf\u6216\u672a\u652f\u4ed8\u623f\u79df\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u767d\u4eba\u79df\u623f\u8005\u7684\u8fd9\u4e00\u6bd4\u4f8b\u4e3a14%\u3002\n\u5728\u5bc6\u6b47\u6839\u5dde\uff0c\u6cd5\u9662\u6b63\u5728\u51c6\u5907\u8fce\u63a5\u5373\u5c06\u5230\u6765\u7684\u6d2a\u6d41\uff0c\u591a\u8fbe7.5\u4e07\u4efd\u623f\u4e1c/\u79df\u6237\u7533\u8bf7\u3002(\u8be5\u5dde\u7684\u7981\u4ee4\u672c\u5468\u5230\u671f\u3002)\u3002\n\u603b\u4f53\u60c5\u51b5\u662f\uff1a\u8fd9\u573a\u8feb\u4f7f\u7ecf\u6d4e\u5d29\u6e83\u7684\u6d41\u884c\u75c5\u7ed9\u8fd9\u4e2a\u56fd\u5bb6\u957f\u671f\u5b58\u5728\u7684\u4f4f\u623f\u95ee\u9898\u589e\u52a0\u4e86\u65b0\u7684\u8d1f\u62c5\u3002\n\u516c\u5bd3\u884c\u4e1a\u884c\u4e1a\u7ec4\u7ec7\u56fd\u5bb6\u591a\u6237\u4f4f\u623f\u59d4\u5458\u4f1a(National Multifamily Housing Council)\u7684\u5b9d\u62c9\u00b7\u897f\u8bfa(Paula Cino)\u544a\u8bc9Axios\uff0c\u4e4b\u524d\u5b58\u5728\u4f9b\u5e94\u548c\u8d1f\u62c5\u80fd\u529b\u95ee\u9898\uff0c\u9664\u975e\u8054\u90a6\u3001\u5dde\u548c\u5730\u65b9\u5c42\u9762\u63d0\u4f9b\u771f\u6b63\u826f\u597d\u7684\u652f\u6301\uff0c\u5426\u5219\u60c5\u51b5\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\n\u4ed6\u4eec\u7684\u610f\u601d\u662f\uff1a\u7ed3\u679c\u53ef\u80fd\u662f\u66f4\u9ad8\u7684\u65e0\u5bb6\u53ef\u5f52\u7387--\u8ba9\u66f4\u591a\u7684\u4eba\u5728\u5168\u7403\u5927\u6d41\u884c\u4e2d\u6d41\u843d\u8857\u5934\u3002\n\u666e\u6797\u65af\u987f\u5927\u5b66(Princeton University)\u9a71\u9010\u5b9e\u9a8c\u5ba4(Eiction Lab)\u7684\u653f\u7b56\u5206\u6790\u5e08\u827e\u8389\u624e\u00b7\u675c\u62c9\u7eb3(Alieza Durana)\u544a\u8bc9Axios\uff0c\u5728\u6d41\u611f\u5927\u6d41\u884c\u4e4b\u524d\uff0c\u6211\u4eec\u5728\u7f8e\u56fd\u7684\u65e0\u5bb6\u53ef\u5f52\u8005\u6536\u5bb9\u6240\u7cfb\u7edf\u5df2\u7ecf\u6349\u895f\u89c1\u8098\uff0c\u800c\u4e14\u6ca1\u6709\u5efa\u7acb\u8d77\u793e\u4f1a\u8ddd\u79bb\u3002\u8be5\u5b9e\u9a8c\u5ba4\u6b63\u5728\u8ddf\u8e2a\u5404\u5dde\u7684\u63aa\u65bd\u3002\n\u901a\u5e38\u53d1\u751f\u5728\u9a71\u9010\u4e4b\u540e\u7684\u666e\u901a\u7834\u574f\u88ab\u8fd9\u6b21\u5927\u6d41\u884c\u7684\u6761\u4ef6\u548c\u7ecf\u6d4e\u5371\u673a\u672c\u8eab\u8fdb\u4e00\u6b65\u653e\u5927\u4e86\u3002(#34\uff1b\u3002\n\u8fc5\u901f\u8d76\u4e0a\uff1a\u4e0e\u5927\u6d41\u884c\u6765\u88ad\u65f6\u4ed3\u4fc3\u901a\u8fc7\u7684\u5176\u4ed6\u63aa\u65bd\u4e00\u6837\uff0c\u5404\u57ce\u5e02\u548c\u5404\u5dde\u9881\u5e03\u4e86\u4e00\u7cfb\u5217\u4e0d\u540c\u957f\u5ea6\u548c\u8b66\u544a\u7684\u9a71\u9010\u6682\u505c\u62fc\u51d1\u800c\u6210\u7684\u63aa\u65bd\u3002\n\u5176\u4ed6\u7684\u5c06\u5728\u672a\u6765\u51e0\u5929\u548c\u51e0\u5468\u5185\u5230\u671f\uff0c\u5305\u62ec\u8def\u6613\u65af\u5b89\u90a3\u5dde\u548c\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\uff0c\u800c\u7ebd\u7ea6\u5dde\u548c\u5176\u4ed6\u5730\u65b9\u5df2\u7ecf\u5ba3\u5e03\u5ef6\u671f\u3002\n\u5728\u8054\u90a6\u5c42\u9762\uff0c\u51a0\u72b6\u75c5\u6bd2\u523a\u6fc0\u8ba1\u5212\u7981\u6b62\u8054\u90a6\u8865\u8d34\u4f4f\u623f\u57287\u670825\u65e5\u4e4b\u524d\u9a71\u9010\u5c45\u6c11\u3002\n\u5b57\u91cc\u884c\u95f4\u7684\u610f\u601d\u662f\uff1a\u6682\u505c\u9a71\u9010\u5e76\u4e0d\u662f\u51bb\u7ed3\u79df\u91d1-\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u65e0\u6cd5\u652f\u4ed8\u7684\u79df\u6237\u6765\u8bf4\uff0c\u903e\u671f\u79df\u91d1\u4ecd\u5728\u79ef\u7d2f\u3002\u4e00\u65e6\u6682\u505c\u4ee4\u5230\u671f\uff0c\u623f\u4e1c\u53ef\u4ee5\u83b7\u5f97\u6cd5\u9662\u6279\u51c6\u91c7\u53d6\u6216\u6062\u590d\u9a71\u9010\u884c\u52a8\uff0c\u5c45\u6c11\u53ef\u80fd\u4f1a\u5728\u6d1e\u91cc\u5446\u4e0a\u51e0\u4e2a\u6708\u3002\n\u66f4\u4ee4\u4eba\u4e0d\u5b89\u7684\u662f\uff1a\u4e00\u4e9b\u5931\u4e1a\u6551\u6d4e\u91d1\u7684\u5230\u671f\u4e0e\u66f4\u6177\u6168\u7684\u5931\u4e1a\u6551\u6d4e\u91d1\u7684\u505c\u6b62\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u8fd9\u4e9b\u6551\u6d4e\u91d1\u5e2e\u52a9\u5931\u4e1a\u7684\u7f8e\u56fd\u4eba\u7ef4\u6301\u4e86\u751f\u5b58\u3002\n\u770b\u70b9\uff1a\u7269\u4e1a\u7ecf\u7406\u6216\u592b\u59bb\u5e97\u623f\u4e1c\u53ef\u80fd\u4f1a\u5728\u9a71\u9010\u79df\u6237\u4e4b\u524d\u4e0e\u4ed6\u4eec\u534f\u5546\u3002\u4f46\u623f\u4e1c\u81ea\u5df1\u53ef\u80fd\u4e5f\u611f\u53d7\u5230\u4e86\u538b\u529b\uff1a\u4e00\u4e9b\u5dde\u4e5f\u505c\u6b62\u4e86\u623f\u4ea7\u6b62\u8d4e\uff0c\u8fd9\u4e9b\u6682\u505c\u5373\u5c06\u7ed3\u675f\u3002\n\u9a71\u9010\u73b0\u6709\u79df\u6237\u7684\u6210\u672c\u53ef\u80fd\u4e0d\u503c\u5f97\uff0c\u7279\u522b\u662f\u5982\u679c\u65b0\u79df\u6237\u51e0\u4e4e\u6ca1\u6709\u7b7e\u7f72\u79df\u7ea6\u7684\u9700\u6c42\u3002\n\u5546\u4e1a\u623f\u4e1c\u4e5f\u662f\u5982\u6b64\uff0c\u5c3d\u7ba1\u4e00\u4e9b\u4eba\u5df2\u7ecf\u8868\u793a\uff0c\u4ed6\u4eec\u6b63\u5728\u63a5\u53d7\u4e0d\u4ed8\u8d39\u7684\u96f6\u552e\u79df\u6237(\u5982Gap Inc.)\u3002\u53bb\u6cd5\u5ead\u3002\n\u63a8\u52a8\u65b0\u95fb\uff1a\u65e7\u91d1\u5c71\u7eaa\u4e8b\u62a5\u62a5\u9053\uff0c\u65e7\u91d1\u5c71\u672c\u5468\u57fa\u672c\u4e0a\u6c38\u4e45\u6682\u505c\u4e86\u7981\u4ee4-\u7981\u6b62\u623f\u4e1c\u4ee5\u4e0e\u6d41\u884c\u75c5\u6709\u5173\u7684\u539f\u56e0\u9519\u8fc7\u79df\u91d1\u4f5c\u4e3a\u9a71\u9010\u7684\u7406\u7531\u3002\n\u5b98\u5458\u4eec\u5728\u7acb\u6cd5\u4e2d\u5199\u9053\uff0c\u8fd9\u5ea7\u57ce\u5e02\u7f3a\u4e4f\u8d1f\u62c5\u5f97\u8d77\u7684\u79df\u8d41\u4f4f\u623f\uff0c\u5176\u4e2d\u76f8\u5f53\u5927\u4e00\u90e8\u5206\u5bb6\u5ead\u662f\u79df\u623f\u8005\uff0c\u5982\u679c\u4ed6\u4eec\u88ab\u8feb\u79bb\u5f00\u76ee\u524d\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u5c06\u9762\u4e34\u6c38\u4e45\u6d41\u79bb\u5931\u6240\u7684\u98ce\u9669\u3002\n\u5e95\u7ebf\u662f\uff1a\u6709\u53ef\u80fd\u4ea7\u751f\u591a\u7c73\u8bfa\u9aa8\u724c\u6548\u5e94\uff0c\u635f\u5bb3\u79df\u6237\u548c\u4e1a\u4e3b\u7684\u5229\u76ca\u3002", "note_en": "Most states paused evictions when the coronavirus hit \u2014 but those holds are expiring at about the same time that more generous unemployment benefits are set to dry up.\n Why it matters: The one-two punch could easily exacerbate the housing crisis for Americans already bearing the worst of COVID-19&#39;s effects.\n One fifth of adults polled in May  said they had slight or no confidence they would be able to pay their rent or mortgage due in June, according to a weekly Census survey measuring COVID-19\u2019s impact on Americans.\n An Urban Institute  analysis of Census data found nearly 25% of black renters deferred or did not pay their rent last month, compared with 14% of white renters.\n In Michigan, courts are  bracing for &#34;a coming deluge&#34; of as many as 75,000 landlord/tenant filings. (The state&#39;s moratorium expired this week.)\n The big picture: The pandemic \u2014 which forced an economic collapse \u2014 is adding new burdens on top of the country&#39;s longstanding housing problems.\n &#34;There was a supply and affordability problem before, and the opportunity for it to get a lot worse presents itself, unless there&#39;s really good support coming from the federal, state and local level,&#34; Paula Cino of the National Multifamily Housing Council, a trade group for the apartment industry, tells Axios.\n What they&#39;re saying: The result could be even higher rates of homelessness \u2014 leaving more people out on the streets in the midst of a global pandemic.\n &#34;Prior to the pandemic, our homeless shelter system in the U.S. was stretched thin, and also not set up for social distancing,&#34; Alieza Durana, a policy analyst at Princeton University&#39;s Eviction Lab, which is tracking states&#39; measures, tells Axios.\n &#34;The run-of-the-mill devastation that normally occurs in the wake of an eviction is further amplified by the conditions of this pandemic and economic crisis itself.&#34;\n Catch up quick: As with other measures that were passed in haste when the pandemic hit, cities and states enacted a patchwork of eviction halts with varying lengths and caveats.\n Others are set to expire in coming days and weeks, including Louisiana and Pennsylvania , while New York State and other places have announced extensions.\n At the federal level, the coronavirus stimulus package  barred federally subsidized housing from evicting residents until July 25.\n Between the lines: An eviction moratorium is not a rent freeze \u2014 which means that overdue rent is still accumulating for tenants who have been unable to pay it. Once a moratorium expires and landlords can get court approval to take or resume eviction action, residents could be months in the hole.\n Even more troubling: Some of the expirations collide with the stoppage of more generous unemployment benefits that have helped keep unemployed Americans afloat.\n What to watch: It&#39;s possible that property managers or mom-and-pop landlords will negotiate with tenants before evicting them. But landlords themselves are likely feeling the pinch: Some states have also put halts on property foreclosures, and those pauses are about to end.\n The cost of evicting an existing tenant may not be worth it, particularly if there is little demand from new renters to sign a lease.\n The same is true for commercial landlords, although some have already said they are taking nonpaying retail tenants (such as Gap Inc.) to court.\n Driving the news: San Francisco essentially made its moratorium permanent this week \u2014 prohibiting landlords from ever using missed rent for pandemic-related reasons as grounds for eviction, the San Francisco Chronicle  reports.\n &#34;The City has a shortage of affordable rental housing, and a significant percentage of its households are renters and at risk of permanent displacement should they be forced to leave their current homes,&#34; officials wrote in the legislation.\n The bottom line: There&#39;s the potential for a domino effect that would harm both tenants and property owners.", "posttime": "2020-06-12 20:48:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u542f\u793a\u5f55,grow,\u9a71\u9010", "title": "\u5bf9\u9a71\u9010\u542f\u793a\u5f55\u7684\u62c5\u5fe7\u4e0e\u65e5\u4ff1\u589e", "title_en": "Fears Grow of an Eviction Apocalypse", "transed": 1, "url": "https://www.axios.com/eviction-crisis-coronavirus-351bb693-a04f-4ea1-a27d-dceb5163af14.html", "via": "", "real_tags": ["\u542f\u793a\u5f55", "grow", "\u9a71\u9010"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006278, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u8fd9\u8f86\u81ea\u884c\u8f66\u51fa\u4e86\u70b9\u95ee\u9898\u3002\u6216\u8005\u4f60\u53ef\u80fd\u6ca1\u6709\u3002\u8fd9\u8f86\u81ea\u884c\u8f66\u7684\u8f66\u67b6\u5c11\u4e86\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u90e8\u5206\uff0c\u5982\u679c\u5b83\u771f\u7684\u5b58\u5728\uff0c\u5982\u679c\u6709\u4eba\u8bd5\u56fe\u9a91\u5b83\uff0c\u5b83\u4f1a\u7acb\u5373\u574f\u6389\u3002\u8ba9\u6211\u4ece\u5934\u5f00\u59cb\u89e3\u91ca\u4e00\u4e0b\uff1a\n\u65e9\u57282009\u5e74\uff0c\u6211\u5c31\u5f00\u59cb\u7ea0\u7f20\u670b\u53cb\u548c\u968f\u673a\u7684\u964c\u751f\u4eba\u3002\u6211\u4f1a\u62ff\u7740\u4e00\u652f\u7b14\u548c\u4e00\u5f20\u7eb8\u8d70\u5230\u4ed6\u4eec\u9762\u524d\uff0c\u8981\u6c42\u4ed6\u4eec\u7acb\u5373\u7528\u5fc3\u7ed9\u6211\u753b\u4e00\u8f86\u7537\u5f0f\u81ea\u884c\u8f66\u3002\u5f88\u5feb\u6211\u53d1\u73b0\uff0c\u5f53\u9762\u5bf9\u8fd9\u4e2a\u5947\u602a\u7684\u8981\u6c42\u65f6\uff0c\u5927\u591a\u6570\u4eba\u90fd\u5f88\u96be\u51c6\u786e\u5730\u8bb0\u4f4f\u81ea\u884c\u8f66\u662f\u5982\u4f55\u5236\u9020\u7684\u3002\u6709\u4e9b\u4eba\u786e\u5b9e\u5f88\u63a5\u8fd1\uff0c\u6709\u4e9b\u4eba\u5b9e\u9645\u4e0a\u753b\u5f97\u5f88\u5b8c\u7f8e\uff0c\u4f46\u5927\u591a\u6570\u4eba\u6700\u7ec8\u753b\u7684\u4e1c\u897f\u4e0e\u666e\u901a\u7684\u7537\u6027\u81ea\u884c\u8f66\u76f8\u53bb\u751a\u8fdc\u3002\n\u6211\u51e0\u4e4e\u4e0d\u77e5\u9053\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u5fc3\u7406\u5b66\u5bb6\u7528\u6765\u8bc1\u660e\u6211\u4eec\u7684\u5927\u8111\u6709\u65f6\u662f\u5982\u4f55\u6b3a\u9a97\u6211\u4eec\uff0c\u8ba9\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec\u77e5\u9053\u4e00\u4e9b\u4e1c\u897f\uff0c\u5c3d\u7ba1\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u3002\n\u6211\u6536\u96c6\u4e86\u6570\u767e\u5e45\u753b\uff0c\u79ef\u7d2f\u4e86\u4e00\u6279\u6211\u8ba4\u4e3a\u975e\u5e38\u73cd\u8d35\u7684\u85cf\u54c1\u3002\u4ece\u8fd9\u4e9b\u4f17\u5305\u548c\u6280\u672f\u9519\u8bef\u9a71\u52a8\u7684\u56fe\u753b\u4e2d\u6d8c\u73b0\u51fa\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u591a\u6837\u6027\u7684\u65b0\u7c7b\u578b\u3002\u4e00\u4e2a\u8bbe\u8ba1\u5e08\u4e0d\u53ef\u80fd\u5728100\u5e74\u7684\u65f6\u95f4\u91cc\u53d1\u660e\u8fd9\u4e48\u591a\u65b0\u7684\u81ea\u884c\u8f66\u8bbe\u8ba1\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4f1a\u5982\u6b64\u656c\u754f\u5730\u770b\u7740\u8fd9\u4e2a\u7cfb\u5217\u3002\n\u4ee5\u4e0b\u662f\u6211\u5728\u8fc7\u53bb6\u5e74\u4e2d\u6536\u96c6\u768450\u5e45\u7d20\u63cf\u7684\u7cbe\u9009\u3002\n2016\u5e74\u521d\uff0c\u6211\u6700\u7ec8\u51b3\u5b9a\u8f6e\u5230\u6211\u53c2\u52a0\u8fd9\u4e2a\u9879\u76ee\u3002\u6211\u51b3\u5b9a\u6211\u7684\u5de5\u4f5c\u662f\u5c55\u793a\u8fd9\u4e9b\u7d20\u63cf\u4e2d\u7684\u6f5c\u529b\u548c\u7f8e\u3002\u6211\u9009\u62e9\u4e86\u90a3\u4e9b\u6211\u89c9\u5f97\u6700\u6709\u8da3\u3001\u6700\u771f\u5b9e\u3001\u6700\u591a\u6837\u7684\uff0c\u7136\u540e\u628a\u5b83\u4eec\u6e32\u67d3\u5f97\u5c31\u50cf\u662f\u771f\u5b9e\u7684\u4e00\u6837\u3002\u6211\u6210\u4e3a\u4e86\u8fd9\u4e24\u5206\u949f\u9879\u76ee\u7684\u6267\u884c\u8005\uff0c\u8fd9\u4e9b\u4eba\u4e3b\u8981\u662f\u975e\u8bbe\u8ba1\u5e08\uff0c\u6211\u8bc1\u5b9e\u4e86\u6211\u7684\u6000\u7591\uff1a\u6bcf\u4e2a\u4eba\uff0c\u65e0\u8bba\u4ed6\u7684\u5e74\u9f84\u548c\u5de5\u4f5c\uff0c\u90fd\u53ef\u4ee5\u60f3\u51fa\u975e\u51e1\u7684\u3001\u72c2\u91ce\u7684\u3001\u65b0\u7684\uff0c\u6709\u65f6\u8fd8\u4f1a\u6709\u8f89\u714c\u7684\u53d1\u660e\u3002\n\u6536\u96c6\u5230\u7684\u81ea\u884c\u8f66\u603b\u6570\uff1a376\u8f86\uff0c\u6700\u5e74\u8f7b\u7684\u53c2\u4e0e\u8005\uff1a3yo\u3002\u5e74\u9f84\u6700\u5927\u7684\u53c2\u4e0e\u8005\uff1a88\u5c81\u3002\u4e0d\u540c\u56fd\u7c4d\u53c2\u8d5b\u8005\uff1a7\u8f86\u81ea\u884c\u8f66\u9762\u5411\u5de6\uff1a75%\u81ea\u884c\u8f66\u9762\u5411\u53f3\uff1a425%\u3002\n\u4e00\u4e9b\u591a\u6837\u6027\u662f\u7531\u6027\u522b\u9a71\u52a8\u7684\u3002\u94fe\u6761\u4e0e\u524d\u8f6e\u76f8\u8fde(\u6216\u540c\u65f6\u4e0e\u524d\u8f6e\u548c\u540e\u8f6e\u76f8\u8fde)\u7684\u56fe\u7eb8\u4e2d\uff0c\u8fd190%\u662f\u5973\u6027\u753b\u7684\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u867d\u7136\u7537\u6027\u901a\u5e38\u503e\u5411\u4e8e\u6b63\u786e\u653e\u7f6e\u94fe\u5b50\uff0c\u4f46\u5f53\u4ed6\u4eec\u610f\u8bc6\u5230\u81ea\u5df1\u753b\u5f97\u4e0d\u6b63\u786e\u65f6\uff0c\u4ed6\u4eec\u66f4\u70ed\u8877\u4e8e\u5c06\u6846\u67b6\u8fc7\u5ea6\u590d\u6742\u5316\u3002\n\u5bf9\u4e8e\u53c2\u4e0e\u8005\u6765\u8bf4\uff0c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u4e0d\u77e5\u9053\u5982\u4f55\u51c6\u786e\u5730\u7b80\u5355\u5730\u63cf\u8ff0\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\n\u6700\u96be\u61c2\u7684\u56fe\u753b\u4e5f\u662f\u6700\u96be\u61c2\u7684\u5b57\u8ff9\u3002\u5b83\u662f\u7531\u4e00\u4f4d\u533b\u751f\u5236\u4f5c\u7684\u3002", "note_en": "You might have noticed there\u2019s something wrong with this bike. Or you might have not. This bicycle is missing a very important part of its frame and it would immediately break if it actually existed and someone tried to ride it.Let me explain everything from the beginning:\n back in 2009 I began pestering friends and random strangers. I would walk up to them with a pen and a sheet of paper asking that they immediately draw me a men\u2019s bicycle, by heart. Soon I found out that when confronted with this odd request most people have a very hard time remembering exactly how a bike is made. Some did get close, some actually nailed it perfectly, but most ended up drawing something that was pretty \u00a0far off from a regular men\u2019s bicycle.\n Little I knew this is actually a test that psychologists use to demonstrate how our brain sometimes tricks us into thinking we know something even though we don\u2019t.\n I collected hundreds of drawings, building up a collection that I think is very precious. There is an incredible diversity of new typologies emerging from these crowd-sourced and technically error-driven drawings. A single designer could not invent so many new bike designs in 100 lifetimes and this is why\u00a0 I look at this collection in such awe.\n  Here is a\u00a0selection of 50 of the sketches I collected over the past 6 years.\n   In early 2016 I eventually decided it was my turn to take part in this project. I decided my job was going to be presenting the potential and the beauty inside these sketches. I selected those that I found most interesting and genuine and diverse, then rendered them as if they were real. I became the executor of these two minute projects by people who were mainly non-designers and confirmed my suspicion: everyone, regardless his age and job, can come up with extraordinary, wild, new and at times brilliant inventions.\n                                                     total number of collected bicycles:\u00a0 376 youngest participant:\u00a0 3 y.o. oldest participant:\u00a0 88 y.o. different nationalities of participants:\u00a0 7 bicycles facing left:\u00a0 75 % bicycles facing right:\u00a0 25 %\n      Some diversities are gender driven. Nearly 90% of drawings in which the chain is attached to the front wheel (or both to the front and the rear) were made by females. On the other hand, while men generally tend to place the chain correctly, they are more keen to over-complicate the frame when they realize they are not drawing it correctly.\n  One of the most frequent issues for participants was not knowing exactly how to describe their job in short.\n  The most unintelligible drawing has also the most unintelligible handwriting. It was made by a doctor.", "posttime": "2020-06-12 20:31:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8349\u56fe,bicycles,\u81ea\u884c\u8f66", "title": "\u8349\u56fe\u4e2d\u7684\u81ea\u884c\u8f66", "title_en": "Bicycles from Sketches", "transed": 1, "url": "http://www.gianlucagimini.it/prototypes/velocipedia.html", "via": "", "real_tags": ["\u8349\u56fe", "bicycles", "\u81ea\u884c\u8f66"]}, {"category": "", "categoryclass": "", "imagename": "819d0853e849dca473b8377a8ada0638.jpeg", "infoid": 1006277, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u5173\u4e8e\u7528Golang\u7f16\u5199\u5fae\u670d\u52a1\u7684\u5341\u90e8\u5206\u7cfb\u5217\u6587\u7ae0\u3002\u4f7f\u7528Protobuf\u548cGRPC\u4f5c\u4e3a\u5e95\u5c42\u4f20\u8f93\u534f\u8bae\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u624d\u5f04\u660e\u767d\u8fd9\u4e00\u70b9\uff0c\u5e76\u6572\u5b9a\u4e86\u4e00\u4e2a\u6e05\u6670\u800c\u7b80\u6d01\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u60f3\u4e0e\u5176\u4ed6\u521a\u63a5\u89e6\u8fd9\u4e00\u9886\u57df\u7684\u4eba\u5206\u4eab\u6211\u5728\u521b\u5efa\u3001\u6d4b\u8bd5\u548c\u90e8\u7f72\u5fae\u670d\u52a1\u65b9\u9762\u5b66\u5230\u7684\u4e1c\u897f\u3002\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u53ea\u4ecb\u7ecd\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u3001\u672f\u8bed\uff0c\u5e76\u4ee5\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u521b\u5efa\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5fae\u670d\u52a1\u3002\n\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u5806\u6808\u5c06\u662f\uff1aGolang\u3001MongoDB\u3001GRPC\u3001docker\u3001Google Cloud\u3001Kubernetes\u3001NATS\u3001CircleCI\u3001Terraform\u548cGo-Micro\u3002\n\u6211\u4eec\u5c06\u6784\u5efa\u53ef\u80fd\u662f\u60a8\u80fd\u60f3\u5230\u7684\u6700\u901a\u7528\u7684\u5fae\u670d\u52a1\u793a\u4f8b\uff0c\u4e00\u4e2a\u8fd0\u8f93\u96c6\u88c5\u7bb1\u7ba1\u7406\u5e73\u53f0\uff01\u535a\u5ba2\u611f\u89c9\u5fae\u670d\u52a1\u7684\u7528\u4f8b\u592a\u7b80\u5355\u4e86\uff0c\u6211\u60f3\u8981\u7684\u662f\u80fd\u591f\u771f\u6b63\u5c55\u793a\u590d\u6742\u6027\u5206\u79bb\u7684\u4e1c\u897f\u3002\u6240\u4ee5\u8fd9\u611f\u89c9\u50cf\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6311\u6218\uff01\n\u5728\u4f20\u7edf\u7684\u6574\u4f53\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u7684\u6240\u6709\u529f\u80fd\u90fd\u88ab\u5199\u5165\u5230\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u6709\u65f6\uff0c\u5b83\u4eec\u4f1a\u6309\u5176\u7c7b\u578b(\u5982\u63a7\u5236\u5668\u3001\u5b9e\u4f53\u3001\u5de5\u5382\u7b49)\u8fdb\u884c\u5206\u7ec4\u3002\u6709\u65f6\uff0c\u53ef\u80fd\u5728\u8f83\u5927\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u529f\u80fd\u6309\u5173\u6ce8\u70b9\u6216\u529f\u80fd\u5206\u5f00\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2aauth\u5305\u3001\u4e00\u4e2aFriends\u5305\u548c\u4e00\u4e2a\u6587\u7ae0\u5305\u3002\u5b83\u4eec\u53ef\u4ee5\u5305\u542b\u5b83\u4eec\u81ea\u5df1\u7684\u5de5\u5382\u3001\u670d\u52a1\u3001\u50a8\u5b58\u5e93\u3001\u6a21\u578b\u7b49\u96c6\u5408\u3002\u4f46\u662f\u6700\u7ec8\u5b83\u4eec\u88ab\u7ec4\u5408\u5728\u5355\u4e2a\u4ee3\u7801\u5e93\u4e2d\u3002\n\u5fae\u670d\u52a1\u7684\u6982\u5ff5\u662f\u5c06\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u7a0d\u5fae\u6df1\u5165\u4e00\u70b9\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5173\u6ce8\u70b9\u5206\u79bb\u5230\u5b83\u4eec\u81ea\u5df1\u7684\u3001\u72ec\u7acb\u7684\u3001\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u5e93\u4e2d\u3002\n\u590d\u6742\u6027-\u5c06\u529f\u80fd\u62c6\u5206\u6210\u5fae\u670d\u52a1\u5141\u8bb8\u60a8\u5c06\u4ee3\u7801\u62c6\u5206\u6210\u66f4\u5c0f\u7684\u5757\u3002\u8fd9\u8ba9\u4eba\u56de\u60f3\u8d77Unix\u90a3\u53e5\u53e4\u8001\u7684\u683c\u8a00\uff1a\u628a\u4e00\u4ef6\u4e8b\u505a\u597d\u3002\u6709\u4e00\u79cd\u8d8b\u52bf\uff0c\u4e0e\u5de8\u77f3\uff0c\u8ba9\u9886\u57df\u53d8\u5f97\u5f7c\u6b64\u7d27\u5bc6\u8026\u5408\uff0c\u5e76\u4f7f\u5173\u6ce8\u53d8\u5f97\u6a21\u7cca\u3002\u8fd9\u4f1a\u5bfc\u81f4\u66f4\u9ad8\u98ce\u9669\u3001\u66f4\u590d\u6742\u7684\u66f4\u65b0\uff0c\u6f5c\u5728\u66f4\u591a\u9519\u8bef\u548c\u66f4\u56f0\u96be\u7684\u96c6\u6210\u3002\n\u89c4\u6a21-\u5728\u4e00\u4e2a\u6574\u4f53\u4e2d\uff0c\u4ee3\u7801\u7684\u67d0\u4e9b\u533a\u57df\u53ef\u80fd\u6bd4\u5176\u4ed6\u533a\u57df\u4f7f\u7528\u5f97\u66f4\u9891\u7e41\u3002\u5bf9\u4e8e\u6574\u4f53\uff0c\u60a8\u53ea\u80fd\u6269\u5c55\u6574\u4e2a\u4ee3\u7801\u5e93\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u4e0d\u65ad\u53d7\u5230\u653b\u51fb\uff0c\u60a8\u9700\u8981\u6269\u5c55\u6574\u4e2a\u4ee3\u7801\u5e93\u6765\u5904\u7406\u60a8\u7684\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u7684\u8d1f\u8f7d\u3002\n\u5bf9\u4e8e\u5fae\u670d\u52a1\uff0c\u8fd9\u79cd\u5206\u79bb\u5141\u8bb8\u60a8\u5355\u72ec\u6269\u5c55\u5404\u4e2a\u670d\u52a1\u3002\u8fd9\u610f\u5473\u7740\u66f4\u6709\u6548\u7684\u6c34\u5e73\u7f29\u653e\u3002\u5b83\u4e0e\u5177\u6709\u591a\u4e2a\u6838\u5fc3\u548c\u533a\u57df\u7b49\u7684\u4e91\u8ba1\u7b97\u914d\u5408\u5f97\u975e\u5e38\u597d\u3002\nNginx\u5199\u4e86\u4e00\u4e2a\u5173\u4e8e\u5fae\u670d\u52a1\u5404\u79cd\u6982\u5ff5\u7684\u5947\u5999\u7cfb\u5217\uff0c\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u3002\n\u51e0\u4e4e\u6240\u6709\u8bed\u8a00\u90fd\u652f\u6301\u5fae\u670d\u52a1\uff0c\u6bd5\u7adf\uff0c\u5fae\u670d\u52a1\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u6846\u67b6\u6216\u5de5\u5177\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e9b\u8bed\u8a00\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u9002\u5408\u548c/\u6216\u66f4\u597d\u5730\u652f\u6301\u5fae\u670d\u52a1\u3002\u6709\u4e00\u79cd\u8bed\u8a00\u5f97\u5230\u4e86\u6781\u5927\u7684\u652f\u6301\uff0c\u90a3\u5c31\u662f\u6b4c\u5170\u8bed\u3002\nGolang\u975e\u5e38\u8f7b\u4fbf\u3001\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5e76\u4e14\u5bf9\u5e76\u53d1\u6709\u5f88\u597d\u7684\u652f\u6301\uff0c\u8fd9\u5728\u8de8\u591a\u53f0\u673a\u5668\u548c\u5185\u6838\u8fd0\u884c\u65f6\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u529f\u80fd\u3002\n\u6700\u540e\uff0cGO\u6709\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u5fae\u670d\u52a1\u6846\u67b6\uff0c\u79f0\u4e3aGO-Micro\u3002\u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u4e2d\u4f7f\u7528\u5b83\u3002\n\u56e0\u4e3a\u5fae\u670d\u52a1\u88ab\u5206\u6210\u5355\u72ec\u7684\u4ee3\u7801\u5e93\uff0c\u6240\u4ee5\u5fae\u670d\u52a1\u7684\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u662f\u901a\u4fe1\u3002\u5728\u6574\u4f53\u4e2d\uff0c\u901a\u4fe1\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u76f4\u63a5\u4ece\u4ee3\u7801\u5e93\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\u8c03\u7528\u4ee3\u7801\u3002\u7136\u800c\uff0c\u5fae\u670d\u52a1\u4e0d\u5177\u5907\u8fd9\u79cd\u80fd\u529b\uff0c\u56e0\u4e3a\u5b83\u4eec\u751f\u6d3b\u5728\u4e0d\u540c\u7684\u5730\u65b9\u3002\u56e0\u6b64\uff0c\u60a8\u9700\u8981\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f7f\u8fd9\u4e9b\u72ec\u7acb\u7684\u670d\u52a1\u80fd\u591f\u4ee5\u5c3d\u53ef\u80fd\u5c11\u7684\u5ef6\u8fdf\u76f8\u4e92\u901a\u4fe1\u3002\n\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4f20\u7edf\u7684REST\uff0c\u6bd4\u5982\u57fa\u4e8ehttp\u7684JSON\u6216XML\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u670d\u52a1A\u5fc5\u987b\u5c06\u5176\u6570\u636e\u7f16\u7801\u6210JSON/XML\uff0c\u901a\u8fc7\u7f51\u7edc\u5411\u670d\u52a1B\u53d1\u9001\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u670d\u52a1B\u5fc5\u987b\u5c06\u6765\u81eaJSON\u7684\u6d88\u606f\u89e3\u7801\u56de\u4ee3\u7801\u3002\u8fd9\u5728\u89c4\u6a21\u4e0a\u6709\u6f5c\u5728\u7684\u5f00\u9500\u95ee\u9898\u3002\u867d\u7136\u4f60\u88ab\u8feb\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e0a\u91c7\u7528\u8fd9\u79cd\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f46\u670d\u52a1\u4e4b\u95f4\u53ef\u4ee5\u7528\u5b83\u4eec\u60f3\u8981\u7684\u4efb\u4f55\u683c\u5f0f\u8fdb\u884c\u4ea4\u6d41\u3002\nGRPC\u8fdb\u6765\u4e86\u3002GRPC\u662fGoogle\u63a8\u51fa\u7684\u57fa\u4e8e\u4e8c\u8fdb\u5236\u7684\u8f7b\u91cf\u7ea7RPC\u901a\u4fe1\u534f\u8bae\u3002\u8fd9\u53e5\u8bdd\u592a\u591a\u4e86\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u3002GRPC\u4f7f\u7528\u4e8c\u8fdb\u5236\u4f5c\u4e3a\u5176\u6838\u5fc3\u6570\u636e\u683c\u5f0f\u3002\u5728\u6211\u4eec\u7684RESTful\u793a\u4f8b\u4e2d\uff0c\u4f7f\u7528JSON\uff0c\u60a8\u5c06\u901a\u8fc7http\u53d1\u9001\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5b57\u7b26\u4e32\u5305\u542b\u5927\u91cf\u5173\u4e8e\u5176\u7f16\u7801\u683c\u5f0f\u3001\u957f\u5ea6\u3001\u5185\u5bb9\u683c\u5f0f\u548c\u5404\u79cd\u5176\u4ed6\u96f6\u788e\u5185\u5bb9\u7684\u5143\u6570\u636e\u3002\u8fd9\u662f\u4e3a\u4e86\u4f7f\u670d\u52a1\u5668\u53ef\u4ee5\u901a\u77e5\u4f20\u7edf\u7684\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u5ba2\u6237\u7aef\u671f\u671b\u4ec0\u4e48\u3002\u5728\u4e24\u4e2a\u670d\u52a1\u4e4b\u95f4\u901a\u4fe1\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u771f\u6b63\u9700\u8981\u6240\u6709\u8fd9\u4e9b\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u51b7\u786c\u53cc\u661f\uff0c\u5b83\u7684\u91cd\u91cf\u8981\u8f7b\u5f97\u591a\u3002GRPC\u4f7f\u7528\u65b0\u7684HTTP2.0\u89c4\u8303\uff0c\u8be5\u89c4\u8303\u5141\u8bb8\u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u5b83\u751a\u81f3\u5141\u8bb8\u53cc\u5411\u6d41\uff0c\u8fd9\u662f\u76f8\u5f53\u9177\u7684\uff01HTTP 2\u5bf9GRPC\u7684\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u91cd\u8981\u3002\u6709\u5173HTTP2\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u770b\u4e00\u770b\u6765\u81eaGoogle\u7684\u8fd9\u7bc7\u7cbe\u5f69\u7684\u5e16\u5b50\u3002\n\u4f46\u662f\uff0c\u6211\u4eec\u5982\u4f55\u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\u5462\uff1f\u597d\u7684\uff0cGRPC\u6709\u4e00\u4e2a\u4ea4\u6362DSL\uff0c\u79f0\u4e3a\u534f\u8bae\u7f13\u51b2\u533a(Protobuf)\u3002Protobuf\u5141\u8bb8\u60a8\u4f7f\u7528\u5f00\u53d1\u4eba\u5458\u53cb\u597d\u7684\u683c\u5f0f\u5b9a\u4e49\u670d\u52a1\u7684\u63a5\u53e3\u3002\n\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6839\u76ee\u5f55\uff0c\u6211\u5df2\u5c06\u5176\u547d\u540d\u4e3amy shippy\u3002cd\u8fdb\u5165\u60a8\u7684\u65b0\u6839\u76ee\u5f55\uff0c\u5e76\u4ece\u6211\u4eec\u7684repo\u7684\u6839\u76ee\u5f55\u521b\u5efa\u4ee5\u4e0b\u6587\u4ef6\u5939\u548c\u6587\u4ef6\uff1ashippy-service-consignment/proto/consignment/consignment.proto\u3002\n\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6211\u5c06\u6211\u4eec\u6240\u6709\u7684\u670d\u52a1\u90fd\u653e\u5728\u4e00\u4e2a\u56de\u8d2d\u4e2d\u3002\u8fd9\u88ab\u79f0\u4e3a\u5355\u4e00\u56de\u8d2d(mono-repo)\u3002\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u7b80\u5316\u672c\u6559\u7a0b\u7684\u5185\u5bb9\u3002\u6709\u5f88\u591a\u652f\u6301\u548c\u53cd\u5bf9\u4f7f\u7528\u5355\u4e00\u56de\u590d\u7684\u8bba\u636e\uff0c\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8d58\u8ff0\u3002\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u8fd9\u4e9b\u670d\u52a1\u548c\u7ec4\u4ef6\u653e\u5728\u5355\u72ec\u7684repos\u4e2d\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u5f88\u591a\u5f88\u597d\u7684\u8bba\u636e\u3002\n//shippy-service-consignment/proto/consignment/consignment.protosyntax=&#34\uff1bProto3&#34\uff1b\uff1bPackage Consignment\uff1bservice ShippingService{RPC CreateConsignment(Consignment)Returns(Response){}}\u6d88\u606f\u5bc4\u552e{String id=1\uff1bString description=2\uff1bint32 Weight=3\uff1b\u91cd\u590d\u5bb9\u5668\u5bb9\u5668=4\uff1bString tainer_id=5\uff1b}\u6d88\u606f\u5bb9\u5668{String id=1\uff1bstring Customer_id=2\uff1bString Origin=3\uff1bString user_id=4\uff1b}\u6d88\u606f\u54cd\u5e94{bool Created=1\u3002\n\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u4f8b\u5b50\uff0c\u4f46\u8fd9\u91cc\u6709\u4e00\u4e9b\u4e8b\u60c5\u8981\u505a\u3002\u9996\u5148\uff0c\u60a8\u5b9a\u4e49\u4e86\u60a8\u7684\u670d\u52a1\uff0c\u5b83\u5e94\u8be5\u5305\u542b\u60a8\u5e0c\u671b\u5411\u5176\u4ed6\u670d\u52a1\u516c\u5f00\u7684\u65b9\u6cd5\u3002\u7136\u540e\u5b9a\u4e49\u60a8\u7684\u6d88\u606f\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5b9e\u9645\u4e0a\u5c31\u662f\u60a8\u7684\u6570\u636e\u7ed3\u6784\u3002Protobuf\u662f\u9759\u6001\u7c7b\u578b\u7684\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9Container\u6240\u505a\u7684\u90a3\u6837\u3002\u6d88\u606f\u672c\u8eab\u53ea\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\n\u8fd9\u91cc\u6709\u4e24\u4e2a\u5e93\u5728\u5de5\u4f5c\uff0c\u6d88\u606f\u7531protocol buf\u5904\u7406\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u670d\u52a1\u7531GRPC protocol buf\u63d2\u4ef6\u5904\u7406\uff0c\u8be5\u63d2\u4ef6\u7f16\u8bd1\u4ee3\u7801\u4e0e\u8fd9\u4e9b\u7c7b\u578b\u4ea4\u4e92\uff0c\u5373\u6211\u4eec\u7684proto\u6587\u4ef6\u7684\u670d\u52a1\u90e8\u5206\u3002\n\u7136\u540e\uff0c\u901a\u8fc7CLI\u8fd0\u884c\u8be5\u534f\u8bae\u7f13\u51b2\u533a\u5b9a\u4e49\uff0c\u4ee5\u751f\u6210\u5c06\u6b64\u4e8c\u8fdb\u5236\u6570\u636e\u4e0e\u60a8\u7684\u529f\u80fd\u63a5\u53e3\u7684\u4ee3\u7801\u3002\n\u60a8\u5728\u4e3b\u673a\u8def\u5f84\u4e2d\u8bbe\u7f6e\u4e86GOROOT\u6216GO\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f4d\u7f6e\u3002\n\u8fd9\u5c06\u8c03\u7528Protoc\u5e93\uff0c\u8be5\u5e93\u8d1f\u8d23\u5c06\u60a8\u7684Protobuf\u5b9a\u4e49\u7f16\u8bd1\u6210\u4ee3\u7801\u3002\u6211\u4eec\u8fd8\u6307\u5b9a\u4e86GRPC\u63d2\u4ef6\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u6784\u5efa\u4e0a\u4e0b\u6587\u548c\u8f93\u51fa\u8def\u5f84\u3002\n\u73b0\u5728\uff0c\u5f53\u60a8\u5728proto/consignment\u76ee\u5f55\u4e2d\u8fd0\u884c\u6b64\u547d\u4ee4\u65f6\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u4e00\u4e9b\u65b0\u751f\u6210\u7684\u4ee3\u7801\u3002\u8fd9\u662f\u7531GRPC/Protobuf\u5e93\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\uff0c\u5141\u8bb8\u60a8\u5c06\u60a8\u7684Protobuf\u5b9a\u4e49\u4e0e\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u63a5\u53e3\u3002\n\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u73b0\u5728\u5c31\u628a\u5b83\u8bbe\u7f6e\u597d\u3002\u4eceshippy-service-signment\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efamain.go\u6587\u4ef6$touch main.go\u3002\n//Shippy-Service-Consignment/main.gopackage mainimport(&#34\uff1b\u4e0a\u4e0b\u6587&#34\uff1b&#34\uff1b\u65e5\u5fd7&#34\uff1b&#34\uff1bNET&#34\uff1b&#34\uff1bsync&#34\uff1b//\u5bfc\u5165\u751f\u6210\u7684\u534f\u8bae\u4ee3\u7801PB&#34\uff1bgithub.com/&lt\uff1bYourUserName&gt\uff1b/shippy-service-consignment/proto/consignment&#34\uff1b&#34\uff1bgoogle.golang.org/grpc&#34\uff1b&#34\uff1bgoogle.golang.org/grpc/\u53cd\u5c04&#34\uff1b)const(port=&#34\uff1b\uff1a50051&#34\uff1b)\u7c7b\u578b\u5b58\u50a8\u5e93\u63a5\u53e3{Create(*pb.Consignment)(*pb.Consignment\uff0cError)}//\u5b58\u50a8\u5e93-\u865a\u62df\u5b58\u50a8\u5e93\uff0c\u8fd9\u6a21\u62df\u4e86\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b58\u50a8//\u7684\u4f7f\u7528\u3002\u6211\u4eec\u7a0d\u540e\u5c06\u7528\u5b9e\u9645\u7684\u5b9e\u73b0\u66ff\u6362\u5b83\u3002type Repository struct{musync.RWMutex Consignments[]*pb.Consignment}//\u521b\u5efa\u65b0\u7684\u5bc4\u552e\u51fd\u6570(repo*Repository)create(\u5bc4\u552e*pb.Consignment)(*pb.Consignment\uff0cerror){repo.mu.Lock()update\uff1a=append(repo.consignments\uff0cconsignment)repo.consignments=\u66f4\u65b0\u7684repo.\u3002\u60a8\u53ef\u4ee5\u5728\u751f\u6210\u7684\u4ee3\u7801\u672c\u8eab\u4e2d\u68c0\u67e5\u63a5\u53e3//\u4ee5\u83b7\u53d6\u786e\u5207\u7684\u65b9\u6cd5\u7b7e\u540d\u7b49//\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u3002type service struct{repo pository}//CreateConsignment-\u6211\u4eec\u53ea\u5728\u6211\u4eec\u7684\u670d\u52a1\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c//\u8fd9\u662f\u4e00\u4e2aCreate\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e0a\u4e0b\u6587\u548c\u8bf7\u6c42\u4f5c\u4e3a//\u53c2\u6570\uff0c\u8fd9\u4e9b\u7531GRPC server.func(s*service)CreateConsignment(CTX context.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context)(*pb.Consignment)(*pb.Consignment)(*pb.\u3002err\uff1a=s.repo.Create(Req)if err\uff01=nil{return nil\uff0cerr}//\u8fd4\u56de\u4e0e\u6211\u4eec\u5728//protocol buf\u5b9a\u4e49\u4e2d\u521b\u5efa\u7684`Response`\u6d88\u606f\u5339\u914d\u7684\u6d88\u606f\u3002\u56de\u8f66(&A)\u3002pb.Response{Created\uff1atrue\uff0cConsignment\uff1aConsignment}\uff0cnil}func main(){repo\uff1a=&amp\uff1bRepository{}//\u8bbe\u7f6e\u6211\u4eec\u7684GRPC\u670d\u52a1\u5668\u3002LIS\uff0cerr\uff1a=net.Listen(&#34\uff1btcp&#34\uff1b\uff0cport)if err\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u4fa6\u542c\uff1a%v&#34\uff1b\uff0cerr)}s\uff1a=grpc.NewServer()//\u5411GRPC\u670d\u52a1\u5668\u6ce8\u518c\u6211\u4eec\u7684\u670d\u52a1\uff0c\u8fd9\u5c06\u628a\u6211\u4eec\u7684//\u5b9e\u73b0\u7ed1\u5b9a\u5230//Protobuf\u5b9a\u4e49\u7684\u81ea\u52a8\u751f\u6210\u7684\u63a5\u53e3\u4ee3\u7801\u4e2d\u3002pb.RegisterShippingServiceServer(s\uff0c&amp\uff1bservice{repo})//\u5728GRPC\u670d\u52a1\u5668\u4e0a\u6ce8\u518c\u53cd\u5c04\u670d\u52a1\u3002\u5982\u679cerr\uff1a=s.Serve(Lis)\uff1berr\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u63d0\u4f9b\u670d\u52a1\uff1a%v&#34\uff1b\uff0c\u5219\u5728\u7aef\u53e3&#34\uff1b\u4e0a\u8fd0\u884c)\uff0c\u5219refection.Register log.Println(&#34\uff1b\u5728\u7aef\u53e3\uff1a&#34\uff1b\u4e0a\u8fd0\u884c)\u3002\uff0c\u9519\u8bef)}}\u3002\n\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u4ee3\u7801\u4e2d\u7559\u4e0b\u7684\u6ce8\u91ca\u3002\u4f46\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u91cc\u6211\u4eec\u6b63\u5728\u521b\u5efaGRPC\u65b9\u6cd5\u4e0e\u4e4b\u4ea4\u4e92\u7684\u5b9e\u73b0\u903b\u8f91\uff0c\u4f7f\u7528\u751f\u6210\u7684\u683c\u5f0f\u5728\u7aef\u53e350051\u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684GRPC\u670d\u52a1\u5668\u3002\u8fd9\u5c31\u5bf9\u4e86\uff01\u529f\u80fd\u9f50\u5168\u7684GRPC\u670d\u52a1\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528$GO Run Main.Go\u8fd0\u884c\u6b64\u7a0b\u5e8f\uff0c\u4f46\u60a8\u4e0d\u4f1a\u770b\u5230\u4efb\u4f55\u5185\u5bb9\uff0c\u800c\u4e14\u60a8\u8fd8\u4e0d\u80fd\u4f7f\u7528\u5b83\u2026\u2026\u3002\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u6765\u67e5\u770b\u5b83\u7684\u8fd0\u884c\u60c5\u51b5\u3002\n\u6ce8\u610f\uff1a\u5728\u672c\u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u65b0\u7684go mod\u547d\u4ee4\u6765\u5904\u7406\u4f9d\u8d56\u5173\u7cfb\uff0c\u56e0\u6b64\u8bf7\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u662fGO 1.11\u53ca\u66f4\u9ad8\u7248\u672c\uff01\n\u73b0\u5728\u4f3c\u4e4e\u662f\u4f7f\u7528$go mod\u521d\u59cb\u5316\u6211\u4eec\u7684\u9879\u76ee\u5e76\u83b7\u53d6\u4f9d\u8d56\u9879\u7684\u597d\u65f6\u673a\uff1a\n\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u547d\u4ee4\u884c\u754c\u9762\uff0c\u5b83\u5c06\u63a5\u53d7\u4e00\u4e2aJSON\u5bc4\u552e\u6587\u4ef6\u5e76\u4e0e\u6211\u4eec\u7684GRPC\u670d\u52a1\u4ea4\u4e92\u3002\n\u73b0\u5728\u5728\u6211\u4eec\u7684\u6839\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\uff1aShippy-cli-Consignment\u7684\u9879\u76ee\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u6587\u4ef6\uff1a\n//shippy/shippy-cli-signment/main.gopackage mainimport(&#34\uff1b\u7f16\u7801/json&#34\uff1b&#34\uff1bio/ioutil&#34\uff1b&#34\uff1blog&#34\uff1b&#34\uff1bos&#34\uff1b&#34\uff1bContext&#34\uff1bPB&#34\uff1bgithub.com/&lt\uff1bYourUserName&gt\uff1b/shippy/shippy-service-consignment/proto/consignment&#34\uff1b&#34\uff1bgoogle.golang.org/grpc&#34\uff1b)const(\u5730\u5740=&#34\uff1b\u672c\u5730\u4e3b\u673a\uff1a50051&#34\uff1bdefaultFilename=&#34\uff1b\u5bc4\u552e.json&#34\uff1b)func parseFile(\u6587\u4ef6\u5b57\u7b26\u4e32)(*pb.Consignment\uff0cerror){var\u5bc4\u552e*pb.\u5bc4\u552e\u6570\u636e\uff0cerr\uff1a=ioutil.ReadFile(File)if err\uff01=nil{return nil\uff0cerr}json.Unmarshal(data\uff0c&amp\uff1b\u5bc4\u552e)\u8fd4\u56de\u5bc4\u552e\uff0cerrconn\uff0cerr\uff1a=grpc.Dial(address\uff0cgrpc.WithInsecure())if err\uff01=nil{log.Fatalf(&#34\uff1b\u672a\u8fde\u63a5\uff1a%v&#34\uff1b\uff0cerr)}\u63a8\u8fdf\u8fde\u63a5\u3002Close()client\uff1a=pb.NewShippingServiceClient(Conn)//\u8054\u7cfb\u670d\u52a1\u5668\u5e76\u6253\u5370\u5176\u54cd\u5e94\u3002file\uff1a=defaultFilename\u5982\u679clen(os.Args)&gt\uff1b1{file=os.Args[1]}\u5bc4\u552e\uff0cerr\uff1a=parseFile(File)\u5982\u679cerr\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u89e3\u6790\u6587\u4ef6\uff1a%v&#34\uff1b\uff0cerr)}r\uff0cerr\uff1a=client.CreateConsignment(context.Background()\uff0c\u5bc4\u552e)if err\uff01=Nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u95ee\u5019\uff1a%v&#34\uff1b\uff0cerr)}log.Printf(&#34\uff1b\u521b\u5efa\u65f6\u95f4\uff1a%t&#34\uff1b\uff0cr.Created)}\u3002\n5A.\u3002\u6211\u4eec\u5c06\u5feb\u901f\u66f4\u65b0Shippy-service-Consignment\u7684go.mod\u6587\u4ef6\uff0c\u4f7f\u5176\u6307\u5411\u672c\u5730\u5b58\u50a8\u5e93\uff0c\u800c\u4e0d\u662f\u5c1d\u8bd5\u4ece\u8fdc\u7a0b\u56de\u8d2d\u4e2d\u63d0\u53d6\u3002\u60a8\u53ef\u80fd\u5e0c\u671b\u5728\u751f\u4ea7\u4e2d\u5220\u9664\u5b83\uff0c\u4f46\u5e94\u8be5\u6d88\u9664\u4e00\u4e9b\u6df7\u6dc6\u548c\u672c\u5730\u8fd0\u884c\u7684\u65f6\u95f4\uff0c\u8fd9\u662f\u65b0\u7684Go mod API\u7684\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u529f\u80fd\uff1a\n{&#34\uff1bdescription&#34\uff1b\uff1a&#34\uff1b\u8fd9\u662f\u6d4b\u8bd5\u5bc4\u552e&#34\uff1b\uff0c&#34\uff1b\u91cd\u91cf&#34\uff1b\uff1a550\uff0c&#34\uff1b\u5bb9\u5668&#34\uff1b\uff1a[{&#34\uff1bCustomer_id&#34\uff1b\uff1a&#34\uff1bCustomer 001&#34\uff1b\uff0c&#34\uff1buser_id&#34\uff1b\uff1a&#34\uff1buser001&#34\uff1b\uff0c&#34\uff1bOrigin&#34\uff1b\uff1a&#34\uff1b\u66fc\u5f7b\u65af\u7279\uff0c\u82f1\u56fd&#34\uff1b}]\uff0c&#34\uff1bVEVER_ID&#34\uff1b\uff1a&#34\uff1bVEVEL001&#34\uff1b}\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u60a8\u5728Shippy-Consignment-service\u4e2d\u8fd0\u884c$go run main.go\uff0c\u7136\u540e\u5728\u5355\u72ec\u7684\u7ec8\u7aef\u7a97\u683c\u4e2d\u8fd0\u884c$go run main.go\u3002\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u4e00\u6761\u6d88\u606f\uff0c\u4e0a\u9762\u5199\u7740Created\uff1aTrue\u3002\u4f46\u662f\u6211\u4eec\u600e\u4e48\u624d\u80fd\u771f\u6b63\u68c0\u67e5\u5b83\u521b\u9020\u4e86\u4ec0\u4e48\u5462\uff1f\u8ba9\u6211\u4eec\u7528GetConsignments\u65b9\u6cd5\u66f4\u65b0\u6211\u4eec\u7684\u670d\u52a1\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u770b\u6211\u4eec\u521b\u5efa\u7684\u6240\u6709\u5bc4\u552e\u3002\n//shippy-service-consignment/proto/consignment/consignment.protosyntax=&#34\uff1bProto3&#34\uff1b\uff1bPackage Consignment\uff1bservice ShippingService{RPC CreateConsignment(Consignment)Returns(Response){}//\u521b\u5efa\u65b0\u65b9\u6cd5RPC GetConsignments(GetRequest)Returns(Response){}}Message Containment{String id=1\uff1bString description=2\uff1bint32 Weight=3\uff1bRepeated Container Containers=4\uff1bString VEVER_ID=5\uff1b}\u6d88\u606f\u5bb9\u5668{String ID=1\uff1bString Customer_\u3002}//\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u7684GET RequestMessage GetRequest{}\u6d88\u606f\u54cd\u5e94{bool Created=1\uff1b\u5bc4\u552e=2\uff1b//\u5728\u6211\u4eec\u7684\u901a\u7528\u54cd\u5e94\u6d88\u606f\u4e2d\u6dfb\u52a0\u4e86\u591a\u5143\u5bc4\u552e\u91cd\u590d\u5bc4\u552e=3\uff1b}\u3002\n\u56e0\u6b64\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u6211\u4eec\u7684\u670d\u52a1\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3aGetConsignments\u7684\u65b0\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u6682\u65f6\u4e0d\u5305\u542b\u4efb\u4f55\u5185\u5bb9\u7684\u65b0GetRequest\u3002\u6211\u4eec\u8fd8\u5728\u56de\u590d\u6d88\u606f\u4e2d\u6dfb\u52a0\u4e86\u5bc4\u552e\u5b57\u6bb5\u3002\u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u8fd9\u91cc\u7684\u7c7b\u578b\u5728\u5b9e\u9645\u7c7b\u578b\u4e4b\u524d\u6709\u91cd\u590d\u7684\u5173\u952e\u5b57\u3002\u6b63\u5982\u60a8\u53ef\u80fd\u5df2\u7ecf\u731c\u5230\u7684\uff0c\u8fd9\u4ec5\u4ec5\u610f\u5473\u7740\u5c06\u8be5\u5b57\u6bb5\u89c6\u4e3a\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u7ec4\u3002\n\u73b0\u5728\u4f7f\u7528\u524d\u9762\u63d0\u5230\u7684\u547d\u4ee4\u91cd\u65b0\u6784\u5efa\u60a8\u7684\u539f\u578b\u5b9a\u4e49\u3002\u73b0\u5728\uff0c\u518d\u6b21\u5c1d\u8bd5\u8fd0\u884c\u60a8\u7684\u670d\u52a1\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u9519\u8bef\uff1a*service do not implementate consignment.ShippingServiceServer(Missing GetConsignments Method)\u3002\n\u56e0\u4e3a\u6211\u4eec\u7684GRPC\u65b9\u6cd5\u7684\u5b9e\u73b0\u662f\u57fa\u4e8e\u5339\u914d\u7531protobuf\u5e93\u751f\u6210\u7684\u63a5\u53e3\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u786e\u4fdd\u6211\u4eec\u7684\u5b9e\u73b0\u4e0e\u6211\u4eec\u7684proto\u5b9a\u4e49\u76f8\u5339\u914d\u3002\n\u8f6f\u4ef6\u5305mainimport(&#34\uff1b\u4e0a\u4e0b\u6587&#34\uff1b\u65e5\u5fd7&#34\uff1b&#34\uff1bNET&#34\uff1b\u540c\u6b65&#34\uff1bPB&#34\uff1bgithub.com/&lt\uff1bYourUsername&gt\uff1b/shippy-service-consignment/proto/consignment&#34\uff1b&#34\uff1bgoogle.golang.org/grpc&#34\uff1b)const(\u7aef\u53e3=&#34\uff1b\uff1a50051&#34\uff1b)\u7c7b\u578b\u5b58\u50a8\u5e93\u63a5\u53e3{create(*pb.Consignment)(*pb.Consignment\uff0cerror)getall()[]*pb.Consignment}//\u5b58\u50a8\u5e93-\u865a\u62df\u5b58\u50a8\u5e93\uff0c\u8fd9\u6a21\u62df\u4e86\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b58\u50a8\u5e93//\u7684\u4f7f\u7528\u3002\u6211\u4eec&#39\uff1b\u7a0d\u540e\u6211\u5c06\u7528\u5b9e\u9645\u7684\u5b9e\u73b0\u66ff\u6362\u5b83\u3002type Repository struct{musync.RWMutex Consignments[]*pb.Consignment}//\u521b\u5efa\u65b0\u7684\u5bc4\u552e\u51fd\u6570(repo*Repository)create(\u5bc4\u552e*pb.Consignment)(*pb.Consignment\uff0cerror){repo.mu.Lock()update\uff1a=append(repo.consignments\uff0cconsignment)repo.consignments=\u66f4\u65b0\u7684repo.mu.Unlock(\u3002nil}//getall signmentsfunc(repo*Repository)getall()[]*pb.Consignment{return repo.consignments}//\u670d\u52a1\u5e94\u8be5\u5b9e\u73b0\u6240\u6709\u65b9\u6cd5\u6765\u6ee1\u8db3\u6211\u4eec\u5728\u534f\u8bae\u4e2d\u5b9a\u4e49\u7684\u670d\u52a1\u3002\u60a8\u53ef\u4ee5\u5728\u751f\u6210\u7684\u4ee3\u7801\u672c\u8eab\u4e2d\u68c0\u67e5\u63a5\u53e3//\u4ee5\u83b7\u53d6\u786e\u5207\u7684\u65b9\u6cd5\u7b7e\u540d\u7b49//\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u3002type service struct{repo pository}//CreateConsignment-\u6211\u4eec\u53ea\u5728\u6211\u4eec\u7684\u670d\u52a1\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c//\u8fd9\u662f\u4e00\u4e2aCreate\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e0a\u4e0b\u6587\u548c\u8bf7\u6c42\u4f5c\u4e3a//\u53c2\u6570\uff0c\u8fd9\u4e9b\u7531GRPC server.func(s*service)CreateConsignment(CTX context.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context)(*pb.Consignment)(*pb.Consignment)(*pb.\u3002err\uff1a=s.repo.Create(Req)if err\uff01=nil{return nil\uff0cerr}//\u8fd4\u56de\u4e0e\u6211\u4eec\u5728//protocol buf\u5b9a\u4e49\u4e2d\u521b\u5efa\u7684`Response`\u6d88\u606f\u5339\u914d\u7684\u6d88\u606f\u3002\u56de\u8f66(&A)\u3002pb.Response{Created\uff1atrue\uff0cConsignment\uff1aConsignment}\uff0cnil}//GetConsignments-func(s*service)GetConsignments(CTX context.Context\uff0creq*pb.GetRequest)(*pb.Response\uff0cError){Consignments\uff1a=s.repo.GetAll()return&amp\uff1bpb.Response{Consignments\uff1aConsignments}\uff0cnil}func main(){resignments\uff1aconsignments}\uff0cnil}func main(){resignments\uff1a=s.repo.GetAll()return&amp\uff1bpb.Response{consignments\uff1aconsignments}\uff0cnil}func main(){recLIS\uff0cerr\uff1a=net.Listen(&#34\uff1btcp&#34\uff1b\uff0cport)\u5982\u679cerr\uff01=nil{log.Fatalf(&#34\uff1b\u672a\u80fd\u4fa6\u542c\uff1a%v&#34\uff1b\uff0cerr)}s\uff1a=grpc.NewServer()//\u5411GRPC\u670d\u52a1\u5668\u6ce8\u518c\u6211\u4eec\u7684\u670d\u52a1\uff0c\u8fd9\u5c06\u628a\u6211\u4eec\u7684//\u5b9e\u73b0\u7ed1\u5b9a\u5230//protocol buf\u5b9a\u4e49\u7684\u81ea\u52a8\u751f\u6210\u7684\u63a5\u53e3\u4ee3\u7801\u4e2d\u3002pb.RegisterShippingServiceServer(s\uff0c&amp\uff1bservice{repo})log.Println(&#34\uff1b\u5728\u7aef\u53e3\uff1a&#34\uff1b\uff0cport\u4e0a\u8fd0\u884c)\u5982\u679cerr\uff1a=s.Serve(Lis)\uff1berr\uff01=nil{log.Fatalf(&#34\uff1b\u670d\u52a1\u5931\u8d25\uff1a%v&#34\uff1b\uff0c\u9519\u8bef)}}\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5305\u542b\u4e86\u65b0\u7684GetConsignments\u65b9\u6cd5\uff0c\u66f4\u65b0\u4e86\u5b58\u50a8\u5e93\u548c\u63a5\u53e3\uff0c\u5e76\u6ee1\u8db3\u4e86PROTO\u5b9a\u4e49\u751f\u6210\u7684\u63a5\u53e3\u3002\u5982\u679c\u60a8\u8fd0\u884c$go run main\u3002\u518d\u6b21\u8fd0\u884c\uff0c\u5e94\u8be5\u53ef\u4ee5\u518d\u6b21\u8fd0\u884c\u3002\n\u8ba9\u6211\u4eec\u66f4\u65b0CLI\u5de5\u5177\uff0c\u4ee5\u5305\u62ec\u8c03\u7528\u6b64\u65b9\u6cd5\u5e76\u5217\u51fa\u6211\u4eec\u7684\u5bc4\u552e\u8d27\u7269\u7684\u529f\u80fd\uff1a\nFunc Main(){.getall\uff0cerr\uff1a=client.GetConsignments(context.Background()\uff0c&amp\uff1bpb.GetRequest{})if err\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u5217\u51fa\u53d1\u8d27\uff1a%v&#34\uff1b\uff0cerr)}for_\uff0cv\uff1a=range getAll.Consignments{log.Println(V)}}\u3002\n\u5728Main\u51fd\u6570\u7684\u6700\u5e95\u90e8\uff0c\u5728\u6211\u4eec\u6ce8\u9500&#34\uff1bCreated\uff1aSuccess\u6d88\u606f\u7684\u4e0b\u9762\uff0c\u8ffd\u52a0\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u7136\u540e\u91cd\u65b0\u8fd0\u884c$go run cli.go\u3002\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u5bc4\u552e\uff0c\u7136\u540e\u5728\u4e4b\u540e\u8c03\u7528GetConsignments\u3002\u8fd0\u884c\u8be5\u5217\u8868\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u8be5\u5217\u8868\u8d8a\u591a\u3002\n\u6ce8\u610f\uff1a\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0c\u6211\u6709\u65f6\u53ef\u80fd\u4f1a\u7f16\u6821\u4ee5\u524d\u7528\u2026\u2026\u7f16\u5199\u7684\u4ee3\u7801\u3002\u8868\u793a\u6ca1\u6709\u5bf9\u524d\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\uff0c\u4f46\u6dfb\u52a0\u6216\u9644\u52a0\u4e86\u989d\u5916\u7684\u884c\u3002\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528Protobuf\u548cGRPC\u6210\u529f\u521b\u5efa\u4e86\u4e00\u4e2a\u5fae\u670d\u52a1\u548c\u4e00\u4e2a\u4e0e\u5176\u4ea4\u4e92\u7684\u5ba2\u6237\u7aef\u3002\n\u672c\u7cfb\u5217\u7684\u4e0b\u4e00\u90e8\u5206\u5c06\u56f4\u7ed5\u96c6\u6210MICRO\u5c55\u5f00\uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u57fa\u4e8eGRPC\u7684\u5fae\u670d\u52a1\u7684\u5f3a\u5927\u6846\u67b6\u3002\u6211\u4eec\u8fd8\u5c06\u521b\u5efa\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u670d\u52a1\uff0c\u5373\u96c6\u88c5\u7bb1\u670d\u52a1\u3002\u8bf4\u5230\u5bb9\u5668\uff0c\u8ba9\u4eba\u56f0\u60d1\u7684\u662f\uff0c\u5728\u672c\u7cfb\u5217\u7684\u4e0b\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u8fd8\u5c06\u7814\u7a76\u5728Docker\u5bb9\u5668\u4e2d\u8fd0\u884c\u6211\u4eec\u7684\u670d\u52a1\u3002\n\u4efb\u4f55\u5173\u4e8e\u8fd9\u7bc7\u6587\u7ae0\u7684\u9519\u8bef\u3001\u9519\u8bef\u6216\u53cd\u9988\uff0c\u6216\u8005\u4efb\u4f55\u60a8\u8ba4\u4e3a\u6709\u5e2e\u52a9\u7684\u4e1c\u897f\uff0c\u8bf7\u7ed9\u6211\u53d1\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\n\u5982\u679c\u60a8\u89c9\u5f97\u672c\u7cfb\u5217\u5f88\u6709\u7528\uff0c\u5e76\u4e14\u60a8\u4f7f\u7528\u4e86\u5e7f\u544a\u62e6\u622a\u7a0b\u5e8f(\u8c01\u4f1a\u8d23\u602a\u60a8)\u3002\u8bf7\u8003\u8651\u629b\u7ed9\u6211\u51e0\u82f1\u9551\uff0c\u4ee5\u8865\u507f\u6211\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u3002\u5e72\u676f!\u3002https://monzo.me/ewanvalentine", "note_en": "This is a ten part series on writing microservices in Golang. Making use of protobuf and gRPC as the underlying transport protocol. Why? Because it took me a long time to figure this out and settle on a solution that was clear and concise, and I wanted to share what I&#39;d learnt about creating, testing and deploying microservices end-to-end with others new to the scene.\n In this tutorial, we will just be covering some of the basic concepts, terminology, and creating our first microservice in its crudest form.\n   The stack we will end up with will be: golang, mongodb, grpc, docker, Google Cloud, Kubernetes, NATS, CircleCI, Terraform and go-micro.\n        We will be building perhaps the most generic microservice example you can think of, a shipping container management platform! A blog felt too simple a use-case for microservices, I wanted something that could really show-off the separation of complexity. So this felt like a good challenge!\n   In a traditional monolith application, all of an organisations features are written into one single application. Sometime&#39;s they&#39;re grouped by their type, such as controllers, entities, factories etc. Other times, perhaps in larger application, features are separated by concern or by feature. So you may have an auth package, a friends package, and an articles package. Which may contain their own set of factories, services, repositories, models etc. But ultimately they are grouped together within a single codebase.\n A microservice is the concept of taking that second approach slightly further, and separating those concerns into their own, independent runnable codebase.\n   Complexity - Splitting features into microservices allows you to split code into smaller chunks. It harks back to the old unix adage of &#39;doing one thing well&#39;. There&#39;s a tendency with monoliths to allow domains to become tightly coupled with one another, and concerns to become blurred. This leads to riskier, more complex updates, potentially more bugs and more difficult integrations.\n Scale - In a monolith, certain areas of code may be used more frequently than others. With a monolith, you can only scale the entire codebase. So if your auth service is hit constantly, you need to scale the entire codebase to cope with the load for just your auth service.\n With microservices, that separation allows you to scale individual services individually. Meaning more efficient horizontal scaling. Which works very nicely with cloud computing with multiple cores and regions etc.\n Nginx wrote a fantastic series on the various concepts of microservices,  please give this a read.\n   Microservices are supported by just about all languages, after all, microservices are a concept rather than a specific framework or tool. That being said, some languages are better suited and, or have better support for microservices than others. One language with great support is Golang.\n Golang is very light-weight, very fast, and has a fantastic support for concurrency, which is a powerful capability when running across several machines and cores.\n  Finally, there is a fantastic microservice framework available for Go called go-micro. Which we will be using in this series.\n   Because microservices are split out into separate codebases, one important issue with microservices, is communication. In a monolith communication is not an issue, as you call code directly from elsewhere in your codebase. However, microservices don&#39;t have that ability, as they live in separate places. So you need a way in which these independent services can talk to one another with as little latency as possible.\n Here, you could use traditional REST, such as JSON or XML over http. However, the problem with this approach is that service A has to encode its data into JSON/XML, send a large string over the wire, to service B, which then has to decode this message from JSON, back into code. This has potential overhead problems at scale. Whilst you&#39;re forced to adopt this form of communication for web browsers, services can just about talk to each other in any format they wish.\n In comes  gRPC.  gRPC is a light-weight binary based RPC communication protocol brought out by Google. That&#39;s a lot of words, so let&#39;s dissect that a little. gRPC uses binary as its core data format. In our RESTful example, using JSON, you would be sending a string over http. Strings contain bulky metadata about its encoding format; about its length, its content format and various other bits and pieces. This is so that a server can inform a traditionally browser based client what to expect. We don&#39;t really need all of this when communicating between two services. So we can use cold hard binary, which is much more light-weight. gRPC uses the new HTTP 2.0 spec, which allows for the use of binary data. It even allows for bi-directional streaming, which is pretty cool! HTTP 2 is pretty fundamental to how gRPC works. For more on HTTP 2,  take a look at this fantastic post from Google.\n But how can we do anything with binary data? Well, gRPC has an interchange DSL called protobuf. Protobuf allows you to define an interface to your service using a developer friendly format.\n  Create a new root directory, I&#39;ve called mine  shippy. CD into your new root directory and create the following folder and file:  shippy-service-consignment/proto/consignment/consignment.proto from the root directory of our repo.\n  For the time being, I&#39;m housing all of our services in a single repo. This is known as a mono-repo. This is mostly to keep things simple for this tutorial. There are many arguments for and against using mono-repos, which I won&#39;t go into here. You could house all of these services and components in separate repos, there are many good arguments for that approach also.\n    // shippy-service-consignment/proto/consignment/consignment.protosyntax = &#34;proto3&#34;;package consignment; service ShippingService { rpc CreateConsignment(Consignment) returns (Response) {}}message Consignment { string id = 1; string description = 2; int32 weight = 3; repeated Container containers = 4; string vessel_id = 5;}message Container { string id = 1; string customer_id = 2; string origin = 3; string user_id = 4;}message Response { bool created = 1; Consignment consignment = 2;}\n  This is a really basic example, but there are a few things going on here. First of all, you define your service, this should contain the methods that you wish to expose to other services. Then you define your message types, these are effectively your data structure. Protobuf is statically typed, and you can define custom types, as we have done with  Container. Messages are themselves just custom types.\n There are two libraries at work here, messages are handled by protobuf, and the service we defined is handled by a gRPC protobuf plugin, which compiles code to interact with these types, i.e the  service part of our proto file.\n This protobuf definition is then ran through a CLI to generate the code to interface this binary data and your functionality.\n   You have your GOROOT set, or your go binaries location set in your host path.\n  This will call the protoc library, which is responsible for compiling your protobuf definition into code. We also specify the use of the grpc plugin, as well as the build context and the output path.\n Now when you run this command in your  proto/consignment directory, you should see some newly generated code. This is code automatically generated by the gRPC/protobuf libraries to allow you to interface your protobuf definition to your own code.\n  So let&#39;s set that up now. Create your main.go file  $ touch main.go from the  shippy-service-consignment project root.\n // shippy-service-consignment/main.gopackage mainimport (\t&#34;context&#34;\t&#34;log&#34;\t&#34;net&#34;\t&#34;sync&#34;\t// Import the generated protobuf code\tpb &#34;github.com/&lt;YourUserName&gt;/shippy-service-consignment/proto/consignment&#34;\t&#34;google.golang.org/grpc&#34;\t&#34;google.golang.org/grpc/reflection&#34;)const (\tport = &#34;:50051&#34;)type repository interface {\tCreate(*pb.Consignment) (*pb.Consignment, error)}// Repository - Dummy repository, this simulates the use of a datastore// of some kind. We&#39;ll replace this with a real implementation later on.type Repository struct {\tmu sync.RWMutex\tconsignments []*pb.Consignment}// Create a new consignmentfunc (repo *Repository) Create(consignment *pb.Consignment) (*pb.Consignment, error) {\trepo.mu.Lock()\tupdated := append(repo.consignments, consignment)\trepo.consignments = updated\trepo.mu.Unlock()\treturn consignment, nil}// Service should implement all of the methods to satisfy the service// we defined in our protobuf definition. You can check the interface// in the generated code itself for the exact method signatures etc// to give you a better idea.type service struct {\trepo repository}// CreateConsignment - we created just one method on our service,// which is a create method, which takes a context and a request as an// argument, these are handled by the gRPC server.func (s *service) CreateConsignment(ctx context.Context, req *pb.Consignment) (*pb.Response, error) {\t// Save our consignment\tconsignment, err := s.repo.Create(req)\tif err != nil {\t\treturn nil, err\t}\t// Return matching the `Response` message we created in our\t// protobuf definition.\treturn &amp;pb.Response{Created: true, Consignment: consignment}, nil}func main() {\trepo := &amp;Repository{}\t// Set-up our gRPC server.\tlis, err := net.Listen(&#34;tcp&#34;, port)\tif err != nil {\t\tlog.Fatalf(&#34;failed to listen: %v&#34;, err)\t}\ts := grpc.NewServer()\t// Register our service with the gRPC server, this will tie our\t// implementation into the auto-generated interface code for our\t// protobuf definition.\tpb.RegisterShippingServiceServer(s, &amp;service{repo})\t// Register reflection service on gRPC server.\treflection.Register(s)\tlog.Println(&#34;Running on port:&#34;, port)\tif err := s.Serve(lis); err != nil {\t\tlog.Fatalf(&#34;failed to serve: %v&#34;, err)\t}}\n Please read the comments left in the code carefully. But in summary, here we are creating the implementation logic which our gRPC methods interface with, using the generated formats, creating a new gRPC server on port 50051. There you have it! A fully functional gRPC service. You can run this with  $ go run main.go, but you won&#39;t see anything, and you won&#39;t be able to use it yet... So let&#39;s create a client to see it in action.\n Note: we&#39;re using the new go mod command to deal with dependencies throughout this series, so ensure you&#39;re using go 1.11 and over!\n Now seems like a good time to use  $ go mod to init our project and fetch our dependencies:\n  Let&#39;s create a command line interface, which will take a JSON consignment file and interact with our gRPC service.\n Now create a project called in our root:  shippy-cli-consignment, and create a new main file:\n // shippy/shippy-cli-consignment/main.gopackage mainimport (\t&#34;encoding/json&#34;\t&#34;io/ioutil&#34;\t&#34;log&#34;\t&#34;os&#34;\t&#34;context&#34;\tpb &#34;github.com/&lt;YourUserName&gt;/shippy/shippy-service-consignment/proto/consignment&#34;\t&#34;google.golang.org/grpc&#34;)const (\taddress = &#34;localhost:50051&#34;\tdefaultFilename = &#34;consignment.json&#34;)func parseFile(file string) (*pb.Consignment, error) {\tvar consignment *pb.Consignment\tdata, err := ioutil.ReadFile(file)\tif err != nil {\t\treturn nil, err\t}\tjson.Unmarshal(data, &amp;consignment)\treturn consignment, err}func main() {\t// Set up a connection to the server.\tconn, err := grpc.Dial(address, grpc.WithInsecure())\tif err != nil {\t\tlog.Fatalf(&#34;Did not connect: %v&#34;, err)\t}\tdefer conn.Close()\tclient := pb.NewShippingServiceClient(conn)\t// Contact the server and print out its response.\tfile := defaultFilename\tif len(os.Args) &gt; 1 {\t\tfile = os.Args[1]\t}\tconsignment, err := parseFile(file)\tif err != nil {\t\tlog.Fatalf(&#34;Could not parse file: %v&#34;, err)\t}\tr, err := client.CreateConsignment(context.Background(), consignment)\tif err != nil {\t\tlog.Fatalf(&#34;Could not greet: %v&#34;, err)\t}\tlog.Printf(&#34;Created: %t&#34;, r.Created)}\n 5a. We&#39;re going to quickly update our shippy-service-consignment&#39;s  go.mod file, to point to our local repository, instead of trying to pull from a remote repo. You will want to remove this in production, but should remove some confusion and time running locally, this is a really useful feature of the new go mod API:\n    { &#34;description&#34;: &#34;This is a test consignment&#34;, &#34;weight&#34;: 550, &#34;containers&#34;: [ { &#34;customer_id&#34;: &#34;cust001&#34;, &#34;user_id&#34;: &#34;user001&#34;, &#34;origin&#34;: &#34;Manchester, United Kingdom&#34; } ], &#34;vessel_id&#34;: &#34;vessel001&#34;}\n  Now if you run  $ go run main.go in  shippy-consignment-service, and then in a separate terminal pane, run  $ go run main.go. You should see a message saying  Created: true. But how can we really check it has created something? Let&#39;s update our service with a  GetConsignments method, so that we can view all of our created consignments.\n  // shippy-service-consignment/proto/consignment/consignment.protosyntax = &#34;proto3&#34;;package consignment;service ShippingService { rpc CreateConsignment(Consignment) returns (Response) {} // Created a new method rpc GetConsignments(GetRequest) returns (Response) {}}message Consignment { string id = 1; string description = 2; int32 weight = 3; repeated Container containers = 4; string vessel_id = 5;}message Container { string id = 1; string customer_id = 2; string origin = 3; string user_id = 4;}// Created a blank get requestmessage GetRequest {}message Response { bool created = 1; Consignment consignment = 2; // Added a pluralised consignment to our generic response message repeated Consignment consignments = 3;}\n So here we&#39;ve created a new method on our service called  GetConsignments, we have also created a new  GetRequest which doesn&#39;t contain anything for the time being. We&#39;ve also added a  consignments field to our response message. You will notice the type here has the keyword  repeated before the actual type. This, as you&#39;d probably have guessed, just means treat this field as an array of these types.\n Now re-build your proto definition again with the command mentioned earlier. Now, try running your service again, you should see an error similar to:  *service does not implement consignment.ShippingServiceServer (missing GetConsignments method).\n Because the implementation of our gRPC methods, are based on matching the interface generated by the protobuf library, we need to ensure our implementation matches our proto definition.\n  package mainimport (\t&#34;context&#34;\t&#34;log&#34;\t&#34;net&#34;\t&#34;sync&#34;\tpb &#34;github.com/&lt;YourUsername&gt;/shippy-service-consignment/proto/consignment&#34;\t&#34;google.golang.org/grpc&#34;)const (\tport = &#34;:50051&#34;)type repository interface {\tCreate(*pb.Consignment) (*pb.Consignment, error)\tGetAll() []*pb.Consignment}// Repository - Dummy repository, this simulates the use of a datastore// of some kind. We&#39;ll replace this with a real implementation later on.type Repository struct {\tmu sync.RWMutex\tconsignments []*pb.Consignment}// Create a new consignmentfunc (repo *Repository) Create(consignment *pb.Consignment) (*pb.Consignment, error) {\trepo.mu.Lock()\tupdated := append(repo.consignments, consignment)\trepo.consignments = updated\trepo.mu.Unlock()\treturn consignment, nil}// GetAll consignmentsfunc (repo *Repository) GetAll() []*pb.Consignment {\treturn repo.consignments}// Service should implement all of the methods to satisfy the service// we defined in our protobuf definition. You can check the interface// in the generated code itself for the exact method signatures etc// to give you a better idea.type service struct {\trepo repository}// CreateConsignment - we created just one method on our service,// which is a create method, which takes a context and a request as an// argument, these are handled by the gRPC server.func (s *service) CreateConsignment(ctx context.Context, req *pb.Consignment) (*pb.Response, error) {\t// Save our consignment\tconsignment, err := s.repo.Create(req)\tif err != nil {\t\treturn nil, err\t}\t// Return matching the `Response` message we created in our\t// protobuf definition.\treturn &amp;pb.Response{Created: true, Consignment: consignment}, nil}// GetConsignments -func (s *service) GetConsignments(ctx context.Context, req *pb.GetRequest) (*pb.Response, error) {\tconsignments := s.repo.GetAll()\treturn &amp;pb.Response{Consignments: consignments}, nil}func main() {\trepo := &amp;Repository{}\t// Set-up our gRPC server.\tlis, err := net.Listen(&#34;tcp&#34;, port)\tif err != nil {\t\tlog.Fatalf(&#34;failed to listen: %v&#34;, err)\t}\ts := grpc.NewServer()\t// Register our service with the gRPC server, this will tie our\t// implementation into the auto-generated interface code for our\t// protobuf definition.\tpb.RegisterShippingServiceServer(s, &amp;service{repo})\tlog.Println(&#34;Running on port:&#34;, port)\tif err := s.Serve(lis); err != nil {\t\tlog.Fatalf(&#34;failed to serve: %v&#34;, err)\t}}\n Here, we have included our new  GetConsignments method, updated our repository and interface and that satisfies the interface generated by the proto definition. If you run  $ go run main.go again, this should work again.\n Let&#39;s update our cli tool to include the ability to call this method and list our consignments:\n func main() { ... \tgetAll, err := client.GetConsignments(context.Background(), &amp;pb.GetRequest{})\tif err != nil {\t\tlog.Fatalf(&#34;Could not list consignments: %v&#34;, err)\t}\tfor _, v := range getAll.Consignments {\t\tlog.Println(v)\t}}\n  At the very bottom of our main function, underneath where we log out our &#34;Created: success&#34; message, append the code above, and re-run  $ go run cli.go. This will create a consignment, then call  GetConsignments after. you should see this list grow the more times you run it.\n Note: for brevity, I may sometimes redact code previously written with a ... to denote no changes were made to the previous code, but additional lines were added or appended.\n So there you have it, we have successfully created a microservice and a client to interact with it, using protobuf and gRPC.\n The next part in this series will be around integrating  micro, which is a powerful framework for creating gRPC based microservices. We will also create our second service, our container service. Speaking of containers, just to confuse matters, we will also look at running our services in Docker containers in the next part in this series.\n  Any bugs, mistakes, or feedback on this article, or anything you would find helpful, please  drop me an email.\n   If you are finding this series useful, and you use an ad-blocker (who can blame you). Please consider chucking me a couple of quid for my time and effort. Cheers!  https://monzo.me/ewanvalentine", "posttime": "2020-06-12 20:30:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,golang,\u670d\u52a1", "title": "Golang\u7684\u5fae\u578b\u670d\u52a1-\u7b2c1\u90e8\u5206-2020\u66f4\u65b0", "title_en": "Microservices in Golang \u2013 Part 1 \u2013 2020 Updated", "transed": 1, "url": "https://ewanvalentine.io/microservices-in-golang-part-1/", "via": "", "real_tags": ["2020", "golang", "\u670d\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "264af6db1dfca4f07eeb6985d94b2a1b.png", "infoid": 1006276, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u4e2a\u901a\u8fc7\u62bd\u8c61\u548c\u590d\u6742\u7684\u788e\u7247\u7740\u8272\u5668\u4e16\u754c\u7684\u6e29\u548c\u7684\u4e00\u6b65\u4e00\u6b65\u7684\u6307\u5357\u3002\n\u5e15\u7279\u91cc\u897f\u5965\u00b7\u5188\u8428\u96f7\u65af\u00b7\u7ef4\u6c83(1982\u5e74\uff0c\u963f\u6839\u5ef7\u5e03\u5b9c\u8bfa\u65af\u827e\u5229\u65af)\u662f\u7ebd\u7ea6\u7684\u827a\u672f\u5bb6\u548c\u5f00\u53d1\u5546\u3002\u4ed6\u63a2\u7d22\u6709\u673a\u4e0e\u5408\u6210\u3001\u6a21\u62df\u4e0e\u6570\u5b57\u3001\u4e2a\u4eba\u4e0e\u96c6\u4f53\u4e4b\u95f4\u7684\u95f4\u9699\u7a7a\u95f4\u3002\u5728\u4ed6\u7684\u5de5\u4f5c\u4e2d\uff0c\u4ed6\u5c06\u4ee3\u7801\u4f5c\u4e3a\u4e00\u79cd\u5bcc\u6709\u8868\u73b0\u529b\u7684\u8bed\u8a00\uff0c\u76ee\u7684\u662f\u5171\u540c\u5f00\u53d1\u66f4\u597d\u7684\u4ee3\u7801\u3002\n\u5e15\u7279\u91cc\u897f\u5965\u7814\u7a76\u5e76\u5b9e\u8df5\u4e86\u5fc3\u7406\u7597\u6cd5\u548c\u8868\u73b0\u529b\u827a\u672f\u7597\u6cd5\u3002\u4ed6\u62e5\u6709\u5e15\u68ee\u65af\u65b0\u5b66\u6821(Parsons The New School)\u7684\u8bbe\u8ba1\u4e0e\u653e\u5927\u6280\u672f\u7855\u58eb\u5b66\u4f4d\uff0c\u73b0\u5728\u4ed6\u5728\u90a3\u91cc\u4efb\u6559\u3002\u76ee\u524d\uff0c\u4ed6\u5728Mapzen\u62c5\u4efb\u56fe\u5f62\u5de5\u7a0b\u5e08\uff0c\u5236\u4f5c\u5f00\u6e90\u5730\u56fe\u5de5\u5177\u3002\nJen Lowe\u662fDatatling\u7684\u4e00\u540d\u72ec\u7acb\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u6570\u636e\u4f20\u64ad\u8005\uff0c\u5979\u5c06\u4eba+\u6570\u5b57+\u6587\u5b57\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5979\u4efb\u6559\u4e8eSVA\u7684\u793e\u4f1a\u521b\u65b0\u8bbe\u8ba1\u9879\u76ee\uff0c\u4e0e\u4eba\u5171\u540c\u521b\u529e\u4e86\u8bd7\u610f\u8ba1\u7b97\u5b66\u9662\uff0c\u5728\u7ebd\u7ea6\u5927\u5b66ITP\u6559\u6388\u827a\u672f\u5bb6\u6570\u5b66\uff0c\u5728\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u7a7a\u95f4\u4fe1\u606f\u8bbe\u8ba1\u5b9e\u9a8c\u5ba4\u8fdb\u884c\u7814\u7a76\uff0c\u5e76\u5728\u767d\u5bab\u79d1\u6280\u653f\u7b56\u529e\u516c\u5ba4\u8d21\u732e\u4e86\u4e00\u4e9b\u60f3\u6cd5\u3002\u5979\u5728SXSW\u548cEyeo\u6f14\u8bb2\u3002\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\u548c\u201c\u5feb\u901f\u516c\u53f8\u201d\u5bf9\u5979\u7684\u5de5\u4f5c\u8fdb\u884c\u4e86\u62a5\u9053\u3002\u5979\u7684\u7814\u7a76\u3001\u5199\u4f5c\u548c\u6f14\u8bb2\u63a2\u7d22\u4e86\u6570\u636e\u548c\u6280\u672f\u5728\u793e\u4f1a\u4e2d\u7684\u524d\u666f\u548c\u5f71\u54cd\u3002\u5979\u62e5\u6709\u5e94\u7528\u6570\u5b66\u5b66\u58eb\u5b66\u4f4d\u548c\u4fe1\u606f\u79d1\u5b66\u7855\u58eb\u5b66\u4f4d\u3002\u5979\u7ecf\u5e38\u662f\u5bf9\u7acb\u7684\uff0c\u5979\u603b\u662f\u7ad9\u5728\u7231\u7684\u4e00\u8fb9\u3002\n\u611f\u8c22Yoneda(Kynd)\u3001Nicolas Barradeau\u3001Karim Naaji\u63d0\u4f9b\u7684\u652f\u6301\u3001\u597d\u7684\u60f3\u6cd5\u548c\u4ee3\u7801\u3002\n\u611f\u8c22\u6bcf\u4e00\u4f4d\u76f8\u4fe1\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e3a\u4fee\u590d\u6216\u6350\u8d60\u505a\u51fa\u8d21\u732e\u7684\u4eba\u3002", "note_en": "This is a gentle step-by-step guide through the abstract and complex universe of Fragment Shaders.\n     Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) is a New York based artist and developer. He explores interstitial spaces between organic and synthetic, analog and digital, individual and collective. In his work he uses code as an expressive language with the intention of developing a better together.\n Patricio studied and practiced psychotherapy and expressive art therapy. He holds an MFA in Design &amp; Technology from Parsons The New School, where he now teaches. Currently he works as a Graphic Engineer at Mapzen making openSource mapping tools.\n  Jen Lowe is an independent data scientist and data communicator at Datatelling where she brings together people + numbers + words. She teaches in SVA&#39;s Design for Social Innovation program, cofounded the School for Poetic Computation, taught Math for Artists at NYU ITP, researched at the Spatial Information Design Lab at Columbia University, and contributed ideas at the White House Office of Science and Technology Policy. She&#39;s spoken at SXSW and Eyeo. Her work has been covered by The New York Times and Fast Company. Her research, writing, and speaking explore the promises and implications of data and technology in society. She has a B.S. in Applied Math and a Master&#39;s in Information Science. Often oppositional, she&#39;s always on the side of love.\n    Thanks  Kenichi Yoneda (Kynd),  Nicolas Barradeau,  Karim Naaji for contributing with support, good ideas and code.\n           Thanks to everyone who has believed in this project and  contributed with fixes or donations.", "posttime": "2020-06-12 20:13:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "book,\u8bbe\u8ba1", "title": "\u201c\u7740\u8272\u4e4b\u4e66\u201d(The Book Of Shaders)", "title_en": "The Book of Shaders", "transed": 1, "url": "https://thebookofshaders.com/", "via": "", "real_tags": ["book", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "6c52de644c06b6536f2481f1da5aaa06.jpg", "infoid": 1006275, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f6f\u4ef6\u754c\u6b63\u5728\u53d1\u751f\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\uff1a\u5b83\u6b63\u5728\u6162\u6162\u53d8\u5f97\u66f4\u7cdf\u3002\u4e0d\u662f\u6240\u6709\u7684\u8f6f\u4ef6\uff0c\u4f46\u662f\u5f88\u591a\u8f6f\u4ef6\u3002\u4e0e\u51e0\u5e74\u524d\u76f8\u6bd4\uff0c\u5b83\u53d8\u5f97\u66f4\u52a0\u8fdf\u7f13\uff0c\u53cd\u5e94\u66f4\u4e0d\u7075\u654f\uff0c\u53ef\u9760\u6027\u4e5f\u7565\u6709\u4e0b\u964d\u3002\n\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u8fd9\u662f\u5938\u5f20\u7684\u3002\u5ba2\u89c2\u5730\u8bf4\uff0c\u6211\u4eec\u4ece\u6765\u6ca1\u6709\u7528\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u3001\u7b14\u8bb0\u672c\u7535\u8111\u548c\u5e73\u677f\u7535\u8111\u505a\u8fc7\u8fd9\u4e48\u591a\u3001\u8fd9\u4e48\u5bb9\u6613\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u4ece\u672a\u50cf\u73b0\u5728\u8fd9\u6837\u5bb9\u6613\u5730\u5728\u66f4\u591a\u5730\u65b9\u4e4b\u95f4\u63a8\u9001\u66f4\u591a\u6570\u636e\u3002\u4f46\u662f\uff0c\u867d\u7136\u6211\u63d0\u5230\u7684\u6f5c\u4f0f\u7684\u201c\u6076\u5316\u201d\u53ea\u662f\u90e8\u5206\u5728\u5de5\u7a0b\u65b9\u9762\uff0c\u4f46\u5b83\u66f4\u591a\u5730\u843d\u5728\u66f4\u4e3b\u89c2\u7684\u3001\u66f4\u5de7\u5999\u7684\u65b9\u9762\uff0c\u4f7f\u5176\u66f4\u52a0\u4ee4\u4eba\u62c5\u5fe7\u3002\n\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u5173\u5fc3\u8fd9\u4ef6\u4e8b\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u9192\u7740\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u53d1\u751f\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u8303\u56f4\u5185\u3002\u8fd9\u4e00\u4e8b\u5b9e\u6700\u8fd1\u88abCOVID\u5927\u6d41\u884c\u653e\u5927\u4e86\u3002\n\u6211\u8ba4\u4e3a\uff0c\u6570\u767e\u4e07\u4eba(\u5982\u679c\u4e0d\u662f\u6570\u5341\u4ebf\u4eba)\u4f7f\u7528\u7684\u8f6f\u4ef6\u5728\u9053\u4e49\u4e0a\u6709\u8d23\u4efb\u63d0\u5347\u7528\u6237\u7684\u60c5\u611f\u548c\u667a\u529b\u7d20\u8d28\u3002\u8fd9\u79cd\u63d0\u5347\u59cb\u4e8e\u5de5\u827a\u3002\n\u6b63\u5982\u7269\u7406\u67b6\u6784\u53ef\u4ee5\u5f71\u54cd\u601d\u7ef4\u4e00\u6837\uff0c\u8f6f\u4ef6\u4e5f\u53ef\u4ee5\u5f71\u54cd\u601d\u7ef4\u3002\u901f\u5ea6\u8f83\u6162\u3001\u53ef\u9760\u6027\u8f83\u5dee\u7684\u8f6f\u4ef6\u5c31\u50cf\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u8f66\u7ad9(Penn Station)\uff1a\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u4ece\u4e00\u5217\u706b\u8f66\u6362\u4e58\u5230\u53e6\u4e00\u5217\u706b\u8f66\uff0c\u4f46\u8fd9\u4e2a\u5730\u65b9\u6c89\u95f7\u7684\u4f4e\u6d3c\u3001\u7f3a\u4e4f\u9633\u5149\u6216\u660e\u667a\u7684\u8ba4\u8def\u4f1a\u8ba9\u4f60\u89c9\u5f97\u81ea\u5df1\u50cf\u53ea\u8001\u9f20\uff0c\u597d\u6597\uff0c\u4e00\u6587\u4e0d\u503c\uff0c\u66f4\u7cdf\u7cd5\u7684\u662f\uff1a\u4f60\u4f1a\u9002\u5e94\u8fd9\u79cd\u611f\u89c9\uff0c\u5e76\u63a5\u53d7\u5b83\u4f5c\u4e3a\u4e00\u79cd\u5e38\u6001\u30021\u4e2a\u3002\n\u8fd9\u79cd\u8f6f\u4ef6\u5de5\u827a\u4e0b\u964d\u7684\u611f\u89c9\u591a\u5e74\u6765\u4e00\u76f4\u5728\u79ef\u7d2f\uff0c\u4f46\u76f4\u5230\u82f9\u679c\u53d1\u5e03iPad Magic Keyboard\uff0c\u6211\u624d\u5982\u6b64\u5f3a\u70c8\u5730\u611f\u53d7\u5230\u8fd9\u79cd\u8f6f\u786c\u4ef6\u9e3f\u6c9f\u7684\u75db\u82e6\u3002\n\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u4ece\u8fd9\u5bf9\u7ec4\u5408\u5f00\u59cb\uff1a\u4e00\u4e2a\u6781\u597d\u7684\u952e\u76d8\uff0c\u518d\u52a0\u4e0a\u840c\u82bd\u4e2d\u4f46\u4ecd\u6709\u7f3a\u9677\u7684\u8f6f\u4ef6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8d70\u51fa\u8fd9\u6761\u8def\uff0c\u8d70\u5411\u66f4\u5e7f\u9614\u7684\u9886\u57df\u3002\n\u6beb\u65e0\u7591\u95ee\uff0ciPad Pro\u662f\u4e00\u4ef6\u4ee4\u4eba\u7740\u8ff7\u7684\u7269\u54c1\u3002\u8fd9\u662f\u4e00\u5757\u592a\u8584\u592a\u8f7b\u7684\u5e73\u677f\uff0c\u7535\u6c60\u7eed\u822a\u65f6\u95f4\u5982\u6b64\u4e4b\u957f\uff0c\u65e0\u6cd5\u5b9e\u73b0\u5982\u6b64\u5f3a\u5927\u7684\u529f\u80fd\u3002\u800ciPad\u9b54\u672f\u952e\u76d8\u66f4\u662f\u7a81\u51fa\u4e86\u8fd9\u4e00\u70b9\u3002\u901a\u8fc7\u5c06\u8bbe\u5907\u6f02\u6d6e\u5728\u78c1\u94c1\u548c\u6bdb\u7ed2\u6bdb\u6be1\u7684\u5e8a\u4e0a\uff0c\u5e76\u9080\u8bf7\u60a8\u6839\u636e\u9700\u8981\u5c06iPad\u4ece\u652f\u67b6\u4e0a\u62c9\u51fa\u6765\uff0c\u9b54\u672f\u952e\u76d8\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5b9e\u73b0\u5e76\u5956\u52b1\u4e86\u8bbe\u5907\u7684\u72ec\u7acb\u4f7f\u7528\u548c\u914d\u5bf9\u4f7f\u7528\u3002\u603b\u4f53\u800c\u8a00\uff1a\u8fd9\u662f\u4e00\u4e2a\u5de5\u7a0b\u5947\u8ff9\u3002\n\u9b54\u672f\u952e\u76d8\u7684\u5494\u54d2-\u5494\u54d2\u952e\u76d8\u5143\u7d20\u4e5f\u5f88\u68d2\u3002\u6211\u628a\u5b83\u7528\u572811&34\uff1b2018\u7684iPad Pro\u4e0a\uff0c\u867d\u7136\u611f\u89c9\u6709\u70b9\u72ed\u7a84\uff0c\u4f46\u5b83\u7684\u673a\u68b0\u7ed3\u6784\u4ee4\u4eba\u6ee1\u610f\uff0c\u58f0\u97f3\u5b89\u9759\u60a6\u8033\uff0c\u800c\u4e14\u5173\u952e\u7684\u65c5\u884c\u4f53\u9a8c\u90fd\u5f88\u68d2\u3002\u6700\u65b0\u7684MacBook Pro\u952e\u76d8(2020)\u8981\u597d\u4e00\u70b9(\u4e8b\u5b9e\u4e0a\uff1a\u53ef\u80fd\u662f\u7b14\u8bb0\u672c\u7535\u8111\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684\u952e\u76d8)\uff0c\u4f46\u4e5f\u597d\u4e0d\u5230\u54ea\u91cc\u53bb\u3002\u9b54\u672f\u952e\u76d8\u6709\u70b9\u91cd\uff0c\u6253\u5f00\u8d77\u6765\u4e5f\u6709\u70b9\u5947\u602a\uff0c\u4f46\u9664\u4e86\u8fd9\u4e9b\u5c0f\u95ee\u9898\u4e4b\u5916\uff0c\u8fd9\u4e2a\u76f8\u5f53\u795e\u5947\u7684\u914d\u4ef6\u53ea\u6709\u4e00\u4e2a\u660e\u663e\u7684\u95ee\u9898(\u8fd9\u4e5f\u662f\u6211\u4eec\u591a\u5e74\u6765\u4e00\u76f4\u5728\u7ede\u5c3d\u8111\u6c41\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u6bcf\u9694\u51e0\u4e2a\u6708\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u65b0\u95fb\u4e00\u6837)\u3002\n\u6709\u65f6\uff0c\u5982\u679c\u6211\u5728Safari\u7684\u9605\u8bfb\u5668\u6a21\u5f0f\u4e0b\uff0c\u7528\u4e09\u4e2a\u624b\u6307-\u89e6\u6478\u677f-\u6ed1\u52a8\u6765\u5207\u6362\u5e94\u7528\u7a0b\u5e8f\u4e00\u79d2\u949f\uff0c\u7136\u540e\u518d\u56de\u6765\uff0c\u89c6\u53e3\u5c31\u4f1a\u8df3\u5230\u6587\u6863\u7684\u9876\u90e8\u3002\u5982\u679c\u6211\u5728Twitter\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8f93\u5165\u4e00\u6761\u63a8\u6587\uff0c\u5e76\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u6765\u56de\u8df3\u8dc3\uff0c\u5149\u6807\u5c31\u4f1a\u6d88\u5931\u3001\u7830\u5730\u4e00\u58f0\u6d88\u5931\uff0c\u76f4\u5230\u6211\u518d\u6b21\u70b9\u51fbTweetBox\u3002\u4e0d\u662f\u6bcf\u6b21\u90fd\u662f\uff0c\u4f46\u7ecf\u5e38\u662f\u3002\u8fd9\u6bd4\u6bcf\u6b21\u90fd\u66f4\u7cdf\u3002\n\u8fd9\u4ee4\u4eba\u607c\u706b\uff0c\u800c\u4e14\u6d89\u53ca\u5230iPadOS\u7684\u4f4e\u7ea7\u57fa\u7840\u6027\u95ee\u9898\uff0ciPadOS\u662f\u4e00\u79cd\u4e3a\u76f4\u63a5\u89e6\u6478\u800c\u6784\u5efa\u7684\u64cd\u4f5c\u7cfb\u7edf-\u5728\u73bb\u7483\u4e0a\u7528\u624b\u6307\u6216\u94c5\u7b14\u3002\u8bf7\u8bb0\u4f4f\uff0ciPadOS\u662fiOS\u7684\u4e00\u4e2a\u5206\u652f\uff0ciOS\u662f\u4e00\u79cd\u4e13\u4e3a\u7ad9\u5728\u7535\u68af\u91cc\u65f6\u5355\u624b\u4f7f\u7528\u800c\u8bbe\u8ba1\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u89e3\u51b3iPadOS\u7684\u8fd9\u4e9b\u6838\u5fc3\u95ee\u9898\uff0c\u4f46\u8fd9\u4e9b\u95ee\u9898\u6301\u7eed\u5b58\u5728\u7684\u4e8b\u5b9e\u8868\u660e\uff0c\u8fd9\u4e9b\u95ee\u9898\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u9664\u975e\u8fdb\u884c\u4e00\u4e9b\u8ba4\u771f\u7684\u64cd\u4f5c\u7cfb\u7edf\u91cd\u5199\uff0c\u5426\u5219\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5f97\u5230\u89e3\u51b3\u3002\n\u89c1\u9b3c\uff0c\u65e9\u57282018\u5e7411\u6708\uff0c\u6211\u5c31\u5728\u5c06iPad\u5347\u7ea7\u5230Pro\uff1a2\u7684\u8fc7\u7a0b\u4e2d\u5199\u8fc7\u540c\u6837\u7684\u95ee\u9898\u3002\n\u5207\u6362\u4e0a\u4e0b\u6587\u4e5f\u5f88\u9ebb\u70e6\u3002\u5982\u679c\u60a8\u5728\u6d4f\u89c8\u5668\u4e2d\u8fdb\u884c\u641c\u7d22\uff0c\u5e76\u4e14\u7ecf\u5e38\u5728(\u5b9e\u9645\u4e0a\u975e\u5e38\u68d2\u7684)Notes.app\u548cSafari\u4e4b\u95f4\u6765\u56de\u8df3\u8f6c\uff0c\u60a8\u6709\u65f6\u4f1a\u53d1\u73b0\u5149\u6807\u4f4d\u7f6e\u4e22\u5931\u3002\u60a8\u521a\u521a\u7f16\u8f91\u7684Notes.app\u6587\u6863\u5076\u5c14\u4f1a\u91cd\u7f6e\u5230\u5176\u81ea\u8eab\u7684\u9876\u90e8\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5f88\u957f\u7684\u6587\u6863\u6765\u8bf4\uff0c\u8fd9\u662f\u4ee4\u4eba\u607c\u706b\u7684\uff0c\u5e76\u4e14\u8ba9\u6bcf\u4e2aCmd-Tab\u90fd\u611f\u89c9\u5f88\u5371\u9669\u3002\u8fd9\u5e76\u4e0d\u603b\u662f\u53d1\u751f\uff0c\u884c\u4e3a\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7cdf\u3002\u8fd9\u4e2a\u754c\u9762\u201c\u8106\u5f31\u201d\u4f1a\u8ba9\u4f60\u89c9\u5f97\u4f60\u5728\u4ee5\u9519\u8bef\u7684\u65b9\u5f0f\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u66f4\u591a\u793a\u4f8b\uff1a\u4f7f\u7528Safari\u4e2d\u7684\u5171\u4eab\u90ae\u4ef6\u9009\u9879\uff0c\u5f00\u59cb\u952e\u5165\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u5207\u6362\u7a97\u53e3\u4ee5\u68c0\u67e5\u5730\u5740\uff0cCmd-Tab Back\uff0c\u73b0\u5728\u60a8\u952e\u5165\u7684\u5730\u5740\u5df2\u81ea\u52a8\u8f6c\u6362\u4e3a\u635f\u574f\u7684\u5730\u5740\u3002\u6309Tab\u952e\u8fdb\u5165\u7535\u5b50\u90ae\u4ef6\u6b63\u6587\u3002\u8bd5\u7740\u6309Shift-Tab\u540e\u9000\u6765\u7f16\u8f91\u4e3b\u9898-\u4f60\u505a\u4e0d\u5230\u3002\u6709\u9519\u8bef\u5417\uff1fShift-Tab\u7ec4\u5408\u952e\u63d2\u5165\u5236\u8868\u7b26-\u5149\u6807\u6084\u6084\u5411\u524d\u8df3\u52a8\u3002\u8fd9\u91cc\u9884\u671f\u7684\u7528\u6237\u4f53\u9a8c\u662f\uff0c\u5982\u679c\u5149\u6807\u4f4d\u4e8e\u6587\u672c\u5b57\u6bb5\u7684\u5f00\u5934\uff0c\u6309\u4f4fShift-Tab\u4f1a\u5c06\u5176\u62c9\u56de\u5230\u4e0a\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5c31\u50cf\u5728Mail on MacOS\u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\n\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u82f9\u679c\u7684\u8f6f\u4ef6\uff1a\u8c37\u6b4c\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u952e\u76d8\u7684\u8511\u89c6\u4ee4\u4eba\u9707\u60ca\u3002YouTube\u751a\u81f3\u4e0d\u63a5\u53d7\u6309\u7a7a\u683c\u952e\u5f00\u59cb\u548c\u505c\u6b62\u89c6\u9891\u7684\u901a\u7528\u6807\u51c6\u3002\n\u8fd9\u4e9b\u4e0d\u662f\u7b14\u8bb0\u672c\u7535\u8111\u7231\u597d\u8005\u7684\u62b1\u6028\uff0c\u800c\u662f\u4efb\u4f55\u60f3\u8981\u201c\u8bbe\u5907\u6d41\u7545\u6027\u201d\u7684\u4eba\u7684\u62c5\u5fe7\u3002\u7528\u6237\u4f53\u9a8c\u4e2d\u7684\u6253\u55dd\u7834\u574f\u4e86\u8fd9\u79cd\u6d41\u7545\u6027\uff0c\u4f7f\u5176\u65e0\u6cd5\u83b7\u5f97\u3002\u5f53\u6d89\u53ca\u5230\u4f18\u96c5\u5730\u5bfc\u822a\u64cd\u4f5c\u7cfb\u7edf\u3001\u4f7f\u7528\u8bbe\u5907\u3001\u6709\u521b\u610f\u3001\u505a\u9177\u72d7\u5c4e\u65f6\uff0c\u89c6\u7a97\u548c\u8f93\u5165\u53ef\u9760\u6027\u662f\u684c\u4e0a\u7684\u8d4c\u6ce8\u3002\n\u56e0\u4e3a\u9b54\u672f\u952e\u76d8\u505a\u5de5\u7cbe\u826f\uff0c\u800c\u4e14\u4f60\u76f8\u4fe1\u5b83\u80fd\u51c6\u786e\u5730\u8bb0\u5f55\u51fb\u952e\uff0c\u6240\u4ee5\u6ca1\u6709\u547d\u4ee4\u7684\u4e0d\u548c\u8c10\u5c31\u4f1a\u50cf\u4f60\u8ba4\u4e3a\u7684\u90a3\u6837\u8fc5\u901f\u5730\u53d1\u51fa\u3002\u6211\u7ecf\u5e38\u62cd\u6253Cmd-c\u4e94\u516d\u6b21\uff0c\u4ee5\u786e\u4fdd\u526f\u672c\u5df2\u7ecf\u201c\u62ff\u8d70\u201d\u3002\u590d\u5236\u662f\u5982\u6b64\u968f\u673a\uff0c\u4ee5\u81f3\u4e8e\u89c6\u89c9\u53cd\u9988\u4f1a\u5f88\u6709\u7528-\u5149\u6807\u95ea\u70c1\uff0c\u4efb\u4f55\u4e1c\u897f\u3002\u7136\u540e\uff1aCMD-V\u672c\u8eab\u53ef\u4ee5\u5c1d\u8bd5\u4e24\u5230\u4e09\u6b21\u624d\u80fd\u6b63\u786e\u53d1\u5c04\u3002\n\u8fd9\u901a\u5e38\u662f\u56e0\u4e3a\u6211\u77e5\u9053\u8981\u7c98\u8d34\u5230\u54ea\u91cc\uff0c\u800c\u7c98\u8d34\u662f\u5728\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u53d1\u751f\u7684\u3002\u5f53\u8fc7\u6e21\u6b63\u5728\u53d1\u751f\u7684\u65f6\u5019\uff0c\u6211\u6b63\u5728\u6253\u7535\u8bdd\u3002\u6211\u4e0d\u76f8\u4fe1\u6211\u5728\u8fd9\u79cd\u884c\u4e3a\u4e0a\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u672c\u8d28\u4e0a\uff1aiPadOS\u4e0a\u7684\u952e\u76d8\u7f13\u51b2\u533a\u611f\u89c9\u4e0d\u5b58\u5728\u3002\n\u4e0d\uff0c\u6211\u4e0d\u80fd\u5728iPad\u4e0a\u642d\u5efa\u6211\u7684\u4f9d\u8d56\u7ec8\u7aef\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u53d1\u5e03\u8f6f\u4ef6\uff0c\u4f46\u6211\u65e9\u5c31\u653e\u5f03\u4f7f\u7528\u8fd9\u53f0\u8bbe\u5907(\u6211\u5728\u4e0a\u9762\u8d77\u8349\u8fd9\u7bc7\u6587\u7ae0)\u6765\u505a\u8fd9\u4e9b\u4e8b\u60c5\u3002\u6211\u9047\u5230\u7684\u98a0\u7c38\u662f\u57fa\u672c\u7684\u64cd\u4f5c\u7cfb\u7edf\u98a0\u7c38(\u952e\u76d8\u7f13\u51b2\u533a\uff01)\uff0c\u629b\u5149\u98a0\u7c38\u3002\u6211\u4eec\u5728\u684c\u9762\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u51e0\u5341\u5e74\u6ca1\u6709\u9047\u5230\u8fc7\u7684\u98a0\u7c38\u3002\n\u8f6f\u4ef6\u5e94\u8be5\u9996\u5148\u63d0\u9ad8\u7528\u6237\u7684\u667a\u529b\u548c\u521b\u9020\u529b\u7684\u6d41\u7545\u6027\u3002\u5c31\u76ee\u524d\u7684\u60c5\u51b5\u800c\u8a00\uff0ciPadOS\u8ba9\u8fd9\u79cd\u6d41\u7545\u6027\u53d8\u5f97\u6bd4\u5fc5\u8981\u7684\u66f4\u96be\u5b9e\u73b0\u3002\n\u8fd9\u4e9b\u8f6f\u4ef6\u62b1\u6028\u4ee4\u4eba\u8d39\u89e3\u7684\u662f\uff0c\u82f9\u679c\u7684\u786c\u4ef6\u8d8a\u6765\u8d8a\u7cbe\u81f4\u3002\u867d\u7136\u8fdc\u975e\u5b8c\u7f8e\u65e0\u7f3a\uff0c\u4f46\u6574\u4e2a\u9635\u5bb9\u73b0\u5728(\u7ec8\u4e8e)\u57fa\u672c\u4e0a\u6446\u8131\u4e86\u4f60\u5728\u8f6f\u4ef6\u4e2d\u770b\u5230\u7684\u8fd9\u4e9b\u201c\u57fa\u7840\u6027\u201d\u95ee\u9898\u30023\u4e2a\u3002\n\u786c\u4ef6\u6709\u5b57\u9762\u4e0a\u548c\u6bd4\u55bb\u4e0a\u7684\u4f18\u52bf-\u56e0\u6b64\u5b83\u5fc5\u987b\u5b8c\u5168\u5b8c\u6574\uff0c\u5e76\u4e14\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u6ca1\u6709bug\u53ef\u4ee5\u53d1\u8d27\u3002\u8f6f\u4ef6\uff1f\u5b83\u66f4\u65e0\u5b9a\u5f62\uff0c\u5c31\u50cf\u8584\u96fe\u3002\u8865\u4e01\u53ef\u4ee5\u65e0\u4f11\u6b62\u5730\u63a8\u9001\u3002\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u7ed3\u675f\u3002\u786c\u4ef6\u6545\u969c\u53ef\u80fd\u4f1a\u6bc1\u4e86\u4e00\u5bb6\u516c\u53f8\u3002\u6709\u95ee\u9898\u7684\u8f6f\u4ef6\u53ef\u4ee5\u6253\u8865\u4e01\u3002\u8774\u8776\u952e\u76d8\u7684\u5d29\u6e83\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5e73\u606f\u4e0b\u6765\u3002\u751a\u81f3\u5f53\u6211\u5728\u8fd9\u4e2a\u6539\u8fdb\u7684\u9b54\u672f\u952e\u76d8\u4e0a\u6253\u5b57\u65f6\uff0c\u6211\u4e0d\u7981\u60f3\uff1a\u4ed6\u4eec\u771f\u7684\u6d4b\u8bd5\u4e86\u8fd9\u4e2a\u4e1c\u897f\u5417\uff1f\u6211\u8eab\u4e0a\u6709\u4e09\u4e2a\u8774\u8776\u952e\u76d8\u574f\u4e86\uff0c\u6709\u4e24\u4e2a\u662f\u5728\u7530\u91ce\u91cc\u3002\u4e00\u70b9\u4e5f\u4e0d\u597d\u73a9\u3002\u786c\u4ef6\u6545\u969c\u4f1a\u957f\u671f\u7559\u5728\u4eba\u4eec\u7684\u8111\u6d77\u4e2d\u3002\n\u62ffiPhone\u7684\u6444\u50cf\u5934\u4f5c\u4e3a\u8774\u8776\u952e\u76d8\u7684\u5bf9\u5e94\u7269\u3002\u76f8\u673a\u662f\u4ee4\u4eba\u7fa1\u6155\u7684\u4e1c\u897f\u3002\u575a\u5b9a\u53ef\u9760\u3002\u4f5c\u4e3a\u786c\u4ef6\uff0c\u4ed6\u4eec\u7684\u4e4f\u5473\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u3002\u4f60\u4e0a\u4e00\u6b21\u8003\u8651iPhone\u6444\u50cf\u5934\u662f\u4ec0\u4e48\u65f6\u5019\uff0c\u6216\u8005\u62c5\u5fc3\u5b83\u4f1a\u4e0d\u4f1a\u5de5\u4f5c\uff1f\u4f1f\u5927\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u7684\u4e00\u4e2a\u6807\u5fd7\u662f\u5fd8\u8bb0\u5b83\uff0c\u8ba9\u5b83\u987a\u5229\u5730\u4e0e\u4f60\u7684\u751f\u6d3b\u878d\u4e3a\u4e00\u4f53-\u4ece\u5b83\u4e2d\u63d0\u53d6\u6d41\u7545\u7684\u4e1c\u897f\u3002\u6700\u597d\u7684\u76f8\u673a\u662f\u4f60\u53e3\u888b\u91cc\u7684\u90a3\u53f0\u3002\u2026\u3002\u53ef\u4ee5\u53ef\u9760\u5730\u62cd\u51fa\u5f88\u68d2\u7684\u7167\u7247\u3002\n\u7136\u800c\uff1a\u6211\u4e00\u76f4\u5728\u8003\u8651\u5728iPhone\u4e0a\u4e0e\u6211\u7684\u7167\u7247\u4e92\u52a8\uff0c\u56e0\u4e3aPhotos(\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7528\u6765\u8bbf\u95ee\u4f60\u7684\u7167\u7247\u7684\u670d\u52a1)\u591a\u5e74\u6765\u53d8\u5f97\u8d8a\u6765\u8d8a\u6162\uff0c\u56e0\u4e3a\u5b83\u5bf9iCloud\u7684\u4f9d\u8d56\u7a0b\u5ea6\u8d8a\u6765\u8d8a\u9ad8\u3002\u5f53\u4f60\u5728Instagram\u4e0a\u6ed1\u52a8\uff0c\u4ece\u4f60\u7684\u7167\u7247\u6d41\u4e2d\u9009\u62e9\u4e00\u5f20\u7167\u7247\u65f6\uff0c\u901a\u5e38\u9700\u8981\u56db\u4e94\u79d2\u949f\u624d\u80fd\u663e\u793a\u4f60\u7684\u7167\u7247\u3002Facebook Messenger\u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u66fe\u7ecf\u662f\u77ac\u95f4\u7684\u3002\u4f8b\u5982\uff0c\u9009\u62e9\u7167\u7247\u7684\u6d88\u606f\u4e2d\u7684\u754c\u9762\u7279\u522b\u4ee4\u4eba\u8d39\u89e3\u3002(\u7167\u7247\u6d41\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u6a2a\u5411\u6eda\u52a8\u4e86\uff1f\u8fd9\u4e48\u591a\u5e74\u8fc7\u53bb\u4e86\uff0c\u201c\u7167\u7247\u201d\u548c\u201c\u6700\u8fd1\u201d\u5230\u5e95\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f)\n\u8d85\u8d8aiOS/ipadOS\uff1aCatalina\u53ef\u4ee5\u8bf4\u662f\u6700\u8fd1\u8bb0\u5fc6\u4e2d\u6700\u4e0d\u7a33\u5b9a\u3001\u6700\u4e0d\u6d41\u7545\u7684MacOS\u7248\u672c\u3002Apple Mail\u5b58\u5728\u4e25\u91cd\u7684\u6570\u636e\u4e22\u5931\u95ee\u9898\u3002\u90ae\u4ef6\u4e5f\u4e0d\u4f1a\u518d\u6eda\u52a8-\u6eda\u52a8\uff01-\u67d0\u4e9bHTML\u7535\u5b50\u90ae\u4ef6\u3002\u800c\u90ae\u4ef6\u5728\u6ca1\u6709\u660e\u663e\u539f\u56e0\u7684\u60c5\u51b5\u4e0b\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u4f5c\u4e3a\u6700\u524d\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u81ea\u53d1\u5730\u5f39\u51fa\u3002\nFinder\u662fMac\u6280\u672f\u4e2d\u6700\u53e4\u8001\u7684\u4ea7\u54c1\u4e4b\u4e00\uff0c\u5b83\u4e0d\u80fd\u53ef\u9760\u5730\u62a5\u544a\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\u3002\u8fd9\u6bd4\u5927\u591a\u6570\u5176\u4ed6\u9519\u8bef\u66f4\u4ee4\u4eba\u62c5\u5fe7\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u4e00\u4e9b\u6838\u5fc3\u4ee3\u7801-\u6700\u63a5\u8fd1\u91d1\u5c5e\u7684\u4f4d-\u6b63\u5728\u4ee5\u5bf9\u4e00\u822c\u7528\u6237\u548c\u4e13\u4e1a\u73af\u5883\u7684\u7a33\u5b9a\u6027\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u7684\u65b9\u5f0f\u8fdb\u884c\u66f4\u6539\u3002\nMacOS\u4e0a\u7684\u4e09\u4e2a\u4e3b\u8981\u8f6f\u4ef6\u53ef\u80fd\u662fFinder\u3001Safari\u548cMail\u3002\u8981\u8ba9\u5176\u4e2d\u4e24\u4e2a\u663e\u793a\u51fa\u4e0d\u7a33\u5b9a\u7684\u8ff9\u8c61\uff0c\u5c31\u50cf\u70b9\u4e86\u6c99\u62c9\uff0c\u4e00\u534a\u7684\u751f\u83dc\u53d8\u6210\u4e86\u74f7\u7816\u4e00\u6837\u3002\u53ea\u662f\u6709\u70b9\u5947\u602a\u3002\u8fd9\u4e0d\u5e94\u8be5\u53d1\u751f\uff0c\u7279\u522b\u662f\u5f53\u8fd9\u4e9b\u662f\u51e0\u5341\u5e74\u524d\u7684\u7a0b\u5e8f\u4e2d\u7684\u65b0\u7684\u3001\u5173\u952e\u7684\u9519\u8bef\u65f6\u3002\u8fd9\u4f1a\u8ba9\u60a8\u60f3\u77e5\u9053\u8fd8\u4f1a\u6709\u54ea\u4e9b\u6f0f\u6d1e\u88ab\u7834\u574f\uff0c\u4ee5\u53ca\u5f00\u53d1\u5468\u671f\u4e2d\u6709\u54ea\u4e9b\u6f0f\u6d1e\u88ab\u7834\u574f\u4ee5\u5141\u8bb8\u8fd9\u4e9bbug\u53d1\u5e03\u3002\n\u6211\u5728\u63a8\u7279\u4e0a\u95ee\u4eba\u4eec\uff0c\u4ed6\u4eec\u548c\u5361\u7279\u7433\u5a1c\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8fd9\u4e2a\u540d\u5355\u4ee4\u4eba\u6cae\u4e27\u5730\u5370\u8c61\u6df1\u523b\u3002\n\u7531\u4e8eCatalina\u4e0d\u518d\u8fd0\u884c32\u4f4d\u8f6f\u4ef6\uff0c\u65e7\u7684\u3001\u5b8c\u5168\u6b63\u5e38\u7684\u3001\u529f\u80fd\u6b63\u5e38\u7684\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u8fdb\u884c\u4e86\u201c\u66f4\u65b0\u201d\uff0c\u4ee5\u4fbf\u4e0e\u65b0\u7684\u64cd\u4f5c\u7cfb\u7edf\u914d\u5408\u4f7f\u7528\u3002\u6709\u65f6\u5f00\u53d1\u4eba\u5458\u4f1a\u8f6c\u800c\u4f7f\u7528Electron\u6846\u67b6\u8fdb\u884c\u5f00\u53d1\u3002\u7535\u5b50\u4f7f\u8de8\u5e73\u53f0\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u4f46\u8fd9\u662f\u4ee5\u727a\u7272\u5e94\u7528\u7a0b\u5e8f\u7684\u611f\u89c9\u6216\u529f\u80fd\u4e3a\u4ee3\u4ef7\u7684\uff0c\u800c\u8fd9\u79cd\u611f\u89c9\u6216\u529f\u80fd\u662f\u60a8\u671f\u671b\u7684\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u7684\u529f\u80fd\u3002\u51e0\u4e4e\u603b\u662f\uff0c\u8fd9\u4e9b\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f\u6bd4\u539f\u751f\u7248\u672c\u66f4\u6162\u3001\u66f4\u7b28\u91cd\u3002\n\u5728\u6211\u5199\u7684\u201c\u5feb\u901f\u8f6f\u4ef6\uff0c\u6700\u597d\u7684\u8f6f\u4ef6\u201d\u4e00\u4e66\u4e2d\uff0c\u6211\u8bb2\u8ff0\u4e86\u901f\u5ea6\u548c\u7a33\u5b9a\u6027\u7684\u76f4\u89c9\u662f\u5982\u4f55\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\uff1a\n\u901f\u5ea6\u548c\u53ef\u9760\u6027\u901a\u5e38\u662f\u624b\u62c9\u624b\u7684\u3002\u901f\u5ea6\u53ef\u4ee5\u5f88\u597d\u5730\u4ee3\u8868\u4e00\u822c\u5de5\u7a0b\u8d28\u91cf\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5728\u6267\u884c\u7b80\u5355\u4efb\u52a1\u65f6\u901f\u5ea6\u53d8\u6162\uff0c\u90a3\u4e48\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u5de5\u7a0b\u5e08\u4e0d\u662f\u6267\u7740\u4e8e\u7ec6\u8282\u7684\u4eba\u3002\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\uff0c\u4f46\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u707e\u96be\u6027\u7684\u5176\u4ed6\u95ee\u9898\u6f5c\u4f0f\u7740\u3002\u6211\u8981\u6211\u6240\u6709\u7684\u624b\u827a\u4eba\u90fd\u575a\u6301\u4e0b\u53bb\u3002\u6211\u4e0d\u8ba4\u4e3a\u201c\u5c24\u5229\u897f\u65af\u201d\u505a\u5f97\u5f88\u5dee\uff0c\u4f46\u6211\u5bf9\u5b83\u7684\u4fe1\u5fc3\u4e0d\u5982\u5b83\u80fd\u66f4\u4f18\u96c5\u5730\u5904\u7406\u8f93\u5165\u548c\u754c\u9762\u901f\u5ea6\u3002\u901f\u5ea6\u4f1a\u8ba9\u6211\u66f4\u4fe1\u4efb\u5b83\u3002\n\u7535\u5b50--\u6839\u636e\u5176\u7528\u9014\u7684\u5b9a\u4e49--\u5c06\u4f4e\u7ea7\u7ec6\u8282\u7684\u6267\u7740\u4ece\u5f00\u53d1\u8005\u8eab\u4e0a\u8ba9\u4f4d\u5230\u6846\u67b6\u4e0a\u3002\u611f\u89c9\u5b83\u6ecb\u751f\u4e86\u4e00\u79cd\u624b\u5de5\u827a\u7684\u5931\u8303\u3002\u4e0d\u8db3\u4e3a\u5947\u7684\u662f\uff0c\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f(Slake\u3001Arq6\u3001Dropbox\u7b49)\u611f\u89c9\u6bd4\u5927\u591a\u6570\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u66f4\u8106\u5f31\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u50cfVSCode\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u8868\u660e\uff0c\u53ea\u8981\u4ed8\u51fa\u52aa\u529b\u548c\u8d44\u6e90\uff0c\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u8868\u73b0\u51fa\u8272\u3002\n\u4e0d\u8fc7\uff0c\u5230\u6700\u540e\uff0c\u201c\u677e\u5f1b\u201d\u5728\u201c\u7535\u5b50\u6742\u5fd7\u201d\u4e0a\u88ab\u5199\u4e86\u56db\u6b21\u53c8\u91cd\u5199\u4e86\u56db\u6b21\uff0c\u8fd9\u662f\u4e00\u79cd\u629b\u7269\u7ebf\u5f0f\u7684\u4e1c\u897f\u3002\n\u9664\u4e86\u6846\u67b6\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u770b\u5230\u66fe\u7ecf\u53ef\u9760\u7684\u5e94\u7528\u7a0b\u5e8f\u6b63\u906d\u53d7\u7279\u6027\u7f13\u6162\u548c\u81a8\u80c0\u7684\u56f0\u6270\u3002\u4e5f\u8bb8\u8fd9\u662f\u4e0a\u5e02\u516c\u53f8\u7279\u6709\u7684\u7279\u6027\uff0c\u4ee5\u53ca\u5b83\u4eec\u5c06\u529f\u80fd\u4e0e\u7528\u6237\u589e\u957f\u6df7\u4e3a\u4e00\u8c08\u7684\u539f\u56e0\uff1f\u4f8b\u5982\uff1aDropbox\u5df2\u7ecf\u4ece\u4e00\u4e2a\u82d7\u6761\u7684\u3001\u9ad8\u5ea6\u53ef\u9760\u7684\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u53d8\u6210\u4e86\u4e00\u4e2a\u81a8\u80c0\u7684\u597d\u5947\u5fc3\uff0c\u4e0d\u77e5\u4ec0\u4e48\u539f\u56e0\u5c06CPU\u56fa\u5b9a\u5728200%\u3002\u6211\u73b0\u5728\u8ba9\u5b83\u4fdd\u6301\u5378\u8f7d\u72b6\u6001\uff0c\u76f4\u5230\u6211\u9700\u8981\u540c\u6b65\uff0c\u7136\u540e\u6253\u5f00\u5b83\u51e0\u5206\u949f\u3002\u8fd9\u98a0\u8986\u4e86\u539f\u59cbDropbox\u7684\u6838\u5fc3\u76ee\u6807\uff1a\u6210\u4e3a\u4e00\u4e2a\u65e0\u7f1d\u4e14\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u96c6\u6210\u7684\u672c\u5730\u548c\u4e91\u540c\u6b65\u6587\u4ef6\u5b58\u50a8\u7cfb\u7edf\u3002\n\u6709\u5173\u4e0e\u82f9\u679c\u7684\u8de8\u5e73\u53f0iOS/MacOS\u6846\u67b6Mac Catalyst\u7684\u4e89\u8bba\uff0c\u8bf7\u53c2\u89c1Twitter\u5e94\u7528\u7a0b\u5e8f\u3002\u95ee\u9898\u7684\u4e00\u4e2a\u5c0f\u6837\u672c(\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u662f\u5c0f\u95ee\u9898\uff0c\u4f46\u8fd9\u4e9b\u7ec6\u8282\u5f88\u91cd\u8981\uff01)\u3002\n\u50cf\u201c\u4e3b\u9875\u201d\u6309\u94ae\u8fd9\u6837\u7684\u5143\u7d20\u5728\u6ca1\u6709\u660e\u663e\u539f\u56e0\u7684\u60c5\u51b5\u4e0b\u4fdd\u6301\u9ad8\u4eae\u663e\u793a(\u5c31\u50cf\u7528Tab\u952e\u5207\u6362\u5230\u4e00\u6837)\u3002\n\u6700\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff1a\u50ac\u5316\u5242\u53ef\u80fd\u4f1a\u4f7f\u7f3a\u4e4f\u5de5\u827a\u548c\u7cbe\u81f4\u7684\u60c5\u51b5\u6b63\u5e38\u5316\u3002\u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c\u5341\u5e74\u524d\u6211\u4eec\u4e3aMacOS\u63d0\u4f9b\u4e86\u4e00\u4e2a\u575a\u56fa\u7684\u672c\u5730\u98ce\u683c\u7684Twitter\u5ba2\u6237\u7aef\u3002\u6240\u4ee5\u8fd9\u4e2a\u8f6f\u4ef6\u95ee\u9898\u66fe\u7ecf\u89e3\u51b3\u4e86\uff0c\u6ca1\u6709\u89e3\u51b3\uff0c\u73b0\u5728\u53c8\u4ee5\u66f4\u7cdf\u7cd5\u7684\u65b9\u5f0f\u91cd\u65b0\u89e3\u51b3\u4e86\u3002\nGmail\u548cGoogle Drive\u7684\u52a0\u8f7d\u65f6\u95f4\u90fd\u6bd4\u4eba\u4eec\u5408\u7406\u9884\u671f\u7684\u8981\u957f\u5f97\u591a\u3002\u6211\u521a\u521a\u505a\u4e86\u4e00\u4e2a\u975e\u6b63\u5f0f\u7684\u6d4b\u8bd5\uff1a\u4ece\u6253\u5f00\u6807\u7b7e\u5230\u7528Gmail\u5199\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u53ea\u9700\u89818\u79d2\u3002\nTwitter\u7684\u7f51\u7ad9\u73b0\u5728\u52a0\u8f7d(\u4e0e\u6d4f\u89c8\u5668\u6216\u64cd\u4f5c\u7cfb\u7edf\u65e0\u5173)\u8fd9\u4e48\u591a\u4e0d\u540c\u7684\u5c42\u548c\u9636\u6bb5\uff0c\u6211\u6c38\u8fdc\u4e0d\u77e5\u9053\u6211\u7684\u4e92\u8054\u7f51\u8fde\u63a5\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002twitter.com\u5947\u602a\u7684\u590d\u6742\u6027\u4e5f\u5e26\u6765\u4e86\u4e00\u4e2a\u4e0d\u5149\u5f69\u7684\u5956\u52b1\uff0c\u90a3\u5c31\u662f\u5b83\u662f\u552f\u4e00\u4e00\u4e2a\u7ecf\u5e38\u4f7f\u6211\u7684iPhone\u4e0a\u7684Safari\u5d29\u6e83\u7684\u7f51\u7ad9\u3002\n\u62a5\u7eb8\u7f51\u7ad9\u63d0\u4f9b\u5145\u65a5\u7740\u5e7f\u544a\u6280\u672f\u7684\u6570\u767e\u5146\u5b57\u8282\u6216\u66f4\u5927\u7684\u6709\u6548\u8d1f\u8f7d\u3002\u5728Chrome\u9009\u9879\u5361\u4e2d\u6253\u5f00nytimes.com\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u8017\u5c3d\u4e00\u5757\u65b0\u7684MacBook\u7535\u6c60\u3002\n\u5728\u914d\u5907120 Hz\u5c4f\u5e55\u548c\u6700\u65b0\u82f9\u679c\u94c5\u7b14\u7684iPad Pro\u4e0a\u7f16\u8f91\u7167\u7247\u662f\u5f53\u4eca\u6700\u201c\u795e\u5947\u201d\u7684\u7167\u7247\u51b2\u6d17\u65b9\u5f0f\u4e4b\u4e00\u3002\u6211\u7684\u51e0\u4e2a\u670b\u53cb\u90fd\u662f\u4e13\u4e1a\u63d2\u753b\u5bb6\uff0c\u4ed6\u4eec\u5bf9\u81ea\u5df1\u7684iPad\u4fe1\u8a93\u65e6\u65e6\u3002\u5e26\u5bf9\u5f00\u672c\u952e\u76d8\u7684iPad\u662f\u76ee\u524d\u6700\u8f7b\u3001\u6700\u6709\u80fd\u529b\u7684\u5c0f\u4e66\u5199\u8bbe\u5907\u4e4b\u4e00-\u4f60\u53ef\u4ee5\u628a\u5b83\u5e26\u5230\u5c71\u4e0a\uff0c\u4e00\u5468\u5185\u6bcf\u5929\u79bb\u7ebf\u51e0\u4e2a\u5c0f\u65f6\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u7ed9\u7535\u6c60\u5145\u7535\uff0c\u4e5f\u4e0d\u7528\u7167\u987e\u5b83\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u5b83\u4f1a\u88ab\u5c0f\u96e8\u6216\u6c34\u82b1\u6e85\u5230\u4e0a\u9762\u3002\n\u6700\u65b0\u76842020\u6b3eMacBook Pro\u662f\u8774\u8776\u65f6\u4ee3\u673a\u5668\u60e8\u8d25\u7684\u575a\u5b9e\u63d0\u70bc\u3002\u5f53Catalina\u4e0d\u4f1a\u8ba9\u4f60\u6447\u6447\u6b32\u5760\u65f6\uff0cMacOS\u5728\u529f\u80fd\u548c\u53ef\u7528\u6027\u4e4b\u95f4\u53d6\u5f97\u4e86\u6781\u597d\u7684\u5e73\u8861\uff0c\u80fd\u591f\u8fdb\u5165\u7ec8\u7aef\u6216\u4ee5\u56fe\u5f62\u65b9\u5f0f\u5bfc\u822a\u3002\u6211\u611f\u89c9\u81ea\u5df1\u5f88\u6d41\u5229\uff0c\u80fd\u4ee5\u4e00\u79cd\u4ee4\u4eba\u6109\u60a6\u548c\u6ee1\u8db3\u7684\u65b9\u5f0f\u638c\u63a7\u5c40\u9762\u3002\nMacOS\u8f6f\u4ef6\u575a\u6301\u624b\u5de5\u5236\u4f5c\u3001\u590d\u5199\u514b\u9686\u3001BBEdit\u6216Sublime Text(\u5c3d\u7ba1\u4e0d\u662f\u539f\u751f\u7684\uff0c\u4f46\u611f\u89c9\u975e\u5e38\u53ef\u9760\uff0c\u53cd\u5e94\u975e\u5e38\u7075\u654f\uff0c\u4ee5\u81f3\u4e8e\u4f60\u613f\u610f\u5ffd\u7565\u5b83\u7684\u602a\u7656)\u3001\u8d1d\u5c14\u65af\u767b(Bear)\u3001\u963f\u5c14\u5f17\u96f7\u5fb7(Alfred)\u3001IA Writer\u6216Keynote(\u53ef\u4ee5\u8bf4\u662f\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684MacOS\u8f6f\u4ef6\u4e4b\u4e00)\uff0c\u6216\u8005\u4efb\u4f55\u901a\u8fc7\u6050\u614c\u3001\u8d6b\u514b\u3001\u751a\u81f3\u7ec8\u7aef\u6216\u5feb\u901f(\u4e0e\u6240\u6709\u7406\u6027\u9884\u671f\u76f8\u53cd\uff0c\u4f7f\u7528\u8d77\u6765\u53ea\u662f\u4e00\u79cd\u4e50\u8da3)\u7684\u4e1c\u897f\uff0c\u90fd\u5b58\u5728\u4e8e\u5b9d\u85cf\u4e2d\uff0c\u4f8b\u5982\uff0cBear\u3001Alfred\u3001IA Writer\u6216Keynote(\u53ef\u4ee5\u8bf4\u662f\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684MacOS\u8f6f\u4ef6\u4e4b\u4e00)\uff0c\u751a\u81f3\u8fd8\u6709\u6050\u614c\u3001\u8d6b\u514b\u3001\u751a\u81f3\u7ec8\u7aef\u6216\u5feb\u901f(\u4e0e\u6240\u6709\u7406\u6027\u7684\u9884\u671f\u76f8\u53cd\uff0c\u4f7f\u7528\u5b83\u4eec\u53ea\u662f\u4e00\u79cd\u4e50\u8da3)\uff0c\u8fd9\u6837\u7684\u5b58\u5728\u5411\u4e16\u754c\u4e0a\u7684Slaks\u3001Twitter\u6216Adobes\u8bc1\u660e\uff0c\u4e3a\u7528\u6237\u6d41\u7545\u63d0\u4f9b\u670d\u52a1\u7684\u9762\u5411\u5de5\u827a\u7684\u8f6f\u4ef6\u5e76\u4e0d\u662f\u4e0d\u53ef\u80fd\u6216\u7f55\u89c1\u7684\uff0c\u800c\u4e14\u4ecd\u7136\u6709\u5229\u53ef\u56fe\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u4e13\u6ce8\u4e8e\u5de5\u827a\u548c\u6d41\u5229\u662f\u6709\u5546\u4e1a\u610f\u4e49\u7684\u3002\u6700\u8fd1\u51e0\u5e74\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u6574\u4e2a\u516c\u53f8\u7684\u5546\u4e1a\u6a21\u5f0f\u53ef\u4ee5\u6982\u62ec\u4e3a\u201c\u65e0\u81a8\u80c0\u7684X\u201d\u3002\u4eb2\u548c\u529b\u662f\u4e0d\u81c3\u80bf\u7684Adobe\u3002\u5728\u4f60\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u5b89\u88c5Adobe Creative Cloud\uff0c\u60ca\u53f9\u4e8e\u81f3\u5c11\u6709\u5341\u51e0\u4e2a\u8fdb\u7a0b\u51fa\u4e8e\u672a\u77e5\u76ee\u7684\u5728\u540e\u53f0\u65cb\u8f6c\u3002\u201c\u4eb2\u548c\u529b\u56fe\u7247\u201d\u3001\u51fa\u7248\u5546\u548c\u8bbe\u8ba1\u5e08\u7684\u6210\u529f\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002Sketch\u591a\u5e74\u6765\u7684\u4e3b\u8981\u7279\u70b9\u5f88\u7b80\u5355\uff1a\u4e0d\u662fAdobe\u3002\n\u8fd8\u6709\u7f51\u7edc\uff01\u5f53\u4f60\u5173\u5fc3\u7684\u65f6\u5019-\u5f53\u4f60\u771f\u7684\u5728\u4e4e\u7684\u65f6\u5019-\u7f51\u7edc\u662f\u4ee4\u4eba\u656c\u754f\u7684\u3002\u6211\u4ecd\u7136\u4e0d\u6562\u76f8\u4fe1Figma\u662f\u7f51\u7edc\u539f\u751f\u7684(\u4e5f\u8bde\u751f\u4e8eNot Adobe Camp 6)\u3002\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u611f\u89c9\u5982\u6b64\u5f3a\u5927\uff0c\u5982\u6b64\u5feb\u901f\uff0c\u5982\u6b64\u7cbe\u5fc3\u5236\u4f5c\uff0c\u5e76\u4e14\u5b8c\u5168\u57fa\u4e8eWeb\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u79cd\u706f\u5854--\u5bf9\u4e8e\u8ff7\u5931\u5728\u590d\u6742\u3001\u5783\u573e\u548c\u4e0d\u5fc5\u8981\u6846\u67b6\u7684\u6d77\u6d0b\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u7f51\u7ad9\u6765\u8bf4\uff0c\u5e94\u8be5\u662f\u4e00\u79cd\u539f\u578b\u3002\n\u6700\u8fd1\uff0c\u6211\u63a8\u51fa\u4e86\u4e00\u4e2a\u9759\u6001\u7f51\u7ad9/\u4e66\u7c4d--ise-ji\uff1a\u4e0e\u6211\u540c\u884c--\u5b83\u7684\u6f5c\u5728\u6709\u6548\u8d1f\u8f7d\u4e3a\u6570\u767e\u5146\u5b57\u8282\uff0c\u4f46\u901a\u8fc7\u4f7f\u7528\u6700\u5c11\u7684javascript\u3001\u5ef6\u8fdf\u52a0\u8f7d\u548c\u4f18\u5316\uff0c\u9875\u9762\u7684\u6574\u4f53\u91cd\u91cf\u6700\u5c0f\uff0c\u611f\u89c9\u5feb\u901f\u4e14\u54cd\u5e94\u8fc5\u901f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u53ef\u4ee5\u5728Github\u4e0a\u514d\u8d39\u6258\u7ba1\u4e00\u4e2a\u8fd9\u6837\u7684\u7f51\u7ad9\uff0c\u6216\u8005\u6253\u5f00\u4e00\u4e2a\u5ec9\u4ef7\u7684\u6570\u5b57\u6d77\u6d0b\u76d2\u5b50\uff0c\u7136\u540e\u5728\u5b83\u9762\u524d\u6251\u901a\u4e00\u58f0\u5173\u95edCloudflare\uff0c\u8fd9\u7b80\u76f4\u662f\u5947\u8ff9\u3002\u6240\u6709\u4eba\u90fd\u53ef\u4ee5(\u9010\u6b65)\u83b7\u5f97\u8ba9\u4e8b\u60c5\u8fd0\u884c\u826f\u597d\u548c\u53ef\u9760\u7684\u5de5\u5177\u3002\n\u6211\u4eec\u7684\u8ba1\u7b97\u786c\u4ef6\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u51fa\u8272\u3001\u66f4\u7cbe\u81f4\u3001\u66f4\u53ef\u9760\u3002\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u6838\u5fc3\u8f6f\u4ef6\u6709\u65f6\u4f1a\u611f\u89c9\u5230\u5012\u9000\uff0c\u671d\u7740\u4e0d\u90a3\u4e48\u6ce8\u91cd\u5de5\u827a\u3001\u4e00\u81f4\u6027\u548c\u7a33\u5b9a\u6027\u7684\u65b9\u5411\u524d\u8fdb\u3002\n\u5728Catalina\u7684\u51cc\u4e71\u548ciPadOS\u7684\u51e0\u4e4e\u4f46\u4e0d\u592a\u6709\u610f\u4e49\u4e4b\u95f4\uff0c\u73b0\u5728\u6700\u9700\u8981\u7684\u4e0d\u662f\u5f15\u4eba\u6ce8\u76ee\u7684\u6845\u6746\u529f\u80fd\uff0c\u800c\u662f\u91cd\u65b0\u8003\u8651\u67af\u71e5\u7684\u87ba\u6bcd\u548c\u87ba\u6813\uff0c\u6a71\u67dc\u80cc\u9762\u7684\u6cb9\u6f06\uff0c\u6839\u636e\u9700\u8981\u5e73\u6ed1\u6240\u6709\u7684\u51f9\u51f8\u4e0d\u5e73\u548c\u5361\u987f\uff0c\u4ee5\u5b9e\u73b0\u8bbe\u5907\u6d41\u7545\u6027-\u800c\u4e14\u4e0d\u4ec5\u4ec5\u662f\u4e00\u5e74\u7684\u6e05\u7406\u6211\u4eec\u8ba1\u7b97\u73af\u5883\u4e2d\u80ae\u810f\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u800c\u662f\u91cd\u5851\u50cf\u82f9\u679c\u8fd9\u6837\u7684\u516c\u53f8\u7684\u5185\u90e8\u8f6f\u4ef6\u6587\u5316\uff0c\u4ee5\u63d0\u5347\u7528\u6237\n\u73b0\u5728\u662f\u65f6\u5019\u8ba9\u6240\u6709\u8fd9\u4e9b\u534e\u4e3d\u7684\u786c\u4ef6\u8d70\u51fa\u8f6f\u4ef6\u7684\u4f4e\u8ff7\u4e86\u3002\n\u66f4\u4e0d\u7528\u8bf4\u77e5\u9053\u8fc7\u53bb\u662f\u4ec0\u4e48\u548c\u73b0\u5728\u662f\u4ec0\u4e48\u7684\u666e\u904d\u4ee4\u4eba\u6cae\u4e27\u7684\u54c1\u8d28\u3002\u21a9\ufe0e\u3002\n\u516c\u5e73\u5730\u8bf4\uff1a\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u6211\u5728\u90a3\u7bc7\u6587\u7ae0\u4e2d\u5199\u7684\u5f88\u591a\u7f3a\u70b9\u90fd\u5728iPadOS\u4e0a\u5f97\u5230\u4e86\u5f88\u597d\u7684\u89e3\u51b3\u3002\u770b\u5230\u4ed6\u4eec\u7684\u56e2\u961f\u8ba9\u5e73\u53f0\u53d8\u5f97\u66f4\u5f3a\u5927\uff0c\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4e5f\u4ee4\u4eba\u632f\u594b\u3002\u21a9\ufe0e\u3002\nTouchBar\u7edd\u5bf9\u662f\u8fc7\u53bb20\u5e74\u6765\u6dfb\u52a0\u5230\u4efb\u4f55\u4e0eMac\u76f8\u5173\u7684\u8bbe\u5907\u4e0a\u7684\u6700\u5dee\u7684\u786c\u4ef6\u201c\u529f\u80fd\u201d\u3002\u6211\u60f3\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f-\u9664\u4e86\u90a3\u4e2a\u6df7\u86cb\u66f2\u68cd\u7403\u51b0\u7403\u9f20\u6807(\u4eba\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u901a\u8fc7\u63d2\u5165\u53e6\u4e00\u4e2a\u9f20\u6807\u5c31\u9009\u62e9\u9000\u51fa)-\u5c3d\u7ba1\u5b83\u51e0\u4e4e\u6ca1\u6709\u7ed9\u684c\u9762\u5e26\u6765\u4efb\u4f55\u597d\u5904\uff0c\u53ea\u5e26\u6765\u4e86\u8d1f\u9762\u7684\u5f71\u54cd\uff0c\u4f46\u516c\u53f8\u8fd8\u662f\u5982\u6b64\u5bb9\u6613\u5730\u52a0\u500d\u4e86\u8d4c\u6ce8\u3002(\u6211\u8bd5\u8fc7BetterTouchBar\uff0c\u5728TouchBar\u4e0a\u589e\u52a0\u4e86\u5929\u6c14\u5c0f\u90e8\u4ef6\u548cAirPod\u7535\u6c60\u7535\u91cf\uff0c\u4f46\u6700\u7ec8\u53d1\u73b0\u5b83\u5f0a\u5927\u4e8e\u5229\u3002)\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u5728\u6700\u8fd1\u7684MacBook Pro\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u6062\u590d\u4e86Esc\u952e\u548c\u4e13\u7528\u7684Touch-ID\u6309\u94ae\u3002\u8fd9\u81f3\u5c11\u7a0d\u5fae\u8ba9TouchBar\u8fd8\u53ef\u4ee5\u63a5\u53d7\u3002\u65b0\u952e\u76d8\u786e\u5b9e\u975e\u5e38\u68d2(\u5047\u8bbe\u5b83\u4eec\u7ecf\u5f97\u8d77\u65f6\u95f4\u7684\u8003\u9a8c)\u3002\u8bda\u7136\uff0c\u8fd9\u4e9bMacBook Pro\u5728\u56db\u5e74\u524d\u53ef\u80fd\u5c31\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u8fdf\u5230\u603b\u6bd4\u4e0d\u5230\u597d\u3002\u21a9\ufe0e\u3002\n\u5f53\u7136\uff0c\u901f\u5ea6\u4e5f\u5f88\u91cd\u8981\u3002\u4f46\u662f\uff0c\u65e0\u8bba\u8f6f\u4ef6\u5ba2\u89c2\u4e0a\u591a\u4e48\u201c\u5feb\u901f\u201d\uff0c\u5d29\u6e83\u6216\u884c\u4e3a\u4e0d\u7a33\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u98a0\u8986\u7528\u6237\u7684\u6d41\u7545\u6027\u3002\u21a9\ufe0e\u3002\n\u6211\u8bf4\u201c\u8fdd\u80cc\u6240\u6709\u7406\u6027\u7684\u9884\u671f\u201d\uff0c\u662f\u56e0\u4e3a\u4f60\u4f1a\u8ba4\u4e3a\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u5df2\u7ecf\u6709\u51e0\u5341\u5e74\u5386\u53f2\u7684\u91d1\u878d\u8f6f\u4ef6\u4e86\u3002\u4f46\u662f\u594e\u80af\u662f\u4e00\u4e2a\u76f8\u5f53\u4e0d\u9519\u7684MacOS\u4e00\u7b49\u516c\u6c11\u3002\u5b83\u5f88\u65f6\u9ae6\u3002\u5b83\u662f\u975e\u7535\u5b50\u7684\u3002\u5b83\u5f88\u7075\u6d3b-\u6211\u53ef\u4ee5\u751f\u6210\u5404\u79cd\u62a5\u544a\uff0c\u5e76\u76f8\u5bf9\u5bb9\u6613\u5730\u5bf9\u6211\u7684\u8d22\u52a1\u6570\u636e\u8fdb\u884c\u5207\u7247\u3002\u6211\u4e00\u76f4\u628a\u5b83\u4e00\u7b14\u52fe\u9500\uff0c\u76f4\u5230\u4e00\u4f4d\u670b\u53cb\u7ea0\u7f20\u7740\u8ba9\u6211\u4f7f\u7528\u5b83\u3002\u73b0\u5728\u6211\u552f\u4e00\u7684\u9057\u61be\u5c31\u662f\u6ca1\u6709\u65e9\u70b9\u5f00\u59cb\u3002\u21a9\ufe0e\u3002\n\u53cd\u5bf9\u4f60\u7684\u516c\u53f8\u7684\u201c\u53cd\u201d\u9635\u8425\u53ef\u4ee5\u5982\u6b64\u5f3a\u70c8\u5730\u6fc0\u52b1\u4e00\u4ee3\u53c8\u4e00\u4ee3\u7684\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5c06\u6bd5\u751f\u7cbe\u529b\u6295\u5165\u5230\u521b\u5efa\u516c\u53f8\u4e2d\u53bb\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5728\u5185\u90e8\u5f15\u53d1\u4e00\u4e9b\u5371\u9669\u4fe1\u53f7\uff0c\u5373\u4f7f\u4f60\u7684\u80a1\u4ef7\u5728\u8fc7\u53bb\u4e94\u5e74\u91cc\u4e0a\u6da8\u4e86\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u76844\u500d\uff0c\u800c\u4e14\u662f\u53f3\u503e\u7684\u3002\u21a9\ufe0e\u3002\n\u662f\u4e00\u4f4d\u5e38\u9a7b\u65e5\u672c\u7684\u4f5c\u5bb6\u548c\u6444\u5f71\u5e08\u3002\u4ed6\u662fMacDowell Colony\uff0cRagdale\u548cVCCA\u7684\u64b0\u7a3f\u4eba\u3002\u4ed6\u7684\u8bba\u6587\u548c\u6587\u7ae0\u66fe\u53d1\u8868\u5728\u201c\u98df\u5ba2\u201d\u3001\u201c\u5927\u897f\u6d0b\u6708\u520a\u201d\u3001\u201c\u52a0\u5dde\u661f\u671f\u65e5\u6742\u5fd7\u201d\u3001\u201c\u8fde\u7ebf\u201d\u3001\u201c\u6c38\u65fa\u201d\u3001\u201c\u65b0\u79d1\u5b66\u5bb6\u201d\u3001\u201c\u5f17\u5409\u5c3c\u4e9a\u5b63\u520a\u201d\u3001\u201c\u7ebd\u7ea6\u5ba2\u201d\u3001\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\u3001\u201c\u6668\u62a5\u201d\u3001\u201c\u6284\u672c\uff1a\u6392\u7248\u6742\u5fd7\u201d\u7b49\u6742\u5fd7\u4e0a\u3002\u4f60\u53ef\u4ee5\u52a0\u5165\u4ed6\u7684\u90ae\u5bc4\u540d\u5355\uff1aRoden&amp\uff1bRidgeline\u3002", "note_en": "Something strange is happening in the world of software: It\u2019s slowly getting worse. Not all software, but a lot of it. It\u2019s becoming more sluggish, less responsive, and subtly less reliable than it was a few years ago.\n In some ways this is hyperbole. Objectively, we\u2019ve never been able to do so much, so easily with our smartphones and laptops and tablets. We\u2019ve never pushed more data between more places more readily. But while the insidious \u201cworseness\u201d I mention falls only in part on the engineering side of things, it falls harder on the more subjective, craft side of things, making it all the more worrisome.\n Why should we care about this? Because the majority of our waking hours take place within the confines of applications. A truth recently amplified by the  COVID pandemic.\n And I believe software used by millions (if not billions) has a moral duty to elevate the emotional and intellectual qualities of its users. That elevation begins with craft.\n  In the same way that physical architecture can affect a mind, so too can software. Slower, less reliable software is like Penn Station: Sure, you can catch a transfer from one train to another but the dreary lowness of the place, the lack of sunlight or sensible wayfinding will make you feel like a rat, truculent and worthless, and worse: You\u2019ll acclimate to that feeling and accept it as a norm.  1\n This sense of a decline in software craft has been building for years, but it wasn\u2019t until Apple released the iPad Magic Keyboard that I felt the pain of this hardware-software gap so acutely.\n So let\u2019s start with that pairing: A superb keyboard coupled to budding but still-faulty software and work our way out to broader lands.\n   Make no bones about it, an iPad Pro is an enchanting object. It\u2019s a slab too thin and light to be so powerful with so much battery life. And the iPad Magic Keyboard highlights this brilliantly. By floating the device on a bed of magnets and plush felt, and inviting you to pull the iPad off its stand as needed, the Magic Keyboard somehow enables and rewards both stand-alone and paired use of the device. Overall: An engineering marvel.\n The clickty-clack keyboard element of the Magic Keyboard is also great. I\u2019m using it with an 11&#34; 2018 iPad Pro and though it can feel a bit cramped, the mechanics are satisfying, the sound quietly pleasing, and the key travel excellent all considering. The latest MacBook Pro keyboards (2020) are a degree nicer, (in fact: possibly the nicest keyboard to ever grace a laptop) but not by much. The Magic Keyboard is a bit heavy, and a bit weird to open, but aside from those niggles the quite wonderish accessory has but one glaring problem (and it\u2019s the same problem we\u2019ve been hemming and hawing over for years now, the same problem brought up every few months as if it were news): The software.\n   Sometimes, if I\u2019m in Reader Mode in Safari and three-finger-touchpad-swipe to switch apps for a second and come back, the viewport has jumped to the top of the document. If I\u2019m typing a tweet in Twitter\u2019s app and hop back and forth between apps the cursor is gone,  poof, lost until I tap again in the tweetbox. Not every time, but often. Which is worse than every time.\n It\u2019s exasperating and speaks to low-level, foundational issues of iPadOS, an OS built for direct touch \u2014 a finger or Pencil on glass. Bear in mind \u2014 iPadOS is a branch of iOS, an operating system designed to be used with one hand while standing in an elevator. I don\u2019t know how to fix these core iPadOS issues, but the fact that these problems persist indicates that they\u2019re non-trivial and may never get fixed without some serious gut-level OS rewrites.\n Heck, back in November 2018, I wrote about these same problems in   Getting the iPad to Pro:   2\n Switching contexts is also cumbersome. If you\u2019re researching in a browser and frequently jumping back and forth between, say, (the actually quite wonderful) Notes.app and Safari, you\u2019ll sometimes find your cursor position lost. The Notes.app document you were just editing occasionally resetting to the top of itself. For a long document, this is infuriating and makes every  Cmd-Tab feel dangerous. It doesn\u2019t always happen, the behavior is unpredictable, making things worse. This interface \u201cbrittleness\u201d makes you feel like you\u2019re using an OS in the wrong way.\n More examples: Use the Share &gt; Mail option in Safari, start typing in an email address. Switch windows to check the address,  Cmd-Tab back, now the address you\u2019ve been typing has been auto-converted into a broken address. Tab down into the body of the email. Try to  Shift-Tab back to edit the subject \u2014 you can\u2019t. A bug?  Shift-Tab inserts a  Tab character \u2014 the cursor dumbly flops forward. The expected user experience here is if the cursor is at the start of a text-field,  Shift-Tab will pull it back to the previous field, as it does in Mail on macOS.\n It\u2019s not just Apple\u2019s software: Google\u2019s apps are egregious in their disdain for a keyboard. YouTube doesn\u2019t even accept the universal standard of hitting the  Space bar to start and stop a video.\n These aren\u2019t the complaints of a laptoper-wannabe, but the concerns of literally anyone who desires \u201cdevice fluency.\u201d Hiccups in UX disrupt this fluency, make it impossible to obtain. Viewport and input reliability are table-stakes when it comes to gracefully navigating an operating system, using a device, being creative, making cool shit.\n Because the Magic Keyboard is well-made, and  because you believe in its ability to register keystrokes accurately, the dissonance of not having commands fire off as quickly as you think them hurts all the more. I often smack  Cmd-c five or six times to make sure a copy has \u201ctaken.\u201d Copying is so hit-or-miss that visual feedback would be useful \u2014 a cursor blink, anything. And then:  Cmd-v itself can take two or three tries to properly fire off.\n Often this is because I know where I want to paste, and pasting happens as contexts are switching. I\u2019m  Cmd-ving as the transitions are happening. I do not believe I am unique in this behavior. Essentially: The keyboard buffer on iPadOS feels non-existent.\n No, I can\u2019t scaffold my terminal-dependent  static-site generating publishing software on an iPad, but I\u2019ve long since given up using this device (on which I am drafting this) for those things. The bumps I\u2019m running into are basic operating system bumps ( keyboard buffers!), polish bumps. Bumps we haven\u2019t butted against in decades on desktop operating systems.\n Software should first and foremost elevate the intellectual and creative fluency of the user. As it presently stands, iPadOS makes this fluency more difficult to achieve than necessary.\n   What baffles about these software moans is that Apple\u2019s hardware is ever-more refined. While far from flawless, the entire lineup is now (finally) largely free from these \u201cfoundational\u201d issues you see in software.  3\n Hardware has literal and metaphorical edges \u2014\u00a0it must be fully complete and largely bug free to ship. Software? It\u2019s far more amorphous, like mist. Patches can be endlessly pushed. It never ends. Faulty hardware can destroy a company. Faulty software can be patched. The butterfly keyboard debacle may never be lived down. Even as I type on this improved Magic Keyboard, I can\u2019t help but wonder: Did they really test this thing? I had three butterfly keyboards die on me, twice in the field. Not fun. Hardware failures live long in the mind.\n Take the iPhone\u2019s camera as counterpoint to the butterfly keyboard. The cameras are things to admire. Stalwart, reliable. As hardware they are fabulous in their boringness. When did you last think about your iPhone camera or worry if it would work or not? A sign of great hardware and software is in forgetting about it, smoothly allowing it to integrate with your life \u2014\u00a0drawing fluency from it. The best camera is the one you have in your pocket \u2026 that reliably takes great photos.\n And yet: I think constantly about  interacting with my photos on my iPhone because Photos (both the app and the service used by other apps to access your photos) has gotten slower over the years as the service has become more dependent on iCloud. When you swipe up in Instagram to choose a photo from your Photo Stream it routinely takes four or five seconds to show your photos. Same in Facebook Messenger. This used to be instantaneous. And the interface in, for example, Messages to select photos is uniquely baffling. (Since when do photo streams scroll sideways? And so many years on, just what the heck is the difference between \u201cPhotos\u201d and \u201cRecents\u201d?)\n   Looking beyond iOS/ipadOS: Catalina is arguably the least stable, most disruptive-of-fluency macOS releases in recent memory. There are egregious issues of  data loss in Apple Mail. Mail also simply won\u2019t scroll\u00a0\u2014  scroll! \u2014 certain  HTML emails anymore. And Mail spontaneously pops forward as the frontmost application again and again for no obvious reason.\n The Finder \u2014\u00a0one of the oldest pieces of Mac tech, doesn\u2019t  reliably report disk usage. This worries more than most other bugs because it means some of that core code \u2014 the closest-to-the-metal bits \u2014 is being changed in ways that  negatively affect stability in general-user and professional environments alike.\n The three primary pieces of software on macOS are probably Finder, Safari, and Mail. To have two of these show signs of instability is like ordering a salad and having half the lettuce appear as ceramic roofing tiles. It\u2019s just weird. It shouldn\u2019t happen, especially when these are new, critical bugs in decades-old programs. It makes you wonder what else might be broken, and what\u2019s broken with the development cycle to allow for these bugs to ship.\n I  asked folks on Twitter what problems they\u2019ve had with Catalina and the list is depressingly impressive.\n   Because Catalina no longer runs 32-bit software, older, perfectly fine and functional apps have been \u201cupdated\u201d to work with the new OS. Sometimes the developers switch to the  Electron framework for development. Electron makes it easier to develop cross-platform applications, but comes at the expense of an application feeling or functioning in a way you\u2019d expect a native application to function. Almost always, these Electron applications are slower and more cumbersome than a native version.\n  In   Fast Software the Best Software I wrote about how speed and the  intuition of stability are intertwined:\n Speed and reliability are often intuited hand-in-hand. Speed can be a good proxy for general engineering quality. If an application slows down on simple tasks, then it can mean the engineers aren\u2019t obsessive detail sticklers. Not always, but it can mean disastrous other issues lurk. I want all my craftspeople to stickle. I don\u2019t think Ulysses is badly made, but I am less confident in it than if it handled input and interface speed with more grace. Speed would make me trust it more.\n Electron \u2014 by very definition of its purpose \u2014 abdicates low-level detail obsession away from the developer and onto the framework. It feels like it fosters an anomie of craftsmanship. It\u2019s no surprise that Electron applications (Slack, Arq 6, Dropbox, and more) feel more brittle than most native applications. That said, applications like  VSCode show that Electron apps  can be performant given effort and resources.\n Still, in the end, there\u2019s something parabolic about Slack having been  written and re-written four times now in Electron.\n Beyond frameworks, we\u2019re seeing once-reliable applications suffer from feature creep and bloat. Perhaps this is endemic to the very nature of public companies and their conflation of features with user growth? For example: Dropbox has gone from a svelte, hyper-reliable file syncing service to a bloated curiosity that pegs the  CPU at 200% for unclear reasons. I now keep it unloaded until I need to sync and then turn it on for just a few minutes. Which upends the core purpose of the original Dropbox: To be a seamless and OS-integrated local-and-cloud-synced file storage system.\n   For arguments against  Mac Catalyst, Apple\u2019s cross-platform iOS / macOS framework, see the Twitter application. A small sample of issues (which may seem like nits but these details are important!):\n elements like the \u201chome\u201d button stay highlighted (as if tabbed to) for no apparent reason\n Most worrying: Catalyst may normalize a lack of craft and refinement. It\u2019s important to remember that we had a solidly native-feeling  Twitter client for macOS ten years ago. So this software problem was once solved, unsolved, and now re-solved in a worse way.\n    Gmail and Google Drive both take far longer to load than one should reasonably expect. I just ran an informal test: To go from opening a tab to composing an email in gmail took eight seconds.\n Twitter\u2019s web site now loads (regardless of browser or operating system) in so many various layers and stages I never know if my internet connection is functioning properly or not. Twitter.com\u2019s strange complexities also bring with it the ignoble award of being the only site to regularly crash Safari on my iPhone.\n Newspaper sites deliver hundred megabyte or greater payloads filled with ad tech. Open nytimes.com in a Chrome tab and you\u2019ll soon deplete a fresh MacBook battery.\n   Editing a photo on an iPad Pro with 120hz screen and latest Apple Pencil is one of the most genuinely \u201cmagical\u201d ways to develop a photo today. Friends of mine who are professional illustrators swear by their iPads. An iPad with the folio keyboard is one of the lightest, most capable little writing devices around \u2014\u00a0you could take it up into the mountains and use it offline for hours a day for a week without needing to charge the battery, don\u2019t have to baby it or worry about it getting lightly rained or splashed on.\n The latest 2020 MacBook Pros are solid refinements of the butterfly-era fiasco of machines. And when Catalina doesn\u2019t go wonky on you, macOS strikes a superb balance between power and usability, of being able to drop into the Terminal or navigate graphically. I feel fluent and in control in a way that delights and satisfies.\n macOS software that  adheres to craft \u2014\u00a0 Things or  Carbon Copy Cloner or  BBEdit or  Sublime Text (which, despite not being \u201cnative native\u201d feels so solid and so responsive you\u2019re willing to overlook its quirks) or  Bear or  Alfred or  iA Writer or Keynote (arguably one of the best pieces of macOS software of all time) or anything by  Panic, heck, even Terminal or Quicken (which, against all rational expectations is just a  joy to use)  5 \u2014\u00a0exists in troves, the existence of such  proves to the Slacks or Twitters or Adobes of the world that it\u2019s not impossible nor rare to produce craft-oriented software in service to user fluency, and still make a profit.\n In fact, there\u2019s a business case to be made for being craft- and fluency-focused. We\u2019ve seen entire companies with business models that could be summarized as \u201cBloat-Free X\u201d emerge in recent years.  Affinity is bloat-free Adobe. Install Adobe Creative Cloud on your laptop and marvel at the no fewer than a dozen processes whirling around in the background for unknown purposes. It\u2019s no surprise Affinity Photo and Publisher and Designer have taken off.  Sketch\u2019s main feature for many years was simply: Not Adobe.\n And the web! When you care \u2014  when you really give a shit \u2014 the web is awe inspiring. I still can\u2019t believe  Figma is web-native (also born from the Not Adobe camp  6). That an application can feel so powerful, so fast, so well-crafted and be fully web-based should be a kind of lighthouse-archetype for all other sites lost in a sea of complexity and muck and unnecessary frameworks.\n Recently I launched a static website/book \u2014   Ise-ji: Walk With Me \u2014 that has a potential payload of hundreds of megabytes but by using a bare-minimum of javascript, lazyloading, and optimization, the overall weight of the page is minimal, feels quick and responsive. The fact that I could host a site like this for free on Github or spin up a cheap Digital Ocean box and plop Cloudflare down in front of it is downright miraculous. The tools to make things work well and reliably are accessible (by degrees) to all.\n   Our computing hardware is largely brilliant, refined, more reliable than ever. The core software running on it can sometimes feel regressive, moving in directions less focused on craft, consistency, and stability.\n Between the messiness of Catalina and the almost-but-not-quite-there-ness of iPadOS, what\u2019s most needed now are not splashy masthead features but a reconsideration of the boring nuts and bolts, the paint on the back of the cabinets, the smoothing over of all the bumps and stutters as needed to enable device fluency \u2014\u00a0and not just a single year of cleaning up the mucky infrastructure of our compute landscape, but a reworking of the internal software culture of companies like Apple to elevate user fluency to first-class rank.\n It\u2019s time to get all of this gorgeous hardware out of the software slump.\n   Not to mention the general depressing quality of  knowing what used to be compared to what it is now.  \u21a9\ufe0e\n To be fair: So much of what I wrote about as shortcomings in that article have been addressed and addressed well on iPadOS over the last year. It\u2019s been impressive and heartening to watch their team make the platform more powerful.  \u21a9\ufe0e\n The TouchBar is categorically the worst hardware \u201cfeature\u201d added to anything Mac-related in the last two decades. I can\u2019t think of anything \u2014 aside from that bastard hockey puck mouse (which one could easily opt-out of by plugging in another mouse) \u2014\u00a0that the company has so readily doubled down on despite it bringing almost no benefit, only negatives, to the table. (I\u2019ve tried BetterTouchBar, added weather widgets and AirPod battery levels to the TouchBar but in the end find it detracts more than adds.) Thankfully, in these recent revisions of MacBook Pros we got back the  esc key and a dedicated  Touch-ID button. This at least makes the TouchBar bearable, slightly. And the new keyboards are, truly, excellent (assuming they stand the test of time). True, these MacBook Pros should have probably looked like this four years ago, but better late than never.  \u21a9\ufe0e\n Speed is also important, of course. But an application that crashes or behaves erratically will upend user fluency no matter how objectively \u201cfast\u201d the software is.  \u21a9\ufe0e\n I say \u201cagainst all rational expectations\u201d because you\u2019d assume if anything suffered from bloat it would be decades-old financial software. But Quicken is quite a fine first-class macOS citizen. It\u2019s snappy. It\u2019s non-electron. It\u2019s flexible \u2014\u00a0I can generate all sorts of reports and slice up my financial data with relative ease. I had written it off until a friend had badgered me into using it. Now my only regret is I hadn\u2019t started earlier.  \u21a9\ufe0e\n That an \u201canti-\u201d camp against your company can so strongly inspire generations of software developers to devote years of their lives to building companies should  probably set off some internal red flags, even if your stock price is impressively  4x up and to the right over the last five years.  \u21a9\ufe0e\n    is a writer and photographer based in Japan. He is a MacDowell Colony, Ragdale, and VCCA writing fellow. His essays and articles have appeared in  Eater,  The Atlantic,  California Sunday Magazine,  Wired,  Aeon,  New Scientist,  Virginia Quarterly Review,  The New Yorker,  The New York Times,  The Morning News,  Codex: Journal of Typography, and elsewhere. You could join his mailing lists:   Roden &amp;   Ridgeline.", "posttime": "2020-06-12 19:22:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u786c\u4ef6,\u8f6f\u4ef6,hardware", "title": "\u8f6f\u4ef6\u4e0d\u666f\u6c14\u8c37\u4e2d\u7684\u8f89\u714c\u786c\u4ef6", "title_en": "Brilliant Hardware in the Valley of the Software Slump", "transed": 1, "url": "https://craigmod.com/essays/software_slump/", "via": "", "real_tags": ["\u786c\u4ef6", "\u8f6f\u4ef6", "hardware"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006274, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5f00\u53d1\u6216\u8c03\u8bd5\u53ea\u80fd\u5728\u8fdc\u7a0b\u529f\u80fd\u5f3a\u5927\u7684\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u4f8b\u5982\u591aGPU\u6df1\u5ea6\u5b66\u4e60\u57f9\u8bad\u7a0b\u5e8f\u3002\u9700\u8981\u5728\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u8bbe\u7f6e\u5bb9\u5668\u5316\u5f00\u53d1\u73af\u5883\uff0c\u5e76\u80fd\u591f\u901a\u8fc7\u672c\u5730IDE\u4e0e\u8fdc\u7a0b\u5bb9\u5668\u5316\u5f00\u53d1\u73af\u5883\u901a\u4fe1\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0cVS\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u5176\u6269\u5c55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u8c08\u8c08\u5982\u4f55\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u8bbe\u7f6eVS Code Docker\u5f00\u53d1\u73af\u5883\uff0c\u5982\u4f55\u4ece\u672c\u5730VS Code GUI\u5728\u8fdc\u7a0bDocker\u5f00\u53d1\u73af\u5883\u4e2d\u5f00\u53d1\u548c\u8c03\u8bd5\u7a0b\u5e8f\u3002\n\u6309\u7167\u8bf4\u660e\u8bbe\u7f6e\u5230\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u7684\u57fa\u4e8eSSH\u5bc6\u94a5\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u767b\u5f55\u5230\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u65f6\u90fd\u9700\u8981\u5bc6\u7801\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u751f\u6210\u516c\u94a5(\u901a\u5e38\u662f~/.ssh/id_rsa.pub)\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u751f\u6210\u516c\u94a5\u3002\n\u4e00\u65e6\u6211\u4eec\u751f\u6210\u4e86\u516c\u94a5\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5c06\u516c\u94a5\u590d\u5236\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u6211\u4eec\u9700\u8981\u5411\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u8f93\u5165\u4e00\u6b21\u5bc6\u7801\u3002\n\u4e00\u65e6\u8bbe\u7f6e\u4e86\u57fa\u4e8eSSH\u5bc6\u94a5\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u6211\u4eec\u5728\u767b\u5f55\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u65f6\u5c31\u4e0d\u518d\u9700\u8981\u8f93\u5165\u5bc6\u7801\u3002\u901a\u8fc7SSH\u8fde\u63a5\u5230\u8fdc\u7a0b\u4e3b\u673a\u8fdb\u884c\u9a8c\u8bc1\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cVS\u4ee3\u7801\u8fdc\u7a0b\u5bb9\u5668\u4f7f\u7528\u672c\u5730Docker\u4e3b\u673a\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u5bb9\u5668\u3002\u8981\u4f7f\u7528\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u5bb9\u5668\uff0c\u6211\u4eec\u5fc5\u987b\u5c06&#34\uff1bdocker.host&#34\uff1b\uff1a&#34\uff1byour-user-name-on-host@hostname&#34\uff1b\u6dfb\u52a0\u5230vs Code settings.json\u3002\u5b83\u901a\u5e38\u4f4d\u4e8e~/.config/Code/User/\u4e2d\u3002\n\u6211\u4eec\u5fc5\u987b\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u4f5c\u4e3aVS\u4ee3\u7801\u7684\u5de5\u4f5c\u533a\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u73b0\u6709\u6587\u4ef6\u4ece\u672c\u5730\u4e3b\u673a\u4f20\u8f93\u5230\u8fdc\u7a0b\u4e3b\u673a\uff0c\u4e5f\u53ef\u4ee5\u5c06\u65b0\u7684\u6216\u4fee\u6539\u8fc7\u7684\u6587\u4ef6\u4ece\u8fdc\u7a0b\u4e3b\u673a\u4f20\u8f93\u5230\u672c\u5730\u4e3b\u673a\u3002\n\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\uff0c\u6211\u4eec\u4f7f\u7528SCP\u5c06\u6587\u4ef6\u4f20\u8f93\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528rsync\u6216\u4efb\u4f55\u6211\u4eec\u89c9\u5f97\u8212\u670d\u7684\u4f20\u8f93\u5de5\u5177\u3002\n\u4e3aVS\u4ee3\u7801\u5de5\u4f5c\u533a\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u3002\u5728\u5b50\u76ee\u5f55.devtainer.json\u4e2d\u521b\u5efadevtainer.json\u3002\u4f7f\u7528\u4e0e\u4e0b\u9762\u7c7b\u4f3c\u7684JSON\u3002\n//\u6709\u5173\u683c\u5f0f\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605https://aka.ms/vscode-remote/devcontainer.json\u6216\u6b64\u6587\u4ef6\u7684\u81ea\u8ff0\u6587\u4ef6\uff0c\u7f51\u5740\u4e3a\uff1a//https://github.com/microsoft/vscode-dev-containers/tree/v0.117.1/containers/docker-existing-dockerfile{&#34\uff1bName&#34\uff1b\uff1a&#34\uff1bvs Code Remote Demo&#34\uff1b\uff0c//\u5c06\u8fd0\u884c\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u4e3a\u4e0a\u4e00\u7ea7\uff0c\u800c\u4e0d\u662f.devtainer\u6587\u4ef6\u5939\u3002&#34\uff1b\u4e0a\u4e0b\u6587&#34\uff1b\uff1a&#34\uff1b..&#34\uff1b\uff0c//\u5982\u679c\u60a8\u4e0d\u4f7f\u7528\u6807\u51c6\u6587\u4ef6\u540d\uff0c\u8bf7\u66f4\u65b0&#39\uff1bdockerFile&#39\uff1b\u5c5e\u6027\u3002&#34\uff1bdockerFile&#34\uff1b\uff1a&#34\uff1b../docker/nvidia.Dockerfile&#34\uff1b\uff0c//\u5728\u5bb9\u5668\u521b\u5efa\u65f6\u8bbe\u7f6e*default*\u5bb9\u5668\u7279\u5b9a\u7684settings.json\u503c\u3002&#34\uff1b\u8bbe\u7f6e&#34\uff1b\uff1a{&#34\uff1bTerminal al.Integrated.shell.linux&#34\uff1b\uff1anull}\uff0c//\u6dfb\u52a0\u5bb9\u5668\u521b\u5efa\u65f6\u9700\u8981\u5b89\u88c5\u7684\u6269\u5c55ID\u3002&#34\uff1bExtensions&#34\uff1b\uff1a[]\uff0c//\u4f7f\u7528&#39\uff1bForwardPorts&#39\uff1b\u4f7f\u5bb9\u5668\u5185\u7684\u7aef\u53e3\u5217\u8868\u5728\u672c\u5730\u53ef\u7528\u3002//&#34\uff1bforwardPorts&#34\uff1b\uff1a[]\uff0c//\u521b\u5efa\u5bb9\u5668\u540e\uff0c\u53d6\u6d88\u5bf9\u8981\u8fd0\u884c\u547d\u4ee4\u7684\u4e0b\u4e00\u884c\u7684\u6ce8\u91ca-\u4f8b\u5982\u5b89\u88c5git\u3002//&#34\uff1bpostCreateCommand&#34\uff1b\uff1a&#34\uff1bapt-get update&amp\uff1b&amp\uff1bapt-get install-y git&#34\uff1b\uff0c//\u4f7f\u7528\u57fa\u4e8eptrace\u7684\u8c03\u8bd5\u5668(\u5982C++\u3001Go\u548cRust)\u65f6\u53d6\u6d88\u6ce8\u91ca//&#34\uff1brunArgs&#34\uff1b\uff1a[&#34\uff1b--cap-add=SYS_ptrace&#34\uff1b\uff0c&#34\uff1b-security-opt&#34\uff1b\uff0c&#34\uff1bseccomp=unconfined&#34\uff1b]\uff0c&#34\uff1brungs&#34\uff1b\uff1a[&#34\uff1b-\u3002]\uff0c//\u53d6\u6d88\u6ce8\u91ca\u53ef\u4ee5\u4ece\u5bb9\u5668\u5185\u90e8\u4f7f\u7528Docker CLI\u3002\u89c1https://aka.ms/vscode-remote/samples/docker-in-docker.//&#34\uff1b\u88c5\u8f7d&#34\uff1b\uff1a[&#34\uff1bsource=/var/run/docker.sock\uff0ctarget=/var/run/docker.sock\uff0ctype=bind&#34\uff1b]\uff0c//\u53d6\u6d88\u6ce8\u91ca\u4ee5\u975eroot\u7528\u6237\u8eab\u4efd\u8fde\u63a5\u3002\u89c1https://aka.ms/vscode-remote/containers/non-root.//&#34\uff1bremoteUser&#34\uff1b\uff1a&#34\uff1bvscode&#34\uff1b//\u4f7f\u7528\u5377//&#34\uff1bimage&#34\uff1b\uff1a&#34\uff1bubuntu-remote-test\uff1a0.0.1&#34\uff1b\uff0c//\u6216&#34\uff1bdockerFile&#34\uff1b//&#34\uff1bworkspaceFolder&#34\uff1b\uff1a\uff1a&#34\uff1b/workspace&#34\uff1b\uff0c//&#34\uff1bworkspace mount&#34\uff1b\uff1a&#34\uff1bsource=remote-workspace\uff0ctarget=/workspace\uff0ctype=volume&#34\uff1b//Using/home/leimao/workspace/vs-remote-workspace/\u662f\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55/&#34\uff1bworkspaceFolder&#34\uff1b\u662fDocker\u5bb9\u5668\u4e2d\u4f5c\u4e3aworkspace\u7684\u6587\u4ef6\u5939//target=/workspace\u662f\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684\u5de5\u4f5c\u533a\u5c06\u8981\u7ed1\u5b9a\u5230\u7684Docker\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u5939&#\u3002\uff1a&#34\uff1bsource=/home/leimao/Workspace/vs-remote-workspace/\uff0c\u76ee\u6807=/\u5de5\u4f5c\u533a\uff0c\u7c7b\u578b=\u7ed1\u5b9a\uff0c\u4e00\u81f4\u6027=\u7f13\u5b58&#34\uff1b\uff0c}\u3002\n\u8bf7\u6ce8\u610f\uff0c&#34\uff1bdockerFile&#34\uff1b\u5fc5\u987b\u6b63\u786e\u6307\u5411\u6211\u4eec\u8981\u4f7f\u7528\u7684\u672c\u5730Dockerfile\u3002\u6211\u4eec\u8fd8\u4e3a&#34\uff1brunArgs&#34\uff1b\u63d0\u4f9b\u4e86\u989d\u5916\u7684Docker\u8fd0\u884c\u53c2\u6570\u3002\n\u5355\u51fbRemote-Containers\uff1a\u5728Container\u4e2d\u6253\u5f00\u6587\u4ef6\u5939\u3002\u6253\u5f00\u5305\u542b\u6211\u4eec\u521a\u521a\u914d\u7f6e\u7684.devtainer/devtainer.json\u7684\u672c\u5730\u5de5\u4f5c\u533a\u3002\n\u7b2c\u4e00\u6b21\u8fd0\u884c\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u4e3a\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u5fc5\u987b\u6784\u5efaDocker\u6620\u50cf\u5e76\u542f\u52a8Docker\u5bb9\u5668\u3002\u4e00\u65e6\u6210\u529f\u542f\u52a8\uff0c\u6211\u4eec\u5c06\u5728VS\u4ee3\u7801\u4e2d\u770b\u5230\u4ee5\u4e0b\u5e03\u5c40\u3002\u6211\u4eec\u521a\u521a\u4f20\u8f93\u5230\u8fdc\u7a0b\u4e3b\u673a\u5de5\u4f5c\u533a\u7684hello.sh\u6587\u4ef6\u4e5f\u663e\u793a\u5728VS Code\u5de5\u4f5c\u533a\u4e2d\u3002\n\u9a8c\u8bc1\u5bb9\u5668\u662f\u5426\u6309\u9884\u671f\u6210\u529f\u8fd0\u884c\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cNVIDIA\u575e\u7ad9\u5bb9\u5668\u5b9e\u4f8b\u5df2\u7ecf\u901a\u8fc7\u4f7f\u7528NVIDIA-SMI\u6210\u529f\u8fd0\u884c\uff0c\u5e76\u4e14GPU\u662fGeForce GT 640\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u65e7\u7684GPU\uff0c\u5b83\u4e0e\u6211\u5b89\u88c5\u5728\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684GPU\u76f8\u5339\u914d\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728VS\u4ee3\u7801\u7ec8\u7aef\u4e2d\u8fd0\u884c\u7a0b\u5e8f\u6216\u5728VS\u754c\u9762\u4e2d\u8c03\u8bd5\u7a0b\u5e8f\u3002\n\u5728\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u5b89\u88c5VS\u4ee3\u7801\u6269\u5c55\u4e5f\u53ef\u80fd\u6709\u52a9\u4e8e\u5f00\u53d1\u3002\n\u5b89\u88c5\u540e\uff0c\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684VS\u4ee3\u7801\u6269\u5c55\u5c06\u663e\u793a\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u9762\u677f\u4e2d\u3002\n\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5c06\u6587\u4ef6\u4ece\u8fdc\u7a0b\u4e3b\u673a\u4f20\u8f93\u56de\u672c\u5730\u8ba1\u7b97\u673a\u3002\nVS\u4ee3\u7801\u8fd8\u5177\u6709\u8fdc\u7a0bSSH\u6269\u5c55\u3002\u7528\u6237\u5c06\u80fd\u591f\u4f7f\u7528SSH\u8fdb\u5165\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\uff0c\u5e76\u5728\u672c\u5730VS\u4ee3\u7801GUI\u4e0a\u4fee\u6539\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u5728\u4e3b\u673a\u670d\u52a1\u5668\u672c\u673a\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14VS\u4ee3\u7801\u53ca\u5176\u6709\u7528\u7684\u8c03\u8bd5\u6269\u5c55\u65e0\u6cd5\u5728\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684Docker\u5bb9\u5668\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002", "note_en": "Sometimes, we would like to develop or debug programs which could only be run on a remote powerful host server, such as a multi-GPU deep learning training program. Setting up a containerized development environment on the host server and being able to communicate to the remote containerized development environment via local IDEs are necessary. It turns out that VS Code could do this with its extensions.\n  In this blog post, I would like to talk about how to set up the VS Code Docker development environment on a remote host, develop and debug programs in the remote Docker development environment from local VS Code GUI.\n   Follow the  instruction to set up the SSH key based authentication to the remote host server, so that we don\u2019t need password every time to login to the remote host server.\n  Concretely, if we don\u2019t have the public key, which is usually  ~/.ssh/id_rsa.pub, generated, we could generate the public key by running the following command on the local computer.\n  Once we have generated the public key, we would have to copy the public key to the remote host by running the following command. We would need to enter the password once to the remote host server.\n  Once the SSH key based authentication was set up, we no longer have have enter the password when we login the remote host server. Verify this by SSH into the remote host.\n   By default, the VS Code Remote-Container uses local Docker host. This means that we are actually running the containers on the local computer. To use the container running on the remote host server, we have to add  &#34;docker.host&#34;:&#34;your-user-name-on-host@hostname&#34; to VS Code  settings.json. It is usually located in  ~/.config/Code/User/.\n    We would have to create a directory on the remote host as the workspace for VS Code. We could transfer existing files from local to remote host or transfer new or modified files from remote host to local.\n    On the local computer, we transfer the file to remote host using  scp. We could also use  rsync or whatever transfer tools we feel comfortable with.\n     Create a directory for VS Code Workspace. Create a  devcontainer.json in the subdirectory  .devcontainer. Use the JSON similar to the following one.\n // For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file&#39;s README at:// https://github.com/microsoft/vscode-dev-containers/tree/v0.117.1/containers/docker-existing-dockerfile{\t&#34;name&#34;: &#34;VS Code Remote Demo&#34;,\t// Sets the run context to one level up instead of the .devcontainer folder.\t&#34;context&#34;: &#34;..&#34;,\t// Update the &#39;dockerFile&#39; property if you aren&#39;t using the standard &#39;Dockerfile&#39; filename.\t&#34;dockerFile&#34;: &#34;../docker/nvidia.Dockerfile&#34;,\t// Set *default* container specific settings.json values on container create.\t&#34;settings&#34;: { \t\t&#34;terminal.integrated.shell.linux&#34;: null\t},\t// Add the IDs of extensions you want installed when the container is created.\t&#34;extensions&#34;: [],\t// Use &#39;forwardPorts&#39; to make a list of ports inside the container available locally.\t// &#34;forwardPorts&#34;: [],\t// Uncomment the next line to run commands after the container is created - for example installing git.\t// &#34;postCreateCommand&#34;: &#34;apt-get update &amp;&amp; apt-get install -y git&#34;,\t// Uncomment when using a ptrace-based debugger like C++, Go, and Rust\t// &#34;runArgs&#34;: [ &#34;--cap-add=SYS_PTRACE&#34;, &#34;--security-opt&#34;, &#34;seccomp=unconfined&#34; ], &#34;runArgs&#34;: [ &#34;--gpus&#34;, &#34;device=0&#34; ],\t// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-in-docker.\t// &#34;mounts&#34;: [ &#34;source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind&#34; ],\t// Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root.\t// &#34;remoteUser&#34;: &#34;vscode&#34; // Using volume\t// &#34;image&#34;: &#34;ubuntu-remote-test:0.0.1&#34;, // Or &#34;dockerFile&#34;\t// &#34;workspaceFolder&#34;: &#34;/workspace&#34;,\t// &#34;workspaceMount&#34;: &#34;source=remote-workspace,target=/workspace,type=volume&#34;\t// Using bind\t// /home/leimao/Workspace/vs-remote-workspace/ is a directory on the remote host computer // &#34;workspaceFolder&#34; is the folder in the Docker container as workspace // target=/workspace is the folder in the Docker container that the workspace on the host server are going to bind to\t&#34;workspaceFolder&#34;: &#34;/workspace&#34;,\t&#34;workspaceMount&#34;: &#34;source=/home/leimao/Workspace/vs-remote-workspace/,target=/workspace,type=bind,consistency=cached&#34;,}\n Note that  &#34;dockerFile&#34; has to correctly point to the local Dockerfile we are going to use. We also provide additional Docker running arguments to  &#34;runArgs&#34;.\n  Click  Remote-Containers: Open Folder in Container. Open the local workspace that has the  .devcontainer/devcontainer.json we have just configured.\n  The first time we run this might take a while since the remote host server has to build the Docker image and start Docker container. Once it has been successfully started, we would see the following layout in VS Code. The  hello.sh file we have just transferred to the remote host workspace is also shown in VS Code workspace.\n  Verify the container is running successfully as expected. We could see that the NVIDIA docker container instance has successfully run by using  nvidia-smi and the GPU is  GeForce GT 640, a very old one, which matches to the one I installed on my remote host server.\n  We can then run programs in the VS Code terminal or debug programs in the VS interface.\n  Installing VS Code extensions on the remote host server might also be helpful for development.\n  After installation, the VS Code extensions on the remote host server would be shown in an independent panel.\n   Once the development has finished, don\u2019t forget to transfer the files back from the remote host to the local computer.\n  VS Code also has a  Remote - SSH extension. The user would be able to use to SSH into a remote host server and modify the files on the remote host server on local VS Code GUI. However, the programs might not be able to run on the host server native system, and VS Code and its useful debugging extensions could not be directly used in the Docker container on the host server.", "posttime": "2020-06-12 19:05:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "docker,\u4ee3\u7801,\u5f00\u53d1,development,\u8fdc\u7a0b", "title": "\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u4f7f\u7528Docker\u5bb9\u5668\u8fdb\u884cVS\u4ee3\u7801\u5f00\u53d1", "title_en": "VS Code Development Using Docker Containers on Remote Host", "transed": 1, "url": "https://leimao.github.io/blog/VS-Code-Development-Remote-Host-Docker/", "via": "", "real_tags": ["docker", "\u4ee3\u7801", "\u5f00\u53d1", "\u8fdc\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "8159d83cd2d13aa70018d6f457e18dee.png", "infoid": 1006273, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8dc3\u641c\u7d22\u80fd\u6e90\u5974\u96b6\u662f\u6307\u7528\u4e8e\u5efa\u9020\u548c\u9a71\u52a8\u975e\u4eba\u7c7b\u57fa\u7840\u8bbe\u65bd(\u673a\u5668\u3001\u9053\u8def\u3001\u7535\u7f51\u3001\u71c3\u6599\u3001\u8f7d\u8fd0\u52a8\u7269\u3001\u98ce\u529b\u9a71\u52a8\u6cf5\u7b49)\u7684\u80fd\u91cf(\u505a\u529f\u7684\u80fd\u529b)\u3002\u4ee3\u66ff\u4e00\u4e2a\u4eba\u529b\u5355\u4f4d(\u5b9e\u9645\u5de5\u4f5c)\u3002\u80fd\u6e90\u5974\u96b6\u901a\u8fc7\u6d88\u8017\u975e\u4eba\u7c7b\u57fa\u7840\u8bbe\u65bd\u4e2d\u7684\u80fd\u6e90\u6765\u5b8c\u6210\u4eba\u7684\u5de5\u4f5c\u3002[1]\u3002\n1940\u5e74\uff0c\u7406\u67e5\u5fb7\u00b7\u5df4\u514b\u660e\u65af\u7279\u00b7\u5bcc\u52d2(Richard Buckminster Fuller)\u662f\u7b2c\u4e00\u4e2a\u5728\u201c\u8d22\u5bcc\u201d\u6742\u5fd7(Fortune)\u7684\u5730\u56fe\u4e0a\u4f7f\u7528\u201c\u80fd\u6e90\u5974\u96b6\u201d\u8fd9\u4e00\u672f\u8bed\u7684\u4eba[2]\u3002\u4ed6\u901a\u8fc7\u5c06\u5de5\u4e1a\u6d88\u8017\u7684\u77ff\u7269\u548c\u6c34\u7684\u80fd\u91cf\u9664\u4ee5\u4eba\u7c7b\u63d0\u4f9b\u7684\u80fd\u91cf\u6765\u8ba1\u7b97\u80fd\u6e90\u5974\u96b6\u7684\u4ea7\u91cf\u3002\u5bcc\u52d2\u4f30\u8ba1\uff0c\u5bf9\u4e8e\u521a\u521a\u8d85\u8fc720\u4ebf\u4eba\u53e3(\u786e\u5207\u5730\u8bf4\u662f21.25\u4ebf)\u7684\u4e16\u754c\u4eba\u53e3\u6765\u8bf4\uff0c\u5f53\u65f6\u6709360\u4ebf\u80fd\u6e90\u5974\u96b6\uff0c\u76f8\u5f53\u4e8e\u4eba\u574717\u4eba\u30021940\u5e74\uff0c\u8fd9\u4e9b\u80fd\u6e90\u5974\u96b6\u5728\u4e16\u754c\u5404\u5730\u7684\u5206\u914d\u5e76\u4e0d\u516c\u5e73\uff1a\u7f8e\u56fd\u62e5\u6709200\u4ebf\u80fd\u6e90\u5974\u96b6(\u5360\u4e16\u754c\u603b\u6570\u768454%)[3]\u30021950\u5e74\uff0c\u5bcc\u52d2\u5411\u4e0a\u4fee\u6b63\u4e86\u4ed6\u7684\u8ba1\u7b97\uff0c\u4f30\u8ba1\u5e73\u5747\u6bcf\u4e2a\u4eba\u62e5\u670938\u4e2a\u80fd\u91cf\u5974\u96b6[2]\u3002\n1963\u5e74\uff0c\u963f\u5c14\u5f17\u96f7\u5fb7\u00b7\u52d2\u5185\u00b7\u4e4c\u8d1d\u6d1b\u5fb7(Alfred Ren\u00e9Ubbelohde)\u4e5f\u5728\u4ed6\u7684\u8457\u4f5c\u201c\u4eba\u4e0e\u80fd\u6e90\u201d[4]\u4e2d\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6982\u5ff5\u3002\u5728\u5fb7\u56fd\uff0c\u7269\u7406\u5b66\u5bb6\u6c49\u65af-\u5f7c\u5f97\u00b7\u8fea\u5c14(Hans-Peter D\u00fcrr)\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6982\u5ff5[5]\u3002\u8fd9\u4e2a\u672f\u8bed\u4e5f\u57281975\u5e74\u7684\u4e00\u672c\u4e66[6]\u4e2d\u63d0\u5230\uff0c\u5e76\u5728\u79d1\u5b66\u6587\u732e\u4e2d\u6d41\u884c\u8d77\u6765\u3002\n2001\u5e74\u5728\u745e\u58eb\u4e3e\u529e\u7684\u4e00\u573a\u5c55\u89c8\uff0c\u6839\u636e\u6d1b\u6851EPFL-Gecos\u5b9e\u9a8c\u5ba4\u7684\u5965\u5229\u7ef4\u5c14\u00b7\u4e54\u4f0a\u83b1\u7279(Olivier Joillet)\u7684\u6307\u5bfc\u4e0b\u7684\u56fe\u62c9\u5185\u00b7\u79d1\u6bd4\u57c3-\u5c3c\u79d1\u5229\u5c14(Tourane Corbi\u00e8re-Nicollier)\u6240\u505a\u7684\u5de5\u4f5c\uff0c\u7ed9\u51fa\u4e86\u201c\u80fd\u6e90\u5974\u96b6\u201d\u7684\u6d41\u884c\u5b9a\u4e49\u3002\u7ed9\u51fa\u7684\u5b9a\u4e49\u662f\u02d0&#34\uff1b\u80fd\u91cf\u5974\u96b6\u662f\u4e00\u79cd\u6d4b\u91cf\u5355\u4f4d\uff0c\u5b83\u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u597d\u5730\u7406\u89e3\u548c\u8bc4\u4f30\u6211\u4eec\u751f\u6d3b\u9009\u62e9\u7684\u540e\u679c\u3002\u4e00\u540d\u80fd\u6e90\u5974\u96b6\u4e00\u592924\u5c0f\u65f6\u4e3a\u751f\u4ea7\u80fd\u6e90\u800c\u5de5\u4f5c\u3002\u4ed6\u7684\u5e73\u5747\u8f93\u51fa\u529f\u7387\u4e3a100\u74e6(875\u5343\u74e6\u65f6/\u5e74)\u3002\n\u5728\u6cd5\u56fd\uff0c\u8ba9-\u9a6c\u514b\u00b7\u626c\u79d1\u7ef4\u5947(Jean-Marc Jancovici)\u4f7f\u7528\u4e86\u201c\u80fd\u6e90\u5974\u96b6\u201d\u4e00\u8bcd\uff0c\u5386\u53f2\u5b66\u5bb6\u8ba9-\u5f17\u6717\u7d22\u74e6\u00b7\u7a46\u7279(Jean-Fran\u00e7ois Mouhot)\u5bf9\u6b64\u8fdb\u884c\u4e86\u7814\u7a76\u3002Jean-Marc Jancovici\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a[.]\u3002\u5728\u6c11\u4e3b\u56fd\u5bb6\uff1a\u5982\u679c\u6211\u4eec\u628a\u81ea\u5df1\u653e\u5728\u7269\u7406\u5b66\u9886\u57df\uff0c\u4e0d\u4ec5\u8fbe\u7d22\u5148\u751f\u6216\u82f1\u56fd\u5973\u738b\u7684\u751f\u6d3b\u65b9\u5f0f\u53d8\u5f97\u4e0d\u53ef\u6301\u7eed\uff0c\u5305\u62ec\u5de5\u5382\u5de5\u4eba\u3001\u6e05\u6d01\u5de5\u548c\u8d85\u5e02\u6536\u94f6\u5458\u5728\u5185\u7684\u6211\u4eec\u6bcf\u4e00\u4e2a\u4eba\u7684\u751f\u6d3b\u65b9\u5f0f\u90fd\u53d8\u5f97\u4e0d\u53ef\u6301\u7eed\u3002\u201c\u3002\n\u4eba\u5747\u80fd\u6e90\u5974\u96b6\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u8ba1\u7b97\u65b9\u6cd5\uff1a\u8981\u4e48\u6211\u4eec\u4f7f\u7528\u5974\u96b6\u4e00\u5e74365\u5929\u6bcf\u592924\u5c0f\u65f6\u63d0\u4f9b\u7684\u5e73\u5747\u80fd\u91cf\uff0c\u8981\u4e48\u50cf\u5bcc\u52d2\u90a3\u6837\uff0c\u6211\u4eec\u4f7f\u7528\u5065\u5eb7\u7684\u4e2a\u4eba\u6bcf\u5468\u5de5\u4f5c40\u5c0f\u65f6(\u62163\u5343\u74e6\u65f6)\u63d0\u4f9b\u7684\u673a\u68b0\u80fd\u91cf[2]\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4f8b\u5982\uff0c\u4e00\u5347\u6c7d\u6cb9\u53ef\u4ee5\u63d0\u4f9b9kWh[2]\u6765\u8fd0\u884c\u4e00\u53f0\u53d1\u52a8\u673a\u3002\n\u80fd\u6e90\u5974\u96b6\u662f\u7528\u6765\u6bd4\u8f83\u4e00\u4e2a\u4eba\u7684\u751f\u4ea7\u529b\u548c\u5728\u73b0\u4ee3\u4ee5\u77f3\u6cb9\u4e3a\u71c3\u6599\u7684\u5de5\u4e1a\u7ecf\u6d4e\u4e2d\u751f\u4ea7\u8fd9\u9879\u5de5\u4f5c\u6240\u9700\u7684\u80fd\u6e90\uff0c\u5c3d\u7ba1\u5b83\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u4f7f\u7528\u975e\u4eba\u7c7b\u6765\u6e90\u7684\u80fd\u6e90\u751f\u4ea7\u52b3\u52a8\u529b\u7684\u5730\u65b9\u3002\u5b83\u4e0d\u5305\u62ec\u7834\u574f\u73af\u5883\u6216\u793e\u4f1a\u7ed3\u6784\u7684\u9644\u5e26\u6210\u672c\u3002\u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u4e00\u4e2a\u80fd\u6e90\u5974\u96b6\u901a\u8fc7\u5de5\u4e1a\u7ecf\u6d4e\u63d0\u4f9b\u7684\u975e\u4eba\u7c7b\u5de5\u5177\u548c\u80fd\u6e90\u751f\u4ea7\u4e00\u4e2a\u5355\u4f4d\u7684\u4eba\u7c7b\u52b3\u52a8\uff0c\u56e0\u6b641ES\u4e58\u4ee5\u8f6c\u6362\u4e3a\u5b8c\u6210\u7684\u529f\u7684\u5e38\u6570=1\u4e2a\u4eba\u7c7b\u52b3\u52a8\u5355\u4f4d\u3002\nJean-Fran\u00e7ois Mouhot\uff0c\u201cesclaves\u00e9nerg\u00e9tique-R\u00e9fleion sur le Changement Climate atique\u201d\uff0cChamp Vallon\u7248\uff0c2011[7]\u3002\n(En)\u5b89\u5fb7\u9c81\u00b7\u5c3c\u57fa\u798f\u9c81\u514b(Andrew Nikiforuk)\uff0c\u300a\u5974\u96b6\u7684\u80fd\u91cf\uff1a\u77f3\u6cb9\u4e0e\u65b0\u5974\u5f79\u300b(The Energy Of Slaves\uff1aOil and the New Serve)\uff0cGreystone Books\uff0c2012\u5e748\u670817\u65e5\uff0c272\u9875\u3002(ISBN978-1-55365-979-2\uff0c\u5728\u7ebf\u9605\u8bfb[\u6863\u6848][8])\u3002\n(En)\u9c8d\u52c3\u00b7\u7ea6\u7ff0\u900a\uff0c\u201c\u77ff\u7269\u4eea\u5f0f\uff1a\u5316\u77f3\u7ecf\u6d4e\u7684\u8003\u53e4\u201d\uff0cJHU\u51fa\u7248\u793e\uff0c2019\u5e743\u670826\u65e5\uff0c256\u9875[9]\u3002\n^a b c d Imre Szeman\uff1b\u591a\u7c73\u5c3c\u514b\u00b7\u535a\u8036(2017-04-22)\u3002JHU\u51fa\u7248\u793e(\u4e3b\u7f16)\u3002\u80fd\u6e90\u4eba\u6587\u79d1\u5b66\uff1a\u9009\u96c6\u3002\u7b2c210\u9875\u3002ISBN\u7535\u8bdd\uff1a978-1-4214-2189-6\u3002\n\u514b\u91cc\u65af\u8482\u5b89\u00b7\u683c\u96f7\u592b(1999-10-07)\u3002\u5728\u5fb7\u963f\u5c14\u7a46\u8328\u6cd5\u5c14\u7684\u80fd\u91cf\u4e4b\u6cc9(Energieslaven In Der Armusfalle)\u3002Die Zeit(\u5fb7\u8bed)\u3002ISSN\uff1a0044-2070\u3002\n\u7f57\u4f2f\u7279\u00b7S\u00b7\u52b3\u65af\uff1b\u7f57\u4f2f\u7279\u00b7\u6b27\u6587\u65af\u00b7\u53f2\u5bc6\u65af(1975-03-01)\u3002\u9ea6\u514b\u7c73\u4f26(\u4e3b\u7f16)\u3002\u80fd\u6e90\uff1a\u8d44\u6e90\u3001\u5974\u96b6\u3001\u6c61\u67d3\u7269\uff1a\u7269\u7406\u79d1\u5b66\u6587\u672c\u3002ISBN978-0-02-404000-8\u3002\n\uff1f\u5386\u53f2\u5b66\u5bb6\u6cd5\u6bd4\u5b89\u00b7\u6d1b\u5f7b(Fabien Locher)\u7684\u6279\u5224\u6027\u8bc4\u8bba\uff0cL\u2018Histoire Face\u00e0la Crise Climate atique\uff0c2011\u5e7411\u6708\uff1b\u5728La Vie des Id\u00e9es\u7f51\u7ad9\u4e0a\u3002", "note_en": "Jump to navigation  Jump to search  An  energy slave is that quantity of energy (ability to do work) which, when used to construct and drive non-human  infrastructure ( machines,  roads,  power grids,  fuel, draft animals,  wind-driven pumps, etc.) replaces a unit of  human labor (actual work). An energy slave does the work of a person, through the  consumption of energy in the non-human infrastructure.  [1]\n   In 1940,  Richard Buckminster Fuller was the first  [2] to use the term &#34;energy slave&#34; in a map in   Fortune  [3]. He calculated the yield of an energy slave by taking the energy from minerals and water consumed by industry and dividing it by the energy provided by a human being. For a world population of just over two billion people (2 125 000 000 exactly), Fuller estimates that there are thirty-six billion energy slaves at the time, representing 17 per capita. In 1940, these energy slaves were not equitably distributed around the world: the  United States owned twenty billion of them (54% of the world total)  [3]. In  1950, Fuller revised his calculations upwards and estimated that, on average, each human holds 38 energy slaves  [2].\n In 1963,  Alfred Ren\u00e9 Ubbelohde also used this concept in his book  Man and Energy  [4]. In  Germany, the  physicist  Hans-Peter D\u00fcrr used this concept  [5]. The term is also mentioned in a 1975 book  [6] and has become popular in the scientific literature.\n An exhibition in  Switzerland in  2001 presents a popularised definition of &#34;energy slaves&#34; based on the work carried out by Tourane Corbi\u00e8re-Nicollier under the supervision of Olivier Joillet of the EPFL-GECOS laboratory in Lausanne. The definition given is \u02d0 &#34;The energy slave is a unit of measurement that allows us to better understand and evaluate the consequences of our life choices. An energy slave works to produce energy 24 hours a day. He produces an average power output of 100 W (875 kWh/year).&#34;\n In  France, the term energy slave is used by  Jean-Marc Jancovici and has been studied by the  historian Jean-Fran\u00e7ois Mouhot. Jean-Marc Jancovici draws the following conclusion: &#34;[...] in a democracy: it is not only the way of life of Mr. Dassault or the Queen of England that has become unsustainable if we put ourselves in the realm of physics, but that of each and every one of us, including factory workers, cleaners and supermarket cashiers.\u201d\n  The number of energy slaves per capita depends on the method of calculation: either we take the average energy provided by a slave 24 hours a day, 365 days a year , or, as Fuller does, we use the mechanical energy provided by a healthy individual working 40 hours a week (or 3 kWh)  [2]. In comparison, a litre of gasoline can provide 9kWh  [2] to run an engine for example.\n  An energy slave is used to compare the productivity of a person and the energy that would be required to produce that work in the modern,  oil fuelled industrial  economy, although it could be applied anywhere that labor is produced with non-human sourced energy. It does not include the ancillary  costs of  damage to the environment or social structures. Formally, one energy slave produces one unit of human labor through the non-human tools and energy supplied by the industrial economy, and therefore 1 ES times a constant that converts to work accomplished = 1 human labor unit.\n  Jean-Fran\u00e7ois Mouhot,  Des esclaves \u00e9nerg\u00e9tiques - R\u00e9flexions sur le changement climatique, Champ Vallon editions, 2011  [7].\n (en) Andrew Nikiforuk, The Energy of Slaves\u00a0: Oil and the New Servitude, Greystone Books, August 17, 2012, 272 p. ( ISBN\u00a0 978-1-55365-979-2, read online [archive]  [8]).\n (en) Bob Johnson, Mineral Rites\u00a0: An Archaeology of the Fossil Economy, JHU Press, march 26, 2019, 256 p.  [9]\n  ^     a     b     c     d   Imre Szeman; Dominic Boyer (2017-04-22). JHU Press (ed.).   Energy Humanities\u00a0: An Anthology. p.\u00a0210.  ISBN\u00a0  978-1-4214-2189-6 .\n   ^   Christiane Grefe (1999-10-07).  &#34;Energiesklaven in der Armutsfalle&#34;.   Die Zeit (in German).  ISSN\u00a0 0044-2070 .\n ^   Robert S. Rouse; Robert OwensSmith (1975-03-01). Macmillan (ed.).   Energy\u00a0: resource, slave, pollutant :A physical science text.  ISBN\u00a0  978-0-02-404000-8 .\n ^  Critical review by historian Fabien Locher,  L\u2019Histoire face \u00e0 la crise climatique, november 2011; on the website  La vie des Id\u00e9es.", "posttime": "2020-06-12 18:31:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u80fd\u6e90,energy,\u5974\u96b6", "title": "\u80fd\u6e90\u5974\u96b6", "title_en": "Energy Slave", "transed": 1, "url": "https://en.wikipedia.org/wiki/Energy_slave", "via": "", "real_tags": ["\u80fd\u6e90", "energy", "\u5974\u96b6"]}, {"category": "", "categoryclass": "", "imagename": "50ce99fc0b2c90862b9e175132f62505.jpeg", "infoid": 1006272, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u51e0\u5929\uff0cTwitch Streamers\u51fa\u73b0\u4e86\u4e0d\u5c11\u4ee4\u4eba\u5934\u75bc\u7684\u95ee\u9898\u3002\u8be5\u516c\u53f8\u5df2\u7ecf(\u901a\u8fc7Evening Standard)\u627f\u8ba4\uff0c\u9488\u5bf9\u6d41\u5a92\u4f53\u7684DMCA\u4e0b\u7ebf\u8bf7\u6c42\u201c\u7a81\u7136\u6d8c\u5165\u201d\uff0c\u539f\u56e0\u662f\u4ed6\u4eec\u6d89\u5acc\u4fb5\u72af\u89c2\u4f17\u57282017\u5e74\u81f32019\u5e74\u671f\u95f4\u62cd\u6444\u7684\u526a\u8f91\u4e2d\u7684\u97f3\u4e50\u7248\u6743\u3002\u7531\u4e8e\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u90fd\u53ef\u80fd\u4ee3\u8868\u7740\u5bf9\u4e00\u4e2a\u8d26\u6237\u7684\u7f62\u5de5\uff0c\u8fd9\u589e\u52a0\u4e86\u6c38\u4e45\u7981\u6b62\u90a3\u4e9b\u53ef\u80fd\u5728\u76f8\u5bf9\u8f83\u5c11\u7684\u8b66\u544a\u4e0b\u88ab\u51fb\u4e2d\u4e09\u6b21\u7684\u6d41\u5a92\u4f53\u7528\u6237\u7684\u5a01\u80c1-\u4ee5\u53ca\u4ed6\u4eec\u751a\u81f3\u6ca1\u6709\u9009\u62e9\u521b\u5efa\u7684\u526a\u8f91\u3002\n\u4e9a\u9a6c\u900a\u65d7\u4e0b\u7684\u8fd9\u9879\u670d\u52a1\u5efa\u8bae\u5e7f\u64ad\u516c\u53f8\u5220\u9664\u4efb\u4f55\u53d7\u5f71\u54cd\u7684\u526a\u8f91\u3002\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7f13\u6162\u7684\u8fc7\u7a0b\u3002\u60a8\u4e00\u6b21\u53ea\u80fd\u5220\u9664\u4e00\u5c0f\u90e8\u5206\uff0c\u6d41\u884c\u7684\u6d41\u5a92\u4f53\u53ef\u80fd\u6709\u6570\u5343\u4e2a\u526a\u8f91\u3002Twitch\u8868\u793a\uff0c\u5b83\u6b63\u5728\u52aa\u529b\u201c\u8ba9\u8fd9\u4e00[\u8fc7\u7a0b]\u53d8\u5f97\u66f4\u5bb9\u6613\u201d\uff0c\u4f46\u6ca1\u6709\u8be6\u7ec6\u8bf4\u660e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u9664\u4e86\u7a81\u7136\u7981\u4ee4\u7684\u5a01\u80c1\u4e4b\u5916\uff0c\u4e00\u8fde\u4e32\u7684\u7248\u6743\u8bf7\u6c42\u4e5f\u5e26\u6765\u4e86\u95ee\u9898\u3002\u5b83\u5c06\u4e00\u4e9b\u6d41\u5a92\u4f53\u7528\u6237\u7684\u751f\u8ba1\u7f6e\u4e8e\u5371\u9669\u4e4b\u4e2d\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u73a9Just Dance\u6216Beat Saber\u7b49\u97f3\u4e50\u6e38\u620f\u7684\u4eba-\u4ed6\u4eec\u9700\u8981\u4e0d\u65ad\u5730\u76d1\u7ba1\u4ed6\u4eec\u7684\u526a\u8f91\u5417\uff1f\u8fd9\u4e5f\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u4e3a\u4ec0\u4e48\u7528\u6237\u4e00\u5f00\u59cb\u5c31\u88ab\u5141\u8bb8\u5236\u4f5c\u6709\u95ee\u9898\u7684\u526a\u8f91\uff0c\u5373\u4f7f\u6d41\u5a92\u4f53\u7528\u6237\u88ab\u5141\u8bb8\u5728\u73b0\u573a\u8868\u6f14\u4e2d\u4f7f\u7528\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u6750\u6599-\u5047\u8bbeDMCA\u7684\u58f0\u660e\u9996\u5148\u662f\u5408\u6cd5\u7684\u3002\u53ea\u60f3\u8981\u80cc\u666f\u97f3\u4e50\u7684\u6d41\u5a92\u4f53\u7528\u6237\u5df2\u7ecf\u6279\u51c6\u4e86\u8fd9\u4e9b\u9009\u9879\uff0c\u4f46\u5176\u4ed6\u4eba\u53ef\u80fd\u4e0d\u5f97\u4e0d\u620f\u5267\u6027\u5730\u6539\u53d8\u4ed6\u4eec\u6700\u521d\u8ba4\u4e3a\u662f\u5408\u6cd5\u7684\u884c\u4e3a\u3002\n\ud83d\udce2\u672c\u5468\uff0c\u6211\u4eec\u7a81\u7136\u6536\u5230\u4e86\u5927\u91cf\u8981\u6c42\u4ece2017\u5e74\u523019\u5e74\u64a4\u4e0b\u6709\u80cc\u666f\u97f3\u4e50\u7684\u526a\u8f91\u7684\u8bf7\u6c42\u3002\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u8fc7\u53bb\u6d41\u4e2d\u97f3\u9891\u7684\u6743\u5229\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u5220\u9664\u8fd9\u4e9b\u526a\u8f91\u3002\u6211\u4eec\u77e5\u9053\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u90fd\u6709\u5f88\u5927\u7684\u6863\u6848\uff0c\u6211\u4eec\u6b63\u5728\u52aa\u529b\u8ba9\u8fd9\u4ef6\u4e8b\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\n-Twitch\u652f\u6301(@TwitchSupport)2020\u5e746\u67088\u65e5", "note_en": "Twitch streamers have had more than a few headaches in recent days. The company has  acknowledged (via   Evening Standard) a \u201csudden influx\u201d of DMCA takedown requests against streamers for allegedly violating music copyright in clips captured by viewers between 2017 and 2019. As each request potentially represents a strike against an account, this raises the threat of permanent bans for streamers who might get three strikes with relatively little warning \u2014 and for clips they didn\u2019t even choose to create.\n The Amazon-owned service is recommending that broadcasters delete any affected clips. However, it\u2019s a very slow process. You can only delete a handful at a time, and popular streamers may have thousands of clips. Twitch said it was working to \u201cmake this [process] easier,\u201d but didn\u2019t elaborate how.\n  The flurry of copyright requests creates problems on top of the threat of sudden bans. It puts the livelihoods of some streamers at risk, particularly those who play music games like   Just Dance or   Beat Saber \u2014 will they have to constantly police their clips? It also raises the question of why users are allowed to create problematic clips in the first place, even when streamers are allowed to use copyrighted material for live shows \u2014 assuming the DMCA claims are legitimate in the first place. Streamers who just want background music have  approved options, but others may have to dramatically alter behavior they thought was legal in the first place.\n   \ud83d\udce2 This week, we&#39;ve had a sudden influx of DMCA takedown requests for clips with background music from 2017-19. If you\u2019re unsure about rights to audio in past streams, we advise removing those clips. We know many of you have large archives, and we&#39;re working to make this easier.\n\u2014 Twitch Support (@TwitchSupport)  June 8, 2020", "posttime": "2020-06-12 18:15:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "streamers,\u526a\u8f91", "title": "Twitch Streamers\u6536\u5230\u65e7\u526a\u8f91\u97f3\u4e50\u7248\u6743\u8981\u6c42\u7684\u6d2a\u6d41", "title_en": "Twitch Streamers Receive a Flood of Music Copyright Claims For Old Clips", "transed": 1, "url": "https://www.engadget.com/twitch-streamers-receive-flood-of-dmca-music-claims-131901691.html", "via": "", "real_tags": ["streamers", "\u526a\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006271, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u5e0c\u671b\u6709\u4e00\u4efd\u5728\u7ebf\u53c2\u8003\uff0c\u63d0\u4f9b\u8fd1\u5e74\u6765\u6bcf\u4e2a\u516c\u5f00\u7684iOS\u5185\u6838\u6f0f\u6d1e\u5229\u7528\u7684\u9ad8\u7ea7\u5229\u7528\u6d41\u7684\u7b80\u8981\u6458\u8981\uff1b\u7531\u4e8e\u6ca1\u6709\u8fd9\u6837\u7684\u6587\u6863\uff0c\u6211\u51b3\u5b9a\u5728\u8fd9\u91cc\u521b\u5efa\u5b83\u3002\n\u672c\u6587\u603b\u7ed3\u4e86\u9488\u5bf9IOS 10\u5230IOS 13\u7684\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u7684\u539f\u59cbIOS\u5185\u6838\u653b\u51fb\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u4ece\u6f0f\u6d1e\u6388\u4e88\u7684\u521d\u59cb\u539f\u8bed\u5230\u5185\u6838\u8bfb/\u5199\u7684\u9ad8\u7ea7\u5229\u7528\u6f0f\u6d1e\u6d41\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u6700\u540e\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u4ecb\u7ecdIOS\u5185\u6838\u5229\u7528\u6f0f\u6d1e\u7684\u7f13\u89e3\u63aa\u65bd(\u786c\u4ef6\u548c\u8f6f\u4ef6\u65b9\u9762)\uff0c\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u4e0e\u5229\u7528\u6f0f\u6d1e\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u76f8\u5bf9\u5e94\u3002\n\u8fd9\u4e0d\u662f\u4f60\u5178\u578b\u7684P0\u535a\u5ba2\u6587\u7ae0\uff1a\u6ca1\u6709\u6263\u4eba\u5fc3\u5f26\u7684\u96f6\u65e5\u653b\u51fb\uff0c\u6ca1\u6709\u65b0\u5947\u7684\u653b\u51fb\u7814\u7a76\uff0c\u4e5f\u6ca1\u6709\u60ca\u5fc3\u52a8\u9b44\u7684\u6076\u610f\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u3002\u56e0\u4e3a\u6211\u9700\u8981\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u8ba4\u4e3a\u5176\u4ed6\u4eba\u53ef\u80fd\u4e5f\u4f1a\u89c9\u5f97\u6709\u7528\uff0c\u6240\u4ee5\u6211\u5199\u4e86\u8fd9\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u53c2\u8003\u3002\u5df2\u7ecf\u4e8b\u5148\u8b66\u544a\u8fc7\u4f60\u4e86\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u4e00\u672c\u540d\u4e3a\u201c\u5b89\u5168\u7814\u7a76\u4eba\u5458\u6280\u672f\u9ed1\u5ba2\u672f\u8bed\u201d\u7684\u6743\u5a01\u8bcd\u5178\uff0c\u8fd9\u4f7f\u5f97\u6211\u5f88\u96be\u51c6\u786e\u5730\u63cf\u8ff0\u6211\u60f3\u8981\u4f20\u8fbe\u7684\u4e00\u4e9b\u9ad8\u7ea7\u6982\u5ff5\u3002\u4e3a\u6b64\uff0c\u6211\u51b3\u5b9a\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587\u8d4b\u4e88\u4ee5\u4e0b\u672f\u8bed\u7279\u5b9a\u7684\u542b\u4e49\u3002\u5982\u679c\u8fd9\u4e9b\u5b9a\u4e49\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e0e\u60a8\u5bf9\u8fd9\u4e9b\u672f\u8bed\u7684\u7406\u89e3\u4e0d\u4e00\u81f4\uff0c\u8bf7\u968f\u65f6\u5efa\u8bae\u6539\u8fdb\u672f\u8bed\uff0c\u6211\u53ef\u4ee5\u66f4\u65b0\u6b64\u5e16\u5b50\u3002\uff1a)\u3002\n\u5e38\u89c1\u5229\u7528\u6f0f\u6d1e\u539f\u8bed\u7684\u51e0\u4e2a\u793a\u4f8b\u5305\u62ec\uff1aN\u5b57\u8282\u7ebf\u6027\u5806\u6ea2\u51fa\u3001\u53d7\u63a7\u5730\u5740\u5904\u7684\u6574\u6570\u9012\u589e\u3001Write-What-Where\u3001\u4efb\u610f\u5185\u5b58\u8bfb/\u5199\u3001PC\u63a7\u5236\u3001\u4efb\u610f\u51fd\u6570\u8c03\u7528\u7b49\u3002\n\u7279\u5b9a\u4e8eIOS\u5185\u6838\u653b\u51fb\u7684\u5e38\u89c1\u5229\u7528\u6f0f\u6d1e\u539f\u8bed\u662f\u62e5\u6709\u5bf9\u5047MACH\u7aef\u53e3(Struct IPC_PORT)\u7684\u53d1\u9001\u6743\u9650\uff0c\u8be5\u7aef\u53e3\u7684\u5b57\u6bb5\u53ef\u4ee5\u76f4\u63a5\u4ece\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u548c\u5199\u5165\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u7528\u4e8e\u5c06\u6f0f\u6d1e\u8f6c\u6362\u4e3a\u6709\u7528\u7684\u5229\u7528\u539f\u8bed\u7684\u4f4e\u7ea7\u3001\u7279\u5b9a\u4e8e\u6f0f\u6d1e\u7684\u65b9\u6cd5\u3002\n\u4f8b\u5982\uff0c\u8fd9\u662fIan Beer\u9488\u5bf9iOS 11.1.2\u7684Async_Wake\u5229\u7528\u4e2d\u4f7f\u7528\u7684\u5229\u7528\u7b56\u7565\uff1a\n\u4fe1\u606f\u6cc4\u6f0f\u88ab\u7528\u6765\u53d1\u73b0\u4efb\u610fMACH\u7aef\u53e3\u7684\u5730\u5740\u3002\u5206\u914d\u4e00\u9875\u7aef\u53e3\uff0c\u5e76\u57fa\u4e8e\u5176\u5730\u5740\u4ece\u8be5\u9875\u4e2d\u9009\u62e9\u7279\u5b9a\u7aef\u53e3\u3002IOSurfaceRootUserClient\u6f0f\u6d1e\u88ab\u89e6\u53d1\u4ee5\u91ca\u653eMach\u7aef\u53e3\uff0c\u4ece\u800c\u4ea7\u751f\u5bf9\u5df2\u77e5(\u548c\u90e8\u5206\u63a7\u5236)\u5730\u5740\u5904\u7684\u60ac\u7a7aMach\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u3002\n\u6700\u540e\u4e00\u90e8\u5206\u662f\u901a\u7528/\u4e0e\u6f0f\u6d1e\u65e0\u5173\u7684\u539f\u8bed\uff0c\u6211\u5c06\u5176\u89e3\u91ca\u4e3a\u7279\u5b9a\u4e8e\u6f0f\u6d1e\u7684\u5229\u7528\u7b56\u7565\u7684\u7ed3\u675f\u3002\n\u901a\u5e38\uff0c\u5229\u7528\u7b56\u7565\u7684\u76ee\u6807\u662f\u4ea7\u751f\u9ad8\u5ea6\u53ef\u9760\u7684\u5229\u7528\u539f\u8bed\u3002\n\u5229\u7528\u6280\u672f\uff1a\u5c06\u4e00\u4e2a\u5229\u7528\u539f\u8bed\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a(\u901a\u5e38\u66f4\u6709\u7528)\u5229\u7528\u539f\u8bed\u7684\u53ef\u91cd\u7528\u548c\u5408\u7406\u901a\u7528\u7684\u7b56\u7565\u3002\n\u9762\u5411\u8fd4\u56de\u7684\u7f16\u7a0b(ROP)\u5c31\u662f\u5229\u7528\u6f0f\u6d1e\u6280\u672f\u7684\u4e00\u4e2a\u793a\u4f8b\uff0c\u5b83\u901a\u8fc7\u91cd\u7528\u53ef\u6267\u884c\u4ee3\u7801\u5c0f\u5de5\u5177\u5c06\u4efb\u610fPC\u63a7\u5236\u8f6c\u53d8\u4e3a(\u51e0\u4e4e)\u4efb\u610f\u4ee3\u7801\u6267\u884c\u3002\n\u7279\u5b9a\u4e8eIOS\u5185\u6838\u653b\u51fb\u7684\u653b\u51fb\u6280\u672f\u662f\u4f7f\u7528\u4f2aMACH\u7aef\u53e3\u901a\u8fc7\u8c03\u7528pid_for_task()\u8bfb\u53d64\u5b57\u8282\u7684\u5185\u6838\u5185\u5b58(\u5c06\u5bf9\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u9650\u8f6c\u6362\u4e3a\u4efb\u610f\u5185\u6838\u5185\u5b58\u8bfb\u53d6\u539f\u8bed)\u3002\n\u5229\u7528\u6d41\uff1a\u9ad8\u7ea7\u3001\u6f0f\u6d1e\u65e0\u5173\u7684\u5229\u7528\u6280\u672f\u94fe\uff0c\u7528\u4e8e\u5c06\u6f0f\u6d1e\u6388\u4e88\u7684\u5229\u7528\u539f\u8bed\u8f6c\u6362\u4e3a\u6700\u7ec8\u76ee\u6807(\u5728\u672c\u6587\u4e2d\uff0c\u5185\u6838\u4ece\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u8bfb\u53d6/\u5199\u5165)\u3002\n\u672c\u8282\u5c06\u7b80\u8981\u6982\u8ff0\u9488\u5bf9IOS 10\u5230IOS 13\u7684\u672c\u5730\u4e0a\u4e0b\u6587\u4e2d\u7684IOS\u5185\u6838\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u3002\u6211\u5c06\u63cf\u8ff0\u9ad8\u7ea7\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u6d41\u7a0b\uff0c\u5e76\u5217\u51fa\u5b9e\u73b0\u8be5\u6d41\u7a0b\u6240\u4f7f\u7528\u7684\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u539f\u8bed\u548c\u6280\u672f\u3002\u867d\u7136\u6211\u8bd5\u56fe\u8ffd\u8e2a\u6bcf\u4e00\u4e2a\u539f\u59cb\u7684(\u5373\uff0c\u5728\u6f0f\u6d1e\u5229\u7528\u4ee3\u7801\u53d1\u5e03\u4e4b\u524d\u5f00\u53d1\u7684)\u516c\u5171\u5229\u7528\u6f0f\u6d1e\uff0c\u4f46\u6211\u9884\u8ba1\u6211\u53ef\u80fd\u9057\u6f0f\u4e86\u4e00\u4e9b\uff0c\u65e0\u8bba\u662f\u4f5c\u4e3a\u6e90\u4ee3\u7801\u8fd8\u662f\u4f5c\u4e3a\u8db3\u591f\u5b8c\u6574\u7684\u5199\u4f5c/\u6f14\u793a\u6587\u7a3f\u3002\u8bf7\u968f\u65f6\u8054\u7cfb\u5e76\u63d0\u51fa\u6211\u9057\u6f0f\u7684\u4efb\u4f55\u5efa\u8bae\uff0c\u6211\u53ef\u4ee5\u66f4\u65b0\u8fd9\u7bc7\u5e16\u5b50\u3002\n\u5bf9\u4e8e\u6bcf\u4e2a\u6f0f\u6d1e\uff0c\u6211\u90fd\u6982\u8ff0\u4e86\u6f0f\u6d1e\u3001\u6f0f\u6d1e\u7b56\u7565(\u7279\u5b9a\u4e8e\u6f0f\u6d1e)\u548c\u540e\u7eed\u7684\u6f0f\u6d1e\u6d41(\u4e00\u822c)\u3002\u6f0f\u6d1e\u653b\u51fb\u7684\u54ea\u4e9b\u90e8\u5206\u662f\u7279\u5b9a\u4e8e\u6f0f\u6d1e\u7684\uff0c\u54ea\u4e9b\u90e8\u5206\u8db3\u591f\u901a\u7528\uff0c\u53ef\u4ee5\u89c6\u4e3a\u6574\u4e2a\u6d41\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u754c\u9650\u662f\u4e3b\u89c2\u7684\u3002\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u90fd\u5f3a\u8c03\u4e86\u6211\u8ba4\u4e3a\u8db3\u591f\u901a\u7528\u7684\u6f0f\u6d1e\u6388\u4e88\u7684\u7279\u5b9a\u5229\u7528\u539f\u8bed\u3002\n\u6f0f\u6d1e\uff1aCVE-2016-7644\u662fXNU\u7684set_dp_control_port()\u4e2d\u7684\u4e89\u7528\u6761\u4ef6\uff0c\u4f1a\u5bfc\u81f4Mach\u7aef\u53e3\u8fc7\u5ea6\u91ca\u653e\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5206\u914d\u8bb8\u591aMACH\u7aef\u53e3\uff0c\u5e76\u901a\u8fc7\u7ade\u76f8SET_DP_CONTROL_PORT()\u5220\u9664\u5bf9\u5b83\u4eec\u7684\u5f15\u7528(\u53ef\u4ee5\u786e\u5b9a\u7ade\u4e89\u4f55\u65f6\u83b7\u80dc)\u3002\u901a\u8fc7\u5220\u9664\u9690\u85cf\u7684\u5f15\u7528\u6765\u91ca\u653e\u7aef\u53e3\uff0c\u8ba9\u6301\u6709\u5bf9\u60ac\u6302\u7684Mach\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u7684\u8fdb\u7a0b\u586b\u5145\u4e00\u9875\u5185\u5b58\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u901a\u8fc7\u8c03\u7528mach_zone_force_gc()\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u5e76\u4f7f\u7528\u5305\u542b\u6307\u5411\u4e3b\u673a\u7aef\u53e3\u7684\u6307\u9488\u7684\u884c\u5916(OOL)\u7aef\u53e3\u6570\u7ec4\u91cd\u65b0\u5206\u914d\u60ac\u6302\u7aef\u53e3\u7684\u9875\u9762\u3002\u5728\u5176\u4e2d\u4e00\u4e2a\u60ac\u6302\u7aef\u53e3\u4e0a\u8c03\u7528MACH_PORT_GET_CONTEXT()\u4ee5\u6cc4\u9732\u4e3b\u673a\u7aef\u53e3\u7684\u5730\u5740\u3002\u4f7f\u7528\u6b64\u503c\uff0c\u53ef\u4ee5\u731c\u6d4b\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u6240\u5728\u7684\u9875\u9762\u3002\u6bcf\u4e2a\u60ac\u7a7a\u7aef\u53e3\u7684\u4e0a\u4e0b\u6587\u503c\u88ab\u8bbe\u7f6e\u4e3a\u5305\u542b\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u7684\u9875\u9762\u4e0a\u6bcf\u4e2a\u6f5c\u5728IPC_\u7aef\u53e3\u7684\u5730\u5740\uff0c\u5e76\u4e14OOL\u7aef\u53e3\u88ab\u63a5\u6536\u56de\u7528\u6237\u7a7a\u95f4\uff0c\u4ee5\u5411\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u6388\u4e88\u53d1\u9001\u6743\u9650\u3002\n\u8c37\u6b4c\u5a01\u80c1\u5206\u6790\u5c0f\u7ec4\u7684Cl\u00e9ment Lecigne(@_clem1)\u5728\u91ce\u5916\u53d1\u73b0\u4e86\u8fd9\u79cd\u75c5\u6bd2\u3002Google Project Zero\u7684\u4f0a\u6069\u00b7\u6bd4\u5c14(Ian Beer)\u548c\u585e\u7f2a\u5c14\u00b7\u683c\u7f57\u4f2f(Samuel Groo)(@5aelo)\u5206\u6790\u4e86\u8fd9\u4e00\u70b9\u3002\n\u6f0f\u6d1e\uff1a\u8be5\u6f0f\u6d1e\u662f\u5bf9IOkit\u51fd\u6570AGXAllocationList2\uff1a\uff1ainitWithSharedResourceList()\u4e2d\u7684IOAccelResource\u6307\u9488\u7684\u7ebf\u6027\u5806\u8d8a\u754c\u5199\u5165\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u8981\u6ea2\u51fa\u7684\u7f13\u51b2\u533a\u76f4\u63a5\u653e\u5728recv_msg_elem\u7ed3\u6784\u4e4b\u524d\uff0c\u8fd9\u6837\u8d8a\u754c\u5199\u5165\u5c06\u4f7f\u7528IOAccelResource\u6307\u9488\u8986\u76d6uio\u6307\u9488\u3002IOAccelResource\u6307\u9488\u88ab\u91ca\u653e\u5e76\u4f7f\u7528\u5047\u7684UIO\u7ed3\u6784\u91cd\u65b0\u5206\u914d\uff0c\u8be5\u7ed3\u6784\u4f4d\u4e8e\u7531IOSurface\u5c5e\u6027\u7ba1\u7406\u7684OSData\u6570\u636e\u7f13\u51b2\u533a\u7684\u5f00\u5934\u3002UIO\u88ab\u91ca\u653e\uff0c\u7559\u4e0b\u4e00\u4e2a\u60ac\u6302\u7684OSData\u6570\u636e\u7f13\u51b2\u533a\u53ef\u901a\u8fc7IOSurface\u5c5e\u6027\u8bbf\u95ee\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\u7a0b\uff1a\u4f7f\u7528IOSurfaceRootUserClient\u5b9e\u4f8b\u91cd\u65b0\u5206\u914d\u6302\u8d77\u7684OSData\u6570\u636e\u7f13\u51b2\u533a\u63d2\u69fd\uff0c\u5e76\u901a\u8fc7IOSurface\u5c5e\u6027\u8bfb\u53d6\u6570\u636e\u5185\u5bb9\u4ee5\u63d0\u4f9bKASLR\u5e7b\u706f\u7247\u3001\u5f53\u524d\u4efb\u52a1\u7684\u5730\u5740\u548c\u6302\u8d77\u7684\u6570\u636e\u7f13\u51b2\u533a/IOSurfaceRootUserClient\u7684\u5730\u5740\u3002\u7136\u540e\uff0c\u4f7f\u7528IOSurfaceRootUserClient\u7684\u4fee\u6539\u7248\u672c\u91ca\u653e\u5e76\u91cd\u65b0\u5206\u914d\u6570\u636e\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u5728\u4fee\u6539\u540e\u7684\u7528\u6237\u5ba2\u6237\u7aef\u4e0a\u8c03\u7528\u5916\u90e8\u65b9\u6cd5\u5c06\u8fd4\u56de\u4ece\u5185\u6838s__data\u6bb5\u8bfb\u53d6\u7684\u5185\u6838\u4efb\u52a1\u7684\u5730\u5740\u3002\u518d\u6b21\u91ca\u653e\u548c\u91cd\u65b0\u5206\u914d\u6570\u636e\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u8c03\u7528\u5916\u90e8\u65b9\u6cd5\u5c06\u6267\u884cOSSerializer\uff1a\uff1aSerialize()\u5c0f\u5de5\u5177\uff0c\u4ece\u800c\u5bfc\u81f4\u4efb\u610f\u8bfb\u5199\uff0c\u5c06\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u7684\u5730\u5740\u5b58\u50a8\u5728\u5f53\u524d\u4efb\u52a1\u7684\u7279\u6b8a\u7aef\u53e3\u5217\u8868\u4e2d\u3002\u4ece\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u7279\u6b8a\u7aef\u53e3\u8d4b\u4e88\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u53d1\u9001\u6743\u9650\u3002\n\u6f0f\u6d1e\uff1aCVE-2017-2370\u662f\u53ef\u4eceXNU\u7684mach_voucher_Extract_Attr_Recipe_Trap()\u4e2d\u7684\u975e\u7279\u6743\u4e0a\u4e0b\u6587\u8bbf\u95ee\u7684\u7ebf\u6027\u5806\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u539f\u56e0\u662f\u653b\u51fb\u8005\u63a7\u5236\u7684\u7528\u6237\u7a7a\u95f4\u6307\u9488\u7528\u4f5c\u8c03\u7528copy in()\u7684\u957f\u5ea6\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u8c03\u7528\u6613\u53d7\u653b\u51fb\u7684Mach\u9677\u9631\u6765\u521b\u5efakalloc\u5206\u914d\uff0c\u5e76\u7acb\u5373\u7528\u53d7\u63a7\u6570\u636e\u6ea2\u51fa\uff0c\u4ece\u800c\u635f\u574f\u540e\u7eedIPC_KMSG\u5bf9\u8c61\u7684IKM_SIZE\u5b57\u6bb5\u3002\u8fd9\u4f1a\u5bfc\u81f4IPC_KMSG(\u4e3aMACH\u7aef\u53e3\u9884\u5148\u5206\u914d\u7684\u6d88\u606f)\u76f8\u4fe1\u5b83\u7684\u5bb9\u91cf\u6bd4\u5b83\u5927\uff0c\u4ece\u800c\u4e0e\u540e\u7eed\u5206\u914d\u7684\u524d240\u4e2a\u5b57\u8282\u91cd\u53e0\u3002\u901a\u8fc7\u5c06MACH\u7aef\u53e3\u6ce8\u518c\u4e3a\u7528\u6237\u7a7a\u95f4\u7ebf\u7a0b\u7684\u5f02\u5e38\u7aef\u53e3\uff0c\u7136\u540e\u4f7f\u5177\u6709\u53d7\u63a7\u5bc4\u5b58\u5668\u72b6\u6001\u7684\u7ebf\u7a0b\u5d29\u6e83\uff0c\u53ef\u4ee5\u91cd\u590d\u4e14\u53ef\u9760\u5730\u91cd\u5199\u540e\u7eed\u5206\u914d\u7684\u91cd\u53e0\u90e8\u5206\uff0c\u5e76\u4e14\u901a\u8fc7\u63a5\u6536\u5f02\u5e38\u6d88\u606f\u53ef\u4ee5\u8bfb\u53d6\u90a3\u4e9b\u5b57\u8282\u3002\u8fd9\u5728\u635f\u574f\u7684IPC_KMSG\u7684\u672b\u5c3e\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53d7\u63a7\u7684240\u5b57\u8282\u8d8a\u754c\u8bfb/\u5199\u539f\u8bed\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u5c06\u7b2c\u4e8c\u4e2aIPC_KMSG\u653e\u5728\u635f\u574f\u7684IPC_KMSG\u4e4b\u540e\u5e76\u8bfb\u53d6\uff0c\u4ee5\u4fbf\u786e\u5b9a\u5206\u914d\u7684\u5730\u5740\u3002\u63a5\u4e0b\u6765\uff0c\u5728\u76f8\u540c\u7684\u69fd\u4e2d\u91cd\u65b0\u5206\u914dAGXCommandQueue\u7528\u6237\u5ba2\u6237\u7aef\uff0c\u5e76\u8bfb\u53d6\u865a\u62df\u65b9\u6cd5\u8868\u4ee5\u786e\u5b9aKASLR\u5e7b\u706f\u7247\u3002\u7136\u540e\u8986\u76d6\u865a\u62df\u65b9\u6cd5\u8868\uff0c\u4ee5\u4fbfAGXCommandQueue\u4e0a\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\u8c03\u7528OSSerializer\uff1a\uff1aSerialize()\u5c0f\u90e8\u4ef6\uff0c\u4ece\u800c\u4ea7\u751f\u4e00\u4e2a\u53cc\u53c2\u6570\u4efb\u610f\u5185\u6838\u51fd\u6570\u8c03\u7528\u539f\u8bed\u3002\u8c03\u7528\u51fd\u6570uuid_copy()\u4f1a\u4ea7\u751f\u4efb\u610f\u5185\u6838\u8bfb/\u5199\u539f\u8bed\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u8c03\u7528\u6613\u53d7\u653b\u51fb\u7684Mach\u9677\u9631\u6765\u521b\u5efakalloc\u5206\u914d\uff0c\u5e76\u7acb\u5373\u7528\u53d7\u63a7\u6570\u636e\u6ea2\u51fa\uff0c\u8986\u76d6OOL\u7aef\u53e3\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u5e76\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u63d2\u5165\u6307\u5411\u5047Mach\u7aef\u53e3\u7684\u6307\u9488\u3002\u63a5\u6536\u5305\u542bOOL\u7aef\u53e3\u7684\u6d88\u606f\u4ea7\u751f\u5bf9\u5176\u5185\u5bb9\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u7684\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u3002\n\u968f\u540e\u7684\u653b\u51fb\u6d41\u7a0b\uff1a\u5047Mach\u7aef\u53e3\u88ab\u8f6c\u6362\u4e3a\u65f6\u949f\u7aef\u53e3\uff0c\u5e76\u4e14CLOCK_SLEEP_TRAP()\u7528\u4e8e\u66b4\u529b\u5f3a\u5236\u5185\u6838\u6620\u50cf\u6307\u9488\u3002\u7136\u540e\u5c06\u8be5\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u4ee5\u901a\u8fc7pid_for_task()\u8bfb\u53d6\u5185\u5b58\u3002\u5185\u6838\u5185\u5b58\u4ece\u6cc4\u6f0f\u7684\u5185\u6838\u6620\u50cf\u6307\u9488\u5411\u540e\u626b\u63cf\uff0c\u76f4\u5230\u627e\u5230\u5185\u6838\u6587\u672c\u5e93\uff0c\u4ece\u800c\u7834\u574fKASLR\u3002\u6700\u540e\uff0c\u6784\u9020\u4e86\u4e00\u4e2a\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u6f0f\u6d1e\uff1aAppleAVE2\u4e2d\u5b58\u5728\u591a\u4e2a\u6f0f\u6d1e\uff0c\u539f\u56e0\u662f\u5916\u90e8\u65b9\u6cd5\u4e0e\u7528\u6237\u7a7a\u95f4\u5171\u4eabIOSurface\u6307\u9488\u5e76\u4fe1\u4efb\u4ece\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u7684IOSurface\u6307\u9488\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u521b\u5efaIOSurface\u5bf9\u8c61\u5e76\u8c03\u7528AppleAVE2\u5916\u90e8\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5176\u5730\u5740\u3002IOSurface\u4e2dIOFence\u6307\u9488\u7684vtable\u4f7f\u7528\u53e6\u4e00\u4e2a\u5916\u90e8\u65b9\u6cd5\u8c03\u7528\u6cc4\u6f0f\uff0c\u4ece\u800c\u7834\u574fKASLR\u3002\u4f7f\u7528IOSurface\u5c5e\u6027\u55b7\u5c04\u91ca\u653eIOSurface\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u53d7\u63a7\u6570\u636e\u91cd\u65b0\u5206\u914d\u8be5\u5bf9\u8c61\u3002\u5c06\u6cc4\u6f0f\u7684\u6307\u9488\u63d0\u4f9b\u7ed9\u4fe1\u4efb\u4ece\u7528\u6237\u7a7a\u95f4\u63d0\u4f9b\u7684IOSurface\u6307\u9488\u7684AppleAVE2\u5916\u90e8\u65b9\u6cd5\u5141\u8bb8\u52ab\u6301\u5047IOSurface\u4e0a\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\uff1b\u8fd9\u5c06\u88ab\u89c6\u4e3aOneShot\u52ab\u6301\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u4e2d\u53d7\u63a7\u76ee\u6807\u5bf9\u8c61\u4f4d\u4e8e\u5df2\u77e5\u5730\u5740\u3002\n\u540e\u7eed\u5229\u7528\u6d41\u7a0b\uff1a\u52ab\u6301\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\u4e0eOSSerializer\uff1a\uff1aSerialize()\u5c0f\u5de5\u5177\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u8c03\u7528Copin()\u5e76\u8986\u76d62\u4e2asysctl_oid\u7ed3\u6784\u3002sysctl\u88ab\u8986\u76d6\uff0c\u4ee5\u4fbf\u8bfb\u53d6\u7b2c\u4e00\u4e2asysctl\u8c03\u7528copy in()\u6765\u66f4\u65b0\u7b2c\u4e8c\u4e2asysctl\u7684\u51fd\u6570\u6307\u9488\u548c\u53c2\u6570\uff0c\u800c\u8bfb\u53d6\u7b2c\u4e8c\u4e2asysctl\u4f7f\u7528OSSerializer\uff1a\uff1aSerialize()\u5c0f\u90e8\u4ef6\u8c03\u7528\u5e26\u67093\u4e2a\u53c2\u6570\u7684\u5185\u6838\u51fd\u6570\u3002\u8fd9\u4e2a\u5e26\u67093\u4e2a\u53c2\u6570\u7684\u4efb\u610f\u5185\u6838\u51fd\u6570\u8c03\u7528\u539f\u8bed\u7528\u4e8e\u901a\u8fc7\u8c03\u7528copy in()/copy out()\u6765\u8bfb\u5199\u4efb\u610f\u5185\u5b58\u3002\n\u6ce8\u610f\uff1aiOS10.3\u5f15\u5165\u4e86TASK_CONVERSION_eval()\u7684\u521d\u59cb\u5f62\u5f0f\uff0c\u8fd9\u662f\u4e00\u79cd\u5fae\u5f31\u7684\u7f13\u89e3\u63aa\u65bd\uff0c\u963b\u6b62\u7528\u6237\u7a7a\u95f4\u8bbf\u95ee\u5b9e\u9645\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u7684\u6743\u9650\u3002IOS 10.3\u4e4b\u540e\u7684\u4efb\u4f55\u653b\u51fb\u90fd\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u5047\u7684\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u6f0f\u6d1e\uff1aCVE-2017-13861\u662fIOSurfaceRootUserClient\uff1a\uff1as_set_surface_notify()\u4e2d\u7684\u6f0f\u6d1e\uff0c\u53ef\u5bfc\u81f4\u5728\u9a6c\u8d6b\u7aef\u53e3\u4e0a\u4e22\u5f03\u989d\u5916\u7684\u5f15\u7528\u3002cve-2017-13865\u662fxnu\u7684proc_list_uptrs()\u4e2d\u7684\u6f0f\u6d1e\uff0c\u5728\u5c06\u5185\u5bb9\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u4e4b\u524d\uff0c\u65e0\u6cd5\u5b8c\u5168\u521d\u59cb\u5316\u5806\u5185\u5b58\uff0c\u4ece\u800c\u6cc4\u6f0f\u5185\u6838\u6307\u9488\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u5229\u7528\u4fe1\u606f\u6cc4\u6f0f\u53d1\u73b0\u4efb\u610fMACH\u7aef\u53e3\u7684\u5730\u5740\u3002\u5206\u914d\u4e00\u9875\u7aef\u53e3\uff0c\u5e76\u57fa\u4e8e\u5176\u5730\u5740\u4ece\u8be5\u9875\u4e2d\u9009\u62e9\u7279\u5b9a\u7aef\u53e3\u3002\u4f7f\u7528IOSurfaceRootUserClient\u7f3a\u9677\u89e3\u9664\u7aef\u53e3\u5206\u914d\uff0c\u4ece\u800c\u83b7\u5f97\u5bf9\u5df2\u77e5(\u548c\u90e8\u5206\u63a7\u5236)\u5730\u5740\u5904\u7684\u60ac\u6302Mach\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u3002\n\u540e\u7eed\u5229\u7528\u4fe1\u606f\u6d41\uff1a\u91ca\u653e\u8be5\u9875\u4e0a\u7684\u5176\u4ed6\u7aef\u53e3\uff0c\u5e76\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528IPC_KMSG\u7684\u5185\u5bb9\u91cd\u65b0\u5206\u914d\u8be5\u9875\uff0c\u4ece\u800c\u5728\u5df2\u77e5\u5730\u5740\u63d0\u4f9b\u5177\u6709\u53d7\u63a7\u5185\u5bb9\u7684\u5047MACH\u7aef\u53e3\u3002\u91cd\u65b0\u5206\u914d\u5c06\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u901a\u8fc7\u8be5\u7aef\u53e3\u53ef\u4ee5\u4f7f\u7528pid_for_task()\u8bfb\u53d6\u4efb\u610f\u5185\u6838\u5185\u5b58\u3002(\u4f7f\u7528mach_port_set_context()\u66f4\u65b0\u8981\u8bfb\u53d6\u7684\u5730\u5740\uff0c\u800c\u4e0d\u91cd\u65b0\u5206\u914d\u4f2a\u7aef\u53e3\u3002)\u3002\u4f7f\u7528\u5185\u6838\u8bfb\u53d6\u539f\u8bed\u5b9a\u4f4d\u76f8\u5173\u5185\u6838\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u518d\u6b21\u91cd\u65b0\u5206\u914d\u4f2a\u7aef\u53e3\u3002\n\u6ce8\u610f\uff1aIOS 11\u5220\u9664\u4e86mach_zone_force_gc()\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5141\u8bb8\u7528\u6237\u7a7a\u95f4\u63d0\u793a\u5185\u6838\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u56de\u6536\u533a\u57df\u6620\u5c04\u4e2d\u6240\u6709\u7a7a\u95f2\u7684\u865a\u62df\u9875\u9762\u4ee5\u4f9b\u5176\u4ed6\u533a\u57df\u4f7f\u7528\u3002\u5229\u7528iOS 11\u548c\u66f4\u9ad8\u7248\u672c\u7684\u6f0f\u6d1e\u9700\u8981\u5f00\u53d1\u4e00\u79cd\u5f3a\u5236\u533a\u57df\u5783\u573e\u6536\u96c6\u7684\u6280\u672f\u3002\u4e3a\u6b64\uff0c\u81f3\u5c11\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e09\u79cd\u72ec\u7acb\u7684\u6280\u672f\uff0c\u5982async_wake\u3001v0rtex\u548c\u672a\u5f00\u53d1\u7684IOS\u5229\u7528\u94fe3\u6240\u793a\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5206\u914d\u4e24\u4e2aMACH\u7aef\u53e3\uff0c\u7aef\u53e3A\u548c\u7aef\u53e3B\uff0c\u4f5c\u4e3a\u55b7\u5c04\u7684\u4e00\u90e8\u5206\u3002\u8be5\u6f0f\u6d1e\u88ab\u89e6\u53d1\u4ee5\u4e22\u5f03\u7aef\u53e3A\u4e0a\u7684\u5f15\u7528\uff0c\u5e76\u91ca\u653eA\u5468\u56f4\u7684\u7aef\u53e3\uff0c\u4ece\u800c\u5bfc\u81f4\u7aef\u53e3\u6307\u9488\u60ac\u7a7a\u3002\u901a\u8fc7\u8c03\u7528mach_zone_force_gc()\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u5e76\u4f7f\u7528\u5305\u542b\u6a21\u5f0f\u7684OOL\u7aef\u53e3Sprake\u91cd\u65b0\u5206\u914d\u5305\u542b\u7aef\u53e3A\u7684IP_CONTEXT\u5b57\u6bb5\u7684\u9875\u9762\uff0c\u4f7f\u5f97\u7aef\u53e3A\u7684IP_CONTEXT\u5b57\u6bb5\u4e0e\u6307\u5411\u7aef\u53e3B\u7684\u6307\u9488\u91cd\u53e0\u3002\u8c03\u7528mach_port_get_context()\u4f1a\u7ed9\u51fa\u7aef\u53e3B\u7684\u5730\u5740\u3002\u7aef\u53e3B\u4f1a\u518d\u6b21\u89e6\u53d1\u8be5\u6f0f\u6d1e\uff0c\u4ece\u800c\u83b7\u5f97\u5bf9\u5df2\u77e5\u5730\u5740\u5904\u60ac\u7a7a\u7684MACH\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u3002\n\u540e\u7eed\u5229\u7528\u6d41\u7a0b\uff1a\u5728\u53e6\u4e00\u4e2a\u533a\u57df\u5783\u573e\u6536\u96c6\u4e4b\u540e\uff0c\u4f7f\u7528\u5206\u6bb5\u7684OOL\u5185\u5b58\u55b7\u5c04\u91cd\u65b0\u5206\u914d\u60ac\u6302\u7aef\u53e3B\uff0c\u4ee5\u4fbf\u8c03\u7528mach_port_get_context()\u53ef\u4ee5\u8bc6\u522b\u55b7\u5c04\u91cd\u65b0\u5206\u914d\u7684\u7aef\u53e3B\u7684\u54ea\u4e2a4MB\u6bb5\u3002\u8be5\u6bb5\u88ab\u91ca\u653e\uff0c\u5e76\u4e14\u7aef\u53e3B\u4f7f\u7528\u7ba1\u9053\u7f13\u51b2\u533a\u91cd\u65b0\u5206\u914d\uff0c\u4ece\u800c\u5728\u5df2\u77e5\u5730\u5740\u63d0\u4f9b\u53d7\u63a7\u7684\u4f2aMACH\u7aef\u53e3\u3002(=\u3002\u4f2a\u7aef\u53e3\u88ab\u8f6c\u6362\u4e3a\u65f6\u949f\u7aef\u53e3\uff0cCLOCK_SLEEP_TRAP()\u7528\u4e8e\u66b4\u529b\u5f3a\u5236KASLR\u3002\u63a5\u4e0b\u6765\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u5e76\u4f7f\u7528pid_for_task()\u5efa\u7acb\u4e00\u4e2a4\u5b57\u8282\u7684\u5185\u6838\u8bfb\u53d6\u539f\u8bed\u3002\u6700\u540e\uff0c\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u4f7f\u7528\u8be5\u6f0f\u6d1e\u55b7\u6d12MACH\u7aef\u53e3\u5e76\u4e22\u5f03\u4e00\u4e2a\u7aef\u53e3\u4e0a\u7684\u5f15\u7528\u3002\u9875\u9762\u4e0a\u7684\u5176\u4ed6\u7aef\u53e3\u88ab\u91ca\u653e\uff0c\u5c06\u63a5\u6536\u6743\u9650\u7559\u7ed9\u60ac\u6302\u7684Mach\u7aef\u53e3\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u4f7f\u7528MACH_ZONE_FORCE_GC()\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u5e76\u901a\u8fc7IOSurface\u5c5e\u6027\u55b7\u5c04\u4f7f\u7528OSString\u7f13\u51b2\u533a\u91cd\u65b0\u5206\u914d\u5305\u542b\u60ac\u6302\u7aef\u53e3\u7684\u9875\u9762\u3002OSString\u7f13\u51b2\u533a\u5305\u542b\u4e00\u4e2a\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u521d\u59cb\u5316\u7aef\u53e3\u7684\u5173\u952e\u5b57\u6bb5\uff0c\u5e76\u5141\u8bb8\u901a\u8fc7\u5728\u4f2a\u7aef\u53e3\u4e0a\u8c03\u7528mach_port_get_context()\u6765\u786e\u5b9a\u5305\u542b\u7aef\u53e3\u7684OSString\u7684\u7d22\u5f15\u3002\u91ca\u653e\u5305\u542b\u4f2a\u7aef\u53e3\u7684OSString\uff0c\u5e76\u5c06\u5176\u91cd\u65b0\u5206\u914d\u4e3a\u6b63\u5e38\u7684Mach\u7aef\u53e3\u3002\u8c03\u7528MACH_PORT_REQUEST_NOTIFICATION()\u5c06\u771f\u5b9eMACH\u7aef\u53e3\u7684\u5730\u5740\u653e\u5165\u4f2a\u7aef\u53e3\u7684IP_pdrequest\u5b57\u6bb5\uff0c\u5e76\u901a\u8fc7IOSurface\u8bfb\u53d6OSString\u7684\u5185\u5bb9\u4ee5\u83b7\u5f97\u5730\u5740\u3002\u518d\u6b21\u4f7f\u7528MACH_PORT_REQUEST_NOTIFICATION()\u6765\u83b7\u53d6\u4f2a\u7aef\u53e3\u672c\u8eab\u7684\u5730\u5740\u3002\n\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u88ab\u91ca\u653e\u5e76\u91cd\u65b0\u5206\u914d\uff0c\u4ee5\u4fbfmach_port_get_properties()\u53ef\u4ee5\u7528\u4f5c4\u5b57\u8282\u7684\u4efb\u610f\u8bfb\u53d6\u539f\u8bed\uff0c\u800c\u8981\u8bfb\u53d6\u7684\u76ee\u6807\u5730\u5740\u53ef\u901a\u8fc7mach_port_set_context()\u8fdb\u884c\u66f4\u65b0\u3002(\u8fd9\u7c7b\u4f3c\u4e8epid_for_task()\u6280\u672f\uff0c\u4f46\u7ea6\u675f\u7565\u6709\u4e0d\u540c\u3002)\u3002\u4ece\u5b9e\u9645Mach\u7aef\u53e3\u7684\u5730\u5740\u5f00\u59cb\uff0c\u8bfb\u53d6\u5185\u6838\u5185\u5b58\u4ee5\u67e5\u627e\u76f8\u5173\u7684\u5185\u6838\u5bf9\u8c61\u3002\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u88ab\u91ca\u653e\u5e76\u518d\u6b21\u4f7f\u7528\u4e00\u4e2a\u5047\u4efb\u52a1\u7aef\u53e3\u91cd\u65b0\u5206\u914d\uff0c\u8be5\u7aef\u53e3\u8db3\u4ee5\u5c06\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u91cd\u65b0\u6620\u5c04\u5230\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\u901a\u8fc7\u6620\u5c04\u66f4\u65b0\u4f2a\u7aef\u53e3\uff0c\u4ee5\u4f7f\u7528iokit_user_client_trap()\u751f\u62107\u53c2\u6570\u4efb\u610f\u5185\u6838\u51fd\u6570\u8c03\u7528\u539f\u8bed\uff0c\u5e76\u8c03\u7528\u5185\u6838\u51fd\u6570\u4ee5\u751f\u6210\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u6f0f\u6d1e\uff1aCVE-2018-4150\u662fXNU\u7684BPF\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e89\u7528\u6761\u4ef6\uff0c\u7531\u4e8e\u5728\u672a\u91cd\u65b0\u5206\u914d\u76f8\u5e94\u7f13\u51b2\u533a\u7684\u60c5\u51b5\u4e0b\u589e\u52a0\u7f13\u51b2\u533a\u957f\u5ea6\uff0c\u5bfc\u81f4\u7ebf\u6027\u5806\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u89e6\u53d1\u7ade\u4e89\u4ee5\u4e0d\u6b63\u786e\u5730\u589e\u52a0\u7f13\u51b2\u533a\u957f\u5ea6\uff0c\u800c\u4e0d\u91cd\u65b0\u5206\u914d\u7f13\u51b2\u533a\u672c\u8eab\u3002\u6570\u636e\u5305\u88ab\u53d1\u9001\u5e76\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u6ea2\u51fa\u5230\u540e\u7eed\u7684OOL\u7aef\u53e3\u6570\u7ec4\u4e2d\uff0c\u5e76\u63d2\u5165\u6307\u5411\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u4f2aMACH\u7aef\u53e3\u7684\u6307\u9488\u3002\u63a5\u6536\u5305\u542bOOL\u7aef\u53e3\u7684\u6d88\u606f\u4ea7\u751f\u5bf9\u5176\u5185\u5bb9\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u7684\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u3002\n\u968f\u540e\u7684\u653b\u51fb\u6d41\u7a0b\uff1a\u5047Mach\u7aef\u53e3\u88ab\u8f6c\u6362\u4e3a\u65f6\u949f\u7aef\u53e3\uff0c\u5e76\u4e14CLOCK_SLEEP_TRAP()\u7528\u4e8e\u66b4\u529b\u5f3a\u5236\u5185\u6838\u6620\u50cf\u6307\u9488\u3002\u7136\u540e\u5c06\u8be5\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u4ee5\u901a\u8fc7pid_for_task()\u8bfb\u53d6\u5185\u5b58\u3002\u5185\u6838\u5185\u5b58\u4ece\u6cc4\u6f0f\u7684\u5185\u6838\u6620\u50cf\u6307\u9488\u5411\u540e\u626b\u63cf\uff0c\u76f4\u5230\u627e\u5230\u5185\u6838\u6587\u672c\u5e93\uff0c\u4ece\u800c\u7834\u574fKASLR\u3002\u653b\u51fb\u7684\u6700\u540e\u90e8\u5206\u5c1a\u672a\u5b8c\u6210\uff0c\u4f46\u5728\u6b64\u9636\u6bb5\u4f7f\u7528\u73b0\u6709\u4ee3\u7801\u6784\u5efa\u5047\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u5c06\u662f\u76f4\u63a5\u548c\u786e\u5b9a\u7684\u3002\n\u6f0f\u6d1e\uff1aCVE-2018-4241\u662fXNU&#39\uff1b\u7684mptcp_usr_connectX()\u4e2d\u7531\u4e8e\u4e0d\u6b63\u786e\u7684\u8fb9\u754c\u68c0\u67e5\u9020\u6210\u7684\u5bf9\u8c61\u5185\u7ebf\u6027\u5806\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5185\u6838\u5806\u7ecf\u8fc7\u6574\u7406\uff0c\u5c06\u4e00\u4e2a2048\u5b57\u8282\u7684ipc_kmsg\u7ed3\u6784\u653e\u7f6e\u5728\u4e0e\u51e0\u4e2a\u591a\u8def\u5f84TCP\u5957\u63a5\u5b57\u5173\u8054\u7684mptses\u7ed3\u6784(\u5305\u542b\u6ea2\u51fa\u7684\u5bf9\u8c61)\u4e0b\u65b9\u768416MB\u5bf9\u9f50\u5730\u5740\u4e0a\u3002\u8be5\u6f0f\u6d1e\u7528\u4e8e\u4f7f\u7528\u96f6\u8986\u76d6mptses\u7ed3\u6784\u4e2dmpte_itfinfo\u6307\u9488\u7684\u4f4e3\u4e2a\u5b57\u8282\uff0c\u5e76\u5173\u95ed\u5957\u63a5\u5b57\u3002\u8fd9\u5c06\u89e6\u53d1\u635f\u574f\u6307\u9488\u7684kfree()\uff0c\u91ca\u653e16MB\u5bf9\u9f50\u8fb9\u754c\u5904\u7684ipc_kmsg\u7ed3\u6784\u3002\u91ca\u653e\u7684IPC_KMSG\u63d2\u69fd\u91cd\u65b0\u5206\u914d\u6709\u55b7\u5c04\u7684\u7ba1\u9053\u7f13\u51b2\u533a\u3002\u518d\u6b21\u89e6\u53d1\u8be5\u6f0f\u6d1e\uff0c\u7528\u96f6\u8986\u76d6\u53e6\u4e00\u4e2amptses\u7ed3\u6784\u4e2dmpte_itfinfo\u6307\u9488\u7684\u4f4e3\u4e2a\u5b57\u8282\uff0c\u5e76\u5173\u95ed\u5957\u63a5\u5b57\uff0c\u4ece\u800c\u5bfc\u81f4\u53e6\u4e00\u4e2a\u76f8\u540c\u5730\u5740\u7684kfree()\u3002\u8fd9\u5c06\u91ca\u653e\u521a\u521a\u5206\u914d\u5230\u8be5\u63d2\u69fd\u4e2d\u7684\u7ba1\u9053\u7f13\u51b2\u533a\uff0c\u7559\u4e0b\u4e00\u4e2a\u60ac\u6302\u7684\u7ba1\u9053\u7f13\u51b2\u533a\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u4f7f\u7528\u9884\u5148\u5206\u914d\u7684IPC_KMSG\u518d\u6b21\u91cd\u65b0\u5206\u914d\u63d2\u69fd\u3002\u7528\u6237\u7a7a\u95f4\u7ebf\u7a0b\u5d29\u6e83\uff0c\u5bfc\u81f4\u6d88\u606f\u5b58\u50a8\u5728\u4e0e\u7ba1\u9053\u7f13\u51b2\u533a\u91cd\u53e0\u7684\u9884\u5148\u5206\u914d\u7684ipc_kmsg\u7f13\u51b2\u533a\u4e2d\uff1b\u8bfb\u53d6\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u7ba1\u9053\u4f1a\u4ea7\u751fipc_kmsg\u7ed3\u6784\u7684\u5185\u5bb9\uff0c\u7ed9\u51fa\u60ac\u6302\u7ba1\u9053\u7f13\u51b2\u533a/ipc_kmsg\u7684\u5730\u5740\u3002\u5199\u5165\u7ba1\u9053\u662f\u4e3a\u4e86\u66f4\u6539ipc_kmsg\u7ed3\u6784\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u63a5\u6536\u6d88\u606f\u4f1a\u4ea7\u751f\u5bf9\u7ba1\u9053\u7f13\u51b2\u533a\u5185\u7684\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u9650\u3002\u63a5\u6536\u5230\u5f02\u5e38\u6d88\u606f\uff0c\u5e76\u4f7f\u7528pid_for_task()\u91cd\u5199\u7ba1\u9053\u4ee5\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u5185\u6838\u8bfb\u53d6\u539f\u8bed\u3002\u5b9a\u4f4d\u76f8\u5173\u5185\u6838\u5bf9\u8c61\uff0c\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5bf9\u5185\u6838\u5806\u8fdb\u884c\u6574\u7406\uff0c\u4ee5\u4fbf\u5c06\u9884\u5148\u5206\u914d\u76844096\u5b57\u8282\u7684ipc_kmsg\u7ed3\u6784\u653e\u5728\u51e0\u4e2a\u591a\u8def\u5f84TCP\u5957\u63a5\u5b57\u7684mptses\u7ed3\u6784\u9644\u8fd1\u3002\u8be5\u6f0f\u6d1e\u88ab\u89e6\u53d1\u4e24\u6b21\uff0c\u4ee5\u635f\u574f\u4e24\u4e2aMPTS\u7ed3\u6784\u4e2dmpte_itfinfo\u6307\u9488\u7684\u4f4e2\u4e2a\u5b57\u8282\uff0c\u4ece\u800c\u5173\u95ed\u5957\u63a5\u5b57\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u635f\u574f\u6307\u9488\u7684kfree()\u3002\u6bcf\u4e2a\u6307\u9488\u90fd\u88ab\u635f\u574f\uff0c\u5c060x7a0\u5b57\u8282\u6307\u5411IPC_KMSG\u5206\u914d\uff0c\u4ece\u800c\u521b\u5efa\u4e86\u8de8\u8d8a2\u6761\u6d88\u606f\u76844096\u5b57\u8282\u7684\u6f0f\u6d1e\u3002\u5305\u542b\u90e8\u5206\u91ca\u653e\u7684IPC_KMSG\u7ed3\u6784\u4e4b\u4e00\u7684MACH\u7aef\u53e3(IPC_KMSG\u6807\u5934\u5b8c\u597d\u65e0\u635f\u3002\n..", "note_en": "I recently found myself wishing for a single online reference providing a brief summary of the high-level exploit flow of every public iOS kernel exploit in recent years; since no such document existed, I decided to create it here.\n   This post summarizes original iOS kernel exploits from local app context targeting iOS 10 through iOS 13, focusing on the high-level exploit flow from the initial primitive granted by the vulnerability to kernel read/write. At the end of this post, we will briefly look at iOS kernel exploit mitigations (in both hardware and software) and how they map onto the techniques used in the exploits.\n   This isn&#39;t your typical P0 blog post: There is no gripping zero-day exploitation, or novel exploitation research, or thrilling malware reverse engineering. The content has been written as a reference since I needed the information and figured that others might find it useful too. You have been forewarned.\n  Unfortunately, there is no authoritative dictionary called &#34;Technical Hacking Terms for Security Researchers&#34;, which makes it difficult to precisely describe some of the high-level concepts I want to convey. To that end, I have decided to ascribe the following terms specific meanings for the context of this post. If any of these definitions are at odds with your understanding of these terms, feel free to suggest improved terminology and I can update this post. :)\n      A few examples of common exploit primitives include:  n -byte linear heap overflow, integer increment at a controlled address, write-what-where, arbitrary memory read/write, PC control, arbitrary function calling, etc.\n   A common exploit primitive specific to iOS kernel exploitation is having a send right to a fake Mach port (struct  ipc_port ) whose fields can be directly read and written from userspace.\n   Exploit strategy : The low-level, vulnerability-specific method used to turn the vulnerability into a useful exploit primitive.\n   For example, this is the exploit strategy used in Ian Beer&#39;s async_wake exploit for iOS 11.1.2:\n   An information leak is used to discover the address of arbitrary Mach ports. A page of ports is allocated and a specific port from that page is selected based on its address. The  IOSurfaceRootUserClient  bug is triggered to deallocate the Mach port, yielding a  receive right to a dangling Mach port at a known (and partially controlled) address .\n   The last part is the generic/vulnerability-independent primitive that I interpret to be the end of the vulnerability-specific exploit strategy.\n   Typically, the aim of the exploit strategy is to produce an exploit primitive which is highly reliable.\n   Exploit technique : A reusable and reasonably generic strategy for turning one exploit primitive into another (usually more useful) exploit primitive.\n   One example of an exploit technique is Return-Oriented Programming (ROP), which turns arbitrary PC control into (nearly) arbitrary code execution by reusing executable code gadgets.\n   An exploit technique specific to iOS kernel exploitation is using a fake Mach port to read 4 bytes of kernel memory by calling  pid_for_task()  (turning a send right to a fake Mach port into an arbitrary kernel memory read primitive).\n   Exploit flow : The high-level, vulnerability-agnostic chain of exploit techniques used to turn the exploit primitive granted by the vulnerability into the final end goal (in this post, kernel read/write from local app context).\n  This section will give a brief overview of iOS kernel exploits from local context targeting iOS 10 through iOS 13. I&#39;ll describe the high-level exploit flow and list the exploit primitives and techniques used to achieve it. While I have tried to track down every original (i.e., developed before exploit code was published) public exploit available either as source code or as a sufficiently complete writeup/presentation, I expect that I may have missed a few. Feel free to reach out and suggest any that I have missed and I can update this post.\n   For each exploit, I have outlined the vulnerability, the exploit strategy (specific to the vulnerability), and the subsequent exploit flow (generic). The boundary between which parts of the exploit are specific to the vulnerability and which parts are generic enough to be considered part of the overall flow is subjective. In each case I&#39;ve highlighted the particular exploitation primitive granted by the vulnerability that I consider sufficiently generic.\n     The vulnerability : CVE-2016-7644 is a race condition in XNU&#39;s  set_dp_control_port()  which leads to a Mach port being over-released.\n   Exploit strategy : Many Mach ports are allocated and references to them are dropped by racing  set_dp_control_port()  (it is possible to determine when the race has been won deterministically). The ports are freed by dropping a stashed reference, leaving the process holding  receive rights to dangling Mach ports  filling a page of memory.\n   Subsequent exploit flow : A zone garbage collection is forced by calling  mach_zone_force_gc()  and the page of dangling ports is reallocated with an out-of-line (OOL) ports array containing pointers to the host port.  mach_port_get_context()  is called on one of the dangling ports to disclose the address of the host port. Using this value, it is possible to guess the page on which the kernel task port lives. The context value of each of the dangling ports is set to the address of each potential  ipc_port  on the page containing the kernel task port, and the OOL ports are received back in userspace to give a send right to the  kernel task port .\n     Discovered in-the-wild by  Cl\u00e9ment Lecigne (  @_clem1 ) of Google&#39;s Threat Analysis Group. Analyzed by Ian Beer and Samuel Gro\u00df (  @5aelo ) of Google Project Zero.\n   The vulnerability : The vulnerability is a linear heap out-of-bounds write of  IOAccelResource  pointers in the IOKit function  AGXAllocationList2::initWithSharedResourceList() .\n   Exploit strategy : The buffer to be overflowed is placed directly before a  recv_msg_elem  struct, such that the out-of-bounds write will overwrite the  uio  pointer with an  IOAccelResource  pointer. The  IOAccelResource  pointer is freed and reallocated with a fake  uio  struct living at the start of an  OSData  data buffer managed by  IOSurface  properties. The  uio  is freed, leaving a  dangling  OSData  data buffer accessible via  IOSurface  properties .\n   Subsequent exploit flow : The dangling  OSData  data buffer slot is reallocated with an  IOSurfaceRootUserClient  instance, and the data contents are read via  IOSurface  properties to give the KASLR slide, the address of the current task, and the address of the dangling data buffer/ IOSurfaceRootUserClient . Then, the data buffer is freed and reallocated with a modified version of the  IOSurfaceRootUserClient , such that calling an external method on the modified user client will return the address of the kernel task read from the kernel&#39;s  __DATA  segment. The data buffer is freed and reallocated again such that calling an external method will execute the  OSSerializer::serialize()  gadget, leading to an arbitrary read-then-write that stores the address of the kernel task port in the current task&#39;s list of special ports. Reading the special port from userspace gives a send right to the  kernel task port .\n        The vulnerability : CVE-2017-2370 is a linear heap buffer overflow reachable from unprivileged contexts in XNU&#39;s  mach_voucher_extract_attr_recipe_trap()  due to an attacker-controlled userspace pointer used as the length in a call to  copyin() .\n   Exploit strategy : The vulnerable Mach trap is called to create a  kalloc  allocation and immediately overflow out of it with controlled data, corrupting the  ikm_size  field of a subsequent  ipc_kmsg  object. This causes the  ipc_kmsg , which is the preallocated message for a Mach port, to believe that it has a larger capacity than it does, overlapping it with the first 240 bytes of the subsequent allocation. By registering the Mach port as the exception port for a userspace thread and then crashing the thread with controlled register state, it is possible to repeatedly and reliably overwrite the overlapping part of the subsequent allocation, and by receiving the exception message it is possible to read those bytes. This gives a  controlled 240-byte out-of-bounds read/write primitive  off the end of the corrupted  ipc_kmsg .\n   Subsequent exploit flow : A second  ipc_kmsg  is placed after the corrupted one and read in order to determine the address of the allocations. Next an  AGXCommandQueue  user client is reallocated in the same slot and the virtual method table is read to determine the KASLR slide. Then the virtual method table is overwritten such that a virtual method call on the  AGXCommandQueue  invokes the  OSSerializer::serialize()  gadget, producing a 2-argument arbitrary  kernel function call primitive . Calling the function  uuid_copy()  gives an arbitrary kernel read/write primitive.\n           Exploit strategy : The vulnerable Mach trap is called to create a  kalloc  allocation and immediately overflow out of it with controlled data, overwriting the contents of an OOL port array and inserting a pointer to a fake Mach port in userspace. Receiving the message containing the OOL ports yields a  send right to the fake Mach port whose contents can be controlled directly .\n   Subsequent exploit flow : The fake Mach port is converted into a clock port and  clock_sleep_trap()  is used to brute force a kernel image pointer. Then the port is converted into a fake task port to read memory via  pid_for_task() . Kernel memory is scanned backwards from the leaked kernel image pointer until the kernel text base is located, breaking KASLR. Finally, a  fake kernel task port  is constructed.\n           The vulnerability : Multiple vulnerabilities in  AppleAVE2  due to external methods sharing  IOSurface  pointers with userspace and trusting  IOSurface  pointers read from userspace.\n   Exploit strategy : An  IOSurface  object is created and an  AppleAVE2  external method is called to leak its address. The vtable of an  IOFence  pointer in the  IOSurface  is leaked using another external method call, breaking KASLR. The  IOSurface  object is freed and reallocated with controlled data using an  IOSurface  property spray. Supplying the leaked pointer to an  AppleAVE2  external method that trusts  IOSurface  pointers supplied from userspace allows hijacking a virtual method call on the fake  IOSurface ; this is treated as a  oneshot hijacked virtual method call with a controlled target object at a known address .\n   Subsequent exploit flow : The hijacked virtual method call is used with the  OSSerializer::serialize()  gadget to call  copyin()  and overwrite 2  sysctl_oid  structs. The sysctls are overwritten such that reading the first sysctl calls  copyin()  to update the function pointer and arguments for the second sysctl and reading the second sysctl uses the  OSSerializer::serialize()  gadget to call the kernel function with 3 arguments. This 3-argument arbitrary  kernel function call primitive  is used to read and write arbitrary memory by calling  copyin() / copyout() .\n   Notes : iOS 10.3 introduced the initial form of  task_conversion_eval() , a weak mitigation that blocks userspace from accessing a right to the real kernel task port. Any exploit after iOS 10.3 needs to build a fake kernel task port instead.\n        The vulnerability : CVE-2017-13861 is a vulnerability in  IOSurfaceRootUserClient::s_set_surface_notify()  that causes an extra reference to be dropped on a Mach port. CVE-2017-13865 is a vulnerability in XNU&#39;s  proc_list_uptrs()  that leaks kernel pointers by failing to fully initialize heap memory before copying out the contents to userspace.\n   Exploit strategy : The information leak is used to discover the address of arbitrary Mach ports. A page of ports is allocated and a specific port from that page is selected based on its address. The port is deallocated using the  IOSurfaceRootUserClient  bug, yielding a  receive right to a dangling Mach port at a known (and partially controlled) address .\n   Subsequent exploit flow : The other ports on that page are freed and a zone garbage collection is forced so that the page is reallocated with the contents of an  ipc_kmsg , giving a fake Mach port with controlled contents at a known address. The reallocation converted the port into a fake task port through which arbitrary kernel memory can be read using  pid_for_task() . (The address to read is updated without reallocating the fake port by using  mach_port_set_context() .) Relevant kernel objects are located using the kernel read primitive and the fake port is reallocated again with a  fake kernel task port .\n   Notes : iOS 11 removed the  mach_zone_force_gc()  function which allowed userspace to prompt the kernel to perform a zone garbage collection, reclaiming all-free virtual pages in the zone map for use by other zones. Exploits for iOS 11 and later needed to develop a technique to force a zone garbage collection. At least three independent techniques have been developed to do so, demonstrated in async_wake, v0rtex, and In-the-wild iOS exploit chain 3.\n           Exploit strategy : Two Mach ports, port A and port B, are allocated as part of a spray. The vulnerability is triggered to drop a reference on port A, and the ports surrounding A are freed, leading to a dangling port pointer. Zone garbage collection is forced by calling  mach_zone_force_gc()  and the page containing port A is reallocated with an OOL ports spray containing a pattern such that port A&#39;s  ip_context  field overlaps a pointer to port B. Calling  mach_port_get_context()  gives the address of port B. The vulnerability is triggered again with port B, leading to a  receive right to a dangling Mach port at a known address .\n   Subsequent exploit flow : After another zone garbage collection, the dangling port B is reallocated with a segmented OOL memory spray such that calling  mach_port_get_context()  can identify which 4 MB segment of the spray reallocated port B. That segment is freed and port B is reallocated with pipe buffers, giving a controlled fake Mach port at a known address. The fake port is converted into a clock port and  clock_sleep_trap()  is used to brute force KASLR. The fake port is next converted into a fake task port and a 4-byte kernel read primitive is established using  pid_for_task() . Finally, the fake port is converted into a  fake kernel task port .\n           Exploit strategy : Mach ports are sprayed and a reference on one port is dropped using the vulnerability. The other ports on the page are freed, leaving a  receive right to a dangling Mach port .\n   Subsequent exploit flow : A zone garbage collection is forced using  mach_zone_force_gc()  and the page containing the dangling port is reallocated with an  OSString  buffer via an  IOSurface  property spray. The  OSString  buffer contains a pattern that initializes critical fields of the port and allows the index of the  OSString  containing the port to be determined by calling  mach_port_get_context()  on the fake port. The  OSString  containing the fake port is freed and reallocated as a normal Mach port.  mach_port_request_notification()  is called to put the address of a real Mach port in the fake port&#39;s  ip_pdrequest  field, and the  OSString &#39;s contents are read via  IOSurface  to get the address.  mach_port_request_notification()  is used again to get the address of the fake port itself.\n   The string buffer is freed and reallocated such that  mach_port_get_attributes()  can be used as a 4-byte arbitrary read primitive, with the target address to read updateable via  mach_port_set_context() . (This is analogous to the  pid_for_task()  technique, but with slightly different constraints.) Starting at the address of the real Mach port, kernel memory is read to find relevant kernel objects. The string buffer is freed and reallocated again with a fake task port sufficient to remap the string buffer into the process&#39;s address space. The fake port is updated via the mapping to yield a 7-argument arbitrary  kernel function call primitive  using  iokit_user_client_trap() , and kernel functions are called to generate a  fake kernel task port .\n        The vulnerability : CVE-2018-4150 is a race condition in XNU&#39;s BPF subsystem which leads to a linear heap buffer overflow due to a buffer length being increased without reallocating the corresponding buffer.\n   Exploit strategy : The race is triggered to incorrectly increase the length of the buffer without reallocating the buffer itself. A packet is sent and stored in the buffer, overflowing into a subsequent OOL ports array and inserting a pointer to a fake Mach port in userspace. Receiving the message containing the OOL ports yields a  send right to the fake Mach port whose contents can be controlled directly .\n   Subsequent exploit flow : The fake Mach port is converted into a clock port and  clock_sleep_trap()  is used to brute force a kernel image pointer. Then the port is converted into a fake task port to read memory via  pid_for_task() . Kernel memory is scanned backwards from the leaked kernel image pointer until the kernel text base is located, breaking KASLR. The final part of the exploit is incomplete, but construction of a  fake kernel task port  at this stage would be straightforward and deterministic using existing code.\n           The vulnerability : CVE-2018-4241 is an intra-object linear heap buffer overflow in XNU&#39;s  mptcp_usr_connectx()  due to incorrect bounds checking.\n   Exploit strategy : The kernel heap is groomed to place a 2048-byte  ipc_kmsg  struct at a 16 MB aligned address below the  mptses  structs (the object containing the overflow) associated with a few multipath TCP sockets. The vulnerability is used to overwrite the lower 3 bytes of the  mpte_itfinfo  pointer in the  mptses  struct with zeros and the socket is closed. This triggers a  kfree()  of the corrupted pointer, freeing the  ipc_kmsg  struct at the 16 MB alignment boundary. The freed  ipc_kmsg  slot is reallocated with sprayed pipe buffers. The vulnerability is triggered again to overwrite the lower 3 bytes of the  mpte_itfinfo  pointer in another  mptses  struct with zeros and the socket is closed, causing another  kfree()  of the same address. This frees the pipe buffer that was just allocated into that slot, leaving a  dangling pipe buffer .\n   Subsequent exploit flow : The slot is reallocated again with a preallocated  ipc_kmsg . A userspace thread is crashed to cause a message to be stored in the preallocated  ipc_kmsg  buffer overlapping the pipe buffer; reading the pipe in userspace yields the contents of the  ipc_kmsg  struct, giving the address of the dangling pipe buffer/ ipc_kmsg . The pipe is written to change the contents of the  ipc_kmsg  struct such that receiving the message yields a send right to a fake Mach port inside the pipe buffer. The exception message is received and the pipe is rewritten to convert the fake port into a kernel read primitive using  pid_for_task() . Relevant kernel objects are located and the fake port is converted into a  fake kernel task port .\n           Exploit strategy : The kernel heap is groomed to place preallocated 4096-byte  ipc_kmsg  structs near the  mptses  structs for a few multipath TCP sockets. The vulnerability is triggered twice to corrupt the lower 2 bytes of the  mpte_itfinfo  pointer in two  mptses  structs, such that closing the sockets results in  kfree() s of the two corrupted pointers. Each pointer is corrupted to point  0x7a0  bytes into an  ipc_kmsg  allocation, creating 4096-byte holes spanning 2 messages. A Mach port containing one of the partially-freed  ipc_kmsg  structs (with the  ipc_kmsg  header intact\n......", "posttime": "2020-06-12 17:24:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ios,\u6f0f\u6d1e,\u5185\u6838,\u7aef\u53e3", "title": "\u6700\u8fd1\u7684iOS\u5185\u6838\u6f0f\u6d1e\u8c03\u67e5", "title_en": "A survey of recent iOS kernel exploits", "transed": 1, "url": "https://googleprojectzero.blogspot.com/2020/06/a-survey-of-recent-ios-kernel-exploits.html", "via": "", "real_tags": ["ios", "\u6f0f\u6d1e", "\u5185\u6838", "\u7aef\u53e3"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006270, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u73b0\u5b9e\u57fa\u51c6\u4e0b\uff0c\u5f02\u6b65Python\u6bd4\u540c\u6b65Python\u6162\u3002\u66f4\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff0c\u5f02\u6b65\u6846\u67b6\u5728\u8d1f\u8f7d\u4e0b\u4f1a\u6709\u70b9\u4e0d\u7a33\u5b9a\u3002\n\u5927\u591a\u6570\u4eba\u90fd\u77e5\u9053\u5f02\u6b65Python\u5177\u6709\u66f4\u9ad8\u7ea7\u522b\u7684\u5e76\u53d1\u6027\u3002\u5bf9\u4e8e\u50cf\u670d\u52a1\u52a8\u6001\u7f51\u7ad9\u6216WebAPI\u8fd9\u6837\u7684\u5e38\u89c1\u4efb\u52a1\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u6709\u610f\u4e49\u7684\u3002\n\u5728\u73b0\u5b9e\u6761\u4ef6\u4e0b(\u89c1\u4e0b\u6587)\uff0c\u5f02\u6b65Web\u6846\u67b6\u7684\u541e\u5410\u91cf(\u8bf7\u6c42\u6570/\u79d2)\u7565\u5dee\uff0c\u5ef6\u8fdf\u5dee\u5f02\u5927\u5f97\u591a\u3002\n\u7b2c50\u548c\u7b2c99\u4e2a\u767e\u5206\u4f4d\u54cd\u5e94\u65f6\u95f4\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff0c\u541e\u5410\u91cf\u4ee5\u6bcf\u79d2\u8bf7\u6c42\u6570\u4e3a\u5355\u4f4d\u3002\u8be5\u8868\u662f\u6309\u7b2c99\u9875\u6392\u5e8f\u7684\uff0c\u6211\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u73b0\u5b9e\u4e16\u754c\u4e2d\u6700\u91cd\u8981\u7684\u7edf\u8ba1\u6570\u636e\u3002\n\u6211\u4e5f\u8fd9\u4e48\u60f3\u3002\u6211\u8bd5\u7740\u8ba9\u5b83\u4eec\u5c3d\u53ef\u80fd\u7684\u903c\u771f\u3002\u4ee5\u4e0b\u662f\u6211\u4f7f\u7528\u7684\u67b6\u6784\uff1a\n\u6211\u5df2\u7ecf\u5c3d\u6211\u6240\u80fd\u4e3a\u771f\u5b9e\u4e16\u754c\u7684\u90e8\u7f72\u5efa\u6a21\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u53cd\u5411\u4ee3\u7406\u3001python\u4ee3\u7801(\u5373\uff1a\u53d8\u91cf)\u548c\u4e00\u4e2a\u6570\u636e\u5e93\u3002\u6211\u8fd8\u5305\u62ec\u4e86\u4e00\u4e2a\u5916\u90e8\u6570\u636e\u5e93\u8fde\u63a5\u6c60\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u8fd9\u662f\u5b9e\u9645\u90e8\u7f72Web\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u7279\u6027(\u81f3\u5c11\uff0c\u5b83\u662f\u9488\u5bf9PostgreSQL\u7684)\u3002\n\u6709\u95ee\u9898\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u968f\u673a\u952e\u67e5\u8be2\u4e00\u884c\uff0c\u5e76\u4ee5JSON\u7684\u5f62\u5f0f\u8fd4\u56de\u503c\u3002\u5b8c\u6574\u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002\n\u6211\u7528\u6765\u51b3\u5b9a\u6700\u4f73\u5de5\u4f5c\u8fdb\u7a0b\u6570\u7684\u89c4\u5219\u5f88\u7b80\u5355\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u6846\u67b6\uff0c\u6211\u4ece\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u5f00\u59cb\uff0c\u7136\u540e\u8fde\u7eed\u589e\u52a0\u5de5\u4f5c\u8fdb\u7a0b\u8ba1\u6570\uff0c\u76f4\u5230\u6027\u80fd\u53d8\u5dee\u3002\n\u5f02\u6b65\u6846\u67b6\u548c\u540c\u6b65\u6846\u67b6\u7684\u6700\u4f73\u5de5\u4f5c\u8fdb\u7a0b\u6570\u5404\u4e0d\u76f8\u540c\uff0c\u539f\u56e0\u5f88\u7b80\u5355\u3002\u5f02\u6b65\u6846\u67b6\u7531\u4e8e\u5176IO\u5e76\u53d1\u6027\uff0c\u80fd\u591f\u7528\u5355\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u4f7f\u5355\u4e2aCPU\u9971\u548c\u3002\n\u5bf9\u4e8e\u540c\u6b65\u5de5\u4f5c\u8fdb\u7a0b\u5219\u4e0d\u662f\u8fd9\u6837\uff1a\u5f53\u5b83\u4eec\u6267\u884cIO\u65f6\uff0c\u5b83\u4eec\u5c06\u963b\u585e\uff0c\u76f4\u5230IO\u5b8c\u6210\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u9700\u8981\u6709\u8db3\u591f\u7684\u5de5\u4f5c\u4eba\u5458\u6765\u786e\u4fdd\u6240\u6709CPU\u6838\u5fc3\u5728\u8d1f\u8f7d\u65f6\u59cb\u7ec8\u5904\u4e8e\u5145\u5206\u4f7f\u7528\u72b6\u6001\u3002\n\u901a\u5e38\uff0c\u6211\u4eec\u5efa\u8bae(2x$num_cores)+1\u4f5c\u4e3a\u5f00\u59cb\u65f6\u7684\u5de5\u4f5c\u4eba\u5458\u6570\u91cf\u3002\u867d\u7136\u4e0d\u592a\u79d1\u5b66\uff0c\u4f46\u8be5\u516c\u5f0f\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u5047\u8bbe\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5185\u6838\uff0c\u4e00\u4e2a\u5de5\u4f5c\u8005\u5c06\u4ece\u5957\u63a5\u5b57\u4e2d\u8bfb\u53d6\u6216\u5199\u5165\uff0c\u800c\u53e6\u4e00\u4e2a\u5de5\u4f5c\u8005\u5219\u5728\u5904\u7406\u8bf7\u6c42\u3002\n\u6211\u5728Hetzner\u7684CX31\u673a\u5668\u7c7b\u578b\u4e0a\u8fd0\u884c\u4e86\u57fa\u51c6\u6d4b\u8bd5\uff0c\u8be5\u673a\u5668\u57fa\u672c\u4e0a\u662f4/8 GB\u5185\u5b58\u7684vCPU\u673a\u5668\u3002\u5b83\u662f\u5728Ubuntu20.04\u4e0b\u8fd0\u884c\u7684\u3002\u6211\u5728\u53e6\u4e00\u4e2a(\u8f83\u5c0f\u7684)VM\u4e0a\u8fd0\u884c\u4e86\u8d1f\u8f7d\u751f\u6210\u5668\u3002\n\u5173\u4e8e\u541e\u5410\u91cf(\u5373\uff1a\u8bf7\u6c42/\u79d2)\uff0c\u4e3b\u8981\u56e0\u7d20\u4e0d\u662f\u5f02\u6b65\u4e0e\u540c\u6b65\uff0c\u800c\u662f\u6709\u591a\u5c11Python\u4ee3\u7801\u88ab\u672c\u673a\u4ee3\u7801\u66ff\u6362\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u53ef\u4ee5\u66ff\u6362\u7684Python\u4ee3\u7801\u5bf9\u6027\u80fd\u8d8a\u654f\u611f\uff0c\u6548\u679c\u5c31\u8d8a\u597d\u3002\u8fd9\u662f\u4e00\u79cd\u5386\u53f2\u60a0\u4e45\u7684Python\u6027\u80fd\u7b56\u7565(\u53e6\u89c1\uff1aNumpy)\u3002\nMeinhold\u548cUWSGI(\u5206\u522b\u7ea65.3k\u4e2a\u8bf7\u6c42/\u79d2)\u662f\u5927\u91cf\u7684C\u4ee3\u7801\u3002\u6807\u51c6Gunicorn(\u7ea63.4k\u8bf7\u6c42/\u79d2)\u662f\u7eafPython\u3002\nUvicorn+Starlette(\u7ea64.9k\u8bf7\u6c42/\u79d2)\u66ff\u6362\u4e86\u6bd4AIOHTTP&#39\uff1b\u7684\u9ed8\u8ba4\u670d\u52a1\u5668(\u7ea64.5k\u8bf7\u6c42/\u79d2)\u591a\u5f97\u591a\u7684Python\u4ee3\u7801(\u5c3d\u7ba1AIOHTTP\u4e5f\u5b89\u88c5\u4e86\u53ef\u9009\u7684\u52a0\u901f\u529f\u80fd)\u3002\n\u5728\u5ef6\u8fdf\u65b9\u9762\uff0c\u95ee\u9898\u66f4\u4e3a\u4e25\u91cd\u3002\u4e0e\u4f20\u7edf\u7684\u540c\u6b65\u90e8\u7f72\u76f8\u6bd4\uff0c\u5728\u8d1f\u8f7d\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u6027\u80fd\u5f88\u5dee\uff0c\u5ef6\u8fdf\u5f00\u59cb\u6fc0\u589e\u3002\n\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\u5728\u5f02\u6b65Python\u4e2d\uff0c\u591a\u7ebf\u7a0b\u662f\u534f\u4f5c\u7684\uff0c\u8fd9\u4ec5\u4ec5\u610f\u5473\u7740\u7ebf\u7a0b\u4e0d\u4f1a\u88ab\u4e2d\u592e\u8c03\u63a7\u5668(\u5982\u5185\u6838)\u4e2d\u65ad\uff0c\u800c\u662f\u5fc5\u987b\u81ea\u613f\u5c06\u5176\u6267\u884c\u65f6\u95f4\u8ba9\u7ed9\u5176\u4ed6\u8c03\u63a7\u5668\u3002\u5728Asyncio\u4e2d\uff0c\u6839\u636e\u4e09\u4e2a\u8bed\u8a00\u5173\u952e\u5b57\u6267\u884c\uff1aAwait\u3001Async For\u548cAsync With\u3002\n\u8fd9\u610f\u5473\u7740\u6267\u884c\u65f6\u95f4\u4e0d\u662f\u516c\u5e73\u5206\u914d\u7684\uff0c\u5e76\u4e14\u4e00\u4e2a\u7ebf\u7a0b\u5728\u5de5\u4f5c\u65f6\u53ef\u80fd\u4f1a\u4e0d\u7ecf\u610f\u5730\u5360\u7528\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684CPU\u65f6\u95f4\u3002\u8fd9\u5c31\u662f\u5ef6\u8fdf\u66f4\u4e0d\u7a33\u5b9a\u7684\u539f\u56e0\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4f20\u7edf\u7684\u540c\u6b65Python Web\u670d\u52a1\u5668(\u5982UWSGI)\u4f7f\u7528\u5185\u6838\u8c03\u5ea6\u5668\u7684\u62a2\u5360\u5f0f\u591a\u5904\u7406\uff0c\u5b83\u901a\u8fc7\u5b9a\u671f\u4ea4\u6362\u6267\u884c\u4e2d\u7684\u8fdb\u7a0b\u6765\u786e\u4fdd\u516c\u5e73\u6027\u3002\u8fd9\u610f\u5473\u7740\u65f6\u95f4\u5206\u914d\u66f4\u516c\u5e73\uff0c\u5ef6\u8fdf\u5dee\u5f02\u66f4\u5c0f\u3002\n\u5927\u591a\u6570\u5176\u4ed6\u57fa\u51c6\u6d4b\u8bd5(\u7279\u522b\u662f\u6765\u81ea\u5f02\u6b65\u6846\u67b6\u4f5c\u8005\u7684\u57fa\u51c6\u6d4b\u8bd5\uff01)\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u4e0d\u8981\u914d\u7f6e\u5177\u6709\u8db3\u591f\u5de5\u4f5c\u4eba\u5458\u7684\u540c\u6b65\u6846\u67b6\u3002\u8fd9\u610f\u5473\u7740\u6709\u6548\u5730\u963b\u6b62\u4e86\u8fd9\u4e9b\u540c\u6b65\u6846\u67b6\u8bbf\u95ee\u5927\u90e8\u5206\u771f\u6b63\u53ef\u7528\u7684CPU\u65f6\u95f4\u3002\n\u4ee5\u4e0b\u662fVibora\u9879\u76ee\u7684\u793a\u4f8b\u57fa\u51c6\u6d4b\u8bd5\u3002(\u6211\u6ca1\u6709\u6d4b\u8bd5\u8fd9\u4e2a\u6846\u67b6\uff0c\u56e0\u4e3a\u5b83\u662f\u4e0d\u592a\u53d7\u6b22\u8fce\u7684\u6846\u67b6\u4e4b\u4e00\u3002)\u3002\nVibora\u58f0\u79f0\u6bd4Flask\u7684\u541e\u5410\u91cf\u9ad8\u51fa500%\u3002\u7136\u800c\uff0c\u5f53\u6211\u68c0\u67e5\u4ed6\u4eec\u7684\u57fa\u51c6\u4ee3\u7801\u65f6\uff0c\u6211\u53d1\u73b0\u4ed6\u4eec\u9519\u8bef\u5730\u5c06Flask\u914d\u7f6e\u4e3a\u6bcf\u4e2aCPU\u4f7f\u7528\u4e00\u4e2a\u5de5\u4f5c\u8005\u3002\u5f53\u6211\u66f4\u6b63\u5b83\u65f6\uff0c\u6211\u5f97\u5230\u4ee5\u4e0b\u6570\u5b57\uff1a\n\u4f7f\u7528Vibora\u800c\u4e0d\u662fFlask\u7684\u541e\u5410\u91cf\u4f18\u52bf\u5b9e\u9645\u4e0a\u53ea\u670918%\u3002Flask\u662f\u6211\u6d4b\u8bd5\u8fc7\u7684\u541e\u5410\u91cf\u8f83\u4f4e\u7684\u540c\u6b65\u6846\u67b6\u4e4b\u4e00\uff0c\u6240\u4ee5\u6211\u9884\u8ba1\u66f4\u597d\u7684\u540c\u6b65\u8bbe\u7f6e\u4f1a\u6bd4Vibora\u5feb\u5f97\u591a\uff0c\u5c3d\u7ba1\u5b83\u7684\u56fe\u5f62\u770b\u8d77\u6765\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\n\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8bb8\u591a\u57fa\u51c6\u6d4b\u8bd5\u5c06\u5ef6\u8fdf\u7ed3\u679c\u6253\u4e71\u4f18\u5148\u7ea7\uff0c\u800c\u66f4\u770b\u91cd\u541e\u5410\u91cf\u7ed3\u679c(\u4f8b\u5982\uff0cVibora\uff1bs\u751a\u81f3\u6ca1\u6709\u63d0\u5230\u8fd9\u4e00\u70b9)\u3002\u7136\u800c\uff0c\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u673a\u5668\u6765\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u4f46\u662f\u5f53\u60a8\u8fd9\u6837\u505a\u65f6\uff0c\u8d1f\u8f7d\u4e0b\u7684\u5ef6\u8fdf\u5e76\u4e0d\u4f1a\u53d8\u5f97\u66f4\u597d\u3002\n\u867d\u7136\u6211\u7684\u57fa\u51c6\u6d4b\u8bd5\u5728\u6d89\u53ca\u7684\u65b9\u9762\u76f8\u5f53\u73b0\u5b9e\uff0c\u4f46\u5b83\u4ecd\u7136\u6bd4\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u5de5\u4f5c\u8d1f\u8f7d\u540c\u8d28\u5316\u5f97\u591a-\u6240\u6709\u8bf7\u6c42\u90fd\u6267\u884c\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u5bf9\u8be5\u67e5\u8be2\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002\u771f\u5b9e\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u6709\u66f4\u591a\u56fa\u6709\u7684\u53d8\u5316\uff1a\u4f1a\u6709\u4e00\u4e9b\u6162\u7684\u64cd\u4f5c\u3001\u4e00\u4e9b\u5feb\u7684\u64cd\u4f5c\u3001\u4e00\u4e9b\u6267\u884c\u5927\u91cfIO\u7684\u64cd\u4f5c\u548c\u4e00\u4e9b\u4f7f\u7528\u5927\u91cfCPU\u7684\u64cd\u4f5c\u3002\u4f3c\u4e4e\u53ef\u4ee5\u5408\u7406\u5730\u5047\u8bbe(\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u8fd9\u662f\u6b63\u786e\u7684)\uff0c\u5728\u5b9e\u9645\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5ef6\u8fdf\u5dee\u5f02\u5b9e\u9645\u4e0a\u8981\u9ad8\u5f97\u591a\u3002\n\u6211\u7684\u9884\u611f\u662f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u5c06\u4f1a\u66f4\u6210\u95ee\u9898\u3002\u516c\u5f00\u7684\u8f76\u4e8b\u4e0e\u8fd9\u4e00\u89c2\u70b9\u4e00\u81f4\uff1a\n\u4e39\u00b7\u9ea6\u91d1\u5229(Dan McKinley)\u5199\u9053\uff0c\u4ed6\u5728Etsy\u64cd\u4f5c\u57fa\u4e8eTwisted\u7684\u7cfb\u7edf\u7684\u7ecf\u5386\u3002\u8be5\u7cfb\u7edf\u4f3c\u4e4e\u53d7\u5230\u4e86\u6162\u6027\u5ef6\u8fdf\u53d8\u5316\u5f71\u54cd\uff1a\n[Twisted\u987e\u95ee]\u8bf4\uff0c\u867d\u7136Twisted\u5728\u603b\u4f53\u541e\u5410\u91cf\u65b9\u9762\u5f88\u597d\uff0c\u4f46\u5916\u56f4\u8bf7\u6c42\u53ef\u80fd\u4f1a\u7ecf\u5386\u4e25\u91cd\u7684\u5ef6\u8fdf\u3002\u8fd9\u5bf9[Etsy\u2018s\u7cfb\u7edf]\u6765\u8bf4\u662f\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3aPHP\u524d\u7aef\u4f7f\u7528\u5b83\u7684\u65b9\u5f0f\u662f\u6bcf\u4e2aweb\u8bf7\u6c42\u6570\u767e/\u6570\u5343\u6b21\u3002\nSQLAlChemy\u7684\u4f5c\u8005Mike Bayer\u5728\u51e0\u5e74\u524d\u7f16\u5199\u4e86\u5f02\u6b65Python\u548c\u6570\u636e\u5e93\uff0c\u5176\u4e2d\u4ed6\u4ece\u7565\u5fae\u4e0d\u540c\u7684\u89d2\u5ea6\u770b\u5f85\u5f02\u6b65\u3002\u4ed6\u8fd8\u8fdb\u884c\u4e86\u57fa\u51c6\u6d4b\u8bd5\uff0c\u53d1\u73b0\u5f02\u6b65\u901a\u4fe1\u6548\u7387\u8f83\u4f4e\u3002\n\u96f7\u5207\u5c14\u5728\u6d77\u6e7e\u8fb9\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u540d\u4e3a\u201c\u6211\u4eec\u5fc5\u987b\u8ba8\u8bba\u4e00\u4e0b\u5de8\u87d2\uff0cGunicorn\uff0cGevent\u7684\u4e8b\u60c5\u201d\uff0c\u5979\u5728\u6587\u4e2d\u63cf\u8ff0\u4e86\u57fa\u4e8eGevent\u7684\u914d\u7f6e\u5f15\u8d77\u7684\u64cd\u4f5c\u6df7\u4e71\u3002\u6211\u5728\u751f\u4ea7\u4e2d\u4e5f\u9047\u5230\u8fc7Gevent\u7684\u9ebb\u70e6(\u867d\u7136\u4e0e\u6027\u80fd\u65e0\u5173)\u3002\n\u6211\u5e94\u8be5\u63d0\u5230\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u5728\u8bbe\u7f6e\u8fd9\u4e9b\u57fa\u51c6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u5f02\u6b65\u5b9e\u73b0\u90fd\u4ee5\u4e00\u79cd\u607c\u4eba\u7684\u65b9\u5f0f\u5931\u8d25\u4e86\u3002\nUvicorn\u8ba9\u5b83\u7684\u7236\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u800c\u6ca1\u6709\u7ec8\u6b62\u5b83\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u5fc5\u987b\u8fdb\u884cPID\u641c\u7d22\uff0c\u5bfb\u627e\u4ecd\u5728\u4fdd\u7559\u7aef\u53e38001\u7684\u5b50\u8fdb\u7a0b\u3002AIOHTTP\u4e00\u5ea6\u5f15\u53d1\u4e86\u4e00\u4e2a\u4e0e\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u5173\u7684\u5185\u90e8\u5173\u952e\u9519\u8bef\uff0c\u4f46\u6ca1\u6709\u9000\u51fa(\u56e0\u6b64\u4efb\u4f55\u8fdb\u7a0b\u7ba1\u7406\u7a0b\u5e8f\u90fd\u4e0d\u4f1a\u91cd\u65b0\u542f\u52a8-\u8fd9\u662f\u4e00\u4e2a\u91cd\u5927\u9519\u8bef\uff01)\u3002\u8fbe\u8299\u59ae\u5728\u5f53\u5730\u4e5f\u9047\u5230\u4e86\u9ebb\u70e6\uff0c\u4f46\u6211\u5fd8\u4e86\u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\u3002\n\u6240\u6709\u8fd9\u4e9b\u9519\u8bef\u90fd\u662f\u6682\u65f6\u7684\uff0c\u4f7f\u7528SIGKILL\u5f88\u5bb9\u6613\u89e3\u51b3\u3002\u7136\u800c\uff0c\u4e8b\u5b9e\u4ecd\u7136\u662f\uff0c\u6211\u4e0d\u60f3\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8d1f\u8d23\u57fa\u4e8e\u8fd9\u4e9b\u5e93\u7684\u4ee3\u7801\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6211\u5bf9Gunicorn\u6216UWSGI\u6ca1\u6709\u4efb\u4f55\u95ee\u9898--\u53ea\u662f\u6211\u771f\u7684\u4e0d\u559c\u6b22UWSGI\u5728\u4f60\u7684\u5e94\u7528\u6ca1\u6709\u6b63\u786e\u52a0\u8f7d\u7684\u60c5\u51b5\u4e0b\u4e0d\u9000\u51fa\u3002\n\u6211\u7684\u5efa\u8bae\uff1a\u51fa\u4e8e\u6027\u80fd\u76ee\u7684\uff0c\u53ea\u4f7f\u7528\u666e\u901a\u7684\u540c\u6b65Python\uff0c\u4f46\u5c3d\u53ef\u80fd\u591a\u5730\u4f7f\u7528\u672c\u673a\u4ee3\u7801\u3002\u5bf9\u4e8eweb\u670d\u52a1\u5668\uff0c\u5982\u679c\u541e\u5410\u91cf\u662f\u6700\u91cd\u8981\u7684\uff0c\u90a3\u4e48\u503c\u5f97\u8003\u8651\u4f7f\u7528Flask\u4ee5\u5916\u7684\u6846\u67b6\uff0c\u4f46\u5373\u4f7f\u662fUWSGI\u4e0b\u7684Flask\u4e5f\u6709\u6700\u597d\u7684\u5ef6\u8fdf\u7279\u6027\u3002\nFlask\u7684\u539f\u4f5c\u8005\u51e0\u6b21\u53d1\u5e16\u8868\u8fbe\u4e86\u4ed6\u5bf9\u5f02\u6b65\u6280\u672f\u7684\u62c5\u5fe7\uff0c\u7b2c\u4e00\u6b21\u53d1\u5e16\u65f6\uff0c\u6211\u4e0d\u7406\u89e3Python\u7684Asyncio\uff0c\u5b83\u5b9e\u9645\u4e0a\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u8fd9\u9879\u6280\u672f\uff0c\u6700\u8fd1\u4ed6\u5728\u5e16\u5b50\u4e2d\u8bf4\uff0c\u6211\u5e76\u6ca1\u6709\u611f\u53d7\u5230\u5f02\u6b65\u7684\u538b\u529b\u3002\u4ed6\u5728\u5e16\u5b50\u4e2d\u8bf4\uff0c\u6211\u4e0d\u7406\u89e3Python\u7684Asyncio\uff0c\u5b83\u5b9e\u9645\u4e0a\u5bf9\u8fd9\u9879\u6280\u672f\u505a\u51fa\u4e86\u76f8\u5f53\u597d\u7684\u89e3\u91ca\u3002\u6700\u8fd1\uff0c\u4ed6\u5728\u6587\u7ae0\u4e2d\u8bf4\uff0c\u6211\u5e76\u6ca1\u6709\u611f\u53d7\u5230\u5f02\u6b65\u7684\u538b\u529b\u3002\u4ed6\u5728\u5e16\u5b50\u4e2d\u8bf4\uff0c\u6211\u4e0d\u7406\u89e3Python\u7684Asyncio\uff0c\u5b83\u5b9e\u9645\u4e0a\u5bf9\u8fd9\u9879\u6280\u672f\u505a\u51fa\u4e86\u76f8\u5f53\u597d\u7684\u89e3\u91ca\u3002\n\u4f60\u7684\u529f\u80fd\u662f\u4ec0\u4e48\u989c\u8272\u7684\uff1f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u540c\u65f6\u4f7f\u7528\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8bed\u8a00\u4f1a\u66f4\u75db\u82e6\u7684\u4e00\u4e9b\u539f\u56e0\u3002\n\u51fd\u6570\u7740\u8272\u662fPython\u4e2d\u7684\u4e00\u4e2a\u5927\u95ee\u9898\uff0c\u4ee4\u4eba\u9057\u61be\u7684\u662f\uff0c\u793e\u533a\u73b0\u5728\u5206\u6210\u4e86\u7f16\u5199\u540c\u6b65\u4ee3\u7801\u7684\u4eba\u548c\u7f16\u5199\u5f02\u6b65\u4ee3\u7801\u7684\u4eba-\u4ed6\u4eec\u4e0d\u80fd\u5171\u4eab\u76f8\u540c\u7684\u5e93\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u4e00\u4e9b\u5f02\u6b65\u5e93\u4e5f\u4e0e\u5176\u4ed6\u5f02\u6b65\u5e93\u4e0d\u517c\u5bb9\uff0c\u56e0\u6b64\u5f02\u6b65Python\u793e\u533a\u751a\u81f3\u8fdb\u4e00\u6b65\u5206\u88c2\u3002\nChris Wellons\u6700\u8fd1\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u4e5f\u8c08\u5230\u4e86\u5ef6\u8fdf\u95ee\u9898\u548casyncio\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u7c7b\u95ee\u9898\u4f7f\u5f97\u5f02\u6b65\u7a0b\u5e8f\u66f4\u96be\u6b63\u786e\u8fd0\u884c\u3002\n\u7eb3\u6492\u5c3c\u5c14\u00b7J\u00b7\u53f2\u5bc6\u65af(Nathaniel J.Smith)\u6709\u4e00\u7cfb\u5217\u5173\u4e8e\u5f02\u6b65\u901a\u4fe1\u7684\u91cd\u8981\u6587\u7ae0\uff0c\u6211\u63a8\u8350\u7ed9\u4efb\u4f55\u60f3\u8981\u638c\u63e1\u5b83\u7684\u4eba\uff1a\n\u4ed6\u4e89\u8fa9\u8bf4\u5f02\u6b65\u56fe\u4e66\u9986\u7684\u60f3\u6cd5\u662f\u9519\u8bef\u7684\u3002\u6211\u62c5\u5fc3\u7684\u662f\uff0c\u5982\u679c\u5c31PEP\u8fdb\u884c\u8fa9\u8bba\u7684\u5927\u8111\u888b\u9f20\u90fd\u505a\u4e0d\u5bf9\uff0c\u90a3\u4e48\u50cf\u6211\u8fd9\u6837\u7684\u51e1\u4eba\u8fd8\u6709\u4ec0\u4e48\u5e0c\u671b\u5462\uff1f", "note_en": "Async Python is slower than &#34;sync&#34; Python under a realistic benchmark. A bigger worry is that async frameworks go a bit wobbly under load.\n    Most people understand that async Python has a higher level of concurrency. It would make some sense for that to imply higher performance for common tasks like serving dynamic web sites or web APIs.\n    Under realistic conditions (see below) asynchronous web frameworks are slightly worse throughput (requests/second) and much worse latency variance.\n        50th and 99th percentile response times are in milliseconds, throughput is in requests per second. The table is ordered by P99, which I think is perhaps the most important real world statistic.\n        I think so. I tried to make them as realistic as possible. Here&#39;s the architecture I used:\n    I&#39;ve tried to model a real world deployment as best I can. There is a reverse proxy, the python code (ie: the variable), and a database. I&#39;ve also included an external database connection pooler as I think that is a pretty common feature of real deployments of web applications (at least, it is for postgresql).\n  The application in question queries a row by random key and returns the value as JSON.  Full source code is available on github.\n    The rule I used for deciding on what the optimal number of worker processes was is simple: for each framework I started at a single worker and increased the worker count successively until performance got worse.\n  The optimal number of workers varies between async and sync frameworks and the reasons are straightforward. Async frameworks, due to their IO concurrency, are able to saturate a single CPU with a single worker process.\n  The same is not true of sync workers: when they do IO they will block until the IO is finished. Consequently they need to have enough workers to ensure that all CPU cores are always in full use when under load.\n    Generally we recommend (2 x $num_cores) + 1 as the number of workers to start off with. While not overly scientific, the formula is based on the assumption that for a given core, one worker will be reading or writing from the socket while the other worker is processing a request.\n    I ran the benchmark on Hetzner&#39;s CX31 machine type, which is basically a 4 &#34;vCPU&#34;/8 GB RAM machine. It was run under Ubuntu 20.04. I ran the load generator on another (smaller) VM.\n      On   throughput (ie: requests/second) the primary factor is not async vs sync but how much Python code has been replaced with native code. Simply put, the more performance sensitive Python code you can replace the better you will do. This is Python performance tactic with a long history (see also: numpy).\n  Meinheld and UWSGI (~5.3k requests/sec each) are large bodies of C code. Standard Gunicorn (~3.4k requests/sec) is pure Python.\n  Uvicorn+Starlette (~4.9k requests/sec) replaces much more Python code than AIOHTTP&#39;s default server (~4.5k requests/sec) (though AIOHTTP was also installed with its optional &#34;speedups&#34;).\n    On   latency the problem is deeper. Under load, async does badly and latency starts to spike out to a much greater extent than under a traditional, sync, deployment.\n  Why is this? In async Python, the multi-threading is  co-operative, which simply means that threads are not interrupted by a central governor (such as the kernel) but instead have to voluntarily yield their execution time to others. In asyncio, the execution is yielded upon three language keywords:  await,  async for and  async with.\n  This means that execution time is not distributed &#34;fairly&#34; and one thread can inadvertently starve another of CPU time while it is working. This is why latency is more erratic.\n  In contrast, traditional sync Python webservers like UWSGI use the  pre-emptive multi-processing of the kernel scheduler, which works to ensure fairness by periodically swapping processes out from execution. This means that time is divided more fairly and that latency variance is lower.\n    The majority of other benchmarks (particularly those from async framework authors!) simply do not configure sync frameworks with enough workers. This means that those sync frameworks are effectively prevented from accessing most of the CPU time that is really available.\n  Here is a sample benchmark from the Vibora project. (I didn&#39;t test this framework because it&#39;s one of the less popular ones.)\n    Vibora claims 500% higher throughput than Flask. However when I reviewed their benchmark code I found that they are misconfiguring Flask to use one worker per CPU. When I correct that, I get the following numbers:\n    The throughput benefit of using Vibora over Flask is really  just 18%. Flask is one of the lower throughput sync frameworks I tested so I expect that a better sync setup would be much faster than Vibora, despite the impressive looking graph.\n  Another problem is that many benchmarks de-prioritise latency results in favour of throughput results (Vibora&#39;s doesn&#39;t even mention it for example). However, while throughput can be improved by adding machines, latency under load doesn&#39;t get better when you do that.\n      Although my benchmark is fairly realistic in terms of the things involved it&#39;s still much more homogenous than a real life workload - all requests do a database query and they all do the same thing with that query. Real applications typically have much more inherent variation: there will be some slow operations, some fast ones, some that do lots of IO and some that use lots of CPU. It seems reasonable to assume (and it&#39;s true in my experience) that latency variance is actually much higher in a real application.\n  My hunch is that async applications&#39; performance will be even more problematic in this case. Publicly available anecdotes are consistent with this idea:\n  Dan McKinley wrote about his experiences operating a Twisted-based system at Etsy. It seems that that system suffered from chronic latency variance:\n  [The Twisted consultants] said that although Twisted was good at overall throughput, outlying requests could experience severe latency. Which was a problem for [Etsy&#39;s system], because the way the PHP frontend used it was hundreds/thousands of times per web request.\n  Mike Bayer, the SQLAlchemy author, wrote  Asynchronous Python and Databases several years ago in which he considers async from a slightly different perspective. He also benchmarks, and finds asyncio less efficient.\n  &#34;Rachel by the Bay&#34; wrote an article called  &#34;We have to talk about this Python, Gunicorn, Gevent thing&#34; in which she describes operations chaos arising from a gevent-based configuration. I&#39;ve also had troubles (though not performance-related) with gevent in production.\n  The other thing I should mention is that in the course of setting up these benchmarks  every single async implementation managed to fall over in an annoying way.\n  Uvicorn had its parent process terminate without terminating any of its children which meant that I then had to go pid hunting for the children who were still holding onto port 8001. At one point AIOHTTP raised an internal critical error to do with file descriptors but did not exit (and so would not be restarted by any process supervisor -  a cardinal sin!). Daphne also ran into trouble locally but I forget exactly how.\n  All of these errors were transient and easily resolved with SIGKILL. However the fact remains that I wouldn&#39;t want to be responsible for code based on these libraries in a production context. By contrast I didn&#39;t have any problems with Gunicorn or UWSGI - except that I really dislike that UWSGI doesn&#39;t exit if your app hasn&#39;t loaded correctly.\n    My recommendation: for performance purposes, just use normal, synchronous Python but use native code for as much as possible. For webservers, it&#39;s worth considering frameworks other than Flask if throughput is paramount but even Flask under UWSGI has latency characteristics as good as the best.\n      Flask&#39;s original author has posted a couple of times about his concerns regarding asyncio, first posting  &#34;I don&#39;t understand Python&#39;s Asyncio&#34; which actually gives a pretty good explanation of the technology and recently with  &#34;I&#39;m not feeling the async pressure&#34; in which he says:\n    What color is your function? explains some of the reasons why it is more painful to have a language with sync and async at the same time.\n  Function colouring is a big problem in Python and the community is now sadly bifurcated into people writing sync code and people writing async code - they can&#39;t share the same libraries. Worse yet, some async libraries are also incompatible with other async libraries so the async Python community is even further divided.\n  Chris Wellons wrote  an article recently which also touches on latency issues and some footguns in the asyncio standard library. This is the kind of problem that makes async programs much harder to get right unfortunately.\n  Nathaniel J. Smith has a series of brill articles on async that I recommend to anyone trying to get to grips with it:\n    He contends that the asyncio library is misconceived. My worry is that if the big brains who debate PEPs can&#39;t get it right, what hope is there for mere mortals like myself?", "posttime": "2020-06-12 17:23:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python", "title": "\u5f02\u6b65Python\u7684\u901f\u5ea6\u5e76\u4e0d\u5feb", "title_en": "Async Python is not faster", "transed": 1, "url": "http://calpaterson.com/async-python-is-not-faster.html", "via": "", "real_tags": ["python"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006269, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "18\u540d\u7403\u5458(221)\u53c2\u52a0\u590f\u5b63\u66f4\u65b0\u6bd4\u8d5b(5)\u53c2\u52a0\u5927\u5802\u6e38\u620f\u8bad\u7ec3(3)\u4f7f\u7528\u4e13\u4e1a\u670d\u52a1\u5668\u548c\u79c1\u4eba\u670d\u52a1\u5668(92)\uff1b\u7ecf\u5178\u6bd4\u8d5b(887)\u6761\u4ef6\u4e3a\u96f6\uff1b(20)CSS\uff1b(22)\u51b3\u6597\uff1b(4)\u6b7b\u4ea1\u6bd4\u8d5b\uff1b(21)\u67aa\u652f\u6e38\u620f\uff1b(105)Hide&#39\uff1bn&#39\uff1b\u5bfb\u6c42(1)\u8089\u98df(41)\u6b7b\u4ea1\u5954\u8dd1(31)AWP(37)\u6211\u7684\u4e16\u754c(13)S.T.A.L.K.E.R.\u4e4c\u514b\u5170(4)\u661f\u7403\u5927\u621835hp(9)\u51ac\u5b63\u66f4\u65b0(60)\u624b\u69b4\u5f39\u51b2\u6d6a(60)Bender&#39\uff1b\u7f8e\u56fd(2)\u8001\u9f20(8)AIM(13)\u4fc4\u7f57\u65af(5)\u8d35\u5bbe(2)16\u4eba(326)\u75af\u72c2\u6e38\u620f\u8bed\u97f3\u804a\u5929(122)", "note_en": "18 Players\u00a0 (221)\u00a0 \u00a0       Summer Update\u00a0 (5)\u00a0 \u00a0       Lobby\u00a0 \u00a0       Training\u00a0 (3)\u00a0 \u00a0       Pro Servers\u00a0 \u00a0       Private Servers\u00a0 (92)\u00a0 \u00a0       Classic\u00a0 (887)       Condition Zero\u00a0 (20)       CSS\u00a0 (22)       Duel\u00a0 (4)       Deathmatch\u00a0 (21)       Gun Game\u00a0 (105)       Hide&#39;n&#39;Seek\u00a0 (1)       Meat\u00a0 (41)       Death Run\u00a0 (31)       AWP\u00a0 (37)       Minecraft\u00a0 (13)       S.T.A.L.K.E.R.       Ukraine\u00a0 (4)       Star Wars       35hp\u00a0 (9)       Winter Update\u00a0 (60)       Grenades       Surfing\u00a0 (60)       Bender&#39;s\u00a0 (2)       Rats\u00a0 (8)       AIM\u00a0 (13)       Russia\u00a0 (5)       VIP\u00a0 (2)       16 Players\u00a0 (326)       Crazy Game       Voice Chat\u00a0 (122)", "posttime": "2020-06-12 17:06:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u53cd\u6050,counter", "title": "\u5728\u6d4f\u89c8\u5668\u4e2d\u73a9\u53cd\u60501.6\u6e38\u620f", "title_en": "Play Counter-Strike 1.6 in your browser", "transed": 1, "url": "http://cs-online.club", "via": "", "real_tags": ["\u6e38\u620f", "\u53cd\u6050", "counter"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006268, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Kronecker\u79ef\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7535\u8def\u4e2d\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u5177\u6709\u5e76\u884c\u903b\u8f91\u95e8\u7684\u7535\u8def\u4e2d\uff0c\u7528\u6765\u64cd\u4f5c\u6bd4\u7279\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u8ba8\u8bba\u7535\u8def\u4e2d\u7684Kronecker\u79ef\u7684\u6570\u5b66\u3002\n\u8bbe$A\\in\\mathbb{C}^{m\\Times n}$\u3001$B\\in\\mathbb{C}^{r\\Times s}$\u3001$C\\in\\mathbb{C}^{n\\Times p}$\u548c$D\\in\\mathbb{C}^{s\\Times t}$\uff0c\u5219\u3002\n\u903b\u8f91\u95e8\u53ef\u4ee5\u81ea\u7136\u5730\u7531\u77e9\u9635\u8868\u793a\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4efb\u4f55\u4e00\u4f4d\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a\u957f\u5ea6\u4e3a$2^1=2$\u7684\u552f\u4e00\u5355\u70ed\u72b6\u6001\u5411\u91cf\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c0\u662f$|0\\rangle=[1\uff0c0]^{\\top}$\uff0c1\u662f$|1\\rangle=[0\uff0c1]^{\\top}$\u3002\u7ed9\u5b9a\u4efb\u610f\u4e24\u4f4d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a\u957f\u5ea6\u4e3a$2^2=4$\u7684\u552f\u4e00\u5355\u70ed\u70b9\u72b6\u6001\u5411\u91cf\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c00\u662f$|00\\rangle=[1\uff0c0\uff0c0\uff0c0]^{\\top}$\uff0c01\u662f$|01\\rangle=[0\uff0c1\uff0c0\uff0c0]^{\\top}$\uff0c10\u662f$|10\\rangle=[0\uff0c0\uff0c1\uff0c0]^{\\top}$\uff0c11\u662f$|11\\rangle=[0\uff0c0\uff0c0\uff0c1]^{\\top}$\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002\n\u4f20\u7edf\u7684AND\u95e8\u53d6\u4e24\u4f4d\u5e76\u751f\u6210\u4e00\u4f4d\u3002\u5b83\u7684\u77e9\u9635\u8868\u793a$\\text{and}\\in\\mathbb{C}^{2^1\\x 2^2}$\u63a5\u53d7\u957f\u5ea6\u4e3a4\u7684\u72b6\u6001\u5411\u91cf\u5e76\u751f\u6210\u957f\u5ea6\u4e3a2\u7684\u72b6\u6001\u5411\u91cf\uff0c\u5176\u77e9\u9635\u8868\u793a$\\text{and}\\in\\mathbb{C}^{2^1\\x 2^2}$\u3002\nAND GATE\u7684\u671f\u671b\u503c\u662f00-&gt\uff1band-&gt\uff1b0\uff0c01-&gt\uff1band-&gt\uff1b0\uff0c10-&gt\uff1band-&gt\uff1b0\uff0c11-&gt\uff1band-&gt\uff1b1\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u68c0\u67e5\u5176\u4e2d\u4e00\u4e2a\uff0c\u6bd4\u598201-&gt\uff1band-&gt\uff1b0\u3002\n\u95e8\u8f93\u5165\u4e3a$|01\\rangle=[0\uff0c1\uff0c0\uff0c0]^{\\top}$(10)\uff0c\u95e8\u8f93\u51fa\u4e3a$|0\\rangle=[1\uff0c0]^{\\top}$(0)\uff0c\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u3002\n\u5982\u679c\u6211\u4eec\u6709\u591a\u4e2a\u4f4d\u7684\u8f93\u5165\uff0c\u6211\u4eec\u5e0c\u671b\u53d6\u903b\u8f91\u95e81\u7684\u524d\u51e0\u4e2a\u8fde\u7eed\u4f4d\uff0c\u903b\u8f91\u95e82\u7684\u7b2c\u4e8c\u4e2a\u8fde\u7eed\u4f4d\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u6536\u96c6\u6240\u6709\u8f93\u51fa\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa\u3002\u903b\u8f91\u95e81\u30012\u7b49\u662f\u5e76\u884c\u903b\u8f91\u95e8\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e09\u4f4d010\u3002\u6211\u4eec\u60f3\u5c06\u524d\u4e24\u4e2a\u6bd4\u727901\u4f5c\u4e3aAND\uff0c\u7b2c\u4e09\u4e2a\u6bd4\u7279\u4f5c\u4e3aNOT\u3002\u9884\u671f\u8f93\u51fa\u5c06\u4e3a01\uff0c\u56e0\u4e3a01-&gt\uff1b\u548c-&gt\uff1b0\u548c0-&gt\uff1b\u4e0d\u662f-&gt\uff1b1\u3002\n\u4e09\u4e2a\u6bd4\u7279010\u4e5f\u53ef\u4ee5\u7531\u957f\u5ea6\u4e3a$2^3=8$\u7684\u72b6\u6001\u5411\u91cf\u8868\u793a\u3002\u901a\u5e38\uff0c\u6211\u4eec\u9700\u8981\u5c06010\u8f6c\u6362\u4e3auint\uff0c\u53732\uff0c\u7136\u540e\u6211\u4eec\u77e5\u9053\u72b6\u6001\u5411\u91cf\u662f$|010\\rangle=[0\uff0c0\uff0c1\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0]^{\\top}$\u3002\u7136\u800c\uff0c\u7531\u4e8e01\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u7cfb\u7edf\u72b6\u6001\uff0c\u800c0\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u53e6\u4e00\u79cd\u7cfb\u7edf\u72b6\u6001\uff0c\u56e0\u6b64010\u5c06\u662f\u7cfb\u7edf\u72b6\u600101\u548c\u7cfb\u7edf\u72b6\u60010\u7684\u5408\u5e76\u7684\u7cfb\u7edf\u72b6\u6001\u3002\u5728\u6570\u5b66\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u77e5\u905301\u548c0\u7684\u72b6\u6001\u5411\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Kronecker\u79ef\u8ba1\u7b97\u5408\u5e76\u540e\u7684\u7cfb\u7edf\u72b6\u6001010\u3002\n\u5176\u4e2d$\\oTimes$\u662fKronecker\u4ea7\u54c1\u3002\u4eba\u4eec\u975e\u6b63\u5f0f\u5730\u79f0Kronecker\u79ef\u548c\u5f20\u91cf\u79ef\u4e92\u6362\u3002\u6839\u636e\u8f93\u51fa\u4ea7\u54c1\u8ba1\u7b97\u51fa\u7684010\u7684\u72b6\u6001\u5411\u91cf\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u3002\n\u6211\u4eec\u5c06\u524d\u4e24\u4f4d01\u5e94\u7528\u4e8e\uff0c\u6b63\u5982\u6211\u4eec\u5728\u4e0a\u9762\u8ba1\u7b97\u7684\u90a3\u6837\uff0c\u6211\u4eec\u6709\u3002\n\u7531\u4e8e\u6211\u4eec\u8bbe\u7f6e\u7535\u8def\u7684\u65b9\u5f0f\uff0cAND\u548cNOT\u662f\u5e76\u884c\u7684\u903b\u8f91\u95e8\uff0c\u56e0\u6b64\u5fc5\u987b\u5c06\u8f93\u51fa\u72b6\u6001\u5411\u91cf\u5408\u5e76\u4e3a\u4e00\u4e2a\u72b6\u6001\u5411\u91cf\u3002\n\u6211\u4eec\u78b0\u5de7\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u6211\u4eec\u5728\u524d\u63d0\u6761\u4ef6\u4e2d\u63d0\u5230\u7684Kronecker\u79ef\u6df7\u5408\u4e58\u79ef\u6027\u8d28\u3002\n\u8fd9\u610f\u5473\u7740\uff0c\u4e3a\u4e86\u8ba1\u7b97\u8fd9\u79cd\u5e76\u884c\u903b\u8f91\u95e8\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u4e0d\u5fc5\u5206\u522b\u8ba1\u7b97\u6bcf\u4e2a\u5355\u4e2a\u903b\u8f91\u95e8\u7684\u8f93\u51fa\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u8f93\u51fa\u6536\u96c6\u5728\u4e00\u8d77\u3002\u7ed9\u5b9a\u5b8c\u6574\u7684\u8f93\u5165\u72b6\u6001\u5411\u91cf$|010\\Rangle$\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528AND\u548cNOT\u7684\u5408\u5e76\u8fd0\u7b97\u7b26\uff0c\u7ed3\u679c\u662f$\\text{and}\\oTimes\\text{not}$\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\u77e9\u9635\u4e58\u6cd5\u76f4\u63a5\u8ba1\u7b97\u8f93\u51fa\u3002\n\u4efb\u4f55\u4e24\u4e2a\u5e76\u884c\u903b\u8f91\u95e8\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u903b\u8f91\u95e8\u6765\u63cf\u8ff0\uff0c\u8be5\u5355\u4e2a\u903b\u8f91\u95e8\u662f\u8fd9\u4e24\u4e2a\u903b\u8f91\u95e8\u7684Kronecker\u79ef\u3002\n\u901a\u5e38\uff0c\u5982\u679c\u6211\u4eec\u5177\u6709\u7531\u4e24\u4e2a\u5e76\u884c\u903b\u8f91\u95e8($X$\u548c$Y$)\u3001\u8f93\u5165\u72b6\u6001\u5411\u91cf$|a\\Rangle$\u5230$X$\u3001\u8f93\u5165\u72b6\u6001\u5411\u91cf$|b\\Rangle$\u5230$Y$\u3001\u6765\u81ea$X$\u7684\u8f93\u51fa\u72b6\u6001\u5411\u91cf$|c\\Rangle$\u3001\u6765\u81ea$Y$\u7684\u8f93\u51fa\u72b6\u6001\u5411\u91cf$|d\\Rangle$\u3001\u5408\u5e76\u7684\u8f93\u5165\u72b6\u6001\u5411\u91cf$|ab\\Rangle$\u6216$|ba\\Rangle$\u3001\u4ee5\u53ca\u5408\u5e76\u7684\u8f93\u51fa\u72b6\u6001\u5411\u91cf$|cd\\Rangle$\u7ec4\u6210\u7684\u7535\u8def\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\u662f$X\\oTimes Y\\cong Y\\oTimes X$\u548c$Y\\oTimes X=P(X\\oTimes Y)Q$\uff0c\u5176\u4e2d$P$\u548c$Q$\u5206\u522b\u662f\u884c\u7f6e\u6362\u77e9\u9635\u548c\u5217\u7f6e\u6362\u77e9\u9635\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u6709$|ba\\rangle=W|ab\\rangle$\u548c$|dc\\rangle=V|cd\\rangle$\uff0c\u5176\u4e2d$W$\u548c$V$\u662f\u884c\u7f6e\u6362\u77e9\u9635\u3002\n\u4f3c\u4e4e$V^{-1}P=I$\u548c$Q W=I$\u3002\u4f46\u662f\u6211\u8fd8\u6ca1\u6709\u60f3\u51fa\u4e00\u4e2a\u6b63\u5f0f\u7684\u8bc1\u636e\u6765\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684Python\u811a\u672c\u6765\u6a21\u62df\u548c\u9a8c\u8bc1\u6211\u4e0a\u9762\u63cf\u8ff0\u7684\u5e76\u884c\u903b\u8f91\u95e8\u548cKronecker\u4ea7\u54c1\u6d41\u7a0b\u3002\n\u5c06\u6570\u5b66\u5bfc\u5165numpy\u4f5c\u4e3aNP\u7c7bBITS(\u5bf9\u8c61)\u5bfc\u5165\uff1adef__init__(self\uff0cbit_string)\uff1aself\u3002SANITY_CHECK(BIT_STRING)SELF\u3002bit_string=bit_string def sanity_check(self\uff0cbit_string)\uff1a\u5bf9\u4e8ebit_string\u4e2d\u7684char\uff1aif char\uff01=&#34\uff1b0&#34\uff1band char\uff01=&#34\uff1b1&#34\uff1b\uff1a\u5f15\u53d1\u5f02\u5e38(&#34\uff1bBitString\u6784\u9020\u4f7f\u7528\u75310\u548c1\uff01&#34\uff1b)def__len__(Self)\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff1a\u8fd4\u56delen(self\u3002bit_string)def__eq__(self\uff0cbits)\uff1a\u8fd4\u56deself\u3002BIT_STRING==BITS\u3002bit_string def__str__(Self)\uff1a\u8fd4\u56deself\u3002bit_string def to_uint(Self)\uff1a\u8fd4\u56deint(self.\u3002bit_string\uff0c2)def to_state_vec(Self)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bvec=[0]*(2**len(Self))vec[self.\u3002to_uint()]=1\u8fd4\u56devec def state_vec_to_bits(State_Vec)\uff1anum_zeros=0 num_ones=0 state_vec_len=len(State_Vec)num_bits=\u6570\u5b66\u3002log(state_vec_len\uff0c2)\uff0c\u5982\u679c\u4e0d\u662fnum_bits\u3002IS_INTEGER()\uff1a\u5f15\u53d1\u5f02\u5e38(&#34\uff1b\u65e0\u6548\u7684\u72b6\u6001\u5411\u91cf\u957f\u5ea6\uff01&#34\uff1b)num_bits=int(Num_Bits)idx=NONE\uff0c\u5bf9\u4e8ei\uff0c\u679a\u4e3e\u4e2d\u7684\u5143\u7d20(State_Vec)\uff1aif element==0\uff1anum_zeros+=1 elif element==1\uff1anum_ones+=1 idx=i\u5426\u5219\uff1a\u5982\u679cnum_ones\uff01=1\u6216idx\uff0c\u5219\u5f15\u53d1\u5f02\u5e38(&#34\uff1b\u72b6\u6001\u5411\u91cf\u53ea\u80fd\u5305\u542b0\u62161\uff01&#34\uff1b)\u3002\u72b6\u6001\u5411\u91cf\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a1\uff01&#34\uff1b)bit_string=bin(Idx)[2\uff1a]\u3002zill(Num_Bits)bits=bits(bit_string=bit_string)\u8fd4\u56de\u4f4ddef main()\uff1a#Gate Operators not=NP\u3002\u6570\u7ec4([[0\uff0c1]\uff0c[1\uff0c0]])\u548c=NP\u3002array([1\uff0c1\uff0c1\uff0c0]\uff0c[0\uff0c0\uff0c0\uff0c1]])bit_string_a=&#34\uff1b01&#34\uff1bbit_string_b=&#34\uff1b0&#34\uff1bbit_string_c=&#34\uff1b0&#34\uff1bbit_string_d=&#34\uff1b1&#34\uff1bbits_a=bits(bit_string=bit_string_a)bits_b=bits(bit_string=bit_string_b)bits_c=bits(bit_string=bit_string_c)bits_d=bits(bit_string=bit_string_d)bits_ab=bits(bit_string=bit_string_a+bit_string_b)bits_ba=bits(bit_string=bit_string_b+bit_string_a)bits_cd=bits\u3002(bit_string=bit_string_c+bit_string_d)bits_dc=bits(bit_string=bit_string_d+bit_string_c)assert bits_a==state_vec_to_bits(state_vec=bits_a)\u3002to_state_vec())\u65ad\u8a00BITS_b==STATE_VEC_TO_BITS(STATE_VEC=BITS_b\u3002to_state_vec())\u65ad\u8a00BITS_c==STATE_VEC_TO_BITS(STATE_VEC=BITS_c\u3002to_state_vec())\u65ad\u8a00BITS_d==STATE_VEC_TO_BITS(STATE_VEC=BITS_d\u3002to_state_vec())A=NP\u3002\u6570\u7ec4(Bits_a.\u3002to_state_vec())B=NP\u3002\u6570\u7ec4(bitsb.\u3002to_state_vec())C=NP\u3002\u6570\u7ec4(Bits_c.\u3002to_state_vec())D=NP\u3002\u6570\u7ec4(bits_d.\u3002to_state_vec())AB=NP\u3002\u6570\u7ec4(Bits_ab.\u3002to_state_vec())BA=NP\u3002\u6570\u7ec4(bits_ba.\u3002to_state_vec())cd=np\u3002\u6570\u7ec4(BITS_CD.\u3002to_state_vec())dc=np\u3002\u6570\u7ec4(BITS_DC.\u3002to_state_vec())#\u5e76\u884c\u64cd\u4f5c#A-\u548c-&gt;C#B-&&gt;D#\u6211\u4eec\u6709\u4ee5\u4e0b\u516c\u5f0f#AND*A=C\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(\u548c\uff0cA)\uff0cC)#NOT*B=D\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(\u975e\uff0cB)\uff0cD)#A\\o\u4e58\u4ee5B=AB\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002Kron(A\uff0cB)\uff0cAB)#B\\o\u4e58\u4ee5A=BA\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002Kron(B\uff0cA)\uff0cBA)#C\\oTimes D=CD\u65ad\u8a00Np\u3002ARRAY_EQUAL(np.\u3002Kron(C\uff0cD)\uff0cCd)#D\\o\u4e58\u4ee5C=DC\u65ad\u8a00Np\u3002ARRAY_EQUAL(np.\u3002Kron(D\uff0cC)\uff0cDC)#(AND\\otime NOT)*(A\\otime B)=(C\\oTimes D)\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(np.\u3002Kron(\u548c\uff0c\u975e)\uff0cNP\u3002Kron(A\uff0cB))\uff0cNP\u3002Kron(C\uff0cD))#(NOT\\oTimes AND)*(B\\oTimes A)=(D\\oTimes C)Assert NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(np.\u3002Kron(\u975e\uff0cand)\uff0cNP\u3002Kron(B\uff0cA))\uff0cNP\u3002Kron(D\uff0cC))IF__NAME__==&#34\uff1b__Main__&#34\uff1b\uff1aMain()", "note_en": "Kronecker product is widely used in circuits, especially those that have parallel logical gates, to manipulate bits.\n  In this blog post, I would like to discuss the mathematics of Kronecker product in circuits.\n   Let $A \\in \\mathbb{C}^{m \\times n}$, $B \\in \\mathbb{C}^{r \\times s}$, $C \\in \\mathbb{C}^{n \\times p}$, and $D \\in \\mathbb{C}^{s \\times t}$, then\n     Logical gates could be natually represented by matrices. For example, given any one bit, we could represent it as a unique one-hot state vector of length $2^1 = 2$. More concretely,  0 is $| 0 \\rangle = [1, 0]^{\\top}$,  1 is $| 1 \\rangle = [0, 1]^{\\top}$. given any two bits, we could represent it as a unique one-hot state vector of length $2^2 = 4$. More concretely,  00 is $| 00 \\rangle = [1, 0, 0, 0]^{\\top}$,  01 is $| 01 \\rangle = [0, 1, 0, 0]^{\\top}$,  10 is $| 10 \\rangle = [0, 0, 1, 0]^{\\top}$,  11 is $| 11 \\rangle = [0, 0, 0, 1]^{\\top}$. So on and so forth.\n  A classic  AND gate takes into two bits and generates one bit. Its matrix representation $\\text{AND} \\in \\mathbb{C}^{2^1 \\times 2^2}$, which takes in a state vector of length 4 and generates a state vector of length 2, is\n The expectations of  AND gate are  00 -&gt; AND -&gt; 0,  01 -&gt; AND -&gt; 0,  10 -&gt; AND -&gt; 0,  11 -&gt; AND -&gt; 1. Let\u2019s check one of them, say  01 -&gt; AND -&gt; 0, using matrix multiplication.\n The gate input is $| 01 \\rangle = [0, 1, 0, 0]^{\\top}$ ( 10) and the gate output is $| 0 \\rangle = [1, 0]^{\\top}$ ( 0), which matches our expectation.\n   If we have an input of multiple bits, we would like to take the first several consecutive bits for logical gate 1, the second several consecutive bits for logical gate 2, and so on, and we collect all the outputs as the final output. The logical gate 1, 2, etc., are parallel logical gates.\n  For example, we have three bits,  010. We would like to take the first two bits  01 for  AND and the third bit for  NOT. The expected output would be  01 because  01 -&gt; AND -&gt; 0 and  0 -&gt; NOT -&gt; 1.\n  The three bits,  010, could also be represented by a state vector of length $2^3=8$. Normally, we would need to convert  010 to a  uint, which is  2 and then we know the state vector is $| 010 \\rangle = [0, 0, 1, 0, 0, 0, 0, 0]^{\\top}$. However, since  01 could be thought as one system state and  0 could be thought as an another system state,  010 would be a merged system state of system state  01 and system state  0. Mathematically, if we know the state vector for  01 and  0, we could compute the merged system state  010 using Kronecker product.\n Where $\\otimes$ is the Kronecker product. Informally, people call Kronecker product and tensor product interchangably. The state vector for  010 calculated from the output product matches our expectation.\n  We apply the first two bits  01 for  AND, as we have caculated above, we have\n   Because of the way we set up the circuits,  AND and  NOT are parallel logical gates, the output state vector has to be merged into one state vector.\n  We happen to find that we could apply the Kronecker product mixed-product property we mentioned in the prerequisites.\n This means that in order to compute the output of this parallel logical gates, we don\u2019t have to compute the outputs for each single logical gate separately and collect the outputs back together. Given the intact input state vector, $|010\\rangle $, we could apply a merged operator of  AND and  NOT, which turns out to be $\\text{AND} \\otimes \\text{NOT}$, and the output could be computed directly using matrix multiplication once.\n  Any two parallel logical gates could be described using a single logical gate that is the Kronecker product of the two.\n  In general, if we have a circuit consisting of two parallel logical gates, $X$ and $Y$, the input state vector $| a \\rangle$ to $X$, the input state vector $| b \\rangle$ to $Y$, the output state vector $| c \\rangle$ from $X$, the output state vector $| d \\rangle$ from $Y$, the merged input state vector $| ab \\rangle$ or $| ba \\rangle$, and the merged output state vector $| cd \\rangle$ or $| dc \\rangle$, we have the following equations.\n One interesting thing to note is that  $X \\otimes Y \\cong Y \\otimes X$ and $Y \\otimes X = P (X \\otimes Y) Q$, where $P$ and $Q$ are row and column permutation matrices respectively. We could also have $| ba \\rangle = W | ab \\rangle$, and $| dc \\rangle = V | cd \\rangle$, where $W$ and $V$ are row permutation matrices.\n  It seems that $V^{-1} P = I$ and $Q W = I$. But I have not thought of a formal proof to this.\n  Here I implemented a simple Python script to simulate and verify the parallel logical gates and Kronecker product processes I described above.\n import  math import  numpy  as  np  class  Bits ( object ):  def  __init__ ( self ,  bit_string ):  self . sanity_check ( bit_string )  self . bit_string  =  bit_string  def  sanity_check ( self ,  bit_string ):  for  char  in  bit_string :  if  char  !=  &#34;0&#34;  and  char  !=  &#34;1&#34; :  raise  Exception ( &#34;BitString construction uses a string consisting of 0 and 1!&#34; )  def  __len__ ( self ):  return  len ( self . bit_string )  def  __eq__ ( self ,  bits ):  return  self . bit_string  ==  bits . bit_string  def  __str__ ( self ):  return  self . bit_string  def  to_uint ( self ):  return  int ( self . bit_string ,  2 )  def  to_state_vec ( self ):  &#34;&#34;&#34; Return a one-hot state vector for bits &#34;&#34;&#34;  vec  =  [ 0 ]  *  ( 2  **  len ( self ))  vec [ self . to_uint ()]  =  1  return  vec def  state_vec_to_bits ( state_vec ):  num_zeros  =  0  num_ones  =  0  state_vec_len  =  len ( state_vec )  num_bits  =  math . log ( state_vec_len ,  2 )  if  not  num_bits . is_integer ():  raise  Exception ( &#34;Invalid state vector length!&#34; )  num_bits  =  int ( num_bits )  idx  =  None  for  i ,  element  in  enumerate ( state_vec ):  if  element  ==  0 :  num_zeros  +=  1  elif  element  ==  1 :  num_ones  +=  1  idx  =  i  else :  raise  Exception ( &#34;State vector should only container 0 or 1!&#34; )  if  num_ones  !=  1  or  idx  is  None :  raise  Exception ( &#34;State vector should only have one 1!&#34; )  bit_string  =  bin ( idx )[ 2 :]. zfill ( num_bits )  bits  =  Bits ( bit_string = bit_string )  return  bits def  main ():  # Gate operators  NOT  =  np . array ([[ 0 , 1 ],[ 1 , 0 ]])  AND  =  np . array ([[ 1 , 1 , 1 , 0 ],[ 0 , 0 , 0 , 1 ]])  bit_string_a  =  &#34;01&#34;  bit_string_b  =  &#34;0&#34;  bit_string_c  =  &#34;0&#34;  bit_string_d  =  &#34;1&#34;  bits_a  =  Bits ( bit_string = bit_string_a )  bits_b  =  Bits ( bit_string = bit_string_b )  bits_c  =  Bits ( bit_string = bit_string_c )  bits_d  =  Bits ( bit_string = bit_string_d )  bits_ab  =  Bits ( bit_string = bit_string_a  +  bit_string_b )  bits_ba  =  Bits ( bit_string = bit_string_b  +  bit_string_a )  bits_cd  =  Bits ( bit_string = bit_string_c  +  bit_string_d )  bits_dc  =  Bits ( bit_string = bit_string_d  +  bit_string_c )  assert  bits_a  ==  state_vec_to_bits ( state_vec = bits_a . to_state_vec ())  assert  bits_b  ==  state_vec_to_bits ( state_vec = bits_b . to_state_vec ())  assert  bits_c  ==  state_vec_to_bits ( state_vec = bits_c . to_state_vec ())  assert  bits_d  ==  state_vec_to_bits ( state_vec = bits_d . to_state_vec ())  A  =  np . array ( bits_a . to_state_vec ())  B  =  np . array ( bits_b . to_state_vec ())  C  =  np . array ( bits_c . to_state_vec ())  D  =  np . array ( bits_d . to_state_vec ())  AB  =  np . array ( bits_ab . to_state_vec ())  BA  =  np . array ( bits_ba . to_state_vec ())  CD  =  np . array ( bits_cd . to_state_vec ())  DC  =  np . array ( bits_dc . to_state_vec ())  # Parallel operations  # A -&gt; AND -&gt; C  # B -&gt; NOT -&gt; D  # We have the following equations  # AND * A = C  assert  np . array_equal ( np . dot ( AND ,  A ),  C )  # NOT * B = D  assert  np . array_equal ( np . dot ( NOT ,  B ),  D )  # A \\otimes B = AB  assert  np . array_equal ( np . kron ( A ,  B ),  AB )  # B \\otimes A = BA  assert  np . array_equal ( np . kron ( B ,  A ),  BA )  # C \\otimes D = CD  assert  np . array_equal ( np . kron ( C ,  D ),  CD )  # D \\otimes C = DC  assert  np . array_equal ( np . kron ( D ,  C ),  DC )  # (AND \\otimes NOT) * (A \\otimes B) = (C \\otimes D)  assert  np . array_equal ( np . dot ( np . kron ( AND ,  NOT ),  np . kron ( A ,  B )),  np . kron ( C ,  D ))  # (NOT \\otimes AND) * (B \\otimes A) = (D \\otimes C)  assert  np . array_equal ( np . dot ( np . kron ( NOT ,  AND ),  np . kron ( B ,  A )),  np . kron ( D ,  C )) if  __name__  ==  &#34;__main__&#34; :  main ()", "posttime": "2020-06-12 16:32:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8def,product,bits", "title": "\u7535\u8def\u4e2d\u7684Kronecker\u79ef", "title_en": "Kronecker Product in Circuits", "transed": 1, "url": "https://leimao.github.io/blog/Kronecker-Product-In-Circuits/", "via": "", "real_tags": ["\u7535\u8def", "product", "bits"]}, {"category": "", "categoryclass": "", "imagename": "ac9f4c327b4c071690318813517ad97c.png", "infoid": 1006266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cRust\u9488\u5bf9\u6267\u884c\u901f\u5ea6\u800c\u4e0d\u662f\u4e8c\u8fdb\u5236\u5927\u5c0f\u8fdb\u884c\u4f18\u5316\uff0c\u56e0\u4e3a\u8fd9\u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u7406\u60f3\u7684\u3002\u4f46\u662f\u5bf9\u4e8e\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u9488\u5bf9\u4e8c\u8fdb\u5236\u5927\u5c0f\u8fdb\u884c\u4f18\u5316\u7684\u60c5\u51b5\uff0cRust\u63d0\u4f9b\u4e86\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u673a\u5236\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCargo Build\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u6784\u5efaRust\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8c03\u8bd5\u6a21\u5f0f\u7981\u7528\u8bb8\u591a\u4f18\u5316\uff0c\u8fd9\u6709\u52a9\u4e8e\u8c03\u8bd5\u5668(\u4ee5\u53ca\u8fd0\u884c\u5b83\u4eec\u7684IDE)\u63d0\u4f9b\u66f4\u597d\u7684\u8c03\u8bd5\u4f53\u9a8c\u3002\u8c03\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u53ef\u4ee5\u6bd4\u53d1\u5e03\u4e8c\u8fdb\u5236\u6587\u4ef6\u592730%\u6216\u66f4\u591a\u3002\n\u5728Linux\u548cMacOS\u4e0a\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5143\u4ef6\u4fe1\u606f\u5305\u542b\u5728\u7f16\u8bd1\u7684.elf\u6587\u4ef6\u4e2d\u3002\u6b63\u786e\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0d\u9700\u8981\u6b64\u4fe1\u606f\u3002\u8981\u5220\u9664\u6b64\u4fe1\u606f\uff0c\u8bf7\u5bf9.elf\u6587\u4ef6\u8fd0\u884cstrip\uff1a\n\u5bf9\u4e8e\u53d1\u5e03\u7248\u672c\uff0cCargo\u5c06\u5176\u4f18\u5316\u7ea7\u522b\u9ed8\u8ba4\u4e3a3\uff0c\u8fd9\u5c06\u4f18\u5316\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u901f\u5ea6\u3002\u8981\u6307\u793aCargo\u4f18\u5316\u4e3a\u6700\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\uff0c\u8bf7\u4f7f\u7528Cargo.toml\u4e2d\u7684z\u4f18\u5316\u7ea7\u522b\uff1a\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCargo\u6307\u793a\u5355\u72ec\u7f16\u8bd1\u548c\u4f18\u5316\u7f16\u8bd1\u5355\u5143\u3002LTO\u6307\u793a\u94fe\u63a5\u5668\u5728\u94fe\u63a5\u9636\u6bb5\u8fdb\u884c\u4f18\u5316\u3002\u4f8b\u5982\uff0c\u8fd9\u53ef\u4ee5\u5220\u9664\u6b7b\u4ee3\u7801\uff0c\u5e76\u4e14\u901a\u5e38\u4f1a\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\n\u4eceRust 1.32\u5f00\u59cb\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5220\u9664jemalloc\u3002\u5982\u679c\u4f7f\u7528Rust 1.32\u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5219\u4e0d\u9700\u8981\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u6765\u51cf\u5c0f\u4e0e\u6b64\u529f\u80fd\u76f8\u5173\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\n\u5728Rust 1.32\u4e4b\u524d\uff0c\u4e3a\u4e86\u63d0\u9ad8\u67d0\u4e9b\u5e73\u53f0\u4e0a\u7684\u6027\u80fd\uff0cRust\u6346\u7ed1\u4e86jemalloc\uff0c\u8fd9\u662f\u4e00\u4e2a\u6027\u80fd\u7ecf\u5e38\u4f18\u4e8e\u9ed8\u8ba4\u7cfb\u7edf\u5206\u914d\u5668\u7684\u5206\u914d\u5668\u3002\u4f46\u662f\uff0c\u6346\u7ed1jemalloc\u5728\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u589e\u52a0\u4e86\u5927\u7ea6200KB\u3002\n\u8981\u5220\u9664Rust 1.28-Rust 1.31\u4e0a\u7684jemalloc\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u4ee3\u7801\u6dfb\u52a0\u5230main.rs\u7684\u9876\u90e8\uff1a\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCargo\u4e3a\u53d1\u5e03\u7248\u672c\u6307\u5b9a\u4e8616\u4e2a\u5e76\u884c\u7f16\u89e3\u7801\u5668\u5355\u5143\uff0c\u8fd9\u7f29\u77ed\u4e86\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f46\u963b\u6b62\u4e86\u67d0\u4e9b\u4f18\u5316\u3002\n\u6ce8\u610f\uff1a\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u8ba8\u8bba\u7684\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u7684\u7279\u6027\u5bf9\u7a0b\u5e8f\u7684\u884c\u4e3a\u6ca1\u6709\u5f71\u54cd(\u53ea\u5f71\u54cd\u5b83\u7684\u6267\u884c\u901f\u5ea6)\u3002\u6b64\u529f\u80fd\u5bf9\u884c\u4e3a\u6ca1\u6709\u5f71\u54cd\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53Rust\u4ee3\u7801\u9047\u5230\u5fc5\u987b\u8c03\u7528Panic\uff01()\u7684\u60c5\u51b5\u65f6\uff0c\u5b83\u4f1a\u5c55\u5f00\u5806\u6808\u5e76\u751f\u6210\u6709\u7528\u7684\u56de\u6eaf\u3002\u7136\u800c\uff0c\u5c55\u5f00\u4ee3\u7801\u786e\u5b9e\u9700\u8981\u989d\u5916\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\u53ef\u4ee5\u6307\u793arustc\u7acb\u5373\u4e2d\u6b62\uff0c\u800c\u4e0d\u662f\u5c55\u5f00\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u989d\u5916\u7684\u5c55\u5f00\u4ee3\u7801\u4e86\u3002\n\u6ce8\u610f\uff1aXargo\u76ee\u524d\u5904\u4e8e\u7ef4\u62a4\u72b6\u6001\uff0c\u4f46\u6700\u7ec8\u4e0b\u9762\u4f7f\u7528\u7684\u529f\u80fd\u5e94\u8be5\u4f1a\u5e94\u7528\u5230\u8d27\u7269\u4e2d\u3002\nRust\u9644\u5e26\u4e86\u6807\u51c6\u5e93(Libstd)\u7684\u9884\u6784\u5efa\u526f\u672c\u53ca\u5176\u5de5\u5177\u94fe\u3002\u8fd9\u610f\u5473\u7740\u5f00\u53d1\u4eba\u5458\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u65f6\u90fd\u6784\u5efalibstd\u3002\u76f8\u53cd\uff0clibstd\u9759\u6001\u94fe\u63a5\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u867d\u7136\u8fd9\u975e\u5e38\u65b9\u4fbf\uff0c\u4f46\u5982\u679c\u5f00\u53d1\u4eba\u5458\u8bd5\u56fe\u79ef\u6781\u4f18\u5316\u5927\u5c0f\uff0c\u4e5f\u6709\u51e0\u4e2a\u7f3a\u70b9\u3002\n\u65e0\u6cd5\u5220\u9664\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u672a\u4f7f\u7528\u7684\u90e8\u5206libstd(\u4f8b\u5982LTO\u548c\u6b7b\u673a\u884c\u4e3a)\u3002\n\u8fd9\u5c31\u662f\u8428\u5c14\u6208\u7684\u7528\u6b66\u4e4b\u5730\u3002Xargo\u80fd\u591f\u4ece\u6e90\u4ee3\u7801\u7528\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7f16\u8bd1libstd\u3002\u5b83\u901a\u8fc7rustup\u65b9\u4fbf\u5730\u63d0\u4f9b\u7684ruust-src\u7ec4\u4ef6\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u5c06Xargo.toml\u6587\u4ef6\u6dfb\u52a0\u5230\u9879\u76ee\u7684\u6839\u76ee\u5f55(\u8fd9\u4e0d\u4f1a\u53d6\u4ee3Cargo.toml\uff0c\u53ea\u662f\u8865\u5145)\uff1a\n$rustup\u5de5\u5177\u94fe\u591c\u95f4\u5b89\u88c5$rustup\u8986\u76d6\u8bbe\u7f6e\u591c\u95f4$rustup\u7ec4\u4ef6\u6dfb\u52a0rust-src$Cargo\u5b89\u88c5xargo\u3002\n#\u67e5\u627e\u60a8\u7684\u4e3b\u673a\u7684\u76ee\u6807\u4e09\u91cd\u3002$rustc-vv.\u4e3b\u673a\uff1ax86_64-apple-darwin#\u4f7f\u7528Xargo\u6784\u5efa\u65f6\u4f7f\u7528\u76ee\u6807\u4e09\u5143\u7ec4\u3002$xargo build--target x86_64-apple-Darwin--release\u3002\n\u8bb0\u4f4f\u8981\u53bb\u6389\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5728MacOS\u4e0a\uff0c\u6700\u7ec8\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u51cf\u5c11\u523051KB\u3002\n\u5373\u4f7f\u5728Cargo.toml\u4e2d\u6307\u5b9a\u4e86Panic=ABORT\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0crustc\u4ecd\u7136\u4f1a\u5728\u6700\u7ec8\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5305\u542b\u6050\u614c\u5b57\u7b26\u4e32\u548c\u683c\u5f0f\u5316\u4ee3\u7801\u3002\u5df2\u5c06\u4e0d\u7a33\u5b9a\u7684PARGIC_IMMEDIATE_ABORT\u529f\u80fd\u5408\u5e76\u5230\u591c\u95f4rustc\u7f16\u8bd1\u5668\u4e2d\u4ee5\u89e3\u51b3\u6b64\u95ee\u9898\u3002\n\u8981\u4f7f\u7528\u6b64\u547d\u4ee4\uff0c\u8bf7\u91cd\u590d\u4e0a\u8ff0\u8bf4\u660e\u4ee5\u4f7f\u7528Xargo\uff0c\u4f46\u8bf7\u6539\u7528\u4ee5\u4e0bXargo.toml\uff1a\n\u8bb0\u4f4f\u8981\u53bb\u6389\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5728MacOS\u4e0a\uff0c\u6700\u7ec8\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u51cf\u5c11\u523030KB\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u9650\u5236\u4ecelibstd\u4f7f\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u9650\u5236libstd\u7684\u4f7f\u7528\uff0c\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u5c0f\u4e8e20KB\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5219\u5fc5\u987b\u5220\u9664Rust\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u4ee3\u7801CORE\uff1a\uff1aFMT\u3002PARGIC_IMMEDIATE_ABORT\u4ec5\u5220\u9664\u6b64\u4ee3\u7801\u7684\u67d0\u4e9b\u7528\u6cd5\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u4ee3\u7801\u4f7f\u7528\u683c\u5f0f\u5316\u3002\u8fd9\u5305\u62eclibstd\u4e2d\u7684Rust&#39\uff1bs&34\uff1bPre-Main\u4ee3\u7801\u3002\n\u901a\u8fc7\u4f7f\u7528C\u5165\u53e3\u70b9(\u901a\u8fc7\u6dfb\u52a0#\uff01[NO_MAIN]\u5c5e\u6027)\uff0c\u624b\u52a8\u7ba1\u7406stdio\uff0c\u5e76\u4ed4\u7ec6\u5206\u6790\u60a8\u6216\u60a8\u7684\u4f9d\u8d56\u9879\u5305\u62ec\u54ea\u4e9b\u4ee3\u7801\u5757\uff0c\u60a8\u6709\u65f6\u53ef\u4ee5\u5229\u7528libstd\uff0c\u540c\u65f6\u907f\u514d\u81c3\u80bf\u7684core\uff1a\uff1afmt\u3002\n\u9884\u8ba1\u4ee3\u7801\u5c06\u662f\u7c97\u5236\u6ee5\u9020\u548c\u4e0d\u53ef\u79fb\u690d\u7684\uff0c\u5177\u6709\u6bd4\u5e73\u5e38\u66f4\u591a\u7684\u4e0d\u5b89\u5168{}\u3002\u611f\u89c9\u50cf\u662fno_std\uff0c\u4f46\u662f\u6709libstd\u3002\n\u4ece\u4e00\u4e2a\u7a7a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5f00\u59cb\uff0c\u786e\u4fddxargo\u81a8\u80c0--\u53d1\u5e03--\u76ee\u6807=.\u3002\u4e0d\u5305\u542bcore\uff1a\uff1afmt\u6216\u6709\u5173\u586b\u5145\u7684\u5185\u5bb9\u3002\u6dfb\u52a0(\u53d6\u6d88\u6ce8\u91ca)\u4e00\u70b9\u3002\u770b\u5230\u90a3\u4e2a\u6c99\u6208\u80bf\u80c0\u73b0\u5728\u62a5\u9053\u7684\u66f4\u591a\u4e86\u3002\u67e5\u770b\u60a8\u521a\u521a\u6dfb\u52a0\u7684\u6e90\u4ee3\u7801\u3002\u53ef\u80fd\u4f7f\u7528\u4e86\u4e00\u4e9b\u5916\u90e8\u673a\u7bb1\u6216\u65b0\u7684libstd\u51fd\u6570\u3002\u5728\u60a8\u7684\u5ba1\u67e5\u8fc7\u7a0b\u4e2d\u9012\u5f52\u5230\u8fd9\u4e00\u70b9(\u5b83\u9700\u8981[\u66ff\u6362]\u8d27\u7269\u4f9d\u8d56\u9879\uff0c\u53ef\u80fd\u8fd8\u9700\u8981\u6316\u6398libstd)\uff0c\u627e\u51fa\u4e3a\u4ec0\u4e48\u5b83\u6bd4\u5e94\u6709\u7684\u91cd\u91cf\u66f4\u91cd\u3002\u9009\u62e9\u66ff\u4ee3\u65b9\u5f0f\u6216\u8865\u4e01\u4f9d\u8d56\uff0c\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u529f\u80fd\u3002\u53d6\u6d88\u6ce8\u91ca\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u8c03\u8bd5\u7206\u70b8\u5927\u5c0f\u7684xargo\u81a8\u80c0\uff0c\u7b49\u7b49\u3002\n\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662fRust\u6807\u51c6\u5e93libstd\u3002libstd\u63d0\u4f9b\u4e86\u8bb8\u591a\u65b9\u4fbf\u7684\u3001\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u7684\u8de8\u5e73\u53f0API\u548c\u6570\u636e\u7c7b\u578b\u3002\u4f46\u662f\uff0c\u5982\u679c\u7528\u6237\u60f3\u8981\u5c06\u4e8c\u8fdb\u5236\u5927\u5c0f\u51cf\u5c11\u5230\u7b49\u6548\u7684C\u7a0b\u5e8f\u5927\u5c0f\uff0c\u5219\u53ef\u4ee5\u53ea\u4f9d\u8d56libc\u3002\n\u4e86\u89e3\u8fd9\u79cd\u65b9\u6cd5\u6709\u5f88\u591a\u7f3a\u70b9\u662f\u5f88\u91cd\u8981\u7684\u3002\u9996\u5148\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7f16\u5199\u5f88\u591a\u4e0d\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u65e0\u6cd5\u8bbf\u95ee\u5927\u591a\u6570\u4f9d\u8d56libstd\u7684\u94c1\u9508\u788e\u5c51\u3002\u4e0d\u8fc7\uff0c\u8fd9\u662f\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u7684\u4e00\u79cd(\u5c3d\u7ba1\u6781\u7aef)\u9009\u62e9\u3002\n#\uff01[no_std]#\uff01[no_main]extern crate libc\uff1b#[no_manger]pub extern&#34\uff1bC&#34\uff1bfn main(_argc\uff1aisize\uff0c_argv\uff1a*const*const U8)-&gt\uff1bisize{//\u56e0\u4e3a\u6211\u4eec\u4f20\u9012\u7684\u662fC\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u7a7a\u5b57\u7b26\u662f\u5fc5\u9700\u7684\u3002const Hello\uff1a&amp\uff1b&39\uff1bstatic str=&#34\uff1bHello\uff0cworld\uff01\\n\\0&#34\uff1b\uff1bunsafe{libc\uff1a\uff1aprintf(Hello\u3002as_ptr()as*const_)\uff1b}0}#[PARGIC_HANDLER]FN MY_PARGIC(_INFO\uff1a&AMP\uff1bCORE\uff1a\uff1aPARGIC\uff1a\uff1aPanicInfo)-&gt\uff1b\uff01{loop{}}", "note_en": "By default, Rust optimizes for execution speed rather than binary size, since for the vastmajority of applications this is ideal. But for situations where a developer wants to optimizefor binary size instead, Rust provides mechanisms to accomplish this.\n   By default,  cargo build builds the Rust binary in debug mode. Debug mode disables manyoptimizations, which helps debuggers (and IDEs that run them) provide a better debuggingexperience. Debug binaries can be 30% or more larger than release binaries.\n      By default on Linux and macOS, symbol information is included in the compiled  .elf file. Thisinformation is not needed to properly execute the binary.To remove this, run   strip on the  .elf file:\n    Cargo defaults its optimization level to  3 for release builds,which optimizes the binary for speed. To instruct Cargo to optimize for minimal binarysize, use the  z optimization level in  Cargo.toml:\n    By default, Cargo instructs compilation units to be compiled and optimized in isolation. LTO instructs the linker to optimize at thelink stage. This can, for example, remove dead code and often times reduces binary size.\n     As of Rust 1.32,  jemalloc is removed by default. Ifusing Rust 1.32 or newer, no action is needed to reduce binary size regarding this feature.\n Prior to Rust 1.32, to improve performance on some platforms Rust bundled jemalloc, an allocator that oftenoutperforms the default system allocator. Bundling jemalloc added around 200KBto the resulting binary, however.\n To remove  jemalloc on Rust 1.28 - Rust 1.31, add this code to the top of  main.rs:\n   By default, Cargo specifies 16 parallel codegen units for release builds.This improves compile times, but prevents some optimizations.\n     Note: Up to this point, the features discussed to reduce binary size did not have animpact on the behaviour of the program (only its execution speed). This feature doeshave an impact on behavior.\n By default, when Rust code encounters a situation when it must call  panic!(),it unwinds the stack and produces a helpful backtrace. The unwinding code, however, does requireextra binary size.  rustc can be instructed to abort immediately rather than unwind, whichremoves the need for this extra unwinding code.\n     Note:  Xargo is currently in maintenance status,but eventually the features used below should make their way into Cargo.\n  Rust ships pre-built copies of the standard library ( libstd) with its toolchains. This meansthat developers don&#39;t need to build  libstd every time they build their applications.  libstdis statically linked into the binary instead.\n While this is very convenient there are several drawbacks if a developer is trying toaggressively optimize for size.\n It&#39;s not possible to remove portions of  libstd that are not used in a particular application(e.g. LTO and panic behaviour).\n This is where  Xargo comes in. Xargo is able to compile libstd with your application from the source. It does this with the  rust-src component that rustup conveniently provides.\n Add a  Xargo.toml file to the root of your project(this doesn&#39;t replace  Cargo.toml, just is in addition):\n   $ rustup toolchain install nightly$ rustup override  set nightly$ rustup component add rust-src$ cargo install xargo\n  # Find your host&#39;s target triple. $ rustc -vV...host: x86_64-apple-darwin  # Use that target triple when building with Xargo.$ xargo build --target x86_64-apple-darwin --release\n Remember to  strip the resulting executable. On macOS, the final binary size is reduced to 51KB.\n    Even if  panic = abort is specified in  Cargo.toml,  rustc will still include panic stringsand formatting code in final binary by default. An unstable  panic_immediate_abort featurehas been merged into the  nightly  rustc compiler to address this.\n To use this, repeat the instructions above to use Xargo, but instead use the following Xargo.toml:\n  Remember to  strip the resulting executable. On macOS, the final binary size is reduced to 30KB.\n     Up until this point, we haven&#39;t restricted what utilities we used from  libstd. In this sectionwe will restrict our usage of  libstd in order to reduce binary size further.\n If you want an executable smaller than 20 kilobytes, Rust&#39;s string formatting code,  core::fmt mustbe removed.  panic_immediate_abort only removes some usages of this code. There is a lot of othercode that uses formatting in some of cases. That includes Rust&#39;s &#34;pre-main&#34; code in  libstd.\n By using a C entry point (by added the  #![no_main] attribute) , managing stdio manually, andcarefully analyzing which chunks of code you or your dependencies include, you can sometimesmake use of  libstd  while avoiding bloated  core::fmt.\n Expect the code to be hacky and unportable, with more  unsafe{}s than usual. It feels like no_std, but with  libstd.\n Start with an empty executable, ensure  xargo bloat --release --target=... contains no core::fmt or something about padding. Add (uncomment) a little bit. See that  xargo bloat nowreports drastically more. Review source code that you&#39;ve just added. Probably some external crate ora new  libstd function is used. Recurse into that with your review process(it requires  [replace] Cargo dependencies and maybe digging in  libstd), find out why itweighs more than it should. Choose alternative way or patch dependencies to avoid unnecessaryfeatures. Uncomment a bit more of your code, debug exploded size with  xargo bloat and so on.\n     Up until this point, our application was using the Rust standard library,  libstd.  libstdprovides many convenient, well tested cross platform APIs and data types. But if a user wantsto reduce binary size to an equivalent C program size, it is possible to depend only on  libc.\n It&#39;s important to understand that there are many drawbacks to this approach. For one, you&#39;lllikely need to write a lot of  unsafe code and lose access to a majority of Rust cratesthat depend on  libstd. Nevertheless, it is one (albeit extreme) option to reducing binary size.\n  #![no_std]#![no_main] extern  crate libc;#[no_mangle] pub  extern  &#34;C&#34;  fn  main(_argc:  isize, _argv:  * const  * const  u8) -&gt;  isize {  // Since we are passing a C string the final null character is mandatory.  const HELLO: &amp; &#39; static  str  =  &#34;Hello, world! \\n\\0&#34;;  unsafe { libc :: printf(HELLO. as_ptr()  as  * const _); }  0}#[panic_handler] fn  my_panic(_info:  &amp;core::panic::PanicInfo) -&gt; ! {  loop {}}", "posttime": "2020-06-12 15:40:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u51cf\u5c0f,libstd", "title": "\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u9508\u8680\u4e8c\u8fdb\u5236\u5927\u5c0f", "title_en": "Minimizing Rust Binary Size", "transed": 1, "url": "https://github.com/johnthagen/min-sized-rust", "via": "", "real_tags": ["rust", "\u51cf\u5c0f", "libstd"]}]