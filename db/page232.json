[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1003558, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u6d41\u6c13\u57fa\u7ad9\u662f\u4e00\u79cd\u6709\u6548\u7684\u653b\u51fb\u8f7d\u4f53\u3002\u8702\u7a9d\u57fa\u5e26\u662f\u667a\u80fd\u624b\u673a\u5b89\u5168\u6027\u7684\u5173\u952e\u90e8\u5206\uff1a\u5b83\u4eec\u751a\u81f3\u5728\u8ba4\u8bc1\u4e4b\u524d\u5c31\u4f1a\u89e3\u6790\u5927\u91cf\u6570\u636e\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u53ef\u4ee5\u4e3a\u653b\u51fb\u8005\u63d0\u4f9b\u4e00\u79cd\u975e\u5e38\u9690\u853d\u7684\u65b9\u5f0f\u6765\u6536\u96c6\u6709\u5173\u53d1\u51fa\u7684\u547c\u53eb\u7684\u4fe1\u606f\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u65e0\u7ebf\u65b9\u5f0f\u5347\u7ea7\u5230\u4e3b\u64cd\u4f5c\u7cfb\u7edf\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u4e00\u79cd\u65b0\u7684\u8702\u7a9d\u6a21\u7cca\u6846\u67b6\uff0c\u65e8\u5728\u5e2e\u52a9\u5b89\u5168\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u8702\u7a9d\u57fa\u5e26\u548c\u7c7b\u4f3c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u7684\u5173\u952e\u7f3a\u9677\u3002BaseSAFE\u5141\u8bb8\u90e8\u5206\u91cd\u65b0\u6258\u7ba1\u8702\u7a9d\u57fa\u5e26\uff0c\u7528\u4e8e\u5feb\u901f\u68c0\u6d4b\u8bbe\u5907\u5916\u7684\u6bdb\u53d1\uff0c\u5373\u4f7f\u662f\u95ed\u6e90\u56fa\u4ef6BLOB\u3002BaseSAFE\u7684\u6e05\u7406\u63d2\u4ef6\u5206\u914d\u5668\u53ef\u4ee5\u5feb\u901f\u53d1\u73b0\u57fa\u4e8e\u5806\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\u4f7f\u7528\u6211\u4eec\u7684\u6982\u5ff5\u9a8c\u8bc1\u5de5\u5177\uff0c\u6211\u4eec\u6a21\u7cca\u4e86\u57fa\u4e8eNucleus RTOS\u7684\u8054\u53d1\u79d1\u8702\u7a9d\u57fa\u5e26\u7684\u5404\u79cd\u89e3\u6790\u5668\uff0c\u8fd9\u4e9b\u89e3\u6790\u5668\u53ef\u4ee5\u4ece\u6d41\u6c13\u57fa\u7ad9\u8bbf\u95ee\u3002\u4eff\u771f\u5668\u63d2\u88c5\u662f\u9ad8\u5ea6\u4f18\u5316\u7684\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u590d\u6742\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bcf\u4e2a\u5185\u6838\u6bcf\u79d2\u7684\u6267\u884c\u6b21\u6570\u8fbe\u5230\u6570\u767e\u6b21\uff0c\u603b\u5171\u7ea6\u4e3a\u6bcf\u79d215k\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u57fa\u5e26\u8c03\u5236\u89e3\u8c03\u5668\u7684\u653b\u51fb\u77e2\u91cf\u3002\u636e\u6211\u4eec\u6240\u77e5\uff0c\u8fd9\u662f\u57fa\u4e8e\u4eff\u771f\u7684\u6a21\u7cca\u6280\u672f\u9996\u6b21\u7528\u4e8e\u5546\u4e1a\u8702\u7a9d\u57fa\u5e26\u7684\u5b89\u5168\u6d4b\u8bd5\u3002BaseSAFE\u7684\u5927\u90e8\u5206\u5de5\u5177\u548c\u65b9\u6cd5\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u4f4e\u7ea7\u5185\u6838\u548c\u56fa\u4ef6\u3002\u901a\u8fc7\u4f7f\u7528BaseSAFE\uff0c\u6211\u4eec\u80fd\u591f\u5728\u8054\u53d1\u79d1\u8702\u7a9d\u57fa\u5e26\u4e2d\u4f7f\u7528\u6211\u4eec\u7684\u6982\u5ff5\u9a8c\u8bc1\u6a21\u7cca\u7ebf\u675f\u53d1\u73b0\u5185\u5b58\u635f\u574f\uff0c\u5305\u62ec\u5806\u8d8a\u754c\u5199\u5165\u3002BaseSAFE\u3001Harness\u548c\u5927\u91cfLTE\u4fe1\u4ee4\u6d88\u606f\u6d4b\u8bd5\u7528\u4f8b\u5c06\u5728\u672c\u6587\u53d1\u8868\u540e\u5f00\u653e\u6e90\u7801\u3002", "note_en": "Download PDF  Abstract: Rogue base stations are an effective attack vector. Cellular basebandsrepresent a critical part of the smartphone&#39;s security: they parse largeamounts of data even before authentication. They can, therefore, grant anattacker a very stealthy way to gather information about calls placed and evento escalate to the main operating system, over-the-air. In this paper, wediscuss a novel cellular fuzzing framework that aims to help securityresearchers find critical bugs in cellular basebands and similar embeddedsystems. BaseSAFE allows partial rehosting of cellular basebands for fastinstrumented fuzzing off-device, even for closed-source firmware blobs.BaseSAFE&#39;s sanitizing drop-in allocator, enables spotting heap-basedbuffer-overflows quickly. Using our proof-of-concept harness, we fuzzed variousparsers of the Nucleus RTOS-based MediaTek cellular baseband that areaccessible from rogue base stations. The emulator instrumentation is highlyoptimized, reaching hundreds of executions per second on each core for ourcomplex test case, around 15k test-cases per second in total. Furthermore, wediscuss attack vectors for baseband modems. To the best of our knowledge, thisis the first use of emulation-based fuzzing for security testing of commercialcellular basebands. Most of the tooling and approaches of BaseSAFE are alsoapplicable for other low-level kernels and firmware. Using BaseSAFE, we wereable to find memory corruptions including heap out-of-bounds writes using ourproof-of-concept fuzzing harness in the MediaTek cellular baseband. BaseSAFE,the harness, and a large collection of LTE signaling message test cases will bereleased open-source upon publication of this paper.", "posttime": "2020-05-25 03:21:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u5e26,baseband", "title": "BaseSAFE\uff1a\u901a\u8fc7\u4eff\u771f\u5b9e\u73b0\u57fa\u5e26\u51c0\u5316\u6a21\u7cca", "title_en": "BaseSAFE: Baseband SAnitized Fuzzing Through Emulation", "transed": 1, "url": "https://arxiv.org/abs/2005.07797", "via": "", "real_tags": ["\u57fa\u5e26", "baseband"]}, {"category": "", "categoryclass": "", "imagename": "4d16095418a953c639be9666b70f5aac.jpg", "infoid": 1003557, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65af\u8482\u82ac\u00b7\u5e03\u4f26\u5357\u00b72020\u5e745\u670824\u65e5\uff0c\u5c31\u50cf\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8bb8\u591a\u670d\u52a1\u4e00\u6837\uff0c\u591a\u4efb\u52a1\u5904\u7406\u662f\u4e00\u4ef6\u7406\u6240\u5f53\u7136\u7684\u4e8b\u60c5\uff0c\u4ee5\u81f3\u4e8e\u611f\u89c9\u5f88\u5e73\u51e1\u3002\u6709\u4e86\u6211\u4eec\u529f\u80fd\u5f3a\u5927\u7684\u667a\u80fd\u624b\u673a\u548c\u8ba1\u7b97\u673a\uff0c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0d\u80fd\u540c\u65f6\u5904\u7406\u6570\u767e\u4e2a\u8fdb\u7a0b\u7684\u60f3\u6cd5\u8ba9\u4eba\u611f\u89c9\u5f88\u964c\u751f\u3002\u6211\u8ba4\u4e3a\u6b63\u662f\u8fd9\u6837\u7684\u529f\u80fd\u8ba9\u8ba1\u7b97\u673a\u53d8\u5f97\u975e\u5e38\u6709\u7528\uff0c\u4f46\u4e5f\u8ba9\u5b83\u4eec\u611f\u89c9\u5982\u6b64\u590d\u6742\u548c\u795e\u5947\u3002\n\u5f88\u96be\u73a9\u5f04\u5b9e\u73b0\u591a\u4efb\u52a1\u7684\u4ee3\u7801\uff0c\u5982\u679c\u4e0d\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5982\u4f55\u81ea\u5df1\u5b9e\u73b0\u4e5f\u4e0d\u662f\u5f88\u660e\u663e\u3002\u6211\u575a\u4fe1\uff0c\u53ea\u6709\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e9b\u4e1c\u897f\uff0c\u624d\u80fd\u771f\u6b63\u7406\u89e3\u5b83\uff0c\u6240\u4ee5\u6211\u60f3\u5199\u4e00\u7bc7\u6587\u7ae0\uff0c\u8ba9\u4eba\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7b80\u5355\u7684\u7ebf\u7a0b\u5b9e\u73b0\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7528\u666e\u901a\u7684C\u7a0b\u5e8f(\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf)\u5b9e\u73b0\u7b80\u5355\u7684\u7ebf\u7a0b\u3002\n\u6b64\u8c03\u5ea6\u7a0b\u5e8f\u5c06\u4e25\u91cd\u4f9d\u8d56\u51fd\u6570setjmp()\u548clong jmp()\u3002\u4ed6\u4eec\u611f\u89c9\u6709\u70b9\u795e\u5947\uff0c\u6240\u4ee5\u6211\u60f3\u5148\u63cf\u8ff0\u4e00\u4e0b\u4ed6\u4eec\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u7136\u540e\u82b1\u4e00\u70b9\u65f6\u95f4\u6765\u63ed\u5f00\u4ed6\u4eec\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\n\u51fd\u6570setjmp()\u662f\u4e00\u79cd\u8bb0\u5f55\u6709\u5173\u7a0b\u5e8f\u6267\u884c\u4f4d\u7f6e\u7684\u4fe1\u606f\u7684\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u60a8\u7a0d\u540e\u53ef\u4ee5\u8df3\u56de\u8be5\u70b9\u3002\u60a8\u4e3aIta\u63d0\u4f9b\u4e86JMP_buf\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5b83\u5c06\u5728\u5176\u4e2d\u5b58\u50a8\u8be5\u4fe1\u606f\u3002setjmp()\u7b2c\u4e00\u6b21\u8fd4\u56de\u65f6\u8fd4\u56de0\u3002\n\u7a0d\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570long jmp(jmp_buf\uff0cvalue)\u4ece\u60a8\u8c03\u7528setjmp()\u7684\u4f4d\u7f6e\u7acb\u5373\u5f00\u59cb\u6267\u884c\u3002\u5bf9\u4e8e\u60a8\u7684\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u662f\u7b2c\u4e8c\u6b21\u8fd4\u56desetjmp()\u3002\u8fd9\u6b21\u5c06\u8fd4\u56de\u60a8\u4f20\u9012\u7ed9long jmp()\u7684\u503c\u53c2\u6570\uff0c\u4ee5\u5e2e\u52a9\u533a\u5206\u7b2c\u4e8c\u8f6e\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u793a\u4f8b\u6765\u5e2e\u52a9\u8bf4\u660e\uff1a\n#include&lt\uff1bstdio.h&gt\uff1b#include&lt\uff1bsetjmp.h&gt\uff1bjmp_buf saved_location\uff1bint main(int argc\uff0cchar**argv){if(setjmp(Save_Location)==0){printf(&#34\uff1b\u6211\u4eec\u5df2\u6210\u529f\u8bbe\u7f6e\u8df3\u8f6c\u7f13\u51b2\u533a\uff01\\n&#34\uff1b)\uff1b}\u5426\u5219{printf(&#34\uff1b\u6211\u4eec\u8df3\u8fc7\uff01\\n&#34\uff1b)\uff1b\u8fd4\u56de0\uff1b\u6b63\u5728\u51c6\u5907\u8df3\u8f6c\uff01\\n&#34\uff1b)\uff1blong jmp(save_location\uff0c1)\uff1bprintf(&#34\uff1b\u8fd9\u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c.\u3002\\n&#34\uff1b)\uff1b\u8fd4\u56de0\uff1b}\u3002\n\u72c2\u91ce\uff01\u5b83\u7c7b\u4f3c\u4e8eGOTO\u8bed\u53e5\uff0c\u4f46\u5b83\u751a\u81f3\u53ef\u4ee5\u7528\u6765\u8df3\u51fa\u51fd\u6570\u3002\u5b83\u4e5f\u6bd4goto\u66f4\u96be\u8bfb\uff0c\u56e0\u4e3a\u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5e38\u89c4\u7684\u51fd\u6570\u8c03\u7528\u3002\u5982\u679c\u60a8\u7684\u4ee3\u7801\u968f\u610f\u4f7f\u7528setjmp()\u548clong jmp()\uff0c\u90a3\u4e48\u4efb\u4f55\u4eba(\u5305\u62ec\u60a8\u81ea\u5df1)\u9605\u8bfb\u8d77\u6765\u90fd\u4f1a\u975e\u5e38\u56f0\u60d1\u3002\n\u4e0egoto\u4e00\u6837\uff0c\u5e38\u89c1\u7684\u5efa\u8bae\u662f\u907f\u514dsetjmp()\u548clong jmp()\uff0c\u4f46\u662f\uff0c\u5c31\u50cfgoto\u4e00\u6837\uff0c\u6709\u65f6\u5355\u72ec\u4f7f\u7528\u5e76\u4ee5\u4e00\u81f4\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u4e5f\u5f88\u6709\u7528\u3002\u8c03\u5ea6\u5668\u9700\u8981\u80fd\u591f\u5207\u6362\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u8d1f\u8d23\u4efb\u5730\u4f7f\u7528\u8fd9\u4e9b\u529f\u80fd\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u5c06\u5bf9API\u9690\u85cf\u8fd9\u4e9b\u51fd\u6570\u7684\u4f7f\u7528\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u8c03\u5ea6\u5668\u7684\u7528\u6237\u5c31\u4e0d\u5fc5\u5904\u7406\u8fd9\u79cd\u590d\u6742\u6027\u3002\n\u7136\u800c\uff0csetjmp()\u548clong jmp()\u51fd\u6570\u5e76\u4e0d\u662f\u4e3a\u652f\u6301\u4efb\u4f55\u7c7b\u578b\u7684\u8df3\u8f6c\u800c\u8bbe\u8ba1\u7684\u3002\u5b83\u4eec\u662f\u4e3a\u4e00\u79cd\u975e\u5e38\u7279\u6b8a\u7684\u7528\u4f8b\u800c\u8bbe\u8ba1\u7684\u3002\u5047\u8bbe\u60a8\u6b63\u5728\u505a\u4e00\u4e9b\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u521b\u5efa\u4e00\u4e2aHttpRequest\u3002\u8fd9\u5c06\u6d89\u53ca\u4e00\u7ec4\u590d\u6742\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5982\u679c\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8c03\u7528\u5931\u8d25\uff0c\u60a8\u5c06\u9700\u8981\u4ece\u6bcf\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u7684\u9519\u8bef\u4ee3\u7801\u3002\u8fd9\u5c06\u5bfc\u81f4\u5728\u60a8\u8c03\u7528\u51fd\u6570\u7684\u4efb\u4f55\u5730\u65b9(\u53ef\u80fd\u6570\u5341\u6b21)\u90fd\u4f1a\u51fa\u73b0\u5982\u4e0b\u4ee3\u7801\uff1a\nsetjmp()\u548clong jmp()\u7684\u601d\u60f3\u662f\uff0c\u60a8\u53ef\u4ee5\u5728\u5f00\u59cb\u4e00\u4e9b\u590d\u6742\u7684\u64cd\u4f5c\u4e4b\u524d\u4f7f\u7528setjmp()\u6765\u4fdd\u5b58\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u9519\u8bef\u5904\u7406\u96c6\u4e2d\u5230\u4e00\u4e2a\u4f4d\u7f6e\uff1a\nint rv\uff1bjmp_buf buf\uff1bif((rv=setjmp(Buf))\uff01=0){/*\u5728\u6b64\u5904\u7406\u9519\u8bef*/return\uff1b}do_Complex_task(buf\uff0cargs.)\uff1b\n\u5982\u679cdo_Complex_task()\u4e2d\u6d89\u53ca\u7684\u4efb\u4f55\u51fd\u6570\u5931\u8d25\uff0c\u5b83\u53ea\u4f1a\u662flong jmp(buf\uff0cerror_code)\u3002\u8fd9\u610f\u5473\u7740do_Complex_task()\u4e2d\u7684\u6bcf\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u5047\u5b9a\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u90fd\u662f\u6210\u529f\u7684\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u53bb\u6389\u9519\u8bef\u5904\u7406\u4ee3\u7801\u3002(\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u51e0\u4e4e\u4ece\u6765\u6ca1\u6709\u505a\u8fc7\uff0c\u4f46\u90a3\u662f\u4e00\u7bc7\u5355\u72ec\u7684\u535a\u5ba2\u6587\u7ae0\u3002)\u3002\n\u8fd9\u91cc\u7684\u91cd\u8981\u601d\u60f3\u662f\uff0clong jmp()\u53ea\u5141\u8bb8\u60a8\u8df3\u51fa\u6df1\u5ea6\u5d4c\u5957\u51fd\u6570\u3002\u60a8\u4e0d\u80fd\u8df3\u56de\u4ee5\u524d\u8df3\u51fa\u7684\u6df1\u5ea6\u5d4c\u5957\u51fd\u6570\u3002\u4e0b\u9762\u662f\u8df3\u51fa\u51fd\u6570\u65f6\u5806\u6808\u7684\u56fe\u793a\u3002\u661f\u53f7(*)\u6807\u8bb0setjmp()\u5b58\u50a8\u7684\u5806\u6808\u6307\u9488\u3002\nlong_mp\u524d\u6808|long jmp\u540e\u6808|+-+-stack()(*)|Main()\u589e\u957f|do_http_request()|down|send_a_Header()|Write_Bytes()|v|Write()-\u5931\u8d25\uff01\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u53ea\u5728\u5806\u6808\u4e2d\u5411\u4e0a\u79fb\u52a8\uff0c\u56e0\u6b64\u6ca1\u6709\u6570\u636e\u635f\u574f\u7684\u98ce\u9669\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u60f3\u8c61\u4e00\u4e0b\u5982\u679c\u60a8\u60f3\u8981\u5728\u4efb\u52a1\u4e4b\u95f4\u8df3\u8f6c\u3002\u5982\u679c\u60a8\u8c03\u7528setjmp()\u7136\u540e\u8fd4\u56de\uff0c\u6267\u884c\u4e00\u4e9b\u5176\u4ed6\u64cd\u4f5c\uff0c\u7136\u540e\u5c1d\u8bd5\u6062\u590d\u4e4b\u524d\u6240\u505a\u7684\u64cd\u4f5c\uff0c\u60a8\u5c06\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\n|setjmp()\u5904\u5806\u6808|\u7a0d\u540e\u5806\u6808|long jmp()\u540e\u5806\u6808|+-stack()|Main()|Main()\u589e\u957f|do_task_one()|do_task_Two()|do_stack_Two()\u5411\u4e0b|subtask()\u3002|subtask()|subtask()||foo()|\uff1f\uff1fV|bar()(*)|(*)|\uff1f(*)\nsetjmp()\u4fdd\u5b58\u7684\u5806\u6808\u6307\u9488\u5c06\u6307\u5411\u4e0d\u518d\u5b58\u5728\u7684\u5806\u6808\u5e27\uff0c\u5e76\u4e14\u53ef\u80fd\u5df2\u5728\u67d0\u4e2a\u70b9\u88ab\u5176\u4ed6\u6570\u636e\u8986\u76d6\u3002\u5f53\u60a8\u5c1d\u8bd5\u5c06long jmp()\u8fd4\u56de\u5230\u5df2\u7ecf\u8fd4\u56de\u7684\u51fd\u6570\u65f6\uff0c\u60a8\u5c06\u5f00\u59cb\u4f53\u9a8c\u5230\u4e00\u4e9b\u975e\u5e38\u5947\u602a\u7684\u884c\u4e3a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u60a8\u7684\u7a0b\u5e8f\u5d29\u6e83\u3002\n\u8fd9\u4e2a\u6545\u4e8b\u7684\u5bd3\u610f\u662f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u4f7f\u7528setjmp()\u548clong jmp()\u5728\u8fd9\u6837\u7684\u590d\u6742\u4efb\u52a1\u4e4b\u95f4\u8df3\u8f6c\uff0c\u60a8\u9700\u8981\u786e\u4fdd\u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u5355\u72ec\u5806\u6808\u3002\u8fd9\u5b8c\u5168\u6d88\u9664\u4e86\u95ee\u9898\uff0c\u56e0\u4e3a\u5f53long jmp()\u91cd\u7f6e\u5806\u6808\u6307\u9488\u65f6\uff0c\u5b83\u5c06\u4e3a\u60a8\u4ea4\u6362\u5806\u6808\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d1\u751f\u5806\u6808\u8986\u76d6\u3002\n\u8fd9\u6709\u70b9\u8d39\u65f6\u8d39\u529b\uff0c\u4f46\u662f\u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5b9e\u73b0\u7528\u6237\u7a7a\u95f4\u7ebf\u7a0b\u3002\u5f00\u59cb\u65f6\uff0c\u6211\u53d1\u73b0\u8bbe\u8ba1\u7528\u4e8e\u521d\u59cb\u5316\u3001\u521b\u5efa\u548c\u8fd0\u884c\u7ebf\u7a0b\u7684API\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u63d0\u524d\u505a\u8fd9\u4ef6\u4e8b\u771f\u7684\u6709\u52a9\u4e8e\u7406\u89e3\u6211\u4eec\u6b63\u5728\u52aa\u529b\u6784\u5efa\u7684\u662f\u4ec0\u4e48\uff01\n\u8fd9\u4e9b\u51fd\u6570\u5c06\u7528\u4e8e\u521d\u59cb\u5316\u8c03\u5ea6\u5668\u3001\u6dfb\u52a0\u4efb\u52a1\uff0c\u7136\u540e\u6700\u7ec8\u5f00\u59cb\u5728\u8c03\u5ea6\u5668\u4e2d\u8fd0\u884c\u4efb\u52a1\u3002\u4e00\u65e6\u6211\u4eec\u542f\u52a8Scheduler_Run()\uff0c\u5b83\u5c06\u4e00\u76f4\u8fd0\u884c\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002\u5bf9\u4e8e\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5b83\u4eec\u5c06\u6709\u4ee5\u4e0b\u63a5\u53e3\uff1a\n\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c06\u9000\u51fa\u4efb\u52a1\u3002\u4efb\u52a1\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56deFROMITS\u51fd\u6570\u9000\u51fa\uff0c\u6240\u4ee5\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u3002\u7b2c\u4e8c\u4e2a\u51fd\u6570\u662f\u6211\u4eec\u7684\u7ebf\u7a0b\u5c06\u5982\u4f55\u544a\u8bc9\u8c03\u5ea6\u5668\u8ba9\u53e6\u4e00\u4e2a\u4efb\u52a1\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u3002\u5f53\u4efb\u52a1\u8c03\u7528Scheduler_RELINISH()\u65f6\uff0c\u5f53\u5176\u4ed6\u4efb\u52a1\u8fd0\u884c\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u6700\u7ec8\u51fd\u6570\u4f1a\u8fd4\u56de\uff0c\u4efb\u52a1\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u3002\n\u4e3a\u4e86\u7ed9\u51faAPI\u7684\u5177\u4f53\u793a\u4f8b\uff0c\u4e0b\u9762\u662f\u6b64API\u7684\u5047\u8bbe\u7528\u6cd5\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u8c03\u5ea6\u5668\uff1a\n#include&lt\uff1bstdlib.h&gt\uff1b#include&lt\uff1bstdio.h&gt\uff1b#include&#34\uff1bScheduler.h&#34\uff1bstruct tester_args{char*name\uff1bint iters\uff1b}\uff1bvoid tester(void*arg){int i\uff1bstruct tester_args*ta=(struct tester_args*)arg\uff1bfor(i=0\uff1bi&lt\uff1bta-&gt\uff1biters\uff1b\u4efb\u52a1%s\uff1a%d\\n&#34\uff1b\uff0cta-&&gt;\uff1bname\uff0ci)\uff1bScheduler_relquiish()\uff1b}free(Ta)\uff1b}void create_test_task(char*name\uff0cint iters){struct tester_args*ta=malloc(sizeof(*ta))\uff1bta-&gt\uff1bname=name\uff1bta-&gt\uff1biters=iters\uff1bScheduler_create_task(tester\uff0cta)\uff1b}int main(int argc\uff0cchar**argv){Scheduler_init()\uff1bcreate_test_task(&#34\uff1bfirst&#34\uff1b\uff0c5)\uff1bcreate_test_task(&#34\uff1bSecond&#34\uff1b\uff0c2)\uff1bScheduler_Run()\uff1bprintf(&#34\uff1b\u5df2\u8fd0\u884c\u5b8c\u6240\u6709\u4efb\u52a1\uff01\\n&#34\uff1b)\uff1breturn exit_SUCCESS\uff1b}\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u8fd0\u884c\u540c\u4e00\u51fd\u6570\u7684\u4efb\u52a1\uff0c\u4f46\u5b83\u4eec\u5c06\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u8ddf\u8e2a\u5b83\u4eec\u7684\u6267\u884c\u60c5\u51b5\u3002\u6bcf\u4e2a\u4efb\u52a1\u90fd\u8fed\u4ee3\u8bbe\u5b9a\u7684\u6b21\u6570\u3002\u6bcf\u6b21\u8fed\u4ee3\uff0c\u5b83\u90fd\u4f1a\u6253\u5370\u51fa\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u8ba9\u53e6\u4e00\u4e2a\u4efb\u52a1\u8fd0\u884c\u3002\u6211\u4eec\u671f\u671b\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u5185\u5bb9\u4f5c\u4e3a\u6b64\u7a0b\u5e8f\u7684\u8f93\u51fa\uff1a\n\u4efb\u52a1\u7b2c\u4e00\uff1a0\u4efb\u52a1\u7b2c\u4e8c\uff1a0\u4efb\u52a1\u7b2c\u4e00\uff1a1\u4efb\u52a1\u7b2c\u4e8c\uff1a1\u4efb\u52a1\u7b2c\u4e00\uff1a2\u4efb\u52a1\u7b2c\u4e00\uff1a3\u4efb\u52a1\u7b2c\u4e00\uff1a4\u6240\u6709\u4efb\u52a1\u8fd0\u884c\u5b8c\u6bd5\uff01\n\u8981\u5b9e\u73b0\u6b64API\uff0c\u6211\u4eec\u9700\u8981\u67d0\u79cdATASK\u7684\u5185\u90e8\u8868\u793a\u5f62\u5f0f\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u7ee7\u7eed\u5c06\u6211\u4eec\u9700\u8981\u7684\u5b57\u6bb5\u653e\u5728\u4e00\u8d77\uff1a\nstruct task{enum{ST_CREATED\uff0cST_RUNNING\uff0cST_WAITING\uff0c}status\uff1bint id\uff1bjmp_buf buf\uff1bvoid(*func)(void*)\uff1bvoid*arg\uff1bstruct sc_list_head task_list\uff1bvoid*STACK_Bottom\uff1bvoid*STACK_TOP\uff1bINT STACK_SIZE\uff1b}\uff1b\n\u8ba9\u6211\u4eec\u628a\u7530\u5730\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u770b\u4e00\u904d\u3002\u6240\u6709\u4efb\u52a1\u5728\u521b\u5efa\u540e\u5e94\u7acb\u5373\u5904\u4e8e\u201c\u5df2\u521b\u5efa\u201d\u72b6\u6001\u3002\u4e00\u65e6\u4efb\u52a1\u5f00\u59cb\u6267\u884c\uff0c\u5b83\u5c06\u5904\u4e8e\u201c\u8fd0\u884c\u201d\u72b6\u6001\uff0c\u5982\u679c\u4efb\u52a1\u9700\u8981\u7b49\u5f85\u67d0\u4e9b\u5f02\u6b65\u64cd\u4f5c\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u7f6e\u4e8e\u201c\u7b49\u5f85\u201d\u72b6\u6001\u3002id\u5b57\u6bb5\u53ea\u662f\u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002buf\u5305\u542b\u6211\u4eec\u5728long jmp()\u6062\u590d\u4efb\u52a1\u65f6\u7684\u6570\u636e\u3002func\u548carg\u88ab\u4f20\u9012\u7ed9Scheduler_create_task()\uff0c\u5b83\u4eec\u662f\u542f\u52a8\u4efb\u52a1\u6240\u5fc5\u9700\u7684\u3002TASK_LIST\u5b57\u6bb5\u662f\u5b9e\u73b0\u6240\u6709\u4efb\u52a1\u7684\u53cc\u5411\u94fe\u8868\u6240\u5fc5\u9700\u7684\u3002STACK_BOTTH\u3001STACK_TOP\u548cSTACK_SIZE\u5b57\u6bb5\u90fd\u4e0e\u4e3a\u6b64\u4efb\u52a1\u5206\u914d\u7684\u5355\u72ec\u5806\u6808\u76f8\u5173\u3002\u201c\u5e95\u90e8\u201d\u662fmalloc()\u8fd4\u56de\u7684\u5730\u5740\uff0c\u4f46\u201c\u9876\u90e8\u201d\u6307\u5411\u5185\u5b58\u533a\u57df\u6b63\u4e0a\u65b9\u7684\u5730\u5740\u3002\u7531\u4e8ex86\u5806\u6808\u5411\u4e0b\u589e\u957f\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5806\u6808\u6307\u9488\u8bbe\u7f6e\u4e3aSTACK_TOP\u800c\u4e0d\u662fSTACK_BOTLOW\u3002\nvoid Scheduler_CREATE_TASK(void(*func)(void*)\uff0cvoid*arg){static int id=1\uff1bstruct task*task=malloc(sizeof(*task))\uff1btask-&gt\uff1bstatus=ST_Created\uff1btask-&gt\uff1bfunc=func\uff1btask-&gt\uff1barg=arg\uff1btask-&gt\uff1bid=id++\uff1btask-&gt\uff1bstack_size=16*1024\uff1btask-&gt\uff1bstack\u3002STACK_SIZE)\uff1bTASK-&gt\uff1bSTACK_TOP=TASK-&gt\uff1bSTACK_Bottom+TASK-&gt\uff1bSTACK_SIZE\uff1bsc_list_insert_end(&amp\uff1bpri.\u3002TASK_LIST\uff0c&amp\uff1bTASK-&gt\uff1bTASK_LIST)\uff1b}\u3002\n\u4f7f\u7528\u9759\u6001int\u53ef\u4ee5\u786e\u4fdd\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0cidfield\u90fd\u4f1a\u9012\u589e\u5230\u4e00\u4e2a\u65b0\u6570\u5b57\u3002\u5176\u4ed6\u4e00\u5207\u90fd\u5e94\u8be5\u4e0d\u8a00\u800c\u55bb\uff0c\u9664\u4e86sc_list_insert_end()\uff0c\u5b83\u53ea\u662f\u5c06struct\u4efb\u52a1\u6dfb\u52a0\u5230\u5168\u5c40\u5217\u8868\u4e2d\u3002\u5168\u5c40\u5217\u8868\u5b58\u50a8\u5728\u5305\u542b\u6240\u6709\u79c1\u6709\u8c03\u5ea6\u5668\u6570\u636e\u7684\u7b2c\u4e8c\u7ed3\u6784\u4e2d\u3002\u8be5\u7ed3\u6784\u53ca\u5176\u521d\u59cb\u5316\u529f\u80fd\u5982\u4e0b\u6240\u793a\uff1a\nstruct Scheduler_Private{jmp_buf buf\uff1bstruct task*current\uff1bstruct sc_list_head task_list\uff1b}priv\uff1bvoid Scheduler_init(Void){priv.\u3002CURRENT=NULL\uff1bsc_list_init(&amp\uff1bpri.\u3002TASK_LIST)\uff1b}\u3002\nTASK_LIST\u5b57\u6bb5\u7528\u4e8e\u5f15\u7528\u4efb\u52a1\u5217\u8868(\u6beb\u4e0d\u5947\u602a)\uff0cCURRENT\u5b57\u6bb5\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1(\u5982\u679c\u5f53\u524d\u6ca1\u6709\u4efb\u4f55\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u5219\u4e3aNULL)\u3002\u6700\u91cd\u8981\u7684\u662f\uff0cbuf\u5b57\u6bb5\u5c06\u7528\u4e8e\u8df3\u8f6c\u5230Scheduler_Run()\u7684\u4ee3\u7801\uff1a\nenum{INIT=0\uff0cSchedule\uff0cexit_task\uff0c}\uff1bvoid Scheduler_Run(Void){/*\u8fd9\u662f\u8c03\u5ea6\u7a0b\u5e8f\u7684\u9000\u51fa\u8def\u5f84\uff01*/switch(setjmp(priv.\u3002buf){case exit_task\uff1aSCHEDLER_FREE_CURRENT_TASK()\uff1bCASE INIT\uff1aCASE Schedule\uff1aSchedule()\uff1b/*\u5982\u679c\u8fd4\u56de\uff0c\u5219\u6ca1\u6709\u5176\u4ed6\u4e8b\u60c5\u53ef\u505a\uff0c\u6211\u4eec\u9000\u51fa*/return\uff1b\u9ed8\u8ba4\u503c\uff1afprintf(stderr\uff0c&#34\uff1bUh oh\uff0cScheduler Error\\n&#34\uff1b)\uff1breturn\uff1b}}\u3002\n\u4e00\u65e6\u8c03\u7528Scheduler_run()\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u8bbe\u7f6esetjmp()\u7f13\u51b2\u533a\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u59cb\u7ec8\u8fd4\u56de\u5230\u6b64\u51fd\u6570\u3002\u7b2c\u4e00\u6b21\u8fd4\u56de0(INIT)\uff0c\u6211\u4eec\u7acb\u5373\u8c03\u7528Schedule()\u3002\u968f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8c03\u5ea6\u6216EXIT_TASK\u5e38\u91cf\u4f20\u9012\u7ed9long jmp()\uff0c\u8fd9\u5c06\u89e6\u53d1\u4e0d\u540c\u7684\u884c\u4e3a\u3002\u8ba9\u6211\u4eec\u6682\u65f6\u5ffd\u7565exit_task\u6848\u4f8b\uff0c\u76f4\u63a5\u8fdb\u5165Schedule()\u7684\u5b9e\u73b0\uff1a\n\u9759\u6001\u4f5c\u5e9f\u8c03\u5ea6(Void){struct task*next=SCHEDLER_CHOOSE_TASK()\uff1b\u5982\u679c(\uff01\u4e0b\u4e00\u6b65){return\uff1b}prv.\u3002CURRENT=NEXT\uff1bIF(NEXT-&&gt;\uff1bSTATUS==ST_CREATED){/**\u6b64\u4efb\u52a1\u5c1a\u672a\u5f00\u59cb\u3002\u5206\u914d\u4e00\u4e2a\u65b0\u7684STACK*\u6307\u9488\uff0c\u8fd0\u884c\u4efb\u52a1\uff0c\u5e76\u5728\u7ed3\u675f\u65f6\u9000\u51fa\u3002*/register void*top=Next-&gt\uff1bSTACK_TOP\uff1bASM Volatil(&#34\uff1bmov%[rs]\uff0c%%rsp\\n&#34\uff1b\uff1a[RS]&#34\uff1b+r&#34\uff1b(Top)\uff1a)\uff1b/**\u8fd0\u884c\u4efb\u52a1\u51fd\u6570*/Next-&gt\uff1bstatus=ST_Running\uff1bNext-&gt\uff1bfunc(Next-gt\uff1barg)\uff1b/**\u5806\u6808\u6307\u9488\u5e94\u56de\u5230\u6211\u4eec\u8bbe\u7f6e\u5b83\u7684\u4f4d\u7f6e\u3002\u8fd4\u56de\u5c06\u662f\u4e00\u4e2a\u975e\u5e38\u3001\u975e\u5e38\u7cdf\u7cd5\u7684\u4e3b\u610f\u3002\u8ba9&#39\uff1bs\u6539\u4e3a\u9000\u51fa*/Scheduler_Exit_Current_Task()\uff1b}\u5426\u5219{long jmp(Next-gt\uff1bbuf\uff0c1)\uff1b}/*\u4e0d\u8fd4\u56de*/}\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u5185\u90e8\u51fd\u6570\u6765\u9009\u62e9\u5e94\u8be5\u8fd0\u884c\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u56e0\u6b64\u5b83\u53ea\u9009\u62e9\u4efb\u52a1\u5217\u8868\u4e2d\u6700\u63a5\u8fd1\u7684\u4efb\u52a1\u3002\u5982\u679c\u6b64\u51fd\u6570\u8fd4\u56deNULL\uff0c\u5219\u6211\u4eec\u6709\u66f4\u591a\u4efb\u52a1\u8981\u8fd0\u884c\uff0c\u7136\u540e\u8fd4\u56de\u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u542f\u52a8\u4efb\u52a1\u8fd0\u884c(\u5982\u679c\u5b83\u5904\u4e8eST_CREATED\u72b6\u6001)\u6216\u7ee7\u7eed\u8fd0\u884c\u5b83\u3002\n\u8981\u542f\u52a8\u521b\u5efa\u7684\u4efb\u52a1\uff0c\u6211\u4eec\u4f7f\u7528x86_64\u6c47\u7f16\u6307\u4ee4\u5c06STACK_TOP\u5b57\u6bb5\u5206\u914d\u7ed9RSP\u5bc4\u5b58\u5668(\u5806\u6808\u6307\u9488)\u3002\u7136\u540e\uff0c\u6211\u4eec\u66f4\u6539\u4efb\u52a1\u72b6\u6001\uff0c\u8fd0\u884c\u51fd\u6570\uff0c\u5982\u679c\u51fd\u6570\u8fd4\u56de\uff0c\u5219\u9000\u51fa\u3002\u8bf7\u6ce8\u610f\uff0csetjmp()\u548clong jmp()\u5b58\u50a8\u548c\u4ea4\u6362\u5806\u6808\u6307\u9488\uff0c\u56e0\u6b64\u8fd9\u662f\u6211\u4eec\u552f\u4e00\u9700\u8981\u4f7f\u7528\u6c47\u7f16\u4fee\u6539\u5806\u6808\u6307\u9488\u7684\u65f6\u5019\u3002\n\u5982\u679c\u4efb\u52a1\u5df2\u7ecf\u542f\u52a8\uff0c\u90a3\u4e48buf\u5b57\u6bb5\u5e94\u8be5\u5305\u542b\u6211\u4eec\u9700\u8981long jmp()\u8fdb\u5165\u4ee5\u6062\u590d\u4efb\u52a1\u7684\u4e0a\u4e0b\u6587\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8fd9\u6837\u505a\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u9009\u62e9\u4e0b\u4e00\u4e2a\u8981\u8fd0\u884c\u7684\u4efb\u52a1\u7684helper\u51fd\u6570\u3002\u8fd9\u662f\u8c03\u5ea6\u5668\u7684\u6838\u5fc3\uff0c\u5c31\u50cf\u6211\u524d\u9762\u8bf4\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5faa\u73af\u8c03\u5ea6\u5668\uff1a\n\u9759\u6001\u7ed3\u6784TASK*SCHEDLER_CHOOSE_TASK(Void){\u7ed3\u6784TASK*TASK\uff1bsc_list_for_each_entry(TASK\uff0c&amp\uff1bpri.\u3002TASK_LIST\uff0cTASK_LIST\uff0cSTRUCT TASK){IF(TASK-&&gt;\uff1bSTATUS==ST_RUNNING||TASK-&&gt;\uff1bSTATUS==ST_CREATED){sc_LIST_REMOVE(&amp\uff1bTASK-&gT\uff1bTASK_LIST)\uff1bsc_LIST_INSERT_END(&amp\uff1bPRIV.\u3002TASK_LIST\uff0c&amp\uff1bTASK-&gt\uff1bTASK_LIST)\uff1breturn task\uff1b}}return null\uff1b}\u3002\n\u5982\u679c\u60a8\u4e0d\u719f\u6089\u6211\u7684\u94fe\u8868\u5b9e\u73b0(\u53d6\u81eaLinux\u5185\u6838)\uff0c\u4e5f\u6ca1\u95ee\u9898\u3002sc_list_for_each_entry()\u51fd\u6570\u662f\u4e00\u4e2a\u5b8f\uff0c\u5141\u8bb8\u6211\u4eec\u8fed\u4ee3\u4efb\u52a1\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u4efb\u52a1\u3002\u6211\u4eec\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684(Notwaiting)\u4efb\u52a1\u5c06\u4ece\u5176\u5f53\u524d\u4f4d\u7f6e\u79fb\u9664\uff0c\u5e76\u63d2\u5165\u5230\u4efb\u52a1\u5217\u8868\u7684\u672b\u5c3e\u3002\u8fd9\u786e\u4fdd\u4e86\u4e0b\u6b21\u6211\u4eec\u8fd0\u884c\u8c03\u5ea6\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u4efb\u52a1(\u5982\u679c\u6709\u53e6\u4e00\u4e2a\u4efb\u52a1)\u3002\u6211\u4eec\u8fd4\u56de\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u4efb\u52a1\uff0c\u5982\u679c\u6839\u672c\u6ca1\u6709\u4efb\u52a1\uff0c\u5219\u8fd4\u56deNULL\u3002\n\u6700\u540e\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0bScheduler_RELINISH()\u7684\u5b9e\u73b0\uff0c\u770b\u770b\u4efb\u52a1\u662f\u5982\u4f55\u5207\u6362\u81ea\u8eab\u7684\uff1a\n\u8fd9\u662f\u6211\u4eec\u7684\u8c03\u5ea6\u7a0b\u5e8f\u4e2dsetjmp()\u51fd\u6570\u7684\u53e6\u4e00\u4e2a\u7528\u6cd5\u3002\u56e0\u6b64\uff0c\u5b83\u53ef\u80fd\u4f1a\u6709\u70b9\u4ee4\u4eba\u56f0\u60d1\u3002\u5f53\u4efb\u52a1\u8c03\u7528\u6b64\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4f7f\u7528setjmp()\u4fdd\u5b58\u5f53\u524d\u4e0a\u4e0b\u6587(\u5305\u62ec\u5f53\u524d\u5806\u6808\u6307\u9488)\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528long jmp()\u8fdb\u5165\u8c03\u5ea6\u5668(\u56de\u5230Scheduler_Run())\uff0c\u5e76\u4f20\u9012\u8bf7\u6c42\u8c03\u5ea6\u65b0\u4efb\u52a1\u7684\u8c03\u5ea6\u51fd\u6570\u3002\n\u5f53\u4efb\u52a1\u6062\u590d\u65f6\uff0csetjmp()\u51fd\u6570\u5c06\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u5230\u4efb\u52a1\u4e4b\u524d\u6b63\u5728\u6267\u884c\u7684\u64cd\u4f5c\uff01\n\u6700\u540e\uff0c\u4e0b\u9762\u662f\u4efb\u52a1\u9000\u51fa\u65f6\u53d1\u751f\u7684\u60c5\u51b5(\u901a\u8fc7\u663e\u5f0f\u8c03\u7528exit\u51fd\u6570\uff0c\u6216\u8005\u901a\u8fc7\u4ece\u5176\u4efb\u52a1\u51fd\u6570\u8fd4\u56de)\uff1a\nvoid Scheduler_Exit_Current_TASK(Void){struct task*task=priv.\u3002\u5f53\u524d\uff1bsc_list_remove(&amp\uff1btask-&gt\uff1btask_list)\uff1blong jmp(\u521d\u59cb\u3002buf\uff0cexit_task)\uff1b/*\u4e0d\u8fd4\u56de*/}static void Scheduler_free_current_task(Void){struct task*task=priv.\u3002\u5f53\u524d\u7684\uff1b\u5f53\u524d\u7684\u3002CURRENT=NULL\uff1bFREE(\u4efb\u52a1-&&gt;\uff1bSTACK_BOOT)\uff1bFREE(\u4efb\u52a1)\uff1b}\u3002\n\u8fd9\u4e2a\u8fc7\u7a0b\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u7b2c\u4e00\u4e2a\u51fd\u6570\u7531\u4efb\u52a1\u76f4\u63a5\u8c03\u7528\u3002\u6211\u4eec\u4ece\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u8be5\u4efb\u52a1\u7684\u6761\u76ee\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5e94\u8be5\u518d\u88ab\u8c03\u5ea6\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06long jmp()\u8fd4\u56de\u5230Scheduler_run()\u51fd\u6570\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u4f7f\u7528exit_task\u3002\u8fd9\u5411\u8c03\u5ea6\u5668\u8868\u660e\uff0c\u5728\u8c03\u5ea6\u65b0\u4efb\u52a1\u4e4b\u524d\uff0c\u5b83\u5e94\u8be5\u9996\u5148\u8c03\u7528Scheduler_free_current_task()\u3002\u5982\u679c\u60a8\u5411\u4e0a\u6eda\u52a8\u5230Scheduler_run()\uff0c\u60a8\u5c06\u770b\u5230\u8fd9\u6b63\u662fScheduler_Run()\u6240\u505a\u7684\u4e8b\u60c5\u3002\n\u6211\u4eec\u5fc5\u987b\u5206\u4e24\u90e8\u5206\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5f53\u8c03\u7528SCHEDLER_EXIT_CURRENT_TASK()\u65f6\uff0c\u5b83\u4f1a\u4e3b\u52a8\u4f7f\u7528\u4efb\u52a1\u7ed3\u6784\u4e2d\u5305\u542b\u7684\u5806\u6808\u3002\u5982\u679c\u60a8\u5728\u91ca\u653e\u5806\u6808\u7684\u540c\u65f6\u4ecd\u5728\u4f7f\u7528\u5b83\uff0c\u5219\u51fd\u6570\u4ecd\u6709\u53ef\u80fd\u8bbf\u95ee\u6211\u4eec\u521a\u521a\u91ca\u653e\u7684\u5806\u6808\u5185\u5b58\uff01\u4e3a\u4e86\u786e\u4fdd\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\uff0c\u6211\u4eec\u5fc5\u987b\u5c06long jmp()\u8fd4\u56de\u5230\u8c03\u5ea6\u5668\uff0c\u8be5\u8c03\u5ea6\u5668\u4f7f\u7528\u5355\u72ec\u7684\u5806\u6808\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u91ca\u653e\u4efb\u52a1\u7684\u6570\u636e\u3002\n\u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8be5\u8c03\u5ea6\u5668\u7684\u6574\u4e2a\u5b9e\u73b0\u3002\u5982\u679c\u60a8\u7ee7\u7eed\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4ee5\u53ca\u6211\u7684\u94fe\u8868\u5b9e\u73b0\u548c\u4e0a\u9762\u7684\u4e3b\u7a0b\u5e8f\uff0c\u60a8\u5c31\u4f1a\u6709\u4e00\u4e2a\u5de5\u4f5c\u7684\u8c03\u5ea6\u5668\uff01\u6211\u5efa\u8bae\u60a8\u67e5\u770b\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u7684githubrepository\uff0c\u800c\u4e0d\u662f\u6240\u6709\u90a3\u4e9b\u590d\u5236\u548c\u7c98\u8d34\u64cd\u4f5c\u3002\n\u5982\u679c\u4f60\u5df2\u7ecf\u8d70\u5230\u8fd9\u4e00\u6b65\u4e86\uff0c\u6211\u60f3\u6211\u4e0d\u9700\u8981\u8bf4\u670d\u4f60\u8fd9\u5f88\u6709\u8da3\u3002\u7136\u800c\uff0c\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u6ca1\u6709\u90a3\u4e48\u6709\u7528\u3002\u6bd5\u7adf\uff0c\u60a8\u53ef\u4ee5\u5728C\u4e2d\u4f7f\u7528\u201c\u771f\u6b63\u7684\u201d\u7ebf\u7a0b\uff0c\u5b83\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u5f7c\u6b64\u8c03\u7528Scheduler_RELINISH()\u3002\n\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u7cfb\u5217\u4ee4\u4eba\u5174\u594b\u7684\u6709\u7528\u529f\u80fd\u5b9e\u73b0\u7684\u8d77\u70b9\u3002\u5bf9\u4e8eI/O\u7e41\u91cd\u7684\u4efb\u52a1\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u7528\u6765\u7b80\u5355\u5730\u5b9e\u73b0\u5355\u7ebf\u7a0b\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u662fPython\u65b0\u7684\u5f02\u6b65\u5b9e\u7528\u7a0b\u5e8f\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u8be5\u7cfb\u7edf\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u751f\u6210\u5668\u548c\u534f\u7a0b\u3002\u6700\u540e\uff0c\u53ea\u8981\u4ed8\u51fa\u8db3\u591f\u7684\u52aa\u529b\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u751a\u81f3\u53ef\u4ee5\u4e0e\u201c\u771f\u6b63\u7684\u201d\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u7ed3\u5408\u8d77\u6765\uff0c\u5728\u9700\u8981\u7684\u5730\u65b9\u63d0\u4f9b\u66f4\u591a\u7684\u5e76\u884c\u6027\u3002\u8fd9\u4e9b\u60f3\u6cd5\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u9879\u76ee\uff0c\u6211\u9f13\u52b1\u8bfb\u8005\u5728\u6211\u5f00\u59cb\u5199\u4e00\u7bc7\u5173\u4e8e\u5b83\u4eec\u7684\u65b0\u6587\u7ae0\u4e4b\u524d\u5c1d\u8bd5\u4e00\u4e0b\uff01\n\u6211\u662f\u8bf4\uff0c\u53ef\u80fd\u4e0d\u4f1a\uff01\u4f7f\u7528\u5185\u8054\u7a0b\u5e8f\u96c6\u4fee\u6539\u5806\u6808\u6307\u9488\u53ef\u80fd\u4e0d\u5b89\u5168\u3002\u4e0d\u8981\u5728\u60a8\u7684\u751f\u4ea7\u4ee3\u7801\u4e2d\u4f7f\u7528\u5b83\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u4f7f\u7528\u5b83\u6765\u6363\u4e71\u548c\u63a2\u7d22\uff01\n\u8fd9\u4e2a\u7cfb\u7edf\u7684\u4e00\u4e2a\u66f4\u5b89\u5168\u7684\u5b9e\u73b0\u53ef\u4ee5\u6784\u5efa\u5728\u201cucontext\u201dAPI\u4e0a(\u53c2\u89c1man getcontext)\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u8fd9\u4e9b\u7c7b\u578b\u7684\u7528\u6237\u7a7a\u95f4\u201c\u7ebf\u7a0b\u201d\u4e4b\u95f4\u8fdb\u884c\u4ea4\u6362\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u9700\u8981\u5e72\u9884\u5185\u8054\u6c47\u7f16\u3002\u4e0d\u5e78\u7684\u662f\uff0cAPI\u662f\u975e\u6807\u51c6\u7684(\u5b83\u5df2\u4ece\u6700\u65b0\u7684POSIX\u89c4\u8303\u4e2d\u5220\u9664)\u3002\u4f46\u662f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u6b64API\uff0c\u56e0\u4e3a\u5b83\u662fglibc\u7684\u4e00\u90e8\u5206\u3002\n\u6b63\u5982\u5f53\u524d\u7f16\u5199\u7684\u90a3\u6837\uff0c\u6b64\u8c03\u5ea6\u7a0b\u5e8f\u4ec5\u5728\u7ebf\u7a0b\u663e\u5f0f\u5730\u5c06\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u8c03\u5ea6\u7a0b\u5e8f\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u8fd9\u5bf9\u4e8e\u50cf\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u6837\u7684\u901a\u7528\u5b9e\u73b0\u662f\u4e0d\u597d\u7684\uff0c\u56e0\u4e3a\u884c\u4e3a\u4e0d\u4f73\u7684\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u963b\u6b62\u6240\u6709\u5176\u4ed6\u7ebf\u7a0b\u8fd0\u884c\u3002(\u5f53\u7136\uff0c\u8fd9\u5e76\u6ca1\u6709\u963b\u6b62MS-DOS\u4f7f\u7528\u534f\u4f5c\u591a\u4efb\u52a1\uff01)\u3002\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u4f1a\u4f7f\u534f\u4f5c\u591a\u4efb\u52a1\u53d8\u5f97\u4e0d\u597d\uff0c\u8fd9\u53ea\u662f\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5982\u679c\u4f7f\u7528\u975e\u6807\u51c6\u7684\u201cucontext\u201dAPI\uff0c\u90a3\u4e48POSIX\u4fe1\u53f7\u5c06\u5b9e\u9645\u5b58\u50a8\u5148\u524d\u6267\u884c\u7684\u4ee3\u7801\u7684\u4e0a\u4e0b\u6587\u3002\u901a\u8fc7\u8bbe\u7f6e\u5468\u671f\u6027\u5b9a\u65f6\u5668\u4fe1\u53f7\uff0c\u7528\u6237\u7a7a\u95f4\u8c03\u5ea6\u5668\u5b9e\u9645\u4e0a\u53ef\u4ee5\u83b7\u5f97\u62a2\u5360\u5f0f\u591a\u4efb\u52a1\u5de5\u4f5c\uff01\u8fd9\u662f\u53e6\u4e00\u4e2a\u975e\u5e38\u9177\u7684\u9879\u76ee\uff0c\u6211\u5e0c\u671b\u5c3d\u5feb\u8bd5\u7528\u5e76\u64b0\u5199\u3002\n\u5982\u679c\u4f60\u5df2\u7ecf\u8d70\u5230\u8fd9\u4e00\u6b65\uff0c\u611f\u8c22\u4f60\u7684\u9605\u8bfb\uff0c\u6211\u5e0c\u671b\u4f60\u6709\u673a\u4f1a\u5728\u6b64\u57fa\u7840\u4e0a\u5c1d\u8bd5\u4e00\u4e2a\u6709\u8da3\u7684\u9879\u76ee\uff01\n\u6cd5\u5f8b\u00b7RSS\u65af\u8482\u82ac\u00b7\u5e03\u4f26\u5357(Stephen Brennan)\u7684\u535a\u5ba2\u91c7\u7528\u77e5\u8bc6\u5171\u4eab\u7f72\u540d-ShareAlike 4.0\u56fd\u9645\u8bb8\u53ef", "note_en": "Stephen Brennan \u2022 24 May 2020 Multitasking, like many services an operating system provides, is something wetake for granted so much that it can feel mundane. With our powerful smartphonesand computers, the idea of a computer  not being able to juggle hundreds ofprocesses feels alien. I think it\u2019s features like this that make computersincredibly useful, but also make them feel so complicated and magical.\n It\u2019s hard to play around with the code that implements multitasking, and it\u2019snot obvious how to implement it yourself without building a whole OS. I\u2019m a firmbeliever that you don\u2019t truly understand something until you\u2019ve implemented ityourself, so I wanted to write an article that lets people play around with asimple thread implementation. In this post, we\u2019ll implement simple threads in anormal C program (not an operating system).\n  This scheduler is going to rely heavily on the functions  setjmp() and longjmp(). They feel a bit magical, so I want to first describe what they do,and spend a little time demystifying how they do it.\n The function  setjmp() is a way of recording information about where a programis in its execution, so that you can later jump back to that point. You give ita variable of type  jmp_buf, in which it will store that information. setjmp() returns 0 the first time it returns.\n Later on, you can use the function  longjmp(jmp_buf, value) to immediatelybegin execution back at the point where you called  setjmp(). To your program,it will look like  setjmp() returned a  second time. The  value argument youpass to  longjmp() will be returned this time, to help differentiate the secondreturn. Here\u2019s an example to help illustrate:\n #include &lt;stdio.h&gt;#include &lt;setjmp.h&gt; jmp_buf  saved_location ; int  main ( int  argc ,  char  ** argv ) {  if  ( setjmp ( saved_location )  ==  0 )  {  printf ( &#34;We have successfully set up our jump buffer! \\n &#34; );  }  else  {  printf ( &#34;We jumped! \\n &#34; );  return  0 ;  }  printf ( &#34;Getting ready to jump! \\n &#34; );  longjmp ( saved_location ,  1 );  printf ( &#34;This will never execute... \\n &#34; );  return  0 ; }\n   Wild! It\u2019s like a goto statement, but it can even be used to jump outside of afunction. It\u2019s also a lot more difficult to read than a goto, since it lookslike a regular function call. If your code used  setjmp() and  longjmp()liberally, it would be incredibly confusing for anyone (including yourself) toread.\n Like with goto, the common advice is to avoid  setjmp() and  longjmp().However, just like with goto, there are some times where it can be useful to usesparingly, and in a consistent way. A scheduler needs to be able to switchcontexts, and so we\u2019ll have to use these functions responsibly. Mostimportantly, we\u2019ll hide the use of these functions from our API, so that usersof our scheduler won\u2019t have to deal with that kind of complexity.\n  The  setjmp() and  longjmp() functions aren\u2019t designed to support just  anykind of jumping around, however. They\u2019re designed for a pretty particular usecase. Imagine that you are doing something complicated, like making an HTTPrequest. This will involve a complicated set of function calls, and if any ofthem fail, you\u2019ll need to return a special error code from each one of them.This leads to code like this, everywhere you call a function (possibly dozens oftimes):\n  The idea of  setjmp() and  longjmp() is that you can use  setjmp() to saveyour place just before starting something complex. Then, you could centralizeall of your error handling into one place:\n int  rv ; jmp_buf  buf ; if  (( rv  =  setjmp ( buf ))  !=  0 )  {  /* handle errors here */  return ; } do_complicated_task ( buf ,  args ...);\n If any function involved in  do_complicated_task() fails, it would just longjmp(buf, error_code). This means that every function within do_complicated_task() can assume that every function call is a success, whichmeans you can get rid of that error handling code for each function call. (Inpractice, this is almost never done, but that\u2019s a separate blog post.)\n The big idea here is that  longjmp() only allows you to jump  out of deeplynested functions. You can\u2019t jump back  into a deeply nested function which youhad formerly jumped out of. Here\u2019s an illustration of the stack when you jumpout of a function. The asterisk  (*) marks the stack pointer which  setjmp()stored.\n | Stack before longjmp | Stack after longjmp +-------------------------+----------------------------stack | main() (*) | main()grows | do_http_request() |down | send_a_header() | | | write_bytes() | v | write() - fails! |\n You can see that we only move back up the stack, and so there is no risk of datacorruption. On the other hand, imagine if you wanted to jump between tasks. Ifyou call  setjmp() and then return, do some other stuff, and then attempt toresume what you were doing before, you\u2019ll have a problem:\n | Stack at setjmp() | Stack later | Stack after longjmp() +-------------------+------------------+----------------------stack | main() | main() | main()grows | do_task_one() | do_task_two() | do_stack_two()down | subtask() | subtask() | subtask() | | foo() | | ??? v | bar() (*) | (*) | ??? (*)\n The stack pointer which  setjmp() saved will point at a stack frame which nolonger exists, and may have been overwritten at some point with other data. Whenyou try to  longjmp() back into the function you have already returned from,you\u2019ll start experiencing some really weird behavior that will probably crashyour program.\n The moral of this story is that, if you want to use setjmp() and longjmp() tojump between complex tasks like this, you need to make sure each task has  itsown separate stack. This completely eliminates the problem, because when longjmp() resets the stack pointer, it will swap stacks for you, and no stackoverwriting will take place.\n  That was a bit of a long diversion, but equipped with this knowledge, we shouldbe able to implement userspace threads. To start out, I found it quite helpfulto design the API which should be used to initialize, create, and run thethreads. Doing this ahead of time really helps understand what we\u2019re trying tobuild!\n  These functions will be used to initialize the scheduler, add tasks, and theneventually begin running tasks in the scheduler. Once we start scheduler_run(), it will run until all tasks are completed. For tasks whichare running, they will have the following APIs:\n  The first function will exit the task. A task could also exit by returning fromits function, so this is simply a convenience. The second function is how ourthreads will tell the scheduler to let another task run for a bit. When a taskcalls  scheduler_relinquish(), it could be suspended a bit for a bit, whileother tasks run, but eventually the function will return and the task cancontinue running.\n To give a concrete example of the API, here\u2019s a hypothetical use of this API,which we\u2019ll use to test our scheduler:\n #include &lt;stdlib.h&gt;#include &lt;stdio.h&gt; #include &#34;scheduler.h&#34; struct  tester_args  {  char  * name ;  int  iters ; }; void  tester ( void  * arg ) {  int  i ;  struct  tester_args  * ta  =  ( struct  tester_args  * ) arg ;  for  ( i  =  0 ;  i  &lt;  ta -&gt; iters ;  i ++ )  {  printf ( &#34;task %s: %d \\n &#34; ,  ta -&gt; name ,  i );  scheduler_relinquish ();  }  free ( ta ); } void  create_test_task ( char  * name ,  int  iters ) {  struct  tester_args  * ta  =  malloc ( sizeof ( * ta ));  ta -&gt; name  =  name ;  ta -&gt; iters  =  iters ;  scheduler_create_task ( tester ,  ta ); } int  main ( int  argc ,  char  ** argv ) {  scheduler_init ();  create_test_task ( &#34;first&#34; ,  5 );  create_test_task ( &#34;second&#34; ,  2 );  scheduler_run ();  printf ( &#34;Finished running all tasks! \\n &#34; );  return  EXIT_SUCCESS ; }\n In this example, we create two tasks which run the same function, but they\u2019lluse different arguments so that we can trace their execution separately. Eachtask iterates a set number of times. Each iteration, it prints out a message andthen lets another task run. We would expect to see something like this as theoutput of this program:\n task first: 0task second: 0task first: 1task second: 1task first: 2task first: 3task first: 4Finished running all tasks!\n  To implement this API, we\u2019ll need some sort of internal representation of atask, so let\u2019s go ahead and put together fields we\u2019ll need:\n struct  task  {  enum  {  ST_CREATED ,  ST_RUNNING ,  ST_WAITING ,  }  status ;  int  id ;  jmp_buf  buf ;  void  ( * func )( void * );  void  * arg ;  struct  sc_list_head  task_list ;  void  * stack_bottom ;  void  * stack_top ;  int  stack_size ; };\n Let\u2019s go through the fields one by one. All tasks should be in the \u201ccreated\u201dstate as soon as they\u2019re created. Once a task starts executing, it will be inthe \u201crunning\u201d status, and if a task ever needed to wait for some asynchronousoperation, it could be placed in the \u201cwaiting\u201d state. The  id field is just aunique identifier for the task.  buf contains the data for when we  longjmp()to resume the task.  func and  arg are passed to  scheduler_create_task() andare necessary for starting the task. The  task_list field is necessary toimplement a doubly linked list of all tasks. The  stack_bottom,  stack_top,and  stack_size fields all relate to the separate stack allocated for thistask. The \u201cbottom\u201d is the address returned by  malloc(), but the \u201ctop\u201d is apointer to the address directly above the region of memory. Since the x86 stackgrows downward, we will need to set the stack pointer to  stack_top rather than stack_bottom.\n  void  scheduler_create_task ( void  ( * func )( void  * ),  void  * arg ) {  static  int  id  =  1 ;  struct  task  * task  =  malloc ( sizeof ( * task ));  task -&gt; status  =  ST_CREATED ;  task -&gt; func  =  func ;  task -&gt; arg  =  arg ;  task -&gt; id  =  id ++ ;  task -&gt; stack_size  =  16  *  1024 ;  task -&gt; stack_bottom  =  malloc ( task -&gt; stack_size );  task -&gt; stack_top  =  task -&gt; stack_bottom  +  task -&gt; stack_size ;  sc_list_insert_end ( &amp; priv . task_list ,  &amp; task -&gt; task_list ); }\n Using a  static int ensures that each time the function is called, the  idfield increments to a new number. Everything else should be self-explanatory,except the  sc_list_insert_end(), which simply adds the  struct task to theglobal list. The global list is stored within a second structure, whichcontains all the private scheduler data. This structure is presented below,along with its initialization function:\n struct  scheduler_private  {  jmp_buf  buf ;  struct  task  * current ;  struct  sc_list_head  task_list ; }  priv ; void  scheduler_init ( void ) {  priv . current  =  NULL ;  sc_list_init ( &amp; priv . task_list ); }\n The  task_list field is used to refer to the list of tasks (unsurprisingly).The  current field is used to store the currently executing task (or null ifnone is curently running). Most importantly, the  buf field will be used tojump into the code of  scheduler_run():\n enum  {  INIT = 0 ,  SCHEDULE ,  EXIT_TASK , }; void  scheduler_run ( void ) {  /* This is the exit path for the scheduler! */  switch  ( setjmp ( priv . buf ))  {  case  EXIT_TASK :  scheduler_free_current_task ();  case  INIT :  case  SCHEDULE :  schedule ();  /* if return, there&#39;s nothing else to do and we exit */  return ;  default:  fprintf ( stderr ,  &#34;Uh oh, scheduler error \\n &#34; );  return ;  } }\n As soon as the  scheduler_run() function is called, we set the  setjmp()buffer so we can always return to this function. The first time, 0 ( INIT) isreturned, and we immediately call  schedule(). Subsequently, we can pass the SCHEDULE or  EXIT_TASK constants into  longjmp(), which will triggerdifferent behaviors. Let\u2019s ignore the  EXIT_TASK case for now, and go directlyinto the implementation of  schedule():\n static  void  schedule ( void ) {  struct  task  * next  =  scheduler_choose_task ();  if  ( ! next )  {  return ;  }  priv . current  =  next ;  if  ( next -&gt; status  ==  ST_CREATED )  {  /* * This task has not been started yet. Assign a new stack * pointer, run the task, and exit it at the end. */  register  void  * top  =  next -&gt; stack_top ;  asm  volatile (  &#34;mov %[rs], %%rsp  \\n &#34;  :  [  rs  ]  &#34;+r&#34;  ( top )  ::  );  /* * Run the task function */  next -&gt; status  =  ST_RUNNING ;  next -&gt; func ( next -&gt; arg );  /* * The stack pointer should be back where we set it. Returning would be * a very, very bad idea. Let&#39;s instead exit */  scheduler_exit_current_task ();  }  else  {  longjmp ( next -&gt; buf ,  1 );  }  /* NO RETURN */ }\n First, we call an internal function to select the next task which should be run.This is going to be a simple round-robin scheduler, so it just chooses the nextready task in the task list. If this function returned NULL, then we have nomore tasks to run, and we return. Otherwise, we need to either start the taskrunning (if it is in the  ST_CREATED state) or resume running it.\n To start a created task, we use an x86_64 assembly instruction to assign the stack_top field to the  rsp register (stack pointer). Then we change the taskstate, run the function, and exit if the function returns. Note that  setjmp()and  longjmp() store and swap stack pointers, so this is the only time wherewe\u2019ll need to use assembly to modify the stack pointer.\n If the task has already been started, then the  buf field should contain thecontext we need to  longjmp() into to resume the task, so we just do that.Next, let\u2019s look at the helper function which selects the next task to run. Thisis the heart of a scheduler, and like I said earlier, this is a round-robinscheduler:\n static  struct  task  * scheduler_choose_task ( void ) {  struct  task  * task ;  sc_list_for_each_entry ( task ,  &amp; priv . task_list ,  task_list ,  struct  task )  {  if  ( task -&gt; status  ==  ST_RUNNING  ||  task -&gt; status  ==  ST_CREATED )  {  sc_list_remove ( &amp; task -&gt; task_list );  sc_list_insert_end ( &amp; priv . task_list ,  &amp; task -&gt; task_list );  return  task ;  }  }  return  NULL ; }\n If you\u2019re unfamiliar with my linked list implementation (which is taken from theLinux kernel), that\u2019s ok. The  sc_list_for_each_entry() function is a macrothat lets us iterate over each task in the task list. The first eligible (notwaiting) task we find is removed from its current position and inserted at theend of the task list. This ensures that next time we run the scheduler, we\u2019llget a different task (if there is another). We return this first eligible task,or NULL if there were no tasks at all.\n Finally, let\u2019s get to the implementation of  scheduler_relinquish() to see howa task can switch itself out:\n  This is the other use of the  setjmp() function in our scheduler. As such itcan be slightly confusing. When a task calls this function, we use  setjmp() tosave our current context (which includes the current stack pointer). Then, weuse  longjmp() to enter into the scheduler (back in  scheduler_run()), and wepass the  SCHEDULE function asking to schedule a new task.\n When the task gets resumed, the  setjmp() function will return non-zero andwe\u2019ll return out to whatever the task was doing before!\n Finally, here\u2019s what happens when a task exits (either by explicitly calling theexit function, or by returning from its task function):\n void  scheduler_exit_current_task ( void ) {  struct  task  * task  =  priv . current ;  sc_list_remove ( &amp; task -&gt; task_list );  longjmp ( priv . buf ,  EXIT_TASK );  /* NO RETURN */ } static  void  scheduler_free_current_task ( void ) {  struct  task  * task  =  priv . current ;  priv . current  =  NULL ;  free ( task -&gt; stack_bottom );  free ( task ); }\n This process comes in two parts: the first function is called directly by thetask. We remove the task\u2019s entry from the task list, since it should no longerbe scheduled. Then, we  longjmp() back to the  scheduler_run() function. Thistime, we use  EXIT_TASK. This indicates to the scheduler that, before itschedules a new task, it should first call  scheduler_free_current_task(). Ifyou scroll back up to  scheduler_run(), you\u2019ll see this is exactly what scheduler_run() does.\n We have to do this in two parts because, when  scheduler_exit_current_task() iscalled, it is actively using the stack contained in the task struct. If you freethe stack while still using it, there\u2019s the chance that the function will stillaccess the very stack memory we just freed! To ensure this doesn\u2019t happen, wehave to  longjmp() back to the scheduler, which is using a separate stack. Thenwe can safely free the task\u2019s data.\n With that, we\u2019ve covered the entire implementation of this scheduler. If youwere to go ahead and compile this, along with my linked list implementation andthe main program above, you would have a working scheduler! Instead of all thatcopying and pasting, I\u2019d encourage you to check out the  githubrepository which contains all this code.\n  If you\u2019ve gotten this far, I assume I don\u2019t need to convince you that this isinteresting. However, it may not seem all that useful. After all, you can use\u201creal\u201d threads in C, which can run in parallel and don\u2019t need to wait for eachother to call  scheduler_relinquish().\n However, I see this as a jumping off point for a whole series of excitingimplementations of useful features. For I/O heavy tasks, this could also be used tosimply implement a single-threaded async application, the way that Python\u2019s newasync utilities work. This system could also implement generators andcoroutines. Finally, with enough effort, this system could even be coupled with\u201creal\u201d operating system threads to provide more parallelism where necessary.Each of these ideas is a fun project which I\u2019d encourage the reader to trybefore I get around to writing a new article about them!\n  I mean, probably not! It\u2019s probably not safe to use inline assembly to modifythe stack pointer. Don\u2019t use it in your production code, but do use it to messaround and explore!\n A safer implementation of this system could be built on the \u201cucontext\u201d API (see man getcontext), which provides a way to swap between these types of userspace\u201cthreads\u201d without needing to meddle with inline assembly. Unfortunately, the APIis non-standard (it was removed from the latest POSIX spec). However, you canstill use this API, as it is part of  glibc.\n  As it is currently written, this scheduler only works if threads explicitly handoff control back to the scheduler. This is bad for a general purposeimplementation like an operating system, because a poorly behaved thread couldprevent all the others from running. (Of course, that didn\u2019t stop MS-DOS fromusing cooperative multitasking!). I don\u2019t think that makes cooperativemultitasking bad, it\u2019s just going to depend on the application.\n If one used the non-standard \u201cucontext\u201d API, then POSIX signals would actuallystore the context of the previously executing code. By setting a periodic timersignal, a userspace scheduler could actually get preemptive multitaskingworking! This is another really cool project that I hope to try out and writeabout soon.\n If you\u2019ve gotten this far, thanks for reading, and I hope you get the chance totry out a fun project based on this!\n      Legal \u2022  RSS           Stephen Brennan&#39;s Blog is licensed under a  Creative Commons Attribution-ShareAlike 4.0 International License", "posttime": "2020-05-25 03:21:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,\u7ebf\u7a0b,simple,\u4efb\u52a1", "title": "\u7528C++\u5b9e\u73b0\u7b80\u5355\u7684\u534f\u4f5c\u7ebf\u7a0b", "title_en": "Implementing simple cooperative threads in C", "transed": 1, "url": "https://brennan.io/2020/05/24/userspace-cooperative-multitasking/", "via": "", "real_tags": ["c++", "\u7ebf\u7a0b", "simple", "\u4efb\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "87a011d8610a06105d1ce703aa9b6773.jpg", "infoid": 1003556, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b9c\u5bb6(Ikea)\u5728\u5176\u89c6\u89c9\u6807\u8bc6\u4e2d\u4f7f\u7528Verdana\u5341\u5e74\u540e\uff0c\u5c06\u5176\u54c1\u724c\u5b57\u4f53\u6362\u6210\u4e86Noto\uff0c\u8fd9\u662fMontype\u548c\u8c37\u6b4c(Google)\u7684\u534f\u4f5c\u578b\u5bb6\u65cf\u3002\u57282009\u5e74\u4e4b\u524d\uff0c\u8be5\u516c\u53f8\u4f7f\u7528\u5b9c\u5bb6Sans(\u6539\u7f16\u81eaFutura)\u5df2\u670950\u5e74\u4e4b\u4e45\uff0c\u4f46\u7531\u4e8e\u5176\u81ea\u6709\u54c1\u724c\u5b57\u4f53\u4e0d\u5305\u62ec\u4e9a\u6d32\u5b57\u7b26\uff0c\u56e0\u6b64\u642c\u5230\u4e86Verdana\u3002\n\u5b9c\u5bb6\u8fdb\u519bNoto\uff0c\u662f\u8ba9\u5b9c\u5bb6\u7684\u5b57\u4f53\u771f\u6b63\u878d\u5165\u5168\u7403\u5e02\u573a\u7684\u53c8\u4e00\u6b65\uff0c\u56e0\u4e3a\u5b9c\u5bb6\u6db5\u76d6\u4e86\u4e16\u754c\u4e0a\u6bcf\u4e00\u79cd\u4e66\u9762\u8bed\u8a00\u3002Noto\u6210\u7acb\u4e8e2016\u5e7410\u6708\uff0c\u662f\u8c37\u6b4c\u548cMonotype\u4e94\u5e74\u7814\u53d1\u7684\u7ed3\u679c\uff0c\u62db\u52df\u4e86\u6570\u767e\u540d\u5458\u5de5\uff0c\u7edf\u4e00\u4e86\u4ece\u897f\u91cc\u5c14\u8bed\u5230\u5207\u8bfa\u57fa\u8bed\u7684800\u79cd\u8bed\u8a00\u548c100\u79cd\u4e66\u9762\u6587\u5b57\u3002\u901a\u8fc7\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u521b\u5efaUnicode\u6807\u51c6\u4e2d\u6240\u6709\u811a\u672c\u7684\u6570\u5b57\u8868\u793a\uff0c\u8be5\u5b57\u4f53\u662f\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u4e2a\u670d\u52a1\u4e8e\u7279\u5b9a\u8bed\u8a00\u793e\u533a\u7684\u5b57\u4f53\u3002\nNoto\u662fNo Tofu\u7684\u7f29\u5199\uff0c\u8c46\u8150\u662f\u4e00\u4e2a\u672f\u8bed\uff0c\u7ecf\u5e38\u7528\u6765\u63cf\u8ff0\u8ba1\u7b97\u673a\u4e0d\u652f\u6301\u67d0\u79cd\u5b57\u4f53\u65f6\u663e\u793a\u7684\u5c0f\u65b9\u5757\u3002\n\u5b9c\u5bb6\u57282020\u5e74\u7684\u4ea7\u54c1\u76ee\u5f55\u4e2d\u516c\u5e03\u4e86\u8fd9\u79cd\u65b0\u5b57\u4f53\u3002\u5728\u63a8\u7279\u4e0a\uff0cMontype\u7684\u4e8e\u5c14\u6839\u00b7\u897f\u4f2f\u7279(J\u00fcrgen Siebert)\u5206\u4eab\u4e86\u65b0\u65e7\u5b57\u4f53\u6295\u5165\u4f7f\u7528\u524d\u540e\u7684\u7167\u7247\uff0c\u4ed6\u8bc4\u8bba\u9053\uff1a\u201c\u9677\u5165\u7cfb\u7edf\u601d\u7ef4\uff1a\u5341\u5e74\u540e\uff0c\u5b9c\u5bb6(Ikea)\u544a\u522b\u4e86Verdana\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662fNoto\u3002\u201d", "note_en": "Ikea has swapped its brand typeface to  Noto, a collaborative type family from Monotype and Google, after a decade of using Verdana across its visual identity. Before 2009, the company used Ikea Sans \u2013\u00a0an adaptation of Futura \u2013\u00a0for 50 years, but moved to Verdana because its own-brand font didn\u2019t include Asian characters.\n Its move to Noto is a step further in making Ikea\u2019s typeface truly inclusive of its global markets, as the family encompasses every written language in the world.  Noto launched in October 2016 as the result of five years research and development between Google and Monotype, enlisting hundreds of staff and unifying 800 languages and 100 written scripts from Cyrillic to Cherokee. By creating a digital representation of all the scripts in the Unicode standard in many cases, the font was the first ever to serve a particular language community.\n The name Noto is short for No Tofu, where tofu is a term often used to describe the little squares that show when a font is not supported by a computer.\n Ikea has revealed the new typeface in its 2020 catalogue. On Twitter, Monotype\u2019s  J\u00fcrgen Siebert shared before-and-after shots of the old and new typefaces in action, commenting: \u201cTrapped in system thinking: After ten years, Ikea says goodbye to Verdana and replaces it with Noto.\u201d", "posttime": "2020-05-25 03:20:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u5b9c\u5bb6,\u8c37\u6b4c,2020,\u5355\u4f53", "title": "\u5b9c\u5bb62020\u5e74\u4ea7\u54c1\u76ee\u5f55\u4eceVerdana\u5207\u6362\u5230Noto(\u8c37\u6b4c\uff0c\u5355\u4f53\u5b57)", "title_en": "IKEA switches from Verdana to Noto (Google, Monotype) for 2020 catalogue", "transed": 1, "url": "https://www.itsnicethat.com/news/ikea-changes-typeface-to-noto-monotype-google-graphic-design-210819", "via": "", "real_tags": ["google", "\u5b9c\u5bb6", "\u8c37\u6b4c", "2020", "\u5355\u4f53"]}, {"category": "", "categoryclass": "", "imagename": "bcf690b02f01cd0060ef1f6b7e3f7cc7.png", "infoid": 1003555, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Google Noto\u662f\u4e00\u79cd\u5386\u65f6\u4e94\u5e74\u7684\u5b57\u4f53\uff0c\u8de8\u8d8a\u4e86100\u591a\u79cd\u4e66\u5199\u7cfb\u7edf\u3001800\u79cd\u8bed\u8a00\u548c\u6570\u5341\u4e07\u4e2a\u5b57\u7b26\u3002Noto\u5b57\u4f53\u662f\u8c37\u6b4c\u548cMontype\u7684\u5408\u4f5c\u6210\u679c\uff0c\u5bf9\u4e8e\u5168\u4e16\u754c\u6570\u5341\u4ebf\u8bbf\u95ee\u6570\u5b57\u5185\u5bb9\u7684\u4eba\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u79cd\u771f\u6b63\u901a\u7528\u7684\u4ea4\u6d41\u65b9\u5f0f\u3002", "note_en": "A typeface five years in the making, Google Noto spans more than 100 writing systems, 800 languages, and hundreds of thousands of characters. A collaborative effort between Google and Monotype, the Noto typeface is a truly universal method of communication for billions of people around the world accessing digital content.", "posttime": "2020-05-25 03:20:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u5b57\u4f53,single", "title": "\u5728\u4e00\u79cd\u5b57\u4f53\u4e2d\u4f7f\u7528800\u591a\u79cd\u8bed\u8a00\uff1a\u4e3aGoogle\u521b\u5efaNoto", "title_en": "More than 800 languages in a single typeface: creating Noto for Google", "transed": 1, "url": "https://www.monotype.com/resources/case-studies/more-than-800-languages-in-a-single-typeface-creating-noto-for-google", "via": "", "real_tags": ["google", "\u5b57\u4f53", "single"]}, {"category": "", "categoryclass": "", "imagename": "3e32fb3a31dc4eb846906c8cdf41ed57.png", "infoid": 1003551, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u8ba1\u7b97\u673a\u89c6\u89c9\u5728\u6700\u8fd1\u51e0\u5e74\u624d\u5728\u81ea\u6211\u76d1\u7763\u5b66\u4e60\u65b9\u9762\u53d6\u5f97\u4e86\u4ee4\u4eba\u60ca\u53f9\u7684\u8fdb\u5c55\uff0c\u4f46\u81ea\u6211\u76d1\u7763\u5b66\u4e60\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u4e00\u76f4\u662fNLP\u7814\u7a76\u7684\u4e00\u7b49\u516c\u6c11\u3002\u8bed\u8a00\u6a21\u578b\u65e9\u572890\u5e74\u4ee3\u5c31\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u751a\u81f3\u5728\u201c\u81ea\u6211\u76d1\u7763\u5b66\u4e60\u201d\u8fd9\u4e2a\u8bcd\u88ab\u5b9a\u4e49\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\u4e86\u30022013\u5e74\u7684word2vec\u8bba\u6587\u666e\u53ca\u4e86\u8fd9\u4e00\u8303\u5f0f\uff0c\u8be5\u9886\u57df\u5728\u8bb8\u591a\u95ee\u9898\u4e0a\u5e94\u7528\u8fd9\u4e9b\u81ea\u6211\u76d1\u7763\u7684\u65b9\u6cd5\u53d6\u5f97\u4e86\u5feb\u901f\u8fdb\u5c55\u3002\n\u8fd9\u4e9b\u81ea\u6211\u76d1\u7763\u65b9\u6cd5\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u79f0\u4e3a\u201c\u501f\u53e3\u4efb\u52a1\u201d\u7684\u6846\u67b6\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u6570\u636e\u672c\u8eab\u6765\u751f\u6210\u6807\u7b7e\uff0c\u5e76\u4f7f\u7528\u76d1\u7763\u65b9\u6cd5\u6765\u89e3\u51b3\u975e\u76d1\u7763\u95ee\u9898\u3002\u8fd9\u4e9b\u4e5f\u79f0\u4e3a\u201c\u8f85\u52a9\u4efb\u52a1\u201d\u6216\u201c\u9884\u8bad\u4efb\u52a1\u201d\u3002\u901a\u8fc7\u6267\u884c\u6b64\u4efb\u52a1\u4e86\u89e3\u5230\u7684\u8868\u793a\u53ef\u4ee5\u7528\u4f5c\u6211\u4eec\u4e0b\u6e38\u76d1\u7763\u4efb\u52a1\u7684\u8d77\u70b9\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u6982\u8ff0\u7814\u7a76\u4eba\u5458\u8bbe\u8ba1\u7684\u5404\u79cd\u501f\u53e3\u4efb\u52a1\uff0c\u8fd9\u4e9b\u4efb\u52a1\u662f\u4e3a\u4e86\u5728\u6ca1\u6709\u660e\u786e\u6570\u636e\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\u4ece\u6587\u672c\u8bed\u6599\u5e93\u4e2d\u5b66\u4e60\u8868\u793a\u3002\u672c\u6587\u7684\u91cd\u70b9\u5c06\u653e\u5728\u4efb\u52a1\u7684\u5236\u5b9a\u4e0a\uff0c\u800c\u4e0d\u662f\u5b83\u4eec\u6240\u5b9e\u73b0\u7684\u4f53\u7cfb\u7ed3\u6784\u4e0a\u3002\n\u5728\u8fd9\u4e2a\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u53d6\u4e00\u5b9a\u7a97\u53e3\u5927\u5c0f\u7684\u6587\u672c\u7684\u4e00\u5c0f\u5757\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u9884\u6d4b\u7ed9\u5b9a\u5468\u56f4\u5355\u8bcd\u7684\u4e2d\u5fc3\u5355\u8bcd\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u56fe\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a1\u7684\u7a97\u53e3\uff0c\u56e0\u6b64\u5728\u4e2d\u5fc3\u8bcd\u7684\u4e24\u4fa7\u5404\u6709\u4e00\u4e2a\u8bcd\u3002\u4f7f\u7528\u8fd9\u4e9b\u76f8\u90bb\u7684\u5355\u8bcd\uff0c\u6211\u4eec\u9700\u8981\u9884\u6d4b\u4e2d\u5fc3\u5355\u8bcd\u3002\u8fd9\u4e00\u63d0\u6cd5\u5728word2vec\u767d\u76ae\u4e66\u8457\u540d\u7684\u201c\u8fde\u7eed\u4e0d\u65ad\u7684\u8bcd\u888b\u201d\u65b9\u6cd5\u4e2d\u5f97\u5230\u4e86\u5e94\u7528\u3002\n\u5728\u8fd9\u4e2a\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u53d6\u4e00\u5b9a\u7a97\u53e3\u5927\u5c0f\u7684\u6587\u672c\u7684\u8de8\u5ea6\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u9884\u6d4b\u7ed9\u5b9a\u4e2d\u5fc3\u8bcd\u7684\u5468\u56f4\u8bcd\u3002\u8fd9\u4e00\u63d0\u6cd5\u5728word2vec\u8bba\u6587\u4e2d\u8457\u540d\u7684\u201c\u8df3\u683c\u201d\u65b9\u6cd5\u4e2d\u5f97\u5230\u4e86\u5b9e\u65bd\u3002\n\u5728\u8fd9\u4e2a\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u53d6\u4e09\u4e2a\u8fde\u7eed\u7684\u53e5\u5b50\uff0c\u5e76\u8bbe\u8ba1\u4e00\u4e2a\u4efb\u52a1\uff0c\u5176\u4e2d\u7ed9\u5b9a\u4e2d\u5fc3\u53e5\u5b50\uff0c\u6211\u4eec\u9700\u8981\u751f\u6210\u4e0a\u4e00\u53e5\u548c\u4e0b\u4e00\u53e5\u3002\u5b83\u7c7b\u4f3c\u4e8e\u524d\u9762\u7684\u8df3\u8fc7\u6587\u6cd5\uff0c\u4f46\u9002\u7528\u4e8e\u53e5\u5b50\u800c\u4e0d\u662f\u5355\u8bcd\u3002\u8fd9\u4e00\u63d0\u6cd5\u5df2\u88ab\u7528\u4e8e\u201c\u8df3\u8fc7\u601d\u7ef4\u5411\u91cf\u201d\u7684\u8bba\u6587\u4e2d\u3002\n\u5728\u8fd9\u4e2a\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u53d6\u5927\u91cf\u672a\u6807\u8bb0\u6587\u672c\u8bed\u6599\u5e93\uff0c\u5e76\u5efa\u7acb\u4e00\u4e2a\u4efb\u52a1\u6765\u9884\u6d4b\u7ed9\u5b9a\u5148\u524d\u5355\u8bcd\u7684\u4e0b\u4e00\u4e2a\u5355\u8bcd\u3002\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8bed\u6599\u5e93\u4e0b\u4e00\u4e2a\u5355\u8bcd\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u624b\u52a8\u6ce8\u91ca\u7684\u6807\u7b7e\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9884\u6d4b\u7ed9\u5b9a\u524d\u4e00\u4e2a\u5355\u8bcd\u7684\u4e0b\u4e00\u4e2a\u5355\u8bcd\uff0c\u5c06\u4efb\u52a1\u8bbe\u7f6e\u4e3a\u4ece\u5de6\u5230\u53f3\u7684\u8bed\u8a00\u5efa\u6a21\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5176\u8868\u8ff0\u4e3a\u5728\u7ed9\u5b9a\u672a\u6765\u8bcd\u7684\u60c5\u51b5\u4e0b\u9884\u6d4b\u4e4b\u524d\u7684\u8bcd\u3002\u65b9\u5411\u662f\u4ece\u53f3\u5230\u5de6\u3002\n\u4ecen\u5143\u8bed\u6cd5\u6a21\u578b\u5230\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5982\u795e\u7ecf\u6982\u7387\u8bed\u8a00\u6a21\u578b(Bengio et al.\uff0c2003)\uff0c\u518d\u5230GPT\uff0c\u8be5\u516c\u5f0f\u5df2\u7ecf\u5728\u8bb8\u591a\u8bba\u6587\u4e2d\u4f7f\u7528\u3002\n\u5728\u8fd9\u4e2a\u516c\u5f0f\u4e2d\uff0c\u6587\u672c\u4e2d\u7684\u5355\u8bcd\u88ab\u968f\u673a\u63a9\u853d\uff0c\u4efb\u52a1\u662f\u9884\u6d4b\u5b83\u4eec\u3002\u4e0e\u81ea\u56de\u5f52\u516c\u5f0f\u76f8\u6bd4\uff0c\u5728\u9884\u6d4b\u63a9\u853d\u8bcd\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u524d\u4e00\u4e2a\u8bcd\u548c\u4e0b\u4e00\u4e2a\u8bcd\u7684\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e2a\u516c\u5f0f\u5df2\u7ecf\u5728\u4f2f\u7279\u3001\u7f57\u4f2f\u5854\u548c\u963f\u5c14\u4f2f\u7279\u7684\u8bba\u6587\u4e2d\u4f7f\u7528\u8fc7\u3002\u4e0e\u81ea\u56de\u5f52\u516c\u5f0f\u76f8\u6bd4\uff0c\u5728\u8fd9\u9879\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u53ea\u9884\u6d4b\u4e86\u63a9\u853d\u8bcd\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u56e0\u6b64\u4ece\u6bcf\u53e5\u8bdd\u4e2d\u5b66\u5230\u7684\u4e1c\u897f\u7684\u91cf\u8981\u4f4e\u5f97\u591a\u3002\n\u5728\u8fd9\u4e2a\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u53d6\u4e00\u4e2a\u6587\u6863\u4e2d\u5b58\u5728\u7684\u4e24\u4e2a\u8fde\u7eed\u53e5\u5b50\u548c\u540c\u4e00\u6587\u6863\u6216\u4e0d\u540c\u6587\u6863\u4e2d\u968f\u673a\u4f4d\u7f6e\u7684\u53e6\u4e00\u4e2a\u53e5\u5b50\u3002\u7136\u540e\uff0c\u4efb\u52a1\u662f\u5bf9\u4e24\u4e2a\u53e5\u5b50\u662f\u5426\u53ef\u4ee5\u76f8\u7ee7\u8fdb\u884c\u5206\u7c7b\u3002\u5728BERT\u7684\u8bba\u6587\u4e2d\uff0c\u5b83\u88ab\u7528\u6765\u63d0\u9ad8\u4e0b\u6e38\u4efb\u52a1\u7684\u6027\u80fd\uff0c\u8fd9\u4e9b\u4efb\u52a1\u9700\u8981\u7406\u89e3\u53e5\u5b50\u5173\u7cfb\uff0c\u5982\u81ea\u7136\u8bed\u8a00\u63a8\u7406(NLI)\u548c\u95ee\u9898\u56de\u7b54\u3002\u7136\u800c\uff0c\u540e\u6765\u7684\u4f5c\u54c1\u5bf9\u5176\u6709\u6548\u6027\u63d0\u51fa\u4e86\u8d28\u7591\u3002\n\u5728\u8fd9\u4e2a\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u4ece\u6587\u6863\u4e2d\u63d0\u53d6\u6210\u5bf9\u7684\u8fde\u7eed\u53e5\u5b50\u3002\u8fd8\u521b\u5efa\u4e86\u53e6\u4e00\u5bf9\uff0c\u5176\u4e2d\u4e24\u4e2a\u53e5\u5b50\u7684\u4f4d\u7f6e\u4e92\u6362\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u5bf9\u4e00\u5bf9\u53e5\u5b50\u8fdb\u884c\u5206\u7c7b\uff0c\u770b\u770b\u5b83\u4eec\u7684\u987a\u5e8f\u662f\u5426\u6b63\u786e\u3002\n\u5728\u963f\u5c14\u4f2f\u7279\u7684\u8bba\u6587\u4e2d\uff0c\u5b83\u88ab\u7528\u6765\u53d6\u4ee3\u201c\u4e0b\u4e00\u53e5\u9884\u6d4b\u201d\u7684\u4efb\u52a1\u3002\nDeepMoji\u7684\u8bba\u6587\u4e2d\u4f7f\u7528\u4e86\u8fd9\u4e2a\u516c\u5f0f\uff0c\u5e76\u5229\u7528\u4e86\u6211\u4eec\u4f7f\u7528\u8868\u60c5\u7b26\u53f7\u6765\u8868\u8fbe\u6211\u4eec\u5728\u63a8\u7279\u4e0a\u53d1\u5e03\u7684\u4e8b\u60c5\u7684\u60c5\u611f\u7684\u60f3\u6cd5\u3002\u5982\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u63a8\u6587\u4e2d\u51fa\u73b0\u7684\u8868\u60c5\u7b26\u53f7\u4f5c\u4e3a\u6807\u7b7e\uff0c\u5e76\u5236\u5b9a\u4e00\u4e2a\u76d1\u7763\u4efb\u52a1\u6765\u9884\u6d4b\u7ed9\u5b9a\u6587\u672c\u65f6\u7684\u8868\u60c5\u7b26\u53f7\u3002DeepMoji\u7684\u4f5c\u8005\u4f7f\u7528\u8fd9\u4e2a\u6982\u5ff5\u5bf912\u4ebf\u6761\u63a8\u6587\u8fdb\u884c\u4e86\u6a21\u578b\u7684\u9884\u8bad\u7ec3\uff0c\u7136\u540e\u5728\u60c5\u7eea\u5206\u6790\u3001\u4ec7\u6068\u8bed\u97f3\u68c0\u6d4b\u548c\u4fae\u8fb1\u68c0\u6d4b\u7b49\u4e0e\u60c5\u611f\u76f8\u5173\u7684\u4e0b\u6e38\u4efb\u52a1\u4e0a\u5bf9\u5176\u8fdb\u884c\u4e86\u5fae\u8c03\u3002\n@misc{chaudhary2020sslnlp\uff0cTitle={NLP\u4e2d\u7684\u81ea\u6211\u76d1\u7763\u8868\u5f81\u5b66\u4e60}\uff0c\u4f5c\u8005={Amit Chaudhary}\uff0c\u5e74\u4efd=2020\u5e74\uff0c\u5907\u6ce8={\\url{https://amitness.com/2020/05/self-supervised-learning-nlp}}", "note_en": "While Computer Vision is making  amazing progress on self-supervised learning only in the last few years, self-supervised learning has been a first-class citizen in  NLP research for quite a while. Language Models have existed since the 90\u2019s even before the phrase \u201cself-supervised learning\u201d was termed. The Word2Vec paper from 2013 popularized this paradigm and the field has rapidly progressed applying these self-supervised methods across many\u00a0problems.\n At the core of these self-supervised methods lies a framing called \u201c pretext task\u201d that allows us to use the data itself to generate labels and use supervised methods to solve unsupervised problems. These are also referred to as \u201c auxiliary task\u201d or \u201c pre-training task\u201c. The representations learned by performing this task can be used as a starting point for our downstream supervised tasks.\n In this post, I will provide an overview of the various pretext tasks that researchers have designed to learn representations from text corpus without explicit data labeling. The focus of the article will be on the task formulation rather than the architectures implementing\u00a0them.\n   In this formulation, we take a small chunk of the text of a certain window size and our goal is to predict the center word given the surrounding words.   For example, in the below image, we have a window of size of one and so we have one word each on both sides of the center word. Using these neighboring words, we need to predict the center word.    This formulation has been used in the famous \u201c Continuous Bag of Words\u201d approach of the  Word2Vec\u00a0paper.\n  In this formulation, we take a span of the text of a certain window size and our goal is to predict the surrounding words given the center word.   This formulation has been implemented in the famous \u201c skip-gram\u201d approach of the  Word2Vec\u00a0paper.\n  In this formulation, we take three consecutive sentences and design a task in which given the center sentence, we need to generate the previous sentence and the next sentence. It is similar to the previous skip-gram method but applied to sentences instead of words.   This formulation has been used in the  Skip-Thought Vectors\u00a0paper.\n  In this formulation, we take large corpus of unlabeled text and setup a task to predict the next word given the previous words. Since we already know what word should come next from the corpus, we don\u2019t need manually-annotated labels.    For example, we could setup the task as left-to-right language modeling by predicting  next words given the previous words.   We can also formulate this as predicting the  previous words given the future words. The direction will be from right to left.\n This formulation has been used in many papers ranging from n-gram models to neural network models such as  Neural Probabilistic Language Model(Bengio et al., 2003) to   GPT.\n  In this formulation, words in a text are randomly masked and the task is to predict them. Compared to the auto-regressive formulation, we can use context from both previous and next words when predicting the masked word.    This formulation has been used in the   BERT,  RoBERTa and   ALBERT papers. Compared to the auto-regressive formulation, in this task, we predict only a small subset of masked words and so the amount of things learned from each sentence is\u00a0lower.\n  In this formulation, we take two consecutive sentences present in a document and another sentence from a random location in the same document or a different document.   Then, the task is to classify whether two sentences can come one after another or not.   It was used in the   BERT paper to improve performance on downstream tasks that requires an understanding of sentence relations such as Natural Language Inference( NLI) and Question Answering. However, later works have questioned its\u00a0effectiveness.\n  In this formulation, we take pairs of consecutive sentences from the document. Another pair is also created where the positions of the two sentences are interchanged.    The goal is to classify if a pair of sentences are in the correct order or not.\n It was used in the   ALBERT paper to replace the \u201cNext Sentence Prediction\u201d\u00a0task.\n  This formulation was used in the  DeepMoji paper and exploits the idea that we use emoji to express the emotion of the thing we are tweeting. As shown below, we can use the emoji present in the tweet as the label and formulate a supervised task to predict the emoji when given the text.    Authors of  DeepMoji used this concept to perform pre-training of a model on 1.2 billion tweets and then fine-tuned it on emotion-related downstream tasks like sentiment analysis, hate speech detection and insult\u00a0detection.\n   @misc{chaudhary2020sslnlp, title = {Self Supervised Representation Learning in NLP}, author = {Amit Chaudhary}, year = 2020, note = {\\url{https://amitness.com/2020/05/self-supervised-learning-nlp}}", "posttime": "2020-05-25 02:48:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u81ea\u7136\u8bed\u8a00,learning,\u4efb\u52a1", "title": "\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e2d\u7684\u81ea\u76d1\u7763\u5b66\u4e60", "title_en": "Self Supervised Learning in NLP", "transed": 1, "url": "https://amitness.com/2020/05/self-supervised-learning-nlp/", "via": "", "real_tags": ["\u81ea\u7136\u8bed\u8a00", "learning", "\u4efb\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "866341c003f833c38521cc731f538afa.jpg", "infoid": 1003550, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u5e03\u62c9\u5fb7\u00b7\u65af\u901a\u7684\u4e66\u201c\u4e07\u7269\u5546\u5e97\uff1a\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u4e0e\u4e9a\u9a6c\u900a\u65f6\u4ee3\u201d(The Everything Store\uff1aJeff Bezos and the Age of Amazon)\u7684\u5e8f\u8a00\u4e2d\uff0c\u65af\u901a\u63cf\u8ff0\u4e86\u4ed6\u57282011\u5e74\u4e0e\u8d1d\u4f50\u65af\u7684\u7b2c\u4e00\u6b21\u5bf9\u8bdd\uff0c\u5185\u5bb9\u662f\u60f3\u5199\u4e00\u672c\u5173\u4e8e\u4e9a\u9a6c\u900a\u5d1b\u8d77\u7684\u4e66\uff1a\n\u5728\u6211\u4eec\u8ba8\u8bba\u8fd9\u672c\u4e66\u7684\u4e00\u4e2a\u5c0f\u65f6\u63a5\u8fd1\u5c3e\u58f0\u65f6\uff0c\u8d1d\u4f50\u65af\u7528\u80f3\u818a\u8098\u524d\u503e\uff0c\u95ee\u9053\uff1a\u201c\u4f60\u6253\u7b97\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u53d9\u4e8b\u8c2c\u8bef\uff1f\u201d\n\u554a\uff0c\u662f\u7684\uff0c\u5f53\u7136\uff0c\u53d9\u8ff0\u8c2c\u8bef\u3002\u6709\u4e00\u9635\u5b50\uff0c\u6211\u7ecf\u5386\u4e86\u8fc7\u53bb20\u5e74\u6765\u6bcf\u4e2a\u4e9a\u9a6c\u900a\u5458\u5de5\u5728\u9762\u5bf9\u8fd9\u4f4d\u8d85\u7ea7\u806a\u660e\u7684\u8001\u677f\u51fa\u4e4e\u610f\u6599\u7684\u95ee\u9898\u65f6\u6240\u611f\u53d7\u5230\u7684\u90a3\u79cd\u6c57\u6d41\u6d43\u80cc\u7684\u6050\u614c\u60c5\u7eea\u3002\u8d1d\u4f50\u65af\u89e3\u91ca\u8bf4\uff0c\u53d9\u4e8b\u8c2c\u8bef\u662f\u7eb3\u897f\u59c6\u00b7\u5c3c\u53e4\u62c9\u65af\u00b7\u5854\u52d2\u5e03(Nassim Nicholas Taleb)\u57282007\u5e74\u51fa\u7248\u7684\u300a\u9ed1\u5929\u9e45\u300b(The Black Swan)\u4e00\u4e66\u4e2d\u521b\u9020\u7684\u4e00\u4e2a\u672f\u8bed\uff0c\u7528\u6765\u63cf\u8ff0\u4eba\u7c7b\u5982\u4f55\u4ece\u751f\u7269\u5b66\u4e0a\u503e\u5411\u4e8e\u5c06\u590d\u6742\u7684\u73b0\u5b9e\u53d8\u6210\u4ee4\u4eba\u5b89\u6170\u4f46\u8fc7\u4e8e\u7b80\u5355\u5316\u7684\u6545\u4e8b\u3002\u5854\u52d2\u5e03\u8ba4\u4e3a\uff0c\u4eba\u7c7b\u5927\u8111\u7684\u5c40\u9650\u6027\u5bfc\u81f4\u6211\u4eec\u4eba\u7c7b\u503e\u5411\u4e8e\u5c06\u4e0d\u76f8\u5173\u7684\u4e8b\u5b9e\u548c\u4e8b\u4ef6\u538b\u7f29\u5230\u56e0\u679c\u65b9\u7a0b\u5f0f\u4e2d\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u8f6c\u6362\u6210\u6613\u4e8e\u7406\u89e3\u7684\u53d9\u8ff0\u3002\u5854\u52d2\u5e03\u5199\u9053\uff0c\u8fd9\u4e9b\u6545\u4e8b\u4fdd\u62a4\u4eba\u7c7b\u4e0d\u53d7\u4e16\u754c\u771f\u6b63\u7684\u968f\u673a\u6027\u3001\u4eba\u7c7b\u7ecf\u5386\u7684\u6df7\u4e71\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u4e5f\u4e0d\u53d7\u5f71\u54cd\u6240\u6709\u6210\u529f\u548c\u5931\u8d25\u7684\u4ee4\u4eba\u4e0d\u5b89\u7684\u8fd0\u6c14\u56e0\u7d20\u7684\u5f71\u54cd\u3002\n\u8d1d\u4f50\u65af\u8868\u793a\uff0c\u4e9a\u9a6c\u900a\u7684\u5d1b\u8d77\u53ef\u80fd\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u6781\u5176\u590d\u6742\u7684\u6545\u4e8b\u3002\u5bf9\u4e8e\u67d0\u4e9b\u4ea7\u54c1\u662f\u5982\u4f55\u53d1\u660e\u7684\uff0c\u6bd4\u5982\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1(Amazon Web Services)\uff0c\u6ca1\u6709\u7b80\u5355\u7684\u89e3\u91ca\u3002\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u662f\u4e9a\u9a6c\u900a\u7684\u5f00\u521b\u6027\u4e91\u4e1a\u52a1\uff0c\u73b0\u5728\u6709\u8fd9\u4e48\u591a\u5176\u4ed6\u4e92\u8054\u7f51\u516c\u53f8\u4f7f\u7528\u5b83\u6765\u8fd0\u8425\u4e1a\u52a1\u3002\u201c\u5f53\u4e00\u5bb6\u516c\u53f8\u60f3\u51fa\u4e00\u4e2a\u70b9\u5b50\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u6df7\u4e71\u7684\u8fc7\u7a0b\u3002\u6ca1\u6709\u7075\u5149\u4e00\u73b0\u7684\u65f6\u523b\uff0c\u201c\u8d1d\u4f50\u65af\u8bf4\u3002\u4ed6\u62c5\u5fc3\uff0c\u5c06\u4e9a\u9a6c\u900a\u7684\u6545\u4e8b\u7b80\u5316\u4e3a\u7b80\u5355\u7684\u53d9\u8ff0\u53ef\u80fd\u4f1a\u7ed9\u4eba\u4e00\u79cd\u6e05\u6670\u7684\u5370\u8c61\uff0c\u800c\u4e0d\u662f\u771f\u5b9e\u7684\u4e1c\u897f\u3002", "note_en": "In the prologue to Brad Stone\u2019s book,  The Everything Store: Jeff Bezos and the Age of Amazon, Stone describes his first conversation in 2011 with Bezos about wanting to write a book about the rise of Amazon:\n Toward the end of the hour we spent discussing the book, Bezos leaned forward on his elbows and asked, \u201cHow do you plan to handle the narrative fallacy?\u201d\n Ah yes, of course, the narrative fallacy. For a moment, I experienced the same sweaty surge of panic every Amazon employee over the past two decades has felt when confronted with an unanticipated question from the hyperintelligent boss. The narrative fallacy, Bezos explained, was a term coined by Nassim Nicholas Taleb in his 2007 book  The Black Swan to describe how humans are biologically inclined to turn complex realities into soothing but oversimplified stories. Taleb argued that the limitations of the human brain resulted in our species\u2019 tendency to squeeze unrelated facts and events into cause-and-effect equations and then convert them into easily understood narratives. These stories, Taleb wrote, shield humanity from the true randomness of the world, the chaos of human experience, and, to some extent, the unnerving element of luck that plays into all successes and failures.\n Bezos was suggesting that Amazon\u2019s rise might be that sort of impossibly complex story. There was no easy explanation for how certain products were invented, such as Amazon Web Services, its pioneering cloud business that so many other Internet companies now use to run their operations. \u201cWhen a company comes up with an idea, it\u2019s a messy process. There\u2019s no aha moment,\u201d Bezos said. Reducing Amazon\u2019s story to a simple narrative, he worried, could give the  impression of clarity rather than the real thing.", "posttime": "2020-05-25 02:47:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8d1d\u4f50\u65af,\u53d9\u4e8b,bezos,\u4eba\u7c7b", "title": "\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u8c08\u5199\u4f5c\u548c\u53d9\u4e8b\u8c2c\u8bef(2018)", "title_en": "Jeff Bezos talks about writing and the narrative fallacy (2018)", "transed": 1, "url": "https://jacklimpert.com/2018/04/jeff-bezos-talks-about-writing-and-the-narrative-fallacy/", "via": "", "real_tags": ["\u8d1d\u4f50\u65af", "\u53d9\u4e8b", "bezos", "\u4eba\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "963859ba2fe9868605321da5adccef43.jpeg", "infoid": 1003549, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u96c6\u7fa4\u5185\u7684\u5b89\u5168\u901a\u4fe1\u914d\u7f6eKubernetes\u5b89\u5168\u6027\u53ef\u80fd\u975e\u5e38\u4ee4\u4eba\u56f0\u60d1\u3002\u6731\u8389\u5a05\u00b7\u57c3\u6587\u65af(Julia Evans)\u5728\u5979\u7684\u535a\u5ba2\u4e2d\u5199\u9053\uff1a\n\u5404\u79cdKubernetes\u7ec4\u4ef6\u90fd\u6709\u5927\u91cf\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u653e\u7f6e\u8bc1\u4e66/\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u3002\u5f53\u6211\u4eec\u8bbe\u7f6e\u96c6\u7fa4\u65f6\uff0c\u6211\u611f\u89c9\u8bc1\u4e66\u3001\u5bc6\u94a5\u548c\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u6709\u5927\u7ea6100\u4ebf\u4e2a\u4e0d\u540c\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u6211\u4e0d\u660e\u767d\u5b83\u4eec\u662f\u5982\u4f55\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u3002\nKube API\u670d\u52a1\u5668-\u8d1f\u8d23\u7fa4\u96c6\u7684\u6574\u4f53\u529f\u80fd\u5e76\u4e0e\u7528\u6237\u4ea4\u4e92\u3002\u8fd9\u57fa\u672c\u4e0a\u662f\u60a8\u7fa4\u96c6\u7684\u63a7\u5236\u4e2d\u5fc3\u3002\n\u5176\u4e2dAPI\u670d\u52a1\u3001kubelet\u548cetcd\u662f\u6700\u5173\u952e\u7684\u7ec4\u4ef6\u3002\u5047\u8bbePod\u9700\u8981\u8bc1\u4e66\uff0c\u5b83\u5c06\u4e0ekubelet\u901a\u4fe1\uff0c\u7136\u540ekubelet\u5c06\u4e0eAPI\u670d\u52a1\u5668\u901a\u4fe1\u4ee5\u8bbf\u95ee\u5b58\u50a8\u5728etcd\u4e2d\u7684\u8bc1\u4e66\u3002\n\u4e0e\u4e3b\u670d\u52a1\u5668\u7684\u6240\u6709\u901a\u4fe1\u90fd\u901a\u8fc7API\u670d\u52a1\u5668\u8fdb\u884c\u3002\u540c\u6837\uff0c\u4e0eWorker\u8282\u70b9\u7684\u6240\u6709\u901a\u4fe1\u90fd\u901a\u8fc7kubelet\u8fdb\u884c\u3002etcd\u4fdd\u5b58\u96c6\u7fa4\u7684\u6240\u6709\u91cd\u8981\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u4e0eetcd\u901a\u4fe1\u7684\u4e1c\u897f\u90fd\u5e94\u8be5\u5f97\u5230\u5f88\u597d\u7684\u4fdd\u62a4\u3002\nAPI\u670d\u52a1\u5668\u4e0ekubelet\u901a\u4fe1\u4ee5\u83b7\u53d6\u65e5\u5fd7\uff0c\u4ece\u7528\u6237\u63a5\u6536\u914d\u7f6e\uff0c\u5e76\u4e0ekubelet\u901a\u4fe1\u4ee5\u4f7f\u5176\u6210\u4e3a\u73b0\u5b9e\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4eceAPI\u670d\u52a1\u5668\u5230kubelet\u7684\u901a\u4fe1\u662f\u901a\u8fc7\u672a\u7ecf\u9a8c\u8bc1\u7684TLS\u8fdb\u884c\u7684\u3002\u8fd9\u4f7f\u5f97\u5728\u4e0d\u53d7\u4fe1\u4efb\u7684\u7f51\u7edc\u4e0a\u8fd0\u884c\u7fa4\u96c6\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u8fd9\u79cd\u901a\u4fe1\u5bb9\u6613\u53d7\u5230\u4e2d\u95f4\u4eba(\u6216\u5973\u4eba)\u7684\u653b\u51fb\u3002\u5982\u679c\u60a8\u5728\u60a8\u7684\u79c1\u6709\u7f51\u7edc\u4e0a\u8fd0\u884c\uff0c\u8fd9\u79cd\u884c\u4e3a\u5e94\u8be5\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u613f\u610f\uff0c\u53ef\u4ee5\u4f7f\u7528\u201ckubelet-Certificate-Authority\u201d\u6807\u5fd7\u6765\u9a8c\u8bc1kubelet\u7684\u670d\u52a1\u5668\u8bc1\u4e66\u3002\u6ce8SSH\u96a7\u9053\u5df2\u5f03\u7528\uff0c\u56e0\u6b64\u4e0d\u518d\u662f\u63a8\u8350\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f8b\u5982\u5f53\u4e00\u4e2a\u65b0\u8282\u70b9\u8054\u673a\uff0c\u5e76\u4e14\u8be5\u8282\u70b9\u9700\u8981\u4e00\u4e2a\u65b0\u8bc1\u4e66\u6765\u4e0eAPI\u670d\u52a1\u5668\u901a\u4fe1\u65f6\u3002API\u670d\u52a1\u5668\u6709\u4e00\u4e2aKubernetes API\uff0c\u5b83\u53ef\u4ee5\u8ba9\u60a8\u83b7\u5f97\u7531\u60a8\u53ef\u4ee5\u63a7\u5236\u7684CA\u7b7e\u540d\u7684TLS\u8bc1\u4e66\u3002\n\u8bf7\u6c42\u4f7f\u7528\u76f8\u4e92TLS\u548cAPI\u670d\u52a1\u5668\u5728\u7aef\u53e3443\u4e0a\u4fa6\u542c\u3002\u56e0\u6b64\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e3b\u670d\u52a1\u5668\u53ef\u4ee5\u5728\u4e0d\u53d7\u4fe1\u4efb\u7684\u7f51\u7edc\u4e0a\u8fd0\u884c\u3002\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u60a8\u9700\u8981\u4e3akubelet\u8bc1\u4e66\u8bbe\u7f6e\u8bc1\u4e66\u8f6e\u6362\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u7684\u6709\u6548\u671f\u4e3a1\u5e74\u3002\n\u6b64\u901a\u4fe1\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6cd5\u53d6\u51b3\u4e8e\u60a8\u7684\u9700\u8981\u3002\u6709\u51e0\u4e2a\u9009\u9879\uff0c\u4f8b\u5982\uff1a\n\u5982\u679c\u7279\u5b9a\u8282\u70b9\u6216Pod\u5411kubelet\u8bf7\u6c42\u8bc1\u4e66\uff0ckubelet\u5411API\u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42\uff0c\u7136\u540eAPI\u670d\u52a1\u5668\u4eceetcd\u83b7\u53d6\u8bc1\u4e66\uff0c\u5219\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\n\u4e0eetcd\u7684\u901a\u4fe1\u901a\u8fc7\u7aef\u53e380\u4e0a\u7684\u672c\u5730\u4e3b\u673a\u8fdb\u884c\uff0c\u5e76\u4e14\u672a\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u6216\u52a0\u5bc6\u3002\u60a8\u5e94\u8be5\u4e3a\u901a\u4fe1\u7684\u8fd9\u4e00\u90e8\u5206\u8bbe\u7f6eTLS\uff0c\u4ee5\u4fbf\u901a\u8fc7\u6307\u5b9a\u6807\u5fd7\u201cetcd-certfile\u201d\u5411etcd\u670d\u52a1\u5668\u9a8c\u8bc1etcd\u5b9e\u4f8b\u7684\u8eab\u4efd\u3002\netcd\u7684\u5b9e\u4f8b\u5df2\u7ecf\u901a\u8fc7\u76f8\u4e92TL\u8fdb\u884c\u901a\u4fe1\uff0c\u56e0\u6b64\u96c6\u7fa4\u7684\u8fd9\u4e00\u90e8\u5206\u5728\u4e0d\u53d7\u4fe1\u4efb\u7684\u7f51\u7edc\u4e0a\u8fd0\u884c\u4e5f\u5e94\u8be5\u662f\u5b89\u5168\u7684\u3002\n\u5982\u60a8\u6240\u77e5\uff0c\u4e0d\u540c\u8282\u70b9\u6216\u76f8\u540c\u8282\u70b9\u4e2d\u7684Pod\u4e4b\u95f4\u65e0\u9700NAT\u7684\u65e0\u7f1d\u901a\u4fe1\u662fKubernetes\u7ec4\u7f51\u7684\u57fa\u672c\u539f\u5219\u4e4b\u4e00\u3002\u6240\u4ee5\u8fd9\u662f\u53e6\u4e00\u6761\u91cd\u8981\u7684\u6c9f\u901a\u9014\u5f84\u3002\n\u76ee\u524d\uff0c\u6b64\u901a\u4fe1\u672a\u52a0\u5bc6\u4e14\u672a\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5176\u66f4\u5b89\u5168\uff0c\u4f8b\u5982\u4f7f\u7528\u4e00\u4e9b\u7f51\u7edc\u7b56\u7565\u63d0\u4f9b\u5546\uff0c\u5982Tigera\u7684Calico\u6216Cilium\u6765\u4fdd\u62a4\u670d\u52a1\u5230\u670d\u52a1\u7684\u6d41\u91cf\u3002\u81f3\u5c11\uff0c\u5f3a\u70c8\u5efa\u8bae\u6839\u636e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u67d0\u4e9b\u7f51\u7edc\u7b56\u7565\u63d0\u4f9b\u7a0b\u5e8f\u3002\n\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u50cfIstio\u8fd9\u6837\u7684\u670d\u52a1\u7f51\u683c\u6765\u5bf9\u670d\u52a1\u4e4b\u95f4\u7684\u6d41\u91cf\u5b9e\u65bd\u76f8\u4e92TLS\u3002\u4ec5\u4f7f\u7528\u6574\u4e2a\u670d\u52a1\u7f51\u683c\u6765\u5b9e\u65bd\u670d\u52a1\u5230\u670d\u52a1\u901a\u4fe1\u4e4b\u95f4\u7684\u76f8\u4e92TLS\u4f3c\u4e4e\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u76f8\u540c\u670d\u52a1\u7684\u7f51\u7edc\u7b56\u7565\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u800c\u4e0d\u9700\u8981\u5728\u6bcf\u4e2aPod\u524d\u9762\u4f7f\u7528\u4ee3\u7406\u3002\n\u8fd9\u91cc\u63a8\u8350\u7684\u4e00\u4ef6\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\u662fPod\u5b89\u5168\u7b56\u7565\u3002\u5c06\u5728\u53e6\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8be6\u7ec6\u8bf4\u660e\u8fd9\u4e00\u70b9\u3002\n\u8fd9\u6761\u6c9f\u901a\u8def\u5f84\u975e\u5e38\u5173\u952e\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u5b8c\u6574\u7684\u5e16\u5b50\u3002\n\u8fd9\u79cd\u7c7b\u578b\u7684\u901a\u4fe1\u662f\u901a\u8fc7\u7eafHTTP\u5b8c\u6210\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u79cd\u7c7b\u578b\u7684\u901a\u4fe1\u751a\u81f3\u4e0d\u5e94\u8be5\u76f4\u63a5\u53d1\u751f\u3002\n\u7528\u4e8e\u4fdd\u62a4\u4eceKube\u63a7\u5236\u5668\u7ba1\u7406\u5668\u5230API\u670d\u52a1\u5668\u7684\u901a\u4fe1\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f7f\u7528\u7aef\u53e310259\u5e76\u4f7f\u7528HTTPS\u8eab\u4efd\u9a8c\u8bc1\u3002\u60a8\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u8be5\u9009\u9879\u548c\u8bb8\u591a\u5176\u4ed6\u9009\u9879\uff1a\n\u4eceKubernetes1.13\u5f00\u59cb\uff0c\u5b89\u5168\u7aef\u53e310259\u53ef\u4ee5\u7528\u4e8eKube-Scheduler\u5230api\u670d\u52a1\u5668\u7684\u5b89\u5168\u8fde\u63a5\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u786e\u4fdd\u8282\u70b9\u5230\u8282\u70b9\u7684\u901a\u4fe1\u4e5f\u4f7f\u7528\u8bc1\u4e66\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u8bc1\u4e66\u7b7e\u540dAPI\u3002\n\u5982\u679c\u60a8\u53d1\u73b0\u4e0a\u8ff0\u5185\u5bb9\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u5c06\u4e50\u610f\u6539\u6b63\uff0c\u6216\u8005\u5982\u679c\u60a8\u6709\u4efb\u4f55\u53cd\u9988\uff0c\u5e0c\u671b\u542c\u5230\u66f4\u591a\u4fe1\u606f\uff01", "note_en": "Configuring Kubernetes security for secure communication within the cluster can be very confusing.  Julia Evans on her blogpost about this:\n The various Kubernetes components have a TON of different places where you can put in a certificate/certificate authority. When we were setting up a cluster I felt like there were like 10 billion different command line arguments for certificates and keys and certificate authorities and I didn\u2019t understand how they all fit together.\n   Kube api server \u2014 responsible for the overall functioning of the cluster and interacting with the user. This is basically the control center of your cluster\n      Out of all of the above, the API service, kubelet and etcd are the most critical components. Let\u2019s say the pod needed a certificate, it would talk to the kubelet and then the kubelet would communicate with the API server to get access to the certificate stored in etcd.\n All communications with the master happen through the API server. Similarly all communications with the worker node happen through the kubelet. Etcd holds all the important information for your cluster. So anything communicating with etcd should be well protected.\n    The API server communicates with kubelet for things like fetching logs, takes in configuration from the user and communicates with the kubelet to make it a reality.\n By default, the communication from API server to kubelet is over unauthenticated TLS. This makes it unsafe to run the cluster over untrusted networks since this communication is susceptible to man (or woman) in the middle attacks. If you\u2019re running things on your private network, this behaviour should be acceptable. If you want, however, you can use the flag \u201ckubelet-certificate-authority\u201d to verify kubelet\u2019s server certificate. Note SSH tunneling is deprecated so that is no longer a recommended solution.\n   This would happen in cases such as when a new node comes online and that node will need a new certificate to communicate with the API server. The API server has a Kubernetes API that lets get TLS certs signed by a CA that you can control.\n Requests are using mutual TLS and API server listens on port 443. So by default, the master can run on untrusted networks.\n Another thing to note here is that you will need to setup certificate rotation for your kubelet certs. By default, they are issued with a 1 year expiration date.\n      The authentication method for this communication depends on your needs. There are several options such as:\n    This might happen in cases where a specific node or pod asks for a certificate from the kubelet, the kubelet makes a request to the API server and then the API server fetches it from etcd.\n The communication with etcd happens over localhost on port 80 and is not authenticated or encrypted. You should setup TLS for this part of the communication to verify identity of the etcd instance with the etcd server by specifying the flag \u201cetcd-certfile\u201d.\n        Instances of etcd communicate over mutual TLS already so this part of the cluster should also be safe to run on untrusted networks.\n   As you know, pods in different or same nodes communicating seamlessly with each other without NATing is one of the foundational principles of Kubernetes networking. So this is another important path of communication.\n Currently this communication is not encrypted and not authenticated. There are ways to make this more secure such as using some network policy provider like  Tigera\u2019s Calico or  Cilium to protect service to service traffic. At the very least, it is highly recommended to use some network policy provider based on your application.\n You can also use a service mesh like  Istio to enforce mutual TLS for traffic between services. Using a whole service mesh just to enforce mutual TLS between service to service communication might seem like a huge ask, so maybe use a network policy provider that provides the same without needing a proxy in front of every pod.\n One obvious thing to recommend here is Pod Security Policies. Will address this more in a separate blog post.\n This communication path is so critical this probably requires a whole post of its own.\n  This type of communication is done over plain HTTP but really this type of communication shouldn\u2019t even be happening directly.\n    for securing communication from the kube-controller-manager to API server. This uses port 10259 by default and uses HTTPS authentication. You can also set the option and many others:\n  Starting Kubernetes 1.13, secure port 10259 can be used for secure connections from kube-scheduler to api server.\n  You can use the same certificate signing API if you want to ensure node to node communication also uses certificates.\n    If you found any errors with the above, would love to rectify them, or if you any feedback, would love to hear more!", "posttime": "2020-05-25 02:47:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4fdd\u62a4,kubernetes,\u901a\u4fe1", "title": "\u901a\u8fc79\u4e2a\u7b80\u5355\u7684\u6b65\u9aa4\u4fdd\u62a4\u60a8\u7684Kubernetes\u7f51\u7edc", "title_en": "Secure your Kubernetes networking in 9 easy steps", "transed": 1, "url": "https://medium.com/p/secure-kubernetes-internal-networking-5f2556f7efde", "via": "", "real_tags": ["\u4fdd\u62a4", "\u901a\u4fe1"]}, {"category": "", "categoryclass": "", "imagename": "04916209e35ee80274c2c5ccaf2a5751.jpg", "infoid": 1003548, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51a0\u72b6\u75c5\u6bd2\u88ab\u63cf\u8ff0\u4e3a\u4e00\u79cd\u770b\u4e0d\u89c1\u7684\u6740\u624b\u3002\u8fd8\u6709\u4ec0\u4e48\u6bd4\u8fd9\u66f4\u53ef\u6015\u7684\u5462\uff1f\n\u56e0\u6b64\uff0c\u8bb8\u591a\u4eba\u5bb3\u6015\u5916\u51fa\uff0c\u5bb3\u6015\u6062\u590d\u6b63\u5e38\u751f\u6d3b\uff0c\u751a\u81f3\u5bb3\u6015\u8ba9\u5b69\u5b50\u4eec\u91cd\u8fd4\u6821\u56ed\uff0c\u8fd9\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\n\u4eba\u4eec\u60f3\u8981\u5b89\u5168\u3002\u4f46\u95ee\u9898\u662f\u6211\u4eec\u4e0d\u518d\u50cf\u4ee5\u524d\u90a3\u6837\u5b89\u5168\u4e86\u3002\n\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f\u4e00\u4e9b\u4eba\u8ba4\u4e3a\uff0c\u5728\u5b89\u5168\u5f97\u5230\u4fdd\u8bc1\u4e4b\u524d\uff0c\u9650\u5236\u63aa\u65bd\u9700\u8981\u7ee7\u7eed\u4e0b\u53bb\u3002\u4f46\u8fd9\u4e9b\u8bba\u70b9\u901a\u5e38\u5ffd\u7565\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u7ee7\u7eed\u8fd9\u6837\u505a\u672c\u8eab\u5c31\u6709\u98ce\u9669\u3002\n\u82f1\u56fd\u9996\u5e2d\u533b\u7597\u987e\u95ee\u514b\u91cc\u65af\u00b7\u5a01\u8482(Chris Witty)\u6559\u6388\u7ecf\u5e38\u5c06\u8fd9\u4e9b\u63cf\u8ff0\u4e3a\u6d41\u611f\u5927\u6d41\u884c\u7684\u95f4\u63a5\u6210\u672c\u3002\u8fd9\u4e9b\u95ee\u9898\u5305\u62ec\u4ece\u5176\u4ed6\u75be\u75c5\u96be\u4ee5\u83b7\u5f97\u533b\u7597\u4fdd\u5065\u5230\u7cbe\u795e\u75be\u75c5\u589e\u52a0\u3001\u7ecf\u6d4e\u56f0\u96be\u548c\u6559\u80b2\u53d7\u635f\u7b49\u65b9\u65b9\u9762\u9762\u3002\n\u56e0\u6b64\uff0c\u968f\u7740\u9650\u5236\u7684\u653e\u677e\uff0c\u793e\u4f1a\u548c\u4e2a\u4eba\u672c\u8eab\u5c06\u4e0d\u5f97\u4e0d\u5728\u5e73\u8861\u5404\u79cd\u76f8\u4e92\u7ade\u4e89\u7684\u98ce\u9669\u7684\u57fa\u7840\u4e0a\u505a\u51fa\u51b3\u5b9a\u3002\n\u7231\u4e01\u5821\u5927\u5b66(Edinburgh University)\u5168\u7403\u516c\u5171\u536b\u751f\u4e3b\u4efb\u5fb7\u7ef4\u00b7\u65af\u91cc\u8fbe\u5c14(Devi Sridhar)\u6559\u6388\u8868\u793a\uff0c\u6211\u4eec\u5e94\u8be5\u95ee\u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u662f\u5426\u8db3\u591f\u5b89\u5168\u3002\n\u6c38\u8fdc\u4e0d\u4f1a\u6ca1\u6709\u98ce\u9669\u3002\u5728\u4e00\u4e2a\u51a0\u72b6\u75c5\u6bd2\u4ecd\u7136\u5b58\u5728\u4e8e\u793e\u533a\u7684\u4e16\u754c\u91cc\uff0c\u5173\u952e\u662f\u6211\u4eec\u5982\u4f55\u964d\u4f4e\u8fd9\u79cd\u98ce\u9669\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u5176\u4ed6\u7c7b\u578b\u7684\u65e5\u5e38\u5371\u9669\u6240\u505a\u7684\u90a3\u6837\uff0c\u6bd4\u5982\u5f00\u8f66\u548c\u9a91\u81ea\u884c\u8f66\u3002\n\u5979\u6307\u7684\u662f\u5173\u4e8e\u5b66\u6821\u7684\u4e89\u5435\uff0c\u4f46\u8fd9\u4e2a\u6982\u5ff5\u540c\u6837\u53ef\u4ee5\u5e94\u7528\u4e8e\u8bb8\u591a\u5176\u4ed6\u60c5\u666f\u3002\n\u5979\u8bf4\uff0c\u8fd9\u4e2a\u7b49\u5f0f\u7684\u4e00\u90e8\u5206\u53d6\u51b3\u4e8e\u653f\u5e9c\u5728\u793e\u4f1a\u8ddd\u79bb\u3001\u63d0\u4f9b\u4fdd\u62a4\u8bbe\u5907\u548c\u68c0\u6d4b\u7684\u53ef\u7528\u6027\u7b49\u65b9\u9762\u91c7\u53d6\u7684\u63aa\u65bd\uff0c\u7136\u540e\u8ffd\u8e2a\u63a5\u89e6\u8005\u4ee5\u63a7\u5236\u5f53\u5730\u7684\u75ab\u60c5\u3002\u5979\u4e00\u76f4\u6279\u8bc4\u653f\u5e9c\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u7684\u65b9\u5f0f\u3002\n\u4f46\u968f\u7740\u66f4\u591a\u81ea\u7531\u7684\u56de\u5f52\uff0c\u4e2a\u4eba\u51b3\u7b56\u7684\u4f5c\u7528\u5c06\u66f4\u52a0\u7a81\u51fa\u3002\n\u8fd9\u53ef\u80fd\u4e0d\u662f\u4e3a\u4e86\u627e\u5230\u6b63\u786e\u7684\u9009\u62e9\uff0c\u800c\u662f\u4e3a\u4e86\u627e\u5230\u6700\u4e0d\u7cdf\u7cd5\u7684\u9009\u62e9\u3002\n\u5251\u6865\u5927\u5b66(Cambridge University)\u98ce\u9669\u4e13\u5bb6\u3001\u653f\u5e9c\u987e\u95ee\u3001\u7edf\u8ba1\u5b66\u5bb6\u6234\u7ef4\u00b7\u65af\u76ae\u683c\u54c8\u5c14\u7279\u7235\u58eb(Sir David Spiegelhalter)\u8868\u793a\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5df2\u7ecf\u53d8\u6210\u4e86\u4e00\u573a\u98ce\u9669\u7ba1\u7406\u7684\u6e38\u620f--\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u6211\u4eec\u9700\u8981\u63a7\u5236\u6211\u4eec\u9762\u4e34\u7684\u98ce\u9669\u7684\u5927\u5c0f\u3002\n\u6709\u4e24\u4e2a\u56e0\u7d20\u5f71\u54cd\u6211\u4eec\u9762\u4e34\u7684\u51a0\u72b6\u75c5\u6bd2\u98ce\u9669-\u6211\u4eec\u88ab\u611f\u67d3\u7684\u98ce\u9669\u548c\u4e00\u65e6\u611f\u67d3\uff0c\u6211\u4eec\u6b7b\u4ea1\u6216\u91cd\u75c5\u7684\u98ce\u9669\u3002\n\u5982\u679c\u6211\u4eec\u4e0d\u5728\u533b\u9662\u6216\u7597\u517b\u9662\uff0c\u6211\u4eec\u5bf9\u611f\u67d3\u98ce\u9669\u7684\u6700\u597d\u6307\u5357\u6765\u81ea\u56fd\u5bb6\u7edf\u8ba1\u5c40\u8fd0\u8425\u7684\u653f\u5e9c\u76d1\u6d4b\u9879\u76ee\u3002\n\u4e0e\u8fd9\u4e9b\u4eba\u4e2d\u7684\u4e00\u4e2a\u4eba\u4eb2\u5bc6\u63a5\u89e6\u7684\u673a\u4f1a\u88ab\u8ba4\u4e3a\u662f\u76f8\u5f53\u6e3a\u832b\u7684-\u5f53\u7136\uff0c\u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u7ec3\u4e60\u793e\u4ea4\u8ddd\u79bb\uff0c\u5373\u4f7f\u662f\u5728\u5916\u51fa\u548c\u56db\u5904\u8d70\u52a8\u7684\u65f6\u5019\u4e5f\u662f\u5982\u6b64\u3002\u4eba\u4eec\u5e0c\u671b\uff0c\u5982\u679c\u653f\u5e9c\u7684\u68c0\u6d4b\u3001\u8ddf\u8e2a\u548c\u8ffd\u8e2a\u8ba1\u5212\u4fdd\u6301\u5bf9\u75c5\u6bd2\u7684\u6291\u5236\uff0c\u611f\u67d3\u6c34\u5e73\u5c06\u4f1a\u53ca\u65f6\u8fdb\u4e00\u6b65\u964d\u4f4e\u3002\n\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u771f\u7684\u88ab\u611f\u67d3\u4e86\uff0c\u4e8b\u5b9e\u4ecd\u7136\u662f\uff0c\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u51a0\u72b6\u75c5\u6bd2\u662f\u4e00\u79cd\u8f7b\u5230\u4e2d\u5ea6\u7684\u75be\u75c5-\u6bcf20\u4e2a\u51fa\u73b0\u75c7\u72b6\u7684\u4eba\u4e2d\uff0c\u636e\u4fe1\u53ea\u6709\u4e00\u4e2a\u9700\u8981\u4f4f\u9662\u6cbb\u7597\u3002\n\u90a3\u4e9b\u6709\u65e2\u5f80\u5065\u5eb7\u72b6\u51b5\u7684\u4eba\u9762\u4e34\u7684\u98ce\u9669\u6700\u5927\u3002\u7814\u7a76\u663e\u793a\uff0c65\u5c81\u4ee5\u4e0b\u65e0\u75be\u75c5\u6b7b\u4ea1\u7684\u4eba\u975e\u5e38\u7f55\u89c1\u3002\n\u4e5f\u8bb8\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u95ee\u95ee\u81ea\u5df1\uff0c\u4f60\u5bf9\u672a\u676512\u4e2a\u6708\u5185\u6b7b\u4ea1\u7684\u60f3\u6cd5\u62c5\u5fc3\u5230\u4e86\u4ec0\u4e48\u7a0b\u5ea6\u3002\n\u51a0\u72b6\u75c5\u6bd2\u7684\u4e0d\u540c\u5bfb\u5e38\u4e4b\u5904\u5728\u4e8e\uff0c\u5982\u679c\u6211\u4eec\u88ab\u611f\u67d3\uff0c\u6211\u4eec\u6b7b\u4ea1\u7684\u673a\u4f1a\u4f3c\u4e4e\u53cd\u6620\u4e86\u6211\u4eec\u5728\u660e\u5e74\u6b7b\u4ea1\u7684\u53ef\u80fd\u6027\uff0c\u5f53\u7136\u662f\u5728\u6211\u4eec\u8d85\u8fc720\u5c81\u4e4b\u540e\u3002\n\u4f8b\u5982\uff0c40\u5c81\u7684\u666e\u901a\u4eba\u6d3b\u4e0d\u5230\u4e0b\u4e00\u4e2a\u751f\u65e5\u7684\u98ce\u9669\u7ea6\u4e3a\u5343\u5206\u4e4b\u4e00\uff0c\u800c\u65e0\u6cd5\u5728\u51a0\u72b6\u75c5\u6bd2\u611f\u67d3\u4e2d\u5e78\u5b58\u4e0b\u6765\u7684\u98ce\u9669\u51e0\u4e4e\u76f8\u540c\u3002\n\u8fd9\u5c31\u662f\u5e73\u5747\u98ce\u9669-\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u98ce\u9669\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u4e2a\u4f4e\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u98ce\u9669\u90fd\u662f\u7531\u6bcf\u4e2a\u5e74\u9f84\u6bb5\u7684\u5065\u5eb7\u72b6\u51b5\u4e0d\u4f73\u7684\u4eba\u627f\u62c5\u7684\u3002\n\u56e0\u6b64\uff0c\u51a0\u72b6\u75c5\u6bd2\u5b9e\u9645\u4e0a\u662f\u5728\u5229\u7528\u4efb\u4f55\u5f31\u70b9\uff0c\u5e76\u5c06\u5176\u653e\u5927\u3002\u8fd9\u5c31\u50cf\u5728\u77ed\u65f6\u95f4\u5185\u591a\u88c5\u4e86\u4e00\u5e74\u7684\u98ce\u9669\u3002\n\u5982\u679c\u4f60\u7684\u6b7b\u4ea1\u98ce\u9669\u4ece\u4e00\u5f00\u59cb\u5c31\u5f88\u4f4e\uff0c\u90a3\u4e48\u5b83\u4ecd\u7136\u975e\u5e38\u4f4e\u3002\n\u81f3\u4e8e\u513f\u7ae5\uff0c\u6b7b\u4e8e\u5176\u4ed6\u75be\u75c5\u7684\u98ce\u9669-\u764c\u75c7\u548c\u4e8b\u6545\u662f\u6700\u5927\u7684\u81f4\u6b7b\u539f\u56e0-\u6bd4\u4ed6\u4eec\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2\u7684\u6b7b\u4ea1\u51e0\u7387\u66f4\u5927\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5728\u5927\u6d41\u884c\u671f\u95f4\uff0c\u5df2\u67093\u540d15\u5c81\u4ee5\u4e0b\u513f\u7ae5\u6b7b\u4ea1\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6bcf\u5e74\u7ea6\u670950\u4eba\u6b7b\u4e8e\u4ea4\u901a\u4e8b\u6545\u3002\n\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u90fd\u8bd5\u56fe\u5e73\u8861\u98ce\u9669\u65f6\uff0c\u4f3c\u4e4e\u81f3\u5173\u91cd\u8981\u7684\u662f\u8bc6\u522b\u90a3\u4e9b\u6709\u4e25\u91cd\u75be\u75c5\u98ce\u9669\u7684\u4eba\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2-\u65e0\u8bba\u6211\u4eec\u81ea\u5df1\u662f\u5426\u5c5e\u4e8e\u8fd9\u4e9b\u7fa4\u4f53\u4e2d\u7684\u4e00\u5458\uff0c\u8fd8\u662f\u4e0e\u8fd9\u6837\u505a\u7684\u4eba\u8fdb\u884c\u5bc6\u5207\u63a5\u89e6\u3002\n\u76ee\u524d\u653f\u5e9c\u8981\u6c42250\u4e07\u4eba\u5b8c\u5168\u4e0e\u4e16\u9694\u7edd\u3002\u8fd9\u5305\u62ec\u63a5\u53d7\u8fc7\u5668\u5b98\u79fb\u690d\u3001\u6b63\u5728\u63a5\u53d7\u764c\u75c7\u6cbb\u7597\u548c\u60a3\u6709\u4e25\u91cd\u547c\u5438\u9053\u75be\u75c5\u7684\u4eba\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u8fd8\u67091000\u591a\u4e07\u4eba\u5c5e\u4e8e\u9ad8\u5371\u7fa4\u4f53\u3002\u8fd9\u4e9b\u4eba\u5305\u62ec\u6240\u670970\u5c81\u4ee5\u4e0a\u7684\u4eba\u548c\u5065\u5eb7\u72b6\u51b5\u4ece\u7cd6\u5c3f\u75c5\u5230\u5fc3\u810f\u75c5\u7684\u4eba\u3002\n\u725b\u6d25\u5927\u5b66(University Of Oxford)\u8001\u9f84\u95ee\u9898\u4e13\u5bb6\u8428\u62c9\u00b7\u54c8\u73c0(Sarah Harper)\u6559\u6388\u8ba4\u4e3a\uff0c\u7531\u4e8e\u8fd9\u4e00\u9ad8\u98ce\u9669\u7fa4\u4f53\u7684\u5b9e\u9645\u98ce\u9669\u6c34\u5e73\u5343\u5dee\u4e07\u522b\uff0c\u56e0\u6b64\u9700\u8981\u5168\u9762\u800c\u968f\u610f\u5730\u4f7f\u7528\u5e74\u9f84\u3002\n\u4f26\u6566\u5927\u5b66\u5b66\u9662(University College London)\u5f00\u53d1\u7684\u4e00\u79cd\u5de5\u5177\u8bd5\u56fe\u68b3\u7406\u51fa\u98ce\u9669\u65b9\u9762\u7684\u4e00\u4e9b\u5dee\u5f02\u3002", "note_en": "Coronavirus has been described as an invisible killer. What could be more terrifying than that?\n  It is unsurprising, therefore, that many people are fearful of going out, returning life to normal or even letting children go back to school.\n People want to be safe. But the problem is we are no longer as safe as we once were.\n    So what should we do? Some have argued restrictions need to continue until safety can be guaranteed. But those arguments generally ignore the fact that continuing to do so carries risk in itself.\n UK chief medical adviser Prof Chris Witty often describes these as the &#34;indirect costs&#34; of the pandemic. They include everything from poor access to healthcare for other conditions through to rises in mental illness, financial hardship and damage to education.\n So as restrictions ease, society and individuals themselves are going to have to make decisions based on balancing competing sets of risks.\n  Prof Devi Sridhar, chair of global public health at Edinburgh University, says the question we should be asking is whether we are &#34;safe enough&#34;.\n &#34;There will never be no risk. In a world where Covid-19 remains present in the community it&#39;s about how we reduce that risk, just as we do with other kinds of daily dangers, like driving and cycling.&#34;\n  She was referring to the row over schools, but the concept can equally be applied to many other scenarios.\n She says part of that equation depends on the steps taken by government on things such as social distancing, the provision of protective equipment and the availability of testing and then tracing of contacts to contain local outbreaks. She has been critical of the way the government has handled all of them.\n  But as more freedoms are returned, the role of individual decision-making will come more to the fore.\n It is perhaps not about finding the right option, rather finding the least worst option.\n Statistician Prof Sir David Spiegelhalter, an expert in risk from Cambridge University and government adviser, says it has, in effect, become a game of &#34;risk management&#34; - and because of that we need to get a handle on the magnitude of risk we face.\n There are two factors that influence the risk we face from coronavirus - our risk of becoming infected and, once infected, our risk of dying or becoming seriously ill.\n If we are not in hospital or a care home our best guide to the risk of infection comes from the government&#39;s surveillance programme run by the Office for National Statistics.\n   The chances of coming into close contact with one of those individuals - certainly as we are practising social distancing even when out and about - is considered to be pretty slim. And the hope is that level of infection will reduce even further in time if the government&#39;s test, track and trace programme keeps the virus suppressed.\n Then if we do become infected, the fact remains that for most people, coronavirus is a mild-to-moderate illness - only one in 20 people who shows symptoms is believed to need hospital treatment.\n  Those with pre-existing health conditions are most at risk. Deaths among under-65s with no illnesses are &#34;remarkably uncommon&#34;, research shows.\n Perhaps the easiest way is to ask yourself to what extent you are worried about the thought of dying in the next 12 months.\n What is remarkable about coronavirus is that if we are infected our chances of dying seems to mirror our chance of dying anyway over the next year, certainly once we pass the age of 20.\n  For example, an average person aged 40 has around a one-in-1,000 risk of not making it to their next birthday and an almost identical risk of not surviving a coronavirus infection.\n And that is the average risk - for most individuals the risk is actually lower than that as most of the risk is held by those who are in poor health in each age group.\n So coronavirus is, in effect, taking any frailties and amplifying them. It is like packing an extra year&#39;s worth of risk into a short period of time.\n If your risk of dying was very low in the first place, it still remains very low.\n As for children, the risk of dying from other things - cancer and accidents are the biggest cause of fatalities - is greater than their chance of dying if they are infected with coronavirus.\n During the pandemic so far three under 15s have died. That compares to around 50 killed in road accidents every year.\n  So what seems crucial as we all try to balance risks is identifying those at significant risk of serious illness from coronavirus - whether we fall into one of those groups ourselves or have close contact with someone who does.\n Currently the government is asking 2.5 million people to completely isolate themselves. This includes people who have had organ transplants, are having cancer treatment and those with severe respiratory disease.\n On top of those, there are more than 10 million people who fall into higher risk groups. These include all the over-70s and people with health conditions ranging from diabetes to heart conditions.\n Prof Sarah Harper, an expert in ageing at the University of Oxford, has argued the &#34;blanket and arbitrary use of age&#34; needs looking at as the actual level of risk within this higher risk group varies enormously.\n A  tool developed by University College London has attempted to tease out some of the differences in risk.", "posttime": "2020-05-25 02:31:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51a0\u72b6\u75c5\u6bd2,coronavirus,\u75c5\u6bd2,\u5e94\u8be5,\u98ce\u9669", "title": "\u51a0\u72b6\u75c5\u6bd2\uff1a\u6211\u4eec\u5e94\u8be5\u5bb3\u6015\u5230\u4ec0\u4e48\u7a0b\u5ea6\uff1f", "title_en": "Coronavirus: How scared should we be?", "transed": 1, "url": "https://www.bbc.com/news/health-52758024", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u5e94\u8be5", "\u98ce\u9669"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003547, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b83\u65e8\u5728\u6210\u4e3a\u4eba\u4eec\u8f6c\u6362\u6210Linux\u7b14\u8bb0\u672c\u7684\u4e2d\u6863Chromebook\u7684\u4e00\u4e2a\u5f15\u4eba\u6ce8\u76ee\u7684\u66ff\u4ee3\u54c1\u3002\u5b83\u5177\u6709IPS 1080p 14\u82f1\u5bf8LCD\u9762\u677f\u3001\u4f18\u8d28\u9541\u5408\u91d1\u5916\u58f3\u3001\u9ad8\u5bb9\u91cfeMMC\u5b58\u50a8\u300110,000 mAh\u5bb9\u91cf\u7535\u6c60\uff0c\u4ee5\u53ca\u53ea\u6709\u5f00\u6e90\u9879\u76ee\u624d\u80fd\u63d0\u4f9b\u7684\u6a21\u5757\u5316\u3002\n\u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1aRK3399 SOC\uff1b\u7528\u4e8e\u6570\u636e\u3001\u89c6\u9891\u8f93\u51fa\u548c\u7535\u6e90\u8f93\u5165(3A 5V)\u7684USB-C\uff1b\u7528\u4e8e\u9ea6\u514b\u98ce\u3001BT/WiFi\u6a21\u5757\u548c\u6444\u50cf\u5934\u7684\u9690\u79c1\u5f00\u5173\uff1b\u4ee5\u53ca\u901a\u8fc7NVMe(PCIe 4x)\u548c\u53ef\u9009\u9002\u914d\u5668\u8fdb\u884c\u6269\u5c55\u7684\u5b58\u50a8\u3002\nPinebook Pro\u914d\u59074 GB LPDDR4\u7cfb\u7edf\u5185\u5b58\u3001\u9ad8\u5bb9\u91cfeMMC\u95ea\u5b58\u548c128Mb SPI\u5f15\u5bfc\u95ea\u5b58\u3002I/O\u5305\u62ec\uff1a1x microSD\u5361\u8bfb\u5361\u5668(\u53ef\u5f15\u5bfc)\u30011x USB 2.0\u30011x USB 3.0\u30011x\u5e26DP 1.2\u548c\u7535\u6e90\u7684C\u578bUSB\u4e3b\u673a\u3001\u7528\u4e8eNVMe\u56fa\u6001\u786c\u76d8\u7684PCIe 4x(\u9700\u8981\u53ef\u9009\u9002\u914d\u5668)\u548cUART(\u901a\u8fc7\u8bbe\u7f6e\u5185\u90e8\u5f00\u5173\u7684\u8033\u673a\u63d2\u5b54)\u3002\n\u952e\u76d8\u548c\u89e6\u63a7\u677f\u90fd\u4f7f\u7528USB 2.0\u534f\u8bae\u3002\u6db2\u6676\u9762\u677f\u91c7\u7528EDP MIPI\u663e\u793a\u534f\u8bae\u3002\n\u8bb8\u591a\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf(OS)\u53ef\u4ee5\u4ece\u5f00\u653e\u6e90\u7801\u793e\u533a\u548c\u5408\u4f5c\u4f19\u4f34\u9879\u76ee\u4e2d\u514d\u8d39\u83b7\u5f97\u3002\u5176\u4e2d\u5305\u62ec\u5404\u79cd\u98ce\u683c\u7684Linux(Ubuntu\u3001Debian\u3001Manjaro\u7b49)\u3002\u548c*BSD\u3002\nPinebook Pro\u9644\u5e26\u7684\u9ed8\u8ba4\u64cd\u4f5c\u7cfb\u7edf\u662f\u5e26\u6709Mate\u684c\u9762\u7684Debian 9\u3002\u5b83\u662f\u7531\u540d\u4e3aMr FixIt2001\u7684\u793e\u533a\u5f00\u53d1\u4eba\u5458\u6784\u5efa\u7684\uff0c\u4ed6\u53ef\u4ee5\u5728PINE64\u8bba\u575b\u6216\u804a\u5929\u4e2d\u8054\u7cfb\u5230\u4ed6\u3002\u8be5\u7248\u672c\u7684\u6700\u65b0\u7248\u672c\u53ef\u4ee5\u76f4\u63a5\u4eceMr FixIt2001\uff1b\u7684GitHub\u4e0b\u8f7d\u3002\n\u60a8\u53ef\u4ee5\u66f4\u6539\u9ed8\u8ba4\u7684ROCK\u7528\u6237\u540d\u548cROCK\u4e3b\u76ee\u5f55\uff0c\u65b9\u6cd5\u662f\u767b\u5f55\u5230root(\u51ed\u636e\u6839/\u6839)\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684ROCK&#39\uff1b\u7528\u6237\uff0c\u5e76\u5728root\u7ec8\u7aef\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u7136\u540e\u7528\u6240\u9700\u7684\u7528\u6237\u540d\u66ff\u6362NewUser\uff1a\n\u4e00\u65e6\u60a8\u91cd\u65b0\u767b\u5f55\u5230\u60a8\u7684\u65b0\u7528\u6237\uff0c\u84dd\u7259\u5c06\u62b1\u6028\u6ca1\u6709\u4f20\u8f93\u6587\u4ef6\u5939\u4f4d\u7f6e\u3002\u8981\u4fee\u590d\u6b64\u6253\u5f00\u7684\u7ec8\u7aef\u5e76\u952e\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\u8be5\u7248\u672c\u5305\u62ec\u4e00\u4e2a\u81ea\u5b9a\u4e49\u66f4\u65b0\u7a0b\u5e8f\uff0c\u80fd\u591f\u66f4\u65b0uboot\u3001Linux\u5185\u6838\u548c\u8bb8\u591a\u8f6f\u4ef6\u5305\u3002\u53ef\u4ee5\u4ece\u7528\u6237\u7a7a\u95f4\u548c\u547d\u4ee4\u884c\u8fd0\u884c\u66f4\u65b0\u811a\u672c\u3002\u60a8\u4f1a\u5728\u5e95\u90e8\u9762\u677f\u7684\u65f6\u95f4\u548c\u65e5\u671f\u5c0f\u7a0b\u5e8f\u65c1\u8fb9\u627e\u5230\u4e00\u4e2a\u5c0f\u7684\u66f4\u65b0\u811a\u672c\u5c0f\u7a0b\u5e8f\u56fe\u6807\u3002\n\u6709\u5173\u9ed8\u8ba4\u64cd\u4f5c\u7cfb\u7edf\u6784\u5efa\u548c\u7248\u672c\u5386\u53f2\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u9ed8\u8ba4\u64cd\u4f5c\u7cfb\u7edf\u66f4\u65b0\u65e5\u5fd7PINE64\u8bba\u575b\u7ebf\u7a0b\u4e2d\u627e\u5230\u3002\n\u5728Pinebook Pro\u8f6f\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u6620\u50cf\u4e0b\u8f7d\u90e8\u5206\u4e0b\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u4e0ePinebook\u4ee5\u53ca\u5176\u4ed6\u76f8\u5173\u8f6f\u4ef6\u4e00\u8d77\u4f7f\u7528\u7684\u5f53\u524d\u652f\u6301\u7684\u64cd\u4f5c\u7cfb\u7edf\u6620\u50cf\u7684\u5b8c\u6574\u5217\u8868\u3002\n\u6ce8\u610f\uff1a\u4ece\u65e9\u671f\u7248\u672c\u7684Manjaro\u5347\u7ea7\u5230\u7248\u672c20.1\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u589e\u52a0\u80cc\u5149\uff0c\u56e0\u4e3a\u5185\u6838\u66dd\u5149\u7684\u80cc\u5149\u7684\u6b65\u6570\u4ece256\u66f4\u6539\u4e3a4096\u3002\n\u63d0\u4f9b\u7684\u4e00\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u6620\u50cf\u4ecd\u5904\u4e8e\u6d4b\u8bd5\u7248\u6216\u591c\u95f4\u6784\u5efa\u4e2d\uff0c\u4ec5\u9002\u5408\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\u3002\u6b63\u5e38\u4f7f\u7528\u65f6\u5e94\u907f\u514d\u4f7f\u7528\u8fd9\u4e9b\u56fe\u50cf-\u4f7f\u7528\u5b83\u4eec\u7684\u98ce\u9669\u81ea\u8d1f\u3002\nPinebook Pro\u6709\u4e24\u79cd\u952e\u76d8\u914d\u7f6e\uff1aISO\u548cANSI\u3002Pinebook Pro\u4e2d\u7684\u952e\u76d8\u548c\u89e6\u6478\u677f\u90fd\u4f7f\u7528USB2.0\u534f\u8bae\uff0c\u5e76\u5728xinput\u4e2d\u663e\u793a\u4e3aUSB2.0\u534f\u8bae\u3002\u952e\u76d8\u5177\u6709F\u952e\u884c\u4e2d\u7684\u529f\u80fd(Fn)\u952e\uff0c\u5305\u62ec\u663e\u793a\u4eae\u5ea6\u63a7\u5236\u3001\u97f3\u91cf\u3001\u89e6\u63a7\u677f\u9501\u5b9a\u548c\u5176\u4ed6\u529f\u80fd\u3002\u8fd8\u6709\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684PINE64\u5fbd\u6807\u952e\uff0c\u53ef\u7528\u4f5c\u83dc\u5355/\u8d85\u7ea7\u952e\u3002\u5b83\u8fd8\u5177\u6709\u8bbe\u7f6e\u9690\u79c1\u5f00\u5173\u7684\u8f85\u52a9\u529f\u80fd\u3002\n\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684\u5f00\u6e90\u5b9e\u7528\u7a0b\u5e8f\u4ece\u7528\u6237\u7a7a\u95f4\u5237\u65b0\u952e\u76d8\u56fa\u4ef6\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u82f1\u56fdISO\u5e03\u5c40\u6ca1\u6709\u5fb7\u8bed\u5143\u97f3(\uff1f\u3001\uff1f\u3001\u00dc\u7b49)\u7b49\u5b57\u7b26\u7684\u4e13\u7528\u952e\u3002\u67d0\u4e9b\u5b57\u7b26\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7ec4\u5408\u952e\u6216\u952e\u5e8f\u5217\u751f\u6210\u3002\n\u6709\u4e09\u4e2a\u9690\u79c1\u5f00\u5173\u6620\u5c04\u5230Pinebook Pro\u952e\u76d8\u4e0a\u7684F10\u3001F11\u548cF12\u952e\u3002\u5b83\u4eec\u505c\u7528/\u6fc0\u6d3b\u4ee5\u4e0b\u5404\u9879\uff1a\nCAPS LOCK\u548cNUM LOCK LED\u4e00\u8d77\u95ea\u70c1\u30022\u6b21\u95ea\u70c1=\u542f\u7528\uff0c3\u6b21\u95ea\u70c1=\u7981\u7528\u3002\n\u952e\u76d8\u4f7f\u7528\u72ec\u7acb\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u7684\u7279\u6b8a\u56fa\u4ef6\u3002\u5b83\u4f1a\u68c0\u6d4b\u662f\u5426\u6309\u4e0b\u4e86F10\u3001F11\u6216F12\u952e\u4ee5\u53caPine\u952e3\u79d2\u3002\u8fd9\u4f1a\u901a\u8fc7\u5207\u65ad\u5916\u56f4\u8bbe\u5907\u7684\u7535\u6e90\u6765\u7981\u7528\u4e0a\u9762\u5217\u51fa\u7684\u5916\u56f4\u8bbe\u5907\u3002\u8fd9\u4e0e\u7528\u7269\u7406\u5f00\u5173\u5207\u65ad\u6bcf\u4e2a\u5916\u56f4\u8bbe\u5907\u7684\u7535\u6e90\u5177\u6709\u76f8\u540c\u7684\u7ed3\u679c\u3002\u6b64\u5b9e\u73b0\u975e\u5e38\u5b89\u5168\uff0c\u56e0\u4e3a\u51b3\u5b9a\u5916\u56f4\u8bbe\u5907\u662f\u5426\u901a\u7535\u7684\u56fa\u4ef6\u4e0d\u662fPinebook Pro\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u65e0\u6cd5\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8986\u76d6\u6216\u8bbf\u95ee\u6bcf\u4e2a\u5916\u56f4\u8bbe\u5907\u7684\u7535\u6e90\u72b6\u6001\u503c\u3002\u6bcf\u4e2a\u5916\u56f4\u8bbe\u5907\u7684\u7535\u6e90\u72b6\u6001\u8bbe\u7f6e\u90fd\u4f1a\u5728\u91cd\u65b0\u542f\u52a8\u65f6\u5b58\u50a8\u3002\n\u89e6\u63a7\u677f\u7684\u5927\u5c0f\u5408\u7406\uff0c\u6709\u4e00\u4e2a\u54d1\u5149\u8868\u9762\uff0c\u53ef\u4ee5\u8ba9\u4f60\u7684\u624b\u6307\u5f88\u5bb9\u6613\u5730\u6ed1\u52a8\uff0c\u8fd8\u6709\u4e24\u4e2a\u542f\u52a8\u6309\u94ae\u3002\u5b83\u662fPinebook Pro\u7684\u552f\u4e00\u7ec4\u4ef6\uff0c\u7528\u575a\u56fa\u7684\u80f6\u5e26\u56fa\u5b9a\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u3002\u5b83\u652f\u6301\u591a\u70b9\u89e6\u63a7\u529f\u80fd\u3002\u89e6\u63a7\u677f\u7684\u6587\u6863\u53ef\u4ee5\u5728\u7ec4\u4ef6\u548c\u5916\u56f4\u8bbe\u5907\u7684\u6570\u636e\u8868\u4e2d\u627e\u5230\u3002\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684\u5f00\u6e90\u5b9e\u7528\u7a0b\u5e8f(https://github.com/ayufan-rock64/pinebook-pro-keyboard-updater).)\u4ece\u7528\u6237\u7a7a\u95f4\u5237\u65b0\u89e6\u63a7\u677f\u56fa\u4ef6\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u6bcf\u4e2a\u62e5\u67092019\u5e74\u751f\u4ea7\u7684Pinebook Pro\u7684\u4eba\u90fd\u5e94\u8be5\u66f4\u65b0\u4ed6\u4eec\u7684\u952e\u76d8\u548c\u89e6\u63a7\u677f\u56fa\u4ef6\u3002\n\u4f60\u7684Pinebook Pro\u5e94\u8be5\u5145\u6ee1\u7535\uff0c\u6216\u8005\u6700\u597d\u662f\u901a\u7535\u3002\u8be5\u5b9e\u7528\u7a0b\u5e8f\u5c06\u5728\u952e\u76d8\u548c\u89e6\u6478\u677f\u4e0a\u5199\u5165\u82af\u7247\uff0c\u56e0\u6b64\u5728\u66f4\u65b0\u7684\u4efb\u4f55\u9636\u6bb5\u65ad\u7535\u90fd\u53ef\u80fd\u5bfc\u81f4\u89e6\u6478\u677f\u6216\u952e\u76d8\u65e0\u6cd5\u4fee\u590d\u7684\u635f\u574f\u3002\n\u8fd9\u4e9b\u811a\u672c\u5e94\u8be5\u5de5\u4f5c\u5728\u6240\u6709\u53ef\u4f9bPinebook Pro\u4f7f\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002\u4f46\u662f\uff0c\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u76f8\u5173\u7684\u4f9d\u8d56\u9879\u3002\nPinebook Pro\u6709\u4e24\u4e2a\u952e\u76d8\u7248\u672c\uff0cISO\u548cANSI\u3002\u5728\u8fd0\u884c\u66f4\u65b0\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u77e5\u9053\u60a8\u4f7f\u7528\u7684\u662f\u54ea\u79cd\u578b\u53f7\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u4e24\u4e2a\u578b\u53f7\u7684\u56fa\u4ef6\u66f4\u65b0\u6b65\u9aa4\u3002\n\u6ce8\u610f\uff1a\u5728ANSI\u952e\u76d8\u578b\u53f7\u4e0a\u8fd0\u884cSTEP-1\u5c06\u5bfc\u81f4\u5728\u8fd0\u884cSTEP-2\u4e4b\u524d\u65e0\u6cd5\u8bbf\u95ee\u952e\u76d8\u548c\u89e6\u63a7\u677f\uff0c\u56e0\u6b64\u5fc5\u987b\u8fde\u63a5\u5916\u90e8\u952e\u76d8\u624d\u80fd\u5b8c\u6210\u6b64\u578b\u53f7\u7684\u66f4\u65b0\uff01\n\u5b8c\u6210\u540e\uff0c\u5982\u679c\u67d0\u4e9b\u952e\u4ea7\u751f\u4e0d\u6b63\u786e\u7684\u5b57\u7b26\uff0c\u8bf7\u68c0\u67e5\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u8bed\u8a00\u8bbe\u7f6e\u3002\u5bf9\u4e8eANSI\u7528\u6237\uff0c\u9ed8\u8ba4\u64cd\u4f5c\u7cfb\u7edf\u9644\u5e26\u82f1\u8bedUK\u4f5c\u4e3a\u9ed8\u8ba4\u8bed\u8a00\u3002\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u66f4\u6539\u4e3a\u201c\u7f8e\u56fd\u82f1\u8bed\u201d\u3002\n\u4e00\u4e9b\u8bba\u575b\u6210\u5458\u53d1\u73b0\uff0c\u5bf9X-Windows\u7684\u8c03\u6574\u5c06\u5141\u8bb8\u5728\u89e6\u6478\u677f\u4e0a\u8fdb\u884c\u66f4\u7cbe\u7ec6\u7684\u8fd0\u52a8\u3002\u5982\u679c\u60a8\u4f7f\u7528Synaptic\u9f20\u6807/\u89e6\u6478\u677f\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8bf7\u4f7f\u7528\u6b64\u547d\u4ee4\u4f7f\u66f4\u6539\u751f\u6548\uff1b\n\u60a8\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u4e0d\u540c\u7684\u8bbe\u7f6e\uff0c\u4f46\u6d4b\u8bd5\u7ed3\u679c\u663e\u793a0.25\u7684\u8bbe\u7f6e\u6709\u660e\u663e\u7684\u5e2e\u52a9\u3002\u8981\u4f7f\u66f4\u6539\u5728\u91cd\u65b0\u542f\u52a8\u540e\u4fdd\u6301\u4e0d\u53d8\uff0c\u8bf7\u66f4\u6539\u6587\u4ef6/etc/x11/xorg.conf\uff0c\u5982\u4e0b\u6240\u793a\uff1b\n\u7b2c&#34\uff1bInputClass&#34\uff1bIdentifier&#34\uff1bTouchPad catchall&#34\uff1bDriver&#34\uff1bSynaptics&#34\uff1bMatchIsTouchpad&#34\uff1bon&#34\uff1bMatchDevicePath&#34\uff1b/dev/input/event*&#34\uff1bOption&#34\uff1bMinSpeed&#34\uff1b&#34\uff1b0.25&#34\uff1bEndSection\u3002\n\u884c\u9009\u9879&#34\uff1bMinSpeed&#34\uff1b&#34\uff1b0.25&#34\uff1b\u5c31\u662f\u66f4\u6539\u3002\u53e6\u4e00\u4f4d\u8bba\u575b\u7528\u6237\u5728\u4e0a\u8ff0\u8bbe\u7f6e\u7684\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u4e9b\u6539\u8fdb\uff0c\u5e76\u53d1\u73b0\u8fd9\u4e9b\u8bbe\u7f6e\u975e\u5e38\u597d\uff1a\nFingerLow\u5728\u4e00\u4e2a\u914d\u7f6e(30)\u4e2d\u4e0eFingerHigh\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\u5b83\u88ab\u8ba4\u4e3a\u6709\u52a9\u4e8e\u51cf\u5c11\u4f60\u4e3e\u8d77\u624b\u6307\u65f6\u7684\u9f20\u6807\u79fb\u52a8\uff0c\u4f46\u5b83\u4e0d\u786e\u5b9a\u7a81\u89e6\u662f\u5426\u50cf\u8fd9\u6837\u5de5\u4f5c\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u914d\u7f6e\u5728\u65e5\u5e38\u4f7f\u7528\u4e2d\u5f88\u8212\u670d\u3002\n\u7528\u4e24\u4e2a\u624b\u6307\u5728\u89e6\u63a7\u677f\u4e0a\u8f7b\u6572\u6765\u6a21\u62df\u9f20\u6807\u53f3\u952e\u5355\u51fb\u3002\u5982\u679c\u60a8\u89c9\u5f97\u54cd\u5e94\u4e0d\u592a\u7075\u654f\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u6b64\u503c\uff1a\n\u3002Pinebook Pro\u4e0a\u603b\u5171\u6709\u56db\u4e2aLED\uff0c\u5176\u4e2d\u4e09\u4e2a\u653e\u5728\u952e\u76d8\u7684\u5de6\u4e0a\u89d2\uff0c\u4e00\u4e2a\u653e\u5728\u6876\u53e3\u9644\u8fd1\uff1a\n1.\u6876\u53e3\u65c1\u7684\u7ea2\u8272LED\u6307\u793a\u6b63\u5728\u5145\u7535\u3002\u5b83\u5c06\u7167\u4eae\u7535\u6e90\u4f55\u65f6\u4ece\u6807\u51c6\u7535\u6e90\u5355\u5143\u6216USB-C\u667a\u80fd\u624b\u673a\u5145\u7535\u5668\u4f9b\u7535\u7ed9Pinebook Pro\u3002\n2.Pinebook Pro\u4e0a\u7684\u7535\u6e90\u6307\u793a\u706f\u652f\u6301\u4e09\u79cd\u4e0d\u540c\u7684\u989c\u8272\uff1a\u7eff\u8272\u3001\u7425\u73c0\u8272\u548c\u7ea2\u8272\u3002\u5b83\u8fd8\u80fd\u591f\u95ea\u70c1/\u95ea\u70c1\u4ee5\u6307\u793a\u6d3b\u52a8\u3002\u5728\u9ed8\u8ba4\u7684Debian with Mate Build\u4e2d\uff0c\u7eff\u8272LED\u8868\u793a\u901a\u7535\uff0c\u7ea2\u8272\u8868\u793a\u6302\u8d77(\u7425\u73c0\u8272\u672a\u4f7f\u7528)\u3002\n(Num\u548cCaps\u9501\u5b9aLED\u5177\u6709\u6b21\u8981\u529f\u80fd\u3002\u5f53\u9690\u79c1\u5f00\u5173\u88ab\u6fc0\u6d3b\u65f6\uff0c\u5b83\u4eec\u4f1a\u95ea\u70c1\u4ee5\u786e\u8ba4\u5f00\u5173\u5df2\u88ab\u6fc0\u6d3b\u3002)\u3002\n\u867d\u7136\u6709\u4eba\u8bf4\u4e00\u4e9bPinebook Pro\u5355\u5143\u53ea\u5305\u542b\u4e00\u4e2a\u9ea6\u514b\u98ce\uff0c\u5c3d\u7ba1\u5916\u58f3\u4e0a\u6709\u4e24\u4e2a\u6807\u8bb0\u7684\u9ea6\u514b\u98ce\u5b54\uff0c\u4f46\u5176\u4ed6\u5355\u5143\u786e\u5b9e\u5305\u542b\u4e24\u4e2a\u9ea6\u514b\u98ce\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u54ea\u4e9b\u6279\u6b21\u6709\u4efb\u4f55\u4e00\u79cd\u914d\u7f6e\uff1b\u6700\u521d\u76841000\u4e2a\u793e\u533a\u6279\u6b21(\u6700\u521d\u7684100\u4e2a\u5355\u4f4d\u4e4b\u540e)\u4e2d\u7684\u5355\u4f4d\u636e\u4fe1\u5305\u542b\u4e24\u4e2a\uff0c\u586b\u5145\u4e86\u4e24\u4e2a\u6807\u8bb0\u7684\u6d1e\u3002\n\u901a\u5411\u4e24\u4e2a\u9ea6\u514b\u98ce\u7684\u5bfc\u7ebf\u901a\u8fc7\u4e00\u4e2a\u767d\u8272\u5851\u6599\u5c0f\u63a5\u5934\u8fde\u63a5\u5230\u4e3b\u677f\uff0c\u8be5\u63a5\u5934\u76f4\u63a5\u9760\u8fd1\u952e\u76d8\u63a5\u53e3\u7684\u5e26\u72b6\u7535\u7f06\u8fde\u63a5\u70b9\u3002\n\u5982\u679cPayuControl\u8f93\u5165\u672a\u663e\u793a\u9ea6\u514b\u98ce\u6d3b\u52a8\uff0c\u8bf7\u5c1d\u8bd5Pinebook_Pro#Privacy_Switches\uff1b\u4e00\u65e6\u8bbe\u7f6e\u4e3aON\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1b\u5982\u679c\u4ecd\u672a\u4fee\u590d\u6b64\u95ee\u9898\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u68c0\u67e5\u9ea6\u514b\u98ce\u63a5\u5934\u662f\u5426\u5df2\u63d2\u5165(\u8bf7\u53c2\u9605Pinebook_Pro#Technical_Reference)\u3002\n\u4ece\u547d\u4ee4\u884c\u8fd0\u884calsamixer&&gt;\u6309F6\u5e76\u9009\u62e9es8316&&gt;\u6309F4\u8fdb\u5165\u6355\u83b7\u5c4f\u5e55&&gt;\u9009\u62e9\u6807\u8bb0\u4e3aADC&&gt;&&gt;\u7684\u6761\u5c06\u589e\u76ca\u589e\u52a0\u52300dB&&gt;\uff1b\u4f7f\u7528INPUT\u5c06\u9053\u8def\u63a7\u5236\u4e2d\u7684\u97f3\u9891\u914d\u7f6e\u6587\u4ef6\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a\u3002\u6b64\u5916\uff1a\u60a8\u53ef\u80fd\u9700\u8981\u4fee\u6539ADC PGA\u4ee5\u5c06\u7ea7\u522b\u8bbe\u7f6e\u4e3a\u60a8\u60f3\u8981\u7684\u7ea7\u522b\nPinebook Pro\u5305\u542b\u4e00\u4e2aAMPAK AP6256\u65e0\u7ebf\u6a21\u5757\uff0c\u53ef\u63d0\u4f9bWi-Fi(\u7b26\u5408IEEE 802.11ac)\u548c\u84dd\u7259(\u7b26\u5408\u84dd\u7259SIG\u7248\u672c5.0)\u3002\u8be5\u6a21\u5757\u5305\u542b\u4e00\u4e2aBroadcom\u6536\u53d1\u5668IC\uff0c\u636e\u4fe1\u662fBCM43456\uff0c\u4ee5\u53ca\u5141\u8bb8Wi-Fi\u548c\u84dd\u7259\u6a21\u5f0f\u5171\u4eab\u5355\u4e2a\u5929\u7ebf\u6240\u9700\u7684\u652f\u6301\u7535\u5b50\u8bbe\u5907\u3002\n\u65e0\u7ebf\u6a21\u5757\u4f7f\u7528\u4e09\u79cd\u63a5\u53e3\u7684\u7ec4\u5408\u4e0ePinebook Pro\u7684\u7247\u4e0a\u7cfb\u7edf\u8fde\u63a5\uff1a\u84dd\u7259\u529f\u80fd\u7531\u4e32\u884cUART\u548cPCM\u64cd\u4f5c\uff0c\u800cWi-Fi\u7ec4\u4ef6\u4f7f\u7528SDIO\u3002\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u8be5\u6a21\u5757\u7684\u84dd\u7259\u529f\u80fd\u662f\u5426\u53ef\u4ee5\u5728\u4e0d\u652f\u6301SDIO\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u4f7f\u7528\u3002\n\u8be5\u6a21\u5757\u7684\u5c04\u9891\u5929\u7ebf\u5f15\u811a\u901a\u8fc7\u4e00\u4e2a\u6807\u51c6\u7684Hirose u.FL\u8fde\u63a5\u5668\u66b4\u9732\u5728\u4e3b\u677f\u4e0a\uff0c\u901a\u8fc7\u4e00\u6761\u540c\u8f74\u9988\u7ebf\u5c06\u5176\u8fde\u63a5\u5230Pinebook Pro\u7535\u6c60\u53f3\u4e0a\u89d2\u9644\u8fd1\u7684\u4e00\u4e2a\u67d4\u6027\u7c98\u5408\u5929\u7ebf\u3002\u7531\u4e8e\u5c04\u9891\u8fde\u63a5\u5668\u6613\u788e\uff0c\u5bb9\u6613\u635f\u574f\uff0c\u63a5\u65ad\u65f6\u8981\u5c0f\u5fc3\u5904\u7406\uff0c\u4e0d\u80fd\u9891\u7e41\u91cd\u65b0\u8fde\u63a5\u3002\n\u636e\u62a5\u9053\uff0c\u5728\u957f\u65f6\u95f4\u7684\u9ad8\u541e\u5410\u91cf\u671f\u95f4\uff0c\u7279\u522b\u662f\u57282.4 GHz\u9891\u6bb5\uff0cWi-Fi\u6536\u53d1\u5668\u7684\u53ef\u9760\u6027\u5b58\u5728\u95ee\u9898\u3002\u867d\u7136\u539f\u56e0\u5c1a\u672a\u786e\u5b9a\uff0c\u4f46\u5207\u6362\u52305 GHz\u9891\u6bb5\u53ef\u80fd\u4f1a\u63d0\u9ad8\u7a33\u5b9a\u6027\u3002\n\u7531\u4e8e\u84dd\u7259\u6536\u53d1\u5668\u4e0e2.4 GHz Wi-Fi\u5171\u4eab\u5176\u9891\u8c31\u548c\u5929\u7ebf\uff0c\u56e0\u6b64\u540c\u65f6\u4f7f\u7528\u8fd9\u4e9b\u6a21\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u5e72\u6270\uff0c\u5c24\u5176\u662f\u5728\u901a\u8fc7\u84dd\u7259\u6536\u542c\u97f3\u9891\u65f6\u3002\u5982\u679c\u84dd\u7259\u97f3\u9891\u9891\u7e41\u4e2d\u65ad\uff0c\u5207\u6362\u52305 GHz\u9891\u6bb5-\u6216\u505c\u7528Wi-Fi-\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\n\u4f7f\u7528\u4e00\u4e2a\u7a7a\u95f4\u6d41\uff0cPinebook Pro\u4e0a\u7684Wi-Fi\u80fd\u591f\u8fbe\u5230\u6bcf\u79d2\u7ea6433\u5146\u6bd4\u7279\u7684\u6700\u5927\u6570\u636e\u4f20\u8f93\u901f\u7387\u3002\u6536\u53d1\u5668\u4e0d\u652f\u6301\u591a\u7a7a\u95f4\u6d41\u6216160-MHz\u901a\u9053\u5e26\u5bbd\u3002\nWi-Fi\u6536\u53d1\u5668\u652f\u63012.4 GHz\u9891\u6bb5\u4e0a\u8f83\u4f4e\u768413\u4e2a\u6807\u51c6\u4fe1\u9053\uff0c\u5e26\u5bbd\u4e3a20 MHz\u30025 GHz\u9891\u6bb5\u81f3\u5c11\u652f\u630124\u4e2a\u4fe1\u9053\uff0c\u9891\u7387\u8303\u56f4\u4e3a5180\u81f35320 MHz\u30015500\u81f35720 MHz\u548c5745\u81f35825 MHz\uff0c\u5e26\u5bbd\u4e3a20\u300140\u621680 MHz\u3002\n\u4e24\u4e2a\u9891\u6bb5\u7684\u6700\u5927\u63a5\u6536\u7075\u654f\u5ea6\u7ea6\u4e3a-92 dBm\u3002\u8be5\u63a5\u6536\u5668\u57282.4 GHz\u9891\u6bb5\u4e0a\u53ef\u4ee5\u5bb9\u5fcd\u4e0d\u8d85\u8fc7-20 dBm\u7684\u8f93\u5165\u5f3a\u5ea6\uff0c\u57285 GHz\u9891\u6bb5\u4e0a\u53ef\u4ee5\u5bb9\u5fcd\u4e0d\u8d85\u8fc7-30 dBm\u7684\u8f93\u5165\u5f3a\u5ea6\u3002\u5bf9\u4e8e\u4efb\u4e00\u9891\u6bb5\uff0c\u6700\u5927\u4f20\u8f93\u529f\u7387\u7ea6\u4e3a+15 dBm\uff0c\u57285 GHz\u9891\u6bb5\u7684\u8f83\u9ad8\u6570\u636e\u4f20\u8f93\u901f\u7387\u4e0b\u8fdb\u4e00\u6b65\u964d\u81f3\u7ea6+10 dBm\u3002\n\u501f\u52a9\u5f53\u524d\u53ef\u7528\u7684\u9a71\u52a8\u7a0b\u5e8f\u548c\u56fa\u4ef6\uff0cWi-Fi\u63a5\u53e3\u652f\u6301\u57fa\u7840\u8bbe\u65bd\u3001\u70b9\u5bf9\u70b9\u548c\u63a5\u5165\u70b9\u6a21\u5f0f\uff0c\u5e76\u5177\u6709\u4ee4\u4eba\u6ee1\u610f\u7684\u53ef\u9760\u6027\u3002\u76ee\u524d\u4e0d\u652f\u6301\u76d1\u89c6\u5668\u6a21\u5f0f\u3002Wi-Fi Direct\u529f\u80fd\u53ef\u80fd\u662f\u53ef\u7528\u7684\uff0c\u4f46\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u5982\u4f55\u5728Linux\u4e0b\u4f7f\u7528\u8fd9\u4e9b\u529f\u80fd\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8bf8\u5982iw\u4e4b\u7c7b\u7684Linux\u7528\u6237\u7a7a\u95f4\u5b9e\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u62a5\u544a\u6709\u5173\u65e0\u7ebf\u8bbe\u5907\u529f\u80fd\u7684\u4e0d\u51c6\u786e\u4fe1\u606f\u3002\u4ece\u4f9b\u5e94\u5546\u6570\u636e\u8868\u6216\u76f4\u63a5\u6d4b\u8bd5\u83b7\u5f97\u7684\u53c2\u6570\u503c\u5e94\u4f18\u5148\u4e8e\u786c\u4ef6\u67e5\u8be2\u5de5\u5177\u7684\u8f93\u51fa\u3002\n\u84dd\u7259\u6570\u636e\u4f20\u8f93\u901f\u5ea6\u6307\u793a\u7684\u6700\u5927\u901f\u7387\u4e3a\u6bcf\u79d23\u5146\u4f4d\uff0c\u4f46\u8fd8\u4e0d\u6e05\u695a\u9884\u671f\u7684\u5b9e\u9645\u6570\u636e\u901f\u7387\u662f\u591a\u5c11\u3002\u84dd\u7259\u4e0a\u7684\u97f3\u9891\u6d41\u8fd0\u884c\u6b63\u5e38\uff0c\u7f51\u7edc\u4e5f\u662f\u5982\u6b64\u3002\u84dd\u7259\u7684\u4f4e\u80fd\u8017\u529f\u80fd\uff0c\u4f8b\u5982\u4e0e\u84dd\u7259\u4fe1\u6807\u7684\u4ea4\u4e92\uff0c\u8fd8\u6ca1\u6709\u5f97\u5230\u6700\u7ec8\u7684\u6d4b\u8bd5\u3002\n\u84dd\u7259\u6536\u53d1\u5668\u652f\u6301\u6240\u670979\u4e2a\u4fe1\u9053\u5206\u914d\uff0c\u9891\u7387\u8303\u56f4\u4ece2402 MHz\u52302480 MHz\u3002\u63a5\u6536\u7075\u654f\u5ea6\u7ea6\u4e3a-85 dBm\uff0c\u6700\u5927\u53ef\u5bb9\u5fcd\u63a5\u6536\u5f3a\u5ea6\u4e3a-20 dBm\u3002\u84dd\u7259\u4f20\u8f93\u529f\u7387\u9650\u5236\u4e3a+10 dBm\u3002\n**\u8fd9\u4e0d\u80fd\u5728\u67d0\u4e9b\u53d1\u884c\u7248(\u4f8b\u5982Manjaro XFCE)\u4e0a\u6267\u884c\u60a8\u60f3\u8981\u7684\u64cd\u4f5c\u3002\u8bd5\u8bd5\u4e0b\u9762\u7684\u5427\u3002\n\u53f3\u952e\u5355\u51fb\u84dd\u7259\u9762\u677f\u56fe\u6807&&gt;\u9009\u62e9\u63d2\u4ef6&&gt;PowerManager&&gt;\u914d\u7f6e&&gt;\u53d6\u6d88\u9009\u62e9\u81ea\u52a8\u5f00\u673a\u9009\u9879\u3002\n\u4ee5\u4e0b\u662f\u5916\u90e8\u7aef\u53e3\u7684\u5217\u8868\u3002\u6709\u5173\u7aef\u53e3\u89c4\u683c\uff0c\u8bf7\u53c2\u9605\u6280\u672f\u53c2\u8003-\u6269\u5c55\u7aef\u53e3\u3002\n\u901a\u8fc7\u5c06UART\u5f00\u5173\u7ffb\u8f6c\u5230ON\u4f4d\u7f6e\u6765\u542f\u7528UART\u8f93\u51fa(\u9879\u76ee9)\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u60a8\u9700\u8981\u79fb\u9664Pinebook Pro\u7684\u5e95\u76d6-\u8bf7\u9075\u5faa\u6b63\u786e\u7684\u62c6\u5378\u548c\u91cd\u65b0\u7ec4\u88c5\u534f\u8bae\u3002OFF\u4f4d\u7f6e\u671d\u5411\u89e6\u6478\u677f\uff0cON\u4f4d\u7f6e\u671d\u5411\u663e\u793a\u5668\u94f0\u94fe\u3002\n\u5f53UART\u5f00\u5173\u5904\u4e8eON\u4f4d\u7f6e\u65f6\uff0c\u63a7\u5236\u53f0\u901a\u8fc7\u97f3\u9891\u63d2\u5b54\u4e2d\u7ee7\uff0c\u7b14\u8bb0\u672c\u7535\u8111\u7684\u58f0\u97f3\u5173\u95ed\u3002\u8bf7\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u662f3.3V\u63a5\u53e3(\u4f8b\u5982CH340\u3001FTDI-232R\u6216PL2303\uff0c\u67093.3V\u548c5V\u4e24\u79cd\u578b\u53f7\u51fa\u552e)\uff0c\u4ee5\u907f\u514d\u635f\u574fCPU\u3002\n\u5c06\u7535\u7f06\u7684USB\u63d2\u5934\u63d2\u5165\u5c06\u8fdb\u884c\u76d1\u63a7\u7684\u673a\u5668\u4e0a\u7684\u5f00\u653eUSB\u7aef\u53e3\u3002\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\u5982\u679c\u627e\u4e0d\u5230\u8be5\u7ebf\u8def\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u6e05\u6d01\u4e32\u884c\u7535\u7f06\u7684USB\u89e6\u70b9\u624d\u80fd\u83b7\u5f97\u826f\u597d\u7684\u8fde\u63a5\u3002\n\u4e32\u884c\u7535\u7f06\u7684\u97f3\u9891\u63d2\u5b54\u5e94\u5b8c\u5168\u63d2\u5165Pinebook Pro\u97f3\u9891\u7aef\u53e3\u3002", "note_en": "It is built to be a compelling alternative to mid-ranged Chromebooks that people convert into Linux laptops. It features an IPS 1080p 14\u2033 LCD panel, a premium magnesium alloy shell, high capacity eMMC storage, a 10,000 mAh capacity battery, and the modularity that only an open source project can deliver.\n Key features include: the RK3399 SOC; USB-C for data, video-out and power-in (3A 5V); privacy switches for the microphone, BT/WiFi module, and camera; and expandable storage via NVMe (PCIe 4x) with an optional adapter.\n The Pinebook Pro is equipped with 4GB LPDDR4 system memory, high capacity eMMC flash storage, and 128Mb SPI boot Flash. The I/O includes: 1x micro SD card reader (bootable), 1x USB 2.0, 1x USB 3.0, 1x USB type C Host with DP 1.2 and power-in, PCIe 4x for an NVMe SSD drive (requires an optional adapter), and UART (via the headphone jack by setting an internal switch).\n The keyboard and trackpad both use the USB 2.0 protocol. The LCD panel uses eDP MiPi display protocol.\n Many different Operating Systems (OS) are freely available from the open source community and partner projects. These include various flavors of Linux (Ubuntu, Debian, Manjaro, etc.) and *BSD.\n   The default Operating system that ships with the Pinebook Pro is Debian 9 with MATE desktop. It has been built by a community developer called MrFixIt2001, who can be reached on the PINE64 forum or in the chats. The newest release of the build can downloaded directly from  MrFixIt2001&#39;s GitHub.\n   You can change the default  rock username and  rock home directory by logging into root (credentials root/root) instead of the default &#39;rock&#39; user and running the following in root terminal and substituting desired username for NewUser:\n   Once you log back into your new user, Bluetooth will complain about no transfer folder location. To fix this open terminal and type:\n   The build includes a custom updater capable of updating uboot, the Linux kernel and numerous packages. The update script can be ran from both the userspace and the commandline. You will find a small &#39;Update Script&#39; applet icon in the bottom panel, next to time and date applet.\n   More information about the default OS build and version history can be found on the  Default OS update log PINE64 forum thread.\n  Under  &#39;Pinebook Pro Software and OS Image Download Section&#39; you will find a complete list of currently supported Operating System images that work with the Pinebook as well as other related software.\n       note: When upgrading from a prior release of Manjaro to version 20.1, you may need to increase the backlight as the number of steps for the backlight exposed by the kernel was changed from 256 to 4096\n            Some of the provided OS images are still in  beta or nightly build and only fit for testing purposes. These images ought to be avoided for normal usage - use them at  your own risk\n   The Pinebook Pro is available in two keyboard configurations: ISO and ANSI. Both the keyboard and trackpad in the Pinebook Pro use the USB 2.0 protocol and show up as such in xinput. The keyboard features function (Fn) keys in the F-key row, which include display brightness controls, sound volume, trackpad lock, and other functionality. There is also a custom PINE64 logo key that functions as Menu/Super key. It has also a secondary functionality for setting the privacy switches.\n The keyboard firmware binary can be flashed from userspace using the provided open source utility.\n   The  UK ISO Layout does not have dedicated keys for characters like the German umlauts (\u00c4,\u00d6,\u00dc, etc). Certain characters can still be generated by means of either key combinations or key sequences.\n   There are three privacy switches mapped to the F10, F11 and F12 keys on the Pinebook Pro keyboard. They de/activate the following:\n CAPs lock and NUM lock LEDs blink together. 2 blinks = enabled, 3 blinks = disabled\n  The keyboard uses special firmware that operates separately of the operating system. It detects if either the F10, F11 or F12 key, and the Pine key were pressed for 3 seconds. This disables the peripherals as listed above by cutting off their power. Which has the same result as cutting off the power to each peripheral with a physical switch. This implementation is very secure since the firmware that determines whether a peripheral gets power is not a part of the Pinebook Pro\u2019s operating system. So the power state value for each peripheral cannot be overridden or accessed from the operating system. The power state setting for each peripheral is stored across reboots.\n  The trackpad is a reasonable size, has a matte finish that that your finger can slide along easily, and two actuating buttons. It is the only component of the Pinebook Pro held in place with strong adhesive tape. It supports multi-touch functionality. Documentation for the trackpad can be found in  Datasheets for Components and Peripherals.The trackpad firmware binary can be flashed from userspace using the provided open source utility ( https://github.com/ayufan-rock64/pinebook-pro-keyboard-updater).\n Everyone with a Pinebook Pro produced in 2019 should update their keyboard and trackpad firmware.\n   Your Pinebook Pro should be either fully charged or, preferably, running of mains. This utility will be writing chips on the keyboard and trackpad, so a loss of power during any stage of the update can result in irrecoverable damage to your trackpad or keyboard.\n The scripts ought to work on all OSs available for the Pinebook Pro. Some OSs may, however, require installation of relevant dependencies.\n There are two keyboard versions of the Pinebook Pro, ISO and ANSI. You need to know which model you have prior to running the updater. FW update steps for both models are listed below.\n            NOTE: Running step-1 on the ansi keyboard model will make the keyboard and trackpad inaccessible until step-2 is run, so an external keyboard must be connected to complete the update on this model!\n       When done, if some of the keys produce in-correct characters, please check your OSes&#39; language settings. For ANSI users, the default OS shipped with English UK as the default language. You can change it to English US if desired.\n  Some forum members have found that an adjustment to X-Windows will allow finer motion in the trackpad. If you use the  Synaptic mouse/trackpad driver use this command to make the change live;\n  You may experiment with different settings, but 0.25 was tested as helping noticably.  To make the change persist across reboots, change the file  /etc/X11/xorg.conf similar to below;\n Section &#34;InputClass&#34; Identifier &#34;touchpad catchall&#34; Driver &#34;synaptics&#34; MatchIsTouchpad &#34;on&#34; MatchDevicePath &#34;/dev/input/event*&#34; Option &#34;MinSpeed&#34; &#34;0.25&#34; EndSection\n The line  Option &#34;MinSpeed&#34; &#34;0.25&#34; is the change.  Another forum user built on the above settings a little, and have found these to be very good:\n  FingerLow has the same value as &#39;FingerHigh&#39; in one config (30). It is believed to help reduce mouse movement as you lift your finger, but it&#39;s not sure if synaptic works like this.You may find this config to be comfortable for daily use.\n The  right mouse click is emulated by tapping with two fingers on the trackpad. If you feel that this is not very responsive you can try this value:\n .     In total there are four LEDs on the Pinebook Pro, three of which are placed in the top left side of the keyboard, and one near the barrel-port:\n 1. The red LED next to the barrel-port indicates charging. It will illuminate when mains power is supplied to the Pinebook Pro from either the standard power supply unit or a USB-C smartphone charger.\n 2. The power indicator LED on the Pinebook Pro supports three different colours: green, amber and red. It is also capable of flashing/blinking to indicate activity. In the default Debian with MATE build, green LED means power and red means suspend (amber is unused).\n   (The Num and Caps lock LEDs have a secondary function. When the privacy switches get activated they blink to confirm that switch has been activated.)\n     While it has been said that some Pinebook Pro units contain only one microphone despite having two labeled microphone holes on the outer casing, other units do indeed contain two microphones. It is presently unclear which batches have either configuration; units from the initial community batch of 1000 units (following the initial 100) are believed to contain two, populating both labeled holes.\n The wires leading to both microphones connect to the mainboard withd a small white plastic connector, located directly adjacent to the ribbon cable attachment point for the keyboard interface.\n   If pavucontrol input doesn&#39;t show microphone activity try the  Pinebook_Pro#Privacy_Switches; once that is set to on do the below; if that still hasn&#39;t fixed it you may want to check that the microphone connector is plugged in (see the  Pinebook_Pro#Technical_Reference).\n run alsamixer from the command line &gt; hit F6 and select the es8316 &gt; hit F4 to get to the capture screen &gt; select the bar labeled ADC &gt;&gt; increase the gain to 0dB &gt; change the audio profile in pavucontrol to another with inputAdditionally:you may want to modify ADC PGA to get the levels to where you want them\n    The Pinebook Pro contains an AMPAK AP6256 wireless module to provide Wi-Fi (compliant to IEEE 802.11ac) and Bluetooth (compliant to Bluetooth SIG revision 5.0). The module contains a Broadcom transceiver IC, believed to be the BCM43456, as well as the support electronics needed to allow the Wi-Fi and Bluetooth modes to share a single antenna.\n The wireless module interfaces with the Pinebook Pro\u2019s system-on-chip using a combination of three interfaces: Bluetooth functionality is operated by serial UART and PCM, while the Wi-Fi component uses SDIO. It is unknown if the module\u2019s Bluetooth capabilites are usable under operating systems that do not support SDIO.\n The module\u2019s RF antenna pin is exposed on the mainboard via a standard Hirose U.FL connector, where a coaxial feedline links it to a flexible adhesive antenna situated near the upper right corner of the Pinebook Pro\u2019s battery. As the RF connector is fragile and easily damaged, it should be handled carefully during connection and disconnection, and should not be reconnected frequently.\n  Problems have been reported with the Wi-Fi transceiver\u2019s reliability during extended periods of high throughput, especially on the 2.4 GHz band. While the cause of this has yet to be determined, switching to the 5 GHz band may improve stability.\n Since the Bluetooth transceiver shares both its spectrum and antenna with 2.4 GHz Wi-Fi, simultaneous use of these modes may cause interference, especially when listening to audio over Bluetooth. If Bluetooth audio cuts out frequently, switching to the 5 GHz band \u2013 or deactivating Wi-Fi \u2013 may help.\n  Wi-Fi on the Pinebook Pro is capable of reaching a maximum data transfer rate of approximately 433 megabits per second, using one spatial stream. The transceiver does not support multiple spatial streams or 160-MHz channel bandwidths.\n The Wi-Fi transceiver supports the lower thirteen standard channels on the 2.4 GHz band, using a bandwidth of 20 MHz. At least twenty-four channels are supported on the 5 GHz band, spanning frequencies from 5180 to 5320 MHz, 5500 to 5720 MHz, and 5745 to 5825 MHz, with bandwidths of 20, 40, or 80 MHz.\n Maximum reception sensitivity for both bands is approximately -92 dBm. The receiver can tolerate input intensities of no more than -20 dBm on the 2.4 GHz band, and no more than -30 dBm on the 5 GHz band. Maximum transmission power is approximately +15 dBm for either band, falling further to approximately +10 dBm at higher data transfer rates on the 5 GHz band.\n With current available drivers and firmware, the Wi-Fi interface supports infrastructure, ad-hoc, and access-point modes with satisfactory reliability. Monitor mode is not presently supported. Wi-Fi Direct features may be available, but it is unclear how to make use of them under Linux.\n Be aware that Linux userspace utilities, such as  iw, may report inaccurate information about the capabilities of wireless devices. Parameter values derived from vendor datasheets, or direct testing, should be preferred to the outputs of hardware-querying tools.\n  Bluetooth data transfer speeds have an indicated maximum of 3 megabits per second, but it is unclear what practical data rates can be expected. Audio streaming over Bluetooth is functioning normally, as is networking. Bluetooth Low-Energy functions, such as interacting with Bluetooth beacons, have not yet been tested conclusively.\n The Bluetooth transceiver supports all 79 channel allocations, spanning frequencies from 2402 MHz to 2480 MHz. Reception sensitivity is approximately -85 dBm, with a maximum tolerable reception intensity of -20 dBm. Bluetooth transmission power is limited to +10 dBm.\n    **This does not do what one might want on certain distros, Manjaro XFCE for example. Try the below.\n right click on the bluetooth panel icon &gt; select &#39;plugins&#39; &gt; PowerManager &gt; configuration &gt; deselect the auto power on option\n      Here are a list of the external ports. See  Technical Reference - Expansion Ports for port specifications.\n    UART output is enabled by flipping the UART switch to the ON position (item 9). To do so you need to remove the Pinebook Pro&#39;s bottom cover - please follow  proper disassembly and reassembly protocol. The OFF position is towards the touchpad, the ON position is towards the display hinges.\n With the UART switch in the ON position, console is relayed via the audiojack and the laptop&#39;s sound is turned OFF. Please ensure that you are using a 3.3v interface (such as the CH340, FTDI-232R, or PL2303, which are sold in both 3.3v and 5v variants) to avoid damage to the CPU.\n Insert the USB plug of the cable into an open USB port on the machine which will monitor. Run the following in a terminal:\n    You may have to clean the USB contacts of the Serial cable to get a good connection if you do not find that line.\n The audio jack of the Serial cable should be fully inserted into the Pinebook Pro audio port.", "posttime": "2020-05-25 02:31:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u7535\u8111,pro", "title": "PineBook Pro(\u5f00\u6e90ARM\u7b14\u8bb0\u672c\u7535\u8111)", "title_en": "PineBook Pro (open source ARM laptop)", "transed": 1, "url": "https://wiki.pine64.org/index.php/Pinebook_Pro", "via": "", "real_tags": ["\u5f00\u6e90", "\u7535\u8111", "pro"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003546, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "&lt\uff1b", "note_en": "&lt;\u0000h\u0000t\u0000m\u0000l\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000h\u0000e\u0000a\u0000d\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000t\u0000i\u0000t\u0000l\u0000e\u0000&gt;\u0000B\u0000o\u0000d\u0000y\u0000 \u0000a\u0000n\u0000d\u0000 \u0000V\u0000e\u0000h\u0000i\u0000c\u0000h\u0000l\u0000e\u0000 \u0000S\u0000c\u0000a\u0000n\u0000n\u0000e\u0000r\u0000s\u0000&lt;\u0000/\u0000t\u0000i\u0000t\u0000l\u0000e\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000/\u0000h\u0000e\u0000a\u0000d\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000b\u0000o\u0000d\u0000y\u0000 \u0000b\u0000g\u0000c\u0000o\u0000l\u0000o\u0000r\u0000=\u0000&#34;\u0000c\u0000c\u0000c\u0000f\u0000f\u0000&#34;\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000&lt;\u0000b\u0000&gt;\u0000&lt;\u0000f\u0000o\u0000n\u0000t\u0000 \u0000s\u0000i\u0000z\u0000e\u0000 \u0000=\u0000&#34;\u00006\u0000p\u0000t\u0000&#34;\u0000&gt;\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000B\u0000o\u0000d\u0000y\u0000 \u0000a\u0000n\u0000d\u0000 \u0000V\u0000e\u0000h\u0000i\u0000c\u0000l\u0000e\u0000 \u0000S\u0000c\u0000a\u0000n\u0000n\u0000e\u0000r\u0000s\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000/\u0000f\u0000o\u0000n\u0000t\u0000&gt;\u0000&lt;\u0000/\u0000b\u0000&gt;\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000I\u0000M\u0000G\u0000 \u0000S\u0000R\u0000C\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000.\u0000a\u0000s\u0000u\u0000.\u0000e\u0000d\u0000u\u0000/\u0000~\u0000a\u0000t\u0000p\u0000p\u0000r\u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000b\u0000o\u0000d\u0000y\u0000s\u0000c\u0000a\u0000n\u0000s\u0000l\u0000i\u0000d\u0000e\u00001\u0000.\u0000j\u0000p\u0000g\u0000&#34;\u0000 \u0000h\u0000e\u0000i\u0000g\u0000h\u0000t\u0000=\u00002\u00008\u00000\u0000 \u0000 \u0000w\u0000i\u0000d\u0000t\u0000h\u0000=\u00003\u00007\u00005\u0000&gt;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000\r\u0000\u0000&lt;\u0000I\u0000M\u0000G\u0000 \u0000S\u0000R\u0000C\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000.\u0000a\u0000s\u0000u\u0000.\u0000e\u0000d\u0000u\u0000/\u0000~\u0000a\u0000t\u0000p\u0000p\u0000r\u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000b\u0000o\u0000d\u0000y\u0000s\u0000c\u0000a\u0000n\u0000s\u0000l\u0000i\u0000d\u0000e\u00002\u0000.\u0000j\u0000p\u0000g\u0000&#34;\u0000 \u0000h\u0000e\u0000i\u0000g\u0000h\u0000t\u0000=\u00002\u00008\u00000\u0000 \u0000 \u0000w\u0000i\u0000d\u0000t\u0000h\u0000=\u00005\u00000\u00000\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000F\u0000i\u0000g\u0000u\u0000r\u0000e\u0000 \u00001\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000\r\u0000\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000\r\u0000\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000\r\u0000\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000\r\u0000\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000\r\u0000\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000&amp;\u0000n\u0000b\u0000s\u0000p\u0000;\u0000F\u0000i\u0000g\u0000u\u0000r\u0000e\u0000 \u00002\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000M\u0000a\u0000c\u0000h\u0000i\u0000n\u0000e\u0000s\u0000 \u0000b\u0000a\u0000s\u0000e\u0000d\u0000 \u0000o\u0000n\u0000 \u0000C\u0000o\u0000m\u0000p\u0000t\u0000o\u0000n\u0000 \u0000B\u0000a\u0000c\u0000k\u0000s\u0000c\u0000a\u0000t\u0000t\u0000e\u0000r\u0000i\u0000n\u0000g\u0000 \u0000a\u0000r\u0000e\u0000 \u0000n\u0000o\u0000w\u0000 \u0000b\u0000e\u0000i\u0000n\u0000g\u0000 \u0000u\u0000s\u0000e\u0000d\u0000 \u0000f\u0000o\u0000r\u0000 \u0000s\u0000c\u0000r\u0000e\u0000e\u0000n\u0000i\u0000n\u0000g\u0000 \u0000p\u0000e\u0000o\u0000p\u0000l\u0000e\u0000 \u0000a\u0000t\u0000 \u0000a\u0000i\u0000r\u0000p\u0000o\u0000r\u0000t\u0000s\u0000 \u0000(\u0000i\u0000t\u0000 \u0000s\u0000t\u0000a\u0000r\u0000t\u0000e\u0000d\u0000 \u0000i\u0000n\u0000 \u0000P\u0000h\u0000o\u0000e\u0000n\u0000i\u0000x\u0000!\u0000)\u0000 \u0000 \u0000(\u0000F\u0000i\u0000g\u0000 \u00001\u0000)\u0000 \u0000a\u0000n\u0000d\u0000 \u0000v\u0000e\u0000h\u0000i\u0000c\u0000l\u0000e\u0000s\u0000 \u0000a\u0000t\u0000 \u0000b\u0000o\u0000r\u0000d\u0000e\u0000r\u0000 \u0000c\u0000h\u0000e\u0000c\u0000k\u0000p\u0000o\u0000i\u0000n\u0000t\u0000s\u0000 \u0000(\u0000F\u0000i\u0000g\u0000 \u00002\u0000)\u0000.\u0000 \u0000T\u0000h\u0000e\u0000 \u0000m\u0000a\u0000n\u0000u\u0000f\u0000a\u0000c\u0000t\u0000u\u0000r\u0000e\u0000r\u0000s\u0000 \u0000c\u0000l\u0000a\u0000i\u0000m\u0000 \u0000t\u0000h\u0000a\u0000t\u0000 \u0000t\u0000h\u0000e\u0000 \u0000d\u0000o\u0000s\u0000e\u0000 \u0000f\u0000r\u0000o\u0000m\u0000 \u0000o\u0000n\u0000e\u0000 \u0000o\u0000f\u0000 \u0000t\u0000h\u0000e\u0000s\u0000e\u0000 \u0000s\u0000c\u0000r\u0000e\u0000e\u0000n\u0000i\u0000n\u0000g\u0000s\u0000 \u0000i\u0000s\u0000 \u0000l\u0000e\u0000s\u0000s\u0000 \u0000t\u0000h\u0000a\u0000n\u0000 \u00000\u0000.\u00002\u00005\u0000 \u0000&lt;\u0000f\u0000o\u0000n\u0000t\u0000 \u0000f\u0000a\u0000c\u0000e\u0000=\u0000&#34;\u0000s\u0000y\u0000m\u0000b\u0000o\u0000l\u0000&#34;\u0000&gt;\u0000m\u0000&lt;\u0000/\u0000f\u0000o\u0000n\u0000t\u0000&gt;\u0000S\u0000v\u0000.\u0000 \u0000E\u0000x\u0000a\u0000m\u0000i\u0000n\u0000a\u0000t\u0000i\u0000o\u0000n\u0000 \u0000o\u0000f\u0000 \u0000t\u0000h\u0000e\u0000 \u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000 \u0000t\u0000h\u0000a\u0000t\u0000 \u0000t\u0000h\u0000e\u0000y\u0000 \u0000p\u0000u\u0000b\u0000l\u0000i\u0000s\u0000h\u0000 \u0000a\u0000n\u0000d\u0000 \u0000s\u0000o\u0000m\u0000e\u0000 \u0000s\u0000i\u0000m\u0000p\u0000l\u0000e\u0000 \u0000P\u0000h\u0000y\u0000s\u0000i\u0000c\u0000s\u0000 \u0000b\u0000a\u0000s\u0000e\u0000d\u0000 \u0000o\u0000n\u0000 \u0000w\u0000e\u0000l\u0000l\u0000 \u0000k\u0000n\u0000o\u0000w\u0000n\u0000 \u0000s\u0000c\u0000a\u0000t\u0000t\u0000e\u0000r\u0000i\u0000n\u0000g\u0000 \u0000c\u0000r\u0000o\u0000s\u0000s\u0000 \u0000s\u0000e\u0000c\u0000t\u0000i\u0000o\u0000n\u0000s\u0000 \u0000s\u0000h\u0000o\u0000w\u0000s\u0000 \u0000t\u0000h\u0000a\u0000t\u0000 \u0000i\u0000t\u0000 \u0000i\u0000s\u0000 \u0000V\u0000E\u0000R\u0000Y\u0000 \u0000u\u0000n\u0000l\u0000i\u0000k\u0000e\u0000l\u0000y\u0000 \u0000t\u0000h\u0000a\u0000t\u0000 \u0000t\u0000h\u0000e\u0000 \u0000d\u0000o\u0000s\u0000e\u0000 \u0000i\u0000s\u0000 \u0000t\u0000h\u0000i\u0000s\u0000 \u0000l\u0000o\u0000w\u0000.\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000p\u0000&gt;\u0000&lt;\u0000b\u0000&gt;\u0000&lt;\u0000f\u0000o\u0000n\u0000t\u0000 \u0000s\u0000i\u0000z\u0000e\u0000=\u0000&#34;\u00004\u0000p\u0000t\u0000&#34;\u0000&gt;\u0000F\u0000r\u0000o\u0000m\u0000 \u0000T\u0000S\u0000A\u0000&lt;\u0000/\u0000f\u0000o\u0000n\u0000t\u0000&gt;\u0000&lt;\u0000/\u0000b\u0000&gt;\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000p\u0000&gt;\u0000&lt;\u0000f\u0000o\u0000n\u0000t\u0000 \u0000s\u0000i\u0000z\u0000e\u0000=\u0000&#34;\u00003\u0000p\u0000t\u0000&#34;\u0000&gt;\u0000&lt;\u0000f\u0000o\u0000n\u0000t\u0000 \u0000c\u0000o\u0000l\u0000o\u0000r\u0000=\u0000&#34;\u0000c\u0000c\u00006\u00006\u00000\u00000\u0000&#34;\u0000&gt;\u0000W\u0000h\u0000a\u0000t\u0000 \u0000i\u0000s\u0000 \u0000t\u0000h\u0000e\u0000 \u0000d\u0000i\u0000f\u0000f\u0000e\u0000r\u0000e\u0000n\u0000c\u0000e\u0000 \u0000b\u0000e\u0000t\u0000w\u0000e\u0000e\u0000n\u0000 \u0000b\u0000a\u0000c\u0000k\u0000s\u0000c\u0000a\u0000t\u0000t\u0000e\u0000r\u0000 \u0000x\u0000-\u0000r\u0000a\u0000y\u0000s\u0000 \u0000a\u0000n\u0000d\u0000 \u0000m\u0000e\u0000d\u0000i\u0000c\u0000a\u0000l\u0000 \u0000x\u0000-\u0000r\u0000a\u0000y\u0000s\u0000?\u0000&lt;\u0000b\u0000r\u0000/\u0000&gt;\u0000 \u0000A\u0000:\u0000 \u0000B\u0000a\u0000c\u0000k\u0000s\u0000c\u0000a\u0000t\u0000t\u0000e\u0000r\u0000 \u0000x\u0000-\u0000r\u0000a\u0000y\u0000s\u0000 \u0000o\u0000n\u0000l\u0000y\u0000 \u0000p\u0000e\u0000n\u0000e\u0000t\u0000r\u0000a\u0000t\u0000e\u0000 \u0000a\u0000p\u0000p\u0000r\u0000o\u0000x\u0000i\u0000m\u0000a\u0000t\u0000e\u0000l\u0000y\u0000 \u0000\u0000 \u0000o\u0000f\u0000 \u0000a\u0000n\u0000 \u0000i\u0000n\u0000c\u0000h\u0000 \u0000b\u0000e\u0000f\u0000o\u0000r\u0000e\u0000 \u0000t\u0000h\u0000e\u0000 \u0000r\u0000a\u0000y\u0000s\u0000 \u0000a\u0000r\u0000e\u0000 \u0000s\u0000c\u0000a\u0000t\u0000t\u0000e\u0000r\u0000e\u0000d\u0000,\u0000&lt;\u0000b\u0000r\u0000/\u0000&gt;\u0000 \u0000\r\u0000\u0000w\u0000h\u0000e\u0000r\u0000e\u0000a\u0000s\u0000 \u0000m\u0000e\u0000d\u0000i\u0000c\u0000a\u0000l\u0000 \u0000X\u0000-\u0000r\u0000a\u0000y\u0000s\u0000 \u0000t\u0000r\u0000a\u0000n\u0000s\u0000m\u0000i\u0000t\u0000 \u0000c\u0000o\u0000m\u0000p\u0000l\u0000e\u0000t\u0000e\u0000l\u0000y\u0000 \u0000t\u0000h\u0000r\u0000o\u0000u\u0000g\u0000h\u0000 \u0000t\u0000h\u0000e\u0000 \u0000b\u0000o\u0000d\u0000y\u0000.\u0000 \u0000\r\u0000\u0000&lt;\u0000/\u0000f\u0000o\u0000n\u0000t\u0000&gt;\u0000&lt;\u0000/\u0000f\u0000o\u0000n\u0000t\u0000&gt;\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000p\u0000&gt;\u0000R\u0000a\u0000p\u0000i\u0000s\u0000c\u0000a\u0000n\u0000 \u00005\u00000\u0000 \u0000k\u0000V\u0000p\u0000 \u0000 \u0000 \u00002\u00008\u0000k\u0000V\u0000 \u0000a\u0000v\u0000e\u0000r\u0000a\u0000g\u0000e\u0000,\u0000 \u0000A\u0000S\u0000 \u0000&amp;\u0000 \u0000E\u0000 \u00001\u00002\u00005\u0000 \u0000k\u0000V\u0000p\u0000 \u00006\u00000\u0000 \u0000k\u0000V\u0000 \u0000a\u0000v\u0000e\u0000r\u0000a\u0000g\u0000e\u0000,\u0000\r\u0000\u0000Z\u0000 \u0000P\u0000o\u0000r\u0000t\u0000a\u0000l\u0000 \u0000 \u0000 \u00004\u00005\u00000\u0000 \u0000k\u0000V\u0000p\u0000 \u0000 \u00002\u00000\u00000\u0000 \u0000k\u0000V\u0000 \u0000a\u0000v\u0000e\u0000r\u0000a\u0000g\u0000e\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000I\u0000M\u0000G\u0000 \u0000S\u0000R\u0000C\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000.\u0000a\u0000s\u0000u\u0000.\u0000e\u0000d\u0000u\u0000/\u0000~\u0000a\u0000t\u0000p\u0000p\u0000r\u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000b\u0000o\u0000d\u0000y\u0000s\u0000c\u0000a\u0000n\u0000s\u0000l\u0000i\u0000d\u0000e\u00003\u0000.\u0000j\u0000p\u0000g\u0000&#34;\u0000 \u0000h\u0000e\u0000i\u0000g\u0000h\u0000t\u0000=\u00002\u00008\u00000\u0000 \u0000 \u0000w\u0000i\u0000d\u0000t\u0000h\u0000=\u00003\u00007\u00005\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000T\u0000h\u0000e\u0000y\u0000 \u0000u\u0000s\u0000e\u0000 \u0000a\u0000n\u0000 \u0000e\u0000f\u0000f\u0000e\u0000c\u0000t\u0000i\u0000v\u0000e\u0000 \u0000d\u0000o\u0000s\u0000e\u0000 \u0000a\u0000v\u0000e\u0000r\u0000a\u0000g\u0000e\u0000s\u0000 \u0000t\u0000h\u0000r\u0000o\u0000u\u0000g\u0000h\u0000 \u0000t\u0000h\u0000e\u0000 \u0000b\u0000o\u0000d\u0000y\u0000.\u0000 \u0000 \u0000C\u0000l\u0000e\u0000a\u0000r\u0000l\u0000y\u0000 \u0000t\u0000h\u0000i\u0000s\u0000 \u0000i\u0000s\u0000 \u0000g\u0000o\u0000i\u0000n\u0000g\u0000 \u0000t\u0000o\u0000 \u0000b\u0000e\u0000 \u0000d\u0000i\u0000f\u0000f\u0000e\u0000r\u0000e\u0000n\u0000t\u0000 \u0000f\u0000o\u0000r\u0000 \u0000s\u0000m\u0000a\u0000l\u0000l\u0000 \u0000c\u0000h\u0000i\u0000l\u0000d\u0000r\u0000e\u0000n\u0000 \u0000a\u0000n\u0000d\u0000 \u0000l\u0000a\u0000r\u0000g\u0000e\u0000 \u0000a\u0000d\u0000u\u0000l\u0000t\u0000s\u0000!\u0000&lt;\u0000/\u0000P\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000D\u0000o\u0000s\u0000e\u0000s\u0000 \u0000b\u0000a\u0000s\u0000e\u0000d\u0000 \u0000o\u0000n\u0000 \u00002\u0000m\u0000m\u0000 \u0000f\u0000e\u0000a\u0000t\u0000u\u0000r\u0000e\u0000 \u0000s\u0000i\u0000z\u0000e\u0000 \u0000f\u0000o\u0000r\u0000 \u0000B\u0000o\u0000d\u0000y\u0000 \u0000S\u0000c\u0000a\u0000n\u0000n\u0000e\u0000r\u0000s\u0000 \u0000(\u0000P\u0000e\u0000r\u0000s\u0000o\u0000n\u0000n\u0000e\u0000l\u0000 \u0000S\u0000c\u0000r\u0000e\u0000e\u0000n\u0000i\u0000n\u0000g\u0000)\u0000 \u0000a\u0000n\u0000d\u0000 \u00002\u0000c\u0000m\u0000 \u0000f\u0000e\u0000a\u0000t\u0000u\u0000r\u0000e\u0000 \u0000s\u0000i\u0000z\u0000e\u0000 \u0000f\u0000o\u0000r\u0000 \u0000t\u0000h\u0000e\u0000 \u0000V\u0000e\u0000h\u0000i\u0000c\u0000l\u0000e\u0000 \u0000P\u0000o\u0000r\u0000t\u0000a\u0000l\u0000.\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000I\u0000M\u0000G\u0000 \u0000S\u0000R\u0000C\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000.\u0000a\u0000s\u0000u\u0000.\u0000e\u0000d\u0000u\u0000/\u0000~\u0000a\u0000t\u0000p\u0000p\u0000r\u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000b\u0000o\u0000d\u0000y\u0000s\u0000c\u0000a\u0000n\u0000t\u0000a\u0000b\u0000l\u0000e\u0000.\u0000e\u0000m\u0000f\u0000&#34;\u0000 \u0000h\u0000e\u0000i\u0000g\u0000h\u0000t\u0000=\u00001\u00005\u00000\u0000 \u0000w\u0000i\u0000d\u0000t\u0000h\u0000=\u00005\u00005\u00000\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000A\u0000s\u0000s\u0000u\u0000m\u0000e\u0000s\u0000 \u00002\u0000 \u0000s\u0000c\u0000a\u0000n\u0000s\u0000 \u0000p\u0000e\u0000r\u0000 \u0000s\u0000c\u0000r\u0000e\u0000e\u0000n\u0000i\u0000n\u0000g\u0000 \u0000(\u0000B\u0000o\u0000d\u0000y\u0000 \u0000S\u0000c\u0000a\u0000n\u0000n\u0000e\u0000r\u0000)\u0000,\u0000 \u00003\u0000 \u0000s\u0000c\u0000a\u0000n\u0000s\u0000 \u0000(\u0000v\u0000e\u0000h\u0000i\u0000c\u0000l\u0000e\u0000 \u0000s\u0000c\u0000a\u0000n\u0000n\u0000e\u0000r\u0000)\u0000\r\u0000\u0000D\u0000o\u0000s\u0000e\u0000 \u0000d\u0000e\u0000p\u0000e\u0000n\u0000d\u0000s\u0000 \u0000o\u0000n\u0000 \u0000i\u0000m\u0000a\u0000g\u0000e\u0000 \u0000q\u0000u\u0000a\u0000l\u0000i\u0000t\u0000y\u0000 \u0000(\u0000p\u0000i\u0000x\u0000e\u0000l\u0000 \u0000s\u0000i\u0000z\u0000e\u0000 \u0000a\u0000n\u0000d\u0000 \u0000n\u0000u\u0000m\u0000b\u0000e\u0000r\u0000 \u0000o\u0000f\u0000 \u0000g\u0000r\u0000e\u0000y\u0000 \u0000l\u0000e\u0000v\u0000e\u0000l\u0000s\u0000)\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000I\u0000M\u0000G\u0000 \u0000S\u0000R\u0000C\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000.\u0000a\u0000s\u0000u\u0000.\u0000e\u0000d\u0000u\u0000/\u0000~\u0000a\u0000t\u0000p\u0000p\u0000r\u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000b\u0000o\u0000d\u0000y\u0000s\u0000c\u0000a\u0000n\u0000s\u0000l\u0000i\u0000d\u0000e\u00004\u0000.\u0000j\u0000p\u0000g\u0000&#34;\u0000 \u0000h\u0000e\u0000i\u0000g\u0000h\u0000t\u0000=\u00002\u00008\u00000\u0000 \u0000 \u0000w\u0000i\u0000d\u0000t\u0000h\u0000=\u00003\u00007\u00005\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000p\u0000&gt;\u0000P\u0000r\u0000o\u0000b\u0000a\u0000b\u0000i\u0000l\u0000i\u0000t\u0000y\u0000 \u0000o\u0000f\u0000 \u0000f\u0000a\u0000t\u0000a\u0000l\u0000 \u0000c\u0000a\u0000n\u0000c\u0000e\u0000r\u0000.\u0000&lt;\u0000b\u0000r\u0000/\u0000&gt;\u00001\u0000 \u0000i\u0000n\u0000 \u00002\u00000\u0000 \u0000m\u0000i\u0000l\u0000l\u0000i\u0000o\u0000n\u0000 \u0000p\u0000e\u0000r\u0000 \u0000m\u0000i\u0000c\u0000r\u0000o\u0000S\u0000v\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000P\u0000r\u0000o\u0000b\u0000a\u0000b\u0000i\u0000l\u0000t\u0000i\u0000t\u0000y\u0000 \u0000o\u0000f\u0000 \u0000b\u0000e\u0000i\u0000n\u0000g\u0000 \u0000b\u0000l\u0000o\u0000w\u0000n\u0000 \u0000u\u0000p\u0000 \u0000b\u0000y\u0000 \u0000T\u0000e\u0000r\u0000r\u0000o\u0000r\u0000i\u0000s\u0000t\u0000 \u0000i\u0000n\u0000 \u0000A\u0000i\u0000r\u0000p\u0000l\u0000a\u0000n\u0000e\u0000.\u0000&lt;\u0000b\u0000r\u0000/\u0000&gt;\u0000A\u0000l\u0000s\u0000o\u0000\r\u0000\u0000a\u0000b\u0000o\u0000u\u0000t\u0000 \u00001\u0000 \u0000i\u0000n\u0000 \u00002\u00000\u0000 \u0000m\u0000i\u0000l\u0000l\u0000i\u0000o\u0000n\u0000 \u0000p\u0000e\u0000r\u0000 \u0000f\u0000l\u0000i\u0000g\u0000h\u0000t\u0000.\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000I\u0000n\u0000 \u0000C\u0000o\u0000m\u0000p\u0000a\u0000r\u0000s\u0000i\u0000o\u0000n\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000P\u0000r\u0000o\u0000b\u0000a\u0000b\u0000i\u0000l\u0000i\u0000t\u0000y\u0000 \u0000o\u0000f\u0000 \u0000b\u0000e\u0000i\u0000n\u0000g\u0000 \u0000s\u0000t\u0000r\u0000u\u0000c\u0000k\u0000 \u0000b\u0000y\u0000 \u0000l\u0000i\u0000g\u0000h\u0000t\u0000e\u0000n\u0000i\u0000n\u0000g\u0000 \u0000i\u0000n\u0000 \u0000t\u0000h\u0000e\u0000 \u0000U\u0000S\u0000 \u0000\r\u0000\u00001\u0000 \u0000i\u0000n\u0000 \u00005\u00000\u00000\u0000,\u00000\u00000\u00000\u0000 \u0000a\u0000n\u0000d\u0000 \u0000b\u0000e\u0000i\u0000n\u0000g\u0000 \u0000k\u0000i\u0000l\u0000l\u0000e\u0000d\u0000 \u00001\u0000 \u0000i\u0000n\u0000 \u00005\u0000 \u0000m\u0000i\u0000l\u0000l\u0000i\u0000o\u0000n\u0000!\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000p\u0000&gt;\u0000&lt;\u0000f\u0000o\u0000n\u0000t\u0000 \u0000s\u0000i\u0000z\u0000e\u0000=\u0000&#34;\u00004\u0000.\u00008\u0000p\u0000t\u0000&#34;\u0000&gt;\u0000&lt;\u0000f\u0000o\u0000n\u0000t\u0000 \u0000c\u0000o\u0000l\u0000o\u0000r\u0000=\u0000&#34;\u00009\u00009\u00000\u00000\u00000\u00000\u0000&#34;\u0000&gt;\u0000&lt;\u0000b\u0000&gt;\u0000S\u0000c\u0000a\u0000r\u0000y\u0000 \u0000t\u0000h\u0000i\u0000n\u0000g\u0000,\u0000 \u0000w\u0000h\u0000a\u0000t\u0000 \u0000h\u0000a\u0000p\u0000p\u0000e\u0000n\u0000s\u0000 \u0000i\u0000f\u0000 \u0000s\u0000c\u0000a\u0000n\u0000 \u0000j\u0000a\u0000m\u0000s\u0000 \u0000a\u0000n\u0000d\u0000 \u0000f\u0000a\u0000i\u0000l\u0000-\u0000s\u0000a\u0000f\u0000e\u0000 \u0000m\u0000e\u0000c\u0000h\u0000a\u0000n\u0000i\u0000s\u0000m\u0000 \u0000f\u0000a\u0000i\u0000l\u0000s\u0000 \u0000 \u0000-\u0000-\u0000 \u0000l\u0000o\u0000c\u0000a\u0000l\u0000 \u0000d\u0000o\u0000s\u0000e\u0000 \u0000v\u0000e\u0000r\u0000y\u0000 \u0000h\u0000i\u0000g\u0000h\u0000 \u0000o\u0000f\u0000 \u0000o\u0000r\u0000d\u0000e\u0000r\u0000 \u0000a\u0000 \u0000f\u0000e\u0000w\u0000 \u0000S\u0000v\u0000&lt;\u0000/\u0000b\u0000&gt;\u0000&lt;\u0000/\u0000f\u0000o\u0000n\u0000t\u0000&gt;\u0000&lt;\u0000/\u0000f\u0000o\u0000n\u0000t\u0000&gt;\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000p\u0000&gt;\u0000F\u0000i\u0000n\u0000a\u0000l\u0000l\u0000y\u0000,\u0000 \u0000C\u0000o\u0000m\u0000p\u0000t\u0000o\u0000n\u0000 \u0000B\u0000a\u0000c\u0000k\u0000s\u0000c\u0000a\u0000t\u0000t\u0000e\u0000r\u0000 \u0000g\u0000o\u0000o\u0000d\u0000 \u0000f\u0000o\u0000r\u0000 \u0000d\u0000e\u0000t\u0000e\u0000c\u0000t\u0000i\u0000n\u0000g\u0000 \u0000e\u0000d\u0000g\u0000e\u0000s\u0000 \u0000a\u0000n\u0000d\u0000\r\u0000\u0000\u001c P\u0000r\u0000o\u0000t\u0000r\u0000u\u0000s\u0000i\u0000o\u0000n\u0000s\u0000\u001d ,\u0000 \u0000 \u0000n\u0000o\u0000t\u0000 \u0000a\u0000t\u0000 \u0000a\u0000l\u0000l\u0000 \u0000g\u0000o\u0000o\u0000d\u0000 \u0000a\u0000t\u0000 \u0000d\u0000e\u0000t\u0000e\u0000c\u0000t\u0000i\u0000n\u0000g\u0000 \u0000e\u0000x\u0000p\u0000l\u0000o\u0000s\u0000i\u0000v\u0000e\u0000s\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000F\u0000o\u0000r\u0000 \u0000m\u0000o\u0000r\u0000e\u0000 \u0000i\u0000n\u0000f\u0000o\u0000r\u0000m\u0000a\u0000t\u0000i\u0000o\u0000n\u0000 \u0000s\u0000e\u0000e\u0000 \u0000&lt;\u0000a\u0000 \u0000h\u0000r\u0000e\u0000f\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000.\u0000a\u0000s\u0000u\u0000.\u0000e\u0000d\u0000u\u0000/\u0000~\u0000a\u0000t\u0000p\u0000p\u0000r\u0000/\u0000R\u0000P\u0000D\u0000-\u0000F\u0000i\u0000n\u0000a\u0000l\u0000-\u0000F\u0000o\u0000r\u0000m\u0000.\u0000p\u0000d\u0000f\u0000&#34;\u0000&gt;\u0000\r\u0000\u0000p\u0000a\u0000p\u0000e\u0000r\u0000&lt;\u0000/\u0000a\u0000&gt;\u0000 \u0000t\u0000o\u0000 \u0000a\u0000p\u0000p\u0000e\u0000a\u0000r\u0000 \u0000i\u0000n\u0000 \u0000R\u0000a\u0000d\u0000i\u0000a\u0000t\u0000i\u0000o\u0000n\u0000 \u0000P\u0000r\u0000o\u0000t\u0000e\u0000c\u0000t\u0000i\u0000o\u0000n\u0000 \u0000a\u0000n\u0000d\u0000 \u0000D\u0000o\u0000s\u0000i\u0000m\u0000e\u0000t\u0000r\u0000y\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000&lt;\u0000a\u0000 \u0000h\u0000r\u0000e\u0000f\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000n\u0000y\u0000t\u0000i\u0000m\u0000e\u0000s\u0000.\u0000c\u0000o\u0000m\u0000/\u00002\u00000\u00001\u00000\u0000/\u00000\u00009\u0000/\u00001\u00002\u0000/\u0000t\u0000r\u0000a\u0000v\u0000e\u0000l\u0000/\u00001\u00002\u0000p\u0000r\u0000a\u0000c\u0000.\u0000h\u0000t\u0000m\u0000l\u0000?\u0000_\u0000r\u0000=\u00001\u0000&amp;\u0000e\u0000m\u0000c\u0000=\u0000e\u0000t\u0000a\u00001\u0000&#34;\u0000&gt;\u0000\r\u0000\u0000N\u0000e\u0000w\u0000 \u0000Y\u0000o\u0000r\u0000k\u0000 \u0000T\u0000i\u0000m\u0000e\u0000s\u0000 \u0000a\u0000r\u0000t\u0000i\u0000c\u0000l\u0000e\u0000&lt;\u0000/\u0000a\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000p\u0000&gt;\u0000&lt;\u0000a\u0000 \u0000h\u0000r\u0000e\u0000f\u0000=\u0000&#34;\u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u0000w\u0000w\u0000w\u0000.\u0000u\u0000s\u0000a\u0000t\u0000o\u0000d\u0000a\u0000y\u0000.\u0000c\u0000o\u0000m\u0000/\u0000t\u0000r\u0000a\u0000v\u0000e\u0000l\u0000/\u0000f\u0000l\u0000i\u0000g\u0000h\u0000t\u0000s\u0000/\u00002\u00000\u00001\u00000\u0000-\u00000\u00008\u0000-\u00002\u00005\u0000-\u0000a\u0000i\u0000r\u0000p\u0000o\u0000r\u0000t\u0000s\u0000c\u0000r\u0000e\u0000e\u0000n\u0000i\u0000n\u0000g\u00002\u00005\u0000_\u0000S\u0000T\u0000_\u0000N\u0000.\u0000h\u0000t\u0000m\u0000?\u0000c\u0000s\u0000p\u0000=\u0000t\u0000f\u0000&amp;\u0000P\u0000O\u0000E\u0000=\u0000\r\u0000\u0000c\u0000l\u0000i\u0000c\u0000k\u0000-\u0000r\u0000e\u0000f\u0000e\u0000r\u0000&#34;\u0000&gt;\u0000U\u0000S\u0000A\u0000 \u0000T\u0000o\u0000d\u0000a\u0000y\u0000 \u0000a\u0000r\u0000t\u0000i\u0000c\u0000l\u0000e\u0000&lt;\u0000/\u0000a\u0000&gt;\u0000&lt;\u0000/\u0000p\u0000&gt;\u0000&lt;\u0000/\u0000c\u0000e\u0000n\u0000t\u0000e\u0000r\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000&lt;\u0000/\u0000b\u0000o\u0000d\u0000y\u0000&gt;\u0000\r\u0000\u0000&lt;\u0000/\u0000h\u0000t\u0000m\u0000l\u0000&gt;\u0000\r\u0000\u0000\r\u0000\u0000\r\u0000\u0000", "posttime": "2020-05-25 02:31:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u66b4\u9732,compton,lt", "title": "TSA\u5eb7\u666e\u987f\u540e\u5411\u6563\u5c04\u4f7f\u7269\u4f53\u66b4\u9732\u4e8e\u4e0d\u53ef\u5ffd\u7565\u7684\u8f90\u5c04(\u5fae\u897f\u5f17)", "title_en": "TSA compton backscattering exposes body to non-negligible radiation (microSv)", "transed": 1, "url": "http://www.public.asu.edu/~atppr/bodyscan.html", "via": "", "real_tags": ["\u66b4\u9732", "compton", "lt"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003544, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u5efa\u5e10\u6237", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-05-25 01:50:34", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,\u5f00\u53d1,app,\u73af\u5883,development", "title": "\u5f53\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883\u8fc1\u79fb\u5230\u4e91\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f", "title_en": "What Happens When Software Development Environments Move to the Cloud?", "transed": 1, "url": "https://spectrum.ieee.org/tech-talk/computing/software/software-development-environments-cloud", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u5f00\u53d1", "app", "\u73af\u5883"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003543, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86\u5229\u7528DAPR\u7684\u865a\u62df\u6f14\u5458\u521b\u5efa\u6570\u5b57\u53cc\u80de\u80ce\u8868\u793a\u7684\u6982\u5ff5\u3002\u73b0\u5728\uff0c\u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u8fd9\u6709\u591a\u53ef\u884c\u7684\u7406\u8bba\u5e16\u5b50\u3002\u5f53\u7136\uff0c\u4efb\u4f55\u7406\u8bba\u4e0a\u7684\u4e1c\u897f\u90fd\u5e94\u8be5\u4ed8\u8bf8\u5b9e\u8df5\uff0c\u8fd9\u5c31\u662f\u6211\u8fd9\u4e2a\u5468\u672b\u4e00\u76f4\u5728\u505a\u7684\u4e8b\u60c5\uff0c\ud83d\ude09\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u60f3\u8981\u7acb\u5373\u770b\u5230\u7ed3\u679c\u7684\u4eba\uff0c\u8bf7\u968f\u65f6\u67e5\u770b\u4ee5\u4e0b\u89c6\u9891\u4ee5\u53ca\u6e90\u4ee3\u7801\uff1ahttps://github.com/roadwork/roadwork-iot.\u3002\n\u56de\u987e\u5efa\u8bae\u7684\u4f53\u7cfb\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5fc5\u987b\u6784\u5efa\u4ee5\u4e0b\u7ec4\u4ef6\uff1a\n\u6ce8\u610f\uff1a\u6211\u7684\u9009\u62e9\u662f\u4f7f\u7528Azure IoT Hub\u4f5c\u4e3a\u8bbe\u5907\u7ba1\u7406\u5668\uff0c\u4f46\u662f\u8fd9\u79cd\u67b6\u6784\u53ef\u4ee5\u5728\u4efb\u4f55\u8bbe\u5907\u7ba1\u7406\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u662f\u9700\u8981\u7279\u5b9a\u7684\u9065\u6d4b\u5904\u7406\u5668\u3002\n\u7269\u8054\u7f51\u96c6\u7ebf\u5668\uff1a\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u7ba1\u7406\u4e0d\u540c\u8bbe\u5907\u5e76\u5141\u8bb8\u6211\u4eec\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u7684\u96c6\u7ebf\u5668\u3002\n\u9065\u6d4b\u5904\u7406\u5668\uff1a\u9065\u6d4b\u5904\u7406\u5668\u5c06\u5904\u7406\u4f20\u5165\u7684\u6d88\u606f\u5e76\u5c06\u72b6\u6001\u6570\u636e\u8f6c\u53d1\u7ed9\u865a\u62df\u53c2\u4e0e\u8005\u3002\u6211\u9009\u62e9\u5728Node.js\u4e2d\u7f16\u5199\u8fd9\u6bb5\u4ee3\u7801\u3002\n\u53c2\u4e0e\u8005\u670d\u52a1\uff1a\u6211\u4eec\u9700\u8981\u7528\u4e8eDAPR\u7684\u80fd\u591f\u5904\u7406\u53c2\u4e0e\u8005\u8bf7\u6c42\u7684\u53c2\u4e0e\u8005\u670d\u52a1\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u7528C#\u7f16\u5199\u8fd9\u6bb5\u4ee3\u7801\u3002\n\u5c55\u793a\u53f0\uff1a\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u76f4\u89c2\u5730\u5448\u73b0\u6f14\u5458\u72b6\u6001\u7684\u5c55\u793a\u53f0\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u5728\u540e\u7aef\u4f7f\u7528Next.js\u548cNode.js\u4ee5\u53caExpress\u3002\n\u9065\u6d4b\u5904\u7406\u5668\u76f8\u5f53\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u5145\u5f53\u4e00\u79cd\u8def\u7531\u5668\uff0c\u63a5\u6536\u4e8b\u4ef6\u5e76\u5c3d\u5feb\u5c06\u5176\u8f6c\u53d1\u7ed9DAPR Virtual Actor\u5b9e\u73b0(RoadworkActorService)\u3002\n\u5728\u8fd9\u91cc\uff0cdapr\u4e3a\u6211\u4eec\u5b8c\u6210\u4e86\u7e41\u91cd\u7684\u4efb\u52a1\uff0c\u6211\u4eec\u53ea\u9700\u5229\u7528fetch API\u5411http://localhost\uff1a${DAPR_PORT}/v1.0/actors/${actorType}/${deviceId}/method/SaveData\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5b83\u5c06\u901a\u8fc7\u4e00\u4e2asavedata\u65b9\u6cd5\u81ea\u52a8\u66f4\u65b0\u53c2\u4e0e\u8005\u72b6\u6001\u3002\n\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u5e76\u5e94\u7528\u5143\u6570\u636e\u5c42(\u7528\u4e8e\u8bbe\u5907ID\u3001\u4e0a\u6b21\u66f4\u65b0\u65f6\u95f4\u3001\u6e90\u3001\u2026\u7b49\u4fe1\u606f)\u3002\n\u4e3a\u4e86\u63d0\u4f9b\u4ee3\u7801\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u7b80\u8981\u6982\u8ff0\uff0c\u6211\u5305\u542b\u4e86\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u3002\u4e0d\u8fc7\uff0c\u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u7f51\u5740\u627e\u5230\u5b8c\u6574\u7684\u6e90\u4ee3\u7801\uff1ahttps://github.com/Roadwork/Roadwork-IoT/blob/master/src/dapr/telemetry-processor/azure/index.js\u3002\n//\u6444\u53d6\u4e8b\u4ef6(\u5728`message`\u4e0b)//.//\u521b\u5efa\u5305\u88c5\u5668const wrapper={}\uff1bwrapper.LastUpdate=lastUpdate.\u3002toString()\uff1bwrapper.Source=&#34\uff1bazure-iothub&#34\uff1b\uff1bwrapper.DeviceId=deviceID\uff1bwrapper.State=JSON\u3002stringify(message.body)\uff1b//\u4e3a\u6211\u4eec\u7684\u865a\u62dfActor\u8c03\u7528SaveData\u65b9\u6cd5const res=aWait Fetch(`http://localhost\uff1a${DAPR_PORT}/v1.0/Actors/${ActionType}/${deviceID}/Method/SaveData`\uff0c{method\uff1a&#39\uff1bpost&#39\uff1b\uff0cHeader\uff1a{&#34\uff1bContent-Type&#34\uff1b\uff1a&#34\uff1bApplication/json&#34\uff1b}\uff0cBody\uff1ajson\u3002stringify(\u5305\u88c5\u5668)})\uff1b\n\u5bf9\u4e8e\u6211\u4eec\u7684Actor Service\uff0c\u6211\u4eec\u53ea\u9700\u5b9e\u73b0\u7531DAPRC#\u63a5\u53e3\u63d0\u4f9b\u7684\u63a5\u53e3(\u5982\u6b64\u5904\u7684\u793a\u4f8b\u4e2d\u6240\u793a\uff1ahttps://github.com/dapr/dotnet-sdk/tree/master/samples/Actor).\u3002\u6211\u5bf9\u6b64\u8fdb\u884c\u4e86\u8c03\u6574\uff0c\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u754c\u9762\uff1a\npublic class{public string deviceID{get\uff1bset\uff1b}public string Source{get\uff1bset\uff1b}public string LastUpdate{get\uff1bset\uff1b}public string State{get\uff1bset\uff1b}public Override String ToString(){var deviceID=this.DeviceId\uff1f\uff1f&#34\uff1bnull&#34\uff1bvar source=this.source\uff1f\uff1f&#34\uff1bnull&#34\uff1b\uff1bvar lastUpdateed=this.LastUpdate\uff1f\uff1f&#34\uff1bnull&#34\uff1b\uff1bvar state=this.State\uff1f\uff1f&#34\uff1bnull&#34\uff1b\uff1breturn$&#34\uff1b[{source}][{deviceID}]{state}&#34\uff1b\uff1b}}\u3002\nDAPR\u5c06\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u5230\u72b6\u6001\u5b58\u50a8\uff0c\u8981\u8bbf\u95ee\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u72b6\u6001\u5b58\u50a8\u7684\u539f\u751fSDK\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662fRedis\u3002\n\u6211\u4eec\u552f\u4e00\u9700\u8981\u5173\u6ce8\u7684\u662fDAPR\u5982\u4f55\u4fdd\u5b58\u8fd9\u4e9b\u72b6\u6001\u3002\u6bcf\u4e2a\u53c2\u4e0e\u8005\u7684\u5bc6\u94a5\u4ee5\u5206\u9694\u7b26||\u4fdd\u5b58\uff0c\u683c\u5f0f\u4e3a\uff1aDAPR_SERVICE||ACTOR_TYPE||ACTOR_ID||STATE_NAME\u3002\n\u5728\u6211\u4eec\u7684\u524d\u7aef\uff0c\u6211\u4eec\u4f7f\u7528\u4e86NextJS\uff0c\u8fd9\u662f\u4e00\u4e2aReaction\u6846\u67b6\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u5f88\u5bb9\u6613\u5b9e\u73b0\u6211\u4eec\u7684\u9875\u9762\uff0c\u5e76\u901a\u8fc7NPM run dev\u8fd0\u884c\u5b83\u3002\u4e00\u65e6\u5b9e\u73b0\uff0c\u6211\u4eec\u5c06\u5229\u7528\u4e00\u4e2asetInterval\uff0c\u5b83\u5c06\u6bcf\u79d2\u8c03\u7528Web\u540e\u7aef\u3002\n\u6ce8\u610f\uff1asetInterval\u53ef\u80fd\u4e0d\u662f\u5b9e\u65f6\u5de5\u4f5c\u7684\u6700\u4f73\u9009\u62e9\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5b83\u7684\u4f18\u5316\u53cd\u5e94\uff0c\u72b6\u6001\u66f4\u65b0\u6548\u7387\u5f88\u9ad8\u3002\n\u73b0\u5728\u4e00\u5207\u90fd\u521b\u5efa\u597d\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u4e0d\u540c\u7684\u5de5\u5177\uff1a\n#\u542f\u52a8\u9065\u6d4b\u5904\u7406\u5668src/dapr/\u9065\u6d4b\u5904\u7406\u5668/azuredapr run--app-id rw\u9065\u6d4b\u5904\u7406\u5668--azure--\u7aef\u53e33500node index.js&#34\uff1bIOTHUB_BUDUD_IN_EVENT_ENDPOINT&#34\uff1b#start RoadworkTwinActor Service src/dapr/roadwork-actor-service/RoadworkTwinActordapr Run--\u7aef\u53e33501--app-id RW-Actor-SERVICE--APP-PORT 5000\u70b9\u7f51\u8fd0\u884c#\u542f\u52a8WEB\u540e\u7aef\u3002\n\u8fd9\u5c06\u542f\u52a8\u6211\u4eec\u7684\u670d\u52a1\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u8fde\u63a5\u8bbe\u5907\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u8fd9\u5c06\u81ea\u52a8\u5f00\u59cb\u65cb\u8f6c\u6f14\u5458\uff0c\u5e76\u5c06\u4ed6\u4eec\u53ef\u89c6\u5316\u5728\u524d\u7aef\u3002\n\u76ee\u524d\uff0c\u7f16\u5199\u7684\u6846\u67b6\u5141\u8bb8\u6211\u59cb\u7ec8\u83b7\u5f97\u6240\u8fde\u63a5\u8bbe\u5907\u7684\u6700\u65b0\u72b6\u6001\u3002\u5728\u63a5\u4e0b\u6765\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u5c06\u66f4\u6df1\u5165\u5730\u7814\u7a76\u5982\u4f55\u4f7f\u7528\u5b9a\u4e49\u8bed\u8a00(\u5982\u6b64\u5904\u6240\u8ff0)\u5b8c\u6210\u8fd9\u79cd\u8868\u793a\uff0c\u4ee5\u53ca\u6211\u4eec\u5982\u4f55\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u964d\u4f4e\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u7684\u969c\u788d\uff0c\u76f4\u63a5\u901a\u8fc7\u6570\u5b57\u5b6a\u751f\u6846\u67b6\u8fdb\u884c\u63a8\u7406/\u8bad\u7ec3\u3002\u4f46\u7a0d\u540e\u5c06\u5728\u4e00\u4e2a\u5168\u65b0\u7684\u9879\u76ee\ud83d\ude09\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002", "note_en": "In a previous blog post I introduced the concept of creating a Digital  Twin representation utilizing Dapr\u2019s Virtual Actors. Now, this was a theoretical post on how feasible this could be. Of course anything theoretical should also be put in practice, which is what I have been doing this weekend \ud83d\ude09.\n  For the ones that would like to see the results straight away, feel free to check the following video as well as the source code at:  https://github.com/roadwork/roadwork-iot.\n   Looking back at the proposed architecture, we can see that we have to build the following components:\n Note: My choice was to go with  Azure IoT Hub for the device manager, this architecture however works on any device manager, but requires a specific Telemetry Processor.\n IoT Hub: We need a Hub that is able to manage different devices and allow us to process these events.\n Telemetry Processor: The telemetry processor will process incoming messages and forward the state data to the virtual actor. I chose to write this in  Node.js\n Actor Service: We need an actor service for  Dapr that is able to process actor requests. In our case we will write this in C#.\n Visualizer: Lastly we need a visualizer that is able to represent the state of our actors visually. Here I will utilize  Next.js and  Node.js with  Express on the backend.\n   The telemetry processor is quite straightforward as it acts as a kind of router, taking in an event and as soon as possible forward it to the Dapr Virtual Actor implementation (RoadworkActorService).\n Dapr does the heavy lifting for us here, where we can just utilize the  fetch API to send a request to  http://localhost:${DAPR_PORT}/v1.0/actors/${actorType}/${deviceId}/method/SaveData which will automatically update the actor state through a  SaveData method.\n  Process these events and apply a metadata layer (for information such as DeviceId, LastUpdated, Source, \u2026)\n To provide a short overview of how the code can accomplish this, I include the following snippet. However feel free to find the full source at:  https://github.com/Roadwork/Roadwork-IoT/blob/master/src/dapr/telemetry-processor/azure/index.js\n // Ingest the event (available under `message`) // ... // Create the wrapper const wrapper  =  {  } ;wrapper .LastUpdated  = lastUpdated . toString ( ) ;wrapper .Source  =  &#34;azure-iothub&#34; ;wrapper .DeviceId  = deviceId ;wrapper .State  =  JSON . stringify (message .body ) ; // Call the SaveData method for our Virtual Actor const res  =  await  fetch (  ` http://localhost:  ${ DAPR_PORT } /v1.0/actors/  ${actorType } /  ${deviceId } /method/SaveData ` ,  { method :  &#39;POST&#39; , headers :  {  &#34;Content-Type&#34; :  &#34;application/json&#34;  } , body :  JSON . stringify (wrapper ) } ) ;\n  For our Actor Service, we just have to implement the interface provided by the Dapr C# interface (as found in the example here:  https://github.com/dapr/dotnet-sdk/tree/master/samples/Actor). I adapted this to utilize the following interface:\n public  class   {  public  string DeviceId  {  get ;  set ;  }  public  string Source  {  get ;  set ;  }  public  string LastUpdated  {  get ;  set ;  }  public  string State  {  get ;  set ;  }  public  override  string  ToString ( )  {  var deviceId  =  this .DeviceId  ??  &#34;null&#34; ;  var source  =  this .Source  ??  &#34;null&#34; ;  var lastUpdated  =  this .LastUpdated  ??  &#34;null&#34; ;  var state  =  this .State  ??  &#34;null&#34; ;  return $ &#34;[{source}][{deviceId}] {state}&#34; ;  } }\n   Dapr saves everything to a state store, to access this we can thus utilize the native SDKs for this state store. In our case, we are utilizing Redis.\n The only thing we have to pay attention to is how Dapr saves these states. The key of each actor is saved with a delimiter of  || in the format:  DAPR_SERVICE||ACTOR_TYPE||ACTOR_ID||STATE_NAME\n   In our Frontend we utilize NextJS which is a React Framework. This makes it easy for us to implement our pages and run it through  npm run dev. Once implemented, we utilize a  setInterval that will recall the Web Backend every second.\n Note: A setInterval might not be the best idea for real-time work. However due to React it\u2019s optimizations, the state updates efficiently.\n    Now everything is created, we can start the different tools up through the following commands:\n # Start Telemetry Processor  src/dapr/telemetry-processor/azuredapr run --app-id rw-telemetry-processor-azure --port  3500 node index.js  &#34;IOTHUB_BUILT_IN_EVENT_ENDPOINT&#34; # Start RoadworkTwinActor Service  src/dapr/roadwork-actor-service/RoadworkTwinActordapr run --port  3501 --app-id rw-actor-service --app-port  5000 dotnet run # Start Web Backenddapr run --app-id node-api-user --app-port  9000 --port  9500  npm run start # Start Web Frontend npm run dev\n Which will start up our services. We can now connect devices as shown below which will start automatically spinning up the actors and visualizing them on the frontend.\n    Currently the framework written allows me to always get an up-to-date state of the devices connected. For next steps, I would love to dive deeper in how this representation can be done using a Definition Language ( as described here) and how we can utilize this to lower the barrier towards Reinforcement Learning algorithms, infering / training straight through the Digital Twin framework. But more on that later in a brand-new project \ud83d\ude09.", "posttime": "2020-05-25 01:49:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u7269\u8054\u7f51,\u521b\u5efa,open,dapr", "title": "\u521b\u5efa\u5f00\u6e90\u7269\u8054\u7f51\u6570\u5b57\u5b6a\u751f\u5e73\u53f0", "title_en": "Creating an Open-Source IoT Digital Twin Platform", "transed": 1, "url": "https://xaviergeerinck.com/post/iot/digital-twin-implementation/", "via": "", "real_tags": ["\u5f00\u6e90", "\u7269\u8054\u7f51", "\u521b\u5efa", "open", "dapr"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003542, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u60a8\u51c6\u5907\u597d\u90e8\u7f72\u65f6\uff0c\u8fd0\u884cMake Freeze\u4ee5\u83b7\u5f97\u7ad9\u70b9\u7684\u9759\u6001\u7248\u672c\u3002\n\u6536\u96c6CSV\u6587\u4ef6\uff0c\u4ee3\u8868\u4f1a\u8bae\u7684\u8bba\u6587\u3001\u6f14\u8bb2\u8005\u3001\u7814\u8ba8\u4f1a\u548c\u5176\u4ed6\u91cd\u8981\u4fe1\u606f\u3002\n\u5305\u542b\u7ad9\u70b9\u7684\u6240\u6709\u9875\u9762\u3002\u6709\u5173\u6bcd\u7248\u9875\uff0c\u8bf7\u53c2\u9605base.html\uff0c\u6709\u5173\u6838\u5fc3\u7ec4\u4ef6\uff0c\u8bf7\u53c2\u9605Components.html\u3002\n\u611f\u8c22Darren Nelson\u7684\u539f\u59cb\u8bbe\u8ba1\u8349\u56fe\u3002\u6c99\u57fa\u5c14\u00b7\u7a46\u7f55\u9ed8\u5fb7\u3001\u739b\u838e\u00b7\u6000\u7279\u3001\u8d75\u4eac\u8d24\u3001\u674e\u00b7\u574e\u8d1d\u5c14\u548c\u4e9a\u5f53\u00b7\u6000\u7279\u8fdb\u884c\u89c4\u5212\u548c\u53cd\u9988\u3002Junaid Rahim\uff0cJackTae\uff0cYasser Souri\uff0cSoumya Chatterjee\u548cAnkshita Gupta\u7684\u8d21\u732e\u3002", "note_en": "When you are ready to deploy run  make freeze to get a static version of the site.\n    Collection of CSV files representing the papers, speakers, workshops, and other important information for the conference.\n    Contains all the pages for the site. See  base.html for the master page and  components.html for core components.\n         Thanks to Darren Nelson for the original design sketches. Shakir Mohamed, Martha White, Kyunghyun Cho, Lee Campbell, and Adam White for planning and feedback. Junaid Rahim, Jake Tae, Yasser Souri, Soumya Chatterjee, and Ankshita Gupta for contributions.", "posttime": "2020-05-25 01:49:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u76d2\u88c5,virtual,\u8bf7\u53c2\u9605", "title": "MiniConf\uff1a\u76d2\u88c5\u865a\u62df\u4f1a\u8bae", "title_en": "MiniConf: A Virtual Conference in a Box", "transed": 1, "url": "https://mini-conf.github.io/index.html", "via": "", "real_tags": ["\u76d2\u88c5", "virtual", "\u8bf7\u53c2\u9605"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003541, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728Grammarly\uff0c\u6211\u4eec\u4e1a\u52a1\u7684\u57fa\u7840\uff0c\u6211\u4eec\u7684\u6838\u5fc3\u8bed\u6cd5\u5f15\u64ce\uff0c\u662f\u7528Common Lisp\u7f16\u5199\u7684\u3002\u5b83\u76ee\u524d\u6bcf\u79d2\u5904\u7406\u4e00\u5343\u591a\u4e2a\u53e5\u5b50\uff0c\u53ef\u6c34\u5e73\u6269\u5c55\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u751f\u4ea7\u4e2d\u53ef\u9760\u5730\u670d\u52a1\u4e86\u8fd1\u4e09\u5e74\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5173\u4e8e\u5982\u4f55\u5c06Lisp\u8f6f\u4ef6\u90e8\u7f72\u5230\u73b0\u4ee3\u4e91\u57fa\u7840\u8bbe\u65bd\u7684\u8bf4\u660e\u975e\u5e38\u5c11(\u5982\u679c\u6709\u7684\u8bdd)\uff0c\u6240\u4ee5\u6211\u4eec\u8ba4\u4e3a\u5206\u4eab\u6211\u4eec\u7684\u7ecf\u9a8c\u4f1a\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002Lisp\u8fd0\u884c\u65f6\u548c\u7f16\u7a0b\u73af\u5883\u63d0\u4f9b\u4e86\u51e0\u4e2a\u72ec\u7279\u7684-\u5c3d\u7ba1\u6a21\u7cca\u7684-\u529f\u80fd\u6765\u652f\u6301\u751f\u4ea7\u7cfb\u7edf(\u5bf9\u4e8e\u4e0d\u8010\u70e6\u7684\u4eba\uff0c\u8fd9\u4e9b\u529f\u80fd\u5c06\u5728\u6700\u540e\u4e00\u7ae0\u4e2d\u4ecb\u7ecd)\u3002\n\u4e0e\u6d41\u884c\u7684\u89c2\u70b9\u76f8\u53cd\uff0cLisp\u662f\u6784\u5efa\u751f\u4ea7\u7cfb\u7edf\u7684\u4e00\u79cd\u975e\u5e38\u5b9e\u7528\u7684\u8bed\u8a00\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5e02\u9762\u4e0a\u6709\u5f88\u591aLisp\u7cfb\u7edf\uff1a\u5f53\u60a8\u5728\u5e0c\u666e\u8499\u514b\u641c\u7d22\u673a\u7968\u6216\u5728\u4f26\u6566\u4e58\u5750\u5730\u94c1\u65f6\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528Lisp\u7a0b\u5e8f\u3002\n\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u6211\u4eec\u7684Lisp\u670d\u52a1\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u4eba\u5de5\u667a\u80fd\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u57fa\u4e8e\u8bed\u8a00\u5b66\u5bb6\u548c\u7814\u7a76\u4eba\u5458\u521b\u5efa\u7684\u5927\u91cf\u77e5\u8bc6\u8fdb\u884c\u64cd\u4f5c\u3002\u5b83\u4e3b\u8981\u662f\u4e00\u4e2aCPU\u53d7\u9650\u7684\u7a0b\u5e8f\uff0c\u5b83\u662f\u6211\u4eec\u7f51\u7edc\u4e2d\u8ba1\u7b97\u8d44\u6e90\u7684\u6700\u5927\u6d88\u8d39\u8005\u4e4b\u4e00\u3002\n\u6211\u4eec\u5728\u90e8\u7f72\u5230AWS\u7684\u73b0\u6709Linux\u6620\u50cf\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u670d\u52a1\u3002\u6211\u4eec\u4f7f\u7528SBCL\u8fdb\u884c\u751f\u4ea7\u90e8\u7f72\uff0c\u5728\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u7684\u673a\u5668\u4e0a\u4f7f\u7528CCL\u3002Lisp\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u60a8\u53ef\u4ee5\u4ece\u51e0\u4e2a\u5177\u6709\u4e0d\u540c\u4f18\u70b9\u548c\u7f3a\u70b9\u7684\u6210\u719f\u5b9e\u73b0\u4e2d\u8fdb\u884c\u9009\u62e9\uff1a\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9488\u5bf9\u670d\u52a1\u5668\u4e0a\u7684\u5904\u7406\u901f\u5ea6\u548c\u5f00\u53d1\u73af\u5883\u4e2d\u7684\u7f16\u8bd1\u901f\u5ea6\u8fdb\u884c\u4e86\u4f18\u5316(\u8fd9\u5bf9\u6211\u4eec\u81f3\u5173\u91cd\u8981\u7684\u539f\u56e0\u5c06\u5728\u540e\u9762\u7684\u5c0f\u8282\u4e2d\u4ecb\u7ecd)\u3002\n\u5728Grammarly\uff0c\u6211\u4eec\u4f7f\u7528\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u6765\u5f00\u53d1\u6211\u4eec\u7684\u670d\u52a1\uff1a\u9664\u4e86JVM\u8bed\u8a00\u548cJavaScript\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528Erlang\u3001Python\u548cGo\u8fdb\u884c\u5f00\u53d1\u3002\u9002\u5f53\u7684\u670d\u52a1\u5c01\u88c5\u4f7f\u6211\u4eec\u80fd\u591f\u4f7f\u7528\u4efb\u4f55\u6700\u6709\u610f\u4e49\u7684\u8bed\u8a00\u548c\u5e73\u53f0\u3002\u7ef4\u62a4\u662f\u6709\u6210\u672c\u7684\uff0c\u4f46\u6211\u4eec\u91cd\u89c6\u9009\u62e9\u548c\u81ea\u7531\uff0c\u800c\u4e0d\u662f\u89c4\u5219\u548c\u6d41\u7a0b\u3002\n\u6211\u4eec\u8fd8\u5c1d\u8bd5\u4f9d\u8d56\u7b80\u5355\u7684\u8bed\u8a00\u4e0d\u53ef\u77e5\u7684\u57fa\u7840\u8bbe\u65bd\u5de5\u5177\u3002\u8fd9\u79cd\u65b9\u6cd5\u7701\u53bb\u4e86\u6211\u4eec\u5728\u5e73\u53f0\u4e2d\u96c6\u6210\u8fd9\u4e2a\u6280\u672f\u52a8\u7269\u56ed\u7684\u5f88\u591a\u9ebb\u70e6\u3002\u4f8b\u5982\uff0cStatsD\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u4f8b\u5b50\uff0c\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u3001\u975e\u5e38\u6709\u7528\u3001\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u7684\u670d\u52a1\u3002\u53e6\u4e00\u4e2a\u662fGraylog2\uff1b\u5b83\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fa\u8272\u7684\u6807\u51c6\u89c4\u8303\uff0c\u867d\u7136CL\u4e2d\u6ca1\u6709\u73b0\u6210\u7684\u5e93\u6765\u4f7f\u7528\u5b83\uff0c\u4f46\u662f\u4eceLisp\u751f\u6001\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u53ef\u7528\u7684\u6784\u5efa\u5757\u7ec4\u88c5\u8d77\u6765\u771f\u7684\u5f88\u5bb9\u6613\u3002(=\u3002\u8fd9\u5c31\u662f\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801(\u5176\u4e2d\u5927\u90e8\u5206\u53ea\u662f\u89c4\u8303\u7684\u201c\u9010\u5b57\u201d\u7ffb\u8bd1)\uff1a\n(deun graylog(Message&amp\uff1bkey level Backtrace file line-no)((msg(salza2\uff1acompress-data(babel\uff1astring-to-octets(json\uff1aencode-json-to-string#{\uff1aversion&#34\uff1b1.0&#34\uff1b\uff1aFacility&#34\uff1blisp&#34\uff1b\u7528\u6cd5\uff1ahost*hostname*\uff1a|Short_Message|message\uff1a|full_message|backtrace\uff1atimeamp(local-time\uff1atime-amp-to-unix(local-time\uff1anow))\uff1alevel level\uff1afile file\uff1aline line-no})\uff1acoding\uff1autf-8)&#39\uff1bsalza2\uff1azlib-compress))(usocket\uff1asocket-send(usocket\uff1asocket-connect*graylog-host**graylog-port*\uff1aprotocol\uff1adatagram\uff1adatagram)(usocket\uff1asocket-connect*graylog-host**graylog-port*\uff1aprotocol\uff1adatagram\uff1a", "note_en": "At Grammarly, the foundation of our business, our core grammar engine, is written in Common Lisp. It currently processes more than a thousand sentences per second, is horizontally scalable, and has reliably served in production for almost three years.We noticed that there are very few, if any, accounts of how to deploy Lisp software to modern cloud infrastructure, so we thought that it would be a good idea to share our experience. The Lisp runtime and programming environment provides several unique\u2014albeit obscure\u2014capabilities to support production systems (for the impatient, they are described in the final chapter).\n   Contrary to popular opinion, Lisp is an incredibly practical language for building production systems. There are, in fact, many Lisp systems out there: When you search for an airline ticket on Hipmunk or take a Tube train in London, Lisp programs are being called.\n Our Lisp services are conceptually a classical AI application that operates on huge piles of knowledge created by linguists and researchers. It\u2019s mostly a CPU-bound program, and it is one of the biggest consumers of computing resources in our network.\n We run these services on stock Linux images deployed to AWS. We use\u00a0 SBCL\u00a0for production deployment and\u00a0 CCL\u00a0on most of the developers\u2019 machines. One of the nice things about Lisp is that you have an option of choosing from several mature implementations with different strengths and weaknesses: In our case, we optimized for processing speed on the server and for compilation speed in the dev environment (the reason this is critical for us is described in the later section).\n    At Grammarly, we use many programming languages for developing our services: In addition to JVM languages and JavaScript, we also develop in Erlang, Python, and Go. Proper service encapsulation enables us to use whatever language and platform makes the most sense. There is a cost to maintenance, but we value choice and freedom over rules and processes.\n We also try to rely on simple language-agnostic infrastructure tools. This approach spares us a lot of trouble integrating this zoo of technologies in our platform. For instance, StatsD is a great example of an amazingly simple and useful service that is extremely easy to use. Another one is Graylog2; it provides a brilliant\u00a0 specification\u00a0for logging, and although there was no ready-made library for working with it from CL, it was really easy to assemble from the building blocks already available in the Lisp ecosystem. This is all the code that was needed (and most of it is just \u201cword-by-word\u201d translation of the spec):\n  (defun graylog (message &amp;key level backtrace file line-no)\r (let ((msg (salza2:compress-data\r (babel:string-to-octets\r (json:encode-json-to-string #{\r :version &#34;1.0&#34;\r :facility &#34;lisp&#34;\r :host *hostname*\r :|short_message| message\r :|full_message| backtrace\r :timestamp (local-time:timestamp-to-unix (local-time:now))\r :level level\r :file file\r :line line-no\r })\r :encoding :utf-8)\r &#39;salza2:zlib-compressor)))\r (usocket:socket-send (usocket:socket-connect\r *graylog-host* *graylog-port*\r :protocol :datagram :element-type &#39;(unsigned-byte 8))\r msg (length msg))))", "posttime": "2020-05-25 01:49:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "grammarly,lisp", "title": "\u5728Grammarly\u7684\u751f\u4ea7\u4e2d\u8fd0\u884cLisp", "title_en": "Running Lisp in Production at Grammarly", "transed": 1, "url": "https://www.grammarly.com/blog/engineering/running-lisp-in-production/", "via": "", "real_tags": ["grammarly", "lisp"]}, {"category": "", "categoryclass": "", "imagename": "feff64073e5de02add6d026bcaf96594.jpg", "infoid": 1003540, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8dc3\u5bfc\u822a\u8df3\u8dc3\u641c\u7d22\u9a6c\u8d5b\u5927\u761f\u75ab\u662f\u4e0a\u4e00\u6b21\u897f\u6b27\u7206\u53d1\u7684\u6dcb\u5df4\u817a\u9f20\u75ab\u3002\u8fd9\u79cd\u75be\u75c5\u4e8e1720\u5e74\u62b5\u8fbe\u6cd5\u56fd\u9a6c\u8d5b\uff0c\u603b\u5171\u5bfc\u81f410\u4e07\u4eba\u6b7b\u4ea1\uff1a\u5728\u63a5\u4e0b\u6765\u7684\u4e24\u5e74\u91cc\uff0c\u8be5\u5e02\u67095\u4e07\u4eba\u6b7b\u4ea1\uff0c\u53e6\u67095\u4e07\u4eba\u5728\u4ee5\u5317\u7684\u5468\u8fb9\u7701\u4efd\u548c\u57ce\u9547\u6b7b\u4ea1\u3002[1]\u3002\n\u867d\u7136\u7ecf\u6d4e\u6d3b\u52a8\u53ea\u7528\u4e86\u51e0\u5e74\u65f6\u95f4\u5c31\u6062\u590d\u4e86\uff0c\u4f46\u968f\u7740\u8d38\u6613\u6269\u5927\u5230\u897f\u5370\u5ea6\u7fa4\u5c9b\u548c\u62c9\u4e01\u7f8e\u6d32\uff0c\u76f4\u52301765\u5e74\uff0c\u4eba\u53e3\u624d\u6062\u590d\u52301720\u5e74\u4e4b\u524d\u7684\u6c34\u5e73\u3002\n\u57281580\u5e74\u761f\u75ab\u7ed3\u675f\u65f6\uff0c\u9a6c\u8d5b\u4eba\u6c11\u91c7\u53d6\u4e86\u620f\u5267\u6027\u7684\u63aa\u65bd\uff0c\u8bd5\u56fe\u63a7\u5236\u672a\u6765\u7684\u75be\u75c5\u4f20\u64ad\u3002\u9a6c\u8d5b\u5e02\u8bae\u4f1a\u6210\u7acb\u4e86\u4e00\u4e2a\u536b\u751f\u59d4\u5458\u4f1a\uff0c\u5176\u6210\u5458\u5c06\u4ece\u5e02\u8bae\u4f1a\u548c\u8be5\u5e02\u7684\u533b\u751f\u4e2d\u9009\u51fa\u3002\u8463\u4e8b\u4f1a\u7684\u786e\u5207\u6210\u7acb\u65e5\u671f\u5c1a\u4e0d\u6e05\u695a\uff0c\u4f46\u5b83\u7684\u5b58\u5728\u6700\u65e9\u662f\u57281622\u5e74\u827e\u514b\u65af\u8bae\u4f1a\u7684\u4e00\u7bc7\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u3002\u65b0\u6210\u7acb\u7684\u73af\u536b\u59d4\u5458\u4f1a\u63d0\u51fa\u4e86\u4e00\u7cfb\u5217\u5efa\u8bae\uff0c\u4ee5\u7ef4\u62a4\u57ce\u5e02\u7684\u5065\u5eb7\u3002[2]\u3002\n\u4ed6\u4eec\u5efa\u7acb\u4e86\u4e00\u4e2a\u5b98\u50da\u673a\u6784\u6765\u7ef4\u6301\u9a6c\u8d5b\u7684\u5065\u5eb7\u3002\u9664\u4e86\u4fdd\u62a4\u57ce\u5e02\u514d\u53d7\u5916\u90e8\u6f0f\u6d1e\u7684\u5f71\u54cd\u5916\uff0c\u536b\u751f\u5c40\u8fd8\u5bfb\u6c42\u5efa\u8bbe\u516c\u5171\u57fa\u7840\u8bbe\u65bd\u3002\u9a6c\u8d5b\u7684\u7b2c\u4e00\u5bb6\u516c\u7acb\u533b\u9662\u4e5f\u662f\u5728\u8fd9\u4e00\u65f6\u671f\u5efa\u6210\u7684\uff0c\u5e76\u914d\u5907\u4e86\u5b8c\u6574\u89c4\u6a21\u7684\u533b\u751f\u548c\u62a4\u58eb\u3002\u6b64\u5916\uff0c\u536b\u751f\u59d4\u5458\u4f1a\u8fd8\u8d1f\u8d23\u5f53\u5730\u533b\u751f\u7684\u8ba4\u8bc1\u5de5\u4f5c\u3002\u4ee5\u761f\u75ab\u671f\u95f4\u4f20\u64ad\u7684\u5927\u91cf\u9519\u8bef\u4fe1\u606f\u4e3a\u4f8b\uff0c\u536b\u751f\u59d4\u5458\u4f1a\u8bd5\u56fe\u81f3\u5c11\u5411\u516c\u6c11\u63d0\u4f9b\u4e00\u4efd\u636e\u4fe1\u53ef\u4fe1\u7684\u533b\u751f\u540d\u5355\u3002[3]\u3002\n\u73af\u536b\u59d4\u5458\u4f1a\u662f\u9a6c\u8d5b\u5e02\u6700\u65e9\u6210\u7acb\u7684\u6267\u884c\u673a\u6784\u4e4b\u4e00\u3002\u5b83\u7684\u4eba\u5458\u914d\u5907\u662f\u4e3a\u4e86\u652f\u6301\u8463\u4e8b\u4f1a\u4e0d\u65ad\u589e\u52a0\u7684\u8d23\u4efb\u3002\n\u536b\u751f\u59d4\u5458\u4f1a\u5efa\u7acb\u4e86\u4e00\u4e2a\u4e09\u7ea7\u63a7\u5236\u548c\u68c0\u75ab\u7cfb\u7edf\u3002\u8463\u4e8b\u4f1a\u6210\u5458\u68c0\u67e5\u4e86\u6240\u6709\u5165\u5883\u7684\u8239\u53ea\uff0c\u5e76\u7ed9\u4e86\u5b83\u4eec\u4e09\u4efd\u5065\u5eb7\u8d26\u5355\u4e2d\u7684\u4e00\u4efd\u3002\u7136\u540e\uff0c\u201c\u5065\u5eb7\u8bc1\u660e\u201d\u51b3\u5b9a\u4e86\u8fd9\u8258\u8239\u53ca\u5176\u8d27\u7269\u8fdb\u5165\u8be5\u5e02\u7684\u7ea7\u522b\u3002\n\u4e00\u4e2a\u7531\u536b\u751f\u59d4\u5458\u4f1a\u6210\u5458\u7ec4\u6210\u7684\u4ee3\u8868\u56e2\u5c06\u8fce\u63a5\u6bcf\u4e00\u8258\u5230\u6765\u7684\u8239\u53ea\u3002\u4ed6\u4eec\u5ba1\u9605\u4e86\u8239\u957f\u7684\u65e5\u5fd7\uff0c\u5176\u4e2d\u8bb0\u5f55\u4e86\u8239\u53ea\u767b\u9646\u7684\u6bcf\u4e2a\u57ce\u5e02\uff0c\u5e76\u5c06\u5176\u4e0e\u73af\u536b\u59d4\u5458\u4f1a\u7684\u5730\u4e2d\u6d77\u5730\u533a\u6700\u8fd1\u53d1\u751f\u9f20\u75ab\u4e8b\u4ef6\u4f20\u95fb\u7684\u57ce\u5e02\u7684\u4e3b\u540d\u5355\u8fdb\u884c\u4e86\u6838\u5bf9\u3002\u4ee3\u8868\u56e2\u8fd8\u68c0\u67e5\u4e86\u6240\u6709\u8d27\u7269\u3001\u673a\u7ec4\u4eba\u5458\u548c\u4e58\u5ba2\uff0c\u5bfb\u627e\u53ef\u80fd\u7684\u75be\u75c5\u8ff9\u8c61\u3002\u5982\u679c\u56e2\u961f\u770b\u5230\u4e86\u75be\u75c5\u7684\u8ff9\u8c61\uff0c\u8fd9\u8258\u8239\u5c31\u4e0d\u88ab\u5141\u8bb8\u5728\u9a6c\u8d5b\u7801\u5934\u9760\u5cb8\u3002\n\u5982\u679c\u8fd9\u8258\u8239\u901a\u8fc7\u4e86\u7b2c\u4e00\u6b21\u6d4b\u8bd5\uff0c\u5e76\u4e14\u6ca1\u6709\u75be\u75c5\u7684\u8ff9\u8c61\uff0c\u4f46\u8fd9\u8258\u8239\u7684\u884c\u7a0b\u5305\u62ec\u4e00\u4e2a\u6709\u8bb0\u5f55\u7684\u9f20\u75ab\u6d3b\u52a8\u7684\u57ce\u5e02\uff0c\u90a3\u4e48\u8fd9\u8258\u8239\u5c31\u88ab\u9001\u5230\u9a6c\u8d5b\u6e2f\u5916\u5c9b\u5c7f\u7684\u7b2c\u4e8c\u7ea7\u68c0\u75ab\u3002\u6cfb\u6e56\u7684\u6807\u51c6\u662f\u901a\u98ce(\u4ee5\u9a71\u6563\u88ab\u8ba4\u4e3a\u662f\u75be\u75c5\u7684\u70df\u96fe)\uff0c\u9760\u8fd1\u5927\u6d77\uff0c\u4fbf\u4e8e\u6c9f\u901a\u548c\u62bd\u6c34\u6e05\u6d01\uff0c\u4ee5\u53ca\u4e0e\u4e16\u9694\u7edd\uff0c\u4f46\u5f88\u5bb9\u6613\u5230\u8fbe\u3002[4]\n\u5373\u4f7f\u662f\u4e00\u4efd\u5e72\u51c0\u7684\u8239\u8236\u5065\u5eb7\u8bc1\u660e\uff0c\u4e5f\u9700\u8981\u5728\u79bb\u5c9b\u5730\u70b9\u8fdb\u884c\u81f3\u5c1118\u5929\u7684\u68c0\u75ab\u3002\u5728\u6b64\u671f\u95f4\uff0c\u8239\u5458\u4eec\u5c06\u88ab\u5173\u62bc\u5728\u57ce\u5e02\u5468\u56f4\u5efa\u9020\u7684\u5176\u4e2d\u4e00\u4e2a\u62c9\u624e\u96f7\u6258/\u62c9\u624e\u96f7\u6258\u3002Lazaretto\u8fd8\u6839\u636e\u53d1\u7ed9\u8239\u53ea\u548c\u4e2a\u4eba\u7684\u5065\u5eb7\u8d26\u5355\u8fdb\u884c\u4e86\u5206\u7c7b\u3002\u5e26\u7740\u4e00\u5f20\u5e72\u51c0\u7684\u8d26\u5355\uff0c\u4e00\u540d\u8239\u5458\u524d\u5f80\u6700\u5927\u7684\u68c0\u75ab\u70b9\uff0c\u90a3\u91cc\u914d\u5907\u4e86\u5546\u5e97\uff0c\u5927\u5230\u8db3\u4ee5\u540c\u65f6\u5bb9\u7eb3\u8bb8\u591a\u8239\u53ea\u548c\u8239\u5458\u3002\u5982\u679c\u8239\u5458\u88ab\u8ba4\u4e3a\u53ef\u80fd\u4f1a\u53d1\u751f\u761f\u75ab\uff0c\u4ed6\u4eec\u5c31\u4f1a\u88ab\u9001\u5230\u66f4\u4e0e\u4e16\u9694\u7edd\u7684\u9694\u79bb\u70b9\uff0c\u8be5\u9694\u79bb\u70b9\u5efa\u5728\u9a6c\u8d5b\u6e2f\u6d77\u5cb8\u5916\u7684\u4e00\u4e2a\u5c9b\u5c7f\u4e0a\u3002\u673a\u7ec4\u4eba\u5458\u548c\u4e58\u5ba2\u88ab\u8981\u6c42\u5728\u90a3\u91cc\u7b49\u5f8550\u523060\u5929\uff0c\u770b\u770b\u4ed6\u4eec\u662f\u5426\u51fa\u73b0\u4e86\u9f20\u75ab\u7684\u8ff9\u8c61\u3002[5]\u3002\n\u4e00\u65e6\u673a\u7ec4\u4eba\u5458\u670d\u5211\uff0c\u4ed6\u4eec\u5c31\u88ab\u5141\u8bb8\u8fdb\u5165\u57ce\u5e02\uff0c\u4ee5\u4fbf\u5728\u51fa\u53d1\u524d\u51fa\u552e\u81ea\u5df1\u7684\u5546\u54c1\u5e76\u4eab\u53d7\u751f\u6d3b\u3002\n\u8fd9\u573a\u5927\u7206\u53d1\u7684\u9f20\u75ab\u662f\u7ee714\u4e16\u7eaa\u521d\u5f00\u59cb\u7684\u6bc1\u706d\u6027\u4e8b\u4ef6\u4e4b\u540e\uff0c\u6700\u540e\u4e00\u6b21\u518d\u6b21\u7206\u53d1\u817a\u9f20\u75ab\uff1b\u9a6c\u8d5b\u5df2\u77e5\u7684\u7b2c\u4e00\u4f8b\u817a\u9f20\u75ab\u662f1347\u5e74\u79cb\u5929\u9ed1\u6b7b\u75c5\u7684\u5230\u6765\u3002[6]1720\u5e74\uff0c\u9f20\u75ab\u8036\u5c14\u68ee\u83cc\u4e58\u5750\u5927\u5723\u5b89\u6258\u4e07\u53f7\u5546\u8239\u4ece\u9ece\u51e1\u7279\u62b5\u8fbe\u9a6c\u8d5b\u6e2f\u3002\u8fd9\u8258\u8239\u662f\u4ece\u9ece\u5df4\u5ae9\u7684\u897f\u987f\u51fa\u53d1\u7684\uff0c\u6b64\u524d\u66fe\u505c\u9760\u8fc7\u7684\u9ece\u6ce2\u91cc\u7684\u58eb\u9ea6\u90a3\u548c\u761f\u75ab\u8086\u8650\u7684\u585e\u6d66\u8def\u65af\u3002\u4e00\u540d\u571f\u8033\u5176\u4e58\u5ba2\u662f\u7b2c\u4e00\u4e2a\u88ab\u611f\u67d3\u7684\uff0c\u5f88\u5feb\u5c31\u6b7b\u4ea1\u4e86\uff0c\u7d27\u968f\u5176\u540e\u7684\u662f\u51e0\u540d\u8239\u5458\u548c\u8239\u4e0a\u7684\u5916\u79d1\u533b\u751f\u3002\u8fd9\u8258\u8239\u88ab\u62d2\u7edd\u8fdb\u5165\u5229\u6c83\u8bfa\u6e2f\u3002\n\u5f53\u5b83\u5230\u8fbe\u9a6c\u8d5b\u65f6\uff0c\u6e2f\u52a1\u5c40\u7acb\u5373\u5c06\u5176\u9694\u79bb\u5728\u62c9\u624e\u96f7\u7279\u3002[7]\u5f88\u5927\u7a0b\u5ea6\u4e0a\u7531\u4e8e\u9a6c\u8d5b\u5784\u65ad\u4e86\u6cd5\u56fd\u4e0e\u9ece\u51e1\u7279\u7684\u8d38\u6613\uff0c\u8fd9\u4e2a\u91cd\u8981\u7684\u6e2f\u53e3\u5728\u4ed3\u5e93\u4e2d\u6709\u5927\u91cf\u7684\u8fdb\u53e3\u8d27\u7269\u3002\u5b83\u8fd8\u6269\u5927\u4e86\u4e0e\u4e2d\u4e1c\u5176\u4ed6\u5730\u533a\u548c\u65b0\u4e16\u754c\u65b0\u5174\u5e02\u573a\u7684\u8d38\u6613\u3002\u6709\u6743\u52bf\u7684\u57ce\u5e02\u5546\u4eba\u60f3\u8981\u8fd9\u8258\u8239\u7684\u4e1d\u7ef8\u548c\u68c9\u82b1\u8d27\u7269\u53c2\u52a0\u5728\u5e03\u5207\u5c14\u4e3e\u884c\u7684\u4e2d\u4e16\u7eaa\u5927\u96c6\u5e02\uff0c\u5e76\u5411\u5f53\u5c40\u65bd\u538b\uff0c\u8981\u6c42\u89e3\u9664\u68c0\u75ab\u3002\n\u51e0\u5929\u540e\uff0c\u8be5\u5e02\u7206\u53d1\u4e86\u8fd9\u79cd\u75be\u75c5\u3002\u533b\u9662\u5f88\u5feb\u5c31\u4eba\u6ee1\u4e3a\u60a3\uff0c\u5c45\u6c11\u4eec\u60ca\u614c\u5931\u63aa\uff0c\u628a\u75c5\u4eba\u8d76\u51fa\u4e86\u5bb6\u548c\u57ce\u5e02\u3002\u4e07\u4eba\u5751\u88ab\u6316\u4e86\u51fa\u6765\uff0c\u4f46\u5f88\u5feb\u5c31\u88ab\u586b\u6ee1\u4e86\u3002\u6700\u7ec8\uff0c\u6b7b\u4ea1\u4eba\u6570\u538b\u5012\u4e86\u57ce\u5e02\u516c\u5171\u536b\u751f\u52aa\u529b\uff0c\u76f4\u5230\u6570\u5343\u5177\u8eab\u4f53\u6563\u843d\u5728\u57ce\u5e02\u5468\u56f4\uff0c\u6210\u5806\u8eba\u5728\u90a3\u91cc\u3002\n\u963b\u6b62\u9f20\u75ab\u8513\u5ef6\u7684\u52aa\u529b\u5305\u62ec\u4e00\u9879\u827e\u514b\u65af\u548c\u5e73\u6cd5\u6848\uff0c\u8be5\u6cd5\u6848\u5bf9\u9a6c\u8d5b\u548c\u666e\u7f57\u65fa\u65af\u5176\u4ed6\u5730\u533a\u4e4b\u95f4\u7684\u4efb\u4f55\u901a\u8baf\u90fd\u5904\u4ee5\u6b7b\u5211\u3002\u4e3a\u4e86\u52a0\u5f3a\u8fd9\u79cd\u9694\u79bb\uff0c\u5728\u6574\u4e2a\u4e61\u6751\u7ad6\u8d77\u4e86\u4e00\u5835\u761f\u75ab\u5899\uff0c\u6216\u79f0\u201c\u761f\u75ab\u5899\u201d(Mur De La Peste)\u3002\u8fd9\u5835\u5899\u662f\u7528\u5e72\u77f3\u5934\u5efa\u9020\u7684\uff0c\u9ad82\u7c73\uff0c\u539a70\u5398\u7c73\uff0c\u5899\u540e\u6709\u5c97\u54e8\u3002\u5728\u6c83\u514b\u5362\u5179\u9ad8\u539f\u7684\u4e0d\u540c\u5730\u65b9\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\u957f\u57ce\u7684\u9057\u8ff9\u3002\n\u5728\u4e24\u5e74\u7684\u65f6\u95f4\u91cc\uff0c\u9a6c\u8d5b9\u4e07\u603b\u4eba\u53e3\u4e2d\u670950000\u4eba\u6b7b\u4ea1\u3002\u968f\u7740\u9f20\u75ab\u5411\u5317\u8513\u5ef6\uff0c\u5176\u4ed6\u5730\u533a\u53c8\u67095\u4e07\u4eba\u6b7b\u4ea1\uff0c\u6700\u7ec8\u5230\u8fbe\u666e\u7f57\u65fa\u65af\u7684\u827e\u514b\u65af\u3001\u963f\u5c14\u52d2\u3001\u963f\u666e\u7279\u548c\u571f\u4f26\u3002\u636e\u4f30\u8ba1\uff0c\u66f4\u5927\u8303\u56f4\u5185\u4eba\u53e3\u7684\u603b\u4f53\u6b7b\u4ea1\u7387\u572825%-50%\u4e4b\u95f4\uff0c\u5176\u4e2d\u9a6c\u8d5b\u5e02\u4e3a40%\uff0c\u571f\u4f26\u5730\u533a\u4e3a50%\u4ee5\u4e0a\uff0c\u827e\u514b\u65af\u548c\u963f\u5c14\u52d2\u5730\u533a\u4e3a25%\u3002\n\u9f20\u75ab\u6d88\u9000\u540e\uff0c\u7687\u5bb6\u653f\u5e9c\u52a0\u5f3a\u4e86\u6e2f\u53e3\u7684\u9f20\u75ab\u9632\u5fa1\uff0c\u4fee\u5efa\u4e86\u6c34\u8fb9\u7684\u62c9\u624e\u96f7\u7279\u7ade\u6280\u573a(Lazaret d&#39\uff1bArenc)\u3002\u4e00\u676115\u82f1\u5c3a\u9ad8\u7684\u53cc\u7ebf\u56f4\u5899\u73af\u7ed5\u7740\u7c89\u5237\u6210\u767d\u8272\u7684\u9662\u843d\uff0c\u5728\u6c34\u8fb9\u88ab\u523a\u7a7f\uff0c\u4ee5\u4fbf\u4ece\u9a73\u8239\u4e0a\u5378\u8d27\u3002\u5546\u4eba\u4eec\u88ab\u8981\u6c42\u5728\u6d77\u6e2f\u66f4\u8fdc\u7684\u4e00\u4e2a\u5c9b\u5c7f\u4e0a\u901a\u8fc7\u68c0\u67e5\uff0c\u90a3\u91cc\u7684\u8239\u5458\u548c\u8d27\u7269\u90fd\u8981\u63a5\u53d7\u68c0\u67e5\u3002[8]\n1998\u5e74\uff0cM\u00e9diterran\u00e9e\u5927\u5b66\u7684\u5b66\u8005\u6316\u6398\u4e86\u4e00\u5904\u9ed1\u6b7b\u75c5\u66b4\u53d1\u53d7\u5bb3\u8005\u7684\u96c6\u4f53\u575f\u5893\u3002[9]\u8fd9\u6b21\u6316\u6398\u4e3a\u7814\u7a76\u9a6c\u8d5b\u7b2c\u4e8c\u533a\u88ab\u79f0\u4e3a\u89c2\u5bdf\u4fee\u9053\u9662\u7684200\u591a\u5177\u9ab7\u9ac5\u63d0\u4f9b\u4e86\u673a\u4f1a\u3002\u9664\u4e86\u73b0\u4ee3\u5b9e\u9a8c\u5ba4\u6d4b\u8bd5\u5916\uff0c\u8fd8\u7814\u7a76\u4e86\u6863\u6848\u8bb0\u5f55\uff0c\u4ee5\u786e\u5b9a\u56f4\u7ed5\u8fd9\u4e2a\u96c6\u4f53\u575f\u5893\u7684\u4f7f\u7528\u6761\u4ef6\u548c\u65e5\u671f\u3002\u8fd9\u79cd\u591a\u5b66\u79d1\u65b9\u6cd5\u63ed\u793a\u4e86\u5173\u4e8e1722\u5e74\u6d41\u884c\u75c5\u7684\u4ee5\u524d\u4e0d\u4e3a\u4eba\u77e5\u7684\u4e8b\u5b9e\u548c\u89c1\u89e3\u3002\u91cd\u5efa\u4e86\u4e00\u5177\u8eab\u4f53\u7684\u5934\u9aa8\uff0c\u4e00\u540d15\u5c81\u7684\u7537\u5b69\uff0c\u63ed\u793a\u4e861722\u5e74\u6625\u5929\u5c38\u68c0\u7684\u7b2c\u4e00\u4e2a\u5386\u53f2\u8bc1\u636e\u3002\u4f7f\u7528\u7684\u89e3\u5256\u5b66\u6280\u672f\u4f3c\u4e4e\u4e0e1708\u5e74\u7684\u4e00\u672c\u5916\u79d1\u4e66\u4e2d\u63cf\u8ff0\u7684\u76f8\u540c\u3002\n^Duchene\u548cContrucci(2004)\uff0c\u5e74\u8868\u3002\u9a6c\u8d5b\u57281348\u5e74\u906d\u53d7\u4e86\u6b27\u6d32\u9ed1\u6b7b\u75c5\u7684\u6d41\u884c(\u76f4\u52301361\u5e74\u624d\u95f4\u6b47\u6027\u53d1\u4f5c)\uff0c\u57281580\u5e74\u548c1582\u5e74\uff0c\u4ee5\u53ca\u57281649-1650\u5e74\u3002\n\u5728\u897f\u8499\u00b7\u6c99\u9a6c\u7684\u201c\u98ce\u666f\u4e0e\u8bb0\u5fc6\u201d(1995)\uff1a245f\uff1b\u4e2d\u7b80\u8981\u63d0\u5230\u4e86\u201c\u9a6c\u8d5b\u7684\u6ce5\u70ad\u4e0e\u61d2\u60f0\u201d(La peste et les lazarets de marseille&#34\uff1b\uff1bLa peste et les lazarets de marseille)\u3002\n\u5e0c\u5c14\u5fb7\u65af\u6d77\u9ed8\uff0c\u5f17\u6717\u7d22\u74e6(1980)\uff0c\u201c\u9a6c\u8d5b\u5723\u5f92\u534f\u4f1a\u201d(Le Bureau de la Sant\u00e9de Marseille Sous l&#39\uff1bAncien R\u00e9gime)\u3002\u666e\u7f57\u65fa\u65af\u6cd5\u56fd\u5386\u53f2\u5b66\u4f1a\u201c\u4f20\u67d3\u75c5\u7684\u518d\u4f20\u64ad\u201d(Le Renfermement de la Conagagion\uff0cF\u00e9d\u00e9ation History orique de Provence)\u3002\n\u5fb7\u6c83\uff0c\u514b\u91cc\u65af\u8482\u5b89\u3002\u5bfc\u81f4\u9a6c\u8d5b\u5927\u761f\u75ab\u7684\u5c0f\u758f\u5ffd(1720-1723)\uff1a\u8fc7\u53bb\u7684\u6559\u8bad\u3002\u611f\u67d3\u3001\u9057\u4f20\u5b66\u548c\u8fdb\u5316\u8bba\u300214(2013\u5e743\u6708)\uff1a169-185\u3002doi\uff1a10.1016/j.meegid.2012.11.016.\u3002\n\u675c\u5207\u5185\uff0c\u7f57\u6770\uff1bContrucci\uff0c\u8ba9(2004\u5e74)\uff0c\u9a6c\u8d5b\uff0c2,600\u548cd&#39\uff1b\u5386\u53f2(\u6cd5\u8bed)\uff0c\u6cd5\u4e9a\u5fb7\uff0cISBN978-2-213-60197-7\uff0c\u7b2c42\u7ae0\uff0c\u7b2c360-378\u9875\u3002\n\u7c73\u6b47\u5c14\u00b7\u897f\u683c\u8bfa\u5229\uff1b\u585e\u5409\uff0c\u4f0a\u838e\u8d1d\u5c14\uff1b\u6bd4\u62c9\u672c\uff0c\u8ba9-\u8bfa\u57c3\u5c14\uff1b\u675c\u56fe\u5c14\uff0c\u5965\u5229\u7ef4\u5c14\uff1b\u8d1d\u5c14\uff0c\u4fdd\u7f57(2002\u5e74)\uff0c\u201c\u6d41\u884c\u75c5\u80cc\u666f\u4e0b\u7684\u53e4\u4eba\u53e3\u5b66\u548c\u5386\u53f2\u4eba\u53e3\u5b66\uff1a18\u4e16\u7eaa\u666e\u7f57\u65fa\u65af\u7684\u9f20\u75ab\u201d\uff0c\u4eba\u53e357\uff1a829-854\uff0cJSTOR\uff0c3246618", "note_en": "Jump to navigation  Jump to search  The  Great Plague of Marseille was the last major outbreak of  bubonic plague in western Europe. Arriving in  Marseille,  France in 1720, the disease killed a total of 100,000 people: 50,000 in the city during the next two years and another 50,000 to the north in surrounding provinces and towns.  [1]\n While economic activity took only a few years to recover, as trade expanded to the West Indies and Latin America, it was not until 1765 that the population returned to its pre-1720 level.\n    At the end of the plague of 1580, the people at Marseille took dramatic measures to attempt to control the future spread of disease. The city council of Marseille established a sanitation board, whose members were to be drawn from the city council as well as the doctors of the city. The exact founding date of the board is unknown, but its existence is first mentioned in a 1622 text of the  Parliament of Aix. The newly established sanitation board made a series of recommendations to maintain the health of the city.  [2]\n They established a bureaucracy to maintain the health of Marseille. In addition to protecting the city from exterior vulnerabilities, the sanitation board sought to build a public infrastructure. The first public hospital of Marseille was also built during this time period, and was given a full-sized staff of doctors and nurses. Additionally, the sanitation board was responsible for the accreditation of local doctors. Citing the vast amount of misinformation that propagates during a plague, the sanitation board sought to, at a minimum, provide citizens with a list of doctors who were believed to be credible.  [3]\n The sanitation board was one of the first executive bodies formed by the city of Marseille. It was staffed to support the board&#39;s increasing responsibilities.\n  The Sanitation Board established a three-tiered control and quarantine system. Members of the board inspected all incoming ships and gave them one of three &#34;bills of health&#34;. The \u201cbill of health\u201d then determined the level of access to the city by the ship and its cargo.\n A delegation of members of the sanitation board was to greet every incoming ship. They reviewed the captain\u2019s log, which recorded every city the ship had landed in, and checked it against the sanitation board&#39;s master list of cities throughout the Mediterranean that had rumors of recent plague incidents. The delegation also inspected all the cargo, crew and passengers, looking for signs of possible disease. If the team saw signs of disease, the ship was not allowed to land at a Marseille dock.\n If the ship passed that first test and there were no signs of disease, but the ship\u2019s itinerary included a city with documented plague activity, the ship was sent to the second tier of quarantine, at islands outside of Marseille harbour. The criteria for the   lazarets were ventilation (to drive off what was thought to be the miasma of disease), be near the sea to facilitate communication and pumping of water to clean, and to be isolated yet easily accessible.  [4]\n Even a clean bill of health for a ship required a minimum of 18 days&#39; quarantine at the off island location. During such time, the crew would be held in one of the lazarettos/lazarets that were constructed around the city. The lazarettos were also classified in relation to bills of health given to the ship and individuals. With a clean bill, a crewman went to the largest quarantine site, which was equipped with stores and was large enough to accommodate many ships and crews at a time. If crew were believed subject to a possibility of plague, they were sent to the more isolated quarantine site, which was built on an island off the coast of the Marseille harbour. The crew and passengers were required to wait there for 50 to 60 days to see if they developed any sign of plague.  [5]\n Once crews served their time, they were allowed into the city in order to sell their goods and enjoy themselves prior to departure.\n   This great outburst of plague was the last recurrence of a  pandemic of bubonic plague, following the devastating episodes which began in the early-fourteenth century; the first known instance of bubonic plague in Marseille was the arrival of the  Black Death in the autumn of 1347.  [6] In 1720,   Yersinia pestis arrived at the port of Marseille from the  Levant upon the merchant ship  Grand-Saint-Antoine. The vessel had departed from  Sidon in  Lebanon, having previously called at  Smyrna,  Tripoli, and plague-ridden  Cyprus. A Turkish passenger was the first to be infected and soon died, followed by several crew members and the ship&#39;s surgeon. The ship was refused entry to the port of  Livorno.\n When it arrived at Marseille, it was promptly placed under  quarantine in the   lazaret by the port authorities.  [7] Due largely to Marseille&#39;s monopoly on French trade with the Levant, this important port had a large stock of imported goods in warehouses. It was also expanding its trade with other areas of the Middle East and emerging markets in the New World. Powerful city merchants wanted the  silk and  cotton cargo of the ship for the great medieval fair at  Beaucaire and pressured authorities to lift the quarantine.\n  A few days later, the disease broke out in the city. Hospitals were quickly overwhelmed, and residents panicked, driving the sick from their homes and out of the city. Mass graves were dug but were quickly filled. Eventually the number of dead overcame city public health efforts, until thousands of corpses lay scattered and in piles around the city.\n Attempts to stop the spread of plague included an Act of the  Parlement of Aix that levied the death penalty for any communication between Marseille and the rest of Provence. To enforce this separation, a plague wall, or  mur de la peste, was erected across the countryside. The wall was built of dry stone, 2 m high and 70 cm thick, with guard posts set back from the wall. Remains of the wall can still be seen in different parts of the Plateau de Vaucluse.\n During a two-year period, 50,000 of Marseille&#39;s total population of 90,000 died. An additional 50,000 people in other areas succumbed as the plague spread north, eventually reaching  Aix-en-Provence,  Arles,  Apt and  Toulon. Estimates indicate an overall death rate of between 25%-50% for the population in the larger area, with the city of Marseille at 40%, the area of Toulon at above 50%, and the area of Aix and Arles at 25%.\n After the plague subsided, the royal government strengthened the plague defenses of the port, building the waterside   Lazaret d&#39;Arenc. A double line of fifteen-foot walls ringed the whitewashed compound, pierced on the waterside to permit the offloading of cargo from lighters. Merchantmen were required to pass inspection at an island further out in the harbour, where crews and cargoes were examined.  [8]\n   In 1998, an excavation of a mass grave of victims of the bubonic plague outbreak was conducted by scholars from the  Universit\u00e9 de la M\u00e9diterran\u00e9e.  [9] The excavation provided an opportunity to study more than 200 skeletons from an area in the second  arrondissement in Marseille, known as the Monastery of the Observance. In addition to modern laboratory testing, archival records were studied to determine the conditions and dates surrounding the use of this mass grave. This multidisciplinary approach revealed previously unknown facts and insights concerning the epidemic of 1722. The reconstruction of the skull of one body, a 15-year-old boy, revealed the first historical evidence of an  autopsy dated to the spring of 1722. The anatomic techniques used appear to be identical to those described in a surgical book dating from 1708.\n    ^  Duchene and Contrucci (2004), Chronology. Marseille suffered from epidemics of the European Black Death in 1348 (recurring intermittently until 1361), in 1580 and 1582, and in 1649-1650.\n  ^   &#34;La peste et les lazarets de Marseille&#34;; briefly noted in  Simon Schama,  Landscape and Memory (1995): 245f.\n  Hildesheimer, Fran\u00e7oise (1980),  Le Bureau de la sant\u00e9 de Marseille sous l&#39;Ancien R\u00e9gime. Le renfermement de la contagion, F\u00e9d\u00e9ration historique de Provence\n Devaux, Christian.  &#34;Small oversights that led to the Great Plague of Marseille (1720\u20131723): Lessons from the past&#34;.  Infection, Genetics and Evolution.  14 (March 2013): 169\u2013185.  doi: 10.1016/j.meegid.2012.11.016 .\n Duch\u00eane, Roger; Contrucci, Jean (2004),    Marseille, 2,600 ans d&#39;histoire (in French), Fayard,  ISBN\u00a0  978-2-213-60197-7  , Chapter 42, pages 360\u2013378.\n Signoli, Michel; Seguy, Isabelle; Biraben, Jean-Noel; Dutour, Olivier; Belle, Paul (2002), &#34;Paleodemography and Historical Demography in the Context of an Epidemic: Plague in Provence in the Eighteenth Century&#34;,  Population,  57: 829\u2013854,  JSTOR\u00a0 3246618", "posttime": "2020-05-25 01:48:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9a6c\u8d5b,plague", "title": "\u9a6c\u8d5b\u5927\u761f\u75ab", "title_en": "The Great Plague of Marseille", "transed": 1, "url": "https://en.wikipedia.org/wiki/Great_Plague_of_Marseille", "via": "", "real_tags": ["\u9a6c\u8d5b", "plague"]}]