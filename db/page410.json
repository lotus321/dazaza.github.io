[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1000299, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8be5\u5b58\u50a8\u5e93\u5305\u542bArduino\u5e93\u3001KiCAD PCB\u8bbe\u8ba1\u6587\u4ef6\u3001Gerber\u751f\u4ea7\u6587\u4ef6\u3001BOM\u548c\u6765\u81ea2018\u5e74OSHWA\u5cf0\u4f1a\u7684\u5f00\u6e90\u8ba1\u7b97\u673a\u9f20\u6807\u793c\u5305\u9879\u76ee\u7684\u7ec4\u88c5\u8bf4\u660e\u3002\u7535\u8def\u8bbe\u8ba1\u3001PCB\u5e03\u5c40\u548c\u4ee3\u7801\u7531Joel Murphy(\u53c8\u540dbiomurph|@SafeForRobots)\u4e8e2018\u5e74\u590f\u5929\u5236\u4f5c\u3002\u9f20\u6807\u6eda\u8f6e\u548c\u6eda\u8f6e\u652f\u67b6\u662f\u4e0eEugene Chang\u5408\u4f5c\u8bbe\u8ba1\u7684\uff0c\u7531\u6709\u5f62\u521b\u610f\u516c\u53f8\u5236\u9020\u3002\u751f\u4ea7\u7684PCB\u677f\u662f\u7ecf\u8fc7\u5236\u4f5c\u548c\u586b\u5145\u7684\u3002\n\u662f\u7684\uff0c\u662f\u7684\uff0c\u786e\u5b9e\u662f\u8fd9\u6837\u3002\u51e0\u5e74\u524d\uff0c\u6211\u8bd5\u56fe\u5728\u5f00\u6e90\u786c\u4ef6\u8bbe\u8ba1\u3001\u751f\u4ea7\u548c\u9500\u552e\u65b9\u9762\u53d6\u5f97\u6210\u529f\u3002\u6211\u5728SparkFun\u4e4b\u524d\u5c31\u505a\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u4f46\u5b83\u4ece\u6765\u6ca1\u6709\u8d77\u98de\u8fc7\u3002\u6211\u4e00\u76f4\u5750\u5728\u90a3\u51e0\u5929\u7684\u4e00\u5c0f\u5806\u96f6\u90e8\u4ef6\u4e0a\uff0c\u4eca\u5e74\u590f\u5929\u6211\u51b3\u5b9a\u628a\u90a3\u4e00\u5806\u96f6\u914d\u4ef6\u780d\u6389\u3002\u90a3\u5c31\u7ed9\u4f60\u5427\u3002\u4e00\u6b3e\u529f\u80fd\u9f50\u5168\u7684\u7535\u8111\u9f20\u6807\uff0c\u8ba9\u60a8\u968f\u5fc3\u6240\u6b32\u5730\u4fee\u6539\u548c\u4fee\u6539\u3002\u6b22\u8fce\u5149\u4e34\uff01\n\u5982\u679c\u60a8\u6709\u5174\u8da3\u4fee\u6539\u8bbe\u8ba1\u6587\u4ef6\u4ee5\u66f4\u65b0\u6b64\u9879\u76ee\uff0c\u6211\u53d1\u73b0\u4ecd\u5728\u9500\u552e\u6b64\u7c7b\u5149\u5b66\u9f20\u6807\u4f20\u611f\u5668\u7684\u5730\u65b9\u662f\u4e00\u5bb6\u540d\u4e3aPixArt\u7684\u516c\u53f8\uff0c\u8be5\u516c\u53f8\u6709\u591a\u79cd\u4f20\u611f\u5668\u53ef\u4f9b\u9009\u62e9\u3002\u6211\u7684\u76ee\u6807\u4e4b\u4e00\u5c31\u662f\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u6210\u4e3a\u7b2c\u4e00\u6279\u77e5\u9053\u6211\u4ec0\u4e48\u65f6\u5019\u6709\u5de5\u4f5c\u539f\u578b\u7684\u4eba\uff0c\u8bf7\u770b\u8fd9\u4e2a\u56de\u8d2d\u3002\n\u4e0b\u8f7d\u6b64\u56de\u8d2d\u7684ZIP\u6216\u514b\u9686\u5b83\u3002\u7136\u540e\u5c06\u540d\u4e3aMouse\u7684\u6587\u4ef6\u79fb\u52a8\u6216\u590d\u5236\u5230Documents&gt\uff1bArduino&&gt;Library\u6587\u4ef6\u5939\u4e2d\u3002\u6253\u5f00\u6216\u91cd\u65b0\u542f\u52a8Arduino\uff0cThengoto File&gt\uff1bExamples&gt\uff1bMousey&gt\uff1bOpenMouse\u4ee5\u67e5\u627e\u5728OpenMouse\u4e0a\u8fd0\u884c\u7684\u8349\u56fe\u3002\n\u8fd9\u6b3e\u5f00\u6e90\u8ba1\u7b97\u673a\u9f20\u6807\u662f\u56f4\u7ed5ATmega32U4\u6784\u5efa\u7684\uff0c\u5e26\u6709Arduino Leonardo\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\u3002\u5b83\u5df2\u7ecf\u7528Mousey\u5e93\u4e2d\u7684\u793a\u4f8b\u8349\u56fe\u8fdb\u884c\u4e86\u7f16\u7a0b\u3002\u6709\u4e24\u79cd\u64cd\u4f5c\u6a21\u5f0fHID\u548cNOT-HID\u3002\u4f7f\u7528\u9f20\u6807\u5de6\u4fa7\u7684\u6ed1\u52a8\u5f00\u5173\u9009\u62e9\u6a21\u5f0f\u3002\n\u5f53\u6ed1\u52a8\u5f00\u5173\u4f4d\u4e8e\u8ddd\u79bb\u6bcf\u5b54\u886c\u57ab\u6837\u673a\u533a\u57df\u6700\u8fd1\u7684\u4e00\u4fa7(\u4e5f\u79f0\u4e3a\u5411\u4e0b)\u65f6\uff0c\u9f20\u6807\u5904\u4e8eHID\u6a21\u5f0f\u3002\u5f53\u63d2\u5165\u5fae\u578bUSB\u7535\u7f06\u65f6\uff0c\u9f20\u6807\u5c06\u8bfb\u53d6\u4f20\u611f\u5668(\u8f6e\u5b50\u3001\u6309\u94ae\u3001\u5149\u5b66\u4f20\u611f\u5668)\uff0c\u5176\u529f\u80fd\u5c31\u50cf\u8fde\u63a5\u5230\u8ba1\u7b97\u673a\u4e0a\u7684\u9f20\u6807\u4e00\u6837\uff01\n\u5f53\u6ed1\u52a8\u5f00\u5173\u4f4d\u4e8e\u6700\u9760\u8fd17\u9488\u6bcd\u63a5\u5934\u7684\u4e00\u4fa7(\u4e5f\u79f0\u4e3a\u5411\u4e0a)\u65f6\uff0c\u9f20\u6807\u5904\u4e8e\u975eHID\u6a21\u5f0f\u3002\u5f53\u63d2\u5165\u5fae\u578bUSB\u7ebf\u65f6\uff0c\u9f20\u6807\u5c06\u8bfb\u53d6\u4f20\u611f\u5668(\u8f6e\u5b50\u3001\u6309\u94ae\u3001\u5149\u5b66\u4f20\u611f\u5668)\uff0c\u5e76\u4ee5115200\u6ce2\u7279\u7387\u901a\u8fc7\u4e32\u884c\u53d1\u9001\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u6253\u5f00\u4efb\u4f55\u4e32\u884c\u7ec8\u7aef\u4ece\u9f20\u6807\u67e5\u770b\u6570\u636e\u3002\n\u5c06\u5c0f\u9f20\u5305\u88c5\u6210HID\u4f4d\u7f6e\u7684HID\u9009\u62e9\u5f00\u5173\u3002\u5982\u679c\u60a8\u5c06\u9f20\u6807\u63d2\u5165\u8ba1\u7b97\u673a\uff0c\u4f46\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u9f20\u6807\u4e0d\u540c\uff0c\u8bf7\u68c0\u67e5\u4ee5\u786e\u4fddHID\u5f00\u5173\u5904\u4e8eHID\u6a21\u5f0f\u3002\u6807\u8bb0\u4e3aSW1\u7684\u5c0f\u89e6\u63a7\u5f00\u5173\u662f\u83b1\u6602\u7eb3\u591a\u7684\u590d\u4f4d\u6309\u94ae\u3002\u60a8\u53ef\u4ee5\u5373\u65f6\u5207\u6362\u6a21\u5f0f\uff0c\u7136\u540e\u6309\u4e0b\u6b64\u91cd\u7f6e\u6309\u94ae\u5373\u53ef\u66f4\u6539\u6a21\u5f0f\uff0c\u800c\u65e0\u9700\u62d4\u4e0b\u9f20\u6807\u63d2\u5934\u3002\u5982\u679c\u6240\u6709\u65b9\u6cd5\u90fd\u5931\u8d25\u4e86\uff0c\u8bf7\u4f7f\u7528Mousey\u4e2d\u7684\u793a\u4f8b\u4e2d\u7684OpenMouse.ino\u4ee3\u7801\u91cd\u65b0\u7f16\u7a0b\u9f20\u6807\u3002", "note_en": "This repository holds the Arduino library, KiCAD PCB design files, gerber production files, BOM, and assembly instructions for the open-source computer mouse goodie bag item from the 2018 OSHWA Summit. The circuit design, PCB layout, and code were produced by Joel Murphy (aka biomurph | @SafeForRobots) in the Summer of 2018. The mouse wheel and wheel holder were designed in collaboration with Eugene Chang, and manufactured by  Tangible Creative. The production PCB boards were fabricated and stuffed  ...\n      Yes, yes it did. Years ago, I tried to make a go of it in open-source hardware design, production and sales. I made something like  this before SparkFun did, but it never got off the ground. I&#39;ve been sitting on a small pile of components from those days, and this summer I decided that I have to chip away at that pile. So here you go. A fully functional computer mouse for you to hack and modify to your hearts delight. You&#39;re welcome!\n If you are interested in modifying the design files to bring this project up to date, the one place that I have found that still sells these kinds of optical mouse sensors is a company called  PixArt that has a variety of sensors to choose from. One of my goals is to do just that, so watch this repo if you want to be among the first to know when I have a working prototype.\n  Either download the ZIP of this repo or clone it. Then move or copy the file named  Mouseyinto your  Documents &gt; Arduino &gt; libraries folder. Open or restart Arduino, Thengoto  File &gt; Examples &gt; Mousey &gt; OpenMouse to find the sketch that runs on OpenMouse.\n  This open-source computer mouse is built around an ATmega32u4 with the Arduino Leonardo bootloader. It has already been programmed with the example sketch from the Mousey library. There are two modes of operation HID and Not-HID. Modes are selected using the slide switch on the left side of the mouse.\n  When the slide switch is on the side closest to the pad per hole prototyping area (aka DOWN), the mouse is in HID mode. When plugged into a micro USB cable, the mouse will read the sensors (wheel, buttons, optical sensor), and function just like a mouse attached to your computer!\n  When the slide switch is on the side closest to the 7 pin female header (aka UP), the mouse is in the Not-HID mode. When plugged into a micro USB cable, the mouse will read the sensors (wheel, buttons, optical sensor) and send the data it gets over serial at 115200 baud. You can open any serial terminal to view the data from the mouse.\n  The mice were packaged with the HID select switch in the HID position. If you plug your mouse in to a computer and it doesn&#39;t work like a mouse should, then check to make sure that the HID switch is in HID mode. The small tact switch labeled  SW1is the reset button for the Leonardo. You can switch modes on the fly, and press this reset button to change modes without unplugging your mouse. If all else fails, re-program the mouse with the OpenMouse.ino code from the example in the Mousey  ...", "posttime": "2020-05-02 18:05:13", "tags": "\u786c\u4ef6,\u5f00\u6e90,\u9f20\u6807,open,mouse", "title": "\u5f00\u6e90\u9f20\u6807\u56fa\u4ef6\u548c\u786c\u4ef6\u5b58\u50a8\u5e93", "title_en": "Repository for Open Source Mouse Firmware and Hardware", "transed": 0, "url": "https://github.com/biomurph/Mouse", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u786c\u4ef6", "\u5f00\u6e90", "\u9f20\u6807", "open", "mouse"]}, {"category": "", "categoryclass": "", "imagename": "f92429cfa9d112778efdf62f0b3c702b.jpg", "infoid": 1000298, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0e\u4e16\u754c\u5176\u4ed6\u5730\u533a\u4e00\u6837\uff0c\u52a0\u62ff\u5927\u65e0\u4eba\u673a\u5236\u9020\u5546Draganfly\u4e00\u76f4\u5728\u7126\u6025\u5730\u5173\u6ce8\u7740\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\u30022\u6708\u4e2d\u65ec\uff0c\u5f53\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u5f00\u59cb\u5728\u534e\u76db\u987f\u7597\u517b\u9662\u5982\u96e8\u540e\u6625\u7b0b\u822c\u6d8c\u73b0\u65f6\uff0c\u8be5\u56e2\u961f\u5f00\u59cb\u96c6\u601d\u5e7f\u76ca\u3002\u5230\u4eca\u5e743\u6708\uff0cDraganFly\u5df2\u7ecf\u83b7\u5f97\u4e86\u4ece\u7a7a\u4e2d\u63d0\u4f9b\u793e\u4ea4\u8ddd\u79bb\u548c\u5065\u5eb7\u76d1\u6d4b\u670d\u52a1\u6240\u9700\u7684\u673a\u5668\u89c6\u89c9\u548c\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u8bb8\u53ef\u3002\u6d4b\u8bd5\u8fd9\u9879\u6280\u672f\u7684\u9700\u6c42\u662f\u201c\u6c38\u4e0d\u6ee1\u8db3\u7684\u201d\uff0c\u4e0d\u4ec5\u6765\u81ea\u653f\u5e9c\u548c\u6267\u6cd5\u90e8\u95e8\uff0c\u4e5f\u6765\u81ea\u536b\u751f\u90e8\u95e8\u2026\u2026\u3002\n\u4f46\u6545\u4e8b\u5e76\u6ca1\u6709\u5230\u6b64\u4e3a\u6b62\u3002\u5728\u897f\u6e2f\u98de\u884c\u5458\u7a81\u7136\u7ec8\u6b62\u524d\u540e\uff0c\u6211\u4eec\u4e0eDraganFly\u9996\u5e2d\u6267\u884c\u5b98\u5361\u6885\u9686\u00b7\u5207\u5c14(Cameron Chell)\u8fdb\u884c\u4e86\u4ea4\u8c08\u3002\u65e0\u4eba\u673a\u516c\u53f8\u8fd8\u6709\u4e24\u540d\u98de\u884c\u5458\u8ba1\u5212\u5728\u4e0d\u5230\u4e24\u5468\u5185\u5f00\u59cb\u5de5\u4f5c\u3002\u5207\u5c14\u8bf4\uff0c\u6765\u81ea\u5176\u4ed6\u53f8\u6cd5\u7ba1\u8f96\u533a\u7684\u8bf7\u6c42\u5df2\u7ecf\u201c\u6df9\u6ca1\u201d\u4e86\u201c\u873b\u8713\u201d\uff0c\u800c\u79c1\u4eba\u65b9\u9762\u7684\u6570\u5b57\u201c\u751a\u81f3\u66f4\u591a\u201d\u3002\u201c\u4e8b\u5b9e\u4e0a\uff0c\u63a5\u4e0b\u6765\u7684\u51e0\u540d\u7f8e\u56fd\u98de\u884c\u5458\u5c06\u5728\u79c1\u8425\u90e8\u95e8\u3002\u4e00\u79cd\u662f\u57fa\u4e8e\u65e0\u4eba\u673a\u7684\uff0c\u53e6\u4e00\u79cd\u662f\u57fa\u4e8e\u8bbe\u65bd\u7684\u3002\u53e6\u5916..\u3002\n\u968f\u7740\u8054\u90a6\u548c\u5730\u65b9\u653f\u5e9c\u52aa\u529b\u5e94\u5bf9\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c-\u4ece\u8ddf\u8e2a\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\u5230\u5224\u65ad\u4f55\u65f6\u53d6\u6d88\u9650\u5236-\u6bcf\u4e2a\u4eba\u90fd\u5728\u66f4\u5bc6\u5207\u5730\u5173\u6ce8\u65e0\u4eba\u673a\u548c\u673a\u5668\u4eba\u7b49\u81ea\u4e3b\u6280\u672f\u3002\u516c\u5171\u548c\u79c1\u8425\u90e8\u95e8\u8feb\u5207\u9700\u8981\u6280\u672f\u6765\u5e2e\u52a9\u9650\u5236\u4eba\u7c7b\u63a5\u89e6\uff0c\u5e76\u63d0\u4f9b\u6709\u5173\u793e\u4f1a\u8ddd\u79bb\u7b49\u63aa\u65bd\u7684\u5b9e\u65bd\u548c\u6709\u6548\u6027\u7684\u65e9\u671f\u68c0\u6d4b\u6570\u636e\u3002\u4efb\u4f55\u4f9d\u8d56\u4eba\u5de5\u4ea4\u4e92\u7684\u4e1a\u52a1\uff0c\u65e0\u8bba\u662f\u4e0e\u5ba2\u6237\u7684\u4ea4\u4e92.\u3002\n\u4e0e\u5927\u591a\u6570\u65e0\u4eba\u673a\u516c\u53f8\u4e0d\u540c\uff0cDraganFly\u62e5\u6709\u6570\u5341\u5e74\u7684\u7ecf\u9a8c\u3002\u8be5\u516c\u53f8\u6210\u7acb\u4e8e1998\u5e74\uff0c\u5207\u5c14\u5f15\u4ee5\u4e3a\u8c6a\u7684\u662f\uff0c\u4ed6\u9886\u5bfc\u7740\u201c\u4e16\u754c\u4e0a\u6700\u53e4\u8001\u7684\u5546\u7528\u65e0\u4eba\u673a\u5236\u9020\u5546\u201d\u3002\u8fd9\u5bb6\u52a0\u62ff\u5927\u516c\u53f8\u7ea6\u670925\u540d\u5458\u5de5\uff0c\u603b\u90e8\u8bbe\u5728\u8428\u65af\u5580\u5f7b\u6e29\u7701\u7684\u8428\u65af\u5361\u901a\uff0c\u5728\u6e29\u54e5\u534e\u3001\u6d1b\u6749\u77f6\u548c\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u7684\u7f57\u5229\u8bbe\u6709\u529e\u4e8b\u5904\u3002\u76f4\u5230\u8fd9\u4e2a\u6708\uff0cDraganFly\u53ef\u4ee5\u8bf4\u6700\u51fa\u540d\u7684\u662f\u57282013\u5e74\u5f00\u53d1\u4e86\u7b2c\u4e00\u67b6\u88ab\u8a89\u4e3a\u62ef\u6551\u4eba\u7c7b\u751f\u547d\u7684\u65e0\u4eba\u673a\u3002\nVB Transform 2020 Online-2020\u5e747\u670815\u65e5\u81f317\u65e5\uff1a\u4e0e\u9886\u5148\u7684\u4eba\u5de5\u667a\u80fd\u9ad8\u7ba1\u4e00\u8d77\u53c2\u52a0VentureBeat&#39\uff1b\u5e74\u5ea6\u4eba\u5de5\u667a\u80fd\u6d3b\u52a8\u3002\u7acb\u5373\u6ce8\u518c\uff0c\u53ef\u8282\u770130%\u7684\u6570\u5b57\u8bbf\u95ee\u901a\u884c\u8bc1\u3002\n\u8fd1\u5e74\u6765\uff0c\u5f97\u76ca\u4e8e\u5e02\u573a\u9886\u519b\u4f01\u4e1a\u5927\u7586(DJI)\u548c\u9e66\u9e49\uff0c\u5ec9\u4ef7\u7684\u6d88\u8d39\u7ea7\u65e0\u4eba\u673a\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u4f46\u873b\u8713\u7684\u56db\u4e2a\u6536\u5165\u6765\u6e90\u4e2d\u6ca1\u6709\u4e00\u4e2a\u662f\u4e0e\u6d88\u8d39\u8005\u76f8\u5173\u7684\u3002\u7b2c\u4e00\u4e2a\u662f\u5408\u540c\u5de5\u7a0b(\u4e3b\u8981\u662f\u9488\u5bf9\u7f8e\u56fd\u7684\u4e00\u7ea7\u519b\u4e8b\u627f\u5305\u5546)\u3002\u7b2c\u4e8c\u4e2a\u662f\u539f\u59cb\u7cfb\u7edf\u5236\u9020\uff0c\u4e5f\u5c31\u662f\u5236\u9020\u65e0\u4eba\u673a\u2026\u3002\n\u867d\u7136DraganFly\u81ea\u5df1\u4e0d\u5236\u9020\u6d88\u8d39\u65e0\u4eba\u673a\uff0c\u4f46\u5b83\u5df2\u7ecf\u4e3a\u5ba2\u6237\u8bbe\u8ba1\u4e86\u5404\u79cd\u6709\u6548\u8f7d\u8377\u3001\u4e07\u5411\u8282\u9644\u4ef6\u548c\u8f6f\u4ef6\u96c6\u6210\u3002\u8be5\u516c\u53f8\u66f4\u559c\u6b22\u7f8e\u56fd\u6cd5\u8b66\u548c\u8fb9\u5883\u5de1\u903b\u5458\u7b49\u9ad8\u5ea6\u4e13\u4e1a\u5316\u7684\u5de5\u4f5c\u3002\u5fd8\u4e86\u4fbf\u5b9c\u7684\u65e0\u4eba\u673a\u5427-\u60f3\u60f3\u5728\u8f83\u51b7\u7684\u5929\u6c14\u91cc\u5de5\u4f5c\u7684\u7535\u6c60\uff0c\u2026\u2026\u3002\nChell\u544a\u8bc9VentureBeat\u8bf4\uff0cDraganFly\u7684\u5ba2\u6237\u201c\u901a\u5e38\u5bf9\u6027\u80fd\u6709\u66f4\u9ad8\u7684\u8981\u6c42\u201d\u3002\u201c\u4ed6\u4eec\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u9700\u6c42\uff0c\u6211\u4eec\u7684\u5de5\u7a0b\u5c31\u662f\u6839\u636e\u8fd9\u4e9b\u9700\u6c42\u6765\u8c03\u6574\u7684\u3002\u6b64\u5916\uff0c\u4ed6\u4eec\u5f80\u5f80\u4e0d\u4e00\u5b9a\u4f1a\u8d2d\u4e70\u90a3\u4e48\u591a\u7684\u5916\u56fd\u4ea7\u54c1\u3002\u90a3\u4e2a\u5730\u533a\u7684\u4e70\u5bb6\u66f4\u6709\u8d23\u4efb\u611f\uff0c\u5f53\u7136\u662f\u5728\u519b\u4e8b\u5c42\u9762\u4e0a\uff0c\u5bf9\u5b89\u5168\u2026\u3002\n\u5927\u7ea612\u5468\u524d\uff0c\u5f53\u201c\u534e\u76db\u987f\u7597\u517b\u9662\u7684\u60c5\u51b5\u53d8\u5f97\u53ef\u6015\u201d\u65f6\uff0cDraganFly\u56e2\u961f\u6b63\u8bd5\u56fe\u5f04\u6e05\u695a\u65e0\u4eba\u673a\u5982\u4f55\u80fd\u63d0\u4f9b\u5e2e\u52a9\u3002\u4f46\u4ed6\u4eec\u60f3\u505a\u7684\u4e0d\u4ec5\u4ec5\u662f\u4f7f\u7528\u65e0\u4eba\u673a\u4ece\u7a7a\u4e2d\u5bf9\u4eba\u5927\u558a\u5927\u53eb\u3002\n\u201c\u6211\u4eec\u5c31\u50cf\u662f\uff0c\u2018\u5728\u65e0\u4eba\u673a\u4e0a\u88c5\u626c\u58f0\u5668\uff1f\u2019\u6709\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u3002\u771f\u7684\uff1f\u8fd9\u4e0d\u662f\u521b\u65b0\uff0c\u201c\u5207\u5c14\u5ba3\u79f0\u3002\u201c\u6211\u4eec\u5728\u60f3\uff0c\u5982\u679c\u6210\u529f\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u63d0\u4f9b\u6bd4\u8fd9\u79cd\u975e\u5e38\u5178\u578b\u7684\u7528\u4f8b\u66f4\u591a\u7684\u4ef7\u503c\u3002\u201d\n\u8be5\u516c\u53f8\u610f\u8bc6\u5230\uff0c\u5b83\u6ca1\u6709\u5b9e\u73b0\u771f\u6b63\u60f3\u505a\u7684\u4e8b\u60c5\u7684\u4eba\u5de5\u667a\u80fd\u5370\u7ae0\u3002\u56e0\u6b64\uff0c\u5b83\u5f00\u59cb\u4e0e\u5176\u5408\u4f5c\u4f19\u4f34\u8fdb\u884c\u8c08\u5224\u3002\n\u201c\u6211\u4eec\u53bb\u627e\u5b83\u4e86\uff0c\u201d\u5207\u5c14\u8bf4\u3002\u201c\u6211\u4eec\u5728\u60f3\u2018\u54e6\uff0c\u70ed\u50cf\u4eea\uff01\u2019\u53ef\u80fd\u4e16\u754c\u4e0a\u6bcf\u4e2a\u4eba\u90fd\u60f3\u8fc7\u70ed\u50cf\u4eea\u3002\u6211\u4eec\u5f88\u5feb\u5c31\u63ed\u7a7f\u4e86\u4ed6\u4eec\u7684\u7528\u6cd5\u3002\u70ed\u5b66\u4e0d\u6d4b\u91cf\u6838\u5fc3\u6e29\u5ea6\uff0c\u8fd9\u662f\u4e86\u89e3\u662f\u5426\u5b58\u5728\u6f5c\u5728\u53d1\u70e7\u6240\u5fc5\u9700\u7684\u3002..\u3002\n\u8fd9\u5bb6\u52a0\u62ff\u5927\u516c\u53f8\u8fdb\u884c\u4e86\u7814\u7a76\uff0c\u6784\u5efa\u4e86\u7528\u4f8b\uff0c\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u5e76\u5728\u51e0\u5468\u5185\u7b7e\u7f72\u4e86\u4e00\u9879\u534f\u8bae\u3002DraganFly\u82b1\u4e86150\u4e07\u7f8e\u5143\u83b7\u5f97\u4e86\u4e00\u4e2a\u5065\u5eb7\u548c\u547c\u5438\u76d1\u6d4b\u5e73\u53f0\uff0c\u5373\u751f\u547d\u60c5\u62a5\u9879\u76ee\u7684\u8bb8\u53ef\uff0c\u8be5\u5e73\u53f0\u662f\u7531UniSA\u548c\u6fb3\u5927\u5229\u4e9a\u56fd\u9632\u79d1\u5b66\u90e8\u5408\u4f5c\u5f00\u53d1\u7684\u3002\n\u751f\u547d\u667a\u80fd\u9879\u76ee\u53ef\u4ee5\u5e2e\u52a9\u4f30\u8ba1\u4eba\u4e0e\u4eba\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u76d1\u6d4b\u4eba\u7fa4\u548c\u52b3\u52a8\u529b\u4e2d\u4e2a\u4eba\u7684\u6e29\u5ea6\u3001\u5fc3\u7387\u548c\u547c\u5438\u9891\u7387\u3002DraganFly\u8bbe\u60f3\u8fd9\u9879\u6280\u672f\u5c06\u88ab\u822a\u7a7a\u516c\u53f8\u548c\u6e38\u8f6e\u90e8\u7f72\uff1b\u5bf9\u4e8e\u6f5c\u5728\u7684\u9ad8\u5371\u7fa4\u4f53\uff0c\u6bd4\u5982\u62a4\u7406\u4e2d\u7684\u8001\u5e74\u4eba\u2026\u2026\u3002\n\u201c\u6211\u4eec\u6388\u6743\u5b83\u7528\u4e8e\u6444\u50cf\u7f51\u7edc\u548c\u65e0\u4eba\u673a\uff0c\u201d\u5207\u5c14\u89e3\u91ca\u8bf4\u3002UniSA\u6784\u5efa\u4e86\u6838\u5fc3\u6280\u672f--\u201c\u7279\u5b9a\u7684\u673a\u5668\u89c6\u89c9\u548c\u975e\u4ea7\u54c1\u5316\u5f62\u5f0f\u7684\u4eba\u5de5\u667a\u80fd\u3002\u201c\u873b\u8713\u201d\u53ea\u662f\u78b0\u5de7\u5728\u5b83\u7684\u540d\u5f55\u4e2d\u6709\u4e00\u6240\u516c\u7acb\u7814\u7a76\u578b\u5927\u5b66\u3002\u7136\u540e\uff0c\u8be5\u516c\u53f8\u5f00\u53d1\u4e86", "note_en": "Like the rest of the world, Canadian drone maker  Draganflyhas been anxiously watching the spread of the novel coronavirus. And when COVID-19 cases started springing up across Washington nursing homes in mid-February, the team began brainstorming. By March, Draganfly had licensed the machine vision and AI tech needed to offer social distancing and health monitoring services from the air. Demand to test the technology was \u201cinsatiable, \u201dnot just from government and law enforcement, but also from health  ...\n But the story doesn\u2019t end there. We spoke with Draganfly CEO Cameron Chell  before and after the abrupt termination of the Westport pilot. The drone company has two more pilots scheduled to start in less than two weeks. Chell says Draganfly has been \u201cinundated \u201dwith requests from other jurisdictions, while the numbers on the private side \u201care even more prolific. \u201dIndeed, the next couple of U.S. pilots will be in the private sector. One is drone-based, and the other is facility-based. Additional  ...\n  As federal and local governments wrestle with the coronavirus pandemic \u2014 from tracking the spread of COVID-19 to gauging when to lift restrictions \u2014 everyone is taking a closer look at autonomous technologies like  drones and  robots. The public and private sectors are desperate for technology that can help limit human contact and provide early detection data on the implementation and effectiveness of measures like social distancing. Any business that relies on human interaction, whether with customers  ...\n  Unlike most drone companies, Draganfly has decades of experience. It was founded in 1998, and Chell prides himself on leading \u201cthe oldest commercial drone manufacturer in the world.\u201d The Canadian company has some 25 employees and is based in Saskatoon, Saskatchewan, with offices in Vancouver; Los Angeles; and Raleigh, North Carolina. Until this month, Draganfly was arguably best known for developing  the first drone credited with saving a human life, in 2013.\n  VB Transform 2020 Online - July 15-17, 2020: Join leading AI executives at VentureBeat&#39;s AI event of the year.  Register today and save 30% off digital access passes.\n Cheap consumer drones have become popular in recent years, thanks to market leaders  DJI and  Parrot. But none of Draganfly \u2019s four revenue streams is consumer-related. The first is contract engineering (primarily for tier one U.S.-based military contractors). The second is original systems manufacturing, meaning building drones  ...\n  While Draganfly does not build consumer drones itself, it has designed various payloads, gimbal attachments, and software integrations for its customers that do. The company prefers highly specialized work for the likes of U.S. marshals and border patrol. Forget cheap drones \u2014think batteries that operate in colder weather,  ...\n Draganfly customers \u201cgenerally have a higher performance requirement, \u201dChell told VentureBeat. \u201cThey have some specialized needs that our engineering is attuned to. Also, they tend to not necessarily buy as much foreign product. The buyers in that area are a bit more conscientious, certainly on a military level, of security  ...\n  Some 12 weeks ago, when \u201cthings got scary in Washington with nursing homes,\u201d the Draganfly team was trying to figure out how drones could help. But they wanted to do more than just use drones to yell at people from the skies.\n \u201cWe were like,  \u2018Put a loudspeaker on a drone?\u2019 Big deal. Really? That\u2019s not innovative,\u201d Chell declared. \u201cWe were thinking if this hits, we need to be able to provide more value than very typical use cases like that.\u201d\n The company realized it did not have the AI chops to pull off what it really wanted to do. So it started talking to its partners.\n  \u201cWe went looking for it, \u201dChell said. \u201cWe were thinking \u2018Oh, thermal cameras! \u2019Probably every person in the world has thought about thermal cameras. And we debunked the use of those very quickly. Thermal doesn \u2019t measure core temperature, which is what is required to understand if there \u2019s a potential fever present.  ...\n The Canadian company researched, built use cases, ran tests, and in the space of a few weeks had signed a deal. Draganfly paid $1.5 million to license a health and respiratory monitoring platform, the Vital Intelligence Project, developed in a collaboration between UniSA and the Australian Department of Defence Science  ...\n The Vital Intelligence Project can help estimate the distances between people, but it can also monitor temperatures, heart rates, and respiratory rates of individuals in crowds and workforces. Draganfly envisioned the tech being deployed by airlines and cruise ships; for potential at-risk groups, like seniors in care  ...\n \u201cWe licensed it for camera networks and for drones, \u201dChell explained. UniSA built the core technology \u2014\u201cthe specific machine vision and AI in a non-productized form. \u201dDraganfly simply happened to have the public research university in its Rolodex. The company then developed the productized form, including camera  ...\n \u201cThat includes everything from going out and doing the policy development work through to what the GUI needs to look like, \u201dChell said. \u201cBoth software and mechanical engineering to provide stabilization on the drones so that they \u2019re optimized to collect this data. That piece of IP, go to market, and actual commercialization  ...\n  Still, some repurposing was required, as the Vital Intelligence Project was not exactly being used to monitor groups of people.\n \u201cThey were using it so that they can fly helicopters over \u2026disaster relief zones and pick up the vital signs of survivors on the ground, \u201dChell said. \u201cThey could determine what resources they needed to apply where or the severity of survivors \u2019current situation, and did they need to get them right at that moment.  ...\n Draganfly and the university took the technology and adapted it for social distancing and health monitoring. To be clear, the Vital Intelligence Project had never been strapped to a drone and pointed at a crowd before the Westport pilot.\n \u201cThe previous use case that would be most similar to this one was designed to be used in disaster relief areas to get the vital signs of survivors on the ground, \u201dChell said. \u201cThose happen to be the same set of vital signs that we can now pick up anonymized in a crowd to determine if there \u2019s infectious or respiratory  ...\n  Draganfly started test flights in Westport, Connecticut to identify social distancing and detect symptoms. The city is in Fairfield County, adjacent to New York City and considered the epicenter for the spread of the coronavirus in Connecticut.\n The three-phase pilot was supposed to validate the technology\u2019s use and have officials develop public safety policy around it. The next step would have been to test those policies. The whole process was supposed to take some 60 days, during which Draganfly hoped to initiate additional pilots.\n  Phase one was to test whether the technology could be an effective resource multiplier, letting officials cover more ground to see if social distancing is being effectively adhered to, for example. Instead of sending a few cruisers out and having officers walk around, they could put one camera up in the sky  ...\n \u201cSocial distancing, which we \u2019ve shown on the videos, that \u2019s actual visual data, \u201dChell said. \u201cIt gives the operator of the camera, typically the officer, the real-time data. They should make operational decisions at that point if they need to separate a crowd. Or everything is fine [and] they don \u2019t need  ...\n  Westport First Selectman Jim Marpe called it the \u201cFlatten the Curve Pilot Program. \u201dIt was supposed to help the community \u201cpractice safe social distancing, while identifying possible coronavirus and other life-threatening symptoms. \u201dPolice Chief Foti Koskinas said at the time: \u201cUsing drones remains a go-to  ...\n There was no health monitoring in phase one. Before the Westport pilot ended, Chell was already calling phase one a \u201csuccess, \u201dso we asked what exactly that meant. \u201cThe technology worked in a real-world environment, \u201dChell said. \u201cSo that was successful. We were able to get very good operational social  ...\n  In announcing the end of the pilot just a couple of days later, Marpe said, \u201cin our good faith effort to get ahead of the virus and potential need to manage and safely monitor crowds and social distancing in this environment, our announcement was perhaps misinterpreted, not well-received, and posed many  ...\n  When we spoke to Chell a few days later, he seemed to understand why the pilot had to end.\n \u201cThe official pushback was around health monitoring, and the misunderstanding around how it works, what it does, and what it \u2019s for, \u201dhe said. \u201cAnd so at this point, Westport just feels politically that they just don \u2019t want to move forward with the project. They had been extremely helpful. They provided  ...\n No part of the Vital Intelligence Project employs facial recognition technology, Draganfly has consistently said. Still, we wondered if the resulting output from phase one could be repurposed to do so. Could someone take the video feed and run a facial recognition algorithm on top of it?\n \u201cNo more than you could do that on a security camera system today, \u201dChell explained. \u201cThe requirements to run social distancing, in terms of resolution and stabilization in the video platform are minute compared to what you have to have in order to run the health measurement platform. So while today  ...\n  The pilot never got to phase two, which was the anonymized health measurement. The plan was to test crowds as sample sets \u2014how many are coughing, sneezing, have a fever (considering heart rate, respiratory rate, high blood pressure, and biometric measurements based on skin tones). We asked if the  ...\n \u201cIt has. There \u2019s some challenges with that at times, \u201dChell admitted. \u201cSo darker skin tones and different types of lights and the rest of it can create some problems. If you have somebody walking up to a kiosk and using this type of technology, it \u2019s a different scenario because it \u2019s a controlled  ...\n  That\u2019s not a problem, Chell insists, because the technology is not meant to identify people. The whole point is to measure the health of a population.\n \u201cWhen you combine things like fever, coughing, elevated heart rate, particular respiratory rates, then you \u2019ve got a picture of health, \u201dChell said. \u201cYou \u2019re not diagnosing if somebody has COVID-19 or not, but you are doing a health measurement and getting a pretty clear idea of the rate of infectious  ...\n  One big difference between phase one and phase two that led to major confusion is that the latter does not output video. Draganfly published videos to show how the technology worked, but that was misleading. The health measurement system does not record the subjects at a location that the drone  ...\n \u201cIt just comes back and says in this particular geographic location, where you did the health measurement data, there were 22 people in the field view. Here are the heart rates, here are the respiratory rates, here are the fevers. Here \u2019s the likelihood, and percentage of, infections and/or  ...\n  \u201cYou need at least that much data time to understand respiratory rate, \u201dChell explained. \u201cIn that timeframe, you also have your heart rate beating so you \u2019re able to collect that data concurrently. You can get biometric measurements of skin tone data quite quickly as well in that timeframe.  ...\n The drone sends the data it collects back to the cloud (Draganfly uses AWS and Fortinet) for processing. \u201cAll of that happens in the cloud through encrypted lines. So that is a secure cloud environment where all of that AI happens. If the drone goes down, there \u2019s no SD card that you can pull  ...\n  Interestingly, Westport wasn \u2019t using Draganfly drones \u2014the plan was to deploy its Commander series in phase three. In the interest of time, the first two phases were to rely on third-party drones, which Westport already had. The police department launched its drone program in early 2016  ...\n Draganfly claims its technology works at up to 190 feet away from subjects. \u201cAt 190 feet, you \u2019re talking about a $35,000 drone, just because of the cameras and the additional sensors and stabilization. On a $600 drone, that doesn \u2019t have really optimized stabilization software and such  ...\n But again, that was meant for phase three. The Draganfly system Westport piloted could have potentially worked from almost 10 times further away. For now, it doesn\u2019t look like Westport will ever verify those claims. Other towns and companies, however, want to try.", "posttime": "2020-05-02 18:05:10", "tags": "\u5f00\u5c55,pandemic,\u65e0\u4eba\u673a,draganfly", "title": "\u7f8e\u56fd\u5f00\u5c55\u4e86\u201c\u873b\u8713\u201d\u548c\u201c\u5927\u6d41\u884c\u65e0\u4eba\u673a\u201d\u8bd5\u70b9\u7814\u7a76\u3002", "title_en": "Draganfly and \u2018pandemic drone\u2019 pilot studies in the U.S.", "transed": 0, "url": "https://venturebeat.com/2020/04/30/draganfly-pandemic-drone-united-states-pilots/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5f00\u5c55", "pandemic", "\u65e0\u4eba\u673a", "draganfly"]}, {"category": "", "categoryclass": "", "imagename": "9f201dcdf46ef4ab8c9832a2c405e78d.jpg", "infoid": 1000297, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u5bf9\u6fb3\u5927\u5229\u4e9a\u60ac\u800c\u672a\u51b3\u76842020\u5e74\u7535\u4fe1\u7acb\u6cd5\u4fee\u6b63\u6848(\u56fd\u9645\u751f\u4ea7\u8ba2\u5355)\u6cd5\u6848(IPO\u6cd5\u6848)\u63d0\u51fa\u4e86\u51e0\u4e2a\u62c5\u5fe7\uff0c\u5305\u62ec\u82f1\u8054\u90a6\u5bf9\u63aa\u8f9e\u7684\u9009\u62e9\uff0c\u5efa\u8bae\u7684\u8bb0\u5f55\u5171\u4eab\u9014\u5f84\uff0c\u4ee5\u53ca\u8be5\u6cd5\u6848\u4e0e\u7f8e\u56fd\u6f84\u6e05\u6d77\u5916\u5408\u6cd5\u4f7f\u7528\u6570\u636e\u6cd5\u6848(CLOUD Act)\u7684\u76ee\u7684\u4e0d\u7b26\u3002\nIPO\u6cd5\u6848\u610f\u5728\u4fee\u8ba21979\u5e74\u7f8e\u56fd\u7535\u4fe1(\u622a\u53d6\u548c\u8bbf\u95ee)\u6cd5\u6848(TIA Act)\uff0c\u4e3a\u6fb3\u6d32\u673a\u6784\u521b\u5efa\u4e00\u4e2a\u6846\u67b6\uff0c\u4ee5\u4fbf\u4ece\u4e0e\u6fb3\u6d32\u6709\u534f\u8bae\u7684\u56fd\u5bb6\u7684\u5916\u56fd\u6307\u5b9a\u901a\u4fe1\u63d0\u4f9b\u5546\u90a3\u91cc\u83b7\u5f97\u5b58\u50a8\u7684\u7535\u4fe1\u6570\u636e\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5b83\u8fd8\u5c06\u53d6\u6d88\u6307\u5b9a\u7684\u884c\u653f\u4e0a\u8bc9\u6cd5\u5ead\u6210\u5458\u7b7e\u53d1\u67d0\u4e9b\u902e\u6355\u4ee4\u7684\u80fd\u529b\u3002\n\u4e91\u6cd5\u6848\u662f\u6fb3\u5927\u5229\u4e9a\u83b7\u5f97\u62df\u8bae\u4e2d\u7684\u4e0e\u7f8e\u56fd\u7684\u53cc\u8fb9\u534f\u8bae\u4ee5\u5b9e\u65bd\u4e91\u6cd5\u6848\u7684\u524d\u63d0\u6761\u4ef6\u3002\n\u4e91\u6cd5\u6848\u521b\u5efa\u4e86\u4e00\u4e2a\u6cd5\u5f8b\u6846\u67b6\uff0c\u89c4\u8303\u6267\u6cd5\u90e8\u95e8\u5982\u4f55\u8de8\u5883\u8bbf\u95ee\u6570\u636e\u3002\n\u5982\u679c\u534f\u8bae\u6700\u7ec8\u6572\u5b9a\u5e76\u83b7\u5f97\u6279\u51c6\uff0c\u6fb3\u5927\u5229\u4e9a\u548c\u7f8e\u56fd\u7684\u670d\u52a1\u63d0\u4f9b\u5546\u5c06\u80fd\u591f\u56de\u5e94\u5bf9\u65b9\u56fd\u5bb6\u8981\u6c42\u83b7\u53d6\u7535\u5b50\u8bc1\u636e\u7684\u5408\u6cd5\u547d\u4ee4\u3002\n\u4e00\u9879\u53cc\u8fb9\u4e91\u6cd5\u6848\u534f\u8bae\u5c06\u4f7f\u6fb3\u5927\u5229\u4e9a\u6267\u6cd5\u90e8\u95e8\u80fd\u591f\u4e3a\u56fd\u5185\u8ba2\u5355\u63d0\u4f9b\u6253\u51fb\u76f4\u63a5\u9488\u5bf9\u7f8e\u56fd\u516c\u53f8\u7684\u4e25\u91cd\u72af\u7f6a\u6240\u9700\u7684\u901a\u4fe1\u6570\u636e\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\u5728\u63d0\u4ea4\u7ed9\u8bae\u4f1a\u60c5\u62a5\u4e0e\u5b89\u5168\u8054\u5408\u59d4\u5458\u4f1a(PJCIS)\u53ca\u5176\u5bf9IPO\u6cd5\u6848\u7684\u5ba1\u67e5\u62a5\u544a\u7684\u4e00\u4efd\u610f\u89c1\u4e66[PDF]\u4e2d\uff0c\u8c37\u6b4c\u8868\u793a\uff0c\u867d\u7136\u5b83\u9f13\u52b1\u548c\u652f\u6301\u6fb3\u5927\u5229\u4e9a\u653f\u5e9c\u5c31\u884c\u653f\u534f\u8bae\u8fdb\u884c\u8c08\u5224\u7684\u52aa\u529b\uff0c\u4f46\u5b83\u8868\u793a\uff0c\u8be5\u6cd5\u6848\u4e2d\u7684\u67d0\u4e9b\u5185\u5bb9\u4ee4\u4eba\u62c5\u5fe7\u3002\n\u7279\u522b\u662f\u5728\u8003\u8651\u5982\u4f55\u5c06\u672c\u6761\u4f8b\u8349\u6848\u4e0b\u7684\u622a\u53d6\u6743\u529b\u4e0e\u6709\u4e89\u8bae\u7684\u201c\u7535\u4fe1\u548c\u5176\u4ed6\u7acb\u6cd5(\u534f\u52a9\u548c\u63a5\u5165)\u6cd5\u201d\u4e0b\u7684\u6280\u672f\u80fd\u529b\u901a\u77e5\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u5b83\u5199\u9053\u3002\n\u5728\u5411PJCIS\u63d0\u51fa\u5efa\u8bae\u65f6\uff0c\u8c37\u6b4c\u8868\u793a\uff0c\u8be5\u6cd5\u6848\u4e0d\u5e94\u9002\u7528\u4e8e\u4f5c\u4e3a\u4f01\u4e1a\u6216\u653f\u5e9c\u5b9e\u4f53\u57fa\u7840\u8bbe\u65bd\u63d0\u4f9b\u5546\u7684\u670d\u52a1\u63d0\u4f9b\u5546\uff0c\u79f0\u4f01\u4e1a\u6216\u653f\u5e9c\u5b9e\u4f53\u6700\u9002\u5408\u81ea\u5df1\u5236\u4f5c\u6240\u8981\u6c42\u7684\u8bb0\u5f55\u3002\n\u6839\u636e\u6761\u4f8b\u8349\u6848\uff0c\u6307\u5b9a\u901a\u8baf\u4f9b\u5e94\u5546\u987b\u5411\u63d0\u51fa\u8981\u6c42\u7684\u673a\u6784\u6216\u6fb3\u6d32\u6307\u5b9a\u5f53\u5c40\u63d0\u4f9b\u4efb\u4f55\u8981\u6c42\u7684\u901a\u8baf\u53ca\u6570\u636e\u3002\u8c37\u6b4c\u66f4\u613f\u610f\u6388\u6743\u6210\u4e3a\u4e00\u4e2a\u53cc\u5411\u6e20\u9053\u3002\n\u6055\u6211\u76f4\u8a00\uff0c\u6211\u4eec\u7684\u7ecf\u9a8c\u662f\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\uff0c\u6240\u6709\u4e0e\u6fb3\u5927\u5229\u4e9a\u6267\u6cd5\u673a\u6784\u7684\u901a\u4fe1\u90fd\u901a\u8fc7\u6307\u5b9a\u7684\u673a\u6784\u8fdb\u884c\uff0c\u8be5\u673a\u6784\u5145\u5f53\u591a\u4e2a\u673a\u6784\u7684\u534f\u8c03\u4eba\uff0c\u8be5\u673a\u6784\u5199\u9053\u3002\n\u5efa\u7acb\u4e00\u4e2a\u534f\u8c03\u673a\u6784\u5c06\u9632\u6b62\u91cd\u590d\u7684\u98ce\u9669\uff0c\u5e76\u5c06\u4f5c\u4e3a\u57f9\u8bad\u3001\u6559\u80b2\u548c\u4e0e\u6307\u5b9a\u901a\u4fe1\u63d0\u4f9b\u5546\u8054\u7cfb\u7684\u5355\u4e00\u8054\u7cfb\u70b9\u3002\n\u5bf9\u4e0d\u9075\u5b88IPO\u7684\u6c11\u4e8b\u5904\u7f5a\u5efa\u7acb\u4e86\u4e00\u4e2a\u5408\u89c4\u6846\u67b6\u3002\u5982\u679c\u6307\u5b9a\u901a\u4fe1\u63d0\u4f9b\u5546\u6536\u5230\u6709\u6548\u7684IPO\uff0c\u5e76\u4e14\u6307\u5b9a\u901a\u4fe1\u63d0\u4f9b\u5546\u5728IPO\u53d1\u884c\u65f6\u8fbe\u5230\u5f3a\u5236\u6267\u884c\u9608\u503c\uff0c\u5219\u6307\u5b9a\u901a\u4fe1\u63d0\u4f9b\u5546\u5fc5\u987b\u9075\u5b88IPO\u3002\n\u8c37\u6b4c\u5c06\u8fd9\u4e24\u6b65\u6d4b\u8bd5\u79f0\u4e3a\u95e8\u69db\uff0c\u5373\u8fbe\u5230\u95e8\u69db\u76f8\u5bf9\u8f83\u4f4e\u7684\u95e8\u69db\u3002\n\u4e0d\u9075\u5b88\u9996\u6b21\u516c\u5f00\u52df\u80a1(IPO)\u7684\u89c4\u5b9a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6cd5\u4eba\u56e2\u4f53\u88ab\u5904\u4ee5\u9ad8\u8fbe1000\u4e07\u6fb3\u5143\u7684\u6c11\u4e8b\u7f5a\u6b3e\u3002\u5b83\u8868\u793a\uff0c\u5f3a\u5236\u8981\u6c42\u9075\u5b88IPO\u7684\u4e49\u52a1\u4e0e\u201c\u4e91\u6cd5\u6848\u201d(Cloud Act)\u7684\u76ee\u7684\u80cc\u9053\u800c\u9a70\uff0c\u8be5\u6cd5\u6848\u65e8\u5728\u89e3\u9664\u5c4f\u853d\u6cd5\u89c4\uff0c\u4f46\u5e76\u672a\u660e\u786e\u89c4\u5b9a\u670d\u52a1\u63d0\u4f9b\u5546\u5fc5\u987b\u627f\u62c5\u4e49\u52a1\u3002\n\u6cd5\u6848\u7684\u4f5c\u8005\u4f3c\u4e4e\u610f\u8bc6\u5230\u4e86\u8fd9\u79cd\u4e8c\u5206\u6cd5\uff0c\u56e0\u4e3a\u6cd5\u6848\u660e\u786e\u5ba3\u79f0\u6fb3\u5927\u5229\u4e9a\u7684\u670d\u52a1\u63d0\u4f9b\u5546\u4e0d\u5fc5\u9075\u5b88\u56fd\u9645\u673a\u6784\u7684\u4e92\u60e0\u8981\u6c42\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u8fd9\u5bb6\u641c\u7d22\u5de8\u5934\u8868\u793a\uff0c\u5b83\u5bf9\u8bd5\u56fe\u5c06\u5f3a\u5236\u6027\u4e49\u52a1\u5f3a\u52a0\u7ed9\u603b\u90e8\u8bbe\u5728\u6d77\u5916\u7684\u6307\u5b9a\u901a\u4fe1\u63d0\u4f9b\u5546\u611f\u5230\u62c5\u5fe7\uff0c\u8fd9\u79cd\u4e49\u52a1\u53ea\u5b58\u5728\u4e8e\u6784\u5efa\u4e00\u9879\u5176\u4ed6\u975e\u5f3a\u5236\u6027\u7684\u56fd\u9645\u534f\u8bae\u4e2d\u3002\n\u5b83\u5199\u9053\uff1a[\u6211\u4eec]\u606d\u656c\u5730\u8981\u6c42\u5bf9\u6b64\u8fdb\u884c\u4fee\u6539\uff0c\u4ee5\u53cd\u6620\u4e91\u6cd5\u7684\u610f\u56fe\uff0c\u5373\u5728\u73b0\u6709\u6cd5\u5f8b\u4e2d\u627e\u5230\u6267\u6cd5\u7a0b\u5e8f\uff0c\u5e76\u5220\u9664\u5bf9\u6c11\u4e8b\u5904\u7f5a\u7684\u63d0\u53ca\u3002\n\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u8c37\u6b4c\u6b63\u5728\u5bfb\u6c42\u6709\u5173\u5408\u683c\u6cd5\u5b98\u5728\u6279\u51c6\u6d89\u53ca\u622a\u83b7\u901a\u4fe1\u7684IPO\u65f6\u5c06\u626e\u6f14\u7684\u89d2\u8272\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\u9274\u4e8e\u201c\u6258\u62c9\u6cd5\u201d\u7b49\u5176\u4ed6\u76f8\u5173\u7acb\u6cd5\u7f3a\u4e4f\u9002\u5f53\u7684\u57fa\u4e8e\u6848\u60c5\u7684\u4e0a\u8bc9\u7a0b\u5e8f\uff0c\u63a8\u8fdf\u73b0\u6709\u7684\u4e0a\u8bc9\u673a\u5236\u5e76\u4e0d\u4ee4\u4eba\u6ee1\u610f\u3002\n\u4f9d\u8d56\u73b0\u6709\u6cd5\u5f8b\u4f5c\u4e3a\u4e0a\u8bc9\u7a0b\u5e8f\u7684\u4e3b\u8981\u6765\u6e90\u662f\u7279\u522b\u6709\u95ee\u9898\u7684\u2026\u3002\u7279\u522b\u662f\uff0c\u6d77\u5916\u4f9b\u5e94\u5546", "note_en": "Google has raised a handful of concerns with Australia&#39;s pending  Telecommunications Legislation Amendment (International Production Orders) Bill 2020 (IPO Bill), including the Commonwealth&#39;s choice of phrasing, the avenues proposed for record-sharing, and the Bill being at odds with the purpose of the United States&#39;  Clarifying Lawful Overseas Use of Data Act\u00a0(CLOUD Act).\n The IPO Bill is intended to amend the\u00a0 Telecommunications (Interception and Access) Act 1979\u00a0(TIA Act) to create a framework for Australian agencies to gain access to stored telecommunications data from foreign designated communication providers in countries that have an agreement with Australia, and vice versa. It would also remove the ability for nominated Administrative Appeals Tribunal members to issue certain warrants.\n The\u00a0 Bill is a precondition\u00a0for Australia to obtain a proposed bilateral agreement with the United States in order to implement the CLOUD Act.\n The\u00a0 CLOUD Act\u00a0creates a legal framework regulating how law enforcement can access data across borders.\n If the agreement is finalised and approved, service providers in Australia and the US would be able to respond to lawful orders from the other country for access to electronic evidence.\n   A bilateral CLOUD Act agreement would enable Australian law enforcement to serve domestic orders for communications data needed to combat serious crime directly on US-based companies, and vice versa.\n In a  submission [PDF] to the Parliamentary Joint Committee on Intelligence and Security (PJCIS) and\u00a0 its review\u00a0of the IPO Bill, Google said while it encourages and supports efforts by the Australian government to negotiate an executive agreement, it said there are certain elements of the Bill that give it cause for concern.\n   &#34;Especially when considering how the interception powers under this Bill could be used in tandem with technical capability notices under the controversial Telecommunications and Other Legislation (Assistance and Access) Act,&#34; it wrote.\n Making a recommendation to the PJCIS, Google said the Bill should not apply to service providers in their capacity as infrastructure providers to corporations or government entities, saying corporations or government entities are best placed to produce the requested records themselves.\n  Under the Bill, designated communications providers are instructed to provide any requested communications and data to the requesting agency or the Australian Designated Authority. Google would prefer the authority to be a two-way channel.\n &#34;Respectfully, our experience is that a better approach would be that all communications to and from an Australian law enforcement agency be channelled through the Designated Authority and that this authority acts as a coordinator across multiple agencies,&#34; it wrote.\n &#34;Putting in place a coordinating body will guard against the risk of duplication and will act as a single point of contact for training, education, and access to designated communications providers.&#34;\n  Civil penalties for non-compliance with an IPO establishes a framework for compliance. If a designated communications provider receives a valid IPO and the designated communications provider meets the &#34;enforcement threshold&#34; when the IPO is issued, the designated communications provider must comply with the IPO.\n Google labelled the two-step test that is the threshold, a &#34;relatively low bar to meet&#34;.\n &#34;Failure to comply with an IPO may lead to a civil penalty of up to AU$10 million for body corporates. The imposition of a mandatory obligation to comply with an IPO is contrary to the purpose of the CLOUD Act which is to lift blocking statutes, but explicitly does not create a compulsory obligation on service providers,&#34; it said.\n &#34;The authors of the Bill appear to be aware of this dichotomy as the Bill explicitly asserts that Australian service providers do not have to comply with reciprocal requests from international agencies.&#34;\n Specifically, the search giant said it was concerned by the attempt to impose a mandatory obligation on overseas-based designated communications providers that exists &#34;only in the construct of an otherwise non-compulsory international agreement&#34;.\n &#34;[We] respectfully request that this be amended to reflect the intent of the CLOUD Act, which is that enforcement procedures be found in existing law, and that references to civil penalties be removed,&#34; it wrote.\n Elsewhere, Google is seeking further information about the role that eligible judges will play in approving IPOs that involve the interception of communications.\n  &#34;Deferring to existing appeal mechanisms is not satisfactory given the lack of appropriate merit based appeal processes in other relevant legislation such as the TOLA Act,&#34; it continued.\n &#34;The reliance on existing law as the primary source for appeal procedures is especially problematic \u2026 in particular, overseas providers may be subject to other third-country laws, conflicts with which are not and cannot be lifted through the international agreement, yet no option would exist to raise such an impediment to compliance.&#34;\n Google said this would create exactly the type of conflict of laws scenario that the CLOUD Act is designed to prevent.", "posttime": "2020-05-02 18:05:07", "tags": "google,\u8c37\u6b4c,\u5e0c\u671b,australia,\u6cd5\u6848", "title": "\u8c37\u6b4c\u5e0c\u671b\u6fb3\u5927\u5229\u4e9a\u53d6\u6d88\u4e91\u6cd5\u6848\u51c6\u5907\u6cd5\u6848\u4e2d\u7684\u6c11\u4e8b\u5904\u7f5a", "title_en": "Google wants Australia to remove civil penalties from CLOUD Act-readying Bill", "transed": 0, "url": "https://www.zdnet.com/article/google-wants-australia-to-remove-civil-penalties-from-cloud-act-readying-bill/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["google", "\u8c37\u6b4c", "\u5e0c\u671b", "australia", "\u6cd5\u6848"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000296, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SeaFox\u6839\u636eESTree AST\u683c\u5f0f\u751f\u6210AST\uff0c\u53ef\u7528\u4e8eJavaScript\u7a0b\u5e8f\u7684\u8bed\u6cd5\u5206\u6790(\u89e3\u6790)\u6216\u8bcd\u6cd5\u5206\u6790(\u6807\u8bb0\u5316)\uff0c\u5728ES2015\u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\uff0cJavaScript\u7a0b\u5e8f\u53ef\u4ee5\u662f\u811a\u672c\u4e5f\u53ef\u4ee5\u662f\u6a21\u5757\u3002\nSeafox\u516c\u5f00\u7684\u89e3\u6790\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684Options\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5141\u8bb8\u60a8\u6307\u5b9a\u662f\u4ee5\u811a\u672c\u6a21\u5f0f(\u9ed8\u8ba4)\u8fd8\u662f\u4ee5\u6a21\u5757\u6a21\u5f0f\u8fdb\u884c\u89e3\u6790\u3002\n{//\u5141\u8bb8\u4f7f\u7528Module\u4f5c\u4e3a\u76ee\u6807\u7b26\u53f7\u6a21\u5757\u8fdb\u884c\u5206\u6790\uff1f\uff1aboolean\uff1b//\u542f\u7528\u6bcf\u4e2a\u8282\u70b9\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u504f\u79fb\u4ee5\u53ca\u884c/\u5217\u4f4d\u7f6e\u4fe1\u606f\u7684\u6807\u5fd7loc\uff1afalse\uff1b//\u7981\u7528web\u517c\u5bb9\u6027disableWebCompat\uff1afalse\uff1b//\u5c06\u539f\u59cb\u5c5e\u6027\u9644\u52a0\u5230\u6bcf\u4e2a\u6587\u5b57\u548c\u6807\u8bc6\u7b26\u8282\u70b9raw\u7684\u6807\u5fd7\uff1afalse\uff1b//Enabled\u6307\u4ee4\u6307\u4ee4\uff1afalse\uff1b//\u5141\u8bb8\u5728\u5168\u5c40\u4f5c\u7528\u57dfglobalReturn\uff1afalse\u4e2d\u8fd4\u56de\u7684\u6807\u5fd7\uff1b//\u542f\u7528\u9690\u542b\u7684\u4e25\u683c\u6a21\u5f0fImpliedStrict\u7684\u6807\u5fd7\u3002\n\u4ece&#39\uff1b\u5bfc\u5165{parseScript\uff0cparseModule\uff0cparse}\u3002/SeaFox&#39\uff1b\uff1bparseScript(&#39\uff1b({x\uff1a[y]=0}=1)&#39\uff1b)\uff1bparseModule(&#39\uff1b({x\uff1a[y]=0}=1)&#39\uff1b\uff0c{\u6307\u4ee4\uff1atrue\uff0craw\uff1atrue})\uff1bparse(&#39\uff1b({x\uff1a[y]=0}=1)&#39\uff1b\uff0c{\u3002parse(&#39\uff1b({x\uff1a[y]=0}=1)&#39\uff1b)\uff1b\n\u8bcd\u6cd5\u5206\u6790\u53ea\u80fd\u5728\u89e3\u6790\u671f\u95f4\u5b8c\u6210\uff0c\u5e76\u4e14\u53ea\u63a5\u53d7\u51fd\u6570\u7c7b\u578b\u4f5c\u4e3a\u9009\u9879\u3002\n\u9700\u8981\u4e3a\u5f00\u59cb\u548c\u7ed3\u675f\u542f\u7528loc\u9009\u9879\u3002\u5426\u5219\uff0c\u6b64\u503c\u5c06\u8bbe\u7f6e\u4e3a\u672a\u5b9a\u4e49\u3002\nSeaFox\u662f\u4e3a\u63d0\u9ad8\u6027\u80fd\u548c\u964d\u4f4e\u5185\u5b58\u4f7f\u7528\u91cf\u800c\u5f00\u53d1\u7684\uff0c\u8be5\u89e3\u6790\u5668\u6bd4\u6240\u6709\u5176\u4ed6javascript\u89e3\u6790\u5668\u5feb2\u500d\u52304\u500d\u3002", "note_en": "Seafox generates  AST according to  ESTree AST format, and can be used to perform  syntactic analysis (parsing) or  lexical analysis (tokenization) of a JavaScript program, and with  ES2015 and later a JavaScript program can be either  a script or a module.\n The  parse method exposed by  Seafox takes an optional  options object which allows you to specify whether to parse in   script mode (the default) or in   module mode.\n  {   // Allow parsing using Module as the goal symbol  module ?: boolean;   // The flag to enable start and end offsets and line/column location information to each node loc :  false;   // Disable web compatibility disableWebCompat :  false;   // The flag to attach raw property to each literal and identifier node raw :  false;   // Enabled directives directives :  false;   // The flag to allow return in the global scope globalReturn :  false;   // The flag to enable implied strict mode impliedStrict :  false;  //Enable  ...\n  import {  parseScript,  parseModule,  parse }  from   &#39;./seafox &#39;; parseScript(  &#39;({x: [y] = 0} = 1) &#39;); parseModule(  &#39;({x: [y] = 0} = 1) &#39;, { directives:  true, raw:  true }); parse(  &#39;({x: [y] = 0} = 1) &#39;, { module:  true }); parse(  &#39;({x: [y] = 0} = 1) &#39;);\n  Lexical analysis can only be done during parsing and accepts only a function type as the option\n    The  loc option needs to be enabled for  start and  end. Otherwise this values will be set to  undefined\n  Seafox is developed for performance and low memory usage, and the parser is about 2x - 4x faster than all other javascript parsers.", "posttime": "2020-05-02 18:05:02", "tags": "java,javascript,\u517c\u5bb9,compliant,false", "title": "\u5feb\u901f\u7684100%\u89c4\u8303\u517c\u5bb9\u3001\u81ea\u6258\u7ba1\u7684JavaScript\u89e3\u6790\u5668", "title_en": "A fast 100% spec compliant, self-hosted JavaScript parser", "transed": 0, "url": "https://github.com/KFlash/seafox", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["java", "\u517c\u5bb9", "compliant", "false"]}, {"category": "", "categoryclass": "", "imagename": "4f63cc74c2a0a358ef584f6d6c7340f6.jpg", "infoid": 1000295, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e9\u57282017\u5e746\u6708\uff0c\u82f9\u679c\u5c31\u63a8\u51fa\u4e86\u201c\u7528\u4e8eVR\u7684\u91d1\u5c5e\u201d\uff0c\u5e76\u5f3a\u8c03\u4e86\u4e0eValve\u7684\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u3002\u5f53\u65f6\uff0cValve\u6b63\u5728\u63a8\u52a8VR\u4f5c\u4e3a\u5e73\u53f0\uff0c\u5e76\u5728Vive\u7cfb\u7edf\u4e0a\u4e0eHTC\u5408\u4f5c\uff1b\u5feb\u8fdb\u52302020\u5e74\uff0cValve\u62e5\u6709\u81ea\u5df1\u7684\u9ad8\u7aef\u8033\u673a\uff0c\u5e76\u521a\u521a\u53d1\u5e03\u4e86\u5907\u53d7\u671f\u5f85\u7684\u6807\u9898\u300aHalf Life\uff1aAlyx\u300b\u3002\n\u51e0\u4e4e\u6ca1\u6709\u652f\u6301Mac\u7684\u6e38\u620f\uff0c\u751a\u81f3\u82f9\u679c\u6700\u9ad8\u7aef\u7684MacBook Pro\u4e5f\u8fbe\u4e0d\u5230Oculus\u6216SteamVR\u7684\u6700\u4f4e\u89c4\u683c\u8981\u6c42\u3002\u6b63\u5982Upload\u7684\u4eba\u5458\u6307\u51fa\u7684\u90a3\u6837\uff0cValve\u6700\u8fd1\u7684\u786c\u4ef6\u8c03\u67e5\u663e\u793a\uff0c\u8be5\u5e73\u53f0\u4e0a\u53ea\u67094%\u7684\u6e38\u620f\u73a9\u5bb6\u4e00\u5f00\u59cb\u5c31\u4f7f\u7528MacOS\uff0c\u8fd9\u8868\u660e\u76f8\u5f53\u5c11\u7684\u5b9e\u9645\u6e38\u620f\u73a9\u5bb6\u751a\u81f3\u7b26\u5408Mac\u62e5\u6709\u7684VR\u7528\u6237\u7ef4\u6069\u7684\u56fe\u8868\u3002\n\u5728Mac\u4e0a\u6784\u5efa\u865a\u62df\u73b0\u5b9e\u5185\u5bb9\u7684\u6e38\u620f\u5f00\u53d1\u5546\u5f88\u53ef\u80fd\u559c\u6b22\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u5f00\u53d1\u548c\u6d4b\u8bd5\u7684\u80fd\u529b\u3002\u5f53\u82f9\u679c\u7528Mac Pro\u548ciMac Pro\u7b49\u9ad8\u4ef7\u8bbe\u5907\u79ef\u6781\u8ffd\u9010\u4e13\u4e1a\u4eba\u58eb\u65f6\uff0c\u5f53\u4e00\u4e2a\u4e3b\u8981\u7684\u8f6f\u4ef6\u5e73\u53f0\u8ba4\u4e3a\u4f60\u4e0d\u503c\u5f97\u52aa\u529b\u65f6\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5916\u89c2\u3002", "note_en": "Apple   introduced \u201cMetal for VR\u201d back in June 2017 and highlighted a partnership with Valve. At the time, Valve was pushing VR as a platform and working with HTC on its Vive system; fast-forward to 2020 and Valve has its own high-end headset and has just released its highly-anticipated title \u201cHalf Life: Alyx.\u201d\n   Almost no games supported Mac, and even Apple\u2019s highest-end MacBook Pros failed to meet minimum specification requirements for Oculus or SteamVR.  As the folks at  Upload  point out, Valve\u2019s recent  hardware survey  showcases that just 4% of gamers on the platform use macOS to begin with, suggesting a pretty small sliver of actual gamers even fit in the Mac-owning VR user Venn diagram.\n Game developers building VR content on Mac likely enjoyed the ability to develop and test on a single machine. As Apple aggressively chases professionals with high-priced gear like the Mac Pro and iMac Pro, it\u2019s not a great look when a major software platform decides you\u2019re not worth the effort.", "posttime": "2020-05-02 18:04:58", "tags": "mac,macos,drops,\u6e38\u620f,vr", "title": "Value\u653e\u5f03\u5bf9MacOS\u7684VR\u652f\u6301", "title_en": "Valve drops VR support for macOS", "transed": 0, "url": "https://techcrunch.com/2020/05/01/valve-drops-vr-support-for-macos/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["mac", "macos", "drops", "\u6e38\u620f", "vr"]}, {"category": "", "categoryclass": "", "imagename": "9376556faae6ced37ae727378989fa3d.png", "infoid": 1000294, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u53ef\u89c6\u5316\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5982\u4f55\u4f7f\u7528ARMA\u548cARIMA\u6a21\u578b\u8fdb\u884c\u65f6\u95f4\u5e8f\u5217\u5efa\u6a21\u3002\u8fd9\u91ccAR\u4ee3\u8868\u81ea\u56de\u5f52\uff0cMA\u4ee3\u8868\u79fb\u52a8\u5e73\u5747\u3002\n\u5728\u6211\u4eec\u5f00\u59cb\u8ba8\u8bbaARIMA\u6a21\u578b\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u4e86\u89e3\u65f6\u95f4\u5e8f\u5217\u7684\u5e73\u7a33\u6027\u3002\n\u5982\u679c\u89c2\u6d4b\u503c\u7684\u5747\u503c\u3001\u65b9\u5dee\u548c\u534f\u65b9\u5dee\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6709\u53d8\u5316\uff0c\u5219\u79f0\u65f6\u95f4\u5e8f\u5217\u4e3a\u5e73\u7a33\u5e8f\u5217\u3002\n\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u89c2\u6d4b\u503c\u7684\u8054\u5408\u5206\u5e03\u4e0d\u53d8\uff0c\u5e76\u4e14\u5f53\u65f6\u95f4\u8d77\u70b9\u504f\u79fbk\u4e2a\u91cf\u65f6\u4fdd\u6301\u4e0d\u53d8\uff0c\u5219\u79f0\u4e00\u4e2a\u8fc7\u7a0b\u662f\u5e73\u7a33\u7684\u3002\n\u8fd9\u610f\u5473\u7740\u5747\u503c\u548c\u65b9\u5dee\u662f\u6052\u5b9a\u7684\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u65f6\u95f4\u3002\u5e73\u7a33\u8fc7\u7a0b\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u4e25\u683c\u5e73\u7a33\u8fc7\u7a0b\u548c\u5f31\u5e73\u7a33\u8fc7\u7a0b\u3002\nARIMA\u662f\u81ea\u56de\u5f52\u7efc\u5408\u79fb\u52a8\u5e73\u5747\u6a21\u578b\u7684\u7f29\u5199\uff0c\u662f\u76ee\u524d\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u65f6\u95f4\u5e8f\u5217\u9884\u6d4b\u6a21\u578b\u4e4b\u4e00\u3002\n\u5b83\u8fd8\u89e3\u91ca\u4e86\u8fde\u7eed\u65f6\u95f4\u70b9\u4e4b\u95f4\u6570\u636e\u6216\u566a\u58f0\u7684\u589e\u957f/\u4e0b\u964d\u6a21\u5f0f\u3002\n\u5c06ARIMA\u5e94\u7528\u4e8e\u5177\u6709\u975e\u5e73\u7a33\u6027\u7684\u6570\u636e\uff0c\u5e76\u91c7\u7528\u8fde\u7eed\u89c2\u6d4b\u7684\u5dee\u503c\u6765\u6d88\u9664\u975e\u5e73\u7a33\u6027\u3002\u6709\u65f6\u9700\u8981\u591a\u6b21\u8fde\u7eed\u89c2\u6d4b\u7684\u5dee\u5f02\u624d\u80fd\u5f97\u5230\u4fee\u6b63\u7684\u5e73\u7a33\u6a21\u578b\u3002\n\u8fd9\u5c31\u662f\u5b83\u88ab\u79f0\u4e3a\u96c6\u6210\u6a21\u578b\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u62df\u5408\u5230\u4fee\u6539\u540e\u7684\u5e8f\u5217\u7684\u5e73\u7a33\u6a21\u578b\u5fc5\u987b\u6c42\u548c\u6216\u79ef\u5206\uff0c\u4ee5\u63d0\u4f9b\u539f\u59cb\u975e\u5e73\u7a33\u5e8f\u5217\u7684\u6a21\u578b\u3002\n\u6211\u4eec\u5e94\u8be5\u5c06ARIMA\u6a21\u578b\u62df\u5408\u5230\u5e73\u7a33\u548c\u975e\u5b63\u8282\u6027\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u5e76\u9075\u5faa\u4e0a\u9762\u6d41\u7a0b\u56fe\u4e2d\u63cf\u8ff0\u7684\u8fc7\u7a0b\u3002\n\u9996\u5148\uff0c\u60a8\u5e94\u8be5\u7ed8\u5236\u6570\u636e\u56fe\u8868\uff0c\u4ee5\u53d1\u73b0\u9690\u85cf\u7684\u6a21\u5f0f\u3001\u8d8b\u52bf\u548c\u5176\u4ed6\u884c\u4e3a\u3002\n\u8981\u7a33\u5b9a\u548c\u89c4\u683c\u5316\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528Box-Cox\u53d8\u6362\u3002\u8fd9\u662f\u4e00\u79cd\u53d8\u6362\u901a\u5e38\u4e0d\u670d\u4ece\u6b63\u6001\u5206\u5e03\u7684\u6570\u636e\u7684\u65b9\u6cd5\u3002\n\u7ed8\u5236ACF/PACF\u4ee5\u786e\u5b9aARIMA\u6a21\u578b\u7684\u987a\u5e8f\uff0c\u5373p\u3001d\u548cq\u503c\u3002\u6216\u8005\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528AICC\u548cBICC\u6765\u786e\u5b9ap\u3001q\u3001d\u503c\u3002\u9009\u62e9AICC\u548cBICC\u6700\u4f4e\u7684\u3002\n\u9a8c\u8bc1\u6b8b\u5dee\u5e76\u786e\u4fdd\u5b83\u770b\u8d77\u6765\u50cf\u767d\u566a\u58f0\uff0c\u5426\u5219\u8bf7\u5c1d\u8bd5\u4f7f\u7528\u4e0d\u540cp\u3001q\u548cd\u503c\u7684\u4fee\u6539\u540e\u7684\u6a21\u578b\u3002\u8bf7\u8bb0\u4f4f\uff0c\u767d\u566a\u58f0\u7684\u6b8b\u5dee\u53ef\u4ee5\u8fdb\u884c\u9884\u6d4b\u3002\n\u6211\u4eec\u5c06\u4f7f\u7528\u963f\u83ab\u91cc\u5e02\u7684\u6708\u5ea6\u6e29\u5ea6\u6570\u636e\u96c6\u3002\u60a8\u53ef\u4ee5\u4ece\u6b64\u94fe\u63a5\u4e0b\u8f7d\u3002\n\u5c06\u718a\u732b\u4f5c\u4e3asnssns.set(rc={&#39\uff1bfigure.figsize&#39\uff1b\uff1a(15\uff0c6)})%matplotlib inlinedf=pd.read_csv(&#39\uff1b./monthly_temperature_aomori_city.csv&#39\uff1b)df[&#39\uff1bDATE&#39\uff1b]=pd.to_DateTime(DF[[&#39\uff1bYear&#39\uff1b\uff0c&#39\uff1bmonth&#39\uff1b]].assign(DAY=1))df.drop([&#39\uff1b]\uff0csmimport matplotlib.pylot\u4f5c\u4e3apltimport\u6d77\u8fd0)\u5bfc\u5165pdimport statsmods.api\u3002\u5e74&#39\uff1b\uff0c&#39\uff1b\u6708&#39\uff1b]\uff0c\u4f4d\u7f6e=\u771f\uff0c\u8f74=1)df[&#39\uff1b\u6e29\u5ea6&#39\uff1b]=df[&#39\uff1btemperature&#39\uff1b]*(9/5)+32df.set_index(&#39\uff1bDATE&#39\uff1b\uff0cinplace=True)df.to_csv(&#39\uff1b./monthly_temperature_aomori_city_updt.csv&#39\uff1b\uff0c\u7d22\u5f15=\u771f)df.head()\u3002\n\u8ba9\u6211\u4eec\u4e3a\u524d200\u884c\u753b\u4e00\u5f20\u7b80\u5355\u7684\u7ebf\u6761\u56fe\uff0c\u4ee5\u4e86\u89e3\u6570\u636e\u4e2d\u7684\u6a21\u5f0f\u4ee5\u53ca\u6e29\u5ea6\u662f\u5982\u4f55\u8d8b\u52bf\u7684\u3002\u770b\u8d77\u6765\u8fd9\u91cc\u9075\u5faa\u7684\u662f\u4e00\u79cd\u5faa\u73af\u6a21\u5f0f\u3002\n\u6211\u4eec\u5c06\u7ed8\u5236\u524d5\u5e74\u7684\u76d2\u5b50\u548c\u80e1\u987b\u56fe\uff0c\u4ee5\u4e86\u89e3\u6570\u636e\u5206\u5e03\uff0c\u5e76\u5feb\u901f\u83b7\u5f97\u6570\u636e\u7684\u4e94\u70b9\u6c47\u603b\u3002\n\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u6709\u5173\u65f6\u95f4\u5e8f\u5217\u5206\u6790\u548c\u53ef\u89c6\u5316\u7684\u6df1\u5165\u6559\u7a0b\uff0c\u53ef\u4ee5\u67e5\u770b\u6b64\u535a\u5ba2\uff0c\u5b83\u662f\u6b64\u65f6\u95f4\u5e8f\u5217\u5206\u6790\u535a\u5ba2\u7684\u7b2c1\u90e8\u5206\u3002\n\u4e3a\u4e86\u8fdb\u4e00\u6b65\u5206\u6790\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u5206\u89e3\u6709\u52a9\u4e8e\u53bb\u9664\u6570\u636e\u7684\u5b63\u8282\u6027\u3002\n\u57fa\u672c\u4e0a\uff0c\u5206\u89e3\u6709\u4e09\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5373\u8d8b\u52bf\u3001\u5b63\u8282\u6027\u548c\u6b8b\u5dee\u3002\n\u60a8\u5fc5\u987b\u9009\u62e9\u4e00\u79cd\u6a21\u578b\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u52a0\u6cd5\u6216\u4e58\u6cd5\u3002\u6211\u4eec\u91c7\u7528\u4e86\u52a0\u6cd5\u6a21\u578b\uff0c\u56e0\u4e3a\u5b63\u8282\u6027\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u53d8\u5316\u4e0d\u5927\u3002\nARIMA\u6a21\u578b\u5bf9\u975e\u5e73\u7a33\u6570\u636e\u7684\u5904\u7406\u6548\u679c\u66f4\u597d\uff0c\u6211\u4eec\u9996\u5148\u8981\u68c0\u67e5\u7684\u662f\u6570\u636e\u7684\u5e73\u7a33\u6027\u3002\u589e\u5e7f\u7684Dickey-Fuller\u68c0\u9a8c\u53ef\u4ee5\u7528\u6765\u68c0\u9a8c\u5e8f\u5217\u662f\u975e\u5e73\u7a33\u7684\u96f6\u5047\u8bbe\u3002\nADF\u68c0\u9a8c\u6709\u52a9\u4e8e\u7406\u89e3Y\u7684\u53d8\u5316\u662f\u5426\u662f\u7ebf\u6027\u8d8b\u52bf\u3002\u5982\u679c\u5b58\u5728\u7ebf\u6027\u8d8b\u52bf\uff0c\u4f46\u6ede\u540e\u503c\u4e0d\u80fd\u89e3\u91caY\u968f\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u5219\u6211\u4eec\u7684\u6570\u636e\u5c06\u88ab\u8ba4\u4e3a\u662f\u975e\u5e73\u7a33\u7684\u3002\n\u4ecestatsmods.tsa.stattools\u5bfc\u5165adfullerdef check_stantality(TimeSeries)\uff1aresult=adfuller(timeSeries\uff0cautolag=&#39\uff1bAIC&#39\uff1b)dfoutput=pd.Series(result[0\uff1a4]\uff0cindex=[&#39\uff1bTest Statistics&#39\uff1b\uff0c&#39\uff1bp-value&#39\uff1b\uff0c&#39\uff1b#LAGS Used&#39\uff1b\uff0c&#39\uff1b\uff1b##39\uff1b\uff0c&#39\uff1b]\u3002p-\u503c\uff1a%f&#39\uff1b%Result[1])\u4e3a\u952e\u6253\u5370(&#39\uff1b\u4e34\u754c\u503c\uff1a&#39\uff1b)\uff0c\u7ed3\u679c[4]\u4e2d\u7684\u503c\u3002Items()\uff1a\u6253\u5370(&#39\uff1b\\t%s\uff1a%.3f&#39\uff1b%(\u952e\uff0c\u503c))\u3002\n\u68c0\u9a8c\u7edf\u8ba1\u91cf\u7684\u503c\u5c0f\u4e8e5%\u7684\u4e34\u754c\u503c\uff0cp\u503c\u4e5f\u5c0f\u4e8e0.05\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u62d2\u7edd\u96f6\u5047\u8bbe\u548c\u65f6\u95f4\u5e8f\u5217\u5e73\u7a33\u7684\u4ea4\u66ff\u5047\u8bbe\u4f3c\u4e4e\u662f\u6b63\u786e\u7684\u3002\n", "note_en": "In the previous  post we have seen how to visualize a time series data. In this post we will discuss how to do a time series modelling using ARMA and ARIMA models. Here AR stands for Auto-Regressive and MA stands for Moving Average\n Before we start discussing the ARIMA models, we should know the stationarity of time series\n  A time series is called to be stationary if there is no change in mean, variance and covariance of the observations over a period of time.\n  In other words a process is said to be stationary if the joint distribution of observations does not change and remain same when the origin of time is shifted by amount k\n This means that the mean and variance are constant and do not depend on time. There are two types of stationary processes: Strict &amp; Weak Stationary Process\n      ARIMA stands for Auto-Regressive Integrated Moving Average and it\u2019s one of the widely used time series models for forecasting\n It also accounts for the pattern of growth/decline in the data or noise between consecutive time points\n ARIMA are applied to data that shows Non-Stationarity and difference of successive observations are taken to eliminate the non-stationarity. Sometimes more than one difference of successive observation is required to get a modified stationary model\n That\u2019s the reason it is called as an Integrated model because the stationary model that is fitted to the modified series has to be summed or integrated to provide a model for the original non-stationary series\n   We should be fitting the ARIMA model to a Stationary and non-seasonal time series data and follow the procedure described in the above flow chart\n First thing is you should plot the data to find hidden patterns, trends and other behavior\n  To stabilize and normalize the data you can use the Box-Cox transformation. It is a way to transform data that ordinarily do not follow a normal distribution\n Plot ACF/PACF to determine the order for the ARIMA model i.e. p,d and q values. Alternatively, you can also use AICc and BICc to determine the p,q,d values. Choose the one where AICc and BICc is lowest\n Verify the Residuals and ensure it looks like white noise otherwise try a modified model with different values of p,q and d. Remember Residuals which are white noise can do a forecast\n   We will be using the Monthly Temperature datatset of Armori City. You can download it from this  link\n  import pandas as pdimport statsmodels.api as smimport matplotlib.pyplot as pltimport seaborn as snssns.set(rc={&#39;figure.figsize&#39;:(15,6)})%matplotlib inlinedf = pd.read_csv(&#39;./monthly_temperature_aomori_city.csv&#39;)df[&#39;DATE&#39;] = pd.to_datetime(df[[&#39;year&#39;, &#39;month&#39;]].assign(DAY=1))df.drop([&#39;year&#39;,&#39;month&#39;],inplace=True,axis=1)df[&#39;temperature&#39;] = df[&#39;temperature&#39;]*(9/5)+32df.set_index(&#39;DATE&#39;,inplace=True)df.to_csv(&#39;./monthly_temperature_aomori_city_updt.csv&#39;,index=True)df.head()\n   Let\u2019s draw a simple line plot for first 200 rows to understand the pattern in the data and how the temperature is trending. It looks like that a Cyclic pattern is followed here\n    We will draw a Box and Whisker plot for first 5 years to understand the data distribution and get a quick five point summary for the data\n    If you are looking for in-depth tutorial on Time Series Analysis and Visualization you can check  this blog, which is part 1 of this time series analysis blogs\n  To further analyze the time series data, Decomposition helps to remove the seasonality from the data.\n Basically Decomposition has three components that is shown in the graphs below i.e Trend, Seasonality and Residual\n You have to choose a model type also additive or multiplicative. We have taken an additive model because the seasonality doesn\u2019t varies much from start to end of the years\n          ARIMA model works better on a Non-Stationary data and the first thing that we should be checking is the Stationarity of the data. The Augmented Dickey-Fuller test can be used to test the null hypothesis that the series is non-stationary\n The ADF test helps to understand whether a change in Y is a linear trend or not. If there is a linear trend but the lagged value cannot explain the change in Y over time, then our data will be deemed non-stationary\n  from statsmodels.tsa.stattools import adfullerdef check_stationarity(timeseries): result = adfuller(timeseries,autolag=&#39;AIC&#39;) dfoutput = pd.Series(result[0:4], index=[&#39;Test Statistic&#39;,&#39;p-value&#39;,&#39;#Lags Used&#39;,&#39;Number of Observations Used&#39;]) print(&#39;The test statistic: %f&#39; % result[0]) print(&#39;p-value: %f&#39; % result[1]) print(&#39;Critical Values:&#39;) for key, value in result[4].items(): print(&#39;\\t%s: %.3f&#39; % (key, value))\n   The value of test statistics is less than 5% critical value and p-value is also less than 0.05 so we can reject the null hypothesis and Alternate Hypothesis that time series is Stationary seems to be true\n   There is nothing unusual about the time plot and there appears to be no need to do any data adjustments. There is no evidence of changing variance also so we will not do a Box-Cox transformation.\n  So what does model order of ARIMA(2,1,3) means? It means 2nd order Auto-Regressive (AR) and 3rd order Moving Average (MA). You can think it as ARIMA( AR(p), I(d), MA(q))\n So the d is Integrated I(d) part that is decided based on number of times you have to do a data difference to make it stationary. We will learn more about it in the next section\n  For Moving Average order i.e. q you have to look at the Auto Correlation Factor(ACF) graph. You need some experience to keenly look at the graphs and significant lags and corresponding Correlations to determine the value\n Similarly for the Auto-Regressive order i.e. p you have to look at the partial correlation factor (pacf) graph\n Another Alternate way is to find the set of models with the lowest AIC values Akaike\u2019s Information Criterion\n For determining AIC you have to fit the model with different combination of p,q and d and look for the lowest AIC value\n  Our Data is stationary but just to showcase how data differencing works we will assume that our Time Series data is not Stationary\n We will also do a log transform of the original data to make the seasonality same throughout the data\n   So Basically you have to subtract the value with their previous value to get the difference in data. We will use numpy.diff() function to achieve that\n    The differenced data looks stationary so we don\u2019t have to go for any further differencing\n Again, After our first data differencing we will check the stationarity of data using the ADF test.\n This time the p-value is 0 which is very good and the test statistics is also less than the 5% critical\n     The value of d will be 1 because we have done the data difference one time to achieve stationarity\n  Once our data is set to stationary then the next task is to determine the appropriate value of ARIMA model i.e. p and q\n We can learn some important properties of our time series data with the help of Auto Correlation(ACF) and Partial Auto Correlation (PACF) graphs.\n This provide useful descriptive properties for understanding which model can be used for time series forecasting\n  In other words, ACF is used to understand if there exists a correlation between a time series data point with another point as a function of their time difference\n The Partial Auto Correlation factor(PACF) is the partial correlation between the two points at a specific lag of time.\n Plotting the partial autocorrelative functions one could determine the appropriate lags\u00a0 p\u00a0in an AR ( p)\u00a0model or in an extended\u00a0ARIMA\u00a0( p, d, q) model\n       From the PACF plot we can see a significant correlation at lag of 2. So the PACF suggests an AR(2) model. So an inital order for the model will be (2,0,3)\n  Alternatively, you can also use auto arima to find the appropriate value of p,q and d\n  So if you want to know the value of p,q and d without much of pain then use  Auto arima.\n It\u2019s a python library inspired from the auto arima package in R which is used to find the best fit ARIMA model for the univariate time series data\n  import pyramid as pmauto_arima_fit = pm.auto_arima(df, start_p=1, start_q=1, max_p=3, max_q=3, m=12, start_P=0, seasonal=True, d=1, D=1, trace=True, error_action=&#39;ignore&#39;, suppress_warnings=True, stepwise=True)\n  Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 12); AIC=7044.189, BIC=7071.210, Fit time=29.769 secondsFit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 12); AIC=8721.729, BIC=8732.538, Fit time=0.218 secondsFit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 12); AIC=8072.542, BIC=8094.159, Fit time=5.261 seconds\n This will help to choose the best value of p,q and d based on the lowest AIC and BIC values\n  Now we have to fit our data to the ARIMA using the order of model (2,0,3) determined above using ACF and PACF plot.\n This sets the lag value to 2 for autoregression AR(2) and uses a data difference order of 0 since our time series is stationary, and uses a moving average model of 3.\n     A model residuals is difference between the predicted and expected value and can be verified using the fitted model property resid().\n Residual object is of type ndarray so we will store it in a Dataframe for plotting\n In the below line plot we don\u2019t see any large residuals and all of them are within their upper and lower limits\n    Next we will check if these residuals are normally distributed and looks Gaussian or not. So we will plot the density plot to check this. This looks normal with a long left tail and centered at Zero\n    The mean of the residual is close to Zero and there is no significant correlation also that we can see in the pacf plot for residuals\n       The residual diagnostics looks like a white noise since 95% of our sample autocorrelations is between the two blue lines and it meets all our criteria for a good forecast and prediction.\n    Predict function takes a start and end parameters to specify the index at which to start and stop the prediction\n We could have done it another way also by splitting the train and test data and then comparing the test values with the predicted values\n In our case we want to validate the predicted and expected value of first three years 1882-1885. so we will give a start value of 0 and end value of 36 and that will return an ndarray of predicted values\n  Using this returned value and the original value we will plot this and visualize how the predicted and real values differ. The red lines in the graph are original values and green are predicted values\n     This looks good so far but how to quantify how the score of predicted vs Expected values. For this we will calculate the Root Mean Square Error values using Scipy\n      Next and Final Step to forecast the temperature of upcoming years i.e. Out of Sample Forecast. We will use the forecast method of statsmodel for this task.\n You can pass steps as one of the parameter i.e. number of out of sample forecasts from the end of the sample\n    We are forecasting the temperature for next 3 years i.e. 36 months so our steps will be 36 and for a confidence interval of 95% we will pass the alpha value as 0.05\n      It is stored in a variable ci above and this is how the interval value looks like\n    Now we will plot the forecast value which is shown as red line for year 2020 thru 2023 in the below graph.\n The blue strip that you see around the line is the forecast interval which is drawn with the help of fill_between() api of matplotlib\n      Time Series Data Visualization is an important step to understand for analysis &amp; forecasting and finding out the patterns in data\n Dickey-Fuller test performed to determine if the data is stationary or not. It\u2019s necessary to check the stationarity before fitting the data to ARIMA\n Decomposition helps to remove the seasonality from the data and three components of decomposition are Trend, Seasonality and Residual\n Data differencing helps to remove stationarity from data and to determine the value of d\n Plot Auto-Correlation(ACF) and Partial Auto-Correlation (PACF) graph to determine the value of p and q\n Auto Arima package used to determine the value of p,q and d by evaluating the value of Akaike\u2019s Information Criterion (AIC)\n Residual diagnosis is an important step post fitting the ARIMA model to evaluate if forecasting can be done with the fitted model or not\n Residual property of ARIMAResult object used for the Residual Analysis. If the residual is a white noise then we are good and ready for forecasting\n  There are few topics which I have not explained in detail like Additive and Multiplicative Model, Determine the p,q value by reading the ACF and PACF plot and using SARIMAX function for time series data with seasonality. So I would be covering those topics separately in my upcoming posts\n Facebook has an open source tool  Prophet for forecasting time series data and in my next post I will be using prophet to evaluate and compare the forecasting results with python statsmodel", "posttime": "2020-05-02 18:04:55", "tags": "\u6559\u7a0b,\u5e8f\u5217,tutorial,\u6570\u636e,data", "title": "\u65f6\u95f4\u5e8f\u5217\u5efa\u6a21\u548c\u9884\u6d4b\u7efc\u5408\u6559\u7a0b", "title_en": "Comprehensive Tutorial on Time Series Modelling and Forecasting", "transed": 0, "url": "https://kanoki.org/2020/04/30/time-series-analysis-and-forecasting-with-arima-python/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6559\u7a0b", "\u5e8f\u5217", "tutorial", "\u6570\u636e", "data"]}, {"category": "", "categoryclass": "", "imagename": "746acbdc70aec3fcdc4dc47d15aefc90.jpg", "infoid": 1000293, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9\u6297\u590d\u6742\u6027\u662f\u8f6f\u4ef6\u5f00\u53d1\u7684\u4e00\u4e2a\u53cd\u590d\u51fa\u73b0\u7684\u4e3b\u9898\uff0c\u6211\u5df2\u7ecf\u770b\u5230\u5b83\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u91cd\u590d\u81ea\u5df1\u3002\u8fd9\u662f\u6211\u4e00\u76f4\u770b\u5230\u7684\u5728\u5404\u4e2a\u5c42\u6b21\u4e0a\u90fd\u5728\u4e89\u8bba\u7684\u4e8b\u60c5\uff1a\u51fd\u6570\u548c\u65b9\u6cd5\u5e94\u8be5\u8fdb\u884c\u591a\u5c11\u8bc4\u8bba\uff1f\u7406\u60f3\u7684\u62bd\u8c61\u91cf\u662f\u591a\u5c11\uff1f\u4e00\u4e2a\u6846\u67b6\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u6709\u592a\u591a\u7684\u9b54\u529b\uff1f\u4e00\u4e2a\u7ec4\u7ec7\u4e2d\u4ec0\u4e48\u65f6\u5019\u4f1a\u6709\u592a\u591a\u7684\u8bed\u8a00\uff1f\n\u6211\u4eec\u8bd5\u56fe\u6446\u8131\u590d\u6742\u6027\uff0c\u63a7\u5236\u5b83\uff0c\u8ffd\u6c42\u7b80\u5355\u3002\u6211\u8ba4\u4e3a\u8fd9\u6837\u6846\u5b9a\u4e8b\u60c5\u662f\u88ab\u8bef\u5bfc\u7684\u3002\u590d\u6742\u6027\u5fc5\u7136\u5b58\u5728\u4e8e\u67d0\u4e2a\u5730\u65b9\u3002\n\u5f39\u6027\u5de5\u7a0b\u5b66\u6559\u4f1a\u6211\u7684\u4e00\u4ef6\u4e8b\u662f\u63a7\u5236\u8bba\u4e2d\u7684\u5fc5\u5907\u591a\u6837\u6027\u7684\u6982\u5ff5\uff1a\u53ea\u6709\u590d\u6742\u6027\u624d\u80fd\u5904\u7406\u590d\u6742\u6027\u3002\n\u5982\u679c\u60a8\u4f7f\u6784\u5efa\u5de5\u5177\u53d8\u5f97\u7b80\u5355\uff0c\u5b83\u5c06\u65e0\u6cd5\u5904\u7406\u5b58\u5728\u7684\u6240\u6709\u5947\u602a\u7684\u8fb9\u7f18\u60c5\u51b5\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u5904\u7406\u5947\u602a\u7684\u8fb9\u7f18\u60c5\u51b5\uff0c\u60a8\u9700\u8981\u504f\u79bb\u60a8\u60f3\u8981\u5efa\u7acb\u7684\u4efb\u4f55\u89c4\u8303\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u901a\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u6613\u4e8e\u4f7f\u7528\uff0c\u5219\u901a\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u89c4\u5219\u5fc5\u987b\u5728\u5de5\u5177\u548c\u7528\u6237\u4e4b\u95f4\u5171\u4eab\uff0c\u8fd9\u4e9b\u7528\u6237\u4f1a\u6839\u636e\u5de5\u5177\u7684\u671f\u671b\u6765\u8c03\u6574\u81ea\u5df1\u7684\u7cfb\u7edf\u3002\n\u5982\u679c\u60a8\u5141\u8bb8\u914d\u7f6e\u6216\u7f16\u5199\u811a\u672c\uff0c\u5219\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u79cd\u6307\u5b9a\u5fc5\u987b\u5171\u4eab\u7684\u89c4\u5219\u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u8be5\u5de5\u5177\u9002\u5408\u4ed6\u4eec\u7684\u7cfb\u7edf\u3002\n\u5982\u679c\u8981\u4f7f\u5de5\u5177\u4fdd\u6301\u7b80\u5355\uff0c\u5219\u5fc5\u987b\u5f3a\u5236\u7528\u6237\u4ec5\u5728\u7b26\u5408\u6b64\u7b80\u5355\u6027\u7684\u53c2\u6570\u8303\u56f4\u5185\u8fdb\u884c\u64cd\u4f5c\u3002\n\u5982\u679c\u60a8\u7684\u7528\u6237\u7528\u4f8b\u4e0d\u80fd\u5f88\u597d\u5730\u4e0e\u60a8\u7684\u7b80\u5355\u6027\u76f8\u5339\u914d\uff0c\u4ed6\u4eec\u5c06\u56f4\u7ed5\u60a8\u7684\u5de5\u5177\u6784\u5efa\u586b\u9699\u7a0b\u5e8f\u4ee5\u5b9e\u73b0\u5176\u76ee\u6807\u3002\n\u8fd9\u662f\u65e0\u6cd5\u907f\u514d\u7684\u3002\u590d\u6742\u6027\u5fc5\u7136\u5b58\u5728\u4e8e\u67d0\u4e2a\u5730\u65b9\u3002\u4e0d\u7ba1\u4f60\u662f\u5426\u610f\u8bc6\u5230\uff0c\u5b83\u603b\u662f\u4eba\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u4e00\u90e8\u5206\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u5230\u4e86\u6e05\u5355\u7684\u6700\u540e\u4e00\u70b9(\u6211\u4eec\u603b\u662f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u505a\u5230\u8fd9\u4e00\u70b9)\uff0c\u57ab\u7247\u5c31\u4f1a\u6210\u4e3a\u98ce\u666f\u7684\u4e00\u90e8\u5206\u3002\u590d\u6742\u6027\u4e0d\u4f1a\u6f5c\u4f0f\u3002\u8fd9\u662f\u6bcf\u4e2a\u4eba\u5b66\u4e60\u7ecf\u5386\u7684\u4e00\u90e8\u5206\uff0c\u4ed6\u4eec\u4f1a\u9002\u5e94\u5b83\u3002\n\u4ed6\u4eec\u7ed5\u8fc7\u5b83\uff0c\u770b\u5230\u4e24\u4e2a\u76f8\u4e92\u51b2\u7a81\u7684\u6982\u5ff5\u4e4b\u95f4\u7684\u4e0d\u5339\u914d\u3002\u8fd9\u79cd\u5fc5\u8981\u7684\u590d\u6742\u6027\u53ef\u80fd\u4f1a\u79fb\u52a8-\u56de\u5230\u5de5\u5177(\u6216\u65b0\u5de5\u5177)-\u6216\u8005\u901a\u8fc7\u91cd\u65b0\u7ec4\u7ec7\u4e8b\u7269\u6765\u6d88\u9664\u3002\u6bcf\u4e00\u6b21\u8fd9\u6837\u7684\u6539\u53d8\u90fd\u9700\u8981\u4ed8\u51fa\u52aa\u529b\uff0c\u9700\u8981\u66f4\u591a\u7684\u8c03\u6574\uff0c\u4eba\u4eec\u9700\u8981\u770b\u5230\u590d\u6742\u6027\uff0c\u7406\u89e3\u590d\u6742\u6027\uff0c\u5904\u7406\u590d\u6742\u6027\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53d8\u5316\u4e0d\u4f1a\u7b80\u5316\u4e8b\u60c5\uff0c\u5b83\u4eec\u4f1a\u901a\u8fc7\u5728\u4e0d\u540c\u4eba\u7684\u5047\u8bbe\u4e4b\u95f4\u521b\u9020\u65b0\u7684\u4e0d\u5339\u914d\u800c\u4f7f\u4e8b\u60c5\u590d\u6742\u5316\uff0c\u8fd9\u5c06\u2026\u3002\n\u5728\u201c\u65e5\u5e38\u4e8b\u7269\u7684\u8bbe\u8ba1\u201d\u4e2d\uff0c\u5510\u00b7\u8bfa\u66fc\u63d0\u5230\u4e86\u5934\u8111\u4e2d\u7684\u77e5\u8bc6\u548c\u4e16\u754c\u4e2d\u7684\u77e5\u8bc6\u7684\u6982\u5ff5(\u7c7b\u4f3c\u7684\u6982\u5ff5\u5728Roesler&amp\uff1bWoods&39\uff1bDesign for Experts\u4e00\u4e66\u4e2d\u66f4\u5177\u5b66\u672f\u6027)\u3002\u5934\u8111\u4e2d\u7684\u77e5\u8bc6\u662f\u4f60\u77e5\u9053\u7684\u3001\u4f60\u5b66\u5230\u7684\u3001\u5b58\u5728\u4e8e\u4f60\u8bb0\u5fc6\u4e2d\u7684\u4e1c\u897f\u3002\u4e16\u754c\u4e0a\u7684\u77e5\u8bc6\u5c31\u662f\u4e00\u5207\uff1a\u8bb0\u5f55\u4e0b\u6765\u7684\u4fe1\u606f\uff0c\u8bbe\u8ba1\u4e2d\u7684\u63d0\u793a(\u4f60\u901a\u8fc7\u770b\u5b83\u7684\u7b26\u53f7\u5c31\u77e5\u9053\u7535\u6e90\u6309\u94ae\uff0c\u4f60\u77e5\u9053\u5b83\u53ef\u4ee5\u2026\u2026\u3002\n\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u4e13\u4e1a\u77e5\u8bc6\u5c31\u662f\u5728\u4f60\u7684\u5934\u8111\u4e2d\u62e5\u6709\u8ba9\u4f60\u66f4\u597d\u5730\u9605\u8bfb\u4e16\u754c\u7684\u77e5\u8bc6\u3002\n\u6211\u4eec\u5728\u8f6f\u4ef6\u8bbe\u8ba1\u4e2d\u9047\u5230\u7684\u4e00\u4e2a\u5e38\u89c1\u9677\u9631\u6765\u81ea\u4e8e\u5173\u6ce8\u6211\u4eec\u53d1\u73b0\u5b83\u662f\u5982\u4f55\u9605\u8bfb\u548c\u89e3\u91ca\u7ed9\u5b9a\u7684\u4ee3\u7801\u7247\u6bb5\u7684\u3002\u4e13\u6ce8\u4e8e\u7b80\u5355\u6027\u5145\u6ee1\u4e86\u5371\u9669\uff0c\u56e0\u4e3a\u590d\u6742\u6027\u662f\u65e0\u6cd5\u6d88\u9664\u7684\uff1a\u5b83\u53ea\u80fd\u56db\u5904\u79fb\u52a8\u3002\u5982\u679c\u60a8\u5c06\u5176\u79fb\u51fa\u60a8\u7684\u4ee3\u7801\uff0c\u5b83\u4f1a\u53bb\u54ea\u91cc\uff1f\n\u5f53\u6211\u4eec\u8bbe\u8ba1Rebar3\u65f6\uff0c\u6211\u4eec\u89c9\u5f97\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u5f88\u7b80\u5355\u3002\u5176\u7b80\u5355\u6027\u7684\u6761\u4ef6\u662f\u60a8\u5bf9Erlang/OTP\u9879\u76ee\u7684\u9884\u671f\u7ed3\u6784\u6709\u4e00\u4e2a\u57fa\u672c\u7684\u4e86\u89e3\u3002\u53ea\u8981\u4f60\u9075\u5faa\u8fd9\u4e9b\u89c4\u5219\uff0c\u4e8b\u60c5\u5c31\u4f1a\u8fdb\u5c55\u987a\u5229\u3002\u6211\u4eec\u5c06\u4e00\u4e9b\u590d\u6742\u6027\u5916\u5316\u5230\u66f4\u5e7f\u6cdb\u7684\u751f\u6001\u7cfb\u7edf\u4e2d\u3002\u89c4\u5219\u603b\u662f\u9700\u8981\u5b66\u4e60\u7684(\u6211\u4eec\u662f\u8fd9\u6837\u5047\u8bbe\u7684)\uff0c\u4f46\u662f\u5de5\u5177\u73b0\u5728\u4f9d\u8d56\u4e8e\u5bf9\u5b83\u4eec\u7684\u7406\u89e3\u3002\u5728\u4e3a\u4e86\u89e3\u89c4\u5219\u7684\u4eba\u7b80\u5316\u5de5\u5177\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u2026\u2026\u3002\n\u8fd9\u79cd\u9677\u9631\u5728\u8f6f\u4ef6\u4f53\u7cfb\u7ed3\u6784\u4e2d\u662f\u9690\u853d\u7684\u3002\u5f53\u6211\u4eec\u91c7\u7528\u50cf\u5fae\u670d\u52a1\u8fd9\u6837\u7684\u4e1c\u897f\u65f6\uff0c\u6211\u4eec\u4f1a\u52aa\u529b\u4f7f\u6bcf\u9879\u670d\u52a1\u90fd\u662f\u5355\u72ec\u7b80\u5355\u7684\u3002\u4f46\u662f\uff0c\u9664\u975e\u8fd9\u79cd\u7b80\u5355\u6027\u592a\u8fc7\u675f\u7f1a\uff0c\u4ee5\u81f3\u4e8e\u60a8\u7684\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u7ee7\u627f\u4e86\u5b83\u5e76\u88ab\u8feb\u53d8\u5f97\u7b80\u5355\uff0c\u5426\u5219\u5b83\u4ecd\u7136\u5fc5\u987b\u53bb\u67d0\u4e2a\u5730\u65b9\u3002\u5982\u679c\u5b83\u4e0d\u5728\u5355\u4e2a\u7684\u5fae\u670d\u52a1\u4e2d\uff0c\u90a3\u4e48\u5b83\u5728\u54ea\u91cc\uff1f\n\u590d\u6742\u6027\u5fc5\u7136\u5b58\u5728\u4e8e\u67d0\u4e2a\u5730\u65b9\u3002\u5982\u679c\u4f60\u5e78\u8fd0\u7684\u8bdd\uff0c\u5b83\u751f\u6d3b\u5728\u5b9a\u4e49\u660e\u786e\u7684\u5730\u65b9\u3002\u5728\u60a8\u51b3\u5b9a\u7a0d\u5fae\u590d\u6742\u7684\u4ee3\u7801\u4e2d\uff0c\u5728\u652f\u6301\u4ee3\u7801\u7684\u6587\u6863\u4e2d\uff0c\u5728\u5de5\u7a0b\u5e08\u7684\u57f9\u8bad\u8bfe\u7a0b\u4e2d\u3002\u4f60\u7ed9\u5b83\u4e00\u4e2a\u5730\u65b9\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u628a\u5b83\u5168\u90e8\u85cf\u8d77\u6765\u3002\u4f60\u53ef\u4ee5\u521b\u9020\u65b9\u6cd5\u6765\u7ba1\u7406\u5b83\u3002\u5f53\u4f60\u9700\u8981\u5b83\u7684\u65f6\u5019\uff0c\u4f60\u77e5\u9053\u53bb\u54ea\u91cc\u89c1\u5b83\u3002\u5982\u679c\u4f60\u4e0d\u8d70\u8fd0\uff0c\u53ea\u662f\u8bd5\u56fe\u5047\u88c5\u590d\u6742\u6027\u53ef\u4ee5\u5b8c\u5168\u907f\u514d\uff0c\u90a3\u4e48\u5b83\u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\u5c31\u65e0\u5904\u53ef\u53bb\u4e86\u3002..\u3002\n\u5728\u65e0\u5904\u53ef\u53bb\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e0d\u5f97\u4e0d\u5728\u60a8\u7684\u7cfb\u7edf\u4e2d\u5230\u5904\u6f2b\u6e38\uff0c\u65e0\u8bba\u662f\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\uff0c\u8fd8\u662f\u5728\u4eba\u4eec\u7684\u5934\u8111\u4e2d\u3002\u968f\u7740\u4eba\u4eec\u56db\u5904\u8f6c\u79fb\u548c\u79bb\u5f00\uff0c\u6211\u4eec\u5bf9\u5b83\u7684\u7406\u89e3\u4e5f\u4f1a\u53d7\u5230\u4fb5\u8680\u3002\n\u590d\u6742\u6027\u5fc5\u7136\u5b58\u5728\u4e8e\u67d0\u4e2a\u5730\u65b9\u3002\u5982\u679c\u4f60\u62e5\u62b1\u5b83\uff0c\u7ed9\u5b83\u5e94\u6709\u7684\u4f4d\u7f6e\uff0c\u5728\u77e5\u9053\u5b83\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u8bbe\u8ba1\u4f60\u7684\u7cfb\u7edf\u548c\u7ec4\u7ec7\uff0c\u5e76\u4e13\u6ce8\u4e8e\u9002\u5e94\uff0c\u5b83\u53ef\u80fd\u53ea\u4f1a\u6210\u4e3a\u4e00\u79cd\u538b\u529b\u3002", "note_en": "Fighting complexity is a recurring theme of software development I&#39;ve seen repeat itself over and over again. It&#39;s something I keep seeing debated at all levels: just how much commenting should go on in functions and methods? What&#39;s the ideal amount of abstraction? When does a framework start having &#34;too much magic&#34;? When are there too many languages in an organisation?\n We try to get rid of the complexity, control it, and seek simplicity. I think framing things that way is misguided. Complexity has to live somewhere.\n One thing Resilience Engineering has taught me is the concept of  Requisite Variety from cybernetics: only complexity can handle complexity.\n  if you make the build tool simple, it won&#39;t handle all the weird edge cases that exist out there\n if you want to handle the weird edge cases, you need to deviate from whatever norm you wanted to establish\n if you want ease of use for common defaults, the rules for common defaults must be shared between the tool and the users, who shape their systems to fit the tool&#39;s expectations\n if you allow configuration or scripting, you give the users a way to specify the rules that must be shared, so the tool fits their systems\n if you want to keep the tool simple, you have to force your users to only play within the parameters that fit this simplicity\n if your users&#39; use cases don&#39;t map well to your simplicity, they will build shims around your tool to attain their objectives\n This cannot be avoided. Complexity  has to live somewhere. It&#39;s always a part of people solving problems, whether you realize it or not.\n Unfortunately, if we make it to the last point of the list (we always do in some way), the shims become part of the landscape. Complexity doesn&#39;t lay dormant. It is part of everyone&#39;s learning experience, and they adapt to it.\n They work around it, see the mismatch between two clashing concepts. That necessary complexity may move around \u2014back into the tool (or a new tool) \u2014or be removed by re-structuring things. Each such change requires an effort and more adjustments, and for people to see the complexity, understand the complexity, and tackle the complexity. And in some cases, changes will not simplify things, they will complexify them by creating new mismatches between assumptions various people had, which will  ...\n In   The Design of Everyday Things, Don Norman mentions the concept of &#34;Knowledge in the head&#34; and &#34;knowledge in the world&#34; (similar concepts are more academically presented in Roesler &amp; Woods&#39;   Designing for Expertise). Knowledge in the head are things you know, that you have learned, that are in your memory. Knowledge in the world is everything else: information written down, cues in design (you know the power button by looking at its symbol, and you know it can  ...\n In some ways, expertise is having knowledge in your head that allows you to better read the world.\n  A common trap we have in software design comes from focusing on how &#34;simple&#34; we find it to read and interpret a given piece of code. Focusing on simplicity is fraught with peril because complexity can&#39;t be removed: it can just be shifted around. If you move it out of your code, where does it go?\n When we designed Rebar3, we felt the tool could be simple. The condition for its simplicity is that you have a basic understanding of the expected structure of Erlang/OTP projects. As long as you follow these rules, things will go well. We externalized some of the complexity into the broader ecosystem. The rules always needed to be learned (so we assumed), but the tool now depended on them being understood. In simplifying tool usage for people who knew the rules, we made it harder for  ...\n The trap is insidious in software architecture. When we adopt something like microservices, we try to make it so that each service is individually simple. But unless this simplicity is so constraining that your actual application inherits it and is forced into simplicity, it still has to go somewhere. If it&#39;s not in the individual microservices, then where is it?\n Complexity has to live  somewhere. If you are lucky, it lives in well-defined places. In code where you decided a bit of complexity should go, in documentation that supports the code, in training sessions for your engineers. You give it a place without trying to hide all of it. You create ways to manage it. You know where to go to meet it when you need it. If you&#39;re unlucky and you just tried to pretend complexity could be avoided altogether, it has no place to go in this world.  ...\n With nowhere to go, it has to roam everywhere in your system, both in your code and in people&#39;s heads. And as people shift around and leave, our understanding of it erodes.\n Complexity has to live somewhere. If you embrace it, give it the place it deserves, design your system and organisation knowing it exists, and focus on adapting, it might just become a strength.", "posttime": "2020-05-02 18:04:51", "tags": "\u5b58\u5728,complexity,\u590d\u6742\u6027", "title": "\u590d\u6742\u6027\u5fc5\u987b\u5b58\u5728\u4e8e\u67d0\u4e2a\u5730\u65b9", "title_en": "Complexity Has to Live Somewhere", "transed": 0, "url": "https://ferd.ca/complexity-has-to-live-somewhere.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u5b58\u5728", "\u590d\u6742\u6027"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000292, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6628\u5929\u82f9\u679c\u53d1\u5e03\u4e86iOS13.5Beta3(\u4f3c\u4e4e\u5c06iOS13.4.5\u91cd\u65b0\u547d\u540d\u4e3a13.5)\uff0c\u8fd9\u6740\u6b7b\u4e86\u6211\u7684\u4e00\u4e2abug\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u666e\u901a\u7684\u9519\u8bef\uff0c\u8fd9\u662f\u6211\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a0day\u3002\u800c\u4e14\u8fd9\u53ef\u80fd\u4e5f\u662f\u6700\u597d\u7684\u4e00\u6b21\u3002\u4e0d\u4e00\u5b9a\u662f\u56e0\u4e3a\u5b83\u7ed9\u4e86\u4f60\u591a\u5c11\uff0c\u4f46\u80af\u5b9a\u662f\u56e0\u4e3a\u6211\u7528\u4e86\u5b83\u591a\u5c11\uff0c\u4e5f\u56e0\u4e3a\u5b83\u6709\u591a\u4e48\u7b80\u5355\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u6b64\u7b80\u5355\uff0c\u4ee5\u81f3\u4e8e\u6211\u5728\u63a8\u7279\u4e0a\u53d1\u5e03\u7684PoC\u770b\u8d77\u6765\u7edd\u5bf9\u662f\u4e00\u4e2a\u7b11\u8bdd\u3002\u4f46\u8fd9\u662f100%\u771f\u5b9e\u7684\u3002\n\u6211\u79f0\u5b83\u4e3a\u201c\u901a\u7075\u7eb8\u201d\u662f\u56e0\u4e3a\uff0c\u5c31\u50cf\u201c\u795e\u79d8\u535a\u58eb\u201d\u559c\u6b22\u643a\u5e26\u7684\u90a3\u4e2a\u540d\u5b57\u7684\u7269\u54c1\u4e00\u6837\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u901a\u8fc7\u5b89\u68c0\uff0c\u8ba9\u522b\u4eba\u76f8\u4fe1\u4f60\u6709\u5f88\u591a\u4f60\u4e0d\u5e94\u8be5\u62e5\u6709\u7684\u8bc1\u4ef6\u3002\n\u4e0e\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6bug\u548c\u6211\u4e0d\u5f97\u4e0d\u5904\u7406\u7684\u4efb\u4f55\u5176\u4ed6\u6f0f\u6d1e\u76f8\u6bd4\uff0c\u8fd9\u4e2a\u9519\u8bef\u5728\u6ca1\u6709\u4efb\u4f55iOS\u548c/\u6216\u6f0f\u6d1e\u80cc\u666f\u77e5\u8bc6\u7684\u60c5\u51b5\u4e0b\u5e94\u8be5\u662f\u53ef\u4ee5\u7406\u89e3\u7684\u3002\u672c\u7740\u8fd9\u79cd\u7cbe\u795e\uff0c\u6211\u4e5f\u5c06\u5c1d\u8bd5\u4ee5\u4e00\u79cd\u6ca1\u6709iOS\u6216\u5229\u7528\u7279\u5b9a\u77e5\u8bc6\u7684\u65b9\u5f0f\u6765\u64b0\u5199\u8fd9\u7bc7\u6587\u7ae0\u3002\u4e0d\u8fc7\uff0c\u6211\u786e\u5b9e\u5e0c\u671b\u60a8\u5927\u81f4\u4e86\u89e3\u4ec0\u4e48\u662fXML\u3001\u516c\u94a5\u52a0\u5bc6\u548c\u54c8\u5e0c\uff0c\u7406\u89e3C\u4ee3\u7801\u5f53\u7136\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u4f18\u52bf\u3002\n\u6240\u4ee5\uff0c\u7cfb\u597d\u5b89\u5168\u5e26\uff0c\u6211\u5927\u80c6\u5730\u8bf4\uff0c\u8fd9\u662fiOS\u4e0a\u8fc4\u4eca\u4e3a\u6b62\u6700\u5f3a\u5927\u7684\u6c99\u76d2\u9003\u9038\u7684\u6700\u4f18\u96c5\u7684\u6f0f\u6d1e\u3002\uff1aP\u3002\n\u57fa\u672c\u6982\u5ff5\u662f&lt\uff1btag&gt\uff1b\u6253\u5f00\u4e00\u4e2a\u6807\u8bb0\uff0c&lt\uff1b/tag&gt\uff1b\u5173\u95ed\u5b83\uff0c\u7136\u540e\u5728\u5176\u95f4\u63d2\u5165\u5185\u5bb9\u3002\u8fd9\u4e9b\u5185\u5bb9\u53ef\u4ee5\u662f\u539f\u59cb\u6587\u672c\uff0c\u4e5f\u53ef\u4ee5\u662f\u66f4\u591a\u6807\u7b7e\u3002\u7a7a\u6807\u8bb0\u53ef\u4ee5\u662f\u81ea\u52a8\u5173\u95ed\u7684\uff0c\u5982&lt\uff1btag/&gt\uff1b\uff0c\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5177\u6709a=&#34\uff1bb&#34\uff1b\u4ee5\u53cayada yada\u7b49\u5c5e\u6027\u3002\u4e0a\u8ff0\u6587\u4ef6\u4e2d\u6709\u4e09\u9879\u5185\u5bb9\u8d85\u51fa\u4e86\u57fa\u672c\u6807\u8bb0\u7684\u8303\u56f4\uff1a\n&lt\uff1b\uff1f.\uff1f&gt\uff1b-\u4ee5\u95ee\u53f7\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u6807\u7b7e\uff0c\u5373\u6240\u8c13\u7684\u201c\u5904\u7406\u6307\u4ee4\u201d\uff0c\u4f1a\u53d7\u5230\u7279\u6b8a\u5904\u7406\u3002\n&lt\uff1b\uff01DOCTYPE.&gt\uff1b-\u4ee5\uff01DOCTYPE\u5f00\u5934\u7684\u6807\u8bb0\u662f\u201c\u6587\u6863\u7c7b\u578b\u58f0\u660e\u201d\uff0c\u4e5f\u4f1a\u88ab\u7279\u6b8a\u5904\u7406\u3002\n&lt\uff1b\uff01-&gt\uff1b-\u4ee5&lt\uff1b\uff01--\u5f00\u5934\u548c--&gt\uff1b\u7ed3\u5c3e\u7684\u6807\u8bb0\u662f\u6ce8\u91ca\uff0c\u5b83\u4eec\u52a0\u4e0a\u5176\u5185\u5bb9\u5c06\u88ab\u5ffd\u7565\u3002\n\u5b8c\u6574\u7684XML\u89c4\u8303\u5305\u542b\u66f4\u591a\u5185\u5bb9\uff0c\u4f46\u662fa)\u8fd9\u4e0e\u6211\u4eec\u65e0\u5173\uff0cb)\u4efb\u4f55\u4eba\u90fd\u4e0d\u5e94\u8be5\u88ab\u5f3a\u8feb\u9605\u8bfb\u3002\u73b0\u5728\uff0cXML\u5f88\u96be\u89e3\u6790\uff0c\u539f\u56e0\u662f\u8fd9\u7bc7XKCD\u5f88\u597d\u5730\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff1a\n\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u6784\u9020&lt\uff1bmis&gt\uff1bmatching&lt\uff1b/tag&gt\uff1b\uff0c&lt\uff1b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u6c38\u8fdc\u4e0d\u4f1a\u5173\u95ed&gt\uff1b\uff0c\u751a\u81f3\u662f\u6c38\u8fdc\u4e0d\u4f1a\u5173\u95ed\u7684&lt\uff1b\u6807\u8bb0\uff0c\u4e5f\u53ef\u80fd\u662f\u8fd9\u6837\u7684\u6807\u8bb0\uff1a&lt\uff1b\uff01&gt\uff1b\uff0c\u5217\u8868\u5c31\u662f\u4e0d\u4f1a\u7ed3\u675f\u3002\u8fd9\u4f7f\u5f97XML\u6210\u4e3a\u4e00\u79cd\u6781\u96be\u6b63\u786e\u89e3\u6790\u7684\u683c\u5f0f\uff0c\u8fd9\u4e00\u70b9\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u91cd\u8981\u8d77\u6765\u3002\n\u73b0\u5728\uff0c\u5728XML\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u6709\u4e86\u201c\u5c5e\u6027\u5217\u8868\u201d\uff0c\u6216\u7b80\u79f0\u4e3a\u201cplist\u201d\uff1a\u53e6\u4e00\u79cd\u7528\u4e8e\u5b58\u50a8\u5e8f\u5217\u5316\u6570\u636e\u7684\u901a\u7528\u683c\u5f0f\u3002\u4f60\u6709\u6570\u7ec4\u3001\u5e26\u6709\u952e-\u503c\u5bf9\u7684\u5b57\u5178\u3001\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u7b49\u7b49\u3002plist\u6587\u4ef6\u6709\u4e00\u5806\u4e0d\u540c\u7684\u5f62\u5f0f\uff0c\u4f46\u5728\u82f9\u679c\u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u4f60\u4f1a\u5b9e\u9645\u770b\u5230\u7684\u53ea\u6709\u4e24\u79cd\uff1a\u201cbplist\u201d\u4e8c\u8fdb\u5236\u683c\u5f0f\u548c\u57fa\u4e8eXML\u7684\u683c\u5f0f\uff0c\u8fd9\u4e24\u79cd\u683c\u5f0f\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8ba8\u8bba\u8303\u56f4\u3002\u6709\u6548\u7684XML plist\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n&lt\uff1b\uff1fxml version=&#34\uff1bUTF-8&#34\uff1b\uff1f&gt\uff1b&lt\uff1b\uff01DOCTYPE plist public&#34\uff1b-//APPLIST//dtd plist 1.0//en&#34\uff1b&#34\uff1bhttp://www.apple.com/DTDs/PropertyList-1.0.dtd&#34\uff1b&gt\uff1b&lt\uff1bplist version=&#34\uff1b1.0&#34\uff1b&gt\uff1b&lt\uff1bdict&&gt;\uff1b&lt\uff1bkey&gt\uff1b\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7248\u672c&lt\uff1b/key&gt\uff1b&lt\uff1bstring&gt\uff1b19D76&lt\uff1b/string&gt\uff1bIOConsoleLocked&lt\uff1b/key&gt\uff1b&lt\uff1bfalse/&gt\uff1b&lt\uff1b\uff01--abc--&gt\uff1b&lt\uff1bkey&gt\uff1bIOConsoleUsers&lt\uff1b/key&gt\uff1b&lt\uff1barray&gt\uff1b&lt\uff1b\nPLIST\u6587\u4ef6\u5728\u6574\u4e2aiOS\u548cMacOS\u4e2d\u90fd\u7528\u4e8e\u914d\u7f6e\u6587\u4ef6\u3001\u8f6f\u4ef6\u5305\u5c5e\u6027\uff0c\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u662f\u4f5c\u4e3a\u4ee3\u7801\u7b7e\u540d\u7684\u4e00\u90e8\u5206\u3002\n\u6240\u4ee5\uff1a\u4ee3\u7801\u7b7e\u540d\u3002\u5f53\u4e8c\u8fdb\u5236\u6587\u4ef6\u60f3\u8981\u5728iOS\u4e0a\u8fd0\u884c\u65f6\uff0c\u540d\u4e3aAppleMobileFileIntegrity(\u6216\u201cAMFI\u201d)\u7684\u5185\u6838\u6269\u5c55\u8981\u6c42\u5b83\u5177\u6709\u6709\u6548\u7684\u4ee3\u7801\u7b7e\u540d\uff0c\u5426\u5219\u5b83\u5c06\u88ab\u5f53\u573a\u6740\u6b7b\u3002\u8fd9\u4e2a\u4ee3\u7801\u7b7e\u540d\u662f\u4ec0\u4e48\u6837\u5b50\u5bf9\u6211\u4eec\u6765\u8bf4\u5e76\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u5b83\u662f\u7531\u6563\u5217\u548c\u6807\u8bc6\u7684\u3002\u6b64\u54c8\u5e0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u8fdb\u884c\u9a8c\u8bc1\uff1a\n\u5b83\u53ef\u4ee5\u63d0\u524d\u4e3a\u5185\u6838\u6240\u77e5\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u4e34\u65f6(ad-hoc)\u201d\u7b7e\u540d\u3002\u5b83\u7528\u4e8eiOS\u7cfb\u7edf\u5e94\u7528\u7a0b\u5e8f\u548c\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5e76\u4e14\u76f4\u63a5\u6839\u636e\u5185\u6838\u4e2d\u7684\u5df2\u77e5\u6563\u5217\u96c6\u5408\u68c0\u67e5\u6563\u5217\u3002\n\u5b83\u9700\u8981\u4f7f\u7528\u6709\u6548\u7684\u4ee3\u7801\u7b7e\u540d\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\u3002\u8fd9\u9002\u7528\u4e8e\u6240\u6709\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u6b64\u573a\u666f\u4e2d\uff0cAMFI\u4f1a\u8c03\u7528userland\u5b88\u62a4\u8fdb\u7a0bamfid\uff0c\u8ba9\u5b83\u8fd0\u884c\u6240\u6709\u5fc5\u8981\u7684\u68c0\u67e5\u3002\nApp Store\u8bc1\u4e66\u3002\u8fd9\u53ea\u7531\u82f9\u679c\u81ea\u5df1\u6301\u6709\uff0c\u4e3a\u4e86\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u7b7e\u540d\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u901a\u8fc7App Store\u7684\u5ba1\u67e5\u3002\n\u5f00\u53d1\u8005\u8bc1\u4e66\u3002\u8fd9\u53ef\u4ee5\u662f\u514d\u8d39\u7684\u201c7\u5929\u201d\u8bc1\u4e66\u3001\u201c\u5e38\u89c4\u201d\u5f00\u53d1\u4eba\u5458\u8bc1\u4e66\u6216\u4f01\u4e1a\u5206\u53d1\u8bc1\u4e66\u3002\n\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6709\u95ee\u9898\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd8\u9700\u8981\u201c\u914d\u7f6e\u914d\u7f6e\u6587\u4ef6\u201d\uff0c\u5373Xcode(\u6216\u67d0\u4e9b\u7b2c\u4e09\u65b9\u8f6f\u4ef6)\u53ef\u4ee5\u4e3a\u60a8\u83b7\u53d6\u7684\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u9700\u8981\u653e\u5728Payload/Your.app/embedded.mobil\u7684App.ipa\u5305\u4e2d", "note_en": "Yesterday Apple released iOS 13.5 beta 3 (seemingly renaming iOS 13.4.5 to 13.5 there), and that killed one of my bugs. It wasn\u2019t just any bug though, it was the first 0day I had ever found. And it was probably also the best one. Not necessarily for how much it gives you, but certainly for how much I\u2019ve used it for, and also for how ridiculously simple it is. So simple, in fact, that  the PoC I tweeted out looks like an absolute joke. But it\u2019s 100% real.\n I dubbed it \u201cpsychic paper\u201d because, just like  the item by that name that Doctor Who likes to carry, it allows you get past security checks and make others believe you have a wide range of credentials that you shouldn\u2019t have.\n In contrast to virtually any other bug and any other exploit I\u2019ve had to do with, this one should be understandable without any background knowledge in iOS and/or exploitation. In that spirit, I\u2019ll also try and write this post in a manner that assumes no iOS- or exploitation-specific knowledge. I do expect you however to loosely know what XML, public key encryption and hashes are, and understanding C code is certainly a big advantage.\n So strap in for the story of what I\u2019ll boldly claim to be the most elegant exploit for the most powerful sandbox escape on iOS yet. :P\n     The basic concept is that  &lt;tag&gt; opens a tag,  &lt;/tag&gt; closes it, and stuff goes in between. That stuff can be either raw text or more tags. Empty tags can be self-closing like  &lt;tag/&gt;, and they can have attributes like  a=&#34;b&#34; as well, yada yada. There\u2019s three things in the above file that go beyond just basic tags:\n &lt;?...?&gt; - Tags starting and ending with question marks, so-called \u201cprocessing instructions\u201d, are treated specially.\n  &lt;!DOCTYPE ...&gt; - Tags starting with  !DOCTYPE are, well, \u201cdocument type declarations\u201d and are treated specially as well.\n  &lt;!-- --&gt; - Tags starting with  &lt;!-- and ending with  --&gt; are comments, and they plus their contents are ignored.\n The full XML specification contains  a lot more, but a) that\u2019s irrelevant to us, and b) nobody should ever be forced to read that. Now, XML is horrible to parse for reasons this XKCD illustrates beautifully:\n  So yeah, you can construct  &lt;mis&gt;matched&lt;/tags&gt;,  &lt;attributes that=&#34;are never closed&gt;, even  &lt;tags that are never closed, maybe a tag like this:  &lt;!&gt;, the list simply doesn\u2019t end. This makes XML a format that\u2019s excruciatingly hard to parse correctly, which will become relevant in a bit.\n Now building on XML, we have \u201cproperty list\u201d, or \u201cplist\u201d for short: yet another general-purpose format for storing serialised data. You have arrays, dictionaries with key -&gt; value pairs, strings, numbers, etc. Plist files exist in a bunch of different forms, but the only two that you\u2019ll realistically see in an Apple ecosystem are the \u201cbplist\u201d binary format that are out of scope for this post, and the XML-based format. A valid XML plist can look something like this:\n &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt; &lt;plist  version= &#34;1.0&#34; &gt; &lt;dict&gt;  &lt;key&gt;OS Build Version &lt;/key&gt;  &lt;string&gt;19D76 &lt;/string&gt;  &lt;key&gt;IOConsoleLocked &lt;/key&gt;  &lt;false/&gt;  &lt;!-- abc --&gt;  &lt;key&gt;IOConsoleUsers &lt;/key&gt;  &lt;array&gt;  &lt;dict&gt;  &lt;key&gt;kCGSSessionUserIDKey &lt;/key&gt;  &lt;integer&gt;  ...\n Plist files are used all throughout iOS and macOS for configuration files, package properties, and last but not least as part of code signatures.\n So: code signatures. When a binary wants to run on iOS, a kernel extension called AppleMobileFileIntegrity (or \u201cAMFI\u201d) requires it to have a valid code signature, or else it will be killed on the spot. What this code signature looks like isn\u2019t important for us, all that matters is that it is identified by a hashsum. This hash can be validated in one of two ways:\n It can be known to the kernel ahead of time, which is called an \u201cad-hoc\u201d signature. This is used for iOS system apps and daemons, and the hash is simply checked against a collection of known hashes directly in the kernel.\n  It needs to be signed with a valid code signing certificate. This is used for all 3rd party apps, and in this scenario, AMFI calls out to the userland daemon  amfid to have it run all the necessary checks.\n  The App Store certificate. This is held only by Apple themselves and in order to get signed this way, your app needs to pass the App Store review.\n  Developer certificates. This can be the free \u201c7-day\u201d certificates, \u201cregular\u201d developer certificate, or enterprise distribution certificates.\n In the latter case, the app in question will also require a \u201cprovisioning profile\u201d, a file that Xcode (or some 3rd party software) can fetch for you, and that needs to be placed in your  App.ipa bundle at  Payload/Your.app/embedded.mobileprovision. This file is signed by Apple themselves, and specifies the duration, the list of devices, and the developer accounts it is valid for, as well as all the restrictions that should apply to the app.\n  In a standard UNIX environment, pretty much the only security boundaries you get are UID checks. Processes of one UID can \u2019t access resources of another UID, and any resource deemed \u201cprivileged \u201drequires UID 0, i.e. \u201croot \u201d. iOS and macOS still use that, but also introduce the concept of \u201centitlements \u201d. In layman \u2019s terms, entitlements are a list of properties and/or privileges that should be applied to your binary. If present, they are embedded in the code signature of your binary,  ...\n  This would mean that the binary in question \u201cholds the  task_for_pid-allow entitlement\u201d, which in this specific case means is allowed to use the  task_for_pid() mach trap, which is otherwise not allowed at all (at least on iOS). Such entitlements are checked all throughout iOS and macOS and there\u2019s well upwards of a thousand different ones in existence (Jonathan Levin has built  a big catalogue of all the ones he could find, if you \u2019re curious). The important thing is just that all  ...\n This presents an interesting problem. With iOS system apps and daemons, Apple is the one signing them, so they wouldn \u2019t put any entitlements on there that they don \u2019t want the binaries to have. The same goes for App Store apps, where Apple is the one creating the final signature. But with developer certificates, the signature on the binary is created by the developers themselves, and Apple merely signs the provisioning profile. This means that the provisioning profile must create  ...\n  Compared to the over-1000 entitlements in existence, this list is extremely short, with the only two functional entitlements being  keychain-access-groups (related to credentials) and  get-task-allow (allowing your app to be debugged). Not a whole lot to work with.\n  Back in fall 2016  I wrote my first kernel exploit, which was based on the infamous \u201cPegasus vulnerabilities\u201d. Those were memory corruptions in the XNU kernel in a function called  OSUnserializeBinary, which is a subordinate of another function called  OSUnserializeXML. These two functions are used to parse not exactly XML data, but rather plist data - they are  the way of parsing plist data in the kernel. Now given the vulnerabilities I had just written an exploit for, and the still  ...\n At the same time, I was in the process of figuring out how to build an iOS app without Xcode. Partly because I wanted to understand what\u2019s really going on under the hood, and partly because I just hate GUIs for development, especially when you Google how to do something, and the answer is a series of 17 \u201cclick here and there\u201ds that are no longer valid because all the GUI stuff moved somewhere else in the last update. So I was getting a provisioning profile via Xcode every 7 days,  ...\n It was this combination, as well as probably a good portion of dumb luck that made me discover the following bug, and excitedly tweet about it:\n    In an informal sense, it\u2019s clear what it means for a binary to hold an entitlement. But how do you  formally specify that? What would code look like that takes as input a process handle and an entitlement name and just returned a boolean saying whether the process does or does not have that entitlement? Luckily for us, XNU has precisely such a function in   iokit/bsddev/IOKitBSDInit.cpp:\n extern  &#34;C&#34;  boolean_t IOTaskHasEntitlement ( task_t  task ,  const  char  *  entitlement ) {  OSObject  *  obj ;  obj  =  IOUserClient :: copyClientEntitlement ( task ,  entitlement );  if  ( ! obj )  {  return  false ;  }  obj -&gt; release ();  return  obj  !=  kOSBooleanFalse ; }\n The lion\u2019s share of the work here is done by these two functions though, from   iokit/Kernel/IOUserClient.cpp:\n OSDictionary *  IOUserClient :: copyClientEntitlements ( task_t  task ) { #define MAX_ENTITLEMENTS_LEN (128 * 1024)  proc_t  p  =  NULL ;  pid_t  pid  =  0 ;  size_t  len  =  0 ;  void  * entitlements_blob  =  NULL ;  char  * entitlements_data  =  NULL ;  OSObject  * entitlements_obj  =  NULL ;  OSDictionary  * entitlements  =  NULL ;  OSString  * errorString  =  NULL ;  p  =  ( proc_t ) get_bsdtask_info ( task );  if  ( p  ==  NULL )  {  goto  fail ;  }  pid  =  proc_pid ( p );  if  ( cs_entitlements_dictionary_copy ( p ,  ( void  ** ) &amp; entitlements )  ==  0  ...\n So we have a reference implementation for entitlement checks, and it\u2019s backed by  OSUnserializeXML. Great! \u2026or is it?\n A very interesting thing about this bug is that I couldn\u2019t point you at any particular piece of code and say \u201cthere\u2019s my bug\u201d. The reason for that is that, of course, iOS doesn\u2019t have just one, or two, or even three plist parsers, it has at least four! These are:\n    The answer to 1) is \u201call of them\u201d, and to 2)  CFPropertyListCreateWithData. And as a few folks on Twitter already figured out after my tweet, the answer to 3) is obviously \u201clolnope\u201d. Because it\u2019s very hard to parse XML correctly,  valid XML makes all parsers return the same data, but slightly  invalid XML makes them return just slightly  not the same data. :D In other words, any parser difference can be exploited to make different parsers see different things. This is the  ...\n Before we move on to exploiting this, I would like to note that in all my tests,  OSUnserializeXML and  IOCFUnserialize always returned the same data, so for the rest of this post I will consider them as equivalent. For brevity, I will also be dubbing  OSUnserializeXML/ IOCFUnserialize \u201cIOKit\u201d,  CFPropertyListCreateWithData \u201cCF\u201d, and  xpc_create_from_plist \u201cXPC\u201d.\n  Let\u2019s start with the variant of the PoC I tweeted out, which is perhaps the most elegant way of exploiting this bug:\n &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt; &lt;plist  version= &#34;1.0&#34; &gt; &lt;dict&gt;  &lt;!-- these aren&#39;t the droids you&#39;re looking for --&gt;  &lt;!---&gt;&lt;!--&gt;  &lt;key&gt;platform-application &lt;/key&gt;  &lt;true/&gt;  &lt;key&gt;com.apple.private.security.no-container &lt;/key&gt;  &lt;true/&gt;  &lt;key&gt;\n The interesting tokens here are  &lt;!---&gt; and  &lt;!--&gt;, which, as per my understanding of the XML specification, are not valid XML tokens. Nonetheless, IOKit, CF and XPC all accept the above XML/plist\u2026 just not exactly in the same way.\n I wrote a little tool called   plparse that I have so far been reluctant to open-source because it emphasises the fact that there exist multiple plist parsers in iOS, and that they certainly don\u2019t all work the same. It takes an input file and any combination of  -c,  -i and  -x args to parse the file with the CF, IOKit and XPC engines respectively. Running on the above file, we get:\n % plparse -cix ent.plist {}{ task_for_pid-allow: true, platform-application: true, com.apple.private.security.no-container: true,}{ com.apple.private.security.no-container: true, platform-application: true, task_for_pid-allow: true,}\n The output is a lazy JSON-like format, but you get the gist of it. At the top is CF, followed by IOKit, and finally XPC. This means that when we slap the above entitlements file on our app (plus app identifier that we need and such) and  amfiduses CF to check whether we have any entitlements that the provisioning profile doesn \u2019t allow, it doesn \u2019t see any. But then when the kernel or some daemon wants to check whether we \u2019re allowed to do Fun Stuff \u2122, they see  ...\n So how does this specific example work? This is the comment tag handling code of CF (the relevant one anyway, there are multiple):\n case  &#39;!&#39; :  // Could be a comment  if  ( pInfo -&gt; curr + 2  &gt;=  pInfo -&gt; end )  {  pInfo -&gt; error  =  __CFPropertyListCreateError ( kCFPropertyListReadCorruptError ,  CFSTR ( &#34;Encountered unexpected EOF&#34; ));  return  false ;  }  if  ( * ( pInfo -&gt; curr + 1 )  ==  &#39;-&#39;  &amp;&amp;  * ( pInfo -&gt; curr + 2 )  ==  &#39;-&#39; )  {  pInfo -&gt; curr  +=  2 ;  skipXMLComment ( pInfo );  }  else  {  pInfo -&gt; error  =  __CFPropertyListCreateError ( kCFPropertyListReadCorruptError ,  CFSTR ( &#34;Encountered  ...\n  if  ( c  ==  &#39;!&#39; )  {  c  =  nextChar ();  bool  isComment  =  ( c  ==  &#39;-&#39; )  &amp;&amp;  (( c  =  nextChar ())  !=  0 )  &amp;&amp;  ( c  ==  &#39;-&#39; );  if  ( ! isComment  &amp;&amp;  ! isAlpha ( c ))  {  return  TAG_BAD ;  // &lt;!1, &lt;!-A, &lt;!eos  }  while  ( c  &amp;&amp;  ( c  =  nextChar ())  !=  0 )  {  if  ( c  ==  &#39;\\n&#39; )  {  state -&gt; lineNumber ++ ;  }  if  ( isComment )  {  if  ( c  !=  &#39;-&#39; )  {  continue ;  }  c  =  nextChar ();  if  ( c  !=  &#39;-&#39; )  {  continue ;  }  c  =  nextChar ();  }  if  ( c  ==  &#39;&gt;&#39;  ...\n As can be seen, IOKit checks for the  !-- chars, and then correctly advances the pointer by three chars before seeing  -&gt;, which doesn\u2019t end the comment. CF on the other hand only advances the pointer by  two chars, so it parses the second  - twice, thus seeing both  &lt;!-- and  --&gt;. This means that while IOKit considers  &lt;!---&gt; as just the start of a comment, CF considers it as both start and end. After that, we feed both parsers the  &lt;!--&gt;token,  ...\n  After discovering this, I didn\u2019t bother reversing XPC, I simply fed it some test data and observed the results. In this case, it turned out to see the same things as IOKit, which was  perfect for my case. I could sneak entitlements past  amfid using CF, but have them show up when parsed by both IOKit and XPC!\n   &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt; &lt;plist  version= &#34;1.0&#34; &gt; &lt;dict&gt;  &lt;???&gt; &lt;!-- ?&gt; &lt;key&gt;task_for_pid-allow&lt;/key&gt; &lt;true/&gt; &lt;!-- --&gt; &lt;/dict&gt; &lt;/plist&gt;\n  These are all less elegant and less rewarding than the first variant, and I\u2019ll leave it as an exercise to the reader to figure out what parser difference causes those, or how the different parsers react to them.\n One thing to note here though is that, depending on what you use to install IPA files on your iDevice, getting these entitlements to survive that process can be tricky. That is because the entitlements on a provisioned app also contain a team- and app identifier, which at least Cydia Impactor generates randomly every time you sign, and thus has to parse, modify and re-generate the entitlements blob. I don \u2019t know about any of its alternatives, but I \u2019ve  ...\n  From this point forward, it\u2019s simply a matter of picking entitlements. For a start, we can give ourselves the three entitlements in my initial PoC:\n com.apple.private.security.no-container - This prevents the sandbox from applying any profile to our process whatsoever, meaning we can now read from and write to any location the  mobile user has access to, execute a ton of syscalls, and talk to many hundreds of drivers and userland services that we previously weren\u2019t allowed to. And as far as user data goes, security no longer exists.\n  task_for_pid-allow - Just in case the file system wasn\u2019t enough, this allows us to look up the task port of any process running as  mobile, which we can then use to read and write process memory, or directly get or set thread register states.\n  platform-application - Normally we would be marked as a non-Apple binary and not be allowed to perform the above operations on task ports of Apple binaries, but this entitlement marks us as a genuine, mint-condition Cupertino Cookie. :P\n And just in case this entitlement magic wasn\u2019t enough, say we needed to pretend to CF that we have certain entitlements as well, we could easily do that with the three above ones now. All we have to do is find a binary that holds the entitlement(s) we want,  posix_spawn it in suspended state, get the newly created process\u2019 task port, and make it do our bidding:\n task_t  haxx ( const  char  * path_of_executable ) {  task_t  task ;  pid_t  pid ;  posix_spawnattr_t  att ;  posix_spawnattr_init ( &amp; att );  posix_spawnattr_setflags ( &amp; att ,  POSIX_SPAWN_START_SUSPENDED );  posix_spawn ( &amp; pid ,  path_of_executable ,  NULL ,  &amp; att ,  ( const  char * []){  path_of_executable ,  NULL  },  ( const  char * []){  NULL  });  posix_spawnattr_destroy ( &amp; att );  task_for_pid ( mach_task_self (),  pid ,  &amp; task );  return  task ; }\n You can further get some JIT entitlements to dynamically load or generate code, you can spawn a shell, or any of literally a thousand other things.\n There are a mere two privileges this bug does not give us: root and kernel. But for both of those, our available attack surfaces just increased a hundredfold, and I would argue that going to root isn\u2019t even worth it, because you might as well go straight for the kernel.\n But I hope you will understand, dear reader, that losing one 0day is loss enough for me, so of course escalating past \u201cmobile with every entitlement ever\u201d is left as an exercise to you. ;)\n  Given the elusive nature of this bug, how did Apple ultimately patch it? Obviously there could only be one way: by introducing MORE PLIST PARSERS!!!one!\n In iOS 13.4 already, Apple hardened entitlement checks somewhat, due to a bug report  credited to Linus Henze:\n Available for: iPhone 6s and later, iPad Air 2 and later, iPad mini 4 and later, and iPod touch 7th generation\n While I don\u2019t know the exact details of that bug, based on  a tweet of Linus I\u2019m assuming this had to do with bplist, which, while also exploiting parser differences, wouldn\u2019t have gotten past  amfid. And my bug actually survived the 13.4 fix, but was finally killed in 13.5 beta 3.\n I also don\u2019t know whether it was Linus, Apple or someone else who went on to look for more parser differences, but having two entitlement bugs fixed in two consecutive minor iOS releases feels like too much of a coincidence, so I\u2019m strongly assuming whoever it was drew inspiration from Linus\u2019 bug.\n Apple\u2019s final fix consists of introducing a new function called  AMFIUnserializeXML, which is pasted into both AMFI.kext and  amfid, and is used to compare against the results of  OSUnserializeXML and  CFPropertyListCreateWithData to make sure they are the same. You can still include a sequence like  &lt;!---&gt;&lt;!--&gt;&lt;!-- --&gt;in your entitlements and it will go through, but try and sneak anything in between those comments, and AMFI will  ...\n  So while this does technically bump the number of XML/plist parsers from 4 to 6, it does sadly actually mitigate my bug. :(\n  As far as first 0days go, I couldn\u2019t have wished for a better one. This single bug has assisted me in dozens of research projects, was used thousands of times every year, and has probably saved me just as many hours. And the exploit for it is in all likelihood the most reliable, clean and elegant one I\u2019ll ever write in my entire life. And it even fits in a tweet!! Well over 3 years since discovery is not half bad for such a bug, but I sure  ...\n We can also ask ourselves how a bug like that could ever exist. Why the hell there are 4 different plist parsers on iOS. Why we are still using XML even. But I figure those are more philosophical than technical in nature. And while this entire story shows that it might be a good idea to periodically ask ourselves whether the inaccuracies of our mental models are acceptable, or something should be documented and communicated more thoroughly,  ...\n Now, I\u2019ve pumped this post out as soon as I possibly could, so if I\u2019ve left any mistake in here, you have any questions, or just wanna chat in general, feel free to  file an issue, hit me up  on Twitter, or shoot me an email at  *@*.net where  * =  siguza.\n At the time of writing, this bug is still present on the latest non-beta version of iOS. The whole project is available  on GitHub, have fun with it while it lasts!\n And finally, some of the reactions I got of Twitter for all of you to enjoy:", "posttime": "2020-05-02 18:04:48", "tags": "ios,\u6c99\u76d2,paper,gt,entitlements", "title": "\u901a\u7075\u7eb8\uff1aiOS\u6c99\u76d2\u9003\u8131", "title_en": "Psychic Paper: iOS Sandbox Escape", "transed": 0, "url": "https://siguza.github.io/psychicpaper/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["ios", "\u6c99\u76d2", "paper", "gt"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000290, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Dgraph\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u56fe\u5f62\u6570\u636e\u5e93\uff0c\u5b83\u4f7f\u7528RAFT\u8fdb\u884c\u6bcf\u4e2a\u5206\u7247\u7684\u590d\u5236\uff0c\u5e76\u4f7f\u7528\u81ea\u5b9a\u4e49\u4e8b\u52a1\u534f\u8bae\u8fdb\u884c\u5feb\u7167\u9694\u79bb\u7684\u8de8\u5206\u7247\u4e8b\u52a1\u3002Dgraph\u89e3\u51b3\u4e86\u6211\u4eec2018\u5e74\u62a5\u544a1.0.2\u7248\u4e2d\u7684\u6240\u6709\u95ee\u9898\uff0c\u5e76\u8981\u6c42\u8fdb\u884c\u7b80\u77ed\u7684\u540e\u7eed\u884c\u52a8\u3002\u6211\u4eec\u5728\u7248\u672c1.1.1\u4e2d\u53d1\u73b0\u4e86\u4e94\u4e2a\u5b89\u5168\u95ee\u9898-\u5176\u4e2d\u4e00\u4e9b\u662fDgraph\u5df2\u7ecf\u77e5\u9053\u7684-\u5305\u62ec\u89c2\u5bdf\u5230\u77ac\u65f6\u7a7a\u503c\u7684\u8bfb\u53d6\u3001\u903b\u8f91\u72b6\u6001\u635f\u574f\u548c\u4e22\u5931\u786e\u8ba4\u7684\u63d2\u5165\u7684\u5927\u7a97\u53e3\u3002\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u90fd\u6d89\u53ca\u5e73\u677f\u7535\u8111..\u3002\nDgraph\u662f\u4e00\u4e2a\u56fe\u5f62\u6570\u636e\u5e93\uff0c\u5176\u76ee\u6807\u662f\u5728\u5e26\u6807\u7b7e\u7684\u6709\u5411\u56fe\u4e0a\u63d0\u4f9b\u53ef\u4f38\u7f29\u3001\u9ad8\u53ef\u7528\u6027\u548c\u5feb\u7167\u9694\u79bb\u7684\u4e8b\u52a1\uff0c\u540c\u65f6\u6700\u5c0f\u5316\u7f51\u7edc\u901a\u4fe1\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0cDgraph\u5b58\u50a8\u4e00\u7ec4(\u5b9e\u4f53\u3001\u5c5e\u6027\u3001\u503c)\u4e09\u5143\u7ec4\u3002\u5b9e\u4f53(\u4e5f\u79f0\u4e3a\u4e3b\u9898)\u662f\u7d27\u51d1\u7684\u4e8c\u8fdb\u5236UID\u3002\u5c5e\u6027(\u4e5f\u79f0\u4e3a\u8c13\u8bcd)\u662f\u547d\u540d\u8fb9\u3002\u503c(\u4e5f\u79f0\u4e3a\u5bf9\u8c61)\u53ef\u4ee5\u662f\u6587\u5b57\u503c\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u5b9e\u4f53\u7684UID\u3002\u52a0\u5728\u4e00\u8d77\uff0c\u8fd9\u4e09\u4e2a\u4eba.\u3002\n\u4e3a\u4e86\u8bfb\u53d6\u6b64\u56fe\uff0cDgraph\u63d0\u4f9b\u4e86\u4e00\u79cd\u6539\u7f16\u81eaGraphQL\u7684\u9012\u5f52\u67e5\u8be2\u8bed\u8a00\u3002\u7a81\u53d8\u662f\u901a\u8fc7\u5217\u51fa\u8981\u5728\u56fe\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u7684\u4e09\u5143\u7ec4\u6765\u8868\u793a\u7684\u3002\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0cDgraph\u8fd8\u53ef\u4ee5\u5c06\u4e0e\u7ed9\u5b9a\u5b9e\u4f53\u5173\u8054\u7684\u6240\u6709\u4e09\u5143\u7ec4\u8868\u793a\u4e3a\u5c06\u5c5e\u6027\u6620\u5c04\u5230\u503c\u7684JSON\u5bf9\u8c61-\u5176\u4e2d\u503c\u662f\u5176\u4ed6\u5b9e\u4f53\uff0c\u8be5\u5b9e\u4f53\u7684\u5c5e\u6027\u548c\u503c\u4f5c\u4e3a\u5bf9\u8c61\u9012\u5f52\u5d4c\u5165\u3002\n\u4e3a\u4e86\u5b58\u50a8\u5927\u578b\u6570\u636e\u96c6\uff0cDgraph\u6309\u5c5e\u6027\u5206\u5272\u4e09\u5143\u7ec4\u96c6\u5408\uff0c\u5c06\u5c5e\u6027\u5206\u89e3\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u5f62\u8f93\u5165\u677f\uff0c\u5e76\u5c06\u6bcf\u4e2a\u56fe\u5f62\u8f93\u5165\u677f\u5206\u914d\u7ed9\u4e00\u7ec4\u8282\u70b9\u3002\u6bcf\u4e2a\u7ec4\u4f7f\u7528RAFT\u5728\u8be5\u7ec4\u7684\u4e09\u5143\u7ec4\u4e0a\u63d0\u4f9b\u590d\u5236\u7684\u3001\u987a\u5e8f/\u7ebf\u6027\u4e00\u81f4\u7684\u5b58\u50a8\u548c\u67e5\u8be2\u3002\u53ea\u8981\u6bcf\u4e2a\u7ec4\u7684\u5927\u591a\u6570\u670d\u52a1\u5668\u4fdd\u6301\u5b8c\u597d\u548c\u8fde\u63a5\uff0cDgraph\u5c31\u5e94\u8be5\u4fdd\u6301\u53ef\u7528\u30021\u4e2a\u3002\n\u4e3a\u4e86\u63d0\u4f9b\u8de8\u4e0d\u540cRAFT\u7ec4\u7684\u4e8b\u52a1\u9694\u79bb\uff0cDgraph\u6784\u5efa\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u4e8b\u52a1\u7cfb\u7edf\u3002\u5b58\u50a8\u8282\u70b9(\u79f0\u4e3aAlpha)\u7531\u76d1\u63a7\u7cfb\u7edf(\u79f0\u4e3aZero)\u63a7\u5236\u3002\u96f6\u8282\u70b9\u5f62\u6210\u5355\u4e2aRAFT\u96c6\u7fa4\uff0c\u8be5\u96c6\u7fa4\u76d1\u7763\u7531\u6bcf\u4e2aAlpha\u7ec4\u5f62\u6210\u7684RAFT\u96c6\u7fa4\u3002\u96f6\u9886\u5bfc\u8005\u5728\u63d0\u4ea4\u65f6\u5206\u914d\u4e8b\u52a1\u65f6\u95f4\u6233\u548c\u68c0\u6d4b\u51b2\u7a81\uff0c\u4ee5\u53ca\u7ef4\u62a4\u7fa4\u96c6\u6210\u5458\u8d44\u683c\u548c\u5e73\u677f\u7535\u8111\u5230\u7ec4\u7684\u6620\u5c04\u3002\n\u4f5c\u4e3a\u6211\u4eec\u5408\u4f5c\u7684\u4e00\u90e8\u5206\uff0cDgraph\u5728\u4ed6\u4eec\u7684\u516c\u5171\u6587\u6863\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a\u5173\u4e8e\u4e00\u81f4\u6027\u5c5e\u6027\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u89c4\u5b9aDgraph\u4e2d\u7684\u4e8b\u52a1\u786e\u4fdd\u5feb\u7167\u9694\u79bb(SI)\u548c\u5b9e\u65f6\u5b89\u5168\u5c5e\u6027\uff1a\u5982\u679c\u4e8b\u52a1T1\u5728T2\u5f00\u59cb\u4e4b\u524d\u63d0\u4ea4\uff0c\u5219T1\u7684\u63d0\u4ea4\u65f6\u95f4\u6233\u4e25\u683c\u5c0f\u4e8eT2\u7684\u5f00\u59cb\u65f6\u95f4\u6233\u3002\n\u5f53\u4e8b\u52a1\u4ec5\u4e0e\u5355\u952e\u4ea4\u4e92\u65f6\uff0cDgraph\u7684\u5b9e\u65f6\u4fdd\u8bc1\u610f\u5473\u7740\u53ef\u7ebf\u6027\u5316\u3002\u7136\u800c\uff0cDgraph\u4e8b\u52a1\u901a\u5e38\u662f\u4e0d\u53ef\u7ebf\u6027\u5316\u7684\uff0c\u56e0\u4e3a\u7ebf\u6027\u5316\u8981\u6c42\u64cd\u4f5c(\u5373\u4e8b\u52a1)\u770b\u8d77\u6765\u50cf\u662f\u539f\u5b50\u53d1\u751f\u7684\uff0c\u800c\u5feb\u7167\u9694\u79bb\u5141\u8bb8\u4e8b\u52a1\u4ea4\u7ec7\uff0c\u53ea\u8981\u5b83\u4eec\u7684\u5199\u5165\u96c6\u662f\u4e0d\u76f8\u4ea4\u7684\u3002\u539f\u5b50\u4e8b\u52a1\u4e0a\u7684\u7ebf\u6027\u5316\u662f\u4e25\u683c\u7684\u4e32\u884c\u5316\uff1a\u4e00\u79cd\u66f4\u5f3a\u7684\u5c5e\u6027\u3002\u7136\u800c\uff0c\u5feb\u7167\u7684\u7ea6\u675f\u6761\u4ef6\u662f.\u3002\n\u6211\u4eec\u6839\u636e\u524d\u9762\u7684\u5206\u6790\u56de\u987e\u5e76\u66f4\u65b0\u4e86Jepsen\u6d4b\u8bd5\u5957\u4ef6\uff0c\u4e3b\u8981\u66f4\u65b0\u4e86\u9519\u8bef\u5904\u7406\u4f8b\u7a0b\uff0c\u4ee5\u9002\u5e94\u81ea1.0.6\u4ee5\u6765\u7684\u65b0Dgraph\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u884c\u4e3a\u3002\u6211\u4eec\u5728LXC\u548cEC2\u4e0a\u76845\u8282\u70b9Debian\u96c6\u7fa4\u4e0a\u8fd0\u884c\u4e86\u6211\u4eec\u7684\u6d4b\u8bd5\uff0c\u590d\u5236\u56e0\u5b50\u4e3a3\u3002Dgraph Alpha\u8282\u70b9\u88ab\u7ec4\u7ec7\u6210\u4e24\u7ec4\uff1a\u4e00\u7ec4\u5177\u6709\u4e09\u4e2a\u526f\u672c\uff0c\u53e6\u4e00\u7ec4\u5177\u6709\u4e24\u4e2a\u526f\u672c\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u8fd0\u884cZero\u548cAlpha\u7684\u5b9e\u4f8b\u3002\n\u6211\u4eec\u6d4b\u91cf\u4e86Dgraph\u5728\u5404\u79cd\u6545\u969c\u6a21\u5f0f\u4e0b\u7684\u884c\u4e3a\uff0c\u5305\u62ecAlpha\u548cZero\u5d29\u6e83\u3001\u5e73\u677f\u7535\u8111\u79fb\u52a8\u3001\u65f6\u949f\u504f\u5dee\u4ee5\u53ca\u5177\u6709\u4f20\u9012\u548c\u975e\u4f20\u9012\u62d3\u6251\u7684\u7f51\u7edc\u5206\u533a\u3002\n\u6211\u4eec\u6700\u57fa\u672c\u7684\u6d4b\u8bd5\u5c06\u4e00\u4e2a\u552f\u4e00\u6570\u5b57\u5e8f\u5217\u63d2\u5165\u5230Dgraph\u4e2d\uff0c\u7136\u540e\u67e5\u8be2\u6240\u6709\u73b0\u6709\u503c\u3002\u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5\u6bcf\u4e2a\u6210\u529f\u786e\u8ba4\u7684\u63d2\u5165\u662f\u5426\u51fa\u73b0\u5728\u6700\u7ec8\u8bfb\u53d6\u4e2d\u3002\u6211\u4eec\u8fd0\u884c\u4e86\u8fd9\u9879\u6d4b\u8bd5\u7684\u4e24\u4e2a\u53d8\u79cd\u3002\n\u7b2c\u4e00\u4e2a\u53d8\u4f53\u4f7f\u7528\u5177\u6709\u7c7b\u578b\u548c\u503c\u5b57\u6bb5\u7684\u6a21\u5f0f\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u63d2\u5165\u7684\u503cv\uff0c\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u7c7b\u578b\u201celement\u201d\u548c\u503cv\u7684\u65b0\u5b9e\u4f53\u3002\u8981\u67e5\u8be2\uff0c\u6211\u4eec\u641c\u7d22\u6bcf\u4e2a\u7c7b\u578b\u4e3a\u201celement\u201d\u7684\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u5176\u76f8\u5e94\u503c\u3002\u4ece\u7c7b\u578b\u5230\u503c\u5c5e\u6027\u7684\u8054\u63a5\u6709\u52a9\u4e8e\u9a8c\u8bc1Dgraph\u7684\u7c7b\u578b\u7d22\u5f15\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002\n\u7b2c\u4e8c\u4e2a\u53d8\u4f53\u7701\u7565\u4e86type\u5b57\u6bb5\uff0c\u800c\u662f\u4f7f\u7528\u5355\u4e2a\u5b9e\u4f53\uff1b\u6bcf\u6b21\u63d2\u5165v\u90fd\u4f1a\u521b\u5efa\u8be5\u5b9e\u4f53\u5230v\u7684\u4e09\u5143\u7ec4\u6620\u5c04\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u4e0e\u8be5\u7279\u5b9aUID\u76f8\u5173\u8054\u7684\u6bcf\u4e2a\u503c\uff0c\u8fd9\u76f4\u63a5\u6620\u5c04\u5230Dgraph\u5185\u90e8\u5b58\u50a8\u4e09\u5143\u7ec4\u7684\u65b9\u5f0f\u3002Dgraph\u67e5\u627e\u4e0e\u503c\u8c13\u8bcd\u76f8\u5173\u8054\u7684\u7ec4\uff0c\u5728\u8be5\u7ec4\u4e2d\u67e5\u627e\u8be5\u7279\u5b9a\u5b9e\u4f53\u7684UID\uff0c\u5e76\u8fd4\u56de\u6240\u6709\u5339\u914d\u503c\uff0c\u800c\u4e0d\u4f7f\u7528\u7d22\u5f15\u3002\n\u5411\u4e0a\u63d2\u5165\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u5728\u8be5\u64cd\u4f5c\u4e2d\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u7b49\u8bb0\u5f55\u5c1a\u4e0d\u5b58\u5728\u65f6\uff0c\u624d\u4f1a\u521b\u5efa\u8bb0\u5f55\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u786e\u4fdd\u7528\u6237\u8bb0\u5f55e", "note_en": "Dgraph is a distributed graph database which uses  Raft for per-shard replication and a  custom transactional protocol for snapshot-isolated cross-shard transactions. Dgraph resolved all issues from our  2018 report on version 1.0.2, and requested a brief followup. We found five safety issues in version 1.1.1 \u2014some known to Dgraph already \u2014including reads observing transient null values, logical state corruption, and the loss of large windows of acknowledged inserts. All of these issues involved tablet  ...\n Dgraph is a graph database which aims to provide scalable, highly-available, and snapshot-isolated transactions over a labeled directed graph, while minimizing network communication for performance. Conceptually, Dgraph stores a set of  (entity, attribute, value)triples. Entities (also known as subjects), are compact binary UIDs. Attributes (also known as predicates) are named edges. Values (also known as objects) are either literal values, or the UIDs of other entities. Together, these triples  ...\n To read this graph, Dgraph offers a recursive  query language adapted from  GraphQL.  Mutations are expressed by listing triples to add or remove from the graph. For convenience, Dgraph can also represent all triples associated with a given entity as a  JSON object mapping attributes to values\u2014where values are other entities, that entity\u2019s attributes and values are embedded as an object, recursively.\n To store large datasets Dgraph  shards the set of triples by attribute, breaks attributes into one or more  tablets, and assigns each tablet to a  group of nodes. Each group uses Raft to provide replicated, sequentially/linearizably consistent storage and queries over that group\u2019s triples. So long as a majority of each group\u2019s servers remain intact and connected, Dgraph should remain available.  1\n To provide transactional isolation across different Raft groups, Dgraph has built a  custom transaction system. Storage nodes (called Alpha) are controlled by a supervisory system (called Zero). Zero nodes form a single Raft cluster, which supervises the Raft clusters formed by each Alpha group. Zero leaders assign transaction timestamps and detect conflicts at commit time, as well as maintaining cluster membership, and the mapping of tablets to groups.\n  As a part of our collaboration, Dgraph added a  section on consistency properties to their public documentation, which states that transactions in Dgraph ensure  snapshot isolation (SI) plus a realtime safety property: if transaction   T 1 commits before   T 2 begins, than the commit timestamp of   T 1 is strictly less than the start timestamp of   T 2.  2\n When transactions only interact with single keys, Dgraph\u2019s real-time guarantees imply  linearizability. However, Dgraph transactions are not linearizable in general, because linearizability requires that operations (i.e.\u00a0transactions) appear to take place atomically, whereas snapshot isolation allows transactions to interleave so long as their write sets are disjoint. Linearizability over atomic transactions is  strict serializability: a stronger property. However, the constraint that snapshot  ...\n  We reviewed and updated the  Jepsen test suite from our  previous analysis, primarily updating error handling routines to adapt to new Dgraph client and server behavior since 1.0.6. We ran our tests on five-node Debian clusters, both on LXC and EC2, with replication factor three. Dgraph Alpha nodes were organized into two groups: one with three replicas, and one with two. Every node ran an instance of both Zero and Alpha.\n We measured Dgraph\u2019s behavior under a  variety of failure modes, including Alpha and Zero crashes, tablet moves, clock skew, and network partitions with both transitive and non-transitive topologies.\n  Our most basic test inserts a sequence of unique numbers into Dgraph, then queries for all extant values. We then check that every successfully acknowledged insert is present in a final read. We ran two variants of this test.\n The  first variant uses a schema with  type and  value fields, and for each inserted value   v, creates a new entity with type \u201celement\u201d and value   v. To query, we search for every object with type \u201celement\u201d, and return their corresponding values. The join from  type to  value attributes helps verify that Dgraph\u2019s  type index works correctly.\n The  second variant omits the  type field and instead uses a single entity; every insert of   v creates a triple mapping that entity to   v. This means that we can query for every value associated with that particular UID, which maps directly to the way Dgraph stores triples internally. Dgraph finds the group associated with the  value predicate, looks up that particular entity\u2019s UID in that group, and returns all matching values, without using indices.\n  An  upsert is a common database operation in which a record is created if and only if an equivalent record does not already exist. For instance, we might wish to ensure a user record exists for a given email, but if the email is already taken, to avoid creating a second user. In SQL databases, a unique primary key can be used as the equivalence relation for upserts, but in Dgraph there are no uniqueness constraints. Instead, users  perform a transactionwhich reads to ensure the record  ...\n However, snapshot isolation only detects conflicts between transactions which write the same objects, but inserts, by definition, write  unique objects and will never conflict. This allows write skew: two concurrent upserts of the same value could read an empty state, insert their respective rows, and commit, resulting in  two records instead of one. To avoid this problem, Dgraph also treats  indices as their own objects for the purposes of conflict detection.\n The index is stored as many key/value pairs, where each key is a combination of the predicate name and some function of the predicate value (e.g.\u00a0its hash for the hash index). If two transactions modify the same key concurrently, then one will fail.\n To verify that this conflict detection works correctly, we have several transactions concurrently  attempt to upsert the same value, and subsequently read back all objects with that value. If upserts are safe, we should never find more than one copy for a given key.\n  Early experiments with Dgraph led to the suspicion that deleting records might cause anomalous behavior, especially with respect to indices, so we designed a test for  repeated upserts and deletionsof the same value. Axiomatically, upserts should never result in more than one record \u2014we verify this in the upsert test. Our delete test extends this workload by concurrently attempting to delete any records for an indexed value. Since deleting can only lower the number of records, not  ...\n  The bank test stresses several invariants provided by snapshot isolation. We construct a set of bank accounts, each with three attributes:\n type, which is always \u201caccount\u201d. We use this to query for all accounts.\n Our test begins with a fixed amount ($100) of money in a single account, and proceeds to randomly  transfer money between accounts. Transfers proceed by reading two random accounts by key, and writing back new amounts for those accounts. Concurrently, clients  read all accounts to observe the total state of the system.\n Since transfers write every key that they read, snapshot isolation precludes concurrent execution of any transfers between intersecting accounts, guaranteeing transfers are serializable. Read-only transactions cannot affect the state of the system, and observe consistent snapshots, which implies they too must be serializable. From this, we can prove that the total of all account balances should be  constant.\n Because we like to live dangerously, we permute the order of reads and writes in transfer transactions at random, upsert new account records when none exist, and delete accounts which have a zero balance. This puts additional stress on Dgraph \u2019s index, which cannot assume that queries for a certain key always refer to the same entity. We also insert garbage data before aborting certain transactions, to help detect dirty reads. Different accounts use different predicates to  ...\n  For performance reasons, some database systems implement  parallel snapshot isolation, rather than standard snapshot isolation. Parallel snapshot isolation allows an anomaly prevented by standard SI: a  long fork, in which non-conflicting write transactions may be visible in incompatible orders. As an example, consider four transactions over an empty initial state:\n  Here, we insert two records,   x and   y. In a serializable system, one record should have been inserted before the other. However, transaction 3 observes   y inserted before   x, and transaction 4 observes   x inserted before   y. These observations are incompatible with a total order of inserts.\n To test for this behavior, we  insert a sequence of unique keys, and concurrently query for small batches of those keys, hoping to observe a pair of states in which the  implicit order of insertion conflicts.\n  Earlier versions of Dgraph offered a per-client property akin to sequential consistency, which enforced that each individual client observed monotonically increasing states of the graph. To help check this property, we establish a set of registers, each composed of a key and a value. On each register separately, we  performa series of increment operations mixed with reads of that register. Since our transactions only interact with single keys, snapshot isolation implies  ...\n  Our analysis of  Dgraph 1.0.2, completed in August 2018, left four issues unresolved: a deadlock in cluster join, an issue where transactions would time out at the end of set tests, and two snapshot isolation violations which allowed for permanent logical state corruption, associated with and without tablet moves, respectively. Dgraph has since closed all of these issues, and we\u2019d like to review them briefly.\n  When setting up new clusters,  Dgraph Alpha nodes could get stuck indefinitely at the JoinCluster phase. Dgraph believes this problem had to do with a  quorum check performed by the underlying Raft library, combined with Dgraph\u2019s parallel join process. Disabling the quorum check for reads, and ensuring that nodes joined the cluster one at a time, seemed to  resolve the issue by 1.0.8-rc1, and it did not appear in our review of 1.1.1 either.\n  At the end of UID set tests, we found occasional cases where Dgraph could  time out every read query after some point. This problem affected clusters without exogenous faults, and, once triggered, appeared to last indefinitely: we observed up to an hour without recovery. Nodes appeared to be in the middle of an automatic predicate migration which never completed.\n The cause of this issue was never ascertained, but by February 2019, it was  no longer reproducible.\n  In 1.0.5-dev, bank tests\u2014even in healthy clusters\u2014could result in  account balances drifting higher or lower over time. Effects could be limited to particular nodes. Some tests showed only transient incorrect balances, and others appeared permanently altered. This problem appeared even without predicate moves.\n By  version 1.0.7, Dgraph no longer exhibited snapshot isolation violations in bank tests with healthy clusters, though it still corrupted data with network partitions.\n By November 2018, Dgraph had  identified a cause. When a Zero leader received a commit request for a transaction   T, it assigned a timestamp to that commit. If Zero was unable to communicate with its Raft peers, and a new Zero node became the leader, that new leader would begin allocating timestamps at a significantly higher number. Alphas interacting with the new Zero leader would advance their  max-appliedtimestamps to match. Then assume the original Zero leader  ...\n A read   R executed after the new leader advanced the clock, but before   T\u2019s commit was retried, could fail to observe   T\u2014even though   T would go on to commit in the logical past of   R. In essence, this allowed temporary \u201choles\u201d in the timeline of transactions.\n When an Alpha node applied a write   w for key   k, it would first check   k\u2019s last written timestamp, and ignore   w if it was lower. If   w was a write from the logical  past,   w might be rejected\u2014but other writes from the same transaction might succeed, so long as they hadn\u2019t been written recently. This allowed Dgraph to partially apply transactions.\n In addition, Dgraph identified and fixed a second, related bug in the transaction commit process. When Alpha leaders received transaction commit messages from Zero, they appended those commits via Raft to their log. However, if that append process timed out, Alpha would  give up on appending that commit message. This allowed transactions to be applied on some Alpha groups, but not on others.\n Both of these issues were  fixed in 1.0.11, which prevented Zero leaders-cum-followers from sending transaction commit proposals to new leaders after stepping down, and by forcing Alpha nodes to retry commits on indeterminate failures, rather than giving up on them.\n  Even in healthy clusters, version 1.0.4 exhibited  read skew in bank tests, leading to permanent state corruption. Some of this behavior was caused by queries returning spurious null values instead of valid data, but others were caused by read skew. Account totals could  change gradually over time, fluctuate chaotically, or alternate between two different values.\n While these symptoms were similar to the previous issue, they had different underlying causes: these problems were linked to tablet migration. By  January 2019, Dgraph had  redesigned the tablet migration code: instead of blocking writes on Alphas during a migration, it would instead block commits on the Zero leader \u2014the node with an authoritative view of the tablet-to-group mapping. This prevented writes from sneaking onto the wrong nodes in the interval between  ...\n This redesign prevented account totals from changing permanently. However, reads do  not (for performance reasons) consult Zero, which allowed read-only transactions to observe  occasional transient read skew. Upon receiving a read at time   t, Alpha would block until it had applied every transaction up to   t, to ensure no transaction\u2019s effects would be missing for the read at   t. However, if that particular Alpha had an outdated view of the tablet to group mapping,  ...\n In essence, this problem stemmed from the fact that membership changes and transaction commits formed two separate, asynchronous streams of information from Zero to Alpha; a node might be processing recent transactions, but be out of date on cluster membership. To bring these streams into alignment, Dgraph added a  checksum of the membership stateto each batch of transaction commits, and ensured that Alpha nodes refused to service requests when their membership  ...\n This prevented reads from executing on nodes which didn\u2019t yet, or no longer, held the current copy of that tablet. Dgraph then  passed bank tests even with tablet migrations  3; the patch was released in Dgraph 1.1.\n  In the present work, we tested Dgraph 1.1.1, as well as later development builds. We encountered five safety issues, all involving tablet migration.\n  In 1.1.1 and 1.1.1-56-ge18986f1c, we observed cases where reads would return a null value for a record which should have existed. For instance, consider  this bank test, in which a handful of reads observed null values for account balances\u2026\n    One could interpret this behavior as read skew, since  nil is the initial state of every record\u2014but this problem does not resemble read skew in general. In almost every case, we observed the  absence of data, rather than a value from the wrong timestamp.\n These errors were common in version 1.1.1, occurring with essentially every tablet move. In  sequential tests (issue 4540), they manifested as spurious non-monotonic reads. In  bank tests (issue 4534), we saw transient reads where the total balance was lower than expected, because some accounts showed  nil rather than their actual balance.\n  This issue occurred immediately following tablet migration. When a tablet was moved from one shard to another, the new shard could  serve transactions whose start timestamp was  prior to the tablet move time, and the old shard could serve transactions with a start timestamp  after the move time\u2014i.e.\u00a0after that shard had deleted the tablet entirely. Without any data, those shards would return null values.\n This bug was fixed in  ec445503, which should be released as a part of 1.1.2; we have verified that this patch dramatically reduces the probability of spurious nulls.\n However, we continued to see this problem infrequently with  1.1.1-56-ge18986f1c. During tablet moves, one read every few thousand seconds observed null instead of the actual value. More recent builds have not exhibited this problem, but we left issue #4575 open until a cause and fix can be confirmed.\n  In versions 1.1.1 and 1.1.1-48-g157896305, bank tests occasionally exhibited permanent changes in the balance of all accounts. Under snapshot isolation, the bank workload should observe a constant balance over time. However, a tablet move could cause a single read query to  observe two account balances from  different timestamps: an anomaly called read skew. This was issue #4543.\n In  this history, a transfer transaction moved $2 from account 4 to account 6, which emptied account 4, and changed account 6\u2019s balance from $1 to $3. However, a later read observed account 4  after the transfer, and account 6  before, resulting in a total of $98 rather than $100. We have elided other transactions for clarity.\n  Transfer transactions which wrote new values based on skewed reads allowed Dgraph to propagate transient read errors into permanent changes: the total of all accounts changed from $100 to $98, and remained that way for the remainder of the test.\n In  this test run, process 5 begins a transfer of $2 from account 6 to account 3, while a tablet move is ongoing. While that transfer is happening, a pair of read transactions observe account 3 \u2019s balance increase from $5 to $7, but no corresponding decrement is made to account 6. The transfer transaction then fails with an error message indicating that the read timestamp for that transaction was lower than the minimum timestamp available for that  ...\n   It\u2019s not clear from this history whether process 5\u2019s transfer somehow took  partial effect, or whether it cleanly failed and something else in Dgraph caused the value of account 3 to fluctuate. Whatever the case, the effects were permanent: for the rest of the test, every read (except those affected by transient null issues, as described previously) observed a total of $102, rather than $100.\n   In UID set tests with Dgraph 1.1.1, 1.1.1-48-g157896305, and 1.1.1-65-g2851e2d9a, we observed that windows of up to tens of thousands of acknowledged inserts  could be lost. This issue (#4538) appeared to be associated with tablet moves.\n For example, in  this test run, Dgraph acknowledged 22,187 writes successfully. However, of those acknowledged writes, all 11,544 between 11,350 and 23,715 were lost\u2014they failed to appear in a final read. Triples inserted both before and after that window were fine.\n Dgraph believes this problem is related to posting list splits. A  posting list is a collection of edges belonging to some attribute. When a posting list becomes large, it is split into a tree, whose root is identified by a canonical key. However, a bug in Dgraph allowed  the parts of a split posting list to be accessed individually, instead of through the main key. Accessing the posting list through these secondary keys caused issues during  ...\n  In version 1.1.1, we saw something else unusual with UID set tests: Dgraph would successfully acknowledge tens of thousands of inserts of distinct triples, and, when we asked for all of them back,  return exactly one. In  this test run, we successfully inserted 19,030 unique integer values, and, upon reading them back, received:\n    This issue only occurred infrequently, but the impact was severe: not only was all but one write lost, but the  type of value changed! Instead of receiving a list of integers, we got only a single number. This is particularly vexing because the schema for this attribute explicitly defines  value to be a list:  value: [int] .\n Dgraph believes this problem (#4601) could be associated with a  bug in splitting posting lists, and that recent patches have addressed the issue. Indeed, we have not encountered it in 1.1.1-65-g2851e2d9a, or subsequent builds. However, reproducing this issue has proven difficult, and without a plausible account as for  why the posting-list bug could cause the schema to change, we are cautious about declaring it fixed.\n   Dgraph resolved all of the issues we discussed in the previous Jepsen analysis. However, we found significant new safety issues in 1.1.1 which were, in many cases, functionally identical to bugs we\u2019ve seen in the past: read skew, transient missing values, and lost inserts.\n This does not mean that Dgraph has failed to make progress. Indeed, the work Dgraph has undertaken in the last 18 months has dramatically improved safety. In 1.0.2, Jepsen tests routinely observed safety issues even in healthy clusters. In 1.1.1, tests with healthy clusters, clock skew, process kills, and network partitions all passed. Only tablet moves appeared susceptible to safety problems.\n As of 1.1.1-59-g191232226, we have failed to observe any violations of snapshot isolation. The current Jepsen test suite passes\u2014at least with short runs. Unfortunately, some of these bugs were difficult to reproduce, and we have not had sufficient testing time to declare these issues resolved. Since Dgraph Labs has not identified a potential cause or patch resolving  4575 and  4543, we \u2019ve left these issues categorized as \u201cunresolved \u201d\u2014 ...\n As always, we note that Jepsen takes an experimental approach to safety verification: we can prove the presence of bugs, but not their absence. While we try hard to find problems, we cannot prove the correctness of any distributed system.\n  All of the issues we found had to do with tablet migrations, which raises the obvious question: why migrations in particular? We suggest two potential causes.\n In part, we found issues in tablet migrations because that \u2019s where we looked. Dgraph Labs knew that 1.1.1 had issues with tablet moves, but had difficulty fixing them, in part because the Jepsen test suite no longer ran reliably. Changes to Dgraph APIs prevented Jepsen from properly detecting common failure conditions, which in turn broke the retry mechanisms Jepsen uses to run tests reliably. Updating the tests to interpret Dgraph  ...\n In more general terms, tablet migrations were error-prone because changing distributed state is just plain  hard. Dgraph relies on Raft for state changes within a group, and Raft is a solid algorithm with mature implementations that handle failure well. Dgraph coordinates transactions between Raft groups by having nodes agree on which groups own which tablets. This too is relatively straightforward \u2014as long as that mapping doesn \u2019t  ...\n We see this pattern in many Jepsen tests: as more databases adopt proven consensus algorithms like Paxos and Raft for shard state, we\u2019ve found fewer bugs at the level of individual shards. Coordinating cluster metadata and ensuring transactional correctness  across those shards has proven more difficult. This suggests an important avenue of research for academics\u2014and an area of caution for engineers.\n  Dgraph 1.1.1 exhibited significant violations of snapshot isolation related to tablet migration: an infrequent but normal process in Dgraph. Users could experience transient read skew, permanent state corruption, the loss of large windows of committed inserts, or the replacement of a (potentially large) set of values with just one, along with type errors: returning a single integer, rather than a list.\n In version 1.1.1 and below, we recommend exercising caution during tablet moves, if possible. For instance, performing manual tablet migration during a scheduled maintenance window, rather than under normal load, could reduce the probability that transactions encounter anomalous behavior. We also advise discontinuing use of the cluster during tablet migration to prevent update transactions from observing inconsistent data, then  ...\n Recent development builds, like 1.1.1-59-g191232226, have not exhibited these anomalies, but we stress that Jepsen has not had sufficient time to verify these builds in detail. While we cannot make a strong claim of correctness, Version 1.1.2 incorporates many patches which should dramatically reduce the frequency of errors. We advise upgrading to 1.1.2 or higher.\n   Meanwhile, Jepsen has developed  Elle: a novel checker for transactional systems, which should be well-suited to testing Dgraph. We would like to apply Elle to Dgraph, especially with respect towards per-process and realtime guarantees. We would also like to evaluate Dgraph with slow networks, process pauses, and single-node faults like filesystem corruption.\n In general, our tests now go thousands of seconds without finding bugs, but we  did occasionally find issues in development builds. Weak discriminatory power suggests it\u2019s time to redesign the tests to be more aggressive. We could increase key and tablet counts, adjust contention probabilities, and shard tests where appropriate.\n This work was funded by  Dgraph, and conducted in accordance with the  Jepsen ethics policy. Jepsen wishes to thank the entire Dgraph team for their help\u2014especially Manish Jain and Daniel Mai.\n Note that Dgraph may create groups with fewer than the specified number of replicas, when the number of nodes in that group is not evenly divisible by the target replica count. Those shards have reduced fault tolerance. \u21a9\n This property may be what Elnikety, Pedone, &amp; Zwaenepoel refer to as \u201cconventional snapshot isolation\u201d in  Generalized Snapshot Isolation and a Prefix-Consistent Implementation. \u21a9\n These passing results may have been somewhat premature; later testing revealed additional issues, which we describe in this report. \u21a9", "posttime": "2020-05-02 18:04:41", "tags": "\u6770\u666e\u68ee,jepsen,dgraph", "title": "\u6770\u666e\u68ee\uff1aDgraph 1.1.1", "title_en": "Jepsen: Dgraph 1.1.1", "transed": 0, "url": "https://jepsen.io/analyses/dgraph-1.1.1", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6770\u666e\u68ee", "jepsen", "dgraph"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000289, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u63d0\u4ea4\u4eba\u3002\n\u4ee5.\u4e3a\u52a8\u529b", "note_en": "Presented by\n  Powered by", "posttime": "2020-05-02 18:04:40", "tags": "\u897f\u65af,tour,\u63d0\u4ea4,presented", "title": "\u62c9\u7f8e\u897f\u65af\u516d\u4e16\u6cd5\u8001\u9675\u5893\u865a\u62df\u4e4b\u65c5", "title_en": "Virtual tour of the tomb of Pharaoh Ramses VI", "transed": 0, "url": "https://my.matterport.com/show/?m=NeiMEZa9d93&mls=1", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u897f\u65af", "tour", "\u63d0\u4ea4", "presented"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000288, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8981\u7ee7\u7eed\uff0c\u8bf7\u5355\u51fb\u4e0b\u9762\u7684\u6846\uff0c\u8ba9\u6211\u4eec\u77e5\u9053\u60a8\u4e0d\u662f\u673a\u5668\u4eba\u3002\n\u8bf7\u786e\u4fdd\u60a8\u7684\u6d4f\u89c8\u5668\u652f\u6301JavaScript\u548cCookie\uff0c\u5e76\u4e14\u60a8\u6ca1\u6709\u963b\u6b62\u5b83\u4eec\u52a0\u8f7d\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u6211\u4eec\u7684\u548c\u3002", "note_en": "To continue, please click the box below to let us know you&#39;re not a robot.\n  Please make sure your browser supports JavaScript and cookies and that you are not blocking them from loading. For more information you can review our   and  .", "posttime": "2020-05-02 18:04:39", "tags": "\u63ed\u793a,market,click", "title": "\u505c\u653e\u5728\u8d27\u8239\u4e0a\u7684SUV\u63ed\u793a\u4e86\u7f8e\u56fd\u6c7d\u8f66\u5e02\u573a\u4f9b\u8fc7\u4e8e\u6c42\u7684\u8303\u56f4", "title_en": "SUVs parked on cargo ships reveal scope of U.S. auto market glut", "transed": 0, "url": "https://www.bloomberg.com/news/articles/2020-05-01/suvs-get-parked-in-the-ocean-and-reveal-scope-of-u-s-car-glut", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u63ed\u793a", "market", "click"]}, {"category": "", "categoryclass": "", "imagename": "3a2c8ff34fd49b01fe6f2f02913f84b6.jpg", "infoid": 1000286, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ca1\u6709\u4ec0\u4e48\u6bd4\u7535\u5f71\u4e2d\u7684\u7535\u8111\u66f4\u9177\u7684\u4e86\uff0c1985\u5e74\u7684\u201c\u6740\u622e\u89c1\u95fb\u201d\u4e2d\u6709\u4e00\u6b3e\u7279\u522b\u9177\u7684Apple IIc\u3002\u52a0\u5165\u6211\u7684\u884c\u5217\uff0c\u8ba9\u6211\u4e00\u4f4d\u4e00\u4f4d\u5730\u3001\u4e00\u5b57\u8282\u4e00\u5b57\u8282\u5730\u4f2a\u9020\u8fd9\u5c01\u4fe1\u3002\u5728\u8fd9\u6bb5\u89c6\u9891\u4e2d\uff0c\u6211\u4ed4\u7ec6\u5730\u5bf9\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\uff0c\u5e76\u4f7f\u7528Applesoft basic\u548c\u5404\u79cd\u5f00\u53d1\u6280\u5de7\u5728\u6211\u7684Apple IIc\u4e0a\u91cd\u65b0\u521b\u5efa\u5b83\u3002\u6ca1\u4eba\u95ee\uff0c\u4f46\u6211\u80af\u5b9a\u9001\u5230\u4e86\u3002\u8ba2\u9605\u66f4\u591a\u6df1\u5965\u7684\u6280\u672f\u89c6\u9891\uff01\u8bbf\u95eehttps://www.maxpiantoni.com..\u3002", "note_en": "There&#39;s nothing cooler than a computer in a movie, and 1985&#39;s A View To A Kill has a particularly cool Apple IIc. Join me as I forge this Faberge bit by bit, byte by byte. In this video I meticulously reverse engineer the application from the movie and recreate it on my Apple IIc using Applesoft BASIC and a variety of development tricks. No one was asking, but I sure delivered.  Subscribe for more esoteric technology videos!   Visit  https://www.maxpiantoni.com  ...", "posttime": "2020-05-02 18:04:27", "tags": "app,\u8f6f\u4ef6,apple,iic,james", "title": "\u91cd\u5efa\u8a79\u59c6\u65af\u00b7\u90a6\u5fb7\u7684Apple IIc-A\u8f6f\u4ef6\u8d5d\u54c1[\u89c6\u9891]", "title_en": "Rebuilding James Bond's Apple IIc \u2013 A Software Forgery [video]", "transed": 0, "url": "https://www.youtube.com/watch?v=YGVfwEEjRfs", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["app", "\u8f6f\u4ef6", "apple", "iic", "james"]}, {"category": "", "categoryclass": "", "imagename": "3a44a1681773875b26ef96cd11fbf63e.png", "infoid": 1000285, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u4e2a\u661f\u671f\u5929\uff0c\u6211\u90fd\u4f1a\u541110.000\u591a\u540d\u8ba2\u9605\u8005\u53d1\u9001\u4e00\u4efd\u65f6\u4e8b\u901a\u8baf\uff0c\u540d\u4e3a\u201c\u5468\u520a\u201d\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u6df1\u5165\u63a2\u8ba8\u8fd9\u4e9b\u90ae\u4ef6\u662f\u5982\u4f55\u4f20\u9012\u7ed9\u8ba2\u9605\u8005\u7684\u3002\n\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b(\u4e5f\u53ef\u4ee5\u8bf4\u662f\u6700\u91cd\u8981\u7684\u4e00\u4ef6\u4e8b)\u662f\u6536\u96c6\u6240\u6709\u8981\u5305\u542b\u5728\u65f6\u4e8b\u901a\u8baf\u4e2d\u7684\u94fe\u63a5\u3002\n\u53ea\u9700\u5728\u6d4f\u89c8\u5668\u4e2d\u5355\u51fb\u4e00\u4e0b\uff0c\u5b83\u5c31\u4f1a\u88ab\u6807\u8bb0\u4e3a\u4e66\u7b7e\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5904\u7406\u3002\u6211\u5bf9\u6211\u7684\u4e66\u7b7e\u76f8\u5f53\u81ea\u7531\u3002\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u6211\u4e0d\u9700\u8981\u9605\u8bfb\u6bcf\u4e00\u7bc7\u6587\u7ae0\u3002\u5982\u679c\u5b83\u770b\u8d77\u6765\u5f88\u6709\u8da3\uff0c\u6211\u4f1a\u628a\u5b83\u653e\u5728\u4e66\u7b7e\u4e0a--\u7a0d\u540e\u4f1a\u8fdb\u884c\u7b56\u5c55\u3002\n\u6211\u7ecf\u5e38\u6536\u5230\u5bf9\u6211\u53d1\u9001\u7684\u65f6\u4e8b\u901a\u8baf\u7684\u56de\u590d\uff0c\u90a3\u91cc\u7684\u8bfb\u8005\u6709\u4e00\u4e9b\u8ddf\u8fdb\u6216\u4e0e\u6211\u5199\u7684\u89c2\u70b9\u4e0d\u540c\u7684\u89c2\u70b9\u3002\u8fd9\u901a\u5e38\u4f1a\u6709\u51e0\u4e2a\u94fe\u63a5\u4f9b\u6211\u67e5\u770b\uff0c\u800c\u4e14\u5f88\u6709\u53ef\u80fd\u53cd\u9988\u4f1a\u51fa\u73b0\u5728\u4e0b\u4e00\u5468\u7684\u7279\u520a\u4e0a\u3002\n\u9644\u6ce8\uff1a\u5982\u679c\u4f60\u6709\u4e00\u7bc7\u6709\u8da3\u7684\u6587\u7ae0\uff0c\u8bf7\u968f\u65f6\u901a\u8fc7Twitter(\u6211\u7684DM\u662f\u5f00\u653e\u7684)\u6216\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6m@ttias.be\u53d1\u9001\u7ed9\u6211\u3002\n\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u5c0f\u811a\u672c\uff0c\u5b83\u4e0ePocket API\u5bf9\u8bdd\uff0c\u68c0\u7d22\u6240\u6709\u94fe\u63a5\uff0c\u5e76\u5c06\u5176\u683c\u5f0f\u5316\u4e3aMarkdown\u3002\u5b83\u771f\u7684\u53ea\u5bf9\u6211\u6709\u7528\uff0c\u4f46\u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u5728Github\u4e0a\u627e\u5230\uff1amattiasgeniar/Generator.cronWeekly.com-v2\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e5f\u4e0d\u662f\u6700\u6f02\u4eae\u7684\u4ee3\u7801-\u4f46\u5bf9\u6211\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u597d\u4e86\u3002\n\u7ed3\u679c\u662f\u65f6\u4e8b\u901a\u8baf\u5185\u5bb9\u7684\u5efa\u8bae\uff0c\u4ee5\u6211\u53ef\u4ee5\u4f7f\u7528\u7684\u65b9\u5f0f\u683c\u5f0f\u5316\u3002\n\u8fd9\u4e3a\u6211\u8282\u7701\u4e86\u5927\u91cf\u51c6\u5907\u65f6\u4e8b\u901a\u8baf\u8bed\u6cd5\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u5b83\u90fd\u662f\u7528Markdown\u5199\u7684\u3002\u53e3\u888b\u91cc\u4e5f\u6709\u6bcf\u4e00\u7bc7\u6587\u7ae0\u7684\u4e0d\u9519\u7684\u6458\u8981\uff0c\u6211\u53ea\u9700\u8981\u7a0d\u5fae\u8c03\u6574\u4e00\u4e0b\u3002\n\u968f\u7740Pocket\u5efa\u8bae\u4ee5Markdown\u683c\u5f0f\u63d0\u4f9b\uff0c\u73b0\u5728\u5f00\u59cb\u4e86\u6700\u8017\u65f6\u7684\u90e8\u5206\uff1a\u5199\u4f5c\u3002\n\u867d\u7136Pocket\u5bf9\u9879\u76ee\u7684\u63cf\u8ff0\u63d0\u51fa\u4e86\u5f88\u597d\u7684\u5efa\u8bae\uff0c\u4f46\u5bf9\u4e8e\u65b0\u95fb\u6216\u6559\u7a0b\u90e8\u5206\u7684\u9879\u76ee\u5374\u4e0d\u592a\u7ba1\u7528\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u8fd8\u6ca1\u6709\u8bfb\u5b8c\u6240\u6709\u7684\u94fe\u63a5(\u6211\u505a\u4e86\u5f88\u591a\u4e66\u7b7e\uff0c\u901a\u5e38\u4ec5\u4ec5\u662f\u57fa\u4e8e\u6807\u9898)\uff0c\u5927\u7ea650%\u7684\u94fe\u63a5\u5728\u8fd9\u4e00\u6b65\u4e2d\u88ab\u6254\u6389\u4e86\u3002\n\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u62112-3\u4e2a\u5c0f\u65f6\u7684\u821e\u53f0\u3002\u4e00\u534a\u7528\u6765\u6253\u5b57\uff0c\u53e6\u4e00\u534a\u7528\u6765\u9605\u8bfb\u6587\u7ae0\u3002\n\u8fd9\u4e00\u6b65\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u5012\u9000\uff0c\u4f46\u5b83\u9002\u7528\u4e8e\u6211\u7684\u5de5\u4f5c\u6d41\u7a0b\uff1a\u4e00\u65e6\u6211\u6709\u4e86\u53ef\u7528\u7684web\u7248\u672c\uff0c\u6211\u5c06\u4f7f\u7528\u5b83\u4e3a\u65f6\u4e8b\u901a\u8baf\u7684HTML\u548cTXT\u89c6\u56fe\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684\u7248\u672c\u3002\n\u8f6c\u6362\u7684\u8f93\u5165\u662fHugo\u89e3\u6790\u7684Markdown\u6587\u4ef6\u3002\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a\n\u4f5c\u8005\uff1amattiasdate\uff1a2020-04-26T06\uff1a50\uff1a00+01\uff1a00\u53d1\u5e03\u65e5\u671f\uff1a2020-04-26T06\uff1a50\uff1a00+01\uff1a00url\uff1a/cronWeek/Issue-131/--\u5927\u5bb6\u597d\uff01\ud83d\udc4b\u6b22\u8fce\u6765\u5230Cron.Week Issue131.\u6700\u540e\u4e00\u671f\u53d1\u5e03\u65e5\u671f\uff1a2020-04-26T06\uff1a50\uff1a00+01\uff1a00url\uff1a/cronWeek/Issue-131/--\u5927\u5bb6\u597d\uff01\u6b22\u8fce\u6765\u5230Cron.Week Issue#131\u3002\n\u5b83\u751f\u6210TXT\u7248\u672c(-t\u6807\u5fd7)\u6216HTML\u7248\u672c(-h\u6807\u5fd7)\uff0c\u5e76\u5728Mac\u4e0a\u4f7f\u7528pbcopy\u5c06\u8f93\u51fa\u590d\u5236\u5230\u6211\u7684\u526a\u8d34\u677f\u3002\n\u6211\u82b1\u4e86\u76f8\u5f53\u591a\u7684\u65f6\u95f4\u6765\u4f18\u5316\u8fd9\u4e24\u4e2a\u89c6\u56fe\uff0c\u4f7f\u5176\u5728\u4efb\u4f55\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\u4e0a\u770b\u8d77\u6765\u90fd\u5f88\u597d\u3002\u4e0a\u9762\u7684\u811a\u672c\u751f\u6210\u6b64HTML\u8f93\u51fa\uff1a\n\u56e0\u4e3a\u8bfb\u8005\u662f\u975e\u5e38\u6280\u672f\u6027\u7684\uff0c\u6240\u4ee5\u6709\u60ca\u4eba\u6570\u91cf\u7684\u7528\u6237\u5728Mutt(\u4e00\u4e2a\u7eaf\u6587\u672c\u5ba2\u6237\u7aef)\u4e0a\u9605\u8bfb\u5b83\u3002\u4ed6\u4eec\u4f1a\u6536\u5230\u8fd9\u4e2a\u7248\u672c\uff1a\n\u6211\u5c1d\u8bd5\u4e86\u66f4\u591a\u7684ASCII\u827a\u672f\uff0c\u4f46\u5b83\u5728\u6bcf\u4e2a\u5ba2\u6237\u673a\u4e0a\u5448\u73b0\u7684\u6548\u679c\u90fd\u4e0d\u540c(\u56e0\u4e3a\u5b83\u4f7f\u7528\u60a8\u9009\u62e9\u7684\u5b57\u4f53)\uff0c\u6240\u4ee5\u6211\u5b8c\u5168\u653e\u5f03\u4e86\u5b83\u3002\u5e72\u51c0\u800c\u7b80\u5355(&A&S)\u3002\n\u7f51\u7edc\u7248\u5728\u6b63\u786e\u7684\u65f6\u95f4\u81ea\u52a8\u53d1\u5e03\uff0c\u4f7f\u7528Hugo\u7684PublishDate\u53d8\u91cf\u548c\u670d\u52a1\u5668\u4e0a\u7684cronjob\uff0c\u6bcf\u5c0f\u65f6\u91cd\u65b0\u751f\u6210\u4e00\u6b21\u7ad9\u70b9\u3002\n\u6bcf\u5c0f\u65f6\u7684cronjob\u5728\u5c0f\u65f6\u524d5\u5206\u949f\u8fd0\u884c\uff0c\u56e0\u6b64\u65f6\u4e8b\u901a\u8baf\u5728\u51e0\u5206\u949f\u540e\u90ae\u4ef6\u53d1\u51fa\u4e4b\u524d\u51c6\u65f6\u751f\u6210\u3002\n\u53d1\u9001\u65f6\u4e8b\u901a\u8baf\u6709\u4e24\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff1a\u5ba2\u6237\u7aef\u548cMTA\u3002\n\u6211\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3aMailCoach\u7684PHP\u5de5\u5177\uff0c\u5b83\u5141\u8bb8\u6211\u914d\u7f6e\u65f6\u4e8b\u901a\u8baf\uff0c\u8bbe\u7f6eHTML\u548cTXT\u6b63\u6587\uff0c\u5e76\u5c06\u5b83\u4eec\u53d1\u9001\u7ed9\u6240\u6709\u8ba2\u9605\u8005\u3002\n\u4e3a\u4e86\u6536\u96c6\u65b0\u7684\u7535\u5b50\u90ae\u4ef6\u6ce8\u518c\uff0c\u6211\u5728\u8fd9\u4e2a(\u9759\u6001)\u7f51\u7ad9\u4e0a\u5d4c\u5165\u4e86MailCoach\u8868\u5355\u3002\u6bcf\u5468\u5b58\u6863\u9875\u9762\u4e0a\u7684\u8868\u5355\u7684POST\u76ee\u6807\u6307\u5411MailCoach\uff0c\u7136\u540eMailCoach\u5b58\u50a8\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5e76\u9a8c\u8bc1\u53cc\u91cd\u9009\u62e9\u52a0\u5165\u3002\n\u7f51\u9875\u7248\u7684MailCoach\u5141\u8bb8\u6211\u67e5\u770b\u4e4b\u524d\u7684\u6d3b\u52a8\uff0c\u76d1\u63a7\u5217\u8868\u7684\u589e\u957f\u7b49\u3002\n\u6211\u5f3a\u70c8\u652f\u6301\u65e0\u8ddf\u8e2a\uff0c\u6240\u4ee5\u8fd9\u91cc\u6ca1\u6709\u663e\u793a\u6253\u5f00\u7387\u6216\u70b9\u51fb\u7387\u3002MailCoach\u652f\u6301\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u4e0d\u60f3\u8ddf\u8e2a\u7528\u6237\u3002\ud83d\ude04\u3002\n\u6211\u4eceSendy\u8f6c\u5230\u4e86MailCoach\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6211\u8f7b\u677e\u5730\u6269\u5c55\u5b83\uff0c\u8fd9\u5728\u66f4\u4f4e\u7684\u4f4d\u7f6e\u4f1a\u66f4\u65b9\u4fbf\u4e00\u4e9b\u3002\nMailCoach\uff0c\u5c31\u50cfSendy\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528Amazon SES\uff0cMailGun\uff0cSendmail\uff0c\u2026\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002\u81ea\u4ece\u6211\u6700\u8fd1\u56e0\u4e3a\u91cd\u65b0\u542f\u52a8\u65f6\u4e8b\u901a\u8baf(\u8fd9\u662f\u6211\u81ea\u5df1\u7684\u9519)\u800c\u88ab\u4e9a\u9a6c\u900aSES\u89e3\u96c7\u540e(\u8fd9\u662f\u6211\u81ea\u5df1\u7684\u9519)\uff0c\u6211\u8f6c\u800c\u4f7f\u7528Mailgan\u3002\n\u5b83\u4eec\u7684\u901f\u5ea6\u76f8\u5f53\u5feb\uff0c\u65f6\u4e8b\u901a\u8baf\u5728\u4e0d\u523010\u5206\u949f\u7684\u65f6\u95f4\u5185\u5c31\u4f1a\u53d1\u9001\u7ed9\u5927\u7ea610.000\u540d\u8ba2\u9605\u8005\u3002\n\u6211\u6700\u8fd1\u5c06Mailgan\u8ba1\u5212\u5347\u7ea7\u4e3a\u6bcf\u670880\u7f8e\u5143\u7684\u589e\u957f\u8ba1\u5212\uff0c\u8fd9\u8ba9\u6211\u6709\u4e86\u66f4\u957f\u7684\u65e5\u5fd7\u4fdd\u7559\u65f6\u95f4\u548c\u56fa\u5b9a\u7684IP\u5730\u5740\u3002\n\u81ea\u4ece\u6211\u73b0\u5728\u4e3aMailgan\u4e70\u5355\u4ee5\u6765\uff0c\u6211\u4e00\u76f4\u5728\u9010\u4e2a\u5207\u6362\u6211\u7684\u6240\u6709\u9879\u76ee\uff0c\u5305\u62ec\u6765\u81eaGma\u7684\u4f20\u51fa\u7535\u5b50\u90ae\u4ef6", "note_en": "Every Sunday, I send out  a newsletter called cron.weekly to over 10.000 subscribers. In this post, I\u2019ll do a deep-dive into  how those mails get delivered to subscribers.\n   The first (and arguably, most important) thing to do is collect all the links to include in the newsletter.\n   A simple click in the browser and it\u2019s bookmarked for later processing. I\u2019m pretty liberal about what I bookmark. At this stage, I don\u2019t have to read  every article. If it looks interesting, I\u2019ll bookmark it - curation happens later.\n  Quite often I get a reply to a newsletter I send, where a reader has some follow-up or a different point of view from what I wrote. This usually comes with a couple of links for me to check out, and chances are that feedback makes it in next weeks\u2019 issue.\n Side note: if you have an interesting article, do feel free to send it to me either  via Twitter (my DMs are open) or via email at  m@ttias.be.\n  I wrote a small script that talks to the Pocket API, retrieves all the links and formats it in Markdown for me. It\u2019s really only useful to me, but it\u2019s available on Github if you\u2019re interested:  mattiasgeniar/generator.cronweekly.com-v2.\n Mind you, it isn\u2019t the prettiest code either - but it\u2019s good enough for me.\n The result is a  suggestion of newsletter content, formatted in a way I can work with.\n  This saves me a lot of time preparing the  syntax of the newsletter, as it\u2019s all written in Markdown. Pocket also has a decent  summary of each article, that I only have to tweak slightly.\n  With the Pocket suggestion available in Markdown format, now begins the most time-intensive part: writing.\n While Pocket makes good suggestions for the description of  projects, it doesn\u2019t quite work for items in the news- or tutorials section.\n At this point, I haven\u2019t read every link yet (I bookmark  a lot, often just based on the title alone), about 50% gets thrown away in this step.\n This is the stage that takes me 2-3 hours. Half of it is spent typing, the other half is reading the articles.\n  This is a step that might seem a bit backwards, but it works for my workflow: once I have the web-version available, I will use that to generate a different version for the HTML and TXT view of the newsletter.\n The input for the conversion is the Markdown file that  hugo parses. It looks like this:\n ---title: &#39;cron.weekly issue  #131: Ubuntu 20.04, Moloch, eBPF, xsv, desed &amp; more&#39;author: mattiasdate: 2020-04-26T06:50:00+01:00publishDate: 2020-04-26T06:50:00+01:00url: /cronweekly/issue-131/---Hi everyone! \ud83d\udc4bWelcome to cron.weekly issue  #131.Last week ...\n   It generates the TXT version ( -t flag) or the HTML version ( -h flag) and copies the output to my clipboard using  pbcopy on Mac.\n I\u2019ve spent a considerable amount of time optimizing both views to look good in any e-mail client. The script above generates this HTML output:\n  Because the audience is  very technical, a surprising amount of users read it in  Mutt, a text-only client. They get this version delivered to them:\n  I tried experimenting with more ASCII art, but it renders differently on every client (since it uses your chosen font) so I dropped it altogether. Clean &amp; simple.\n    The web-version gets published automatically at the right time, using Hugo\u2019s  publishDate variable and a cronjob on the server, that regenerates the site every hour.\n  The hourly cronjob runs at 5 minutes before the hour, so the newsletter is generated on time before the mailing goes out a few minutes later.\n  There are two important components to sending out the newsletter: the  client and the  MTA.\n  I use a PHP tool called  Mailcoach that lets me configure the newsletter, set the HTML and TXT body and send them to all subscribers.\n In order to collect new e-mail signups, I embed the Mailcoach form on this (static) website. The POST target of the form you see  on the cron.weekly archive pages points to Mailcoach, which then stores the e-mail addresses and verifies the double opt-in.\n   The web version of Mailcoach allows me to see previous campaigns, monitor the list growth etc.\n  I  strongly believe in  no-tracking, so there are no open- or click-rates to be shown here. Mailcoach supports that, but I don\u2019t want to track users. \ud83d\ude04\n I switched from  using Sendy to Mailcoach because it allows me to easily extend it, which comes in handy a bit further down.\n  Mailcoach, just like Sendy, can send the e-mails using Amazon SES, Mailgun, Sendmail, \u2026 Since I recently got  kicked off Amazon SES for getting too many bounces after  I restarted the newsletter (which was my own fault), I switched to using  Mailgun instead.\n They\u2019re pretty fast, the newsletter gets sent out in just under 10 minutes to about 10.000 subscribers.\n I recently upgraded the Mailgun plan to the  Growth plan for $80/month, which gives me longer log retention and a fixed IP address.\n Since I\u2019m now paying for Mailgun, I\u2019ve been switching all my projects over one-by-one, including the outgoing e-mail from Gmail (a step-by-step plan to moving away from Google products, but that\u2019s for another time).\n  A few weeks ago, I extended the Mailcoach app with  Laravel Nova that gives me a useful admin-section straight out of the box.\n  I wrote some extra code to parse the latest newsletter (the TXT version), extract all the links and my comments on them and then randomly takes 20 links to share out on Twitter spread over the next week.\n This step is mostly fully-automated. I sometimes tweak the copy a bit to make more sense in a Tweet. They are all suffixed with  #CronWeekly, so users can mute these if they  follow me and don\u2019t want to see the newsletter repeated to them on their timeline.\n    Lots of layers building on top of other layers, modifying the content in every step of the way. It\u2019s a bit like a complex Unix pipeline, isn\u2019t it?\n  And once that\u2019s done, the whole process starts again: collect new links, curate them, send them out. \ud83d\ude04\n I regretted the weekly deadline a few years ago when  I needed a break and was near burn-out, but now that I\u2019ve  quit my full-time job to focus on  Oh Dear,  DNS Spy and  the newsletter I find it a lot more enjoyable again.\n Now that the user base is large enough, I can  add sponsorships that help pay the bills.\n If you have any other questions about running a newsletter or the business behind it, feel free  to reach out!", "posttime": "2020-05-02 18:04:22", "tags": "\u64b0\u5199,curate,newsletter", "title": "\u6211\u662f\u5982\u4f55\u64b0\u5199\u548c\u7b56\u5212\u8fd9\u4efd\u5468\u520a\u7684\u3002", "title_en": "How I write and curate the cron.weekly newsletter", "transed": 0, "url": "https://ma.ttias.be/how-to-cron-weekly-newsletter/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u64b0\u5199", "curate"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000284, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u5171\u540c\u5de5\u4f5c\u7684\u5bb6\u56ed\u3002\u52a0\u5165\u4ed6\u4eec\uff0c\u53d1\u5c55\u60a8\u81ea\u5df1\u7684\u5f00\u53d1\u56e2\u961f\uff0c\u7ba1\u7406\u6743\u9650\uff0c\u5e76\u5728\u9879\u76ee\u4e2d\u8fdb\u884c\u534f\u4f5c\u3002\n\u62a5\u540d", "note_en": "GitHub is home to over 50 million developers working together. Join them to grow your own development teams, manage permissions, and collaborate on projects.\n  Sign up", "posttime": "2020-05-02 18:04:20", "tags": "webrtc,cross,\u53d1\u5c55,developers", "title": "\u9002\u7528\u4e8eWebRTC\u7684\u73b0\u4ee3\u8de8\u5e73\u53f0\u5806\u6808", "title_en": "Modern and Cross Platform Stack for WebRTC", "transed": 0, "url": "https://github.com/pion", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["webrtc", "cross", "\u53d1\u5c55"]}, {"category": "", "categoryclass": "", "imagename": "bab7a3b5d4801f38ff113c8412fc0b64.jpeg", "infoid": 1000283, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u8981\u544a\u8bc9\u4f60\u4e00\u4e2a\u79d8\u5bc6\uff1a\u6211\u53d1\u73b012\u4e2a\u6708\u4ee4\u4eba\u56f0\u60d1\u3002Duodecimos\uff0c\u7ed9\u8fd9\u79cd\u683c\u5f0f\u8d77\u4e86\u6b63\u5f0f\u7684\u62c9\u4e01\u6587\u540d\u79f0\uff0c\u4e3a\u4e86\u5de5\u4f5c\uff0c\u5fc5\u987b\u88ab\u526a\u5207\u548c\u6298\u53e0\uff0c\u66f4\u8bda\u5b9e\u5730\u8bf4\uff0c\u6211\u51e0\u4e4e\u4e0d\u80fd\u7406\u89e3\u521a\u521a\u6298\u53e0\u7684\u5f3a\u52a0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u603b\u662f\u63a8\u8350\u6298\u53e0\u60a8\u81ea\u5df1\u7684\u683c\u5f0f\u4ee5\u7406\u89e3\u5b83\u4eec\u7684\u5f3a\u52a0\u7684\u539f\u56e0\u3002\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u53ef\u4ee5\u5728\u5934\u8111\u4e2d\u638c\u63e1\u7a7a\u95f4\u4e2d\u7684\u5f62\u72b6\uff0c\u800c\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u9700\u8981\u5c06\u8fd9\u4e9b\u4e1c\u897f\u62ff\u5728\u624b\u4e2d\u624d\u80fd\u770b\u5230\u5b83\u4eec\u3002\n{\u7b80\u800c\u8a00\u4e4b\uff1a\u5982\u679c\u60a8\u8fd8\u4e0d\u719f\u6089\u683c\u5f0f(\u7eb8\u5f20\u548c\u7eb8\u5f20\u4e4b\u95f4\u7684\u5173\u7cfb)\u548c\u62fc\u7248(\u9875\u9762\u5982\u4f55\u5728\u8868\u5355\u4e2d\u6392\u7248)\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u90a3\u4e48\u8fd9\u4efd\u65b0\u95fb\u7a3f\u5c06\u4f1a\u4ee4\u4eba\u56f0\u60d1\u3002\u5bf9\u4e0d\u8d77\u3002\u5982\u679c\u60a8\u624b\u5934\u6709\u6211\u7684\u4e66\uff0c\u8bf7\u901a\u8bfb\u4e00\u4e0b\u7b2c2\u90e8\u5206\u4e2d\u5173\u4e8e\u683c\u5f0f\u7684\u90e8\u5206\uff0c\u7136\u540e\u56de\u6765\u65f6\u51c6\u5907\u597d\u5bf9\u8fd9\u79cd\u8352\u5510\u7684\u884c\u4e3a\u55e4\u4e4b\u4ee5\u9f3b\u3002}\u3002\n\u4e00\u5bf9\u5f00\u672c\uff0c\u4f60\u53ea\u9700\u6a2a\u5411\u6298\u53e0\u4e00\u6b21\uff0c\u4f60\u5c31\u53ef\u4ee5\u4e86\uff01\u518d\u6298\u4e00\u6b21\uff0c\u4f60\u5c31\u6709\u4e00\u4e2a\u56db\u5206\u97f3\u7b26\u4e86\u3002\u518d\u8bf4\u4e00\u6b21\uff0c\u8fd9\u662f\u4e00\u8f86\u516b\u5ea6\uff1b\u518d\u4e00\u6b21\uff0c\u662f\u5341\u516d\u8f86\u3002(\u50cf\u8bb8\u591a\u5176\u4ed6\u4e66\u76ee\u7f16\u5199\u8005\u4e00\u6837\uff0c\u6211\u503e\u5411\u4e8e\u5728duodecimo/twilvemo\u9644\u8fd1\u4ece\u62c9\u4e01\u540d\u5207\u6362\u5230\u82f1\u8bed\u5316\u540d\u3002)\u3002\n\u752812mo\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u526a\u6389\u4e00\u6761\u5e26\u5b50\uff0c\u8fd9\u6837\u624d\u80fd\u6309\u987a\u5e8f\u5f97\u523012\u7247\u53f6\u5b50\u3002\u4ee5\u4e0b\u662f\u83f2\u5229\u666e\u00b7\u52a0\u65af\u514b\u5c14\u5728\u4ed6\u7684\u201c\u65b0\u76ee\u5f55\u5b66\u5bfc\u8bba\u201d\u4e2d\u5982\u4f55\u5c55\u793a\u5e38\u89c1\u768412mo\u7684\u5185\u90e8\u5f62\u5f0f\u7684\u5f3a\u52a0\uff1a\n\u540c\u6837\uff0c\u5982\u679c\u4f60\u4ece\u5b57\u9762\u4e0a\u6293\u4f4f\u5b83\uff0c\u53ef\u80fd\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff1a4\u7684\u6761\u72b6\u6298\u53e0\u5e76\u63d2\u5165\u52308\u7247\u53f6\u5b50\u7684\u6298\u53e0\u7ec4\u7684\u4e2d\u95f4-4\u52a08\u7b49\u4e8e12\uff01\u6b63\u5982\u4f60\u53ef\u80fd\u5f88\u5feb\u770b\u5230\u7684\u90a3\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u516b\u4eba\u7ec4\u4e4b\u540e\u52a0\u4e0a\u56db\u4eba\u7ec4\uff0c\u4f46\u8fd9\u6709\u70b9\u5c34\u5c2c\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u6ca1\u6709\u4ec0\u4e48\u4e1c\u897f\u80fd\u628a\u805a\u4f1a\u7ef4\u6301\u5728\u4e00\u8d77\uff0c\u800c\u4e14\u4f60\u5728\u7f1d\u7eab\u65f6\u5fc5\u987b\u5c0f\u5fc3\u4e0d\u8981\u628a\u677e\u6563\u7684\u90e8\u5206\u653e\u9519\u4e86\u5730\u65b9\u3002\u5982\u679c\u662f\u90a3\u6837\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u2026\u2026\u3002\n\u4f46\u662f\uff0c\u8fd8\u6709\u53e6\u4e00\u79cd\u9009\u62e9\uff0c\u8fd9\u662f\u6211\u5728\u9605\u8bfb\u683c\u5f0f\u56fe\u8868\u65f6\u77e5\u9053\u7684\uff0c\u4f46\u6211\u5e76\u6ca1\u6709\u4ed4\u7ec6\u8003\u8651\u8fc7\uff0c\u76f4\u5230\u6211\u5728Folger\u9047\u5230\u4e86\u8fd9\u4e2a\u53ef\u7231\u7684\u5c0f\u5bb6\u4f19\uff1a\n\u8fd9\u4e2a\u5c0f12mo\u5370\u5237\u4e8e1604\u5e74\u3002\u7b2c\u4e00\u4ef6\u8ba9\u5b83\u5f88\u68d2\u7684\u4e8b\u60c5\u662f\uff0c\u5b83\u4ecd\u7136\u6709\u4e00\u90e8\u5206\u662f\u539f\u6765\u7684\u84dd\u8272\u5305\u88c5\u7eb8-\u4f60\u53ef\u4ee5\u770b\u5230\u5b83\u5c31\u6302\u5728\u90a3\u91cc\uff0c\u524d\u9762\u7684\u523a\u7f1d\u4e0b\uff0c\u6574\u4e2a\u5305\u88c5\u7eb8\u90fd\u5728\u540e\u9762\u3002\u867d\u7136\u5305\u88c5\u7eb8\u88ab\u6495\u6389\u4e86\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u8ba9\u4eba\u96be\u8fc7\uff0c\u4f46\u8fd9\u4e5f\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4ece\u7ec4\u6210\u8fd9\u672c\u4e66\u7684\u4e09\u4e2a\u805a\u4f1a\u7684\u810a\u6881\u4e0a\u770b\u5230\u7f8e\u4e3d\u7684\u666f\u8272\uff1a\n\u6211\u5f88\u559c\u6b22\u90a3\u4e9b\u5411\u6211\u4eec\u5c55\u793a\u4ed6\u4eec\u80c6\u91cf\u7684\u4e66\u3002\u53e6\u4e00\u4ef6\u8ba9\u8fd9\u672c\u4e66\u6709\u8da3\u7684\u4e8b\u60c5\u662f\uff0c\u5728B\u548cC\u805a\u4f1a\u4e2d\uff0c\u4e00\u4e9b\u9875\u9762\u4ecd\u7136\u6ca1\u6709\u6253\u5f00\u3002\u4e0b\u9762\u770b\u4e00\u4e0bB\u96c6\u5408\u4e2d\u7684\u6700\u540e\u56db\u4e2a\u53f6\u5b50\uff0c\u8bf4\u660e\u6211\u7684\u610f\u601d\uff1a\u53f6\u5b50B9\u548c10\u4e0e\u53f6\u5b50B11\u548cB12\u662f\u5171\u8f6d\u7684(\u5373\uff0c\u4f5c\u4e3a\u540c\u4e00\u5f20\u7eb8\u7684\u4e00\u90e8\u5206\u8fde\u63a5\u5728\u4e00\u8d77)\u3002\n\u4f60\u4e0d\u4f1a\u7ecf\u5e38\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\uff0c\u5f53\u7136\uff0c\u5982\u679c\u6709\u4eba\u771f\u7684\u60f3\u8981\u9605\u8bfb\u8fd9\u4e9b\u53f6\u5b50\u4e0a\u7684\u6587\u5b57\uff0c\u4ed6\u4eec\u5c31\u5fc5\u987b\u628a\u5b83\u4eec\u5207\u5f00\u3002\n\u8fd9\u5c31\u662f\u6211\u8dcc\u8dcc\u649e\u649e\u7684\u5730\u65b9\u3002\u6211\u60f3\u8fd9\u662f12\u4e2a\u6708\uff0c\u56e0\u4e3a\u6bcf\u6b21\u91c7\u96c6\u90fd\u670912\u7247\u53f6\u5b50\uff0c\u800c\u4e14\u94fe\u6761\u662f\u6c34\u5e73\u6392\u5217\u7684\u3002\u4f46\u662f\u5b83\u662f\u5982\u4f55\u5f3a\u52a0\u7684\uff0c\u4f7f\u5f97\u6700\u540e\u56db\u7247\u53f6\u5b50\u770b\u8d77\u6765\u50cf\u8fd9\u6837\u5462\uff1f\u5728\u666e\u901a\u768412mo\u62fc\u7248\u4e2d\uff0c\u53f67\u548c8\uff0c9\u548c12\u5728\u524d\u7f18\u8fde\u63a5\uff0c10\u548c11\u8fde\u63a5\u3002(\u7b49\u4e00\u4e0b\uff0c\u4f60\u8fd8\u4e0d\u914d\u5408\u5417\uff1f\u6709\u4e86\u7eb8\uff0c\u7406\u89e3\u8fd9\u4ef6\u4e8b\u5c31\u5bb9\u6613\u591a\u4e86\u3002)\u3002\u5982\u679c\u662f8\u548c4\uff0c\u90a3\u4e48\u4f60\u4f1a\u770b\u52305\uff1a8\uff0c6\uff1a7\u548c11\uff1a12\u5728\u2026\u2026\u76f8\u63a5\u3002\n\u90a3\u4e48\u8fd9\u91cc\u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5012\u7f6e\u768412mo\uff0c\u76d6\u65af\u51ef\u5c14\u63cf\u8ff0\u8bf4\uff0c\u8fd9\u662f\u6211\u4ee5\u524d\u4e13\u6ce8\u4e8e\u82f1\u6587\u4e66\u65f6\u4ece\u672a\u9047\u5230\u8fc7\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u8fd9\u663e\u7136\u662f\u4e00\u79cd\u4e3b\u8981\u662f\u610f\u5927\u5229\u4eba\u7684\u505a\u4e8b\u65b9\u5f0f\u3002\u5b83\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\uff1a\n\u57fa\u672c\u4e0a(\u56e0\u4e3a\u8c01\u4f1a\u770b\u56fe\u8868\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u4e00\u8fb9\u770b\u4e66\u4e00\u8fb9\u6298\u53e0\uff0c\u5bf9\u5427\uff1f)\u3002\u56db\u4e2a\u4eba\u7684\u5e26\u5b50\u5bf9\u6298\uff0c\u7136\u540e\u5305\u88f9\u5728\u516b\u4e2a\u4eba\u7684\u5c0f\u7ec4\u5468\u56f4\u3002\n\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u5f88\u660e\u663e\uff0c\u4f46\u8fd9\u5c31\u662f\u6211\u5982\u4f55\u7406\u89e3\u8fd9\u672c\u4e66\u7684\uff1a\u6211\u6253\u5f00\u76d6\u65af\u514b\u5c14\uff0c\u770b\u770b\u4ed6\u6709\u5404\u79cd12mo\u9009\u9879\uff1a\u957f\u7684\u3001\u666e\u901a\u7684\u30018\u548c4\u7684\uff0c\u7136\u540e\u6211\u770b\u5230\u4e86\u5012\u7f6e\u7684\u3002\u548c\u2026\u3002\u3002\u55ef\uff0c\u8001\u5b9e\u8bf4\uff0c\u5bf9\u6211\u6765\u8bf4\u8fd9\u5c31\u662f\u4e8b\u60c5\u53d8\u5f97\u6a21\u7cca\u7684\u5730\u65b9\u3002\u6211\u5750\u5728\u798f\u5c14\u683c\u9605\u89c8\u5ba4\uff0c\u770b\u5230\u4e00\u5f20\u770b\u8d77\u6765\u53ef\u4ee5\u5de5\u4f5c\u7684\u56fe\u8868\uff0c\u8bd5\u7740\u5728\u8111\u6d77\u4e2d\u60f3\u8c61\u5b83\uff0c\u7528\u51b7\u5149\u5bfb\u627e\u6c34\u5370\uff0c\u7136\u540e\u8bf4\uff1a\u201c\u554a\u54c8\uff01\uff01\u201d\u7136\u540e\u9ad8\u9ad8\u5174\u5174\u5730\u56de\u5bb6\u4e86\u3002\u6211\u60f3\u8fc7\u53bb\u5728\u54ea\u91cc..\u3002\n\u6240\u4ee5\u521a\u624d\uff0c\u5f53\u6211\u8bd5\u7740\u4e3a\u4f60\u4eec\u6240\u6709\u4eba\u753b\u4e00\u5f20\u56fe\u6765\u786e\u8ba4\u7684\u65f6\u5019\uff0c\u6211\u57fa\u672c\u4e0a\u53c8\u628a\u81ea\u5df1\u641e\u7cca\u6d82\u4e86\uff0c\u4e0d\u5f97\u4e0d--\u662f\u7684\uff0c\u4f60\u4eec\u731c\u5bf9\u4e86--\u62ff\u51fa\u4e00\u5f20\u7eb8\u7ed9\u81ea\u5df1\u6298\u8d77\u6765\u3002\u65e2\u7136\u6211\u4e00\u76f4\u5728\u558b\u558b\u4e0d\u4f11\uff0c\u4e0b\u9762\u5c31\u662f\u6211\u5982\u4f55\u4e3a\u81ea\u5df1\u521b\u5efa\u7eb8\u8d28\u6a21\u578b\u6765\u7406\u89e3\u5f3a\u8feb\u884c\u4e3a\u7684\u65b9\u6cd5\u3002\u5982\u679c\u6211\u5e78\u8fd0\u5730\u6709\u4e00\u5f20\u6211\u6000\u7591\u662f\u6211\u6b63\u5728\u770b\u7684\u56fe\u8868\uff0c\u6211\u4f1a\u4ece\u6cbf\u7740\u8fd9\u4e9b\u7ebf\u6298\u53e0\u4e00\u5f20\u7eb8\u5f00\u59cb\uff0c\u5728\u7b7e\u540d\u6807\u8bb0\u548c\u2026\u2026\u4e0a\u90fd\u6253\u4e0a\u8bb0\u53f7\u3002\n\u4e0b\u4e00\u6b65\u662f\u8c03\u6574\u5b83\uff0c\u4f7f\u5176\u4e0e\u6211\u5728\u5b9e\u9645\u624b\u5934\u7684\u4e66\u4e2d\u770b\u5230\u7684\u76f8\u5339\u914d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u60f3\u8981", "note_en": "I\u2019m going to let you in on a secret: I find 12mos confusing. Duodecimos, to give the format its formal Latin name, have to be cut and folded in order to work, and to be even more honest, I can barely get my head around impositions that are just folding. This, for what it\u2019s worth, is why I always always always recommend folding your own formats to understand their impositions. Some of us can hold shapes in space in our heads, and some of us need to hold those things in our hands to see them.\n {A brief aside: If you aren\u2019t already familiar with the basic concepts of format (the relationship between leaves and sheet) and imposition (how pages are laid out in a forme) then this newsletter is going to be confusing. I\u2019m sorry. If you have my book at hand, go read through the section on format in Part 2, and then come back prepared to chuckle at this ridiculousness.}\n A folio you fold widthwise once, and there you go! Fold it again and you\u2019ve got a quarto. One more time, it\u2019s an octavo; again, a sixteenmo. (I, like many other bibliographers, tend to switch from the latinate names to the anglicized ones right around duodecimo/twelvemo.)\n With a 12mo, you need to cut off a strip in order to get twelve leaves in sequence. Here\u2019s how Philip Gaskell shows the imposition of the inner forme of the common 12mo in his  A New Introduction to Bibliography:\n   Again, it might be easier to grasp what \u2019s happening if you literally grasp it: the strip of four is folded and inserted in the middle of the folded group of eight leaves \u2014and four plus eight is twelve! You could, as you probably quickly saw, also add the group of four after the group of eight, but that \u2019s a bit awkward, since there \u2019s nothing actually holding the gathering together, and you \u2019d have to be careful not to misplace the loose section when you were sewing. In that case, it \u2019d be  ...\n But there\u2019s another option, too, that I knew of from reading format diagrams but I hadn\u2019t really thought about closely until I encountered this sweet little fellow at the Folger:\n   This little 12mo was printed in 1604. The first thing that makes it great is that it\u2019s still partially in its original blue wrapper\u2014you can see it just hanging on there under the stab stitching on the front and the full wrapper is present on the back. While it might be sad that the wrapper has been partially torn off, it also means that we can get a beautiful view from the spine of the three gatherings that make up this book:\n   I\u2019m a sucker for books that show us their guts. The other thing that makes this book fun is that some of the pages are still unopened in the B and C gatherings. Here\u2019s a look at the last four leaves in the B gathering showing what I mean: leaves B9 and 10 are conjugate (that is, connected as part of the same sheet) as are leaves B11 and B12.\n   You don\u2019t see this too often because, of course, if someone were to actually have wanted to read the text on those leaves, they would have had to cut them open.\n So here \u2019s where I stumbled. I figured this was a 12mo because each gathering had 12 leaves and the chain lines ran horizontally. But how was it imposed so that the last four leaves would look like this? In the common 12mo imposition, leaves 7 and 8, 9 and 12 are joined at the fore-edge and 10 and 11 joined. (Wait, are you still not folding along? It \u2019s so much easier to make sense of this with paper in hand.) If it was done as an 8 and 4, then you \u2019d see 5:8, 6:7, and 11:12 joined at  ...\n So what is going on here? It\u2019s an inverted 12mo, something that Gaskell describes that I hadn\u2019t run across before when I was focusing on English books because it\u2019s apparently a primarily Italian way of doing things. Here\u2019s how it works:\n   Basically (because who can read diagrams, which is why you are folding this as you are reading, right??) the strip of four is folded in half and then wrapped around the group of eight.\n That might sound pretty obvious, but this is how I worked out what the book was doing: I opened up Gaskell and looked at the various 12mo options he had: long, common, 8-and-4, and then I saw inverted. And \u2026. well, to be honest, this is where things get fuzzy for me. I sat in the Folger reading room and saw a diagram that looked like it could work, tried to imagine it in my head, got a cold light to look for watermarks, and then said, \u201cAha!! \u201dand went home happy. I think where past  ...\n So just now, when I tried to confirm that by drawing a diagram for you all, I basically got myself all confused again and had to \u2014yes, you guessed it \u2014get a piece of paper out and fold it for myself. Since I keep harping on it, here \u2019s how I go about creating paper models for myself to understand imposition. If I \u2019m lucky to have a diagram that I suspect is of what I \u2019m looking at, I start with folding a piece of paper along those lines, marking up both the signature marks and the  ...\n   The next step is to adjust it to match what I\u2019m seeing in an actual book-in-hand. In this case, I want to have the conjoined leaves at the end of the gathering, not the start, so I have to reverse how the strip of four is folded. So I refold and renumber:\n   Satisfied that it works, I then go over it with colored ink to differentiate between pagination and signature marks. I often bracket off the signed marks from the unsigned and when I\u2019m being really careful about all this, I use a sheet on which I\u2019ve drawn a watermark. I was not that obsessive this time. \u00af\\_(\u30c4)_/\u00af\n But as you can see from this picture, my model does get the conjoined leaves at the end of the gathering, where they are in the  Apologie\u2019s B and C gatherings:\n   Cool! But do you see what problem still remains? In addition to 9:10 and 11:12 being conjugate, I have 7:8 joined as well. And they are clearly not in the book itself.\n So what happened? How did both the B and C gatherings have 7:8 opened but not the other fore-edges? (All of the top conjugates are opened, but it seems less weird to me that those could have been split while the fore-edge left untouched.) If I start offering paid subscriptions to  Early Printed Fun, paid subscribers would be able to leave comments on these letters, which could be fun. As it is now, you can maybe email me ( sarah@earlyprintedbooks.com) with your thoughts or  ...\n Even though I haven\u2019t solved this problem, I\u2019m going to add my model of the inverted 12mo to my stack of paper models of impositions. I hope it encourages you not to be embarrassed by making your own models. Hands on learning is the best learning!\n   When it came to think about what imposition schemes to include in my book, I went with as few as possible, on the principle that mine was a book for beginners and so I could just direct folks to Gaskell and his many diagrams. And so I went with the common 12mo and the 8-and-4. Alas, I am sorry now I didn \u2019t include the inverted 12mo since I am obsessed with how tidy and fool-proof it is. (In the common imposition, you could mis-fold the strip of four pretty easily, or  ...\n The other, more horrifying thing that I \u2019m sorry about is that the diagram I included of the common 12mo is actually wrong. I mean, it \u2019s wrong! In a published book! If you look up my diagram and compare it to Gaskell \u2019s \u2014or even just try to fold it as is \u2014you \u2019ll see that I swapped the 2nd and 4th leaves and the 9th and 11th leaves. It folds super awkwardly because of that, and I can \u2019t imagine anyone would ever have printed that way. I don \u2019t know why I made that mistake,  ...\n But this is why you are looking at Gaskell\u2019s drawing of the inner form of the common and inverted 12mos rather than diagrams from my book. I guess I have another item to add to my  errata list.\n One last note: the book we\u2019ve been looking at isn\u2019t in the Folger\u2019s online catalog, but the call number is DC122.9 B4 A7 Cage. Here\u2019s a pretty picture of the card itself instead of a link:\n   I owe a big thanks to my friend Andras for calling this book to my attention many years ago. It really is a delightful object.\n   I didn \u2019t manage to hit my every-other-week goal with this letter. Maybe that \u2019s too frequent of a schedule? I don \u2019t think so \u2014I just kind of ran into some personal exhaustion and a whole bunch of exciting ideas to write about that, part way through, had me realize I had to trudge back to the library to see books in person. Sorry for that. But at least now I know you \u2019ll be so busy making paper models that you won \u2019t even notice how long it \u2019s been since the last  ...\n In the meantime, mind your p\u2019s and q\u2019s\u2014and your Gaskell!", "posttime": "2020-05-02 18:04:15", "tags": "mos,\u6298\u53e0,book", "title": "12\u4e2a\u6708\u592a\u591a\u4e86", "title_en": "Too Many 12mos", "transed": 0, "url": "https://sarahwerner.substack.com/p/too-many-12mos", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["mos", "\u6298\u53e0", "book"]}]