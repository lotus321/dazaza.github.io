[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1000403, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u4e00\u5f00\u59cb\uff0cBluecore\u5c31\u8fd0\u884c\u5728Google Cloud Platform(GCP)\u4e0a\u3002\u5230\u4e86\u6784\u5efa\u9ad8\u6027\u80fd\u670d\u52a1\u7684\u65f6\u5019\uff0c\u6211\u4eec\u81ea\u7136\u800c\u7136\u5730\u5e0c\u671b\u5229\u7528GCP\u57fa\u7840\u8bbe\u65bd\uff0c\u800c\u4e0d\u662f\u81ea\u5df1\u6784\u5efa\u5b83\u3002\u901a\u8fc7\u4f7f\u7528Kubernetes(GKE)\u3001Redis(MemoryStore)\u3001BigTable\u548c\u5176\u4ed6GCP\u6280\u672f\uff0c\u6211\u4eec\u80fd\u591f\u6784\u5efa\u5177\u6709\u8db3\u591f\u5e26\u5bbd\u548c\u5ef6\u8fdf\u7684\u670d\u52a1\uff0c\u6bcf\u79d2\u53d1\u900110000\u4e2a\u4e2a\u6027\u5316\u63a8\u8350\u3002\n\u4f60\u5f88\u53ef\u80fd\u6536\u5230\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u5f15\u8bf1\u4f60\u8d2d\u4e70\u4f60\u653e\u5728\u7f51\u4e0a\u8d2d\u7269\u8f66\u91cc\u7684\u4e00\u79cd\u4ea7\u54c1\uff0c\u800c\u4e14\u5b83\u53ef\u80fd\u8fd8\u9644\u5e26\u4e86\u4e00\u4e9b\u5176\u4ed6\u63a8\u8350\u7684\u4ea7\u54c1\u3002\u6211\u4eec\u662f\u600e\u4e48\u60f3\u51fa\u8fd9\u4e9b\u4ea7\u54c1\u6765\u63a8\u8350\u6d88\u8d39\u8005\u7684\u5462\uff1f\u5728Bluecore\uff0c\u6211\u4eec\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u521b\u5efa\u4ea7\u54c1\u63a8\u8350\uff1a\u901a\u8fc7\u4ea7\u54c1\u63a8\u8350\u6216\u901a\u8fc7\u6d88\u8d39\u8005\u884c\u4e3a\u63a8\u8350\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u6839\u636e\u6700\u8fd1\u67e5\u770b\u6216\u4ee5\u524d\u8d2d\u4e70\u7684\u4ea7\u54c1\u6765\u63a8\u8350\u4ea7\u54c1\u3002Bluecore\u5df2\u7ecf\u5f00\u53d1\u51fa\u5f3a\u5927\u7684\u6570\u636e\u6a21\u578b\u6765\u8ba1\u7b97.\u3002\n\u5c06\u4ea7\u54c1\u6620\u5c04\u5230\u7528\u6237\u5e76\u4e0d\u662f\u4e00\u4e2a\u770b\u8d77\u6765\u90a3\u4e48\u7b80\u5355\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u8bc4\u4f30\u6709\u5173\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5c06\u54ea\u4e9b\u4ea7\u54c1\u63d2\u5165\u7535\u5b50\u90ae\u4ef6\u7684\u89c4\u5219\u3002\u4f8b\u5982\uff0c\u4e0d\u5305\u62ec\u7f3a\u8d27\u6216\u6253\u6298\u7684\u4ea7\u54c1\u3002\u56e0\u4e3a\u6211\u4eec\u53ea\u5c55\u793a\u6709\u6548\u7684\u4ea7\u54c1\u662f\u5f88\u91cd\u8981\u7684\uff0c\u6211\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a\u6700\u65b0\u7684\u4ea7\u54c1\u76ee\u5f55\u3002\u5bf9\u4e8e\u4efb\u4f55\u4e00\u5bb6\u7ed9\u5b9a\u7684\u96f6\u552e\u5e97\uff0c\u4ea7\u54c1\u90fd\u662f\u4e0d\u65ad\u53d8\u5316\u7684\u3002\u56e0\u6b64\uff0c\u4f7f\u6211\u4eec\u7684\u4ea7\u54c1\u4fdd\u6301\u6700\u65b0\u9700\u8981\u5176\u81ea\u8eab\u7684\u670d\u52a1\u3002\n\u867d\u7136\u7535\u5b50\u90ae\u4ef6\u662f\u6211\u4eec\u7684\u4e3b\u8981\u4ea7\u54c1\uff0c\u4f46Bluecore\u4e5f\u5728\u96f6\u552e\u5546\u7684\u7f51\u7ad9\u4e0a\u63d0\u4f9b\u5b9e\u65f6\u4ea7\u54c1\u63a8\u8350\uff0c\u8fd9\u5e26\u6765\u4e86\u6bd4\u7535\u5b50\u90ae\u4ef6\u66f4\u4e25\u683c\u7684\u5ef6\u8fdf\u9650\u5236\u3002\u73b0\u573a\u63a8\u8350\u8feb\u4f7f\u6211\u4eec\u91cd\u65b0\u8003\u8651\u6211\u4eec\u7684\u63a8\u8350\u57fa\u7840\u8bbe\u65bd\u3002\u63a8\u8350\u670d\u52a1\u7684\u6784\u5efa\u8003\u8651\u5230\u4e86Bluecore\u7684\u5de5\u7a0b\u4ef7\u503c\u4e4b\u4e00\uff0c\u5373\u6784\u5efa\u201c\u5c3d\u53ef\u80fd\u7b80\u5355\uff0c\u5c3d\u53ef\u80fd\u5f3a\u5927\u201d\u7684\u4e1c\u897f\u3002\u5728\u63a8\u8350\u670d\u52a1\u7684\u6574\u4e2a\u53d1\u5c55\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u2026\u2026\u3002\n\u5236\u4f5c\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u6709\u4e09\u4e2a\u7ec4\u6210\u90e8\u5206\uff1a\u6a21\u677f(\u7535\u5b50\u90ae\u4ef6\u7684\u8bbe\u8ba1\u5927\u7eb2)\u3001\u53d7\u4f17(\u5c06\u63a5\u6536\u7535\u5b50\u90ae\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5217\u8868)\u548c\u63a8\u8350(\u6211\u4eec\u638c\u63e1\u7684\u6bcf\u4e2a\u6536\u4ef6\u4eba\u7684\u6570\u636e\u79d1\u5b66\u6a21\u578b\u6d3e\u751f\u7684\u503c)\u3002\u6a21\u677f\u5728\u4e91\u6570\u636e\u5b58\u50a8\u4e2d\uff0c\u6211\u4eec\u7684\u53d7\u4f17\u5728BigQuery\u4e2d\u751f\u6210\uff0c\u6211\u4eec\u7684\u63a8\u8350\u5728\u6570\u636e\u5b58\u50a8\u4e2d\u3002\u7535\u5b50\u90ae\u4ef6\u662f\u5728Google App Engine Standard(GAE)\u4e2d\u751f\u6210\u7684\uff0c\u6211\u4eec\u6309\u6bcf\u5c01\u7535\u5b50\u90ae\u4ef6\u67e5\u8be2\u4e91\u6570\u636e\u5b58\u50a8(\u6709\u65f6.\u3002\n\u597d\u5427\uff0c\u4e0d\u3002\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u6211\u4eec\u73b0\u5728\u652f\u6301\u5f53\u6d88\u8d39\u8005\u5728\u7f51\u7ad9\u4e0a\u65f6\u663e\u793a\u7684\u63a8\u8350\u3002\u8fd9\u610f\u5473\u7740\u5ef6\u8fdf\u73b0\u5728\u786e\u5b9e\u5f88\u91cd\u8981\u3002\u4ece\u4ec5\u9650\u7535\u5b50\u90ae\u4ef6\u5230\u540c\u65f6\u63d0\u4f9b\u73b0\u573a\u548c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u7684\u8f6c\u53d8\u8feb\u4f7f\u6211\u4eec\u91cd\u65b0\u8bc4\u4f30\u6211\u4eec\u7684\u67b6\u6784\u3002\u73b0\u573a\u5efa\u8bae\u8981\u6c42\u6211\u4eec\u6709\u66f4\u4e25\u683c\u7684SLO(300-400\u6beb\u79d2)\u3002\u5728\u7f51\u7ad9\u5f00\u59cb\u611f\u89c9\u7f13\u6162\u4e4b\u524d\uff0c\u8fd9\u5c31\u662f\u4f60\u5f97\u5230\u7684\u5168\u90e8\u4fe1\u606f\u3002\u5728\u8003\u8651\u5230\u5176\u4ed6\u670d\u52a1\u3001\u7f51\u7edc\u548c\u4f20\u8f93\u5230.\u7684\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u83b7\u53d6\u53ea\u662f\u52a0\u8f7d\u65f6\u95f4\u7684\u4e00\u90e8\u5206\u3002\n\u53d7\u4f17(\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5217\u8868)\u751f\u6210\u548c\u4e2a\u6027\u5316(\u5c06\u5730\u5740\u4e0e\u4ed6\u4eec\u7684\u63a8\u8350\u8fdb\u884c\u6620\u5c04)\u662f\u5206\u5f00\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6a21\u677f\u4ec5\u9650\u4e8e\u9644\u52a0\u5230\u53d7\u4f17\u67e5\u8be2\u884c\u7684\u6570\u636e\u3002\u5982\u679c\u63a8\u8350\u7c7b\u578b\u5728\u5355\u4e2a\u6a21\u677f\u5185\u8fdb\u884c\u4e2a\u6027\u5316\uff0c\u5219\u53d7\u4f17\u67e5\u8be2\u5c06\u65e0\u6cd5\u7ba1\u7406\u3002\n\u5728\u65b0\u7248\u672c\u7684\u63a8\u8350\u670d\u52a1\u4e2d\uff0c\u6211\u4eec\u60f3\u8981\u505a\u4e94\u4ef6\u57fa\u672c\u7684\u4e8b\u60c5\uff1a\n\u8003\u8651\u5230\u6211\u4eec\u7684\u65b0\u76ee\u6807\uff0c\u672c\u7740\u201c\u5c3d\u53ef\u80fd\u7b80\u5355\uff0c\u5c3d\u53ef\u80fd\u5f3a\u5927\u201d\u7684\u7cbe\u795e\uff0c\u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5929\u771f\u7684\u670d\u52a1\u5b9e\u73b0\u3002\u6211\u4eec\u77e5\u9053\u6211\u4eec\u9700\u8981GRPC\u670d\u52a1\uff0c\u6211\u4eec\u7684\u63a8\u8350\u6570\u636e\u6765\u81eaBigQuery/Datastore\uff0c\u800c\u6211\u4eec\u7684\u4ea7\u54c1\u6570\u636e\u9a7b\u7559\u5728Datastore\u4e2d\u3002\u6211\u4eec\u7684\u63a8\u8350\u670d\u52a1(\u7528GO\u7f16\u5199)\u652f\u6301\u8fd0\u884c\u65f6\u4e2a\u6027\u5316\uff0c\u56e0\u4e3a\u73b0\u5728\u6211\u4eec\u5c06\u4ea7\u54c1\u548c\u63a8\u8350\u6570\u636e\u63d0\u4f9b\u7ed9\u670d\u52a1\uff0c\u5e76\u5c06\u63a8\u8350\u7684\u4ea7\u54c1\u63d0\u4f9b\u7ed9\u4e2a\u6027\u5316\u2026\u2026\u3002\n\u6570\u636e\u5b58\u50a8\u975e\u5e38\u6602\u8d35\uff0c\u800c\u4e14BigQuery\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u5ef6\u8fdf\u8981\u6c42\u3002\u6240\u4ee5\u518d\u8bf4\u4e00\u6b21\uff0c\u4e0d\u662f\u3002\u5373\u4f7f\u6211\u4eec\u5c06\u6240\u6709\u5efa\u8bae\u5bfc\u51fa\u5230\u6570\u636e\u5b58\u50a8\u533a\uff0c\u6211\u4eec\u4ecd\u7136\u65e0\u6cd5\u8fbe\u5230\u5ef6\u8fdf\u76ee\u6807\u3002\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4e0d\u80fd\u8d23\u602a\u9524\u5b50\u662f\u4e2a\u574f\u87ba\u4e1d\u5200\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u5408\u9002\u7684\u5de5\u5177\uff01\n\u8ba9\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728\u5982\u4f55\u6539\u8fdb\u56fe\u8868\u7684\u201cRECS\u201d\u90e8\u5206\u3002\u5efa\u8bae\u88ab\u5199\u5165BigQuery\u6216Google Cloud Storage(GCS)\uff0c\u7136\u540e\u4e00\u4e9b\u88ab\u52a0\u8f7d\u5230\u6570\u636e\u5b58\u50a8\u4e2d\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6765\u81eaBigQuery\u548cGCS\u7684\u6240\u6709\u63a8\u8350\u52a0\u8f7d\u5230BigTable\u4e2d\u3002BigQuery Storage API\u7684\u53d1\u5e03\u4f7f\u5f97\u4eceBigQuery\u4e2d\u63d0\u53d6\u6d77\u91cf\u6570\u636e\u53d8\u5f97\u66f4\u5feb\u3002\u6211\u4eec\u56fa\u5b9a\u7684\u63a8\u8350\u6a21\u5f0f\u4f7f\u8303\u56f4\u4fdd\u6301\u5728\u53ef\u7ba1\u7406\u7684\u8303\u56f4\u5185\u3002\n\u5728\u8003\u8651\u63d0\u9ad8\u6027\u80fd\u65f6\uff0c\u5f88\u591a\u65f6\u5019\u7b54\u6848\u662f\u5b9e\u73b0\u7f13\u5b58\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u63a5\u6536\u8005\u7684\u63a8\u8350\u6570\u636e\u5728\u5176\u65e0\u6548\u4e4b\u524d\u5f88\u53ef\u80fd\u53ea\u88ab\u8bfb\u53d6\u4e00\u6b21\u3002\u7f13\u5b58\u672a\u547d\u4e2d\u610f\u5473\u7740\u6211\u4eec\u5c06\u4ece\u6e90\u8bfb\u53d6\uff0c\u4ece\u800c\u5bfc\u81f4\u5ef6\u8fdf\u3001\u91d1\u94b1\u6216\u4e24\u8005\u90fd\u8981\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u524d\u9762\u7684\u7cfb\u7edf\u56fe\u4e2d\u6240\u8bf4\u7684\u90a3\u6837\u3002\u7136\u800c\uff0cBigtable\u5728\u53d7\u5230\u91cd\u521b\u65f6\u8868\u73b0\u826f\u597d\u3002E", "note_en": "From the beginning, Bluecore has run on the  Google Cloud Platform (GCP). When it came time to build a high-performance service, it was only natural that we looked to leverage the GCP infrastructure, rather than building it ourselves. By using Kubernetes ( GKE),  Redis ( MemoryStore),  Bigtable, and other GCP technologies, we were able to build a service with sufficient bandwidth and latency to send 10,000s of personalized recommendations per second.\n  You \u2019ve most likely received an email tempting you to buy a product you left in your online shopping cart, and it probably also came with a few other recommended products. How did we come up with these products to recommend the consumer? At Bluecore, we create product recommendations in two ways: via a product or via the consumer \u2019s behavior. For example, a product may be recommended based on one that was recently viewed or previously purchased. Bluecore has developed powerful data models to calculate  ...\n  Mapping products to users is not as simple a process as it seems. We evaluate rules about which products we can insert into the email at runtime. For example, to exclude products that are out of stock or on discount. Since it is important that we only show valid products, we must have an up-to-date product catalog. Products change constantly for any given retail store. Therefore, keeping our products up-to-date requires a service of its own.\n Though email is our primary product, Bluecore also provides real-time product recommendations on retailer\u2019s websites, which introduces much tighter latency bounds than email would otherwise require. Onsite recommendations forced us to rethink our recommendations infrastructure. The recommendations service was built with one of Bluecore\u2019s engineering values in mind, to build things  \u201cas simple as possible, as powerful as necessary.\u201dThroughout the evolution of the recommendations service, we have  ...\n   Three components go into making an email: the template (design outline of the email), the audience (the list of email addresses that will receive an email), and the recommendations (the values derived from the data science models per recipient we have information on). The templates live in  Cloud Datastore, our audiences are generated in  BigQuery, and our recommendations are in Datastore. Emails are generated in  Google App Engine Standard(GAE), and we query Cloud Datastore as each email (sometimes  ...\n  Well, no. As we mentioned before, we now support recommendations shown while the consumer is on the website. This means latency does matter now. The shift from email-only to both on-site and email services forced us to re-evaluate our architecture. Onsite recommendations require that we have a much tighter SLO of 300 \u2013400 ms. This is about all you get before a website starts to feel slow. Recommendation fetching is only part of the load time given that other services, network, and transit to  ...\n Audience (list of email addresses) generation and personalization (mapping an address with their recommendations) were separate, which means that templates were limited to data appended to the rows of the audience query. If the type of recommendation were personalized within a single template, the audience query would be unmanageable.\n  In the new version of the recommendation service we want to do five basic things:\n   With our new goals in mind, and in the spirit of being  \u201cas simple as possible, as powerful as necessary,\u201d let\u2019s build a naive implementation of the service. We know we want a  gRPC service, our recommendations data comes from BigQuery/Datastore, and our product data lives in Datastore. Our recommendations service, written in  Go, supports runtime personalization because now we feed the products and recommendations data to a service and give those recommended products to the personalization  ...\n   Datastore is expensive and Bigquery can\u2019t meet our latency requirements. So again, no. Even if we exported all of our recommendations to Datastore, we  still wouldn\u2019t hit our latency goals. That\u2019s okay though, we can\u2019t blame a hammer for being a bad screwdriver, we just need the right tool!\n   Let\u2019s focus on how we can improve the \u201crecs\u201d portion of our diagram. Recommendations were written to BigQuery or  Google Cloud Storage (GCS), then some were loaded into Datastore. Instead, we could load all of our recommendations from BigQuery and GCS into Bigtable. The release of the  BigQuery Storage API made pulling massive volumes of data from BigQuery fast. Our fixed schema for recommendations kept the scope manageable.\n    When thinking about improving performance, many times the answer is to implement caching. In our case, this isn \u2019t a good solution because a recipient \u2019s recommendations data is most likely only read once before it is invalidated. Cache-miss means that we would read from the source, costing us latency, money, or both as in our previous system diagram. Bigtable, however, performs well when hit hard. Even with only three instances handling 5,000 requests, per second, we saw latency of 15  ...\n  Although we improved our recommendation part of our pipeline, we are still lacking with products. Datastore is still burning a hole in our wallet, and we are still failing our on-site latency requirements.\n   Let\u2019s talk about latency. Our products are ~2KB of data (they contain information about various attributes like green, shirt, short-sleeved, etc.). Datastore latencies are 46.5 ms + 4.2 ms/key. This isn\u2019t great, but not disqualifying. Memorystore latencies are 0.09 ms + 0.033 ms/key. This is outstanding! Memorystore takes home the belt.\n   Unlike recommendations, the same products are used thousands of times in a single batch of emails, so caching is a good fit \u2014 we will read the same product many times before it is invalidated. To handle this, we created a GKE-based service, written in Go, called the product update listener.\n  Product catalogs are maintained by our GAE application. Two updates for the same product may come in simultaneously, with the last write to Datastore winning. That makes cache invalidation a challenge. We could have had a short time-to-live (TTL) on cached items, but that would have cost a lot of runtime efficiency unless we had some kind of gate to keep all the recommendation service nodes from trying to fetch from Datastore at the same time. Instead, the product update listener receives  ...\n  Our cache holds objects in Datastore transmitted as  protobuf. While products across partners have different schemas, within a single retailer there is a lot of consistency and repetition. That made products, which average 2KB, a prime candidate for compression. However, most compression schemes do not do well on small files. The authors of  Zstandard recognized this problem and added features specifically to improve performance on  small files. The chart below shows that popular compression  ...\n   Utilizing GCP tools has improved our performance tremendously. Recommendations now come from Bigtable, giving us back literally seconds of latency. Our product cache hit rates are usually above 99.9% because of the long TTL enabled by the proactive refresh from the product update listener. We also improved performance by adding a small  LRU cache with a short TTL, keeping the Memorystore traffic down to a dull roar. So, finally,  YES! It is as powerful as necessary.\n   Let\u2019s prove that we meet our goals. We deployed our service to a GKE cluster, cloned and anonymized data, created attacker clients in Go, and collected metrics for the results. Thanks to the power of GKE, we were able to scale both the service and the attacking clients with a single command. The entire run, including rescaling the components was scripted and hands-off.\n    The main takeaway from this graph is that we were able to handle well above our bandwidth goal of 20 kHz. Woo hoo!\n  The process of creating a recommendation service that meets our goals shows the importance of knowing the strengths of the tools that your service or application is using. GCPs breadth of offerings enabled us to build an incredible service with just a handful of engineers. Here is an overview we use GCP tools in the recommendation service:", "posttime": "2020-05-03 04:19:05", "tags": "\u63a5\u6536,gcp,\u63a8\u8350,recommendations", "title": "\u4f7f\u7528GCP\u4e3a\u6bcf\u79d220K\u4e2a\u6027\u5316\u63a5\u6536\u63d0\u4f9b\u670d\u52a1", "title_en": "Using GCP to Serve 20K Personalized Recs per Second", "transed": 1, "url": "https://medium.com/bluecore-engineering/using-google-cloud-to-serve-10-000s-of-personalized-recs-per-second-d86b7cf6b6da", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u63a5\u6536", "gcp", "\u63a8\u8350"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000402, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e00\u76f4\u662f\u5173\u4e8e\u8bbe\u8ba1\u7f16\u7a0b\u8bed\u8a00\u548c\u4e3a\u5b83\u4eec\u7f16\u5199\u7f16\u8bd1\u5668\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u79cd\u5de8\u5927\u7684\u5feb\u4e50\u548c\u6ee1\u8db3\u611f\uff0c\u5982\u679c\u60a8\u51b3\u5b9a\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u79cd\u4e13\u4e1a\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u8bb8\u6211\u53ef\u4ee5\u5e2e\u52a9\u5176\u4ed6\u4eba\u89c2\u5bdf\u4e00\u4e0b\u60a8\u7684\u9700\u6c42\u3002\u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u5168\u4e66\u7bc7\u5e45\u7684\u4e3b\u9898\uff0c\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u53ea\u4f1a\u987a\u5176\u81ea\u7136\u5730\u8c08\u51e0\u4e2a\u8981\u70b9\uff0c\u800c\u907f\u5f00\u5728\u5176\u4ed6\u5730\u65b9\u5df2\u7ecf\u5f88\u597d\u5730\u8ba8\u8bba\u8fc7\u7684\u8bdd\u9898\u3002\n\u9996\u5148\uff0c\u4f60\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\u3002\u591a\u5e74\u7684\u5de5\u4f5c\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u5c06\u5728\u6c99\u6f20\u4e2d\u6e38\u8361\u3002\u6210\u529f\u7684\u673a\u4f1a\u5bf9\u4f60\u4e0d\u5229\u3002\u5982\u679c\u4f60\u6ca1\u6709\u5f3a\u70c8\u7684\u81ea\u6211\u6fc0\u52b1\u53bb\u505a\u8fd9\u4ef6\u4e8b\uff0c\u5b83\u662f\u4e0d\u4f1a\u53d1\u751f\u7684\u3002\u5982\u679c\u4f60\u9700\u8981\u522b\u4eba\u7684\u8ba4\u53ef\u548c\u9f13\u52b1\uff0c\u8fd9\u662f\u4e0d\u4f1a\u53d1\u751f\u7684\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u505a\u8fd9\u6837\u4e00\u4e2a\u9879\u76ee\u4e0d\u662f\u4e00\u5927\u7b14\u94b1\u7684\u6295\u8d44\uff0c\u5373\u4f7f\u4f60\u5931\u8d25\u4e86\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u8ba9\u4f60\u5d29\u6e83\u3002\u5373\u4f7f\u4f60\u771f\u7684\u5931\u8d25\u4e86\uff0c\u53d6\u51b3\u4e8e\u9879\u76ee\u8fdb\u5c55\u5230\u4ec0\u4e48\u7a0b\u5ea6\uff0c\u5b83\u5728\u4f60\u7684\u7b80\u5386\u4e0a\u770b\u8d77\u6765\u4e5f\u4f1a\u76f8\u5f53\u4e0d\u9519\uff0c\u5bf9\u4f60\u7684\u804c\u4e1a\u751f\u6daf\u4e5f\u6709\u597d\u5904\u3002\n\u6709\u4e00\u4ef6\u4e8b\u975e\u5e38\u6e05\u695a\uff0c\u90a3\u5c31\u662f\u8bed\u6cd5\u5f88\u91cd\u8981\u3002\u8fd9\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u5c31\u50cf\u6c7d\u8f66\u4e0a\u7684\u9020\u578b-\u5982\u679c\u9020\u578b\u4e0d\u5438\u5f15\u4eba\uff0c\u90a3\u4e48\u8868\u6f14\u518d\u706b\u7206\u4e5f\u65e0\u5173\u7d27\u8981\u3002\u8bed\u6cd5\u5fc5\u987b\u662f\u60a8\u7684\u76ee\u6807\u53d7\u4f17\u559c\u6b22\u7684\u5185\u5bb9\u3002\n\u5c1d\u8bd5\u4f7f\u7528\u4ed6\u4eec\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u7684\u4e1c\u897f\uff0c\u5c06\u4f7f\u8bed\u8a00\u91c7\u7528\u53d8\u5f97\u66f4\u96be\u63a8\u9500\u3002\n\u6211\u559c\u6b22\u628a\u719f\u6089\u7684\u53e5\u6cd5\u548c\u7f8e\u611f\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5b83\u5fc5\u987b\u5728\u5c4f\u5e55\u4e0a\u770b\u8d77\u6765\u5f88\u597d\u770b\u3002\u6bd5\u7adf\uff0c\u60a8\u5c06\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u6765\u7814\u7a76\u5b83\u3002\u5982\u679c\u5b83\u770b\u8d77\u6765\u7b28\u62d9\u3001\u7b28\u62d9\u6216\u96be\u770b\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u73b7\u6c61\u8bed\u8a00\u3002\n\u4e5f\u8bb8\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u6211\u5efa\u8bae\u7684\u51e0\u4ef6\u4e8b\u4e0d\u5e94\u8be5\u662f\u8003\u8651\u56e0\u7d20\u3002\u8fd9\u4e9b\u90fd\u662f\u865a\u5047\u7684\u795e\uff1a\n\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u51fb\u952e\u3002\u5f53\u7a0b\u5e8f\u5458\u4f7f\u7528\u7eb8\u5e26\u65f6\uff0c\u8fd9\u53ef\u80fd\u5f88\u91cd\u8981\uff0c\u800c\u4e14\u5bf9\u4e8ebash\u6216awk\u8fd9\u6837\u7684\u5c0f\u578b\u8bed\u8a00\u4e5f\u5f88\u91cd\u8981\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u7f16\u7a0b\u65f6\u95f4\u82b1\u5728\u8bfb\u5199\u4e0a\u7684\u65f6\u95f4\u8981\u6bd4\u5199\u591a\u5f97\u591a\uff0c\u56e0\u6b64\u51cf\u5c11\u51fb\u952e\u672c\u8eab\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u76ee\u6807\u3002\u5f53\u7136\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u5927\u91cf\u7684\u6837\u677f\u6587\u4ef6\u662f\u4e2a\u597d\u4e3b\u610f\u3002\n\u6613\u4e8e\u89e3\u6790\u3002\u7f16\u5199\u5177\u6709\u4efb\u610f\u5148\u884c\u529f\u80fd\u7684\u89e3\u6790\u5668\u5e76\u4e0d\u96be\u3002\u4e0d\u5e94\u8be5\u4e3a\u4e86\u5728\u89e3\u6790\u5668\u4e2d\u8282\u7701\u51e0\u884c\u4ee3\u7801\u800c\u5f71\u54cd\u8bed\u8a00\u7684\u5916\u89c2\u3002\u8bf7\u8bb0\u4f4f\uff0c\u60a8\u5c06\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u76ef\u7740\u4ee3\u7801\u3002\u8fd9\u662f\u7b2c\u4e00\u4f4d\u7684\u3002\u5982\u4e0b\u6240\u8ff0\uff0c\u5b83\u4ecd\u7136\u5e94\u8be5\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u3002\n\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u5173\u952e\u5b57\u7684\u6570\u91cf\u3002\u8fd9\u4e2a\u6307\u6807\u5f88\u611a\u8822\uff0c\u4f46\u6211\u770b\u5230\u5b83\u53cd\u590d\u51fa\u73b0\u3002\u82f1\u8bed\u6709\u4e00\u767e\u4e07\u4e2a\u5355\u8bcd\uff0c\u6211\u4e0d\u8ba4\u4e3a\u6709\u4efb\u4f55\u8feb\u5728\u7709\u776b\u7684\u77ed\u7f3a\u3002\u53ea\u8981\u7528\u4f60\u6b63\u786e\u7684\u5224\u65ad\u529b\u5c31\u884c\u4e86\u3002\n\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u3002\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4ee3\u7801\u5e94\u8be5\u662f\u53ef\u89e3\u6790\u7684\uff0c\u800c\u4e0d\u5fc5\u5728\u7b26\u53f7\u8868\u4e2d\u67e5\u627e\u3002\u4f17\u6240\u5468\u77e5\uff0cC++\u4e0d\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\u8bed\u6cd5\u3002\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\u8bed\u6cd5\uff0c\u9664\u4e86\u4f7f\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\u4e4b\u5916\uff0c\u8fd8\u610f\u5473\u7740IDE\u53ef\u4ee5\u5728\u4e0d\u96c6\u6210\u5230\u5927\u591a\u6570\u7f16\u8bd1\u5668\u524d\u7aef\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u8bed\u6cd5\u7a81\u51fa\u663e\u793a\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e09\u65b9\u5de5\u5177\u53d8\u5f97\u66f4\u6709\u53ef\u80fd\u5b58\u5728\u3002\n\u5197\u4f59\u3002\u662f\u7684\uff0c\u8bed\u6cd5\u5e94\u8be5\u662f\u591a\u4f59\u7684\u3002\u4f60\u4eec\u90fd\u542c\u4eba\u8bf4\u8fc7\uff0c\u8bed\u53e5\u7ec8\u6b62\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u662f\u771f\u7684-\u4f46\u8fd9\u79cd\u975e\u5197\u4f59\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u7406\u89e3\u7684\u9519\u8bef\u6d88\u606f\u3002\u8003\u8651\u4e00\u79cd\u6ca1\u6709\u5197\u4f59\u7684\u8bed\u6cd5\u3002\u7136\u540e\uff0c\u4efb\u4f55\u968f\u673a\u7684\u5b57\u7b26\u5e8f\u5217\u90fd\u5c06\u662f\u6709\u6548\u7684\u7a0b\u5e8f\u3002\u751a\u81f3\u4e0d\u53ef\u80fd\u51fa\u73b0\u9519\u8bef\u6d88\u606f\u3002\u826f\u597d\u7684\u8bed\u6cd5\u9700\u8981\u5197\u4f59\uff0c\u4ee5\u4fbf\u8bca\u65ad\u9519\u8bef\u5e76\u63d0\u4f9b\u6b63\u786e\u7684\u9519\u8bef\u6d88\u606f\u3002\n\u4e45\u7ecf\u8003\u9a8c\uff0c\u5343\u771f\u4e07\u786e\u3002\u5982\u679c\u6ca1\u6709\u975e\u5e38\u6709\u529b\u7684\u7406\u7531\uff0c\u5bf9\u4e8e\u719f\u6089\u7684\u7ed3\u6784\uff0c\u6700\u597d\u575a\u6301\u4f7f\u7528\u4e45\u7ecf\u8003\u9a8c\u7684\u771f\u5b9e\u8bed\u6cd5\u5f62\u5f0f\u3002\u5b83\u786e\u5b9e\u7f29\u77ed\u4e86\u8be5\u8bed\u8a00\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u5e76\u5c06\u63d0\u9ad8\u91c7\u7528\u7387\u3002\u60f3\u60f3\u770b\uff0c\u5982\u679c\u8fd9\u79cd\u8bed\u8a00\u4ea4\u6362\u4e86+\u548c*\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\uff0c\u4eba\u4eec\u4f1a\u591a\u4e48\u8ba8\u538c\u5b83\u3002\u5c06\u5206\u6b673\u4fdd\u5b58\u4e3a\u4ee5\u524d\u672a\u89c1\u7684\u7279\u5f81\uff0c\u8fd9\u4e5f\u5411\u7528\u6237\u53d1\u51fa\u8fd9\u662f\u65b0\u7684\u4fe1\u53f7\u3002\n\u4e00\u5982\u65e2\u5f80\uff0c\u8fd9\u4e9b\u539f\u5219\u4e0d\u5e94\u88ab\u89c6\u4e3a\u53e3\u5934\u7985\u3002\u8981\u6709\u6b63\u786e\u7684\u5224\u65ad\u529b\u3002\u4efb\u4f55\u76f2\u76ee\u9075\u5faa\u7684\u8bed\u8a00\u8bbe\u8ba1\u539f\u5219\u90fd\u4f1a\u5bfc\u81f4\u707e\u96be\u3002\u8fd9\u4e9b\u539f\u5219\u5f88\u5c11\u662f\u6b63\u4ea4\u7684\uff0c\u800c\u4e14\u7ecf\u5e38\u53d1\u751f\u51b2\u7a81\u3002\u8fd9\u5f88\u50cf\u8bbe\u8ba1\u4e00\u5ea7\u623f\u5b50--\u628a\u4e3b\u8863\u6a71\u505a\u5f97\u66f4\u5927\uff0c\u610f\u5473\u7740\u4e3b\u5367\u5ba4\u4f1a\u53d8\u5c0f\u3002\u8fd9\u4e00\u5207\u90fd\u662f\u4e3a\u4e86\u627e\u5230\u5408\u9002\u7684\u5e73\u8861\u3002\n\u629b\u5f00\u8bed\u6cd5\u4e0d\u8c08\uff0c\u8bed\u8a00\u7684\u6838\u5fc3\u5c06\u662f\u8bed\u4e49\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u5c06\u610f\u4e49\u8d4b\u4e88\u53e5\u6cd5\u7ed3\u6784\u3002\u8fd9\u662f\u60a8\u5c06\u82b1\u8d39\u5927\u91cf\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7684\u5730\u65b9\u3002\u8fd9\u5f88\u50cf\u4f60\u4f53\u5185\u7684\u5668\u5b98--\u5b83\u4eec\u662f\u770b\u4e0d\u89c1\u7684\uff0c\u9664\u975e\u5b83\u4eec\u51fa\u4e86\u95ee\u9898\uff0c\u5426\u5219\u6211\u4eec\u4e0d\u4f1a\u53bb\u60f3\u5b83\u4eec\u3002\u8bed\u4e49\u5de5\u4f5c\u4e0d\u4f1a\u6709\u592a\u591a\u8363\u8000\uff0c\u4f46\u5b83\u5c06\u662f\u8bed\u8a00\u7684\u5168\u90e8\u610f\u4e49\u6240\u5728\u3002\n\u4e00\u65e6\u901a\u8fc7\u8bed\u4e49\u9636\u6bb5\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8fdb\u884c\u4f18\u5316\uff0c\u7136\u540e\u751f\u6210\u4ee3\u7801\uff0c\u7edf\u79f0\u4e3a\u540e\u7aef\u3002\u8fd9\u4e24\u4e2a\u5173\u90fd\u5f88\u6709\u6311\u6218\u6027\uff0c\u4e5f\u5f88\u590d\u6742\u3002\u6211\uff0c\u6211\u559c\u6b22\u548c\u8fd9\u4e9b\u4e1c\u897f\u6253\u4ea4\u9053\uff0c\u62b1\u6028\u8bf4\u6211\u4e0d\u5f97\u4e0d\u628a\u65f6\u95f4\u82b1\u5728\u5176\u4ed6\u95ee\u9898\u4e0a\u3002\u4f46\u9664\u975e\u4f60\u771f\u7684\u559c\u6b22\u5b83\uff0c\u800c\u4e14\u5b83\u9700\u8981\u4e00\u4e2a\u76f8\u5f53\u7cbe\u795e\u9519\u4e71\u7684\u4eba", "note_en": "My career has been all about designing programming languages and writing compilers for them.\rThis has been a great joy and source of satisfaction to me, and perhaps I can\rhelp others with some observations about what you\u2019re in for if you decide to\rdesign and implement a professional programming language.\rOf course, this is a book length topic, so I\u2019ll just hit on a few highlights here,\rand avoid topics well covered elsewhere.\n    First off, you\u2019re in for a lot of work. Years of work, most of which will be\rwandering in the desert. The odds of success are heavily stacked against you.\rIf you are not strongly self-motivated to do this, it isn\u2019t going to happen.\rIf you need validation and encouragement from others, it isn\u2019t going to happen.\n  Fortunately, doing such a project is not major dollar investment, it won\u2019t break\ryou if you fail. Even if you do fail, depending on how far the project got, it\rcan look pretty good on your resume and be good for your career.\n    One thing abundantly clear is that syntax matters. It matters an awful lot. It\u2019s\rlike the styling on a car \u2014 if the styling is not appealing, it simply doesn\u2019t\rmatter how hot the performance is. The syntax needs to be something your\rtarget audience would like.\n  Trying to go with something they\u2019ve not seen before will make language adoption\ra much tougher sell.\n  I like to go with a mix of familiar syntax and aesthetic beauty. It\u2019s got to look\rgood on the screen. After all, you\u2019re going to spend plenty of time looking at it.\rIf it looks awkward, clumsy, or ugly, so will it taint the language.\n  A couple things I, perhaps surprisingly, suggest should not be considerations. These\rare false gods:\n  Minimizing keystrokes. Maybe this mattered when programmers used paper tape, and it\rmatters for small languages like bash or awk. For larger applications, programming\rtime is spent reading much more than writing so reducing keystrokes shouldn\u2019t be a goal in itself.\rOf course, I\u2019m not suggesting that large amounts of boilerplate is a good idea.\n  Easy parsing. It isn\u2019t hard to write parsers with arbitrary lookahead. The looks\rof the language shouldn\u2019t be compromised to save a few lines of code in the parser.\rRemember, you\u2019ll spend a lot of time staring at the code. That comes first.\rAs mentioned below, it still should be a context free grammar.\n  Minimizing the number of keywords. This metric is just silly, but I see it cropping\rup repeatedly. There are a million words in the english language, I don\u2019t think there\ris any looming shortage. Just use your good judgement.\n    Context free grammars. What this really means is the code should be parseable\rwithout having to look things up in a symbol table. C++ is famously not a context free\rgrammar. A context free grammar, besides making things a lot simpler, means that\rIDEs can do syntax highlighting without integrating in most of a compiler front end,\ri.e. third party tools become much more likely to exist.\n  Redundancy. Yes, the grammar should be redundant. You\u2019ve all heard people say that\rstatement terminating ; are not necessary because the compiler can figure it out. That\u2019s\rtrue \u2014 but such non-redundancy makes for incomprehensible error messages. Consider a\rsyntax with no redundancy. Any random sequence of characters would then be a valid program.\rNo error messages are even possible. A good syntax needs redundancy in order to diagnose\rerrors and give good error messages.\n  Tried and true. Absent a very strong reason, it\u2019s best to stick with tried and true\rgrammatical forms for familiar constructs. It really cuts the learning curve for the language,\rand will increase adoption rates. Think of how people will hate the language if it\rswaps the operator precedence of + and *. Save the divergance3 for features not generally seen\rbefore, such also signals the user that this is new.\n  As always, these principles should not be taken as dicta. Use good judgement.\rAny language design principle blindly followed leads to disaster. The principles\rare rarely orthogonal, and frequently conflict. It\u2019s a lot like designing a house -\rmaking the master closet bigger means the master bedroom gets smaller. It\u2019s all about\rfinding the right balance.\n  Getting past the syntax, the meat of the language will be the semantic processing, which\ris when meaning is assigned to the syntactical constructs. This is where you\u2019ll be spending\rthe vast bulk of design and implementation. It\u2019s a lot like the organs in your body \u2014 they are sight\runseen and we don\u2019t think about them unless they are going wrong. There won\u2019t be a lot of\rglory in the semantic work, but in it will be the whole point of the language.\n  Once through the semantic phase, the compiler does optimizations, and then code generation, collectively called the back end. These two passes are very challenging and complicated. Me, I love working with this stuff, and grumble that I \u2019ve got to spend time on other issues instead. But unless you really like it, and it takes a fairly unhinged programmer to delight in the arcana of such things, I recommend taking the common sense approach and use an existing back end,  ...\n    How best to implement it? I hope I can at least set you off in the right direction.\rThe first tool beginning compiler writers often reach for is regex. Regex is just the wrong\rtool for lexing and parsing. Rob Pike\r explains why\rreasonably well.\rI\u2019ll close that with the famous quote from Jamie Zawinski:\n  Some people, when confronted with a problem, think \r\u201cI know, I\u2019ll use regular expressions.\u201d Now they have two problems.\n  Somewhat more controversial, I wouldn \u2019t bother wasting time with lexer or parser generators and other so-called compiler compilers. They \u2019re a waste of time. Writing a lexer and parser is a tiny percentage of the job of writing a compiler. Using a generator will take up about as much time as writing one by hand, and it will marry you to the generator (which matters when porting the compiler to a new platform). Generators also have the unfortunate reputation of  ...\n  Now that I mentioned it, error messages are a big factor in the quality of implementation of\rthe language. It\u2019s what the user sees, after all. If you\u2019re tempted to put out error messages\rlike \u201cbad syntax\u201d, perhaps you should consider taking up a career as a chartered accountant\rinstead. Good error messages are surprisingly hard to write, and often you won\u2019t discover\rhow bad the error messages are until you work the tech support emails.\n    Print the first message and quit. This is of course the simplest approach, and works\rsurprisingly well. Most compilers\u2019 follow on messages are so bad that the practical programmer\rignores all but the first one anyway. The holy grail is to find all the actual errors in one\rcompile pass, leading to:\n  Guess at what the programmer intended, repair the syntax trees, and continue.\rThis is an ever-popular approach. I\u2019ve tried it\rindefatigably for decades, and it\u2019s just been a miserable failure. The compiler seems to always\rguess wrong, and subsequent messages with the \u201cfixed\u201d syntax trees are just ludicrously wrong.\n  The poisoning approach. This is much like how floating point NaNs are handled. Any operation with a NaN operand silently results in a NaN. Applying this to error recovery, and any constructs that have a leaf for which an error occurred is itself considered erroneous (but no additional error messages are emitted for it). Hence the compiler is able to detect multiple errors as long as the errors are in sections of code with no dependency between them. This  ...\n  What else does the user care about in the hidden part of the compiler? Speed. I hear it over\rand over \u2014 compiler speed matters a lot. In fact, compile speed is often the first thing I\rhear when I ask a company what tipped the balance for choosing D. The reality is, most\rcompilers are pigs. To blow people away with your language, show them that it compiles as\rfast as hitting the return key on the compile command.\n  Wanna know the secret of making your compiler fast? I mean screaming, blinding, lightning fast?\rSend me $$$ in an SASE and I\u2019ll tell you! Ok, ok, I\u2019ll set my naked greed aside and let you\rin on it.\n    Sounds too easy, right? Trite, even. But raise your hands if you routinely use a profiler.\rBe honest, everyone says they do but that profiler manual remains in its pristine shrink wrap.\rI\u2019m just astonished at the programmers who never use profilers. But it\u2019s great for me, as\ra competitive advantage that never ceases to pay dividends.\n    valgrind. I suspect valgrind has almost single-handedly saved C and C++ from oblivion. I\rcan\u2019t heap enough praise on this tool. It has saved my error-prone sorry ass untold numbers of\rfrustrating hours.\n  git and github. Not many tools are transformative, but these are. Not only do they provide\ran automated backup, but they enable collaborative work on the project by people all over the\rworld. They also provide a complete history of where and from whom every line of code came from,\rin case there\u2019s a legal issue.\n  Automated testing framework. Compilers are enormously complicated beasts. Without constant\rtesting of revisions, the project will reach a point where it cannot advance, as more bugs than\rimprovements will be added. Add to this a coverage analyzer, which will show if the test suite\ris exercising all the code or not.\n  Automated documentation generator. The D project of course built our own (Ddoc), and it too\rwas transformative. Before Ddoc, the documentation had only a random correlation with the code,\rand too often they had nothing to do with each other.\rAfter Ddoc, the two were brought in sync.\n  Bugzilla. This is an automated bug tracking tool. This was a great leap forward from my\rpathetic older scheme of emails and folders, a system that simply cannot scale. Programmers\rare far less tolerant of buggy compilers than they used to be, this has to be addressed\raggressively head on.\n    One semantic technique that is obvious in hindsight but it took Andrei Alexandrescu to point out to me is called \u2019lowering \u2019. It consists of, internally, rewriting more complex semantic constructs in terms of simpler ones. For example, while loops and foreach loops can be rewritten in terms of for loops. Then, the rest of the code only has to deal with for loops. This turned out to uncover a couple of latent bugs in how while loops were implemented,  ...\n  If it turns out that there are some special case rules in the language that prevent this\rrewriting, it might be a good idea to go back and revisit the language design.\n  Any time you can find commonality in the handling of semantic constructs, it\u2019s an opportunity\rto reduce implementation effort and bugs.\n    Rarely mentioned, but critical, is you\u2019ll need write a runtime library. This is a major project.\rIt\u2019ll serve as a demonstration of how the language features work, so it had better be good.\rSome critical things to get right:\n  I/O performance. Most programs spend a lot of time in I/O. Slow I/O will make the whole\rlanguage look bad. The benchmark is C stdio. If the language has elegant, lovely I/O APIs but\rruns at only half the speed of C I/O, then it just isn\u2019t going to be attractive.\n  Memory allocation. A high percentage of time in most programs is spent doing mundane\rmemory allocation. Get this wrong at your peril.\n  Transcendental functions. Ok, I lied. Nobody cares about the accuracy of transcendental functions, they only care about the speed of them. My proof comes from trying to port the D runtime library to different platforms, and discovering that the underlying C transcendental functions often fail the accuracy tests in the D library test suite. C library functions also often do a poor job handling the arcana of the IEEE floating point  ...\n  A common trap people fall into with standard libraries is filling them up with trivia.\rTrivia is sand clogging the gears and just dead weight that has to be carried around forever.\rMy general rule is if the explanation for what the function does is more lines than the\rimplementation code, then the function is likely trivia and should be booted out.\n    You \u2019ve done it, you \u2019ve got a great prototype of the new language. Now what? Next comes the hardest part. This is where most new languages fail. You \u2019ll be doing what every nascent rock band does \u2014play shopping malls, high school dances, dive bars, etc., slowly building up an audience. For languages, this means preparing presentations, articles, tutorials, and books on the language. Then, going to programmer meetings, conferences,  ...\n  There\u2019s one huge thing in your favor. With the global reach of the internet, there\u2019s an\rinstantly reachable global audience. Another favorable thing is that programmer meetings,\rconferences, etc., all are looking for great content. They love talks about new languages,\rnew programming ideas, etc. My experience with the audiences is they are friendly and\rwill give you lots of constructive feedback.\n  Of course, then you\u2019ll almost certainly be forced to reevaluate some cherished features of the\rlanguage and reengineer them.", "posttime": "2020-05-03 03:57:09", "tags": "\u7f16\u7a0b,programming language,\u7f16\u5199,truth,\u8bed\u8a00", "title": "\u5173\u4e8e\u7f16\u5199\u7f16\u7a0b\u8bed\u8a00\u7684\u8d64\u88f8\u88f8\u7684\u771f\u76f8", "title_en": "The Naked Truth About Writing a Programming Language", "transed": 1, "url": "https://www.digitalmars.com/articles/b90.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u7a0b", "language", "\u7f16\u5199", "truth", "\u8bed\u8a00"]}, {"category": "", "categoryclass": "", "imagename": "249446622459809052f700ba44b3d3ba.jpg", "infoid": 1000401, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u534e\u76db\u987f\u5dde\u5e03\u83b1\u6069\u3002-\u5728\u4ed6\u51e0\u5341\u5e74\u7684\u517b\u8702\u751f\u6daf\u4e2d\uff0c\u6cf0\u5fb7\u00b7\u9ea6\u514b\u798f\u5c14(Ted McFall)\u4ece\u672a\u89c1\u8fc7\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\n11\u6708\uff0c\u5f53\u4ed6\u628a\u5361\u8f66\u505c\u5728\u534e\u76db\u987f\u5dde\u5361\u65af\u7279\u9644\u8fd1\u68c0\u67e5\u4e00\u7fa4\u8702\u7bb1\u65f6\uff0c\u4ed6\u53ef\u4ee5\u4ece\u7a97\u6237\u770b\u5230\u5730\u4e0a\u4e00\u56e2\u7cdf\u7684\u871c\u8702\u8eab\u4f53\u3002\u5f53\u4ed6\u4ed4\u7ec6\u89c2\u5bdf\u65f6\uff0c\u4ed6\u770b\u5230\u8702\u5de2\u524d\u6709\u4e00\u5806\u6b7b\u53bb\u7684\u6210\u5458\uff0c\u91cc\u9762\u8fd8\u6709\u66f4\u591a\u7684\u5c60\u6740-\u6210\u5343\u4e0a\u4e07\u7684\u871c\u8702\u4ece\u8eab\u4f53\u4e0a\u6495\u4e0b\u4e86\u5934\uff0c\u6ca1\u6709\u7f6a\u72af\u7684\u8ff9\u8c61\u3002\n\u9ea6\u514b\u798f\u5c14\u8bf4\uff0c\u201c\u6211\u65e0\u6cd5\u7406\u89e3\u5230\u5e95\u662f\u4ec0\u4e48\u9020\u6210\u4e86\u8fd9\u6837\u7684\u540e\u679c\u3002\u201d\n\u76f4\u5230\u540e\u6765\uff0c\u4ed6\u624d\u5f00\u59cb\u6000\u7591\u51f6\u624b\u5c31\u662f\u4e00\u4e9b\u7814\u7a76\u4eba\u5458\u7b80\u5355\u5730\u79f0\u4e4b\u4e3a\u201c\u8c0b\u6740\u5927\u9ec4\u8702\u201d\u7684\u90a3\u4e2a\u4eba\u3002\n\u6709\u4e86\u53ef\u4ee5\u957f\u5230\u4e24\u82f1\u5bf8\u957f\u7684\u8702\u738b\uff0c\u4e9a\u6d32\u5de8\u578b\u9ec4\u8702\u53ef\u4ee5\u7528\u957f\u5f97\u50cf\u5c16\u523a\u7684\u9ca8\u9c7c\u9ccd\u90a3\u6837\u7684\u4e0b\u989a\uff0c\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u6d88\u706d\u871c\u8702\u8702\u5de2\uff0c\u65a9\u9996\u871c\u8702\uff0c\u5e26\u7740\u80f8\u7532\u98de\u8d70\uff0c\u5582\u517b\u5b83\u4eec\u7684\u5e7c\u5d3d\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u76ee\u6807\uff0c\u9ec4\u8702\u5f3a\u5927\u7684\u6bd2\u6db2\u548c\u6bd2\u523a-\u8db3\u591f\u523a\u7a7f\u4e00\u5957\u517b\u8702\u670d-\u6784\u6210\u4e86\u4e00\u79cd\u4ee4\u4eba\u75db\u82e6\u7684\u7ec4\u5408\uff0c\u53d7\u5bb3\u8005\u5c06\u5176\u6bd4\u4f5c\u6eda\u70eb\u7684\u91d1\u5c5e\u523a\u8fdb\u4ed6\u4eec\u7684\u76ae\u80a4\u3002\n\u5728\u65e5\u672c\uff0c\u9ec4\u8702\u6bcf\u5e74\u6740\u6b7b\u591a\u8fbe50\u4eba\u3002\u73b0\u5728\uff0c\u4ed6\u4eec\u7b2c\u4e00\u6b21\u62b5\u8fbe\u7f8e\u56fd\u3002\n\u9ea6\u514b\u798f\u5c14\u4ecd\u7136\u4e0d\u786e\u5b9a\u4e9a\u6d32\u5de8\u578b\u9ec4\u8702\u662f\u4e0d\u662f\u4ed6\u7684\u8702\u5de2\u88ab\u63a0\u593a\u7684\u7f6a\u9b41\u7978\u9996\u3002\u4f46\u5176\u4e2d\u4e24\u79cd\u6355\u98df\u6027\u6606\u866b\u662f\u53bb\u5e74\u79cb\u5929\u5728\u534e\u76db\u987f\u5dde\u897f\u5317\u89d2\u53d1\u73b0\u7684\uff0c\u5c31\u5728\u4ed6\u7684\u623f\u4ea7\u4ee5\u5317\u51e0\u82f1\u91cc\u5904-\u8fd9\u662f\u7f8e\u56fd\u9996\u6b21\u53d1\u73b0\u8fd9\u79cd\u6606\u866b\u3002\n\u81ea\u90a3\u4ee5\u540e\uff0c\u79d1\u5b66\u5bb6\u4eec\u5f00\u59cb\u4e86\u5bf9\u9ec4\u8702\u7684\u5168\u9762\u8ffd\u6355\uff0c\u4ed6\u4eec\u62c5\u5fc3\u5165\u4fb5\u8005\u53ef\u80fd\u4f1a\u5728\u7f8e\u56fd\u5927\u91cf\u6d88\u706d\u871c\u8702\uff0c\u5e76\u5efa\u7acb\u5982\u6b64\u6df1\u5165\u7684\u5b58\u5728\uff0c\u4ee5\u81f3\u4e8e\u53ef\u80fd\u4f1a\u5931\u53bb\u6839\u9664\u7684\u6240\u6709\u5e0c\u671b\u3002\n\u534e\u76db\u987f\u5dde\u519c\u4e1a\u90e8\u7684\u6606\u866b\u5b66\u5bb6\u514b\u91cc\u65af\u00b7\u9c81\u5c3c(Chris Looney)\u8bf4\uff0c\u201c\u8fd9\u662f\u6211\u4eec\u963b\u6b62\u5b83\u5efa\u7acb\u7684\u7a97\u53e3\u3002\u201d\u201c\u5982\u679c\u6211\u4eec\u5728\u672a\u6765\u51e0\u5e74\u505a\u4e0d\u5230\uff0c\u5f88\u53ef\u80fd\u4e5f\u505a\u4e0d\u5230.\u201d\n12\u6708\u521d\u4e00\u4e2a\u5bd2\u51b7\u7684\u65e9\u6668\uff0c\u5728\u9ea6\u514b\u798f\u5c14\u623f\u4ea7\u4ee5\u53172.5\u82f1\u91cc\u5904\uff0c\u6770\u592b\u00b7\u79d1\u5185\u5229\u65af(Jeff Kornelis)\u5e26\u7740\u4ed6\u7684\u6df7\u8840\u72d7\u8e0f\u4e0a\u4e86\u4ed6\u5bb6\u7684\u524d\u5eca\u3002\u4ed6\u4f4e\u5934\u770b\u7740\u4e00\u5e45\u523a\u8033\u7684\u666f\u8c61\uff1a\u201c\u8fd9\u662f\u6211\u89c1\u8fc7\u7684\u6700\u5927\u7684\u9ec4\u8702\u3002\u201d\n\u8fd9\u53ea\u6606\u866b\u6b7b\u4e86\uff0c\u79d1\u5185\u5229\u65af\u5728\u68c0\u67e5\u8fc7\u5b83\u4e4b\u540e\uff0c\u6709\u4e00\u79cd\u9884\u611f\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u53ea\u4e9a\u6d32\u5de8\u578b\u5927\u9ec4\u8702\u3002\u8003\u8651\u5230\u4ed6\u5728\u4e16\u754c\u4e0a\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6ca1\u6709\u591a\u5927\u610f\u4e49\uff0c\u4f46\u4ed6\u770b\u8fc7YouTube\u540d\u4eba\u90ca\u72fc\u5f7c\u5f97\u68ee(Coyote Peterson)\u88ab\u5176\u4e2d\u4e00\u53ea\u5927\u9ec4\u8702\u72e0\u72e0\u5730\u53ee\u4e86\u4e00\u53e3\u7684\u4e00\u96c6\u3002\n\u9664\u4e86\u5b83\u7684\u5927\u5c0f\uff0c\u5927\u9ec4\u8702\u8fd8\u6709\u4e00\u4e2a\u72ec\u7279\u7684\u5916\u89c2\uff0c\u4e00\u5f20\u5361\u901a\u822c\u7684\u51f6\u731b\u7684\u8138\uff0c\u6709\u7740\u8718\u86db\u4fa0\u90a3\u6837\u7684\u6cea\u773c\uff0c\u50cf\u8001\u864e\u4e00\u6837\u5ef6\u4f38\u5230\u8eab\u4f53\u4e0b\u9762\u7684\u6a59\u8272\u548c\u9ed1\u8272\u6761\u7eb9\uff0c\u4ee5\u53ca\u50cf\u5c0f\u873b\u8713\u4e00\u6837\u5bbd\u5927\u800c\u7ea4\u7ec6\u7684\u7fc5\u8180\u3002\n\u79d1\u5185\u5229\u65af\u8054\u7cfb\u4e86\u56fd\u5bb6\uff0c\u540e\u8005\u51fa\u6765\u786e\u8ba4\u8fd9\u786e\u5b9e\u662f\u4e00\u53ea\u4e9a\u6d32\u5de8\u578b\u5927\u9ec4\u8702\u3002\u4e0d\u4e45\u4e4b\u540e\uff0c\u4ed6\u4eec\u5f97\u77e5\u8be5\u5730\u533a\u7684\u4e00\u540d\u5f53\u5730\u517b\u8702\u4eba\u4e5f\u53d1\u73b0\u4e86\u5176\u4e2d\u4e00\u53ea\u9ec4\u8702\u3002\n\u9c81\u5c3c\u535a\u58eb\u8bf4\uff0c\u5f88\u660e\u663e\uff0c\u8be5\u5dde\u9762\u4e34\u7740\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u4f46\u7531\u4e8e\u624b\u4e2d\u53ea\u6709\u4e24\u53ea\u6606\u866b\uff0c\u800c\u4e14\u51ac\u5929\u5373\u5c06\u5230\u6765\uff0c\u51e0\u4e4e\u4e0d\u53ef\u80fd\u786e\u5b9a\u5927\u9ec4\u8702\u5df2\u7ecf\u5728\u5bb6\u91cc\u8d5a\u4e86\u591a\u5c11\u94b1\u3002\n\u6574\u4e2a\u51ac\u5929\uff0c\u5dde\u519c\u4e1a\u751f\u7269\u5b66\u5bb6\u548c\u5f53\u5730\u517b\u8702\u4eba\u5f00\u59cb\u5de5\u4f5c\uff0c\u4e3a\u5373\u5c06\u5230\u6765\u7684\u5b63\u8282\u505a\u51c6\u5907\u3002\u5e2e\u52a9\u7ec4\u7ec7\u540c\u9f84\u4eba\u5bf9\u6297\u9ec4\u8702\u7684\u517b\u8702\u4eba\u9732\u4e1d\u00b7\u4e39\u5c3c\u5c14\u68ee(Ruthie Danielsen)\u5728\u5979\u7684\u6c7d\u8f66\u5f15\u64ce\u76d6\u4e0a\u5c55\u5f00\u4e86\u4e00\u5f20\u5730\u56fe\uff0c\u6307\u51fa\u4e86Whatcom\u53bf\u5404\u5730\u517b\u8702\u4eba\u653e\u7f6e\u9677\u9631\u7684\u5730\u65b9\u3002\n\u4e39\u5c3c\u5c14\u68ee\u8bf4\uff0c\u201c\u5927\u591a\u6570\u4eba\u90fd\u5bb3\u6015\u88ab\u5b83\u4eec\u53ee\u5230\u3002\u201d\u201c\u6211\u4eec\u5bb3\u6015\u4ed6\u4eec\u4f1a\u5f7b\u5e95\u6467\u6bc1\u6211\u4eec\u7684\u8702\u5de2\u3002\u201d\n\u5728\u52a0\u62ff\u5927\u8fb9\u5883\u53e6\u4e00\u8fb9\u53d1\u73b0\u4e86\u4e00\u4e9b\u4e9a\u6d32\u5de8\u578b\u5927\u9ec4\u8702\uff0c\u8fd9\u589e\u52a0\u4e86\u4e0d\u786e\u5b9a\u6027\u548c\u795e\u79d8\u6027\u3002\n\u53bb\u5e7411\u6708\uff0c\u5728\u4e0d\u5217\u98a0\u54e5\u4f26\u6bd4\u4e9a\u7701\u7684\u6000\u7279\u7f57\u514b(White Rock)\u53d1\u73b0\u4e86\u4e00\u53ea\u9ec4\u8702\uff0c\u8ddd\u79bb\u534e\u76db\u987f\u5dde\u7684\u53d1\u73b0\u53ef\u80fd\u670910\u82f1\u91cc\u8fdc-\u5bf9\u4e8e\u9ec4\u8702\u6765\u8bf4\uff0c\u5f88\u53ef\u80fd\u592a\u8fdc\u4e86\uff0c\u4e0d\u53ef\u80fd\u662f\u540c\u4e00\u6b96\u6c11\u5730\u7684\u4e00\u90e8\u5206\u3002\u751a\u81f3\u5728\u66f4\u65e9\u7684\u65f6\u5019\uff0c\u5728\u6e29\u54e5\u534e\u5c9b\u4e0a\u53d1\u73b0\u4e86\u4e00\u4e2a\u8702\u5de2\uff0c\u6a2a\u8de8\u4e00\u6761\u6d77\u5ce1\uff0c\u5bf9\u4e8e\u4e00\u53ea\u5927\u9ec4\u8702\u6765\u8bf4\uff0c\u53ef\u80fd\u592a\u5bbd\u4e86\uff0c\u4e0d\u53ef\u80fd\u4ece\u5927\u9646\u7a7f\u8d8a\u8fc7\u6765\u3002\n\u5de5\u4f5c\u4eba\u5458\u80fd\u591f\u8ffd\u8e2a\u5230\u6e29\u54e5\u534e\u5c9b\u4e0a\u7684\u6bcd\u8230\u3002\u5eb7\u62c9\u5fb7\u00b7\u8d1d\u9c81\u8d1d\u662f\u7eb3\u5948\u83ab\u9547\u7684\u517b\u8702\u4eba\u548c\u6606\u866b\u5b66\u5bb6\uff0c\u4ed6\u88ab\u6307\u6d3e\u53bb\u6d88\u706d\u5b83\u3002\n\u4ed6\u5728\u665a\u4e0a\u51fa\u53d1\uff0c\u90a3\u65f6\u9ec4\u8702\u6b63\u5728\u5b83\u4eec\u7684\u5de2\u7a74\u91cc\u3002\u4ed6\u7a7f\u4e0a\u77ed\u88e4\u548c\u539a\u8fd0\u52a8\u88e4\uff0c\u7136\u540e\u7a7f\u4e0a\u8702\u670d\u3002\u4ed6\u5728\u811a\u8e1d\u548c\u624b\u8155\u4e0a\u6234\u4e0a\u4e86\u51ef\u592b\u62c9\u80cc\u5e26\u3002\n\u4f46\u5f53\u4ed6\u8d70\u8fd1\u8702\u5de2\u65f6\uff0c\u4ed6\u8bf4\uff0c\u5237\u5b50\u7684\u6c99\u6c99\u58f0\u548c\u624b\u7535\u7b52\u7684\u5149\u8292\u5524\u9192\u4e86\u8702\u7fa4\u3002\u8fd8\u6ca1\u6765\u5f97\u53ca\u5f80\u5de2\u91cc\u6d47\u4e8c\u6c27\u5316\u78b3\uff0c\u4ed6\u5c31\u611f\u89c9\u5230\u817f\u90e8\u7b2c\u4e00\u6b21\u88ab\u707c\u70ed\u7684\u523a\u4f24--\u7a7f\u8fc7\u8702\u670d\u548c\u5e95\u5c42\u7684\u8fd0\u52a8\u88e4\u3002\n\u4ed6\u8bf4\uff1a\u201c\u8fd9\u5c31\u50cf\u662f\u628a\u6eda\u70eb\u7684\u56fe\u9489\u523a\u8fdb\u4e86\u6211\u7684\u8089\u91cc\u3002\u201d\u4ed6\u6700\u7ec8\u88ab\u8707\u4e86\u81f3\u5c11\u4e03\u6b21\uff0c\u5176\u4e2d\u4e00\u4e9b\u53ee\u54ac\u6d41\u4e86\u8840\u3002\n\u65e5\u672c\u4eac\u90fd\u5c1a\u7ea6\u5927\u5b66\u7684\u7814\u7a76\u5458\u9ad8\u6865\u4fca\u4e00(Jun-ichi Takahashi)\u8bf4\uff0c\u8fd9\u4e2a\u7269\u79cd\u5728\u90a3\u91cc\u8d62\u5f97\u4e86\u201c\u8c0b\u6740\u5927\u9ec4\u8702\u201d\u7684\u7ef0\u53f7\uff0c\u56e0\u4e3a\u5b83\u5484\u5484\u903c\u4eba", "note_en": "BLAINE, Wash. \u2014 In his decades of beekeeping, Ted McFall had never seen anything like it.\n As he pulled his truck up to check on a group of hives near Custer, Wash., in November, he could spot from the window a mess of bee carcasses on the ground. As he looked closer, he saw a pile of dead members of the colony in front of a hive and more carnage inside \u2014 thousands and thousands of bees with their heads torn from their bodies and no sign of a culprit.\n \u201cI couldn\u2019t wrap my head around what could have done that,\u201d Mr. McFall said.\n Only later did he come to suspect that the killer was what some researchers simply call the \u201cmurder hornet.\u201d\n With queens that can grow to two inches long, Asian giant hornets can use mandibles shaped like spiked shark fins to wipe out a honeybee hive in a matter of hours, decapitating the bees and flying away with the thoraxes to feed their young. For larger targets, the hornet\u2019s potent venom and stinger \u2014 long enough to puncture a beekeeping suit \u2014 make for an excruciating combination that victims have likened to hot metal driving into their skin.\n In Japan, the hornets kill up to 50 people a year. Now, for the first time, they have arrived in the United States.\n Mr. McFall still is not certain that  Asian giant hornets were responsible for the plunder of his hive. But two of the predatory insects were discovered last fall in the northwest corner of Washington State, a few miles north of his property \u2014 the first sightings in the United States.\n Scientists have since embarked on a full-scale hunt for the hornets, worried that the invaders could decimate bee populations in the United States and establish such a deep presence that all hope for eradication could be lost.\n \u201cThis is our window to keep it from establishing,\u201d said Chris Looney, an entomologist at the Washington State Department of Agriculture. \u201cIf we can\u2019t do it in the next couple of years, it probably can\u2019t be done.\u201d\n  On a cold morning in early December, two and a half miles to the north of Mr. McFall\u2019s property, Jeff Kornelis stepped on his front porch with his terrier-mix dog. He looked down to a jarring sight: \u201cIt was the biggest hornet I\u2019d ever seen.\u201d\n The insect was dead, and after inspecting it, Mr. Kornelis had a hunch that it might be an Asian giant hornet. It did not make much sense, given his location in the world, but he had seen an episode of the YouTube personality Coyote Peterson  getting a brutal sting from one of the hornets.\n  Beyond its size, the hornet has a distinctive look, with a cartoonishly fierce face featuring teardrop eyes like Spider-Man, orange and black stripes that extend down its body like a tiger, and broad, wispy wings like a small dragonfly.\n Mr. Kornelis contacted the state, which came out to confirm that it was indeed an Asian giant hornet. Soon after, they learned that a local beekeeper in the area had also found one of the hornets.\n Dr. Looney said it was immediately clear that the state faced a serious problem, but with only two insects in hand and winter coming on, it was nearly impossible to determine how much the hornet had already made itself at home.\n Over the winter, state agriculture biologists and local beekeepers got to work, preparing for the coming season. Ruthie Danielsen, a beekeeper who has helped organize her peers to combat the hornet, unfurled a map across the hood of her vehicle, noting the places across Whatcom County where beekeepers have placed traps.\n \u201cMost people are scared to get stung by them,\u201d Ms. Danielsen said. \u201cWe\u2019re scared that they are going to totally destroy our hives.\u201d\n  Adding to the uncertainty \u2014 and mystery \u2014 were some other discoveries of the Asian giant hornet across the border in Canada.\n In November, a single hornet was seen in White Rock, British Columbia, perhaps 10 miles away from the discoveries in Washington State \u2014 likely too far for the hornets to be part of the same colony. Even earlier, there had been a hive discovered on Vancouver Island, across a strait that probably was too wide for a hornet to have crossed from the mainland.\n Crews were able to track down the hive on Vancouver Island. Conrad B\u00e9rub\u00e9, a beekeeper and entomologist in the town of Nanaimo, was assigned to exterminate it.\n He set out at night, when the hornets would be in their nest. He put on shorts and thick sweatpants, then his bee suit. He donned Kevlar braces on his ankles and wrists.\n But as he approached the hive, he said, the rustling of the brush and the shine of his flashlight awakened the colony. Before he had a chance to douse the nest with carbon dioxide, he felt the first searing stabs in his leg \u2014 through the bee suit and underlying sweatpants.\n \u201cIt was like having red-hot thumbtacks being driven into my flesh,\u201d he said. He ended up getting stung at least seven times, some of the stings drawing blood.\n Jun-ichi Takahashi, a researcher at Kyoto Sangyo University in Japan, said the species had earned the \u201cmurder hornet\u201d nickname there because its aggressive group attacks can expose victims to doses of toxic venom equivalent to that of a venomous snake; a series of stings can be fatal.\n The night he got stung, Mr. B\u00e9rub\u00e9 still managed to eliminate the nest and collect samples, but the next day, his legs were aching, as if he had the flu. Of the thousands of times he has been stung in his lifetime of work, he said, the Asian giant hornet stings were the most painful.\n  After collecting the hornet in the Blaine area, state officials took off part of a leg and shipped it to an expert in Japan. A sample from the Nanaimo nest was sent as well.\n A genetic examination, concluded over the past few weeks, determined that the nest in Nanaimo and the hornet near Blaine were not connected, said Telissa Wilson, a state pest biologist, meaning there had probably been at least two different introductions in the region.\n Dr. Looney went out on a recent day in Blaine, carrying clear jugs that had been made into makeshift traps; typical wasp and bee traps available for purchase have holes too small for the Asian giant hornet. He filled some with orange juice mixed with rice wine, others had kefir mixed with water, and a third batch was filled with some experimental lures \u2014 all with the hope of catching a queen emerging to look for a place to build a nest.\n In a region with extensive wooded habitats for hornets to establish homes, the task of finding and eliminating them is daunting. How to find dens that may be hidden underground? And where to look, given that one of the queens can fly many miles a day, at speeds of up to 20 miles per hour?\n The miles of wooded landscapes and mild, wet climate of western Washington State make it an ideal location for the hornets to spread.\n In the coming months, Dr. Looney said, he and others plan to place hundreds more traps that could catch worker hornets that would start becoming active over the summer. State officials have mapped out the plan in a grid, starting in Blaine and moving outward.\n  The buzz of activity inside a nest of Asian giant hornets can keep the inside temperature up to 86 degrees, so the trackers are also exploring using thermal imaging to examine the forest floors. Later, they may also try other advanced tools that could track the signature hum the hornets make in flight.\n If a hornet does get caught in a trap, Dr. Looney said, there are plans to possibly use radio-frequency identification tags to monitor where it goes \u2014 or simply attach a small streamer and then follow the hornet as it returns to its nest.\n While most bees would be unable to fly with a disruptive marker attached, that is not the case with the Asian giant hornet. It is big enough to handle the extra load.", "posttime": "2020-05-03 03:56:49", "tags": "\u8c0b\u6740,murder,\u9ec4\u8702,hornet", "title": "\u4e9a\u6d32\u8c0b\u6740\u5927\u9ec4\u8702\u5df2\u7ecf\u62b5\u8fbe\u5317\u7f8e", "title_en": "Asian Murder Hornets Have Arrived in North America", "transed": 1, "url": "https://www.nytimes.com/2020/05/02/us/asian-giant-hornet-washington.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u8c0b\u6740", "murder", "\u9ec4\u8702", "hornet"]}, {"category": "", "categoryclass": "", "imagename": "24e61a8175af932d24d6bfab5f86fc71.png", "infoid": 1000400, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e5f\u8bb8\u6709\u4e00\u5929\u8fd9\u4f1a\u662f\u4e2a\u66f4\u597d\u7684\u4e3b\u610f\uff0c\u4f46\u90a3\u4e00\u5929\u8fd8\u6ca1\u6709\u5230\u6765\u3002\u811a\u8e1d\u624b\u956f\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u4e00\u6837\uff0c\u5bb9\u6613\u51fa\u73b0\u610f\u60f3\u4e0d\u5230\u7684\u6545\u969c\u3002\u5047\u9634\u6027--\u63d0\u9192\u5047\u91ca\u8005\u4e0d\u5728\u5bb6--\u4ece\u957f\u8fdc\u6765\u770b\u5e76\u4e0d\u6bd4\u5047\u9633\u6027\u597d\u591a\u5c11\uff0c\u5c3d\u7ba1\u524d\u8005\u662f\u552f\u4e00\u80fd\u5265\u593a\u67d0\u4eba\u81ea\u7531\u7684\u4eba\u3002\n\u811a\u8e1d\u624b\u956f\u7684\u8d39\u7528\u7531\u5047\u91ca\u72af\u627f\u62c5\u3002\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u7a0d\u5fae\u4fbf\u5b9c\u4e00\u4e9b\uff0c\u2026\u3002\u4f46\u524d\u63d0\u662f\u4f60\u4e0d\u8003\u8651\u667a\u80fd\u624b\u673a\u6216\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u7684\u6210\u672c\u3002\u667a\u80fd\u624b\u673a\u5bf9\u4e8e\u5047\u91ca\u72af\u6765\u8bf4\u5e76\u4e0d\u5bb9\u6613\u83b7\u5f97\u3002\u8865\u8d34\u624b\u673a\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u6708\u8d39\u6240\u9700\u7684\u5de5\u4f5c\u4e5f\u4e0d\u591a\u3002\n\u90a3\u4e9b\u6709\u5e78\u4e70\u5230\u667a\u80fd\u624b\u673a\u7684\u4eba\u53d1\u73b0\uff0c\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u548c\u5b83\u7684\u524d\u8eab\u4e00\u6837\u5bb9\u6613\u51fa\u9519\u3002\n\u5728\u83b1\u62c9\u51fa\u72f1\u56de\u5230\u4f50\u6cbb\u4e9a\u5dde\u5bb6\u4e2d\u7684\u90a3\u5929\uff0c\u5979\u88ab\u544a\u77e5\u9700\u8981\u8d2d\u4e70\u4e00\u90e8\u667a\u80fd\u624b\u673a-\u5bf9\u4e8e\u4e00\u4e2a\u521a\u521a\u670d\u5211\u7ed3\u675f\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u65e0\u5173\u7d27\u8981\u7684\u4efb\u52a1\uff0c\u4f46\u83b1\u62c9\u5f88\u5e78\u8fd0\u6709\u4e00\u4e2a\u670b\u53cb\u53ef\u4ee5\u7ed9\u5979\u4e70\u4e00\u90e8\u3002\u5979\u8bf4\uff0c\u51e0\u5929\u540e\uff0c\u5979\u5728\u5bb6\u7761\u89c9\u65f6\uff0c\u6839\u636e\u5979\u7684\u91ca\u653e\u6761\u6b3e\uff0c\u5979\u88ab\u8981\u6c42\u5b89\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\u51fa\u4eba\u610f\u6599\u5730\u54cd\u8d77\uff0c\u9ad8\u97f3\u7684\u8b66\u544a\u8b66\u62a5\u54cd\u8d77\uff0c\u56e0\u4e3a\u5b83\u5411\u5979\u7684\u5047\u91ca\u5b98\u53d1\u9001\u4e86\u4e00\u4efd\u901a\u77e5\uff0c\u544a\u8bc9.\u3002\n\u60ca\u614c\u5931\u63aa\u7684\u83b1\u62c9\u62cd\u4e86\u4e00\u5f20\u81ea\u5df1\u7684\u7167\u7247\uff0c\u628a\u81ea\u5df1\u7684\u4f4d\u7f6e\u53d1\u7ed9\u4ed6\uff0c\u8bd5\u56fe\u7ea0\u6b63\u8fd9\u6b3e\u5e94\u7528\u7684\u9519\u8bef\u3002\u5979\u8bf4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u65e0\u60c5\u5730\u91cd\u590d\uff0c\u6bcf\u9694\u534a\u4e2a\u5c0f\u65f6\u5c31\u4f1a\u5728\u591c\u95f4\u53eb\u9192\u5979\u3002\u201c\u6211\u4f1a\u54ed\u7740\u9192\u6765\uff0c\u201d\u5979\u8bf4\u3002\u6709\u65f6\uff0c\u5f53\u5979\u8bd5\u56fe\u9a8c\u8bc1\u81ea\u5df1\u7684\u4f4d\u7f6e\u6216\u7b7e\u5230\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f1a\u544a\u8bc9\u5979\uff0c\u5b83\u65e0\u6cd5\u8bc6\u522b\u5979\u7684\u58f0\u97f3\u3002\u201c\u6211\u4f1a\u89c9\u5f97\u5f88\u7d2f\u7684\uff0c\u6211\u60f3\u5982\u679c\u6211\u4e0d\u56de\u7b54\uff0c\u6211\u4f1a\u56de\u5230\u76d1\u72f1\u7684\u3002\u201d\u5f88\u5feb\uff0c\u5979\u8bf4\uff0c\u5979\u201c\u4e5e\u6c42\u6211\u7684\u5047\u91ca\u5b98\u2026\u2026\u201d\n\u201c\u5b88\u62a4\u8005\u201d\u662f\u4e00\u6b3e\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u4e9b\u5047\u91ca\u72af\u8981\u6c42\u6062\u590d\u5230\u4ee5\u524d\u7248\u672c\u7684\u5047\u91ca\u72af\u76d1\u63a7\u529f\u80fd\uff1a\u811a\u8e1d\u624b\u956f\u3002\u6839\u636e\u201c\u536b\u62a5\u201d\u7684\u6570\u636e\uff0c\u201c\u536b\u62a5\u201d\u62e5\u6709\u8fd15\u4e07\u540d\u7528\u6237\uff0c\u800c\u83b1\u62c9\u5e76\u4e0d\u662f\u552f\u4e00\u6709\u53ef\u80fd\u88ab\u8fd9\u6b3e\u51fa\u6545\u969c\u7684\u5e94\u7528\u7a0b\u5e8f\u4fb5\u72af\u56de\u76d1\u72f1\u7684\u5047\u91ca\u72af\u3002Gizmodo\u91c7\u8bbf\u7684\u5176\u4ed6\u5047\u91ca\u72af\u4e5f\u62a5\u544a\u4e86\u540c\u6837\u7684\u95ee\u9898\u3002\u4ed6\u4eec\u8bf4\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u51e0\u4e4e\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u51c6\u786e\u5730\u62a5\u544a\u2026\u2026\u3002\n\u4e0d\u51fa\u6240\u6599\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u8005\u662fTelmate\uff0c\u4e5f\u5c31\u662f\u8fd0\u8425Global Tele*Link\u7684\u540c\u4e00\u5bb6\u516c\u53f8\u3002Global Tele*Link\u7684\u4e1a\u52a1\u662f\u5411\u56da\u72af\u51fa\u552e\u901a\u5f80\u5916\u90e8\u4e16\u754c\u7684\u901a\u9053\u3002\u5b83\u8fd0\u8425\u7740\u8bb8\u591a\u76d1\u72f1\u901a\u4fe1\u7f51\u7edc\uff0c\u8fd9\u4e9b\u7f51\u7edc\u4ee5\u5bf9\u4ece\u76d1\u72f1\u6253\u6765\u7684\u7535\u8bdd\u6bcf\u5206\u949f\u6536\u53d6\u8fc7\u9ad8\u7684\u8d39\u7528\u800c\u95fb\u540d\uff0c\u5e76\u63a7\u5236\u7740\u56da\u72af\u53c2\u4e0e\u7684\u51e0\u4e4e\u6240\u6709\u5176\u4ed6\u6570\u5b57\u4e92\u52a8\u7684\u5a31\u4e50\u8bbe\u5907(\u5982\u5e73\u677f\u7535\u8111\u548cMP3\u64ad\u653e\u5668)\u3002\u5b83\u4f1a\u91ca\u653e\u4e00\u4e2a\u7f16\u7801\u8349\u7387\u7684..\u3002\n\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u5177\u6709\u4fb5\u5165\u6027--\u751a\u81f3\u6bd4\u5047\u91ca\u5b98\u672a\u7ecf\u5ba3\u5e03\u7684\u5bb6\u8bbf\u66f4\u5177\u4fb5\u5165\u6027\u3002\u8fd9\u6b3e\u5e94\u7528\u505a\u4e86\u60e9\u6212\u4eba\u5458\u5728\u8eab\u4f53\u4e0a\u505a\u4e0d\u5230\u7684\u4e8b\u60c5\uff1a\u8981\u6c42\u6bcf\u5929\u51e0\u5341\u6b21\u7b7e\u5230\u3002\n\u201cGuardian\u8ba9\u6211\u4e22\u6389\u4e86\u5de5\u4f5c\uff0c\u201d\u53e6\u4e00\u4e2a\u88ab\u76d1\u7981\u4e86\u5341\u591a\u5e74\u7684\u4eba\u8bf4\uff0c\u4ed6\u4f7f\u7528\u4e86\u8fd9\u6b3e\u5e94\u7528\uff0c\u5e76\u8bb0\u5f97\u5b83\u8981\u6c42\u4ed6\u6bcf\u5c0f\u65f6\u7b7e\u5230\u8d85\u8fc710\u6b21\u3002\u201c\u665a\u4e0a\u6211\u7761\u4e0d\u7740\u89c9\uff0c\u7136\u540e\u5728\u5de5\u4f5c\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u4e00\u76f4\u638f\u51fa\u624b\u673a\u3002\u201d\u4ed6\u8bf4\uff0c\u6709\u4e00\u534a\u7684\u65f6\u95f4\uff0c\u5b83\u65e0\u6cd5\u51c6\u786e\u8bc6\u522b\u4ed6\u7684\u8138\u6216\u58f0\u97f3\u3002\n\u536b\u62a5\u8981\u6c42\u66f4\u591a\uff0c\u4f46\u505a\u5f97\u66f4\u5c11\u3002\u5f53\u4e0e\u67d0\u4eba\u9762\u5bf9\u9762\u4f1a\u9762\u65f6\uff0c\u90ae\u5c40\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6838\u5b9e\u4ed6\u4eec\u7684\u8eab\u4efd\u3002\u53d6\u4ee3\u4ed6\u4eec\u4f4d\u7f6e\u7684\u5e94\u7528\u7a0b\u5e8f\u663e\u7136\u65e0\u6cd5\u53ef\u9760\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5728\u8fd9\u9879\u7b80\u5355\u7684\u4efb\u52a1\u4e0a\uff0c\u5b83\u65e5\u590d\u4e00\u65e5\u5730\u5728\u4e00\u5c0f\u65f6\u5185\u591a\u6b21\u5931\u8d25\u3002\u4e00\u6b3e\u65e0\u6cd5\u5e73\u8861\u8eab\u4efd\u8bc1\u8d26\u7c3f\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u5e2e\u52a9\u4efb\u4f55\u4eba\u5728\u507f\u8fd8\u4e86\u6b20\u793e\u4f1a\u7684\u503a\u52a1\u540e\u6062\u590d\u6b63\u5e38\u751f\u6d3b\u3002\n\u5feb\u901f\u7684\u6210\u672c\u6548\u76ca\u5206\u6790\u5f88\u5927\u7a0b\u5ea6\u4e0a\u7ad9\u5728\u4e86\u6210\u672c\u7684\u4e00\u8fb9\u3002\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u6708\u8d39\u4e3a90\u7f8e\u5143\uff0c\u800c\u4e14\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5b83\u6240\u505a\u7684\u5c31\u662f\u8ba9\u987a\u4ece\u7684\u5047\u91ca\u72af\u9762\u4e34\u518d\u6b21\u5165\u72f1\u7684\u98ce\u9669\u3002\u5373\u4f7f\u5b83\u5de5\u4f5c\u5f97\u6709\u70b9\u6b63\u5e38\uff0c\u5b83\u4e5f\u662f\u4e2a\u95ee\u9898\u3002\n\u6b63\u5982\u6211\u4eec\u5728\u8bc4\u8bba\u4e2d\u53d1\u73b0\u7684\u90a3\u6837\uff0cGuardian\u6bcf\u5206\u949f\u90fd\u4f1a\u5411Telmate\u7684\u670d\u52a1\u5668\u7b7e\u5230\uff0c\u5982\u679c\u624b\u673a\u5904\u4e8e\u7761\u7720\u72b6\u6001\uff0c\u5b83\u4f1a\u5524\u9192\u624b\u673a\uff0c\u5e76\u5ffd\u7565\u64cd\u4f5c\u7cfb\u7edf\u4f18\u5316\u7535\u6c60\u7684\u8bf7\u6c42\u3002\u8003\u8651\u5230Guardian\u7684\u7528\u9014\uff0c\u53ef\u4ee5\u9884\u89c1\u7684\u662f\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u7528\u6237\u6388\u4e88\u5b83\u5bf9\u8bbe\u5907\u4e0a\u4e00\u4e9b\u6f5c\u5728\u4fb5\u72af\u9690\u79c1\u7684\u4f20\u611f\u5668\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5305\u62ecWiFi\u3001\u84dd\u7259\u3001\u97f3\u9891\u8bbe\u7f6e\u548c\u6444\u50cf\u5934\u8bbf\u95ee\u3002\n\u4e00\u6574\u5929\uff0c\u6bcf\u5929\u7684\u76d1\u89c6\u5047\u91ca\u72af\u90fd\u9700\u8981\u652f\u4ed8\u8d39\u7528\u3002\u5373\u4f7f\u4ed6\u4eec\u9075\u5b88\u4e86\u89c4\u5219\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u4e5f\u4f1a\u8bf4\u4ed6\u4eec\u4e0d\u662f\u3002\u4ee3\u7801\u4e2d\u8fd8\u5305\u62ec\u7528\u4e8e\u79d8\u5bc6\u5f55\u97f3\u7684\u6302\u94a9--\u9690\u85cf\u8fdb\u5165\u8bbe\u5907\u7684\u9ea6\u514b\u98ce\uff0c\u53ef\u4ee5\u5728\u5f85\u673a\u6216\u7761\u7720\u6a21\u5f0f\u4e0b\u89e6\u53d1\u3002\u5f53\u5e94\u7528\u7a0b\u5e8f\u6bcf\u969460\u79d2\u7ed9\u5bb6\u91cc\u6253\u4e00\u6b21\u7535\u8bdd\u65f6\uff0c\u7761\u7720\u6a21\u5f0f\u5e76\u4e0d\u610f\u5473\u7740\u4ec0\u4e48\u3002\n\u5047\u91ca\u56da\u72af\u7684\u9690\u79c1\u6743\u671f\u671b\u503c\u5f88\u4f4e\u3002\u4f46\u5b83\u5e76\u4e0d\u662f\u4e0d\u5b58\u5728\u7684\u3002\u8fd9\u6b3e\u6602\u8d35\u7684\u5e94\u7528\u7a0b\u5e8f\u79fb\u9664\u4e86\u5269\u4e0b\u7684\u6240\u6709\u5185\u5bb9\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4fb5\u5165\u5f0f\u7b7e\u5230", "note_en": "Maybe it will be a better idea someday, but that day isn&#39;t here yet. Ankle bracelets are prone to unexpected failure, just like any other electronic device. False negatives -- alerts saying a parolee isn&#39;t at home -- are no better than false positives in the long run, although the former is the only one that can take away someone&#39;s freedom.\n The costs of ankle bracelets are borne by the parolee. Smartphone apps may be slightly cheaper\u2026 but only if you don&#39;t factor in the cost of a smartphone or the app itself. Smartphones aren&#39;t easy for parolees to obtain. Neither are the jobs needed to subsidize both the phone and the app&#39;s monthly charge.\n Those lucky enough to secure a smartphone are discovering the new solution  is just as prone to error as its predecessor.\n On the day Layla got out of prison and back to her home in Georgia, she was told she would need to purchase a smartphone \u2014not an insignificant task for someone who \u2019d just completed a sentence, but Layla was lucky to have a friend who could buy one for her. She says she was at home in bed a few days later when the app she had been mandated to install under the terms of her release went off unexpectedly, the high-pitched warning alarm blaring as it sent a notification to her parole officers telling  ...\n Panicked, Layla took a picture of herself and sent him her location, trying to correct the app \u2019s mistake. The process would repeat relentlessly, she says, waking her up every half hour during the night. \u201cI \u2019d wake up crying, \u201dshe says. Sometimes, when she tried to authenticate her location or check in the app would tell her it didn \u2019t recognize her voice. \u201cI \u2019d feel so tired, and I thought if I didn \u2019t answer, I was going to go back to prison. \u201dSoon, she says, she was \u201cbegging my parole officer  ...\n Guardian is the app that&#39;s so unable to do its job properly some parolees are asking to be rolled back to the previous version of parolee monitoring: ankle bracelets. Guardian has almost 50,000 &#34;users,&#34; according to its data, and Layla isn&#39;t the only parolee in danger of being violated back into prison by the malfunctioning app. Other parolees spoken to by Gizmodo are reporting the same issues. They say the app is almost &#34;unusable&#34; due to its inability to accurately report  ...\n Unsurprisingly, the app is owned by Telmate, the same company that operates Global Tel*Link. Global Tel*Link is in the business of selling prisoners access to the outside world. It runs a number of prison communication networks -- ones known for  charging exorbitant per-minute fees for phone calls originating from prisons, as well as controlling  the entertainment devices(like tablets and mp3 players) of nearly every other digital interaction engaged in by inmates. That it would release a sloppily-coded  ...\n The app is intrusive -- even more intrusive than unannounced in-home visits by parole officers. The app does what corrections officers physically can&#39;t do: demand dozens of check-ins a day.\n \u201cGuardian cost me my job,\u201d says another person who had been incarcerated for more than a decade who used the app and remembers it asking him to check in more than 10 times an hour. \u201cAt night I couldn\u2019t sleep, and then at work I\u2019d have to pull my phone out all the time.\u201d Half the time, he says, it wouldn\u2019t accurately recognize his face or his voice.\n Guardian demands more but does less. A P.O. could easily verify a person&#39;s identity when meeting them in person. The app taking their place is apparently unable to reliably do this. It fails at this simple task multiple times an hour, day after day. An app unable to balance its ID books isn&#39;t going to help anyone return to a normal life after repaying their debt to society.\n A quick cost-benefit analysis sides heavily with costs. The app costs $90/month and doesn&#39;t work correctly. What it does do is put compliant parolees at risk of being incarcerated again. Even when it&#39;s working somewhat correctly, it&#39;s a problem.\n As we found in the review, Guardian checks in with Telmate\u2019s servers every single minute, waking up a phone if it\u2019s asleep and ignoring the operating system\u2019s requests to optimize the battery. Given what Guardian is used for, the app predictably relies on the user granting it access to a number of potentially privacy-invasive sensors on their device, including wifi, Bluetooth, audio settings, and camera access.\n All day, everyday surveillance parolees are expected to pay for. And even when they follow the rules, the app says they aren&#39;t. Also included in the code are hooks for surreptitious recording -- hidden access to devices&#39; microphones that can be triggered in standby or sleep mode. Not that sleep mode means anything when the app is phoning home every sixty seconds.\n The expectation of privacy for paroled prisoners is low. But it&#39;s not nonexistent. This expensive app removes everything that&#39;s left and replaces it with intrusive check-ins that are so badly implemented they may as well be a malfunctioning ankle bracelet for all the good it&#39;s doing for parolees. But this is likely the best prisoners are ever going to get. Very few people who matter -- those with the power to change things -- care what happens to ex-criminals. Every sentence  ...", "posttime": "2020-05-03 03:56:39", "tags": "\u7a0b\u5e8f,app,\u624b\u673a,\u4e0d\u8d77\u4f5c\u7528,replace", "title": "\u76d1\u72f1\u7528\u4e0d\u8d77\u4f5c\u7528\u7684\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u66f4\u6362\u811a\u8e1d\u624b\u956f", "title_en": "Prisons Replace Ankle Bracelets with Smartphone App That Doesn't Work", "transed": 1, "url": "https://www.techdirt.com/articles/20200429/10182144405/prisons-replace-ankle-bracelets-with-expensive-smartphone-app-that-doesnt-work.shtml", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7a0b\u5e8f", "app", "\u624b\u673a", "\u4e0d\u8d77\u4f5c\u7528", "replace"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000399, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u73b0\u5728\u662f\u5f00\u53d1\u65b0\u4ea7\u54c1\u7684\u65f6\u5019\u4e86\uff01\u6211\u51b3\u5b9a\u5206\u4eab\u6211\u6784\u5efaSaaS\u4ea7\u54c1\u4e4b\u65c5\u4e2d\u7684\u6bcf\u4e00\u6b65\uff0c\u4ee5\u4fdd\u6301\u5bf9\u81ea\u5df1\u7684\u8d23\u4efb\u611f\u3002\u6211\u82b1\u51e0\u5929/\u51e0\u5468/\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u7f16\u5199\u4ee3\u7801\uff0c\u5728ProductHunt\u6216IndieHacker\u4e0a\u5206\u4eab\u7684\u65e5\u5b50\u5df2\u7ecf\u4e00\u53bb\u4e0d\u590d\u8fd4\u4e86\uff0c\u6ca1\u6709\u4efb\u4f55\u5f62\u5f0f\u7684\u5438\u5f15\u529b\u3002\u73b0\u5728\u6211\u4eec\u7684\u505a\u6cd5\u662f\u6b63\u786e\u7684\uff01\n\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u65b9\u5f0f\uff1f\u6211\u8fd8\u4e0d\u5b8c\u5168\u77e5\u9053\uff0c\u4f46\u6211\u8fc7\u53bb\u7684\u7ecf\u9a8c\u544a\u8bc9\u6211\uff0c\u5728\u5efa\u7acb\u6211\u7684MVP\u4e4b\u524d\uff0c\u6211\u9700\u8981\u4e13\u6ce8\u4e8e\u51e0\u4ef6\u4e8b\uff1a\n\u627e\u5230\u9047\u5230\u8be5\u95ee\u9898\u7684\u4eba\uff0c\u5e76\u8be2\u95ee\u4ed6\u4eec\u662f\u5982\u4f55\u89e3\u51b3\u8be5\u95ee\u9898\u7684(\u5ba2\u6237\u91c7\u8bbf)\u3002\n\u8bd5\u7740\u5efa\u7acb\u4e00\u4e2a\u65e9\u671f\u7528\u6237\u7684\u521d\u59cb\u5217\u8868\uff0c\u4ece\u4ed6\u4eec\u90a3\u91cc\u83b7\u5f97\u53cd\u9988\uff0c\u5e76\u6539\u8fdb\u6211\u7684MVP\u3002\n\u73b0\u6709\u7684\u4e66\u7b7e\u89e3\u51b3\u65b9\u6848\u5141\u8bb8\u6211\u5c06\u94fe\u63a5\u4fdd\u5b58\u5728\u6587\u4ef6\u5939\u3001\u6807\u7b7e\u7b49\u4e2d\uff0c\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u8981\u8bb0\u5f97\u8fd4\u56de\u5e94\u7528\u7a0b\u5e8f\u5e76\u6253\u5f00\u94fe\u63a5\u3002\u6211\u9047\u5230\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5f53\u6211\u5728\u7f51\u4e0a\u9605\u8bfb\u6587\u7ae0\u3001\u89c2\u770b\u89c6\u9891\u6216\u67e5\u627e\u6709\u8da3\u7684\u5185\u5bb9\u65f6\uff0c\u6211\u60f3\u505a\u7b14\u8bb0\u5e76\u4fdd\u5b58\u7247\u6bb5\u4ee5\u5907\u5feb\u901f\u53c2\u8003\u3002\n\u6211\u8fd9\u6b21\u5b9e\u9645\u4e0a\u505a\u4e86\u4e00\u4e9b\u5ba2\u6237\u8c03\u67e5\uff0c\u6d1e\u5bdf\u4e86\u4eba\u4eec\u76ee\u524d\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff1a\n\u4eba\u4eec\u6b63\u5728\u4f7f\u7528\u57fa\u672c\u7684\u7b14\u8bb0\u5e94\u7528\u7a0b\u5e8f\u4f5c\u4e3a\u4e66\u7b7e\u7ba1\u7406\u5668\uff1a\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u95ee\u9898\u662f\uff0c\u4f60\u5fc5\u987b\u56f4\u7ed5\u7b14\u8bb0\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u6765\u4fdd\u6301\u4e00\u5207\u4e95\u7136\u6709\u5e8f\u3002\u4eba\u4eec\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u6709Google Keep\u548cApple Notes\u3001Bear\u3001Concept\u7b49\u3002\n\u4eba\u4eec\u6b63\u5728\u4f7f\u7528\u73b0\u6709\u7684\u4e66\u7b7e\u5e94\u7528\u7a0b\u5e8f\uff1aRaindrop\u3001Pocket\u548cInstapaper\u7b49\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u8981\u4fdd\u5b58\u94fe\u63a5\u5e76\u5c06\u5176\u7ec4\u7ec7\u5728\u6587\u4ef6\u5939\u4e2d\u6216\u6309\u6807\u7b7e\u8fdb\u884c\u7ec4\u7ec7\uff0c\u4f46\u5b83\u4eec\u4e0d\u80fd\u5e2e\u52a9\u60a8\u7a0d\u540e\u8fd4\u56de\u5230\u94fe\u63a5\uff0c\u5219\u6b64\u89e3\u51b3\u65b9\u6848\u6709\u6548\u3002\n\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u6784\u5efa\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a\u5728\u5f00\u53d1\u4eba\u5458\u8bba\u575b\u4e0a\uff0c\u6211\u53d1\u73b0\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u8bd5\u56fe\u901a\u8fc7\u6784\u5efa\u5b9a\u5236\u89e3\u51b3\u65b9\u6848\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u7136\u800c\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u80fd\u7f16\u7801\u3002\n\u6211\u7684\u4e66\u7b7e\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u540c\u4e00\u5c4b\u6a90\u4e0b\u63d0\u4f9b\u6240\u6709\u8fd9\u4e09\u6837\u4e1c\u897f\uff1a\u7ec4\u7ec7\u3001\u7b14\u8bb0\u548c\u63d0\u9192\u3002\n\u901a\u7528\u5e94\u7528\u7a0b\u5e8f\uff1aBear\u3001Concept\u3001RoamResearch\uff1a\u4fdd\u5b58\u94fe\u63a5\u548c\u7b14\u8bb0\uff0c\u4f46\u9700\u8981\u6784\u5efa\u81ea\u5df1\u7684\u7cfb\u7edf\u624d\u80fd\u8fd0\u884c\u3002\n\u9605\u8bfb\u6e05\u5355\u63d0\u9192\u5e94\u7528\u7a0b\u5e8f\uff1aMailist.app(\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u662f\u6211\u627e\u5230\u7684\u552f\u4e00\u4e00\u4e2a)\uff1a\u63d0\u9192\u4f60\u9605\u8bfb\u94fe\u63a5\uff0c\u4f46\u4e0d\u63d0\u4f9b\u7ec4\u7ec7\u529f\u80fd\u3002\nExcel\u548cAirtable\uff1a\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e24\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4f46\u662f\u4f60\u9700\u8981\u627e\u5230\u65f6\u95f4\u6765\u6784\u5efa\u4e00\u4e2a\u9002\u5408\u4f60\u7684\u7cfb\u7edf\u3002\u8fd9\u53ef\u80fd\u4f1a\u5f88\u9ebb\u70e6\u3002\n\u901a\u8fc7\u5728\u8bba\u575b\u3001Twitter\u3001IndieHacker\u3001HackerNews\u4e0a\u5efa\u7acb\u53d7\u4f17\uff0c\u6211\u6b63\u5728\u8be2\u95ee\u4eba\u4eec\u4ed6\u4eec\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\uff0c\u5e76\u8bd5\u56fe\u83b7\u5f97\u4e00\u4e9b\u89c1\u89e3\u3002\u7136\u540e\u6211\u8bd5\u7740\u8054\u7cfb\u4e00\u4e9b\u56de\u7b54\u7684\u4eba\uff0c\u5efa\u7acb\u4e00\u4efd\u65e9\u671f\u91c7\u7528\u8005\u7684\u540d\u5355\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u8fd8\u4e0d\u662f\u5f88\u6210\u529f\uff1a\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u56de\u7b54\u8bf4\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u79cd\u89c2\u4f17\u81f3\u4e0a\u7684\u65b9\u6cd5\u5e76\u4e0d\u987a\u5229\u3002\u6211\u5728Twitter\u548c\u5176\u4ed6\u5e73\u53f0\u4e0a\u6ca1\u6709\u8ffd\u968f\u8005\uff0c\u6240\u4ee5\u6211\u5c1d\u8bd5\u4e86\u4e00\u79cd\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u65b9\u5f0f\uff0c\u76f4\u63a5\u8054\u7cfb\u4eba\u4eec\u3002\u8fd9\u5bf9\u6211\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u9996\u5148\uff0c\u8fd9\u4e9b\u4eba\u4e0d\u4e86\u89e3\u6211\uff0c\u5176\u6b21\uff0c\u4ed6\u4eec\u4e0d\u5728\u4e4e\u6211\u8981\u8bf4\u4ec0\u4e48\u3002\u6211\u5728\u7f51\u4e0a\u5230\u5904\u770b\u5230\uff0c\u5728\u5f00\u53d1\u4ea7\u54c1\u4e4b\u524d\uff0c\u4f60\u5fc5\u987b\u5148\u5efa\u7acb\u4e00\u4e2a\u53d7\u4f17\uff0c\u4f46\u8981\u5efa\u7acb\u4e00\u4e2a\u53d7\u4f17\uff0c\u4f60\u81f3\u5c11\u9700\u8981\u6709\u613f\u610f\u542c\u4f60\u8bf4\u8bdd\u7684\u4eba\u3002\n\u6211\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u5e26\u6709\u7535\u5b50\u90ae\u4ef6\u8868\u5355\u7684\u767b\u5f55\u9875\u9762\uff0c\u6211\u5c06\u5728Twitter\u548c\u5176\u4ed6\u5730\u65b9\u5206\u4eab\uff0c\u8bd5\u56fe\u83b7\u5f97\u4e00\u4e9b\u65e9\u671f\u7528\u6237\u3002\u7136\u800c\uff0c\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u6ca1\u6709\u8ffd\u968f\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u96be\u83b7\u5f97\u5438\u5f15\u529b\u3002\n\u6211\u5df2\u7ecf\u5728Adobe XD\u4e0a\u6784\u5efa\u4e86\u4e00\u4e2a\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u8bbe\u8ba1\u539f\u578b\u3002\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u6211\u8bbe\u8ba1\u8fc7\u5ea6\u4e86\uff0c\u6211\u4e0d\u559c\u6b22\u8fd9\u6837\uff0c\u6240\u4ee5\u6211\u9700\u8981\u4ece\u5934\u5f00\u59cb\u3002", "note_en": "It is time build a new product! I have decided to share every step on my journey of building SaaS products to keep myself accountable. Long gone are the days where I would spend days/weeks/months coding something, sharing it on ProductHunt or IndieHackers and have no form of traction. Now we are doing it the right way!\n What is the right way? I don&#39;t fully know yet but my past experiences showed me that I need to focus on a few things before building my MVP:\n Find the people experiencing that problem and ask them how they are solving it (customer interviews)\n Try to build an initial list of early users, get feedback from them and refine my MVP\n       Existing bookmark solutions allow me to save links in folders, tags etc but one issue is to remember to come back to the application and open the links. The other problem I have is that when I read articles, watch videos or find interesting content online I want to take notes and save snippets for quick reference.\n  I have actually done some customer research this time and got some insight on how people are solving this problem at the moment:\n People are using basic note apps as a bookmark manager: The problem with this solution is that you have to build a system around the note app to keep everything organized. Example of apps people use for that are Google Keep and Apple Notes, Bear, Notion etc\n People are using existing bookmark apps: Apps like Raindrop, Pocket and Instapaper. This solution works if you want to save your links and organize them in folders or by tags but they don&#39;t help you come back to your links later\n Developers are building their own apps: On developer forums I found that other developers tried to solve this by building a custom solution. However not everyone can code.\n  My bookmark app will offer all those 3 things under the same roof: organization, notes and reminders.\n  General purpose apps: Bear, Notion, RoamResearch: Save links and notes but need to build your own system to make it work\n Reading list reminder apps: Mailist.app (so far it&#39;s the only one that I found): Reminds you to read links but offer no organization capabilities\n Excel and Airtable: Anybody can do anything in those 2 apps but you need to find time to build a system that works for you. It can be cumbersome.\n  Building an audience by going on forums, Twitter, IndieHackers, HackerNews, I am asking people how they are solving these problems and trying to get some insights. I then try to contact some of the people that answer to build a list of early adopters. So far this have not been very successful: not everybody replies\n  This audience-first approach is not going well so far. I have no following on Twitter and other platforms so I have tried the creepy way by contacting people directly. This is not working for me because first, these people don&#39;t know me and second, they don&#39;t care about what I have to say. I see everywhere online that you have to build an audience before building a product but to build an audience you need at least people that want to listen to you\n     I have also created a  landing page with an email form that I will share on Twitter and other places to try to get some early users. However with no following on social media it will be hard to get traction\n I have built a  design prototype on Adobe XD of what I think the app would look like. However I think I over engineered and don&#39;t like it this so I need to go back to the drawing board", "posttime": "2020-05-03 03:34:42", "tags": "\u7a0b\u5e8f,app,saas,\u5e94\u7528\u7a0b\u5e8f,people", "title": "\u516c\u5f00\u6784\u5efaSaaS\uff1a\u4e66\u7b7e\u5e94\u7528\u7a0b\u5e8f-\u7b2c1\u5929(ISH)", "title_en": "Building a SaaS in Public: Bookmark App \u2013 Day 1(ish)", "transed": 1, "url": "https://charlesthecoder.dev/building-saas-in-public-bookmark-app-day-1/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7a0b\u5e8f", "app", "saas", "\u5e94\u7528\u7a0b\u5e8f", "people"]}, {"category": "", "categoryclass": "", "imagename": "027e951625cc3fe89626ad395687d766.png", "infoid": 1000398, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2020\u5e745\u67081\u65e5-\u5982\u679c\u4f60\u548c\u6211\u4e00\u6837\uff0c\u9694\u79bb\u8ba9\u4f60\u60f3\u8981\u91cd\u64ad\u4f60\u591a\u5e74\u6ca1\u6709\u78b0\u8fc7\u7684\u6e38\u620f\u3002\u5982\u679c\u4f60\u66f4\u50cf\u6211\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u5730\u65b9\u50a8\u5b58\u4e00\u4efd\u201c\u5e1d\u56fd\u7eaa\u51433\u201d\u3002\u4f60\u53ef\u80fd\u5728Mac\u4e0a\u73a9\uff0c\u4f60\u53ef\u80fd\u8fd8\u6ca1\u6709\u5347\u7ea7\u5230Catalina\uff0c\u4f60\u53ef\u80fd\u6e34\u671b\u4e00\u4e9b\u6469\u6839\u00b7\u5e03\u83b1\u514b\u7684\u52a8\u4f5c\u3002\n\u6240\u4ee5\u4f60\u5f15\u5bfc\u6e38\u620f\uff0c\u4f60\u767b\u9646\u5230\u4e3b\u83dc\u5355\uff0c\u4f60\u7acb\u523b\u6ce8\u610f\u5230\u2026\u51fa\u4e86\u70b9\u95ee\u9898\u3002\u770b\u8d77\u6765\u50cf\u70ed\u5783\u573e\u3002\n\u6240\u4ee5\uff0c\u4f60\u8df3\u5230\u9009\u9879\u4e0a\uff0c\u63d0\u5347\u6240\u6709\u7684\u4e1c\u897f\uff0c\u2026\u3002\u2026\u3002\u5b83\u4ecd\u7136\u5f88\u96be\u770b\u3002\n\u4ee4\u4eba\u6000\u7591\u7684\u662f\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u201c\u7740\u8272\u5668\u8d28\u91cf\u201d\u9009\u9879\u88ab\u9501\u5b9a\u4e3a\u201c\u4f4e\u201d\u3002\n\u6b64\u65f6\uff0c\u60a8\u5c06\u5728\u6587\u6863\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u67e5\u627e\u6e38\u620f\u9884\u671f\u521b\u5efa\u7684\u6587\u4ef6\u5939\uff0c\u56e0\u4e3a\u8fd9\u662f2005\u5e74\uff0c\u800c\u8fd9\u6b63\u662f\u6e38\u620f\u6240\u505a\u7684\u3002\n\u4f60\u4f1a\u95ee\uff0c\u4f60\u5728\u627e\u4ec0\u4e48\uff1f\u5f53\u7136\u662f\u5b58\u50a8\u8bbe\u7f6e\u7684\u6587\u4ef6\u3002\u754c\u9762\u53ef\u4ee5\u628a\u4f60\u9501\u5728\u95e8\u5916\uff0c\u4f46\u4f60\u662f\u4e2a\u8282\u4fed\u7684\u4eba\uff0c\u4e0d\u662f\u5417\uff1f\u56e0\u6b64\uff0c\u60a8\u627e\u5230\u4e86\u60a8\u8981\u67e5\u627e\u7684XML\uff0c\u56e0\u4e3a\u5b83\u662f2005\u5e74\u7684\uff0c\u5f53\u7136\u662fXML\uff0c\u5e76\u4e14\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u4e2a\u201coptiongrfxshaderquality\u201d\u9009\u9879\u8bbe\u7f6e\u4e3a0\u3002\u4f60\u8ba4\u4e3a\u8fd9\u770b\u8d77\u6765\u5f88\u5bf9\uff0c\u6240\u4ee5\u4f60\u628a\u5b83\u63d0\u9ad8\u5230100\uff0c\u56e0\u4e3a\u8d28\u91cf\u592a\u9ad8\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u9519\u3002\u6211\u4eec\u610f\u89c1\u4e00\u81f4\u3002\n\u5185\u5bb9\uff0c\u4f60\u542f\u52a8\u6e38\u620f\u3002\u7136\u800c\uff0c\u5e15\u5854\u7279\u62c9(\u8fd9\u662f\u6cd5\u56fd\u7684\uff0c\u67e5\u4e00\u4e0b\u8fd9\u4e2a)\uff0c\u4ec0\u4e48\u90fd\u6ca1\u6709\u6539\u53d8\u3002\u5f53\u60a8\u67e5\u770bol\u2018XML\u6587\u4ef6\u65f6\uff0c\u8bbe\u7f6e\u8fd4\u56de\u52300\u3002\u5408\u594f\u5de5\u4f5c\u5ba4(RIP)\u5df2\u7ecf\u770b\u5230\u4e86\u4f60\u7684\u6280\u827a\uff0c\u5e76\u628a\u5b83\u5f04\u5f97\u4e00\u584c\u7cca\u6d82\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u53ef\u80fd\u4f1a\u653e\u5f03\u3002\u8fd9\u662f\u4e00\u4e2aMac\u7cfb\u7edf\uff0c\u4f60\u4e0d\u592a\u53ef\u80fd\u627e\u5230\u7528\u6237\u8865\u4e01(\u597d\u5427\uff0c\u6211\u770b\u4e86\u4e00\u4e0b\u3002\u5230\u5904\u90fd\u6709\u4e00\u4e9b\u53ef\u7591\u7684\u4e1c\u897f\u3002\u53ef\u80fd\u4f1a\u594f\u6548\u3002)\u3002\u8fd9\u53ea\u662f\u56fe\u5f62\u800c\u5df2\u3002\u4fee\u7406\u8d77\u6765\u542c\u8d77\u6765\u5f88\u70e6\u4eba\u3002\n\u4f46\u4f60\u4e0d\u4f1a\u8fd9\u4e48\u505a\u7684\u3002\u56e0\u4e3a\u4f60\u8bb0\u5f973\u5c81\u65f6\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u3002\u4f60\u8fd8\u8bb0\u5f97\u770b\u7740\u90a3\u7f8e\u4e3d\u7684\u6ce2\u6d9b\u6c79\u6d8c\u7684\u6c34\u3002\u90a3\u4e9b\u7c92\u5b50\u6548\u679c\u3002\u5728\u90a3\u4e9b\u4ed6\u5988\u7684\u6846\u67b6\u91cc\u6839\u672c\u653e\u4e0d\u4e0b\u7684\u5927\u8239\u4e0a\u3002\u5929\u54ea\uff0c\u6444\u50cf\u673a\u88ab\u653e\u5927\u4e86\u3002\u4ed6\u4eec\u5728\u60f3\u4ec0\u4e48\u5462\u3002\n\u5728\u60a8\u7684\u6587\u6863\u4e2d\uff0c\u8be5\u6587\u4ef6\u5939\u7684\u9876\u90e8\u6709\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\u3002\u8fd9\u6b3e\u6e38\u620f\u663e\u793a\u4e86\u4e00\u5f20\u663e\u5361\uff0c\u5e76\u8bf4\u5b83\u9009\u62e9\u4e86\u201c\u901a\u7528DX7\u201d\u8bbe\u7f6e\u3002\u8fd9\u662f\u8bf4\u4f60\u6709\u4e00\u53f0\u82f1\u7279\u5c14GMA 950\uff0c\u4f60\u4ee5\u524d\u7684\u7535\u8111\u786e\u5b9e\u6709\u8fc7\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e00\u6b3e\u914d\u5907\u4e86Intel Iris Graphics 6100\u3002\u786e\u5b9e\u6709\u4e9b\u4e0d\u5bf9\u52b2\u3002\u4f60\u80e1\u4e71\u731c\u6d4b\u6e38\u620f\u662f\u901a\u8fc7\u5c06\u8ba1\u7b97\u673a\u7684\u56fe\u5f62\u80fd\u529b\u4e0e\u663e\u5361\u6570\u636e\u5e93\u8fdb\u884c\u5339\u914d\u6765\u786e\u5b9a\u8ba1\u7b97\u673a\u7684\u56fe\u5f62\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u505a\u6b63\u786e\u7684\u4e8b\u60c5\u5e76\u68c0\u67e5\u8fd9\u4e9b\u529f\u80fd\u2026\u2026\u3002\n\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u4f60\u53d1\u73b0\u4e86\u65e7\u7684\u8865\u4e01\u7b14\u8bb0\u3002\u8fd9\u4e9b\u90fd\u8bc1\u5b9e\u4e86\u4f60\u7684\u6050\u60e7\u3002\u60a8\u53ef\u4ee5\u67e5\u770bGameData\u6587\u4ef6\u5939\u4e2d\u7684\u4e00\u4e9b\u6587\u4ef6\uff0c\u4f46\u5b83\u4eec\u90fd\u662f.bar\u548c.xmb\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5927\u591a\u65e0\u6cd5\u8bfb\u53d6\u3002\u60a8\u662f\u201cIntel\u201d\u7684grep\uff0c\u662f\u201cDX7\u201d\u7684grep\u3002\u4ec0\u4e48\u90fd\u6ca1\u53d1\u751f\u3002\u4f60\u5220\u9664\u4e86\u4e00\u4e9b\u6587\u4ef6\u2026\u3002\u4ec0\u4e48\u90fd\u6ca1\u53d1\u751f\u3002\u55ef\uff0c\u4f60\u77e5\u9053AAA\u6e38\u620f\u53ef\u80fd\u60f3\u628a\u4e00\u4e9b\u8d44\u6e90\u6346\u7ed1\u5728\u5947\u602a\u7684\u5730\u65b9\uff0c\u8fd9\u662f\u4e00\u4e2aWindows\u6e38\u620f\u7684Mac\u7aef\u53e3\uff0c\u6240\u4ee5\u4f60\u77e5\u9053\uff0c\u4e5f\u8bb8\u4e8b\u60c5\u5f88\u5947\u602a\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u60a8\u6700\u7ec8\u8fd8\u662f\u627e\u5230\u4e86\u4e00\u4e2a\u201crender.bar\u201d\u6587\u4ef6\uff0c\u5e76\u5728\u542f\u52a8\u65f6\u79fb\u52a8\u8be5\u6587\u4ef6\u65f6\u5d29\u6e83\u3002\u90a3\u8fd8\u4e0d\u7b97\u592a\u597d\u3002\u60a8\u53ef\u4ee5\u5728\u5341\u516d\u8fdb\u5236\u6076\u9b54\u4e2d\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u53ef\u4ee5\u544a\u8bc9\u60a8\u4e00\u4e9b\u6709\u5173\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4fe1\u606f\u3002\u662f\u7684\uff0c\u786e\u5b9e\u5982\u6b64\u3002\u5176\u4e2d\u4e00\u4e9b\u6570\u636e\u662f\u53ef\u8bfb\u6587\u672c\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u7740\u8272\u5668\u3002\u4f46\u5947\u602a\u7684\u662f\uff0c\u5b83\u7684\u5927\u90e8\u5206\u7531\u7a7a\u683c\u2026\u5206\u9694\u3002\n\u201c\u5f88\u660e\u663e\uff0c\u90a3\u662fUTF-16\u201d\uff0c\u4f60\u60ca\u547c\u9053\uff01\u8fd9\u672c\u6765\u662f\u4e00\u6b3eWindows\u6e38\u620f\uff0c\u4ed6\u4eec\u7528UTF-16\u5b58\u50a8\u6587\u672c\u975e\u5e38\u6709\u610f\u4e49\uff0c\u57fa\u672c\u4e0a\u6d6a\u8d39\u4e8630Mb\u6570\u636e\u6587\u4ef6\u7684\u4e00\u534a\u7a7a\u95f4\u3002\u6bd5\u7adf\uff0cWindows\u559c\u6b22UTF-16(\u5c3d\u7ba1\u5b83\u4e0d\u5e94\u8be5)\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u4f7f\u7528\u8be5\u7740\u8272\u5668\u548cASCII\u7740\u8272\u5668\u3002\u975e\u5e38\u660e\u667a\u7684\u4e3b\u610f\uff01(\u672a\u663e\u793a\uff1a\u6211\u82b1\u4e86\u4e00\u5929\u65f6\u95f4\u624d\u610f\u8bc6\u5230)\u3002\n\u4e0d\u7ba1\u600e\u4e48\u8bf4\u3002\u5341\u516d\u8fdb\u5236Fiend\u5b9e\u9645\u4e0a\u6709\u4e00\u4e2a\u5c06\u5b57\u8282\u89e3\u6790\u4e3aUTF-16\u7684\u9009\u9879\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u4e3aDX7\u6267\u884cgrep\u3002\u8fd9\u4f1a\u7ed9\u4f60\u5e26\u6765\u4e00\u4e9b\u6253\u51fb\u3002\u60a8\u53ef\u4ee5\u7528DX9\u66ff\u6362\u6240\u6709\u8fd9\u4e9b\u6570\u636e\uff0cDX9\u5076\u5c14\u4e5f\u4f1a\u51fa\u73b0\u5728\u8fd9\u4e9b\u6570\u636e\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4fdd\u5b58\u5e76\u5f15\u5bfc\u6e38\u620f\u3002\u97e6\u5c14\u666e\u3002\u65e5\u5fd7\u4e0a\u751a\u81f3\u6ca1\u6709\u5199\u201cDX9\u201d\u3002\u8fd9\u53ef\u80fd\u662f\u5728\u522b\u5904\u5b9a\u4e49\u7684\u3002\n\u6211\u4eec\u8bd5\u8bd5\u522b\u7684\u5427\u3002\u5047\u8bbe\u6e38\u620f\u6b63\u5728\u68c0\u6d4b\u663e\u5361\uff0c\u5e76\u4e14\u65e5\u5fd7\u4e2d\u6709\u5341\u516d\u8fdb\u5236\u6807\u8bc6\u7b26(\u5728\u6211\u7684\u4f8b\u5b50\u4e2d\uff0c\u662f0x8086-Intel\u548c0x2773)\u3002\u683c\u96f7\u683c\u5728\u201c\u9b54\u6cd5\u6076\u9b54\u201d\u4e2d\u7684\u201c8086\u201d\u5728\u67d0\u4e2a\u5730\u65b9\u5927\u53d7\u6b22\u8fce\uff0c\u5176\u4e2d\u4e00\u4e9b\u6587\u672c\u770b\u8d77\u6765\u5f88\u9f13\u821e\u4eba\u5fc3\u3002\u82f1\u7279\u5c149\u7cfb\u5217\u662fGMA 950\u7cfb\u5217\uff0c\u5b83\u53ef\u80fd\u8fd0\u884c\u5f97\u4e0d\u662f\u5f88\u597d\u3002\n\u90a3\u91cc\u7684\u4e00\u4e9b\u6570\u5b57\u770b\u8d77\u6765\u50cf\u5361\u7247\u7684\u6807\u8bc6\u7b26(2582\uff0c2592)\uff0c\u6240\u4ee5\u66f4\u6539\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u4f60\u5df2\u7ecf\u590d\u5236\u4e86\u4e00\u4efd\u6587\u4ef6\uff0c\u6240\u4ee5\u8bd5\u4e00\u8bd5\u4e5f\u6ca1\u4ec0\u4e48\u574f\u5904\u3002\n\u53ef\u60b2\u7684\u662f\uff0c\u8fd9\u4e5f\u662f\u4e00\u6761\u6b7b\u80e1\u540c\u3002\u4e8b\u5b9e\u662f\uff0c\u4f60\u770b\u9519\u6587\u4ef6\u4e86\u3002\u8c22\u5929\u8c22\u5730\uff0c\u6211\u53ef\u4ee5\u544a\u8bc9\u4f60\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u6211\u5728\u8fd9\u4e0a\u9762\u82b1\u4e86\u592a\u591a\u7684\u65f6\u95f4\uff0c\u5c1d\u8bd5\u4e86\u592a\u591a\u7684\u4e1c\u897f\u3002\u8fd9\u8be5\u6b7b\u7684\u4e1c\u897f\u82b1\u4e8620\u591a\u4e2a\u5c0f\u65f6\u3002\u8fd9\u8fd8\u4e0d\u7b97\u62cd\u6444\u6240\u6709\u8fd9\u4e9b\u5c4f\u5e55\u622a\u56fe\u7684\u65f6\u95f4\uff0c\u2026\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u6b63\u786e\u7684\u6587\u4ef6\u662f\u201cDataP.bar\u201d\uff0c\u5982\u679c\u60a8\u5de7\u5999\u5730\u66ff\u6362ID\uff0c\u65e5\u5fd7\u5c06\u663e\u793a\u4e00\u4e9b\u5168\u65b0\u7684\u5185\u5bb9\uff1a\n\u5f53\u7136\uff0c\u5728\u6e38\u620f\u4e2d\uff0c\u4f60\u4ecd\u7136\u505c\u7559\u5728\u201c\u4f4e\u201d\u8bbe\u7f6e\u4e0a\uff0c\u6240\u4ee5\u65e5\u5fd7\u6ca1\u6709\u8bf4\u8c0e\u3002\u4f60\u53ef\u80fd\u5e0c\u671b\u662f\u201c\u4e2d\u7b49\u201d\u7684\uff0c\u4f46\u662f\uff0c\u5509\uff0c\u4e0d\u662f\u3002\n\u8fd9", "note_en": "May 1st 2020 \u2014 if you\u2019re like me, quarantine is making you want to replay games you haven\u2019t touched in years. If you\u2019re further like me, you might have a copy of Age of Empires 3 stored somewhere. You might be playing on a Mac, you might not yet have upgraded to Catalina, and you might be eager for some of that Morgan Black action.\n So you boot the game, you land on the Main Menu, and you immediately notice something is wrong\u2026 It looks like  hot  garbage.\n   So, you hop over to the options, boost everything up\u2026 \u2026And it\u2019s still ugly.\n Suspiciously, you notice, the \u201c Shader Quality\u201d options is locked to \u201c Low\u201d.\n  At this point, you\u2019ll look for the folder the game has expectedly created somewhere in your Documents, because it\u2019s 2005 and that\u2019s what games do.\n What are you looking for, you ask? The file where settings are stored, of course. The interface can lock you out, but you\u2019re a thrifty man, aren\u2019t ya. So you find the XML you\u2019re looking for, because it\u2019s 2005 and of course it\u2019s XML, and stumble upon a \u201c optiongrfxshaderquality\u201d option set to 0. That looks right, you think, and so you bump that to 100 because one can never go wrong with too much quality. We are in agreement.\n  Content, you boot the game up. However,  patatras (it\u2019s French, look this up), nothing changed. And as you look at the ol\u2019 XML file, the setting is back to 0. Ensemble Studios (RIP) has looked at your craftiness and crapped all over it.\n At this point, you  might give up. This is a Mac system and you\u2019re unlikely to find a user-patch (well \u2014 I\u2019ve looked around a bit. There\u2019s some shady stuff here and there. Might work.) It\u2019s just graphics. It sounds annoying to fix.\n But you\u2019re not going to. Because you remember how Age 3 should look like. You remember looking at that beautiful wavy water. At those particle effects. At those huge ships that simply wouldn\u2019t fit in the goddamn  fucking frame. Jesus that camera is zoomed in. What were they thinking.\n  At the top of that Folder in your Documents, there is a log file. The game shows a graphic card, and says it\u2019s picking the \u201cgeneric dx7\u201d setting. It\u2019s saying you\u2019ve got an Intel GMA 950, which your previous computer indeed had. This one, though, has an Intel Iris Graphics 6100. Something is indeed wrong. You take a wild guess that the game is determining your computer \u2019s graphics capabilities by matching it against a database of graphics cards, instead of doing the right thing and checking the capabilities  ...\n  Incidentally, you find old  patch notes. Those confirm your fears. You look around at some files in the GameData folder, but it\u2019s all  .bar and  .xmb files, and those are mostly unreadable. You grep for \u201c Intel\u201d, for \u201c dx7\u201d. Nothing happens. You delete some files\u2026 Nothing happens. Well, you know that AAA games might want to bundle some resources in weird places, and this is a Mac port of a Windows game, so you know, maybe things are odd.\n Still, you end up finding a \u201crender.bar\u201d file, and moving that one crashes at startup. That\u2019s vaguely good. You open that file in  Hex Fiend, because that usually can tell you a few things about binary files. And well, it does. Some of that data is readable text. Some of it is shaders. But most of it is oddly separated by empty spaces\u2026\n  \u201cObviously, that\u2019s UTF-16\u201d, you exclaim ! This is originally a Windows game, it makes perfect sense they\u2019d store text in UTF-16, wasting basically half the space of the 30Mb data file. After all, Windows loved UTF-16 (though it  shouldn\u2019t), and why not use that and ASCII shaders in the same file. Perfectly sensible idea!  (Not shown: this took me like a day to realise)\n Anyways. Hex Fiend actually has an option to parse bytes as UTF-16, so you grep for dx7. That gives you a few hits. You replace all of that with dx9, which also shows up in that data occasionally, you save and you boot up the game. Welp. The logs don\u2019t even say \u201cdx9\u201d. That\u2019s probably defined elsewhere.\n  Let\u2019s try something else. You assume the game is detecting graphic cards, and you have Hexadecimal identifiers in the logs (in my case, 0x8086 \u2014 Intel, and 0x2773). Grepping for \u201c8086\u201d in Hex Fiend hits somewhere, and some of that text looks encouraging. Intel 9 Series is the GMA 950 series, and it probably didn\u2019t run Age 3 very well.\n  Some numbers there look like identifiers of cards (2582, 2592), so maybe changing those will do something. You\u2019ve made a copy of the file anyways, so it can\u2019t hurt to try.\n Sadly, that too is a dead end. Truth is, you\u2019re looking at the wrong file. Thankfully, I can tell you that because I\u2019ve spent too much time on this and tried  way too many things. This bloody thing took upwards of 20 hours. And that\u2019s not counting the time to take all those screenshots\u2026\n Anyways, the correct file is \u201cDataP.bar\u201d, and if you replace IDs smartly, the logs will show something completely new:\n  Of course, in-game, you\u2019re still stuck on the \u201cLow\u201d setting, so the logs aren\u2019t lying. You might have hoped for \u201cMedium\u201d, but  alas, no.\n This seems to be as much as you can do from hacking the data. Time to bring out the big gun.\n  So, with all else failing, we\u2019ve only got one last thing to do: change the executable itself (aka \u201ccracking\u201d back in 2005). Nowadays, I suppose we\u2019d just call it hacking, but the word has stuck in the game piracy sphere (not that I\u2019ve  ever been anywhere near that, of course).\n It\u2019s time for the actually interesting part of this article (yeah we\u2019re over a thousand words in already, but are you not entertained?).\n  Our tool of choice for this step will be a disassembler: an application that takes the binary code of the executable and turns it into readable (haha) assembly code. The most famous one is IDA Pro, but it\u2019s crazy expensive and I\u2019m not sure it runs on a Mac, so I\u2019ll go with  Hopper. It\u2019s not free (it\u2019s actually 90$), but you can freely use it for 30 minutes at a time with mostly all required functionality. I won\u2019t go into too many details about how the interface looks, as the  Hopper tutorial  ...\n First, a note: this took me like 5 days to get right, and many unsuccessful attempts were made. I\u2019ll mostly only show the successful path, so it might look kind of magic. But this is  hard. Don\u2019t worry if you\u2019re struggling.\n And another note: \u201ccracking\u201d is generally illegal and/or done for illegal purposes. This is a rare example of a rather legitimate use case which is also fairly \u201cwhite hat\u201d, so that\u2019s nice. I do believe it\u2019s technically illegal / against the EULA, but this a obviously a  force majeure case. Anyways, please pay for things you enjoy, and only those because anti-consumerism is cool.\n  This can, perhaps surprisingly, be the most tricky part. You have all of the disassembled code, and no idea where to look. True, some games ship with some level of debug symbols, making function names readable, but this one doesn\u2019t. Hopper gives you \u201csub_a8cbb6\u201d and you\u2019ll have to make do with that.\n Thankfully, we do have a head start: our  log file. It\u2019s quite likely that writing to the log uses  string literals, which basically means it\u2019s ASCII hardcoded in the executable. That\u2019s something you can grep for, because no amount of compiling will delete it (code obfuscation might hide it though. Thankfully, this isn\u2019t the case here). Grepping for string literals is usually the first thing you\u2019ll do when disassembling something. So let \u2019s go ahead and type \u201cfound vendor \u201din the Hopper search, and  ...\n  On its own, this really wouldn\u2019t move you forward too much. But since the adress of this \u201cliteral string\u201d is hardcoded, you can actually find references to it. Hopper does that for you in the green bits on the right : \u201cDATA XREF=sub_1d5908+1252\u201d. Double-clicking on that will take you to the  sub_1d5908 procedure, our hero of the day.\n  There we find assembly code. Unlike what you may think, assembly code is very easy to read. The hard part is understanding it.\n Hopper uses \u2018Intel Syntax\u2019 by default, which means the first operand is the destination, and the second one is the source. On the highlighted line, you see  mov dword [esp+0x1DC8+var_1DC4], aXmlRenderConfi. Let\u2019s unpack that.\n  mov is the MOV instruction, famously  turing-complete on x86. It moves (well, it copies) data from A to B, which basically means it reads A and writes it at B. Given what I\u2019ve told you above,  aXmlRenderConfi is A, and  dword [esp+0x1DC8+var_1DC4] is B, the destination. Let\u2019s unpack that further.\n aXmlRenderConfi is actually Hopper helping us. The truth is, this is an alias for the memory address of the string literal we clicked on a few seconds ago. If you split the window and look at things in Hex-mode (the  preferred hacker mode anyways), you\u2019ll see  88 18 83 00 on the right there.\n  If you \u2018reverse\u2019 that in just the right way, it\u2019s 0x00831888, the memory address of the string literal (it\u2019s even highlighted in yellow in one of the above screenshots). So that\u2019s one mystery solved: we\u2019re MOV-ing, i.e. writing, the address 0x00831888.\n Why is it spelled  88 18 83 00 and not  00 83 18 88 ? Well, this is because of  Endianness, a rather arcane topic which usually has little impact. It\u2019s just one of those things that make people go \u201cyou know, computers don\u2019t work\u201d (I\u2019ve looked for a citation for this, and failed, but I know it\u2019s out there). What it means for us is that all numbers we\u2019ll look at today have this problem.\n You might have noticed that I\u2019ve said we wrote the address, and this is right: we don\u2019t actually care about the content, which happens to be a NULL-terminated string literal. We\u2019re writing the address because code down the line will refer to that address. It\u2019s a pointer.\n What about  dword [esp+0x1DC8+var_1DC4] then? This one is trickier.   dword technically means we are operating on \u201cdouble-words\u201d, aka 16*2 bits. Which means we\u2019re copying 32 bits. Recall: our memory address is  0x00831888, which is 8 hexadecimal characters, and each hexadecimal character can take 16 values, which is 4 bits of data. So that \u2019s 8*4 = 32. By the way, that \u2019s where \u201c32 bits \u201din computer systems comes from. If we were using 64 bits, our memory address would be written 0x001122334455667788,  ...\n Now, what\u2019s that bracketed bit? The brackets mean we\u2019ll compute whatever is inside, and treat it like a pointer. Our MOV will thus write at whatever memory address this evaluates to. Again, let\u2019s break it down (and don\u2019t worry, once this is done, you\u2019ll basically know how to read assembly code in Intel Syntax).\n esp is a  Register, which is the closest equivalent of a variable in assembly. The x86 architecture has plenty, they\u2019re somewhat distinct in their usage, but we generally won\u2019t care much. You can find details  here. Just know that there are special registers for floating point, and we also have \u201cflags\u201d which are used for comparisons and such. The rest is simply numbers written as hexadecimals, and Hopper has reprocessed them somewhat to help.  var_1DC4 is  -0x1DC4, you can see that at the  ...\n So, to recap, we\u2019re writing the address of our string literal to \u201cesp+4\u201d. This is correct information, but extremely useless. What does it mean?\n This is the tricky bit when reading Assembly code: figuring out what this is supposed to be doing. Here, we have a head start: we know that this is probably logging something. So we can expect a function call that logs stuff. Let\u2019s look around.\n  There are several similar calls above, and the a  call instruction, which calls a procedure. Hopper would usually say it (not sure why it doesn\u2019t here), but what is happening is basically that we\u2019re setting up the arguments for our function call. If you click around the different sub-calls, you\u2019ll see stuff named imp___jump_table___Z22StringVPrintfExWorkerAPcmmPS_PmmPKcS_. This is a  name-mangledfunction name, and \u201cPrintf \u201dis enough to now that this indeed prints things. Don \u2019t care  ...\n  At this point, you\u2019ve completely lost track of what you were doing: trying to make the game acknowledge that your 2015 graphics card is indeed powerful enough to run a 2005 game. Let\u2019s recap. We\u2019ve found the place where logging takes place. If we\u2019re lucky, this is also the place where the code that checks our settings and our graphics cards capabilities is. And, thankfully, we are lucky (there\u2019s a pretty good chance I couldn\u2019t write this article otherwise).\n To get the bigger picture, we\u2019ll use Hopper\u2019s Control Flow Graph feature, which breaks down code in little blocks and draws arrows to represent the various jumps. This is much easier to grok than the actual assembly which is often terribly out of order.\n  Our logging call is in the middle of a terribly long function, because again, that\u2019s what AAA games do. This is the point where one would look around for other string literals and Hopper \u201chints\u201d, hoping to find something. I\u2019ll give you some pointers (eh). You\u2019ll see at the top of the procedure the rest of the logging, and down below some interesting bits about \u201cforcing dx7\u201d or \u201cVery High\u201d settings and a pixel shader version issue\u2026  Which we have.\n The log of our \u201chacked\u201d data said we had pixel shader version 0.0 which was incompatible with the \u201cHigh\u201d setting. That code lives in the bottom-left of our function, and if you squint you\u2019ll see something peculiar (highlighted in terrible style by yours truly): this is just 4 times the same code, for each of \u201cVery High\u201d, \u201cHigh\u201d, \u201cMedium\u201d and \u201cLow\u201d. And yes, this took me hours to see.\n  The only differences are that we are writing \u201c0x0\u201d, \u201c0x1\u201d, \u201c0x2\u201d and \u201c0x3\u201d in a bunch of places. This looks suspiciously similar to our Settings file from earlier and the  optiongrfxshaderquality setting (well, you might not know that yet. But it does, believe me).\n At this point, we could try several things, and indeed I did. But to cut this short \u2014 he says, now almost 3000 words in \u2014 we\u2019ll do the right thing: figure out why our pixel-shader check fails. Let\u2019s look for a branch. The logging block is linear, so it must be before.\n  Indeed, right above that is a  jb instruction, a jump instruction (think \u201cgoto\u201d). This is a \u201c conditional jump\u201d, and the condition is \u201c if below\u201d. The way Assembly \u2018ifs\u2019 work is through the  register flags I briefly mentioned before. Just know that usually you simply have to look at the instruction above: that one probably sets the flag. That instruction is often  cmp or  test , but here it\u2019s  ucomiss . That\u2019s barbarian. It\u2019s also easy to Google:  ucomiss. It \u2019s a compare instruction  ...\n Now how do we fix this? Well, this compare instruction compares with the value in  xmm0 , which is set in the line above:  movss xmm0, dword [eax+0xA2A8] . MOVSS is a special \u201cmove\u201d instruction for floating-point registers, and we\u2019re writing 32 bits from whatever eax+0xA2A8 evalutes to.\n   We\u2019re finally ready to l33t our way in the game\u2019s High setting. What we want is to take the \u201cred\u201d path in the CFG above, and skip this \u201cwrong pixel shader version\u201d logic. We can achieve that by making the comparison succeed, by reversing the jump condition, but we have one more trick: the code is setup such that deleting the jump will make us take the \u201cred\u201d path. Let\u2019s simply replace the jump with a  nop, an operation that does nothing (you can \u2019t simply delete \u2014or add \u2014data  ...\n I recommend switching out of CFG for this, as Hopper kinda freaks out otherwise. If you do it right, you\u2019ll see some red bits in the Hex window.\n  Those red bits are the changes we\u2019ve made. At this point, if you\u2019ve paid for Hopper, you can simply save the file. But I haven\u2019t, so I\u2019ll open the executable in Hex Fiend, find the proper region (by copying a section from Hopper in the Find tab of Hex Fiend), and modify it manually. Be careful here, you can break everything, so I\u2019d recommend copying the original executable somewhere.\n With that done, start the game, hop on to the settings\u2026 And Hurray, you can choose \u201cHigh\u201d. Can\u2019t choose \u201cmedium\u201d though. And you can\u2019t use the high shadow settings. But still, progress !\n   Truth is, there is a better way to fix this. Our solution worked somewhat, but we can do better by making the condition succeed in the proper way: by actually making the game think our graphic card has 2.0 capability.\n If you recall, the game loaded up the value at  eax+0xA2A8 . We can use Hopper to figure out what is originally written there. What we\u2019re looking for is an instruction where 0xA2A8 appears in the \u2018destination\u2019 operand (I use 0xA2A8 because it looks quite specific and we can\u2019t be sure the same register will be used elsewhere). Hopper highlighting is very useful here, as we can simply click on 0xA2A8 and look for yellow bits in the CFG.\n  Victory is found a fair bit above: we are writing the value of some floating-point register, as expected. I confess I don\u2019t really understand what is happening right before that (best guess: the game checks for texture compression capabilities), but that\u2019s not really important. Let\u2019s write \u201c2.0\u201d and be on our way.\n To do that, we\u2019ll use Hopper\u2019s \u201cAssemble instruction\u201d, and then do the same hex-fiend manipulation.\n  You\u2019ll notice that something weird happened: we\u2019ve \u201ceaten\u201d the  jb instruction. That\u2019s because our new instruction takes up more bytes than the one before, and as said above we can\u2019t add or delete data from an executable to preserve offsets. So Hopper had no choice but to destroy the  jbinstruction. This could be a problem, and we might fix it by actually moving the instruction above (we no longer need to set up xmm3 after all). Here, it \u2019ll work anyways because we \u2019re taking the branch we wanted  ...\n If you start things up\u2026 Well, nothing\u2019s really changed. My best guess is that the Intel 9 series is not fast enough and the game complains. It\u2019s no biggie, because what we really want is that \u201cVery High\u201d goodness.\n What was the most powerful card around 2004? The NVIDIA GeforceFX 6800. Let\u2019s trick the game into believing that\u2019s what we have.\n   What we know is that the game uses Hex codes to identify graphics card, and it\u2019s fetching stuff from data files. We know that this must take place in the function we\u2019ve been looking at (or at least it\u2019d be really weird if it didn\u2019t). So we should be able to find the code doing it. Still, this might be tricky, since we don\u2019t really know what to look for.\n We do have one hint: the options are acting weird, with this \u201cLow/High but no Medium\u201d business. So perhaps there is other code handling this \u201cVery High\u201d, \u201cHigh\u201d, \u201cMedium\u201d, \u201cLow\u201d thing. And indeed, there is, in this very function. It\u2019s much earlier in the CFG, and it looks interesting.\n  We can assume that the raw data is some form of XML, because that\u2019s quite likely given there\u2019s several other data files that are XML. And XML is basically a bunch of pointers, and attributes. So this code here is likely checking for some XML attributes (indeed below there is a \u201cexpected one of ID, Very High \u2026\u201d which looks a lot like a file sanity-check). We can kind of imagine an XML structure like that, with booleans for the shader qualities:\n  The very interesting bit is on the left of the CFG (well, it could be on the right for you, but it\u2019s on the left in the above screenshot): we see the same  var_CC which is used by the code that logs the device ID. So  ebp+var_CCprobably refers to our device ID, 0x2773. The weird thing is the first \u201ccheck \u201ddoesn \u2019t show a string literal, but that \u2019s a Hopper bug: the adress 0x0089da8e contains Hex Data 69006400, which is UTF-16 for \u201cid \u201d(the fact it \u2019s UTF16 is probably why Hopper cannot grasp  ...\n You know what? Let\u2019s start a debugger and check it out for real.\n  Open a terminal window, and start lldb (just type lldb and enter). First we need to tell LLDB to target Age 3, then we can run the game by calling  run . So far, so good. The game runs, nothing useful is gained.\n  What we need to do is add a breakpoint: we want to stop the execution when we reach the code above to check our assumptions. We don\u2019t have source code, but that doesn\u2019t matter: we can set breakpoints at a memory address. And we do have the address of the code. Let\u2019s break at the MOV call that fetches \u201cid\u201d, its address is 0x001d5e68. Setting up the breakpoint is as easy as  br set -a 001D5E68. When we run, the game stops there and LLDB shows the disassembly (in AT&amp;T syntax, not Intel,  ...\n  To move further, let\u2019s \u201cstep instruction\u201d. The shortcut is  ni . After a few times, you\u2019ll notice you\u2019re back where you were. This is a loop! It makes perfect sense: we\u2019re probably iterating over some XML. Hopper was in fact showing this, if you follow the CFG you\u2019ll see a (possible) loop.\n  Its exit condition is that  ebp+var_1D84 must be non-null. And we see some code setting that right where I highlighted the interesting  var_CC stuff.\n  We\u2019ll look at registers with  reg r , and our memory value with  mem read $ebp-0x28 .  eax indeed contains 0x2773, and the value in memory is now 0x00A0. If you  thread c a few times, you\u2019ll see that we\u2019re iterating different IDs, checking for a match. At some point it matches, exits the loop, and the game starts. So now we know how to control this.\n Remember the log file: it found both device and vendor. So there\u2019s probably a similar loop for the vendor somewhere else. Indeed, it\u2019s quite similar and right above in the CFG. The loop is slightly simpler, and we\u2019re looking for \u201cvendor\u201d.\n This time the comparison is with  var_D0 . This is indeed used by the logger for the vendor ID. If we put a breakpoint there and check things out, we see our familiar 0x8086 in  eaxand we\u2019re comparing against 0x10DE at the moment. Let\u2019s write that into  eax and see what happens.\n  So 0x10DE is NVIDIA. In fact, looking at the data file would have hinted at that\u2026 But that\u2019s just not fun. Now the question is: what\u2019s the identifier of the GeforceFX 6800? We could also use LLDB and just try every identifier, but that\u2019ll take some time (as there are many, I\u2019ve tried for a while). So let\u2019s look into render.bar this time.\n  Well, this is a bit of a messy file. But after the Geforce FX 6800 tags, you can see a bunch of identifiers. One of those is probably a match. Let\u2019s try 00F1.\n The simplest way to test this is through LLDB by setting the appropriate breakpoints \u2014 I\u2019m skipping, but 00F1 works (thankfully).\n At this point, the question becomes \u201cHow do we make this permanent?\u201d It seems like a simple way would be to change the  var_CC and  var_D0 values to 0X00F1 and 0X10DE, respectively. We just need to get some code-space to do that.\n One simple solution is to NOP one of the logging calls, for example the subsystem call. It\u2019ll free up a few dozen bytes, more than needed. Let\u2019s select it all, and NOP it. Then we simply need to MOV some things in our variables: Assemble  mov dword [ebp+var_CC], 0xF1 and  mov dword [ebp+var_D0], 0x10DE .\n  Let\u2019s start up the game. Now we\u2019re getting somewhere: you can pick from Low, Medium or High, and you can activate High shadows.\n  But we still can\u2019t get Very High, and that makes Afroman unhappy. What\u2019s going on?\n  Right. As it turns out, the Geforce FX 6800 is supposed to support pixel shader version 3.0, and we\u2019ve configured ourselves for 2.0. This is a simple fix at this point: we just need to write float 3.0 in  ebp+0xA2A8 . That\u2019s 0x40400000.\n  And that\u2019s the end of the road. Thank FUCK, and thanks for reading.\n As a freebie, since every resource I\u2019ve found online is broken, terrible quality or incomplete, here\u2019s what the settings actually look like in-game.\n Medium is acceptable, but the lack of shadows hurts. From what I can tell, Very High mostly adds a completely different LUT (good explanation at \u201cColor Grading\u201d  here), distance fog, perhaps even a different lighting model altogether? It looks quite different, which is somewhat strange.\n  The blog I\u2019ve linked just above is excellent at breaking down modern rendering pipelines:  http://www.adriancourreges.com/blog/\n Have a look at 0 A.D., an open-source (the libre kind, not the Docker kind) RTS games in the same genre:  https://play0ad.com . It needs devs.\n If you want to know more about the XMB format, you can look at  0 A.D.\u2019s code for it. I haven\u2019t actually checked, but I\u2019m pretty sure it\u2019s the same format, because the guy who wrote the  XMB decoder for Age 3 on Age of Empires heaven (that takes me back, though I was more active on RoN back then) is the same guy who committed those files in 2004 in the 0 A.D. source code. So that\u2019s a fun bit of code paleontology. Thanks for all your work Ykkrosh.\n I also distinctly remember reading a great tutorial on how to use Hopper, but I couldn\u2019t find the link again. If somebody knows what I\u2019m talking about\u2026\n Finally, I\u2019d like to plug the Cosmic Frontier project: a remake of the classic Escape Velocity series (Override specifically, but Nova-compatible). It\u2019s such a great game, and it\u2019s such a shame it\u2019s not more well known. They\u2019ve got a  kickstarter running, and the lead dev has a very interesting  dev blog where they use Hex Fiend to reverse-engineer the data formats of the original game. It\u2019s a great read. If you think  this was crazy, in one article they:\n Start up an emulator for Classic Mac to be able to use long-deprecated APIs to read the encrypted data file.\n Yeah. There are truly dedicated people out there, and I do wish this project succeeds, because EV Nova is perhaps my favourite game of all time.", "posttime": "2020-05-03 03:34:22", "tags": "\u7834\u89e3,iii,age,\u6e38\u620f,game", "title": "\u5e1d\u56fdIII\u5728\u7740\u8272\u5668\u8d28\u91cf\u8bbe\u7f6e\u4e0a\u7684\u7834\u89e3\u65f6\u4ee3", "title_en": "Cracking Age of Empires III over shader quality settings", "transed": 1, "url": "https://medium.com/@lancelot.deferriere/cracking-age-of-empires-iii-over-shader-quality-settings-7f729528cf1d", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7834\u89e3", "iii", "age", "\u6e38\u620f", "game"]}, {"category": "", "categoryclass": "", "imagename": "421e964119b476daab1c1514b735f7c3.jpeg", "infoid": 1000397, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u573a\u5927\u6d41\u884c\u5bf9\u7ec4\u7ec7\u7684\u751f\u5b58\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u8bc1\u660e\u3002\u867d\u7136\u8bb8\u591a\u7ec4\u7ec7\u90fd\u5c48\u670d\u4e8e\u51a0\u72b6\u75c5\u6bd2\u9020\u6210\u7684\u7ecf\u6d4e\u5f71\u54cd\uff0c\u4f46\u4e5f\u6709\u5c11\u6570\u7ec4\u7ec7\u5728\u9006\u5883\u4e2d\u83b7\u5f97\u4e86\u5de8\u5927\u6536\u76ca\u3002\u4f8b\u5982\uff0cZoom\u548cCitrix\u7b49\u54c1\u724c\u62a5\u544a\u79f0\uff0c\u968f\u7740\u4e16\u754c\u9009\u62e9\u8fdc\u7a0b\u8fde\u63a5\uff0c\u6536\u5165\u548c\u5b63\u5ea6\u6536\u76ca\u90fd\u6709\u6240\u589e\u52a0\u3002\u540c\u6837\uff0c\u50cfGilead\u8fd9\u6837\u7684\u5236\u836f\u516c\u53f8\u4e5f\u8d70\u4e0a\u4e86\u76c8\u5229\u7684\u9053\u8def\u3002\n\u201c\u53cd\u8106\u5f31\u201d\u8fd9\u4e2a\u8bcd\u662f\u7531\u7eb3\u897f\u59c6\u00b7\u5854\u52d2\u5e03\u9996\u521b\u7684\uff0c\u7b80\u800c\u8a00\u4e4b\uff0c\u5b83\u7684\u610f\u601d\u662f\u201c\u4ece\u6df7\u4e71\u4e2d\u83b7\u76ca\u7684\u4e1c\u897f\u201d\uff0c\u6b63\u5982\u4ed6\u7684\u4e66\u201c\u53cd\u8106\u5f31\u201d\u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u3002\u73b0\u5728\u53cd\u8106\u5f31\u7684\u516c\u53f8\u53ef\u80fd\u4e0d\u662f\u6545\u610f\u8bbe\u8ba1\u6216\u5efa\u9020\u6210\u8fd9\u6837\u7684\uff0c\u4f46\u5b83\u4eec\u5728\u6b63\u786e\u7684\u65f6\u95f4\u62e5\u6709\u6b63\u786e\u7684\u4ea7\u54c1\u548c\u670d\u52a1\u3002\u5176\u4ed6\u7ec4\u7ec7\uff0c\u5982\u5fae\u8f6f\u548c\u4e9a\u9a6c\u900a\uff0c\u90e8\u5206\u662f\u53cd\u8106\u5f31\u7684\uff0c\u5bf9\u8fdc\u7a0b\u8fde\u63a5\u7684\u9700\u6c42\u589e\u52a0\uff0c\u4e91\u57fa\u7840\u8bbe\u65bd\u7684\u5347\u7ea7\u548cEssential.\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u62e5\u6709\u4e00\u79cd\u6216\u591a\u79cd\u5728\u5927\u6d41\u884c\u65f6\u671f\u5177\u6709\u6297\u8106\u6027\u7684\u4ea7\u54c1\u662f\u6709\u76ca\u7684\u3002\u5373\u4f7f\u6709\u5341\u79cd\u6613\u788e\u4ea7\u54c1\u53d7\u5230\u51b2\u51fb\uff0c\u4e00\u79cd\u6216\u51e0\u79cd\u9632\u8106\u4ea7\u54c1\u4e5f\u53ef\u4ee5\u5f25\u8865\u635f\u5931\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u6536\u76ca\u53ef\u80fd\u662f\u6682\u65f6\u7684\uff0c\u56e0\u4e3a\u968f\u7740\u5927\u6d41\u884c\u7684\u5e73\u606f\uff0c\u9700\u6c42\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u4e0b\u964d\u3002\n\u53cd\u8106\u5f31\u6027\u5e76\u4e0d\u5c40\u9650\u4e8e\u5f53\u524d\u6240\u9700\u7684\u6210\u529f\u4ea7\u54c1\u548c\u670d\u52a1\u3002\u63d0\u524d\u601d\u8003\uff0c\u5e76\u5236\u5b9a\u5f3a\u6709\u529b\u7684\u5e94\u6025\u8ba1\u5212\uff0c\u53ef\u80fd\u6709\u52a9\u4e8e\u5c06\u7ecf\u6d4e\u5d29\u6e83\u7684\u6124\u6012\u964d\u81f3\u6700\u4f4e\u3002\u6e29\u5e03\u5c14\u767b\u4e5f\u8bb8\u662f\u62e5\u6709\u5f3a\u5927\u5e94\u6025\u8ba1\u5212\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u5728\u8fc7\u53bb\u768417\u5e74\u91cc\uff0c\u4f5c\u4e3a\u201c\u4e0d\u53ef\u6297\u529b\u201d\u6761\u6b3e\u7684\u4e00\u90e8\u5206\uff0c\u6e29\u5e03\u5c14\u767b\u6bcf\u5e74\u652f\u4ed8200\u4e07\u7f8e\u5143\u7684\u5927\u6d41\u884c\u4fdd\u9669\uff0c\u5e76\u5c06\u83b7\u5f971.41\u4ebf\u7f8e\u5143\u7684\u8d54\u4ed8\u3002\u6e29\u5e03\u5c14\u767b\u53ef\u80fd\u4e0d\u4f1a\u4ece\u652f\u51fa\u4e2d\u83b7\u76ca\u3002\n\u54c1\u724c\u5e94\u8be5\u4ece\u522b\u4eba\u7684\u9519\u8bef\u548c\u4ed6\u4eec\u4e3a\u9632\u6b62\u672a\u6765\u540e\u679c\u800c\u91c7\u53d6\u7684\u884c\u52a8\u4e2d\u5438\u53d6\u6559\u8bad\u3002\u6e29\u5e03\u5c14\u767b\u57282003\u5e74SARS\u51a0\u72b6\u75c5\u6bd2\u75ab\u60c5\u540e\u75db\u82e6\u5730\u5438\u53d6\u4e86\u6559\u8bad\u3002\u5176\u4ed6\u4f53\u80b2\u548c\u5927\u578b\u5e74\u5ea6\u8d5b\u4e8b\u53ef\u4ee5\u901a\u8fc7\u826f\u597d\u7684\u5e94\u6025\u8ba1\u5212\u5f00\u59cb\u4fdd\u969c\u81ea\u5df1\u7684\u672a\u6765\u3002\n\u5c31\u4e2a\u4eba\u800c\u8a00\uff0c\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u7684\u542f\u793a\u662f\uff0c\u62e5\u6709\u4e00\u79cd\u6216\u591a\u79cd\u53cd\u8106\u5f31\u7684\u4ea7\u54c1\u3001\u670d\u52a1\u3001\u89c4\u5212\u548c\u60f3\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u5728\u9006\u5883\u4e2d\u53d8\u5f97\u66f4\u5f3a\u5927\u3002\u5bf9\u4e8e\u4e2a\u4eba\u6765\u8bf4\uff0c\u62e5\u6709\u591a\u79cd\u6280\u80fd\u548c/\u6216\u654f\u6377\u6027\u6765\u5b66\u4e60\u548c\u9002\u5e94\u8fdb\u6b65\u53ef\u80fd\u6709\u52a9\u4e8e\u53d8\u5f97\u6297\u51fb\u8106\u5f31\u3002", "note_en": "The pandemic is a real testament to organizations for their survival. While many are succumbing to the economic impact caused by the COVID-19, there are a handful number of organizations that are making a substantial gain out of the adversity. For example, brands such as Zoom and Citrix have reported an increase in revenue and quarterly earnings as the world chooses to stay connected remotely. Similarly, pharmaceutical companies such as Gilead is on a path to make profit.\n The word antifragility was coined by Nassim Taleb and in simple words, it means \u201cthings that gain from disorder \u201das described in his book, Antifragile. The companies that are antifragile now were perhaps not intentionally designed or built to be one, but they possess the right products and services at the right time. Other organizations such as Microsoft and Amazon are partially-antifragile with an increase in demand for remote connectivity, upscaling the cloud infrastructure and sales of essential  ...\n Having one or more products that are antifragile in times such as pandemic is proving to be beneficial. Even if ten fragile products take the hit, one or more antifragile products can compensate for the losses. However, the gain could be momentary as demands decline over time as the pandemic settles.\n Antifragility is not limited to successful products and services that are need of the hour. Thinking ahead-in-time and having a strong contingency planning could help minimize the wrath of a collapsing economy. Wimbledon is perhaps a good example of having a strong contingency plan. For the last 17 years, Wimbledon paid $2 million dollars per year in pandemic insurance as part of the \u201cforce majeure \u201dclause and will be receiving $141 million as a payout. Wimbledon might not gain from the payout  ...\n Brands should learn from the mistakes of others and the actions taken by them to prevent future consequences. Wimbledon learnt the lesson the hard way after the 2003 SARS-CoV epidemic. Other sporting and large annual events could start securing their future with good contingency plans.\n Personally, the takeaway from the coronavirus pandemic is that having one or more antifragile products, services, planning and ideas could help emerge out stronger in adverse times. In individuals, having multiple skills and/or agility to learn and adapt to advancements could help being antifragile.", "posttime": "2020-05-03 03:34:11", "tags": "\u66b4\u9732,exposed,\u4ea7\u54c1,antifragile", "title": "\u8fd9\u573a\u5927\u6d41\u884c\u66b4\u9732\u4e86\u53cd\u8106\u5f31\u6027\u3002", "title_en": "The pandemic has exposed antifragility", "transed": 1, "url": "https://medium.com/@santhoshsundar/the-pandemic-has-exposed-antifragility-c37dc7ae4855", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u66b4\u9732", "exposed", "\u4ea7\u54c1"]}, {"category": "", "categoryclass": "", "imagename": "b784fdd044b45744e9e7f4ab7fa86ef3.png", "infoid": 1000396, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9759\u6001\u7ad9\u70b9\u662f\u6700\u597d\u7684\u3002\u5b83\u4eec\u662f\u6700\u5b89\u5168\u3001\u6700\u5feb\u7684\u7f51\u7ad9\u3002\u5b83\u4eec\u975e\u5e38\u9002\u5408\u533f\u540d\u7528\u6237\uff0c\u4f60\u4f1a\u5e0c\u671b\u5185\u5bb9\u7f16\u8f91\u6709\u4e00\u4e2a\u5b89\u5168\u548c\u9690\u85cf\u7684\u540e\u7aef\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5728\u90a3\u91cc\u7ba1\u7406\u5185\u5bb9-\u4f46\u5185\u5bb9\u53ef\u4ee5\u5728\u5176\u4ed6\u5730\u65b9\u63d0\u4f9b\u3002\n\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u641c\u7d22\u53ef\u80fd\u4f1a\u66f4\u5177\u6311\u6218\u6027\u3002\u5bf9\u4e8e\u50cflunr.js\u8fd9\u6837\u7684\u672c\u5730\u641c\u7d22(\u4ee5\u53ca\u4e0e\u4e4b\u96c6\u6210\u7684Drupal\u6a21\u5757)\uff0c\u6709\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u8fd9\u662f\u76f8\u5f53\u6709\u9650\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u672c\u5730\u7d22\u5f15\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u8ba9\u4e00\u4e9bJS\u6765\u67e5\u770b\u5b83\uff0c\u4f46\u8fd9\u65e0\u6cd5\u4e0e\u6210\u719f\u7684\u641c\u7d22\u5f15\u64ce(\u5982Elasticsearch)\u76f8\u5339\u654c\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u4e0e\u5927\u5bb6\u5206\u4eab\u6211\u4eec\u5efa\u7acb\u7684\u4e00\u4e2a\u6f14\u793a\u7f51\u7ad9\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5927\u5f97\u591a\u7684\u7f51\u7ad9\u7684\u6982\u5ff5\u8bc1\u660e\u3002\u6211\u4e0d\u6253\u7b97\u8be6\u8ff0\u9759\u6001\u7ad9\u70b9\u7684\u4f18\u52bf\uff0c\u800c\u662f\u8981\u4e0e\u5927\u5bb6\u5206\u4eab\u6307\u5bfc\u6211\u4eec\u7684\u9ad8\u7ea7\u6982\u5ff5\uff0c\u4ee5\u53ca\u4e00\u4e9b\u6280\u672f\u63d0\u793a\u3002\u867d\u7136\u5177\u4f53\u7684\u7ec6\u8282\u4e0eDrupal\u65e0\u5173--\u6211\u4eec\u7684\u5ba2\u6237\u7ad9\u70b9\u5728Drupal\u4e2d\uff0c\u56e0\u6b64\u56f4\u7ed5\u5b83\u8fdb\u884c\u6784\u5efa\u975e\u5e38\u65b9\u4fbf\u3002\u4f46\u662f\u4f60\u771f\u7684\u53ef\u4ee5\u7528\u4efb\u4f55\u4e00\u79cd\u8bed\u8a00\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u4f7f\u7528\u9759\u6001\u7ad9\u70b9\uff0c\u90e8\u7f72\u548c\u6062\u590d\u90e8\u7f72\u5f88\u5bb9\u6613\u3002\u5982\u679c\u51fa\u4e86\u4ec0\u4e48\u5dee\u9519\uff0c\u8fd9\u4e0d\u8fc7\u662fgit\u63a8\u9001\u6216git\u6062\u590d\u800c\u5df2\u3002\u4f46\u662f\u641c\u7d22\u600e\u4e48\u529e\u5462\uff1f\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u63d0\u5230\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u7ee7\u7eed\u4f7f\u7528Elasticsearch\u6765\u641c\u7d22\u805a\u5408(\u4e5f\u5c31\u662f\u3002\u65b9\u9762)\u3001\u62fc\u5199\u68c0\u67e5\u7b49\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5982\u4f55\u652f\u6301\uff0c\u4f8b\u5982\uff0c\u5728\u90e8\u7f72\u4e2d\u56de\u6eda-\u786e\u4fdd\u641c\u7d22\u59cb\u7ec8\u53ea\u901a\u8fc7\u90e8\u7f72\u7684\u9759\u6001\u7ad9\u70b9\u4e2d\u5b58\u5728\u7684\u5185\u5bb9\u8fdb\u884c\u641c\u7d22\u3002\u8c22\u5929\u8c22\u5730\uff0cElasticsearch\u652f\u6301\u7d22\u5f15\u514b\u9686\uff0c\u6240\u4ee5\u6211\u4eec.\u3002\n\u9ed8\u8ba4\u7d22\u5f15\u662fDrupal\u5c06\u8fde\u63a5\u5230\u7684\u7d22\u5f15\uff0c\u5b83\u5c06\u662faread\u548cwrite\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u201c\u4e3b\u201d\u7d22\u5f15\uff0c\u5c06\u4ece\u8be5\u7d22\u5f15\u4e2d\u83b7\u53d6\u5feb\u7167\u3002\n\u5f53\u6211\u4eec\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9759\u6001\u7ad9\u70b9\u65f6\uff0c\u6211\u4eec\u8fd8\u4f1a\u521b\u5efa\u9ed8\u8ba4\u7d22\u5f15\u7684\u514b\u9686\u3002\u8fd9\u5c06\u662f\u4e00\u4e2a\u53ea\u8bfb\u7d22\u5f15\u3002\n\u6211\u4eec\u8d1f\u8d23\u8c03\u7528Elasticsearch\u7684JS\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u77e5\u9053\u53ea\u8bfb\u7d22\u5f15\u7684\u540d\u79f0\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5c06\u90e8\u7f72\u56de\u6eda\u5230\u4ee5\u524d\u7684\u7248\u672c\uff0cJS\u4ee3\u7801\u5c06\u8fde\u63a5\u5230\u6b63\u786e\u7684\u7d22\u5f15\u3002\n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0bElasticsearch\u5b9e\u4f8b\u53ca\u5176\u5bf9\u5916\u516c\u5f00\u60c5\u51b5\u3002\u5c31\u50cf\u6211\u4eec\u5c06Drupal\u653e\u5728\u540e\u7aef\uff0c\u8fdc\u79bb\u516c\u4f17\u89c6\u7ebf\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528Elasticsearch\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u5728Google Cloud\u4e0a\u6258\u7ba1Elasticsearch\u5b9e\u4f8b\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u6765\u63d0\u4f9b\u4e00\u4e2a\u9762\u5411\u516c\u4f17\u7684SSLed URL-\u53cd\u8fc7\u6765\uff0c\u5b83\u5c06\u4f7f\u7528\u6240\u9700\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u9632\u706b\u5899\u89c4\u5219\u8c03\u7528Elasticsearch\uff0c\u4f8b\u5982\u9632\u6b62\u4efb\u4f55\u7ba1\u7406\u5458\u7c7b\u578b\u7684\u8bf7\u6c42\u8bbf\u95ee\u8be5\u5b9e\u4f8b\uff0c\u6216\u8005\u963b\u6b62\u4efb\u4f55\u8bf7\u6c42.\u3002\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5f00\u59cb\u7814\u7a76Tome\uff0c\u8fd9\u662f\u4e00\u4e2a\u5141\u8bb8\u5c06Drupal\u7ad9\u70b9\u5bfc\u5165\u9759\u6001\u7ad9\u70b9\u7684Drupal\u6a21\u5757\u3002\u867d\u7136\u5b83\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u800c\u4e14\u6211\u786e\u4fe1\u4f7f\u7528\u5b83\u4f1a\u6709\u597d\u5904\uff0c\u4f46\u6211\u8ba4\u4e3a\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u5e76\u6ca1\u6709\u771f\u6b63\u9700\u8981Drupal\u672c\u8eab\u6765\u63d0\u4f9b\u5bfc\u51fa\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5f00\u6e90\u5de5\u5177\uff0c\u5b83\u4eec\u5df2\u7ecf\u5b58\u5728\u597d\u51e0\u5e74\u4e86\u3002\n\u7136\u540e\u5f00\u59cb\u4e86\u4e00\u573a\u6bd4\u9884\u671f\u66f4\u957f\u7684\u8bd5\u9a8c\uff0c\u5e76\u5bf9HTTrack\u548cwget\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u867d\u7136\u6211\u4eec\u6700\u7ec8\u8fd8\u662f\u6ca1\u6709\u53bb\uff0c\u4f46\u5206\u4eab\u4e00\u4e9b\u6211\u4eec\u7684\u7ecf\u9a8c\u662f\u503c\u5f97\u7684\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e86HTTrack\uff0c\u6211\u4eec\u5df2\u7ecf\u7528\u5b83\u6765\u5e2e\u52a9\u6211\u4eec\u5c06\u4e00\u4e9b\u8001\u7f51\u7ad9\u79fb\u5230\u9759\u6001\u72b6\u6001\uff0c\u5b83\u505a\u5f97\u5f88\u597d\u3002\u4ee4\u4eba\u60ca\u53f9\u7684\u51ef\u4f26\u00b7\u53f2\u8482\u6587\u68ee(Karen Stevenson)\u4e5f\u5c31\u6b64\u5199\u4e86\u4e00\u7bc7\u5f88\u68d2\u7684\u5e16\u5b50\uff0c\u5185\u5bb9\u66f4\u8be6\u7ec6\u3002HTTrack\u7ed9\u6211\u7684\u5370\u8c61\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u62e5\u6709\u770b\u8d77\u6765\u50cf\u770b\u8d77\u6765\u4e00\u6837\u8fc7\u65f6\u7684Asite\u7684\u5de5\u5177\u6765\u8bf4\uff0c\u5b83\u5de5\u4f5c\u5f97\u51fa\u5947\u5730\u597d\u3002..\u3002\n\u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u5c31\u505a\u4e86\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u4ee5realclient\u7ad9\u70b9\u4e3a\u4f8b\u3002\u8fd9\u7acb\u5373\u4f53\u73b0\u4e86\u6700\u5927\u7684\u6311\u6218-\u5feb\u901f\u51fa\u53e3\u4e0d\u7a33\u5b9a\u7684\u7f51\u7ad9\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5f53\u5b58\u6863\u4e00\u4e9b\u7ad9\u70b9\u65f6\uff0c\u5bfc\u51fa\u751a\u81f3\u9700\u8981\u4e00\u4e2a\u5c0f\u65f6\u4e5f\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\u3002\u4f46\u5982\u679c\u6211\u4eec\u8003\u8651\u7684\u662f\u4e00\u4e2a\u5b9e\u65f6\u7f51\u7ad9\uff0c\u5b83\u4f1a\u968f\u7740\u540e\u53f0\u5185\u5bb9\u7684\u6539\u53d8\u800c\u5b9a\u671f\u66f4\u65b0--\u5fc5\u987b\u7b49\u5f85\u8fd9\u4e48\u957f\u7684\u65f6\u95f4\u662f\u6709\u95ee\u9898\u7684\u3002\n\u8fd9\u5c31\u662f\u6211\u4eec\u5728HTTrack\u548cwget\u4e4b\u95f4\u6765\u56de\u8df3\u8dc3\u7684\u5730\u65b9\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u5f97\u5230\u7684\u7ed3\u679c\u3002\u6211\u5c06\u9690\u85cf\u771f\u5b9e\u7684URL\uff0c\u8fd9\u6837\u60a8\u5c31\u4e0d\u4f1a\u50cf\u6211\u4eec\u90a3\u6837\u6ee5\u7528\u6211\u4eec\u5ba2\u6237\u7684\u7f51\u7ad9\uff01\uff1a)\u3002\n37\u5206\u949f\u53ef\u4fdd\u5b58\u7ea6450 MB\u7684\u5185\u5bb9(HTML\u4ee5\u53ca\u6240\u6709\u8d44\u4ea7\u3001\u56fe\u50cf\u548c\u6587\u4ef6)\u3002\n\u90a3\u6b21\u5c1d\u8bd5\u662f\u5728\u6211\u672c\u5730\u7684\u7535\u8111\u4e0a\u8fdb\u884c\u7684\u3002\u6240\u4ee5\u6211\u4eec\u65cb\u8f6c\u4e86\u4e00\u4e2aGoogle Cloud\u5b9e\u4f8b\uff0c\u770b\u770b\u4ece\u4e00\u4e2a\u6709\u66f4\u5f3a\u5927\u7684\u4e92\u8054\u7f51\u8fde\u63a5\u7684\u670d\u52a1\u5668\u6267\u884c\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u5426\u4f1a\u5feb\u5f97\u591a--\u4f46\u5b83\u4e0d\u662f\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u51b3\u5b9a\u6392\u9664\u6240\u6709\u7528\u6237\u751f\u6210\u7684\u6587\u4ef6(\u56fe\u50cf\u3001PDF\u7b49)\u3002\u5176\u60f3\u6cd5\u662f\uff0c\u6587\u4ef6\u5c06\u88ab\u4e0a\u4f20\u5230\u67d0\u4e9b\u5b58\u50a8\u670d\u52a1\uff0c\u5982AWS\u6216Google Cloud\uff0c\u5e76\u4ece\u90a3\u91cc\u63d0\u4f9b\u670d\u52a1\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u5185\u5bb9\u7f16\u8f91\u5668\u5728Drupal\u4e2d\u4e0a\u4f20\u65b0\u6587\u4ef6\u65f6\uff0c\u5b83\u5c06\u201c\u8fdc\u7a0b\u201d\u4fdd\u5b58\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u4e0a\u3002\n\u8fd9\u6837\u505a\u8282\u7701\u4e86\u76f8\u5f53\u591a\u7684\u65f6\u95f4\uff0c\u4f7f\u6211\u4eec\u7684120MB\u5185\u5b58\u51cf\u5c11\u5230\u4e8620\u5206\u949f\u3002\n\u7136\u540e\u6211\u4eec\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u589e\u52a0\u5e76\u53d1\u8fde\u63a5\u7684\u6570\u91cf\u3002HTTrack\u6709\u51e0\u4e2a\u9009\u9879\uff0c\u7279\u522b\u662f\u540d\u79f0\u53ef\u6015\u7684--\u7981\u7528-\u5b89\u5168\u9650\u5236\uff0c\u5b83\u5e94\u8be5\u5141\u8bb8\u6211\u4eec\u8f7b\u677e\u5730\u5bf9\u6211\u4eec\u81ea\u5df1\u7684\u7ad9\u70b9\u8fdb\u884cDDOS\uff0c\u6216\u8005\u901a\u8fc7\u8bbe\u7f6econne\u7684\u7279\u5b9a\u8ba1\u6570\u6765\u5b9e\u73b0", "note_en": "Static sites are the best. They are the most secure and fastest of sites. Theyare perfect for anonymous users, where you would want content editors tohave a secure and hidden backend where they can administer the content - buthave the content served elsewhere.\n Having search on top of that can be a bit more challenging. There are differentsolutions for having a local search like lunr.js (and aDrupal  module to integrate with it), butit\u2019s quite limited. That is, it will create a local index where you could havesome JS to look into it, but that is no match to full-blown search engines suchas Elasticsearch.\n In this blog post I will share a demo website we\u2019ve built as a proof of conceptfor a much larger site. I\u2019m not going to dwell on the advantages of staticsites, instead I\u2019m going to share the high-level concepts that guided us, alongwith some technical tips. While the specific details have nothing to do withDrupal - our client\u2019s site is in Drupal, so it was convenient to build itaround it. But you can really do it with any language.\n    With static sites, deploying and reverting deploys is easy. It\u2019s not much morethan  git push or  git revertif something went wrong. But what about search?As we \u2019ve mentioned, we want to keep using Elasticsearch for things likeaggregations (a.k.a. facets), spell checks, etc. But how can we support, forexample, a rollback in the deploy - making sure that search is always searchingonly through the content that exists in the deployed static site. Thankfully,Elasticsearch supports index cloning, so we  ...\n The  default index is the one that Drupal will connect to, and it will be aread and write. That is, you can think of it as a \u201cmaster\u201d index, from which asnapshot will be taken.\n When we want to create a new static site, we would also create a clone of thedefault index. That will be a read-only index.\n Our JS app that will be in charge of calling Elasticsearch should know aboutthe name of the read-only index. So if we rollback a deploy to previousversions, the JS code will connect to the right index.\n A word about the Elasticsearch instance and its exposure to the outside. In asimilar way to how we place Drupal in the backend, away from the public eye,we could do the same with Elasticsearch. For example, when we hostElasticsearch instance(s) on Google Cloud, we can use a  loadbalancerto provide a public-facing,SSLed, URL - which, in turn, will call the Elasticsearch with any kind firewallrules needed, such as preventing any admin-type requests from hitting theinstance, or prevent any request  ...\n  We actually started our research looking into Tome, a Drupal module that allowsexporting a Drupal site into a static site. While it did work nicely, and I\u2019msure there could be benefits to using it, I\u2019ve thought that there wasn\u2019t reallyany specific need in our case for Drupal itself to provide the export. We mayas-well use other open source tools, which have been around for quite a fewyears.\n Then started a longer than anticipated trial and comparisons between HTTrack and wget. While we did eventually go withwget it\u2019s worth sharing some of our experience. First we\u2019ve tried HTTrack.We have already used it to help us move some old sites to be static, and it didthe job well. The amazing Karen Stevenson also wrote a  greatpostabout it that goes into more details. My impression from HTTrack is that it works surprisingly well for a tool that has asite that looks as outdated as it looks.  ...\n One important thing we\u2019ve done from the get go was take as example a realclient site. This immediately manifested the biggest challenge - exporting astatic site quickly. Normally, when archiving some site, it\u2019s totally fine forthe export to take even an hour. But if we\u2019re thinking of a live site, thatregularly updates as content in the backend is changed - having to wait so longis problematic.\n This is where we were jumping back and forth between HTTrack and wget. Lets seesome of the results we got. I\u2019m going to hide the real URL, so you won\u2019t abuseour client\u2019s site as much as we did! :)\n   37 minutes for about 450 MB of saved content (HTML along with all the assets,images, and files).\n That attempt was on my local computer. So we spinned a Google Cloud instance,to see if executing this from a server with a more powerful internet connectionwould be much faster - but it wasn\u2019t.\n So we decided to exclude all user-generated files (images, PDFs, etc). The ideawould be that files would be uploaded to some storage service like AWS orGoogle Cloud and be served from there. That is, when a content editor willupload a new file in Drupal, instead of saving it on the server, it will besaved \u201cremotely.\u201d\n  Doing so shaved quite a lot, and got us down to 20 minutes with 120 MB.\n Then we checked if we could increase the number of concurrent connections.HTTrack has a few options, notably the scarily-named  --disable-security-limitsthat should allow us to lightly DDOS our own site, or by setting a specificcount of connections (e.g.  -c16). However, we didn\u2019t seem to see a change inthe number of connections.\n Then we tried to update an existing static site by executing  httrack --update. This one was already considerably faster, and got us down to 4.5minutes, and this time we also saw multiple active connections.\n  After that I started looking into wget, running  wget --recursive --page-requisites --adjust-extension --span-hosts --convert-links --restrict-file-names=windows --domains example.com --no-parent --reject jpg,jpeg,png,zip,pdf,svg https://example.com/ (see gistfor explanation on each option).\n  After spending many hours digging in different forums and StackOverflow, I\u2019vedecided to go with wget, but I do think HTTrack should be considered if yougo with a similar solution. I believe it\u2019s a \u201cyour mileage may vary\u201dsituation.\n One shortcoming I found with wget, was that unlike HTTrack I couldn\u2019t tell itunder what name to save the HTML file. Instead of  /content/foo/index.html Igot the file as  /content/foo.html. Do you know how I solved it? With a hackequally nice as it\u2019s ugly. On Drupal I\u2019ve changed the path aliases pattern tobe  /content/[node:title]/index.html. I hope maybe someone will point me to a way ofgetting wget to do it for us.\n   My personal belief is that technical posts should put in the hands of theirreaders the means to get their hands dirty, experiment, and collaborate. So hereyou go, and here\u2019s the recipe for the demo repo:\n It was scaffolded out of our  Drupal 8 &amp; 9Starter and as such you can easilydownload and try yourself as ddev is the only requirement. All commands areexecuted from inside the ddev container - so no special installation isrequired.\n Follow the installationsteps, and it should result with a Drupal site, and dummy content. Installationshould give you an admin link, but you can always grab a new one with  ddev . drush uli.\n Next, let\u2019s create a static site with  ddev robo snapshot:create. The  Robocommandis responsible for clearing Drupal\u2019s cache, wget-ing the site and massaging ita bit, cloning the Elasticsearch index, and is even nice enough to ask you ifyou\u2019d like to run a local HTTP server to see your new static site. Notice howthe search is still working, but if you look inside the network panel, you\u2019dsee it calls a specific index. That\u2019s our \u201csnapshot\u201d read-only index.\n  Go ahead and make some changes to your site. Add/ delete content, or evenswitch the theme to Bartik.  ddev robo snapshot:create once more. Note that youmight need to hard refresh the page in the browser to see the changes.\n   I\u2019ve written the JS application for the search in Elm. We fetchdata from the correct index URL, and then we showthem in a paginated list. Like any app we\u2019ve written in Elm, It Simply Works\u2122.\n As Elm is already bundledwith the ddev container, we have a simple  Robo command to watchfor changes and compile them to the right place inside Drupal.\n Two important things we do when create a static site, is find &amp; replace a  JSvariablewhich determines if Elm is operating in Drupal context, or static site context.With this knowledge we could have different functionality. For example, in theDrupal context, we could have shown an Edit link next to each result. At thissame time, we also change the URL of the index, to the cloned one, so our JS appalways calls the right URL.\n  I believe we have been successful with our attempts, and the requirements wehad were well answered. Going with a static site provides considerablesecurity, performance and stability gains. Having JS to communicate with asnapshot-specific Elasticsearch index wasn\u2019t too hard and it\u2019s working nicely.Naturally, in the demo repo the app is quite basic, but it lays the foundationfor fancier features.\n The biggest challenge of exporting the static site in a speedy manner boilsdown to excluding any user generated assets or pages. But still, some exporttime is always to be expected. Finally having Robo commands executed insideddev is a convenient way to automate and share with other devs on the team.", "posttime": "2020-05-03 03:12:30", "tags": "elasticsearch,sites,\u5185\u5bb9,site", "title": "\u4f7f\u7528Elasticsearch\u7684\u9759\u6001\u7ad9\u70b9", "title_en": "Static Sites with Elasticsearch", "transed": 1, "url": "https://www.gizra.com/content/drupal-static-elasticsearch/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["sites", "\u5185\u5bb9", "site"]}, {"category": "", "categoryclass": "", "imagename": "394b52164dcab22052e41dca0334b63d.png", "infoid": 1000395, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u6709\u6ca1\u6709\u60f3\u8fc7\u7f16\u5199\u81ea\u5df1\u7684\u7f16\u8bd1\u5668\uff1f\u2026\u3002\u4ec0\u4e48\u4e8b\uff1f\u2026\u3002\u4f60\u5f53\u7136\u6709\uff01\u6211\u4e00\u76f4\u60f3\u5c1d\u8bd5\u7f16\u5199\u7f16\u8bd1\u5668\uff0c\u968f\u7740WebAssembly\u6700\u8fd1\u7684\u53d1\u5e03\uff0c\u6211\u6709\u4e86\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7406\u7531\u6765\u5c1d\u8bd5\u4e00\u4e0b\u3002\n\u6211\u6700\u521d\u7684\u8ba1\u5212\u662f\u53d1\u660e\u6211\u81ea\u5df1\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u521b\u5efa\u4e00\u4e2a\u9762\u5411WebAssembly\u7684\u7f16\u8bd1\u5668\uff0c\u5e76\u5728FullStackNYC\u5206\u4eab\u6211\u7684\u7ecf\u9a8c\u3002\u7b2c\u4e00\u90e8\u5206\u8fdb\u884c\u4e86\u8ba1\u5212\uff0c\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u6765\u6784\u5efa\u3001\u4fee\u8865\u548c\u6539\u8fdb\u6211\u7684\u7f16\u8bd1\u5668\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u8ba1\u5212\u7684\u6700\u540e\u4e00\u90e8\u5206\u8fdb\u884c\u5f97\u4e0d\u592a\u987a\u5229\u3002\u957f\u65f6\u95f4\u7684\u5ef6\u8bef\u548c\u6700\u7ec8\u7684\u53d6\u6d88\u610f\u5473\u7740\u6211\u7ec8\u7a76\u4e0d\u80fd\u53bb\u7ebd\u7ea6\u4e86\u3002\ud83d\ude14\ud83d\ude22\ud83d\ude2d\u3002\n\u56e0\u6b64\uff0c\u4e0e\u5176\u6d6a\u8d39\u6240\u6709\u7684\u5de5\u4f5c-\u6211\u60f3\u6211\u5e94\u8be5\u628a\u6211\u7684\u6f14\u8bb2\u5199\u6210\u535a\u5ba2\u5e16\u5b50-\u6240\u4ee5\u8fd9\u7bc7\u6587\u7ae0\u7684\u9605\u8bfb\u65f6\u95f4\u5c31\u662f\u201819\u5206\u949f\u2019\u3002\u6240\u4ee5\u8bf7\u5750\uff0c\u8bf7\u81ea\u4fbf\uff0c\u6211\u4eec\u8981\u5f00\u59cb\u2026\u4e86\u3002\n\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u542c\u8bf4\u8fc7WebAssembly\uff0c\u5e76\u4e14\u60f3\u8981\u4e00\u4e2a\u771f\u6b63\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u6211\u4f1a\u5411\u4f60\u5f7b\u5e95\u63a8\u8350\u6797\u514b\u62c9\u514b\u7684\u5361\u901a\u6307\u5357\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3WebAssembly\u7684\u201c\u662f\u4ec0\u4e48\u201d\uff0c\u4f46\u6211\u786e\u5b9e\u60f3\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u201c\u4e3a\u4ec0\u4e48\u201d\u3002\n\u4e0a\u56fe\u663e\u793a\u4e86\u5728\u6d4f\u89c8\u5668\u4e2d\u6267\u884c\u67d0\u4e9bJavaScript\u4ee3\u7801\u7684\u7b80\u5316\u65f6\u95f4\u7ebf\u3002\u4ece\u5de6\u5230\u53f3\uff0c\u4ee3\u7801(\u901a\u5e38\u662f\u4ee5\u6700\u5c0f\u7684\u4e71\u4e03\u516b\u7cdf\u7684\u5f62\u5f0f\u4ea4\u4ed8\u7684\uff01)\u3002\u88ab\u89e3\u6790\u6210AST\uff0c\u6700\u521d\u5728\u89e3\u91ca\u5668\u4e2d\u6267\u884c\uff0c\u7136\u540e\u9010\u6b65\u4f18\u5316/\u91cd\u65b0\u4f18\u5316\uff0c\u76f4\u5230\u5b83\u6700\u7ec8\u8fd0\u884c\u5f97\u975e\u5e38\u5feb\u3002\u73b0\u5728JavaScript\u901f\u5ea6\u5f88\u5feb--\u53ea\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u5c31\u80fd\u8ddf\u4e0a\u901f\u5ea6\u3002\n\u5e95\u90e8\u7684\u5173\u7cfb\u56fe\u76f8\u5f53\u4e8eWebAssembly\u3002\u7528\u591a\u79cd\u8bed\u8a00(RUST\u3001C\u3001C#\u7b49\u2026)\u7f16\u5199\u7684\u4ee3\u7801\u3002\u7f16\u8bd1\u4e3a\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u4ea4\u4ed8\u7684WebAssembly\u3002\u8fd9\u975e\u5e38\u5bb9\u6613\u89e3\u7801\u3001\u7f16\u8bd1\u548c\u6267\u884c-\u63d0\u4f9b\u5feb\u901f\u548c\u53ef\u9884\u6d4b\u7684\u6027\u80fd\u3002\nWebAssembly\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\u5f15\u8d77\u4e86\u4e0d\u5c0f\u7684\u8f70\u52a8\u3002\u5982\u6b64\u4e4b\u591a\uff0c\u4ee5\u81f3\u4e8e\u5728Stack Overflow\u7684\u5f00\u53d1\u8005\u6d1e\u5bdf\u529b\u8c03\u67e5\u4e2d\uff0c\u5b83\u88ab\u8bc4\u4e3a\u7b2c\u4e94\u79cd\u201c\u6700\u53d7\u6b22\u8fce\u201d\u7684\u8bed\u8a00\u3002\n\u8003\u8651\u5230\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0cWebAssembly\u662f\u4e00\u4e2a\u7f16\u8bd1\u76ee\u6807\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u5c06\u76f4\u63a5\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u7ed3\u679c\u3002\n\u8fd9\u662f\u6211\u6700\u521d\u63d0\u51faFullStackNYC\u6f14\u8bb2\u7684\u90e8\u5206\u52a8\u673a\u3002WebAssembly\u7684\u6280\u672f\u65b9\u9762\u771f\u7684\u5f88\u5438\u5f15\u4eba(\u8ba9\u6211\u60f3\u8d77\u51e0\u5341\u5e74\u524d\u76848\u4f4d\u8ba1\u7b97\u673a)\uff0c\u7136\u800c\u5927\u591a\u6570\u4eba\u6c38\u8fdc\u6ca1\u6709\u673a\u4f1a\u6d89\u8db3WebAssembly\u672c\u8eab-\u5b83\u53ea\u662f\u4e00\u4e2a\u4ed6\u4eec\u7f16\u8bd1\u5230\u7684\u9ed1\u5323\u5b50\u3002\n\u7f16\u5199\u7f16\u8bd1\u5668\u771f\u7684\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u673a\u4f1a\uff0c\u53ef\u4ee5\u6df1\u5165\u7814\u7a76WebAssembly\u7684\u7ec6\u8282\uff0c\u627e\u51fa\u5b83\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u800c\u4e14\u8fd9\u4e5f\u5f88\u6709\u8da3\uff01\n\u6700\u540e\u4e00\u70b9\uff0c\u6211\u7684\u76ee\u6807\u4ece\u6765\u4e0d\u662f\u521b\u5efa\u4e00\u79cd\u529f\u80fd\u9f50\u5168\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u4e0d\u662f\u4e00\u79cd\u771f\u6b63\u597d\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u6211\u7684\u76ee\u6807\u662f\u521b\u5efa\u4e00\u79cd\u201c\u8db3\u591f\u7684\u201d\u8bed\u8a00\uff0c\u4f7f\u6211\u80fd\u591f\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5448\u73b0\u66fc\u5fb7\u5e03\u7f57\u7279\u96c6(Mandelbrot Set)\u3002\u8be5\u8bed\u8a00\u662f\u4f7f\u7528\u6211\u7684\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210WebAssembly\u7684\uff0c\u8be5\u7f16\u8bd1\u5668\u662f\u7528\u6253\u5b57\u811a\u672c\u7f16\u5199\u7684\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u3002\n\u6211\u6700\u540e\u7ed9\u8bed\u8a00\u9e3f\u6c9f\u6253\u4e86\u4e2a\u7535\u8bdd\uff0c\u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u53ef\u4ee5\u5728\u7f51\u4e0a\u73a9\u3002\n\u5728\u5904\u7406\u7f16\u8bd1\u5668\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u4ece\u66f4\u7b80\u5355\u7684\u4e1c\u897f\u5f00\u59cb\uff0c\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u7684WebAssembly\u6a21\u5757\u3002\n\u4e0b\u9762\u662f\u4e00\u4e2a\u53d1\u5c04\u5668(\u8be5\u672f\u8bed\u7528\u4e8e\u63cf\u8ff0\u4e3a\u76ee\u6807\u7cfb\u7edf\u8f93\u51fa\u6307\u4ee4\u7684\u7f16\u8bd1\u5668\u90e8\u5206)\uff0c\u5b83\u521b\u5efa\u6700\u5c0f\u7684\u6709\u6548WebAssembly\u6a21\u5757\uff1a\n\u5e38\u91cfmagicModuleHeader=[0x00\uff0c0x61\uff0c0x73\uff0c0x6d]\uff1b\u5e38\u91cf\u6a21\u5757\u7248\u672c=[0x01\uff0c0x00\uff0c0x00\uff0c0x00]\uff1b\u5bfc\u51fa\u5e38\u91cf\u53d1\u5c04\u5668\uff1a\u53d1\u5c04\u5668=()=&gt\uff1bUint8Array\u3002\u4ece([.\u3002MagicModuleHeader\uff0c.\u3002ModeVersion])\uff1b\n\u5b83\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u201cMagic\u201d\u5934(\u5373ASCII\u5b57\u7b26\u4e32\\0asm)\u548c\u7248\u672c\u53f7\u3002\u8fd9\u516b\u4e2a\u5b57\u8282\u5f62\u6210\u6709\u6548\u7684WebAssembly(\u6216wasm)\u6a21\u5757\u3002\u66f4\u5178\u578b\u7684\u60c5\u51b5\u662f\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5c06\u4f5c\u4e3a.wasm\u6587\u4ef6\u4f20\u9001\u5230\u6d4f\u89c8\u5668\u3002\n\u5982\u679c\u8fd0\u884c\u4e0a\u9762\u7684\u547d\u4ee4\uff0c\u60a8\u4f1a\u53d1\u73b0\u8be5\u5b9e\u4f8b\u5b9e\u9645\u4e0a\u5e76\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6211\u4eec\u7684wasm\u6a21\u5757\u4e0d\u5305\u542b\u4efb\u4f55\u6307\u4ee4\uff01\n\u5982\u679c\u60a8\u6709\u5174\u8da3\u4eb2\u81ea\u5c1d\u8bd5\u8fd9\u6bb5\u4ee3\u7801\uff0c\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230--\u6bcf\u4e00\u6b65\u90fd\u6709\u4e00\u4e2a\u63d0\u4ea4\u3002\n\u8ba9\u6211\u4eec\u901a\u8fc7\u5b9e\u73b0\u4e00\u4e2a\u5c06\u4e24\u4e2a\u6d6e\u70b9\u6570\u76f8\u52a0\u7684\u51fd\u6570\u6765\u4f7fwasm\u6a21\u5757\u505a\u4e00\u4e9b\u66f4\u6709\u7528\u7684\u4e8b\u60c5\u3002\nWebAssembly\u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u53ef\u8bfb\u6027\u4e0d\u662f\u5f88\u597d(\u81f3\u5c11\u5bf9\u4eba\u7c7b\u800c\u8a00)\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u60a8\u901a\u5e38\u4f1a\u770b\u5230\u5b83\u662f\u4ee5WebAssembly\u6587\u672c\u683c\u5f0f(WAT)\u7f16\u5199\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4ee5WAT\u683c\u5f0f\u5448\u73b0\u7684\u6a21\u5757\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a$add\u7684\u5bfc\u51fa\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u6d6e\u70b9\u53c2\u6570\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u76f8\u52a0\u5e76\u8fd4\u56de\uff1a\n(MODULE(func$add(Param F32)(Param F32)(Result F32)GET_LOCAL 0 GET_LOCAL 1 f32.add)(export&#34\uff1badd&#34\uff1b(Func 0)\u3002\n\u5982\u679c\u60a8\u53ea\u60f3\u4f53\u9a8c\u4e00\u4e0bWat\uff0c\u53ef\u4ee5\u4f7f\u7528WebAssembly\u4e8c\u8fdb\u5236\u5de5\u5177\u5305\u4e2d\u7684wat2wasm\u5de5\u5177\u5c06WAT\u6587\u4ef6\u7f16\u8bd1\u6210wasm\u6a21\u5757\u3002\nWebAssembly\u662f\u4e00\u79cd\u4f4e\u7ea7\u8bed\u8a00\uff0c\u53ea\u6709\u4e00\u5c0f\u90e8\u5206(\u5927\u7ea660\u6761)\u6307\u4ee4\u96c6\uff0c\u5176\u4e2d\u8bb8\u591a\u6307\u4ee4\u4e0eCPU\u6307\u4ee4\u7684\u6620\u5c04\u975e\u5e38\u7d27\u5bc6\u3002\u8fd9\u4f7f\u5f97\u5c06wasm\u6a21\u5757\u7f16\u8bd1\u6210\u7279\u5b9a\u4e8eCPU\u7684\u673a\u5668\u7801\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\n\u5b83\u6ca1\u6709\u5185\u7f6e\u7684", "note_en": "Have you ever wanted to write your own compiler? \u2026 yes? \u2026 of course you have! I\u2019ve always wanted to have a go at writing a compiler, and with the recent release of WebAssembly, I had the perfect excuse to have a go.\n My original plan was to  invent my own programming language, create a compiler that targets WebAssembly, and share my experiences at  FullStackNYC. The first part went to plan, I spent many-an-evening building, tinkering and refining my compiler. Unfortunately the last part of my plan didn\u2019t go quite so well. Long delays, and an  eventual cancellation, meant that I wasn\u2019t going to make it to New York after all. \ud83d\ude14\ud83d\ude22\ud83d\ude2d\n So, rather than waste all that work - I thought I\u2019d write up my talk as a blog post instead - hence the \u201819 min\u2019 reading time for this article. So sit back, make yourself comfortable, and we\u2019ll begin \u2026\n  If you haven\u2019t heard of WebAssembly before, and want a really detailed introduction, I\u2019d thoroughly recommend  Lin Clark\u2019s Cartoon Guide.\n You\u2019ll learn the \u2018what\u2019 of WebAssembly throughout this blog post, but I do want to briefly touch on the \u2018why\u2019.\n   The top diagram shows a simplified timeline for the execution of some JavaScript code within the browser. From left-to-right, the code (typically delivered as a minified mess!) is parsed into an AST, initially executed in an interpreter, then progressively optimised / re-optimised until it eventually runs really quite quickly. These days JavaScript is fast - it just takes a while to get up to speed.\n The bottom diagram is the WebAssembly equivalent. Code written in a wide variety of languages (Rust, C, C#, etc \u2026) is compiled to WebAssembly that is delivered in a binary format. This is very easily decoded, compiled and executed - giving fast and predictable performance.\n  WebAssembly has been causing quite a stir over the last year. So much so, that it was voted the fifth \u2018most loved\u2019 language in  Stack Overflow\u2019s developer insights survey.\n  An interesting result, considering that for most people WebAssembly is a compilation target, rather than a language they will use directly.\n This was part of my motivation for proposing the FullStackNYC talk in the first place. The technical aspects of WebAssembly are really fascinating (and remind me of 8-bit computers from a few decades back), yet most people will never get the chance to dabble with WebAssembly itself - it will just be a black box that they compile to.\n Writing a compiler is a really good opportunity to delve into the details of WebAssembly to find it what it is and how it works. And it\u2019s fun too!\n One final point, it was never my aim to create a fully-featured programming language, or one that is actually any good. My goal was to create \u2018enough\u2019 of a language to allow me to write a program that renders a mandelbrot set. This language is compiled to WebAssembly using my compiler, which is written in TypeScript and runs in the browser.\n   I ended up calling the language  chasm and you can  play with it online if you like.\n   Before tackling the compiler, we\u2019ll start with something simpler, creating a minimal WebAssembly module.\n Here is an emitter (the term used for the part of a compiler that outputs instructions for the target system), that creates the smallest valid WebAssembly module:\n const  magicModuleHeader  =  [ 0x00 ,  0x61 ,  0x73 ,  0x6d ]; const  moduleVersion  =  [ 0x01 ,  0x00 ,  0x00 ,  0x00 ]; export  const  emitter :  Emitter  =  ()  =&gt;  Uint8Array . from ([  ... magicModuleHeader ,  ... moduleVersion  ]);\n It is comprised of two parts, the \u2018magic\u2019 header, which is the ASCII string  \\0asm, and a version number. These eight bytes form valid WebAssembly (or wasm) module. More typically these would be delivered to the browser as a  .wasm file.\n   If you run the above you\u2019ll find that  instance doesn\u2019t actually do anything because our wasm module doesn\u2019t contain any instructions!\n If you\u2019re interested in trying out this code for yourself, it is all on GitHub -  with a commit for each step.\n  Let\u2019s make the wasm module do something more useful, by implementing a function that adds a couple of floating point numbers together.\n WebAssembly is a binary format, which isn\u2019t terribly readable (to humans at least), which is why you\u2019ll more typically see it written in WebAssembly Text Format (WAT). Here\u2019s a module, presented in WAT format, that defines an exported function named  $add that takes two floating point parameters, adds them together and returns them:\n (module (func $add (param f32) (param f32) (result f32) get_local 0 get_local 1 f32.add) (export &#34;add&#34; (func 0)))\n If you just want to experiment with WAT you can use the  wat2wasm tool from the  WebAssembly Binary Toolkit to compile WAT files into wasm modules.\n  WebAssembly is a low-level language, with a small (approx 60) instruction set, where many of the instructions map quite closely to CPU instructions. This makes it easy to compile wasm modules to CPU-specific machine code.\n  It has no built in I/O. There are no instructions for writing to the terminal, screen or network. In order to wasm modules to interact with the outside world they need to do so via their host environment, which in the case of the browser is JavaScript.\n  WebAssembly is a stack machine, in the above example  get_local 0 gets the local variable (in this case the function param) at the zeroth index and pushes it onto the stack, as does the subsequent instruction. The  f3.add instruction pops two values form the stack, adds them together than pushes the value back on the stack.\n  WebAssembly has just four numeric types, two integer, two floats. More on this later \u2026\n Let\u2019s update the emitter to output this \u2018hard coded\u2019 WebAssembly module.\n WebAssembly modules are composed of a pre-defined set of optional sections, each prefixed with a numeric identifier. These include a type section, which encode type signatures, and function section, which indicates the type of each function. I\u2019ll not cover how these are constructed here - they are quite dull. If you\u2019re interested,  look at the next commit in the project.\n The interesting part is the code section. Here is how the above  add function is created in binary:\n const  code  =  [  Opcodes . get_local  /** 0x20 */ ,  ... unsignedLEB128 ( 0 ),  Opcodes . get_local  /** 0x20 */ ,  ... unsignedLEB128 ( 1 ),  Opcodes . f32_add  /** 0x92 */ ]; const  functionBody  =  encodeVector ([  ... encodeVector ([])  /** locals */ ,  ... code ,  Opcodes . end  /** 0x0b */ ]); const  codeSection  =  createSection ( Section . code  /** 0x0a */ ,  encodeVector ([ functionBody ]));\n I\u2019ve defined an  Opcodes enum (I\u2019m using TypeScript), which contains all of the wasm instructions. The  unsignedLEB128 function is a standard  variable length encoding which is used for encoding instruction parameters.\n The instructions for a function are combined with the function\u2019s local variables (of which there are none in this case), and an  end opcode that signals the end of a function. Finally all the functions are encoded into a section. The  encodeVector function simply prefixes a collection of byte arrays with the total length.\n And there you have it, the complete module, which is about 30 bytes in total.\n   Interestingly if you inspect the exported  add function with the Chrome Dev Tools it identifier it as a \u2018native function\u2019.\n   Now that you\u2019ve seen how to dynamically create wasm modules, it\u2019s time to turn our attention to the task of creating a compiler. We\u2019ll start with a bit of terminology.\n Here\u2019s some  chasm code annotated to show the key components of a language:\n  Rather than give a \u2018textbook definition\u2019 of each, you\u2019ll become familiar with them as the compiler evolves.\n The compiler itself will be formed of three parts, the  tokenizer which breaks up the input program (which is a string), into discrete tokens, the  parser that takes these tokens and converts them into an Abstract Syntax Tree (AST), and finally the  emitter which converts the AST into wasm binary module.\n   Rather than dive into a complete implementation, we\u2019ll tackle a small subset of the problem. The goal is to create a compiler for a language that just supports print statements which print simple numeric literals \u2026\n   The tokenizer works by advancing through the input string, one character at a time, matching patterns that represent specific token types. The following code creates three matches ( number,  keyword, and  whitespace), using simple regular expressions:\n const  keywords  =  [ &#34; print &#34; ];  // returns a token if the given regex matches at the current index const  regexMatcher  =  ( regex :  string ,  type :  TokenType ):  Matcher  =&gt;  ( input :  string ,  index :  number )  =&gt;  {  const  match  =  input . substring ( index ). match ( regex );  return  (  match  &amp;&amp;  {  type ,  value :  match [ 0 ]  }  );  }; const  matchers  =  [  regexMatcher ( &#34; ^[.0-9]+ &#34; ,  &#34; number &#34; ),  regexMatcher ( `^( ${ keywords . join ( &#34; | &#34; )} )` ,  &#34; keyword &#34; ),  ...\n  The  Matcher interface defines a function that given an input string and an index returns a token if a match occurs.\n The main body of the parser iterates over the characters of the string, finding the first match, adding the provided token to the output array:\n export  const  tokenize :  Tokenizer  =  input  =&gt;  {  const  tokens :  Token []  =  [];  let  index  =  0 ;  while  ( index  &lt;  input . length )  {  const  matches  =  matchers . map ( m  =&gt;  m ( input ,  index )). filter ( f  =&gt;  f )  const  match  =  matches [ 0 ];  if  ( match . type  !==  &#34; whitespace &#34; )  {  tokens . push ( match );  }  index  +=  match . value . length ;  }  return  tokens ; };\n  [   {   &#34;type&#34; :   &#34;keyword&#34; ,   &#34;value&#34; :   &#34;print&#34; ,   &#34;index&#34; :   1   },   {   &#34;type&#34; :   &#34;number&#34; ,   &#34;value&#34; :   &#34;23.1&#34; ,   &#34;index&#34; :   7   }  ]\n As you can see from the above input, the tokeniser removes whitespace as it has no meaning (for this specific language), it also ensures that everything in the input string is a valid token. However, it doesn\u2019t make any guarantees about the input being well-formed, for example the tokeniser will happily handle  &#34;print print&#34;, which is clearly incorrect.\n   The goal of the parser is the creation of an Abstract Syntax Tree (AST), a tree structure that encodes the relationship between these tokens, resulting in a form that could potentially be sent to an interpreter for direct execution.\n  export  const  parse :  Parser  =  tokens  =&gt;  {  const  iterator  =  tokens [ Symbol . iterator ]();  let  currentToken  =  iterator . next (). value ;  const  eatToken  =  ()  =&gt;  ( currentToken  =  iterator . next (). value );  [...]  const  nodes :  StatementNode []  =  [];  while  ( index  &lt;  tokens . length )  {  nodes . push ( parseStatement ());  }  return  nodes ; };\n (I\u2019ve no idea where the concept of eating tokens comes from, it appears to be standard parser terminology, they are clearly hungry beasts!)\n The goal of the above parser is to turn the token array into an array of statements, which are the core building blocks of this language. It expects the given tokens to conform to this pattern, and will throw an error (not shown above) if it does not.\n The  parseStatement function expects each statement to start with a keyword - switching on its value:\n const  parseStatement  =  ()  =&gt;  {  if  ( currentToken . type  ===  &#34; keyword &#34; )  {  switch  ( currentToken . value )  {  case  &#34; print &#34; :  eatToken ();  return  {  type :  &#34; printStatement &#34; ,  expression :  parseExpression ()  };  }  } };\n Currently the only supported keyword is  print, in this case it returns an AST node of type  printStatement parsing the associated expression.\n  const  parseExpression  =  ()  =&gt;  {  let  node :  ExpressionNode ;  switch  ( currentToken . type )  {  case  &#34; number &#34; :  node  =  {  type :  &#34; numberLiteral &#34; ,  value :  Number ( currentToken . value )  };  eatToken ();  return  node ;  } };\n In its present form the language only accepts expressions which are composed of a single number - i.e. a numeric literal. Therefore the above expression parser expects the next token to be a number, and when this matches, it returns a node of type  numberLiteral.\n Continuing the simple example of the program  &#34;print 23.1&#34;, the parser outputs the following AST:\n  As you can see the AST for this language is an array of statement nodes. Parsing guarantees that the input program is syntactically correct, i.e. it is properly constructed, but it doesn\u2019t of course guarantee that it will execute successfully, runtime errors might still be present (although for this simple language they are not possible!).\n   Currently the emitter outputs a hard-coded add function. It now needs to take this AST and emit the appropriate instructions, as follows:\n const  codeFromAst  =  ast  =&gt;  {  const  code  =  [];  const  emitExpression  =  node  =&gt;  {  switch  ( node . type )  {  case  &#34; numberLiteral &#34; :  code . push ( Opcodes . f32_const );  code . push (... ieee754 ( node . value ));  break ;  }  };  ast . forEach ( statement  =&gt;  {  switch  ( statement . type )  {  case  &#34; printStatement &#34; :  emitExpression ( statement . expression );  code . push ( Opcodes . call );  code . push (... unsignedLEB128 ( 0 ));  break ;  }  });  return  code ; };\n The emitter iterates over the statements that form the \u2018root\u2019 of the AST, matching our only statement type - print. Notice that the first thing it does is emit the instructions for the statement expressions, recall that WebAssembly is a stack machine, hence the expression instructions must be processed first leaving the result on the stack.\n The print function is implemented via a  call operation, which invokes the function at index zero.\n Previously we\u2019ve seen how wasm modules can export functions (as per the add example above), they can also import functions, which are supplied when you instantiate the module. Here we provide an  env.print function that logs to the console:\n   You can see the complete code for the  compiler at this point on GitHub - you can also have a play with this example via the  online chasm compiler playground.\n   So far we\u2019ve put quite a lot of structure in place, but not really felt the benefit. A separate tokenizer, parser and emitter is overkill for a language that only prints simple numerics. However, as the language complexity grows, this structure really starts to pay dividends.\n  Next up, we\u2019ll look at implementing binary expressions, allowing the language to perform simple mathematics, for example  print ((42 + 10) / 2).\n For the tokeniser the changes are quite trivial, involving adding a couple of additional regex matchers for parentheses and operators. I\u2019ll not reproduce them here - instead, just show the resultant output:\n [   {   &#34;type&#34; :   &#34;keyword&#34; ,   &#34;value&#34; :   &#34;print&#34;   },   {   &#34;type&#34; :   &#34;parens&#34; ,   &#34;value&#34; :   &#34;(&#34;   },   {   &#34;type&#34; :   &#34;parens&#34; ,   &#34;value&#34; :   &#34;(&#34;   },   {   &#34;type&#34; :   &#34;number&#34; ,   &#34;value&#34; :   &#34;42&#34;   },   {   &#34;type&#34; :   &#34;operator&#34; ,   &#34;value&#34; :   &#34;+&#34;   },   {   &#34;type&#34; :   &#34;number&#34; ,   &#34;value&#34; :   &#34;10&#34;   },   {   &#34;type&#34;\n Next up, we\u2019ll look at the changes to the parser - where the expression parser can encounter either  number of  parens tokens:\n const  parseExpression  =  ()  =&gt;  {  let  node :  ExpressionNode ;  switch  ( currentToken . type )  {  case  &#34; number &#34; :  [...]  case  &#34; parens &#34; :  eatToken ();  const  left  =  parseExpression ();  const  operator  =  currentToken . value ;  eatToken ();  const  right  =  parseExpression ();  eatToken ();  return  {  type :  &#34; binaryExpression &#34; ,  left ,  right ,  operator  };  } };\n Notice that parsing of  parens expressions is recursive, with the nodes for the left and right invoking the  parseExpression function once again.\n  [{   type:   &#34;printStatement&#34; ,   expression:   {   type:   &#34;binaryExpression&#34; ,   left:   {   type:   &#34;binaryExpression&#34; ,   left:   {   type:   &#34;numberLiteral&#34; ,   value:   42   },   right:   {   type:   &#34;numberLiteral&#34; ,   value:   10   },   operator:   &#34;+&#34;   },   right:   {   type:   &#34;numberLiteral&#34; ,   value:   2   },   operator:   &#34;/&#34;   }  }] ;\n  Finally, the emitter needs to be updated in order to handle the  binaryExpression node type, as follows:\n const  emitExpression  =  ( node )  =&gt;  traverse ( node ,  ( node )  =&gt;  {  switch  ( node . type )  {  case  &#34; numberLiteral &#34; :  code . push ( Opcodes . f32_const );  code . push (... ieee754 ( node . value ));  break ;  case  &#34; binaryExpression &#34; :  code . push ( binaryOpcode [ node . operator ]);  break ;  } });\n The  traverse function in the above code traverses tree structures invoking the given visitor for each node. While linear structures only have one logical way to traverse them (i.e. in order), trees can be  traversed in a number of different ways. The traversal method used by the emitter is a depth-first post-order traversal, in other words as it encounters each node it visits left, right, then root - this order ensures that  ...\n And that\u2019s it, all the changes that are required to support expressions. Give it a  go online.\n     Variables are declared using the  var keyword, and can be used in expressions as identifiers.\n We\u2019ll not look at the changes to the tokeniser, it\u2019s just yet more regex! The main loop of the parser, which reads successive statements from the token array, determines the statement type based on the keyword it encounters:\n const  parseVariableDeclarationStatement  =  ()  =&gt;  {  eatToken ();  // var  const  name  =  currentToken . value ;  eatToken ();  eatToken ();  // =  return  {  type :  &#34; variableDeclaration &#34; ,  name ,  initializer :  parseExpression ()  }; }; const  parseStatement :  ParserStep &lt; StatementNode &gt;  =  ()  =&gt;  {  if  ( currentToken . type  ===  &#34; keyword &#34; )  {  switch  ( currentToken . value )  {  case  &#34; print &#34; :  return  parsePrintStatement ();  case  ...\n Variable declaration parsing is quite straight-forwards - notice that the  parseVariableDeclarationStatement function also makes use of the expression parser, which ensures that variables can be declared and assigned an initial value from an expression, e.g.  var f = (1 + 4).\n Next up, the emitter. WebAssembly functions can have local variables, these are declared at the beginning of the function definition, and are accessed via the  get_local and  set_local functions that also retrieve function parameters.\n The variables in our AST are referenced via their identifier name, whereas wasm identifies locals by their index. The emitter needs to maintain this information in a symbol table, which is a simple map from the symbol name to index:\n const  symbols  =  new  Map &lt; string ,  number &gt; (); const  localIndexForSymbol  =  ( name :  string )  =&gt;  {  if  ( ! symbols . has ( name ))  {  symbols . set ( name ,  symbols . size );  }  return  symbols . get ( name ); };\n Within the node traversal, when a variable declaration is encountered, the expression is emitted, them  set_local used to assign the value to the respective local variable.\n  Within expressions, when identifiers are found, the  get_local operation is used to retrieve the value:\n  Also, the function encoding we saw right back at the beginning is updated to add the locals for the function that the emitter builds. The  chasm language has a single variable type, everything is a float.\n   One of the final language constructs we need in order to achieve the goal of rendering a mandelbrot set is some kind of loop. For  chasm I opted for a while loop, as show in this simple program that prints the numbers 0 to 9:\n  WebAssembly has various control flow instructions (branch, if, else, loop, block). The following WAT show how a while loop can be constructed:\n  Branching within WebAssembly is based on stack depth. The outer  block and  loop instructions push entries onto the control-flow stack. The  br_if 1 instruction performs a conditional branch to a stack depth of one, and  br 0 an unconditional branch to a depth of zero, repeating the  loop.\n  case  &#34; whileStatement &#34; :  // outer block  code . push ( Opcodes . block );  code . push ( Blocktype . void );  // inner loop  code . push ( Opcodes . loop );  code . push ( Blocktype . void );  // compute the while expression  emitExpression ( statement . expression );  code . push ( Opcodes . i32_eqz );  // br_if $label0  code . push ( Opcodes . br_if );  code . push (... signedLEB128 ( 1 ));  // the nested logic  emitStatements ( statement . statements );  // br $label1  ...\n   We\u2019re nearly there - up to the very last step now! Currently the only way we\u2019ve been able to see output from our  chasm programs is via the  print statement, which is wired to the console via a function imported by the WebAssembly module. For the mandelbrot set we somehow need to render graphics to the screen.\n To achieve this we\u2019ll make use of another very important component of WebAssembly modules, linear memory:\n  As I mentioned previously, WebAssembly only has 4 numeric data types. You might be wondering how languages with richer type systems (string, structs, arrays) can compile to WebAssembly?\n WebAssembly modules can optionally define (or import) a block of linear memory, this is a contiguous block of memory that is shared by the wasm module and its host - in other words both can read and write to this memory. Therefore, if you want to pass a string to your WebAssembly module, you do this by  writing it to linear memory.\n For  chasm we just want some sort of display, so will use linear memory as a form of  Video RAM.\n The  chasm languages supports a simple set-pixel command which takes three expressions, the x location, y location and colour. For example, the following program fill the screen with a horizontal gradient:\n var y = 0while (y &lt; 100) var x = 0 while (x &lt; 100) setpixel x y (x * 2) x = (x + 1) endwhile y = (y + 1)endwhile\n  The  setpixel command is implemented using the wasm  store instruction that writes to linear memory. On the JavaScript \u2018hosting\u2019 side, this same linear memory is read and copied to a HTML canvas. I\u2019ll not reproduce the changes to the code here, you can  see them on GitHub\n And with that - the  chasm language is complete, and able to render the mandelbrot set:\n    I hope you enjoyed this journey and have either learnt a bit more about WebAssembly or how compilers work? For me, this project was a lot of fun - I\u2019ve never written a compiler before, but have always wanted to.\n As you can probably imagine, I\u2019ve not stopped there, the temptation was too great to keep going - I\u2019ve already implemented if / else, and functions / procedures are in the pipeline. I\u2019d also really like to explore some of the more involved topics like memory management, for example introduce string, arrays and a memory allocator for storage within linear memory.\n  I am Technology Director at Scott Logic and am a prolific technical author, blogger and speaker on a range of technologies.\n My blog includes posts on a wide range of topics, including WebAssembly, HTML5 / JavaScript and data visualisation with D3 and  d3fc. You&#39;ll also find a whole host of posts about previous technology interests including iOS, Swift, WPF and Silverlight.\n I&#39;m board member of  FINOS, which is encouraging open source collaboration in the financial sector. I&#39;m also  very active on GitHub, contributing to a number of different projects.", "posttime": "2020-05-03 03:12:26", "tags": "\u7f16\u8bd1,webassembly", "title": "\u6784\u5efa\u60a8\u81ea\u5df1\u7684WebAssembly\u7f16\u8bd1\u5668", "title_en": "Build your own WebAssembly Compiler", "transed": 1, "url": "https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u8bd1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000394, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ecd\u5728\u52a0\u8f7d\u2026\u3002*\u5982\u679c\u6b64\u95ee\u9898\u4ecd\u7136\u5b58\u5728\uff0c\u8bf7\u91cd\u65b0\u52a0\u8f7d\u6216\u901a\u8fc7quipsupport.com\u8054\u7cfb\u6211\u4eec\u3002", "note_en": "Still loading\u2026 \u00a0 \u00a0Please reload or contact us via  quipsupport.com if this issue persists.", "posttime": "2020-05-03 03:12:22", "tags": "\u9762\u8bd5,sql,hard,\u52a0\u8f7d,contact", "title": "\u4e2d\u786cSQL\u9762\u8bd5\u95ee\u9898", "title_en": "Medium-hard SQL interview questions", "transed": 1, "url": "https://gstudent.quip.com/2gwZArKuWk7W", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u9762\u8bd5", "sql", "hard", "\u52a0\u8f7d", "contact"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000393, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0d\u4e00\u81f4\u901a\u4fe1\u7cfb\u7edf\u9700\u8981\u8fd0\u884c\u975e\u81ea\u7531\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002\u4ec5\u4ec5\u8fd9\u4e00\u70b9\u5c31\u662f\u62d2\u7edd\u4f7f\u7528\u5b83\u7684\u7406\u7531\u3002\n\u636e\u62a5\u9053\uff0c\u8be5\u7a0b\u5e8f\u6536\u96c6\u4e86\u5927\u91cf\u5173\u4e8e\u7528\u6237\u7684\u6570\u636e\u3002\u5f00\u53d1\u4eba\u5458\u5426\u8ba4\u4e86\u6709\u5173Discorde\u62a5\u544a\u7528\u6237\u7684\u8ba1\u7b97\u673a\u4e0a\u6b63\u5728\u8fd0\u884c\u54ea\u4e9b\u8fdb\u7a0b\u7684\u8bf4\u6cd5\u3002\u6211\u65e0\u6cd5\u786e\u5b9a\u5173\u4e8e\u8fd9\u4e00\u70b9\u7684\u4e8b\u5b9e\u3002\u5b83\u662f\u5426\u6536\u96c6\u8fd9\u4e9b\u7279\u5b9a\u7684\u6570\u636e\u662f\u4e00\u4e2a\u6b21\u8981\u7684\u7ec6\u8282\uff1b\u6211\u63d0\u5230\u5b83\u53ea\u662f\u4e3a\u4e86\u907f\u514d\u770b\u8d77\u6765\u50cf\u662f\u5728\u65ad\u8a00\u53ef\u80fd\u4e0d\u662f\u771f\u7684\u6279\u8bc4\u3002\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff0c\u6211\u63d0\u5230\uff0c\u51fa\u552e\u4e2a\u4eba\u6570\u636e\u5e76\u4e0d\u662f\u516c\u53f8\u8d5a\u94b1\u7684\u552f\u4e00\u9014\u5f84\u3002\u6211..\u3002\n\u4e00\u4f4d\u7528\u6237\u505c\u6b62\u4f7f\u7528Discorde\uff0c\u56e0\u4e3a\u5b83\u8981\u6c42\u5979\u586b\u5199Google reCAPTCHA\uff0c\u663e\u7136\u662f\u56e0\u4e3a\u5979\u662f\u901a\u8fc7Tor\u8fde\u63a5\u7684\u3002\n\u201c\u4e0d\u548c\u8c10\u201d\u575a\u6301\u8ddf\u8e2a\u7528\u6237\u3002\u5982\u679c\u7528\u6237\u901a\u8fc7VPN\u8fde\u63a5\uff0c\u5219\u4e0d\u4e00\u81f4\u8981\u6c42\u7528\u6237\u63d0\u4f9b\u7535\u8bdd\u53f7\u7801\u3002\n\u4e0d\u4e00\u81f4\u9501\u5b9a\u6ca1\u6709\u5173\u8054\u7535\u8bdd\u53f7\u7801\u7684\u5e10\u6237\u3002\u5f53\u5e10\u6237\u88ab\u9501\u5b9a(\u4e5f\u79f0\u4e3a\u505c\u7528\u5e10\u6237)\u65f6\uff0c\u7528\u6237\u53ea\u6709\u5728\u6dfb\u52a0\u7535\u8bdd\u53f7\u7801\u540e\u624d\u80fd\u771f\u6b63\u4f7f\u7528\u8be5\u5e10\u6237\u3002\u4e0d\u548c\u8c10\u53ef\u80fd\u4f1a\u8981\u6c42\u4e0e\u4f60\u901a\u8fc7\u7535\u8bdd\u4ea4\u8c08\uff0c\u5982\u679c\u5b83\u8ba4\u4e3a\u4f60\u662f\u53ef\u7591\u7684-\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u901a\u8fc7Tor\u8054\u7cfb\u5b83\u3002\u5982\u679c\u6211\u7406\u89e3\u6b63\u786e\u7684\u8bdd\uff0c\u5982\u679c\u4f60\u7ecf\u5e38\u901a\u8fc7Tor\u4f7f\u7528\u4e0d\u548c\u8c10\uff0c\u4f60\u5c31\u9700\u8981\u4e00\u76f4\u5e26\u7740\u624b\u673a\u3002\u4e00\u90e8\u4e00\u6b21\u6027\u7535\u8bdd\uff0c\u4e00\u90e8\u4ec0\u4e48.\u3002\n\u6211\u975e\u5e38\u611f\u8c22\u5176\u4ed6\u9875\u9762\u7684\u5efa\u8bae\uff0c\u4ee5\u4f5c\u4e3a\u4e0d\u548c\u8c10\u6240\u72af\u4e0b\u7684\u5177\u4f53\u9519\u8bef\u7684\u4e8b\u5b9e\u53c2\u8003\uff0c\u6216\u8005\u5728\u53ef\u4fe1\u7684\u57fa\u7840\u4e0a\u7ea0\u6b63\u4e0a\u9762\u94fe\u63a5\u7684\u9875\u9762\u4e2d\u7684\u4efb\u4f55\u865a\u5047\u6307\u63a7\u3002", "note_en": "The Discord communications system\t  requires running a  nonfree\t client program. That alone is reason to refuse to\t use it.\n  The program reportedly collects lots of data about\t\tusers.  The developer denies the claim that\t\tDiscord reports which processes are running on the\t\tuser&#39;s machine. I have no way of determining the\t\tfacts about this specific point. Whether it collects\t\tthose particular data is a minor detail; I mention it\t\tonly to avoid appearing to assert a criticism that\t\tmight not be true.\t  For the same reason, I mention that selling personal\t\tdata is not the sole way that the company makes\t\tmoney. I  ...\n  One user quit using Discord because\t it  demanded\t she fill out a Google\t reCAPTCHA, apparently because she was connecting through Tor.\n  Discord insists on tracking users. If a user connects\t through a VPN, Discord\t\t demands\t that user provide a phone number.\n  Discord  locks accounts that don&#39;t have associated phone numbers. When an account is locked, also called &#34;deactivated&#34;, the user is not allowed to make real use of it until person adds a phone number.\t\t Discord may\t\t  demand\t\t to talk with you by phone if it decides you are\t\t suspicious \u2014 for instance, if you contact\t\t it via Tor.\t\t  If I understand right, if you use Discord regularly via Tor you would need to carry that phone with you all the time. A burner phone, one what  ...\n    I would appreciate suggestions of other pages to use\t\tas factual references for specific wrongs committed by\t\tDiscord, or to correct on a trustworthy basis any\t\tfalse accusations in the page linked to above.", "posttime": "2020-05-03 03:12:12", "tags": "\u7cfb\u7edf,discord", "title": "\u4e0d\u4f7f\u7528\u4e0d\u548c\u8c10\u901a\u4fe1\u7cfb\u7edf\u7684\u539f\u56e0", "title_en": "Reasons not to use the Discord communications system", "transed": 1, "url": "https://stallman.org/discord.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7cfb\u7edf", "discord"]}, {"category": "", "categoryclass": "", "imagename": "2cb42588460c1997937783396686eaa1.jpg", "infoid": 1000392, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65b0\u5bf9\u8bdd\u5fc5\u987b\u6709&#39\uff1b84\u6216&#39\uff1b85\u3002\u6211\u662f\u4e00\u4e2a\u806a\u660e\u768425\u5c81\u7684\u4eba\uff0c\u5728\u8fd9\u9879\u8fd0\u52a8\u4e2d\u5927\u7ea6\u67095\u5e74\u7684\u65f6\u95f4\u3002\u6211\u662f\u7f16\u5199\u548c\u7ef4\u62a4\u4e00\u5957\u7c7b\u4f3cOffice\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e24\u540d\u7a0b\u5e8f\u5458\u4e4b\u4e00\uff1a\u7535\u5b50\u8868\u683c\u3001wp\u3001\u6570\u636e\u5e93\u3001\u7ed8\u56fe\u4eea\u7b49\u3002\u6211\u4eec\u4e3a\u4e09\u56db\u4e2a\u5782\u76f4\u5e02\u573a\u5b9a\u5236\u4e86\u4e00\u5207\u3002\n\u6240\u4ee5\u6211\u5199\u4e86\u5927\u90e8\u5206\u7684\u53ef\u6e7f\u6027\u7c89\u5242\u3002\u8fd9\u662f\u5728Forth\u4e2d\uff0c\u57fa\u4e8e\u5404\u79cdOS/CPU\u7ec4\u5408\u3002\u5e74\u8f7b\u7684\u5b69\u5b50\u4eec\u4e0d\u4e00\u5b9a\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u4f46\u5728\u90a3\u4e9b\u5546\u5e97\u91cc\uff0c\u4f1a\u6709\u4e00\u53f0\u65b0\u7684\u5fae\u578b\u8ba1\u7b97\u673a\uff0c\u88c5\u6709\u5b9a\u5236\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6bcf*\u4e2a\u6708*\u5de6\u53f3\u5c31\u4f1a\u6709\u51e0\u4e2aCPU\u4e2d\u7684\u4e00\u4e2a\u3002\nFourth\u4f7f\u7528\u57fa\u4e8e\u5757\u7684\u78c1\u76d8I/O\u3002\u6bcf\u4e2a\u5757\u7684\u957f\u5ea6\u4e3a1KB\uff0c\u4e3a\u4e86\u4fdd\u5b58\u4efb\u4f55\u5927\u4e8e1KB\u7684\u6570\u636e\uff0c\u60a8\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u6587\u4ef6\u4e3b\u5757\uff0c\u5b83\u5c06\u5305\u542b\u5bf9\u5177\u6709\u6570\u636e\u7684\u5757\u7684\u504f\u79fb\u91cf\uff0c\u57fa\u672c\u4e0a\u662f\u4e00\u5bf9\u5217\u8868\u3001\u5df2\u5206\u914d\u548c\u65e0\u3002\n\u4e3a\u4e86\u521d\u59cb\u5316\u6587\u4ef6\u4e3b\u6587\u4ef6\uff0c\u6211\u4f1a\u7528\u96f6\u586b\u5145\u5b83\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86\uff01\u957f\u8bdd\u77ed\u8bf4\uff0c\u6211\u6539\u53d8\u4e86\u5e94\u7528\u7a0b\u5e8f\uff0c\u8ba9\u6211\u4eec\u62e5\u6709\u7684\u6587\u4ef6\u957f\u5ea6\u662f\u4ee5\u524d\u7684\u4e24\u500d\uff0c\u6587\u4ef6\u4e3b\u6587\u4ef6\u4e2d\u7684256\u4e2a\u6761\u76ee\u53d8\u6210\u4e861024\u4e2a\u3002\n\u6bcf\u4e2a\u6761\u76ee\u90fd\u662f--\u6211\u4eec\u73b0\u5728\u5f00\u59cb--\u4e00\u4e2a*\u5b57*\uff0c\u4f60\u770b\uff0c16\u4f4d\u3002\u56e0\u6b64\uff0c\u867d\u7136\u5c06\u5927\u5c0f\u589e\u52a0\u5230512\u4ecd\u7136\u9002\u5408\u6211\u76841k\u4e3b\u5757\uff0c\u4f46\u662f\u5c06\u5176\u589e\u52a0\u52301024\u5c06\u9700\u8981\u5176\u4e2d\u7684\u4e24\u4e2a\u5757\u3002\n\u56e0\u6b64\uff0c\u6211\u66f4\u6539\u4e86\u8fd9\u4e9b\u96f6\u7684*Fill*\u6570\u5b57\uff0c\u800c\u6ca1\u6709\u66f4\u6539*Buffer*\u5927\u5c0f\u3002\u5728\u4e0d\u53d7\u4fdd\u62a4\u7684\u5185\u5b58\u60c5\u51b5\u4e0b\uff0c\u5f53\u60a8\u57281024\u5b57\u8282\u4e0a\u586b\u51452048\u4e2a\u96f6\u65f6\uff0c\u989d\u5916\u7684\u5b57\u8282\u4f1a\u8986\u76d6\u8d85\u51fa\u8be5\u7f13\u51b2\u533a\u5927\u5c0f\u7684\u5185\u5b58\u4e2d\u7684\u4efb\u4f55\u968f\u673a\u5783\u573e\u3002\n\u5728\u6211\u7684\u4f8b\u5b50\u4e2d\uff0c\u968f\u4fbf\u4ec0\u4e48\u4e71\u4e03\u516b\u7cdf\u7684\u4e1c\u897f\u90fd\u662fo/s\u7684*master**\u78c1\u76d8**\u5757*\u3002\u662f\u3002\u5f53\u6211\u53bb\u521d\u59cb\u5316\u65b0\u6587\u4ef6\u65f6\uff0c\u6bcf1024\u6b21\u4fdd\u5b58\u4e00\u4e2a1\u6570\u636e\u5757\u6587\u4ef6\u5c31\u4f1a\u53d1\u751f\u4e00\u6b21\uff0c\u6211\u8986\u76d6\u4e86\u9a71\u52a8\u5668\u7684\u4e3b\u5757\uff0c\u6d88\u9664\u4e86\u5b83\u7684\u6240\u6709\u6587\u4ef6\u3002\n\u6240\u4ee5\uff0c\u662f\u7684\uff0c\u679c\u7136\u5982\u6b64\u3002\u6211\u4eec\u628a\u90a3\u4e2a\u7248\u672c\u7684\u4ee3\u7801\u53d1\u8d27\u4e86\uff0c\u6211\u4e0d\u77e5\u9053\uff0c8\u62169\u5468\u3002\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\u6211\u5728\u5904\u7406\u5ba2\u6237\u7684\u7535\u8bdd\u3002\u6211\u4eec\u6700\u7ec8\u544a\u8bc9\u6bcf\u4e2a\u4eba\u8981\u59cb\u7ec8\u5907\u4efd(\u5230VCR\u78c1\u5e26\uff0c\u987a\u4fbf\u8bf4\u4e00\u4e0b)*\u6bcf**\u4e00\u5929**\u3002\n\u6211\u82b1\u4e86\u6574\u6574\u51e0\u4e2a\u661f\u671f\u7684\u65f6\u95f4\uff0c\u9664\u4e86\u901a\u8fc7\u7535\u8bdd\u9053\u6b49\u548c\u5728\u8c03\u8bd5\u5668\u4e2d\u4e00\u904d\u53c8\u4e00\u904d\u5730\u8fd0\u884c\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u5916\uff0c\u4ec0\u4e48\u4e5f\u6ca1\u505a\u3002\u6ca1\u4ec0\u4e48\u3002\u6211\u4e00\u65e0\u6240\u83b7\u3002\n\u4e0d\u8fc7\uff0c\u6709\u4e00\u4f4d\u5973\u58eb\u6253\u6765\u7535\u8bdd\uff0c\u5979\u8bf4\u662f\u5979\u8ba9\u5979--\u8fd9\u662f\u4e00\u5bb6\u5361\u8f66\u8fd0\u8f93\u516c\u53f8\uff0c\u8fd9\u4f4d\u5973\u58eb\u5bf9\u810f\u8bdd\u7684\u4f7f\u7528\u5c06\u4f7f\u6211\u5728\u4eca\u540e\u7684\u6240\u6709\u65e5\u5b50\u91cc\u5145\u5f53\u4e2a\u4eba\u6a21\u7279--\u505a\u4e86\u540e\u5907\uff0c\u542f\u52a8\u4e86\u53ef\u6e7f\u6027\u7c89\u788e\u673a\uff0c\u201c\u7acb\u5373\u201d\u64e6\u9664\u4e86\u5979\u7684\u786c\u76d8\u3002\n\u5979\u91cd\u65b0\u52a0\u8f7d\u4e86\u5907\u4efd\uff0c\u5e76\u518d\u6b21\u201c\u7acb\u5373\u201d\u64e6\u9664\u4e86\u5979\u7684\u9a71\u52a8\u5668\u3002\u5979\u975e\u5e38\u751f\u6c14\u3002\u4f60\u77e5\u9053\u5417\uff0c\u6211\u82b1\u4e86\u5c06\u8fd1\u4e24\u4e2a\u5c0f\u65f6\u624d\u610f\u8bc6\u5230\u6211\u5f97\u4e86\u4ec0\u4e48\u75c5\uff1f\u6211\u5728\u5348\u9910\u65f6\u7ed9\u6211\u7684\u4e0a\u53f8\u8bb2\u4e86\u8fd9\u4e2a\u6545\u4e8b\uff0c\u7136\u540e\u6211\u5c31\u60f3\uff0c\u7b49\u7b49\u3002\u7b49\u3002*\u7acb\u5373*\uff1f*\u6bcf**\u6b21*\u3002\n\u6211\u7ed9\u5979\u6253\u4e86\u7535\u8bdd\uff0c\u5e76\u5411\u5979\u627f\u8bfa\u4e00\u5207\uff0c*\u4e00\u5207*\uff0c\u5982\u679c\u5979\u80fd\u628a\u90a3\u76d8\u5e26\u5b50\u6253\u5305\u5e76\u7528\u8054\u90a6\u5feb\u9012\u5bc4\u7ed9\u6211\u7684\u8bdd\u3002\u6211\u544a\u8bc9\u5979\uff0c\u6211\u4eec\u4f1a\u652f\u4ed8\u8fd0\u8d39\uff0c\u5e76\u514d\u9664\u4ed6\u4eec\u6bcf\u6708\u7684\u8d39\u7528\u3002(\u6211\u7684\u8001\u677f\u4ece\u6765\u6ca1\u6709\u72b9\u8c6b\u8fc7\uff0c\u4ed6\u8bf4\uff0c\u54e6\uff0c\u89c1\u9b3c\uff0c\u662f\u7684\uff0c\u6211\u4eec\u4f1a\u514d\u9664\u8d39\u7528\u7684\u3002)\u3002\n\u6211\u7ec8\u4e8e\u8ba9\u4eba\u590d\u5236\u4e86\u8fd9\u4e2a\u9519\u8bef\u3002\u5979\u6ca1\u6709\u6492\u8c0e\u3002\u5df2\u5907\u4efd\u7684\u7b2c\u56db\u4e2a\u6620\u50cf\u5177\u6709\u4e34\u754c\u70b9\uff1a\u5907\u4efd\u5b8c\u6210\u65f6\u4fdd\u5b58\u4e861023\u4e2a\u3002\u52a0\u8f7d\u5907\u4efd\uff0c\u4fdd\u5b58\uff0c\u64e6\u9664\uff0c\u4fdd\u8bc1\u3002\n\u6211\u53ef\u80fd\u5938\u5927\u5176\u8bcd\u4e86\uff0c\u4f46\u6211\u5f88\u786e\u5b9a\u6211\u5728\u78c1\u5e26\u9001\u5230\u7684\u540c\u4e00\u5929\u65e9\u4e0a\u5c31\u53d1\u73b0\u4e86\u95ee\u9898\u3002\u5728\u8c03\u8bd5\u5668\u4e2d\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u5c31\u8fd9\u4e48\u7b80\u5355\u3002\n\u6211\u770b\u7740\u5373\u5c06\u88ab\u586b\u6ee1\u76842k\u5757\uff0c\u6700\u540e1k\u662f\uff0c\u6211\u4e0d\u77e5\u9053\uff0c*\u5783\u573e*\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u5947\u602a\uff0c\u6240\u4ee5\u6211\u8c03\u67e5\u4e86\u4e00\u4e0b\u3002\u5f53\u7136\uff0c\u5b83\u4e0d\u662f\u5783\u573e\uff0c\u800c\u662f\u9a71\u52a8\u5668\u4e3b\u78c1\u76d8\u5757\u76841024\u5b57\u8282\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5176\u9690\u85cf\u5728\u6211\u7684\u6587\u4ef6\u4e3b\u5757\u65c1\u8fb9\u3002\n\u6211\u6240\u62e5\u6709\u7684\u662f\u6838\u5fc3\u8f6c\u50a8\u4e4b\u524d\u7684&#34\uff1b\u3002\u6211\u6ca1\u6709\u6838\u5fc3\u8f6c\u50a8\uff0c\u4f46\u6211\u6709\u4e00\u6761\u901a\u5f80\u7f3a\u9677\u7684\u4fdd\u8bc1\u8def\u7ebf\u3002\u5982\u679c\u6211\u6ca1\u6709\u8d70\u8fd0\uff0c\u6211\u5c31\u518d\u4e5f\u627e\u4e0d\u5230\u5b83\u4e86\u3002\u6211\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u6211\u662f\u5728\u5199\u7cfb\u7edf\u5185\u5b58\uff0c\u800c\u4e0d\u662f\u6211\u81ea\u5df1\u7684\u5185\u5b58\u3002\n\u6240\u4ee5\uff0c\u662f\u7684\u3002\u4f60\u7684\u6781\u5ba2\u5927\u5e08\u9001\u6765\u4e86\u4e00\u53f0\u6587\u5b57\u5904\u7406\u673a\uff0c\u57288\u52309\u5468\u5185\uff0c\u6bcf\u7701\u4e00\u6b21\u94b1\uff0c\u5c31\u4f1a\u683c\u5f0f\u5316\u5ba2\u6237\u7684\u786c\u76d8\u3002\u56e0\u4e3a\u3002\u4f60\u77e5\u9053\u3002\u6211\u6709\u201c\u6280\u80fd\u201d\u3002\n\u8fd9\u4e2a\u6545\u4e8b\u5f88\u53ef\u80fd\u6709\u5f88\u591a\u5bd3\u610f\uff0c\u4f46\u6211\u8981\u5bf9\u4efb\u4f55\u4f4e\u5e74\u7ea7\u5b66\u751f\u5f3a\u8c03\u7684\u4e24\u70b9\u662f\uff1a1)\u9664\u4e860\u30011\u548c-1.2)\u4e0d\u8981\u5bf9\u81ea\u5df1\u592a\u82db\u523b\u3002*\u4f60\u4eec\u6240\u6709\u7684\u8001\u524d\u8f88\u90fd\u6709\u8fd9\u6837\u7684\u6545\u4e8b\uff0c\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u4e5f\u6709*\u51e0\u4e2a\u8fd9\u6837\u7684\u6545\u4e8b\u3002\uff1a)\u3002\n\u559c\u6b22\u6211\u7684\u5185\u5bb9\u5417\uff1f\u51c9\u723d\u7684\u3002\u6211\u7684\u5927\u90e8\u5206Twitter\u5e16\u5b50\u90fd\u53d8\u6210\u4e86\u535a\u5ba2\u548c\u64ad\u5ba2\uff0c\u4f60\u53ef\u4ee5\u786e\u4fdd\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u9519\u8fc7\u4e00\u4e2a\u3002\u5b83\u662f\u514d\u8d39\u7684\uff0c\u4e0d\u542b\u5783\u573e\u90ae\u4ef6\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u6211\u3002\u73b0\u5728\u5c31\u8ba2\u9605\uff01\n\u5bf9\u8bdd\u7ed3\u675f", "note_en": "\u65b0\u5bf9\u8bdd  Must have &#39;84 or &#39;85. I was a bright 25-year-old with about five years in the game. I was one of two programmers who wrote &amp; maintained a suite of apps kinda like Office: spreadsheet, wp, database, plotter, such like. We customized everything for three or four vertical markets.\n  So I wrote most of the wp. This was in Forth, on a variety of OS/CPU combinations. Young&#39;uns don&#39;t necessarily know this, but in those fays there&#39;d be a new microcomputer with a custom OS and one of several CPU&#39;s every *month* or so.\n  Forth used block-based disk i/o. Each block was 1kb in length, and to save anything larger than 1kb, you ended up with a file master block that would contain offsets to the blocks that had the data, basically a pair of lists, allocated and none.\n  To initialize that file master, I&#39;d fill it with zero&#39;s. And away we go!Long story short, I changed the app to allow us to have files that were twice as long as we&#39;d had previously, and the 256 entries in the file master became 1024.\n  Each entry was -- and here we go -- a *word* you see, of 16 bits. So, while growing that size to 512 would still fit in my 1k master block, growing it to 1024 would require two of those blocks.\n  So I changed the *fill* number, for those zeros, without changing the *buffer* size. In unprotected memory situations, when you fill 2048 zeros over 1024 bytes, the extra bytes overwrite, well, whatever random crap is in memory beyond that buffer size.\n  In my case, &#34;whatever random crap&#34; was the o/s&#39;s *master* *disk* *block*. Yes. When I went to initialze the new file, which happened every 1024 saves of a 1-block file, I overwrote the drive&#39;s master block, eliminating all of its files.\n  So, yeah, sure enough. We shipped that version of the code for, idunno, 8 or 9 weeks. And you can imagine the phone calls I was handling from the customers. We wound up telling everyone to always back up (to VCR tapes, btw) *every* *single* *day*.\n  I spent whole weeks doing nothing but making apologies by phone and running my app in the debugger over and over and over again. Nothing. I got nothing.\n  One woman called though, and she said she&#39;d made her -- this was a trucking company, and this woman&#39;s use of profanity will serve me as a personal model for all the rest of my days -- had made her backup, fired up the wp, and *immediately* wiped her drive.\n  She&#39;d reloaded the backup and it again *immediately* wiped her drive. She was seriously pissed.Do you know it took me almost two hours to realize what I had? I was telling my s.o. the story at lunch, and then I was like, wait. Wait. *Immediately*? *Every* *time*.\n  I called her up and promised her everything, *everything*, if she would just pack that tape up and fedex it to me. I told her we&#39;d pay the shipping and waive their monthly charges. (My boss never hesitated, he was like, &#34;Oh *hell* yeah we&#39;ll waive the charges.&#34;)\n  I finally had the bug replicated. She wasn&#39;t lying. The forth image that had been backed up had the critical point: 1023 saves at the time the backup was done. Load the backup, do a save, get a wipe, guaranteed.\n  I may be exaggerating, but I&#39;m pretty sure I found the problem the same morning the tape got delivered. It was that simple to see in the debugger.\n  I was looking at the 2k block about to be filled, and the last 1k was, idunno, *garbage*. That seemed odd, so I investigated it. Of course, it wasn&#39;t garbage, it was the 1024 bytes of the drive&#39;s master disk block, stashed next to my file master block by the operating system.\n  What I had was &#34;pre&#34; core dump. I didn&#39;t have the core dump, but I had a guaranteed route to the defect. If I hadn&#39;t gotten lucky, I&#39;d&#39;ve never found it. It had simply never occurred to me that I was writing to system memory instead of my own.\n  So, yeah. Your master geek shipped a word processor that, for eight or nine weeks, every 1024&#39;th save, would format the customer&#39;s hard drive.Cuz. You know. I got *skillz*.\n  There are prolly lots of morals to the story, but the two I&#39;ll highlight for any juniors:1) Don&#39;t use numeric literals for anything but 0, 1, and -1.2) Don&#39;t be so hard on yourself. *All* your old seniors have stories like this, and some of us have *several* of them.:)\n  Like my content? Cool. Most of my twitter threads become blogs and podcasts, and you can make sure you never miss one. It&#39;s free, it&#39;s spam-free, and it&#39;s supporting me. Subscribe now!\n  \u5bf9\u8bdd\u7ed3\u675f", "posttime": "2020-05-03 02:50:08", "tags": "\u786c\u76d8,\u6587\u5b57,word,\u6587\u4ef6,block", "title": "\u6211\u53d1\u4e86\u4e00\u4e2a\u6587\u5b57\u5904\u7406\u5668\uff0c\u5b83\u6bcf1024\u6b21\u4fdd\u5b58\u4e00\u6b21\u5c31\u683c\u5f0f\u5316\u4e00\u6b21\u786c\u76d8", "title_en": "I shipped a word processor that formatted the hard drive every 1024 saves", "transed": 1, "url": "https://twitter.com/geepawhill/status/1256342997643526151", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u786c\u76d8", "\u6587\u5b57", "word", "\u6587\u4ef6", "block"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000390, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u9519\u8bef\u3002\u8bf7\u544a\u8bc9\u6211\u4eec\u5728\u6211\u4eec\u7684\u9519\u8bef\u62a5\u544a\u9875\u9762\u4e0a\u53d1\u751f\u4e86\u4ec0\u4e48\u3002", "note_en": "We encountered an error. Please tell us what happened on our  bugs reports page.", "posttime": "2020-05-03 02:05:49", "tags": "pg,\u544a\u8bc9,bugs", "title": "PG-Basic", "title_en": "Pg-Basic", "transed": 1, "url": "https://repl.it/@paulgraham/repeat", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["pg", "\u544a\u8bc9", "bugs"]}, {"category": "", "categoryclass": "", "imagename": "e8e011379a9da263ac2c67f34345b911.jpg", "infoid": 1000389, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5de5\u7a0b\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u521b\u9020\u51fa\u8d85\u8584\u7684\u3001\u53ef\u4f38\u5c55\u7684\u900f\u6c14\u7535\u5b50\u6750\u6599\uff0c\u5141\u8bb8\u8fd9\u79cd\u6750\u6599\u201c\u547c\u5438\u201d\u3002\u8fd9\u79cd\u6750\u6599\u662f\u4e13\u95e8\u4e3a\u751f\u7269\u533b\u5b66\u6216\u53ef\u7a7f\u6234\u6280\u672f\u8bbe\u8ba1\u7684\uff0c\u56e0\u4e3a\u6c14\u4f53\u6e17\u900f\u6027\u5141\u8bb8\u6c57\u6c34\u548c\u6325\u53d1\u6027\u6709\u673a\u5316\u5408\u7269\u4ece\u76ae\u80a4\u4e0a\u84b8\u53d1\uff0c\u4f7f\u7528\u6237\u66f4\u8212\u9002-\u7279\u522b\u662f\u957f\u671f\u7a7f\u6234\u3002\n\u8fd9\u9879\u7814\u7a76\u8bba\u6587\u7684\u5171\u540c\u901a\u8baf\u4f5c\u8005\u3001\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u7acb\u5927\u5b66(North Carolina State University)\u673a\u68b0\u4e0e\u822a\u7a7a\u822a\u5929\u5de5\u7a0b\u6559\u6388\u6731\u52c7(\u97f3\u8bd1)\u8868\u793a\uff1a\u201c\u6c14\u4f53\u6e17\u900f\u6027\u662f\u76f8\u5bf9\u4e8e\u65e9\u671f\u53ef\u4f38\u7f29\u7535\u5b50\u4ea7\u54c1\u7684\u4e00\u5927\u8fdb\u6b65\u3002\u201d\u201c\u4f46\u6211\u4eec\u7528\u6765\u5236\u4f5c\u6750\u6599\u7684\u65b9\u6cd5\u4e5f\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\uff0c\u5f88\u5bb9\u6613\u653e\u5927\u3002\u201d\n\u5177\u4f53\u5730\u8bf4\uff0c\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u4e86\u4e00\u79cd\u540d\u4e3a\u547c\u5438\u56fe\u65b9\u6cd5\u7684\u6280\u672f\u6765\u521b\u9020\u4e00\u79cd\u53ef\u4f38\u5c55\u7684\u805a\u5408\u7269\u8584\u819c\uff0c\u5176\u7279\u70b9\u662f\u5b54\u6d1e\u5206\u5e03\u5747\u5300\u3002\u901a\u8fc7\u5c06\u8584\u819c\u6d78\u6ce1\u5728\u542b\u6709\u94f6\u7eb3\u7c73\u7ebf\u7684\u6eb6\u6db2\u4e2d\uff0c\u5bf9\u8584\u819c\u8fdb\u884c\u6d82\u5c42\u3002\u7136\u540e\uff0c\u7814\u7a76\u4eba\u5458\u5bf9\u6750\u6599\u8fdb\u884c\u70ed\u538b\uff0c\u5c06\u7eb3\u7c73\u7ebf\u5bc6\u5c01\u5230\u4f4d\u3002\n\u6731\u8bf4\uff1a\u201c\u5f97\u5230\u7684\u8584\u819c\u663e\u793a\u51fa\u5bfc\u7535\u6027\u3001\u5149\u5b66\u900f\u8fc7\u7387\u548c\u6c34\u84b8\u6c14\u6e17\u900f\u6027\u7684\u6781\u597d\u7ec4\u5408\u3002\u201d\u7531\u4e8e\u94f6\u7eb3\u7c73\u7ebf\u5d4c\u5165\u5728\u805a\u5408\u7269\u8868\u9762\u7684\u6b63\u4e0b\u65b9\uff0c\u8fd9\u79cd\u6750\u6599\u5728\u51fa\u6c57\u548c\u957f\u671f\u7a7f\u6234\u540e\u4e5f\u8868\u73b0\u51fa\u6781\u597d\u7684\u7a33\u5b9a\u6027\u3002\u201c\u3002\n\u8fd9\u7bc7\u8bba\u6587\u7684\u5408\u8457\u8005\u3001\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u7acb\u5927\u5b66\u524d\u535a\u58eb\u540e\u7814\u7a76\u5458\u3001\u73b0\u4efb\u77f3\u6eaa\u5927\u5b66(Stony Brook University)\u6559\u5458\u7684\u59da\u73ca\u73ca(\u97f3\u8bd1)\u8868\u793a\uff1a\u201c\u6700\u7ec8\u7ed3\u679c\u975e\u5e38\u8584-\u53ea\u6709\u51e0\u5fae\u7c73\u539a\u3002\u201d\u201c\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u4e0e\u76ae\u80a4\u63a5\u89e6\uff0c\u4f7f\u7535\u5b50\u4ea7\u54c1\u6709\u66f4\u597d\u7684\u4fe1\u566a\u6bd4\u3002\n\u59da\u8bf4\uff1a\u201c\u53ef\u7a7f\u6234\u7535\u5b50\u4ea7\u54c1\u7684\u900f\u6c14\u6027\u4e0d\u4ec5\u5bf9\u8212\u9002\u6027\u5f88\u91cd\u8981\u3002\u201d\u201c\u5982\u679c\u53ef\u7a7f\u6234\u8bbe\u5907\u4e0d\u900f\u6c14\uff0c\u4e5f\u4f1a\u5f15\u8d77\u76ae\u80a4\u523a\u6fc0\u3002\u201d\n\u4e3a\u4e86\u5c55\u793a\u8fd9\u79cd\u6750\u6599\u5728\u53ef\u7a7f\u6234\u7535\u5b50\u4ea7\u54c1\u4e2d\u7684\u5e94\u7528\u6f5c\u529b\uff0c\u7814\u7a76\u4eba\u5458\u5f00\u53d1\u5e76\u6d4b\u8bd5\u4e86\u4e24\u79cd\u5178\u578b\u5e94\u7528\u7684\u539f\u578b\u3002\n\u7b2c\u4e00\u4e2a\u539f\u578b\u7531\u76ae\u80a4\u53ef\u5b89\u88c5\u7684\u5e72\u7535\u6781\u7ec4\u6210\uff0c\u7528\u4f5c\u7535\u751f\u7406\u4f20\u611f\u5668\u3002\u5b83\u4eec\u6709\u591a\u79cd\u6f5c\u5728\u7684\u5e94\u7528\uff0c\u4f8b\u5982\u6d4b\u91cf\u5fc3\u7535\u56fe(ECG)\u548c\u808c\u7535\u56fe(EMG)\u4fe1\u53f7\u3002\n\u201c\u8fd9\u4e9b\u4f20\u611f\u5668\u80fd\u591f\u4ee5\u6781\u597d\u7684\u8d28\u91cf\u8bb0\u5f55\u4fe1\u53f7\uff0c\u4e0e\u5546\u4e1a\u4e0a\u53ef\u7528\u7684\u7535\u6781\u4e0d\u76f8\u4e0a\u4e0b\uff0c\u201d\u6731\u8bf4\u3002\n\u7b2c\u4e8c\u4e2a\u539f\u578b\u5c55\u793a\u4e86\u4eba\u673a\u754c\u9762\u7684\u7eba\u7ec7\u54c1\u96c6\u6210\u89e6\u6478\u4f20\u611f\u3002\u4f5c\u8005\u4f7f\u7528\u4e00\u79cd\u4e0e\u591a\u5b54\u7535\u6781\u96c6\u6210\u7684\u53ef\u7a7f\u6234\u7eba\u7ec7\u54c1\u5957\u7b52\u6765\u73a9\u4fc4\u7f57\u65af\u65b9\u5757\u7b49\u7535\u8111\u6e38\u620f\u3002\u76f8\u5173\u89c6\u9891\u53ef\u5728https://youtu.be/7AO_cq8A_BE.\u4e0a\u89c2\u770b\u3002\n\u6731\u8bf4\uff1a\u201c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5f00\u53d1\u53ef\u7a7f\u6234\u7684\u4f20\u611f\u5668\u6216\u7528\u6237\u754c\u9762\uff0c\u53ef\u4ee5\u957f\u65f6\u95f4\u4f69\u6234\uff0c\u6211\u4eec\u5c31\u9700\u8981\u900f\u6c14\u7684\u7535\u5b50\u6750\u6599\u3002\u201d\u201c\u56e0\u6b64\uff0c\u8fd9\u662f\u5411\u524d\u8fc8\u51fa\u7684\u91cd\u8981\u4e00\u6b65\u3002\u201d\n\u8fd9\u7bc7\u540d\u4e3a\u201c\u900f\u6c14\u3001\u8d85\u8584\u3001\u53ef\u4f38\u5c55\u7684\u8868\u76ae\u7535\u5b50\u5b66\u4e0e\u591a\u5b54\u7535\u6781\u201d\u7684\u8bba\u6587\u53d1\u8868\u5728\u201cACS Nano\u201d\u6742\u5fd7\u4e0a\u3002\u8fd9\u7bc7\u8bba\u6587\u7684\u7b2c\u4e00\u4f5c\u8005\u662f\u5357\u4eac\u90ae\u7535\u5927\u5b66(NUPT)\u7684\u535a\u58eb\u751f\u5468\u4f1f\u65b0(\u97f3\u8bd1)\uff0c\u4ed6\u5728\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u62c5\u4efb\u8bbf\u95ee\u5b66\u8005\u65f6\u53c2\u4e0e\u4e86\u8fd9\u4e2a\u9879\u76ee\u3002\u8fd9\u7bc7\u8bba\u6587\u662f\u7531\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u7acb\u5927\u5b66\u7684\u535a\u58eb\u751f\u738b\u6d2a\u5b87\u548c\u5357\u4eac\u7406\u5de5\u5927\u5b66\u7684\u675c\u9752\u5ddd\u5171\u540c\u64b0\u5199\u7684\u3002\u8fd9\u7bc7\u8bba\u6587\u7684\u8054\u5408\u901a\u8baf\u4f5c\u8005\u662f\u5357\u4eac\u7406\u5de5\u5927\u5b66\u6559\u6388\u9a6c\u8273\u6587(\u97f3\u8bd1)\u3002..\u3002\n\u8fd9\u9879\u5de5\u4f5c\u662f\u5728\u56fd\u5bb6\u79d1\u5b66\u57fa\u91d1\u4f1a\u7684\u652f\u6301\u4e0b\u5b8c\u6210\u7684\uff0c\u8d44\u52a9\u53f7\u4e3aCMMI-1728370\u3002\n\u4f5c\u8005\uff1a\u5357\u4eac\u90ae\u7535\u5927\u5b66\u5468\u4f1f\u65b0\uff0c\u675c\u9752\u5ddd\uff0c\u9a6c\u8273\u6587\uff1b\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u7acb\u5927\u5b66\u548c\u77f3\u6eaa\u5927\u5b66\u59da\u73ca\u73ca\uff1b\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u7acb\u5927\u5b66\u738b\u6d2a\u5b87\u548c\u6731\u52c7\u3002\n\u6458\u8981\uff1a\u901a\u8fc7\u81ea\u7ec4\u88c5\u591a\u5b54\u886c\u5e95\u548c\u5bfc\u7535\u7eb3\u7c73\u7ed3\u6784\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u900f\u6c14\u3001\u8d85\u8584\u548c\u53ef\u4f38\u5c55\u7684\u7535\u6781\u3002\u91c7\u7528\u9ad8\u6548\u3001\u53ef\u6269\u5c55\u7684\u547c\u5438\u56fe\u65b9\u6cd5\u5f15\u5165\u591a\u5b54\u9aa8\u67b6\uff0c\u7136\u540e\u5bf9\u94f6\u7eb3\u7c73\u7ebf(AgNW)\u8fdb\u884c\u6d78\u6e0d\u548c\u70ed\u538b\u4ee5\u63d0\u4f9b\u5bfc\u7535\u6027\u3002\u6240\u5f97\u8584\u819c\u7684\u900f\u8fc7\u7387\u4e3a61%\uff0c\u65b9\u963b\u4e3a7.30\u03a9/sq\uff0c\u6c34\u84b8\u6c14\u6e17\u900f\u7387\u4e3a23 mg cm-2h-1\u3002\u4e0b\u9762\u5d4c\u5165\u4e86AgNW..\u3002", "note_en": "Engineering researchers have created ultrathin, stretchable electronic material that is gas permeable, allowing the material to \u201cbreathe.\u201d The material was designed specifically for use in biomedical or wearable technologies, since the gas permeability allows sweat and volatile organic compounds to evaporate away from the skin, making it more comfortable for users \u2013 especially for long-term wear.\n \u201cThe gas permeability is the big advance over earlier stretchable electronics,\u201d says Yong Zhu, co-corresponding author of a paper on the work and a professor of mechanical and aerospace engineering at North Carolina State University. \u201cBut the method we used for creating the material is also important because it\u2019s a simple process that would be easy to scale up.\u201d\n Specifically, the researchers used a technique called the breath figure method to create a stretchable polymer film featuring an even distribution of holes. The film is coated by dipping it in a solution that contains silver nanowires. The researchers then heat-press the material to seal the nanowires in place.\n \u201cThe resulting film shows an excellent combination of electric conductivity, optical transmittance and water-vapor permeability,\u201d Zhu says. \u201cAnd because the silver nanowires are embedded just below the surface of the polymer, the material also exhibits excellent stability in the presence of sweat and after long-term wear.\u201d\n \u201cThe end result is extremely thin \u2013 only a few micrometers thick,\u201d says Shanshan Yao, co-author of the paper and a former postdoctoral researcher at NC\u00a0State who is now on faculty at Stony Brook University. \u201cThis allows for better contact with the skin, giving the electronics a better signal-to-noise ratio.\n \u201cAnd gas permeability of wearable electronics is important for more than just comfort,\u201d Yao says. \u201cIf a wearable device is not gas permeable, it can also cause skin irritation.\u201d\n To demonstrate the material\u2019s potential for use in wearable electronics, the researchers developed and tested prototypes for two representative applications.\n The first prototype consisted of skin-mountable, dry electrodes for use as electrophysiologic sensors. These have multiple potential applications, such as measuring electrocardiography (ECG) and electromyography (EMG) signals.\n \u201cThese sensors were able to record signals with excellent quality, on par with commercially available electrodes,\u201d Zhu says.\n The second prototype demonstrated textile-integrated touch sensing for human-machine interfaces. The authors used a wearable textile sleeve integrated with the porous electrodes to play computer games such as Tetris. Related video can be seen at  https://youtu.be/7AO_cq8A_BE.\n \u201cIf we want to develop wearable sensors or user interfaces that can be worn for a significant period of time, we need gas-permeable electronic materials,\u201d Zhu says. \u201cSo this is a significant step forward.\u201d\n The paper, \u201c Gas-Permeable, Ultrathin, Stretchable Epidermal Electronics with Porous Electrodes,\u201d is published in the journal  ACS Nano. First author of the paper is Weixin Zhou, a Ph.D. student at Nanjing University of Posts and Telecommunications (NUPT) who worked on the project while a visiting scholar at NC State. The paper was co-authored by Hongyu Wang, a Ph.D. student at NC State, and by Qingchuan Du of NUPT. Co-corresponding author of the paper is Yanwen Ma, a professor at NUPT.  ...\n The work was done with support from the National Science Foundation, under grant number CMMI-1728370.\n    Authors: Weixin Zhou, Qingchuan Du and Yanwen Ma, Nanjing University of Posts and Telecommunications; Shanshan Yao, North Carolina State University and Stony Brook University; and Hongyu Wang and Yong Zhu, North Carolina State University\n   Abstract: We present gas-permeable, ultrathin, and stretchable electrodes enabled by self-assembled porous substrates and conductive nanostructures. Efficient and scalable breath figure method is employed to introduce the porous skeleton and then silver nanowires (AgNWs) are dip-coated and heat-pressed to offer electric conductivity. The resulting film has a transmittance of 61%, sheet resistance of 7.3 \u03a9/sq, and water vapor permeability of 23 mg cm -2 h -1. With AgNWs embedded below  ...", "posttime": "2020-05-03 01:43:34", "tags": "\u53ef\u7a7f\u6234,\u7535\u5b50\u4ea7\u54c1,electronics,\u6750\u6599,material", "title": "\u201c\u900f\u6c14\u201d\u7535\u5b50\u4ea7\u54c1\u4e3a\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u53ef\u7a7f\u6234\u6280\u672f\u94fa\u5e73\u4e86\u9053\u8def", "title_en": "\u2018Breathable\u2019 Electronics Pave the Way for More Functional Wearable Tech", "transed": 1, "url": "https://news.ncsu.edu/2020/04/breathable-electronics/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u53ef\u7a7f\u6234", "\u7535\u5b50\u4ea7\u54c1", "\u6750\u6599", "material"]}, {"category": "", "categoryclass": "", "imagename": "8a33f2a34193796943196bc3971e443b.jpg", "infoid": 1000388, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u786b\u9178\u5728\u51e0\u5206\u949f\u5185\u5c31\u628a\u536b\u751f\u7eb8\u53d8\u6210\u4e86\u9ed1\u8272\u6709\u6bd2\u6c61\u6ce5\u3002#\u5b9e\u9a8c#\u5982\u4f55\u64cd\u4f5c#\u786b\u9178", "note_en": "The sulfuric acid turned the toilet paper into a black toxic sludge within a matter of minutes.  #experiment  #howto  #sulfuricacid", "posttime": "2020-05-03 01:43:22", "tags": "\u536b\u751f\u7eb8,toilet,\u64cd\u4f5c,howto", "title": "\u536b\u751f\u7eb8VS\u786b\u9178", "title_en": "Toilet Paper vs. Sulfuric Acid", "transed": 1, "url": "https://youtu.be/gR6S-CiZcJA", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u536b\u751f\u7eb8", "toilet", "\u64cd\u4f5c", "howto"]}]