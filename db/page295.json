[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1001976, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "L1(Lasso)\u548cL2(Ridge)\u6b63\u5219\u5316\u5df2\u88ab\u5e7f\u6cdb\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u4ee5\u514b\u670d\u8fc7\u62df\u5408\u3002\u7279\u522b\u662f\uff0c\u5957\u7d22\u4f1a\u5bfc\u81f4\u6743\u91cd\u7a00\u758f\u3002\u53e6\u4e00\u79cd\u6b63\u5219\u5316\u662f\u4ecb\u4e8eLasso\u548cRidge\u6b63\u5219\u5316\u4e4b\u95f4\u7684\uff0c\u79f0\u4e3a\u201c\u7fa4Lasso\u201d\uff0c\u5b83\u4e5f\u5bfc\u81f4\u4e86\u6743\u91cd\u7684\u7a00\u758f\u6027\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u9996\u5148\u56de\u987e\u4e00\u4e0b\u5957\u7d22\u548c\u5cad\u6b63\u5219\u5316\uff0c\u7136\u540e\u770b\u770b\u4ec0\u4e48\u662f\u5957\u7d22\u96c6\u56e2\uff0c\u5e76\u4e86\u89e3\u4e3a\u4ec0\u4e48\u5957\u7d22\u96c6\u56e2\u4f1a\u5bfc\u81f4\u6743\u91cd\u7a00\u758f\u3002\n\u5047\u8bbe$\\beta$\u662f\u53c2\u6570\u96c6\u5408\u3002$\\beta=\\{\\beta_1\uff0c\\beta_2\uff0c\\cdots\uff0c\\beta_n$\uff0c\u5219L0\u3001L1\u548cL2\u89c4\u8303\u8868\u793a\u4e3a$||\\beta||_0$\uff0c$||\\beta||_1$\uff0c$||\\beta||_2$\u3002\u5b83\u4eec\u88ab\u5b9a\u4e49\u4e3a\u3002\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u636e\u96c6${X\uff0cy\\}$\uff0c\u5176\u4e2d$X$\u662f\u7279\u5f81\uff0c$y$\u662f\u56de\u5f52\u7684\u6807\u7b7e\uff0c\u6211\u4eec\u7b80\u5355\u5730\u5c06\u5176\u5efa\u6a21\u4e3a\u5177\u6709\u7ebf\u6027\u5173\u7cfb$y=X\\beta$\u3002\u5229\u7528\u6b63\u5219\u5316\u65b9\u6cd5\uff0c\u7ed9\u51fa\u4e86L0\u3001Lasso\u548cRidge\u56de\u5f52\u7684\u4f18\u5316\u95ee\u9898\u3002\n\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6743\u91cd\u7a00\u758f\u548c\u7279\u5f81\u9009\u62e9\uff0cL0\u56de\u5f52\u662f\u6700\u597d\u7684\u4f18\u5316\u7b56\u7565\u3002\u7136\u800c\uff0c\u7531\u4e8eL0\u56de\u5f52\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u4e0d\u53ef\u5fae\u7684\u3002\u6211\u4eec\u5c06L0\u56de\u5f52\u653e\u5bbd\u4e3aLasso\u56de\u5f52\uff0c\u5e76\u4e14Lasso\u56de\u5f52\u4e5f\u4f1a\u5bfc\u81f4\u5408\u7406\u7684\u6743\u91cd\u7a00\u758f\u6027\u3002\n\u5047\u8bbe$\\beta$\u4e2d\u7684\u6743\u91cd\u53ef\u4ee5\u5206\u7ec4\uff0c\u5219\u65b0\u7684\u6743\u91cd\u5411\u91cf\u53d8\u4e3a$\\beta_G=\\{\\beta^{(1)}\uff0c\\beta^{(2)}\uff0c\\cdots\uff0c\\beta^{(M)}\\}$\u3002$1\\leq l\\leq m$\u7684\u6bcf\u4e2a$\\beta^{(L)}$\u8868\u793a\u6765\u81ea$\\beta$\u7684\u4e00\u7ec4\u6743\u91cd\u3002\n\u6211\u4eec\u76f8\u5e94\u5730\u5c06$X$\u8fdb\u4e00\u6b65\u5206\u7ec4\u3002\u6211\u4eec\u5c06$X^{(L)}$\u8868\u793a\u4e3aX\u7684\u5b50\u77e9\u9635\uff0c\u5176\u5217\u5bf9\u5e94\u4e8e$\\beta^{(L)}$\u4e2d\u7684\u6743\u91cd\u3002\u6700\u4f18\u5316\u95ee\u9898\u53d8\u6210\u4e86\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u53ea\u6709\u4e00\u4e2a\u7fa4\uff0c\u5373$m=1$\u65f6\uff0c\u7fa4Lasso\u7b49\u4ef7\u4e8eRidge\uff1b\u5f53\u6bcf\u4e2a\u6743\u91cd\u5f62\u6210\u4e00\u4e2a\u72ec\u7acb\u7fa4\uff0c\u5373$m=n$\u65f6\uff0c\u7fa4Lasso\u53d8\u4e3aLasso\u3002\n\u5bf9\u4e8e\u5957\u7d22\u9020\u6210\u7684\u7a00\u758f\u6027\uff0c\u6700\u76f4\u89c2\u7684\u89e3\u91ca\u662f\u5957\u7d22$||\\beta||_1$\u4e2d\u6cbf\u8f74\u7ebf\u7684\u4e0d\u53ef\u5fae\u89d2\u66f4\u6709\u53ef\u80fd\u4e0e\u635f\u5931\u51fd\u6570$||y-X\\beta||_2^{2}$\u63a5\u89e6\u3002\u5728\u5cad\u56de\u5f52\u4e2d\uff0c\u7531\u4e8e\u5728\u5cad$||\\beta||_2$\u5185\u5904\u5904\u53ef\u5fae\uff0c\u6cbf\u8f74\u63a5\u89e6\u7684\u51e0\u7387\u6781\u5c0f\u3002\n\u8fd8\u5e94\u6ce8\u610f\uff0c\u6b63\u5219\u5316\u5f3a\u5ea6$\\\u03bb$\u4e5f\u5f88\u91cd\u8981\u3002\u5f53$\\lambda$\u53d8\u5927\u65f6\uff0c\u5957\u7d22$||\\beta||_1$\u7684\u5927\u5c0f\u4f1a\u53d8\u5c0f\uff0c\u6cbf\u8f74\u63a5\u89e6\u7684\u673a\u4f1a\u4f1a\u589e\u52a0\uff0c\u56e0\u6b64\u6743\u91cd\u53d8\u4e3a\u96f6\u7684\u6570\u91cf\u4f1a\u53d8\u5927\u3002\u76f8\u53cd\uff0c\u5f53$\\lambda$\u53d8\u5c0f\u65f6\uff0c\u5957\u7d22$||\\beta||_1$\u7684\u5927\u5c0f\u4f1a\u53d8\u5927\uff0c\u6cbf\u8f74\u63a5\u89e6\u7684\u673a\u4f1a\u4f1a\u53d8\u5c0f\uff0c\u4ece\u800c\u6743\u91cd\u7684\u6570\u91cf\u4f1a\u53d8\u5c0f\u3002\u8bf7\u8bd5\u7740\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002\n\u7c7b\u4f3c\u5730\uff0c\u5957\u7d22\u7ec4\u5408\u7684\u539f\u59cb\u4f5c\u8005\u63d0\u4f9b\u4e86\u5957\u7d22\u3001\u5957\u7d22\u7ec4\u5408\u548c\u4e09\u7ef4\u5c71\u810a\u7684\u51e0\u4f55\u56fe\u5f62\u3002\u7279\u522b\u5730\uff0c\u5957\u7d22\u7ec4\u4e2d\uff0c\u524d\u4e24\u4e2a\u6743\u91cd$\\beta_{11}\u3001\\beta_{12}$\u5728\u7ec4\u4e2d\uff0c\u7b2c\u4e09\u4e2a\u6743\u91cd$\\beta_2$\u5728\u4e00\u4e2a\u7ec4\u4e2d\u3002\n\u56e0\u4e3a\u5728$\\BETA_{11}\\BETA_2$\u5e73\u9762\u6216$\\BETA_{12}\\BETA_2$\u5e73\u9762\u4e0a\uff0c\u6cbf\u8f74\u4ecd\u6709\u4e0d\u53ef\u5fae\u89d2\uff0c\u6240\u4ee5\u6cbf\u8f74\u63a5\u89e6\u7684\u53ef\u80fd\u6027\u5f88\u5927\u3002\u6ce8\u610f\uff0c\u5bf9\u4e8e\u76f8\u540c\u7684\u6b63\u5219\u5316\u5f3a\u5ea6$\\lambda$\uff0c\u5957\u7d22\u7fa4\u7684\u8f74\u5411\u63a5\u89e6\u51e0\u7387\u6bd4\u5957\u7d22\u7684\u5c0f\uff0c\u4f46\u6bd4\u5c71\u810a\u7684\u5927\u3002", "note_en": "L1 (Lasso) and L2 (Ridge) regularization have been widely used for machine learning to overcome overfitting. Lasso, in particular, causes sparsity for weights. There is another regularization, which is something between Lasso and Ridge regularization, called \u201cGroup Lasso\u201d, which also causes sparsity for weights.\n  In this blog post, we will first review Lasso and Ridge regularization, then take a look at what Group Lasso is, and understand why Group Lasso will cause sparsity for weights.\n  Suppose $\\beta$ is a collection of parameters. $\\beta = \\{ \\beta_1, \\beta_2, \\cdots, \\beta_n \\}$, The L0, L1, and L2 norms are denoted as $||\\beta||_0$, $||\\beta||_1$, $||\\beta||_2$. They are defined as\n  Given a dataset $\\{X, y\\}$ where $X$ is the feature and $y$ is the label for regression, we simply model it as has a linear relationship $y = X\\beta$. With regularization, the optimization problem of L0, Lasso and Ridge regressions are\n Ideally, for weight sparsity and feature selection, L0 regression is the best optimization strategy. However, since L0 regression is not differentiable anywhere. We relax L0 regression to Lasso regression, and Lasso regression will also cause reasonable weight sparsity.\n  Suppose the weights in $\\beta$ could be grouped, the new weight vector becomes $\\beta_G = \\{ \\beta^{(1)}, \\beta^{(2)}, \\cdots, \\beta^{(m)} \\}$. Each $\\beta^{(l)}$ for $1 \\leq l \\leq m$ represents a group of weights from $\\beta$.\n  We further group $X$ accordingly. We denote $X^{(l)}$ as the submatrix of X with columns corresponding to the weights in $\\beta^{(l)}$. The optimization problem becomes\n   It should be noted that when there is only one group, i.e., $m=1$, Group Lasso is equivalent to Ridge; when each weight forms an independent group, i.e., $m=n$, Group Lasso becomes Lasso.\n  The most intuitive explanation to the sparsity caused by Lasso is that the non-differentiable corner along the axes in the Lasso $||\\beta||_1$ are more likely to contact with the loss function $||y - X\\beta||_2^{2}$. In Ridge regression, because it is differentiable everywhere in the Ridge $||\\beta||_2$ , the chance of contact along the axes is extremely small.\n  It should also be noted that the regularization strength $\\lambda$ also matters. When $\\lambda$ becomes larger, the size of Lasso $||\\beta||_1$ will become smaller, and the chance of contact along the axes will become higher, thus the number of weights become zeros will become larger. On the contrary, When $\\lambda$ becomes smaller, the size of Lasso $||\\beta||_1$ will become larger, and the chance of contact along the axes will become smaller, thus the number of weights become zeros will become smaller. Please try to understand this and this is important.\n  Similarly, the original authors of the Group Lasso have provided the geometry for Lasso, Group Lasso, and Ridge on three dimensions. In Group Lasso in particular, the first two weights $\\beta_{11}, \\beta_{12}$ are in group and the third weight $\\beta_2$ is in one group.\n  Because on the $\\beta_{11}\\beta_2$ plane or the $\\beta_{12}\\beta_2$ plane, there are still non-differentiable corners along the axes, there is a big chance of contact along the axes. Note that for the same regularization strength $\\lambda$, the chance of contact along the axes for Group Lasso is smaller than that for Lasso but greater than that for Ridge.", "posttime": "2020-05-13 22:35:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5957\u7d22,lasso", "title": "\u7fa4\u5957\u7d22\u6b63\u5219\u5316", "title_en": "Group Lasso Regularization", "transed": 1, "url": "https://leimao.github.io/blog/Group-Lasso/", "via": "", "real_tags": ["\u5957\u7d22", "lasso"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001975, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u6709\u4efb\u4f55\u6ca1\u6709\u5728\u8fd9\u91cc(\u6216\u5728\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\u4e2d)\u5217\u51fa\u7684\u6e38\u620f\uff0c\u6216\u8005\u5982\u679c\u60a8\u53ef\u4ee5\u63d0\u4f9b\u5f53\u524d\u6ca1\u6709\u4efb\u4f55\u6e38\u620f\u7684\u56fe\u7247\uff0c\u8bf7\u7ed9\u6211\u53d1\u7535\u5b50\u90ae\u4ef6\uff01(\u9644\u6709\u4fe1\u606f\u548c/\u6216\u56fe\u7247)\u3002", "note_en": "If you have ANY games that are not listed here (or in the FAQ), or if you can provide pictures of ones that currently don&#39;t have any, please  Email me! (With information and/or pictures).", "posttime": "2020-05-13 22:20:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u624b\u6301,handheld", "title": "\u7535\u5b50\u624b\u6301\u6e38\u620f\u9986", "title_en": "Electronic Handheld Game Museum", "transed": 1, "url": "https://www.handheldmuseum.com/", "via": "", "real_tags": ["\u6e38\u620f", "\u624b\u6301", "handheld"]}, {"category": "", "categoryclass": "", "imagename": "af60395255812d66fd7830af5e3d61d7.png", "infoid": 1001974, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e0c\u514b\u5b9a\u5f8b\u9884\u6d4b\uff0c\u505a\u51fa\u51b3\u5b9a\u6240\u9700\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u4f1a\u968f\u7740\u9009\u62e9\u7684\u6570\u91cf\u800c\u589e\u52a0\u3002\u9009\u62e9\u8d8a\u591a\uff0c\u7528\u6237\u505a\u51fa\u51b3\u5b9a\u7684\u65f6\u95f4\u5c31\u8d8a\u957f\u3002\n\u627e\u4e00\u4e2a\u4f60\u6709\u5f88\u591a\u9009\u62e9\u6216\u6709\u5f88\u591a\u91cd\u590d\u7684\u5730\u65b9\u3002\n\u5c1d\u8bd5\u51cf\u5c11\u9009\u9879\u6570\u91cf\u6216\u627e\u5230\u9690\u85cf\u9879\u76ee\u7684\u65b9\u6cd5\u3002(\u662f\u5426\u9700\u8981\u4e00\u6b21\u5168\u90e8\u5c55\u793a\uff1f#\u6e10\u8fdb\u5f0f\u62ab\u9732)\u3002\n\u5982\u679c\u4f60\u4e0d\u80fd\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u9009\u9879\uff0c\u8bd5\u7740\u628a\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u5bb9\u6613\u6d4f\u89c8\u7684\u987a\u5e8f\u4e2d\uff0c\u5e76\u786e\u4fdd\u5b83\u4eec\u662f\u719f\u6089\u7684\uff1b\u5426\u5219\uff0c\u5b83\u5c31\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\n\u4eba\u4eec\u503e\u5411\u4e8e\u4ee5\u4e00\u79cd\u5f3a\u5316\u4e2a\u4eba\u4fe1\u5ff5\u6216\u5047\u8bbe\u7684\u65b9\u5f0f\u641c\u7d22\u3001\u89e3\u91ca\u3001\u504f\u597d\u548c\u56de\u5fc6\u4fe1\u606f\u3002\n\u5fae\u5999\u7684\u89c6\u89c9\u6216\u53e3\u5934\u5efa\u8bae\u5e2e\u52a9\u7528\u6237\u56de\u5fc6\u7279\u5b9a\u4fe1\u606f\uff0c\u5f71\u54cd\u4ed6\u4eec\u7684\u56de\u5e94\u65b9\u5f0f\u3002\u542f\u52a8\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5728\u5f15\u5165\u53e6\u4e00\u4e2a\u523a\u6fc0\u6216\u4efb\u52a1\u4e4b\u524d\u6fc0\u6d3b\u7528\u6237\u77ed\u671f\u8bb0\u5fc6\u4e2d\u7684\u8054\u60f3\u6216\u8868\u5f81\u3002\n\u53cb\u597d\u7684\u673a\u573a\u666f\u89c2\u8ba9\u7528\u6237\u68a6\u60f3\u7740\u4ed6\u4eec\u7684\u4e0b\u4e00\u6b21\u65c5\u884c\uff0c\u589e\u52a0\u4e86\u83b7\u5f97\u79ef\u6781\u4f53\u9a8c\u7684\u673a\u4f1a\uff1a\n\u8d85\u4eba\u7684\u5165\u804c\u5305\u62ec\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u4f60\u5c06\u4ece\u4ed6\u4eec\u7684\u9996\u5e2d\u6267\u884c\u5b98\u90a3\u91cc\u6536\u5230\u4e00\u4e9b\u6709\u7528\u7684\u5165\u804c\u7535\u5b50\u90ae\u4ef6\u3002\n\u8ba4\u77e5\u8d1f\u8377\u662f\u5b8c\u6210\u4e00\u9879\u4efb\u52a1\u6240\u9700\u7684\u8111\u529b\u52b3\u52a8\u603b\u91cf\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u7528\u6237\u4e0e\u4ea7\u54c1\u4ea4\u4e92\u6240\u9700\u7684\u5904\u7406\u80fd\u529b\u3002\u5982\u679c\u9700\u8981\u5904\u7406\u7684\u4fe1\u606f\u8d85\u51fa\u4e86\u7528\u6237\u7684\u5904\u7406\u80fd\u529b\uff0c\u90a3\u4e48\u8ba4\u77e5\u8d1f\u8377\u5c31\u592a\u9ad8\u3002\nHopper\u7684\u7ed3\u679c\u9875\u9762\u6709\u5927\u91cf\u7684\u4fe1\u606f\u9700\u8981\u5206\u6790\uff0c\u8fd9\u4f7f\u5f97\u9009\u62e9\u65e5\u671f\u7684\u4efb\u52a1\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff1a\n\u9a6c\u91cc\u5965\u00b7\u5361\u4e01\u8f66\u7684\u4e3b\u9875\u4e0a\u5e03\u6ee1\u4e86\u56fe\u7247\u548c\u5c0f\u73a9\u610f\u513f\u3002\u7136\u800c\uff0c\u5b83\u4e0d\u662f\u968f\u673a\u7684\uff0c\u627e\u51fa\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u4f1a\u8fd9\u6837\u8bbe\u8ba1\uff1a\n\u7528\u6237\u83b7\u5f97\u7684\u521d\u59cb\u4fe1\u606f\u4f1a\u5f71\u54cd\u540e\u7eed\u5224\u65ad\u3002\u5373\u4f7f\u951a\u5b9a\u7684\u6027\u8d28\u4e0e\u624b\u5934\u7684\u51b3\u7b56\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u951a\u5b9a\u901a\u5e38\u4e5f\u662f\u6709\u6548\u7684\u3002\u589e\u52a0\u611f\u77e5\u4ef7\u503c\u662f\u5f88\u6709\u7528\u7684\u3002\nTinder\u7684\u4ef7\u683c\u8868\u9996\u5148\u663e\u793a\u4e86\u6700\u6602\u8d35\u7684\u8ba2\u9605\u8ba1\u5212(\u4e3b\u64ad)\uff0c\u56e0\u6b64\u4e0e\u5176\u4ed6\u8ba1\u5212\u76f8\u6bd4\uff0c\u5176\u4ed6\u8ba1\u5212\u770b\u8d77\u6765\u5e76\u4e0d\u6602\u8d35\uff1a\n\u5b9e\u4f53\u5e97\u901a\u5e38\u4f1a\u5728\u524d\u9762\u5c55\u793a\u975e\u5e38\u6602\u8d35\u7684\u5546\u54c1\uff0c\u4e0a\u9762\u6709\u660e\u663e\u7684\u4ef7\u683c\u6807\u7b7e\uff0c\u8fd9\u6837\u4f60\u6700\u7ec8\u5bfb\u627e\u7684\u5546\u54c1\u5c31\u4f1a\u663e\u5f97\u66f4\u4fbf\u5b9c\u3002\n\u4eba\u4eec\u5f80\u5f80\u65e0\u610f\u8bc6\u5730\u505a\u51fa\u51b3\u5b9a\u3002\u5c0f\u63d0\u793a\u6216\u4e0a\u4e0b\u6587\u6539\u53d8\u53ef\u4ee5\u9f13\u52b1\u7528\u6237\u5728\u4e0d\u5f3a\u8feb\u4ed6\u4eec\u7684\u60c5\u51b5\u4e0b\u505a\u51fa\u7279\u5b9a\u7684\u51b3\u5b9a\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u542f\u52a8\u3001\u9ed8\u8ba4\u9009\u9879\u3001\u7a81\u663e\u548c\u611f\u77e5\u53d8\u5316\u6765\u5b9e\u73b0\u7684\u3002\n\u5f53\u4f60\u641c\u7d22\u4f4f\u5bbf\u5730\u70b9\u65f6\uff0cAirbnb\u4f1a\u63d0\u793a\u4f60\u6dfb\u52a0\u65e5\u671f\u548c\u5ba2\u4eba\u6570\u91cf\uff0c\u800c\u4e0d\u662f\u5f3a\u5236\u8fd9\u4e9b\u8fc7\u6ee4\u5668\uff1a\n\u67d0\u4e9b\u4e9a\u9a6c\u900a\u4ea7\u54c1\u7684\u9ed8\u8ba4\u8d2d\u4e70\u9009\u9879\u662f\u201c\u8ba2\u9605\u201d\u3002\u4ed6\u4eec\u901a\u8fc7\u63d0\u4f9b\u6298\u6263\u6765\u6fc0\u52b1\u8fd9\u79cd\u81ea\u52a8\u5faa\u73af\u8d2d\u4e70\uff1a", "note_en": "Hick\u2019s Law predicts that the time and the effort it takes to make a decision, increases with the number of options. The more choices, the more time users take to make their decisions.\n  Find an area where you have a lot of options or a lot of repetitions.\n Try to either reduce the number of options or find ways to hide items. (Do they all need to be displayed at once?  #progressive disclosure)\n If you can&#39;t minimize the options, try to put them in an easily skimmable order and  make sure the items are familiar; else, it won&#39;t work.\n People tend to search for, interpret, prefer, and recall information in a way that reinforces their personal beliefs or hypotheses.\n Subtle visual or verbal suggestions help users recall specific information, influencing how they respond. Priming works by activating an association or representation in users short-term memory just before another stimulus or task is introduced.\n The  friendly-looking airport landscape lets the users dream about their next trip increasing the chances of a positive experience:\n Superhuman&#39;s onboarding includes a priming on the fact that you&#39;ll  receive some helpful onboarding emails from their CEO\n Cognitive load is the total amount of mental effort that is required to complete a task. You can think of it as the processing power needed by the user to interact with a product. If the information that needs to be processed exceeds the user\u2019s ability to handle it, the cognitive load is too high.\n Hopper&#39;s results page has loads of information to parse, making the  task of choosing a date harder:\n Mario Kart&#39;s home page is packed with graphics and gizmos. However, it wasn&#39;t random,  find out why they designed it that way:\n The initial information that users get affects subsequent judgments. Anchoring often works even when the nature of the anchor doesn\u2019t have any relation with the decision at hand. It\u2019s useful to increase perceived value.\n Tinder&#39;s pricing table shows the  most expensive subscription plan first (the anchor) so that the other plans look inexpensive in comparison:\n Brick and mortar shops often display very expensive items in the front with visible price tags so that the item you end up seeking seems cheaper.\n People tend to make decisions unconsciously. Small cues or context changes can encourage users to make a certain decision without forcing them. This is typically done through  priming,  default option, salience and perceived variety.\n While you search for a place to stay,  Airbnb nudges you to add a date and number of guests instead of forcing those filter:\n The  default purchase option on some Amazon products is a \u201csubscription\u201d. They incentivize this automatic recurring purchase by offering a discount:", "posttime": "2020-05-13 22:20:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba4\u77e5,\u7528\u6237\u4f53\u9a8c,biases", "title": "\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u7684\u8ba4\u77e5\u504f\u5dee\u548c\u539f\u5219", "title_en": "Cognitive biases and principles that affect UX", "transed": 1, "url": "https://psychology.design/", "via": "", "real_tags": ["\u8ba4\u77e5", "\u7528\u6237\u4f53\u9a8c", "biases"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001973, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Erlang/OTP23\u662f\u4e00\u4e2a\u65b0\u7684\u4e3b\u8981\u7248\u672c\uff0c\u5177\u6709\u65b0\u7684\u7279\u6027\u3001\u6539\u8fdb\u4ee5\u53ca\u4e00\u4e9b\u4e0d\u517c\u5bb9\u4e4b\u5904\u3002\nERL_INTERFACE\uff1a\u5220\u9664\u4e86erl_interface(erl_interface.h\u548c\u57fa\u672c\u4e0a\u6240\u6709\u524d\u7f00\u4e3aerl_\u7684C\u51fd\u6570)\u4e2d\u4e0d\u63a8\u8350\u4f7f\u7528\u7684\u90e8\u5206\u3002\n\u4e0d\u5efa\u8bae\u4f7f\u7528\u7684erlang\uff1aget_stacktrace/0BIF\u73b0\u5728\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u800c\u4e0d\u662f\u5806\u6808\u8ddf\u8e2a\u3002Erlang\uff1a\u5728OTP24\u4e2d\u8ba1\u5212\u5220\u9664get_stacktrace/0\u3002\nOpenSSH6.5\u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u7684\u5bc6\u94a5\u6587\u4ef6\u8868\u793a\u5f62\u5f0f\uff0c\u79f0\u4e3aopenssh-key-v1\u3002\u73b0\u5728\u652f\u6301\u8fd9\u4e00\u70b9\uff0c\u4f46\u5904\u7406\u52a0\u5bc6\u5bc6\u94a5\u9664\u5916\u3002\n\u7b97\u6cd5\u914d\u7f6e\u73b0\u5728\u53ef\u4ee5\u5728.config\u6587\u4ef6\u4e2d\u5b8c\u6210\u3002\u4f8b\u5982\uff0c\u8fd9\u5bf9\u4e8e\u5728\u4e0d\u9700\u8981\u66f4\u6539\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u542f\u7528\u9ed8\u8ba4\u7981\u7528\u7684\u7b97\u6cd5\u5f88\u6709\u7528\u3002\n\u5bf9\u4e2d\u95f4\u76d2\u517c\u5bb9\u6a21\u5f0f\u7684\u652f\u6301\u4f7fTLS 1.3\u63e1\u624b\u770b\u8d77\u6765\u66f4\u50cfTLS 1.2\u63e1\u624b\uff0c\u5e76\u589e\u52a0\u4e86\u901a\u8fc7\u4f20\u7edf\u4e2d\u95f4\u76d2\u6210\u529f\u5efa\u7acbTLS 1.3\u8fde\u63a5\u7684\u673a\u4f1a\u3002\n\u5728\u4e0d\u4f9d\u8d56EPMD\u7684\u60c5\u51b5\u4e0b\u8fd0\u884cErlang\u5206\u53d1\u7684\u53ef\u80fd\u6027\u5df2\u7ecf\u6269\u5c55\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5411inet\u53d1\u884c\u7248\u6dfb\u52a0\u4e86\u51e0\u4e2a\u65b0\u9009\u9879\u3002\n\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5230gen_tcp\u548cinet\u7684\u7b2c\u4e00\u4e2a\u5b9e\u9a8c\u6027\u5957\u63a5\u5b57\u540e\u7aef\u3002gen_udp\u548cgen_sctp\u5c06\u7d27\u968f\u5176\u540e\u3002\u5c06{inet_backend\uff0csocket}\u4f5c\u4e3a\u4fa6\u542c()\u6216\u8fde\u63a5()\u7684\u7b2c\u4e00\u9009\u9879\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u73b0\u6709\u4ee3\u7801\u4e2d\u5c1d\u8bd5\u6b64\u64cd\u4f5c\n\u5185\u6838\u4e2d\u7684\u4e00\u4e2a\u65b0\u6a21\u5757ERPC\uff0c\u5b83\u5b9e\u73b0\u4e86RPC\u6a21\u5757\u63d0\u4f9b\u7684\u64cd\u4f5c\u7684\u589e\u5f3a\u5b50\u96c6\u3002\u589e\u5f3a\u7684\u610f\u4e49\u5728\u4e8e\u5b83\u53ef\u4ee5\u533a\u5206\u8fd4\u56de\u503c\u3001\u5f15\u53d1\u7684\u5f02\u5e38\u548c\u5176\u4ed6\u9519\u8bef\u3002\u4e0e\u539f\u59cb\u7684RPC\u5b9e\u73b0\u76f8\u6bd4\uff0cERPC\u8fd8\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd\u548c\u53ef\u4f38\u7f29\u6027\u3002\u8fd9\u662f\u901a\u8fc7\u5229\u7528\u65b0\u5f15\u5165\u7684SPOWN_REQUEST()BIF\u5b9e\u73b0\u7684\u3002\u6b64\u5916\uff0cRPC\u6a21\u5757\u8fd8\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u5229\u7528ERPC\u4ece\u8fd9\u4e9b\u6539\u8fdb\u4e2d\u53d7\u76ca\u3002\n\u5728\u4e8c\u8fdb\u5236\u5339\u914d\u4e2d\uff0c\u73b0\u5728\u8981\u5339\u914d\u7684\u6bb5\u7684\u5927\u5c0f\u88ab\u5141\u8bb8\u4e3a\u4fdd\u62a4\u8868\u8fbe\u5f0f(EEP-52)\u3002\nSSH\uff1a\u652f\u6301TCP/IP\u7aef\u53e3\u8f6c\u53d1\uff0c\u4e5f\u79f0\u4e3aTCP-FORWARD/DIRECT-TCP\u7684\u96a7\u9053\u3002\u5728OpenSSH\u5ba2\u6237\u7aef\u4e2d\uff0c\u8fd9\u5bf9\u5e94\u4e8e\u9009\u9879-L\u548c-R\u3002\nshell\u4e2d\u7684\u65b0\u51fd\u6570\uff0c\u7528\u4e8e\u663e\u793aErlang\u6a21\u5757\u3001\u51fd\u6570\u548c\u7c7b\u578b\u7684\u6587\u6863\u3002\u8fd9\u4e9b\u529f\u80fd\u5305\u62ec\uff1a\nHT/1\uff0c2\uff0c3--\u6253\u5370\u6a21\u5757\u7684\u7c7b\u578b\u6587\u6863\uff1a\u7c7b\u578b/\u6570\u91cf\u3002\u5728\u6784\u5efaErlang/OTP\u6587\u6863\u65f6\uff0c\u5d4c\u5165\u5f0f\u6587\u6863\u88ab\u521b\u5efa\u4e3a\u575e\u5757(EEP 48)\u3002\n\u5185\u6838\uff1a\u4ecb\u7ecd\u4e86\u5177\u6709\u65b0\u7684\u5206\u5e03\u5f0f\u547d\u540d\u8fdb\u7a0b\u7ec4\u5b9e\u73b0\u7684\u6a21\u5757PG\u3002\u65e7\u6a21\u5757PG2\u88ab\u5f03\u7528\uff0c\u5e76\u8ba1\u5212\u5728OTP24\u4e2d\u79fb\u9664\u3002\n\u6211\u4eec\u7528\u4e8e\u6784\u5efaWindows\u5305\u7684\u5de5\u5177\u94fe\u4f7f\u7528\u4e86\u65b0\u7684C++\u7f16\u8bd1\u5668\u3001Java\u7f16\u8bd1\u5668\u3001OpenSSL\u5e93\u548cwxWidgets\u7248\u672c\u8fdb\u884c\u4e86\u5347\u7ea7\u3002\u6211\u4eec\u73b0\u5728\u4f7f\u7528WSL(\u6784\u5efa\u65f6\u7528\u4e8eWindows\u7684Linux\u5b50\u7cfb\u7edf)\uff0c\u8fd9\u4f7f\u5f97\u5904\u7406\u6784\u5efa\u73af\u5883\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\n\u53ef\u4ee5\u5728\u8fd9\u91cc\u6d4f\u89c8\u5728\u7ebf\u6587\u6863\uff1ahttp://erlang.org/documentation/doc-11.0/doc\u4e5f\u53ef\u4ee5\u5728\u5b98\u65b9Erlang\u5b58\u50a8\u5e93https://github.com/erlang/otp\u7684gihub\u4e0a\u627e\u5230erlang/ospp\u6e90\u4ee3\u7801", "note_en": "Erlang/OTP 23 is a new major release with new features, improvements as well as a few incompatibilities.\n    erl_interface: Removed the deprecated parts of  erl_interface ( erl_interface.h and essentially all C functions with prefix  erl_).\n  The deprecated  erlang:get_stacktrace/0 BIF now returns an empty list instead of a stacktrace.  erlang:get_stacktrace/0 is scheduled for removal in OTP 24.\n    OpenSSH 6.5 introduced a new file representation of keys called  openssh-key-v1. This is now supported with the exception of handling encrypted keys.\n  Algorithm configuration could now be done in a .config file. This is useful for example to enable an algorithm that is disabled by default without need to change the code.\n  Support for the middlebox compatibility mode makes the TLS 1.3 handshake look more like a TLS 1.2 handshake and increases the chance of successfully establishing TLS 1.3 connections through legacy middleboxes.\n  The possibility to run Erlang distribution without relying on EPMD has been extended. To achieve this a couple of new options to the inet distribution has been added.\n  A first EXPERIMENTAL  socket backend to   gen_tcp and  inet has been implemented.  gen_udp and  gen_sctp will follow. \r\tPutting  {inet_backend, socket} as first option to  listen() or  connect() makes it easy to try this for existing code\n  A new module  erpc in kernel which implements an enhanced subset of the operations provided by the  rpc module. Enhanced in the sense that it makes it possible to distinguish between returned value, raised exceptions and other errors.  erpc also has better performance and scalability than the original  rpc implementation. This by utilizing the newly introduced  spawn_request() BIF. Also the  rpc module benefits from these improvements by utilizing  erpc when possible.\n    In binary matching, the size of the segment to be matched is now allowed to be a guard expression (EEP-52)\n    ssh: support for TCP/IP port forwarding, a.k.a tunnelling a.k.a as tcp-forward/direct-tcp is implemented. In the OpenSSH client, this corresponds to the options -L and -R.\n    New functions in the shell for displaying documentation for Erlang modules, functions and types. The \r\tfunctions are:\n  ht/1,2,3 -- Print the type documentation for a  Module:Type/Arity. \r\t\tThe embedded documentation is created as docchunks (EEP 48) when building the Erlang/OTP documentation.\n  kernel: The module  pg with a new implementation of distributed named process groups is introduced. The old module  pg2 is deprecated and scheduled for removal in OTP 24.\n  Our tool chain for building the Windows packages is upgraded with new C++ compiler, Java compiler, OpenSSL libraries and wxWidgets versions. We are now using WSL (the Linux Subsystem for Windows when building) which makes it easier to handle the build environment.\n      Online documentation can be browsed here:   http://erlang.org/documentation/doc-11.0/doc \rThe Erlang/OTP source can also be found at GitHub on the official Erlang repository,   https://github.com/erlang/otp", "posttime": "2020-05-13 22:05:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "otp,erlang", "title": "OTP 23\u7248\u672c", "title_en": "OTP 23 Release", "transed": 1, "url": "http://www.erlang.org/news/140", "via": "", "real_tags": ["otp", "erlang"]}, {"category": "", "categoryclass": "", "imagename": "0523191c134be6809f28b62f62cb6a8a.jpeg", "infoid": 1001971, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u66f4\u5feb\u7684\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u6d41\u7a0b\u63d0\u4f9b\u7cbe\u9009\u7684\u5e93\u5217\u8868-\u53cb\u5584/\u5de5\u5177\u7bb1", "note_en": "Curated list of libraries for a faster machine learning workflow - amitness/toolbox", "posttime": "2020-05-13 22:04:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,learning", "title": "\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08\u5de5\u5177\u7bb1", "title_en": "A Machine Learning Engineer's Toolbox", "transed": 1, "url": "https://github.com/amitness/toolbox", "via": "", "real_tags": ["\u5b66\u4e60", "learning"]}, {"category": "", "categoryclass": "", "imagename": "0dd0eb2f36577a86c39f14c999930c34.jpg", "infoid": 1001970, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7eb5\u89c2\u8be5\u7701\u7684\u60ac\u5d16\u6e14\u9547\uff0c\u5965\u9a6c\u5c14\u00b7\u7518\u5730(Omar Gandhi)\u7684\u4f4f\u5b85\u5efa\u7b51\u4e0e\u5efa\u9020\u73af\u5883\u4e00\u6837\u7b80\u6734\u548c\u5f3a\u70c8\u3002\n\u6bcf\u9694\u51e0\u5929\uff0c\u52a0\u62ff\u5927\u5efa\u7b51\u5e08\u5965\u9a6c\u5c14\u00b7\u7518\u5730(Omar Gandhi)\u5c31\u4f1a\u5f80\u8fd4\u4e8e\u4ed6\u7684\u5bb6\u4e61\u591a\u4f26\u591a\u548c\u65b0\u65af\u79d1\u820d\u7701\u9996\u5e9c\u54c8\u5229\u6cd5\u514b\u65af(Halifax)\u4e4b\u95f4\u30022010\u5e74\uff0c\u4ed6\u5728\u90a3\u91cc\u5f00\u8bbe\u4e86\u81ea\u5df1\u7684\u540c\u540d\u516c\u53f8\u3002\u4e00\u5e74\u534a\u524d\uff0c\u7518\u5730\u5c06\u7ebd\u9ed1\u6587\u52a0\u5165\u4e86\u4ed6\u6bcf\u5468\u7684\u5de1\u56de\u65c5\u884c-\u4ed6\u5728\u8036\u9c81\u5927\u5b66\u5efa\u7b51\u5b66\u9662(Yale School Of Architecture)\u8bb2\u6388\u4e00\u4e2a\u7814\u8ba8\u4f1a\uff0c\u540d\u4e3a\u201c\u91ce\u751f\u52a8\u7269\u5728\u54ea\u91cc\u201d(Where The Wild Things Are)\uff0c\u4ee5\u83ab\u91cc\u65af\u00b7\u68ee\u8fbe\u514b(Maurice Sendak)1963\u5e74\u7684\u513f\u7ae5\u4e66\u7c4d\u547d\u540d\u3002\u5728\u672c\u5b66\u671f\u7684\u6700\u540e\u4e00\u4e2a\u9879\u76ee\u4e2d\uff0c\u8fd9\u4f4d\u6559\u6388\u5e26\u7740\u4ed6\u7684\u5b66\u751f\u53bb\u4e86\u72c2\u98ce\u8086\u8650\u7684\u5e03\u96f7\u987f\u89d2(\u4e00\u4e2a\u624b\u5957\u5f62\u72b6\u7684\u9644\u5c5e\u8bbe\u65bd\uff0c\u4e0e\u65b0\u65af\u79d1\u820d\u7701\u7684\u4e3b\u8981\u534a\u5c9b\u88ab\u72ed\u7a84\u7684\u574e\u7d22\u6d77\u5ce1\u9694\u5f00)\u53c2\u89c2\u4e86\u5154\u5b50\u9677\u9631\u5ce1\u8c37(Rabbit Snare Gorge)--\u4ed62013\u5e74\u4e0e\u7ebd\u7ea6\u5efa\u7b51\u516c\u53f8Design Base 8\u5408\u4f5c\u7684\u9879\u76ee--\u4e00\u4e2a43\u82f1\u5c3a\u9ad8\u7684\u7ec6\u957f\u5c0f\u5c4b\uff0c\u5c31\u50cf\u4e00\u5e4516\u4e16\u7eaa\u7684\u66fc\u7eb3\u753b\u50cf\u300240\u5c81\u7684\u7518\u5730(Gandhi)\u53c2\u89c2\u4e86\u5468\u56f4\u4e00\u575747\u82f1\u4ea9\u7684\u6811\u6728\u7e41\u8302\u7684\u659c\u5761\uff0c\u5c0f\u6eaa\u5c06\u8fd9\u5ea7\u623f\u5b50\u4e00\u5206\u4e3a\u4e8c\uff0c\u8fd9\u5ea7\u623f\u5b50\u7531\u6b64\u5f97\u540d\u3002\u4ed6\u8ba9\u4ed6\u7684\u5b66\u751f\u6784\u601d\u4e00\u4e2a\u201c\u751f\u7269\u6821\u56ed\u201d--\u5c31\u50cf\u6211\u4eec\u53bb\u5e74\u590f\u5929\u5728\u4ed6\u7684\u54c8\u5229\u6cd5\u514b\u65af\u5de5\u4f5c\u5ba4\u89c1\u9762\u65f6\u6240\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u8fd9\u662f\u4e00\u5957\u7ed3\u6784\uff0c\u201c\u6709\u4e00\u79cd\u6001\u5ea6\uff0c\u4f1a\u505a\u51fa\u53cd\u5e94\uff0c\u770b\u8d77\u6765\u50cf\u662f\u5728\u79fb\u52a8\u3002\u201d\n\u5728\u68ee\u8fbe\u514b\u7b14\u4e0b\u7684\u91ce\u517d\u51f6\u731b\u3001\u7b28\u62d9\u7684\u5730\u65b9\uff0c\u8fd9\u5ea7\u623f\u5b50\u7a7f\u7740\u957f\u957f\u7684\u3001\u82cd\u767d\u7684\u5f53\u5730\u767d\u96ea\u677e\u9576\u677f\uff0c\u6d3b\u6cfc\u800c\u67d4\u8f6f\uff0c\u5145\u6ee1\u4e86\u4e0e\u4e66\u4e2d\u7684\u5c11\u5e74\u56fd\u738b\u9a6c\u514b\u65af\u4e00\u6837\u7684\u65e0\u653f\u5e9c\u72b6\u6001\u548c\u8df3\u8dc3\u7684\u80fd\u91cf\u3002\u5b83\u662f\u4e3a\u4e00\u540d\u5728\u65b0\u65af\u79d1\u820d\u7701\u5ea6\u5047\u591a\u5e74\u7684\u65b0\u6cfd\u897f\u5dde\u5f8b\u5e08\u5efa\u9020\u7684\uff0c\u9762\u5411Inverness\u6751\u59163\u82f1\u91cc\u5904\u7684\u5723\u52b3\u4f26\u65af\u6e7e(St.Lawrence Bay)120\u82f1\u5c3a\u9ad8\u7684\u60ac\u5d16\u3002\u4e00\u639220*8\u82f1\u5c3a(\u7ea6\u540810\u7c73)\u5bbd\u7684\u7a97\u6237\u671d\u897f\uff0c\u8d8a\u8fc7\u4e00\u6761\u72ed\u7a84\u7684\u9ed1\u8272\u4e91\u6749\u548c\u6866\u6811\u6ed1\u9053\uff0c\u671d\u5411\u4e00\u4e2a\u7ec6\u957f\u7684\u4e09\u89d2\u5f62\u6c34\u57df\uff0c\u5728\u72c2\u98ce\u5927\u4f5c\u7684\u65e5\u5b50\u91cc\uff0c\u8fd9\u4e9b\u4e09\u89d2\u5f62\u7684\u7a97\u6237\u4e0a\u523b\u7740\u767d\u8272\u7684\u5e3d\u5b50\uff0c\u5c31\u50cf\u7231\u5fb7\u534e\u00b7\u6208\u91cc(Edward Gorey)\u63d2\u56fe\u4e2d\u7684\u9669\u6076\u5927\u6d77\u3002\u8fd9\u5ea7\u5efa\u7b51\u4f18\u96c5\u5730\u7ecf\u53d7\u4f4f\u4e86\u65b0\u65af\u79d1\u820d\u7701\u7ecf\u5e38\u6076\u52a3\u7684\u5929\u6c14\uff0c1200\u5e73\u65b9\u82f1\u5c3a\u7684\u9762\u79ef\u5206\u6210\u4e86\u4e09\u5c42\u65af\u5df4\u8fbe\u5f0f\u7684\u697c\u5c42\uff1b\u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u683914\u82f1\u5bf8\u7684\u73af\u6881\uff0c\u4ee5\u5e2e\u52a9\u62b5\u5fa1\u5c9b\u4e0a\u7684\u5f3a\u98ce\u3002\u201c\u6211\u4eec\u4e00\u76f4\u8ba4\u4e3a\u6211\u4eec\u7684\u5efa\u7b51\u5c31\u662f\u8fd9\u7c7b\u751f\u7269\uff0c\u201d\u7518\u5730\u8bf4\uff0c\u800c\u8fd9\u5ea7\u5efa\u7b51\u7684\u5de5\u4f5c\u201c\u5c31\u662f\u7ad9\u5f97\u5c3d\u53ef\u80fd\u9ad8\uff0c\u770b\u770b\u8fd9\u4e9b\u8fdc\u666f\u3002\u201d\u5efa\u7b51\u5e08\u7ecf\u5e38\u8ba8\u8bba\u4ed6\u4eec\u7684\u5efa\u7b51\u5b8c\u6210\u7684\u4efb\u52a1\uff0c\u4f46\u7518\u5730\u8c08\u5230\u4ed6\u7684\u65f6\u5019\uff0c\u5c31\u597d\u50cf\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u65e9\u671f\u613f\u671b\uff1a\u4ed6\u7684\u623f\u5b50\u4e0d\u4ec5\u4ec5\u662f\u4e3a\u4e86\u4e00\u4e2a\u76ee\u7684\uff0c\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u751f\u6d3b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5154\u5b50\u9677\u9631\u5ce1\u8c37\u7684\u623f\u5b50\u662f\u4e00\u4e2a\u5bb6\u5ead\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u662f\u7518\u5730\u81ea\u5df1\u7684\u751f\u7269\u56ed\u533a\uff0c\u6700\u521d\u662f\u4e3a\u8fd9\u4e2a\u5730\u70b9\u89c4\u5212\u7684\u3002\u7b2c\u4e8c\u4e2a\u7ed3\u6784\u662f\u4e00\u4e2a\u8239\u68da\uff0c\u7531\u540c\u6837\u892a\u8272\u7684\u5f53\u5730\u767d\u96ea\u677e\u6728\u677f\u5236\u6210\uff0c\u5f62\u72b6\u50cf\u9a6c\u5c14\u767b\u76d0\u7684\u6676\u4f53\uff0c\u4f4e\u4f4e\u5730\u4f38\u5c55\u5728\u5730\u9762\u4e0a\uff0c\u5b83\u7684\u5f62\u72b6\u56e0\u5411\u524d\u8fd0\u52a8\u800c\u81a8\u80c0\uff0c\u5c31\u50cf\u88ab\u56f0\u5728\u68ee\u6797\u4e2d\u7684\u51b2\u523a\u4e2d\u4e00\u6837\u3002(\u7b2c\u4e09\u4e2a\u662f\u6c34\u8fb9\u7684\u77ad\u671b\u5854\uff0c\u4ece\u672a\u8bde\u751f\u3002)\u3002\n\u901a\u8fc7\u8fd9\u4e2a\u9879\u76ee\uff0c\u7518\u5730\u6982\u62ec\u4e86\u4ed6\u5bf9\u65b0\u65af\u79d1\u820d\u7701\u65b0\u5efa\u7b51\u7684\u613f\u666f\u3002\u4ece\u5e03\u96f7\u987f\u89d2\u7684\u9ad8\u5730(\u6bcf\u5e74\u79cb\u5929\u90fd\u4f1a\u5438\u5f15\u6210\u7fa4\u7ed3\u961f\u7684\u6e38\u5ba2\u6765\u89c1\u8bc1\u8302\u5bc6\u7684\u68ee\u6797\u5411\u51ac\u5b63\u7684\u534e\u4e3d\u8fc7\u6e21)\uff0c\u5230\u5357\u90e8\u7684\u6cbc\u6cfd\u5730\uff0c\u4ece\u7f05\u56e0\u5dde\u7684\u82ac\u8fea\u6e7e(Bay Of Fundy)\u7a7f\u8fc7\u7f05\u56e0\u5dde\u7528\u7d2b\u7ea2\u8272\u3001\u9f20\u5c3e\u8349\u548c\u77f3\u677f\u6f06\u6210\u7684\u74e6\u7247\u623f\u5c4b\uff0c\u6cbf\u7740\u4e61\u6751\u5c0f\u8def\u6392\u6210\u4e00\u6392\uff0c\u53ef\u4ee5\u4fef\u77b0\u5c0f\u8247\u548c\u9f99\u867e\u8239\u5728\u6ce2\u6d9b\u6c79\u6d8c\u7684\u94b4\u6d77\u9762\u4e0a\u6f02\u6d6e\u3002\u524d\u9662\u4e0d\u662f\u7528\u82b1\u575b\u6216\u8349\u576a\u88c5\u9970\u54c1\u88c5\u9970\u7684\uff0c\u800c\u662f\u7528\u7f20\u7ed5\u5728\u4e00\u8d77\u7684\u6e14\u7ef3\u548c\u6d6e\u6807\u88c5\u9970\u7684\uff0c\u989c\u8272\u50cf\u91ce\u751f\u8349\u8393\u3002\u534a\u5c9b\u5468\u56f4\u591a\u5ca9\u77f3\u7684\u6751\u5e84-\u5b89\u63d0\u8d21\u5c3c\u4ec0(Antigonish)\u548c\u592b\u4eba\u5c9b(Isle Madame)\u3001\u963f\u76d6\u5c14(Argyle)\u548c\u9c81\u5ae9\u5821(Lunenburg)-\u7684\u540d\u5b57\u8868\u660e\u4e86\u8be5\u5730\u533a\u60a0\u4e45\u7684\u591a\u56fd\u8bed\u8a00\u5386\u53f2\uff0c\u4ece\u7c73\u514b\u9a6c\u514b\u571f\u8457\u6c11\u65cf\u5f00\u59cb\uff0c\u4ed6\u4eec\u7684\u571f\u5730\u4ece17\u4e16\u7eaa\u5f00\u59cb\u88ab\u82cf\u683c\u5170\u3001\u82f1\u56fd\u3001\u6cd5\u56fd\u548c\u5fb7\u56fd\u6b96\u6c11\u8005\u5360\u9886\u3002\u5373\u4f7f\u5728\u4eca\u5929\uff0c\u8fd9\u91cc\u7684\u8bb8\u591a\u4eba\u4ecd\u7136\u8bf4\u76d6\u5c14\u8bed\u6216\u963f\u5361\u8fea\u4e9a\u8bed\uff0c\u8fd9\u662f1604\u5e74\u7b2c\u4e00\u6279\u6b27\u6d32\u5b9a\u5c45\u8005\u5f15\u5165\u7684\u6cd5\u8bed\u65b9\u8a00\u3002\u6e14\u4e1a\u4ecd\u7136\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u4ea7\u4e1a\u3002\u7518\u5730\u8bf4\uff0c\u65b0\u65af\u79d1\u820d\u7701\u201c\u662f\u4e00\u4e2a\u53d8\u5316\u4e0d\u592a\u5feb\u7684\u5730\u65b9\u3002\u201d\u4f46\u662f\uff0c\u5154\u5b50\u9677\u9631\u5ce1\u8c37\u4e3a\u5c9b\u4e0a\u9759\u6001\u7684\u76d0\u76d2\u65b9\u8a00\u6ce8\u5165\u4e86\u7a81\u5982\u5176\u6765\u7684\u52a8\u80fd\uff0c\u8fd9\u662f\u5bf920\u4e16\u7eaa\u7684\u7406\u8bba\u7684\u4e00\u4e2a\u8bba\u70b9\uff0c\u5373\u8fdb\u5316\u4e0d\u662f\u50cf\u67e5\u5c14\u65af\u00b7\u8fbe\u5c14\u6587\u6240\u8bf4\u7684\u90a3\u6837\u662f\u6e10\u8fdb\u7684\uff0c\u800c\u662f\u4ee5\u620f\u5267\u6027\u7684\u7206\u53d1\u53d1\u751f\u7684\u3002\u7518\u5730\u6ca1\u6709\u7528\u65b0\u6280\u672f\u6216\u8fdb\u53e3\u6750\u6599\u5bf9\u8be5\u7701\u82d4\u539f\u822c\u7684\u666f\u89c2\u70b9\u7f00\u7684\u4f20\u7edf\u5c0f\u5c4b\u8fdb\u884c\u73b0\u4ee3\u5316\u6539\u9020\uff0c\u800c\u662f\u5c06\u5b83\u4eec\u5e26\u5165\u4e86\u523a\u8033\u7684\u751f\u6d3b\uff0c\u4e0e\u5176\u8bf4\u662f\u521b\u9020\u5b8c\u6210\u7684\u5efa\u7b51\uff0c\u4e0d\u5982\u8bf4\u662f\u5c06\u5b83\u4eec\u91ca\u653e\u5230\u91ce\u5916\u3002\n\u51fa\u751f\u4e8e\u591a\u4f26\u591a\u7684\u7518\u5730\u4e8e2001\u5e74\u7b2c\u4e00\u6b21\u6765\u5230\u54c8\u5229\u6cd5\u514b\u65af\uff0c\u5f53\u65f6\u4ed6\u8fd8\u662f\u8fbe\u5c14\u8c6a\u897f\u5927\u5b66\u7684\u4e00\u540d\u5b66\u751f\u3002\u4e03\u5e74\u540e\uff0c\u4ed6\u88ab\u8058\u4e3a\u9ea6\u51ef-\u91cc\u6602\u751c\u82f9\u679c\u5efa\u7b51\u516c\u53f8(MacKay-Lyons Sweetapple Architects)\u7684\u5408\u4f19\u4eba\uff0c\u8be5\u516c\u53f8\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u662f\u52a0\u62ff\u5927\u4e1c\u90e8\u6cbf\u6d77\u7701\u4efd\u6700\u8457\u540d\u7684\u516c\u53f8\u300218\u4e2a\u6708\u540e\uff0c\u4ed6\u5728\u54c8\u5229\u6cd5\u514b\u65af\u7684\u4e00\u4e2a\u9601\u697c\u4e0a\u5f00\u4e86\u81ea\u5df1\u7684\u8bca\u6240\uff0c\u5f88\u5feb\u5c31\u5f62\u6210\u4e86\u4e00\u79cd\u66f4\u9ed1\u6697\u3001\u66f4\u6709\u6d3b\u529b\u7684\u7f8e\u5b66\u3002\n\u8fdc\u79bb\u5317\u90e8\u7684\u5154\u5b50\u9677\u9631\u5ce1\u8c37\u548c\u5bbd\u9614\u6d77\u6e7e\u6cbc\u6cfd\u5468\u56f4\u620f\u5267\u6027\u7684\u60ac\u5d16\u548c\u68ee\u6797\uff0c\u65b0\u65af\u79d1\u820d\u7701\u7684\u5357\u7aef\u50cf\u4e00\u9762\u7834\u65e7\u7684\u65d7\u5e1c\u5411\u5927\u6d77\u5ef6\u4f38\u3002\u6734\u7d20\u7684\u822a\u6d77\u57ce\u9547\u4e2d\u4e0d\u8d77\u773c\u7684\u4e3b\u8981\u8857\u9053\u4ece\u82cd\u767d\u7684\u9694\u677f\u623f\u5c4b\u524d\u5c55\u5f00\u3002\u6c34\u4ece\u6df1\u7eff\u8272\u7684\u677e\u6797\u540e\u9762\u95ea\u8fc7\uff0c\u84dd\u5f97\u50cf\u9752\u91d1\u77f3\u3002\u5982\u679c\u50cf\u7518\u5730\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u65b0\u65af\u79d1\u820d\u7701\u7684\u53d8\u5316\u5f88\u6162\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7701\u7684\u8fd9\u4e2a\u89d2\u843d\u611f\u89c9\u4e0e\u4e00\u4e2a\u4e16\u7eaa\u524d\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\n\u8fd9\u662f\u7518\u5730\u8fc4\u4eca\u4e3a\u6b62\u6700\u5177\u6d3b\u529b\u7684\u623f\u5b50\u7684\u5408\u9002\u4f4d\u7f6e\uff1a\u6c34\u95f8\u70b9(Sluice Point)\u3002\u4e0e\u4ed6\u7684\u4efb\u4f55\u5176\u4ed6\u751f\u7269\u76f8\u6bd4\uff0c\u8fd9\u5ea73800\u5e73\u65b9\u82f1\u5c3a\u7684\u623f\u4ea7\u66f4\u591a\u5730\u9762\u5411\u672a\u6765\uff0c\u5c3d\u7ba1\u5b83\u5229\u7528\u4e86\u65b0\u65af\u79d1\u820d\u7701\u8fc7\u53bb\u7684\u5efa\u7b51\u6280\u672f\u3002\u591a\u9762\u7684\u5916\u90e8\u7528\u767d\u96ea\u677e\u94fa\u6210\u74e6\u7247\uff0c\u88ab\u98ce\u548c\u96e8\u892a\u8272\u6210\u629b\u5149\u7684\u767d\u9521\u989c\u8272\uff0c\u5efa\u5728\u4e00\u4e2a\u56f4\u7ed5\u5706\u5f62\u783e\u77f3\u8f66\u9053\u7684\u51f9\u5f62\u5f2f\u9053\u4e0a\u3002\u5728\u51f9\u9677\u7684\u6df7\u51dd\u571f\u5730\u57fa\u4e0a\u6f02\u6d6e\u5728\u79bb\u5730\u9762\u51e0\u5398\u7c73\u7684\u5730\u65b9\uff0c\u7acb\u9762\u5c31\u50cf\u9644\u8fd1\u7530\u91ce\u91cc\u7528\u9ad8\u8df7\u62ac\u8d77\u7684\u5e72\u71e5\u7684\u7070\u8272\u5e72\u8349\u5806\u3002\u4e00\u9053\u9ad8\u5927\u7684\u9632\u98ce\u6797\uff0c\u50cf\u51b0\u5ddd\u88c2\u7f1d\u4e00\u6837\u6d01\u767d\uff0c\u5305\u56f4\u7740\u524d\u95e8\uff0c\u906e\u4f4f\u4e86\u5b83\u7684\u89c6\u7ebf\u3002\u8fd9\u4e2a\u6ed1\u7fd4\u673a\u5f62\u72b6\u7684\u7ed3\u6784\u4f3c\u4e4e\u6ca1\u6709\u62e5\u62b1\u5bf9\u9762\u7684\u6d45\u6f6e\u53e3\uff0c\u800c\u662f\u671d\u7740\u5b83\u98de\u6765\u98de\u53bb\uff0c\u5f53\u5b83\u51b2\u5411\u6c34\u9762\u65f6\uff0c\u5b83\u7684\u7fc5\u8180\u6307\u5411\u5185\u9646\u3002\n\u7518\u5730\u5c06\u8fd9\u5ea7\u4f4f\u5b85\u8bbe\u60f3\u4e3a\u745e\u58eb\u5f8b\u5e08\u7684\u5ea6\u5047\u5c4b\uff0c\u4f5c\u4e3a\u7ecf\u5178\u7684\u81c0\u90e8\u5c4b\u9876\uff0c\u4e0e\u5178\u578b\u7684\u65b0\u65af\u79d1\u820d\u7684\u56db\u56db\u65b9\u65b9\u7684\u5e95\u5ea7\u5206\u5f00\u3002\u4ed6\u57282017\u5e74\u5efa\u9020\u4e86\u5b83\uff0c\u4f7f\u7528\u7684\u6728\u6841\u67b6\u4e0e\u652f\u6491\u5168\u7701\u5404\u5730\u7c7b\u4f3c\u5c4b\u9876\u7684\u6728\u6841\u67b6\u76f8\u540c\uff1a\u4e00\u79cd\u4e24\u6816\u8fdb\u5316\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u5176\u9644\u5c5e\u7269\u5411\u4e0a\u63a8\u7740\u4e00\u5c42\u575a\u56fa\u7684\u591a\u8282\u7070\u8272\u6728\u8d28\u8584\u819c\u3002\u7518\u5730\u8bf4\uff1a\u201c\u8fd9\u91cc\u7684\u571f\u5730\u4e0d\u4ec5\u7f8e\u4e3d\uff0c\u800c\u4e14\u539f\u5c01\u4e0d\u52a8\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u5236\u4f5c\u4e00\u4e9b\u8ba9\u4eba\u611f\u89c9\u5230\u7684\u4e1c\u897f\uff0c\u5982\u679c\u4f60\u772f\u7740\u773c\u775b\uff0c\u5c31\u50cf\u5b83\u4e00\u76f4\u5728\u90a3\u91cc\u4e00\u6837\u3002\u201d\u201c\u4e0d\u50cf\u6587\u7269\u53e4\u8ff9\uff0c\u800c\u50cf\u4e00\u4e2a\u6709\u673a\u4f53\u3002\u201d\n\u867d\u7136\u7518\u5730\u7684\u9879\u76ee\u5728\u5f62\u5f0f\u4e0a\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u4f46\u8003\u8651\u5230\u4ed6\u4eec\u504f\u8fdc\u7684\u4e9a\u5317\u6781\u80cc\u666f\uff0c\u4ed6\u4eec\u5f7c\u6b64\u8054\u7cfb\u5728\u4e00\u8d77-\u4ed6\u4eec\u201c\u770b\u8d77\u6765\u53ea\u53ef\u80fd\u662f\u5728\u65b0\u65af\u79d1\u820d\u7701\uff0c\u201d\u4ed6\u8bf4\u3002\u8fd9\u662f\u4e00\u4e2a\u7f13\u6162\u800c\u8270\u96be\u7684\u5730\u65b9\uff0c\u8981\u4e48\u88ab\u770b\u8d77\u6765\u50cf\u51b0\u4e00\u6837\u5feb\u4e50\u7684\u6c34\u5305\u56f4\u7740\uff0c\u8981\u4e48\u5728\u5357\u90e8\u6d77\u5cb8\u88ab\u7a00\u758f\u548c\u77ee\u5c0f\u7684\u6811\u6728\u5305\u56f4\uff0c\u5b83\u4eec\u53ef\u80fd\u66f4\u613f\u610f\u5728\u5176\u4ed6\u5730\u65b9\u751f\u957f\u3002\u65e0\u8bba\u662f\u5411\u4e0a\u4f38\u624b\uff0c\u8fd8\u662f\u8e72\u4e0b\uff0c\u8fd8\u662f\u5411\u524d\u51b2\uff0c\u8fd9\u4e9b\u623f\u5b50\u5728\u5b83\u4eec\u8fdb\u5316\u7684\u5173\u952e\u65f6\u523b\u770b\u8d77\u6765\u90fd\u662f\u51b0\u51bb\u7684\uff0c\u7ed9\u4eba\u4e00\u79cd\u4ee4\u4eba\u4e0d\u5b89\u7684\u5370\u8c61\uff0c\u4f60\u4e00\u8f6c\u8fc7\u8eab\uff0c\u5b83\u4eec\u5f88\u53ef\u80fd\u5c31\u4f1a\u6447\u6447\u6b32\u5760\u3002\u8fd9\u662f\u4e00\u4e2a\u4e0d\u53ef\u52a8\u6447\u7684\u7ae5\u5e74\u5e7b\u60f3\u7684\u5efa\u7b51\u7c7b\u6bd4\uff1a\u6ca1\u6709\u4ec0\u4e48\u662f\u771f\u6b63\u65e0\u751f\u547d\u7684\uff0c\u4efb\u4f55\u4e1c\u897f-\u751a\u81f3\u50cf\u68ee\u8fbe\u514b\u4e66\u4e2d\u7684\u666e\u901a\u623f\u5b50\u7684\u5899\u58c1-\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u80fd\u5947\u8ff9\u822c\u5730\u590d\u6d3b\u3002", "note_en": "Across the province\u2019s cliffside fishing towns, Omar Gandhi\u2019s residential architecture is as austere and intense as the environment for which it\u2019s built.\n   EVERY FEW DAYS, the Canadian architect  Omar Gandhi migrates between Toronto, his hometown, and Halifax, the capital of Nova Scotia, where he opened his eponymous firm in 2010. A year and a half ago, Gandhi added New Haven to his weekly peregrinations \u2014 he was teaching a seminar at the Yale School of Architecture called Where the Wild Things Are, after  Maurice Sendak\u2019s 1963 children\u2019s book. For the final project of the semester, the professor took his class to the wind-swept island of  Cape Breton (a glove-shaped appendage separated from Nova Scotia\u2019s main peninsula by the narrow Strait of Canso) to visit  Rabbit Snare Gorge \u2014 his 2013 project with the New York-based architecture firm Design Base 8 \u2014 a slender cabin that stretches 43 feet tall, like a 16th-century Mannerist portrait. Touring the surrounding plot, a 47-acre wooded slope bisected by the creek that gives the house its name, Gandhi, 40, asked his students to conceive a \u201ccampus of creatures\u201d \u2014 a set of structures that, as he described it when we met at his Halifax studio last summer, \u201chave an attitude and respond and look like they move.\u201d\n Where Sendak\u2019s wild things were fierce, lumbering beasts, the house, dressed in long, pale panels of local white cedar, is spry and lithe, imbued with the same anarchic, leaping energy as Max, the book\u2019s boy king. Built for a New Jersey lawyer who has vacationed in Nova Scotia for years, it looks toward a 120-foot bluff fronting the Gulf of St. Lawrence, three miles outside the village of Inverness. A broad 20-by-8-foot bank of windows faces west over a narrow chute of black spruce and birch toward a slim triangle of water, etched on blustery days with white caps, like a sinister sea in an  Edward Gorey illustration. The structure gracefully withstands Nova Scotia\u2019s often brutal weather, its 1,200 square feet split over three spartan floors; each level has a 14-inch ring beam to help protect against the island\u2019s gale-force winds. \u201cWe\u2019ve always thought of our buildings as these sort of creatures,\u201d Gandhi says, and this one\u2019s job \u201cis to get up as high as possible to see these long views.\u201d Architects often discuss the tasks their buildings accomplish, but Gandhi talks about his as if they have their own inchoate desires: His houses don\u2019t just serve a purpose, they have lives of their own. In fact, the house at Rabbit Snare Gorge is part of a family, Gandhi\u2019s own campus of creatures, originally planned for the site. The second structure, a boat shed made from the same faded planks of local white cedar, is shaped like a crystal of Maldon salt, stretched low over the ground, its form distended by forward motion, as though ensnared in its sprint through the forest. (The third, a lookout tower at the water\u2019s edge, was never born.)\n With this project, Gandhi encapsulated his vision for a new Nova Scotian architecture. Across the province \u2014 from the highlands of Cape Breton, which draw hordes of tourists each fall to witness the dense forest\u2019s flamboyant transition into winter, to the marshlands of the south across the Bay of Fundy from Maine \u2014 shingled houses painted in shades of aubergine, sage and slate line up along country roads that overlook skiffs and lobster boats bobbing on the mercurial, cobalt sea. Front yards are decorated not with flower beds or lawn ornaments but with tangled mounds of fishing rope and buoys the color of wild strawberries. The names of the villages that line the peninsula\u2019s rocky perimeter \u2014 Antigonish and Isle Madame, Argyle and Lunenburg \u2014 speak to the region\u2019s long polyglot history, beginning with the Mi\u2019kmaq indigenous peoples, whose land was taken starting in the 17th century by Scottish, English, French and German colonizers. Even today, many here still speak Gaelic or Acadian, the French dialect introduced by the first European settlers in 1604. Fishing remains an important industry. Nova Scotia, Gandhi says, \u201cis a place that doesn\u2019t change very quickly.\u201d But Rabbit Snare Gorge injects the island\u2019s static saltbox vernacular with sudden kinetic energy, an argument for the 20th-century theory that evolution happens not gradually, as  Charles Darwin suggested, but in dramatic bursts. Rather than modernizing the traditional cottages that punctuate the province\u2019s tundra-like landscape with new technologies or imported materials, Gandhi has brought them to jarring life, not so much creating finished structures as releasing them into the wild.\n   BORN IN TORONTO, Gandhi first arrived in Halifax in 2001 as a student at Dalhousie University. Seven years later, he was hired as an associate at MacKay-Lyons Sweetapple Architects, for decades the most prominent firm in eastern Canada\u2019s Maritime Provinces. Eighteen months later, he opened his own practice in a Halifax attic, quickly developing an aesthetic that was darker and more dynamic than his former employer\u2019s spare, elegant precision. When Gandhi photographs his work, he usually does so in winter, and even when designing vacation homes, he imagines them in the blustery, gray months of December and January. His houses are both cocoons and binoculars, swaddling you in warm wood while projecting your vision outward. \u201cMinimalism makes a big difference for an anxious person,\u201d he says.\n One of his first residential projects, in 2012, was for a doctor who\u2019d recently returned home to practice medicine after years working as a clinician in Vancouver and commissioned a house on a family plot in a working-class fishing town near southern Cape Breton. The client, Jonah Samson, spent his days in intense, private conversations with his patients, and shared a narrow, gravel road with much of his extended family. \u201cI told Omar I wanted a house that says, \u2018 Screw off,\u2019\u201d Samson says; in response, Gandhi built a pair of simple seaside cabins under steep aluminum gables, then removed all windows from the side facing the road and stained both buildings black. Less formally extreme than Rabbit Snare Gorge,  Black Gables, as the house is known, shares an inherently frigid ethos: Even in the long, dazzling days of Nova Scotia\u2019s briefly glorious spring, both houses evoke shadows and ice.\n  Gandhi builds such intensity into even his sunniest projects. For his clients Sandra and John Furber, a pair of real-estate developers from Toronto, the architect built a low-slung ranch-style home on a dramatic cliffside plot in 2016. The Furbers found the five undeveloped acres through a newspaper listing that advertised them as \u201cnot for the faint of heart,\u201d and the first time they visited the land \u2014 strung along a narrow slope overgrown with a thicket of wild roses \u2014 they thought building there would be impossible. Rather than fight the site\u2019s steep incline, Gandhi built a 3,000-square-foot house that echoes its contours: long and narrow, with a slanted roof that mimics the hillside.\n Called the  Lookout at Broad Cove Marsh \u2014 after the nearby curve where locals like to park their cars and stare out over the water \u2014 the house huddles on its cliff, all but invisible from the road. Inside, the layout is simple but cozy: A long hallway connects the combined living room and kitchen, enclosed by a swath of sea-facing glass, with bedrooms and bathrooms contained in whitewashed wooden pods, their views to the outside framed by narrow nine- foot-tall windows. If Rabbit Snare appears to launch itself skyward, the Lookout seems to be hunkering down for the long winter, with its roof, Gandhi says, \u201clike a hat pulled down low over the eyes \u2014 a little bit menacing.\u201d\n  FAR FROM THE dramatic cliffs and forests surrounding Rabbit Snare Gorge and Broad Cove Marsh in the north, the southern end of Nova Scotia trails off into the sea like a tattered flag. Nondescript main streets in modest nautical towns unfurl past pale clapboard houses. Water flashes, blue as lapis, from behind bottle-green stands of pine. If Nova Scotia is slow to change, as Gandhi says, then this corner of the province feels unchanged from a century ago.\n It\u2019s a fitting location for Gandhi\u2019s most dynamic house to date:  Sluice Point. More than any of his other creatures, the 3,800-square-foot property looks to the future even as it makes use of building techniques drawn from Nova Scotia\u2019s past. The faceted exterior, shingled in white cedar and faded by wind and rain to the color of polished pewter, is built in a concave bend around a circular gravel driveway. Floating centimeters off the ground on its recessed concrete foundation, the facade resembles the drying gray haystacks lifted on stilts in the nearby fields. A tall windbreak, white as a glacial crevasse, circumscribes the front door, shrouding it from view. Rather than embracing the shallow tidal inlet on its opposite side, the glider-shaped structure seems to soar toward it, its wings pointing inland as it rushes toward the water.\n  Gandhi conceived of the residence, a holiday home for a Swiss lawyer, as a classic hip roof separated from the boxy undergirding of a typical Nova Scotian house. He built it in 2017 using the same wooden trusses that support similar roofs all over the province: a basic structure amphibiously evolving, its appendages pushing up against a sturdy membrane of knotty, gray wood. \u201cThe land here is not just beautiful but untouched, so we wanted to produce something that felt, if you squinted your eyes, like it was always there,\u201d Gandhi says. \u201cNot like a heritage house, but like an organism.\u201d\n Though Gandhi\u2019s projects are dramatically different in form, such consideration of their remote, subarctic backdrop connects them to one another \u2014 they \u201clook like they could only be in Nova Scotia,\u201d he says. It\u2019s a slow, tough place, surrounded either by water that seems like it might be happier as ice or, on the southern coast, by trees so sparse and stunted that they probably would have preferred to grow elsewhere. Whether reaching up or crouching down or rushing forward, the homes look frozen at a critical moment in their evolution, giving the unsettling impression that they might well lurch into motion the moment you turn your back. It\u2019s the architectural analogue of an unshakable childhood fantasy: That nothing is truly inanimate, that anything \u2014 even,  as in Sendak\u2019s book, the walls of an ordinary house \u2014 might, at any moment, come miraculously to life.", "posttime": "2020-05-13 22:03:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65b0\u65af\u79d1\u820d\u7701,scotia,\u5efa\u7b51", "title": "\u5728\u65b0\u65af\u79d1\u820d\u7701\uff0c\u50cf\u5468\u56f4\u7684\u98ce\u666f\u4e00\u6837\u8352\u51c9\u7684\u5bb6\u56ed", "title_en": "In Nova Scotia, Homes as Wild as the Landscape Around Them", "transed": 1, "url": "https://www.nytimes.com/2020/02/03/t-magazine/nova-scotia-architecture.html", "via": "", "real_tags": ["\u65b0\u65af\u79d1\u820d\u7701", "scotia", "\u5efa\u7b51"]}, {"category": "", "categoryclass": "", "imagename": "a55104dc54497cf401889944b6d8861c.jpg", "infoid": 1001968, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u5e03\u9c81\u514b\u6797\u7684\u516c\u5bd3\u5de5\u4f5c\u4e86\u4e24\u5468\u540e\uff0c\u4e00\u540d25\u5c81\u7684\u7535\u5546\u5458\u5de5\u6536\u5230\u4e86\u516c\u53f8\u53d1\u6765\u7684\u4e00\u5c01\u5168\u5458\u5de5\u8303\u56f4\u7684\u7535\u5b50\u90ae\u4ef6\uff1a\u5458\u5de5\u9700\u8981\u7acb\u5373\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u5b89\u88c5\u540d\u4e3aHubStaff\u7684\u8f6f\u4ef6\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u8ddf\u8e2a\u4ed6\u4eec\u7684\u9f20\u6807\u79fb\u52a8\u548c\u952e\u76d8\u6572\u51fb\uff0c\u5e76\u8bb0\u5f55\u4ed6\u4eec\u8bbf\u95ee\u7684\u7f51\u9875\u3002\n\u4ed6\u4eec\u8fd8\u4e0d\u5f97\u4e0d\u5c06\u4e00\u6b3e\u540d\u4e3aTSheets\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0b\u8f7d\u5230\u624b\u673a\u4e0a\uff0c\u4ee5\u8bb0\u5f55\u4ed6\u4eec\u5728\u5de5\u4f5c\u65f6\u95f4\u7684\u884c\u8e2a\u3002\n\u6211\u4eec\u6709\u4e94\u4e2a\u4eba\u3002\u6211\u4eec\u603b\u662f\u6765\u4e0a\u73ed\u3002\u6211\u4eec\u603b\u662f\u51c6\u65f6\u5230\u7684\u3002\u8fd9\u540d\u5973\u5b50\u544a\u8bc9NPR\uff0c\u6ca1\u6709\u7406\u7531\u5f00\u59cb\u8ffd\u8e2a\u6211\u4eec\u7684\u4f4d\u7f6e\u3002\u5979\u4e0d\u613f\u5177\u540d\uff0c\u62c5\u5fc3\u4f1a\u4e22\u6389\u5de5\u4f5c\u3002\n\u5979\u5411NPR\u63d0\u4f9b\u7684\u516c\u53f8\u7535\u5b50\u90ae\u4ef6\u663e\u793a\uff0c\u5979\u7684\u96c7\u4e3b\u76f8\u4fe1\uff0c\u5f53\u6bcf\u4e2a\u4eba\u90fd\u5728\u5bb6\u5de5\u4f5c\u65f6\uff0c\u8ddf\u8e2a\u8f6f\u4ef6\u5c06\u63d0\u9ad8\u56e2\u961f\u7684\u751f\u4ea7\u529b\u548c\u6548\u7387\u3002\n\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u8feb\u4f7f\u5927\u7ea6\u4e09\u5206\u4e4b\u4e00\u7684\u7f8e\u56fd\u5de5\u4eba\u5728\u5bb6\u5de5\u4f5c\u3002\u53cd\u8fc7\u6765\uff0c\u516c\u53f8\u4e5f\u5728\u52a0\u5927\u5bf9\u8f6f\u4ef6\u7684\u4f7f\u7528\uff0c\u4ee5\u76d1\u63a7\u5458\u5de5\u5168\u5929\u5728\u505a\u4ec0\u4e48\u3002\n\u9690\u79c1\u6743\u5021\u5bfc\u8005\u548c\u4e00\u4e9b\u5458\u5de5\u8868\u793a\uff0c\u4ed6\u4eec\u62c5\u5fc3\u51a0\u72b6\u75c5\u6bd2\u5e26\u6765\u7684\u52a0\u5f3a\u8ddf\u8e2a\u5c06\u4f7f\u5de5\u4f5c\u573a\u6240\u7684\u76d1\u63a7\u6b63\u5e38\u5316\uff0c\u5f53\u5458\u5de5\u56de\u5230\u529e\u516c\u5ba4\u65f6\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u6570\u5b57\u76d1\u7763\u5c06\u6301\u7eed\u4e0b\u53bb\u3002\n\u95ee\u95ee\u4e00\u4f4d\u5728\u660e\u5c3c\u82cf\u8fbe\u5dde\u4e00\u5bb6\u5c0f\u516c\u53f8\u505a\u5e02\u573a\u8425\u9500\u7684\u5973\u58eb\u5c31\u77e5\u9053\u4e86\u3002\u5979\u8fd8\u533f\u540d\u63a5\u53d7\u4e86NPR\u7684\u91c7\u8bbf\uff0c\u56e0\u4e3a\u62c5\u5fc3\u5979\u7684\u96c7\u4e3b\u4f1a\u62a5\u590d\u5979\u7684\u76f4\u8a00\u4e0d\u8bb3\u3002\n\u5979\u7684\u96c7\u4e3b\u5df2\u7ecf\u5f00\u59cb\u4f7f\u7528\u540d\u4e3aTime Doctor\u7684\u8f6f\u4ef6\u3002\u5b83\u53ef\u4ee5\u5728\u5458\u5de5\u5de5\u4f5c\u65f6\u4e0b\u8f7d\u4ed6\u4eec\u5c4f\u5e55\u4e0a\u7684\u89c6\u9891\u3002\u5b83\u8fd8\u53ef\u4ee5\u8ba9\u7535\u8111\u7684\u7f51\u7edc\u6444\u50cf\u5934\u6bcf10\u5206\u949f\u62cd\u4e00\u5f20\u5458\u5de5\u7684\u7167\u7247\u3002\n\u5982\u679c\u4f60\u7a7a\u95f2\u51e0\u5206\u949f\uff0c\u5982\u679c\u4f60\u53bb\u6d17\u624b\u95f4\u6216\u5176\u4ed6\u4ec0\u4e48\u5730\u65b9\uff0c\u5c31\u4f1a\u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3\uff0c\u5b83\u4f1a\u8bf4\uff0c\u4f60\u670960\u79d2\u7684\u65f6\u95f4\u91cd\u65b0\u5f00\u59cb\u5de5\u4f5c\uff0c\u5426\u5219\u6211\u4eec\u4f1a\u6682\u505c\u4f60\u7684\u65f6\u95f4\uff0c\u8fd9\u4f4d\u5973\u58eb\u8bf4\uff0c\u201c\u5982\u679c\u4f60\u7a7a\u95f2\u4e86\u51e0\u5206\u949f\uff0c\u5c31\u4f1a\u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3\uff0c\u5b83\u4f1a\u544a\u8bc9\u4f60\uff0c\u4f60\u670960\u79d2\u7684\u65f6\u95f4\u91cd\u65b0\u5f00\u59cb\u5de5\u4f5c\uff0c\u5426\u5219\u6211\u4eec\u4f1a\u6682\u505c\u4f60\u7684\u65f6\u95f4\u3002\u201d\n\u6211\u611f\u89c9\u7cdf\u900f\u4e86\u3002\u6211\u89c9\u5f97\u6211\u4e0d\u53d7\u4fe1\u4efb\u3002\u6211\u4e3a\u81ea\u5df1\u611f\u5230\u7f9e\u6127\uff0c\u5979\u8bf4\uff0c\u5979\u6307\u7684\u662f\u5979\u4e0e\u4e00\u4f4d\u540c\u4e8b\u901a\u7535\u8bdd\u65f6\u7684\u77ed\u6682\u4f11\u606f\u3002\u6211\u7684\u540c\u4e8b\u4eec\u771f\u7684\uff0c\u771f\u7684\u5f88\u4e0d\u9ad8\u5174\u3002\u4f46\u662f\u6bcf\u4e2a\u4eba\u90fd\u592a\u5bb3\u6015\u4e86\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u6562\u8bf4\u3002\n\u6279\u8bc4\u5bb6\u79f0\u8fd9\u79cd\u8ddf\u8e2a\u8f6f\u4ef6\u4e3aTattleware\u3002\u4f46\u662f\uff0c\u8fd0\u8425\u5eb7\u6d85\u72c4\u683c\u5dde\u610f\u8bc6\u6280\u672f\u516c\u53f8\u7684\u5e03\u62c9\u5fb7\u00b7\u7c73\u52d2(Brad Miller)\u5bf9\u8fd9\u79cd\u63cf\u8ff0\u611f\u5230\u607c\u706b\u3002\n\u7c73\u52d2\u8bf4\uff1a\u5982\u679c\u4f60\u6ca1\u6709\u5728\u5de5\u4f5c\u6216\u505a\u9519\u4e86\u4ec0\u4e48\u4e8b\uff0c\u90a3\u4e48\u6211\u731c\u4f60\u4f1a\u53d7\u5230\u6307\u8d23\uff0c\u4f46\u6211\u4e0d\u8ba4\u4e3a\u8d2d\u4e70(\u8fd9\u6b3e\u8f6f\u4ef6)\u7684\u516c\u53f8\u771f\u7684\u662f\u8fd9\u6837\u60f3\u7684\uff0c\u7c73\u52d2\u8bf4\u3002(\u5982\u679c\u4f60\u6ca1\u6709\u5728\u5de5\u4f5c\u6216\u505a\u9519\u4e86\u4ec0\u4e48\uff0c\u90a3\u4e48\u6211\u60f3\u8fd9\u4f1a\u5f71\u54cd\u5230\u4f60\uff0c\u4f46\u6211\u4e0d\u8ba4\u4e3a\u8d2d\u4e70(\u8fd9\u6b3e\u8f6f\u4ef6)\u7684\u516c\u53f8\u771f\u7684\u662f\u8fd9\u4e48\u60f3\u7684\u3002)\u3002\n\u81ea\u4ece\u51a0\u72b6\u75c5\u6bd2\u7206\u53d1\u4ee5\u6765\uff0c\u7c73\u52d2\u8bf4\uff0c\u610f\u8bc6\u6280\u672f\u516c\u53f8\u7684\u4e1a\u52a1\u589e\u957f\u4e86\u4e24\u500d\u3002\u5b83\u4e3a\u7ecf\u7406\u63d0\u4f9b\u7684\u7a0b\u5e8f\u8bb0\u5f55\u4e86\u5458\u5de5\u5728\u7535\u8111\u4e0a\u6267\u884c\u7684\u6bcf\u4e00\u9879\u4efb\u52a1\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u5458\u5de5\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u751f\u4ea7\u529b\u5f97\u5206\u3002\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u76f8\u5e94\u7684\u6392\u540d\u3002\n\u4ed6\u4eec\u901a\u5e38\u6d3b\u8dc3\u5728\u6211\u8ba4\u4e3a\u6709\u6210\u6548\u7684\u7a0b\u5e8f\u548c\u7f51\u7ad9\u4e0a\u5417\uff0c\u6bd4\u5982Excel\u3001PowerPoint\u3001Word\u3001\u7535\u5b50\u90ae\u4ef6\uff0c\u800c\u4e0d\u662fYouTube\u6216Facebook\uff1f\u7c73\u52d2\u95ee\u9053\u3002\u8fd9\u4e3b\u8981\u662f\u6211\u4eec\u7684\u5ba2\u6237\u60f3\u77e5\u9053\u7684\u3002\nHubStaff\u7684\u9996\u5e2d\u6267\u884c\u5b98\u6234\u592b\u00b7\u5185\u6c83\u7279(Dave Nevogt)\u8bf4\uff0c\u5bf9\u4ed6\u7684\u516c\u53f8\u7684\u76d1\u63a7\u8f6f\u4ef6\u7684\u9700\u6c42\u4e5f\u589e\u52a0\u4e86\u4e24\u500d\u3002\n\u6211\u4eec\u770b\u5230\uff0c\u9700\u8981\u6211\u4eec\u5e73\u53f0\u7684\u4eba\u6570\u5927\u5e45\u589e\u52a0\uff0c\u5185\u6c83\u7279\u544a\u8bc9NPR\u3002\u8fdc\u7a0b\u5de5\u4f5c\u5f97\u5230\u4e86\u6781\u5927\u7684\u63a8\u52a8\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u88ab\u8feb\u5728\u529e\u516c\u5ba4\u4e4b\u5916\u5de5\u4f5c\uff0c\u6211\u4eec\u89c9\u5f97\u8fd9\u4e9b\u53d8\u5316\u53ef\u80fd\u4f1a\u6c38\u8fdc\u5728\u8fd9\u91cc\u53d1\u751f\u3002\n\u5bf9\u4e8e\u8001\u677f\u4eec\u6765\u8bf4\uff0c\u8ddf\u4e0a\u5458\u5de5\u751f\u4ea7\u7387\u4e00\u76f4\u662f\u4e00\u79cd\u59a5\u534f\u3002\u4f46\u5728\u529e\u516c\u5ba4\u91cc\uff0c\u8981\u5f04\u6e05\u695a\u67d0\u4eba\u7684\u5de5\u4f5c\u662f\u5426\u505a\u5f97\u597d\u8981\u5bb9\u6613\u5f97\u591a\u3002\u73b0\u5728\uff0c\u8ddf\u8e2a\u6280\u672f\u6b63\u5728\u53d6\u4ee3\u7ecf\u7406\u7684\u773c\u775b\u3002\u7c73\u52d2\u8bf4\uff0c\u5f53\u8be5\u8f6f\u4ef6\u5728\u4e00\u540d\u5728\u5bb6\u5de5\u4f5c\u7684\u5458\u5de5\u7684\u7535\u8111\u4e0a\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u7ed9\u5458\u5de5\u5e26\u6765\u989d\u5916\u7684\u6fc0\u52b1\uff0c\u8ba9\u4ed6\u4eec\u4e0d\u61c8\u6020\u3002\n\u7c73\u52d2\u8bf4\uff1a\u6211\u8ba4\u4e3a\uff0c\u5982\u679c\u4eba\u4eec\u77e5\u9053\u8fd9\u4ef6\u4e8b\u6b63\u5728\u53d1\u751f\uff0c\u90a3\u4e48\u4eba\u4eec\u7684\u884c\u4e3a\u4f1a\u6bd4\u6ca1\u6709\u8fd9\u79cd\u60c5\u51b5\u65f6\u8868\u73b0\u5f97\u66f4\u597d\uff0c\u56e0\u4e3a\u5f53\u6709\u4eba\u5728\u770b\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u4f1a\u8868\u73b0\u5f97\u66f4\u597d\u3002\n\u827e\u8389\u68ee\u00b7\u683c\u6797(Alison Green)\u64b0\u5199\u4e86\u8f9b\u8fea\u52a0\u5efa\u8bae\u4e13\u680f\u201c\u8be2\u95ee\u7ecf\u7406\u201d(Ask A Manager)\uff0c\u5979\u6709\u4e0d\u540c\u7684\u89c2\u70b9\u3002\n\u5979\u6536\u5230\u4e86\u5927\u91cf\u6765\u81ea\u5458\u5de5\u7684\u95ee\u9898\uff0c\u4ed6\u4eec\u5bf9\u8001\u677f\u91cf\u5316\u4ed6\u4eec\u7684\u6309\u952e\u4ee5\u53ca\u6bcf\u5929\u53d1\u9001\u591a\u5c11\u5c01\u7535\u5b50\u90ae\u4ef6\u611f\u5230\u538c\u70e6\u3002\n\u683c\u6797\u8bf4\uff0c\u8fd8\u6709\u4e00\u4e2a\u6280\u672f\u542b\u91cf\u8f83\u4f4e\u7684\u7248\u672c\uff0c\u4ed6\u4eec\u7684\u7ecf\u7406\u8981\u6c42\u4ed6\u4eec\u5168\u5929\u4fdd\u6301\u89c6\u9891\u72b6\u6001\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u5168\u5929\u5019\u5730\u770b\u7740\u4ed6\u4eec\uff0c\u8fd9\u662f\u975e\u5e38\u65e0\u793c\u7684\u884c\u4e3a\uff0c\u683c\u6797\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u6280\u672f\u542b\u91cf\u8f83\u4f4e\u7684\u7248\u672c\uff0c\u4ed6\u4eec\u7684\u7ecf\u7406\u8981\u6c42\u4ed6\u4eec\u5168\u5929\u4fdd\u6301\u89c6\u9891\u72b6\u6001\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u5168\u5929\u5019\u5730\u770b\u7740\u4ed6\u4eec\uff0c\u8fd9\u975e\u5e38\u6709\u4fb5\u72af\u6027\u3002\n\u6d88\u8d39\u8005\u6743\u76ca\u5021\u5bfc\u975e\u8425\u5229\u7ec4\u7ec7\u9690\u79c1\u6743\u5229\u6e05\u7b97\u6240(Privacy Rights Clearinghouse)\u7684\u653f\u7b56\u548c\u5021\u5bfc\u4e3b\u7ba1\u4fdd\u7f57\u00b7\u65af\u8482\u82ac\u65af(Paul Stephens)\u8868\u793a\uff0c\u8fd9\u53ef\u80fd\u611f\u89c9\u5230\u662f\u4fb5\u6270\uff0c\u4f46\u5e76\u4e0d\u8fdd\u6cd5\u3002\n\u4ed6\u8bf4\uff0c\u867d\u7136\u7b2c\u56db\u4fee\u6b63\u6848\u4fdd\u62a4\u4eba\u4eec\u514d\u53d7\u653f\u5e9c\u7684\u4e0d\u5408\u7406\u641c\u67e5\u548c\u6263\u62bc\uff0c\u4f46\u96c7\u4e3b\u901a\u8fc7\u76d1\u63a7\u8f6f\u4ef6\u8ddf\u8e2a\u4ed6\u4eec\u7684\u5de5\u4eba\u6574\u5929\u5728\u505a\u4ec0\u4e48\uff0c\u5e76\u6ca1\u6709\u8fdd\u53cd\u4efb\u4f55\u8054\u90a6\u6cd5\u5f8b\u3002\n\u65af\u8482\u82ac\u65af\u8bf4\uff0c\u8fd9\u91cc\u4e0d\u5b58\u5728\u5baa\u6cd5\u95ee\u9898\u3002\u5bf9\u4e8e\u88ab\u76d1\u89c6\u7684\u5458\u5de5\uff0c\u6cd5\u5f8b\u4e0a\u6ca1\u6709\u592a\u591a\u7684\u4fdd\u62a4\u63aa\u65bd\u3002\n\u65af\u8482\u82ac\u65af\u8bf4\uff0c\u5728\u516c\u53f8\u662f\u5426\u5fc5\u987b\u544a\u8bc9\u5458\u5de5\u4ed6\u4eec\u662f\u5426\u5728\u4f7f\u7528\u8ffd\u8e2a\u8f6f\u4ef6\u7684\u95ee\u9898\u4e0a\uff0c\u5404\u5dde\u7684\u6cd5\u5f8b\u5404\u4e0d\u76f8\u540c\u3002\u4e00\u4e9b\u5dde\u4e0d\u8981\u6c42\u9996\u5148\u901a\u77e5\u5de5\u4eba\u3002\n\u4ed6\u8bf4\uff0c\u7531\u4e8e\u51e0\u4e4e\u6ca1\u6709\u6cd5\u5f8b\u969c\u788d\uff0c\u5728\u5927\u6d41\u884c\u671f\u95f4\u6c42\u52a9\u4e8e\u8fd9\u6b3e\u8f6f\u4ef6\u7684\u96c7\u4e3b\u53ef\u80fd\u4f1a\u9009\u62e9\u7ee7\u7eed\u4f7f\u7528\u5b83\uff0c\u5373\u4f7f\u5728\u5728\u5bb6\u5de5\u4f5c\u7684\u8ba2\u5355\u88ab\u53d6\u6d88\u540e\u4e5f\u662f\u5982\u6b64\u3002\n\u65af\u8482\u82ac\u65af\u8bf4\uff0c\u4e00\u65e6\u96c7\u4e3b\u5728\u8d2d\u4e70\u548c\u5b89\u88c5\u8f6f\u4ef6\u4e0a\u8fdb\u884c\u4e86\u6295\u8d44\uff0c\u4ed6\u4eec\u5c31\u4e0d\u592a\u53ef\u80fd\u4f1a\u5220\u9664\u5b83\u3002\u8fd9\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u91cc\u90fd\u662f\u6b63\u786e\u7684\uff0c\u4f46\u4e5f\u8bb8\u73b0\u5728\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u6709\u628a\u63e1\u5730\u8ba4\u4e3a\uff0c\u4f60\u6b63\u5728\u505a\u7684\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u53d7\u5230\u4f60\u7684\u96c7\u4e3b\u7684\u76d1\u89c6\u548c\u8ddf\u8e2a\u3002\n\u56de\u5230\u5e03\u9c81\u514b\u6797\uff0c\u8fd9\u4f4d\u4e3a\u8fd9\u5bb6\u7535\u5546\u521d\u521b\u516c\u53f8\u5de5\u4f5c\u7684\u5973\u6027\u8868\u793a\uff0c\u5979\u7684\u96c7\u4e3b\u4e0b\u4ee4\u4e0b\u8f7dHubStaff\u548cTSheets\uff0c\u5bfc\u81f4\u5458\u5de5\u548c\u8001\u677f\u4e4b\u95f4\u7684\u5173\u7cfb\u53d8\u5f97\u7d27\u5f20\u3002\n\u8fd9\u771f\u7684\u6253\u51fb\u4e86\u6bcf\u4e2a\u4eba\u7684\u58eb\u6c14\uff0c\u5979\u8bf4\u3002\u4ece\u90a3\u4ee5\u540e\uff0c\u6bcf\u4e2a\u4eba\u90fd\u9000\u4e86\u4e00\u6b65\uff0c\u8bf4\uff0c\u597d\u5427\uff0c\u5982\u679c\u4ed6\u4eec\u5c31\u662f\u8fd9\u4e48\u5bf9\u5f85\u6211\u4eec\u7684\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u591a\u8d70\u4e00\u6b65\u5462\uff1f\u56e0\u4e3a\u5f88\u660e\u663e\uff0c\u8fd9\u5bf9\u4ed6\u4eec\u6765\u8bf4\u65e0\u5173\u7d27\u8981\u3002\n\u5979\u6ca1\u6709\u628a\u8f6f\u4ef6\u4e0b\u8f7d\u5230\u5979\u7684\u7535\u8111\u4e0a\uff0c\u800c\u662f\u9009\u62e9\u4e86\u9000\u51fa\u3002\u5728\u529e\u516c\u5ba4\u91cd\u65b0\u5f00\u653e\u4e4b\u524d\uff0c\u5979\u4e00\u76f4\u5728\u4f11\u65e0\u85aa\u5047\u671f\u3002\u4f46\u8fd9\u6bb5\u7ecf\u5386\u8ba9\u5979\u5bf9\u5979\u7684\u516c\u53f8\u4ea7\u751f\u4e86\u53cd\u611f\u3002\u5979\u73b0\u5728\u6b63\u5728\u627e\u4e00\u4efd\u65b0\u5de5\u4f5c\u3002\n\u5979\u8bf4\uff1a\u5bf9\u6211\u6765\u8bf4\uff0c\u73b0\u5728\u727a\u7272\u4e2a\u4eba\u9690\u79c1\u548c\u6240\u6709\u6570\u636e\u6765\u6362\u53d6\u85aa\u6c34\u662f\u4e0d\u503c\u5f97\u7684\u3002\u8fd9\u8ba9\u6211\u975e\u5e38\u4e0d\u8212\u670d\u3002", "note_en": "After two weeks of working from her Brooklyn apartment, a 25-year-old e-commerce worker received a staffwide email from her company: Employees were to install software called Hubstaff immediately on their personal computers so it could track their mouse movements and keyboard strokes, and record the webpages they visited.\n  They also had to download an app called TSheets to their phones to keep tabs on their whereabouts during work hours.\n  &#34;There are five of us. And we always came to work. We always came on time. There was no reason to start location-tracking us,&#34; the woman told NPR. She spoke on the condition of anonymity, fearing she could lose her job.\n  Company emails that she provided to NPR show her employer believed the tracking software would improve the team&#39;s productivity and efficiency while everyone was working from home.\n    The coronavirus pandemic has forced  about a third of U.S. workers to do their jobs from home. In turn, companies are ramping up the use of software to monitor what their employees do all day.\n    Privacy advocates and some workers said they worry that the intensified tracking brought upon by the coronavirus will normalize workplace surveillance and that this type of digital supervision will persist when workers return to offices.\n  Just ask a woman who works in marketing at a small company in Minnesota. She also spoke to NPR anonymously out of fear her employer would retaliate against her for speaking out.\n  Her employer has started using software called Time Doctor. It downloads videos of employees&#39; screens while they work. It also can enable a computer&#39;s webcam to take a picture of the employee every 10 minutes.\n  &#34;If you&#39;re idle for a few minutes, if you go to the bathroom or whatever, a pop-up will come up and it&#39;ll say, &#39;You have 60 seconds to start working again or we&#39;re going to pause your time,&#39; &#34; the woman said.\n    &#34;I just feel like crap. I feel like I&#39;m not trusted. I feel ashamed of myself,&#34; she said, referring to a short break she took to speak with a colleague by phone. &#34;My co-workers were really, really upset. But everyone was too afraid to say anything.&#34;\n    Critics call this kind of tracking software &#34;tattleware.&#34; But Brad Miller, who runs the Connecticut-based company Awareness Technologies, bristles at that description.\n  &#34;If you&#39;re not working or doing something wrong, then I guess it will tattle on you, but I don&#39;t think that&#39;s really how companies that are buying [the software] think of it as,&#34; Miller said.\n  Since the COVID-19 outbreak, Miller said that Awareness Technologies&#39; business has tripled. Its programs for managers keep a record of every task employees are doing on their computers. Each worker then gets assigned a productivity score. Every employee is ranked accordingly.\n  &#34;Are they generally active on programs and websites that I would consider productive like Excel, PowerPoint, Word, email, as opposed to YouTube or Facebook?&#34; Miller asked. &#34;That&#39;s primarily what our customers are looking to know.&#34;\n  Dave Nevogt, the CEO of Hubstaff, said demand has tripled for his company&#39;s monitoring software, too.\n  &#34;We have seen a massive increase in the number of people needing our platform,&#34; Nevogt told NPR. &#34;Remote work has gotten a huge boost as everyone has been forced to work outside of the office, and we feel like these changes may be here for good.&#34;\n  For bosses, keeping up with worker productivity has always been a give-and-take. But in the office, it is much easier to figure out if someone is doing a job well. Now tracking technology is taking the place of a manager&#39;s eyes. Miller said when the software runs on a homebound employee&#39;s computer, it gives the worker an added incentive not to slack off.\n  &#34;I think if people know it&#39;s happening, then people will act better than they would otherwise, because we all act better when someone is watching,&#34; Miller said.\n    Alison Green, who writes the syndicated advice column  Ask a Manager, has a different view.\n  She has been flooded with questions from workers who feel icky about their bosses quantifying their keystrokes and how many emails they fire off each day.\n  &#34;And then there&#39;s a lower-tech version of that, which is people whose managers are asking them to stay on video all day long so they can watch over them every minute of the day, which is very intrusive,&#34; Green said.\n  It may feel intrusive, but it is not illegal, said Paul Stephens, director of policy and advocacy with  Privacy Rights Clearinghouse, a consumer advocacy nonprofit.\n  While the Fourth Amendment protects against unreasonable searches and seizures by the government, employers are not running afoul of any federal laws by tracking what their workers are doing all day through surveillance software, he said.\n  &#34;There&#39;s not a constitutional issue here,&#34; Stephens said. &#34;There aren&#39;t a whole lot of legal protections for employees who are being monitored.&#34;\n  Stephens said state laws vary over whether companies must even tell workers whether they&#39;re using tracking software. Some states do not require that workers be notified first.\n  And with few legal barriers, employers who turn to this software during the pandemic may choose to keep using it even after work-from-home orders are lifted, he said.\n  &#34;Once the employer has made the investment in acquiring and installing the software, it&#39;s not likely that they&#39;re going to remove it,&#34; Stephens said. &#34;This has for a long time been true, but maybe now more than ever it&#39;s safe to assume that everything you&#39;re doing is being watched and tracked by your employer.&#34;\n    Back in Brooklyn, the woman who works for the e-commerce startup said her employer&#39;s order to download Hubstaff and TSheets has strained relations between employees and their bosses.\n  &#34;It has really destroyed morale for everyone,&#34; she said. &#34;And everyone has since kind of taken a step back and said, &#39;All right, if this is how they&#39;re going to treat us, why go the extra mile?&#39; Because clearly it doesn&#39;t matter to them.&#34;\n  Rather than download the software on her computer, she opted out. She&#39;s gone on unpaid leave until the office reopens. But the experience has soured her on her company. She&#39;s now hunting for a new job.\n  &#34;It&#39;s not worth it for me right now to sacrifice my personal privacy and all my data for a paycheck,&#34; she said. &#34;It just made me very uncomfortable.&#34;", "posttime": "2020-05-13 21:48:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u70ed\u6f6e,watching,\u5458\u5de5", "title": "\u4f60\u7684\u8001\u677f\u5728\u770b\u7740\u4f60\uff1a\u5728\u5bb6\u5de5\u4f5c\u7684\u70ed\u6f6e\u5e26\u6765\u4e86\u66f4\u591a\u7684\u76d1\u63a7", "title_en": "Your Boss Is Watching You: Work-from-Home Boom Leads to More Surveillance", "transed": 1, "url": "https://www.npr.org/2020/05/13/854014403/your-boss-is-watching-you-work-from-home-boom-leads-to-more-surveillance", "via": "", "real_tags": ["\u70ed\u6f6e", "watching", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "065a3a9a06a786d7328a931d00589001.png", "infoid": 1001965, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u4e0d\u719f\u6089TypeScript\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u79cd\u901a\u8fc7\u6dfb\u52a0\u7c7b\u578b\u58f0\u660e\u548c\u6ce8\u91ca\u7684\u8bed\u6cd5\u800c\u6784\u5efa\u5728JavaScript\u4e4b\u4e0a\u7684\u8bed\u8a00\u3002TypeScript\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f7f\u7528\u6b64\u8bed\u6cd5\u5bf9\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u7136\u540e\u8f93\u51fa\u5728\u8bb8\u591a\u4e0d\u540c\u8fd0\u884c\u65f6\u4e0a\u8fd0\u884c\u7684\u5e72\u51c0\u3001\u53ef\u8bfb\u7684JavaScript\u3002\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u53ef\u4ee5\u5728\u6211\u4eec\u8fd0\u884c\u4ee3\u7801\u4e4b\u524d\uff0c\u6216\u8005\u751a\u81f3\u5728\u6211\u4eec\u4fdd\u5b58\u6587\u4ef6\u4e4b\u524d\u5c31\u544a\u8bc9\u6211\u4eec\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\uff0c\u8fd9\u8981\u5f52\u529f\u4e8eTypeScript\u4e30\u5bcc\u7684\u8de8\u7f16\u8f91\u5668\u7f16\u8f91\u529f\u80fd\u3002\u4f46\u662f\uff0c\u9664\u4e86\u9519\u8bef\u68c0\u67e5\u4e4b\u5916\uff0c\u5728\u4e00\u4e9b\u60a8\u6700\u559c\u6b22\u7684\u7f16\u8f91\u5668\u4e2d\uff0cTypeScript\u8fd8\u652f\u6301\u8bf8\u5982\u5b8c\u6210\u3001\u5feb\u901f\u4fee\u590d\u548c\u91cd\u6784TypeScript\u548cJavaScript\u4e4b\u7c7b\u7684\u529f\u80fd\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u60a8\u5df2\u7ecf\u5728\u4f7f\u7528Visual Studio\u6216Visual Studio\u4ee3\u7801\uff0c\u90a3\u4e48\u5728\u7f16\u5199JavaScript\u4ee3\u7801\u65f6\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u5728\u4f7f\u7528TypeScript\u4e86\uff01\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u6709\u5174\u8da3\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u6211\u4eec\u7684\u7f51\u7ad9\uff01\n\u4f46\u662f\uff0c\u5982\u679c\u60a8\u5df2\u7ecf\u5728\u9879\u76ee\u4e2d\u4f7f\u7528TypeScript\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7NuGet\u83b7\u53d6\u5b83\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4f7f\u7528NPM\uff1a\n\u5bf9\u4e8e\u8fd9\u4e2a\u7248\u672c\uff0c\u6211\u4eec\u7684\u56e2\u961f\u4e00\u76f4\u4e13\u6ce8\u4e8e\u6027\u80fd\u3001\u6539\u8fdb\u548c\u7a33\u5b9a\u6027\u3002\u6211\u4eec\u4e00\u76f4\u81f4\u529b\u4e8e\u52a0\u901f\u7f16\u8bd1\u5668\u548c\u7f16\u8f91\u4f53\u9a8c\uff0c\u6d88\u9664\u6469\u64e6\u548c\u526a\u7eb8\uff0c\u51cf\u5c11\u9519\u8bef\u548c\u5d29\u6e83\u3002\u6211\u4eec\u8fd8\u4ece\u5916\u90e8\u793e\u533a\u6536\u5230\u4e86\u8bb8\u591a\u6709\u7528\u4e14\u5907\u53d7\u8d5e\u8d4f\u7684\u529f\u80fd\u548c\u4fee\u590d\uff01\nTypeScript\u7684\u6700\u65b0\u7248\u672c(\u5927\u7ea63.7)\u66f4\u65b0\u4e86Promise.all\u548cPromise.race\u7b49\u51fd\u6570\u7684\u58f0\u660e\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u5f15\u5165\u4e86\u4e00\u4e9b\u56de\u5f52\uff0c\u7279\u522b\u662f\u5728\u6df7\u5165\u5e26\u6709NULL\u6216\u672a\u5b9a\u4e49\u7684\u503c\u65f6\u3002\n\u63a5\u53e3Lion{roar()\uff1avoid}\u63a5\u53e3\u5bc6\u5c01{singKissFromARose()\uff1avoid}\u5f02\u6b65\u51fd\u6570visitZoo(lion Exhibit\uff1aPromise&lt\uff1bLion&gt\uff1b\uff0csealExhibit\uff1aPromise&lt\uff1bSeal|\u672a\u5b9a\u4e49&gt\uff1b){let[lion\uff0cseal]=\u7b49\u5f85Promise\u3002all([lion Exhibit\uff0csealExhibit])\uff1b\u72ee\u5b50\u3002Roar()\uff1b//\u55ef\u54e6//~//\u5bf9\u8c61\u53ef\u80fd\u662f&#39\uff1b\u672a\u5b9a\u4e49&#39\uff1b\u3002}\u3002\n\u8fd9\u662f\u5947\u602a\u7684\u884c\u4e3a\uff01\u4e8b\u5b9e\u4e0a\uff0csealExhibit\u5305\u542b\u672a\u5b9a\u4e49\u7684\u67d0\u79cd\u4e2d\u6bd2\u7c7b\u578b\u7684\u72ee\u5b50\uff0c\u4ee5\u5305\u62ec\u672a\u5b9a\u4e49\u7684\u3002\n\u591a\u4e8f\u4e86Jack Bates\u7684\u62c9\u53d6\u8bf7\u6c42\uff0c\u6211\u4eec\u5728TypeScript 3.9\u4e2d\u7684\u63a8\u7406\u8fc7\u7a0b\u5f97\u5230\u4e86\u6539\u8fdb\uff0c\u4ece\u800c\u4fee\u590d\u4e86\u8fd9\u4e00\u95ee\u9898\u3002\u4ee5\u4e0a\u4e0d\u518d\u6709\u9519\u8bef\u3002\u5982\u679c\u4f60\u56e0\u4e3a\u627f\u8bfa\u7684\u95ee\u9898\u800c\u88ab\u56f0\u5728\u8001\u7248\u672c\u7684\u6253\u5b57\u7a3f\u4e0a\uff0c\u6211\u4eec\u9f13\u52b1\u4f60\u8bd5\u8bd53.9\uff01\n\u5982\u679c\u60a8\u4e00\u76f4\u5728\u5173\u6ce8\u6211\u4eec\u7684\u95ee\u9898\u8ddf\u8e2a\u5668\u548c\u8bbe\u8ba1\u4f1a\u8bae\u7b14\u8bb0\uff0c\u60a8\u53ef\u80fd\u77e5\u9053\u56f4\u7ed5\u4e00\u4e2a\u540d\u4e3aWaitted\u7684\u65b0\u7c7b\u578b\u8fd0\u7b97\u7b26\u6240\u505a\u7684\u4e00\u4e9b\u5de5\u4f5c\u3002\u6b64\u7c7b\u578b\u64cd\u4f5c\u7b26\u7684\u76ee\u6807\u662f\u5728JavaScript\u4e2d\u51c6\u786e\u5efa\u6a21Promise\u5c55\u5f00\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\n\u6211\u4eec\u6700\u521d\u9884\u8ba1TypeScript3.9\u4f1a\u53d1\u5e03\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u73b0\u6709\u7684\u4ee3\u7801\u5e93\u8fd0\u884c\u4e86\u65e9\u671f\u7684TypeScript\u7248\u672c\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u8be5\u529f\u80fd\u9700\u8981\u66f4\u591a\u7684\u8bbe\u8ba1\u5de5\u4f5c\u624d\u80fd\u987a\u5229\u5730\u5411\u6240\u6709\u4eba\u63a8\u51fa\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u51b3\u5b9a\u5c06\u8be5\u529f\u80fd\u4ece\u6211\u4eec\u7684\u4e3b\u8981\u5206\u652f\u4e2d\u5220\u9664\uff0c\u76f4\u5230\u6211\u4eec\u611f\u89c9\u66f4\u6709\u4fe1\u5fc3\u4e3a\u6b62\u3002\u6211\u4eec\u5c06\u5bf9\u8be5\u529f\u80fd\u8fdb\u884c\u66f4\u591a\u7684\u5b9e\u9a8c\uff0c\u4f46\u6211\u4eec\u4e0d\u4f1a\u5c06\u5176\u4f5c\u4e3a\u6b64\u7248\u672c\u7684\u4e00\u90e8\u5206\u53d1\u5e03\u3002\n\u6253\u5b57\u672c3.9\u51fa\u5382\u65f6\u6709\u8bb8\u591a\u65b0\u7684\u901f\u5ea6\u6539\u8fdb\u3002\u5728\u89c2\u5bdf\u5230Material-UI\u548cStyled-Components\u7b49\u5305\u7684\u7f16\u8f91/\u7f16\u8bd1\u901f\u5ea6\u6781\u4f4e\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u56e2\u961f\u4e00\u76f4\u5728\u5173\u6ce8\u6027\u80fd\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u6df1\u5165\u7814\u7a76\u4e86\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u62c9\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u4f18\u5316\u4e86\u6d89\u53ca\u5927\u578b\u8054\u5408\u3001\u4ea4\u96c6\u3001\u6761\u4ef6\u7c7b\u578b\u548c\u6620\u5c04\u7c7b\u578b\u7684\u67d0\u4e9b\u75c5\u7406\u60c5\u51b5\u3002\n\u6bcf\u4e2aPull\u8bf7\u6c42\u5728\u67d0\u4e9b\u4ee3\u7801\u5e93\u4e0a\u7684\u7f16\u8bd1\u65f6\u95f4\u51cf\u5c11\u4e86\u5927\u7ea65-10%\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u76f8\u4fe1\u6211\u4eec\u5df2\u7ecf\u5c06Material-UI\u6837\u5f0f\u9879\u76ee\u7684\u7f16\u8bd1\u65f6\u95f4\u51cf\u5c11\u4e86\u5927\u7ea625%\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5230\u4e86\u5fae\u8f6f\u56e2\u961f\u7684\u53cd\u9988\uff0cTypeScript3.9\u5c06\u4ed6\u4eec\u7684\u7f16\u8bd1\u65f6\u95f4\u4ece26\u79d2\u51cf\u5c11\u5230\u4e8610\u79d2\u5de6\u53f3\u3002\n\u6211\u4eec\u8fd8\u5bf9\u7f16\u8f91\u5668\u573a\u666f\u4e2d\u7684\u6587\u4ef6\u91cd\u547d\u540d\u529f\u80fd\u8fdb\u884c\u4e86\u4e00\u4e9b\u66f4\u6539\u3002\u6211\u4eec\u4eceVisual Studio\u4ee3\u7801\u56e2\u961f\u90a3\u91cc\u542c\u8bf4\uff0c\u5728\u91cd\u547d\u540d\u6587\u4ef6\u65f6\uff0c\u4ec5\u4ec5\u8ba1\u7b97\u51fa\u9700\u8981\u66f4\u65b0\u54ea\u4e9b\u5bfc\u5165\u8bed\u53e5\u5c31\u53ef\u80fd\u9700\u89815\u523010\u79d2\u7684\u65f6\u95f4\u3002TypeScript 3.9\u901a\u8fc7\u66f4\u6539\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u670d\u52a1\u5982\u4f55\u7f13\u5b58\u6587\u4ef6\u67e5\u627e\u7684\u5185\u90e8\u7ed3\u6784\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002\n\u867d\u7136\u8fd8\u6709\u6539\u8fdb\u7684\u7a7a\u95f4\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u8fd9\u9879\u5de5\u4f5c\u80fd\u4e3a\u6bcf\u4e2a\u4eba\u5e26\u6765\u66f4\u5feb\u7684\u4f53\u9a8c\uff01\n\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u7528TypeScript\u7f16\u5199\u4e00\u4e2a\u5e93\uff0c\u5e76\u5bfc\u51fa\u4e00\u4e9b\u540d\u4e3adoStuff\u7684\u51fd\u6570\u4f5c\u4e3a\u516c\u5171API\u7684\u4e00\u90e8\u5206\u3002\u8be5\u51fd\u6570\u7684\u7c7b\u578b\u58f0\u660e\u5b83\u63a5\u53d7\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee5\u4fbf\u5176\u4ed6TypeScript\u7528\u6237\u53ef\u4ee5\u5f97\u5230\u7c7b\u578b\u68c0\u67e5\u9519\u8bef\uff0c\u4f46\u5b83\u8fd8\u6267\u884c\u8fd0\u884c\u65f6\u68c0\u67e5(\u53ef\u80fd\u4ec5\u5728\u5f00\u53d1\u7248\u672c\u4e2d)\uff0c\u4ee5\u5411JavaScript\u7528\u6237\u63d0\u4f9b\u6709\u7528\u7684\u9519\u8bef\u3002\n\u51fd\u6570doStuff(abc\uff1astring\uff0cxyz\uff1astring){assert(typeof abc=&#34\uff1bstring&#34\uff1b)\uff1bassert(typeof xyz=&#34\uff1bstring&#34\uff1b)\uff1b//\u505a\u4e00\u4e9b\u4e8b\u60c5}\u3002\n\u56e0\u6b64\uff0c\u5f53TypeScript\u7528\u6237\u8bef\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u4ed6\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u6709\u7528\u7684\u7ea2\u8272\u66f2\u7ebf\u548c\u4e00\u6761\u9519\u8bef\u6d88\u606f\uff0c\u800cJavaScript\u7528\u6237\u4f1a\u5f97\u5230\u4e00\u4e2a\u65ad\u8a00\u9519\u8bef\u3002\u6211\u4eec\u60f3\u6d4b\u8bd5\u8fd9\u4e2a\u884c\u4e3a\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u7f16\u5199\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u3002\n\u8fd9\u5c31\u662fTypeScript3.9\u5e26\u6765\u65b0\u529f\u80fd\u7684\u539f\u56e0\uff1a//@ts-expect-error\u6ce8\u91ca\u3002\u5f53\u4e00\u884c\u4ee5//@ts-Expect-Error\u6ce8\u91ca\u4e3a\u524d\u7f00\u65f6\uff0cTypeScript\u5c06\u7981\u6b62\u62a5\u544a\u8be5\u9519\u8bef\uff1b\u4f46\u5982\u679c\u6ca1\u6709\u9519\u8bef\uff0cTypeScript\u5c06\u62a5\u544a//@ts-Expect-Error\u4e0d\u662f\u5fc5\u9700\u7684\u3002\n\u6211\u4eec\u975e\u5e38\u611f\u8c22\u4e54\u4ec0\u00b7\u6208\u5fb7\u4f2f\u683c\uff0c\u4ed6\u662f\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u7684\u8d21\u732e\u8005\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770bts-Expect-Error\u62c9\u53d6\u8bf7\u6c42\u3002\n\u5728\u67d0\u4e9b\u65b9\u9762\uff0c//@ts-expect-error\u53ef\u4ee5\u5145\u5f53\u9690\u85cf\u6ce8\u91ca\uff0c\u7c7b\u4f3c\u4e8e//@ts-Ignore\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5982\u679c\u4ee5\u4e0b\u884c\u6ca1\u6709\u9519\u8bef\uff0c\u5219//@ts-Ignore\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n\u60a8\u53ef\u80fd\u60f3\u8981\u5c06\u73b0\u6709\u7684//@ts-Ignore\u6ce8\u91ca\u5207\u6362\u5230//@ts-Expect-Error\uff0c\u5e76\u4e14\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u54ea\u79cd\u6ce8\u91ca\u9002\u5408\u4e8e\u5c06\u6765\u7684\u4ee3\u7801\u3002\u867d\u7136\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e\u60a8\u548c\u60a8\u7684\u56e2\u961f\uff0c\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e00\u4e9b\u60f3\u6cd5\u53ef\u4f9b\u9009\u62e9\u3002\n\u60a8\u7f16\u5199\u7684\u6d4b\u8bd5\u4ee3\u7801\u5b9e\u9645\u4e0a\u5e0c\u671b\u7c7b\u578b\u7cfb\u7edf\u5728\u64cd\u4f5c\u4e2d\u51fa\u9519\u3002\n\u60a8\u5e0c\u671b\u4fee\u590d\u7a0b\u5e8f\u5f88\u5feb\u5c31\u4f1a\u51fa\u73b0\uff0c\u800c\u60a8\u53ea\u9700\u8981\u4e00\u4e2a\u5feb\u901f\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\n\u60a8\u6b63\u5904\u4e8e\u4e00\u4e2a\u89c4\u6a21\u5408\u7406\u7684\u9879\u76ee\u4e2d\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u4e3b\u52a8\u56e2\u961f\uff0c\u8be5\u56e2\u961f\u5e0c\u671b\u5728\u53d7\u5f71\u54cd\u7684\u4ee3\u7801\u518d\u6b21\u6709\u6548\u540e\u7acb\u5373\u5220\u9664\u6291\u5236\u6ce8\u91ca\u3002\n\u60a8\u6709\u4e00\u4e2a\u8f83\u5927\u7684\u9879\u76ee\uff0c\u5e76\u4e14\u5728\u6ca1\u6709\u660e\u786e\u6240\u6709\u8005\u7684\u4ee3\u7801\u4e2d\u51fa\u73b0\u4e86\u65b0\u7684\u9519\u8bef\n\u60a8\u6b63\u5728\u8fdb\u884c\u4e24\u4e2a\u4e0d\u540c\u7248\u672c\u7684TypeScript\u4e4b\u95f4\u7684\u5347\u7ea7\uff0c\u5728\u4e00\u4e2a\u7248\u672c\u4e2d\u6709\u4e00\u884c\u4ee3\u7801\u9519\u8bef\uff0c\u4f46\u5728\u53e6\u4e00\u4e2a\u7248\u672c\u4e2d\u6ca1\u6709\u4e00\u884c\u4ee3\u7801\u9519\u8bef\u3002\n\u8001\u5b9e\u8bf4\uff0c\u4f60\u6ca1\u6709\u65f6\u95f4\u6765\u51b3\u5b9a\u8fd9\u4e9b\u9009\u9879\u4e2d\u54ea\u4e00\u4e2a\u66f4\u597d\u3002\n\u5728TypeScript3.7\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u672a\u8c03\u7528\u51fd\u6570\u68c0\u67e5\uff0c\u4ee5\u4fbf\u5728\u5fd8\u8bb0\u8c03\u7528\u51fd\u6570\u65f6\u62a5\u544a\u9519\u8bef\u3002\n\u51fd\u6570hasImportantPermission()\uff1a\u5e03\u5c14\u503c{//.}//\u54ce\u5440\uff01IF(HasImportantPermission){//~//\u6b64\u6761\u4ef6\u5c06\u59cb\u7ec8\u8fd4\u56deTRUE\uff0c\u56e0\u4e3a\u51fd\u6570\u59cb\u7ec8\u662f\u5b9a\u4e49\u7684\u3002//\u60a8\u7684\u610f\u601d\u662f\u8981\u6539\u4e3a\u8c03\u7528\u5b83\u5417\uff1fdelete eAllTheImportantFiles()\uff1b}\u3002\n\u4f46\u662f\uff0c\u6b64\u9519\u8bef\u4ec5\u9002\u7528\u4e8eIF\u8bed\u53e5\u4e2d\u7684\u6761\u4ef6\u3002\u591a\u4e8f\u4e86Alexander Tarasyuk\u7684\u62c9\u53d6\u8bf7\u6c42\uff0c\u8be5\u529f\u80fd\u73b0\u5728\u4e5f\u5728\u4e09\u5143\u6761\u4ef6\u53e5\u4e2d\u5f97\u5230\u652f\u6301(\u5373\u7b2c\u4e8c\u4e2a\uff1ftrueExpr\uff1afalse seExpr\u8bed\u6cd5)\u3002\n\u58f0\u660e\u51fd\u6570listFilesOfDirectory(dirPath\uff1astring)\uff1astring[]\uff1b\u58f0\u660e\u51fd\u6570isDirectory()\uff1aboolean\uff1b\u51fd\u6570getAllFiles(startFileName\uff1astring){const result\uff1astring[]=[]\uff1btraverse(StartFileName)\uff1breturn result\uff1b\u51fd\u6570\u904d\u5386(currentPath\uff1astring){return isDirectory\uff1f//~/\u6b64\u6761\u4ef6\u5c06\u59cb\u7ec8\u8fd4\u56detrue//\uff0c\u56e0\u4e3a\u51fd\u6570\u59cb\u7ec8\u5df2\u5b9a\u4e49\u3002//\u60a8\u7684\u610f\u601d\u662f\u8981\u6539\u4e3a\u8c03\u7528\u5b83\u5417\uff1flistFilesOfDirectory(CurrentPath)\u3002forEach(\u904d\u5386)\uff1aresult\u3002Push(CurrentPath)\uff1b}}\u3002\nTypeScript\u7f16\u8bd1\u5668\u4e0d\u4ec5\u589e\u5f3a\u4e86\u5927\u591a\u6570\u4e3b\u8981\u7f16\u8f91\u5668\u4e2d\u7684\u6587\u672c\u7f16\u8f91\u4f53\u9a8c\uff0c\u800c\u4e14\u8fd8\u589e\u5f3a\u4e86Visual Studio\u7f16\u8f91\u5668\u7cfb\u5217\u4e2d\u7684JavaScript\u4f53\u9a8c\u4ee5\u53ca\u66f4\u591a\u529f\u80fd\u3002\u5728\u7f16\u8f91\u5668\u4e2d\u4f7f\u7528\u65b0\u7684TypeScript/JavaScript\u529f\u80fd\u4f1a\u56e0\u7f16\u8f91\u5668\u7684\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662f\u3002\nVisual Studio\u4ee3\u7801\u652f\u6301\u9009\u62e9\u4e0d\u540c\u7248\u672c\u7684TypeScript\u3002\u6216\u8005\uff0c\u8fd8\u6709JavaScript/TypeScript Nighly\u6269\u5c55\u53ef\u4ee5\u4fdd\u6301\u5728\u6700\u524d\u6cbf(\u901a\u5e38\u975e\u5e38\u7a33\u5b9a)\u3002\n\u5728\u8f83\u65e9\u7684\u7248\u672c\u4e2d\uff0cTypeScript\u603b\u662f\u5047\u8bbe\u4e0d\u7ba1\u60a8\u7684\u6587\u4ef6\u662f\u4ec0\u4e48\uff0c\u60a8\u90fd\u60f3\u8981\u4e00\u4e2aECMAScript\u6837\u5f0f\u7684\u5bfc\u5165\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\u7136\u800c\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u5728\u7f16\u5199JavaScript\u6587\u4ef6\u65f6\u90fd\u4ee5ECMAScript\u6837\u5f0f\u7684\u6a21\u5757\u4e3a\u76ee\u6807\u3002\u8bb8\u591a\u7528\u6237\u4ecd\u5728\u4f7f\u7528CommonJS\u6837\u5f0f\u7684Required(.)\u3002\u8fd9\u6837\u7684\u8fdb\u53e3\u3002\nTypeScript\u73b0\u5728\u53ef\u4ee5\u81ea\u52a8\u68c0\u6d4b\u60a8\u6b63\u5728\u4f7f\u7528\u7684\u5bfc\u5165\u7c7b\u578b\uff0c\u4ee5\u4fdd\u6301\u6587\u4ef6\u6837\u5f0f\u7684\u6574\u6d01\u548c\u4e00\u81f4\u3002\nTypeScript\u7684\u91cd\u6784\u548c\u5feb\u901f\u4fee\u590d\u901a\u5e38\u4e0d\u80fd\u5f88\u597d\u5730\u4fdd\u5b58\u6362\u884c\u7b26\u3002\u4f5c\u4e3a\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u793a\u4f8b\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u3002\nconst maxValue=100\uff1b/*start*/for(\u8bbei=0\uff1bi&lt\uff1b=maxValue\uff1bi++){//\u9996\u5148\u83b7\u53d6\u5e73\u65b9\u503c\u3002\u8ba9Square=i**2\uff1b//\u73b0\u5728\u6253\u5370\u5e73\u65b9\u7684\u503c\u3002\u63a7\u5236\u53f0\u3002log(\u6b63\u65b9\u5f62)\uff1b}/*\u7ed3\u675f*/\u3002\n\u5982\u679c\u6211\u4eec\u5728\u7f16\u8f91\u5668\u4e2d\u7a81\u51fa\u663e\u793a\u4ece/*start*/\u5230/*end*/\u7684\u8303\u56f4\u4ee5\u63d0\u53d6\u5230\u4e00\u4e2a\u65b0\u51fd\u6570\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u5982\u4e0b\u6240\u793a\u7684\u4ee3\u7801\u3002\nconst maxValue=100\uff1bprintSquares()\uff1b\u51fd\u6570printSquares(){for(\u8bbei=0\uff1bi&lt\uff1b=maxValue\uff1bi++){//\u9996\u5148\u83b7\u53d6\u5e73\u65b9\u503c\u3002\u8ba9Square=i**2\uff1b//\u73b0\u5728\u6253\u5370\u5e73\u65b9\u7684\u503c\u3002\u63a7\u5236\u53f0\u3002log(\u6b63\u65b9\u5f62)\uff1b}}\u3002\n\u8fd9\u5e76\u4e0d\u7406\u60f3-\u6211\u4eec\u5728for\u5faa\u73af\u4e2d\u7684\u6bcf\u4e2a\u8bed\u53e5\u4e4b\u95f4\u90fd\u6709\u4e00\u4e2a\u7a7a\u884c\uff0c\u4f46\u662f\u91cd\u6784\u53bb\u6389\u4e86\u5b83\uff01TypeScript3.9\u505a\u4e86\u66f4\u591a\u7684\u5de5\u4f5c\u6765\u4fdd\u5b58\u6211\u4eec\u6240\u5199\u7684\u5185\u5bb9\u3002\nconst maxValue=100\uff1bprintSquares()\uff1b\u51fd\u6570printSquares(){for(\u8bbei=0\uff1bi&lt\uff1b=maxValue\uff1bi++){//\u9996\u5148\u83b7\u53d6\u5e73\u65b9\u503c\u3002\u8ba9Square=i**2\uff1b//\u73b0\u5728\u6253\u5370\u5e73\u65b9\u7684\u503c\u3002\u63a7\u5236\u53f0\u3002log(\u6b63\u65b9\u5f62)\uff1b}}\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u5fd8\u8bb0\u8fd4\u56de\u51fd\u6570\u4e2d\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7684\u503c\uff0c\u7279\u522b\u662f\u5728\u5411\u7bad\u5934\u51fd\u6570\u6dfb\u52a0\u5927\u62ec\u53f7\u65f6\u3002\n//\u5728\u8ba9F1=()=&gt\uff1b42\u4e4b\u524d//\u54ce\u5440-\u4e0d\u4e00\u6837\uff01\u8bbef2=()=&gt\uff1b{42}\u3002\n\u591a\u4e8f\u4e86\u793e\u533a\u6210\u5458Wen lu Wang\u7684\u62c9\u8bf7\u6c42\uff0cTypeScript\u53ef\u4ee5\u63d0\u4f9b\u5feb\u901f\u4fee\u590d\uff0c\u4ee5\u6dfb\u52a0\u7f3a\u5c11\u7684\u8fd4\u56de\u8bed\u53e5\u3001\u5220\u9664\u5927\u62ec\u53f7\uff0c\u6216\u8005\u5411\u770b\u8d77\u6765\u4e0e\u5bf9\u8c61\u6587\u5b57\u53ef\u7591\u7684\u7bad\u5934\u51fd\u6570\u4f53\u6dfb\u52a0\u5706\u62ec\u53f7\u3002\n\u7f16\u8f91\u4eba\u5458\u9700\u8981\u627e\u51fa\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5e94\u7528\u9002\u5f53\u7684\u9009\u9879\uff0c\u5e76\u627e\u51fa\u5f53\u524d\u201c\u9879\u76ee\u201d\u4e2d\u8fd8\u5305\u62ec\u54ea\u4e9b\u5176\u4ed6\u6587\u4ef6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531TypeScript\u7684\u8bed\u8a00\u670d\u52a1\u5668\u652f\u6301\u7684\u7f16\u8f91\u5668\u901a\u8fc7\u904d\u5386\u6bcf\u4e2a\u7236\u76ee\u5f55\u6765\u67e5\u627etsconfig.json\u3002\n\u5176\u4e2d\u4e00\u79cd\u60c5\u51b5\u662f\uff0c\u5f53tsconfig.json\u53ea\u5b58\u5728\u4e8e\u5f15\u7528\u5176\u4ed6tsconfig.json\u6587\u4ef6\u65f6\u3002\n//tsconfig.json{&#34\uff1bfiles&#34\uff1b\uff1a[]\uff0c&#34\uff1bReferences&#34\uff1b\uff1a[{&#34\uff1bpath&#34\uff1b\uff1a&#34\uff1b./tsconfig.shared.json&#34\uff1b}\uff0c{&#34\uff1bpath&#34\uff1b\uff1a&#34\uff1b./tsconfig.front tend.json&#34\uff1b}\uff0c{&#34\uff1bpath&#34\uff1b\uff1a&#34\uff1b./tsconfig.backend.json&\u3002}\u3001]}\u3002\n\u8fd9\u4e2a\u9664\u4e86\u7ba1\u7406\u5176\u4ed6\u9879\u76ee\u6587\u4ef6\u4ec0\u4e48\u90fd\u4e0d\u505a\u7684\u6587\u4ef6\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u89e3\u51b3\u65b9\u6848\u201d\u3002\u5728\u8fd9\u91cc\uff0c\u8fd9\u4e9btsconfig.*.json\u6587\u4ef6\u90fd\u4e0d\u4f1a\u88ab\u670d\u52a1\u5668\u62fe\u53d6\uff0c\u4f46\u662f\u6211\u4eec\u786e\u5b9e\u5e0c\u671b\u8bed\u8a00\u670d\u52a1\u5668\u7406\u89e3\uff0c\u5f53\u524d\u7684.ts\u6587\u4ef6\u53ef\u80fd\u5c5e\u4e8e\u6839tsconfig.json\u4e2d\u63d0\u5230\u7684\u9879\u76ee\u4e4b\u4e00\u3002\nTypeScript 3.9\u6dfb\u52a0\u4e86\u5bf9\u6b64\u914d\u7f6e\u7684\u7f16\u8f91\u65b9\u6848\u7684\u652f\u6301\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u6dfb\u52a0\u6b64\u529f\u80fd\u7684Pull\u8bf7\u6c42\u3002\nTypeScript\u6700\u8fd1\u5b9e\u73b0\u4e86\u53ef\u9009\u94fe\u63a5\u8fd0\u7b97\u7b26\uff0c\u4f46\u6211\u4eec\u6536\u5230\u4e86\u7528\u6237\u53cd\u9988\uff0c\u53ef\u9009\u94fe\u7684\u884c\u4e3a(\uff1f.)\u3002\u4f7f\u7528\u975e\u7a7a\u65ad\u8a00\u8fd0\u7b97\u7b26(\uff01)\u3002\u662f\u975e\u5e38\u8fdd\u53cd\u76f4\u89c9\u7684\u3002\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5706\u62ec\u53f7\u505c\u6b62\u4e86\u53ef\u9009\u94fe\u63a5\u7684\u201c\u77ed\u8def\u201d\u884c\u4e3a\uff0c\u56e0\u6b64\u5982\u679c\u6ca1\u6709\u5b9a\u4e49foo\uff0c\u8bbf\u95eebaz\u5c06\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\u3002\n\u6307\u51fa\u8fd9\u4e00\u884c\u4e3a\u7684\u5df4\u522b\u5854\u56e2\u961f\u4ee5\u53ca\u5411\u6211\u4eec\u63d0\u4f9b\u53cd\u9988\u7684\u5927\u591a\u6570\u7528\u6237\u90fd\u8ba4\u4e3a\u8fd9\u79cd\u884c\u4e3a\u662f\u9519\u8bef\u7684\u3002\u6211\u4eec\u4e5f\u662f\uff01\u6211\u4eec\u542c\u5230\u6700\u591a\u7684\u662f\uff01\u64cd\u4f5c\u7b26\u5e94\u8be5\u201c\u6d88\u5931\u201d\uff0c\u56e0\u4e3a\u5176\u76ee\u7684\u662f\u4ece\u680f\u7684\u7c7b\u578b\u4e2d\u5220\u9664NULL\u548c\u672a\u5b9a\u4e49\u7684\u5185\u5bb9\u3002\n\u8fd9\u662f\u4e00\u4e2a\u7a81\u7834\u6027\u7684\u53d8\u5316\uff0c\u4f46\u6211\u4eec\u76f8\u4fe1\u5927\u591a\u6570\u4ee3\u7801\u5728\u7f16\u5199\u65f6\u90fd\u8003\u8651\u5230\u4e86\u65b0\u7684\u89e3\u91ca\u3002\u60f3\u8981\u6062\u590d\u5230\u65e7\u884c\u4e3a\u7684\u7528\u6237\u53ef\u4ee5\u5728\uff01\u7684\u5de6\u4fa7\u6dfb\u52a0\u663e\u5f0f\u62ec\u53f7\u3002\u63a5\u7ebf\u5458\u3002\nJSX\u89c4\u8303\u7981\u6b62\u5728\u6587\u672c\u4f4d\u7f6e\u4f7f\u7528}\u548c&gt\uff1b\u5b57\u7b26\u3002TypeScript\u548cBabel\u90fd\u51b3\u5b9a\u6267\u884c\u8fd9\u4e00\u89c4\u5219\uff0c\u4ee5\u4f7f\u5176\u66f4\u7b26\u5408\u8981\u6c42\u3002\u63d2\u5165\u8fd9\u4e9b\u5b57\u7b26\u7684\u65b0\u65b9\u6cd5\u662f\u4f7f\u7528HTML\u8f6c\u4e49\u4ee3\u7801(\u4f8b\u5982&lt\uff1bdiv&gt\uff1b2&amp\uff1bgt\uff1b1&lt\uff1b/div&gt\uff1b)\u6216\u63d2\u5165\u5e26\u6709\u5b57\u7b26\u4e32\u6587\u5b57\u7684\u8868\u8fbe\u5f0f(\u4f8b\u5982&lt\uff1bdiv&gt\uff1b2{&#34\uff1b&gt\uff1b&#34\uff1b}1&lt\uff1b/div&gt\uff1b)\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u7531\u4e8eBrad Zacher\u53d1\u51fa\u7684\u5f3a\u5236\u6267\u884c\u6b64\u64cd\u4f5c\u7684Pull\u8bf7\u6c42\uff0c\u60a8\u5c06\u6536\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u9519\u8bef\u6d88\u606f\u3002\n\u610f\u5916\u4ee4\u724c\u3002\u60a8\u8bf4\u7684\u662f`{&#39\uff1b&gt\uff1b&39\uff1b}`\u8fd8\u662f`&amp\uff1bgt\uff1b`\uff1f\u610f\u60f3\u4e0d\u5230\u7684\u4ee4\u724c\u3002\u4f60\u8bf4\u7684\u662f``\u8fd8\u662f`&amp\uff1brbrace\uff1b`\uff1f\n\u8ba9Directions=&lt\uff1bdiv&gt\uff1b\u5bfc\u822a\u5230\uff1a\u83dc\u5355\u680f&gt\uff1b\u5de5\u5177&gt\uff1b\u9009\u9879&lt\uff1b/div&gt\uff1b//~~//\u610f\u5916\u6807\u8bb0\u3002\u60a8\u662f\u6307`{&#39\uff1b&&gt;\uff1b}`\u8fd8\u662f`&amp\uff1b&gt;`\uff1f\n\u8be5\u9519\u8bef\u6d88\u606f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u5feb\u901f\u4fee\u590d\uff0c\u591a\u4e8f\u4e86Alexander Tarasyuk\uff0c\u5982\u679c\u60a8\u6709\u5f88\u591a\u9519\u8bef\uff0c\u60a8\u53ef\u4ee5\u6279\u91cf\u5e94\u7528\u8fd9\u4e9b\u66f4\u6539\u3002\n\u901a\u5e38\uff0c\u5982\u679cA\u6216B\u53ef\u4ee5\u6307\u5b9a\u7ed9C\uff0c\u5219\u50cfA&A\uff1bB\u8fd9\u6837\u7684\u4ea4\u53c9\u70b9\u7c7b\u578b\u53ef\u4ee5\u6307\u5b9a\u7ed9C\uff1b\u4f46\u662f\uff0c\u6709\u65f6\u53ef\u9009\u7279\u6027\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u63a5\u53e3A{a\uff1anumber\uff1b//\u6ce8\u610f\u8fd9\u662f&#39\uff1bnumber&#39\uff1b}\u63a5\u53e3B{b\uff1astring\uff1b}\u63a5\u53e3C{a\uff1f\uff1aBoolean\uff1b//\u6ce8\u610f\u8fd9\u662f&#39\uff1bBoolean&#39\uff1bb\uff1aString\uff1b}\u58f0\u660elet x\uff1aA&amp\uff1bB\uff1b\u58f0\u660elet y\uff1ac\uff1by=x\uff1b\n\u5728\u4ee5\u524d\u7684TypeScript\u7248\u672c\u4e2d\uff0c\u8fd9\u662f\u5141\u8bb8\u7684\uff0c\u56e0\u4e3aA\u4e0eC\u5b8c\u5168\u4e0d\u517c\u5bb9\uff0c\u800cB\u4e0eC\u517c\u5bb9\u3002\n\u5728TypeScript3.9\u4e2d\uff0c\u53ea\u8981\u4ea4\u53c9\u70b9\u4e2d\u7684\u6bcf\u4e2a\u7c7b\u578b\u90fd\u662f\u5177\u4f53\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u7c7b\u578b\u7cfb\u7edf\u5c31\u4f1a\u4e00\u6b21\u6027\u8003\u8651\u6240\u6709\u5c5e\u6027\u3002\u56e0\u6b64\uff0cTypeScript\u5c06\u770b\u5230A&A\uff1bB\u7684a\u5c5e\u6027\u4e0eC\u7684a\u5c5e\u6027\u4e0d\u517c\u5bb9\uff1a\n\u7c7b\u578b&#39\uff1bA&amp\uff1bB&#39\uff1b\u4e0d\u53ef\u5206\u914d\u7ed9\u7c7b\u578b&#39\uff1bC&#39\uff1b\u3002\u5c5e\u6027\u7c7b\u578b&#39\uff1ba&#39\uff1b\u4e0d\u517c\u5bb9\u3002\u7c7b\u578b&#39\uff1b\u7f16\u53f7&#39\uff1b\u4e0d\u53ef\u5206\u914d\u7ed9\u7c7b\u578b&#39\uff1b\u5e03\u5c14|\u672a\u5b9a\u4e49&#39\uff1b\u3002\n\u5728\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u6700\u7ec8\u5f97\u5230\u7684\u7c7b\u578b\u63cf\u8ff0\u7684\u503c\u6839\u672c\u4e0d\u5b58\u5728\u3002\u4f8b\u5982\n\u58f0\u660e\u51fd\u6570smushObjects&lt\uff1bT\uff0cU&gt\uff1b(x\uff1at\uff0cy\uff1au)\uff1aT&amp\uff1bU\uff1b\u63a5\u53e3Circle{Kind\uff1a&#34\uff1bCircle&#34\uff1b\uff1bRadius\uff1aNumber\uff1b}\u63a5\u53e3Square{Kind\uff1a&#34\uff1bSquare&#34\uff1b\uff1bside Length\uff1aNumber\uff1b}\u58f0\u660elet x\uff1aCircle\uff1b\u58f0\u660elet y\uff1aSquare\uff1blet z=smushObjects(x\uff0cy)\uff1bconsole\u3002log(z.\u3002\u79cd\u7c7b)\uff1b\n\u8fd9\u6bb5\u4ee3\u7801\u6709\u70b9\u5947\u602a\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u65e0\u6cd5\u521b\u5efaCircle\u548cSquare\u7684\u4ea4\u96c6-\u5b83\u4eec\u6709\u4e24\u4e2a\u4e0d\u517c\u5bb9\u7684\u79cd\u7c7b\u5b57\u6bb5\u3002\u5728\u4ee5\u524d\u7248\u672c\u7684TypeScript\u4e2d\uff0c\u6b64\u4ee3\u7801\u662f\u5141\u8bb8\u7684\uff0c\u5e76\u4e14\u79cd\u7c7b\u672c\u8eab\u7684\u7c7b\u578b\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5141\u8bb8\uff0c\u56e0\u4e3a&#34\uff1bCircle&34\uff1b&amp\uff1bSquare&34\uff1b\u63cf\u8ff0\u4e86\u4e00\u7ec4\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\u503c\u3002\n\u5728TypeScript3.9\u4e2d\uff0c\u8fd9\u91cc\u7684\u7c7b\u578b\u7cfb\u7edf\u66f4\u4e3a\u6fc0\u8fdb-\u5b83\u6ce8\u610f\u5230\u7531\u4e8eCircle\u548cSquare\u7684\u79cd\u7c7b\u5c5e\u6027\uff0c\u5b83\u4eec\u4e0d\u53ef\u80fd\u76f8\u4ea4\u3002\u56e0\u6b64\uff0c\u5b83\u4e0d\u662f\u5c06z.Kind\u7c7b\u578b\u6298\u53e0\u4e3aNever\uff0c\u800c\u662f\u5c06z\u7c7b\u578b\u672c\u8eab(Circle&Amp\uff1bSquare)\u6298\u53e0\u4e3aNever\u3002\u8fd9\u610f\u5473\u7740\u4e0a\u9762\u7684\u4ee3\u7801\u73b0\u5728\u9519\u8bef\u4e3a\uff1a\n\u6211\u4eec\u89c2\u5bdf\u5230\u7684\u5927\u591a\u6570\u4e2d\u65ad\u4f3c\u4e4e\u4e0e\u7a0d\u5fae\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u58f0\u660e\u76f8\u5bf9\u5e94\u3002\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u89c1\u539f\u59cb\u62c9\u6d41\u8bf7\u6c42\u3002\n\u5728\u65e7\u7248\u672c\u7684TypeScript\u4e2d\uff0c\u7c7b\u4e2d\u7684get\u548cset\u8bbf\u95ee\u5668\u662f\u4ee5\u4f7f\u5176\u53ef\u679a\u4e3e\u7684\u65b9\u5f0f\u53d1\u51fa\u7684\uff1b\u7136\u800c\uff0c\u8fd9\u4e0d\u7b26\u5408ECMAScript\u89c4\u8303\uff0c\u8be5\u89c4\u8303\u89c4\u5b9a\u5b83\u4eec\u5fc5\u987b\u662f\u4e0d\u53ef\u679a\u4e3e\u7684\u3002\u56e0\u6b64\uff0c\u9488\u5bf9ES5\u548cES2015\u7684TypeScript\u4ee3\u7801\u7684\u884c\u4e3a\u53ef\u80fd\u4e0d\u540c\u3002\n\u591a\u4e8f\u4e86GitHub\u7528\u6237\u8def\u5f84\u7684\u62c9\u53d6\u8bf7\u6c42\uff0cTypeScript3.9\u73b0\u5728\u5728\u8fd9\u65b9\u9762\u4e0eECMAScript\u66f4\u52a0\u4e00\u81f4\u3002\n\u5728\u65e9\u671f\u7248\u672c\u7684TypeScript\u4e2d\uff0c\u7ea6\u675f\u4e3aANY\u7684\u7c7b\u578b\u53c2\u6570\u53ef\u4ee5\u88ab\u89c6\u4e3aANY\u3002\n\u8fd9\u662f\u4e00\u4e2a\u758f\u5ffd\uff0c\u6240\u4ee5TypeScript3.9\u91c7\u53d6\u4e86\u4e00\u79cd\u66f4\u4fdd\u5b88\u7684\u65b9\u6cd5\uff0c\u5e76\u5bf9\u8fd9\u4e9b\u6709\u95ee\u9898\u7684\u64cd\u4f5c\u53d1\u51fa\u4e86\u4e00\u4e2a\u9519\u8bef\u3002\n\u51fd\u6570foo&lt\uff1bT\u6269\u5c55\u4efb\u4f55&gt\uff1b(arg\uff1at){arg.\u3002\u7c7b\u578b&#39\uff1bT&#39\uff1b\u4e0a\u4e0d\u5b58\u5728spfjgerijghoed\uff1b//~//\u5c5e\u6027&#39\uff1bspfjgerijghoed&#39\uff1b\u3002}\u3002\n\u5728\u4ee5\u524d\u7684\u6253\u5b57\u811a\u672c\u7248\u672c\u4e2d\uff0c\u5982\u679cfoo\u6ca1\u6709\u5bfc\u51fa\u4efb\u4f55\u503c\uff0c\u90a3\u4e48\u50cfexport*from&#34\uff1bfoo&34\uff1b\u8fd9\u6837\u7684\u58f0\u660e\u5c31\u4f1a\u88ab\u5220\u9664\u5230\u6211\u4eec\u7684JavaScript\u8f93\u51fa\u4e2d\u3002\u8fd9\u79cd\u53d1\u5c04\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u7c7b\u578b\u5b9a\u5411\u7684\uff0c\u4e0d\u80fd\u88abBabel\u6a21\u4eff\u3002TypeScript 3.9\u5c06\u59cb\u7ec8\u53d1\u51fa\u8fd9\u4e9b\u5bfc\u51fa*\u58f0\u660e\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u9884\u8ba1\u8fd9\u4e0d\u4f1a\u7834\u574f\u592a\u591a\u73b0\u6709\u4ee3\u7801\uff0c\u4f46\u662f\u7ed1\u5b9a\u5668\u53ef\u80fd\u66f4\u96be\u6447\u52a8\u4ee3\u7801\u3002\n\u5f53\u9762\u5411\u6a21\u5757\u7cfb\u7edf(\u5982ES5\u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u7684CommonJS)\u65f6\uff0cTypeScript\u5c06\u4f7f\u7528GET\u8bbf\u95ee\u5668\u6765\u6a21\u62df\u6d3b\u52a8\u7ed1\u5b9a\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u5bfc\u51fa\u6a21\u5757\u4e2d\u90fd\u80fd\u770b\u5230\u5bf9\u4e00\u4e2a\u6a21\u5757\u4e2d\u53d8\u91cf\u7684\u66f4\u6539\u3002\u6b64\u66f4\u6539\u65e8\u5728\u4f7fTypeScript\u7684\u53d1\u51fa\u66f4\u7b26\u5408ECMAScript\u6a21\u5757\u3002\nTypeScript\u73b0\u5728\u5c06\u5728ES5\u548c\u66f4\u9ad8\u7248\u672c\u4e2d\u9488\u5bf9\u6a21\u5757\u7cfb\u7edf(\u5982CommonJS)\u65f6\u5c06\u5bfc\u51fa\u7684\u58f0\u660e\u63d0\u5347\u5230\u6587\u4ef6\u9876\u90e8\u3002\u6b64\u66f4\u6539\u65e8\u5728\u4f7fTypeScript\u7684\u53d1\u51fa\u66f4\u7b26\u5408ECMAScript\u6a21\u5757\u3002\u4f8b\u5982\uff0c\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002\n\u4f46\u662f\uff0c\u7531\u4e8e\u5bfc\u51fa\u73b0\u5728\u4f7f\u7528Get-Accessors\uff0c\u6b64\u8d4b\u503c\u5c06\u629b\u51fa\uff0c\u56e0\u4e3a__exportStar\u73b0\u5728\u751f\u6210\u4e0d\u80fd\u7528\u7b80\u5355\u8d4b\u503c\u8986\u76d6\u7684Get-Accessors\u3002\u76f8\u53cd\uff0cTypeScript 3.9\u53d1\u51fa\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u6211\u4eec\u5e0c\u671bTypeScript3.9\u80fd\u8ba9\u60a8\u7684\u65e5\u5e38\u7f16\u7801\u53d8\u5f97\u6709\u8da3\u3001\u5feb\u901f\uff0c\u5e76\u4e14\u603b\u4f53\u6765\u8bf4\u662f\u4e00\u79cd\u4f7f\u7528\u7684\u4e50\u8da3\u3002\u8981\u4e86\u89e3\u6211\u4eec\u7684\u4e0b\u4e00\u4e2a\u7248\u672c\uff0c\u60a8\u53ef\u4ee5\u8ddf\u8e2a4.0\u8fed\u4ee3\u8ba1\u5212\u548c\u6211\u4eec\u7684\u7279\u6027\u8def\u7ebf\u56fe\u3002", "note_en": "If you\u2019re unfamiliar with TypeScript, it\u2019s a language that builds on JavaScript by adding syntax for type declarations and annotations. This syntax can be used by the TypeScript compiler to type-check our code, and then output clean readable JavaScript that runs on lots of different runtimes. Static type-checking can tell us about errors in our code before we even run it, or before we even save our files thanks to TypeScript\u2019s rich editing functionality across editors. But beyond error-checking, TypeScript powers things like completions, quick fixes, and refactorings for both TypeScript  and JavaScript in some of your favorite editors. In fact, if you already use Visual Studio or Visual Studio Code, you might already be using TypeScript when you write JavaScript code! So if you\u2019re interested in learning more,  check out our website!\n But if you\u2019re already using TypeScript in your project, you can either get it  through NuGet or use npm with the following command:\n    For this release our team been has been focusing on performance, polish, and stability. We\u2019ve been working on speeding up the compiler and editing experience, getting rid of friction and papercuts, and reducing bugs and crashes. We\u2019ve also received a number of useful and much-appreciated features and fixes from the external community!\n   Recent versions of TypeScript (around 3.7) have had updates to the declarations of functions like  Promise.all and  Promise.race. Unfortunately, that introduced a few regressions, especially when mixing in values with  null or  undefined.\n interface  Lion  {  roar ( ):   void } interface  Seal  {  singKissFromARose ( ):   void } async  function  visitZoo ( lionExhibit:  Promise &lt; Lion &gt; ,  sealExhibit:  Promise &lt; Seal |  undefined &gt; )  {  let  [ lion ,  seal ]  =  await  Promise . all ( [ lionExhibit ,  sealExhibit ] ) ;  lion . roar ( ) ;  // uh oh // ~~~~ // Object is possibly &#39;undefined&#39;. }\n This is strange behavior! The fact that  sealExhibit contained an  undefined somehow poisoned type of  lion to include  undefined.\n Thanks to  a pull request from  Jack Bates, this has been fixed with improvements in our inference process in TypeScript 3.9. The above no longer errors. If you\u2019ve been stuck on older versions of TypeScript due to issues around  Promises, we encourage you to give 3.9 a shot!\n  If you\u2019ve been following our issue tracker and design meeting notes, you might be aware of some work around  a new type operator called  awaited. This goal of this type operator is to accurately model the way that  Promise unwrapping works in JavaScript.\n We initially anticipated shipping  awaited in TypeScript 3.9, but as we\u2019ve run early TypeScript builds with existing codebases, we\u2019ve realized that the feature needs more design work before we can roll it out to everyone smoothly. As a result, we\u2019ve decided to pull the feature out of our main branch until we feel more confident. We\u2019ll be experimenting more with the feature, but we won\u2019t be shipping it as part of this release.\n  TypeScript 3.9 ships with many new speed improvements. Our team has been focusing on performance after observing extremely poor editing/compilation speed with packages like material-ui and styled-components. We\u2019ve dived deep here, with a series of different pull requests that optimize certain pathological cases involving large unions, intersections, conditional types, and mapped types.\n  Each of these pull requests gains about a 5-10% reduction in compile times on certain codebases. In total, we believe we\u2019ve achieved around a 25% reduction the   material-ui-styles project\u2019s compile time. Furthermore, we\u2019ve gotten feedback from teams at Microsoft that  TypeScript 3.9 has reduced their compile time from 26 seconds to around 10 seconds.\n We also have some changes to file renaming functionality in editor scenarios. We heard from the Visual Studio Code team that when renaming a file, just figuring out which import statements needed to be updated could take between 5 to 10 seconds. TypeScript 3.9 addresses this issue by  changing the internals of how the compiler and language service caches file lookups.\n While there\u2019s still room for improvement, we hope this work translates to a snappier experience for everyone!\n  Imagine that we\u2019re writing a library in TypeScript and we\u2019re exporting some function called  doStuff as part of our public API. The function\u2019s types declare that it takes two  strings so that other TypeScript users can get type-checking errors, but it also does a runtime check (maybe only in development builds) to give JavaScript users a helpful error.\n function  doStuff ( abc:  string ,  xyz:  string )  {  assert ( typeof  abc  ===  &#34;string&#34; ) ;  assert ( typeof  xyz  ===  &#34;string&#34; ) ;  // do some stuff }\n So TypeScript users will get a helpful red squiggle and an error message when they misuse this function, and JavaScript users will get an assertion error. We\u2019d like to test this behavior, so we\u2019ll write a unit test.\n    That\u2019s why TypeScript 3.9 brings a new feature:  // @ts-expect-error comments. When a line is prefixed with a  // @ts-expect-error comment, TypeScript will suppress that error from being reported; but if there\u2019s no error, TypeScript will report that  // @ts-expect-error wasn\u2019t necessary.\n       We\u2019d like to extend a big thanks to  Josh Goldberg, the contributor who implemented this feature. For more information, you can take a look at  the  ts-expect-error pull request.\n  In some ways  // @ts-expect-error can act as a suppression comment, similar to  // @ts-ignore. The difference is that  // @ts-ignore will do nothing if the following line is error-free.\n You might be tempted to switch existing  // @ts-ignore comments over to  // @ts-expect-error, and you might be wondering which is appropriate for future code. While it\u2019s entirely up to you and your team, we have some ideas of which to pick in certain situations.\n  you\u2019re writing test code where you actually want the type system to error on an operation\n you expect a fix to be coming in fairly quickly and you just need a quick workaround\n you\u2019re in a reasonably-sized project with a proactive team that wants to remove suppression comments as soon affected code is valid again\n  you have an a larger project and and new errors have appeared in code with no clear owner\n you are in the middle of an upgrade between two different versions of TypeScript, and a line of code errors in one version but not another.\n you honestly don\u2019t have the time to decide which of these options is better.\n  In TypeScript 3.7 we introduced  uncalled function checks to report an error when you\u2019ve forgotten to call a function.\n function  hasImportantPermissions ( ):  boolean  {  // ... } // Oops! if  ( hasImportantPermissions )  { // ~~~~~~~~~~~~~~~~~~~~~~~ // This condition will always return true since the function is always defined. // Did you mean to call it instead?  deleteAllTheImportantFiles ( ) ; }\n However, this error only applied to conditions in  if statements. Thanks to  a pull request from  Alexander Tarasyuk, this feature is also now supported in ternary conditionals (i.e. the  cond ? trueExpr : falseExpr syntax).\n declare  function  listFilesOfDirectory ( dirPath:  string ):  string [ ] ; declare  function  isDirectory ( ):  boolean ; function  getAllFiles ( startFileName:  string )  {  const  result:  string [ ]  =  [ ] ;  traverse ( startFileName ) ;  return  result ;  function  traverse ( currentPath:  string )  {  return  isDirectory ?  // ~~~~~~~~~~~  // This condition will always return true  // since the function is always defined.  // Did you mean to call it instead?  listFilesOfDirectory ( currentPath ) . forEach ( traverse ) :  result . push ( currentPath ) ;  } }\n    The TypeScript compiler not only powers the TypeScript editing experience in most major editors, it also powers the JavaScript experience in the Visual Studio family of editors and more. Using new TypeScript/JavaScript functionality in your editor will differ depending on your editor, but\n Visual Studio Code supports  selecting different versions of TypeScript. Alternatively, there\u2019s the  JavaScript/TypeScript Nightly Extension to stay on the bleeding edge (which is typically very stable).\n   In older versions, TypeScript always assumed that regardless of your file, you wanted an ECMAScript-style import like\n  However, not everyone is targeting ECMAScript-style modules when writing JavaScript files. Plenty of users still use CommonJS-style  require(...) imports like so\n  TypeScript now automatically detects the types of imports you\u2019re using to keep your file\u2019s style clean and consistent.\n    TypeScript\u2019s refactorings and quick fixes often didn\u2019t do a great job of preserving newlines. As a really basic example, take the following code.\n const  maxValue  =  100 ; /*start*/ for  ( let  i  =  0 ;  i &lt;=  maxValue ;  i ++ )  {  // First get the squared value.  let  square  =  i **  2 ;  // Now print the squared value.  console . log ( square ) ; } /*end*/\n If we highlighted the range from  /*start*/ to  /*end*/ in our editor to extract to a new function, we\u2019d end up with code like the following.\n const  maxValue  =  100 ; printSquares ( ) ; function  printSquares ( )  {  for  ( let  i  =  0 ;  i &lt;=  maxValue ;  i ++ )  {  // First get the squared value.  let  square  =  i **  2 ;  // Now print the squared value.  console . log ( square ) ;  } }\n  That\u2019s not ideal \u2013 we had a blank line between each statement in our  for loop, but the refactoring got rid of it! TypeScript 3.9 does a little more work to preserve what we write.\n const  maxValue  =  100 ; printSquares ( ) ; function  printSquares ( )  {  for  ( let  i  =  0 ;  i &lt;=  maxValue ;  i ++ )  {  // First get the squared value.  let  square  =  i **  2 ;  // Now print the squared value.  console . log ( square ) ;  } }\n    There are occasions where we might forget to return the value of the last statement in a function, especially when adding curly braces to arrow functions.\n // before let  f1  =  ( )  =&gt;  42 // oops - not the same! let  f2  =  ( )  =&gt;  {  42  }\n Thanks to  a pull request from community member  Wenlu Wang, TypeScript can provide a quick-fix to add missing  return statements, remove curly braces, or add parentheses to arrow function bodies that look suspiciously like object literals.\n   Editors need to figure out which configuration file a file belongs to so that it can apply the appropriate options and figure out which other files are included in the current \u201cproject\u201d. By default, editors powered by TypeScript\u2019s language server do this by walking up each parent directory to find a  tsconfig.json.\n One case where this slightly fell over is when a  tsconfig.json simply existed to reference other  tsconfig.json files.\n // tsconfig.json {  &#34;files&#34;:  [ ] ,  &#34;references&#34;:  [  {  &#34;path&#34;:  &#34;./tsconfig.shared.json&#34;  } ,  {  &#34;path&#34;:  &#34;./tsconfig.frontend.json&#34;  } ,  {  &#34;path&#34;:  &#34;./tsconfig.backend.json&#34;  } ,  ] }\n This file that really does nothing but manage other project files is often called a \u201csolution\u201d in some environments. Here, none of these  tsconfig.*.json files get picked up by the server, but we\u2019d really like the language server to understand that the current  .ts file probably belongs to one of the mentioned projects in this root  tsconfig.json.\n TypeScript 3.9 adds support to editing scenarios for this configuration. For more details, take a look at  the pull request that added this functionality.\n   TypeScript recently implemented the optional chaining operator, but we\u2019ve received user feedback that the behavior of optional chaining ( ?.) with the non-null assertion operator ( !) is extremely counter-intuitive.\n     In the above code the parentheses stop the \u201cshort-circuiting\u201d behavior of optional chaining, so if  foo is  undefined, accessing  baz will cause a runtime error.\n The Babel team who pointed this behavior out, and most users who provided feedback to us, believe that this behavior is wrong. We do too! The thing we heard the most was that the  ! operator should just \u201cdisappear\u201d since the intent was to remove  null and  undefined from the type of  bar.\n    This is a breaking change, but we believe most code was written with the new interpretation in mind. Users who want to revert to the old behavior can add explicit parentheses around the left side of the  ! operator.\n   The JSX Specification forbids the use of the  } and  &gt; characters in text positions. TypeScript and Babel have both decided to enforce this rule to be more comformant. The new way to insert these characters is to use an HTML escape code (e.g.  &lt;div&gt; 2 &amp;gt; 1 &lt;/div&gt;) or insert an expression with a string literal (e.g.  &lt;div&gt; 2 {&#34;&gt;&#34;} 1 &lt;/div&gt;).\n Luckily, thanks to the  pull request enforcing this from  Brad Zacher, you\u2019ll get an error message along the lines of\n Unexpected token. Did you mean `{&#39;&gt;&#39;}` or `&amp;gt;`?Unexpected token. Did you mean `{&#39;}&#39;}` or `&amp;rbrace;`?\n  let  directions  =  &lt; div &gt;Navigate to: Menu Bar  &gt;  Tools  &gt;  Options &lt;/div&gt; // ~ ~ // Unexpected token. Did you mean `{&#39;&gt;&#39;}` or `&amp;gt;`?\n That error message came with a handy quick fix, and thanks to  Alexander Tarasyuk,  you can apply these changes in bulk if you have a lot of errors.\n  Generally, an intersection type like  A &amp; B is assignable to  C if either  A or  B is assignable to  C; however, sometimes that has problems with optional properties. For example, take the following:\n interface  A  {  a:  number ;  // notice this is &#39;number&#39; } interface  B  {  b:  string ; } interface  C  {  a?:  boolean ;  // notice this is &#39;boolean&#39;  b:  string ; } declare  let  x:  A &amp;  B ; declare  let  y:  C ; y  =  x ;\n In previous versions of TypeScript, this was allowed because while  A was totally incompatible with  C,  B  was compatible with  C.\n In TypeScript 3.9, so long as every type in an intersection is a concrete object type, the type system will consider all of the properties at once. As a result, TypeScript will see that the  a property of  A &amp; B is incompatible with that of  C:\n Type &#39;A &amp; B&#39; is not assignable to type &#39;C&#39;. Types of property &#39;a&#39; are incompatible. Type &#39;number&#39; is not assignable to type &#39;boolean | undefined&#39;.\n   There are a few cases where you might end up with types that describe values that just don\u2019t exist. For example\n declare  function  smushObjects &lt; T ,  U &gt; ( x:  T ,  y:  U ):  T &amp;  U ; interface  Circle  {  kind:  &#34;circle&#34; ;  radius:  number ; } interface  Square  {  kind:  &#34;square&#34; ;  sideLength:  number ; } declare  let  x:  Circle ; declare  let  y:  Square ; let  z  =  smushObjects ( x ,  y ) ; console . log ( z . kind ) ;\n This code is slightly weird because there\u2019s really no way to create an intersection of a  Circle and a  Square \u2013 they have two incompatible  kind fields. In previous versions of TypeScript, this code was allowed and the type of  kind itself was  never because  &#34;circle&#34; &amp; &#34;square&#34; described a set of values that could  never exist.\n In TypeScript 3.9, the type system is more aggressive here \u2013 it notices that it\u2019s impossible to intersect  Circle and  Square because of their  kind properties. So instead of collapsing the type of  z.kind to  never, it collapses the type of  z itself ( Circle &amp; Square) to  never. That means the above code now errors with:\n  Most of the breaks we observed seem to correspond with slightly incorrect type declarations. For more details,  see the original pull request.\n  In older versions of TypeScript,  get and  set accessors in classes were emitted in a way that made them enumerable; however, this wasn\u2019t compliant with the ECMAScript specification which states that they must be non-enumerable. As a result, TypeScript code that targeted ES5 and ES2015 could differ in behavior.\n Thanks to  a pull request from GitHub user  pathurs, TypeScript 3.9 now conforms more closely with ECMAScript in this regard.\n  In previous versions of TypeScript, a type parameter constrained to  any could be treated as  any.\n  This was an oversight, so TypeScript 3.9 takes a more conservative approach and issues an error on these questionable operations.\n function  foo &lt; T  extends  any &gt; ( arg:  T )  {  arg . spfjgerijghoied ;  // ~~~~~~~~~~~~~~~  // Property &#39;spfjgerijghoied&#39; does not exist on type &#39;T&#39;. }\n  In previous TypeScript versions, declarations like  export * from &#34;foo&#34; would be dropped in our JavaScript output if  foo didn\u2019t export any values. This sort of emit is problematic because it\u2019s type-directed and can\u2019t be emulated by Babel. TypeScript 3.9 will always emit these  export * declarations. In practice, we don\u2019t expect this to break much existing code, but bundlers may have a harder time tree-shaking the code.\n   When targeting module systems like CommonJS in ES5 and above, TypeScript will use get accessors to emulate live bindings so that changes to a variable in one module are witnessed in any exporting modules. This change is meant to make TypeScript\u2019s emit more compliant with ECMAScript modules.\n   TypeScript now hoists exported declarations to the top of the file when targeting module systems like CommonJS in ES5 and above. This change is meant to make TypeScript\u2019s emit more compliant with ECMAScript modules. For example, code like\n    However, because exports now use  get-accessors, this assignment would throw because  __exportStar now makes get-accesors which can\u2019t be overridden with a simple assignment. Instead, TypeScript 3.9 emits the following:\n    We hope that TypeScript 3.9 makes your day-to-day coding fun, fast, and an overall joy to use. To stay in the loop on our next version, you can track the  4.0 Iteration Plan and our  Feature Roadmap as it comes together.", "posttime": "2020-05-13 21:02:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5ba3\u5e03,announcing,\u7c7b\u578b", "title": "\u5ba3\u5e03\u6253\u5b57\u7a3f3.9", "title_en": "Announcing TypeScript 3.9", "transed": 1, "url": "https://devblogs.microsoft.com/typescript/announcing-typescript-3-9/", "via": "", "real_tags": ["\u5ba3\u5e03", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "0a2fad3f9c1a60150ebd2c950c603866.jpg", "infoid": 1001962, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e8c\uff0c\u6ce2\u97f3\u516c\u53f8(Boeing Co.)\u9996\u5e2d\u6267\u884c\u5b98\u5927\u536b\u00b7\u5361\u5c14\u970d\u6069(David Calhoun)\u5bf9\u822a\u7a7a\u4e1a\u7684\u524d\u666f\u505a\u51fa\u4e86\u53ef\u6015\u7684\u9884\u6d4b\uff0c\u5176\u4e2d\u5305\u62ec\u9884\u6d4b\u672a\u6765\u51e0\u4e2a\u6708\u53ef\u80fd\u4f1a\u51fa\u73b0\u201c\u91cd\u5927\u201d\u7834\u4ea7\uff0c\u822a\u7a7a\u80a1\u906d\u5230\u5e7f\u6cdb\u629b\u552e\u3002\n\u5728\u7f8e\u56fd\u5168\u56fd\u5e7f\u64ad\u516c\u53f8(NBC)\u5468\u4e8c\u65e9\u4e9b\u65f6\u5019\u64ad\u51fa\u7684\u201c\u4eca\u65e5\u201d(Today)\u8282\u76ee\u4e2d\uff0c\u4e3b\u6301\u4eba\u8428\u51e1\u7eb3\u00b7\u683c\u601d\u91cc(Savannah Guthrie)\u95ee\u5361\u5c14\u970d\u6069\uff0c\u4ed6\u662f\u5426\u76f8\u4fe1\uff0c\u5f53\u51a0\u72b6\u75c5\u6bd2\u63f4\u52a9\u3001\u6551\u6d4e\u548c\u7ecf\u6d4e\u5b89\u5168\u6cd5\u6848(CARE)\u4e0b\u7684\u5de5\u8d44\u652f\u6301\u8ba1\u5212\u4e8e9\u6708\u4efd\u7ed3\u675f\u65f6\uff0c\u7f8e\u56fd\u4e00\u5bb6\u4e3b\u8981\u822a\u7a7a\u516c\u53f8\u5c06\u5012\u95ed\u3002\n\u5361\u5c14\u970d\u6069\u8bf4\uff1a\u201c\u6211\u4e0d\u60f3\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u6709\u592a\u591a\u7684\u9884\u89c1\u6027\u3002\u201d\u201c\u4f46\u662f\u7684\uff0c\u6700\u6709\u53ef\u80fd\u7684\u662f\uff0c\u5f539\u6708\u6765\u4e34\u65f6\uff0c\u4f1a\u6709\u4e00\u4e9b\u4e8b\u60c5\u53d1\u751f.\u201d\n\u4ed6\u8bf4\uff0c\u4ed6\u8ba4\u4e3a9\u6708\u4efd\u7684\u822a\u7a7a\u5ba2\u8fd0\u91cf\u6c34\u5e73\u751a\u81f3\u4e0d\u4f1a\u56de\u523025%\uff0c\u5230\u4eca\u5e74\u5e74\u5e95\u53ef\u80fd\u53ea\u4f1a\u63a5\u8fd150%\uff0c\u4e09\u5230\u4e94\u5e74\u5185\u4e0d\u592a\u53ef\u80fd\u6062\u590d\u5230\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u524d\u7684\u6c34\u5e73\u3002\n\u7f8e\u56fdGlobal Jets\u4ea4\u6613\u6240\u4ea4\u6613\u57fa\u91d1Jets\u4e0b\u8dcc4.3%\uff0c\u62a512.68\u7f8e\u5143\uff0c\u6273\u56de\u76d8\u4e2d\u7a0d\u65e9\u6700\u591a1.4%\u7684\u6da8\u5e45\uff0c\u81f34\u67083\u65e5\u4ee5\u6765\u6700\u4f4e\u6536\u76d8\u70b9\u4f4d\uff0c\u5728\u8be5ETF\u768434\u4e2a\u6210\u5206\u80a1\u4e2d\uff0c\u670930\u4e2a\u6210\u5206\u80a1\u4e0b\u8dcc\u3002\n\u5728Jets ETF\u8f83\u4e3a\u6d3b\u8dc3\u7684\u6210\u5206\u80a1\u4e2d\uff0c\u7f8e\u56fd\u822a\u7a7a\u96c6\u56e2(American Airlines Group Inc.)\u7684\u80a1\u7968\u3002AAL\u4e0b\u8dcc4.45%\uff0c\u8fbe\u7f8e\u822a\u7a7a\u63a7\u80a1\u516c\u53f8(Delta Air Lines Holdings Inc.)\u4e0b\u8dcc4.5%\u3002DAL\u4e0b\u8dcc4.45%\uff0c\u8054\u5408\u822a\u7a7a\u63a7\u80a1\u516c\u53f8(United Airlines Holdings Inc.)\u4e0b\u8dcc4.5%\u3002UAL\uff0c-5.04%\uff0c\u4e0b\u6ed15.1%\u3002\n\u5728\u9053\u743c\u65af\u8fd0\u8f93\u5e73\u5747\u6307\u6570(DJT)\u6210\u5206\u80a1\u4e2d\uff0c\u5176\u4ed6\u4e3b\u8981\u822a\u7a7a\u516c\u53f8\u7684\u80a1\u4ef7\u4e0b\u8dcc2.83%\uff0c\u897f\u5357\u822a\u7a7a\u516c\u53f8(Southwest Airlines Co.Luv)\u4e0b\u8dcc3.3%\uff0c\u6377\u84dd\u822a\u7a7a\u516c\u53f8(JetBlue Airways Corp.)\u4e0b\u8dcc5.8%\uff0c\u963f\u62c9\u65af\u52a0\u822a\u7a7a\u96c6\u56e2(Alaska Air Group Inc.)\u4e0b\u8dcc5.8%\u3002ALK\uff0c-5.32%\u56de\u54105.3%\u3002\n\u6b64\u5916\uff0c\u7cbe\u795e\u822a\u7a7a\u516c\u53f8(spirity Airlines Inc.)\u80a1\u4ef7\u4e0b\u8dcc7.26%\uff0c\u590f\u5a01\u5937\u822a\u7a7a\u6bcd\u516c\u53f8\u590f\u5a01\u5937\u63a7\u80a1\u516c\u53f8(Hawaian Holdings Inc.)\u4e0b\u8dcc7.3%\u3002HA\u80a1\u4ef7\u4e0b\u8dcc5.07%\uff0c\u6885\u8428\u822a\u7a7a\u96c6\u56e2(Mesa Air Group Inc.)\u80a1\u4ef7\u4e0b\u8dcc5.1%\u3002\u6885\u8428\u80a1\u6307\u4e0b\u8dcc7.88%\uff0c\u8dcc\u5e45\u4e3a7.9%\u3002\n\u683c\u601d\u91cc\u8fd8\u8be2\u95ee\u4e86\u6ce2\u97f3(Boeing)\u7684BA\uff0c-2.86%Calhoun\u5bf9\u6c83\u4f26\u00b7\u5df4\u83f2\u7279(Warren Buffett)\u6700\u8fd1\u5bf9\u822a\u7a7a\u4e1a\u7684\u8d1f\u9762\u547c\u5401\uff0c\u8fd9\u4f4d\u4ebf\u4e07\u5bcc\u7fc1\u6295\u8d44\u8005\u8868\u793a\uff0c\u4ed6\u51fa\u552e\u4e86\u5728\u7f8e\u56fd\u822a\u7a7a\u3001\u8fbe\u7f8e\u822a\u7a7a(Delta)\u3001\u8054\u5408\u822a\u7a7a(United)\u548c\u897f\u5357\u822a\u7a7a(Southwest)\u7684\u5927\u91cf\u80a1\u4efd\u3002\n\u5361\u5c14\u970d\u6069\u8bf4\uff0c\u867d\u7136\u4ed6\u4e0d\u540c\u610f\u5df4\u83f2\u7279\u7684\u957f\u671f\u89c2\u70b9\uff0c\u4f46\u4ed6\u786e\u5b9e\u540c\u610f\u77ed\u671f\u89c2\u70b9\uff0c\u4f46\u4ed6\u7684\u77ed\u671f\u89c2\u70b9\u5e76\u4e0d\u610f\u5473\u7740\u53ea\u6709\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u3002\n\u5361\u5c14\u970d\u6069\u8bf4\uff1a\u201c\u6211\u8ba4\u4e3a\uff0c\u6211\u4eec\u9700\u8981\u4e09\u5e74\u65f6\u95f4\u624d\u80fd\u6062\u590d\u52302019\u5e74\u521a\u521a\u8fbe\u5230\u7684\u6d41\u91cf\u6c34\u5e73\uff0c\u7136\u540e\u53ef\u80fd\u8fd8\u8981\u518d\u8fc7\u4e24\u5e74\uff0c\u6211\u4eec\u624d\u80fd\u5f00\u59cb\u6062\u590d\u5230\u8fc7\u53bb\u7684\u589e\u957f\u7387\u3002\u201d\n\u4ed6\u5bf9\u5b8c\u5168\u5eb7\u590d\u65f6\u95f4\u7684\u770b\u6cd5\u6bd4\u8bb8\u591a\u4eba\u9884\u671f\u7684\u8981\u957f\u4e00\u70b9\u3002\nCowen\u5206\u6790\u5e08\u6d77\u4f26\u00b7\u8d1d\u514b\u5c14(Helane Becker)\u8868\u793a\uff0c\u5728\u56de\u7b54\u8be5\u516c\u53f8\u65c5\u884c\u8c03\u67e5\u7684\u4eba\u4e2d\uff0c52%\u7684\u4eba\u9884\u8ba1\u8be5\u884c\u4e1a\u5c06\u51fa\u73b0U\u578b\u590d\u82cf\uff0c37%\u7684\u4eba\u9884\u8ba12-3\u5e74\u5185\u6062\u590d\u52302019\u5e74\u7684\u6c34\u5e73\uff0c25%\u7684\u4eba\u9884\u8ba13-4\u5e74\u5185\u5168\u9762\u590d\u82cf\uff0c\u53ea\u670912%\u7684\u4eba\u9884\u8ba14\u5e74\u591a\u540e\u4f1a\u590d\u82cf\u3002\n\u897f\u5357\u822a\u7a7a\u9996\u5e2d\u6267\u884c\u5b98\u52a0\u91cc\u00b7\u51ef\u5229(Gary Kelly)\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u66fe\u8868\u793a\uff0c\u4ed6\u8ba4\u4e3a4\u6708\u4efd\u89e6\u5e95\uff0c\u6377\u84dd\u822a\u7a7a\u9996\u5e2d\u8fd0\u8425\u5b98\u4e54\u5b89\u59ae\u00b7\u6770\u62c9\u8482(Joanne Geraghty)\u4e0a\u5468\u4e5f\u8868\u8fbe\u4e86\u540c\u6837\u7684\u89c2\u70b9\u3002\n\u6ce2\u97f3\u516c\u53f8(Boeing)\u7684\u80a1\u7968\u4eca\u5e74\u906d\u53d7\u91cd\u521b\uff0c\u56e0\u4e3a\u8fd9\u5bb6\u98de\u673a\u5236\u9020\u5546\u5728\u4e8b\u6545\u53d1\u751f\u540e\uff0c\u5176737 Max\u98de\u673a\u957f\u65f6\u95f4\u505c\u98de\uff0c\u4ee5\u53ca\u906d\u53d7\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u7684\u822a\u7a7a\u516c\u53f8\u5bf9\u98de\u673a\u9700\u6c42\u7684\u51cf\u5c11\uff0c\u7ed9\u8fd9\u5bb6\u98de\u673a\u5236\u9020\u5546\u5e26\u6765\u4e86\u53cc\u91cd\u9ebb\u70e6\u3002\u8be5\u516c\u53f8\u6700\u8fd1\u8868\u793a\uff0c\u8ba1\u5212\u4eca\u5e74\u6062\u590d737 Max\u98de\u673a\u7684\u4f4e\u901f\u751f\u4ea7\uff0c\u5e76\u9010\u6b65\u63d0\u9ad8\u751f\u4ea7\u7387\u3002\u9605\u8bfb\u6709\u5173\u6ce2\u97f3\u7b2c\u4e00\u5b63\u5ea6\u4e1a\u7ee9\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\u4eca\u5e74\u5230\u76ee\u524d\u4e3a\u6b62\uff0cJets ETF\u5df2\u7ecf\u66b4\u8dcc\u4e8659.8%\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6ce2\u97f3\u80a1\u4ef7\u66b4\u8dcc61.6%\uff0c\u9053\u743c\u65af\u8fd0\u8f93\u6307\u6570\u66b4\u8dcc26.6%\uff0c\u9053\u743c\u65af\u5de5\u4e1a\u5e73\u5747\u6307\u6570DJIA\uff0c-1.88%\u4e0b\u8dcc16.7%\u3002", "note_en": "Airline stocks suffered a broad selloff Tuesday after Boeing Co. Chief Executive David Calhoun provided a dire outlook for the industry which included a prediction that a \u201cmajor\u201d bankruptcy was likely in the next several months.\n  In an  interview aired on NBC\u2019s \u201cToday\u201d show early Tuesday, host Savannah Guthrie asked Calhoun if he believed  a major U.S. carrier will go out of business when the payroll support program under the  Coronavirus Aid, Relief and Economic Security (CARES) Act ends in September.\n  \u201cI don\u2019t want to get too predictive on that subject,\u201d Calhoun said. \u201cBut yes, most likely, something will happen when September comes around.\u201d\n  He said he believed airline traffic levels won\u2019t be back to even 25% in September, and \u201cmaybe\u201d only approach 50% by the end of the year, with a return to pre-COVID-19-pandemic levels not likely for three to five years.\n    The U.S. Global Jets exchange-traded fund  JETS,  -4.30% tumbled 4.3% to $12.68,  reversing a gain of as much as 1.4% earlier in the session, to the lowest close since April 3. Of the ETF\u2019s 34 components, 30 lost ground.\n  Among the Jets ETF\u2019s more-active components, shares of American Airlines Group Inc.  AAL,  -4.45% sank 4.5%, Delta Air Lines Holdings Inc.  DAL,  -4.45% declined 4.5% and United Airlines Holdings Inc.  UAL,  -5.04% slid 5.1%.\n  Among shares of other major carriers, as defined by those that are components of the Dow Jones Transportation Average  DJT,  -2.83% , Southwest Airlines Co.  LUV,  -3.25% fell 3.3%, JetBlue Airways Corp.  JBLU,  -5.84% lost 5.8% and Alaska Air Group Inc.  ALK,  -5.32% gave up 5.3%.\n  Elsewhere, Spirit Airlines Inc.\u2019s stock  SAVE,  -7.26% was knocked 7.3% lower, Hawaiian Airlines parent Hawaiian Holdings Inc. shares  HA,  -5.07% gave up 5.1% and Mesa Air Group Inc. stock  MESA,  -7.88% was down 7.9%.\n    Guthrie also asked Boeing\u2019s  BA,  -2.86% Calhoun what he thought of Warren Buffett\u2019s recent negative call on the airline industry in which the billionaire investor said he sold off his large stakes in American, Delta, United and Southwest.\n      Calhoun said that while he doesn\u2019t share Buffett\u2019s longer-term view, he does share the short-term view, but his short-term doesn\u2019t mean just a few months.\n  \u201cI believe it\u2019s three years before we return to the traffic levels that we had just in 2019, and then probably another two before we begin to return to the growth rates that we used to have,\u201d Calhoun said.\n  His view of time to full recovery was a little longer than many are expecting.\n  Cowen analyst Helane Becker said of those responding to the firm\u2019s travel survey, 52% expect a U-shaped recovery for the industry, with 37% expecting a return to 2019 levels in 2-to-3 years, 25% expecting a full recovery in 3-to-4 years and just 12% expecting a recovery in more than 4 years.\n  Southwest CEO Gary Kelly had said earlier this month that  he believed the bottom was hit in April, a sentiment echoed last week by JetBlue Chief Operating Officer Joanne Geraghty.\n    Boeing stock taken a beating this year, as the airplane maker has suffered a double-dose of trouble from an extended grounding of its 737 MAX planes after accidents and reduced plane demand from airlines suffering through the COVID-19 pandemic. The company has recently said it plans to resume production this year of the 737 MAX planes at a low rate, and gradually increase the production rate.  Read more about Boeing\u2019s first-quarter results.\n  The Jets ETF has plunged 59.8% year to date. In comparison, Boeing shares have plummeted 61.6%, the Dow transports has tumbled 26.6% and the Dow Jones Industrial Average  DJIA,  -1.88% has shed 16.7%.", "posttime": "2020-05-13 19:17:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9996\u5e2d,ceo,\u822a\u7a7a", "title": "\u6ce2\u97f3\u9996\u5e2d\u6267\u884c\u5b98\u8b66\u544a\u884c\u4e1a\u53ef\u80fd\u7834\u4ea7", "title_en": "Boeing CEO warns of possible industry bankruptcy", "transed": 1, "url": "https://www.marketwatch.com/story/guid/0B2733B6-946D-11EA-91ED-88BEE36E663F", "via": "", "real_tags": ["\u9996\u5e2d", "ceo", "\u822a\u7a7a"]}, {"category": "", "categoryclass": "", "imagename": "3cd67f8c773c5df13d60d9d2e7f8918c.png", "infoid": 1001961, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u7684\u610f\u601d\u662f\u4e0e\u4e0a\u4e00\u7bc7KVM\u6587\u7ae0\u76f8\u5bf9\u5e94\uff0c\u4f46\u5b83\u662f\u5173\u4e8e\u5bb9\u5668\u7684\u3002\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u901a\u8fc7\u5728\u6211\u4eec\u81ea\u5df1\u7684\u5c0f\u578b\u5bb9\u5668\u8fd0\u884c\u5668\u4e2d\u8fd0\u884cBusybox Docker\u6620\u50cf\u6765\u663e\u793a\u5bb9\u5668\u7684\u786e\u5207\u5de5\u4f5c\u65b9\u5f0f\u3002\n\u4e0eVM\u4e0d\u540c\uff0c\u5bb9\u5668\u662f\u4e00\u4e2a\u975e\u5e38\u6a21\u7cca\u7684\u672f\u8bed\u3002\u901a\u5e38\uff0c\u6211\u4eec\u5c06\u5bb9\u5668\u79f0\u4e3a\u72ec\u7acb\u7684\u4ee3\u7801\u5305\u53ca\u5176\u4f9d\u8d56\u9879\uff0c\u5b83\u4eec\u53ef\u4ee5\u4e00\u8d77\u53d1\u5e03\uff0c\u5e76\u5728\u67d0\u4e2a\u4e3b\u673a\u64cd\u4f5c\u7cfb\u7edf\u5185\u7684\u9694\u79bb\u73af\u5883\u4e2d\u8fd0\u884c\u3002\u5982\u679c\u5b83\u542c\u8d77\u6765\u4ecd\u7136\u7c7b\u4f3c\u4e8eVM\uff0c\u90a3\u4e48\u8ba9\u6211\u4eec\u6df1\u5165\u7814\u7a76\u4e00\u4e0b\uff0c\u770b\u770b\u5bb9\u5668\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\n\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u6807\u662f\u8fd0\u884c\u4e00\u4e2a\u666e\u901a\u7684Busybox Docker\u6620\u50cf\uff0c\u4f46\u6ca1\u6709docker\u3002Docker\u4f7f\u7528btrfs\u4f5c\u4e3a\u5176\u6620\u50cf\u7684\u6587\u4ef6\u7cfb\u7edf\u683c\u5f0f\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\u62c9\u53d6\u56fe\u50cf\u5e76\u5c06\u5176\u89e3\u538b\u5230\u4e00\u4e2a\u76ee\u5f55\u4e2d\uff1a\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06busybox\u6620\u50cf\u6587\u4ef6\u7cfb\u7edf\u89e3\u538b\u5230rootfs\u6587\u4ef6\u5939\u4e2d\u3002\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c./rootfs/bin/sh\u5e76\u83b7\u5f97\u4e00\u4e2a\u5de5\u4f5c\u7684shell\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u67e5\u770b\u90a3\u91cc\u7684\u8fdb\u7a0b\u3001\u6587\u4ef6\u6216\u7f51\u7edc\u63a5\u53e3\u7684\u5217\u8868\uff0c\u6211\u4eec\u5c06\u770b\u5230\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u63a7\u5236\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u770b\u5230\u7684\u5185\u5bb9\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528\u514b\u9686(2)\u800c\u4e0d\u662f\u5206\u53c9(2)\u3002Clone\u7684\u529f\u80fd\u5927\u81f4\u76f8\u540c\uff0c\u4f46\u5141\u8bb8\u60a8\u4f20\u9012\u6807\u5fd7\uff0c\u5b9a\u4e49\u60a8\u60f3\u8981\u5171\u4eab\u7684\u8d44\u6e90\u3002\n\u5728\u6211\u4eec\u7684\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u9694\u79bb\u8fdb\u7a0b\u3001IPC\u3001\u7f51\u7edc\u548c\u6587\u4ef6\u7cfb\u7edf\uff0c\u56e0\u6b64\u6211\u4eec\u5f00\u59cb\uff1a\n\u9759\u6001\u5b57\u7b26CHILD_STACK[1024*1024]\uff1bINT CHILD_MAIN(void*arg){printf(&#34\uff1bHello from Child\uff01PID=%d\\n&#34\uff1b\uff0cgetPID()\uff1breturn 0\uff1b}int main(int argc\uff0cchar*argv[]){int flag=CLONE_NENS|CLONE_NEWUTS|CLONE_NEWPID|CLONE_NEWIPC|CLONE_NENet\uff1bINT PID=CLONE(CHILD_Main\uff0cCHILD_STACK+sizeof(CHILD_STACK)\uff0cFLAGS|SIGCHLD\uff0cargv+1)\uff1bif(PID&lt\uff1b0){fprintf\u3002}waitpid(PID\uff0cNULL\uff0c0)\uff1b\u8fd4\u56de0\uff1b}\u3002\n\u8fd9\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5df2\u7ecf\u5f88\u6709\u8da3\u7684\u7ed3\u679c\uff1a\u5b50\u8fdb\u7a0bPID\u662f1\u3002\u6211\u4eec\u90fd\u77e5\u9053PID 1\u901a\u5e38\u662finit\uff0c\u4f46\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u5b50\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684\u72ec\u7acb\u8fdb\u7a0b\u5217\u8868\uff0c\u5176\u4e2d\u5b83\u5df2\u6210\u4e3a\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u3002\n\u4e3a\u4e86\u66f4\u5bb9\u6613\u5730\u719f\u6089\u65b0\u73af\u5883\uff0c\u8ba9\u6211\u4eec\u5728\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u4e00\u4e2ashell\u3002\u5b9e\u9645\u4e0a\uff0c\u8ba9\u6211\u4eec\u8fd0\u884c\u4efb\u610f\u547d\u4ee4\uff0c\u5f88\u50cfdocker run\uff1a\n\u73b0\u5728\uff0c\u4f7f\u7528\u201c/bin/sh\u201d\u53c2\u6570\u8fd0\u884c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u6253\u5f00\u4e00\u4e2a\u771f\u6b63\u7684shell\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4e2d\u952e\u5165\u547d\u4ee4\u3002\u8fd9\u8868\u660e\u6211\u4eec\u5173\u4e8e\u5b64\u7acb\u7684\u770b\u6cd5\u662f\u591a\u4e48\u9519\u8bef\uff1a\n#ECHO$$1#ps PID TTY\u65f6\u95f4CMD 5998\u5206/31 00\uff1a00\uff1a00\uff1a00 sudo 5999\u5206/31 00\uff1a00\uff1a00\uff1a00 Main 6001\u5206/31 00\uff1a00\uff1a00 sh 6004\u5206/31 00\uff1a00\uff1a00\uff1a00 ps\u3002\n\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0cshell\u8fdb\u7a0b\u672c\u8eab\u7684PID\u4e3a1\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4ece\u4e3b\u673a\u64cd\u4f5c\u7cfb\u7edf\u67e5\u770b\u548c\u8bbf\u95ee\u6240\u6709\u5176\u4ed6\u8fdb\u7a0b\u3002\u539f\u56e0\u662f\u8fdb\u7a0b\u5217\u8868\u662f\u4eceprocfs\u8bfb\u53d6\u7684\uff0c\u5b83\u4ecd\u7136\u662f\u7ee7\u627f\u7684\u3002\n\u73b0\u5728\uff0c\u8fd0\u884cshell\u4f1a\u4e2d\u65adps\u3001mount\u548c\u5176\u4ed6\u547d\u4ee4\uff0c\u56e0\u4e3a\u6ca1\u6709\u6302\u8f7dprocfs\u3002\u8fd8\u662f\u6bd4\u6cc4\u9732\u7236\u6bcd\u7684\u901a\u884c\u8bc1\u8981\u597d\u3002\n\u5728\u8fc7\u53bb\uff0cchroot\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u4f8b\u6765\u8bf4\u662f\u4e00\u4e2a\u201c\u8db3\u591f\u597d\u201d\u7684\u9694\u79bb\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6539\u7528PIVOT_ROOT\u3002\u6b64\u7cfb\u7edf\u8c03\u7528\u5c06\u73b0\u6709\u7684rootfs\u79fb\u5230\u67d0\u4e2a\u5b50\u76ee\u5f55\u4e2d\uff0c\u5e76\u4f7f\u53e6\u4e00\u4e2a\u76ee\u5f55\u6210\u4e3a\u65b0\u7684\u6839\u76ee\u5f55\uff1a\nint Child_main(void*arg){/*unmount procfs*/umount2(&#34\uff1b/proc&#34\uff1b\uff0cmnt_disach)\uff1b/*\u900f\u89c6\u6839*/mount(&#34\uff1b./rootfs&#34\uff1b\uff0c&#34\uff1b./rootfs&#34\uff1b\uff0c&#34\uff1b\uff1bbind&#34\uff1b\uff0cMS_bind|MS_REC\uff0c&#34\uff1b)\uff1bmkdir(&#34\uff1b\u3002./rootfs&#34\uff1b\uff0c&#34\uff1b./rootfs/oldrootfs&#34\uff1b)\uff1bchdir(&#34\uff1b/&#34\uff1b)\uff1bumount2(&#34\uff1b/oldrootfs&#34\uff1b\uff0cmnt_disach)\uff1brmdir(&#34\uff1b/oldrootfs&#34\uff1b)\uff1b/*\u91cd\u65b0\u6302\u8f7dprocfs*/mount(&#34\uff1bproc&#34\uff1b\uff0c&#34\uff1b/proc\u3002/*\u8fd0\u884c\u8fdb\u7a0b*/char**argv=(char**)arg\uff1bexecvp(argv[0]\uff0cargv)\uff1b\u8fd4\u56de0\uff1b}\u3002\n\u5c06tmpfs\u6302\u8f7d\u5230/tmp\u4e2d\uff0c\u5c06sysfs\u6302\u8f7d\u5230/sys\u4e2d\u5e76\u521b\u5efa\u4e00\u4e2a\u6709\u6548\u7684/dev\u6587\u4ef6\u7cfb\u7edf\u662f\u6709\u610f\u4e49\u7684\uff0c\u4f46\u4e3a\u4e86\u7b80\u77ed\u8d77\u89c1\uff0c\u6211\u5c06\u8df3\u8fc7\u5b83\u3002\n\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u770b\u5230busybox\u56fe\u50cfrootfs\u4e2d\u7684\u6587\u4ef6\uff0c\u5c31\u597d\u50cf\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4e86chroot\uff1a\n/#lsbin dev etc home proc root sys tmp usr var/#mount/dev/sda2 on/type ext4(rw\uff0crelatime\uff0cdata=order)proc on/proc type proc(rw\uff0crelatime)/#psPID\u7528\u6237\u65f6\u95f4\u547d\u4ee41 root 0\uff1a00/bin/sh 4 root 0\uff1a00 ps/#ps axPID\u7528\u6237\u65f6\u95f4\u547d\u4ee41 root 0\uff1a00/bin/sh 5 root 0\uff1a00 ps ax\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u5b83\u770b\u8d77\u6765\u6216\u591a\u6216\u5c11\u662f\u5b64\u7acb\u7684\uff0c\u4e5f\u8bb8\u592a\u5b64\u7acb\u4e86-\u6211\u4eec\u65e0\u6cd5ping\u901a\u4efb\u4f55\u4e1c\u897f\uff0c\u7f51\u7edc\u4f3c\u4e4e\u6839\u672c\u65e0\u6cd5\u5de5\u4f5c\u3002\n\u521b\u5efa\u65b0\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\u53ea\u662f\u4e2a\u5f00\u59cb\u3002\u6211\u4eec\u9700\u8981\u4e3a\u5176\u5206\u914d\u7f51\u7edc\u63a5\u53e3\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u8bbe\u7f6e\u4ee5\u6267\u884c\u6b63\u786e\u7684\u6570\u636e\u5305\u8f6c\u53d1\u3002\n\u5982\u679c\u60a8\u6ca1\u6709br0\u63a5\u53e3\uff0c\u8ba9\u6211\u4eec\u624b\u52a8\u521b\u5efa(brctl\u662fUbuntu\u4e0abridge-utils\u5305\u7684\u4e00\u90e8\u5206)\uff1a\nbrctl addbr br0ip addr add dev br0 172.16.0.100/24ip\u94fe\u8def\u96c6br0 upsudo iptables-A FORWARD-I wlp3s0-o br0-j ACCEPTsudo iptables-A ward-o wlp3s0-I br0-j ACCEPTsudo iptables-t nat-A POSTROUTING-s 172.16.0.0/16-j\u4f2a\u88c5\u3002\n\u5728\u6211\u7684\u4f8b\u5b50\u4e2d\uff0cwlp3s0\u662f\u6211\u7684\u4e3b\u8981WiFi\u7f51\u7edc\u63a5\u53e3\uff0c172.16.x.x\u662f\u5bb9\u5668\u7684\u7f51\u7edc\u3002\n\u6211\u4eec\u7684\u5bb9\u5668\u542f\u52a8\u5668\u5e94\u8be5\u505a\u7684\u662f\u521b\u5efa\u4e00\u5bf9\u5bf9\u7b49\u63a5\u53e3veth0\u548cveth1\uff0c\u5c06\u5b83\u4eec\u94fe\u63a5\u5230br0\uff0c\u5e76\u5728\u5bb9\u5668\u5185\u8bbe\u7f6e\u8def\u7531\u3002\nsystem(&#34\uff1bIP link add veth0 type Veth Peer Name veth1&#34\uff1b)\uff1bsystem(&#34\uff1bIP link set veth0 up&#34\uff1b)\uff1bsystem(&#34\uff1bbrctl add f br0 veth0&#34\uff1b)\uff1b\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u5728\u5bb9\u5668\u5916\u58f3\u4e2d\u8fd0\u884c\u201cip link\u201d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u73af\u56de\u63a5\u53e3\u548c\u4e00\u4e9bveth1@xxxx\u63a5\u53e3\u3002\u4f46\u662f\u7f51\u7edc\u4ecd\u7136\u4e0d\u8d77\u4f5c\u7528\u3002\u8ba9\u6211\u4eec\u5728\u5bb9\u5668\u4e2d\u8bbe\u7f6e\u552f\u4e00\u7684\u4e3b\u673a\u540d\uff0c\u5e76\u914d\u7f6e\u8def\u7531\uff1a\nint Child_main(void*arg){.\u3002sethostname(&#34\uff1bExample&#34\uff1b\uff0c7)\uff1bSystem(&#34\uff1bIP link set veth1 up&#34\uff1b)\uff1bchar IP_addr_add[4096]\uff1bsnprintf(IP_addr_add\uff0csizeof(IP_Addr_Add)\uff0c&#34\uff1bIP addr add 172.16.0.101/24 dev th1&#34\uff1b)\uff1bsystem(Ip_Addr_Add)\uff1bsystem(&#34\uff1broute add default\u3002execvp(argv[0]\uff0cargv)\uff1b\u8fd4\u56de0\uff1b}\u3002\n/#IP link1\uff1aLO\uff1a&lt\uff1bloopback&gt\uff1bmtu 65536 qdisk noop qlen 1 link/loopback 00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a0047\uff1aveth1@if48\uff1a&lt\uff1bBroadcast\uff0cMulticast\uff0cUp\uff0cLow_Up\uff0cM-Down&gt\uff1bMTU 1500 qdisk noqueue qlen 1000\u94fe\u8def/\u4ee5\u592a72\uff1a0A\uff1af0\uff1a91\uff1ad5\uff1a11 brd ff\uff1aff/#hostname\u793a\u4f8b/#ping 1.1.1.1 PING 1.1.1.1(1.1.1.1)\uff1a56\u6570\u636e\u5b57\u82821.1.1.1\uff1aSEQ=0 ttl=57 time=27.161 ms 64\u5b57\u8282from 1.1.1.1\uff1aseq=1 ttl=57 time=26.048 ms 64 bytes from 1.1.1.1\uff1aseq=2 ttl=57 time from 1.1.1.1\uff1aseq=2 ttl=57 time\uff1aseq=1 ttl=57 time=26.048 ms64 byte from 1.1.1.1\uff1aseq=2 ttl=57 time\u3002\n\u5b8c\u6574\u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728https://gist.github.com/zserge/4ce3c1ca837b96d58cc5bdcf8befb80e.\u4e0a\u627e\u5230\u3002\u5982\u679c\u60a8\u53d1\u73b0\u9519\u8bef\u6216\u6709\u4ec0\u4e48\u5efa\u8bae\uff0c\u8bf7\u5728\u6b64\u7559\u8a00\uff01\n\u663e\u7136\uff0cDocker\u505a\u7684\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\u3002\u4f46\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0cLinux\u5185\u6838\u62e5\u6709\u8fd9\u4e48\u591a\u65b9\u4fbf\u7684API\uff0c\u800c\u4e14\u4f7f\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u865a\u62df\u5316\u975e\u5e38\u5bb9\u6613\u3002", "note_en": "This post is meant to be a counterpart to the previous  KVM post, but about containers instead. The idea is to show how exactly containers work by running a busybox Docker image in our own small container runner.\n Unlike a VM, container is very vague term. Normally, we call containers a self-contained bundle of code and its dependencies, that can be shipped together and run in an isolated environment inside some host operating system. If it still sounds similar to a VM, let\u2019s dive deeper and see how containers are implemented.\n  Our end goal would be to run a common busybox Docker image, but without docker. Docker uses btrfs as a filesystem format for its images. Let\u2019s try pulling the image and unpack it into a directory:\n  Now we got busybox image filesystem unpacked into the  rootfs folder. Surely, we can run  ./rootfs/bin/sh and get a working shell, but if we look at the list of the processes there, or files, or network interfaces - we will see that we have access to our whole OS.\n   Since we want to control what a child process can see, we will be using clone(2) instead of fork(2). Clone does pretty much the same, but allows you to pass flags, defining which resources you would want to share.\n   In our experiment we will try to isolate processes, IPC, network and file systems, so here we go:\n static char child_stack[1024 * 1024];int child_main(void *arg) { printf(&#34;Hello from child! PID=%d\\n&#34;, getpid()); return 0;}int main(int argc, char *argv[]) { int flags = CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWPID | CLONE_NEWIPC | CLONE_NEWNET; int pid = clone(child_main, child_stack + sizeof(child_stack), flags | SIGCHLD, argv + 1); if (pid &lt; 0) { fprintf(stderr, &#34;clone failed: %d\\n&#34;, errno); return 1; } waitpid(pid, NULL, 0); return 0;}\n  This gives an already interesting result: child PID is 1. We all know that PID 1 is normally  init, but in this case we see that child process got its own isolated list of processes, where it has become the first process.\n  To easier play around the new environment, let\u2019s run a shell in the child process. Actually, let\u2019s run arbitrary commands, much like  docker run:\n  Now, running our app with \u201c/bin/sh\u201d argument opens a real shell, where we can type commands. This shows how wrong we were about the isolation:\n # echo $$1# ps PID TTY TIME CMD 5998 pts/31 00:00:00 sudo 5999 pts/31 00:00:00 main 6001 pts/31 00:00:00 sh 6004 pts/31 00:00:00 ps\n As we see, the shell process itself has a PID of 1, but actually can see and access all the other processes from the host OS. The reason is that the list of processes is read from procfs, which is still inherited.\n   Now, running the shell breaks ps, mount, and other command, because no procfs is mounted. Still better than leaking the parent\u2019s procfs.\n  In the old days chroot was a \u201cgood enough\u201d isolation for most use cases, but here let\u2019s use a  pivot_root instead. This system call moves and existing rootfs into some subdirectory, and make a another directory a new root:\n int child_main(void *arg) { /* Unmount procfs */ umount2(&#34;/proc&#34;, MNT_DETACH); /* Pivot root */ mount(&#34;./rootfs&#34;, &#34;./rootfs&#34;, &#34;bind&#34;, MS_BIND | MS_REC, &#34;&#34;); mkdir(&#34;./rootfs/oldrootfs&#34;, 0755); syscall(SYS_pivot_root, &#34;./rootfs&#34;, &#34;./rootfs/oldrootfs&#34;); chdir(&#34;/&#34;); umount2(&#34;/oldrootfs&#34;, MNT_DETACH); rmdir(&#34;/oldrootfs&#34;); /* Re-mount procfs */ mount(&#34;proc&#34;, &#34;/proc&#34;, &#34;proc&#34;, 0, NULL); /* Run the process */ char **argv = (char **)arg; execvp(argv[0], argv); return 0;}\n It would make sense to mount tmpfs into /tmp, sysfs into /sys and create a valid /dev filesystem, but to keep things short I\u2019ll skip it.\n Anyway, now we only see the files from busybox image rootfs, as if we chrooted into it:\n / # lsbin dev etc home proc root sys tmp usr var/ # mount/dev/sda2 on / type ext4 (rw,relatime,data=ordered)proc on /proc type proc (rw,relatime)/ # psPID USER TIME COMMAND 1 root 0:00 /bin/sh 4 root 0:00 ps/ # ps axPID USER TIME COMMAND 1 root 0:00 /bin/sh 5 root 0:00 ps ax\n At this point it looks more or less isolated, perhaps, too isolated - we can not ping anything and the network does not seem to work at all.\n  Creating a new network namespace was only the start. We need to assign network interfaces to it and set them up to do proper packet forwarding.\n If you don\u2019t have a br0 interface, let\u2019s create it manually (brctl is part of bridge-utils package on Ubuntu):\n brctl addbr br0ip addr add dev br0 172.16.0.100/24ip link set br0 upsudo iptables -A FORWARD -i wlp3s0 -o br0 -j ACCEPTsudo iptables -A FORWARD -o wlp3s0 -i br0 -j ACCEPTsudo iptables -t nat -A POSTROUTING -s 172.16.0.0/16 -j MASQUERADE\n In my case, wlp3s0 was my primary WiFi network interface and 172.16.x.x was a network for the container.\n What our container launcher should do is to create a pair of peer interfaces, veth0 and veth1, link them to the br0 and set up routing within the container.\n  system(&#34;ip link add veth0 type veth peer name veth1&#34;);system(&#34;ip link set veth0 up&#34;);system(&#34;brctl addif br0 veth0&#34;);\n   Now if we run \u201cip link\u201d in the container shell we will see a loopback interface, and some veth1@xxxx interface. But the network still doesn\u2019t work. Let\u2019s set a unique hostname in the container and configure the routes:\n int child_main(void *arg) { .... sethostname(&#34;example&#34;, 7); system(&#34;ip link set veth1 up&#34;); char ip_addr_add[4096]; snprintf(ip_addr_add, sizeof(ip_addr_add), &#34;ip addr add 172.16.0.101/24 dev veth1&#34;); system(ip_addr_add); system(&#34;route add default gw 172.16.0.100 veth1&#34;); char **argv = (char **)arg; execvp(argv[0], argv); return 0;}\n  / # ip link1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:0047: veth1@if48: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue qlen 1000 link/ether 72:0a:f0:91:d5:11 brd ff:ff:ff:ff:ff:ff/ # hostnameexample/ # ping 1.1.1.1PING 1.1.1.1 (1.1.1.1): 56 data bytes64 bytes from 1.1.1.1: seq=0 ttl=57 time=27.161 ms64 bytes from 1.1.1.1: seq=1 ttl=57 time=26.048 ms64 bytes from 1.1.1.1: seq=2 ttl=57 time=26.980 ms...\n   The full source code is available at  https://gist.github.com/zserge/4ce3c1ca837b96d58cc5bdcf8befb80e. If you found a mistake or got a suggestion - please leave a comment there!\n Obviously, Docker does much more than this. But it\u2019s amazing how many convenient APIs Linux kernel has and easy it is to use them to achieve OS-level virtualization.", "posttime": "2020-05-13 19:02:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,linux,containers,\u5bb9\u5668", "title": "\u51e0\u884c\u4ee3\u7801\u4e2d\u7684Linux\u5bb9\u5668", "title_en": "Linux containers in a few lines of code", "transed": 1, "url": "https://zserge.com/posts/containers/", "via": "", "real_tags": ["\u4ee3\u7801", "linux", "\u5bb9\u5668"]}, {"category": "", "categoryclass": "", "imagename": "088418436f78df1518b98acc4030270a.png", "infoid": 1001960, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5df2\u7ecf\u53cd\u6c47\u7f16\u548c/\u6216\u641c\u7d22BIOS\u548cVGA-ROM\u4e2d\u7684\u5b57\u4f53\uff0c\u5e76\u5c06\u5176\u89e3\u538b\u3002\u6211\u8fd8\u7f16\u5199\u4e86\u4e00\u4e9b\u5de5\u5177\u6765\u652f\u6301\u8fd9\u9879\u5de5\u4f5c\u3002\u6240\u6709\u89e3\u538b\u7684\u5b57\u4f53\u548c\u5c4f\u5e55\u622a\u56fe\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\u6211\u5df2\u7ecf\u7f16\u5199\u4e86\u4e00\u4e2a\u5927\u8868\u6765\u663e\u793a\u6240\u6db5\u76d6\u7684\u5185\u5bb9\u3002\u6211\u4e5f\u770b\u4e86\u4e00\u4e0b\uff0c\u5e76\u5199\u4e86\u5173\u4e8e\u5f00\u6e90BIOS/\u6e90\u4ee3\u7801\u7684\u5b57\u4f53\u3002\n\u5982\u679c\u4f60\u6709\u5947\u7279\u7684ROM\u6216\u8005\u5176\u4ed6\u5f00\u6e90BIOS\u7684\u94fe\u63a5\uff0c\u8bf7\u8ba9\u6211\u77e5\u9053\u3002\u6d4b\u8bd5\u4e00\u4e2aROM\u7684\u5df2\u77e5\u5b57\u4f53\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u8fd9\u4e2a\u5217\u8868\u53ea\u9700\u8981\u51e0\u5206\u949f\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5b57\u4f53\u8fd8\u4e0d\u77e5\u9053\uff0c\u6211\u5f88\u4e50\u610f\u63d0\u53d6\u5e76\u8bb0\u5f55\u5b83\uff1a)\u6211\u771f\u7684\u5bf9\u5177\u6709\u5947\u602a\u7684LCD\u5b57\u4f53\u548c\u5d4c\u5165\u5f0f\u8bbe\u5907(\u5982POS\u7cfb\u7edf\u3001\u6536\u94f6\u673a\u3001\u81ea\u52a8\u53d6\u6b3e\u673a\u7b49)\u7684\u65e7\u7b14\u8bb0\u672c\u7535\u8111\u7684ROM\u611f\u5174\u8da3\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f60\u6709\u672c\u5730\u5316\u7684\u663e\u5361\uff0c\u5b83\u4f1a\u5e26\u6765\u4e00\u4e2a\u672c\u5730\u5b57\u7b26\u96c6(\u4f8b\u5982\u3002\u5e0c\u814a\u8bed)\uff0c\u6211\u5f88\u9ad8\u5174\u63d0\u53d6\u4ed6\u4eec\u7684\u5b57\u4f53\u3002\n\u6211\u5df2\u7ecf\u63d0\u53d6\u4e86240\u591a\u4e2aROM\u5b57\u4f53\u3002\u5f88\u53ef\u80fd\u6211\u4e0d\u4f1a\u4e3a\u6bcf\u79cd\u5b57\u4f53\u66f4\u65b0\u8fd9\u4e2a\u8ba1\u6570\u5668\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4ec0\u4e48\u65b0\u7684\u5185\u5bb9\u4e0e\u60a8\u76f8\u5173\uff0c\u8bf7\u68c0\u67e5font-bin\u548cfont-images\u6587\u4ef6\u5939\u3002\n\u6211\u5df2\u7ecf\u7f16\u5199\u4e86\u4e00\u4e2a\u5de5\u5177\u6765\u6d4f\u89c8ROM\u6620\u50cf\u5e76\u641c\u7d228x8\u30018x14\u30018x16\u5b57\u7b26\u96c6\u548c\u5bfc\u51fa\u3002\u5b83\u53ef\u4ee5\u5728GitHub\u4e0a\u7684\u53e6\u4e00\u4e2arepo\u4e2d\u627e\u5230\uff0c\u540d\u4e3a&#34\uff1bromfont-Extractor&#34\uff1b\u3002\n\u56fe\u4f8b\uff1a&#34\uff1bOK&#34\uff1b-font\u5df2\u89e3\u538b&#34\uff1bXX&34\uff1b-ROM\u4e2d\u672a\u5305\u542bfont(\u8f83\u65b0\u7684\u5361\u901a\u5e38\u4e0d\u53d1\u8d278x14)&#34\uff1b&#34\uff1b-\u5c1a\u672a\u5b8c\u6210&#34\uff1b\uff1f\uff1f&#34\uff1b-\u6709\u4e9b\u5947\u602a\u7684&#34\uff1bLO&#34\uff1b-\u53ea\u6709\u8f83\u4f4e\u7684128\u4e2a\u5b57\u7b26\u53ef\u7528ROM\u7684\u6587\u4ef6\u540d8x8 8x14 8x16\u603b\u7ebf\u5185\u5b58\u65e5\u671f\u5907\u6ce8(BIOS\u624b\u518c\u3001\u5e74\u4efd\u3001\u7248\u672c\u3001\u3002.)-+\u3002--ATI.X550.128.040512.rom|ok|xx|ok|Asus.6200.16.050106.rom|\uff1f\uff1f|\uff1f\uff1f|NV44\uff0c2004 NVIDIA\uff0c\u7248\u672c5.44.02.11.00/AS05CLGD5442.ROM|ok|CL-GD540x/542x VGA BIOS\u7248\u672c1.20,1992-1993 Cirrus Logic\uff0c1987-1990 Quadtelavga1-a11.bin|\uff1f\uff1f|\uff1f||AVGA2.ROM|ok|Commodore386SX-25_AVGA2.bin|ok|ISA|512k|03/19/92\u30021984\u5e74\u81f31991\u5e74PhoenixConnect3D.9500NP.128.Infineon30.021212.rom|ok|xx|ok|agp||2002\u5e7412\u670812\u65e5|R300\uff0c\u82f1\u98de\u51cc\u5185\u5b58BIOS-P/N113-94232-101,1988\u5e74\u81f32002\u5e74ATI BK-ATI VER008.004.008.004\u94bb\u77f3\u9690\u5f6264\u89c6\u9891vRAM PCI 3.00.bin|ok|PCI||07/05/95|\u9690\u5f6264\u89c6\u9891vRAM\u7248\u672c\u30023.00\uff0c\u94bb\u77f3\u591a\u5a92\u4f53\u7cfb\u7edfELSAVIC2.ROM|ok|agp||11/23/98|ELSA VIENCE II 4.03.00\uff0c98-98 ELSA\uff0c90-98 ELPIN\u7cfb\u7edfElsa.FireGLV3200.128.040910.rom|ok|xx|ok|PCIE|128MB|2004/09/10|RV380,1988\u5e74-2003\u5e74\uff0cATI BK-ATI VER008.015.121.000FujitsuSiemens.QuadroFX1700.512.080123.rom|\uff1f|\uff1f\uff1f|\uff1f\uff1f||512MB|\u3002\u538b\u7f29\u5b57\u4f53\uff1f\u7b2c\u4e00\u773c\u627e\u4e0d\u5230\u5b57\u4f53FujitsuSiemens.X300Mobility.32.050608.rom|ok|xx|ok|32MB||G400.ROM|ok|xx|ok|MatroxGENOA.ROM|ok|TsengGigabyte.6200.16.050711.rom|\uff1f\uff1f|\uff1f\uff1f|\uff1f|\uff1f\uff1f\u538b\u7f29\u5b57\u4f53\uff1f\u7b2c\u4e00\u773c\u627e\u4e0d\u5230\u5b57\u4f53Leadtek.6200.16.050128.rom|\uff1f\uff1f|\uff1f\uff1f|\uff1f\u538b\u7f29\u5b57\u4f53\uff1f\u7b2c\u4e00\u773c\u627e\u4e0d\u5230\u5b57\u4f53M32.ROM|ok|PCI|ATIM64GX.ROM|ok|MGAMIL2.ROM|ok|xx|ok|MIROV968.ROM|ok|\u4e0eV7MERCMORSE KP800 VGA CL-GD520A-32PC-B.bin|ok|CL AwardNCR VLB VGA CL-GD5428-80QC-A.bin\u76f8\u540c|\u3002xx|ok|STBS3T64V2.ROM|ok|PCI||S3S3VIRGX2.ROM|ok|PCI|S3Sapphire.9600NP.256.unnown.031028.rom|ok|xx|ok||256MB||Sapphire.9600PRO.128.Samsung28.030829.rom|ok|xx|ok|128MB||TNT2M6\u3002OK|ok|ISA|V7MERC.ROM|ok|V7_Vega|ok|\u4f7f\u75283dfx\u5b57\u4f53\u96c6\uff0c\u4e0eV7MERCvideo_seven_vega_vga_62L1989V5_435-0016-47.bin|ok|VANTA.ROM|ok|ok|\uff1f\uff1f|8x16\u5728ROMVANTAGE.ROM|xx|ok|ok|\u6ca1\u67098x8\u5b57\u4f53VDOO3PCI.ROM|ok|3dfx ElpinWIN1KXHR.ROM|ok|ESLAWONDER16.ROM|ok|XGA.ROM|ok|\u3002|ok|xx|ok|et4000w32isa.BIN|ok|et4000_weirdlowerL.bin|ok|ISA|512k/1M||\u6709\u4e00\u4e2a\u5947\u602a\u76848x14\u548c8x16\u5b57\u7b26\u96c6\u7684\u5c0fL\u3002\u5178\u578b\u7684\u7535\u8111\u5b57\u4f53\u66f4\u6539\u3002OakTechnolgy-UNKNOWN-1.bin|ok|OakTechnolgyVGA-KO77.bin|ok|QuadtelS3_86C801_86C805EnhancedVGABIOS2.13.01|ok|QuadtelVGABIOSVersion1.21.00.bin|ok|SVGA141.ROM|ok|S3_764.bin|ok|TridentTVGA8900C_S27C256.bin|\uff1f|\uff1f|ok|ok|tvga-c4.3.rom|ok|tvga-d3\nIBM\u5728\u7b2c\u4e00\u4e2aPC BIOS\u4e2d\u4f7f\u7528\u4e86\u4e00\u79cd\u5b57\u4f53\uff0c\u8fd9\u79cd\u5b57\u4f53\u5728BIOS\u7684\u7b2c\u4e8c\u4e2a\u7248\u672c\u4e2d\u6709\u6240\u6539\u53d8\u3002\u5728\u6b64\u7248\u672c\u4e4b\u540e\uff0c\u8fd9\u4e9b\u673a\u5668\u4e0a\u7684\u5b57\u4f53\u4fdd\u6301\u4e0d\u53d8\uff1aIBM AT v1\u3001v2\u3001v3\u4ece\u7b2c\u4e00\u4e2a\u7248\u672c\u5230\u7b2c\u4e8c\u4e2a\u7248\u672c\u7684\u552f\u4e00\u66f4\u6539\u662f1\u4f4d\uff0c\u8fd9\u5728\u67e5\u770b\u65f6\u4f1a\u4ea7\u751f\u5de8\u5927\u7684\u5dee\u5f02(ASCII 0x04\uff0c\u5e95\u884c0x00\u66f4\u6539\u4e3a0x08)\u3002\u8be5\u5b57\u4f53\u53ea\u6709\u8f83\u4f4e\u7684128\u4e2a\u5b57\u7b26\u3002\nQEMU hiios 8x8\u548c8x14\u4e0eIBM\u7684VGA\u548cXGA\u5b57\u4f53\u5b8c\u5168\u5339\u914d\u3002\u8fd9\u4e9b\u6587\u4ef6\u4f4d\u4e8eSIMTEL\u7684fntcol16.zip\u4e2d\u3002VGA-ROM.F08\u548cVGA-ROM.F14.qemu\u6765\u6e90\u8bc4\u8bba\u58f0\u79f0\u8fd9\u662f\u516c\u5171\u9886\u57df\u3002\u6211\u6000\u7591IBM\u662f\u5426\u4f1a\u5c06\u5b57\u4f53\u53d1\u5e03\u5230\u516c\u5171\u9886\u57df\u3002\u8fd9\u662f\u5426\u610f\u5473\u7740\uff0cQEMU\u4f9d\u8d56\u4e8ePackagCreator\u7684\u58f0\u660e\uff0c\u800c\u73b0\u5728\u4ed6\u4eec\u4f7f\u7528\u7684\u662f\u975e\u6cd5\u62f7\u8d1d\uff1f\nBochs bios 8x8\u53ea\u63d0\u4f9b\u4e86128\u4e2a\u5b57\u7b26\uff0c\u4e0eIBM\u7684\u7b2c\u4e8c\u79cd\u5b57\u4f53\u5b8c\u5168\u5339\u914d\uff0c\u4e0ehiios 8x8\u5b57\u4f53(\u8bb8\u53ef)\u76f8\u540c\u3002\nAVGA2\u6709\u5b8c\u5168\u72ec\u7279\u7684\u5b57\u4f53-TODO-\u9010\u4f4d\u6bd4\u8f83-\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f\n\u770b\u4e00\u4e0bMD5SUMS\u6587\u4ef6\uff0c\u5b83\u662f\u6309\u603b\u548c\u6392\u5e8f\u7684\u3002\u8fd9\u610f\u5473\u7740\uff0c\u60a8\u5c06\u770b\u5230\u54ea\u4e9b\u5361\u7247\u5177\u6709\u76f8\u540c\u7684\u5b57\u4f53\u3002\u5982\u679c\u60a8\u60f3\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u4f7f\u7528\u56fe\u50cf\u67e5\u770b\u5668\u5e76\u67e5\u770b\u6240\u9700\u5b57\u4f53\u7684\u7f29\u653e\u56fe\u50cf\u3002\n\u6587\u4ef6\u5939lowercharset\u5305\u542b\u8981\u67e5\u770b\u7684\u6240\u67098x8\u5b57\u4f53\u7684\u4f4e128\u4e2a\u5b57\u7b26\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u539f\u59cb\u7684IBM PC\u6216\u8be5\u5b57\u4f53\u7684\u7b2c\u4e8c\u4e2a\u7248\u672c\u3002", "note_en": "I have diassembled and/or searched BIOS and VGA-ROMs for fonts and extracted these.Also I have written a few tools to support this job.All extracted fonts and screenshots are available here. I have written a bigtable to show what is covered. Also had a look and wrote about fonts of opensource BIOSes/source available.\n If you have exotic ROMs or links to other open source BIOSes please let me know.Testing a ROM for known fonts and add it to this list only takes a few minutes andif there is one with a yet unknown font, I am happy to extract and document it :) I am really intersted in ROMs of old laptops with weird LCD-fonts and embeddeddevices (like POS systems, cash registers, money machines and other stuff).Also if you have localized graphic cards, that bring a local charset (ex. greek),I am happy to extract their&#39; fonts.\n I already extracted more than 240 ROM-fonts. Most likely I am not updating thiscounter for every font, so check the font-bin and font-images folder, if thereis something new relevant to you.\n  I have written a tool to browse a ROM image and search for 8x8, 8x14, 8x16 charsetsand export.It can be found here on github in another repo, called &#34;romfont-extractor&#34;.\n   LEGEND: &#34;ok&#34; - font already extracted &#34;XX&#34; - font not included in ROM (newer cards dont ship 8x14 usually) &#34; &#34; - not yet done &#34;??&#34; - something strange &#34;LO&#34; - only lower 128 characters availableFilename of ROM 8x8 8x14 8x16 Bus Memory Date Comments (BIOS manuf., year, version, ...)------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------ATI.X550.128.040512.rom | ok | xx | ok | | | |Asus.6200.16.050106.rom | ?? | ?? | ?? | | | | NV44, 2004 Nvidia, Version 5.44.02.11.00 / AS05CLGD5442.ROM | ok | ok | ok | | | | CL-GD540x/542x VGA BIOS Version 1.20, 1992-1993 Cirrus Logic, 1987-1990 Quadtelavga1-a11.bin | ?? | ?? | ?? | | | |AVGA2.ROM | ok | ok | ok | | | |Commodore386SX-25_AVGA2.bin | ok | ok | ok | ISA | 512k | 03/19/92 | Acumos AVGA2, DeskTop VGA BIOS (340-000-11-Rev1.00), 1984-1991 PhoenixConnect3D.9500NP.128.Infineon30.021212.rom | ok | xx | ok | AGP | | 2002/12/12 | R300, Infineon Memory BIOS - P/N 113-94232-101, 1988-2002 ATI BK-ATI VER008.004.008.004Diamond Stealth 64 Video VRAM PCI 3.00.bin | ok | ok | ok | PCI | | 07/05/95 | Stealth 64 Video VRAM Vers. 3.00, Diamond MultiMedia SystemsELSAVIC2.ROM | ok | ok | ok | AGP | | 11/23/98 | ELSA VICTORY II 4.03.00, 98-98 ELSA, 90-98 Elpin SystemsElsa.FireGLV3200.128.040910.rom | ok | xx | ok | PCIE | 128MB | 2004/09/10 | RV380, 1988-2003, ATI BK-ATI VER008.015.121.000FujitsuSiemens.QuadroFX1700.512.080123.rom | ?? | ?? | ?? | | 512MB | | ??? compressed font ??? cant find font on first lookFujitsuSiemens.X300Mobility.32.050608.rom | ok | xx | ok | | 32MB | |G400.ROM | ok | xx | ok | | | | MatroxGENOA.ROM | ok | ok | ok | | | | TsengGigabyte.6200.16.050711.rom | ?? | ?? | ?? | | | | ??? compressed font ??? cant find font on first lookLeadtek.6200.16.050128.rom | ?? | ?? | ?? | | | | ??? compressed font ??? cant find font on first lookM32.ROM | ok | ok | ok | PCI | | | ATIM64GX.ROM | ok | ok | ok | | | |MGAMIL2.ROM | ok | xx | ok | | | |MIROV968.ROM | ok | ok | ok | | | | Same like V7MERCMORSE KP800 VGA CL-GD520A-32PC-B.bin | ok | ok | ok | | | | CL AwardNCR VLB VGA CL-GD5428-80QC-A.bin | ok | ok | ok | | | |R128GL.ROM | ok | xx | ok | | | |RIVA128A.ROM | ok | xx | ok | | | | STBS3T64V2.ROM | ok | ok | ok | PCI | | | S3S3VIRGX2.ROM | ok | ok | ok | PCI | | | S3Sapphire.9600NP.256.unknown.031028.rom | ok | xx | ok | | 256MB | |Sapphire.9600PRO.128.Samsung28.030829.rom | ok | xx | ok | | 128MB | |TNT2M64.ROM | ok | ok | ok | | | |TSVGA 9020-12 ET4000 ISA VGA.bin | ok | ok | ok | ISA | | |Tseng ET3000AX ISA VGA-VGA ULTRA.bin | ok | ok | ok | ISA | | |V7MERC.ROM | ok | ok | ok | | | |V7_Vega | ok | ok | ok | | | | uses 3dfx font set, different fonts than V7MERCvideo_seven_vega_vga_62L1989V5_435-0016-47.bin | ok | ok | ok | | | |VANTA.ROM | ok | ok | ?? | | | | 8x16 not complete in ROMVANTAGE.ROM | xx | ok | ok | | | | has no 8x8 fontVDOO3PCI.ROM | ok | ok | ok | | | | 3dfx ElpinWIN1KXHR.ROM | ok | ok | ok | | | | ESLAWONDER16.ROM | ok | ok | ok | | | |XGA.ROM | ok | ok | ok | | | | Phoenixet4000_stb.vbi | ok | xx | ok | | | |et4000w32isa.BIN | ok | ok | ok | | | |et4000_weirdlowerL.bin | ok | ok | ok | ISA |512k/1M | | Has a weird lower L in 8x14 and 8x16 charsets. Typical TSENG change to a PC font.OakTechnolgy-unknown-1.bin | ok | ok | ok | | | |OakTechnolgyVGA-KO77.bin | ok | ok | ok | | | |QuadtelS3_86C801_86C805EnhancedVGABIOS2.13.01 | ok | ok | ok | | | |QuadtelVGABIOSVersion1.21.00.bin | ok | ok | ok | | | |SVGA141.ROM | ok | ok | ok | | | |s3_764.bin | ok | ok | ok | | | |TridentTVGA8900C_S27C256.bin | ?? | ?? | ?? | | | |tgui9400cxi.vbi | ok | ok | ok | | | |tvga-c4.3.rom | ok | ok | ok | | | |tvga-d3.0.rom | ok | ok | ok | | | |tvga9000i-d4.01e | ?? | ?? | ?? | | | |tvga9000i-v2.vbi | ok | ok | ok | | | |tvga9000a_d211.bin | ok | ok | ok | | | |tvga9000a_d301.bin | ok | ok | ok | | | |tvga8800cs | ok | ok | ok | | | |tvga8800cs_2 | ok | ok | ok | | | |BLADEXP.vbi | ok | ok | ok | | | |BLADE3D_AGP.vbi | ok | ok | ok | | | |BLADE3D_AGP_HIS.vbi | ok | ok | ok | | | |BLADE3D_PCI.vbi | ok | ok | ok | | | |vgaedge.bin | ok | ok | ok | | | |TsengLabsVGA-4000BIOSV1.1.bin | ok | ok | ok | | | |------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------ATIEgaWonder800p.bin | ok | ok | ok | | | |ami-ega.rom | ok | ok | xx | | | | VERY SPECIAL FONTS, 2 different 8x8 (1 is mirrored) and one 8x14genoa-ega-2.41.rom | ok | ok | xx | | | |ibm-ega.rom | ok | ok | xx | | | |NSILogic-SmartEGAPlus-04-086-01Rev1.45-U21.bin | ok | ok | xx | | | |wd-pega.rom | ok | ok | xx | | | |------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------IBM VGA | ok | ok | ok | | | | has a full 8x8 charset in 8x8, 8x14 and 8x16IBM_PC_BIOS_1981-04-24_HALF_8x8.bin | LO | XX | XX | --- | ------ | | IBM PC BIOS, only lower 128 characters, no &#34;graphical&#34; chars.------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------=&gt; IN THIS SECTION: LOCALIZED VIDEO ROMS (greek, ...)CGA_PRAVETZ.ROM | ok | xx | xx | | | | 4 different kyrillic fontsacer500-II_cga_rom.bin | ok | xx | ?? | | | | 2 different greek 8x8, somewhat strange 8x16 TBDati_small_wonder_rev1_GR-ROM.bin | ok | xx | ?? | | | | 4 different greek 8x8clone2_cga_rom.bin | xx | ?? | ?? | | | |clone_cga_rom.bin | xx | ?? | ?? | | | |hyundai_mono-graphics-board_e40080004 | xx | ?? | ?? | | | |ibm5155_cga_rom_memotek_greek | ok | xx | xx | | | | 10 different greek fonts?tvga9000a_japan.vbi | ok | ok | ok | | | |------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------mda.rom | ?? | ?? | ?? | | | | 8k ROM only font data, what is this? not extracted yet, some problems50146chareuro.rom | ok | xx | ok | | | | Tandy 1000, 8x8 and 8x14 in both a 8x16 array with padding zero bytes------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------=&gt; IN THIS SECTION: SYSTEM BIOSali1429g.amw (AMI WINBIOS) | LO | xx | xx | | | |amic206.bin | xx | xx | xx | | | | NO FONT at allami386.bin | LO | xx | xx | | | |amxtv132.rom | LO | xx | xx | | | |award-2.05.rom | LO | xx | xx | | | |DTK.PII-151B-BIOS.version.1.06B.bin | xx | xx | xx | | | | NO FONT at alldtk_erso_2.42_2764.bin | LO | xx | xx | | | |genxt.bin | LO | xx | xx | | | |JukoD16X-BIOSversion1.2.bin | xx | xx | xx | | | | NO FONT at allLongshineLCS-6821N-BIOSversion1.04.bin | xx | xx | xx | | | | NO FONT at allolivetti-m24-1.21.rom | LO | xx | xx | | | |opt495sx.ami | LO | xx | xx | | | |phoenix-2.51.rom | LO | xx | xx | | | |ToshibaT1000-BIOSROM-V4.10.bin | ?? | xx | xx | | | | lo and hi in different placestoshibaT5200cbiosv3.bin | ok | xx | ok | | | | VERY SPECIAL contains each 2 different fonts, 8x8 and 8x16VTech-LaserTurboXT-BIOS-V1.11-27C64D.bin | LO | xx | xx | | | | VERY SPECIALVTech-LaserXT3-BIOS-V1.26-27C64.bin | LO | xx | xx | | | | VERY SPECIALwang3050_bios_rom | ok | ok | ok | | | |------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------ibmjap.rom | ok | ok | ok | | | | Japanese PS/2 BIOS------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------=&gt; IN THIS SECTION: FONTS THAT ARE AVAILABLE IN SOURCEseabios | ok | ok | ok | --- | ------ | | from official sourcebochs | LO | XX | XX | --- | ------ | | from official source3dfx | ok | ok | ok | | | | from leaked sourceIBM PC BIOS V1 | LO | XX | XX | | | 1981 | from IBM&#39;s sourceIBM PC BIOS V2,V3 | LO | XX | XX | | | 1981 | from IBM&#39;s sourceIBM AT BIOS V1,V2,V3 | LO | XX | XX | | | 1981 | from IBM&#39;s sourceIBM XT BIOS V1,V2,V3 | LO | XX | XX | | | 1981 | from IBM&#39;s sourceIBM XT286 BIOS V1 | LO | XX | XX | | | 1981 | from IBM&#39;s source------------------------------------------------+----+----+----+------+--------+------------+------------------------------------------------------------------------------------------------\n  The folder &#39;other_sources&#39; contains subfolders, which each holds a set of files for a ROM-font.They were not extracted from ROMs, they are already available as source. Thesesources were adapted and simple bin-generators were added to create the binaryfont files.These are available:\n ibm_pc - original IBM PC, V1/V2/V3ibm_xt - IBM XT, V1/V2/V3ibm_xt286 - IBM XT 286, only one BIOS availableibm_at - IBM AT, V1/V2/V3seabios - qemu seabios, 8x8, 8x14, 8x163dfx_leadked_bios - original source code, 8x8, 8x14, 8x16, 9x14, 9x16bochs_bios - bochs bios, 8x8, only lower half of charset implemented\n Not all are yet converted to C (most of them in ASM) and bins are generated.The original sources are provided already.\n  IBM has used a font for the very first PC BIOS, that has changed in secondversion of BIOS. After this release the font remained the same on these machines: IBM AT v1, v2, v3The only change from first to second version is 1 single bit, that makes a hugedifference when looking at it (ASCII 0x04, bottom line 0x00 changes to 0x08).This font only has the lower 128 characters.\n  qemu seabios 8x8 and 8x14 are exact matches to IBM&#39;s VGA and XGA fonts.These files are in fntcol16.zip from simtel. VGA-ROM.F08 and VGA-ROM.F14.qemu source comment claims this is public domain. I doubt IBM would releasea font to public domain. Does this mean, qemu relied on claims by packagecreator and now they use a illegal copy?\n bochs bios 8x8 only brings lower 128 chars that are exactly matching IBM&#39;s second font.Same as with seabios 8x8 font (licensing).\n   The AVGA2 has totally unique fonts - TODO - bit by bit compare - what are the differences?\n Have a look at  MD5SUMs file, it is sorted by sum. This means, you will se whichcards share same font.If you want to compare you may use a image viewer and view the zoomed imagesof the desired fonts.\n The folder  lowercharset holds the lower 128 characters of all 8x8 fonts tosee, which one uses the original IBM PC&#39;s or the second version of this font.", "posttime": "2020-05-13 18:19:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ios,\u5b57\u4f53,extracted", "title": "\u63d0\u53d6\u7684\u5b57\u4f53BIOS\u548cVGA ROM", "title_en": "Fonts Extracted BIOSes and VGA ROMs", "transed": 1, "url": "https://github.com/spacerace/romfont", "via": "", "real_tags": ["ios", "\u5b57\u4f53", "extracted"]}, {"category": "", "categoryclass": "", "imagename": "5772de296f329c050aa31a19da8742cd.jpeg", "infoid": 1001959, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u57fa\u672c\u4e0a\uff0c\u6211\u60f3\u4e70\u4ec0\u4e48\u5c31\u4e70\u4ec0\u4e48\uff0c\u4f46\u6211\u4e70\u4e0d\u5230\u65f6\u95f4\u3002\u201d\n\u6c83\u4f26\u00b7\u5df4\u83f2\u7279(Warren Buffett)\u7684\u65e5\u7a0b\u8868\u4e0a\u51e0\u4e4e\u4ec0\u4e48\u90fd\u6ca1\u6709\u3002\u4ed6\u6bcf\u665a\u77618\u4e2a\u5c0f\u65f6\uff0c\u767d\u592980%\u7684\u65f6\u95f4\u7528\u6765\u770b\u4e66\uff0c\u4e0b\u73ed\u540e\u6253\u6865\u724c\u653e\u677e\u3002\n\u6280\u672f\u7684\u8fdb\u6b65\u4f7f\u5f97\u5728\u66f4\u77ed\u7684\u65f6\u95f4\u5185\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u6210\u4e3a\u53ef\u80fd\uff0c\u4f46\u6709\u5927\u91cf\u7684\u4e8b\u60c5\u8981\u505a\u5e76\u4e0d\u662f\u667a\u8005\u7684\u65b9\u5f0f\u3002\u5fd9\u788c\u53ea\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u8fdb\u6b65\u7684\u9519\u89c9\u3002\n\u5728\u6211\u4eec\u8ffd\u6c42\u6210\u957f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5bfb\u6c42\u77e5\u8bc6\u3002\u4eca\u5929\u7684\u6280\u672f\u53ef\u4ee5\u5728\u77ac\u95f4\u63d0\u4f9b\u5176\u4e2d\u7684\u5f88\u5927\u4e00\u90e8\u5206\uff0c\u4f46\u4fe1\u606f\u53ea\u6709\u5728\u6295\u5165\u4f7f\u7528\u65f6\u624d\u80fd\u5e26\u6765\u597d\u5904\u3002\u56e0\u4e3a\u6211\u4eec\u5fd9\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u4f1a\u505c\u4e0b\u6765\u5904\u7406\u6211\u4eec\u6240\u5b66\u5230\u7684\u4e1c\u897f\u3002\n\u901a\u5e38\u4f1a\u53d1\u751f\u4ec0\u4e48\u2026\u30021.\u8bfb\u4e00\u672c\u4e66\uff0c\u83b7\u5f97\u7075\u611f\u3002\u2192\u548c\u5176\u4ed6\u4eba\u8c08\u8bba\u8fd9\u4ef6\u4e8b\uff0c\u2192\u4ec0\u4e48\u4e5f\u6ca1\u505a\u30022.\u53c2\u52a0\u4e00\u4e2a\u4f1a\u8bae\uff0c\u5f97\u5230\u5947\u5999\u7684\u60f3\u6cd5\uff0c\u2192\u5728\u56de\u5bb6\u7684\u8def\u4e0a\u601d\u8003\u8fd9\u4e9b\u60f3\u6cd5\u3002\u7b2c\u4e8c\u5929\uff0c\u2192\u9192\u6765\uff0c\u88ab\u5de5\u4f5c\u4e2d\u7684\u65cb\u98ce\u5f04\u5f97\u4e0d\u77e5\u6240\u63aa\uff0c\u628a\u4ed6\u4eec\u5fd8\u5f97\u4e00\u5e72\u4e8c\u51c0\u30023.\u81ea\u53d1\u7684\u8c08\u8bdd\u4f1a\u4ea7\u751f\u6f5c\u5728\u7684\u534f\u540c\u4f19\u4f34\u5173\u7cfb\u3002\u2192\u592a\u5fd9\u4e86\uff0c\u6ca1\u6709\u65f6\u95f4\u8ddf\u8fdb\u3002\n\u5728\u8fd9\u4e2a\u4fe1\u606f\u65f6\u4ee3\uff0c\u6211\u4eec\u88ab\u63a8\u5165\u601d\u60f3\u7684\u5f00\u653e\u6d77\u6d0b\uff0c\u6211\u4eec\u4efb\u7531\u81ea\u5df1\u88ab\u5b83\u7684\u6ce2\u6d9b\u98a0\u7c38\u3002\u8111\u6d77\u4e2d\u4e00\u4e2a\u558b\u558b\u4e0d\u4f11\u7684\u58f0\u97f3\u56de\u907f\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7ecf\u8fc7\u51e0\u5341\u672c\u4e66\uff0c\u4e00\u767e\u6b21\u8c08\u8bdd\uff0c\u4e94\u6b21\u4f1a\u8bae\uff0c\u4e09\u6b21\u65c5\u884c\uff0c\u51e0\u5341\u7bc7\u6587\u7ae0\uff0c\u4f60\u5230\u5e95\u5b8c\u6210\u4e86\u4ec0\u4e48\uff1f\n\u60f3\u60f3\u8fc7\u53bb\u7684\u4e00\u5e74\u3002\u6709\u591a\u5c11\u6bb5\u611f\u60c5\u892a\u8272\u4e86\uff1f\u6709\u591a\u5c11\u4e2a\u865a\u5047\u7684\u627f\u8bfa\uff1f\u6709\u591a\u5c11\u5145\u6ee1\u6fc0\u60c5\u7684\u9879\u76ee\u5f00\u59cb\u4e86\uff0c\u4f46\u6ca1\u6709\u7ed3\u675f\uff1f\n\u8bf4\u4f60\u592a\u5fd9\u4e0d\u80fd\u505a\u67d0\u4e8b\u4ec5\u4ec5\u610f\u5473\u7740\u67d0\u4e8b\u4e0d\u662f\u4f60\u7684\u9996\u8981\u4efb\u52a1\u3002\u7136\u800c\uff0c\u5f53\u88ab\u95ee\u53ca\u6211\u4eec\u4f18\u5148\u8003\u8651\u7684\u662f\u4ec0\u4e48\u65f6\uff0c\u6211\u4eec\u5f80\u5f80\u4f1a\u8bf4\u76f8\u53cd\u7684\u8bdd\u3002\n\u53cd\u601d\u3002\u79ef\u6781\u5730\u901a\u8fc7\u5199\u4f5c\u6216\u4e0e\u67d0\u4eba\u8ba8\u8bba\u4e00\u4e2a\u60f3\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u88ab\u52a8\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u7528\u7cbe\u795e\u7a7a\u95f2\u7684\u65f6\u95f4\u6765\u89e3\u653e\u4f60\u7684\u5927\u8111\uff0c\u6bd4\u5982\u505a\u996d\u3001\u8dd1\u6b65\u3001\u4fee\u7406\u8863\u67dc\uff0c\u6216\u8005\u5f00\u8f66\u542c\u53e4\u5178\u97f3\u4e50\u3002\u5728\u4f60\u5904\u7406\u5b8c\u4e00\u4e9b\u4e8b\u60c5\u4e4b\u540e\uff0c\u8981\u786e\u4fdd\u4f60\u7684\u884c\u52a8\u8981\u70b9(\u5982\u679c\u4f60\u6709\u7684\u8bdd)\u7acb\u5373\u5f97\u5230\u5b9e\u65bd\uff0c\u4ee5\u4fdd\u6301\u52bf\u5934\u3002\n\u5728\u7247\u523b\u4e2d\u73b0\u8eab\u3002\u5728\u7ee7\u7eed\u9605\u8bfb\u4e4b\u524d\uff0c\u82b1\u70b9\u65f6\u95f4\u5f7b\u5e95\u7406\u89e3\u4e00\u4e2a\u65b0\u6982\u5ff5\u3002\u5411\u8f66\u7a97\u5916\u770b\u65f6\uff0c\u751f\u52a8\u5730\u8bb2\u8ff0\u4f60\u6240\u770b\u5230\u7684\u3002\u6bcf\u6b21\u4e0e\u4eba\u4ea4\u8c08\u65f6\u90fd\u8981\u628a\u624b\u673a\u6536\u8d77\u6765\u3002\u514b\u5236\u4f4f\u8bb0\u5f55\u4e00\u5929\u4e2d\u6bcf\u4e00\u4e2a\u5c0f\u7ec6\u8282\u7684\u51b2\u52a8\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u8ba9\u4f60\u4ece\u4f53\u9a8c\u7684\u672c\u8d28\u4e0a\u5206\u5fc3\u3002\n\u610f\u60f3\u4e0d\u5230\u7684\u632b\u6298\u3002\u7a81\u7136\u7684\u804c\u8d23\u53ec\u5524\u3002\u4e0d\u8bf7\u81ea\u6765\u7684\u6307\u8d23\u3002\u60c5\u7eea\u5d29\u6e83\u3002\u6211\u4eec\u9047\u5230\u4e00\u4e9b\u63d0\u9192\u6211\u4eec\u81ea\u5df1\u662f\u591a\u4e48\u6709\u9650\u7684\u4e1c\u897f\uff0c\u8fd9\u53ea\u662f\u4e2a\u65f6\u95f4\u95ee\u9898\u3002\u5f53\u90a3\u4ef6\u4e8b\u5230\u6765\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u5f20\u5f00\u53cc\u81c2\u62e5\u62b1\u5b83\uff0c\u56e0\u4e3a\u5b83\u8ba9\u6211\u4eec\u5728\u771f\u6b63\u91cd\u8981\u7684\u4e8b\u60c5\u4e0a\u7ad9\u7a33\u811a\u8ddf\u3002\u7136\u540e\u6211\u4eec\u518d\u4ece\u90a3\u4e2a\u53c2\u8003\u70b9\u5f00\u59cb\u5192\u9669\u3002\n\u4e16\u754c\u4e0a\u6210\u529f\u7684\u6807\u5fd7-\u51c0\u8d44\u4ea7\u3001\u58f0\u671b\uff0c\u751a\u81f3\u662f\u5bf9\u6fc0\u60c5\u7684\u8ffd\u6c42\uff0c\u90fd\u8ba9\u6211\u4eec\u770b\u4e0d\u5230\u771f\u6b63\u91cd\u8981\u7684\u4e1c\u897f\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u6211\u4eec\u6e34\u671b\u7684\u662f\u5173\u7cfb\u3002\u6211\u4eec\u4e0d\u80fd\uff0c\u4e0d\u7ba1\u8868\u9762\u4e0a\u770b\u8d77\u6765\u5982\u4f55\uff0c\u751f\u6d3b\u4e2d\u6ca1\u6709\u7231\u548c\u88ab\u7231\u3002\n\u4eca\u5929\uff0c\u5728\u5de5\u4f5c\u4e2d\u3001\u4eba\u9645\u5173\u7cfb\u4e2d\u3001\u4e2a\u4eba\u6210\u957f\u4e2d\uff0c\u6539\u53d8\u73b0\u72b6\u7684\u65b9\u6cd5\u5c31\u662f\u62b5\u5236\u7a7a\u6d1e\u7684\u884c\u52a8\u3002\u6211\u4eec\u5fc5\u987b\u6709\u610f\u8bc6\u5730\u53bb\u601d\u8003\u3001\u53bb\u505a\u3001\u53bb\u5b58\u5728\u3002\n\u5728\u601d\u8003\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u62b5\u5236\u628a\u5177\u6709\u6311\u6218\u6027\u7684\u8ba4\u77e5\u6d3b\u52a8\u653e\u5728\u4e00\u8fb9\u7684\u8bf1\u60d1\u3002\u6211\u4eec\u6709\u8ba1\u5212\u3002\u6211\u4eec\u8fdb\u884c\u5206\u6790\u548c\u7efc\u5408\u3002\u6211\u4eec\u53cd\u601d\u3002\n\u5728\u505a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u52e4\u594b\u5730\u6267\u884c\u6211\u4eec\u7684\u8ba1\u5212\u3002\u6211\u4eec\u575a\u5b88\u6211\u4eec\u7684\u627f\u8bfa\u3002\u6211\u4eec\u5728\u56f0\u96be\u4e2d\u575a\u6301\u4e0d\u61c8\uff0c\u77e5\u9053\u968f\u4e4b\u800c\u6765\u7684\u662f\u589e\u957f\u7684\u9ad8\u5cf0\u3002\n\u5728\u5b58\u5728\u4e2d\uff0c\u6211\u4eec\u5c06\u6211\u4eec\u7684\u601d\u60f3\u548c\u884c\u4e3a\u4e0e\u6211\u4eec\u7684\u539f\u5219\u76f8\u4e00\u81f4\uff0c\u8fd9\u6837\u6211\u4eec\u751f\u6d3b\u7684\u4e0d\u540c\u65b9\u9762\u5c31\u4f53\u73b0\u4e86\u6211\u4eec\u6240\u76f8\u4fe1\u7684\u6211\u4eec\u4eca\u751f\u7684\u76ee\u6807\u3002\n\u5728\u771f\u4eba\u5927\u5c0f\u7684\u5c3a\u5ea6\u4e0a\uff0c\u540c\u65f6\u6210\u4e3a\u4e00\u4e2a\u88ab\u8d4b\u4e88\u6743\u529b\u7684\u6574\u4f53\uff0c\u800c\u4e0d\u662f\u4e09\u4e2a\u9065\u8fdc\u7684\u788e\u7247\uff0c\u4e0d\u662f\u7279\u522b\u4ee4\u4eba\u6ee1\u8db3\u5417\uff1f", "note_en": "\u201cI buy anything I want, basically, but I can\u2019t buy time.\u201d\n Warren Buffett has practically nothing on his calendar. He gets eight hours of sleep each night, spends 80% of his day reading, and plays bridge after work to unwind.\n  Technological advancements have enabled the possibility of doing more things in a shorter amount of time, but having a great deal to do is not the way of the wise. Being busy only gives us the  illusion of progress.\n  In our pursuit of growth, we seek knowledge. Today\u2019s technology can deliver a heavy chunk of that in an instant, but information can only be beneficial when put into use. Because we are too busy acquiring more information, we do not stop to process what we learn.\n What usually happens\u2026 1. Reads a book, gets inspired. \u2192 Talks about it with other people \u2192  Does nothing. 2. Attends a conference, gets fantastic ideas \u2192 Thinks about them on the way home. \u2192  Wakes up the following day, gets overwhelmed by the whirlwind at work and forgets about them.  3. A spontaneous conversation results in a potentially synergistic partnership. \u2192  Gets too busy to make time to follow up.\n  In this age of information, we are thrust into an open sea of ideas, and we allow ourselves to get tossed by its waves. A nagging voice in our head begs the question, after tens of books, a hundred conversations, five conferences, three trips, and dozens of articles, what have you  really accomplished?\n  Think about the year that has passed. How many relationships faded? How many false promises were made? How many passion projects were started and never finished?\n Saying you\u2019re too busy for something simply means that something is not your priority. Yet, we often say the opposite when asked what we prioritize over all else.\n    Reflect. Actively do this by writing or discussing an idea with somebody. Passively do this by freeing up your mind with mentally-idle time, like cooking, running, fixing your closet, or driving to classical music. After you have processed something, see to it that your action points (if you have any) are implemented immediately in order to keep the momentum.\n Be present in moments. Take the time to understand a new concept thoroughly before reading on. While looking outside the car window, vividly narrate what you see. Put your phone away each time you\u2019re conversing with someone. Resist the urge to document every little piece of your day, because it distracts you from the very essence of an experience.\n  An unexpected setback. A sudden call of duty. An unsolicited rebuke. An emotional breakdown. It\u2019s only a matter of time before we come across something that reminds us how finite we are. When that something comes, we must embrace it with open arms, because it grounds us in the things that truly matter. We then venture again from that reference point.\n The world\u2019s signs of success \u2014 net worth, prestige, even the pursuit of a passion, have blinded us from what truly matters. At the very core, we desire relationships. We cannot, no matter it seems like at the surface, live without loving and being loved.\n   The way to make a difference today, in work, in relationships, in one\u2019s personal growth, is to resist hollow actions. We must be intentional in thinking, doing, and being.\n In thinking, we must resist the temptation to set aside challenging cognitive activities. We plan. We analyze and synthesize. We reflect.\n In doing, we execute our plans diligently. We stick to our commitments. We persevere through hardship, knowing that what follows is a spike in growth.\n  In being, we align our thoughts and deeds to our principles, such that different aspects of our lives manifest what we believe is our purpose in this life.\n In a life-sized scale, isn\u2019t it exceptionally fulfilling to be one empowered whole, instead of three distant pieces, at once?", "posttime": "2020-05-13 18:19:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65b0\u4e00\u4ee3,busy,\u65f6\u95f4", "title": "\u4e3a\u4ec0\u4e48\u65b0\u4e00\u4ee3\u5982\u6b64\u5fd9\u788c\u611a\u8822\uff0c\u6211\u4eec\u53c8\u80fd\u505a\u4e9b\u4ec0\u4e48\u5462\uff1f", "title_en": "Why Busy Is the New Stupid, and What We Can Do About It", "transed": 1, "url": "https://medium.com/@hgdt/why-busy-is-the-new-stupid-and-what-we-can-do-about-it-489d4dcf8d08", "via": "", "real_tags": ["\u65b0\u4e00\u4ee3", "busy", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001957, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6211\u9047\u5230\u706b\u72d0\u9488\u5bf9\u65e7TLS\u7248\u672c\u7684\u95f4\u9699\u8b66\u544a\u65f6\uff0c\u5b83\u5e76\u4e0d\u662f\u6211\u60f3\u8981\u7684\uff0c\u5b83\u7684\u9644\u52a0\u4f4d\u7f6e\u7ed9\u4e86\u6211\u4e00\u4e9b\u9519\u7efc\u590d\u6742\u7684\u611f\u89c9\u3002\u6211\u672c\u4ee5\u4e3a\u4f1a\u5728\u4e00\u4e9b\u53e4\u8001\u7684\u8bbe\u5907\u6216IPMI\u7f51\u7edc\u754c\u9762(\u8fd9\u4e24\u79cd\u4ea7\u54c1\u90fd\u4ee5\u8fd9\u7c7b\u4e1c\u897f\u95fb\u540d)\u4e0a\u7b2c\u4e00\u6b21\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u76f8\u53cd\uff0c\u5b83\u662f\u5728\u4e00\u4e2a\u6d3b\u8dc3\u7684\u4eba\u7684\u7f51\u7ad9\u4e0a\uff0c\u8fd9\u662f\u5728\u6700\u8fd1\u4e00\u7bc7\u5173\u4e8e\u6d41\u6d6a\u60f3\u6cd5\u7684\u8bc4\u8bba\u4e2d\u63d0\u5230\u7684\u3002\u4e00\u65b9\u9762\uff0c\u8fd9\u662f\u4e00\u79cd\u4ed6\u4eec\u672c\u53ef\u4ee5\u4f7f\u4ed6\u4eec\u7684Web\u670d\u52a1\u5668\u4fdd\u6301\u6700\u65b0\u7684\u60c5\u51b5\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u8868\u660e(\u5e76\u5e26\u51fa)\u73b0\u4ee3HTTPS\u7f51\u7ad9\u79ef\u6781\u8981\u6c42\u4f60\u4ee5HTTP\u7f51\u7ad9\u505a\u4e0d\u5230\u7684\u65b9\u5f0f\u8ba9\u4f60\u7684\u7f51\u7edc\u670d\u52a1\u5668\u4fdd\u6301\u6700\u65b0\u3002\u5728HTTP\u65f6\u4ee3\uff0c\u4f60\u53ef\u4ee5\u57282000\u5e74\u8bbe\u7f6e\u4e00\u4e2a\u7f51\u7edc\u670d\u52a1\u5668\uff0c\u5b83\u4eca\u5929\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\uff0c\u5de5\u4f5c\u5f97\u975e\u5e38\u597d(\u5373\u4f7f\u5b83\u4e0d\u652f\u6301\u6700\u65b0\u7684\u95ea\u4eae\u4e8b\u7269)\u3002\u8fd9\u5bf9HTTPS\u4e0d\u8d77\u4f5c\u7528\uff0c\u73b0\u5728\u4e0d\u8d77\u4f5c\u7528\uff0c\u5c06\u6765\u4e5f\u4e0d\u8d77\u4f5c\u7528\u3002\n\u5b9e\u9645\u4e0a\uff0cHTTPS\u670d\u52a1\u5668\u4e0a\u6709\u5f88\u591a\u4e1c\u897f\u9700\u8981\u7ef4\u62a4\u3002\u9996\u5148\uff0c\u60a8\u5fc5\u987b\u7eed\u8ba2TLS\u8bc1\u4e66\uff0c\u6216\u8005\u5c06\u5176\u81ea\u52a8\u5316(\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u80fd\u4e0d\u5f97\u4e0d\u591a\u6b21\u66f4\u6539\u83b7\u53d6TLS\u8bc1\u4e66\u7684\u65b9\u5f0f)\u3002\u5373\u4f7f\u662f\u81ea\u52a8\u7eed\u8d39\uff0clet\u2018s Encrypt\u5df2\u7ecf\u66f4\u6539\u8fc7\u4ed6\u4eec\u7684\u534f\u8bae\u4e00\u6b21\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u65e7\u7684\u5ba2\u6237\u7aef\u548c\u65e7\u7684\u914d\u7f6e\uff0c\u6709\u4e00\u5929\u5f88\u53ef\u80fd\u8fd8\u4f1a\u8fd9\u6837\u505a\u3002\u73b0\u5728\uff0c\u4f60\u5fc5\u987b\u4e0d\u65ad\u66f4\u65b0Web\u670d\u52a1\u5668\u8f6f\u4ef6\u3001TLS\u5e93\u548cTLS\u914d\u7f6e\uff0c\u56e0\u4e3a\u6211\u6000\u7591TLS1.2\u4e4b\u524d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4e0d\u4f1a\u662f\u6700\u540e\u4e00\u6b21\u8fd9\u6837\u7684\u4e0d\u63a8\u8350\u4e86\u3002\n\u6211\u60c5\u4e0d\u81ea\u7981\u5730\u89c9\u5f97\u8fd9\u4ef6\u4e8b\u6709\u4ec0\u4e48\u4e0d\u5bf9\u52b2\u3002\u4f8b\u5982\uff0cHTTPS Web\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u53ef\u4ee5\u50cfHTTP Web\u90a3\u6837\u4fdd\u7559\u65e7Web\u670d\u52a1\u5668\u7684\u5730\u65b9\u3002\u4eca\u5929\uff0c\u5982\u679c\u4f60\u6709\u64cd\u4f5c\u786c\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4ece\u4e00\u53f0\u65e7\u7684SGIIrix\u5de5\u4f5c\u7ad9\uff0c\u751a\u81f3\u662f\u4e00\u53f0DEC Ultrix\u673a\u5668\u4e0a\u8fd0\u884c\u4e00\u53f0HTTP Web\u670d\u52a1\u5668\uff0c\u6bcf\u4e2a\u6d4f\u89c8\u5668\u90fd\u53ef\u80fd\u5f88\u4e50\u610f\u5bf9\u5b83\u8bf4HTTP 1.0\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u5373\u4f7f\u670d\u52a1\u5668\u8f6f\u4ef6\u53ef\u80fd\u81ea20\u4e16\u7eaa90\u5e74\u4ee3\u4ee5\u6765\u5c31\u6ca1\u6709\u66f4\u65b0\u8fc7\u3002\u8fd9\u5728HTTPS\u7f51\u7ad9\u4e0a\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4e0d\u7ba1\u4f60\u5982\u4f55\u7cbe\u5fc3\u7ef4\u62a4\u65e7\u7684\u73af\u5883\u3002\n\u53e6\u4e00\u4e2a\u66f4\u76f8\u5173\u7684\u65b9\u9762\u662f\uff0c\u62e5\u6709\u7f51\u7edc\u670d\u52a1\u5668\u7684\u4eba\u4e0d\u53ef\u80fd\u5c31\u8fd9\u4e48\u8ba9\u4ed6\u4eec\u5750\u7740\u3002HTTPS\u4e16\u754c\u6539\u53d8\u5f97\u8d8a\u591a\uff0c\u4f60\u9700\u8981\u6539\u53d8\u7684\u5730\u65b9\u5c31\u8d8a\u591a\uff0c\u4f60\u7684HTTPS Web\u670d\u52a1\u5668\u5c31\u9700\u8981\u66f4\u591a\u7684\u6301\u7eed\u5de5\u4f5c\u3002\u5982\u679c\u4f60\u5ffd\u7565\u5b83\uff0c\u8df3\u8fc7\u8fd9\u9879\u5de5\u4f5c\uff0c\u4f60\u7684\u7f51\u7ad9\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u5c31\u662f\u6211\u7ecf\u5386\u8fc7\u7684\u95f4\u9699\u8b66\u544a\uff0c\u6700\u7ec8\u5b83\u5c06\u5b8c\u5168\u4e0d\u88ab\u6d4f\u89c8\u5668\u63a5\u53d7\u3002\u6211\u9884\u8ba1\uff0c\u8fd9\u5c06\u4fc3\u4f7f\u66f4\u591a\u7684\u4eba\u6295\u5165\u5927\u578b\u8fd0\u8425\u516c\u53f8(\u5982Github Pages\u6216Cloudflare)\u7684\u6000\u62b1\uff0c\u4e3a\u4ed6\u4eec\u6253\u7406\u6240\u6709\u8fd9\u4e9b\u4e1a\u52a1\uff0c\u800c\u4efb\u4f55\u4eba\u90fd\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u72ec\u7acb\u65e7\u7f51\u7edc\u7cbe\u795e\u5c06\u4f1a\u6d88\u9000\u3002\n(\u540c\u65f6\uff0c\u8fd9\u5bf9\u4e8e\u4fdd\u8bc1HTTPS\u7684\u5b89\u5168\u662f\u5fc5\u8981\u7684\uff0c\u51fa\u4e8e\u901a\u5e38\u7684\u539f\u56e0\uff0cHTTPS\u672c\u8eab\u4e5f\u662f\u5fc5\u8981\u7684\u3002\u4f46\u662f\uff0c\u8ba9\u6211\u4eec\u7684\u9f3b\u6d95\u5047\u88c5\u5728\u8fd9\u6b21\u8f6e\u73ed\u4e2d\u4ec0\u4e48\u90fd\u6ca1\u6709\u4e22\u5931\u3002)", "note_en": "When I ran into  Firefox&#39;s interstitial warning for old TLS versions, it wasn&#39;t where I expected, and where ithappened gave me some tangled feelings. I had expected to first runinto this on some ancient appliance or IPMI web interface (both ofwhich are famous for this sort of thing). Instead, it was on thewebsite of an active person that had been mentioned in a recentcomment here on  Wandering Thoughts. On the one hand, thisis a situation where they could have kept their web server up todate. On the other hand, this demonstrates (and brings home) thatthe modern HTTPS web actively requires you to keep your web serverup to date in a way that the HTTP web didn&#39;t. In the era of HTTP,you could have set up a web server in 2000 and it could still berunning today, working perfectly well (even if it didn&#39;t supportthe very latest shiny thing). This doesn&#39;t work for HTTPS, not todayand not in the future.\n In practice there are a lot of things that have to be maintained on aHTTPS server. First, you have to renew TLS certificates, or automate it(in practice you&#39;ve probably had to change how you get TLS certificatesseveral times). Even with automated renewals, Let&#39;s Encrypt has changedtheir protocol once already, deprecating old clients and thus oldconfigurations, and will probably do that again someday. And now youhave to keep reasonably up to date with web server software, TLSlibraries, and TLS configurations on an ongoing basis, because I doubtthat the deprecation of everything before TLS 1.2 will be the last suchdeprecation.\n I can&#39;t help but feel that there is something lost with this. TheHTTPS web probably won&#39;t be a place where you can preserve old webservers, for example, the way the HTTP web is. Today if you haveoperating hardware you could run a HTTP web server from an old SGIIrix workstation or even a DEC Ultrix machine, and every browserwould probably be happy to speak HTTP 1.0 or the like to it, eventhough the server software probably hasn&#39;t been updated since the1990s. That&#39;s not going to be possible on the HTTPS web, no matterhow meticulously you maintain old environments.\n Another, more relevant side of this is that it&#39;s not going to bepossible for people with web servers to just let them sit. The morethe HTTPS world changes and requires you to change, the more yourHTTPS web server requires ongoing work. If you ignore it and skipthat work, what happens to your website is the interstitial warningthat I experienced and eventually it will stop being accepted bybrowsers at all. I expect that this is going to drive more peopleinto the arms of large operations (like Github Pages or Cloudflare)that will look after all of that for them, and a little bit moreof the indie &#39;anyone can do this&#39; spirit of the old web will fadeaway.\n (At the same time this is necessary to keep HTTPS secure, and HTTPSitself is necessary for  the usual reasons. But let&#39;snot pretend that nothing is being lost in this shift.)", "posttime": "2020-05-13 17:35:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "https", "title": "\u73b0\u4ee3\u7684HTTPS\u4e16\u754c\u5df2\u7ecf\u6ca1\u6709\u8001\u5f0fWeb\u670d\u52a1\u5668\u7684\u4f4d\u7f6e\u4e86", "title_en": "The modern HTTPS world has no place for old web servers", "transed": 1, "url": "https://utcc.utoronto.ca/~cks/space/blog/web/HTTPSNoOldServers", "via": "", "real_tags": ["https"]}, {"category": "", "categoryclass": "", "imagename": "c13b491290d5fd8c7fc1fc2d60b2bf6e.jpeg", "infoid": 1001956, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Cluegen\u662f\u4e00\u4e2a\u5141\u8bb8\u60a8\u4f7f\u7528Python\u7c7b\u578b\u7ebf\u7d22\u5b9a\u4e49\u6570\u636e\u7c7b\u7684\u5e93\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u793a\u4f8b\uff1a\n\u751f\u6210\u7684\u7c7b\u4ee5\u826f\u597d\u7684\u6587\u660e\u65b9\u5f0f\u5de5\u4f5c\uff0c\u63d0\u4f9b\u901a\u5e38\u60a8\u5fc5\u987b\u624b\u52a8\u952e\u5165\u7684__init__()\u548c__repr__()\u65b9\u6cd5\uff1a\n\u7ee7\u627f\u4e5f\u540c\u6837\u6709\u6548--\u5982\u679c\u60a8\u5728\u5b50\u7c7b\u4e2d\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u5b83\u4eec\u5c06\u6dfb\u52a0\u5230\u73b0\u6709\u5c5e\u6027\u4e2d\u3002\u4f8b\u5982\uff1a\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u53cd\u5bf9\u8005\u5f88\u5feb\u5c31\u4f1a\u6307\u51fa\uff0c\u597d\u5427\uff0c\u5b9e\u9645\u4e0a\u60a8\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684@dataclass\u3002&#34\uff1bOthe.rs migh.t help.Fully suggest.est usag.e of the attr.s library.ary.\u4ed6\u4eec\u53ef\u80fd\u662f\u6709\u9053\u7406\u7684\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\u4f60\u7684\u7c7b\uff1a\n\u662f\u3002\u662f\u7684\uff0c\u5982\u679c\u4f60\u60f3\u8ba9\u4f60\u7684\u7c7b\u5bfc\u5165\u7f13\u6162\uff0c\u88ab1000\u591a\u884c\u9519\u7efc\u590d\u6742\u7684\u88c5\u9970\u7269\u9b54\u6cd5\u6240\u5305\u88f9\uff0c\u5e76\u4e14\u4e0d\u7075\u6d3b\uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002\u6216\u8005\u4f60\u53ef\u4ee5\u7528\u7ebf\u7d22\uff01Cluegen\u5f88\u5c0f\uff0c\u53ef\u6269\u5c55\uff0c\u63d0\u4f9b\u4e86\u540c\u6837\u7684\u8bb0\u53f7\u4fbf\u5229\uff0c\u5e76\u4e14\u4ea7\u751f\u7684\u7c7b\u7684\u79fb\u690d\u901f\u5ea6\u5927\u7ea6\u5feb\u4e8620\u500d(\u6709\u5173\u57fa\u51c6\uff0c\u8bf7\u53c2\u9605Perf.py\u6587\u4ef6)\u3002\n\u5728\u5e55\u540e\uff0cCluegen\u901a\u8fc7\u4e3a__init__()\u548c__repr__()\u7b49\u65b9\u6cd5\u52a8\u6001\u521b\u5efa\u4ee3\u7801\u6765\u5de5\u4f5c\u3002\u6b64\u4ee3\u7801\u770b\u8d77\u6765\u4e0e\u60a8\u901a\u5e38\u624b\u5199\u7684\u4ee3\u7801\u5b8c\u5168\u76f8\u540c\u3002\u5b83\u4e0e@DataClass\u88c5\u9970\u5668\u521b\u5efa\u7684\u4ee3\u7801\u7c7b\u578b\u76f8\u540c\u3002\u4e0d\u8fc7\uff0cCluegen\u7684\u4e00\u4e2a\u663e\u8457\u7279\u5f81\u662f\uff0c\u5b83\u7684\u6240\u6709\u4ee3\u7801\u751f\u6210\u90fd\u662f\u60f0\u6027\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u771f\u6b63\u9700\u8981\u65b9\u6cd5\u4e4b\u524d\uff0c\u4e0d\u4f1a\u751f\u6210\u4efb\u4f55\u65b9\u6cd5\u3002\u5bf9\u4e8e\u7a0b\u5e8f\u53ef\u80fd\u53ea\u4f7f\u7528\u5df2\u5b9a\u4e49\u6570\u636e\u7c7b\u7684\u5b50\u96c6\u7684\u60c5\u51b5\uff0c\u8fd9\u5927\u5927\u51cf\u5c11\u4e86\u5bfc\u5165\u548c\u542f\u52a8\u65f6\u95f4\u3002\u60a8\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u60a8\u4e0d\u4f7f\u7528\u7684\u529f\u80fd\u800c\u53d7\u5230\u60e9\u7f5a\u3002\u5373\u4f7f\u786e\u5b9e\u4f7f\u7528\u4e86\u6240\u6709\u529f\u80fd\uff0c\u5b83\u4ecd\u7136\u6bd4\u6570\u636e\u7c7b\u5feb\u3002\u54c8\u54c8\uff01\n\u7ebf\u7d22\u53ef\u4ee5\u901a\u8fc7\u6709\u8da3\u7684\u65b9\u5f0f\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u60f3\u8981\u5c06\u60a8\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u4ee3\u7801\u751f\u6210\u65b9\u6cd5\u6dfb\u52a0\u5230Datum\u7c7b\u4e2d\u3002\u4e0b\u9762\u662f\u4f60\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\nFrom Cluegen import Datum\uff0cCluegen\uff0cAll_Cluesclass Mytum(Datum)\uff1a@cluegen def as_dict(Cls)\uff1aClues=all_Clues(Cls)return(&#39\uff1bdef as_dict(Self)\uff1a\\n&#39\uff1b+&#39\uff1b\\n&#39\uff1b\\n&#39\uff1b\\n&#39\uff1b.join(f&#39\uff1b{key\uff01r})\uff1asel.{key}\uff0c\\n&#\u3002)\u7c7b\u70b9(Mytum)\uff1ax\uff1aint y\uff1aint\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u7c7b\u4e2d\u63d0\u4f9b\u4e86\u4fee\u9970\u540e\u7684as_dict()\u65b9\u6cd5\u3002\u5728\u672c\u4f8b\u4e2d\uff0cCLS\u5c06\u4e3aPoint\u3002\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff1a\u4ece\u7c7b\u4e2d\u6536\u96c6\u6240\u6709\u7c7b\u578b\u7ebf\u7d22\uff0c\u5305\u62ec\u57fa\u7c7b\u4e2d\u7684\u7ebf\u7d22\u3002\u5bf9\u4e8e\u672c\u4f8b\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178{&#39\uff1bx&#39\uff1b\uff1aint\uff0c&#39\uff1by&#39\uff1b\uff1aint}\u3002as_dict()\u8fd4\u56de\u7684\u503c\u662f\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u5b9e\u9645\u7684as_dict()\u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u5c31\u50cf\u60a8\u624b\u5de5\u7f16\u5199\u5b83\u4e00\u6837\u3002\u6b64\u6587\u672c\u5b57\u7b26\u4e32\u6267\u884c\u4e00\u6b21\uff0c\u4ee5\u521b\u5efa\u66ff\u6362\u4fee\u9970\u7248\u672c\u7684\u65b9\u6cd5\u3002\u4ece\u8fd9\u4e00\u70b9\u5f00\u59cb\uff0c\u7c7b\u6539\u7528\u751f\u6210\u7684\u4ee3\u7801\u3002\nCluegen\u6ca1\u6709\u592a\u591a\u5176\u4ed6\u82b1\u54e8\u7684\u4e1c\u897f--\u6574\u4e2a\u5b9e\u73b0\u5927\u7ea6\u6709100\u884c\u4ee3\u7801\u3002\u5b83\u662f\u4f60\u53ef\u4ee5\u7406\u89e3\u3001\u4fee\u6539\u548c\u73a9\u5f04\u7684\u4e1c\u897f\u3002\n\u66fe\u7ecf\uff0c\u6709\u4e00\u4e2a\u5f00\u53d1\u5546\u3002\u4e3a\u4e86\u8fd9\u4e2a\u6545\u4e8b\uff0c\u8ba9\u6211\u4eec\u79f0\u4ed6\u4e3a\u6234\u592b\u3002\u6b63\u5982\u6234\u592b\u60f3\u505a\u7684\u90a3\u6837\uff0c\u4ed6\u559c\u6b22\u7f16\u5199\u7f16\u8bd1\u5668\u3002\u7f16\u8bd1\u5668\u662f\u4e00\u4e2a\u5f88\u81ea\u7136\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5947\u7279\u7684\u4e1c\u897f\uff0c\u6bd4\u5982adataclass--\u7279\u522b\u662f\u5bf9\u4e8e\u6240\u6709\u7684\u6811\u7ed3\u6784\u3002\u6240\u4ee5\uff0c\u6234\u592b\u5c31\u8fd9\u4e48\u505a\u4e86\uff1a\n\u4ece\u6570\u636e\u7c7b\u5bfc\u5165dataclass@dataclassclass\u8282\u70b9\uff1apass@dataclassclass\u8868\u8fbe\u5f0f(\u8282\u70b9)\uff1apass@dataclassclass\u8bed\u53e5(\u8282\u70b9)\uff1apass@dataclassclass\u6574\u6570(\u8868\u8fbe\u5f0f)\uff1avalue\uff1aint@dataclassclass BinOp(\u8868\u8fbe\u5f0f)\uff1aop\uff1astr\u5de6\u4fa7\uff1a\u8868\u8fbe\u5f0f\u53f3\u4fa7\uff1aexpression@dataclassclass UnaryOp(\u8868\u8fbe\u5f0f)\uff1aop\uff1astr\u64cd\u4f5c\u6570\uff1aexpression@dataclassclass PrintStatement(\u8bed\u53e5\u3002\n\u8fd9\u4e00\u5207\u90fd\u5f88\u6709\u6548--\u5b9e\u9645\u4e0a\u6bd4\u9884\u671f\u7684\u8981\u597d\u3002\u7136\u800c\uff0c\u6709\u4e00\u5929\uff0cDave\u8ba4\u4e3a\u7ed9\u6240\u6709\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a\u53ef\u9009\u7684\u884c\u53f7\u5c5e\u6027\u4f1a\u5f88\u6709\u7528\u3002\u81ea\u7136\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u53ef\u4ee5\u5728\u57fa\u7c7b\u4e0a\u8f7b\u677e\u5b8c\u6210\u7684\u4e8b\u60c5\uff1a\n\u6234\u592b\u60f3\u9519\u4e86\uff01\u5982\u679c\u8fd9\u6837\u505a\uff0c\u6570\u636e\u7c7b\u5c31\u4f1a\u50cf\u706b\u7403\u4e00\u6837\u7206\u70b8\u3002\u4e0d\uff0c\u4e0d\u662f\u53ef\u9009\u5c5e\u6027\u3002\u4e0d\u662f\uff0c\u662f\u57fa\u7c7b\u3002\u5509\uff0c\u552f\u4e00\u7684\u89e3\u51b3\u65b9\u6848\u4f3c\u4e4e\u6d89\u53ca\u590d\u5236\u4e00\u4e2alineno\u5c5e\u6027\u6765\u7ed3\u675f\u6bcf\u4e2a\u7c7b\u3002\u5982\u679cDave\u6709\u4e00\u70b9\u5173\u4e8e\u7ebf\u7d22\u7684\u7ebf\u7d22\uff0c\u4ed6\u53ea\u9700\u5728__init__()\u7684\u4ee3\u7801\u751f\u6210\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5c0f\u8c03\u6574\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\n\u4ece\u7ebf\u7d22\u5bfc\u5165\u6570\u636e\uff0cALL_CLOES\uff0cCLOLEGEN\u7c7b\u8282\u70b9(DATUM)\uff1alineno=None@cluegen def__init__(Cls)\uff1aClaes=all_Claes(CLS)args=&#39\uff1b\uff0c&#39\uff1b.join(f&#39\uff1b{name}={getattr(cls\uff0cname)\uff01r}&#39\uff1bif hasattr(cls\uff0cname)\uff0c\u800c\u4e0d\u662fisinstance(getattr(CLS\uff0cname).Join(f&#39\uff1b{name}={getattr(cls\uff0cname)\uff01r}&#39\uff1bif hasattr(cls\uff0cname)and not isinstance(getattr(CLS\uff0cname)\u3002sel.{name}={name}&#39\uff1b\u8868\u793a\u7ebf\u7d22\u4e2d\u7684\u540d\u79f0)Body+=&#39\uff1b\\n self.lineno=lineno&#39\uff1breturn f&#39\uff1bdef__init__(self\uff0c{args}\uff0c*\uff0clineno=None)\uff1a\\n{body}\\n&#39\uff1bclass expression(Nodum)\uff1apassclass\u8bed\u53e5(Nodump)\uff1apassclass Integer(Expression)\uff1avalue\uff1aintclass BinOp(Expression)\uff1a\n\u8fd9\u4e2a\u6545\u4e8b\u7684\u5bd3\u610f\u662f\uff0c\u7ebf\u7d22\u4ee3\u8868\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u529b\u91cf--\u505a\u4f60\u60f3\u505a\u7684\u4e8b\u60c5\u7684\u6743\u529b\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u5141\u8bb8\u7684\u6743\u529b\u3002\u8fd9\u4e00\u5207\u90fd\u4e0e\u4f60\u6709\u5173\uff01\n\u63d0\u4f9b\u7684Datum\u7c7b\u4e3a\u4e00\u7ec4\u5e38\u89c1\u7684defaultmethod\u751f\u6210\u4ee3\u7801\u3002\u5982\u679c\u4f60\u60f3\u53bb\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u65b9\u5411\uff0c\u4f60\u771f\u7684\u4e0d\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u5e0c\u671b\u653e\u5f03\u7c7b\u578b\u63d0\u793a\uff0c\u8f6c\u800c\u57fa\u4e8e__\u69fd__\u751f\u6210\u4ee3\u7801\u3002\u4e0b\u9762\u662f\u4f60\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\u4ececluegen import DatumBase\u4e2d\uff0ccluegendef all_slot(CLS)\uff1aCLS\u4e2dCLS\u7684\u63d2\u69fd=[]\u3002__mro__\uff1aslot[0\uff1a0]=getattr(cls\uff0c&#39\uff1b__slot_&#39\uff1b\uff0c[])\u8fd4\u56deslotsclass Slotum(DatumBase)\uff1a__slot__=()@cluegen def__init_(Cls)\uff1aslot=all_slot\u3002.join(\u63d2\u69fd)+&#39\uff1b)\uff1a\\n&#39\uff1b+&#39\uff1b\\n&#39\uff1b.join(f&#39\uff1bsel.{name}={name}&#39\uff1bfor name in slot))@cluegen def__repr__(Cls)\uff1aslot=all_slot(Cls)return(&#39\uff1bdef_repr__(Self)\uff1a\\n&#39\uff1b+f&#39\uff1breturn f&#\u3002\uff0c&#39\uff1b.join(&#39\uff1b%s={sel.%s\uff01r}&#39\uff1b%(name\uff0cname)\u8868\u793a\u63d2\u69fd\u4e2d\u7684\u540d\u79f0)+&#39\uff1b)&#34\uff1b&#39\uff1b)\u3002\n\u4e00\u4e9b\u5b57\u7b26\u4e32\u683c\u5f0f\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u8003\u8651\u3002\u4e0d\u8fc7\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u60a8\u5982\u4f55\u4f7f\u7528Slotum\u7684\u793a\u4f8b\uff1a\n&gt\uff1b&gt\uff1b&gt\uff1b\u7c7b\u79ef\u5206(SLOTUM)\uff1a.__\u63d2\u69fd__=(&#39\uff1bx&#39\uff1b\uff0c&#39\uff1by&#39\uff1b).\u3002&gt\uff1b&gt\uff1b&gt\uff1bp=Point(2\uff0c3)&gt\uff1b&gt\uff1b&gt\uff1bpPoint(x=2\uff0cy=3)&gt\uff1b&gt\uff1b&gt\uff1b\u7c7bPoint3(\u70b9)\uff1a.__\u63d2\u69fd__=(&#39\uff1bz&#39\uff1b\uff0c).\u3002&gt\uff1b&gt\uff1b&gt\uff1bp3=Point3(2\uff0c3\uff0c4)&gt\uff1b&gt\uff1b&gt\uff1bp3Point3(x=2\uff0cy=3\uff0cz=4)&gt\uff1b&gt\uff1b\nCluegen\u57fa\u4e8ePython\u7684\u63cf\u8ff0\u7b26\u534f\u8bae\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u6bcf\u5f53\u60a8\u8bbf\u95ee\u7c7b\u7684\u5c5e\u6027\u65f6\uff0cPython\u90fd\u4f1a\u67e5\u627e\u5b9e\u73b0\u9b54\u672f__get__()\u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\u5982\u679c\u627e\u5230\uff0c\u5b83\u5c06\u4f7f\u7528\u5173\u8054\u7684\u5b9e\u4f8b\u548c\u7c7b\u8c03\u7528__get__()\u3002Cluegen\u4f7f\u7528\u5b83\u5728\u9996\u6b21\u8bbf\u95ee\u7279\u6b8a\u65b9\u6cd5(\u5982__init__())\u65f6\u751f\u6210\u4ee3\u7801\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u673a\u5668\u5728\u8fd0\u8f6c\u7684\u4f8b\u5b50\u3002\n\u73b0\u5728\uff0c\u770b\u770b\u7c7b\u5b57\u5178\u4e2d\u7684__init__()\u65b9\u6cd5\u3002\u60a8\u5c06\u770b\u5230\u8fd9\u662f\u67d0\u79cd\u5947\u602a\u7684ClueGen\u5b9e\u4f8b\uff1a\n\u6b64\u5bf9\u8c61\u8868\u793a&#34\uff1b\u672a\u751f\u6210\u7684&#34\uff1b\u65b9\u6cd5\u3002\u5982\u679c\u60a8\u4ee5\u4efb\u4f55\u65b9\u5f0f\u89e6\u6478\u7c7b\u4e0a\u7684__init__\u5c5e\u6027\uff0c\u60a8\u5c06\u770b\u5230Cluegenobject\u6d88\u5931\uff0c\u5e76\u7531\u9002\u5f53\u7684\u51fd\u6570\u66ff\u6362\uff1a\n\u8fd9\u662f\u57fa\u672c\u601d\u60f3--\u7b2c\u4e00\u6b21\u8bbf\u95ee\u5c5e\u6027\u65f6\u751f\u6210\u4ee3\u7801\u3002\u7ee7\u627f\u7ed9\u65b9\u7a0b\u5f0f\u589e\u52a0\u4e86\u989d\u5916\u7684\u8936\u76b1\u3002\u5047\u8bbe\u60a8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b50\u7c7b\uff1a\n\u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u770b\u5230ClueGen\uff1b\u5bf9\u8c61\u8fd4\u56de\u5230\u7c7b\u5b57\u5178\u3002\u6b64\u5916\uff0c\u5f53\u5b83\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u65f6\uff0c\u5b83\u4f1a\u88ab\u66ff\u6362\u3002\u4e0b\u9762\u662f\u521b\u5efa\u5b9e\u4f8b\u65f6\u5728\u8f83\u4f4e\u7ea7\u522b\u4e0a\u53d1\u751f\u7684\u60c5\u51b5\uff1a\n&gt\uff1b&gt\uff1b&gt\uff1bi=Point3.__dict__[&#39\uff1b__init__&#39\uff1b]&gt\uff1b&gt\uff1b&gt\uff1bi.__Get__(None\uff0cPoint3)&lt\uff1b\u51fd\u6570__init_\u4f4d\u4e8e0x102e20950&gt\uff1b&gt\uff1bPoint3.__init__&lt\uff1b\u51fd\u6570__init__\u57280x102e20950&gt\uff1b&gt\uff1bp=Point3(1\uff0c2\uff0c3)&gt\uff1b&gt\uff1bpPoint3(x=1\uff0cy=2\uff0cz=3)&gt\uff1b&gt\uff1b&gt\uff1b\n\u8981\u83b7\u5f97\u66f4\u591a\u9605\u8bfb\uff0c\u8bf7\u67e5\u627e\u6709\u5173Python\u63cf\u8ff0\u7b26\u534f\u8bae\u7684\u4fe1\u606f\u3002\u8fd9\u4e0e\u4f7f\u5bf9\u8c61\u7cfb\u7edf\u7684\u5c5e\u6027\u3001\u7c7b\u65b9\u6cd5\u548c\u5176\u4ed6\u529f\u80fd\u5de5\u4f5c\u7684\u673a\u5236\u76f8\u540c\u3002\n\u7b54\uff1a\u6ca1\u6709\u3002\u7c7b\u578b\u4ec5\u4ec5\u662f\u5173\u4e8e\u503c\u53ef\u80fd\u662f\u4ec0\u4e48\u7684\u7ebf\u7d22\uff0cPython\u8bed\u8a00\u672c\u8eab\u4e0d\u63d0\u4f9b\u4efb\u4f55\u5f3a\u5236\u3002\u8fd9\u4e9b\u7c7b\u578b\u5728\u6267\u884c\u7c7b\u578b\u68c0\u67e5\u6216linting\u7684IDE\u6216\u7b2c\u4e09\u65b9\u5de5\u5177\u4e2d\u53ef\u80fd\u5f88\u6709\u7528\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55\u63d0\u793a\u6765\u5f3a\u5236\u6267\u884c\u7c7b\u578b\u3002\n\u7b54\uff1a\u6ca1\u6709\u3002Datum\u57fa\u7c7b\u662f\u4e00\u4e2a\u666e\u901a\u7684Python\u7c7b\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a__init_subclass__()\u65b9\u6cd5\u6765\u534f\u52a9\u5b50\u7c7b\u7684\u7ba1\u7406\uff0c\u4f46\u662f\u9664\u4e86__init__()\u3001__repr_()\u3001__iter_()\u548c__eq__()\u7b49\u6807\u51c6\u7684\u7279\u6b8a\u65b9\u6cd5\u5916\uff0c\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u3002Python\u7684\u63cf\u8ff0\u7b26\u534f\u8bae\u7528\u4e8e\u9a71\u52a8\u4ee3\u7801\u751f\u6210\u3002\n\u7b54\uff1a\u6ca1\u6709setup.py\u6587\u4ef6\u3001\u5b89\u88c5\u7a0b\u5e8f\u6216\u5b98\u65b9\u7248\u672c\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u4ee3\u7801\u590d\u5236\u5230\u60a8\u81ea\u5df1\u7684\u9879\u76ee\u4e2d\u6765\u5b89\u88c5\u5b83\u3002cluegen.py\u5f88\u5c0f\u3002\u6211\u4eec\u9f13\u52b1\u60a8\u6839\u636e\u81ea\u5df1\u7684\u76ee\u7684\u5bf9\u5176\u8fdb\u884c\u590d\u5236\u548c\u4fee\u6539\u3002\n\u7b54\uff1a\u4f60\u5e94\u8be5\u628a\u5b83\u8bfb\u6210\u201ckuludg-in\u201d\uff0c\u5c31\u50cf\u201crunnin\u201d\u6216\u8005\u201ctrippin\u201d\u4e00\u6837\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6709\u4eba\u95ee\u4f60\u5728\u505a\u4ec0\u4e48\uff0c\u4f60\u4e0d\u80fd\u8bf4\u201cm usingcluegen\u201d\u3002\u4e0d\uff0c\u4f60\u4f1a\u8bf4\u201c\u6211\u4e0a\u4e86\u4e00\u4e9b\u8bfe\u201d\u3002\u771f\u7684\u5728\u505a\u3002\u51c6\u786e\u6027\u5f88\u91cd\u8981\u3002", "note_en": "Cluegen is a library that allows you to define data classes usingPython type clues. Here&#39;s an example of how you use it:\n  The resulting class works in a well civilised way, providing theusual  __init__() and  __repr__() methods that you&#39;d normally haveto type out by hand:\n  Inheritance works as well--if you add new attributes in a subclass theyget added to the already existing attributes. For example:\n    At this point, naysayers will be quick to point out that &#34;well,actually you could just use  @dataclass from the standard library.&#34;Othe.rs migh.t help.fully sugg.est usag.e of the attr.s libr.ary.And they might have a point. I mean, sure, you could write your classlike this:\n  Yes. Yes, you could do that if you wanted your class to be slow toimport, wrapped up by more than 1000 lines of tangled decorator magic,and inflexible. Or you could use cluegen! Cluegen is tiny, extensible,provides the same notational convenience, and results in classes thatimport about 20x faster (see the file  perf.py for a benchmark).\n Under the hood,  cluegen works by dynamically creating code formethods such as  __init__() and  __repr__(). This code looksexactly the same as code you would normally write by hand. It&#39;s thesame kind of code that the  @dataclass decorator creates. A notablefeature of  cluegen however, is that all of its code generation is&#34;lazy.&#34; That is, no methods are generated until they&#39;re actuallyneeded during the execution of your program. This substantiallyreduces import and startup time for situations where a program mightonly be using a subset of the defined data classes. You also don&#39;t paya penalty for features you aren&#39;t using. And even if do use all thefeatures, it&#39;s still faster than dataclasses. Phfft!\n  cluegen is customizable in interesting ways. For example, supposeyou wanted to add your own custom code generation method to the Datum class. Here&#39;s an example of how you could do that:\n from cluegen import Datum, cluegen, all_cluesclass Mytum(Datum): @cluegen def as_dict(cls): clues = all_clues(cls) return (&#39;def as_dict(self):\\n&#39; + &#39; return {\\n&#39; + &#39;\\n&#39;.join(f&#39; {key!r}: self.{key},\\n&#39; for key in clues) + &#39;}\\n&#39;)class Point(Mytum): x: int y: int\n   In the above example, the decorated  as_dict() method is presentedthe class. In this case,  cls would be  Point. The  all_clues()function is a utility function that collects all type-clues from aclass including those from base classes. For this example, it returnsa dictionary  {&#39;x&#39;: int, &#39;y&#39;: int}. The value returned by as_dict() is a text-string containing the implementation of theactual  as_dict() method as it would be if you had written it byhand. This text string is executed once to create a method thatreplaces the decorated version. From that point forward, the classuses the generated code instead.\n cluegen doesn&#39;t have too many other bells and whistles--the entireimplementation is about 100 lines of code. It&#39;s something that youcan understand, modify, and play around with.\n  Once, there was this developer. For the sake of this story, let&#39;s callhim &#34;Dave.&#34; As Dave was want to do, he liked to write compilers. Acompiler is a natural place to use something fancy like adataclass--especially for all of the tree structures. So, Dave did just that:\n from dataclasses import dataclass@dataclassclass Node: pass@dataclassclass Expression(Node): pass@dataclassclass Statement(Node): pass@dataclassclass Integer(Expression): value: int@dataclassclass BinOp(Expression): op: str left: Expression right: Expression@dataclassclass UnaryOp(Expression): op: str operand: Expression@dataclassclass PrintStatement(Statement): value: Expression# Examplenode = PrintStatement(BinOp(&#39;+&#39;, Integer(3), BinOp(&#39;*&#39;, Integer(4), Integer(5))))\n This all worked great--better than expected in fact. However, one day, Dave thought it wouldbe useful to add an optional line number attribute to all of the nodes. Naturally, thisseemed like something that could be easily done on the base class:\n  Dave thought wrong! Dataclasses explode in a fireball if you do this.No, not optional attributes. Not, base classes. Alas, the onlysolution seemed to involve copying a  lineno attribute to end ofevery class. If Dave had had a clue about cluegen, he could have easilysolved this problem by just adding a minor tweak to the code generation for  __init__():\n from cluegen import Datum, all_clues, cluegenclass Nodum(Datum): lineno = None @cluegen def __init__(cls): clues = all_clues(cls) args = &#39;, &#39;.join(f&#39;{name}={getattr(cls,name)!r}&#39; if hasattr(cls, name) and not isinstance(getattr(cls, name), types.MemberDescriptorType) else name for name in clues) body = &#39;\\n&#39;.join(f&#39; self.{name} = {name}&#39; for name in clues) body += &#39;\\n self.lineno = lineno&#39; return f&#39;def __init__(self, {args}, *, lineno=None):\\n{body}\\n&#39;class Expression(Nodum): passclass Statement(Nodum): passclass Integer(Expression): value: intclass BinOp(Expression): op: str left: Expression right: Expressionclass UnaryOp(Expression): op: str operand: Expressionclass PrintStatement(Statement): value: Expression\n   The moral of this story is that cluegen represents a different kind apower--the power to do what YOU want as opposed what THEY allow. It&#39;sall about YOU!\n  The provided  Datum class generates code for a common set of defaultmethods. You really don&#39;t need to use this if you want to go in acompletely different direction. For example, suppose that youwanted to abandon type hints and generate code based on  __slots__instead. Here&#39;s an example of how you could do it:\n from cluegen import DatumBase, cluegendef all_slots(cls): slots = [] for cls in cls.__mro__: slots[0:0] = getattr(cls, &#39;__slots__&#39;, []) return slotsclass Slotum(DatumBase): __slots__ = () @cluegen def __init__(cls): slots = all_slots(cls) return (&#39;def __init__(self, &#39; + &#39;,&#39;.join(slots) + &#39;):\\n&#39; + &#39;\\n&#39;.join(f&#39; self.{name} = {name}&#39; for name in slots) ) @cluegen def __repr__(cls): slots = all_slots(cls) return (&#39;def __repr__(self):\\n&#39; + f&#39; return f&#34;{cls.__name__}(&#39; + &#39;,&#39;.join(&#39;%s={self.%s!r}&#39; % (name, name) for name in slots) + &#39;)&#34;&#39; )\n Some of the string formatting might take a bit of pondering. However, here is anexample of how you&#39;d use  Slotum:\n &gt;&gt;&gt; class Point(Slotum):... __slots__ = (&#39;x&#39;, &#39;y&#39;)... &gt;&gt;&gt; p = Point(2,3)&gt;&gt;&gt; pPoint(x=2,y=3)&gt;&gt;&gt; class Point3(Point):... __slots__ = (&#39;z&#39;,)... &gt;&gt;&gt; p3 = Point3(2,3,4)&gt;&gt;&gt; p3Point3(x=2,y=3,z=4)&gt;&gt;&gt;\n  Cluegen is based on Python&#39;s descriptor protocol. In a nutshell, wheneveryou access an attribute of a class, Python looks for an object thatimplements a magic  __get__() method. If found, it invokes  __get__()with the associated instance and class. Cluegen uses this to generatecode on first-access to special methods such as  __init__(). Hereis an example of the machinery at work.\n   Now, look at the  __init__() method in the class dictionary. You&#39;llsee that&#39;s some kind of strange &#34;ClueGen&#34; instance:\n  This object represents the &#34;ungenerated&#34; method. If you touch the __init__ attribute on the class in any way, you&#39;ll see the Cluegenobject disappear and be replaced by a proper function:\n  This is the basic idea--code generation on first access to anattribute. Inheritance adds an extra wrinkle into the equation.Suppose you define a subclass:\n  Here, you&#39;ll see the &#34;ClueGen&#34; object make a return to the class dictionary.Again, it gets replaced when it&#39;s first accessed. Here&#39;s what happensat a low level when you make an instance:\n &gt;&gt;&gt; i = Point3.__dict__[&#39;__init__&#39;]&gt;&gt;&gt; i.__get__(None, Point3)&lt;function __init__ at 0x102e20950&gt;&gt;&gt;&gt; Point3.__init__&lt;function __init__ at 0x102e20950&gt;&gt;&gt;&gt; p = Point3(1,2,3)&gt;&gt;&gt; pPoint3(x=1, y=2, z=3)&gt;&gt;&gt;\n For more reading, look for information on Python&#39;s &#34;Descriptor Protocol.&#34;This is the same machinery that makes properties, classmethods, and otherfeatures of the object system work.\n     A: No. The types are merely clues about what the value might be andthe Python language does not provide any enforcement on its own. Thetypes might be useful in an IDE or third-party tools that performtype-checking or linting. You could probably extend  cluegen toenforce types if you wanted though.\n  A: No. The  Datum base class is a plain Python class. It defines an __init_subclass__() method to assist with the management ofsubclasses, but nothing other than the standard special methodssuch as  __init__(),  __repr__(),  __iter__(), and  __eq__() aredefined. Python&#39;s descriptor protocol is used to drive code generation.\n  A: There is no  setup.py file, installer, or an official release. Youinstall it by copying the code into your own project.  cluegen.py issmall. You are encouraged to copy and modify it to your own purposes.\n    A: You should pronounce it as &#34;kludg-in&#34; as in &#34;runnin&#34; or &#34;trippin&#34;.So, if someone asks &#34;what are you doing?&#34;, you don&#39;t say &#34;I&#39;m usingcluegen.&#34; No, you&#39;d say &#34;I&#39;m kludgin up some classes.&#34; The latter ismore accurate as it describes both the tool and the thing that you&#39;reactually doing. Accuracy matters.", "posttime": "2020-05-13 17:21:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u60f0\u6027,lazy,\u65b9\u6cd5", "title": "Python\u60f0\u6027\u6570\u636e\u7c7b\uff0c\u5bfc\u5165\u901f\u5ea6\u63d0\u9ad820\u500d", "title_en": "Python lazy dataclasses, import 20x faster", "transed": 1, "url": "https://github.com/dabeaz/cluegen", "via": "", "real_tags": ["python", "\u60f0\u6027", "lazy", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001954, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u4eec\u603b\u662f\u6ee5\u7528\u6392\u961f\u3002\u6700\u4ee4\u4eba\u9707\u60ca\u7684\u6848\u4f8b\u662f\u4fee\u590d\u901f\u5ea6\u8f83\u6162\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u95ee\u9898\uff0c\u4ece\u800c\u5bfc\u81f4\u8fc7\u8f7d\u3002\u4f46\u8981\u8bf4\u660e\u539f\u56e0\uff0c\u6211\u9700\u8981\u5e26\u4e0a\u4e00\u4e9b\u6211\u5728\u8fd9\u4e2a\u5730\u65b9\u7684\u6f14\u8bb2\u548c\u6587\u672c\uff0c\u4ee5\u53ca\u6211\u5728\u6124\u6012\u4e2d\u7528Erlang\u5199\u7684\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\u3002\n\u4e3a\u4e86\u5c06\u4e8b\u60c5\u8fc7\u4e8e\u7b80\u5355\u5316\uff0c\u6211\u6700\u7ec8\u4ece\u4e8b\u7684\u5927\u591a\u6570\u9879\u76ee\u90fd\u53ef\u4ee5\u60f3\u8c61\u6210\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6d74\u5ba4\u6d17\u624b\u6c60\u3002\u7528\u6237\u548c\u6570\u636e\u8f93\u5165\u4ece\u6c34\u9f99\u5934\u5411\u4e0b\u6d41\u52a8\uff0c\u76f4\u5230\u7cfb\u7edf\u8f93\u51fa\uff1a\n\u56e0\u6b64\uff0c\u5728\u6b63\u5e38\u64cd\u4f5c\u4e0b\uff0c\u60a8\u7684\u7cfb\u7edf\u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684\u6240\u6709\u6570\u636e\uff0c\u5e76\u5f88\u597d\u5730\u6267\u884c\u8fd9\u4e9b\u6570\u636e\uff1a\n\u6c34\u8fdb\u4e86\uff0c\u6c34\u51fa\u4e86\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5f88\u5f00\u5fc3\u3002\u4f46\u662f\uff0c\u6709\u65f6\u60a8\u4f1a\u770b\u5230\u7cfb\u7edf\u4e0a\u51fa\u73b0\u4e34\u65f6\u8fc7\u8f7d\u3002\u5982\u679c\u4f60\u53d1\u4fe1\u606f\uff0c\u8fd9\u5c06\u56f4\u7ed5\u7740\u4f53\u80b2\u8d5b\u4e8b\u6216\u65b0\u5e74\u524d\u5915\u8fd9\u6837\u7684\u4e8b\u4ef6\u5c55\u5f00\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u65b0\u95fb\u7f51\u7ad9\uff0c\u90a3\u5c31\u662f\u5f53\u4e00\u4ef6\u5927\u4e8b\u53d1\u751f\u7684\u65f6\u5019(\u7f8e\u56fd\u7684\u9009\u4e3e\uff0c\u82f1\u56fd\u7684\u738b\u5ba4\u5b9d\u5b9d\uff0c\u6709\u4eba\u8bf4\u4ed6\u4eec\u4e0d\u559c\u6b22\u628a\u6cd5\u8bed\u4f5c\u4e3a\u9b41\u5317\u514b\u7684\u4e00\u79cd\u8bed\u8a00)\u3002\n\u7cfb\u7edf\u8f93\u51fa\u7684\u6570\u636e\u4ecd\u7136\u6709\u9650\uff0c\u8f93\u5165\u7684\u901f\u5ea6\u8d8a\u6765\u8d8a\u5feb\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0cWeb\u7528\u6237\u5c06\u4f7f\u7528\u8bf8\u5982\u7f13\u5b58\u4e4b\u7c7b\u7684\u4e1c\u897f\u6765\u5b9e\u73b0\u5b83\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u6240\u9700\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u5176\u4ed6\u7cfb\u7edf\u5c06\u4f7f\u7528\u5de8\u5927\u7684\u7f13\u51b2\u533a(\u961f\u5217\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a\u63a5\u6536\u5668)\u6765\u4fdd\u5b58\u4e34\u65f6\u6570\u636e\u3002\n\u5f53\u4f60\u4e0d\u53ef\u907f\u514d\u5730\u9047\u5230\u957f\u671f\u8d85\u8f7d\u65f6\uff0c\u95ee\u9898\u5c31\u6765\u4e86\u3002\u8fd9\u662f\u5f53\u4f60\u770b\u7740\u4f60\u7684\u7cfb\u7edf\u8d1f\u8f7d\uff0c\u54e6\uff0c\u5929\u54ea\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u6389\u4e0b\u6765\u3002\u7ed3\u679c\u53d1\u73b0\u5965\u5df4\u9a6c\u4e0d\u60f3\u4ea4\u51fa\u4ed6\u7684\u51fa\u751f\u8bc1\u660e\uff0c\u738b\u5ba4\u5b9d\u5b9d\u770b\u8d77\u6765\u4e0d\u50cf\u4ed6\u7684\u7236\u4eb2\uff0c\u6709\u4eba\u8bf4\u9b41\u5317\u514b\u5e94\u8be5\u66f4\u597d\u5730\u4f7f\u7528\u5df4\u9ece\u6cd5\u8bed\uff0c\u800c\u4e14\u8c23\u8a00\u4e00\u6b21\u4f20\u4e86\u597d\u51e0\u5929\u751a\u81f3\u51e0\u5468\uff1a\n\u7a81\u7136\u4e4b\u95f4\uff0c\u7f13\u51b2\u533a\u3001\u961f\u5217\u4e4b\u7c7b\u7684\u4e1c\u897f\u518d\u4e5f\u5904\u7406\u4e0d\u4e0b\u53bb\u4e86\u3002\u60a8\u6b63\u5904\u4e8e\u5371\u6025\u72b6\u6001\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u5668\u5192\u70df\uff0c\u6216\u8005\u5982\u679c\u5728\u4e91\u4e2d\uff0c\u60c5\u51b5\u548c\u5f80\u5e38\u4e00\u6837\u7cdf\u7cd5\uff0c\u4f46\u60c5\u51b5\u4f1a\u66f4\u7cdf\uff01\n\u54ce\u5440\uff0c\u5927\u5bb6\u90fd\u6b7b\u4e86\uff0c\u4f60\u51cc\u66683\u70b9\u5c31\u5728\u529e\u516c\u5ba4\u91cc(\u4ed6\u5728\u7f8e\u56fd\u8ba4\u8bc6\u8fd9\u4e48\u591a\u4eba\uff0c\u538c\u6076\u4ed6\u4eec\u7684\u80af\u5c3c\u4e9a\u603b\u7edf\uff0c\u73b0\u5728\u60f3\u77e5\u9053\u5173\u4e8e\u738b\u5ba4\u5b9d\u5b9d\u7684\u6d88\u606f\uff0c\u800c\u9b41\u5317\u514b\u4eba\u5374\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u62ac\u5934\u770b\u7740\u5e26\u5976\u916a\u5b9d\u5b9d\u7684\u7687\u5bb6\u9e21\u5c3e\u9152)\u3002\n\u60a8\u53ef\u4ee5\u67e5\u770b\u5806\u6808\u8ddf\u8e2a\u3001\u961f\u5217\u3001DB\u6162\u67e5\u8be2\u548c\u60a8\u8c03\u7528\u7684API\u3002\u4f60\u4e00\u6b21\u8981\u82b1\u51e0\u5468\u7684\u65f6\u95f4\u6765\u4f18\u5316\u6bcf\u4e2a\u7ec4\u4ef6\uff0c\u786e\u4fdd\u5b83\u59cb\u7ec8\u662f\u597d\u7684\u548c\u575a\u5b9e\u7684\u3002\u4e8b\u60c5\u4e00\u76f4\u5728\u5d29\u6e83\uff0c\u4f46\u4f60\u6bcf\u6b21\u90fd\u8981\u591a\u82b12-3\u5929\u7684\u65f6\u95f4\u3002\n\u6700\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\u95ee\u9898\u5806\u79ef\u5982\u5c71\uff0c\u4f46\u6bcf\u4e00\u6b21\u5931\u8d25\u4e4b\u95f4\u76f8\u9694\u4e00\u5468\uff0c\u8fd9\u4f1a\u6781\u5927\u5730\u51cf\u6162\u4f60\u7684\u4f18\u5316\u901f\u5ea6\uff0c\u56e0\u4e3a\u5f53\u4e8b\u60c5\u9700\u8981\u51e0\u5468\u7684\u65f6\u95f4\u624d\u4f1a\u53d8\u574f\u7684\u65f6\u5019\uff0c\u8861\u91cf\u5b83\u4eec\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\n\u4f60\u53bb\u5427\uff0c\u597d\u5427\uff0c\u6211\u5df2\u7ecf\u6ca1\u6709\u4e3b\u610f\u4e86\uff0c\u8ba9\u6211\u4eec\u4e70\u4e00\u53f0\u66f4\u5927\u7684\u670d\u52a1\u5668\u5427\u3002\u7cfb\u7edf\u6700\u7ec8\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u5b83\u8fd8\u662f\u51fa\u4e86\u6545\u969c\uff1a\u3002\n\u9664\u4e86\u73b0\u5728\uff0c\u5b83\u662f\u4e00\u5757\u65e0\u6cd5\u7ef4\u62a4\u7684\u5783\u573e\uff0c\u91cc\u9762\u88c5\u6ee1\u4e86\u80ae\u810f\u7684\u9ed1\u5ba2\uff0c\u4f7f\u5b83\u5de5\u4f5c\u8d77\u6765\u7684\u6210\u672c\u662f\u4ee5\u524d\u76845\u500d\uff0c\u800c\u4e14\u4f60\u5df2\u7ecf\u62ff\u4e86\u51e0\u4e2a\u6708\u7684\u94b1\u6765\u4f18\u5316\u5b83\uff0c\u6ca1\u6709\u4efb\u4f55\u8be5\u6b7b\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u5b83\u5728\u8d85\u8f7d\u65f6\u4ecd\u7136\u4f1a\u6b7b\u4ea1\u3002\n\u95ee\u9898\u51fa\u5728\u54ea\u91cc\uff1f\u90a3\u8fb9\u7684\u90a3\u4e2a\u7ea2\u8272\u7bad\u5934\u3002\u4f60\u8fbe\u5230\u4e86\u4e00\u4e9b\u786c\u9650\u5236\uff0c\u5373\u4f7f\u5728\u4f60\u6240\u6709\u7684\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u4e5f\u6ca1\u6709\u6b63\u786e\u5730\u8003\u8651\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u53ef\u4ee5\u662f\u6570\u636e\u5e93\u3001\u5916\u90e8\u670d\u52a1\u7684API\u3001\u78c1\u76d8\u901f\u5ea6\u3001\u5e26\u5bbd\u6216\u5e38\u89c4I/O\u9650\u5236\u3001\u5206\u9875\u901f\u5ea6\u3001CPU\u9650\u5236\u7b49\u7b49\u3002\n\u4f60\u82b1\u4e86\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u6765\u4f18\u5316\u4f60\u7684\u8d85\u7ea7\u670d\u52a1\uff0c\u7ed3\u679c\u5374\u5728\u67d0\u4e2a\u65f6\u5019\u53d1\u73b0\uff0c\u4f60\u6ca1\u6709\u66f4\u5927\u7684\u53d8\u5316\u5c31\u8d85\u8fc7\u4e86\u5b83\u7684\u6700\u4f73\u901f\u5ea6\uff0c\u5f53\u4f60\u7684\u7cfb\u7edf\u8fd0\u884c\u901f\u5ea6\u8d85\u8fc7\u8fd9\u4e2a\u786c\u9650\u5236\u7684\u90a3\u4e00\u5929\uff0c\u4f60\u6ce8\u5b9a\u8981\u8ba9\u81ea\u5df1\u9677\u5165\u4e00\u7cfb\u5217\u6c38\u6052\u7684\u7cfb\u7edf\u6545\u969c\u3002\n\u4ee4\u4eba\u6cae\u4e27\u7684\u662f\uff0c\u60a8\u53d1\u73b0\u4e00\u65e6\u60a8\u7684\u7cfb\u7edf\u6d41\u884c\u8d77\u6765\uff0c\u5c31\u4f1a\u6709\u4eba\u4f7f\u7528\u5b83\u548c\u5b83\u7684API\uff0c\u800c\u8981\u5c06\u5176\u66f4\u6539\u4e3a\u66f4\u597d\u7684\u7cfb\u7edf\u662f\u975e\u5e38\u6602\u8d35\u548c\u56f0\u96be\u7684\u3002\u7279\u522b\u662f\u56e0\u4e3a\u4f60\u53ef\u80fd\u4e0d\u5f97\u4e0d\u91cd\u65b0\u5ba1\u89c6\u4f60\u5728\u5176\u6838\u5fc3\u8bbe\u8ba1\u4e2d\u6240\u505a\u7684\u5047\u8bbe\u3002\u54ce\u5440\u3002\n\u90a3\u4f60\u9700\u8981\u4ec0\u4e48\uff1f\u5f53\u4e8b\u60c5\u53d8\u574f\u65f6\uff0c\u4f60\u9700\u8981\u6311\u9009\u5fc5\u987b\u7ed9\u4e88\u7684\u4e1c\u897f\u3002\u4f60\u5c06\u4e0d\u5f97\u4e0d\u5728\u963b\u585e\u8f93\u5165(\u80cc\u538b)\u6216\u5c06\u6570\u636e\u4e22\u5230\u5730\u677f\u4e0a(\u51cf\u8d1f)\u4e4b\u95f4\u505a\u51fa\u9009\u62e9\u3002\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u65f6\u6709\u53d1\u751f\uff0c\u6211\u4eec\u53ea\u662f\u4e0d\u60f3\u4ee5\u5f00\u53d1\u4eba\u5458\u7684\u8eab\u4efd\u8fd9\u4e48\u505a\uff0c\u597d\u50cf\u8fd9\u662f\u5728\u627f\u8ba4\u5931\u8d25\u3002\n\u4ff1\u4e50\u90e8\u524d\u7684\u4fdd\u9556\uff0c\u7ed5\u8fc7\u6c34\u575d\u7684\u6ea2\u6c34\u9053\uff0c\u9632\u6b62\u4f60\u5728\u6ee1\u6cb9\u7bb1\u91cc\u52a0\u66f4\u591a\u6c7d\u6cb9\u7684\u538b\u529b\u673a\u5236\uff0c\u7b49\u7b49\u3002\u4ed6\u4eec\u90fd\u5728\u90a3\u91cc\u5b9e\u65bd\u7cfb\u7edf\u8303\u56f4\u7684\u6d41\u91cf\u63a7\u5236\uff0c\u4ee5\u786e\u4fdd\u64cd\u4f5c\u5b89\u5168\u3002\n\u5728[\u975e\u5173\u952e]\u8f6f\u4ef6\u4e2d\uff1f\u7ba1\u4ed6\u5462\uff01\u6211\u4eec\u4ece\u4e0d\u5378\u8d27\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u6fc0\u6012\u5229\u76ca\u76f8\u5173\u8005\uff0c\u6211\u4eec\u4e5f\u4ece\u4e0d\u8003\u8651\u80cc\u538b\u3002\u901a\u5e38\uff0c\u7cfb\u7edf\u4e2d\u7684\u80cc\u538b\u662f\u9690\u542b\u7684\uff1a\u5f88\u6162\u3002\n\u5bf9\u67d0\u4e8b\u7269\u7684\u51fd\u6570/\u65b9\u6cd5\u8c03\u7528\u6700\u7ec8\u4f1a\u82b1\u8d39\u66f4\u957f\u7684\u65f6\u95f4\u5417\uff1f\u5b83\u5f88\u6162\u3002\u6ca1\u6709\u8db3\u591f\u591a\u7684\u4eba\u8ba4\u4e3a\u8fd9\u662f\u901a\u8fc7\u4f60\u7684\u8eab\u4f53\u7cfb\u7edf\u7684\u80cc\u538b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f4e\u901f\u5206\u5e03\u5f0f\u7cfb\u7edf\u5f80\u5f80\u662f\u8d85\u8f7d\u7164\u77ff\u7684\u8b66\u6212\u7ebf\u3002\u95ee\u9898\u662f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ea\u662f\u7ad9\u5728\u90a3\u91cc\u8d70\u7740\uff0c\u4e3a\u4ec0\u4e48\u4e00\u5207\u90fd\u8fd9\u4e48\u6162\uff1f\uff1f&34\uff1b\u800c\u5f00\u53d1\u4eba\u5458\u8d70\u4e86\uff0c\u6211\u4e0d\u77e5\u9053\uff01\u3002\u5c31\u662f\u8fd9\u6837\uff01\u8fd9\u5f88\u96be\uff0c\u597d\u5417\uff01&34\uff1b\n\u8fd9\u901a\u5e38\u662f\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9(\u53ef\u80fd\u662f\u7f51\u7edc\uff0c\u6216\u8005\u5728\u6ca1\u6709\u9002\u5f53\u5de5\u5177\u7684\u60c5\u51b5\u4e0b\u51e0\u4e4e\u4e0d\u53ef\u80fd\u89c2\u5bdf\u5230\u7684\u4e1c\u897f\uff0c\u5982TCP incast)\uff0c\u6709\u4e9b\u4e1c\u897f\u88ab\u963b\u585e\u4e86\uff0c\u5176\u4ed6\u6240\u6709\u4e1c\u897f\u90fd\u4f1a\u5c06\u5176\u63a8\u56de\u5230\u7cfb\u7edf\u7684\u8fb9\u7f18\uff0c\u7ed9\u7528\u6237\u3002\n\u80cc\u538b\u4f1a\u8ba9\u7cfb\u7edf\u53d8\u6162\u5417\uff1f\u5b83\u964d\u4f4e\u4e86\u7528\u6237\u8f93\u5165\u6570\u636e\u7684\u901f\u5ea6\u3002\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4f60\u7684\u6574\u4e2a\u5806\u6808\u4fdd\u6301\u6d3b\u529b\u3002\u4f60\u77e5\u9053\u4eba\u4eec\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u4f7f\u7528\u6392\u961f\u5417\uff1f\u5c31\u5728\u90a3\u513f\u3002\u5f53\u64cd\u4f5c\u65f6\u95f4\u592a\u957f\u5e76\u963b\u585e\u4e86\u4e1c\u897f\u65f6\uff0c\u4eba\u4eec\u5c31\u4f1a\u5728\u7cfb\u7edf\u4e2d\u5f15\u5165\u4e00\u4e2a\u602a\u5f02\u7684\u961f\u5217\u3002\n\u800c\u4e14\u6548\u679c\u7acb\u7aff\u89c1\u5f71\u3002\u66fe\u7ecf\u8fd0\u884c\u7f13\u6162\u7684\u5e94\u7528\u7a0b\u5e8f\u73b0\u5728\u53c8\u6062\u590d\u4e86\u901f\u5ea6\u3002\u5f53\u7136\uff0c\u60a8\u9700\u8981\u91cd\u65b0\u8bbe\u8ba1\u6574\u4e2a\u754c\u9762\u4ee5\u53ca\u4ea4\u4e92\u548c\u62a5\u544a\u673a\u5236\uff0c\u4ee5\u4f7f\u5176\u6210\u4e3a\u5f02\u6b65\u7684\uff0c\u4f46\u8fd9\u771f\u662f\u592a\u5feb\u4e86\uff01\n\u9664\u975e\u5728\u67d0\u4e2a\u65f6\u5019\u961f\u5217\u6ea2\u51fa\uff0c\u60a8\u4f1a\u4e22\u5931\u6240\u6709\u6570\u636e\u3002\u8fd9\u662f\u4e00\u4e2a\u4e25\u8083\u7684\u4f1a\u8bae\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u5728\u4f1a\u4e0a\u8ba8\u8bba\u8fd9\u662f\u600e\u4e48\u53ef\u80fd\u53d1\u751f\u7684\u3002Dev#3\u5efa\u8bae\u6dfb\u52a0\u66f4\u591a\u7684Worker\uff0cDev#6\u5efa\u8bae\u961f\u5217\u83b7\u5f97\u6301\u4e45\u6027\uff0c\u8fd9\u6837\u5f53\u5b83\u5d29\u6e83\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u8bf7\u6c42\u3002\n\u5927\u5bb6\u90fd\u8bf4\u5f88\u9177\u3002\u53bb\u4e0a\u73ed\u4e86\u3002\u9664\u975e\u5230\u4e86\u67d0\u4e2a\u65f6\u5019\uff0c\u7cfb\u7edf\u53c8\u6b7b\u4e86\u3002\u961f\u4f0d\u53c8\u56de\u5230\u4e86\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u5df2\u7ecf\u6324\u6ee1\u4e86\u4eba\u3002Dev#5\u8d70\u8fdb\u53bb\u60f3\uff0c\u54e6\uff0c\u5bf9\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u589e\u52a0\u66f4\u591a\u7684\u961f\u5217(\u6211\u53d1\u8a93\uff0c\u6211\u5728\u4e0d\u592a\u4e86\u89e3\u7684\u65f6\u5019\u5c31\u770b\u5230\u8fc7\u8fd9\u4e00\u5e55\u7684\u51fa\u73b0)\u3002\u4eba\u4eec\u8bf4\uff0c\u54e6\uff0c\u662f\u7684\uff0c\u8fd9\u4f1a\u589e\u52a0\u8fd0\u529b\uff0c\u7136\u540e\u4ed6\u4eec\u5c31\u51fa\u53d1\u4e86\u3002\n\u7136\u540e\u5b83\u53c8\u6b7b\u4e86\u3002\u6ca1\u6709\u4eba\u60f3\u5230\u90a3\u91cc\u90a3\u4e2a\u72e1\u733e\u7684\u7ea2\u8272\u7bad\u5934\uff1a\n\u4e5f\u8bb8\u4ed6\u4eec\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u51b3\u5b9a\u4f7f\u7528MongoDB\uff0c\u56e0\u4e3aMongoDB\u6bd4Postgres(\u5475\u5475)\u5feb\u3002\u8c01\u77e5\u9053\u5462\u3002\n\u771f\u6b63\u7684\u95ee\u9898\u662f\u6d89\u53ca\u5230\u7684\u6bcf\u4e2a\u4eba\u90fd\u4f7f\u7528\u961f\u5217\u4f5c\u4e3a\u4f18\u5316\u673a\u5236\u3002\u6709\u4e86\u4ed6\u4eec\uff0c\u65b0\u7684\u95ee\u9898\u73b0\u5728\u6210\u4e86\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u662f\u4e00\u4e2a\u96be\u4ee5\u7ef4\u6301\u7684\u5669\u68a6\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u95ee\u9898\u4f1a\u4ee5\u7834\u574f\u7aef\u5230\u7aef\u539f\u5219\u7684\u5f62\u5f0f\u51fa\u73b0\uff0c\u56e0\u4e3a\u4f7f\u7528\u6301\u4e45\u961f\u5217\u4f5c\u4e3a\u4e00\u79cd\u5373\u53d1\u5373\u5fd8\u673a\u5236\uff0c\u6216\u8005\u5047\u8bbe\u4efb\u52a1\u4e0d\u80fd\u91cd\u653e\u6216\u4e22\u5931\u3002\u60a8\u6709\u66f4\u591a\u7684\u5730\u65b9\u53ef\u4ee5\u8d85\u65f6\uff0c\u9700\u8981\u65b0\u7684\u65b9\u6cd5\u6765\u68c0\u6d4b\u6545\u969c\u5e76\u5c06\u5176\u4f20\u56de\u7ed9\u7528\u6237\uff0c\u7b49\u7b49\u3002\n\u8fd9\u4e9b\u662f\u53ef\u4ee5\u89e3\u51b3\u7684\uff0c\u522b\u8bef\u4f1a\u6211\u7684\u610f\u601d\u3002\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u662f\u4f5c\u4e3a\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u4e00\u90e8\u5206\u5f15\u5165\u7684\uff0c\u800c\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5e76\u4e0d\u9002\u5408\u5b83\u6240\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u53ea\u662f\u8fc7\u65e9\u7684\u4f18\u5316\u3002\u5373\u4f7f\u6bcf\u4e2a\u53c2\u4e0e\u7684\u4eba\u90fd\u91c7\u53d6\u4e86\u63aa\u65bd\uff0c\u5bf9\u771f\u6b63\u75db\u70b9\u7684\u771f\u6b63\u5931\u8d25\u505a\u51fa\u4e86\u53cd\u5e94\uff0c\u7b49\u7b49\u3002\u95ee\u9898\u662f\uff0c\u6ca1\u6709\u4eba\u8003\u8651\u5230\u4e8b\u60c5\u7684\u771f\u6b63\u3001\u6838\u5fc3\u4e1a\u52a1\u7ed3\u675f\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5b83\u7684\u9650\u5236\u662f\u4ec0\u4e48\u3002\u4eba\u4eec\u6216\u591a\u6216\u5c11\u5730\u5728\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u4e2d\u5c40\u90e8\u5730\u8003\u8651\u4e86\u8fd9\u4e9b\u9650\u5236\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\u3002\n\u4f46\u5e94\u8be5\u6709\u4eba\u505a\u51fa\u5fc5\u987b\u505a\u51fa\u7684\u9009\u62e9\uff1a\u4f60\u662f\u963b\u6b62\u4eba\u4eec\u5728\u7cfb\u7edf\u4e2d\u8f93\u5165\u4e1c\u897f\uff0c\u8fd8\u662f\u51cf\u8f7b\u8d1f\u62c5\u3002\u8fd9\u4e9b\u90fd\u662f\u4e0d\u53ef\u907f\u514d\u7684\u9009\u62e9\uff0c\u4e0d\u91c7\u53d6\u884c\u52a8\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u6545\u969c\u3002\n\u4f60\u77e5\u9053\u4ec0\u4e48\u5f88\u9177\u5417\uff1f\u5982\u679c\u4f60\u53d1\u73b0\u4f60\u7684\u7cfb\u7edf\u4e2d\u786e\u5b9e\u5b58\u5728\u8fd9\u4e9b\u74f6\u9888\uff0c\u5e76\u628a\u5b83\u4eec\u653e\u5728\u9002\u5f53\u7684\u80cc\u538b\u673a\u5236\u540e\u9762\uff0c\u4f60\u7684\u7cfb\u7edf\u751a\u81f3\u6ca1\u6709\u6743\u5229\u53d8\u6162\u3002\n\u6b65\u9aa41.\u786e\u5b9a\u74f6\u9888\u3002\u6b65\u9aa42\uff1a\u5411\u74f6\u9888\u8bf7\u6c42\u5806\u79ef\u66f4\u591a\u6570\u636e\u7684\u6743\u9650\uff1a\n\u6839\u636e\u60a8\u653e\u7f6e\u63a2\u5934\u7684\u4f4d\u7f6e\uff0c\u60a8\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7ea7\u522b\u7684\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\u8fdb\u884c\u4f18\u5316\uff0c\u4f46\u60a8\u8981\u505a\u7684\u662f\u5b9a\u4e49\u7cfb\u7edf\u7684\u9002\u5f53\u64cd\u4f5c\u9650\u5236\u3002\n\u5f53\u4eba\u4eec\u76f2\u76ee\u5730\u5e94\u7528\u961f\u5217\u4f5c\u4e3a\u7f13\u51b2\u533a\u65f6\uff0c\u4ed6\u4eec\u6240\u505a\u7684\u5c31\u662f\u521b\u5efa\u4e00\u4e2a\u66f4\u5927\u7684\u7f13\u51b2\u533a\u6765\u79ef\u7d2f\u4f20\u8f93\u4e2d\u7684\u6570\u636e\uff0c\u7ed3\u679c\u8fdf\u65e9\u4f1a\u4e22\u5931\u3002\u4f60\u8ba9\u5931\u8d25\u53d8\u5f97\u66f4\u52a0\u7f55\u89c1\uff0c\u4f46\u4f60\u5374\u8ba9\u5931\u8d25\u53d8\u5f97\u66f4\u4e25\u91cd\u3002\n\u5f53\u60a8\u5378\u8f7d\u5e76\u4e3a\u60a8\u7684\u7cfb\u7edf\u5b9a\u4e49\u9002\u5f53\u7684\u64cd\u4f5c\u9650\u5236\u65f6\uff0c\u60a8\u5c31\u6ca1\u6709\u8fd9\u4e9b\u4e86\u3002\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u540c\u6837\u4e0d\u6ee1\u7684\u5ba2\u6237(\u56e0\u4e3a\u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u90fd\u4e0d\u80fd\u6b63\u786e\u5c65\u884c\u60a8\u7684\u7cfb\u7edf\u627f\u8bfa)\uff0c\u4f46\u901a\u8fc7\u9002\u5f53\u7684\u80cc\u538b\u6216\u51cf\u8d1f\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\uff1a\n\u4e00\u4e2aAPI\u5728\u8bbe\u8ba1\u65f6\u4f1a\u8003\u8651\u5230\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00(\u80cc\u538b\u4f1a\u8ba9\u60a8\u77e5\u9053\u4f55\u65f6\u5904\u4e8e\u8d85\u8f7d\u72b6\u6001\uff0c\u4ee5\u53ca\u4f55\u65f6\u91cd\u8bd5\u7b49\u7b49\uff0c\u800c\u5378\u8f7d\u4f1a\u8ba9\u7528\u6237\u77e5\u9053\u6709\u4e9b\u6570\u636e\u4e22\u5931\u4e86\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898)\u3002\n\u4e3a\u4e86\u4f7f\u5185\u5bb9\u53ef\u7528\uff0c\u8003\u8651\u5230\u7aef\u5230\u7aef\u539f\u5219\u7684\u9002\u5f53\u7684\u5e42\u7b49API\u5c06\u4f7f\u5176\u6210\u4e3a\u95ee\u9898\uff0c\u56e0\u6b64\u8fd9\u4e9b\u80cc\u538b\u548c\u51cf\u8d1f\u7684\u5b9e\u4f8b\u5bf9\u60a8\u7684\u8c03\u7528\u8005\u6765\u8bf4\u4e0d\u5e94\u8be5\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\u8bf7\u6c42\u5e76\u77e5\u9053\u5b83\u4eec\u662f\u5426\u8d77\u4f5c\u7528\u3002\n\u56e0\u6b64\uff0c\u5f53\u6211\u62b1\u6028/\u53cd\u5bf9\u961f\u5217\u65f6\uff0c\u90a3\u662f\u56e0\u4e3a\u961f\u5217\u7684\u5e94\u7528\u65b9\u5f0f\u901a\u5e38(\u4f46\u4e0d\u603b\u662f)\u4f1a\u6beb\u65e0\u7406\u7531\u5730\u5b8c\u5168\u6270\u4e71\u7aef\u5230\u7aef\u539f\u5219\u3002\u8fd9\u662f\u56e0\u4e3a\u7cdf\u7cd5\u7684\u7cfb\u7edf\u5de5\u7a0b\uff0c\u4eba\u4eec\u8bd5\u56fe\u8ba9\u4e00\u8f8618\u8f6e\u7684\u5361\u8f66\u901a\u8fc7\u5438\u7ba1\uff0c\u5e76\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u5730\u72f1\u7684\u4e8b\u60c5\u4f1a\u53d8\u5f97\u7cdf\u7cd5\u3002\u6700\u540e\uff0c\u6392\u961f\u53ea\u4f1a\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7cdf\u3002\u5f53\u60c5\u51b5\u6076\u5316\u65f6\uff0c\u60c5\u51b5\u4f1a\u53d8\u5f97\u975e\u5e38\u7cdf\u7cd5\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u8bd5\u56fe\u95ed\u4e0a\u773c\u775b\uff0c\u5ffd\u89c6\u4ed6\u4eec\u4e3a\u4e86\u89e3\u51b3\u5927\u575d\u4e0a\u6e38\u7684\u6d2a\u6c34\u95ee\u9898\u800c\u4fee\u5efa\u4e86\u4e00\u5ea7\u5927\u575d\u7684\u4e8b\u5b9e\u3002\n\u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u79cd\u7528\u4f8b\u4f7f\u7528\u961f\u5217\u4f5c\u4e3a\u524d\u7aef\u7ebf\u7a0b/\u8fdb\u7a0b\u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u673a\u5236(\u60f3\u4e00\u60f3PHP\u3001Ruby\u3001CGI\u5e94\u7528\u7a0b\u5e8f\uff0c\u7b49\u7b49)\uff0c\u56e0\u4e3a\u60a8\u7684\u8bed\u8a00\u4e0d\u652f\u6301\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002\u5b83\u7565\u597d\u4e8e\u4f7f\u7528MySQL\u8868(\u6211\u89c1\u8fc7\u51e0\u6b21\uff0c\u751a\u81f3\u53c2\u4e0e\u8fc7)\uff0c\u4f46\u6bd4\u9009\u62e9\u4e00\u4e2a\u652f\u6301\u6b63\u786e\u5b9e\u73b0\u89e3\u51b3\u65b9\u6848\u6240\u9700\u7684\u6d88\u606f\u4f20\u9012\u673a\u5236\u7684\u5de5\u5177\u8981\u5dee\u5f97\u591a\u3002", "note_en": "People misuse queues all the time. The most egregious case being to fix issues with slow apps, and consequently, with overload. But to say why, I&#39;ll need to take bits of talks and texts I have around the place, and content that I have written in more details about in  Erlang in Anger.\n To oversimplify things, most of the projects I end up working on can be visualized as a very large bathroom sink. User and data input are flowing from the faucet, down &#39;till the output of the system:\n  So under normal operations, your system can handle all the data that comes in, and carry it out fine:\n  Water goes in, water goes out, everyone&#39;s happy. However, from time to time, you&#39;ll see temporary overload on your system. If you do messaging, this is going to be around sporting events or events like New Year&#39;s Eve. If you&#39;re a news site, it&#39;s gonna be when a big thing happens (Elections in the US, Royal baby in the UK, someone says they dislike French as a language in Quebec).\n   The data that comes out of the system is still limited, and input comes in faster and faster. Web people will use stuff like caches at that point to make it so the input and output required gets to be reduced. Other systems will use a huge buffer (a queue, or in this case, a sink) to hold the temporary data.\n The problem comes when you inevitably encounter prolonged overload. It&#39;s when you look at your system load and go &#34;oh crap&#34;, and it&#39;s not coming down ever. Turns out Obama doesn&#39;t want to turn in his birth certificate, the royal baby doesn&#39;t look like the father, and someone says Quebec should be better off with Parisian French, and the rumor mill is going for days and weeks at a time:\n  All of a sudden, the buffers, queues, whatever, can&#39;t deal with it anymore. You&#39;re in a critical state where you can see smoke rising from your servers, or if in the cloud, things are as bad as usual, but more!\n   Woops, everyone is dead, you&#39;re in the office at 3am (who knew so many people in the US, disgusted with their &#34;Kenyan&#34; president, now want news on the royal baby, while Quebec people look up &#39;royale with cheese baby&#39; for some reason) trying to keep things up.\n You look at your stack traces, at your queue, at your DB slow queries, at the APIs you call. You spend weeks at a time optimizing every component, making sure it&#39;s always going to be good and solid. Things keeps crashing, but you hit the point where every time, it takes 2-3 days more.\n At the end of it, you see a crapload of problems still happening, but they&#39;re a week apart between each failure, which slows down your optimizing in immense ways because it&#39;s incredibly hard to measure things when they take weeks to go bad.\n You go &#34;okay I&#39;m all out of ideas, let&#39;s buy a bigger server.&#34; The system in the end looks like this, and it&#39;s still failing:\n  Except now it&#39;s an unmaintainable piece of garbage full of dirty hacks to make it work that cost 5 times what it used to, and you&#39;ve been paid for months optimizing it for no god damn reason because it still dies when overloaded.\n The problem? That red arrow there. You&#39;re hitting some hard limit that even through all of your profiling, you didn&#39;t consider properly. This can be a database, an API to an external service, disk speed, bandwidth or general I/O limits, paging speed, CPU limits, whatever.\n You&#39;ve spent months optimizing your super service only to find out at some point in time, you went past its optimal speed without larger changes, and the day your system got to have an operational speed greater than this hard limit, you&#39;ve doomed yourself to an everlasting series of system failures.\n The disheartening part about it is that you discover that once your system is popular, has people using it and its APIs, and changing it to be better is very expensive and hard. Especially since you&#39;ll probably have to revisit assumptions you&#39;ve made in its core design. Woops.\n So what do you need? You&#39;ll need to pick  what has to give whenever stuff goes bad. You&#39;ll have to pick between blocking on input (back-pressure), or dropping data on the floor (load-shedding). And that happens all the time in the real world, we just don&#39;t want to do it as developers, as if it were an admission of failure.\n Bouncers in front of a club, water spillways to go around dams, the pressure mechanism that keeps you from putting more gas in a full tank, and so on. They&#39;re all there to impose a system-wide flow control to keep operations safe.\n In [non-critical] software? Who cares! We never shed load because that makes stakeholders angry, and we never think about back-pressure. Usually the back-pressure in the system is implicit: &#39;tis slow.\n A function/method call to something ends up taking longer? It&#39;s slow. Not enough people think of it as back-pressure making its way through your system. In fact, slow distributed systems are often the canary in the overload coal mine. The problem is that everyone just stands around and goes &#34;durr why is everything so slow??&#34; and devs go &#34;I don&#39;t know! It just is! It&#39;s hard, okay!&#34;\n That&#39;s usually because somewhere in the system (possibly the network, or something that is nearly impossible to observe without proper tooling, such as  TCP incast), something is clogged and everything else is pushing it back to the edge of your system, to the user.\n And that back-pressure making the system slower? It slows down the rate at which users can input data. It&#39;s what is likely keeping your whole stack alive. And you know when people start using queues? Right there. When operations take too long and block stuff up, people introduce a freaking queue in the system.\n And the effects are instant. The application that was sluggish is now fast again. Of course you need to redesign the whole interface and interactions and reporting mechanisms to become asynchronous, but man is it fast!\n Except at some point the queue spills over, and you lose all of the data. There&#39;s a serious meeting that then takes place where everyone discusses how this could possibly have happened. Dev #3 suggests more workers are added, Dev #6 recommends the queue gets persistency so that when it crashes, no requests are lost.\n &#34;Cool,&#34; says everyone. Off to work. Except at some point, the system dies again. And the queue comes back up, but it&#39;s already full and uuugh. Dev #5 goes in and thinks &#34;oh yeah, we could add more queues&#34; (I swear I&#39;ve seen this unfold back when I didn&#39;t know better). People say &#34;oh yeah, that increases capacity&#34; and off they go.\n And then it dies again. And nobody ever thought of that sneaky red arrow there:\n  Maybe they do it without knowing, and decide to go with MongoDB because it&#39;s &#34;faster than Postgres&#34; (heh). Who knows.\n The real problem is that everyone involved used queues as an optimization mechanism. With them, new problems are now part of the system, which is a nightmare to maintain. Usually, these problems will come in the form of ruining the  end-to-end principle by using a persistent queue as a fire-and-forget mechanisms or assuming tasks can&#39;t be replayed or lost. You have more places that can time out, require new ways to detect failures and communicate them back to users, and so on.\n Those can be worked around, don&#39;t get me wrong. The issue is that they&#39;re being introduced as part of a solution that&#39;s not appropriate for the problem it&#39;s built to solve. All of this was just premature optimization. Even when everyone involved took measures, reacted to real failures in real pain points, etc. The issue is that nobody considered what the true, central business end of things is, and what its limits are. People considered these limits locally in each sub-component, more or less, and not always.\n But someone should have picked what had to give: do you stop people from inputting stuff in the system, or do you shed load. Those are inescapable choices, where inaction leads to system failure.\n And you know what&#39;s cool? If you identify these bottlenecks you have for real in your system, and you put them behind proper back-pressure mechanisms, your system won&#39;t even have the right to become slow.\n Step 1. Identify the bottleneck. Step 2: ask the bottleneck for permission to pile more data in:\n    Depending on where you put your probe, you can optimize for different levels of latency and throughput, but what you&#39;re going to do is define proper operational limits of your system.\n When people blindly apply a queue as a buffer, all they&#39;re doing is creating a bigger buffer to accumulate data that is in-flight, only to lose it sooner or later. You&#39;re making failures more rare, but you&#39;re making their magnitude worse.\n When you shed load and define proper operational limits to your system, you don&#39;t have these. What you may have is customers that are as unhappy (because in either case, they can&#39;t do what your system promises right), but with proper back-pressure or load-shedding, you gain:\n An API that will be designed with either in mind (back-pressure lets you know when you&#39;re in an overload situation, and when to retry or whatever, and load-shedding lets the user know that some data was lost so they can work around that)\n To make stuff usable, a proper idempotent API with end-to-end principles in mind will make it so these instances of back-pressure and load shedding should rarely be a problem for your callers, because they can safely retry requests and know if they worked.\n So when I rant about/against queues, it&#39;s because queues will often be (but not always) applied in ways that totally mess up end-to-end principles for no good reason. It&#39;s because of bad system engineering, where people are trying to make an 18-wheeler go through a straw and wondering why the hell things go bad. In the end the queue just makes things worse. And when it goes bad, it goes really bad, because everyone tried to close their eyes shut and ignore the fact they built a dam to solve flooding problems upstream of the dam.\n And then of course, there&#39;s the use case where you use the queue as a messaging mechanism between front-end threads/processes (think PHP, Ruby, CGI apps in general, and so on) because your language doesn&#39;t support inter-process communications. It&#39;s marginally better than using a MySQL table (which I&#39;ve seen done a few times and even took part in), but infinitely worse than picking a tool that supports the messaging mechanisms you need to implement your solution right.", "posttime": "2020-05-13 17:19:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e0\u6cd5,don,\u7cfb\u7edf", "title": "\u961f\u5217\u65e0\u6cd5\u4fee\u590d\u8fc7\u8f7d(2014)", "title_en": "Queues don't fix overload (2014)", "transed": 1, "url": "https://ferd.ca/queues-don-t-fix-overload.html", "via": "", "real_tags": ["\u65e0\u6cd5", "don", "\u7cfb\u7edf"]}]