[{"category": "", "categoryclass": "", "imagename": "82efedeb18d9559cd423c1fc7be358d4.jpeg", "infoid": 1002753, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Dry\u539f\u5219\u53ef\u80fd\u662f\u60a8\u5f00\u59cb\u7f16\u7801\u65f6\u5b66\u4e60\u7684\u7b2c\u4e00\u4e2a\u8f6f\u4ef6\u8bbe\u8ba1\u6982\u5ff5\u3002\u5b83\u542c\u8d77\u6765\u5f88\u4e25\u8083\uff0c\u5f88\u6709\u8bf4\u670d\u529b\uff0c\u6bd5\u7adf\u5b83\u6709\u4e00\u4e2a\u7f29\u5199\uff01\u6b64\u5916\uff0c\u4e0d\u91cd\u590d\u81ea\u5df1\u7684\u60f3\u6cd5\u4e0e\u6211\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u559c\u6b22\u4e3a\u8ba1\u7b97\u673a\u7f16\u7a0b\u7684\u539f\u56e0\u4ea7\u751f\u4e86\u6df1\u523b\u7684\u5171\u9e23\uff1a\u5c06\u6211\u4eec\u4ece\u4ee4\u4eba\u5934\u8111\u9ebb\u6728\u7684\u91cd\u590d\u5de5\u4f5c\u4e2d\u89e3\u653e\u51fa\u6765\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u548c\u89e3\u91ca\u7684\u6982\u5ff5(\u6bcf\u5f53\u6211\u8ba8\u8bba\u5b9e\u4f53\u8bbe\u8ba1\u65f6\uff0c\u6211\u4ecd\u7136\u9700\u8981\u8c37\u6b4c\u641c\u7d22Liskov\u66ff\u6362)\uff0c\u5e94\u7528\u5b83\u901a\u5e38\u4f1a\u7ed9\u4f60\u7684\u5927\u8111\u5e26\u6765\u5f53\u5b83\u4e0e\u6a21\u5f0f\u5339\u914d\u65f6\u7684\u90a3\u79cd\u5947\u5999\u7684\u5174\u594b\u3002\u6709\u4ec0\u4e48\u4e0d\u559c\u6b22\u7684\uff1f\n\u55ef\uff0c\u9632\u6b62\u4ee3\u7801\u4e2d\u7684\u91cd\u590d\u901a\u5e38\u662f\u4e2a\u597d\u4e3b\u610f\u3002\u4f46\u6709\u65f6\uff0c\u6211\u53d1\u73b0\uff0c\u5728\u6211\u60f3\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u8ba8\u8bba\u7684\u65b9\u5f0f\u4e0a\uff0c\u8fd9\u662f\u9002\u5f97\u5176\u53cd\u7684\u3002\n\u5728\u4e24\u4e2a\u8c03\u7528\u8005\u4e4b\u95f4\u5171\u4eab\u4e00\u6bb5\u4ee3\u7801\u901a\u5e38\u662f\u4e2a\u597d\u4e3b\u610f\u3002\u5982\u679c\u60a8\u6709\u4e24\u4e2a\u9700\u8981\u53d1\u9001\u4e8b\u52a1\u6027\u7535\u5b50\u90ae\u4ef6\u7684\u670d\u52a1\uff0c\u8fd9\u4e24\u4e2a\u670d\u52a1\u5c06\u83b7\u53d6\u6709\u5173\u7528\u6237\u7684\u4e00\u4e9b\u8be6\u7ec6\u4fe1\u606f\uff0c\u5448\u73b0\u4e00\u4e2a\u6a21\u677f\u5e76\u5c06\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u51fa\u53bb\uff0c\u5b83\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\u7c7bOrderService\uff1a#.\u3002def send_order_Receipt(self\uff0cuser_id\uff0corder_id)\uff1auser=UserService.get(User_Id)SUBJECT=f&#34\uff1border{order_id}\u5df2\u6536\u5230&#34\uff1bbody=f&#34\uff1b\u60a8\u7684\u8ba2\u5355{order_id}\u5df2\u6536\u5230\uff0c\u5c06\u5f88\u5feb\u5904\u7406&#34\uff1bcontent=Render(&#39\uff1buser_email.html&#39\uff1b\uff0cuser=user\uff0cbody=body)email_Provider.send(user.email_address\uff0cSubject\uff0cContent)\u3002def send_invoice(self\uff0cuser_id\uff0corder_id)\uff1auser=UserService.get(User_Id)SUBJECT=f&#34\uff1b{order_id}\u5df2\u6536\u5230\u4ed8\u6b3e&#34\uff1bbody=f&#34\uff1b\u8ba2\u5355{order_id}\u4ed8\u6b3e\u5df2\u6536\u5230\uff0c\u8c22\u8c22\uff01&#34\uff1bcontent=Render(&#39\uff1buser_email.html&#39\uff1b\uff0cuser=user\uff0cbody=body)email_Provider.send(user.email_address\uff0cSubject\uff0cContent)\u3002\n\u770b\u770b\u90a3\u4e9b\u91cd\u590d\u7684\u4ee3\u7801\uff01\u7528\u4ee5\u4e0b\u51e0\u53e5\u8bdd\u628a\u5b83\u64e6\u5e72\u662f\u975e\u5e38\u8bf1\u4eba\u7684\uff1a\ndef send_transaction_email(user_id\uff0corder_id\uff0cSubject\uff0cBody)\uff1auser=UserService.get(User_Id)content=Render(&#39\uff1buser_email.html&#39\uff1b\uff0cuser=user\uff0cbody=body)email_Provider.send(user.email_address\uff0cSubject\uff0cContent)\u3002\n\u597d\u7684!\u3002\u6211\u4eec\u5c06\u670d\u52a1\u4e4b\u95f4\u7684\u516c\u5171\u4ee3\u7801\u63d0\u53d6\u5230\u5e2e\u52a9\u5668\u51fd\u6570\u4e2d\uff0c\u73b0\u5728\u6211\u4eec\u7684\u670d\u52a1\u5982\u4e0b\u6240\u793a\uff1a\n\u7c7bOrderService\uff1a#.\u3002def send_order_Receipt(self\uff0cuser_id\uff0corder_id)\uff1aSUBJECT=f&#34\uff1border{order_id}Received&#34\uff1bbody=f&#34\uff1b\u60a8\u7684\u8ba2\u5355{order_id}\u5df2\u6536\u5230\uff0c\u5c06\u5f88\u5feb\u5904\u7406&#34\uff1bsend_transaction_email(user_id\uff0c\uff0corder_id\uff0cSubject\uff0cBody)\u7c7bPaymentService\uff1a#.\u3002def send_invoice(self\uff0cuser_id\uff0corder_id)\uff1aSUBJECT=f&#34\uff1b{order_id}\u5df2\u6536\u5230\u4ed8\u6b3e&#34\uff1bbody=f&#34\uff1b\u8ba2\u5355{order_id}\u4ed8\u6b3e\u5df2\u6536\u5230\uff01&#34\uff1bsend_transaction_email(user_id\uff0c\uff0corder_id\uff0cSubject\uff0cBody)\nDRY\u7684\u627f\u8bfa\u4e4b\u4e00\u662f\u5b83\u5c06\u5141\u8bb8\u6211\u4eec\u66f4\u597d\u5730\u53d1\u5c55\u6211\u4eec\u7684\u8f6f\u4ef6\uff1b\u4e1a\u52a1\u9700\u6c42\u548c\u5de5\u7a0b\u7ea6\u675f\u4e00\u76f4\u5728\u53d8\u5316\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u6539\u53d8\u8fd9\u6bb5\u4ee3\u7801\u7684\u884c\u4e3a\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6539\u53d8\u5b83\u4e00\u6b21\uff0c\u5b83\u5c31\u4f1a\u5728\u4efb\u4f55\u5730\u65b9\u53cd\u6620\u51fa\u6765\u3002\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u66f4\u6539\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684\u65b9\u5f0f\uff0c\u751a\u81f3\u6211\u4eec\u4f7f\u7528\u7684\u7535\u5b50\u90ae\u4ef6\u63d0\u4f9b\u5546\u4e5f\u53ef\u4ee5\u8f7b\u677e\u66f4\u6539\u3002\n\u4f46\u5982\u679c\u76f2\u76ee\u5e94\u7528\uff0c\u5e72\u5f0f\u4ee3\u7801\u53ef\u80fd\u4f1a\u8d77\u5230\u4fc3\u8fdb\u66f4\u6539\u7684\u76f8\u53cd\u4f5c\u7528\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u8003\u8651\u4e00\u4e0b\uff0c\u5982\u679c\u7531\u4e8e\u4e1a\u52a1\u51b3\u7b56\uff0cPaymentService\u7684\u53d1\u7968\u90ae\u4ef6\u9700\u8981\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u677f\uff0c\u6211\u4eec\u5982\u4f55\u4fc3\u8fdb\u8fd9\u4e00\u70b9\u5462\uff1f\u6216\u8005\u73b0\u5728\u9700\u8981OrderService\u6765\u68c0\u7d22\u5df2\u8d2d\u4e70\u9879\u76ee\u7684\u5217\u8868\u5e76\u5c06\u5176\u9988\u9001\u5230\u7535\u5b50\u90ae\u4ef6\u6a21\u677f\u4e2d\uff1f\u6211\u4eec\u5c06\u5171\u4eab\u903b\u8f91\u63d0\u53d6\u5230Send_Transaction_Email\u65b9\u6cd5\u4e2d\uff0c\u5bfc\u81f4OrderService\u548cPaymentService\u53d8\u5f97\u7d27\u5bc6\u8026\u5408\uff1a\u60a8\u4e0d\u80fd\u53ea\u66f4\u6539\u5176\u4e2d\u4e00\u4e2a\u800c\u4e0d\u66f4\u6539\u53e6\u4e00\u4e2a\u3002\n\u5f53\u60a8\u9047\u5230\u540d\u4e3aHelper\u7684\u7c7b\u65f6\uff0c\u5b83\u6700\u4e0d\u4f1a\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5e2e\u52a9\u60a8\u3002\n\u6211\u4eec\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u4e3a\u6b63\u5728\u5de5\u4f5c\u7684Web\u670d\u52a1\u5668\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u6709\u4e24\u4e2a\u6d4b\u8bd5\uff1a\n\u51fd\u6570TestWebserver_BAD_PATH_500(t*testing.T){srv\uff1a=createTestWebserver()defer srv.Close()resp\uff0cerr\uff1a=http.Get(srv.url+&#34\uff1b/ad/path&34\uff1b)if err\uff01=nil{t.Ftal(&#34\uff1b)}if res.StatusCode\uff01=500{t.Fatalf(&#34\uff1b)}\u3002)}Body\uff0cerr\uff1a=ioutil.ReadAll(res.Body)If err\uff01=nil{t.Ftal(&#34\uff1bFailed Read Body Bytes&#34\uff1b)}If String(Body)\uff01=&#34\uff1b500\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\uff1a\u5904\u7406\u5931\u8d25/BAD/Path&#34\uff1b{t.Fatalf(&#34\uff1bBody\u4e0e\u9884\u671f&#34\uff1b)}}\u51fd\u6570TestWebserver_UNKNOWN_PATH_404(t*testing.T){srv\uff1a=createTestWebserver()defer srv.Close()resp\uff0cerr\uff1a=http.Get(srv.url+&#34\uff1b/UNKNOWN/PATH&34\uff1b)if err\uff01=nil{t.Ftal(&#34\uff1b\uff1b\u8c03\u7528\u6d4b\u8bd5\u670d\u52a1\u5668&#34\uff1b)}\u5982\u679cres.StatusCode\uff01=404{t.Fatalal\u3002)}if res.Header.Get(&#34\uff1bX\u654f\u611f\u6807\u9898&#34\uff1b)\uff01=&#34\uff1b&#34\uff1b{t.Fatalf(&#34\uff1b\u671f\u671b\u654f\u611f\u6807\u9898\u4e0d\u4f1a\u53d1\u9001&#34\uff1b)}}\u3002\n\u6709\u5927\u91cf\u7684\u91cd\u590d\u9879\u9700\u8981\u91cd\u6784\uff01\u8fd9\u4e24\u4e2a\u6d4b\u8bd5\u7684\u529f\u80fd\u5927\u81f4\u76f8\u540c\uff1a\u5b83\u4eec\u542f\u52a8\u4e00\u4e2a\u6d4b\u8bd5\u670d\u52a1\u5668\uff0c\u5bf9\u5176\u8fdb\u884cGET\u8c03\u7528\uff0c\u7136\u540e\u5728http.Response\u4e0a\u8fd0\u884c\u7b80\u5355\u7684\u65ad\u8a00\u3002\nfunc runWebserverTest(t*testing.T\uff0cRequest Requester\uff0cvalidators[]Validator){srv\uff1a=createTestWebserver()defer srv.Close()Response\uff1a=request(t\uff0csrv)for_\uff0cvalidator\uff1a=Range validators{validator.Valify(t\uff0cresponse)}}\n\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u6211\u5728\u8fd9\u91cc\u7f16\u8f91\u4e86\u8bf7\u6c42\u8005\u548c\u9a8c\u8bc1\u5668\u7684\u786e\u5207\u5b9a\u4e49\uff0c\u4f46\u662f\u60a8\u53ef\u4ee5\u5728\u672c\u6587\u7684\u8981\u70b9\u4e2d\u770b\u5230\u5b8c\u6574\u7684\u5b9e\u73b0\u3002\nfunc Test_DRY_BAD_PATH_500(t*Testing.T){runWebserverTest(t\uff0cgetRequester(&#34\uff1b/BAD/Path&#34\uff1b)\uff0c[]Validator{getStatusCodeValidator(500)\uff0cgetBodyValidator(&#34\uff1b500\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\uff1a\u65e0\u6cd5\u5904\u7406/BAD/Path&#34\uff1b)\uff0c})}func Test_Dry_UNKNOWN_PATH_404(t*testing.t){\u3002)\uff0c[]\u9a8c\u8bc1\u5668{getStatusCodeValidator(404)\uff0cgetHeaderValidator(&#34\uff1bX-Sensitive-Header&#34\uff1b\uff0c&#34\uff1b&#34\uff1b)\uff0c})}\u3002\n\u7f16\u5199\u65b0\u7684\u7c7b\u4f3c\u6d4b\u8bd5\u4f1a\u66f4\u5feb\u3002\u5982\u679c\u6211\u4eec\u670915\u4e2a\u884c\u4e3a\u76f8\u4f3c\u4e14\u9700\u8981\u76f8\u4f3c\u65ad\u8a00\u7684\u4e0d\u540c\u7aef\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u7b80\u6d01\u9ad8\u6548\u5730\u8868\u8fbe\u5b83\u4eec\u3002\n\u6211\u4eec\u7684\u4ee3\u7801\u53d8\u5f97\u975e\u5e38\u96be\u4ee5\u9605\u8bfb\u548c\u6269\u5c55\u3002\u5982\u679c\u6211\u4eec\u7684\u6d4b\u8bd5\u7531\u4e8e\u5c06\u6765\u7684\u67d0\u4e9b\u66f4\u6539\u800c\u5931\u8d25\uff0c\u8c03\u8bd5\u8be5\u95ee\u9898\u7684\u53ef\u601c\u7684\u4eba\u5c06\u4e0d\u5f97\u4e0d\u8fdb\u884c\u5927\u91cf\u7684\u70b9\u51fb\u64cd\u4f5c\uff0c\u76f4\u5230\u4ed6\u4eec\u5f88\u597d\u5730\u638c\u63e1\u4e86\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff1a\u6211\u4eec\u7528\u806a\u660e\u7684\u62bd\u8c61\u548c\u95f4\u63a5\u7684\u65b9\u5f0f\u66ff\u6362\u4e86\u7410\u788e\u3001\u7b80\u5355\u3001\u76f4\u63a5\u7684\u4ee3\u7801\u3002\n\u5c06\u516c\u5171\u4ee3\u7801\u653e\u5165\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5171\u4eab\u7684\u5e93\u4e2d\u662f\u4e00\u79cd\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6709\u6548\u5b9e\u8df5\uff0c\u8fd9\u5728\u6211\u4eec\u7684\u884c\u4e1a\u4e2d\u5df2\u7ecf\u5f88\u597d\u5730\u786e\u7acb\u4e86\uff0c\u5f53\u7136\u6211\u4eec\u5e76\u4e0d\u662f\u8bf4\u6211\u4eec\u5e94\u8be5\u505c\u6b62\u8fd9\u6837\u505a\uff01\n\u4e3a\u4e86\u5e2e\u52a9\u6211\u4eec\u51b3\u5b9a\u4f55\u65f6\u5e94\u8be5\u5e72\u71e5\u4ee3\u7801\uff0c\u6211\u60f3\u63d0\u51fa\u4e00\u4e2a\u60f3\u6cd5\uff0c\u51fa\u81ea\u5b89\u8fea\u00b7\u4ea8\u7279(Andy Hunt)\u548c\u6234\u592b\u00b7\u6258\u9a6c\u65af(Dave Thomas)\u6700\u8fd1\u51fa\u7248\u7684\u4e00\u672c\u7edd\u5999\u7684\u4e66\uff1a\u201c\u52a1\u5b9e\u7684\u7a0b\u5e8f\u5458\u201d(The Practice Programmer)\uff1a\n\u201c\u5982\u679c\u4e00\u4ef6\u4e1c\u897f\u9002\u5408\u4f7f\u7528\u5b83\u7684\u4eba\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u8bbe\u8ba1\u5f97\u5f88\u597d\u7684\u4e1c\u897f\u3002\u5bf9\u4e8e\u4ee3\u7801\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5fc5\u987b\u901a\u8fc7\u66f4\u6539\u6765\u9002\u5e94\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u76f8\u4fe1ETC\u539f\u5219\uff1a\u66f4\u5bb9\u6613\u6539\u53d8\u3002\u7b49\u3002\u5c31\u8fd9\u6837\u3002\n\u636e\u6211\u4eec\u6240\u77e5\uff0c\u6bcf\u4e2a\u8bbe\u8ba1\u539f\u5219\u90fd\u6709\u4e00\u4e2aETC\u7684\u7279\u4f8b\u3002\u4e3a\u4ec0\u4e48\u8131\u94a9\u662f\u597d\u7684\uff1f\u56e0\u4e3a\u901a\u8fc7\u9694\u79bb\u5173\u6ce8\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u5173\u6ce8\u70b9\u66f4\u5bb9\u6613\u6539\u53d8\u3002\u7b49\u3002\n\u4e3a\u4f55\u5355\u4e00\u8d23\u4efb\u539f\u5219\u6709\u7528\u5462\uff1f\u56e0\u4e3a\u9700\u6c42\u4e2d\u7684\u66f4\u6539\u4ec5\u7531\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u66f4\u6539\u6765\u53cd\u6620\u3002\u7b49\u3002\n\u5728\u8fd9\u4e2a\u7cbe\u534e\u7684\u7ae0\u8282\u4e2d\uff0cHunt\u548cThomas\u63a2\u8ba8\u4e86\u8fd9\u6837\u4e00\u4e2a\u60f3\u6cd5\uff0c\u5373\u8bc4\u4f30\u7ecf\u5e38\u51b2\u7a81\u7684\u8bbe\u8ba1\u51b3\u7b56\u6709\u4e00\u4e2a\u5143\u539f\u5219--\u5982\u679c\u6211\u4eec\u9009\u62e9\u8fd9\u6761\u7279\u5b9a\u7684\u8def\u5f84\uff0c\u53d1\u5c55\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u6709\u591a\u5bb9\u6613\uff1f\u5728\u4e0a\u9762\u7684\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5e72\u71e5\u4ee3\u7801\u4f7f\u66f4\u6539\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u7684\u4e24\u79cd\u65b9\u5f0f\uff0c\u8981\u4e48\u662f\u901a\u8fc7\u7d27\u8026\u5408\uff0c\u8981\u4e48\u662f\u901a\u8fc7\u963b\u788d\u53ef\u8bfb\u6027-\u8fd9\u4e0eETC\u7684\u5143\u539f\u5219\u80cc\u9053\u800c\u9a70\u3002\n\u8ba4\u8bc6\u5230\u5e72\u4ee3\u7801\u7684\u8fd9\u4e9b\u53ef\u80fd\u7684\u542b\u4e49\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u4e0d\u5e94\u8be5\u5e72\u6211\u4eec\u7684\u4ee3\u7801\uff1b\u8981\u4e86\u89e3\u6211\u4eec\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u8ba9\u6211\u4eec\u56de\u5230\u539f\u59cb\u7ecf\u6587\u5e76\u91cd\u65b0\u68c0\u67e5\u8fd9\u4e00\u539f\u5219\u3002\n\u5e72\u539f\u7406\u6700\u521d\u662f\u7531\u540c\u4e00\u4e2a\u4ea8\u7279\u548c\u6258\u9a6c\u65af\u57282000\u5e74\u7248\u7684\u4e66\u4e2d\u4ecb\u7ecd\u7ed9\u4e16\u754c\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u5199\u9053\uff1a\n\u201c\u5728\u4e00\u4e2a\u7cfb\u7edf\u5185\uff0c\u6bcf\u4e00\u9879\u77e5\u8bc6\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u3001\u660e\u786e\u7684\u3001\u6743\u5a01\u7684\u8868\u8ff0\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u5730\u65b9\u8868\u8fbe\u76f8\u540c\u7684\u4e1c\u897f\u3002\n\u5982\u679c\u4f60\u6539\u53d8\u4e86\u4e00\u4e2a\uff0c\u4f60\u5fc5\u987b\u8bb0\u4f4f\u6539\u53d8\u5176\u4ed6\u7684\uff0c[..]\u3002\u8fd9\u4e0d\u662f\u4f60\u4f1a\u4e0d\u4f1a\u8bb0\u5f97\u7684\u95ee\u9898\uff0c\u800c\u662f\u4f60\u4ec0\u4e48\u65f6\u5019\u4f1a\u5fd8\u8bb0\u7684\u95ee\u9898\u3002\n\u6258\u9a6c\u65af\uff0c\u8fd9\u662f\u5927\u536b\u3002\u5b9e\u7528\u7a0b\u5e8f\u5458\uff0c\u7b2c\u4e8c\u7248\u3002\u4e3b\u98989-\u91cd\u590d\u7684\u5bb3\u5904\u3002\n\u8bf7\u6ce8\u610f\uff0cDRY\u539f\u5219\u6700\u521d\u6839\u672c\u4e0d\u5904\u7406\u4ee3\u7801\u7684\u91cd\u590d\u6216\u590d\u5236\uff0c\u76f8\u53cd\uff0c\u5b83\u8ba8\u8bba\u4e86\u7cfb\u7edf\u4e2d\u7684\u4e00\u6bb5\u77e5\u8bc6\u6ca1\u6709\u5355\u4e00\u7684\u771f\u7406\u6e90\u8868\u793a\u7684\u5371\u9669\u3002\n\u5f53\u6211\u4eec\u91cd\u6784Send_Transaction_Email\u65b9\u6cd5\u4ee5\u66ff\u6362OrderService\u548cPaymentService\u4e4b\u95f4\u7684\u91cd\u590d\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u6df7\u6dc6\u4e86\u91cd\u590d\u4ee3\u7801\u548c\u91cd\u590d\u77e5\u8bc6\u3002\u5982\u679c\u4e24\u4e2a\u7a0b\u5e8f\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u662f\u76f8\u540c\u7684\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1\u5c06\u6765\u4f1a\u7ee7\u7eed\u8981\u6c42\u5b83\u4eec\u8fd9\u6837\u505a\u3002\u6211\u4eec\u5fc5\u987b\u80fd\u591f\u533a\u5206\u5de7\u5408\u5171\u4eab\u7684\u7a0b\u5e8f\u548c\u672c\u8d28\u4e0a\u5171\u4eab\u7684\u7a0b\u5e8f\u3002\n\u56de\u5230\u539f\u70b9\uff0c\u6211\u5fc5\u987b\u627f\u8ba4\uff0cDry\u539f\u5219\u6bd5\u7adf\u662f\u4e00\u6761\u76f8\u5f53\u91cd\u8981\u7684\u5efa\u8bae\uff1b\u5c3d\u7ba1\u5b83\u4e00\u76f4\u88ab\u629b\u6765\u629b\u53bb\uff0c\u4f46\u6211\u4eec\u5e94\u8be5\u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff1a", "note_en": "The DRY principle is probably the first software design concept you learn when you start coding. It sounds very serious and convincing, after all, it has an acronym! Furthermore, the idea of not repeating ourselves deeply resonates with the reason many of us enjoy programming computers: to liberate us from mind-numbing repetitious work. It is a concept that is very easy to grasp and explain (I still have to google Liskov substitution whenever I discuss SOLID design) and applying it usually gives that wonderful buzz your brain gets when it matches a pattern. What\u2019s not to like?\n Well, preventing repetition in code is often a good idea. But sometimes, I find, it is counterproductive in ways that I\u2019d like to discuss in this post.\n  Sharing a single piece of code between two callers often is a great idea. If you have two services that need to send transactional email, that fetches some details about the user, renders a template and send the email out, it might look something like this:\n class OrderService:  # ...  def  send_order_receipt(self, user_id, order_id):  user = UserService.get(user_id)  subject = f&#34;Order {order_id} received&#34;   body = f&#34;Your order {order_id} has been received and will be processed shortly&#34;  content = render(&#39;user_email.html&#39;, user=user, body=body)  email_provider.send(user.email_address, subject, content)   class PaymentService:  # ...   def send_invoice(self, user_id, order_id):  user = UserService.get(user_id)  subject = f&#34;Payment for {order_id} received&#34;   body = f&#34;Payment for order {order_id} has been received, thank you!&#34;  content = render(&#39;user_email.html&#39;, user=user, body=body)  email_provider.send(user.email_address, subject, content)\n Look at all of that repeated code! It\u2019s very tempting to DRY it up with:\n def send_transaction_email(user_id, order_id, subject, body):  user = UserService.get(user_id)  content = render(&#39;user_email.html&#39;, user=user, body=body)  email_provider.send(user.email_address, subject, content)\n Nice! We extracted the common code between the services to a helper function and now our services look like this:\n class OrderService:  # ...   def send_order_receipt(self, user_id, order_id):  subject = f&#34;Order {order_id} received&#34;   body = f&#34;Your order {order_id} has been received and will be processed shortly&#34;  send_transaction_email(user_id, ,order_id, subject, body)   class PaymentService:  # ...   def send_invoice(self, user_id, order_id):  subject = f&#34;Payment for {order_id} received&#34;   body = f&#34;Payment for order {order_id} has been received, thank you!&#34;  send_transaction_email(user_id, ,order_id, subject, body)\n  One of the promises of DRY is that it will allow us to evolve our software better; business requirements and engineering constraints change all the time, and if we need to change the way this piece of code behaves, we only change it once and it will be reflected everywhere.\n In the example above, we can pretty easily change the way we fetch user information, and even the email provider we use can be changed with ease.\n But applied blindly, DRY code can do the exact opposite of facilitating change. Consider in our example, what if because of a business decision the  PaymentService&#39;s invoice mail needs to use a different template, how would we facilitate that? Or if the  OrderService is now required to retrieve a list of purchased items and feed that into the email template? Our extraction of shared logic into the  send_transaction_email method caused the  OrderService and the  PaymentService to become tightly coupled: you can&#39;t change one without the other.\n  \u201cWhen you encounter a class named Helper, the last thing it will do is help you.\u201d\n  Let\u2019s take another example. Assume we are writing unit tests for a web-server we are working on, we have two tests so far:\n func TestWebserver_bad_path_500(t *testing.T) {  srv := createTestWebserver()  defer srv.Close()   resp, err := http.Get(srv.URL + &#34;/bad/path&#34;)  if err != nil {  t.Fatal(&#34;failed calling test server&#34;)  }  if resp.StatusCode != 500 {  t.Fatalf(&#34;expected response code to be 500&#34;)  }   body, err := ioutil.ReadAll(resp.Body)  if err != nil {  t.Fatal(&#34;failed reading body bytes&#34;)  }   if string(body) != &#34;500 internal server error: failed handling /bad/path&#34; {  t.Fatalf(&#34;body does not match expected&#34;)  } }   func TestWebserver_unknown_path_404(t *testing.T) {  srv := createTestWebserver()  defer srv.Close()   resp, err := http.Get(srv.URL + &#34;/unknown/path&#34;)  if err != nil {  t.Fatal(&#34;failed calling test server&#34;)  }   if resp.StatusCode != 404 {  t.Fatalf(&#34;expected response code to be 400&#34;)  }   if resp.Header.Get(&#34;X-Sensitive-Header&#34;) != &#34;&#34; {  t.Fatalf(&#34;expecting sensitive header not to be sent&#34;)  } }\n Plenty of duplication to refactor! Both tests do pretty much the same: they spin up a test server, make a GET call against it and then run simple assertions on the  http.Response.\n  func runWebserverTest(t *testing.T, request Requester, validators []Validator) {  srv := createTestWebserver()  defer srv.Close()   response := request(t, srv)  for _, validator := range validators {  validator.Validate(t, response)  } }\n I\u2019m redacting here the exact definitions of a  Requester and a  Validator to save space but you can see the full implementation in this  gist.\n  func Test_DRY_bad_path_500(t *testing.T) {  runWebserverTest(t,  getRequester(&#34;/bad/path&#34;),  []Validator{  getStatusCodeValidator(500),  getBodyValidator(&#34;500 internal server error: failed handling /bad/path&#34;),  }) }   func Test_DRY_unknown_path_404(t *testing.T) {  runWebserverTest(t,  getRequester(&#34;/unknown/path&#34;),  []Validator{  getStatusCodeValidator(404),  getHeaderValidator(&#34;X-Sensitive-Header&#34;, &#34;&#34;),  }) }\n  It will be  faster to write new, similar tests. If we have 15 different endpoints that behave similarly and require similar assertions, we can express them in a very concise and efficient way.\n Our code became significantly harder to read and extend. If our test fails due to some change in the future, the poor person debugging the issue will have to do a lot of clicking around until they have a good grasp of what\u2019s going on: we replaced trivial, flat, straight-forward code, with clever abstractions and indirections.\n  Pulling common code into libraries that can be shared between applications is a proven and effective practice that\u2019s well established in our industry, surely we don\u2019t mean to say we should stop doing so!\n To help us decide when we should DRY code I would like to present an idea from a terrific book that was recently released in an updated 2nd edition:  The Pragmatic Programmer by Andy Hunt and Dave Thomas:\n \u201cA thing is well designed if it adapts to the people who use it. For code, that means it must adapt by changing. So we believe in the ETC principle: Easier to Change. ETC. That\u2019s it.\n As far as we can tell, every design principle out there is a special case of ETC. Why is decoupling good? Because by isolating concerns we make each easier to change. ETC.\n Why is the single responsibility principle useful? Because a change in requirements is mirrored by a change in just one module. ETC.\n In this gem of a chapter, Hunt and Thomas explore the idea that there is a meta-principle for evaluating design decisions that often collide \u2014 how easy is it going to be to evolve our codebase if we pick this specific path? In our discussions above we showed two ways in which DRYing code can make it harder to change, either by tight-coupling or by hampering readability \u2014 going against the meta-principle of ETC.\n Being cognizant of these possible implications of DRY code can help decide when we  should  not DRY our code; to learn when we  should do so, let\u2019s return to the original scripture and re-examine this principle.\n The DRY principle was originally introduced to the world by the same Hunt and Thomas in the 2000 edition of the book, and so they write:\n \u201cEvery piece of knowledge must have a single, unambiguous, authoritative representation within a system. The alternative is to have the same thing expressed in two or more places.\n If you change one, you have to remember to change the others, [..]. It isn\u2019t a question of whether you\u2019ll remember: it\u2019s a question of when you\u2019ll forget.\n Thomas, David. The Pragmatic Programmer, 2nd edition . Topic 9 \u2014 The Evils of Duplication\n Notice that the DRY principle originally does not deal at all with the repetition or duplication of code, instead, it discusses the danger of not having a single source-of-truth representation for a piece of knowledge in the system.\n When we refactored the  send_transaction_email method to replace duplicated code between the  OrderService and the  PaymentService we confused between duplicated code and duplicated knowledge. If two procedures are identical at a certain point in time, there is no guarantee that they will continue to be required to be so in the future. We must be able to differentiate between procedures that are  coincidentally shared and those that are  essentially shared.\n Coming full circle, I must admit, the DRY principle is a pretty important piece of advice after all; we should just remember that despite it being thrown around all the time:", "posttime": "2020-05-19 15:27:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u539f\u5219,dry,\u4ee3\u7801", "title": "\u5170\u7279\uff1a\u67af\u71e5\u7684\u539f\u5219\u662f\u4e0d\u597d\u7684\u5efa\u8bae", "title_en": "Rant: The DRY Principle Is Bad Advice", "transed": 1, "url": "https://medium.com/@rotemtam/the-dry-principle-is-bad-advice-78c51afd5cf0", "via": "", "real_tags": ["\u539f\u5219", "dry", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002752, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5c55\u793a\u4e86minAnim.js\uff0c\u8fd9\u662f\u4e00\u4e2a100Loc\u7684\u5c0f\u5e93\uff0c\u4f46\u529f\u80fd\u9f50\u5168\uff0c\u7528\u4e8e\u58f0\u660e\u6027\u5730\u6784\u5efa\u52a8\u753b\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u6709\u4eba\u60f3\u8981\u8fd9\u6837\u505a\u3002\u597d\u597d\u4eab\u53d7\u5427\uff01\u84dd\u8272\u5706\u5708\u7684\u52a8\u753b\u76f8\u5f53\u590d\u6742\u3002\u5b83\u7531\u591a\u4e2a\u9636\u6bb5\u7ec4\u6210\u3002(1)\u5706\u5708\u53d8\u5927\u4e86\u3002(2)\u5b83\u7ee7\u7eed\u4ee5\u66f4\u5feb\u7684\u901f\u5ea6\u589e\u957f\uff0c\u56e0\u4e3a\u5b83\u5411\u53f3\u53d1\u5c04\u3002(3)\u6682\u505c\u3002(4)\u5b83\u5411\u4e2d\u95f4\u79fb\u52a8\u3002(5)\u5b83\u518d\u6b21\u6682\u505c\u3002(6)\u7f29\u5c0f\u4e3a\u96f6\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u7531\u5355\u4e2a\u5bf9\u8c61anim_Circle(\u4f7f\u7528minAnim.js\u7f16\u5199)\u6355\u83b7\uff0c\u8be5\u5bf9\u8c61\u58f0\u660e\u52a8\u753b\u6b63\u5728\u6267\u884c\u7684\u64cd\u4f5c\uff1a01\uff1a02\uff1a//cx=location|cr=Radius 03\uff1alet anim_Circle=anim_const(&#34\uff1bcx&#34\uff1b\uff0c100)04\uff1a.seq(anim_const(&#34\uff1bcr&#34\uff1b\uff0c0))05\uff1a//(1)Growth\u300206\uff1a.seq(anim_interpolated(ease_cubic\uff0c&#34\uff1bcr&#34\uff1b\uff0c/*val=*/10\uff0c/*time=*/3))07\uff1a//(2)\u751f\u957f\u65f6\u5411\u53f3\u8f6c\u300208\uff1a.seq(anim_interpolated(ease_cubic\uff0c&#34\uff1bcx&#34\uff1b\uff0c/*val=*/300\uff0c/*time=*/1)09\uff1a.par(anim_interpolated(ease_cubic\uff0c&#34\uff1bcr&#34\uff1b\uff0c70\uff0c1))10\uff1a//(3)\u6682\u505c\u300211\uff1a.seq(anim_delay(/*time=*/3))12\uff1a//(4)\u8fd4\u56de\u5de6\u4fa7\u300213\uff1a.seq(anim_interpolated(ease_cubic\uff0c&#34\uff1bcx&#34\uff1b\uff0c100\uff0c1))14\uff1a//(5)\u518d\u6b21\u6682\u505c\u300215\uff1a.seq(anim_delay(/*time=*/2))16\uff1a//(6)\u7f29\u5c0f\u4e3a\u96f6\u300217\uff1a.seq(anim_interpolated(ease_cubic\uff0c&#34\uff1bcr&#34\uff1b\uff0c0\uff0c1))\uff1b18\uff1a\n\u6574\u4e2a\u52a8\u753b\u7531\u4e00\u4e2a\u57fa\u672c\u4f53\u548c\u4e09\u4e2a\u7ec4\u5408\u5668\u6784\u5efa\u800c\u6210\uff1aanim_interpolated(ease\u3001name\u3001val\u3001time)\uff0c\u4ee5\u5728\u6301\u7eed\u65f6\u95f4\u4e2d\u5c06\u540d\u79f0\u66f4\u6539\u4e3a\u503cval\u7684\u547d\u540d\u503c\u3002\nanim_Circle\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\uff1aval=anim_Circle(T)\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61val\u3002val.cx\u548cval.cr\u5177\u6709\u52a8\u753b\u6307\u5b9a\u7684\u503c\u3002\u5c31\u662f\u8fd9\u6837\u3002\u5b83\u4e0d\u4f1a\u4fee\u6539DOM\u3002\u5b83\u4e0d\u7f16\u8f91\u5706\u6807\u7b7e\u3002\u7ed9\u5b9a\u65f6\u95f4t0\uff0c\u5b83\u5728\u65f6\u95f4t0\u8ba1\u7b97cx\u548ccr\u3002\u7b80\u5355\u70b9\uff0c\u7b28\u86cb\uff01\u4e0b\u9762\u662f\u4e0d\u540ct\u503c\u7684val.cx\u548cval.cr\u7684\u503c\u7684\u66f2\u7ebf\u56fe\u3002\u8be5\u7ed8\u56fe\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u8c03\u7528anim_Circle\u6765\u7ed8\u5236\u7ed3\u679c\u3002\u51fd\u6570anim_Circle\u5c31\u662f\u8fd9\u4e9b\u66f2\u7ebf\u56fe\uff0c\u56e0\u4e3a\u5b83\u4e0d\u8ba1\u7b97\u5176\u4ed6\u4efb\u4f55\u5185\u5bb9\u3002\u5947\u5999\u7684\u8bf4\u6cd5\u662f\uff0canim_Circle\u4e0d\u4f1a\u6539\u53d8\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u662f\u65e0\u526f\u4f5c\u7528\u7684\uff0c\u6216\u8005\u8bf4\u662f\u6298\u5c04\u900f\u660e\u7684\u3002\n\u8ba2\u5355\uff1a\u70b9\u51fb\u6b64\u94fe\u63a5\uff0c\u5c06\u590d\u5236\u5230\u526a\u8d34\u677f\u4e0a\u7684\u5185\u5bb9\u7c98\u8d34\u5230\u6d4f\u89c8\u5668\u7684\u63a7\u5236\u53f0\u4e2d\uff0c\u7136\u540e\u6309Enter\u952e\u3002\u8fd9\u4f1a\u7acb\u5373\u66f4\u65b0\u5706\u7684\u52a8\u753b\u548c\u60c5\u8282\uff0c\u56e0\u4e3a\u526a\u8d34\u677f\u4e2d\u7684\u4ee3\u7801\u4f1a\u8986\u76d6anim_Circle\u7684\u5b9a\u4e49\uff01\u56de\u6eda\u5230\u9876\u90e8\u4ee5\u67e5\u770b\u65b0\u7684\u52a8\u753b\u548c\u56fe\u8868\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u9875\u9762\u662f\u58f0\u660e\u6027\u7684\uff0c\u6240\u4ee5\u52a8\u753b\u548c\u60c5\u8282\u90fd\u662f\u7531anim_Circle\u7684\u5b9a\u4e49\u9a71\u52a8\u7684\u3002\n&#39\uff1b\u5df2\u590d\u5236\u5230\u526a\u8d34\u677f\u7684\u4ee3\u7801\u4e3a\uff1a01\uff1a02\uff1a//cx=location|cr=RADIUS 03\uff1aANIM_CIRCLE=ANIM_CONST(&#34\uff1bCX&#34\uff1b\uff0c100)04\uff1a.seq(ANIM_CONST(&#34\uff1bcr&#34\uff1b\uff0c0))05\uff1a//(1)\u589e\u5927\u5927\u5c0f\u300206\uff1a.seq(anim_interpolated(ease_cubic\uff0c&#34\uff1bcr&#34\uff1b\uff0c/*val=*/10\uff0c/*time=*/3))07\uff1a//(2)\u751f\u957f\u65f6\u5411\u53f3\u8f6c\u300208\uff1a.seq(anim_interpolated(ease_cubic\uff0c&#34\uff1bcx&#34\uff1b\uff0c/*val=*/300\uff0c/*time=*/1)09\uff1a.par(anim_interpolated(ease_cubic\uff0c&#34\uff1bcr&#34\uff1b\uff0c70\uff0c1))10\uff1a//(3)\u6536\u7f29\u4e3a\u96f6\u300211\uff1a.seq(anim_interpolated(ease_cubic\uff0c&#34\uff1bcr&#34\uff1b\uff0c0\uff0c1))\uff1bPLOT()12\uff1a\n\u60a8\u53ef\u4ee5\u63a2\u7d22\u4e0d\u540c\u7684\u5b9a\u4e49anim_Circle\u3002\u968f\u4fbf\u73a9\u5427\u3002\u5c1d\u8bd5\u5728\u63a7\u5236\u53f0\u4e2d\u8bc4\u4f30anim_Circle(0)\u3001anim_Circle.uration\u3001anim_Circle(anim_Circle.uration/2.0)\uff0c\u4ee5\u4e86\u89e3anim_Circle\u8fd4\u56de\u7684\u5185\u5bb9\u3002\u8981\u8fd4\u56de\u5230\u4e8b\u4ef6\u7684\u539f\u59cb\u72b6\u6001\uff0c\u8bf7\u5355\u51fb\u6b64\u94fe\u63a5\u5c06\u65e7\u4ee3\u7801\u590d\u5236\u5230\u526a\u8d34\u677f\u3002\n\u3002\u5c06\u6587\u672c\u7c98\u8d34\u5230\u60a8\u7684\u63a7\u5236\u53f0\u4e2d\uff0c\u7136\u540e\u6309Enter\u952e\u3002\u4e00\u5207\u90fd\u4f1a\u6062\u590d\u539f\u72b6\u3002", "note_en": "I show off   minanim.js,a tiny, 100LoC, yet feature-complete library for building animations  declaratively,and why someone would want to do things this way. Enjoy!  The blue circle&#39;s animation is quite complex. It consists of multiplestages. (1) The circle grows in size. (2) It continues to grow in sizeat a faster rate, as it shoots off to the right. (3) It pauses. (4) Itmoves to the middle. (5) It pauses again. (6) It shrinks to nothing.All of this is captured by a single object  anim_circle (written using  minanim.js)which  declares what the animation is doing: 01:  02:   // cx = location | cr = radius 03: let anim_circle = anim_const( &#34;cx&#34;,  100) 04: .seq(anim_const( &#34;cr&#34;,  0)) 05:   // (1) grow in size. 06: .seq(anim_interpolated(ease_cubic,  &#34;cr&#34;,   /*val=*/ 10,   /*time=*/ 3)) 07:   // (2) go to right while growing. 08: .seq(anim_interpolated(ease_cubic,  &#34;cx&#34;,   /*val=*/ 300,   /*time=*/ 1) 09: .par(anim_interpolated(ease_cubic,  &#34;cr&#34;,  70,  1))) 10:   // (3) pause. 11: .seq(anim_delay(  /*time=*/ 3)) 12:   // (4) come back to the left. 13: .seq(anim_interpolated(ease_cubic,  &#34;cx&#34;,  100,  1)) 14:   // (5) pause again. 15: .seq(anim_delay(  /*time=*/ 2)) 16:   // (6) shrink to nothing. 17: .seq(anim_interpolated(ease_cubic,  &#34;cr&#34;,  0,  1)); 18:\nThe entire animation is built out of one primitive and three combinators: anim_interpolated(ease, name, val, time) to change to a named value with name  name to value  val in duration  time.\n  anim_circle is a  function, which can be invoked as  val = anim_circle(t).It returns an object  val.  val.cx and  val.cr have values as the animation dictates. That&#39;s it. It  does not modify the DOM. It  does not edit the  circle tag.Given a time  t0, it computes  cx and  cr at time  t0. Keep it simple, stupid! Here is a plot of the values of  val.cx and  val.cr for different values of  t.This plotting code calls  anim_circle at different times to plot theresults. The function  anim_circle  is these plots,since it doesn&#39;t compute anything else. Fancy ways of saying that  anim_circle doesn&#39;t change anything else is to say that it is  side-effect-free, or  refrentially transparent.\n  An ORDER: Click on this link, paste what has been copied to your clipboard into the browser&#39;s console, and hit enter.   This instantly updates the circle&#39;s animation and the plots, since the code in the clipboard overwrites the definition of  anim_circle! Scroll back to the top to see the new animation and charts. As our page is declarative, both the animations and the plots are driven by the definition of  anim_circle.\nThe code that&#39;s been copied onto your clipboard is: 01:  02:   // cx = location | cr = radius 03: anim_circle = anim_const( &#34;cx&#34;,  100) 04: .seq(anim_const( &#34;cr&#34;,  0)) 05:   // (1) grow in size. 06: .seq(anim_interpolated(ease_cubic,  &#34;cr&#34;,   /*val=*/ 10,   /*time=*/ 3)) 07:   // (2) go to right while growing. 08: .seq(anim_interpolated(ease_cubic,  &#34;cx&#34;,   /*val=*/ 300,   /*time=*/ 1) 09: .par(anim_interpolated(ease_cubic,  &#34;cr&#34;,  70,  1))) 10:   // (3) shrink to nothing. 11: .seq(anim_interpolated(ease_cubic,  &#34;cr&#34;,  0,  1)); plot() 12:\nYou can explore different definitions  anim_circles. Feel free toplay around. Try evaluating  anim_circle(0),  anim_circle(anim_circle.duration), anim_circle(anim_circle.duration/2.0) in the console to get a feel for what anim_circle returns.   To go back to the original state of affairs, click on this link to copy the old code onto your clipboard\n. Paste the text, into your console, hit enter. Everything will be back to original.", "posttime": "2020-05-19 15:27:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f16\u7a0b,\u4e0d\u5408\u7406,effectiveness,anim", "title": "\u58f0\u660e\u6027\u7f16\u7a0b\u7684\u4e0d\u5408\u7406\u6709\u6548\u6027", "title_en": "The unreasonable effectiveness of declarative programming", "transed": 1, "url": "https://bollu.github.io/mathemagic/declarative/index.html", "via": "", "real_tags": ["\u7f16\u7a0b", "\u4e0d\u5408\u7406", "anim"]}, {"category": "", "categoryclass": "", "imagename": "2183954189e45dab1515298d8acd8a70.jpg", "infoid": 1002751, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u5229\u7269\u6d66\u70ed\u5e26\u533b\u5b66\u9662\u7684\u4f20\u67d3\u75c5\u6559\u6388\uff0c\u4fdd\u7f57\u00b7\u52a0\u7eb3\u5b8c\u5168\u6709\u8d44\u683c\u8c08\u8bba\u75be\u75c5\u3002\n\u6089\u5c3c\u5723\u6587\u68ee\u7279\u533b\u9662\u6b63\u5728\u5bf9\u8be5\u75c5\u6bd2\u7684\u5f71\u54cd\u8fdb\u884c\u4e3a\u671f12\u4e2a\u6708\u7684\u7814\u7a76\u3002\n\u6211\u5f97\u8fc7\u767b\u9769\u70ed\u3002\u6211\u5f97\u8fc7\u759f\u75be\u3002\u6211\u4ece\u6765\u6ca1\u6709\u5f97\u8fc7\u8fd9\u6837\u7684\u75c5\uff0c\u5b83\u771f\u7684\u5f88\u53ef\u6015\uff0c\u56e0\u4e3a\u5b83\u662f\u5982\u6b64\u4e0d\u53ef\u9884\u6d4b\u3002\n\u4f60\u611f\u89c9\u5f88\u597d\uff0c\u7136\u540e\u5728\u4e0b\u5348\u7a81\u7136\uff0c\u5b83\u50cf\u677f\u7403\u68d2\u4e00\u6837\u62cd\u6253\u4f60\u7684\u5934\u90e8\u3002\n\u5b83\u4f1a\u7ed9\u4f60\u5e26\u6765\u4e00\u4e9b\u975e\u5e38\u7c7b\u4f3c\u4e8e\u6162\u6027\u75b2\u52b3\u7684\u75c7\u72b6\uff0c\u4f46\u6211\u4e0d\u592a\u613f\u610f\u8fd9\u4e48\u8bf4\uff0c\u4ed6\u8bf4\u3002\n\u6211\u73b0\u5728\u5f88\u540c\u60c5\u60a3\u6709\u6162\u6027\u75b2\u52b3\u7efc\u5408\u75c7\u7684\u4eba\uff0c\u6211\u76f8\u4fe1\u8fd9\u79cd\u75be\u75c5\u4f1a\u8ba9\u4f60\u5feb\u901f\u4f53\u9a8c\u5230\u8fd9\u4e9b\u75c7\u72b6\u3002\n\u79d1\u5b66\u5bb6\u4eec\u4ecd\u5728\u63ed\u5f00\u8fd9\u79cd\u75c5\u6bd2\u7684\u81f4\u547d\u79d8\u5bc6\uff0c\u5bf9\u90a3\u4e9b\u4ece\u75be\u75c5\u4e2d\u5eb7\u590d\u7684\u4eba\u7684\u957f\u671f\u5f71\u54cd\u8fd8\u6ca1\u6709\u5b8c\u5168\u4e86\u89e3\u3002\n\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u8868\u793a\uff0c\u90a3\u4e9b\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u4e0d\u592a\u4e25\u91cd\u7684\u4eba\u5e94\u8be5\u5728\u4e24\u5468\u5185\u5eb7\u590d\uff0c\u4e25\u91cd\u75c5\u4f8b\u53ef\u80fd\u9700\u8981\u957f\u8fbe\u516d\u5468\u7684\u65f6\u95f4\u3002\n\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u88ab\u8ba4\u4e3a\u662f\u8f7b\u5ea6\u75c5\u6bd2\u53d1\u4f5c\u7684\u60a3\u8005\uff0c\u4e5f\u5728\u7ecf\u5386\u8fdc\u8fdc\u8d85\u8fc7\u5efa\u8bae\u7684\u6062\u590d\u671f\u7684\u75b2\u52b3\u548c\u547c\u5438\u56f0\u96be\u3002\n\u5728\u6089\u5c3c\u7684\u5723\u6587\u68ee\u7279\u533b\u9662\uff0c\u4e00\u9879\u6b63\u5728\u8fdb\u884c\u7684\u957f\u8fbe\u4e00\u5e74\u7684\u7814\u7a76\u6709\u671b\u63d0\u4f9b\u4e00\u4e9b\u7b54\u6848\u3002\n\u5723\u6587\u68ee\u7279\u533b\u9662\u7814\u7a76\u7684\u5173\u952e\u7814\u7a76\u5458\u662f\u4f20\u67d3\u75c5\u5185\u79d1\u533b\u751f\u683c\u96f7\u683c\u00b7\u591a\u5c14\u6559\u6388\u3002\n\u5b83\u6709\u5e7f\u6cdb\u7684\u6025\u6027\u75be\u75c5\uff0c\u4ece\u76f8\u5bf9\u8f7b\u5fae\u7684\u4e0a\u547c\u5438\u9053\u611f\u67d3\u75c7\u72b6\u5230\u975e\u5e38\u4e25\u91cd\u7684\u80ba\u708e\u548c\u5176\u4ed6\u5668\u5b98\u5f71\u54cd\u3002\n\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\uff0c\u5373\u4f7f\u662f\u8f83\u8f7b\u5fae\u7684\u60c5\u51b5\uff0c\u662f\u5426\u5bf9\u4eba\u4eec\u7684\u5065\u5eb7\u6709\u6301\u7eed\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u75c5\u6bd2\u540e\u75b2\u52b3\uff1b\u5bf9\u4eba\u4eec\u7684\u8fd0\u52a8\u8010\u53d7\u6027\uff0c\u795e\u7ecf\u8ba4\u77e5\u529f\u80fd\uff0c\u4ee5\u53ca\u96c6\u4e2d\u6ce8\u610f\u529b\u7684\u80fd\u529b\u7684\u5f71\u54cd\u3002\n\u6211\u4eec\u77e5\u9053\u5176\u4ed6\u75c5\u6bd2\u4f1a\u5f15\u8d77\u75c5\u6bd2\u540e\u75b2\u52b3\uff0c\u817a\u70ed\u53ef\u80fd\u662f\u5178\u578b\u7684\u75c5\u6bd2\uff0c\u4f46\u4f17\u6240\u5468\u77e5\uff0c\u7f57\u65af\u6cb3\u70ed\u548c\u5176\u4ed6\u75c5\u6bd2\u6027\u75be\u75c5\u4f1a\u5f15\u8d77\u75c5\u6bd2\u75b2\u52b3\u3002\n\u4e9a\u5386\u514b\u65af\u00b7\u5218\u6613\u65af(Alex Lewis)\u662f\u53c2\u4e0e\u8fd9\u9879\u7814\u7a76\u7684\u60a3\u8005\u4e4b\u4e00\uff0c\u5979\u57283\u6708\u4e2d\u65ec7\u70b930\u5206\u76f8\u9047\uff0c\u5f53\u65f6\u5979\u7684\u51a0\u72b6\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\u3002\n\u5979\u544a\u8bc97.30\uff1b\u6211\u4ee5\u524d\u5f88\u5065\u5eb7\uff0c\u4f46\u73b0\u5728\u611f\u89c9\u4e0d\u4e00\u6837\u4e86\u3002\n\u6211\u4eec\u4ecd\u7136\u6ca1\u6709\u4efb\u4f55\u660e\u786e\u7684\u7b54\u6848\u2026\u3002\u5218\u6613\u65af\u8bf4\uff1a\u6211\u5f88\u6709\u5174\u8da3\u4ece\u8fd9\u9879\u7814\u7a76\u4e2d\u627e\u51fa\u6211\u4eec\u662f\u5426\u8fd8\u80fd\u4e86\u89e3\u5230\u66f4\u591a\u5173\u4e8e\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\u3002\n\u7f8e\u56fd\u4f5c\u5bb6\u83f2\u5965\u5a1c\u00b7\u6d1b\u6e29\u65af\u5766\u57283\u6708\u4e2d\u65ec\u88ab\u8bca\u65ad\u51fa\u60a3\u6709\u51a0\u72b6\u75c5\u6bd2\uff0c\u5979\u5bf9\u81ea\u5df1\u7684\u75c7\u72b6\u6301\u7eed\u4e86\u591a\u4e45\u611f\u5230\u56f0\u60d1\u548c\u7126\u8651\u3002\n\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6f2b\u957f\u7684\u6062\u590d\u8fc7\u7a0b\uff0c\u4e0e\u6211\u9884\u671f\u7684\u5927\u4e0d\u76f8\u540c\uff0c\u5979\u544a\u8bc97.30\u3002\n\u5979\u627e\u4e0d\u5230\u4efb\u4f55\u5173\u4e8e\u671f\u5f85\u4ec0\u4e48\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5979\u6210\u7acb\u4e86\u4e00\u4e2a\u4e92\u52a9\u5c0f\u7ec4\uff0c\u73b0\u5728\u8fd9\u4e2a\u5c0f\u7ec4\u5728\u4e16\u754c\u5404\u5730\u6709\u6570\u5343\u540d\u6210\u5458\u3002\n\u8bb8\u591a\u4eba\u90fd\u6709\u8fc7\u548c\u5979\u4e00\u6837\u7684\u7ecf\u5386\uff0c\u5728\u4ed6\u4eec\u8ba4\u4e3a\u81ea\u5df1\u4f1a\u597d\u5f88\u4e45\u4e4b\u540e\uff0c\u611f\u5230\u75b2\u60eb\u548c\u4e0d\u9002\u3002\n\u51e0\u5468\u524d\u6211\u4ee5\u4e3a\u6211\u5df2\u7ecf\u5b8c\u5168\u5eb7\u590d\u4e86\uff0c\u4f46\u540e\u6765\u53c8\u51fa\u73b0\u4e86\u4e00\u4e9b\u8001\u75c7\u72b6\u3001\u53d1\u51b7\u548c\u51fa\u6c57\u3002\u8fd9\u79cd\u5f3a\u70c8\u7684\u75b2\u52b3\u611f\uff0c\u5979\u8bf4\u3002\n\u6211\u6e05\u695a\u5730\u610f\u8bc6\u5230\uff0c\u9700\u8981\u4e3a\u611f\u67d3\u8fd9\u79cd\u75c5\u6bd2\u7684\u4eba\u5efa\u7acb\u4e00\u4e2a\u57fa\u5730\u6216\u793e\u533a\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u53ef\u4ee5\u7545\u6240\u6b32\u8a00\u3002\n\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684\u6570\u4ee5\u5343\u8ba1\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u73b0\u5728\u5df2\u7ecf\u8054\u7cfb\u5230\u4e86\u6d1b\u6e29\u65af\u5766\u5973\u58eb\uff0c\u4ed6\u4eec\u7ecf\u5386\u4e86\u4e0e\u5979\u76f8\u4f3c\u7684\u75c7\u72b6\u3002", "note_en": "As a professor of infectious diseases at Liverpool School of Tropical Medicine, Paul Garner is well qualified to talk about disease.\n St Vincent&#39;s Hospital in Sydney is undertaking a 12-month study into the effects of the virus\n   &#34;I&#39;ve had dengue. I&#39;ve had malaria. I&#39;ve never been as ill as this and it&#39;s been really frightening because it&#39;s so unpredictable.&#34;\n   &#34;You feel quite well and then suddenly in the afternoon it slaps you round the head like a cricket bat.\n    &#34;It gives you some of the symptoms that are very similar to chronic fatigue but I am hesitant about calling it that,&#34; he said.\n  &#34;I have sympathy for people with chronic fatigue syndrome now, and I believe this disease fast-tracks you into experiencing these symptoms.&#34;\n     Scientists are still uncovering the deadly secrets of the virus and the long-term impact for those who recover from the disease is yet to be fully understood.\n  The World Health Organisation states those with less severe cases of COVID-19 should recover within two weeks, and serious cases could take up to six weeks.\n But even patients with what are considered mild bouts of the virus, are experiencing fatigue and breathlessness well beyond the suggested recovery period.\n  At Sydney&#39;s St Vincent&#39;s Hospital, it is hoped a year-long study that is getting underway will provide some answers.\n A key investigator on the St Vincent&#39;s Hospital study is infectious diseases physician, Professor Greg Dore.\n  &#34;It has a broad spectrum of acute illness from relatively mild upper respiratory type infection symptoms to very severe pneumonia and other organ effects.\n &#34;We&#39;re interested in even the milder cases, whether there is an ongoing effect on people&#39;s health, what we call a post viral fatigue; effects on people&#39;s exercise tolerance, on neuro-cognitive function, so ability to concentrate.\n &#34;We know that you can get post viral fatigue with other viruses and glandular fever is probably the classic one, but Ross River fever and other viral illnesses are well known to cause viral fatigue.&#34;\n    One of the patients taking part in the study is Alex Lewis, who 7.30 met in mid March, shortly after she tested positive for COVID-19.\n  &#34;I was quite fit before but now I don&#39;t feel the same way,&#34; she told 7.30.\n     &#34;We still don&#39;t have any definitive answer \u2026 I&#39;m quite interested to find out from the study if there is anything more we can know about that,&#34; Ms Lewis said.\n    US writer Fiona Lowenstein was diagnosed with COVID-19 in mid-March and is bewildered and anxious about how long her symptoms have lasted.\n &#34;It&#39;s been a very long recovery process and very different from what I expected,&#34; she told 7.30.\n She couldn&#39;t find any information about what to expect, so she started a support group, which now has thousands of members around the world.\n Many have had the same experience as her, feeling weary and unwell long after they thought they&#39;d be better.\n &#34;I thought I had fully recovered a couple of weeks ago, then I relapsed into some old symptoms, chills and sweats. And this intense feeling of fatigue,&#34; she said.\n  &#34;It became clear to me that there needed to be a base or community for people suffering from this virus where we could talk through everything.\n  Ms Lowenstein has now been contacted by thousands of COVID-19 patients from around the world, experiencing similar symptoms to her.", "posttime": "2020-05-19 15:26:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51a0\u72b6\u75c5\u6bd2,coronavirus,\u75c5\u6bd2,\u624d\u80fd,patients", "title": "\u5373\u4f7f\u662f\u8f7b\u5fae\u75c5\u4f8b\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u4e5f\u9700\u8981\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u624d\u80fd\u5eb7\u590d\u3002", "title_en": "Coronavirus patients with even mild cases are taking months to recover", "transed": 1, "url": "https://www.abc.net.au/news/2020-05-19/covid-fatigue-one-of-worst-symptons-patients-say/12252602", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u624d\u80fd", "patients"]}, {"category": "", "categoryclass": "", "imagename": "daf8d37a106032bd45a53164d90231f9.jpg", "infoid": 1002750, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u79d1\u5b66\u5bb6\u4eec\u5df2\u7ecf\u89e3\u5f00\u4e86\u706b\u661f\u4e0a\u4e00\u4e9b\u7c7b\u4f3c\u7194\u5ca9\u7684\u6d41\u52a8\u7684\u8c1c\u56e2\uff0c\u4ed6\u4eec\u8bf4\u8fd9\u4e9b\u6d41\u52a8\u4e0d\u662f\u7531\u7194\u5ca9\u9020\u6210\u7684\uff0c\u800c\u662f\u7531\u6ce5\u6d46\u9020\u6210\u7684\u3002\u706b\u661f\u8868\u9762\u6709\u6570\u4ee5\u4e07\u8ba1\u7684\u8fd9\u6837\u7684\u5730\u8c8c\uff0c\u901a\u5e38\u4f4d\u4e8e\u6709\u5927\u91cf\u6c9f\u6e20\u7684\u5730\u65b9\uff0c\u8fd9\u4e9b\u6c9f\u6e20\u88ab\u987a\u6d41\u800c\u4e0b\u7684\u53e4\u4ee3\u6db2\u4f53\u51b2\u5237\u8fdb\u706b\u661f\u8868\u9762\u3002\n\u8fd9\u4e9b\u6d77\u5ce1\u975e\u5e38\u957f\uff0c\u957f\u8fbe\u6570\u767e\u516c\u91cc\uff0c\u901a\u5e38\u5bbd\u8fbe\u51e0\u5341\u516c\u91cc\u3002\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662f\u5927\u89c4\u6a21\u6d2a\u6c34\u7684\u7ed3\u679c\uff0c\u6d89\u53ca\u7684\u5de8\u5927\u6c34\u4f53\u53ef\u4e0e\u5730\u7403\u4e0a\u8fc4\u4eca\u53d1\u751f\u7684\u6700\u5927\u6d2a\u6c34\u76f8\u5ab2\u7f8e\u3002\u5f53\u6c34\u6e17\u5165\u5730\u4e0b\u65f6\uff0c\u5b83\u4f1a\u518d\u6b21\u4ee5\u6ce5\u6d46\u7684\u5f62\u5f0f\u6d6e\u51fa\u6c34\u9762\u3002\n\u4e00\u4e2a\u6b27\u6d32\u7814\u7a76\u5c0f\u7ec4\u73b0\u5728\u5df2\u7ecf\u6a21\u62df\u4e86\u706b\u661f\u8868\u9762\u7684\u6ce5\u6d46\u8fd0\u52a8\uff0c\u7ed3\u679c\u53d1\u8868\u5728\u201c\u81ea\u7136\u5730\u7403\u79d1\u5b66\u201d\u4e0a\u3002\n\u8fd9\u9879\u7814\u7a76\u7531\u6377\u514b\u79d1\u5b66\u9662\u5730\u7403\u7269\u7406\u7814\u7a76\u6240\u9886\u5bfc\uff0c\u82f1\u56fd\u7684\u5170\u5f00\u65af\u7279\u5927\u5b66\u3001\u5f00\u653e\u5927\u5b66\u548c\u5362\u745f\u798f\u00b7\u963f\u666e\u5c14\u987f\u5b9e\u9a8c\u5ba4\u3001\u6cd5\u56fd\u7684\u56fd\u5bb6\u79d1\u5b66\u7814\u7a76\u4e2d\u5fc3\u3001\u5fb7\u56fd\u7684DLR\u548c\u660e\u65af\u7279\u5927\u5b66\u4ee5\u53ca\u632a\u5a01\u7684CEED\u53c2\u4e0e\u4e86\u8fd9\u9879\u7814\u7a76\u3002\n\u5229\u7528\u5f00\u653e\u5927\u5b66\u7684\u706b\u661f\u5b9e\u9a8c\u5ba4\uff0c\u79d1\u5b66\u5bb6\u4eec\u91cd\u5efa\u4e86\u706b\u661f\u4e0a\u7684\u8868\u9762\u6e29\u5ea6\uff0c\u4f5c\u4e3a\u6a21\u62df\u5730\u7403\u548c\u706b\u661f\u6761\u4ef6\u7684\u4e00\u90e8\u5206\u3002\n\u5170\u5f00\u65af\u7279\u5927\u5b66\u5730\u7403\u4e0e\u884c\u661f\u79d1\u5b66\u540d\u8a89\u6559\u6388\u83b1\u6602\u5185\u5c14\u00b7\u5a01\u5c14\u900a\u8bf4\uff1a\u6211\u4eec\u5728\u771f\u7a7a\u5ba4\u4e2d\u8fdb\u884c\u4e86\u5b9e\u9a8c\uff0c\u4ee5\u6a21\u62df\u706b\u661f\u4e0a\u6ce5\u6d46\u7684\u91ca\u653e\u3002\u8fd9\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5b87\u5b99\u98de\u8239\u7684\u56fe\u50cf\u4e2d\u770b\u5230\u4e86\u706b\u661f\u4e0a\u8bb8\u591a\u6d41\u52a8\u7684\u7279\u5f81\uff0c\u4f46\u706b\u661f\u4e0a\u7684\u4efb\u4f55\u6f2b\u6e38\u8f66\u8f86\u90fd\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\u5b83\u4eec\uff0c\u800c\u4e14\u5b83\u4eec\u662f\u7194\u5ca9\u6d41\u8fd8\u662f\u6ce5\u77f3\u6d41\u4e5f\u6709\u4e00\u4e9b\u542b\u7cca\u4e0d\u6e05\u7684\u5730\u65b9\u3002\n\u79d1\u5b66\u5bb6\u4eec\u5728\u4f4e\u538b\u548c\u6781\u7aef(-20\u6444\u6c0f\u5ea6)\u4e0b\u8fdb\u884c\u4e86\u5b9e\u9a8c\uff0c\u4ee5\u91cd\u73b0\u706b\u661f\u73af\u5883\u3002\u4ed6\u4eec\u53d1\u73b0\uff0c\u7531\u4e8e\u5feb\u901f\u7ed3\u51b0\u548c\u51b0\u58f3\u7684\u5f62\u6210\uff0c\u706b\u661f\u6761\u4ef6\u4e0b\u81ea\u7531\u6d41\u52a8\u7684\u6ce5\u6d46\u8868\u73b0\u51fa\u4e0e\u5730\u7403\u4e0a\u4e0d\u540c\u7684\u8868\u73b0\u3002\u8fd9\u662f\u56e0\u4e3a\u6c34\u4e0d\u7a33\u5b9a\uff0c\u5f00\u59cb\u6cb8\u817e\u548c\u84b8\u53d1\u3002\u84b8\u53d1\u4f1a\u5e26\u8d70\u6ce5\u6d46\u4e2d\u7684\u6f5c\u70ed\uff0c\u6700\u7ec8\u4f7f\u5176\u7ed3\u51b0\u3002\n\u5728\u706b\u661f\u7684\u6761\u4ef6\u4e0b\uff0c\u5b9e\u9a8c\u6ce5\u77f3\u6d41\u5f62\u6210\u7684\u5f62\u72b6\u7c7b\u4f3c\u4e8e\u5730\u7403\u4e0a\u7ecf\u5e38\u5728\u590f\u5a01\u5937\u6216\u51b0\u5c9b\u51fa\u73b0\u7684\u5e15\u970d\u970d\u7194\u5ca9\uff0c\u8fd9\u4e9b\u7194\u5ca9\u51b7\u5374\u540e\u5f62\u6210\u5e73\u6ed1\u7684\u8d77\u4f0f\u8868\u9762\u3002\u5728\u706b\u661f\u6761\u4ef6\u4e0b\uff0c\u5b9e\u9a8c\u6ce5\u77f3\u6d41\u5f62\u6210\u7684\u5f62\u72b6\u4e0e\u5730\u7403\u4e0a\u7ecf\u5e38\u51fa\u73b0\u5728\u590f\u5a01\u5937\u6216\u51b0\u5c9b\u7684\u7194\u5ca9\u76f8\u4f3c\uff0c\u51b7\u5374\u540e\u5f62\u6210\u5e73\u6ed1\u7684\u8d77\u4f0f\u8868\u9762\u3002\u5728\u5b9e\u9a8c\u4e2d\uff0c\u5f53\u6db2\u6001\u6ce5\u6d46\u4ece\u51bb\u7ed3\u58f3\u7684\u88c2\u7f1d\u4e2d\u6ea2\u51fa\uff0c\u7136\u540e\u91cd\u65b0\u51bb\u7ed3\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\n\u7136\u800c\uff0c\u5728\u9646\u5730\u5927\u6c14\u538b\u4e0b\uff0c\u5373\u4f7f\u5728\u975e\u5e38\u5bd2\u51b7\u7684\u6761\u4ef6\u4e0b\uff0c\u5b9e\u9a8c\u6ce5\u77f3\u6d41\u4e5f\u4e0d\u4f1a\u5f62\u6210\u7194\u5ca9\u5f62\u72b6\uff0c\u4e0d\u4f1a\u81a8\u80c0\uff0c\u4e5f\u4e0d\u4f1a\u6709\u51b0\u58f3\u3002\n\u8fd9\u79cd\u6c89\u79ef\u706b\u5c71\u4f5c\u7528\u4e5f\u88ab\u8ba4\u4e3a\u662f\u9488\u5bf9\u77ee\u884c\u661f\u8c37\u795e\u661f\u7684\uff0c\u8c37\u795e\u661f\u4f4d\u4e8e\u706b\u661f\u548c\u6728\u661f\u4e4b\u95f4\uff0c\u5728\u51b0\u51b7\u7684\u5730\u58f3\u4e0b\u53ef\u80fd\u6709\u4e00\u7247\u6d51\u6d4a\u7684\u6d77\u6c34\u3002\n\u8be5\u7814\u7a76\u7684\u4e3b\u8981\u4f5c\u8005Petr Bro\u017e\u535a\u58eb\u8bf4\uff1a\u6211\u4eec\u8ba4\u4e3a\u6ce5\u706b\u5c71\u4f5c\u7528\u53ef\u4ee5\u89e3\u91ca\u706b\u661f\u4e0a\u4e00\u4e9b\u7c7b\u4f3c\u7194\u5ca9\u7684\u6d41\u52a8\u5f62\u6001\u7684\u5f62\u6210\uff0c\u7c7b\u4f3c\u7684\u8fc7\u7a0b\u4e5f\u53ef\u80fd\u9002\u7528\u4e8e\u592a\u9633\u7cfb\u5916\u51b0\u4f53\u4e0a\u7684\u6ce5\u6d46\u55b7\u53d1\uff0c\u6bd4\u5982\u8c37\u795e\u661f\u3002\u66f4\u591a\u4fe1\u606f\uff1a\u706b\u661f\u8868\u9762\u6761\u4ef6\u4e0b\u7c7b\u4f3c\u7194\u5ca9\u7684\u6ce5\u77f3\u6d41\u7684\u5b9e\u9a8c\u8bc1\u636e\uff0c\u201c\u81ea\u7136\u5730\u7403\u79d1\u5b66\u201d(2020\u5e74)\u3002\u7f51\u5740\uff1a10.1038/s41561-020577-2\uff0c\u7f51\u5740\uff1awww.nature.com/products/s41561-0200577-2", "note_en": "The mystery of some lava-like flows on Mars has been solved by scientists who say they are caused not by lava but by mud.    There are tens of thousands of these landforms on the Martian surface, often situated where there are massive channels scoured into the surface by ancient liquids flowing downstream.\n  These channels are extremely long, extending many hundreds of kilometres in length and usually more than dozens of kilometres wide. They are believed to be the result of massive floods involving huge bodies of water comparable to the largest floods ever known to have occurred on Earth. When the water seeps into the subsurface it can emerge again as mud.\n  A European team of researchers has now simulated the movement of mud on the surface of Mars, with the results published in  Nature Geoscience.\n  The research was led by the Institute of Geophysics at the Czech Academy of Sciences, and involved Lancaster University, the Open University and the Rutherford Appleton Laboratory in the UK, CNRS in France, DLR and M\u00fcnster University in Germany, and CEED in Norway.\n  Using the Mars Chamber at the Open University, the scientists recreated the surface temperature and   on Mars as part of a simulation of conditions on both Earth and Mars.\n   Lionel Wilson, Emeritus Professor of Earth and Planetary Sciences at Lancaster University, said: &#34;We performed experiments in a vacuum chamber to simulate the release of mud on Mars. This is of interest because we see many flow-like features on Mars in spacecraft images, but they have not yet been visited by any of the roving vehicles on the   and there is some ambiguity about whether they are flows of lava or mud.&#34;\n  The scientists performed experiments at low pressure and at extremely   (-20\u00b0C) to recreate the Martian environment. They found that free flowing mud under Martian conditions behaves differently from on Earth, because of rapid freezing and the formation of an icy crust. This is because water is not stable and begins to boil and evaporate. The evaporation removes latent heat from the mud, eventually causing it to freeze.\n   Under Martian conditions, the experimental mud flows formed similar shapes to &#34;pahoehoe&#34; lava frequently occurring on Hawaii or Iceland on Earth, which cools down to form smooth undulating surfaces. In the experiment, this happened when liquid mud spilled from ruptures in the frozen crust, then refroze.\n  However, under terrestrial atmospheric pressure, the experimental mud flows did not form lava shapes, did not expand, and had no icy crust, even under very cold conditions.\n   This &#34;sedimentary volcanism&#34; has also been proposed for the dwarf planet Ceres which lies in the   between Mars and Jupiter and may have a muddy water ocean beneath an icy crust.\n  Dr. Petr Bro\u017e, the leading author of the study, said: &#34;We suggest that mud volcanism can explain the formation of some lava-like flow morphologies on Mars, and that similar processes may apply to eruptions of mud on icy bodies in the outer Solar System, like on Ceres.&#34;        More information:\t\t\t\t\t\t\t\t\t\t\t\tExperimental evidence for lava-like mud flows under Martian surface conditions,  Nature Geoscience (2020).  DOI: 10.1038/s41561-020-0577-2 ,  www.nature.com/articles/s41561-020-0577-2", "posttime": "2020-05-19 15:11:57", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u706b\u661f,\u79d1\u5b66\u5bb6,\u63ed\u5f00,lava", "title": "\u79d1\u5b66\u5bb6\u63ed\u5f00\u706b\u661f\u4e0a\u7c7b\u7194\u5ca9\u6d41\u52a8\u4e4b\u8c1c", "title_en": "Mystery of Lava-Like Flows On Mars Solved By Scientists", "transed": 1, "url": "https://phys.org/news/2020-05-mystery-lava-like-mars-scientists.html", "via": "", "real_tags": ["\u706b\u661f", "\u79d1\u5b66\u5bb6", "\u63ed\u5f00", "lava"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002749, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5bf9\u9752\u5c11\u5e74\u5de5\u7a0bOP-1\u9f13\u8865\u4e01\u8fdb\u884c\u4e86\u9006\u5411\u5de5\u7a0b\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u81ea\u52a8\u5236\u4f5c\u6211\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u8865\u4e01\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u8fd8\u662f\u8bbe\u6cd5\u5bf9\u9752\u5c11\u5e74\u5de5\u7a0b\u516c\u53f8(Teenage Engineering)\u5236\u9020\u7684OP-1\u5408\u6210\u5668\u7684\u4e00\u79cd\u97f3\u9891\u6587\u4ef6\u683c\u5f0f\u8fdb\u884c\u4e86\u53cd\u5411\u5de5\u7a0b\u3002\n\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5c0f\u7f51\u7ad9\uff0c\u5141\u8bb8\u60a8\u4e3aOP-1\u91c7\u6837\u5668\u6784\u5efa\u8865\u4e01\uff1ahttps://op1.schollz.com.\u3002\u6211\u5728\u8fd9\u91cc\u8c08\u8bba\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f\u5f00\u6e90\u7684\uff0c\u4e5f\u53ef\u4ee5\u5728Github\u4e0a\u83b7\u5f97\u3002\nOP-1\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u5408\u6210\u5668\uff0c\u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\u3002\u5176\u4e2d\u4e00\u4e2a\u5f88\u68d2\u7684\u4e1c\u897f\u5c31\u662f\u53d6\u6837\u5668\uff0c\u4e5f\u5c31\u662f\u6eda\u7b52\u53d6\u6837\u5668\u5f15\u64ce\u3002\u6b64\u91c7\u6837\u5668\u5141\u8bb8\u60a8\u5f55\u5236\u6700\u591a12\u79d2\u7684\u58f0\u97f3\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u62fc\u63a5\u3002\u7136\u540e\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u62fc\u63a5\u5206\u914d\u7ed9\u5408\u6210\u5668\u768424\u4e2a\u952e\u4e2d\u7684\u4e00\u4e2a\uff0c\u4ee5\u4fbf\u8f7b\u677e\u56de\u653e\u3002\u901a\u5e38\u53d6\u6837\u5668\u662f\u7528\u6765\u6253\u9f13\u7684\uff0c\u4f46\u6211\u559c\u6b22\u7528\u5b83\u6765\u505a\u53e3\u8bed\u6216\u8bd7\u6b4c\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u559c\u6b22\u7528\u5b83\u6765\u5199\u5f88\u591a\u53e3\u8bed\u548c\u8bd7\u6b4c\u3002\u6211\u7684\u4e0a\u4e00\u5f20\u4e13\u8f91\u6709\u8d85\u8fc730\u5206\u949f\u7684NASA\u5f55\u97f3\u3002\u6211\u76ee\u524d\u7684\u4e13\u8f91\u662f\u4e00\u5c0f\u65f6\u7684\u8bd7\u6b4c\u6717\u8bf5\u6837\u672c\u3002\u6700\u7ec8\u9700\u8981\u4f7f\u7528OP-1\u6eda\u7b52\u53d6\u6837\u5668\u5f15\u64ce\u62fc\u63a5\u548c\u5207\u5272\u6570\u767e\u4e2a12\u79d2\u7684\u6837\u54c1\u3002\n\u5bf9\u4e8e\u6bcf\u4e2a12\u79d2\u7684\u6837\u672c\uff0c\u6211\u9700\u8981\u901a\u8fc7\u7ebf\u8def\u8f93\u5165\u5c06\u5176\u8bb0\u5f55\u5230OP-1\u4e2d\u3002\u8bb0\u5f55\u6bcf\u4e00\u6b21\u81f3\u5c11\u9700\u8981\u5927\u7ea6\u4e00\u5206\u949f\u7684\u65f6\u95f4\u6765\u8bbe\u7f6e\u7535\u5e73\u5e76\u627e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002\u5f55\u5236\u5b8c\u540e\uff0c\u6211\u5f00\u59cb\u62fc\u63a5\uff0c\u8fd9\u53c8\u8981\u82b1\u4e00\u4e24\u5206\u949f\u7684\u65f6\u95f4\u3002\u5bf9\u4e8e\u51e0\u4e2a12\u79d2\u7684\u6837\u672c\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u6570\u767e\u4e2a12\u79d2\u7684\u6837\u672c\uff0c\u6211\u67e5\u770b\u7684\u662f\u5de5\u4f5c\u65f6\u95f4\u548c\u5de5\u4f5c\u65f6\u95f4\u3002\n\u6211\u76f8\u4fe1\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4e3a\u8fd9\u9879\u4efb\u52a1\u7f16\u5199\u4e00\u4e9b\u8f6f\u4ef6\u7684\u65f6\u95f4\u6bd4\u8fd9\u9879\u4efb\u52a1\u7684\u5de5\u4f5c\u65f6\u95f4\u8981\u5c11\u3002..\u8fd9\u610f\u5473\u7740\uff1a\u662f\u65f6\u5019\u8fdb\u884c\u4e00\u4e9b\u81ea\u52a8\u5316\u4e86\uff01\n\u6211\u5bf9file.mp3\u4e2d\u7684\u6837\u672c\u6240\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u5c06\u5176\u8f6c\u6362\u4e3a\u6b63\u786e\u7684OP-1\u6587\u4ef6\u7c7b\u578b\uff0c\u5e76\u622a\u65ad\u4e3a12\u79d2(OP-1\u7684Drum\u91c7\u6837\u5668\u5f15\u64ce\u7684\u6700\u5927\u503c)\u3002\n\u6211\u77e5\u9053OP-1\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6\u7c7b\u578b-.aif\u6587\u4ef6\uff0c\u8fd9\u5728\u91c7\u6837\u5668\u4e2d\u5f88\u6d41\u884c\u3002\u6211\u6240\u8981\u505a\u7684\u5c31\u662f\u63d0\u53d612\u79d2\u7684\u97f3\u9891\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a.aif\u6587\u4ef6\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2affmpeg\u547d\u4ee4\u8f7b\u677e\u5b8c\u6210\uff1a\n\u63a5\u4e0b\u6765\uff0c\u4e3a\u4e86\u81ea\u52a8\u751f\u6210\u6309\u952e\u5206\u914d\uff0c\u6211\u60f3\u8981\u62fc\u63a5\u58f0\u97f3\u3002\u62fc\u63a5\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528\u77ac\u53d8\uff0c\u6216\u8005\u5728\u9759\u9ed8\u7ed3\u675f\u65f6\u4f7f\u7528\u3002\u539f\u6765ffmpeg\u4e5f\u662f\u8fd9\u6837\u505a\u7684\uff01\u6211\u7f16\u5199\u4e86\u4e00\u4e9b\u8fd0\u884cffmpeg\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u6253\u5370\u51fa\u68c0\u6d4b\u5230\u9759\u97f3\u7684\u5730\u65b9\u3002\u5bf9\u4e8e-22db\u5904\u81f3\u5c110.2\u79d2\u7684\u9759\u97f3\uff0c\u5bf9\u4e8efile.mp3\uff0c\u7528\u4e8e\u68c0\u6d4b\u9759\u9ed8\u7684ffmpeg\u547d\u4ee4\u662f\uff1a\n\u7136\u540e\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528\u50cfAudiowaveform\u8fd9\u6837\u7684\u82b1\u54e8\u5de5\u5177\u6765\u5236\u4f5c\u6ce2\u5f62\u7684\u56fe\u50cf\uff0c\u5e76\u4f7f\u7528imagemagick\u5bf9\u5176\u8fdb\u884c\u989c\u8272\u7f16\u7801\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u5c06\u62fc\u63a5\u53ef\u89c6\u5316\u3002\u56e0\u6b64\uff0c\u5728\u9759\u97f3\u4e2d\u62c6\u5206\u540e\uff0c\u7ed9\u5b9a\u7684\u97f3\u9891\u7247\u6bb5\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\u592a\u597d\u4e86\uff0c\u73b0\u5728\u6211\u6709\u4e86OP-1\u8865\u4e01patch.aif\uff0c\u8fd9\u662f\u4e0a\u4f20\u5230Drum engine\u91c7\u6837\u5668\u7684\u5f53\u524d\u957f\u5ea6\u548c\u683c\u5f0f\u3002\u4e0b\u4e00\u6b65\u662f\u8bbe\u7f6epatch.aif\u6587\u4ef6\u7684\u5143\u6570\u636e\uff0c\u4f7f\u5176\u5305\u542bOP-1\u9f13\u91c7\u6837\u5668\u5f15\u64ce\u53ef\u4ee5\u7528\u6765\u5c06\u952e\u5206\u914d\u7ed9\u6bcf\u4e2a\u63a5\u5934\u7684\u4fe1\u606f\u3002\n\u5411\u6211\u7684\u65b0patch.aif\u6ce8\u5165\u5143\u6570\u636e\u9700\u8981\u4e00\u4e9b\u4fa6\u5bdf/\u7814\u7a76\uff0c\u56e0\u4e3a\u6211\u4e0d\u77e5\u9053.aif\u6587\u4ef6\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u6709\u4e00\u4e2a1988\u5e74\u7684\u6587\u4ef6\u89c4\u8303\uff0c\u4f46\u975e\u5e38\u8bda\u5b9e\u5730\u8bf4\uff0c\u6211\u4f7f\u7528\u795e\u5947\u7684Unix\u5de5\u5177xxd\u548c\u4e00\u4e9b\u4e8c\u6d41\u7684\u731c\u6d4b\u627e\u5230\u4e86\u6211\u9700\u8981\u77e5\u9053\u7684\u4e00\u5207\u3002\nxxd\u5de5\u5177\u5141\u8bb8\u60a8\u53ef\u89c6\u5316\u4efb\u4f55\u6587\u4ef6\u7684\u5341\u516d\u8fdb\u5236\u8f6c\u50a8\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u5b83\u6765\u67e5\u770b\u4e00\u4e2a\u666e\u901a\u7684.aif\u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u4e0eOP-1.aif\u6587\u4ef6(\u6211\u4ece\u5408\u6210\u5668\u4e0b\u8f7d\u7684)\u8fdb\u884c\u6bd4\u8f83\u3002\n$xxd file.aif|head-n 300000000\uff1a464f 524d 0008 c4ee 4144646 434f 4d4d\u8868\u5355.AIFFCOMM00000010\uff1a0000 0012 0002 0002 3130 0010 400e bb80.10..@.00000020\uff1a0000 0000 0000 5353 4e44 0008 c4c8 0000.snd.\u3002\n\u663e\u7136\uff0c\u6807\u9898\u4e2d\u6709\u6807\u9898(Form\u3001AIFF\u3001COMM\u3001SSND)\u3002\u6211\u731cSSND\u5c31\u662fPCM\u6570\u636e\u3002Form\u770b\u8d77\u6765\u5f88\u7279\u522b\uff0c\u56e0\u4e3a\u5b83\u540e\u9762\u7d27\u8ddf\u77404\u4e2a\u5b57\u8282\u3002\u5bf9\u4e8e\u8be5\u7279\u5b9a\u6587\u4ef6\uff0c\u6211\u5c06\u8fd9\u4e9b\u5b57\u8282\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236(0008c4ee)\uff0c\u5b83\u4eec\u76f8\u5f53\u4e8e\u6587\u4ef6\u5927\u5c0f\u51cf\u53bb8\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u5047\u8bbe\u5b83\u53ea\u662f\u4e00\u4e2a\u6587\u4ef6\u5927\u5c0f\u3002\n$xxd op1.aif00000000\uff1a464f 524d 000f 4e6e 4149 4643 4656 4552\u8868\u5355..NnAIFCFVER00000010\uff1a0000 0004 a280 5140 434f 4d4d 0000 0040.q@comm.@00000020\uff1a0001 0007 a49c 0010 400e ac44 0000 0000.@..d.00000030\uff1a0000 736f 7774 2953 6967 6e65 6420 696e.\u3002dr00000070\uff1a756d 5f76 6572 7369 6f6e 223a 322c 2264 um_version&#34\uff1b\uff1a2\uff0c&#34\uff1bd.000004f0\uff1a3139 322c 3831 3932 2c38 3139 322c 3831 192,8192,8192,8100000500\uff1a3932 2c38 3139 322c 3831 3932 2c38 3139 92,8192,8192,81900000510\uff1a322c\u3002SS00000530\uff1a4e44 000f 4940 0000 0000 0000 ND..i@.00000540\uff1a0000 0000 f5ff e0ff bcff 90ff 57ff 14ff.W.\u3002\n\u60a8\u5c06\u770b\u5230\u5b83\u6709\u4e00\u4e2aAIFC(\u538b\u7f29\u683c\u5f0f)\uff0c\u800c\u4e0d\u662fAIFF\uff0c\u4f46\u8fd9\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u7684ffmpeg\u8f6c\u6362\u540e\u7684\u6587\u4ef6\u6ca1\u6709\u538b\u7f29\u3002\u6700\u5927\u7684\u533a\u522b\u5728\u4e8eAPPL\u6807\u8bb0\u540e\u9762\u6709\u4e00\u4e9bJSON\u6570\u636e\u3002\u5728APPL\u4e4b\u540e\u6709\u56db\u4e2a\u5b57\u8282\uff0c\u5b83\u4eec\u518d\u6b21\u4e0eSSND\u6807\u8bb0\u4e4b\u524d\u7684\u5927\u5c0f\u5b8c\u5168\u5bf9\u5e94\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u6211\u6240\u8981\u505a\u7684\u5c31\u662f\u63d2\u5165APPL\uff0c\u7136\u540e\u662f4\u5b57\u8282\u5927\u5c0f\uff0c\u7136\u540e\u662fOP-1\uff0c\u7136\u540e\u662f\u6211\u7684JSON\u6570\u636e-\u5c31\u5728SSND\u6807\u8bb0\u4e4b\u524d\u3002\n\u7136\u800c\uff0c\u5f53\u6211\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u6211\u635f\u574f\u4e86\u6211\u7684OP-1\u58f0\u97f3\u51e0\u6b21\u3002\u6240\u4ee5\u522b\u90a3\u4e48\u505a\uff01\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728SSND\u6807\u8bb0\u4e4b\u524d\u548cJSON\u53f3\u62ec\u53f7\u4e4b\u540e\u6709\u51e0\u4e2a\u5b57\u8282\u975e\u5e38\u91cd\u8981\u3002\u5728\u6253\u5f00\u51e0\u4e2aOP-1\u6587\u4ef6\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u6709\u65f6\u662f0a20\uff0c\u6709\u65f6\u53ea\u662f0a\u3002\u6211\u63a8\u6d4b\u5b83\u53ef\u80fd\u9700\u8981\u4fdd\u6301\u5757\u7684\u4e00\u81f4\u6027\uff0c\u53ef\u80fd\u662f4\u7684\u500d\u6570(\u56e0\u4e3a\u5426\u5219\u60a8\u5c06\u53ea\u67091\u4e2a\u5b57\u8282\u62160\uff0c\u800c\u4e0d\u662f2\u62161)\u3002\n\u8fd9\u5f88\u7ba1\u7528\uff01\u56e0\u6b64\uff0c\u5728\u6ce8\u5165OP-1\u5143\u6570\u636e\u4e4b\u540e\uff0c\u60a8\u5fc5\u987b\u63d2\u51650A\u621620\uff0c\u76f4\u5230\u6587\u4ef6\u7684\u603b\u5927\u5c0f\u662f4\u7684\u500d\u6570\u3002(\u4e5f\u8bb8\u8fd9\u662f\u80e1\u8bf4\u516b\u9053\uff0c\u6709\u4eba\u8bf7\u8ba9\u6211\u77e5\u9053)\u3002\n\u6700\u540e\uff0c\u73b0\u5728\u6211\u77e5\u9053\u4e86\u5982\u4f55\u5c06OP-1\u6570\u636e\u6ce8\u5165\u5230.aif\u6587\u4ef6\u4e2d\uff0c\u6211\u53ea\u9700\u8ba1\u7b97\u51faOP-1\u6570\u636e\u5c06\u662f\u4ec0\u4e48\u3002\n\u6211\u4f7f\u7528xxd\u68c0\u67e5.aif\u6587\u4ef6\u65f6\u53d1\u73b0\uff0cOP-1\u5143\u6570\u636e\u672c\u8eab\u5982\u4e0b\u6240\u793a\uff1a\n{&#34\uff1b\u9f13_\u7248\u672c&#34\uff1b\uff1a2\uff0c&#34\uff1b\u7c7b\u578b&#34\uff1b\uff1a&#34\uff1b\u9f13&#34\uff1b\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u7528\u6237&#34\uff1b\uff0c&#34\uff1b\u516b\u5ea6&#34\uff1b\uff1a0\uff0c&#34\uff1b\u97f3\u9ad8&#34\uff1b\uff1a[6144\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0]\uff0c&#34\uff1bstart&#34\uff1b\uff1a[0,35186754,73270908,193926863,262863847,282963028,327734734,374604417,422374972,456892160,477153660,548131809,570661720,597144106,696446963,726788489,830413096,918041142,955370511,1001935845,1053265249,1053265249,1053265249,1053265249]\uff0c&#34\uff1bend&#34\uff1b\uff1a[35182696,73266850,193922805,262859789,282958970,327730676,374600359,422370914,456888102,477149602,548127751,570657662,597140048,696442905,726784431,830409038,918037084,955366453,1001931787,1053261191,1153253906,1153253906,1153253906,1153253906]\uff0c&#34\uff1b\u64ad\u653e\u6a21\u5f0f&#34\uff1b\uff1a[8192,16384,8192,8192,8192,8192,16384,8000,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192]\uff0c&#34\uff1b\u53cd\u8f6c&#34\uff1b\uff1a[8192,16384,8192,8192,8192,16384,8192,8192,8192,8192,16384,8192,8192,8192,8192,8192,16384,8192,8192,8192,8192,8192,8192]\uff0c&#34\uff1b\u97f3\u91cf&#34\uff1b\uff1a[9195,8192,5190,8192,8192,4969,8192,8192,16384,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192\uff0c&#34\uff1bdyna_env&#34\uff1b\uff1a[0,8192\uff0c0,8192\uff0c0\uff0c0\uff0c0]\uff0c&#34\uff1bFX_ACTIVE&#34\uff1b\uff1aFALSE\uff0c&#34\uff1bFX_TYPE&#34\uff1b\uff1a&#34\uff1bDELAY&#34\uff1b\uff0c&#34\uff1bFX_PARAMS&#34\uff1b\uff1a[8000,8000,8000,8000,8000,8000]\uff0c&#34\uff1bLFO_ACTIVE&#34\uff1b\uff1aFALSE\uff0c&#34\uff1bLFO_TYPE&#34\uff1b\uff1a&#34\uff1b\u98a4\u97f3&#34\uff1b\uff0c&#34\uff1bLFO_PARAMS&#\u3002\uff1a[16000,16000,16000,16000\uff0c0\uff0c0\uff0c0\uff0c0]}\u3002\n\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff01\u6709\u4e00\u4e2a\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u6bcf\u4e2a\u6570\u7ec4\u4e2d\u670924\u4e2a\u70b9\uff0c\u6211\u731c\u8fd9\u5c06\u5bf9\u5e94\u4e8e24\u4e2a\u952e\uff01\u6211\u6ce8\u610f\u5230\u8fd9\u4e9b\u6570\u5b57\u7edd\u5bf9\u5f88\u5927\uff0c\u6bd4\u59822053253906\uff0c\u592a\u5927\u4e86\uff0c\u76f8\u5f53\u4e8e\u6700\u5927\u79d2\u6570(~12)\u6216\u6beb\u79d2\u3002\u6240\u4ee5\u6211\u628a\u6700\u5927\u7684\u6570\u5b57\u9664\u4ee5\u4e00\u4e9b\u968f\u673a\u6570\uff0c\u6bd4\u598244100(\u5178\u578b\u7684\u91c7\u6837\u7387)\u548c4096(\u6700\u592712\u4f4d)\uff0c\u6700\u5927\u7684\u6570\u5b57\u662f~11.8\uff0c\u8fd9\u975e\u5e38\u63a5\u8fd1\u60a8\u53ef\u4ee5\u5728OP-1\u4e0a\u8bbe\u7f6e\u7684\u6700\u8fdc\u7aef\u70b9(12\u79d2)\uff01\u5f88\u597d\uff0c\u6240\u4ee5\u6211\u6240\u9700\u8981\u505a\u7684\u5c31\u662f\u4eceffmpeg\u9759\u97f3\u5206\u6790\u4e2d\u83b7\u53d6\u6211\u7684\u8d77\u70b9/\u7ec8\u70b9\uff0c\u7136\u540e\u5c06\u79d2\u6570\u4e58\u4ee544100\u548c4096.\n\u7ed3\u679c\u8bc1\u660e\u6211\u9519\u4e86\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f53\u6211\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u5b83\u6ca1\u6709\u628a\u6211\u7684OP-1\u780c\u6210\u7816\u5757\uff0c\u4f46\u6211\u8ba4\u4e3a\u6211\u5df2\u7ecf\u8bbe\u7f6e\u7684\u6807\u8bb0\u5b8c\u5168\u504f\u79bb\u4e86\u3002\u7ecf\u8fc7\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u6211\u53d1\u73b0OP-1JSON\u6570\u636e\u4e2d\u6709\u5f88\u591a8192\u4e2a\u3002\u6211\u731c\u8fd9\u662f\u5b83\u80fd\u8bc6\u522b\u7684\u6700\u5c0f\u6570\u5b57\uff0c\u6240\u4ee5\u6211\u66f4\u6539\u4e86\u6240\u6709\u6807\u8bb0\uff0c\u4f7f\u5b83\u4eec\u5bf9\u5e94\u4e8e\u6700\u63a5\u8fd1\u7684\u500d\u65708192(\u6700\u591a13\u4f4d)\u3002\n\u56e0\u6b64\uff0c\u4ee5\u4e0b\u662f\u5982\u4f55\u83b7\u53d6\u4efb\u4f55\u58f0\u97f3\u5e76\u5236\u4f5c\u5e26\u6709\u81ea\u52a8\u952e\u5206\u914d\u7684OP-1\u9f13\u8865\u4e01\u7684\u65b9\u6cd5\uff1a\n\u4f7f\u7528ffmpeg\u5c06\u58f0\u97f3\u622a\u65ad\u4e3a~12\u79d2\u5e76\u5c06\u58f0\u97f3\u8f6c\u6362\u4e3a.aif\uff0c\u4f7f\u7528ffmpeg\u67e5\u627e\u9759\u97f3\uff0c\u4f7f\u7528\u9759\u97f3\u5f00\u59cb/\u7ed3\u675f\u70b9\u751f\u6210OP-1\\f25 JSON-1(\u6ce8\u610f\u4ec5\u4f7f\u752813\u4f4d\u7cbe\u5ea6)\uff0c\u5728SSND\u6807\u8bb0\u4e4b\u524d\u5c06JSON\u6ce8\u5165.aif\u6587\u4ef6\uff0c\u5e76\u66f4\u65b0\u586b\u5145\u7b26\u548c\u683c\u5f0f\u5b57\u8282\u4ee5\u4f7f\u5176\u6709\u6548\u3002\n\u5c31\u8fd9\u6837!\u3002\u5b83\u77ed\u5230\u8db3\u4ee5\u544a\u8bc9\u522b\u4eba\uff0c\u5e76\u4e0d\u662f\u8bf4\u6211\u5728\u5f00\u59cb\u4e4b\u524d\u5c31\u77e5\u9053\u8fd9\u4e9b\u3002\u73b0\u5728\u6211\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u540c\u65f6\u5bf9\u51e0\u5341\u4e2a\u6837\u672c\u81ea\u52a8\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002\n\u6211\u4ece\u8fd9\u4e2a\u9879\u76ee\u4e2d\u5f97\u5230\u7684\u4e3b\u8981\u6536\u83b7\u662fffmpeg\u548cxxd\u975e\u5e38\u5f3a\u5927\uff0c\u6211\u771f\u6b63\u9700\u8981\u7684\u5c31\u662f\u83b7\u5f97\u6700\u7ec8\u7ed3\u679c\u3002\u6700\u597d\u7684\u90e8\u5206\u662f\u6211\u53ef\u4ee5\u5728\u51e0\u4e2a\u5c0f\u65f6\u7684\u97f3\u9891\u4e0a\u8fd0\u884c\u4ee3\u7801\uff0c\u8fd9\u5c06\u81ea\u52a8\u751f\u6210\u5b8c\u7f8e\u768412\u79d2\u526a\u8f91\uff0c\u53ef\u4ee5\u7528\u6837\u4f8b\u952e\u7ed1\u5b9a\u52a0\u8f7d\u5230OP-1\u4e0a\u3002\n\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u6211\u7684\u6700\u7ec8\u7ed3\u679c\uff0c\u5b83\u73b0\u5728\u53ef\u4ee5\u5728https://op1.schollz.com\u4e0a\u627e\u5230\uff0c\u6240\u6709\u7684\u6e90\u4ee3\u7801\u90fd\u53ef\u4ee5\u5728Github\u4e0a\u627e\u5230\u3002\u5982\u679c\u4f60\u60f3\u542c\u6211\u7684\u97f3\u4e50\uff0c\u53bb\u770b\u770b\u6211\u7684\u4e50\u961f\u590f\u4ee4\u8425\u5427\u3002\nGo\u4e2d\u7684\u2190\ud83c\udfca\u5de5\u4f5c\u4eba\u5458\u6c60", "note_en": "I reverse engineered the Teenage Engineering OP-1 drum patch so that I could make my own custom patches automatically.\n    Despite this, I managed to reverse engineer one of the audio file formats for the  OP-1 synthesizer, made by Teenage Engineering.\n The end result is a nice little website that lets you build patches for the OP-1 sampler:  https://op1.schollz.com. All the code I talk about here is open-source and also available on  Github.\n   The OP-1 is a wonderful synthesizer capable of a great many things. One of the great things about it is a sampler, namely the  Drum sampler engine. This sampler allows you to record a maximum 12 seconds of sound which can then be spliced between any two points. These splices can then be assigned to one of the 24 keys of the synth for easy playback. Normally the sampler is used for drums, but I like to use it for spoken word or poetry.\n  In fact, I like to use it for  lots of spoken word and poetry.  My last album had over 30 minutes of NASA recordings. My current album is sampling an hour of poetry readings. This ends up being  hundreds of 12-second samples that need to be spliced and cut using the OP-1 Drum sampler engine.\n For each 12-second sample I need to record it into the OP-1 via the line-in. Recording each one takes at least about a minute to set the levels and find the right position. After recording I work to splice it, which takes another minute or two. This is a easy workflow for a few 12-second samples. But for  hundreds of 12-second samples, I\u2019m looking at  hours and hours of work.\n I believe in this case that my time to program some software for this task is less than time of work of the task. ..which means: time to do some automation!\n  The first thing I do with a sample from  file.mp3 is to convert it to the right OP-1 file type and truncate to 12 seconds (the max for the Drum sampler engine of the OP-1).\n I know that the OP-1 has a special file type - the  .aif file, which is popular for samplers. All I had to do was extract 12 seconds of audio and convert it into an  .aif file. This is easily done with one  ffmpeg command:\n  Next, to automatically generate key assignments I want to splice the sound. One way to splice is to use the transients, or when silence  ends. Turns out that  ffmpeg does this too! I wrote some code that runs  ffmpeg for printing out places where it detects silence. The  ffmpeg command for detecting silence, for  file.mp3 for silence of at least 0.2 seconds at -22db is:\n  I can then use a fancy tool like  audiowaveform to make an image of the waveform and use  imagemagick to color code it so I can visualize the splicings. So a given segment of audio might look like this after splitting on the silence:\n   Great, now I have an OP-1 patch,  patch.aif, that is the current length and format for uploading to the Drum engine sampler. The next step was to set the metadata of the  patch.aif file so that it contains information that the OP-1 Drum sampler engine can use to assign the keys to each of the splices.\n  The injection of metadata into my new  patch.aif requires a bit of sleuthing/research because I don\u2019t know how  .aif files work. There is a  file spec from 1988 but to be perfectly honest I found everything I need to know using the magic unix tool,  xxd, and some second-rate guessing.\n The  xxd tool allows you to visualize a hexdump of any file. So I used it to look at a normal  .aif file and compare it to a OP-1  .aif file (which I downloaded from the synthesizer).\n  $ xxd file.aif | head -n 300000000: 464f 524d 0008 c4ee 4149 4646 434f 4d4d FORM....AIFFCOMM00000010: 0000 0012 0002 0002 3130 0010 400e bb80 ........10..@...00000020: 0000 0000 0000 5353 4e44 0008 c4c8 0000 ......SSND......\n Obviously there are headers in the header ( FORM, AIFF, COMM, SSND). I\u2019m guessing that  SSND is the PCM data.  FORM seems special, because it has four bytes right after it. For that particular file, I converted those bytes to decimal ( 0008 c4ee) and they corresponded to the file size minus 8 bytes, so I assume it is just a file sizer.\n  $ xxd op1.aif00000000: 464f 524d 000f 4e6e 4149 4643 4656 4552 FORM..NnAIFCFVER00000010: 0000 0004 a280 5140 434f 4d4d 0000 0040 ......Q@COMM...@00000020: 0001 0007 a49c 0010 400e ac44 0000 0000 ........@..D....00000030: 0000 736f 7774 2953 6967 6e65 6420 696e ..sowt)Signed in00000040: 7465 6765 7220 286c 6974 746c 652d 656e teger (little-en00000050: 6469 616e 2920 6c69 6e65 6172 2050 434d dian) linear PCM00000060: 4150 504c 0000 04c6 6f70 2d31 7b22 6472 APPL....op-1{&#34;dr00000070: 756d 5f76 6572 7369 6f6e 223a 322c 2264 um_version&#34;:2,&#34;d...000004f0: 3139 322c 3831 3932 2c38 3139 322c 3831 192,8192,8192,8100000500: 3932 2c38 3139 322c 3831 3932 2c38 3139 92,8192,8192,81900000510: 322c 3831 3932 2c38 3139 322c 3831 3932 2,8192,8192,819200000520: 2c38 3139 322c 3831 3932 5d7d 0a20 5353 ,8192,8192]}. SS00000530: 4e44 000f 4940 0000 0000 0000 0000 0000 ND..I@..........00000540: 0000 0000 f5ff e0ff bcff 90ff 57ff 14ff ............W...\n You\u2019ll see that its got an  AIFC (compressed format) and not  AIFF, but that won\u2019t matter, since my  ffmpeg converted ones aren\u2019t compressed. The big difference is that there is some JSON data, following the  APPL tag. There are four bytes after the  APPL which again corresponded exactly to the size until the  SSND tag. This looks easy enough, all I have to do is insert  APPL, then four bytes of size, then  op-1, then my JSON data - right before the  SSND tag.\n When I did that, though, I corrupted my OP-1 sounds a few times. So don\u2019t do that! It turns out there are bytes right before the  SSND tag and right after the JSON closing bracket that are important. In opening several OP-1 files I noticed sometimes it was  0a20 or sometimes just  0a. I theorized that maybe it needs to keep blocks consistent, probably in multiples of 4 (because otherwise you would only have 1 byte or 0, not 2 or 1).\n That works! So, after injecting the OP-1 meta data you have to insert  0a or  20 until the total size of the file is a multiple of 4. (Maybe this is bullshit, someone please let me know).\n  Finally, now that I know how to inject OP-1 data into a  .aif file I just have to figure out what the OP-1 data will be.\n My inspection of the  .aif files with  xxd reveals that the OP-1 metadata itself looks like this:\n {\t &#34;drum_version&#34; :  2,\t &#34;type&#34; :  &#34;drum&#34;,\t &#34;name&#34; :  &#34;user&#34;,\t &#34;octave&#34; :  0,\t &#34;pitch&#34; : [ 6144,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\t &#34;start&#34; : [ 0,  35186754,  73270908,  193926863,  262863847,  282963028,  327734734,  374604417,  422374972,  456892160,  477153660,  548131809,  570661720,  597144106,  696446963,  726788489,  830413096,  918041142,  955370511,  1001935845,  1053265249,  1053265249,  1053265249,  1053265249],\t &#34;end&#34; : [ 35182696,  73266850,  193922805,  262859789,  282958970,  327730676,  374600359,  422370914,  456888102,  477149602,  548127751,  570657662,  597140048,  696442905,  726784431,  830409038,  918037084,  955366453,  1001931787,  1053261191,  1153253906,  1153253906,  1153253906,  1153253906],\t &#34;playmode&#34; : [ 8192,  16384,  8192,  8192,  8192,  8000,  8192,  8192,  16384,  8000,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192],\t &#34;reverse&#34; : [ 8192,  16384,  8192,  8192,  8192,  16384,  8192,  8192,  8192,  8192,  16384,  8192,  8192,  8192,  8192,  8192,  8192,  16384,  8192,  8192,  8192,  8192,  8192,  8192],\t &#34;volume&#34; : [ 9195,  8192,  5190,  8192,  8192,  4969,  8192,  8192,  16384,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192,  8192],\t &#34;dyna_env&#34; : [ 0,  8192,  0,  8192,  0,  0,  0,  0],\t &#34;fx_active&#34; :  false,\t &#34;fx_type&#34; :  &#34;delay&#34;,\t &#34;fx_params&#34; : [ 8000,  8000,  8000,  8000,  8000,  8000,  8000,  8000],\t &#34;lfo_active&#34; :  false,\t &#34;lfo_type&#34; :  &#34;tremolo&#34;,\t &#34;lfo_params&#34; : [ 16000,  16000,  16000,  16000,  0,  0,  0,  0]}\n Looks easy enough! There is a  start and  end and there are 24 points in each array, which I\u2019m guessing will correspond to the 24 keys! I noticed that those numbers are absolutely huge, like  2053253906, way to big to correspond to the max number of seconds (~12) or milliseconds. So I divided the biggest numbers by some random things, like  44100 (typical sampling rate) and  4096 (max of 12 bits) and the biggest number turned out to be ~11.8, which is very close to the furthest endpoint (12 seconds) you can set on the OP-1! Great, so all I need to do is to take my start/end points from the  ffmpeg silence analysis and multiply the seconds by 44100 and 4096.\n  Turns out I was wrong. Turns out when I did that, it didn\u2019t brick my OP-1 but the markers I thought I had set were completely off. After thinking some more about it I saw that there are a lot of  8192 in the OP-1 JSON data. I\u2019m guessing that this is the smallest number it can discern, so I changed all my markers so that they correspond to the closest multiple of 8192 (max of 13 bits).\n    So here is how to take any sound and make an OP-1 drum patch with automatic key assignments:\n Use  ffmpeg to truncate to ~12 seconds and convert a sound to  .aif, use  ffmpeg to find silence, generate OP-1 JSON using start/end points from silence (careful to only use 13 bits of precision), inject JSON into the  .aif file before the  SSND tag and update the filler and  FORM bytes so its valid.\n That\u2019s it! Its short enough to tell someone, not that I knew any of this before starting. And  now I can write a program to do this automatically on  dozens of samples simultaneously.\n My major takeaway from this project is that  ffmpeg and  xxd are extremely powerful and all I really needed to get my end result. And the best part is that I can run the code on  hours of audio which will automatically generate perfect 12-second clips that can be loaded onto the OP-1 with sample key bindings.\n And if you want to use my end result, its on the web now at  https://op1.schollz.com and all the source code is available at  Github. And if you want to listen to my music, check out  my Bandcamp.\n\u2190  \ud83c\udfca Worker Pool in Go", "posttime": "2020-05-19 15:10:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9006\u5411\u5de5\u7a0b,\u6eda\u7b52,engineering,op", "title": "OP-1\u6eda\u7b52\u8d34\u7247\u7684\u9006\u5411\u5de5\u7a0b", "title_en": "Reverse engineering the OP-1 drum patch", "transed": 1, "url": "https://schollz.com/blog/op1/", "via": "", "real_tags": ["\u9006\u5411\u5de5\u7a0b", "\u6eda\u7b52", "op"]}, {"category": "", "categoryclass": "", "imagename": "08566fd51093290a6e986f49409db634.jpg", "infoid": 1002748, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "RetroFlag GPI\u8868\u58f3\u4f7f\u7528\u7684\u662f\u8986\u76c6\u5b50Pi Zero\uff0c\u770b\u8d77\u6765\u975e\u5e38\u4e0d\u9519\u3002\u5728\u8fd9\u6bb5\u89c6\u9891\u4e2d\uff0cMakeUseOf\u7ed9\u5b83\u6253\u4e869\u5206(\u6ee1\u520610\u5206)\u3002\u5982\u679c\u7528\u6811\u8393PI\u5236\u4f5c\u590d\u53e4\u6e38\u620f\u73a9\u5bb6\u7684\u60f3\u6cd5\u5bf9\u4f60\u6709\u5438\u5f15\u529b\uff0c\u6211\u9080\u8bf7\u4f60\u9605\u8bfb\u6211\u4eca\u5e74\u4e0e\u4eba\u5408\u8457\u7684\u4e00\u672c\u4e66\uff0c\u4e66\u540d\u53ebRaspberry Pi Retro Gaming\uff1aBuild Console[\u2026]\u3002\n\u6811\u8393\u6d3e\u57fa\u91d1\u4f1a(Raspberry Pi Foundation)\u6700\u8fd1\u4e3aPI\u63a8\u51fa\u4e86\u4e00\u6b3e\u4f4e\u6210\u672c\u76847\u82f1\u5bf8\u89e6\u6478\u5c4f\u663e\u793a\u5668(\u9664PI 1\u5916\uff0c\u4e0e\u6240\u6709\u578b\u53f7\u517c\u5bb9)\u3002\u5bf9\u4e8e\u590d\u53e4\u6e38\u620f\u548c\u5176\u4ed6\u9879\u76ee\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5c55\u793a\u3002\u4ee5\u4e0b\u662f\u6765\u81eaETA Prime\u7684\u5feb\u901f\u56de\u987e\u3002\n\u6211\u559c\u6b22\u8fd9\u4e2a\u5173\u4e8eHackaday.io\u7684\u5947\u5999\u7684\u9879\u76ee\u3002\u8fd9\u662f\u4e00\u6b3e\u6570\u5b57\u949f\uff0c\u57283D\u6253\u5370\u7684\u98de\u789f\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u753160\u4e2a\u65b0\u50cf\u7d20\u7ec4\u6210\u7684\u73af\uff0c\u5185\u73af\u4e0a\u670912\u4e2a\u706f\u6765\u6307\u793a\u65f6\u95f4\u3002\u5b83\u8fd8\u6267\u884c\u5907\u4efd\u3002\u8fd8\u6709\u706f\u5149\u79c0\u3002\u5b83\u6240\u9700\u8981\u7684\u5c31\u662f\u4e00\u5934\u725b\u88ab\u5438\u8fdb\u53bb\u3002[\u2026]\u3002\n\u60a8\u7684\u5bc6\u7801\u4e2d\u6709\u591a\u5c11\u5305\u542b\u60a8\u7684\u4e2a\u4eba\u4fe1\u606f\uff1f\u4ece\u4e00\u4e2a\u91cd\u8981\u7684\u65e5\u671f\uff0c\u5230\u4e00\u4e2a\u7231\u597d\uff0c\u518d\u5230\u8fc7\u53bb\u7684\u4e00\u4e9b\u8bb0\u5fc6\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u3001\u77ed\u8bed\u6216\u65f6\u523b\u90fd\u4f1a\u4e0d\u53ef\u78e8\u706d\u5730\u5370\u5728\u6211\u4eec\u7684\u8111\u6d77\u91cc\uff0c\u5e76\u7acb\u5373\u6d6e\u73b0\u5728\u8111\u6d77\u4e2d\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u603b\u662f\u628a\u5b83\u4eec\u4f5c\u4e3a\u5bc6\u7801\u7684\u4e00\u90e8\u5206\u3002\u5373\u4f7f\u662f\u5b89\u5168\u4e13\u4e1a\u4eba\u5458[\u2026]\u3002\n\u5c3d\u7ba1\u6211\u4eec\u70ed\u7231\u6211\u4eec\u7684\u5c0f\u73a9\u610f\u513f\uff0c\u4f46\u5c06\u771f\u6b63\u7684\u7b14\u653e\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u7eb8\u4e0a\uff0c\u7ec4\u7ec7\u60f3\u6cd5\uff0c\u8bb0\u7b14\u8bb0\uff0c\u6216\u8005\u53ea\u662f\u7b80\u5355\u5730\u753b\u8349\u56fe\u7684\u60a0\u4e45\u4f20\u7edf\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u79bb\u5f00\u6211\u4eec\u3002\u5f53\u50cfRocketbook Fusion\u8fd9\u6837\u7684\u4ea7\u54c1\u5b9a\u671f\u5c06\u8fd9\u4e24\u4e2a\u4e16\u754c\u7ed3\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u8fd9\u4e00\u70b9\u5c24\u5176\u6b63\u786e\u3002\u4e13\u4e3a\u6bcf\u4e2a\u6559\u5ba4\u6216\u529e\u516c\u5ba4\u8bbe\u8ba1\uff0c[\u2026]\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u4eec\u770b\u5230\u9884\u5148\u51c6\u5907\u597d\u7684\u9910\u996e\u9001\u8d27\u670d\u52a1\u7684\u4f7f\u7528\u5448\u7206\u70b8\u5f0f\u589e\u957f\uff0c\u6bcf\u4e00\u9879\u670d\u52a1\u90fd\u4f1a\u5c06\u6240\u9700\u7684\u6240\u6709\u914d\u6599\u76f4\u63a5\u9001\u5230\u4f60\u5bb6\u95e8\u53e3\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u51e0\u5206\u949f\u5185\u8fc5\u901f\u505a\u51fa\u4e00\u987f\u65b0\u9c9c\u53ef\u53e3\u7684\u996d\u83dc\u3002\u9274\u4e8e\u5b83\u4eec\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e00\u9879\u670d\u52a1\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86[\u2026]", "note_en": "The RetroFlag GPi Case, which uses a Raspberry Pi Zero, looks very nice. In this video, MakeUseOf gives it a 9/10 score. If the idea of making retro game players using Raspberry Pis appeals to you, I invite you to check out\u00a0 a book I co-wrote this year, called Raspberry Pi Retro Gaming: Build Consoles [\u2026]\n  The Raspberry Pi Foundation recently introduced a low-cost\u00a0 7-inch touchscreen display for the Pi (compatible with all models expect the Pi 1). It\u2019s a great display for retro-games and other projects. Here\u2019s a quick review from ETA Prime.\n  I love this strange and wonderful project on Hackaday.io. It is digital clock which uses a ring of 60 NeoPixels in a 3D printed flying saucer and 12 lights on the inner ring to indicate the hours. It also does backups. And light shows. All it needs is a cow being sucked up into it. [\u2026]\n  How many of your passwords contain something personal about you? From an important date to a hobby to some memory from your past, those keywords, phrases or moments are indelibly imprinted inside us and instantly come to mind, which is why we invariably use them as part of a password. Even though a security professional [\u2026]\n  As much as we love our gadgets, the time-honored tradition of putting actual pen against real-life paper and organizing thoughts, jotting notes, or just plain sketching will likely never fully leave us. That\u2019s especially true when items like the Rocketbook Fusion are regularly bringing those two worlds together. Designed for every classroom or office, the [\u2026]\n  Over the past several years, we\u2019ve seen an explosion in the use of pre-prepared meal delivery services, each shipping all the ingredients needed right to your door so you can whip up a fresh, tasty meal in just a few minutes. In light of their popularity, it\u2019s no surprise we\u2019ve now got a service that [\u2026]", "posttime": "2020-05-19 15:10:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "raspberry-pi,\u64cd\u4f5c\u7cfb\u7edf,pi", "title": "Raspberry PI\u64cd\u4f5c\u7cfb\u7edf\u770b\u8d77\u6765\u50cfOS X", "title_en": "Raspberry Pi Operating System Looks Like OS X", "transed": 1, "url": "https://boingboing.net/2020/05/18/raspberry-pi-operating-system.html/", "via": "", "real_tags": ["\u64cd\u4f5c\u7cfb\u7edf", "pi"]}, {"category": "", "categoryclass": "", "imagename": "d88be342f778ae311b6e5a0efb01cc19.png", "infoid": 1002747, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "java.net.SocketInputStream.socketRead0()API\u505a\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u5b83\u7ecf\u5e38\u51fa\u73b0\u5728\u51e0\u4e2a\u7ebf\u7a0b\u8f6c\u50a8\u4e2d\uff1f\u4e3a\u4ec0\u4e48\u4f1a\u5728\u50cfTastThread.io\u8fd9\u6837\u7684\u7ebf\u7a0b\u8f6c\u50a8\u5206\u6790\u5de5\u5177\u4e2d\u62a5\u544a\u5462\uff1f\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u6211\u9700\u8981\u5173\u5fc3\u7684\u4e8b\u60c5\uff1f\u8fd9\u4e2a\u95ee\u9898\u7684\u6f5c\u5728\u89e3\u51b3\u65b9\u6848\u662f\u4ec0\u4e48\uff1f\u8ba9\u6211\u4eec\u627e\u51fa\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u3002\n\u901a\u8fc7\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u7c7b\u6bd4\uff0c\u8bb0\u4f4f\u65b0\u6982\u5ff5\u603b\u662f\u5f88\u5bb9\u6613\u7684\u3002\u5047\u8bbe\u4f60\u6b63\u5728\u7ed9\u4f60\u7684\u59bb\u5b50\u6216\u5973\u670b\u53cb\u6253\u7535\u8bdd\u3002\u4e00\u65e6\u7535\u8bdd\u63a5\u901a\uff0c\u5982\u679c\u5979\u7acb\u5373\u5fc3\u60c5\u6109\u5feb\uff0c\u4f60\u4f1a\u5f97\u5230\u201c\u4f60\u597d\uff0c\u4eb2\u7231\u7684(\u6216\u4eb2\u7231\u7684\u6216\u751c\u5fc3)\uff0c\u4f60\u597d\u5417\uff1f\u201d\uff1a-)\u3002\u5982\u679c\u4f60\u7684\u7535\u8bdd\u5728\u5979\u5de5\u4f5c\u7684\u65f6\u5019\u63a5\u901a(\u6bd4\u5982\u5979\u5728\u529e\u516c\u5ba4\u63a5\u5b69\u5b50\uff0c\u5065\u8eab\u623f\u2026)\u3002\u5979\u5bf9\u8bf4\u201c\u4f60\u597d\uff0c\u4eb2\u7231\u7684(\u6216\u4eb2\u7231\u7684\u6216\u751c\u5fc3)\u201d\u7684\u56de\u7b54\u53ef\u80fd\u4f1a\u6709\u5ef6\u8fdf\u3002\u2026\u3002.\u201c\u3002\u5047\u8bbe\u4f60\u7684\u7535\u8bdd\u5728\u5979\u751f\u6c14/\u5fc3\u60c5\u4e0d\u597d\u7684\u65f6\u5019\u63a5\u901a\u4e86\uff0c\u90a3\u4e48\u56de\u5e94\u53ef\u80fd\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\u3002\u53ea\u6709\u4e0a\u5e1d\u77e5\u9053\u3002\u60a8\u53ef\u80fd\u4f1a\u5728\u51e0\u79d2\u949f/\u5206\u949f\u540e\u5f97\u5230\u54cd\u5e94(\u751a\u81f3\u547c\u53eb\u53ef\u80fd\u4f1a\u88ab\u6302\u65ad\uff1a-)\u3002\u56e0\u6b64\uff0c\u4ece\u8fde\u63a5\u8c03\u7528\u5230\u6302\u65ad\u8c03\u7528\u8fd9\u6bb5\u65f6\u95f4\u57fa\u672c\u4e0a\u5c31\u662fsocketRead0()API\u3002(\u611f\u8c22IBM\u7684Douglas Spath\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u6f02\u4eae\u7684\u793a\u4f8b\u6765\u89e3\u91ca\u8fd9\u4e2aSocketRead0()API\u3002)\u3002\n\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u901a\u8fc7\u5404\u79cd\u534f\u8bae(\u5982SOAP\u3001REST\u3001HTTP\u3001HTTPS\u3001jdbc\u3001rmi\u2026)\u4e0e\u591a\u4e2a\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\u3002\u6240\u6709\u8fde\u63a5\u90fd\u901a\u8fc7JDK java.net\u5c42\u6267\u884c\u8f83\u4f4e\u7684TCP-IP/\u5957\u63a5\u5b57\u64cd\u4f5c\u3002\u5728\u8fd9\u4e00\u5c42\uff0cSocketInputStream.socketRead0()API\u7528\u4e8e\u8bfb\u53d6\u548c\u63a5\u6536\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u3002\u4e00\u4e9b\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u7acb\u5373\u54cd\u5e94\uff0c\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u624d\u80fd\u54cd\u5e94\uff0c\u800c\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u6839\u672c\u4e0d\u54cd\u5e94\u3002\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u8bfb\u53d6\u54cd\u5e94\u6570\u636e\u4e4b\u524d\uff0c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7ebf\u7a0b\u5c06\u505c\u7559\u5728\u6b64java.net.SocketInputStream.socketRead0()API\u4e2d\u3002\n\u4e0b\u9762\u662f\u4e00\u4e9b\u793a\u4f8b\u5806\u6808\u8ddf\u8e2a\uff0c\u5176\u4e2d\u663e\u793a\u4e86\u201cSocketInputStream.socketRead0\u201dAPI\u4e2d\u6ede\u7559\u7684\u7ebf\u7a0b\u3002\u60a8\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u4e0eSocketInputStream.socketRead0()API\u4e0a\u505c\u6ede\u7684\u534f\u8bae\u7ebf\u7a0b\u65e0\u5173\u3002\n&#34\uff1bRMI TCP\u8fde\u63a5(2)-192.xxx.xx.xx&#34\uff1b\u540e\u53f0\u8fdb\u7a0bPRIO=6 tid=0x000000000a3e8800 nid=0x158e50 Runnable[0x000000000adbe000]java.lang.Thread.State\uff1aRUNNABLEat java.net.SocketInputStream.socketRead0(\u672c\u5730\u65b9\u6cd5)at java.net.SocketInputStream.read(\u672a\u77e5\u6e90)at java.net.SocketInputStream.read(\u672a\u77e5\u6e90\u3002.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown\u6e90)\u5728sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown\u6e90)\u5728java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown\u6e90)\u5728java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown\u6e90)\u5728java.lang.Thread.run(\u672a\u77e5\u6e90)\u3002\n&#34\uff1b\u7ebf\u7a0b-18&#34\uff1bid=48 idx=0x9c tid=11696\u4f18\u5148\u7ea7=5\u6d3b\u52a8\uff0c\u672c\u673a\uff0c\u5b88\u62a4\u8fdb\u7a0bjrockit/net/SocketNativeIO.readBytesPinned(Ljava/io/FileDescriptor\uff1b[BIII)I(Native\u65b9\u6cd5)\uff0c\u4f4d\u4e8ejrockit/net/SocketNativeIO.socketRead(SocketNativeIO.java:32)at java/net/SocketInputStream.socketRead0(Ljava/io/FileDescriptor\uff1b[biii)\u4f4d\u4e8eJJJROKIT/VM/RNI.c2java(java/net/SocketInputStream.read(SocketInputStream.java:129)at java/net/ManagedSocketInputStreamHighPerformanceNew.read(ManagedSocketInputStreamHighPerformanceNew.java:100)at java/net/SocketInputStream.read(SocketInputStream.java:182)at java/net/ManagedSocketInputStreamHighPerformanceNew.read(ManagedSocketInputStreamHighPerformanceNew.java:55)at oracle/ons/InputBuffer.getNextString(InputBuffer.java:137)at oracle/ons/ReceiverThread.run(ReceiverThread.java:295)at JJJJ)V(\u539f\u751f\u65b9\u6cd5)\u7684I(SocketInputStream.java)\u3002\n&#34\uff1bAMQP\u8fde\u63a5192.xx.xxx.xxx\uff1a5672&#34\uff1b\u4f18\u5148\u7ea7=5 RUNNABLEjava.net.SocketInputStream.socketRead0(Native Method)java.net.SocketInputStream.socketRead(SocketInputStream.java:116)java.net.SocketInputStream.read(SocketInputStream.java:170)java.net.SocketInputStream.read(SocketInputStream.java:141)java.io.BufferedInputStream.fill(BufferedInputStream.java:246)java.io.BufferedInputStream.read(BufferedInputStream.java:265)java.io.DataInputStream.readUnsignedByte(DataInputStream.java:288)com.rabbitmq.client.impl.Frame.readFrom(Frame.java:95)com.rabbitmq.client.\u3002impl.SocketFrameHandler.readFrame(SocketFrameHandler.java:139)com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:536)java.lang.Thread.run(Thread.java:745)\u3002\n&#34\uff1b\u7ebf\u7a0b-2012&#34\uff1bID=218 IDX=0x09c TID=196 PRIO=10\u6d3b\u52a8\uff0c\u672c\u673a\uff0cjava.net.SocketInputStream.read(SocketInputStream.java:140)at com.ibm.db2.jcc.t4.z.b(z.java\uff1a199)at com.ibm.db2.jcc.t4.z.c(z.java\uff1a289)at com.ibm.db2.jcc.t4.z.c(z.java\uff1a402)at com.ibm.db2.jcc.t4.z.c(z.java\uff1a402)\n\u5982\u679c\u7ebf\u7a0b\u5728SocketInputStream.socketRead0 API\u4e2d\u505c\u6ede\uff0c\u5e76\u4e14\u5728\u8f83\u957f\u65f6\u95f4\u5185\u65e0\u6cd5\u6062\u590d\uff0c\u5219\u53d1\u8d77\u4e8b\u52a1\u7684\u5ba2\u6237\u5c06\u4e0d\u4f1a\u5728\u5176\u5c4f\u5e55\u4e0a\u770b\u5230\u4efb\u4f55\u54cd\u5e94\u3002\u5b83\u53ef\u4ee5\u8ff7\u60d1\u7528\u6237\uff0c\u8ff7\u60d1\u7528\u6237\u3002\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u5361\u5728SocketInputStream.socketRead0API\u4e2d\uff0c\u5e76\u4e14\u5728\u8f83\u957f\u65f6\u95f4\u5185\u4e0d\u80fd\u6062\u590d\uff0c\u53ef\u80fd\u4f1a\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5e26\u6765\u4e25\u91cd\u7684\u53ef\u7528\u6027\u95ee\u9898\u3002\n\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u8bbe\u7f6e\u9002\u5f53\u7684\u8d85\u65f6\u8bbe\u7f6e\u6765\u4eceSocketInputStream.socketRead0\u6062\u590d\uff0c\u56e0\u6b64\u5b83\u4eec\u6700\u7ec8\u4f1a\u957f\u65f6\u95f4\u505c\u7559\u5728\u6b64API\u4e2d\u3002\u8bbe\u7f6e\u9002\u5f53\u7684\u8d85\u65f6\u662f\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u5e94\u8be5\u6267\u884c\u7684\u4e00\u79cd\u5f88\u597d\u7684\u81ea\u6211\u9632\u5fa1\u673a\u5236\u3002\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5e94\u7528\u4e8e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u51e0\u4e2a\u8d85\u65f6\u8bbe\u7f6e\uff0c\u56e0\u4e3a\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u5408\u9002\u7684\u8bbe\u7f6e\uff1a\n\u60a8\u53ef\u4ee5\u4f20\u9012\u8fd9\u4e24\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u8d85\u65f6\u7f51\u7edc\u5c5e\u6027\uff0c\u5b83\u4eec\u53ef\u4ee5\u5168\u5c40\u9002\u7528\u4e8e\u4f7f\u7528java.net.URLConnection\u7684\u6240\u6709\u534f\u8bae\u5904\u7406\u7a0b\u5e8f\uff1a\nsun.net.client.defaultConnectTimeout\u6307\u5b9a\u4e0e\u4e3b\u673a\u5efa\u7acb\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8eHTTP\u8fde\u63a5\uff0c\u5b83\u662f\u5efa\u7acb\u5230HTTP\u670d\u52a1\u5668\u7684\u8fde\u63a5\u65f6\u7684\u8d85\u65f6\u3002\u5bf9\u4e8eftp\u8fde\u63a5\uff0c\u5b83\u662f\u5efa\u7acb\u5230ftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u65f6\u7684\u8d85\u65f6\u3002\ndefaultReadTimeout\u6307\u5b9a\u5728\u4e0e\u8d44\u6e90\u5efa\u7acb\u8fde\u63a5\u65f6\u4ece\u8f93\u5165\u6d41\u8bfb\u53d6\u65f6\u7684\u8d85\u65f6\u65f6\u95f4(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u3002\n\u5982\u679c\u60a8\u76f4\u63a5\u4f7f\u7528Sockets\u7f16\u7a0b\uff0c\u53ef\u4ee5\u8003\u8651\u901a\u8fc7\u8c03\u7528setSoTimeout()API\u6765\u8bbe\u7f6e\u5957\u63a5\u5b57\u7684\u8d85\u65f6\u3002\n\u6b64\u63a5\u53e3\u53ef\u4ee5\u4f20\u9012\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u8d85\u65f6\u503c\u3002\u5982\u679c\u8fdc\u7a0b\u5e94\u7528\u5728\u6307\u5b9a\u7684\u8d85\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u54cd\u5e94\uff0c\u5c06\u629b\u51fajava.net.SocketTimeoutException\u3002\u6b64\u5f02\u5e38\u5c06\u91ca\u653e\u7ebf\u7a0b\uff0c\u5141\u8bb8\u5b83\u5728\u5176\u4ed6\u8c03\u7528\u4e0a\u5de5\u4f5c\u3002\u6ce8\u610f\uff1a\u5982\u679c\u8d85\u65f6\u503c\u88ab\u4f20\u9012\u4e3a0\uff0c\u90a3\u4e48\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a\u65e0\u9650\u8d85\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u7ebf\u7a0b\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u65f6\u3002\n\u5982\u679c\u4f7f\u7528JDBC(Java\u6570\u636e\u5e93\u8fde\u63a5)\u8fdb\u884c\u8fde\u63a5\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528setQueryTimeout()API\u8bbe\u7f6e\u8d85\u65f6\u503c\u3002\n\u6b64API\u5c06\u8bbe\u7f6eJDBC\u9a71\u52a8\u7a0b\u5e8f\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u7ed3\u679c\u5c06\u7b49\u5f85\u7684\u79d2\u6570\u3002\u5982\u679c\u8d85\u8fc7\u9650\u5236\uff0c\u5219\u629b\u51faSQLTimeoutException\u3002JDBC\u9a71\u52a8\u7a0b\u5e8f\u5c06\u6b64\u9650\u5236\u5e94\u7528\u4e8eExecute\u3001ecuteQuery()\u548cecuteUpdate()\u65b9\u6cd5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8fd0\u884c\u8bed\u53e5\u5b8c\u6210\u7684\u65f6\u95f4\u6ca1\u6709\u9650\u5236\u3002\n\u5982\u679c\u60a8\u6b63\u5728\u8fde\u63a5Oracle\u6570\u636e\u5e93\uff0c\u5e76\u4e14\u770b\u5230SocketInputStream.socketRead0()API\u4e0a\u6ede\u7559\u4e86\u5927\u91cf\u7ebf\u7a0b\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u4f20\u9012-D oracle.jdbc.ReadTimeout\u7cfb\u7edf\u5c5e\u6027\u3002\n\u60a8\u9700\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u671f\u95f4\u4f20\u9012\u4e0a\u8ff0\u53c2\u6570\u3002\u503c\u9700\u8981\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u6307\u5b9a\u3002\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6070\u597d\u5728IBM Websphere\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u8bbe\u7f6e\u4ee5\u4e0b\u5c5e\u6027\uff1a\nb.\u7b2c\u4e8c\u4e2a\u5c5e\u6027syncQueryTimeoutWithTransactionTimeout\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u6570\u636e\u6e90\u81ea\u5b9a\u4e49\u5c5e\u6027\u3002\u4f7f\u7528\u6b64\u8bbe\u7f6e\uff0cWebSphere\u5c06\u8ba1\u7b97\u4e8b\u52a1\u8d85\u65f6\u4e4b\u524d\u7684\u5269\u4f59\u65f6\u95f4(\u5982\u679c\u5728\u5168\u5c40\u4e8b\u52a1\u4e2d\u8fd0\u884c)\uff0c\u5e76\u81ea\u52a8\u5c06\u67e5\u8be2\u8d85\u65f6\u8bbe\u7f6e\u4e3a\u6b64\u503c\u3002\n\u60a8\u8fd8\u53ef\u4ee5\u5728\u4e3aWeb\u670d\u52a1\u5ba2\u6237\u7aef\u8bbe\u7f6e\u7684HTTP\u4f20\u8f93\u7b56\u7565\u4e2d\u8bbe\u7f6e\u201creadTimeout\u201d\u5c5e\u6027\uff0c\u6216\u8005\u5728\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684org.apache.axis2.context.MessageContext\u4e0a\u8bbe\u7f6e\u201ctimeout\u201d\u3002\n\u672a\u4eceSocketInputStream.socketRead0 API\u6062\u590d\u7684\u7ebf\u7a0b\u4e5f\u53ef\u80fd\u56e0\u7f51\u7edc\u8fde\u63a5\u6216\u8d1f\u8f7d\u5747\u8861\u5668\u95ee\u9898\u800c\u4ea7\u751f\u3002\u6211\u4eec\u5728\u8fc7\u53bb\u5df2\u7ecf\u770b\u5230\uff0c\u6709\u65f6\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4e0d\u4f1a\u53d1\u51fa\u9002\u5f53\u7684ACK\u6216FIN\u6570\u636e\u5305\u3002\u60a8\u53ef\u80fd\u9700\u8981\u8054\u7cfb\u7f51\u7edc\u5de5\u7a0b\u5e08\u6216\u4e91\u6258\u7ba1\u63d0\u4f9b\u5546\u652f\u6301\u56e2\u961f\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\u5728\u60a8\u7684\u7aef\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982Wireshark\u4e4b\u7c7b\u7684TCP/IP\u8ddf\u8e2a\u5de5\u5177\u6765\u67e5\u770b\u60a8\u548c\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5728\u7f51\u7edc\u4e2d\u53d1\u9001\u7684\u6570\u636e\u5305\u3002\u5b83\u53ef\u4ee5\u5e2e\u52a9\u60a8\u7f29\u5c0f\u8303\u56f4\uff0c\u65e0\u8bba\u95ee\u9898\u662f\u5728\u60a8\u7684\u7f51\u7edc\u4e00\u7aef\u8fd8\u662f\u5728\u7f51\u7edc\u7684\u53e6\u4e00\u7aef\u3002\n\u6709\u65f6\uff0c\u4e8b\u52a1\u5f88\u53ef\u80fd\u56e0\u4e3a\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6027\u80fd\u95ee\u9898\u800c\u53d8\u6162\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981\u8ba9\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\u610f\u8bc6\u5230\u901f\u5ea6\u53d8\u6162\uff0c\u5e76\u4e0e\u4ed6\u4eec\u4e00\u8d77\u89e3\u51b3\u95ee\u9898\u3002\n\u60a8\u8fd8\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u975e\u963b\u585eHTTP\u5ba2\u6237\u7aef\u5e93\uff0c\u5982Grizzly\u6216Netty\uff0c\u5b83\u4eec\u6ca1\u6709\u963b\u585e\u64cd\u4f5c\u6765\u6302\u8d77\u7ebf\u7a0b\u3002\u4f46\u662f\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u66f4\u591a\u7684\u662f\u4e00\u4e2a\u6218\u7565\u6027\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u6d89\u53ca\u4ee3\u7801\u66f4\u6539\u548c\u5f7b\u5e95\u7684\u6d4b\u8bd5\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u662f\u4e00\u4e2a\u5168\u9762\u7684\u5217\u8868\uff0c\u4f46\u53ef\u80fd\u4e0d\u662f\u6f5c\u5728\u89e3\u51b3\u65b9\u6848\u7684\u5b8c\u6574\u5217\u8868\u3002\u5982\u679c\u60a8\u6709\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u548c\u8d85\u65f6\u8bbe\u7f6e\u8981\u6dfb\u52a0\u5230\u6b64\u535a\u5ba2\u4e2d\uff0c\u8bf7\u5728\u4e0b\u9762\u7684\u53cd\u9988\u90e8\u5206\u7ed9\u6211\u4eec\u7559\u8a00\u3002\u6211\u4eec\u5c06\u5f88\u9ad8\u5174\u7528\u60a8\u7684\u63a8\u8350\u6765\u66f4\u65b0\u8fd9\u4e2a\u535a\u5ba2\u3002", "note_en": "What does java.net.SocketInputStream.socketRead0() API do? Why is it showing up frequently in several thread dumps? Why is it reported in thread dump analysis tools like\u00a0 fastThread.io? Is it something that I need to be concerned about?  What are the potential solutions to this problem? Let\u2019s find answers to these questions.\n  It\u2019s always easy to remember new concepts through real life analogies. Say suppose you are calling your wife or girlfriend on the phone. Once call gets connected, if she is in happy/good mood immediately you will get response \u201cHello Honey (or darling or sweetie), How are you?\u201d. :-). If your call got connected when she is in middle of doing some work (say she is in her office, picking up kids, Gym\u2026) there might be delay in her response to say \u201cHello Honey (or darling or sweetie) \u2026.\u201d. Suppose your call got connected when she is in angry/bad mood then response can be unpredictable. God only knows. You might get response after several seconds/minutes (or even call can get hanged up :-). So, the time you are waiting since the moment call got connected until the moment you hang-up the call is basically socketRead0() API. (Thanks to  Douglas Spath from IBM for giving this beautiful example to explain this SocketRead0() API.)\n Your application might be interfacing with multiple remote applications through various protocol likes: SOAP, REST, HTTP, HTTPS, JDBC, RMI\u2026 all connections goes through JDK java.net layer to perform lower TCP-IP/Socket operations. In this layer, SocketInputStream.socketRead0() API is used to  read and receive the data the remote application. Some remote applications may respond immediately, some might take time to respond, some application may not respond at all. Until your application reads the response data completely, your application thread will be stuck in this java.net.SocketInputStream.socketRead0() API.\n  Below are some sample stacktrace that shows the threads that are stuck in \u2018SocketInputStream.socketRead0\u2019 API. You can notice irrespective of the protocol threads to get stuck on SocketInputStream.socketRead0() API.\n &#34;RMI TCP Connection(2)-192.xxx.xx.xx&#34; daemon prio=6 tid=0x000000000a3e8800 nid=0x158e50 runnable [0x000000000adbe000]java.lang.Thread.State: RUNNABLEat java.net.SocketInputStream.socketRead0(Native Method)at java.net.SocketInputStream.read(Unknown Source)at java.net.SocketInputStream.read(Unknown Source)at java.io.BufferedInputStream.fill(Unknown Source)at java.io.BufferedInputStream.read(Unknown Source)- locked (0x00000007ad784010) (a java.io.BufferedInputStream)at java.io.FilterInputStream.read(Unknown Source)at sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)at java.lang.Thread.run(Unknown Source)\n  &#34;Thread-18&#34; id=48 idx=0x9c tid=11696 prio=5 alive, in native, daemonat jrockit/net/SocketNativeIO.readBytesPinned(Ljava/io/FileDescriptor;[BIII)I(Native Method)at jrockit/net/SocketNativeIO.socketRead(SocketNativeIO.java:32)at java/net/SocketInputStream.socketRead0(Ljava/io/FileDescriptor;[BIII)I(SocketInputStream.java)at java/net/SocketInputStream.read(SocketInputStream.java:129)at java/net/ManagedSocketInputStreamHighPerformanceNew.read(ManagedSocketInputStreamHighPerformanceNew.java:100)at java/net/SocketInputStream.read(SocketInputStream.java:182)at java/net/ManagedSocketInputStreamHighPerformanceNew.read(ManagedSocketInputStreamHighPerformanceNew.java:55)at oracle/ons/InputBuffer.getNextString(InputBuffer.java:137)at oracle/ons/ReceiverThread.run(ReceiverThread.java:295)at jrockit/vm/RNI.c2java(JJJJJ)V(Native Method)\n  &#34;AMQP Connection 192.xx.xxx.xxx:5672&#34; prio=5 RUNNABLEjava.net.SocketInputStream.socketRead0(Native Method)java.net.SocketInputStream.socketRead(SocketInputStream.java:116)java.net.SocketInputStream.read(SocketInputStream.java:170)java.net.SocketInputStream.read(SocketInputStream.java:141)java.io.BufferedInputStream.fill(BufferedInputStream.java:246)java.io.BufferedInputStream.read(BufferedInputStream.java:265)java.io.DataInputStream.readUnsignedByte(DataInputStream.java:288)com.rabbitmq.client.impl.Frame.readFrom(Frame.java:95)com.rabbitmq.client.impl.SocketFrameHandler.readFrame(SocketFrameHandler.java:139)com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:536)java.lang.Thread.run(Thread.java:745)\n  &#34;Thread-2012&#34; id=218 idx=0x09c tid=196 prio=10 alive, in native, daemonjava.lang.Thread.State: RUNNABLEat java.net.SocketInputStream.socketRead0(Native Method)at java.net.SocketInputStream.read(SocketInputStream.java:140)at com.ibm.db2.jcc.t4.z.b(z.java:199)at com.ibm.db2.jcc.t4.z.c(z.java:289)at com.ibm.db2.jcc.t4.z.c(z.java:402)at com.ibm.db2.jcc.t4.z.v(z.java:1170)at com.ibm.db2.jcc.t4.cb.b(cb.java:40)at com.ibm.db2.jcc.t4.q.a(q.java:32)at com.ibm.db2.jcc.t4.sb.i(sb.java:135)at com.ibm.db2.jcc.am.yn.gb(yn.java:2066)at com.ibm.db2.jcc.am.zn.pc(zn.java:3446)at com.ibm.db2.jcc.am.zn.b(zn.java:4236)at com.ibm.db2.jcc.am.zn.fc(zn.java:2670)at com.ibm.db2.jcc.am.zn.execute(zn.java:2654)at com.ibm.ws.rsadapter.jdbc.WSJdbcPreparedStatement.execute(WSJdbcPreparedStatement.java:618)at com.mycompany.myapp.MyClass.executeDatabaseQuery(MyClass.java:123)\n   If you a thread gets stuck in SocketInputStream.socketRead0 API and doesn\u2019t recover from it for a longer period, then customer whoever originated the transaction will not see any response in his screen. It can puzzle, confuse the user. If multiple threads get stuck in SocketInputStream.socketRead0 API and doesn\u2019t recover for a longer period it can pose serious availability concerns to your application.\n             Most applications don\u2019t set appropriate timeout settings to recover from SocketInputStream.socketRead0, thus they end up stuck in this API for a prolonged period. Setting appropriate timeout is a great self-defensive mechanism that every application should do. Here are few timeout settings you can apply to your application as you may see the fit:\n  You can pass these two powerful timeout networking properties that can be globally applicable to all protocol handlers that uses java.net.URLConnection:\n  sun.net.client.defaultConnectTimeout specifies the timeout (in milliseconds) to establish the connection to the host. For example, for http connections it is the timeout when establishing the connection to the http server. For ftp connection it is the timeout when establishing the connection to ftp servers.\n sun.net.client.defaultReadTimeout specifies the timeout (in milliseconds) when reading from input stream when a connection is established to a resource.\n   If you are directly programming with Sockets, you may consider setting the timeout on the socket by invoking the  setSoTimeout() API.\n To this API you can pass the timeout value in milliseconds. If remote application doesn\u2019t respond back within the specified timeout period, java.net.SocketTimeoutException will be thrown. This exception will free-up the thread, allowing it to work on other calls. Note: If timeout value is passed as 0, then it\u2019s interpreted as an infinite timeout, it means thread will never timeout.\n  If you are using JDBC (Java DataBase Connectivity) to connect, you may consider setting the timeout value using the  setQueryTimeout() API.\n This API will set the number of seconds the JDBC driver will wait for getting results from database. If the limit is exceeded, SQLTimeoutException is thrown. JDBC driver applies this limit to the execute, executeQuery() and executeUpdate() methods. By default, there is no limit on the amount of time allowed for a running statement to complete.\n  If you are connecting with Oracle database and seeing lot of threads stuck on SocketInputStream.socketRead0() API, you may consider passing -D oracle.jdbc.ReadTimeout system property.\n You need to pass above argument during application startup. Value needs to be specified in milliseconds.\n  If your application happens to be running on IBM Websphere, you can consider setting following properties:\n  b. A second property,  syncQueryTimeoutWithTransactionTimeout, can also be set as a data source custom property. With this set, WebSphere will calculate the time remaining before the transaction times out (if running within a global transaction) and set the query timeout to this value automatically.\n  You can also set the \u201creadTimeout\u201d property in the HTTP Transport Policy Set for the Web Service client or set \u201ctimeout\u201d on the org.apache.axis2.context.MessageContext in the application code.\n  Threads not recovering from SocketInputStream.socketRead0 API can also originate because of issues in network connectivity or load balancers. We have seen in the past sometimes remote application may not be issuing appropriate ACK or FIN packets. You might have to engage network engineers or cloud hosting providers support team to troubleshoot the issue.\n On your end, you may use TCP/IP tracing tools such as Wireshark to see packets sent in the network between you and the remote application.\u00a0 It can help you to narrow whether if the problem is on your side of the network or on the other side of the network.\n  Sometimes it could be quite possible that transactions might be slowing down because of performance problems in the remote application. In those circumstances, you need to bring it to remote application\u2019s awareness of the slow down and work with them to fix the problem.\n  You can also consider using non-blocking HTTP client libraries like  Grizzly or  Netty which do not have blocking operations to hang a thread. But this solution is more a strategic solution, which involves code changes &amp; thorough testing.\n Note, this a comprehensive list but maybe not be a complete list of potential solutions. If you have additional solutions and timeout settings that you would like to add to this blog, please drop us a note in the below feedback section. We will be glad to update this blog with your recommendation(s).", "posttime": "2020-05-19 15:09:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ebf\u7a0b,java,stuck", "title": "Java.net.SocketInputStream.socketRead0\u4e2d\u7684\u7ebf\u7a0b\u5361\u4f4f", "title_en": "Threads Stuck in Java.net.SocketInputStream.socketRead0", "transed": 1, "url": "https://blog.fastthread.io/2018/09/02/threads-stuck-in-java-net-socketinputstream-socketread0/", "via": "", "real_tags": ["\u7ebf\u7a0b", "java", "stuck"]}, {"category": "", "categoryclass": "", "imagename": "d5702f4bf73aa5313d4d1d4e9db5e371.png", "infoid": 1002746, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u73b0\u5728\u5c31\u521b\u5efa\u60a8\u7684\u514d\u8d39GitHub\u5e10\u6237\uff0c\u8ba2\u9605\u6b64\u5b58\u50a8\u5e93\u4ee5\u83b7\u53d6\u65b0\u7248\u672c\uff0c\u5e76\u4e0e5000\u4e07\u5f00\u53d1\u4eba\u5458\u4e00\u8d77\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d", "note_en": "Create your free GitHub account today to subscribe to this repository for new releases and build software alongside 50 million developers.\n  Sign up", "posttime": "2020-05-19 14:54:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ios,iosevka,\u521b\u5efa", "title": "Iosevka\uff0c\u7248\u672c3.0.0", "title_en": "Iosevka, Version 3.0.0", "transed": 1, "url": "https://github.com/be5invis/Iosevka/releases", "via": "", "real_tags": ["ios", "iosevka", "\u521b\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "ceb8ac04c3796f13bad8c83e60103bbc.jpg", "infoid": 1002745, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u653f\u5e9c\u5b98\u5458\u5bf9\u51a0\u72b6\u75c5\u6bd2\u5982\u4f55\u53ef\u80fd\u57282020\u5e74\u603b\u7edf\u9009\u4e3e\u671f\u95f4\u51cf\u5c11\u9009\u6c11\u6295\u7968\u7387\u8868\u8fbe\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u62c5\u5fe7\u3002\n\u4f5c\u4e3a\u90e8\u5206\u89e3\u51b3\u65b9\u6848\uff0c\u5c11\u6570\u51e0\u4e2a\u5dde\u5df2\u7ecf\u8f6c\u5411\u4e92\u8054\u7f51\u6295\u7968\u8bd5\u70b9\u8ba1\u5212\uff1a\u65b0\u6cfd\u897f\u5dde\u3001\u7279\u62c9\u534e\u5dde\u548c\u897f\u5f17\u5409\u5c3c\u4e9a\u5dde\u6700\u8fd1\u90fd\u542f\u52a8\u4e86\u8bd5\u70b9\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u8bd5\u70b9\u8303\u56f4\u6709\u9650\uff0c\u4e3b\u8981\u96c6\u4e2d\u5728\u51cf\u8f7b\u6b8b\u75be\u9009\u6c11\u548c\u6d77\u5916\u9009\u6c11\u7684\u969c\u788d\u3002\n\u7136\u800c\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u754c-\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u6279\u8bc4\u4e92\u8054\u7f51\u6295\u7968-\u8ba4\u4e3a\u8fd9\u4e9b\u7a0b\u5e8f\u662f\u901a\u5f80\u8feb\u5728\u7709\u776b\u7684\u5b89\u5168\u98ce\u9669\u7684\u6ed1\u5761\u8def\u3002\n\u65af\u5766\u798f\u5927\u5b66(Stanford University)\u8ba1\u7b97\u673a\u79d1\u5b66\u6559\u6388\u5927\u536b\u00b7\u8fea\u5c14(David Dill)\u662f\u591a\u4ea7\u7684\u53cd\u5bf9\u8005\u4e4b\u4e00\u3002\u8fea\u5c14\u5728\u804c\u4e1a\u751f\u6daf\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\u90fd\u5728\u7814\u7a76\u8f6f\u4ef6\u4ee3\u7801\u4e2d\u7684\u6f0f\u6d1e\uff0c\u4ed6\u8bf4\uff0c\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u786e\u4fdd\u8bbe\u5907\u548c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u6076\u610f\u8f6f\u4ef6\uff0c\u8fd9\u4e9b\u6076\u610f\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u64cd\u7eb5\u9009\u6c11\u7684\u9009\u62e9\u3002\u540c\u6837\uff0c\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u654c\u5bf9\u5916\u56fd\u653f\u5e9c\u7684\u9ed1\u5ba2\u603b\u662f\u53ef\u4ee5\u4fb5\u5165\u8fd9\u4e9b\u7cfb\u7edf\uff0c\u6539\u53d8\u6216\u64cd\u7eb5\u9009\u7968\u3002\n\u5728\u4f60\u7684\u952e\u76d8\u548c\u8fdb\u5165\u4e92\u8054\u7f51\u53e6\u4e00\u7aef\u7684\u7535\u5b50\u6295\u7968\u7bb1\u4e4b\u95f4\uff0c\u6709\u5f88\u591a\u4e0d\u597d\u7684\u4e8b\u60c5\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u4ed6\u8bf4\u3002\u8fd9\u4e2a\u95ee\u9898\u662f\u65e0\u6cd5\u89e3\u51b3\u7684\uff0c\u81f3\u5c11\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\u662f\u4e0d\u80fd\u89e3\u51b3\u7684\u3002\n\u7f51\u7edc\u5b89\u5168\u548c\u56fd\u5bb6\u5b89\u5168\u7ec4\u7ec7\u503e\u5411\u4e8e\u540c\u610f\u8fd9\u4e00\u8bc4\u4f30\u3002\u4e00\u4efd\u7531FBI\uff0cEAC\uff0cNIST\u548c\u56fd\u571f\u5b89\u5168\u90e8\u7684CISA\u63d0\u4f9b\u7ed9\u653f\u5e9c\u6280\u672f\u7684\u8054\u5408\u58f0\u660e\uff0c\u90fd\u8b66\u544a\u4e0d\u8981\u5927\u89c4\u6a21\u63a5\u53d7\u8fd9\u79cd\u6280\u672f\u3002\n\u58f0\u660e\u5199\u9053\uff0c\u867d\u7136\u6709\u6709\u6548\u7684\u98ce\u9669\u7ba1\u7406\u63a7\u5236\u6765\u5b9e\u73b0\u7535\u5b50\u9009\u7968\u7684\u4ea4\u4ed8\u548c\u6807\u8bb0\uff0c\u4f46\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u7eb8\u8d28\u9009\u7968\u8fd4\u56de\uff0c\u56e0\u4e3a\u5373\u4f7f\u6709\u63a7\u5236\u63aa\u65bd\uff0c\u7535\u5b50\u9009\u7968\u8fd4\u56de\u6280\u672f\u4e5f\u662f\u9ad8\u98ce\u9669\u7684\u3002\n\u4e13\u5bb6\u8b66\u544a\u8bf4\uff0c\u8bb8\u591a\u4e92\u8054\u7f51\u6295\u7968\u98de\u884c\u5458\u4f7f\u7528\u7684\u4f9b\u5e94\u5546\u4ea7\u54c1\u90fd\u7ecf\u8fc7\u4e86\u9002\u5f53\u7684\u6d4b\u8bd5\uff0c\u4f46\u8981\u786e\u5b9a\u8fd9\u6837\u7684\u5b89\u5168\u6027\u53ef\u80fd\u5f88\u56f0\u96be\u3002\n\u7279\u62c9\u534e\u5dde\u7684\u9879\u76ee\u4f7f\u7528\u6c11\u4e3b\u76f4\u64ad\uff0c\u8fd9\u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u897f\u96c5\u56fe\u7684\u4f9b\u5e94\u5546\uff0c\u5141\u8bb8\u9009\u6c11\u901a\u8fc7\u81ea\u5df1\u7684\u8bbe\u5907(\u5305\u62ec\u624b\u673a\u548c\u7b14\u8bb0\u672c\u7535\u8111)\u6807\u8bb0\u548c\u63d0\u4ea4\u4ed6\u4eec\u7684\u6295\u7968\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u8bb0\u8005\u65e0\u6cd5\u8054\u7cfb\u5230Democratic Live\u8bf7\u5176\u7f6e\u8bc4\uff0c\u4f46\u8be5\u516c\u53f8\u5728\u5176\u4ed6\u5a92\u4f53\u9732\u9762\u65f6\u8fa9\u79f0\uff0c\u5176\u57fa\u4e8e\u4e91\u7684\u4ea7\u54c1\u5df2\u7ecf\u901a\u8fc7\u4e86\u4e25\u683c\u7684\u5b89\u5168\u6d4b\u8bd5\u8fc7\u7a0b\u3002\n\u4ed6\u8bf4\uff0c\u8fdb\u884c\u5b89\u5168\u8bc4\u4f30\u662f\u4e00\u4e2a\u8270\u96be\u7684\u8fc7\u7a0b\uff0c\u8d1f\u8d23\u4efb\u7684\u516c\u53f8\u4e0d\u4f1a\u505a\u51fa\u62c5\u4fdd\u3002\u4ed6\u4eec\u4e0d\u4f1a\u8bf4\uff0c\u8fd9\u662f\u4fdd\u8bc1\u5b89\u5168\u7684\u8f6f\u4ef6\u3002\u4ed6\u4eec\u4f1a\u8bf4\uff0c\u6211\u4eec\u505a\u4e86\u4ee5\u4e0b\u4e8b\u60c5\uff0c\u5728\u8f6f\u4ef6\u4e2d\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u95ee\u9898\u3002\u6216\u8005\uff0c\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u6211\u4eec\u53d1\u73b0\u8f6f\u4ef6\u5b58\u5728\u8fd9\u4e9b\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u7f13\u89e3\u8fd9\u4e9b\u95ee\u9898\u3002\n\u4f46\u6211\u77e5\u9053\uff0c\u5982\u679c\u6ca1\u6709\u5b89\u5168\u8bc4\u4f30\uff0c\u5c31\u4e0d\u53ef\u80fd\u4fdd\u8bc1\u8fd9\u4e9b\u4e1c\u897f\u7684\u5b89\u5168\uff0c\u4ed6\u603b\u7ed3\u9053\u3002\n\u6838\u5b9e\u6295\u7968\u7684\u603b\u88c1\u739b\u4e3d\u5b89\u00b7\u65bd\u8010\u5fb7(Marian Schneider)\u540c\u610f\u8fd9\u6837\u7684\u6295\u7968\u505a\u6cd5\u6839\u672c\u4e0d\u503c\u5f97\u5192\u9669\uff0c\u56e0\u4e3a\u603b\u7684\u6765\u8bf4\uff0c\u4e92\u8054\u7f51\u4e0d\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u5730\u65b9\uff0c\u5979\u8bf4\u3002\n\u7f51\u4e0a\u4ea4\u6613\u6bcf\u5929\u90fd\u9762\u4e34\u5a01\u80c1\u3002\u5979\u8bf4\uff0c\u5546\u4e1a\u96f6\u552e\u5546\u3001\u7f51\u4e0a\u94f6\u884c\uff0c\u6240\u6709\u90a3\u4e9b\u63d0\u4f9b\u670d\u52a1\u7684\u7ec4\u7ec7\u90fd\u82b1\u8d39\u4e86\u6570\u4ebf\u7f8e\u5143\u6765\u4fdd\u62a4\u4ed6\u4eec\u7684\u7f51\u7edc\uff0c\u4f46\u4ecd\u7136\u6709\u635f\u5931\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5373\u5c06\u7ed3\u675f2016\u5e74\u7684\u9009\u4e3e\uff0c\u5728\u90a3\u6b21\u9009\u4e3e\u4e2d\uff0c\u5b89\u5168\u754c\u7684\u5171\u8bc6\u662f\uff0c\u4e00\u4e2a\u6c11\u65cf\u56fd\u5bb6\u88ad\u51fb\u4e86\u6211\u4eec\uff0c\u5e76\u8bd5\u56fe\u5e72\u9884\u6211\u4eec\u7684\u9009\u4e3e\u3002\n\u56e0\u6b64\uff0c\u4f7f\u7528\u8fd9\u9879\u6280\u672f\u53ef\u80fd\u4f1a\u5bf9\u6c11\u4e3b\u8fdb\u7a0b\u548c\u56fd\u5bb6\u5b89\u5168\u4ea7\u751f\u4e25\u91cd\u5f71\u54cd\uff0c\u5979\u8bf4\u3002\n\u65bd\u8010\u5fb7\u63a5\u7740\u8bf4\uff0c\u4efb\u4f55\u5927\u89c4\u6a21\u91c7\u7528\u4e92\u8054\u7f51\u6295\u7968\u7684\u505a\u6cd5\uff0c\u90fd\u53ea\u4f1a\u62db\u81f4\u574f\u4eba\u518d\u6b21\u653b\u51fb\u6211\u4eec\u7684\u9009\u4e3e\u3002\u8fd9\u5c06\u4f1a\u6709\u4e24\u4e2a\u7ed3\u679c\uff1a\u7b2c\u4e00\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6539\u53d8\u9009\u4e3e\u7684\u7ed3\u679c\uff0c\u4f46\u7b2c\u4e8c\u4e2a\u5f71\u54cd\u662f\uff0c\u8fd9\u5c06\u4f7f\u4eba\u4eec\u5bf9\u9009\u4e3e\u7ed3\u679c\u4ea7\u751f\u4e25\u91cd\u7684\u6000\u7591\u3002\u6211\u4eec\u73b0\u5728\u4e0d\u9700\u8981\u8fd9\u4e2a\u3002\n\u8ba1\u7b97\u673a\u5668\u534f\u4f1a(Association For Computing Machines)\u524d\u4e3b\u5e2d\u82ad\u82ad\u62c9\u00b7\u897f\u8499\u65af(Barbara Simons)\u8bf4\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u6709\u70b9\u50cf\u5438\u8840\u9b3c\uff0c\u5df2\u7ecf\u5b58\u5728\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u800c\u4e14\u4e00\u76f4\u62d2\u7edd\u6b7b\u4ea1\u3002\u957f\u671f\u4ee5\u6765\uff0c\u5979\u4e00\u76f4\u6279\u8bc4\u4e92\u8054\u7f51\u6295\u7968\u4ee5\u53ca\u603b\u4f53\u4e0a\u8fc7\u4e8e\u673a\u68b0\u5316\u7684\u6295\u7968\u7cfb\u7edf\u3002\n\u897f\u8499\u65af\u8bf4\uff0c\u8fd9\u4e2a[\u7f51\u7edc\u6295\u7968]\u7684\u60f3\u6cd5\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\u3002\u5979\u89e3\u91ca\u8bf4\uff0c\u65e9\u572820\u4e16\u7eaa90\u5e74\u4ee3\uff0c\u5979\u5c31\u88ab\u9080\u8bf7\u53c2\u52a0\u4e00\u4e2a\u5173\u4e8e\u7f51\u7edc\u6295\u7968\u7684\u5b66\u4e60\u5c0f\u7ec4\uff0c\u5f53\u65f6\u5979\u63a8\u65ad\u8fd9\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u60f3\u6cd5\u3002&#34\uff1b\u897f\u8499\u65af\u89e3\u91ca\u8bf4\uff0c\u65e9\u572820\u4e16\u7eaa90\u5e74\u4ee3\uff0c\u5979\u5c31\u88ab\u9080\u8bf7\u53c2\u52a0\u4e00\u4e2a\u5173\u4e8e\u7f51\u7edc\u6295\u7968\u7684\u5b66\u4e60\u5c0f\u7ec4\uff0c\u5f53\u65f6\u5979\u63a8\u65ad\u8fd9\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u60f3\u6cd5\u3002\n\u5979\u8865\u5145\u8bf4\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u6709\u5f88\u591a\u5b89\u5168\u7684\u66ff\u4ee3\u65b9\u6848\u3002\u5979\u8bf4\uff0c\u6700\u76f4\u63a5\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u5373\u4f7f\u662f\u5bf9\u6b8b\u75be\u4eba\u793e\u533a\u6765\u8bf4\uff0c\u4e5f\u662f\u90ae\u5bc4\u6295\u7968\u3002\n\u897f\u8499\u65af\u8bf4\uff0c\u8003\u8651\u5230\u75c5\u6bd2\u7684\u5a01\u80c1\uff0c\u90ae\u5bc4\u6295\u7968\u4f3c\u4e4e\u662f\u9009\u6c11\u572811\u6708\u6295\u7968\u7684\u6700\u5b89\u5168\u7684\u65b9\u5f0f\uff0c\u540c\u65f6\u6307\u51fa\uff0c\u7531\u4e8e\u5fc5\u8981\u7684\u8d39\u7528\u548c\u51c6\u5907\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5dde\u90fd\u80fd\u8f6c\u5411\u90ae\u5bc4\u6295\u7968\u3002\n\u5982\u679c\u5b83\u8fd8\u6ca1\u6709\u6210\u7acb\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u4e00\u9879\u91cd\u5927\u7684\u4e8b\u4e1a\u3002\u56e0\u6b64\uff0c\u8fd8\u5fc5\u987b\u628a\u91cd\u70b9\u653e\u5728\u786e\u4fdd\u6295\u7968\u7ad9\u7684\u5b89\u5168\u4e0a\uff0c\u5979\u8bf4\u3002\u8fd9\u9700\u8981\u5927\u91cf\u7684\u8ba1\u5212--\u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6295\u7968\u7ad9\u5de5\u4f5c\u4eba\u5458\u548c\u9009\u6c11\u51c6\u5907\u5927\u7a7a\u95f4\u3001\u53e3\u7f69\u548c\u624b\u5957--\u5e76\u505a\u597d\u51c6\u5907\uff0c\u8fd9\u6837\u4eba\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7528\u62c5\u5fc3\u751f\u75c5\u5c31\u53ef\u4ee5\u53bb\u6295\u7968\u7ad9\u4e86\u3002\n\u5979\u8bf4\uff1a\u6211\u76f8\u4fe1\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f46\u8fd9\u9700\u8981\u5927\u91cf\u7684\u8ba1\u5212\u548c\u8d44\u91d1\uff0c\u6211\u73b0\u5728\u6ca1\u6709\u542c\u5230\u592a\u591a\u5173\u4e8e\u8fd9\u65b9\u9762\u7684\u6d88\u606f\u3002", "note_en": "Government officials have expressed mounting concerns for how the COVID-19 virus could diminish voter turnout during the 2020 presidential election.\n As a partial solution, a handful of states have turned to Internet voting pilot programs: New Jersey, Delaware and West Virginia have all recently launched pilots, most of which are limited in scope and focus mainly on alleviating barriers for disabled and overseas voters.\n However, the computer science community \u2014 long critical of internet voting \u2014 sees the programs as a slippery slope towards a looming security risk.\n David Dill, a computer science professor at Stanford University, is one of the prolific naysayers. Having spent much of his career researching holes in software code, Dill said that there is just simply no way to ensure that devices and apps are free of malware that might manipulate a voter&#39;s choices. Similarly, a hacker from an adversarial foreign government could always theoretically hack their way into these systems and change or manipulate votes.\n &#34;Between your keyboard and your vote going into an electronic ballot box on the other end of the Internet, there are a lot of bad things that could happen,&#34; he said. &#34;This problem is not fixable, at least not in practical terms.&#34;\n Cybersecurity and national security organizations tend to agree with that assessments. A joint statement provided to  Government Technology by the FBI, EAC, NIST and the Department of Homeland Security&#39;s CISA, all warn against the wholesale embrace of such technologies.\n &#34;While there are effective risk management controls to enable electronic ballot delivery and marking, we recommend paper ballot returns as electronic ballot return technologies are high-risk even with controls in place,&#34; the statement reads.\n Many Internet voting pilots use vendor products that company representatives say have been aptly tested, but being certain of such security can be difficult, experts warn.\n The Delaware program uses Democracy Live, a Seattle-based vendor that allows voters to mark and submit their vote from their own devices, including phones and laptops. Democracy Live could not be reached for comment at the writing of this article,\u00a0 but has argued in other media appearances that its cloud-based product had been through a rigorous process of security testing.\n  &#34;Doing a security evaluation is a hard process, and responsible companies don&#39;t make guarantees,&#34; he said. &#34;They don&#39;t say, &#39;This is guaranteed to be secure software.&#39; They will say, &#39;We did the following things, and we didn&#39;t find any problems in the software.&#39; Or, more frequently, &#39;We found these problems with the software and you can mitigate them in the following ways.&#39;&#34;\n &#34;But I know without the security evaluation that it&#39;s not possible to make this stuff secure,&#34; he concluded.\n Marian Schneider, president of Verified Voting, agrees that such voting practices are simply not a risk worth taking because, &#34;in general, the Internet is not a secure place,&#34; she said.\n &#34;There are threats to online transactions every day. Commercial retailers, online banking, all of those organizations that offer their services spend hundreds of millions of dollars protecting their networks and yet still have losses,&#34; she said. &#34;Additionally, we are coming off the 2016 election in which the consensus of the security community is that a nation-state attacked us and attempted to interfere in our election.&#34;\n As a result, use of this technology could have serious implications for the democratic process and national security, she said.\n &#34;Any wholesale adoption of Internet voting is just an invitation to bad actors to attack our elections again,&#34; Schneider went on. &#34;There would be two results of that: No. 1 is that they could potentially change the outcome of the election, but the second impact of that is that it would create serious doubt about the election results. And we don&#39;t need that right now.&#34;\n A little like a vampire, this idea has been around for a long time and refuses to die, said Barbara Simons, former president of the Association for Computing Machinery, who has been a longtime critic of Internet voting, as well as overly mechanized voting systems, generally.\n &#34;This [Internet voting] idea has been around for a very long time,&#34;\u00a0Simons said, explaining that she was originally asked to sit on a study group on Internet voting way back in the 1990s, at which point she deduced that it was a &#34;terrible idea.&#34;\n There are numerous secure alternatives to this idea, she added. The most straightforward alternative, even for the disabled community, is vote-by-mail, she said.\n &#34;Given the threat of the virus, vote-by-mail seems like the safest way for voters to cast their ballots in November,&#34; Simons said, while noting that not\u00a0all states are going to be able to move to vote-by-mail due to the expense and preparation necessary.\n &#34;It&#39;s a major undertaking if it has not already been set up. So there also has to be a focus on making the polling places secure,&#34; she said. &#34;That&#39;s going to require a lot of planning \u2014 we need to have large spaces, masks and gloves for poll workers and voters as well \u2014 and preparations so that people can go to the polls without fear of being sick.&#34;\n &#34;I believe its doable, but it&#39;s going to require a lot of planning and money, and I&#39;m not hearing a lot about that right now,&#34; she said.", "posttime": "2020-05-19 14:53:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8b66\u544a,overshadow,\u5b89\u5168", "title": "\u4e13\u5bb6\u8b66\u544a\u79f0\uff0c\u5728\u7ebf\u6295\u7968\u7684\u98ce\u9669\u63a9\u76d6\u4e86\u597d\u5904", "title_en": "Risks Overshadow Benefits with Online Voting, Experts Warn", "transed": 1, "url": "https://www.govtech.com/security/Risks-Overshadow-Benefits-with-Online-Voting-Experts-Warn.html", "via": "", "real_tags": ["\u8b66\u544a", "\u5b89\u5168"]}, {"category": "", "categoryclass": "", "imagename": "e7f1cf77d53dae841b88deafe93d15a1.png", "infoid": 1002744, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc(SNN)\u7ecf\u5e38\u88ab\u5439\u6367\u4e3a\u63a5\u8fd1\u5927\u8111\u80fd\u6548\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f46\u4eba\u4eec\u5bf9\u8fd9\u5230\u5e95\u662f\u4ec0\u4e48\u610f\u601d\u666e\u904d\u611f\u5230\u56f0\u60d1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4eba\u4eec\u5bf9\u5927\u8111\u7684\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\u5b58\u5728\u5206\u6b67\u3002\n\u4e00\u4e9bSNN\u5b9e\u73b0\u4e0d\u50cf\u5176\u4ed6\u5b9e\u73b0\u90a3\u6837\u50cf\u5927\u8111\u4e00\u6837\u3002\u6839\u636e\u4f60\u4e0e\u8c01\u4ea4\u8c08\uff0cSNN\u8981\u4e48\u8fd8\u5f88\u9065\u8fdc\uff0c\u8981\u4e48\u63a5\u8fd1\u5546\u4e1a\u5316\u3002SNN\u7684\u4e0d\u540c\u5b9a\u4e49\u5bfc\u81f4\u4e86\u4eba\u4eec\u5982\u4f55\u770b\u5f85\u8be5\u884c\u4e1a\u7684\u4e0d\u540c\u770b\u6cd5\u3002\nSynopsys\u77e5\u8bc6\u4ea7\u6743\u6218\u7565\u8425\u9500\u7ecf\u7406\u7f57\u6069\u00b7\u6d1b\u66fc(Ron Lowman)\u8868\u793a\uff1a\u201c\u4e00\u4e9b\u521d\u521b\u516c\u53f8\u6b63\u5728\u5236\u4f5c\u81ea\u5df1\u7684SNN\u3002\u201d\u201c\u5b83\u662f\u7531\u90a3\u4e9b\u5728\u5982\u4f55\u57f9\u8bad\u3001\u4f18\u5316\u548c\u4e3a\u4ed6\u4eec\u7f16\u5199\u8f6f\u4ef6\u65b9\u9762\u6709\u4e13\u4e1a\u77e5\u8bc6\u7684\u4eba\u63a8\u52a8\u7684\u3002\u201d\n\u53e6\u4e00\u65b9\u9762\uff0cFlex Logix\u63a8\u7406\u6280\u672f\u8425\u9500\u7ecf\u7406Vinay Mehta\u8bf4\uff0c\u201cSNN\u6bd4\u5f3a\u5316\u5b66\u4e60\u8d70\u5f97\u66f4\u8fdc\u201d\uff0c\u4ed6\u6307\u7684\u662f\u4e00\u4e2a\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4ecd\u5904\u4e8e\u7814\u7a76\u9636\u6bb5\u7684\u673a\u5668\u5b66\u4e60\u6982\u5ff5\u3002\n\u201c\u795e\u7ecf\u7f51\u7edc\u201d\u7684\u6574\u4e2a\u6982\u5ff5\u90fd\u662f\u57fa\u4e8e\u5bf9\u5927\u8111\u5982\u4f55\u5de5\u4f5c\u8fdb\u884c\u5efa\u6a21\u7684\u5c1d\u8bd5\u3002\u4f46\u662f\u73b0\u5728\u7684\u795e\u7ecf\u7f51\u7edc--\u6bd4\u5982\u4eca\u5929\u975e\u5e38\u6d41\u884c\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc(CNNs)--\u5e76\u4e0d\u9075\u5faa\u5927\u8111\u7684\u8bbe\u8ba1\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4ed6\u4eec\u4f9d\u9760\u77e9\u9635\u4e58\u6cd5\u6765\u7ed3\u5408\u7a81\u89e6\u6743\u91cd\uff0c\u5e76\u4f9d\u9760\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u6765\u8fdb\u884c\u76d1\u7763\u8bad\u7ec3\u3002\n\u4ece\u4e8bSNN\u7814\u7a76\u7684\u4eba\u901a\u5e38\u5c06\u5176\u79f0\u4e3a\u201c\u7ecf\u5178\u201d\u7f51\u7edc\u6216\u201c\u4eba\u5de5\u201d\u795e\u7ecf\u7f51\u7edc(ANN)\u3002\u5c3d\u7ba1\u5982\u6b64\uff0cCEA-Leti\u5148\u8fdb\u6280\u672f\u548c\u7247\u4e0a\u7cfb\u7edf\u5b9e\u9a8c\u5ba4\u8d1f\u8d23\u4ebaAlexandre Valentian\u6307\u51fa\uff0cCNN\u66f4\u591a\u5730\u53cd\u6620\u4e86\u4e00\u79cd\u65b9\u6cd5\u6216\u5e94\u7528\u7c7b\u578b\uff0c\u800cSNN\u5219\u53cd\u6620\u4e86\u4e00\u79cd\u5b9e\u65bd\u3002\u201cCNN\u53ef\u4ee5\u5728SPAKS\u4e2d\u5b9e\u73b0--\u8fd9\u4e0d\u662fCNN\u4e0eSNN\u4e4b\u95f4\u7684\u8f83\u91cf\u3002\u201d\n\u6a21\u4eff\u5927\u8111\uff0cSNN\u7684\u6982\u5ff5\u8d77\u6e90\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5927\u8111\u4f7f\u7528\u5c16\u5cf0\u7535\u4f4d\u6765\u4f20\u9012\u4fe1\u606f\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u662f\uff0c\u4fe1\u606f\u662f\u5982\u4f55\u7f16\u7801\u5230\u8fd9\u4e9b\u5c16\u5cf0\u4e0a\u7684\u3002\u5728\u7814\u7a76\u548c\u5f00\u53d1\u9636\u6bb5\u90fd\u4f7f\u7528\u4e86\u51e0\u79cd\u65b9\u6cd5\u3002\u8fd9\u7c7b\u795e\u7ecf\u7f51\u7edc\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u795e\u7ecf\u5f62\u6001\u7684\u201d\uff0c\u56e0\u4e3a\u5b83\u53cd\u6620\u4e86\u5927\u8111\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u7ecf\u5178\u7f51\u7edc\u4e0d\u662f\u795e\u7ecf\u5f62\u6001\u7684\uff0c\u4f46\u4e00\u4e9bSNN\u6bd4\u5176\u4ed6\u7684\u66f4\u5177\u795e\u7ecf\u5f62\u6001\u3002\u6b63\u5982\u8111\u82af\u7247\u516c\u53f8\u7684\u4e00\u7bc7\u8bba\u6587\u6240\u6307\u51fa\u7684\uff0c\u201c\u2026\u3002\u4eca\u5929\u7684\u6280\u672f\u2026\u3002\u5145\u5176\u91cf\u53ea\u4e0e\u5927\u8111\u7684\u8fd0\u4f5c\u65b9\u5f0f\u6709\u677e\u6563\u7684\u5173\u7cfb\u3002\u201c\u3002\n\u8bb8\u591aSNN\u7684\u60f3\u6cd5\u5728\u5b66\u672f\u673a\u6784\u8fd8\u5904\u4e8e\u63a2\u7d22\u9636\u6bb5\u30022019\u5e74IEDM\u4f1a\u8bae\u4e0a\u7684\u51e0\u7bc7\u8bba\u6587\u6d89\u53ca\u4f7f\u7528\u65b0\u7684\u7535\u8def\u6280\u672f\u5b9e\u73b0SNN\uff0c\u4ee5\u5b9e\u73b0\u66f4\u4f4e\u529f\u8017\u7684\u76ee\u6807\u3002\u4f46\u4e5f\u6709\u5546\u4e1a\u516c\u53f8\u5728\u5f00\u53d1SNN\u3002\u6b63\u5982\u5728\u6700\u8fd1\u7684\u6797\u5229\u6625\u5b63\u5904\u7406\u5668\u5927\u4f1a\u4e0a\u6240\u786e\u8ba4\u7684\u90a3\u6837\uff0c\u82f1\u7279\u5c14\u6b63\u5728\u8fdb\u884c\u4e00\u9879\u4e25\u8083\u7684\u7814\u7a76\u8ba1\u5212\uff0c\u800cBrainChip\u548cGrAI Matter Labs\u6b63\u5728\u51c6\u5907\u5546\u4e1a\u82af\u7247\u3002\u65e9\u671f\u7814\u7a76\u548c\u5546\u4e1a\u53ef\u884c\u6027\u4e4b\u95f4\u8303\u56f4\u5982\u6b64\u4e4b\u5927\u7684\u539f\u56e0\u53cd\u6620\u4e86\u5bf9\u5982\u4f55\u5b9e\u73b0SNN\u7684\u4e00\u7cfb\u5217\u89e3\u91ca\u3002\n\u4e00\u4e9b\u6b63\u5728\u8fdb\u884c\u7684\u9879\u76ee\u6d89\u53ca\u5b57\u9762\u5cf0\u503c\uff0c\u8fd9\u662f\u4e00\u79cd\u7c7b\u4f3c\u7684\u73b0\u8c61\u3002\u4f46\u53e6\u4e00\u4e9b\u4eba\u5c06\u201c\u5c16\u5cf0\u201d\u7684\u6982\u5ff5\u62bd\u8c61\u4e3a\u201c\u4e8b\u4ef6\u201d\u7684\u6982\u5ff5\uff0c\u5e76\u5c06\u5176\u6570\u5b57\u5316\u5730\u5b9e\u73b0\u4e3a\u901a\u8fc7\u7f51\u7edc\u4ece\u4e00\u4e2a\u795e\u7ecf\u5143\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u795e\u7ecf\u5143\u7684\u6570\u636e\u5305\u3002\u90a3\u4e48\uff0c\u9ad8\u7ea7\u6548\u5e94\u5c31\u662f\u4ece\u50cf\u7ecf\u5178CNN\u90a3\u6837\u4e00\u76f4\u6d4b\u91cf\u4e00\u5207\uff0c\u8f6c\u53d8\u4e3a\u53ea\u5904\u7406\u4e8b\u4ef6\u3002\u9884\u8ba1\u4eceSNN\u8282\u7701\u7684\u7535\u529b\u901a\u5e38\u88ab\u8ba4\u4e3a\u4e0e\u5c16\u5cf0\u672c\u8eab\u6709\u5173\uff0c\u4f46\u90e8\u5206\u6536\u76ca\u6765\u81ea\u4e8e\u5904\u7406\u4e8b\u4ef6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u53ea\u6709\u5f53\u6709\u6709\u8da3\u7684\u4e8b\u4ef6\u9700\u8981\u5904\u7406\u65f6\uff0c\u5de5\u4f5c\u624d\u4f1a\u53d1\u751f\u3002\u5426\u5219\uff0c\u4e0d\u505a\u529f(\u6216\u66f4\u5c11\u7684\u529f)\uff0c\u4ece\u800c\u4fdd\u6301\u4f4e\u529f\u7387\u3002\n\u201c\u5982\u679c\u4f60\u6ca1\u6709\u8fbe\u5230(\u795e\u7ecf\u5143\u7684)\u6fc0\u6d3b\u9608\u503c\uff0c\u5c31\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u4e8b\u4ef6\uff0c\u201dBrainChip\u7684\u9996\u5e2d\u8fd0\u8425\u5b98\u7f57\u6770\u00b7\u83b1\u6587\u68ee(Roger Levinson)\u8bf4\u3002\u8fd9\u4e0e\u7ecf\u5178\u7f51\u7edc\u4e2d\u68a6\u5bd0\u4ee5\u6c42\u7684\u9ad8\u5ea6\u7a00\u758f\u6027\u76f8\u5bf9\u5e94\u3002\nSNNs\u7684\u53e6\u4e00\u4e2a\u7279\u5f81\u662f\uff0c\u4e8b\u4ef6\u53ef\u4ee5\u5174\u594b\u6216\u6291\u5236\u795e\u7ecf\u5143\u3002\u7136\u540e\uff0c\u4e8b\u4ef6\u53ef\u4ee5\u76f8\u4e92\u7ade\u4e89\uff0c\u4e00\u4e9b\u4e8b\u4ef6\u5177\u6709\u5174\u594b\u4f5c\u7528\uff0c\u800c\u53e6\u4e00\u4e9b\u4e8b\u4ef6\u5219\u5177\u6709\u6291\u5236\u4f5c\u7528\u3002\u5728\u4f20\u7edf\u7f51\u7edc\u4e2d\uff0c\u8d1f\u6743\u91cd\u53ef\u4ee5\u964d\u4f4e\u7ed3\u679c\u6fc0\u6d3b\u7684\u5927\u5c0f\uff0c\u4f46\u8fd9\u66f4\u591a\u662f\u6b63\u5728\u8bc4\u4f30\u7684\u89c6\u9891\u5e27(\u6216\u5176\u4ed6\u6570\u636e\u96c6)\u7684\u9759\u6001\u8868\u793a\uff0c\u800c\u4e0d\u662f\u4e8b\u4ef6\u5bf9\u7ed3\u679c\u7684\u63a8\u52a8\u548c\u62c9\u52a8\u3002\n\u5728\u5c16\u5cf0\u4e2d\u7f16\u7801\u503cSNN\u5b9e\u73b0\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u4e4b\u4e00\u4e0e\u6240\u8c13\u7684\u201c\u7f16\u7801\u201d\u6709\u5173-\u5982\u4f55\u5c06\u4e00\u4e2a\u503c\u8f6c\u6362\u6210\u5c16\u5cf0\u6d41\u3002\u867d\u7136\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u4f3c\u4e4e\u6709\u4e24\u79cd\u65b9\u6cd5\u4e3b\u5bfc\u4e86\u8bb8\u591a\u8ba8\u8bba\uff1a\u901f\u7387\u7f16\u7801\u548c\u65f6\u95f4\u7f16\u7801\u3002\n\u901f\u7387\u7f16\u7801\u91c7\u7528\u4e00\u4e2a\u503c\uff0c\u5e76\u5728\u8be5\u503c\u7684\u6301\u7eed\u65f6\u95f4\u5185\u5c06\u5176\u8f6c\u6362\u4e3a\u6052\u5b9a\u5c16\u5cf0\u9891\u7387\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u662f\u53ef\u4ee5\u4f7f\u7528\u7ecf\u5178\u7684\u8bad\u7ec3\u6280\u672f\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u503c\u8f6c\u7801\u7528\u4e8eSNN\u63a8\u7406\u5f15\u64ce\u3002\u7ecf\u5178\u7f51\u7edc\u4f7f\u7528\u5927\u91cf\u7684\u4e58\u6cd5\uff0c\u8fd9\u662f\u80fd\u91cf\u5bc6\u96c6\u578b\u7684\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5c16\u5cf0\u662f\u7b80\u5355\u7684\u7d2f\u52a0\uff0c\u4e0d\u9700\u8981\u4e58\u6cd5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e00\u6b21\u5c16\u5cf0\u90fd\u4f1a\u5bfc\u81f4\u7a81\u89e6\u6743\u91cd\u67e5\u627e\uff0c\u8fd9\u4e5f\u4f1a\u6d88\u8017\u7535\u529b\uff0c\u4fc3\u4f7fValentian\u8b66\u544a\u8bf4\uff0c\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u8fd9\u79cd\u65b9\u6cd5\u7684\u529f\u7387\u662f\u5426\u66f4\u4f4e\u3002\n\u4e00\u4e9b\u4eba\u8bf4\u65f6\u95f4\u7f16\u7801\u66f4\u63a5\u8fd1\u5927\u8111\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u5c3d\u7ba1\u5bf9\u6b64\u6709\u4e0d\u540c\u7684\u770b\u6cd5\uff0c\u4e00\u4e9b\u4eba\u8bf4\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u4f8b\u5b50\u662f\u8fd9\u6837\u7684\uff1a\u201c\u5b83\u5b9e\u9645\u4e0a\u5728\u5927\u8111\u4e2d\u5e76\u4e0d\u5e38\u89c1\uff0c\u201dGrAI Matter\u7684\u9996\u5e2d\u79d1\u5b66\u5b98\u4e54\u7eb3\u838e\u00b7\u5854\u666e\u68ee(Jonatha Tapson)\u8bf4\u3002\u732b\u5934\u9e70\u7684\u8033\u6735\u5c31\u662f\u4f7f\u7528\u5b83\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u201c\u5b83\u4eec\u5229\u7528\u542c\u89c9\u5728\u591c\u95f4\u6355\u730e\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\u65b9\u5411\u654f\u611f\u5ea6\u5fc5\u987b\u975e\u5e38\u9ad8\u3002\u201d\u4e0d\u662f\u7528\u5c16\u5cf0\u9891\u7387\u6765\u8868\u793a\u503c\uff0c\u800c\u662f\u5c06\u8be5\u503c\u7f16\u7801\u4e3a\u5c16\u5cf0\u4e4b\u95f4\u7684\u5ef6\u8fdf\u3002\u7136\u540e\uff0c\u5c16\u5cf0\u4ee3\u8868\u4e8b\u4ef6\uff0c\u76ee\u6807\u662f\u5728\u5c16\u5cf0\u6d41\u4e2d\u8bc6\u522b\u6709\u610f\u4e49\u7684\u6a21\u5f0f\u3002\n\u7136\u800c\uff0c\u4e00\u4e2a\u4e3b\u8981\u7684\u6311\u6218\u662f\u8bad\u7ec3\uff0c\u56e0\u4e3a\u4f20\u7edf\u7684\u8bad\u7ec3\u7ed3\u679c\u4e0d\u80fd\u8f6c\u7801\u6210\u8fd9\u79cd\u7c7b\u578b\u7684SNN\u3002\u6ca1\u6709\u5bb9\u6613\u83b7\u5f97\u7684\u7a57\u5e8f\u5217\u7684\u5bfc\u6570\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u8fdb\u884c\u8bad\u7ec3\u3002\u5854\u666e\u68ee\u8bf4\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u201c\u65f6\u95f4\u7f16\u7801\u5bf9\u7535\u5b50\u8bbe\u5907\u6765\u8bf4\u662f\u53ef\u6015\u7684\u3002\u8fd9\u4f7f\u5f97\u5f88\u96be\u77e5\u9053\u4e00\u4e2a\u8ba1\u7b97\u662f\u5426\u5b8c\u6210\uff0c\u800c\u4e14\u901f\u5ea6\u975e\u5e38\u6162\u3002\u201c\u3002\n\u5f53\u7531\u751f\u6210\u65f6\u95f4\u7f16\u7801\u6570\u636e\u7684\u4f20\u611f\u5668(\u5373\u57fa\u4e8e\u4e8b\u4ef6\u7684\u4f20\u611f\u5668)\u9a71\u52a8\u65f6\uff0c\u65f6\u95f4\u7f16\u7801\u7684SNN\u53ef\u80fd\u662f\u6700\u6709\u6548\u7684\u3002\u52a8\u6001\u89c6\u89c9\u4f20\u611f\u5668(DVS)\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u5b83\u4eec\u4e0d\u4f1a\u5728\u6bcf\u79d2\u5e27\u6570\u7684\u57fa\u7840\u4e0a\u751f\u6210\u5b8c\u6574\u7684\u6570\u636e\u5e27\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6bcf\u4e2a\u50cf\u7d20\u5728\u5176\u7167\u660e\u53d8\u5316\u8d85\u8fc7\u67d0\u4e2a\u9608\u503c\u65f6\u8fdb\u884c\u62a5\u544a\u3002\u8fd9\u4f1a\u751f\u6210\u4e00\u4e2a\u201c\u66f4\u6539\u201d\u4e8b\u4ef6\uff0c\u7136\u540e\u901a\u8fc7\u7f51\u7edc\u4f20\u64ad\u3002Valentian\u8bf4\uff0c\u8fd9\u4e9b\u5728AR/VR\u5e94\u7528\u4e2d\u4e5f\u7279\u522b\u6709\u7528\uff0c\u6bd4\u5982\u201c\u89c6\u89c9\u91cc\u7a0b\u8ba1\u201d\uff0c\u90a3\u91cc\u7684\u60ef\u6027\u6d4b\u91cf\u5355\u5143\u592a\u6162\u4e86\u3002\n\u65f6\u95f4\u7f16\u7801\u7684SNN\u53ef\u80fd\u9002\u7528\u4e8e\u6bd4\u6211\u4eec\u5728\u7ecf\u5178\u7f51\u7edc\u4e2d\u770b\u5230\u768450\u5230100(\u6216\u66f4\u591a)\u5c42\u66f4\u6d45\u7684\u7f51\u7edc\u3002\u201c\u89c6\u89c9\u76ae\u5c42\u53ea\u6709\u516d\u5c42\u6df1\uff0c\u5c3d\u7ba1\u8fd9\u4e2a\u7cfb\u7edf\u4e0d\u662f\u7eaf\u7cb9\u7684\u524d\u9988\uff0c\u201dValentian\u8bf4\u3002\u201c\u4e5f\u6709\u4e00\u4e9b\u53cd\u9988\u3002\u201d\u5c3d\u7ba1\u5982\u6b64\uff0c\u4ed6\u6307\u51fa\uff0c\u8fd9\u91cc\u7f3a\u5c11\u7684\u662f\u4e00\u4e2a\u6740\u624b\u7ea7\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u5c06\u63d0\u4f9b\u63a8\u52a8\u65f6\u95f4\u7f16\u7801\u6240\u9700\u7684\u80fd\u91cf\u548c\u8d44\u91d1\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0cBrainChip\u4ece\u901f\u7387\u7f16\u7801\u5f00\u59cb\uff0c\u4f46\u8ba4\u4e3a\u8fd9\u5728\u5546\u4e1a\u4e0a\u662f\u4e0d\u53ef\u884c\u7684\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5b83\u4f7f\u7528\u79e9\u7f16\u7801(\u6216\u79e9\u5e8f\u7801)\uff0c\u5b83\u4f7f\u7528\u5230\u8fbe\u795e\u7ecf\u5143\u7684\u5c16\u5cf0\u7684\u5230\u8fbe\u987a\u5e8f(\u800c\u4e0d\u662f\u5b57\u9762\u5b9a\u65f6)\u4f5c\u4e3a\u4ee3\u7801\u3002\u8fd9\u662f\u4e00\u79cd\u9762\u5411\u6a21\u5f0f\u7684\u65b9\u6cd5\uff0c\u6309\u89c4\u5b9a\u987a\u5e8f\u5230\u8fbe(\u8fde\u540c\u7a81\u89e6\u6743\u91cd)\u523a\u6fc0\u7684\u53cd\u5e94\u6700\u5927\uff0c\u800c\u6309\u5176\u4ed6\u987a\u5e8f\u5230\u8fbe\u7684\u523a\u6fc0\u8f83\u5c11\u3002\n\u6487\u5f00\u6240\u6709\u8fd9\u4e9b\u7f16\u7801\u65b9\u6cd5\u4e0d\u8c08\uff0cGrAI Matter\u4f7f\u7528\u66f4\u76f4\u63a5\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5728\u5373\u5c06\u63a8\u51fa\u7684\u82af\u7247\u4e2d\u5c06\u6570\u503c\u76f4\u63a5\u7f16\u7801\u4e3aGrAI One\u6216BFloat16\u4e2d\u7684\u6570\u5b57-8\u4f4d\u621616\u4f4d\u6574\u6570\u3002\u8fd9\u662f\u4e0e\u5176\u4ed6\u795e\u7ecf\u5f62\u6001\u67b6\u6784\u7684\u5173\u952e\u4e0d\u540c\uff0c\u5176\u4ed6\u795e\u7ecf\u5f62\u6001\u67b6\u6784\u5fc5\u987b\u4f7f\u7528\u901f\u7387\u3001\u4eba\u53e3\u3001\u65f6\u95f4\u6216\u96c6\u5408\u4ee3\u7801\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\uff0c\u4f46\u5b83\u4eec\u6548\u7387\u4e0d\u9ad8\u3002\u201c\u5854\u666e\u68ee\u8bf4\u3002\n\u795e\u7ecf\u5143SNN\u795e\u7ecf\u5143\u901a\u5e38\u4ee5\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u5b9e\u73b0\u3002\u8fd9\u4e9b\u65b9\u6cd5\u662f\u7531\u6a21\u62df\u5b9e\u73b0\u9a71\u52a8\u7684\uff0c\u5c3d\u7ba1\u5b83\u4eec\u53ef\u4ee5\u62bd\u8c61\u4e3a\u6570\u5b57\u7b49\u6548\u7269\u3002Arteris IP\u7814\u7a76\u5458\u517c\u9996\u5e2d\u67b6\u6784\u5e08\u8fc8\u514b\u5c14\u00b7\u5f17\u5170\u514b(Michael Frank)\u5c06\u6b64\u79f0\u4e3a\u201c\u4eff\u771f\u201d\u3002\u4ed6\u6307\u51fa\u4e86\u6a21\u62df\u5b9e\u73b0\u9762\u4e34\u7684\u51e0\u4e2a\u6311\u6218\uff1a\u201c\u5bf9\u4e8e\u6a21\u62df\uff0c\u60a8\u9700\u8981\u6839\u636e\u7279\u5b9a\u82af\u7247\u5b9a\u5236\u6a21\u578b\u4ee5\u8fdb\u884c\u63a8\u65ad\u3002\u6ca1\u6709\u4e24\u4e2a\u6676\u4f53\u7ba1\u662f\u76f8\u540c\u7684\u3002\u57287\u7eb3\u7c73\u5904\uff0c\u4f60\u4e0d\u80fd\u505a\u6a21\u62df\u3002\u201c\u3002\n\u5854\u666e\u68ee\u5bf9\u6b64\u8868\u793a\u8d5e\u540c\u3002\u201c\u5bf9\u4e8e\u5927\u578b\u8d5b\u9053\uff0c\u4f60\u9700\u8981\u6570\u5b57\u5316\uff0c\u201d\u4ed6\u8bf4\u3002\n\u8fd9\u4e24\u79cd\u62bd\u8c61\u7684\u795e\u7ecf\u65b9\u6cd5\u80cc\u540e\u7684\u60f3\u6cd5\u662f\uff0c\u795e\u7ecf\u5143\u901a\u8fc7\u7d2f\u79ef\u5c16\u5cf0\u6765\u8bc4\u4f30\u4fe1\u53f7\u3002\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u79f0\u4e3a\u201c\u96c6\u6210\u5e76\u6fc0\u53d1\u201d(IF)\u3002\u6bcf\u4e2a\u5c16\u5cf0\u5728\u795e\u7ecf\u5143\u4e2d\u7d2f\u79ef\uff0c\u76f4\u5230\u8fbe\u5230\u9608\u503c\uff0c\u6b64\u65f6\u795e\u7ecf\u5143\u6fc0\u53d1\u8f93\u51fa\u5c16\u5cf0-\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u521b\u5efa\u4e00\u4e2a\u5728\u7f51\u7edc\u4e2d\u5411\u4e0b\u6e38\u4f20\u64ad\u7684\u4e8b\u4ef6(\u81f3\u5c11\u5bf9\u4e8e\u524d\u9988\u914d\u7f6e)\u3002\u8bb8\u591a\u6b63\u5728\u8fdb\u884c\u7684\u5b66\u672f\u9879\u76ee\u5c06\u5176\u4f5c\u4e3a\u5b57\u9762\u6a21\u62df\u7535\u8def\u6765\u5b9e\u73b0\uff0c\u5e76\u4e14\u5728\u64cd\u4f5c\u4e0a\u5b83\u5728\u54f2\u5b66\u4e0a\u7c7b\u4f3c\u4e8esigma-Delta\u8c03\u5236\u3002\n\u8fd9\u91cc\u7684\u6311\u6218\u662f\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u65f6\u95f4\u7f16\u7801\u800c\u8a00\uff0c\u6a21\u5f0f\u53ef\u80fd\u4f1a\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u4e0d\u7ecf\u610f\u5730\u51fa\u73b0\u3002\u5728\u65f6\u95f4\u4e0a\u5206\u5f00\u7684\u4e24\u4e2a\u4e8b\u4ef6\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u5355\u4e00\u7684\u6a21\u5f0f\uff0c\u56e0\u4e3a\u968f\u7740\u65b0\u7684\u5c16\u5cf0\u7684\u5230\u6765\uff0c\u65e9\u671f\u7684\u79ef\u7d2f\u4ecd\u7136\u5b58\u5728\u3002\n\u4e3a\u4e86\u5728\u65b0\u7684\u7ed3\u679c\u5230\u6765\u65f6\u4e2d\u548c\u65e7\u7684\u201c\u8fc7\u65f6\u7684\u201d\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u6cc4\u6f0f\u79ef\u5206\u5e76\u70b9\u706b\u201d(LIF)\u7535\u8def\u3002\u8fd9\u610f\u5473\u7740\u79ef\u7d2f\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u9010\u6e10\u6d88\u6563\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4e8b\u4ef6\u4e4b\u95f4\u6709\u8db3\u591f\u7684\u65f6\u95f4\uff0c\u79ef\u7d2f\u5c31\u4f1a\u4ece\u8f83\u4f4e\u7684\u6c34\u5e73\u91cd\u65b0\u5f00\u59cb\u3002\n\u53e6\u4e00\u4e2a\u53ef\u4ee5\u9006\u8f6c\u79ef\u7d2f\u7684\u56e0\u7d20\u662f\u6291\u5236\u4e8b\u4ef6\u3002\u79ef\u7d2f\u5047\u5b9a\u4f1a\u589e\u52a0\u79ef\u7d2f\u7684\u5174\u594b\u6027\u4e8b\u4ef6\uff0c\u4f46\u6291\u5236\u6027\u4e8b\u4ef6\u4f1a\u79ef\u7d2f\u8d1f\u503c\uff0c\u4ece\u800c\u964d\u4f4e\u79ef\u7d2f\u7684\u6c34\u5e73\u3002\n\u56fe1\uff1aIF\u548cLIF\u795e\u7ecf\u5143\u884c\u4e3a\uff0c\u4e3a\u8bf4\u660e\u800c\u7406\u60f3\u5316\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u6cc4\u6f0f\uff0c\u4ece\u672a\u8fbe\u5230\u9608\u503c\u3002\u795e\u7ecf\u5143\u4e5f\u53ef\u80fd\u6709\u4e00\u4e2a\u4e0d\u5e94\u671f\uff0c\u5728\u6b64\u671f\u95f4\u5b83\u4eec\u53ef\u4ee5\u79ef\u7d2f\uff0c\u4f46\u4e0d\u80fd\u71c3\u70e7\u3002\u6d88\u606f\u6765\u6e90\uff1a\u5e03\u83b1\u6069\u00b7\u83ab\u8036(Bryon Moyer)/\u534a\u5bfc\u4f53\u5de5\u7a0b\u3002\nSynapses Synapse\u7684\u5b9e\u73b0\u5c06\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u7279\u5b9a\u7f51\u7edc\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u5bf9\u4e8e\u6a21\u62df\u5b9e\u73b0\uff0c\u5c16\u5cf0\u5c06\u5bfc\u81f4\u4e00\u5b9a\u91cf\u7684\u7535\u6d41\u6ce8\u5165\u6216\u6d41\u51fa\u795e\u7ecf\u5143\u3002\u7535\u6d41\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u7a81\u89e6\u7684\u91cd\u91cf\u3002\nCEA-Leti\u7684\u4e00\u4e2a\u56e2\u961f\u57282019\u5e74IEDM\u4f1a\u8bae\u4e0a\u63d0\u4ea4\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u8ba8\u8bba\u4e86\u4f7f\u7528RRAM\u7684\u6a21\u62dfSNN\u3002\u867d\u7136RRAM\u5df2\u7ecf\u5728\u7ecf\u5178\u7f51\u7edc\u4e2d\u7528\u4f5c\u5b9e\u73b0\u4e58\u6cd5\u7d2f\u52a0\u51fd\u6570\u7684\u5185\u5b58\u4e2d\u8ba1\u7b97\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f46\u5b83\u5728\u8fd9\u91cc\u7684\u7528\u6cd5\u662f\u4e0d\u540c\u7684\u3002\u4f7f\u75288\u4e2a\u5355\u5143\uff0c\u6bcf\u4e2a\u5355\u51434\u4e2a\u7528\u4e8e\u6fc0\u52b1\u548c\u6291\u5236\uff0c0\u52304\u4e2a\u7535\u963b\u5668\u7684\u4efb\u4f55\u4f4d\u7f6e\u90fd\u88ab\u7f16\u7a0b\u4e3a\u4f4e\u7535\u963b\u72b6\u6001\u3002\u4f4e\u7535\u963b\u610f\u5473\u7740\u66f4\u5927\u7684\u7535\u6d41\uff0c\u56e0\u6b64\u91cd\u91cf\u66f4\u5927\u3002\u5904\u4e8e\u4f4e\u963b\u72b6\u6001\u7684\u7ec6\u80de\u8d8a\u591a\uff0c\u6574\u4f53\u7a81\u89e6\u7535\u6d41\u5c31\u8d8a\u5927\u3002\u4e0b\u56fe\u663e\u793a\u4e86Leti Synapse\u7684\u8bbe\u8ba1\u3002\n\u56fe2\uff1aLETI\u7684synapse\u5b9e\u73b0\u3002\u201cHRS\u201d\u4ee3\u8868\u201c\u9ad8\u963b\u72b6\u6001\u201d\uff0c\u201cLRS\u201d\u4ee3\u8868\u201c\u4f4e\u963b\u72b6\u6001\u201d\u3002\u6d88\u606f\u6765\u6e90\uff1aCEA-Leti\u3002\n\u8fd9\u4e9b\u5355\u5143\u7684\u9635\u5217\u5982\u56fe3\u6240\u793a\uff0c\u6bcf\u4e2a\u7a81\u89e6\u90fd\u6709\u81ea\u5df1\u7684\u5b57\u7ebf\uff0c\u7535\u6d41\u901a\u8fc7\u4f4d\u7ebf\u611f\u5e94\u3002\n\u7535\u6d41\u88ab\u52a0\u5230\u795e\u7ecf\u5143\u4e2d\uff0c\u5982\u56fe4\u6240\u793a\u3002\u5f53\u819c\u7535\u538b\u968f\u6ce8\u5165\u7535\u6d41\u53d8\u5316\u65f6\uff0c\u7535\u5bb9\u5668\u8d77\u84c4\u7535\u6c60\u7684\u4f5c\u7528\u3002\u8bf7\u6ce8\u610f\uff0c\u6709\u6b63\u9608\u503c\u548c\u8d1f\u9608\u503c\uff0c\u8fd9\u610f\u5473\u7740\u795e\u7ecf\u5143\u53ef\u4ee5\u6fc0\u53d1\u5174\u594b\u5c16\u5cf0\u6216\u6291\u5236\u5c16\u5cf0\u3002\n\u5728\u6570\u5b57\u5b9e\u73b0\u4e2d\uff0c\u5c16\u5cf0\u7684\u6982\u5ff5\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u4ecd\u7136\u9700\u8981\u4e58\u6cd5\u6765\u6309\u7a81\u89e6\u6743\u91cd\u7f29\u653e\u4f20\u5165\u7684\u5c16\u5cf0\u3002GrAI Matter\u7684\u65b9\u6cd5\u5982\u56fe5\u6240\u793a\u3002\nNOC\u5728\u7535\u8def\u4e2d\u5bf9\u4e8e\u6570\u5b57SNN\u4eff\u771f\uff0c\u5c16\u5cf0\u7684\u8def\u7531\u901a\u5e38\u901a\u8fc7\u7247\u4e0a\u7f51\u7edc(NOC)\u8fdb\u884c\u3002\u7247\u4e0a\u7f51\u7edc(NoC)\u5728\u590d\u6742\u7684\u7247\u4e0a\u7cfb\u7edf(SoC)\u4e2d\u5f88\u5e38\u89c1\uff0c\u4f46\u8fd9\u4e9b\u7f51\u7edc\u901a\u5e38\u627f\u8f7d\u5927\u91cf\u6709\u6548\u8d1f\u8f7d\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5cf0\u503c\u6570\u636e\u975e\u5e38\u5c0f\u3002\u4e8b\u5b9e\u4e0a\uff0cArteris IP\u7684\u5f17\u5170\u514b\u8bf4\uff0c\u6570\u636e\u5305\u62a5\u5934\u53ef\u80fd\u6bd4\u6709\u6548\u8f7d\u8377\u672c\u8eab\u66f4\u957f\u3002\n\u53ef\u4ee5\u5229\u7528\u8bc6\u522b\u6807\u7b7e\u5c06\u5206\u7ec4\u5e7f\u64ad\u5230\u76ee\u7684\u795e\u7ecf\u5143\u3002\u7136\u540e\uff0c\u63a5\u6536\u795e\u7ecf\u5143\u5c31\u4f1a\u77e5\u9053\u8981\u6ce8\u610f\u54ea\u4e2a\u6807\u7b7e\uff0c\u4ece\u800c\u4ea7\u751f\u591a\u64ad\u7684\u6548\u679c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5c16\u5cf0\u4fe1\u53f7\u5230\u8fbe\u9884\u5b9a\u7684\u795e\u7ecf\u5143\u8fdb\u884c\u5904\u7406\uff0c\u800c\u5176\u4ed6\u795e\u7ecf\u5143\u5219\u5ffd\u7565\u5b83\u4eec\u3002\u8fd9\u4e3a\u795e\u7ecf\u5143\u7684\u8f93\u5165\u7aef\u63d0\u4f9b\u4e86\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u800c\u8f93\u51fa\u7aef\u5219\u5177\u6709\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\u3002\n\u5f17\u5170\u514b\u8868\u793a\uff0c\u7f51\u7edc\u4e0a\u5e94\u8be5\u4e0d\u4f1a\u51fa\u73b0\u51b2\u7a81\u95ee\u9898\u3002\u4f20\u611f\u5668\u6570\u636e\u4ee5\u6bcf\u79d2\u7ea6500\u4e2a\u6837\u672c\u7684\u901f\u7387\u751f\u6210\uff0c\u800c\u7f51\u7edc\u7684\u65f6\u949f\u9891\u7387\u4e3a\u6570\u767e\u5146\u8d6b\u3002\u8fd9\u4e3a\u5206\u65f6\u6570\u636e\u7559\u4e0b\u4e86\u5f88\u5927\u7684\u7a7a\u95f4\uff0c\u56e0\u6b64\u5355\u4e2a\u5cf0\u503c\u7684\u4ea4\u4ed8\u53ef\u80fd\u770b\u8d77\u6765\u662f\u5e76\u53d1\u7684\u3002\u5f17\u5170\u514b\u6307\u51fa\uff0c\u5982\u679c\u51b2\u7a81\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u5c06\u7f51\u7edc\u5212\u5206\u4e3a\u57df\uff0c\u4ee5\u51cf\u5c11\u5176\u5f71\u54cd\u3002\n\u5728\u8fd9\u65b9\u9762\uff0c\u65f6\u673a\u4e5f\u8d77\u5230\u4e86\u4e00\u5b9a\u7684\u4f5c\u7528\u3002\u5f17\u5170\u514b\u6307\u51fa\uff0c\u82f1\u7279\u5c14\u7684Loihi\u7f51\u7edc\u662f\u5f02\u6b65\u7684\u3002\u5982\u679c\u4f7f\u7528\u540c\u6b65\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u5927\u578b\u7f51\u7edc\u6765\u8bf4\u53ef\u80fd\u592a\u9ad8\u4e86\u3002\n\u901a\u8fc7\u56de\u987e\u51e0\u4e2a\u8f83\u7a81\u51fa\u7684\u9879\u76ee\uff0c\u8bf4\u660e\u4e86\u5b9e\u73b0SNN\u7684\u5404\u79cd\u65b9\u6cd5\u7684\u8303\u56f4\u3002\u5b66\u672f\u673a\u6784\u548c\u5176\u4ed6\u5546\u4e1a\u516c\u53f8\u53ef\u80fd\u8fd8\u6709\u66f4\u591a\u7684\u9879\u76ee\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u6240\u4ee5\u8fd9\u4efd\u6e05\u5355\u7edd\u4e0d\u4f1a\u662f\u8be6\u5c3d\u7684\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86CEA-Leti\u4e00\u76f4\u5728\u505a\u7684\u4e00\u4e9b\u4e8b\u60c5\u3002\u4ed6\u4eec\u7684IEDM\u8bba\u6587\u58f0\u79f0\uff0c\u8fd9\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528\u5c16\u5cf0\u3001\u6a21\u62df\u795e\u7ecf\u5143\u548cRRAM\u7a81\u89e6\u5b9e\u73b0\u5168\u7f51\u7edc\u3002\u8fd9\u662f\u4e00\u4e2a\u5355\u5c42\u3001\u5168\u8fde\u63a5\u7684\u7f51\u7edc\uff0c\u670910\u4e2a\u8f93\u51fa\u795e\u7ecf\u5143\uff0c\u5bf9\u5e94\u4e8e\u7528\u4e8eMNIST\u56fe\u50cf\u5206\u7c7b\u768410\u4e2a\u7c7b\u522b\u3002\u5f53\u6700\u9ad8\u5c16\u5cf0\u8f93\u51fa\u548c\u6b21\u9ad8\u5c16\u5cf0\u8f93\u51fa\u4e4b\u95f4\u7684\u5dee\u503c\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u63a8\u65ad\u88ab\u8ba4\u4e3a\u662f\u5b8c\u6210\u7684\u3002\u4ed6\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u8fd9\u4e0e\u7ecf\u5178\u7684tanh\u6d3b\u5316\u51fd\u6570\u4e4b\u95f4\u7684\u7b49\u4ef7\u6027\u3002\nBrainChip\u5177\u6709\u5168\u6570\u5b57\u5b9e\u73b0\uff0c\u8fd9\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u4efb\u4f55CMOS\u5de5\u827a\u4e0a\u5b9e\u73b0(\u4e0e\u6a21\u62df\u4e0d\u540c)\u3002\u56fe6\u663e\u793a\u4e86\u5176\u4f53\u7cfb\u7ed3\u6784\u7684\u6982\u5ff5\u6027\u89c6\u56fe\u3002\n\u56fe6\uff1aBrainChip\u7684\u67b6\u6784\u3002\u963f\u57fa\u8fbe\u9635\u5217\u662f\u6982\u5ff5\u6027\u7684\u3002\u5b83\u6ca1\u6709\u53cd\u6620NPU\u7684\u771f\u5b9e\u6570\u91cf\u548c\u5b89\u6392\u3002\u6765\u6e90\uff1aBrainChip\n\u795e\u7ecf\u7ed3\u6784\u5b8c\u5168\u53ef\u9488\u5bf9\u4e0d\u540c\u7684\u5e94\u7528\u8fdb\u884c\u914d\u7f6e\u3002\u9635\u5217\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u56db\u4e2a\u795e\u7ecf\u5904\u7406\u5355\u5143(NPU)\uff0c\u6bcf\u4e2aNPU\u53ef\u4ee5\u914d\u7f6e\u4e3a\u57fa\u4e8e\u4e8b\u4ef6\u7684\u5377\u79ef(\u652f\u6301\u6807\u51c6\u5377\u79ef\u6216\u6df1\u5ea6\u5377\u79ef)\u6216\u5176\u4ed6\u914d\u7f6e\uff0c\u5305\u62ec\u5b8c\u5168\u8fde\u63a5\u3002\u4e8b\u4ef6\u5728\u7f51\u7edc\u4e0a\u4ee5\u6570\u636e\u5305\u7684\u5f62\u5f0f\u4f20\u8f93\u3002\n\u867d\u7136NPU\u7684\u7ec6\u8282\u6216\u56fe\u50cf\u4e0d\u53ef\u7528\uff0c\u4f46BrainChip\u786e\u5b9e\u8fdb\u4e00\u6b65\u89e3\u91ca\u8bf4\uff0c\u6bcf\u4e2aNPU\u90fd\u6709\u6570\u5b57\u903b\u8f91\u548cSRAM\uff0c\u63d0\u4f9b\u4e86\u67d0\u79cd\u5185\u5b58\u4e2d\u5904\u7406\u7684\u80fd\u529b\uff0c\u4f46\u6ca1\u6709\u4f7f\u7528\u6a21\u62df\u5185\u5b58\u7684\u65b9\u6cd5\u3002NPU\u5305\u542b\u5b9e\u73b0\u795e\u7ecf\u5143\u548c\u7a81\u89e6\u7684\u516b\u4e2a\u795e\u7ecf\u5904\u7406\u5f15\u64ce\u3002\u5f53\u8fdb\u5165\u795e\u7ecf\u5143\u65f6\uff0c\u6bcf\u4e2a\u4e8b\u4ef6\u90fd\u4e58\u4ee5\u7a81\u89e6\u6743\u91cd\u3002\n\u8be5\u516c\u53f8\u6307\u51fa\uff0c\u5b83\u4f7f\u7528\u4e8b\u4ef6\u57df\u5377\u79ef\u5141\u8bb8\u5b83\u4f7f\u7528IF\u795e\u7ecf\u5143\uff0c\u800c\u4e0d\u662fLIF\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u4ea7\u751f\u7684\u786c\u4ef6\u8981\u7b80\u5355\u5f97\u591a\u3002\u4e3a\u4e86\u5904\u7406\u6389\u843d\u7684\u5c16\u5cf0\u4ea7\u751f\u65e0\u610f\u7684\u6a21\u5f0f\u7684\u95ee\u9898\uff0cBrainChip\u5bf9\u65f6\u95f4\u8fdb\u884c\u5e27\u5904\u7406\uff0c\u8fd9\u6837\uff0c\u4e00\u65e6\u8be5\u5e27\u5b8c\u6210\uff0c\u968f\u540e\u7684\u5c16\u5cf0\u5c06\u91cd\u65b0\u5f00\u59cb\u3002\n\u57f9\u8bad\u662f\u8be5\u516c\u53f8\u4e0d\u592a\u8c08\u8bba\u7684\u8bdd\u9898\u3002\u5b83\u5c06\u57f9\u8bad\u79f0\u4e3a\u201c\u534a\u76d1\u7763\u201d\u3002BrainChip\u7684\u4e13\u5229\u5b66\u4e60\u7b97\u6cd5\u57fa\u4e8e\u4e00\u79cd\u88ab\u79f0\u4e3a\u5c16\u5cf0\u65f6\u95f4\u76f8\u5173\u53ef\u5851\u6027(STDP)\u7684\u8bad\u7ec3\u6982\u5ff5\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5f3a\u5316\u5b66\u4e60\u6982\u5ff5\u3002\u5b83\u4ee5\u524d\u9988\u7684\u65b9\u5f0f\u4f7f\u7528\u5b8c\u5168\u8fde\u63a5\u7684\u5c42\u8fdb\u884c\u8bad\u7ec3\uff0c\u5b83\u8bf4\u8fd9\u6bd4\u5178\u578b\u7684\u7ecf\u5178\u7f51\u7edc\u5feb\u4e86\u51e0\u4e2a\u6570\u91cf\u7ea7\u3002\u8be5\u516c\u53f8\u8fd8\u5728\u4e3a\u5176\u4e0b\u4e00\u4ee3\u4f53\u7cfb\u7ed3\u6784\u5f00\u53d1\u65e0\u76d1\u7763\u5b66\u4e60-\u5373\u5728\u4e0d\u7ed9\u7f51\u7edc\u9884\u5148\u6807\u8bb0\u6837\u672c\u7684\u60c5\u51b5\u4e0b\u8bad\u7ec3\u7f51\u7edc\u7684\u80fd\u529b\u3002\n\u4e0d\u540c\u5bfb\u5e38\u7684\u662f\uff0cBrainChip\u6709\u80fd\u529b\u5728\u90e8\u7f72\u7684\u8bbe\u5907\u4e0a\u8fdb\u884c\u73b0\u573a\u8fdb\u4e00\u6b65\u57f9\u8bad\u3002\u5b83\u5c06\u6b64\u79f0\u4e3a\u201c\u589e\u91cf\u57f9\u8bad\u201d\uff0c\u5b83\u5229\u7528\u73b0\u6709\u7684\u57f9\u8bad\u6a21\u578b\uff0c\u4f46\u5141\u8bb8\u8bbe\u5907\u5728\u73b0\u573a\u8fdb\u4e00\u6b65\u57f9\u8bad\u3002\u8fd9\u662f\u901a\u8fc7\u5220\u9664\u6700\u540e\u4e00\u4e2a\u7f51\u7edc\u5c42(\u8fdb\u884c\u5206\u7c7b)\u5e76\u5c06\u5176\u66ff\u6362\u4e3a\u5b8c\u5168\u8fde\u63a5\u7684\u5c42\u6765\u5b9e\u73b0\u7684\u3002\u7136\u540e\uff0c\u8bbe\u5907\u53ef\u4ee5\u201c\u91cd\u65b0\u5b66\u4e60\u201d\u73b0\u6709\u7684\u7c7b(\u4ec5\u6700\u540e\u4e00\u5c42\uff0c\u56e0\u4e3a\u524d\u51e0\u5c42\u4fdd\u6301\u4e0d\u53d8)\uff0c\u540c\u65f6\u5411\u7f51\u7edc\u7684\u529f\u80fd\u6dfb\u52a0\u65b0\u7684\u7c7b\u3002\u8be5\u516c\u53f8\u7528\u5e26\u6807\u7b7e\u7684\u6837\u672c\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u5b83\u53ef\u4ee5\u7528\u4e00\u5f20\u56fe\u50cf\u800c\u4e0d\u662f\u6210\u767e\u4e0a\u5343\u5f20\u56fe\u50cf\u6765\u6dfb\u52a0\u65b0\u7684\u7c7b\u522b\u3002\nGrAI Matter\u8fd8\u5728\u8fdb\u884c\u5168\u6570\u5b57\u5b9e\u65bd\u3002\u5b83\u4f7f\u7528\u82af\u7247\u4e0a\u7684\u5206\u7ec4\u4ea4\u6362\u7f51\u7edc\u6765\u8def\u7531\u201c\u5c16\u5cf0\u201d\u3002GrAI Matter\u7684\u603b\u4f53\u67b6\u6784\u5982\u4e0b\u6240\u793a(\u4e0a\u9762\u7684\u56fe5\u663e\u793a\u4e86\u8282\u70b9\u5b9e\u73b0)\u3002\u8be5\u516c\u53f8\u4f7f\u7528\u7ecf\u5178\u6280\u672f\u8bad\u7ec3\u5176\u82af\u7247\uff0c\u5c06\u7ed3\u679c\u8f6c\u6362\u4e3aGRAL\u7269\u8d28\u683c\u5f0f\u8fdb\u884c\u5b9e\u65bd\u3002\n\u5c3d\u7ba1\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e\u4e8b\u4ef6\u7684\u5f15\u64ce\uff0c\u4f46\u7f51\u7edc\u5df2\u7ecf\u8fc7\u4f18\u5316\uff0c\u53ef\u4ee5\u5904\u7406\u6807\u51c6\u89c6\u9891\u6d41\uff0c\u800c\u4e0d\u662fDVS\u4e8b\u4ef6\u6d41\u3002\u4ee5\u7c7b\u4f3c\u4e8e\u524d\u4e00\u7bc7\u6587\u7ae0\u4e2d\u8ba8\u8bba\u7684ISSCC\u8bba\u6587\u7684\u65b9\u5f0f\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u57fa\u4e8e\u5e27\u4e4b\u95f4\u7684\u5dee\u5f02\u800c\u4e0d\u662f\u6574\u4e2a\u5e27\u3002\u8fd9\u79cd\u201c\u5dee\u5f02\u201d\u5728\u8f93\u5165\u5c42\u548c\u6bcf\u4e2a\u6fc0\u6d3b\u5c42\u90fd\u88ab\u83b7\u53d6\uff0c\u4ece\u800c\u521b\u5efa\u4e86\u5927\u91cf\u8fdb\u5165\u548c\u6d41\u7ecf\u7f51\u7edc\u7684\u7a00\u758f\u6027\u3002\n\u56fe8\uff1aGrAI Matter\u53ea\u5904\u7406\u6bcf\u4e2a\u8fde\u7eed\u5c42\u4e2d\u66f4\u6539\u7684\u50cf\u7d20\u3002\u6765\u6e90\uff1aGrAI Matter Labs\n\u6700\u540e\uff0c\u82f1\u7279\u5c14\u5728\u5176\u795e\u7ecf\u5f62\u6001\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u4e3b\u4efb\u8fc8\u514b\u00b7\u6234\u7ef4\u65af(Mike Davies)\u7684\u6307\u5bfc\u4e0b\uff0c\u6b63\u5728\u8fdb\u884c\u4e00\u4e2a\u89c4\u6a21\u53ef\u89c2\u7684\u7814\u7a76\u9879\u76ee\u3002\u82f1\u7279\u5c14\u5c06\u82af\u7247\u79f0\u4e3aLoihi(Lo-EE-hee)\uff0c\u8fd9\u4e00\u9886\u57df\u7684\u5176\u4ed6\u53c2\u4e0e\u8005\u4f3c\u4e4e\u90fd\u5728\u5bc6\u5207\u5173\u6ce8\u3002\n\u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7\u9879\u76ee\uff0c\u5b83\u7684\u8fd0\u4f5c\u4e0e\u4e4b\u524d\u7684\u9879\u76ee\u975e\u5e38\u4e0d\u540c\uff0c\u770b\u8d77\u6765\u771f\u7684\u662f\u795e\u7ecf\u5f62\u6001\u7684\u3002\u5173\u4e8e\u67b6\u6784\u7684\u7ec6\u8282\u8fd8\u4e0d\u5f97\u800c\u77e5\uff0c\u4f46\u8be5\u82af\u7247\u76ee\u524d\u6709128\u4e2a\u5185\u6838\uff0c\u53ef\u4ee5\u6269\u5c55\u52304096\u4e2a\u3002\u82af\u7247\u8fd8\u53ef\u4ee5\u6a2a\u5411\u6269\u5c55\u5230\u6700\u591a16,384\u4e2a\u82af\u7247\u3002\u82f1\u7279\u5c14\u4f7f\u7528LIF\u795e\u7ecf\u5143\uff0c\u5728NoC\u4e0a\u5c06\u5c16\u5cf0\u4f5c\u4e3a\u6570\u636e\u5305\u8fdb\u884c\u8def\u7531\u3002\n\u6234\u7ef4\u65af\u8bf4\uff1a\u201c\u6211\u4eec\u6b63\u5728\u7ee7\u7eed\u81f4\u529b\u4e8e\u63a8\u8fdb\u795e\u7ecf\u5f62\u6001\u7684\u8f6f\u4ef6\u548c\u786c\u4ef6\uff0c\u76ee\u6807\u662f\u6700\u7ec8\u5b9e\u73b0\u5546\u4e1a\u5316\u3002\u201d\u201c\u7531\u4e8e\u795e\u7ecf\u5f62\u6001\u6280\u672f\u4ecd\u5904\u4e8e\u57fa\u7840\u7814\u7a76\u9636\u6bb5\uff0c\u5f88\u96be\u5bf9\u4e3b\u6d41\u4f7f\u7528\u7684\u65f6\u95f4\u6846\u67b6\u505a\u51fa\u786e\u5207\u7684\u9884\u6d4b\u3002\u6211\u4eec\u5e0c\u671b\u5728\u672a\u6765\u51e0\u5e74\u5185\u6709\u4e00\u4e9b\u6700\u521d\u7684\u5229\u57fa\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5546\u4e1a\u4ef7\u503c\uff0c\u5982\u679c\u6211\u4eec\u7684\u795e\u7ecf\u5f62\u6001\u7cfb\u7edf\u57285\u5e74\u5185\u5f00\u59cb\u5411\u5e7f\u6cdb\u7684\u5ba2\u6237\u8fdb\u884c\u5546\u4e1a\u9500\u552e\uff0c\u6211\u4eec\u5c06\u611f\u5230\u9ad8\u5174\u3002\u201c\u3002\n\u4e00\u822c\u6765\u8bf4\uff0cSNN\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u610f\u89c1\u3002\u6b63\u5728\u8fdb\u884c\u7684\u7814\u7a76\u6570\u91cf\u8868\u660e\u4e86\u4e1a\u754c\u7684\u5174\u8da3\u6c34\u5e73\uff0c\u4f46\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u8fd9\u4e48\u70ed\u60c5\u3002Facebook\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u5458Yann LeCun\u57282019\u5e74ISSCC\u7684\u4e00\u6b21\u6f14\u8bb2\u4e2d\u6307\u51fa\uff0c\u201c\u6211\u5bf9\u6b64[SNNS]\u975e\u5e38\u6000\u7591\u3002\u201d\n\u5176\u4ed6\u4eba\u4e5f\u8868\u8fbe\u4e86\u62c5\u5fe7\u3002Flex Logix\u9996\u5e2d\u6267\u884c\u5b98\u6770\u592b\u00b7\u6cf0\u7279(Geoff Tate)\u8bf4\uff1a\u201c(\u7814\u7a76)\u8bba\u6587\u7684\u76ee\u6807\u662f(\u6bd4\u7528\u7ecf\u5178\u7f51\u7edc\u5b9e\u73b0\u7684)\u7b80\u5355\u5f97\u591a\u7684\u6a21\u578b\u3002\u201d\u201c\u5b83\u79bb\u5546\u4e1a\u5316\u8fd8\u6709\u5f88\u957f\u4e00\u6bb5\u8def\u8981\u8d70\u3002\u201d\n\u8fd9\u4e5f\u4e0d\u4e00\u5b9a\u662f\u975e\u6b64\u5373\u5f7c\u7684\u60c5\u51b5\uff1a\u201c\u4f60\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u90e8\u5206\u662f\u53e4\u5178\u7684\uff0c\u90e8\u5206\u662fSNN\u7684\u7f51\u7edc\u3002Leti\u7684Valentian\u8bf4\uff1a\u201c\u4f20\u611f\u5668\u878d\u5408\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u89c6\u9891\u548cSNN\u4e00\u6837\u7ecf\u5178\uff0c\u58f0\u97f3\u4e5f\u4e00\u6837\u3002\u201d\nArteris IP\u7684\u5f17\u5170\u514b\u770b\u5230\u4e86SNN\u7684\u672a\u6765\u3002\u201cSNN\u6709\u81ea\u5df1\u7684\u57df\uff0c\u5728\u90a3\u91cc\u5b83\u4eec\u5c06\u8d85\u8d8a\u6807\u51c6\u7f51\u7edc\u3002\u5373\u4f7f\u662fSNN\u7684\u6570\u5b57\u4eff\u771f\u4e5f\u6bd4\u7ecf\u5178\u7684CNN\u66f4\u597d\uff0c\u201c\u4ed6\u8bf4\u3002\n\u65e9\u671f\u5546\u4e1a\u8fdb\u5165\u8005\u7684\u6210\u529f\uff0c\u4ee5\u53ca\u82f1\u7279\u5c14\u7684Loihi\u7814\u7a76\u9879\u76ee\uff0c\u5c06\u662fSNN\u6700\u7ec8\u80fd\u5426\u5c06\u5176\u5907\u53d7\u671f\u5f85\u7684\u8282\u7535\u6295\u5165\u5e02\u573a\u7684\u6307\u6807\u3002\n\u76f8\u5173\u6750\u6599\u4f18\u5316\u673a\u5668\u5b66\u4e60\u7684\u65b0\u65b9\u6cd5\u5728ML\u7cfb\u7edf\u4e2d\u63d0\u9ad8\u6027\u80fd\u548c\u964d\u4f4e\u529f\u8017\u7684\u4e0d\u540c\u65b9\u6cd5\u3002AI Edge\u82af\u7247In-Me\u7684\u5185\u5b58\u95ee\u9898\u3002\n..", "note_en": "Spiking neural networks (SNNs) often are touted as a way to get close to the power efficiency of the brain, but there is widespread confusion about what exactly that means. In fact, there is disagreement about how the brain actually works.\n Some SNN implementations are less brain-like than others. Depending on whom you talk to, SNNs are either a long way away or close to commercialization. The varying definitions of SNNs leads to differences in how the industry is seen.\n \u201cA few startups are doing their own SNNs,\u201d said Ron Lowman, strategic marketing manager of IP at  Synopsys. \u201cIt\u2019s being driven by guys that have expertise in how to train, optimize, and write software for them.\u201d\n On the other hand,  Flex Logix Inference Technical Marketing Manager Vinay Mehta said that, \u201cSNNs are out further than reinforcement learning,\u201d referring to a machine-learning concept that\u2019s still largely in the research phase.\n The entire notion of a \u201c neural network\u201d is motivated by attempts to model how the brain works. But current neural networks \u2014 like the  convolutional neural networks (CNNs) that are so prevalent today \u2013 don\u2019t follow the design of the brain. Instead, they rely on matrix multiplication for incorporating synaptic weights and gradient-descent algorithms for supervised training.\n Those working on SNNs often refer to these as \u201cclassical\u201d networks or \u201cartificial\u201d neural networks (ANNs). That said, Alexandre Valentian, head of advanced technologies and system-on-chip laboratory for  CEA-Leti, noted that CNNs reflect more of an approach or type of application, while SNNs reflect an implementation. \u201cCNNs can be implemented in spikes \u2013 it\u2019s not CNN vs. SNN.\u201d\n Mimicking the brain The notion of an SNN originates in the fact that the brain uses spikes to relay information. An important question, however, is how information is coded onto those spikes. Several ways are used in both research and development stages. This category of neural network is sometimes referred to as \u201c neuromorphic,\u201d in that it reflects the way the brain works. Classical networks are not neuromorphic, but some SNNs are more neuromorphic than others. As noted in a BrainChip  paper, \u201c\u2026 Today\u2019s technology\u2026 is, at best, only loosely related to how the brain functions.\u201d\n Many of the SNN ideas are still in the exploration stage in academic institutions. Several papers at the 2019 IEDM conference dealt with implementations of SNNs with novel circuit techniques to achieve the goals of lower power. But there are also commercial companies working on SNNs. As identified at the recent Linley Spring Processor Conference, Intel has a serious research program going, while BrainChip and GrAI Matter Labs are readying commercial chips. The reason for this wide range between early research and commercial viability reflects a range of interpretations as to how an SNN can be implemented.\n Some of the projects underway involve literal spikes, which are an analog phenomenon. But others abstract the notion of a \u201cspike\u201d into that of an \u201cevent,\u201d and they implement them digitally as packets traveling through a network from neuron to neuron. The high-level effect, then, is to move from measuring everything all the time, as in a classical CNN, to dealing only with events. The power savings expected from SNNs is often thought to relate to the spikes themselves, but part of the gain comes from dealing with events. In other words, work happens only when there\u2019s an interesting event to work with. Otherwise, no work (or less work) is done, keeping power low.\n \u201cIf you don\u2019t achieve [a neuron\u2019s] activation threshold, no event is generated,\u201d said Roger Levinson, COO of BrainChip. This corresponds to a high level of sparsity, which is coveted in classical networks.\n Another feature of SNNs is the fact that events can excite or suppress a neuron. Events then can compete with each other, with some having an excitatory effect while others have an inhibitory effect. With classical networks, negative weights can reduce the magnitude of the resulting activations, but that\u2019s more of a static representation of a video frame (or other data set) being evaluated rather than events pushing and pulling on the outcomes.\n Coding values in spikes One of the major distinctions between SNN implementations relates to what is referred to as \u201ccoding\u201d \u2013 how a value is transformed into a stream of spikes. While there are several ways to do this, two appear to predominate many of the discussions: rate coding and temporal coding.\n Rate coding takes a value and transforms it into a constant spike frequency for the duration of that value. The benefit of this approach is that classical training techniques can be used, with the resulting values then being transcoded for an SNN inference engine. Classical networks use an enormous amount of multiplication, which is energy-intensive. Spikes, by contrast, are simply accumulated, with no multiplication necessary. That said, each spike results in a synaptic-weight lookup, which also burns power, prompting Valentian to caution that it\u2019s not clear that this approach is lower in power.\n Temporal coding is said by some to be closer to what happens in the brain, although there are differing opinions on that, with some saying that that\u2019s the case only for a small set of examples: \u201cIt\u2019s actually not that common in the brain,\u201d said Jonatha Tapson, GrAI Matter\u2019s chief scientific officer. An example where it is used is in owl\u2019s ears. \u201cThey use their hearing to hunt at night, so their directional sensitivity has to be very high.\u201d Instead of representing a value by a frequency of spikes, the value is encoded as the delay between spikes. Spikes then represent events, and the goal is to identify meaningful patterns in a stream of spikes.\n A major challenge, however, is training, because classical training results cannot be transcoded into this type of SNN. There is no easily-obtained derivative of the spike train, making it impossible to use the gradient-descent approach to training. In general, Tapson said, \u201cTemporal coding is horrible for electronics. It makes it hard to know if a calculation completes, and it is very slow.\u201d\n Temporally coded SNNs can be most effective when driven by sensors that generate temporal-coded data \u2013 that is, event-based sensors. Dynamic vision sensors (DVS) are examples. They don\u2019t generate full frames of data on a frames-per-second basis. Instead, each pixel reports when its illumination changes by more than some threshold amount. This generates a \u201cchange\u201d event, which then propagates through the network. Valentian said these also can be particularly useful in AR/VR applications for \u201cvisual odometry,\u201d where inertial measurement units are too slow.\n It\u2019s possible that temporally-coded SNNs could work with shallower networks than the 50 to 100 (or more) layers we\u2019re seeing with classical networks. \u201cThe visual cortex is only six layers deep, although that system isn\u2019t purely feed-forward,\u201d Valentian said. \u201cThere\u2019s some feedback, as well.\u201d Still, he noted that what\u2019s lacking here is a killer application that will provide the energy and funding required to push temporal coding forward.\n Meanwhile, BrainChip started with rate coding, but decided that wasn\u2019t commercially viable. Instead, it uses rank coding (or rank-order coding), which uses the order of arrival of spikes (as opposed to literal timing) to a neuron as a code. This is a pattern-oriented approach, with arrivals in the prescribed order (along with synaptic weighting) stimulating the greatest response and arrivals in other orders providing less stimulation.\n All of these coding approaches aside, GrAI Matter uses a more direct approach. \u201cWe encode values directly as numbers \u2013 8- or 16-bit integers in GrAI One or Bfloat16 in our upcoming chip. This is a key departure from other neuromorphic architectures, which have to use rate or population or time or ensemble codes. We can use those, too, but they are not efficient,\u201d said Tapson.\n Neurons SNN neurons typically are implemented in one of two ways. The approaches are motivated by analog implementations, although they can be abstracted into digital equivalents.  Arteris IP fellow and chief architect Michael Frank refers to this as \u201cemulation.\u201d He points to several challenges for an analog implementation: \u201cWith analog, you would need to customize the model to the specific chip for inference. No two transistors are the same. And at 7 nm, you can\u2019t do analog.\u201d\n Tapson concurs. \u201cFor a large circuit, you need to be digital,\u201d he said.\n The idea behind the two abstract neural approaches is that a neuron evaluates a signal by accumulating spikes. The simplest implementation is called \u201cintegrate-and-fire\u201d (IF). Each spike is accumulated in the neuron until a threshold is reached, at which point the neuron fires an output spike \u2013 that is, it creates an event that propagates downstream in the network (at least for a feed-forward configuration). Many of the academic projects ongoing implement this as a literal analog circuit, and in operation it\u2019s philosophically similar to  sigma-delta modulation.\n The challenge here, especially for temporal coding, is that patterns may inadvertently appear over a long time period. What are two events separated in time may be interpreted as a single pattern, since early accumulation remains in place as new spikes arrive.\n In order to neutralize older \u201cobsolete\u201d results as newer ones arrive, a \u201cleaky integrate-and-fire\u201d (LIF) circuit can be used. This means that accumulations gradually dissipate over time so that, given enough time between events, accumulation restarts from a low level.\n Another element that can reverse accumulation is an inhibitory event. Accumulation assumes excitatory events that add to the accumulation, but inhibitory events accumulate negative values, reducing the level of accumulation.\n Fig. 1: IF and LIF neuron behavior, idealized for illustration. Note that, in the second case, the threshold is never reached due to the leakage. Neurons may also have a refractory period during which they can accumulate but not fire. Source: Bryon Moyer/Semiconductor Engineering\n Synapses Synapse implementation will depend strongly on how a specific network is implemented. For analog implementations, a spike will result in a certain amount of current injected into or out of the neuron. The amount of current depends on the synaptic weight.\n A team from CEA-Leti discussed an analog SNN using  RRAM in a paper presented at the 2019 IEDM conference. While RRAM has been used in classical networks as a way of implementing in-memory computation of multiply-accumulate functions, its usage here is different. Eight cells are used, four each for excitation and inhibition, with anywhere from 0 to 4 of the resistors being programmed in a low-resistance state. Low resistance means more current and, hence, a stronger weight. The more cells in a low-resistance state, the greater the overall synaptic current. The following image shows the Leti synapse design.\n Fig. 2: Leti\u2019s synapse implementation. \u201cHRS\u201d stands for \u201chigh-resistance state\u201d; \u201cLRS\u201d stands for \u201clow-resistance state.\u201d Source: CEA-Leti\n An array of these cells is shown in Figure 3. Each synapse gets its own word line; currents are sensed through the bit lines.\n  The currents are summed into the neuron as shown in Figure 4. The capacitor acts as the accumulator as the membrane voltage varies with the injected currents. Note that there are both positive and negative thresholds, meaning that the neuron can fire an excitation spike or an inhibition spike.\n  In a digital implementation, the notion of a spike is an abstraction, and multiplication is still required to scale an incoming spike by a synaptic weight. GrAI Matter\u2019s approach is shown in Figure 5.\n  NoCs in the Circuit For digital SNN emulations, the routing of spikes often happens through a network-on-chip, or NoC. NoCs are common in sophisticated systems-on-chip ( SoCs), but those networks often carry large payloads. By contrast, spike data is very small. In fact, Arteris IP\u2019s Frank said the packet headers may be longer than the payload itself.\n Packets can be broadcast to the destination neurons with an identifying tag. Then receiving neurons will know which tag to pay attention to, giving the effect of multi-cast. In this way, spikes arrive at the intended neurons for processing, while other neurons ignore them. This gives the input side of the neuron a many-to-one relationship, while the output has a one-to-many relationship.\n Frank indicated there should not be issues with collisions on the network. Sensor data is generated at a rate of around 500 samples per second, while the network is clocked at hundreds of megahertz. This leaves plenty of room for time-sharing data so that individual spike deliveries can appear to be concurrent. If there is any issue with collisions, Frank noted that the network can be divided into domains to reduce their impact.\n Timing also has a role here. Frank noted that Intel\u2019s Loihi network is asynchronous. \u201cIf you use a synchronous approach, it\u2019s probably too high power for a large network.\u201d\n A selection of projects The range of approaches to SNNs is illustrated by reviewing several of the more prominent ones. There are many more projects underway at academic institutions and possibly at other commercial companies as well, so this list will by no means be exhaustive.\n We\u2019ve already seen some of what CEA-Leti has been working on. Their IEDM paper claims this is the first full network implementation using spikes, analog neurons, and RRAM synapses. It\u2019s a single-layer, fully-connected network with 10 output neurons corresponding to the 10 classes used for MNIST image classification. Inference is considered complete when the difference between the highest-spiking output and the next-highest-spiking one exceeds a threshold. They\u2019ve shown an equivalence between this and the classical tanh activation function.\n BrainChip has an all-digital implementation, which allows it to be implemented on any CMOS process (unlike analog). A conceptual view of their architecture is shown in Figure 6.\n Fig. 6: BrainChip\u2019s architecture. The Akida array is conceptual. It does not reflect the true number and arrangement of NPUs. Source: BrainChip\n The neural fabric is fully configurable for different applications. Each node in the array contains four neural processing units (NPUs), and each NPU can be configured for event-based convolution (supporting standard or  depthwise convolution) or for other configurations, including fully connected. Events are carried as packets on the network.\n While NPU details or images are not available, BrainChip did further explain that each NPU has digital logic and SRAM, providing something of a processing-in-memory capability, but not using an analog-memory approach. An NPU contains eight neural processing engines that implement the neurons and synapses. Each event is multiplied by a synaptic weight upon entering a neuron.\n The company noted that its use of event-domain convolution allows it to use IF neurons rather than LIF, since this approach results in much simpler hardware. In order to deal with the issue of straggling spikes creating an inadvertent pattern, BrainChip frames the time so that, once that frame is completed, subsequent spikes will start afresh.\n Training is a topic the company does not talk much about. It refers to training as \u201csemi-supervised.\u201d BrainChip bases its proprietary learning algorithms on a training notion referred to as Spike Timing-Dependent Plasticity, or STDP, as well as some reinforcement learning concepts. It does the training with fully connected layers in a feed-forward manner that it says is orders of magnitude faster than what is typical with classical networks. The company also is working on unsupervised learning \u2013 that is, the ability to train a network without giving it pre-labeled samples \u2013 for its next generation architectures.\n Unusually, BrainChip has the ability to do some further training in the field on a deployed device. It refers to this as \u201cincremental training,\u201d which leverages the existing training model but allows for the device to be further trained in the field. This is done by removing the last network layer (which does classification) and replacing it with a fully connected layer. The device can then \u201crelearn\u201d the existing classes (the last layer only, as prior layers remain unchanged) while adding new classes to the capabilities of the network. The company does this with labeled samples, but it can add new classes with a single image instead of hundreds or thousands of images.\n GrAI Matter also is doing an all-digital implementation. It uses an on-chip packet-switched network to route the \u201cspikes.\u201d GrAI Matter\u2019s overall architecture is shown below (the node implementation is shown above in Figure 5). The company trains its chip using classical techniques, converting the result to the GrAL Matter format for implementation.\n  Even though this is an event-based engine, the network has been optimized to deal with standard video streams instead of DVS event streams. In a manner similar to the ISSCC paper  discussed in a prior article, these operate on the differences between frames rather than the full frames. That \u201cdiff\u201d is taken both at the input and at each activation layer, creating an enormous amount of sparsity entering and flowing through the network.\n Fig. 8: GrAI Matter processes only changed pixels in each successive layer. Source: GrAI Matter Labs\n Finally, Intel has a sizable research project underway under the direction of Mike Davies, director of their Neuromorphic Computing Lab. Intel called the chip Loihi (lo-EE-hee), and other players in this space appear to be paying close attention.\n This is an advanced project, and it operates very differently from the prior projects, appearing to be truly neuromorphic. Details on the architecture aren\u2019t available, but the chip currently has 128 cores, which can be scaled to 4,096. Chips also can be scaled out to a maximum of 16,384 chips. Intel uses LIF neurons, routing spikes as packets on a NoC.\n \u201cWe are continuing to work on advancing neuromorphic software and hardware, with the goal of eventual commercialization,\u201d Davies said. \u201cBecause neuromorphic technology is still at a basic research stage, it\u2019s hard to make firm predictions on the time frame for mainstream use. We hope to have some initial niche applications providing business value in the next few years and would be happy if our neuromorphic systems were starting to be sold commercially to a broad range of customers within a five-year time frame.\u201d\n State of the industry In general, SNNs generate divided opinions. The amount of ongoing research is indicative of the level of industry interest, but not everyone has been quite so enthusiastic. Yann LeCun, a Facebook AI researcher, noted in a  2019 ISSCC presentation, \u201cI\u2019m very skeptical of this [SNNs].\u201d\n Others expressed concern, as well. \u201c[Research] papers are aimed at much simpler models [than what are implemented with classical networks],\u201d said Geoff Tate, CEO of Flex Logix. \u201cIt\u2019s far from commercialization.\u201d\n It\u2019s also not necessarily an either-or situation: \u201cYou could have a network that\u2019s partly classical and partly SNN. An example is sensor fusion, with video as classical and sound as SNN,\u201d said Leti\u2019s Valentian.\n Arteris IP\u2019s Frank sees a future for SNNs. \u201cSNNs have their domain where they will outrun a standard network. Even a digital emulation of an SNN is better than a classical CNN,\u201d he said.\n The success of early commercial entrants, as well as Intel\u2019s Loihi research project, will be indicators of whether SNNs eventually can bring their much-anticipated power savings into the market for good.\n Related Material  New Ways To Optimize Machine Learning Different approaches for improving performance and lowering power in ML systems.  Memory Issues For AI Edge Chips In-me\n......", "posttime": "2020-05-19 14:22:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5546\u4e1a,\u795e\u7ecf\u7f51\u7edc,neural,snn", "title": "\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\uff1a\u7814\u7a76\u9879\u76ee\u8fd8\u662f\u5546\u4e1a\u4ea7\u54c1", "title_en": "Spiking Neural Networks: Research Projects or Commercial Products", "transed": 1, "url": "https://semiengineering.com/spiking-neural-networks-research-projects-or-commercial-products/", "via": "", "real_tags": ["\u5546\u4e1a", "\u795e\u7ecf\u7f51\u7edc", "neural", "snn"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002743, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5206\u9636\u6bb5\u7f16\u5199\u4e86\u7b2c\u56db\u7248Lisp Python Continuum(FLPC)\u7684\u81ea\u6258\u7ba1\u7f16\u8bd1\u5668\u3002\u5f53\u6211\u5b8c\u6210\u89e3\u6790\u5668\u5e76\u7ed9\u5b83\u63d0\u4f9b\u8d8a\u6765\u8d8a\u591a\u7684\u81ea\u5df1\u7684\u6e90\u4ee3\u7801\u65f6\uff0c\u5b83\u8fd0\u884c\u5f97\u592a\u6162\u4e86\u3002\u6211\u5c1d\u8bd5\u4e86\u5f88\u591a\u65b9\u6cd5\u6765\u52a0\u5feb\u901f\u5ea6\uff0c\u5176\u4e2d\u4e00\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u54c8\u5e0c\u8868\u3002\n\u672c\u6587\u4e2d\u7684\u53ef\u8fd0\u884c\u793a\u4f8b\u4ee3\u7801\u662f\u7528\u66f4\u719f\u6089\u7684Python\u7f16\u5199\u7684\uff0c\u800c\u4e0d\u662f\u7528FLPC\u7f16\u5199\u7684\u3002\u5728Python\u4e2d\uff0c\u4e0a\u8ff0\u4e24\u4e2a\u51fd\u6570\u901a\u5e38\u662f__setitem__(self\uff0ckey\uff0cvalue)\u548c__getitem__(self\uff0ckey)\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5c06\u907f\u514d\u4f7f\u7528\u8fc7\u591a\u7684\u8bed\u8a00\u529f\u80fd\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u66f4\u76f4\u63a5\u5730\u7ffb\u8bd1\u751f\u6210\u7684\u539f\u578b\u3002\u7279\u522b\u5730\uff0c\u6211\u4eec\u5c06\u5047\u8bbePython\u5217\u8868\u662f\u56fa\u5b9a\u957f\u5ea6\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u5df2\u7ecf\u5b9e\u73b0\u7684\u7d22\u5f15\u548c\u679a\u4e3e\u4e4b\u7c7b\u7684\u4fbf\u5229\u3002\n\u5728\u54c8\u5e0c\u8868\u4e4b\u524d\uff0cFLPC\u4e2d\u7684\u5b57\u5178\u88ab\u5b9e\u73b0\u4e3a\u4e24\u4e2a\u6570\u7ec4\u952e\u548c\u503c\uff0c\u4ee5\u4fbf\u952e[i]\u4e0e\u6bcf\u4e2a\u7d22\u5f15i\u7684\u503c[i]\u76f8\u5173\u8054(\u5373\uff0cget(keys[i])\u8fd4\u56de\u503c[i])\u3002\ndef array_index(array\uff0ckey)\uff1afor i in range(len(Array))\uff1aif array[i]==key\uff1areturn I\u5f15\u53d1ValueError(f&#34\uff1bvalue{key}\u672a\u627e\u5230\u3002&#34\uff1b)def get(self\uff0ckey)\uff1areturn self.values[array_index(self.key\uff0ckey)]\u3002\ndef set(self\uff0ckey\uff0cvalue)\uff1atry\uff1ai=array_index(self.keys[i])Expect ValueError\uff1ai=array_index(self.key\uff0cEmpty)self.key[i]=key self.values[i]=value\u3002\n\u5176\u4e2d\uff0cEmpty\u662f\u8bbe\u7f6e\u7ed9\u6240\u6709\u952e\u7684\u521d\u59cb\u503c\uff0c\u8868\u793a\u8be5\u7d22\u5f15\u5904\u6ca1\u6709\u952e[\u53ef\u8c03\u6574\u5927\u5c0f]\u3002\u5728\u8fd9\u91cc\u83b7\u53d6\u6e90\u4ee3\u7801\u3002\n\u73b0\u5728\u8ba9\u6211\u4eec\u5b9e\u73b0\u54c8\u5e0c\u8868\u3002\u6211\u4eec\u5b9e\u73b0\u7684\u5177\u4f53\u53d8\u4f53\u662f\u5177\u6709\u5f00\u653e\u5bfb\u5740\u548c\u7ebf\u6027\u63a2\u6d4b\u7684\u54c8\u5e0c\u8868\u3002\n\u5728KEYS\u6570\u7ec4\u4e2d\u67e5\u627e\u7d22\u5f15\u65f6\uff0c\u6211\u4eec\u4e0d\u662f\u4ece\u6570\u7ec4\u7684\u5f00\u5934\u5f00\u59cb\u641c\u7d22\uff0c\u800c\u662f\u4ece\u6570\u7ec4\u7684\u4e2d\u95f4\u5f00\u59cb\u641c\u7d22\uff0c\u5728\u5230\u8fbe\u672b\u5c3e\u65f6\u56de\u7ed5\u3002\ndef array_index(array\uff0ckey\uff0ci)\uff1aWhile True\uff1aif array[i]==key\uff1areturn i elif array[i]==Empty\uff1aRaise ValueError(f&#34\uff1bvalue{key}\u4e0d\u5728\u5b57\u5178&#34\uff1b)i=(i+1)%len(Array)\u3002\n\u6211\u4eec\u5c06\u4f7fget\u548cset\u4ec5\u6839\u636e\u5bc6\u94a5\u5728\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u641c\u7d22\u3002\ndef get(self\uff0ckey)\uff1a\u8fd4\u56deself.values[array_index(self.key\uff0ckey\uff0cstart(Key)%len(self.key\uff0ckey))]def set(self\uff0ckey\uff0cvalue)\uff1atry\uff1ai=array_index(self.key\uff0ckey\uff0cstart(Key)%len(self.key))Exclude ValueError\uff1ai=array_index(self.key\uff0cEmpty\uff0cstart(Key)%len(self.key))self.keys[i]=\u3002\n\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5b9a\u4e49Start(\u8fd9\u91cc\u662f\u6e90\u4ee3\u7801)\uff0c\u77e5\u9053\u4e3a\u4ec0\u4e48\u5b83\u6709\u6548\uff0c\u4e3a\u4ec0\u4e48\u5b83\u5f88\u5feb\u3002\n\u54c8\u5e0c\u8868\u8fdb\u884c\u65f6\u7a7a\u6743\u8861\u3002\u6211\u4eec\u5c06\u9009\u62e9\u4e00\u4e2a\u8f83\u5927\u7684\u952e(\u56e0\u6b64\u4e5f\u5c31\u662f\u503c)\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6bd4\u6211\u4eec\u5c06\u5b9e\u9645\u5b58\u50a8\u5728\u5176\u4e2d\u7684\u952e\u6570\u591a\u5f97\u591a\u3002\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0cSTART\u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u6563\u5e03\u8db3\u591f\u591a\u7684\u952e\uff0c\u4ee5\u4fbf\u6211\u4eec\u5c06\u5b9e\u9645\u5b58\u50a8\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u6240\u6709\u952e\u90fd\u4ece\u76f8\u540c\u7684\u7d22\u5f15\u5f00\u59cb\u641c\u7d22\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709start(Key)%len(self.key)\u90fd\u662f\u4e0d\u540c\u7684\u3002\n\u5219\u641c\u7d22\u59cb\u7ec8\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u6210\u529f\uff0c\u5e76\u8fd4\u56destart(Key)%len(self.key)\u4f5c\u4e3a\u7d22\u5f15\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7b2c\u4e00\u6b21\u5c06key\u8bbe\u7f6e\u4e3a\u503c\u4e4b\u524d\uff0ckey[start(Key)%len(self.keys)]\u4e3a\u7a7a\uff0c\u6216\u8005\u4e4b\u540ekeys[start(Key)%len(self.keys)]\u7b49\u4e8ekey\u3002\n\u6211\u4eec\u6700\u591a\u53ea\u80fd\u8d70\u4e00\u6b65\u3002\u4ee5\u66f4\u591a\u7684\u5185\u5b58\u4e3a\u4ee3\u4ef7\uff0c\u6211\u4eec\u5df2\u7ecf\u83b7\u53d6\u5e76\u8bbe\u7f6e\u4e86\u4e0e\u6570\u7ec4\u76f8\u540c\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u5373\u4f7f\u6211\u4eec\u91cd\u65b0\u8bbe\u7f6e\u7684\u5bc6\u94a5\u4e0d\u662f\u8fde\u7eed\u7684\u3002\n\u5173\u4e8e\u6211\u4eec\u5982\u4f55\u9009\u62e9\u53d1\u8f66\uff0c\u6211\u4e0d\u4f1a\u8bf4\u592a\u591a\uff0c\u4f46\u6211\u7684\u60f3\u6cd5\u662f\u9009\u62e9\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5206\u6563\u53d1\u8f66\u4f4d\u7f6e\u7684\u4e1c\u897f\u3002\n\u5728\u4e0d\u592a\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230start(Key1)%len(Key)==start(Key2)%len(Key)\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u7d22\u5f15\u7d22\u5f15\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5199\u5165\u952e\u7684\u4e24\u4e2a\u952e\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5c06\u4f4d\u4e8eindex\uff0c\u53e6\u4e00\u4e2a\u4f4d\u4e8eindex+1[\u7ea7\u8054]\u3002\u5173\u952e\u5b57\u7ed3\u675f\u65f6\u8ddd\u79bb\u5176\u8d77\u59cb\u7d22\u5f15\u8d8a\u8fdc\uff0c\u641c\u7d22\u5b83\u6240\u9700\u7684\u65f6\u95f4\u5c31\u8d8a\u957f\u3002\n\u952e\u7684\u503c\u6c38\u8fdc\u4e0d\u4f1a\u91cd\u5199\u4e3a\u4e00\u6b21\u4e3a\u7a7a\uff0c\u56e0\u6b64\u5728\u4ee5\u540e\u7684\u4efb\u4f55\u641c\u7d22\u4e2d\uff0c\u6211\u4eec\u5c06\u518d\u6b21\u4ee5\u76f8\u540c\u7684\u7d22\u5f15(\u5728\u672c\u4f8b\u4e2d\u4e3aindex+2)\u7ed3\u675f\u3002\n\u6211\u4eec\u5c06\u9009\u62e9start to be a hash function\uff0c\u5c06\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u7d22\u5f15\u3002\u5173\u4e8e\u6563\u5217\u51fd\u6570\uff0c\u6211\u4eec\u6709\u5f88\u591a\u8981\u8bf4\u7684\uff0c\u6211\u4eec\u4e0d\u4f1a\u8fd9\u6837\u505a\uff0c\u800c\u53ea\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u5df2\u77e5\u7684\u597d\u7684\u3001\u6613\u4e8e\u5b9e\u73b0\u7684\u51fd\u6570\u5373\u53ef\u3002\ndef djb2_hash(Key)\uff1ah=5381 for c in key\uff1ah=(h&lt\uff1b&lt\uff1b5+h)+order(C))&amp\uff1b0xffffffff return hstart=djb2_hash\u3002\n\u5173\u4e8e\u8fd9\u4e2a\u7279\u6b8a\u7684\u529f\u80fddjb2\u6709\u4e00\u4e2a\u76f8\u5f53\u56f0\u96be\u7684\u5730\u65b9(\u4f46\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8fd9\u6837\u505a)\u3002\n\u7531\u4e8e\u6563\u5217\u51fd\u6570\u7684\u76ee\u6807\u662f\u5728\u6211\u4eec\u7684\u6570\u7ec4\u4e2d\u5747\u5300\u5206\u5e03\u8d77\u59cb\u70b9\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u679c\u6211\u4eec\u7684\u6563\u5217\u51fd\u6570\u5b8c\u5168\u968f\u673a\u5730\u9009\u62e9\u5f00\u59cb\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8fd9\u662f\u53ef\u884c\u7684(\u6216\u8005\u81f3\u5c11\u6709\u5f88\u597d\u7684\u673a\u4f1a\u53ef\u884c)\u3002\n\u4e0b\u9762\u662f\u4e00\u4e2a\u7565\u5fae\u9519\u8bef\u7684\u5206\u6790\uff0c\u4ee5\u5f97\u51fa\u8fd9\u5c06\u9700\u8981\u591a\u957f\u65f6\u95f4\u7684\u6982\u5ff5\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u6539\u4e3a\u8bfb\u53d6\u6b63\u786e\u7684[LINEAR_PROBING]\u3002\n\u5047\u8bbe\u6211\u4eec\u7684\u54c8\u5e0c\u8868\u6709s\u4e2a\u69fd\uff0c\u5df2\u7ecf\u6709k\u4e2a\u5bc6\u94a5\uff0c\u6211\u4eec\u5c1d\u8bd5\u63d2\u5165\u4e00\u4e2a\u65b0\u7684k+1\u4e2a\u5bc6\u94a5\u3002\n\u56e0\u4e3ak+1\u4e2a\u952e\u6709\u4e00\u4e2a\u968f\u673a\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6240\u4ee5\u4ecek\u4e2a\u69fd\u4e2d\u6311\u9009\u4e00\u4e2a\u5df2\u7ecf\u6709\u952e\u7684\u6982\u7387\u662fk/s\u3002\u5982\u679c\u6211\u4eec\u8fd0\u6c14\u4e0d\u597d\uff0c\u649e\u4e0a\u4e86\u4e00\u4e2a\u952e\uff0c\u90a3\u4e48\u6211\u4eec\u5411\u524d\u79fb\u52a8\u65f6\u649e\u5230\u53e6\u4e00\u4e2a\u952e\u7684\u6982\u7387\u662f(k-1)/(s-1)\u3002\u8fd9\u662f\u56e0\u4e3a\u6709s-1\u4e2a\u63d2\u69fd\uff0c\u4e0d\u5305\u62ec\u6211\u4eec\u7684\u8d77\u59cb\u63d2\u69fd\u548c\u90a3\u4e9b\u63d2\u69fd\u4e2d\u7684k-1\u4e2a\u5bc6\u94a5\u3002\n\u8fd9\u5b9e\u9645\u4e0a\u4e0d\u662f\u771f\u7684\uff0c\u56e0\u4e3a\u867d\u7136\u5728s-1\u4e2a\u63d2\u69fd\u4e2d\u6709k-1\u4e2a\u5bc6\u94a5\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u90fd\u4e00\u6837\u6709\u53ef\u80fd\u88ab\u586b\u6ee1\uff01\u5982\u679c\u6211\u4eec\u67e5\u770b\u8981\u68c0\u67e5\u7684\u7b2ci\u4e2a\u65f6\u9699\u7684\u968f\u673a\u65f6\u9699\u5f00\u59cb(KEY\uff0ci)\u800c\u4e0d\u662f\u5f00\u59cb(KEY)+i\uff0c\u8fd9\u5c06\u662f\u771f\u5b9e\u7684\u3002\n\u6487\u5f00\u8fd9\u4e00\u70b9\u4e0d\u8c08\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u5427\u3002\u5982\u679c\u6211\u4eec\u518d\u6b21\u5012\u9709\uff0c\u770b\u5230\u4e00\u4e2a\u7a7a\u4f4d\uff0c\u90a3\u4e48\u6211\u4eec\u5411\u524d\u79fb\u52a8\u65f6\u51fb\u4e2d\u53e6\u4e00\u4e2a\u952e\u7684\u6982\u7387\u662f(k-2)/(s-2)\u3002\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u8d70\u4e0b\u53bb\u3002\n(k-i)/(s-i)\u81f3\u591a\u4e3ak/s\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u641c\u7d22\u4e2d\u770b\u5230t\u4e2a\u5df2\u586b\u6ee1\u7a7a\u4f4d\u7684\u6982\u7387\u81f3\u591a\u4e3a(k/s)t\u3002\u6211\u4eec\u770b\u5230\u7684\u9884\u671f\u6ee1\u4f4d\u6570(\u5728\u6700\u7ec8\u627e\u5230\u7a7a\u4f4d\u4e4b\u524d)\u662f\u8fd9\u4e9b\u503c[sum]\u7684\u603b\u548c\u3002\u8fd9\u81f3\u591a\u662f\u65e0\u7a77\u548c\uff0c\u5982\u679c\u6211\u4eec\u73b0\u5728\u8ba1\u7b97\u63d2\u5165\u5bc6\u94a5\u7684\u6700\u540e\u4e00\u4e2a\u7a7a\u69fd\uff0c\u5b83\u662f\u4e00\u4e2a\u503c\u4e3a1/(1-k/s)-1[\u51e0\u4f55]\u62161/(1-k/s)\u603b\u69fd\u6570\u7684\u51e0\u4f55\u7ea7\u6570\u3002\n\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u6709\u4e24\u500d\u4e8e\u5bc6\u94a5\u7684\u63d2\u69fd\uff0c\u6211\u4eec\u9884\u8ba1\u5e73\u5747\u4f1a\u67091/(1-1/2)=2\u4e2a\u63d2\u69fd\uff01\n\u7ebf\u6027\u63a2\u6d4b\u7684\u5b9e\u9645\u9884\u671f\u6570\u91cf\u662f1/(1-(k/s)2)[LINEAR_PROBING]\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u67e5\u770b4\u4e2a\u63d2\u69fd\uff0c\u8fd9\u4ecd\u7136\u4e0d\u662f\u5f88\u7cdf\u7cd5\uff0c\u6216\u8005\u6211\u4eec\u53ef\u80fd\u53ea\u6709\u66f4\u591a\u7684\u63d2\u69fd\u3002\n\u4f60\u4f1a\u6ce8\u610f\u5230\uff0c\u6574\u7bc7\u5e16\u5b50\u4e2d\u660e\u663e\u6ca1\u6709\u6309\u952e\u5220\u9664\uff0c\u8fd9\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7b80\u5355\u4e86\u3002\u5982\u679c\u6211\u4eec\u53ea\u662f\u5c06\u5bc6\u94a5\u8bbe\u7f6e\u4e3a\u7a7a\u6765\u5220\u9664\u5bc6\u94a5\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f\n\u4f5c\u4e3a\u4e00\u4e2a\u4ee5\u5f15\u5bfc\u4e3a\u4e2d\u5fc3\u7684\u5b9e\u73b0\uff0cFLPC\u5bf9\u4e8e\u5b57\u5178\u6765\u8bf4\u9762\u4e34\u7740\u53e6\u4e00\u4e2a\u9e21\u6216\u86cb\u7684\u95ee\u9898\uff1a\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u5b9e\u73b0\u9700\u8981\u5bf9\u8c61\u548c\u4e24\u4e2a\u6570\u7ec4\u3002\u4f46\u662f\u5bf9\u8c61\u9700\u8981\u67e5\u627e\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u662f\u4f7f\u7528\u5b57\u5178\u5b9e\u73b0\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5b57\u5178\uff0c\u4ece\u51fd\u6570\u540d\u5230\u5b58\u50a8\u51fd\u6570\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u6216\u8005\u5b57\u8282\u7801\u89e3\u91ca\u5668\u7684\u539f\u8bed\u3002\n\u5373\u4f7f\u662f\u7b80\u5355\u7684\u5b9e\u73b0\u4e5f\u9700\u8981\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u7ec4\uff01\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u51fd\u6570\u540d\u79f0\u5b57\u5178\u88ab\u786c\u7f16\u7801\u5230\u51fd\u6570\u7684\u4e3b\u4f53\u4e2d\u3002\ndef names_get(Key)\uff1aif key==&#34\uff1bstring 1&#34\uff1b\uff1a\u5982\u679ckey==&#34\uff1bstring 2&#34\uff1b\uff1a\u8fd4\u56devalue2 if key==&#34\uff1bstring 3&#34\uff1b\uff1a\u8fd4\u56de\u503c3.\u3002\n\u8fd9\u5e76\u4e0d\u80fd\u4f7f\u6211\u4eec\u524d\u9762\u6240\u8bf4\u7684\u65e0\u6548\uff1a\u786e\u5b9e\uff0c\u6211\u4eec\u9700\u8981\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u7ec4\u3002\u53ea\u662f\u5b83\u6070\u597d\u4e0e\u6211\u4eec\u7528\u4e8e\u51fd\u6570\u7684\u6570\u7ec4\u76f8\u540c\u3002FLPC\u51fd\u6570\u5728\u5185\u5b58\u4e2d\u8868\u793a\u4e3a\u6574\u6570\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6574\u6570\u6570\u7ec4\u7f16\u7801\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3001\u57fa\u5143\u6216(\u5f15\u7528)\u5e38\u91cf\u3002(\u6709\u5173\u8be5\u6a21\u578b\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u7b2c\u56db\u6559\u7a0b\u3002(\u5176\u4ed6\u7ec6\u8282\u7565\u6709\u4e0d\u540c\u3002)\u3002\u4f46\u662f\u5b83\u4eec\u6ca1\u6709\u63d0\u4f9b\u5355\u72ec\u7684getter\u548csetter\u65b9\u6cd5\u3002\u76f8\u53cd\uff0cmemory y.get\u548cmemory y.set\u5141\u8bb8\u6211\u4eec\u8bfb\u5199\u5185\u5b58\u4e2d\u7684\u7edd\u5bf9\u4f4d\u7f6e(\u56e0\u6b64\u5fc5\u987b\u624b\u52a8\u8ba1\u7b97\u504f\u79fb\u91cf)\u3002\n\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4e00\u4e2a\u8bbe\u7f6e\u5668\u6765\u67e5\u627e\u51fd\u6570\u540d\u3002\u7f16\u8bd1\u65f6\uff0cgetter names.get\u7684\u5185\u5b58\u8868\u793a\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\u3002\nPICK1\u63a8\u9001\uff1a&#34\uff1bstring 1&#34\uff1b==PUSH\uff1avalue1 return_ifick1\u63a8\u9001\uff1a&#34\uff1bstring 2&#34\uff1b==PUSH\uff1avalue2 return_ifick1\u63a8\u9001\uff1a&#34\uff1bstring 3&#34\uff1b==PUSH\uff1avalue3 return_if.end_of_function\u3002\n\u4e0a\u9762\u6211\u4eec\u5c55\u793a\u7684\u662f\u5185\u5b58\u4e2d\u7684\u6574\u6570\u503c\u4ee3\u8868\u7684\u662f\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u6574\u6570\u672c\u8eab\u3002return_if\u63a5\u53d7\u5e03\u5c14\u503c\u548c\u503c\uff0c\u5982\u679c\u5e03\u5c14\u503c\u4e3aTRUE\uff0c\u5219\u8fd4\u56de\u503c(\u5982\u679c\u5e03\u5c14\u503c\u4e3aFALSE\uff0c\u5219\u4e22\u5f03\u4e24\u8005)\u3002\n\u56e0\u6b64\uff0c\u8981\u8bbe\u7f6e\u4e00\u4e2a\u65b0\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728names.get\u6b63\u6587\u7684\u672b\u5c3e\u9644\u52a0\u51e0\u4e2a\u6761\u76ee\uff0c\u4f8b\u5982PICK1 PUSH\uff1a&#34\uff1bstring 4&#34\uff1b==PUSH\uff1aVALUE4 RETURN_IF\uff0c\u7136\u540e\u5c06\u8c03\u7528\u79fb\u5230end_of_function(\u8bf7\u53c2\u9605functions.add in boot.flpc\u4e86\u89e3\u5b9e\u9645\u5b9e\u73b0)\u3002\n\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u51fd\u6570\u540d\u79f0\u7684\u6734\u7d20\u5b57\u5178\u3002\u8981\u6a21\u4eff\u672c\u6587\u524d\u9762\u5b9e\u73b0\u7684\u54c8\u5e0c\u8868\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u4ece\u51fd\u6570\u4f53\u4e2d\u95f4\u7684if\u8bed\u53e5\u5f00\u59cb\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u672b\u5c3e\u56de\u7ed5\u3002\n\u5728FLPC\u7684\u5f15\u5bfc\u5e8f\u5217\u4e2d\uff0c\u6211\u4eec\u5c06\u6539\u7528\u6734\u7d20\u7684\u5b57\u5178\u6765\u5b9e\u73b0\u4ece\u5bf9\u8c61\u5230\u54c8\u5e0c\u8868\u5bf9\u8c61\u7684\u6240\u6709\u5185\u5bb9\uff0c\u7136\u540e\u91cd\u65b0\u7ed1\u5b9a\u540d\u79f0\u3002\u8fdb\u5165\u4f7f\u7528\u8fd9\u4e9b\u54c8\u5e0c\u8868\u7684\u65b0\u51fd\u6570hashtable.get(\u952e\u540d\u79f0)\u7684\u4e3b\u4f53\u3002\u8fd9\u89e3\u51b3\u4e86\u9e21\u6216\u86cb\u7684\u95ee\u9898\u3002\u5929\u771f\u7684\u8bcd\u5178\u4f5c\u4e3a\u4e00\u5806if\u8bed\u53e5\u6392\u5728\u7b2c\u4e00\u4f4d\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u5c5e\u6027\u67e5\u627e\u4e5f\u4f7f\u7528\u67d0\u79cd\u7b80\u5355\u7684\u54c8\u5e0c\u8868\u3002\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u8fd9\u6837\u3002\nhashtable.attrib&lt\uff1b-un[\u540d\u79f0\u63a5\u6536\u8005\u641c\u7d22\u5668]\uff1areturn_if(string_equence(name&#34\uff1bget&#34\uff1b)hashtable.get)return_if(string_equence(name&#34\uff1bset&#34\uff1b)hashtable.set)return_if(string_equence(name&#34\uff1binstance&#34\uff1b)hashtable.instance)return_if(string_equence(name&#34\uff1bprint&#34\uff1b)hashtable.print)\u3002)memory y.get(\u63a5\u6536\u65b9)return_if(string_equence(name&#34\uff1bkey&#34\uff1b)memory y.get(\u63a5\u6536\u65b9+1))return_if(string_equence(name&#34\uff1bValues&#34\uff1b)memory y.get(\u63a5\u6536\u65b9+2))return_if(string_equence(name&#34\uff1btype&#34\uff1b)&#34\uff1bhashtable&#34\uff1b)return(instance_attrib(name_attrib(name\u63a5\u6536\u65b9\u641c\u7d22\u5668))\u3002\n\u8fd8\u6709\u4e00\u4e2a\u5269\u4f59\u7684\u6311\u6218\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u73b0\u6709\u7684\u952e-\u503c\u5bf9\u63d2\u5165\u5230\u65b0\u7684\u54c8\u5e0c\u8868\u540d\u79f0\u4e2d\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6bcf\u4e2aif\u8bed\u53e5\u5360\u75287\u4e2a\u5355\u5143\u683c\u7684\u56fa\u5b9a\u957f\u5ea6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u8fd9\u90e8\u5206\u5185\u5b58\u5e76\u53d6\u51fa(\u5df2\u7f16\u8bd1\u7684\uff01)\u3002\u4f4d\u4e8e\u7279\u5b9a\u504f\u79fb\u91cf\u7684\u952e\u548c\u503c\u3002\u8fd9\u4e00\u5207\u90fd\u53d1\u751f\u5728\u9636\u6bb51b2.flpc\u4e2d\u3002\nCONVERT_NAMES&lt\uff1b-FUN[]\uff1aend=functions.end()index=names.get+5cond=not(index&gt\uff1bend)REPEAT_IF\uff1adrop1(`cond)Names\u3002set(memory y.get(Index)memory y.get(index+3))index=`index+7 cond=not(index&&gt;\uff1bend)\u3002\nINDEX\u548cEND\u5c06\u5305\u542b\u5185\u5b58\u4e2d\u7684\u7d22\u5f15(=\u5730\u5740)\u3002memy.get(Index)\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32&#34\uff1bstring 1&#34\uff1b\u3001&#34\uff1bstring 2&#34\uff1b\u4f9d\u6b64\u7c7b\u63a8\uff0c\u800cmemy.get(index+3)\u5305\u542bvalue1\u3001value2\u7b49\u3002\n\u6211\u4f7f\u7528\u65f6\u95f4\u5bf9\u4e00\u4e9b\u5e26\u6709\u548c\u4e0d\u5e26\u6709\u54c8\u5e0c\u8868\u7684\u9884\u7f16\u8bd1\u6587\u4ef6\u8fdb\u884c\u4e86\u8ba1\u65f6\u3002\u65f6\u95f4\u5e76\u4e0d\u603b\u662f\u6700\u597d\u7684\u5de5\u5177\uff0c\u4f46\u5728\u8fd9\u91cc\u5df2\u7ecf\u8db3\u591f\u597d\u4e86\uff0c\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u60f3\u6cd5\u3002\u6211\u5728\u6d3b\u52a8\u524d\u67e5\u770b\u4e86\u5176\u4ed6\u7ed3\u679c\uff0c\u8003\u8651\u52a0\u5feb\u547d\u540d\u901f\u5ea6\u3002\u9996\u5148\u8981\u505a\u7684\u5c31\u662f\u505a\u597d\u8fd9\u4ef6\u4e8b\u3002\n\u6709\u70b9\u5e73\u6de1\u65e0\u5947\u3002\u5b83\u6240\u505a\u7684\u4e00\u5207\u53ea\u662f\u8ba9\u6211\u4eec\u7684\u901f\u5ea6\u63d0\u9ad8\u4e86\u7ea64\u500d\u3002\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u5df2\u7ecf\u5c06\u74f6\u9888\u4ece\u51fd\u6570\u540d\u67e5\u627e\u4e0a\u79fb\u5f00\u4e86\u3002\u7531\u4e8e\u901f\u5ea6\u7531\u6700\u6162\u7684\u90e8\u5206(\u6709\u65f6\u662f\u90e8\u5206)\u63a7\u5236\uff0c\u5373\u4f7f\u662f\u8fd9\u79cd\u9002\u5ea6\u7684\u52a0\u901f\u4e5f\u544a\u8bc9\u6211\u4eec\uff0c\u51fd\u6570\u540d\u67e5\u627e\u662f\u8f83\u6162\u7684\u90e8\u5206\u4e4b\u4e00\u3002\n\u6211\u4eec\u73b0\u5728\u5e0c\u671b\u4f7f\u7528\u54c8\u5e0c\u8868\u8fdb\u884c\u5c5e\u6027\u67e5\u627e(\u6bd4\u5982\u4e0a\u9762\u7684hashtable.attrib)\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4e0enames.get\u4e0d\u540c\uff0c\u6bcf\u4e2aif\u8bed\u53e5\u7684\u4e3b\u4f53\u5728\u5185\u5b58\u4e2d\u4e0d\u5360\u7528\u76f8\u540c\u6570\u91cf\u7684\u5355\u5143\u683c\u3002\u4f8b\u5982\n\u56e0\u4e3amemy.get(Receiver+1)\u662f\u5728\u51fd\u6570\u4f53\u672c\u8eab\u4e2d\u5b8c\u6210\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u6bcf\u4e2a\u503c\u5305\u88c5\u5728\u51fd\u6570\u4e2d\u6765\u6f5c\u5728\u5730\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\n\u800chashtable.get_()\u5c06\u53ea\u8fd4\u56dehashtable.get\u3002\u4f46\u662f\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u96be\u770b\u7684\u6280\u5de7\uff0c\u8df3\u8f6c\u8868\u8df3\u5230\u4e86\u65e7\u7684hashtable.attrib(\u6765\u81ea\u6211\u4eec\u5bf9hashtable.attrib\u7684\u65b0\u5b9a\u4e49)\u4e2d\u3002\u4e5f\u8bb8\u8fd9\u4e2a\u4ee5\u540e\u4f1a\u88ab\u66f4\u597d\u7684\u4e1c\u897f\u53d6\u4ee3\u3002\n[\u53ef\u8c03\u6574\u5927\u5c0f]\u6211\u4eec\u53ef\u4ee5\u6539\u4e3a\u4f7f\u7528Python list\u7684append\uff0c\u5b83\u53ef\u4ee5\u968f\u7740\u5217\u8868\u7684\u589e\u957f\u6709\u6548\u5730\u8c03\u6574\u5217\u8868\u7684\u5927\u5c0f\uff0c\u4f46\u8fd9\u4f1a\u5c06\u8981\u6c42\u4ece\u53ea\u9700\u8981\u6570\u7ec4\u589e\u52a0\u5230\u9700\u8981\u53ef\u8c03\u6574\u5927\u5c0f\u7684\u6570\u7ec4\u3002\u800c\u4e14\u6211\u4eec\u4e0d\u9700\u8981\u53ef\u8c03\u6574\u5927\u5c0f\u7684\u6570\u7ec4\u6765\u5b9e\u73b0\u56fa\u5b9a/\u6709\u754c\u5927\u5c0f\u7684\u54c8\u5e0c\u8868\u3002\n[\u7ea7\u8054]\u8fd9\u53ef\u80fd\u4f1a\u4ea7\u751f\u7ea7\u8054\u6548\u5e94\u3002\u5373\u4f7f\u7b2c\u4e09\u4e2a\u952e\u5355\u72ec\u5f00\u59cb\u4e8eindex+1==start(Key3)%len(Key)\uff0ckey2\u53ef\u4ee5\u9996\u5148\u5199\u5165key[index+1]\uff0c\u56e0\u6b64key3\u5728key[index+2]\u5904\u7ed3\u675f(\u53cd\u4e4b\u4ea6\u7136)\u3002\n[LINEAR_PROBING]\u6211\u627e\u5230\u7684\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u53ef\u4ee5\u8ffd\u6eaf\u5230\u201c\u8ba1\u7b97\u673a\u7f16\u7a0b\u7684\u827a\u672f\u201d(The Art Of Computer Programming)\u53773\u9875\uff0c678-682\u9875\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4e0d\u662f\u514d\u8d39\u7684\uff0c\u6211\u7684\u4e2d\u7b49\u52aa\u529b\u7ea7\u522b\u7684\u641c\u7d22\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u53ef\u4ee5\u91cd\u65b0\u89e3\u91ca\u5b83\u7684\u5730\u65b9\u3002\u8fd9\u4e9b\u9875\u9762\u4e0a\u7684\u4e00\u6bb5\u6709\u8da3\u7684\u8bdd\uff1a\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f5c\u8005\u60c5\u4e0d\u81ea\u7981\u5730\u63d2\u5165\u4e86\u4e00\u4efd\u4f20\u8bb0\uff1a1962\u5e74\uff0c\u5728\u5f00\u59cb\u4ece\u4e8b\u8ba1\u7b97\u673a\u7f16\u7a0b\u827a\u672f\u7684\u5de5\u4f5c\u540e\u4e0d\u4e45\uff0c\u6211\u7b2c\u4e00\u6b21\u5199\u51fa\u4e86\u4e0b\u9762\u8fd9\u6bb5\u8bdd\u3002\u56e0\u4e3a\u8fd9\u662f\u6211\u5206\u6790\u8fc7\u7684\u7b2c\u4e00\u4e2a\u4ee4\u4eba\u6ee1\u610f\u7684\u975e\u5e73\u51e1\u7b97\u6cd5\uff0c\u6240\u4ee5\u5b83\u5bf9\u8fd9\u4e9b\u4e66\u7684\u7ed3\u6784\u6709\u5f88\u5927\u7684\u5f71\u54cd\u3002\u4ece\u90a3\u5929\u8d77\uff0c\u7b97\u6cd5\u5206\u6790\u5b9e\u9645\u4e0a\u5c31\u6210\u4e86\u6211\u751f\u6d3b\u4e2d\u7684\u4e3b\u8981\u4e3b\u9898\u4e4b\u4e00\u3002\n[SUM]\u57fa\u672c\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u5148\u5c06\u77e9\u9635\u7684\u884c\u6216\u5217\u76f8\u52a0\uff0c\u7136\u540e\u518d\u5c06\u7ed3\u679c\u76f8\u52a0\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\uff1a\u6211\u4eec\u6700\u7ec8\u5c06\u5f97\u5230\u77e9\u9635\u4e2d\u6240\u6709\u6761\u76ee\u7684\u603b\u548c\u3002\ne1 e2 e3 e4..\u3002E2 E3 E4..\u3002E3 E4..\u3002E4.\n\u51c6\u786e\u770b\u5230i\u4e2a\u6ee1\u65f6\u9699\u7684\u6982\u7387\u4e0e\u6307\u793a\u7b26\u968f\u673a\u53d8\u91cf\u7528\u4e8e\u51c6\u786e\u770b\u5230i\u4e2a\u6ee1\u65f6\u9699\u7684\u671f\u671b\u503cEi\u76f8\u540c\u3002\u9884\u671f\u7684\u6ee1\u4f4d\u6570\u662fi*ei\u7684i\u9664\u4ee5i(\u4ece1\u5230k)\u7684\u603b\u548c\uff0c\u8fd9\u662f\u5148\u5c06\u5217\u76f8\u52a0\u3002\u6211\u4eec\u8ba1\u7b97\u7684\u662f\u81f3\u5c11\u770b\u5230i\u4e2a\u6ee1\u4f4d\u7684\u6307\u6807\u968f\u673a\u53d8\u91cf\u7684\u671f\u671b\u503c\u4e4b\u548c\uff0c\u8fd9\u662f\u5148\u5c06\u884c\u52a0\u8d77\u6765(\u6839\u636e\u671f\u671b\u7684\u7ebf\u6027)\u3002\n[\u51e0\u4f55]\u5982\u679c\u6211\u4eec\u628at\u4ece0\u5230\u65e0\u7a77\u5927\u7684\u548c\u4e58\u4ee5a\uff0c\u6211\u4eec\u5f97\u5230\u76f8\u540c\u7684\u548c\uff0c\u9664\u53bb\u7b2c\u4e00\u9879a 0=1\u3002\u6240\u4ee51-a\u4e58\u4ee5\u8fd9\u4e2a\u548c\u662f1\uff0c\u603b\u548c\u662f1/(1-a)\u3002", "note_en": "I wrote the  Forth Lisp Python Continuum (Flpc)&#39;s self hosted compiler in stages. When I completed the parser and gave it larger and larger pieces of its own source code, it was running too slow. I tried many things to speed it up, one that helped was using hash tables.\n     Runnable sample code from this post is in the more familiar Python instead of Flpc. In Python, the two above two functions are usually  __setitem__(self, key, value) and  __getitem__(self, key). However, we will avoid using too many language features so the resulting prototype could be translated more directly. In particular, we&#39;ll pretend Python lists are fixed length and don&#39;t have conveniences like  index and  enumerate already implemented.\n  Before hash tables, dictionaries in Flpc were implemented as two arrays  keys and  values so that  keys[i] is associated with  values[i] for each index  i (i.e.,  get(keys[i]) returns  values[i]).\n  def array_index(array, key): for i in range(len(array)): if array[i] == key: return i raise ValueError(f&#34;Value {key} not found.&#34;)def get(self, key): return self.values[array_index(self.keys, key)]\n  def set(self, key, value): try: i = array_index(self.keys, key) except ValueError: i = array_index(self.keys, Empty) self.keys[i] = key self.values[i] = value\n where  Empty is the initial value set to all of  keys, representing no key at that index [resizable].  Get the source code here.\n  Now let&#39;s implement hash tables. The specific variant we implement is &#34;hash tables with open addressing and linear probing&#34;.\n When looking for the index in the  keys array, instead of searching from the beginning of the array, we&#39;ll start in the middle of it and wrap around when we reach the end.\n def array_index(array, key, i): while True: if array[i] == key: return i elif array[i] == Empty: raise ValueError(f&#34;Value {key} is not in the dictionary&#34;) i = (i + 1) % len(array)\n We&#39;ll make both  get and  set start their search on some location depending only on the  key.\n def get(self, key): return self.values[array_index(self.keys, key, start(key) % len(self.keys))]def set(self, key, value): try: i = array_index(self.keys, key, start(key) % len(self.keys)) except ValueError: i = array_index(self.keys, Empty, start(key) % len(self.keys)) self.keys[i] = key self.values[i] = value\n  But we still need to define  start ( source here), know why this works and why its fast.\n  Hash tables make a time-space trade-off. We&#39;ll pick a large  keys (and thus  values) array, much larger than the number of keys we&#39;ll actually store in them. In the ideal situation,  start spreads the keys around this array enough that all keys we&#39;ll actually store in the hash table begin their search at the same index. That is, all  start(key) % len(self.keys) are different.\n Then the search always succeeds in one step and returns  start(key) % len(self.keys) as the index. This is because  keys[start(key) % len(self.keys)] is either  Empty before the first time  key is set to a value or  keys[start(key) % len(self.keys)] is equal to  key afterwards.\n One step is the best we could do. At the cost of more memory, we&#39;ve got  get and  set to run at the same speed as an array even though the keys we&#39;re setting aren&#39;t contiguous.\n I won&#39;t say too much about how we pick  start but the idea is to choose something that spreads out the starting positions as much as possible.\n  In a less ideal world, we can get  start(key1) % len(keys) == start(key2) % len(keys). Call this index  index. In that case, the first of the two keys written to  keys will be at  index and the other at  index + 1 [cascade]. The further away a key ends up from its  starting index, the more time it will take to search for it.\n     The value of  keys is never rewritten to once is empty so on any later search, we&#39;ll end up at the same index ( index + 2 in the example) again.\n  We&#39;ll pick  start to be a  hash function, something that maps strings to an index. There&#39;s a lot to say about hash functions that we won&#39;t and instead just pick a known good function that&#39;s easy to implement.\n def djb2_hash(key): h = 5381 for c in key: h = ((h &lt;&lt; 5 + h) + ord(c)) &amp; 0xffffffff return hstart = djb2_hash\n There&#39;s  quite  a  rabbit hole to go down about this particular function  djb2 (but I won&#39;t do that here).\n Since the goal of the  hash function is to distribute starting points evenly in our array, let&#39;s see that this works (or at least has a good chance of working) if our hash function chooses starting positions completely randomly.\n What follows is a slightly wrong analysis to get an idea of how much time it will take. Or you can instead read a correct one [linear_probing].\n So suppose our hash table has  s slots, there are already  k keys and we try to insert a new  k+1st key.\n Since the  k+1st key has a random starting position, the probability of picking one of the k slots with a key already in it is  k/s. If we&#39;re unlucky and collide with a key, then the probability that we hit another key when moving forward is  (k-1)/(s-1). This is because there are  s-1 slots excluding our starting slot and  k-1 keys in those slots.\n This is actually not true because while there are k-1 keys amongst s-1 slots, they&#39;re not all equally likely to be filled! It would be true if we look at a random slot  start(key, i) instead of  start(key) + i for the  ith slot to examine.\n With that aside aside, let&#39;s continue. If we&#39;re again unlucky and see a filled slot, then the probability that we hit another key when moving forward is  (k-2)/(s-2). And we can keep going.\n (k-i)/(s-i) is at most  k/s and so the probability that we see  t filled slots in our search is at most  (k/s) t. The expected number of full slot we see (before eventually finding an empty slot) is the sum of these values [sum]. That&#39;s at most the infinite sum, which is a geometric series of value  1/(1-k/s) - 1 [geometric] or  1/(1-k/s) total slots examined if we now count the final empty slot in which the key is inserted.\n That means if we have twice as many slots as keys, we expect to look at  1/(1-1/2) = 2 slots on average!\n The actual expected number for linear probing is  1/(1-(k/s) 2) [linear_probing] which means we&#39;ll look at 4 slots which is still not that bad, or we could just have more slots.\n  You&#39;ll notice that key deletion is conspicuously missing from this entire post which makes things simpler. That about what would happen if we just set a  key back to  Empty for key deletion?\n   Being a bootstrapping-centric implementation, Flpc faces another chicken or egg problem for dictionaries: the implementation show in this post needs objects and two arrays. But objects needs attributes looked up, which are implemented using a dictionary. And really, we need a dictionary from function names to either memory location of where the functions are stored or primitives for the bytecode interpreter.\n Even the naive implementation needs arrays of some sort! To resolve this, the function names dictionary is hard-coded into a function&#39;s body.\n def names_get(key): if key == &#34;string1&#34;: return value1 if key == &#34;string2&#34;: return value2 if key == &#34;string3&#34;: return value3 ...\n This does not invalidate what we said before: indeed we needed an array of some sort. It just happens to be the same arrays we use for functions. Flpc functions are represented in memory as arrays of integers, each encoding either a memory location, primitive or (reference to a) constant. (See the  Forth tutorial for an in-depth description of the model. Other details vary slightly.) But they do not offer individual getter and setter method. Instead,  memory.get and  memory.set lets us read and write to absolute positions in memory (so offsets have to be calculated by hand).\n We still need a setter for function names lookup. When compiled, the in-memory representation of the getter  names.get looks something like\n pick1 push: &#34;string1&#34; == push: value1 return_ifpick1 push: &#34;string2&#34; == push: value2 return_ifpick1 push: &#34;string3&#34; == push: value3 return_if...end_of_function\n Above we&#39;re showing what the integer values in memory represent rather than the integers themselves.  return_if takes boolean and value, and returns the value if the boolean is true (and discards both if the boolean is false).\n So to set a new value, we can append a few more entries at the end of  names.get&#39;s body, such as  pick1 push: &#34;string4&#34; == push: value4 return_if and move the call to  end_of_function afterwards (see  functions.add in  boot.flpc for the actual implementation).\n This gets us the naive dictionary for function names. To mimic the hashtable implemented earlier in this post, we need to be able to start at an if-statement in the middle of the function body and we have to wrap around at the end.\n In Flpc&#39;s bootstrapping sequence, we&#39;ll instead use the naive dictionaries to implement everything up to objects and hashtables objects and then rebind  names.get to the body of a new function  hashtable.get(key names) that uses these hashtables. This resolves the chicken or egg problem. Naive-dictionary-as-a-bunch-of-if-statements came first. Unfortunately, this means attribute lookups also use naive hash tables of some sort. They look something like this.\n hashtable.attrib &lt;- fun[name receiver searcher]: return_if(string_equal(name &#34;get&#34;) hashtable.get) return_if(string_equal(name &#34;set&#34;) hashtable.set) return_if(string_equal(name &#34;instance&#34;) hashtable.instance) return_if(string_equal(name &#34;print&#34;) hashtable.print) return_if(string_equal(name &#34;len&#34;) memory.get(receiver)) return_if(string_equal(name &#34;keys&#34;) memory.get(receiver + 1)) return_if(string_equal(name &#34;values&#34;) memory.get(receiver + 2)) return_if(string_equal(name &#34;type&#34;) &#34;hashtable&#34;) return(instance_attrib(name receiver searcher))\n There still one remainding challenge, we have to insert the existing key-value pairs into the new hash table  names. Fortunately, each if-statement occupies a fixed length of 7 cell. So we can iterate through this part of memory and pull out the (already compiled!) key and value that are at specific offsets. This all happens in  stage1b2.flpc.\n convert_names &lt;- fun[]: end = functions.end() index = names.get + 5 cond = not(index &gt; end) repeat_if: drop1(`cond) names . set(memory.get(index) memory.get(index + 3)) index = `index + 7 cond = not(index &gt; end)\n index and  end will contain the indices in memory (=addresses).  memory.get(index) is a string  &#34;string1&#34;, &#34;string2&#34; and so on and  memory.get(index + 3) contains  value1,  value2 and so on.\n  I timed some of the precompiled files with and without hash table, using  time.  time is not always the best tool but is good enough here to get a better idea. I looked at other results before event considering speeding up  names.get in the first place.\n         A bit underwhelming. All it did was give us a ~4x speed up. But we might have moved the bottleneck away from function names lookup. Since speed is dominated by the slowest part (and occasionally parts), even this modest speed up tells us that function names lookup was one of the slower parts.\n  We now want to make attribute lookup (such as  hashtable.attrib from above) use hash tables. Unfortunately, unlike  names.get, each if-statement&#39;s body does not take up the same number of cells in memory. For example\n    because  memory.get(receiver + 1) is done in the functions body itself. We could potentially avoid this by wrapping every value in a function\n  and  hashtable.get_() would just return  hashtable.get. But instead we used an ugly hack with jump tables jumping into the old  hashtable.attrib (from our new definition of  hashtable.attrib). Maybe this will be replaced with something better later.\n  [resizable] We could instead use Python list&#39;s  append which effectively resizes the list as it grows but that increases the requirement from needing only arrays to needing resizable array. And we don&#39;t need resizable array to implement fixed/bounded size hash tables.\n [cascade] And this can have a cascading effect. Even though a third key is alone to start at  index + 1 == start(key3) % len(keys),  key2 could be written to  keys[index + 1] first so  key3 ends up at  keys[index + 2] (or vice-versa).\n [linear_probing] Everything I&#39;ve found leads back to the  Art of Computer Programming Volume 3 pages p 678-682. Unfortunately, its not free and my medium effort level search hasn&#39;t found anywhere that re-explains it. An interesting passage from those pages:\n The author cannot resist inserting a biographical note at this point: I first formulated the followingderivation in 1962, shortly after beginning work on The Art of Computer Programming. Since this wasthe first nontrivial algorithm I had ever analyzed satisfactorily, it had a strong influence on thestructure of these books. Ever since that day, the analysis of algorithms has in fact been one of themajor themes of my life.\n [sum] Basically, it doesn&#39;t matter if we add up the rows or columns of a matrix first and then add up the result: we&#39;ll end up with the sum of all entries in the matrix.\n e1 e2 e3 e4 ... e2 e3 e4 ... e3 e4 ... e4 ... ...\n The probability of seeing exactly  i full slots is the same as the expectation  ei of the indicator random variable for seeing exactly  i full slots. The expected number of full slots seens is the sum over  i (from  1 to  k) of  i * ei and that&#39;s adding up columns first. What we&#39;ve calculated is the sum of the expected value of indicator random variables for seeing at least  i full slots and that&#39;s adding up rows first (by linearity of expectation).\n [geometric] If we multiply the sum of  a t from 0 to infinity by  a, we get the same sum back with the first term  a 0=1 removed. So  1-a times this sum is 1 and the sum is  1/(1-a).", "posttime": "2020-05-19 14:06:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63d0\u9ad8,improvements,key", "title": "\u4f7f\u7528\u54c8\u5e0c\u8868\u63d0\u9ad8\u901f\u5ea6", "title_en": "Speed improvements using hash tables", "transed": 1, "url": "https://blog.asrpo.com/hashtables", "via": "", "real_tags": ["\u63d0\u9ad8", "key"]}, {"category": "", "categoryclass": "", "imagename": "68ff00abfcb82fb556e1921b4468f22e.jpg", "infoid": 1002741, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u201c\u4eca\u65e5\u4f5b\u7f57\u91cc\u8fbe\u201d\u62a5\u9053\uff0c\u968f\u7740\u4f5b\u7f57\u91cc\u8fbe\u5dde\u5f00\u59cb\u91cd\u65b0\u5f00\u653e\uff0c\u4f5b\u7f57\u91cc\u8fbe\u5dde\u51a0\u72b6\u75c5\u6bd2\u4eea\u8868\u76d8\u7684\u5efa\u7b51\u5e08\u517c\u7ecf\u7406\u5ba3\u5e03\u5979\u5df2\u88ab\u514d\u804c\u3002\u4e3d\u8d1d\u5361\u00b7\u743c\u65af\u5728\u5199\u7ed9CBS12\u65b0\u95fb\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\u79f0\uff0c\u5979\u7684\u514d\u804c\u201c\u4e0d\u662f\u81ea\u613f\u7684\u201d\uff0c\u5979\u88ab\u514d\u804c\u662f\u56e0\u4e3a\u5979\u88ab\u547d\u4ee4\u5ba1\u67e5\u4e00\u4e9b\u6570\u636e\uff0c\u4f46\u62d2\u7edd\u201c\u624b\u52a8\u66f4\u6539\u6570\u636e\u4ee5\u4e89\u53d6\u5bf9\u91cd\u5f00\u8ba1\u5212\u7684\u652f\u6301\u201d\u3002", "note_en": "As Florida starts to reopen, the architect and manager of Florida's COVID-19 dashboard, announced she'd been removed from her position, Florida Today reported. Rebekah Jones said in an email to CBS12 News that her removal was \"not voluntary\" and that she was removed from her position because she was ordered to censor some data, but refused to \"manually change data to drum up support for the plan to reopen. \"", "posttime": "2020-05-19 13:06:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51a0\u72b6\u75c5\u6bd2,\u75c5\u6bd2,\u8bbe\u8ba1,florida,\u4f5b\u7f57\u91cc\u8fbe\u5dde", "title": "\u4f5b\u7f57\u91cc\u8fbe\u5dde\u51a0\u72b6\u75c5\u6bd2\u4eea\u8868\u76d8\u7684\u8bbe\u8ba1\u5e08\u5df2\u88ab\u514d\u804c", "title_en": "Architect of Florida's Covid-19 dashboard has been removed from her position", "transed": 1, "url": "https://cbs12.com/news/local/woman-who-designed-floridas-covid-19-dashboard-has-been-removed-from-her-position", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u8bbe\u8ba1", "florida", "\u4f5b\u7f57\u91cc\u8fbe\u5dde"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002740, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e0d\u77e5\u9053\u4f60\u600e\u4e48\u60f3\uff0c\u4f46\u662f\u6ca1\u6709\u4ec0\u4e48\u6bd4\u4e00\u79cd\u8001\u5f0f\u7684\u7f16\u7a0b\u8bed\u8a00\u5486\u54ee\u66f4\u80fd\u8ba9\u6211\u65e9\u4e0a\u884c\u52a8\u8d77\u6765\u4e86\u3002\u770b\u5230\u6709\u4eba\u4f7f\u7528\u5e73\u6c11\u4f7f\u7528\u7684\u90a3\u79cd\u201c\u9cb8\u9c7c\u201d\u8bed\u8a00\uff0c\u5728\u5077\u5077\u8bbf\u95eeStackOverflow\u7684\u95f4\u9699\u8499\u6df7\u8fc7\u5173\uff0c\u8fd9\u4f1a\u6fc0\u8d77\u4eba\u4eec\u7684\u6124\u6012\u3002\n(\u540c\u65f6\uff0c\u4f60\u548c\u6211\u53ea\u4f7f\u7528\u6700\u5f00\u660e\u7684\u8bed\u8a00\u3002(\u4e3a\u50cf\u6211\u4eec\u8fd9\u6837\u7684\u4e13\u4e1a\u5de5\u5320\u4fee\u526a\u6307\u7532\u7684\u624b\u8bbe\u8ba1\u7684\u51ff\u5b50\u5de5\u5177\u3002)\u3002\n\u5f53\u7136\uff0c\u4f5c\u4e3aSaid Screed\u7684\u4f5c\u8005\uff0c\u6211\u6709\u98ce\u9669\u3002\u6211\u6a21\u4eff\u7684\u8bed\u8a00\u53ef\u80fd\u662f\u4f60\u559c\u6b22\u7684\u8bed\u8a00\uff01\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\uff0c\u6211\u672c\u53ef\u4ee5\u8ba9\u4e4c\u5408\u4e4b\u4f17\u5f00\u5200\u535a\u5ba2\u3001\u5e72\u8349\u53c9\u548c\u706b\u70ac\u968f\u65f6\u51c6\u5907\u597d\uff0c\u800c\u6211\u90a3\u611a\u8822\u800c\u987d\u5f3a\u7684\u5c0f\u518c\u5b50\u53ef\u80fd\u4f1a\u62db\u81f4\u4ed6\u4eec\u7684\u6124\u6012\uff01\n\u4e3a\u4e86\u4fdd\u62a4\u81ea\u5df1\u4e0d\u53d7\u90a3\u4e9b\u706b\u7130\u7684\u707c\u70ed\uff0c\u4e5f\u4e3a\u4e86\u907f\u514d\u5192\u72af\u4f60\u53ef\u80fd\u8106\u5f31\u7684\u60c5\u611f\uff0c\u6211\u4f1a\u5486\u54ee\u7740\u8bf4\u4e00\u79cd\u6211\u521a\u521a\u7f16\u9020\u7684\u8bed\u8a00\u3002\u4e00\u4e2a\u552f\u4e00\u76ee\u7684\u5c31\u662f\u8981\u88ab\u70b9\u71c3\u7684\u7a3b\u8349\u4eba\u3002\n\u6211\u77e5\u9053\uff0c\u8fd9\u770b\u8d77\u6765\u6beb\u65e0\u610f\u4e49\uff0c\u5bf9\u5427\uff1f\u76f8\u4fe1\u6211\uff0c\u5230\u6700\u540e\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u8c01\u7684\u8138(\u6216\u51e0\u5f20\u8138\uff01)\u3002\u753b\u5728\u4ed6\u7684\u7a3b\u8349\u5934\u4e0a\u3002\n\u4ec5\u4ec5\u4e3a\u4e86\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u800c\u5b66\u4e60\u4e00\u95e8\u5168\u65b0\u7684(\u7cdf\u7cd5\u7684)\u8bed\u8a00\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u5047\u8bbe\u5b83\u4e0e\u4f60\u6211\u5df2\u7ecf\u77e5\u9053\u7684\u8bed\u8a00\u5927\u81f4\u76f8\u4f3c\u3002\u6211\u4eec\u4f1a\u8bf4\u5b83\u7684\u8bed\u6cd5\u6709\u70b9\u50cfJS\u3002\u82b1\u62ec\u53f7\u548c\u5206\u53f7\u3002\u5982\u679c\uff0c\u5982\u679c\uff0c\u7b49\u7b49\u3002\u7f16\u7a0b\u6d1e\u7a74\u7684\u901a\u7528\u8bed\u3002\n\u6211\u9009\u62e9JS\u5e76\u4e0d\u662f\u56e0\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u5173\u4e8e\u8fd9\u4e2a\u7684\u3002\u8fd9\u53ea\u662f\u4f60\u7684\u8bed\u8a00\uff0c\u666e\u901a\u8bfb\u8005\u7684\u7edf\u8ba1\u4ee3\u8868\uff0c\u6700\u6709\u53ef\u80fd\u7406\u89e3\u3002\u77a7\u554a\uff1a\n\u56e0\u4e3a\u6211\u4eec\u7684\u7a3b\u8349\u4eba\u662f\u4e00\u95e8\u73b0\u4ee3(\u5dee\u52b2)\u7684\u8bed\u8a00\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u6709\u4e00\u6d41\u7684\u529f\u80fd\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5236\u4f5c\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u5185\u5bb9\uff1a\n//\u8fd4\u56de\u5305\u542b\u96c6\u5408\u4e2d//\u6240\u6709\u5339\u914d\u8c13\u8bcd\u7684\u5143\u7d20\u7684\u5217\u8868\u3002\u51fd\u6570\u7b5b\u9009\u5668(\u96c6\u5408\uff0c\u8c13\u8bcd){var result=[]\uff1bfor(var i=0\uff1bi&lt\uff1b\u96c6\u5408\u3002\u957f\u5ea6\uff1bi++){if(\u8c13\u8bcd(Collection[i])\u7ed3\u679c\u3002Push(Collection[i])\uff1b}\u8fd4\u56de\u7ed3\u679c\uff1b}\u3002\n\u8fd9\u662f\u90a3\u4e9b\u9ad8\u9636\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u4eec\u662f\u4f18\u96c5\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u51fa\u6765\u4e86\uff0c\u800c\u4e14\u975e\u5e38\u6709\u7528\u3002\u4f60\u53ef\u80fd\u5df2\u7ecf\u4e60\u60ef\u4e86\u4ed6\u4eec\u5230\u5904\u6446\u5f04\u85cf\u54c1\uff0c\u4f46\u662f\u4e00\u65e6\u4f60\u5185\u5316\u4e86\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f60\u51e0\u4e4e\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u4f1a\u5f00\u59cb\u4f7f\u7528\u5b83\u4eec\u3002\n\u6240\u4ee5\u4f60\u5230\u9547\u4e0a\u53bb\uff0c\u5199\u5404\u79cd\u5f88\u68d2\u7684\u53ef\u91cd\u7528\u7684\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f20\u9012\u51fd\u6570\uff0c\u8c03\u7528\u51fd\u6570\uff0c\u8fd4\u56de\u51fd\u6570\uff0cFuncapalooza\u3002\n\u9664\u4e86\u7b49\u5f85\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u8bed\u8a00\u53d8\u5f97\u53e4\u602a\u7684\u5730\u65b9\u3002\u5b83\u6709\u4e00\u4e2a\u72ec\u7279\u7684\u7279\u70b9\uff1a\n\u6bcf\u4e2a\u51fd\u6570-\u533f\u540d\u56de\u8c03\u6216\u5e38\u89c4\u547d\u540d\u51fd\u6570-\u8981\u4e48\u662f\u7ea2\u8272\u7684\uff0c\u8981\u4e48\u662f\u84dd\u8272\u7684\u3002\u7531\u4e8e\u6211\u7684\u535a\u5ba2\u7684\u4ee3\u7801\u9ad8\u4eae\u7b14\u4e0d\u80fd\u5904\u7406\u5b9e\u9645\u989c\u8272\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u5176\u8bed\u6cd5\u5982\u4e0b\uff1a\nBlue\u00b7function doSomethingAzure(){//\u8fd9\u662f\u4e00\u4e2a\u84dd\u8272\u51fd\u6570.\u3002}red\u00b7\u51fd\u6570doSomethingCarnelian(){//\u8fd9\u662f\u4e00\u4e2ared\u51fd\u6570.\u3002}\u3002\n\u8bed\u8a00\u4e2d\u6ca1\u6709\u6beb\u65e0\u610f\u4e49\u7684\u529f\u80fd\u3002\u60f3\u505a\u4e2a\u51fd\u6570\u5417\uff1f\u5f97\u9009\u4e2a\u989c\u8272\u3002\u8fd9\u662f\u89c4\u5219\u3002\u800c\u4e14\uff0c\u5b9e\u9645\u4e0a\uff0c\u4f60\u8fd8\u5fc5\u987b\u9075\u5faa\u51e0\u6761\u89c4\u5219\uff1a\n\u60f3\u8c61\u4e00\u4e0b\u201c\u84dd\u8272\u547c\u53eb\u201d\u8bed\u6cd5\u548c\u201c\u7ea2\u8272\u547c\u53eb\u201d\u8bed\u6cd5\u3002\u7c7b\u4f3c\u4e8e\uff1a\n\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u4e0e\u5176\u989c\u8272\u76f8\u5bf9\u5e94\u7684\u8c03\u7528\uff0c\u5982\u679c\u8c03\u7528\u9519\u8bef-\u5728\u62ec\u53f7\u540e\u4f7f\u7528\u00b7Blue\u8c03\u7528\u7ea2\u8272\u51fd\u6570\uff0c\u53cd\u4e4b\u4ea6\u7136-\u5b83\u4f1a\u505a\u4e00\u4e9b\u4e0d\u597d\u7684\u4e8b\u60c5\u3002\u4ece\u4f60\u7684\u7ae5\u5e74\u4e2d\u6316\u51fa\u4e00\u4e9b\u88ab\u9057\u5fd8\u5df2\u4e45\u7684\u5669\u68a6\uff0c\u5c31\u50cf\u4e00\u4e2a\u8eb2\u5728\u5e8a\u4e0b\u7684\u4ee5\u86c7\u4e3a\u81c2\u7684\u5c0f\u4e11\u3002\u5b83\u4f1a\u4ece\u4f60\u7684\u76d1\u89c6\u5668\u91cc\u8df3\u51fa\u6765\uff0c\u5438\u8d70\u4f60\u7684\u73bb\u7483\u4f53\u5e7d\u9ed8\u611f\u3002\n\u4f46\u4f60\u4e0d\u80fd\u8d70\u53e6\u4e00\u6761\u8def\u3002\u5982\u679c\u60a8\u5c1d\u8bd5\u8fd9\u6837\u505a\uff1a\n\u8fd9\u4f7f\u5f97\u7f16\u5199\u50cf\u6211\u4eec\u7684filter()\u793a\u4f8b\u8fd9\u6837\u7684\u9ad8\u9636\u51fd\u6570\u53d8\u5f97\u5f88\u56f0\u96be\uff0c\u6211\u4eec\u5fc5\u987b\u4e3a\u5b83\u9009\u62e9\u4e00\u79cd\u989c\u8272\uff0c\u8fd9\u4f1a\u5f71\u54cd\u6211\u4eec\u88ab\u5141\u8bb8\u4f20\u9012\u7ed9\u5b83\u7684\u51fd\u6570\u7684\u989c\u8272\u3002\u663e\u800c\u6613\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06filter()\u8bbe\u7f6e\u4e3a\u7ea2\u8272\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u63a5\u53d7\u7ea2\u8272\u6216\u84dd\u8272\u51fd\u6570\u5e76\u8c03\u7528\u5b83\u4eec\u3002\u4f46\u968f\u540e\u6211\u4eec\u8fdb\u5165\u4e86\u4e0b\u4e00\u4e2a\u4ee4\u4eba\u53d1\u75d2\u7684\u5730\u65b9\uff0c\u90a3\u5c31\u662f\u8fd9\u79cd\u8bed\u8a00\uff1a\n\u73b0\u5728\uff0c\u6211\u4e0d\u4f1a\u7cbe\u786e\u5730\u5b9a\u4e49\u201c\u75db\u82e6\u201d\uff0c\u4f46\u662f\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u7a0b\u5e8f\u5458\u6bcf\u6b21\u8c03\u7528\u4e00\u4e2a\u7ea2\u8272\u51fd\u6570\u90fd\u8981\u7ecf\u5386\u4e00\u4e9b\u70e6\u4eba\u7684\u5708\u5957\u3002\u4e5f\u8bb8\u5b83\u771f\u7684\u5f88\u5197\u957f\uff0c\u6216\u8005\u4e5f\u8bb8\u4f60\u4e0d\u80fd\u5728\u67d0\u4e9b\u7c7b\u578b\u7684\u8bed\u53e5\u4e2d\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e5f\u8bb8\u4f60\u53ea\u80fd\u7528\u8d28\u6570\u7684\u7ebf\u53f7\u547c\u53eb\u4ed6\u4eec\u3002\n\u91cd\u8981\u7684\u662f\uff0c\u5982\u679c\u60a8\u51b3\u5b9a\u5c06\u4e00\u4e2a\u51fd\u6570\u8bbe\u7f6e\u4e3a\u7ea2\u8272\uff0c\u6bcf\u4e2a\u4f7f\u7528\u60a8\u7684API\u7684\u4eba\u90fd\u4f1a\u60f3\u8981\u5728\u60a8\u7684\u5496\u5561\u91cc\u5410\u53e3\u6c34\u548c/\u6216\u5728\u91cc\u9762\u653e\u4e00\u4e9b\u5473\u9053\u66f4\u5dee\u7684\u6db2\u4f53\u3002\n\u90a3\u4e48\u663e\u800c\u6613\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528RED\u51fd\u6570\u3002\u53ea\u8981\u628a\u6240\u6709\u4e1c\u897f\u90fd\u53d8\u6210\u84dd\u8272\uff0c\u4f60\u5c31\u4f1a\u56de\u5230\u6240\u6709\u51fd\u6570\u90fd\u6709\u76f8\u540c\u989c\u8272\u7684\u7406\u667a\u4e16\u754c\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5b83\u4eec\u90fd\u6ca1\u6709\u989c\u8272\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u6211\u4eec\u7684\u8bed\u8a00\u5e76\u4e0d\u5b8c\u5168\u611a\u8822\u3002\n\u5509\uff0c\u8650\u5f85\u72c2\u7684\u8bed\u8a00\u8bbe\u8ba1\u5e08-\u6211\u4eec\u90fd\u77e5\u9053\u6240\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u8bbe\u8ba1\u5e08\u90fd\u662f\u8650\u5f85\u72c2\uff0c\u4e0d\u662f\u5417\uff1f-\u6233\u5230\u4e86\u6211\u4eec\u8eab\u8fb9\u7684\u6700\u540e\u4e00\u6839\u523a\uff1a\n\u6709\u4e00\u4e9b\u5185\u7f6e\u5230\u5e73\u53f0\u4e2d\u7684\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7684\u529f\u80fd\uff0c\u6211\u4eec\u65e0\u6cd5\u81ea\u5df1\u7f16\u5199\uff0c\u53ea\u80fd\u7528\u7ea2\u8272\u8868\u793a\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4e00\u4e2a\u901a\u60c5\u8fbe\u7406\u7684\u4eba\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8bed\u8a00\u6068\u6211\u4eec\u3002\n\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u91cc\u7684\u95ee\u9898\u662f\u6211\u4eec\u8bd5\u56fe\u4f7f\u7528\u66f4\u9ad8\u9636\u7684\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u4e0d\u518d\u7a7f\u7740\u90a3\u4e9b\u529f\u80fd\u7e41\u7410\u7684\u4e1c\u897f\u5230\u5904\u4e71\u8dd1\uff0c\u800c\u662f\u50cf\u4e0a\u5e1d\u5e0c\u671b\u7684\u90a3\u6837\u7f16\u5199\u6b63\u5e38\u7684\u84dd\u9886\u7b2c\u4e00\u7ea7\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u8ba9\u81ea\u5df1\u611f\u5230\u6240\u6709\u7684\u5fc3\u75db\u3002\n\u5982\u679c\u6211\u4eec\u53ea\u8c03\u7528\u84dd\u8272\u51fd\u6570\uff0c\u8bf7\u5c06\u6211\u4eec\u7684\u51fd\u6570\u8bbe\u4e3a\u84dd\u8272\u3002\u53ea\u8981\u6211\u4eec\u4ece\u6765\u4e0d\u5236\u4f5c\u63a5\u53d7\u51fd\u6570\u7684\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u4e0d\u5fc5\u62c5\u5fc3\u8bd5\u56fe\u201c\u591a\u6001\u800c\u4e0d\u662f\u51fd\u6570\u8272\u201d(\u591a\u8272\uff1f)\u3002\u6216\u8005\u8bf8\u5982\u6b64\u7c7b\u7684\u80e1\u8bf4\u516b\u9053\u3002\n\u4f46\u662f\uff0c\u5509\uff0c\u9ad8\u9636\u51fd\u6570\u53ea\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u6bcf\u5f53\u6211\u4eec\u60f3\u8981\u5c06\u7a0b\u5e8f\u5206\u89e3\u6210\u53ef\u91cd\u7528\u7684\u72ec\u7acb\u529f\u80fd\u65f6\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u666e\u904d\u5b58\u5728\u3002\n\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u5c0f\u4ee3\u7801\u5757\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u5b83\u5728\u4e00\u4e2a\u56fe\u8868\u4e0a\u5b9e\u73b0\u4e86Dijkstra\u7684\u7b97\u6cd5\uff0c\u5b83\u4ee3\u8868\u4e86\u4f60\u7684\u793e\u4ea4\u7f51\u7edc\u5bf9\u5f7c\u6b64\u7684\u6324\u538b\u7a0b\u5ea6\u3002(\u6211\u82b1\u4e86\u592a\u957f\u65f6\u95f4\u8bd5\u56fe\u51b3\u5b9a\u8fd9\u6837\u7684\u7ed3\u679c\u5230\u5e95\u4ee3\u8868\u7740\u4ec0\u4e48\u3002\u4f20\u9012\u6027\u4e0d\u53d7\u6b22\u8fce\uff1f)\u3002\n\u7a0d\u540e\uff0c\u60a8\u6700\u7ec8\u9700\u8981\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\u76f8\u540c\u7684\u4ee3\u7801\u5757\u3002\u4f60\u505a\u4e00\u4ef6\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\uff0c\u7136\u540e\u628a\u5b83\u63d0\u5347\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u529f\u80fd\u4e2d\u3002\u60a8\u53ef\u4ee5\u4ece\u65e7\u4f4d\u7f6e\u548c\u4f7f\u7528\u5b83\u7684\u65b0\u4ee3\u7801\u4e2d\u8c03\u7528\u5b83\u3002\u4f46\u5b83\u5e94\u8be5\u662f\u4ec0\u4e48\u989c\u8272\u5462\uff1f\u663e\u7136\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u60a8\u4f1a\u5c06\u5176\u8bbe\u7f6e\u4e3a\u84dd\u8272\uff0c\u4f46\u662f\u5982\u679c\u5b83\u4f7f\u7528\u7684\u662f\u4ec5\u652f\u6301\u7ea2\u8272\u7684\u6838\u5fc3\u5e93\u51fd\u6570\u4e4b\u4e00\uff0c\u90a3\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\u5982\u679c\u4f60\u60f3\u53eb\u5b83\u84dd\u8272\u7684\u65b0\u5730\u65b9\u600e\u4e48\u529e\uff1f\u60a8\u5fc5\u987b\u5c06\u5176\u8bbe\u7f6e\u4e3a\u7ea2\u8272\u3002\u7136\u540e\uff0c\u60a8\u5fc5\u987b\u5c06\u8c03\u7528\u5b83\u7684\u51fd\u6570\u8bbe\u7f6e\u4e3a\u7ea2\u8272\u3002\u5443.\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u4f60\u90fd\u8981\u7ecf\u5e38\u8003\u8651\u989c\u8272\u3002\u5b83\u5c06\u662f\u4f60\u6cf3\u8863\u4e2d\u7684\u6c99\u5b50\uff0c\u5728\u53d1\u5c55\u7684\u6d77\u6ee9\u5ea6\u5047\u3002\n\u5f53\u7136\uff0c\u6211\u8bf4\u7684\u4e0d\u662f\u771f\u7684\u989c\u8272\uff0c\u5bf9\u5417\uff1f\u8fd9\u662f\u4e00\u79cd\u5bd3\u8a00\u5f0f\u7684\u6587\u5b66\u628a\u620f\u3002Sneetch\u4e0d\u662f\u5173\u4e8e\u809a\u76ae\u4e0a\u7684\u661f\u661f\uff0c\u800c\u662f\u5173\u4e8e\u79cd\u65cf\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u5bf9\u989c\u8272\u7684\u5b9e\u9645\u542b\u4e49\u6709\u4e86\u4e00\u4e2a\u5927\u6982\u7684\u4e86\u89e3\u3002\u5982\u679c\u4e0d\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u5927\u53d1\u73b0\uff1a\n\u5982\u679c\u60a8\u5728Node.js\u4e0a\u4f7f\u7528JavaScript\u7f16\u7a0b\uff0c\u5219\u6bcf\u6b21\u901a\u8fc7\u8c03\u7528\u56de\u8c03\u5b9a\u4e49\u4e00\u4e2a\u201c\u8fd4\u56de\u201d\u503c\u7684\u51fd\u6570\u65f6\uff0c\u60a8\u53ea\u9700\u521b\u5efa\u4e00\u4e2a\u7ea2\u8272\u51fd\u6570\u5373\u53ef\u3002\u56de\u8fc7\u5934\u6765\u770b\u770b\u8be5\u89c4\u5219\u5217\u8868\uff0c\u770b\u770b\u6211\u7684\u6bd4\u55bb\u662f\u5982\u4f55\u5806\u53e0\u8d77\u6765\u7684\uff1a\n\u540c\u6b65\u51fd\u6570\u5c06\u5176\u7ed3\u679c\u4f5c\u4e3a\u8fd4\u56de\u503c\u63d0\u4f9b\uff0c\u5f02\u6b65\u51fd\u6570\u901a\u8fc7\u8c03\u7528\u60a8\u4f20\u9012\u7ed9\u5b83\u7684\u56de\u8c03\u6765\u63d0\u4f9b\u7ed3\u679c\u3002\n\u60a8\u4e0d\u80fd\u4ece\u540c\u6b65\u51fd\u6570\u8c03\u7528\u5f02\u6b65\u51fd\u6570\uff0c\u56e0\u4e3a\u5728\u5f02\u6b65\u51fd\u6570\u7a0d\u540e\u5b8c\u6210\u4e4b\u524d\uff0c\u60a8\u65e0\u6cd5\u786e\u5b9a\u7ed3\u679c\u3002\n\u7531\u4e8e\u56de\u8c03\uff0c\u5f02\u6b65\u51fd\u6570\u4e0d\u5728\u8868\u8fbe\u5f0f\u4e2d\u7ec4\u5408\uff0c\u5177\u6709\u4e0d\u540c\u7684\u9519\u8bef\u5904\u7406\uff0c\u5e76\u4e14\u4e0d\u80fd\u4e0etry/catch\u4e00\u8d77\u4f7f\u7528\uff0c\u4e5f\u4e0d\u80fd\u5728\u8bb8\u591a\u5176\u4ed6\u63a7\u5236\u6d41\u8bed\u53e5\u4e2d\u4f7f\u7528\u3002\n\u8282\u70b9\u7684\u5168\u90e8\u7279\u70b9\u662f\u6838\u5fc3\u5e93\u90fd\u662f\u5f02\u6b65\u7684\u3002(\u5c3d\u7ba1\u4ed6\u4eec\u786e\u5b9e\u56de\u62e8\u4e86\uff0c\u5e76\u5f00\u59cb\u6dfb\u52a0\u5f88\u591a\u4e1c\u897f\u7684_Sync()\u7248\u672c\u3002)\u3002\n\u5f53\u4eba\u4eec\u8c08\u8bba\u201c\u56de\u8c03\u5730\u72f1\u201d\u65f6\uff0c\u4ed6\u4eec\u8c08\u8bba\u7684\u662f\u5728\u4ed6\u4eec\u7684\u8bed\u8a00\u4e2d\u6709\u7ea2\u8272\u51fd\u6570\u662f\u591a\u4e48\u70e6\u4eba\u3002\u5f53\u4ed6\u4eec\u521b\u5efa4089\u4e2a\u7528\u4e8e\u5f02\u6b65\u7f16\u7a0b\u7684\u5e93\u65f6\uff0c\u4ed6\u4eec\u8bd5\u56fe\u5728\u5e93\u7ea7\u5904\u7406\u8bed\u8a00\u5f3a\u52a0\u7ed9\u4ed6\u4eec\u7684\u95ee\u9898\u3002\nNode\u793e\u533a\u7684\u4eba\u4eec\u5df2\u7ecf\u610f\u8bc6\u5230\u56de\u8c03\u662f\u4e00\u79cd\u957f\u671f\u7684\u75db\u82e6\uff0c\u5e76\u56db\u5904\u5bfb\u627e\u89e3\u51b3\u65b9\u6848\u3002\u4e00\u79cd\u8ba9\u5f88\u591a\u4eba\u5174\u594b\u7684\u6280\u5de7\u662f\u627f\u8bfa\uff0c\u4f60\u53ef\u80fd\u4e5f\u77e5\u9053\u4ed6\u4eec\u7684\u8bf4\u5531\u6b4c\u624b\u540d\u5b57\u201c\u672a\u6765\u201d\u3002\n\u5982\u679c\u4f60\u628a\u56de\u8c03\u548c\u9519\u8bef\u56de\u8c03\u4f5c\u4e3a\u4e00\u4e2a\u6982\u5ff5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u90a3\u4e48\u627f\u8bfa\u57fa\u672c\u4e0a\u5c31\u662f\u8fd9\u4e2a\u6982\u5ff5\u7684\u5177\u4f53\u5316\u3002\u5b83\u662f\u4ee3\u8868\u5f02\u6b65\u64cd\u4f5c\u7684\u4e00\u7ea7\u5bf9\u8c61\u3002\n\u6211\u5728\u90a3\u6bb5\u8bdd\u91cc\u585e\u8fdb\u4e86\u4e00\u5806\u82b1\u54e8\u7684PL\u8bed\u8a00\uff0c\u6240\u4ee5\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u662f\u4e00\u7b14\u4e0d\u9519\u7684\u4ea4\u6613\uff0c\u4f46\u57fa\u672c\u4e0a\u90fd\u662f\u86c7\u6cb9\u3002\u627f\u8bfa\u786e\u5b9e\u4f1a\u8ba9\u5f02\u6b65\u4ee3\u7801\u66f4\u5bb9\u6613\u7f16\u5199\u3002\u4ed6\u4eec\u7684\u4f5c\u6587\u8981\u597d\u4e00\u4e9b\uff0c\u6240\u4ee5\u89c4\u52194\u4e0d\u662f\u5f88\u7e41\u7410\u3002\n\u4f46\u662f\uff0c\u8001\u5b9e\u8bf4\uff0c\u8fd9\u5c31\u50cf\u662f\u5728\u5185\u810f\u88ab\u6253\u4e00\u62f3\u548c\u5728\u79c1\u5904\u88ab\u6253\u4e00\u62f3\u4e4b\u95f4\u7684\u533a\u522b\u3002\u662f\u7684\uff0c\u6ca1\u6709\u90a3\u4e48\u75db\u82e6\uff0c\u4f46\u6211\u8ba4\u4e3a\u4efb\u4f55\u4eba\u90fd\u4e0d\u5e94\u8be5\u771f\u6b63\u5bf9\u4ef7\u503c\u4e3b\u5f20\u611f\u5230\u5174\u594b\u3002\n\u60a8\u4ecd\u7136\u4e0d\u80fd\u5c06\u5b83\u4eec\u4e0e\u5f02\u5e38\u5904\u7406\u6216\u5176\u4ed6\u63a7\u5236\u6d41\u8bed\u53e5\u4e00\u8d77\u4f7f\u7528\u3002\u60a8\u4ecd\u7136\u4e0d\u80fd\u8c03\u7528\u4ece\u540c\u6b65\u4ee3\u7801\u8fd4\u56de\u672a\u6765\u7684\u51fd\u6570\u3002(\u55ef\uff0c\u4f60\u53ef\u4ee5\uff0c\u4f46\u662f\u5982\u679c\u4f60\u8fd9\u6837\u505a\u4e86\uff0c\u540e\u6765\u7ef4\u62a4\u4f60\u4ee3\u7801\u7684\u4eba\u4f1a\u53d1\u660e\u4e00\u53f0\u65f6\u5149\u673a\uff0c\u56de\u5230\u4f60\u505a\u8fd9\u4ef6\u4e8b\u7684\u90a3\u4e00\u523b\uff0c\u7136\u540e\u75282\u53f7\u94c5\u7b14\u6233\u4f60\u7684\u8138\u3002)\u3002\n\u4f60\u4ecd\u7136\u628a\u4f60\u7684\u6574\u4e2a\u4e16\u754c\u5206\u6210\u5f02\u6b65\u548c\u540c\u6b65\u7684\u4e24\u534a\uff0c\u4ee5\u53ca\u7531\u6b64\u5e26\u6765\u7684\u6240\u6709\u75db\u82e6\u3002\u6240\u4ee5\uff0c\u5373\u4f7f\u4f60\u7684\u8bed\u8a00\u4ee5\u627f\u8bfa\u6216\u672a\u6765\u4e3a\u7279\u8272\uff0c\u5b83\u7684\u8138\u770b\u8d77\u6765\u548c\u6211\u7684\u7a3b\u8349\u4eba\u4e0a\u7684\u5f88\u50cf\u3002\n(\u662f\u7684\uff0c\u8fd9\u610f\u5473\u7740\u751a\u81f3\u8fde\u6211\u4f7f\u7528\u7684\u8bed\u8a00DART\u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5bf9\u56e2\u961f\u4e2d\u7684\u4e00\u4e9b\u4eba\u6b63\u5728\u8bd5\u9a8c\u5176\u4ed6\u5e76\u53d1\u6a21\u578b\u611f\u5230\u975e\u5e38\u5174\u594b\u7684\u539f\u56e0\u3002)\u3002\nC#\u7a0b\u5e8f\u5458\u73b0\u5728\u53ef\u80fd\u611f\u5230\u76f8\u5f53\u81ea\u9e23\u5f97\u610f(\u968f\u7740Hejlsberg\u548c\u4ed6\u7684\u516c\u53f8\u5728\u8bed\u8a00\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u53c8\u4e00\u4e2a\u53ef\u7231\u7684\u7279\u6027\uff0c\u4ed6\u4eec\u8d8a\u6765\u8d8a\u5bb9\u6613\u6210\u4e3a\u8fd9\u79cd\u60c5\u51b5\u7684\u727a\u7272\u54c1)\u3002\u5728C#\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528waitkeyword\u8c03\u7528\u5f02\u6b65\u51fd\u6570\u3002\n\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u50cf\u540c\u6b65\u8c03\u7528\u4e00\u6837\u8f7b\u677e\u5730\u8fdb\u884c\u5f02\u6b65\u8c03\u7528\uff0c\u53ea\u9700\u6dfb\u52a0\u4e00\u4e2a\u53ef\u7231\u7684\u5c0f\u5173\u952e\u5b57\u5373\u53ef\u3002\u60a8\u53ef\u4ee5\u5c06\u7b49\u5f85\u8c03\u7528\u5d4c\u5957\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5728\u5f02\u5e38\u5904\u7406\u4ee3\u7801\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u5c06\u5b83\u4eec\u586b\u5145\u5230\u5185\u90e8\u63a7\u5236\u6d41\u4e2d\u3002\u53d1\u75af\u5427\u3002\u8ba9\u5929\u4e0b\u96e8\uff0c\u7b49\u5f85\u7535\u8bdd\uff0c\u5c31\u50cf\u4ed6\u4eec\u662f\u4f60\u4e3a\u4f60\u7684\u65b0\u8bf4\u5531\u4e13\u8f91\u9884\u4ed8\u7684\u7f8e\u5143\u4e00\u6837\u3002\n\u5f02\u6b65\u7b49\u5f85\u5f88\u4e0d\u9519\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u628a\u5b83\u6dfb\u52a0\u5230DART\u4e2d\u3002\u8fd9\u4f7f\u5f97\u7f16\u5199\u5f02\u6b65\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u4e4f\u5473\u3002\u4f60\u77e5\u9053\u201c\u4f46\u662f\u201d\u5c31\u8981\u6765\u4e86\u3002\u5b83\u662f\u3002\u4f46\u662f\u2026\u3002\u4f60\u4ecd\u7136\u628a\u4e16\u754c\u4e00\u5206\u4e3a\u4e8c\u3002\u8fd9\u4e9b\u5f02\u6b65\u51fd\u6570\u66f4\u5bb9\u6613\u7f16\u5199\uff0c\u4f46\u5b83\u4eec\u4ecd\u7136\u662f\u5f02\u6b65\u51fd\u6570\u3002\n\u4f60\u8fd8\u6709\u4e24\u79cd\u989c\u8272\u3002\u5f02\u6b65\u7b49\u5f85\u89e3\u51b3\u4e86\u607c\u4eba\u7684\u7b2c4\u6761\u89c4\u5219\uff1a\u5b83\u4eec\u4f7fredfunction\u8c03\u7528\u8d77\u6765\u5e76\u4e0d\u6bd4\u8c03\u7528Blue\u51fd\u6570\u5dee\u591a\u5c11\u3002\u4f46\u662f\u6240\u6709\u5176\u4ed6\u7684\u89c4\u5219\u90fd\u8fd8\u5728\u90a3\u91cc\uff1a\n\u540c\u6b65\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u5f02\u6b65\u51fd\u6570\u8fd4\u56de\u503c\u5468\u56f4\u7684Task&lt\uff1bT&gt\uff1b(\u6216\u5728DART\u4e2d\u4e3aFuture&lt\uff1bT&gt\uff1b)\u5305\u88c5\u5668\u3002\n\u5982\u679c\u4f60\u8c03\u7528\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\uff0c\u5f53\u4f60\u771f\u6b63\u60f3\u8981T\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u5f97\u5230\u4e86\u8fd9\u4e2a\u5305\u88c5\u5668\u5bf9\u8c61\u3002\u4f60\u4e0d\u80fd\u89e3\u5f00\u5b83\uff0c\u9664\u975e\u4f60\u628a\u4f60\u7684\u51fd\u6570\u8bbe\u4e3a\u5f02\u6b65\u7684\u5e76\u7b49\u5f85\u5b83\u3002(\u4f46\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u5185\u5bb9\u3002)\u3002\nC#\u7684\u6838\u5fc3\u5e93\u5b9e\u9645\u4e0a\u6bd4\u5f02\u6b65\u66f4\u8001\uff0c\u6240\u4ee5\u6211\u731c\u4ed6\u4eec\u4ece\u6765\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\u3002\n\u8fd9\u6837\u597d\u591a\u4e86\u3002\u6211\u5c06\u5728\u4e00\u5468\u4e2d\u7684\u4efb\u4f55\u4e00\u5929\u91c7\u53d6\u5f02\u6b65\u7b49\u5f85\u7684\u65b9\u5f0f\u8fdb\u884c\u8d64\u88f8\u88f8\u7684\u56de\u8c03\u6216\u671f\u8d27\u4ea4\u6613\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec\u6240\u6709\u7684\u9ebb\u70e6\u90fd\u5728\u4e00\u8d77\uff0c\u90a3\u6211\u4eec\u5c31\u662f\u5728\u81ea\u6b3a\u6b3a\u4eba\u3002\u4e00\u65e6\u60a8\u5f00\u59cb\u5c1d\u8bd5\u7f16\u5199\u9ad8\u9636\u51fd\u6570\u6216\u91cd\u7528\u4ee3\u7801\uff0c\u60a8\u5c31\u4f1a\u9a6c\u4e0a\u610f\u8bc6\u5230\u989c\u8272\u4ecd\u7136\u5b58\u5728\uff0c\u60a8\u7684\u4ee3\u7801\u5e93\u4e2d\u5230\u5904\u90fd\u662f\u8840\u3002\n\u6240\u4ee5JS\u3001DART\u3001C#\u548cPython\u90fd\u6709\u8fd9\u4e2a\u95ee\u9898\u3002CoffeeScript\u548c\u5927\u591a\u6570\u5176\u4ed6\u7f16\u8bd1\u4e3aJS\u7684\u8bed\u8a00\u4e5f\u662f\u5982\u6b64(\u8fd9\u5c31\u662fDart\u7ee7\u627f\u5b83\u7684\u539f\u56e0)\u3002\u6211\u8ba4\u4e3a\u5373\u4f7f\u662fClojureScript\u4e5f\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u5df2\u7ecf\u975e\u5e38\u52aa\u529b\u5730\u7528\u4ed6\u4eec\u7684core.async\u4e1c\u897f\u6765\u53cd\u5bf9\u5b83\u3002\n\u60f3\u77e5\u9053\u4e0d\u662f\u8fd9\u6837\u7684\u5417\uff1f\u722a\u54c7\u3002\u6211\u77e5\u9053\uff0c\u5bf9\u5427\uff1f\u60a8\u591a\u4e45\u4f1a\u8bf4\u4e00\u6b21\uff0c\u201c\u662f\u7684\uff0cJava\u624d\u662f\u771f\u6b63\u505a\u5bf9\u8fd9\u4ef6\u4e8b\u7684\u90a3\u4e2a\u3002\u201d\u4e0d\u8fc7\uff0c\u8fd9\u5c31\u5bf9\u4e86\u3002\u5728\u4ed6\u4eec\u7684\u8fa9\u62a4\u4e2d\uff0c\u4ed6\u4eec\u6b63\u79ef\u6781\u5c1d\u8bd5\u901a\u8fc7\u8f6c\u5411\u671f\u8d27\u548c\u5f02\u6b65IO\u6765\u7ea0\u6b63\u8fd9\u79cd\u758f\u5ffd\u3002\u8fd9\u5c31\u50cf\u662f\u4e00\u573a\u5411\u4e0b\u7684\u8d5b\u8dd1\u3002\nC#\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u6dfb\u52a0\u5f02\u6b65\u7b49\u5f85\u548c\u6240\u6709Task&lt\uff1bT&gt\uff1b\u5185\u5bb9\u4e4b\u524d\uff0c\u60a8\u53ea\u9700\u4f7f\u7528\u5e38\u89c4\u7684\u540c\u6b65API\u8c03\u7528\u3002\u8fd8\u6709\u4e09\u79cd\u8bed\u8a00\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\uff1aGo\u3001Lua\u548cRuby\u3002\n\u87ba\u7eb9\u3002\u6216\u8005\uff0c\u66f4\u51c6\u786e\u5730\u8bf4\uff1a\u591a\u4e2a\u72ec\u7acb\u7684\u8c03\u7528\u6808\uff0c\u53ef\u4ee5\u5728\u5b83\u4eec\u4e4b\u95f4\u5207\u6362\u3002\u5b83\u4eec\u4e0d\u4e00\u5b9a\u8981\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u3002GO\u4e2d\u7684Goroutine\u3001Lua\u4e2d\u7684\u534f\u7a0b\u548cRuby\u4e2d\u7684Fibre\u5b8c\u5168\u591f\u7528\u3002\n(\u8fd9\u5c31\u662fC#\u6709\u8fd9\u4e2a\u5c0f\u5c0f\u7684\u8b66\u544a\u7684\u539f\u56e0\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7ebf\u7a0b\u6765\u907f\u514dC#\u4e2d\u5f02\u6b65\u7684\u75db\u82e6\u3002)\u3002\n\u6839\u672c\u7684\u95ee\u9898\u662f\u201c\u5f53\u64cd\u4f5c\u5b8c\u6210\u65f6\uff0c\u5982\u4f55\u4ece\u60a8\u505c\u6b62\u7684\u5730\u65b9\u7ee7\u7eed\u201d\uff1f\u60a8\u5df2\u7ecf\u6784\u5efa\u4e86\u4e00\u4e9b\u5927\u7684\u8c03\u7528\u5806\u6808\uff0c\u7136\u540e\u8c03\u7528\u4e86\u4e00\u4e9bIO\u64cd\u4f5c\u3002\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u8be5\u64cd\u4f5c\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e95\u5c42\u5f02\u6b65API\u3002\u4f60\u4e0d\u80fd\u7b49\u5f85\u5b83\u5b8c\u6210\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u5b8c\u6210\u3002\u4f60\u5fc5\u987b\u4e00\u76f4\u8fd4\u56de\u5230\u4f60\u7684\u8bed\u8a00\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u4e00\u4e9b\u65f6\u95f4\u6765\u65cb\u8f6c\uff0c\u7136\u540e\u624d\u80fd\u5b8c\u6210\u3002\n\u4e00\u65e6\u662f\u8fd9\u6837\uff0c\u4f60\u5c31\u9700\u8981\u6062\u590d\u4f60\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u3002\u8bed\u8a00\u201c\u8bb0\u4f4f\u81ea\u5df1\u6240\u5728\u4f4d\u7f6e\u201d\u7684\u901a\u5e38\u65b9\u5f0f\u662f\u8c03\u7528\u5806\u6808\u3002\u5b83\u8ddf\u8e2a\u5f53\u524d\u6b63\u5728\u8c03\u7528\u7684\u6240\u6709\u51fd\u6570\u4ee5\u53ca\u6307\u4ee4\u6307\u9488\u5728\u6bcf\u4e2a\u51fd\u6570\u4e2d\u7684\u4f4d\u7f6e\u3002\n\u4f46\u662f\u8981\u6267\u884c\u5f02\u6b65IO\uff0c\u60a8\u5fc5\u987b\u5c55\u5f00\u4e22\u5f03\u6574\u4e2aC\u8c03\u7528\u5806\u6808\u3002\u6709\u70b9\u50cf\u7b2c22\u6761\u519b\u89c4\u3002\u4f60\u53ef\u4ee5\u505a\u8d85\u5feb\u7684IO\uff0c\u4f46\u4f60\u4e0d\u80fd\u5bf9\u7ed3\u679c\u505a\u4efb\u4f55\u4e8b\u60c5\uff01\u6bcf\u79cd\u5177\u6709\u5f02\u6b65IO\u7684\u8bed\u8a00-\u6216\u8005\u5728JS\u7684\u60c5\u51b5\u4e0b\uff0c\u6d4f\u89c8\u5668\u7684\u4e8b\u4ef6\u5faa\u73af-\u90fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5e94\u5bf9\u8fd9\u4e00\u95ee\u9898\u3002\n\u8fd9\u4e9b\u51fd\u6570\u8868\u8fbe\u5f0f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u7ed3\u675f\u4e8e\u5176\u5468\u56f4\u7684\u6240\u6709\u4e0a\u4e0b\u6587\u3002\u8fd9\u4f1a\u5c06\u51b0\u6fc0\u51cc\u548c\u7126\u7cd6\u7b49\u53c2\u6570\u4ece\u5806\u6808\u79fb\u5230\u5806\u4e2d\u3002\u5f53\u5916\u90e8\u51fd\u6570\u8fd4\u56de\u5e76\u4e14\u8c03\u7528\u5806\u6808\u5931\u6548\u65f6\uff0c\u5c31\u5f88\u9177\u4e86\u3002\u8be5\u6570\u636e\u4ecd\u7136\u5728\u5806\u4e2d\u6d6e\u52a8\u3002\n\u95ee\u9898\u662f\uff0c\u60a8\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0\u8fd9\u4e9b\u6b65\u9aa4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u4e2a\u8f6c\u6362\u5b9e\u9645\u4e0a\u6709\u4e00\u4e2a\u540d\u79f0\uff1a\u5ef6\u7eed\u4f20\u9012\u98ce\u683c(Continue-PassingStyle)\u3002\u5b83\u662f\u7531\u8bed\u8a00\u9ed1\u5ba2\u572870\u5e74\u4ee3\u53d1\u660e\u7684\uff0c\u4f5c\u4e3a\u4e00\u79cd\u4e2d\u95f4\u8868\u793a\uff0c\u7528\u5728\u4ed6\u4eec\u7684\u7f16\u8bd1\u5668\u7684\u5185\u90e8\u3002\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u5947\u7279\u7684\u4ee3\u7801\u8868\u793a\u65b9\u5f0f\uff0c\u6070\u597d\u53ef\u4ee5\u4f7f\u4e00\u4e9b\u7f16\u8bd1\u5668\u4f18\u5316\u66f4\u5bb9\u6613\u5b8c\u6210\u3002\n\u4ece\u6765\u6ca1\u6709\u4eba\u60f3\u8fc7\u7a0b\u5e8f\u5458\u4f1a\u5199\u51fa\u8fd9\u6837\u7684\u4ee3\u7801\u3002\u7136\u540e\uff0cNode\u51fa\u73b0\u4e86\uff0c\u7a81\u7136\u4e4b\u95f4\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5047\u88c5\u6210\u7f16\u8bd1\u5668\u540e\u7aef\u3002\u6211\u4eec\u54ea\u91cc\u51fa\u9519\u4e86\uff1f\n\u8bf7\u6ce8\u610f\uff0c\u627f\u8bfa\u548c\u671f\u8d27\u5b9e\u9645\u4e0a\u4e5f\u4e0d\u4f1a\u7ed9\u4f60\u4e70\u5230\u4efb\u4f55\u4e1c\u897f\u3002\u5982\u679c\u60a8\u4f7f\u7528\u8fc7\u5b83\u4eec\uff0c\u60a8\u5c31\u77e5\u9053\u60a8\u4ecd\u7136\u5728\u624b\u5de5\u521b\u5efa\u5927\u91cf\u7684\u51fd\u6570\u6587\u5b57\u3002\u60a8\u53ea\u9700\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9.Then()\uff0c\u800c\u4e0d\u662f\u4f20\u9012\u7ed9\u5f02\u6b65\u51fd\u6570\u672c\u8eab\u3002\n\u5f02\u6b65\u7b49\u5f85\u786e\u5b9e\u6709\u5e2e\u52a9\u3002\u5982\u679c\u60a8\u6253\u5f00\u7f16\u8bd1\u5668\u7684\u5934\u9885\uff0c\u770b\u770b\u5f53\u5b83\u9047\u5230\u7b49\u5f85\u8c03\u7528\u65f6\u5b83\u5728\u505a\u4ec0\u4e48\uff0c\u60a8\u4f1a\u770b\u5230\u5b83\u5b9e\u9645\u4e0a\u6b63\u5728\u8fdb\u884cCPS\u8f6c\u6362\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u60a8\u9700\u8981\u5728C#\u4e2d\u4f7f\u7528aWait\uff1a\u8fd9\u662f\u7f16\u8bd1\u5668\u8bf4\u201c\u5728\u8fd9\u91cc\u5c06\u51fd\u6570\u62c6\u6210\u4e24\u534a\u201d\u7684\u63d0\u793a\u3002\u7b49\u5f85\u4e4b\u540e\u7684\u4e00\u5207\u90fd\u88ab\u63d0\u5347\u5230\u4e00\u4e2a\u65b0\u51fd\u6570\u4e2d\uff0c\u5b83\u4ee3\u8868\u60a8\u5408\u6210\u8be5\u51fd\u6570\u3002\n\u8fd9\u5c31\u662f\u5f02\u6b65\u7b49\u5f85\u5728.NETframework\u4e2d\u4e0d\u9700\u8981\u4efb\u4f55\u8fd0\u884c\u65f6\u652f\u6301\u7684\u539f\u56e0\u3002\u7f16\u8bd1\u5668\u5c06\u5176\u7f16\u8bd1\u6210\u4e00\u7cfb\u5217\u5b83\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u7684\u94fe\u5f0f\u95ed\u5305\u3002(\u6709\u8da3\u7684\u662f\uff0c\u95ed\u5305\u672c\u8eab\u4e5f\u4e0d\u9700\u8981\u8fd0\u884c\u65f6\u652f\u6301\u3002\u5b83\u4eec\u88ab\u7f16\u8bd1\u6210\u533f\u540d\u7c7b\u3002\u5728C#\u4e2d\uff0c\u95ed\u5305\u786e\u5b9e\u662f\u7a77\u4eba\u7684\u5bf9\u8c61\u3002)\u3002\n\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u6211\u4ec0\u4e48\u65f6\u5019\u5e26\u53d1\u7535\u673a\u6765\u3002\u4f60\u7684\u8bed\u8a00\u6709\u6ca1\u6709Year\u5173\u952e\u5b57\uff1f\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u505a\u4e00\u4e9b\u975e\u5e38\u76f8\u4f3c\u7684\u4e8b\u60c5\u3002\n(\u4e8b\u5b9e\u4e0a\uff0c\u6211\u8ba4\u4e3a\u751f\u6210\u5668\u548c\u5f02\u6b65\u7b49\u5f85\u662f\u540c\u6784\u7684\u3002(\u6211\u5728\u786c\u76d8\u7684\u67d0\u4e2a\u9ed1\u6697\u89d2\u843d\u91cc\u6f02\u6d6e\u7740\u4e00\u5c0f\u6bb5\u4ee3\u7801\uff0c\u5b83\u53ea\u4f7f\u7528\u5f02\u6b65\u7b49\u5f85\u5c31\u5b9e\u73b0\u4e86\u751f\u6210\u5668\u98ce\u683c\u7684\u6e38\u620f\u5faa\u73af\u3002)\u3002\n\u6211\u521a\u624d\u8bf4\u5230\u54ea\u91cc\uff1f\u54e6\uff0c\u5bf9\u4e86\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u56de\u8c03\u3001\u627f\u8bfa\u3001\u5f02\u6b65\u7b49\u5f85\u548c\u751f\u6210\u5668\uff0c\u60a8\u6700\u7ec8\u4f1a\u83b7\u5f97\u5f02\u6b65\u51fd\u6570\u5e76\u5c06\u5176\u6d82\u62b9\u5230\u5806\u4e2d\u7684\u4e00\u5806\u95ed\u5305\u4e2d\u3002\n\u60a8\u7684\u51fd\u6570\u5c06\u6700\u5916\u5c42\u7684\u51fd\u6570\u4f20\u9012\u5230\u8fd0\u884c\u5e93\u3002\u5f53\u4e8b\u4ef6\u5faa\u73afOrio\u64cd\u4f5c\u5b8c\u6210\u65f6\uff0c\u5b83\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u60a8\u53ef\u4ee5\u4ece\u60a8\u79bb\u5f00\u7684\u5730\u65b9\u7ee7\u7eed\u3002\u4f46\u8fd9\u610f\u5473\u7740\u4f60\u4e0a\u9762\u7684\u4e00\u5207\u4e5f\u5fc5\u987b\u5f52\u8fd8\u3002\u4f60\u8fd8\u5f97\u628a\u6574\u53e0\u4e1c\u897f\u89e3\u5f00\u3002\n\u8fd9\u5c31\u662f\u201cRED\u51fd\u6570\u53ea\u80fd\u7531RED\u51fd\u6570\u8c03\u7528\u201d\u89c4\u5219\u7684\u6765\u6e90\u3002\u60a8\u5fc5\u987b\u5173\u95ed\u6574\u4e2a\u8c03\u7528\u5806\u6808\uff0c\u76f4\u5230\u8fd4\u56demain()\u6216\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\n\u4f46\u5982\u679c\u60a8\u6709\u7ebf\u7a0b(\u7eff\u8272\u6216\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b)\uff0c\u5219\u4e0d\u9700\u8981\u8fd9\u6837\u505a\u3002\u60a8\u53ea\u9700\u6302\u8d77\u6574\u4e2a\u7ebf\u7a0b\u5e76\u76f4\u63a5\u8df3\u56de\u64cd\u4f5c\u7cfb\u7edf\u6216eventloop\uff0c\u800c\u4e0d\u5fc5\u4ece\u6240\u6709\u8fd9\u4e9b\u51fd\u6570\u8fd4\u56de\u3002\n\u5728\u6211\u770b\u6765\uff0c\u56f4\u68cb\u662f\u505a\u8fd9\u4ef6\u4e8b\u6700\u6f02\u4eae\u7684\u8bed\u8a00\u3002\u4e00\u65e6\u60a8\u6267\u884c\u4efb\u4f55IO\u64cd\u4f5c\uff0c\u5b83\u5c31\u4f1a\u9a7b\u7559\u8be5Goroutine\uff0c\u5e76\u6062\u590dIO\u4e0a\u672a\u963b\u585e\u7684\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c\u3002\n\u5982\u679c\u60a8\u67e5\u770b\u6807\u51c6\u5e93\u4e2d\u7684IO\u64cd\u4f5c\uff0c\u60a8\u4f1a\u53d1\u73b0\u5b83\u4eec\u4f3c\u4e4e\u662f\u540c\u6b65\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ed6\u4eec\u53ea\u662f\u505a\u5de5\u4f5c\uff0c\u7136\u540e\u5728\u505a\u5b8c\u540e\u8fd4\u56de\u7ed3\u679c\u3002\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u4eec\u5728JavaScript\u4e2d\u662f\u540c\u6b65\u7684\u3002\u5176\u4ed6GO\u4ee3\u7801\u53ef\u4ee5\u5728\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u6302\u8d77\u65f6\u8fd0\u884c\u3002\u8fd9\u662f\u56e0\u4e3aGO\u6d88\u9664\u4e86\u540c\u6b65\u548c\u5f02\u6b65\u4ee3\u7801\u4e4b\u95f4\u7684\u533a\u522b\u3002\nGo\u4e2d\u7684\u5e76\u53d1\u6027\u662f\u60a8\u9009\u62e9\u5982\u4f55\u5bf9\u7a0b\u5e8f\u5efa\u6a21\u7684\u4e00\u4e2a\u65b9\u9762\uff0c\u800c\u4e0d\u662f\u6807\u51c6\u5e93\u4e2d\u6bcf\u4e2a\u51fd\u6570\u7684\u989c\u8272\u3002\u8fd9\u610f\u5473\u7740\u6211\u4e0a\u9762\u63d0\u5230\u7684\u4e94\u6761\u89c4\u5219\u7684\u6240\u6709\u75db\u82e6\u90fd\u88ab\u5b8c\u5168\u548c\u5f7b\u5e95\u5730\u6d88\u9664\u4e86\u3002\n\u6240\u4ee5\uff0c\u4e0b\u6b21\u4f60\u5f00\u59cb\u544a\u8bc9\u6211\u4e00\u4e9b\u65b0\u7684\u70ed\u95e8\u8bed\u8a00\uff0c\u5b83\u7684\u5e76\u53d1\u6545\u4e8b\u662f\u591a\u4e48\u68d2\uff0c\u662f\u56e0\u4e3a\u5b83\u6709\u5f02\u6b65API\uff0c\u73b0\u5728\u4f60\u5c31\u77e5\u9053\u6211\u4e3a\u4ec0\u4e48\u5f00\u59cb\u54ac\u7259\u5207\u9f7f\u4e86\u3002\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u4f60\u53c8\u56de\u5230\u4e86\u7ea2\u8272\u548c\u84dd\u8272\u3002", "note_en": "I don\u2019t know about you, but nothing gets me going in the morning quite like agood old fashioned programming language rant. It stirs the blood to see someoneskewer one of those  \u201cblub\u201d languages the plebians use, muddling throughtheir day with it between furtive visits to StackOverflow.\n (Meanwhile, you and I, only use the most enlightened of languages. Chisel-sharptools designed for the manicured hands of expert craftspersons such asourselves.)\n Of course, as the  author of said screed, I run a risk. The language I mockcould be one you like! Without realizing it, I could have let the rabble intomy blog, pitchforks and torches at the ready, and my fool-hardy pamphlet coulddraw their ire!\n To protect myself from the heat of those flames, and to avoid offending yourpossibly delicate sensibilities, instead, I\u2019ll rant about a language I justmade up. A strawman whose sole purpose is to be set aflame.\n I know, this seems pointless right? Trust me, by the end, we\u2019ll see whose face(or faces!) have been painted on his straw noggin.\n  Learning an entire new (crappy) language just for a blog post is a tall order,so let\u2019s say it\u2019s mostly similar to one you and I already know. We\u2019ll say ithas syntax sorta like JS. Curly braces and semicolons.  if,  while, etc. The lingua franca of the programming grotto.\n I\u2019m picking JS  not because that\u2019s what this post is about. It\u2019s just thatit\u2019s the language you, statistical representation of the average reader, aremost likely to be able grok. Voil\u00e0:\n  Because our strawman is a  modern (shitty) language, we also have first-classfunctions. So you can make something like like:\n // Return a list containing all of the elements in collection // that match predicate. function  filter ( collection ,  predicate )  {  var  result  =  [];  for  ( var  i  =  0 ;  i  &lt;  collection . length ;  i ++ )  {  if  ( predicate ( collection [ i ]))  result . push ( collection [ i ]);  }  return  result ; }\n This is one of those  higher-order functions, and, like the name implies, theyare classy as all get out and super useful. You\u2019re probably used to them formucking around with collections, but once you internalize the concept, youstart using them damn near everywhere.\n     So you go to town and write all sorts of awesome reusable libraries andapplications passing around functions, calling functions, returning functions.Functapalooza.\n  Except wait. Here\u2019s where our language gets screwy. It has this one peculiarfeature:\n  Each function\u2014anonymous callback or regular named one\u2014is either redor blue. Since my blog\u2019s code highlighter can\u2019t handle actual color, we\u2019ll saythe syntax is like:\n blue \u2022 function  doSomethingAzure ()  {  // This is a blue function... } red \u2022 function  doSomethingCarnelian ()  {  // This is a red function... }\n There are  no colorless functions in the language. Want to make a function?Gotta pick a color. Them\u2019s the rules. And, actually, there are a couple morerules you have to follow too:\n  Imagine a \u201cblue call\u201d syntax and a \u201cred call\u201d syntax. Something like:\n  When calling a function, you need to use the call that corresponds to its color.If you get it wrong\u2014call a red function with  \u2022blue after the parenthesesor vice versa\u2014it does something bad. Dredge up some long-forgottennightmare from your childhood like a clown with snakes for arms hiding underyour bed. That jumps out of your monitor and sucks out your vitreous humour.\n     But you can\u2019t go the other way. If you try to do this:\n   This makes writing higher-order functions like our  filter() example trickier.We have to pick a color for  it and that affects the colors of the functionswe\u2019re allowed to pass to it. The obvious solution is to make  filter() red.That way, it can take either red or blue functions and call them. But then werun into the next itchy spot in the hairshirt that is this language:\n  For now, I won\u2019t precisely define \u201cpainful\u201d, but just imagine that theprogrammer has to jump through some kind of annoying hoops every time they calla red function. Maybe it\u2019s really verbose, or maybe you can\u2019t do it insidecertain kinds of statements. Maybe you can only call them on line numbers thatare prime.\n What matters is that, if you decide to make a function red, everyone using yourAPI will want to spit in your coffee and/or deposit some even less savoryfluids in it.\n The obvious solution then is to  never use red functions. Just make everythingblue and you\u2019re back to the sane world where all functions have the same color,which is equivalent to them all having no color, which is equivalent to ourlanguage not being entirely stupid.\n Alas, the sadistic language designers\u2014and we all know all programminglanguage designers are sadists, don\u2019t we?\u2014jabbed one final thorn in ourside:\n  There are some functions built in to the platform, functions that we  need touse, that we are unable to write ourselves, that only come in red. At thispoint, a reasonable person might think the language hates us.\n  You might be thinking that the problem here is we\u2019re trying to use higher-orderfunctions. If we just stop flouncing around in all of that functional fripperyand write normal blue collar first-order functions like God intended, we\u2019dspare ourselves all the heartache.\n If we only call blue functions, make our function blue. Otherwise, make it red.As long as we never make functions that accept functions, we don\u2019t have toworry about trying to be \u201cpolymorphic over function color\u201d (polychromatic?) orany nonsense like that.\n But, alas, higher order functions are just one example. This problem ispervasive any time we want to break our program down into separate functionsthat get reused.\n For example, let\u2019s say we have a nice little blob of code that, I don\u2019t know,implements Dijkstra\u2019s algorithm over a graph representing how much your socialnetwork are crushing on each other. (I spent way too long trying to decide whatsuch a result would even represent. Transitive undesirability?)\n Later, you end up needing to use this same blob of code somewhere else. You dothe natural thing and hoist it out into a separate function. You call it fromthe old place and your new code that uses it. But what color should it be?Obviously, you\u2019ll make it blue if you can, but what if it uses one of thosenasty red-only core library functions?\n What if the new place you want to call it is blue? You\u2019ll have to turn it red.Then you\u2019ll have to turn the function that calls  it red. Ugh. No matter what,you\u2019ll have to think about color constantly. It will be the sand in yourswimsuit on the beach vacation of development.\n  Of course, I\u2019m not really talking about color here, am I? It\u2019s an allegory, aliterary trick. The Sneetches isn\u2019t about stars on bellies, it\u2019s about race. Bynow, you may have an inkling of what color actually represents. If not, here\u2019sthe big reveal:\n  If you\u2019re programming in JavaScript on Node.js, everytime you define a functionthat \u201creturns\u201d a value by invoking a callback, you just made a red function.Look back at that list of rules and see how my metaphor stacks up:\n Synchronous functions give their result as a return value, async functionsgive it by invoking a callback you pass to it.\n You can\u2019t call an async function from a synchronous one because you won\u2019t beable to determine the result until the async one completes later.\n Async functions don\u2019t compose in expressions because of the callbacks, havedifferent error-handling, and can\u2019t be used with  try/catch or inside a lotof other control flow statements.\n Node\u2019s whole shtick is that the core libs are all asynchronous. (Though theydid dial that back and start adding  ___Sync() versions of a lot ofthings.)\n When people talk about \u201ccallback hell\u201d they\u2019re talking about how annoying it isto have red functions in their language. When they create  4089 libraries fordoing asynchronous programming, they\u2019re trying to cope at the librarylevel with a problem that the language foisted onto them.\n  People in the Node community have realized that callbacks are a pain for a longtime, and have looked around for solutions. One technique that gets a bunch ofpeople excited is   promises, which you may also know by theirrapper name \u201cfutures\u201d.\n These are sort of a jacked up wrapper around a callback and an error handler.If you think of passing a callback and errorback to a function as a  concept,a promise is basically a  reification of that idea. It\u2019s a first-class objectthat represents an asynchronous operation.\n I just jammed a bunch of fancy PL language in that paragraph so it probablysounds like a sweet deal, but it\u2019s basically snake oil. Promises  do makeasync code a little easier to write. They compose a bit better, so rule #4isn\u2019t  quite so onerous.\n But, honestly, it\u2019s like the difference between being punched in the gut versuspunched in the privates. Less painful, yes, but I don\u2019t think anyone shouldreally get thrilled about the value proposition.\n You still can\u2019t use them with exception handling or other control flowstatements. You still can\u2019t call a function that returns a future fromsynchronous code. (Well, you  can, but if you do, the person who latermaintains your code will invent a time machine, travel back in time to themoment that you did this and stab you in the face with a #2 pencil.)\n You\u2019ve still divided your entire world into asynchronous and synchronous halvesand all of the misery that entails. So, even if your language features promisesor futures, its face looks an awful lot like the one on my strawman.\n (Yes, that means even  Dart, the language I work on. That\u2019s why I\u2019m soexcited some of the team are  experimenting with other concurrencymodels.)\n  C# programmers are probably feeling pretty smug right now (a condition they\u2019veincreasingly fallen prey to as Hejlsberg and company have piled sweet featureafter sweet feature into the language). In C#, you can use  the  awaitkeyword to invoke anasynchronous function.\n This lets you make asynchronous calls just as easily as you can synchronousones, with the tiny addition of a cute little keyword. You can nest  awaitcalls in expressions, use them in exception handling code, stuff them insidecontrol flow. Go nuts. Make it rain  await calls like a they\u2019re dollars in theadvance you got for your new rap album.\n Async-await  is nice, which is why we\u2019re adding it to Dart. It makes it a loteasier to  write asynchronous code. You know a \u201cbut\u201d is coming. It is. But\u2026 you still have divided the world in two. Those async functions areeasier to write, but  they\u2019re still async functions.\n You\u2019ve still got two colors. Async-await solves annoying rule #4: they make redfunctions not much worse to call than blue ones. But all of the other rules arestill there:\n Synchronous functions return values, async ones return  Task&lt;T&gt; (or Future&lt;T&gt; in Dart) wrappers around the value.\n  If you call an async function you\u2019ve got this wrapper object when youactually want the  T. You can\u2019t unwrap it unless you make  your functionasync and await it. (But see below.)\n  C#\u2018s core library is actually older than async so I guess they never hadthis problem.\n It  is better. I will take async-await over bare callbacks or futures any dayof the week. But we\u2019re lying to ourselves if we think all of our troubles aregone. As soon as you start trying to write higher-order functions, or reusecode, you\u2019re right back to realizing color is still there, bleeding all overyour codebase.\n  So JS, Dart, C#, and Python have this problem. CoffeeScript and most otherlanguages that compile to JS do too (which is why Dart inherited it). I  thinkeven ClojureScript has this issue even though they\u2019ve tried really hard to pushagainst it with their  core.async stuff.\n Wanna know one that doesn\u2019t?  Java. I know right? How often do you get to say,\u201cYeah, Java is the one that really does this right.\u201d? But there you go. Intheir defense, they are actively trying to correct this oversight by moving tofutures and async IO. It\u2019s like a race to the bottom.\n C# also actually  can avoid this problem too. They opted  in to having color.Before they added async-await and all of the  Task&lt;T&gt; stuff, you just usedregular sync API calls. Three more languages that don\u2019t have this problem: Go,Lua, and Ruby.\n  Threads. Or, more precisely:  multiple independent callstacks that  can beswitched between. It isn\u2019t strictly necessary for them to be operatingsystem threads. Goroutines in Go, coroutines in Lua, and fibers in Ruby areperfectly adequate.\n (That\u2019s why C# has that little caveat. You can avoid the pain of async in C# byusing threads.)\n  The fundamental problem is \u201cHow do you pick up where you left off when anoperation completes\u201d? You\u2019ve built up some big callstack and then you call someIO operation. For performance, that operation uses the operating system\u2019sunderlying asynchronous API. You  cannot wait for it to complete because itwon\u2019t. You have to return all the way back to your language\u2019s event loop andgive the OS some time to spin before it will be done.\n Once it is, you need to resume what you were doing. The usual way a language\u201cremembers where it is\u201d is the  callstack. That tracks all of the functionsthat are currently being invoked and where the instruction pointer is in eachone.\n But to do async IO, you have to unwind discard the entire C callstack. Kind ofa Catch-22. You can do super fast IO, you just can\u2019t do anything with theresult! Every language that has async IO in its bowels\u2014or in the case ofJS, the browser\u2019s event loop\u2014copes with this in some way.\n   Each of those function expressions  closes over all of its surroundingcontext. That moves parameters like  iceCream and  caramel off the callstackand onto the heap. When the outer function returns and the callstack istrashed, it\u2019s cool. That data is still floating around the heap.\n The problem is you have to  manually reify every damn one of these steps.There\u2019s actually a name for this transformation:   continuation-passingstyle. It was invented by language hackers in the 70s as an intermediaterepresentation to use in the guts of their compilers. It\u2019s a really bizarro wayto represent code that happens to make some compiler optimizations easier todo.\n No one ever for a second thought that a programmer would  write actual codelike that. And then Node came along and all of the sudden here we arepretending to be compiler back-ends. Where did we go wrong?\n Note that promises and futures don\u2019t actually buy you anything, either. Ifyou\u2019ve used them, you know you\u2019re still hand-creating giant piles of functionliterals. You\u2019re just passing them to  .then() instead of to the asynchronousfunction itself.\n  Async-await  does help. If you peel back your compiler\u2019s skull and see whatit\u2019s doing when it hits an  await call you\u2019d see it actually doing theCPS-transform. That\u2019s  why you need to use  await in C#: it\u2019s a clue to thecompiler to say, \u201cbreak the function in half here\u201d. Everything after the await gets hoisted into a new function that it synthesizes on your behalf.\n This is why async-await didn\u2019t need any  runtime support in the .NETframework. The compiler compiles it away to a series of chained closures thatit can already handle. (Interestingly, closures themselves also don\u2019t needruntime support.  They get compiled to anonymous classes. In C#, closuresreally  are a  poor man\u2019s objects.)\n You might be wondering when I\u2019m going to bring up generators. Does yourlanguage have a  yield keyword? Then it can do something very similar.\n (In fact, I  believe generators and async-await are isomorphic. I\u2019ve got a bitof code floating around in some dark corner of my hard disc that implements agenerator-style game loop using only async-await.)\n Where was I? Oh, right. So with callbacks, promises, async-await, andgenerators, you ultimately end up taking your asynchronous function andsmearing it out into a bunch of closures that live over in the heap.\n Your function passes the outermost one into the runtime. When the event loop orIO operation is done, it invokes that function and you pick up where you leftoff. But that means everything above you  also has to return. You still haveto unwind the  whole stack.\n This is where the \u201cred functions can only be called by red functions\u201d rulecomes from. You have to closurify the entire callstack all the way back to main() or the event handler.\n  But if you have threads (green- or OS-level), you don\u2019t need to do that. Youcan just suspend the entire thread and hop straight back to the OS or eventloop  without having to return from all of those functions.\n Go is the language that does this most beautifully in my opinion. As soon asyou do any IO operation, it just parks that goroutine and resumes any otherones that aren\u2019t blocked on IO.\n If you look at the IO operations in the standard library, they seemsynchronous. In other words, they just do work and then return a result whenthey are done. But it\u2019s not that they\u2019re synchronous in the sense that it wouldmean in JavaScript. Other Go code can run while one of these operations ispending. It\u2019s that Go has  eliminated the distinction between synchronous andasynchronous code.\n Concurrency in Go is a facet of how  you choose to model your program, and nota color seared into each function in the standard library. This means all ofthe pain of the five rules I mentioned above is completely and totallyeliminated.\n So, the next time you start telling me about some new hot language and howawesome its concurrency story is because it has asynchronous APIs, now you\u2019llknow why I start grinding my teeth. Because it means you\u2019re right back to redfunctions and blue ones.", "posttime": "2020-05-19 13:05:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u529f\u80fd,color,\u51fd\u6570", "title": "\u4f60\u7684\u529f\u80fd\u662f\u4ec0\u4e48\u989c\u8272\u7684\uff1f", "title_en": "What Color Is Your Function?", "transed": 1, "url": "http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function//", "via": "", "real_tags": ["\u529f\u80fd", "color", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "678413d2b6922bf359a1865921814f7c.jpg", "infoid": 1002739, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u80af\u5854\u57fa\u5dde\u8def\u6613\u65af\u7ef4\u5c14\u3002-\u7f8e\u56fd\u53c2\u8bae\u5458\u5170\u5fb7\u00b7\u4fdd\u7f57(Rand Paul)\u5c31\u524d\u8def\u6613\u65af\u7ef4\u5c14EMT\u5e03\u96f7\u5a1c\u00b7\u6cf0\u52d2(Breonna Taylor)\u88ab\u8b66\u65b9\u67aa\u6740\u4e00\u4e8b\u53d1\u8868\u4e86\u6709\u4e89\u8bae\u7684\u8a00\u8bba\uff0c\u6cf0\u52d2\u5728\u4e00\u6b21\u4e0d\u6572\u95e8\u641c\u67e5\u4ee4\u4e2d\u88ab\u8b66\u65b9\u51fb\u6bd9\uff0c\u4e13\u5bb6\u5bf9\u6b64\u63d0\u51fa\u4e86\u4e25\u5389\u6279\u8bc4\u3002\n\u5728\u7ed9\u201c\u4fe1\u4f7f\u65e5\u62a5\u201d\u7684\u4e00\u4efd\u72ec\u5bb6\u58f0\u660e\u4e2d\uff0c\u8fd9\u4f4d\u5171\u548c\u515a\u8bae\u5458\u5bf9\u8def\u6613\u65af\u7ef4\u5c14\u5730\u94c1\u8b66\u5bdf\u5c403\u670813\u65e5\u641c\u67e5\u6cf0\u52d2\u7684\u516c\u5bd3\u8868\u793a\u62c5\u5fe7\uff0c\u8fd9\u5f15\u53d1\u4e86\u5168\u56fd\u7684\u5f3a\u70c8\u6297\u8bae\u3002\n\u6cd5\u5ead\u8bb0\u5f55\u663e\u793a\uff0c\u8b66\u65b9\u5728\u51cc\u66681\u70b9\u5de6\u53f3\u4f7f\u7528\u649e\u51fb\u9524\u8fdb\u5165\u6cf0\u52d2\u7684\u516c\u5bd3\u4e4b\u524d\uff0c\u83b7\u5f97\u4e86\u7981\u6b62\u6572\u95e8\u4ee4\u3002\u4f5c\u4e3a\u6bd2\u54c1\u8c03\u67e5\u7684\u4e00\u90e8\u5206\u3002\n\u4f46\u902e\u6355\u4ee4\u663e\u793a\uff0c\u6cf0\u52d2\u4e0d\u662f\u8c03\u67e5\u7684\u4e3b\u8981\u5bf9\u8c61\uff0c\u5728\u5979\u88ab\u8b66\u65b9\u5f00\u67aa\u6253\u4e868\u67aa\u540e\uff0c\u5728\u5979\u7684\u516c\u5bd3\u91cc\u6ca1\u6709\u53d1\u73b0\u6bd2\u54c1\u3002\n\u4fdd\u7f57\u8bf4\uff0c\u4efb\u4f55\u4eba\u90fd\u4e0d\u5e94\u8be5\u5728\u6ca1\u6709\u53d7\u5bb3\u8005\u7684\u60c5\u51b5\u4e0b\u4e3a\u8ffd\u6355\u72af\u7f6a\u800c\u727a\u7272\u81ea\u5df1\u7684\u751f\u547d\uff0c\u800c\u4e14\u5e94\u8be5\u7981\u6b62\u902e\u6355\u4ee4\u3002\u5e0c\u671b\u8c03\u67e5\u80fd\u4f38\u5f20\u6b63\u4e49\u3002\n\u80af\u5854\u57fa\u5dde\u5171\u548c\u515a\u53c2\u8bae\u5458\u5170\u5fb7\u00b7\u4fdd\u7f57(Rand Paul)\u5728\u53c2\u8bae\u9662\u536b\u751f\u3001\u6559\u80b2\u3001\u52b3\u5de5\u548c\u517b\u8001\u91d1\u59d4\u5458\u4f1a(Senate Committee for Health\uff0cEducation\uff0cLabor\uff0cand Pensions)\u7684\u865a\u62df\u542c\u8bc1\u4f1a\u4e0a\u53d1\u8868\u8bb2\u8bdd\uff0c2020\u5e745\u670812\u65e5\uff0c\u661f\u671f\u4e8c\uff0c\u534e\u76db\u987f\u56fd\u4f1a\u5c71\u3002(Win McNamee/Pool Via AP)(\u56fe\u7247\u6765\u6e90\uff1aWin McNamee\uff0c\u7f8e\u8054\u793e)\u3002\n\u4fdd\u7f57\u53d1\u8868\u6b64\u756a\u8a00\u8bba\u4e4b\u9645\uff0c\u5f53\u5730\u9886\u5bfc\u4eba\u6b63\u52aa\u529b\u6539\u53d8\u8b66\u65b9\u653f\u7b56\uff0c\u5728\u6cf0\u52d2\u81f4\u547d\u67aa\u51fb\u6848\u53d1\u751f\u540e\uff0c\u8b66\u65b9\u53d1\u51fa\u4e86\u7981\u6b62\u6572\u95e8\u7684\u902e\u6355\u4ee4\u3002\n\u6c11\u4e3b\u515a\u5e02\u957f\u683c\u96f7\u683c\u00b7\u8d39\u820d\u5c14(Greg Fischer)\u5468\u4e00\u5ba3\u5e03\uff0c\u6240\u6709\u4e0d\u6572\u95e8\u641c\u67e5\u4ee4\u73b0\u5728\u90fd\u9700\u8981\u5f97\u5230\u8b66\u5bdf\u5c40\u957f\u6216\u6307\u5b9a\u4eba\u5458\u7684\u6279\u51c6\uff0c\u7136\u540e\u624d\u80fd\u63d0\u4ea4\u7ed9\u6cd5\u5b98\u3002\u4ed6\u8bf4\uff0c\u8fd9\u6837\u505a\u5c06\u63d0\u4f9b\u53e6\u4e00\u4e2a\u6c34\u5e73\u7684\u5ba1\u67e5\u3002\n\u7f8e\u56fd\u6700\u9ad8\u6cd5\u9662\u66fe\u8868\u793a\uff0c\u5f53\u6cd5\u5b98\u5408\u7406\u6000\u7591\u5728\u6848\u4ef6\u7684\u201c\u7279\u6b8a\u60c5\u51b5\u201d\u4e0b\uff0c\u76ee\u6807\u53ef\u80fd\u4f1a\u9500\u6bc1\u8bc1\u636e\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5141\u8bb8\u8b66\u5bdf\u5728\u4e0d\u6572\u95e8\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u641c\u67e5\u3002\n\u7136\u800c\uff0c\u6cd5\u5f8b\u4e13\u5bb6\u6279\u8bc4\u4e86\u6cf0\u52d2\u7684\u902e\u6355\u4ee4\u4e2d\u542b\u7cca\u7684\u63aa\u8f9e\uff0c\u56e0\u4e3a\u5979\u7684\u516c\u5bd3\u6ca1\u6709\u6444\u50cf\u5934\u3002\n\u5217\u514b\u661f\u6566\u5f8b\u5e08\u9a6c\u514b\u00b7\u6c83\u5170\u5fb7(Mark Wohlander)\u662f\u4e00\u540d\u524d\u8054\u90a6\u8c03\u67e5\u5c40\u7279\u5de5\u548c\u8054\u90a6\u68c0\u5bdf\u5b98\uff0c\u4ed6\u672c\u5468\u672b\u544a\u8bc9\u201c\u4fe1\u4f7f\u65e5\u62a5\u201d\uff1a\u201c\u6211\u4e0d\u77e5\u9053\u8fd9\u662f\u600e\u4e48\u6e05\u7406\u4e3b\u7ba1\u529e\u516c\u684c\u7684\u3002\u201d\n\u963f\u80af\u8272\u5927\u5b66(University Of Arkansas)\u6cd5\u5b66\u6559\u6388\u5e03\u83b1\u6069\u00b7\u52a0\u91cc\u5c3c(Brian Gallini)\u66fe\u64b0\u5199\u8fc7\u5173\u4e8e\u7b2c\u56db\u4fee\u6b63\u6848\u7684\u6587\u7ae0\uff0c\u4ed6\u8868\u793a\uff0c\u5982\u679c\u7a81\u51fb\u641c\u67e5\u6cf0\u52d2\u7684\u516c\u5bd3\u5408\u9002\u7684\u8bdd\uff0c\u90a3\u4e48\u6bcf\u4e00\u7b14\u4f8b\u884c\u7684\u6bd2\u54c1\u4ea4\u6613\u90fd\u4f1a\u8bc1\u660e\u4e0d\u6572\u95e8\u7684\u7406\u7531\u662f\u6b63\u5f53\u7684\u3002\n\u4fdd\u7f57\u662f\u4e00\u4f4d\u503e\u5411\u81ea\u7531\u610f\u5fd7\u4e3b\u4e49\u7684\u8bae\u5458\uff0c\u4ed6\u662f\u56fd\u4f1a\u7b2c\u56db\u4fee\u6b63\u6848\u6743\u5229\u6700\u6fc0\u70c8\u7684\u634d\u536b\u8005\u4e4b\u4e00\u3002\u4ed6\u4e4b\u524d\u8868\u8fbe\u4e86\u5bf9\u5f53\u5730\u6267\u6cd5\u90e8\u95e8\u53d8\u5f97\u8fc7\u4e8e\u519b\u4e8b\u5316\u7684\u62c5\u5fe7\u3002\n\u4fdd\u7f57\u57282014\u5e74\u4e3a\u201c\u65f6\u4ee3\u201d\u6742\u5fd7\u64b0\u5199\u7684\u4e00\u7bc7\u4e13\u680f\u6587\u7ae0\u4e2d\u8bf4\uff0c\u4eca\u5929\u7684\u6267\u6cd5\u5b58\u5728\u7cfb\u7edf\u6027\u95ee\u9898\u3002\n\u8fd9\u4f4d\u53c2\u8bae\u5458\u662f\u5728\u5bc6\u82cf\u91cc\u5dde\u5f17\u683c\u68ee\u8b66\u5bdf\u67aa\u674018\u5c81\u7684\u8fc8\u514b\u5c14\u00b7\u5e03\u6717\u540e\u53d1\u8868\u6297\u8bae\u548c\u9a9a\u4e71\u8bb2\u8bdd\u7684\u3002\u5f53\u65f6\u4fdd\u7f57\u8bf4\uff0c\u5927\u653f\u5e9c\u662f\u95ee\u9898\u7684\u6838\u5fc3\u3002\n\u4fdd\u7f57\u57282014\u5e74\u7684\u793e\u8bba\u4e2d\u8bf4\uff0c\u534e\u76db\u987f\u901a\u8fc7\u4f7f\u7528\u8054\u90a6\u8d44\u91d1\u5e2e\u52a9\u5e02\u653f\u5e9c\u5efa\u8bbe\u672c\u8d28\u4e0a\u662f\u5c0f\u578b\u519b\u961f\u7684\u65b9\u5f0f\uff0c\u9f13\u52b1\u4e86\u5f53\u5730\u8b66\u533a\u7684\u519b\u4e8b\u5316-\u8b66\u5bdf\u90e8\u95e8\u7ade\u76f8\u8d2d\u4e70\u8fdc\u8fdc\u8d85\u51fa\u5927\u591a\u6570\u7f8e\u56fd\u4eba\u8ba4\u4e3a\u7684\u6267\u6cd5\u7684\u519b\u4e8b\u88c5\u5907\u3002\n\u4fdd\u7f57\u52a0\u5165\u4e86\u6765\u81ea\u80af\u5854\u57fa\u5dde\u548c\u5168\u56fd\u5404\u5730\u7684\u6c11\u9009\u5b98\u5458\u7684\u884c\u5217\uff0c\u4ed6\u4eec\u5bf9\u6cf0\u52d2\u7684\u67aa\u51fb\u4e8b\u4ef6\u76f4\u8a00\u4e0d\u8bb3\u3002\n\u652f\u6301\u50cf\u8fd9\u6837\u7684\u6545\u4e8b\uff0c\u4eca\u5929\u5c31\u6210\u4e3a\u8ba2\u9605\u8005\u5427\uff01\u5728\u8fd9\u91cc\u83b7\u5f97\u65e0\u9650\u5236\u7684\u6570\u5b57\u8bbf\u95ee\uff01\n\u7f8e\u56fd\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u6c11\u4e3b\u515a\u53c2\u8bae\u5458\u5361\u9a6c\u62c9\u00b7\u54c8\u91cc\u65af(Kamala Harris)\u4e0a\u5468\u8981\u6c42\u8054\u90a6\u8c03\u67e5\u4eba\u5458\u8c03\u67e5\u8fd9\u8d77\u6709\u4e89\u8bae\u7684\u67aa\u51fb\u4e8b\u4ef6\u3002\n\u80af\u5854\u57fa\u5dde\u53c2\u8bae\u9662\u5171\u548c\u515a\u9886\u8896\u7c73\u5947\u00b7\u9ea6\u5eb7\u5948\u5c14(Mitch McConnell)\u8868\u793a\uff0c\u8fd9\u8d77\u67aa\u51fb\u4e8b\u4ef6\u5e94\u8be5\u5f97\u5230\u5f7b\u5e95\u548c\u8fc5\u901f\u7684\u8c03\u67e5\u3002\n\u4ee3\u8868\u534e\u76db\u987f\u8def\u6613\u65af\u7ef4\u5c14\u7684\u4f17\u8bae\u5458\u7ea6\u7ff0\u00b7\u4e9a\u7a46\u65af(John Yarmuth)\u5f62\u5bb9\u6cf0\u52d2\u662f\u4e00\u540d\u52c7\u6562\u65e0\u79c1\u7684\u516c\u4ec6\u3002\u6cf0\u52d2\u662f\u4e00\u540d\u6025\u8bca\u5ba4\u6280\u672f\u4eba\u5458\u3002\u4ed6\u8bf4\uff0c\u67aa\u51fb\u4e8b\u4ef6\u662f\u4e00\u4e2a\u56fd\u5bb6\u538c\u5026\u4e86\u770b\u5230\u548c\u542c\u5230\u9ed1\u4eba\u548c\u68d5\u8272\u751f\u547d\u88ab\u5982\u6b64\u8086\u610f\u548c\u51b7\u9177\u5730\u593a\u8d70\u800c\u611f\u5230\u538c\u5026\u7684\u53c8\u4e00\u4e2a\u4f8b\u5b50\u3002", "note_en": "LOUISVILLE, Ky. \u2014 U.S. Sen. Rand Paul is speaking\u00a0out about the controversial shooting of former Louisville EMT \u00a0Breonna Taylor, who was killed by police during a &#34;no-knock&#34; search warrant that experts have heavily criticized.\n In an exclusive statement to The Courier\u00a0Journal, the Republican lawmaker expressed concern about the Louisville Metro Police Department&#39;s search of Taylor&#39;s apartment on March 13, which has led to a national outcry.\n Court records show police obtained a no-knock warrant before using a battering ram to enter Taylor&#39;s apartment\u00a0at around 1 a.m. as part of a narcotics investigation.\n But the warrant shows Taylor was not the main subject of the investigation, and that no narcotics were found in her apartment after she was shot eight times by police.\n &#34;No one should lose their life in pursuit of a crime without a victim, and &#39;no-knock&#39; warrants should be forbidden,&#34; Paul said. &#34;Let\u2019s hope the investigation provides justice.&#34;\n Sen. Rand Paul, R-Ky., speaks during a virtual Senate Committee for Health, Education, Labor, and Pensions hearing, Tuesday, May 12, 2020 on Capitol Hill in Washington. (Win McNamee/Pool via AP) \u00a0 (Photo: Win McNamee, AP)\n Paul&#39;s comments come as local leaders are\u00a0changing police policies around\u00a0no-knock warrants in the wake of Taylor&#39;s\u00a0fatal shooting.\n Mayor Greg Fischer, a Democrat, announced Monday that  all no-knock warrants will now require approval from the chief of police or a designee before being submitted\u00a0to a judge. He said doing so will provide another &#34;level of scrutiny.&#34;\n The U.S. Supreme Court has said judges may allow police\u00a0to search without knocking when they have a reasonable suspicion that under the \u201cparticular circumstances\u201d of the case, the targets could destroy evidence.\n    Legal experts, however, have criticized the vague\u00a0language in the\u00a0Taylor warrant given her apartment did not have cameras.\n \u201cI don\u2019t know how this ever cleared a supervisor\u2019s desk,\u201d Lexington attorney Mark Wohlander, a former FBI agent and federal prosecutor, told The Courier Journal this weekend.\n  Brian Gallini, a law professor at University of Arkansas\u00a0who has written about the Fourth Amendment, said if a no-knock warrant was appropriate in raiding Taylor&#39;s apartment, &#34;then every routine drug transaction would justify grounds for no-knock.&#34;\n Paul, a libertarian-leaning lawmaker,\u00a0is one of the fiercest defenders\u00a0of Fourth Amendment rights in Congress. He expressed previous concern that local law enforcement is becoming too militarized.\n  &#34;There is a systemic problem with today\u2019s law enforcement,&#34; Paul said in a 2014 op-ed for TIME Magazine.\n The senator was addressing protests and riots in the wake of the Ferguson, Missouri, police shooting of 18-year-old Michael Brown. At the time Paul said &#34;big government&#34; was\u00a0at the heart of the problem.\n &#34;Washington has incentivized the militarization of local police precincts by using federal dollars to help municipal governments build what are essentially small armies \u2014 where police departments compete to acquire military gear that goes far beyond what most of Americans think of as law enforcement,&#34; Paul said in the 2014 editorial.\n Paul joins\u00a0elected officials from Kentucky and around the country who&#39;ve spoken out about Taylor&#39;s shooting.\n Support stories like this one by becoming a subscriber today!  Get unlimited digital access  here!\n U.S. Sen. Kamala Harris, a California Democrat,  demanded last week that\u00a0federal investigators examine\u00a0the controversial shooting.\n  Senate Republican Leader Mitch McConnell, of Kentucky,  said the shooting, &#34;should be thoroughly and promptly investigated.&#34;\n Rep. John Yarmuth, who represents Louisville in Washington, described Taylor, who was an ER technician,\u00a0as a &#34;brave and selfless public servant.&#34; He said the shooting was another example of a &#34;nation sick and tired of seeing and hearing of black and brown lives being taken so wantonly and so coldly.&#34;", "posttime": "2020-05-19 13:04:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e8b\u4ef6,paul,\u6cf0\u52d2", "title": "\u5170\u5fb7\u00b7\u4fdd\u7f57\u8bf4\uff0c\u6cf0\u52d2\u67aa\u51fb\u4e8b\u4ef6\u53d1\u751f\u540e\uff0c\u5e94\u8be5\u7981\u6b62\u65e0\u6572\u95e8\u641c\u67e5\u4ee4", "title_en": "Rand Paul says no-knock warrants should be forbidden in wake of Taylor shooting", "transed": 1, "url": "https://www.courier-journal.com/story/news/politics/2020/05/18/rand-paul-no-knock-warrants-should-forbidden/5215149002/", "via": "", "real_tags": ["\u4e8b\u4ef6", "paul", "\u6cf0\u52d2"]}, {"category": "", "categoryclass": "", "imagename": "28a54bffc5211d85788bf139b16752d2.jpg", "infoid": 1002737, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u7834\u4ea7\u4fdd\u62a4\u4e0b\u7684\u91cd\u7ec4\u8ba1\u5212\u7684\u4e00\u90e8\u5206\uff0cJ.C.Penney\u5c06\u6c38\u4e45\u5173\u95ed\u5176846\u5bb6\u95e8\u5e97\u4e2d\u7684\u8fd130%\u3002\n\u8fd9\u5bb6\u603b\u90e8\u4f4d\u4e8e\u5fb7\u514b\u8428\u65af\u5dde\u7684\u96f6\u552e\u5546\u5468\u4e00\u8868\u793a\uff0c\u8ba1\u5212\u57282\u6708\u4efd\u4e4b\u524d\u5173\u95ed\u7ea6192\u5bb6\u95e8\u5e97\uff0c\u7136\u540e\u57282022\u5e74\u518d\u5173\u95ed50\u5bb6\u95e8\u5e97\u3002\u8fd9\u5c06\u4f7f\u516c\u53f8\u53ea\u5269\u4e0b600\u591a\u5bb6\u95e8\u5e97\u3002\nJ.C.Penney\u5468\u4e94\u7533\u8bf7\u7834\u4ea7\u91cd\u7ec4\uff0c\u6210\u4e3a\u81ea\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u8feb\u4f7f\u95e8\u5e97\u6682\u65f6\u5173\u95ed\u4ee5\u6765\u6700\u5927\u7684\u96f6\u552e\u5546\u3002\u5728\u5ba3\u5e03\u7834\u4ea7\u540e\uff0c\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5176\u5b9e\u4f53\u5e97\u548c\u5728\u7ebf\u9500\u552e\u4e1a\u52a1\u5728\u91cd\u7ec4\u671f\u95f4\u5c06\u7ee7\u7eed\u8425\u4e1a\u3002\nJ.C.Penney\u7684\u9ad8\u7ba1\u8bf4\uff0cJ.C.Penney\u67095\u4ebf\u7f8e\u5143\u7684\u73b0\u91d1\uff0c\u8d37\u6b3e\u4eba\u627f\u8bfa\u518d\u63d0\u4f9b9\u4ebf\u7f8e\u5143\uff0c\u5e2e\u52a9\u516c\u53f8\u5b8c\u6210\u91cd\u7ec4\u3002\n\u968f\u7740\u96f6\u552e\u989d\u66b4\u8dcc\uff0c\u5927\u6d41\u884c\u5df2\u7ecf\u5f00\u59cb\u6253\u51fb\u4e00\u4e9b\u6700\u5f31\u7684\u516c\u53f8\u3002\u5185\u66fc\u00b7\u9a6c\u5e93\u65af(Neiman Marcus)\u548cJ.Crew\u5728J.C.Penney\u4e4b\u524d\u51e0\u5929\u5bfb\u6c42\u7834\u4ea7\u4fdd\u62a4\u3002\u5728\u5927\u6d41\u884c\u5173\u95ed\u7ecf\u6d4e\u4e4b\u524d\uff0c\u8fd9\u4e09\u5bb6\u516c\u53f8\u90fd\u5df2\u7ecf\u8d1f\u503a\u7d2f\u7d2f\uff0c\u4e0e\u6d88\u8d39\u8005\u7684\u8054\u7cfb\u4e5f\u51fa\u73b0\u4e86\u56f0\u96be\u3002\n\u5c24\u5176\u662fJ.C.Penney\uff0c\u591a\u5e74\u6765\u5728\u7535\u5b50\u5546\u52a1\u7684\u589e\u957f\u4e2d\u4e00\u76f4\u5728\u4e0b\u6ed1\u3002\u572840\u4ebf\u7f8e\u5143\u503a\u52a1\u7684\u62d6\u7d2f\u4e0b\uff0c\u8be5\u516c\u53f8\u8fd1\u5e74\u6765\u5173\u95ed\u4e86\u95e8\u5e97\u4ee5\u524a\u51cf\u6210\u672c\u3002\n\u6700\u8fd1\u4e00\u4e2a\u5b63\u5ea6\uff0cJ.C.Penney\u7684\u9500\u552e\u989d\u540c\u6bd4\u4e0b\u964d\u8fd18%\uff0c\u81f334\u4ebf\u7f8e\u5143\uff0c\u6536\u5165\u4e3a2,700\u4e07\u7f8e\u5143\uff0c\u4f4e\u4e8e\u53bb\u5e74\u540c\u671f\u76847,500\u4e07\u7f8e\u5143\u3002J.C.Penney\u57284\u6708\u548c5\u6708\u9519\u8fc7\u4e86\u4e24\u6b21\u503a\u52a1\u507f\u8fd8\uff0c\u5206\u6790\u5e08\u8ba4\u4e3a\u8fd9\u662f\u7834\u4ea7\u7684\u9884\u5146\u3002\n\u9996\u5e2d\u6267\u884c\u5b98\u5409\u5c14\u00b7\u7d22\u5c14\u9676(Jill Soltau)\u4e0a\u5468\u8868\u793a\uff0cJ.C.Penney\u7684\u9886\u5bfc\u5c42\u5728\u91cd\u5efa\u516c\u53f8\u65b9\u9762\u53d6\u5f97\u4e86\u91cd\u5927\u8fdb\u5c55\uff0c\u4f46\u51a0\u72b6\u75c5\u6bd2\u7684\u5173\u95ed\u8868\u660e\uff0c\u4ed6\u4eec\u5fc5\u987b\u6d88\u9664\u503a\u52a1\uff0c\u624d\u80fd\u5168\u9762\u91cd\u632f\u516c\u53f8\u3002\u5979\u8bf4\uff0c\u7834\u4ea7\u662f\u786e\u4fddJCPenney\u5728\u672a\u6765\u51e0\u5341\u5e74\u91cc\u4ee5\u5176100\u591a\u5e74\u7684\u5386\u53f2\u4e3a\u5ba2\u6237\u670d\u52a1\u7684\u6700\u4f73\u9014\u5f84\u3002\nJ.C.Penney\u5df2\u7ecf\u5f00\u59cb\u5728\u4e00\u4e9b\u5730\u70b9\u91cd\u65b0\u5f00\u4e1a\uff0c\u5305\u62ec\u4e9a\u5229\u6851\u90a3\u5dde\u3001\u4f5b\u7f57\u91cc\u8fbe\u5dde\u3001\u4f50\u6cbb\u4e9a\u5dde\u548c\u5fb7\u514b\u8428\u65af\u5dde\u3002\n\u5c31\u5728\u8be5\u516c\u53f8\u7834\u4ea7\u7684\u51e0\u5929\u524d\uff0cJ.C.Penney\u5411\u5176\u9ad8\u7ba1\u652f\u4ed8\u4e86\u6570\u767e\u4e07\u7f8e\u5143\u7684\u5956\u91d1\u3002\u7d22\u5c14\u9676\u83b7\u5f97\u4e86450\u4e07\u7f8e\u5143\uff0c\u800c\u9996\u5e2d\u8d22\u52a1\u5b98\u6bd4\u5c14\u00b7\u6c83\u8d39\u5c14\u3001\u9996\u5e2d\u5546\u52a1\u5b98\u7c73\u6b47\u5c14\u00b7\u74e6\u5179\u6d1b\u548c\u9996\u5e2d\u4eba\u529b\u8d44\u6e90\u5b98\u5e03\u6797\u00b7\u57c3\u6587\u68ee\u5404\u83b7\u5f97\u4e86100\u4e07\u7f8e\u5143\u3002", "note_en": "J.C. Penney will permanently close nearly 30% of its 846 stores as part of a restructuring plan under bankruptcy protection.\n  The Texas-based retailer said Monday it plans to close about 192 stores by February, then another 50 in 2022. That will leave the company with just over 600 stores.\n J.C. Penney\u00a0  filed\u00a0for bankruptcy reorganization Friday, making it the biggest retailer to do since the   coronavirus pandemic forced stores to temporarily close. After announcing bankruptcy, the company said its physical stores and online sales operations will stay open during restructuring.\n  J.C. Penney has $500 million in cash and has commitments from lenders for another $900 million to help the company get through its restructuring, company officials said.\n The pandemic has begun to batter some of the weakest companies as retail sales plunge.   Neiman Marcus\u00a0and\u00a0  J. Crew\u00a0sought bankruptcy protection days before J.C. Penney did. All three were already laden with debt and having trouble connecting with consumers before the pandemic shut f=down the economy.\n J.C. Penney in particular has been declining for years amid the growth of e-commerce. Weighed down by $4 billion in debt, it has closed stores in recent years to cut costs.\n  In its most recent quarter, J.C. Penney&#39;s sales fell nearly 8%, to $3.4 billion, from the year-earlier period, while income was $27 million, down from $75 million for the same period a year ago. J.C. Penney missed two debt payments in April and May, which analysts saw as a harbinger of bankruptcy.\n  CEO Jill Soltau  said last week that J.C. Penney&#39;s leadership made significant progress toward rebuilding the company, but the coronavirus closures showed them they must eliminate debt in order to fully revive the company. She said bankruptcy &#34;is the best path to ensure that JCPenney will build on its over 100-year history to serve our customers for decades to come.&#34;\n J.C. Penney has already begun\u00a0 reopening\u00a0some locations, including in Arizona, Florida, Georgia and Texas.\n The company&#39;s bankruptcy comes days after J.C. Penney gave its top executives millions of dollars in bonus pay. Soltau received $4.5 million, while chief financial officer Bill Wafford, chief merchant officer Michelle Wlazlo and chief human resources officer Brynn Evanson each got $1 million.", "posttime": "2020-05-19 12:48:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u4ea7,part", "title": "\u4f5c\u4e3a\u7834\u4ea7\u8ba1\u5212\u7684\u4e00\u90e8\u5206\uff0cJ.C.Penney\u5c06\u5173\u95ed240\u5bb6\u95e8\u5e97", "title_en": "J.C. Penney is closing 240 stores as part of its bankruptcy plan", "transed": 1, "url": "https://www.cbsnews.com/news/jc-penney-closing250-stores-banktrupcy-restructuring-plan/", "via": "", "real_tags": ["\u7834\u4ea7", "part"]}]