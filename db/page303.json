[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1002960, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2020\u5e745\u670817\u65e5\u7b2c18\u5377\u7b2c2\u671f\u9ed1\u6697\u6a21\u5f0f\u662f\u7528\u6237\u754c\u9762\uff0c\u901a\u8fc7\u5f3a\u8feb\u7528\u6237\u505a\u51fa\u5426\u5219\u53ef\u80fd\u4e0d\u4f1a\u505a\u51fa\u7684\u51b3\u5b9a\uff0c\u4ece\u800c\u4f7f\u5728\u7ebf\u670d\u52a1\u53d7\u76ca\u3002\u4e00\u4e9b\u9ed1\u6697\u6a21\u5f0f\u6b3a\u9a97\u7528\u6237\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u6697\u5730\u91cc\u64cd\u7eb5\u6216\u5f15\u5bfc\u4ed6\u4eec\u505a\u51fa\u4e0d\u7b26\u5408\u4ed6\u4eec\u6700\u4f73\u5229\u76ca\u7684\u9009\u62e9\u3002\u6700\u8fd1\uff0c\u4e00\u4e9b\u9a87\u4eba\u542c\u95fb\u7684\u4f8b\u5b50\u5f15\u53d1\u4e86\u516c\u4f17\u7684\u5f3a\u70c8\u53cd\u5bf9\uff1aTurboTax\u5728\u5176\u7f51\u7ad9\u4e0a\u9690\u85cf\u4e86\u7f8e\u56fd\u653f\u5e9c\u89c4\u5b9a\u7684\u9762\u5411\u4f4e\u6536\u5165\u7528\u6237\u7684\u514d\u7a0e\u6587\u4ef6\u8ba1\u5212\uff0c\u8ba9\u4ed6\u4eec\u4f7f\u7528\u5176\u4ed8\u8d39\u7a0b\u5e8f\uff1b9 Facebook\u8981\u6c42\u7528\u6237\u8f93\u5165\u7535\u8bdd\u53f7\u7801\u8fdb\u884c\u53cc\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u968f\u540e\u4f7f\u7528\u8fd9\u4e9b\u53f7\u7801\u63d0\u4f9b\u6709\u9488\u5bf9\u6027\u7684\u5e7f\u544a\uff1b31 Match.com\u6545\u610f\u8ba9\u9a97\u5b50\u5728\u5176\u5728\u7ebf\u7ea6\u4f1a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u751f\u6210\u611f\u5174\u8da3\u7684\u865a\u5047\u6d88\u606f\uff0c\u4ee5\u8ba9\u7528\u6237\u6ce8\u518c\u5176\u4ed8\u8d39\u670d\u52a1\u300213\u8bb8\u591a\u9ed1\u8272\u56fe\u6848\u5728\u6574\u4e2a\u7f51\u7edc\u4e0a\u88ab\u5927\u89c4\u6a21\u91c7\u7528\u3002\u56fe1\u663e\u793a\u4e86JustFab\u4e0a\u7684\u6b3a\u9a97\u6027\u5012\u8ba1\u65f6\u8ba1\u65f6\u5668\u6697\u6a21\u5f0f\u3002\u5373\u4f7f\u5728\u5b9a\u65f6\u5668\u8d85\u65f6\u4e4b\u540e\uff0c\u901a\u544a\u7684\u62a5\u4ef7\u4ecd\u7136\u6709\u6548\u3002\u8fd9\u79cd\u6a21\u5f0f\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u7b56\u7565-\u6700\u8fd1\u7684\u4e00\u9879\u7814\u7a76\u53d1\u73b0\uff0c140\u4e2a\u8d2d\u7269\u7f51\u7ad9\u4e0a\u90fd\u6709\u8fd9\u6837\u7684\u6b3a\u9a97\u6027\u5012\u8ba1\u65f6\u5668\u300220\u4e2a\u3002\n\u7814\u7a76\u754c\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\u6700\u8fd1\u7684\u52aa\u529b\u5df2\u7ecf\u7f16\u76ee\u4e86\u6570\u5341\u79cd\u6709\u95ee\u9898\u7684\u6a21\u5f0f\uff0c\u6bd4\u5982\u5520\u53e8\u7528\u6237\uff0c\u963b\u788d\u4efb\u52a1\u6d41\uff0c\u8bbe\u7f6e\u4fb5\u72af\u9690\u79c1\u7684\u9ed8\u8ba4\u503c\uff0c1\uff0c18\u5efa\u7acb\u5728Harry Brignull(darkpatterns.org)\u65e9\u671f\u52aa\u529b\u7684\u57fa\u7840\u4e0a\u3002\u7814\u7a76\u4eba\u5458\u8fd8\u89e3\u91ca\u4e86\u6697\u6a21\u5f0f\u662f\u5982\u4f55\u901a\u8fc7\u5229\u7528\u8ba4\u77e5\u504f\u89c1\u6765\u8fd0\u4f5c\u7684\uff0c\u57281200\u591a\u4e2a\u8d2d\u7269\u7f51\u7ad9\u4e0a\u53d1\u73b0\u4e864\uff0c18\uff0c33\u4e2a\u6697\u6a21\u5f0f\uff0c4\u663e\u793a\u8d85\u8fc795%\u7684\u6d41\u884cAndroid\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u6697\u6a21\u5f0f\uff0c8\u5e76\u63d0\u4f9b\u4e86\u521d\u6b65\u8bc1\u636e\uff0c\u8868\u660e\u6697\u6a21\u5f0f\u5728\u64cd\u7eb5\u7528\u6237\u884c\u4e3a\u65b9\u9762\u786e\u5b9e\u6709\u6548\u300219\uff0c30\u3002\n\u5c3d\u7ba1\u5b83\u4eec\u6700\u8fd1\u7a81\u7136\u8fdb\u5165\u4e3b\u6d41\u610f\u8bc6\uff0c\u4f46\u9ed1\u6697\u6a21\u5f0f\u662f30\u5e74\u6765\u8d8b\u52bf\u7684\u7ed3\u679c\uff1a\u4e00\u79cd\u6765\u81ea\u96f6\u552e\u754c(\u6b3a\u9a97\u6027\u505a\u6cd5)\uff0c\u4e00\u79cd\u6765\u81ea\u7814\u7a76\u548c\u516c\u5171\u653f\u7b56(\u8f7b\u63a8)\uff0c\u7b2c\u4e09\u79cd\u6765\u81ea\u8bbe\u8ba1\u754c(\u589e\u957f\u9ed1\u5ba2)\u3002\n\u56fe2\u663e\u793a\u4e86\u8fd9\u4e09\u79cd\u8d8b\u52bf\u4ea4\u6c47\u5904\u7684\u9ed1\u6697\u6a21\u5f0f\u3002\u4e86\u89e3\u8fd9\u4e9b\u8d8b\u52bf-\u4ee5\u53ca\u5b83\u4eec\u662f\u5982\u4f55\u76f8\u4e92\u78b0\u649e\u7684-\u5bf9\u4e8e\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u9ed1\u6697\u6a21\u5f0f\u7684\u5b9e\u9645\u65b0\u7279\u6027\uff0c\u63ed\u5f00\u5b83\u4eec\u4ee4\u4eba\u60ca\u8bb6\u7684\u6709\u6548\u6027\uff0c\u5e76\u5411\u6211\u4eec\u5c55\u793a\u4e3a\u4ec0\u4e48\u4e0e\u5b83\u4eec\u4f5c\u6597\u4e89\u5c06\u662f\u56f0\u96be\u7684\uff0c\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5728\u672c\u6587\u7684\u7ed3\u5c3e\uff0c\u6211\u4eec\u5411\u6709\u9053\u5fb7\u89c2\u5ff5\u7684\u8bbe\u8ba1\u5e08\u63d0\u51fa\u4e86\u4e00\u4e9b\u5efa\u8bae\u3002\n\u96f6\u552e\u4e1a\u7684\u6b3a\u9a97\u6027\u548c\u64cd\u7eb5\u6027\u505a\u6cd5\u7531\u6765\u5df2\u4e45\uff0c\u8303\u56f4\u4ece\u6b63\u5e38\u5316\u5230\u975e\u6cd5(\u56fe3)\u3002\u5176\u4e2d\u4e00\u4e9b\u6280\u672f\uff0c\u5982\u5fc3\u7406\u5b9a\u4ef7(\u5373\u4f7f\u4ef7\u683c\u7565\u4f4e\u4e8e\u6574\u6570)\u5df2\u7ecf\u53d8\u5f97\u5e38\u6001\u5316\u3002\u8fd9\u662f\u5b8c\u5168\u5408\u6cd5\u7684\uff0c\u6d88\u8d39\u8005\u5df2\u7ecf\u52c9\u5f3a\u63a5\u53d7\u4e86\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u4ecd\u7136\u6709\u6548\uff1a\u5982\u679c\u91c7\u7528\u5fc3\u7406\u5b9a\u4ef7\uff0c\u6d88\u8d39\u8005\u5728\u4f9d\u8d56\u8bb0\u5fc6\u65f6\u4f1a\u4f4e\u4f30\u4ef7\u683c\u30023\u4e2a\u3002\n(A)\u5fc3\u7406\u5b9a\u4ef7https://www.crazyspeedtech.com/5-major-stages-psychological-pricing/(B)\u865a\u5047\u505c\u5e97\u5e7f\u544ahttps://www.dealnews.com/features/What-Happens-When-a-Store-Closes/2203265.html(C)\u8bf1\u9975\u6362\u8f66\u5e7f\u544ahttps://www.ftc.gov/enforcement/cases-proceedings/1223269/ganley-ford-west-inc-matter\u66f4\u6709\u95ee\u9898\u7684\u662f\u865a\u5047\u58f0\u79f0\u505c\u5e97\u7b49\u505a\u6cd5\uff0c\u8fd9\u4e9b\u505a\u6cd5\u867d\u7136\u8fdd\u6cd5\uff0c\u4f46\u5f88\u5c11\u6210\u4e3a\u6267\u6cd5\u884c\u52a8\u7684\u76ee\u6807\u3002\u53e6\u4e00\u4e2a\u6781\u7aef\u662f\u8bf1\u9975\u548c\u5207\u6362\u6c7d\u8f66\u5e7f\u544a\uff0c\u6bd4\u5982\u7f8e\u56fd\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a(FTC)\u5728\u514b\u5229\u592b\u5170\u7684\u4e00\u5bb6\u798f\u7279\u7ecf\u9500\u5546\u7684\u5e7f\u544a\uff0c\u5b83\u662fFTC\u884c\u52a8\u7684\u76ee\u6807\u300214.\u3002\n\u572820\u4e16\u7eaa70\u5e74\u4ee3\uff0c\u884c\u4e3a\u7ecf\u6d4e\u5b66\u4e2d\u7684\u542f\u53d1\u5f0f\u548c\u504f\u5dee\u6587\u732e\u8bd5\u56fe\u7406\u89e3\u975e\u7406\u6027\u7684\u51b3\u5b9a\u548c\u884c\u4e3a-\u4f8b\u5982\uff0c\u51b3\u5b9a\u5f00\u8f66\u7684\u4eba\u662f\u56e0\u4e3a\u4ed6\u4eec\u8ba4\u4e3a\u822a\u7a7a\u65c5\u884c\u662f\u5371\u9669\u7684\uff0c\u5c3d\u7ba1\u5f00\u8f66\u5b9e\u9645\u4e0a\u6bcf\u82f1\u91cc\u7684\u5371\u9669\u7a0b\u5ea6\u8981\u9ad8\u51fa\u51e0\u4e2a\u6570\u91cf\u7ea7\u300229\u540d\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u4e86\u4e00\u5957\u4eba\u4eec\u4f7f\u7528\u7684\u8ba4\u77e5\u6377\u5f84\uff0c\u4f7f\u8fd9\u4e9b\u975e\u7406\u6027\u884c\u4e3a\u4e0d\u4ec5\u662f\u53ef\u4ee5\u89e3\u91ca\u7684\uff0c\u751a\u81f3\u662f\u53ef\u4ee5\u9884\u6d4b\u7684\u3002\n\u4f8b\u5982\uff0c\u5728\u4e00\u9879\u5b9e\u9a8c\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u8981\u6c42\u53c2\u4e0e\u8005\u5199\u4e0b\u4e00\u4e2a\u57fa\u672c\u4e0a\u662f\u968f\u673a\u7684\u4e24\u4f4d\u6570\u5b57(\u6bcf\u4f4d\u53c2\u4e0e\u8005\u7684\u793e\u4fdd\u53f7\u7801\u7684\u6700\u540e\u4e24\u4f4d)\uff0c\u7136\u540e\u95ee\u4ed6\u4eec\u662f\u5426\u613f\u610f\u4e3a\u4e00\u74f6\u9152\u652f\u4ed8\u8fd9\u4e2a\u6570\u5b57\uff0c\u6700\u540e\u8981\u6c42\u53c2\u4e0e\u8005\u8bf4\u660e\u4ed6\u4eec\u613f\u610f\u4e3a\u8fd9\u74f6\u9152\u652f\u4ed8\u7684\u6700\u9ad8\u91d1\u989d\u30022\u4ed6\u4eec\u53d1\u73b0\uff0c\u57fa\u4e8e\u4efb\u610f\u7684\u6570\u5b57\uff0c\u652f\u4ed8\u610f\u613f\u5927\u7ea6\u53d8\u5316\u4e86\u4e09\u500d\u3002\u8fd9\u5c31\u662f\u951a\u5b9a\u6548\u5e94\uff1a\u7531\u4e8e\u7f3a\u4e4f\u5bf9\u8fd9\u74f6\u8461\u8404\u9152\u7684\u5e02\u573a\u4ef7\u503c\u7684\u4e86\u89e3\uff0c\u53c2\u4e0e\u8005\u7684\u4f30\u8ba1\u5c31\u4f1a\u56fa\u5b9a\u5728\u4efb\u610f\u7684\u53c2\u8003\u70b9\u4e0a\u3002\u8fd9\u9879\u7814\u7a76\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u4f01\u4e1a\u5982\u4f55\u80fd\u591f\u901a\u8fc7\u5c06\u5ba2\u6237\u7684\u9884\u671f\u951a\u5b9a\u5728\u4e00\u4e2a\u8f83\u9ad8\u7684\u6570\u5b57\u4e0a\uff0c\u6765\u63a8\u52a8\u4ed6\u4eec\u652f\u4ed8\u66f4\u9ad8\u7684\u4ef7\u683c\u3002\u7136\u800c\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u5bf9\u5fc3\u7406\u504f\u5dee\u7684\u7814\u7a76\u5e76\u6ca1\u6709\u53d7\u5230\u96f6\u552e\u6216\u8425\u9500\u5e94\u7528\u7684\u63a8\u52a8\u3002\u90a3\u4f1a\u665a\u4e9b\u65f6\u5019\u6765\u7684\u3002\n\u65e9\u671f\u5173\u4e8e\u8fd9\u4e00\u4e3b\u9898\u7684\u884c\u4e3a\u7814\u7a76\u4fa7\u91cd\u4e8e\u7406\u89e3\uff0c\u800c\u4e0d\u662f\u5e72\u9884\u3002\u5361\u65af\u00b7\u6851\u65af\u5766(Cass Sunstein)\u548c\u7406\u67e5\u5fb7\u00b7\u6cf0\u52d2(Richard Thaler)\u8fd9\u672c\u4e66\u7684\u4f5c\u8005\u5361\u65af\u00b7\u6851\u65af\u5766(Cass Sunstein)\u548c\u7406\u67e5\u5fb7\u00b7\u6cf0\u52d2(Richard Thaler)\u7b49\u4e00\u4e9b\u5b66\u8005\u66f4\u8fdb\u4e00\u6b65\u5730\u63d0\u51fa\u4e86\u4e00\u4e2a\u653f\u7b56\u8bba\u70b9\uff1a\u653f\u5e9c\u3001\u96c7\u4e3b\u548c\u5176\u4ed6\u4ec1\u6148\u7684\u673a\u6784\u5e94\u8be5\u4ee5\u4e00\u79cd\u5229\u7528\u884c\u4e3a\u79d1\u5b66\u9020\u798f\u4e8e\u4ed6\u4eec\u670d\u52a1\u6216\u96c7\u4f63\u7684\u4eba\u7684\u65b9\u5f0f\u6765\u8bbe\u8ba1\u9009\u62e9\u67b6\u6784\u3002\n\u4e00\u4e2a\u8457\u540d\u7684\u4f8b\u5b50(\u56fe4)\u662f\u4eba\u4eec\u5fc5\u987b\u660e\u786e\u63d0\u4f9b\u540c\u610f\u7684\u56fd\u5bb6(\u7ea2\u6761)\u548c\u63a8\u5b9a\u540c\u610f\u7684\u56fd\u5bb6(\u6a59\u6761)\u4e4b\u95f4\u5668\u5b98\u6350\u8d60\u540c\u610f\u7387\u7684\u663e\u8457\u5dee\u5f02\u3002\u56e0\u4e3a\u5927\u591a\u6570\u4eba\u503e\u5411\u4e8e\u4e0d\u6539\u53d8\u9ed8\u8ba4\u9009\u9879\uff0c\u540e\u8005\u4f1a\u5bfc\u81f4\u660e\u663e\u66f4\u9ad8\u7684\u540c\u610f\u7387\u300217.\u3002\n\u4eca\u5929\uff0c\u8f7b\u63a8\u4e0d\u4ec5\u88ab\u653f\u5e9c\u548c\u96c7\u4e3b\u70ed\u60c5\u91c7\u7528\uff0c\u800c\u4e14\u5728\u4e0e\u5ba2\u6237\u6c9f\u901a\u7684\u65b9\u5f0f\u4e0a\u4e5f\u88ab\u4f01\u4e1a\u70ed\u60c5\u91c7\u7528\u3002\u4f60\u53ef\u80fd\u5728\u9152\u5e97\u623f\u95f4\u91cc\u770b\u5230\u7684\u6bdb\u5dfe\u91cd\u590d\u4f7f\u7528\u4fe1\u606f(\u8fd9\u5bb6\u9152\u5e9775%\u7684\u5ba2\u4eba\u901a\u5e38\u4e0d\u6b62\u4e00\u6b21\u4f7f\u7528\u6bdb\u5dfe)\u662f\u6709\u6548\u7684\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u63cf\u8ff0\u6027\u7684\u793e\u4f1a\u89c4\u8303\u4f5c\u4e3a\u89c4\u5b9a\u6027\u89c4\u5219\uff0c\u4fc3\u4f7f\u4eba\u4eec\u6539\u53d8\u4ed6\u4eec\u7684\u884c\u4e3a\u300216\u4e2a\u3002\n\u4e8b\u540e\u770b\u6765\uff0c\u63a8\u6324\u7684\u652f\u6301\u8005\u548c\u6279\u8bc4\u8005\u90fd\u6ca1\u6709\u9884\u6599\u5230\u4f01\u4e1a\u4f1a\u4ee5\u654c\u5bf9\u7684\u65b9\u5f0f\u800c\u4e0d\u662f\u5bb6\u957f\u5f0f\u7684\u65b9\u5f0f\uff0c\u591a\u4e48\u5bb9\u6613\u548c\u6709\u529b\u5730\u91c7\u7528\u8fd9\u4e9b\u6280\u672f\u3002\u5728\u201c\u8f7b\u63a8\u201d\u4e00\u4e66\u4e2d\uff0c\u6851\u65af\u5766\u548c\u6cf0\u52d2\u7b80\u8981\u8ba8\u8bba\u4e86\u5982\u4f55\u5224\u65ad\u8f7b\u63a8\u662f\u5426\u5408\u4e4e\u9053\u5fb7\u7684\u95ee\u9898\uff0c\u4f46\u8ba8\u8bba\u662f\u6577\u884d\u4e86\u4e8b\u7684\u3002\u4f5c\u8005\u4eec\u4f3c\u4e4e\u771f\u7684\u5bf9\u6700\u8fd1\u7684\u4e8b\u6001\u53d1\u5c55\u611f\u5230\u60ca\u8bb6\uff0c\u5e76\u4e0e\u9ed1\u6697\u7684\u6a21\u5f0f\u4fdd\u6301\u4e86\u8ddd\u79bb\uff0c\u4ed6\u4eec\u5c06\u8fd9\u4e9b\u6a21\u5f0f\u8d34\u4e0a\u4e86\u6c61\u57a2\u7684\u6807\u7b7e\u3002\n\u7b2c\u4e09\u4e2a\u8d8b\u52bf-\u4e5f\u662f\u6700\u76f4\u63a5\u6f14\u53d8\u4e3a\u9ed1\u6697\u6a21\u5f0f\u7684\u8d8b\u52bf-\u662f\u589e\u957f\u9ed1\u5ba2\u3002\u6700\u8457\u540d\u7684\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u662f\u6700\u65e9\u7684\u589e\u957f\u9ed1\u5ba2\u653b\u51fb\u662f\u7531Hotmail\u5b9e\u73b0\u7684\u3002\u5f53\u5b83\u57281996\u5e74\u63a8\u51fa\u65f6\uff0c\u521b\u59cb\u4eba\u6700\u521d\u8003\u8651\u7684\u662f\u4f20\u7edf\u7684\u8425\u9500\u65b9\u5f0f\uff0c\u6bd4\u5982\u5e7f\u544a\u724c\u5e7f\u544a\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u79cd\u75c5\u6bd2\u5f0f\u8425\u9500\u7b56\u7565\uff1a\u8be5\u670d\u52a1\u81ea\u52a8\u5728\u6bcf\u5c01\u53d1\u51fa\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\u6dfb\u52a0\u7b7e\u540d\uff0c\u5373\u901a\u8fc7Hotmail\u514d\u8d39\u83b7\u5f97\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5b9e\u8d28\u4e0a\u662f\u8ba9\u7528\u6237\u4ee3\u8868\u5b83\u505a\u5e7f\u544a\uff0c\u5bfc\u81f4\u75c5\u6bd2\u5f0f\u589e\u957f\u300221\u5c81\u3002\n\u8fd9\u6837\u7684\u6210\u529f\u5bfc\u81f4\u4e86Growth Hack\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7279\u7684\u793e\u533a\u7684\u51fa\u73b0\u3002Growth\u9ed1\u5ba2\u63a5\u53d7\u8fc7\u8bbe\u8ba1\u3001\u7f16\u7a0b\u548c\u8425\u9500\u65b9\u9762\u7684\u57f9\u8bad\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u6280\u80fd\u6765\u63a8\u52a8\u4ea7\u54c1\u7684\u91c7\u7528\u3002\nGrowth\u9ed1\u5ba2\u672c\u8d28\u4e0a\u4e0d\u662f\u6b3a\u9a97\u6027\u6216\u64cd\u7eb5\u6027\u7684\uff0c\u4f46\u7ecf\u5e38\u662f\u5728\u5b9e\u8df5\u4e2d\u3002\u4f8b\u5982\uff0c\u5728\u5ea6\u5047\u79df\u8d41\u7b49\u53cc\u8fb9\u5e02\u573a\uff0c\u65b0\u8d35\u4e0d\u53ef\u907f\u514d\u5730\u9762\u4e34\u7740\u9e21\u548c\u86cb\u7684\u95ee\u9898\uff1a\u6ca1\u6709\u65c5\u884c\u8005\u5c31\u6ca1\u6709\u4e1c\u9053\u4e3b\uff0c\u6ca1\u6709\u4e1c\u9053\u4e3b\u5c31\u6ca1\u6709\u65c5\u884c\u8005\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u6837\u7684\u670d\u52a1\u4e2d\u690d\u5165\u865a\u5047\u6216\u4ece\u7ade\u4e89\u5bf9\u624b\u90a3\u91cc\u6284\u88ad\u7684\u5217\u8868\u6210\u4e3a\u4e00\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\u300222\uff0c23\u3002\n\u4e0d\u8db3\u4e3a\u5947\u7684\u662f\uff0cGrowth\u9ed1\u5ba2\u884c\u4e3a\u6709\u65f6\u4f1a\u5bfc\u81f4\u6cd5\u5f8b\u9ebb\u70e6\u3002\u4e00\u79cd\u5e7f\u53d7\u6b22\u8fce\u7684\u589e\u957f\u9ed1\u5ba2\u884c\u4e3a\u6d89\u53ca\u83b7\u53d6\u7528\u6237\u901a\u8baf\u5f55\u7684\u8bbf\u95ee\u6743\u9650--\u901a\u5e38\u4f7f\u7528\u6b3a\u9a97\u624b\u6bb5--\u7136\u540e\u5411\u8fd9\u4e9b\u8054\u7cfb\u4eba\u53d1\u9001\u5783\u573e\u90ae\u4ef6\uff0c\u9080\u8bf7\u4ed6\u4eec\u5c1d\u8bd5\u67d0\u9879\u670d\u52a1\u3002\u9080\u8bf7\u672c\u8eab\u53ef\u80fd\u662f\u6b3a\u9a97\u6027\u7684\uff0c\u56e0\u4e3a\u770b\u8d77\u6765\u662f\u6765\u81ea\u7528\u6237\uff0c\u800c\u5b9e\u9645\u4e0a\u7528\u6237\u5e76\u4e0d\u77e5\u9053\u6b63\u5728\u53d1\u9001\u7684\u7535\u5b50\u90ae\u4ef6\u3002LinkedIn\u5c312011\u5e74\u81f32014\u5e74\u671f\u95f4\u4f7f\u7528\u7684\u6b63\u662f\u8fd9\u79cd\u505a\u6cd5\u8fbe\u6210\u4e86\u4e00\u9879\u96c6\u4f53\u8bc9\u8bbc\u548c\u89e3\u300225\u4e2a\n\u4f46\u4e3a\u4ec0\u4e48\u662f\u589e\u957f\uff0c\u800c\u4e0d\u662f\u6536\u5165\u6216\u5176\u4ed6\u76ee\u6807\uff1f\u8fd9\u53cd\u6620\u4e86\u7845\u8c37\u7684\u589e\u957f\u4f18\u5148\u53e3\u53f7\uff0c\u5373\u628a\u521b\u6536\u6d3b\u52a8\u653e\u5728\u4e00\u8fb9\uff0c\u76f4\u5230\u83b7\u5f97\u552e\u540e\u5e02\u573a\u4e3b\u5bfc\u5730\u4f4d\u3002\u5f53\u7136\uff0c\u6700\u7ec8\uff0c\u7531\u4e8e\u9971\u548c\u6216\u7ade\u4e89\uff0c\u6bcf\u9879\u670d\u52a1\u90fd\u4f1a\u9047\u5230\u589e\u957f\u7684\u9650\u5236\uff0c\u6240\u4ee5Growth\u9ed1\u5ba2\u5f00\u59cb\u8c03\u6574\u4ed6\u4eec\u7ecf\u5e38\u64cd\u7eb5\u7684\u6280\u672f\uff0c\u4ee5\u4ece\u73b0\u6709\u7528\u6237\u90a3\u91cc\u69a8\u53d6\u6536\u5165\u5e76\u4f7f\u5176\u6700\u5927\u5316\u3002\n\u5728\u5f00\u53d1\u4ed6\u4eec\u7684\u4e00\u7cfb\u5217\u5fc3\u7406\u4f0e\u4fe9\u65f6\uff0cGrowth\u9ed1\u5ba2\u62e5\u6709\u4e24\u79cd\u4f20\u7edf\u4e0a\u5728\u7ebf\u4e0b\u96f6\u552e\u4e2d\u65e0\u6cd5\u83b7\u5f97\u7684\u6b66\u5668\u3002\u9996\u5148\uff0c\u63a8\u52a8\u8fd0\u52a8\u5e2e\u52a9\u63ed\u793a\u4e86\u884c\u4e3a\u6539\u53d8\u7684\u539f\u5219\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u76f4\u63a5\u7814\u7a76\u5fc3\u7406\u8be1\u8ba1\u5bf9\u9500\u552e\u5f71\u54cd\u7684\u8425\u9500\u6587\u732e\u76f8\u5bf9\u6709\u9650\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u6293\u4f4f\u57fa\u672c\u539f\u5219\uff0c\u800c\u4e14\u4ec5\u9650\u4e8e\u96f6\u552e\u9886\u57df\u3002\n\u7b2c\u4e8c\u4e2a\u6b66\u5668\u662fA/B\u6d4b\u8bd5(\u56fe5)\u3002\u901a\u8fc7\u5c06\u7f51\u9875\u7684\u53d8\u4f53\u63d0\u4f9b\u7ed9\u4e24\u4e2a\u6216\u66f4\u591a\u968f\u673a\u9009\u62e9\u7684\u7528\u6237\u5b50\u96c6\uff0c\u8bbe\u8ba1\u8005\u5f00\u59cb\u53d1\u73b0\uff0c\u5373\u4f7f\u5bf9\u8bbe\u8ba1\u5143\u7d20\u8fdb\u884c\u770b\u4f3c\u5fae\u4e0d\u8db3\u9053\u7684\u66f4\u6539\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u884c\u4e3a\u4e0a\u7684\u91cd\u5927\u5dee\u5f02\u3002\u7528\u6237\u754c\u9762\u7684\u6570\u636e\u9a71\u52a8\u4f18\u5316\u7684\u601d\u60f3\u5df2\u7ecf\u5728\u8bb8\u591a\u516c\u53f8\u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u6839\u6df1\u8482\u56fa\u3002\u5bf9\u4e8e\u62e5\u6709\u6570\u767e\u4e07\u7528\u6237\u7684\u5927\u578b\u5728\u7ebf\u670d\u52a1\u6765\u8bf4\uff0c\u901a\u5e38\u4f1a\u6709\u6570\u5341\u4e2aA/B\u6d4b\u8bd5\u5e76\u884c\u8fd0\u884c\uff0c\u6b63\u5982\u66fe\u662f\u8c37\u6b4c\u9876\u7ea7\u89c6\u89c9\u8bbe\u8ba1\u5e08\u7684\u9053\u683c\u62c9\u65af\u00b7\u9c8d\u66fc(Douglas Bowman)\u57282009\u5e74\u6307\u51fa\u7684\u90a3\u6837\uff1a\n\u662f\u7684\uff0c\u8c37\u6b4c\u7684\u4e00\u4e2a\u56e2\u961f\u786e\u5b9e\u65e0\u6cd5\u5728\u4e24\u79cd\u84dd\u8272\u4e2d\u505a\u51fa\u9009\u62e9\uff0c\u6240\u4ee5\u4ed6\u4eec\u6d4b\u8bd5\u4e86\u4e24\u79cd\u84dd\u8272\u4e4b\u95f4\u768441\u79cd\u8272\u8c03\uff0c\u770b\u54ea\u79cd\u8868\u73b0\u66f4\u597d\u3002\u6211\u6700\u8fd1\u8ba8\u8bba\u4e86\u8fb9\u6846\u5e94\u8be5\u662f3\u30014\u8fd8\u662f5\u50cf\u7d20\u5bbd\u7684\u95ee\u9898\uff0c\u5e76\u88ab\u8981\u6c42\u8bc1\u660e\u6211\u7684\u89c2\u70b9\u3002\u6211\u4e0d\u80fd\u5728\u90a3\u6837\u7684\u73af\u5883\u4e0b\u5de5\u4f5c\u3002\u6211\u5df2\u7ecf\u538c\u5026\u4e86\u4e89\u8bba\u5982\u6b64\u5fae\u4e0d\u8db3\u9053\u7684\u8bbe\u8ba1\u51b3\u5b9a\u3002\u8fd9\u4e2a\u4e16\u754c\u4e0a\u6709\u66f4\u591a\u4ee4\u4eba\u5174\u594b\u7684\u8bbe\u8ba1\u95ee\u9898\u9700\u8981\u89e3\u51b3\u3002-\u9053\u683c\u62c9\u65af\u00b7\u9c8d\u66fc(Douglas Bowman)\u3002\nA/B\u6d4b\u8bd5\u88ab\u8bc1\u660e\u662f\u53d1\u5c55\u9ed1\u6697\u6a21\u5f0f\u7684\u5173\u952e\uff0c\u56e0\u4e3a\u5982\u4f55\u5c06\u793e\u4f1a\u8bc1\u660e\u7b49\u62bd\u8c61\u539f\u5219\u8f6c\u5316\u4e3a\u5177\u4f53\u7684\u63a8\u52a8\u4f5c\u7528\u8fdc\u4e0d\u662f\u663e\u800c\u6613\u89c1\u7684(\u73b0\u5728\u67097\u4e2a\u4eba\u5728\u770b\u8fd9\u5bb6\u9152\u5e97\uff01)\u3002\u53e6\u4e00\u4e2a\u793a\u4f8b\uff1a\u5e94\u8be5\u8bbe\u7f6e\u5047\u5012\u8ba1\u65f6\u8ba1\u65f6\u5668\u591a\u957f\u65f6\u95f4(\u6b64\u4ea4\u6613\u5c06\u572815\u5206\u949f\u5185\u5230\u671f\uff01&#34\uff1b.&#34\uff1b14\uff1a59&#34\uff1b.&#34\uff1b14\uff1a58&34\uff1b.)\uff0c\u4ee5\u4fbf\u7528\u6237\u7d27\u6025\u4f46\u4e0d\u6050\u614c\uff1f\u5728\u7ebf\u5b9e\u9a8c\u8ba9\u8bbe\u8ba1\u5e08\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u5c31\u80fd\u627e\u5230\u7b54\u6848\u3002\n\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u3002\u968f\u7740\u7f51\u7edc\u7ecf\u6d4e\u7684\u6210\u719f\uff0c\u670d\u52a1\u5c06\u6ce8\u610f\u529b\u4ece\u589e\u957f\u8f6c\u5411\u6536\u5165\u3002\u4ed6\u4eec\u4f7f\u7528\u4e86\u884c\u4e3a\u5f71\u54cd\u7684\u539f\u5219\uff0c\u4f46\u5374\u98a0\u8986\u4e86\u53d1\u73b0\u8fd9\u4e9b\u539f\u5219\u7684\u7814\u7a76\u4eba\u5458\u7684\u610f\u56fe\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4f7f\u7528\u8fd9\u4e9b\u539f\u5219\u7684\u65b9\u5f0f\u7834\u574f\u4e86\u6d88\u8d39\u8005\u7684\u81ea\u4e3b\u6743\u548c\u77e5\u60c5\u9009\u62e9\u3002\u4ed6\u4eec\u4f7f\u7528A/B\u6d4b\u8bd5\u5c06\u884c\u4e3a\u6d1e\u5bdf\u529b\u8f6c\u5316\u4e3a\u975e\u5e38\u6709\u6548\u7684\u7528\u6237\u754c\u9762\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u662f\u96f6\u552e\u4e1a\u957f\u671f\u4f7f\u7528\u7684\u6280\u5de7\u7684\u4f18\u5316\u7248\u672c\uff0c\u4f46\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u662f\u5168\u65b0\u7684\u3002\n\u786e\u5207\u5730\u8bf4\uff0c\u6697\u6a21\u5f0f\u662f\u5982\u4f55\u5e2e\u52a9\u4e00\u5bb6\u516c\u53f8\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u5176\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u6536\u5165\u7684\u80fd\u529b\u7684\u5462\uff1f\u6700\u660e\u663e\u7684\u65b9\u5f0f\u5c31\u662f\u7b80\u5355\u5730\u63a8\u52a8(\u6216\u6b3a\u9a97)\u6d88\u8d39\u8005\u82b1\u66f4\u591a\u7684\u94b1\u3002\n\u9ed1\u6697\u6a21\u5f0f\u7684\u4e00\u4e2a\u4e0d\u592a\u660e\u663e\u4f46\u540c\u6837\u666e\u904d\u7684\u76ee\u6807\u662f\u4fb5\u72af\u9690\u79c1\u3002\u4f8b\u5982\uff0cCookie\u540c\u610f\u5bf9\u8bdd\u6846\u51e0\u4e4e\u666e\u904d\u91c7\u7528\u64cd\u7eb5\u6027\u8bbe\u8ba1\u6765\u589e\u52a0\u7528\u6237\u540c\u610f\u8ddf\u8e2a\u7684\u53ef\u80fd\u6027\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6700\u8fd1\u7684\u4e00\u7bc7\u8bba\u6587\u663e\u793a\uff0c\u5f53\u88ab\u8981\u6c42\u9009\u62e9\u52a0\u5165\u65f6\uff0c\u8fdc\u4e0d\u52301%\u7684\u7528\u6237\u4f1a\u63d0\u4f9b\u77e5\u60c5\u540c\u610f\u3002GDPR(\u4e00\u822c\u6570\u636e\u4fdd\u62a4\u6761\u4f8b)\u7b4930\u9879\u6cd5\u89c4\u8981\u6c42\u516c\u53f8\u8fdb\u884c\u8ddf\u8e2a\u5fc5\u987b\u83b7\u5f97\u660e\u786e\u7684\u540c\u610f\uff0c\u8fd9\u5bf9\u5728\u7ebf\u8ddf\u8e2a\u548c\u5e7f\u544a\u4e1a\u7684\u8bb8\u591a\u516c\u53f8\u6784\u6210\u4e86\u751f\u6b7b\u5b58\u4ea1\u7684\u5a01\u80c1\u3002\u4f5c\u4e3a\u56de\u5e94\uff0c\u4ed6\u4eec\u4f3c\u4e4e\u6b63\u8f6c\u5411\u5927\u89c4\u6a21\u4f7f\u7528\u6697\u8272\u56fe\u6848\u300230\u4e2a\n\u9ed1\u6697\u6a21\u5f0f\u7684\u7b2c\u4e09\u4e2a\u76ee\u6807\u662f\u8ba9\u670d\u52a1\u4e0a\u763e\u3002\u8fd9\u4e00\u76ee\u6807\u652f\u6301\u53e6\u5916\u4e24\u4e2a\u76ee\u6807\uff0c\u56e0\u4e3a\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u65f6\u95f4\u8f83\u957f\u7684\u7528\u6237\u5c06\u8d2d\u4e70\u66f4\u591a\uff0c\u4ea7\u751f\u66f4\u591a\u4e2a\u4eba\u4fe1\u606f\uff0c\u5e76\u770b\u5230\u66f4\u591a\u5e7f\u544a\u3002\u4f18\u6b65(Uber)\u7b49\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u6e38\u620f\u5316\u7684\u8f7b\u63a8\u6765\u5ef6\u957f\u53f8\u673a\u7684\u884c\u9a76\u65f6\u95f4(\u56fe6)\u3002\u8fd9\u6839\u9488\u6697\u793a\u53f8\u673a\u79bb\u76ee\u6807\u975e\u5e38\u8fd1\uff0c\u4f46\u8fd9\u662f\u4f18\u6b65\u5728\u53f8\u673a\u60f3\u4e0b\u7ebf\u65f6\u968f\u610f\u8bbe\u5b9a\u7684\u76ee\u6807\u300224\u603b\u800c\u8a00\u4e4b\uff0c\u6697\u8272\u56fe\u6848\u4f7f\u8bbe\u8ba1\u5e08\u80fd\u591f\u4ece\u7528\u6237\u90a3\u91cc\u63d0\u53d6\u4e09\u4e2a\u4e3b\u8981\u8d44\u6e90\uff1a\u91d1\u94b1\u3001\u6570\u636e\u548c\u6ce8\u610f\u529b\u3002\n\u4e24\u5e74\u524d\uff0c\u51e0\u4e4e\u6ca1\u6709\u4eba\u542c\u8bf4\u8fc7\u6697\u6a21\u5f0f\u8fd9\u4e00\u672f\u8bed\u3002\u73b0\u5728\u5b83\u65e0\u5904\u4e0d\u5728\u3002\u8fd9\u662f\u5426\u610f\u5473\u7740\u6697\u8272\u56fe\u6848\u53ea\u662f\u6619\u82b1\u4e00\u73b0\uff1f\u4e5f\u8bb8\uff0c\u5f53\u7528\u6237\u5f04\u6e05\u695a\u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\u65f6\uff0c\u516c\u53f8\u4f1a\u610f\u8bc6\u5230\u6697\u8272\u56fe\u6848\u4f1a\u9002\u5f97\u5176\u53cd\uff0c\u5e76\u505c\u6b62\u4f7f\u7528\u5b83\u4eec\u3002\u5e02\u573a\u53ef\u80fd\u4f1a\u81ea\u6211\u8c03\u6574\u3002\n\u8fd9\u91cc\u52fe\u52d2\u7684\u5386\u53f2\u8868\u660e\uff0c\u8fd9\u79cd\u4e50\u89c2\u7684\u89c2\u70b9\u4e0d\u592a\u53ef\u80fd\u3002\u9ed1\u8272\u56fe\u6848\u7684\u524d\u8eab\u5df2\u7ecf\u6709\u51e0\u5341\u5e74\u7684\u5386\u53f2\u4e86\u3002\u867d\u7136\u516c\u4f17\u5bf9\u9ed1\u6697\u56fe\u6848\u7684\u8ba4\u8bc6\u76f8\u5bf9\u8f83\u65b0\uff0c\u4f46\u8fd9\u79cd\u73b0\u8c61\u672c\u8eab\u662f\u9010\u6e10\u53d1\u5c55\u8d77\u6765\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0cdarpatterns.org\u7f51\u7ad9\u6210\u7acb\u4e8e2010\u5e74\u3002\n\u8fd9\u6bb5\u5386\u53f2\u4e5f\u6709\u52a9\u4e8e\u89e3\u91ca\u9ed1\u6697\u6a21\u5f0f\u7684\u65b0\u7279\u70b9\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u72e1\u733e\u7684\u8bbe\u8ba1\u6216\u6b3a\u9a97\u6027\u7684\u5728\u7ebf\u96f6\u552e\u884c\u4e3a\u3002\u76f8\u53cd\uff0c\u8bbe\u8ba1\u5df2\u7ecf\u88ab\u6b66\u5668\u5316\uff0c\u4f7f\u7528\u884c\u4e3a\u7814\u7a76\u6765\u670d\u52a1\u4e8e\u76d1\u89c6\u7ecf\u6d4e\u7684\u76ee\u6807\u3002\u8fd9\u4e00\u66f4\u5e7f\u6cdb\u7684\u80cc\u666f\u5f88\u91cd\u8981\u3002\u8fd9\u6709\u52a9\u4e8e\u89e3\u91ca\u4e3a\u4ec0\u4e48\u60c5\u51b5\u4f1a\u5982\u6b64\u7cdf\u7cd5\uff0c\u5e76\u6697\u793a\u60c5\u51b5\u5728\u597d\u8f6c\u4e4b\u524d\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\n\u4e00\u4e2a\u4ee4\u4eba\u62c5\u5fe7\u7684\u8d8b\u52bf\u662f\u51fa\u73b0\u4e86\u4e00\u4e9b\u516c\u53f8\uff0c\u5b83\u4eec\u63d0\u4f9b\u9ed1\u8272\u6a21\u5f0f\u4f5c\u4e3a\u4e00\u79cd\u670d\u52a1\uff0c\u4f7f\u7f51\u7ad9\u53ea\u9700\u51e0\u884cJavaScript\u5c31\u80fd\u91c7\u7528\u5b83\u4eec\u300220\u53e6\u4e00\u4e2a\u53ef\u80fd\u7684\u8f6c\u6298\u662f\u4e2a\u6027\u5316\u7684\u6df1\u8272\u56fe\u6848\uff0c\u6309\u4e0b\u6bcf\u4e2a\u7528\u6237\u7684\u7279\u5b9a\u6309\u94ae\u300226\u8fd9\u65e9\u5c31\u88ab\u9884\u6d4b\u5230\u4e865\uff0c\u4f46\u4eca\u5929\u4ecd\u7136\u5f88\u5c11\u89c1(\u53ef\u4ee5\u8bf4\uff0c\u64cd\u7eb5\u6027\u7684\u5b9a\u5411\u5e7f\u544a\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u9ed1\u6697\u7684\u6a21\u5f0f\uff0c\u4f46\u5e7f\u544a\u4e0d\u662f\u7528\u6237\u754c\u9762)\u3002\u6ca1\u6709\u4e2a\u6027\u5316\u7684\u7528\u6237\u754c\u9762\u5927\u6982\u662f\u56e0\u4e3a\u516c\u53f8\u5fd9\u4e8e\u91c7\u6458\u5bb9\u6613\u6458\u5230\u7684\u6c34\u679c\uff0c\u4f46\u8fd9\u79cd\u60c5\u51b5\u968f\u65f6\u90fd\u53ef\u80fd\u6539\u53d8\u3002\n\u8bbe\u8ba1\u5e08\u5e94\u8be5\u5173\u6ce8\u6697\u8272\u56fe\u6848\u7684\u6cdb\u6ee5\u3002\u4ed6\u4eec\u662f\u4e0d\u9053\u5fb7\u7684\uff0c\u5bf9\u8fd9\u4e2a\u804c\u4e1a\u7684\u8bc4\u4ef7\u5f88\u5dee\u3002\u4f46\u8fd9\u7bc7\u6587\u7ae0\u5e76\u4e0d\u662f\u4e00\u4e2a\u60b2\u89c2\u7684\u6545\u4e8b\u3002\u60a8\u53ef\u4ee5\u91c7\u53d6\u4e00\u4e9b\u6b65\u9aa4\uff0c\u65e2\u53ef\u4ee5\u8ba9\u60a8\u548c\u60a8\u7684\u7ec4\u7ec7\u8fbe\u5230\u66f4\u9ad8\u7684\u6807\u51c6\uff0c\u4e5f\u53ef\u4ee5\u62b5\u5fa1\u5728\u884c\u4e1a\u4e2d\u90e8\u7f72\u9ed1\u6697\u6a21\u5f0f\u7684\u538b\u529b\u3002\n\u65e9\u4e9b\u65f6\u5019\uff0c\u8fd9\u7bc7\u6587\u7ae0\u8ba8\u8bba\u4e86\u8bbe\u8ba1\u5e08\u5982\u4f55\u4f7f\u7528A/B\u6d4b\u8bd5\u6765\u4f18\u5316\u6697\u56fe\u6848\u3002\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2a\u8f6c\u6298\uff1a\u8fc7\u5ea6\u4e13\u6ce8\u4e8eA/B\u6d4b\u8bd5\u7684\u8bbe\u8ba1\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9ed1\u6697\u7684\u56fe\u6848\uff0c\u5373\u4f7f\u8fd9\u4e0d\u662f\u4f60\u7684\u672c\u610f\u3002\u8fd9\u662f\u56e0\u4e3a\u5927\u591a\u6570A/B\u6d4b\u8bd5\u90fd\u662f\u57fa\u4e8e\u4e0e\u516c\u53f8\u5e95\u7ebf\u76f8\u5173\u7684\u6307\u6807\uff0c\u5373\u4f7f\u5b83\u4eec\u4f1a\u5bf9\u7528\u6237\u9020\u6210\u4f24\u5bb3\u3002\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0cA/B\u6d4b\u8bd5\u53ef\u80fd\u4f1a\u663e\u793a\uff0c\u51cf\u5c0f\u5c06\u641c\u7d22\u7ed3\u679c\u6807\u8bc6\u4e3a\u5e7f\u544a\u7684\u8d5e\u52a9\u6807\u7b7e\u7684\u5927\u5c0f\u4f1a\u5bfc\u81f4CTR(\u70b9\u51fb\u7387)\u7684\u589e\u52a0\u3002\u867d\u7136\u50cfCTR\u8fd9\u6837\u7684\u6307\u6807\u53ef\u4ee5\u5373\u65f6\u6d4b\u91cf\uff0c\u4f46\u5b83\u6ca1\u6709\u63ed\u793a\u8bbe\u8ba1\u66f4\u6539\u7684\u957f\u671f\u5f71\u54cd\u3002\u5f53\u7528\u6237\u610f\u8bc6\u5230\u4ed6\u4eec\u88ab\u64cd\u7eb5\u70b9\u51fb\u5e7f\u544a\u65f6\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5bf9\u7cfb\u7edf\u5931\u53bb\u4fe1\u4efb\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u8c37\u6b4c\u6700\u8fd1\u5bf9\u5176\u5e7f\u544a\u6807\u7b7e\u7684\u6539\u53d8\u4f7f\u5f97\u7528\u6237\u5f88\u96be\u5c06\u5e7f\u544a\u4e0e\u6709\u673a\u641c\u7d22\u7ed3\u679c\u533a\u5206\u5f00\u6765\uff0c\u800c\u4e14\u60f3\u5fc5\u8fd8\u63d0\u9ad8\u4e86\u5e7f\u544a\u7684\u70b9\u51fb\u7387(\u56fe7)\u3002\u7136\u800c\uff0c\u968f\u4e4b\u800c\u6765\u7684\u662f\u5f3a\u70c8\u7684\u53cd\u5f39\uff0c\u8c37\u6b4c\u53d6\u6d88\u4e86\u8fd9\u4e2a\u754c\u9762\u300232\u4f4d\n\u8981\u907f\u514d\u843d\u5165\u6b64\u9677\u9631\uff0c\u8bf7\u8bc4\u4f30\u81f3\u5c11\u4e00\u4e2a\u8861\u91cf\u957f\u671f\u5f71\u54cd\u7684\u6307\u6807\u7684A/B\u6d4b\u8bd5\u3002\u9664\u4e86\u6d4b\u91cfCTR\u4e4b\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u6d4b\u91cf\u7528\u6237\u4fdd\u7559\u7387\u3002\u8fd9\u5c06\u544a\u8bc9\u4f60\uff0c\u5982\u679c\u4e00\u4e2a\u4e0d\u540c\u5927\u5c0f\u7684\u6807\u7b7e\u5bfc\u81f4\u66f4\u591a\u7684\u7528\u6237\u653e\u5f03\u7f51\u7ad9\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u8bb8\u591a\u957f\u671f\u91cd\u8981\u7684\u5c5e\u6027\uff0c\u5982\u4fe1\u4efb\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u89c2\u5bdf\u548c\u8861\u91cf\u7684\uff0c\u7279\u522b\u662f\u5728\u5728\u7ebf\u73af\u5883\u4e2d\u3002\u6279\u5224\u6027\u5730\u8003\u8651\u60a8\u9009\u62e9\u6d4b\u8bd5\u7684\u8bbe\u8ba1\uff0c\u5f53\u60a8\u53d1\u73b0\u67d0\u4e2a\u8bbe\u8ba1\u6027\u80fd\u66f4\u597d\u65f6\uff0c\u8bd5\u7740\u4e86\u89e3\u539f\u56e0\u3002\n\u867d\u7136\u8fc7\u5ea6\u4f9d\u8d56A/B\u6d4b\u8bd5\u662f\u4e00\u4e2a\u9700\u8981\u89e3\u51b3\u7684\u5173\u952e\u95ee\u9898\uff0c\u4f46\u8ba9\u6211\u4eec\u63a5\u4e0b\u6765\u8f6c\u5411\u4e00\u4e2a\u66f4\u5e7f\u6cdb\u3001\u66f4\u957f\u671f\u7684\u95ee\u9898\u3002\n\u867d\u7136\u6697\u8272\u56fe\u6848\u662f\u8bbe\u8ba1\u4f26\u7406\u5371\u673a\u7684\u4e00\u4e2a\u975e\u5e38\u660e\u663e\u7684\u540e\u679c\uff0c\u4f46\u89e3\u51b3\u5371\u673a\u9700\u8981\u7684\u8fdc\u4e0d\u6b62\u662f\u907f\u514d\u4e00\u7cfb\u5217\u7b80\u5355\u7684\u56fe\u6848\u3002\u5b83\u9700\u8981\u5bf9\u8bbe\u8ba1\u8fc7\u7a0b\u8fdb\u884c\u7ed3\u6784\u6027\u66f4\u6539\u3002\n\u4ece\u9610\u660e\u5bf9\u60a8\u5f88\u91cd\u8981\u7684\u4ef7\u503c\u5f00\u59cb\uff0c\u8fd9\u5c06\u6307\u5bfc\u60a8\u7684\u8bbe\u8ba1\u300215\u4e0d\u662f\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u4f1a\u6709\u4e00\u5957\u76f8\u540c\u7684\u4ef7\u503c\u89c2\uff0c\u4f46\u8fd9\u4e9b\u4ef7\u503c\u89c2\u5fc5\u987b\u4e0e\u793e\u4f1a\u8ba4\u4e3a\u91cd\u8981\u7684\u4ef7\u503c\u89c2\u5927\u4f53\u4e00\u81f4\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u524d\u7684\u5371\u673a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u8ffd\u6eaf\u5230\u793e\u4f1a\u548c\u516c\u53f8\u4e4b\u95f4\u4ef7\u503c\u89c2\u7684\u9519\u4f4d\u3002\u81ea\u4e3b\u6027\u548c\u9690\u79c1\u662f\u8fd9\u4e00\u70b9\u7279\u522b\u660e\u663e\u7684\u4e24\u4e2a\u4ef7\u503c\u89c2\u3002\u8003\u8651\u4e00\u4e0b\u65e0\u6469\u64e6\u8bbe\u8ba1\uff0c\u8fd9\u662f\u79d1\u6280\u884c\u4e1a\u7684\u57fa\u7840\u4ef7\u503c\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u6070\u6070\u5265\u593a\u4e86\u7528\u6237\u90a3\u4e9b\u53ef\u80fd\u7ed9\u4ed6\u4eec\u53cd\u601d\u7684\u673a\u4f1a\uff0c\u5e76\u4f7f\u4ed6\u4eec\u80fd\u591f\u62d2\u7edd\u4f4e\u7ea7\u51b2\u52a8\u7684\u65f6\u523b\u3002\u65e0\u6469\u64e6\u4e0e\u81ea\u4e3b\u662f\u5bf9\u7acb\u7684\u3002\u540c\u6837\uff0c\u4e3a\u5feb\u4e50\u548c\u4e50\u8da3\u800c\u8bbe\u8ba1\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u8bbe\u8ba1\u4ef7\u503c\uff0c\u4f46\u4e50\u8da3\u4ec0\u4e48\u65f6\u5019\u4f1a\u8d8a\u754c\u6210\u763e\u5462\uff1f\n\u4e00\u65e6\u4f60\u6e05\u695a\u5730\u8868\u8fbe\u4e86\u4f60\u7684\u4ef7\u503c\u89c2\uff0c\u5c31\u5e94\u8be5\u7ee7\u7eed\u5728\u5185\u90e8\u8fdb\u884c\u8fa9\u8bba\u3002\u5bf9\u5916\u5ba3\u4f20\u5b83\u4eec\uff0c\u5bfb\u6c42\u7528\u6237\u7684\u610f\u89c1\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u8ba9\u81ea\u5df1\u5bf9\u4ed6\u4eec\u8d1f\u8d23\u3002\u7136\u800c\uff0c\u6709\u6548\u7684\u95ee\u8d23\u662f\u5177\u6709\u6311\u6218\u6027\u7684\u3002\u4f8b\u5982\uff0c\u79d1\u6280\u516c\u53f8\u8bbe\u7acb\u7684\u987e\u95ee\u59d4\u5458\u4f1a\u5c31\u88ab\u6279\u8bc4\u4e3a\u4e0d\u591f\u72ec\u7acb\u3002\n\u65e5\u5e38\u8bbe\u8ba1\u51b3\u7b56\u5e94\u8be5\u53c2\u8003\u65e2\u5b9a\u7684\u4ef7\u503c\u6765\u6307\u5bfc\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8bbe\u8ba1\u9009\u62e9\u662f\u5426\u7b26\u5408\u8bbe\u8ba1\u4ef7\u503c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u4f46\u60c5\u51b5\u5e76\u4e0d\u603b\u662f\u5982\u6b64\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u7814\u7a76\u63ed\u793a\u4e86\u5f88\u591a\u4f7f\u8bbe\u8ba1\u6a21\u5f0f\u6697\u6de1\u7684\u56e0\u7d20\uff0c\u6bd4\u5982\u5229\u7528\u5df2\u77e5\u7684\u8ba4\u77e5\u504f\u5dee\u548c\u9690\u7792\u5173\u952e\u4fe1\u606f\u30024\uff0c20\u7d27\u8ddf\u8fd9\u9879\u7814\u7a76\uff0c\u8bc4\u4f30\u8bbe\u8ba1\u5bf9\u7528\u6237\u7684\u5f71\u54cd\uff0c\u5e76\u6839\u636e\u516c\u53f8\u7684\u4ef7\u503c\u89c2\u548c\u4f60\u81ea\u5df1\u7684\u9053\u5fb7\u611f\uff0c\u5c31\u5e94\u8be5\u5728\u54ea\u91cc\u5212\u6e05\u754c\u9650\u5c55\u5f00\u6279\u5224\u6027\u7684\u8fa9\u8bba\u3002\u5982\u679c\u53d1\u73b0\u66f4\u6539\u6ca1\u6709\u8fbe\u5230\u60a8\u7684\u4ef7\u503c\uff0c\u5219\u5e94\u8be5\u59cb\u7ec8\u9009\u62e9\u53d6\u6d88\u66f4\u6539\u3002\n\u5f53\u60a8\u83b7\u5f97\u5728\u7279\u5b9a\u73af\u5883\u4e2d\u505a\u51fa\u8fd9\u4e9b\u51b3\u7b56\u7684\u7ecf\u9a8c\u65f6\uff0c\u53ef\u4ee5\u5c06\u66f4\u9ad8\u7ea7\u522b\u7684\u539f\u5219\u7f16\u5165\u8bbe\u8ba1\u6307\u5357\u3002\u53ef\u7528\u6027\u51c6\u5219\u5728\u8bbe\u8ba1\u754c\u6709\u7740\u60a0\u4e45\u7684\u4f20\u7edf\u3002\u4e5f\u6709\u6309\u8bbe\u8ba1\u5212\u5206\u9690\u79c1\u7684\u6307\u5bfc\u65b9\u9488\uff0c\u4f46\u5b83\u4eec\u8fd8\u6ca1\u6709\u88ab\u5e7f\u6cdb\u91c7\u7528\u300210\u4e2a\u3002\n\u6240\u6709\u8fd9\u4e9b\u90fd\u8d85\u51fa\u4e86\u8bbe\u8ba1\u5e08\u4e2a\u4eba\u901a\u5e38\u53ef\u4ee5\u5b8c\u6210\u7684\u8303\u56f4\uff1b\u5c06\u4f26\u7406\u7eb3\u5165\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u8d23\u4efb\u5728\u4e8e\u7ec4\u7ec7\u3002\u4f5c\u4e3a\u4e2a\u4eba\uff0c\u60a8\u53ef\u4ee5\u4ece\u63d0\u9ad8\u7ec4\u7ec7\u5185\u90e8\u7684\u610f\u8bc6\u5f00\u59cb\u3002\n\u6697\u8272\u56fe\u6848\u662f\u5bf9\u8bbe\u8ba1\u5e08\u624b\u4e2d\u5de8\u5927\u6743\u529b\u7684\u6ee5\u7528\u3002\u968f\u7740\u516c\u4f17\u5bf9\u9ed1\u6697\u6a21\u5f0f\u8ba4\u8bc6\u7684\u63d0\u9ad8\uff0c\u6f5c\u5728\u7684\u540e\u679c\u4e5f\u5728\u589e\u52a0\u3002\u8bb0\u8005\u548c\u5b66\u8005\u4e00\u76f4\u5728\u4ed4\u7ec6\u7814\u7a76\u9ed1\u6697\u7684\u6a21\u5f0f\uff0c\u8fd9\u4e9b\u66dd\u5149\u5e26\u6765\u7684\u53cd\u5f39\u53ef\u80fd\u4f1a\u7834\u574f\u54c1\u724c\u58f0\u8a89\uff0c\u5e76\u5c06\u516c\u53f8\u7f6e\u4e8e\u76d1\u7ba1\u673a\u6784\u7684\u955c\u5934\u4e0b\u3002\n\u8bb8\u591a\u6697\u8272\u56fe\u6848\u5df2\u7ecf\u662f\u975e\u6cd5\u7684\u3002\u5728\u7f8e\u56fd\uff0c\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a(FTC)\u6cd5\u6848\u7981\u6b62\u4e0d\u516c\u5e73\u6216\u6b3a\u9a97\u6027\u7684\u5546\u4e1a\u884c\u4e3a\u300211\u5728\u6700\u8fd1\u7684\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u4e0eUnroll\u8fbe\u6210\u548c\u89e3\u3002Me-\u4e00\u9879\u53d6\u6d88\u7528\u6237\u4ece\u65f6\u4e8b\u901a\u8baf\u548c\u8ba2\u9605\u4e2d\u8ba2\u9605\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u670d\u52a1-\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u662f\u5728\u5411\u7b2c\u4e09\u65b9\u51fa\u552e\u4ece\u4ed6\u4eec\u7684\u6536\u4ef6\u7bb1\u4e2d\u8bfb\u53d6\u7684\u4fe1\u606f\u300212\u4e2a\u6b27\u76df\u5f53\u5c40\u503e\u5411\u4e8e\u66f4\u52a0\u4e25\u683c\uff1a\u6cd5\u56fd\u76d1\u7ba1\u673a\u6784CNIL(Commission Nationale de l&l&#39\uff1bInformation atique et des Libert\u00e9s)\u5bf9\u8c37\u6b4c\u5904\u4ee55000\u4e07\u6b27\u5143\u7684\u7f5a\u6b3e\uff0c\u539f\u56e0\u662f\u8c37\u6b4c\u5728\u4e94\u5230\u516d\u4e2a\u5c4f\u5e55\u540e\u9690\u85cf\u4e86\u6709\u5173\u9690\u79c1\u548c\u5e7f\u544a\u4e2a\u6027\u5316\u7684\u91cd\u8981\u4fe1\u606f\u30026\u4e2a\u3002\n\u4e5f\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u611f\u89c9\u5230\uff0c\u73b0\u6709\u7684\u6cd5\u89c4\u3002\n..", "note_en": "May 17, 2020   Volume 18, issue 2     Dark patterns are user interfaces that benefit an online service by coercing users into making decisions they might not otherwise make. Some dark patterns deceive users while others covertly manipulate or lead them into choices that are not in their best interests. A few egregious examples have led to public backlash recently: TurboTax hid its U.S. government-mandated free tax-file program for low-income users on its website to get them to use its paid program; 9 Facebook asked users to enter phone numbers for two-factor authentication but then used those numbers to serve targeted ads; 31 Match.com knowingly let scammers generate fake messages of interest in its online dating app to get users to sign up for its paid service. 13 Many dark patterns have been adopted on a large scale across the web. Figure 1 shows a deceptive countdown timer dark pattern on JustFab. The advertised offer remains valid even after the timer expires. This pattern is a common tactic\u2014a recent study found such deceptive countdown timers on 140 shopping websites. 20\n  The research community has taken note. Recent efforts have catalogued dozens of problematic patterns such as nagging the user, obstructing the flow of a task, and setting privacy-intrusive defaults, 1,18 building on an early effort by Harry Brignull (darkpatterns.org). Researchers have also explained how dark patterns operate by exploiting cognitive biases, 4,18,33 uncovered dark patterns on more than 1,200 shopping websites, 4 shown that more than 95 percent of the popular Android apps contain dark patterns, 8 and provided preliminary evidence that dark patterns are indeed effective at manipulating user behavior. 19,30\n Although they have recently burst into mainstream awareness, dark patterns are the result of three decades- long trends: one from the world of retail (deceptive practices), one from research and public policy (nudging), and the third from the design community (growth hacking).\n Figure 2 illustrates how dark patterns stand at the confluence of these three trends. Understanding these trends\u2014and how they have collided into each other\u2014is essential to help us appreciate what is actually new about dark patterns, demystifies their surprising effectiveness, and shows us why it will be hard to combat them. We end this article with recommendations for ethically minded designers.\n   The retail industry has a long history of deceptive and manipulative practices that range on a spectrum from normalized to unlawful (figure 3). Some of these techniques, such as psychological pricing (i.e., making the price slightly less than a round number), have become normalized. This is perfectly legal, and consumers have begrudgingly accepted it. Nonetheless, it remains effective: consumers underestimate prices when relying on memory if psychological pricing is employed. 3\n    (a) psychological pricing  https://www.crazyspeedtech.com/5-major-stages-psychological-pricing/  (b) false advertisement of store closure  https://www.dealnews.com/features/What-Happens-When-a-Store-Closes/2203265.html  (c) bait-and-switch car ad  https://www.ftc.gov/enforcement/cases-proceedings/1223269/ganley-ford-west-inc-matter  More problematic are practices such as false claims of store closings, which are unlawful but rarely the target of enforcement actions. At the other extreme are bait- and-switch car ads such as the one by a Ford dealership in Cleveland that was the target of an FTC action. 14\n  In the 1970s, the heuristics and biases literature in behavioral economics sought to understand irrational decisions and behaviors\u2014for example, people who decide to drive because they perceive air travel as dangerous, even though driving is, in fact, orders of magnitude more dangerous per mile. 29 Researchers uncovered a set of cognitive shortcuts used by people that make these irrational behaviors not just explainable but even predictable.\n For example, in one experiment, researchers asked participants to write down an essentially random two- digit number (the last two digits of each participant&#39;s social security number), then asked if they would pay that number of dollars for a bottle of wine, and finally asked the participants to state the maximum amount they would pay for the bottle. 2 They found that the willingness to pay varied by roughly threefold based on the arbitrary number. This is the  anchoring effect: lacking knowledge of the market value of the bottle of wine, participants&#39; estimates become anchored to the arbitrary reference point. This study makes it easy to see how businesses might be able to nudge customers to pay higher prices by anchoring their expectations to a high number. In general, however, research on psychological biases has not been driven by applications in retail or marketing. That would come later.\n  The early behavioral research on this topic focused on understanding rather than intervention. Some scholars, such as Cass Sunstein and Richard Thaler, authors of the book  Nudge, 28 went further to make a policy argument: Governments, employers, and other benevolent institutions should engineer &#34;choice architectures&#34; in a way that uses behavioral science for the benefit of those whom they serve or employ.\n A famous example (figure 4) is the striking difference in organ-donation consent rates between countries where people have to explicitly provide consent (red bars) versus those where consent is presumed (orange bars). Because most people tend not to change the default option, the latter leads to significantly higher consent rates. 17\n  Today, nudging has been enthusiastically adopted by not only governments and employers, but also businesses in the way they communicate with their customers. The towel reuse message you may have seen in hotel rooms (&#34;75 percent of guests in this hotel usually use their towels more than once&#34;) is effective because it employs descriptive social norms as a prescriptive rule to get people to change their behavior. 16\n With the benefit of hindsight, neither the proponents nor the critics of nudging anticipated how readily and vigorously businesses would adopt these techniques in adversarial rather than paternalistic ways. In  Nudge Sunstein and Thaler briefly address the question of how to tell if a nudge is ethical, but the discussion is perfunctory. The authors seem genuinely surprised by recent developments and have distanced themselves from dark patterns, which they label &#34;sludges.&#34; 27\n  The third trend\u2014and the one that most directly evolved into dark patterns\u2014is growth hacking. The best-known and arguably the earliest growth hack was implemented by Hotmail. When it launched in 1996, the founders first considered traditional marketing methods such as billboard advertising. Instead, they hit upon a viral marketing strategy: The service automatically added the signature, &#34;Get your free email with Hotmail,&#34; to every outgoing email, essentially getting users to advertise on its behalf, resulting in viral growth. 21\n Successes like these led to the emergence of growth hacking as a distinct community. Growth hackers are trained in design, programming, and marketing and use these skills to drive product adoption.\n Growth hacking is not inherently deceptive or manipulative but often is in practice. For example, in two- sided markets such as vacation rentals, upstarts inevitably face a chicken-and-egg problem: no travelers without hosts and no hosts without travelers. So it became a common practice to &#34;seed&#34; such services with listings that were either fake or scraped from a competitor. 22,23\n Unsurprisingly, growth hacking has sometimes led to legal trouble. A hugely popular growth hack involved obtaining access to users&#39; contact books\u2014often using deception\u2014and then spamming those contacts with invitations to try a service. The invitations might themselves be deceptive by appearing to originate from the user, when in fact users were unaware of the emails being sent. Linkedin settled a class action for exactly this practice, which it used from 2011 to 2014. 25\n  But why growth rather than revenue or some other goal? It is a reflection of Silicon Valley&#39;s growth-first mantra in which revenue-generating activities are put aside until after-market dominance has been achieved. Of course, eventually every service runs into limits on growth, because of either saturation or competition, so growth hackers began to adapt their often-manipulative techniques to extracting and maximizing revenue from existing users.\n In developing their battery of psychological tricks, growth hackers had two weapons that were not traditionally available in offline retail. The first was that the nudge movement had helped uncover the principles of behavior change. In contrast, the marketing literature that directly studied the impact of psychological tricks on sales was relatively limited because it didn&#39;t get at the foundational principles and was limited to the domain of retail.\n The second weapon was A/B testing (figure 5). By serving variants of web pages to two or more randomly selected subsets of users, designers began to discover that even seemingly trivial changes to design elements can result in substantial differences in behavior. The idea of data-driven optimization of user interfaces has become deeply ingrained in the design process of many companies. For large online services with millions of users, it is typical to have dozens of A/B tests running in parallel, as noted in 2009 by Douglas Bowman, once a top visual designer at Google:\n Yes, it&#39;s true that a team at Google couldn&#39;t decide between two blues, so they&#39;re testing 41 shades between each blue to see which one performs better. I had a recent debate over whether a border should be 3, 4, or 5 pixels wide, and was asked to prove my case. I can&#39;t operate in an environment like that. I&#39;ve grown tired of debating such minuscule design decisions. There are more exciting design problems in this world to tackle.   \u2014Douglas Bowman\n   A/B testing proved key to the development of dark patterns because it is far from obvious how to translate an abstract principle like social proof into a concrete nudge (&#34;7 people are looking at this hotel right now!&#34;). Another example: For how long should a fake countdown timer be set (&#34;This deal expires in 15 minutes!&#34; ... &#34;14:59&#34; ... &#34;14:58&#34; ...), so that the user acts with urgency but not panic? Online experiments allow designers to find the answers with just a few lines of code.\n  Let&#39;s recap. As the online economy matured, services turned their attention from growth to revenue. They used the principles of behavioral influence but subverted the intent of the researchers who discovered those principles by using them in ways that undermined consumers&#39; autonomy and informed choice. They used A/B testing to turn behavioral insights into strikingly effective user interfaces. In some cases these were optimized versions of tricks that have long been used in retail, but in other cases they were entirely new.\n How, exactly, do dark patterns help maximize a company&#39;s ability to extract revenue from its users? The most obvious way is simply to nudge (or trick) consumers into spending more than they otherwise would.\n A less obvious, yet equally pervasive, goal of dark patterns is to invade privacy. For example, cookie consent dialogs almost universally employ manipulative design to increase the likelihood of users consenting to tracking. In fact, a recent paper shows that when asked to opt in, well under 1 percent of users would provide informed consent. 30 Regulations such as the GDPR (General Data Protection Regulation) require companies to get explicit consent for tracking, which poses an existential threat to many companies in the online tracking and advertising industry. In response, they appear to be turning to the wholesale use of dark patterns. 30\n A third goal of dark patterns is to make services addictive. This goal supports the other two, as users who stay on an app longer will buy more, yield more personal information, and see more ads. Apps like Uber use gamified nudges to keep drivers on the road longer (figure 6). The needle suggests that the driver is extremely close to the goal, but it is an arbitrary goal set by Uber when a driver wants to go offline. 24 To summarize, dark patterns enable designers to extract three main resources from users: money, data, and attention.\n    Two years ago, few people had heard the term  dark patterns. Now it&#39;s everywhere. Does this mean dark patterns are a flash in the pan? Perhaps, as users figure out what&#39;s going on, companies will realize that dark patterns are counterproductive and stop using them. The market could correct itself.\n The history sketched here suggests that this optimistic view is unlikely. The antecedents of dark patterns are decades old. While public awareness of dark patterns is relatively new, the phenomenon itself has developed gradually. In fact, the darkpatterns.org website was established in 2010.\n The history also helps explain what is new about dark patterns. It isn&#39;t just tricky design or deceptive retail practices online. Rather, design has been weaponized using behavioral research to serve the aims of the surveillance economy. This broader context is important. It helps explain why the situation is as bad as it is and suggests that things will get worse before they can get better.\n One worrying trend is the emergence of companies that offer dark patterns as a service, enabling websites to adopt them with a few lines of JavaScript. 20 Another possible turn for the worse is personalized dark patterns that push each user&#39;s specific buttons. 26 This has long been predicted 5 but remains rare today (manipulative targeted advertising can arguably be viewed as a dark pattern, but ads are not user interfaces). The absence of personalized UI is presumably because companies are busy picking lower-hanging fruit, but this can change any time.\n  Designers should be concerned about the proliferation of dark patterns. They are unethical and reflect badly on the profession. But this article is not a doom-and-gloom story. There are steps you can take, both to hold yourself and your organization to a higher standard, and to push back against the pressure to deploy dark patterns in the industry.\n  Earlier this article discussed how designers use A/B tests to optimize dark patterns. But there&#39;s a twist: a design process hyperfocused on A/B testing can result in dark patterns even if that&#39;s not the intent. That&#39;s because most A/B tests are based on metrics that are relevant to the company&#39;s bottom line, even if they result in harm to users. As a trivial example, an A/B test might reveal that reducing the size of a &#34;Sponsored&#34; label that identifies a search result as an advertisement causes an increase in the CTR (click-through rate). While a metric such as CTR can be measured instantaneously, it reveals nothing about the long-term effects of the design change. It is possible that users lose trust in the system over time when they realize they are being manipulated into clicking on ads.\n In fact, Google&#39;s recent change to its ad labels made it hard for users to distinguish ads from organic search results, and presumably increased CTR for ads (figure 7). A backlash ensued, however, and Google rolled back this interface. 32\n  To avoid falling into this trap, evaluate A/B tests on at least one metric that measures long-term impacts. In addition to measuring the CTR, you could also measure user retention. That will tell you if a different-sized label results in more users abandoning the website.\n Still, many attributes that matter in the long term, such as trust, are not straightforward to observe and measure, especially in the online context. Think critically about the designs you choose to test, and when you find that a certain design performs better, try to understand why.\n While the overreliance on A/B testing is a critical issue to be addressed, let&#39;s next turn to a much broader and longer-term concern.\n  While dark patterns are a highly visible consequence of the ethical crisis in design, resolving the crisis entails far more than avoiding a simple list of patterns. It requires structural changes to the design process.\n Start by articulating the values that matter to you and that will guide your design. 15 Not every organization will have an identical set of values, but these values must be broadly aligned with what society considers important.\n In fact, much of the present crisis can be traced to a misalignment of values between society and companies. Autonomy and privacy are two values where this is particularly stark. Consider frictionless design, a bedrock value in the tech industry. Unfortunately, it robs users of precisely those moments that may give them opportunities for reflection and enable them to reject their baser impulses. Frictionlessness is antithetical to autonomy. Similarly, designing for pleasure and fun is a common design value, but when does fun cross the line into addiction?\n Once you&#39;ve articulated your values, continue to debate them internally. Publicize them externally, seek input from users, and, most importantly, hold yourself accountable to them. Effective accountability is challenging, however. For example, advisory boards established by technology companies have been criticized for not being sufficiently independent.\n Everyday design decisions should be guided by referring to established values. In many cases it is intuitively obvious whether a design choice does or does not conform to a design value, but this is not always so. Fortunately, research has revealed a lot about the factors that make a design pattern dark, such as exploiting known cognitive biases and withholding crucial information. 4,20 Stay abreast of this research, evaluate the impact of design on your users, and engage in critical debate about where to draw the line based on the company&#39;s values and your own sense of ethics. Rolling back a change should always be an option if it turns out that it didn&#39;t live up to your values.\n As you gain experience making these decisions in a particular context, higher-level principles can be codified into design guidelines. There is a long tradition of usability guidelines in the design community. There are also privacy- by-design guidelines, but they are not yet widely adopted. 10\n  All of this is beyond the scope of what individual designers can usually accomplish; the responsibility for incorporating ethics into the design process rests with organizations. As an individual, you can start by raising awareness within your organization.\n  Dark patterns are an abuse of the tremendous power that designers hold in their hands. As public awareness of dark patterns grows, so does the potential fallout. Journalists and academics have been scrutinizing dark patterns, and the backlash from these expos\u00e9s can destroy brand reputations and bring companies under the lenses of regulators.\n Many dark patterns are already unlawful. In the United States, the Federal Trade Commission (FTC) Act prohibits &#34;unfair or deceptive&#34; commercial practices. 11 In a recent example, the FTC reached a settlement with Unroll. Me\u2014a service that unsubscribed users&#39; email addresses from newsletters and subscriptions\u2014because it was in fact selling information it read from their inboxes to third parties. 12 European Union authorities have tended to be stricter: French regulator CNIL (Commission Nationale de l&#39;Informatique et des Libert\u00e9s) fined Google 50 million euros for hiding important information about privacy and ad personalization behind five to six screens. 6\n There is also a growing sense that existing regula\n......", "posttime": "2020-05-20 22:32:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8fc7\u53bb,patterns", "title": "\u9ed1\u6697\u6a21\u5f0f\uff1a\u8fc7\u53bb\u3001\u73b0\u5728\u548c\u672a\u6765", "title_en": "Dark Patterns: Past, Present, and Future", "transed": 1, "url": "https://queue.acm.org/detail.cfm?id=3400901", "via": "", "real_tags": ["\u8fc7\u53bb", "patterns"]}, {"category": "", "categoryclass": "", "imagename": "95cce8fd4a6c18964c23187a73a59d19.jpeg", "infoid": 1002959, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9a7e\u9a76\u201c\u4fa0\u76d7\u730e\u8f66\u624bV\u201d\u53ef\u4ee5\u662f..\u3002\u4e71\u4e03\u516b\u7cdf\u7684\u3002\u4e00\u4f4d\u9752\u5c11\u5e74\u7a0b\u5e8f\u5458\u60f3\u51fa\u4e86\u5982\u4f55\u4f7f\u7528\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u6280\u672f\u6765\u8ba9\u5b83\u53d8\u5f97\u66f4\u5bb9\u6613\u3002", "note_en": "Driving in 'Grand Theft Auto V' can be... messy. A teen programmer figured out how to use real-life self-driving car technology to make it a little easier. ", "posttime": "2020-05-20 22:17:52", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7a0b\u5e8f,\u7a0b\u5e8f\u5458,programmer,\u9a7e\u9a76", "title": "\u9752\u5c11\u5e74\u7a0b\u5e8f\u5458\u5728\u201cGTA V\u201d\u4e2d\u4f7f\u7528\u771f\u6b63\u7684\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u6280\u672f", "title_en": "Teen Programmer Uses Real Self-Driving Car Tech in 'GTA V'", "transed": 1, "url": "https://www.vice.com/en_us/article/4aydxn/teen-programmer-uses-real-self-driving-car-tech-in-gta-v", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u7a0b\u5e8f\u5458", "\u9a7e\u9a76"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002958, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e94\u5e74\u524d\uff0c\u6211\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u8bb2\u8ff0\u4e86\u6211\u5f53\u65f6(\u73b0\u5728\u4ecd\u7136)\u6700\u559c\u6b22\u7684\u811a\u672c\u8bed\u8a00Ruby\u4e2d\u6211\u6700\u8ba8\u538c\u7684\u4e1c\u897f\u3002\n\u4eca\u5929\uff0c\u6211\u5c06\u5bf9\u6211\u76ee\u524d\u6700\u559c\u6b22\u7684\u7f16\u8bd1\u8bed\u8a00Ruust\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\n\u5c31\u50cf\u6700\u521d\u7684Ruby\u5e16\u5b50\u4e00\u6837\uff0c\u8fd9\u4e9b\u62b1\u6028\u90fd\u662f\u4e2a\u4eba\u7684\uff0c\u53cd\u6620\u4e86\u6211\u76ee\u524d\u5bf9\u8be5\u8bed\u8a00\u7684\u6700\u597d\u7406\u89e3\u3002\u5c31\u50cfRuby\u4e00\u6837\uff0c\u5b83\u4eec\u90fd\u662f\u51fa\u4e8e\u5bf9\u94c1\u9508\u7684\u70ed\u7231\u800c\u5199\u7684\u3002\n\u5728\u6211\u7684\u8111\u6d77\u4e2d\uff0c\u6211\u53ef\u4ee5\u60f3\u52305\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f1\u6765\u8868\u793a\u5b57\u7b26\u4e32\u3001\u5b57\u7b26\u4e32\u89c6\u56fe\u6216\u63a5\u53d7\u5b57\u7b26\u4e32y\u7684\u7b7e\u540d\uff1a\n(\u6211\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u4e0d\u662f\u771f\u6b63\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f46\u5b83\u7ecf\u5e38\u51fa\u73b0\u5728\u60ef\u7528\u7684\u5b57\u7b26\u4e32\u5904\u7406\u4ee3\u7801\u4e2d\u3002)\u3002\n\u4f5c\u4e3a\u4e00\u540dRust\u65b0\u624b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u4e4b\u95f4\u7684\u533a\u522b\u4ee4\u4eba\u975e\u5e38\u56f0\u60d1\uff0c\u5e76\u4e14\u4f7f\u5f97\u7406\u89e3\u5f15\u7528\u53d8\u5f97\u66f4\u52a0\u56f0\u96be(&amp\uff1b\u5b57\u7b26\u4e32\u4e3a\u4ec0\u4e48\u4e0d\u540c\u4e8e&amp\uff1bstr\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u76f4\u63a5\u521b\u5efa\u5b57\u7b26\u4e32\u5462\uff1f(\u89c1\u9b3c\u7684&amp\uff1b&amp\uff1bstr\u4ece\u54ea\u91cc\u6765\uff1f)\u3002\n&amp\uff1bstr to string\uff1astring\uff1a\uff1afrom()\u3001to_string()\u3001to_owner()\u3001into()\uff0c\u4e0d\u8ba1\u6570\u683c\u5f0f\u5316\u8def\u7531\u6216\u4f7f\u7528VEC\u6216[U8]\u5f80\u8fd4\u3002\n\u8fd9\u4e9b\u8def\u7ebf\u4e2d\u7684\u5927\u591a\u6570\u5728\u6027\u80fd\u4e0a\u90fd\u662f\u76f8\u7b49\u7684\uff0c\u800cRust\u793e\u533a\u4f3c\u4e4e\u5bf9\u54ea\u4e9b\u8def\u7ebf\u662f\u201c\u6b63\u786e\u7684\u201d\u610f\u89c1\u4e0d\u4e00\u3002\n\u6211\u6700\u7ec8\u517b\u6210\u4e86\u6839\u636e\u4e0a\u4e0b\u6587\u4f7f\u7528\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u7684\u4e60\u60ef(\u4f8b\u5982\uff0cinto()\u8868\u793a\u6211\u8981\u5c06&amp\uff1bstr\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u5c06\u5176\u8fd4\u56de\u7ed9_Owner()\uff0c\u8868\u793a\u6211\u8981\u53d6\u5f97\u6240\u6709\u6743\u4ee5\u4fbf\u7a0d\u540e\u4f7f\u7528\u8be5\u5b57\u7b26\u4e32)\u3002\n\u5f53\u524d\u6ca1\u6709\u83b7\u53d6\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u65b9\u6cd5\u3002std\uff1a\uff1aenv\uff1a\uff1ahome_dir()\u88ab\u660e\u786e\u6807\u8bb0\u4e3a\u5df2\u5f03\u7528\uff0c\u6587\u6863\u9f13\u52b1\u7528\u6237\u4f9d\u8d56\u76ee\u5f55\u673a\u7bb1(\u5f53\u524d\u5b58\u6863\u5728GitHub\u4e0a)2\u3002\n\u6ca1\u6709\u6807\u51c6\u7684\u6269\u5c55\u65b9\u5f0f~\u3002std\uff1a\uff1afs\uff1a\uff1acanonicalize\u652f\u6301\u3002\u800c\u4e14..\uff0c\u4f46\u4e0d\u662f~\u3002\u662f\u7684\uff0c\u6211\u77e5\u9053\u8fd9\u662f\u4e0a\u9762\u7684\u590d\u5236\u54c1\u3002\n\u65e0\u6cd5\u901a\u8fc7\u7cfb\u7edf\u5916\u58f3\u8c03\u7528\u547d\u4ee4\u3002\u662f\u7684\uff0c\u6211\u77e5\u9053\u7cfb\u7edf(3)\u662f\u574f\u7684\u3002\u662f\u7684\uff0c\u6211\u540c\u610f\u5b83\u4e0d\u5e94\u8be5\u662f\u6267\u884c\u5176\u4ed6\u8fdb\u7a0b\u7684\u9ed8\u8ba4\u63a5\u53e3\uff0c\u751a\u81f3\u5e94\u8be5\u9694\u79bb\u4ee5\u9632\u6b62\u65e0\u610f\u4f7f\u7528\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4e0d\u80fd\u6539\u53d8\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5b83\u5076\u5c14\u662f\u6709\u7528\u76843\uff0c\u5e76\u4e14\u5728\u6807\u51c6\u5e93\u4e2d\u53ef\u4ee5\u6bd4\u6700\u7ec8\u5f00\u53d1\u4eba\u5458\u968f\u610f\u4f7f\u7528sh-c\u66f4\u53ef\u9760\u5730\u5b9e\u73b0\u3002\n\u6ca1\u6709\u6807\u51c6\u7684\u6253\u7403\u65b9\u5f0f\u3002\u770b\u8d77\u6765\u7403\u72b6\u677f\u6761\u7bb1\u662f\u505a\u8fd9\u4ef6\u4e8b\u7684\u534a\u5b98\u65b9\u65b9\u5f0f\u3002\n\u65e0\u53ef\u5426\u8ba4\uff0c\u8fd9\u4e9b\u90fd\u662f\u5f88\u5c0f\u7684\u5dee\u8ddd\uff0c\u800c\u4e14\u90fd\u662f\u7531\u9ad8\u8d28\u91cf\u7684\u677f\u6761\u7bb1\u586b\u8865\u7684\u3002\u4f46\u5b83\u4eec\u589e\u52a0\u4e86\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u6469\u64e6\u529b\uff0c\u8003\u8651\u5230\u94c1\u9508\u672c\u6765\u662f\u5982\u4f55\u65e0\u6469\u64e6\u7684\uff0c\u8fd9\u79cd\u6469\u64e6\u529b\u5c24\u5176\u660e\u663e\u3002\n\u88ab\u544a\u77e5\u6211\u7f3a\u5c11Use std\uff1a\uff1aIO\uff1a\uff1aRead\u6216Use Std\uff1a\uff1aIO\uff1a\uff1aWrite\uff0c\u56e0\u4e3a\u6211\u6b63\u5728\u8c03\u7528\u4ed6\u4eec\u7684\u65b9\u6cd5\u4e4b\u4e00\uff0c\u8be5\u65b9\u6cd5\u5df2\u88ab\u4f5c\u7528\u57df\u4e2d\u5df2\u6709\u7684\u5185\u5bb9\u5b9e\u73b0\u3002\u6211\u7406\u89e3Rust\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\uff0c\u4f46\u611f\u89c9\u5f88\u5947\u602a\uff0c\u7279\u522b\u662f\u5728\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5426\u5219\u5c31\u662f\u7f16\u8bd1\u5668\u8b66\u544a\u3002\n\u5b9e\u73b0\u7279\u5f81\u7684\u7279\u5f81\u7684\u8bed\u6cd5\u3002\u4e3aT\uff1aOtherTrai\u7684\u7279\u5f81\u5b9e\u65bdT&lt\uff1bT&&gt;\u4e0d\u592a\u7cdf\u7cd5\uff0c\u4f46\u5b83\u8bfb\u8d77\u6765\u51e0\u4e4e\u4e0d\u50cf\u5176\u4ed6T\uff1aOtherTrait\u7684Imp\u7279\u5f81\u90a3\u4e48\u81ea\u7136\u3002\n\u6709\u65f6rustc\u9700\u8981\u6211\u6dfb\u52a0where self\uff1asize\u5230\u6211\u7684\u9759\u6001(\u5373\u975e\u6211)traitfunction\u3002\u6211\u4ecd\u7136\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8fd9\u6709\u65f6\u662f\u5fc5\u9700\u7684\uff0c\u6709\u65f6\u4e0d\u662f\uff1b\u6211\u786e\u4fe1\u6709\u4e00\u4e2a\u50cf\u6837\u7684\u7406\u7531\u3002\n\u7ed9\u5b9a\u56fa\u5b9a\u6570\u7ec4x=[T\uff1bN]\u548c\u7c7b\u578b\u4e3aU\u7684\u7d22\u5f15\u53d8\u91cfi\uff0c\u4f7f\u5f97U\uff1a\uff1aMAX&lt\uff1bN\uff0c\u901a\u8fc7x[i]\u8fdb\u884c\u7d22\u5f15\u5c06\u59cb\u7ec8\u662f\u5b89\u5168\u7684\u3002\u5c3d\u7ba1\u5982\u6b64\uff0cRustc\u5e0c\u671b\u7a0b\u5e8f\u5458\u660e\u786e\u5730\u5c06I\u62d3\u5bbd\u5230USIZE\uff1a\nfn main(){let lookup_table\uff1a[U8\uff1b256]=[0_u8\uff1b256]\uff1blet index=5_u8\uff1bprintln\uff01(&#34\uff1b{}&#34\uff1b\uff0clookup_table[index])\uff1b}\u3002\n\u9519\u8bef[E0277]\uff1a\u7c7b\u578b`[U8]`\u4e0d\u80fd\u7531`u8`\u7d22\u5f15--&gt\uff1bsrc/main.rs\uff1a4\uff1a20|4|println\uff01(&#34\uff1b{}&#34\uff1b\uff0clookup_table[index])\uff1b\n\u8fd9\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u4f46\u8981\u6c42\u7a0b\u5e8f\u5458\u8981\u4e48\u5728\u4ed6\u4eec\u8ba1\u5212\u7d22\u5f15\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528as usize(\u5197\u957f\uff0c\u5e76\u5c4f\u853d\u7d22\u5f15\u80cc\u540e\u7684\u610f\u56fe\u662fU8)\uff0c\u8981\u4e48\u5c06\u7d22\u5f15\u672c\u8eab\u8bbe\u4e3ausize(\u4e5f\u5c4f\u853d\u4e86\u610f\u56fe\uff0c\u5e76\u4f7f\u5176\u66f4\u5bb9\u6613\u8fdb\u884c\u6700\u7ec8\u8d85\u51fa\u754c\u9650\u7684\u7b97\u672f)\u3002\n\u6211\u4e0d\u77e5\u9053\u8fd9\u662f\u4e0d\u662f\u771f\u6b63\u7684\u866b\u5b50\uff0c\u4f46\u5b83\u54ac\u4e86\u6211\u51e0\u6b21\uff0c\u6240\u4ee5\u6211\u8981\u628a\u5b83\u6254\u6389\u3002\nCargo Install\u663e\u7136\u4e0d\u77e5\u9053\u5982\u4f55\u53d1\u73b0\u5e26\u540e\u7f00\u7684\u8f6f\u4ef6\u5305\u7248\u672c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5c06myfakepackage\u53d1\u5e03\u4e3a\u7248\u672c0.0.1-alpha.0\uff0c\u5219Cargo Install\u5c06\u62a5\u544a\uff1a\n\u6211\u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u60f3\u8981\u62b1\u6028\u7684\u4e8b\u60c5(\u6838\u5fc3\u7c7b\u578b\u7684\u522b\u540d\u4e0d\u652f\u6301\u7279\u5f81\uff0c\u5305\u751f\u6001\u7cfb\u7edf\u5728\u98ce\u683c\u4e0a\u6709\u70b9\u592ajs/npm-y)\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u5bf9\u4e00\u79cd\u6211\u975e\u5e38\u6ee1\u610f\u7684\u8bed\u8a00\u8fc7\u4e8e\u8d1f\u9762\u3002\n\u4e94\u5e74\u540e\u6211\u4ecd\u7136\u559c\u6b22Ruby\uff0c\u6211\u5bf9Rust\u611f\u5230\u4e50\u89c2\u3002\n\u4e0d\u5305\u62ec\u5b57\u7b26\u4e32\u548c&amp\uff1bcstr\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e3b\u8981\u5728\u5916\u56fd\u6295\u8d44\u73af\u5883\u4e2d\u4f7f\u7528\uff0c\u53ef\u4ee5\u7406\u89e3\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u3002\u201c\u21a9\u3002\n\u6211\u77e5\u9053\u5728POSIX\u5e73\u53f0\u4e0a\u53ef\u9760\u5730\u83b7\u53d6\u7528\u6237\u7684\u4e3b\u76ee\u5f55\u5b9e\u9645\u4e0a\u975e\u5e38\u56f0\u96be\u3002\u8fd9\u5e76\u4e0d\u80fd\u6539\u53d8\u6807\u51c6\u5e93\u5e94\u8be5\u5c1d\u8bd5\u8fd9\u6837\u505a\u7684\u4e8b\u5b9e\u3002\u201c\u21a9\u3002\n\u4e00\u4e2a\u6070\u5f53\u7684\u4f8b\u5b50\u662f\uff1aCLI\u7ecf\u5e38\u516c\u5f00\u94a9\u70b9\u548c\u56de\u8c03\uff0c\u56e0\u4e3a\u80fd\u591f\u7528\u5916\u58f3\u8bed\u6cd5\u7f16\u5199\u4ee3\u7801\u975e\u5e38\u6709\u7528\u3002\u3002\u21a9", "note_en": "Five years ago, I  wrote a post about thethings I hated most about my then (and still) favorite scripting language: Ruby.\n Today, I\u2019m going to do the same about my current favorite compiled language: Rust.\n Like the original Ruby post, these complains are personal and reflect my current best understandingof the language. Just like Ruby, they\u2019re written from an overarching position of  love for Rust.\n      Off the top of my head, I can think of 5 different ways  1 to represent strings, views of strings, orsignatures that accept string-y things:\n  (I\u2019m aware that the last one isn\u2019t really a string type, but it appears regularly in idiomaticstring-handling code.)\n As a Rust newbie, the distinctions between these types was  deeply confusing, and made it moredifficult to understand references (Why is a  &amp;String different from a  &amp;str? Why can\u2019t I create a str directly? Where the hell am I getting  &amp;&amp;str from?).\n   &amp;str to  String:  String::from(),  to_string(),  to_owned(),  into(), not countingformatting routes or round-tripping with a  Vec or  [u8]\n Most of these routes are equivalent in performance, and the Rust community seems divided onwhich ones are \u201cright\u201d.\n I\u2019ve ended up in the habit of using different ones depending onthe context (e.g.  into() to indicate that I\u2019m turning a  &amp;str into a  String so I canreturn it,  to_owned() to indicate that I\u2019m taking ownership to use the string later on).\n   No current way to get the user\u2019s home directory.  std::env::home_dir() is explicitly marked asdeprecated, and the documentation encourages users to rely on the  dirs crate (which is currently archived on GitHub)  2.\n  No standard way to expand  ~.  std::fs::canonicalize supports  . and .., but not  ~. Yes, I know this is a duplicate of the above.\n  No way to invoke a command  through a system shell. Yes, I know that  system(3) is bad.Yes, I agree that it shouldn\u2019t be the default interface for executing other processes, andshould even be quarantined to prevent unintentional use. None of that changes the factthat it\u2019s occasionally useful  3 and can be implemented more reliably in the standard librarythan by end developers throwing  sh -c around.\n  No standard way to  glob. It looks like the  glob crate is the semi-official way to do this.\n These are admittedly minor gaps, and are all addressed by high-quality crates. But they addfriction to the development process, friction that\u2019s especially noticeable given how frictionless Rust otherwise tends to be.\n   Is being told that I\u2019m missing  use std::io::Read or  use std::io::Write because I\u2019m callingone of their methods that\u2019s been  impl\u2018d by something I already have in scope. I understand  whyRust does it this way but it feels weird, especially in the context of unused imports otherwisebeing compiler warnings.\n  The syntax for implementing traits for traits.  impl&lt;T&gt; for Trait for T where T: OtherTraitisn\u2019t  too bad, but it doesn\u2019t read nearly as naturally as  impl Trait for OtherTrait would.\n  Sometimes  rustc needs me to add  where Self: Sized to my static (i.e., non- self) traitfunctions. I still don\u2019t understand why this is sometimes required and sometimes isn\u2019t; I\u2019m surethere\u2019s a decent reason.\n  Given a fixed array  x = [T; N] and an index variable  i of type  U such that  U::MAX &lt; N,indexing via  x[i] will always be safe. Despite this,  rustc expects the programmer to explicitlywiden  i to  usize:\n fn  main ()  {  let  lookup_table :  [ u8 ;  256 ]  =  [ 0_u8 ;  256 ];  let  index  =  5_u8 ;  println! ( &#34;{}&#34; ,  lookup_table [ index ]); }\n  error[E0277]: the type `[u8]` cannot be indexed by `u8` --&gt; src/main.rs:4:20 |4 | println!(&#34;{}&#34;, lookup_table[index]); | ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize` | = help: the trait `std::slice::SliceIndex&lt;[u8]&gt;` is not implemented for `u8` = note: required because of the requirements on the impl of `std::ops::Index&lt;u8&gt;` for `[u8]`\n Understandable, but requires that the programmer either use  as usize everywhere they plan onindexing (verbose, and masks the intent behind the index being a  u8) or that they make index itself into a  usize (also masks the intent, and makes it easier to do arithmetic that\u2019lleventually be out-of-bounds).\n  I don\u2019t know whether this one\u2019s a bona fide bug or not, but I\u2019m tossing it in since it\u2019sbitten me a few times.\n cargo install apparently doesn\u2019t know how to discover suffixed package versions. For example, ifI publish  myfakepackage as version  0.0.1-alpha.0,  cargo install will report:\n     I had some other things that I wanted to kvetch about (aliases for core types not supportingtraits, the package ecosystem being a little too JS/ npm-y in style), but I figure that doing soruns the risk of being too negative on a language that I am  overwhelmingly happy with.\n I still like Ruby five years later, and I\u2019m feeling optimistic about Rust.\n Not counting  CString and  &amp;CStr, since those are primarily used in FFI contexts and are understandably different.\u00a0 \u21a9\n  I understand that it\u2019s actually  remarkably difficult to reliably get the user\u2019s home directory on POSIX platforms. That doesn\u2019t change the fact that the standard library should attempt to.\u00a0 \u21a9\n  Case in point: CLIs frequently expose hook-points and callbacks where being able to write in shell syntax is useful.\u00a0 \u21a9", "posttime": "2020-05-20 22:16:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u751f\u9508,hate,\u5b57\u7b26\u4e32", "title": "\u6211\u8ba8\u538c\u751f\u9508\u7684\u5730\u65b9", "title_en": "Things I hate about Rust", "transed": 1, "url": "https://blog.yossarian.net/2020/05/20/Things-I-hate-about-rust", "via": "", "real_tags": ["rust", "\u751f\u9508", "hate", "\u5b57\u7b26\u4e32"]}, {"category": "", "categoryclass": "", "imagename": "667bb933916d509dd79ea313a68fa558.jpeg", "infoid": 1002957, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5373\u4f7f\u662f\u4e00\u573a\u5168\u7403\u5927\u6d41\u884c\u4e5f\u6ca1\u6709\u963b\u6b62\u8fd9\u4e2a\u57ce\u5e02\u56fd\u5bb6\u6267\u884c\u5176\u4e25\u5389\u7684\u6bd2\u54c1\u6cd5\u5f8b\u3002", "note_en": "Even a global pandemic hasn't deterred the city-state from enforcing its harsh drug laws.", "posttime": "2020-05-20 22:16:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "zoom,sentenced,\u56fd\u5bb6", "title": "\u65b0\u52a0\u5761\u521a\u521a\u901a\u8fc7Zoom\u5224\u5904\u4e00\u540d\u6bd2\u8d29\u6b7b\u5211", "title_en": "Singapore Just Sentenced a Drug Trafficker to Death via Zoom", "transed": 1, "url": "https://www.vice.com/en_us/article/bv8xvz/singapore-just-sentenced-a-drug-trafficker-to-death-via-zoom", "via": "", "real_tags": ["zoom", "sentenced", "\u56fd\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "14b9f01b0f6e7a3ae0238aeac2301dea.jpeg", "infoid": 1002956, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1987\u5e74\uff0c\u5728\u53d1\u8868\u5173\u4e8e\u6570\u636e\u62bd\u8c61\u548c\u5c42\u6b21\u7ed3\u6784\u7684\u4e3b\u65e8\u6f14\u8bb2\u65f6\uff0cBarbara Liskov\u4ecb\u7ecd\u4e86\u6700\u7ec8\u6210\u4e3aLiskov\u66ff\u6362\u539f\u5219\u7684\u60f3\u6cd5\u3002\u4ee5\u4e0b\u662f\u5bf9\u8be5\u539f\u5219\u7684\u73b0\u4ee3(\u4e14\u975e\u5e38\u6b63\u5f0f)\u63cf\u8ff0\uff1a\n\u8bbe\u03a6(X)\u662f\u5173\u4e8e\u7c7b\u578bT\u7684\u5bf9\u8c61x\u53ef\u8bc1\u660e\u7684\u6027\u8d28\uff0c\u5219\u03a6(Y)\u5bf9\u4e8e\u7c7b\u578bS\u7684\u5bf9\u8c61y\u5e94\u8be5\u4e3a\u771f\uff0c\u5176\u4e2dS\u662fT\u7684\u5b50\u7c7b\u578b\u3002\n\u5f53\u6211\u7b2c\u4e00\u6b21\u8bfb\u5230\u5b9a\u4e49\u65f6\uff0c\u6211\u6240\u7406\u89e3\u7684\u5c31\u662f\u5b83\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e0e\u7ee7\u627f\u6709\u5173\u2026\u2026\u3002\u4e5f\u8bb8\u5427?\u3002\u6211\u60f3\u51fa\u4e86\u4e00\u4e2a\u66f4\u7b80\u5355(\u867d\u7136\u4e0d\u592a\u5b8c\u6574)\u7684\u77ed\u8bed\uff0c\u53ef\u80fd\u66f4\u5bb9\u6613\u7406\u89e3\uff1a\n\u4f9d\u8d56\u4e8e\u7c7b\u578bP\u7684\u5bf9\u8c61\u7684\u4e00\u6bb5\u4ee3\u7801\u5e94\u8be5\u80fd\u591f\u6b63\u786e\u64cd\u4f5c\u7c7b\u578bC\u7684\u5bf9\u8c61\uff0c\u5176\u4e2dC\u662fP\u7684\u5b50\u7c7b\u578b\u3002\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5e94\u8be5\u4ee5\u4fc3\u8fdb\u6574\u4e2a\u5c42\u6b21\u7ed3\u6784\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u7684\u65b9\u5f0f\u8bbe\u8ba1\u6211\u4eec\u7684\u62bd\u8c61\u548c\u7c7b\u3002\u5982\u679c\u4e00\u4e2a\u5b50\u7c7b\u4ee5\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u8986\u76d6\u4e86\u884c\u4e3a\uff0c\u7834\u574f\u4e86\u4e0e\u5176\u4f59\u4ee3\u7801\u7684\u517c\u5bb9\u6027\uff0c\u6211\u4eec\u5c31\u8fdd\u53cd\u4e86\u8fd9\u4e00\u539f\u5219\u3002\n\u901a\u8fc7\u793a\u4f8b\u7406\u89e3LSP\u8981\u5bb9\u6613\u5f97\u591a\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u7f57\u4f2f\u7279\u00b7C\u00b7\u9a6c\u4e01\u63d0\u51fa\u7684\u6b63\u65b9\u5f62\u95ee\u9898\u3002\n\u6211\u4eec\u90fd\u540c\u610f\u6b63\u65b9\u5f62\u5c31\u662f\u957f\u65b9\u5f62\u7684\u89c2\u70b9\u3002\u4ece\u5b9a\u4e49\u4e0a\u8bb2\uff0c\u8fd9\u53e5\u8bdd\u662f\u6b63\u786e\u7684\uff0c\u4f46\u50cf\u8bb8\u591a\u5176\u4ed6\u4e8b\u60c5\u4e00\u6837\uff0c\u5b83\u5728\u7f16\u7a0b\u9886\u57df\u53ef\u80fd\u4e0d\u4f1a\u5f88\u597d\u5730\u5de5\u4f5c\u3002\n\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5176\u4e2d\u6211\u4eec\u65ad\u8a00Rectangle\u7684get_area\u51fd\u6570\u8fd0\u884c\u6b63\u5e38\uff1a\n\u77e9\u5f62=#.\u3002\u4ece\u67d0\u4e2a\u5730\u65b9\u83b7\u53d6Rectangle\u5bf9\u8c61\uff0c\u53ef\u80fdfactoryrectangle.set_height(5)rectangle.set_width(4)raise&#34\uff1b\u9762\u79ef\u8ba1\u7b97\u5df2\u5173\u95ed&#34\uff1b\u9664\u975e\u77e9\u5f62.get_Area==20#.\u3002\u66f4\u591a\u4ee3\u7801#\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u77e9\u5f62\u7c7bRectangle def initialize()end def set_width(Width)@width=width end def set_Height(Height)@Height=Height end def get_area return@width*@Height endend\u7684\u5047\u8bbe\u5b9e\u73b0\u3002\n\u73b0\u5728\uff0c\u5047\u8bbe\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2aSquare\u7c7b\uff0c\u6839\u636e\u5b9a\u4e49\u5b83\u4e5f\u662f\u4e00\u4e2a\u77e9\u5f62\u3002\u60a8\u4e0d\u80fd\u5355\u72ec\u8bbe\u7f6e\u6b63\u65b9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u8fd9\u4e24\u4e2a\u503c\u5bf9\u4e8e\u6b63\u65b9\u5f62\u6765\u8bf4\u603b\u662f\u76f8\u540c\u7684\u3002\n\u77e9\u5f62=#.\u3002\u6b64\u884c\u73b0\u5728\u7ed9\u51fa\u4e86\u4e00\u4e2aSquare\u5bf9\u8c61#\u5176\u4f59\u4ee3\u7801\u4fdd\u6301\u4e0d\u53d8#\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u60a8\u53ef\u4ee5\u627e\u5230Square\u7c7b\u7684\u5047\u8bbe\u5b9e\u73b0Square&lt\uff1bRectangle def set_width(Width)set_side(Width)end def set_Height(Height)set_side(Height)end def set_side(Side_Length)@Height=side_length@width=side_length endend\u3002\n\u5982\u679c\u6211\u4eec\u8fd0\u884c\u6b64\u4ee3\u7801\uff0c\u65ad\u8a00\u5c06\u5931\u8d25\uff0c\u56e0\u4e3a\u9762\u79ef\u73b0\u5728\u4e3a16\u3002\u4f7f\u7528\u7c7b\u578b\u4e3aRectangle(\u53ca\u5176\u5b50\u7c7b\u578b)\u7684\u5bf9\u8c61\u7684\u4ee3\u7801\u4e0eSquare\u4e2d\u65ad\uff0c\u5373\u4f7f\u5b83\u5b9e\u73b0\u4e0eSquare\u76f8\u540c\u7684\u516c\u5171\u63a5\u53e3\u548c\u884c\u4e3a\u4e5f\u662f\u5982\u6b64\u3002\nLSP\u4e0e\u7c7b\u578b\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u8bed\u4e49\u4e00\u81f4\u6027\u6709\u5173\u3002\u4ec5\u5728\u4e0a\u8ff0\u5c42\u6b21\u7ed3\u6784\u4e2d\u5b9e\u73b0\u76f8\u540c\u7684\u516c\u5171\u63a5\u53e3\u662f\u4e0d\u591f\u7684\uff0c\u884c\u4e3a\u4e5f\u5e94\u8be5\u662f\u4e00\u81f4\u7684\u3002\n\u6211\u4eec\u7684\u76ee\u6807\u662f\u4e92\u64cd\u4f5c\u6027\uff0c\u4ee5\u53ca\u5728\u4e0d\u9700\u8981\u7279\u6b8a\u5904\u7406\u5f02\u5e38\u503c\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b50\u7c7b\u578b\u7684\u80fd\u529b\u3002\n\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u57fa\u4e8e\u7c7b\u578b\u7684if\u8bed\u53e5\u6765\u89e3\u51b3\u95ee\u9898\uff1a\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u7c7b\u578b\u4e3aSquare\u7684\u5bf9\u8c61\uff0c\u8bf7\u6267\u884cX\u4e2a\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u5931\u63a7\u7684\u95ee\u9898\uff0c\u4f1a\u968f\u7740\u4ee3\u7801\u7684\u589e\u957f\u6c61\u67d3\u4f9d\u8d56\u4e8e\u77e9\u5f62\u7684\u4ee3\u7801\u6bb5\u3002\n\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u79cd\u6709\u7eaa\u5f8b\u7684\u65b9\u6cd5\uff1a\u53ea\u8981\u6211\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u516c\u5171\u63a5\u53e3\uff0c\u5b9e\u73b0Rectangle\u516c\u5171\u63a5\u53e3\u7684\u6bcf\u4e2a\u7c7b\u578b\u90fd\u5e94\u8be5\u50cf\u77e9\u5f62\u4e00\u6837\u5de5\u4f5c\u3002\n\u4e0e\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u4e2d\u7684\u4f20\u7edf\u7c7b\u5c42\u6b21\u7ed3\u6784\u76f8\u6bd4\uff0c\u8be5\u539f\u5219\u6709\u66f4\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5b83\u4e5f\u7528\u4e8e\u4e0e\u9e2d\u5b50\u7c7b\u578b\u5171\u4eab\u516c\u5171\u63a5\u53e3\uff0c\u6216\u8bbe\u8ba1\u5177\u6709\u5171\u4eabREST\u63a5\u53e3\u7684\u5fae\u670d\u52a1\u3002\n\u51c9\u723d\u7684!\u3002\u73b0\u5728\u4f60\u4eec\u4e5f\u77e5\u9053\u4e86S.O.L.I.D\u539f\u5219\u4e2d\u7684L\u3002\u4e86\u89e3\u6b64\u4e3b\u9898\u5bf9\u4e8e\u505a\u51fa\u6b63\u786e\u7684\u67b6\u6784\u9009\u62e9\u975e\u5e38\u91cd\u8981\u3002\u6211\u5e0c\u671b\u4f60\u5728\u5c06\u6765\u7684\u9879\u76ee\u4e2d\u80fd\u7528\u5230\u5b83\u3002\n\u4e0e\u670b\u53cb\u548c\u540c\u4e8b\u5206\u4eab\u8fd9\u7bc7\u6587\u7ae0\u3002\u611f\u8c22\u60a8\u5e2e\u52a9\u6211\u8054\u7cfb\u5230\u53ef\u80fd\u4f1a\u89c9\u5f97\u6b64\u4fe1\u606f\u6709\u7528\u7684\u4eba\u3002\n\u5728\u201c\u6e05\u6d01\u67b6\u6784\u201d\u7684\u7b2c9\u7ae0\u4e2d\u6709\u66f4\u591a\u5173\u4e8eOCP\u7684\u4fe1\u606f\u3002\u8fd9\u672c\u4e66\u548c\u5176\u4ed6\u975e\u5e38\u6709\u5e2e\u52a9\u7684\u4e66\u90fd\u5728\u63a8\u8350\u4e66\u5355\u4e0a\u3002\n\u7ed9\u6211\u53d1\u4e00\u5c01\u6709\u95ee\u9898\u3001\u8bc4\u8bba\u6216\u5efa\u8bae\u7684\u7535\u5b50\u90ae\u4ef6(\u5b83\u5728\u5173\u4e8e\u6211\u7684\u9875\u9762\u4e0a)\u3002\u6765\u5427\uff0c\u522b\u5bb3\u7f9e\uff01", "note_en": "In 1987, while delivering a keynote on data abstractions and hierarchies, Barbara Liskov introduced the idea that would eventually become the  Liskov substitution principle. The following is a modern (and very formal) description of the principle:\n Let \u03a6(x) be a property provable about objects x of type T. Then \u03a6(y) should be true for objects y of type S where S is a subtype of T.\n When I read the definition for the first time, all I understood was that it&#39;s somehow related to inheritance... maybe? I came up with a simpler (albeit less complete) phrase that might be easier to understand:\n A piece of code that depends on an object of type P should be able to operate properly with objects of type C, where C is a subtype of P\n What this means is that we should design our abstractions and classes in a way that facilitates interoperability across the complete hierarchy. If a subclass overrides the behavior in an unexpected way that breaks compatibility with the rest of the code, we are violating the principle.\n Understanding the LSP is much easier with an example. Let&#39;s take a look at the Square-Rectangle problem proposed by Robert C. Martin.\n  We all agree with the notion that &#39;a square is a rectangle&#39;. This statement is by definition correct, but like a lot of other things, it might not work that well in the world of programming.\n Suppose we have the following code where we assert that Rectangle&#39;s get_area function behaves properly:\n rectangle = #... Gets a Rectangle object from somewhere, maybe a factoryrectangle.set_height(5)rectangle.set_width(4)raise &#34;Area calculation is off&#34; unless rectangle.get_area == 20#... more code # In another file, you can find a hypothetical implementation of the Rectangle classclass Rectangle def initialize() end def set_width(width) @width = width end def set_height(height) @height = height end def get_area return @width * @height endend\n  Now, imagine we implement a Square class, which is also by definition a Rectangle. You can&#39;t set the width and height of a square independently, those two values are always the same for a square.\n  rectangle = #... This line now gives a Square object# The rest of the code stays the same# In another file, you can find a hypothetical implementation of the Square classclass Square &lt; Rectangle def set_width(width) set_side(width) end def set_height(height) set_side(height) end def set_side(side_length) @height = side_length @width = side_length endend\n If we run this code, the assertion will fail, as the area is now 16. The code that worked with objects of type Rectangle (and its subtypes) breaks with Square, even if it implements the same public interface and behaves as a Square should.\n  The LSP is about  semantic consistency in a type hierarchy. It&#39;s not enough to implement the same public interface across said hierarchies, the behavior should also be consistent.\n We aim for interoperability, and the ability to work with subtypes without the need for &#39;special handling&#39; for outliers.\n In our example, we might be tempted to solve the problem with an if statement based on types: if we find an object of type Square, perform X different action. This is a problem that can spiral out of control very easily and  pollute pieces of code that depend on Rectangle as our code grows.\n What we need in place is a disciplined approach: every type that implements the Rectangle public interface should act like a Rectangle  as long as we are using the same public interface.\n This principle has a broader application than just traditional class hierarchies in statically typed languages. It&#39;s also used when sharing a public interface with duck types, or designing microservices with a shared REST interface.\n Cool! Now you also know about the L of the S.O.L.I.D principles. Knowledge of this topic is important for making the right architectural choices. I hope you&#39;ll be able to use it in your future projects.\n  Share this article with friends and colleagues. Thank you for helping me reach people who might find this information useful.\n  There&#39;s more info about the OCP in chapter 9 of Clean Architecture. This and other very helpful books are in the  recommended reading list.\n Send me an email with questions, comments or suggestions (it&#39;s in the  About Me page). Come on, don&#39;t be shy!", "posttime": "2020-05-20 22:15:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65af\u79d1\u592b,substitution,\u7c7b\u578b", "title": "\u5229\u65af\u79d1\u592b\u4ee3\u6362\u539f\u7406(\u7b80\u5316)", "title_en": "The Liskov Substitution Principle (Simplified)", "transed": 1, "url": "https://www.brainstobytes.com/the-liskov-substitution-principle/", "via": "", "real_tags": ["\u65af\u79d1\u592b", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002955, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u4e2a\u6708\u524d\uff0cReddit\u4e0a\u6709\u4e00\u7bc7\u5e16\u5b50(\u94fe\u63a5)\uff0c\u63cf\u8ff0\u4e86\u4e00\u6b3e\u6e38\u620f\uff0c\u5b83\u4f7f\u7528\u8bb0\u4e8b\u672c\u7684\u5f00\u6e90\u514b\u9686\u6765\u5904\u7406\u6240\u6709\u7684\u8f93\u5165\u548c\u6e32\u67d3\u3002\u5f53\u6211\u8bfb\u5230\u8fd9\u4ef6\u4e8b\u7684\u65f6\u5019\uff0c\u6211\u60f3\uff0c\u5982\u679c\u80fd\u770b\u5230\u4e00\u4e9b\u7c7b\u4f3c\u7684\u4e1c\u897f\u5728\u666e\u901a\u7684Windows\u8bb0\u4e8b\u672c\u4e0a\u8fd0\u884c\uff0c\u90a3\u5c06\u4f1a\u662f\u4e00\u4ef6\u975e\u5e38\u9177\u7684\u4e8b\u60c5\u3002\u7136\u540e\u6211\u82b1\u4e86\u592a\u591a\u7684\u7a7a\u95f2\u65f6\u95f4\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002\n\u6211\u6700\u7ec8\u5236\u4f5c\u4e86\u4e00\u6b3eSnake\u6e38\u620f\u548c\u4e00\u4e2a\u4f7f\u7528\u666e\u901a\u8bb0\u4e8b\u672c\u5b8c\u6210\u6240\u6709\u8f93\u5165\u548c\u6e32\u67d3\u4efb\u52a1\u7684\u5c0f\u578b\u5149\u7ebf\u8ddf\u8e2a\u5668\uff0c\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4e86\u89e3\u4e86DLL\u6ce8\u5165\u3001API\u6302\u94a9\u548c\u5185\u5b58\u626b\u63cf\u3002\u4f3c\u4e4e\u628a\u6211\u5b66\u5230\u7684\u4e1c\u897f\u5199\u51fa\u6765\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u672c\u6709\u8da3\u7684\u8bfb\u7269\uff0c\u5e76\u7ed9\u6211\u4e00\u4e2a\u673a\u4f1a\u5c55\u793a\u6211\u540c\u65f6\u6784\u5efa\u7684\u90a3\u4e9b\u611a\u8822\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u63a5\u4e0b\u6765\u51e0\u7bc7\u535a\u5ba2\u5e16\u5b50\u8981\u8bb2\u7684\u5185\u5bb9\u3002\n\u7531\u4e8e\u7bc7\u5e45\u7684\u5173\u7cfb\uff0c\u6211\u628a\u8fd9\u7bc7\u6587\u7ae0\u5206\u6210\u4e86\u4e24\u7bc7\u535a\u6587\u3002\u7b2c\u4e00\u4e2a\u5e16\u5b50\u5c06\u8ba8\u8bba\u5185\u5b58\u626b\u63cf\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53ca\u6211\u5982\u4f55\u4f7f\u7528\u5b83\u5c06notepad.exe\u8f6c\u6362\u4e3a30+fps\u7684\u6e32\u67d3\u76ee\u6807\u3002\u6211\u8fd8\u5c06\u8ba8\u8bba\u6211\u6784\u5efa\u7684\u6e32\u67d3\u5230\u8bb0\u4e8b\u672c\u4e2d\u7684\u5149\u7ebf\u8ddf\u8e2a\u5668\u3002\n\u7b2c\u4e8c\u4e2a\u5e16\u5b50\u5c06\u8ba8\u8bba\u4f7f\u7528windows\u94a9\u5b50\u6765\u6355\u83b7\u8f93\u5165\u5e76\u5206\u4eab\u6211\u521b\u5efa\u7684Snake\u6e38\u620f\uff0c\u8be5\u6e38\u620f\u51e0\u4e4e\u4f7f\u7528\u4e86\u8fd9\u4e24\u4e2a\u5e16\u5b50\u4e2d\u63cf\u8ff0\u7684\u6240\u6709\u5185\u5bb9\u3002\n\u5982\u679c\u4f60\u53ea\u662f\u60f3\u770b\u770b\u4ee3\u7801\uff0c\u6574\u4e2a\u9879\u76ee(\u5305\u62ec\u5149\u7ebf\u8ddf\u8e2a\u5668\u548c\u86c7\u6e38\u620f)\u90fd\u5728gihub\u4e0a\u3002\n\u5f88\u660e\u663e\uff0c\u5f00\u59cb\u8fd9\u4e00\u5207\u7684\u5730\u65b9\u662f\u8ba8\u8bba\u5982\u4f55\u5c06\u5173\u952e\u4e8b\u4ef6\u53d1\u9001\u5230\u6b63\u5728\u8fd0\u884c\u7684\u8bb0\u4e8b\u672c\u5b9e\u4f8b\u3002\u8fd9\u662f\u8fd9\u4e2a\u9879\u76ee\u4e2d\u6700\u65e0\u804a\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u6211\u5c31\u957f\u8bdd\u77ed\u8bf4\u4e86\u3002\n\u5982\u679c\u60a8\u4ece\u672a\u4f7f\u7528Win32\u63a7\u4ef6\u6784\u5efa\u8fc7\u5e94\u7528\u7a0b\u5e8f(\u5c31\u50cf\u6211\u6ca1\u6709\u8fc7\u7684\u90a3\u6837)\uff0c\u60a8\u53ef\u80fd\u4f1a\u60ca\u8bb6\u5730\u4e86\u89e3\u5230\uff0c\u4ece\u83dc\u5355\u680f\u5230\u6309\u94ae\uff0c\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u6bcf\u4e2aUI\u5143\u7d20\u90fd\u662f\u5b83\u81ea\u5df1\u7684\u201c\u7a97\u53e3\u201d\uff0c\u800c\u5c06\u952e\u8f93\u5165\u53d1\u9001\u5230\u7a0b\u5e8f\u6d89\u53ca\u5c06\u8f93\u5165\u53d1\u9001\u5230\u60a8\u60f3\u8981\u63a5\u6536\u7684UI\u5143\u7d20\u3002\u5e78\u8fd0\u7684\u662f\uff0cVisual Studio\u9644\u5e26\u4e86\u4e00\u4e2a\u540d\u4e3aSpy++\u7684\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5217\u51fa\u7ec4\u6210\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u7a97\u53e3\u3002\nSpy++\u900f\u9732\uff0c\u6211\u8981\u627e\u7684\u8bb0\u4e8b\u672c\u5b50\u7a97\u53e3\u662f\u201c\u7f16\u8f91\u201d\u7a97\u53e3\u3002\u4e00\u65e6\u6211\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u5c31\u53ea\u9700\u8981\u627e\u51fa\u6b63\u786e\u7684Win32\u51fd\u6570\u8c03\u7528\u7ec4\u5408\u6765\u83b7\u5f97\u8be5UI\u5143\u7d20\u7684HWND\uff0c\u7136\u540e\u5c06\u952e\u8f93\u5165\u53d1\u9001\u5230\u90a3\u91cc\u3002\u62ff\u5230HWND\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\nHWND GetWindowForProcessAndClassName(DWORD PID\uff0cconst char*className){HWND curWnd=GetTopWindow(0)\uff1b//0 arg\u8868\u793a\u83b7\u53d6Z\u987a\u5e8f\u5b57\u7b26classNameBuf[256]\u7684\u9876\u90e8\u7a97\u53e3\uff1b\u800c(curWnd\uff01=NULL){DWORD curPid\uff1bDWORD dwThreadId=GetWindowThreadProcessId(curWnd\uff0c&amp\uff1bcurPid\u3002HWND Child Window=FindWindowEx(curWnd\uff0cNULL\uff0cclassName\uff0cNULL)\uff1bIF(Child Window\uff01=NULL)RETURN CHILD Window\uff1b}curWnd=GetNextWindow(curWnd\uff0cGW_HWNDNEXT)\uff1b}RETURN NULL\uff1b}\u3002\n\u4e00\u65e6\u6211\u6709\u4e86\u6b63\u786e\u63a7\u4ef6\u7684HWND\uff0c\u5728\u8bb0\u4e8b\u672c\u7684\u7f16\u8f91\u63a7\u4ef6\u4e2d\u7ed8\u5236\u4e00\u4e2a\u5b57\u7b26\u53ea\u9700\u4f7f\u7528PostMessage\u5411\u5176\u53d1\u9001\u4e00\u4e2aWM_CHAR\u4e8b\u4ef6\u5373\u53ef\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u60f3\u81ea\u5df1\u4f7f\u7528Spy++\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u8981\u4f7f\u7528\u5b83\u768464\u4f4d\u7248\u672c\uff0c\u8fd9\u4ee4\u4eba\u8d39\u89e3\u5730\u4e0d\u662fVisual Studio 2019\u9ed8\u8ba4\u542f\u52a8\u7684Verion\u3002\u76f8\u53cd\uff0c\u60a8\u9700\u8981\u5728Visual Studio\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u641c\u7d22\u201cspyxx_amd64.exe\u201d\u3002\n\u5927\u7ea610\u79d2\u540e\uff0c\u6211\u624d\u610f\u8bc6\u5230\uff0c\u5373\u4f7f\u6211\u80fd\u627e\u5230\u4e00\u79cd\u4e0d\u90a3\u4e48\u9ebb\u70e6\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\u7a97\u53e3\u6d88\u606f\u5c06\u6574\u4e2a\u6e38\u620f\u5c4f\u5e55\u7ed8\u5236\u5230\u8bb0\u4e8b\u672c\u4e0a\uff0c\u4e5f\u592a\u6162\u4e86\uff0c\u751a\u81f3\u8fde\u63a5\u8fd130 Hz\u7684\u5237\u65b0\u5468\u671f\u90fd\u592a\u6162\u4e86\u3002\u5b83\u4e5f\u771f\u7684\u5f88\u65e0\u804a\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u82b1\u592a\u957f\u65f6\u95f4\u53bb\u5bfb\u627e\u8ba9\u5b83\u8d70\u5f97\u66f4\u5feb\u7684\u65b9\u6cd5\u3002\n\u5728\u8bbe\u7f6e\u5047\u952e\u8f93\u5165\u65f6\uff0c\u6211\u60f3\u8d77\u4e86CheatEngine\u3002\u8fd9\u662f\u4e00\u4e2a\u8ba9\u7528\u6237\u5728\u4ed6\u4eec\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u8fdb\u7a0b\u4e2d\u67e5\u627e\u548c\u4fee\u6539\u5185\u5b58\u7684\u7a0b\u5e8f\u3002\u5927\u591a\u6570\u65f6\u5019\uff0c\u5b83\u88ab\u4eba\u4eec\u7528\u6765\u8bd5\u56fe\u5728\u6e38\u620f\u4e2d\u4f5c\u5f0a\u6216\u505a\u5176\u4ed6\u8ba9\u6e38\u620f\u5f00\u53d1\u4eba\u5458\u4f24\u5fc3\u7684\u4e8b\u60c5\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6210\u4e3a\u4e00\u79cd\u5584\u7684\u529b\u91cf\u3002\n\u50cfCheatEngine\u8fd9\u6837\u7684\u5185\u5b58\u626b\u63cf\u5668\u901a\u8fc7\u67e5\u627e\u76ee\u6807\u8fdb\u7a0b\u4e2d\u5305\u542b\u7279\u5b9a\u503c\u7684\u6240\u6709\u5185\u5b58\u5730\u5740\u6765\u5de5\u4f5c\u3002\u5047\u8bbe\u4f60\u6b63\u5728\u73a9\u4e00\u4e2a\u6e38\u620f\uff0c\u4f60\u60f3\u7ed9\u81ea\u5df1\u66f4\u591a\u7684\u5065\u5eb7\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u6240\u793a\u7684\u8fc7\u7a0b\u8fdb\u884c\uff1a\n\u4f7f\u7528\u5185\u5b58\u626b\u63cf\u5668\u67e5\u627e\u6e38\u620f\u5185\u5b58\u4e2d\u5b58\u50a8\u60a8\u5065\u5eb7\u4ef7\u503c\u7684\u6240\u6709\u5730\u5740(\u6bd4\u65b9\u8bf4100\u4e2a)\u3002\n\u641c\u7d22\u60a8\u4ee5\u524d\u627e\u5230\u7684\u6240\u6709\u5730\u5740(\u5b58\u50a8100)\u4ee5\u67e5\u627e\u73b0\u5728\u5b58\u50a892\u7684\u5730\u5740\u3002\n\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230\u60a8\u62e5\u6709\u5355\u4e2a\u5185\u5b58\u5730\u5740(\u5f88\u53ef\u80fd\u662f\u5b58\u50a8\u60a8\u7684\u5065\u5eb7\u7684\u5730\u5740)\u3002\n\u8fd9\u51e0\u4e4e\u5c31\u662f\u6211\u6240\u505a\u7684\uff0c\u53ea\u662f\u6211\u641c\u7d22\u7684\u4e0d\u662f\u5065\u5eb7\u503c\uff0c\u800c\u662f\u5b58\u50a8\u5f53\u524d\u663e\u793a\u5728\u8bb0\u4e8b\u672c\u4e2d\u7684\u6587\u672c\u5b57\u7b26\u4e32\u7684\u5185\u5b58\u3002\u7ecf\u8fc7\u53cd\u590d\u8bd5\u9a8c\uff0c\u6211\u80fd\u591f\u4f7f\u7528CheatEngine\u67e5\u627e(\u5e76\u66f4\u6539)\u6b63\u5728\u663e\u793a\u7684\u6587\u672c\u3002\u6211\u8fd8\u5b66\u5230\u4e86\u5173\u4e8e\u8bb0\u4e8b\u672c\u7684\u4e09\u4e2a\u91cd\u8981\u4fe1\u606f\uff1a\n\u8bb0\u4e8b\u672c\u7684\u7f16\u8f91\u7a97\u53e3\u5728\u5c4f\u5e55\u4e0a\u5b58\u50a8UTF-16\u683c\u5f0f\u7684\u6587\u672c\uff0c\u5373\u4f7f\u7a97\u53e3\u7684\u53f3\u4e0b\u89d2\u663e\u793a\u60a8\u7684\u6587\u4ef6\u662fUTF-8\u3002\n\u5982\u679c\u6211\u4e0d\u65ad\u5220\u9664\u5e76\u91cd\u65b0\u952e\u5165\u540c\u4e00\u5b57\u7b26\u4e32\uff0cCheatEngine\u5c06\u5f00\u59cb\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u6b64\u6570\u636e\u7684\u591a\u4e2a\u526f\u672c(\u53ef\u80fd\u662f\u64a4\u6d88\u7f13\u51b2\u533a\uff1f)\u3002\n\u6211\u65e0\u6cd5\u7528\u66f4\u957f\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u663e\u793a\u7684\u6587\u672c\uff0c\u8fd9\u610f\u5473\u7740\u8bb0\u4e8b\u672c\u6ca1\u6709\u9884\u5148\u5206\u914d\u6587\u672c\u7f13\u51b2\u533a\u3002\n\u5c3d\u7ba1\u4e0d\u80fd\u4fee\u6539\u6587\u672c\u7f13\u51b2\u533a\u7684\u957f\u5ea6\uff0c\u4f46\u8fd9\u4f3c\u4e4e\u5f88\u6709\u5e0c\u671b\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u7f16\u5199\u81ea\u5df1\u7684\u5c0f\u578b\u5185\u5b58\u626b\u63cf\u5668\u5d4c\u5165\u5230\u6211\u7684\u9879\u76ee\u4e2d\u3002\n\u6211\u627e\u4e0d\u5230\u5f88\u591a\u5173\u4e8e\u6784\u5efa\u5185\u5b58\u626b\u63cf\u4eea\u7684\u4fe1\u606f\uff0c\u4f46\u6211\u786e\u5b9e\u627e\u5230\u4e86Chris Wellons\u7684\u4e00\u7bc7\u5f88\u68d2\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u5176\u4e2d\u8c08\u5230\u4e86\u4ed6\u4e3a\u81ea\u5df1\u7684\u4f5c\u5f0a\u5de5\u5177\u7f16\u5199\u7684\u5185\u5b58\u626b\u63cf\u4eea(\u5e76\u63d0\u4f9b\u4e86\u94fe\u63a5)\u3002\u6839\u636e\u90a3\u7bc7\u535a\u5ba2\u6587\u7ae0\u548c\u6211\u4f7f\u7528CheatEngine\u7684\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u6211\u80fd\u591f\u62fc\u51d1\u51fa\u5185\u5b58\u626b\u63cf\u4eea\u7684\u57fa\u672c\u7b97\u6cd5\u5982\u4e0b\u6240\u793a\uff1a\n\u5bf9\u4e8e\u76ee\u6807\u8fdb\u7a0b\u5206\u914d\u7684\u6bcf\u4e2a\u5185\u5b58\u5757\uff0c\u5982\u679c\u8be5\u5757\u5df2\u63d0\u4ea4\u5e76\u542f\u7528\u4e86\u8bfb/\u5199\uff0c\u5219\u5728\u53d1\u73b0IT\u8fd4\u56de\u8be5\u5730\u5740\u65f6\u626b\u63cf\u8be5\u5757\u7684\u5185\u5bb9\u4ee5\u67e5\u627e\u6211\u4eec\u7684\u5b57\u8282\u6a21\u5f0f\n\u6211\u7684\u6574\u4e2a\u5185\u5b58\u626b\u63cf\u5668\u5b9e\u73b0\u6700\u7ec8\u53ea\u6709\u5927\u7ea640\u884c\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u5c06\u904d\u5386\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u3002\n\u5185\u5b58\u626b\u63cf\u7a0b\u5e8f\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8fed\u4ee3\u8fdb\u7a0b\u5206\u914d\u7684\u5185\u5b58\u3002\n\u56e0\u4e3aWindows\u4e0a\u6bcf\u4e2a64\u4f4d\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u8303\u56f4\u662f\u76f8\u540c\u7684(0x00000000000\u52300x7FFFFFFFFFFF)\uff0c\u6240\u4ee5\u6211\u4ece\u6307\u5411\u5730\u57400\u7684\u6307\u9488\u5f00\u59cb\uff0c\u5e76\u4f7f\u7528VirtualQueryEx\u83b7\u53d6\u6709\u5173\u76ee\u6807\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u7684\u4fe1\u606f\u3002\nVirtualQueryEx\u5c06\u5177\u6709\u76f8\u540c\u5185\u5b58\u5c5e\u6027\u7684\u8fde\u7eed\u9875\u9762\u5206\u7ec4\u5230MEMORY_BASIC_INFORMATION\u7ed3\u6784\u4e2d\uff0c\u56e0\u6b64VirtualQueryEx\u4e3a\u7ed9\u5b9a\u5730\u5740\u8fd4\u56de\u7684\u7ed3\u6784\u5f88\u53ef\u80fd\u5305\u542b\u6709\u5173\u591a\u4e2a\u9875\u9762\u7684\u4fe1\u606f\u3002\u8fd4\u56de\u7684MEMORY_BASIC_INFORMATION\u5b58\u50a8\u8fd9\u7ec4\u5171\u4eab\u7684\u5185\u5b58\u5c5e\u6027\uff0c\u4ee5\u53ca\u9875\u9762\u8de8\u5ea6\u7684\u8d77\u59cb\u5730\u5740\u548c\u6574\u4e2a\u8de8\u5ea6\u7684\u5927\u5c0f\u3002\n\u4e00\u65e6\u6211\u6709\u4e86\u7b2c\u4e00\u4e2aMEMORY_BASIC_INFORMATION\u7ed3\u6784\uff0c\u904d\u5386\u5185\u5b58\u5c31\u53ea\u9700\u5c06\u5f53\u524d\u7ed3\u6784\u7684BaseAddress\u548cRegionSize\u6210\u5458\u76f8\u52a0\uff0c\u5e76\u5c06\u65b0\u5730\u5740\u63d0\u4f9b\u7ed9VirtualQueryEx\u4ee5\u83b7\u5f97\u4e0b\u4e00\u7ec4\u8fde\u7eed\u7684\u9875\u9762\u3002\nchar*FindBytePatternInProcessMemory(Handle Process\uff0cConst char*Pattern\uff0csize_t patternLen){char*basePtr=(char*)0x0\uff1bmemory_basic_information memInfo\uff1bWhile(VirtualQueryEx(process\uff0c(void*)basePtr\uff0c&amp\uff1bmemo\uff0csizeof(Memory_Basic_Information)){const DWORD mem_Commit=0x1000\uff1bconst DWORD\u3002state==mem_Commit&amp\uff1b&amp\uff1bmemInfo\u3002Protect==PAGE_ReadWrite){//\u5728\u6b64\u5185\u5b58\u4e2d\u641c\u7d22\u6211\u4eec\u7684\u6a21\u5f0f}basePtr=(char*)\u5907\u5fd8\u5f55\u4fe1\u606f\u3002BaseAddress+\u5907\u5fd8\u5f55\u4fe1\u606f\u3002RegionSize\uff1b}}\u3002\n\u4e0a\u9762\u7684\u4ee3\u7801\u7a0d\u5fae\u63d0\u524d\u4e86\u4e00\u70b9\uff0c\u8fd8\u901a\u8fc7\u68c0\u67e5.State\u548c.Protect\u7ed3\u6784\u6210\u5458\u6765\u786e\u5b9a\u662f\u5426\u63d0\u4ea4\u4e86\u4e00\u7ec4\u9875\u9762\u5e76\u542f\u7528\u4e86\u8bfb/\u5199\u3002\u60a8\u53ef\u4ee5\u5728MEMORY_BASIC_INFORMATION\u7684\u6587\u6863\u4e2d\u627e\u5230\u8fd9\u4e9b\u53d8\u91cf\u7684\u6240\u6709\u53ef\u80fd\u503c\uff0c\u4f46\u662f\u6211\u7684\u626b\u63cf\u4eea\u5173\u5fc3\u7684\u503c\u662f\u72b6\u60010x1000(MEM_COMMIT)\u548c\u4fdd\u62a4\u7ea7\u522b0x04(PAGE_READWRITE)\u3002\n\u4e0d\u53ef\u80fd\u76f4\u63a5\u8bfb\u53d6\u4e0d\u540c\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u6570\u636e(\u6216\u8005\u81f3\u5c11\uff0c\u6211\u6ca1\u6709\u65e0\u610f\u4e2d\u77e5\u9053\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9)\u3002\u76f8\u53cd\uff0c\u6211\u9996\u5148\u9700\u8981\u5c06\u9875\u9762\u8303\u56f4\u7684\u5185\u5bb9\u590d\u5236\u5230\u5185\u5b58\u626b\u63cf\u5668\u7684\u5730\u5740\u7a7a\u95f4\u3002\u6211\u7528ReadProcessMemory\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\n\u4e00\u65e6\u5c06\u5185\u5b58\u590d\u5236\u5230\u672c\u5730\u53ef\u89c1\u7684\u7f13\u51b2\u533a\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u5176\u4e2d\u641c\u7d22\u5b57\u8282\u6a21\u5f0f\u3002\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5728\u6211\u7684\u7b2c\u4e00\u4e2a\u626b\u63cf\u5668\u5b9e\u73b0\u4e2d\uff0c\u6211\u5ffd\u7565\u4e86\u5185\u5b58\u4e2d\u53ef\u80fd\u5b58\u5728\u76ee\u6807\u5b57\u8282\u6a21\u5f0f\u7684\u591a\u4e2a\u526f\u672c\u7684\u53ef\u80fd\u6027\u3002\u540e\u6765\uff0c\u6211\u4e3a\u8fd9\u4e2a\u95ee\u9898\u60f3\u51fa\u4e86\u4e00\u4e2a\u8001\u751f\u5e38\u8c08\u7684\u89e3\u51b3\u529e\u6cd5\uff0c\u4f7f\u6211\u4e0d\u5fc5\u5728\u6211\u7684\u626b\u63cf\u4eea\u903b\u8f91\u4e2d\u5b9e\u9645\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\nchar*FindPattern(char*src\uff0csize_t srcLen\uff0cconst char*pattern\uff0csize_t patternLen){char*cur=src\uff1bsize_t curPos=0\uff1bWhile(curPos&lt\uff1bsrcLen){if(memcmp(cur\uff0cpattern\uff0cpatternLen)==0){return cur\uff1b}curPos++\uff1bcur=&amp\uff1bsrc[curPos\u3002\n\u5982\u679cFindPattern()\u8fd4\u56de\u5339\u914d\u6307\u9488\uff0c\u5219\u9700\u8981\u5c06\u5176\u5730\u5740\u8f6c\u6362\u4e3a\u76ee\u6807\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u76f8\u540c\u4f4d\u5185\u5b58\u7684\u5730\u5740\u3002\u4e3a\u6b64\uff0c\u6211\u4ece\u4eceFindPattern\u8fd4\u56de\u7684\u5730\u5740\u4e2d\u51cf\u53bb\u672c\u5730\u7f13\u51b2\u533a\u7684\u8d77\u59cb\u5730\u5740\u4ee5\u83b7\u5f97\u504f\u79fb\u91cf\uff0c\u7136\u540e\u5c06\u5176\u6dfb\u52a0\u5230\u76ee\u6807\u8fdb\u7a0b\u4e2d\u7684\u5185\u5b58\u5757\u7684\u57fa\u5730\u5740\u4e0a\u3002\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\u8fd9\u4e2a\u3002\nchar*FindBytePatternInProcessMemory(Handle Process\uff0cConst char*Pattern\uff0csize_t patternLen){MEMORY_BASIC_INFORMATION\u5907\u5fd8\u5f55\u4fe1\u606f\uff1bchar*basePtr=(char*)0x0\uff1bWhile(VirtualQueryEx(Process\uff0c(void*)basePtr\uff0c&amp\uff1bmemo\uff0csizeof(MEMORY_BASIC_INFORMATION)){const DWORD mem_Commit=0x1000\uff1bconst DWORD\u3002state==mem_Commit&amp\uff1b&amp\uff1bmemInfo\u3002Protect==PAGE_ReadWrite){char*remoteMemRegionPtr=(char*)memInfo\u3002BaseAddress\uff1bchar*localCopyContents=(char*)malloc(\u5907\u5fd8\u5f55\u4fe1\u606f\u3002RegionSize)\uff1bSize_T bytesRead=0\uff1bIF(ReadProcessMemory(Process\uff0cmemInfo.\u3002BaseAddress\u3001localCopyContents\u3001memInfo\u3002RegionSize\uff0c&amp\uff1bbytesRead)){char*Match=FindPattern(localCopyContents\uff0cmemInfo.\u3002RegionSize\uff0cPattern\uff0cpatternLen)\uff1bIF(Match){uint64_t diff=(Uint64_T)Match-(Uint64_T)(LocalCopyContents)\uff1bchar*processPtr=remoteMemRegionPtr+diff\uff1breturn processPtr\uff1b}}free(LocalCopyContents)\uff1b}basePtr=(char*)\u5907\u5fd8\u5f55\u4fe1\u606f\u3002BaseAddress+\u5907\u5fd8\u5f55\u4fe1\u606f\u3002RegionSize\uff1b}}\u3002\n\u5982\u679c\u60a8\u60f3\u770b\u5230\u8fd9\u65b9\u9762\u7684\u5de5\u4f5c\u793a\u4f8b\uff0c\u8bf7\u67e5\u770b\u672c\u6587\u968f\u9644\u7684GitHub\u8d44\u6e90\u5e93\u4e2d\u7684\u201cMemoryScanner\u201d\u9879\u76ee\u3002\u5728\u8bb0\u4e8b\u672c\u4e0a\u8bd5\u8bd5\u5427\uff01(\u5b83\u8fd8\u6ca1\u6709\u5728\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u4e0a\u8bd5\u7528\u8fc7\uff0c\u6240\u4ee5YMMV)\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u524d\u9762\u7684\u8bb0\u4e8b\u672c\u5c06\u5176\u5c4f\u5e55\u6587\u672c\u7f13\u51b2\u533a\u5b58\u50a8\u4e3aUTF-16\u6570\u636e\uff0c\u56e0\u6b64\u63d0\u4f9b\u7ed9FindBytePatternInMemory()\u7684\u5b57\u8282\u6a21\u5f0f\u4e5f\u5fc5\u987b\u662fUTF-16\u3002\u5bf9\u4e8e\u7b80\u5355\u5b57\u7b26\u4e32\uff0c\u8fd9\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u5b57\u7b26\u540e\u6dfb\u52a0\u4e00\u4e2a\u96f6\u5b57\u8282\u3002GitHub\u4e2d\u7684MemoryScanner\u9879\u76ee\u4e3a\u60a8\u5b8c\u6210\u6b64\u64cd\u4f5c\uff1a\n//\u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aUTF16(Hackly)const size_t patternLen=strlen(argv[2])\uff1bchar*pattern=new char[patternLen*2]\uff1bfor(int i=0\uff1bi&lt\uff1bpatternLen\uff1b++i){pattern[i*2]=argv[2][i]\uff1bpattern[i*2+1]=0x0\uff1b}\u3002\n\u4e00\u65e6\u6211\u5728\u8bb0\u4e8b\u672c\u4e2d\u83b7\u5f97\u4e86\u663e\u793a\u7684\u6587\u672c\u7f13\u51b2\u533a\u7684\u5730\u5740\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u4f7f\u7528WriteProcessMemory\u4fee\u6539\u5b83\u3002\u4e3a\u6b64\u7f16\u5199\u4ee3\u7801\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u4f46\u6211\u5f88\u5feb\u5c31\u4e86\u89e3\u5230\uff0c\u4ec5\u4ec5\u5199\u5165\u6587\u672c\u7f13\u51b2\u533a\u5e76\u4e0d\u8db3\u4ee5\u8ba9\u8bb0\u4e8b\u672c\u91cd\u65b0\u7ed8\u5236\u5b83\u7684Edit\u63a7\u4ef6\u3002\n\u5e78\u8fd0\u7684\u662f\uff0cWin32API\u652f\u6301\u8fd9\u4e00\u70b9\uff0c\u5e76\u63d0\u4f9b\u4e86InvalidateRect\u51fd\u6570\u6765\u5f3a\u5236\u63a7\u4ef6\u91cd\u7ed8\u81ea\u8eab\u3002\nvoid UpdateText(HINSTANCE\u8fdb\u7a0b\uff0cHWND editWindow\uff0cchar*notepadTextBuffer\uff0cchar*replacementTextBuffer\uff0cint len){size_t write=0\uff1bWriteProcessMemory(process\uff0cnotepadTextBuffer\uff0creplacementTextBuffer\uff0clen\uff0c&amp\uff1bWrited)\uff1brecr\uff1bGetClientRect(editWindow\uff0c&amp\uff1br)\uff1bInvalidateRect(editWindow\uff0c&amp\uff1br)\u3002\n\u5de5\u4f5c\u5185\u5b58\u626b\u63cf\u4eea\u548c\u529f\u80fd\u9f50\u5168\u7684\u8bb0\u4e8b\u672c\u6e32\u67d3\u5668\u4e4b\u95f4\u7684\u5dee\u8ddd\u5c0f\u5f97\u4ee4\u4eba\u60ca\u8bb6\u3002\u53ea\u6709\u4e09\u4e2a\u95ee\u9898\u9700\u8981\u89e3\u51b3\uff0c\u624d\u80fd\u4ece\u6211\u5230\u76ee\u524d\u4e3a\u6b62\u63cf\u8ff0\u7684\u5185\u5bb9\u8f6c\u79fb\u5230\u672c\u6587\u5f00\u59cb\u65f6\u53d6\u7b11\u7684\u5149\u7ebf\u8ddf\u8e2a\u5668\u3002\n\u7b2c\u4e00\u671f\u672c\u8eab\u5e76\u4e0d\u662f\u4ec0\u4e48\u5927\u95ee\u9898\u3002\u6dfb\u52a0\u5bf9MoveWindow\u7684\u8c03\u7528\u5e76\u4e0d\u91cd\u8981\uff0c\u4f46\u6211\u5c06\u5176\u5305\u62ec\u5728\u5217\u8868\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u662f\u6211\u5982\u4f55\u5904\u7406\u5217\u8868\u4e2d\u4e0b\u4e00\u4e2a\u95ee\u9898\u7684\u91cd\u8981\u90e8\u5206\u3002\n\u6211\u6700\u540e\u786c\u7f16\u7801\u4e86\u6211\u60f3\u8981\u7684\u8bb0\u4e8b\u672c\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u7136\u540e\u8ba1\u7b97\u4e86\u51c6\u786e\u586b\u6ee1\u90a3\u4e2a\u5927\u5c0f\u7684\u7a97\u53e3\u9700\u8981\u591a\u5c11\u4e2a\u5b57\u7b26(\u7b49\u5bbd\u5b57\u4f53)\u3002\u7136\u540e\uff0c\u5728\u8c03\u7528MoveWindow\u4e4b\u540e\uff0c\u6211\u901a\u8fc7\u5411\u8bb0\u4e8b\u672c\u53d1\u9001\u90a3\u4e48\u591aWM_CHAR\u6d88\u606f\u6765\u9884\u5148\u5206\u914d\u5c4f\u5e55\u4e0a\u7684\u6587\u672c\u7f13\u51b2\u533a\u3002\u8fd9\u611f\u89c9\u50cf\u662f\u4f5c\u5f0a\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u597d\u7684\u4f5c\u5f0a\u3002\n\u4e3a\u4e86\u786e\u4fdd\u6211\u59cb\u7ec8\u6709\u552f\u4e00\u7684\u5b57\u8282\u6a21\u5f0f\u53ef\u4f9b\u641c\u7d22\uff0c\u6211\u53ea\u662f\u968f\u673a\u5316\u4e86\u6211\u5728WM_CHAR\u6d88\u606f\u4e2d\u53d1\u9001\u7684\u5b57\u7b26\u3002\n\u6211\u5df2\u7ecf\u5728\u4ee3\u7801\u4e2d\u5305\u542b\u4e86\u8fd9\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50\u3002GitHub\u5b58\u50a8\u5e93\u4e2d\u7684\u5b9e\u9645\u4ee3\u7801\u7684\u683c\u5f0f\u7565\u6709\u4e0d\u540c\uff0c\u4f46\u5de5\u4f5c\u65b9\u5f0f\u76f8\u540c\u3002\nvoid PreallocateTextBuffer(DWORD ProcessId){HWND editWindow=GetWindowForProcessAndClassName(processId\uff0c&#34\uff1bEdit&#34\uff1b)\uff1b//Consolas(\u5927\u5c0f\u4e3a11)\u4e2a\u5b57\u7b26MoveWindow(\u5b9e\u4f8b)\u586b\u5145\u4e00\u4e2a1365x768\u7a97\u53e3\u9700\u8981131*30\u4e2a\u5b57\u7b26\u3002topWindow\uff0c100,100,1365,768\uff0ctrue)\uff1bsize_t charCount=131*30\uff1bsize_t utf16BufferSize=charCount*2\uff1bchar*frame Buffer=(char*)malloc(Utf16BufferSize)\uff1bfor(int i=0\uff1bi&lt\uff1bcharCount\uff1bi++){char v=0x41+(rand()%26)\uff1bPostMessage(editWindow\uff0cWM_ChaerSize)\u3002frame Buffer[i*2+1]=0x00\uff1b}\u7761\u7720(5000)\uff1b//\u7b49\u5f85\u8f93\u5165\u6d88\u606f\u5b8c\u6210\u5904\u7406.\u901f\u5ea6\u5f88\u6162\u3002//\u73b0\u5728\u4f7f\u7528frame Buffer\u4f5c\u4e3a\u8981\u641c\u7d22\u7684\u552f\u4e00\u5b57\u8282\u6a21\u5f0f}\n\u8fd9\u5bf9\u6700\u7ec8\u4ea7\u54c1\u6765\u8bf4\u610f\u5473\u7740\uff0c\u5728\u6211\u53ef\u4ee5\u83b7\u53d6\u6587\u672c\u7f13\u51b2\u533a\u6307\u9488\u5e76\u6e05\u9664\u5c4f\u5e55\u4e4b\u524d\uff0c\u6211\u5fc5\u987b\u7acb\u5373\u770b\u5230\u6211\u7684\u8bb0\u4e8b\u672c\u7a97\u53e3\u6162\u6162\u5730\u5145\u6ee1\u4e86\u968f\u673a\u5b57\u7b26\u3002\n\u6240\u6709\u8fd9\u4e9b\u90fd\u4f9d\u8d56\u4e8e\u4f7f\u7528\u5df2\u77e5\u7684\u5b57\u4f53\u548c\u5b57\u4f53\u5927\u5c0f\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u6211\u672c\u6765\u6253\u7b97\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\u6765\u5f3a\u5236\u8bb0\u4e8b\u672c\u4f7f\u7528\u6211\u60f3\u8981\u7684\u5b57\u4f53(Consolas\uff0c11pt)\uff0c\u4f46\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u53d1\u9001WM_SETFONT\u6d88\u606f\u4e0d\u65ad\u6270\u4e71\u5b57\u4f53\u7684\u663e\u793a\u65b9\u5f0f\uff0c\u6211\u4e0d\u60f3\u627e\u51fa\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\u3002Consolas 11pt\u662f\u6211\u7cfb\u7edf\u4e0a\u7684\u9ed8\u8ba4\u8bb0\u4e8b\u672c\u5b57\u4f53\uff0c\u5bf9\u6211\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u597d\u4e86\u3002\n\u89e3\u91ca\u5982\u4f55\u6784\u5efa\u5149\u7ebf\u8ddf\u8e2a\u5668\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6211\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u8981\u8ba8\u8bba\u7684\u8303\u56f4\u3002\u5982\u679c\u60a8\u4e00\u822c\u4e0d\u719f\u6089\u5149\u7ebf\u8ddf\u8e2a\uff0c\u8bf7\u8f6c\u5230ScratchAPixel\uff0c\u5b66\u4e60\u4e00\u4e9b\u5149\u7ebf\u8ddf\u8e2a\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002\u6211\u60f3\u4ee5\u5feb\u901f\u8ba8\u8bba\u4e00\u4e0b\u5c06\u5149\u7ebf\u8ddf\u8e2a\u5668\u8fde\u63a5\u5230\u6211\u521a\u624d\u6240\u8bf4\u7684\u6240\u6709\u4e1c\u897f\u7684\u5177\u4f53\u7ec6\u8282\u6765\u7ed3\u675f\u8fd9\u7bc7\u6587\u7ae0\u3002\n\u4ece\u5e27\u7f13\u51b2\u533a\u5f00\u59cb\u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\u3002\u4e3a\u4e86\u6700\u5c0f\u5316WriteProcessMemory\u8c03\u7528\u7684\u6570\u91cf(\u51fa\u4e8e\u7406\u667a\u548c\u6027\u80fd\u7684\u8003\u8651)\uff0c\u6211\u5206\u914d\u4e86\u4e00\u4e2a\u4e0e\u8bb0\u4e8b\u672c\u7684\u6587\u672c\u7f13\u51b2\u533a\u5927\u5c0f\u76f8\u540c\u7684\u5149\u7ebf\u8ddf\u8e2a\u5668\u672c\u5730\u7f13\u51b2\u533a(\u5b57\u7b26\u6570*2(\u56e0\u4e3aUTF16))\u3002\u6240\u6709\u5448\u73b0\u8ba1\u7b97\u90fd\u5c06\u5199\u5165\u6b64\u672c\u5730\u7f13\u51b2\u533a\uff0c\u76f4\u5230\u5e27\u7ed3\u675f\uff0c\u6b64\u65f6\u6211\u4f7f\u7528\u5355\u4e2aWriteProcessMemory\u8c03\u7528\u4e00\u6b21\u66ff\u6362\u8bb0\u4e8b\u672c\u7f13\u51b2\u533a\u7684\u5168\u90e8\u5185\u5bb9\u3002\u8fd9\u5c31\u4ea7\u751f\u4e86\u4e00\u7ec4\u975e\u5e38\u7b80\u5355\u7684\u7ed8\u56fe\u51fd\u6570\uff1a\nvoid drawChar(int x\uff0cint y\uff0cchar c)\uff1b//\u672c\u5730\u7f13\u51b2\u533avoid clearScreen()\uff1b//\u672c\u5730\u7f13\u51b2\u533avoid swapBuffersAndRedraw()\uff1b//\u63a8\u9001\u66f4\u6539\u5e76\u5237\u65b0\u5c4f\u5e55\u3002\n\u5728\u5149\u7ebf\u8ddf\u8e2a\u65b9\u9762\uff0c\u8003\u8651\u5230\u6e32\u67d3\u76ee\u6807\u7684\u4f4e\u5206\u8fa8\u7387(131x30)\uff0c\u6211\u5fc5\u987b\u4fdd\u6301\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u201c\u50cf\u7d20\u201d\u6765\u5f88\u597d\u5730\u663e\u793a\u7cbe\u7ec6\u7ec6\u8282\u3002\u6211\u6700\u7ec8\u53ea\u8ddf\u8e2a\u4e86\u4e00\u6761\u4e3b\u5149\u7ebf\uff0c\u6bcf\u4e2a\u6e32\u67d3\u5230\u7684\u50cf\u7d20\u90fd\u6709\u4e00\u6761\u9634\u5f71\u5149\u7ebf\uff0c\u6211\u60f3\u8fc7\u8981\u53bb\u6389\u9634\u5f71\uff0c\u76f4\u5230\u6211\u5728Paul Bourke\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u7070\u5ea6\u6d6e\u70b9\u5230ascii\u8272\u5e26\u3002\u62e5\u6709\u5982\u6b64\u4f4e\u590d\u6742\u5ea6\u7684\u573a\u666f\u548c\u5f88\u5c0f\u7684\u6e32\u67d3\u8868\u9762\u4e5f\u610f\u5473\u7740\u6211\u6839\u672c\u4e0d\u9700\u8981\u5e76\u884c\u5316\u6e32\u67d3\u3002\n\u6211\u4e5f\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u8ba9\u4e8b\u60c5\u770b\u8d77\u6765\u6b63\u786e\uff0c\u56e0\u4e3a\u5b57\u7b26\u6bd4\u4ed6\u4eec\u7684\u5bbd\u5ea6\u9ad8\u3002\u6700\u540e\uff0c\u6211\u901a\u8fc7\u5c06\u5bbd\u9ad8\u6bd4\u8ba1\u7b97\u4e2d\u4f7f\u7528\u7684\u5bbd\u5ea6\u503c\u51cf\u534a\u6765\u201c\u4fee\u590d\u201d\u8fd9\u4e2a\u95ee\u9898\u3002\n\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u6b64\u9891\u7e41\u5730\u66f4\u65b0\u8bb0\u4e8b\u672c\u7684\u7f16\u8f91\u63a7\u4ef6\u7684\u5185\u5bb9\u4f1a\u5bfc\u81f4\u975e\u5e38\u660e\u663e\u7684\u95ea\u70c1\u3002\u6211\u5c1d\u8bd5\u4e86\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u6d88\u9664\u8fd9\u4e2a\u95ee\u9898\uff0c\u5305\u62ec\u5c1d\u8bd5\u901a\u8fc7\u5206\u914d\u4e24\u500d\u7684\u5b57\u7b26\u6570\u6765\u52a0\u500d\u7f13\u51b2\u7f16\u8f91\u63a7\u4ef6\uff0c\u4ee5\u53ca\u4f7f\u7528WM_VSCROLL\u6d88\u606f\u901a\u8fc7\u8c03\u6574\u6eda\u52a8\u6761\u4f4d\u7f6e\u6765\u201c\u4ea4\u6362\u201d\u7f13\u51b2\u533a\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u7684\u5c1d\u8bd5\u90fd\u6ca1\u6709\u594f\u6548\uff0c\u95ea\u5149\u4f9d\u7136\u5b58\u5728\u3002\n\u6211\u7528\u8bb0\u4e8b\u672c\u5236\u4f5c\u5b9e\u65f6\u6e38\u620f\u7684\u4e0b\u4e00\u4e2a(\u4e5f\u662f\u6700\u540e\u4e00\u4e2a)\u90e8\u5206\u662f\u5f04\u6e05\u695a\u5982\u4f55\u5904\u7406\u7528\u6237\u8f93\u5165\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u8d70\u5230\u8fd9\u4e00\u6b65\uff0c\u5e76\u6e34\u671b\u5f97\u5230\u66f4\u591a\uff0c\u4e0b\u4e00\u7bc7\u5e16\u5b50\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff01\n\u672c\u7f51\u7ad9\u4e0a\u7684\u5e16\u5b50\u662f\u6211\u81ea\u5df1\u7684\uff0c\u4e0d\u4e00\u5b9a\u4ee3\u8868\u6211\u96c7\u4e3b\u7684\u7acb\u573a\u3001\u6218\u7565\u6216\u89c2\u70b9\u3002", "note_en": "A few months back, there was a post on Reddit ( link), which described a game that used an open source clone of Notepad to handle all its input and rendering. While reading about it, I had the thought that it would be really cool to see something similar that worked with stock Windows Notepad. Then I spent way too much of my free time doing exactly that.\n I ended up making a Snake game and a small ray tracer that use stock Notepad for all input and rendering tasks, and got to learn about DLL Injection, API Hooking and Memory Scanning along the way. It seemed like writing up the stuff I learned might make for an interesting read, and give me a chance to show off the dumb stuff I built at the same time, so that\u2019s what these next couple blog posts will be about.\n Due to length, I\u2019ve split the writeup into two blog posts. This first post will talk about how Memory Scanners work, and how I used one to turn notepad.exe into a 30+ fps capable render target. I\u2019ll also talk about the ray tracer that I built that rendered into Notepad.\n The  second post will talk about using windows hooks to capture input and share the Snake game I built that uses pretty much all the stuff described in both of these posts.\n  If you just want to see the code, the whole project (including both the ray tracer and snake game) is up  on github.\n  The obvious place to kick all of this off is it to talk about sending key events to a running instance of Notepad. This was the boring part of the project so I\u2019ll be brief.\n If you\u2019ve never built an app out of Win32 controls (like I hadn\u2019t), you might be surprised to learn that every UI element, from a menu bar to a button is technically it\u2019s own \u201cwindow,\u201d and sending key input to a program involves sending that input to the UI element you want to receive it. Luckily Visual Studio comes with a tool called  Spy++ that can list all the windows that make up a given application.\n  Spy++ revealed that the Notepad child window I was after was the \u201cEdit\u201d window. Once I knew that, it was just a matter of figuring out the right mix of Win32 function calls to get an HWND for that UI element, and then sending key inputs there. Getting that HWND looked something like this:\n HWND  GetWindowForProcessAndClassName ( DWORD  pid ,  const  char *  className ) {  HWND  curWnd  =  GetTopWindow ( 0 );  //0 arg means to get the window at the top of the Z order  char  classNameBuf [ 256 ];  while  ( curWnd  !=  NULL ){  DWORD  curPid ;  DWORD  dwThreadId  =  GetWindowThreadProcessId ( curWnd ,  &amp; curPid );  if  ( curPid  ==  pid ){  GetClassName ( curWnd ,  classNameBuf ,  256 );  if  ( strcmp ( className ,  classNameBuf )  ==  0 )  return  curWnd ;  HWND  childWindow  =  FindWindowEx ( curWnd ,  NULL ,  className ,  NULL );  if  ( childWindow  !=  NULL )  return  childWindow ;  }  curWnd  =  GetNextWindow ( curWnd ,  GW_HWNDNEXT );  }  return  NULL ; }\n Once I had the HWND for the right control, drawing a character in Notepad\u2019s edit control was just a matter of using  PostMessage to send a WM_CHAR event to it.\n Note that if you want to use Spy++ yourself, you probably want to use the 64 bit version of it, which is inexplicably  not the verion that Visual Studio 2019 launches by default. Instead you\u2019ll need to search your Visual Studio Program files for \u201cspyxx_amd64.exe.\u201d\n It took about 10 seconds after getting this working to realize that even if I could find a non-janky way to use window messages to draw full game screens into Notepad, it would be way too slow to even come close to approaching a 30hz refresh cycle. It was also really boring, so I didn\u2019t spend too long looking for ways to make it go any faster.\n  While getting the fake key input set up, I was reminded of  CheatEngine. It\u2019s a program that let\u2019s users find and modify memory in processes running on their machines. Most of the time it\u2019s used by people trying to cheat at games or do other stuff that makes game devs sad, but it turns out if can also be a force for good.\n Memory Scanners like CheatEngine work by finding all the memory addresses in a target process which contain a specific value. Let\u2019s say you\u2019re playing a game and you want to give yourself more health, you could follow a process that look like this:\n Use a memory scanner to find all addresses in the game\u2019s memory that store the value of your health (let\u2019s say 100).\n    Search all the addresses you found previously (that stored 100) to find ones that now store 92.\n  Repeat this process until you have a single memory address (which most likely is where your health is stored)\n  This is pretty much what I did, except instead of a health value, I searched for memory that stored the string of text currently displayed in Notepad. After some trial and error, I was able to use CheatEngine to find (and change) the text being displayed. I also learned three important bits of info about Notepad:\n Notepad\u2019s edit window stores on screen text in UTF-16, even if the bottom right part of the window says your file is UTF-8\n  If I kept deleting and retyping the same string, CheatEngine would start finding multiple copies of this data in memory (possibly the undo buffer?)\n  I couldn\u2019t replace the displayed text with a longer string, meaning that Notepad wasn\u2019t preallocating a text buffer up front\n  Despite not being able to modify the length of the text buffer, this seemed promising enough that I decided to write my own small memory scanner to embed in my project.\n I couldn\u2019t find a lot of information about building memory scanners, but I did find a great  blog post by Chris Wellons that talks about (and links to) a memory scanner that he wrote for his own cheat tool. Using that blog post and the bit of experience I had with CheatEngine, I was able to piece together that the basic algorithm for a memory scanner looks something like this:\n FOR EACH block of memory allocated by our target process IF that block is committed and read/write enabled Scan the contents of that block for our byte pattern IF WE FIND IT return that address\n My whole memory scanner implementation only ended up being ~40 lines of code, so I\u2019m just going to walk through all of it.\n  The first thing a memory scanner needs to be able to do is iterate over a process\u2019 allocated memory.\n Since the range of virtual memory for every 64 bit process on windows is the same (0x00000000000 through 0x7FFFFFFFFFFF), I started by making a pointer to address 0 and used  VirtualQueryEx to get information about that virtual address for my target program.\n VirtualQueryEx groups continguous pages that have identical memory attributes into MEMORY_BASIC_INFORMATION structs, so it\u2019s likely that the struct returned by VirtualQueryEx for a given address contains information about more than 1 page. The returned MEMORY_BASIC_INFORMATION stores this shared set of memory attributes, along with the address of the start of its span of pages, and size of the whole span.\n Once I had the first MEMORY_BASIC_INFORMATION struct, iterating through memory was just a matter of adding the current struct\u2019s BaseAddress and RegionSize members together, and feeding the new address to VirtualQueryEx to get the next set of contiguous pages.\n char *  FindBytePatternInProcessMemory ( HANDLE  process ,  const  char *  pattern ,  size_t  patternLen ) {  char *  basePtr  =  ( char * ) 0x0 ;  MEMORY_BASIC_INFORMATION  memInfo ;  while  ( VirtualQueryEx ( process ,  ( void * ) basePtr ,  &amp; memInfo ,  sizeof ( MEMORY_BASIC_INFORMATION )))  {  const  DWORD  mem_commit  =  0x1000 ;  const  DWORD  page_readwrite  =  0x04 ;  if  ( memInfo . State  ==  mem_commit  &amp;&amp;  memInfo . Protect  ==  page_readwrite )  {  // search this memory for our pattern  }  basePtr  =  ( char * ) memInfo . BaseAddress  +  memInfo . RegionSize ;  } }\n The above code above skips ahead a bit and also determines if a set of pages has been committed and is read/write enabled, by examining the .State and .Protect struct members. You can find all the possible values for these vars in the documentation for  MEMORY_BASIC_INFORMATION, but the values that my scanner cared about were a state of 0x1000 (MEM_COMMIT) and a protection level of 0x04 (PAGE_READWRITE).\n  It\u2019s not possible to read data in a different process\u2019 address space directly (or at least, I didn\u2019t stumble on how to do it). Instead, I first needed to copy the contents of a page range to the memory scanner\u2019s address space. I did this with  ReadProcessMemory.\n Once the memory was copied to a locally visible buffer, searching it for a byte pattern was easy enough. To make things simpler, I ignored the possibility that there could be multiple copies of the target byte pattern in memory in my first scanner implementation. I ended up coming up with a hacky workaronud for this problem later on that saved me from ever having to actually address it in my scanner logic.\n char *  FindPattern ( char *  src ,  size_t  srcLen ,  const  char *  pattern ,  size_t  patternLen ) {  char *  cur  =  src ;  size_t  curPos  =  0 ;  while  ( curPos  &lt;  srcLen ){  if  ( memcmp ( cur ,  pattern ,  patternLen )  ==  0 ){  return  cur ;  }  curPos ++ ;  cur  =  &amp; src [ curPos ];  }  return  nullptr ; }\n If FindPattern() returned a match pointer, it\u2019s address needed to be converted to the address of the same bit of memory in the target process\u2019 address space. To do that, I subtracted the starting address of the local buffer from the address that was returned from FindPattern to get an offset, and then added that to the base address of the memory chunk in the target process. You can see this below.\n char *  FindBytePatternInProcessMemory ( HANDLE  process ,  const  char *  pattern ,  size_t  patternLen ) {  MEMORY_BASIC_INFORMATION  memInfo ;  char *  basePtr  =  ( char * ) 0x0 ;  while  ( VirtualQueryEx ( process ,  ( void * ) basePtr ,  &amp; memInfo ,  sizeof ( MEMORY_BASIC_INFORMATION ))){  const  DWORD  mem_commit  =  0x1000 ;  const  DWORD  page_readwrite  =  0x04 ;  if  ( memInfo . State  ==  mem_commit  &amp;&amp;  memInfo . Protect  ==  page_readwrite ){  char *  remoteMemRegionPtr  =  ( char * ) memInfo . BaseAddress ;  char *  localCopyContents  =  ( char * ) malloc ( memInfo . RegionSize );  SIZE_T  bytesRead  =  0 ;  if  ( ReadProcessMemory ( process ,  memInfo . BaseAddress ,  localCopyContents ,  memInfo . RegionSize ,  &amp; bytesRead )){  char *  match  =  FindPattern ( localCopyContents ,  memInfo . RegionSize ,  pattern ,  patternLen );  if  ( match ){  uint64_t  diff  =  ( uint64_t ) match  -  ( uint64_t )( localCopyContents );  char *  processPtr  =  remoteMemRegionPtr  +  diff ;  return  processPtr ;  }  }  free ( localCopyContents );  }  basePtr  =  ( char * ) memInfo . BaseAddress  +  memInfo . RegionSize ;  } }\n If you want to see a working example of this, check out the \u201cMemoryScanner\u201d project in  the github repo that accompanies this blog post. Try it on Notepad! (it hasn\u2019t been tried on anything else, so ymmv).\n  Remember from earlier that Notepad stores its on screen text buffer as UTF-16 data, so the byte pattern that gets fed to FindBytePatternInMemory() also has to be UTF-16. For simple strings, this just involves adding a zero byte after every character. The MemoryScanner project in github does this for you:\n //convert input string to UTF16 (hackily) const  size_t  patternLen  =  strlen ( argv [ 2 ]); char *  pattern  =  new  char [ patternLen * 2 ]; for  ( int  i  =  0 ;  i  &lt;  patternLen ;  ++ i ){  pattern [ i * 2 ]  =  argv [ 2 ][ i ];  pattern [ i * 2  +  1 ]  =  0x0 ; }\n  Once I had the address of the displayed text buffer in Notepad, the next step was to use  WriteProcessMemory to modify it. Writing code for that was trivial, but I quickly learned that just writing to the text buffer wasn\u2019t enough to make Notepad redraw it\u2019s Edit control.\n Luckily the Win32 api had my back on this, and provides the  InvalidateRect function to force a control to redraw itself.\n  void  UpdateText ( HINSTANCE  process ,  HWND  editWindow ,  char *  notepadTextBuffer ,  char *  replacementTextBuffer ,  int  len ) {  size_t  written  =  0 ;  WriteProcessMemory ( process ,  notepadTextBuffer ,  replacementTextBuffer ,  len ,  &amp; written );  RECT  r ;  GetClientRect ( editWindow ,  &amp; r );  InvalidateRect ( editWindow ,  &amp; r ,  false ); }\n  The gap between a working memory scanner and a full fledged notepad renderer is surprisingly small. There were only three issues that needed to be sorted out to go from what I\u2019ve described so far to the ray tracer teased at the beginning of this post.\n   The first issue wasn\u2019t much of a problem on it\u2019s own. It was trivial to add a call to  MoveWindow, but I included it in the list because this was an important part of how I approached the next issue on the list.\n I ended up hard coding the size I wanted my Notepad window to be, and then counted how many characters (of a monospace font) it would take to exactly fill a window of that size. Then after calling MoveWindow, I pre-allocated the on screen text buffer by sending that many WM_CHAR messages to Notepad. This felt like cheating, but the good kind of cheating.\n To make sure that I always had a unique byte pattern to search for, I just randomized which chars I sent in the WM_CHAR messages.\n I\u2019ve included what this might look like in code. The actual code in the github repo is formatted a little bit differently, but works the same way.\n void  PreallocateTextBuffer ( DWORD  processId ) {  HWND  editWindow  =  GetWindowForProcessAndClassName ( processId ,  &#34;Edit&#34; );  // it takes 131 * 30 chars to fill a 1365x768 window with Consolas (size 11) chars  MoveWindow ( instance . topWindow ,  100 ,  100 ,  1365 ,  768 ,  true );  size_t  charCount  =  131  *  30 ;  size_t  utf16BufferSize  =  charCount  *  2 ;  char *  frameBuffer  =  ( char * ) malloc ( utf16BufferSize );  for  ( int  i  =  0 ;  i  &lt;  charCount ;  i ++ ){  char  v  =  0x41  +  ( rand ()  %  26 );  PostMessage ( editWindow ,  WM_CHAR ,  v ,  0 );  frameBuffer [ i  *  2 ]  =  v ;  frameBuffer [ i  *  2  +  1 ]  =  0x00 ;  }  Sleep ( 5000 );  //wait for input messages to finish processing...it&#39;s slow.   //Now use the frameBuffer as the unique byte pattern to search for }\n What this meant for the end product is that immediately after starting, I had to watch my Notepad window slowly fill up with random characters, before I could acquire the text buffer pointer and clear the screen.\n  All of the above relies on using a known font face and font size in order to work right. I was going to add some code to force notepad to use the fonts I wanted (Consolas, 11pt), but for some reason sending WM_SETFONT messages kept messing up how fonts were displaying, and I didn\u2019t feel like figuring out what was going wrong there. Consolas 11pt was the default Notepad font on my system, which was good enough for me.\n  Explaining how to build a ray tracer is well beyond the scope of what I want to talk about in this post. If you\u2019re unfamiliar with ray tracing in general, head over to  ScratchAPixel and learn you some ray tracing for great good. What I want to finish off this post with is a quick discussion of the nuts and bolts of hooking a ray tracer up to all the stuff I just talked about.\n It probably makes sense to start off with the frame buffers. In order to minimze the amount of WriteProcessMemory calls (both for sanity and performance), I allocated a ray-tracer-local buffer that was the same size as Notepad\u2019s text buffer (number of characters * 2 (because UTF16)). All the rendering calculations would write to this local buffer until the end of the frame, when I used a single WriteProcessMemory call to replace the entire contents of Notepad\u2019s buffer at once. This led to a really simple set of functions for drawing:\n void  drawChar ( int  x ,  int  y ,  char  c );  //local buffer void  clearScreen ();  // local buffer void  swapBuffersAndRedraw ();  // pushes changes and refreshes screen.\n On the ray tracing side, given the low resolution of my render target (131 x 30), I had to keep things very simple, since there just wasn\u2019t enough \u201cpixels\u201d to display fine detail nicely. I ended up only tracing a single primary ray, and a shadow ray for each pixel being rendered to, and I thought about ditching the shadows until I found a nice grayscale float to ascii color ramp  on Paul Bourke\u2019s website. Having such a low complexity scene and small render surface also meant that I didn\u2019t end up needing to parallelize the rendering at all.\n I also ran into some issues getting things to look right due to characters being taller than they are wide. In the end, I \u201cfixed\u201d this by halving the width value I used in my aspect ratio calculations.\n  The one remaining problem that I haven\u2019t found a workable solution for is that updating the contents of the Notepad\u2019s edit control so frequently causes a very noticeable flicker. I tried a bunch of different things to get rid of this, including trying to double buffer the edit control by allocating twice the number of characters and using WM_VSCROLL messages to \u201cswap\u201d the buffer by adjusting the scroll bar position. Unfortunately nothing I tried worked, and the flicker remains.\n  The next (and final) part of my quest to make a real-time game in Notepad was to figure out how to handle user input. If you\u2019ve gotten this far and are thirsty for more, the next post is  available here!\n   The postings on this site are my own and don&#39;t necessarily represent my employer\u2019s positions, strategies or opinions.", "posttime": "2020-05-20 22:14:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5149\u7ebf,tracing,\u8bb0\u4e8b\u672c", "title": "Notepad.exe\u4e2d30 FPS\u7684\u5149\u7ebf\u8ddf\u8e2a", "title_en": "Ray Tracing in Notepad.exe at 30 FPS", "transed": 1, "url": "http://kylehalladay.com/blog/2020/05/20/Rendering-With-Notepad.html", "via": "", "real_tags": ["\u5149\u7ebf", "tracing", "\u8bb0\u4e8b\u672c"]}, {"category": "", "categoryclass": "", "imagename": "830fe98cc2ac73199ad4839f70161fc8.jpeg", "infoid": 1002954, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e09\u516c\u5e03\u7684\u8054\u90a6\u6570\u636e\u663e\u793a\uff0c\u53bb\u5e74\u7f8e\u56fd\u5973\u6027\u7684\u751f\u80b2\u7387\u521b\u5386\u53f2\u65b0\u4f4e\uff0c\u4f7f\u7f8e\u56fd\u7684\u51fa\u751f\u7387\u964d\u81f335\u5e74\u6765\u7684\u6700\u4f4e\u6c34\u5e73\u3002\n\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3(Centers For Disease Control And Prevention)\u56fd\u5bb6\u5065\u5eb7\u7edf\u8ba1\u4e2d\u5fc3(National Center For Health Statistics)\u7684\u4e34\u65f6\u6570\u636e\u663e\u793a\uff0c2019\u5e74\u7f8e\u56fd\u7ea6\u6709375\u4e07\u5a74\u513f\u51fa\u751f\uff0c\u540c\u6bd4\u4e0b\u964d1%\u3002\u603b\u751f\u80b2\u7387\u4e0b\u964d\u4e862%\uff0c\u81f3\u6bcf1000\u540d15\u5c81\u81f344\u5c81\u5973\u6027\u751f\u80b258.2\u4e2a\u5b69\u5b50\uff0c\u8fd9\u662f\u81ea1909\u5e74\u653f\u5e9c\u5f00\u59cb\u8ddf\u8e2a\u8fd9\u4e00\u6570\u5b57\u4ee5\u6765\u7684\u6700\u4f4e\u6c34\u5e73\u3002\n..\u3002", "note_en": "American women had babies at record-low rates last year and pushed U.S. births down to their smallest total in 35 years, according to federal figures released Wednesday.\n  About 3.75 million babies were born in the U.S. in 2019, down 1% from the prior year, provisional figures from the Centers for Disease Control and Prevention\u2019s National Center for Health Statistics showed. The general fertility rate fell 2% to 58.2 births per 1,000 women aged 15 to 44, its lowest level since the government began tracking the figure in 1909.\n...", "posttime": "2020-05-20 22:14:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51fa\u751f\u7387,fall,\u7f8e\u56fd", "title": "\u7f8e\u56fd\u51fa\u751f\u7387\u964d\u81f3\u521b\u7eaa\u5f55\u4f4e\u70b9", "title_en": "U.S. Birthrates Fall to Record Low", "transed": 1, "url": "https://www.wsj.com/articles/u-s-birthrates-fall-to-record-low-11589947260", "via": "", "real_tags": ["\u51fa\u751f\u7387", "fall", "\u7f8e\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002953, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u8f6f\u4ef6\u4f9b\u5e94\u94fe\u653b\u51fb\u7684\u7279\u5f81\u662f\u5c06\u6076\u610f\u4ee3\u7801\u6ce8\u5165\u5230\u8f6f\u4ef6\u5305\u4e2d\uff0c\u4ee5\u8fdb\u4e00\u6b65\u5371\u5bb3\u94fe\u4e2d\u4f9d\u8d56\u7684\u7cfb\u7edf\u3002\u8fd1\u5e74\u6765\uff0c\u5728\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u4f9d\u8d56\u5173\u7cfb\u7ba1\u7406\u5668\u81ea\u52a8\u89e3\u6790\u3001\u4e0b\u8f7d\u548c\u5b89\u88c5\u4e86\u6570\u767e\u4e2a\u5f00\u6e90\u8f6f\u4ef6\u5305\uff0c\u5bfc\u81f4\u4e86\u5927\u91cf\u7684\u4f9b\u5e94\u94fe\u653b\u51fb\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5728\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8d8a\u6765\u8d8a\u591a\u7684\u5f00\u6e90\u8f6f\u4ef6\uff0c\u672c\u6587\u7ed9\u51fa\u4e86\u4e00\u4e2a174\u4e2a\u6076\u610f\u8f6f\u4ef6\u5305\u7684\u6570\u636e\u96c6\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u88ab\u7528\u4e8e\u5bf9\u5f00\u6e90\u8f6f\u4ef6\u4f9b\u5e94\u94fe\u7684\u771f\u5b9e\u653b\u51fb\uff0c\u5e76\u901a\u8fc7\u6d41\u884c\u7684\u8f6f\u4ef6\u5305\u5e93NPM\u3001PyPI\u548cRubyGems\u8fdb\u884c\u5206\u53d1\u3002\u8fd9\u7bc7\u6587\u7ae0\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5305\u542b174\u4e2a\u6076\u610f\u8f6f\u4ef6\u5305\u7684\u6570\u636e\u96c6\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u901a\u8fc7\u6d41\u884c\u7684\u8f6f\u4ef6\u5305\u5e93NPM\u3001PyPI\u548cRubyGems\u8fdb\u884c\u5206\u53d1\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u5728\u6574\u4e2a\u8f6f\u4ef6\u751f\u547d\u5468\u671f\u4e2d\u81ea\u52a8\u89e3\u6790\u3001\u4e0b\u8f7d\u548c\u5b89\u88c5\u6570\u767e\u4e2a\u5f00\u6e90\u8f6f\u4ef6\u5305\u3002\u8fd9\u4e9b\u888b\u5b50\u7684\u65e5\u671f\u4ece2015\u5e7411\u6708\u52302019\u5e7411\u6708\uff0c\u90fd\u662f\u4eba\u5de5\u6536\u96c6\u548c\u5206\u6790\u7684\u3002\u6587\u4e2d\u8fd8\u7ed9\u51fa\u4e86\u4e24\u79cd\u901a\u7528\u653b\u51fb\u6811\uff0c\u63d0\u4f9b\u4e86\u5411\u4e0b\u6e38\u7528\u6237\u4f9d\u8d56\u6811\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4ee5\u53ca\u5728\u4e0d\u540c\u65f6\u95f4\u548c\u4e0d\u540c\u6761\u4ef6\u4e0b\u6267\u884c\u6076\u610f\u4ee3\u7801\u7684\u6280\u672f\u7684\u7ed3\u6784\u5316\u6982\u8ff0\u3002\u8fd9\u9879\u5de5\u4f5c\u65e8\u5728\u4fc3\u8fdb\u5f00\u653e\u6e90\u7801\u548c\u7814\u7a76\u754c\u672a\u6765\u9884\u9632\u548c\u68c0\u6d4b\u4fdd\u969c\u63aa\u65bd\u7684\u53d1\u5c55\u3002", "note_en": "Download PDF  Abstract: A software supply chain attack is characterized by the injection of maliciouscode into a software package in order to compromise dependent systems furtherdown the chain. Recent years saw a number of supply chain attacks that leveragethe increasing use of open source during software development, which isfacilitated by dependency managers that automatically resolve, download andinstall hundreds of open source packages throughout the software life cycle.This paper presents a dataset of 174 malicious software packages that were usedin real-world attacks on open source software supply chains, and which weredistributed via the popular package repositories npm, PyPI, and RubyGems. Thosepackages, dating from November 2015 to November 2019, were manually collectedand analyzed. The paper also presents two general attack trees to provide astructured overview about techniques to inject malicious code into thedependency tree of downstream users, and to execute such code at differenttimes and under different conditions. This work is meant to facilitate thefuture development of preventive and detective safeguards by open source andresearch communities.", "posttime": "2020-05-20 22:13:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u5200\u5b50,knife,\u8f6f\u4ef6\u5305", "title": "\u6697\u7bad\u4f24\u4eba\u7684\u5200\u5b50\u6536\u85cf\uff1a\u5f00\u6e90\u4f9b\u5e94\u94fe\u653b\u51fb\u8ff0\u8bc4", "title_en": "Backstabber's Knife Collection: A Review of Open Source Supply Chain Attacks", "transed": 1, "url": "https://arxiv.org/abs/2005.09535", "via": "", "real_tags": ["\u5f00\u6e90", "\u5200\u5b50", "knife", "\u8f6f\u4ef6\u5305"]}, {"category": "", "categoryclass": "", "imagename": "b7463eef16e73957f21fb3bc33eafbc1.png", "infoid": 1002952, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u4e00\u4e24\u5e74\u91cc\uff0c\u6211\u6ce8\u610f\u5230\u5728\u54c1\u724c\u548c\u4ea7\u54c1\u8bbe\u8ba1\u4e2d\u51fa\u73b0\u4e86\u67d0\u79cd\u98ce\u683c\u3002\n\u770b\u770b\u4e0b\u9762\u7684\u56fe\u8868\uff0c\u4f60\u5c31\u4f1a\u770b\u5230\u5b83\u3002\u989c\u8272\u67d4\u548c\u67d4\u548c\uff0c\u5f62\u72b6\u5706\u6da6\uff0c\u5b57\u4f53\u4e0d\u663e\u773c\u3002\u4f60\u53ef\u4ee5\u7528\u201c\u5e72\u51c0\u201d\u6765\u5f62\u5bb9\u5b83\u3002\u5f88\u5e73\u6613\u8fd1\u4eba\u3002\u8fd9\u4e0d\u662f\u65e0\u4f24\u5927\u96c5\u7684\u3002\u5feb\u5230\u2026\u4e86\u3002\u53ef\u7231\u3002\n\u4f5c\u4e3a\u4e00\u540d\u8bbe\u8ba1\u5e08\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4f60\u5bf9\u5b83\u7684\u53cd\u5e94\u3002\u6709\u4e9b\u4eba\u770b\u5230\u5b83\u662f\u5982\u4f55\u5728\u79d1\u6280\u754c\u6cdb\u6ee5\u7684\uff0c\u53ef\u80fd\u4f1a\u8bf4\u5b83\u4e0d\u662f\u539f\u521b\u7684\u3002\u5176\u4ed6\u4eba\u5219\u8ba4\u4e3a\u8fd9\u662f\u4e3a\u8bbe\u8ba1\u5e08\u8bbe\u8ba1\u7684\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u4e00\u4e1d\u771f\u7406\u7684\u6697\u793a\u3002\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u6211\u4eec\u6700\u8fd1\u770b\u5230\u7684\u6700\u5177\u6218\u7565\u610f\u4e49\u7684\u8bbe\u8ba1\uff0c\u5373\u4f7f\u662f\u4ee5\u539f\u521b\u6027\u4e3a\u4ee3\u4ef7\u3002\n\u8fd9\u79cd\u98ce\u683c\u7684\u4f18\u70b9\u662f\u9700\u8981\u8003\u8651\u7684\u4e00\u4ef6\u4e8b--\u5982\u679c\u4f60\u60f3\u77e5\u9053\u7684\u8bdd\uff0c\u5728\u6211\u4eec\u7684\u793e\u533a\u91cc\u4e5f\u4e0d\u4e4f\u6279\u8bc4--\u4f46\u6211\u66f4\u597d\u5947\u7684\u662f\uff1a\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u8d8b\u52bf\uff1f\u662f\u4ec0\u4e48\u4fc3\u4f7f\u5b83\u8fd9\u4e48\u505a\u7684\uff1f\u8fd9\u662f\u6765\u81ea\u4e4b\u524d\u8d8b\u52bf\u7684\u53cd\u5f39\uff0c\u8fd8\u662f\u80cc\u540e\u6709\u66f4\u6df1\u5c42\u6b21\u7684\u5fc3\u7406\u539f\u56e0\uff1f\u6211\u4eec\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u5c06\u5176\u89c6\u4e3a\u6700\u65b0\u7684\u8bbe\u8ba1\u8d8b\u52bf\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u4f1a\u66f4\u6df1\u5165\u3002\n\u201cKawaii\u201d\u8fd9\u4e2a\u8bcd\u662f\u65e5\u672c\u6587\u5316\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u5728\u82f1\u8bed\u4e2d\uff0c\u5b83\u6700\u8d34\u5207\u5730\u7ffb\u8bd1\u4e3a\u201c\u53ef\u7231\u201d\u3002\u201c\u3002\u8fd9\u4e2a\u8bcd\u7528\u6765\u63cf\u8ff0\u4ece\u8863\u670d\u5230\u98df\u7269\uff0c\u4ece\u5a31\u4e50\u5230\u8eab\u4f53\u4e3e\u6b62\u7684\u4e00\u5207\uff0c\u7528\u6765\u63cf\u8ff0\u8ff7\u4eba\u7684\u3001\u8106\u5f31\u7684\u3001\u5b69\u5b50\u6c14\u7684\u6216\u53ef\u7231\u7684\u4e1c\u897f\u3002\u6839\u636e\u6211\u5bf9Kawaii\u7684\u7406\u89e3\uff0c\u5b83\u51e0\u4e4e\u66f4\u50cf\u662f\u4e00\u79cd\u611f\u89c9\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5f62\u5bb9\u8bcd\uff0c\u4e00\u4e2a\u65e0\u6cd5\u5b8c\u5168\u5b9a\u4e49\u7684\u8bcd\u3002\n\u5f53\u4e00\u5f20\u5a74\u513f\u7684\u8138\u8ba9\u6211\u4eec\u5fae\u7b11\uff0c\u6216\u8005\u6211\u4eec\u770b\u5230\u4e00\u53ea\u5c0f\u72d7\u5e76\u6709\u6324\u538b\u5b83\u7684\u51b2\u52a8\u65f6\uff0c\u90a3\u5c31\u662f\u5361\u74e6\u4f0a\u3002\u8fd9\u79cd\u79ef\u6781\u7684\u611f\u89c9\u8f6c\u5316\u4e3a\u7269\u54c1\u548c\u4f53\u9a8c\uff0c\u8d85\u8d8a\u4e86\u7ecf\u5178\u7684\u201c\u53ef\u7231\u201d\u3002\u5728\u65e5\u672c\uff0c\u8fd9\u79cd\u6548\u5e94\u88ab\u7528\u6765\u51cf\u5c11\u5efa\u7b51\u5de5\u5730\u5468\u56f4\u7684\u9a9a\u52a8\u3002\u822a\u7a7a\u516c\u53f8\u548c\u65e5\u672c\u8b66\u5bdf\u90e8\u961f\u5229\u7528\u5b83\u6765\u8f6f\u5316\u4ed6\u4eec\u7684\u770b\u6cd5\u6216\u6269\u5927\u4ed6\u4eec\u7684\u5438\u5f15\u529b\u3002\n\u5c31\u50cf\u7f8e\u662f\u4e00\u79cd\u529f\u80fd\u4e00\u6837\uff0c\u5ddd\u4e95\u4e5f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u529f\u80fd\u3002\u5b83\u80fd\u6fc0\u53d1\u79ef\u6781\u7684\u60c5\u7eea\uff0c\u9f13\u52b1\u793e\u4f1a\u4e92\u52a8\u3002\u5173\u4e8eKawaii\u7684\u6548\u679c\u5982\u4f55\u4fc3\u8fdb\u5e73\u9759\u7684\u884c\u4e3a\u548c\u7f29\u5c0f\u4f60\u7684\u6ce8\u610f\u529b\uff0c\u6709\u65e0\u6570\u7684\u5b9e\u9a8c\u7814\u7a76\u3002\u751a\u81f3\u4ece\u7406\u8bba\u4e0a\u8bf4\u5b83\u6709\u6cbb\u6108\u7684\u80fd\u529b\u3002\n\u770b\u770b\u6700\u8fd1\u7684\u8d8b\u52bf\uff0c\u4f3c\u4e4e\u5361\u74e6\u4f0a\u5df2\u7ecf\u4ee5\u67d0\u79cd\u5f62\u5f0f\u5230\u8fbe\u4e86\u897f\u65b9\uff0c\u5e76\u5f71\u54cd\u4e86\u6211\u4eec\u8bbe\u8ba1\u6570\u5b57\u4ea7\u54c1\u7684\u65b9\u5f0f\u3002\u5f53\u6211\u4eec\u8fdc\u79bb\u7b80\u7ea6\u7684\u5e72\u51c0\u800c\u51b7\u9177\u7684\u7f8e\u5b66\u65f6\uff0c\u6211\u4eec\u6b63\u5728\u63a5\u53d7\u53ef\u7231\u7684\u5fc3\u7406\u529b\u91cf\u3002\n\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u5df2\u7ecf\u53d8\u5f97\u67d4\u8f6f\u3001\u751c\u871c\u3001\u6e29\u548c\u3002\u94f6\u884c\u754c\u9762\u4f7f\u7528\u67d4\u548c\u7684\u8272\u8c03\u3001\u5706\u89d2\u548c\u67d4\u548c\u7684\u9634\u5f71\uff0c\u8ba9\u5e73\u51e1\u6216\u4ee4\u4eba\u4e0d\u5feb\u7684\u4efb\u52a1\u53d8\u5f97\u66f4\u52a0\u6709\u8da3\u3002Animojis\u5df2\u7ecf\u63a5\u7ba1\u4e86\u6211\u4eec\u7684\u804a\u5929\uff0c\u6211\u4eec\u7684\u751f\u4ea7\u529b\u5de5\u5177\u5f00\u59cb\u770b\u8d77\u6765\u50cf\u662f\u52a8\u7269\u7a7f\u8d8a(Animal Crossing)\u3002\n\u6211\u4eec\u6b63\u5728\u4f7f\u7528Kawaii\u6765\u4f7f\u6211\u4eec\u7684\u4ea7\u54c1\u66f4\u7f8e\u5473\uff0c\u4ea4\u6613\u66f4\u5c11\u3002\u7c98\u571f\u5f0f\u76843D\u624b\u6697\u793a\u7740\u6211\u4eec\u7684\u8bbe\u8ba1\u5de5\u5177\u5c31\u662f\u6211\u4eec\u7684\u670b\u53cb\u3002\u5706\u5708\u548c\u66f2\u7ebf\u8868\u660e\uff0c\u6211\u4eec\u7684\u8868\u5355\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u662f\u6765\u53c2\u52a0\u6d3e\u5bf9\u7684\u3002\u67d4\u548c\u7684\u989c\u8272\u548c\u7f3a\u4e4f\u9510\u89d2\u6807\u5fd7\u7740\u5b89\u5168\u3002\u5b83\u662f\u5e73\u6613\u8fd1\u4eba\u7684\u3002\u5b83\u5f88\u8ff7\u4eba\u3002\u6211\u662f\u5361\u74e6\u4f0a\u3002\n\u6211\u4eec\u5728\u4ea7\u54c1\u8bbe\u8ba1\u4e2d\u770b\u5230\u7684\u53ef\u80fd\u662f\u6781\u7b80\u4e3b\u4e49\u7684\u6f14\u53d8\uff0c\u4e5f\u53ef\u80fd\u662f\u5bf9\u4ee5\u524d\u8d8b\u52bf\u7684\u56de\u5e94\u3002\u6216\u8bb8\u8fd9\u662f\u6211\u4eec\u5904\u7406\u66f4\u5927\u793e\u4f1a\u95ee\u9898\u7684\u65b9\u5f0f\u3002\u7814\u7a76\u8868\u660e\uff0cKawaii\uff0c\u6216\u7531\u5176\u884d\u751f\u7684\u65f6\u5c1a\u4e9a\u6587\u5316\uff0c\u662f\u5e94\u5bf9\u793e\u4f1a\u538b\u529b\u548c\u7126\u8651\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u5c31\u50cf\u6234\u4e0a\u9762\u5177\u6765\u51cf\u8f7b\u73b0\u5b9e\u7684\u75db\u82e6\u3002\n\u8fd9\u53ef\u80fd\u53ea\u662f\u4e00\u79cd\u8d8b\u52bf\uff0c\u4e5f\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u4eec\u538c\u5026\u4e86\u957f\u5927\u6210\u4eba\uff0c\u6240\u4ee5\u6211\u4eec\u53d8\u5f97\u8d8a\u6765\u8d8a\u4eba\u6027\u5316\uff0c\u53d8\u5f97\u8d8a\u6765\u8d8a\u5b69\u5b50\u6c14\u3002\u8003\u8651\u5230\u6211\u4eec\u5468\u56f4\u4e16\u754c\u7684\u80cc\u666f\uff0c\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u79ef\u6781\u548c\u8212\u9002\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u7535\u5b50\u8868\u683c\u4e2d\u6dfb\u52a0\u8868\u60c5\u7b26\u53f7\u7684\u539f\u56e0\u3002\n\u54c8\u74e6\u90a3\u7740\u9646\u9875\u56fe\u7247\u4f5c\u8005\uff1aTran Mau Tri Tam\u3002\u6307\u5b9aRomain Briaux\u63d0\u4f9b\u7684\u767b\u5f55\u9875\u9762\u56fe\u50cf\u3002", "note_en": "Over the last year or two, I\u2019ve noticed a certain style emerge in brand and product design.\n Look at the graphic below and you&#39;ll see it. The colors are soft and muted, the shapes rounded and the typography unobtrusive. It\u2019s what you could describe as clean. It\u2019s approachable. It\u2019s inoffensive. It\u2019s almost\u2026 cute.\n    As a designer, you can choose your response to it. Some, seeing how it\u2019s proliferated in the tech world, may call it unoriginal. Others deem it &#34;design for designers.&#34; There&#39;s a hint of truth in all of it. I personally think it may be the most strategic design we\u2019ve seen lately, even at the expense of originality.\n The merit of this style is one thing to consider \u2013 and there\u2019s no shortage of criticism in our community, if you\u2019re looking for that \u2013 but I\u2019m more curious to know: Why is this trend happening? What prompted it? Is it backlash from a previous trend or is there a deeper psychological reason behind it? We could easily dismiss it as the latest design trend, but I think it goes deeper.\n  The word &#34;Kawaii\u201d is a prominent part of Japanese culture. In English, it most closely translates to &#34;cute.\u201d It\u2019s a term used for everything from clothing to food to entertainment to physical mannerisms, to describe something charming, vulnerable, childlike or loveable. As I understand Kawaii, it\u2019s almost more of a feeling than an adjective, a word that defies complete definition.\n When a baby\u2019s face makes us smile, or we see a puppy and have an urge to squeeze it, it\u2019s Kawaii. And that positive feeling translates to objects and experiences beyond the classically \u201ccute.\u201d In Japan, the effect is employed to reduce agitation surrounded construction sites. It is capitalized by airlines and Japanese police forces to soften their perception or broaden their appeal.\n  Similar to how  beauty is a function, Kawaii can be seen as a function. It elicits positive emotions  that encourage social interaction. There are countless  experimental studies\u00a0on how the effect of Kawaii promotes calm behavior and narrows your focus. It\u2019s even  theorized to have healing power.\n Looking at recent trends, it seems that Kawaii has, in some form, reached the West and influenced the way we are designing our digital products. As we move away from the clean yet cold aesthetic of minimalism, we&#39;re adopting the psychological power of cuteness.\n Our app designs have become soft, sweet, inoffensive. Bank interfaces use pastels, rounded corners and soft drop shadows to make mundane or unpleasant tasks more &#34;fun.\u201d Animojis have taken over our chats, and our productivity tools are starting to look like Animal Crossing.\n  We are using Kawaii to make our products more palatable and less transactional. Claymation-style 3D hands imply our design tool is our friend. Circles and squiggles say our form-creation app is here to party. The muted colors and lack of sharp corners signal safety. It is approachable. It is charming. It\u2019s Kawaii.\n What we\u2019re seeing in product design may be minimalism evolving, or it may be a response to previous trends. Or maybe it&#39;s our way of dealing with greater societal issues. Studies have suggested that Kawaii, or fashion sub-cultures off-shooting from it, are a way of  coping with social pressures and anxiety. Like putting on a mask to ease the pain of reality.\n It could be just a trend, or it could be we are becoming more human, more childlike because we&#39;re tired of being grownups. Given the context of the world around us, we are searching for positivity and comfort, and that&#39;s why we add emojis to our spreadsheets.\n &#34;Havana&#34; landing page image by Tran Mau Tri Tam. &#34;Specify&#34; landing page image by Romain Briaux.", "posttime": "2020-05-20 22:12:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u5ddd\u7aef,product", "title": "\u4ea7\u54c1\u8bbe\u8ba1\u7684\u5ddd\u7aef\u5316", "title_en": "The Kawaiization of Product Design", "transed": 1, "url": "https://vanschneider.com/the-kawaiization-of-product-design", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u5ddd\u7aef", "product"]}, {"category": "", "categoryclass": "", "imagename": "5c1924911eb0dfe7826e4d8efb66b53d.jpeg", "infoid": 1002951, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u5f97\u5230\u6d88\u606f\u8bf4\u67d0\u4e9b\u7f51\u7ad9\u5bf9\u8bbf\u95ee\u8005\u6267\u884c\u672c\u5730\u4e3b\u673a\u7aef\u53e3\u626b\u63cf\uff0c\u5927\u6982\u662f\u4f5c\u4e3a\u7528\u6237\u6307\u7eb9\u8bc6\u522b\u548c\u8ddf\u8e2a\u6216\u673a\u5668\u4eba\u68c0\u6d4b\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u8ba9\u6211\u5f88\u4e0d\u8212\u670d\uff0c\u6240\u4ee5\u6211\u5f00\u59cb\u8c03\u67e5\u8fd9\u79cd\u505a\u6cd5\uff0c\u4f3c\u4e4e\u8bb8\u591a\u7f51\u7ad9\u90fd\u662f\u51fa\u4e8e\u53ef\u7591\u7684\u539f\u56e0\u800c\u5bf9\u7aef\u53e3\u8fdb\u884c\u626b\u63cf\u7684\u8bbf\u95ee\u8005\u3002\n\u7aef\u53e3\u626b\u63cf\u662f\u6e17\u900f\u6d4b\u8bd5\u8005\u548c\u9ed1\u5ba2\u7ecf\u5e38\u4f7f\u7528\u7684\u4e00\u79cd\u5bf9\u6297\u6027\u6280\u672f\uff0c\u7528\u4e8e\u626b\u63cf\u9762\u5411\u4e92\u8054\u7f51\u7684\u673a\u5668\u5e76\u786e\u5b9a\u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\u6216\u670d\u52a1\u6b63\u5728\u4fa6\u542c\u7f51\u7edc\uff0c\u4ece\u800c\u901a\u5e38\u53ef\u4ee5\u6267\u884c\u7279\u5b9a\u7684\u653b\u51fb\u3002\u5b89\u5168\u8f6f\u4ef6\u68c0\u6d4b\u6d3b\u52a8\u7aef\u53e3\u626b\u63cf\u5e76\u5c06\u5176\u6807\u8bb0\u4e3a\u6f5c\u5728\u6ee5\u7528\u662f\u5f88\u5e38\u89c1\u7684\u3002\n\u5927\u591a\u6570\u5bb6\u5ead\u8def\u7531\u5668\u6ca1\u6709\u4efb\u4f55\u5f00\u653e\u7684\u7aef\u53e3\uff0c\u56e0\u6b64\u626b\u63cf\u4e92\u8054\u7f51\u7528\u6237\u7684IP\u5730\u5740\u4e0d\u592a\u53ef\u80fd\u8fd4\u56de\u4efb\u4f55\u6709\u610f\u4e49\u7684\u6570\u636e\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u8bb8\u591a\u7528\u6237\u5728\u5176\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u4fa6\u542c\u7aef\u53e3\u7684\u8f6f\u4ef6-\u5728\u7ebf\u6e38\u620f\u3001\u5a92\u4f53\u5171\u4eab\u548c\u8fdc\u7a0b\u8fde\u63a5\u53ea\u662f\u6d88\u8d39\u8005\u53ef\u80fd\u5728\u5bb6\u7528PC\u4e0a\u5b89\u88c5\u7684\u51e0\u4e2a\u529f\u80fd\u3002\n\u7aef\u53e3\u626b\u63cf\u53ef\u4ee5\u5411\u7f51\u7ad9\u63d0\u4f9b\u6709\u5173\u60a8\u6b63\u5728\u8fd0\u884c\u7684\u8f6f\u4ef6\u7684\u4fe1\u606f\u3002\u8bb8\u591a\u7aef\u53e3\u90fd\u6709\u4e00\u7ec4\u5b9a\u4e49\u826f\u597d\u7684\u670d\u52a1\u6765\u4f7f\u7528\u5b83\u4eec\uff0c\u56e0\u6b64\u6253\u5f00\u7684\u7aef\u53e3\u5217\u8868\u53ef\u4ee5\u5f88\u597d\u5730\u663e\u793a\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0cSTEAM(\u6e38\u620f\u5546\u5e97\u548c\u5e73\u53f0)\u5df2\u77e5\u5728\u7aef\u53e327036\u4e0a\u8fd0\u884c\uff0c\u56e0\u6b64\u770b\u5230\u8be5\u7aef\u53e3\u6253\u5f00\u7684\u626b\u63cf\u4eea\u53ef\u4ee5\u5408\u7406\u5730\u786e\u4fe1\u7528\u6237\u5728\u8bbf\u95ee\u7f51\u7ad9\u65f6\u4e5f\u6253\u5f00\u4e86STEAM\u3002\n\u5728\u8fc7\u53bb\uff0c\u6211\u7814\u7a76\u8fc7\u4e00\u4e9b\u5b89\u5168\u4ea7\u54c1\uff0c\u8fd9\u4e9b\u4ea7\u54c1\u7279\u522b\u62c5\u5fc3\u5458\u5de5\u7f51\u7edc\u6d4f\u89c8\u5668\u7684\u7aef\u53e3\u626b\u63cf\u95ee\u9898\u3002\u50cfBEAM\u8fd9\u6837\u7684\u653b\u51fb\u6846\u67b6\u5305\u62ec\u7aef\u53e3\u626b\u63cf\u529f\u80fd\uff0c\u53ef\u7528\u4e8e\u5371\u5bb3\u7528\u6237\u673a\u5668\u6216\u5176\u4ed6\u7f51\u7edc\u8bbe\u5907\u3002\u56e0\u6b64\uff0c\u6211\u5e0c\u671b\u80fd\u591f\u5728\u673a\u5668\u4e0a\u7684\u4efb\u4f55\u7aef\u53e3\u626b\u63cf\u4e0a\u53d1\u51fa\u8b66\u62a5\uff0c\u4f5c\u4e3a\u4e00\u79cd\u6f5c\u5728\u7684\u5371\u5bb3\uff0c\u5e76\u4e14\u7ad9\u70b9\u626b\u63cf\u7684\u672c\u5730\u4e3b\u673a\u53ef\u80fd\u4f1a\u89e6\u53d1\u8fd9\u4e9b\u8b66\u62a5\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u662f\u5728\u8fc7\u53bb\u7684\u51e0\u6b21\u62a5\u544a\uff0c\u56e0\u4e3a\u94f6\u884c\u6709\u65f6\u7aef\u53e3\u626b\u63cf\u8bbf\u5ba2\uff0c\u6211\u542c\u8bf4\u5a01\u80c1\u77e9\u9635\u63d0\u4f9b\u8fd9\u4f5c\u4e3a\u4e00\u4e2a\u5ba2\u6237\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u68c0\u67e5\u3002\n\u6211\u88ab\u544a\u77e5\u6613\u8da3\u662f\u4e00\u4e2a\u5305\u542b\u7aef\u53e3\u626b\u63cf\u7684\u7f51\u7ad9\uff0c\u4f46\u5f53\u6211\u6700\u521d\u5bfc\u822a\u5230\u90a3\u91cc\u65f6\uff0c\u6211\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u53ef\u7591\u7684\u884c\u4e3a\u3002\u6211\u8ba4\u4e3a\u4ed6\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e9b\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u786e\u5b9a\u8981\u626b\u63cf\u8c01\uff0c\u6240\u4ee5\u5c1d\u8bd5\u4e86\u51e0\u4e2a\u4e0d\u540c\u7684\u6d4f\u89c8\u5668\u548c\u6b3a\u9a97\u8bbe\u7f6e\uff0c\u4f46\u6ca1\u6709\u4efb\u4f55\u8fd0\u6c14\u3002\n\u6211\u60f3\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u8fd0\u884c\u7684\u662fLinux\uff0c\u6240\u4ee5\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684Windows VM\uff0c\u679c\u7136\uff0c\u6211\u4eceeBay\u4e3b\u9875\u4e0a\u770b\u5230\u4e86\u6d4f\u89c8\u5668\u5de5\u5177\u4e2d\u7684\u7aef\u53e3\u626b\u63cf\uff1a\n\u67e5\u770b\u4ed6\u4eec\u6b63\u5728\u626b\u63cf\u7684\u7aef\u53e3\u5217\u8868\uff0c\u4ed6\u4eec\u6b63\u5728\u67e5\u627e\u4e3b\u673a\u4e0a\u6b63\u5728\u8fd0\u884c\u7684VNC\u670d\u52a1\uff0c\u8fd9\u4e0e\u94f6\u884c\u7ad9\u70b9\u62a5\u544a\u7684\u60c5\u51b5\u76f8\u540c\u3002\u6211\u6807\u51fa\u4e86\u7aef\u53e3\u548c\u5b83\u4eec\u4ee5\u4ec0\u4e48\u95fb\u540d(\u5bf9\u4e8e\u6211\u4e0d\u719f\u6089\u7684\u7aef\u53e3\uff0c\u6709\u51e0\u4e2a\u7a7a\u683c)\uff1a\nVNC\u6709\u65f6\u4f5c\u4e3a\u50f5\u5c38\u7f51\u7edc\u6216\u75c5\u6bd2\u7684\u4e00\u90e8\u5206\u8fd0\u884c\uff0c\u4f5c\u4e3a\u8fdc\u7a0b\u767b\u5f55\u5230\u7528\u6237\u8ba1\u7b97\u673a\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u6709\u51e0\u4e2a\u6076\u610f\u8f6f\u4ef6\u670d\u52a1\u5229\u7528VNC\u5b9e\u73b0\u8fd9\u4e9b\u76ee\u7684\u3002\u4f46\u662f\uff0c\u5b83\u4e5f\u662f\u7ba1\u7406\u5458\u7528\u4e8e\u8fdc\u7a0b\u8bbf\u95ee\u8ba1\u7b97\u673a\u6216\u67d0\u4e9b\u6700\u7ec8\u7528\u6237\u652f\u6301\u8f6f\u4ef6\u7684\u6709\u6548\u5de5\u5177\uff0c\u56e0\u6b64VNC\u7684\u5b58\u5728\u4e0d\u80fd\u5f88\u597d\u5730\u6307\u793a\u6076\u610f\u8f6f\u4ef6\u3002\n\u6b64\u5916\uff0c\u5f53\u6211\u5b89\u88c5\u5e76\u8fd0\u884cVNC\u670d\u52a1\u5668\u65f6\uff0c\u6211\u6ca1\u6709\u68c0\u6d4b\u5230\u7ad9\u70b9\u884c\u4e3a\u6709\u4efb\u4f55\u4e0d\u540c-\u90a3\u4e48\u5b83\u4e3a\u4ec0\u4e48\u8981\u5bfb\u627e\u5b83\u5462\uff1f\nWebSocket\u65e8\u5728\u5141\u8bb8\u7ad9\u70b9\u50cf\u4f20\u7edf\u7f51\u7edc\u5957\u63a5\u5b57\u4e00\u6837\u521b\u5efa\u53cc\u5411\u901a\u4fe1\u3002\u8fd9\u5141\u8bb8\u7ad9\u70b9\u5728\u6ca1\u6709\u7528\u6237\u4ea4\u4e92\u6216\u524d\u7aef\u8f6e\u8be2\u7684\u60c5\u51b5\u4e0b\u5b9a\u671f\u5411\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u53d1\u9001\u4fe1\u606f\uff0c\u8fd9\u662f\u53ef\u7528\u6027\u7684\u80dc\u5229\u3002\n\u914d\u7f6eWeb\u5957\u63a5\u5b57\u65f6\uff0c\u5b83\u4f1a\u6307\u5b9a\u76ee\u6807\u4e3b\u673a\u548c\u7aef\u53e3\uff0c\u5b83\u4eec\u4e0d\u5fc5\u4e0e\u63d0\u4f9b\u811a\u672c\u7684\u57df\u76f8\u540c\u3002\u8981\u6267\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u811a\u672c\u53ea\u9700\u6307\u5b9a\u79c1\u6709IP\u5730\u5740(\u5982localhost)\u548c\u5b83\u5e0c\u671b\u626b\u63cf\u7684\u7aef\u53e3\u3002\n\u4e0d\u8fc7\uff0cWebSocket\u53ea\u4f1a\u8bf4HTTP\uff0c\u6240\u4ee5\u9664\u975e\u88ab\u626b\u63cf\u7684\u4e3b\u673a\u548c\u7aef\u53e3\u662fWeb Socket\u670d\u52a1\u5668\uff0c\u5426\u5219\u8fde\u63a5\u4e0d\u4f1a\u6210\u529f\u3002\u4e3a\u4e86\u7ed5\u8fc7\u6b64\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fde\u63a5\u8ba1\u65f6\u6765\u786e\u5b9a\u7aef\u53e3\u662f\u5426\u6253\u5f00\u3002\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u7684\u7aef\u53e3\u9700\u8981\u66f4\u957f\u65f6\u95f4\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2aTLS\u534f\u5546\u6b65\u9aa4\u3002\n\u60a8\u8fd8\u53ef\u80fd\u6536\u5230\u4e0d\u540c\u7684\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5b89\u88c5\u4e86Python\uff0c\u8bf7\u5c1d\u8bd5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u521b\u5efa\u5728\u7aef\u53e38080\u4e0a\u8fd0\u884c\u7684\u672c\u5730Web\u670d\u52a1\u5668\uff1a\n\u73b0\u5728\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u5f00\u53d1\u4eba\u5458\u63a7\u5236\u53f0(\u901a\u5e38\u662fOptions-&gt\uff1bWeb Developer-&gt\uff1bConsole)\uff0c\u7136\u540e\u76f4\u63a5\u952e\u5165\u4e00\u4e9bJavaScript\u3002\u4e0b\u9762\u662f\u6211\u5728Chrome\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u65f6\u770b\u5230\u7684\u5185\u5bb9\uff1a\n&gt\uff1bvar s=\u65b0\u5efaWebSocket(&#34\uff1bws\uff1a//127.0.0.1\uff1a8080&#34\uff1b)&lt\uff1bunfinedVM1131\uff1a1WebSocket\u8fde\u63a5\u5230&#39\uff1bws\uff1a//127.0.0.1\uff1a8080/&#39\uff1b\u5931\u8d25\uff1aWebSocket\u63e1\u624b\u671f\u95f4\u51fa\u9519\uff1a\u610f\u5916\u54cd\u5e94\u4ee3\u7801\uff1a200(\u533f\u540d)@VM1131\uff1a1&gt\uff1bvar s=\u5230&#39\uff1b\u7684\u65b0WebSocket(&#34\uff1bws://127.0.0.1:8081&#34\uff1b)&lt\uff1bundefinedVM1168:1 WebSocket\u8fde\u63a5\u3002ws\uff1a//127.0.0.1\uff1a8081/&#39\uff1b\u5931\u8d25\uff1a\u8fde\u63a5\u5efa\u7acb\u9519\u8bef\uff1aNET\uff1a\uff1aERR_CONNECTION_REJECTED\u3002\n\u5728\u9519\u8bef\u6d88\u606f\u81ea\u7701\u548c\u8ba1\u65f6\u653b\u51fb\u4e4b\u95f4\uff0c\u7ad9\u70b9\u53ef\u4ee5\u5f88\u597d\u5730\u4e86\u89e3\u7ed9\u5b9a\u7aef\u53e3\u662f\u5426\u6253\u5f00\u3002\n\u65e0\u8bba\u7aef\u53e3\u626b\u63cf\u662f\u4f5c\u4e3a\u611f\u67d3\u7684\u4e00\u90e8\u5206\u4f7f\u7528\uff0c\u8fd8\u662f\u4f5c\u4e3a\u7535\u5b50\u5546\u52a1\u6216\u94f6\u884c\u6216\u5b89\u5168\u68c0\u67e5\u7684\u4e00\u90e8\u5206\u4f7f\u7528\uff0c\u5b83\u663e\u7136\u90fd\u662f\u6076\u610f\u884c\u4e3a\uff0c\u53ef\u80fd\u4f1a\u89e6\u72af\u6cd5\u5f8b\u3002\n\u5982\u679c\u60a8\u89c2\u5bdf\u5230\u8fd9\u79cd\u884c\u4e3a\uff0c\u6211\u9f13\u52b1\u60a8\u5411\u6267\u884c\u626b\u63cf\u7684\u673a\u6784\u6295\u8bc9\uff0c\u5e76\u5b89\u88c5\u5c1d\u8bd5\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u4e2d\u963b\u6b62\u6b64\u7c7b\u73b0\u8c61\u7684\u6269\u5c55\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u4ece\u4e00\u5f00\u59cb\u5c31\u963b\u6b62\u52a0\u8f7d\u8fd9\u4e9b\u7c7b\u578b\u7684\u811a\u672c\u6765\u5b9e\u73b0\u7684\u3002\n\u8be5\u8bc4\u8bba\u7cfb\u7edf\u662f\u4f7f\u7528Mozilla Coral Talk\u5e73\u53f0\u81ea\u6258\u7ba1\u7684\uff0c\u4e0d\u4e0e\u4efb\u4f55\u53ef\u80fd\u6536\u96c6\u6570\u636e\u7684\u7b2c\u4e09\u65b9\u8fde\u63a5\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u5b8c\u5168\u5220\u9664\u5b58\u50a8\u7684\u6240\u6709\u8bc4\u8bba\u548c\u6570\u636e\uff0c\u5305\u62ec\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u9664\u4e86\u60a8\u8981\u6c42\u7684\u5bc6\u7801\u91cd\u7f6e\u7535\u5b50\u90ae\u4ef6\u5916\uff0c\u6211\u6c38\u8fdc\u4e0d\u4f1a\u7ed9\u60a8\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002", "note_en": "Recently, I was tipped off about certain sites performing localhost port scans against visitors, presumably as part of a user fingerprinting and tracking or bot detection. This didn&#39;t sit well with me, so I went about investigating the practice, and it seems many sites are port scanning visitors for dubious reasons.\n  Port Scanning is an adversarial technique frequently used by penetration testers and hackers to scan internet facing machines and determine what applications or services are listening on the network, usually so that specific attacks can be carried out. It&#39;s common for security software to detect active port scans and flag it as potential abuse.\n Most home routers don&#39;t have any open ports, so scanning an internet users IP address is unlikely to return any meaningful data. However, many users run software on their computer that listens on ports for various reasons - online gaming, media sharing, and remote connections are just a few things that consumers might install on a home PC.\n A Port scan can give a website information about what software you are running. Many ports have a well defined set of services that use them, so a list of open ports gives a pretty good view of running applications. For instance, Steam (a gaming store and platform) is known to run on port 27036, so a scanner seeing that port open could have reasonable confidence that the user also had steam open while visiting the web site.\n  In the past I have worked on security products that specifically worried about port scanning from employee web browsers. Attack frameworks like  BeEF include port scanning features, which can be used to compromise user machines or other network devices. So, I wanted to be able to alert on any port scanning on machines as a potential compromise, and a site scanning localhost might trip those alerts.\n On the other hand, it&#39;s  been reported on a few times in the past as banks sometimes port scan visitors, and I have heard Threat Matrix offers this as a customer malware detection check.\n I was given the example of ebay as a site that includes port scanning, but when I initially navigated there I didn&#39;t see any suspicious behavior. I thought they might use some heuristics to determine who to scan, so tried a few different browsers and spoofed settings, without any luck.\n I thought it might be because I run Linux, so I created a new Windows VM and sure enough, I saw the port scan occurring in the browser tools from the ebay home page:\n  Looking at the list of ports they are scanning, they are looking for VNC services being run on the host, which is the same thing that was reported for bank sites. I marked out the ports and what they are known for (with a few blanks for ones I am unfamiliar with):\n  VNC is sometimes run as part of bot nets or viruses as a way to remotely log into a users computer. There are several malware services that leverage VNC for these purposes. However it is also a valid tool used by administrators for remote access to machines, or by some end user support software, so the presence of VNC is a poor indicator of malware.\n Furthermore, when I installed and ran a VNC server, I didn&#39;t detect any difference in site behavior - so why is it looking for it?\n  WebSockets are intended to allow a site to create bi-directional communication like traditional network sockets. This allows sites to periodically send information to a client browser without user interaction or front end polling, which is a win for usability.\n When a web socket is configured, it specifies a destination host and port, which do not have to be the same domain that the script is served from. To do a port scan, the script only has to specify a private IP address (like localhost) and the port it wishes to scan.\n WebSockets only speak HTTP though, so unless the host and port being scanned are a web socket server, the connection won&#39;t succeed. In order to get around this, we can use connection timing to determine whether the port is open or not. Ports that are open take longer in the browser, because there is a TLS negotiation step.\n You also might get different error messages. If you have python installed, try running the following to create a local web server running on port 8080:\n  Now, open your browser developer console (usually options -&gt; Web Developer -&gt; Console) and type some JavaScript in directly. Here is what I see when I do it in chrome:\n &gt; var s = new WebSocket(&#34;ws://127.0.0.1:8080&#34;)&lt; undefinedVM1131:1 WebSocket connection to &#39;ws://127.0.0.1:8080/&#39; failed: Error during WebSocket handshake: Unexpected response code: 200(anonymous) @ VM1131:1&gt;var s = new WebSocket(&#34;ws://127.0.0.1:8081&#34;)&lt;undefinedVM1168:1 WebSocket connection to &#39;ws://127.0.0.1:8081/&#39; failed: Error in connection establishment: net::ERR_CONNECTION_REFUSED\n Between error message introspection and timing attacks, a site can have a pretty good idea of whether a given port is open.\n  Whether the port scan is used as part of an infection or part of e-commerce or bank &#34;security checks&#34;, it is clearly malicious behavior and may fall on the wrong side of the law.\n If you observe this behavior, I encourage you to complain to the institution performing the scans, and install extensions that attempt to block this kind of phenomenon in your browser, generally by preventing these types of scripts from loading in the first place.\n    This comment system is self hosted using the  Mozilla Coral talk platform, and not connected with any third parties who might collect data. At any time, you can completely delete all comments and data stored, including your email address. I will never send you emails aside from password reset emails you request.", "posttime": "2020-05-20 21:28:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u626b\u63cf,port,\u7aef\u53e3", "title": "\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u7f51\u7ad9\u8981\u626b\u63cf\u6211\u7684\u7aef\u53e3\uff1f", "title_en": "Why Is This Website Port Scanning Me?", "transed": 1, "url": "https://nullsweep.com/why-is-this-website-port-scanning-me/", "via": "", "real_tags": ["\u626b\u63cf", "port", "\u7aef\u53e3"]}, {"category": "", "categoryclass": "", "imagename": "66b8e78425e9de7041358819d3e65257.jpg", "infoid": 1002950, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u97e9\u56fd\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3(Korea Centers For Disease Control And Prevention)\u5468\u4e8c\u53d1\u5e03\u7684\u6570\u636e\u663e\u793a\uff0c\u4ece\u51a0\u72b6\u75c5\u6bd2\u4e2d\u5eb7\u590d\uff0c\u4f46\u51e0\u5929\u6216\u51e0\u5468\u540e\u518d\u6b21\u68c0\u6d4b\u51fa\u75c5\u6bd2\u5448\u9633\u6027\u7684\u4eba\u6ca1\u6709\u8131\u843d\u75c5\u6bd2\u9897\u7c92\uff0c\u4e5f\u6ca1\u6709\u4f20\u67d3\u6027\u3002\n\u6240\u8c13\u7684\u201c\u518d\u9633\u6027\u201d\u75c5\u4f8b\u5f15\u53d1\u4e86\u4eba\u4eec\u7684\u62c5\u5fe7\uff0c\u5373\u611f\u67d3\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2SARS-CoV-2\u53ef\u80fd\u4f1a\u5728\u5eb7\u590d\u7684\u60a3\u8005\u4e2d\u201c\u91cd\u65b0\u6fc0\u6d3b\u201d\uff0c\u6216\u8005\u4ece\u611f\u67d3\u4e2d\u5eb7\u590d\u7684\u60a3\u8005\u53ef\u80fd\u751a\u81f3\u65e0\u6cd5\u4ea7\u751f\u77ed\u6682\u7684\u514d\u75ab\u529b\uff0c\u5982\u679c\u60a3\u8005\u66b4\u9732\u5728\u8fd9\u79cd\u75c5\u6bd2\u4e2d\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u7acb\u5373\u518d\u6b21\u611f\u67d3\u3002\nKCDC\u7684\u7814\u7a76\u4eba\u5458\u68c0\u67e5\u4e86285\u4f8b\u4e4b\u524d\u4ece\u51a0\u72b6\u75c5\u6bd2\u4e2d\u6062\u590d\u4f46\u968f\u540e\u518d\u6b21\u68c0\u6d4b\u5448\u9633\u6027\u7684\u75c5\u4f8b\u3002\u8fd9\u4e9b\u60a3\u8005\u5728\u4ece\u7b2c\u4e00\u6b21\u611f\u67d3\u5eb7\u590d\u5e76\u4ece\u9694\u79bb\u4e2d\u51fa\u9662\u540e1\u81f337\u5929\u5185\uff0c\u4efb\u4f55\u5730\u65b9\u7684\u68c0\u6d4b\u7ed3\u679c\u90fd\u518d\u6b21\u5448\u9633\u6027\u3002\u7b2c\u4e8c\u6b21\u9633\u6027\u7684\u5e73\u5747\u65f6\u95f4\u7ea6\u4e3a14\u5929\u3002\n\u5728\u8fd9\u4e9b\u75c5\u4f8b\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u68c0\u67e5\u4e86\u5176\u4e2d284\u4f8b\u7684\u75c7\u72b6\u3002\u4ed6\u4eec\u53d1\u73b0\uff0c126\u4eba(\u7ea648%)\u786e\u5b9e\u6709\u4e0e\u51a0\u72b6\u75c5\u6bd2\u6709\u5173\u7684\u75c7\u72b6\u3002\n\u4f46\u4ed6\u4eec\u4f3c\u4e4e\u90fd\u6ca1\u6709\u4f20\u64ad\u611f\u67d3\u3002KCDC\u8c03\u67e5\u4e86790\u540d\u4e0e\u8fd9285\u4f8b\u60a3\u8005\u6709\u5bc6\u5207\u63a5\u89e6\u7684\u4eba\uff0c\u53d1\u73b0\u4ed6\u4eec\u4e2d\u6ca1\u6709\u4e00\u4eba\u611f\u67d3\u8fc7\u201c\u518d\u9633\u6027\u201d\u75c5\u4f8b\u3002\n\u81f3\u5173\u91cd\u8981\u7684\u662f\uff0c\u5bf9108\u4f8b\u201c\u590d\u9633\u6027\u201d\u75c5\u4f8b\u8fdb\u884c\u7684\u989d\u5916\u68c0\u6d4b\u53d1\u73b0\uff0c\u5b83\u4eec\u4e2d\u6ca1\u6709\u4e00\u4f8b\u611f\u67d3\u4e86\u4f20\u67d3\u6027\u75c5\u6bd2\u3002\n\u663e\u793a285\u4eba\u7b2c\u4e8c\u6b21\u51a0\u72b6\u75c5\u6bd2\u5448\u9633\u6027\u7684\u6d4b\u8bd5\u7c7b\u578b\u662f\u6240\u8c13\u7684RT-PCR\u6d4b\u8bd5(\u9006\u8f6c\u5f55\u805a\u5408\u9176\u94fe\u53cd\u5e94)\u3002\u8fd9\u4e9b\u68c0\u6d4b\u901a\u5e38\u7528\u4e8e\u8bca\u65ad\u51a0\u72b6\u75c5\u6bd2\u611f\u67d3\u3002\u4ed6\u4eec\u901a\u8fc7\u8bc6\u522b\u548c\u590d\u5236SARS-CoV-2\u9057\u4f20\u7269\u8d28\u72ec\u7279\u7684\u9776\u5411\u7247\u6bb5\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u8fd9\u662f\u4e00\u79cd\u7cbe\u786e\u800c\u6709\u6548\u7684\u65b9\u6cd5\u6765\u786e\u5b9a\u67d0\u4eba\u662f\u5426\u611f\u67d3\u4e86\u75c5\u6bd2\u3002\u5982\u679c\u67d0\u4eba\u7684\u6c14\u9053\u4e2d\u542b\u6709SARS-CoV-2\u9057\u4f20\u7269\u8d28\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u5df2\u7ecf\u88ab\u611f\u67d3\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u62e5\u6709\u9057\u4f20\u7269\u8d28\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u8fd9\u4e2a\u4eba\u4ecd\u7136\u6709\u6d3b\u8dc3\u7684\u611f\u67d3\u548c\u4f20\u67d3\u6027\u75c5\u6bd2\u9897\u7c92\u3002\u4ed6\u4eec\u53ef\u80fd\u53ea\u6709\u88ab\u6467\u6bc1\u7684\u75c5\u6bd2\u9897\u7c92\u4e2d\u6325\u4e4b\u4e0d\u53bb\u7684\u9057\u4f20\u7269\u8d28\u7247\u6bb5\u3002\n\u8fd9\u4f3c\u4e4e\u5c31\u662f\u8fd9\u91cc\u7684\u60c5\u51b5\u3002\u5f53KCDC\u7684\u7814\u7a76\u4eba\u5458\u8bd5\u56fe\u4ece\u4ed6\u4eec\u80fd\u591f\u68c0\u6d4b\u7684108\u4f8b\u75c5\u4f8b\u4e2d\u5206\u79bb\u5e76\u751f\u957f\u51fa\u5b8c\u6574\u7684SARS-CoV-2\u611f\u67d3\u6027\u9897\u7c92\u65f6\uff0c\u6240\u6709108\u4f8b\u90fd\u662f\u5168\u75c5\u6bd2\u9634\u6027\u3002\n\u6b64\u5916\uff0c\u5f53\u4ed6\u4eec\u5bf923\u4f8b\u518d\u6b21\u9633\u6027\u7684\u75c5\u4f8b\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u8840\u6db2\u68c0\u6d4b\u65f6\uff0c\u51e0\u4e4e\u6240\u6709\u4eba(96%)\u90fd\u6709\u9488\u5bf9SARS-CoV-2\u7684\u4e2d\u548c\u6297\u4f53\u3002\u8fd9\u6697\u793a\u4ed6\u4eec\u53ef\u80fd\u5bf9\u75c5\u6bd2\u7684\u518d\u6b21\u611f\u67d3\u6709\u4e00\u5b9a\u7684\u514d\u75ab\u529b\u3002\n\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u8bb8\u591a\u60a3\u8005\u7684\u75c7\u72b6\u3002\u5c11\u6570\u75c5\u4f8b\u5bf9\u5176\u4ed6\u547c\u5438\u9053\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\uff0c\u4f46\u8bb8\u591a\u75c5\u4f8b\u6ca1\u6709\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u57fa\u4e8e\u6570\u636e\uff0cKCDC\u786e\u5b9a\u518d\u6b21\u9633\u6027\u7684\u75c5\u4f8b\u4e0d\u5177\u6709\u4f20\u67d3\u6027\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u8fdb\u5165\u9694\u79bb\u72b6\u6001\u3002", "note_en": "People who recover from COVID-19 but test positive for the virus again days or weeks later are not shedding viral particles and are not infectious, according to  data released Tuesday by the Korea Centers for Disease Control and Prevention.\n The so-called \u201cre-positive\u201d cases have raised fears that an infection with the new coronavirus, SARS-CoV-2, could \u201creactivate\u201d in recovered patients or that recovering from the infection may fail to produce even short-lived immunity, allowing patients to immediately become re-infected if they are exposed.\n  KCDC researchers examined 285 cases that had previously recovered from COVID-19 but then tested positive again. The patients tested positive again anywhere from one to 37 days after recovering from their first infection and being discharged from isolation. The average time to a second positive was about 14 days.\n Of those cases, researchers checked for symptoms in 284 of them. They found that 126 (about 48 percent) did indeed have symptoms related to COVID-19.\n But none of them seemed to have spread the infection. KCDC investigated 790 people who had close contact with the 285 cases and found that none of them had been infected by the \u201cre-positive\u201d cases.\n Crucially, additional testing of 108 \u201cre-positive\u201d cases found that none of them were shedding infectious virus.\n  The type of tests that suggested the 285 people were positive for COVID-19 a second time were what\u2019s called RT-PCR tests (reverse transcription polymerase chain reaction). These tests are typically used to diagnose a COVID-19 infection. They do so by recognizing and making copies of unique, targeted fragments of SARS-CoV-2\u2019s genetic material.\n It\u2019s a precise and effective way to determine if someone\u2019s been infected with the virus. If someone has SARS-CoV-2 genetic material in their airways, they\u2019ve been infected. That said, having genetic material doesn\u2019t necessarily mean that the person still has an active infection and infectious viral particles. They may just have lingering fragments of genetic material from destroyed viral particles.\n That appears to be the case here. When KCDC researchers tried to isolate and grow whole, infectious particles of SARS-CoV-2 from the 108 cases they were able to test\u2014all 108 were negative for whole virus.\n Further, when they did further blood work on 23 of the re-positive cases, nearly all of them (96 percent) had neutralizing antibodies against SARS-CoV-2. This hints that they may have some immunity to a reinfection with the virus.\n It&#39;s unclear what was causing symptoms in many of the patients. A few cases tested positive for other respiratory viruses, but many did not.\n Still, based on the data, the KCDC determined that re-positive cases are not infectious and do not need to re-enter isolation.", "posttime": "2020-05-20 21:13:38", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u51a0\u72b6\u75c5\u6bd2,\u75c5\u6bd2,\u53d1\u73b0,test", "title": "\u6570\u636e\u53d1\u73b0\uff0c\u5eb7\u590d\u7684\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u68c0\u6d4b\u5448\u9633\u6027\uff0c\u4f46\u4e0d\u5177\u4f20\u67d3\u6027", "title_en": "Recovered COVID-19 Patients Test Positive But Not Infectious, Data Finds", "transed": 1, "url": "https://arstechnica.com/science/2020/05/feared-reactivation-of-covid-19-infections-disputed-by-new-data/", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u53d1\u73b0", "test"]}, {"category": "", "categoryclass": "", "imagename": "0cecb9185af01a1aabff61e3812413fc.jpg", "infoid": 1002949, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5916\u5305\u516c\u53f8Serco\u5728\u4e0d\u5c0f\u5fc3\u6cc4\u9732\u4e86\u8fd1300\u540d\u8054\u7cfb\u4eba\u8ffd\u8e2a\u8005\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u540e\uff0c\u5df2\u7ecf\u9053\u6b49\u3002\nSerco\u8868\u793a\uff0c\u5b83\u5df2\u7ecf\u9053\u6b49\uff0c\u5e76\u5c06\u5ba1\u67e5\u5176\u6d41\u7a0b\uff0c\u4ee5\u786e\u4fdd\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u518d\u6b21\u53d1\u751f\u3002\n\u63a5\u89e6\u8005\u8ffd\u8e2a\u662f\u4e00\u79cd\u7528\u4e8e\u51cf\u7f13\u51a0\u72b6\u75c5\u6bd2\u7b49\u4f20\u67d3\u75c5\u4f20\u64ad\u7684\u7cfb\u7edf\u3002\u5b83\u5df2\u7ecf\u5728\u5176\u4ed6\u56fd\u5bb6\u4f7f\u7528\uff0c\u5305\u62ec\u65b0\u52a0\u5761\u548c\u5fb7\u56fd\u3002\n\u5728\u82f1\u56fd\uff0c\u536b\u751f\u5927\u81e3\u9a6c\u7279\u00b7\u6c49\u8003\u514b(Matt Hancock)\u8868\u793a\uff0c\u5df2\u7ecf\u96c7\u4f63\u4e862.1\u4e07\u540d\u63a5\u89e6\u8ffd\u8e2a\u5668\uff0c\u5176\u4e2d\u4e00\u4e9b\u662f\u533b\u7597\u4fdd\u5065\u4e13\u4e1a\u4eba\u5458\u3002\n\u4ed6\u4eec\u5c06\u6536\u96c6\u51a0\u72b6\u75c5\u6bd2\u60a3\u8005\u7684\u63a5\u89e6\u8005\uff0c\u5e76\u901a\u8fc7\u7535\u8bdd\u6216\u7535\u5b50\u90ae\u4ef6\u8ffd\u8e2a\u8fd9\u4e9b\u4eba\uff0c\u4ee5\u51cf\u7f13\u75be\u75c5\u5728\u793e\u533a\u4e2d\u7684\u4f20\u64ad\u3002\nSerco\u662f\u62db\u8058\u3001\u57f9\u8bad\u548c\u64cd\u4f5c1.5\u4e07\u540d\u6ca1\u6709\u63a5\u53d7\u8fc7\u4e34\u5e8a\u57f9\u8bad\u7684\u63a5\u89e6\u8ffd\u8e2a\u5668\u7684\u516c\u53f8\u4e4b\u4e00\u3002\n\u4f46\u8fd9\u4e2a\u9519\u8bef\u53ef\u80fd\u4f1a\u8ba9\u516c\u53f8\u8fdd\u53cd\u6570\u636e\u4fdd\u62a4\u89c4\u5219\u3002\u636e\u6089\uff0c\u81f3\u5c11\u6709\u4e00\u540d\u5de5\u4f5c\u4eba\u5458\u5411\u4fe1\u606f\u4e13\u5458\u63d0\u51fa\u4e86\u8fd9\u4e00\u95ee\u9898\u3002\n\u8fd9\u4e00\u9519\u8bef\u4e0d\u6d89\u53ca\u60a3\u8005\u6570\u636e\uff0c\u4f46\u5bf9\u4e00\u4e2a\u63a5\u89e6\u8005\u8ffd\u8e2a\u9879\u76ee\u6ca1\u6709\u5e2e\u52a9\uff0c\u8be5\u9879\u76ee\u5c06\u8981\u6c42\u6570\u5343\u540d\u751f\u75c5\u7684\u4eba\u5206\u4eab\u4ed6\u4eec\u670b\u53cb\u548c\u719f\u4eba\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\nSerco\u5199\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u4e3a\u4e86\u544a\u8bc9\u65b0\u5b66\u5458\u4e0d\u8981\u8054\u7cfb\u5176\u5e2e\u52a9\u53f0\u5bfb\u627e\u57f9\u8bad\u7ec6\u8282\u3002\n\u4f46\u53d1\u9001\u90ae\u4ef6\u7684\u5de5\u4f5c\u4eba\u5458\u5c06\u4ed6\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u653e\u5728\u4e86\u7535\u5b50\u90ae\u4ef6\u7684\u6284\u9001\u90e8\u5206\uff0c\u800c\u4e0d\u662f\u4fdd\u5bc6\u7684\u6284\u9001\u90e8\u5206-\u5c06\u5b83\u4eec\u900f\u9732\u7ed9\u6bcf\u4e2a\u6536\u4ef6\u4eba\u3002\n\u5f53\u5185\u653f\u90e8\u53bb\u5e74\u72af\u4e0b\u7c7b\u4f3c\u7684\u9519\u8bef\u65f6\uff0c\u5b83\u5c06\u81ea\u5df1\u63d0\u4ea4\u7ed9\u4e86\u4fe1\u606f\u4e13\u5458\uff0c\u4f46Serco\u5e76\u4e0d\u6253\u7b97\u8fd9\u6837\u505a\u3002\nSerco\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u544a\u8bc9\u4eca\u65e5\u8282\u76ee\uff1a\u6211\u4eec\u5411\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4e2a\u4eba\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u65b0\u6210\u5458\u53d1\u9001\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\n&#34\uff1b\u9519\u8bef\u5730\uff0c\u5176\u4ed6\u6536\u4ef6\u4eba\u53ef\u4ee5\u770b\u5230\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u6211\u4eec\u5df2\u7ecf\u9053\u6b49\uff0c\u5e76\u5ba1\u67e5\u4e86\u6211\u4eec\u7684\u6d41\u7a0b\uff0c\u4ee5\u786e\u4fdd\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u518d\u6b21\u53d1\u751f\u3002\n\u5982\u679c\u60a8\u613f\u610f\u4e0eBBC\u8bb0\u8005\u4ea4\u8c08\uff0c\u8bf7\u63d0\u4f9b\u8054\u7cfb\u7535\u8bdd\u3002\n\u60a8\u7684\u8054\u7cfb\u8be6\u7ec6\u4fe1\u606f\u59d3\u540d(\u53ef\u9009)\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740(\u5fc5\u586b)\u57ce\u9547\u548c\u56fd\u5bb6(\u53ef\u9009)\u60a8\u7684\u7535\u8bdd\u53f7\u7801(\u53ef\u9009)\u5907\u6ce8(\u5fc5\u586b)\u3002\n\u5982\u679c\u60a8\u613f\u610f\u4e0eBBC\u8bb0\u8005\u8054\u7cfb\uff0c\u8bf7\u7559\u4e0b\u6211\u4eec\u53ef\u4ee5\u8054\u7cfb\u60a8\u7684\u7535\u8bdd\u53f7\u7801\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u60a8\u53e6\u6709\u8bf4\u660e\uff0c\u5426\u5219\u5c06\u53d1\u5e03\u60a8\u9009\u62e9\u7684\u8bc4\u8bba\uff0c\u5e76\u663e\u793a\u60a8\u63d0\u4f9b\u7684\u59d3\u540d\u548c\u4f4d\u7f6e\u3002\u60a8\u7684\u8054\u7cfb\u65b9\u5f0f\u6c38\u8fdc\u4e0d\u4f1a\u516c\u5e03\u3002\u5728\u5411\u6211\u4eec\u53d1\u9001\u56fe\u7247\u3001\u89c6\u9891\u6216\u76ee\u51fb\u8005\u5e10\u6237\u65f6\uff0c\u60a8\u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u5e94\u5371\u53ca\u81ea\u5df1\u6216\u4ed6\u4eba\uff0c\u627f\u62c5\u4efb\u4f55\u4e0d\u5fc5\u8981\u7684\u98ce\u9669\u6216\u8fdd\u53cd\u4efb\u4f55\u6cd5\u5f8b\u3002\u8bf7\u786e\u4fdd\u60a8\u5df2\u9605\u8bfb\u6761\u6b3e\u548c\u6761\u4ef6\u3002", "note_en": "Outsourcing firm Serco has apologised after accidentally sharing the email addresses of almost 300 contact tracers.\n   Serco said it had apologised and would review its processes &#34;to make sure that this does not happen again&#34;.\n Contact tracing is a system used to slow the spread of infectious diseases like coronavirus. It is already being used in other countries including Singapore and Germany.\n  In the UK, Health Secretary Matt Hancock said 21,000 contact tracers have been hired, some of whom are healthcare professionals.\n They will gather contacts from Covid-19 patients and trace those people by phone or email to slow the spread of the disease in the community.\n Serco is one of the companies hiring, training and operating the 15,000 contact tracers who do not have clinical training.\n But the mistake may leave the firm in breach of data protection rules. It is understood that at least one member of staff has raised the issue with the Information Commissioner.\n  The error did not involve patients&#39; data but will be unhelpful for a contact tracing project that is set to ask many thousands of people who have fallen ill to share the details of their friends and acquaintances.\n Serco wrote the email to tell new trainees not to contact its help desk looking for training details.\n But the staff member who sent it put their email addresses in the CC section of the email, rather than the blind CC section - revealing them to every recipient.\n    When the Home Office made a similar error last year it referred itself to the Information Commissioner, but Serco is not intending to do this.\n A Serco spokesman told the Today Programme: &#34;An email was sent to new recruits who had given us their permission to use their personal email addresses.\n &#34;In error, email addresses were visible to other recipients. We have apologised and reviewed our processes to make sure that this does not happen again.&#34;\n   Please include a contact number if you are willing to speak to a BBC journalist.\n  Your contact details   Name  (optional)      Your E-mail address  (required)      Town &amp; Country  (optional)      Your telephone number  (optional)      Comments  (required)\n  If you are happy to be contacted by a BBC journalist please leave a telephone number that we can contact you on. In some cases a selection of your comments will be published, displaying your name as you provide it and location, unless you state otherwise. Your contact details will never be published. When sending us pictures, video or eyewitness accounts at no time should you endanger yourself or others, take any unnecessary risks or infringe any laws. Please ensure you have read the terms and conditions.", "posttime": "2020-05-20 20:57:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51a0\u72b6\u75c5\u6bd2,coronavirus,\u75c5\u6bd2,serco,\u7535\u5b50\u90ae\u4ef6", "title": "\u51a0\u72b6\u75c5\u6bd2\uff1aSerco\u4e3a\u5171\u4eab\u63a5\u89e6\u8005\u8ffd\u8e2a\u5668\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u9053\u6b49", "title_en": "Coronavirus: Serco apologises for sharing contact tracers' email addresses", "transed": 1, "url": "https://www.bbc.co.uk/news/uk-52732818", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "serco", "\u7535\u5b50\u90ae\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "a2af9b85c6f5b72efc249505724d3914.png", "infoid": 1002948, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53c8\u4e00\u5929\uff0c\u53c8\u53d1\u73b0\u4e86\u6f0f\u6d1e\u3002\u521a\u521a\u53d1\u73b0\u4e86\u4e00\u79cd\u5229\u7528DNS\u9012\u5f52\u89e3\u6790\u5668\u64cd\u4f5c\u65b9\u5f0f\u7684\u65b0\u6076\u610f\u653b\u51fb\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u5f53\u6536\u5230\u5305\u542b\u540d\u79f0\u670d\u52a1\u5668\u4f46\u6ca1\u6709\u5bf9\u5e94IP\u5730\u5740\u7684NS\u5f15\u7528\u54cd\u5e94\u65f6\uff0c\u8be5\u653b\u51fb\u4f1a\u5229\u7528\u89e3\u6790\u7a0b\u5e8f\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u7528\u5916\u884c\u7684\u8bdd\u8bf4\uff0c\u8fd9\u79cd\u88ab\u79f0\u4e3aNXNSAttack\u7684\u65b0\u653b\u51fb\u4f1a\u5f71\u54cd\u9012\u5f52DNS\u670d\u52a1\u5668\u548cDNS\u59d4\u6d3e\u8fc7\u7a0b\u3002\n\u9996\u5148\uff0c\u4ec0\u4e48\u662f\u9012\u5f52DNS\u670d\u52a1\u5668\uff1f\u5b83\u662f\u5c06DNS\u67e5\u8be2\u5411\u4e0a\u6e38\u4f20\u9012\u7684DNS\u7cfb\u7edf\uff0c\u76ee\u7684\u662f\u5c06\u5b83\u4eec\u4ece\u57df\u540d\u89e3\u6790\u5e76\u8f6c\u6362\u4e3aIP\u5730\u5740\u3002\u8f6c\u6362\u53d1\u751f\u5728\u6743\u5a01DNS\u670d\u52a1\u5668\u4e0a\uff0c\u8be5\u670d\u52a1\u5668\u5305\u542bDNS\u8bb0\u5f55\u7684\u526f\u672c\u5e76\u6709\u6743\u89e3\u6790\u5b83\u3002\u7136\u800c\uff0c\u5728DNS\u534f\u8bae\u5185\u5b58\u5728\u5141\u8bb8\u6743\u5a01DNS\u670d\u52a1\u5668\u5c06\u8be5\u64cd\u4f5c\u59d4\u6258\u7ed9\u66ff\u4ee3DNS\u670d\u52a1\u5668\u7684\u5b89\u5168\u673a\u5236\u3002\n\u8fd9\u5c31\u662f\u65b0\u7684NXNSAttack\u5e94\u8fd0\u800c\u751f\u7684\u5730\u65b9\u3002\u6839\u636e\u7279\u62c9\u7ef4\u592b\u5927\u5b66\u548c\u4ee5\u8272\u5217\u8d6b\u5179\u5229\u4e9a\u8de8\u5b66\u79d1\u4e2d\u5fc3\u7684\u7814\u7a76\u4eba\u5458\u7684\u8bf4\u6cd5\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6ee5\u7528\u6388\u6743\u8fc7\u7a0b\u5e76\u5c06\u5176\u90e8\u7f72\u5728DDoS\u653b\u51fb\u4e2d\u3002\u5728\u8fd9\u4e00\u53d1\u73b0\u4e4b\u540e\uff0c\u7814\u7a76\u4eba\u5458\u8fdb\u884c\u4e86\u201c\u8d1f\u8d23\u4efb\u7684\u534f\u8c03\u62ab\u9732\u7a0b\u5e8f\u201d\uff0c\u5e76\u53d1\u5e03\u4e86\u8be6\u7ec6\u7684\u62a5\u544a\u3002\u7531\u4e8e\u8fd9\u4e00\u62ab\u9732\uff0c\u8bb8\u591aDNS\u8f6f\u4ef6\u4f9b\u5e94\u5546\u548c\u670d\u52a1\u63d0\u4f9b\u5546\u5df2\u7ecf\u91c7\u53d6\u63aa\u65bd\u6765\u9632\u8303NXNSAttack\u7684\u7834\u574f\u6027\u63aa\u65bd\u3002\nNXNSAttack\u662f\u4e00\u4e2a\u65b0\u6f0f\u6d1e\uff0c\u5b83\u5229\u7528DNS\u9012\u5f52\u89e3\u6790\u5668\u5728\u63a5\u6536\u5305\u542b\u540d\u79f0\u670d\u52a1\u5668\u4f46\u4e0d\u5305\u542b\u5176\u76f8\u5e94IP\u5730\u5740(\u5373\u4e22\u5931\u80f6\u6c34\u8bb0\u5f55)\u7684NS\u5f15\u7528\u54cd\u5e94\u65f6\u7684\u64cd\u4f5c\u65b9\u5f0f\u3002\u5728\u5178\u578b\u89e3\u6790\u8fc7\u7a0b\u4e2d\u4ea4\u6362\u7684DNS\u6d88\u606f\u6570\u91cf\u5b9e\u9645\u4e0a\u53ef\u80fd\u6bd4\u7406\u8bba\u4e0a\u9884\u671f\u7684\u8981\u9ad8\u5f97\u591a\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5bf9\u540d\u79f0\u670d\u52a1\u5668\u7684IP\u5730\u5740\u8fdb\u884c\u4e86\u4e3b\u52a8\u89e3\u6790\u3002\u8fd9\u79cd\u4f4e\u6548\u6210\u4e3a\u4e00\u4e2a\u74f6\u9888\uff0c\u5e76\u53ef\u80fd\u88ab\u7528\u6765\u5bf9\u9012\u5f52\u89e3\u6790\u5668\u548c\u6743\u5a01\u670d\u52a1\u5668\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u53d1\u8d77\u6bc1\u706d\u6027\u653b\u51fb\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u4e24\u4e2a\u539f\u56e0\uff0cNXNSAttack\u4f3c\u4e4e\u6bd4NXDomain\u653b\u51fb\u66f4\u6709\u6548\u3002\u9996\u5148\uff0c\u8be5\u653b\u51fb\u5728\u9012\u5f52\u89e3\u6790\u5668\u4ea4\u6362\u7684\u6570\u636e\u5305\u6570\u91cf\u4e0a\u8fbe\u52301620\u500d\u4ee5\u4e0a\u7684\u653e\u5927\u500d\u6570\u3002\u5176\u6b21\uff0c\u9664\u4e86\u8d1f\u7f13\u5b58\u4e4b\u5916\uff0c\u8be5\u653b\u51fb\u8fd8\u4f1a\u4f7f\u201cNS\u201d\u89e3\u6790\u5668\u7f13\u5b58\u9971\u548c\u3002\n\u51e0\u4e2a\u6708\u6765\uff0c\u7814\u7a76\u4eba\u5458\u4e00\u76f4\u5728\u4e0d\u77e5\u75b2\u5026\u5730\u4e0e\u51e0\u5bb6DNS\u8f6f\u4ef6\u4f9b\u5e94\u5546\u3001\u5185\u5bb9\u4ea4\u4ed8\u7f51\u7edc\u548c\u6258\u7ba1DNS\u63d0\u4f9b\u5546\u5408\u4f5c\uff0c\u4ee5\u4fbf\u5728\u5168\u7403\u8303\u56f4\u5185\u5bf9DNS\u670d\u52a1\u5668\u5e94\u7528\u7f13\u89e3\u63aa\u65bd\u3002\n\u8fd9\u4e9b\u6f0f\u6d1e\u4f4d\u4e8eISC BIND(\u79f0\u4e3aCVE-2020-8616)\u3001NLnet\u5b9e\u9a8c\u5ba4\u672a\u7ed1\u5b9a(\u79f0\u4e3aCVE-2020-12662)\u3001PowerDNS(\u79f0\u4e3aCVE-2020-10995)\u548cCZ.NIC\u8282\u70b9\u89e3\u6790\u5668(CVE-2020-12667)\u4e2d\u3002\u4f46\u662f\uff0cCloudflare\u3001\u8c37\u6b4c\u3001\u4e9a\u9a6c\u900a\u3001\u7532\u9aa8\u6587(DYN)\u3001\u5fae\u8f6f\u3001IBM Quad9\u3001ICANN\u548cVerisign\u7684\u5546\u4e1aDNS\u670d\u52a1\u4e5f\u53d7\u5230\u5f71\u54cd\u3002\n\u597d\u6d88\u606f\u662f\u5df2\u7ecf\u63d0\u4f9b\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u8865\u4e01\u3002\u901a\u8fc7\u5e94\u7528\u5b83\u4eec\uff0c\u670d\u52a1\u5668\u7ba1\u7406\u5458\u5c06\u9632\u6b62\u653b\u51fb\u8005\u5229\u7528DNS\u59d4\u6d3e\u8fdb\u7a0b\u6df9\u6ca1\u5176\u4ed6DNS\u670d\u52a1\u5668\u3002\n2015\u5e74\uff0c\u4e92\u8054\u7f51DNS\u6839\u670d\u52a1\u5668\u4e0a\u7f55\u89c1\u7684DDoS\u88ab\u6ce8\u518c\u3002\u8fd9\u4e9b\u653b\u51fb\u5bfc\u81f4\u6bcf\u4e2aDNS\u6839\u540d\u79f0\u670d\u52a1\u5668\u6bcf\u79d2\u7ea6500\u4e07\u6b21\u67e5\u8be2\u3002DDoS\u80cc\u540e\u7684\u5a01\u80c1\u56e0\u7d20\u662f\u672a\u77e5\u7684\uff0c\u56e0\u4e3aIP\u6e90\u5730\u5740\u5f88\u5bb9\u6613\u88ab\u6b3a\u9a97\u3002\u6b64\u5916\uff0c\u653b\u51fb\u4e2d\u5e94\u7528\u7684\u6e90IP\u5730\u5740\u4ee5\u5de7\u5999\u548c\u4efb\u610f\u7684\u65b9\u5f0f\u6563\u5e03\u5230\u6574\u4e2aIPv4\u5730\u5740\u7a7a\u95f4\u3002", "note_en": "Another day, another discovery of vulnerabilities. A new malicious attack exploiting the way DNS recursive resolvers operate was just discovered.\n In detail, the attack exploits the way the resolvers work when receiving NS referral response that contains nameservers but without their corresponding IP addresses. In layman\u2019s terms, this new attack, which has been dubbed NXNSAttack, impacts recursive DNS servers and the process of DNS delegation.\n  First of all, what is a recursive DNS server? It is a DNS system that passes DNS queries upstream with the purpose of resolving and converting them from a domain name to an IP address. The conversions are happening on authoritative DNS servers, containing a copy of the DNS record and authorized to resolve it. There is, however, a safety mechanism within the DNS protocol which allows authoritative DNS servers to delegate this operation to alternative DNS servers.\n  This is where the new NXNSAttack comes in place. According to researchers at the Tel Aviv University and The Interdisciplinary Center in Herzliya, Israel, there is a way to abuse the delegation process and deploy it in DDoS attacks. Following this discovery, the researchers performed a \u201c responsible coordinated disclosure procedure\u201d, and released their detailed report. As a result of this disclosure, a number of DNS software vendors and service providers have adopted measures to protect against the destructive measures of the NXNSAttack.\n  The NXNSAttack is a new vulnerability that exploits the way DNS recursive resolvers operate when receiving NS referral response that contains nameservers but without their corresponding IP addresses (i.e., missing glue-records). The number of DNS messages exchanged in a typical resolution process might be much higher in practice than what is expected in theory, mainly due to a proactive resolution of name-servers\u2019 IP addresses. This inefficiency becomes a bottleneck and might be used to mount a devastating attack against either or both, recursive resolvers and authoritative servers.\n It is noteworthy that the NXNSAttack appears to be more effective than the NXDomain attack due to two reasons. First, the attack reaches an amplification factor of more than 1620x on the number of packets exchanged by the recursive resolver. And second, besides the negative cache, the attack also saturates the \u2019NS\u2019 resolver caches.\n The researchers have been working tirelessly for months with several DNS software vendors, content delivery networks, and managed DNS providers to apply mitigations to DNS servers on a global scale.\n  The vulnerabilities are located in ISC BIND, known as CVE-2020-8616); NLnet labs Unbound, known as CVE-2020-12662; PowerDNS, known as CVE-2020-10995, and CZ.NIC Knot Resolver, or CVE-2020-12667. However, commercial DNS services by Cloudflare, Google, Amazon, Oracle (DYN), Microsoft, IBM Quad9, ICANN, and Verisign are also impacted.\n The good news is that patches addressing the issues are already made available. By applying them, server admins will prevent attackers from exploiting the DNS delegation process to flood other DNS servers.\n  In 2015, a  rare DDoS on the Internet\u2019s DNS root servers was registered. The attacks caused about five million queries per second per DNS root name server. The threat actors behind the DDoS were unknown, as the IP source addresses were easily spoofed. In addition, the source IP addresses applied in the attacks were spread in a skillful and arbitrary manner throughout the IPv4 address space.", "posttime": "2020-05-20 20:13:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6f0f\u6d1e,severe,dns", "title": "NXNSAttack\uff1a\u4e25\u91cd\u7684DNS\u6f0f\u6d1e\u53ef\u80fd\u5bfc\u81f4DDoS\u653b\u51fb", "title_en": "NXNSAttack: Severe DNS Vulnerability Can Cause DDoS Attacks", "transed": 1, "url": "https://sensorstechforum.com/nxnsattack-dns-vulnerability-ddos/", "via": "", "real_tags": ["\u6f0f\u6d1e", "severe", "dns"]}, {"category": "", "categoryclass": "", "imagename": "3cd67f8c773c5df13d60d9d2e7f8918c.png", "infoid": 1002947, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "KVM\u662fLinux\u5185\u6838\u9644\u5e26\u7684\u865a\u62df\u5316\u6280\u672f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5141\u8bb8\u60a8\u5728\u5355\u4e2aLinux VM\u4e3b\u673a\u4e0a\u8fd0\u884c\u591a\u4e2a\u865a\u62df\u673a(VM)\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cVM\u79f0\u4e3a\u6765\u5bbe\u3002\u5982\u679c\u60a8\u66fe\u7ecf\u5728Linux\u4e0a\u4f7f\u7528\u8fc7QEMU\u6216VirtualBox-\u60a8\u5c31\u77e5\u9053KVM\u7684\u529f\u80fd\u3002\nKVM\u901a\u8fc7\u7279\u6b8a\u7684\u8bbe\u5907\u8282\u70b9/dev/kvm\u63d0\u4f9bAPI\u3002\u901a\u8fc7\u6253\u5f00\u8bbe\u5907\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97KVM\u5b50\u7cfb\u7edf\u7684\u53e5\u67c4\uff0c\u7136\u540e\u6267\u884cioctl syscall\u6765\u5206\u914d\u8d44\u6e90\u548c\u542f\u52a8VM\u3002\u4e00\u4e9bioctls\u8fd4\u56de\u4e5f\u53ef\u4ee5\u7531ioctls\u63a7\u5236\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u4e4c\u9f9f\u4e00\u76f4\u5f80\u4e0b\u722c\u3002\u4f46\u4e0d\u8981\u592a\u6df1\u3002KVM\u4e2d\u53ea\u6709\u51e0\u5c42API\uff1a\n/dev/kvm\u5c42\uff0c\u7528\u4e8e\u63a7\u5236\u6574\u4e2aKVM\u5b50\u7cfb\u7edf\u548c\u521b\u5efa\u65b0VM\u7684\u5c42\uff0c\nvCPU\u5c42\uff0c\u7528\u4e8e\u63a7\u5236\u5355\u4e2a\u865a\u62dfCPU\u7684\u64cd\u4f5c(\u4e00\u4e2a\u865a\u62df\u673a\u53ef\u4ee5\u5728\u591a\u4e2aVCPU\u4e0a\u8fd0\u884c)\u3002\n//KVM layerint KVM_FD=open(&#34\uff1b/dev/KVM&#34\uff1b\uff0cO_RDWR)\uff1bint version=ioctl(KVM_FD\uff0cKVM_GET_API_VERSION\uff0c0)\uff1bprintf(&#34\uff1bKVM\u7248\u672c\uff1a%d\\n&#34\uff1b\uff0cversion)\uff1b//\u521b\u5efaVMint VM_FD=ioctl(KVM_FD\uff0cKVM_CREATE_VM\uff0c0)\uff1b//\u521b\u5efaVM Memory#DEFINE RAM_SIZE 0x10000void*mem=mmap(NULL\uff0cRAM_SIZE\uff0cPROT_READ|PROT_WRITE\uff0cMAP_PRIVATE|MAP_ANONITY|MAP_NORESERVE\uff0c-1\uff0c0)\uff1bstruct KVM_USERSPACE_MEMORY_REGION mem={.lot=0\uff0c.guest_phys_addr=0\uff0c.memory_size=RAM_size\uff0c.userspace_addr=(Uintptr_T)mem\uff0c//\u521b\u5efaVCPUint vCPU_FD=ioctl(VM_FD\uff0cKVM_CREATE_vCPU\uff0c0)\uff1b\n\u6b64\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684VM\uff0c\u5206\u914d\u4e86\u5b83\u7684\u5185\u5b58\uff0c\u5e76\u4e3a\u5b83\u5206\u914d\u4e86\u4e00\u4e2avCPU\u3002\u8981\u4f7f\u6211\u4eec\u7684VM\u771f\u6b63\u8fd0\u884c\u67d0\u4e9b\u4e1c\u897f\uff0c\u6211\u4eec\u9700\u8981\u52a0\u8f7dVM\u6620\u50cf\u5e76\u6b63\u786e\u914d\u7f6eCPU\u5bc4\u5b58\u5668\u3002\n\u8fd9\u4e2a\u5f88\u7b80\u5355\u3002\u53ea\u9700\u8bfb\u53d6\u6587\u4ef6\u5e76\u5c06\u5176\u5185\u5bb9\u590d\u5236\u5230VM\u5185\u5b58\u4e2d\u5373\u53ef\u3002\u5f53\u7136\uff0cmmap\u5728\u8fd9\u91cc\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\nint bin_fd=open(&#34\uff1bguest.bin&#34\uff1b\uff0cO_RDONLY)\uff1bif(bin_fd&lt\uff1b0){fprintf(stderr\uff0c&#34\uff1b\u65e0\u6cd5\u6253\u5f00\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a%d\\n&#34\uff1b\uff0cerrno)\uff1breturn 1\uff1b}char*p=(char*)ram_start\uff1bfor(\uff1b\uff1b){int r=read(bin_fd\uff0cp\uff0c4096)\uff1bif(r&lt\uff1b=\n\u5047\u8bbeguest.bin\u5305\u542b\u5f53\u524dCPU\u4f53\u7cfb\u7ed3\u6784\u7684\u6709\u6548\u5b57\u8282\u7801\uff0c\u56e0\u4e3aKVM\u4e0d\u4f1a\u50cf\u8001\u5f0fVM\u4e3b\u673a\u90a3\u6837\u9010\u6761\u89e3\u91caCPU\u6307\u4ee4\u3002\u5b83\u8ba9\u771f\u5b9e\u7684CPU\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u4e14\u53ea\u622a\u53d6I/O\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u73b0\u4ee3VM\u7684\u8fd0\u884c\u6027\u80fd\u975e\u5e38\u597d\uff0c\u63a5\u8fd1\u88f8\u673a\uff0c\u9664\u975e\u60a8\u6267\u884cI/O\u7e41\u91cd\u7684\u64cd\u4f5c\u3002\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u6765\u5bbeVM\u201c\u5185\u6838\u201d\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5c1d\u8bd5\u8fd0\u884c\u5b83\uff1a\n##\u6784\u5efa\uff1a##as-32 guest.s-o guest.o#ld-m elf_i386--o\u683c\u5f0f\u4e8c\u8fdb\u5236-N-e_start-Ttext 0x10000-o Guest Guest.o#.globl_start.code16_start\uff1axorw%ax\uff0c%axloop\uff1aout%ax\uff0c$0x10 inc%ax JMP\u5faa\u73af\u3002\n\u5982\u679c\u6c47\u7f16\u4e0d\u662f\u60a8\u611f\u5174\u8da3\u7684\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a\u5f88\u5c0f\u768416\u4f4d\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5b83\u5728\u5faa\u73af\u4e2d\u9012\u589e\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5e76\u5c06\u503c\u8f93\u51fa\u5230I/O\u7aef\u53e30x10\u3002\n\u6211\u4eec\u6709\u610f\u5c06\u5176\u7f16\u8bd1\u4e3a\u4e00\u4e2a\u53e4\u8001\u768416\u4f4d\u5e94\u7528\u7a0b\u5e8f\uff0c\u56e0\u4e3aKVM vCPU start\u53ef\u4ee5\u5728\u591a\u79cd\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff0c\u4e0e\u771f\u6b63\u7684x86\u5904\u7406\u5668\u975e\u5e38\u76f8\u4f3c\u3002\u6700\u7b80\u5355\u7684\u6a21\u5f0f\u662f\u201c\u771f\u5b9e\u201d\u6a21\u5f0f\uff0c\u81ea\u4e0a\u4e2a\u4e16\u7eaa\u4ee5\u6765\u4e00\u76f4\u7528\u4e8e\u8fd0\u884c16\u4f4d\u4ee3\u7801\u3002\u5b9e\u6a21\u5f0f\u5bf9\u4e8e\u5185\u5b58\u5bfb\u5740\u975e\u5e38\u91cd\u8981\uff0c\u5b83\u662f\u76f4\u63a5\u7684\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u63cf\u8ff0\u7b26\u8868-\u4e3a\u5b9e\u6a21\u5f0f\u521d\u59cb\u5316\u5bc4\u5b58\u5668\u4f1a\u66f4\u7b80\u5355\uff1a\nstruct kvm_sregs sregs\uff1bioctl(vCPU_FD\uff0cKVM_GET_SREGS\uff0c&amp\uff1bsregs)\uff1b//\u7528\u96f6\u521d\u59cb\u5316\u9009\u62e9\u5668\u548cbase\u3002cs.selector=sregs.cs.base=sregs.ss.selector=sregs.ss.base=sregs.ds.selector=sregs.ds.base=sregs.selector=sregs.fs.selector=sregs.fs.selector=sregs.f.\u3002//\u521d\u59cb\u5316\u5e76\u4fdd\u5b58\u6b63\u5e38\u5bc4\u5b58\u5668struct KVM_regs regs\uff1bregs.rflag=2\uff1b//EFLAGS\u548cRFLAGSregs.lip=0\u4e2d\u4f4d1\u5fc5\u987b\u59cb\u7ec8\u8bbe\u7f6e\u4e3a1\uff1b//\u6211\u4eec\u7684\u4ee3\u7801\u4ece\u5730\u57400ioctl(vCPU_FD\uff0cKVM_SET_REGS\uff0c&amp\uff1bregs)\u8fd0\u884c\uff1b\n\u4ee3\u7801\u5df2\u52a0\u8f7d\uff0c\u5bc4\u5b58\u5668\u5df2\u51c6\u5907\u597d\u3002\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u4e86\u5417\uff1f\u8981\u8fd0\u884cVM\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e2avCPU\u83b7\u53d6\u4e00\u4e2a\u6307\u5411\u201c\u8fd0\u884c\u72b6\u6001\u201d\u7684\u6307\u9488\uff0c\u7136\u540e\u8fdb\u5165\u4e00\u4e2a\u5faa\u73af\uff0c\u5728\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0cVM\u4e00\u76f4\u5728\u8fd0\u884c\uff0c\u76f4\u5230\u5b83\u88abI/O\u6216\u5176\u4ed6\u64cd\u4f5c\u4e2d\u65ad\uff0c\u5728\u90a3\u91cc\u5b83\u5c06\u63a7\u5236\u6743\u4f20\u9012\u56de\u4e3b\u673a\u3002\nint runsz=ioctl(kvm_fd\uff0ckvm_get_vCPU_mmap_size\uff0c0)\uff1bstruct KVM_run*run=(struct KVM_run*)mmap(null\uff0crunsz\uff0cprot_read|prot_write\uff0cmap_share\uff0cvCPU_fd\uff0c0)\uff1bfor(\uff1b\uff1b){ioctl(vCPU_fd\uff0ckvm_run\uff0c0)\uff1bswitch(run-&gt\uff1bexit_ason){case KReason\u3002io.port\uff0c*(int*)((char*)(Run)+run-&gt\uff1bio.data_offset))\uff1bBreak\uff1bcase KVM_EXIT_SHUTDOWN\uff1areturn\uff1b}}\nIO\u7aef\u53e3\uff1a10\uff0c\u6570\u636e\uff1a0IO\u7aef\u53e3\uff1a10\uff0c\u6570\u636e\uff1a1IO\u7aef\u53e3\uff1a10\uff0c\u6570\u636e\uff1a2IO\u7aef\u53e3\uff1a10\uff0c\u6570\u636e\uff1a3IO\u7aef\u53e3\uff1a10\uff0c\u6570\u636e\uff1a4.\u3002\n\u5b83\u8d77\u4f5c\u7528\u4e86!\u3002\u5b8c\u6574\u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u8981\u70b9\u4e2d\u627e\u5230\uff1ahttps://gist.github.com/zserge/d68683f17c68709818f8baab0ded2d15(\u5982\u679c\u60a8\u53d1\u73b0\u9519\u8bef-\u6b22\u8fce\u8bc4\u8bba\uff01)\u3002\n\u5f00\u59cb\u5c06\u662f\u76f8\u540c\u7684-open/dev/kvm\uff0c\u521b\u5efaVM\u7b49\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5c06\u5728VM\u5c42\u4e2d\u518d\u6dfb\u52a0\u51e0\u4e2aioctls\uff0c\u4ee5\u6dfb\u52a0\u5468\u671f\u6027\u95f4\u9694\u8ba1\u65f6\u5668\u3001\u521d\u59cb\u5316TSS(\u82f1\u7279\u5c14\u82af\u7247\u6240\u9700)\u3001\u6dfb\u52a0\u4e2d\u65ad\u63a7\u5236\u5668\uff1a\nioctl(VM_FD\uff0cKVM_SET_TSS_ADDR\uff0c0xffffd000)\uff1buint64_t map_addr=0xffffc000\uff1bioctl(VM_FD\uff0cKVM_SET_IDENTITY_MAP_ADDR\uff0c&amp\uff1bmap_addr)\uff1bioctl(VM_FD\uff0cKVM_CREATE_IRQCHIP\uff0c0)\uff1bstruct KVM_PIT_CONFIG PIT={.flag=0}\uff1bioctl(\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u6539\u521d\u59cb\u5316\u5bc4\u5b58\u5668\u7684\u65b9\u5f0f\u3002Linux\u5185\u6838\u9700\u8981\u4fdd\u62a4\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5bc4\u5b58\u5668\u6807\u5fd7\u4e2d\u542f\u7528\u8be5\u6a21\u5f0f\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u7279\u6b8a\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u57fa\u3001\u9009\u62e9\u5668\u548c\u7c92\u5ea6\uff1a\nsregs.cs.base=0\uff1bsregs.cs.limit=~0\uff1bsregs.cs.g=1\uff1bsregs.ds.base=0\uff1bsregs.ds.limit=~0\uff1bsregs.ds.g=1\uff1bsregs.fs.base=0\uff1bsregs.fs.limit=~0\uff1bsregs.fs.g=1\uff1bsregs.gs.base=0\uff1bsregs.gs.limit=~0\uff1bsregs.gs.g=1\uff1bsregs.es.base=0\uff1bsregs.ss.limit=~0\uff1bsregs.ss.g=1\uff1bsregs.cs.db=1\uff1bsregs.ss.db=1\uff1bsregs.cr0|=1\uff1b//\u542f\u7528\u53d7\u4fdd\u62a4\u7684\u9002\u5ea6\u8bbe\u7f6e\u3002rflag=2\uff1bregs.lip=0x100000\uff1b//\u8fd9\u662f\u5185\u6838\u4ee3\u7801startsregs.rsi=0x10000\u7684\u4f4d\u7f6e\uff1b//\u8fd9\u662f\u542f\u52a8\u53c2\u6570\u5f00\u59cb\u7684\u4f4d\u7f6e\u3002\n\u5f15\u5bfc\u53c2\u6570\u662f\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5c06\u5185\u6838\u52a0\u8f7d\u5230\u5730\u57400\uff1f\u73b0\u5728\u662f\u4e86\u89e3\u6709\u5173bzImage\u683c\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\u7684\u65f6\u5019\u4e86\u3002\n\u5185\u6838\u6620\u50cf\u9075\u5faa\u7279\u6b8a\u7684\u201c\u5f15\u5bfc\u534f\u8bae\u201d\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u5e26\u6709\u5f15\u5bfc\u53c2\u6570\u7684\u56fa\u5b9a\u5934\u90e8\uff0c\u540e\u8ddf\u5b9e\u9645\u7684\u5185\u6838\u5b57\u8282\u7801\u3002\u8fd9\u91cc\u63cf\u8ff0\u4e86\u5f15\u5bfc\u6807\u5934\u7684\u683c\u5f0f\u3002\n\u8981\u5c06\u5185\u6838\u6620\u50cf\u6b63\u786e\u52a0\u8f7d\u5230\u6211\u4eec\u7684VM\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u8bfb\u53d6\u6574\u4e2abzImage\u6587\u4ef6\u3002\u6211\u4eec\u67e5\u770b\u504f\u79fb\u91cf0x1f1\uff0c\u5e76\u4ece\u4e2d\u83b7\u5f97\u8bbe\u7f6e\u6247\u533a\u7684\u6570\u91cf\u3002\u8fd9\u662f\u6211\u4eec\u5c06\u8df3\u8fc7\u7684\u5185\u5bb9\uff0c\u4ee5\u67e5\u627e\u5185\u6838\u4ee3\u7801\u7684\u8d77\u70b9\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5c06\u628abzImage\u5f00\u5934\u7684\u5f15\u5bfc\u53c2\u6570\u590d\u5236\u5230VM RAM\u4e2d\u7684\u5f15\u5bfc\u53c2\u6570\u504f\u79fb\u91cf(0x10000)\u3002\n\u4f46\u5373\u4f7f\u8fd9\u6837\u505a\u4e5f\u662f\u4e0d\u591f\u7684\u3002\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u4fee\u8865VM\u7684\u5f15\u5bfc\u53c2\u6570\uff0c\u4ee5\u5f3a\u5236VGA\u6a21\u5f0f\uff0c\u5e76\u521d\u59cb\u5316\u547d\u4ee4\u884c\u6307\u9488\u3002\n\u6211\u4eec\u5e0c\u671b\u5185\u6838\u5c06\u65e5\u5fd7\u6253\u5370\u5230ttyS0\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u62e6\u622aI/O\uff0c\u800c\u6211\u4eec\u7684VM\u4e3b\u673a\u5c06\u628a\u5b83\u6253\u5370\u5230stdout\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u5c06\u201cconsole=ttyS0\u201d\u9644\u52a0\u5230\u5185\u6838\u547d\u4ee4\u884c\u3002\n\u4f46\u662f\uff0c\u5373\u4f7f\u8fd9\u6837\u505a\u4e86\uff0c\u6211\u4eec\u4e5f\u4e0d\u4f1a\u5f97\u5230\u4efb\u4f55\u7ed3\u679c\u3002\u6211\u5fc5\u987b\u4e3a\u5185\u6838\u8bbe\u7f6e\u4e00\u4e2a\u5047\u7684CPUID\u624d\u80fd\u542f\u52a8(https://www.kernel.org/doc/Documentation/virtual/kvm/cpuid.txt).\u3002\u6700\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u662f\uff0c\u6211\u6784\u5efa\u7684\u5185\u6838\u4f9d\u8d56\u4e8e\u6b64\u4fe1\u606f\u6765\u5224\u65ad\u5b83\u662f\u5728\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u5185\u90e8\u8fd0\u884c\uff0c\u8fd8\u662f\u5728\u88f8\u673a\u4e0a\u8fd0\u884c\u3002\n\u6211\u4f7f\u7528\u7684\u662f\u4f7f\u7528\u201c\u5fae\u578b\u673a\u201d\u914d\u7f6e\u7f16\u8bd1\u7684\u5185\u6838\uff0c\u5e76\u8c03\u6574\u4e86\u4e00\u4e9b\u914d\u7f6e\u6807\u5fd7\u4ee5\u652f\u6301\u4e32\u884c\u63a7\u5236\u53f0\u548cvirtio\u3002\n\u4fee\u6539\u540e\u7684kvm\u4e3b\u673a\u548c\u6d4b\u8bd5\u5185\u6838\u6620\u50cf\u7684\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1ahttps://gist.github.com/zserge/ae9098a75b2b83a1299d19b79b5fe488\u3002\nLINUX\u7248\u672c5.4.39(serge@Melete)(GCC\u7248\u672c7.4.0(Ubuntu 7.4.0-1ubuntu1~16.04~ppa1))#12 Fri May 8 16\uff1a04\uff1a00 CEST 2020\u547d\u4ee4\u884c\uff1aconsole=ttyS0\u68c0\u6d4b\u5230\u82f1\u7279\u5c14\u9891\u8c31v2\u635f\u574f\u5fae\u7801\uff1b\u7981\u7528\u63a8\u6d4b\u63a7\u4ef6\u7981\u7528\u5feb\u901f\u5b57\u7b26\u4e32\u64cd\u4f5cx86/fpu\uff1a\u652f\u6301XSAVE\u529f\u80fd0x001\uff1a&#39\uff1bx87\u6d6e\u70b9\u5bc4\u5b58\u5668&#39\uff1bx86/fpu\uff1a\u652f\u6301\u3002x86/fPU\uff1axSTATE_OFFSET[2]\uff1a576\uff0cxSTATE_SIZES[2]\uff1a256x86/fPU\uff1a\u542f\u7528xstate\u529f\u80fd0x7\uff0c\u4e0a\u4e0b\u6587\u5927\u5c0f\u4e3a832\u5b57\u8282\uff0c\u4f7f\u7528&#39\uff1b\u6807\u51c6&#39\uff1b\u683c\u5f0f\u3002BIOS\u63d0\u4f9b\u7684\u7269\u7406\u5185\u5b58\u6620\u5c04\uff1aBIOS-88\uff1a[Mem 0x0000000000000000-0x000000000009efff]usableBIOS-88\uff1a[Mem 0x000000000000100000-0x00000000030fffff]usableNX(\u7981\u7528\u6267\u884c)\u4fdd\u62a4\uff1aactietsc\uff1a\u4f7f\u7528PITtsc\u5feb\u901fTSC\u6821\u51c6c\uff1a\u68c0\u6d4b\u52302594.055 MHz\u5904\u7406\u5668last_pfn=0x3100 max_Arch_pfn=0x40000\u3002[\u5185\u5b580x0000000000100000-0x00000000030fffff]\u4e0d\u53ef\u7528\u8303\u56f4\u5185\u7684\u5f52\u96f6\u7ed3\u6784\u9875\uff1a20322\u9875\u521d\u59cb\u5316\u5b89\u88c5\u8282\u70b90[\u5185\u5b580x0000000000001000-0x00000000030fffff][\u5185\u5b580x03100000-0xffffffff]\u53ef\u7528\u4e8ePCI\u8bbe\u5907\u9501\u6e90\uff1a\u7cbe\u5316Jiffies\uff1a\u63a9\u7801\uff1a0xffffffffff max_Cycle\uff1a0xffffffff\uff0cmax_idle_ns\uff1a7645519600211568 ns\u6784\u5efa1\u4e2a\u533a\u57df\u5217\u8868\uff0c\u79fb\u52a8\u6027\u5206\u7ec4\u3002\u603b\u9875\u6570\uff1a12253\u5185\u6838\u547d\u4ee4\u884c\uff1aConsole=ttyS0Dentry\u7f13\u5b58\u54c8\u5e0c\u8868\u6761\u76ee\uff1a8192(\u987a\u5e8f\uff1a4,65536\u5b57\u8282\uff0c\u7ebf\u6027)inode-cache\u54c8\u5e0c\u8868\u6761\u76ee\uff1a4096(\u987a\u5e8f\uff1a3,32768\u5b57\u8282\uff0c\u7ebf\u6027)mem\u81ea\u52a8\u521d\u59cb\u5316\uff1aSTACK\uff1aOFF\uff0c\u5806\u5206\u914d\uff1aOFF\uff0c\u5806\u7a7a\u95f2\uff1aOFF\u5185\u5b58\uff1a37216K/49784K\u53ef\u7528(4097K\u5185\u6838\u4ee3\u7801\uff0c292K rwdata\uff0c244K rodata\uff0c832K in.\u3002\u9884\u5206\u914dirqs\uff1a16\u63a7\u5236\u53f0\uff1aCOLOR VGA+142x228 printk\uff1a\u63a7\u5236\u53f0[ttyS0]\u5df2\u542f\u7528APIC\uff1aACPI MADT\u6216MP\u8868\u672a\u68c0\u6d4b\u5230APIC\uff1a\u5207\u6362\u5230\u6ca1\u6709\u914d\u7f6e\u7684\u865a\u62df\u7ebf\u8def\u6a21\u5f0f\u8bbe\u7f6e\u7531\u4e8e\u8df3\u8fc7IO-APIC\u8bbe\u7f6e\u800c\u672a\u542f\u7528\u4e2d\u65ad\u91cd\u65b0\u6620\u5c04\u65f6\u949f\u6765\u6e90\uff1atsc-arly\uff1a\u63a9\u7801\uff1a0xffffffffffffffff max_Cycle\uff1a0x25644bd94a2\uff0cmax_idle_ns\u30025188.11 bogoMIPS(lpj=10376220)PID_MAX\uff1a\u9ed8\u8ba4\u503c\uff1a4096\u6700\u5c0f\u503c\uff1a301\u6302\u8f7d\u7f13\u5b58\u54c8\u5e0c\u8868\u6761\u76ee\uff1a512(\u987a\u5e8f\uff1a0,4096\u5b57\u8282\uff0c\u7ebf\u6027)\u6302\u8f7d\u70b9\u7f13\u5b58\u54c8\u5e0c\u8868\u6761\u76ee\uff1a512(\u987a\u5e8f\uff1a0,4096\u5b57\u8282\uff0c\u7ebf\u6027)\u7981\u7528\u5feb\u901f\u5b57\u7b26\u4e32\u64cd\u4f5c\u672b\u7ea7ITLB\u6761\u76ee\uff1a4KB 64\uff0c2MB 8\uff0c4MB 8\u672b\u7ea7dTLB\u6761\u76ee\uff1a4KB 64\uff0c2MB 0\uff0c4MB 0\uff0c1 GB 4CPU\uff1a\u82f1\u7279\u5c1406/\u3002\u6ca1\u6709\u53ef\u7528\u7684\u7f13\u89e3\u63aa\u65bd\uff01\u63a8\u6d4b\u6027\u5b58\u50a8\u7ed5\u8fc7\uff1aVulnerableTAA\uff1a\u7f13\u89e3\u63aa\u65bd\uff1a\u6e05\u9664CPU\u7f13\u51b2\u533aMDS\uff1a\u7f13\u89e3\u63aa\u65bd\uff1a\u6e05\u9664CPU\u7f13\u51b2\u533a\u6027\u80fd\u4e8b\u4ef6\uff1aBroadwell\u4e8b\u4ef6\u300116\u6df1LBR\u3001\u82f1\u7279\u5c14PMU\u9a71\u52a8\u7a0b\u5e8f.\u3002\n\u663e\u7136\uff0c\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u76f8\u5f53\u65e0\u7528\u7684\u7ed3\u679c-\u6ca1\u6709initrd\u6216\u6839\u5206\u533a\uff0c\u6ca1\u6709\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5185\u6838\u4e2d\u8fd0\u884c\u7684\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u5b83\u4ecd\u7136\u8bc1\u660e\u4e86KVM\u5e76\u6ca1\u6709\u90a3\u4e48\u53ef\u6015\uff0c\u800c\u4e14\u662f\u4e00\u4e2a\u76f8\u5f53\u5f3a\u5927\u7684\u5de5\u5177\u3002\n\u8981\u4f7f\u5176\u8fd0\u884c\u6b63\u786e\u7684Linux\uff0cVM\u4e3b\u673a\u5fc5\u987b\u66f4\u52a0\u5148\u8fdb-\u6211\u4eec\u9700\u8981\u4e3a\u78c1\u76d8\u3001\u952e\u76d8\u548c\u663e\u5361\u6a21\u62df\u591a\u4e2aI/O\u9a71\u52a8\u7a0b\u5e8f\u3002\u4f46\u662f\u4e00\u822c\u7684\u65b9\u6cd5\u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e8einitrd\uff0c\u6211\u4eec\u8981\u6620\u5c04\u7684\u662f\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u884c\u9009\u9879\u3002\u5bf9\u4e8e\u78c1\u76d8\uff0c\u6211\u4eec\u5fc5\u987b\u62e6\u622aI/O\u5e76\u6b63\u786e\u54cd\u5e94\u3002\n\u4f46\u662f\uff0c\u6ca1\u6709\u4eba\u5f3a\u8feb\u60a8\u76f4\u63a5\u4f7f\u7528KVM\u3002\u6709libvirt\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u53cb\u597d\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u4f4e\u7ea7\u865a\u62df\u5316\u6280\u672f\uff0c\u5982KVM\u6216BHyve\u3002\n\u5982\u679c\u60a8\u6709\u5174\u8da3\u4e86\u89e3\u66f4\u591a\u5173\u4e8eKVM\u7684\u77e5\u8bc6\uff0c\u6211\u5efa\u8bae\u60a8\u67e5\u770bkvmtool\u6e90\u4ee3\u7801\u3002\u5b83\u4eec\u6bd4QEMU\u5bb9\u6613\u8bfb\u5f97\u591a\uff0c\u6574\u4e2a\u9879\u76ee\u4e5f\u5c0f\u5f97\u591a\uff0c\u4e5f\u7b80\u5355\u5f97\u591a\u3002", "note_en": "KVM is a virtualization technology that comes with the Linux kernel. In other words, it allows you to run multiple virtual machines (VMs) on a single Linux VM host. VMs in this case are known as guests. If you ever used QEMU or VirtualBox on Linux - you know what KVM is capable of.\n   KVM provides an  API via a special device node -  /dev/kvm. By opening a device you obtain a handle to the KVM subsystem and later make ioctl syscalls to allocate resources and launch VMs. Some ioctls return file descriptors that can also be controlled by ioctls. Turtles all the way down. But not too deep. There are only a few layers of APIs in KVM:\n /dev/kvm layer, the one used to control the whole KVM subsystem and to create new VMs,\n  VCPU layer, the one used to control operation of a single virtual CPU (one VM can run on a multiple VCPUs)\n   // KVM layerint kvm_fd = open(&#34;/dev/kvm&#34;, O_RDWR);int version = ioctl(kvm_fd, KVM_GET_API_VERSION, 0);printf(&#34;KVM version: %d\\n&#34;, version);// Create VMint vm_fd = ioctl(kvm_fd, KVM_CREATE_VM, 0);// Create VM Memory#define RAM_SIZE 0x10000void *mem = mmap(NULL, RAM_SIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_NORESERVE, -1, 0);struct kvm_userspace_memory_region mem = {\t.slot = 0,\t.guest_phys_addr = 0,\t.memory_size = RAM_SIZE,\t.userspace_addr = (uintptr_t) mem,};ioctl(vm_fd, KVM_SET_USER_MEMORY_REGION, &amp;mem);// Create VCPUint vcpu_fd = ioctl(vm_fd, KVM_CREATE_VCPU, 0);\n At this point, we\u2019ve created a new VM, allocated its memory and assigned one VCPU for it. To make our VM actually run something we need to load VM image and configure CPU registers properly.\n  This one is simple. Just read a file and copy its contents into the VM memory. Of course,  mmap might be a good option here, too.\n int bin_fd = open(&#34;guest.bin&#34;, O_RDONLY);if (bin_fd &lt; 0) {\tfprintf(stderr, &#34;can not open binary file: %d\\n&#34;, errno);\treturn 1;}char *p = (char *)ram_start;for (;;) {\tint r = read(bin_fd, p, 4096);\tif (r &lt;= 0) {\t\tbreak;\t}\tp += r;}close(bin_fd);\n It is assumed that  guest.bin contains valid bytecode for the current CPU architecture, because KVM does not interpret CPU instructions one by one, like old-school VM hosts did. It lets the real CPU do the calculations and only intercepts the I/O. That\u2019s why modern VMs run at a very decent performance, close to bare metal, unless you do I/O heavy operations.\n Here\u2019s a tiny guest VM \u201ckernel\u201d, that we will try to run first:\n ## Build it:## as -32 guest.S -o guest.o#\tld -m elf_i386 --oformat binary -N -e _start -Ttext 0x10000 -o guest guest.o#.globl _start.code16_start: xorw %ax, %axloop:\tout %ax, $0x10\tinc %ax\tjmp loop\n If assembly is out of your interest, it\u2019s a tiny 16-bit executable that increments a register in a loop and outputs the value into the I/O port 0x10.\n It was deliberate that we compiled it as an archaic 16-bit app, because the KVM VCPU starts can run in multiple modes, much like the real x86 processor. The simplest mode is \u201creal\u201d mode, which has been used to run 16-bit code from the last century. Real mode is notable for memory addressing, it\u2019s direct instead of using descriptor tables - it would be simpler to initialize our register for real mode:\n struct kvm_sregs sregs;ioctl(vcpu_fd, KVM_GET_SREGS, &amp;sregs);// Initialize selector and base with zerossregs.cs.selector = sregs.cs.base = sregs.ss.selector = sregs.ss.base = sregs.ds.selector = sregs.ds.base = sregs.es.selector = sregs.es.base = sregs.fs.selector = sregs.fs.base = sregs.gs.selector = 0;// Save special registersioctl(vcpu_fd, KVM_SET_SREGS, &amp;sregs);// Initialize and save normal registersstruct kvm_regs regs;regs.rflags = 2; // bit 1 must always be set to 1 in EFLAGS and RFLAGSregs.rip = 0; // our code runs from address 0ioctl(vcpu_fd, KVM_SET_REGS, &amp;regs);\n  Code is loaded, registers are ready. Shall we start? To run the VM we need to get a pointer to the \u201crun state\u201d for each VCPU and then enter a loop where the VM is run until it\u2019s interrupted by I/O or other operations, where it passes the control back to the host.\n int runsz = ioctl(kvm_fd, KVM_GET_VCPU_MMAP_SIZE, 0);struct kvm_run *run = (struct kvm_run *) mmap(NULL, runsz, PROT_READ | PROT_WRITE, MAP_SHARED, vcpu_fd, 0);for (;;) {\tioctl(vcpu_fd, KVM_RUN, 0);\tswitch (run-&gt;exit_reason) {\tcase KVM_EXIT_IO:\t\tprintf(&#34;IO port: %x, data: %x\\n&#34;, run-&gt;io.port, *(int *)((char *)(run) + run-&gt;io.data_offset));\t\tbreak;\tcase KVM_EXIT_SHUTDOWN:\t\treturn;\t}}\n  IO port: 10, data: 0IO port: 10, data: 1IO port: 10, data: 2IO port: 10, data: 3IO port: 10, data: 4...\n It works! The complete sources are available in this gist:  https://gist.github.com/zserge/d68683f17c68709818f8baab0ded2d15 (if you spot a mistake - comments are welcome!)\n   The beginning would be the same - open /dev/kvm, create a VM etc. However, we will need a few more ioctls in the VM layer to add a periodic interval timer, to initialize TSS (required for Intel chips), to add interrupt controller:\n ioctl(vm_fd, KVM_SET_TSS_ADDR, 0xffffd000);uint64_t map_addr = 0xffffc000;ioctl(vm_fd, KVM_SET_IDENTITY_MAP_ADDR, &amp;map_addr);ioctl(vm_fd, KVM_CREATE_IRQCHIP, 0);struct kvm_pit_config pit = { .flags = 0 };ioctl(vm_fd, KVM_CREATE_PIT2, &amp;pit);\n Also, we will need to change the way we initialize the registers. Linux kernel requires a protected mode, so we enable that in register flags and initialize base, selector, granularity for each special register:\n sregs.cs.base = 0;sregs.cs.limit = ~0;sregs.cs.g = 1;sregs.ds.base = 0;sregs.ds.limit = ~0;sregs.ds.g = 1;sregs.fs.base = 0;sregs.fs.limit = ~0;sregs.fs.g = 1;sregs.gs.base = 0;sregs.gs.limit = ~0;sregs.gs.g = 1;sregs.es.base = 0;sregs.es.limit = ~0;sregs.es.g = 1;sregs.ss.base = 0;sregs.ss.limit = ~0;sregs.ss.g = 1;sregs.cs.db = 1;sregs.ss.db = 1;sregs.cr0 |= 1; // enable protected moderegs.rflags = 2;regs.rip = 0x100000; // This is where our kernel code startsregs.rsi = 0x10000; // This is where our boot parameters start\n What are the boot parameters and why can\u2019t we just load kernel at address zero? Time to learn more about the bzImage format.\n The kernel image follows a special \u201cboot protocol\u201d and there is a fixed header with boot parameters, followed by the actual kernel bytecode. The format of the boot header is described  here.\n  To properly load kernel image into our VM we need to read the whole bzImage file first. The we look at the offset 0x1f1 and get the number of setup sectors from there. This is what we shall skip to find where the kernel code starts. Additionally, we will copy boot parameters from the beginning of the bzImage into the boot parameters offset in VM RAM (0x10000).\n But even doing so is not enough. We will have to patch the boot parameters for our VM, to force the VGA mode, and to initialize the command line pointer.\n We want our kernel to print logs to ttyS0, so that we could intercept the I/O and our VM host would print it to stdout. To achieve this we need to append \u201cconsole=ttyS0\u201d to the kernel command line.\n But even after doing so, we won\u2019t get any result. I had to set a fake CPU ID to our kernel to start ( https://www.kernel.org/doc/Documentation/virtual/kvm/cpuid.txt). Most likely the kernel I\u2019ve built was relying on this information to tell if it\u2019s running inside a hypervisor, or on bare metal.\n I was using a kernel compiled with \u201ctiny\u201d config, and adjusted a few configuration flags to support serial console and virtio.\n The full code of the modified KVM host and test kernel image is available as a gist:  https://gist.github.com/zserge/ae9098a75b2b83a1299d19b79b5fe488\n  Linux version 5.4.39 (serge@melete) (gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~16.04~ppa1)) #12 Fri May 8 16:04:00 CEST 2020Command line: console=ttyS0Intel Spectre v2 broken microcode detected; disabling Speculation ControlDisabled fast string operationsx86/fpu: Supporting XSAVE feature 0x001: &#39;x87 floating point registers&#39;x86/fpu: Supporting XSAVE feature 0x002: &#39;SSE registers&#39;x86/fpu: Supporting XSAVE feature 0x004: &#39;AVX registers&#39;x86/fpu: xstate_offset[2]: 576, xstate_sizes[2]: 256x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using &#39;standard&#39; format.BIOS-provided physical RAM map:BIOS-88: [mem 0x0000000000000000-0x000000000009efff] usableBIOS-88: [mem 0x0000000000100000-0x00000000030fffff] usableNX (Execute Disable) protection: activetsc: Fast TSC calibration using PITtsc: Detected 2594.055 MHz processorlast_pfn = 0x3100 max_arch_pfn = 0x400000000x86/PAT: Configuration [0-7]: WB WT UC- UC WB WT UC- UCUsing GB pages for direct mappingZone ranges: DMA32 [mem 0x0000000000001000-0x00000000030fffff] Normal emptyMovable zone start for each nodeEarly memory node ranges node 0: [mem 0x0000000000001000-0x000000000009efff] node 0: [mem 0x0000000000100000-0x00000000030fffff]Zeroed struct page in unavailable ranges: 20322 pagesInitmem setup node 0 [mem 0x0000000000001000-0x00000000030fffff][mem 0x03100000-0xffffffff] available for PCI devicesclocksource: refined-jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645519600211568 nsBuilt 1 zonelists, mobility grouping on. Total pages: 12253Kernel command line: console=ttyS0Dentry cache hash table entries: 8192 (order: 4, 65536 bytes, linear)Inode-cache hash table entries: 4096 (order: 3, 32768 bytes, linear)mem auto-init: stack:off, heap alloc:off, heap free:offMemory: 37216K/49784K available (4097K kernel code, 292K rwdata, 244K rodata, 832K init, 916K bss, 12568K reserved, 0K cma-reserved)Kernel/User page tables isolation: enabledNR_IRQS: 4352, nr_irqs: 24, preallocated irqs: 16Console: colour VGA+ 142x228printk: console [ttyS0] enabledAPIC: ACPI MADT or MP tables are not detectedAPIC: Switch to virtual wire mode setup with no configurationNot enabling interrupt remapping due to skipped IO-APIC setupclocksource: tsc-early: mask: 0xffffffffffffffff max_cycles: 0x25644bd94a2, max_idle_ns: 440795207645 nsCalibrating delay loop (skipped), value calculated using timer frequency.. 5188.11 BogoMIPS (lpj=10376220)pid_max: default: 4096 minimum: 301Mount-cache hash table entries: 512 (order: 0, 4096 bytes, linear)Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes, linear)Disabled fast string operationsLast level iTLB entries: 4KB 64, 2MB 8, 4MB 8Last level dTLB entries: 4KB 64, 2MB 0, 4MB 0, 1GB 4CPU: Intel 06/3d (family: 0x6, model: 0x3d, stepping: 0x4)Spectre V1 : Mitigation: usercopy/swapgs barriers and __user pointer sanitizationSpectre V2 : Spectre mitigation: kernel not compiled with retpoline; no mitigation available!Speculative Store Bypass: VulnerableTAA: Mitigation: Clear CPU buffersMDS: Mitigation: Clear CPU buffersPerformance Events: Broadwell events, 16-deep LBR, Intel PMU driver....\n Obviously, it\u2019s still a fairly useless result - there is no initrd or root partition, no actual apps that could run in this kernel, but still it proves that KVM is not that scary and a rather powerful tool.\n  To make it run a proper Linux, the VM host has to be much more advanced - we need to simulate multiple I/O drivers for disks, keyboard, graphics. But the general approach would remain the same, for example for initrd we would map is similarly to the command line options. For disks we would have to intercept I/O and respond properly.\n However, no one forces you to use KVM directly. There is  libvirt, a nice friendly wrapper for low-level virtualization techniques such as KVM or BHyve.\n If you are interested to learn more about KVM, I would suggest to look at the  kvmtool sources. They are much easier to read than QEMU, and the whole project is much smaller and simpler.", "posttime": "2020-05-20 19:43:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,host,kvm", "title": "\u51e0\u884c\u4ee3\u7801\u4e2d\u7684KVM\u4e3b\u673a", "title_en": "KVM host in a few lines of code", "transed": 1, "url": "https://zserge.com/posts/kvm/", "via": "", "real_tags": ["\u4ee3\u7801", "host", "kvm"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002946, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u4e00\u4f4d\u8d1f\u8d23\u8f7d\u4eba\u822a\u5929\u9879\u76ee\u7684\u9886\u5bfc\u4eba\u7269\u7a81\u7136\u8f9e\u804c\uff0c\u5c31\u5728\u51e0\u5929\u524d\uff0c\u7f8e\u56fd\u5c06\u628a\u5b87\u822a\u5458\u4ece\u7f8e\u56fd\u672c\u571f\u9001\u56de\u592a\u7a7a\uff0c\u8fd9\u662f\u81ea\u8fd1\u5341\u5e74\u524d\u822a\u5929\u98de\u673a\u9879\u76ee\u9000\u5f79\u4ee5\u6765\u7684\u7b2c\u4e00\u6b21\u3002\n\u7f8e\u56fd\u5b87\u822a\u5c40\u8868\u793a\uff0c\u8d1f\u8d23\u8f7d\u4eba\u822a\u5929\u90e8\u95e8\u7684\u5b98\u5458\u9053\u683c\u00b7\u6d1b\u5f17\u7f57(Doug Loverro)\u5df2\u4e8e\u5468\u4e00\u79bb\u5f00\u3002\n\u4e0b\u5468\uff0c\u57c3\u9686\u00b7\u9a6c\u65af\u514b(Elon Musk)\u7684SpaceX\u5c06\u628a\u4e24\u540d\u7f8e\u56fd\u5b87\u822a\u5458\u4ece\u4f5b\u7f57\u91cc\u8fbe\u5dde\u9001\u5f80\u56fd\u9645\u7a7a\u95f4\u7ad9\uff0c\u8fdb\u884c\u5907\u53d7\u671f\u5f85\u7684\u201c\u9f99\u201d(Dragon)\u592a\u7a7a\u8231\u7684\u8bd5\u98de\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5468\u4e8c\u8868\u793a\uff0c\u53d1\u5c04\u5c06\u6309\u7167\u8be5\u65f6\u95f4\u8868\u8fdb\u884c\u3002\u672c\u5468\u665a\u4e9b\u65f6\u5019\u8ba1\u5212\u8fdb\u884c\u4e00\u6b21\u91cd\u8981\u7684\u53d1\u5c04\u51c6\u5907\u5ba1\u67e5\u3002\n\u201c\u4e0b\u5468\u5c06\u6807\u5fd7\u7740\u4eba\u7c7b\u822a\u5929\u65b0\u7eaa\u5143\u7684\u5f00\u59cb\uff0c\u5b87\u822a\u5458\u9c8d\u52c3\u00b7\u672c\u80af(Bob Behnken)\u548c\u9053\u683c\u00b7\u8d6b\u5c14\u5229(Doug Hurley)\u5c06\u524d\u5f80\u56fd\u9645\u7a7a\u95f4\u7ad9\uff0c\u201d\u7f8e\u56fd\u822a\u5929\u5c40\u7684\u4e00\u4efd\u58f0\u660e\u8bf4\u3002\u8fd9\u6b21\u8bd5\u98de\u5c06\u662f\u4e00\u4e2a\u5386\u53f2\u6027\u548c\u91cd\u5927\u7684\u65f6\u523b\uff0c\u5b83\u5c06\u89c1\u8bc1\u4eba\u7c7b\u822a\u5929\u56de\u5230\u6211\u4eec\u7684\u56fd\u5bb6\uff0c\u800c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u7537\u7537\u5973\u5973\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5949\u732e\u7cbe\u795e\u4f7f\u8fd9\u9879\u4efb\u52a1\u6210\u4e3a\u53ef\u80fd\u3002\u201c\u3002\n\u6309\u8ba1\u5212\uff0c\u8fd9\u4e9b\u4eba\u5c06\u4e8e\u4e0b\u5468\u4e09\u4e58\u5750SpaceX\u9f99\u98de\u8239\u4ece\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7684\u5361\u7eb3\u7ef4\u62c9\u5c14\u89d2\u53d1\u5c04\u5347\u7a7a\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5468\u4e8c\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff0c\u6d1b\u5f17\u7f57\u8f9e\u53bb\u4e86\u8d1f\u8d23\u4eba\u7c7b\u63a2\u7d22\u548c\u64cd\u4f5c\u7684\u526f\u5c40\u957f\u4e00\u804c\uff0c\u4ece\u5468\u4e00\u8d77\u751f\u6548\uff0c\u5e76\u6307\u51fa\u6d1b\u5f17\u7f57\u7684\u526f\u624b\u80af\u00b7\u9c8d\u5c14\u7d22\u514b\u65af(Ken Bowersox)\u5c06\u62c5\u4efb\u4ee3\u7406\u526f\u5c40\u957f\u3002\u4e00\u4f4d\u53d1\u8a00\u4eba\u6ca1\u6709\u7acb\u5373\u56de\u5e94\u5a92\u4f53\u5173\u4e8e\u6d1b\u5f17\u7f57\u7a81\u7136\u79bb\u804c\u7684\u80cc\u666f\u7684\u8be2\u95ee\u3002\n\u6d1b\u5f17\u7f57\u8fc7\u53bb\u66fe\u662f\u4e94\u89d2\u5927\u697c\u5b98\u5458\u3002\u4ed6\u5728\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40\u62c5\u4efb\u8f7d\u4eba\u822a\u5929\u4efb\u52a1\u5df2\u7ecf\u6709\u51e0\u4e2a\u6708\u4e86\u3002\n\u534e\u76db\u987f\u90ae\u62a5\u63f4\u5f15\u4e24\u540d\u77e5\u60c5\u4eba\u58eb\u7684\u8bdd\u62a5\u9053\uff0c\u4ed6\u8f9e\u804c\u4e4b\u524d\uff0c\u7f8e\u56fd\u5b87\u822a\u5c40\u6700\u8fd1\u5728\u91c7\u8d2d\u4e00\u8258\u80fd\u591f\u8ba9\u4eba\u7c7b\u767b\u4e0a\u6708\u7403\u7684\u822a\u5929\u5668\u65f6\u8fdd\u53cd\u4e86\u4e00\u9879\u89c4\u5b9a\u3002\n\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u9009\u62e9\u4e86\u4e09\u5bb6\u79c1\u4eba\u592a\u7a7a\u516c\u53f8\u6765\u9886\u5bfc\u5373\u5c06\u5230\u6765\u7684\u767b\u6708\u8ba1\u5212\u7684\u6708\u7403\u7740\u9646\u5668\u7684\u5f00\u53d1\u3002\n\u8fd9\u4e09\u5bb6\u516c\u53f8\u5206\u522b\u662f\u4e9a\u9a6c\u900a\u9996\u5e2d\u6267\u884c\u5b98\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u62e5\u6709\u7684Blue Origin\uff1b\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u7684SpaceX\uff1b\u4ee5\u53ca\u603b\u90e8\u4f4d\u4e8e\u963f\u62c9\u5df4\u9a6c\u5dde\u4ea8\u8328\u7ef4\u5c14\u7684Dynetics\u3002\u8fd9\u4e09\u5bb6\u516c\u53f8\u73b0\u5728\u6b63\u5728\u76f8\u4e92\u7ade\u4e89\uff0c\u770b\u8c01\u80fd\u628a\u4ed6\u4eec\u7684\u63d0\u6848\u5f00\u53d1\u6210\u53ef\u884c\u7684\u7740\u9646\u5668\u3002", "note_en": "A leading figure at  Nasa responsible for the agency\u2019s human spaceflight programs has suddenly resigned just days before the US is set to send astronauts back into space from American soil for the first time since the Space Shuttle program was  retired almost a decade ago.\n Doug Loverro, the official in charge of the human spaceflight division, left on Monday,  Nasa said.\n Next week,  Elon Musk\u2019s  SpaceX is due to put two US astronauts on a much-anticipated test  flight of the company\u2019s Dragon capsule to the International Space Station from Florida.\n Nasa indicated on Tuesday the launch would proceed according to that schedule. A vital launch readiness review is planned for later this week.\n  \u201cNext week will mark the beginning of a new era in human spaceflight with the launch of Nasa astronauts Bob Behnken and Doug Hurley to the International  Space Station,\u201d a statement from the space agency said. \u201cThis test flight will be a historic and momentous occasion that will see the return of human spaceflight to our country, and the incredible dedication by the men and women of Nasa is what has made this mission possible.\u201d\n The men are scheduled to blast off in the  SpaceX Dragon craft from Cape Canaveral in Florida on Wednesday next week.\n Nasa said in a statement on Tuesday that Loverro resigned from his position as associate administrator for human exploration and operations effective Monday, noting that Ken Bowersox, Loverro\u2019s deputy, would serve as acting associate administrator. A spokesperson did not immediately respond to media queries about the background to Loverro\u2019s abrupt departure.\n  Loverro was a Pentagon official in the past. He had been in the human spaceflight role at Nasa for a matter of a few months.\n The  Washington Post reported that his resignation came after he broke a rule during Nasa\u2019s recent procurement of a spacecraft capable of landing humans on the moon, quoting two people with knowledge of the situation.\n Earlier this year Nasa  selected three private space companies to lead the development of lunar landers for its forthcoming moon landings.\n The three companies are  Blue Origin, owned by Amazon CEO Jeff Bezos; Elon Musk\u2019s SpaceX; and Dynetics, based in Huntsville, Alabama. The three companies are now in competition with each other to see who can develop their proposals into workable landers.", "posttime": "2020-05-20 19:43:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u7a7a,nasa,head,\u4eba\u7c7b", "title": "\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u8f7d\u4eba\u822a\u5929\u8d1f\u8d23\u4eba\u5728\u201c\u5386\u53f2\u6027\u201d\u592a\u7a7a\u4efb\u52a1\u524d\u51e0\u5929\u8f9e\u804c", "title_en": "Nasa head of human spaceflight resigns days before 'historic' space mission", "transed": 1, "url": "https://www.theguardian.com/science/2020/may/20/nasa-head-of-human-spaceflight-doug-loverro-suddenly-resigns-days-before-historic-space-mission", "via": "", "real_tags": ["\u592a\u7a7a", "nasa", "head", "\u4eba\u7c7b"]}]