[{"category": "", "categoryclass": "", "imagename": "e4bc290a41253db0e5d032b846d32d1f.jpeg", "infoid": 1003570, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3\u8b66\u544a\u79f0\uff0c\u7531\u4e8e\u7f8e\u56fd\u5404\u5730\u7684\u9910\u5385\u4ecd\u5728\u5173\u95e8\u4ee5\u51cf\u7f13\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u8001\u9f20\u5728\u5bfb\u627e\u98df\u7269\u7684\u8fc7\u7a0b\u4e2d\u53d8\u5f97\u8d8a\u6765\u8d8a\u5484\u5484\u903c\u4eba\u3002\n\u7531\u4e8e\u8bb8\u591a\u9910\u5385\u73b0\u5728\u53ea\u63d0\u4f9b\u5916\u5356\u670d\u52a1\uff0c\u8fc7\u53bb\u88c5\u6ee1\u6b8b\u6e23\u548c\u5783\u573e\u7684\u5783\u573e\u7bb1\u5df2\u7ecf\u53d8\u5f97\u7a7a\u8361\u8361\u7684\u591a\u4e86-\u5b83\u4eec\u6b63\u53d8\u5f97\u7edd\u671b\u3002\n\u4e00\u4e9b\u53f8\u6cd5\u7ba1\u8f96\u533a\u62a5\u544a\u8bf4\uff0c\u968f\u7740\u556e\u9f7f\u52a8\u7269\u5bfb\u627e\u65b0\u7684\u98df\u7269\u6765\u6e90\uff0c\u556e\u9f7f\u52a8\u7269\u7684\u6d3b\u52a8\u6709\u6240\u589e\u52a0\u3002\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3\u5728\u4e0a\u5468\u53d1\u5e03\u7684\u62a5\u544a\u4e2d\u8bf4\uff0c\u73af\u5883\u5065\u5eb7\u548c\u556e\u9f7f\u52a8\u7269\u63a7\u5236\u9879\u76ee\u53ef\u80fd\u4f1a\u589e\u52a0\u4e0e\u556e\u9f7f\u52a8\u7269\u6709\u5173\u7684\u670d\u52a1\u8bf7\u6c42\uff0c\u4ee5\u53ca\u5173\u4e8e\u4e0d\u5bfb\u5e38\u6216\u653b\u51fb\u6027\u556e\u9f7f\u52a8\u7269\u884c\u4e3a\u7684\u62a5\u544a\u3002\n\u5b83\u5efa\u8bae\u5c01\u9501\u8fdb\u5165\u5bb6\u5ead\u548c\u4f01\u4e1a\u7684\u901a\u9053\uff0c\u6e05\u9664\u6742\u7269\u548c\u8302\u5bc6\u7684\u690d\u88ab\uff0c\u5c06\u5783\u573e\u653e\u5728\u76d6\u5f97\u4e25\u5bc6\u7684\u5783\u573e\u7bb1\u91cc\uff0c\u5e76\u5c06\u5ba0\u7269\u548c\u9e1f\u98df\u4ece\u9662\u5b50\u91cc\u79fb\u8d70\uff0c\u4ee5\u62b5\u5fa1\u5bb3\u866b\u3002\n\u636e\u5bb3\u866b\u63a7\u5236\u516c\u53f8Rentokil\u79f0\uff0c\u5c45\u6c11\u533a\u9644\u8fd1\u556e\u9f7f\u52a8\u7269\u6d3b\u52a8\u7684\u589e\u52a0\u5f15\u8d77\u4e86\u536b\u751f\u5f53\u5c40\u7684\u5173\u6ce8\uff0c\u5df2\u77e5\u8001\u9f20\u4f1a\u4f20\u64ad\u5305\u62ec\u6c99\u95e8\u6c0f\u83cc\u548c\u97e6\u5c14\u6c0f\u75c5\u5728\u5185\u7684\u75be\u75c5\u3002\n\u5728\u7f8e\u56fd\u7684\u51e0\u4e2a\u4e3b\u8981\u57ce\u5e02\uff0c\u6709\u62a5\u9053\u79f0\u7edd\u671b\u7684\u8001\u9f20\u6210\u7fa4\u7ed3\u961f\u5730\u5728\u8857\u4e0a\u5bfb\u627e\u98df\u7269\u3002\n\u636e\u54e5\u4f26\u6bd4\u4e9a\u5e7f\u64ad\u516c\u53f8\u65b0\u95fb\u62a5\u9053\uff0c\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u7684\u89c6\u9891\u663e\u793a\u8001\u9f20\u5728\u901a\u5e38\u6324\u6ee1\u72c2\u6b22\u8005\u7684\u7a7a\u8361\u8361\u7684\u8857\u9053\u4e0a\u5954\u8dd1\u540e\uff0c\u65b0\u5965\u5c14\u826f\u5f53\u5c40\u53d1\u8d77\u4e86\u4e00\u573a\u8bf1\u6355\u548c\u6251\u706d\u556e\u9f7f\u52a8\u7269\u7684\u8fd0\u52a8\u3002\u8fd9\u5ea7\u57ce\u5e02\u7684\u5e02\u957f\u62c9\u6258\u4e9a\u00b7\u574e\u7279\u96f7\u5c14(LaToya Canrell)\u8bf4\uff0c\u8fd9\u4e9b\u8001\u9f20\u5feb\u75af\u4e86\u3002\n\u5728\u7ebd\u7ea6\u5e02\uff0c\u5f53\u5c40\u627f\u8bfa\u52a0\u5f3a\u4e0e\u8001\u9f20\u7684\u6597\u4e89\uff0c\u6709\u62a5\u9053\u79f0\uff0c\u556e\u9f7f\u52a8\u7269\u805a\u96c6\u5728\u7b2c\u516d\u5927\u9053\u7684\u5783\u573e\u4e2d\uff0c\u751a\u81f3\u8bc9\u8bf8\u6740\u5a74\u548c\u5403\u4eba\u6765\u751f\u5b58\u3002\n\u57ce\u5e02\u556e\u9f7f\u5b66\u5bb6\u9c8d\u6bd4\u00b7\u79d1\u91cc\u6839\u544a\u8bc9\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d\uff0c\u4e00\u4f4d\u5bb3\u866b\u4e13\u5bb6\u5728\u7687\u540e\u533a\u4e00\u573a\u53ef\u6015\u7684\u8001\u9f20\u5927\u6218\u540e\u7ed9\u4ed6\u5bc4\u6765\u4e86\u4e00\u5f20\u7167\u7247\u3002\u79d1\u91cc\u6839\u8ba4\u4e3a\uff0c\u4e00\u7fa4\u9965\u997f\u7684\u8001\u9f20\u76f8\u4e92\u653b\u51fb\u3002\u4eba\u884c\u9053\u4e0a\u53ea\u5269\u4e0b\u4e00\u5806\u8001\u9f20\u7684\u56db\u80a2\u3002", "note_en": "Rats are growing increasingly aggressive in their hunt for food as restaurants across the US remain shuttered to slow the spread of the coronavirus, the Centers for Disease Control and Prevention has warned.\n With many restaurants now only open for takeout services, the bins that used to be filled with scraps and refuse the rodents once feasted on are much emptier \u2014 and they are getting desperate.\n &#34;Some jurisdictions have reported an increase in rodent activity as rodents search for new sources of food. Environmental health and rodent control programs may see an increase in service requests related to rodents and reports of unusual or aggressive rodent behavior,&#34;  said the CDC in their release last week.\n   It advises that &#34;sealing up access into homes and businesses, removing debris and heavy vegetation, keeping garbage in tightly covered bins, and removing pet and bird food from their yards&#34; to ward off the pests.\n   The increased rodent activity around residential neighborhoods has health authorities concerned, with rats known to spread illnesses including salmonella and Weil&#39;s disease,  according to pest control firm Rentokil.\n In several major cities in the US, reports have emerged of desperate rats swarming the streets in the search for food.\n Authorities in New Orleans have launched a campaign to trap and kill the rodents,  reported CBS News,\u00a0after videos on social media showed rats scurrying through empty streets usually thronged with revelers. The city&#39;s mayor, LaToya Cantrell, said the rats were going &#34;crazy.&#34;\n In New York City authorities have pledged to step up the fight against rats, amid reports of rodents swarming garbage on 6th Avenue and even  resorting to infanticide and cannibalism to survive.\n   Urban rodentologist Bobby Corrigan told  The Washington Post that a pest expert sent him a photo after a gruesome rat battle in Queens. A hungry nest of rats had turned on each other, Corrigan believes. A pile of rat limbs on the sidewalk was all that remained.", "posttime": "2020-05-25 05:20:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u98df\u7269,rats,\u556e\u9f7f\u52a8\u7269", "title": "\u9910\u5385\u98df\u7269\u4f9b\u5e94\u6d88\u5931\uff0c\u9965\u997f\u7684\u8001\u9f20\u53d8\u6210\u98df\u4eba\u65cf", "title_en": "Starving rats turning into cannibals as restaurant food supply disappears", "transed": 1, "url": "https://www.businessinsider.com/coronavirus-hungry-rats-grow-aggressive-as-us-restaurants-remain-shut-2020-5", "via": "", "real_tags": ["app", "\u98df\u7269", "rats", "\u556e\u9f7f\u52a8\u7269"]}, {"category": "", "categoryclass": "", "imagename": "de002d08a862da5e5e6bcde2e806c0b9.png", "infoid": 1003569, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7531\u4e8e\u9700\u6c42\u5927\u5e45\u4e0b\u964d\uff0c\u5728\u7ecf\u5386\u4e86\u6570\u5468\u7684\u8270\u96be\u4e4b\u540e\uff0c\u6c7d\u8f66\u79df\u8d41\u5de8\u5934\u8d6b\u5179(Hertz)\u4e8e\u5468\u4e94\u6df1\u591c\u6839\u636e\u7834\u4ea7\u6cd5\u7b2c11\u7ae0\u7533\u8bf7\u7834\u4ea7\u4fdd\u62a4\u3002\u81ea\u4ece\u51a0\u72b6\u75c5\u6bd2\u5371\u673a\u5f00\u59cb\u4ee5\u6765\uff0c\u8d6b\u5179\u4e00\u76f4\u5728\u52aa\u529b\u8ba9\u81ea\u5df1\u7684\u5934\u8131\u79bb\u503a\u52a1\uff0c\u4f3c\u4e4e\u8be5\u516c\u53f8\u5df2\u7ecf\u575a\u6301\u4e86\u5c3d\u53ef\u80fd\u957f\u7684\u65f6\u95f4\u3002\u5b83\u7684\u4e8c\u624b\u8f66\u8f66\u961f\u73b0\u5728\u6b63\u5728\u6295\u653e\u5e02\u573a\uff0c\u4e00\u5bb6\u516c\u53f8\u7684\u4e0d\u5e78\u5f88\u5feb\u5c31\u4f1a\u6210\u4e3a\u4e00\u4e9b\u8d2d\u8f66\u8005\u7684\u6740\u624b\u950f\u3002\n\u636e\u6c7d\u8f66\u65b0\u95fb\u62a5\u9053\uff0c\u5728\u4e0e\u503a\u6743\u4eba\u8fdb\u884c\u4e86\u7d27\u5f20\u7684\u4e00\u5929\u8c08\u5224\u540e\uff0c\u8d6b\u5179\u7533\u8bf7\u4e86\u7834\u4ea7\u6cd5\u7b2c11\u7ae0\u7684\u7834\u4ea7\u4fdd\u62a4\u3002\u867d\u7136\u7834\u4ea7\u6cd5\u7b2c11\u7ae0\u5141\u8bb8\u8be5\u516c\u53f8\u7ee7\u7eed\u8fd0\u8425\uff0c\u4ee5\u89e3\u51b3\u5982\u4f55\u507f\u8fd8\u503a\u52a1\uff0c\u5e76\u6709\u671b\u626d\u8f6c\u4e1a\u52a1\uff0c\u4f46\u8fd9\u5bb6\u6c7d\u8f66\u79df\u8d41\u516c\u53f8\u7684\u60c5\u51b5\u76f8\u5f53\u53ef\u6015\uff1a\n\u8d6b\u5179\u8868\u793a\uff0c\u5b83\u670910\u4ebf\u7f8e\u5143\u7684\u73b0\u91d1\u6765\u652f\u6301\u5176\u4e1a\u52a1\uff0c\u5176\u4e2d\u5305\u62ec\u8d6b\u5179\u3001\u7f8e\u5143\u3001\u8282\u4fed\u3001\u8424\u706b\u866b\u3001\u8d6b\u5179\u6c7d\u8f66\u9500\u552e\u548c\u5510\u4f26\u3002\u4f46\u8d6b\u5179\u8868\u793a\uff0c\u5b83\u53ef\u80fd\u9700\u8981\u7b79\u96c6\u66f4\u591a\u8d44\u91d1\uff0c\u6216\u8bb8\u662f\u5728\u7834\u4ea7\u8fc7\u7a0b\u63a8\u8fdb\u7684\u540c\u65f6\u901a\u8fc7\u589e\u52a0\u501f\u6b3e\u6765\u7b79\u96c6\u3002\n\u6cd5\u9662\u7684\u8bf7\u613f\u4e66\u5217\u51fa\u4e86\u7ea6258\u4ebf\u7f8e\u5143\u7684\u8d44\u4ea7\u548c244\u4ebf\u7f8e\u5143\u7684\u503a\u52a1\u3002\u6587\u4ef6\u663e\u793a\uff0c\u8be5\u516c\u53f8\u6700\u5927\u7684\u503a\u6743\u4eba\u5305\u62ecIBM Corp.\u548cLyft Inc.\u3002\n\u8d6b\u5179\u4f20\u7edf\u4e0a\u4e00\u76f4\u662f\u5e95\u7279\u5f8b3\u548c\u5176\u4ed6\u6c7d\u8f66\u5236\u9020\u5546\u8f66\u961f\u6c7d\u8f66\u7684\u4e3b\u8981\u4e70\u5bb6\u3002\u6839\u636e\u7f8e\u56fd\u63d0\u4ea4\u7684\u4e00\u4efd\u6587\u4ef6\uff0c\u53bb\u5e74\uff0c\u8d6b\u5179\u5728\u5176\u7f8e\u56fd\u8f66\u961f\u4e2d\u6301\u6709\u591a\u8fbe56.76\u4e07\u8f86\u6c7d\u8f66\uff0c\u5728\u56fd\u9645\u90e8\u95e8\u6301\u670920.4\u4e07\u8f86\u6c7d\u8f66\uff0c\u5728\u7f8e\u56fd\u7684\u5e73\u5747\u6301\u6709\u671f\u4e3a18\u4e2a\u6708\uff0c\u56fd\u9645\u6c7d\u8f66\u6301\u6709\u671f\u4e3a12\u4e2a\u6708\u3002\n\u6839\u636e\u5907\u6848\u6587\u4ef6\uff0c\u5176\u8f66\u961f\u8f66\u8f86\u7684\u6700\u5927\u4f9b\u5e94\u5546\u662f\u901a\u7528\u6c7d\u8f66(21%)\u3001\u83f2\u4e9a\u7279\u514b\u83b1\u65af\u52d2(18%)\u3001\u798f\u7279(12%)\u3001\u8d77\u4e9a(10%)\u3001\u4e30\u7530(9%)\u3001\u65e5\u4ea7(7%)\u548c\u73b0\u4ee3(5%)\u3002\ufeff\u3002\n\u8d6b\u5179\u901a\u5e38\u79df\u8d41\u5176\u8f66\u961f\uff0c\u800c\u4e0d\u662f\u4e0e\u5176\u5408\u4f5c\u7684\u6c7d\u8f66\u516c\u53f8\u8fdb\u884c\u56de\u8d2d\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8d6b\u5179\u4f1a\u5728\u9700\u6c42\u4e0b\u964d\u65f6\u7b80\u5355\u5730\u51fa\u552e\u591a\u4f59\u7684\u6c7d\u8f66\uff0c\u4f46\u968f\u7740\u4e8c\u624b\u8f66\u9700\u6c42\u968f\u7740\u65c5\u884c\u7684\u51cf\u5c11\u800c\u4e0b\u964d(\u8d6b\u5179\u7684\u5927\u90e8\u5206\u4e1a\u52a1\u90fd\u662f\u5728\u673a\u573a\u5f00\u5c55\u7684)\uff0c\u8be5\u516c\u53f8\u65e0\u6cd5\u7ef4\u6301\u8d1f\u503a\u3002\u4f46\u629b\u552e\u5e93\u5b58\u53ef\u80fd\u8fd8\u4e0d\u591f\u3002\n\u5728\u5f53\u524d\u7684\u5371\u673a\u4e2d\uff0c\u4e8c\u624b\u8f66\u7684\u4ef7\u683c\u4e00\u76f4\u4e0d\u7a33\u5b9a\uff0c\u4f46\u73b0\u5728\u4f3c\u4e4e\u4ed6\u4eec\u5df2\u7ecf\u51b3\u5b9a\u9009\u62e9\u2026\n\u591a\u8bfb\u3002\n\u8d6b\u5179\u5df2\u7ecf\u8bd5\u7740\u5356\u51fa\u8db3\u591f\u591a\u7684\u6c7d\u8f66\u6765\u7ef4\u6301\u8fd0\u8425\uff0c\u4f46\u6ca1\u6709\u594f\u6548\u3002\u636e\u7f8e\u56fd\u6709\u7ebf\u7535\u89c6\u65b0\u95fb\u7f51(CNN)\u62a5\u9053\uff0c3\u6708\u521d\uff0c\u8d6b\u5179\u5728\u7f8e\u56fd\u552e\u51fa\u4e864.1\u4e07\u8f86\u4e8c\u624b\u8f66\uff0c\u4f46\u7531\u4e8e\u56de\u62a5\u840e\u7f29\u548c\u6c7d\u8f66\u62cd\u5356\u505c\u6b62\uff0c\u8d6b\u5179\u8e29\u4e0b\u4e86\u5239\u8f66\u3002\u4e8c\u624b\u8f66\u4ef7\u683c\u968f\u540e\u57284\u6708\u4efd\u4e0b\u8dcc\u4e8634.4%\u3002\u5e02\u573a\u4e0a\u5927\u91cf\u7684\u65b0\u5e93\u5b58\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u538b\u4f4e\u4ef7\u683c\uff0c\u4f7f\u8d6b\u5179\u6781\u96be\u8d70\u51fa\u56f0\u5883\u3002\n\u6c7d\u8f66\u5236\u9020\u5546\u4e5f\u62c5\u5fc3\u79df\u8f66\u5e02\u573a\u7684\u9ebb\u70e6\u3002\u53bb\u5e74\uff0c\u6c7d\u8f66\u79df\u8d41\u8f66\u961f\u5360\u7f8e\u56fd\u6c7d\u8f66\u9500\u91cf\u768410%\uff1b\u5df2\u7ecf\u906d\u53d7\u91cd\u521b\u7684\u6c7d\u8f66\u5236\u9020\u5546\u627f\u53d7\u4e0d\u8d77\u635f\u5931\u3002\u8d6b\u5179\u8fd8\u89e3\u96c7\u4e86\u7f8e\u56fd\u76841.2\u4e07\u540d\u5458\u5de5\uff0c\u53e6\u6709\u7ea64000\u540d\u5458\u5de5\u88ab\u6682\u65f6\u89e3\u96c7-\u8fd9\u4e00\u4f11\u5047\u53ef\u80fd\u4f1a\u88ab\u8bc1\u660e\u662f\u6c38\u4e45\u6027\u7684\u3002\n\u5468\u4e00\uff0c\u8d6b\u5179\u5728\u4e8c\u624b\u8f66\u5e02\u573a\u4e0a\u4ee5\u4e00\u7b14\u5212\u7b97\u7684\u4ef7\u683c\u629b\u552e\u4e86\u4e00\u5806\u5927\u9ec4\u8702\u989c\u8272\u7684\u514b\u5c14\u7ef4\u7279Z06\u3002\u5728\u7533\u8bf7\u516c\u544a\u516c\u5e03\u540e\uff0c\u5468\u516d\u4e0a\u5348\u8d6b\u5179\u7684\u7f51\u7ad9\u4e0a\u6d8c\u73b0\u51fa\u66f4\u591a\u7684\u4e8c\u624b\u8f66\u4ea4\u6613\u3002\u8fd9\u662f\u4e00\u8f862020\u5e74\u7684\u5b9d\u9a6c740i\uff0c\u552e\u4ef752,949\u7f8e\u5143\uff0c\u91cc\u7a0b\u8868\u4e0a\u7684\u884c\u9a76\u91cc\u7a0b\u53ea\u67098,595\u82f1\u91cc\uff0c\u4f8b\u5982\uff0c\u6bd4\u540c\u4e00\u5730\u533a\u7c7b\u4f3c\u91cc\u7a0b\u7684\u540c\u7c7b\u6c7d\u8f66\u6574\u6574\u5c11\u4e865,000-8,000\u7f8e\u5143\u3002\n\u4e5f\u6709\u5f88\u591a\u4e0d\u90a3\u4e48\u534e\u4e3d\u7684\u8f66\u53ef\u4ee5\u4e70\u5230\u50cf\u6837\u7684\u4ea4\u6613\uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u5728\u5e02\u573a\u4e0a\u5bfb\u627e\u4e00\u8f86\u65e7\u7684\u79df\u8f66\u5907\u7528\u8f66\uff0c\u6bd4\u5982\u4e00\u8f86\u4e30\u7530\u5361\u7f57\u62c9(Toyota Corolla)\u6216\u4e00\u8f86\u96ea\u4f5b\u5170\u5854\u970d(Chevy Tahoe)\u3002\u5982\u679c\u4e00\u5bb6\u6210\u7acb\u4e8e1918\u5e74\u7684\u516c\u53f8\u4e0d\u5f97\u4e0d\u5012\u95ed\uff0c\u6d88\u8d39\u8005\u4e0d\u59a8\u628a\u9aa8\u5934\u6311\u5e72\u51c0\u3002", "note_en": "After weeks of hardship due to decimated demand, the car rental giant Hertz filed for Chapter 11 Bankruptcy late Friday night.   Hertz has been struggling to keep its head above water since the Covid-19 crisis began, and it seems the company has held out for as long as it could. Its fleet of used cars are now hitting the market, and one company\u2019s misfortune will soon become some car buyer\u2019s killer deal.\n  After a   tense day of talks with creditors, Hertz filed for Chapter 11 Bankruptcy, according to   Automotive News. While Chapter 11 allows the company to continue to operate in order to figure out how to pay debts and hopefully turn the business around, the situation for the car rental company is pretty dire:\n Hertz said it had $1 billion in cash to support its operations, which include Hertz, Dollar, Thrifty, Firefly, Hertz Car Sales, and Donlen. But it might need to raise more, perhaps through added borrowings while the bankruptcy process moves forward, Hertz said.\n The court petition listed about $25.8 billion in assets and $24.4 billion of debts. Its biggest creditors include IBM Corp. and Lyft Inc., according to the document.\n Hertz has traditionally been a leading buyer of fleet cars from the Detroit 3 and other automakers. Last year, Hertz held as many as 567,600 vehicles in its U.S. fleet and 204,000 in its international unit, holding those in the U.S. for an average of 18 months and international vehicles for 12 months, according to a U.S. filing.\n Its biggest suppliers of fleet vehicles were General Motors (21 percent), Fiat Chrysler (18 percent), Ford (12 percent), Kia (10 percent), Toyota (9 percent), Nissan (7 percent) and Hyundai (5 percent), according to the filing.\ufeff\n    Hertz normally leases its fleet, instead of doing buybacks with the auto companies it works with. Normally, Hertz would simply sell off excessive vehicles when demand dropped, but with the used car demand dropping along with travel (Hertz does most of its business at airports) the company had no way to keep its head above water. But selling off inventory may not be enough.\n Used car prices have been wonky through the current crisis, but it now seems they\u2019ve decided on\u2026\n Read more\n  Hertz already tried selling enough cars to stay afloat, and it didn\u2019t work. In early March Hertz sold 41,000 used cars in the U.S., but pumped the brakes as returns shrank and auto auctions stopped, according to   CNN. Used car prices then fell 34.4 percent in April. A ton of new inventory on the market will likely push prices down even more, making it extremely difficult for Hertz to climb out of the hole it is in.\n  Automakers are also worried about the trouble in the rental car market. Last year car rental fleets accounted for 10 percent of U.S. auto sales; sales already suffering automakers can ill-afford to lose. Hertz also let go of 12,000 employees in the U.S., while some 4,000 were furloughed\u2014a furlough which may prove permanent.\n  On Monday, Hertz dumped a bunch of bumble bee-colored Corvette z06s on to the used car market for a   heck of a good deal. More used car deals were rolling in Saturday morning on Hertz\u2019s website after the filing announcement. Here\u2019s a   2020 BMW 740i for $52,949 and only 8,595 miles on the odometer,   a full $5,000-$8,000 less than similar cars with similar milage in the same area, for instance.\n There are plenty of less flashy cars for decent deals as well, especially if you\u2019re in the market for one of the old rental car standbys, like a Toyota Corolla or a Chevy Tahoe. If a company that has been around since 1918 has to die, consumers might as well pick the bones clean.", "posttime": "2020-05-25 05:04:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6c7d\u8f66,car,\u8d6b\u5179", "title": "\u8d6b\u5179\u6c7d\u8f66\u79df\u8d41\u516c\u53f8\u7533\u8bf7\u7834\u4ea7", "title_en": "Hertz Car Rental Files for Bankruptcy", "transed": 1, "url": "https://jalopnik.com/hertzs-late-night-bankruptcy-filing-sends-ripples-throu-1843628287", "via": "", "real_tags": ["\u6c7d\u8f66", "car", "\u8d6b\u5179"]}, {"category": "", "categoryclass": "", "imagename": "390eabb8be9c52ede60496f5097d56d3.jpg", "infoid": 1003568, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Microsoft\u548cAltran\u53d1\u5e03\u4ee3\u7801\u7f3a\u9677AI\uff0c\u4ee5\u8bc6\u522b\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u6f5c\u5728\u95ee\u9898\u5e76\u63d0\u51fa\u4fee\u590d\u5efa\u8bae\u3002\nAltran\u53d1\u5e03\u4e86\u4e00\u6b3e\u65b0\u5de5\u5177\uff0c\u8be5\u5de5\u5177\u4f7f\u7528\u4eba\u5de5\u667a\u80fd(AI)\u5e2e\u52a9\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u5728\u7f16\u7801\u7ed3\u675f\u65f6\u53d1\u73b0\u9519\u8bef\u3002\n\u5728GitHub\u4e0a\u63d0\u4f9b\u7684Code Defect AI\u4f7f\u7528\u673a\u5668\u5b66\u4e60(ML)\u6765\u5206\u6790\u73b0\u6709\u4ee3\u7801\uff0c\u53d1\u73b0\u65b0\u4ee3\u7801\u4e2d\u7684\u6f5c\u5728\u95ee\u9898\uff0c\u5e76\u5efa\u8bae\u6d4b\u8bd5\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\u9519\u8bef\u3002\nAltran\u96c6\u56e2\u9996\u5e2d\u521b\u65b0\u5b98Walid Negm\u8bf4\uff0c\u8fd9\u4e2a\u65b0\u5de5\u5177\u5c06\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u53d1\u5e03\u9ad8\u8d28\u91cf\u4ee3\u7801\u3002\n\u4ed6\u5728\u4e00\u4efd\u65b0\u95fb\u7a3f\u4e2d\u8868\u793a\uff0c\u8f6f\u4ef6\u53d1\u5e03\u5468\u671f\u9700\u8981\u80fd\u591f\u5e2e\u52a9\u505a\u51fa\u6218\u7565\u5224\u65ad\u7684\u7b97\u6cd5\uff0c\u7279\u522b\u662f\u5728\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u7684\u60c5\u51b5\u4e0b\u3002\n\u4ee3\u7801\u7f3a\u9677\u4eba\u5de5\u667a\u80fd\u4f7f\u7528\u4e86\u51e0\u79cdML\u6280\u672f\uff0c\u5305\u62ec\u968f\u673a\u51b3\u7b56\u68ee\u6797\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u591a\u5c42\u611f\u77e5\u5668(MLP)\u548cLogistic\u56de\u5f52\u3002\u8be5\u5e73\u53f0\u5bf9\u5386\u53f2\u6570\u636e\u8fdb\u884c\u63d0\u53d6\u3001\u5904\u7406\u548c\u6807\u6ce8\uff0c\u8bad\u7ec3\u7b97\u6cd5\uff0c\u5efa\u7acb\u53ef\u9760\u7684\u51b3\u7b56\u6a21\u578b\u3002\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u4ee3\u7801\u7f3a\u9677AI\u4e2d\u7684\u7f6e\u4fe1\u5ea6\u5206\u6570\u6765\u9884\u6d4b\u4ee3\u7801\u662f\u517c\u5bb9\u7684\u8fd8\u662f\u6709\u9519\u8bef\u7684\u3002\n\u5bf9\u4e8e\u5f00\u653e\u6e90\u7801\u7684GitHub\u9879\u76ee\uff0c\u5386\u53f2\u6570\u636e\u662f\u4f7f\u7528RESTful\u63a5\u53e3\u548cGitCLI\u6536\u96c6\u7684\u3002\u6b64\u6570\u636e\u5305\u62ec\u5b8c\u6574\u7684\u63d0\u4ea4\u5386\u53f2\u8bb0\u5f55\u548c\u5b8c\u6574\u7684\u9519\u8bef\u5386\u53f2\u8bb0\u5f55\u3002\n\u5c06\u7279\u5f81\u8bc6\u522b\u3001\u6807\u7b7e\u7f16\u7801\u3001\u4e00\u6b21\u70ed\u7f16\u7801\u3001\u6570\u636e\u7f29\u653e\u548c\u5f52\u4e00\u5316\u7b49\u9884\u5904\u7406\u6280\u672f\u5e94\u7528\u4e8e\u6536\u96c6\u7684\u5386\u53f2\u63d0\u4ea4\u6570\u636e\u3002\n\u5bf9\u9884\u5904\u7406\u540e\u7684\u6570\u636e\u8fdb\u884c\u6807\u8bb0\u3002\u6807\u8bb0\u8fc7\u7a0b\u6d89\u53ca\u7406\u89e3\u4e3a\u6bcf\u4e2a\u5df2\u5173\u95ed\u7684\u95ee\u9898\u6807\u8bb0\u4fee\u590d\u63d0\u4ea4(\u9519\u8bef\u5df2\u88ab\u5173\u95ed)\u7684\u6a21\u5f0f\u3002\u5728\u6536\u96c6\u4fee\u590d\u63d0\u4ea4\u4e4b\u540e\uff0c\u901a\u8fc7\u56de\u6eaf\u4fee\u590d\u63d0\u4ea4\u4e2d\u6bcf\u4e2a\u6587\u4ef6\u7684\u5386\u53f2\u66f4\u6539\u6765\u8bc6\u522b\u5f15\u5165\u9519\u8bef\u7684\u63d0\u4ea4\u3002\n\u5982\u679c\u4e0e\u5e72\u51c0\u8bb0\u5f55\u76f8\u6bd4\uff0c\u6570\u636e\u96c6\u5305\u542b\u7684\u9519\u8bef\u6570\u636e\u975e\u5e38\u5c11\uff0c\u5219\u8fd8\u4f1a\u751f\u6210\u5408\u6210\u6570\u636e\uff0c\u4ee5\u907f\u514d\u504f\u5411\u591a\u6570\u7c7b\u3002\n\u4e00\u65e6\u5b58\u5728\u5177\u6709\u53ef\u63a5\u53d7\u7684\u7cbe\u786e\u5ea6\u548c\u53ec\u56de\u503c\u7684\u6a21\u578b\uff0c\u5c31\u90e8\u7f72\u6240\u9009\u6a21\u578b\u4ee5\u9884\u6d4b\u65b0\u7684\u63d0\u4ea4\u3002\n\u4ee3\u7801\u7f3a\u9677AI\u652f\u6301\u4e0e\u7b2c\u4e09\u65b9\u5206\u6790\u5de5\u5177\u7684\u96c6\u6210\uff0c\u53ef\u4ee5\u5e2e\u52a9\u8bc6\u522b\u7ed9\u5b9a\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u3002\u6b64\u5916\uff0c\u4ee3\u7801\u7f3a\u9677\u4eba\u5de5\u667a\u80fd\u5de5\u5177\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u8bc4\u4f30\u4ee3\u7801\u4e2d\u7684\u54ea\u4e9b\u529f\u80fd\u5728\u9519\u8bef\u4fee\u590d\u65b9\u9762\u5e94\u8be5\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002\n\u5fae\u8f6f\u4eba\u5de5\u667a\u80fd\u5e02\u573a\u90e8\u603b\u7ecf\u7406\u5927\u536b\u00b7\u5361\u83ab\u7eb3\u5728\u4e00\u4efd\u65b0\u95fb\u7a3f\u4e2d\u8868\u793a\uff0c\u5fae\u8f6f\u548cAltran\u4e00\u76f4\u5728\u5408\u4f5c\u6539\u5584\u8f6f\u4ef6\u5f00\u53d1\u5468\u671f\uff0c\u7531Microsoft Azure\u63d0\u4f9b\u652f\u6301\u7684Code Defect AI\u662f\u4e00\u79cd\u521b\u65b0\u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u6765\u5e2e\u52a9\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u3002\n\u4ee3\u7801\u7f3a\u9677AI\u53ef\u4ee5\u6258\u7ba1\u5728\u672c\u5730\uff0c\u4e5f\u53ef\u4ee5\u6258\u7ba1\u5728Microsoft Azure\u7b49\u4e91\u8ba1\u7b97\u5e73\u53f0\u4e0a\u3002\u8be5\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4e0e\u5176\u4ed6\u6e90\u4ee3\u7801\u7ba1\u7406\u5de5\u5177\u96c6\u6210\u3002\n\u5728\u4e00\u4efd\u5173\u4e8e\u4eba\u5de5\u667a\u80fd\u548c\u8f6f\u4ef6\u5f00\u53d1\u7684\u65b0\u62a5\u544a\u4e2d\uff0c\u5fb7\u52e4\u9884\u6d4b\uff0c\u5c06\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u516c\u53f8\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u8f85\u52a9\u7f16\u7801\u5de5\u5177\u3002\u4ece2018\u5e741\u6708\u52302019\u5e749\u6708\uff0c\u8f6f\u4ef6\u4f9b\u5e94\u5546\u63a8\u51fa\u4e86\u6570\u5341\u4e2a\u81f4\u529b\u4e8e\u8fd9\u4e00\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u548c\u521d\u521b\u4f01\u4e1a\uff0c\u5e76\u5728\u7c7b\u4f3c\u7684\u65f6\u95f4\u6846\u67b6\u5185\u7b79\u96c6\u4e867.04\u4ebf\u7f8e\u5143\u3002\n\u5fb7\u52e4(Deloitte)\u5206\u6790\u5e08\u5927\u536b\u00b7\u6c99\u8328\u57fa(David Schatsky)\u548c\u82cf\u62c9\u5e03\u00b7\u90a6\u5e03(Sourabh Bumb)\u8868\u793a\uff0c\u8fd9\u4e9b\u5e73\u53f0\u6700\u5927\u7684\u597d\u5904\u662f\u6548\u7387\u3002\u4ed6\u4eec\u8457\u6709\u201c\u4eba\u5de5\u667a\u80fd\u6b63\u5728\u5e2e\u52a9\u5236\u9020\u66f4\u597d\u7684\u8f6f\u4ef6\u201d\u4e00\u4e66\u3002\u4eba\u5de5\u667a\u80fd\u8f85\u52a9\u7f16\u7801\u7684\u597d\u5904\u5f88\u591a\u3002\u7136\u800c\uff0c\u5bf9\u516c\u53f8\u6765\u8bf4\uff0c\u6700\u4e3b\u8981\u7684\u597d\u5904\u662f\u6548\u7387\u3002\u8bb8\u591a\u65b0\u7684\u4eba\u5de5\u667a\u80fd\u652f\u6301\u7684\u5de5\u5177\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u62fc\u5199\u548c\u8bed\u6cd5\u68c0\u67e5\u5668\uff0c\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u5c06\u4ed6\u4eec\u9700\u8981\u952e\u5165\u7684\u51fb\u952e\u6b21\u6570\u51cf\u5c11\u7ea650%\u3002\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u53d1\u73b0\u9519\u8bef\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u81ea\u52a8\u5316\u786e\u8ba4\u8f6f\u4ef6\u8d28\u91cf\u6240\u9700\u7684\u591a\u8fbe\u4e00\u534a\u7684\u6d4b\u8bd5\u3002\u968f\u7740\u516c\u53f8\u7ee7\u7eed\u4f9d\u8d56\u5f00\u6e90\u4ee3\u7801\uff0c\u8fd9\u4e00\u80fd\u529b\u53d8\u5f97\u66f4\u52a0\u91cd\u8981\u3002\u5fb7\u52e4\u7684\u62a5\u544a\u53ef\u4ee5\u663e\u8457\u52a0\u5feb\u7f16\u7801\u8fc7\u7a0b\uff0c\u5c06\u5f00\u53d1\u4eba\u5458\u9700\u8981\u952e\u5165\u7684\u51fb\u952e\u6b21\u6570\u51cf\u5c11\u4e00\u534a\uff0c\u751a\u81f3\u5728\u4ee3\u7801\u5ba1\u67e5\u6216\u6d4b\u8bd5\u4e4b\u524d\u5c31\u80fd\u6355\u83b7\u9519\u8bef\uff0c\u5e76\u81ea\u52a8\u751f\u6210\u8d28\u91cf\u4fdd\u8bc1\u6240\u9700\u7684\u4e00\u534a\u6d4b\u8bd5\u3002\n\u6839\u636e\u8be5\u62a5\u544a\uff0c\u8fd9\u4e9b\u5de5\u5177\u6700\u9002\u5408\u8f6f\u4ef6\u5f00\u53d1\u6d41\u7a0b\u7684\u8fd9\u4e9b\u8981\u7d20\uff1a\n\u4ece\u6700\u70ed\u95e8\u7684\u7f16\u7a0b\u8bed\u8a00\u5230\u85aa\u6c34\u6700\u9ad8\u7684\u5de5\u4f5c\uff0c\u83b7\u53d6\u60a8\u9700\u8981\u4e86\u89e3\u7684\u5f00\u53d1\u4eba\u5458\u65b0\u95fb\u548c\u63d0\u793a\u3002\u6bcf\u5468\u3002\n\u4eca\u5929\u62a5\u540d", "note_en": "Microsoft and Altran release Code Defect AI to identify potential problems in software development and suggest fixes.\n  Altran has released a new tool that uses  artificial intelligence (AI) to help software engineers spot bugs during the coding process instead of at the end.\n Available on GitHub,  Code Defect AI uses  machine learning (ML) to analyze existing code, spot potential problems in new code, and suggest tests to diagnose and fix the errors.\n Walid Negm, group chief innovation officer at Altran, said that this new tool will help developers release quality code quickly.\n &#34;The software release cycle needs algorithms that can help make strategic judgments, especially as code gets more complex,&#34; he said in a press release.\n  Code Defect AI uses several ML techniques including random decision forests, support vector machines, multilayer perceptron (MLP) and logistic regression. The platform extracts, processes and labels historical data to train the algorithm and build a reliable decision model. Developers can use a confidence score from Code Defect AI that predicts whether the code is compliant or buggy.\n    For an open source GitHub project, historical data is collected using RESTFul interfaces and Git CLI. This data includes complete commit history and complete bugs history.\n Preprocessing techniques like feature identification, label encoding, one hot encoding, data scaling and normalization are applied to the collected historical commit data.\n Labelling is performed on the preprocessed data. The labelling process involves understanding of the pattern in which the fix commits (where a bug has been closed) are tagged for each of the closed issues. After the fix commits are collected, the commits which introduced the bugs are identified by backtracking on historical changes for each file in a fix commit.\n If a data set contains a very small amount of bug data as compared with clean records, synthetic data is also generated to avoid bias toward the majority class.\n  Once there is a model that has acceptable value of precision and recall, the selected model is deployed for prediction on new commits.\n Code Defect AI supports integration with third-party analysis tools and can help identify bugs in a given program code. Also, the Code Defect AI tool allows developers to assess which features in the code should take higher priority in terms of bug fixes.\n &#34;Microsoft and Altran have been working together to improve the software development cycle, and Code Defect AI, powered by Microsoft Azure, is an innovative tool that can help software developers through the use of machine learning,&#34; said David Carmona, general manager of AI marketing at Microsoft, in a press release.\n  Code Defect AI can be hosted on premises as well as on cloud computing platforms such as  Microsoft Azure. The solution can be integrated with other source-code management tools as needed.\n  In a new report about artificial intelligence and software development, Deloitte predicts that more and more companies will use AI-assisted coding tools. From January 2018 to September 2019, software vendors launched dozens of AI-powered software development tools and startups working in this space, and raised $704 million over a similar timeframe.\n The biggest benefit from these platforms is efficiency, according to Deloitte analysts David Schatsky and Sourabh Bumb, the authors of &#34; AI is helping to make better software:&#34;  &#34;The benefits of AI-assisted coding are numerous. However, the principal benefit for companies is efficiency. Many of the new AI-powered tools work in a similar way to spell- and grammar-checkers, enabling coders to reduce the number of keystrokes they need to type by around 50%. They can also spot bugs while code is being written, while they can also automate as many as half of the tests needed to confirm the quality of software.&#34;  This capability is even more important as companies continue to rely on open-source code.  The Deloitte report can speed up the coding process significantly by &#34;reducing the number of keystrokes developers need to type by half, catching bugs even prior to code review or testing, and automatically generating half of the tests needed for quality assurance.&#34;\n According to the report, these tools are best suited for these elements of the software development process:\n  From the hottest programming languages to the jobs with the highest salaries, get the developer news and tips you need to know. Weekly\n      Sign up today", "posttime": "2020-05-25 04:49:17", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4eba\u5de5\u667a\u80fd,\u4ee3\u7801,ai,\u8f6f\u4ef6", "title": "Altran\u7684\u201c\u4ee3\u7801\u7f3a\u9677\u4eba\u5de5\u667a\u80fd\u201d\u4e0e\u4eba\u5de5\u667a\u80fd\u8f85\u52a9\u7f16\u7801\u5de5\u5177\u7684\u5174\u8d77", "title_en": "Altran's 'Code Defect AI' and the Rise of AI-Assisted Coding Tools", "transed": 1, "url": "https://www.techrepublic.com/article/machine-learning-tool-trains-on-old-code-to-spot-bugs-in-new-code/", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u4ee3\u7801", "ai", "\u8f6f\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003567, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2041-8205/895/1/L11\u751f\u7269\u5206\u5b50\u9009\u62e9\u4e86\u4e24\u4e2a\u7ed3\u6784\u4e0a\u7684\u624b\u6027\u4f53\u7cfb\u4e2d\u7684\u4e00\u4e2a\uff0c\u8fd9\u4e24\u4e2a\u4f53\u7cfb\u901a\u8fc7\u955c\u9762\u53cd\u5c04\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u6709\u4eba\u63d0\u51fa\uff0c\u8fd9\u4e00\u9009\u62e9\u662f\u7531\u5b87\u5b99\u5c04\u7ebf\u505a\u51fa\u7684\uff0c\u5b87\u5b99\u5c04\u7ebf\u5df2\u77e5\u5728\u8bf1\u53d8\u8fc7\u7a0b\u4e2d\u8d77\u7740\u91cd\u8981\u4f5c\u7528\u3002\u7814\u7a76\u8868\u660e\uff0c\u4eca\u5929\u5728\u5730\u9762\u4e0a\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u78c1\u6781\u5316\u5b87\u5b99\u5c04\u7ebf\u53ef\u4ee5\u5728\u5b83\u4eec\u8bf1\u5bfc\u7b80\u5355\u7684\u624b\u6027\u5355\u4f53\u7ed3\u6784\u53d8\u5316\u7684\u901f\u5ea6\u4e0a\u65bd\u52a0\u5fae\u5c0f\u4f46\u6301\u4e45\u7684\u624b\u6027\u504f\u5dee\uff0c\u800c\u7b80\u5355\u7684\u624b\u6027\u5355\u4f53\u662f\u751f\u7269\u805a\u5408\u7269\u7684\u57fa\u77f3\u3002\u87ba\u65cb\u751f\u7269\u805a\u5408\u7269\u5e94\u8be5\u6709\u66f4\u5927\u7684\u5f71\u54cd\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u53ef\u80fd\u662f\u6838\u7cd6\u6838\u9178\u548c\u8131\u6c27\u6838\u7cd6\u6838\u9178\u524d\u4f53\u7684\u805a\u5408\u7269\u3002\u7ed3\u679c\u8868\u660e\uff0c\u76f8\u4e92\u4f5c\u7528\u65e2\u53ef\u4ee5\u662f\u9759\u7535\u7684\uff0c\u53ea\u6d89\u53ca\u5206\u5b50\u7535\u573a\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u7535\u78c1\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u78c1\u573a\u7684\u3002\u6709\u4eba\u4e89\u8fa9\u8bf4\uff0c\u8fd9\u79cd\u504f\u89c1\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u8fdb\u5316\u65f6\u95f4\u5c3a\u5ea6\u4e0a\u51fa\u73b0\u5355\u4e00\u7684\u624b\u6027\u751f\u547d\u5f62\u5f0f\u3002\u5982\u679c\u8fd9\u4e00\u673a\u5236\u5360\u4e3b\u5bfc\u5730\u4f4d\uff0c\u90a3\u4e48\u751f\u547d\u7cfb\u7edf\u7684\u60ef\u7528\u624b\u5e94\u8be5\u662f\u666e\u904d\u7684\u3002\u5efa\u8bae\u8fdb\u884c\u5b9e\u9a8c\u4ee5\u8bc4\u4f30\u6b64\u8fc7\u7a0b\u7684\u6709\u6548\u6027\u3002\n\u6709\u751f\u547d\u7684\u6709\u673a\u4f53\u7531\u7528\u7279\u5b9a\u7684\u60ef\u7528\u624b\u7ec4\u7ec7\u8d77\u6765\u7684\u5206\u5b50\u7cfb\u7edf\u7ec4\u6210\u3002\u624b\u6027-\u6216\u624b\u6027-\u6309\u7167\u5f00\u5c14\u6587\u7684\u539f\u59cb\u5b9a\u4e49\uff0c\u662f\u4e00\u4e2a\u7269\u4f53\u7684\u51e0\u4f55\u5c5e\u6027\uff0c\u4e0d\u80fd\u53e0\u52a0\u5728\u5b83\u7684\u955c\u50cf\u4e0a(\u5f00\u5c14\u65871894)\u3002\u5728\u5316\u5b66\u4e0a\uff0c\u540c\u4e00\u624b\u6027\u5206\u5b50\u7684\u955c\u50cf\u79f0\u4e3a\u5bf9\u6620\u4f53\u30024\u4e24\u8005\u5177\u6709\u76f8\u540c\u7684\u5316\u5b66\u7279\u6027\u3002\n\u6838\u7cd6\u6838\u9178\u548c\u8131\u6c27\u6838\u7cd6\u6838\u9178(RNA\u548cDNA)\u8d1f\u8d23\u9057\u4f20\u4fe1\u606f\u7684\u590d\u5236\u548c\u5b58\u50a8\uff0c\u7531\u5177\u6709\u76f8\u540c\u624b\u6027\u7684\u6784\u5efa\u5757\u7ec4\u6210\u7684\u7ebf\u6027\u5e8f\u5217\u7ec4\u6210\uff0c\u79f0\u4e3a\u6838\u82f7\u9178\uff0c\u5176\u6392\u5217\u65e2\u4e0d\u662f\u5468\u671f\u6027\u7684\u4e5f\u4e0d\u662f\u968f\u673a\u7684\uff0c\u5305\u542b\u7ef4\u6301\u751f\u547d\u6240\u9700\u7684\u9057\u4f20\u4fe1\u606f(Schr\u00f6dinger 1944\uff1bShannon 1948\uff1bWatson&Amp\uff1bCrick 1953\uff1bShinitzky\u7b49\u4eba)\u3002(2007\u5e74)\u3002\u6838\u82f7\u9178\u7684\u624b\u6027\u8d4b\u4e88\u4e86\u6838\u9178\u87ba\u65cb\u7ed3\u6784\u3002\u6838\u9178\u662f\u975e\u5e38\u5927\u7684\u5206\u5b50\uff0c\u624b\u6027\u5355\u5143\u4e4b\u95f4\u7684\u626d\u8f6c\u89d2\u6709\u7cfb\u7edf\u5730\u53d8\u5316\uff0c\u5982Ramachandran\u56fe(Keting\u7b49\u4eba)\u6240\u793a\u3002(2011)\uff0c\u8fd9\u8868\u660e\u5373\u4f7f\u662f\u67d4\u6027\u751f\u7269\u805a\u5408\u7269\u4e5f\u4fdd\u6301\u624b\u6027\u3002\u56e0\u4e3aRNA\u548cDNA\u662f\u7531D-\u7cd6\u7ec4\u6210\u7684(\u6309\u7167\u4eba\u7c7b\u60ef\u4f8b\uff0c\u53f3\u65cb)\uff0c\u66f4\u7a33\u5b9a\u7684\u6784\u8c61\u662f\u53f3\u65cb\u87ba\u65cb(\u89c1\u56fe1)\u3002\u7cd6\u7684\u540c\u6e90\u6027\u5bf9\u87ba\u65cb\u7684\u7a33\u5b9a\u6027\u6709\u91cd\u8981\u5f71\u54cd\uff0c\u56e0\u6b64\u5bf9\u9057\u4f20\u5bc6\u7801\u7684\u4fdd\u771f\u5ea6\u6216\u8bef\u5dee\u63a7\u5236\u4e5f\u6709\u91cd\u8981\u5f71\u54cd\u3002\u6240\u670920\u4e2a\u7f16\u7801\u7684\u6c28\u57fa\u9178\u90fd\u662f\u5de6\u6487\u5b50(\u540c\u6837\u662f\u6309\u7167\u4eba\u7c7b\u60ef\u4f8b)\u3002\u6709\u65f6\uff0c\u540c\u4e00\u5206\u5b50\u7684\u4e24\u4e2a\u5bf9\u6620\u4f53\u88ab\u6d3b\u7684\u6709\u673a\u4f53\u4f7f\u7528\uff0c\u4f46\u6570\u91cf\u4e0d\u540c\uff0c\u5b83\u4eec\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\u3002\n\u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\u89c2\u5bdf\u5230\u7684\u57fa\u4e8eDNA/RNA\u7684\u751f\u547d\u663e\u7136\u9009\u62e9\u4e86\u4e00\u79cd\u529f\u80fd\u6027\u624b\u6027\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u751f\u6d3b\uff0c\u4f46\u53e6\u4e00\u79cd\u9009\u62e9\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u90aa\u6076\uff0c\u53ef\u80fd\u5df2\u7ecf\u6cbf\u7740\u4e00\u6761\u72ec\u7acb\u7684\u3001\u540c\u6b65\u7684\u9053\u8def\u53d1\u5c55\u8d77\u6765\uff0c\u505a\u51fa\u4e86\u7c7b\u4f3c\u7684\u8fdb\u5316\u9009\u62e9\uff0c\u4ee5\u5e94\u5bf9\u5171\u540c\u73af\u5883\u7684\u53d8\u5316\uff0c\u9664\u4e86\u975e\u5e38\u5c0f\u7684\u5f71\u54cd\uff0c\u8fd9\u662f\u8fd9\u5c01\u4fe1\u7684\u4e3b\u8981\u4e3b\u9898\u3002\u7136\u800c\uff0c\u8003\u8651\u5230\u9ad8\u590d\u5236\u7387\uff0c\u5728\u8fd9\u4e24\u4e2a\u9009\u62e9\u4e4b\u95f4\u5b9e\u73b0\u7cbe\u786e\u7684\u5e73\u8861\u4f3c\u4e4e\u662f\u4e0d\u592a\u53ef\u80fd\u7684\u3002\u6709\u4e00\u4e2a\u5c0f\u7684\u71b5\u4ee3\u4ef7\uff0c\u4f46\u8fd9\u80af\u5b9a\u662f\u7531\u66f4\u5927\u7684\u4fe1\u606f\u5b58\u50a8\u8bbe\u65bd\u548c\u66f4\u9ad8\u7684\u590d\u5236\u53ef\u9760\u6027\u6765\u652f\u4ed8\u7684(\u859b\u5b9a\u8c141944)\u3002\n\u5bf9\u4e8e\u4eca\u5929\u7684DNA\u6765\u8bf4\uff0c\u8f90\u5c04\u589e\u52a0\u4e86\u57fa\u56e0\u7a81\u53d8\u7684\u9891\u7387\uff1b\u8fd9\u4e00\u70b9\u81eaMuller(1927\u5e74)\u7684\u5f00\u521b\u6027\u5de5\u4f5c\u4ee5\u6765\u5c31\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u8be5\u5de5\u4f5c\u8868\u660e\u7a81\u53d8\u7387\u4e0e\u8f90\u5c04\u5242\u91cf\u6210\u6b63\u6bd4\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u53ef\u5f52\u56e0\u4e8e\u5b87\u5b99\u5c04\u7ebf\u7684\u7535\u79bb\u3002\u00b5\u5b50\u6210\u5206\u5728100 MeV\u4ee5\u4e0a\u7684\u80fd\u91cf\u4e0b\u4e3b\u5bfc\u7740\u5730\u9762\u7c92\u5b50\u7684\u901a\u91cf\uff0c\u8d21\u732e\u4e86\u5b87\u5b99\u5c04\u7ebf\u8f90\u5c04\u5242\u91cf\u768485%(Atri&Amp\uff1bMelott 2011)\u3002\u00b5\u5b50\u7684\u80fd\u91cf\u8db3\u4ee5\u7a7f\u900f\u76f8\u5f53\u6df1\u7684\u5730\u65b9\uff0c\u800c\u4e14\u5b83\u4eec\u5e73\u5747\u800c\u8a00\u662f\u81ea\u65cb\u6781\u5316\u7684\u3002\u81ea\u65cb\u6781\u5316\u8f90\u5c04\u7684\u7535\u79bb\u53ef\u4ee5\u662f\u5bf9\u6620\u9009\u62e9\u6027\u7684(Zel&#39\uff1bdovich\u7b49\u4eba)\u30021977\u5e74)\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8ba4\u4e3a\u6d3b\u7684\u548c\u90aa\u6076\u7684\u6709\u673a\u4f53\u7684\u7a81\u53d8\u7387\u662f\u4e0d\u540c\u7684\u3002\u7531\u4e8e\u6700\u65e9\u548c\u6700\u7b80\u5355\u7684\u751f\u547d\u5f62\u5f0f\u53ef\u80fd\u6709\u6570\u5341\u4ebf\u751a\u81f3\u6570\u4e07\u4ebf\u4ee3\uff0c\u7a81\u53d8\u7387\u7684\u5fae\u5c0f\u5dee\u5f02\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7ef4\u6301\u4e24\u79cd\u65e9\u671f\u624b\u6027\u9009\u62e9\u4e2d\u7684\u4e00\u79cd\u3002\n\u5f53\u5df4\u65af\u5fb7\u53d1\u73b0\u751f\u7269\u7684\u540c\u8d28\u6027\u65f6\uff0c\u4ed6\u8ba4\u8bc6\u5230\u5b83\u662f\u81ea\u7136\u89c4\u5f8b\u4e2d\u67d0\u4e9b\u4e0d\u5bf9\u79f0\u7684\u7ed3\u679c\uff1a\u5982\u679c\u751f\u547d\u7684\u57fa\u7840\u662f\u4e0d\u5bf9\u79f0\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u8d77\u6e90\u662f\u4e0d\u5bf9\u79f0\u7684\u5b87\u5b99\u529b\uff0c\u8fd9\u662f\u5730\u7403\u4e0a\u7684\u751f\u547d\u548c\u5b87\u5b99\u4e4b\u95f4\u7684\u8054\u7cfb\u4e4b\u4e00(\u5df4\u65af\u5fb71860)\u3002\u5982\u679c\u5df4\u65af\u5fb7\u8fd8\u6d3b\u7740\u4e00\u4e2a\u4e16\u7eaa\u4ee5\u540e\uff0c\u5f31\u76f8\u4e92\u4f5c\u7528\u4e2d\u5947\u5076\u7834\u574f\u7684\u53d1\u73b0(Lee&Amp\uff1bYang\uff0c1956\uff1bWu\u7b49\u4eba)\u30021957\u5e74)\u4f1a\u5f3a\u5316\u4ed6\u7684\u89c2\u70b9\u3002\u5f53\u7269\u4f53\u7684\u955c\u50cf\u5728\u81ea\u7136\u754c\u4e2d\u4e0d\u5b58\u5728\u65f6\uff0c\u7531\u4e8e\u5f31\u76f8\u4e92\u4f5c\u7528\u4e2d\u7684\u5b87\u79f0\u7834\u574f\uff0c\u7269\u4f53\u8868\u73b0\u51fa\u7269\u7406\u624b\u6027\u3002R\n\u5982\u679c\u6211\u4eec\u5bfb\u627e\u4e00\u79cd\u901a\u7528\u7684\u624b\u6027\u5149\u6e90\uff0c\u4f7f\u5176\u59cb\u7ec8\u53d1\u51fa\u4e00\u79cd\u504f\u632f\u800c\u4e0d\u662f\u53e6\u4e00\u79cd\u504f\u632f\uff0c\u90a3\u4e48\u4e3a\u4e86\u89e3\u91ca\u666e\u904d\u7684\u4e0d\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u518d\u6b21\u88ab\u5f31\u76f8\u4e92\u4f5c\u7528\u6240\u5438\u5f15\u3002\u4e00\u79cd\u9009\u62e9\u662f\u8c03\u7528\u81ea\u65cb\u6781\u5316\u7c92\u5b50\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u010cerenkov\u8f90\u5c04\u6216\u97e7\u81f4\u8f90\u5c04\u8f90\u5c04\u4e00\u79cd\u611f\u89c9\u7684\u5706\u504f\u632f\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f18\u5148\u5149\u89e3\u5355\u624b\u624b\u6027\u5206\u5b50(Vester\u7b49\u4eba)\u30021959\u5e74\uff1bLahoti&amp\uff1bTakwale 1977\uff1bGusev&amp\uff1bGuseva 2019\u5e74)\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u8c03\u7528\u8d85\u65b0\u661f\u4e2d\u5fae\u5b50(Boyd\u7b49\u4eba\uff0c(2018\u5e74)\u3002\u7136\u800c\uff0c\u8f83\u5c0f\u7684\u624b\u6027\u504f\u5411\u4e0d\u592a\u53ef\u80fd\u5bfc\u81f4\u540c\u624b\u6027\u72b6\u6001\uff0c\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u76ca\u751f\u83cc\u6269\u589e\u673a\u5236\u3002\u8fd9\u8868\u660e\uff0c\u76f8\u53cd\uff0c\u5728\u8fd9\u4e24\u4e2a\u751f\u547d\u7cfb\u7edf\u7684\u8fdb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u8981\u8003\u8651\u5230\u5bf9\u6620\u9009\u62e9\u6027\u504f\u89c1\u3002\n\u9996\u5148\uff0c\u8003\u8651\u4e00\u4e2a\u5c0f\u7684\u624b\u6027\u5206\u5b50\u7684\u6a21\u578b\uff0c\u5b83\u662f\u8f83\u5927\u7684\u87ba\u65cb\u805a\u5408\u7269\u7684\u4e00\u90e8\u5206(\u89c1\u56fe1)\uff0c\u6211\u4eec\u5c06\u5176\u7406\u60f3\u5316\u4e3a\u4e00\u4e2a\u4e0d\u76f8\u7b49\u7684\u4e09\u811a\u67b6\u3002\u5728\u539f\u70b9\u6709\u4e00\u4e2a\u9876\u70b9\u6216\u76ee\u6807\uff0c\u4ee5\u53ca\u4e09\u4e2a\u5e26\u6709\u4f4d\u7f6e\u77e2\u91cf\u7684\u53ef\u533a\u5206\u7684\u539f\u5b50\u6216\u7fa4\u3002\u8fd9\u56db\u4e2a\u70b9\u7684\u70b9\u7535\u8377\u5b58\u5728\u4e00\u4e2a\u7ecf\u5178\u7684\u9759\u7535\u573a\u3002\u5f15\u5165\u4e00\u4e2a\u4f2a\u6807\u91cf(\u53cd\u5c04\u4e0b\u6539\u53d8\u7b26\u53f7)\u5206\u5b50\u624b\u6027\u662f\u6709\u5e2e\u52a9\u7684\uff0c\u5b83\u5fc5\u987b\u5728\u53cd\u5c04\u65f6\u6539\u53d8\u7b26\u53f7\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u660e\u786e\u7684\u9009\u62e9\u662f\u3002\n\u7b2c\u4e8c\u4e2a\u7b80\u5355\u7684\u534a\u7ecf\u5178\u6a21\u578b\u5c06\u7535\u8377\u548c\u7535\u6d41\u9650\u5236\u5728\u56f4\u7ed5\u4e2d\u5fc3\u6838\u7535\u8377\u7684\u7403\u4f53\u8868\u9762\uff0c\u8be5\u4e2d\u5fc3\u6838\u7535\u8377\u88ab\u7403\u4f53\u4e0a\u7684\u51c0\u7535\u8377\u62b5\u6d88\u3002\u7535\u6d41\u5141\u8bb8\u7535\u78c1\u624b\u6027\uff0c\u5177\u6709\u6700\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\u3002\u8fd9\u4e24\u79cd\u6a21\u578b\u9002\u7528\u4e8e\u5929\u7136\u87ba\u65cb\u751f\u7269\u805a\u5408\u7269\u7684\u5c0f\u5206\u5b50\u6216\u5355\u4f53\u3002\n\u6211\u4eec\u7684\u7b2c\u4e09\u4e2a\u7b80\u5355\u6a21\u578b\u6d89\u53ca\u5706\u67f1\u5f62\u7684\u9759\u7535\u52bf\uff0c\u5c31\u50cf\u7406\u53d1\u6746\u4e00\u6837(\u89c1\u74e6\u683c\u7eb3\u7b49\u4eba)\u30021997)\uff0c\u5176\u4e2dk&gt\uff1b\u4e3a0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u9009\u62e9\u5206\u5b50\u624b\u6027\u4f5c\u4e3a\u6d3b(\u6076)\u5206\u5b50\u7684\u624b\u6027\u3002\u8fd9\u4e9b\u5b9a\u4e49\u5982\u56fe1\u6240\u793a\u3002\n\u5e26\u7535\u7684\u5b87\u5b99\u5c04\u7ebf\u8d28\u5b50\uff0c\u5176\u80fd\u91cf\u7565\u9ad8\u4e8e\u03c0\u5b50\u4ea7\u751f\u7684\u9608\u503c\uff0c\u4e0e\u9ad8\u5c42\u5927\u6c14\u4e2d\u7684\u6c2e\u548c\u6c27\u6838\u76f8\u649e\uff0c\u4ea7\u751f\u03c0+\uff0c\u03c0\u2212\u6838(Gaisse2012)\u3002\u03c0+\u5728\u51e0\u7c73\u5185\u8870\u53d8\u6210\u03bc+\uff0c\u534a\u8870\u671f\u7ea6\u4e3a2\u03bcs\uff0c\u534a\u8870\u671f\u4e3ae+\u3002\u7531\u4e8e\u4ecb\u5b50\u6ca1\u6709\u81ea\u65cb\uff0c\u8870\u53d8\u5f88\u5f31\uff0c\u03bc+\u548ce+\u81ea\u65cb\u65b9\u5411\u4f18\u5148\u4e0e\u5b83\u4eec\u7684\u8fd0\u52a8\u65b9\u5411\u53cd\u5bf9\u9f50\uff0c\u4ee5\u4fbf\u5e73\u8861\u4f34\u968f\u7684\u4e2d\u5fae\u5b50\u7684\u53cd\u5e73\u884c\u81ea\u65cb(\u56fe2)\u3002\u76f8\u5173\u7684\u78c1\u5076\u6781\u77e9\u7531\u4e0b\u5f0f\u7ed9\u51fa\u3002\u03c0\u2212\u4f1a\u8870\u53d8\u6210\u03bc\u2212\uff0ce\u2212\u5177\u6709\u4f18\u5148\u5bf9\u9f50\u7684\u81ea\u65cb\uff0c\u4f46\u78c1\u77e9\u4e5f\u662f\u53cd\u5bf9\u9f50\u7684(\u89c1\u56fe2\u548c\u9644\u5f55A)\u3002\n\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u4f2a\u6807\u91cf--\u5bb9\u79ef\u91cf(\u5728\u78c1\u77f3\u4e4b\u540e)\u6765\u8868\u793a\u5b87\u5b99\u5c04\u7ebf\u7684\u7269\u7406\u624b\u6027\u3002\u8fd9\u7531\u4ee5\u4e0b\u5b9a\u4e49\u3002\n\u8fd9\u91cc\u6211\u4eec\u5bf9\u6240\u6709\u7b2c\u4e00\u7c7b\u548c\u52a8\u80fdT\u7684\u5b87\u5b99\u5c04\u7ebf\u8fdb\u884c\u5e73\u5747\uff0c\u8fdc\u8fdc\u9ad8\u4e8e\u9608\u503c\uff0c\u5bf9\u4e8e\u65b0\u521b\u5efa\u7684\u03bc\uff0c\u5bf9\u4e8e\u65b0\u7684e\uff0c\u5728\u03c0\u9759\u6b62\u6846\u67b6\u4e2d(\u89c1\u9644\u5f55)\u3002\u4f1a\u8fdb\u4e00\u6b65\u9000\u5316\uff0c\u56e0\u4e3a\u5b87\u5b99\u5c04\u7ebf\u901a\u8fc7\u7c97\u7565\u5730\u6563\u5c04\u7535\u5b50\u800c\u635f\u5931\u80fd\u91cf\u3002\u6b64\u5916\uff0c\u6b21\u7ea7\u7535\u5b50\u5c06\u5927\u90e8\u5206\u662f\u672a\u6781\u5316\u7684\uff0c\u5e76\u8fdb\u4e00\u6b65\u964d\u4f4e\u7167\u5c04\u5206\u5b50\u7684\u5b87\u5b99\u5c04\u7ebf\u7684\u5bb9\u9650\u3002\n\u5728\u4eca\u5929\u7684\u6d77\u5e73\u9762\u4e0a\uff0c\u5927\u591a\u6570\u5b87\u5b99\u5c04\u7ebf\u662f\u5e73\u5747\u901a\u91cf~160m\u22122 s\u22121(Lipari 1993)\u7684\u00b5\u5b50\u3002\u7136\u800c\uff0c\u901a\u91cf\u548c\u5927\u6c14\u53ef\u80fd\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff1b\u5e74\u8f7b\u7684\u592a\u9633\u548c\u5b83\u7684\u98ce\u53ef\u80fd\u8981\u6d3b\u8dc3\u5f97\u591a\u3002\u6211\u4eec\u79f0\u4e4b\u4e3a\u55b7\u6cc9\u7684\u539f\u751f\u751f\u7269\u573a\u6240\u53ef\u80fd\u4f4d\u4e8e\u5ca9\u77f3\u3001\u6c34\u6216\u51b0\u4e4b\u4e0b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6539\u53d8\u6dcb\u6d74\u7684\u6027\u8d28\u548c\u5bb9\u7eb3\u91cf\u3002\n\u6211\u4eec\u73b0\u5728\u8f6c\u5411\u5c06\u5b87\u5b99\u5c04\u7ebf\u7684\u5bb9\u9650\u4e0e\u5206\u5b50\u624b\u6027\u76f8\u8026\u5408\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u6211\u4eec\u5bfb\u6c42\u4e00\u79cd\u4e0e\u4ea7\u7269\u6210\u6b63\u6bd4\u7684\u6548\u5e94\uff0c\u8fd9\u79cd\u6548\u5e94\u5c06\u533a\u5206\u66b4\u9732\u5728\u76f8\u540c\u5b87\u5b99\u5c04\u7ebf\u901a\u91cf\u4e0b\u7684\u6d3b\u5206\u5b50\u548c\u90aa\u6076\u5206\u5b50-\u624b\u6027\u504f\u5411\u3002\u8fd9\u79cd\u6548\u5e94\u5fc5\u987b\u8f6c\u5316\u4e3a\u6700\u7ec8\u7a81\u53d8\u7387\u7684\u5dee\u5f02\uff0c\u8fd9\u4e00\u9014\u5f84\u5373\u4f7f\u5728\u5f53\u4ee3\u751f\u7269\u5b66\u4e2d\u4e5f\u77e5\u4e4b\u751a\u5c11\u3002\u9ad8\u80fd\u7c92\u5b50\u53ef\u4ee5\u5c40\u90e8\u6fc0\u53d1\u7535\u5b50(Rosenfeld\uff0c1928)\u3002\u901a\u5e38\uff0c\u53bb\u6fc0\u52b1\u662f\u5feb\u901f\u4e14\u65e0\u8f90\u5c04\u7684\uff0c\u5e76\u4e14\u6d89\u53ca\u632f\u52a8\u548c\u65cb\u8f6c\u6a21\u5f0f\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u5185\u90e8\u8f6c\u6362\u53ef\u4ee5\u5f15\u8d77\u5206\u5b50\u7ed3\u6784\u7684\u5c40\u90e8\u53d8\u5316\u3002\u5b87\u5b99\u8f90\u5c04\u8fd8\u4f1a\u8bf1\u5bfc\u7535\u79bb\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u751f\u7269\u5206\u5b50\u7684\u7535\u5b50\u7ed3\u6784\u53d1\u751f\u53d8\u5316\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u7a81\u53d8\u3002\u4eca\u5929\uff0cDNA\u5927\u6982\u6bd4\u7b2c\u4e00\u79cd\u9057\u4f20\u751f\u7269\u805a\u5408\u7269\u66f4\u4e0d\u5bb9\u6613\u51fa\u9519\u3002\u4fee\u590d\u4e5f\u53ef\u80fd\u662f\u751f\u547d\u5f00\u59cb\u65f6\u7684\u4e00\u4e2a\u56e0\u7d20\u3002\n\u8fd9\u91cc\u5047\u8bbe\u5b87\u5b99\u5c04\u7ebf\u672c\u8eab\u5728\u7a7a\u95f4\u4e0a\u662f\u5747\u5300\u7684\uff0c\u5e76\u4e14\u76f8\u5bf9\u4e8e\u5206\u5b50\u662f\u5404\u5411\u540c\u6027\u5206\u5e03\u7684\u3002\u5b83\u4eec\u7684\u5b87\u5b99\u7ebf\u5e73\u5747\u78c1\u77e9\u4e5f\u88ab\u63a8\u5b9a\u4e3a\u4e25\u683c\u53cd\u5e73\u884c\uff0c\u5c3d\u7ba1\u6563\u5c04\u8fc7\u7a0b\u6216\u5916\u90e8\u78c1\u573a\u53ef\u4ee5\u5728\u548c\u4e4b\u95f4\u5f15\u5165\u4e00\u4e2a\u89d2\u5ea6\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u9759\u7535\u76f8\u4e92\u4f5c\u7528\u7684\u624b\u6027\u90e8\u5206\u6d89\u53ca\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684\u529b\uff0c\u9664\u975e\u901f\u5ea6\u53d7\u5230\u6270\u52a8\uff0c\u5426\u5219\u8fd9\u4e2a\u529b\u5c31\u4f1a\u6d88\u5931\u3002\u624b\u6027\u504f\u7f6e\u7684\u8be6\u7ec6\u8ba1\u7b97\u89c1\u9644\u5f55B\u3002\n\u6211\u4eec\u4ece\u4e0d\u76f8\u7b49\u7684\u4e09\u811a\u67b6\u5f00\u59cb(\u5982\u9644\u5f55B\u4e2d\u7684\u56feB1\u6240\u793a)\u3002\u8003\u8651\u4e00\u6761\u5177\u6709\u7535\u8377Qe\u3001\u8d28\u91cfMe\u3001\u4e9a\u76f8\u5bf9\u8bba\u901f\u5ea6\u548c\u649e\u51fb\u53c2\u6570\u77e2\u91cf\u7684\u5b87\u5b99\u7ebf\u76f8\u5bf9\u4e8e\u539f\u70b9\u5904\u7684\u76ee\u6807\u3002\u7531\u4e8e\u7535\u8377q1e\uff0c\u8f68\u9053\u5c06\u53d7\u5230\u5e93\u4ed1\u529b\u7684\u7ebf\u6027\u6444\u52a8\u3002\u8fd9\u5c06\u5bfc\u81f4\u901f\u5ea6\u5fae\u6270\u03b4\uff0c\u5b83\u4e0e\u6765\u81ea\u7b2c\u4e8c\u4e2a\u539f\u5b50\u7684\u7535\u573a\u7ed3\u5408\u5728\u4e00\u8d77\u4ea7\u751f\u4e00\u4e2a\u4e8c\u9636\u624b\u6027\u529b\u3002\u8fd9\u4f1a\u5728\u76ee\u6807\u5904\u4ea7\u751f\u4f4d\u79fb\uff0c\u5e76\u4e14\u4f4d\u79fb\u7684\u68af\u5ea6\u7b49\u540c\u4e8e\u7c92\u5b50\u901a\u91cf\u4e2d\u7684\u624b\u6027\u53d8\u5316\u3002\u7136\u800c\uff0c\u5728\u6211\u4eec\u5e73\u5747\u4e4b\u540e\uff0c\u8fd9\u79cd\u53d8\u5316\u5c31\u6d88\u5931\u4e86\u3002\u8fd9\u662f\u610f\u6599\u4e4b\u4e2d\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u6d89\u53ca\u5230\u4e24\u4e2a\u539f\u5b50\u3002\u6211\u4eec\u5fc5\u987b\u8fdb\u884c\u4e09\u9636\u5fae\u6270\u624d\u80fd\u5f97\u5230\u5e73\u5747\u624b\u5f81\u5dee\u3002\u6b64\u5916\uff0c\u5982\u679c\u4e24\u4e2a\u4e09\u811a\u67b6\u817f\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u624b\u6027\u504f\u7f6e\u5c31\u6d88\u5931\u4e86\u3002\u8fd9\u4e5f\u662f\u610f\u6599\u4e4b\u4e2d\u7684\uff0c\u56e0\u4e3a\u7535\u8377Qi\u662f\u4e58\u6027\u7684\uff0c\u5982\u679c\u952e\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u51e0\u4f55\u7ed3\u6784\u672c\u8eab\u5c31\u4e0d\u662f\u624b\u6027\u7684\u3002\u5982\u679c\u7a81\u53d8\u7684\u6982\u7387\u662fP\uff0c\u800c\u6d3b\u5206\u5b50\u548c\u90aa\u6076\u5206\u5b50\u7684\u8fd9\u4e2a\u6982\u7387\u4e4b\u5dee\u662f\u03b4P\uff0c\u5219(\u5728\u9644\u5f55B\u4e2d\u5bfc\u51fa)\uff0c\u5176\u4e2d\u03b1=~0.0073\u662f\u7cbe\u7ec6\u7ed3\u6784\u5e38\u6570\u3002\u8fd9\u592a\u5c0f\u4e86\uff0c\u4e0d\u80fd\u5f15\u8d77\u4eba\u4eec\u7684\u5174\u8da3\uff0c\u4f46\u786e\u5b9e\u6e05\u695a\u5730\u6307\u51fa\u4e86\u5728\u66f4\u5927\u7684\u5f71\u54cd\u4e2d\u91cd\u8981\u7684\u56e0\u7d20\u3002\n\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5177\u6709\u8868\u9762\u7535\u8377\u548c\u7535\u6d41\u7684\u7403\u4f53(\u5982\u9644\u5f55B\u4e2d\u7684\u56feB2\u6240\u793a)\u3002\u6700\u7b80\u5355\u548c\u6700\u5927\u7684\u624b\u6027\u6548\u5e94\u662f\u7535\u78c1\u7684\uff0c\u5b83\u6765\u81ea\u4e8e\u7535\u5076\u6781\u77e9\u548c\u78c1\u5076\u6781\u77e9\u7684\u7ed3\u5408\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u3002Zel&#39\uff1bdovich\u7b49\u4eba\u901a\u8fc7\u5b8c\u5168\u4e0d\u540c\u7684\u8bba\u8bc1\u5f97\u51fa\u4e86\u7c7b\u4f3c\u7684\u7ed3\u8bba\u3002(1977)\u3002\u7136\u800c\uff0c\u4f3c\u4e4e\u6ca1\u6709\u5f88\u597d\u7684\u7406\u7531\u8bf4\u660e\u4e3a\u4ec0\u4e48\u5e94\u8be5\u662f\u975e\u96f6\u3002\n\u7b2c\u4e09\u4e2a\u9759\u7535\u87ba\u65cb\u6a21\u578b\u4e5f\u662f\u624b\u6027\u7684(\u5982\u9644\u5f55B\u4e2d\u7684\u56feB3\u6240\u793a)\u3002\u6211\u4eec\u5f15\u7528\u4e00\u4e2a\u5404\u5411\u540c\u6027\u7684\u53ef\u53d8\u6027\u03ba\uff0c\u5b83\u662f\u901a\u8fc7\u5206\u5b50\u7684\u5b87\u5b99\u5c04\u7ebf\u8f68\u8ff9\u7684\u6bcf\u5355\u4f4d\u957f\u5ea6\u7684\u6982\u7387\uff0c\u5b83\u5c06\u5bfc\u81f4\u91cd\u5927\u7a81\u53d8\u3002\u6211\u4eec\u5047\u8bbe\u53ef\u53d8\u6027\u03ba\u65e2\u6709\u5f84\u5411\u5206\u91cf\uff0c\u4e5f\u6709\u87ba\u65cb\u5206\u91cf\uff0c\u5c31\u50cf\u9759\u7535\u52bf\u4e00\u6837\u3002\u6211\u4eec\u53d1\u73b0\u4e09\u9636\u624b\u5f81\u504f\u7f6e\u5305\u542b\u4e24\u4e2a\u87ba\u65cb\u56e0\u5b50\u548c\u4e00\u4e2a\u5f84\u5411\u56e0\u5b50\u7684\u9879\u4e4b\u548c\u3002\u5982\u679c\u7ed3\u6784\u4e0e\u6838\u7cd6\u6838\u9178\u5b8c\u5168\u76f8\u4f3c\uff0c\u90a3\u4e48\u504f\u5411\u5f88\u53ef\u80fd\u662f\u7531\u5177\u6709\u8f74\u5bf9\u79f0\u53ef\u53d8\u6027\u7684\u9879\u03ba\u4e3b\u5bfc\u7684\u3002\u539f\u6765\u7684\u5b87\u5b99\u5c04\u7ebf\u6b63\u7535\u5b50\u6570\u91cf\u8d85\u8fc7\u7535\u5b50\uff0c\u5f53\u9047\u5230\u6d3b\u5206\u5b50\u65f6\uff0c\u5b83\u4eec\u4f1a\u5f84\u5411\u5411\u5185\u504f\u8f6c\uff0c\u800c\u4e0e\u90aa\u6076\u5206\u5b50\u76f8\u9047\u65f6\uff0c\u6b63\u7535\u5b50\u4f1a\u5411\u5916\u504f\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4e0e\u78b1\u57fa\u7684\u76f8\u4e92\u4f5c\u7528\u5fc5\u7136\u6bd4\u4e0e\u78f7\u9178\u7cd6\u9aa8\u67b6\u7684\u76f8\u4e92\u4f5c\u7528\u5f15\u8d77\u66f4\u591a\u7684\u7a81\u53d8\u3002\u6574\u4f53\u624b\u6027\u504f\u7f6e\u7531\u7ed9\u51fa\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u8003\u8651\u4e86\u4e00\u4e2a\u7535\u78c1\u87ba\u65cb\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u5355\u4e2a\u5355\u4f53\u643a\u5e26\u78c1\u5076\u6781\u5b50\u548c\u7535\u5076\u6781\u5b50\u3002\u7136\u540e\uff0c\u5c3d\u7ba1\u78c1\u4f53\u4e0d\u50cf\u94c1\u78c1\u4f53\u90a3\u6837\u6392\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u4f46\u53ef\u80fd\u6709\u8db3\u591f\u7684\u8fd1\u90bb\u5173\u8054\uff0c\u4ece\u800c\u4ea7\u751f\u7535\u78c1\u3001\u624b\u6027\u504f\u7f6e\uff0c\u8fd9\u53ef\u80fd\u662f\u9759\u7535\u504f\u7f6e\u7684\u4e24\u500d\u3002\n\u504f\u7f6e(~10\u22127\u7684keV\u7535\u5b50\uff0c\u4e58\u4ee5\u7406\u53d1\u6746\u6a21\u578b\u4e2d\u7684\u5bb9\u79ef\u503c\u548c\u6b63\u8d1f\u7535\u8377\u7684\u5206\u6570\u5dee)\u662f\u6d3b\u4f53\u548c\u6076\u4f53\u4e4b\u95f4\u7a81\u53d8\u7387\u7684\u76f8\u5bf9\u5dee\u5f02\u3002\u5728\u9644\u5f55C\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65e5\u5fd7\n\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\u6765\u786e\u5b9a\u8fd9\u4e9b\u8fc7\u7a0b\u662f\u5426\u8db3\u4ee5\u89e3\u91ca\u540c\u6027\u3002\u7279\u522b\u662f\uff0c\u6709\u5fc5\u8981\u7814\u7a76\u4e0d\u540c\u7684\u7c07\u5c04\u6a21\u578b\uff0c\u4ee5\u4e86\u89e3\u5bb9\u79ef\u7387\u7684\u6f14\u53d8\uff0c\u5e76\u5efa\u7acb\u78b0\u649e\u6fc0\u53d1\u7684\u91cf\u5b50\u529b\u5b66\u6a21\u578b\u3002\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u6548\u5e94\u9700\u8981\u63a2\u7d22\u3002\u4f8b\u5982\uff0c\u7814\u7a76\u8868\u660e\uff0c\u7531\u4e8e\u7535\u5076\u6781-\u7535\u56db\u6781\u76f8\u4e92\u4f5c\u7528\uff0c\u624b\u6027\u5206\u5b50\u5728\u7279\u5b9a\u8868\u9762\u7684\u5438\u9644\u53ef\u4ee5\u4f7f\u5149\u5b66\u6d3b\u6027\u63d0\u9ad8\u51e0\u4e2a\u6570\u91cf\u7ea7(Wu\u7b49\u4eba)\u30022017\u5e74)\u3002\u6240\u7814\u7a76\u7684\u76f8\u4e92\u4f5c\u7528\u5728\u751f\u7269\u73af\u5883\u4e2d\u53ef\u80fd\u6709\u76f8\u4f3c\u4e4b\u5904\u3002\n\u5929\u4f53\u751f\u7269\u5b66\u9762\u4e34\u7684\u4e00\u4e2a\u5173\u952e\u95ee\u9898\u662f\u8bc4\u4f30\u54ea\u4e9b\u73af\u5883\u5b50\u96c6\u662f\u751f\u547d\u51fa\u73b0\u6240\u5fc5\u9700\u7684\u3002\u9668\u77f3\u63d0\u4f9b\u7684\u78b1\u57fa\u805a\u5408\u7684\u826f\u597d\u5019\u9009\u73af\u5883\u662f\u5c0f\u800c\u6e29\u6696\u7684\u6c60\u5858\uff0c\u8fd9\u4e9b\u6c60\u5858\u662f\u7531\u4e0e\u5730\u7403\u65e9\u671f\u706b\u5c71\u6d3b\u52a8\u76f8\u5173\u7684\u70ed\u6db2\u6761\u4ef6\u4ea7\u751f\u7684(Pearce\u7b49\u4eba\u30022017\u5e74)\u3002\u5b83\u4eec\u7684\u6e7f\u5faa\u73af\u548c\u5e72\u5faa\u73af\u5df2\u88ab\u8bc1\u660e\u4fc3\u8fdb\u6838\u82f7\u9178\u805a\u5408\u6210\u957f\u94fe(Da Silva\u7b49\u4eba\u3002(2015\u5e74)\u3002\u4efb\u4f55\u5177\u6709\u6d3b\u8dc3\u5730\u8d28\u8fc7\u7a0b\u548c\u6c34\u7684\u5ca9\u77f3\u884c\u661f\u90fd\u6709\u521b\u9020\u751f\u547d\u7684\u6f5c\u529b\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u652f\u6301\u76f8\u5f53\u5927\u7684\u73af\u5883\u591a\u6837\u6027\uff0c\u7279\u522b\u662f\u57fa\u4e8e\u8868\u9762\u7684\u5730\u70b9\uff0c\u5305\u62ec\u6d77\u6ee9\u548c\u6d77\u51b0\u754c\u9762(ST\u00fceken\u7b49\u4eba)\u3002(2013\u5e74)\u3002Lingam&amp\uff1bLoeb(2018)\u6982\u8ff0\u4e86\u6f6e\u6c50\u5728\u6ca1\u6709\u660e\u6697\u5faa\u73af\u7684\u73af\u5883\u4e2d\u4ea7\u751f\u5e72\u6e7f\u5faa\u73af\u6216\u63d0\u4f9b\u751f\u7269\u8282\u5f8b\u7684\u751f\u7269\u5b66\u540e\u679c\u3002\u504f\u632f\u8f90\u5c04\u7684\u8f90\u5c04\u53ea\u80fd\u5bfc\u81f4\u5c11\u91cf\u7684\u5bf9\u6620\u4f53\u8fc7\u5269\uff0c\u4e0d\u80fd\u89e3\u91ca\u5728\u9668\u77f3\u4e2d\u53d1\u73b0\u7684\u5927\u91cf\u8fc7\u5269(15%)\uff0c\u5fc5\u987b\u5bfb\u6c42\u653e\u5927\u673a\u5236(Glavin\u7b49\u4eba)\u30022019\u5e74)\u3002\u5982\u679c\u5728\u9668\u77f3\u4e0a\u53d1\u73b0\u7684\u6c28\u57fa\u9178\u662f\u751f\u7269\u6210\u56e0\u7684\uff0c\u90a3\u4e48\u5b83\u4eec\u5728\u5730\u7403\u4e0a\u51fa\u73b0\u751f\u547d\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\u5f88\u4e45\u4e86\u3002\n\u672a\u6765\u7684\u592a\u7a7a\u4efb\u52a1\u5c06\u5e26\u7740\u5728\u5c0f\u884c\u661f\u548c\u706b\u661f\u6b21\u8868\u9762\u4e0a\u6536\u96c6\u7684\u6837\u672c\u8fd4\u56de\u5730\u7403(Lauretta\u7b49\u4eba\u30022017\u5e74\uff1bVago\u7b49\u4eba\u30022017\u5e74\uff1bYamaguchi\u7b49\u4eba\u3002(2018\u5e74)\u3002\u8fd9\u5c06\u63d0\u4f9b\u5bf9\u6709\u673a\u5206\u5b50\u7684\u6027\u8d28\u548c\u5b83\u4eec\u7684\u624b\u6027\u7684\u6d1e\u5bdf\u529b\u3002\u7531\u4e8e\u5b87\u5b99\u5c04\u7ebf\u5728\u5f31\u76f8\u4e92\u4f5c\u7528\u548c\u751f\u547d\u7cfb\u7edf\u4e4b\u95f4\u63d0\u4f9b\u4e86\u4e00\u79cd\u5929\u7136\u7684\u8054\u7cfb\uff0c\u6211\u4eec\u9884\u6d4b\uff0c\u5982\u679c\u53d1\u73b0\u4e86\u672c\u571f\u751f\u7269\u805a\u5408\u7269(\u5373\u751f\u547d\u7cfb\u7edf\u7684\u75d5\u8ff9)\uff0c\u5b83\u4eec\u5c06\u4e0e\u5730\u7403\u4e0a\u7684\u751f\u547d\u5177\u6709\u540c\u6837\u7684\u5229\u624b\u3002(\u7c7b\u4f3c\u7684\u8a00\u8bba\u4e5f\u9002\u7528\u4e8e\u672a\u6765\u4ece\u6df1\u5c42\u5730\u4e0b\u5730\u70b9\u8fd4\u56de\u7684\u6837\u672c\u3002)\u3002\u751f\u547d\u6700\u5148\u51fa\u73b0\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u5b87\u5b99\u5c04\u7ebf\u662f\u5426\u5728\u5176\u5f62\u6210\u8fc7\u7a0b\u4e2d\u8d77\u5230\u4e86\u4f5c\u7528\u3002\n..", "note_en": "2041-8205/895/1/L11      Biological molecules chose one of two structurally chiral systems which are related by reflection in a mirror. It is proposed that this choice was made, causally, by cosmic rays, which are known to play a major role in mutagenesis. It is shown that magnetically polarized cosmic rays that dominate at ground level today can impose a small, but persistent, chiral bias in the rate at which they induce structural changes in simple, chiral monomers that are the building blocks of biopolymers. A much larger effect should be present with helical biopolymers, in particular, those that may have been the progenitors of ribonucleic acid and deoxyribonucleic acid. It is shown that the interaction can be both electrostatic, just involving the molecular electric field, and electromagnetic, also involving a magnetic field. It is argued that this bias can lead to the emergence of a single, chiral life form over an evolutionary timescale. If this mechanism dominates, then the handedness of living systems should be universal. Experiments are proposed to assess the efficacy of this process.\n       Living organisms comprise a system of molecules organized with specific handedness. Handedness\u2014or chirality\u2014is, following Kelvin&#39;s original definition, the geometric property of an object that cannot be superimposed on its mirror image (Kelvin  1894). In chemistry, mirror images of the same chiral molecule are called enantiomers.  4 Both share the same chemical characteristics.\n The ribonucleic and deoxyribonucleic acids (RNA and DNA), responsible for the replication and storage of genetic information, are made up of linear sequences of building blocks with the same handedness, called nucleotides, whose arrangement is neither periodic nor random and contains the genetic information needed to sustain life (Schr\u00f6dinger  1944; Shannon  1948; Watson &amp; Crick  1953; Shinitzky et al.  2007). The chirality of the nucleotides confers helical structure on nucleic acids. Nucleic acids are very large molecules and the torsional angles between the chiral units vary systematically, as exhibited by the Ramachandran plot (Keating et al.  2011), which demonstrates that even a flexible biopolymer retains chirality. As RNA and DNA are made of D-sugars (right-handed, by human convention), the more stable conformation is a right-handed helix (see Figure  1). The homochirality of the sugars has important consequences for the stability of the helix and, hence, on the fidelity or error control of the genetic code. All 20 encoded amino acids are left-handed (again by human convention). Sometimes, both enantiomers of the same molecule are used by living organisms, but not in the same quantity, and they perform different tasks.\n  While DNA/RNA-based life, as observed so far, has clearly chosen one functional chirality, which we call &#34;live,&#34; the alternative choice, which we call &#34;evil,&#34; could have developed along a separate, synchronized path making similar evolutionary choices in response to changes in common environments, except for very small effects which are the main topic of this Letter. However, a precise equilibrium between the two choices seems quite unlikely given the high replication rate. There is a small entropic price, but this is surely paid by the greater facility of storing information and the higher reliability of the replication (Schr\u00f6dinger  1944).\n For DNA today, radiation increases the fRequency of gene mutations; this has been known since the pioneering work of Muller ( 1927) that showed that the mutation rate is proportional to the radiation dose, much of it attributable to ionization by cosmic rays. The muon component dominates the flux of particles on the ground at energies above 100 MeV, contributing 85% of the radiation dose from cosmic rays (Atri &amp; Melott  2011). Muons have an energy sufficient to penetrate considerable depths, and they are, on average, spin-polarized. Ionization by spin-polarized radiation could be enantioselective (Zel&#39;dovich et al.  1977). Therefore, we argue that the mutation rate of live and evil organisms would be different. As there could be billions or even trillions of generation of the earliest and simplest life forms, a small difference in the mutation rate could easily sustain one of the two early, chiral choices.\n When Pasteur discovered biological homochirality, he recognized it as a consequence of some asymmetry in the laws of nature: &#34;If the foundation of life is dissymmetric because of dissymmetric cosmic forces operating at its origin, this is one of the links between life on earth and the cosmos&#34; (Pasteur  1860). Had Pasteur been alive a century later, the discovery of parity violation in the weak interaction (Lee &amp; Yang  1956; Wu et al.  1957) would have strengthened his view. An object exhibits  physical chirality when its mirror image does not exist in Nature, as a consequence of parity violation in the weak interaction. The result of applying the parity operation on an elementary weak process, such as the decay,     , is not found in Nature because neutrinos are chiral particles. In the language of quantum mechanics, the basic Hamiltonian of a chiral molecule does not commute with the parity operator and, if we include weak neutral currents, there will be a parity-violating energy difference (PVED) between the two enantiomers (Yamagata  1966). However it is extremely small, ~10 \u221217 kT in water (Salam  1991) and larger consequences of chirality must be sought. While the effectiveness of PVED in generating biological homochirality is still under debate, some authors have attempted to work with this small PVED and shown that it may theoretically suffice to bring strong chiral selectivity (Kondepudi &amp; Nelson  1984). An enantiomeric excess due to neutral weak currents has been reported in crystalline materials (Szab\u00f3-Nagy &amp; Keszthelyi  1999).\n In a beautiful paper, Pierre Curie addressed the question of chirality transfer from light to molecules, specifically involving circular polarization (Curie  1894). The sense of rotation of the polarization direction reflects the underlying chirality of the molecules, though the relationship is not simple and depends upon the wavelength of the light (optical rotatory dispersion). This rotation can be accompanied by a difference in the absorption (circular dichroism), consistent with the Kramers\u2013Kronig relations (Kronig  1926; Kramers  1927). On this basis, it has been suggested that a specific source of circularly polarized light (CPL) might favor one set of enantiomers over the other (Bailey et al.  1998).\n Laboratory experiments have demonstrated that it is possible to induce an enantiomeric excess of amino acids by irradiation of interstellar ice analogs with UV CPL (de Marcellus et al.  2011). However, this raises two problems. First, circular dichroism is also wavelength-, pH-, and molecule-specific (D&#39;hendecourt et al.  2019). It is hard to see how one sense of circular polarization can enforce a consistent chiral bias, given the large range of environments in which the molecules are found. Second, it is often supposed that astronomical sources supply the polarization. However, optical polarimetry within the Galaxy reveals no consistent sense of circular polarization and the observed degrees of polarization in the UV are generally quite small (Bailey  2001).\n If we seek a universal, chiral light source that consistently emits one polarization over another, then we are again drawn to the weak interaction in order to account for a universal asymmetry. One option is to invoke spin-polarized particles, which can radiate one sense of circular polarization through \u010cerenkov radiation or bremsstrahlung and can preferentially photolyze chiral molecules of one handedness (Vester et al.  1959; Lahoti &amp; Takwale  1977; Gusev &amp; Guseva  2019). Another option is to invoke supernova neutrinos (Boyd et al.  2018). However, the small chiral bias is unlikely to lead to a homochiral state and some prebiotic amplification mechanism is still required. This suggests considering, instead, enantioselective bias in the evolution of the two living systems.\n  Consider, first, a model of a small chiral molecule, part of a larger helical polymer (see Figure  1), which we idealize as an unequal tripod. There is a vertex or &#34;target&#34; at the origin and three distinguishable atoms or groups with position vectors     ,     ,     . There is a classical electrostatic field associated with the point charges at these four sites. It is helpful to introduce a pseudoscalar (changes sign under reflection) &#34;molecular chirality,&#34;     , which has to change sign upon reflection and a clear choice is     .\n A second simple, semi-classical model has electrical charge and current confined to the surface of a sphere surrounding a central nuclear charge which is canceled by the net charge on the sphere. The current allows for an electromagnetic chirality, with the simplest expression     . These two models are appropriate for small molecules or monomers that are the constituents of naturally helical biopolymers.\n Our third simple model involves a cylindrical, electrostatic potential, like a &#34;Barber pole&#34; (see Wagner et al.  1997),      with  k\u00a0&gt;\u00a00. In this case, the molecular chirality      can be chosen as      for a live (evil) molecule. These definitions of      are illustrated in Figure  1.\n  Charged cosmic-ray protons, with energies just above the threshold for pion production, collide with nitrogen and oxygen nuclei in the upper atmosphere to create  \u03c0 +,  \u03c0 \u2212\u00a0(Gaisser  2012). The  \u03c0 +\u00a0decay within a few meters into  \u03bc +\u00a0with half life ~2  \u03bcs, which decay, in turn into  e +. As pions are spinless and the decays are weak, the  \u03bc +\u00a0and  e + spin directions     , are preferentially anti-aligned with their direction of motion,     , in order to balance the antiparallel spins of the accompanying neutrinos (Figure  2). The associated magnetic dipole moments are given by     . The  \u03c0 \u2212\u00a0decay into  \u03bc \u2212,  e \u2212\u00a0with preferentially aligned spins but with magnetic moments also anti-aligned with      (see Figure  2 and Appendix  A).\n  We introduce a pseudoscalar quantity, &#34;lodacity&#34; (after lodestone), to express the physical chirality of the cosmic rays. This is defined by\n  where we average over all cosmic rays of type  i and kinetic energy  T. Well above threshold,      for freshly created  \u03bc, and      for new  e, in the pion rest frame (see the Appendices).      will be further degraded as the cosmic rays lose energy through scattering electrons with      roughly. In addition the secondary electrons will be mostly unpolarized and further diminish the lodacity of the cosmic rays that irradiate the molecules.\n At sea level today, most cosmic rays are muons with an average flux ~160 m \u22122 s \u22121 (Lipari  1993). However, the flux and the atmosphere could have been quite different; the young Sun and its wind are likely to have been much more active. The protobiological site, which we call the &#34;fount,&#34; may have been below rock, water, or ice, which can change the shower properties and lodacity.\n  We now turn to the interaction that couples the cosmic-ray lodacity      to the molecular chirality     . We seek an effect that is proportional to the product      which will distinguish live and evil molecules exposed to the same cosmic-ray flux\u2014a chiral bias. This effect must be translated into a difference in the ultimate mutation rate, a pathway that is poorly understood even in contemporary biology. A high-energy particle can excite an electron locally (Rosenfeld  1928). Typically, the de-excitation is fast and radiationless and involves vibrational and rotational modes. This &#34;internal conversion&#34; can therefore cause local structural change in the molecule. Cosmic radiation also induces ionization, which introduces changes in the electronic structure of the biomolecules and can lead to mutations. DNA, today, is presumably a far less error-prone copier than the first genetic biopolymer. Repair may also have been a factor when life began.\n The cosmic rays themselves are supposed here to be spatially homogeneous and isotropically distributed with respect to the molecules. Their cosmic-ray-averaged magnetic moment is also presumed to be strictly antiparallel to      although scattering processes, or an external magnetic field can introduce an angle between      and     . This is important because the chiral part of the electrostatic interaction involves a force given by      which vanishes unless the velocity is perturbed. Details of the calculation of the chiral bias      are presented in Appendix  B.\n We start with the unequal tripod (as illustrated by Figure  B1 in Appendix  B). Consider a cosmic ray with charge  qe, mass  Mm  e, subrelativistic velocity     , and impact parameter vector with respect to the target at the origin given by     . The trajectory will be linearly perturbed by the Coulomb force due to the the charge  Q 1 e at     . This will cause a velocity perturbation  \u03b4    , which creates a second-order chiral force in combination with the electric field from the second atom. This produces a displacement at the target and the gradient of the displacement is equivalent to a chiral change in the particle flux. However, this change vanishes after we average over     . This is expected because we have only involved two of the atoms. We have to go to third-order perturbations to get an average chiral difference. Furthermore, the chiral bias vanishes if two of the tripod legs are of equal length. This is also to be expected because the charges  Q  i are multiplicative, and if the bonds are of equal length then the geometrical structure by itself is not chiral. If the probability of a mutation is  P and the difference between this probability for live and evil molecules is  \u03b4P, then      (derived in Appendix  B), where  \u03b1\u00a0~\u00a00.0073 is the fine-structure constant. This is too small to be of interest but does bring out clearly the factors that are important in a larger effect.\n Next, consider the sphere with surface charge and current (as illustrated by Figure  B2 in Appendix  B). The simplest and largest chiral effect is electromagnetic and comes from combining its electric and magnetic dipole moments. In this case     . A similar conclusion was reached, through a quite different argument, by Zel&#39;dovich et al. ( 1977). However, there seems to be no good reason why      should be non-zero.\n The third, electrostatic helical, model is also chiral (as illustrated by Figure  B3 in Appendix  B). We invoke an isotropic &#34;mutability,&#34;  \u03ba, which is the probability per unit length of cosmic-ray trajectory through the molecule that a significant mutation will result. We suppose that the mutability  \u03ba has both a radial and a helical component, like the electrostatic potential. We find that the third-order chiral bias comprises a sum of terms that contains two helical factors and one radial factor. If the structure is at all similar to RNA then it is likely that the bias is dominated by terms with an axisymmetric mutability,  \u03ba. It appears that the original cosmic-ray positrons, which outnumber the electrons, are deflected radially inward when encountering a live molecule and outward with an evil molecule. This implies that interactions with the nucleobases must cause more mutations than those with the suger-phosphate backbone. The overall chiral bias is given by     .\n Finally, we consider an electromagnetic helical model where we suppose that the individual monomers carry magnetic dipoles as well as electric dipoles. Then, although the magnets do not line up as in a ferromagnet, there may be enough near-neighbor correlation for there to be an electromagnetic, chiral bias which could be      times the electrostatic bias.\n The bias      (~10 \u22127 for keV electrons, times the lodacity and the fractional difference between positive and negative charges in the barber pole model) is the relative difference in the mutation rate between live and evil organisms. In Appendix  C, we use the the logistic equations to model the population growth. Starting with a racemic mix the enantiomeric excess is      where  T is the time multiplied by the growth rate. If we add a balanced, live\u2013evil &#34;conflict&#34; then homochiralization is speeded up. Either way, a small bias in the mutation rate could achieve this on an evolutionary timescale.\n  In this paper, we have proposed that homochirality is a deterministic consequence of the weak interaction, expressed by cosmic irradiation of helical biopolymers which may have affected the way they fold or assemble to make the first living organisms. This is a consequence of the coupling      that can lead to symmetry-breaking as anticipated by Pasteur. The choice that was made is then traceable to the preponderance of baryons over antibaryons, established in the early universe and ultimately to the symmetries of fundamental particle interactions presenting requirements (including leptonic charge parity violation) as first elucidated by Sakharov ( 1967). We have also demonstrated how this quite small chiral bias can lead to homochirality after sufficient generations of self-replicating molecules, and shown how conflict can speed up this Manichean struggle.\n Much more study is needed to determine if these processes suffice to account for homochirality. In particular, it will be necessary to investigate different shower models to understand the evolution of the lodacity and to develop a quantum mechanical model of collisional excitation. There are many other effects to explore. For example, it has been shown that the adsorption of chiral molecules on specific surfaces can enhance the optical activity by several orders of magnitude because of the electric dipole\u2013electric quadrupole interaction (Wu et al.  2017). The interaction investigated may have analogs in biological environments.\n A key issue facing astrobiology is assessing what subset of environments are necessary for the emergence of life. Good candidate environments for the polymerization of meteorite-delivered nucleobases are small, warm ponds produced by hydrothermal conditions associated with volcanic activity on the early Earth (Pearce et al.  2017). Their wet and dry cycles have been shown to promote the polymerization of nucleotides into long chains (Da Silva et al.  2015). Any rocky planet, with active geological processes and water, has the potential to create life, because it is likely to support considerable environmental diversity, in particular, surface-based locales, including beaches and sea-ice interfaces (St\u00fceken et al.  2013). Lingam &amp; Loeb ( 2018) outlined the biological consequences of tides in producing wet\u2013dry cycles or providing biological rhythms in environments where the light\u2013dark cycle is absent. Irradiation by polarized radiation can only lead to small enantiomeric excess, and cannot explain the large excesses (15%) found in meteorites, and amplification mechanisms must be sought (Glavin et al.  2019). Should the amino acids found on meteorites be biogenic, they would have existed long before the appearance of life on Earth.\n Future space missions will return to Earth with samples collected on asteroids and on the Martian sub-surface (Lauretta et al.  2017; Vago et al.  2017; Yamaguchi et al.  2018). This will provide insight on the nature of organic molecules and their chirality. As cosmic rays provide a natural connection between the weak interaction and living systems, we predict that, if ever indigenous biopolymers are found (i.e., traces of living systems), they will have the same handedness as life on Earth. (Similar remarks apply to future samples returned from deep subterranean sites.) Where life appeared first, and whether cosmic rays played a role in its formation, are \n......", "posttime": "2020-05-25 04:47:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u624b\u6027,puzzle", "title": "\u751f\u547d\u7684\u624b\u6027\u4e4b\u8c1c", "title_en": "The Chiral Puzzle of Life", "transed": 1, "url": "https://iopscience.iop.org/article/10.3847/2041-8213/ab8dc6", "via": "", "real_tags": ["\u624b\u6027", "puzzle"]}, {"category": "", "categoryclass": "", "imagename": "186aed713d2dab72c02474a3d379fe25.jpeg", "infoid": 1003566, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8def\u900f\u65e7\u91d1\u5c718\u670823\u65e5\u7535-\u968f\u7740Facebook\u5468\u56db\u91c7\u7528\u6c38\u4e45\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c(Mark Zuckerberg)\u5df2\u5c06\u8fd9\u5bb6\u7845\u8c37\u6700\u5927\u7684\u516c\u53f8\u4e4b\u4e00\u4ece\u5b75\u5316\u5b83\u7684\u5730\u65b9\u89e3\u8131\u51fa\u6765\u3002\n\u4f46\u4ed6\u4e5f\u8ba9\u7845\u8c37\u7684\u4e00\u4e2a\u68a6\u60f3\u7834\u706d\u4e86\uff1a\u6280\u672f\u5de5\u4eba\u9003\u79bb\u65e7\u91d1\u5c71\u6e7e\u533a\u538b\u5012\u6027\u7684\u4f4f\u623f\u6210\u672c\u3001\u80ae\u810f\u7684\u4eba\u884c\u9053\u548c\u62e5\u6324\u7684\u9053\u8def\u65f6\uff0c\u53ef\u4ee5\u968f\u8eab\u643a\u5e26\u4ed6\u4eec\u4e30\u539a\u7684\u5de5\u8d44\u3002\n\u968f\u7740\u505c\u5de5\u8fdb\u5165\u7b2c\u4e09\u4e2a\u6708\uff0c\u5728\u9ad8\u85aa\u79d1\u6280\u5de5\u4f5c\u8005\u4e2d\u5f88\u53d7\u6b22\u8fce\u7684\u7559\u8a00\u677f\u4e0a\uff0c\u5145\u6ee1\u4e86\u5728\u70ed\u5e26\u6d77\u6ee9\u548c\u4e2d\u897f\u90e8\u8d1f\u62c5\u5f97\u8d77\u7684\u5c0f\u9547\u5bbd\u655e\u7684\u623f\u5b50\u91cc\u957f\u671f\u5de5\u4f5c\u7684\u5e7b\u60f3\u3002\n\u201c\u8fd9\u662f\u4e0d\u662f\u610f\u5473\u7740\u6211\u53ef\u4ee5\u5728\u7845\u8c37\u7533\u8bf7\u4e00\u4efd\u5de5\u4f5c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u52a0\u52d2\u6bd4\u6d77\u7b49\u5730\u8fdc\u7a0b\u5de5\u4f5c\uff1f\u201d\u4e00\u4f4d\u7528\u6237\u5728Blind\u4e0a\u5199\u9053\uff0cBlind\u662f\u4e00\u6b3e\u65e8\u5728\u8ba9\u5458\u5de5\u533f\u540d\u4ea4\u6362\u4fe1\u606f\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u6050\u6015\u4e0d\u4f1a\uff0c\u624e\u514b\u4f2f\u683c\u5728\u4ed6\u7684Facebook\u9875\u9762\u4e0a\u5411\u5458\u5de5\u53d1\u8868\u516c\u5f00\u5e7f\u64ad\u7684\u76f4\u64ad\u6d41\u65f6\u8bf4\u3002\n\u8be5\u516c\u53f8\u662f\u7845\u8c37\u6700\u5927\u7684\u96c7\u4e3b\u4e4b\u4e00\uff0c\u5c06\u7ed9\u83b7\u51c6\u8fdc\u7a0b\u5de5\u4f5c\u7684\u7f8e\u56fd\u5458\u5de5\u57282021\u5e741\u67081\u65e5\u4e4b\u524d\u5411\u516c\u53f8\u901a\u62a5\u4ed6\u4eec\u8ba1\u5212\u5728\u54ea\u91cc\u5de5\u4f5c\u7684\u6700\u65b0\u60c5\u51b5\uff0c\u5c4a\u65f6\u4ed6\u4eec\u7684\u5de5\u8d44\u5c06\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u53cd\u6620\u5f53\u5730\u7684\u751f\u6d3b\u6210\u672c\u3002\n\u624e\u514b\u4f2f\u683c\u8bf4\uff0c\u4ed6\u9884\u8ba1Facebook\u4e00\u534a\u7684\u5458\u5de5\u5c06\u5728\u672a\u67655\u523010\u5e74\u5185\u63a5\u53d7\u4ed6\u7684\u63d0\u8bae\u3002\n\u4ed6\u8bf4\uff0c\u8bd5\u56fe\u7ed5\u8fc7\u8fd9\u4e9b\u85aa\u916c\u8c03\u6574\u7684\u5458\u5de5\u5c06\u53d7\u5230\u201c\u4e25\u91cd\u540e\u679c\u201d\u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u516c\u53f8\u9700\u8981\u8003\u8651\u5458\u5de5\u7684\u6240\u5728\u5730\uff0c\u4ee5\u907f\u514d\u8fdd\u53cd\u7a0e\u6cd5\u3002\n\u624e\u514b\u4f2f\u683c\u8868\u793a\uff0cFacebook\u5c06\u901a\u8fc7\u68c0\u67e5\u5458\u5de5\u8bbf\u95ee\u5176VPN\u7684\u4f4d\u7f6e\u6765\u76d1\u63a7\u9075\u5b88\u60c5\u51b5\u3002\u636eCNBC HERE\u62a5\u9053\uff0cFacebook\u8fd8\u4f7f\u7528\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8ffd\u8e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u66fe\u6709\u4e00\u6b21\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u6765\u5bfb\u627e\u6ca1\u6709\u51fa\u73b0\u5728\u5de5\u4f5c\u5c97\u4f4d\u4e0a\u7684\u5b9e\u4e60\u751f\u3002\n\u5c3d\u7ba1\u8bb8\u591a\u79d1\u6280\u5de5\u4f5c\u8005\u68a6\u60f3\u7740\u5728\u4f4e\u7a0e\u6536\u5dde\u62e5\u6709\u672a\u6765\uff0c\u4f46\u7559\u8a00\u677f\u4e0a\u7684\u5176\u4ed6\u4eba\u62c5\u5fc3\uff0c\u8f6c\u5411\u8fdc\u7a0b\u5de5\u4f5c\u53ef\u80fd\u4f1a\u7ed9\u6240\u6709\u4eba\u7684\u5de5\u8d44\u5e26\u6765\u4e0b\u884c\u538b\u529b\uff0c\u5e76\u8b66\u544a\u79f0\uff0c\u8fdc\u79bb\u603b\u90e8\u53ef\u80fd\u4f1a\u8ba9\u516c\u53f8\u7684\u664b\u5347\u53d8\u5f97\u66f4\u52a0\u9661\u5ced\u3002\n\u4e00\u4f4d20\u591a\u5c81\u7684\u524dFacebook\u5458\u5de5\u8868\u793a\uff0c\u8fd9\u4e00\u53d8\u5316\u5c06\u4e3a\u7559\u5728\u52a0\u5dde\u7684\u5458\u5de5\u63d0\u4f9b\u673a\u4f1a\u3002\u4ed620\u591a\u5c81\u65f6\u4f4f\u5728\u7845\u8c37\u90ca\u533a\uff0c\u901a\u52e4\u65f6\u95f4\u5f88\u77ed\u3002\n\u4ed6\u8bf4\uff1a\u201c25\u5c81\u7684\u4eba\u53ef\u80fd\u66f4\u613f\u610f\u5f85\u5728\u65e7\u91d1\u5c71\uff0c\u800c\u90a3\u4e9b\u60f3\u8981\u517b\u5bb6\u7cca\u53e3\u7684\u4eba\u53ef\u80fd\u66f4\u613f\u610f\u642c\u5230\u57ce\u5916\u53bb\u3002\u201d\nFacebook\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8868\u793a\uff0c\u8be5\u516c\u53f8\u4e0d\u6253\u7b97\u5bf9\u9009\u62e9\u7559\u5728\u65e7\u91d1\u5c71\u6e7e\u533a\u7684\u5458\u5de5\u8fdb\u884c\u88c1\u5458\u3001\u5f3a\u5236\u642c\u8fc1\u6216\u5de5\u8d44\u8c03\u6574\u3002\n\u5982\u679c\u5b9e\u9a8c\u6210\u529f\uff0cFacebook\u7684\u4e3e\u52a8\u53ef\u80fd\u4f1a\u4fc3\u4f7f\u5176\u4ed6\u79d1\u6280\u5de8\u5934\u901a\u8fc7\u62e5\u62b1\u8fdc\u7a0b\u5de5\u4f5c\u6765\u4e89\u593a\u5de5\u7a0b\u4eba\u624d-\u4ee5\u53ca\u5176\u4ed6\u5dde\u4e89\u593a\u52a0\u5dde\u4eba\u3002\n\u201c\u90a3\u4e9b\u6e29\u6696\u3001\u9633\u5149\u660e\u5a9a\u7684\u5dde\uff0c\u62e5\u6709\u8d1f\u62c5\u5f97\u8d77\u7684\u4f4f\u623f\u548c\u96f6\u7a0e\u6536\uff0c\u5c06\u4f1a\u770b\u5230\u53d7\u8fc7\u6559\u80b2\u7684\u5bcc\u88d5\u5de5\u4eba\u6d8c\u5165\u3002\u5404\u5dde\u5c06\u9700\u8981\u51cf\u7a0e\u624d\u80fd\u8ddf\u4e0a\uff0c\u201c\u98ce\u6295\u516c\u53f8Social Capital\u9996\u5e2d\u6267\u884c\u5b98\u3001Facebook\u65e9\u671f\u9ad8\u7ba1Chaath Palihapitiya\u5728\u63a8\u7279\u4e0a\u8868\u793a\u3002", "note_en": "SAN FRANCISCO (Reuters) - With Facebook\u2019s adoption of permanent remote work on Thursday, Chief Executive Mark Zuckerberg has untethered one of Silicon Valley\u2019s biggest companies from the place that incubated it.\n But he also dashed a Silicon Valley dream: that tech workers would be able to take their generous salaries with them as they flee the Bay Area\u2019s crushing housing costs, dirty sidewalks and crowded roadways.\n As lockdowns dragged into their third month, message boards popular with well-paid tech workers have lit up with fantasies of working long-term from tropical beaches and spacious houses in affordable small towns in the Midwest.\n \u201cDoes that mean I could apply for a job in Silicon Valley and work remotely from, say, the Caribbean? Asking for a friend,\u201d wrote one user on Blind, an app designed to let workers swap information anonymously.\n Afraid not, Zuckerberg said, addressing employees in a publicly broadcast livestream on his Facebook page.\n The company, one of Silicon Valley\u2019s biggest employers, is giving U.S. staffers who are approved to work remotely until Jan. 1, 2021 to update the company on where they plan to base themselves, at which point their salaries will be adjusted to reflect the local cost of living.\n Zuckerberg said he expects half of Facebook\u2019s workforce to take him up on the offer over the next five to 10 years.\n Employees who attempt to wiggle around those compensation adjustments will be subject to \u201csevere ramifications,\u201d he said, as the company needs to account for employee locations to avoid violating tax laws.\n Zuckerberg said Facebook will monitor adherence by checking where employees access its VPN. Facebook also uses its own apps&#39; to track employee locations, according to CNBC  here one time using the data to find interns who failed to show up for work.\n Even as many tech workers dream of a future in low-tax states, others on message boards fret about how the shift to remote work could exert downward pressure on salaries across the board and warn that being far from headquarters could steepen the climb up the corporate ladder.\n One former Facebook employee, who in his 20s lived in Silicon Valley\u2019s suburbs for the short commute, said the change would open up opportunities even for employees who stay in California.\n \u201cA 25-year-old maybe would rather be in San Francisco, while someone looking to raise a family might prefer to move outside the city,\u201d he said.\n A Facebook spokesman said the company was not planning layoffs, compulsory moves or salary adjustments for employees who opt to stay in the Bay Area.\n  If the experiment is successful, Facebook\u2019s move could prompt other tech giants to compete for engineering talent by embracing remote work - and other states to compete for Californians.\n \u201cThe warm, sunny states with affordable housing and zero taxes will see an influx of educated, rich workers. States will need to cut taxes to keep up,\u201d Chamath Palihapitiya, the chief executive of venture capital firm Social Capital and an early executive at Facebook, said on Twitter.", "posttime": "2020-05-25 04:47:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,require,\u5458\u5de5", "title": "Facebook\u8981\u6c42\u8fdc\u7a0b\u5458\u5de5\u62ab\u9732\u52a0\u85aa\u5730\u70b9", "title_en": "Facebook to require remote workers to disclose location for salary scaling", "transed": 1, "url": "https://mobile.reuters.com/article/idUSKBN22Y1IA", "via": "", "real_tags": ["facebook", "require", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "1b005ed9480bccf726582dce8b3af6cb.png", "infoid": 1003565, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6211\u4eec\u8c08\u5230\u4e13\u5229\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u8c08\u8bba\u7684\u662f\u201c\u5b9e\u7528\u201d\u4e13\u5229\u3002\u5b9e\u7528\u4e13\u5229\u4fdd\u62a4\u58f0\u79f0\u5177\u6709\u5b9e\u9645\u5e94\u7528\u6216\u7528\u9014\u7684\u53d1\u660e\u3002(\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u4ecd\u7136\u58f0\u79f0\u4e00\u4e9b\u5b9e\u9645\u4e0a\u65e0\u7528\u7684\u4e1c\u897f\uff0c\u4f46\u5b83\u4eec\u5e94\u8be5\u662f\u6f5c\u5728\u7684\u6709\u7528\u7684\u3002)\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u201c\u5916\u89c2\u8bbe\u8ba1\u201d\u4e13\u5229\u53ea\u4fdd\u62a4\u5916\u89c2\u8bbe\u8ba1\u7684\u88c5\u9970\u6027\u6216\u88c5\u9970\u6027\u3002\u5b83\u4eec\u4e0d\u4fdd\u62a4\u4efb\u4f55\u7c7b\u578b\u7684\u529f\u80fd\u3002\u5982\u679c\u6709\u529f\u80fd\u6027\u7684\u4f5c\u54c1\u9700\u8981\u4fdd\u62a4\uff0c\u53ea\u6709\u5b9e\u7528\u4e13\u5229\u624d\u884c\u3002\n\u56e0\u4e3a\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u53ea\u80fd\u4fdd\u62a4\u975e\u529f\u80fd\u6027\u4f5c\u54c1\uff0c\u6240\u4ee5\u5b83\u4eec\u6709\u70b9\u50cf\u89c6\u89c9\u4f5c\u54c1\u7684\u7248\u6743\u3002\u4e13\u5229\u8bbe\u8ba1\u7684\u521b\u9020\u529b\u548c\u539f\u521b\u6027\u7684\u95e8\u69db\u5f88\u4f4e--\u4f4e\u5230\u5373\u4f7f\u662f\u6807\u51c6\u7248\u672c\u7684\u56fe\u5f62\u7528\u6237\u754c\u9762\u4e5f\u80fd\u83b7\u5f97\u4e13\u5229\u4fdd\u62a4\uff0c\u6b63\u5982\u6211\u4eec\u672c\u6708\u6700\u65b0\u7684\u611a\u8822\u4e13\u5229\u6240\u663e\u793a\u7684\u90a3\u6837\u3002\n\u4ee5\u4e0b\u662f\u897f\u95e8\u5b50\u533b\u7597\u96c6\u56e2(Siemens Healthcare GmbH)\u62e5\u6709\u7684\u4e00\u9879\u4e13\u5229\u8bbe\u8ba1\uff0c\u897f\u95e8\u5b50\u662f\u6b27\u6d32\u6700\u591a\u4ea7\u7684\u4e13\u5229\u7533\u8bf7\u8005\u897f\u95e8\u5b50\u7684\u4e00\u90e8\u5206\uff1a\n\u8be5\u4e13\u5229\uff0c\u7f8e\u56fd\u4e13\u5229\u53f7\u3002D872,112\u662f\u4e00\u4e2a\u76f8\u5bf9\u6807\u51c6\u7684GUI\uff0c\u6807\u9898\u680f\u4e0b\u9762\u663e\u793a\u4e00\u6392\u6392\u5706\u5f62\u56fe\u6807\u3002\u4f46\u8fd9\u9879\u4e13\u5229\u5e76\u4e0d\u80fd\u4fdd\u62a4\u56fe\u7247\u4e2d\u7684\u6240\u6709\u5185\u5bb9--\u91cd\u8981\u7684\u662f\uff0c\u865a\u7ebf\u5708\u51fa\u7684\u90e8\u5206\u4e0d\u662f\u4e13\u5229\u8bbe\u8ba1\u7684\u4e00\u90e8\u5206\u3002\u8be5\u8bbe\u8ba1\u8fd8\u5305\u62ec\u56fe\u7247\u4e2d\u6ca1\u6709\u7684\u529f\u80fd\uff0c\u5373\u663e\u793a\u5668\u4e2d\u4f7f\u7528\u7684\u989c\u8272\u3002\u8981\u4e86\u89e3\u8fd9\u91cc\u7684\u5b9e\u9645\u4e13\u5229\u662f\u4ec0\u4e48\uff0c\u516c\u4f17\u5fc5\u987b\u505a\u5f97\u66f4\u591a\uff1a\u4ed6\u4eec\u53ef\u4ee5\u5411\u7f8e\u56fd\u4e13\u5229\u5c40\u7533\u8bf7\u5e76\u652f\u4ed8\u4e00\u4efd\u4e13\u5229\u7684\u786c\u62f7\u8d1d\uff0c\u6216\u8005\u5728PTO(\u6781\u5176\u7b28\u91cd)\u7684\u914d\u5bf9\u6570\u636e\u5e93\u4e2d\u5bfc\u822a\uff0c\u5e0c\u671b\u627e\u5230\u6700\u521d\u63d0\u4ea4\u7684\u56fe\u50cf\u7684\u53ef\u4e0b\u8f7d\u7248\u672c\u3002\n\u5728\u56fe\u50cf\u8d28\u91cf\u5dee\u548c\u865a\u7ebf\u8868\u793a\u672a\u53d7\u4fdd\u62a4\u7684\u7279\u5f81\u4e4b\u95f4\uff0c\u751a\u81f3\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8bc6\u522b\u4e13\u5229\u8bbe\u8ba1\u662f\u4ec0\u4e48\u3002\u662f\u4e09\u6392\u5706\u5f62\u56fe\u6807\u7684\u5177\u4f53\u6392\u5217\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u4e3a\u4ec0\u4e48\u67d0\u4e9b\u5706\u5f62\u56fe\u6807\u88ab\u6392\u9664\u5728\u5916\uff1f\u662f\u897f\u95e8\u5b50\u8bbe\u8ba1\u5e08\u4e3a\u8868\u793a\u201c\u7528\u6237\u201d\u548c\u201c\u63a5\u6536\u8005\u201d\u4e4b\u7c7b\u7684\u4e1c\u897f\u800c\u521b\u5efa\u7684\u56fe\u6807\u5417\uff1f\u5982\u679c\u771f\u7684\u8fd9\u4e48\u96be\u8bf4\u51fa\u4e13\u5229\u5916\u89c2\u8bbe\u8ba1\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u90a3\u5c31\u66f4\u96be\u786e\u5b9a\u5176\u4ed6\u8bbe\u8ba1\u662f\u5426\u4fb5\u6743\u4e86\u3002\u4fb5\u6743\u53d6\u51b3\u4e8e\u4e13\u5229\u5916\u89c2\u8bbe\u8ba1\u3001\u88ab\u6307\u63a7\u7684\u5916\u89c2\u8bbe\u8ba1\u548c\u73b0\u6709\u6280\u672f\u4e4b\u95f4\u7684\u6bd4\u8f83\u3002\u4f46\u662f\uff0c\u5728\u660e\u786e\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u4fdd\u62a4\u7684\u5185\u5bb9\u4e4b\u524d\uff0c\u8fd9\u79cd\u5206\u6790\u751a\u81f3\u662f\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u3002\n\u5ba1\u67e5\u6807\u51c6\u4f4e\u3001\u6e05\u6670\u5ea6\u4e0d\u9ad8\u3001\u7531\u6b64\u5bfc\u81f4\u7684\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u8d28\u91cf\u4f4e\u5df2\u7ecf\u6784\u6210\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\u3002\u4f46\u60c5\u51b5\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\u652f\u6301\u4e13\u5229\u7684\u6e38\u8bf4\u8005\u6b63\u5728\u63a8\u52a8\u8d4b\u4e88\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u6240\u6709\u8005\u66f4\u591a\u5bf9\u6280\u672f\u5f00\u53d1\u8005\u548c\u7528\u6237\u7684\u6743\u529b\u3002\u4ed6\u4eec\u63d0\u51fa\u4e86\u4e00\u9879\u6cd5\u6848\uff0c\u8d4b\u4e88\u6d77\u5173\u548c\u8fb9\u5883\u4fdd\u62a4\u5c40\u5728\u8fb9\u5883\u6263\u62bc\u4ea7\u54c1\u7684\u6743\u529b\uff0c\u53ea\u9700\u5bf9\u4ea7\u54c1\u8fdb\u884c\u8bc4\u4f30\uff0c\u5e76\u5c06\u5176\u4e0e\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd9\u4e9b\u4e13\u5229\u7684\u6240\u6709\u8005\u6b63\u5728\u8981\u6c42\u8fd9\u79cd\u65b0\u578b\u7684\u7279\u6b8a\u5f85\u9047\u3002\n\u8d4b\u4e88CBP\u5982\u6b64\u5927\u7684\u6743\u529b\u5c06\u5bf9\u666e\u901a\u6280\u672f\u7528\u6237\u6784\u6210\u771f\u6b63\u7684\u5371\u9669\u3002\u60f3\u8c61\u4e00\u4e0b\uff0cCBP\u8bd5\u56fe\u5224\u5b9a\u50cf\u4e0a\u9762\u8fd9\u6837\u7684\u4e13\u5229\u8bbe\u8ba1\u7684\u4fb5\u6743\u884c\u4e3a\uff0c\u8fd9\u662f\u4e00\u4e2a\u533b\u7597\u8f6f\u4ef6\u7684GUI\u3002\u4e3a\u4e86\u8bc4\u4f30\u4fb5\u6743\u884c\u4e3a\uff0cCBP\u5b98\u5458\u53ef\u4ee5\u68c0\u67e5\u8bbe\u5907\uff0c\u5305\u62ec\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\uff0c\u770b\u770b\u5b83\u4eec\u662f\u5426\u4e0e\u6ce8\u518c\u5904\u7684\u4e13\u5229\u8bbe\u8ba1\u5339\u914d\u3002\u5f53\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e0e\u533b\u7597\u670d\u52a1\u6709\u5173\u65f6\uff0c\u7528\u6237\u7684\u533b\u7597\u9690\u79c1\u53ef\u80fd\u4f1a\u53d7\u5230\u5a01\u80c1\u3002\n\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u62e5\u6709\u8005\u4e0d\u9700\u8981\u6bd4\u73b0\u5728\u66f4\u591a\u7684\u6743\u529b\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5e94\u8be5\u95ee\u5916\u89c2\u8bbe\u8ba1\u4e13\u5229\u662f\u5426\u5e94\u8be5\u5b58\u5728\u3002\u6211\u4eec\u5df2\u7ecf\u62e5\u6709\u7248\u6743\u4e86\u3002\u5bf9\u6ca1\u6709\u5b9e\u9645\u5e94\u7528\u7684\u4f5c\u54c1\u6388\u4e88\u989d\u5916\u7684\u4e13\u5229\u6743\u662f\u5426\u4f1a\u7ed9\u516c\u4f17\u5e26\u6765\u4efb\u4f55\u597d\u5904\uff0c\u8fd9\u4e00\u70b9\u5e76\u4e0d\u6e05\u695a\u3002", "note_en": "When we talk about patents, we\u2019re usually talking about \u201cutility\u201d patents. Utility patents protect inventions that claim to have some practical application or use. (A lot of them still claim things that are actually  useless, but they\u2019re supposed to be potentially useful.)\n \u201cDesign\u201d patents, by contrast, protect only the ornamental or decorative aspects of a design. They don\u2019t protect any kind of functionality. If there\u2019s a functional work to protect, only a utility patent will do.\n Because design patents can only protect non-functional works, they\u2019re kind of like copyrights for visual works. And the bar for creativity and originality in a patented design is low\u2014so low that even a standard-issue graphical user interface can get patent protection, as our latest Stupid Patent of the Month shows.\n Shown below is a patented design owned by Siemens Healthcare GmbH, a company that\u2019s part of Siemens,  the most prolific patent-filer in Europe:\n  This patent, U.S. Patent No. D872,112, is a relatively standard GUI, with rows of circular icons displayed beneath a header bar. But the patent doesn\u2019t protect everything in that picture\u2014importantly, the portions circled by broken lines are  not part of the patented design. The design also includes features that are not in the picture\u2014namely, the colors used in the display. To understand what\u2019s actually been patented here, a member of the public must do more: they can request and pay for a hard copy of the patent from the U.S. Patent Office or navigate through the PTO\u2019s (extremely clunky)  PAIR database in the hopes of finding a downloadable version of the originally-filed image.\n Between the image\u2019s poor quality and the broken lines denoting unprotected features, it\u2019s practically to impossible to identify what the patented design even is. Is it the specific arrangement of circular icons in the three rows? If so, then why are certain circular icons excluded? Is it the icons that a Siemens designer created to represent things like \u201cusers\u201d and \u201creceivers?\u201d If it\u2019s this hard to say what the patented design actually is, it will be even harder to determine whether other designs are infringing. Infringement turns on the comparison between the patented design, the accused design, and the prior art. But that analysis can\u2019t even happen until it is clear exactly what a design patent protects.\n The low examination standards, lack of clarity, and resulting low quality of design patents already pose a big problem. But it could be about to get worse. Pro-patent lobbyists are pushing to give design patent owners more power over tech developers and users. They\u2019ve  introduced a bill that gives Customs and Border Protection the power to seize products at the border just by sizing them up and comparing them to design patents, whose owners are demanding this new type of special treatment.\n Giving CBP so much power will pose a real danger to ordinary technology users. Imagine CBP trying to determine infringement for a patented design like the one above, which is a GUI for medical software. To assess infringement, CBP officers could examine a device, including software applications, to see if they match patented designs in the registry. When those applications pertain to health services, the medical privacy of users may be at risk.\n Design patents owners don\u2019t need more power than they have today. Instead, we should be asking whether design patents should exist at all. We already have copyright. It\u2019s not clear that granting extra patent rights to works with no practical application provides any benefit to the public at all.", "posttime": "2020-05-25 04:46:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u4e13\u5229,patents", "title": "\u4e3a\u4ec0\u4e48\u8bbe\u8ba1\u4e13\u5229\u5728\u534e\u76db\u987f\u5f97\u5230\u4e86\u63d0\u632f\uff1f", "title_en": "Why are Design Patents getting a boost in DC?", "transed": 1, "url": "https://www.eff.org/deeplinks/2020/01/design-patents-are-useless-so-why-are-they-getting-boost-dc", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u4e13\u5229", "patents"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003564, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2013\u5e7411\u670819\u65e5\u7b2c11\u5377\u7b2c10\u671f\u81ea\u4ece\u7b2c\u4e8c\u79cd\u7f16\u7a0b\u8bed\u8a00\u53d1\u660e\u4ee5\u6765\uff0c\u8bed\u8a00\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u4e00\u76f4\u662f\u4e2a\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6848\u7684\u8303\u56f4\u4ece\u72ec\u7acb\u4e8e\u8bed\u8a00\u7684\u5bf9\u8c61\u6a21\u578b(\u5982COM(\u7ec4\u4ef6\u5bf9\u8c61\u6a21\u578b)\u548cCORBA(\u516c\u5171\u5bf9\u8c61\u8bf7\u6c42\u4ee3\u7406\u4f53\u7cfb\u7ed3\u6784))\u5230\u4e3a\u96c6\u6210\u8bed\u8a00\u800c\u8bbe\u8ba1\u7684VM(\u865a\u62df\u673a)\uff0c\u5982JVM(Java\u865a\u62df\u673a)\u548cCLR(\u516c\u5171\u8bed\u8a00\u8fd0\u884c\u65f6)\u3002\u968f\u7740\u8f6f\u4ef6\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u786c\u4ef6\u53d8\u5f97\u4e0d\u90a3\u4e48\u540c\u8d28\u5316\uff0c\u5355\u4e00\u8bed\u8a00\u6210\u4e3a\u6574\u4e2a\u7a0b\u5e8f\u7684\u6b63\u786e\u5de5\u5177\u7684\u53ef\u80fd\u6027\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u8981\u4f4e\u3002\u968f\u7740\u73b0\u4ee3\u7f16\u8bd1\u5668\u53d8\u5f97\u66f4\u52a0\u6a21\u5757\u5316\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u65b0\u4e00\u4ee3\u6709\u8da3\u7684\u89e3\u51b3\u65b9\u6848\u3002\n1961\u5e74\uff0c\u82f1\u56fd\u516c\u53f8Stantec\u53d1\u5e03\u4e86\u4e00\u6b3e\u540d\u4e3a\u6591\u9a6c\u7684\u8ba1\u7b97\u673a\uff0c\u8fd9\u6b3e\u8ba1\u7b97\u673a\u4e4b\u6240\u4ee5\u6709\u8da3\uff0c\u539f\u56e0\u6709\u5f88\u591a\uff0c\u5c24\u5176\u662f\u5b83\u7684\u57fa\u4e8e\u6570\u636e\u6d41\u7684\u6307\u4ee4\u96c6\u3002\u6591\u9a6c\u5f88\u96be\u4f7f\u7528\u5176\u672c\u673a\u6307\u4ee4\u96c6\u7684\u5b8c\u6574\u5f62\u5f0f\u8fdb\u884c\u7f16\u7a0b\uff0c\u56e0\u6b64\u5b83\u8fd8\u5305\u542b\u4e86\u4e00\u4e2a\u66f4\u4f20\u7edf\u7684\u7248\u672c\uff0c\u79f0\u4e3a\u7b80\u5355\u4ee3\u7801(Simple Code)\u3002\u8be5\u8868\u5355\u9644\u5e26\u4e86\u4e00\u4e9b\u9650\u5236\uff0c\u5305\u62ec\u6bcf\u4e2a\u7a0b\u5e8f\u6700\u591a\u53ea\u80fd\u6709150\u6761\u6307\u4ee4\u3002\u8fd9\u672c\u624b\u518c\u5f88\u6709\u5e2e\u52a9\u5730\u544a\u8bc9\u7528\u6237\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u9650\u5236\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u6709\u4eba\u4f1a\u7f16\u5199\u4e00\u4e2a\u5982\u6b64\u590d\u6742\u7684\u5de5\u4f5c\u7a0b\u5e8f\uff0c\u4ee5\u81f3\u4e8e\u9700\u8981\u8d85\u8fc7150\u6761\u6307\u4ee4\u3002\n\u5982\u4eca\uff0c\u8fd9\u79cd\u8bf4\u6cd5\u4f3c\u4e4e\u5f88\u53ef\u7b11\u3002\u5373\u4f7f\u662f\u76f8\u5bf9\u4f4e\u7ea7\u8bed\u8a00(\u5982C)\u4e2d\u7684\u7b80\u5355\u51fd\u6570\u5728\u7f16\u8bd1\u540e\u4e5f\u6709150\u591a\u6761\u6307\u4ee4\uff0c\u800c\u4e14\u5927\u591a\u6570\u7a0b\u5e8f\u90fd\u8fdc\u8fdc\u4e0d\u6b62\u4e00\u4e2a\u51fd\u6570\u3002\u4ece\u7f16\u5199\u6c47\u7f16\u4ee3\u7801\u5230\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u8f6c\u53d8\u6781\u5927\u5730\u589e\u52a0\u4e86\u53ef\u80fd\u7684\u7a0b\u5e8f\u7684\u590d\u6742\u6027\uff0c\u5404\u79cd\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\u4e5f\u662f\u5982\u6b64\u3002\n\u8f6f\u4ef6\u590d\u6742\u6027\u589e\u52a0\u7684\u8d8b\u52bf\u4e1d\u6beb\u6ca1\u6709\u51cf\u5f31\u7684\u8ff9\u8c61\uff0c\u73b0\u4ee3\u786c\u4ef6\u5e26\u6765\u4e86\u65b0\u7684\u6311\u6218\u300220\u4e16\u7eaa90\u5e74\u4ee3\u672b\uff0c\u7a0b\u5e8f\u5458\u4e0d\u5f97\u4e0d\u7784\u51c6\u90a3\u4e9b\u62bd\u8c61\u578b\u53f7\u5f88\u50cf\u5feb\u901fPDP-11\u7684\u4f4e\u7aefPC\u3002\u5728\u9ad8\u7aef\uff0c\u4ed6\u4eec\u4f1a\u9047\u5230\u50cf\u975e\u5e38\u5feb\u7684PDP-11\u8fd9\u6837\u7684\u62bd\u8c61\u6a21\u578b\uff0c\u53ef\u80fd\u67092\u52304\u4e2a(\u76f8\u540c\u7684)\u5904\u7406\u5668\u3002\u73b0\u5728\uff0c\u79fb\u52a8\u7535\u8bdd\u5f00\u59cb\u51fa\u73b0\u5177\u6709\u76f8\u540cISA(\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784)\u4f46\u901f\u5ea6\u4e0d\u540c\u7684\u516b\u4e2a\u5185\u6838\uff0c\u4e00\u4e9b\u9488\u5bf9\u4e0d\u540c\u5de5\u4f5c\u8d1f\u8f7d(DSP\u3001GPU)\u4f18\u5316\u7684\u5176\u4ed6\u6d41\u5904\u7406\u5668\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e13\u7528\u5185\u6838\u3002\n\u8868\u793a\u7c7b\u7684\u9ad8\u7ea7\u8bed\u8a00(\u7c7b\u4f3c\u4e8e\u4eba\u7c7b\u5bf9\u95ee\u9898\u9886\u57df\u7684\u7406\u89e3)\u548c\u8868\u793a\u7c7b\u7684\u4f4e\u7ea7\u8bed\u8a00(\u7c7b\u4f3c\u4e8e\u786c\u4ef6)\u4e4b\u95f4\u7684\u4f20\u7edf\u5212\u5206\u4e0d\u518d\u9002\u7528\u3002\u6ca1\u6709\u4e00\u79cd\u4f4e\u7ea7\u8bed\u8a00\u5177\u6709\u63a5\u8fd1\u53ef\u7f16\u7a0b\u6570\u636e\u6d41\u5904\u7406\u5668\u3001x86CPU\u3001\u5927\u89c4\u6a21\u591a\u7ebf\u7a0bGPU\u548cVLIW(\u8d85\u957f\u6307\u4ee4\u5b57)DSP(\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668)\u7684\u8bed\u4e49\u3002\u60f3\u8981\u4ece\u53ef\u7528\u7684\u786c\u4ef6\u4e2d\u83b7\u5f97\u6700\u540e\u4e00\u70b9\u6027\u80fd\u7684\u7a0b\u5e8f\u5458\u4e0d\u518d\u6709\u4e00\u79cd\u8bed\u8a00\u53ef\u4ee5\u7528\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u76ee\u6807\u3002\n\u7c7b\u4f3c\u5730\uff0c\u5728\u62bd\u8c61\u5149\u8c31\u7684\u53e6\u4e00\u7aef\uff0c\u7279\u5b9a\u4e8e\u9886\u57df\u7684\u8bed\u8a00\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c\u3002\u9ad8\u7ea7\u8bed\u8a00\u901a\u5e38\u4ee5\u901a\u7528\u6027\u6362\u53d6\u9ad8\u6548\u8868\u793a\u7b97\u6cd5\u5b50\u96c6\u7684\u80fd\u529b\u3002\u66f4\u901a\u7528\u7684\u9ad8\u7ea7\u8bed\u8a00(\u5982Java)\u727a\u7272\u4e86\u76f4\u63a5\u64cd\u4f5c\u6307\u9488\u7684\u80fd\u529b\uff0c\u4ee5\u6362\u53d6\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u66f4\u62bd\u8c61\u7684\u5185\u5b58\u6a21\u578b\u3002SQL\u7b49\u4e13\u7528\u8bed\u8a00\u4f7f\u67d0\u4e9b\u7c7b\u522b\u7684\u7b97\u6cd5\u65e0\u6cd5\u5b9e\u73b0\uff0c\u4f46\u4f7f\u5176\u9886\u57df\u5185\u7684\u5e38\u89c1\u4efb\u52a1\u53ef\u4ee5\u7528\u51e0\u884c\u4ee3\u7801\u6765\u8868\u793a\u3002\n\u60a8\u4e0d\u80fd\u518d\u671f\u671b\u4e00\u4e2a\u91cd\u8981\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u7528\u4e00\u79cd\u8bed\u8a00\u7f16\u5199\u7684\u3002\u9ad8\u7ea7\u8bed\u8a00\u901a\u5e38\u8c03\u7528\u7528\u4f4e\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u4ee3\u7801\u4f5c\u4e3a\u5176\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206(\u4f8b\u5982\uff0cGUI\u5448\u73b0)\uff0c\u4f46\u662f\u6dfb\u52a0\u8c03\u7528\u53ef\u80fd\u5f88\u56f0\u96be\u3002\n\u7279\u522b\u662f\uff0c\u4e24\u79cd\u975eC\u8bed\u8a00\u4e4b\u95f4\u7684\u63a5\u53e3\u901a\u5e38\u5f88\u96be\u6784\u5efa\u3002\u5373\u4f7f\u662f\u76f8\u5bf9\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5982C++\u548cJava\u4e4b\u95f4\u7684\u6865\u63a5\uff0c\u901a\u5e38\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u5904\u7406\uff0c\u9700\u8981C\u63a5\u53e3\u3002Kaffe Native Interface4\u786e\u5b9e\u63d0\u4f9b\u4e86\u8fd9\u6837\u505a\u7684\u673a\u5236\uff0c\u4f46\u5b83\u6ca1\u6709\u88ab\u5e7f\u6cdb\u91c7\u7528\uff0c\u800c\u4e14\u6709\u5c40\u9650\u6027\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u8bed\u8a00\u4e4b\u95f4\u7684\u63a5\u53e3\u95ee\u9898\u5bf9\u7f16\u8bd1\u5668\u7f16\u5199\u4eba\u5458\u6765\u8bf4\u5c06\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\u3002\u5b83\u63d0\u51fa\u4e86\u8bb8\u591a\u6311\u6218\uff0c\u5728\u8fd9\u91cc\u8be6\u7ec6\u8bf4\u660e\u3002\n\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u5c06\u4ee3\u7801\u548c\u6570\u636e\u7684\u4e00\u4e9b\u6982\u5ff5\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u827e\u4f26\u00b7\u51ef(Alan Kay)\u5728\u65bd\u4e50\u516c\u53f8(Xerox Parc)\u65f6\u5e2e\u52a9\u5f00\u53d1\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\uff0c\u4ed6\u5c06\u5bf9\u8c61\u63cf\u8ff0\u4e3a\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u8fdb\u884c\u901a\u4fe1\u7684\u7b80\u5355\u8ba1\u7b97\u673a\u3002\u8fd9\u4e2a\u5b9a\u4e49\u4e3a\u4e0d\u540c\u8bed\u8a00\u586b\u5199\u7ec6\u8282\u7559\u4e0b\u4e86\u5f88\u5927\u7684\u56de\u65cb\u4f59\u5730\uff1a\n\u00b7\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u5e94\u8be5\u6709\u96f6\u4e2a(\u5982GO)\u3001\u4e00\u4e2a(\u5982Smalltalk\u3001Java\u3001JavaScript\u3001Objective-C)\u6216\u591a\u4e2a(\u5982C++\u3001Self\u3001Simula)\u8d85\u7c7b\u6216\u539f\u578b\uff1f\n\u591a\u91cd\u7ee7\u627f\u95ee\u9898\u662f\u6700\u5e38\u89c1\u7684\u7126\u70b9\u9886\u57df\u4e4b\u4e00\u3002\u5355\u4e00\u7ee7\u627f\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u7b80\u5316\u4e86\u5b9e\u73b0\u7684\u8bb8\u591a\u65b9\u9762\u3002\u53ea\u9700\u8ffd\u52a0\u5b57\u6bb5\u5373\u53ef\u6269\u5c55\u5bf9\u8c61\uff1b\u5bf9\u8d85\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362\u53ea\u6d89\u53ca\u5ffd\u7565\u7ed3\u5c3e\uff0c\u800c\u5bf9\u5b50\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362\u4ec5\u6d89\u53ca\u68c0\u67e5-\u6307\u9488\u503c\u4fdd\u6301\u4e0d\u53d8\u3002C++\u4e2d\u7684\u5411\u4e0b\u8f6c\u6362\u9700\u8981\u901a\u8fc7\u8fd0\u884c\u65f6\u5e93\u51fd\u6570\u590d\u6742\u5730\u641c\u7d22\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\u4e2d\u7684\u7ee7\u627f\u56fe\u3002\n\u5b64\u7acb\u5730\u8bf4\uff0c\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u7ee7\u627f\u90fd\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u60f3\u8981\u5c06\u4e00\u4e2aC++\u5bf9\u8c61\u516c\u5f00\u5230Java\u4e2d\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u60a8\u4e5f\u8bb8\u53ef\u4ee5\u9075\u5faa.NET\u6216Kaffe\u65b9\u6cd5\uff0c\u5e76\u4e14\u4ec5\u652f\u6301\u4e0eC++\u7684\u5b50\u96c6(\u6258\u7ba1C++\u6216C++/CLI)\u7684\u76f4\u63a5\u4e92\u64cd\u4f5c\u6027\uff0c\u8be5\u5b50\u96c6\u4ec5\u652f\u6301\u5c06\u5728\u5c4f\u969c\u7684Java\u7aef\u516c\u5f00\u7684\u7c7b\u7684\u5355\u4e00\u7ee7\u627f\u3002\n\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5b9a\u4e49\u4e00\u79cd\u8bed\u8a00\u7684\u5b50\u96c6\uff0c\u8be5\u5b50\u96c6\u6e05\u6670\u5730\u6620\u5c04\u5230\u53e6\u4e00\u79cd\u8bed\u8a00\uff0c\u4f46\u53ef\u4ee5\u7406\u89e3\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u5168\u90e8\u529f\u80fd\u3002\u8fd9\u5c31\u662f\u52a1\u5b9e\u7684Smalltalk\u4e2d\u91c7\u7528\u7684\u65b9\u6cd5\uff1a5\u5141\u8bb8Objective-C++\u5bf9\u8c61(\u53ef\u4ee5\u5c06C++\u5bf9\u8c61\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u5e76\u8c03\u7528\u5b83\u4eec\u7684\u65b9\u6cd5)\u76f4\u63a5\u516c\u5f00\uff0c\u5c31\u50cf\u5b83\u4eec\u662fSmalltalk\u5bf9\u8c61\u4e00\u6837\uff0c\u5171\u4eab\u76f8\u540c\u7684\u5e95\u5c42\u8868\u793a\u3002\n\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4ecd\u7136\u5b58\u5728\u8ba4\u77e5\u969c\u788d\u3002\u5982\u679c\u60a8\u60f3\u8981\u76f4\u63a5\u4f7f\u7528C++\u6846\u67b6\uff0c\u4f8b\u5982\u52a1\u5b9e\u7684Smalltalk\u6216.NET\u4e2d\u7684LLVM\uff0c\u90a3\u4e48\u60a8\u5c06\u9700\u8981\u7f16\u5199\u5355\u7ee7\u627f\u7c7b\u6765\u5c01\u88c5\u8be5\u5e93\u7528\u4e8e\u5176\u5927\u90e8\u5206\u6838\u5fc3\u7c7b\u578b\u7684\u591a\u91cd\u7ee7\u627f\u7c7b\u3002\n\u53e6\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u662f\u907f\u514d\u516c\u5f00\u5bf9\u8c61\u4e2d\u7684\u4efb\u4f55\u5b57\u6bb5\uff0c\u800c\u53ea\u5c06\u6bcf\u4e2aC++\u7c7b\u516c\u5f00\u4e3a\u63a5\u53e3\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u7279\u6b8a\u7684\u7f16\u8bd1\u5668\u652f\u6301\uff0c\u5c31\u4e0d\u53ef\u80fd\u4ece\u6865\u63a5\u7684\u7c7b\u7ee7\u627f\uff0c\u4ece\u800c\u65e0\u6cd5\u7406\u89e3\u67d0\u4e9b\u63a5\u53e3\u662f\u968f\u5b9e\u73b0\u4e00\u8d77\u6765\u7684\u3002\n\u867d\u7136\u590d\u6742\uff0c\u4f46\u4e0e\u5728\u65b9\u6cd5\u67e5\u627e\u542b\u4e49\u4e0d\u540c\u7684\u8bed\u8a00\u4e4b\u95f4\u4ea4\u4e92\u76f8\u6bd4\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u7cfb\u7edf\u3002\u4f8b\u5982\uff0cJava\u548cSmalltalk\u5177\u6709\u51e0\u4e4e\u76f8\u540c\u7684\u5bf9\u8c61\u548c\u5185\u5b58\u6a21\u578b\uff0c\u4f46\u662fJava\u5c06\u65b9\u6cd5\u5206\u6d3e\u7684\u6982\u5ff5\u7ed1\u5b9a\u5230\u7c7b\u5c42\u6b21\u7ed3\u6784\uff0c\u800c\u5728Smalltalk\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u5b9e\u73b0\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u5219\u5b83\u4eec\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\u3002\n\u8fd9\u662fRedline Smalltalk\u9047\u5230\u7684\u95ee\u9898\uff0c1\u5b83\u7f16\u8bd1Smalltalk\u4ee5\u4fbf\u5728JVM\u4e0a\u8fd0\u884c\u3002\u5b83\u5b9e\u73b0Smalltalk\u65b9\u6cd5\u5206\u6d3e\u7684\u673a\u5236\u5305\u62ec\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u751f\u6210\u4e00\u4e2aJava\u63a5\u53e3\uff0c\u7136\u540e\u5728\u5206\u6d3e\u4e4b\u524d\u6267\u884c\u63a5\u6536\u5668\u5230\u76f8\u5173\u63a5\u53e3\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362\u3002\u5411Java\u7c7b\u53d1\u9001\u6d88\u606f\u9700\u8981\u989d\u5916\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u73b0\u6709\u7684Java\u7c7b\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1b\u56e0\u6b64\uff0cRedline Smalltalk\u5fc5\u987b\u9000\u56de\u5230\u4f7f\u7528Java\u7684\u53cd\u5c04API\u3002\nSmalltalk(\u548cObjective-C)\u7684\u65b9\u6cd5\u67e5\u627e\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3a\u6709\u8bb8\u591a\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u7f3a\u5931\u6216\u53d7\u9650\u7684\u7b2c\u4e8c\u6b21\u673a\u4f1a\u5206\u6d3e\u673a\u5236\u3002\u5728\u5c06Objective-C\u7f16\u8bd1\u4e3aJavaScript\u65f6\uff0c\u800c\u4e0d\u662f\u4f7f\u7528JavaScript\u65b9\u6cd5\u8c03\u7528\uff0c\u60a8\u5fc5\u987b\u5c06\u53d1\u9001\u7684\u6bcf\u4e2aObjective-C\u6d88\u606f\u5305\u88c5\u5728\u4e00\u4e2a\u5c0f\u51fd\u6570\u4e2d\uff0c\u8be5\u51fd\u6570\u9996\u5148\u68c0\u67e5\u8be5\u65b9\u6cd5\u662f\u5426\u5b9e\u9645\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8c03\u7528\u4e00\u4e9b\u67e5\u627e\u4ee3\u7801\u3002\n\u8fd9\u5728JavaScript\u4e2d\u76f8\u5bf9\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u4ee5\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u5f0f\u5904\u7406\u5404\u79cd\u51fd\u6570\uff1a\u5982\u679c\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\u4f7f\u7528\u7684\u53c2\u6570\u6bd4\u5b83\u9884\u671f\u7684\u591a\uff0c\u90a3\u4e48\u5b83\u4f1a\u5c06\u5269\u4f59\u7684\u53c2\u6570\u4f5c\u4e3a\u5b83\u53ef\u4ee5\u9884\u671f\u7684\u6570\u7ec4\u6765\u63a5\u6536\u3002\u56f4\u68cb\u4e5f\u4f1a\u505a\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002\u7c7bC\u8bed\u8a00\u53ea\u662f\u5c06\u5b83\u4eec\u653e\u5728\u5806\u6808\u4e0a\uff0c\u5e76\u671f\u671b\u7a0b\u5e8f\u5458\u5728\u4e0d\u8fdb\u884c\u9519\u8bef\u68c0\u67e5\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u5199\u5165\u3002\n\u5185\u5b58\u6a21\u578b\u4e2d\u660e\u663e\u7684\u4e8c\u5206\u6cd5\u662f\u5728\u81ea\u52a8\u91ca\u653e\u548c\u624b\u52a8\u91ca\u653e\u4e4b\u95f4\u3002\u4e00\u4e2a\u7a0d\u5fae\u91cd\u8981\u4e00\u70b9\u7684\u95ee\u9898\u662f\u786e\u5b9a\u6027\u7834\u574f\u548c\u975e\u786e\u5b9a\u6027\u7834\u574f\u4e4b\u95f4\u7684\u533a\u522b\u3002\n\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528Boehm-Demers-Weiser\u5783\u573e\u6536\u96c6\u56683\u8fd0\u884cC\u662f\u6ca1\u6709\u95ee\u9898\u7684(\u9664\u975e\u5185\u5b58\u7528\u5b8c\u5e76\u4e14\u6709\u5f88\u591a\u770b\u8d77\u6765\u50cf\u6307\u9488\u7684\u6574\u6570)\u3002\u5bf9\u4e8eC++\u6765\u8bf4\uff0c\u505a\u540c\u6837\u7684\u4e8b\u60c5\u8981\u56f0\u96be\u5f97\u591a\uff0c\u56e0\u4e3a\u5bf9\u8c61\u91ca\u653e\u662f\u4e00\u4e2a\u53ef\u89c2\u5bdf\u5230\u7684\u4e8b\u4ef6\u3002\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a\nLockHolder\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u5bf9\u8c61\uff1b\u4e92\u65a5\u4f53\u4f20\u5165\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u5176\u6784\u9020\u51fd\u6570\u4e2d\u9501\u5b9a\u4e92\u65a5\u4f53\uff0c\u5e76\u5728\u6790\u6784\u51fd\u6570\u4e2d\u89e3\u9501\u3002\u73b0\u5728\uff0c\u60f3\u8c61\u4e00\u4e0b\u5728\u5b8c\u5168\u5783\u573e\u56de\u6536\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801-\u6790\u6784\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u95f4\u6ca1\u6709\u5b9a\u4e49\u3002\n\u8fd9\u4e2a\u4f8b\u5b50\u76f8\u5bf9\u7b80\u5355\uff0c\u5f88\u5bb9\u6613\u505a\u5bf9\u3002\u6b64\u65f6\u9700\u8981\u5783\u573e\u6536\u96c6\u7684C++\u5b9e\u73b0\u6765\u8fd0\u884c\u6790\u6784\u51fd\u6570\uff0c\u4f46\u4e0d\u9700\u8981\u91ca\u653e\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4e60\u60ef\u7528\u6cd5\u5728\u4ece\u4e00\u5f00\u59cb\u5c31\u652f\u6301\u5783\u573e\u6536\u96c6\u7684\u8bed\u8a00\u4e2d\u662f\u4e0d\u53ef\u7528\u7684\u3002\u6df7\u5408\u5b83\u4eec\u7684\u57fa\u672c\u95ee\u9898\u4e0d\u662f\u786e\u5b9a\u8c01\u8d1f\u8d23\u91ca\u653e\u5185\u5b58\uff1b\u76f8\u53cd\uff0c\u4e3a\u4e00\u4e2a\u6a21\u578b\u7f16\u5199\u7684\u4ee3\u7801\u9700\u8981\u786e\u5b9a\u6027\u64cd\u4f5c\uff0c\u800c\u4e3a\u53e6\u4e00\u4e2a\u6a21\u578b\u7f16\u5199\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u786e\u5b9a\u6027\u64cd\u4f5c\u3002\n\u6709\u4e24\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0C++\u7684\u5783\u573e\u6536\u96c6\uff1a\u7b2c\u4e00\u79cd\u662f\u8ba9\u5220\u9664\u64cd\u4f5c\u7b26\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u4f46\u4e0d\u56de\u6536\u5e95\u5c42\u5b58\u50a8\uff1b\u53e6\u4e00\u79cd\u662f\u5c06\u5220\u9664\u8bbe\u4e3a\u65e0\u64cd\u4f5c\uff0c\u5e76\u5728\u68c0\u6d4b\u5230\u5bf9\u8c61\u4e0d\u53ef\u8bbf\u95ee\u65f6\u8c03\u7528\u6790\u6784\u51fd\u6570\u3002\n\u53ea\u8c03\u7528delete\u7684\u6790\u6784\u51fd\u6570\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\u662f\u76f8\u540c\u7684\uff1a\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u65e0\u64cd\u4f5c\u7684\u3002\u91ca\u653e\u5176\u4ed6\u8d44\u6e90\u7684\u6790\u6784\u51fd\u6570\u662f\u4e0d\u540c\u7684\u3002\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u53ef\u4ee5\u786e\u5b9a\u5730\u8fd0\u884c\uff0c\u4f46\u5982\u679c\u7a0b\u5e8f\u5458\u4e0d\u663e\u5f0f\u5220\u9664\u76f8\u5173\u5bf9\u8c61\uff0c\u5b83\u4eec\u5c06\u65e0\u6cd5\u8fd0\u884c\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u4eec\u6700\u7ec8\u4f1a\u8fd0\u884c\uff0c\u4f46\u4e0d\u4e00\u5b9a\u4f1a\u5728\u5e95\u5c42\u8d44\u6e90\u8017\u5c3d\u65f6\u8fd0\u884c\u3002\n\u6b64\u5916\uff0c\u5728\u8bb8\u591a\u8bed\u8a00\u4e2d\uff0c\u4e00\u4e2a\u76f8\u5f53\u5e38\u89c1\u7684\u4e60\u60ef\u7528\u6cd5\u662f\u81ea\u6709\u5bf9\u8c61\uff0c\u5b83\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\u6216\u6267\u884c\u4e00\u4e2a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u7136\u540e\u89e6\u53d1\u56de\u8c03\u3002\u7136\u540e\uff0c\u56de\u8c03\u7684\u63a5\u6536\u65b9\u8d1f\u8d23\u6e05\u7406\u901a\u77e5\u5668\u3002\u5f53\u5b83\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u65f6\uff0c\u5b83\u4e0e\u5bf9\u8c61\u56fe\u7684\u5176\u4f59\u90e8\u5206\u65ad\u5f00\u8fde\u63a5\uff0c\u56e0\u6b64\u770b\u8d77\u6765\u662f\u5783\u573e\u3002\u5fc5\u987b\u660e\u786e\u544a\u8bc9\u6536\u96c6\u5668\u5b83\u4e0d\u662f\u3002\u8fd9\u4e0e\u6ca1\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u7684\u8bed\u8a00\u4e2d\u7684\u6a21\u5f0f\u76f8\u53cd\uff0c\u5728\u6ca1\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u7684\u8bed\u8a00\u4e2d\uff0c\u9664\u975e\u7cfb\u7edf\u53e6\u884c\u901a\u77e5\uff0c\u5426\u5219\u5047\u5b9a\u5bf9\u8c61\u662f\u6d3b\u52a8\u7684\u3002(\u6c49\u65af\u00b7\u535a\u59c6(Hans Boehm)\u57281996\u5e74\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba\u4e86\u5176\u4e2d\u4e00\u4e9b\u95ee\u9898\u30022)\u3002\n\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u90fd\u51fa\u73b0\u5728\u82f9\u679c\u5c06\u5783\u573e\u6536\u96c6\u6dfb\u52a0\u5230Objective-C\u7684\u5931\u8d25(\u8c22\u5929\u8c22\u5730\uff0c\u4e0d\u518d\u652f\u6301)\u5c1d\u8bd5\u4e2d\u3002\u5f88\u591aObjective-C\u4ee3\u7801\u4f9d\u8d56\u4e8e-dealloc\u65b9\u6cd5\u4e2d\u7684\u8fd0\u884c\u4ee3\u7801\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u4e0e\u4e92\u64cd\u4f5c\u6027\u95ee\u9898\u5bc6\u5207\u76f8\u5173\u3002\u8be5\u5b9e\u73b0\u540c\u65f6\u652f\u6301\u8ddf\u8e2a\u5185\u5b58\u548c\u672a\u8ddf\u8e2a\u5185\u5b58\uff0c\u4f46\u4e0d\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u516c\u5f00\u6b64\u4fe1\u606f\u3002\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\uff1a\nvoid allocateSomeObjects(id*buffer\uff0cint count){for(int i=0\uff1bi&lt\uff1bcount\uff1bi++)for(int i=0\uff1bi&lt\uff1bcount\uff1bi++)for(id allocateSomeObjects(id*buffer\uff0cint count)){0}{0}\u3002\n\u5728\u5783\u573e\u6536\u96c6\u6a21\u5f0f\u4e0b\uff0c\u65e0\u6cd5\u5224\u65ad\u6b64\u4ee3\u7801\u662f\u5426\u6b63\u786e\u3002\u5b83\u7684\u6b63\u786e\u4e0e\u5426\u53d6\u51b3\u4e8e\u547c\u53eb\u8005\u3002\u5982\u679c\u8c03\u7528\u65b9\u4f20\u9012\u4f7f\u7528NSAllocateCollectable()\u5206\u914d\u7684\u7f13\u51b2\u533a\u3001\u5c06NSScannedOption\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5206\u914d\u7684\u7f13\u51b2\u533a\uff0c\u6216\u8005\u4f7f\u7528\u5806\u6808\u4e0a\u5206\u914d\u7684\u7f13\u51b2\u533a\u6216\u4f7f\u7528\u5783\u573e\u6536\u96c6\u652f\u6301\u7f16\u8bd1\u7684\u7f16\u8bd1\u5355\u5143\u4e2d\u7684\u5168\u5c40\u7f13\u51b2\u533a\u5206\u914d\u7684\u7f13\u51b2\u533a\uff0c\u5219\u5bf9\u8c61\u5c06(\u81f3\u5c11)\u4e0e\u7f13\u51b2\u533a\u4e00\u6837\u957f\u3002\u5982\u679c\u8c03\u7528\u65b9\u4f20\u9012\u4f7f\u7528malloc()\u5206\u914d\u7684\u7f13\u51b2\u533a\uff0c\u6216\u8005\u4f5c\u4e3aC\u6216C++\u7f16\u8bd1\u5355\u5143\u4e2d\u7684\u5168\u5c40\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u5bf9\u8c61\u5c06(\u53ef\u80fd)\u5728\u7f13\u51b2\u533a\u4e4b\u524d\u88ab\u91ca\u653e\u3002\u8fd9\u53e5\u8bdd\u4e2d\u7684\u201c\u6f5c\u5728\u201d\u4f7f\u8fd9\u6210\u4e3a\u4e00\u4e2a\u66f4\u5927\u7684\u95ee\u9898\uff1a\u56e0\u4e3a\u5b83\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u5f88\u96be\u8c03\u8bd5\u3002\nObjective-C\u7684ARC(\u81ea\u52a8\u5f15\u7528\u8ba1\u6570)\u6269\u5c55\u4e0d\u63d0\u4f9b\u5b8c\u6574\u7684\u5783\u573e\u6536\u96c6(\u5b83\u4eec\u4ecd\u7136\u5141\u8bb8\u5783\u573e\u5468\u671f\u6cc4\u6f0f)\uff0c\u4f46\u5b83\u4eec\u786e\u5b9e\u6269\u5c55\u4e86\u7c7b\u578b\u7cfb\u7edf\u4ee5\u5b9a\u4e49\u6b64\u7c7b\u7f13\u51b2\u533a\u7684\u6240\u6709\u6743\u7c7b\u578b\u3002\u5c06\u5bf9\u8c61\u6307\u9488\u590d\u5236\u5230C\u9700\u8981\u63d2\u5165\u5305\u542b\u6240\u6709\u6743\u8f6c\u79fb\u7684\u663e\u5f0f\u5f3a\u5236\u8f6c\u6362\u3002\n\u5f15\u7528\u8ba1\u6570\u8fd8\u89e3\u51b3\u4e86\u975e\u5faa\u73af\u6570\u636e\u7684\u786e\u5b9a\u6027\u95ee\u9898\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u4e0e\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u4e92\u64cd\u4f5c\u7684\u6709\u8da3\u65b9\u5f0f\uff1a\u901a\u8fc7\u8bbe\u7f6efree()\u6765\u9012\u51cf\u5f15\u7528\u8ba1\u6570\u3002\u5faa\u73af(\u6216\u6f5c\u5728\u5faa\u73af)\u6570\u636e\u7ed3\u6784\u9700\u8981\u6dfb\u52a0\u5faa\u73af\u68c0\u6d4b\u5668\u3002\u5927\u536b\u00b7F\u00b7\u57f9\u6839(David F.Bacon)\u5728IBM\u7684\u56e2\u961f\u5df2\u7ecf\u4e3a\u5468\u671f\u68c0\u6d4b\u56688\u8bbe\u8ba1\u4e86\u8bb8\u591a\u4ea7\u54c1\uff0c\u53ea\u8981\u6307\u9488\u80fd\u591f\u88ab\u51c6\u786e\u8bc6\u522b\uff0c\u5f15\u7528\u8ba1\u6570\u5c31\u53ef\u4ee5\u6210\u4e3a\u4e00\u79cd\u5b8c\u6574\u7684\u5783\u573e\u6536\u96c6\u673a\u5236\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5faa\u73af\u68c0\u6d4b\u6d89\u53ca\u4ece\u6f5c\u5728\u7684\u5faa\u73af\u5bf9\u8c61\u904d\u5386\u6574\u4e2a\u5bf9\u8c61\u56fe\u3002\u53ef\u4ee5\u91c7\u53d6\u4e00\u4e9b\u7b80\u5355\u7684\u6b65\u9aa4\u6765\u964d\u4f4e\u8fd9\u4e00\u6210\u672c\u3002\u6700\u660e\u663e\u7684\u4e00\u4e2a\u5c31\u662f\u63a8\u8fdf\u5b83\u3002\u5982\u679c\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u9012\u51cf\u4f46\u672a\u91ca\u653e\uff0c\u5219\u8be5\u5bf9\u8c61\u4ec5\u53ef\u80fd\u662f\u5468\u671f\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u5b83\u540e\u6765\u9012\u589e\uff0c\u90a3\u4e48\u5b83\u5c31\u4e0d\u662f\u5783\u573e\u5faa\u73af\u7684\u4e00\u90e8\u5206(\u5b83\u53ef\u80fd\u4ecd\u7136\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u60a8\u73b0\u5728\u8fd8\u4e0d\u5728\u4e4e)\u3002\u5982\u679c\u5b83\u7a0d\u540e\u88ab\u91ca\u653e\uff0c\u5219\u5b83\u662f\u975e\u5faa\u73af\u7684\u3002\n\u5468\u671f\u68c0\u6d4b\u5ef6\u8fdf\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u5f97\u5230\u7684\u4e0d\u786e\u5b9a\u6027\u5c31\u8d8a\u5927\uff0c\u4f46\u662f\u5468\u671f\u68c0\u6d4b\u5668\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u8d8a\u5c11\u3002\n\u5982\u4eca\uff0c\u5927\u591a\u6570\u4eba\u8ba4\u4e3a\u5f02\u5e38\u662f\u7531C++\u666e\u53ca\u7684\uff1a\u5927\u81f4\u7b49\u540c\u4e8eC\u4e2d\u7684setjmp()\u548clong jmp()\uff0c\u5c3d\u7ba1\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u673a\u5236\u3002\n\u5df2\u7ecf\u63d0\u51fa\u4e86\u4e00\u4e9b\u5176\u4ed6\u4f8b\u5916\u673a\u5236\u3002\u5728Smalltalk-80\u4e2d\uff0c\u5f02\u5e38\u5b8c\u5168\u5728\u5e93\u4e2d\u5b9e\u73b0\u3002\u8be5\u8bed\u8a00\u63d0\u4f9b\u7684\u552f\u4e00\u539f\u8bed\u662f\uff0c\u5f53\u60a8\u663e\u5f0f\u5730\u4ece\u95ed\u5305\u8fd4\u56de\u65f6\uff0c\u60a8\u5c06\u4ece\u58f0\u660e\u95ed\u5305\u7684\u4f5c\u7528\u57df\u8fd4\u56de\u3002\u5982\u679c\u5728\u5806\u6808\u4e2d\u5411\u4e0b\u4f20\u9012\u95ed\u5305\uff0c\u5219\u8fd4\u56de\u5c06\u9690\u5f0f\u5c55\u5f00\u5806\u6808\u3002\n\u5f53Smalltalk\u5f02\u5e38\u53d1\u751f\u65f6\uff0c\u5b83\u4f1a\u8c03\u7528\u5806\u6808\u9876\u90e8\u7684\u5904\u7406\u7a0b\u5e8f\u5757\u3002\u7136\u540e\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fd4\u56de\uff0c\u8feb\u4f7f\u5806\u6808\u5c55\u5f00\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u4f1a\u8fdb\u884c\u4e00\u4e9b\u6e05\u7406\u3002\u5806\u6808\u672c\u8eab\u662f\u6fc0\u6d3b\u8bb0\u5f55(\u5373\u5bf9\u8c61)\u7684\u5217\u8868\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u6267\u884c\u66f4\u590d\u6742\u7684\u64cd\u4f5c\u3002Common Lisp\u8fd8\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e30\u5bcc\u7684\u5f02\u5e38\uff0c\u5305\u62ec\u90a3\u4e9b\u652f\u6301\u7acb\u5373\u6062\u590d\u6216\u91cd\u65b0\u542f\u52a8\u7684\u5f02\u5e38\u3002\n\u5373\u4f7f\u5728\u5177\u6709\u7c7b\u4f3c\u5f02\u5e38\u6a21\u578b\u7684\u8bed\u8a00\u4e2d\uff0c\u5f02\u5e38\u4e92\u64cd\u4f5c\u6027\u4e5f\u5f88\u56f0\u96be\u3002\u4f8b\u5982\uff0cC++\u548cObjective-C\u90fd\u6709\u7c7b\u4f3c\u7684\u5f02\u5e38\u6982\u5ff5\uff0c\u4f46\u662f\u671f\u671b\u6355\u6349void*\u7684C++catch\u5757\u5728\u9047\u5230Objective-C\u5bf9\u8c61\u6307\u9488\u65f6\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u5728GNUstep Objective-C\u8fd0\u884c\u65f66\u4e2d\uff0c\u5728\u51b3\u5b9a\u4e0d\u6a21\u4effApple\u7684\u5206\u6bb5\u9519\u8bef\u884c\u4e3a\u540e\uff0c\u6211\u4eec\u9009\u62e9\u4e0d\u6355\u83b7\u5b83\u3002OSX\u7684\u6700\u65b0\u7248\u672c\u90fd\u91c7\u7528\u4e86\u8fd9\u79cd\u884c\u4e3a\uff0c\u4f46\u8fd9\u4e2a\u51b3\u5b9a\u6709\u70b9\u6b66\u65ad\u3002\n\u5373\u4f7f\u60a8\u786e\u5b9e\u4eceC++\u6355\u83b7\u4e86\u5bf9\u8c61\u6307\u9488\uff0c\u8fd9\u4e5f\u4e0d\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u5f53\u5b83\u88ab\u6355\u83b7\u65f6\uff0c\u60a8\u5df2\u7ecf\u4e22\u5931\u4e86\u6240\u6709\u7c7b\u578b\u4fe1\u606f\uff0c\u5e76\u4e14\u65e0\u6cd5\u786e\u5b9a\u5b83\u662fObjective-C\u5bf9\u8c61\u3002\n\u5f53\u60a8\u5f00\u59cb\u8003\u8651\u6027\u80fd\u65f6\uff0c\u66f4\u5fae\u5999\u7684\u95ee\u9898\u5c31\u4f1a\u6084\u6084\u51fa\u73b0\u3002VMKit7\u7684\u65e9\u671f\u7248\u672c(\u5728LLVM\u4e4b\u4e0a\u5b9e\u73b0Java\u548cCLRVM)\u4f7f\u7528\u4e3aC++\u8bbe\u8ba1\u7684\u96f6\u6210\u672c\u5f02\u5e38\u6a21\u578b\u3002\u8fd9\u662f\u96f6\u6210\u672c\uff0c\u56e0\u4e3a\u8fdb\u5165try\u5757\u4e0d\u9700\u8981\u4efb\u4f55\u8d39\u7528\u3002\u7136\u800c\uff0c\u5f53\u629b\u51fa\u5f02\u5e38\u65f6\uff0c\u60a8\u5fc5\u987b\u89e3\u6790\u4e00\u4e9b\u63cf\u8ff0\u5982\u4f55\u5c55\u5f00\u5806\u6808\u7684\u8868\uff0c\u7136\u540e\u8c03\u7528\u6bcf\u4e2a\u5806\u6808\u5e27\u7684\u4e2a\u6027\u51fd\u6570\u6765\u51b3\u5b9a\u662f\u5426(\u4ee5\u53ca\u5728\u54ea\u91cc)\u5e94\u8be5\u6355\u83b7\u5f02\u5e38\u3002\n\u8fd9\u79cd\u673a\u5236\u975e\u5e38\u9002\u5408C++\uff0c\u56e0\u4e3a\u5728C++\u4e2d\u5f88\u5c11\u51fa\u73b0\u5f02\u5e38\uff0c\u4f46\u662fJava\u4f7f\u7528\u5f02\u5e38\u6765\u62a5\u544a\u5927\u91cf\u76f8\u5f53\u5e38\u89c1\u7684\u9519\u8bef\u60c5\u51b5\u3002\u5728\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u653e\u5377\u673a\u7684\u6027\u80fd\u662f\u4e00\u4e2a\u9650\u5236\u56e0\u7d20\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u9488\u5bf9\u53ef\u80fd\u5f15\u53d1\u5f02\u5e38\u7684\u65b9\u6cd5\u4fee\u6539\u4e86\u8c03\u7528\u7ea6\u5b9a\u3002\u8fd9\u4e9b\u51fd\u6570\u5c06\u5f02\u5e38\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u8fd4\u56de(\u901a\u5e38\u5728\u4e0d\u540c\u7684\u5bc4\u5b58\u5668\u4e2d)\uff0c\u6bcf\u4e2a\u8c03\u7528\u53ea\u9700\u68c0\u67e5\u8be5\u5bc4\u5b58\u5668\u662f\u5426\u5305\u542b0\uff0c\u5982\u679c\u4e0d\u5305\u542b\uff0c\u5219\u8df3\u8f6c\u5230\u5f02\u5e38\u5904\u7406\u5757\u3002\n\u5f53\u60a8\u63a7\u5236\u6bcf\u4e2a\u8c03\u7528\u65b9\u7684\u4ee3\u7801\u751f\u6210\u5668\u65f6\uff0c\u8fd9\u5f88\u597d\uff0c\u4f46\u5728\u8de8\u8bed\u8a00\u573a\u666f\u4e2d\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5411C\u6dfb\u52a0\u53e6\u4e00\u4e2a\u53cd\u6620\u6b64\u884c\u4e3a\u7684\u8c03\u7528\u7ea6\u5b9a\u6216\u63d0\u4f9b\u7c7b\u4f3c\u4e8eGO\u4e2d\u901a\u5e38\u7528\u4e8e\u8fd4\u56de\u9519\u8bef\u6761\u4ef6\u7684\u591a\u8fd4\u56de\u503c\u673a\u5236\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u4f46\u8fd9\u5c06\u8981\u6c42\u6bcf\u4e2aC\u8c03\u7528\u8005\u90fd\u4e86\u89e3\u5916\u8bed\u8bed\u4e49\u3002\n\u5f53\u60a8\u5f00\u59cb\u5c06\u51fd\u6570\u5f0f\u8bed\u8a00\u5305\u62ec\u5728\u60a8\u5e0c\u671b\u4e0e\u4e4b\u4e92\u64cd\u4f5c\u7684\u96c6\u5408\u4e2d\u65f6\uff0c\u53ef\u53d8\u6027\u7684\u6982\u5ff5\u5c31\u53d8\u5f97\u5f88\u91cd\u8981\u3002\u50cfHaskell\u8fd9\u6837\u7684\u8bed\u8a00\u6ca1\u6709\u53ef\u53d8\u7c7b\u578b\u3002\u5c31\u5730\u4fee\u6539\u6570\u636e\u7ed3\u6784\u662f\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f5c\u4e3a\u4f18\u5316\u6765\u505a\u7684\u4e8b\u60c5\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5728\u8bed\u8a00\u4e2d\u516c\u5f00\u7684\u4e8b\u60c5\u3002\n\u8fd9\u662fF#\u9047\u5230\u7684\u95ee\u9898\uff0c\u5b83\u4f5c\u4e3aOCaml\u7684\u4e00\u79cd\u65b9\u8a00\u51fa\u552e\uff0c\u53ef\u4ee5\u4e0e\u5176\u4ed6.NET\u8bed\u8a00\u96c6\u6210\uff0c\u4f7f\u7528C#\u7f16\u5199\u7684\u7c7b\uff0c\u7b49\u7b49\u3002C#\u5df2\u7ecf\u6709\u4e86\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u6982\u5ff5\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u62bd\u8c61\uff0c\u4f46\u4e0d\u53ef\u53d8\u7c7b\u53ea\u662f\u4e00\u4e2a\u4e0d\u516c\u5f00\u4efb\u4f55\u975e\u53ea\u8bfb\u5b57\u6bb5\u7684\u7c7b\uff0c\u5e76\u4e14\u53ea\u8bfb\u5b57\u6bb5\u53ef\u4ee5\u5305\u542b\u5bf9\u5bf9\u8c61\u7684\u5f15\u7528(\u901a\u8fc7\u4efb\u610f\u5f15\u7528\u94fe)\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5f15\u7528\u7684\u53ef\u53d8\u5bf9\u8c61\u7684\u72b6\u6001\u53ef\u4ee5\u5728\u51fd\u6570\u4ee3\u7801\u4e0b\u66f4\u6539\u3002\u5728\u5176\u4ed6\u8bed\u8a00(\u5982C++\u6216Objective-C)\u4e2d\uff0c\u53ef\u53d8\u6027\u901a\u5e38\u662f\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e9b\u4e0d\u53ef\u53d8\u7684\u7c7b\u5728\u7c7b\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u6ca1\u6709\u8bed\u8a00\u652f\u6301\uff0c\u4e5f\u6ca1\u6709\u786e\u5b9a\u5bf9\u8c61\u662f\u5426\u53ef\u53d8\u7684\u7b80\u5355\u65b9\u6cd5\u3002\n\u5728\u8bed\u8a00\u63d0\u4f9b\u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\uff0cC\u548cC++\u5177\u6709\u975e\u5e38\u4e0d\u540c\u7684\u53ef\u53d8\u6027\u6982\u5ff5\uff1a\u5bf9\u5bf9\u8c61\u7684\u7279\u5b9a\u5f15\u7528\u53ef\u80fd\u4f1a\u4fee\u6539\u5b83\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u4fee\u6539\u5b83\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5bf9\u8c61\u672c\u8eab\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u4e00\u70b9\uff0c\u518d\u52a0\u4e0a\u6df1\u5ea6\u590d\u5236\u95ee\u9898\uff0c\u4f7f\u5f97\u51fd\u6570\u5f0f\u8bed\u8a00\u548c\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684\u63a5\u53e3\u6210\u4e3a\u4e00\u4e2a\u96be\u9898\u3002\n\u5355\u4f53\u4e3a\u754c\u9762\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8bf1\u4eba\u7684\u53ef\u80fd\u6027\u3002\u5355\u4f53\u662f\u8ba1\u7b97\u6b65\u9aa4\u7684\u6709\u5e8f\u5e8f\u5217\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u4e16\u754c\u4e2d\uff0c\u8fd9\u662f\u4e00\u7cfb\u5217\u6d88\u606f\u53d1\u9001\u6216\u65b9\u6cd5\u8c03\u7528\u3002\u5177\u6709Const(\u5e38\u91cf)\u7684C++\u6982\u5ff5\u7684\u65b9\u6cd5(\u5373\uff0c\u4e0d\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001)\u53ef\u4ee5\u5728Monad\u5916\u90e8\u8c03\u7528\uff0c\u56e0\u6b64\u670d\u4ece\u63a8\u6d4b\u6027\u6267\u884c\u548c\u56de\u6eaf\uff0c\u800c\u5176\u4ed6\u65b9\u6cd5\u5e94\u8be5\u6309\u7167Monad\u5b9a\u4e49\u7684\u4e25\u683c\u987a\u5e8f\u8c03\u7528\u3002\n\u53ef\u53d8\u6027\u548c\u5e76\u884c\u6027\u662f\u5bc6\u5207\u76f8\u5173\u7684\u3002\u7f16\u5199\u53ef\u7ef4\u62a4\u3001\u53ef\u4f38\u7f29\u3001\u5e76\u884c\u4ee3\u7801\u7684\u57fa\u672c\u89c4\u5219\u662f\uff0c\u4efb\u4f55\u5bf9\u8c61\u90fd\u4e0d\u80fd\u65e2\u662f\u53ef\u53d8\u7684\uff0c\u53c8\u662f\u522b\u540d\u7684\u3002\u5728\u7eaf\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u5b9e\u65bd\u8fd9\u4e00\u70b9\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff1a\u6839\u672c\u6ca1\u6709\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\u3002Erlang\u4ee5\u6d41\u7a0b\u5b57\u5178\u7684\u5f62\u5f0f\u5bf9\u53ef\u53d8\u6027\u505a\u51fa\u4e86\u8ba9\u6b65-\u4e00\u4e2a\u4ec5\u53ef\u4ece\u5f53\u524dErlang\u8fdb\u7a0b\u8bbf\u95ee\u7684\u53ef\u53d8\u5b57\u5178\uff0c\u56e0\u6b64\u6c38\u8fdc\u4e0d\u80fd\u5171\u4eab\u3002\n\u5c06\u5177\u6709\u4e0d\u540c\u5171\u4eab\u5185\u5bb9\u6982\u5ff5\u7684\u8bed\u8a00\u8fde\u63a5\u8d77\u6765\u4f1a\u5e26\u6765\u4e00\u4e9b\u72ec\u7279\u7684\u95ee\u9898\u3002\u8fd9\u5bf9\u4e8e\u4ee5\u5927\u89c4\u6a21\u5e76\u884c\u7cfb\u7edf\u6216GPU\u4e3a\u76ee\u6807\u7684\u8bed\u8a00\u6765\u8bf4\u5f88\u6709\u8da3\uff0c\u5728\u8fd9\u4e9b\u7cfb\u7edf\u6216GPU\u4e2d\uff0c\u8bed\u8a00\u7684\u6a21\u578b\u4e0e\u5e95\u5c42\u786c\u4ef6\u5bc6\u5207\u76f8\u5173\u3002\n\u8fd9\u662f\u8bd5\u56fe\u63d0\u53d6\u90e8\u5206C/C++/Fortran\u7a0b\u5e8f\u4ee5\u8f6c\u6362\u4e3aOpenCL\u65f6\u9047\u5230\u7684\u95ee\u9898\u3002\u6e90\u8bed\u8a00\u901a\u5e38\u5c06\u5c31\u5730\u4fee\u6539\u4f5c\u4e3a\u5b9e\u73b0\u7b97\u6cd5\u7684\u6700\u5feb\u65b9\u5f0f\uff0c\u800cOpenCL\u5219\u9f13\u52b1\u5bf9\u6e90\u7f13\u51b2\u533a\u8fdb\u884c\u5904\u7406\u4ee5\u751f\u6210\u8f93\u51fab\u7684\u6a21\u578b\u3002\n..", "note_en": "November 19, 2013   Volume 11, issue 10       Interoperability between languages has been a problem since the second programming language was invented. Solutions have ranged from language-independent object models such as COM (Component Object Model) and CORBA (Common Object Request Broker Architecture) to VMs (virtual machines) designed to integrate languages, such as the JVM (Java Virtual Machine) and CLR (Common Language Runtime). With software becoming ever more complex and hardware less homogeneous, the likelihood of a single language being the correct tool for an entire program is lower than ever. As modern compilers become more modular, there is potential for a new generation of interesting solutions.\n In 1961 the British company Stantec released a computer called the ZEBRA, which was interesting for a number of reasons, not least of which was its data flow-based instruction set. The ZEBRA was quite difficult to program with the full form of its native instruction set, so it also included a more conventional version, called Simple Code. This form came with some restrictions, including a limit of 150 instructions per program. The manual helpfully informs users that this is not a severe limitation, as it is impossible that someone would write a working program so complex that it would need more than 150 instructions.\n Today, this claim seems ludicrous. Even simple functions in a relatively low-level language such as C have more than 150 instructions once they are compiled, and most programs are far more than a single function. The shift from writing assembly code to writing in a higher-level language dramatically increased the complexity of programs that were possible, as did various software engineering practices.\n The trend toward increased complexity in software shows no sign of abating, and modern hardware creates new challenges. Programmers in the late 1990s had to target PCs at the low end that had an abstract model a lot like a fast PDP-11. At the high end, they would have encountered an abstract model like a very fast PDP-11, possibly with two to four (identical) processors. Now, mobile phones are starting to appear with eight cores with the same ISA (instruction set architecture) but different speeds, some other streaming processors optimized for different workloads (DSPs, GPUs), and other specialized cores.\n The traditional division between high-level languages representing the class that is similar to a human&#39;s understanding of the problem domain and low-level languages representing the class similar to the hardware no longer applies. No low-level language has semantics that are close to a programmable data-flow processor, an x86 CPU, a massively multithreaded GPU, and a VLIW (very long instruction word) DSP (digital signal processor). Programmers wanting to get the last bit of performance out of the available hardware no longer have a single language they can use for all probable targets.\n Similarly, at the other end of the abstraction spectrum, domain-specific languages are growing more prevalent. High-level languages typically trade generality for the ability to represent a subset of algorithms efficiently. More general-purpose high-level languages such as Java sacrifice the ability to manipulate pointers directly in exchange for providing the programmer with a more abstract memory model. Specialized languages such as SQL make certain categories of algorithms impossible to implement but make common tasks within their domain possible to express in a few lines.\n You can no longer expect a nontrivial application to be written in a single language. High-level languages typically call code written in lower-level languages as part of their standard libraries (for example, GUI rendering), but adding calls can be difficult.\n In particular, interfaces between two languages that are not C are often difficult to construct. Even relatively simple examples, such as bridging between C++ and Java, are not typically handled automatically and require a C interface. The Kaffe Native Interface 4 did provide a mechanism for doing this, but it was not widely adopted and had limitations.\n The problem of interfacing between languages is going to become increasingly important to compiler writers over the coming years. It presents a number of challenges, detailed here.\n  Object-oriented languages bind some notion of code and data together. Alan Kay, who helped develop object-oriented programming while at Xerox PARC, described objects as &#34;simple computers that communicate via message passing.&#34; This definition leaves a lot of leeway for different languages to fill in the details:\n   \u2022 Should there be zero (e.g., Go), one (e.g., Smalltalk, Java, JavaScript, Objective-C), or many (e.g., C++, Self, Simula) superclasses or prototypes for an object?\n    The question of multiple inheritance is one of the most common areas of focus. Single inheritance is convenient, because it simplifies many aspects of the implementation. Objects can be extended just by appending fields; a cast to the supertype just involves ignoring the end, and a cast to a subtype just involves a check\u2014the pointer values remain the same. Downcasting in C++ requires a complex search of the inheritance graph in the run-time type information via a runtime library function.\n In isolation, both types of inheritance are possible to implement, but what happens if you want, for example, to expose a C++ object into Java? You could perhaps follow the .NET or Kaffe approach, and support direct interoperability with only a subset of C++ (Managed C++ or C++/CLI) that supports single inheritance only for classes that will be exposed on the Java side of the barrier.\n This is a good solution in general: define a subset of one language that maps cleanly to the other but can understand the full power of the other. This is the approach taken in Pragmatic Smalltalk: 5 allow Objective-C++ objects (which can have C++ objects as instance variables and invoke their methods) to be exposed directly as if they were Smalltalk objects, sharing the same underlying representation.\n This approach still provides a cognitive barrier, however. If you want to use a C++ framework directly, such as LLVM from Pragmatic Smalltalk or .NET, then you will need to write single-inheritance classes that encapsulate the multiple-inheritance classes that the library uses for most of its core types.\n Another possible approach would be to avoid exposing any fields within the objects and just expose each C++ class as an interface. This would, however, make it impossible to inherit from the bridged classes without special compiler support to understand that some interfaces came along with implementation.\n Although complex, this is a simpler system than interfacing between languages that differ on what method lookup means. For example, Java and Smalltalk have almost identical object and memory models, but Java ties the notion of method dispatch to the class hierarchy, whereas in Smalltalk two objects can be used interchangeably if they implement methods with the same names.\n This is a problem encountered by RedLine Smalltalk, 1 which compiles Smalltalk to run on JVM. Its mechanism for implementing Smalltalk method dispatch involves generating a Java interface for each method and then performing a cast of the receiver to the relevant interface type before dispatch. Sending messages to Java classes requires extra information, because existing Java classes don&#39;t implement this; thus, RedLine Smalltalk must fall back to using Java&#39;s Reflection APIs.\n The method lookup for Smalltalk (and Objective-C) is more complex, because there are a number of second-chance dispatch mechanisms that are either missing or limited in other languages. When compiling Objective-C to JavaScript, rather than using the JavaScript method invocation, you must wrap each Objective-C message send in a small function that first checks if the method actually exists and, if it doesn&#39;t, calls some lookup code.\n This is relatively simple in JavaScript because it handles variadic functions in a convenient way: if a function or method is called with more arguments than it expects, then it receives the remainder as an array that it can expect. Go does something similar. C-like languages just put them on the stack and expect the programmer to do the write with no error checking.\n  The obvious dichotomy in memory models is between automatic and manual deallocation. A slightly more important concern is the difference between deterministic and nondeterministic destruction.\n It is possible to run C with the Boehm-Demers-Weiser garbage collector 3 without problems in many cases (unless you run out of memory and have a lot of integers that look like pointers). It is much harder to do the same for C++, because object deallocation is an observable event. Consider the following code:\n  The  LockHolder class defines a very simple object; a mutex passes into the object, which then locks the mutex in its constructor and unlocks it in the destructor. Now, imagine running this same code in a fully garbage-collected environment\u2014the time at which the destructor runs is not defined.\n This example is relatively simple to get right. A garbage-collected C++ implementation is required to run the destructor at this point but not to deallocate the object. This idiom is not available in languages that were designed to support garbage collection from the start. The fundamental problem with mixing them is not determining who is responsible for releasing memory; rather, it is that code written for one model expects deterministic operation, whereas code written for the other does not.\n There are two trivial approaches to implementing garbage collection for C++: the first is to make the  delete operator invoke destructors but not reclaim the underlying storage; the other is to make  delete a no-op and call destructors when the object is detected as unreachable.\n Destructors that call only  delete are the same in both cases: they are effectively no-ops. Destructors that release other resources are different. In the first case, they run deterministically but will fail to run if the programmer does not explicitly delete the relevant object. In the second case, they are guaranteed to run eventually but not necessarily by the time the underlying resource is exhausted.\n Additionally, a fairly common idiom in many languages is a self-owned object that waits for some event or performs a long-running task and then fires a callback. The receiver of the callback is then responsible for cleaning up the notifier. While it&#39;s live, it is disconnected from the rest of the object graph and so appears to be garbage. The collector must be explicitly told that it is not. This is the opposite of the pattern in languages without automatic garbage collection, where objects are assumed to be live unless the system is told otherwise. (Hans Boehm discussed some of these issues in more detail in a 1996 paper. 2)\n All of these problems were present with Apple&#39;s ill-fated (and, thankfully, no longer supported) attempt to add garbage collection to Objective-C. A lot of Objective-C code relies on running code in the  -dealloc method. Another issue was closely related to the problem of interoperability. The implementation supported both traced and untraced memory but did not expose this information in the type system. Consider the following snippet:\n void allocateSomeObjects (id * buffer, int count)  {   \u00a0 \u00a0 \u00a0for (int i=0 ; i&lt;count ; i++)   \u00a0 \u00a0 \u00a0{   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0buffer [i] = [SomeClass new];   \u00a0 \u00a0 \u00a0}  }\n In garbage-collected mode, it is impossible to tell if this code is correct. Whether it is correct or not depends on the caller. If the caller passes a buffer allocated with  NSAllocateCollectable(), with  NSScannedOption as the second parameter, or with a buffer allocated on the stack or in a global in a compilation unit compiled with garbage-collection support, then the objects will last (at least) as long as the buffer. If the caller passes a buffer that was allocated with  malloc() or as a global in a C or C++ compilation unit, then the objects will (potentially) be deallocated before the buffer. The  potentially in this sentence makes this a bigger problem: because it&#39;s nondeterministic, it is hard to debug.\n The ARC (Automatic Reference Counting) extensions to Objective-C do not provide complete garbage collection (they still allow garbage cycles to leak), but they do extend the type system to define the ownership type for such buffers. Copying object pointers to C requires the insertion of an explicit cast containing an ownership transfer.\n Reference counting also solves the determinism problem for acyclic data. In addition, it provides an interesting way of interoperating with manual memory management: by making  free() decrement the reference count. Cyclic (or potentially cyclic) data structures require the addition of a cycle detector. David F. Bacon&#39;s team at IBM has produced a number of designs for cycle detectors 8 that allow reference counting to be a full garbage-collection mechanism, as long as pointers can be accurately identified.\n Unfortunately, cycle detection involves walking the entire object graph from a potentially cyclic object. Some simple steps can be taken to lessen this cost. The obvious one is to defer it. An object is only potentially part of a cycle if its reference count is decremented but not deallocated. If it is later incremented, then it is not part of a garbage cycle (it may still be part of a cycle, but you don&#39;t care yet). If it is later deallocated, then it is acyclic.\n The longer you defer cycle detection, the more nondeterminism you get, but the less work the cycle detector has to do.\n  These days, most people think of exceptions in the sense popularized by C++: something that is roughly equivalent to  setjmp() and  longjmp() in C, although possibly with a different mechanism.\n A number of other mechanisms for exceptions have been proposed. In Smalltalk-80, exceptions are implemented entirely in the library. The only primitive that the language provides is that when you explicitly return from a closure, you return from the scope in which the closure was declared. If you pass a closure down the stack, then a return will implicitly unwind the stack.\n When a Smalltalk exception occurs, it invokes a handler block on the top of the stack. This may then return, forcing the stack to unwind, or it may do some cleanup. The stack itself is a list of activation records (which are objects) and therefore may do something more complex. Common Lisp provides a rich set of exceptions too, including those that support resuming or restarting immediately afterward.\n Exception interoperability is difficult even within languages with similar exception models. For example, C++ and Objective-C both have similar notions of an exception, but what should a C++ catch block that expects to catch a  void* do when it encounters an Objective-C object pointer? In the GNUstep Objective-C runtime 6, we chose not to catch it after deciding not to emulate Apple&#39;s behavior of a segmentation fault. Recent versions of OS X have adopted this behavior, but the decision is somewhat arbitrary.\n Even if you do catch the object pointer from C++, that doesn&#39;t mean that you can do anything with it. By the time it&#39;s caught, you&#39;ve lost all of the type information and have no way of determining that it is an Objective-C object.\n Subtler issues creep in when you start to think about performance. Early versions of VMKit 7 (which implements Java and CLR VMs on top of LLVM) used the zero-cost exception model designed for C++. This is  zero cost because entering a try block costs nothing. When throwing an exception, however, you must parse some tables that describe how to unwind the stack, then call into a personality function for each stack frame to decide whether (and where) the exception should be caught.\n This mechanism works very well for C++, where exceptions are rare, but Java uses exceptions to report lots of fairly common error conditions. In benchmarks, the performance of the unwinder was a limiting factor. To avoid this, the calling convention was modified for methods that were likely to throw an exception. These functions returned the exception as a second return value (typically in a different register), and every call just had to check that this register contained 0 or jump to the exception handling block if it did not.\n This is fine when you control the code generator for every caller, but this is not the case in a cross-language scenario. You might address the issue by adding another calling convention to C that mirrors this behavior or that provides something like the multiple-return-values mechanism commonly used in Go for returning error conditions, but that would require every C caller to be aware of the foreign language semantics.\n  When you start to include functional languages in the set with which you wish to interoperate, the notion of mutability becomes important. A language such as Haskell has no mutable types. Modifying a data structure in place is something that the compiler may do as an optimization, but it&#39;s not something exposed in the language.\n This is a problem encountered by F#, which is sold as a dialect of OCaml and can integrate with other .NET languages, use classes written in C#, and so on. C# already has a notion of mutable and immutable types. This is a very powerful abstraction, but an immutable class is simply one that doesn&#39;t expose any fields that are not read only, and a read-only field may contain references to objects that (via an arbitrary chain of references) refer to mutable objects whose state may be changed out from under the functional code. In other languages, such as C++ or Objective-C, mutability is typically implemented within the class system by defining some classes that are immutable, but there is no language support and no easy way of determining whether an object is mutable.\n C and C++ have a very different concept of mutability in the type system provided by the language: a particular reference to an object may or may not modify it, but this doesn&#39;t mean that the object itself won&#39;t change. This, combined with the deep copying problem, makes interfacing functional and object-oriented languages a difficult problem.\n Monads provide some tantalizing possibilities for the interface. A monad is an ordered sequence of computational steps. In an object-oriented world, this is a series of message sends or method invocations. Methods that have the C++ notion of const (i.e., do not modify the state of the object) may be invoked outside of the monad, and so are amenable to speculative execution and backtracking, whereas other methods should be invoked in a strict sequence defined by the monad.\n  Mutability and parallelism are closely related. The cardinal rule for writing maintainable, scalable, parallel code is that no object may be both mutable and aliased. This is trivial to enforce in a purely functional language: no object is mutable at all. Erlang makes one concession to mutability, in the form of a process dictionary\u2014a mutable dictionary that is accessible only from the current Erlang process and so can never be shared.\n Interfacing languages with different notions of what can be shared presents some unique problems. This is interesting for languages intended to target massively parallel systems or GPUs, where the model for the language is intimately tied to the underlying hardware.\n This is the issue encountered when trying to extract portions of C/C++/Fortran programs to turn into OpenCL. The source languages typically have in-place modification as the fastest way of implementing an algorithm, whereas OpenCL encourages a model where a source buffer is processed to generate an output b\n......", "posttime": "2020-05-25 04:15:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u8a00,cross,\u5bf9\u8c61", "title": "\u8de8\u8bed\u8a00\u4e92\u64cd\u4f5c\u6027\u7684\u6311\u6218(2013)", "title_en": "The Challenge of Cross-language Interoperability (2013)", "transed": 1, "url": "https://queue.acm.org/detail.cfm?id=2543971", "via": "", "real_tags": ["\u8bed\u8a00", "cross", "\u5bf9\u8c61"]}, {"category": "", "categoryclass": "", "imagename": "3445c16f7454e9db6b49393651c4472b.jpg", "infoid": 1003563, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u7f51\u7edc\u5b89\u5168\u9886\u57df\uff0c\u603b\u662f\u6709\u5f88\u591a\u4eba\u8c08\u8bba\u57f9\u8bad\u5458\u5de5\u610f\u8bc6\u5230\u7f51\u7edc\u9493\u9c7c\u4f01\u56fe\u7684\u91cd\u8981\u6027\u3002\u57f9\u8bad\u786e\u5b9e\u6709\u6548\uff0c\u4f46\u5b83\u4e0d\u662f\u4e07\u80fd\u7684\uff0c\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u603b\u4f1a\u6709\u5458\u5de5\u5728\u63a5\u53d7\u57f9\u8bad\u540e\u4e0a\u5f53\u53d7\u9a97\u3002\n\u5c3d\u7ba1\u6709\u5404\u79cd\u884c\u4e1a\u4f30\u8ba1\uff0c\u4f46\u4ee3\u7801\u5e93\u7ba1\u7406\u516c\u53f8GitLab Inc.\u3002\u4ed6\u4eec\u51b3\u5b9a\u5bf9\u81ea\u5df1\u7684\u5458\u5de5\u8fdb\u884c\u7f51\u7edc\u9493\u9c7c\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u7ed3\u679c\u5e76\u4e0d\u597d\uff1a\u4e94\u5206\u4e4b\u4e00\u7684\u5458\u5de5\u88ab\u5047\u7535\u5b50\u90ae\u4ef6\u8ff7\u4f4f\u4e86\u3002\n\u5468\u4e09\u5ba3\u5e03\u7684\u6f14\u4e60\u6d89\u53caGitLab\u6a21\u4eff\u9488\u5bf9GitLab\u5458\u5de5\u7684\u7f51\u7edc\u9493\u9c7c\u884c\u52a8\uff0c\u76ee\u7684\u662f\u83b7\u53d6GitLab.com\u51ed\u636e\u3002\u591a\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\u7b49\u9632\u5fa1\u63aa\u65bd\u4e0d\u88ab\u8ba4\u4e3a\u662f\u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\uff0c\u865a\u5047\u7f51\u7edc\u9493\u9c7c\u653b\u51fb\u65e8\u5728\u6a21\u4eff\u57fa\u672c\u653b\u51fb\uff0c\u901a\u8fc7\u865a\u5047\u767b\u5f55\u9875\u9762\u96c6\u4e2d\u5728\u4e3b\u8981\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u4e0a\u3002\n\u8fd9\u6b21\u6f14\u4e60\u80cc\u540e\u7684GitLab\u56e2\u961f\u8d2d\u4e70\u4e86\u57df\u540dgitlab.company\uff0c\u7136\u540e\u4f7f\u7528G Suite\u6765\u7b80\u5316\u9493\u9c7c\u7535\u5b50\u90ae\u4ef6\u7684\u4f20\u9012\u3002\u57df\u540d\u548cG Suite\u670d\u52a1\u88ab\u8bbe\u7f6e\u4e3a\u770b\u8d77\u6765\u5408\u6cd5\uff0c\u5e76\u914d\u6709SSL\u8bc1\u4e66\uff0c\u4ee5\u4f7f\u7535\u5b50\u90ae\u4ef6\u5728\u81ea\u52a8\u7f51\u7edc\u9493\u9c7c\u7f51\u7ad9\u68c0\u6d4b\u548c\u4eba\u5de5\u68c0\u67e5\u4e2d\u770b\u8d77\u6765\u4e0d\u90a3\u4e48\u53ef\u7591\u3002\nGitLab\u768450\u540d\u5458\u5de5\u6536\u5230\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u8981\u6c42\u4ed6\u4eec\u70b9\u51fb\u4e00\u4e2a\u94fe\u63a5\u63a5\u53d7\u5347\u7ea7\u3002\u8fd9\u4e2a\u94fe\u63a5\u5c06\u4ed6\u4eec\u5e26\u5230\u4e86\u5047\u7684gitlab.company\u7f51\u7ad9\uff0c\u4ed6\u4eec\u88ab\u8981\u6c42\u5728\u90a3\u91cc\u8f93\u5165\u4ed6\u4eec\u7684\u767b\u5f55\u8be6\u7ec6\u4fe1\u606f\u3002\n\u79ef\u6781\u7684\u4e00\u9762\u662f\uff0c50\u540d\u76ee\u6807\u5458\u5de5\u4e2d\u53ea\u670917\u4eba\u70b9\u51fb\u4e86\u63d0\u4f9b\u7684\u94fe\u63a5\u3002\u7136\u800c\uff0c\u8fd917\u4eba\u4e2d\u670910\u4eba\u968f\u540e\u8bd5\u56fe\u767b\u5f55\u5230\u5047\u7f51\u7ad9\u3002\u90a3\u4e9b\u767b\u5f55\u5230\u865a\u5047\u7f51\u7ad9\u7684\u4eba\u968f\u540e\u88ab\u91cd\u5b9a\u5411\u81f3GitLab\u624b\u518c\u7684\u7f51\u7edc\u9493\u9c7c\u6d4b\u8bd5\u90e8\u5206\u3002\n\u6536\u5230\u8fd9\u5c01\u865a\u5047\u9493\u9c7c\u90ae\u4ef6\u768450\u540d\u5458\u5de5\u4e2d\uff0c\u67096\u540d\u5411GitLab\u7684\u5b89\u5168\u8fd0\u8425\u56e2\u961f\u62a5\u544a\u79f0\u8be5\u90ae\u4ef6\u53ef\u7591\u3002\n20%\u7684\u6570\u5b57\u4e0e\u66f4\u5e7f\u6cdb\u7684\u884c\u4e1a\u9884\u671f\u5927\u81f4\u6301\u5e73\u3002\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u53d1\u5e03\u7684Verizon 2030\u6570\u636e\u6cc4\u9732\u8c03\u67e5\u62a5\u544a\u53d1\u73b0\uff0c\u8fd1\u56db\u5206\u4e4b\u4e00\u7684\u5165\u4fb5\u6d89\u53ca\u7f51\u7edc\u9493\u9c7c\u3002\n\u5a01\u80c1\u68c0\u6d4b\u516c\u53f8Red Canary Inc.\u7684\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u4ea7\u54c1\u5b98\u514b\u91cc\u65af\u00b7\u7f57\u65af(Chris Rothe)\u544a\u8bc9SiliconANGLE\uff1a\u201c\u7f51\u7edc\u9493\u9c7c\u662f\u65e0\u6cd5\u5b8c\u5168\u9884\u9632\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u201d\u56e0\u4e3a\u7535\u5b50\u90ae\u4ef6\u662f\u4e00\u9879\u5173\u952e\u7684\u4e1a\u52a1\u529f\u80fd\uff0c\u6240\u4ee5\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u5fc5\u987b\u9488\u5bf9\u5176\u4e1a\u52a1\u529f\u80fd\u800c\u4e0d\u662f\u5b89\u5168\u6027\u8fdb\u884c\u4f18\u5316\u3002IT\u56e2\u961f\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u7b56\u7565\u6765\u51cf\u5c11\u6210\u529f\u7684\u7f51\u7edc\u9493\u9c7c\u653b\u51fb\u8005\u7684\u6570\u91cf--\u7535\u5b50\u90ae\u4ef6\u62e6\u622a\u3001\u5265\u79bb\u548c\u5206\u6790\u9644\u4ef6\u3001\u610f\u8bc6\u57f9\u8bad--\u4f46\u6ca1\u6709100%\u7684\u89e3\u51b3\u65b9\u6848\u3002\u201c\u3002\n\u901a\u8fc7\u4e00\u952e\u8ba2\u9605\u6211\u4eec\u7684YouTube\u9891\u9053(\u5982\u4e0b\u6240\u793a)\uff0c\u663e\u793a\u60a8\u5bf9\u6211\u4eec\u4f7f\u547d\u7684\u652f\u6301\u3002\u6211\u4eec\u7684\u8ba2\u9605\u7528\u6237\u8d8a\u591a\uff0cYouTube\u5411\u60a8\u63a8\u8350\u7684\u76f8\u5173\u4f01\u4e1a\u548c\u65b0\u5174\u6280\u672f\u5185\u5bb9\u5c31\u8d8a\u591a\u3002\u8c22\u8c22!\u3002\n\u2026\u3002\u6211\u4eec\u8fd8\u60f3\u544a\u8bc9\u60a8\u6211\u4eec\u7684\u4f7f\u547d\uff0c\u4ee5\u53ca\u60a8\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u5b83\u3002SiliconANGLE Media Inc.\u7684\u5546\u4e1a\u6a21\u5f0f\u662f\u57fa\u4e8e\u5185\u5bb9\u7684\u5185\u5728\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u5e7f\u544a\u3002\u4e0e\u8bb8\u591a\u5728\u7ebf\u51fa\u7248\u7269\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u4ed8\u8d39\u5899\u6216\u6295\u653e\u6a2a\u5e45\u5e7f\u544a\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u8ba9\u6211\u4eec\u7684\u65b0\u95fb\u4fdd\u6301\u5f00\u653e\uff0c\u4e0d\u53d7\u5f71\u54cd\uff0c\u4e5f\u4e0d\u9700\u8981\u8ffd\u9010\u6d41\u91cf\u3002\u5173\u4e8eSiliconANGLE\u7684\u65b0\u95fb\u3001\u62a5\u9053\u548c\u8bc4\u8bba-\u4ee5\u53ca\u6211\u4eec\u7684\u7845\u8c37\u6f14\u64ad\u5ba4\u548cCUBE\u7684\u5168\u7403\u5de1\u56de\u89c6\u9891\u56e2\u961f\u63d0\u4f9b\u7684\u73b0\u573a\u65e0\u811a\u672c\u89c6\u9891-\u9700\u8981\u5927\u91cf\u7684\u8f9b\u52e4\u5de5\u4f5c\u3001\u65f6\u95f4\u548c\u91d1\u94b1\u3002\u8981\u4fdd\u6301\u9ad8\u8d28\u91cf\uff0c\u9700\u8981\u8d5e\u52a9\u5546\u7684\u652f\u6301\uff0c\u8fd9\u4e9b\u8d5e\u52a9\u5546\u4e0e\u6211\u4eec\u5bf9\u65e0\u5e7f\u544a\u65b0\u95fb\u5185\u5bb9\u7684\u613f\u666f\u4fdd\u6301\u4e00\u81f4\u3002\n\u5982\u679c\u60a8\u559c\u6b22\u8fd9\u91cc\u7684\u62a5\u9053\u3001\u89c6\u9891\u91c7\u8bbf\u7b49\u65e0\u5e7f\u544a\u5185\u5bb9\uff0c\u8bf7\u82b1\u70b9\u65f6\u95f4\u67e5\u770b\u4e00\u4e0b\u6211\u4eec\u8d5e\u52a9\u5546\u652f\u6301\u7684\u89c6\u9891\u5185\u5bb9\u6837\u672c\uff0c\u53d1\u63a8\u7279\u8868\u793a\u652f\u6301\uff0c\u5e76\u4e0d\u65ad\u56de\u5230SiliconANGLE\u3002", "note_en": "There\u2019s always a lot of talk in cybersecurity about the importance of training employees to be aware of phishing attempts. Training does work but it\u2019s not a panacea, the reality being is that there will always be employees who get tricked even with training.\n Although\u00a0there are various industry estimates, code repository management firm GitLab Inc. decided to phish their own employees to see what would happen. The result was not good: One in five employees fell for the fake emails.\n The exercise\u00a0announced Wednesday involved GitLab emulate a phishing campaign against GitLab employees with the intent of capturing GitLab.com credentials. Defenses such as multifactor authentication were not considered part of the test, with the fake phishing attack designed to mimic a basic attack concentrating on primary authentication credentials via a fake login page.\n The GitLab team behind the exercise purchased the domain name gitlab.company, then used G Suite to facilitate the delivery of the phishing email. The domain name and G Suite services were set up to look legitimate, complete with SSL certificates to make the emails look less suspicious to automated phishing site detection and human inspection.\n Fifty GitLab employees were targeted with an email that asked them to click on a link to accept an upgrade. The link took them to the fake gitlab.company website where they were asked to enter their login details.\n On the positive side, only 17 of the 50 targeted employees clicked on the provided link. However, 10 of those 17 then attempted to log in on the fake site. Those who logged in on the fake site were then redirected to the  phishing test section of the GitLab Handbook.\n Six of the 50 employees who received the fake phishing email reported the email as suspicious to GitLab\u2019s security operations team.\n The 20% figure is roughly on par with broader industry expectations. The  Verizon 2030 Data Breach Investigations Report released earlier this week found that\u00a0phishing was involved in nearly one-quarter of breaches.\n \u201cPhishing is a great example of something that cannot be fully prevented,\u201d Chris Rothe, co-founder and chief product officer at threat detection firm  Red Canary Inc., told SiliconANGLE . \u201cBecause email is a critical business function, it has to be optimized for its business function and not security in most cases. There are many strategies IT teams can use to reduce the number of successful phishing attackers \u2014 email blocking, stripping and analyzing attachments, awareness training \u2014 but there is no 100% solution.\u201d\n  Show your support for our mission with our one-click subscription to our YouTube channel (below). The more subscribers we have, the more YouTube will suggest relevant enterprise and emerging technology content to you. Thanks!\n  \u2026 We\u2019d also like to tell you about our mission and how you can help us fulfill it. SiliconANGLE Media Inc.\u2019s business model is based on the intrinsic value of the content, not advertising. Unlike many online publications, we don\u2019t have a paywall or run banner advertising, because we want to keep our journalism open, without influence or the need to chase traffic. The journalism, reporting and commentary on\u00a0 SiliconANGLE\u00a0\u2014 along with live, unscripted video from our Silicon Valley studio and globe-trotting video teams at\u00a0  theCUBE\u00a0\u2014 take a lot of hard work, time and money. Keeping the quality high requires the support of sponsors who are aligned with our vision of ad-free journalism content.\n If you like the reporting, video interviews and other ad-free content here,\u00a0please take a moment to check out a sample of the video content supported by our sponsors,\u00a0  tweet your support, and keep coming back to\u00a0  SiliconANGLE.", "posttime": "2020-05-25 03:44:20", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5458\u5de5,employees,\u9493\u9c7c", "title": "20%\u7684GitLab\u5458\u5de5\u5728\u7f51\u7edc\u9493\u9c7c\u6d4b\u8bd5\u4e2d\u4ea4\u51fa\u767b\u5f55\u51ed\u636e", "title_en": "20% of GitLab Employees Handed Over Login Credentials in Phishing Test", "transed": 1, "url": "https://siliconangle.com/2020/05/21/gitlab-runs-phishing-test-employees-20-handing-credentials/", "via": "", "real_tags": ["\u5458\u5de5", "employees", "\u9493\u9c7c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003562, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "int\u89e3\u538b\u7f29\u5668(Void){static int c\uff0clen\uff1bcrBegin\uff1bWhile(1){c=getchar()\uff1bif(c==EOF)Break\uff1bif(c==0xFF){len=getchar()\uff1bc=getchar()\uff1bWhile(len--)crReturn(C)\uff1b}Else crReturn(C)\uff1b}crReturn(EOF)\uff1bcrish\uff1b}\u3002\nvoid parser(Int C){crBegin\uff1bWhile(1){/*\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5df2\u5728c*/if(c==EOF)Break\uff1bif(isalpha(C)){do{add_to_Token(C)\uff1bcrReturn()\uff1b}While(isalpha(C))\uff1bget_Token(Word)\uff1b}add_to_Token(C)\uff1bget_Token(PUNCT)\uff1bcrReturn()\uff1b}crish\uff1b}\u3002\n\u6211\u4eec\u5df2\u7ecf\u5c06\u89e3\u538b\u7f29\u5668\u548c\u89e3\u6790\u5668\u90fd\u91cd\u5199\u4e3a\u88ab\u8c03\u7528\u8005\uff0c\u5bf9\u4e8e\u4e0a\u6b21\u6211\u4eec\u4e0d\u5f97\u4e0d\u8fdb\u884c\u7684\u5927\u89c4\u6a21\u91cd\u6784\uff0c\u6839\u672c\u4e0d\u9700\u8981\u3002\u6bcf\u4e2a\u51fd\u6570\u7684\u7ed3\u6784\u90fd\u7cbe\u786e\u5730\u53cd\u6620\u4e86\u5176\u539f\u59cb\u5f62\u5f0f\u7684\u7ed3\u6784\u3002\u9605\u8bfb\u5668\u53ef\u4ee5\u63a8\u5bfc\u51fa\u89e3\u6790\u5668\u8bc6\u522b\u7684\u8bed\u6cd5\uff0c\u6216\u8005\u8bf4\u89e3\u538b\u5668\u4f7f\u7528\u7684\u538b\u7f29\u6570\u636e\u683c\u5f0f\uff0c\u8fd9\u6bd4\u901a\u8fc7\u8bfb\u53d6\u6a21\u7cca\u7684\u72b6\u6001\u673a\u4ee3\u7801\u5bb9\u6613\u5f97\u591a\u3002\u4e00\u65e6\u60a8\u7406\u89e3\u4e86\u65b0\u7684\u683c\u5f0f\uff0c\u63a7\u5236\u6d41\u5c31\u4f1a\u5f88\u76f4\u89c2\uff1a\u5f53\u89e3\u538b\u7f29\u5668\u6709\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u5b83\u4f1a\u7528crReturn\u5c06\u5176\u4f20\u9012\u56de\u8c03\u7528\u8005\uff0c\u5e76\u5728\u9700\u8981\u53e6\u4e00\u4e2a\u5b57\u7b26\u65f6\u7b49\u5f85\u518d\u6b21\u8c03\u7528\u3002\u5f53\u89e3\u6790\u5668\u9700\u8981\u53e6\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u5b83\u4f7f\u7528crReturn\u8fd4\u56de\uff0c\u5e76\u7b49\u5f85\u4f7f\u7528\u53c2\u6570c\u4e2d\u7684\u65b0\u5b57\u7b26\u518d\u6b21\u8c03\u7528\u3002\u4ee3\u7801\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u7ed3\u6784\u53d8\u5316\uff1aparser()\u73b0\u5728\u5728\u5faa\u73af\u7684\u672b\u5c3e\u6709\u5b83\u7684getchar()(\u597d\u5427\uff0c\u5bf9\u5e94\u7684crReturn)\uff0c\u800c\u4e0d\u662f\u5728\u5f00\u59cb\u5904\uff0c\u56e0\u4e3a\u5f53\u8fdb\u5165\u51fd\u6570\u65f6\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5df2\u7ecf\u5728c\u4e2d\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u8fd9\u79cd\u5fae\u5c0f\u7684\u7ed3\u6784\u53d8\u5316\uff0c\u6216\u8005\u5982\u679c\u6211\u4eec\u771f\u7684\u5bf9\u5b83\u6709\u5f3a\u70c8\u7684\u611f\u89c9\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9aparser()\u9700\u8981\u4e00\u4e2a\u521d\u59cb\u5316\u8c03\u7528\uff0c\u7136\u540e\u624d\u80fd\u5f00\u59cb\u5411\u5b83\u63d0\u4f9b\u5b57\u7b26\u3002\u5f53\u7136\uff0c\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u534f\u7a0b\u5b8f\u6765\u91cd\u5199\u8fd9\u4e24\u4e2a\u4f8b\u7a0b\u3002\u4e00\u4e2a\u5c31\u8db3\u591f\u4e86\uff1b\u53e6\u4e00\u4e2a\u53ef\u4ee5\u662f\u5b83\u7684\u8c03\u7528\u8005\u3002\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6211\u4eec\u8ba1\u5212\u5b9e\u73b0\u7684\u76ee\u6807\uff1a\u4e00\u79cd\u53ef\u79fb\u690d\u7684ANSIC\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u4f20\u9012\u6570\u636e\uff0c\u800c\u65e0\u9700\u5c06\u5176\u91cd\u5199\u4e3a\u663e\u5f0f\u72b6\u6001\u673a\u3002\u6211\u4eec\u901a\u8fc7\u5c06C\u9884\u5904\u7406\u5668\u4e0eswitch\u8bed\u53e5\u7684\u4e00\u4e2a\u5f88\u5c11\u4f7f\u7528\u7684\u7279\u6027\u76f8\u7ed3\u5408\u6765\u521b\u5efa\u9690\u5f0f\u72b6\u6001\u673a\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u628a\u620f\u8fdd\u53cd\u4e86\u4e66\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7f16\u7801\u6807\u51c6\u3002\u8bd5\u7740\u5728\u4f60\u516c\u53f8\u7684\u4ee3\u7801\u4e2d\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d7\u5230\u4e25\u5389\u7684\u65a5\u8d23\uff0c\u5982\u679c\u4e0d\u662f\u7eaa\u5f8b\u5904\u5206\u7684\u8bdd\uff01\u60a8\u5728\u5b8f\u4e2d\u5d4c\u5165\u4e86\u65e0\u4e0e\u4f26\u6bd4\u7684\u82b1\u62ec\u53f7\uff0c\u5728\u5b50\u5757\u4e2d\u4f7f\u7528\u4e86\u5927\u5c0f\u5199\uff0c\u5bf9\u4e8ecrReturn\u5b8f\uff0c\u5176\u5185\u5bb9\u5177\u6709\u6781\u5927\u7684\u7834\u574f\u6027\u3002\u4f60\u6ca1\u6709\u56e0\u4e3a\u8fd9\u79cd\u4e0d\u8d1f\u8d23\u4efb\u7684\u7f16\u7801\u884c\u4e3a\u800c\u88ab\u5f53\u573a\u89e3\u96c7\uff0c\u8fd9\u771f\u662f\u4e2a\u5947\u8ff9\u3002\u4f60\u8be5\u4e3a\u81ea\u5df1\u5bb3\u81ca\u3002\u6211\u8ba4\u4e3a\u8fd9\u91cc\u7684\u7f16\u7801\u6807\u51c6\u6709\u95ee\u9898\u3002\u6211\u5728\u672c\u6587\u4e2d\u5c55\u793a\u7684\u793a\u4f8b\u4e0d\u662f\u5f88\u957f\uff0c\u4e5f\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u5728\u91cd\u5199\u4e3a\u72b6\u6001\u673a\u65f6\u4ecd\u7136\u53ef\u4ee5\u7406\u89e3\u3002\u4f46\u662f\uff0c\u968f\u7740\u51fd\u6570\u53d8\u957f\uff0c\u6240\u9700\u7684\u91cd\u5199\u7a0b\u5ea6\u53d8\u5f97\u66f4\u9ad8\uff0c\u6e05\u6670\u5ea6\u7684\u635f\u5931\u4e5f\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u4e25\u91cd\u3002\u8003\u8651\u4e00\u4e0b\u3002\u7531CASE STATE1\uff1a/*\u6267\u884c\u67d0\u4e9b\u6d3b\u52a8*/IF(\u6761\u4ef6)STATE=STATE2\uff1bELSE STATE=STATE3\u5f62\u5f0f\u7684\u5c0f\u5757\u6784\u5efa\u7684\u51fd\u6570\uff1b\n\u5bf9\u4e8e\u8bfb\u8005\u6765\u8bf4\uff0c\u4e0e\u7531\u5c0f\u5757\u7ec4\u6210\u7684\u51fd\u6570\u6ca1\u6709\u592a\u5927\u4e0d\u540c\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u65b9\uff0c\u53e6\u4e00\u4e2a\u662f\u88ab\u8c03\u7528\u65b9\uff0c\u662f\u771f\u7684\uff0c\u4f46\u51fd\u6570\u7684\u89c6\u89c9\u7ed3\u6784\u662f\u76f8\u540c\u7684\uff0c\u5b83\u4eec\u63d0\u4f9b\u7684\u5bf9\u5176\u5e95\u5c42\u7b97\u6cd5\u7684\u6d1e\u5bdf\u529b\u4e5f\u5b8c\u5168\u4e00\u6837\u5c0f\u3002\u540c\u6837\u4f1a\u56e0\u4e3a\u4f7f\u7528mycoroutine\u5b8f\u800c\u89e3\u96c7\u60a8\u7684\u4eba\uff0c\u4e5f\u4f1a\u56e0\u4e3a\u7528goto\u8bed\u53e5\u8fde\u63a5\u7684\u5c0f\u5757\u6784\u5efa\u51fd\u6570\u800c\u89e3\u96c7\u60a8\uff01\u8fd9\u4e00\u6b21\u4ed6\u4eec\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u51fd\u6570\u5e03\u5c40\u4e25\u91cd\u5730\u6a21\u7cca\u4e86\u7b97\u6cd5\u7684\u7ed3\u6784\u3002\u7f16\u7801\u6807\u51c6\u65e8\u5728\u6e05\u6670\u660e\u4e86\u3002\u901a\u8fc7\u5c06\u5f00\u5173\u3001\u8fd4\u56de\u548c\u7528\u4f8b\u7b49\u91cd\u8981\u5185\u5bb9\u9690\u85cf\u5728\u6df7\u6dc6\u5b8f\u4e2d\uff0c\u7f16\u7801\u6807\u51c6\u4f1a\u58f0\u79f0\u60a8\u6a21\u7cca\u4e86\u7a0b\u5e8f\u7684\u8bed\u6cd5\u7ed3\u6784\uff0c\u8fdd\u53cd\u4e86\u6e05\u6670\u5ea6\u8981\u6c42\u3002\u4f46\u662f\u60a8\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u60a8\u63ed\u793a\u4e86\u7a0b\u5e8f\u7684\u7b97\u6cd5\u7ed3\u6784\uff0c\u800c\u8fd9\u5f88\u53ef\u80fd\u662f\u8bfb\u8005\u60f3\u77e5\u9053\u7684\uff01\u4efb\u4f55\u4ee5\u727a\u7272\u7b97\u6cd5\u6e05\u6670\u5ea6\u4e3a\u4ee3\u4ef7\u800c\u575a\u6301\u53e5\u6cd5\u6e05\u6670\u5ea6\u7684\u7f16\u7801\u6807\u51c6\u90fd\u5e94\u8be5\u91cd\u5199\u3002\u5982\u679c\u4f60\u7684\u96c7\u4e3b\u56e0\u4e3a\u4f60\u4f7f\u7528\u8fd9\u4e2a\u628a\u620f\u800c\u89e3\u96c7\u4e86\u4f60\uff0c\u5728\u4fdd\u5b89\u4eba\u5458\u628a\u4f60\u62d6\u51fa\u5927\u697c\u65f6\uff0c\u53cd\u590d\u544a\u8bc9\u4ed6\u4eec\u8fd9\u4e00\u70b9\u3002\u5728\u4e25\u8083\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u4e2a\u73a9\u5177\u534f\u540c\u7a0b\u5e8f\u5b9e\u73b0\u4e0d\u592a\u53ef\u80fd\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u9759\u6001\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u6216\u591a\u7ebf\u7a0b\u7684\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u80fd\u591f\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u76f8\u540c\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u5728\u7ed9\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u7684\u6bcf\u6b21\u8c03\u7528\u65f6\uff0c\u5728\u76f8\u540c\u4e0a\u4e0b\u6587\u4e2d\u7684\u6700\u540e\u4e00\u6b21\u8fd4\u56de\u4e4b\u540e\u7acb\u5373\u6062\u590d\u63a7\u5236\u3002\u8fd9\u5f88\u5bb9\u6613\u505a\u5230\u3002\u6211\u4eec\u5b89\u6392\u4e00\u4e2a\u989d\u5916\u7684\u51fd\u6570\u53c2\u6570\uff0c\u5b83\u662f\u6307\u5411\u4e0a\u4e0b\u6587\u7ed3\u6784\u7684\u6307\u9488\uff1b\u6211\u4eec\u5c06\u6240\u6709LocalState\u548c\u534f\u7a0b\u72b6\u6001\u53d8\u91cf\u58f0\u660e\u4e3a\u8be5\u7ed3\u6784\u7684\u5143\u7d20\u3002\u6709\u70b9\u96be\u770b\uff0c\u56e0\u4e3a\u7a81\u7136\u4e4b\u95f4\u4f60\u4e0d\u5f97\u4e0d", "note_en": "int decompressor(void) { static int c, len; crBegin; while (1) { c = getchar(); if (c == EOF) break; if (c == 0xFF) { len = getchar(); c = getchar(); while (len--)\t crReturn(c); } else\t crReturn(c); } crReturn(EOF); crFinish;}\n void parser(int c) { crBegin; while (1) { /* first char already in c */ if (c == EOF) break; if (isalpha(c)) { do { add_to_token(c);\t\tcrReturn( ); } while (isalpha(c)); got_token(WORD); } add_to_token(c); got_token(PUNCT);\tcrReturn( ); } crFinish;}\n We have rewritten both decompressor and parser as callees, with noneed at all for the massive restructuring we had to do last time wedid this. The structure of each function exactly mirrors thestructure of its original form. A reader can deduce the grammarrecognised by the parser, or the compressed data format used by thedecompressor, far more easily than by reading the obscurestate-machine code. The control flow is intuitive once you havewrapped your mind around the new format: when the decompressor has acharacter, it passes it back to the caller with crReturn and waits to be called again when anothercharacter is required. When the parser needs another character, itreturns using  crReturn, and waits to be called againwith the new character in the parameter  c. There has been one small structural alteration to the code: parser() now has its  getchar() (well, thecorresponding  crReturn) at the end of the loop insteadof the start, because the first character is already in c when the function is entered. We could accept thissmall change in structure, or if we really felt strongly about it wecould specify that  parser() required an&#34;initialisation&#34; call before you could start feeding it characters. As before, of course, we don&#39;t have to rewrite both routines usingthe coroutine macros. One will suffice; the other can be its caller. We have achieved what we set out to achieve: a portable ANSI C meansof passing data between a producer and a consumer without the needto rewrite one as an explicit state machine. We have done this bycombining the C preprocessor with a little-used feature of the switch statement to create an  implicit statemachine.   Of course, this trick violates every coding standard in the book.Try doing this in your company&#39;s code and you will probably besubject to a stern telling off if not disciplinary action! You haveembedded unmatched braces in macros, used  case withinsub-blocks, and as for the  crReturn macro with itsterrifyingly disruptive contents .\u00a0.\u00a0. It&#39;s a wonder youhaven&#39;t been fired on the spot for such irresponsible codingpractice. You should be ashamed of yourself. I would claim that the coding standards are at fault here. Theexamples I&#39;ve shown in this article are not very long, not verycomplicated, and still just about comprehensible when rewritten asstate machines. But as the functions get longer, the degree ofrewriting required becomes greater and the loss of clarity becomesmuch, much worse. Consider. A function built of small blocks of the form case STATE1: /* perform some activity */ if (condition) state = STATE2; else state = STATE3;\n is not very different, to a reader, from a function built of smallblocks of the form One is caller and the other is callee, true, but the visualstructure of the functions are the same, and the insights theyprovide into their underlying algorithms are exactly as small aseach other. The same people who would fire you for using mycoroutine macros would fire you just as loudly for building afunction out of small blocks connected by  gotostatements! And this time they would be right, because laying out afunction like that obscures the structure of the algorithm horribly. Coding standards aim for clarity. By hiding vital things like switch,  return and  casestatements inside &#34;obfuscating&#34; macros, the coding standards wouldclaim you have obscured the syntactic structure of the program, andviolated the requirement for clarity. But you have done so in thecause of revealing the  algorithmic structure of theprogram, which is far more likely to be what the reader wants toknow! Any coding standard which insists on syntactic clarity at theexpense of algorithmic clarity should be rewritten. If your employerfires you for using this trick, tell them that repeatedly as thesecurity staff drag you out of the building.   In a serious application, this toy coroutine implementation isunlikely to be useful, because it relies on  staticvariables and so it fails to be re-entrant or multi-threadable.Ideally, in a real application, you would want to be able to callthe same function in several different contexts, and at each call ina given context, have control resume just after the last return inthe same context. This is easily enough done. We arrange an extra function parameter,which is a pointer to a context structure; we declare all our localstate, and our coroutine state variable, as elements of thatstructure. It&#39;s a little bit ugly, because suddenly you have to use ctx-&gt;i as a loop counter where you would previouslyjust have used  i; virtually all your serious variablesbecome elements of the coroutine context structure. But it removesthe problems with re-entrancy, and still hasn&#39;t impacted the structure of the routine. (Of course, if C only had Pascal&#39;s  with statement, wecould arrange for the macros to make this layer of indirection trulytransparent as well. A pity. Still, at least C++ users can managethis by having their coroutine be a class member, and keeping allits local variables in the class so that the scoping is implicit.) Included here is a C header file that implements this coroutinetrick as a set of pre-defined macros. There are two sets of macrosdefined in the file, prefixed  scr and  ccr.The  scr macros are the simple form of the technique,for when you can get away with using  static variables;the  ccr macros provide the advanced re-entrant form.Full documentation is given in a comment in the header file itself. Note that Visual C++ version 6 doesn&#39;t like this coroutine trick,because its default debug state (Program Database for Edit andContinue) does something strange to the  __LINE__ macro.To compile a coroutine-using program with VC++ 6, you must turn offEdit and Continue. (In the project settings, go to the &#34;C/C++&#34; tab,category &#34;General&#34;, setting &#34;Debug info&#34;. Select any option other than &#34;Program Database for Edit and Continue&#34;.) (The header file is MIT-licensed, so you can use it in anything youlike without restriction. If you do find something the MIT licencedoesn&#39;t permit you to do, mail me,and I&#39;ll probably give you explicit permission to do it anyway.) Follow this link for  coroutine.h. Thanks for reading. Share and enjoy!   Donald Knuth,  The Art of Computer Programming, Volume1. Addison-Wesley, ISBN 0-201-89683-4. Section 1.4.2 describescoroutines in the &#34;pure&#34; form. http://www.lysator.liu.se/c/duffs-device.htmlis Tom Duff&#39;s own discussion of Duff&#39;s device. Note, right at thebottom, a hint that Duff might also have independently invented thiscoroutine trick or something very like it. Update, 2005-03-07: TomDuff confirms this in a blog comment. The &#34;revolting way to useswitches to implement interrupt driven state machines&#34; of which hespeaks in his original email is indeed the same trick as I describehere. PuTTYis a Win32 Telnet and SSH client. The SSH protocol code containsreal-life use of this coroutine trick. As far as I know, this is theworst piece of C hackery ever seen in serious production code.\n  $Id$ Copyright \u00a9 2000 Simon Tatham. This document is OpenContent. You may copy and use the text under the terms of the OpenContentLicence. Please send comments and criticism to anakin@pobox.com.", "posttime": "2020-05-25 03:43:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u534f\u7a0b,coroutines", "title": "C\u8bed\u8a00\u4e2d\u7684\u534f\u7a0b\u7a0b\u5e8f", "title_en": "Coroutines in C", "transed": 1, "url": "https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u534f\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003560, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6765\u6e90\uff1aGitHub", "note_en": "Source at GitHub", "posttime": "2020-05-25 03:26:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u97f3\u4e50,based,\u6765\u6e90", "title": "Ansiplay.js-\u57fa\u4e8eAnsiplay.exe\u7684\u7b80\u5355ANSI\u97f3\u4e50\u64ad\u653e\u5668", "title_en": "Ansiplay.js \u2013 Simple ANSI Music Player based on Ansiplay.exe", "transed": 1, "url": "https://andyherbert.github.io/ansiplay.js/", "via": "", "real_tags": ["\u97f3\u4e50", "based", "\u6765\u6e90"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003559, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u26ab\ufe0f\u26aa\ufe0f", "note_en": "\u26ab\ufe0f  \u26aa\ufe0f", "posttime": "2020-05-25 03:26:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "lets", "title": "\u8ba9\u6211\u4eec\u4e00\u8d77\u753b\u5427", "title_en": "Lets Draw Together", "transed": 1, "url": "https://multiuser-sketchpad.glitch.me/", "via": "", "real_tags": ["lets"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1003558, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u6d41\u6c13\u57fa\u7ad9\u662f\u4e00\u79cd\u6709\u6548\u7684\u653b\u51fb\u8f7d\u4f53\u3002\u8702\u7a9d\u57fa\u5e26\u662f\u667a\u80fd\u624b\u673a\u5b89\u5168\u6027\u7684\u5173\u952e\u90e8\u5206\uff1a\u5b83\u4eec\u751a\u81f3\u5728\u8ba4\u8bc1\u4e4b\u524d\u5c31\u4f1a\u89e3\u6790\u5927\u91cf\u6570\u636e\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u53ef\u4ee5\u4e3a\u653b\u51fb\u8005\u63d0\u4f9b\u4e00\u79cd\u975e\u5e38\u9690\u853d\u7684\u65b9\u5f0f\u6765\u6536\u96c6\u6709\u5173\u53d1\u51fa\u7684\u547c\u53eb\u7684\u4fe1\u606f\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u65e0\u7ebf\u65b9\u5f0f\u5347\u7ea7\u5230\u4e3b\u64cd\u4f5c\u7cfb\u7edf\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u4e00\u79cd\u65b0\u7684\u8702\u7a9d\u6a21\u7cca\u6846\u67b6\uff0c\u65e8\u5728\u5e2e\u52a9\u5b89\u5168\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u8702\u7a9d\u57fa\u5e26\u548c\u7c7b\u4f3c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u7684\u5173\u952e\u7f3a\u9677\u3002BaseSAFE\u5141\u8bb8\u90e8\u5206\u91cd\u65b0\u6258\u7ba1\u8702\u7a9d\u57fa\u5e26\uff0c\u7528\u4e8e\u5feb\u901f\u68c0\u6d4b\u8bbe\u5907\u5916\u7684\u6bdb\u53d1\uff0c\u5373\u4f7f\u662f\u95ed\u6e90\u56fa\u4ef6BLOB\u3002BaseSAFE\u7684\u6e05\u7406\u63d2\u4ef6\u5206\u914d\u5668\u53ef\u4ee5\u5feb\u901f\u53d1\u73b0\u57fa\u4e8e\u5806\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\u4f7f\u7528\u6211\u4eec\u7684\u6982\u5ff5\u9a8c\u8bc1\u5de5\u5177\uff0c\u6211\u4eec\u6a21\u7cca\u4e86\u57fa\u4e8eNucleus RTOS\u7684\u8054\u53d1\u79d1\u8702\u7a9d\u57fa\u5e26\u7684\u5404\u79cd\u89e3\u6790\u5668\uff0c\u8fd9\u4e9b\u89e3\u6790\u5668\u53ef\u4ee5\u4ece\u6d41\u6c13\u57fa\u7ad9\u8bbf\u95ee\u3002\u4eff\u771f\u5668\u63d2\u88c5\u662f\u9ad8\u5ea6\u4f18\u5316\u7684\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u590d\u6742\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bcf\u4e2a\u5185\u6838\u6bcf\u79d2\u7684\u6267\u884c\u6b21\u6570\u8fbe\u5230\u6570\u767e\u6b21\uff0c\u603b\u5171\u7ea6\u4e3a\u6bcf\u79d215k\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u57fa\u5e26\u8c03\u5236\u89e3\u8c03\u5668\u7684\u653b\u51fb\u77e2\u91cf\u3002\u636e\u6211\u4eec\u6240\u77e5\uff0c\u8fd9\u662f\u57fa\u4e8e\u4eff\u771f\u7684\u6a21\u7cca\u6280\u672f\u9996\u6b21\u7528\u4e8e\u5546\u4e1a\u8702\u7a9d\u57fa\u5e26\u7684\u5b89\u5168\u6d4b\u8bd5\u3002BaseSAFE\u7684\u5927\u90e8\u5206\u5de5\u5177\u548c\u65b9\u6cd5\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u4f4e\u7ea7\u5185\u6838\u548c\u56fa\u4ef6\u3002\u901a\u8fc7\u4f7f\u7528BaseSAFE\uff0c\u6211\u4eec\u80fd\u591f\u5728\u8054\u53d1\u79d1\u8702\u7a9d\u57fa\u5e26\u4e2d\u4f7f\u7528\u6211\u4eec\u7684\u6982\u5ff5\u9a8c\u8bc1\u6a21\u7cca\u7ebf\u675f\u53d1\u73b0\u5185\u5b58\u635f\u574f\uff0c\u5305\u62ec\u5806\u8d8a\u754c\u5199\u5165\u3002BaseSAFE\u3001Harness\u548c\u5927\u91cfLTE\u4fe1\u4ee4\u6d88\u606f\u6d4b\u8bd5\u7528\u4f8b\u5c06\u5728\u672c\u6587\u53d1\u8868\u540e\u5f00\u653e\u6e90\u7801\u3002", "note_en": "Download PDF  Abstract: Rogue base stations are an effective attack vector. Cellular basebandsrepresent a critical part of the smartphone&#39;s security: they parse largeamounts of data even before authentication. They can, therefore, grant anattacker a very stealthy way to gather information about calls placed and evento escalate to the main operating system, over-the-air. In this paper, wediscuss a novel cellular fuzzing framework that aims to help securityresearchers find critical bugs in cellular basebands and similar embeddedsystems. BaseSAFE allows partial rehosting of cellular basebands for fastinstrumented fuzzing off-device, even for closed-source firmware blobs.BaseSAFE&#39;s sanitizing drop-in allocator, enables spotting heap-basedbuffer-overflows quickly. Using our proof-of-concept harness, we fuzzed variousparsers of the Nucleus RTOS-based MediaTek cellular baseband that areaccessible from rogue base stations. The emulator instrumentation is highlyoptimized, reaching hundreds of executions per second on each core for ourcomplex test case, around 15k test-cases per second in total. Furthermore, wediscuss attack vectors for baseband modems. To the best of our knowledge, thisis the first use of emulation-based fuzzing for security testing of commercialcellular basebands. Most of the tooling and approaches of BaseSAFE are alsoapplicable for other low-level kernels and firmware. Using BaseSAFE, we wereable to find memory corruptions including heap out-of-bounds writes using ourproof-of-concept fuzzing harness in the MediaTek cellular baseband. BaseSAFE,the harness, and a large collection of LTE signaling message test cases will bereleased open-source upon publication of this paper.", "posttime": "2020-05-25 03:21:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u5e26,baseband", "title": "BaseSAFE\uff1a\u901a\u8fc7\u4eff\u771f\u5b9e\u73b0\u57fa\u5e26\u51c0\u5316\u6a21\u7cca", "title_en": "BaseSAFE: Baseband SAnitized Fuzzing Through Emulation", "transed": 1, "url": "https://arxiv.org/abs/2005.07797", "via": "", "real_tags": ["\u57fa\u5e26", "baseband"]}, {"category": "", "categoryclass": "", "imagename": "4d16095418a953c639be9666b70f5aac.jpg", "infoid": 1003557, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65af\u8482\u82ac\u00b7\u5e03\u4f26\u5357\u00b72020\u5e745\u670824\u65e5\uff0c\u5c31\u50cf\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8bb8\u591a\u670d\u52a1\u4e00\u6837\uff0c\u591a\u4efb\u52a1\u5904\u7406\u662f\u4e00\u4ef6\u7406\u6240\u5f53\u7136\u7684\u4e8b\u60c5\uff0c\u4ee5\u81f3\u4e8e\u611f\u89c9\u5f88\u5e73\u51e1\u3002\u6709\u4e86\u6211\u4eec\u529f\u80fd\u5f3a\u5927\u7684\u667a\u80fd\u624b\u673a\u548c\u8ba1\u7b97\u673a\uff0c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0d\u80fd\u540c\u65f6\u5904\u7406\u6570\u767e\u4e2a\u8fdb\u7a0b\u7684\u60f3\u6cd5\u8ba9\u4eba\u611f\u89c9\u5f88\u964c\u751f\u3002\u6211\u8ba4\u4e3a\u6b63\u662f\u8fd9\u6837\u7684\u529f\u80fd\u8ba9\u8ba1\u7b97\u673a\u53d8\u5f97\u975e\u5e38\u6709\u7528\uff0c\u4f46\u4e5f\u8ba9\u5b83\u4eec\u611f\u89c9\u5982\u6b64\u590d\u6742\u548c\u795e\u5947\u3002\n\u5f88\u96be\u73a9\u5f04\u5b9e\u73b0\u591a\u4efb\u52a1\u7684\u4ee3\u7801\uff0c\u5982\u679c\u4e0d\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5982\u4f55\u81ea\u5df1\u5b9e\u73b0\u4e5f\u4e0d\u662f\u5f88\u660e\u663e\u3002\u6211\u575a\u4fe1\uff0c\u53ea\u6709\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e9b\u4e1c\u897f\uff0c\u624d\u80fd\u771f\u6b63\u7406\u89e3\u5b83\uff0c\u6240\u4ee5\u6211\u60f3\u5199\u4e00\u7bc7\u6587\u7ae0\uff0c\u8ba9\u4eba\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7b80\u5355\u7684\u7ebf\u7a0b\u5b9e\u73b0\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7528\u666e\u901a\u7684C\u7a0b\u5e8f(\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf)\u5b9e\u73b0\u7b80\u5355\u7684\u7ebf\u7a0b\u3002\n\u6b64\u8c03\u5ea6\u7a0b\u5e8f\u5c06\u4e25\u91cd\u4f9d\u8d56\u51fd\u6570setjmp()\u548clong jmp()\u3002\u4ed6\u4eec\u611f\u89c9\u6709\u70b9\u795e\u5947\uff0c\u6240\u4ee5\u6211\u60f3\u5148\u63cf\u8ff0\u4e00\u4e0b\u4ed6\u4eec\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u7136\u540e\u82b1\u4e00\u70b9\u65f6\u95f4\u6765\u63ed\u5f00\u4ed6\u4eec\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\n\u51fd\u6570setjmp()\u662f\u4e00\u79cd\u8bb0\u5f55\u6709\u5173\u7a0b\u5e8f\u6267\u884c\u4f4d\u7f6e\u7684\u4fe1\u606f\u7684\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u60a8\u7a0d\u540e\u53ef\u4ee5\u8df3\u56de\u8be5\u70b9\u3002\u60a8\u4e3aIta\u63d0\u4f9b\u4e86JMP_buf\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5b83\u5c06\u5728\u5176\u4e2d\u5b58\u50a8\u8be5\u4fe1\u606f\u3002setjmp()\u7b2c\u4e00\u6b21\u8fd4\u56de\u65f6\u8fd4\u56de0\u3002\n\u7a0d\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570long jmp(jmp_buf\uff0cvalue)\u4ece\u60a8\u8c03\u7528setjmp()\u7684\u4f4d\u7f6e\u7acb\u5373\u5f00\u59cb\u6267\u884c\u3002\u5bf9\u4e8e\u60a8\u7684\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u662f\u7b2c\u4e8c\u6b21\u8fd4\u56desetjmp()\u3002\u8fd9\u6b21\u5c06\u8fd4\u56de\u60a8\u4f20\u9012\u7ed9long jmp()\u7684\u503c\u53c2\u6570\uff0c\u4ee5\u5e2e\u52a9\u533a\u5206\u7b2c\u4e8c\u8f6e\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u793a\u4f8b\u6765\u5e2e\u52a9\u8bf4\u660e\uff1a\n#include&lt\uff1bstdio.h&gt\uff1b#include&lt\uff1bsetjmp.h&gt\uff1bjmp_buf saved_location\uff1bint main(int argc\uff0cchar**argv){if(setjmp(Save_Location)==0){printf(&#34\uff1b\u6211\u4eec\u5df2\u6210\u529f\u8bbe\u7f6e\u8df3\u8f6c\u7f13\u51b2\u533a\uff01\\n&#34\uff1b)\uff1b}\u5426\u5219{printf(&#34\uff1b\u6211\u4eec\u8df3\u8fc7\uff01\\n&#34\uff1b)\uff1b\u8fd4\u56de0\uff1b\u6b63\u5728\u51c6\u5907\u8df3\u8f6c\uff01\\n&#34\uff1b)\uff1blong jmp(save_location\uff0c1)\uff1bprintf(&#34\uff1b\u8fd9\u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c.\u3002\\n&#34\uff1b)\uff1b\u8fd4\u56de0\uff1b}\u3002\n\u72c2\u91ce\uff01\u5b83\u7c7b\u4f3c\u4e8eGOTO\u8bed\u53e5\uff0c\u4f46\u5b83\u751a\u81f3\u53ef\u4ee5\u7528\u6765\u8df3\u51fa\u51fd\u6570\u3002\u5b83\u4e5f\u6bd4goto\u66f4\u96be\u8bfb\uff0c\u56e0\u4e3a\u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5e38\u89c4\u7684\u51fd\u6570\u8c03\u7528\u3002\u5982\u679c\u60a8\u7684\u4ee3\u7801\u968f\u610f\u4f7f\u7528setjmp()\u548clong jmp()\uff0c\u90a3\u4e48\u4efb\u4f55\u4eba(\u5305\u62ec\u60a8\u81ea\u5df1)\u9605\u8bfb\u8d77\u6765\u90fd\u4f1a\u975e\u5e38\u56f0\u60d1\u3002\n\u4e0egoto\u4e00\u6837\uff0c\u5e38\u89c1\u7684\u5efa\u8bae\u662f\u907f\u514dsetjmp()\u548clong jmp()\uff0c\u4f46\u662f\uff0c\u5c31\u50cfgoto\u4e00\u6837\uff0c\u6709\u65f6\u5355\u72ec\u4f7f\u7528\u5e76\u4ee5\u4e00\u81f4\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u4e5f\u5f88\u6709\u7528\u3002\u8c03\u5ea6\u5668\u9700\u8981\u80fd\u591f\u5207\u6362\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u8d1f\u8d23\u4efb\u5730\u4f7f\u7528\u8fd9\u4e9b\u529f\u80fd\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u5c06\u5bf9API\u9690\u85cf\u8fd9\u4e9b\u51fd\u6570\u7684\u4f7f\u7528\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u8c03\u5ea6\u5668\u7684\u7528\u6237\u5c31\u4e0d\u5fc5\u5904\u7406\u8fd9\u79cd\u590d\u6742\u6027\u3002\n\u7136\u800c\uff0csetjmp()\u548clong jmp()\u51fd\u6570\u5e76\u4e0d\u662f\u4e3a\u652f\u6301\u4efb\u4f55\u7c7b\u578b\u7684\u8df3\u8f6c\u800c\u8bbe\u8ba1\u7684\u3002\u5b83\u4eec\u662f\u4e3a\u4e00\u79cd\u975e\u5e38\u7279\u6b8a\u7684\u7528\u4f8b\u800c\u8bbe\u8ba1\u7684\u3002\u5047\u8bbe\u60a8\u6b63\u5728\u505a\u4e00\u4e9b\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u521b\u5efa\u4e00\u4e2aHttpRequest\u3002\u8fd9\u5c06\u6d89\u53ca\u4e00\u7ec4\u590d\u6742\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5982\u679c\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8c03\u7528\u5931\u8d25\uff0c\u60a8\u5c06\u9700\u8981\u4ece\u6bcf\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u7684\u9519\u8bef\u4ee3\u7801\u3002\u8fd9\u5c06\u5bfc\u81f4\u5728\u60a8\u8c03\u7528\u51fd\u6570\u7684\u4efb\u4f55\u5730\u65b9(\u53ef\u80fd\u6570\u5341\u6b21)\u90fd\u4f1a\u51fa\u73b0\u5982\u4e0b\u4ee3\u7801\uff1a\nsetjmp()\u548clong jmp()\u7684\u601d\u60f3\u662f\uff0c\u60a8\u53ef\u4ee5\u5728\u5f00\u59cb\u4e00\u4e9b\u590d\u6742\u7684\u64cd\u4f5c\u4e4b\u524d\u4f7f\u7528setjmp()\u6765\u4fdd\u5b58\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u9519\u8bef\u5904\u7406\u96c6\u4e2d\u5230\u4e00\u4e2a\u4f4d\u7f6e\uff1a\nint rv\uff1bjmp_buf buf\uff1bif((rv=setjmp(Buf))\uff01=0){/*\u5728\u6b64\u5904\u7406\u9519\u8bef*/return\uff1b}do_Complex_task(buf\uff0cargs.)\uff1b\n\u5982\u679cdo_Complex_task()\u4e2d\u6d89\u53ca\u7684\u4efb\u4f55\u51fd\u6570\u5931\u8d25\uff0c\u5b83\u53ea\u4f1a\u662flong jmp(buf\uff0cerror_code)\u3002\u8fd9\u610f\u5473\u7740do_Complex_task()\u4e2d\u7684\u6bcf\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u5047\u5b9a\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u90fd\u662f\u6210\u529f\u7684\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u53bb\u6389\u9519\u8bef\u5904\u7406\u4ee3\u7801\u3002(\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u51e0\u4e4e\u4ece\u6765\u6ca1\u6709\u505a\u8fc7\uff0c\u4f46\u90a3\u662f\u4e00\u7bc7\u5355\u72ec\u7684\u535a\u5ba2\u6587\u7ae0\u3002)\u3002\n\u8fd9\u91cc\u7684\u91cd\u8981\u601d\u60f3\u662f\uff0clong jmp()\u53ea\u5141\u8bb8\u60a8\u8df3\u51fa\u6df1\u5ea6\u5d4c\u5957\u51fd\u6570\u3002\u60a8\u4e0d\u80fd\u8df3\u56de\u4ee5\u524d\u8df3\u51fa\u7684\u6df1\u5ea6\u5d4c\u5957\u51fd\u6570\u3002\u4e0b\u9762\u662f\u8df3\u51fa\u51fd\u6570\u65f6\u5806\u6808\u7684\u56fe\u793a\u3002\u661f\u53f7(*)\u6807\u8bb0setjmp()\u5b58\u50a8\u7684\u5806\u6808\u6307\u9488\u3002\nlong_mp\u524d\u6808|long jmp\u540e\u6808|+-+-stack()(*)|Main()\u589e\u957f|do_http_request()|down|send_a_Header()|Write_Bytes()|v|Write()-\u5931\u8d25\uff01\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u53ea\u5728\u5806\u6808\u4e2d\u5411\u4e0a\u79fb\u52a8\uff0c\u56e0\u6b64\u6ca1\u6709\u6570\u636e\u635f\u574f\u7684\u98ce\u9669\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u60f3\u8c61\u4e00\u4e0b\u5982\u679c\u60a8\u60f3\u8981\u5728\u4efb\u52a1\u4e4b\u95f4\u8df3\u8f6c\u3002\u5982\u679c\u60a8\u8c03\u7528setjmp()\u7136\u540e\u8fd4\u56de\uff0c\u6267\u884c\u4e00\u4e9b\u5176\u4ed6\u64cd\u4f5c\uff0c\u7136\u540e\u5c1d\u8bd5\u6062\u590d\u4e4b\u524d\u6240\u505a\u7684\u64cd\u4f5c\uff0c\u60a8\u5c06\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\n|setjmp()\u5904\u5806\u6808|\u7a0d\u540e\u5806\u6808|long jmp()\u540e\u5806\u6808|+-stack()|Main()|Main()\u589e\u957f|do_task_one()|do_task_Two()|do_stack_Two()\u5411\u4e0b|subtask()\u3002|subtask()|subtask()||foo()|\uff1f\uff1fV|bar()(*)|(*)|\uff1f(*)\nsetjmp()\u4fdd\u5b58\u7684\u5806\u6808\u6307\u9488\u5c06\u6307\u5411\u4e0d\u518d\u5b58\u5728\u7684\u5806\u6808\u5e27\uff0c\u5e76\u4e14\u53ef\u80fd\u5df2\u5728\u67d0\u4e2a\u70b9\u88ab\u5176\u4ed6\u6570\u636e\u8986\u76d6\u3002\u5f53\u60a8\u5c1d\u8bd5\u5c06long jmp()\u8fd4\u56de\u5230\u5df2\u7ecf\u8fd4\u56de\u7684\u51fd\u6570\u65f6\uff0c\u60a8\u5c06\u5f00\u59cb\u4f53\u9a8c\u5230\u4e00\u4e9b\u975e\u5e38\u5947\u602a\u7684\u884c\u4e3a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u60a8\u7684\u7a0b\u5e8f\u5d29\u6e83\u3002\n\u8fd9\u4e2a\u6545\u4e8b\u7684\u5bd3\u610f\u662f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u4f7f\u7528setjmp()\u548clong jmp()\u5728\u8fd9\u6837\u7684\u590d\u6742\u4efb\u52a1\u4e4b\u95f4\u8df3\u8f6c\uff0c\u60a8\u9700\u8981\u786e\u4fdd\u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u5355\u72ec\u5806\u6808\u3002\u8fd9\u5b8c\u5168\u6d88\u9664\u4e86\u95ee\u9898\uff0c\u56e0\u4e3a\u5f53long jmp()\u91cd\u7f6e\u5806\u6808\u6307\u9488\u65f6\uff0c\u5b83\u5c06\u4e3a\u60a8\u4ea4\u6362\u5806\u6808\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d1\u751f\u5806\u6808\u8986\u76d6\u3002\n\u8fd9\u6709\u70b9\u8d39\u65f6\u8d39\u529b\uff0c\u4f46\u662f\u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5b9e\u73b0\u7528\u6237\u7a7a\u95f4\u7ebf\u7a0b\u3002\u5f00\u59cb\u65f6\uff0c\u6211\u53d1\u73b0\u8bbe\u8ba1\u7528\u4e8e\u521d\u59cb\u5316\u3001\u521b\u5efa\u548c\u8fd0\u884c\u7ebf\u7a0b\u7684API\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u63d0\u524d\u505a\u8fd9\u4ef6\u4e8b\u771f\u7684\u6709\u52a9\u4e8e\u7406\u89e3\u6211\u4eec\u6b63\u5728\u52aa\u529b\u6784\u5efa\u7684\u662f\u4ec0\u4e48\uff01\n\u8fd9\u4e9b\u51fd\u6570\u5c06\u7528\u4e8e\u521d\u59cb\u5316\u8c03\u5ea6\u5668\u3001\u6dfb\u52a0\u4efb\u52a1\uff0c\u7136\u540e\u6700\u7ec8\u5f00\u59cb\u5728\u8c03\u5ea6\u5668\u4e2d\u8fd0\u884c\u4efb\u52a1\u3002\u4e00\u65e6\u6211\u4eec\u542f\u52a8Scheduler_Run()\uff0c\u5b83\u5c06\u4e00\u76f4\u8fd0\u884c\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002\u5bf9\u4e8e\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5b83\u4eec\u5c06\u6709\u4ee5\u4e0b\u63a5\u53e3\uff1a\n\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c06\u9000\u51fa\u4efb\u52a1\u3002\u4efb\u52a1\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56deFROMITS\u51fd\u6570\u9000\u51fa\uff0c\u6240\u4ee5\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u3002\u7b2c\u4e8c\u4e2a\u51fd\u6570\u662f\u6211\u4eec\u7684\u7ebf\u7a0b\u5c06\u5982\u4f55\u544a\u8bc9\u8c03\u5ea6\u5668\u8ba9\u53e6\u4e00\u4e2a\u4efb\u52a1\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u3002\u5f53\u4efb\u52a1\u8c03\u7528Scheduler_RELINISH()\u65f6\uff0c\u5f53\u5176\u4ed6\u4efb\u52a1\u8fd0\u884c\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u6700\u7ec8\u51fd\u6570\u4f1a\u8fd4\u56de\uff0c\u4efb\u52a1\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u3002\n\u4e3a\u4e86\u7ed9\u51faAPI\u7684\u5177\u4f53\u793a\u4f8b\uff0c\u4e0b\u9762\u662f\u6b64API\u7684\u5047\u8bbe\u7528\u6cd5\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u8c03\u5ea6\u5668\uff1a\n#include&lt\uff1bstdlib.h&gt\uff1b#include&lt\uff1bstdio.h&gt\uff1b#include&#34\uff1bScheduler.h&#34\uff1bstruct tester_args{char*name\uff1bint iters\uff1b}\uff1bvoid tester(void*arg){int i\uff1bstruct tester_args*ta=(struct tester_args*)arg\uff1bfor(i=0\uff1bi&lt\uff1bta-&gt\uff1biters\uff1b\u4efb\u52a1%s\uff1a%d\\n&#34\uff1b\uff0cta-&&gt;\uff1bname\uff0ci)\uff1bScheduler_relquiish()\uff1b}free(Ta)\uff1b}void create_test_task(char*name\uff0cint iters){struct tester_args*ta=malloc(sizeof(*ta))\uff1bta-&gt\uff1bname=name\uff1bta-&gt\uff1biters=iters\uff1bScheduler_create_task(tester\uff0cta)\uff1b}int main(int argc\uff0cchar**argv){Scheduler_init()\uff1bcreate_test_task(&#34\uff1bfirst&#34\uff1b\uff0c5)\uff1bcreate_test_task(&#34\uff1bSecond&#34\uff1b\uff0c2)\uff1bScheduler_Run()\uff1bprintf(&#34\uff1b\u5df2\u8fd0\u884c\u5b8c\u6240\u6709\u4efb\u52a1\uff01\\n&#34\uff1b)\uff1breturn exit_SUCCESS\uff1b}\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u8fd0\u884c\u540c\u4e00\u51fd\u6570\u7684\u4efb\u52a1\uff0c\u4f46\u5b83\u4eec\u5c06\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u8ddf\u8e2a\u5b83\u4eec\u7684\u6267\u884c\u60c5\u51b5\u3002\u6bcf\u4e2a\u4efb\u52a1\u90fd\u8fed\u4ee3\u8bbe\u5b9a\u7684\u6b21\u6570\u3002\u6bcf\u6b21\u8fed\u4ee3\uff0c\u5b83\u90fd\u4f1a\u6253\u5370\u51fa\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u8ba9\u53e6\u4e00\u4e2a\u4efb\u52a1\u8fd0\u884c\u3002\u6211\u4eec\u671f\u671b\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u5185\u5bb9\u4f5c\u4e3a\u6b64\u7a0b\u5e8f\u7684\u8f93\u51fa\uff1a\n\u4efb\u52a1\u7b2c\u4e00\uff1a0\u4efb\u52a1\u7b2c\u4e8c\uff1a0\u4efb\u52a1\u7b2c\u4e00\uff1a1\u4efb\u52a1\u7b2c\u4e8c\uff1a1\u4efb\u52a1\u7b2c\u4e00\uff1a2\u4efb\u52a1\u7b2c\u4e00\uff1a3\u4efb\u52a1\u7b2c\u4e00\uff1a4\u6240\u6709\u4efb\u52a1\u8fd0\u884c\u5b8c\u6bd5\uff01\n\u8981\u5b9e\u73b0\u6b64API\uff0c\u6211\u4eec\u9700\u8981\u67d0\u79cdATASK\u7684\u5185\u90e8\u8868\u793a\u5f62\u5f0f\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u7ee7\u7eed\u5c06\u6211\u4eec\u9700\u8981\u7684\u5b57\u6bb5\u653e\u5728\u4e00\u8d77\uff1a\nstruct task{enum{ST_CREATED\uff0cST_RUNNING\uff0cST_WAITING\uff0c}status\uff1bint id\uff1bjmp_buf buf\uff1bvoid(*func)(void*)\uff1bvoid*arg\uff1bstruct sc_list_head task_list\uff1bvoid*STACK_Bottom\uff1bvoid*STACK_TOP\uff1bINT STACK_SIZE\uff1b}\uff1b\n\u8ba9\u6211\u4eec\u628a\u7530\u5730\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u770b\u4e00\u904d\u3002\u6240\u6709\u4efb\u52a1\u5728\u521b\u5efa\u540e\u5e94\u7acb\u5373\u5904\u4e8e\u201c\u5df2\u521b\u5efa\u201d\u72b6\u6001\u3002\u4e00\u65e6\u4efb\u52a1\u5f00\u59cb\u6267\u884c\uff0c\u5b83\u5c06\u5904\u4e8e\u201c\u8fd0\u884c\u201d\u72b6\u6001\uff0c\u5982\u679c\u4efb\u52a1\u9700\u8981\u7b49\u5f85\u67d0\u4e9b\u5f02\u6b65\u64cd\u4f5c\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u7f6e\u4e8e\u201c\u7b49\u5f85\u201d\u72b6\u6001\u3002id\u5b57\u6bb5\u53ea\u662f\u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002buf\u5305\u542b\u6211\u4eec\u5728long jmp()\u6062\u590d\u4efb\u52a1\u65f6\u7684\u6570\u636e\u3002func\u548carg\u88ab\u4f20\u9012\u7ed9Scheduler_create_task()\uff0c\u5b83\u4eec\u662f\u542f\u52a8\u4efb\u52a1\u6240\u5fc5\u9700\u7684\u3002TASK_LIST\u5b57\u6bb5\u662f\u5b9e\u73b0\u6240\u6709\u4efb\u52a1\u7684\u53cc\u5411\u94fe\u8868\u6240\u5fc5\u9700\u7684\u3002STACK_BOTTH\u3001STACK_TOP\u548cSTACK_SIZE\u5b57\u6bb5\u90fd\u4e0e\u4e3a\u6b64\u4efb\u52a1\u5206\u914d\u7684\u5355\u72ec\u5806\u6808\u76f8\u5173\u3002\u201c\u5e95\u90e8\u201d\u662fmalloc()\u8fd4\u56de\u7684\u5730\u5740\uff0c\u4f46\u201c\u9876\u90e8\u201d\u6307\u5411\u5185\u5b58\u533a\u57df\u6b63\u4e0a\u65b9\u7684\u5730\u5740\u3002\u7531\u4e8ex86\u5806\u6808\u5411\u4e0b\u589e\u957f\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5806\u6808\u6307\u9488\u8bbe\u7f6e\u4e3aSTACK_TOP\u800c\u4e0d\u662fSTACK_BOTLOW\u3002\nvoid Scheduler_CREATE_TASK(void(*func)(void*)\uff0cvoid*arg){static int id=1\uff1bstruct task*task=malloc(sizeof(*task))\uff1btask-&gt\uff1bstatus=ST_Created\uff1btask-&gt\uff1bfunc=func\uff1btask-&gt\uff1barg=arg\uff1btask-&gt\uff1bid=id++\uff1btask-&gt\uff1bstack_size=16*1024\uff1btask-&gt\uff1bstack\u3002STACK_SIZE)\uff1bTASK-&gt\uff1bSTACK_TOP=TASK-&gt\uff1bSTACK_Bottom+TASK-&gt\uff1bSTACK_SIZE\uff1bsc_list_insert_end(&amp\uff1bpri.\u3002TASK_LIST\uff0c&amp\uff1bTASK-&gt\uff1bTASK_LIST)\uff1b}\u3002\n\u4f7f\u7528\u9759\u6001int\u53ef\u4ee5\u786e\u4fdd\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0cidfield\u90fd\u4f1a\u9012\u589e\u5230\u4e00\u4e2a\u65b0\u6570\u5b57\u3002\u5176\u4ed6\u4e00\u5207\u90fd\u5e94\u8be5\u4e0d\u8a00\u800c\u55bb\uff0c\u9664\u4e86sc_list_insert_end()\uff0c\u5b83\u53ea\u662f\u5c06struct\u4efb\u52a1\u6dfb\u52a0\u5230\u5168\u5c40\u5217\u8868\u4e2d\u3002\u5168\u5c40\u5217\u8868\u5b58\u50a8\u5728\u5305\u542b\u6240\u6709\u79c1\u6709\u8c03\u5ea6\u5668\u6570\u636e\u7684\u7b2c\u4e8c\u7ed3\u6784\u4e2d\u3002\u8be5\u7ed3\u6784\u53ca\u5176\u521d\u59cb\u5316\u529f\u80fd\u5982\u4e0b\u6240\u793a\uff1a\nstruct Scheduler_Private{jmp_buf buf\uff1bstruct task*current\uff1bstruct sc_list_head task_list\uff1b}priv\uff1bvoid Scheduler_init(Void){priv.\u3002CURRENT=NULL\uff1bsc_list_init(&amp\uff1bpri.\u3002TASK_LIST)\uff1b}\u3002\nTASK_LIST\u5b57\u6bb5\u7528\u4e8e\u5f15\u7528\u4efb\u52a1\u5217\u8868(\u6beb\u4e0d\u5947\u602a)\uff0cCURRENT\u5b57\u6bb5\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1(\u5982\u679c\u5f53\u524d\u6ca1\u6709\u4efb\u4f55\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u5219\u4e3aNULL)\u3002\u6700\u91cd\u8981\u7684\u662f\uff0cbuf\u5b57\u6bb5\u5c06\u7528\u4e8e\u8df3\u8f6c\u5230Scheduler_Run()\u7684\u4ee3\u7801\uff1a\nenum{INIT=0\uff0cSchedule\uff0cexit_task\uff0c}\uff1bvoid Scheduler_Run(Void){/*\u8fd9\u662f\u8c03\u5ea6\u7a0b\u5e8f\u7684\u9000\u51fa\u8def\u5f84\uff01*/switch(setjmp(priv.\u3002buf){case exit_task\uff1aSCHEDLER_FREE_CURRENT_TASK()\uff1bCASE INIT\uff1aCASE Schedule\uff1aSchedule()\uff1b/*\u5982\u679c\u8fd4\u56de\uff0c\u5219\u6ca1\u6709\u5176\u4ed6\u4e8b\u60c5\u53ef\u505a\uff0c\u6211\u4eec\u9000\u51fa*/return\uff1b\u9ed8\u8ba4\u503c\uff1afprintf(stderr\uff0c&#34\uff1bUh oh\uff0cScheduler Error\\n&#34\uff1b)\uff1breturn\uff1b}}\u3002\n\u4e00\u65e6\u8c03\u7528Scheduler_run()\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u8bbe\u7f6esetjmp()\u7f13\u51b2\u533a\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u59cb\u7ec8\u8fd4\u56de\u5230\u6b64\u51fd\u6570\u3002\u7b2c\u4e00\u6b21\u8fd4\u56de0(INIT)\uff0c\u6211\u4eec\u7acb\u5373\u8c03\u7528Schedule()\u3002\u968f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8c03\u5ea6\u6216EXIT_TASK\u5e38\u91cf\u4f20\u9012\u7ed9long jmp()\uff0c\u8fd9\u5c06\u89e6\u53d1\u4e0d\u540c\u7684\u884c\u4e3a\u3002\u8ba9\u6211\u4eec\u6682\u65f6\u5ffd\u7565exit_task\u6848\u4f8b\uff0c\u76f4\u63a5\u8fdb\u5165Schedule()\u7684\u5b9e\u73b0\uff1a\n\u9759\u6001\u4f5c\u5e9f\u8c03\u5ea6(Void){struct task*next=SCHEDLER_CHOOSE_TASK()\uff1b\u5982\u679c(\uff01\u4e0b\u4e00\u6b65){return\uff1b}prv.\u3002CURRENT=NEXT\uff1bIF(NEXT-&&gt;\uff1bSTATUS==ST_CREATED){/**\u6b64\u4efb\u52a1\u5c1a\u672a\u5f00\u59cb\u3002\u5206\u914d\u4e00\u4e2a\u65b0\u7684STACK*\u6307\u9488\uff0c\u8fd0\u884c\u4efb\u52a1\uff0c\u5e76\u5728\u7ed3\u675f\u65f6\u9000\u51fa\u3002*/register void*top=Next-&gt\uff1bSTACK_TOP\uff1bASM Volatil(&#34\uff1bmov%[rs]\uff0c%%rsp\\n&#34\uff1b\uff1a[RS]&#34\uff1b+r&#34\uff1b(Top)\uff1a)\uff1b/**\u8fd0\u884c\u4efb\u52a1\u51fd\u6570*/Next-&gt\uff1bstatus=ST_Running\uff1bNext-&gt\uff1bfunc(Next-gt\uff1barg)\uff1b/**\u5806\u6808\u6307\u9488\u5e94\u56de\u5230\u6211\u4eec\u8bbe\u7f6e\u5b83\u7684\u4f4d\u7f6e\u3002\u8fd4\u56de\u5c06\u662f\u4e00\u4e2a\u975e\u5e38\u3001\u975e\u5e38\u7cdf\u7cd5\u7684\u4e3b\u610f\u3002\u8ba9&#39\uff1bs\u6539\u4e3a\u9000\u51fa*/Scheduler_Exit_Current_Task()\uff1b}\u5426\u5219{long jmp(Next-gt\uff1bbuf\uff0c1)\uff1b}/*\u4e0d\u8fd4\u56de*/}\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u5185\u90e8\u51fd\u6570\u6765\u9009\u62e9\u5e94\u8be5\u8fd0\u884c\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u56e0\u6b64\u5b83\u53ea\u9009\u62e9\u4efb\u52a1\u5217\u8868\u4e2d\u6700\u63a5\u8fd1\u7684\u4efb\u52a1\u3002\u5982\u679c\u6b64\u51fd\u6570\u8fd4\u56deNULL\uff0c\u5219\u6211\u4eec\u6709\u66f4\u591a\u4efb\u52a1\u8981\u8fd0\u884c\uff0c\u7136\u540e\u8fd4\u56de\u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u542f\u52a8\u4efb\u52a1\u8fd0\u884c(\u5982\u679c\u5b83\u5904\u4e8eST_CREATED\u72b6\u6001)\u6216\u7ee7\u7eed\u8fd0\u884c\u5b83\u3002\n\u8981\u542f\u52a8\u521b\u5efa\u7684\u4efb\u52a1\uff0c\u6211\u4eec\u4f7f\u7528x86_64\u6c47\u7f16\u6307\u4ee4\u5c06STACK_TOP\u5b57\u6bb5\u5206\u914d\u7ed9RSP\u5bc4\u5b58\u5668(\u5806\u6808\u6307\u9488)\u3002\u7136\u540e\uff0c\u6211\u4eec\u66f4\u6539\u4efb\u52a1\u72b6\u6001\uff0c\u8fd0\u884c\u51fd\u6570\uff0c\u5982\u679c\u51fd\u6570\u8fd4\u56de\uff0c\u5219\u9000\u51fa\u3002\u8bf7\u6ce8\u610f\uff0csetjmp()\u548clong jmp()\u5b58\u50a8\u548c\u4ea4\u6362\u5806\u6808\u6307\u9488\uff0c\u56e0\u6b64\u8fd9\u662f\u6211\u4eec\u552f\u4e00\u9700\u8981\u4f7f\u7528\u6c47\u7f16\u4fee\u6539\u5806\u6808\u6307\u9488\u7684\u65f6\u5019\u3002\n\u5982\u679c\u4efb\u52a1\u5df2\u7ecf\u542f\u52a8\uff0c\u90a3\u4e48buf\u5b57\u6bb5\u5e94\u8be5\u5305\u542b\u6211\u4eec\u9700\u8981long jmp()\u8fdb\u5165\u4ee5\u6062\u590d\u4efb\u52a1\u7684\u4e0a\u4e0b\u6587\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8fd9\u6837\u505a\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u9009\u62e9\u4e0b\u4e00\u4e2a\u8981\u8fd0\u884c\u7684\u4efb\u52a1\u7684helper\u51fd\u6570\u3002\u8fd9\u662f\u8c03\u5ea6\u5668\u7684\u6838\u5fc3\uff0c\u5c31\u50cf\u6211\u524d\u9762\u8bf4\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5faa\u73af\u8c03\u5ea6\u5668\uff1a\n\u9759\u6001\u7ed3\u6784TASK*SCHEDLER_CHOOSE_TASK(Void){\u7ed3\u6784TASK*TASK\uff1bsc_list_for_each_entry(TASK\uff0c&amp\uff1bpri.\u3002TASK_LIST\uff0cTASK_LIST\uff0cSTRUCT TASK){IF(TASK-&&gt;\uff1bSTATUS==ST_RUNNING||TASK-&&gt;\uff1bSTATUS==ST_CREATED){sc_LIST_REMOVE(&amp\uff1bTASK-&gT\uff1bTASK_LIST)\uff1bsc_LIST_INSERT_END(&amp\uff1bPRIV.\u3002TASK_LIST\uff0c&amp\uff1bTASK-&gt\uff1bTASK_LIST)\uff1breturn task\uff1b}}return null\uff1b}\u3002\n\u5982\u679c\u60a8\u4e0d\u719f\u6089\u6211\u7684\u94fe\u8868\u5b9e\u73b0(\u53d6\u81eaLinux\u5185\u6838)\uff0c\u4e5f\u6ca1\u95ee\u9898\u3002sc_list_for_each_entry()\u51fd\u6570\u662f\u4e00\u4e2a\u5b8f\uff0c\u5141\u8bb8\u6211\u4eec\u8fed\u4ee3\u4efb\u52a1\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u4efb\u52a1\u3002\u6211\u4eec\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684(Notwaiting)\u4efb\u52a1\u5c06\u4ece\u5176\u5f53\u524d\u4f4d\u7f6e\u79fb\u9664\uff0c\u5e76\u63d2\u5165\u5230\u4efb\u52a1\u5217\u8868\u7684\u672b\u5c3e\u3002\u8fd9\u786e\u4fdd\u4e86\u4e0b\u6b21\u6211\u4eec\u8fd0\u884c\u8c03\u5ea6\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u4efb\u52a1(\u5982\u679c\u6709\u53e6\u4e00\u4e2a\u4efb\u52a1)\u3002\u6211\u4eec\u8fd4\u56de\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u4efb\u52a1\uff0c\u5982\u679c\u6839\u672c\u6ca1\u6709\u4efb\u52a1\uff0c\u5219\u8fd4\u56deNULL\u3002\n\u6700\u540e\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0bScheduler_RELINISH()\u7684\u5b9e\u73b0\uff0c\u770b\u770b\u4efb\u52a1\u662f\u5982\u4f55\u5207\u6362\u81ea\u8eab\u7684\uff1a\n\u8fd9\u662f\u6211\u4eec\u7684\u8c03\u5ea6\u7a0b\u5e8f\u4e2dsetjmp()\u51fd\u6570\u7684\u53e6\u4e00\u4e2a\u7528\u6cd5\u3002\u56e0\u6b64\uff0c\u5b83\u53ef\u80fd\u4f1a\u6709\u70b9\u4ee4\u4eba\u56f0\u60d1\u3002\u5f53\u4efb\u52a1\u8c03\u7528\u6b64\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4f7f\u7528setjmp()\u4fdd\u5b58\u5f53\u524d\u4e0a\u4e0b\u6587(\u5305\u62ec\u5f53\u524d\u5806\u6808\u6307\u9488)\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528long jmp()\u8fdb\u5165\u8c03\u5ea6\u5668(\u56de\u5230Scheduler_Run())\uff0c\u5e76\u4f20\u9012\u8bf7\u6c42\u8c03\u5ea6\u65b0\u4efb\u52a1\u7684\u8c03\u5ea6\u51fd\u6570\u3002\n\u5f53\u4efb\u52a1\u6062\u590d\u65f6\uff0csetjmp()\u51fd\u6570\u5c06\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u5230\u4efb\u52a1\u4e4b\u524d\u6b63\u5728\u6267\u884c\u7684\u64cd\u4f5c\uff01\n\u6700\u540e\uff0c\u4e0b\u9762\u662f\u4efb\u52a1\u9000\u51fa\u65f6\u53d1\u751f\u7684\u60c5\u51b5(\u901a\u8fc7\u663e\u5f0f\u8c03\u7528exit\u51fd\u6570\uff0c\u6216\u8005\u901a\u8fc7\u4ece\u5176\u4efb\u52a1\u51fd\u6570\u8fd4\u56de)\uff1a\nvoid Scheduler_Exit_Current_TASK(Void){struct task*task=priv.\u3002\u5f53\u524d\uff1bsc_list_remove(&amp\uff1btask-&gt\uff1btask_list)\uff1blong jmp(\u521d\u59cb\u3002buf\uff0cexit_task)\uff1b/*\u4e0d\u8fd4\u56de*/}static void Scheduler_free_current_task(Void){struct task*task=priv.\u3002\u5f53\u524d\u7684\uff1b\u5f53\u524d\u7684\u3002CURRENT=NULL\uff1bFREE(\u4efb\u52a1-&&gt;\uff1bSTACK_BOOT)\uff1bFREE(\u4efb\u52a1)\uff1b}\u3002\n\u8fd9\u4e2a\u8fc7\u7a0b\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u7b2c\u4e00\u4e2a\u51fd\u6570\u7531\u4efb\u52a1\u76f4\u63a5\u8c03\u7528\u3002\u6211\u4eec\u4ece\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u8be5\u4efb\u52a1\u7684\u6761\u76ee\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5e94\u8be5\u518d\u88ab\u8c03\u5ea6\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06long jmp()\u8fd4\u56de\u5230Scheduler_run()\u51fd\u6570\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u4f7f\u7528exit_task\u3002\u8fd9\u5411\u8c03\u5ea6\u5668\u8868\u660e\uff0c\u5728\u8c03\u5ea6\u65b0\u4efb\u52a1\u4e4b\u524d\uff0c\u5b83\u5e94\u8be5\u9996\u5148\u8c03\u7528Scheduler_free_current_task()\u3002\u5982\u679c\u60a8\u5411\u4e0a\u6eda\u52a8\u5230Scheduler_run()\uff0c\u60a8\u5c06\u770b\u5230\u8fd9\u6b63\u662fScheduler_Run()\u6240\u505a\u7684\u4e8b\u60c5\u3002\n\u6211\u4eec\u5fc5\u987b\u5206\u4e24\u90e8\u5206\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5f53\u8c03\u7528SCHEDLER_EXIT_CURRENT_TASK()\u65f6\uff0c\u5b83\u4f1a\u4e3b\u52a8\u4f7f\u7528\u4efb\u52a1\u7ed3\u6784\u4e2d\u5305\u542b\u7684\u5806\u6808\u3002\u5982\u679c\u60a8\u5728\u91ca\u653e\u5806\u6808\u7684\u540c\u65f6\u4ecd\u5728\u4f7f\u7528\u5b83\uff0c\u5219\u51fd\u6570\u4ecd\u6709\u53ef\u80fd\u8bbf\u95ee\u6211\u4eec\u521a\u521a\u91ca\u653e\u7684\u5806\u6808\u5185\u5b58\uff01\u4e3a\u4e86\u786e\u4fdd\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\uff0c\u6211\u4eec\u5fc5\u987b\u5c06long jmp()\u8fd4\u56de\u5230\u8c03\u5ea6\u5668\uff0c\u8be5\u8c03\u5ea6\u5668\u4f7f\u7528\u5355\u72ec\u7684\u5806\u6808\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u91ca\u653e\u4efb\u52a1\u7684\u6570\u636e\u3002\n\u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8be5\u8c03\u5ea6\u5668\u7684\u6574\u4e2a\u5b9e\u73b0\u3002\u5982\u679c\u60a8\u7ee7\u7eed\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4ee5\u53ca\u6211\u7684\u94fe\u8868\u5b9e\u73b0\u548c\u4e0a\u9762\u7684\u4e3b\u7a0b\u5e8f\uff0c\u60a8\u5c31\u4f1a\u6709\u4e00\u4e2a\u5de5\u4f5c\u7684\u8c03\u5ea6\u5668\uff01\u6211\u5efa\u8bae\u60a8\u67e5\u770b\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u7684githubrepository\uff0c\u800c\u4e0d\u662f\u6240\u6709\u90a3\u4e9b\u590d\u5236\u548c\u7c98\u8d34\u64cd\u4f5c\u3002\n\u5982\u679c\u4f60\u5df2\u7ecf\u8d70\u5230\u8fd9\u4e00\u6b65\u4e86\uff0c\u6211\u60f3\u6211\u4e0d\u9700\u8981\u8bf4\u670d\u4f60\u8fd9\u5f88\u6709\u8da3\u3002\u7136\u800c\uff0c\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u6ca1\u6709\u90a3\u4e48\u6709\u7528\u3002\u6bd5\u7adf\uff0c\u60a8\u53ef\u4ee5\u5728C\u4e2d\u4f7f\u7528\u201c\u771f\u6b63\u7684\u201d\u7ebf\u7a0b\uff0c\u5b83\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u5f7c\u6b64\u8c03\u7528Scheduler_RELINISH()\u3002\n\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u7cfb\u5217\u4ee4\u4eba\u5174\u594b\u7684\u6709\u7528\u529f\u80fd\u5b9e\u73b0\u7684\u8d77\u70b9\u3002\u5bf9\u4e8eI/O\u7e41\u91cd\u7684\u4efb\u52a1\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u7528\u6765\u7b80\u5355\u5730\u5b9e\u73b0\u5355\u7ebf\u7a0b\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u662fPython\u65b0\u7684\u5f02\u6b65\u5b9e\u7528\u7a0b\u5e8f\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u8be5\u7cfb\u7edf\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u751f\u6210\u5668\u548c\u534f\u7a0b\u3002\u6700\u540e\uff0c\u53ea\u8981\u4ed8\u51fa\u8db3\u591f\u7684\u52aa\u529b\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u751a\u81f3\u53ef\u4ee5\u4e0e\u201c\u771f\u6b63\u7684\u201d\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u7ed3\u5408\u8d77\u6765\uff0c\u5728\u9700\u8981\u7684\u5730\u65b9\u63d0\u4f9b\u66f4\u591a\u7684\u5e76\u884c\u6027\u3002\u8fd9\u4e9b\u60f3\u6cd5\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u9879\u76ee\uff0c\u6211\u9f13\u52b1\u8bfb\u8005\u5728\u6211\u5f00\u59cb\u5199\u4e00\u7bc7\u5173\u4e8e\u5b83\u4eec\u7684\u65b0\u6587\u7ae0\u4e4b\u524d\u5c1d\u8bd5\u4e00\u4e0b\uff01\n\u6211\u662f\u8bf4\uff0c\u53ef\u80fd\u4e0d\u4f1a\uff01\u4f7f\u7528\u5185\u8054\u7a0b\u5e8f\u96c6\u4fee\u6539\u5806\u6808\u6307\u9488\u53ef\u80fd\u4e0d\u5b89\u5168\u3002\u4e0d\u8981\u5728\u60a8\u7684\u751f\u4ea7\u4ee3\u7801\u4e2d\u4f7f\u7528\u5b83\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u4f7f\u7528\u5b83\u6765\u6363\u4e71\u548c\u63a2\u7d22\uff01\n\u8fd9\u4e2a\u7cfb\u7edf\u7684\u4e00\u4e2a\u66f4\u5b89\u5168\u7684\u5b9e\u73b0\u53ef\u4ee5\u6784\u5efa\u5728\u201cucontext\u201dAPI\u4e0a(\u53c2\u89c1man getcontext)\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u8fd9\u4e9b\u7c7b\u578b\u7684\u7528\u6237\u7a7a\u95f4\u201c\u7ebf\u7a0b\u201d\u4e4b\u95f4\u8fdb\u884c\u4ea4\u6362\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u9700\u8981\u5e72\u9884\u5185\u8054\u6c47\u7f16\u3002\u4e0d\u5e78\u7684\u662f\uff0cAPI\u662f\u975e\u6807\u51c6\u7684(\u5b83\u5df2\u4ece\u6700\u65b0\u7684POSIX\u89c4\u8303\u4e2d\u5220\u9664)\u3002\u4f46\u662f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u6b64API\uff0c\u56e0\u4e3a\u5b83\u662fglibc\u7684\u4e00\u90e8\u5206\u3002\n\u6b63\u5982\u5f53\u524d\u7f16\u5199\u7684\u90a3\u6837\uff0c\u6b64\u8c03\u5ea6\u7a0b\u5e8f\u4ec5\u5728\u7ebf\u7a0b\u663e\u5f0f\u5730\u5c06\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u8c03\u5ea6\u7a0b\u5e8f\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u8fd9\u5bf9\u4e8e\u50cf\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u6837\u7684\u901a\u7528\u5b9e\u73b0\u662f\u4e0d\u597d\u7684\uff0c\u56e0\u4e3a\u884c\u4e3a\u4e0d\u4f73\u7684\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u963b\u6b62\u6240\u6709\u5176\u4ed6\u7ebf\u7a0b\u8fd0\u884c\u3002(\u5f53\u7136\uff0c\u8fd9\u5e76\u6ca1\u6709\u963b\u6b62MS-DOS\u4f7f\u7528\u534f\u4f5c\u591a\u4efb\u52a1\uff01)\u3002\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u4f1a\u4f7f\u534f\u4f5c\u591a\u4efb\u52a1\u53d8\u5f97\u4e0d\u597d\uff0c\u8fd9\u53ea\u662f\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5982\u679c\u4f7f\u7528\u975e\u6807\u51c6\u7684\u201cucontext\u201dAPI\uff0c\u90a3\u4e48POSIX\u4fe1\u53f7\u5c06\u5b9e\u9645\u5b58\u50a8\u5148\u524d\u6267\u884c\u7684\u4ee3\u7801\u7684\u4e0a\u4e0b\u6587\u3002\u901a\u8fc7\u8bbe\u7f6e\u5468\u671f\u6027\u5b9a\u65f6\u5668\u4fe1\u53f7\uff0c\u7528\u6237\u7a7a\u95f4\u8c03\u5ea6\u5668\u5b9e\u9645\u4e0a\u53ef\u4ee5\u83b7\u5f97\u62a2\u5360\u5f0f\u591a\u4efb\u52a1\u5de5\u4f5c\uff01\u8fd9\u662f\u53e6\u4e00\u4e2a\u975e\u5e38\u9177\u7684\u9879\u76ee\uff0c\u6211\u5e0c\u671b\u5c3d\u5feb\u8bd5\u7528\u5e76\u64b0\u5199\u3002\n\u5982\u679c\u4f60\u5df2\u7ecf\u8d70\u5230\u8fd9\u4e00\u6b65\uff0c\u611f\u8c22\u4f60\u7684\u9605\u8bfb\uff0c\u6211\u5e0c\u671b\u4f60\u6709\u673a\u4f1a\u5728\u6b64\u57fa\u7840\u4e0a\u5c1d\u8bd5\u4e00\u4e2a\u6709\u8da3\u7684\u9879\u76ee\uff01\n\u6cd5\u5f8b\u00b7RSS\u65af\u8482\u82ac\u00b7\u5e03\u4f26\u5357(Stephen Brennan)\u7684\u535a\u5ba2\u91c7\u7528\u77e5\u8bc6\u5171\u4eab\u7f72\u540d-ShareAlike 4.0\u56fd\u9645\u8bb8\u53ef", "note_en": "Stephen Brennan \u2022 24 May 2020 Multitasking, like many services an operating system provides, is something wetake for granted so much that it can feel mundane. With our powerful smartphonesand computers, the idea of a computer  not being able to juggle hundreds ofprocesses feels alien. I think it\u2019s features like this that make computersincredibly useful, but also make them feel so complicated and magical.\n It\u2019s hard to play around with the code that implements multitasking, and it\u2019snot obvious how to implement it yourself without building a whole OS. I\u2019m a firmbeliever that you don\u2019t truly understand something until you\u2019ve implemented ityourself, so I wanted to write an article that lets people play around with asimple thread implementation. In this post, we\u2019ll implement simple threads in anormal C program (not an operating system).\n  This scheduler is going to rely heavily on the functions  setjmp() and longjmp(). They feel a bit magical, so I want to first describe what they do,and spend a little time demystifying how they do it.\n The function  setjmp() is a way of recording information about where a programis in its execution, so that you can later jump back to that point. You give ita variable of type  jmp_buf, in which it will store that information. setjmp() returns 0 the first time it returns.\n Later on, you can use the function  longjmp(jmp_buf, value) to immediatelybegin execution back at the point where you called  setjmp(). To your program,it will look like  setjmp() returned a  second time. The  value argument youpass to  longjmp() will be returned this time, to help differentiate the secondreturn. Here\u2019s an example to help illustrate:\n #include &lt;stdio.h&gt;#include &lt;setjmp.h&gt; jmp_buf  saved_location ; int  main ( int  argc ,  char  ** argv ) {  if  ( setjmp ( saved_location )  ==  0 )  {  printf ( &#34;We have successfully set up our jump buffer! \\n &#34; );  }  else  {  printf ( &#34;We jumped! \\n &#34; );  return  0 ;  }  printf ( &#34;Getting ready to jump! \\n &#34; );  longjmp ( saved_location ,  1 );  printf ( &#34;This will never execute... \\n &#34; );  return  0 ; }\n   Wild! It\u2019s like a goto statement, but it can even be used to jump outside of afunction. It\u2019s also a lot more difficult to read than a goto, since it lookslike a regular function call. If your code used  setjmp() and  longjmp()liberally, it would be incredibly confusing for anyone (including yourself) toread.\n Like with goto, the common advice is to avoid  setjmp() and  longjmp().However, just like with goto, there are some times where it can be useful to usesparingly, and in a consistent way. A scheduler needs to be able to switchcontexts, and so we\u2019ll have to use these functions responsibly. Mostimportantly, we\u2019ll hide the use of these functions from our API, so that usersof our scheduler won\u2019t have to deal with that kind of complexity.\n  The  setjmp() and  longjmp() functions aren\u2019t designed to support just  anykind of jumping around, however. They\u2019re designed for a pretty particular usecase. Imagine that you are doing something complicated, like making an HTTPrequest. This will involve a complicated set of function calls, and if any ofthem fail, you\u2019ll need to return a special error code from each one of them.This leads to code like this, everywhere you call a function (possibly dozens oftimes):\n  The idea of  setjmp() and  longjmp() is that you can use  setjmp() to saveyour place just before starting something complex. Then, you could centralizeall of your error handling into one place:\n int  rv ; jmp_buf  buf ; if  (( rv  =  setjmp ( buf ))  !=  0 )  {  /* handle errors here */  return ; } do_complicated_task ( buf ,  args ...);\n If any function involved in  do_complicated_task() fails, it would just longjmp(buf, error_code). This means that every function within do_complicated_task() can assume that every function call is a success, whichmeans you can get rid of that error handling code for each function call. (Inpractice, this is almost never done, but that\u2019s a separate blog post.)\n The big idea here is that  longjmp() only allows you to jump  out of deeplynested functions. You can\u2019t jump back  into a deeply nested function which youhad formerly jumped out of. Here\u2019s an illustration of the stack when you jumpout of a function. The asterisk  (*) marks the stack pointer which  setjmp()stored.\n | Stack before longjmp | Stack after longjmp +-------------------------+----------------------------stack | main() (*) | main()grows | do_http_request() |down | send_a_header() | | | write_bytes() | v | write() - fails! |\n You can see that we only move back up the stack, and so there is no risk of datacorruption. On the other hand, imagine if you wanted to jump between tasks. Ifyou call  setjmp() and then return, do some other stuff, and then attempt toresume what you were doing before, you\u2019ll have a problem:\n | Stack at setjmp() | Stack later | Stack after longjmp() +-------------------+------------------+----------------------stack | main() | main() | main()grows | do_task_one() | do_task_two() | do_stack_two()down | subtask() | subtask() | subtask() | | foo() | | ??? v | bar() (*) | (*) | ??? (*)\n The stack pointer which  setjmp() saved will point at a stack frame which nolonger exists, and may have been overwritten at some point with other data. Whenyou try to  longjmp() back into the function you have already returned from,you\u2019ll start experiencing some really weird behavior that will probably crashyour program.\n The moral of this story is that, if you want to use setjmp() and longjmp() tojump between complex tasks like this, you need to make sure each task has  itsown separate stack. This completely eliminates the problem, because when longjmp() resets the stack pointer, it will swap stacks for you, and no stackoverwriting will take place.\n  That was a bit of a long diversion, but equipped with this knowledge, we shouldbe able to implement userspace threads. To start out, I found it quite helpfulto design the API which should be used to initialize, create, and run thethreads. Doing this ahead of time really helps understand what we\u2019re trying tobuild!\n  These functions will be used to initialize the scheduler, add tasks, and theneventually begin running tasks in the scheduler. Once we start scheduler_run(), it will run until all tasks are completed. For tasks whichare running, they will have the following APIs:\n  The first function will exit the task. A task could also exit by returning fromits function, so this is simply a convenience. The second function is how ourthreads will tell the scheduler to let another task run for a bit. When a taskcalls  scheduler_relinquish(), it could be suspended a bit for a bit, whileother tasks run, but eventually the function will return and the task cancontinue running.\n To give a concrete example of the API, here\u2019s a hypothetical use of this API,which we\u2019ll use to test our scheduler:\n #include &lt;stdlib.h&gt;#include &lt;stdio.h&gt; #include &#34;scheduler.h&#34; struct  tester_args  {  char  * name ;  int  iters ; }; void  tester ( void  * arg ) {  int  i ;  struct  tester_args  * ta  =  ( struct  tester_args  * ) arg ;  for  ( i  =  0 ;  i  &lt;  ta -&gt; iters ;  i ++ )  {  printf ( &#34;task %s: %d \\n &#34; ,  ta -&gt; name ,  i );  scheduler_relinquish ();  }  free ( ta ); } void  create_test_task ( char  * name ,  int  iters ) {  struct  tester_args  * ta  =  malloc ( sizeof ( * ta ));  ta -&gt; name  =  name ;  ta -&gt; iters  =  iters ;  scheduler_create_task ( tester ,  ta ); } int  main ( int  argc ,  char  ** argv ) {  scheduler_init ();  create_test_task ( &#34;first&#34; ,  5 );  create_test_task ( &#34;second&#34; ,  2 );  scheduler_run ();  printf ( &#34;Finished running all tasks! \\n &#34; );  return  EXIT_SUCCESS ; }\n In this example, we create two tasks which run the same function, but they\u2019lluse different arguments so that we can trace their execution separately. Eachtask iterates a set number of times. Each iteration, it prints out a message andthen lets another task run. We would expect to see something like this as theoutput of this program:\n task first: 0task second: 0task first: 1task second: 1task first: 2task first: 3task first: 4Finished running all tasks!\n  To implement this API, we\u2019ll need some sort of internal representation of atask, so let\u2019s go ahead and put together fields we\u2019ll need:\n struct  task  {  enum  {  ST_CREATED ,  ST_RUNNING ,  ST_WAITING ,  }  status ;  int  id ;  jmp_buf  buf ;  void  ( * func )( void * );  void  * arg ;  struct  sc_list_head  task_list ;  void  * stack_bottom ;  void  * stack_top ;  int  stack_size ; };\n Let\u2019s go through the fields one by one. All tasks should be in the \u201ccreated\u201dstate as soon as they\u2019re created. Once a task starts executing, it will be inthe \u201crunning\u201d status, and if a task ever needed to wait for some asynchronousoperation, it could be placed in the \u201cwaiting\u201d state. The  id field is just aunique identifier for the task.  buf contains the data for when we  longjmp()to resume the task.  func and  arg are passed to  scheduler_create_task() andare necessary for starting the task. The  task_list field is necessary toimplement a doubly linked list of all tasks. The  stack_bottom,  stack_top,and  stack_size fields all relate to the separate stack allocated for thistask. The \u201cbottom\u201d is the address returned by  malloc(), but the \u201ctop\u201d is apointer to the address directly above the region of memory. Since the x86 stackgrows downward, we will need to set the stack pointer to  stack_top rather than stack_bottom.\n  void  scheduler_create_task ( void  ( * func )( void  * ),  void  * arg ) {  static  int  id  =  1 ;  struct  task  * task  =  malloc ( sizeof ( * task ));  task -&gt; status  =  ST_CREATED ;  task -&gt; func  =  func ;  task -&gt; arg  =  arg ;  task -&gt; id  =  id ++ ;  task -&gt; stack_size  =  16  *  1024 ;  task -&gt; stack_bottom  =  malloc ( task -&gt; stack_size );  task -&gt; stack_top  =  task -&gt; stack_bottom  +  task -&gt; stack_size ;  sc_list_insert_end ( &amp; priv . task_list ,  &amp; task -&gt; task_list ); }\n Using a  static int ensures that each time the function is called, the  idfield increments to a new number. Everything else should be self-explanatory,except the  sc_list_insert_end(), which simply adds the  struct task to theglobal list. The global list is stored within a second structure, whichcontains all the private scheduler data. This structure is presented below,along with its initialization function:\n struct  scheduler_private  {  jmp_buf  buf ;  struct  task  * current ;  struct  sc_list_head  task_list ; }  priv ; void  scheduler_init ( void ) {  priv . current  =  NULL ;  sc_list_init ( &amp; priv . task_list ); }\n The  task_list field is used to refer to the list of tasks (unsurprisingly).The  current field is used to store the currently executing task (or null ifnone is curently running). Most importantly, the  buf field will be used tojump into the code of  scheduler_run():\n enum  {  INIT = 0 ,  SCHEDULE ,  EXIT_TASK , }; void  scheduler_run ( void ) {  /* This is the exit path for the scheduler! */  switch  ( setjmp ( priv . buf ))  {  case  EXIT_TASK :  scheduler_free_current_task ();  case  INIT :  case  SCHEDULE :  schedule ();  /* if return, there&#39;s nothing else to do and we exit */  return ;  default:  fprintf ( stderr ,  &#34;Uh oh, scheduler error \\n &#34; );  return ;  } }\n As soon as the  scheduler_run() function is called, we set the  setjmp()buffer so we can always return to this function. The first time, 0 ( INIT) isreturned, and we immediately call  schedule(). Subsequently, we can pass the SCHEDULE or  EXIT_TASK constants into  longjmp(), which will triggerdifferent behaviors. Let\u2019s ignore the  EXIT_TASK case for now, and go directlyinto the implementation of  schedule():\n static  void  schedule ( void ) {  struct  task  * next  =  scheduler_choose_task ();  if  ( ! next )  {  return ;  }  priv . current  =  next ;  if  ( next -&gt; status  ==  ST_CREATED )  {  /* * This task has not been started yet. Assign a new stack * pointer, run the task, and exit it at the end. */  register  void  * top  =  next -&gt; stack_top ;  asm  volatile (  &#34;mov %[rs], %%rsp  \\n &#34;  :  [  rs  ]  &#34;+r&#34;  ( top )  ::  );  /* * Run the task function */  next -&gt; status  =  ST_RUNNING ;  next -&gt; func ( next -&gt; arg );  /* * The stack pointer should be back where we set it. Returning would be * a very, very bad idea. Let&#39;s instead exit */  scheduler_exit_current_task ();  }  else  {  longjmp ( next -&gt; buf ,  1 );  }  /* NO RETURN */ }\n First, we call an internal function to select the next task which should be run.This is going to be a simple round-robin scheduler, so it just chooses the nextready task in the task list. If this function returned NULL, then we have nomore tasks to run, and we return. Otherwise, we need to either start the taskrunning (if it is in the  ST_CREATED state) or resume running it.\n To start a created task, we use an x86_64 assembly instruction to assign the stack_top field to the  rsp register (stack pointer). Then we change the taskstate, run the function, and exit if the function returns. Note that  setjmp()and  longjmp() store and swap stack pointers, so this is the only time wherewe\u2019ll need to use assembly to modify the stack pointer.\n If the task has already been started, then the  buf field should contain thecontext we need to  longjmp() into to resume the task, so we just do that.Next, let\u2019s look at the helper function which selects the next task to run. Thisis the heart of a scheduler, and like I said earlier, this is a round-robinscheduler:\n static  struct  task  * scheduler_choose_task ( void ) {  struct  task  * task ;  sc_list_for_each_entry ( task ,  &amp; priv . task_list ,  task_list ,  struct  task )  {  if  ( task -&gt; status  ==  ST_RUNNING  ||  task -&gt; status  ==  ST_CREATED )  {  sc_list_remove ( &amp; task -&gt; task_list );  sc_list_insert_end ( &amp; priv . task_list ,  &amp; task -&gt; task_list );  return  task ;  }  }  return  NULL ; }\n If you\u2019re unfamiliar with my linked list implementation (which is taken from theLinux kernel), that\u2019s ok. The  sc_list_for_each_entry() function is a macrothat lets us iterate over each task in the task list. The first eligible (notwaiting) task we find is removed from its current position and inserted at theend of the task list. This ensures that next time we run the scheduler, we\u2019llget a different task (if there is another). We return this first eligible task,or NULL if there were no tasks at all.\n Finally, let\u2019s get to the implementation of  scheduler_relinquish() to see howa task can switch itself out:\n  This is the other use of the  setjmp() function in our scheduler. As such itcan be slightly confusing. When a task calls this function, we use  setjmp() tosave our current context (which includes the current stack pointer). Then, weuse  longjmp() to enter into the scheduler (back in  scheduler_run()), and wepass the  SCHEDULE function asking to schedule a new task.\n When the task gets resumed, the  setjmp() function will return non-zero andwe\u2019ll return out to whatever the task was doing before!\n Finally, here\u2019s what happens when a task exits (either by explicitly calling theexit function, or by returning from its task function):\n void  scheduler_exit_current_task ( void ) {  struct  task  * task  =  priv . current ;  sc_list_remove ( &amp; task -&gt; task_list );  longjmp ( priv . buf ,  EXIT_TASK );  /* NO RETURN */ } static  void  scheduler_free_current_task ( void ) {  struct  task  * task  =  priv . current ;  priv . current  =  NULL ;  free ( task -&gt; stack_bottom );  free ( task ); }\n This process comes in two parts: the first function is called directly by thetask. We remove the task\u2019s entry from the task list, since it should no longerbe scheduled. Then, we  longjmp() back to the  scheduler_run() function. Thistime, we use  EXIT_TASK. This indicates to the scheduler that, before itschedules a new task, it should first call  scheduler_free_current_task(). Ifyou scroll back up to  scheduler_run(), you\u2019ll see this is exactly what scheduler_run() does.\n We have to do this in two parts because, when  scheduler_exit_current_task() iscalled, it is actively using the stack contained in the task struct. If you freethe stack while still using it, there\u2019s the chance that the function will stillaccess the very stack memory we just freed! To ensure this doesn\u2019t happen, wehave to  longjmp() back to the scheduler, which is using a separate stack. Thenwe can safely free the task\u2019s data.\n With that, we\u2019ve covered the entire implementation of this scheduler. If youwere to go ahead and compile this, along with my linked list implementation andthe main program above, you would have a working scheduler! Instead of all thatcopying and pasting, I\u2019d encourage you to check out the  githubrepository which contains all this code.\n  If you\u2019ve gotten this far, I assume I don\u2019t need to convince you that this isinteresting. However, it may not seem all that useful. After all, you can use\u201creal\u201d threads in C, which can run in parallel and don\u2019t need to wait for eachother to call  scheduler_relinquish().\n However, I see this as a jumping off point for a whole series of excitingimplementations of useful features. For I/O heavy tasks, this could also be used tosimply implement a single-threaded async application, the way that Python\u2019s newasync utilities work. This system could also implement generators andcoroutines. Finally, with enough effort, this system could even be coupled with\u201creal\u201d operating system threads to provide more parallelism where necessary.Each of these ideas is a fun project which I\u2019d encourage the reader to trybefore I get around to writing a new article about them!\n  I mean, probably not! It\u2019s probably not safe to use inline assembly to modifythe stack pointer. Don\u2019t use it in your production code, but do use it to messaround and explore!\n A safer implementation of this system could be built on the \u201cucontext\u201d API (see man getcontext), which provides a way to swap between these types of userspace\u201cthreads\u201d without needing to meddle with inline assembly. Unfortunately, the APIis non-standard (it was removed from the latest POSIX spec). However, you canstill use this API, as it is part of  glibc.\n  As it is currently written, this scheduler only works if threads explicitly handoff control back to the scheduler. This is bad for a general purposeimplementation like an operating system, because a poorly behaved thread couldprevent all the others from running. (Of course, that didn\u2019t stop MS-DOS fromusing cooperative multitasking!). I don\u2019t think that makes cooperativemultitasking bad, it\u2019s just going to depend on the application.\n If one used the non-standard \u201cucontext\u201d API, then POSIX signals would actuallystore the context of the previously executing code. By setting a periodic timersignal, a userspace scheduler could actually get preemptive multitaskingworking! This is another really cool project that I hope to try out and writeabout soon.\n If you\u2019ve gotten this far, thanks for reading, and I hope you get the chance totry out a fun project based on this!\n      Legal \u2022  RSS           Stephen Brennan&#39;s Blog is licensed under a  Creative Commons Attribution-ShareAlike 4.0 International License", "posttime": "2020-05-25 03:21:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,\u7ebf\u7a0b,simple,\u4efb\u52a1", "title": "\u7528C++\u5b9e\u73b0\u7b80\u5355\u7684\u534f\u4f5c\u7ebf\u7a0b", "title_en": "Implementing simple cooperative threads in C", "transed": 1, "url": "https://brennan.io/2020/05/24/userspace-cooperative-multitasking/", "via": "", "real_tags": ["c++", "\u7ebf\u7a0b", "simple", "\u4efb\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "87a011d8610a06105d1ce703aa9b6773.jpg", "infoid": 1003556, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b9c\u5bb6(Ikea)\u5728\u5176\u89c6\u89c9\u6807\u8bc6\u4e2d\u4f7f\u7528Verdana\u5341\u5e74\u540e\uff0c\u5c06\u5176\u54c1\u724c\u5b57\u4f53\u6362\u6210\u4e86Noto\uff0c\u8fd9\u662fMontype\u548c\u8c37\u6b4c(Google)\u7684\u534f\u4f5c\u578b\u5bb6\u65cf\u3002\u57282009\u5e74\u4e4b\u524d\uff0c\u8be5\u516c\u53f8\u4f7f\u7528\u5b9c\u5bb6Sans(\u6539\u7f16\u81eaFutura)\u5df2\u670950\u5e74\u4e4b\u4e45\uff0c\u4f46\u7531\u4e8e\u5176\u81ea\u6709\u54c1\u724c\u5b57\u4f53\u4e0d\u5305\u62ec\u4e9a\u6d32\u5b57\u7b26\uff0c\u56e0\u6b64\u642c\u5230\u4e86Verdana\u3002\n\u5b9c\u5bb6\u8fdb\u519bNoto\uff0c\u662f\u8ba9\u5b9c\u5bb6\u7684\u5b57\u4f53\u771f\u6b63\u878d\u5165\u5168\u7403\u5e02\u573a\u7684\u53c8\u4e00\u6b65\uff0c\u56e0\u4e3a\u5b9c\u5bb6\u6db5\u76d6\u4e86\u4e16\u754c\u4e0a\u6bcf\u4e00\u79cd\u4e66\u9762\u8bed\u8a00\u3002Noto\u6210\u7acb\u4e8e2016\u5e7410\u6708\uff0c\u662f\u8c37\u6b4c\u548cMonotype\u4e94\u5e74\u7814\u53d1\u7684\u7ed3\u679c\uff0c\u62db\u52df\u4e86\u6570\u767e\u540d\u5458\u5de5\uff0c\u7edf\u4e00\u4e86\u4ece\u897f\u91cc\u5c14\u8bed\u5230\u5207\u8bfa\u57fa\u8bed\u7684800\u79cd\u8bed\u8a00\u548c100\u79cd\u4e66\u9762\u6587\u5b57\u3002\u901a\u8fc7\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u521b\u5efaUnicode\u6807\u51c6\u4e2d\u6240\u6709\u811a\u672c\u7684\u6570\u5b57\u8868\u793a\uff0c\u8be5\u5b57\u4f53\u662f\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u4e2a\u670d\u52a1\u4e8e\u7279\u5b9a\u8bed\u8a00\u793e\u533a\u7684\u5b57\u4f53\u3002\nNoto\u662fNo Tofu\u7684\u7f29\u5199\uff0c\u8c46\u8150\u662f\u4e00\u4e2a\u672f\u8bed\uff0c\u7ecf\u5e38\u7528\u6765\u63cf\u8ff0\u8ba1\u7b97\u673a\u4e0d\u652f\u6301\u67d0\u79cd\u5b57\u4f53\u65f6\u663e\u793a\u7684\u5c0f\u65b9\u5757\u3002\n\u5b9c\u5bb6\u57282020\u5e74\u7684\u4ea7\u54c1\u76ee\u5f55\u4e2d\u516c\u5e03\u4e86\u8fd9\u79cd\u65b0\u5b57\u4f53\u3002\u5728\u63a8\u7279\u4e0a\uff0cMontype\u7684\u4e8e\u5c14\u6839\u00b7\u897f\u4f2f\u7279(J\u00fcrgen Siebert)\u5206\u4eab\u4e86\u65b0\u65e7\u5b57\u4f53\u6295\u5165\u4f7f\u7528\u524d\u540e\u7684\u7167\u7247\uff0c\u4ed6\u8bc4\u8bba\u9053\uff1a\u201c\u9677\u5165\u7cfb\u7edf\u601d\u7ef4\uff1a\u5341\u5e74\u540e\uff0c\u5b9c\u5bb6(Ikea)\u544a\u522b\u4e86Verdana\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662fNoto\u3002\u201d", "note_en": "Ikea has swapped its brand typeface to  Noto, a collaborative type family from Monotype and Google, after a decade of using Verdana across its visual identity. Before 2009, the company used Ikea Sans \u2013\u00a0an adaptation of Futura \u2013\u00a0for 50 years, but moved to Verdana because its own-brand font didn\u2019t include Asian characters.\n Its move to Noto is a step further in making Ikea\u2019s typeface truly inclusive of its global markets, as the family encompasses every written language in the world.  Noto launched in October 2016 as the result of five years research and development between Google and Monotype, enlisting hundreds of staff and unifying 800 languages and 100 written scripts from Cyrillic to Cherokee. By creating a digital representation of all the scripts in the Unicode standard in many cases, the font was the first ever to serve a particular language community.\n The name Noto is short for No Tofu, where tofu is a term often used to describe the little squares that show when a font is not supported by a computer.\n Ikea has revealed the new typeface in its 2020 catalogue. On Twitter, Monotype\u2019s  J\u00fcrgen Siebert shared before-and-after shots of the old and new typefaces in action, commenting: \u201cTrapped in system thinking: After ten years, Ikea says goodbye to Verdana and replaces it with Noto.\u201d", "posttime": "2020-05-25 03:20:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u5b9c\u5bb6,\u8c37\u6b4c,2020,\u5355\u4f53", "title": "\u5b9c\u5bb62020\u5e74\u4ea7\u54c1\u76ee\u5f55\u4eceVerdana\u5207\u6362\u5230Noto(\u8c37\u6b4c\uff0c\u5355\u4f53\u5b57)", "title_en": "IKEA switches from Verdana to Noto (Google, Monotype) for 2020 catalogue", "transed": 1, "url": "https://www.itsnicethat.com/news/ikea-changes-typeface-to-noto-monotype-google-graphic-design-210819", "via": "", "real_tags": ["google", "\u5b9c\u5bb6", "\u8c37\u6b4c", "2020", "\u5355\u4f53"]}, {"category": "", "categoryclass": "", "imagename": "bcf690b02f01cd0060ef1f6b7e3f7cc7.png", "infoid": 1003555, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Google Noto\u662f\u4e00\u79cd\u5386\u65f6\u4e94\u5e74\u7684\u5b57\u4f53\uff0c\u8de8\u8d8a\u4e86100\u591a\u79cd\u4e66\u5199\u7cfb\u7edf\u3001800\u79cd\u8bed\u8a00\u548c\u6570\u5341\u4e07\u4e2a\u5b57\u7b26\u3002Noto\u5b57\u4f53\u662f\u8c37\u6b4c\u548cMontype\u7684\u5408\u4f5c\u6210\u679c\uff0c\u5bf9\u4e8e\u5168\u4e16\u754c\u6570\u5341\u4ebf\u8bbf\u95ee\u6570\u5b57\u5185\u5bb9\u7684\u4eba\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u79cd\u771f\u6b63\u901a\u7528\u7684\u4ea4\u6d41\u65b9\u5f0f\u3002", "note_en": "A typeface five years in the making, Google Noto spans more than 100 writing systems, 800 languages, and hundreds of thousands of characters. A collaborative effort between Google and Monotype, the Noto typeface is a truly universal method of communication for billions of people around the world accessing digital content.", "posttime": "2020-05-25 03:20:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u5b57\u4f53,single", "title": "\u5728\u4e00\u79cd\u5b57\u4f53\u4e2d\u4f7f\u7528800\u591a\u79cd\u8bed\u8a00\uff1a\u4e3aGoogle\u521b\u5efaNoto", "title_en": "More than 800 languages in a single typeface: creating Noto for Google", "transed": 1, "url": "https://www.monotype.com/resources/case-studies/more-than-800-languages-in-a-single-typeface-creating-noto-for-google", "via": "", "real_tags": ["google", "\u5b57\u4f53", "single"]}]