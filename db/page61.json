[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1006294, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u5806\u6808\u6ea2\u51fa\u79ef\u7d2f\u4e86\u5927\u91cf\u7684\u8f6f\u4ef6\u5de5\u7a0b\u77e5\u8bc6\u3002\u7136\u800c\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u7b54\u6848\u4e2d\u7684\u67d0\u4e9b\u77e5\u8bc6\u53ef\u80fd\u4f1a\u8fc7\u65f6\u3002\u5982\u679c\u6ca1\u6709\u6e05\u695a\u5730\u6807\u8bc6\u6216\u8bb0\u5f55\u8fd9\u4e9b\u8fc7\u65f6\u7684\u7b54\u6848\uff0c\u5219\u53ef\u80fd\u4f1a\u8bef\u5bfc\u7b54\u6848\u5bfb\u6c42\u8005\u5e76\u5bfc\u81f4\u610f\u5916\u95ee\u9898(\u4f8b\u5982\uff0c\u4f7f\u7528\u8fc7\u65f6\u7684\u5b89\u5168\u534f\u8bae)\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u8c03\u67e5\u4e86\u7b54\u6848\u4e2d\u7684\u77e5\u8bc6\u662f\u5982\u4f55\u53d8\u5f97\u8fc7\u65f6\u7684\uff0c\u5e76\u8bc6\u522b\u4e86\u8fd9\u79cd\u8fc7\u65f6\u7b54\u6848\u7684\u7279\u5f81\u3002\u6211\u4eec\u53d1\u73b0\uff1a1)\u8d85\u8fc7\u4e00\u534a\u7684\u8fc7\u65f6\u7b54\u6848(58.4%)\u53ef\u80fd\u5728\u7b2c\u4e00\u6b21\u53d1\u5e03\u65f6\u5c31\u5df2\u7ecf\u8fc7\u65f6\u4e86\u30022)\u5f53\u89c2\u5bdf\u5230\u8fc7\u65f6\u7684\u7b54\u6848\u65f6\uff0c\u53ea\u6709\u4e00\u5c0f\u90e8\u5206(20.5%)\u7684\u7b54\u6848\u88ab\u66f4\u65b0\u30023)\u67d0\u4e9b\u6807\u7b7e(\u5982node.js\u3001ajax\u3001android\u3001Objective-c)\u4e2d\u7684\u95ee\u9898\u7b54\u6848\u66f4\u5bb9\u6613\u8fc7\u65f6\u3002\u6211\u4eec\u7684\u53d1\u73b0\u8868\u660e\uff0c\u5806\u6808\u6ea2\u51fa\u5e94\u8be5\u5efa\u7acb\u673a\u5236\u6765\u9f13\u52b1\u6574\u4e2a\u793e\u533a\u4fdd\u7559\u7b54\u6848(\u4ee5\u907f\u514d\u8fc7\u65f6\u7684\u7b54\u6848)\uff0c\u5e76\u9f13\u52b1\u5bfb\u6c42\u7b54\u6848\u7684\u4eba\u4ed4\u7ec6\u9605\u8bfb\u7b54\u6848\u5e16\u5b50\u4e2d\u7684\u6240\u6709\u4fe1\u606f(\u4f8b\u5982\uff0c\u8bc4\u8bba)\u3002", "note_en": "Download PDF  Abstract: Stack Overflow accumulates an enormous amount of software engineeringknowledge. However, as time passes, certain knowledge in answers may becomeobsolete. Such obsolete answers, if not identified or documented clearly, maymislead answer seekers and cause unexpected problems (e.g., using an out-datedsecurity protocol). In this paper, we investigate how the knowledge in answersbecomes obsolete and identify the characteristics of such obsolete answers. Wefind that: 1) More than half of the obsolete answers (58.4%) were probablyalready obsolete when they were first posted. 2) When an obsolete answer isobserved, only a small proportion (20.5%) of such answers are ever updated. 3)Answers to questions in certain tags (e.g., node.js, ajax, android, andobjective-c) are more likely to become obsolete. Our findings suggest thatStack Overflow should develop mechanisms to encourage the whole community tomaintain answers (to avoid obsolete answers) and answer seekers are encouragedto carefully go through all information (e.g., comments) in answer threads.", "posttime": "2020-06-12 23:43:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6ea2\u51fa,study,\u7b54\u6848", "title": "\u5173\u4e8e\u5806\u6808\u6ea2\u51fa\u7684\u8fc7\u65f6\u7b54\u6848\u7684\u5b9e\u8bc1\u7814\u7a76[pdf]", "title_en": "An empirical study of obsolete answers on Stack Overflow [pdf]", "transed": 1, "url": "https://arxiv.org/abs/1903.12282", "via": "", "real_tags": ["\u6ea2\u51fa", "study", "\u7b54\u6848"]}, {"category": "", "categoryclass": "", "imagename": "e634e95f1e912d5f08613c60290f6d19.jpg", "infoid": 1006293, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4f4d\u7814\u7a76\u4eba\u5458\u8bf4\uff0c\u6570\u767e\u4e07\u8def\u7531\u5668\u3001\u6253\u5370\u673a\u548c\u5176\u4ed6\u8bbe\u5907\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u901a\u7528\u5373\u63d2\u5373\u7528\u7f51\u7edc\u534f\u8bae\u4e2d\u7684\u5b89\u5168\u6f0f\u6d1e\u7684\u65b0\u653b\u51fb\u8fdc\u7a0b\u5f81\u7528\u3002\n\u6b64\u6f0f\u6d1e\u653b\u51fb\u540d\u4e3aCallStranger\uff0c\u5728\u5f3a\u5236\u5927\u91cf\u8bbe\u5907\u53c2\u4e0e\u5206\u5e03\u5f0f\u62d2\u7edd\u670d\u52a1(\u6216DDoS)\u653b\u51fb\u65f6\u6700\u6709\u7528\uff0c\u8fd9\u4e9b\u653b\u51fb\u4f1a\u7528\u5783\u573e\u901a\u4fe1\u91cf\u4f7f\u7b2c\u4e09\u65b9\u76ee\u6807\u4e0d\u582a\u91cd\u8d1f\u3002CallStranger\u8fd8\u53ef\u4ee5\u7528\u6765\u6e17\u900f\u7f51\u7edc\u5185\u90e8\u7684\u6570\u636e\uff0c\u5373\u4f7f\u5b83\u4eec\u53d7\u5230\u65e8\u5728\u9632\u6b62\u6b64\u7c7b\u653b\u51fb\u7684\u6570\u636e\u4e22\u5931\u9884\u9632\u5de5\u5177\u7684\u4fdd\u62a4\u3002\u8be5\u6f0f\u6d1e\u8fd8\u5141\u8bb8\u653b\u51fb\u8005\u626b\u63cf\u5185\u90e8\u7aef\u53e3\uff0c\u5426\u5219\u8fd9\u4e9b\u7aef\u53e3\u5c06\u4e0d\u53ef\u89c1\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f1a\u66b4\u9732\u5728\u4e92\u8054\u7f51\u4e2d\u3002\n\u6570\u4ee5\u4ebf\u8ba1\u7684\u8def\u7531\u5668\u548c\u5176\u4ed6\u6240\u8c13\u7684\u7269\u8054\u7f51\u8bbe\u5907\u5bb9\u6613\u53d7\u5230CallStranger\u7684\u653b\u51fb\uff0c\u53d1\u73b0\u4e86\u8be5\u6f0f\u6d1e\u5e76\u7f16\u5199\u4e86\u5229\u7528\u8be5\u6f0f\u6d1e\u7684\u6982\u5ff5\u9a8c\u8bc1\u653b\u51fb\u4ee3\u7801\u7684\u571f\u8033\u5176\u7814\u7a76\u4eba\u5458\u5c24\u52aa\u65af\u00b7\u5723\u52a0\u5fb7\u00b7\u827e\u54c8\u8fc8\u5fb7\u00b7RC\u00b7\u827e\u54c8\u8fc8\u5fb7(\u5c24\u52aa\u65af\u00b7\u5723\u52a0\u5fb7\u0131RC\u0131)\u5728\u5468\u672b\u5199\u9053\u3002\u7136\u800c\uff0c\u8981\u4f7f\u5229\u7528\u6f0f\u6d1e\u771f\u6b63\u8d77\u4f5c\u7528\uff0c\u6613\u53d7\u653b\u51fb\u7684\u8bbe\u5907\u5fc5\u987b\u5c06UPnP(\u5373\u4f17\u6240\u5468\u77e5\u7684\u534f\u8bae)\u66b4\u9732\u5728\u4e92\u8054\u7f51\u4e0a\u3002\u8fd9\u4e00\u9650\u5236\u610f\u5473\u7740\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u6613\u53d7\u653b\u51fb\u7684\u8bbe\u5907\u5b9e\u9645\u4e0a\u662f\u53ef\u5229\u7528\u7684\u3002\n\u5df2\u670912\u5e74\u5386\u53f2\u7684UPnP\u534f\u8bae\u5141\u8bb8\u8bbe\u5907\u901a\u8fc7\u7f51\u7edc\u81ea\u52a8\u627e\u5230\u5f7c\u6b64\uff0c\u4ece\u800c\u7b80\u5316\u4e86\u8fde\u63a5\u8bbe\u5907\u7684\u4efb\u52a1\u3002\u5b83\u901a\u8fc7\u4f7f\u7528HTTP\u3001SOAP\u548cXML\u534f\u8bae\u6765\u901a\u544a\u81ea\u8eab\u5e76\u901a\u8fc7\u4f7f\u7528Internet\u534f\u8bae\u7684\u7f51\u7edc\u53d1\u73b0\u5176\u4ed6\u8bbe\u5907\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u867d\u7136\u81ea\u52a8\u5316\u53ef\u4ee5\u6d88\u9664\u624b\u52a8\u6253\u5f00\u4e0d\u540c\u8bbe\u5907\u7528\u4e8e\u901a\u4fe1\u7684\u7279\u5b9a\u7f51\u7edc\u7aef\u53e3\u7684\u9ebb\u70e6\uff0c\u4f46\u591a\u5e74\u6765\uff0cUPnP\u4f7f\u7528\u6237\u9762\u4e34\u5404\u79cd\u653b\u51fb\u30022013\u5e74\uff0c\u4e00\u9879\u5168\u4e92\u8054\u7f51\u626b\u63cf\u53d1\u73b0\uff0cUPnP\u4f7f\u672c\u5730\u7f51\u7edc\u4ee5\u5916\u7684\u4eba\u53ef\u4ee5\u770b\u52308100\u591a\u4e07\u53f0\u8bbe\u5907\u3002\u8fd9\u4e00\u53d1\u73b0\u4ee4\u4eba\u60ca\u8bb6\uff0c\u56e0\u4e3a\u8be5\u534f\u8bae\u4e0d\u5e94\u8be5\u4e0e\u5916\u90e8\u8bbe\u5907\u901a\u4fe1\u3002\u66b4\u9732\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u51e0\u4e2a\u516c\u5171\u4ee3\u7801\u5e93\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5e93\u76d1\u63a7\u6240\u6709\u63a5\u53e3\u7684\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\u6570\u636e\u5305\uff0c\u5373\u4f7f\u914d\u7f6e\u4e3a\u53ea\u4fa6\u542c\u5185\u90e8\u63a5\u53e3\u4e5f\u662f\u5982\u6b64\u3002\n2018\u5e7411\u6708\uff0c\u7814\u7a76\u4eba\u5458\u68c0\u6d4b\u5230\u4e24\u8d77\u9488\u5bf9\u4f7f\u7528UPnP\u7684\u8bbe\u5907\u7684\u91ce\u5916\u653b\u51fb\u3002\u5176\u4e2d\u4e00\u4e2a\u4eba\u5728Broadcom\u82af\u7247\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u6709\u7f3a\u9677\u7684UPnP\u5b9e\u73b0\uff0c\u5c0610\u4e07\u53f0\u8def\u7531\u5668\u6574\u5408\u5230\u50f5\u5c38\u7f51\u7edc\u4e2d\u3002\u53e6\u4e00\u4e2a\u7528\u4e8e\u5bf9\u62974.5\u4e07\u53f0\u8def\u7531\u5668\uff0c\u5229\u7528\u4e0d\u540cUPnP\u5b9e\u73b0\u4e2d\u7684\u7f3a\u9677\u6253\u5f00\u7aef\u53e3\uff0c\u8fd9\u4e9b\u7aef\u53e3\u6709\u52a9\u4e8e\u4f20\u64adEternalRed\u548cEternalBlue\uff0c\u8fd9\u662f\u7531NSA\u5f00\u53d1\u5e76\u540e\u6765\u4eceNSA\u7a83\u53d6\u7684\u5f3a\u5927Windows\u653b\u51fb\u3002\nCallStranger\u5141\u8bb8\u8fdc\u7a0b\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u4e0e\u5e94\u8be5\u53ea\u80fd\u5728\u672c\u5730\u7f51\u7edc\u5185\u8bbf\u95ee\u7684\u8bbe\u5907\u8fdb\u884c\u4ea4\u4e92\u3002\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u7684\u4e00\u4e2a\u7528\u9014\u662f\u5c06\u5927\u91cf\u5783\u573e\u901a\u4fe1\u91cf\u5b9a\u5411\u5230\u653b\u51fb\u8005\u9009\u62e9\u7684\u76ee\u7684\u5730\u3002\u56e0\u4e3a\u53d1\u9001\u5230\u653b\u51fb\u8005\u6307\u5b9a\u7684\u76ee\u7684\u5730\u7684\u8f93\u51fa\u6bd4\u653b\u51fb\u8005\u53d1\u8d77\u7684\u8bf7\u6c42\u5927\u5f97\u591a\uff0c\u6240\u4ee5CallStranger\u63d0\u4f9b\u4e86\u4e00\u79cd\u7279\u522b\u5f3a\u5927\u7684\u65b9\u6cd5\u6765\u653e\u5927\u653b\u51fb\u8005\u7684\u8d44\u6e90\u3002\u5176\u4ed6\u529f\u80fd\u5305\u62ec\u679a\u4e3e\u672c\u5730\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u5176\u4ed6UPnP\u8bbe\u5907\u548c\u6e17\u6f0f\u5b58\u50a8\u5728\u7f51\u7edc\u4e0a\u7684\u6570\u636e\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u5b83\u53d7\u5230\u6570\u636e\u4e22\u5931\u9884\u9632\u5de5\u5177\u7684\u4fdd\u62a4\u3002\n\u8be5\u6f0f\u6d1e\u88ab\u8ddf\u8e2a\u4e3acve-2020-12695\uff0c\u8fd9\u91cc\u548c\u8fd9\u91cc\u90fd\u6709\u76f8\u5173\u5efa\u8bae\u3002\u0131RC\u0131\u5728\u6b64\u53d1\u5e03\u4e86\u4e00\u4e2aPoC\u811a\u672c\uff0c\u8be5\u811a\u672c\u6f14\u793a\u4e86CallStranger\u7684\u529f\u80fd\u3002\n\u8fd9\u4e00\u653b\u51fb\u662f\u901a\u8fc7\u6ee5\u7528UPnP\u8ba2\u9605\u529f\u80fd\u6765\u5b9e\u73b0\u7684\uff0c\u8bbe\u5907\u4f7f\u7528\u8be5\u529f\u80fd\u5728\u7279\u5b9a\u4e8b\u4ef6(\u5982\u64ad\u653e\u89c6\u9891\u6216\u97f3\u4e50)\u53d1\u751f\u65f6\u63a5\u6536\u6765\u81ea\u5176\u4ed6\u8bbe\u5907\u7684\u901a\u77e5\u3002\u5177\u4f53\u5730\u8bf4\uff0cCallStranger\u53d1\u9001\u7684\u8ba2\u9605\u8bf7\u6c42\u4f2a\u9020\u4e86\u63a5\u6536\u7ed3\u679c\u201c\u56de\u8c03\u201d\u7684URL\u3002\n\u4e3a\u4e86\u6267\u884cDDoS\uff0cCallStranger\u4f1a\u53d1\u9001\u4e00\u7cfb\u5217\u4f2a\u9020Internet\u4e0a\u7b2c\u4e09\u65b9\u7ad9\u70b9\u5730\u5740\u7684\u8ba2\u9605\u8bf7\u6c42\u3002\u5f53\u653b\u51fb\u4e0e\u5176\u4ed6\u8bbe\u5907\u4e00\u81f4\u6267\u884c\u65f6\uff0c\u5197\u957f\u7684\u56de\u8c03\u4f1a\u7528\u5927\u91cf\u5783\u573e\u6d41\u91cf\u8f70\u70b8\u7f51\u7ad9\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u63a5\u6536\u56de\u8c03\u7684URL\u6307\u5411\u5185\u90e8\u7f51\u7edc\u5185\u7684\u8bbe\u5907\u3002\u54cd\u5e94\u53ef\u80fd\u4f1a\u9020\u6210\u7c7b\u4f3c\u4e8e\u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\u7684\u60c5\u51b5\uff0c\u8fd9\u4f7f\u5f97\u653b\u51fb\u8005\u80fd\u591f\u653b\u51fb\u7f51\u7edc\u9632\u706b\u5899\u540e\u9762\u7684\u5185\u90e8\u8bbe\u5907\u3002\nSCAAD\u0131RC\u0131\u5411\u7ef4\u62a4UPnP\u534f\u8bae\u7684\u5f00\u653e\u8fde\u63a5\u57fa\u91d1\u4f1a\u62a5\u544a\u4e86\u4ed6\u7684\u53d1\u73b0\uff0c\u8be5\u57fa\u91d1\u4f1a\u5df2\u7ecf\u66f4\u65b0\u4e86\u5e95\u5c42\u89c4\u8303\u4ee5\u4fee\u590d\u8be5\u7f3a\u9677\u3002\u7528\u6237\u53ef\u4ee5\u4e0e\u5f00\u53d1\u4eba\u5458\u548c\u5236\u9020\u5546\u8054\u7cfb\uff0c\u4ee5\u786e\u5b9a\u662f\u5426\u6216\u4f55\u65f6\u4f1a\u6709\u8865\u4e01\u53ef\u7528\u3002\u76f8\u5f53\u5927\u6bd4\u4f8b\u7684\u7269\u8054\u7f51\u8bbe\u5907\u4ece\u672a\u6536\u5230\u5236\u9020\u5546\u7684\u66f4\u65b0\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u6f0f\u6d1e\u5c06\u5728\u672a\u6765\u4e00\u6bb5\u65f6\u95f4\u5185\u5b58\u5728\u3002\n\u4e00\u5982\u65e2\u5f80\uff0c\u6700\u597d\u7684\u9632\u5fa1\u63aa\u65bd\u662f\u5b8c\u5168\u7981\u7528UPnP\u3002\u5927\u591a\u6570\u8def\u7531\u5668\u901a\u8fc7\u53d6\u6d88\u9009\u4e2d\u8bbe\u7f6e\u83dc\u5355\u4e2d\u7684\u590d\u9009\u6846\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u5bf9\u4e8e\u90a3\u4e9b\u575a\u6301\u6253\u5f00UPnP\u7684\u4eba\uff0c\u53ef\u4ee5\u4f7f\u7528\u50cf\u8fd9\u6837\u7684\u7ad9\u70b9\u6765\u786e\u4fdd\u8def\u7531\u5668\u4e0d\u4f1a\u66b4\u9732\u654f\u611f\u7aef\u53e3\u3002\u6709\u7ecf\u9a8c\u548c\u80fd\u529b\u7684UPnP\u7528\u6237\u4e5f\u53ef\u4ee5\u5b9a\u671f\u68c0\u67e5\u65e5\u5fd7\u6765\u68c0\u6d4b\u6f0f\u6d1e\u3002", "note_en": "Millions of routers, printers, and other devices can be remotely commandeered by a new attack that exploits a security flaw in the Universal Plug and Play network protocol, a researcher said.\n CallStranger, as the exploit has been named, is most useful for forcing large numbers of devices to participate in distributed denial of service\u2014or DDoS\u2014attacks that overwhelm third-party targets with junk traffic. CallStranger can also be used to exfiltrate data inside networks even when they\u2019re protected by data loss prevention tools that are designed to prevent such attacks. The exploit also allows attackers to scan internal ports that would otherwise be invisible because they\u2019re not exposed to the Internet.\n Billions of routers and other so-called Internet-of-things devices are susceptible to CallStranger, Yunus \u00c7ad\u0131rc\u0131, a Turkish researcher who discovered the vulnerability and wrote the proof-of-concept attack code that exploits it,  wrote over the weekend. For the exploit to actually work, however, a vulnerable device must have UPnP, as the protocol is known, exposed on the Internet. That constraint means only a fraction of vulnerable devices are actually exploitable.\n  The  12-year-old UPnP protocol simplifies the task of connecting devices by allowing them to automatically find each other over a network. It does this by using the HTTP, SOAP, and XML protocols to advertise themselves and discover other devices over networks that use the Internet Protocol.\n While the automation can remove the hassle of manually opening specific network ports that different devices use to communicate, UPnP over the years has opened users to a variety of attacks. In 2013, an Internet-wide scan found that UPnP was  making more than 81 million devices visible to people outside the local networks. The finding was a surprise because the protocol isn&#39;t supposed to communicate with outside devices. The exposure was largely the result of several common code libraries that monitored all interfaces for  User Datagram Protocol packets even if configured to listen only on internal ones.\n In November 2018, researchers detected two in-the-wild attacks that targeted devices using UPnP. One used a buggy UPnP implementation in Broadcom chips to  wrangle 100,000 routers into a botnet. The other,  used against 45,000 routers, exploited flaws in a different UPnP implementation to open ports that were instrumental in spreading EternalRed and EternalBlue, the potent Windows attack that was  developed by and later stolen from the NSA.\n  CallStranger allows a remote and unauthenticated user to interact with devices that are supposed to be accessible only inside local networks. One use for the exploit is directing large amounts of junk traffic to destinations of the attacker\u2019s choice. Because the output sent to attacker-designated destinations is much bigger than the request the attacker initiates, CallStranger provides a particularly powerful way to amplify the attacker\u2019s resources. Other capabilities include enumerating all other UPnP devices on the local network and exfiltrating data stored on the network, in some cases even if it\u2019s protected by data loss prevention tools.\n The vulnerability is tracked as CVE-2020-12695, and advisories are  here and  here. \u00c7ad\u0131rc\u0131 posted a PoC script that demonstrates the capabilities of CallStranger  here.\n The exploit works by abusing the UPnP SUBSCRIBE capability, which devices use to receive notifications from other devices when certain events\u2014such as the playing of a video or music track\u2014happen. Specifically, CallStranger sends subscription requests that forge the URL that\u2019s to receive the resulting \u201ccallback.\u201d\n To perform DDoSes, CallStranger sends a flurry of subscription requests that spoof the address of a third-party site on the Internet. When the attack is performed in unison with other devices, the lengthy callbacks bombard the site with a torrent of junk traffic. In other cases the URL receiving the callback points to a device inside the internal network. The responses can create a condition similar to a  server-side request forgery, which allows attackers to hack internal devices that are behind network firewalls.\n   \u00c7ad\u0131rc\u0131 reported his findings to the Open Connectivity Foundation, which maintains the UPnP protocol, and the foundation has  updated the underlying specification to fix the flaw. Users can check with developers and manufacturers to find out if or when a patch will be available. A significant percentage of IoT devices never receive updates from manufacturers, which means the vulnerability will live on for some time to come.\n As always, the best defense is to disable UPnP altogether. Most routers allow this by unchecking a box in the settings menu. For those who insist on keeping UPnP turned on, use a site such as  this one to make sure the router isn&#39;t exposing sensitive ports. UPnP users with the experience and capability can also periodically check logs to detect exploits.", "posttime": "2020-06-12 23:43:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6f0f\u6d1e,flaw,\u8bbe\u5907", "title": "UPnP\u6f0f\u6d1e\u4f7f\u6570\u767e\u4e07\u7f51\u7edc\u8bbe\u5907\u9762\u4e34\u4e92\u8054\u7f51\u653b\u51fb", "title_en": "UPnP flaw exposes millions of network devices to attacks over the Internet", "transed": 1, "url": "https://arstechnica.com/information-technology/2020/06/upnp-flaw-exposes-millions-of-network-devices-to-attacks-over-the-internet/", "via": "", "real_tags": ["\u6f0f\u6d1e", "flaw", "\u8bbe\u5907"]}, {"category": "", "categoryclass": "", "imagename": "55b90951fc524717e669151ca7c34584.png", "infoid": 1006292, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u56db\u5e74\u4e2d\uff0c\u4e00\u5bb6\u610f\u5927\u5229\u516c\u53f8\u7ecf\u8425\u7740\u4e00\u5bb6\u770b\u4f3c\u5408\u6cd5\u7684\u7f51\u7ad9\u548c\u4e1a\u52a1\uff0c\u63d0\u51fa\u4e3aWindows\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u9488\u5bf9\u53cd\u5411\u5de5\u7a0b\u7684\u4e8c\u8fdb\u5236\u4fdd\u62a4\uff0c\u4f46\u5374\u79d8\u5bc6\u505a\u5e7f\u544a\uff0c\u5e76\u5411\u6076\u610f\u8f6f\u4ef6\u56e2\u4f19\u63d0\u4f9b\u670d\u52a1\u3002\n\u5728Check Point\u7684\u5b89\u5168\u7814\u7a76\u4eba\u5458\u5f00\u59cb\u5173\u6ce8GuLoader[1\uff0c2\uff0c3]\u540e\uff0c\u8be5\u516c\u53f8\u7684\u79d8\u5bc6\u4e1a\u52a1\u88ab\u66dd\u5149\u3002GuLoader[1\uff0c2\uff0c3]\u662f\u4e00\u79cd\u65b0\u7684\u6076\u610f\u8f6f\u4ef6\u83cc\u682a\uff0c\u540e\u6765\u6210\u4e3a2020\u5e74\u6700\u6d3b\u8dc3\u7684\u6076\u610f\u8f6f\u4ef6\u64cd\u4f5c\u4e4b\u4e00\u3002\nCheck Point\u8868\u793a\uff0c\u5b83\u5728GuLoader\u4ee3\u7801\u4e2d\u53d1\u73b0\u4e86\u63d0\u53caCloudEyE Protector\u7684\u5f15\u7528\uff0cCloudEyE Protector\u662f\u4e00\u5bb6\u540d\u4e3aCloudEyE\u7684\u610f\u5927\u5229\u516c\u53f8\u63d0\u4f9b\u7684\u53cd\u9006\u5411\u5de5\u7a0b\u8f6f\u4ef6\u670d\u52a1\u3002\n\u4f46\u662f\uff0c\u5c3d\u7ba1\u6e90\u4ee3\u7801\u4fdd\u62a4\u670d\u52a1\u662f\u5408\u6cd5\u7684\uff0c\u5e76\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u5546\u4e1a/\u5408\u6cd5\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f7f\u7528\u4e86\u6e90\u4ee3\u7801\u4fdd\u62a4\u670d\u52a1\uff0c\u4f46Check Point\u8868\u793a\uff0c\u5b83\u5c06\u8be5\u516c\u53f8\u53ca\u5176\u6240\u6709\u8005\u4e0e\u591a\u5e74\u524d\u9ed1\u5ba2\u8bba\u575b\u4e0a\u7684\u6d3b\u52a8\u8054\u7cfb\u8d77\u6765\u3002\n\u8fd9\u5bb6\u7f51\u7edc\u5b89\u5168\u516c\u53f8\u5c06securitycode.eu\u7f51\u7ad9\u4e0a\u5e7f\u544a\u7684CloudEyE\u4e8c\u8fdb\u5236\u4fdd\u62a4\u670d\u52a1\u4e0e\u63a8\u5e7f\u540d\u4e3aDarkEyE\u7684\u6076\u610f\u8f6f\u4ef6\u52a0\u5bc6\u670d\u52a1\u7684\u5e7f\u544a\u8054\u7cfb\u8d77\u6765\uff0c\u8be5\u670d\u52a1\u65e9\u57282014\u5e74\u5c31\u5728\u9ed1\u5ba2\u8bba\u575b\u4e0a\u5927\u91cf\u6295\u653e\u5e7f\u544a\u3002\n\u6b64\u5916\uff0cCheck Point\u8fd8\u5c06\u4e09\u4e2a\u7528\u4e8e\u5ba3\u4f20DarkEyE\u7684\u7528\u6237\u540d\u548c\u7535\u5b50\u90ae\u4ef6\u4e0eCloudEyE\u521b\u59cb\u4eba\u4e4b\u4e00\u7684\u771f\u5b9e\u8eab\u4efd\u8054\u7cfb\u8d77\u6765\uff0c\u663e\u793a\u5728CloudEyE\u7f51\u7ad9\u4e0a\u3002\n\u6b64\u5916\uff0cCheck Point\u8868\u793a\uff0c\u5b83\u8fd8\u8ffd\u8e2a\u4e86\u8fd9\u4e09\u4e2a\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u548c\u7528\u6237\u540d\uff0c\u627e\u5230\u4e86\u9ed1\u5ba2\u8bba\u575b\u4e0a\u7684\u591a\u4e2a\u5e16\u5b50\u3002\n\u8fd9\u4e9b\u5e16\u5b50\u751a\u81f3\u5728DarkEyE(CloudEyE\u7684\u524d\u8eab)\u4e4b\u524d\u5c31\u6253\u51fa\u4e86\u6076\u610f\u8f6f\u4ef6/\u4e8c\u8fdb\u5236\u52a0\u5bc6\u670d\u52a1\u7684\u5e7f\u544a\uff0c\u6700\u65e9\u53ef\u4ee5\u8ffd\u6eaf\u52302011\u5e74\uff0c\u663e\u793a\u51fa\u8be5\u7528\u6237\u5728\u7f51\u7edc\u72af\u7f6a\u548c\u6076\u610f\u8f6f\u4ef6\u793e\u533a\u4e2d\u662f\u591a\u4e48\u6839\u6df1\u8482\u56fa\u548c\u4eba\u8109\u6df1\u539a\u3002\n\u8fd9\u4e9b\u5173\u7cfb\u663e\u7136\u5e2e\u52a9\u8be5\u7ec4\u7ec7\u542f\u52a8\u4e86\u4ed6\u4eec\u7684\u5408\u6cd5\u4e1a\u52a1\u3002Check Point\u8868\u793a\uff0cCloudEyE\u56e2\u961f\u5439\u5618\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u67095000\u591a\u540d\u5ba2\u6237\u3002\nCheck Point\u8868\u793a\uff0c\u6839\u636e\u4ed6\u4eec\u6bcf\u6708100\u7f8e\u5143\u7684\u6700\u4f4e\u8d39\u7387\uff0c\u8be5\u7ec4\u7ec7\u81f3\u5c11\u4ece\u4ed6\u4eec\u7684\u670d\u52a1\u4e2d\u8d5a\u53d6\u4e8650\u4e07\u7f8e\u5143\u3002\u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u5230\u4e00\u4e9b\u6708\u5ea6\u5957\u9910\u53ef\u80fd\u9ad8\u8fbe750\u7f8e\u5143/\u6708\uff0c\u800c\u4e14\u4e00\u4e9b\u5ba2\u6237\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528\u8fd9\u9879\u670d\u52a1\u6570\u6708\uff0c\u91d1\u989d\u53ef\u80fd\u4f1a\u9ad8\u5f97\u591a\u3002\n\u6240\u6709\u7ebf\u7d22\u90fd\u8868\u660e\uff0c\u8fd9\u4e24\u5bb6CloudEyE\u8fd0\u8425\u5546\u8bd5\u56fe\u5c06\u5176\u72af\u7f6a\u64cd\u4f5c\u5408\u6cd5\u5316\uff0c\u5c06\u5176\u9690\u85cf\u5728\u4e00\u5bb6\u5e4c\u5b50\u516c\u53f8\u540e\u9762\uff0c\u4ee5\u6b64\u6765\u8bc1\u660e\u81ea\u5df1\u7684\u5229\u6da6\u662f\u5408\u7406\u7684\uff0c\u5e76\u907f\u514d\u5728\u5957\u73b0\u5de8\u989d\u5229\u6da6\u65f6\u5f15\u8d77\u5f53\u5730\u7a0e\u52a1\u673a\u5173\u7684\u6000\u7591\u3002\nCheck Point\u8868\u793a\uff0cCloudEyE\u7684\u64cd\u4f5c\u53ef\u80fd\u770b\u8d77\u6765\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u5728\u8fc7\u53bb\u4e00\u5e74\u91cc\uff0cCloudEyE\u63d0\u4f9b\u7684\u670d\u52a1\u4e00\u76f4\u662f\u6570\u5343\u8d77\u653b\u51fb\u7684\u5171\u540c\u70b9\u3002\n\u4e0d\u8fc7\uff0c\u5c3d\u7ba1Check Point\u8868\u793a\uff0cDarkEyE\u548cCloudEyE\u5de5\u5177\u5728\u8fc7\u53bb\u51e0\u5e74\u91cc\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u4f46\u6709\u4e00\u4e2a\u6076\u610f\u8f6f\u4ef6\u64cd\u4f5c\u4f3c\u4e4e\u662fCloudEye\u7684\u4e3b\u8981\u5ba2\u6237\uff0c\u90a3\u5c31\u662f\u5b83\u7684GuLoader\u3002\n\u5728\u672c\u5468\u53d1\u5e03\u7684\u4e00\u4efd\u62a5\u544a\u4e2d\uff0cCheck Point\u5217\u51fa\u4e86CloudEyE\u548cGuLoader\u4e4b\u95f4\u7684\u4e0d\u540c\u8fde\u63a5\u3002\n\u6700\u660e\u663e\u7684\u662f\uff0c\u901a\u8fc7CloudEyE\u4fdd\u62a4\u5e94\u7528\u7a0b\u5e8f\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u5305\u542b\u4e0e\u5728\u91ce\u5916\u53d1\u73b0\u7684GuLoader\u6076\u610f\u8f6f\u4ef6\u6837\u672c\u76f8\u4f3c\u7684\u6a21\u5f0f\u3002\u8fd9\u79cd\u8054\u7cfb\u662f\u5982\u6b64\u5f3a\u70c8\uff0c\u4ee5\u81f3\u4e8e\u4efb\u4f55\u901a\u8fc7CloudEyE\u5e94\u7528\u7a0b\u5e8f\u7684\u968f\u673a\u5e94\u7528\u7a0b\u5e8f\u51e0\u4e4e\u80af\u5b9a\u4f1a\u88ab\u68c0\u6d4b\u4e3aGuLoader\u6076\u610f\u8f6f\u4ef6\u6837\u672c\uff0c\u5c3d\u7ba1\u662f\u5408\u6cd5\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5176\u6b21\uff0cCheck Point\u8868\u793aCloudEyE\u63a5\u53e3\u5305\u542b\u4e00\u4e2a\u5360\u4f4d\u7b26(\u9ed8\u8ba4)URL\uff0c\u5b83\u7ecf\u5e38\u5728GuLoader\u793a\u4f8b\u4e2d\u627e\u5230\u8be5URL\u3002\n\u7b2c\u4e09\uff0cCloudEyE\u7684\u8bb8\u591a\u7279\u6027\u4f3c\u4e4e\u90fd\u662f\u4e13\u95e8\u4e3a\u652f\u6301GuLoader\u64cd\u4f5c\u800c\u8bbe\u8ba1\u7684\u3002\nCheck Point\u8bf4\uff0cCloudEyE\u7f51\u7ad9\u4e0a\u53d1\u5e03\u7684\u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u5728Google Drive\u548cOneDrive\u7b49\u4e91\u9a71\u52a8\u5668\u4e0a\u5b58\u50a8\u6709\u6548\u8d1f\u8f7d\u3002\n\u4e91\u9a71\u52a8\u5668\u901a\u5e38\u6267\u884c\u9632\u75c5\u6bd2\u68c0\u67e5\uff0c\u4ece\u6280\u672f\u4e0a\u8bb2\u4e0d\u5141\u8bb8\u4e0a\u4f20\u6076\u610f\u8f6f\u4ef6\u3002\u7136\u800c\uff0c\u5728CloudEyE\u4e2d\u5b9e\u73b0\u7684\u6709\u6548\u8d1f\u8f7d\u52a0\u5bc6\u6709\u52a9\u4e8e\u7ed5\u8fc7\u8fd9\u4e00\u9650\u5236\u3002\n\u8fd9\u6837\u7684\u529f\u80fd\u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u6beb\u65e0\u610f\u4e49\u3002\u7136\u800c\uff0c\u907f\u514d\u4e91\u626b\u63cf\u5bf9\u4e8e\u6076\u610f\u8f6f\u4ef6\u64cd\u4f5c\u81f3\u5173\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5bf9\u4e8eGuLoader(\u5f52\u7c7b\u4e3a\u7f51\u7edc\u4e0b\u8f7d\u5668)\u8fd9\u6837\u7684\u8f6f\u4ef6\uff0c\u5b83\u4f9d\u8d56\u4e8e\u611f\u67d3\u53d7\u5bb3\u8005\u7684\u8ba1\u7b97\u673a\uff0c\u7136\u540e\u4eceGoogle Drive\u6216Microsoft OneDrive\u7b49\u670d\u52a1\u4e0b\u8f7d\u7b2c\u4e8c\u9636\u6bb5\u7684\u6709\u6548\u8d1f\u8f7d\u3002\n\u7ee7Check Point\u5468\u4e00\u53d1\u5e03\u8c34\u8d23\u62a5\u544a\u540e\uff0cCloudEyE\u5728\u5468\u4e09\u5bf9\u8c03\u67e5\u7ed3\u679c\u505a\u51fa\u4e86\u56de\u5e94\u3002\n\u8fd9\u5bb6\u610f\u5927\u5229\u516c\u53f8\u8c34\u8d23\u4e86\u8fd9\u4efd\u62a5\u544a\uff0c\u5e76\u5c06\u8be5\u5de5\u5177\u7528\u4e8e\u6076\u610f\u8f6f\u4ef6\u64cd\u4f5c\u5f52\u548e\u4e8e\u7528\u6237\u5728\u5176\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u72af\u4e0b\u7684\u6ee5\u7528\u884c\u4e3a\u3002\n\u7136\u800c\uff0c\u7f51\u7edc\u5b89\u5168\u754c\u7684\u6210\u5458\u5bf9\u8be5\u516c\u53f8\u7684\u58f0\u660e\u4e0d\u5c51\u4e00\u987e\uff0c\u79f0\u5176\u4e3a\u7cdf\u7cd5\u7684\u8c0e\u8a00\uff0c\u5e76\u547c\u5401\u610f\u5927\u5229\u5f53\u5c40\u8c03\u67e5\u8be5\u516c\u53f8\u53ca\u5176\u4e24\u540d\u521b\u59cb\u4eba\u3002\n\u6839\u636eCheck Point\u7684\u62a5\u544a\uff0c\u8fd9\u4e24\u4eba\u9762\u4e34\u7740\u88ab\u6307\u63a7\u534f\u52a9\u548c\u6559\u5506\u72af\u7f6a\u6d3b\u52a8\u548c\u6d17\u94b1\u7684\u98ce\u9669\u3002\n\u6240\u4ee5\uff0c\u5728CloudEyE(=GuLoader)\u4e0a\u4e86\u65b0\u95fb\u4e4b\u540e\uff0c\u4ed6\u4eec\u5c31\u8fd9\u4e48\u505a\u4e86\u3002\u5f88\u591a\u5351\u9119\u7684\u8c0e\u8a00..\u3002\u5e0c\u671b\u610f\u5927\u5229\u5f53\u5c40\u4e0d\u662f\u5341\u8db3\u7684\u767d\u75f4\uff0c\u4ed6\u4eec\u4f1a\u5403\u8fd9\u4e2a\u3002cc@JAMESWT_MHT pic.twitter.com/2dT9O0fqAi\u3002\n-MalwareHunterTeam(@malwrhunterteam)2020\u5e746\u670811\u65e5", "note_en": "For the past four years, an Italian company has operated a seemingly legitimate website and business, offering to provide binary protection against reverse engineering for Windows applications, but has secretly advertised and provided its service to malware gangs.\n The company&#39;s secret business came to light after security researchers from Check Point began looking at GuLoader [ 1,  2,  3], a new malware strain that rose to become one of the most active malware operations of 2020.\n  Check Point says it found references in the GuLoader code mentioning CloudEyE Protector, an anti-reverse-engineering software service provided by an Italian company named CloudEyE.\n But while source code protection services are legal and widely used, almost by all commercial/legitimate apps, Check Point said it linked this company and its owners to activity on hacking forums going back years.\n The cyber-security firm connected the CloudEyE binary protecting service advertised on the securitycode.eu website to ads promoting a malware crypting service named DarkEyE, heavily advertised on hacking forums as far back as 2014.\n   Furthermore, Check Point also linked three usernames and emails used to promote DarkEyE to the real-world identity of one of the CloudEyE founders, as displayed on the CloudEyE website.\n  In addition, Check Point says it also tracked these three email addresses and usernames to multiple posts on hacking forums.\n   The posts advertised malware/binary crypting services even before DarkEyE (CloudEyE&#39;s precursor), and went as far back as 2011, showing how entrenched and well-connected this user was in the cybercrime and malware community.\n  These connections apparently helped the group get their legitimate business off the ground. Check Point says the CloudEyE team bragged of having more than 5,000 customers on their website.\n Based on their minimum rate of $100/month, Check Point says the group earned at least $500,000 from their service. However, the sum could be much higher if we take into account that some monthly plans can go up to $750/month, and some customers most likely used the service multiple months.\n  All clues point to the fact that the two CloudEyE operators attempted to legitimize their criminal operation by hiding it behind a front company as a way to justify their profits and avoid raising the suspicions of local tax authorities when cashing out their massive profits.\n &#34;CloudEyE operations may look legal, but the service provided by CloudEyE has been a common denominator in thousands of attacks over the past year,&#34; Check Point said.\n  But while Check Point says the DarkEyE and CloudEyE tools were widely used over the past years, there is one malware operation that appears to be CloudEye&#39;s primary customer, and that&#39;s GuLoader.\n In a  report published this week, Check Point lays out the different connections between CloudEyE and GuLoader.\n The most obvious is that the code of apps passed through the CloudEyE Protect app contained similar patterns with GuLoader malware samples spotted in the wild. This connection was so strong that any random app passed through the CloudEyE app would almost certainly be detected as a GuLoader malware sample, despite being a legitimate app.\n  Second, Check Point says that the CloudEyE interface contained a placeholder (default) URL that it often found in GuLoader samples.\n  Third, many of the CloudEyE features appear to have been specifically designed to support GuLoader operations.\n &#34;Tutorials published on the CloudEyE website show how to store payloads on cloud drives such as Google Drive and OneDrive,&#34; Check Point said.\n &#34;Cloud drives usually perform anti-virus checking and technically don&#39;t allow the upload of malware. However, payload encryption implemented in CloudEyE helps to bypass this limitation.&#34;\n Such a feature makes no sense for a normal app. However, avoiding cloud scans is crucial for a malware operation, and especially for something like GuLoader -- categorized as a &#34;network downloader -- which relies on infecting a victim computer and then downloading a second-stage payload from services such as Google Drive or Microsoft OneDrive.\n  Following Check Point&#39;s damning report on Monday, CloudEyE has responded to the findings on Wednesday.\n The Italian company denounced the report and blamed the tool&#39;s use for malware operations on abuses perpetrated by its users, without its knowledge.\n However, members of the cyber-security community dismissed the company&#39;s statement as &#34;poor lies&#34; and have called on Italian authorities to investigate the company and its two founders.\n Based on Check Point&#39;s report, the two are at risk of being investigated under charges of aiding and abetting a criminal operation and money laundering.\n So, after CloudEyE (= GuLoader) got into the news, they just did this. Much poor lies... Hopefully Italian authorities aren&#39;t full idiots who will eat this. cc  @JAMESWT_MHT  pic.twitter.com/2dT9O0fqAi\n\u2014 MalwareHunterTeam (@malwrhunterteam)  June 11, 2020", "posttime": "2020-06-12 23:42:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,company,cloudeye", "title": "\u4e00\u5bb6\u610f\u5927\u5229\u516c\u53f8\u88ab\u63ed\u53d1\u4e3a\u6076\u610f\u8f6f\u4ef6\u8fd0\u8425\u7684\u5e4c\u5b50", "title_en": "Italian company exposed as a front for malware operations", "transed": 1, "url": "https://www.zdnet.com/article/italian-company-exposed-as-a-front-for-malware-operations/", "via": "", "real_tags": ["\u8f6f\u4ef6", "company", "cloudeye"]}, {"category": "", "categoryclass": "", "imagename": "383abed89318cbc0f827c7e1d47c76a0.jpg", "infoid": 1006289, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u7b7e\u7f72\u201c\u72ec\u7acb\u5ba3\u8a00\u201d\u4e4b\u524d\u7684\u8fd120\u5e74\u91cc\uff0c\u672c\u6770\u660e\u00b7\u5bcc\u5170\u514b\u6797\u4e00\u76f4\u4f4f\u5728\u4f26\u6566\u514b\u96f7\u6587\u885736\u53f7\u7684\u4e00\u6240\u623f\u5b50\u91cc\u30021776\u5e74\uff0c\u5bcc\u5170\u514b\u6797\u79bb\u5f00\u4ed6\u5728\u82f1\u56fd\u7684\u5bb6\u56de\u5230\u7f8e\u56fd\u3002200\u591a\u5e74\u540e\uff0c\u5728\u5730\u4e0b\u5ba4\u53d1\u73b0\u4e8615\u5177\u8eab\u4f53\uff0c\u57cb\u5728\u82b1\u56ed\u4e0b\u9762\u4e00\u4e2a\u6ca1\u6709\u7a97\u6237\u7684\u79d8\u5bc6\u623f\u95f4\u91cc\u3002\n1998\u5e74\uff0c\u81ea\u7136\u8d44\u6e90\u4fdd\u62a4\u8005\u6b63\u5728\u5bf936\u53f7\u514b\u96f7\u6587\u8fdb\u884c\u4fee\u590d\uff0c\u5e0c\u671b\u5c06\u5bcc\u5170\u514b\u6797\u51fa\u6ca1\u7684\u8001\u5730\u65b9\u6539\u9020\u6210\u535a\u7269\u9986\u3002\u672c\u6770\u660e\u00b7\u5bcc\u5170\u514b\u6797\u00b7\u8c6a\u65af\u8bf4\uff0c\u201c\u4ece\u4e00\u4e2a\u4e00\u7c73\u5bbd\uff0c\u4e00\u7c73\u6df1\u7684\u5751\u91cc\uff0c\u627e\u5230\u4e861200\u591a\u5757\u9aa8\u5934\u201d--\u8fd9\u662f\u5341\u51e0\u5177\u8eab\u4f53\u7684\u6b8b\u7559\u7269\u3002\u5176\u4e2d\u516d\u5177\u662f\u513f\u7ae5\u3002\u6cd5\u533b\u8c03\u67e5\u663e\u793a\u8fd9\u4e9b\u9aa8\u5934\u53ef\u4ee5\u8ffd\u6eaf\u5230\u5bcc\u5170\u514b\u6797\u65f6\u4ee3\u3002\n\u5bcc\u5170\u514b\u6797\u662f\u4e00\u4f4d\u8457\u540d\u7684\u9769\u547d\u5bb6\u548c\u6709\u6743\u52bf\u7684\u5171\u6d4e\u4f1a\u4f1a\u5458-\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u7684\u5171\u6d4e\u4f1a\u5927\u5e08-\u6240\u4ee5\u5f88\u5bb9\u6613\u8ba9\u4eba\u6000\u7591\u5bcc\u5170\u514b\u6797\u53ef\u80fd\u5728\u4ed6\u7684\u5730\u4e0b\u5ba4\u91cc\u9690\u85cf\u4e86\u4ec0\u4e48\u9ed1\u6697\u7684\u79d8\u5bc6\u3002\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e8b\u5b9e\u5e76\u4e0d\u662f\u90a3\u4e48\u9ed1\u6697\u3002\n\u201c\u6700\u5408\u7406\u7684\u89e3\u91ca\u4e0d\u662f\u5927\u5c60\u6740\uff0c\u800c\u662f\u672c\u6770\u660e\u00b7\u5bcc\u5170\u514b\u6797\u5e74\u8f7b\u7684\u670b\u53cb\u517c\u95e8\u5f92\u5a01\u5ec9\u00b7\u4f11\u68ee\u5f00\u529e\u7684\u4e00\u6240\u89e3\u5256\u5b66\u6821\uff0c\u201d\u82f1\u56fd\u201c\u536b\u62a5\u201d\u57282003\u5e74\u8bf4\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5728\u5bcc\u5170\u514b\u6797\u7684\u65f6\u4ee3\uff0c\u89e3\u5256\u5b66\u8bfe\u7a0b\u662f\u4e00\u9879\u9ed1\u6697\u7684\u3001\u4f26\u7406\u4e0a\u6a21\u68f1\u4e24\u53ef\u7684\u4e1a\u52a1\u3002\u7cbe\u795e\u5f17\u6d1b\u65af\uff1a\n\u89e3\u5256\u5b66\u8fd8\u5904\u4e8e\u521d\u7ea7\u9636\u6bb5\uff0c\u4f46\u5f53\u65f6\u7684\u793e\u4f1a\u548c\u4f26\u7406\u98ce\u5c1a\u5bf9\u5b83\u4e0d\u5c51\u4e00\u987e\u3002\u2026\u3002\u4ece\u6cd5\u5f8b\u4e0a\u5f88\u96be\u83b7\u5f97\u7a33\u5b9a\u7684\u4eba\u4f53\u4f9b\u5e94\uff0c\u56e0\u6b64\u4f11\u68ee\u3001\u4ea8\u7279\u548c\u8be5\u9886\u57df\u7684\u5176\u4ed6\u5148\u9a71\u4e0d\u5f97\u4e0d\u8f6c\u5411\u76d7\u5893-\u8981\u4e48\u4ed8\u94b1\u7ed9\u4e13\u4e1a\u7684\u201c\u590d\u6d3b\u4eba\u201d\u83b7\u53d6\u8eab\u4f53\uff0c\u8981\u4e48\u81ea\u5df1\u6316\u6398\u8eab\u4f53-\u4ee5\u83b7\u5f97\u6807\u672c\u3002\n\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c36\u5c81\u7684\u514b\u96f7\u6587\u662f\u4f11\u68ee\u5efa\u7acb\u81ea\u5df1\u7684\u89e3\u5256\u5b9e\u9a8c\u5ba4\u4e0d\u53ef\u6297\u62d2\u7684\u597d\u53bb\u5904\u3002\u623f\u5ba2\u662f\u4e00\u4e2a\u503c\u5f97\u4fe1\u8d56\u7684\u670b\u53cb\uff0c\u5973\u623f\u4e1c\u662f\u4ed6\u7684\u5cb3\u6bcd\uff0c\u4ed6\u7684\u4e24\u4fa7\u6709\u65b9\u4fbf\u7684\u8eab\u4f53\u6765\u6e90\u3002\u8eab\u4f53\u53ef\u4ee5\u4ece\u5893\u5730\u8d70\u79c1\u5230\u8857\u9053\u4e00\u7aef\u7684\u7801\u5934\uff0c\u4e5f\u53ef\u4ee5\u4ece\u53e6\u4e00\u7aef\u7684\u7ede\u5211\u67b6\u4e0a\u62a2\u8d70\u3002\u5f53\u4ed6\u5904\u7406\u5b8c\u8fd9\u4e9b\u8eab\u4f53\u65f6\uff0c\u4f11\u68ee\u5e72\u8106\u628a\u5269\u4e0b\u7684\u8eab\u4f53\u90fd\u57cb\u5728\u5730\u4e0b\u5ba4\u91cc\uff0c\u800c\u4e0d\u662f\u5077\u5077\u5730\u628a\u5b83\u4eec\u5e26\u5230\u5176\u4ed6\u5730\u65b9\u5904\u7406\uff0c\u5192\u7740\u88ab\u6293\u5230\u5e76\u56e0\u89e3\u5256\u548c\u76d7\u5893\u800c\u88ab\u8d77\u8bc9\u7684\u98ce\u9669\u3002\n\u672c\u6770\u660e\u00b7\u5bcc\u5170\u514b\u6797\u4e4b\u5bb6\u8bf4\uff0c\u5bcc\u5170\u514b\u6797\u53ef\u80fd\u77e5\u9053\u4ed6\u7684\u5927\u697c\u91cc\u6b63\u5728\u8fdb\u884c\u975e\u6cd5\u7814\u7a76\uff0c\u4f46\u4ed6\u81ea\u5df1\u662f\u5426\u53c2\u4e0e\u4e86\u8fd9\u4e00\u70b9\u662f\u503c\u5f97\u6000\u7591\u7684\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u8fd8\u662f\u65e0\u6cd5\u60f3\u8c61\uff0c\u4ed6\u662f\u4e00\u4e2a\u597d\u5947\u7684\u4eba\uff0c\u4ed6\u81f3\u5c11\u6ca1\u6709\u5077\u5077\u6e9c\u4e0b\u6765\u68c0\u67e5\u8fc7\u4e00\u4e24\u6b21\u8bc9\u8bbc\u8fc7\u7a0b\u3002", "note_en": "For nearly two decades leading up to the signing of the Declaration of Independence Benjamin Franklin lived in London in a house at 36 Craven Street. In 1776, Franklin left his English home to come back to America. More than 200 years later, 15 bodies were found in the basement, buried in a secret, windowless room beneath the garden.\n  In 1998, conservationists were doing repairs on 36 Craven, looking to turn Franklin\u2019s old haunt into a museum. \u201cFrom a one metre wide, one metre deep pit,\u00a0over 1200 pieces of bone were retrieved\u201d\u2014remnants of more than a dozen bodies,\u00a0\u00a0 says Benjamin Franklin House.\u00a0 Six were children. Forensic investigations showed that the bones dated to Franklin\u2019s day.\n  Franklin was a noted revolutionary and powerful freemason\u2014 the Grand Master of Masons of Pennsylvania\u2014so it\u2019s easy to wonder what dark secrets Franklin may have hidden in his basement chamber. But the truth, it turns out, isn\u2019t  quite so dark.\n  \u201cThe most plausible explanation is not mass murder, but an anatomy school run by Benjamin Franklin\u2019s young friend and protege, William Hewson,\u201d  said the  Guardian in 2003.\n  Still, in Franklin\u2019s time, anatomy lessons were a dark, ethically ambiguous business.  Mental Floss:\n  Anatomy was still in its infancy, but the day\u2019s social and ethical mores frowned upon it\u2026 A steady supply of human bodies was hard to come by legally, so Hewson, Hunter, and the field\u2019s other pioneers had to turn to grave robbing \u2014 either paying professional \u201cresurrection men\u201d to procure cadavers or digging them up themselves \u2014 to get their hands on specimens.\n Researchers think that 36 Craven was an irresistible\u00a0spot for Hewson to establish his own anatomy lab. The tenant was a trusted friend, the landlady was his mother-in-law, and he was flanked by convenient sources for corpses. Bodies could be smuggled from graveyards and delivered to the wharf at one end of the street, or snatched from the gallows at the other end. When he was done with them, Hewson simply buried whatever was left of the bodies in the basement, rather than sneak them out for disposal elsewhere and risk getting caught and prosecuted for dissection and grave robbing.\n  Franklin was probably aware of the illegal studies going on in his building,  says the Benjamin Franklin House, but it\u2019s doubtful the he was involved himself. Still, we can\u2019t imagine that, curious man that he was, he didn\u2019t sneak down and check out the proceedings at least once or twice.", "posttime": "2020-06-12 23:07:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bcc\u5170\u514b\u6797,franklin,\u8eab\u4f53", "title": "\u4e3a\u4ec0\u4e48\u672c\u6770\u660e\u00b7\u5bcc\u5170\u514b\u6797\u7684\u5730\u4e0b\u5ba4\u91cc\u6ee1\u662f\u9ab7\u9ac5\uff1f(2013)", "title_en": "Why Was Benjamin Franklin\u2019s Basement Filled with Skeletons? (2013)", "transed": 1, "url": "https://www.smithsonianmag.com/smart-news/why-was-benjamin-franklins-basement-filled-with-skeletons-524521/", "via": "", "real_tags": ["\u5bcc\u5170\u514b\u6797", "franklin", "\u8eab\u4f53"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006288, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u97f3\u4e50\u4e4b\u58f0\u4f9d\u9760\u4f60\u4eec\u7684\u6350\u6b3e\u3002\u5bf9\u4e8e\u90a3\u4e9b\u66fe\u7ecf\u652f\u6301\u5e76\u7ee7\u7eed\u652f\u6301\u6211\u4eec\u56e2\u961f\u7684\u4eba\uff0c\u8981\u77e5\u9053\uff0c\u5982\u679c\u6ca1\u6709\u4f60\u4eec\u7684\u5e2e\u52a9\uff0c\u6211\u4eec\u6240\u505a\u7684\u4e00\u5207\u90fd\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u5982\u679c\u4f60\u6b63\u5728\u8003\u8651\u6350\u6b3e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u652f\u6301\u827a\u672f\u7684\u65b9\u5f0f\u3002\n\u6ce8\uff1a\u5982\u679c\u4f60\u6536\u5230\u4e00\u6761\u9519\u8bef\u4fe1\u606f\uff0c\u8fd9\u4ec5\u4ec5\u610f\u5473\u7740PayPal\u6709\u592a\u591a\u7684\u6d41\u91cf\uff0c\u53ea\u9700\u7a0d\u540e\u8fde\u63a5-\u9875\u9762\u5c06\u4e0d\u4f1a\u52a0\u8f7d\uff0c\u9664\u975e\u5b83\u662f100%\u5b89\u5168\u7684\u3002\n\u6b64\u5916\uff0c\u60a8\u7684\u6350\u6b3e\u5c06\u76f4\u63a5\u7528\u4e8e\u8d44\u52a9\u97f3\u4e50\u4f1a\u3001\u5f55\u97f3\u3001\u6559\u80b2\u9879\u76ee\u548c\u652f\u6301\u5f53\u5730\u97f3\u4e50\u5bb6\u3002\u8981\u8fdb\u884c\u5728\u7ebf\u6350\u8d60\uff0c\u8bf7\u70b9\u51fb\u4e0b\u9762\u6216\u968f\u65f6\u8054\u7cfb\u6211\u4eec\uff01\n\u4e3a\u4e86\u60a8\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u63a5\u53d7\u901a\u8fc7VISA\u3001\u4e07\u4e8b\u8fbe\u5361\u3001Maestro\u3001\u7f8e\u56fd\u8fd0\u901a\u548c\u901a\u8fc7PayPal\u53d1\u73b0\u7684\u6350\u6b3e\u3002\u5373\u4f7f\u60a8\u6ca1\u6709PayPal\u8d26\u6237\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u5b89\u5168\u5730\u5904\u7406\u60a8\u7684\u6350\u6b3e--\u6240\u6709\u4ea4\u6613\u90fd\u662f\u5b89\u5168\u548c\u52a0\u5bc6\u7684\u3002\n\u5bf9\u4e8e\u6240\u6709\u7684\u7f8e\u56fd\u5728\u7ebf\u6350\u6b3e\uff0c\u6211\u4eec\u5c06\u90ae\u5bc4\u4e00\u4efd\u60a8\u7684\u7eb3\u7a0e\u8bb0\u5f55\u7684\u786e\u8ba4\u4e66\u3002\n\u201c\u97f3\u4e50\u4e4b\u58f0\u201d\u8bda\u9080\u60a8\u4e0e\u6211\u4eec\u4e00\u8d77\u521b\u4f5c\u5168\u65b0\u7684\u3001\u521b\u65b0\u7684\u97f3\u4e50\u4f1a\u548c\u8282\u76ee\uff0c\u8ba9\u4e16\u754c\u4e0a\u4efb\u4f55\u4eba\u3001\u4efb\u4f55\u5730\u65b9\u90fd\u80fd\u770b\u5230\u3002\u643a\u624b\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u9020\u4e00\u4e2a\u5168\u65b0\u7684\u5404\u4e2a\u5e74\u9f84\u6bb5\u548c\u80cc\u666f\u7684\u89c2\u4f17\uff0c\u4ed6\u4eec\u5c06\u53d1\u73b0\u97f3\u4e50\u7684\u7ec8\u751f\u5192\u9669\u548c\u65e9\u671f\u7684\u97f3\u4e50\u8868\u6f14\u3002\u8fd9\u4e9b\u65b0\u7684\u89c2\u4f17\u5c06\u6765\u81ea\u4e16\u754c\u5404\u5730\u3002\u201c\u6211\u4eec\u9080\u8bf7\u60a8\u4f5c\u4e3a\u5baa\u7ae0\u6210\u5458\u52a0\u5165\u7f2a\u65af\u5973\u795e\u5708\u3002\u201d\u97f3\u4e50\u4e4b\u58f0\u901a\u8fc7\u4f7f\u7528\u5f00\u521b\u6027\u7684\u6280\u672f\uff0c\u6b63\u5728\u5f00\u521b\u6355\u6349\u548c\u8bb0\u5f5521\u4e16\u7eaa\u521d\u8868\u6f14\u8005\u5386\u53f2\u4e0a\u91cd\u8981\u65f6\u523b\u7684\u91cd\u8981\u5de5\u4f5c\u3002\u4f60\u7684\u793c\u7269\u5c06\u786e\u4fdd\u73b0\u5728\u548c\u672a\u6765\u8bb8\u591a\u5e74\u6bcf\u4e2a\u4eba\u90fd\u80fd\u6b23\u8d4f\u5230\u8fd9\u9996\u97f3\u4e50\u3002", "note_en": "Voices of Music relies on your donations. To those who have supported our group, and continue to support, know that what we do would not be possible without your help.\n  If you are considering a donation, this is a great way to support the arts.\n    NB: If you get an error message it just means that PayPal has too much traffic, just connect later--the page will not load unless it is 100 percent secure.\n  In addition, your donation goes directly into funding concerts, recordings, educational programs and supporting local musicians. To make an online donation, please click below or  contact us anytime!\n  For your convenience, we accept donations through VISA, MasterCard, Maestro, American Express, and Discover through PayPal. Even if you do not have a PayPal account, they will process your donation securely--all transactions are secure and encrypted.\n  For all US online donations we will mail you an acknowledgement for your tax records.\n    Voices of Music would like to invite you to join us in creating new and innovative concerts and programs that anyone, anwhere in the world can see. \u00a0Together, we can create a brand new audience of all ages and backgrounds that will discover the lifetime adventure of music and Early Music performance. This new audience will be drawn from all over the world.\u00a0 We invite you to join the Circle of the Muses as a Charter Member. \u00a0Voices of Music is pioneering, through the use of groundbreaking technology, the important work of capturing and documenting an important moment in the history of the performers of the early 21st century. \u00a0Your gift will ensure that everyone can enjoy this music both now and for many years to come.", "posttime": "2020-06-12 22:34:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u97f3\u4e50,voices,\u6350\u6b3e", "title": "\u97f3\u4e50\u4e4b\u58f0", "title_en": "Voices of Music", "transed": 1, "url": "https://voicesofmusic.org/donate.html", "via": "", "real_tags": ["\u97f3\u4e50", "voices", "\u6350\u6b3e"]}, {"category": "", "categoryclass": "", "imagename": "4cd61b2ce7827cab9bd034ddb903ae8a.jpg", "infoid": 1006287, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u5173\u4e8e\u60a8\u6700\u8fd1\u7684\u5e16\u5b50\uff0c\u6211\u53ef\u80fd\u4f1a\u8fdf\u5230\u4e00\u70b9\uff0c\u4f46\u4ee5\u9632\u4e07\u4e00\uff1a\u60a8\u662f\u5426\u6709\u4efb\u4f55\u7b56\u7565\u6216\u6545\u4e8b\u6765\u5904\u7406\u60a8\u65e0\u6cd5\u6446\u8131\u7684\u8fdd\u53cd\u4e86\u90e8\u5206(\u6216\u5168\u90e8)API\u8bbe\u8ba1\u51c6\u5219\u7684\u5916\u90e8\u5e93\uff1f\u8fd9\u662f\u4e00\u4e2a\u6a21\u7cca\u7684\u95ee\u9898\uff0c\u4f46\u6211\u5b9e\u9645\u4e0a\u53ea\u662f\u5728\u95ee\u4f60\u8fc7\u53bb\u4f5c\u4e3aAPI\u7528\u6237\u7684\u4efb\u4f55\u7ecf\u5386\uff0c\u8fd9\u4e9b\u7ecf\u9a8c\u5728\u4f60\u7684\u8111\u6d77\u4e2d\u771f\u7684\u5f88\u7a81\u51fa\u3002\u201c\u3002\n\u8fd9\u63d0\u9192\u4e86\u6211\uff0c\u6211\u4e00\u76f4\u60f3\u5199\u4e0b\u4f7f\u7528\u7cdf\u7cd5API\u7684\u5fc5\u8981\u6b65\u9aa4\uff0c\u53ea\u662f\u4e3a\u4e86\u5f3a\u8c03\u5b83\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u662f\u591a\u4e48\u7cdf\u7cd5\u3002\u6211\u8ba4\u4e3a\u7f16\u5199API\u7684\u4eba\u5e76\u6ca1\u6709\u771f\u6b63\u610f\u8bc6\u5230\u8ba9\u5b83\u4eec\u6b63\u786e\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u9519\u8bef\u4f1a\u7ed9\u6210\u767e\u4e0a\u5343\u3001\u6709\u65f6\u751a\u81f3\u6570\u767e\u4e07\u7684\u5176\u4ed6\u7a0b\u5e8f\u5458\u5e26\u6765\u591a\u5c11\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c\u3002\u56e0\u6b64\uff0c\u6211\u89c9\u5f97\u82b1\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u4e00\u4e2aAPI\u5e76\u5c55\u793a\u4e00\u4e2aAPI\u53ef\u4ee5\u5236\u9020\u591a\u5c11\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c\u662f\u5f88\u91cd\u8981\u7684\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5173\u4e8e\u5b83\u81ea\u5df1\u7684\u5f88\u597d\u7684\u4e13\u680f-\u6bcf\u5468\u5256\u6790\u4e00\u4e2a\u7cdf\u7cd5\u7684API\u3002\u4f46\u662f\u7531\u4e8e\u6211\u6ca1\u6709\u65f6\u95f4\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u5982\u679c\u6211\u53ea\u6253\u7b97\u5256\u6790\u4e00\u4e2aAPI\uff0c\u90a3\u4e48\u6700\u91cd\u8981\u7684\u95ee\u9898\u662f\uff0c\u6211\u5e94\u8be5\u9009\u62e9\u54ea\u4e00\u4e2aAPI\u5462\uff1f\n\u5728\u8ba1\u7b97\u53f2\u4e0a\u5199\u4e00\u7bc7\u5173\u4e8e\u7cdf\u7cd5\u7684API\u7684\u6587\u7ae0\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u65f6\u4ee3(\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u4e3a\u4e86\u8c0b\u751f\u800c\u4e0d\u5f97\u4e0d\u7f16\u7a0b\u7684\u53ef\u6015\u65f6\u4ee3)\u3002\u5e02\u573a\u4e0a\u6709\u8fd9\u4e48\u591a\u7cdf\u7cd5\u7684API\uff0c\u6211\u53ef\u4ee5\u968f\u673a\u9009\u62e9\u4e00\u4e2a\uff0c\u5f88\u53ef\u80fd\u4f1a\u627e\u5230\u8db3\u591f\u7684\u95ee\u9898\u6765\u586b\u6ee1\u4e00\u7bc73000\u5b57\u7684\u6587\u7ae0\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u53ea\u6253\u7b97\u5728\u4e00\u4e2aAPI\u4e2d\u9009\u62e9\u4e00\u4e2a\u7279\u5b9a\u7684\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c1d\u8bd5\u9009\u62e9\u6211\u5b9e\u9645\u4f7f\u7528\u8fc7\u7684\u6700\u5dee\u7684API\u4f3c\u4e4e\u662f\u552f\u4e00\u6b63\u786e\u7684\u9009\u62e9\u3002\u73b0\u5728\u6709\u5f88\u591aAPI\u901a\u5e38\u4f1a\u5728\u201c\u6700\u5deeAPI\u201d\u6392\u884c\u699c\u4e0a\u540d\u5217\u524d\u8305\u3002\u4f8b\u5982\uff0cCSS\u5728\u4efb\u4f55\u6709\u65b0\u7248\u672c\u7684\u5e74\u4efd\u90fd\u53ef\u80fd\u5360\u636e\u524d10\u540d\u4e2d\u4e00\u534a\u7684\u4f4d\u7f6e\u3002DirectShow\u867d\u7136\u4ecd\u662f\u4e00\u5bb6\u6301\u7eed\u7ecf\u8425\u7684\u516c\u53f8\uff0c\u4f46\u80af\u5b9a\u5728\u5176\u6240\u5904\u65f6\u4ee3\u7684\u6392\u540d\u4e2d\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002\u5728\u73b0\u4ee3\uff0c\u50cfAndroid SDK\u8fd9\u6837\u7684\u65b0\u6765\u8005\u6b63\u5728\u663e\u793a\u51fa\u771f\u6b63\u7684\u6f5c\u529b\uff0c\u5f00\u53d1\u73af\u5883\u662f\u5982\u6b64\u9519\u7efc\u590d\u6742\uff0c\u4ee5\u81f3\u4e8e\u4ece\u5b9e\u9645\u7684C++\u4ee3\u7801\u8c03\u7528API\u65f6\uff0c\u5f53\u60a8\u5c1d\u8bd5\u4e0e\u5b83\u4eec\u4e00\u8d77\u53d1\u5e03\u4e1c\u897f\u65f6\uff0c\u60a8\u6700\u4e0d\u4f1a\u62c5\u5fc3\u7684\u662fAPI\u7684\u8d28\u91cf\u3002\u4f46\u662f\uff0c\u5f53\u6211\u4ed4\u7ec6\u601d\u8003\u8c01\u662f\u6709\u53f2\u4ee5\u6765\u6700\u91cd\u8981\u7684\u7cdf\u7cd5API\u51a0\u519b\u65f6\uff0c\u6709\u4e00\u4e2a\u660e\u663e\u7684\u8d62\u5bb6\uff1aWindows\u7684\u4e8b\u4ef6\u8ddf\u8e2a\u3002Windows\u7684\u4e8b\u4ef6\u8ddf\u8e2a\u662f\u4e00\u4e2a\u505a\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u4e8b\u60c5\u7684API\uff1a\u5b83\u5141\u8bb8\u7cfb\u7edf\u7684\u4efb\u4f55\u7ec4\u4ef6(\u5305\u62ec\u6700\u7ec8\u7528\u6237\u8f6f\u4ef6)\u5ba3\u5e03\u201c\u4e8b\u4ef6\u201d\uff0c\u7136\u540e\u4efb\u4f55\u5176\u4ed6\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u201c\u6d88\u8d39\u201d\u3002\u5b83\u662f\u4e00\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u7cfb\u7edf\uff0c\u7528\u4e8e\u8bb0\u5f55\u4ece\u5185\u6838\u5230\u5185\u6838\u7684\u6240\u6709\u5185\u5bb9\u7684\u6027\u80fd\u548c\u8c03\u8bd5\u4fe1\u606f\u3002\u73b0\u5728\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6e38\u620f\u5f00\u53d1\u4eba\u5458\u6ca1\u6709\u7406\u7531\u76f4\u63a5\u4f7f\u7528Windows API\u7684\u4e8b\u4ef6\u8ddf\u8e2a\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528Perfmon\u4e4b\u7c7b\u7684\u5de5\u5177\u6765\u67e5\u770b\u6709\u5173\u6e38\u620f\u7684\u65e5\u5fd7\u4fe1\u606f\uff0c\u4f8b\u5982\u5b83\u4f7f\u7528\u4e86\u591a\u5c11\u5de5\u4f5c\u96c6\u6216\u5b83\u4f7f\u7528\u4e86\u591a\u5c11\u78c1\u76d8I/O\u3002\u4f46\u662f\uff0c\u76f4\u63a5\u8bbf\u95ee\u4e8b\u4ef6\u8ddf\u8e2a\u7ed9\u60a8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u60a8\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u90fd\u65e0\u6cd5\u83b7\u5f97\u7684\u7279\u5b9a\u529f\u80fd\uff1a\u4e0a\u4e0b\u6587\u5207\u6362\u8ba1\u65f6\u3002\u662f\u7684\uff0c\u5982\u679c\u60a8\u6709\u4efb\u4f55\u76f8\u5bf9\u8f83\u65b0\u7684Windows\u7248\u672c(\u59827\u62168)\uff0c\u5185\u6838\u5c06\u8bb0\u5f55\u6240\u6709\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u5e76\u4e14\u4f7f\u7528\u8fd9\u4e9b\u4e8b\u4ef6\u4e2d\u5305\u542b\u7684CPU\u65f6\u95f4\u6233\uff0c\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e0e\u60a8\u81ea\u5df1\u7684\u6e38\u620f\u5185\u6027\u80fd\u5206\u6790\u76f8\u5173\u8054\u3002\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\u4fe1\u606f\uff0c\u800c\u4e14\u901a\u5e38\u53ea\u80fd\u4ece\u63a7\u5236\u53f0\u786c\u4ef6\u83b7\u5f97\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u50cfRAD\u7684\u9065\u6d4b\u8fd9\u6837\u7684\u5de5\u5177\u53ef\u4ee5\u5411\u60a8\u663e\u793a\u6b63\u5728\u8fd0\u884c\u7684\u7ebf\u7a0b\u4f55\u65f6\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14\u5fc5\u987b\u7b49\u5f85\u7cfb\u7edf\u7ebf\u7a0b\u8fdb\u884c\u5de5\u4f5c\uff0c\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u5947\u602a\u7684\u6027\u80fd\u95ee\u9898\u901a\u5e38\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cAPI\u542c\u8d77\u6765\u76f8\u5f53\u4e0d\u9519\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u95f4\u662f\u975e\u5e38\u5b9d\u8d35\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5373\u4f7fAPI\u6709\u70b9\u7b80\u964b\uff0c\u5b83\u4ecd\u7136\u662f\u76f8\u5f53\u68d2\u7684\uff0c\u5bf9\u5417\uff1f\u5bf9\u5417\uff1f\n\u5728\u6211\u4eec\u770b\u4e00\u770bWindows API\u7684\u5b9e\u9645\u4e8b\u4ef6\u8ddf\u8e2a\u4e4b\u524d\uff0c\u6211\u60f3\u5728\u8fd9\u91cc\u8d70\u4e00\u8d70\uff0c\u505a\u6211\u5728\u4e0a\u5468\u7684\u8bb2\u5ea7\u4e2d\u8bf4\u8fc7\u7684\u4e8b\u60c5\uff1a\u9996\u5148\u7f16\u5199\u7528\u6cd5\u4ee3\u7801\u3002\u65e0\u8bba\u4f55\u65f6\u8bc4\u4f30API\u6216\u521b\u5efa\u65b0\u7684API\uff0c\u60a8\u90fd\u5fc5\u987b\u59cb\u7ec8\u3001\u59cb\u7ec8\u3001\u59cb\u7ec8\u4ece\u7f16\u5199\u4e00\u4e9b\u4ee3\u7801\u5f00\u59cb\uff0c\u5c31\u597d\u50cf\u60a8\u662f\u4e00\u4e2a\u8bd5\u56fe\u505aAPI\u5e94\u8be5\u505a\u7684\u4e8b\u60c5\u7684\u7528\u6237\u4e00\u6837\u3002\u5982\u679cAPI\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u8fd9\u662f\u83b7\u5f97API\u5982\u4f55\u5de5\u4f5c\u7684\u826f\u597d\u3001\u6e05\u6670\u900f\u89c6\u56fe\u7684\u552f\u4e00\u9014\u5f84\u3002\u5982\u679c\u5b83\u662f\u201c\u795e\u5947\u7684\u201d\uff0c\u53ef\u4ee5\u8fd9\u4e48\u8bf4\u3002\u7136\u540e\uff0c\u4e00\u65e6\u4f60\u6709\u4e86\u8fd9\u4e9b\uff0c\u4f60\u5c31\u53ef\u4ee5\u7ee7\u7eed\u524d\u8fdb\uff0c\u5f00\u59cb\u601d\u8003\u5b9e\u9645\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u5bf9\u4f60\u6765\u8bf4\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4ec0\u4e48\u6765\u5b9e\u73b0\u4e00\u4e9b\u53ef\u5b9e\u65bd\u7684\u4e1c\u897f\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u662f\u4e00\u540d\u7a0b\u5e8f\u5458\uff0c\u5bf9Windows API\u7684\u4e8b\u4ef6\u8ddf\u8e2a\u4e00\u65e0\u6240\u77e5\uff0c\u6211\u5c06\u5982\u4f55\u83b7\u5f97\u4e0a\u4e0b\u6587\u5207\u6362\u5217\u8868\u5462\uff1f\u55ef\uff0c\u6211\u60f3\u5230\u4e86\u4e24\u79cd\u65b9\u6cd5\u3002\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a\n\u8fd9\u662f\u505a\u8fd9\u4ef6\u4e8b\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5f88\u7b80\u5355\uff0c\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5f88\u96be\u641e\u7838\u3002\u4f7f\u7528\u8c03\u8bd5\u5668\u7684\u4eba\u5c06\u80fd\u591f\u51c6\u786e\u5730\u770b\u5230\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u505a\u4e86\u4ec0\u4e48\uff0c\u60a8\u5c06\u80fd\u591f\u975e\u5e38\u5bb9\u6613\u5730\u8fa8\u522b\u51fa\u6765\n\u6211\u4e0d\u77e5\u9053\u4efb\u4f55\u4eba\u5e94\u8be5\u5982\u4f55\u771f\u6b63\u5b66\u4e60\u5982\u4f55\u4f7f\u7528Windows API\u7684\u4e8b\u4ef6\u8ddf\u8e2a\u3002\u4e5f\u8bb8\u6709\u4e00\u4e9b\u5f88\u597d\u7684\u4f8b\u5b50\u56db\u5904\u6d41\u4f20\uff0c\u4f46\u6211\u4ece\u6765\u6ca1\u6709\u627e\u5230\u8fc7\u3002\u6211\u4e0d\u5f97\u4e0d\u5728\u957f\u8fbe\u6570\u5c0f\u65f6\u7684\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u4ece\u5404\u79cd\u6587\u6863\u7247\u6bb5\u4e2d\u63d0\u53d6\u7528\u6cd5\u4ee3\u7801\uff0c\u5c06\u5b83\u4eec\u62fc\u51d1\u5728\u4e00\u8d77\u3002\u6bcf\u6b21\u6211\u60f3\u51fa\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u53e6\u4e00\u4e2a\u6b65\u9aa4\u65f6\uff0c\u6211\u90fd\u4f1a\u60f3\uff0c\u201c\u7b49\u7b49\uff0c\u771f\u7684\u5417\uff1f\u201d\u800c\u6bcf\u4e00\u6b21\u5fae\u8f6f\u90fd\u542b\u84c4\u5730\u56de\u7b54\u8bf4\uff0c\u201c\u771f\u7684\u3002\u201d\u8ba9\u6211\u544a\u8bc9\u60a8\u5982\u4f55\u8c03\u7528API\u786e\u5b9e\u4f1a\u8ba9\u60a8\u5bf9\u4f53\u9a8c\u7684\u656c\u754f\u6709\u6240\u51cf\u5f31\uff0c\u6240\u4ee5\u6211\u4f1a\u8bf4\uff0c\u5982\u679c\u60a8\u60f3\u8981\u5b8c\u6574\u7684\u4f53\u9a8c\uff0c\u73b0\u5728\u5c31\u505c\u6b62\u9605\u8bfb\uff0c\u5e76\u5c1d\u8bd5\u81ea\u5df1\u83b7\u53d6\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u95f4\u6233\u3002\u6211\u53ef\u4ee5\u5411\u4f60\u4fdd\u8bc1\uff0c\u8fd9\u5c06\u662f\u51e0\u4e2a\u5c0f\u65f6\u7684\u4e50\u8da3\u548c\u5174\u594b\u3002\u90a3\u4e9b\u5b81\u613f\u4ee5\u4e00\u5929\u7684\u9762\u90e8\u62a4\u7406\u65f6\u523b\u4e3a\u4ee3\u4ef7\u6765\u8282\u7701\u65f6\u95f4\u7684\u4eba\uff0c\u8bf7\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002\u597d\u7684\uff0c\u6211\u4eec\u5f00\u59cb\u5427\u3002\u4e0e\u6211\u5efa\u8bae\u7684ETWBeginTrace()\u7b49\u6548\u7684\u662fMicrosoft\u7684StartTrace()\u8c03\u7528\u3002\u4e4d\u4e00\u770b\uff0c\u5b83\u4f3c\u4e4e\u8db3\u591f\u65e0\u8f9c\uff1a\n\u4f46\u662f\uff0c\u5f53\u60a8\u67e5\u770b\u9700\u8981\u4e3aProperties\u53c2\u6570\u4f20\u5165\u7684\u5185\u5bb9\u65f6\uff0c\u4e8b\u60c5\u5f00\u59cb\u53d8\u5f97\u6709\u70b9\u9ebb\u70e6\u4e86\u3002Windows\u5b9a\u4e49\u4e86EVENT_TRACE_PROPERTIES\u7ed3\u6784\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u7c97\u7565\u5730\u770b\u4e00\u4e0b\u8fd9\u4e9b\u6570\u636e\u5c31\u4f1a\u53d1\u73b0\u4e00\u70b9\u5947\u602a\u7684\u5730\u65b9\uff1a\u4e3a\u4ec0\u4e48\u4f1a\u6709\u50cf\u201cEventsLost\u201d\u548c\u201cBuffersWritten\u201d\u8fd9\u6837\u7684\u6210\u5458\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\uff0cMicrosoft\u6ca1\u6709\u4e3a\u60a8\u53ef\u80fd\u5bf9\u8ddf\u8e2a\u6267\u884c\u7684\u4e0d\u540c\u64cd\u4f5c\u521b\u5efa\u4e0d\u540c\u7684\u7ed3\u6784\uff0c\u800c\u662f\u5c06API\u51fd\u6570\u5206\u7ec4\u5230\u51e0\u4e2a\u7ec4\u4e2d\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7ec4\u4e2d\u7684\u6240\u6709\u51fd\u6570\u5171\u4eab\u5176\u53c2\u6570\u7684\u4e00\u4e2a\u5408\u5e76\u7ed3\u6784\u3002\u56e0\u6b64\uff0c\u7528\u6237\u5fc5\u987b\u5b8c\u5168\u4f9d\u8d56\u4e8e\u6bcf\u4e2aAPI\u7684MSDN\u6587\u6863\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u67e5\u770b\u51fd\u6570\u7684\u53c2\u6570\u6765\u6e05\u695a\u5730\u4e86\u89e3\u51fd\u6570\u7684\u5185\u5bb9\uff0c\u5e76\u5e0c\u671b\u5b83\u6b63\u786e\u5730\u679a\u4e3e\u6bcf\u4e2a\u8c03\u7528\u4f7f\u7528\u7684\u5de8\u578b\u53c2\u6570\u7ed3\u6784\u7684\u54ea\u4e9b\u6210\u5458\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u6210\u5458\u662f\u8fdb\u5165\u51fd\u6570\u8fd8\u662f\u9000\u51fa\u51fd\u6570\u3002\u5f53\u7136\uff0c\u56e0\u4e3a\u5b83\u6709\u5f88\u591a\u4e0d\u540c\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u800c\u4e14\u8003\u8651\u5230\u672a\u6765API\u4e5f\u53ef\u80fd\u4f7f\u7528\u5b83\uff0c\u5fae\u8f6f\u8981\u6c42\u60a8\u5728\u4f7f\u7528\u5b83\u4e4b\u524d\u5c06\u8fd9\u4e2a\u5de8\u5927\u7684\u91ce\u517d\u6e05\u9664\u4e3a\u96f6\uff1a\n\u5bf9\u4e8eStartTrace()\uff0c\u5982\u679c\u6211\u4eec\u53ea\u60f3\u76f4\u63a5\u53d6\u56de\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\uff0c\u5219\u9700\u8981\u586b\u5199\u4e00\u4e9b\u6210\u5458\u3002\u8fd9\u4e24\u70b9\u6709\u4e00\u5b9a\u7684\u9053\u7406\uff1a\nEnableFlags\u8bf4\u660e\u4e86\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u3002\u6211\u4eec\u60f3\u8981\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u6240\u4ee5\u6211\u4eec\u8bbe\u7f6e\u4e86\u8be5\u6807\u5fd7\u3002\u73b0\u5728\uff0c\u5f53\u4f60\u6709\u8d85\u8fc732\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\u6765\u81ea\u4e00\u5bb6\u4f9b\u5e94\u5546\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u6211\u731c\u4ed6\u4eec\u5e76\u4e0d\u7279\u522b\u5173\u5fc3\u8fd9\u79cd\u53ef\u80fd\u6027\u3002\u662f\u7684\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5728\u6211\u7684\u63d0\u6848\u4e2d\u4f7f\u7528\u679a\u4e3e\u548c\u51fd\u6570\u8c03\u7528\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u652f\u630140\u4ebf\u4e2a\u4e8b\u4ef6\u7c7b\u578b\uff0c\u4f46\u662f\uff0c\u563f\uff0c\u201c32\u4e2a\u4e8b\u4ef6\u7c7b\u578b\u5bf9\u6bcf\u4e2a\u4eba\u6765\u8bf4\u90fd\u5e94\u8be5\u8db3\u591f\u4e86\u201d\uff0c\u6240\u4ee5Microsoft\u4f7f\u7528\u4e8632\u4f4d\u6807\u5fd7\u5b57\u6bb5\u3002\u8fd9\u4e0d\u662f\u4ec0\u4e48\u5927\u4e8b\uff0c\u4f46\u8fd9\u7edd\u5bf9\u662f\u4e00\u79cd\u77ed\u671f\u601d\u7ef4\uff0c\u4f1a\u5bfc\u81f4\u4e0d\u5fc5\u8981\u7684\u91cd\u590d\u51fd\u6570\uff0c\u5728\u5b83\u4eec\u7684\u540d\u79f0\u540e\u9762\u9644\u52a0\u201cEx\u201d\u3002LogFileMode\u53ea\u8bf4\u660e\u6211\u4eec\u662f\u5426\u5e0c\u671b\u76f4\u63a5\u83b7\u53d6\u4e8b\u4ef6\uff0c\u6216\u8005\u662f\u5426\u53ea\u5e0c\u671b\u5185\u6838\u5c06\u5b83\u4eec\u5199\u5165\u78c1\u76d8\u3002\u56e0\u4e3a\u5b83\u4eec\u662f\u5982\u6b64\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6211\u4f1a\u628a\u8fd9\u4e24\u4ef6\u4e8b\u5206\u89e3\u6210\u4e0d\u540c\u7684\u51fd\u6570\u8c03\u7528\uff0c\u4f46\u662f\uff0c\u563f\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u7ed3\u6784\u6765\u5904\u7406\u6240\u6709\u7684\u4e8b\u60c5\uff0c\u8fd8\u4e0d\u5982\u628a\u5b83\u4eec\u90fd\u6254\u8fdb\u53bb\u3002\u8fd9\u4e2a\u9886\u57df\u7684\u60c5\u51b5\u53d8\u5f97\u6709\u70b9\u5947\u602a\u4e86\uff1a\n\u6839\u636e\u6587\u6863\uff0c\u8fd9\u662f\u552f\u4e00\u5141\u8bb8\u60a8\u62e5\u6709\u7684\u503c\u3002\u6240\u4ee5\u5bf9\u4f60\u6765\u8bf4\uff0c\u8fd9\u53ea\u662f\u4e00\u9879\u5fd9\u788c\u7684\u5de5\u4f5c\u3002\u518d\u8bf4\u4e00\u6b21\uff0c\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u56e0\u4e3a\u4e5f\u8bb8\u4ed6\u4eec\u6b63\u8bd5\u56fe\u8ba1\u5212\u672a\u6765\u7684\u6269\u5f20\u6216\u5176\u4ed6\u4ec0\u4e48(\u4e0a\u5e1d\u4fdd\u4f51\u6211\u4eec)\u3002\u4f46\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u5df2\u7ecf\u5f97\u5230\u4e86\u4ee4\u4eba\u8ba8\u538c\u7684\u6570\u636e\u8026\u5408\uff0c\u5176\u4e2d\u51fd\u6570\u8c03\u7528\u548c\u7ed3\u6784\u5185\u5bb9\u5b9e\u9645\u4e0a\u662f\u5197\u4f59\u7684\u3002\u5f53\u6211\u4eec\u6765\u5230\u8fd9\u4e00\u9886\u57df\u65f6\uff0c\u60c5\u51b5\u7ee7\u7eed\u6076\u5316\uff1a\n\u90a3\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u55ef\uff0c\u9690\u6666\u547d\u540d\u7684\u201cClientContext\u201d\u5b9e\u9645\u4e0a\u6307\u7684\u662f\u60a8\u5e0c\u671b\u4e8b\u4ef6\u5177\u6709\u7684\u65f6\u95f4\u6233\u7c7b\u578b\u3002\u201cTimestampType\u201d\u53ef\u80fd\u4f1a\u66f4\u5177\u63cf\u8ff0\u6027\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\u3002\u771f\u6b63\u6709\u8da3\u7684\u662f\u4f4d\u4e8e\u53f3\u4fa7\u7684\u8d64\u88f8\u88f8\u7684\u201c1\u201d\u503c\u3002\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u4ee5\u5c06ClientContext\u8bbe\u7f6e\u4e3a\u4e00\u7ec4\u679a\u4e3e\u503c\uff0c\u4f46\u662fMicrosoft\u4ece\u672a\u4e3a\u5b83\u4eec\u6307\u5b9a\u7b26\u53f7\u540d\u79f0\u3002\u56e0\u6b64\uff0c\u60a8\u53ea\u9700\u9605\u8bfb\u6587\u6863\u5e76\u8bb0\u4f4f\uff0c1\u8868\u793a\u65f6\u95f4\u6233\u6765\u81eaQueryPerformanceCounter\uff0c2\u8868\u793a\u201c\u7cfb\u7edf\u65f6\u95f4\u201d\uff0c3\u8868\u793aCPU\u5468\u671f\u8ba1\u6570\u3002\u5982\u679c\u4e0d\u660e\u663e\uff0c\u516c\u5171API\u6c38\u8fdc\u4e0d\u5e94\u8be5\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\u6709\u5f88\u591a\u539f\u56e0\u3002\u5728\u5185\u90e8\uff0c\u6211\u5076\u5c14\u4f1a\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u5728\u7d22\u5f15\u65b9\u6848\u4e2d\uff0c\u5f53\u672c\u5730\u4ee3\u7801\u53ea\u60f3\u4f7f\u7528-1\u548c-2\u6765\u5904\u7406\u67d0\u79cd\u590d\u6742\u7684\u7279\u6b8a\u60c5\u51b5\u65f6\u3002\u4f46\u662f\u5bf9\u4e8e\u63d0\u4f9b\u7ed9\u6570\u767e\u4e07\u5f00\u53d1\u4eba\u5458\u7684API\uff0c\u60a8\u603b\u662f\u5e0c\u671b\u5b9a\u4e49\u60a8\u7684\u5e38\u91cf\u3002\u9996\u5148\uff0c\u5b83\u4f7f\u4ee3\u7801\u5177\u6709\u53ef\u8bfb\u6027\u3002\u6ca1\u6709\u4eba\u77e5\u9053\u201c1\u201d\u7684ClientContext\u662f\u4ec0\u4e48\uff0c\u4f46\u662fUSE_QUERY_PERFORMANCE_COUNTER_TIMESTAMPS\u7684ClientContext\u4f1a\u975e\u5e38\u6e05\u695a\u3002\u5176\u6b21\uff0c\u5b83\u4f7f\u4ee3\u7801\u53ef\u641c\u7d22\u3002\u6ca1\u4eba\u80fd\u628a\u7a7a\u8c03\u5f04\u6210\u7070\u767d\u8272\u7684\n\u56e0\u6b64\uff0c\u73b0\u5728\u60a8\u5fc5\u987b\u5c0f\u5fc3\u5728\u54ea\u91cc\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u53ef\u80fd\u662f\u5728GUID\u6240\u5728\u7684\u9879\u76ee\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u5f15\u7528\u5b83\u4eec\uff0c\u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u65e0\u7a3d\u4e4b\u8c08\uff0c\u8fd9\u6837\u60a8\u5c31\u4e0d\u4f1a\u505a\u4e24\u6b21\u3002\u4e0d\u8fc7\uff0c\u4e0d\u7ba1\u600e\u6837\uff0c\u6211\u4eec\u90fd\u5feb\u586b\u5b8c\u7ed3\u6784\u4e86\u3002\u6211\u4eec\u6240\u8981\u505a\u7684\u5c31\u662f\u5904\u7406SessionName\u53c2\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u9012\uff0c\u5bf9\u5417\uff1f\u65e2\u7136\u8fd9\u662f\u4f1a\u8bae\u7684\u540d\u79f0\uff0c\u6211\u60f3\u4e5f\u8bb8\u5c31\u8fd9\u4e48\u505a\u5427\uff1a\n\u56e0\u4e3a\u90a3\u4f1a\u662f\u4e2a\u5f88\u68d2\u7684\u4f1a\u573a\u540d\u5b57\uff0c\u4f60\u4e0d\u89c9\u5f97\u5417\uff1f\u4f46\u53ef\u60dc\u7684\u662f\uff0c\u4e8b\u60c5\u4e0d\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\u3002\u7ed3\u679c\u662f\uff0c\u5373\u4f7f\u60a8\u5df2\u7ecf\u5728SessionProperties\u4e2d\u4f20\u9012\u4e86\u6307\u5b9a\u5185\u6838\u662f\u4e8b\u4ef6\u6e90\u7684GUID\uff0c\u4e5f\u5fc5\u987b\u4f20\u9012\u9884\u5b9a\u4e49\u7684\u5e38\u91cfKERNEL_LOGER_NAME\u4f5c\u4e3a\u4f1a\u8bdd\u540d\u79f0\u3002\u4e3a\u4ec0\u4e48\uff1f\u55ef\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5c0f\u5c0f\u7684\u79d8\u5bc6\u60ca\u559c\uff0c\u6211\u7559\u70b9\u94b1\u7ed9\u4f60\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u54c1\u5c1d\u5230\u8fd9\u4e00\u5207\u7684\u60ac\u5ff5\u4e86\u3002\u597d\u7684\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5f00\u59cb\u5427\uff1a\n\u770b\u8d77\u6765\u4e0d\u9519\uff0c\u5bf9\u5427\uff1f\u4e0d\u5bf9\u3002\u7ed3\u679c\u8868\u660e\uff0c\u867d\u7136SessionName\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2a\u201c\u65b9\u4fbf\u201d\u7279\u6027\u3002\u5b9e\u9645\u4e0a\uff0cSessionName\u9700\u8981\u76f4\u63a5\u5d4c\u5165\u5230SessionProperties\u4e2d\uff0c\u4f46\u662f\u56e0\u4e3aMicrosoft\u4e0d\u60f3\u9650\u5236\u540d\u79f0\u7684\u6700\u5927\u957f\u5ea6\uff0c\u6240\u4ee5\u4ed6\u4eec\u51b3\u5b9a\u76f4\u63a5\u5c06\u5176\u6253\u5305\u5230EVENT_TRACE_PROPERTIES\u7ed3\u6784\u4e4b\u540e\u3002\u6240\u4ee5\u8bf4\u771f\u7684\uff0c\u4f60\u4e0d\u80fd\u8fd9\u4e48\u505a\uff1a\n\u662f\u7684\uff0c\u6ca1\u9519\uff0cWindows API\u7684\u4e8b\u4ef6\u8ddf\u8e2a\u7684\u6bcf\u4e2a\u7528\u6237\u90fd\u5fc5\u987b\u81ea\u5df1\u8fdb\u884c\u6253\u5305\u7ed3\u6784\u683c\u5f0f\u7684\u7b97\u6cd5\u548c\u5e03\u5c40\u3002\u6211\u5b8c\u5168\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u540d\u79f0\u5fc5\u987b\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5e0c\u671b\u6bcf\u4e2a\u4eba\u90fd\u8fd9\u6837\u505a\uff0c\u60a8\u80af\u5b9a\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e2a\u5b9e\u7528\u7a0b\u5e8f\u5b8f\u6216\u51fd\u6570\u6765\u4e3a\u7528\u6237\u505a\u6b63\u786e\u7684\u4e8b\u60c5\uff0c\u5e76\u4f7f\u4ed6\u4eec\u4e0d\u9700\u8981\u7406\u89e3\u60a8\u5947\u602a\u7684\u6570\u636e\u6253\u5305\u9700\u6c42\u3002\u4e0d\u8fc7\uff0c\u563f\uff0c\u81f3\u5c11\u4f60\u4e0d\u7528\u81ea\u5df1\u628a\u540d\u5b57\u6284\u8fdb\u53bb\uff01Microsoft\u5bf9\u6b64API\u91c7\u7528\u7684\u7ea6\u5b9a\u662fStartTrace()\u51fd\u6570\u4f1a\u4e3a\u60a8\u5c06\u540d\u79f0\u590d\u5236\u5230\u7ed3\u6784\u4e2d\uff0c\u56e0\u4e3a\u6bd5\u7adf\u5b83\u662f\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7684\u3002\u55ef\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u59ff\u6001\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u594f\u6548\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f3a\u5236\u4f1a\u8bdd\u540d\u79f0\u4e3aKERNEL_LOGGER_NAME\u5bf9\u4e8eGUID\u6765\u8bf4\u5e76\u4e0d\u662f\u591a\u4f59\u7684\uff0c\u8fd9\u5c31\u662f\u6211\u63d0\u5230\u7684\u79d8\u5bc6\u60ca\u559c\u3002\u5b83\u5fc5\u987b\u662fKERNEL_LOGER_NAME\u7684\u771f\u6b63\u539f\u56e0\u662f\u56e0\u4e3aWindows\u53ea\u5141\u8bb8\u60a8\u5728\u7cfb\u7edf\u4e2d\u6709\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u5373\u4eceSystemTraceControlGuid\u8bfb\u53d6\u4e8b\u4ef6\u7684\u603b\u4f1a\u8bdd\u3002\u5176\u4ed6GUID\u53ef\u4ee5\u7531\u591a\u4e2a\u4f1a\u8bdd\u8bfb\u53d6\uff0c\u4f46\u4e0d\u80fd\u7531SystemTraceControlGuid\u8bfb\u53d6\u3002\u56e0\u6b64\uff0c\u5f53\u60a8\u4f20\u9012kernel_logger_name\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u8bf4\u60a8\u60f3\u8981\u4e00\u4e2a\u552f\u4e00\u7684\u4f1a\u8bdd\uff0c\u8be5\u4f1a\u8bdd\u53ef\u4ee5\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u5b58\u5728\u4e8e\u7cfb\u7edf\u4e2d\uff0cGUID\u4e3aSystemTraceControlGuid\u3002\u5982\u679c\u5176\u4ed6\u4eba\u5df2\u7ecf\u542f\u52a8\u8be5\u4f1a\u8bdd\uff0c\u5219\u60a8\u542f\u52a8\u8be5\u4f1a\u8bdd\u7684\u5c1d\u8bd5\u5c06\u5931\u8d25\u3002\u5b83\u4f1a\u53d8\u5f97\u66f4\u597d\u3002\u8be5\u4f1a\u8bdd\u5bf9\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u662f\u5168\u5c40\u7684\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5728\u542f\u52a8\u5b83\u7684\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u81ea\u52a8\u5173\u95ed\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7f16\u5199\u4e86\u8c03\u7528StartTrace()\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u8be5\u4ee3\u7801\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u5b58\u5728\u9519\u8bef\uff0c\u5e76\u4e14\u60a8\u7684\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5219kernel_logger_name\u4f1a\u8bdd\u4ecd\u5728\u8fd0\u884c\uff01\u5f53\u60a8\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\u65f6(\u53ef\u80fd\u5728\u4fee\u590d\u4e86\u9519\u8bef\u4e4b\u540e)\uff0c\u5c1d\u8bd5StartTrace()\u5c06\u5931\u8d25\uff0c\u5e76\u663e\u793aERROR_ALIGHY_EXISTS\u3002\u56e0\u6b64\uff0c\u57fa\u672c\u4e0a\uff0cStartTrace()(\u5b83\u662f\u5e2e\u52a9\u60a8\u5c06SessionName\u590d\u5236\u5230\u7ed3\u6784\u4e2d\u7684\u8c03\u7528)\u5f88\u5c11\u662f\u60a8\u8fdb\u884c\u7684\u7b2c\u4e00\u4e2a\u8c03\u7528\u3002\u4f60\u66f4\u6709\u53ef\u80fd\u505a\u7684\u662f\u628a\u8fd9\u4e2a\u53eb\u505a\uff1a\n\u8fd9\u5c06\u5173\u95ed\u4efb\u4f55\u73b0\u6709\u4f1a\u8bdd\uff0c\u4ee5\u4fbf\u60a8\u540e\u7eed\u5bf9StartTrace()\u7684\u8c03\u7528\u5c06\u6210\u529f\u3002\u5f53\u7136\uff0cControlTrace()\u4e0d\u50cfStartTrace()\u90a3\u6837\u590d\u5236\u540d\u79f0\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5b9e\u8df5\u4e2d\u60a8\u5fc5\u987b\u81ea\u5df1\u505a\uff0c\u56e0\u4e3aStartTrace()\u662f\u5728ControlTrace()\u4e4b\u540e\u8c03\u7528\u7684\uff01\n\u8fd9\u5f88\u75af\u72c2\uff0c\u4f46\u8fd9\u4e00\u5207\u7684\u540e\u679c\u66f4\u75af\u72c2\u3002\u5982\u679c\u60a8\u60f3\u4e00\u60f3\u53ea\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u8ddf\u8e2a\u8fde\u63a5\u5230\u5185\u6838\u8bb0\u5f55\u5668\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u60a8\u5f88\u5feb\u5c31\u4f1a\u610f\u8bc6\u5230\u5176\u4e2d\u5b58\u5728\u5b89\u5168\u95ee\u9898\u3002\u5982\u679c\u5176\u4ed6\u8fdb\u7a0b\u8c03\u7528\u4e86StartTrace()\uff0c\u5e76\u4e14\u4ed6\u4eec\u6b63\u5728\u4f7f\u7528\u5185\u6838\u8bb0\u5f55\u5668\uff0c\u90a3\u4e48\u7cfb\u7edf\u5982\u4f55\u77e5\u9053\u6211\u4eec\u7684\u8fdb\u7a0b\u53ef\u4ee5\u8fdb\u5165\u5e76\u505c\u6b62\u8be5\u8ddf\u8e2a\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u7684\u8bbe\u7f6e\u91cd\u65b0\u542f\u52a8\u5b83\u5462\uff1f\u53ef\u7b11\u7684\u662f\uff0c\u7b54\u6848\u662f\u5b83\u4e0d\u4f1a\uff01\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u4e00\u573a\u5b8c\u5168\u514d\u8d39\u7684\u6bd4\u8d5b\uff0c\u613f\u6700\u597d\u7684\u8fc7\u7a0b\u83b7\u80dc\uff01\u6700\u540e\u8c03\u7528StartTrace()\u7684\u4eba\u5c31\u662f\u914d\u7f6e\u8ddf\u8e2a\u7684\u4eba\u3002\u55ef\uff0c\u4e0d\u5b8c\u5168\u662f\u3002\u663e\u7136\uff0c\u60a8\u4e0d\u5e0c\u671b\u4efb\u4f55\u65e7\u8fdb\u7a0b\u90fd\u80fd\u591f\u4ece\u5176\u4ed6\u8fdb\u7a0b\u7a83\u53d6\u5185\u6838\u8bb0\u5f55\u5668\u3002\u56e0\u6b64\uff0c\u5fae\u8f6f\u51b3\u5b9a\u6700\u597d\u7684\u505a\u6cd5\u662f\u5b8c\u5168\u7981\u6b62\u6240\u6709\u8fdb\u7a0b\u8bbf\u95ee\u5185\u6838\u8bb0\u5f55\u5668\uff0c\u9664\u975e\u5b83\u4eec\u88ab\u7279\u522b\u6388\u4e88\u7ba1\u7406\u5458\u7279\u6743\u3002\u662f\u7684\uff0c\u6211\u4e0d\u662f\u5728\u5938\u5927\u5176\u8bcd\u3002\u5982\u679c\u60a8\u53ea\u662f\u60f3\u63a5\u6536\u4e0a\u4e0b\u6587\u5207\u6362\u5217\u8868\uff0c\u5373\u4f7f\u53ea\u9488\u5bf9\u60a8\u7684\u8fdb\u7a0b\uff0c\u5b83\u4e5f\u5fc5\u987b\u4ee5\u5b8c\u5168\u7ba1\u7406\u5458\u6743\u9650\u8fd0\u884c", "note_en": "\u201cI might be a little late for a question about your recent post, but just in case I\u2019m not: Do you have any strategies for, or stories about, dealing with an external library that you couldn\u2019t get rid of that violated some (or all) of these API design guidelines? It\u2019s a vague question, but I\u2019m really just asking about any past experience as a user of an API that really sticks out in your mind.\u201d\n  This reminded me that I\u2019d always wanted to go write down the steps necessary to use a bad API, just to highlight how terrible it can be for the programmer. I don\u2019t think people who make APIs really appreciate how important it is to get them right, and how much unnecessary work their mistakes can cause for hundreds, thousands, sometimes even millions of other programmers. So I felt like it was important to spend an article walking through an API and showing just how much unnecessary work an API can manufacture. It\u2019d probably be a nice column on its own \u00a0\u2014\u00a0 a weekly dissection of a bad API. But since I don\u2019t have time for something like that, if I was only going to dissect one API, the most important question was, which API should I choose?\n  It\u2019s a great time in the history of computing to be writing an article about bad APIs (which is another way of saying it\u2019s a terrible time to actually have to program for a living). There\u2019s so many bad APIs out there, I could have picked one at random and been very likely to find enough problems to fill a 3000-word article. But if I was only going to pick apart one specific operation in one API, it seemed only right to try to pick the worst API I\u2019d ever actually used. Now there are a lot of APIs out there that routinely turn in top-ranking efforts for the \u201cworst API\u201d leaderboard. CSS, for example, can probably claim half the spots on the top 10 for any year in which there\u2019s a new version. DirectShow, while it was still a going concern, certainly dominated the rankings for its era. And in the modern age, newcomers like the Android SDK are showing real potential with development environments so convoluted that the quality of the APIs when called from actual C++ code are the last thing you\u2019ll worry about when trying to ship something with them. But when I thought long and hard about who the all-time heavyweight bad API champion was, there was one clear winner: Event Tracing for Windows. Event Tracing for Windows is an API that does something very simple: it allows any component of the system (including end-user software) to announce \u201cevents\u201d which any other component can then \u201cconsume\u201d. It is a logging system, and it is used to record performance and debugging information by everything from the kernel upwards. Now, normally, a game developer would have no reason to use the Event Tracing for Windows API directly. You can use tools like PerfMon to view logged information about your game, like how much working set it was using or how much disk I/O it did. But there is one specific thing that directly accessing Event Tracing gives you that you can\u2019t get anywhere else: context switch timing. Yes, if you have any relatively recent version of Windows (like 7 or 8), the kernel will log all thread context switches, and using the CPU timestamp included in those events, you can actually correlate them with your own in-game profiling. This is incredibly useful information to have, and is the kind of thing you often only get from console hardware. It\u2019s the reason tools like  RAD\u2019s  Telemetry can show you when your running threads were interrupted and had to wait for system threads to do work, something that can often be critical to debugging weird performance problems. So far, the API is sounding pretty good. I mean, context switch timing is very vaulable information, so even if the API was a little janky, it\u2019d still be pretty great, right? Right?\n  Before we take a look at the actual Event Tracing for Windows API, I want to walk the walk here and do exactly what I said to do in last week\u2019s lecture: write the usage code first. Whenever you evaluate an API, or create a new one, you must always, always, ALWAYS start by writing some code as if you were a user trying to do the thing that the API is supposed to do. This is the only way to get a nice, clean perspective on how the API would work if it had no constraints on it whatsoever. If it was \u201cmagical\u201d, as it were. And then, once you have that, you can move forward and start thinking about the practical problems, and what the best way is for you to get to something implementable. So, if I were a programmer, with no knowledge of the Event Tracing for Windows API, how would I want to get a list of context switches? Well, two methods come to mind. The most straightforward approach would be something like this:\n    That\u2019s one way to do it. Very simple, trivial to understand, pretty hard to mess up. Someone stepping into this with the debugger would be able to see exactly what was going on, and you\u2019d be able to tell pretty easily if you\u2019d done something wrong. However, I could imagine a scenario where performance-critical code would not want to pay the cost of the copy from the kernel\u2019s buffer to your buffer, which this API requires (ETWGetEvents must copy the events from some OS-internal buffer, since it has to get them from somewhere). So a slightly more complex version would be to get some mapped memory back from the API that you use as a reading buffer:\n  All I have done here is changed the return mechanism from a copy to a ranged pointer. In ETWBeginTrace, the user now passes in the number of events they want to buffer at maximum, and the kernel reserves room in the user\u2019s address space for that many events. It then writes directly into that memory if it can, avoiding unnecessary copies. When the user calls ETWBeginEventRead(), a begin and end pointer are returned that span some part of the event memory. Since it will be treated as a circular buffer, the caller is expected to loop on in case there are two ranges (a \u201chead\u201d and \u201ctail\u201d) that need to be returned. I included an end call, since certain methods of implementation might require the kernel to know what part of the buffer the user is looking at, so it can avoid writing into memory that is actively being read. I don\u2019t really know that this sort of thing would be necessary, but if you wanted to cover your bases and give the kernel the maximum implementation flexibility, this definitely supports more implementations than the ETWGetEvents() version. The API would be updated like this:\n  If one were so inclined, one could even support both retrieval methods with the same API just by still allowing the ETWGetEvents() call. Also, to complete the API with some error reporting, it might also be nice to have something like:\n  to allow you to check after each ETWGetEvents() whether too many events had occurred since the last check, and the kernel was forced to throw some away. To each his own, but I suspect that most of the programmers I know wouldn\u2019t have a lot of complaints with my API proposal as written. Everyone has their own taste, so I\u2019m sure they would each tweak something to be more to their liking, but I doubt anyone would say it was horrible. It\u2019s all pretty straightforward, and I suspect most programmers could integrate it into their code trivially without really thinking too much about it. The reason the API is so straightforward is not because I employed a sophisticated set of API design practices to finesse my way to a good API. Quite the contrary. The API is simple because the problem it\u2019s solving is trivial. It\u2019s essentially the simplest API problem you can have in a system: how to move data from one place to another. It\u2019s a glorified memcpy(). But it is precisely the simplicity of the problem that allows the Event Tracing for Windows API to really shine. Even though all it has to do is move memory from one place to another, it manages to involve almost every kind of complexity you can see in an API.\n  I don\u2019t know how anyone is supposed to actually learn how to use the Event Tracing for Windows API. Maybe there are good examples floating around that I just never found. I had to piece the usage code together over the course of many hours of experimentation, pulling from various snippets of documentation. Each time I figured out another step of the process I thought, \u201cWait, seriously?\u201d And each time Microsoft implicitly replied, \u201cSeriously.\u201d Having me tell you how to call the API does take some away from the sheer awe of the experience, so I will say, if you want the full monty, stop reading now and go try to get context switch timestamps on your own. I can assure you it will be hours of fun and excitement. Those who\u2019d rather save time at the expense of a day full of facepalm moments, read on. OK, here we go. The equivalent to my proposed ETWBeginTrace() is Microsoft\u2019s StartTrace() call. At first glance, it seems innocent enough:\n  However, when you look at what you need to pass in for the Properties parameter, things start to get a little hairy. The EVENT_ TRACE_ PROPERTIES structure is defined by Windows to look like this:\n    A cursory glance at this mass of data reveals a bit of oddity: why are there members like \u201cEventsLost\u201d and \u201cBuffersWritten\u201d? The reason is because, instead of making different structures for the different operations you might do on a trace, Microsoft grouped the API functions into a few groups, and all the functions in each group share one amalgamated structure for their parameters. So instead of the user getting a clear idea of what goes into and comes out of a function by looking at its parameters, they must instead rely entirely on the MSDN documentation for each API, and hope that it correctly enumerates which members of the giant parameter structure are used for each call, and whether those members go into or come out of the function. Of course, because there\u2019s so many different ways it can be used, and given the possibility of future APIs using it, too, Microsoft requires that you clear this gigantic beast to zero before you use it:\n  For StartTrace(), if we just want to get the data back directly and aren\u2019t trying to log to a file, we need to fill out some members. These two make some sense:\n  The EnableFlags says what we wanted to get. We want context switches, so we set that flag. Now, what happens when you have more than 32 types of events coming from a single provider, I don\u2019t know, but I guess they weren\u2019t particularly concerned with that eventuality. I was, which is why I went with the enum-and-function-call approach in my proposal, since it supports four billion event types, but hey, \u201c32 event types should be enough for everyone\u201d, so Microsoft went with a 32-bit flags field. Not a huge deal, but this is definitely the kind of short-term thinking that leads to things like unnecessarily duplicated functions with \u201cEx\u201d appended to their names. The LogFileMode just says whether we wanted to get events back directly, or whether we just want the kernel to write them to disk. Since they are such disparate operations, I would have broken those two things up into different function calls, but, hey, we\u2019ve already got one big giant structure for everything, might as well throw it all in there. Things get a little weirder with this field:\n  According to the documentation, that\u2019s the only value you\u2019re allowed to have. So it\u2019s just busywork for you to do. Again, not a huge deal, because maybe they\u2019re trying to plan for future expansion or something (heaven help us). But we are already getting nasty data coupling here, where the function call and the structure contents are effectively redundant. Things continue to sour as we come to this field:\n  What does that mean? Well, the cryptically named \u201cClientContext\u201d actually refers to the type of timestamp you want your events to have. \u201cTimestampType\u201d might have been a little bit more descriptive, but whatever. The real fun is the bare \u201c1\u201d value that\u2019s just sitting on the right. It turns out that there\u2019s actually a set of enumerated values to which you can set ClientContext, but Microsoft didn\u2019t ever give them symbolic names. So you\u2019re just supposed to read the documentation and remember that 1 means the timestamps come from QueryPerformanceCounter, 2 means the \u201csystem time\u201d, and 3 means the CPU cycle count. In case it is not obvious, there are a number of reasons why public APIs should never do something like this. Internally, I will occasionally do something like this, in situations where a local piece of code just wants to, say, use -1 and -2 for some kind of convoluted special cases in an indexing scheme. But for an API that ships to literally millions of developers, you always want to define your constants. First, it makes the code readable. Nobody knows what a ClientContext of \u201c1\u201d is, but a ClientContext of USE_ QUERY_ PERFORMANCE_ COUNTER_ TIMESTAMPS would be crystal clear. Second, it makes the code searchable. Nobody can grep a codebase for \u201c1\u201d, but they can trivially grep it for USE_ QUERY_ PERFORMANCE_ COUNTER_ TIMESTAMPS. And although you might think \u201cwell, no big deal, I\u2019ll just grep for ClientContext = 1\u201d, remember that more complex usage of this API could involve variables, like \u201c\u2026ClientContext = TimestampType;\u201d. Third, it makes the code not compile on future versions of the SDK where things have changed. For example, if the platform maintainers decided to deprecate the use of USE_ QUERY_ PERFORMANCE_ COUNTER_ TIMESTAMPS, they could remove the #define for it and make it be USE_ QUERY_ PERFORMANCE_ COUNTER_ TIMESTAMPS_ DEPRECATED. Now all the old code that uses that value will get a compile error on the new SDK, and the programmer will go look at the new documentation and see what they should be using instead. Etc., etc., etc. Perhaps the most annoying field we have to fill out is this one:\n  The GUID says who you\u2019re trying to trace. In our case, we\u2019re trying to get data from the kernel logger, and SystemTraceControlGuid is the globally defined GUID that refers to this service. It could have been named better, sure, but that\u2019s a minor issue compared to the fact that, if you were to actually try to compile this line of code, you\u2019d find that SystemTraceControlGuid was an undefined symbol at link time. This happens, of course, because the GUIDs are so large that Microsoft apparently couldn\u2019t figure out any way to embed them in the headers (I can think of several possible ways, but I guess they didn\u2019t like any of them), so instead they force you to pick one file in your project where the Windows headers will inject the actual GUID definitions. To signal that you want this to happen, you have to do something like this:\n  So now you have to be careful about where you do this, perhaps by making a new file in your project where the GUIDs will live so everyone can reference them, or some other such nonsense, so you don\u2019t ever do it twice. But whatever, we\u2019re almost done filling out the structure. All we have to do is deal with the SessionName parameter, which we should be able to just pass as a string, right? Since it\u2019s the name of the session, I guess maybe just do:\n  Because that would be an awesome session name, don\u2019t you think? But alas, that is not the way things work. It turns out that, even though you already pass a GUID in the SessionProperties that specifies that the kernel is the source of the events, you must also pass the pre-defined constant KERNEL_ LOGGER_ NAME as the session name. Why? Well, it\u2019s because of a little secret surprise that I\u2019ll save for a bit, just so you can savor the suspense of it all. OK, so, here we go:\n  Looking good, right? Wrong. It turns out that, although the SessionName string is passed as the second parameter, that\u2019s really just a \u201cconvenience\u201d feature. Really, the SessionName is required to be embedded directly into the SessionProperties, but since Microsoft didn\u2019t want to limit the maximum length of the name, they decided to just go ahead and pack it in after the EVENT_ TRACE_ PROPERTIES structure. So really, you can\u2019t do this:\n    Yes, that\u2019s right, every user of the Event Tracing for Windows API has to do the arithmetic and layout of the packed structure format themselves. I have absolutely no idea why the name has to be bundled in this way, but surely if you wanted everyone to do this, you should have supplied a utility macro or function that would do the right thing for the user and keep them out of the business of understanding your weird data packing requirements. But hey, at least you don\u2019t have to copy the name in there yourself! The convention Microsoft adopted for this API was that the StartTrace() function will copy the name into the structure for you, since after all, it\u2019s passed as the second parameter. Well, it\u2019s a nice gesture, but it doesn\u2019t pan out in practice. It turns out that forcing the SessionName to be KERNEL_ LOGGER_ NAME wasn\u2019t superfluous with the GUID after all, and that is the secret surprise to which I alluded. The real reason that it has to be KERNEL_ LOGGER_ NAME is because Windows only allows you to have one session in the system \u00a0\u2014\u00a0 total \u00a0\u2014\u00a0 that reads events from the SystemTraceControlGuid. Other GUIDs can be read by multiple sessions, but not SystemTraceControlGuid. So really what is happening when you pass KERNEL_ LOGGER_ NAME is that you are saying you want the one unique session that can exist in the system at any given time with the GUID of SystemTraceControlGuid. If someone else already started that session, then your attempt to start it will fail. It gets better. The session is global to the operating system and doesn\u2019t automatically close on the termination of the process that started it. So if you write code that calls StartTrace(), but you have a bug in that code somewhere \u00a0\u2014\u00a0 anywhere \u00a0\u2014\u00a0 and your program crashes, the KERNEL_ LOGGER_ NAME session is still running! When you go to re-run your program, perhaps after fixing the bug, your attempt to StartTrace() will fail with ERROR_ ALREADY_ EXISTS. So, basically, StartTrace(), which is the call that helpfully copies the SessionName into the struct for you, is rarely the first call you would make anyway. What you\u2019re much more likely to do is call this:\n  This shuts down any existing session, so that your subsequent call to StartTrace() will succeed. But of course, ControlTrace() doesn\u2019t copy the name in like StartTrace() does, which means that, in practice, you have to do it yourself, since StartTrace() gets called after ControlTrace()!\n  It\u2019s crazy, but the ramifications of all this are crazier still. If you think about what it means to have only one possible trace that is connected to the kernel logger, you realize quickly that there are security issues at play. If some other process had called StartTrace(), and they were the ones that were using the kernel logger, how does the system know that it\u2019s OK for our process to come in and stop that trace so we can start it back up again with our settings? The answer, hilariously, is that it doesn\u2019t! In fact, it\u2019s a complete free-for-all \u00a0\u2014\u00a0 may the best process win! Whoever calls StartTrace() last, well, that\u2019s who gets to configure the trace. Well, not quite. Obviously, you don\u2019t want just any old process to be able to steal the kernel logger away from other processes. So Microsoft decided that the best course of action would be to simply prohibit all processes from accessing the kernel logger at all, unless they\u2019ve been specifically granted administrator privileges. That\u2019s right \u00a0\u2014\u00a0 I am not exaggerating. If you simply want to receive a list of the context switches, even if only for your process, it must be running with full administrator privileges. The whole right-click-run-as-administrator nine yards. If you don\u2019t, and you just run your process normally, your StartTrace will fail with insufficient privileges. (In theory, you may also be able to add your user to the \u201cPerformance Log Users\u201d group and avoid having to run the process as admi\n......", "posttime": "2020-06-12 22:33:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a7a\u6c14\u6c61\u67d3,worst,api", "title": "\u6709\u53f2\u4ee5\u6765\u6700\u5dee\u7684\u7a7a\u6c14\u6c61\u67d3\u6307\u6570(2014)", "title_en": "The Worst API Ever Made (2014)", "transed": 1, "url": "https://caseymuratori.com/blog_0025", "via": "", "real_tags": ["\u7a7a\u6c14\u6c61\u67d3", "worst", "api"]}, {"category": "", "categoryclass": "", "imagename": "b4bb9ed7fcae84b6d56e120212e818c1.jpg", "infoid": 1006286, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u8d77\u8bc9\u4e66\u4e2d\u63cf\u8ff0\u7684IA\u4fb5\u6743\u7684\u5de8\u5927\u89c4\u6a21\uff0c\u4ee5\u53ca\u5176\u5ba3\u79f0\u7684\u8086\u610f\u6269\u5927\u975e\u6cd5\u5b9d\u85cf\u7684\u76ee\u6807\uff0c\u4f3c\u4e4e\u4f7f\u5176\u6210\u4e3a\u4e16\u754c\u4e0a\u5df2\u77e5\u7684\u6700\u5927\u7684\u56fe\u4e66\u76d7\u7248\u7f51\u7ad9\u4e4b\u4e00\u3002\u201d\nvitapix/E+/Getty Images\u3002\n\u4e92\u8054\u7f51\u6863\u6848\u9986\u7684\u56fd\u5bb6\u7d27\u6025\u56fe\u4e66\u9986\u5df2\u7ecf\u5efa\u6210\u3002\u8fd9\u5bb6\u975e\u8425\u5229\u6027\u7684\u6570\u5b57\u4fdd\u5b58\u5b58\u50a8\u5e93\u5f00\u59cb\u514d\u8d39\u63d0\u4f9b\u6570\u767e\u4e07\u672c\u7535\u5b50\u4e66\uff0c\u4ee5\u89e3\u51b3\u5927\u6d41\u884c\u671f\u95f4\u56fe\u4e66\u9986\u5173\u95ed\u7684\u95ee\u9898\u3002\u5728\u4f01\u9e45\u5170\u767b\u4e66\u5c4b(Penguin Random House)\u548c\u54c8\u73c0\u67ef\u6797\u65af(HarperCollins)\u7b49\u4e3b\u8981\u51fa\u7248\u5546\u7684\u8054\u5408\u8bc9\u8bbc\u4e0b\uff0c\u8fd9\u5bb6\u975e\u8425\u5229\u6027\u7684\u6570\u5b57\u4fdd\u5b58\u5b58\u50a8\u5e93\u5d29\u6e83\u4e86\u3002\u51fa\u7248\u5546\u8868\u793a\uff0c\u65e0\u507f\u51fa\u501f\u56fe\u4e66\u662f\u5927\u89c4\u6a21\u4fb5\u72af\u7248\u6743\u7684\u884c\u4e3a\u3002\u6570\u5b57\u56fe\u4e66\u9986\u5c06\u4e8e\u4e0b\u5468\u5173\u95ed\u3002\n\u56fe\u4e66\u6863\u6848\u9986\u6700\u521d\u53ea\u63a5\u53d7\u9080\u8bf7\uff0c\u4e00\u6b21\u53ea\u5141\u8bb8\u4e0b\u8f7d\u7ed9\u5b9a\u6587\u4ef6\u7684\u6709\u9650\u6b21\u6570\uff0c\u6bcf\u6b21\u79df\u8d41\u9650\u5236\u4e3a14\u5929\u3002\u4f46\u540e\u6765\u5927\u6d41\u884c\u6765\u88ad\uff0c\u56fe\u4e66\u9986\u5173\u95e8\u4e86\uff0c\u56e0\u6b64\u4e92\u8054\u7f51\u6863\u6848\u9986\u7684\u56de\u5e94\u662f\u8ba9\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u65e0\u9650\u5236\u5730\u8bbf\u95ee\u6240\u6709\u4e66\u7c4d\u3002\n\u5b83\u5c31\u50cf\u4e00\u4e2a\u56fe\u4e66\u9986\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u662f\u771f\u7684--\u6839\u672c\u95ee\u9898\u4e0d\u662f\u501f\u4e66--\u6bd5\u7adf\u90a3\u624d\u662f\u56fe\u4e66\u9986\u7684\u5de5\u4f5c\u3002\u751a\u81f3\u5728\u5927\u6d41\u884c\u4e4b\u524d\uff0c\u95ee\u9898\u5c31\u662f\u56fe\u4e66\u9986\u5411\u51fa\u7248\u5546\u652f\u4ed8\u7248\u7a0e\uff0c\u4ee5\u4fbf\u6309\u7167\u5546\u5b9a\u7684\u6761\u4ef6\u501f\u51fa\u4ed6\u4eec\u7684\u56fe\u4e66\uff0c\u800c\u4e92\u8054\u7f51\u6863\u6848\u9986\u5219\u4e0d\u652f\u4ed8\u4efb\u4f55\u8d39\u7528\u3002\u5b83\u624b\u52a8\u626b\u63cf\u56fe\u4e66\uff0c\u7136\u540e\u5f00\u59cb\u5411\u4efb\u4f55\u60f3\u8981\u4e0b\u8f7d\u7684\u4eba\u63d0\u4f9b\u56fe\u4e66\u3002\u867d\u7136\u521d\u8877\u53ef\u80fd\u662f\u597d\u7684\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u51fa\u7248\u5546\u5e76\u4e0d\u89c9\u5f97\u6177\u6168\u5230\u653e\u5f03\u5982\u6b64\u591a\u7684\u6536\u5165\uff0c\u5373\u4f7f\u5728\u6211\u4eec\u751f\u6d3b\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\u4e5f\u662f\u5982\u6b64\u3002\n\u7f8e\u56fd\u51fa\u7248\u5546\u534f\u4f1a(Association Of American Publisher)\u5728\u63d0\u8d77\u8bc9\u8bbc\u65f6\u8868\u793a\uff1a\u201cIA\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u4e66\u7c4d\uff0c\u5c06\u5b8c\u6574\u7684\u6570\u5b57\u6587\u4ef6\u53d1\u5e03\u5230\u5176\u7f51\u7ad9\u4e0a\uff0c\u5e76\u901a\u8fc7\u6ce8\u518c\u4e92\u8054\u7f51\u6863\u6848\u8d26\u6237\u6765\u8bf7\u6c42\u7528\u6237\u514d\u8d39\u8bbf\u95ee\u8fd9\u4e9b\u6587\u4ef6\u3002\u201d\u201c\u8d77\u8bc9\u4e66\u4e2d\u63cf\u8ff0\u7684IA\u4fb5\u6743\u7684\u5de8\u5927\u89c4\u6a21\uff0c\u4ee5\u53ca\u5176\u5ba3\u79f0\u7684\u8086\u610f\u6269\u5927\u975e\u6cd5\u5b9d\u85cf\u7684\u76ee\u6807\uff0c\u4f3c\u4e4e\u4f7f\u5176\u6210\u4e3a\u4e16\u754c\u4e0a\u5df2\u77e5\u7684\u6700\u5927\u7684\u56fe\u4e66\u76d7\u7248\u7f51\u7ad9\u4e4b\u4e00\u3002\u201d\n\u4e92\u8054\u7f51\u6863\u6848\u9986\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u662f\u5f00\u6e90\u6216\u516c\u5171\u9886\u57df\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u9700\u8981\u5411\u4efb\u4f55\u4eba\u4ed8\u8d39\uff0c\u4f46\u5b83\u4e5f\u8fa9\u79f0\uff0c\u5b83\u88ab\u6307\u5b9a\u4e3a\u6570\u5b57\u56fe\u4e66\u9986\uff0c\u4e3a\u5b83\u63d0\u4f9b\u4e86\u8fdb\u884c\u56fe\u4e66\u501f\u9605\u7684\u63a9\u62a4\u3002\u5b83\u80af\u5b9a\u5df2\u7ecf\u51b3\u5b9a\uff0c\u8fd9\u573a\u4e89\u8bba\u5c06\u5728\u6cd5\u5ead\u4e0a\u5927\u83b7\u5168\u80dc\u3002\n\u603b\u7684\u6765\u8bf4\uff0c\u4e92\u8054\u7f51\u6863\u6848\u9986\u4ecd\u7136\u5f88\u597d-\u4e92\u8054\u7f51\u6863\u6848\u9986\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u4f5c\u4e3a\u6570\u5b57\u4fdd\u5b58\u7684\u6863\u6848\u9986\uff0c\u4fdd\u5b58\u7740\u539f\u672c\u53ef\u80fd\u6d88\u5931\u5728\u4ee5\u592a\u4e2d\u7684\u5a92\u4f53\u526f\u672c\u3002\u5b83\u6700\u51fa\u540d\u7684\u662f\u5b83\u7684Wayback Machine\uff0c\u5b83\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u722c\u884c\uff0c\u5e76\u62cd\u6444\u7f51\u7ad9\u7684\u5feb\u7167\uff0c\u8fd9\u6837\u5373\u4f7f\u7f51\u7ad9\u4e0b\u7ebf\uff0c\u4eba\u4eec\u4e5f\u53ef\u4ee5\u91cd\u65b0\u8bbf\u95ee\u3002\u5b83\u8fd8\u5b58\u50a8\u89c6\u9891\u7684\u6570\u5b57\u526f\u672c\uff0c\u598220\u4e16\u7eaa90\u5e74\u4ee3MTV\u7684\u65e7VHS\u5f55\u97f3\u3002\n\u65e7\u7684\u5b9e\u4f53\u5a92\u4f53\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u8150\u70c2\uff0c\u7f51\u7ad9\u6240\u6709\u8005\u6700\u7ec8\u4f1a\u505c\u6b62\u652f\u4ed8\u6258\u7ba1\u8d39\u7528\uff0c\u6240\u4ee5\u4e92\u8054\u7f51\u6863\u6848\u9986\u63d0\u4f9b\u4e86\u5f88\u597d\u7684\u670d\u52a1\uff0c\u4fdd\u62a4\u521b\u610f\u4f5c\u54c1\u4e0d\u4f1a\u6c38\u8fdc\u6d88\u5931\u3002\u4f46\u662f\uff0c\u8981\u540c\u60c5\u8fd9\u91cc\u7684\u51fa\u7248\u5546\u4e5f\u4e0d\u96be\u3002\u56fe\u4e66\u51fa\u7248\u4e0d\u662f\u4e00\u4e2a\u6709\u5229\u53ef\u56fe\u7684\u884c\u4e1a\uff0c\u8fd9\u4e9b\u5929\u6765\uff0c\u4e0e\u90a3\u4e9b\u88ab\u64ad\u5ba2\u548c\u7535\u5b50\u7ade\u6280\u7b49\u65b0\u5a92\u4f53\u5f62\u5f0f\u5206\u5fc3\u7684\u4eba\u7ade\u4e89\u6ce8\u610f\u529b\u5c24\u5176\u56f0\u96be\u3002\n\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u7f8e\u56fd\u5404\u5730\u7684\u56fe\u4e66\u9986\u6b63\u5728\u6162\u6162\u91cd\u65b0\u5f00\u653e\uff0c\u56e0\u6b64\u4efb\u4f55\u4f9d\u8d56\u5b83\u4eec\u7684\u4eba\u90fd\u4e0d\u9700\u8981\u7b49\u5f85\u592a\u4e45\u3002\u4f60\u5df2\u7ecf\u7528\u7a0e\u7684\u5f62\u5f0f\u4ed8\u4e86\u90a3\u4e9b\u4e66\u7684\u94b1\uff0c\u4f60\u4e0d\u59a8\u8d81\u865a\u800c\u5165\u3002", "note_en": "\u201cThe sheer scale of IA\u2019s infringement described in the complaint \u2014 and its stated objective to enlarge its illegal trove with abandon \u2014 appear to make it one of the largest known book pirate sites in the world.\u201d\n vitapix/E+/Getty Images\n   The Internet Archive&#39;s National Emergency Library is  finished. The non-profit repository for digital preservation, which began offering millions of e-books for free to address the closure of libraries during the pandemic,  buckled under a joint lawsuit filed by major publishers including Penguin Random House and HarperCollins. Publishers said lending out books without compensation was &#34;mass copyright infringement.&#34; The digital library will close next week.\n The archive of books was initially invite-only and only allowed a given file to be downloaded a limited number of times at once, with each rental limited to 14 days. But then the pandemic hit and libraries closed, so the Internet Archive responded by making all the books accessible to everyone, with no limits.\n It&#39;s like a library, except not really \u2014 The fundamental issue isn&#39;t lending out books \u2014 that&#39;s what libraries do, after all. Even before the pandemic, the problem was that libraries pay royalties to publishers in order to lend out their books under negotiated terms, while the Internet Archive didn&#39;t pay anything. It scanned books manually and then began offering them to anyone who wanted to download them. While the intention might have been good, it turns out publishers weren&#39;t feeling  that generous as to give up so much revenue, even during the unique circumstances we&#39;re living under.\n \u201cIA scans books from cover to cover, posts complete digital files to its website, and solicits users to access them for free by signing up for Internet Archive Accounts,\u201d stated the Association of American Publishers when it filed its lawsuit. \u201cThe sheer scale of IA\u2019s infringement described in the complaint \u2014 and its stated objective to enlarge its illegal trove with abandon \u2014 appear to make it one of the largest known book pirate sites in the world.\u201d\n Most of the Internet Archive&#39;s content is open source or in the public domain, meaning it doesn&#39;t need to pay anyone, but it also argued that its designation as a &#34;digital library&#34; gave it cover to conduct the book lending it was doing. It must have decided that the argument would fly in court.\n The Internet Archive is still good on balance \u2014 The Internet Archive has long served as an archive for digital preservation, saving copies of media that might otherwise disappear into the ether. Its most well known for its Wayback Machine, which crawls the internet and takes snapshots of websites so that people can revisit them even after the sites goes offline. It also stores digital copies of video, like  old VHS recordings of MTV from the 1990s.\n Old physical media decays over time, and website owners eventually stop paying their hosting bills, so the Internet Archive does a good service protecting creative works from disappearing forever. But it&#39;s also not hard to sympathize with publishers here. Book publishing is not a lucrative industry, and it&#39;s especially hard to compete for attention these days with people distracted by new forms of media like podcasts and e-sports.\n Thankfully libraries around the U.S. are slowly starting to reopen, so anyone who relies on them shouldn&#39;t need to wait much longer. You already pay for those books in the form of taxes, you might as well take advantage.", "posttime": "2020-06-12 22:17:15", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u514d\u8d39,\u6863\u6848\u9986,archive,\u56fe\u4e66", "title": "\u4e92\u8054\u7f51\u6863\u6848\u9986\u56e0\u7248\u6743\u95ee\u9898\u627c\u6740\u5176\u514d\u8d39\u6570\u5b57\u56fe\u4e66\u9986", "title_en": "Internet Archive Kills Its Free Digital Library Over Copyright Concerns", "transed": 1, "url": "https://www.inputmag.com/culture/internet-archive-kills-its-free-digital-library-over-copyright-concerns", "via": "", "real_tags": ["\u514d\u8d39", "\u6863\u6848\u9986", "archive", "\u56fe\u4e66"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006283, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PostgreSQL\u662f\u4e00\u79cd\u5e7f\u4e3a\u4eba\u77e5\u7684\u5173\u7cfb\u6570\u636e\u5e93\u7cfb\u7edf\u3002\u6211\u4eec\u4f7f\u7528Jepsen\u7684\u65b0\u4e8b\u52a1\u9694\u79bb\u68c0\u67e5\u5668Elle\u8bc4\u4f30PostgreSQL\uff0c\u53d1\u73b0\u5728\u5355\u4e2aPostgreSQL\u5b9e\u4f8b\u4e0a\u4f7f\u7528\u53ef\u5e8f\u5217\u5316\u9694\u79bb\u6267\u884c\u7684\u4e8b\u52a1\u5b9e\u9645\u4e0a\u662f\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\u3002\u5728\u6b63\u5e38\u64cd\u4f5c\u4e0b\uff0c\u4e8b\u52a1\u5076\u5c14\u4f1a\u51fa\u73b0G2\u9879\uff1a\u6d89\u53ca\u4e00\u7ec4\u4e8b\u52a1\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u8fd9\u4e9b\u4e8b\u52a1(\u7c97\u7565\u5730\u8bf4)\u76f8\u4e92\u65e0\u6cd5\u89c2\u5bdf\u5230\u5f7c\u6b64\u7684\u5199\u5165\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5728PostgreSQL\u201cRepeatable Read\u201d\u4e0b\u53d1\u73b0\u4e86\u9891\u7e41\u51fa\u73b0\u7684G2-Item\u5b9e\u4f8b\uff0c\u8fd9\u662f\u901a\u5e38\u5f15\u7528\u7684Repeatable Read\u5f62\u5f0f\u5316\u660e\u786e\u7981\u6b62\u7684\u3002\u6b63\u5982Martin Kleppmann\u4e4b\u524d\u6240\u62a5\u9053\u7684\uff0c\u8fd9\u662f\u56e0\u4e3aPostgreSQL\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u5b9e\u9645\u4e0a\u662f\u5feb\u7167\u9694\u79bb\u3002\u7531\u4e8eANSI SQL\u6807\u51c6\u4e2d\u8ba8\u8bba\u5df2\u4e45\u7684\u6a21\u68f1\u4e24\u53ef\uff0c\u8fd9\u79cd\u884c\u4e3a\u662f\u5141\u8bb8\u7684\uff0c\u4f46\u5bf9\u4e8e\u719f\u6089\u76f8\u5173\u6587\u732e\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4ed6\u4eec\u5927\u5403\u4e00\u60ca\u3002\u6211\u4eec\u5728Serializability\u4e2d\u53d1\u73b0\u7684bug\u7684\u8865\u4e01\u8ba1\u5212\u57288\u670813\u65e5\u7684\u4e0b\u4e00\u4e2a\u5c0f\u7248\u672c\u4e2d\u53d1\u5e03\uff0c\u5e76\u4e14\u5728Repeatable Read\u4e0b\u5b58\u5728G2-Item\u7684\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u6587\u6863\u8f7b\u677e\u89e3\u51b3\u3002\u8fd9\u9879\u5de5\u4f5c\u662f\u72ec\u7acb\u8fdb\u884c\u7684\uff0c\u6ca1\u6709\u62a5\u916c\uff0c\u5e76\u6839\u636e\u6770\u666e\u68ee\u9053\u5fb7\u653f\u7b56\u8fdb\u884c\u3002\nPostgreSQL\u662f\u4e00\u79cd\u4e3b\u8981\u7684\u5f00\u6e90\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u5177\u670923\u5e74\u7684\u5386\u53f2\u548c\u5e7f\u6cdb\u7684\u529f\u80fd\u3002\u867d\u7136Jepsen\u7684\u5de5\u4f5c\u4f20\u7edf\u4e0a\u4fa7\u91cd\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u4f46\u6211\u4eec\u7684\u5de5\u5177\u5f88\u5bb9\u6613\u9002\u7528\u4e8e\u4f20\u7edf\u7684\u5355\u8282\u70b9\u6570\u636e\u5e93\u3002\u5728\u672c\u62a5\u544a\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5c06Jepsen\u7684\u751f\u6210\u6027\u5e76\u53d1\u6d4b\u8bd5\u5e94\u7528\u4e8ePostgreSQL12.3\u7684\u7ed3\u679c\u3002\n\u57289.1\u7248\u672c\u4e4b\u524d\uff0cpostgresql\u7684\u6587\u6863\u58f0\u79f0\u63d0\u4f9b\u4e86\u6700\u9ad8\u53ef\u5e8f\u5217\u5316\u80fd\u529b\uff0c\u201c\u5c31\u597d\u50cf\u4e8b\u52a1\u662f\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u4e32\u884c\u6267\u884c\uff0c\u800c\u4e0d\u662f\u5e76\u53d1\u6267\u884c(\u2026\u3002\u3002Serializable\u6a21\u5f0f\u63d0\u4f9b\u4e86\u4e25\u683c\u7684\u4fdd\u8bc1\uff0c\u786e\u4fdd\u6bcf\u4e2a\u4e8b\u52a1\u90fd\u80fd\u770b\u5230\u5b8c\u5168\u4e00\u81f4\u7684\u6570\u636e\u5e93\u89c6\u56fe\u3002\u201c\u3002\u7136\u800c\uff0c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff1aPostgreSQL\u7684\u201c\u53ef\u5e8f\u5217\u5316\u201d\u5b9e\u9645\u4e0a\u662f\u5feb\u7167\u9694\u79bb(SI)\u3002\n\u975e\u6b63\u5f0f\u5730\uff0c\u5feb\u7167\u9694\u79bb\u7cfb\u7edf\u4f3c\u4e4e\u4ee5\u6570\u636e\u5e93\u7684\u56fa\u5b9a\u5373\u65f6\u5feb\u7167\u542f\u52a8\u6bcf\u4e2a\u4e8b\u52a1\uff0c\u4ec5\u53cd\u6620\u5df2\u63d0\u4ea4\u7684\u72b6\u6001\u3002\u4e8b\u52a1\u4e2d\u6267\u884c\u7684\u5199\u5165\u4f3c\u4e4e\u5728\u63d0\u4ea4\u65f6\u81ea\u52a8\u5e94\u7528\uff0c\u53ea\u6709\u5728\u62cd\u6444\u5feb\u7167\u540e\u6ca1\u6709\u5176\u4ed6\u4e8b\u52a1\u4fee\u6539\u8fc7\u76f8\u540c\u7684\u5bf9\u8c61\u65f6\uff0c\u4e8b\u52a1\u624d\u80fd\u63d0\u4ea4\u3002\u8fd9\u662f\u4e0d\u53ef\u5e8f\u5217\u5316\u7684(\u6b63\u5982\u6b63\u5f0f\u7684\u5feb\u7167\u9694\u79bb\u6587\u7ae0\u6240\u660e\u786e\u6307\u51fa\u7684\u90a3\u6837)\uff1a\u5199\u5165\u96c6\u4e0d\u76f8\u4ea4\u7684\u4e8b\u52a1\u53ef\u4ee5\u5728\u4e0d\u89c2\u5bdf\u5f7c\u6b64\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u63d0\u4ea4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fdd\u53cd\u5e94\u7528\u7a0b\u5e8f\u7ea7\u4e00\u81f4\u6027\u3002\n\u57288.0\u7248\u4e2d\uff0cPostgreSQL\u7684\u6587\u6863\u6f84\u6e05\u4e86\u201c\u4e8b\u5b9e\u4e0aPostgreSQL\u7684Serializable\u6a21\u5f0f\u5e76\u4e0d\u80fd\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u4fdd\u8bc1\u53ef\u5e8f\u5217\u5316\u7684\u6267\u884c\u201d\uff0c\u5e76\u63a5\u7740\u6307\u51faPostgreSQL\u7f3a\u5c11\u8c13\u8bcd\u9501\u5b9a\u7cfb\u7edf\u3002\n\u57289.1\u7248\u4e2d\uff0c\u57fa\u4e8eCahill\u3001R\u00f6hm\u548cFekete\u5bf9\u53ef\u5e8f\u5217\u5316\u5feb\u7167\u9694\u79bb(SSI)\u7684\u7814\u7a76\uff0cPostgreSQL\u8d21\u732e\u8005Grittner\u548cPorts\u6dfb\u52a0\u4e86\u5bf9\u771f\u6b63\u53ef\u5e8f\u5217\u5316\u7684\u652f\u6301\u3002\u7b80\u800c\u8a00\u4e4b\uff0cSSI\u901a\u8fc7\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u79f0\u4e3a\u5371\u9669\u7ed3\u6784\u7684\u4e8b\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u6765\u6269\u5c55SI\uff1a\u4e09\u4e2a\u4e8b\u52a1\u4e4b\u95f4\u7684\u4e00\u5bf9\u76f8\u90bb\u7684\u8bfb\u5199\u4f9d\u8d56\u5173\u7cfb\u3002\u9664\u4e86\u5feb\u7167\u9694\u79bb\u7684\u6b63\u5e38\u89c4\u5219\u4e4b\u5916\uff0c\u9632\u6b62\u8fd9\u4e9b\u5371\u9669\u7684\u7ed3\u6784\u53ea\u4f1a\u4ea7\u751f\u53ef\u5e8f\u5217\u5316\u7684\u6267\u884c\u3002\u5728\u8fc7\u53bb\u7684\u4e5d\u5e74\u4e2d\uff0cPostgreSQL\u7684\u201c\u53ef\u5e8f\u5217\u5316\u201d\u6a21\u5f0f\u7406\u6240\u5f53\u7136\u5730\u58f0\u79f0\u63d0\u4f9b\u4e86\u53ef\u5e8f\u5217\u5316\u3002\nPostgreSQL\u7684\u201c\u53ef\u91cd\u590d\u8bfb\u201d\u4fdd\u6301\u5feb\u7167\u9694\u79bb\uff0c\u4f46\u662f\u5e76\u53d1\u63a7\u5236\u6587\u6863\u4ee4\u4eba\u60ca\u8bb6\u5730\u6ca1\u6709\u63d0\u5230\u8fd9\u4e2a\u672f\u8bed\u3002\u76f8\u53cd\uff0c\u5b83\u63d0\u4f9b\uff1a\n\u53ef\u91cd\u590d\u8bfb\u9694\u79bb\u7ea7\u522b\u53ea\u770b\u5230\u4e8b\u52a1\u5f00\u59cb\u4e4b\u524d\u63d0\u4ea4\u7684\u6570\u636e\uff1b\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u770b\u5230\u672a\u63d0\u4ea4\u7684\u6570\u636e\u6216\u5e76\u53d1\u4e8b\u52a1\u2026\u5728\u4e8b\u52a1\u6267\u884c\u671f\u95f4\u63d0\u4ea4\u7684\u66f4\u6539\u3002\u8fd9\u6bd4SQL\u6807\u51c6\u5bf9\u6b64\u9694\u79bb\u7ea7\u522b\u7684\u8981\u6c42\u63d0\u4f9b\u4e86\u66f4\u5f3a\u7684\u4fdd\u8bc1\uff0c\u5e76\u9632\u6b62\u4e86\u886813.1\u4e2d\u63cf\u8ff0\u7684\u6240\u6709\u73b0\u8c61(\u5e8f\u5217\u5316\u5f02\u5e38\u9664\u5916)\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u8fd9\u662f\u8be5\u6807\u51c6\u7279\u522b\u5141\u8bb8\u7684\uff0c\u5b83\u53ea\u63cf\u8ff0\u4e86\u6bcf\u4e2a\u9694\u79bb\u7ea7\u522b\u5fc5\u987b\u63d0\u4f9b\u7684\u6700\u4f4e\u4fdd\u62a4\u3002\n\u201c\u5e8f\u5217\u5316\u5f02\u5e38\u201d\u662f\u4e00\u4e2a\u6709\u70b9\u6a21\u68f1\u4e24\u53ef\u7684\u672f\u8bed\uff1a\u6587\u6863\u7b80\u5355\u5730\u5c06\u5176\u63cf\u8ff0\u4e3a\u201c\u4e0e\u4e00\u6b21\u8fd0\u884c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6240\u6709\u53ef\u80fd\u987a\u5e8f\u4e0d\u4e00\u81f4\u201d\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u201c\u5e8f\u5217\u5316\u5f02\u5e38\u201d\u7684\u5177\u4f53\u542b\u4e49\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5b9e\u9a8c\u3002\n\u6211\u4eec\u4f7f\u7528Jepsen\u6d4b\u8bd5\u5e93\u4e3aPostgreSQL\u8bbe\u8ba1\u4e86\u6d4b\u8bd5\u5de5\u5177\u3002\u6211\u4eec\u7684\u6d4b\u8bd5\u5728\u5355\u4e2aDebian 10\u8282\u70b9\u4e0a\u5b89\u88c5PostgreSQL12.3-1.pgdg100+1(\u5f53\u524d\u7a33\u5b9a\u7248\u672c)\uff0c\u6216\u8005\u9009\u62e9\u8fde\u63a5\u5230\u73b0\u6709\u7684PostgreSQL\u5b89\u88c5\u3002\u6211\u4eec\u8fd8\u8bc4\u4f30\u4e86\u7248\u672c9.5.22\u300110.13\u548c11.8\u3002\u6211\u4eec\u7684\u6d4b\u8bd5\u53ef\u4ee5\u6309\u968f\u673a\u987a\u5e8f\u7ec8\u6b62PostgreSQL\u8fdb\u7a0b\uff0c\u4ee5\u5e2e\u52a9\u6d4b\u91cf\u5d29\u6e83\u5b89\u5168\u6027\uff0c\u4f46\u6211\u4eec\u5728\u8fd9\u91cc\u7684\u53d1\u73b0\u4e0d\u9700\u8981\u91cd\u73b0\u8fdb\u7a0b\u5d29\u6e83\u3002\u6211\u4eec\u4f7f\u7528PostgreSQL\u7684\u5b98\u65b9Debian\u5305\u63d0\u4f9b\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u53ea\u505a\u4e86\u5f88\u5c0f\u7684\u66f4\u6539(\u4f8b\u5982\uff0c\u7ed1\u5b9a\u7f51\u7edc\u7aef\u53e3)\uff0c\u5728\u4e00\u4e9b\u6d4b\u8bd5\u4e2d\uff0c\u7f29\u77ed\u4e86\u81ea\u52a8\u771f\u7a7a\u5348\u7761\u65f6\u95f4\uff0c\u5e76\u542f\u7528\u4e86\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002\n\u6211\u4eec\u7684\u6d4b\u8bd5\u5de5\u4f5c\u8d1f\u8f7d\u8de8\u4e00\u7ec4\u5217\u8868\u5bf9\u8c61\u751f\u6210\u9644\u52a0\u548c\u8bfb\u53d6\u64cd\u4f5c\u7684\u968f\u673a\u4e8b\u52a1\uff0c\u5e76\u4ee5\u6307\u6570\u9891\u7387\u9009\u62e9\u3002\u6bcf\u4e2a\u5bf9\u8c61\u7531\u552f\u4e00\u7684\u6574\u6570\u903b\u8f91\u952e\u6807\u8bc6\u3002\u6211\u4eec\u5c06\u6bcf\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u4e00\u884c\u5b58\u50a8\u5728\u591a\u4e2a\u8868\u4e2d\u7684\u4e00\u4e2a\u8868\u4e2d\uff0c\u8fd9\u4e9b\u8868\u7531\u952e\u7684\u6563\u5217\u9009\u62e9\u3002\u5bf9\u8c61\u952e\u5b58\u50a8\u5728\u4e24\u4e2a\u5b57\u6bb5\u4e2d\uff1a\u4e3b\u952eid\u548c\u672a\u7d22\u5f15\u7684\u8f85\u952esk\uff0c\u6211\u4eec\u4f7f\u7528\u5b83\u901a\u8fc7\u8868\u626b\u63cf\u6d4b\u8bd5\u8bbf\u95ee\u30021\u6bcf\u4e2a\u5217\u8868\u7684\u503c\u5b58\u50a8\u4e3a\u9017\u53f7\u5206\u9694\u7684\u6587\u672c\u5217\u3002\n\u6211\u4eec\u4f7f\u7528INSERT.\u5c06\u552f\u4e00\u7684\u6574\u6570\u5143\u7d20\u9644\u52a0\u5230\u7531key\u6807\u8bc6\u7684\u5217\u8868\u4e2d(\u901a\u8fc7id\u6216sk)\u3002\u5728\u51b2\u7a81\u65f6\u6267\u884cUPDATE\uff0c\u6216\u8005\u901a\u8fc7UPDATE\u68c0\u67e5\u662f\u5426\u6709\u4efb\u4f55\u884c\u88ab\u4fee\u6539\uff0c\u7136\u540e\u540e\u9000\u5230INSERT\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u518d\u6b21\u66f4\u65b0\u3002\u8bfb\u53d6\u8fd4\u56de\u7279\u5b9a\u5bf9\u8c61\u7684\u5f53\u524d\u6574\u6570\u5217\u8868\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7SELECT(Val)from txn0 where id=\uff1f\n\u6211\u4eec\u7684\u6d4b\u8bd5\u4f7f\u7528JDBC PostgreSQL\u9a71\u52a8\u7a0b\u5e8f(\u7248\u672c42.2.12)\u5c06\u8fd9\u4e9b\u4e8b\u52a1\u5e94\u7528\u5230PostgreSQL\uff0c\u5e76\u4f7f\u7528ELLE\u4e8b\u52a1\u9694\u79bb\u68c0\u67e5\u5668\u5206\u6790\u7ed3\u679c\u5386\u53f2\u3002ELLE\u6839\u636e\u5b9e\u9a8c\u8bb0\u5f55\u7684\u5386\u53f2\u63a8\u65ad\u4e8b\u52a1\u4f9d\u8d56\u56fe\uff0c\u5e76\u5728\u8be5\u56fe\u4e2d\u641c\u7d22\u5faa\u73af(\u548c\u975e\u5faa\u73af\u5f02\u5e38)\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u4eceAdya\u3001Liskov\u548cAmp\uff1bO\u2018Neil\u7684\u901a\u7528\u9694\u79bb\u7ea7\u522b\u5b9a\u4e49\u4e2d\u68c0\u6d4b\u5230\u5e7f\u6cdb\u7684\u5f02\u5e38\uff0c\u5305\u62ecG0(\u810f\u5199)\u3001G1a(\u4e2d\u6b62\u8bfb\u53d6)\u3001G1b(\u4e2d\u95f4\u8bfb\u53d6)\u3001G1c(\u5faa\u73af\u4fe1\u606f\u6d41)\u3001G-Single(\u8bfb\u53d6\u504f\u5dee)\u548cG2-Item(\u53cd\u4f9d\u8d56\u5468\u671f)\u3002\u6211\u4eec\u8fd8\u68c0\u67e5\u5185\u90e8\u4e00\u81f4\u6027\uff0c\u9a8c\u8bc1\u4e8b\u52a1\u662f\u5426\u89c2\u5bdf\u5230\u4e0e\u5176\u81ea\u8eab\u5148\u524d\u5199\u5165\u4e00\u81f4\u7684\u503c\u3001\u91cd\u590d\u5f71\u54cd\u548c\u5783\u573e\u503c(\u4f8b\u5982\uff0c\u4ece\u672a\u5199\u5165\u7684\u5143\u7d20)\u3002\n\u5728\u5927\u591a\u6570\u65b9\u9762\uff0cPostgreSQL\u7684\u884c\u4e3a\u4e0e\u9884\u671f\u4e00\u81f4\uff1a\u672a\u63d0\u4ea4\u7684\u8bfb\u53d6\u548c\u63d0\u4ea4\u7684\u8bfb\u53d6\u90fd\u53ef\u4ee5\u9632\u6b62\u5199\u5165\u504f\u5dee\u548c\u4e2d\u6b62\u8bfb\u53d6\u3002\u6211\u4eec\u6ca1\u6709\u89c2\u5bdf\u5230\u8fdd\u53cd\u5185\u90e8\u4e00\u81f4\u6027\u7684\u60c5\u51b5\u3002\u7136\u800c\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u7ed3\u679c\u8981\u62a5\u544a\u3002\u9996\u5148\u662fPostgreSQL\u7684\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u5f31\u4e8e\u53ef\u91cd\u590d\u8bfb\u53d6\uff0c\u81f3\u5c11\u6309\u7167Berenson\u3001Adya\u3001Bailis\u7b49\u4eba\u7684\u5b9a\u4e49\uff0c\u8fd9\u4e0d\u4e00\u5b9a\u662f\u9519\u7684\uff1aANSI SQL\u6807\u51c6\u662f\u6a21\u68f1\u4e24\u53ef\u7684\u3002\u7b2c\u4e8c\u4e2a\u7ed3\u679c\u80af\u5b9a\u662f\u9519\u8bef\u7684\uff0c\u90a3\u5c31\u662fPostgreSQL\u7684\u201c\u53ef\u5e8f\u5217\u5316\u201d\u9694\u79bb\u7ea7\u522b\u662f\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\uff1a\u5b83\u5141\u8bb8\u5728\u6b63\u5e38\u64cd\u4f5c\u671f\u95f4\u4f7f\u7528G2-Item\u3002\nPostgreSQL\u7684\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u9694\u79bb\u7ea7\u522b\u5b9e\u9645\u4e0a\u662f\u5feb\u7167\u9694\u79bb\uff0c\u5728\u4f7f\u7528\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u65f6\uff0c\u6211\u4eec\u6ca1\u6709\u89c2\u5bdf\u5230\u8fdd\u53cdSI\u7684\u5f02\u5e38\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u8bb0\u5f55\u7684\u5386\u53f2\u4e0e\u5f3a\u5927\u7684\u5feb\u7167\u9694\u79bb\u662f\u4e00\u81f4\u7684\uff0c\u8fd9\u662f\u4e00\u79cd\u66f4\u5f3a\u7684\u4e00\u81f4\u6027\u6a21\u578b\uff0c\u53ef\u9632\u6b62\u9648\u65e7\u8bfb\u53d6\u548c\u5176\u4ed6\u5b9e\u65f6\u5f02\u5e38\u3002\n\u7136\u800c\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u8bb8\u591a\u8fdd\u53cd\u53ef\u91cd\u590d\u8bfb\u53d6\u7684\u884c\u4e3a\uff0c\u6b63\u5982Berenson\uff0cAdya\u7b49\u4eba\u6b63\u5f0f\u5b9a\u4e49\u7684\u90a3\u6837\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e0b\u8fd9\u6bb5\u5386\u53f2\uff0c\u5b83\u6bcf\u5206\u949f\u4ea7\u751f\u5927\u7ea6140\u4e2a\u53cd\u4f9d\u8d56\u5468\u671f\u3002\u4e0b\u9762\u662f\u7531\u4e09\u4e2a\u4e8b\u52a1\u7ec4\u6210\u5386\u53f2\u4e2d\u7684\u4e00\u4e2a\u77ed\u5468\u671f-\u6bcf\u4e2a\u4e8b\u52a1\u4f3c\u4e4e\u90fd\u5728\u4e0b\u4e00\u4e2a\u4e8b\u52a1\u4e4b\u524d\u6267\u884c\u3002\n\u9876\u90e8\u4e8b\u52a1\u901a\u8fc7\u8bfb\u53d6\u952e190\u5f00\u59cb\uff0c\u5e76\u627e\u5230\u5217\u8868[1 2]\u3002\u4e2d\u95f4\u4e8b\u52a1\u5c064\u9644\u52a0\u5230\u5bc6\u94a5190\uff0c\u5f97\u5230\u7248\u672c[1 2 4]\u3002\u7531\u4e8e\u5199\u5165\u8986\u76d6\u4e86\u9876\u90e8\u4e8b\u52a1\u8bfb\u53d6\u72b6\u6001\uff0c\u56e0\u6b64\u6211\u4eec\u77e5\u9053\u4e2d\u95f4\u4e8b\u52a1\u5fc5\u987b\u5728\u9876\u90e8\u4e8b\u52a1\u4e4b\u540e\u6267\u884c\u3002\u6211\u4eec\u79f0\u8fd9\u79cd\u5173\u7cfb\u4e3a\u53cd\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u5c06\u5176\u8868\u793a\u4e3a\u4e00\u6761\u6807\u8bb0\u4e3aRW\u7684\u8fb9\u3002\n\u4e2d\u95f4\u4e8b\u52a1\u5c065\u9644\u52a0\u5230\u952e190\uff0c\u7136\u540e\u5bf9\u5e95\u90e8\u4e8b\u52a1\u7684\u8bfb\u53d6[1 2 4 5]\u53ef\u89c1\u3002\u8be5\u5199-\u8bfb\u4f9d\u8d56\u6027\u7531\u6807\u8bb0\u4e3aWR\u7684\u8fb9\u8868\u793a\u3002\u7136\u800c\uff0c\u5e95\u90e8\u4e8b\u52a1\u8bfb\u53d6\u5173\u952e\u5b57188\uff0c\u5e76\u4e14\u6ca1\u6709\u89c2\u5bdf\u5230\u9876\u90e8\u4e8b\u52a1\u7684\u9644\u52a08\u3002\u8fd9\u79cd\u53cd\u4f9d\u8d56\u6027\u610f\u5473\u7740\u5e95\u90e8\u4e8b\u52a1\u5fc5\u987b\u5728\u9876\u90e8\u4e8b\u52a1\u4e4b\u524d\u6267\u884c\uff1a\u5468\u671f\uff01\n\u8fd9\u4e2a\u4f9d\u8d56\u5faa\u73af\u5305\u542b\u4e24\u4e2a\u53cd\u4f9d\u8d56\u7684\u8fb9\u7f18\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5728\u963f\u96c5\u7684\u5f62\u5f0f\u4e3b\u4e49\u8bed\u8a00\u4e2d\u6210\u4e3aG2\u73b0\u8c61\u3002\u56e0\u4e3a\u6240\u6709\u8fd9\u4e9b\u8bfb\u53d6\u90fd\u662f\u5728\u901a\u8fc7\u4e3b\u952e2\u8bfb\u53d6\u5bf9\u8c61\u65f6\u53d1\u751f\u7684\uff0c\u6240\u4ee5\u5b83\u4e5f\u662fG2-Item\uff1a\u5728Adya\u7684\u53ef\u91cd\u590d\u8bfb\u53d6\u7684\u5f62\u5f0f\u5316\u4e2d\u660e\u786e\u7981\u6b62\u8fd9\u79cd\u73b0\u8c61\u3002\u6211\u4eec\u8ba4\u4e3a\u8fd9\u662fPostgreSQL\u6587\u6863\u4e2d\u63d0\u5230\u7684\u4e00\u79cd\u201c\u5e8f\u5217\u5316\u5f02\u5e38\u201d\u3002\n\u7136\u800c\uff0c\u6839\u636eANSI SQL\u5bf9\u53ef\u91cd\u590d\u8bfb\u53d6\u7684\u5b9a\u4e49\uff0c\u8fd9\u4e9b\u5f02\u5e38\u662f\u5141\u8bb8\u7684\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u5bf9\u7981\u6b62\u73b0\u8c61\u7684\u63aa\u8f9e\u542b\u7cca\u7684\u7b80\u660e\u82f1\u8bed\u5b9a\u4e49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u79cd\u6a21\u68f1\u4e24\u53ef\u6b63\u662f\u4fc3\u4f7fBerenson\u3001Bernstein\u7b49\u4eba\u64b0\u5199\u300aANSI SQL\u9694\u79bb\u7ea7\u522b\u6279\u5224\u300b\u7684\u90e8\u5206\u539f\u56e0\uff0c\u5e76\u9996\u5148\u5c06\u5feb\u7167\u9694\u79bb\u7684\u5b9a\u4e49\u6b63\u5f0f\u5316\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0cBerenson\u7b49\u4eba\u5bf9ANSI\u5f02\u5e38\u63d0\u51fa\u4e86\u4e24\u79cd\u89e3\u91ca\uff1a\u4e00\u79cd\u662f\u4e25\u683c\u7684\uff0c\u4e00\u79cd\u662f\u5e7f\u4e49\u7684\u3002\u4ed6\u4eec\u4e89\u8fa9\u8bf4\uff0c\u4e25\u683c\u7684\u89e3\u91ca\u672a\u80fd\u6355\u6349\u5230\u76f4\u89c9\u4e0a\u4e0d\u6b63\u786e\u7684\u884c\u4e3a\uff0c\u800cANSI\u7684\u610f\u601d\u662f\u5b9a\u4e49\u5e7f\u4e49\u7684\u884c\u4e3a\u3002\n\u4e25\u683c\u7684\u89e3\u91caA1\u3001A2\u548cA3\u6709\u610f\u60f3\u4e0d\u5230\u7684\u5f31\u70b9\u3002\u6b63\u786e\u7684\u89e3\u91ca\u662f\u5bbd\u6cdb\u7684\u3002\n\u5728Berenson\u7b49\u4eba\u559c\u6b22\u7684\u5e7f\u4e49\u89e3\u91ca\u4e0b\uff0c\u5feb\u7167\u9694\u79bb\u4e0d\u80fd\u4e0e\u53ef\u91cd\u590d\u8bfb\u53d6\u76f8\u63d0\u5e76\u8bba\uff1aSI\u5141\u8bb8\u5386\u53f2RR\u7981\u6b62\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5728\u4e25\u683c\u7684\u89e3\u91ca\u4e0b\uff0cSI\u5f3a\u4e8eRR(\u786e\u5b9e\uff0cSI\u5f3a\u4e8e\u5f02\u5e38\u53ef\u5e8f\u5217\u5316\uff01)\uff0c\u5e76\u4e14\u8fd9\u4e9bG2\u9879\u5f02\u5e38\u5728\u53ef\u91cd\u590d\u8bfb\u53d6\u4e0b\u662f\u5141\u8bb8\u7684\u3002\n\u56e0\u6b64\uff0cPostgreSQL\u7684\u53ef\u91cd\u590d\u8bfb\u53d6\u884c\u4e3a\u662f\u5426\u6b63\u786e\u53d6\u51b3\u4e8e\u4eba\u4eec\u5bf9\u8be5\u6807\u51c6\u7684\u7406\u89e3\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u57fa\u4e8e\u5feb\u7167\u9694\u79bb\u7684\u6570\u636e\u5e93\u4f1a\u62d2\u7edd\u5173\u4e8eSI\u7684\u5f00\u521b\u6027\u8bba\u6587\u6240\u9009\u62e9\u7684\u4e25\u683c\u89e3\u91ca\uff0c\u4f46\u7ecf\u8fc7\u53cd\u601d\uff0c\u8fd9\u79cd\u884c\u4e3a\u662f\u53ef\u4ee5\u8fa9\u62a4\u7684\u3002\n\u5f53\u6211\u4eec\u6d4b\u8bd5PostgreSQL\u7684\u53ef\u5e8f\u5217\u5316\u9694\u79bb\u7ea7\u522b\u65f6\uff0c\u51fa\u73b0\u4e86\u4e00\u4e2a\u66f4\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u5728\u6b63\u5e38\u64cd\u4f5c\u4e0b\uff0c\u5b83\u8fd8\u663e\u793a\u4e86G2\u9879\u3002\u5728\u8fd9\u4e24\u5206\u949f\u7684\u6d4b\u8bd5\u4e2d\uff0c\u6770\u666e\u68ee\u68c0\u6d4b\u52306\u4f8bG2-Item\u3002\u4f8b\u5982\uff0c\u8003\u8651\u8fd9\u5bf9\u4e8b\u52a1\uff0c\u5176\u4e2d\u6bcf\u4e2a\u4e8b\u52a1\u90fd\u672a\u80fd\u89c2\u5bdf\u5230\u5bf9\u65b9\u7684\u63d2\u5165\uff1a\n\u6216\u8005\uff0c\u8003\u8651\u4ee5\u4e0b\u4e09\u4e2a\u4e8b\u52a1\u3002\u9876\u90e8\u4e8b\u52a1\u9519\u8fc7\u4e86\u7531\u5e95\u90e8\u53ea\u8bfb\u4e8b\u52a1\u89c2\u5bdf\u5230\u7684\u4e2d\u95f4\u4e8b\u52a1\u7684\u5bc6\u94a51670\u7684\u521b\u5efa\u3002\u7136\u800c\uff0c\u5e95\u90e8\u4e8b\u52a1\u53c8\u672a\u80fd\u89c2\u5bdf\u5230\u7b2c\u4e00\u4e8b\u52a1\u5bf9\u5bc6\u94a51671\u521b\u5efa\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u8bfb\u5199\u4e8b\u52a1\u81ea\u5df1\u83b7\u53d6\uff0c\u5219\u5b83\u662f\u53ef\u5e8f\u5217\u5316\u7684\u3002\u53ea\u8bfb\u4e8b\u52a1\u5bf9\u4e8e\u6b64\u5468\u671f\u662f\u5fc5\u9700\u7684\uff1a\u5b83\u89c2\u5bdf\u67d0\u4e9b(\u4f46\u4e0d\u662f\u5168\u90e8)\u201c\u903b\u8f91\u4e0a\u5728\u5148\u201d\u4e8b\u52a1\u7684\u5f71\u54cd\u3002\n\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u56fe\u4e0ePostgreSQL Serializable Snapshot\u9694\u79bb\u7eb8\u4e2d\u7684\u793a\u4f8b1(\u201c\u7b80\u5355\u5199\u5165\u504f\u5dee\u201d)\u548c\u793a\u4f8b2(\u201c\u6279\u5904\u7406\u201d)\u5b8c\u5168\u5bf9\u5e94\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5f53\u7136\uff0c\u5b83\u4eec\u7684SQL\u8bed\u53e5\u662f\u4e0d\u540c\u7684-\u4f46\u4e0e\u793a\u4f8b1\u7c7b\u4f3c\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5468\u671f\u6d89\u53ca\u4e00\u5bf9\u4e8b\u52a1\uff0c\u5b83\u4eec\u8bfb\u53d6\u4e00\u4e2a\u952e\u5e76\u5199\u5165\u53e6\u4e00\u4e2a\u952e\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u90fd\u672a\u80fd\u89c2\u5bdf\u5230\u53e6\u4e00\u4e2a\u952e\u7684\u5f71\u54cd\uff1b\u800c\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u5468\u671f\u6d89\u53ca\u4e00\u4e2a\u53ea\u8bfb\u4e8b\u52a1\uff0c\u8be5\u4e8b\u52a1\u901a\u8fc7\u4e24\u4e2a\u76f8\u90bb\u7684RW\u53cd\u4f9d\u8d56\u5173\u7cfb\u5148\u4e8e\u5199\u5165\u8be5\u53ea\u8bfb\u4e8b\u52a1\u89c2\u5bdf\u5230\u7684\u72b6\u6001\u7684\u4e8b\u52a1\u3002\u8fd9\u4e9b\u5468\u671f\u6b63\u662fPostgreSQL\u7684SSI\u5b9e\u73b0\u8981\u9632\u6b62\u7684\uff01\n\u6211\u4eec\u5728\u53ef\u5e8f\u5217\u5316\u9694\u79bb\u4e0b\u89c2\u5bdf\u5230\u7684G2-Item\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u81f3\u5c11\u6d89\u53ca\u65b0\u63d2\u5165\u884c\u7684\u4e00\u4e2a\u8bfb\u5199\u51b2\u7a81\u3002\u5faa\u73af\u53ef\u80fd\u6d89\u53ca\u5bf9\u73b0\u6709\u884c\u7684\u66f4\u65b0\u7684RW\u53cd\u4f9d\u8d56\uff0c\u4f46\u4f3c\u4e4e\u81f3\u5c11\u9700\u8981\u4e00\u6b21\u63d2\u5165\u3002\n\u5728\u4e0ePostgreSQL\u8d21\u732e\u8005\u8ba8\u8bba\u4e4b\u540e\uff0cPeter Geoghegan\u786e\u5b9a\u4e86\u6b64\u95ee\u9898\u7684\u53ef\u80fd\u539f\u56e0\uff1a\u5728\u7ed9\u5b9a\u4e09\u4e2a\u5e76\u53d1\u4e8b\u52a1\u7684\u60c5\u51b5\u4e0b\uff0c\u51b2\u7a81\u68c0\u6d4b\u673a\u5236\u53ef\u80fd\u4f1a\u9519\u8bef\u5730\u5c06\u66f4\u65b0\u4e8b\u52a1\u7684\u4e8b\u52a1ID(XID)\u6807\u8bc6\u4e3a\u8d1f\u8d23\u5143\u7ec4\u7684\u539f\u59cb\u7248\u672c\u548c\u66f4\u65b0\u7248\u672c\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6700\u521d\u521b\u5efa\u5143\u7ec4\u7684\u4e8b\u52a1ID\u3002\u901a\u8fc7\u5c06\u9519\u8bef\u7684\u4e8b\u52a1\u6807\u8bb0\u4e3a\u6f5c\u5728\u51b2\u7a81\uff0c\u5b83\u5141\u8bb8\u4e8b\u52a1\u63d0\u4ea4\uff0c\u540c\u65f6\u65e0\u6cd5\u89c2\u5bdf\u524d\u4e00\u4e2a\u4e8b\u52a1\u7684\u5199\u5165\u3002Geoghegan\u4e0ePostgreSQL\u793e\u533a\u7684\u5176\u4ed6\u6210\u5458\u5408\u4f5c\uff0c\u7f16\u5199\u4e86\u4e00\u4e2a\u8865\u4e01\u6765\u6807\u8bb0\u6b63\u786e\u7684\u4e8b\u52a1ID\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e2a\u56de\u5f52\u6d4b\u8bd5\u3002\u5728\u4ed6\u4eec\u7684\u6d4b\u8bd5\u4e2d\uff0c\u8fd9\u4f3c\u4e4e\u89e3\u51b3\u4e86\u95ee\u9898\u3002\n\u81ea\u4ece2011\u5e74\u5f15\u5165\u53ef\u5e8f\u5217\u5316\u5feb\u7167\u9694\u79bb\u4ee5\u6765\uff0c\u8fd9\u6bb5\u4ee3\u7801\u57fa\u672c\u4e0a\u6ca1\u6709\u53d8\u5316\u3002\u6211\u4eec\u4e00\u8d77\u786e\u8ba4PostgreSQL 9.5.22\u300110.13\u300111.8\u300112.3\u548c13\u4e2d\u5b58\u5728\u6b64\u9519\u8bef\uff1b\u6211\u4eec\u5047\u8bbe\u5b83\u5b58\u5728\u4e8e\u6240\u6709\u73b0\u6709\u7248\u672c\u4e2d\u3002\n\u5728\u6211\u4eec\u5bf9PostgreSQL12.3\u7684\u6d4b\u8bd5\u4e2d\uff0c\u5728\u8bfb\u63d0\u4ea4\u65f6\u6267\u884c\u7684\u4e8b\u52a1\u4f3c\u4e4e\u662f\u6b63\u786e\u7684\uff1a\u6211\u4eec\u4ece\u672a\u89c2\u5bdf\u5230G0(\u810f\u5199)\u3001G1a(\u4e2d\u6b62\u8bfb)\u6216G1b(\u4e2d\u95f4\u8bfb)\u3002PostgreSQL\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u770b\u8d77\u6765\u4e0e\u5f3a\u5feb\u7167\u9694\u79bb\u4e00\u81f4\uff0c\u4f46\u5141\u8bb8G2-Item\uff0c\u8fd9\u5728\u53ef\u91cd\u590d\u8bfb\u53d6\u7684\u5f62\u5f0f\u5316\u4e2d\u662f\u88ab\u7981\u6b62\u7684\u3002\u4f46\u662f\uff0c\u53ef\u4ee5\u5c06\u6b64\u884c\u4e3a\u89e3\u91ca\u4e3a\u4e0eANSI SQL\u53ef\u91cd\u590d\u8bfb\u53d6\u4e00\u81f4\u3002\u6700\u540e\uff0c\u7531\u4e8e\u51b2\u7a81\u68c0\u6d4b\u673a\u5236\u4e2d\u7684\u9519\u8bef\uff0cPostgreSQL\u201c\u53ef\u5e8f\u5217\u5316\u201d\u5141\u8bb8G2-Item\u5728\u6b63\u5e38\u64cd\u4f5c\u4e0b\u8fd0\u884c\u3002\u5df2\u7ecf\u63d0\u4ea4\u4e86\u4e00\u4e2a\u8865\u4e01\uff0c\u8fd9\u7c7b\u53ef\u5e8f\u5217\u5316\u51b2\u7a81\u5e94\u8be5\u4f1a\u5728\u4e0b\u4e00\u4e2a\u6b21\u8981\u7248\u672c\u4e2d\u89e3\u51b3--\u76ee\u524d\u8ba1\u5212\u57288\u670813\u65e5\u53d1\u5e03\u3002\nPostgreSQL\u6709\u4e00\u5957\u5e7f\u6cdb\u7684\u7cbe\u5fc3\u6311\u9009\u7684\u793a\u4f8b\uff0c\u79f0\u4e3a\u9694\u79bb\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u7528\u4e8e\u9a8c\u8bc1\u5e76\u53d1\u5b89\u5168\u6027\u3002\u6b64\u5916\uff0c\u50cfMartin Kleppmann\u7684Hermitage\u8fd9\u6837\u7684\u72ec\u7acb\u6d4b\u8bd5\u4e5f\u8bc1\u5b9e\u4e86PostgreSQL\u7684\u53ef\u5e8f\u5217\u5316\u7ea7\u522b\u53ef\u4ee5\u9632\u6b62(\u81f3\u5c11\u6709\u4e00\u4e9b\uff01)\u3002G2\u5f02\u5e38\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u9a6c\u4e0a\u548c\u6770\u666e\u68ee\u4e00\u8d77\u627e\u5230\u4e86G2-Item\u5462\uff1f\u8fd9\u4e2a\u6f0f\u6d1e\u662f\u5982\u4f55\u6301\u7eed\u8fd9\u4e48\u4e45\u7684\u5462\uff1f\nPostgreSQL\u7684\u9694\u79bb\u6d4b\u8bd5\u3001Hermitage\u548c\u5927\u591a\u6570\u4e8b\u52a1\u6027Jepsen\u6d4b\u8bd5(\u5728ELE\u4e4b\u524d)\u90fd\u4f9d\u8d56\u4e8e\u4f7f\u7528\u624b\u5de5\u9a8c\u8bc1\u7684\u4e0d\u53d8\u91cf\u6267\u884c\u5c11\u6570\u5de7\u5999\u6784\u9020\u7684\u4e8b\u52a1\u3002\u4f8b\u5982\uff0c\u6b64\u9694\u79bb\u6d4b\u8bd5\u5668\u89c4\u8303\u901a\u8fc7\u6267\u884cFekete\uff0cO\u2018Neil\uff0c&amp\uff1bO\u2019Neil\u5728\u5feb\u7167\u9694\u79bb\u4e0b\u7684\u53ea\u8bfb\u4e8b\u52a1\u5f02\u5e38\u4e2d\u63d0\u51fa\u7684\u4e8b\u52a1\u5e8f\u5217\u6765\u9a8c\u8bc1\u53ef\u4e32\u884c\u5316\u3002\u6770\u666e\u68ee\u7684\u94f6\u884c\u6d4b\u8bd5\u57fa\u4e8e\u4e00\u7c7b\u5b9a\u4e49\u72ed\u7a84\u7684\u4ea4\u6613\uff0c\u8be5\u4ea4\u6613\u5728\u5feb\u7167\u9694\u79bb\u4e0b\u4fdd\u6301\u603b\u4f59\u989d\u4e0d\u53d8\u91cf\u3002Hermitage\u901a\u8fc7\u6267\u884c\u4e00\u5bf9\u5bf9\u79f0\u7684\u8bfb\u53d6\u548c\u66f4\u65b0\u4e8b\u52a1\u6765\u68c0\u67e5G2-Item-\u8fd9\u786e\u5b9e\u6210\u529f\u5730\u6f14\u793a\u4e86\u5728PostgreSQL\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u4e0b\u7684G2-Item\uff0c\u4f46\u4e0d\u5728Serializable\u4e0b\u3002\n\u7136\u800c\uff0cELLE\u662f\u4e0d\u540c\u7684\uff1a\u5b83\u5141\u8bb8\u6211\u4eec\u751f\u6210\u5e7f\u6cdb\u7684\u4e8b\u52a1\u7c7b\uff0c\u540c\u65f6\u4ecd\u7136\u5728\u7ed3\u679c\u5386\u53f2\u4e0a\u63a8\u65ad\u4e25\u683c\u7684\u5c5e\u6027\u3002\u8fd9\u79cd\u57fa\u4e8e\u5c5e\u6027\u7684\u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u6355\u83b7\u6ca1\u6709\u4eba\u60f3\u8fc7\u8981\u663e\u5f0f\u6d4b\u8bd5\u7684\u610f\u5916\u884c\u4e3a\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u5b83\u786e\u5b9a\u4e86\u5e76\u53d1\u66f4\u65b0\u548c\u63d2\u5165\u53ef\u80fd\u4f1a\u6df7\u6dc6\u51b2\u7a81\u68c0\u6d4b\u673a\u5236\uff0c\u4f7f\u5176\u8bef\u8ba4\u4e3a\u54ea\u4e2a\u4e8b\u52a1\u8d1f\u8d23\u51b2\u7a81\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8bbe\u8ba1\u7684\u5217\u8868\u8ffd\u52a0\u6d4b\u8bd5\u53ea\u9a8c\u8bc1\u4e86\u7b80\u5355\u6a21\u5f0f\u4e0a\u7684\u5c11\u6570SQL\u64cd\u4f5c\u3002\u6210\u719f\u7684SQL\u6570\u636e\u5e93(\u5982PostgreSQL)\u662f\u5177\u6709\u65e0\u6570\u4ea4\u4e92\u7ec4\u4ef6\u548c\u4f18\u5316\u7684\u590d\u6742\u6709\u673a\u4f53\u3002Jepsen\u5047\u8bbe\u6211\u4eec\u7684\u6d4b\u8bd5\u53ea\u6267\u884cPostgreSQL\u53ef\u80fd\u884c\u4e3a\u7684\u4e00\u5c0f\u90e8\u5206\u3002\n\u4e00\u5982\u65e2\u5f80\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6770\u666e\u68ee\u91c7\u53d6\u4e86\u4e00\u79cd\u5b9e\u9a8c\u6027\u7684\u5b89\u5168\u9a8c\u8bc1\u65b9\u6cd5\uff1a\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u9519\u8bef\u7684\u5b58\u5728\uff0c\u4f46\u4e0d\u80fd\u8bc1\u660e\u5b83\u4eec\u7684\u5b58\u5728\u3002\u867d\u7136\u6211\u4eec\u52aa\u529b\u5bfb\u627e\u95ee\u9898\uff0c\u4f46\u6211\u4eec\u65e0\u6cd5\u8bc1\u660e\u4efb\u4f55\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6b63\u786e\u6027\u3002\n\u7528\u6237\u5e94\u8be5\u77e5\u9053\uff0cPostgreSQL\u7684\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u5b9e\u9645\u4e0a\u662f\u5feb\u7167\u9694\u79bb--\u8fd9\u662fPostgreSQL\u793e\u533a\u65e9\u5c31\u4e86\u89e3\u7684\u4e8b\u5b9e\uff0c\u6b64\u524dKleppman\u66fe\u62a5\u9053\u8fc7\u8fd9\u4e00\u4e8b\u5b9e\u3002\u7531\u4e8eG2-Item\u5728\u53ef\u91cd\u590d\u8bfb\u53d6\u7684\u5e38\u89c1\u5f62\u5f0f\u5316\u4e0b\u662f\u88ab\u7981\u6b62\u7684\uff0c\u7528\u6237\u53ef\u80fd\u5df2\u7ecf\u8bbe\u8ba1\u4e86\u5e94\u7528\u7a0b\u5e8f\uff0c\u5047\u8bbePostgreSQL\u4e5f\u662f\u5982\u6b64\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u6539\u4e3a\u5728\u53ef\u5e8f\u5217\u5316\u9694\u79bb\u4e0b\u8fd0\u884c\u9009\u5b9a\u7684\u4e8b\u52a1\uff0c\u6dfb\u52a0\u663e\u5f0f\u9501\u5b9a\uff0c\u6216\u91cd\u65b0\u8bbe\u8ba1\u8fd9\u4e9b\u4e8b\u52a1\uff0c\u4f7f\u5176\u4e0d\u518d\u5bf9G2-Item\u654f\u611f\u3002\n\u6211\u4eec\u5efa\u8baePostgreSQL\u56e2\u961f\u66f4\u65b0\u4ed6\u4eec\u7684\u5e76\u53d1\u63a7\u5236\u6587\u6863\uff0c\u4ee5\u89e3\u51b3\u56f4\u7ed5\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u7684\u6b67\u4e49\u3002\u5f53\u524d\u7684\u6587\u6863\u6ca1\u6709\u63d0\u5230\u201c\u5feb\u7167\u9694\u79bb\u201d\u8fd9\u4e2a\u672f\u8bed--\u58f0\u660ePostgreSQL\u7684\u201c\u53ef\u91cd\u590d\u8bfb\u53d6\u201d\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u5feb\u7167\u9694\u79bb\u53ef\u4ee5\u7acb\u5373\u6f84\u6e05\u95ee\u9898\u3002\u6587\u6863\u8fd8\u53ef\u4ee5\u901a\u8fc7\u7528G-Single\u3001G2-Item\u548cG2\u66ff\u6362\u6a21\u7cca\u7684\u201c\u5e8f\u5217\u5316\u5f02\u5e38\u201d\u6765\u4e3a\u7528\u6237\u63d0\u4f9b\u66f4\u6e05\u6670\u7684\u6307\u5bfc\uff1bSI\u7981\u6b62G-Single\uff0c\u4f46\u5141\u8bb8G2-Item\u548cG2\u3002\n\u81f3\u4e8e\u5feb\u7167\u9694\u79bb\u662f\u5426\u6bd4\u53ef\u91cd\u590d\u8bfb\u53d6\u66f4\u5f3a\uff0c\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u662f\u91c7\u7528Berenson\u7b49\u4eba\u7684\u5b9a\u4e49\uff0c\u5e76\u58f0\u660e\u5feb\u7167\u9694\u79bb\u4e0e\u53ef\u91cd\u590d\u8bfb\u53d6\u662f\u4e0d\u53ef\u6bd4\u62df\u7684\uff1aSI\u5141\u8bb8RR\u7981\u6b62\u7684\u4e00\u4e9b\u5f02\u5e38(\u4f8b\u5982\u5199\u5165\u504f\u5dee)\uff0c\u4f46\u662fRR\u5141\u8bb8SI\u7981\u6b62\u7684\u5176\u4ed6\u5f02\u5e38(\u4f8b\u5982\u5e7b\u5f71)\u3002\u8fd9\u6837\u505a\u5c06\u4f7fPostgreSQL\u4e0eBerenson\u3001Adya\u3001Bailis\u7b49\u4eba\u957f\u8fbe25\u5e74\u7684\u4e8b\u52a1\u9694\u79bb\u5b66\u672f\u7ebf\u7d22\u4fdd\u6301\u4e00\u81f4\u3002\n\u7136\u800c\uff0c\u6b63\u5982Ports&amp\uff1bGrittner\u5728\u4ed6\u4eec\u5173\u4e8ePostgreSQL\u7684\u53ef\u5e8f\u5217\u5316\u5feb\u7167\u9694\u79bb\u7684\u8bba\u6587\u4e2d\u6240\u6307\u51fa\u7684\u90a3\u6837\uff0cANSI\u89c4\u8303\u662f\u6a21\u68f1\u4e24\u53ef\u7684\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u7684G2\u9879\u5f02\u5e38\u5e76\u4e0d\u4e00\u5b9a\u8fdd\u53cd\u5bf9\u53ef\u91cd\u590d\u8bfb\u53d6\u6240\u7981\u6b62\u7684\u73b0\u8c61\u7684\u4e25\u683c\u89e3\u91ca\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5efa\u8baePostgreSQL\u663e\u5f0f\u58f0\u660e\u4ed6\u4eec\u9009\u62e9\u4e25\u683c\u7684\u89e3\u91ca\uff0c\u800c\u4e0d\u662f\u5bbd\u6cdb\u7684\u89e3\u91ca\u3002\n\u4f3c\u4e4e\u6ca1\u6709\u4efb\u4f55\u7248\u672c\u7684PostgreSQL\u80fd\u591f\u4fdd\u8bc1\u53ef\u5e8f\u5217\u5316\u3002\u7528\u6237\u5e94\u8be5\u610f\u8bc6\u5230\u5e76\u53d1\u66f4\u65b0\u548c\u63d2\u5165\u4e8b\u52a1\u53ef\u80fd\u8868\u73b0\u4e3aG2-Item\u3002\u4e89\u7528\u7a0b\u5ea6\u9ad8\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5c24\u5176\u5bb9\u6613\u53d7\u5230\u5f71\u54cd\u3002PostgreSQL\u56e2\u961f\u5df2\u7ecf\u7f16\u5199\u4e86\u91cd\u73b0\u8be5\u95ee\u9898\u7684\u6d4b\u8bd5\uff0c\u5e76\u6b63\u5728\u8bc4\u4f30\u8865\u4e01\uff1b\u6211\u4eec\u5efa\u8bae\u5728\u4e0b\u4e00\u4e2a\u6b21\u8981\u7248\u672c\u53ef\u7528\u65f6\u8fdb\u884c\u5347\u7ea7\u3002\n\u6700\u540e\u8981\u6ce8\u610f\u7684\u662f\uff1a\u6211\u4eec\u7684\u6d4b\u8bd5\u8868\u660ePostgreSQL\u63d0\u4f9b\u7684\u4e0d\u4ec5\u4ec5\u662f\u5feb\u7167\u9694\u79bb\u548c\u53ef\u5e8f\u5217\u5316(\u6216\u8005\uff0c\u5728\u53ef\u5e8f\u5217\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u65e6G2\u9879\u9519\u8bef\u5f97\u5230\u89e3\u51b3\uff0c\u5b83\u5c06\u63d0\u4f9b)\u66f4\u591a\u7684\u529f\u80fd\u3002\u6211\u4eec\u7684\u5386\u53f2\u8bb0\u5f55\u4f3c\u4e4e\u4e0e\u5f3a\u5927\u7684\u5feb\u7167\u9694\u79bb\u548c\u4e25\u683c\u7684\u53ef\u5e8f\u5217\u5316\u4e00\u81f4\uff0c\u8fd9\u4e24\u8005\u9664\u4e86\u9632\u6b62\u5e38\u89c1\u7684\u4f9d\u8d56\u56fe\u5f02\u5e38\u4e4b\u5916\uff0c\u8fd8\u786e\u4fdd\u4e86\u4e0e\u5b9e\u65f6\u8ba2\u5355\u7684\u517c\u5bb9\u6027\u3002\u6211\u4eec\u4e0d\u786e\u5b9a\u8fd9\u662f\u6545\u610f\u7684\uff0c\u8fd8\u662f\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u662f\u5982\u6b64\uff0c\u4f46\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0cPostgreSQL\u5e94\u8be5\u53ef\u4ee5\u81ea\u7531\u5730\u5ba3\u79f0\u8fd9\u4e9b\u66f4\u5f3a\u7684\u4e00\u81f4\u6027\u6a21\u578b\uff01\nPostgreSQL\u7684\u8d21\u732e\u8005\u6b63\u5728\u8bc4\u4f30\u4e00\u4e2a\u8865\u4e01\uff0c\u4ee5\u89e3\u51b3\u6211\u4eec\u53d1\u73b0\u7684\u5e8f\u5217\u5316\u51b2\u7a81\uff0c\u5e76\u7f16\u5199\u5173\u4e8e\u5feb\u7167\u9694\u79bb\u4e0e\u53ef\u91cd\u590d\u8bfb\u53d6\u7684\u6f84\u6e05\u6587\u6863\u3002\nELLE\u7684\u5217\u8868\u9644\u52a0\u5de5\u4f5c\u8d1f\u8f7d\u4ec5\u9650\u4e8e\u8bfb\u53d6\u548c\u9644\u52a0\u4e0e\u5217\u8868\u540c\u6784\u7684\u6570\u636e\u7c7b\u578b\u3002\u6211\u4eec\u65e0\u6cd5\u6d4b\u8bd5\u5220\u9664\u3001\u66ff\u6362\u6216\u5176\u4ed6\u5217\u8868\u64cd\u4f5c\uff1a\u8fd9\u4e9b\u4ee3\u7801\u8def\u5f84\u4e2d\u53ef\u80fd\u5b58\u5728\u6f5c\u5728\u95ee\u9898\u3002\u6211\u4eec\u8fd8\u6709\u5176\u4ed6\u5de5\u4f5c\u8d1f\u8f7d\u53ef\u7528\u4e8e\u5bc4\u5b58\u5668\u548c\u96c6\u5408\uff0c\u5c3d\u7ba1\u652f\u6301\u8f83\u5f31\u7684\u63a8\u65ad\u3002\u4e24\u8005\u90fd\u53ef\u4ee5\u5728PostgreSQL\u4e0a\u5b9e\u73b0\uff0c\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u8986\u76d6\u66f4\u591a\u7684\u9886\u57df\u3002\n\u6211\u4eec\u4f3c\u4e4e\u4e0d\u592a\u53ef\u80fd\u6709\u6548\u5730\u68c0\u67e5\u751a\u81f3\u5efa\u6a21\u73b0\u4ee3SQL\u6570\u636e\u5e93\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002\u805a\u5408\u3001\u5b50\u67e5\u8be2\u548c\u5b58\u50a8\u7684p\u3002\n..", "note_en": "PostgreSQL is a widely-known relational database system. We evaluated PostgreSQL using Jepsen\u2019s new transactional isolation checker  Elle, and found that transactions executed with serializable isolation on a single PostgreSQL instance were not, in fact, serializable. Under normal operation, transactions could occasionally exhibit G2-item: an anomaly involving a set of transactions which (roughly speaking) mutually fail to observe each other\u2019s writes. In addition, we found frequent instances of G2-item under PostgreSQL \u201crepeatable read\u201d, which is explicitly proscribed by  commonly-cited formalizations of repeatable read. As previously reported by  Martin Kleppmann, this is due to the fact that PostgreSQL \u201crepeatable read\u201d is actually snapshot isolation. This behavior is allowable due to long-discussed ambiguities in the ANSI SQL standard, but could be surprising for users familiar with the literature. A patch for the bug we found in serializability is scheduled for the next minor release, on August 13th, and the presence of G2-item under repeatable read could be readily addressed through documentation. This work was performed independently, without compensation, and conducted in accordance with the  Jepsen ethics policy.\n PostgreSQL is a major open-source relational database with a 23-year history and a broad range of features. While Jepsen\u2019s work has traditionally focused on distributed systems, our tooling is readily applicable to traditional, single-node databases. In this report, we present the results of applying Jepsen\u2019s generative concurrency testing to PostgreSQL 12.3.\n Prior to version 9.1,  PostgreSQL\u2019s documentation claimed to offer up to  serializability, \u201cas if transactions had been executed one after another, serially, rather than concurrently\u2026. The Serializable mode provides a rigorous guarantee that each transaction sees a wholly consistent view of the database.\u201d However, this was not true: PostgreSQL\u2019s \u201cserializable\u201d was in fact  snapshot isolation (SI).\n Informally, snapshot isolated systems appear to start each transaction with a fixed, instantaneous snapshot of the database, reflecting only committed state. Writes performed in a transaction appear to apply atomically at commit time, and a transaction can only commit if no other transaction has modified the same objects since the snapshot was taken. This is (as  the paper which formalized snapshot isolation made clear) not serializable: transactions whose write sets do not intersect can commit without observing each other\u2019s effects, which could lead to application-level consistency violations.\n In version 8.0, PostgreSQL\u2019s documentation  clarified that \u201cin fact PostgreSQL\u2019s Serializable mode does not guarantee serializable execution in this sense,\u201d and went on to specify that PostgreSQL lacked a predicate locking system.\n In version 9.1, PostgreSQL contributors Grittner and Ports  added support for true serializability, based on research by Cahill, R\u00f6hm, and Fekete into  serializable snapshot isolation (SSI). In short, SSI extends SI by checking, at runtime, for a dependency relationship between transactions called a  dangerous structure: a pair of adjacent read-write dependencies between three transactions. Preventing these dangerous structures, in addition to snapshot isolation\u2019s normal rules, yields only serializable executions. For the last nine years, PostgreSQL\u2019s \u201cserializable\u201d mode has justifiably  claimed to offer serializability.\n PostgreSQL\u2019s \u201crepeatable read\u201d remains snapshot isolation, but the concurrency control documentation surprisingly  does not mention the term. Instead, it offers:\n The Repeatable Read isolation level only sees data committed before the transaction began; it never sees either uncommitted data or changes committed during transaction execution by concurrent transactions\u2026 This is a stronger guarantee than is required by the SQL standard for this isolation level, and prevents all of the phenomena described in Table 13.1 except for serialization anomalies. As mentioned above, this is specifically allowed by the standard, which only describes the minimum protections each isolation level must provide.\n \u201cSerialization anomalies\u201d is a somewhat ambiguous term: the documentation simply describes it as a result which is \u201cinconsistent with all possible orderings of running those transactions one at a time\u201d. To better understand what \u201cserialization anomalies\u201d specifically entail, we devised an experiment.\n  We designed a  test harness for PostgreSQL using the  Jepsen testing library. Our test  installs PostgreSQL 12.3-1.pgdg100+1 (the current stable version) on a single Debian 10 node, or optionally connects to an existing PostgreSQL installation. We also evaluated versions 9.5.22, 10.13, and 11.8. Our test can kill PostgreSQL processes in random order to help measure crash safety, but our findings here do not require process crashes to reproduce. We used the default configuration provided by PostgreSQL\u2019s official Debian packages with only minor changes (e.g.\u00a0for binding network ports), and, during some tests, shortened autovacuum naptime and enabled more detailed logging.\n Our test workload generates  randomized transactions of append and read operations across an collection of list objects, chosen with exponential frequency. Each object is identified by a unique integer logical key. We store each object as a row in one of several tables, chosen by the hash of the key. Object keys are stored in two fields: a primary key  id, and an unindexed secondary key  sk, which we use to test access by table scans.  1 The value of each list is stored as a comma-separated  TEXT column.\n We append unique integer elements to a list identified by key (either via  id or  sk) using  INSERT ... ON CONFLICT DO UPDATE, or, alternatively, via an update, checking to see if any rows were modified, then backing off to an insert, and if  that failed, updating again. Reads return the current list of integers for a particular object, e.g.\u00a0via  SELECT (val) FROM txn0 WHERE id = ?.\n Our test applies these transactions to PostgreSQL using the JDBC PostgreSQL driver (version 42.2.12), and analyzes the resulting history using the  Elle transaction isolation checker. Elle infers a transaction dependency graph over experimentally recorded histories, and searches for cycles (and non-cyclic anomalies) in that graph. This allows us to detect a broad range of anomalies from Adya, Liskov &amp; O\u2019Neil\u2019s  Generalized Isolation Level Definitions, including G0 (dirty write), G1a (aborted read), G1b (intermediate read), G1c (cyclic information flow), G-single (read skew), and G2-item (anti-dependency cycle). We also check for internal consistency, verifying that transactions observe values consistent with their own prior writes, duplicate effects, and garbage values (e.g. elements which were never written).\n  In most respects, PostgreSQL behaved as expected: both read uncommitted and read committed prevent write skew and aborted reads. We observed no internal consistency violations. However, we have two surprising results to report. The first is that PostgreSQL\u2019s \u201crepeatable read\u201d is weaker than repeatable read, at least as defined by Berenson, Adya, Bailis, et al.\u00a0This is not necessarily wrong: the ANSI SQL standard is ambiguous. The second result, which is  definitely wrong, is that PostgreSQL\u2019s \u201cserializable\u201d isolation level isn\u2019t serializable: it allows G2-item during normal operation.\n  PostgreSQL\u2019s \u201crepeatable read\u201d isolation level is actually snapshot isolation, and we observed no SI-violating anomalies when using \u201crepeatable read\u201d. In fact, the histories we recorded were consistent with  strong snapshot isolation, a stronger consistency model which prohibits stale reads and other realtime anomalies.\n However, we observed numerous violations of repeatable read, as formally defined by Berenson, Adya, et al.\u00a0For example, consider  this history, which produced roughly 140 anti-dependency cycles per minute. Here\u2019s a short cycle from that history consisting of a trio of transactions\u2014each of which appeared to execute before the next.\n  The top transaction begins by reading key 190, and finds the list  [1 2]. The middle transaction appends 4 to key 190, resulting in the version  [1 2 4]. Since that write overwrote the state that the top transaction read, we know that the middle transaction must have executed after the top transaction. We call this relationship an  anti-dependency, and represent it as an edge labeled  rw.\n The middle transaction appended 5 to key 190, which was then visible to the bottom transaction\u2019s read of  [1 2 4 5]. This write-read dependency is represented by an edge labeled  wr. However, the bottom transaction read key 188, and did  not observe the top transaction\u2019s append of 8. That anti-dependency implies the bottom transaction must have executed before the top transaction: a cycle!\n This dependency cycle contains two anti-dependency edges, which makes it a G2 phenomenon in the language of  Adya\u2019s formalism. Since all of these reads occurred when reading objects by their primary key  2, it is also G2-item: a phenomenon expressly prohibited under Adya\u2019s formalization of repeatable read. We believe this is one type of \u201cserialization anomaly\u201d referred to in the PostgreSQL documentation.\n However, these anomalies  are allowable under ANSI SQL\u2019s definition of repeatable read, thanks to ambiguously worded plain-English definitions of prohibited phenomena. In fact, this ambiguity is part of what  prompted Berenson, Bernstein et al.\u00a0to write  A Critique of ANSI SQL Isolation Levels, and to formalize the definition of snapshot isolation in the first place. In that work, Berenson et al.\u00a0develop two interpretations of the ANSI anomalies: one strict, and one broad. They argue that the strict interpretations fail to capture behaviors which are intuitively incorrect, and that ANSI  meant to define the broad ones.\n Strict interpretations A1, A2, and A3 have unintended weaknesses. The correct interpretations are the Broad ones.\n Under the broad interpretations preferred by Berenson et al., snapshot isolation is  not comparable with repeatable read: SI allows histories RR proscribes, and vice versa. Under the strict interpretation, SI is  stronger than RR (indeed, SI is stronger than anomaly serializable!), and these G2-item anomalies are allowed under repeatable read.\n Whether PostgreSQL\u2019s repeatable-read behavior is correct therefore depends on one\u2019s interpretation of the standard. It is surprising that a database based on snapshot isolation would reject the strict interpretation chosen by the seminal paper on SI, but on reflection, the behavior  is defensible.\n  A more serious problem arose when we tested PostgreSQL\u2019s serializable isolation level: it  also exhibited G2-item under normal operation. In  this two-minute test run, Jepsen detected six cases of G2-item. For example, consider this pair of transactions, in which each failed to observe the other\u2019s insert:\n  Alternatively, consider the following trio of transactions. The top transaction missed the middle transaction\u2019s creation of key 1670, which  was observed by the bottom, read-only transaction. However, that bottom transaction failed, in turn, to observe the first transaction\u2019s creation of key 1671. Notably, the read-write transactions are serializable if taken by themselves. The read-only transaction is necessary for this cycle: it observes the effects of some, but not all, \u201clogically prior\u201d transactions.\n  Indeed, these dependency graphs correspond exactly to examples 1 (\u201cSimple Write Skew\u201d) and 2 (\u201cBatch Processing\u201d) from the PostgreSQL  Serializable Snapshot Isolation paper, shown below. Their SQL statements are different, of course\u2014but like Example 1, our first cycle involves a pair of transactions which read one key and write another, each failing to observe the other\u2019s effects; and our second involves a read-only transaction which precedes, via two adjacent rw anti-dependencies, a transaction which wrote state which the read-only transaction observed. These cycles are precisely what PostgreSQL\u2019s SSI implementation is meant to prevent!\n  Every instance of G2-item we observed under serializable isolation involved at least one read-write conflict for a  freshly inserted row. Cycles could involve rw anti-dependencies on updates to existing rows, but at least one insert appeared to be necessary.\n Following a  discussion with PostgreSQL contributors, Peter Geoghegan identified  the likely cause of this issue: the conflict detection mechanism could, given three concurrent transactions, incorrectly identify an updating transaction\u2019s transaction ID (XID) as responsible for  both the original and updated versions of a tuple, rather than using the transaction ID which originally created the tuple. By flagging the wrong transaction as a potential conflict, it allowed a transaction to commit while failing to observe a prior transaction\u2019s writes. Geoghegan, working with other members of the PostgreSQL community, has  written a patch to flag the correct transaction ID, and added a  regression test. In their testing, this appears to resolve the issue.\n This code  has gone essentially untouched since the introduction of serializable snapshot isolation in 2011. Together, we confirmed that this bug was present in PostgreSQL 9.5.22, 10.13, 11.8, 12.3, and 13; we assume it is present in every extant version.\n  In our testing of PostgreSQL 12.3, transactions executed at read committed appeared correct: we never observed G0 (dirty write), G1a (aborted read), or G1b (intermediate read). PostgreSQL \u201crepeatable read\u201d appears consistent with strong snapshot isolation, but allows G2-item, which is prohibited in formalizations of repeatable read. However, this behavior could be interpreted as consistent with ANSI SQL repeatable read. Finally, PostgreSQL \u201cserializable\u201d allows G2-item under normal operation, due to a bug in the conflict detection mechanism. A  patch has been committed, and this class of serializability violations should be resolved in the next minor release\u2014presently scheduled for August 13th.\n PostgreSQL has an  extensive suite of hand-picked examples, called  isolationtester, to verify concurrency safety. Moreover, independent testing, like Martin Kleppmann\u2019s  Hermitage has also confirmed that PostgreSQL\u2019s serializable level prevents (at least some!) G2 anomalies. Why, then, did we immediately find G2-item with Jepsen? How has this bug persisted for so long?\n PostgreSQL\u2019s isolation tests, Hermitage, and most transactional Jepsen tests (prior to Elle) relied on executing a handful of cleverly constructed transactions with hand-proven invariants. For instance,  this isolationtester specification verifies serializability by performing a sequence of transactions proposed by Fekete, O\u2019Neil, &amp; O\u2019Neil in  A Read-Only Transaction Anomaly Under Snapshot Isolation. Jepsen\u2019s  bank test is based on a narrowly-defined class of transactions which preserves a total-balance invariant under snapshot isolation. Hermitage checks for G2-item by performing a pair of  symmetric read and update transactions\u2014which  does successfully demonstrate G2-item under PostgreSQL \u201crepeatable read\u201d, but not under serializable.\n Elle, however, is different: it allows us to generate a broad class of transactions, while still inferring strict properties over the resulting histories. This property-based approach allows us to catch unexpected behaviors that no one thought to explicitly test. In this case, it identified the possibility that concurrent updates and inserts could confuse the conflict-detection mechanism into misidentifying which transaction was responsible for a conflict.\n That said, the list-append test we devised here verifies only a handful of SQL operations over a simple schema. Mature SQL databases like PostgreSQL are complex organisms with a myriad of interacting components and optimizations. Jepsen assumes that our tests exercise only a fraction of PostgreSQL\u2019s possible behaviors.\n As always, we note that Jepsen takes an experimental approach to safety verification: we can prove the presence of bugs, but not their absence. While we try hard to find problems, we cannot prove the correctness of any distributed system.\n  Users should be aware that PostgreSQL\u2019s \u201crepeatable read\u201d is in fact snapshot isolation\u2014a fact long-understood in the PostgreSQL community and previously reported by  Kleppman. Since G2-item is prohibited under common formalizations of repeatable read, users may have designed applications assuming this held true for PostgreSQL. In this case, users may wish to run selected transactions under serializable isolation instead, add explicit locking, or redesign those transactions such that they are no longer sensitive to G2-item.\n We recommend that the PostgreSQL team update their concurrency control documentation to resolve the ambiguity around \u201crepeatable read\u201d. The  current documentation does not mention the term \u201csnapshot isolation\u201d\u2014stating that PostgreSQL\u2019s \u201crepeatable read\u201d actually means snapshot isolation would immediately clarify matters. The documentation could also provide clearer guidance to users by replacing the ambiguous \u201cserialization anomaly\u201d with G-single, G2-item, and G2; SI prohibits G-single but allows G2-item and G2.\n As for whether snapshot isolation is stronger than repeatable read, one possible solution would be to adopt Berenson et al.\u2019s definitions, and state that snapshot isolation is incomparable with repeatable read: SI allows some anomalies which are prohibited under RR (e.g.\u00a0write skew), but RR allows other anomalies (e.g.\u00a0phantoms) which are prohibited under SI. Doing so would bring PostgreSQL in line with a twenty-five year thread of scholarship on transactional isolation by  Berenson,  Adya,  Bailis, et al.\n However, as Ports &amp; Grittner note in their  paper on PostgreSQL\u2019s serializable snapshot isolation, the ANSI specification  is ambiguous, and the G2-item anomalies we observed do not necessarily violate the strict interpretation of the phenomena prohibited by repeatable read. In this case, we suggest that PostgreSQL explicitly state their choice of the strict, rather than broad, interpretation.\n It appears that no version of PostgreSQL has ever guaranteed serializability. Users should be aware that concurrent update and insert transactions may exhibit G2-item. High-contention workloads are especially susceptible. The PostgreSQL team has written tests to reproduce the problem and is evaluating a patch; we recommend upgrading once the next minor release becomes available.\n One final note: our testing suggests that PostgreSQL provides (or, in the case of serializability, will provide once the G2-item bug is resolved)  more than snapshot isolation and serializability. Our histories appeared consistent with  strong snapshot isolation and  strict serializability, both of which ensure compatibility with a real-time order, in addition to preventing the usual dependency-graph anomalies. We are unsure if this is intentional, or whether it holds in all cases, but if so, PostgreSQL should feel free to claim these stronger consistency models!\n  PostgreSQL\u2019s contributors are evaluating a patch to resolve the serializability violation we discovered, and writing clarifying documentation for snapshot isolation versus repeatable read.\n Elle\u2019s list-append workload is limited to reads and appends over datatypes which are isomorphic to lists. We have no way to test deletions, replacements, or other list operations: there could be latent issues in those codepaths. We have other workloads available for registers and sets, albeit supporting weaker inferences. Both could be implemented on PostgreSQL, which could help cover additional ground.\n It seems unlikely that we can efficiently check, or even model,  all functionality provided by modern SQL databases. Aggregations, subqueries, and stored p\n......", "posttime": "2020-06-12 21:57:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgresql,\u6770\u666e\u68ee,jepsen", "title": "\u6770\u666e\u68ee\uff1aPostgreSQL 12.3", "title_en": "Jepsen: PostgreSQL 12.3", "transed": 1, "url": "http://jepsen.io/analyses/postgresql-12.3", "via": "", "real_tags": ["\u6770\u666e\u68ee", "jepsen"]}, {"category": "", "categoryclass": "", "imagename": "2d94d5529d0b7c91cd5b9d44602205b3.jpg", "infoid": 1006282, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SpaceX\u6700\u8fd1\u7ecf\u5386\u4e86\u5f88\u591a\u8d77\u4f0f\u30025\u670830\u65e5\u661f\u671f\u516d\uff0c\u8be5\u516c\u53f8\u521b\u9020\u4e86\u5386\u53f2\uff0c\u4ed6\u4eec\u7684\u673a\u7ec4\u4eba\u5458\u9f99\u98de\u8239\u4ece\u7f8e\u56fd\u5b87\u822a\u5c40\u80af\u5c3c\u8fea\u822a\u5929\u4e2d\u5fc3\u8d77\u98de\uff0c\u8f7d\u7740\u4e24\u540d\u5b87\u822a\u5458\u8fdb\u5165\u592a\u7a7a\u3002\u4f46\u5c31\u5728\u4e00\u5929\u524d\uff0cSpaceX\u5de5\u7a0b\u5e08\u548c\u5730\u52e4\u4eba\u5458\u5728\u9759\u6001\u5c04\u51fb\u6d4b\u8bd5\u4e2d\u76ee\u7779\u4e86\u4ed6\u4eec\u7684\u7b2c\u56db\u8258\u661f\u9645\u98de\u8239\u539f\u578b(SN4)\u5728\u8bd5\u9a8c\u53f0\u4e0a\u7206\u70b8\uff0c\u4f7f\u5176\u6210\u4e3a\u8fde\u7eed\u7b2c\u56db\u4e2a\u4e22\u5931\u7684\u539f\u578b\u3002\n\u4f46\u6839\u636eSpaceX\u4e00\u540d\u5de5\u7a0b\u5e08\u548c\u9ad8\u7ba1\u6700\u8fd1\u7684\u6d88\u606f\uff0c\u4ee5\u53ca\u57c3\u9686\u00b7\u9a6c\u65af\u514b(Elon Musk)\u53d1\u7ed9SpaceX\u5458\u5de5\u7684\u4e00\u5c01\u5185\u90e8\u7535\u5b50\u90ae\u4ef6\uff0c\u5f88\u660e\u663e\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u5168\u529b\u7814\u53d1\u661f\u9645\u98de\u8239\u539f\u578b\uff0c\u5e76\u53ef\u80fd\u5728\u5e74\u5e95\u524d\u8fdb\u884c\u8f68\u9053\u98de\u884c\u3002\u4e00\u4e2a\u96c4\u5fc3\u52c3\u52c3\u7684\u76ee\u6807\uff0c\u4f46\u4f60\u4e0d\u80fd\u6210\u4e3a\u4e00\u5bb6\u516c\u53f8\u7684\u8d1f\u8d23\u4eba\uff0c\u8fd9\u5bb6\u516c\u53f8\u628a\u53ef\u91cd\u7528\u6027\u4f5c\u4e3a\u4e00\u4ef6\u4e8b\uff0c\u5e76\u901a\u8fc7\u60b2\u89c2\u4e3b\u4e49\u8005\u6765\u6062\u590d\u7f8e\u56fd\u672c\u571f\u7684\u53d1\u5c04\u80fd\u529b\uff01\n\u4e0d\u4e45\u524d\uff0cSpaceX\u516c\u53f8\u7684\u5de5\u7a0b\u5e08\u786e\u5b9a\u4e86SN4\u7206\u70b8\u7684\u539f\u56e0\uff0c\u79f0\u8fd9\u662f\u4e00\u6761\u63a8\u8fdb\u5242\u7ba1\u7ebf\u65ad\u5f00\u7684\u7ed3\u679c\u3002\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e2a\u4e3b\u8981\u7684\u6db2\u4f53\u7532\u70f7\u6cc4\u6f0f\uff0c\u7136\u540e\u70b9\u71c3\uff0c\u5bfc\u81f4\u4e86\u58ee\u89c2\u7684\u7206\u70b8\uff0c\u5b8c\u5168\u6467\u6bc1\u4e86SN4\u3002\u8fd9\u4e0e\u4e4b\u524d(5\u670819\u65e5)\u9759\u6001\u7740\u706b\u6d4b\u8bd5\u65f6\u53d1\u751f\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u5f53\u65f6SN4\u5e95\u90e8\u9644\u8fd1\u56e0\u7532\u70f7\u7ba1\u7ebf\u7206\u88c2\u800c\u53d1\u751f\u5c0f\u706b\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u731b\u79bd\u53d1\u52a8\u673a\u5728\u7834\u88c2\u53d1\u751f\u524d\u5df2\u7ecf\u70b9\u706b\u6574\u6574\u4e24\u5206\u949f\uff0c\u6709\u6548\u5730\u5b8c\u6210\u4e86\u53d1\u52a8\u673a\u7684\u7b2c\u4e94\u6b21\u9759\u6001\u70b9\u706b\u8bd5\u9a8c\u3002\u7ed3\u5408\u5176\u4ed6\u6210\u529f\uff0cSpaceX\u7684\u603b\u5de5\u7a0b\u5e08\u6c49\u65af\u00b7\u79d1\u5c3c\u683c\u65af\u66fc(Hans K\u00f6nigsmann)\u6700\u8fd1\u8868\u793a\uff0c\u8df3\u8dc3\u6d4b\u8bd5\u53ef\u80fd\u5f88\u5feb\u5c31\u4f1a\u5f00\u59cb\uff0c\u8fd9\u5bf92020\u5e74\u524d\u7684\u8f68\u9053\u98de\u884c\u6765\u8bf4\u662f\u4e2a\u597d\u5146\u5934\u3002\u6b63\u5982\u4ed6\u5728\u63a5\u53d7\u5fb7\u56fd\u520a\u7269\u201c\u660e\u955c\u201d(Der Speigel)\u91c7\u8bbf\u65f6\u6240\u8bf4\uff1a\n\u201c\u6211\u5e0c\u671b\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5468\u5185\u8fdb\u884c\u9996\u6b21\u8bd5\u98de\uff0c\u6bd4\u5982\u8bf4\uff0c\u5728150\u7c73\u7684\u9ad8\u5ea6\u8fdb\u884c\u8bd5\u98de\u3002\u6211\u4eec\u4f1a\u8fd9\u6837\u505a\u51e0\u6b21\u3002\u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u4eca\u5e74\u5e74\u5e95\u8fdb\u5165\u8f68\u9053\u3002\u6216\u8005\u53ef\u80fd\u9700\u8981\u66f4\u957f\u4e00\u70b9\u7684\u65f6\u95f4\u3002\u201c\u3002\n\u8fd9\u8bdd\u51fa\u81ea\u516c\u53f8\u603b\u5de5\u7a0b\u5e08\u4e4b\u53e3\uff0c\u4e0d\u80fd\u6389\u4ee5\u8f7b\u5fc3\u3002\u4ed6\u7684\u4f30\u8ba1\u662f\u6b63\u786e\u7684\uff0c\u5047\u8bbe\u8df3\u8dc3\u6d4b\u8bd5\u5728\u672a\u6765\u51e0\u5468\u5f00\u59cb\uff0c\u8f68\u9053\u98de\u884c\u53ef\u80fd\u57282020\u5e74\u5e95\u4e4b\u524d\u53d1\u751f\u3002\u7b2c\u4e00\u6b21\u6d4b\u8bd5\u5c06\u6d89\u53ca\u4e00\u4e2a\u5355\u5f15\u64ce\u539f\u578b\uff0c\u98de\u884c\u5230150\u7c73(~500\u82f1\u5c3a)\u7684\u9ad8\u5ea6\uff0c\u7136\u540e\u8fdb\u884c\u63a7\u5236\u7740\u9646\u3002\n\u8fd9\u5c06\u4eceSpaceX\u505c\u6b62\u7684StarHopper\u539f\u578b\u5f00\u59cb\uff0c\u8be5\u539f\u578b\u4e8e2019\u5e748\u670825\u65e5\u5b8c\u6210\u4e86150\u7c73\u7684\u8df3\u8dc3\u6d4b\u8bd5\u3002\u8003\u8651\u5230SpaceX\u5728\u8fc7\u53bb\u4e00\u5e74\u4e2d\u7ecf\u5386\u7684\u6240\u6709\u632b\u6298\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u5047\u8bbe\u8f68\u9053\u98de\u884c\u53ef\u80fd\u5728\u516d\u4e2a\u6708\u540e\u8fdb\u884c\uff0c\u8fd9\u6709\u70b9\u4e50\u89c2\u3002\u4f46\u8fd9\u4e0eSpaceX\u7684\u5feb\u901f\u539f\u578b\u548c\u8fed\u4ee3\u65b9\u6cd5\u662f\u4e00\u81f4\u7684\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u4f7f\u4ed6\u4eec\u80fd\u591f\u5feb\u901f\u5730\u521b\u5efa\u539f\u578b\uff0c\u5728\u8bbe\u8ba1\u4e0a\u6709\u5f88\u5c0f\u7684\u53d8\u5316\uff0c\u5e76\u4ece\u6bcf\u4e00\u4e2a\u9519\u8bef\u4e2d\u5b66\u4e60\u3002\u8fd9\u6b63\u662fSpaceX\u516c\u53f8\u81ea2020\u5e74\u521d\u4ee5\u6765\u4e00\u76f4\u5728\u505a\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u8981\u628a\u5b83\u4eec\u63a8\u5230\u6781\u9650\uff0c\u5feb\u901f\u66f4\u6362\uff0c\u7528\u7ec4\u5408\u540e\u7684\u6570\u636e\u6765\u6539\u5584\u6574\u4f53\u8bbe\u8ba1\u3002\u5728\u8fd9\u65b9\u9762\uff0cSpaceX\u6b63\u5728\u9075\u5faa\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5728\u963f\u6ce2\u7f57\u65f6\u4ee3\u6240\u505a\u7684\u76f8\u540c\u65b9\u6cd5\u3002\n\u6309\u7167\u8fd9\u79cd\u65b9\u6cd5\uff0cSpaceX\u516c\u53f8\u6b63\u5728\u4f7f\u7528\u4ed6\u4eec\u7684SN5\u539f\u578b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5de5\u7a0b\u5e08\u4eec\u5728\u8be5\u516c\u53f8\u4f4d\u4e8e\u535a\u5361\u5947\u5361\u7684\u5357\u5f97\u514b\u8428\u65af\u5dde\u53d1\u5c04\u573a\u5b8c\u6210\u4e86\u8fd9\u4e00\u539f\u578b\u7684\u5efa\u9020\u3002\u6b64\u5916\uff0cCNBC\u6700\u8fd1\u8fd8\u83b7\u5f97\u4e86\u4e00\u5c01\u5168\u516c\u53f8\u8303\u56f4\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u9a6c\u65af\u514b\u5728\u90ae\u4ef6\u4e2d\u6307\u793a\u5458\u5de5\u201c\u620f\u5267\u6027\u5730\u3001\u7acb\u5373\u201d\u52a0\u5feb\u201c\u661f\u9645\u98de\u8239\u201d\u7684\u5f00\u53d1\u3002\n\u9a6c\u65af\u514b\u57286\u67086\u65e5(\u661f\u671f\u516d)\u4f20\u9605\u4e86\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u4ed6\u8868\u793a\uff0c\u6240\u6709SpaceX\u4eba\u5458\u90fd\u88ab\u544a\u77e5\u201c\u8bf7\u8003\u8651SpaceX\u7684\u9996\u8981\u4efb\u52a1(\u9664\u4e86\u4efb\u4f55\u53ef\u4ee5\u964d\u4f4e\u201d\u9f99\u201c\u8fd4\u56de\u98ce\u9669\u7684\u4e8b\u60c5)--\u201d\u661f\u9645\u98de\u8239\u201c\u3002\u201d\u8003\u8651\u5230\u4e58\u5458\u9f99\u7684\u6210\u529f\u53d1\u5c04\uff0cSpaceX\u5df2\u7ecf\u5c65\u884c\u4e86\u4f5c\u4e3aNASA\u5546\u4e1a\u4e58\u5458\u8ba1\u5212\u4e00\u90e8\u5206\u7684\u8d23\u4efb\uff0c\u8fd9\u662f\u9002\u5f53\u7684\u3002\n\u8be5\u8ba1\u5212\u7684\u76ee\u7684\u662f\u901a\u8fc7\u5236\u9020\u80fd\u591f\u8f7d\u7740\u5b87\u822a\u5458\u5f80\u8fd4\u56fd\u9645\u7a7a\u95f4\u7ad9(ISS)\u7684\u4e58\u5458\u7ea7\u822a\u5929\u5668\uff0c\u6062\u590d\u7f8e\u56fd\u56fd\u5185\u7684\u53d1\u5c04\u80fd\u529b\u3002\u673a\u7ec4\u4eba\u5458\u9f99\u662fSpaceX\u5bf9\u8be5\u9879\u76ee\u7684\u8d21\u732e\uff0c\u800c\u6ce2\u97f3\u516c\u53f8\u91c7\u53d6\u7684\u662fCST-100\u661f\u7a7a\u5ba2\u673a\u7684\u5f62\u5f0f-\u5728\u83b7\u5f97\u8ba4\u8bc1\u4e4b\u524d\uff0c\u8be5\u516c\u53f8\u4ecd\u7136\u9700\u8981\u6210\u529f\u5730\u5b8c\u6210\u56fd\u9645\u7a7a\u95f4\u7ad9\u7684\u65e0\u4eba\u548c\u6709\u4eba\u4efb\u52a1\u3002\n\u968f\u7740\u201c\u4e58\u5458\u9f99\u201d\u7684\u8ba4\u8bc1\uff0cSpaceX\u516c\u53f8\u7684\u5168\u90e8\u6ce8\u610f\u529b\u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u6295\u5411\u4ed6\u4eec\u7684\u4e0b\u4e00\u4ee3\u8d85\u91cd\u578b\u53d1\u5c04\u7cfb\u7edf\u3002\u4e0e\u5176\u524d\u8eab\u4e00\u6837\uff0c\u4e0b\u4e00\u6b65\u5c06\u8fdb\u884c\u4f4e\u6e29\u8d1f\u8f7d\u6d4b\u8bd5\uff0c\u7136\u540e\u5bf9\u5176\u552f\u4e00\u7684\u731b\u79bd\u53d1\u52a8\u673a\u8fdb\u884c\u9759\u6001\u70b9\u706b\u6d4b\u8bd5\u3002\u4e00\u65e6\u5b8c\u6210\uff0c\u5c31\u6709\u7406\u7531\u8ba4\u4e3aSpaceX\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5468\u5185\u4f7f\u7528SN5\u8fdb\u884c150\u7c73\u8df3\u8dc3\u6d4b\u8bd5\u3002\n\u9664\u975e\u6709\u4efb\u4f55\u989d\u5916\u7684\u632b\u6298\uff0cSN5\u53ef\u4ee5\u5b89\u88c5\u4e00\u4e2a\u9f3b\u9525\uff0c\u895f\u7ffc\uff0c\u5e76\u5b89\u88c5\u4e09\u4e2a\u731b\u79bd\u53d1\u52a8\u673a\u6765\u6267\u884c20\u516c\u91cc(\u7ea665,600\u82f1\u5c3a\u621612\u82f1\u91cc)\u7684\u98de\u884c\uff0c\u8fd9\u5c06\u4ee5\u8d85\u97f3\u901f\u518d\u5165\u548c\u63a7\u5236\u7740\u9646\u7ed3\u675f\u3002\u8fd9\u5c06\u662f\u4f7f\u7528\u516d\u4e2a\u731b\u79bd\u53d1\u52a8\u673a\u8fdb\u884c\u5168\u9762\u8f68\u9053\u98de\u884c\u4e4b\u524d\u7684\u6700\u540e\u4e00\u6b65\uff0c\u968f\u540e\u662f\u5b8c\u6210\u661f\u9645\u98de\u8239\u7684\u8bbe\u8ba1\u5e76\u5f00\u59cb\u5546\u4e1a\u751f\u4ea7\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u516c\u53f8\u8fd8\u5c06\u81f4\u529b\u4e8e\u53d1\u5c04\u7cfb\u7edf\u7684\u8d85\u91cd\u578b\u90e8\u4ef6\u3002\u5c31\u50cf\u661f\u9645\u98de\u8239\u4e00\u6837\uff0c\u8fd9\u5c06\u5305\u62ec\u5bf9\u539f\u578b\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3001\u53d1\u52a8\u673a\u6d4b\u8bd5\u548c\u9010\u6b65\u63d0\u9ad8\u8df3\u8dc3\u6d4b\u8bd5\u3002\u4e00\u65e6\u96c6\u6210\uff0c\u53d1\u5c04\u7cfb\u7edf\u5c06\u80fd\u591f\u5c65\u884cSpaceX\u7684\u627f\u8bfa\uff0c\u5373\u63d0\u4f9b\u6709\u6548\u8f7d\u8377\u548c\u673a\u7ec4\u4eba\u5458\u670d\u52a1\uff0c\u4ee5\u652f\u6301Artemis\u9879\u76ee\uff0c\u5f00\u5c55\u6708\u7403\u65c5\u6e38\uff0c\u5e76\u5c06\u4eba\u9001\u4e0a\u706b\u661f\u3002\nNASA\u548cSpaceX\u90fd\u5e0c\u671b\u5728\u672a\u6765\u51e0\u5e74\u5185\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002\u5373\u4f7f\u65f6\u95f4\u8868\u8bc1\u660e\u662f\u7075\u6d3b\u7684\uff0c\u90a3\u4e5f\u80af\u5b9a\u662f\u4ee4\u4eba\u5174\u594b\u7684\u65f6\u523b\uff01", "note_en": "SpaceX has had a lot of ups and downs lately. On  Saturday, May 30th, the company made history when their  Crew Dragon spacecraft took off from the NASA Kennedy Space Center, carrying two astronauts to space. But just a day before, SpaceX engineers and ground crews watched their fourth  Starship prototype (SN4)  explode on its testbed during a static fire test, making it the fourth prototype in a row to be lost.\n But according to  recent news from a SpaceX engineer and executive, as well as an  internal email from Elon Musk to SpaceX employees, it is clear that the company is all-in with the  Starship prototype and could conduct an orbital flight before the end of the year. An ambitious goal, but you don\u2019t get to be the head of a company that makes reusability a thing and restores domestic launch capability to US soil by being a pessimist!\n  Not long ago, SpaceX engineers determined the cause of the SN4 explosion, saying that it was the result of a propellant line disconnecting. This led to a major liquid methane leak that then ignited, leading to the spectacular explosion that completely destroyed the SN4. This is similar to what happened during the previous static fire test (on May 19th) where a small fire broke out near the base of SN4 due to a burst methane line.\n   Nevertheless, the Raptor engine had fired for a full two-minutes before the rupture took place, which effectively completed the fifth static fire test of the engine. Combined with other successes, SpaceX\u2019s chief engineer Hans K\u00f6nigsmann recently indicated that hop tests could begin shortly, which bodes well for an orbital flight before 2020 is over. As he said during an interview with the German publication   Der Speigel:\n \u201c I expect first test flights in, say, 150 meters altitude in the coming weeks. We\u2019ll do that a couple of times. If everything works out, we want to go into orbit at the end of the year. Or maybe it will take a little longer.\u201c\n Coming from the company\u2019s chief engineer, this should not be taken idly. And he is correct in his estimation that an orbital flight could happen before the end of 2020, assuming that hop tests begin in the coming weeks. The first test would involve a single-engine prototype flying to an altitude of 150 m (~500 ft) and then making a controlled landing.\n This would pick up where SpaceX left off with the  Starhopper prototype, which completed a 150-m hop test on  August 25th, 2019. Given all of the setbacks SpaceX has experienced this past year, one would think that it\u2019s a bit optimistic to assume that an orbital flight could take place just six months from now. But this is in keeping with SpaceX\u2019s rapid prototyping and iterative approach.\n   This method allows them to create prototypes rapidly, with small variations in design, and learn from every mistake. This is precisely what SpaceX has been doing since early 2020, which is to push them to their limits, replace them quickly, and use the combined data to improve the overall design. In this respect, SpaceX is following the same approach that NASA did back in the Apollo Era.\n True to this approach, SpaceX is moving ahead with tests using their SN5 prototype, which engineers finished constructing at the company\u2019s South Texas Launch Sight at Boca Chica. In addition, a company-wide email was recently obtained by CNBC, in which Musk instructed employees to accelerate the development of the  Starship \u201cdramatically and immediately.\u201d\n According to Musk, who circulated the email on Saturday, June 6th, all SpaceX personnel were told to \u201cPlease consider the top SpaceX priority (apart from anything that could reduce Dragon return risk) to be Starship.\u201d This is appropriate considering that with the successful launch of the Crew Dragon, SpaceX has fulfilled its responsibilities as part of NASA\u2019s Commercial Crew Program.\n  The aim of this program is to restore domestic launch capability to the US by creating crew-rated spacecraft that can carry astronauts to and from the International Space Station (ISS). The  Crew Dragon was SpaceX\u2019s contribution to the program while Boeing\u2019s took the form of the   CST-100 Starliner \u2013 which still needs to complete a successful uncrewed and crewed mission to the ISS before it can be certified.\n  With the Crew Dragon certified, SpaceX\u2019s full attention can now be directed towards their next-generation super-heavy launch system. As with its predecessors, the next step will be to conduct a cryogenic load test followed by a static fire test of its lone Raptor engine. Once that\u2019s done, it\u2019s reasonable to assume SpaceX will mount a 150-meter hop test using the SN5 in the next few weeks.\n Barring any additional setbacks, the SN5 could be fitted with a nosecone, flaps, and be fitted with three Raptor engines to perform a 20 km (about 65,600 ft or 12 mi) flight, which will conclude with a supersonic reentry and controlled landing. This will be the last step before a full-scale orbital flight using six Raptor engines can take place, followed by the finalizing of the  Starship\u2018s design and the start of commercial production.\n  In the meantime, the company will also be working on the  Super Heavy element of the launch system. Like the  Starship, this will involve putting prototypes through pressure testing, engine tests, and progressively higher hop tests. Once integrated, the launch system will be able to fulfill SpaceX\u2019s commitment to provide payload and crew services in support of Project Artemis, conduct lunar tourism, and send people to Mars.\n Both NASA and SpaceX hope to accomplish this in the next few years. Even if the timetables proves flexible, it\u2019s sure to be an exciting time!", "posttime": "2020-06-12 21:39:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u98de\u8239,prototypes,spacex", "title": "\u4e00\u65e6\u661f\u9645\u98de\u8239\u539f\u578b\u505c\u6b62\u7206\u70b8\uff0c\u6211\u4eec\u4eca\u5e74\u5c31\u53ef\u4ee5\u770b\u5230\u8f68\u9053\u53d1\u5c04", "title_en": "Once Starship Prototypes stop Exploding we could see an Orbital Launch this Year", "transed": 1, "url": "https://www.universetoday.com/146472/once-starship-prototypes-are-done-exploding-we-could-see-an-orbital-launch-this-year/", "via": "", "real_tags": ["\u98de\u8239", "spacex"]}, {"category": "", "categoryclass": "", "imagename": "29f431b683968bc8e10189be95343339.jpg", "infoid": 1006280, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e09\u665a\u4e0a\uff0cZFS\u7684\u521b\u59cb\u5f00\u53d1\u8005Matthew Ahrens\u5411OpenZFS\u9879\u76ee\u63d0\u4ea4\u4e86\u4e00\u4e2a\u672c\u5e94\u662f\u7b80\u5355\u7684\u3001\u6ca1\u6709\u4e89\u8bae\u7684\u8bf7\u6c42\uff1a\u5728\u4e0d\u5f15\u8d77\u6280\u672f\u95ee\u9898\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u8865\u4e01\u5220\u9664\u4e86\u5bf9\u5974\u96b6\u7684\u5f15\u7528\uff0c\u800c\u4ee3\u4e4b\u4ee5\u5bb6\u5c5e\u3002\n\u8fd9\u4e2a\u8865\u4e01\u4e0d\u4f1a\u6539\u53d8\u4ee3\u7801\u7684\u8fd0\u884c\u65b9\u5f0f-\u5b83\u53ea\u662f\u5728\u603b\u517148\u884c\u4ee3\u7801\u4e2d\u66f4\u6539\u53d8\u91cf\u540d\u79f0\uff0c\u4f7f\u5176\u4e0eLinux\u4e0a\u6e38\u8bbe\u5907\u6620\u5c04\u5668\u7684\u672f\u8bed\u4e00\u81f4(\u5220\u9664\u4e8642\u884c\uff0c\u589e\u52a0\u4e8648\u884c\uff1b\u8fd8\u7565\u5fae\u6269\u5c55\u4e86\u4e00\u4e2a\u6ce8\u91ca\u5757\uff0c\u4ee5\u4f7f\u5176\u66f4\u5177\u63cf\u8ff0\u6027)\u3002\n\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u4e92\u8054\u7f51\u4e0a\uff0c\u6124\u6012\u7684\u53cd\u5bf9\u8005\u7a81\u7136\u51fa\u73b0\u5728\u62c9\u53d6\u8bf7\u6c42\u4e0a\uff0c\u8bc4\u8bba\u5f88\u5feb\u5c31\u5bf9\u975e\u8d21\u732e\u8005\u5173\u95ed\u4e86\u3002\u6211\u7b2c\u4e00\u6b21\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u662f\u4f5c\u4e3ar/zfs subreddit\u7684\u4e3b\u6301\u4eba\uff0c\u4e00\u65e6\u5bf9\u516c\u5173\u672c\u8eab\u7684\u8bc4\u8bba\u4e0d\u518d\u53ef\u80fd\uff0c\u6ea2\u51fa\u7684\u5185\u5bb9\u5c31\u4f1a\u6cc4\u6f0f\u51fa\u6765\u3002\n\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u8981\u6253\u8865\u4e01\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u51e0\u4e2a\u6709\u6548\u7684\u7b54\u6848\u3002\u5bf9\u4e8e\u90a3\u4e9b\u9664\u4e86\u6e05\u6670\u4e4b\u5916\u62d2\u7edd\u601d\u8003\u4efb\u4f55\u4e8b\u60c5\u7684\u4eba\u6765\u8bf4\uff0c\u4efb\u4f55\u6280\u672f\u548c\u4eba\u7c7b\u5974\u5f79\u4e4b\u95f4\u90fd\u6ca1\u6709\u5f88\u597d\u7684\u63cf\u8ff0\u5173\u7cfb-\u800c\u4e14\u4eba\u7c7b\u8fd9\u4e2a\u672f\u8bed\u8fdc\u8fdc\u65e9\u4e8e\u4efb\u4f55\u5de5\u7a0b\u6216\u6280\u672f\u7528\u9014\u3002\u66ff\u6362\u4e3b/\u4ece\u672f\u8bed\u901a\u5e38\u4f1a\u4ea7\u751f\u66f4\u7cbe\u786e\u3001\u66f4\u5bb9\u6613\u53d1\u73b0\u7684\u6280\u672f\u63cf\u8ff0\u3002\nOpenZFS\u5e76\u4e0d\u662f\u8fd9\u79cd\u6d88\u9664\u6b67\u4e49\u52aa\u529b\u7684\u524d\u6cbf\u3002\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u9879\u76ee\u5df2\u7ecf\u653e\u5f03\u5e76\u66ff\u6362\u4e86\u4e3b/\u4ece\u672f\u8bed\uff0c\u5305\u62ecBIND DNS\u670d\u52a1\u5668\u3001Drupal Web\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u548cRedis\u6570\u636e\u5b58\u50a8\u3002\u7279\u522b\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u867d\u7136\u8fd9\u4e09\u4e2a\u9879\u76ee\u90fd\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u539f\u59cb\u4e3b/\u4ece\u672f\u8bed\uff0c\u4f46\u66ff\u6362\u7684\u672f\u8bed\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u6bcf\u4e2a\u9879\u76ee\u4e2d\u63cf\u8ff0\u7684\u5b9e\u9645\u5173\u7cfb\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u9879\u76ee\u6765\u8bf4\uff0c\u5bf9\u4e8e\u76f8\u540c\u7684\u539f\u59cb\u672f\u8bed\u6765\u8bf4\uff0c\u6700\u660e\u667a\u7684\u66ff\u4ee3\u65b9\u6cd5\u4e5f\u662f\u4e0d\u540c\u7684\u3002\n\u5bf9\u4e8eBIND DNS\u670d\u52a1\u5668\uff0cInternet\u7cfb\u7edf\u8054\u76df\u5c06\u4e3b/\u4ece\u670d\u52a1\u5668\u66ff\u6362\u4e3a\u4e3b/\u6b21\u670d\u52a1\u5668\u3002\u5bf9\u4e8eDrupal\u6765\u8bf4\uff0c\u66ff\u4ee3\u65b9\u6848\u662f\u4e3b\u670d\u52a1\u5668/\u526f\u672c\u670d\u52a1\u5668\uff0c\u800c\u5bf9\u4e8eRedis\u6765\u8bf4\uff0c\u5b83\u662f\u9886\u5bfc\u8005/\u8ffd\u968f\u8005\u3002\u4e0d\u540c\u7684\u66ff\u6362\u672f\u8bed\u4e4b\u6240\u4ee5\u5b58\u5728\uff0c\u662f\u56e0\u4e3a\u771f\u6b63\u7684\u529f\u80fd\u4e0d\u540c--\u56e0\u6b64\uff0c\u5bf9\u539f\u59cb\u672f\u8bed\u7684\u66ff\u6362\u66f4\u80fd\u63cf\u8ff0\u5e55\u540e\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u60c5\u3002\n\u5982\u524d\u6240\u8ff0\uff0cOpenZFS\u7edd\u4e0d\u662f\u7b2c\u4e00\u4e2a\u66f4\u65b0\u5176\u4ee3\u7801\u5e93\u548c\u6587\u6863\u4ee5\u5220\u9664\u5bf9\u5974\u96b6\u5236\u7684\u5f15\u7528\u7684\u9879\u76ee\u3002\u5c3d\u7ba1\u5bf9\u4e3b/\u4ece\u672f\u8bed\u7684\u6295\u8bc9\u81f3\u5c11\u65e9\u572820\u4e16\u7eaa90\u5e74\u4ee3\u5c31\u5df2\u7ecf\u6d41\u4f20\u5f00\u6765\uff0c\u4f46\u7f8e\u56fd\u4e3b\u6d41\u5a92\u4f53\u7b2c\u4e00\u6b21\u5927\u89c4\u6a21\u66dd\u5149\u662f\u57282003\u5e74\uff0c\u5f53\u65f6\u8be5\u53bf\u7684\u4e00\u540d\u9ed1\u4eba\u96c7\u5458\u5c31\u5f55\u50cf\u5e26\u8bbe\u5907\u4e0a\u7684\u4e3b/\u4ece\u6807\u7b7e\u63d0\u51fa\u4e86\u6295\u8bc9\u3002\n\u9664\u4e86\u5177\u4f53\u9879\u76ee\u4e2d\u7684\u5177\u4f53\u672f\u8bed\u66f4\u65b0\u5916\uff0cIETF(\u4e92\u8054\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4)\u57282018\u5e74\u53d1\u5e03\u4e86\u4e00\u4efd\u5907\u5fd8\u5f55\uff0c\u627f\u8ba4\u5e76\u6982\u8ff0\u4e86\u95ee\u9898\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e3b/\u4ece\u548c\u9ed1\u540d\u5355/\u767d\u540d\u5355\u672f\u8bed\u7684\u5177\u4f53\u66ff\u4ee3\u65b9\u6848\u3002\n\u867d\u7136\u6280\u672f\u51c6\u786e\u6027\u548c\u5148\u4f8b\u662f\u4ece\u4ee3\u7801\u5e93\u4e2d\u5220\u9664\u4e3b/\u4ece\u672f\u8bed\u7684\u6b63\u5f53\u7406\u7531\uff0c\u4f46\u5b83\u4eec\u5f53\u7136\u4e0d\u662f\u552f\u4e00\u7684\u539f\u56e0\u3002Ahrens&#39\uff1bOwner Pull Request\u5f88\u6709\u8bf4\u670d\u529b\u5730\u63cf\u8ff0\u4e86\u8fd9\u4e00\u70b9\uff1a\n\u4eba\u7c7b\u5974\u96b6\u5236\u7684\u53ef\u6015\u5f71\u54cd\u7ee7\u7eed\u5f71\u54cd\u7740\u793e\u4f1a\u3002\u5728\u8ba1\u7b97\u673a\u8f6f\u4ef6\u4e2d\u968f\u610f\u4f7f\u7528\u672f\u8bed\u201c\u5974\u96b6\u201d\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u6307\u7684\u662f\u4eba\u7c7b\u75db\u82e6\u7684\u7ecf\u5386\u3002\n\u8fd9\u4e0d\u5e94\u8be5\u6709\u4ec0\u4e48\u4e89\u8bae\uff0c\u5373\u4f7f\u8fd9\u662f\u7b2c\u4e00\u6b21\u6295\u7a3f\u4eba\u7684\u9a7e\u8f66\u62c9\u8f66\u8bf7\u6c42\u3002\u5f53\u7136\uff0cAhrens\u5e76\u975e\u5982\u6b64-\u4ed6\u662f\u4ece2001\u5e74\u5f00\u59cb\u521b\u5efaSun Microsystems ZFS\u7684\u4e09\u4f4d\u5f00\u53d1\u4eba\u5458\u4e4b\u4e00\uff0c\u4eca\u5929\u4ed6\u4ecd\u7136\u662fOpenZFS\u9879\u76ee\u7684\u4e3b\u8981\u5f00\u53d1\u4eba\u5458\u3002\n\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5f88\u660e\u663e\uff0c\u4e00\u4e2a\u4eba\u5bf9\u968f\u610f\u7684\u5974\u96b6\u5236\u7c7b\u6bd4\u7684\u53cd\u5e94\u4e0d\u4f1a\u5426\u5b9a\u53e6\u4e00\u4e2a\u4eba\u4e0e\u5974\u96b6\u5236\u7684\u5386\u53f2\u73b0\u5b9e\u53ca\u5176\u6301\u7eed\u7684\u4ee3\u9645\u5f71\u54cd\u7684\u7ecf\u5386\u3002\nAhrens&39\uff1bPull\u8bf7\u6c42\u5df2\u7ecf\u7531\u9996\u5e2d\u5f00\u53d1\u4eba\u5458Brian Behlendorf\u548cRyan Moeller\u5ba1\u6838\uff0c\u5e76\u5408\u5e76\u5230OpenZFS\u9879\u76ee\u5e93\u4e2d\u3002", "note_en": "On Wednesday evening, ZFS founding developer Matthew Ahrens submitted what should have been a simple, non-controversial pull  request to the OpenZFS project: wherever possible without causing technical issues, the patch removed references to &#34;slaves&#34; and replaced them with &#34;dependents.&#34;\n This patch in question doesn&#39;t change the way the code functions\u2014it simply changes variable names in a way that brings them in conformance with Linux upstream  device-mapper\u00a0terminology, in 48 total lines of code (42 removed and 48 added; with one comment block expanded slightly to be more descriptive).\n But this being the Internet, unfortunately, outraged naysayers descended on the pull request, and the comments were quickly closed to non-contributors. I first became aware of this as the moderator of the r/zfs  subreddit where the overflow spilled once comments on the PR itself were no longer possible.\n  There are several valid answers to the &#34;Why patch?&#34; question. For those who refuse to think of anything but clarity, there is no good descriptive relationship between any technology and human slavery\u2014and the human term far predates any engineering or technical use. Replacing &#34;master/slave&#34; terminology generally results in a more precise, easily discoverable technical description.\n OpenZFS is not on the leading edge of this disambiguation effort. Some notable projects that have discarded and replaced master/slave terminology include the BIND DNS server, Drupal Web application framework, and Redis datastore. It is particularly telling that, although all three projects used the same original &#34;master/slave&#34; terms, the replacements were different. That&#39;s because the actual relationship described is different in each project, and so the most sensible replacement for the same original term is different for each project.\n For the BIND DNS server, the Internet Systems Consortium replaced master/slave with primary/secondary. For Drupal, the replacement is primary/replica, and for Redis, it&#39;s leader/follower. The different replacement terms exist because the real functions are different\u2014and the replacement for the original terminology is therefore more descriptive of what&#39;s actually happening underneath the hood.\n  As mentioned previously, OpenZFS is by no means the first project to update its codebase and documentation to remove references to slavery. Although complaints about master/slave terminology circulated at least as far back as the 1990s, the first large mainstream American exposure came from Los Angeles in 2003, where a black employee of the county filed a  complaint concerning master/slave labels on videotape devices.\n In addition to specific terminology updates in specific  projects, the IETF (Internet Engineering Task Force) published a  memo\u00a0in 2018 acknowledging and outlining the problem and offering specific alternatives to both master/slave and blacklist/whitelist terminology.\n  While technical accuracy and precedent are valid reasons to remove master/slave terminology from a codebase, they are of course not the only reason. Ahrens&#39; own pull request describes this eloquently enough:\n The horrible effects of human slavery continue to impact society. The casual use of the term &#34;slave&#34; in computer software is an unnecessary reference to a painful human experience.\n There should be nothing controversial about this, even if this were a drive-by pull request from a first-time contributor. Ahrens, of course, is anything but\u2014he was one of the three founding Sun Microsystems ZFS developers beginning in 2001, and he remains a lead developer of the OpenZFS project today.\n More importantly, it should be obvious that one person&#39;s impervious reaction to casual slavery-based analogies does not negate another person&#39;s experiences with slavery&#39;s historical reality and its ongoing generational effects.\n Ahrens&#39; pull request has been reviewed by fellow lead developers Brian Behlendorf and Ryan Moeller and merged into the OpenZFS project repository.", "posttime": "2020-06-12 21:06:14", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4ee3\u7801,\u653b\u51fb\u6027,removed,\u672f\u8bed", "title": "OpenZFS\u4ece\u5176\u4ee3\u7801\u4e2d\u5220\u9664\u4e86\u653b\u51fb\u6027\u672f\u8bed", "title_en": "OpenZFS Removed Offensive Terminology From Its Code", "transed": 1, "url": "https://arstechnica.com/tech-policy/2020/06/openzfs-removed-master-slave-terminology-from-its-codebase/", "via": "", "real_tags": ["\u4ee3\u7801", "\u653b\u51fb\u6027", "removed", "\u672f\u8bed"]}, {"category": "", "categoryclass": "", "imagename": "3ff293138ef66fa2d2bd2134ad31e3f2.jpg", "infoid": 1006279, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u51a0\u72b6\u75c5\u6bd2\u6765\u88ad\u65f6\uff0c\u5927\u591a\u6570\u5dde\u6682\u505c\u4e86\u9a71\u9010-\u4f46\u8fd9\u4e9b\u9650\u5236\u51e0\u4e4e\u5728\u66f4\u6177\u6168\u7684\u5931\u4e1a\u6551\u6d4e\u91d1\u5373\u5c06\u67af\u7aed\u7684\u540c\u65f6\u5230\u671f\u3002\n\u91cd\u8981\u539f\u56e0\uff1a\u5bf9\u4e8e\u5df2\u7ecf\u627f\u53d7\u4e86\u65b0\u51a0\u80ba\u708e\u6700\u4e25\u91cd\u5f71\u54cd\u7684\u7f8e\u56fd\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e00\u53cc\u91cd\u6253\u51fb\u5f88\u5bb9\u6613\u52a0\u5267\u623f\u5730\u4ea7\u5371\u673a\u3002\n\u6839\u636e\u6bcf\u5468\u4eba\u53e3\u666e\u67e5\u8c03\u67e5\u65b0\u51a0\u80ba\u708e\u5bf9\u7f8e\u56fd\u4eba\u7684\u5f71\u54cd\uff0c\u57285\u6708\u4efd\u63a5\u53d7\u8c03\u67e5\u7684\u6210\u5e74\u4eba\u4e2d\uff0c\u6709\u4e94\u5206\u4e4b\u4e00\u7684\u4eba\u8868\u793a\uff0c\u4ed6\u4eec\u5bf9\u81ea\u5df1\u6709\u80fd\u529b\u652f\u4ed86\u6708\u4efd\u5230\u671f\u7684\u623f\u79df\u6216\u62b5\u62bc\u8d37\u6b3e\u51e0\u4e4e\u6ca1\u6709\u4fe1\u5fc3\u3002\n\u57ce\u5e02\u7814\u7a76\u6240(Urban Institute)\u5bf9\u4eba\u53e3\u666e\u67e5\u6570\u636e\u7684\u5206\u6790\u53d1\u73b0\uff0c\u8fd125%\u7684\u9ed1\u4eba\u79df\u623f\u8005\u4e0a\u4e2a\u6708\u63a8\u8fdf\u6216\u672a\u652f\u4ed8\u623f\u79df\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u767d\u4eba\u79df\u623f\u8005\u7684\u8fd9\u4e00\u6bd4\u4f8b\u4e3a14%\u3002\n\u5728\u5bc6\u6b47\u6839\u5dde\uff0c\u6cd5\u9662\u6b63\u5728\u51c6\u5907\u8fce\u63a5\u5373\u5c06\u5230\u6765\u7684\u6d2a\u6d41\uff0c\u591a\u8fbe7.5\u4e07\u4efd\u623f\u4e1c/\u79df\u6237\u7533\u8bf7\u3002(\u8be5\u5dde\u7684\u7981\u4ee4\u672c\u5468\u5230\u671f\u3002)\u3002\n\u603b\u4f53\u60c5\u51b5\u662f\uff1a\u8fd9\u573a\u8feb\u4f7f\u7ecf\u6d4e\u5d29\u6e83\u7684\u6d41\u884c\u75c5\u7ed9\u8fd9\u4e2a\u56fd\u5bb6\u957f\u671f\u5b58\u5728\u7684\u4f4f\u623f\u95ee\u9898\u589e\u52a0\u4e86\u65b0\u7684\u8d1f\u62c5\u3002\n\u516c\u5bd3\u884c\u4e1a\u884c\u4e1a\u7ec4\u7ec7\u56fd\u5bb6\u591a\u6237\u4f4f\u623f\u59d4\u5458\u4f1a(National Multifamily Housing Council)\u7684\u5b9d\u62c9\u00b7\u897f\u8bfa(Paula Cino)\u544a\u8bc9Axios\uff0c\u4e4b\u524d\u5b58\u5728\u4f9b\u5e94\u548c\u8d1f\u62c5\u80fd\u529b\u95ee\u9898\uff0c\u9664\u975e\u8054\u90a6\u3001\u5dde\u548c\u5730\u65b9\u5c42\u9762\u63d0\u4f9b\u771f\u6b63\u826f\u597d\u7684\u652f\u6301\uff0c\u5426\u5219\u60c5\u51b5\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\n\u4ed6\u4eec\u7684\u610f\u601d\u662f\uff1a\u7ed3\u679c\u53ef\u80fd\u662f\u66f4\u9ad8\u7684\u65e0\u5bb6\u53ef\u5f52\u7387--\u8ba9\u66f4\u591a\u7684\u4eba\u5728\u5168\u7403\u5927\u6d41\u884c\u4e2d\u6d41\u843d\u8857\u5934\u3002\n\u666e\u6797\u65af\u987f\u5927\u5b66(Princeton University)\u9a71\u9010\u5b9e\u9a8c\u5ba4(Eiction Lab)\u7684\u653f\u7b56\u5206\u6790\u5e08\u827e\u8389\u624e\u00b7\u675c\u62c9\u7eb3(Alieza Durana)\u544a\u8bc9Axios\uff0c\u5728\u6d41\u611f\u5927\u6d41\u884c\u4e4b\u524d\uff0c\u6211\u4eec\u5728\u7f8e\u56fd\u7684\u65e0\u5bb6\u53ef\u5f52\u8005\u6536\u5bb9\u6240\u7cfb\u7edf\u5df2\u7ecf\u6349\u895f\u89c1\u8098\uff0c\u800c\u4e14\u6ca1\u6709\u5efa\u7acb\u8d77\u793e\u4f1a\u8ddd\u79bb\u3002\u8be5\u5b9e\u9a8c\u5ba4\u6b63\u5728\u8ddf\u8e2a\u5404\u5dde\u7684\u63aa\u65bd\u3002\n\u901a\u5e38\u53d1\u751f\u5728\u9a71\u9010\u4e4b\u540e\u7684\u666e\u901a\u7834\u574f\u88ab\u8fd9\u6b21\u5927\u6d41\u884c\u7684\u6761\u4ef6\u548c\u7ecf\u6d4e\u5371\u673a\u672c\u8eab\u8fdb\u4e00\u6b65\u653e\u5927\u4e86\u3002(#34\uff1b\u3002\n\u8fc5\u901f\u8d76\u4e0a\uff1a\u4e0e\u5927\u6d41\u884c\u6765\u88ad\u65f6\u4ed3\u4fc3\u901a\u8fc7\u7684\u5176\u4ed6\u63aa\u65bd\u4e00\u6837\uff0c\u5404\u57ce\u5e02\u548c\u5404\u5dde\u9881\u5e03\u4e86\u4e00\u7cfb\u5217\u4e0d\u540c\u957f\u5ea6\u548c\u8b66\u544a\u7684\u9a71\u9010\u6682\u505c\u62fc\u51d1\u800c\u6210\u7684\u63aa\u65bd\u3002\n\u5176\u4ed6\u7684\u5c06\u5728\u672a\u6765\u51e0\u5929\u548c\u51e0\u5468\u5185\u5230\u671f\uff0c\u5305\u62ec\u8def\u6613\u65af\u5b89\u90a3\u5dde\u548c\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\uff0c\u800c\u7ebd\u7ea6\u5dde\u548c\u5176\u4ed6\u5730\u65b9\u5df2\u7ecf\u5ba3\u5e03\u5ef6\u671f\u3002\n\u5728\u8054\u90a6\u5c42\u9762\uff0c\u51a0\u72b6\u75c5\u6bd2\u523a\u6fc0\u8ba1\u5212\u7981\u6b62\u8054\u90a6\u8865\u8d34\u4f4f\u623f\u57287\u670825\u65e5\u4e4b\u524d\u9a71\u9010\u5c45\u6c11\u3002\n\u5b57\u91cc\u884c\u95f4\u7684\u610f\u601d\u662f\uff1a\u6682\u505c\u9a71\u9010\u5e76\u4e0d\u662f\u51bb\u7ed3\u79df\u91d1-\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u65e0\u6cd5\u652f\u4ed8\u7684\u79df\u6237\u6765\u8bf4\uff0c\u903e\u671f\u79df\u91d1\u4ecd\u5728\u79ef\u7d2f\u3002\u4e00\u65e6\u6682\u505c\u4ee4\u5230\u671f\uff0c\u623f\u4e1c\u53ef\u4ee5\u83b7\u5f97\u6cd5\u9662\u6279\u51c6\u91c7\u53d6\u6216\u6062\u590d\u9a71\u9010\u884c\u52a8\uff0c\u5c45\u6c11\u53ef\u80fd\u4f1a\u5728\u6d1e\u91cc\u5446\u4e0a\u51e0\u4e2a\u6708\u3002\n\u66f4\u4ee4\u4eba\u4e0d\u5b89\u7684\u662f\uff1a\u4e00\u4e9b\u5931\u4e1a\u6551\u6d4e\u91d1\u7684\u5230\u671f\u4e0e\u66f4\u6177\u6168\u7684\u5931\u4e1a\u6551\u6d4e\u91d1\u7684\u505c\u6b62\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u8fd9\u4e9b\u6551\u6d4e\u91d1\u5e2e\u52a9\u5931\u4e1a\u7684\u7f8e\u56fd\u4eba\u7ef4\u6301\u4e86\u751f\u5b58\u3002\n\u770b\u70b9\uff1a\u7269\u4e1a\u7ecf\u7406\u6216\u592b\u59bb\u5e97\u623f\u4e1c\u53ef\u80fd\u4f1a\u5728\u9a71\u9010\u79df\u6237\u4e4b\u524d\u4e0e\u4ed6\u4eec\u534f\u5546\u3002\u4f46\u623f\u4e1c\u81ea\u5df1\u53ef\u80fd\u4e5f\u611f\u53d7\u5230\u4e86\u538b\u529b\uff1a\u4e00\u4e9b\u5dde\u4e5f\u505c\u6b62\u4e86\u623f\u4ea7\u6b62\u8d4e\uff0c\u8fd9\u4e9b\u6682\u505c\u5373\u5c06\u7ed3\u675f\u3002\n\u9a71\u9010\u73b0\u6709\u79df\u6237\u7684\u6210\u672c\u53ef\u80fd\u4e0d\u503c\u5f97\uff0c\u7279\u522b\u662f\u5982\u679c\u65b0\u79df\u6237\u51e0\u4e4e\u6ca1\u6709\u7b7e\u7f72\u79df\u7ea6\u7684\u9700\u6c42\u3002\n\u5546\u4e1a\u623f\u4e1c\u4e5f\u662f\u5982\u6b64\uff0c\u5c3d\u7ba1\u4e00\u4e9b\u4eba\u5df2\u7ecf\u8868\u793a\uff0c\u4ed6\u4eec\u6b63\u5728\u63a5\u53d7\u4e0d\u4ed8\u8d39\u7684\u96f6\u552e\u79df\u6237(\u5982Gap Inc.)\u3002\u53bb\u6cd5\u5ead\u3002\n\u63a8\u52a8\u65b0\u95fb\uff1a\u65e7\u91d1\u5c71\u7eaa\u4e8b\u62a5\u62a5\u9053\uff0c\u65e7\u91d1\u5c71\u672c\u5468\u57fa\u672c\u4e0a\u6c38\u4e45\u6682\u505c\u4e86\u7981\u4ee4-\u7981\u6b62\u623f\u4e1c\u4ee5\u4e0e\u6d41\u884c\u75c5\u6709\u5173\u7684\u539f\u56e0\u9519\u8fc7\u79df\u91d1\u4f5c\u4e3a\u9a71\u9010\u7684\u7406\u7531\u3002\n\u5b98\u5458\u4eec\u5728\u7acb\u6cd5\u4e2d\u5199\u9053\uff0c\u8fd9\u5ea7\u57ce\u5e02\u7f3a\u4e4f\u8d1f\u62c5\u5f97\u8d77\u7684\u79df\u8d41\u4f4f\u623f\uff0c\u5176\u4e2d\u76f8\u5f53\u5927\u4e00\u90e8\u5206\u5bb6\u5ead\u662f\u79df\u623f\u8005\uff0c\u5982\u679c\u4ed6\u4eec\u88ab\u8feb\u79bb\u5f00\u76ee\u524d\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u5c06\u9762\u4e34\u6c38\u4e45\u6d41\u79bb\u5931\u6240\u7684\u98ce\u9669\u3002\n\u5e95\u7ebf\u662f\uff1a\u6709\u53ef\u80fd\u4ea7\u751f\u591a\u7c73\u8bfa\u9aa8\u724c\u6548\u5e94\uff0c\u635f\u5bb3\u79df\u6237\u548c\u4e1a\u4e3b\u7684\u5229\u76ca\u3002", "note_en": "Most states paused evictions when the coronavirus hit \u2014 but those holds are expiring at about the same time that more generous unemployment benefits are set to dry up.\n Why it matters: The one-two punch could easily exacerbate the housing crisis for Americans already bearing the worst of COVID-19&#39;s effects.\n One fifth of adults polled in May  said they had slight or no confidence they would be able to pay their rent or mortgage due in June, according to a weekly Census survey measuring COVID-19\u2019s impact on Americans.\n An Urban Institute  analysis of Census data found nearly 25% of black renters deferred or did not pay their rent last month, compared with 14% of white renters.\n In Michigan, courts are  bracing for &#34;a coming deluge&#34; of as many as 75,000 landlord/tenant filings. (The state&#39;s moratorium expired this week.)\n The big picture: The pandemic \u2014 which forced an economic collapse \u2014 is adding new burdens on top of the country&#39;s longstanding housing problems.\n &#34;There was a supply and affordability problem before, and the opportunity for it to get a lot worse presents itself, unless there&#39;s really good support coming from the federal, state and local level,&#34; Paula Cino of the National Multifamily Housing Council, a trade group for the apartment industry, tells Axios.\n What they&#39;re saying: The result could be even higher rates of homelessness \u2014 leaving more people out on the streets in the midst of a global pandemic.\n &#34;Prior to the pandemic, our homeless shelter system in the U.S. was stretched thin, and also not set up for social distancing,&#34; Alieza Durana, a policy analyst at Princeton University&#39;s Eviction Lab, which is tracking states&#39; measures, tells Axios.\n &#34;The run-of-the-mill devastation that normally occurs in the wake of an eviction is further amplified by the conditions of this pandemic and economic crisis itself.&#34;\n Catch up quick: As with other measures that were passed in haste when the pandemic hit, cities and states enacted a patchwork of eviction halts with varying lengths and caveats.\n Others are set to expire in coming days and weeks, including Louisiana and Pennsylvania , while New York State and other places have announced extensions.\n At the federal level, the coronavirus stimulus package  barred federally subsidized housing from evicting residents until July 25.\n Between the lines: An eviction moratorium is not a rent freeze \u2014 which means that overdue rent is still accumulating for tenants who have been unable to pay it. Once a moratorium expires and landlords can get court approval to take or resume eviction action, residents could be months in the hole.\n Even more troubling: Some of the expirations collide with the stoppage of more generous unemployment benefits that have helped keep unemployed Americans afloat.\n What to watch: It&#39;s possible that property managers or mom-and-pop landlords will negotiate with tenants before evicting them. But landlords themselves are likely feeling the pinch: Some states have also put halts on property foreclosures, and those pauses are about to end.\n The cost of evicting an existing tenant may not be worth it, particularly if there is little demand from new renters to sign a lease.\n The same is true for commercial landlords, although some have already said they are taking nonpaying retail tenants (such as Gap Inc.) to court.\n Driving the news: San Francisco essentially made its moratorium permanent this week \u2014 prohibiting landlords from ever using missed rent for pandemic-related reasons as grounds for eviction, the San Francisco Chronicle  reports.\n &#34;The City has a shortage of affordable rental housing, and a significant percentage of its households are renters and at risk of permanent displacement should they be forced to leave their current homes,&#34; officials wrote in the legislation.\n The bottom line: There&#39;s the potential for a domino effect that would harm both tenants and property owners.", "posttime": "2020-06-12 20:48:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u542f\u793a\u5f55,grow,\u9a71\u9010", "title": "\u5bf9\u9a71\u9010\u542f\u793a\u5f55\u7684\u62c5\u5fe7\u4e0e\u65e5\u4ff1\u589e", "title_en": "Fears Grow of an Eviction Apocalypse", "transed": 1, "url": "https://www.axios.com/eviction-crisis-coronavirus-351bb693-a04f-4ea1-a27d-dceb5163af14.html", "via": "", "real_tags": ["\u542f\u793a\u5f55", "grow", "\u9a71\u9010"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006278, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u8fd9\u8f86\u81ea\u884c\u8f66\u51fa\u4e86\u70b9\u95ee\u9898\u3002\u6216\u8005\u4f60\u53ef\u80fd\u6ca1\u6709\u3002\u8fd9\u8f86\u81ea\u884c\u8f66\u7684\u8f66\u67b6\u5c11\u4e86\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u90e8\u5206\uff0c\u5982\u679c\u5b83\u771f\u7684\u5b58\u5728\uff0c\u5982\u679c\u6709\u4eba\u8bd5\u56fe\u9a91\u5b83\uff0c\u5b83\u4f1a\u7acb\u5373\u574f\u6389\u3002\u8ba9\u6211\u4ece\u5934\u5f00\u59cb\u89e3\u91ca\u4e00\u4e0b\uff1a\n\u65e9\u57282009\u5e74\uff0c\u6211\u5c31\u5f00\u59cb\u7ea0\u7f20\u670b\u53cb\u548c\u968f\u673a\u7684\u964c\u751f\u4eba\u3002\u6211\u4f1a\u62ff\u7740\u4e00\u652f\u7b14\u548c\u4e00\u5f20\u7eb8\u8d70\u5230\u4ed6\u4eec\u9762\u524d\uff0c\u8981\u6c42\u4ed6\u4eec\u7acb\u5373\u7528\u5fc3\u7ed9\u6211\u753b\u4e00\u8f86\u7537\u5f0f\u81ea\u884c\u8f66\u3002\u5f88\u5feb\u6211\u53d1\u73b0\uff0c\u5f53\u9762\u5bf9\u8fd9\u4e2a\u5947\u602a\u7684\u8981\u6c42\u65f6\uff0c\u5927\u591a\u6570\u4eba\u90fd\u5f88\u96be\u51c6\u786e\u5730\u8bb0\u4f4f\u81ea\u884c\u8f66\u662f\u5982\u4f55\u5236\u9020\u7684\u3002\u6709\u4e9b\u4eba\u786e\u5b9e\u5f88\u63a5\u8fd1\uff0c\u6709\u4e9b\u4eba\u5b9e\u9645\u4e0a\u753b\u5f97\u5f88\u5b8c\u7f8e\uff0c\u4f46\u5927\u591a\u6570\u4eba\u6700\u7ec8\u753b\u7684\u4e1c\u897f\u4e0e\u666e\u901a\u7684\u7537\u6027\u81ea\u884c\u8f66\u76f8\u53bb\u751a\u8fdc\u3002\n\u6211\u51e0\u4e4e\u4e0d\u77e5\u9053\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u5fc3\u7406\u5b66\u5bb6\u7528\u6765\u8bc1\u660e\u6211\u4eec\u7684\u5927\u8111\u6709\u65f6\u662f\u5982\u4f55\u6b3a\u9a97\u6211\u4eec\uff0c\u8ba9\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec\u77e5\u9053\u4e00\u4e9b\u4e1c\u897f\uff0c\u5c3d\u7ba1\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u3002\n\u6211\u6536\u96c6\u4e86\u6570\u767e\u5e45\u753b\uff0c\u79ef\u7d2f\u4e86\u4e00\u6279\u6211\u8ba4\u4e3a\u975e\u5e38\u73cd\u8d35\u7684\u85cf\u54c1\u3002\u4ece\u8fd9\u4e9b\u4f17\u5305\u548c\u6280\u672f\u9519\u8bef\u9a71\u52a8\u7684\u56fe\u753b\u4e2d\u6d8c\u73b0\u51fa\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u591a\u6837\u6027\u7684\u65b0\u7c7b\u578b\u3002\u4e00\u4e2a\u8bbe\u8ba1\u5e08\u4e0d\u53ef\u80fd\u5728100\u5e74\u7684\u65f6\u95f4\u91cc\u53d1\u660e\u8fd9\u4e48\u591a\u65b0\u7684\u81ea\u884c\u8f66\u8bbe\u8ba1\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4f1a\u5982\u6b64\u656c\u754f\u5730\u770b\u7740\u8fd9\u4e2a\u7cfb\u5217\u3002\n\u4ee5\u4e0b\u662f\u6211\u5728\u8fc7\u53bb6\u5e74\u4e2d\u6536\u96c6\u768450\u5e45\u7d20\u63cf\u7684\u7cbe\u9009\u3002\n2016\u5e74\u521d\uff0c\u6211\u6700\u7ec8\u51b3\u5b9a\u8f6e\u5230\u6211\u53c2\u52a0\u8fd9\u4e2a\u9879\u76ee\u3002\u6211\u51b3\u5b9a\u6211\u7684\u5de5\u4f5c\u662f\u5c55\u793a\u8fd9\u4e9b\u7d20\u63cf\u4e2d\u7684\u6f5c\u529b\u548c\u7f8e\u3002\u6211\u9009\u62e9\u4e86\u90a3\u4e9b\u6211\u89c9\u5f97\u6700\u6709\u8da3\u3001\u6700\u771f\u5b9e\u3001\u6700\u591a\u6837\u7684\uff0c\u7136\u540e\u628a\u5b83\u4eec\u6e32\u67d3\u5f97\u5c31\u50cf\u662f\u771f\u5b9e\u7684\u4e00\u6837\u3002\u6211\u6210\u4e3a\u4e86\u8fd9\u4e24\u5206\u949f\u9879\u76ee\u7684\u6267\u884c\u8005\uff0c\u8fd9\u4e9b\u4eba\u4e3b\u8981\u662f\u975e\u8bbe\u8ba1\u5e08\uff0c\u6211\u8bc1\u5b9e\u4e86\u6211\u7684\u6000\u7591\uff1a\u6bcf\u4e2a\u4eba\uff0c\u65e0\u8bba\u4ed6\u7684\u5e74\u9f84\u548c\u5de5\u4f5c\uff0c\u90fd\u53ef\u4ee5\u60f3\u51fa\u975e\u51e1\u7684\u3001\u72c2\u91ce\u7684\u3001\u65b0\u7684\uff0c\u6709\u65f6\u8fd8\u4f1a\u6709\u8f89\u714c\u7684\u53d1\u660e\u3002\n\u6536\u96c6\u5230\u7684\u81ea\u884c\u8f66\u603b\u6570\uff1a376\u8f86\uff0c\u6700\u5e74\u8f7b\u7684\u53c2\u4e0e\u8005\uff1a3yo\u3002\u5e74\u9f84\u6700\u5927\u7684\u53c2\u4e0e\u8005\uff1a88\u5c81\u3002\u4e0d\u540c\u56fd\u7c4d\u53c2\u8d5b\u8005\uff1a7\u8f86\u81ea\u884c\u8f66\u9762\u5411\u5de6\uff1a75%\u81ea\u884c\u8f66\u9762\u5411\u53f3\uff1a425%\u3002\n\u4e00\u4e9b\u591a\u6837\u6027\u662f\u7531\u6027\u522b\u9a71\u52a8\u7684\u3002\u94fe\u6761\u4e0e\u524d\u8f6e\u76f8\u8fde(\u6216\u540c\u65f6\u4e0e\u524d\u8f6e\u548c\u540e\u8f6e\u76f8\u8fde)\u7684\u56fe\u7eb8\u4e2d\uff0c\u8fd190%\u662f\u5973\u6027\u753b\u7684\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u867d\u7136\u7537\u6027\u901a\u5e38\u503e\u5411\u4e8e\u6b63\u786e\u653e\u7f6e\u94fe\u5b50\uff0c\u4f46\u5f53\u4ed6\u4eec\u610f\u8bc6\u5230\u81ea\u5df1\u753b\u5f97\u4e0d\u6b63\u786e\u65f6\uff0c\u4ed6\u4eec\u66f4\u70ed\u8877\u4e8e\u5c06\u6846\u67b6\u8fc7\u5ea6\u590d\u6742\u5316\u3002\n\u5bf9\u4e8e\u53c2\u4e0e\u8005\u6765\u8bf4\uff0c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u4e0d\u77e5\u9053\u5982\u4f55\u51c6\u786e\u5730\u7b80\u5355\u5730\u63cf\u8ff0\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\n\u6700\u96be\u61c2\u7684\u56fe\u753b\u4e5f\u662f\u6700\u96be\u61c2\u7684\u5b57\u8ff9\u3002\u5b83\u662f\u7531\u4e00\u4f4d\u533b\u751f\u5236\u4f5c\u7684\u3002", "note_en": "You might have noticed there\u2019s something wrong with this bike. Or you might have not. This bicycle is missing a very important part of its frame and it would immediately break if it actually existed and someone tried to ride it.Let me explain everything from the beginning:\n back in 2009 I began pestering friends and random strangers. I would walk up to them with a pen and a sheet of paper asking that they immediately draw me a men\u2019s bicycle, by heart. Soon I found out that when confronted with this odd request most people have a very hard time remembering exactly how a bike is made. Some did get close, some actually nailed it perfectly, but most ended up drawing something that was pretty \u00a0far off from a regular men\u2019s bicycle.\n Little I knew this is actually a test that psychologists use to demonstrate how our brain sometimes tricks us into thinking we know something even though we don\u2019t.\n I collected hundreds of drawings, building up a collection that I think is very precious. There is an incredible diversity of new typologies emerging from these crowd-sourced and technically error-driven drawings. A single designer could not invent so many new bike designs in 100 lifetimes and this is why\u00a0 I look at this collection in such awe.\n  Here is a\u00a0selection of 50 of the sketches I collected over the past 6 years.\n   In early 2016 I eventually decided it was my turn to take part in this project. I decided my job was going to be presenting the potential and the beauty inside these sketches. I selected those that I found most interesting and genuine and diverse, then rendered them as if they were real. I became the executor of these two minute projects by people who were mainly non-designers and confirmed my suspicion: everyone, regardless his age and job, can come up with extraordinary, wild, new and at times brilliant inventions.\n                                                     total number of collected bicycles:\u00a0 376 youngest participant:\u00a0 3 y.o. oldest participant:\u00a0 88 y.o. different nationalities of participants:\u00a0 7 bicycles facing left:\u00a0 75 % bicycles facing right:\u00a0 25 %\n      Some diversities are gender driven. Nearly 90% of drawings in which the chain is attached to the front wheel (or both to the front and the rear) were made by females. On the other hand, while men generally tend to place the chain correctly, they are more keen to over-complicate the frame when they realize they are not drawing it correctly.\n  One of the most frequent issues for participants was not knowing exactly how to describe their job in short.\n  The most unintelligible drawing has also the most unintelligible handwriting. It was made by a doctor.", "posttime": "2020-06-12 20:31:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8349\u56fe,bicycles,\u81ea\u884c\u8f66", "title": "\u8349\u56fe\u4e2d\u7684\u81ea\u884c\u8f66", "title_en": "Bicycles from Sketches", "transed": 1, "url": "http://www.gianlucagimini.it/prototypes/velocipedia.html", "via": "", "real_tags": ["\u8349\u56fe", "bicycles", "\u81ea\u884c\u8f66"]}, {"category": "", "categoryclass": "", "imagename": "819d0853e849dca473b8377a8ada0638.jpeg", "infoid": 1006277, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u5173\u4e8e\u7528Golang\u7f16\u5199\u5fae\u670d\u52a1\u7684\u5341\u90e8\u5206\u7cfb\u5217\u6587\u7ae0\u3002\u4f7f\u7528Protobuf\u548cGRPC\u4f5c\u4e3a\u5e95\u5c42\u4f20\u8f93\u534f\u8bae\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u624d\u5f04\u660e\u767d\u8fd9\u4e00\u70b9\uff0c\u5e76\u6572\u5b9a\u4e86\u4e00\u4e2a\u6e05\u6670\u800c\u7b80\u6d01\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u60f3\u4e0e\u5176\u4ed6\u521a\u63a5\u89e6\u8fd9\u4e00\u9886\u57df\u7684\u4eba\u5206\u4eab\u6211\u5728\u521b\u5efa\u3001\u6d4b\u8bd5\u548c\u90e8\u7f72\u5fae\u670d\u52a1\u65b9\u9762\u5b66\u5230\u7684\u4e1c\u897f\u3002\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u53ea\u4ecb\u7ecd\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u3001\u672f\u8bed\uff0c\u5e76\u4ee5\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u521b\u5efa\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5fae\u670d\u52a1\u3002\n\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u5806\u6808\u5c06\u662f\uff1aGolang\u3001MongoDB\u3001GRPC\u3001docker\u3001Google Cloud\u3001Kubernetes\u3001NATS\u3001CircleCI\u3001Terraform\u548cGo-Micro\u3002\n\u6211\u4eec\u5c06\u6784\u5efa\u53ef\u80fd\u662f\u60a8\u80fd\u60f3\u5230\u7684\u6700\u901a\u7528\u7684\u5fae\u670d\u52a1\u793a\u4f8b\uff0c\u4e00\u4e2a\u8fd0\u8f93\u96c6\u88c5\u7bb1\u7ba1\u7406\u5e73\u53f0\uff01\u535a\u5ba2\u611f\u89c9\u5fae\u670d\u52a1\u7684\u7528\u4f8b\u592a\u7b80\u5355\u4e86\uff0c\u6211\u60f3\u8981\u7684\u662f\u80fd\u591f\u771f\u6b63\u5c55\u793a\u590d\u6742\u6027\u5206\u79bb\u7684\u4e1c\u897f\u3002\u6240\u4ee5\u8fd9\u611f\u89c9\u50cf\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6311\u6218\uff01\n\u5728\u4f20\u7edf\u7684\u6574\u4f53\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u7684\u6240\u6709\u529f\u80fd\u90fd\u88ab\u5199\u5165\u5230\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u6709\u65f6\uff0c\u5b83\u4eec\u4f1a\u6309\u5176\u7c7b\u578b(\u5982\u63a7\u5236\u5668\u3001\u5b9e\u4f53\u3001\u5de5\u5382\u7b49)\u8fdb\u884c\u5206\u7ec4\u3002\u6709\u65f6\uff0c\u53ef\u80fd\u5728\u8f83\u5927\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u529f\u80fd\u6309\u5173\u6ce8\u70b9\u6216\u529f\u80fd\u5206\u5f00\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2aauth\u5305\u3001\u4e00\u4e2aFriends\u5305\u548c\u4e00\u4e2a\u6587\u7ae0\u5305\u3002\u5b83\u4eec\u53ef\u4ee5\u5305\u542b\u5b83\u4eec\u81ea\u5df1\u7684\u5de5\u5382\u3001\u670d\u52a1\u3001\u50a8\u5b58\u5e93\u3001\u6a21\u578b\u7b49\u96c6\u5408\u3002\u4f46\u662f\u6700\u7ec8\u5b83\u4eec\u88ab\u7ec4\u5408\u5728\u5355\u4e2a\u4ee3\u7801\u5e93\u4e2d\u3002\n\u5fae\u670d\u52a1\u7684\u6982\u5ff5\u662f\u5c06\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u7a0d\u5fae\u6df1\u5165\u4e00\u70b9\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5173\u6ce8\u70b9\u5206\u79bb\u5230\u5b83\u4eec\u81ea\u5df1\u7684\u3001\u72ec\u7acb\u7684\u3001\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u5e93\u4e2d\u3002\n\u590d\u6742\u6027-\u5c06\u529f\u80fd\u62c6\u5206\u6210\u5fae\u670d\u52a1\u5141\u8bb8\u60a8\u5c06\u4ee3\u7801\u62c6\u5206\u6210\u66f4\u5c0f\u7684\u5757\u3002\u8fd9\u8ba9\u4eba\u56de\u60f3\u8d77Unix\u90a3\u53e5\u53e4\u8001\u7684\u683c\u8a00\uff1a\u628a\u4e00\u4ef6\u4e8b\u505a\u597d\u3002\u6709\u4e00\u79cd\u8d8b\u52bf\uff0c\u4e0e\u5de8\u77f3\uff0c\u8ba9\u9886\u57df\u53d8\u5f97\u5f7c\u6b64\u7d27\u5bc6\u8026\u5408\uff0c\u5e76\u4f7f\u5173\u6ce8\u53d8\u5f97\u6a21\u7cca\u3002\u8fd9\u4f1a\u5bfc\u81f4\u66f4\u9ad8\u98ce\u9669\u3001\u66f4\u590d\u6742\u7684\u66f4\u65b0\uff0c\u6f5c\u5728\u66f4\u591a\u9519\u8bef\u548c\u66f4\u56f0\u96be\u7684\u96c6\u6210\u3002\n\u89c4\u6a21-\u5728\u4e00\u4e2a\u6574\u4f53\u4e2d\uff0c\u4ee3\u7801\u7684\u67d0\u4e9b\u533a\u57df\u53ef\u80fd\u6bd4\u5176\u4ed6\u533a\u57df\u4f7f\u7528\u5f97\u66f4\u9891\u7e41\u3002\u5bf9\u4e8e\u6574\u4f53\uff0c\u60a8\u53ea\u80fd\u6269\u5c55\u6574\u4e2a\u4ee3\u7801\u5e93\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u4e0d\u65ad\u53d7\u5230\u653b\u51fb\uff0c\u60a8\u9700\u8981\u6269\u5c55\u6574\u4e2a\u4ee3\u7801\u5e93\u6765\u5904\u7406\u60a8\u7684\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u7684\u8d1f\u8f7d\u3002\n\u5bf9\u4e8e\u5fae\u670d\u52a1\uff0c\u8fd9\u79cd\u5206\u79bb\u5141\u8bb8\u60a8\u5355\u72ec\u6269\u5c55\u5404\u4e2a\u670d\u52a1\u3002\u8fd9\u610f\u5473\u7740\u66f4\u6709\u6548\u7684\u6c34\u5e73\u7f29\u653e\u3002\u5b83\u4e0e\u5177\u6709\u591a\u4e2a\u6838\u5fc3\u548c\u533a\u57df\u7b49\u7684\u4e91\u8ba1\u7b97\u914d\u5408\u5f97\u975e\u5e38\u597d\u3002\nNginx\u5199\u4e86\u4e00\u4e2a\u5173\u4e8e\u5fae\u670d\u52a1\u5404\u79cd\u6982\u5ff5\u7684\u5947\u5999\u7cfb\u5217\uff0c\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u3002\n\u51e0\u4e4e\u6240\u6709\u8bed\u8a00\u90fd\u652f\u6301\u5fae\u670d\u52a1\uff0c\u6bd5\u7adf\uff0c\u5fae\u670d\u52a1\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u6846\u67b6\u6216\u5de5\u5177\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e9b\u8bed\u8a00\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u9002\u5408\u548c/\u6216\u66f4\u597d\u5730\u652f\u6301\u5fae\u670d\u52a1\u3002\u6709\u4e00\u79cd\u8bed\u8a00\u5f97\u5230\u4e86\u6781\u5927\u7684\u652f\u6301\uff0c\u90a3\u5c31\u662f\u6b4c\u5170\u8bed\u3002\nGolang\u975e\u5e38\u8f7b\u4fbf\u3001\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5e76\u4e14\u5bf9\u5e76\u53d1\u6709\u5f88\u597d\u7684\u652f\u6301\uff0c\u8fd9\u5728\u8de8\u591a\u53f0\u673a\u5668\u548c\u5185\u6838\u8fd0\u884c\u65f6\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u529f\u80fd\u3002\n\u6700\u540e\uff0cGO\u6709\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u5fae\u670d\u52a1\u6846\u67b6\uff0c\u79f0\u4e3aGO-Micro\u3002\u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u4e2d\u4f7f\u7528\u5b83\u3002\n\u56e0\u4e3a\u5fae\u670d\u52a1\u88ab\u5206\u6210\u5355\u72ec\u7684\u4ee3\u7801\u5e93\uff0c\u6240\u4ee5\u5fae\u670d\u52a1\u7684\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u662f\u901a\u4fe1\u3002\u5728\u6574\u4f53\u4e2d\uff0c\u901a\u4fe1\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u76f4\u63a5\u4ece\u4ee3\u7801\u5e93\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\u8c03\u7528\u4ee3\u7801\u3002\u7136\u800c\uff0c\u5fae\u670d\u52a1\u4e0d\u5177\u5907\u8fd9\u79cd\u80fd\u529b\uff0c\u56e0\u4e3a\u5b83\u4eec\u751f\u6d3b\u5728\u4e0d\u540c\u7684\u5730\u65b9\u3002\u56e0\u6b64\uff0c\u60a8\u9700\u8981\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f7f\u8fd9\u4e9b\u72ec\u7acb\u7684\u670d\u52a1\u80fd\u591f\u4ee5\u5c3d\u53ef\u80fd\u5c11\u7684\u5ef6\u8fdf\u76f8\u4e92\u901a\u4fe1\u3002\n\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4f20\u7edf\u7684REST\uff0c\u6bd4\u5982\u57fa\u4e8ehttp\u7684JSON\u6216XML\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u670d\u52a1A\u5fc5\u987b\u5c06\u5176\u6570\u636e\u7f16\u7801\u6210JSON/XML\uff0c\u901a\u8fc7\u7f51\u7edc\u5411\u670d\u52a1B\u53d1\u9001\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u670d\u52a1B\u5fc5\u987b\u5c06\u6765\u81eaJSON\u7684\u6d88\u606f\u89e3\u7801\u56de\u4ee3\u7801\u3002\u8fd9\u5728\u89c4\u6a21\u4e0a\u6709\u6f5c\u5728\u7684\u5f00\u9500\u95ee\u9898\u3002\u867d\u7136\u4f60\u88ab\u8feb\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e0a\u91c7\u7528\u8fd9\u79cd\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f46\u670d\u52a1\u4e4b\u95f4\u53ef\u4ee5\u7528\u5b83\u4eec\u60f3\u8981\u7684\u4efb\u4f55\u683c\u5f0f\u8fdb\u884c\u4ea4\u6d41\u3002\nGRPC\u8fdb\u6765\u4e86\u3002GRPC\u662fGoogle\u63a8\u51fa\u7684\u57fa\u4e8e\u4e8c\u8fdb\u5236\u7684\u8f7b\u91cf\u7ea7RPC\u901a\u4fe1\u534f\u8bae\u3002\u8fd9\u53e5\u8bdd\u592a\u591a\u4e86\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u3002GRPC\u4f7f\u7528\u4e8c\u8fdb\u5236\u4f5c\u4e3a\u5176\u6838\u5fc3\u6570\u636e\u683c\u5f0f\u3002\u5728\u6211\u4eec\u7684RESTful\u793a\u4f8b\u4e2d\uff0c\u4f7f\u7528JSON\uff0c\u60a8\u5c06\u901a\u8fc7http\u53d1\u9001\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5b57\u7b26\u4e32\u5305\u542b\u5927\u91cf\u5173\u4e8e\u5176\u7f16\u7801\u683c\u5f0f\u3001\u957f\u5ea6\u3001\u5185\u5bb9\u683c\u5f0f\u548c\u5404\u79cd\u5176\u4ed6\u96f6\u788e\u5185\u5bb9\u7684\u5143\u6570\u636e\u3002\u8fd9\u662f\u4e3a\u4e86\u4f7f\u670d\u52a1\u5668\u53ef\u4ee5\u901a\u77e5\u4f20\u7edf\u7684\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u5ba2\u6237\u7aef\u671f\u671b\u4ec0\u4e48\u3002\u5728\u4e24\u4e2a\u670d\u52a1\u4e4b\u95f4\u901a\u4fe1\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u771f\u6b63\u9700\u8981\u6240\u6709\u8fd9\u4e9b\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u51b7\u786c\u53cc\u661f\uff0c\u5b83\u7684\u91cd\u91cf\u8981\u8f7b\u5f97\u591a\u3002GRPC\u4f7f\u7528\u65b0\u7684HTTP2.0\u89c4\u8303\uff0c\u8be5\u89c4\u8303\u5141\u8bb8\u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u5b83\u751a\u81f3\u5141\u8bb8\u53cc\u5411\u6d41\uff0c\u8fd9\u662f\u76f8\u5f53\u9177\u7684\uff01HTTP 2\u5bf9GRPC\u7684\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u91cd\u8981\u3002\u6709\u5173HTTP2\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u770b\u4e00\u770b\u6765\u81eaGoogle\u7684\u8fd9\u7bc7\u7cbe\u5f69\u7684\u5e16\u5b50\u3002\n\u4f46\u662f\uff0c\u6211\u4eec\u5982\u4f55\u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\u5462\uff1f\u597d\u7684\uff0cGRPC\u6709\u4e00\u4e2a\u4ea4\u6362DSL\uff0c\u79f0\u4e3a\u534f\u8bae\u7f13\u51b2\u533a(Protobuf)\u3002Protobuf\u5141\u8bb8\u60a8\u4f7f\u7528\u5f00\u53d1\u4eba\u5458\u53cb\u597d\u7684\u683c\u5f0f\u5b9a\u4e49\u670d\u52a1\u7684\u63a5\u53e3\u3002\n\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6839\u76ee\u5f55\uff0c\u6211\u5df2\u5c06\u5176\u547d\u540d\u4e3amy shippy\u3002cd\u8fdb\u5165\u60a8\u7684\u65b0\u6839\u76ee\u5f55\uff0c\u5e76\u4ece\u6211\u4eec\u7684repo\u7684\u6839\u76ee\u5f55\u521b\u5efa\u4ee5\u4e0b\u6587\u4ef6\u5939\u548c\u6587\u4ef6\uff1ashippy-service-consignment/proto/consignment/consignment.proto\u3002\n\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6211\u5c06\u6211\u4eec\u6240\u6709\u7684\u670d\u52a1\u90fd\u653e\u5728\u4e00\u4e2a\u56de\u8d2d\u4e2d\u3002\u8fd9\u88ab\u79f0\u4e3a\u5355\u4e00\u56de\u8d2d(mono-repo)\u3002\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u7b80\u5316\u672c\u6559\u7a0b\u7684\u5185\u5bb9\u3002\u6709\u5f88\u591a\u652f\u6301\u548c\u53cd\u5bf9\u4f7f\u7528\u5355\u4e00\u56de\u590d\u7684\u8bba\u636e\uff0c\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8d58\u8ff0\u3002\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u8fd9\u4e9b\u670d\u52a1\u548c\u7ec4\u4ef6\u653e\u5728\u5355\u72ec\u7684repos\u4e2d\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u5f88\u591a\u5f88\u597d\u7684\u8bba\u636e\u3002\n//shippy-service-consignment/proto/consignment/consignment.protosyntax=&#34\uff1bProto3&#34\uff1b\uff1bPackage Consignment\uff1bservice ShippingService{RPC CreateConsignment(Consignment)Returns(Response){}}\u6d88\u606f\u5bc4\u552e{String id=1\uff1bString description=2\uff1bint32 Weight=3\uff1b\u91cd\u590d\u5bb9\u5668\u5bb9\u5668=4\uff1bString tainer_id=5\uff1b}\u6d88\u606f\u5bb9\u5668{String id=1\uff1bstring Customer_id=2\uff1bString Origin=3\uff1bString user_id=4\uff1b}\u6d88\u606f\u54cd\u5e94{bool Created=1\u3002\n\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u4f8b\u5b50\uff0c\u4f46\u8fd9\u91cc\u6709\u4e00\u4e9b\u4e8b\u60c5\u8981\u505a\u3002\u9996\u5148\uff0c\u60a8\u5b9a\u4e49\u4e86\u60a8\u7684\u670d\u52a1\uff0c\u5b83\u5e94\u8be5\u5305\u542b\u60a8\u5e0c\u671b\u5411\u5176\u4ed6\u670d\u52a1\u516c\u5f00\u7684\u65b9\u6cd5\u3002\u7136\u540e\u5b9a\u4e49\u60a8\u7684\u6d88\u606f\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5b9e\u9645\u4e0a\u5c31\u662f\u60a8\u7684\u6570\u636e\u7ed3\u6784\u3002Protobuf\u662f\u9759\u6001\u7c7b\u578b\u7684\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9Container\u6240\u505a\u7684\u90a3\u6837\u3002\u6d88\u606f\u672c\u8eab\u53ea\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\n\u8fd9\u91cc\u6709\u4e24\u4e2a\u5e93\u5728\u5de5\u4f5c\uff0c\u6d88\u606f\u7531protocol buf\u5904\u7406\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u670d\u52a1\u7531GRPC protocol buf\u63d2\u4ef6\u5904\u7406\uff0c\u8be5\u63d2\u4ef6\u7f16\u8bd1\u4ee3\u7801\u4e0e\u8fd9\u4e9b\u7c7b\u578b\u4ea4\u4e92\uff0c\u5373\u6211\u4eec\u7684proto\u6587\u4ef6\u7684\u670d\u52a1\u90e8\u5206\u3002\n\u7136\u540e\uff0c\u901a\u8fc7CLI\u8fd0\u884c\u8be5\u534f\u8bae\u7f13\u51b2\u533a\u5b9a\u4e49\uff0c\u4ee5\u751f\u6210\u5c06\u6b64\u4e8c\u8fdb\u5236\u6570\u636e\u4e0e\u60a8\u7684\u529f\u80fd\u63a5\u53e3\u7684\u4ee3\u7801\u3002\n\u60a8\u5728\u4e3b\u673a\u8def\u5f84\u4e2d\u8bbe\u7f6e\u4e86GOROOT\u6216GO\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f4d\u7f6e\u3002\n\u8fd9\u5c06\u8c03\u7528Protoc\u5e93\uff0c\u8be5\u5e93\u8d1f\u8d23\u5c06\u60a8\u7684Protobuf\u5b9a\u4e49\u7f16\u8bd1\u6210\u4ee3\u7801\u3002\u6211\u4eec\u8fd8\u6307\u5b9a\u4e86GRPC\u63d2\u4ef6\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u6784\u5efa\u4e0a\u4e0b\u6587\u548c\u8f93\u51fa\u8def\u5f84\u3002\n\u73b0\u5728\uff0c\u5f53\u60a8\u5728proto/consignment\u76ee\u5f55\u4e2d\u8fd0\u884c\u6b64\u547d\u4ee4\u65f6\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u4e00\u4e9b\u65b0\u751f\u6210\u7684\u4ee3\u7801\u3002\u8fd9\u662f\u7531GRPC/Protobuf\u5e93\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\uff0c\u5141\u8bb8\u60a8\u5c06\u60a8\u7684Protobuf\u5b9a\u4e49\u4e0e\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u63a5\u53e3\u3002\n\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u73b0\u5728\u5c31\u628a\u5b83\u8bbe\u7f6e\u597d\u3002\u4eceshippy-service-signment\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efamain.go\u6587\u4ef6$touch main.go\u3002\n//Shippy-Service-Consignment/main.gopackage mainimport(&#34\uff1b\u4e0a\u4e0b\u6587&#34\uff1b&#34\uff1b\u65e5\u5fd7&#34\uff1b&#34\uff1bNET&#34\uff1b&#34\uff1bsync&#34\uff1b//\u5bfc\u5165\u751f\u6210\u7684\u534f\u8bae\u4ee3\u7801PB&#34\uff1bgithub.com/&lt\uff1bYourUserName&gt\uff1b/shippy-service-consignment/proto/consignment&#34\uff1b&#34\uff1bgoogle.golang.org/grpc&#34\uff1b&#34\uff1bgoogle.golang.org/grpc/\u53cd\u5c04&#34\uff1b)const(port=&#34\uff1b\uff1a50051&#34\uff1b)\u7c7b\u578b\u5b58\u50a8\u5e93\u63a5\u53e3{Create(*pb.Consignment)(*pb.Consignment\uff0cError)}//\u5b58\u50a8\u5e93-\u865a\u62df\u5b58\u50a8\u5e93\uff0c\u8fd9\u6a21\u62df\u4e86\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b58\u50a8//\u7684\u4f7f\u7528\u3002\u6211\u4eec\u7a0d\u540e\u5c06\u7528\u5b9e\u9645\u7684\u5b9e\u73b0\u66ff\u6362\u5b83\u3002type Repository struct{musync.RWMutex Consignments[]*pb.Consignment}//\u521b\u5efa\u65b0\u7684\u5bc4\u552e\u51fd\u6570(repo*Repository)create(\u5bc4\u552e*pb.Consignment)(*pb.Consignment\uff0cerror){repo.mu.Lock()update\uff1a=append(repo.consignments\uff0cconsignment)repo.consignments=\u66f4\u65b0\u7684repo.\u3002\u60a8\u53ef\u4ee5\u5728\u751f\u6210\u7684\u4ee3\u7801\u672c\u8eab\u4e2d\u68c0\u67e5\u63a5\u53e3//\u4ee5\u83b7\u53d6\u786e\u5207\u7684\u65b9\u6cd5\u7b7e\u540d\u7b49//\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u3002type service struct{repo pository}//CreateConsignment-\u6211\u4eec\u53ea\u5728\u6211\u4eec\u7684\u670d\u52a1\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c//\u8fd9\u662f\u4e00\u4e2aCreate\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e0a\u4e0b\u6587\u548c\u8bf7\u6c42\u4f5c\u4e3a//\u53c2\u6570\uff0c\u8fd9\u4e9b\u7531GRPC server.func(s*service)CreateConsignment(CTX context.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context)(*pb.Consignment)(*pb.Consignment)(*pb.\u3002err\uff1a=s.repo.Create(Req)if err\uff01=nil{return nil\uff0cerr}//\u8fd4\u56de\u4e0e\u6211\u4eec\u5728//protocol buf\u5b9a\u4e49\u4e2d\u521b\u5efa\u7684`Response`\u6d88\u606f\u5339\u914d\u7684\u6d88\u606f\u3002\u56de\u8f66(&A)\u3002pb.Response{Created\uff1atrue\uff0cConsignment\uff1aConsignment}\uff0cnil}func main(){repo\uff1a=&amp\uff1bRepository{}//\u8bbe\u7f6e\u6211\u4eec\u7684GRPC\u670d\u52a1\u5668\u3002LIS\uff0cerr\uff1a=net.Listen(&#34\uff1btcp&#34\uff1b\uff0cport)if err\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u4fa6\u542c\uff1a%v&#34\uff1b\uff0cerr)}s\uff1a=grpc.NewServer()//\u5411GRPC\u670d\u52a1\u5668\u6ce8\u518c\u6211\u4eec\u7684\u670d\u52a1\uff0c\u8fd9\u5c06\u628a\u6211\u4eec\u7684//\u5b9e\u73b0\u7ed1\u5b9a\u5230//Protobuf\u5b9a\u4e49\u7684\u81ea\u52a8\u751f\u6210\u7684\u63a5\u53e3\u4ee3\u7801\u4e2d\u3002pb.RegisterShippingServiceServer(s\uff0c&amp\uff1bservice{repo})//\u5728GRPC\u670d\u52a1\u5668\u4e0a\u6ce8\u518c\u53cd\u5c04\u670d\u52a1\u3002\u5982\u679cerr\uff1a=s.Serve(Lis)\uff1berr\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u63d0\u4f9b\u670d\u52a1\uff1a%v&#34\uff1b\uff0c\u5219\u5728\u7aef\u53e3&#34\uff1b\u4e0a\u8fd0\u884c)\uff0c\u5219refection.Register log.Println(&#34\uff1b\u5728\u7aef\u53e3\uff1a&#34\uff1b\u4e0a\u8fd0\u884c)\u3002\uff0c\u9519\u8bef)}}\u3002\n\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u4ee3\u7801\u4e2d\u7559\u4e0b\u7684\u6ce8\u91ca\u3002\u4f46\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u91cc\u6211\u4eec\u6b63\u5728\u521b\u5efaGRPC\u65b9\u6cd5\u4e0e\u4e4b\u4ea4\u4e92\u7684\u5b9e\u73b0\u903b\u8f91\uff0c\u4f7f\u7528\u751f\u6210\u7684\u683c\u5f0f\u5728\u7aef\u53e350051\u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684GRPC\u670d\u52a1\u5668\u3002\u8fd9\u5c31\u5bf9\u4e86\uff01\u529f\u80fd\u9f50\u5168\u7684GRPC\u670d\u52a1\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528$GO Run Main.Go\u8fd0\u884c\u6b64\u7a0b\u5e8f\uff0c\u4f46\u60a8\u4e0d\u4f1a\u770b\u5230\u4efb\u4f55\u5185\u5bb9\uff0c\u800c\u4e14\u60a8\u8fd8\u4e0d\u80fd\u4f7f\u7528\u5b83\u2026\u2026\u3002\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u6765\u67e5\u770b\u5b83\u7684\u8fd0\u884c\u60c5\u51b5\u3002\n\u6ce8\u610f\uff1a\u5728\u672c\u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u65b0\u7684go mod\u547d\u4ee4\u6765\u5904\u7406\u4f9d\u8d56\u5173\u7cfb\uff0c\u56e0\u6b64\u8bf7\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u662fGO 1.11\u53ca\u66f4\u9ad8\u7248\u672c\uff01\n\u73b0\u5728\u4f3c\u4e4e\u662f\u4f7f\u7528$go mod\u521d\u59cb\u5316\u6211\u4eec\u7684\u9879\u76ee\u5e76\u83b7\u53d6\u4f9d\u8d56\u9879\u7684\u597d\u65f6\u673a\uff1a\n\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u547d\u4ee4\u884c\u754c\u9762\uff0c\u5b83\u5c06\u63a5\u53d7\u4e00\u4e2aJSON\u5bc4\u552e\u6587\u4ef6\u5e76\u4e0e\u6211\u4eec\u7684GRPC\u670d\u52a1\u4ea4\u4e92\u3002\n\u73b0\u5728\u5728\u6211\u4eec\u7684\u6839\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\uff1aShippy-cli-Consignment\u7684\u9879\u76ee\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u6587\u4ef6\uff1a\n//shippy/shippy-cli-signment/main.gopackage mainimport(&#34\uff1b\u7f16\u7801/json&#34\uff1b&#34\uff1bio/ioutil&#34\uff1b&#34\uff1blog&#34\uff1b&#34\uff1bos&#34\uff1b&#34\uff1bContext&#34\uff1bPB&#34\uff1bgithub.com/&lt\uff1bYourUserName&gt\uff1b/shippy/shippy-service-consignment/proto/consignment&#34\uff1b&#34\uff1bgoogle.golang.org/grpc&#34\uff1b)const(\u5730\u5740=&#34\uff1b\u672c\u5730\u4e3b\u673a\uff1a50051&#34\uff1bdefaultFilename=&#34\uff1b\u5bc4\u552e.json&#34\uff1b)func parseFile(\u6587\u4ef6\u5b57\u7b26\u4e32)(*pb.Consignment\uff0cerror){var\u5bc4\u552e*pb.\u5bc4\u552e\u6570\u636e\uff0cerr\uff1a=ioutil.ReadFile(File)if err\uff01=nil{return nil\uff0cerr}json.Unmarshal(data\uff0c&amp\uff1b\u5bc4\u552e)\u8fd4\u56de\u5bc4\u552e\uff0cerrconn\uff0cerr\uff1a=grpc.Dial(address\uff0cgrpc.WithInsecure())if err\uff01=nil{log.Fatalf(&#34\uff1b\u672a\u8fde\u63a5\uff1a%v&#34\uff1b\uff0cerr)}\u63a8\u8fdf\u8fde\u63a5\u3002Close()client\uff1a=pb.NewShippingServiceClient(Conn)//\u8054\u7cfb\u670d\u52a1\u5668\u5e76\u6253\u5370\u5176\u54cd\u5e94\u3002file\uff1a=defaultFilename\u5982\u679clen(os.Args)&gt\uff1b1{file=os.Args[1]}\u5bc4\u552e\uff0cerr\uff1a=parseFile(File)\u5982\u679cerr\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u89e3\u6790\u6587\u4ef6\uff1a%v&#34\uff1b\uff0cerr)}r\uff0cerr\uff1a=client.CreateConsignment(context.Background()\uff0c\u5bc4\u552e)if err\uff01=Nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u95ee\u5019\uff1a%v&#34\uff1b\uff0cerr)}log.Printf(&#34\uff1b\u521b\u5efa\u65f6\u95f4\uff1a%t&#34\uff1b\uff0cr.Created)}\u3002\n5A.\u3002\u6211\u4eec\u5c06\u5feb\u901f\u66f4\u65b0Shippy-service-Consignment\u7684go.mod\u6587\u4ef6\uff0c\u4f7f\u5176\u6307\u5411\u672c\u5730\u5b58\u50a8\u5e93\uff0c\u800c\u4e0d\u662f\u5c1d\u8bd5\u4ece\u8fdc\u7a0b\u56de\u8d2d\u4e2d\u63d0\u53d6\u3002\u60a8\u53ef\u80fd\u5e0c\u671b\u5728\u751f\u4ea7\u4e2d\u5220\u9664\u5b83\uff0c\u4f46\u5e94\u8be5\u6d88\u9664\u4e00\u4e9b\u6df7\u6dc6\u548c\u672c\u5730\u8fd0\u884c\u7684\u65f6\u95f4\uff0c\u8fd9\u662f\u65b0\u7684Go mod API\u7684\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u529f\u80fd\uff1a\n{&#34\uff1bdescription&#34\uff1b\uff1a&#34\uff1b\u8fd9\u662f\u6d4b\u8bd5\u5bc4\u552e&#34\uff1b\uff0c&#34\uff1b\u91cd\u91cf&#34\uff1b\uff1a550\uff0c&#34\uff1b\u5bb9\u5668&#34\uff1b\uff1a[{&#34\uff1bCustomer_id&#34\uff1b\uff1a&#34\uff1bCustomer 001&#34\uff1b\uff0c&#34\uff1buser_id&#34\uff1b\uff1a&#34\uff1buser001&#34\uff1b\uff0c&#34\uff1bOrigin&#34\uff1b\uff1a&#34\uff1b\u66fc\u5f7b\u65af\u7279\uff0c\u82f1\u56fd&#34\uff1b}]\uff0c&#34\uff1bVEVER_ID&#34\uff1b\uff1a&#34\uff1bVEVEL001&#34\uff1b}\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u60a8\u5728Shippy-Consignment-service\u4e2d\u8fd0\u884c$go run main.go\uff0c\u7136\u540e\u5728\u5355\u72ec\u7684\u7ec8\u7aef\u7a97\u683c\u4e2d\u8fd0\u884c$go run main.go\u3002\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u4e00\u6761\u6d88\u606f\uff0c\u4e0a\u9762\u5199\u7740Created\uff1aTrue\u3002\u4f46\u662f\u6211\u4eec\u600e\u4e48\u624d\u80fd\u771f\u6b63\u68c0\u67e5\u5b83\u521b\u9020\u4e86\u4ec0\u4e48\u5462\uff1f\u8ba9\u6211\u4eec\u7528GetConsignments\u65b9\u6cd5\u66f4\u65b0\u6211\u4eec\u7684\u670d\u52a1\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u770b\u6211\u4eec\u521b\u5efa\u7684\u6240\u6709\u5bc4\u552e\u3002\n//shippy-service-consignment/proto/consignment/consignment.protosyntax=&#34\uff1bProto3&#34\uff1b\uff1bPackage Consignment\uff1bservice ShippingService{RPC CreateConsignment(Consignment)Returns(Response){}//\u521b\u5efa\u65b0\u65b9\u6cd5RPC GetConsignments(GetRequest)Returns(Response){}}Message Containment{String id=1\uff1bString description=2\uff1bint32 Weight=3\uff1bRepeated Container Containers=4\uff1bString VEVER_ID=5\uff1b}\u6d88\u606f\u5bb9\u5668{String ID=1\uff1bString Customer_\u3002}//\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u7684GET RequestMessage GetRequest{}\u6d88\u606f\u54cd\u5e94{bool Created=1\uff1b\u5bc4\u552e=2\uff1b//\u5728\u6211\u4eec\u7684\u901a\u7528\u54cd\u5e94\u6d88\u606f\u4e2d\u6dfb\u52a0\u4e86\u591a\u5143\u5bc4\u552e\u91cd\u590d\u5bc4\u552e=3\uff1b}\u3002\n\u56e0\u6b64\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u6211\u4eec\u7684\u670d\u52a1\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3aGetConsignments\u7684\u65b0\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u6682\u65f6\u4e0d\u5305\u542b\u4efb\u4f55\u5185\u5bb9\u7684\u65b0GetRequest\u3002\u6211\u4eec\u8fd8\u5728\u56de\u590d\u6d88\u606f\u4e2d\u6dfb\u52a0\u4e86\u5bc4\u552e\u5b57\u6bb5\u3002\u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u8fd9\u91cc\u7684\u7c7b\u578b\u5728\u5b9e\u9645\u7c7b\u578b\u4e4b\u524d\u6709\u91cd\u590d\u7684\u5173\u952e\u5b57\u3002\u6b63\u5982\u60a8\u53ef\u80fd\u5df2\u7ecf\u731c\u5230\u7684\uff0c\u8fd9\u4ec5\u4ec5\u610f\u5473\u7740\u5c06\u8be5\u5b57\u6bb5\u89c6\u4e3a\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u7ec4\u3002\n\u73b0\u5728\u4f7f\u7528\u524d\u9762\u63d0\u5230\u7684\u547d\u4ee4\u91cd\u65b0\u6784\u5efa\u60a8\u7684\u539f\u578b\u5b9a\u4e49\u3002\u73b0\u5728\uff0c\u518d\u6b21\u5c1d\u8bd5\u8fd0\u884c\u60a8\u7684\u670d\u52a1\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u9519\u8bef\uff1a*service do not implementate consignment.ShippingServiceServer(Missing GetConsignments Method)\u3002\n\u56e0\u4e3a\u6211\u4eec\u7684GRPC\u65b9\u6cd5\u7684\u5b9e\u73b0\u662f\u57fa\u4e8e\u5339\u914d\u7531protobuf\u5e93\u751f\u6210\u7684\u63a5\u53e3\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u786e\u4fdd\u6211\u4eec\u7684\u5b9e\u73b0\u4e0e\u6211\u4eec\u7684proto\u5b9a\u4e49\u76f8\u5339\u914d\u3002\n\u8f6f\u4ef6\u5305mainimport(&#34\uff1b\u4e0a\u4e0b\u6587&#34\uff1b\u65e5\u5fd7&#34\uff1b&#34\uff1bNET&#34\uff1b\u540c\u6b65&#34\uff1bPB&#34\uff1bgithub.com/&lt\uff1bYourUsername&gt\uff1b/shippy-service-consignment/proto/consignment&#34\uff1b&#34\uff1bgoogle.golang.org/grpc&#34\uff1b)const(\u7aef\u53e3=&#34\uff1b\uff1a50051&#34\uff1b)\u7c7b\u578b\u5b58\u50a8\u5e93\u63a5\u53e3{create(*pb.Consignment)(*pb.Consignment\uff0cerror)getall()[]*pb.Consignment}//\u5b58\u50a8\u5e93-\u865a\u62df\u5b58\u50a8\u5e93\uff0c\u8fd9\u6a21\u62df\u4e86\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b58\u50a8\u5e93//\u7684\u4f7f\u7528\u3002\u6211\u4eec&#39\uff1b\u7a0d\u540e\u6211\u5c06\u7528\u5b9e\u9645\u7684\u5b9e\u73b0\u66ff\u6362\u5b83\u3002type Repository struct{musync.RWMutex Consignments[]*pb.Consignment}//\u521b\u5efa\u65b0\u7684\u5bc4\u552e\u51fd\u6570(repo*Repository)create(\u5bc4\u552e*pb.Consignment)(*pb.Consignment\uff0cerror){repo.mu.Lock()update\uff1a=append(repo.consignments\uff0cconsignment)repo.consignments=\u66f4\u65b0\u7684repo.mu.Unlock(\u3002nil}//getall signmentsfunc(repo*Repository)getall()[]*pb.Consignment{return repo.consignments}//\u670d\u52a1\u5e94\u8be5\u5b9e\u73b0\u6240\u6709\u65b9\u6cd5\u6765\u6ee1\u8db3\u6211\u4eec\u5728\u534f\u8bae\u4e2d\u5b9a\u4e49\u7684\u670d\u52a1\u3002\u60a8\u53ef\u4ee5\u5728\u751f\u6210\u7684\u4ee3\u7801\u672c\u8eab\u4e2d\u68c0\u67e5\u63a5\u53e3//\u4ee5\u83b7\u53d6\u786e\u5207\u7684\u65b9\u6cd5\u7b7e\u540d\u7b49//\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u3002type service struct{repo pository}//CreateConsignment-\u6211\u4eec\u53ea\u5728\u6211\u4eec\u7684\u670d\u52a1\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c//\u8fd9\u662f\u4e00\u4e2aCreate\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e0a\u4e0b\u6587\u548c\u8bf7\u6c42\u4f5c\u4e3a//\u53c2\u6570\uff0c\u8fd9\u4e9b\u7531GRPC server.func(s*service)CreateConsignment(CTX context.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context\uff0creq*pb.Consignment)(*pb.Consignment)(*pb.Context)(*pb.Consignment)(*pb.Consignment)(*pb.\u3002err\uff1a=s.repo.Create(Req)if err\uff01=nil{return nil\uff0cerr}//\u8fd4\u56de\u4e0e\u6211\u4eec\u5728//protocol buf\u5b9a\u4e49\u4e2d\u521b\u5efa\u7684`Response`\u6d88\u606f\u5339\u914d\u7684\u6d88\u606f\u3002\u56de\u8f66(&A)\u3002pb.Response{Created\uff1atrue\uff0cConsignment\uff1aConsignment}\uff0cnil}//GetConsignments-func(s*service)GetConsignments(CTX context.Context\uff0creq*pb.GetRequest)(*pb.Response\uff0cError){Consignments\uff1a=s.repo.GetAll()return&amp\uff1bpb.Response{Consignments\uff1aConsignments}\uff0cnil}func main(){resignments\uff1aconsignments}\uff0cnil}func main(){resignments\uff1a=s.repo.GetAll()return&amp\uff1bpb.Response{consignments\uff1aconsignments}\uff0cnil}func main(){recLIS\uff0cerr\uff1a=net.Listen(&#34\uff1btcp&#34\uff1b\uff0cport)\u5982\u679cerr\uff01=nil{log.Fatalf(&#34\uff1b\u672a\u80fd\u4fa6\u542c\uff1a%v&#34\uff1b\uff0cerr)}s\uff1a=grpc.NewServer()//\u5411GRPC\u670d\u52a1\u5668\u6ce8\u518c\u6211\u4eec\u7684\u670d\u52a1\uff0c\u8fd9\u5c06\u628a\u6211\u4eec\u7684//\u5b9e\u73b0\u7ed1\u5b9a\u5230//protocol buf\u5b9a\u4e49\u7684\u81ea\u52a8\u751f\u6210\u7684\u63a5\u53e3\u4ee3\u7801\u4e2d\u3002pb.RegisterShippingServiceServer(s\uff0c&amp\uff1bservice{repo})log.Println(&#34\uff1b\u5728\u7aef\u53e3\uff1a&#34\uff1b\uff0cport\u4e0a\u8fd0\u884c)\u5982\u679cerr\uff1a=s.Serve(Lis)\uff1berr\uff01=nil{log.Fatalf(&#34\uff1b\u670d\u52a1\u5931\u8d25\uff1a%v&#34\uff1b\uff0c\u9519\u8bef)}}\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5305\u542b\u4e86\u65b0\u7684GetConsignments\u65b9\u6cd5\uff0c\u66f4\u65b0\u4e86\u5b58\u50a8\u5e93\u548c\u63a5\u53e3\uff0c\u5e76\u6ee1\u8db3\u4e86PROTO\u5b9a\u4e49\u751f\u6210\u7684\u63a5\u53e3\u3002\u5982\u679c\u60a8\u8fd0\u884c$go run main\u3002\u518d\u6b21\u8fd0\u884c\uff0c\u5e94\u8be5\u53ef\u4ee5\u518d\u6b21\u8fd0\u884c\u3002\n\u8ba9\u6211\u4eec\u66f4\u65b0CLI\u5de5\u5177\uff0c\u4ee5\u5305\u62ec\u8c03\u7528\u6b64\u65b9\u6cd5\u5e76\u5217\u51fa\u6211\u4eec\u7684\u5bc4\u552e\u8d27\u7269\u7684\u529f\u80fd\uff1a\nFunc Main(){.getall\uff0cerr\uff1a=client.GetConsignments(context.Background()\uff0c&amp\uff1bpb.GetRequest{})if err\uff01=nil{log.Fatalf(&#34\uff1b\u65e0\u6cd5\u5217\u51fa\u53d1\u8d27\uff1a%v&#34\uff1b\uff0cerr)}for_\uff0cv\uff1a=range getAll.Consignments{log.Println(V)}}\u3002\n\u5728Main\u51fd\u6570\u7684\u6700\u5e95\u90e8\uff0c\u5728\u6211\u4eec\u6ce8\u9500&#34\uff1bCreated\uff1aSuccess\u6d88\u606f\u7684\u4e0b\u9762\uff0c\u8ffd\u52a0\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u7136\u540e\u91cd\u65b0\u8fd0\u884c$go run cli.go\u3002\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u5bc4\u552e\uff0c\u7136\u540e\u5728\u4e4b\u540e\u8c03\u7528GetConsignments\u3002\u8fd0\u884c\u8be5\u5217\u8868\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u8be5\u5217\u8868\u8d8a\u591a\u3002\n\u6ce8\u610f\uff1a\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0c\u6211\u6709\u65f6\u53ef\u80fd\u4f1a\u7f16\u6821\u4ee5\u524d\u7528\u2026\u2026\u7f16\u5199\u7684\u4ee3\u7801\u3002\u8868\u793a\u6ca1\u6709\u5bf9\u524d\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\uff0c\u4f46\u6dfb\u52a0\u6216\u9644\u52a0\u4e86\u989d\u5916\u7684\u884c\u3002\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528Protobuf\u548cGRPC\u6210\u529f\u521b\u5efa\u4e86\u4e00\u4e2a\u5fae\u670d\u52a1\u548c\u4e00\u4e2a\u4e0e\u5176\u4ea4\u4e92\u7684\u5ba2\u6237\u7aef\u3002\n\u672c\u7cfb\u5217\u7684\u4e0b\u4e00\u90e8\u5206\u5c06\u56f4\u7ed5\u96c6\u6210MICRO\u5c55\u5f00\uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u57fa\u4e8eGRPC\u7684\u5fae\u670d\u52a1\u7684\u5f3a\u5927\u6846\u67b6\u3002\u6211\u4eec\u8fd8\u5c06\u521b\u5efa\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u670d\u52a1\uff0c\u5373\u96c6\u88c5\u7bb1\u670d\u52a1\u3002\u8bf4\u5230\u5bb9\u5668\uff0c\u8ba9\u4eba\u56f0\u60d1\u7684\u662f\uff0c\u5728\u672c\u7cfb\u5217\u7684\u4e0b\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u8fd8\u5c06\u7814\u7a76\u5728Docker\u5bb9\u5668\u4e2d\u8fd0\u884c\u6211\u4eec\u7684\u670d\u52a1\u3002\n\u4efb\u4f55\u5173\u4e8e\u8fd9\u7bc7\u6587\u7ae0\u7684\u9519\u8bef\u3001\u9519\u8bef\u6216\u53cd\u9988\uff0c\u6216\u8005\u4efb\u4f55\u60a8\u8ba4\u4e3a\u6709\u5e2e\u52a9\u7684\u4e1c\u897f\uff0c\u8bf7\u7ed9\u6211\u53d1\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\n\u5982\u679c\u60a8\u89c9\u5f97\u672c\u7cfb\u5217\u5f88\u6709\u7528\uff0c\u5e76\u4e14\u60a8\u4f7f\u7528\u4e86\u5e7f\u544a\u62e6\u622a\u7a0b\u5e8f(\u8c01\u4f1a\u8d23\u602a\u60a8)\u3002\u8bf7\u8003\u8651\u629b\u7ed9\u6211\u51e0\u82f1\u9551\uff0c\u4ee5\u8865\u507f\u6211\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u3002\u5e72\u676f!\u3002https://monzo.me/ewanvalentine", "note_en": "This is a ten part series on writing microservices in Golang. Making use of protobuf and gRPC as the underlying transport protocol. Why? Because it took me a long time to figure this out and settle on a solution that was clear and concise, and I wanted to share what I&#39;d learnt about creating, testing and deploying microservices end-to-end with others new to the scene.\n In this tutorial, we will just be covering some of the basic concepts, terminology, and creating our first microservice in its crudest form.\n   The stack we will end up with will be: golang, mongodb, grpc, docker, Google Cloud, Kubernetes, NATS, CircleCI, Terraform and go-micro.\n        We will be building perhaps the most generic microservice example you can think of, a shipping container management platform! A blog felt too simple a use-case for microservices, I wanted something that could really show-off the separation of complexity. So this felt like a good challenge!\n   In a traditional monolith application, all of an organisations features are written into one single application. Sometime&#39;s they&#39;re grouped by their type, such as controllers, entities, factories etc. Other times, perhaps in larger application, features are separated by concern or by feature. So you may have an auth package, a friends package, and an articles package. Which may contain their own set of factories, services, repositories, models etc. But ultimately they are grouped together within a single codebase.\n A microservice is the concept of taking that second approach slightly further, and separating those concerns into their own, independent runnable codebase.\n   Complexity - Splitting features into microservices allows you to split code into smaller chunks. It harks back to the old unix adage of &#39;doing one thing well&#39;. There&#39;s a tendency with monoliths to allow domains to become tightly coupled with one another, and concerns to become blurred. This leads to riskier, more complex updates, potentially more bugs and more difficult integrations.\n Scale - In a monolith, certain areas of code may be used more frequently than others. With a monolith, you can only scale the entire codebase. So if your auth service is hit constantly, you need to scale the entire codebase to cope with the load for just your auth service.\n With microservices, that separation allows you to scale individual services individually. Meaning more efficient horizontal scaling. Which works very nicely with cloud computing with multiple cores and regions etc.\n Nginx wrote a fantastic series on the various concepts of microservices,  please give this a read.\n   Microservices are supported by just about all languages, after all, microservices are a concept rather than a specific framework or tool. That being said, some languages are better suited and, or have better support for microservices than others. One language with great support is Golang.\n Golang is very light-weight, very fast, and has a fantastic support for concurrency, which is a powerful capability when running across several machines and cores.\n  Finally, there is a fantastic microservice framework available for Go called go-micro. Which we will be using in this series.\n   Because microservices are split out into separate codebases, one important issue with microservices, is communication. In a monolith communication is not an issue, as you call code directly from elsewhere in your codebase. However, microservices don&#39;t have that ability, as they live in separate places. So you need a way in which these independent services can talk to one another with as little latency as possible.\n Here, you could use traditional REST, such as JSON or XML over http. However, the problem with this approach is that service A has to encode its data into JSON/XML, send a large string over the wire, to service B, which then has to decode this message from JSON, back into code. This has potential overhead problems at scale. Whilst you&#39;re forced to adopt this form of communication for web browsers, services can just about talk to each other in any format they wish.\n In comes  gRPC.  gRPC is a light-weight binary based RPC communication protocol brought out by Google. That&#39;s a lot of words, so let&#39;s dissect that a little. gRPC uses binary as its core data format. In our RESTful example, using JSON, you would be sending a string over http. Strings contain bulky metadata about its encoding format; about its length, its content format and various other bits and pieces. This is so that a server can inform a traditionally browser based client what to expect. We don&#39;t really need all of this when communicating between two services. So we can use cold hard binary, which is much more light-weight. gRPC uses the new HTTP 2.0 spec, which allows for the use of binary data. It even allows for bi-directional streaming, which is pretty cool! HTTP 2 is pretty fundamental to how gRPC works. For more on HTTP 2,  take a look at this fantastic post from Google.\n But how can we do anything with binary data? Well, gRPC has an interchange DSL called protobuf. Protobuf allows you to define an interface to your service using a developer friendly format.\n  Create a new root directory, I&#39;ve called mine  shippy. CD into your new root directory and create the following folder and file:  shippy-service-consignment/proto/consignment/consignment.proto from the root directory of our repo.\n  For the time being, I&#39;m housing all of our services in a single repo. This is known as a mono-repo. This is mostly to keep things simple for this tutorial. There are many arguments for and against using mono-repos, which I won&#39;t go into here. You could house all of these services and components in separate repos, there are many good arguments for that approach also.\n    // shippy-service-consignment/proto/consignment/consignment.protosyntax = &#34;proto3&#34;;package consignment; service ShippingService { rpc CreateConsignment(Consignment) returns (Response) {}}message Consignment { string id = 1; string description = 2; int32 weight = 3; repeated Container containers = 4; string vessel_id = 5;}message Container { string id = 1; string customer_id = 2; string origin = 3; string user_id = 4;}message Response { bool created = 1; Consignment consignment = 2;}\n  This is a really basic example, but there are a few things going on here. First of all, you define your service, this should contain the methods that you wish to expose to other services. Then you define your message types, these are effectively your data structure. Protobuf is statically typed, and you can define custom types, as we have done with  Container. Messages are themselves just custom types.\n There are two libraries at work here, messages are handled by protobuf, and the service we defined is handled by a gRPC protobuf plugin, which compiles code to interact with these types, i.e the  service part of our proto file.\n This protobuf definition is then ran through a CLI to generate the code to interface this binary data and your functionality.\n   You have your GOROOT set, or your go binaries location set in your host path.\n  This will call the protoc library, which is responsible for compiling your protobuf definition into code. We also specify the use of the grpc plugin, as well as the build context and the output path.\n Now when you run this command in your  proto/consignment directory, you should see some newly generated code. This is code automatically generated by the gRPC/protobuf libraries to allow you to interface your protobuf definition to your own code.\n  So let&#39;s set that up now. Create your main.go file  $ touch main.go from the  shippy-service-consignment project root.\n // shippy-service-consignment/main.gopackage mainimport (\t&#34;context&#34;\t&#34;log&#34;\t&#34;net&#34;\t&#34;sync&#34;\t// Import the generated protobuf code\tpb &#34;github.com/&lt;YourUserName&gt;/shippy-service-consignment/proto/consignment&#34;\t&#34;google.golang.org/grpc&#34;\t&#34;google.golang.org/grpc/reflection&#34;)const (\tport = &#34;:50051&#34;)type repository interface {\tCreate(*pb.Consignment) (*pb.Consignment, error)}// Repository - Dummy repository, this simulates the use of a datastore// of some kind. We&#39;ll replace this with a real implementation later on.type Repository struct {\tmu sync.RWMutex\tconsignments []*pb.Consignment}// Create a new consignmentfunc (repo *Repository) Create(consignment *pb.Consignment) (*pb.Consignment, error) {\trepo.mu.Lock()\tupdated := append(repo.consignments, consignment)\trepo.consignments = updated\trepo.mu.Unlock()\treturn consignment, nil}// Service should implement all of the methods to satisfy the service// we defined in our protobuf definition. You can check the interface// in the generated code itself for the exact method signatures etc// to give you a better idea.type service struct {\trepo repository}// CreateConsignment - we created just one method on our service,// which is a create method, which takes a context and a request as an// argument, these are handled by the gRPC server.func (s *service) CreateConsignment(ctx context.Context, req *pb.Consignment) (*pb.Response, error) {\t// Save our consignment\tconsignment, err := s.repo.Create(req)\tif err != nil {\t\treturn nil, err\t}\t// Return matching the `Response` message we created in our\t// protobuf definition.\treturn &amp;pb.Response{Created: true, Consignment: consignment}, nil}func main() {\trepo := &amp;Repository{}\t// Set-up our gRPC server.\tlis, err := net.Listen(&#34;tcp&#34;, port)\tif err != nil {\t\tlog.Fatalf(&#34;failed to listen: %v&#34;, err)\t}\ts := grpc.NewServer()\t// Register our service with the gRPC server, this will tie our\t// implementation into the auto-generated interface code for our\t// protobuf definition.\tpb.RegisterShippingServiceServer(s, &amp;service{repo})\t// Register reflection service on gRPC server.\treflection.Register(s)\tlog.Println(&#34;Running on port:&#34;, port)\tif err := s.Serve(lis); err != nil {\t\tlog.Fatalf(&#34;failed to serve: %v&#34;, err)\t}}\n Please read the comments left in the code carefully. But in summary, here we are creating the implementation logic which our gRPC methods interface with, using the generated formats, creating a new gRPC server on port 50051. There you have it! A fully functional gRPC service. You can run this with  $ go run main.go, but you won&#39;t see anything, and you won&#39;t be able to use it yet... So let&#39;s create a client to see it in action.\n Note: we&#39;re using the new go mod command to deal with dependencies throughout this series, so ensure you&#39;re using go 1.11 and over!\n Now seems like a good time to use  $ go mod to init our project and fetch our dependencies:\n  Let&#39;s create a command line interface, which will take a JSON consignment file and interact with our gRPC service.\n Now create a project called in our root:  shippy-cli-consignment, and create a new main file:\n // shippy/shippy-cli-consignment/main.gopackage mainimport (\t&#34;encoding/json&#34;\t&#34;io/ioutil&#34;\t&#34;log&#34;\t&#34;os&#34;\t&#34;context&#34;\tpb &#34;github.com/&lt;YourUserName&gt;/shippy/shippy-service-consignment/proto/consignment&#34;\t&#34;google.golang.org/grpc&#34;)const (\taddress = &#34;localhost:50051&#34;\tdefaultFilename = &#34;consignment.json&#34;)func parseFile(file string) (*pb.Consignment, error) {\tvar consignment *pb.Consignment\tdata, err := ioutil.ReadFile(file)\tif err != nil {\t\treturn nil, err\t}\tjson.Unmarshal(data, &amp;consignment)\treturn consignment, err}func main() {\t// Set up a connection to the server.\tconn, err := grpc.Dial(address, grpc.WithInsecure())\tif err != nil {\t\tlog.Fatalf(&#34;Did not connect: %v&#34;, err)\t}\tdefer conn.Close()\tclient := pb.NewShippingServiceClient(conn)\t// Contact the server and print out its response.\tfile := defaultFilename\tif len(os.Args) &gt; 1 {\t\tfile = os.Args[1]\t}\tconsignment, err := parseFile(file)\tif err != nil {\t\tlog.Fatalf(&#34;Could not parse file: %v&#34;, err)\t}\tr, err := client.CreateConsignment(context.Background(), consignment)\tif err != nil {\t\tlog.Fatalf(&#34;Could not greet: %v&#34;, err)\t}\tlog.Printf(&#34;Created: %t&#34;, r.Created)}\n 5a. We&#39;re going to quickly update our shippy-service-consignment&#39;s  go.mod file, to point to our local repository, instead of trying to pull from a remote repo. You will want to remove this in production, but should remove some confusion and time running locally, this is a really useful feature of the new go mod API:\n    { &#34;description&#34;: &#34;This is a test consignment&#34;, &#34;weight&#34;: 550, &#34;containers&#34;: [ { &#34;customer_id&#34;: &#34;cust001&#34;, &#34;user_id&#34;: &#34;user001&#34;, &#34;origin&#34;: &#34;Manchester, United Kingdom&#34; } ], &#34;vessel_id&#34;: &#34;vessel001&#34;}\n  Now if you run  $ go run main.go in  shippy-consignment-service, and then in a separate terminal pane, run  $ go run main.go. You should see a message saying  Created: true. But how can we really check it has created something? Let&#39;s update our service with a  GetConsignments method, so that we can view all of our created consignments.\n  // shippy-service-consignment/proto/consignment/consignment.protosyntax = &#34;proto3&#34;;package consignment;service ShippingService { rpc CreateConsignment(Consignment) returns (Response) {} // Created a new method rpc GetConsignments(GetRequest) returns (Response) {}}message Consignment { string id = 1; string description = 2; int32 weight = 3; repeated Container containers = 4; string vessel_id = 5;}message Container { string id = 1; string customer_id = 2; string origin = 3; string user_id = 4;}// Created a blank get requestmessage GetRequest {}message Response { bool created = 1; Consignment consignment = 2; // Added a pluralised consignment to our generic response message repeated Consignment consignments = 3;}\n So here we&#39;ve created a new method on our service called  GetConsignments, we have also created a new  GetRequest which doesn&#39;t contain anything for the time being. We&#39;ve also added a  consignments field to our response message. You will notice the type here has the keyword  repeated before the actual type. This, as you&#39;d probably have guessed, just means treat this field as an array of these types.\n Now re-build your proto definition again with the command mentioned earlier. Now, try running your service again, you should see an error similar to:  *service does not implement consignment.ShippingServiceServer (missing GetConsignments method).\n Because the implementation of our gRPC methods, are based on matching the interface generated by the protobuf library, we need to ensure our implementation matches our proto definition.\n  package mainimport (\t&#34;context&#34;\t&#34;log&#34;\t&#34;net&#34;\t&#34;sync&#34;\tpb &#34;github.com/&lt;YourUsername&gt;/shippy-service-consignment/proto/consignment&#34;\t&#34;google.golang.org/grpc&#34;)const (\tport = &#34;:50051&#34;)type repository interface {\tCreate(*pb.Consignment) (*pb.Consignment, error)\tGetAll() []*pb.Consignment}// Repository - Dummy repository, this simulates the use of a datastore// of some kind. We&#39;ll replace this with a real implementation later on.type Repository struct {\tmu sync.RWMutex\tconsignments []*pb.Consignment}// Create a new consignmentfunc (repo *Repository) Create(consignment *pb.Consignment) (*pb.Consignment, error) {\trepo.mu.Lock()\tupdated := append(repo.consignments, consignment)\trepo.consignments = updated\trepo.mu.Unlock()\treturn consignment, nil}// GetAll consignmentsfunc (repo *Repository) GetAll() []*pb.Consignment {\treturn repo.consignments}// Service should implement all of the methods to satisfy the service// we defined in our protobuf definition. You can check the interface// in the generated code itself for the exact method signatures etc// to give you a better idea.type service struct {\trepo repository}// CreateConsignment - we created just one method on our service,// which is a create method, which takes a context and a request as an// argument, these are handled by the gRPC server.func (s *service) CreateConsignment(ctx context.Context, req *pb.Consignment) (*pb.Response, error) {\t// Save our consignment\tconsignment, err := s.repo.Create(req)\tif err != nil {\t\treturn nil, err\t}\t// Return matching the `Response` message we created in our\t// protobuf definition.\treturn &amp;pb.Response{Created: true, Consignment: consignment}, nil}// GetConsignments -func (s *service) GetConsignments(ctx context.Context, req *pb.GetRequest) (*pb.Response, error) {\tconsignments := s.repo.GetAll()\treturn &amp;pb.Response{Consignments: consignments}, nil}func main() {\trepo := &amp;Repository{}\t// Set-up our gRPC server.\tlis, err := net.Listen(&#34;tcp&#34;, port)\tif err != nil {\t\tlog.Fatalf(&#34;failed to listen: %v&#34;, err)\t}\ts := grpc.NewServer()\t// Register our service with the gRPC server, this will tie our\t// implementation into the auto-generated interface code for our\t// protobuf definition.\tpb.RegisterShippingServiceServer(s, &amp;service{repo})\tlog.Println(&#34;Running on port:&#34;, port)\tif err := s.Serve(lis); err != nil {\t\tlog.Fatalf(&#34;failed to serve: %v&#34;, err)\t}}\n Here, we have included our new  GetConsignments method, updated our repository and interface and that satisfies the interface generated by the proto definition. If you run  $ go run main.go again, this should work again.\n Let&#39;s update our cli tool to include the ability to call this method and list our consignments:\n func main() { ... \tgetAll, err := client.GetConsignments(context.Background(), &amp;pb.GetRequest{})\tif err != nil {\t\tlog.Fatalf(&#34;Could not list consignments: %v&#34;, err)\t}\tfor _, v := range getAll.Consignments {\t\tlog.Println(v)\t}}\n  At the very bottom of our main function, underneath where we log out our &#34;Created: success&#34; message, append the code above, and re-run  $ go run cli.go. This will create a consignment, then call  GetConsignments after. you should see this list grow the more times you run it.\n Note: for brevity, I may sometimes redact code previously written with a ... to denote no changes were made to the previous code, but additional lines were added or appended.\n So there you have it, we have successfully created a microservice and a client to interact with it, using protobuf and gRPC.\n The next part in this series will be around integrating  micro, which is a powerful framework for creating gRPC based microservices. We will also create our second service, our container service. Speaking of containers, just to confuse matters, we will also look at running our services in Docker containers in the next part in this series.\n  Any bugs, mistakes, or feedback on this article, or anything you would find helpful, please  drop me an email.\n   If you are finding this series useful, and you use an ad-blocker (who can blame you). Please consider chucking me a couple of quid for my time and effort. Cheers!  https://monzo.me/ewanvalentine", "posttime": "2020-06-12 20:30:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,golang,\u670d\u52a1", "title": "Golang\u7684\u5fae\u578b\u670d\u52a1-\u7b2c1\u90e8\u5206-2020\u66f4\u65b0", "title_en": "Microservices in Golang \u2013 Part 1 \u2013 2020 Updated", "transed": 1, "url": "https://ewanvalentine.io/microservices-in-golang-part-1/", "via": "", "real_tags": ["2020", "golang", "\u670d\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "264af6db1dfca4f07eeb6985d94b2a1b.png", "infoid": 1006276, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u4e2a\u901a\u8fc7\u62bd\u8c61\u548c\u590d\u6742\u7684\u788e\u7247\u7740\u8272\u5668\u4e16\u754c\u7684\u6e29\u548c\u7684\u4e00\u6b65\u4e00\u6b65\u7684\u6307\u5357\u3002\n\u5e15\u7279\u91cc\u897f\u5965\u00b7\u5188\u8428\u96f7\u65af\u00b7\u7ef4\u6c83(1982\u5e74\uff0c\u963f\u6839\u5ef7\u5e03\u5b9c\u8bfa\u65af\u827e\u5229\u65af)\u662f\u7ebd\u7ea6\u7684\u827a\u672f\u5bb6\u548c\u5f00\u53d1\u5546\u3002\u4ed6\u63a2\u7d22\u6709\u673a\u4e0e\u5408\u6210\u3001\u6a21\u62df\u4e0e\u6570\u5b57\u3001\u4e2a\u4eba\u4e0e\u96c6\u4f53\u4e4b\u95f4\u7684\u95f4\u9699\u7a7a\u95f4\u3002\u5728\u4ed6\u7684\u5de5\u4f5c\u4e2d\uff0c\u4ed6\u5c06\u4ee3\u7801\u4f5c\u4e3a\u4e00\u79cd\u5bcc\u6709\u8868\u73b0\u529b\u7684\u8bed\u8a00\uff0c\u76ee\u7684\u662f\u5171\u540c\u5f00\u53d1\u66f4\u597d\u7684\u4ee3\u7801\u3002\n\u5e15\u7279\u91cc\u897f\u5965\u7814\u7a76\u5e76\u5b9e\u8df5\u4e86\u5fc3\u7406\u7597\u6cd5\u548c\u8868\u73b0\u529b\u827a\u672f\u7597\u6cd5\u3002\u4ed6\u62e5\u6709\u5e15\u68ee\u65af\u65b0\u5b66\u6821(Parsons The New School)\u7684\u8bbe\u8ba1\u4e0e\u653e\u5927\u6280\u672f\u7855\u58eb\u5b66\u4f4d\uff0c\u73b0\u5728\u4ed6\u5728\u90a3\u91cc\u4efb\u6559\u3002\u76ee\u524d\uff0c\u4ed6\u5728Mapzen\u62c5\u4efb\u56fe\u5f62\u5de5\u7a0b\u5e08\uff0c\u5236\u4f5c\u5f00\u6e90\u5730\u56fe\u5de5\u5177\u3002\nJen Lowe\u662fDatatling\u7684\u4e00\u540d\u72ec\u7acb\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u6570\u636e\u4f20\u64ad\u8005\uff0c\u5979\u5c06\u4eba+\u6570\u5b57+\u6587\u5b57\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5979\u4efb\u6559\u4e8eSVA\u7684\u793e\u4f1a\u521b\u65b0\u8bbe\u8ba1\u9879\u76ee\uff0c\u4e0e\u4eba\u5171\u540c\u521b\u529e\u4e86\u8bd7\u610f\u8ba1\u7b97\u5b66\u9662\uff0c\u5728\u7ebd\u7ea6\u5927\u5b66ITP\u6559\u6388\u827a\u672f\u5bb6\u6570\u5b66\uff0c\u5728\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u7a7a\u95f4\u4fe1\u606f\u8bbe\u8ba1\u5b9e\u9a8c\u5ba4\u8fdb\u884c\u7814\u7a76\uff0c\u5e76\u5728\u767d\u5bab\u79d1\u6280\u653f\u7b56\u529e\u516c\u5ba4\u8d21\u732e\u4e86\u4e00\u4e9b\u60f3\u6cd5\u3002\u5979\u5728SXSW\u548cEyeo\u6f14\u8bb2\u3002\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\u548c\u201c\u5feb\u901f\u516c\u53f8\u201d\u5bf9\u5979\u7684\u5de5\u4f5c\u8fdb\u884c\u4e86\u62a5\u9053\u3002\u5979\u7684\u7814\u7a76\u3001\u5199\u4f5c\u548c\u6f14\u8bb2\u63a2\u7d22\u4e86\u6570\u636e\u548c\u6280\u672f\u5728\u793e\u4f1a\u4e2d\u7684\u524d\u666f\u548c\u5f71\u54cd\u3002\u5979\u62e5\u6709\u5e94\u7528\u6570\u5b66\u5b66\u58eb\u5b66\u4f4d\u548c\u4fe1\u606f\u79d1\u5b66\u7855\u58eb\u5b66\u4f4d\u3002\u5979\u7ecf\u5e38\u662f\u5bf9\u7acb\u7684\uff0c\u5979\u603b\u662f\u7ad9\u5728\u7231\u7684\u4e00\u8fb9\u3002\n\u611f\u8c22Yoneda(Kynd)\u3001Nicolas Barradeau\u3001Karim Naaji\u63d0\u4f9b\u7684\u652f\u6301\u3001\u597d\u7684\u60f3\u6cd5\u548c\u4ee3\u7801\u3002\n\u611f\u8c22\u6bcf\u4e00\u4f4d\u76f8\u4fe1\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e3a\u4fee\u590d\u6216\u6350\u8d60\u505a\u51fa\u8d21\u732e\u7684\u4eba\u3002", "note_en": "This is a gentle step-by-step guide through the abstract and complex universe of Fragment Shaders.\n     Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) is a New York based artist and developer. He explores interstitial spaces between organic and synthetic, analog and digital, individual and collective. In his work he uses code as an expressive language with the intention of developing a better together.\n Patricio studied and practiced psychotherapy and expressive art therapy. He holds an MFA in Design &amp; Technology from Parsons The New School, where he now teaches. Currently he works as a Graphic Engineer at Mapzen making openSource mapping tools.\n  Jen Lowe is an independent data scientist and data communicator at Datatelling where she brings together people + numbers + words. She teaches in SVA&#39;s Design for Social Innovation program, cofounded the School for Poetic Computation, taught Math for Artists at NYU ITP, researched at the Spatial Information Design Lab at Columbia University, and contributed ideas at the White House Office of Science and Technology Policy. She&#39;s spoken at SXSW and Eyeo. Her work has been covered by The New York Times and Fast Company. Her research, writing, and speaking explore the promises and implications of data and technology in society. She has a B.S. in Applied Math and a Master&#39;s in Information Science. Often oppositional, she&#39;s always on the side of love.\n    Thanks  Kenichi Yoneda (Kynd),  Nicolas Barradeau,  Karim Naaji for contributing with support, good ideas and code.\n           Thanks to everyone who has believed in this project and  contributed with fixes or donations.", "posttime": "2020-06-12 20:13:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "book,\u8bbe\u8ba1", "title": "\u201c\u7740\u8272\u4e4b\u4e66\u201d(The Book Of Shaders)", "title_en": "The Book of Shaders", "transed": 1, "url": "https://thebookofshaders.com/", "via": "", "real_tags": ["book", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "6c52de644c06b6536f2481f1da5aaa06.jpg", "infoid": 1006275, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f6f\u4ef6\u754c\u6b63\u5728\u53d1\u751f\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\uff1a\u5b83\u6b63\u5728\u6162\u6162\u53d8\u5f97\u66f4\u7cdf\u3002\u4e0d\u662f\u6240\u6709\u7684\u8f6f\u4ef6\uff0c\u4f46\u662f\u5f88\u591a\u8f6f\u4ef6\u3002\u4e0e\u51e0\u5e74\u524d\u76f8\u6bd4\uff0c\u5b83\u53d8\u5f97\u66f4\u52a0\u8fdf\u7f13\uff0c\u53cd\u5e94\u66f4\u4e0d\u7075\u654f\uff0c\u53ef\u9760\u6027\u4e5f\u7565\u6709\u4e0b\u964d\u3002\n\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u8fd9\u662f\u5938\u5f20\u7684\u3002\u5ba2\u89c2\u5730\u8bf4\uff0c\u6211\u4eec\u4ece\u6765\u6ca1\u6709\u7528\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u3001\u7b14\u8bb0\u672c\u7535\u8111\u548c\u5e73\u677f\u7535\u8111\u505a\u8fc7\u8fd9\u4e48\u591a\u3001\u8fd9\u4e48\u5bb9\u6613\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u4ece\u672a\u50cf\u73b0\u5728\u8fd9\u6837\u5bb9\u6613\u5730\u5728\u66f4\u591a\u5730\u65b9\u4e4b\u95f4\u63a8\u9001\u66f4\u591a\u6570\u636e\u3002\u4f46\u662f\uff0c\u867d\u7136\u6211\u63d0\u5230\u7684\u6f5c\u4f0f\u7684\u201c\u6076\u5316\u201d\u53ea\u662f\u90e8\u5206\u5728\u5de5\u7a0b\u65b9\u9762\uff0c\u4f46\u5b83\u66f4\u591a\u5730\u843d\u5728\u66f4\u4e3b\u89c2\u7684\u3001\u66f4\u5de7\u5999\u7684\u65b9\u9762\uff0c\u4f7f\u5176\u66f4\u52a0\u4ee4\u4eba\u62c5\u5fe7\u3002\n\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u5173\u5fc3\u8fd9\u4ef6\u4e8b\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u9192\u7740\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u53d1\u751f\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u8303\u56f4\u5185\u3002\u8fd9\u4e00\u4e8b\u5b9e\u6700\u8fd1\u88abCOVID\u5927\u6d41\u884c\u653e\u5927\u4e86\u3002\n\u6211\u8ba4\u4e3a\uff0c\u6570\u767e\u4e07\u4eba(\u5982\u679c\u4e0d\u662f\u6570\u5341\u4ebf\u4eba)\u4f7f\u7528\u7684\u8f6f\u4ef6\u5728\u9053\u4e49\u4e0a\u6709\u8d23\u4efb\u63d0\u5347\u7528\u6237\u7684\u60c5\u611f\u548c\u667a\u529b\u7d20\u8d28\u3002\u8fd9\u79cd\u63d0\u5347\u59cb\u4e8e\u5de5\u827a\u3002\n\u6b63\u5982\u7269\u7406\u67b6\u6784\u53ef\u4ee5\u5f71\u54cd\u601d\u7ef4\u4e00\u6837\uff0c\u8f6f\u4ef6\u4e5f\u53ef\u4ee5\u5f71\u54cd\u601d\u7ef4\u3002\u901f\u5ea6\u8f83\u6162\u3001\u53ef\u9760\u6027\u8f83\u5dee\u7684\u8f6f\u4ef6\u5c31\u50cf\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u8f66\u7ad9(Penn Station)\uff1a\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u4ece\u4e00\u5217\u706b\u8f66\u6362\u4e58\u5230\u53e6\u4e00\u5217\u706b\u8f66\uff0c\u4f46\u8fd9\u4e2a\u5730\u65b9\u6c89\u95f7\u7684\u4f4e\u6d3c\u3001\u7f3a\u4e4f\u9633\u5149\u6216\u660e\u667a\u7684\u8ba4\u8def\u4f1a\u8ba9\u4f60\u89c9\u5f97\u81ea\u5df1\u50cf\u53ea\u8001\u9f20\uff0c\u597d\u6597\uff0c\u4e00\u6587\u4e0d\u503c\uff0c\u66f4\u7cdf\u7cd5\u7684\u662f\uff1a\u4f60\u4f1a\u9002\u5e94\u8fd9\u79cd\u611f\u89c9\uff0c\u5e76\u63a5\u53d7\u5b83\u4f5c\u4e3a\u4e00\u79cd\u5e38\u6001\u30021\u4e2a\u3002\n\u8fd9\u79cd\u8f6f\u4ef6\u5de5\u827a\u4e0b\u964d\u7684\u611f\u89c9\u591a\u5e74\u6765\u4e00\u76f4\u5728\u79ef\u7d2f\uff0c\u4f46\u76f4\u5230\u82f9\u679c\u53d1\u5e03iPad Magic Keyboard\uff0c\u6211\u624d\u5982\u6b64\u5f3a\u70c8\u5730\u611f\u53d7\u5230\u8fd9\u79cd\u8f6f\u786c\u4ef6\u9e3f\u6c9f\u7684\u75db\u82e6\u3002\n\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u4ece\u8fd9\u5bf9\u7ec4\u5408\u5f00\u59cb\uff1a\u4e00\u4e2a\u6781\u597d\u7684\u952e\u76d8\uff0c\u518d\u52a0\u4e0a\u840c\u82bd\u4e2d\u4f46\u4ecd\u6709\u7f3a\u9677\u7684\u8f6f\u4ef6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8d70\u51fa\u8fd9\u6761\u8def\uff0c\u8d70\u5411\u66f4\u5e7f\u9614\u7684\u9886\u57df\u3002\n\u6beb\u65e0\u7591\u95ee\uff0ciPad Pro\u662f\u4e00\u4ef6\u4ee4\u4eba\u7740\u8ff7\u7684\u7269\u54c1\u3002\u8fd9\u662f\u4e00\u5757\u592a\u8584\u592a\u8f7b\u7684\u5e73\u677f\uff0c\u7535\u6c60\u7eed\u822a\u65f6\u95f4\u5982\u6b64\u4e4b\u957f\uff0c\u65e0\u6cd5\u5b9e\u73b0\u5982\u6b64\u5f3a\u5927\u7684\u529f\u80fd\u3002\u800ciPad\u9b54\u672f\u952e\u76d8\u66f4\u662f\u7a81\u51fa\u4e86\u8fd9\u4e00\u70b9\u3002\u901a\u8fc7\u5c06\u8bbe\u5907\u6f02\u6d6e\u5728\u78c1\u94c1\u548c\u6bdb\u7ed2\u6bdb\u6be1\u7684\u5e8a\u4e0a\uff0c\u5e76\u9080\u8bf7\u60a8\u6839\u636e\u9700\u8981\u5c06iPad\u4ece\u652f\u67b6\u4e0a\u62c9\u51fa\u6765\uff0c\u9b54\u672f\u952e\u76d8\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5b9e\u73b0\u5e76\u5956\u52b1\u4e86\u8bbe\u5907\u7684\u72ec\u7acb\u4f7f\u7528\u548c\u914d\u5bf9\u4f7f\u7528\u3002\u603b\u4f53\u800c\u8a00\uff1a\u8fd9\u662f\u4e00\u4e2a\u5de5\u7a0b\u5947\u8ff9\u3002\n\u9b54\u672f\u952e\u76d8\u7684\u5494\u54d2-\u5494\u54d2\u952e\u76d8\u5143\u7d20\u4e5f\u5f88\u68d2\u3002\u6211\u628a\u5b83\u7528\u572811&34\uff1b2018\u7684iPad Pro\u4e0a\uff0c\u867d\u7136\u611f\u89c9\u6709\u70b9\u72ed\u7a84\uff0c\u4f46\u5b83\u7684\u673a\u68b0\u7ed3\u6784\u4ee4\u4eba\u6ee1\u610f\uff0c\u58f0\u97f3\u5b89\u9759\u60a6\u8033\uff0c\u800c\u4e14\u5173\u952e\u7684\u65c5\u884c\u4f53\u9a8c\u90fd\u5f88\u68d2\u3002\u6700\u65b0\u7684MacBook Pro\u952e\u76d8(2020)\u8981\u597d\u4e00\u70b9(\u4e8b\u5b9e\u4e0a\uff1a\u53ef\u80fd\u662f\u7b14\u8bb0\u672c\u7535\u8111\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684\u952e\u76d8)\uff0c\u4f46\u4e5f\u597d\u4e0d\u5230\u54ea\u91cc\u53bb\u3002\u9b54\u672f\u952e\u76d8\u6709\u70b9\u91cd\uff0c\u6253\u5f00\u8d77\u6765\u4e5f\u6709\u70b9\u5947\u602a\uff0c\u4f46\u9664\u4e86\u8fd9\u4e9b\u5c0f\u95ee\u9898\u4e4b\u5916\uff0c\u8fd9\u4e2a\u76f8\u5f53\u795e\u5947\u7684\u914d\u4ef6\u53ea\u6709\u4e00\u4e2a\u660e\u663e\u7684\u95ee\u9898(\u8fd9\u4e5f\u662f\u6211\u4eec\u591a\u5e74\u6765\u4e00\u76f4\u5728\u7ede\u5c3d\u8111\u6c41\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u6bcf\u9694\u51e0\u4e2a\u6708\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u65b0\u95fb\u4e00\u6837)\u3002\n\u6709\u65f6\uff0c\u5982\u679c\u6211\u5728Safari\u7684\u9605\u8bfb\u5668\u6a21\u5f0f\u4e0b\uff0c\u7528\u4e09\u4e2a\u624b\u6307-\u89e6\u6478\u677f-\u6ed1\u52a8\u6765\u5207\u6362\u5e94\u7528\u7a0b\u5e8f\u4e00\u79d2\u949f\uff0c\u7136\u540e\u518d\u56de\u6765\uff0c\u89c6\u53e3\u5c31\u4f1a\u8df3\u5230\u6587\u6863\u7684\u9876\u90e8\u3002\u5982\u679c\u6211\u5728Twitter\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8f93\u5165\u4e00\u6761\u63a8\u6587\uff0c\u5e76\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u6765\u56de\u8df3\u8dc3\uff0c\u5149\u6807\u5c31\u4f1a\u6d88\u5931\u3001\u7830\u5730\u4e00\u58f0\u6d88\u5931\uff0c\u76f4\u5230\u6211\u518d\u6b21\u70b9\u51fbTweetBox\u3002\u4e0d\u662f\u6bcf\u6b21\u90fd\u662f\uff0c\u4f46\u7ecf\u5e38\u662f\u3002\u8fd9\u6bd4\u6bcf\u6b21\u90fd\u66f4\u7cdf\u3002\n\u8fd9\u4ee4\u4eba\u607c\u706b\uff0c\u800c\u4e14\u6d89\u53ca\u5230iPadOS\u7684\u4f4e\u7ea7\u57fa\u7840\u6027\u95ee\u9898\uff0ciPadOS\u662f\u4e00\u79cd\u4e3a\u76f4\u63a5\u89e6\u6478\u800c\u6784\u5efa\u7684\u64cd\u4f5c\u7cfb\u7edf-\u5728\u73bb\u7483\u4e0a\u7528\u624b\u6307\u6216\u94c5\u7b14\u3002\u8bf7\u8bb0\u4f4f\uff0ciPadOS\u662fiOS\u7684\u4e00\u4e2a\u5206\u652f\uff0ciOS\u662f\u4e00\u79cd\u4e13\u4e3a\u7ad9\u5728\u7535\u68af\u91cc\u65f6\u5355\u624b\u4f7f\u7528\u800c\u8bbe\u8ba1\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u89e3\u51b3iPadOS\u7684\u8fd9\u4e9b\u6838\u5fc3\u95ee\u9898\uff0c\u4f46\u8fd9\u4e9b\u95ee\u9898\u6301\u7eed\u5b58\u5728\u7684\u4e8b\u5b9e\u8868\u660e\uff0c\u8fd9\u4e9b\u95ee\u9898\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u9664\u975e\u8fdb\u884c\u4e00\u4e9b\u8ba4\u771f\u7684\u64cd\u4f5c\u7cfb\u7edf\u91cd\u5199\uff0c\u5426\u5219\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5f97\u5230\u89e3\u51b3\u3002\n\u89c1\u9b3c\uff0c\u65e9\u57282018\u5e7411\u6708\uff0c\u6211\u5c31\u5728\u5c06iPad\u5347\u7ea7\u5230Pro\uff1a2\u7684\u8fc7\u7a0b\u4e2d\u5199\u8fc7\u540c\u6837\u7684\u95ee\u9898\u3002\n\u5207\u6362\u4e0a\u4e0b\u6587\u4e5f\u5f88\u9ebb\u70e6\u3002\u5982\u679c\u60a8\u5728\u6d4f\u89c8\u5668\u4e2d\u8fdb\u884c\u641c\u7d22\uff0c\u5e76\u4e14\u7ecf\u5e38\u5728(\u5b9e\u9645\u4e0a\u975e\u5e38\u68d2\u7684)Notes.app\u548cSafari\u4e4b\u95f4\u6765\u56de\u8df3\u8f6c\uff0c\u60a8\u6709\u65f6\u4f1a\u53d1\u73b0\u5149\u6807\u4f4d\u7f6e\u4e22\u5931\u3002\u60a8\u521a\u521a\u7f16\u8f91\u7684Notes.app\u6587\u6863\u5076\u5c14\u4f1a\u91cd\u7f6e\u5230\u5176\u81ea\u8eab\u7684\u9876\u90e8\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5f88\u957f\u7684\u6587\u6863\u6765\u8bf4\uff0c\u8fd9\u662f\u4ee4\u4eba\u607c\u706b\u7684\uff0c\u5e76\u4e14\u8ba9\u6bcf\u4e2aCmd-Tab\u90fd\u611f\u89c9\u5f88\u5371\u9669\u3002\u8fd9\u5e76\u4e0d\u603b\u662f\u53d1\u751f\uff0c\u884c\u4e3a\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7cdf\u3002\u8fd9\u4e2a\u754c\u9762\u201c\u8106\u5f31\u201d\u4f1a\u8ba9\u4f60\u89c9\u5f97\u4f60\u5728\u4ee5\u9519\u8bef\u7684\u65b9\u5f0f\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u66f4\u591a\u793a\u4f8b\uff1a\u4f7f\u7528Safari\u4e2d\u7684\u5171\u4eab\u90ae\u4ef6\u9009\u9879\uff0c\u5f00\u59cb\u952e\u5165\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u5207\u6362\u7a97\u53e3\u4ee5\u68c0\u67e5\u5730\u5740\uff0cCmd-Tab Back\uff0c\u73b0\u5728\u60a8\u952e\u5165\u7684\u5730\u5740\u5df2\u81ea\u52a8\u8f6c\u6362\u4e3a\u635f\u574f\u7684\u5730\u5740\u3002\u6309Tab\u952e\u8fdb\u5165\u7535\u5b50\u90ae\u4ef6\u6b63\u6587\u3002\u8bd5\u7740\u6309Shift-Tab\u540e\u9000\u6765\u7f16\u8f91\u4e3b\u9898-\u4f60\u505a\u4e0d\u5230\u3002\u6709\u9519\u8bef\u5417\uff1fShift-Tab\u7ec4\u5408\u952e\u63d2\u5165\u5236\u8868\u7b26-\u5149\u6807\u6084\u6084\u5411\u524d\u8df3\u52a8\u3002\u8fd9\u91cc\u9884\u671f\u7684\u7528\u6237\u4f53\u9a8c\u662f\uff0c\u5982\u679c\u5149\u6807\u4f4d\u4e8e\u6587\u672c\u5b57\u6bb5\u7684\u5f00\u5934\uff0c\u6309\u4f4fShift-Tab\u4f1a\u5c06\u5176\u62c9\u56de\u5230\u4e0a\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5c31\u50cf\u5728Mail on MacOS\u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\n\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u82f9\u679c\u7684\u8f6f\u4ef6\uff1a\u8c37\u6b4c\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u952e\u76d8\u7684\u8511\u89c6\u4ee4\u4eba\u9707\u60ca\u3002YouTube\u751a\u81f3\u4e0d\u63a5\u53d7\u6309\u7a7a\u683c\u952e\u5f00\u59cb\u548c\u505c\u6b62\u89c6\u9891\u7684\u901a\u7528\u6807\u51c6\u3002\n\u8fd9\u4e9b\u4e0d\u662f\u7b14\u8bb0\u672c\u7535\u8111\u7231\u597d\u8005\u7684\u62b1\u6028\uff0c\u800c\u662f\u4efb\u4f55\u60f3\u8981\u201c\u8bbe\u5907\u6d41\u7545\u6027\u201d\u7684\u4eba\u7684\u62c5\u5fe7\u3002\u7528\u6237\u4f53\u9a8c\u4e2d\u7684\u6253\u55dd\u7834\u574f\u4e86\u8fd9\u79cd\u6d41\u7545\u6027\uff0c\u4f7f\u5176\u65e0\u6cd5\u83b7\u5f97\u3002\u5f53\u6d89\u53ca\u5230\u4f18\u96c5\u5730\u5bfc\u822a\u64cd\u4f5c\u7cfb\u7edf\u3001\u4f7f\u7528\u8bbe\u5907\u3001\u6709\u521b\u610f\u3001\u505a\u9177\u72d7\u5c4e\u65f6\uff0c\u89c6\u7a97\u548c\u8f93\u5165\u53ef\u9760\u6027\u662f\u684c\u4e0a\u7684\u8d4c\u6ce8\u3002\n\u56e0\u4e3a\u9b54\u672f\u952e\u76d8\u505a\u5de5\u7cbe\u826f\uff0c\u800c\u4e14\u4f60\u76f8\u4fe1\u5b83\u80fd\u51c6\u786e\u5730\u8bb0\u5f55\u51fb\u952e\uff0c\u6240\u4ee5\u6ca1\u6709\u547d\u4ee4\u7684\u4e0d\u548c\u8c10\u5c31\u4f1a\u50cf\u4f60\u8ba4\u4e3a\u7684\u90a3\u6837\u8fc5\u901f\u5730\u53d1\u51fa\u3002\u6211\u7ecf\u5e38\u62cd\u6253Cmd-c\u4e94\u516d\u6b21\uff0c\u4ee5\u786e\u4fdd\u526f\u672c\u5df2\u7ecf\u201c\u62ff\u8d70\u201d\u3002\u590d\u5236\u662f\u5982\u6b64\u968f\u673a\uff0c\u4ee5\u81f3\u4e8e\u89c6\u89c9\u53cd\u9988\u4f1a\u5f88\u6709\u7528-\u5149\u6807\u95ea\u70c1\uff0c\u4efb\u4f55\u4e1c\u897f\u3002\u7136\u540e\uff1aCMD-V\u672c\u8eab\u53ef\u4ee5\u5c1d\u8bd5\u4e24\u5230\u4e09\u6b21\u624d\u80fd\u6b63\u786e\u53d1\u5c04\u3002\n\u8fd9\u901a\u5e38\u662f\u56e0\u4e3a\u6211\u77e5\u9053\u8981\u7c98\u8d34\u5230\u54ea\u91cc\uff0c\u800c\u7c98\u8d34\u662f\u5728\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u53d1\u751f\u7684\u3002\u5f53\u8fc7\u6e21\u6b63\u5728\u53d1\u751f\u7684\u65f6\u5019\uff0c\u6211\u6b63\u5728\u6253\u7535\u8bdd\u3002\u6211\u4e0d\u76f8\u4fe1\u6211\u5728\u8fd9\u79cd\u884c\u4e3a\u4e0a\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u672c\u8d28\u4e0a\uff1aiPadOS\u4e0a\u7684\u952e\u76d8\u7f13\u51b2\u533a\u611f\u89c9\u4e0d\u5b58\u5728\u3002\n\u4e0d\uff0c\u6211\u4e0d\u80fd\u5728iPad\u4e0a\u642d\u5efa\u6211\u7684\u4f9d\u8d56\u7ec8\u7aef\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u53d1\u5e03\u8f6f\u4ef6\uff0c\u4f46\u6211\u65e9\u5c31\u653e\u5f03\u4f7f\u7528\u8fd9\u53f0\u8bbe\u5907(\u6211\u5728\u4e0a\u9762\u8d77\u8349\u8fd9\u7bc7\u6587\u7ae0)\u6765\u505a\u8fd9\u4e9b\u4e8b\u60c5\u3002\u6211\u9047\u5230\u7684\u98a0\u7c38\u662f\u57fa\u672c\u7684\u64cd\u4f5c\u7cfb\u7edf\u98a0\u7c38(\u952e\u76d8\u7f13\u51b2\u533a\uff01)\uff0c\u629b\u5149\u98a0\u7c38\u3002\u6211\u4eec\u5728\u684c\u9762\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u51e0\u5341\u5e74\u6ca1\u6709\u9047\u5230\u8fc7\u7684\u98a0\u7c38\u3002\n\u8f6f\u4ef6\u5e94\u8be5\u9996\u5148\u63d0\u9ad8\u7528\u6237\u7684\u667a\u529b\u548c\u521b\u9020\u529b\u7684\u6d41\u7545\u6027\u3002\u5c31\u76ee\u524d\u7684\u60c5\u51b5\u800c\u8a00\uff0ciPadOS\u8ba9\u8fd9\u79cd\u6d41\u7545\u6027\u53d8\u5f97\u6bd4\u5fc5\u8981\u7684\u66f4\u96be\u5b9e\u73b0\u3002\n\u8fd9\u4e9b\u8f6f\u4ef6\u62b1\u6028\u4ee4\u4eba\u8d39\u89e3\u7684\u662f\uff0c\u82f9\u679c\u7684\u786c\u4ef6\u8d8a\u6765\u8d8a\u7cbe\u81f4\u3002\u867d\u7136\u8fdc\u975e\u5b8c\u7f8e\u65e0\u7f3a\uff0c\u4f46\u6574\u4e2a\u9635\u5bb9\u73b0\u5728(\u7ec8\u4e8e)\u57fa\u672c\u4e0a\u6446\u8131\u4e86\u4f60\u5728\u8f6f\u4ef6\u4e2d\u770b\u5230\u7684\u8fd9\u4e9b\u201c\u57fa\u7840\u6027\u201d\u95ee\u9898\u30023\u4e2a\u3002\n\u786c\u4ef6\u6709\u5b57\u9762\u4e0a\u548c\u6bd4\u55bb\u4e0a\u7684\u4f18\u52bf-\u56e0\u6b64\u5b83\u5fc5\u987b\u5b8c\u5168\u5b8c\u6574\uff0c\u5e76\u4e14\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u6ca1\u6709bug\u53ef\u4ee5\u53d1\u8d27\u3002\u8f6f\u4ef6\uff1f\u5b83\u66f4\u65e0\u5b9a\u5f62\uff0c\u5c31\u50cf\u8584\u96fe\u3002\u8865\u4e01\u53ef\u4ee5\u65e0\u4f11\u6b62\u5730\u63a8\u9001\u3002\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u7ed3\u675f\u3002\u786c\u4ef6\u6545\u969c\u53ef\u80fd\u4f1a\u6bc1\u4e86\u4e00\u5bb6\u516c\u53f8\u3002\u6709\u95ee\u9898\u7684\u8f6f\u4ef6\u53ef\u4ee5\u6253\u8865\u4e01\u3002\u8774\u8776\u952e\u76d8\u7684\u5d29\u6e83\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5e73\u606f\u4e0b\u6765\u3002\u751a\u81f3\u5f53\u6211\u5728\u8fd9\u4e2a\u6539\u8fdb\u7684\u9b54\u672f\u952e\u76d8\u4e0a\u6253\u5b57\u65f6\uff0c\u6211\u4e0d\u7981\u60f3\uff1a\u4ed6\u4eec\u771f\u7684\u6d4b\u8bd5\u4e86\u8fd9\u4e2a\u4e1c\u897f\u5417\uff1f\u6211\u8eab\u4e0a\u6709\u4e09\u4e2a\u8774\u8776\u952e\u76d8\u574f\u4e86\uff0c\u6709\u4e24\u4e2a\u662f\u5728\u7530\u91ce\u91cc\u3002\u4e00\u70b9\u4e5f\u4e0d\u597d\u73a9\u3002\u786c\u4ef6\u6545\u969c\u4f1a\u957f\u671f\u7559\u5728\u4eba\u4eec\u7684\u8111\u6d77\u4e2d\u3002\n\u62ffiPhone\u7684\u6444\u50cf\u5934\u4f5c\u4e3a\u8774\u8776\u952e\u76d8\u7684\u5bf9\u5e94\u7269\u3002\u76f8\u673a\u662f\u4ee4\u4eba\u7fa1\u6155\u7684\u4e1c\u897f\u3002\u575a\u5b9a\u53ef\u9760\u3002\u4f5c\u4e3a\u786c\u4ef6\uff0c\u4ed6\u4eec\u7684\u4e4f\u5473\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u3002\u4f60\u4e0a\u4e00\u6b21\u8003\u8651iPhone\u6444\u50cf\u5934\u662f\u4ec0\u4e48\u65f6\u5019\uff0c\u6216\u8005\u62c5\u5fc3\u5b83\u4f1a\u4e0d\u4f1a\u5de5\u4f5c\uff1f\u4f1f\u5927\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u7684\u4e00\u4e2a\u6807\u5fd7\u662f\u5fd8\u8bb0\u5b83\uff0c\u8ba9\u5b83\u987a\u5229\u5730\u4e0e\u4f60\u7684\u751f\u6d3b\u878d\u4e3a\u4e00\u4f53-\u4ece\u5b83\u4e2d\u63d0\u53d6\u6d41\u7545\u7684\u4e1c\u897f\u3002\u6700\u597d\u7684\u76f8\u673a\u662f\u4f60\u53e3\u888b\u91cc\u7684\u90a3\u53f0\u3002\u2026\u3002\u53ef\u4ee5\u53ef\u9760\u5730\u62cd\u51fa\u5f88\u68d2\u7684\u7167\u7247\u3002\n\u7136\u800c\uff1a\u6211\u4e00\u76f4\u5728\u8003\u8651\u5728iPhone\u4e0a\u4e0e\u6211\u7684\u7167\u7247\u4e92\u52a8\uff0c\u56e0\u4e3aPhotos(\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7528\u6765\u8bbf\u95ee\u4f60\u7684\u7167\u7247\u7684\u670d\u52a1)\u591a\u5e74\u6765\u53d8\u5f97\u8d8a\u6765\u8d8a\u6162\uff0c\u56e0\u4e3a\u5b83\u5bf9iCloud\u7684\u4f9d\u8d56\u7a0b\u5ea6\u8d8a\u6765\u8d8a\u9ad8\u3002\u5f53\u4f60\u5728Instagram\u4e0a\u6ed1\u52a8\uff0c\u4ece\u4f60\u7684\u7167\u7247\u6d41\u4e2d\u9009\u62e9\u4e00\u5f20\u7167\u7247\u65f6\uff0c\u901a\u5e38\u9700\u8981\u56db\u4e94\u79d2\u949f\u624d\u80fd\u663e\u793a\u4f60\u7684\u7167\u7247\u3002Facebook Messenger\u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u66fe\u7ecf\u662f\u77ac\u95f4\u7684\u3002\u4f8b\u5982\uff0c\u9009\u62e9\u7167\u7247\u7684\u6d88\u606f\u4e2d\u7684\u754c\u9762\u7279\u522b\u4ee4\u4eba\u8d39\u89e3\u3002(\u7167\u7247\u6d41\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u6a2a\u5411\u6eda\u52a8\u4e86\uff1f\u8fd9\u4e48\u591a\u5e74\u8fc7\u53bb\u4e86\uff0c\u201c\u7167\u7247\u201d\u548c\u201c\u6700\u8fd1\u201d\u5230\u5e95\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f)\n\u8d85\u8d8aiOS/ipadOS\uff1aCatalina\u53ef\u4ee5\u8bf4\u662f\u6700\u8fd1\u8bb0\u5fc6\u4e2d\u6700\u4e0d\u7a33\u5b9a\u3001\u6700\u4e0d\u6d41\u7545\u7684MacOS\u7248\u672c\u3002Apple Mail\u5b58\u5728\u4e25\u91cd\u7684\u6570\u636e\u4e22\u5931\u95ee\u9898\u3002\u90ae\u4ef6\u4e5f\u4e0d\u4f1a\u518d\u6eda\u52a8-\u6eda\u52a8\uff01-\u67d0\u4e9bHTML\u7535\u5b50\u90ae\u4ef6\u3002\u800c\u90ae\u4ef6\u5728\u6ca1\u6709\u660e\u663e\u539f\u56e0\u7684\u60c5\u51b5\u4e0b\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u4f5c\u4e3a\u6700\u524d\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u81ea\u53d1\u5730\u5f39\u51fa\u3002\nFinder\u662fMac\u6280\u672f\u4e2d\u6700\u53e4\u8001\u7684\u4ea7\u54c1\u4e4b\u4e00\uff0c\u5b83\u4e0d\u80fd\u53ef\u9760\u5730\u62a5\u544a\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\u3002\u8fd9\u6bd4\u5927\u591a\u6570\u5176\u4ed6\u9519\u8bef\u66f4\u4ee4\u4eba\u62c5\u5fe7\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u4e00\u4e9b\u6838\u5fc3\u4ee3\u7801-\u6700\u63a5\u8fd1\u91d1\u5c5e\u7684\u4f4d-\u6b63\u5728\u4ee5\u5bf9\u4e00\u822c\u7528\u6237\u548c\u4e13\u4e1a\u73af\u5883\u7684\u7a33\u5b9a\u6027\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u7684\u65b9\u5f0f\u8fdb\u884c\u66f4\u6539\u3002\nMacOS\u4e0a\u7684\u4e09\u4e2a\u4e3b\u8981\u8f6f\u4ef6\u53ef\u80fd\u662fFinder\u3001Safari\u548cMail\u3002\u8981\u8ba9\u5176\u4e2d\u4e24\u4e2a\u663e\u793a\u51fa\u4e0d\u7a33\u5b9a\u7684\u8ff9\u8c61\uff0c\u5c31\u50cf\u70b9\u4e86\u6c99\u62c9\uff0c\u4e00\u534a\u7684\u751f\u83dc\u53d8\u6210\u4e86\u74f7\u7816\u4e00\u6837\u3002\u53ea\u662f\u6709\u70b9\u5947\u602a\u3002\u8fd9\u4e0d\u5e94\u8be5\u53d1\u751f\uff0c\u7279\u522b\u662f\u5f53\u8fd9\u4e9b\u662f\u51e0\u5341\u5e74\u524d\u7684\u7a0b\u5e8f\u4e2d\u7684\u65b0\u7684\u3001\u5173\u952e\u7684\u9519\u8bef\u65f6\u3002\u8fd9\u4f1a\u8ba9\u60a8\u60f3\u77e5\u9053\u8fd8\u4f1a\u6709\u54ea\u4e9b\u6f0f\u6d1e\u88ab\u7834\u574f\uff0c\u4ee5\u53ca\u5f00\u53d1\u5468\u671f\u4e2d\u6709\u54ea\u4e9b\u6f0f\u6d1e\u88ab\u7834\u574f\u4ee5\u5141\u8bb8\u8fd9\u4e9bbug\u53d1\u5e03\u3002\n\u6211\u5728\u63a8\u7279\u4e0a\u95ee\u4eba\u4eec\uff0c\u4ed6\u4eec\u548c\u5361\u7279\u7433\u5a1c\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8fd9\u4e2a\u540d\u5355\u4ee4\u4eba\u6cae\u4e27\u5730\u5370\u8c61\u6df1\u523b\u3002\n\u7531\u4e8eCatalina\u4e0d\u518d\u8fd0\u884c32\u4f4d\u8f6f\u4ef6\uff0c\u65e7\u7684\u3001\u5b8c\u5168\u6b63\u5e38\u7684\u3001\u529f\u80fd\u6b63\u5e38\u7684\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u8fdb\u884c\u4e86\u201c\u66f4\u65b0\u201d\uff0c\u4ee5\u4fbf\u4e0e\u65b0\u7684\u64cd\u4f5c\u7cfb\u7edf\u914d\u5408\u4f7f\u7528\u3002\u6709\u65f6\u5f00\u53d1\u4eba\u5458\u4f1a\u8f6c\u800c\u4f7f\u7528Electron\u6846\u67b6\u8fdb\u884c\u5f00\u53d1\u3002\u7535\u5b50\u4f7f\u8de8\u5e73\u53f0\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u4f46\u8fd9\u662f\u4ee5\u727a\u7272\u5e94\u7528\u7a0b\u5e8f\u7684\u611f\u89c9\u6216\u529f\u80fd\u4e3a\u4ee3\u4ef7\u7684\uff0c\u800c\u8fd9\u79cd\u611f\u89c9\u6216\u529f\u80fd\u662f\u60a8\u671f\u671b\u7684\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u7684\u529f\u80fd\u3002\u51e0\u4e4e\u603b\u662f\uff0c\u8fd9\u4e9b\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f\u6bd4\u539f\u751f\u7248\u672c\u66f4\u6162\u3001\u66f4\u7b28\u91cd\u3002\n\u5728\u6211\u5199\u7684\u201c\u5feb\u901f\u8f6f\u4ef6\uff0c\u6700\u597d\u7684\u8f6f\u4ef6\u201d\u4e00\u4e66\u4e2d\uff0c\u6211\u8bb2\u8ff0\u4e86\u901f\u5ea6\u548c\u7a33\u5b9a\u6027\u7684\u76f4\u89c9\u662f\u5982\u4f55\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\uff1a\n\u901f\u5ea6\u548c\u53ef\u9760\u6027\u901a\u5e38\u662f\u624b\u62c9\u624b\u7684\u3002\u901f\u5ea6\u53ef\u4ee5\u5f88\u597d\u5730\u4ee3\u8868\u4e00\u822c\u5de5\u7a0b\u8d28\u91cf\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5728\u6267\u884c\u7b80\u5355\u4efb\u52a1\u65f6\u901f\u5ea6\u53d8\u6162\uff0c\u90a3\u4e48\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u5de5\u7a0b\u5e08\u4e0d\u662f\u6267\u7740\u4e8e\u7ec6\u8282\u7684\u4eba\u3002\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\uff0c\u4f46\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u707e\u96be\u6027\u7684\u5176\u4ed6\u95ee\u9898\u6f5c\u4f0f\u7740\u3002\u6211\u8981\u6211\u6240\u6709\u7684\u624b\u827a\u4eba\u90fd\u575a\u6301\u4e0b\u53bb\u3002\u6211\u4e0d\u8ba4\u4e3a\u201c\u5c24\u5229\u897f\u65af\u201d\u505a\u5f97\u5f88\u5dee\uff0c\u4f46\u6211\u5bf9\u5b83\u7684\u4fe1\u5fc3\u4e0d\u5982\u5b83\u80fd\u66f4\u4f18\u96c5\u5730\u5904\u7406\u8f93\u5165\u548c\u754c\u9762\u901f\u5ea6\u3002\u901f\u5ea6\u4f1a\u8ba9\u6211\u66f4\u4fe1\u4efb\u5b83\u3002\n\u7535\u5b50--\u6839\u636e\u5176\u7528\u9014\u7684\u5b9a\u4e49--\u5c06\u4f4e\u7ea7\u7ec6\u8282\u7684\u6267\u7740\u4ece\u5f00\u53d1\u8005\u8eab\u4e0a\u8ba9\u4f4d\u5230\u6846\u67b6\u4e0a\u3002\u611f\u89c9\u5b83\u6ecb\u751f\u4e86\u4e00\u79cd\u624b\u5de5\u827a\u7684\u5931\u8303\u3002\u4e0d\u8db3\u4e3a\u5947\u7684\u662f\uff0c\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f(Slake\u3001Arq6\u3001Dropbox\u7b49)\u611f\u89c9\u6bd4\u5927\u591a\u6570\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u66f4\u8106\u5f31\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u50cfVSCode\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u8868\u660e\uff0c\u53ea\u8981\u4ed8\u51fa\u52aa\u529b\u548c\u8d44\u6e90\uff0c\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u8868\u73b0\u51fa\u8272\u3002\n\u4e0d\u8fc7\uff0c\u5230\u6700\u540e\uff0c\u201c\u677e\u5f1b\u201d\u5728\u201c\u7535\u5b50\u6742\u5fd7\u201d\u4e0a\u88ab\u5199\u4e86\u56db\u6b21\u53c8\u91cd\u5199\u4e86\u56db\u6b21\uff0c\u8fd9\u662f\u4e00\u79cd\u629b\u7269\u7ebf\u5f0f\u7684\u4e1c\u897f\u3002\n\u9664\u4e86\u6846\u67b6\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u770b\u5230\u66fe\u7ecf\u53ef\u9760\u7684\u5e94\u7528\u7a0b\u5e8f\u6b63\u906d\u53d7\u7279\u6027\u7f13\u6162\u548c\u81a8\u80c0\u7684\u56f0\u6270\u3002\u4e5f\u8bb8\u8fd9\u662f\u4e0a\u5e02\u516c\u53f8\u7279\u6709\u7684\u7279\u6027\uff0c\u4ee5\u53ca\u5b83\u4eec\u5c06\u529f\u80fd\u4e0e\u7528\u6237\u589e\u957f\u6df7\u4e3a\u4e00\u8c08\u7684\u539f\u56e0\uff1f\u4f8b\u5982\uff1aDropbox\u5df2\u7ecf\u4ece\u4e00\u4e2a\u82d7\u6761\u7684\u3001\u9ad8\u5ea6\u53ef\u9760\u7684\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u53d8\u6210\u4e86\u4e00\u4e2a\u81a8\u80c0\u7684\u597d\u5947\u5fc3\uff0c\u4e0d\u77e5\u4ec0\u4e48\u539f\u56e0\u5c06CPU\u56fa\u5b9a\u5728200%\u3002\u6211\u73b0\u5728\u8ba9\u5b83\u4fdd\u6301\u5378\u8f7d\u72b6\u6001\uff0c\u76f4\u5230\u6211\u9700\u8981\u540c\u6b65\uff0c\u7136\u540e\u6253\u5f00\u5b83\u51e0\u5206\u949f\u3002\u8fd9\u98a0\u8986\u4e86\u539f\u59cbDropbox\u7684\u6838\u5fc3\u76ee\u6807\uff1a\u6210\u4e3a\u4e00\u4e2a\u65e0\u7f1d\u4e14\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u96c6\u6210\u7684\u672c\u5730\u548c\u4e91\u540c\u6b65\u6587\u4ef6\u5b58\u50a8\u7cfb\u7edf\u3002\n\u6709\u5173\u4e0e\u82f9\u679c\u7684\u8de8\u5e73\u53f0iOS/MacOS\u6846\u67b6Mac Catalyst\u7684\u4e89\u8bba\uff0c\u8bf7\u53c2\u89c1Twitter\u5e94\u7528\u7a0b\u5e8f\u3002\u95ee\u9898\u7684\u4e00\u4e2a\u5c0f\u6837\u672c(\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u662f\u5c0f\u95ee\u9898\uff0c\u4f46\u8fd9\u4e9b\u7ec6\u8282\u5f88\u91cd\u8981\uff01)\u3002\n\u50cf\u201c\u4e3b\u9875\u201d\u6309\u94ae\u8fd9\u6837\u7684\u5143\u7d20\u5728\u6ca1\u6709\u660e\u663e\u539f\u56e0\u7684\u60c5\u51b5\u4e0b\u4fdd\u6301\u9ad8\u4eae\u663e\u793a(\u5c31\u50cf\u7528Tab\u952e\u5207\u6362\u5230\u4e00\u6837)\u3002\n\u6700\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff1a\u50ac\u5316\u5242\u53ef\u80fd\u4f1a\u4f7f\u7f3a\u4e4f\u5de5\u827a\u548c\u7cbe\u81f4\u7684\u60c5\u51b5\u6b63\u5e38\u5316\u3002\u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c\u5341\u5e74\u524d\u6211\u4eec\u4e3aMacOS\u63d0\u4f9b\u4e86\u4e00\u4e2a\u575a\u56fa\u7684\u672c\u5730\u98ce\u683c\u7684Twitter\u5ba2\u6237\u7aef\u3002\u6240\u4ee5\u8fd9\u4e2a\u8f6f\u4ef6\u95ee\u9898\u66fe\u7ecf\u89e3\u51b3\u4e86\uff0c\u6ca1\u6709\u89e3\u51b3\uff0c\u73b0\u5728\u53c8\u4ee5\u66f4\u7cdf\u7cd5\u7684\u65b9\u5f0f\u91cd\u65b0\u89e3\u51b3\u4e86\u3002\nGmail\u548cGoogle Drive\u7684\u52a0\u8f7d\u65f6\u95f4\u90fd\u6bd4\u4eba\u4eec\u5408\u7406\u9884\u671f\u7684\u8981\u957f\u5f97\u591a\u3002\u6211\u521a\u521a\u505a\u4e86\u4e00\u4e2a\u975e\u6b63\u5f0f\u7684\u6d4b\u8bd5\uff1a\u4ece\u6253\u5f00\u6807\u7b7e\u5230\u7528Gmail\u5199\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u53ea\u9700\u89818\u79d2\u3002\nTwitter\u7684\u7f51\u7ad9\u73b0\u5728\u52a0\u8f7d(\u4e0e\u6d4f\u89c8\u5668\u6216\u64cd\u4f5c\u7cfb\u7edf\u65e0\u5173)\u8fd9\u4e48\u591a\u4e0d\u540c\u7684\u5c42\u548c\u9636\u6bb5\uff0c\u6211\u6c38\u8fdc\u4e0d\u77e5\u9053\u6211\u7684\u4e92\u8054\u7f51\u8fde\u63a5\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002twitter.com\u5947\u602a\u7684\u590d\u6742\u6027\u4e5f\u5e26\u6765\u4e86\u4e00\u4e2a\u4e0d\u5149\u5f69\u7684\u5956\u52b1\uff0c\u90a3\u5c31\u662f\u5b83\u662f\u552f\u4e00\u4e00\u4e2a\u7ecf\u5e38\u4f7f\u6211\u7684iPhone\u4e0a\u7684Safari\u5d29\u6e83\u7684\u7f51\u7ad9\u3002\n\u62a5\u7eb8\u7f51\u7ad9\u63d0\u4f9b\u5145\u65a5\u7740\u5e7f\u544a\u6280\u672f\u7684\u6570\u767e\u5146\u5b57\u8282\u6216\u66f4\u5927\u7684\u6709\u6548\u8d1f\u8f7d\u3002\u5728Chrome\u9009\u9879\u5361\u4e2d\u6253\u5f00nytimes.com\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u8017\u5c3d\u4e00\u5757\u65b0\u7684MacBook\u7535\u6c60\u3002\n\u5728\u914d\u5907120 Hz\u5c4f\u5e55\u548c\u6700\u65b0\u82f9\u679c\u94c5\u7b14\u7684iPad Pro\u4e0a\u7f16\u8f91\u7167\u7247\u662f\u5f53\u4eca\u6700\u201c\u795e\u5947\u201d\u7684\u7167\u7247\u51b2\u6d17\u65b9\u5f0f\u4e4b\u4e00\u3002\u6211\u7684\u51e0\u4e2a\u670b\u53cb\u90fd\u662f\u4e13\u4e1a\u63d2\u753b\u5bb6\uff0c\u4ed6\u4eec\u5bf9\u81ea\u5df1\u7684iPad\u4fe1\u8a93\u65e6\u65e6\u3002\u5e26\u5bf9\u5f00\u672c\u952e\u76d8\u7684iPad\u662f\u76ee\u524d\u6700\u8f7b\u3001\u6700\u6709\u80fd\u529b\u7684\u5c0f\u4e66\u5199\u8bbe\u5907\u4e4b\u4e00-\u4f60\u53ef\u4ee5\u628a\u5b83\u5e26\u5230\u5c71\u4e0a\uff0c\u4e00\u5468\u5185\u6bcf\u5929\u79bb\u7ebf\u51e0\u4e2a\u5c0f\u65f6\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u7ed9\u7535\u6c60\u5145\u7535\uff0c\u4e5f\u4e0d\u7528\u7167\u987e\u5b83\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u5b83\u4f1a\u88ab\u5c0f\u96e8\u6216\u6c34\u82b1\u6e85\u5230\u4e0a\u9762\u3002\n\u6700\u65b0\u76842020\u6b3eMacBook Pro\u662f\u8774\u8776\u65f6\u4ee3\u673a\u5668\u60e8\u8d25\u7684\u575a\u5b9e\u63d0\u70bc\u3002\u5f53Catalina\u4e0d\u4f1a\u8ba9\u4f60\u6447\u6447\u6b32\u5760\u65f6\uff0cMacOS\u5728\u529f\u80fd\u548c\u53ef\u7528\u6027\u4e4b\u95f4\u53d6\u5f97\u4e86\u6781\u597d\u7684\u5e73\u8861\uff0c\u80fd\u591f\u8fdb\u5165\u7ec8\u7aef\u6216\u4ee5\u56fe\u5f62\u65b9\u5f0f\u5bfc\u822a\u3002\u6211\u611f\u89c9\u81ea\u5df1\u5f88\u6d41\u5229\uff0c\u80fd\u4ee5\u4e00\u79cd\u4ee4\u4eba\u6109\u60a6\u548c\u6ee1\u8db3\u7684\u65b9\u5f0f\u638c\u63a7\u5c40\u9762\u3002\nMacOS\u8f6f\u4ef6\u575a\u6301\u624b\u5de5\u5236\u4f5c\u3001\u590d\u5199\u514b\u9686\u3001BBEdit\u6216Sublime Text(\u5c3d\u7ba1\u4e0d\u662f\u539f\u751f\u7684\uff0c\u4f46\u611f\u89c9\u975e\u5e38\u53ef\u9760\uff0c\u53cd\u5e94\u975e\u5e38\u7075\u654f\uff0c\u4ee5\u81f3\u4e8e\u4f60\u613f\u610f\u5ffd\u7565\u5b83\u7684\u602a\u7656)\u3001\u8d1d\u5c14\u65af\u767b(Bear)\u3001\u963f\u5c14\u5f17\u96f7\u5fb7(Alfred)\u3001IA Writer\u6216Keynote(\u53ef\u4ee5\u8bf4\u662f\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684MacOS\u8f6f\u4ef6\u4e4b\u4e00)\uff0c\u6216\u8005\u4efb\u4f55\u901a\u8fc7\u6050\u614c\u3001\u8d6b\u514b\u3001\u751a\u81f3\u7ec8\u7aef\u6216\u5feb\u901f(\u4e0e\u6240\u6709\u7406\u6027\u9884\u671f\u76f8\u53cd\uff0c\u4f7f\u7528\u8d77\u6765\u53ea\u662f\u4e00\u79cd\u4e50\u8da3)\u7684\u4e1c\u897f\uff0c\u90fd\u5b58\u5728\u4e8e\u5b9d\u85cf\u4e2d\uff0c\u4f8b\u5982\uff0cBear\u3001Alfred\u3001IA Writer\u6216Keynote(\u53ef\u4ee5\u8bf4\u662f\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684MacOS\u8f6f\u4ef6\u4e4b\u4e00)\uff0c\u751a\u81f3\u8fd8\u6709\u6050\u614c\u3001\u8d6b\u514b\u3001\u751a\u81f3\u7ec8\u7aef\u6216\u5feb\u901f(\u4e0e\u6240\u6709\u7406\u6027\u7684\u9884\u671f\u76f8\u53cd\uff0c\u4f7f\u7528\u5b83\u4eec\u53ea\u662f\u4e00\u79cd\u4e50\u8da3)\uff0c\u8fd9\u6837\u7684\u5b58\u5728\u5411\u4e16\u754c\u4e0a\u7684Slaks\u3001Twitter\u6216Adobes\u8bc1\u660e\uff0c\u4e3a\u7528\u6237\u6d41\u7545\u63d0\u4f9b\u670d\u52a1\u7684\u9762\u5411\u5de5\u827a\u7684\u8f6f\u4ef6\u5e76\u4e0d\u662f\u4e0d\u53ef\u80fd\u6216\u7f55\u89c1\u7684\uff0c\u800c\u4e14\u4ecd\u7136\u6709\u5229\u53ef\u56fe\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u4e13\u6ce8\u4e8e\u5de5\u827a\u548c\u6d41\u5229\u662f\u6709\u5546\u4e1a\u610f\u4e49\u7684\u3002\u6700\u8fd1\u51e0\u5e74\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u6574\u4e2a\u516c\u53f8\u7684\u5546\u4e1a\u6a21\u5f0f\u53ef\u4ee5\u6982\u62ec\u4e3a\u201c\u65e0\u81a8\u80c0\u7684X\u201d\u3002\u4eb2\u548c\u529b\u662f\u4e0d\u81c3\u80bf\u7684Adobe\u3002\u5728\u4f60\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u5b89\u88c5Adobe Creative Cloud\uff0c\u60ca\u53f9\u4e8e\u81f3\u5c11\u6709\u5341\u51e0\u4e2a\u8fdb\u7a0b\u51fa\u4e8e\u672a\u77e5\u76ee\u7684\u5728\u540e\u53f0\u65cb\u8f6c\u3002\u201c\u4eb2\u548c\u529b\u56fe\u7247\u201d\u3001\u51fa\u7248\u5546\u548c\u8bbe\u8ba1\u5e08\u7684\u6210\u529f\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002Sketch\u591a\u5e74\u6765\u7684\u4e3b\u8981\u7279\u70b9\u5f88\u7b80\u5355\uff1a\u4e0d\u662fAdobe\u3002\n\u8fd8\u6709\u7f51\u7edc\uff01\u5f53\u4f60\u5173\u5fc3\u7684\u65f6\u5019-\u5f53\u4f60\u771f\u7684\u5728\u4e4e\u7684\u65f6\u5019-\u7f51\u7edc\u662f\u4ee4\u4eba\u656c\u754f\u7684\u3002\u6211\u4ecd\u7136\u4e0d\u6562\u76f8\u4fe1Figma\u662f\u7f51\u7edc\u539f\u751f\u7684(\u4e5f\u8bde\u751f\u4e8eNot Adobe Camp 6)\u3002\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u611f\u89c9\u5982\u6b64\u5f3a\u5927\uff0c\u5982\u6b64\u5feb\u901f\uff0c\u5982\u6b64\u7cbe\u5fc3\u5236\u4f5c\uff0c\u5e76\u4e14\u5b8c\u5168\u57fa\u4e8eWeb\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u79cd\u706f\u5854--\u5bf9\u4e8e\u8ff7\u5931\u5728\u590d\u6742\u3001\u5783\u573e\u548c\u4e0d\u5fc5\u8981\u6846\u67b6\u7684\u6d77\u6d0b\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u7f51\u7ad9\u6765\u8bf4\uff0c\u5e94\u8be5\u662f\u4e00\u79cd\u539f\u578b\u3002\n\u6700\u8fd1\uff0c\u6211\u63a8\u51fa\u4e86\u4e00\u4e2a\u9759\u6001\u7f51\u7ad9/\u4e66\u7c4d--ise-ji\uff1a\u4e0e\u6211\u540c\u884c--\u5b83\u7684\u6f5c\u5728\u6709\u6548\u8d1f\u8f7d\u4e3a\u6570\u767e\u5146\u5b57\u8282\uff0c\u4f46\u901a\u8fc7\u4f7f\u7528\u6700\u5c11\u7684javascript\u3001\u5ef6\u8fdf\u52a0\u8f7d\u548c\u4f18\u5316\uff0c\u9875\u9762\u7684\u6574\u4f53\u91cd\u91cf\u6700\u5c0f\uff0c\u611f\u89c9\u5feb\u901f\u4e14\u54cd\u5e94\u8fc5\u901f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u53ef\u4ee5\u5728Github\u4e0a\u514d\u8d39\u6258\u7ba1\u4e00\u4e2a\u8fd9\u6837\u7684\u7f51\u7ad9\uff0c\u6216\u8005\u6253\u5f00\u4e00\u4e2a\u5ec9\u4ef7\u7684\u6570\u5b57\u6d77\u6d0b\u76d2\u5b50\uff0c\u7136\u540e\u5728\u5b83\u9762\u524d\u6251\u901a\u4e00\u58f0\u5173\u95edCloudflare\uff0c\u8fd9\u7b80\u76f4\u662f\u5947\u8ff9\u3002\u6240\u6709\u4eba\u90fd\u53ef\u4ee5(\u9010\u6b65)\u83b7\u5f97\u8ba9\u4e8b\u60c5\u8fd0\u884c\u826f\u597d\u548c\u53ef\u9760\u7684\u5de5\u5177\u3002\n\u6211\u4eec\u7684\u8ba1\u7b97\u786c\u4ef6\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u51fa\u8272\u3001\u66f4\u7cbe\u81f4\u3001\u66f4\u53ef\u9760\u3002\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u6838\u5fc3\u8f6f\u4ef6\u6709\u65f6\u4f1a\u611f\u89c9\u5230\u5012\u9000\uff0c\u671d\u7740\u4e0d\u90a3\u4e48\u6ce8\u91cd\u5de5\u827a\u3001\u4e00\u81f4\u6027\u548c\u7a33\u5b9a\u6027\u7684\u65b9\u5411\u524d\u8fdb\u3002\n\u5728Catalina\u7684\u51cc\u4e71\u548ciPadOS\u7684\u51e0\u4e4e\u4f46\u4e0d\u592a\u6709\u610f\u4e49\u4e4b\u95f4\uff0c\u73b0\u5728\u6700\u9700\u8981\u7684\u4e0d\u662f\u5f15\u4eba\u6ce8\u76ee\u7684\u6845\u6746\u529f\u80fd\uff0c\u800c\u662f\u91cd\u65b0\u8003\u8651\u67af\u71e5\u7684\u87ba\u6bcd\u548c\u87ba\u6813\uff0c\u6a71\u67dc\u80cc\u9762\u7684\u6cb9\u6f06\uff0c\u6839\u636e\u9700\u8981\u5e73\u6ed1\u6240\u6709\u7684\u51f9\u51f8\u4e0d\u5e73\u548c\u5361\u987f\uff0c\u4ee5\u5b9e\u73b0\u8bbe\u5907\u6d41\u7545\u6027-\u800c\u4e14\u4e0d\u4ec5\u4ec5\u662f\u4e00\u5e74\u7684\u6e05\u7406\u6211\u4eec\u8ba1\u7b97\u73af\u5883\u4e2d\u80ae\u810f\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u800c\u662f\u91cd\u5851\u50cf\u82f9\u679c\u8fd9\u6837\u7684\u516c\u53f8\u7684\u5185\u90e8\u8f6f\u4ef6\u6587\u5316\uff0c\u4ee5\u63d0\u5347\u7528\u6237\n\u73b0\u5728\u662f\u65f6\u5019\u8ba9\u6240\u6709\u8fd9\u4e9b\u534e\u4e3d\u7684\u786c\u4ef6\u8d70\u51fa\u8f6f\u4ef6\u7684\u4f4e\u8ff7\u4e86\u3002\n\u66f4\u4e0d\u7528\u8bf4\u77e5\u9053\u8fc7\u53bb\u662f\u4ec0\u4e48\u548c\u73b0\u5728\u662f\u4ec0\u4e48\u7684\u666e\u904d\u4ee4\u4eba\u6cae\u4e27\u7684\u54c1\u8d28\u3002\u21a9\ufe0e\u3002\n\u516c\u5e73\u5730\u8bf4\uff1a\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u6211\u5728\u90a3\u7bc7\u6587\u7ae0\u4e2d\u5199\u7684\u5f88\u591a\u7f3a\u70b9\u90fd\u5728iPadOS\u4e0a\u5f97\u5230\u4e86\u5f88\u597d\u7684\u89e3\u51b3\u3002\u770b\u5230\u4ed6\u4eec\u7684\u56e2\u961f\u8ba9\u5e73\u53f0\u53d8\u5f97\u66f4\u5f3a\u5927\uff0c\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4e5f\u4ee4\u4eba\u632f\u594b\u3002\u21a9\ufe0e\u3002\nTouchBar\u7edd\u5bf9\u662f\u8fc7\u53bb20\u5e74\u6765\u6dfb\u52a0\u5230\u4efb\u4f55\u4e0eMac\u76f8\u5173\u7684\u8bbe\u5907\u4e0a\u7684\u6700\u5dee\u7684\u786c\u4ef6\u201c\u529f\u80fd\u201d\u3002\u6211\u60f3\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f-\u9664\u4e86\u90a3\u4e2a\u6df7\u86cb\u66f2\u68cd\u7403\u51b0\u7403\u9f20\u6807(\u4eba\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u901a\u8fc7\u63d2\u5165\u53e6\u4e00\u4e2a\u9f20\u6807\u5c31\u9009\u62e9\u9000\u51fa)-\u5c3d\u7ba1\u5b83\u51e0\u4e4e\u6ca1\u6709\u7ed9\u684c\u9762\u5e26\u6765\u4efb\u4f55\u597d\u5904\uff0c\u53ea\u5e26\u6765\u4e86\u8d1f\u9762\u7684\u5f71\u54cd\uff0c\u4f46\u516c\u53f8\u8fd8\u662f\u5982\u6b64\u5bb9\u6613\u5730\u52a0\u500d\u4e86\u8d4c\u6ce8\u3002(\u6211\u8bd5\u8fc7BetterTouchBar\uff0c\u5728TouchBar\u4e0a\u589e\u52a0\u4e86\u5929\u6c14\u5c0f\u90e8\u4ef6\u548cAirPod\u7535\u6c60\u7535\u91cf\uff0c\u4f46\u6700\u7ec8\u53d1\u73b0\u5b83\u5f0a\u5927\u4e8e\u5229\u3002)\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u5728\u6700\u8fd1\u7684MacBook Pro\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u6062\u590d\u4e86Esc\u952e\u548c\u4e13\u7528\u7684Touch-ID\u6309\u94ae\u3002\u8fd9\u81f3\u5c11\u7a0d\u5fae\u8ba9TouchBar\u8fd8\u53ef\u4ee5\u63a5\u53d7\u3002\u65b0\u952e\u76d8\u786e\u5b9e\u975e\u5e38\u68d2(\u5047\u8bbe\u5b83\u4eec\u7ecf\u5f97\u8d77\u65f6\u95f4\u7684\u8003\u9a8c)\u3002\u8bda\u7136\uff0c\u8fd9\u4e9bMacBook Pro\u5728\u56db\u5e74\u524d\u53ef\u80fd\u5c31\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u8fdf\u5230\u603b\u6bd4\u4e0d\u5230\u597d\u3002\u21a9\ufe0e\u3002\n\u5f53\u7136\uff0c\u901f\u5ea6\u4e5f\u5f88\u91cd\u8981\u3002\u4f46\u662f\uff0c\u65e0\u8bba\u8f6f\u4ef6\u5ba2\u89c2\u4e0a\u591a\u4e48\u201c\u5feb\u901f\u201d\uff0c\u5d29\u6e83\u6216\u884c\u4e3a\u4e0d\u7a33\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u98a0\u8986\u7528\u6237\u7684\u6d41\u7545\u6027\u3002\u21a9\ufe0e\u3002\n\u6211\u8bf4\u201c\u8fdd\u80cc\u6240\u6709\u7406\u6027\u7684\u9884\u671f\u201d\uff0c\u662f\u56e0\u4e3a\u4f60\u4f1a\u8ba4\u4e3a\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u5df2\u7ecf\u6709\u51e0\u5341\u5e74\u5386\u53f2\u7684\u91d1\u878d\u8f6f\u4ef6\u4e86\u3002\u4f46\u662f\u594e\u80af\u662f\u4e00\u4e2a\u76f8\u5f53\u4e0d\u9519\u7684MacOS\u4e00\u7b49\u516c\u6c11\u3002\u5b83\u5f88\u65f6\u9ae6\u3002\u5b83\u662f\u975e\u7535\u5b50\u7684\u3002\u5b83\u5f88\u7075\u6d3b-\u6211\u53ef\u4ee5\u751f\u6210\u5404\u79cd\u62a5\u544a\uff0c\u5e76\u76f8\u5bf9\u5bb9\u6613\u5730\u5bf9\u6211\u7684\u8d22\u52a1\u6570\u636e\u8fdb\u884c\u5207\u7247\u3002\u6211\u4e00\u76f4\u628a\u5b83\u4e00\u7b14\u52fe\u9500\uff0c\u76f4\u5230\u4e00\u4f4d\u670b\u53cb\u7ea0\u7f20\u7740\u8ba9\u6211\u4f7f\u7528\u5b83\u3002\u73b0\u5728\u6211\u552f\u4e00\u7684\u9057\u61be\u5c31\u662f\u6ca1\u6709\u65e9\u70b9\u5f00\u59cb\u3002\u21a9\ufe0e\u3002\n\u53cd\u5bf9\u4f60\u7684\u516c\u53f8\u7684\u201c\u53cd\u201d\u9635\u8425\u53ef\u4ee5\u5982\u6b64\u5f3a\u70c8\u5730\u6fc0\u52b1\u4e00\u4ee3\u53c8\u4e00\u4ee3\u7684\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5c06\u6bd5\u751f\u7cbe\u529b\u6295\u5165\u5230\u521b\u5efa\u516c\u53f8\u4e2d\u53bb\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5728\u5185\u90e8\u5f15\u53d1\u4e00\u4e9b\u5371\u9669\u4fe1\u53f7\uff0c\u5373\u4f7f\u4f60\u7684\u80a1\u4ef7\u5728\u8fc7\u53bb\u4e94\u5e74\u91cc\u4e0a\u6da8\u4e86\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u76844\u500d\uff0c\u800c\u4e14\u662f\u53f3\u503e\u7684\u3002\u21a9\ufe0e\u3002\n\u662f\u4e00\u4f4d\u5e38\u9a7b\u65e5\u672c\u7684\u4f5c\u5bb6\u548c\u6444\u5f71\u5e08\u3002\u4ed6\u662fMacDowell Colony\uff0cRagdale\u548cVCCA\u7684\u64b0\u7a3f\u4eba\u3002\u4ed6\u7684\u8bba\u6587\u548c\u6587\u7ae0\u66fe\u53d1\u8868\u5728\u201c\u98df\u5ba2\u201d\u3001\u201c\u5927\u897f\u6d0b\u6708\u520a\u201d\u3001\u201c\u52a0\u5dde\u661f\u671f\u65e5\u6742\u5fd7\u201d\u3001\u201c\u8fde\u7ebf\u201d\u3001\u201c\u6c38\u65fa\u201d\u3001\u201c\u65b0\u79d1\u5b66\u5bb6\u201d\u3001\u201c\u5f17\u5409\u5c3c\u4e9a\u5b63\u520a\u201d\u3001\u201c\u7ebd\u7ea6\u5ba2\u201d\u3001\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\u3001\u201c\u6668\u62a5\u201d\u3001\u201c\u6284\u672c\uff1a\u6392\u7248\u6742\u5fd7\u201d\u7b49\u6742\u5fd7\u4e0a\u3002\u4f60\u53ef\u4ee5\u52a0\u5165\u4ed6\u7684\u90ae\u5bc4\u540d\u5355\uff1aRoden&amp\uff1bRidgeline\u3002", "note_en": "Something strange is happening in the world of software: It\u2019s slowly getting worse. Not all software, but a lot of it. It\u2019s becoming more sluggish, less responsive, and subtly less reliable than it was a few years ago.\n In some ways this is hyperbole. Objectively, we\u2019ve never been able to do so much, so easily with our smartphones and laptops and tablets. We\u2019ve never pushed more data between more places more readily. But while the insidious \u201cworseness\u201d I mention falls only in part on the engineering side of things, it falls harder on the more subjective, craft side of things, making it all the more worrisome.\n Why should we care about this? Because the majority of our waking hours take place within the confines of applications. A truth recently amplified by the  COVID pandemic.\n And I believe software used by millions (if not billions) has a moral duty to elevate the emotional and intellectual qualities of its users. That elevation begins with craft.\n  In the same way that physical architecture can affect a mind, so too can software. Slower, less reliable software is like Penn Station: Sure, you can catch a transfer from one train to another but the dreary lowness of the place, the lack of sunlight or sensible wayfinding will make you feel like a rat, truculent and worthless, and worse: You\u2019ll acclimate to that feeling and accept it as a norm.  1\n This sense of a decline in software craft has been building for years, but it wasn\u2019t until Apple released the iPad Magic Keyboard that I felt the pain of this hardware-software gap so acutely.\n So let\u2019s start with that pairing: A superb keyboard coupled to budding but still-faulty software and work our way out to broader lands.\n   Make no bones about it, an iPad Pro is an enchanting object. It\u2019s a slab too thin and light to be so powerful with so much battery life. And the iPad Magic Keyboard highlights this brilliantly. By floating the device on a bed of magnets and plush felt, and inviting you to pull the iPad off its stand as needed, the Magic Keyboard somehow enables and rewards both stand-alone and paired use of the device. Overall: An engineering marvel.\n The clickty-clack keyboard element of the Magic Keyboard is also great. I\u2019m using it with an 11&#34; 2018 iPad Pro and though it can feel a bit cramped, the mechanics are satisfying, the sound quietly pleasing, and the key travel excellent all considering. The latest MacBook Pro keyboards (2020) are a degree nicer, (in fact: possibly the nicest keyboard to ever grace a laptop) but not by much. The Magic Keyboard is a bit heavy, and a bit weird to open, but aside from those niggles the quite wonderish accessory has but one glaring problem (and it\u2019s the same problem we\u2019ve been hemming and hawing over for years now, the same problem brought up every few months as if it were news): The software.\n   Sometimes, if I\u2019m in Reader Mode in Safari and three-finger-touchpad-swipe to switch apps for a second and come back, the viewport has jumped to the top of the document. If I\u2019m typing a tweet in Twitter\u2019s app and hop back and forth between apps the cursor is gone,  poof, lost until I tap again in the tweetbox. Not every time, but often. Which is worse than every time.\n It\u2019s exasperating and speaks to low-level, foundational issues of iPadOS, an OS built for direct touch \u2014 a finger or Pencil on glass. Bear in mind \u2014 iPadOS is a branch of iOS, an operating system designed to be used with one hand while standing in an elevator. I don\u2019t know how to fix these core iPadOS issues, but the fact that these problems persist indicates that they\u2019re non-trivial and may never get fixed without some serious gut-level OS rewrites.\n Heck, back in November 2018, I wrote about these same problems in   Getting the iPad to Pro:   2\n Switching contexts is also cumbersome. If you\u2019re researching in a browser and frequently jumping back and forth between, say, (the actually quite wonderful) Notes.app and Safari, you\u2019ll sometimes find your cursor position lost. The Notes.app document you were just editing occasionally resetting to the top of itself. For a long document, this is infuriating and makes every  Cmd-Tab feel dangerous. It doesn\u2019t always happen, the behavior is unpredictable, making things worse. This interface \u201cbrittleness\u201d makes you feel like you\u2019re using an OS in the wrong way.\n More examples: Use the Share &gt; Mail option in Safari, start typing in an email address. Switch windows to check the address,  Cmd-Tab back, now the address you\u2019ve been typing has been auto-converted into a broken address. Tab down into the body of the email. Try to  Shift-Tab back to edit the subject \u2014 you can\u2019t. A bug?  Shift-Tab inserts a  Tab character \u2014 the cursor dumbly flops forward. The expected user experience here is if the cursor is at the start of a text-field,  Shift-Tab will pull it back to the previous field, as it does in Mail on macOS.\n It\u2019s not just Apple\u2019s software: Google\u2019s apps are egregious in their disdain for a keyboard. YouTube doesn\u2019t even accept the universal standard of hitting the  Space bar to start and stop a video.\n These aren\u2019t the complaints of a laptoper-wannabe, but the concerns of literally anyone who desires \u201cdevice fluency.\u201d Hiccups in UX disrupt this fluency, make it impossible to obtain. Viewport and input reliability are table-stakes when it comes to gracefully navigating an operating system, using a device, being creative, making cool shit.\n Because the Magic Keyboard is well-made, and  because you believe in its ability to register keystrokes accurately, the dissonance of not having commands fire off as quickly as you think them hurts all the more. I often smack  Cmd-c five or six times to make sure a copy has \u201ctaken.\u201d Copying is so hit-or-miss that visual feedback would be useful \u2014 a cursor blink, anything. And then:  Cmd-v itself can take two or three tries to properly fire off.\n Often this is because I know where I want to paste, and pasting happens as contexts are switching. I\u2019m  Cmd-ving as the transitions are happening. I do not believe I am unique in this behavior. Essentially: The keyboard buffer on iPadOS feels non-existent.\n No, I can\u2019t scaffold my terminal-dependent  static-site generating publishing software on an iPad, but I\u2019ve long since given up using this device (on which I am drafting this) for those things. The bumps I\u2019m running into are basic operating system bumps ( keyboard buffers!), polish bumps. Bumps we haven\u2019t butted against in decades on desktop operating systems.\n Software should first and foremost elevate the intellectual and creative fluency of the user. As it presently stands, iPadOS makes this fluency more difficult to achieve than necessary.\n   What baffles about these software moans is that Apple\u2019s hardware is ever-more refined. While far from flawless, the entire lineup is now (finally) largely free from these \u201cfoundational\u201d issues you see in software.  3\n Hardware has literal and metaphorical edges \u2014\u00a0it must be fully complete and largely bug free to ship. Software? It\u2019s far more amorphous, like mist. Patches can be endlessly pushed. It never ends. Faulty hardware can destroy a company. Faulty software can be patched. The butterfly keyboard debacle may never be lived down. Even as I type on this improved Magic Keyboard, I can\u2019t help but wonder: Did they really test this thing? I had three butterfly keyboards die on me, twice in the field. Not fun. Hardware failures live long in the mind.\n Take the iPhone\u2019s camera as counterpoint to the butterfly keyboard. The cameras are things to admire. Stalwart, reliable. As hardware they are fabulous in their boringness. When did you last think about your iPhone camera or worry if it would work or not? A sign of great hardware and software is in forgetting about it, smoothly allowing it to integrate with your life \u2014\u00a0drawing fluency from it. The best camera is the one you have in your pocket \u2026 that reliably takes great photos.\n And yet: I think constantly about  interacting with my photos on my iPhone because Photos (both the app and the service used by other apps to access your photos) has gotten slower over the years as the service has become more dependent on iCloud. When you swipe up in Instagram to choose a photo from your Photo Stream it routinely takes four or five seconds to show your photos. Same in Facebook Messenger. This used to be instantaneous. And the interface in, for example, Messages to select photos is uniquely baffling. (Since when do photo streams scroll sideways? And so many years on, just what the heck is the difference between \u201cPhotos\u201d and \u201cRecents\u201d?)\n   Looking beyond iOS/ipadOS: Catalina is arguably the least stable, most disruptive-of-fluency macOS releases in recent memory. There are egregious issues of  data loss in Apple Mail. Mail also simply won\u2019t scroll\u00a0\u2014  scroll! \u2014 certain  HTML emails anymore. And Mail spontaneously pops forward as the frontmost application again and again for no obvious reason.\n The Finder \u2014\u00a0one of the oldest pieces of Mac tech, doesn\u2019t  reliably report disk usage. This worries more than most other bugs because it means some of that core code \u2014 the closest-to-the-metal bits \u2014 is being changed in ways that  negatively affect stability in general-user and professional environments alike.\n The three primary pieces of software on macOS are probably Finder, Safari, and Mail. To have two of these show signs of instability is like ordering a salad and having half the lettuce appear as ceramic roofing tiles. It\u2019s just weird. It shouldn\u2019t happen, especially when these are new, critical bugs in decades-old programs. It makes you wonder what else might be broken, and what\u2019s broken with the development cycle to allow for these bugs to ship.\n I  asked folks on Twitter what problems they\u2019ve had with Catalina and the list is depressingly impressive.\n   Because Catalina no longer runs 32-bit software, older, perfectly fine and functional apps have been \u201cupdated\u201d to work with the new OS. Sometimes the developers switch to the  Electron framework for development. Electron makes it easier to develop cross-platform applications, but comes at the expense of an application feeling or functioning in a way you\u2019d expect a native application to function. Almost always, these Electron applications are slower and more cumbersome than a native version.\n  In   Fast Software the Best Software I wrote about how speed and the  intuition of stability are intertwined:\n Speed and reliability are often intuited hand-in-hand. Speed can be a good proxy for general engineering quality. If an application slows down on simple tasks, then it can mean the engineers aren\u2019t obsessive detail sticklers. Not always, but it can mean disastrous other issues lurk. I want all my craftspeople to stickle. I don\u2019t think Ulysses is badly made, but I am less confident in it than if it handled input and interface speed with more grace. Speed would make me trust it more.\n Electron \u2014 by very definition of its purpose \u2014 abdicates low-level detail obsession away from the developer and onto the framework. It feels like it fosters an anomie of craftsmanship. It\u2019s no surprise that Electron applications (Slack, Arq 6, Dropbox, and more) feel more brittle than most native applications. That said, applications like  VSCode show that Electron apps  can be performant given effort and resources.\n Still, in the end, there\u2019s something parabolic about Slack having been  written and re-written four times now in Electron.\n Beyond frameworks, we\u2019re seeing once-reliable applications suffer from feature creep and bloat. Perhaps this is endemic to the very nature of public companies and their conflation of features with user growth? For example: Dropbox has gone from a svelte, hyper-reliable file syncing service to a bloated curiosity that pegs the  CPU at 200% for unclear reasons. I now keep it unloaded until I need to sync and then turn it on for just a few minutes. Which upends the core purpose of the original Dropbox: To be a seamless and OS-integrated local-and-cloud-synced file storage system.\n   For arguments against  Mac Catalyst, Apple\u2019s cross-platform iOS / macOS framework, see the Twitter application. A small sample of issues (which may seem like nits but these details are important!):\n elements like the \u201chome\u201d button stay highlighted (as if tabbed to) for no apparent reason\n Most worrying: Catalyst may normalize a lack of craft and refinement. It\u2019s important to remember that we had a solidly native-feeling  Twitter client for macOS ten years ago. So this software problem was once solved, unsolved, and now re-solved in a worse way.\n    Gmail and Google Drive both take far longer to load than one should reasonably expect. I just ran an informal test: To go from opening a tab to composing an email in gmail took eight seconds.\n Twitter\u2019s web site now loads (regardless of browser or operating system) in so many various layers and stages I never know if my internet connection is functioning properly or not. Twitter.com\u2019s strange complexities also bring with it the ignoble award of being the only site to regularly crash Safari on my iPhone.\n Newspaper sites deliver hundred megabyte or greater payloads filled with ad tech. Open nytimes.com in a Chrome tab and you\u2019ll soon deplete a fresh MacBook battery.\n   Editing a photo on an iPad Pro with 120hz screen and latest Apple Pencil is one of the most genuinely \u201cmagical\u201d ways to develop a photo today. Friends of mine who are professional illustrators swear by their iPads. An iPad with the folio keyboard is one of the lightest, most capable little writing devices around \u2014\u00a0you could take it up into the mountains and use it offline for hours a day for a week without needing to charge the battery, don\u2019t have to baby it or worry about it getting lightly rained or splashed on.\n The latest 2020 MacBook Pros are solid refinements of the butterfly-era fiasco of machines. And when Catalina doesn\u2019t go wonky on you, macOS strikes a superb balance between power and usability, of being able to drop into the Terminal or navigate graphically. I feel fluent and in control in a way that delights and satisfies.\n macOS software that  adheres to craft \u2014\u00a0 Things or  Carbon Copy Cloner or  BBEdit or  Sublime Text (which, despite not being \u201cnative native\u201d feels so solid and so responsive you\u2019re willing to overlook its quirks) or  Bear or  Alfred or  iA Writer or Keynote (arguably one of the best pieces of macOS software of all time) or anything by  Panic, heck, even Terminal or Quicken (which, against all rational expectations is just a  joy to use)  5 \u2014\u00a0exists in troves, the existence of such  proves to the Slacks or Twitters or Adobes of the world that it\u2019s not impossible nor rare to produce craft-oriented software in service to user fluency, and still make a profit.\n In fact, there\u2019s a business case to be made for being craft- and fluency-focused. We\u2019ve seen entire companies with business models that could be summarized as \u201cBloat-Free X\u201d emerge in recent years.  Affinity is bloat-free Adobe. Install Adobe Creative Cloud on your laptop and marvel at the no fewer than a dozen processes whirling around in the background for unknown purposes. It\u2019s no surprise Affinity Photo and Publisher and Designer have taken off.  Sketch\u2019s main feature for many years was simply: Not Adobe.\n And the web! When you care \u2014  when you really give a shit \u2014 the web is awe inspiring. I still can\u2019t believe  Figma is web-native (also born from the Not Adobe camp  6). That an application can feel so powerful, so fast, so well-crafted and be fully web-based should be a kind of lighthouse-archetype for all other sites lost in a sea of complexity and muck and unnecessary frameworks.\n Recently I launched a static website/book \u2014   Ise-ji: Walk With Me \u2014 that has a potential payload of hundreds of megabytes but by using a bare-minimum of javascript, lazyloading, and optimization, the overall weight of the page is minimal, feels quick and responsive. The fact that I could host a site like this for free on Github or spin up a cheap Digital Ocean box and plop Cloudflare down in front of it is downright miraculous. The tools to make things work well and reliably are accessible (by degrees) to all.\n   Our computing hardware is largely brilliant, refined, more reliable than ever. The core software running on it can sometimes feel regressive, moving in directions less focused on craft, consistency, and stability.\n Between the messiness of Catalina and the almost-but-not-quite-there-ness of iPadOS, what\u2019s most needed now are not splashy masthead features but a reconsideration of the boring nuts and bolts, the paint on the back of the cabinets, the smoothing over of all the bumps and stutters as needed to enable device fluency \u2014\u00a0and not just a single year of cleaning up the mucky infrastructure of our compute landscape, but a reworking of the internal software culture of companies like Apple to elevate user fluency to first-class rank.\n It\u2019s time to get all of this gorgeous hardware out of the software slump.\n   Not to mention the general depressing quality of  knowing what used to be compared to what it is now.  \u21a9\ufe0e\n To be fair: So much of what I wrote about as shortcomings in that article have been addressed and addressed well on iPadOS over the last year. It\u2019s been impressive and heartening to watch their team make the platform more powerful.  \u21a9\ufe0e\n The TouchBar is categorically the worst hardware \u201cfeature\u201d added to anything Mac-related in the last two decades. I can\u2019t think of anything \u2014 aside from that bastard hockey puck mouse (which one could easily opt-out of by plugging in another mouse) \u2014\u00a0that the company has so readily doubled down on despite it bringing almost no benefit, only negatives, to the table. (I\u2019ve tried BetterTouchBar, added weather widgets and AirPod battery levels to the TouchBar but in the end find it detracts more than adds.) Thankfully, in these recent revisions of MacBook Pros we got back the  esc key and a dedicated  Touch-ID button. This at least makes the TouchBar bearable, slightly. And the new keyboards are, truly, excellent (assuming they stand the test of time). True, these MacBook Pros should have probably looked like this four years ago, but better late than never.  \u21a9\ufe0e\n Speed is also important, of course. But an application that crashes or behaves erratically will upend user fluency no matter how objectively \u201cfast\u201d the software is.  \u21a9\ufe0e\n I say \u201cagainst all rational expectations\u201d because you\u2019d assume if anything suffered from bloat it would be decades-old financial software. But Quicken is quite a fine first-class macOS citizen. It\u2019s snappy. It\u2019s non-electron. It\u2019s flexible \u2014\u00a0I can generate all sorts of reports and slice up my financial data with relative ease. I had written it off until a friend had badgered me into using it. Now my only regret is I hadn\u2019t started earlier.  \u21a9\ufe0e\n That an \u201canti-\u201d camp against your company can so strongly inspire generations of software developers to devote years of their lives to building companies should  probably set off some internal red flags, even if your stock price is impressively  4x up and to the right over the last five years.  \u21a9\ufe0e\n    is a writer and photographer based in Japan. He is a MacDowell Colony, Ragdale, and VCCA writing fellow. His essays and articles have appeared in  Eater,  The Atlantic,  California Sunday Magazine,  Wired,  Aeon,  New Scientist,  Virginia Quarterly Review,  The New Yorker,  The New York Times,  The Morning News,  Codex: Journal of Typography, and elsewhere. You could join his mailing lists:   Roden &amp;   Ridgeline.", "posttime": "2020-06-12 19:22:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u786c\u4ef6,\u8f6f\u4ef6,hardware", "title": "\u8f6f\u4ef6\u4e0d\u666f\u6c14\u8c37\u4e2d\u7684\u8f89\u714c\u786c\u4ef6", "title_en": "Brilliant Hardware in the Valley of the Software Slump", "transed": 1, "url": "https://craigmod.com/essays/software_slump/", "via": "", "real_tags": ["\u786c\u4ef6", "\u8f6f\u4ef6", "hardware"]}]