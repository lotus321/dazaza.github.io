[{"category": "", "categoryclass": "", "imagename": "7c375553d94d81de6d631354eb6d2d9d.jpeg", "infoid": 1001786, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\uff0c\u56fd\u5bb6\u535a\u7269\u9986\u5728\u5176\u7f51\u7ad9\u4e0a\u53d1\u5e03\u4e86\u6709\u53f2\u4ee5\u6765\u6700\u5927\u3001\u6700\u8be6\u7ec6\u7684\u591c\u95f4\u5b88\u671b\u7167\u7247\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u653e\u5927\u753b\u4f5c\u4e2d\u7684\u4e2a\u522b\u7b14\u89e6\uff0c\u751a\u81f3\u662f\u989c\u6599\u9897\u7c92\u3002\u201c\u5b88\u591c\u884c\u52a8\u201d\u7684\u5de5\u4f5c\u5c06\u4e8e5\u670813\u65e5(\u661f\u671f\u4e09)\u5728\u535a\u7269\u9986\u7684\u73bb\u7483\u5ba4\u6062\u590d\u3002\n\u56fd\u5bb6\u535a\u7269\u9986\u9986\u957f\u5854\u79d1\u00b7\u8fea\u6bd4\u7279\uff1a\u591c\u95f4\u5b88\u671b\u884c\u52a8\u7814\u7a76\u5c0f\u7ec4\u4f7f\u7528\u6700\u65b0\u7684\u6280\u672f\uff0c\u4e0d\u65ad\u7a81\u7834\u4eba\u4eec\u8ba4\u4e3a\u53ef\u80fd\u7684\u754c\u9650\u3002\u8fd9\u5f20\u7167\u7247\u5bf9\u7814\u7a76\u4eba\u5458\u6765\u8bf4\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u4fe1\u606f\u6765\u6e90\uff0c\u5728\u7ebf\u8bbf\u95ee\u8005\u53ef\u4ee5\u7528\u5b83\u6765\u7ec6\u81f4\u5165\u5fae\u5730\u6b23\u8d4f\u4f26\u52c3\u6717\u7684\u6770\u4f5c\u3002\n\u7531\u6570\u636e\u79d1\u5b66\u5bb6\u7f57\u4f2f\u7279\u00b7\u5384\u5fb7\u66fc\u9886\u5bfc\u7684\u56fd\u5bb6\u535a\u7269\u9986\u6210\u50cf\u56e2\u961f\u4ece\u603b\u5171528\u5f20\u7167\u7247\u4e2d\u62cd\u6444\u4e86\u8fd9\u5f20\u201c\u5b88\u591c\u4eba\u201d\u7684\u7167\u7247\u3002\u8fd924\u884c\u517122\u5f20\u56fe\u7247\u662f\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u5e2e\u52a9\u4e0b\u6570\u5b57\u62fc\u63a5\u5728\u4e00\u8d77\u7684\u3002\u6700\u7ec8\u56fe\u50cf\u753144.8\u4ebf\u50cf\u7d20(44,804,687,500\u50cf\u7d20)\u7ec4\u6210\uff0c\u6bcf\u4e2a\u50cf\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a20\u5fae\u7c73(0.02\u6beb\u7c73)\u3002\u8fd9\u4f7f\u5f97\u79d1\u5b66\u5bb6\u4eec\u80fd\u591f\u8fdc\u7a0b\u8be6\u7ec6\u5730\u7814\u7a76\u8fd9\u5e45\u753b\u3002\u8fd9\u5e45\u56fe\u50cf\u8fd8\u5c06\u88ab\u7528\u6765\u51c6\u786e\u8ddf\u8e2a\u753b\u4f5c\u4e2d\u672a\u6765\u53d1\u751f\u7684\u4efb\u4f55\u8001\u5316\u8fc7\u7a0b\u3002\n\u8fd9\u5e45\u753b\u7684\u5de5\u4f5c\u5c06\u4e8e\u660e\u5929\uff0c5\u670813\u65e5\u661f\u671f\u4e09\u6062\u590d\u3002\u5728\u539f\u672c\u7a7a\u8361\u8361\u7684\u56fd\u7acb\u535a\u7269\u9986\u91cc\uff0c\u7814\u7a76\u4eba\u5458\u5c06\u91cd\u65b0\u5f00\u59cb\u7814\u7a76\u4f26\u52c3\u6717\u6700\u5927\u7684\u753b\u4f5c\u53ca\u5176\u73b0\u72b6\u3002\u5c3d\u7ba1\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\uff0c\u73bb\u7483\u5ba4\u672c\u8eab\u7684\u5de5\u4f5c\u4e2d\u65ad\u4e86\u4e24\u4e2a\u6708\uff0c\u4f46\u7814\u7a76\u5c0f\u7ec4\u7ee7\u7eed\u5728\u5bb6\u91cc\u5206\u6790\u5df2\u7ecf\u6536\u96c6\u7684\u7814\u7a76\u6570\u636e\u3002\n\u5728\u73bb\u7483\u5ba4\u5de5\u4f5c\u7684\u65b9\u6848\u5df2\u7ecf\u4fee\u6539\uff0c\u4ee5\u7b26\u5408\u653f\u5e9c\u548c\u56fd\u5bb6\u516c\u5171\u536b\u751f\u4e0e\u73af\u5883\u7814\u7a76\u6240(RIVM)\u5236\u5b9a\u7684\u6307\u5bfc\u65b9\u9488\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u786e\u4fdd\u6709\u53ef\u80fd\u4fdd\u63011.5\u7c73\u7684\u6700\u5c0f\u7269\u7406\u8ddd\u79bb\uff0c\u5728\u4efb\u4f55\u7ed9\u5b9a\u7684\u65f6\u95f4\u90fd\u4e0d\u4f1a\u6709\u8d85\u8fc7\u4e24\u4e2a\u4eba\u5728\u753b\u4e0a\u5de5\u4f5c\u3002\n\u591c\u95f4\u5b88\u671b\u884c\u52a8\u7684\u7b2c\u4e8c\u9636\u6bb5\uff0c\u5373\u4fee\u590d\u8fd9\u5e45\u753b\uff0c\u7531\u4e8e\u75ab\u60c5\u7684\u7206\u53d1\uff0c\u5df2\u7ecf\u91cd\u65b0\u5b89\u6392\u4e86\u65f6\u95f4\u3002\u6700\u521d\u7684\u8ba1\u5212\u662f\u57282020\u5e74\u590f\u5b63\u4e4b\u540e\u5f00\u59cb\uff0c\u4f46\u8fd9\u5df2\u7ecf\u4e0d\u53ef\u884c\u4e86\u3002\u5b83\u73b0\u5728\u5c06\u57282021\u5e74\u521d\u4e3e\u884c\u3002", "note_en": "The Rijksmuseum is today publishing the largest and most detailed ever photograph of The Night Watch on its website, making it possible to zoom in on individual brushstrokes and even particles of pigment in the painting. Work on Operation Night Watch will resume on Wednesday 13 May in the glass chamber in the museum.\n  Taco Dibbits, director of the Rijksmuseum:  The Operation Night Watch research team use the very latest technologies and continually push the boundaries of what was thought possible. The photograph is a crucial source of information for the researchers, and online visitors can use it to admire Rembrandt\u2019s masterpiece in minute detail.\n The Rijksmuseum\u2019s imaging team led by datascientist Robert Erdmann made this photograph of  The Night Watch from a total of 528 exposures. The 24 rows of 22 pictures were stitched together digitally with the aid of neural networks. The final image is made up of 44.8 gigapixels (44,804,687,500 pixels), and the distance between each pixel is 20 micrometres (0.02 mm). This enables the scientists to study the painting in detail remotely. The image will also be used to accurately track any future ageing processes taking place in the painting.\n Work on the painting will resume tomorrow, Wednesday 13 May. In the otherwise empty Rijksmuseum, the researchers will recommence their study of Rembrandt\u2019s largest painting and its current state. Although work in the glass chamber itself was interrupted for two months due to the coronavirus pandemic, the team continued work at home analysing the research data that had already been collected.\n The protocol for working in the glass chamber has been revised to conform with the guidelines set by the government and the National Institute for Public Health and the Environment (RIVM). Consequently, to ensure it is possible to maintain a minimum physical distance of 1.5 metres, no more than two people will work on the painting at any given time.\n The second phase of  Operation Night Watch, the restoration of the painting, has been rescheduled due to the pandemic. The initial plan was to start after summer 2020, but this is no longer feasible. It will now take place in early 2021.", "posttime": "2020-05-12 18:55:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,\u5b88\u591c\u4eba,photograph,\u7814\u7a76", "title": "\u6709\u53f2\u4ee5\u6765\u6700\u8be6\u7ec6\u7684\u5b88\u591c\u4eba\u7167\u7247\u5728\u7f51\u4e0a\u53d1\u5e03", "title_en": "Most detailed ever photograph of The Night Watch goes online", "transed": 1, "url": "https://www.rijksmuseum.nl/en/most-detailed-ever-photograph-of-the-night-watch-goes-online", "via": "", "real_tags": ["\u53d1\u5e03", "\u5b88\u591c\u4eba", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "52c2eeb4d01f57284a7f7ab1b90410c7.png", "infoid": 1001785, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5965\u5730\u5229\u7ef4\u4e5f\u7eb3-2020\u5e745\u670812\u65e5-Proxmox Server Solutions GmbH\u4eca\u5929\u5ba3\u5e03\u5f00\u653e\u6e90\u7801\u865a\u62df\u5316\u7ba1\u7406\u5e73\u53f0\u7684\u6700\u65b0\u7248\u672cProxmox VE 6.2\u6b63\u5f0f\u4e0a\u5e02\u3002Proxmox VE 6.2\u5305\u62ec\u65e8\u5728\u89e3\u51b3\u73b0\u4ee3\u6570\u636e\u4e2d\u5fc3\u7ba1\u7406\u5458\u548cIT\u56e2\u961f\u9762\u4e34\u7684\u95ee\u9898\u7684\u65b0\u529f\u80fd\u3002\u65b0\u7248\u672c\u7684\u865a\u62df\u5316\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\u63d0\u4f9b\u4e86\u8bb8\u591a\u65b0\u529f\u80fd\u3001\u663e\u8457\u6539\u8fdb\uff0c\u4ee5\u53ca\u8bb8\u591a\u9488\u5bf9\u57fa\u4e8eWeb\u7684\u7528\u6237\u754c\u9762\u7684\u9ad8\u7ea7\u9009\u9879\u3002\u5b83\u57fa\u4e8eDebian Buster 10.4\u548c5.4\u957f\u671fLinux\u5185\u6838\uff0c\u5305\u62ec\u5bf9\u9886\u5148\u7684\u5f00\u6e90\u865a\u62df\u5316\u6280\u672fQEMU 5.0\u3001LXC 4.0\u3001Cave Nautilus(14.2.9)\u548cZFS 0.8.3\u7684\u6700\u65b0\u7248\u672c\u7684\u66f4\u65b0\u3002\nProxmox VE\u9664\u4e86\u73b0\u6709\u7684\u57fa\u4e8eHTTP\u7684\u9a8c\u8bc1\u6a21\u5f0f\u5916\uff0c\u8fd8\u901a\u8fc7\u57fa\u4e8eDNS\u7684\u8d28\u8be2\u673a\u5236\u5b9e\u73b0\u4e86\u5bf9let\u52a0\u5bc6TLS\u8bc1\u4e66\u7684\u57df\u7684\u5185\u7f6e\u9a8c\u8bc1\u3002\n\u5b8c\u5168\u652f\u6301\u591a\u8fbe8\u6761CorSync\u7f51\u7edc\u94fe\u8def\u3002\u4f7f\u7528\u7684\u94fe\u8def\u8d8a\u591a\uff0c\u7fa4\u96c6\u53ef\u7528\u6027\u5c31\u8d8a\u9ad8\u3002\n\u5728\u5b58\u50a8\u5185\u5bb9\u89c6\u56fe\u4e2d\uff0c\u7ba1\u7406\u5458\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u65b0\u7684\u201c\u521b\u5efa\u65e5\u671f\u201d\u5217\u7b5b\u9009\u5b58\u50a8\u7684\u6570\u636e\uff0c\u4f8b\u5982\uff0c\u8fd9\u7b80\u5316\u4e86\u641c\u7d22\u67d0\u4e2a\u65e5\u671f\u7684\u5907\u4efd\u3002\n\u65e0\u9700\u91cd\u65b0\u542f\u52a8\u4f1a\u8bdd\u5373\u53ef\u65e0\u7f1d\u66f4\u6539Web\u754c\u9762\u7684\u8bed\u8a00\u3002\u6dfb\u52a0\u4e86\u963f\u62c9\u4f2f\u8bed\u7ffb\u8bd1\uff0c\u56e0\u6b64Proxmox VE\u603b\u5171\u652f\u630120\u79cd\u8bed\u8a00\u3002\n\u96c6\u6210\u5bb9\u5668\u6280\u672f\u5df2\u66f4\u65b0\u5230lxc 4.0.2\u548clxcfs 4.0.3\u3002Proxmox VE 6.2\u73b0\u5728\u5141\u8bb8\u4e3a\u57fa\u4e8e\u76ee\u5f55\u7684\u5b58\u50a8\u4e0a\u7684\u5bb9\u5668\u521b\u5efa\u6a21\u677f\u3002\n\u7528\u4e8eUbuntu20.04\u3001Fedora32\u3001CentOS8.1\u3001Alpine Linux\u548cArch Linux\u7684\u65b0LXC\u6a21\u677f\u3002\n\u96c6\u6210\u7684\u5907\u4efd\u7ba1\u7406\u5668\u652f\u6301\u5feb\u901f\u9ad8\u6548\u7684\u65e0\u635f\u6570\u636e\u538b\u7f29\u7b97\u6cd5ZStandard(Zstd)\u3002\nProxmox VE\u5bf9\u6240\u6709\u5bf9\u8c61(\u5982\u865a\u62df\u673a\u3001\u5b58\u50a8\u3001\u8282\u70b9\u7b49)\u4f7f\u7528\u57fa\u4e8e\u89d2\u8272\u7684\u7528\u6237\u548c\u6743\u9650\u7ba1\u7406\u3002\u65b0\u7684LDAP\u540c\u6b65\u652f\u6301\u5c06LDAP\u7528\u6237\u548c\u7ec4\u540c\u6b65\u5230Proxmox\u7528\u6237\u548c\u7ec4\u6743\u9650\u6846\u67b6\u3002\n\u6dfb\u52a0\u4e86\u5bf9API\u4ee4\u724c\u7684\u5b8c\u5168\u652f\u6301\u548c\u96c6\u6210\uff0c\u5141\u8bb8\u53e6\u4e00\u4e2a\u7cfb\u7edf\u3001\u8f6f\u4ef6\u6216API\u5ba2\u6237\u7aef\u5bf9REST API\u7684\u5927\u90e8\u5206\u8fdb\u884c\u65e0\u72b6\u6001\u8bbf\u95ee\u3002\u53ef\u4ee5\u4e3a\u5355\u4e2a\u7528\u6237\u751f\u6210API\u4ee4\u724c\uff0c\u5e76\u4e14\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u72ec\u7684\u6743\u9650\u548c\u5230\u671f\u65e5\u671f\u8fdb\u884c\u914d\u7f6e\uff0c\u4ee5\u9650\u5236\u8bbf\u95ee\u7684\u8303\u56f4\u548c\u6301\u7eed\u65f6\u95f4\u3002\u5982\u679cAPI\u4ee4\u724c\u53d7\u5230\u5371\u5bb3\uff0c\u5219\u53ef\u4ee5\u64a4\u9500\u5b83\uff0c\u800c\u4e0d\u5fc5\u7981\u7528\u7528\u6237\u672c\u8eab\u3002\n\u73b0\u5728\u53ef\u4ee5\u4ecehttps://www.proxmox.com/downloads\u4e0b\u8f7dProxmox VE6.2\u3002\u4f7f\u7528APT\u53ef\u4ee5\u5c06Proxmox VE 4.x\u62165.x\u7248\u672c\u7684\u5206\u53d1\u5347\u7ea7\u52306.x\u3002\nProxmox VE\u5728\u81ea\u7531\u8f6f\u4ef6\u8bb8\u53ef\u8bc1GNU Affero GPL v3\u4e0b\u83b7\u5f97\u8bb8\u53ef\u3002\u4f01\u4e1a\u652f\u6301\u53ef\u4eceProxmox Server Solutions\u4ee5\u8ba2\u9605\u65b9\u5f0f\u83b7\u5f97\uff0c\u8d77\u6b65\u4ef7\u4e3a\u6bcf\u5e7485\u6b27\u5143\u548c\u4e2d\u592e\u5904\u7406\u5668\uff0c\u8bf7\u53c2\u9605https://www.proxmox.com.\u3002\n\u5f00\u6e90\u9879\u76eeProxmox VE\u5728\u5168\u7403\u62e5\u6709\u8d85\u8fc7350,000\u53f0\u4e3b\u673a\u7684\u5e9e\u5927\u7528\u6237\u7fa4\u3002\u865a\u62df\u5316\u5e73\u53f0\u88ab\u7ffb\u8bd1\u621020\u591a\u79cd\u8bed\u8a00\u3002\u5728\u652f\u6301\u8bba\u575b\u4e0a\uff0c\u8d85\u8fc76\u4e07\u540d\u6d3b\u8dc3\u7684\u793e\u533a\u6210\u5458\u76f8\u4e92\u53c2\u4e0e\u3002\u901a\u8fc7\u4f7f\u7528Proxmox VE\u4f5c\u4e3a\u4e13\u6709\u865a\u62df\u5316\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u4f01\u4e1a\u80fd\u591f\u96c6\u4e2d\u5316\u548c\u73b0\u4ee3\u5316\u5176IT\u57fa\u7840\u8bbe\u65bd\uff0c\u5e76\u5c06\u5176\u8f6c\u53d8\u4e3a\u57fa\u4e8e\u6700\u65b0\u5f00\u6e90\u6280\u672f\u7684\u7ecf\u6d4e\u9ad8\u6548\u3001\u7075\u6d3b\u7684\u8f6f\u4ef6\u5b9a\u4e49\u6570\u636e\u4e2d\u5fc3\u3002\u6765\u81ea\u4e0d\u540c\u90e8\u95e8\u3001\u89c4\u6a21\u6216\u884c\u4e1a\u7684\u6570\u4ee5\u4e07\u8ba1\u7684\u516c\u53f8\u5ba2\u6237\u90fd\u4f9d\u8d56Proxmox VE\u652f\u6301\u8ba2\u9605\uff0c\u8fd9\u662fProxmox Server Solutions GmbH\u63d0\u4f9b\u7684\u4e00\u9879\u670d\u52a1\u3002\nProxmox VE\u662f\u9762\u5411\u5305\u7f57\u4e07\u8c61\u7684\u4f01\u4e1a\u865a\u62df\u5316\u7684\u9886\u5148\u5f00\u6e90\u5e73\u53f0\u3002\u901a\u8fc7\u4e2d\u592eWeb\u754c\u9762\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u8fd0\u884c\u865a\u62df\u673a\u548c\u5bb9\u5668\u3001\u7ba1\u7406\u8f6f\u4ef6\u5b9a\u4e49\u7684\u5b58\u50a8\u548c\u7f51\u7edc\u529f\u80fd\u3001\u9ad8\u53ef\u7528\u6027\u7fa4\u96c6\u4ee5\u53ca\u591a\u79cd\u96c6\u6210\u7684\u5f00\u7bb1\u5373\u7528\u5de5\u5177\uff0c\u5982\u5907\u4efd/\u6062\u590d\u3001\u5b9e\u65f6\u8fc1\u79fb\u3001\u590d\u5236\u548c\u9632\u706b\u5899\u3002\u4f01\u4e1a\u4f7f\u7528\u529f\u80fd\u5f3a\u5927\u4e14\u6613\u4e8e\u7ba1\u7406\u7684\u4e00\u4f53\u5316\u89e3\u51b3\u65b9\u6848Proxmox VE\u6765\u6ee1\u8db3\u5f53\u4eca\u73b0\u4ee3\u6570\u636e\u4e2d\u5fc3\u7684\u6838\u5fc3\u8981\u6c42(\u590d\u6742\u6027\u66f4\u4f4e\u3001\u7075\u6d3b\u6027\u66f4\u5f3a)\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u7075\u6d3b\u3001\u6a21\u5757\u5316\u548c\u5f00\u653e\u7684\u67b6\u6784\uff0c\u4ece\u800c\u786e\u4fdd\u4fdd\u6301\u5bf9\u672a\u6765\u589e\u957f\u7684\u9002\u5e94\u6027\u3002\nProxmox\u6210\u7acb\u4e8e2005\u5e74\uff0c\u662f\u4e00\u5bb6\u529f\u80fd\u5f3a\u5927\u4f46\u6613\u4e8e\u4f7f\u7528\u7684\u5f00\u6e90\u670d\u52a1\u5668\u8f6f\u4ef6\u7684\u5168\u7403\u63d0\u4f9b\u5546\u3002\u4efb\u4f55\u89c4\u6a21\u3001\u90e8\u95e8\u6216\u884c\u4e1a\u7684\u4f01\u4e1a\u90fd\u53ef\u4ee5\u4f7f\u7528\u7a33\u5b9a\u3001\u5b89\u5168\u3001\u53ef\u6269\u5c55\u548c\u5f00\u653e\u7684Proxmox\u89e3\u51b3\u65b9\u6848\u6765\u90e8\u7f72\u9ad8\u6548\u3001\u7075\u6d3b\u548c\u7b80\u5316\u7684IT\u57fa\u7840\u8bbe\u65bd\uff0c\u6700\u5927\u9650\u5ea6\u5730\u964d\u4f4e\u603b\u62e5\u6709\u6210\u672c\uff0c\u5e76\u907f\u514d\u4f9b\u5e94\u5546\u9501\u5b9a\u3002Proxmox\u63d0\u4f9b\u5546\u4e1a\u652f\u6301\u548c\u57f9\u8bad\uff0c\u4ee5\u786e\u4fdd\u5176\u5ba2\u6237\u7684\u4e1a\u52a1\u8fde\u7eed\u6027\u3002Proxmox Server Solutions GmbH\u603b\u90e8\u8bbe\u5728\u5965\u5730\u5229\u7ef4\u4e5f\u7eb3\uff0c\u5728\u4e16\u754c\u5404\u5730\u62e5\u6709\u6570\u767e\u4e2a\u5408\u4f5c\u4f19\u4f34\u7684\u5168\u7403\u5408\u4f5c\u4f19\u4f34\u7f51\u7edc\u3002", "note_en": "VIENNA, Austria \u2013 Mai 12, 2020 \u2013 Proxmox Server Solutions GmbH today announced the general availability of Proxmox VE 6.2, the latest version of the open-source virtualization management platform. Proxmox VE 6.2 includes new features aimed at addressing issues facing modern datacenter administrators and IT teams. The new version of the virtualization management solution comes with a lot of new features, notable improvements, and many advanced options for the web-based user interface. It&#39;s based on Debian Buster 10.4 and a 5.4 longterm Linux kernel and includes updates to the latest versions of the leading open-source virtualization technologies QEMU 5.0, LXC 4.0, Ceph Nautilus (14.2.9), and ZFS 0.8.3.\n      Proxmox VE implements built-in validation of domains for Let&#39;s Encrypt TLS certificates via the DNS-based challenge mechanism, in addition to the already existing HTTP-based validation mode.\n  Full support for up to eight corosync network links is available. The more links are used, the higher the cluster availability.\n  In the storage content view, administrators can now filter the stored data with the new column \u2018Creation Date\u2019 which, for example, simplifies to search for a backup from a certain date.\n  The language of the web interface can be seamlessly changed without the need to restart the session. An Arabic translation has been added and thus Proxmox VE supports 20 languages in total.\n    The integrated container technology has been updated to LXC 4.0.2 and lxcfs 4.0.3. Proxmox VE 6.2 now allows to create templates for containers on directory-based storage.\n  New LXC templates for Ubuntu 20.04, Fedora 32, CentOS 8.1, Alpine Linux and Arch Linux.\n    The integrated backup manager supports the fast and highly efficient lossless data compression algorithm Zstandard (zstd).\n    Proxmox VE uses a role-based user and permission management for all objects such as VMs, storage, nodes, etc. The new LDAP sync enables synchronization of LDAP users and groups into the Proxmox user and group permission framework.\n  Full support and the integration for API tokens has been added allowing stateless access to most parts of the REST API by another system, software or API client. API Tokens can be generated for individual users and can optionally be configured with separate permissions and expiration dates to limit the scope and duration of the access. Should the API token get compromised it can be revoked without having to disable the user itself.\n        Proxmox VE 6.2 is now available for download at  https://www.proxmox.com/downloads . Distribution upgrades from Proxmox VE 4.x or 5.x versions to 6.x are possible with apt.\n  Proxmox VE is licensed under the free software license GNU Affero GPL, v3. Enterprise support is available from Proxmox Server Solutions on a subscription basis starting at EUR 85 per year and CPU, see  https://www.proxmox.com.\n    The open-source project Proxmox VE has a huge worldwide user base with more than 350,000 hosts. The virtualization platform is translated into over 20 languages. More than 60,000 active community members in the support forum engage with each other. By using Proxmox VE as an alternative to proprietary virtualization management solutions, enterprises are able to centralize and modernize their IT infrastructure and turn it into a cost-effective and flexible software-defined data center based on latest open-source technologies. Tens of thousands of customers from companies regardless of sector, size or industry rely on a Proxmox VE support subscription, a service offered by Proxmox Server Solutions GmbH.\n    Proxmox VE is the leading open-source platform for all-inclusive enterprise virtualization. With the central web interface you can easily run VMs and containers, manage software-defined storage and networking functionality, high-availability clustering, and multiple integrated out-of-the-box tools like backup/restore, live migration, replication, and the firewall. Enterprises use the powerful yet easy-to-manage all-in-one solution Proxmox VE to meet the core requirements\u2014less complexity, more elasticity\u2014 of today\u2019s modern data centers ensuring to stay adaptable for future growth thanks to the flexible, modular and open architecture.\n    Founded in 2005, Proxmox is a global provider of powerful yet easy-to-use open-source server software. Enterprises regardless of size, sector or industry use the stable, secure, scalable, and open Proxmox solutions to deploy efficient, agile and simplified IT infrastructures, minimize total cost of ownership, and avoid vendor lock-in. Proxmox offers commercial support and training to ensure business continuity to its customers. Proxmox Server Solutions GmbH is headquartered in Vienna, Austria and has a global partner network with several hundreds of partners all around the world.", "posttime": "2020-05-12 18:27:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,proxmox", "title": "\u53d1\u5e03Proxmox VE 6.2", "title_en": "Proxmox VE 6.2 Released", "transed": 1, "url": "https://www.proxmox.com/en/news/press-releases/proxmox-ve-6-2", "via": "", "real_tags": ["\u53d1\u5e03", "proxmox"]}, {"category": "", "categoryclass": "", "imagename": "b679340e2eba902d950c4c2a5f0d40f8.png", "infoid": 1001784, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4e86\u9732\u5a1cDisplay\uff0c\u628a\u4f60\u7684ipad\u53d8\u6210Mac mini\u7684\u7b2c\u4e00\u4e3b\u5c4f\u5e55\uff0c\u901a\u8fc7\u5229\u7528Mac mini\u7684\u5904\u7406\u80fd\u529b\u548cipad\u7684\u8fb9\u7f18\u5230\u8fb9\u7f18\u7684\u5168\u9762\u663e\u793a\uff0c\u5c06Mac mini\u548cipad\u7684\u6700\u597d\u4e4b\u5904\u7ed3\u5408\u5728\u4e00\u8d77\u3002\nMac\u8ff7\u4f60\u7535\u8111\u5fc5\u987b\u662f2011\u6b3e\u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5e76\u8fd0\u884cMacOS 10.11(El Capitan)\u6216\u66f4\u9ad8\u7248\u672c\u3002\niPad\u5fc5\u987b\u662f\u8fd0\u884ciOS 9.1\u6216\u66f4\u9ad8\u7248\u672c\u7684\u72ec\u7acbiPad 2\u3001iPad Mini\u3001iPad Pro\u6216iPad Air\u673a\u578b(\u4e0d\u652f\u630132\u4f4d\u8bbe\u5907)\u3002\n\u5728MacOS\u6743\u9650\u548c\u767b\u5f55\u7684\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u5230Mac mini\u7684\u5916\u90e8\u9f20\u6807\u548c\u952e\u76d8\u662f\u6b64\u8bbe\u7f6e\u7684\u6700\u4f73\u9009\u62e9\u3002\n\u8bbe\u7f6e\u65f6\u4e0d\u9700\u8981\u5916\u90e8\u663e\u793a\u5668\uff0c\u4f46\u4ec5\u5728\u9996\u6b21\u914d\u7f6e\u8bbe\u5907\u65f6\u624d\u9700\u8981(\u9664\u975e\u542f\u7528\u4e86FileVault)\u3002\n\u9732\u5a1c\u663e\u793a\u9700\u8981\u8fd0\u884cmac\u5e94\u7528\u7a0b\u5e8f\u3002\u5bf9\u4e8e\u65e0\u5934\u6a21\u5f0f\uff0c\u5982\u679c\u6b63\u5728\u4f7f\u7528FileVault\uff0c\u5219\u6bcf\u6b21\u91cd\u65b0\u542f\u52a8\u65f6\u90fd\u9700\u8981\u5916\u90e8\u663e\u793a\u5668\u6765\u89e3\u9501\u9a71\u52a8\u5668\u3002", "note_en": "With Luna Display, turn your iPad into the\u00a0 primary\u00a0display for Mac mini.\u00a0Combine the best of Mac mini and iPad by harnessing the processing power of the Mac mini and the edge-to-edge full display of the iPad.\n Mac\u00a0 mini\u00a0must be a 2011 model or later, and running macOS 10.11 (El Capitan) or later\n iPad must be an\u00a0 iPad 2, iPad Mini, iPad Pro, or iPad Air\u00a0model running iOS 9.1 or later (32-bit devices are not supported)\n External mouse and keyboard connected to Mac mini are optimal for this setup in case of MacOS permissions and logins\n  An external display is\u00a0 required\u00a0to get set up,\u00a0but is only needed the first time you configure your devices (unless FileVault is enabled).\n Luna Display requires a Mac application to run. For Headless Mode, if FileVault is in use, an external display will be needed to unlock your drive whenever you reboot.", "posttime": "2020-05-12 16:48:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6a21\u5f0f,mode,ipad", "title": "\u65e0\u5934\u6a21\u5f0f\uff1a\u4f7f\u7528iPad\u4f5c\u4e3aMac Mini\u7684\u4e3b\u663e\u793a\u5668", "title_en": "Headless Mode: Using Your iPad as the Main Display for Mac Mini", "transed": 1, "url": "https://lunadisplay.com/pages/headless-mode", "via": "", "real_tags": ["\u6a21\u5f0f", "mode", "ipad"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001782, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u535a\u5ba2\u8ba8\u8bba\u4e86\u4e00\u4e2a\u8001\u95ee\u9898\uff0c\u56fe\u50cf\u683c\u5f0f\u89e3\u6790\u5668\u4e2d\u7684\u6f0f\u6d1e\uff0c\u5728\u4e00\u4e2a\u65b0\u7684(\u5443)\u4e0a\u4e0b\u6587\u4e2d\uff1a\u5728\u6d41\u884c\u7684Messenger\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u65e0\u4ea4\u4e92\u4ee3\u7801\u8def\u5f84\u4e0a\u3002\u672c\u7814\u7a76\u7684\u91cd\u70b9\u662fApple\u751f\u6001\u7cfb\u7edf\u53ca\u5176\u63d0\u4f9b\u7684\u56fe\u50cf\u89e3\u6790API\uff1aImageIO\u6846\u67b6\u3002\u5728\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u4e2d\u53d1\u73b0\u4e86\u591a\u4e2a\u6f0f\u6d1e\uff0c\u62a5\u544a\u7ed9\u4e86Apple\u6216\u5404\u81ea\u7684\u5f00\u6e90\u56fe\u50cf\u5e93\u7ef4\u62a4\u4eba\u5458\uff0c\u5e76\u968f\u540e\u8fdb\u884c\u4e86\u4fee\u590d\u3002\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c\u4e3a\u5c01\u95ed\u6e90\u7801\u4e8c\u8fdb\u5236\u6587\u4ef6\u5b9e\u73b0\u4e86\u4e00\u79cd\u8f7b\u91cf\u7ea7\u3001\u4f4e\u5f00\u9500\u7684\u5f15\u5bfc\u6a21\u7cca\u65b9\u6cd5\uff0c\u5e76\u4e0e\u672c\u6587\u4e00\u8d77\u53d1\u5e03\u3002\n\u91cd\u7533\u4e00\u70b9\u91cd\u8981\u7684\u662f\uff0c\u672c\u535a\u5ba2\u4e2d\u63cf\u8ff0\u7684\u6f0f\u6d1e\u53ef\u4ee5\u901a\u8fc7\u6d41\u884c\u7684\u4fe1\u4f7f\u8bbf\u95ee\uff0c\u4f46\u4e0d\u662f\u5176\u4ee3\u7801\u5e93\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u4fee\u590d\u5b83\u4eec\u4e0d\u662f\u4fe1\u4f7f\u4f9b\u5e94\u5546\u7684\u8d23\u4efb\u3002\n\u5728\u5bf9\u6d41\u884c\u7684Messenger\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\u65f6\uff0c\u6211\u5728\u65e0\u9700\u7528\u6237\u4ea4\u4e92\u5373\u53ef\u8bbf\u95ee\u7684\u4ee3\u7801\u8def\u5f84\u4e0a\u9047\u5230\u4e86\u4ee5\u4e0b\u4ee3\u7801(\u624b\u52a8\u53cd\u7f16\u8bd1\u4e3aobjc\u5e76\u7565\u5fae\u7b80\u5316)\uff1a\n\u6b64\u4ee3\u7801\u5bf9\u4f5c\u4e3a\u6765\u81ea\u53d1\u9001\u65b9\u7684\u4f20\u5165\u6d88\u606f\u7684\u4e00\u90e8\u5206\u63a5\u6536\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4ece\u8be5\u6570\u636e\u5b9e\u4f8b\u5316\u4e00\u4e2aUIImage\u5b9e\u4f8b\u3002\u7136\u540e\uff0cUIImage\u6784\u9020\u51fd\u6570\u5c06\u5c1d\u8bd5\u81ea\u52a8\u786e\u5b9a\u56fe\u50cf\u683c\u5f0f\u3002\u7136\u540e\uff0c\u5c06\u63a5\u6536\u5230\u7684\u56fe\u50cf\u4f20\u9012\u7ed9\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\u6b64\u4ee3\u7801\u7684\u76ee\u7684\u662f\u5448\u73b0\u8f93\u5165\u56fe\u50cf\u7684\u8f83\u5c0f\u5c3a\u5bf8\u7248\u672c\uff0c\u4ee5\u7528\u4f5c\u7528\u6237\u901a\u77e5\u4e2d\u7684\u7f29\u7565\u56fe\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u7c7b\u4f3c\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6Messenger\u5e94\u7528\u7a0b\u5e8f\u4e2d\u627e\u5230\u3002\u672c\u8d28\u4e0a\uff0c\u4e0a\u9762\u6240\u793a\u7684\u4ee3\u7801\u4f1a\u5c06Apple\u7684UIImage\u56fe\u50cf\u89e3\u6790\u548cCoreGraphics\u56fe\u50cf\u6e32\u67d3\u4ee3\u7801\u53d8\u62100click\u653b\u51fb\u9762\u3002\n\u4ece\u5f00\u53d1\u9488\u5bf9iMessage\u6f0f\u6d1e\u7684\u653b\u51fb\u4e2d\u83b7\u5f97\u7684\u4e00\u4e2a\u89c1\u89e3\u662f\uff0c\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u524d\u63d0\u6761\u4ef6\uff0c\u5219\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528\u6240\u63cf\u8ff0\u7684\u6280\u672f\u5229\u7528\u5185\u5b58\u635f\u574f\u6f0f\u6d1e\u8fdb\u884c\u653b\u51fb\uff1a\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\uff0c\u8be5\u6f0f\u6d1e\u53ef\u4ee5\u7528\u6765\u7834\u574f\u6307\u5411objc\u5bf9\u8c61(\u6216\u7c7b\u4f3c\u5bf9\u8c61)\u7684\u6307\u9488\uff0c\u7136\u540e\u6784\u9020\u4e00\u4e2a\u5d29\u6e83\u7684\u9884\u8a00\u6765\u7ed5\u8fc7ASLR\uff0c\u7136\u540e\u83b7\u5f97\u4ee3\u7801\u6267\u884c\u3002\n\u5728\u5f53\u524d\u7684\u653b\u51fb\u573a\u666f\u4e2d\uff0c\u6240\u6709\u7684\u524d\u63d0\u6761\u4ef6\u90fd\u5f97\u5230\u4e86\u6ee1\u8db3\uff0c\u4ece\u800c\u4fc3\u4f7f\u4eba\u4eec\u5bf9\u66b4\u9732\u7684\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u7684\u5065\u58ee\u6027\u8fdb\u884c\u4e86\u4e00\u4e9b\u7814\u7a76\u3002\u67e5\u770bUImage\u7684\u6587\u6863\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a\u201c\u60a8\u4f7f\u7528\u56fe\u50cf\u5bf9\u8c61\u6765\u8868\u793a\u5404\u79cd\u7c7b\u578b\u7684\u56fe\u50cf\u6570\u636e\uff0cUIImage\u7c7b\u80fd\u591f\u7ba1\u7406\u5e95\u5c42\u5e73\u53f0\u652f\u6301\u7684\u6240\u6709\u56fe\u50cf\u683c\u5f0f\u7684\u6570\u636e\u201d\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u6b65\u662f\u51c6\u786e\u786e\u5b9a\u5e95\u5c42\u5e73\u53f0\u652f\u6301\u54ea\u4e9b\u56fe\u50cf\u683c\u5f0f\u3002\n\u4f20\u9012\u7ed9UIImage\u7684\u56fe\u50cf\u6570\u636e\u7684\u89e3\u6790\u662f\u5728ImageIO\u6846\u67b6\u4e2d\u5b9e\u73b0\u7684\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9MacOS\u4e0a\u7684ImageIO\u5e93(/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\u6216iOS\u4e0a\u7684DYLDSHARED_CACHE\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\u6765\u679a\u4e3e\u652f\u6301\u7684\u6620\u50cf\u683c\u5f0f)\u3002\n\u5728ImageIO\u6846\u67b6\u4e2d\uff0c\u6bcf\u79cd\u53d7\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u90fd\u6709\u4e00\u4e2a\u4e13\u7528\u7684IIO_Reader\u5b50\u7c7b\u3002\u6bcf\u4e2aIIO_Reader\u5b50\u7c7b\u90fd\u5e94\u8be5\u5b9e\u73b0\u4e00\u4e2atestHeader\u51fd\u6570\uff0c\u5f53\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u8282\u5757\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u51b3\u5b9a\u8fd9\u4e9b\u5b57\u8282\u662f\u5426\u8868\u793a\u8bfb\u53d6\u5668\u652f\u6301\u7684\u683c\u5f0f\u7684\u56fe\u50cf\u3002\u4e0b\u9762\u663e\u793a\u4e86LibJPEG\u9605\u8bfb\u5668\u7684testHeader\u5b9e\u73b0\u7684\u793a\u4f8b\u5b9e\u73b0\u3002\u5b83\u53ea\u662f\u6d4b\u8bd5\u8f93\u5165\u7684\u51e0\u4e2a\u5b57\u8282\uff0c\u4ee5\u68c0\u6d4bJPEG\u62a5\u5934\u7684\u9b54\u529b\u3002\n\u56e0\u6b64\uff0c\u901a\u8fc7\u5217\u51fa\u4e0d\u540c\u7684testHeader\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7f16\u8bd1ImageIO\u5e93\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f\u5217\u8868\u3002\u540d\u5355\u5982\u4e0b\uff1a\n\u867d\u7136\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u8bb8\u591a\u719f\u6089\u7684\u683c\u5f0f(jpeg\u3001png\u3001gif\u3001\u2026)\u3002\u8fd8\u6709\u8bb8\u591a\u76f8\u5f53\u5f02\u56fd\u60c5\u8c03\u7684\u6e38\u620f(KTX\u548cASTC\uff0c\u663e\u7136\u7528\u4e8e\u7eb9\u7406\u6216AI\uff1aAdobe Illustrator Artwork)\uff0c\u8fd8\u6709\u4e00\u4e9b\u4f3c\u4e4e\u7279\u5b9a\u4e8e\u82f9\u679c\u751f\u6001\u7cfb\u7edf(ICNS\u7528\u4e8e\u56fe\u6807\uff0cATX\u53ef\u80fd\u7528\u4e8eAnimojis)\u3002\n\u5bf9\u4e0d\u540c\u683c\u5f0f\u7684\u652f\u6301\u4e5f\u5404\u4e0d\u76f8\u540c\u3002\u6709\u4e9b\u683c\u5f0f\u4f3c\u4e4e\u5b8c\u5168\u53d7\u652f\u6301\uff0c\u5e76\u4e14\u901a\u5e38\u4f7f\u7528\u5f00\u6e90\u89e3\u6790\u5e93\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e9b\u89e3\u6790\u5e93\u53ef\u4ee5\u5728MacOS\u4e0a\u7684/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources\u4e2d\u627e\u5230\uff1alibGIF.dylib\u3001libJP2.dylib\u3001libJPEG.dylib\u3001libOpenEXR.dylib\u3001libPng.dylib\u3001libRadiance.dylib\u548clibTIFF.dylib\u3002\u5bf9\u4e8e\u5904\u7406\u6700\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u5176\u4ed6\u683c\u5f0f\u4f3c\u4e4e\u53ea\u6709\u57fa\u672c\u7684\u652f\u6301\u3002\n\u6700\u540e\uff0c\u4e00\u4e9b\u683c\u5f0f(\u5982psd)\u4f3c\u4e4e\u4e5f\u652f\u6301\u8fdb\u7a0b\u5916\u89e3\u7801(\u5728MacOS\u4e0a\uff0c\u8fd9\u662f\u7531/System/Library/Frameworks/ImageIO.framework/Versions/A/XPCServices/ImageIOXPCService.xpc)\u5904\u7406\u7684\uff0c\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u89e3\u6790\u5668\u4e2d\u7684\u6c99\u76d2\u6f0f\u6d1e\u3002\u7136\u800c\uff0c\u4f3c\u4e4e\u4e0d\u53ef\u80fd\u5728\u516c\u5171API\u4e2d\u6307\u5b9a\u5e94\u8be5\u5728\u8fdb\u7a0b\u5185\u8fd8\u662f\u8fdb\u7a0b\u5916\u6267\u884c\u89e3\u6790\uff0c\u5e76\u4e14\u6ca1\u6709\u5c1d\u8bd5\u66f4\u6539\u9ed8\u8ba4\u884c\u4e3a\u3002\n\u8003\u8651\u5230\u53ef\u7528\u7684\u56fe\u50cf\u683c\u5f0f\u8303\u56f4\u5f88\u5e7f\uff0c\u800c\u4e14\u5927\u591a\u6570\u4ee3\u7801\u90fd\u6ca1\u6709\u6e90\u4ee3\u7801\u53ef\u7528\uff0c\u6a21\u7cca\u5904\u7406\u4f3c\u4e4e\u662f\u663e\u800c\u6613\u89c1\u7684\u9009\u62e9\u3002\n\u9009\u62e9\u4f7f\u7528\u54ea\u79cd\u6a21\u7cca\u548c\u6a21\u7cca\u65b9\u6cd5\u5e76\u4e0d\u662f\u90a3\u4e48\u660e\u663e\u3002\u56e0\u4e3a\u5927\u591a\u6570\u76ee\u6807\u4ee3\u7801\u4e0d\u662f\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u8bb8\u591a\u6807\u51c6\u5de5\u5177\u4e0d\u80fd\u76f4\u63a5\u9002\u7528\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u51b3\u5b9a\u5c06\u6a21\u7cca\u529f\u80fd\u9650\u5236\u5728\u4e00\u53f0Mac Mini\u4e0a\u3002\u56e0\u6b64\uff0c\u7ed2\u6bdb\u5668\u5e94\u8be5\uff1a\n\u4ee5\u5c3d\u53ef\u80fd\u5c11\u7684\u5f00\u9500\u8fd0\u884c\uff0c\u4ee5\u5145\u5206\u5229\u7528\u53ef\u7528\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u5e76\u4e14\u3002\n\u6700\u540e\uff0c\u6211\u51b3\u5b9a\u5728\u6d2a\u798f\u5179\u7684\u57fa\u7840\u4e0a\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e9b\u4e1c\u897f\u3002\u6a21\u7cca\u65b9\u6cd5\u7684\u601d\u60f3\u5927\u81f4\u57fa\u4e8e\u8fd9\u7bc7\u8bba\u6587\uff1a\u5168\u901f\u6a21\u7cca\uff1a\u901a\u8fc7\u8986\u76d6\u7387\u5f15\u5bfc\u7684\u8ddf\u8e2a\u51cf\u5c11\u6a21\u7cca\u5f00\u9500\u3002\n\u679a\u4e3e\u7a0b\u5e8f/\u5e93\u4e2d\u6bcf\u4e2a\u57fa\u672c\u5757\u7684\u8d77\u59cb\u504f\u79fb\u91cf\u3002\u8fd9\u662f\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684IDAPython\u811a\u672c\u5b8c\u6210\u7684\u3002\n\u5728\u8fd0\u884c\u65f6\uff0c\u5728\u6a21\u7cca\u5316\u8fc7\u7a0b\u4e2d\uff0c\u7528\u65ad\u70b9\u6307\u4ee4(Intel\u4e0a\u7684int3)\u66ff\u6362\u6bcf\u4e2a\u672a\u53d1\u73b0\u7684\u57fa\u672c\u5757\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u3002\u8986\u76d6\u4f4d\u56fe\u4e2d\u7684\u539f\u59cb\u5b57\u8282\u548c\u5bf9\u5e94\u7684\u504f\u79fb\u88ab\u5b58\u50a8\u5728\u4e13\u7528\u5f71\u5b50\u5b58\u50a8\u5668\u6620\u5c04\u4e2d\uff0c\u8be5\u6620\u5c04\u7684\u5730\u5740\u53ef\u4ee5\u6839\u636e\u4fee\u6539\u7684\u5e93\u7684\u5730\u5740\u6765\u8ba1\u7b97\uff0c\u5e76\u4e14\u3002\n\u68c0\u7d22\u51fa\u9519\u5730\u5740\u5e76\u8ba1\u7b97\u5e93\u4e2d\u7684\u504f\u79fb\u91cf\u4ee5\u53ca\u5f71\u5b50\u5b58\u50a8\u5668\u4e2d\u76f8\u5e94\u6761\u76ee\u7684\u5730\u5740\u3002\n\u7531\u4e8e\u53ea\u68c0\u6d4b\u672a\u53d1\u73b0\u7684\u57fa\u672c\u5757\uff0c\u5e76\u4e14\u6bcf\u4e2a\u65ad\u70b9\u53ea\u89e6\u53d1\u4e00\u6b21\uff0c\u56e0\u6b64\u8fd0\u884c\u65f6\u5f00\u9500\u5f88\u5feb\u63a5\u8fd1\u4e8e\u96f6\u3002\u7136\u800c\uff0c\u5e94\u8be5\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u65b9\u6cd5\u4ec5\u5b9e\u73b0\u4e86\u57fa\u672c\u5757\u8986\u76d6\uff0c\u800c\u4e0d\u662f\u4f8b\u5982\u7531AFL\u4f7f\u7528\u7684\u8fb9\u7f18\u8986\u76d6\uff0c\u5e76\u4e14\u5bf9\u4e8e\u5c01\u95ed\u6e90\u76ee\u6807\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u4e8c\u8fdb\u5236\u63d2\u88c5\u6765\u5b9e\u73b0\uff0c\u5c3d\u7ba1\u5177\u6709\u4e00\u4e9b\u6027\u80fd\u5f00\u9500\u3002\u56e0\u6b64\uff0c\u5b83\u5c06\u66f4\u52a0\u201c\u7c97\u7c92\u5ea6\u201d\uff0c\u4f8b\u5982\uff0c\u5c06\u5230\u540c\u4e00\u57fa\u672c\u5757\u7684\u4e0d\u540c\u8fc7\u6e21\u89c6\u4e3a\u76f8\u7b49\uff0c\u800cAFL\u5219\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u5728\u8fed\u4ee3\u6b21\u6570\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6b64\u65b9\u6cd5\u53ef\u80fd\u4f1a\u53d1\u73b0\u8f83\u5c11\u7684\u6f0f\u6d1e\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u672c\u7814\u7a76\u7684\u76ee\u6807\u4e0d\u662f\u5f7b\u5e95\u53d1\u73b0\u6240\u6709\u6f0f\u6d1e\uff0c\u800c\u662f\u5feb\u901f\u6d4b\u8bd5\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u7684\u5065\u58ee\u6027\u5e76\u7a81\u51fa\u653b\u51fb\u5411\u91cf\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u5f7b\u5e95\u7684\u6a21\u7cca\u603b\u662f\u7531\u5177\u6709\u6e90\u4ee3\u7801\u8bbf\u95ee\u6743\u9650\u7684\u7ef4\u62a4\u4eba\u5458\u6267\u884c\u5f97\u6700\u597d\u3002\n\u901a\u8fc7\u4fee\u8865honggfuzz\u7684\u5ba2\u6237\u7aef\u5de5\u5177\u4ee3\u7801\u5e76\u7f16\u5199\u4e00\u4e2aIDAPython\u811a\u672c\u6765\u679a\u4e3e\u57fa\u672c\u5757\u504f\u79fb\u91cf\uff0c\u6240\u63cf\u8ff0\u7684\u65b9\u6cd5\u975e\u5e38\u5bb9\u6613\u5b9e\u73b0\u3002\u8865\u4e01\u548cIDAPython\u811a\u672c\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\n\u7136\u540e\uff0cFuzzer\u4ece\u4e00\u4e2a\u7531\u5927\u7ea6700\u4e2a\u79cd\u5b50\u56fe\u50cf\u7ec4\u6210\u7684\u5c0f\u8bed\u6599\u5e93\u5f00\u59cb\uff0c\u6db5\u76d6\u4e86\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5e76\u8fd0\u884c\u4e86\u51e0\u4e2a\u661f\u671f\u3002\u6700\u540e\uff0c\u53d1\u73b0\u4e86\u4ee5\u4e0b\u6f0f\u6d1e\uff1a\nImageIO\u5bf9libTiff\u7684\u4f7f\u7528\u4e2d\u5b58\u5728\u9519\u8bef\uff0c\u5bfc\u81f4\u63a7\u5236\u6570\u636e\u5199\u5165\u8d85\u8fc7\u5185\u5b58\u7f13\u51b2\u533a\u672b\u5c3e\u3002\u6ca1\u6709\u4e3a\u8fd9\u4e2a\u95ee\u9898\u5206\u914dCVE\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5728\u6211\u4eec\u62a5\u544a\u4e4b\u524d\uff0c\u82f9\u679c\u5185\u90e8\u5df2\u7ecf\u53d1\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\u53ef\u80fd\u662fPVR\u89e3\u7801\u903b\u8f91\u4e2d\u7684\u504f\u5dee-1\u9519\u8bef\uff0c\u5bfc\u81f4\u989d\u5916\u7684\u50cf\u7d20\u6570\u636e\u884c\u88ab\u5199\u5165\u8d85\u51fa\u8f93\u51fa\u7f13\u51b2\u5668\u672b\u7aef\u7684\u8fb9\u754c\u3002\nPVR\u89e3\u7801\u5668\u4e2d\u7684\u76f8\u5173\u9519\u8bef\u5bfc\u81f4\u8d8a\u754c\u8bfb\u53d6\uff0c\u53ef\u80fd\u4e0e1974\u5e74P0\u95ee\u9898\u5177\u6709\u76f8\u540c\u7684\u6839\u672c\u539f\u56e0\uff0c\u56e0\u6b64\u5206\u914d\u4e86\u76f8\u540c\u7684CVE\u7f16\u53f7\u3002\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u6709\u4e9b\u7279\u6b8a\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728\u4e0eImageIO\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u7b2c\u4e09\u65b9\u4ee3\u7801\u4e2d\uff0c\u5373OpenEXR\u5e93\u3002\u7531\u4e8e\u8be5\u5e93\u662f\u5f00\u653e\u6e90\u7801\u7684\uff0c\u6211\u51b3\u5b9a\u5c06\u5176\u5355\u72ec\u6a21\u7cca\u5316\u3002\nOpenEXR\u662f\u201c\u4e00\u79cd\u9ad8\u52a8\u6001\u8303\u56f4(HDR)\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f[.]\u3002\u7528\u4e8e\u8ba1\u7b97\u673a\u6210\u50cf\u5e94\u7528\u201c\u3002\u89e3\u6790\u5668\u662f\u7528C\u548cC++\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0cOpenEXR\u5e93\u901a\u8fc7Apple\u7684ImageIO\u6846\u67b6\u516c\u5f00\uff0c\u56e0\u6b64\u901a\u8fc7\u82f9\u679c\u8bbe\u5907\u4e0a\u5404\u79cd\u6d41\u884c\u7684\u4fe1\u4f7f\u5e94\u7528\u7a0b\u5e8f\u66b4\u9732\u4e3a0click\u653b\u51fb\u9762\u3002\u867d\u7136\u6211\u8fd8\u6ca1\u6709\u8fdb\u884c\u66f4\u591a\u7684\u7814\u7a76\u6765\u652f\u6301\u8fd9\u4e00\u8bf4\u6cd5\uff0c\u4f46\u653b\u51fb\u8868\u9762\u5f88\u53ef\u80fd\u5e76\u4e0d\u5c40\u9650\u4e8e\u5373\u65f6\u901a\u8baf\u5e94\u7528\u7a0b\u5e8f\u3002\n\u7531\u4e8e\u8be5\u5e93\u662f\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u201c\u4f20\u7edf\u7684\u201d\u5f15\u5bfc\u6a21\u7cca\u66f4\u5bb9\u6613\u6267\u884c\u3002\u6211\u4f7f\u7528\u4e86\u4e00\u6b3e\u8c37\u6b4c\u5185\u90e8\u7684\u3001\u8986\u76d6\u5bfc\u5411\u7684\u6a21\u7cca\u5668\uff0c\u5728\u5927\u7ea6500\u4e2a\u5185\u6838\u4e0a\u8fd0\u884c\u4e86\u5927\u7ea6\u4e24\u5468\u3002\u6a21\u7cca\u5668\u4ee5\u4f7f\u7528llvm\u7684SanitizerCoverage\u7684\u8fb9\u7f18\u8986\u76d6\u4e3a\u5bfc\u5411\uff0c\u901a\u8fc7\u4f7f\u7528\u5e38\u89c1\u7684\u4e8c\u8fdb\u5236\u7a81\u53d8\u7b56\u7565\u5bf9\u73b0\u6709\u7684\u56fe\u50cf\u8fdb\u884c\u7a81\u53d8\uff0c\u5e76\u4ece\u4e00\u7ec4\u5927\u7ea680\u5f20\u73b0\u6709\u7684openexr\u56fe\u50cf\u4f5c\u4e3a\u79cd\u5b50\u5f00\u59cb\u751f\u6210\u65b0\u7684\u8f93\u5165\u3002\n\u53d1\u73b0\u4e868\u4e2a\u53ef\u80fd\u7684\u72ec\u7279\u6f0f\u6d1e\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3aP0\u95ee\u98981987\u62a5\u544a\u7ed9OpenEXR\u7ef4\u62a4\u4eba\u5458\uff0c\u7136\u540e\u57282.4.1\u7248\u672c\u4e2d\u8fdb\u884c\u4e86\u4fee\u590d\u3002\u4e0b\u9762\u5bf9\u5b83\u4eec\u8fdb\u884c\u7b80\u8981\u603b\u7ed3\uff1a\n\u5bfc\u81f4std\uff1a\uff1aVector\u88ab\u8bfb\u51fa\u8fb9\u754c\u7684\u9519\u8bef\u3002\u4e4b\u540e\uff0c\u8c03\u7528\u4ee3\u7801\u5c06\u5199\u5165\u6b64\u5411\u91cf\u7684\u5143\u7d20\u69fd\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u635f\u574f\u5185\u5b58\u3002\n\u4e00\u79cd\u8d8a\u754cmemcpy\uff0c\u8be5memcpy\u6b63\u5728\u8bfb\u53d6\u8d8a\u754c\u6570\u636e\uff0c\u7136\u540e\u53ef\u80fd\u4e5f\u4f1a\u5c06\u5176\u5199\u5165\u8d8a\u754c\u3002\n\u5806\u6808\u4e0a\u7684\u8d8a\u754c\u8bfb\u53d6\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u4ee5\u524d\u8986\u76d6\u5806\u6808\u4e0a\u7684\u5b57\u7b26\u4e32\u7a7a\u7ec8\u6b62\u7b26\u65f6\u51fa\u73b0\u6309\u4e00\u53d6\u4e00\u7684\u9519\u8bef\u3002\n\u6709\u8da3\u7684\u662f\uff0cImageIO Fuzzer\u6700\u521d\u53d1\u73b0\u7684\u5d29\u6e83(1988\u5e74\u7248)\u4f3c\u4e4e\u65e0\u6cd5\u5728\u4e0a\u6e38OpenEXR\u5e93\u4e2d\u91cd\u73b0\uff0c\u56e0\u6b64\u76f4\u63a5\u62a5\u544a\u7ed9\u4e86Apple\u3002\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u91ca\u662f\uff0c\u82f9\u679c\u53d1\u5e03\u4e86\u4e00\u4e2a\u8fc7\u65f6\u7248\u672c\u7684OpenEXR\u5e93\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u8be5\u6f0f\u6d1e\u5df2\u88ab\u4e0a\u6e38\u4fee\u590d\u3002\n\u5a92\u4f53\u683c\u5f0f\u89e3\u6790\u4ecd\u7136\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u3002\u5176\u4ed6\u7814\u7a76\u4eba\u5458\u548c\u4f9b\u5e94\u5546\u5efa\u8bae\u4e5f\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u4ee5\u4e0b\u4e24\u70b9\u7acb\u5373\u6d6e\u73b0\u5728\u8111\u6d77\u4e2d\uff1a\n\u5f53\u7136\uff0c\u8fd9\u8868\u660e\u8f93\u5165\u89e3\u6790\u5668\u7684\u6301\u7eed\u6a21\u7cca\u6d4b\u8bd5\u5e94\u8be5\u5728\u4f9b\u5e94\u5546/\u4ee3\u7801\u7ef4\u62a4\u4eba\u5458\u7aef\u8fdb\u884c\u3002\u6b64\u5916\uff0c\u5141\u8bb8\u50cfImageIO\u8fd9\u6837\u7684\u5e93\u7684\u5ba2\u6237\u7aef\u9650\u5236\u5141\u8bb8\u7684\u8f93\u5165\u683c\u5f0f\uff0c\u5e76\u6709\u53ef\u80fd\u9009\u62e9\u8fdb\u7a0b\u5916\u89e3\u7801\uff0c\u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u5229\u7528\u6f0f\u6d1e\u3002\n\u5728\u4fe1\u4f7f\u7aef\uff0c\u4e00\u79cd\u5efa\u8bae\u662f\u901a\u8fc7\u5c06\u63a5\u6536\u5668\u9650\u5236\u4e3a\u5c11\u91cf\u53d7\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f(\u81f3\u5c11\u5bf9\u4e8e\u4e0d\u9700\u8981\u4ea4\u4e92\u7684\u6d88\u606f\u9884\u89c8)\u6765\u51cf\u5c11\u653b\u51fb\u9762\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u65b9\u968f\u540e\u4f1a\u5728\u5c06\u4efb\u4f55\u4e0d\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u53d1\u9001\u7ed9\u63a5\u6536\u65b9\u4e4b\u524d\u5bf9\u5176\u8fdb\u884c\u91cd\u65b0\u7f16\u7801\u3002\u5728ImageIO\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c06\u628a\u653b\u51fb\u9762\u4ece\u5927\u7ea625\u79cd\u56fe\u50cf\u683c\u5f0f\u51cf\u5c11\u5230\u51e0\u79cd\u6216\u66f4\u5c11\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u63cf\u8ff0\u4e86\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u4f5c\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u6216\u7b2c\u4e09\u65b9\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u6700\u7ec8\u5982\u4f55\u901a\u8fc7\u6d41\u884c\u7684\u4fe1\u4f7f\u66b4\u9732\u4e8e0click\u653b\u51fb\u9762\u3002\u5bf9\u66b4\u9732\u7684\u4ee3\u7801\u8fdb\u884c\u6a21\u7cca\u5904\u7406\u53d1\u73b0\u4e86\u8bb8\u591a\u65b0\u7684\u6f0f\u6d1e\uff0c\u8fd9\u4e9b\u6f0f\u6d1e\u5df2\u88ab\u4fee\u590d\u3002\u5f88\u53ef\u80fd\uff0c\u53ea\u8981\u4ed8\u51fa\u8db3\u591f\u7684\u52aa\u529b(\u4ee5\u53ca\u7531\u4e8e\u81ea\u52a8\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u800c\u5141\u8bb8\u7684\u653b\u51fb\u5c1d\u8bd5)\uff0c\u67d0\u4e9b\u5df2\u53d1\u73b0\u7684\u6f0f\u6d1e\u5c31\u53ef\u4ee5\u57280click\u653b\u51fb\u65b9\u6848\u4e2d\u7528\u4e8eRCE\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5176\u4ed6\u9519\u8bef\u4e5f\u5f88\u53ef\u80fd\u4ecd\u7136\u5b58\u5728\u6216\u5c06\u5728\u672a\u6765\u5f15\u5165\u3002\u56e0\u6b64\uff0c\u5efa\u8bae\u5728\u64cd\u4f5c\u7cfb\u7edf\u5e93(\u5728\u672c\u4f8b\u4e2d\u4e3aImageIO)\u548cMessenger\u5e94\u7528\u7a0b\u5e8f(\u901a\u8fc7\u9650\u5236\u63a5\u6536\u5668\u4e0a\u53ef\u63a5\u53d7\u7684\u56fe\u50cf\u683c\u5f0f\u7684\u6570\u91cf)\u4e2d\u5bf9\u8be5\u4ee3\u7801\u548c\u7c7b\u4f3c\u7684\u5a92\u4f53\u683c\u5f0f\u89e3\u6790\u4ee3\u7801\u8fdb\u884c\u6301\u7eed\u6a21\u7cca\u6d4b\u8bd5\uff0c\u5e76\u79ef\u6781\u51cf\u5c11\u653b\u51fb\u9762\u3002", "note_en": "This blog post discusses an old type of issue, vulnerabilities in image format parsers, in a new(er) context: on interactionless code paths in popular messenger apps. This research was focused on the Apple ecosystem and the image parsing API provided by it: the ImageIO framework. Multiple vulnerabilities in image parsing code were found, reported to Apple or the respective open source image library maintainers, and subsequently fixed. During this research, a lightweight and low-overhead guided fuzzing approach for closed source binaries was implemented and is released alongside this blogpost.\n   To reiterate an important point, the vulnerabilities described throughout this blog are reachable through popular messengers but are not part of their codebase. It is thus not the responsibility of the messenger vendors to fix them.\n    While reverse engineering popular messenger apps, I came across the following code (manually decompiled into ObjC and slightly simplified) on a code path reachable without user interaction:\n          This code decrypts binary data received as part of an incoming message from the sender and instantiates a   UIImage  instance from it. The UIImage constructor will then try to determine the image format automatically. Afterwards, the received image is passed to the following code:\n            The purpose of this code is to render a smaller sized version of the input image for use as a thumbnail in a notification for the user. Unsurprisingly, similar code can be found in other messenger apps as well. In essence, code like the one shown above turns Apple\u2019s UIImage image parsing and CoreGraphics image rendering code into 0click attack surface.\n   One of the insights gained from   developing an exploit for an iMessage vulnerability  was that a memory corruption vulnerability could likely be exploited using the described techniques if the following preconditions are met:\n      In that case, the vulnerability could for example be used to corrupt a pointer to an ObjC object (or something similar), then construct a crash oracle to bypass ASLR, then gain code execution afterwards.\n   All preconditions are satisfied in the current attack scenario, thus prompting some research into the robustness of the exposed image parsing code. Looking into the   documentation of UImage , the following sentence can be found: \u201cYou use image objects to represent image data of all kinds, and the UIImage class is capable of managing data for all image formats supported by the underlying platform\u201d. As such, the next step was determining exactly what image formats were supported by the underlying platform.\n      Parsing of image data passed to UIImage is implemented in the ImageIO framework. As such, the supported image formats can be enumerated by reverse engineering the ImageIO library (/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO on macOS or part of the dyld_shared_cache on iOS).\n   In the ImageIO framework, every supported image format has a dedicated IIO_Reader subclass for it. Each IIO_Reader subclass is expected to implement a testHeader function which, when given a chunk of bytes, should decide whether these bytes represent an image in the format supported by the reader. An example implementation of the testHeader implementation for the LibJPEG reader is shown below. It simply tests a few bytes of the input to detect the JPEG header magic.\n         By listing the different testHeader implementations, it thus becomes possible to compile a list of file formats supported by the ImageIO library. The list is as follows:\n                                While this list contains many familiar formats (JPEG, PNG, GIF, \u2026) there are numerous rather exotic ones as well (KTX and ASTC, apparently used for textures or AI: Adobe Illustrator Artwork) and some that appear to be specific to the Apple ecosystem (ICNS for icons, ATX likely for Animojis)\n   Support for the different formats also varies. Some formats appear fully supported and are often implemented using what appear to be the open source parsing library which can be found in /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources on macOS: libGIF.dylib, libJP2.dylib, libJPEG.dylib, libOpenEXR.dylib, libPng.dylib, libRadiance.dylib, and libTIFF.dylib. Other formats seem to have only rudimentary support for handling the most common cases.\n   Finally, some formats (e.g. PSD), also appear to support out-of-process decoding (on macOS this is handled by /System/Library/Frameworks/ImageIO.framework/Versions/A/XPCServices/ImageIOXPCService.xpc) which can help sandbox vulnerabilities in the parsers. It does not, however, seem to be possible to specify whether parsing should be performed in-process or out-of-process in the public APIs, and no attempt was made to change the default behaviour.\n      Given the wide range of available image formats and the fact that no source code is available for the majority of the code, fuzzing seemed like the obvious choice.\n   The choice of which fuzzer and fuzzing approach to use was not so obvious. Since the majority of the target code was not open source, many standard tools were not directly applicable. Further, I had decided to limit fuzzing to a single Mac Mini for simplicity. Thus, the fuzzer should:\n Run with as little overhead as possible to fully utilize the available compute resources, and\n In the end I decided to implement something myself on top of   Honggfuzz . The idea for the fuzzing approach is loosely based on the paper:   Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing\n    Enumerating the start offset of every basic block in the program/library. This is done with a simple IDAPython script\n At runtime, in the fuzzed process, replacing the first byte of every undiscovered basic block with a breakpoint instruction (int3 on Intel). The original byte and the corresponding offset in the coverage bitmap are stored in a dedicated shadow memory mapping whose address can be computed from the address of the modified library, and\n  Retrieve the faulting address and compute the offset in the library as well as the address of the corresponding entry in the shadow memory\n   As only undiscovered basic blocks are instrumented and since every breakpoint is only triggered once, the runtime overhead quickly approaches zero. It should, however, be noted that this approach only achieves basic block coverage and not edge coverage as used for example by   AFL  and which, for closed source targets, can be achieved through   dynamic    binary    instrumentation  albeit with some performance overhead. It will thus be more \u201ccoarse grained\u201d and for example treat different transitions to the same basic block as equal whereas AFL would not. As such, this approach will likely find fewer vulnerabilities given the same number of iterations. I deemed this acceptable as the goal of this research was not to perform thorough discovery of all vulnerabilities but rather to quickly test the robustness of the image parsing code and highlight the attack vector. Thorough fuzzing, in any case, is always best performed by the maintainers with source code access.\n   The described approach was fairly easy to implement by patching honggfuzz\u2019s client instrumentation code and writing an IDAPython script to enumerate the basic block offsets. Both patch and IDAPython script can be found   here .\n   The fuzzer then started from a small corpus of around 700 seed images covering the supported image formats and ran for multiple weeks. In the end, the following vulnerabilities were identified:\n    A bug in the usage of libTiff by ImageIO which caused controlled data to be written past the end of a memory buffer. No CVE was assigned for this issue likely because it had already been discovered internally by Apple before we reported it.\n            Possibly an off-by-one error in the PVR decoding logic leading to an additional row of pixel data being written out-of-bounds past the end of the output buffer.\n    A related bug in the PVR decoder leading to an out-of-bounds read which likely had the same root cause as P0 Issue 1974 and thus was assigned the same CVE number.\n       The last issue was somewhat special as it occurred in 3rd party code bundled with ImageIO, namely that of the   OpenEXR library . As that library is open source, I decided to fuzz it separately as well.\n      OpenEXR  is \u201ca high dynamic-range (HDR) image file format [...] for use in computer imaging applications\u201d. The parser is implemented in C and C++ and can be found on   github .\n As described above, the OpenEXR library is exposed through Apple\u2019s ImageIO framework and therefore is exposed as a 0click attack surface through various popular messenger apps on Apple devices. It is likely that the attack surface is not limited to messaging apps, though I haven&#39;t conducted additional research to support that claim.\n   As the library is open source, \u201cconventional\u201d guided fuzzing is much easier to perform. I used a Google internal, coverage-guided fuzzer running on roughly 500 cores for around two weeks. The fuzzer was guided by edge coverage using llvm\u2019s   SanitizerCoverage  and generated new inputs by mutating existing ones using common binary mutation strategies and starting from a set of roughly 80 existing OpenEXR images as seeds.\n   Eight likely unique vulnerabilities were identified and reported as   P0 issue 1987  to the OpenEXR maintainers, then fixed in the   2.4.1 release . They are briefly summarized next:\n        A bug that caused a std::vector to be read out-ouf-bounds. Afterwards, the calling code would write into an element slot of this vector, thus likely corrupting memory.\n    An out-of-bounds memcpy that was reading data out-of-bounds and afterwards potentially writing it out-of-bounds as well.\n        An out-of-bounds read on the stack, likely due to an off-by-one error previously overwriting a string null terminator on the stack.\n       Interestingly, the crash initially found by the ImageIO fuzzer (  issue 1988 ) did not appear to be reproducible in the upstream OpenEXR library and was thus reported directly to Apple. A possible explanation is that Apple was shipping an outdated version of the OpenEXR library and the bug had been fixed upstream in the meantime.\n      Media format parsing remains an important issue. This was also demonstrated by other researchers and vendor advisories, with the two following coming immediately to mind:\n    This of course suggests that continuous fuzz-testing of input parsers should occur on the vendor/code maintainer side. Further, allowing clients of a library like ImageIO to restrict the allowed input formats and potentially to opt-in to out-of-process decoding can help prevent exploitation.\n   On the messenger side, one recommendation is to reduce the attack surface by restricting the receiver to a small number of supported image formats (at least for message previews that don\u2019t require interaction). In that case, the sender would then re-encode any unsupported image format prior to sending it to the receiver. In the case of ImageIO, that would reduce the attack surface from around 25 image formats down to just a handful or less.\n    This blog post described how image parsing code, as part of the operating system or third party libraries, end up being exposed to 0click attack surface through popular messengers. Fuzzing of the exposed code turned up numerous new vulnerabilities which have since been fixed. It is likely that, given enough effort (and exploit attempts granted due to automatically restarting services), some of the found vulnerabilities can be exploited for RCE in a 0click attack scenario. Unfortunately it is also likely that other bugs remain or will be introduced in the future. As such, continuous fuzz-testing of this and similar media format parsing code as well as aggressive attack-surface reduction, both in operating system libraries (in this case ImageIO) as well as messenger apps (by restricting the number of accepted image formats on the receiver) are recommended.", "posttime": "2020-05-12 15:37:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6a21\u7cca\u5316,fuzzing,\u4ee3\u7801", "title": "\u6a21\u7cca\u5316ImageIO", "title_en": "Fuzzing ImageIO", "transed": 1, "url": "https://googleprojectzero.blogspot.com/2020/04/fuzzing-imageio.html", "via": "", "real_tags": ["\u6a21\u7cca\u5316", "fuzzing", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "3249ecd0b3e8d60d2ca092c2e97b89c6.png", "infoid": 1001781, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Windows\u4e0a\u7684Chromium\u6c99\u76d2\u7ecf\u53d7\u4f4f\u4e86\u65f6\u95f4\u7684\u8003\u9a8c\u3002\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e0d\u9700\u8981\u63d0\u5347\u7279\u6743\u5c31\u53ef\u4ee5\u5927\u89c4\u6a21\u90e8\u7f72\u7684\u66f4\u597d\u7684\u6c99\u7bb1\u673a\u5236\u4e4b\u4e00\u3002\u4ece\u597d\u7684\u65b9\u9762\u6765\u8bf4\uff0c\u5b83\u786e\u5b9e\u6709\u5b83\u7684\u5f31\u70b9\u3002\u4e3b\u8981\u7684\u95ee\u9898\u662f\u6c99\u7bb1\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8eWindows\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3002\u66f4\u6539Windows\u7684\u884c\u4e3a\u4e0d\u5728Chromium\u5f00\u53d1\u56e2\u961f\u7684\u63a7\u5236\u8303\u56f4\u4e4b\u5185\u3002\u5982\u679c\u5728Windows\u7684\u5b89\u5168\u5b9e\u65bd\u673a\u5236\u4e2d\u53d1\u73b0\u9519\u8bef\uff0c\u5219\u6c99\u7bb1\u53ef\u80fd\u4f1a\u88ab\u7834\u574f\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u662f\u5173\u4e8eWindows101903\u4e2d\u5f15\u5165\u7684\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u8be5\u6f0f\u6d1e\u6253\u7834\u4e86Chromium\u7528\u6765\u4fdd\u8bc1\u6c99\u7bb1\u5b89\u5168\u7684\u4e00\u4e9b\u5b89\u5168\u5047\u8bbe\u3002\u6211\u5c06\u4ecb\u7ecd\u5982\u4f55\u5229\u7528\u8be5bug\u5f00\u53d1\u4e00\u7cfb\u5217\u6267\u884c\u94fe\uff0c\u4ee5\u907f\u5f00Chrome/Edge\u4e0a\u7684GPU\u8fdb\u7a0b\u6216Firefox\u4e2d\u7684\u9ed8\u8ba4\u5185\u5bb9\u6c99\u7bb1\u6240\u4f7f\u7528\u7684\u6c99\u7bb1\u3002\u5229\u7528\u8fc7\u7a0b\u4e5f\u662f\u5bf9Windows\u4e2d\u7684\u5c0f\u5f31\u70b9\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u6d1e\u5bdf\uff0c\u8fd9\u4e9b\u5c0f\u5f31\u70b9\u672c\u8eab\u5e76\u6ca1\u6709\u8d8a\u8fc7\u5b89\u5168\u8fb9\u754c\uff0c\u4f46\u5374\u5bfc\u81f4\u4e86\u6210\u529f\u7684\u6c99\u76d2\u9003\u8131\u3002\u6b64\u6f0f\u6d1e\u5df2\u57282020\u5e744\u6708\u4fee\u590d\uff0c\u540d\u79f0\u4e3aCVE-2020-0981\u3002\n\u5728\u63cf\u8ff0\u9519\u8bef\u672c\u8eab\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u4e86\u89e3\u4e00\u4e0bChromium\u6c99\u7bb1\u5728Windows\u4e0a\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u6c99\u7bb1\u901a\u8fc7\u4f7f\u7528\u53d7\u9650\u4ee4\u724c\u6765\u5904\u7406\u6700\u5c0f\u7279\u6743\u7684\u6982\u5ff5\u3002\u53d7\u9650\u4ee4\u724c\u662fWindows 2000\u4e2d\u6dfb\u52a0\u7684\u4e00\u9879\u529f\u80fd\uff0c\u5b83\u901a\u8fc7\u4ee5\u4e0b\u64cd\u4f5c\u4fee\u6539\u8fdb\u7a0b\u7684\u8bbf\u95ee\u4ee4\u724c\uff0c\u4ece\u800c\u51cf\u5c11\u6388\u4e88\u8fdb\u7a0b\u7684\u8bbf\u95ee\u6743\u9650\uff1a\n\u7981\u7528\u7ec4\u4f1a\u5220\u9664\u8bbf\u95ee\u4ee4\u724c\u7684\u6210\u5458\u8eab\u4efd\uff0c\u4ece\u800c\u5bfc\u81f4\u7981\u7528\u5bf9\u8fd9\u4e9b\u7ec4\u4fdd\u62a4\u7684\u8d44\u6e90\u7684\u8bbf\u95ee\u3002\u5220\u9664\u6743\u9650\u53ef\u9632\u6b62\u8fdb\u7a0b\u6267\u884c\u4efb\u4f55\u4e0d\u5fc5\u8981\u7684\u7279\u6743\u64cd\u4f5c\u3002\u6700\u540e\uff0c\u6dfb\u52a0\u53d7\u9650SID\u4f1a\u66f4\u6539\u5b89\u5168\u8bbf\u95ee\u68c0\u67e5\u6d41\u7a0b\u3002\u8981\u83b7\u5f97\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u6211\u4eec\u9700\u8981\u5339\u914d\u4e3b\u5217\u8868\u548c\u53d7\u9650SID\u5217\u8868\u4e2d\u7684\u7ec4\u7684\u5b89\u5168\u63cf\u8ff0\u7b26\u6761\u76ee\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2aSID\u5217\u8868\u672a\u6388\u4e88\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5219\u8bbf\u95ee\u5c06\u88ab\u62d2\u7edd\u3002\nChrome\u8fd8\u4f7f\u7528Vista\u4e2d\u6dfb\u52a0\u7684\u5b8c\u6574\u6027\u7ea7\u522b(IL)\u529f\u80fd\u8fdb\u4e00\u6b65\u9650\u5236\u8d44\u6e90\u8bbf\u95ee\u3002\u901a\u8fc7\u8bbe\u7f6e\u8f83\u4f4e\u7684IL\uff0c\u6211\u4eec\u53ef\u4ee5\u963b\u6b62\u5bf9\u66f4\u9ad8\u5b8c\u6574\u6027\u8d44\u6e90\u7684\u5199\u8bbf\u95ee\uff0c\u800c\u4e0d\u7ba1\u8bbf\u95ee\u68c0\u67e5\u7684\u7ed3\u679c\u5982\u4f55\u3002\n\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5c06\u53d7\u9650\u4ee4\u724c\u4e0eIL\u4e00\u8d77\u4f7f\u7528\u5141\u8bb8\u6c99\u7bb1\u9650\u5236\u53d7\u5371\u5bb3\u7684\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c\u4ece\u800c\u9650\u5236RCE\u53ef\u80fd\u4ea7\u751f\u7684\u5f71\u54cd\u3002\u963b\u6b62\u5199\u8bbf\u95ee\u5c24\u5176\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u4f1a\u5141\u8bb8\u653b\u51fb\u8005\u901a\u8fc7\u5199\u5165\u6587\u4ef6\u6216\u6ce8\u518c\u8868\u9879\u6765\u5371\u5bb3\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u3002\nWindows\u4e0a\u7684\u4efb\u4f55\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u4ee4\u724c\u521b\u5efa\u65b0\u8fdb\u7a0b\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u8c03\u7528CreateProcessAsUser\u3002\u662f\u4ec0\u4e48\u963b\u6b62\u6c99\u7bb1\u8fdb\u7a0b\u4f7f\u7528\u65e0\u9650\u5236\u4ee4\u724c\u521b\u5efa\u65b0\u8fdb\u7a0b\uff1fWindows\u548cChromium\u5b9e\u65bd\u4e86\u4e00\u4e9b\u5b89\u5168\u7f13\u89e3\u63aa\u65bd\uff0c\u4f7f\u5f97\u5728\u6c99\u7bb1\u4e4b\u5916\u521b\u5efa\u65b0\u8fdb\u7a0b\u53d8\u5f97\u56f0\u96be\uff1a\n\u5185\u6838\u9650\u5236\u975e\u7279\u6743\u7528\u6237\u53ef\u4ee5\u5c06\u54ea\u4e9b\u4ee4\u724c\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u3002\n\u6c99\u7bb1\u9650\u5236\u9650\u5236\u4e86\u7528\u4e8e\u65b0\u8fdb\u7a0b\u7684\u9002\u5f53\u8bbf\u95ee\u4ee4\u724c\u7684\u53ef\u7528\u6027\u3002\nCr\u5728Job\u5bf9\u8c61\u5185\u8fd0\u884c\u6c99\u7bb1\u8fdb\u7a0b\uff0c\u8be5\u5bf9\u8c61\u7531\u4efb\u4f55\u786c\u8fdb\u7a0b\u914d\u989d\u9650\u5236\u4e3a1\u7684\u5b50\u8fdb\u7a0b\u7ee7\u627f\u3002\n\u5728Windows 10\u4e2d\uff0cChromium\u4f7f\u7528\u5b50\u8fdb\u7a0b\u7f13\u89e3\u7b56\u7565\u6765\u963b\u6b62\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002\u8fd9\u662f\u57283\u4e2d\u7684Job\u5bf9\u8c61\u4e4b\u5916\u5e94\u7528\u7684\u3002\n\u6240\u6709\u8fd9\u4e9b\u7f13\u89e3\u63aa\u65bd\u6700\u7ec8\u90fd\u4f9d\u8d56\u4e8eWindows\u7684\u5b89\u5168\u6027\u3002\u4f46\u662f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6700\u5173\u952e\u7684\u662f1\u3002\u5373\u4f7f2\u52304\u5931\u8d25\uff0c\u7406\u8bba\u4e0a\u6211\u4eec\u4e5f\u4e0d\u80fd\u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u66f4\u6709\u7279\u6743\u7684\u8bbf\u95ee\u4ee4\u724c\u3002\u5f53\u6d89\u53ca\u5230\u5206\u914d\u65b0\u4ee4\u724c\u65f6\uff0c\u5185\u6838\u68c0\u67e5\u662f\u4ec0\u4e48\uff1f\n\u5047\u8bbe\u8c03\u7528\u8fdb\u7a0b\u6ca1\u6709SeAssignPrimaryTokenPrivilege(\u6211\u4eec\u6ca1\u6709)\uff0c\u90a3\u4e48\u65b0\u4ee4\u724c\u5fc5\u987b\u6ee1\u8db3\u5185\u6838\u51fd\u6570SeIsTokenAssignableToProcess\u4e2d\u68c0\u67e5\u7684\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\u3002\u8fd9\u4e9b\u6761\u4ef6\u57fa\u4e8e\u5185\u6838\u7684\u6807\u8bb0\u5bf9\u8c61\u7ed3\u6784\u4e2d\u7684\u6307\u5b9a\u503c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\u5f53\u524d\u8fdb\u7a0b\u4ee4\u724c\u7684\u5b50\u7ea7\u3002\u57fa\u4e8e\u65b0\u4ee4\u724c\u7684\u7236\u4ee4\u724cID\u7b49\u4e8e\u8fdb\u7a0b\u4ee4\u724c\u7684ID\u3002\n\u5f53\u524d\u8fdb\u7a0b\u4ee4\u724c\u7684\u540c\u7ea7\u3002\u57fa\u4e8e\u7236\u4ee4\u724cID\u548c\u8eab\u4efd\u9a8c\u8bc1ID\u5b57\u6bb5\u90fd\u76f8\u7b49\u3002\n\u8fd8\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u65b0\u7684\u4ee4\u724c\u4e0d\u662f\u6807\u8bc6\u7ea7\u522b\u7684\u6a21\u62df\u4ee4\u724c(\u7531\u4e8e\u6211\u62a5\u544a\u7684\u8fd9\u4e2a\u9519\u8bef)\uff0c\u5e76\u4e14\u65b0\u4ee4\u724c\u7684IL\u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u7684\u8fdb\u7a0b\u4ee4\u724c\u3002\u8fd9\u4e9b\u90fd\u540c\u6837\u91cd\u8981\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u5728\u5b9e\u8df5\u4e2d\u7528\u5904\u8f83\u5c0f\u3002\n\u4ee4\u724c\u5206\u914d\u4e0d\u4f1a\u660e\u663e\u68c0\u67e5\u7236\u4ee4\u724c\u6216\u5b50\u4ee4\u724c\u662f\u5426\u53d7\u5230\u9650\u5236\u3002\u5982\u679c\u60a8\u5728\u53d7\u9650\u4ee4\u724c\u6c99\u7bb1\u4e2d\uff0c\u662f\u5426\u53ef\u4ee5\u83b7\u5f97\u901a\u8fc7\u6240\u6709\u68c0\u67e5\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u6709\u6548\u9003\u79bb\u6c99\u7bb1\u7684\u5b50\u4ee3\u7684\u65e0\u9650\u5236\u4ee4\u724c\uff1f\u4e0d\uff0c\u60a8\u4e0d\u80fd\uff0c\u7cfb\u7edf\u786e\u4fdd\u5728\u5206\u914d\u53d7\u9650\u4ee4\u724c\u65f6\u5144\u5f1f\u4ee4\u724c\u68c0\u67e5\u5931\u8d25\uff0c\u800c\u662f\u786e\u4fdd\u7236/\u5b50\u68c0\u67e5\u662f\u5c06\u5f3a\u5236\u6267\u884c\u7684\u68c0\u67e5\u3002\u5982\u679c\u60a8\u67e5\u770b\u5185\u6838\u51fd\u6570SepFilterToken\uff0c\u5c31\u4f1a\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u5c06\u73b0\u6709\u5c5e\u6027\u4ece\u7236\u4ee4\u724c\u590d\u5236\u5230\u65b0\u7684\u53d7\u9650\u4ee4\u724c\u65f6\uff0c\u5c06\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u3002\n\u901a\u8fc7\u8bbe\u7f6e\u65b0\u7684\u53d7\u9650\u4ee4\u724c\u7684\u7236\u4ee4\u724cID\uff0c\u5b83\u786e\u4fdd\u53ea\u6709\u521b\u5efa\u53d7\u9650\u4ee4\u724c\u7684\u8fdb\u7a0b\u624d\u80fd\u4e3a\u5b50\u8fdb\u7a0b\u4f7f\u7528\u5b83\uff0c\u56e0\u4e3a\u4ee4\u724cID\u5bf9\u4e8e\u4ee4\u724c\u5bf9\u8c61\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u552f\u4e00\u7684\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u66f4\u6539\u7236\u4ee4\u724cID\uff0c\u5144\u5f1f\u68c0\u67e5\u88ab\u7834\u574f\u3002\n\u7136\u800c\uff0c\u5f53\u6211\u5728\u505a\u4e00\u4e9b\u6d4b\u8bd5\u6765\u9a8c\u8bc1Windows101909\u4e0a\u7684\u4ee4\u724c\u5206\u914d\u884c\u4e3a\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\u3002\u65e0\u8bba\u6211\u521b\u5efa\u4e86\u4ec0\u4e48\u53d7\u9650\u4ee4\u724c\uff0c\u6211\u90fd\u65e0\u6cd5\u4f7f\u8d4b\u503c\u5931\u8d25\u3002\u518d\u6b21\u67e5\u770bSepFilterToken\uff0c\u6211\u53d1\u73b0\u4ee3\u7801\u5df2\u7ecf\u66f4\u6539\u3002\n\u5185\u6838\u4ee3\u7801\u73b0\u5728\u53ea\u662f\u4ece\u65e7\u4ee4\u724c\u76f4\u63a5\u590d\u5236\u7236\u4ee4\u724cID\u3002\u8fd9\u5b8c\u5168\u6253\u7834\u4e86\u68c0\u67e5\uff0c\u56e0\u4e3a\u65b0\u7684\u6c99\u7bb1\u8fdb\u7a0b\u6709\u4e00\u4e2a\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u88ab\u8ba4\u4e3a\u662f\u684c\u9762\u4e0a\u4efb\u4f55\u5176\u4ed6\u4ee4\u724c\u7684\u5144\u5f1f\u3002\n\u5047\u8bbe\u6211\u53ef\u4ee5\u7ed5\u8fc7\u5df2\u7ecf\u5230\u4f4d\u7684\u5176\u4ed63\u4e2a\u5b50\u8fdb\u7a0b\u7f13\u89e3\uff0c\u90a3\u4e48\u8fd9\u4e00\u884c\u66f4\u6539\u5c31\u8db3\u4ee5\u7a81\u7834\u53d7\u9650\u4ee4\u724c\u6c99\u7bb1\u3002\u8ba9\u6211\u4eec\u6765\u7ecf\u5386\u4e00\u4e0b\u4e3a\u505a\u5230\u8fd9\u4e00\u70b9\u800c\u627f\u62c5\u7684\u8003\u9a8c\u548c\u78e8\u96be\u3002\n\u6211\u60f3\u51fa\u7684\u6700\u7ec8\u6c99\u76d2\u9003\u9038\u662f\u76f8\u5f53\u590d\u6742\u7684\uff0c\u8fd9\u4e5f\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u65b9\u6cd5\u3002\u7136\u800c\uff0cWindows\u7684\u590d\u6742\u6027\u610f\u5473\u7740\u5728\u6211\u4eec\u7684\u94fe\u4e2d\u5f88\u96be\u627e\u5230\u53ef\u4f9b\u5229\u7528\u7684\u66ff\u4ee3\u539f\u8bed\u3002\n\u8ba9\u6211\u4eec\u4ece\u5c1d\u8bd5\u83b7\u53d6\u5408\u9002\u7684\u8bbf\u95ee\u4ee4\u724c\u6765\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u5f00\u59cb\u3002\u4ee4\u724c\u9700\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\uff1a\n\u4ee4\u724c\u5177\u6709\u7b49\u4e8e\u6c99\u7bb1IL\u7684IL\uff0c\u6216\u8005\u662f\u53ef\u5199\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u964d\u4f4eIL\u7ea7\u522b\u3002\n\u8bbf\u95ee\u4ee4\u724c\u662f\u53ef\u4fdd\u62a4\u7684\u5bf9\u8c61\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u6709\u8db3\u591f\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5219\u53ef\u4ee5\u6253\u5f00\u4ee4\u724c\u7684\u53e5\u67c4\u3002\u4f46\u662f\uff0c\u8bbf\u95ee\u4ee4\u724c\u4e0d\u662f\u7531\u540d\u79f0\u5f15\u7528\u7684\uff0c\u76f8\u53cd\uff0c\u8981\u6253\u5f00\u4ee4\u724c\uff0c\u60a8\u9700\u8981\u62e5\u6709\u5bf9\u8fdb\u7a0b\u6216\u6a21\u62df\u7ebf\u7a0b\u7684\u8bbf\u95ee\u6743\u9650\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528NtObjectManager PowerShell\u6a21\u5757\u901a\u8fc7Get-AccessibleToken\u547d\u4ee4\u67e5\u627e\u53ef\u8bbf\u95ee\u7684\u4ee4\u724c\u3002\n\u8be5\u811a\u672c\u83b7\u5f97\u5728\u6211\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u6bcf\u4e2a\u6c99\u7bb1Chrome\u8fdb\u7a0b\u7684\u53e5\u67c4(\u663e\u7136\u662f\u9996\u5148\u542f\u52a8Chrome)\uff0c\u7136\u540e\u4f7f\u7528\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u8bbf\u95ee\u4ee4\u724c\u6765\u786e\u5b9a\u6211\u4eec\u53ef\u4ee5\u6253\u5f00\u54ea\u4e9b\u5176\u4ed6\u4ee4\u724c\u8fdb\u884cToken_Duplicate\u8bbf\u95ee\u3002\u68c0\u67e5TOKEN_DUPLICATE\u4ee5\u7528\u4f5c\u65b0\u8fdb\u7a0b\u4e2d\u7684\u4ee4\u724c\u7684\u539f\u56e0\u662f\uff0c\u6211\u4eec\u9700\u8981\u5236\u4f5c\u4ee4\u724c\u7684\u526f\u672c\uff0c\u56e0\u4e3a\u4e24\u4e2a\u8fdb\u7a0b\u4e0d\u80fd\u4f7f\u7528\u76f8\u540c\u7684\u8bbf\u95ee\u4ee4\u724c\u5bf9\u8c61\u3002\u8bbf\u95ee\u68c0\u67e5\u4f1a\u8003\u8651\u8c03\u7528\u8fdb\u7a0b\u662f\u5426\u5177\u6709\u5bf9\u76ee\u6807\u8fdb\u7a0b\u7684PROCESS_QUERY_LIMITED_INFORMATION\u8bbf\u95ee\u6743\u9650\uff0c\u8fd9\u662f\u6253\u5f00\u4ee4\u724c\u7684\u5148\u51b3\u6761\u4ef6\u3002\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u76f8\u5f53\u6570\u91cf\u7684\u7ed3\u679c\uff0c\u8d85\u8fc7100\u4e2a\u6761\u76ee\u3002\n\u7136\u800c\uff0c\u8fd9\u4e2a\u6570\u5b57\u5177\u6709\u6b3a\u9a97\u6027\uff0c\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u7684\u4e00\u4e9b\u4ee4\u724c\u51e0\u4e4e\u80af\u5b9a\u4f1a\u6bd4\u5f53\u524d\u4ee4\u724c\u88ab\u6c99\u7bb1\u66f4\u591a\u5730\u88ab\u6c99\u7bb1\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u65e0\u6c99\u7bb1\u7684\u53ef\u8bbf\u95ee\u4ee4\u724c\u3002\u5176\u6b21\uff0c\u867d\u7136\u6709\u5f88\u591a\u53ef\u8bbf\u95ee\u7684\u4ee4\u724c\uff0c\u4f46\u8fd9\u5f88\u53ef\u80fd\u662f\u5c11\u6570\u8fdb\u7a0b\u80fd\u591f\u8bbf\u95ee\u5927\u91cf\u4ee4\u724c\u7684\u4ea7\u7269\u3002\u6211\u4eec\u5c06\u628a\u5b83\u8fc7\u6ee4\u5230\u53ea\u6709Chrome\u8fdb\u7a0b\u7684\u547d\u4ee4\u884c\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u975e\u6c99\u7bb1\u4ee4\u724c\u3002\n\u5728\u6240\u6709\u53ef\u80fd\u7684Chrome\u8fdb\u7a0b\u4e2d\uff0c\u53ea\u6709GPU\u8fdb\u7a0b\u548cAudio\u5b9e\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u975e\u6c99\u7bb1\u4ee4\u724c\u3002\u8fd9\u5e94\u8be5\u4e0d\u4f1a\u8ba9\u4eba\u5927\u5403\u4e00\u60ca\u3002\u7531\u4e8e\u8c03\u7528\u7cfb\u7edf\u670d\u52a1\u4ee5\u4f7f\u8fd9\u4e9b\u8fdb\u7a0b\u6b63\u5e38\u5de5\u4f5c\u7684\u9650\u5236\uff0c\u6e32\u67d3\u5668\u8fdb\u7a0b\u6bd4GPU\u6216\u97f3\u9891\u6c99\u7bb1\u7684\u9501\u5b9a\u7a0b\u5ea6\u8981\u9ad8\u5f97\u591a\u3002\u8fd9\u786e\u5b9e\u610f\u5473\u7740\u4eceRCE\u5230\u6c99\u7bb1\u8f6c\u4e49\u7684\u53ef\u80fd\u6027\u5927\u5927\u964d\u4f4e\uff0c\u56e0\u4e3a\u5927\u591a\u6570RCE\u53d1\u751f\u5728\u5448\u73b0HTML/JS\u5185\u5bb9\u65f6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cGPU\u9519\u8bef\u786e\u5b9e\u5b58\u5728\uff0c\u4f8b\u5982\uff0c\u8fd9\u4e2a\u9519\u8bef\u5c31\u662f\u6d1b\u57fa\u54c8\u7279\u57282016\u5e74Pwn2Own\u5927\u4f1a\u4e0a\u4f7f\u7528\u7684\u4e00\u4e2a\u9519\u8bef\u3002\n\u8ba9\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u5982\u4f55\u6446\u8131GPU\u8fdb\u7a0b\u6c99\u7bb1\u3002\u56e0\u4e3a\u6211\u6ca1\u6709GPU RCE\u53ef\u7528\uff0c\u6240\u4ee5\u6211\u5c06\u53ea\u5411\u8fdb\u7a0b\u4e2d\u6ce8\u5165\u4e00\u4e2aDLL\u6765\u8fd0\u884c\u8f6c\u4e49\u3002\u8fd9\u5e76\u4e0d\u50cf\u542c\u8d77\u6765\u90a3\u4e48\u7b80\u5355\uff0c\u4e00\u65e6GPU\u8fdb\u7a0b\u542f\u52a8\uff0c\u8be5\u8fdb\u7a0b\u5c31\u88ab\u9501\u5b9a\u4e3a\u53ea\u52a0\u8f7dMicrosoft\u7b7e\u540d\u7684DLL\u3002\u6211\u5bf9KnownDlls\u4f7f\u7528\u4e86\u4e00\u4e2a\u6280\u5de7\uff0c\u5c06DLL\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d(\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0)\u3002\n\u4e22\u5f03\u4ee4\u724c\u7684IL\u4ee5\u5339\u914d\u5f53\u524d\u4ee4\u724c(\u5bf9\u4e8eGPU\uff0c\u8fd9\u662f\u4f4eIL)\u3002\n\u5373\u4f7f\u662f\u5728\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u4e5f\u6709\u95ee\u9898\u3002\u83b7\u53d6\u65e0\u9650\u5236\u4ee4\u724c\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u6253\u5f00\u7236\u8fdb\u7a0b\u7684\u4ee4\u724c\uff0c\u7236\u8fdb\u7a0b\u662fChrome\u6d4f\u89c8\u5668\u7684\u4e3b\u8fdb\u7a0b\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u67e5\u770bGPU\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7684\u4ee4\u724c\u5217\u8868\uff0c\u60a8\u4f1a\u53d1\u73b0\u4e0d\u5305\u62ec\u4e3bChrome\u6d4f\u89c8\u5668\u8fdb\u7a0b\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u8fd9\u662f\u6545\u610f\u7684\uff0c\u56e0\u4e3a\u5728\u62a5\u544a\u5185\u6838\u4e2d\u7684\u8fd9\u4e2a\u9519\u8bef\u540e\uff0c\u6211\u610f\u8bc6\u5230GPU\u8fdb\u7a0b\u6c99\u7bb1\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\u8fdb\u7a0b\u7684\u4ee4\u724c\u3002\u6709\u4e86\u8fd9\u4e2a\u4ee4\u724c\uff0c\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53d7\u9650\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u5c06\u901a\u8fc7\u540c\u7ea7\u68c0\u67e5\u6765\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u66f4\u591a\u8bbf\u95ee\u6743\u9650\u7684\u65b0\u8fdb\u7a0b\uff0c\u5e76\u9000\u51fa\u6c99\u7bb1\u3002\u4e3a\u4e86\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4fee\u6539\u4e86\u8fdb\u7a0b\u4ee4\u724c\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4ee5\u963b\u6b62\u8f83\u4f4e\u7684IL\u8fdb\u7a0b\u4e3aTOKEN_DUPLICATE\u8bbf\u95ee\u6253\u5f00\u4ee4\u724c\u3002\u8bf7\u53c2\u9605HardenTokenIntegerityLevelPolicy\u3002\u5728\u6b64\u4fee\u590d\u4e4b\u524d\uff0c\u60a8\u4e0d\u9700\u8981\u5185\u6838\u4e2d\u7684bug\u5c31\u53ef\u4ee5\u9003\u79bbChrome GPU\u6c99\u7bb1\uff0c\u81f3\u5c11\u53ef\u4ee5\u8fbe\u5230\u6b63\u5e38\u7684\u4f4eIL\u4ee4\u724c\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u6ca1\u6709\u7b80\u5355\u7684\u8def\u5f84\u53ef\u7528\uff0c\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u7b80\u5355\u5730\u679a\u4e3e\u8fdb\u7a0b\uff0c\u5e76\u627e\u5230\u7b26\u5408\u6211\u4eec\u6807\u51c6\u7684\u8fdb\u7a0b\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528NtGetNextProcess\u7cfb\u7edf\u8c03\u7528\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6b63\u5982\u6211\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0(\u5173\u4e8e\u7a0d\u540e\u6211\u4eec\u5c06\u8ba8\u8bba\u7684\u4e3b\u9898)\u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u3002\u6211\u4eec\u4e3aPROCESS_QUERY_LIMITED_INFORMATION\u8bbf\u95ee\u6253\u5f00\u6240\u6709\u8fdb\u7a0b\uff0c\u7136\u540e\u4e3aTOKEN_DUPLICATE\u548cTOKEN_QUERY\u3002\u7136\u540e\uff0c\u5728\u7ee7\u7eed\u6267\u884c\u6b65\u9aa42\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4ee4\u724c\u4ee5\u786e\u4fdd\u5176\u4e0d\u53d7\u9650\u5236\u3002\n\u4e3a\u4e86\u590d\u5236\u4ee4\u724c\uff0c\u6211\u4eec\u8c03\u7528DuplicateTokenEx\u5e76\u8bf7\u6c42\u4e00\u4e2a\u4e3b\u4ee4\u724c\uff0c\u5c06TOKEN_ALL_ACCESS\u4f5c\u4e3a\u6240\u9700\u7684\u8bbf\u95ee\u6743\u9650\u8fdb\u884c\u4f20\u9012\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u964d\u4f4eIL\u65f6\uff0c\u4eceSetTokenInformation\u5f97\u5230ERROR_ACCESS_DENIED\u3002\u8fd9\u662f\u56e0\u4e3a\u5fae\u8f6f\u5728Windows10\u4e2d\u6dfb\u52a0\u4e86\u6c99\u7bb1\uff0c\u5e76\u91cd\u65b0\u79fb\u690d\u5230\u6240\u6709\u652f\u6301\u7684\u64cd\u4f5c\u7cfb\u7edf(\u5305\u62ecWindows7)\u3002\u4ee5\u4e0b\u4ee3\u7801\u662f\u5f15\u5165\u7f13\u89e3\u7684NtDuplicateToken\u4e2d\u7684\u4e00\u6bb5\u4ee3\u7801\u3002\n\u5f53\u60a8\u590d\u5236\u4ee4\u724c\u65f6\uff0c\u5185\u6838\u4f1a\u68c0\u67e5\u8c03\u7528\u65b9\u662f\u5426\u88ab\u6c99\u7bb1\u4fdd\u62a4\u3002\u5982\u679c\u5185\u6838\u88ab\u6c99\u7bb1\u4fdd\u62a4\uff0c\u5219\u68c0\u67e5\u8981\u590d\u5236\u7684\u4ee4\u724c\u662f\u5426\u6bd4\u8c03\u7528\u65b9\u53d7\u5230\u7684\u9650\u5236\u66f4\u5c11\u3002\u5982\u679c\u9650\u5236\u8f83\u5c11\uff0c\u5219\u4ee3\u7801\u5c06\u6240\u9700\u7684\u8bbf\u95ee\u9650\u5236\u4e3aTOKEN_READ\u548cTOKEN_EXECUTE\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u8bf7\u6c42\u8bf8\u5982TOKEN_ADJUST_DEFAULT\u8fd9\u6837\u7684\u5199\u8bbf\u95ee\uff0c\u5b83\u5c06\u5728\u4ece\u590d\u5236\u8c03\u7528\u8fd4\u56de\u7ed9\u6211\u4eec\u7684\u53e5\u67c4\u4e0a\u88ab\u5220\u9664\u3002\u53cd\u8fc7\u6765\uff0c\u8fd9\u5c06\u963b\u6b62\u6211\u4eec\u51cf\u5c11IL\uff0c\u4ee5\u4fbf\u5c06\u5176\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u3002\n\u8fd9\u4f3c\u4e4e\u7ed3\u675f\u4e86\u6211\u4eec\u7684\u5229\u7528\u94fe\u3002\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u5199\u5165\u4ee4\u724c\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u51cf\u5c11\u4ee4\u724c\u7684IL\uff0c\u8fd9\u4f1a\u963b\u6b62\u6211\u4eec\u5206\u914d\u5b83\u3002\u4f46\u662f\u5b9e\u73b0\u6709\u4e00\u4e2a\u5f88\u5c0f\u7684\u7f3a\u9677\uff0c\u590d\u5236\u64cd\u4f5c\u4f1a\u7ee7\u7eed\u5b8c\u6210\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8bbf\u95ee\u6743\u9650\u6709\u9650\u7684\u53e5\u67c4\u3002\u521b\u5efa\u65b0\u7684\u4ee4\u724c\u5bf9\u8c61\u65f6\uff0c\u9ed8\u8ba4\u5b89\u5168\u6027\u6388\u4e88\u8c03\u7528\u65b9\u5bf9\u4ee4\u724c\u5bf9\u8c61\u7684\u5b8c\u5168\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u83b7\u5f97\u65b0\u4ee4\u724c\u7684\u53e5\u67c4\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u666e\u901a\u7684DuplicateHandle API\u5c06\u5176\u8f6c\u6362\u4e3a\u5b8c\u5168\u53ef\u5199\u7684\u53e5\u67c4\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u8fd9\u662f\u5426\u662f\u6545\u610f\u7684\uff0c\u4e0d\u8fc7\u5e94\u8be5\u6ce8\u610f\uff0c\u5982\u679c\u65b0\u4ee4\u724c\u4e0d\u53d7\u9650\u5236\uff0cCreateRestrictedToken\u4e2d\u7684\u7c7b\u4f3c\u68c0\u67e5\u5c06\u8fd4\u56de\u9519\u8bef\u3002\u65e0\u8bba\u5728\u54ea\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6ee5\u7528\u8fd9\u4e00\u9519\u8bef\u7279\u6027\u6765\u83b7\u5f97\u4e00\u4e2a\u53ef\u5199\u7684\u65e0\u9650\u5236\u4ee4\u724c\uff0c\u4ee5\u4f7f\u7528\u6b63\u786e\u7684IL\u5c06\u5176\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u4e0d\u53d7\u9650\u5236\u7684\u4ee4\u724c\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528CreateProcessAsUser\u6765\u521b\u5efa\u6211\u4eec\u7684\u65b0\u6d41\u7a0b\u3002\u4f46\u4e0d\u4f1a\u90a3\u4e48\u5feb\uff0c\u56e0\u4e3aGPU\u8fdb\u7a0b\u4ecd\u5728\u4e00\u4e2a\u53d7\u9650\u7684Job\u5bf9\u8c61\u4e2d\u8fd0\u884c\uff0c\u8be5\u5bf9\u8c61\u4f1a\u963b\u6b62\u521b\u5efa\u65b0\u8fdb\u7a0b\u3002\u5927\u7ea65\u5e74\u524d\uff0c\u6211\u5728\u6211\u7684\u201cIn-Console-able\u201d\u535a\u5ba2\u6587\u7ae0\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86Job\u5bf9\u8c61\u5982\u4f55\u963b\u6b62\u65b0\u8fdb\u7a0b\u7684\u521b\u5efa\u3002\u6211\u4eec\u53ef\u4ee5\u4e0d\u4f7f\u7528\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u7684\u76f8\u540c\u9519\u8bef\u6765\u8f6c\u4e49\u4f5c\u4e1a\u5bf9\u8c61\u5417\uff1f\u5728Windows8.1\u4e0a\uff0c\u60a8\u53ef\u80fd\u53ef\u4ee5(\u5c3d\u7ba1\u6211\u627f\u8ba4\u6211\u6ca1\u6709\u6d4b\u8bd5\u8fc7)\uff0c\u4f46\u662f\u5728Windows10\u4e0a\uff0c\u6709\u4e24\u4ef6\u4e8b\u963b\u788d\u4e86\u6211\u4eec\u4f7f\u7528\u5b83\uff1a\nMicrosoft\u66f4\u6539\u4e86\u4f5c\u4e1a\u5bf9\u8c61\u4ee5\u652f\u6301\u8f85\u52a9\u8fdb\u7a0b\u8ba1\u6570\u5668\u3002\u5982\u679c\u60a8\u62e5\u6709SeTcbPrivilege\uff0c\u60a8\u53ef\u4ee5\u5411NtCreateUserProcess\u4f20\u9012\u4e00\u4e2a\u6807\u5fd7\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u4ecd\u5728Job\u5185\u7684\u65b0\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u4e0d\u8ba1\u5165\u8fdb\u7a0b\u8ba1\u6570\u3002\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u4f7f\u7528\u5b83\u6765\u6d88\u9664\u8f6c\u4e49\u4f5c\u4e1a\u7684\u8981\u6c42\u3002\u56e0\u4e3a\u6211\u4eec\u5728\u6c99\u7bb1\u4e2d\u6ca1\u6709SeTcbPrivilege\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6b64\u529f\u80fd\u3002\nMicrosoft\u5411\u4ee4\u724c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u6807\u5fd7\uff0c\u4ee5\u9632\u6b62\u5b83\u4eec\u88ab\u7528\u4e8e\u65b0\u8fdb\u7a0b\u3002\u6b64\u6807\u5fd7\u7531Chrome\u5728\u6240\u6709\u6c99\u7bb1\u8fdb\u7a0b\u4e0a\u8bbe\u7f6e\uff0c\u4ee5\u9650\u5236\u65b0\u7684\u5b50\u8fdb\u7a0b\u3002\u5373\u4f7f\u6ca1\u6709\u20181\u2019\uff0c\u8be5\u6807\u5fd7\u4e5f\u4f1a\u963b\u6b62\u6ee5\u7528\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u6765\u751f\u6210\u65b0\u8fdb\u7a0b\u3002\n\u8fd9\u4e24\u4e2a\u529f\u80fd\u7684\u7ec4\u5408\u4f1a\u963b\u6b62\u901a\u8fc7\u6ee5\u7528\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u5728\u5f53\u524d\u4f5c\u4e1a\u4e4b\u5916\u751f\u6210\u65b0\u8fdb\u7a0b\u3002\u6211\u4eec\u9700\u8981\u60f3\u51fa\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u907f\u5f00Job\u5bf9\u8c61\u9650\u5236\uff0c\u540c\u65f6\u7ed5\u8fc7\u5b50\u8fdb\u7a0b\u9650\u5236\u6807\u5fd7\u3002\nJob\u5bf9\u8c61\u662f\u4ece\u7236\u5bf9\u8c61\u7ee7\u627f\u5230\u5b50\u5bf9\u8c61\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u627e\u5230GPU\u8fdb\u7a0b\u53ef\u4ee5\u63a7\u5236\u7684Job\u5bf9\u8c61\u4e4b\u5916\u7684\u8fdb\u7a0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8be5\u8fdb\u7a0b\u7528\u4f5c\u65b0\u7684\u7236\u8fdb\u7a0b\u5e76\u9000\u51faJob\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u81f3\u5c11\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u68c0\u67e5GPU\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9b\u8fdb\u7a0b\uff0c\u5b83\u53ea\u80fd\u6253\u5f00\u81ea\u5df1\u3002\n\u5f00\u653e\u672c\u8eab\u4e0d\u4f1a\u6709\u591a\u5927\u7528\u5904\uff0c\u6211\u4eec\u4e0d\u80fd\u6307\u671b\u5e78\u8fd0\u5730\u5904\u7406\u4e00\u4e2a\u6070\u597d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u800c\u8fd9\u4e2a\u8fdb\u7a0b\u65e2\u53ef\u4ee5\u8bbf\u95ee\uff0c\u53c8\u4e0d\u80fd\u8fd0\u884c\u4f5c\u4e1a\u3002\u6211\u4eec\u9700\u8981\u81ea\u5df1\u521b\u9020\u8fd0\u6c14\u3002\n\u6211\u6ce8\u610f\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u6709\u4e00\u4e2a\u5c0f\u7684\u7ade\u4e89\u6761\u4ef6\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u65b0\u7684Chrome\u6c99\u7bb1\u8fdb\u7a0b\u3002\u9996\u5148\u521b\u5efa\u8fdb\u7a0b\uff0c\u7136\u540e\u5e94\u7528\u4f5c\u4e1a\u5bf9\u8c61\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba9Chrome\u6d4f\u89c8\u5668\u751f\u6210\u4e00\u4e2a\u65b0\u7684GPU\u8fdb\u7a0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5e94\u7528Job\u5bf9\u8c61\u4e4b\u524d\u5c06\u5176\u7528\u4f5c\u7236\u8fdb\u7a0b\u3002GPU\u8fdb\u7a0b\u7684\u5904\u7406\u751a\u81f3\u652f\u6301\u5728\u8fdb\u7a0b\u5d29\u6e83\u65f6\u91cd\u65b0\u751f\u6210\u8fdb\u7a0b\u3002\u7136\u800c\uff0c\u6211\u65e0\u6cd5\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff0c\u8ba9\u4e00\u4e2a\u65b0\u7684GPU\u8fdb\u7a0b\u5728\u4e0d\u7ec8\u6b62\u5f53\u524d\u8fdb\u7a0b\u7684\u60c5\u51b5\u4e0b\u4ea7\u751f\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u8ba9\u4ee3\u7801\u8fd0\u884c\u8db3\u591f\u957f\u7684\u65f6\u95f4\u6765\u5229\u7528\u7ade\u4e89\u3002\n\u76f8\u53cd\uff0c\u6211\u51b3\u5b9a\u96c6\u4e2d\u7cbe\u529b\u5bfb\u627e\u4e00\u4e2aRPC\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5c06\u5728Job\u4e4b\u5916\u521b\u5efa\u4e00\u4e2a\u65b0\u6d41\u7a0b\u3002\u6709\u76f8\u5f53\u591a\u7684RPC\u670d\u52a1\u4ee5\u521b\u5efa\u8fdb\u7a0b\u4e3a\u4e3b\u8981\u76ee\u6807\uff0c\u800c\u5176\u4ed6\u670d\u52a1\u5219\u4ee5\u521b\u5efa\u8fdb\u7a0b\u4e3a\u526f\u4f5c\u7528\u3002\u4f8b\u5982\uff0c\u6211\u5df2\u7ecf\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8bb0\u5f55\u4e86\u4e8c\u7ea7\u767b\u5f55\u670d\u52a1\uff0c\u5176\u4e2dRPC\u670d\u52a1\u7684\u5168\u90e8\u76ee\u7684\u662f\u751f\u6210\u65b0\u8fdb\u7a0b\u3002\n\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u6709\u4e00\u70b9\u5c0f\u7f3a\u9677\uff0c\u7279\u522b\u662f\u4ee4\u724c\u4e2d\u7684\u5b50\u8fdb\u7a0b\u7f13\u89e3\u6807\u5fd7\u662f\u8de8\u6a21\u62df\u8fb9\u754c\u7ee7\u627f\u7684\u3002\u7531\u4e8e\u4f7f\u7528\u6a21\u62df\u4ee4\u724c\u4f5c\u4e3a\u65b0\u8fdb\u7a0b\u7684\u57fa\u7840\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u56e0\u6b64\u4efb\u4f55\u65b0\u8fdb\u7a0b\u90fd\u5c06\u88ab\u963b\u585e\u3002\u4f46\u662f\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u672a\u8bbe\u7f6e\u6807\u5fd7\u7684\u65e0\u9650\u5236\u4ee4\u724c\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u65e0\u9650\u5236\u4ee4\u724c\u6765\u521b\u5efa\u53ef\u4ee5\u5728RPC\u8c03\u7528\u671f\u95f4\u6a21\u62df\u7684\u53d7\u9650\u4ee4\u724c\uff0c\u5e76\u4e14\u53ef\u4ee5\u7ed5\u8fc7\u5b50\u8fdb\u7a0b\u7f13\u89e3\u6807\u5fd7\u3002\n\u6211\u5c1d\u8bd5\u5217\u51fa\u4e86\u54ea\u4e9b\u5df2\u77e5\u7684\u670d\u52a1\u53ef\u4ee5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\uff0c\u6211\u5c06\u8fd9\u4e9b\u670d\u52a1\u6c47\u603b\u5728\u4e0b\u8868\u4e2d\uff1a\n\u8be5\u8868\u5e76\u4e0d\u8be6\u5c3d\uff0c\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u5141\u8bb8\u521b\u5efa\u8fdb\u7a0b\u7684RPC\u670d\u52a1\u3002\u6b63\u5982\u6211\u4eec\u5728\u8868\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u4ea7\u751f\u4e8c\u7ea7\u767b\u5f55\u3001WMI\u548cBITS\u7b49\u8fdb\u7a0b\u7684\u4f17\u6240\u5468\u77e5\u7684RPC\u670d\u52a1\u4e0d\u80fd\u4ece\u6211\u4eec\u7684\u6c99\u7bb1\u7ea7\u522b\u8bbf\u95ee\u3002UAC\u670d\u52a1\u662f\u53ef\u8bbf\u95ee\u7684\uff0c\u6b63\u5982\u6211\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u4e2d\u6240\u63cf\u8ff0\u7684\uff0c\u5b58\u5728\u4e00\u79cd\u901a\u8fc7\u6ee5\u7528\u8c03\u8bd5\u5bf9\u8c61\u6765\u6ee5\u7528\u8be5\u670d\u52a1\u6765\u8fd0\u884c\u4efb\u610f\u7279\u6743\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u521b\u5efa\u65b0\u7684UAC\u8fdb\u7a0b\u65f6\uff0c\u8be5\u670d\u52a1\u5c06\u7236\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u8c03\u7528\u8005\u8fdb\u7a0b\u3002\u7531\u4e8e\u7ee7\u627f\u4e86Job\u5bf9\u8c61\uff0c\u56e0\u6b64\u65b0\u8fdb\u7a0b\u5c06\u88ab\u963b\u6b62\u3002\n\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u670d\u52a1\u662fDCOM\u6fc0\u6d3b\u5668\u3002\u8fd9\u662f\u8d1f\u8d23\u542f\u52a8\u8fdb\u7a0b\u5916COM\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u53ef\u4ee5\u4ece\u6211\u4eec\u7684\u6c99\u7bb1\u7ea7\u522b\u8fdb\u884c\u8bbf\u95ee\u3002\u5b83\u8fd8\u5c06\u6240\u6709COM\u670d\u52a1\u5668\u4f5c\u4e3a\u670d\u52a1\u8fdb\u7a0b\u7684\u5b50\u7ea7\u542f\u52a8\uff0c\u8fd9\u610f\u5473\u7740\u4f5c\u4e1a\u5bf9\u8c61\u4e0d\u4f1a\u88ab\u7ee7\u627f\u3002\u770b\u8d77\u6765\u5f88\u7406\u60f3\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u4e3a\u4e86\u4f7fDCOM Activator\u6709\u7528\uff0c\u6211\u4eec\u9700\u8981\u6c99\u7bb1\u53ef\u4ee5\u521b\u5efa\u7684\u8fdb\u7a0b\u5916COM\u670d\u52a1\u5668\u3002\u6b64\u5bf9\u8c61\u5fc5\u987b\u6ee1\u8db3\u4e00\u7ec4\u6761\u4ef6\uff1a\n\u670d\u52a1\u5668\u4e0d\u80fd\u4f5c\u4e3a\u4ea4\u4e92\u5f0f\u7528\u6237(\u5c06\u4ece\u6c99\u7bb1\u4e2d\u6d3e\u751f\u51fa\u6765)\u6216\u5728\u670d\u52a1\u8fdb\u7a0b\u5185\u90e8\u8fd0\u884c\u3002\n\u6211\u4eec\u4e0d\u5fc5\u62c5\u5fc3\u6807\u51c63\uff0cGPU\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7cfb\u7edf\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u575a\u6301\u4f7f\u7528\u9884\u5148\u5b89\u88c5\u7684COM\u670d\u52a1\u5668\u3002\u5982\u679c\u6211\u4eec\u5728\u521b\u5efa\u540e\u4e0d\u80fd\u8bbf\u95eeCOM\u670d\u52a1\u5668\uff0c\u4e5f\u4e0d\u8981\u7d27\uff0c\u6211\u4eec\u6240\u9700\u8981\u7684\u5c31\u662f\u5728\u4f5c\u4e1a\u4e4b\u5916\u542f\u52a8COM\u670d\u52a1\u5668\u8fdb\u7a0b\u7684\u6743\u9650\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u52ab\u6301\u5b83\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528OleViewDotNet\u548cSelect-ComAccess\u547d\u4ee4\u67e5\u627e\u53ef\u8bbf\u95ee\u7684COM\u670d\u52a1\u5668\u3002\n\u5728\u9ed8\u8ba4\u5b89\u88c5\u7684Windows 10\u4e0a\uff0c\u6211\u4eec\u67096\u4e2a\u5019\u9009\u8005\u3002\u8bf7\u6ce8\u610f\uff0c\u6700\u540e4\u4e2a\u90fd\u5728DLL\u4e2d\uff0c\u4f46\u662f\u8fd9\u4e9b\u7c7b\u88ab\u6ce8\u518c\u4e3a\u5728DLL\u4ee3\u7406\u7a0b\u5e8f\u5185\u8fd0\u884c\uff0c\u56e0\u6b64\u4ecd\u7136\u53ef\u4ee5\u5728\u8fdb\u7a0b\u5916\u4f7f\u7528\u3002\u6211\u51b3\u5b9a\u4f7f\u7528COREDPUSSVR\u4e2d\u7684\u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u5b83\u662f\u552f\u4e00\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u901a\u7528\u7684DLLHOST\uff0c\u56e0\u6b64\u66f4\u5bb9\u6613\u627e\u5230\u3002\u6b64COM\u670d\u52a1\u5668\u7684\u542f\u52a8\u5b89\u5168\u6027\u6388\u4e88Everyone\u548c\u6240\u6709AppContainer\u5305\u672c\u5730\u6fc0\u6d3b\u6743\u9650\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u53e6\u5916\uff0c\u5c3d\u7ba1\u6709\u4e24\u4e2a\u7c7b\u6ce8\u518c\u4e86COREDPUSSVR\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u6709\u4e00\u4e2a\u4ee5417976b7\u5f00\u5934\u7684\u7c7b\u662f\u7531\u53ef\u6267\u884c\u6587\u4ef6\u6ce8\u518c\u7684\u3002\u521b\u5efa\u53e6\u4e00\u4e2a\u7c7b\u5c06\u542f\u52a8\u670d\u52a1\u5668\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4f46\u662f\u7c7b\u521b\u5efa\u5c06\u6302\u8d77\uff0c\u7b49\u5f85\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u7684\u7c7b\u3002\n\u8981\u542f\u52a8\u670d\u52a1\u5668\uff0c\u60a8\u53ef\u4ee5\u5728\u6a21\u62df\u5b50\u8fdb\u7a0b\u7f13\u89e3\u65e0\u6807\u5fd7\u53d7\u9650\u4ee4\u724c\u65f6\u8c03\u7528CoCreateInstance\u3002\u60a8\u8fd8\u9700\u8981\u4f20\u9012CLSCTX_ENABLE_COWAKING\u4ee5\u4f7f\u7528\u6a21\u62df\u4ee4\u724c\u6fc0\u6d3b\u670d\u52a1\u5668\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u4f7f\u7528\u8fdb\u7a0b\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u8bbe\u7f6e\u5b50\u8fdb\u7a0b\u7f13\u89e3\u6807\u5fd7\uff0c\u56e0\u6b64\u4f1a\u963b\u6b62\u8fdb\u7a0b\u521b\u5efa\u3002\u8fd9\u6837\u505a\uff0c\u60a8\u4f1a\u53d1\u73b0COREDPUSSVR\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5728\u76f8\u540c\u7684\u6c99\u7bb1\u7ea7\u522b\u4e0a\u8fd0\u884c\uff0c\u4f46\u662f\u5728Job\u5bf9\u8c61\u4e4b\u5916\uff0c\u5e76\u4e14\u6ca1\u6709\u5b50\u8fdb\u7a0b\u7f13\u89e3\u3002\u6210\u529f\uff1f\n\u8fd8\u6ca1\u90a3\u4e48\u5feb\u3002\u901a\u5e38\uff0c\u65b0\u8fdb\u7a0b\u7684\u7f3a\u7701\u5b89\u5168\u6027\u57fa\u4e8e\u7528\u4e8e\u521b\u5efa\u5b83\u7684\u8bbf\u95ee\u4ee4\u724c\u5185\u7684\u7f3a\u7701DACL\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u7531\u4e8e\u67d0\u4e9b\u4e0d\u6e05\u695a\u7684\u539f\u56e0\uff0cDCOM\u6fc0\u6d3b\u5668\u5728\u8fdb\u7a0b\u4e0a\u8bbe\u7f6e\u4e86\u663e\u5f0fDACL\uff0c\u8be5DACL\u4ec5\u6388\u4e88\u7528\u6237\u3001\u7cfb\u7edf\u548c\u5f53\u524d\u767b\u5f55SID\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u4e0d\u5141\u8bb8GPU\u8fdb\u7a0b\u6253\u5f00\u65b0\u7684COM\u670d\u52a1\u5668\u8fdb\u7a0b\uff0c\u5373\u4f7f\u5b83\u5b9e\u9645\u4e0a\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5b89\u5168\u7ea7\u522b\u3002\u5982\u6b64\u63a5\u8fd1\uff0c\u5374\u53c8\u5982\u6b64\u9065\u8fdc\u3002\u6211\u5c1d\u8bd5\u4e86\u51e0\u79cd\u65b9\u6cd5\u6765\u8ba9\u4ee3\u7801\u5728COM\u670d\u52a1\u5668\u5185\u6267\u884c\uff0c\u6bd4\u5982Windows Hooks\uff0c\u4f46\u662f\u90fd\u6ca1\u6709\u660e\u663e\u7684\u6548\u679c\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u9ed8\u8ba4\u7684DACL\u4ecd\u7136\u7528\u4e8e\u8fdb\u7a0b\u542f\u52a8\u540e\u521b\u5efa\u7684\u4efb\u4f55\u7ebf\u7a0b\u3002\u6211\u4eec\u53ef\u4ee5\u6253\u5f00\u5176\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5b8c\u5168\u8bbf\u95ee\uff0c\u5e76\u4f7f\u7528S\u5c06\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u66f4\u6539\u4e3a\u91cd\u5b9a\u5411\u6267\u884c\u3002\n..", "note_en": "The Chromium sandbox on Windows has stood the test of time. It\u2019s considered one of the better sandboxing mechanisms deployed at scale without requiring elevated privileges to function. For all the good, it does have its weaknesses. The main one being the sandbox\u2019s implementation is reliant on the security of the Windows OS. Changing the behavior of Windows is out of the control of the Chromium development team. If a bug is found in the security enforcement mechanisms of Windows then the sandbox can break.\n   This blog is about a   vulnerability  introduced in Windows 10 1903 which broke some of the security assumptions that Chromium relied on to make the sandbox secure. I\u2019ll present how I used the bug to develop a chain of execution to escape the sandbox as used for the GPU Process on Chrome/Edge or the default content sandbox in Firefox. The exploitation process is also an interesting insight into the little weaknesses in Windows which in themselves do not cross a security boundary but led to a successful sandbox escape. This vulnerability was fixed in April 2020 as   CVE-2020-0981 .\n  Let\u2019s have a quick look at how the   Chromium sandbox works on Windows  before describing the bug itself. The sandbox works on the concept of least privilege by using Restricted Tokens. A Restricted Token is a feature added in Windows 2000 to reduce the access granted to a process through the modification of the Process\u2019s Access Token through the following operations:\n    Disabling groups removes the Access Token\u2019s membership, resulting in disabling access to resources secured by those groups. Removing privileges prevents the process from performing any unnecessary privileged operations. Finally, adding restricted SIDs changes the security access check process. To be granted access to a resource we need to match a security descriptor entry for both a group in our main list as well as the list of Restricted SIDs. If one of the lists of SIDs does not grant access to the resource then access will be denied.\n   Chromium also uses the Integrity Level (IL) feature added in Vista to further restrict resource access. By setting a low IL we can block write access to higher integrity resources regardless of the result of the access check.\n   Using Restricted Tokens with IL in this way allows the sandbox to limit what resources a compromised process can access and therefore the impact an RCE can have. It\u2019s especially important to block write access as that would typically grant an attacker leverage to compromise other parts of the system by writing files or registry keys.\n   Any process on Windows can create a new process with a different Token, for example by calling   CreateProcessAsUser . What stops a sandboxed process creating a new process using an unrestricted token? Windows and Chromium implement a few security mitigations to make creating a new process outside of the sandbox difficult:\n The Kernel restricts what Tokens can be assigned by an unprivileged user to a new process.\n The sandbox restrictions limit the availability of suitable access tokens to use for the new process.\n Chromium runs a sandboxed process inside a Job object which is inherited by any child processes which has a hard process quota limit of 1.\n From Windows 10, Chromium uses the Child Process Mitigation Policy to block child process creation. This is applied in addition to the Job object from 3.\n   All of these mitigations are ultimately relying on Windows to be secure. However by far the most critical is 1. Even if 2 through 4 fail, in theory we shouldn\u2019t be able to assign a more privileged access token to the new process. What is the kernel checking when it comes to assigning a new token?\n   Assuming the calling process doesn\u2019t have  SeAssignPrimaryTokenPrivilege  (which we don\u2019t) then the new token must meet one of two criteria which are checked in the kernel function  SeIsTokenAssignableToProcess . The criteria are based on specified values in the kernel\u2019s TOKEN object structure as shown in the following diagram\n       A child of the current process token. Based on the new token\u2019s Parent Token ID being equal to the Process Token\u2019s ID.\n A sibling of the current process token. Based on both the Parent Token ID and Authentication ID fields being equal.\n   There\u2019s also additional checks to ensure that the new Token is not an identification level impersonation token (due to this   bug  I reported) and the IL of the new token must be less than or equal to the current process token. These are equally important, but as we\u2019ll see, less useful in practice.\n   One thing the token assignment does not obviously check is whether the Parent or Child tokens are restricted. If you were in a restricted token sandbox could you get an Unrestricted Token which passes all of the checks and assign it to a child effectively escaping the sandbox? No you can\u2019t, the system ensures the Sibling Token check fails when assigning Restricted Tokens and instead ensures the Parent/Child check is the one which will be enforced. If you inspect the kernel function  SepFilterToken , you\u2019ll understand how this is implemented. The following code is executed when copying the existing properties from the parent token to the new restricted token.\n      By setting the new Restricted Token\u2019s Parent Token ID it ensures that only the process which created the Restricted Token can use it for a child as the Token ID is unique for every instance of a TOKEN object. At the same time by changing the Parent Token ID the sibling check is broken.\n   However, when I was doing some testing to verify the token assignment behavior on Windows 10 1909 I noticed something odd. No matter what Restricted Token I created I couldn\u2019t get the assignment to fail. Looking at  SepFilterToken  again I found the code had changed.\n      The kernel code was now just copying the Parent Token ID directly across from the old token. This completely breaks the check, as the new sandboxed process has a token which is considered a sibling of any other token on the desktop.\n   This one line change could just be sufficient to break out of the Restricted Token sandbox, assuming I could bypass the other 3 child process mitigations already in place. Let\u2019s go through the trials and tribulations undertaken to do just that.\n  The final sandbox escape I came up with is quite complicated, it\u2019s also not necessarily the optimal approach. However, the complexity of Windows means it can be difficult to find alternative primitives to exploit in our chain.\n   Let\u2019s start with trying to get a suitable access token to assign to a new process. The token needs to meet some criteria:\n The Token has an IL equal to the sandbox IL, or is writable so that the IL level can be reduced.\n   Access Tokens are securable objects therefore if you have sufficient access you can open a handle to a Token. However, Access Tokens are not referred to by a name, instead to open a Token you need to have access to either a Process or an Impersonating Thread. We can use my   NtObjectManager  PowerShell module to find accessible tokens using the  Get-AccessibleToken  command.\n      This script gets a handle to every sandboxed Chrome process running on my machine (obviously start Chrome first), then uses the access token from each process to determine what other tokens we can open for  TOKEN_DUPLICATE  access. The reason for checking for  TOKEN_DUPLICATE  to use as the token in a new process is that we need to make a copy of the token as two processes can\u2019t use the same access token object. The access check takes into account whether the calling process would have  PROCESS_QUERY_LIMITED_INFORMATION  access to the target process which is a prerequisite for opening the Token. We\u2019ve got a fair number of results, over 100 entries.\n   However this number is deceiving, for a start, some of the Tokens we can access will almost certainly be sandboxed more than the current token is sandboxed. Really we want only accessible tokens which are unsandboxed. Secondly, while there\u2019s a lot of accessible tokens, that&#39;s likely an artifact of a small number of processes being able to access a large number of tokens. We\u2019ll filter it down to just the command lines of the Chrome processes which can access non-sandboxed tokens.\n      Out of all the potential Chrome processes only the GPU process and the Audio utility process have access to non-sandbox tokens. This shouldn\u2019t come as a massive surprise. The renderer processes are significantly more locked down than either the GPU or Audio sandboxes due to the limitations of calling into system services for those processes to function. This does mean that the likelihood of an RCE to sandbox escape is much reduced, as most RCE occur in rendering HTML/JS content. That said GPU bugs do exist, for example   this bug  is one used by Lokihardt at Pwn2Own 2016.\n   Let\u2019s focus on escaping the GPU process sandbox. As I don\u2019t have a GPU RCE to hand I\u2019ll just inject a DLL into the process to run the escape. That\u2019s not as simple as it sounds, once the GPU process has started the process is locked down to only loading Microsoft signed DLLs. I use a trick with  KnownDlls  to load the DLL into memory (see   this blog post  for full details).\n    Drop the IL of the token to match the current token (for GPU this is Low IL)\n   Even for step 1 we\u2019ve got a problem. The simplest way of getting an unrestricted token would be to open the token for the parent process which is the main Chrome browser process. However, if you look through the list of tokens the GPU process can access you\u2019ll find that the main Chrome browser process is not included. Why is that? This is intentional, as I realized after reporting   this bug  in the kernel that a GPU process sandbox could open the browser process\u2019 token. With this token it\u2019s possible to create a new restricted token which would pass the sibling check to create a new process with much more access and escape the sandbox. To mitigate this I modified the access for the process token to block lower IL processes from opening the token for  TOKEN_DUPLICATE  access. See   HardenTokenIntegerityLevelPolicy . Prior to this fix you didn\u2019t need a bug in the kernel to escape the Chrome GPU sandbox, at least to a normal Low IL token.\n   Therefore the easy route is not available to us, however we should be able to trivially enumerate processes and find one which meets our criteria. We can do this by using the  NtGetNextProcess  system call as I described in a   previous blog post  (on a topic we\u2019ll come back to later). We open all processes for  PROCESS_QUERY_LIMITED_INFORMATION  access, then open the token for  TOKEN_DUPLICATE  and  TOKEN_QUERY  access. We can then inspect the token to ensure it\u2019s unrestricted before proceeding to step 2.\n   To duplicate the token we call   DuplicateTokenEx  and request a primary token passing  TOKEN_ALL_ACCESS  as the desired access. But there\u2019s a new problem, when we try and lower the IL we get  ERROR_ACCESS_DENIED  from   SetTokenInformation . This is due to a sandbox mitigation Microsoft added to Windows 10 and back ported to all supported OS\u2019s (including Windows 7). The following code is a snippet from  NtDuplicateToken  where the mitigation has been introduced.\n      When you duplicate a token the kernel checks if the caller is sandboxed. If sandboxed the kernel then checks if the token to be duplicated is less restricted than the caller. If it\u2019s less restricted then the code limits the desired access to  TOKEN_READ  and  TOKEN_EXECUTE . This means that if we request a write access such as  TOKEN_ADJUST_DEFAULT  it\u2019ll be removed on the handle returned to us from the duplication call. In turn this will prevent us reducing the IL so that it can be assigned to a new process.\n   This would seem to end our exploit chain. If we can\u2019t write to the token, we can\u2019t reduce the token\u2019s IL, which prevents us from assigning it. But the implementation has a tiny flaw, the duplicate operation continues to complete and returns a handle just with limited access rights. When you create a new token object the default security grants the caller full access to the Token object. This means once you get back a handle to the new Token you can call the normal   DuplicateHandle  API to convert it to a fully writable handle. It\u2019s unclear if this was intentional or not, although it should be noted that the similar check in  CreateRestrictedToken  returns an error if the new token isn\u2019t as restricted. Whatever the case we can abuse this misfeature to get an writable unrestricted token to assign to the new process with the correct IL.\n   Now that we can get an unrestricted token we can call  CreateProcessAsUser  to create our new process. But not so fast, as the GPU process is still running in a restrictive Job object which prevents creating new processes. I detailed how Job objects prevent new process creation in my \u201c  In-Console-Able \u201d blog post almost 5 years ago. Can we not use the same bug in the Console Driver to escape the Job object? On Windows 8.1 you probably can (although I\u2019ll admit I\u2019ve not tested), however on Windows 10 there\u2019s two things which prevent us from using it:\n Microsoft changed Job objects to support an auxiliary process counter. If you have  SeTcbPrivilege  you can pass a flag to  NtCreateUserProcess  to create a new process still inside the Job which doesn\u2019t count towards the process count. This is used by the Console Driver to remove the requirement to escape the Job. As we don\u2019t have  SeTcbPrivilege  in the sandbox we can\u2019t use this feature.\n Microsoft added a new flag to Tokens which prevent them being used for a new process. This flag is set by Chrome on all sandboxed processes to restrict new child processes. Even without \u20181\u2019 the flag would block abusing the Console Driver to spawn a new process.\n   The combination of these two features blocks spawning a new process outside of the current Job by abusing the Console Driver. We need to come up with another way of escaping both the Job object restriction and to also circumvent the child process restriction flag.\n   The Job object is inherited from parent to child, therefore if we could find a process outside of a Job object which the GPU process can control we can use that process as a new parent and escape the Job. Unfortunately, at least by default, if you check what processes the GPU process can access it can only open itself.\n      Opening itself isn\u2019t going to be very useful, and we can\u2019t rely on getting lucky with a process which just happens to be running at the time which is both accessible and not running a Job. We need to make our own luck.\n   One thing I noticed is that there\u2019s a small race condition setting up a new Chrome sandbox process. The process is first created, then the   Job object is applied . If we could get the Chrome browser to spawn a new GPU process we could use it as a parent before the Job object is applied. The handling of the GPU process even supports respawning the process if it crashes. However I couldn\u2019t find a way of getting a new GPU process to spawn without also causing the current one to terminate so it wasn\u2019t possible to have code running long enough to exploit the race.\n   Instead I decided to concentrate on finding a RPC service which would create a new process outside of the Job. There\u2019s quite a few RPC services where process creation is the main goal, and others where process creation is a side effect. For example I already documented the Secondary Logon service in a   previous blog post  where the entire purpose of the RPC service is to spawn new processes.\n   There is a slight flaw in this idea though, specifically the child process mitigation flag in the token is inherited across impersonation boundaries. As it\u2019s common to use the impersonated token as the basis for the new process any new process will be blocked. However, we have an unrestricted token that does not have the flag set. We can use the unrestricted token to create a restricted token we can impersonate during a RPC call and we can bypass the child process mitigation flag.\n   I tried to list what known services could be used in this way, which I\u2019ve put together in the following table:\n      The table is not exhaustive and there\u2019s likely to be other RPC services which would allow processes to be created. As we can see in the table, well known RPC services which spawn processes such as Secondary Logon, WMI and BITS are not accessible from our sandbox level. The UAC service is accessible and as I described in a   previous blog post  there exists a way of abusing the service to run arbitrary privileged code by abusing debug objects. Unfortunately when a new UAC process is created the service sets the parent process to the caller process. As the Job object is inherited the new process will be blocked.\n   The last service in the list is the DCOM Activator. This is the system service which is responsible for starting out-of-process COM servers and is accessible from our sandbox level. It also starts all COM servers as children of the service process which means the Job object is not inherited. Seems ideal, however there is a slight issue, in order for the DCOM Activator to be useful we need an out-of-process COM server that the sandbox can create. This object must meet a set of criteria:\n   The server must not run as Interactive User (which would spawn out of the sandbox) or inside a service process.\n   We don\u2019t have to worry about criteria 3, the GPU process can access system executables so we\u2019ll stick to pre-installed COM servers. It also doesn\u2019t matter if we can\u2019t access the COM server after creation, all we need is the rights to start the COM server process outside of the Job and then we can hijack it. We can find accessible COM servers using   OleViewDotNet  and the  Select-ComAccess  command.\n      On a default installation of Windows 10 we have 6 candidates. Note that the last 4 are all in DLLs, however these classes are registered to run inside a   DLL Surrogate  so can still be used out-of-process. I decided to go for the servers in COREDPUSSVR because it\u2019s a unique executable rather than the generic DLLHOST so makes it easier to find. The Launch Security for this COM server grants  Everyone  and all AppContainer packages local activation permission as shown below:\n    As an aside, even though there are two classes registered for COREDPUSSVR, only the one starting with  417976b7  is actually registered by the executable. Creating the other class will start the server executable, however the class creation will hang waiting for a class which will never come.\n   To start the server you call   CoCreateInstance  while impersonating the child process mitigation flag-free restricted token. You need to pass the  CLSCTX_ENABLE_CLOAKING  as well to activate the server using the impersonation token, the default would use the process token which has the child process mitigation flag set and so would block process creation. Doing this, you\u2019ll find an instance of COREDPUSSVR running at the same sandbox level however outside of the Job object and without the child process mitigation. Success?\n   Not so fast. Normally the default security of a new process is based on the default DACL inside the access token used to create it. Unfortunately for some unclear reason the DCOM activator sets an explicit DACL on the process which only grants access to the user, SYSTEM and the current logon SID. This doesn\u2019t allow the GPU process to open the new COM server process, even though it\u2019s running at effectively the same security level. So close and yet so far. I tried a few approaches to get code executed inside the COM server such as   Windows Hooks  however nothing obvious worked.\n   Fortunately, the default DACL is still used for any threads created after process startup. We can open one of those threads for full access and change the thread context to redirect execution using   S\n......", "posttime": "2020-05-12 15:36:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "chrom,chrome,change,\u8fdb\u7a0b", "title": "\u5bf9Chrome\u6c99\u7bb1\u7684\u4e00\u884c\u66f4\u6539", "title_en": "A one-line change to the Chrome sandbox", "transed": 1, "url": "https://googleprojectzero.blogspot.com/2020/04/you-wont-believe-what-this-one-line.html", "via": "", "real_tags": ["chrom", "chrome", "change", "\u8fdb\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "46c4ace2658cd774286395c1b2543ceb.png", "infoid": 1001780, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u7528\u529b\u5177\u6709\u76f8\u7b49\u548c\u76f8\u53cd\u7684\u53cd\u4f5c\u7528\u529b\u3002\u5b83\u5728\u6211\u4eec\u5f88\u5c0f\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u704c\u8f93\u5230\u6211\u4eec\u7684\u5927\u8111\u4e2d\u4e86\uff0c\u751a\u81f3\u5728\u6211\u4eec\u62e5\u6709\u80fd\u591f\u8bf4\u8fd9\u79cd\u8bed\u8a00\u7684\u8bed\u8a00\u4e4b\u524d\u5c31\u5df2\u7ecf\u5f00\u59cb\u4e86\u3002\u5728\u4e0d\u5230\u4e00\u5c81\u7684\u65f6\u5019\uff0c\u5a74\u513f\u5c31\u5df2\u7ecf\u80fd\u591f\u7406\u89e3\u7edf\u6cbb\u4e16\u754c\u7684\u56e0\u679c\u6846\u67b6\u3002\u5230\u4e86\u516d\u4e2a\u6708\u5de6\u53f3\uff0c\u5a74\u513f\u4e5f\u5f00\u59cb\u6784\u5efa\u81ea\u5df1\u7684\u60c5\u7eea\uff0c\u5e76\u5bf9\u4ed6\u4eba\u7684\u60c5\u7eea\u505a\u51fa\u53cd\u5e94\u3002\u8d77\u521d\uff0c\u8fd9\u662f\u4e00\u4e2a\u6a21\u4eff\u7684\u8fc7\u7a0b-\u4ed6\u4eec\u5bf9\u7236\u6bcd\u7684\u60c5\u7eea\u72b6\u6001\u505a\u51fa\u53cd\u5e94-\u4f46\u4e0d\u4e45\u4e4b\u540e\uff0c\u4ed6\u4eec\u5c31\u5bf9\u5468\u56f4\u7684\u4e16\u754c\u4ea7\u751f\u4e86\u4ece\u5934\u5f00\u59cb\u7684\u60c5\u7eea\u53cd\u5e94\u3002\n\u4e16\u754c\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\u6982\u5ff5\u5316-\u65e0\u8bba\u662f\u5b89\u6170\u8fd8\u662f\u758f\u8fdc\uff0c\u5145\u6ee1\u6050\u60e7\u8fd8\u662f\u5145\u6ee1\u559c\u60a6\uff0c\u662f\u5426\u5b58\u5728\u5b89\u5168\u6216\u5371\u9669-\u662f\u5176\u4f59\u4f53\u9a8c\u7684\u57fa\u7840\u3002\u4e0d\u80fd\u4e0e\u7167\u987e\u8005\u5f62\u6210\u7a33\u5b9a\u7684\u60c5\u611f\u7ebd\u5e26\u7684\u5b69\u5b50\u901a\u5e38\u4f1a\u60a3\u4e0a\u4e00\u79cd\u540d\u4e3a\u53cd\u5e94\u6027\u4f9d\u604b\u969c\u788d\u7684\u75be\u75c5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4ed6\u4eec\u65e0\u6cd5\u51c6\u786e\u5730\u5206\u6790\u81ea\u5df1\u7684\u60c5\u611f\u56fe\u666f\u3002\u5728\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u758f\u5ffd\u3001\u66b4\u529b\u7684\u73af\u5883\u4e2d\u957f\u5927\u7684\u5b69\u5b50\u65e0\u6cd5\u89e3\u6790\u4e0e\u559c\u60a6\u3001\u60b2\u4f24\u548c\u6050\u60e7\u6709\u5173\u7684\u9762\u90e8\u8868\u60c5-\u4f46\u5b8c\u5168\u6709\u80fd\u529b\u89e3\u8bfb\u6124\u6012\u3002\n\u4f5c\u4e3a\u6210\u5e74\u4eba\uff0c\u4ed6\u4eec\u4ecd\u7136\u5f88\u96be\u63a7\u5236\u81ea\u5df1\u7684\u60c5\u7eea\uff0c\u4e0e\u4ed6\u4eba\u5efa\u7acb\u7262\u56fa\u7684\u8054\u7cfb\uff0c\u4fdd\u4f4f\u5de5\u4f5c\uff0c\u5982\u679c\u4ed6\u4eec\u771f\u7684\u8bbe\u6cd5\u6709\u4e86\u5b69\u5b50\uff0c\u4ed6\u4eec\u66f4\u6709\u53ef\u80fd\u628a\u8fd9\u4e9b\u95ee\u9898\u4f20\u7ed9\u4e0b\u4e00\u4ee3\u3002\u8fd9\u662f\u4e00\u4e2a\u65e0\u6cd5\u89e3\u9664\u7684\u8bc5\u5492\uff0c\u901a\u8fc7\u4e00\u6b21\u7ba1\u7406\u4e0d\u5584\u7684\u5a74\u513f\u7ecf\u5386\u4ee3\u4ee3\u76f8\u4f20\u3002\n\u5176\u4f59\u7684\u4eba\uff0c\u90a3\u4e9b\u7ecf\u5386\u4e86\u76f8\u5bf9\u548c\u5e73\u7684\u7ae5\u5e74\uff0c\u7236\u6bcd\u80fd\u591f\u6ee1\u8db3\u4ed6\u4eec\u7684\u793e\u4f1a\u60c5\u611f\u9700\u6c42\u7684\u4eba\uff0c\u4e16\u754c\u662f\u4e00\u4e2a\u76f8\u5bf9\u7a33\u5b9a\u7684\u5730\u65b9\u3002\u4ed6\u4eec\u6709\u80fd\u529b\u9a7e\u9a6d\u590d\u6742\u7684\u793e\u4ea4\u4e92\u52a8\u3002\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u81ea\u6211\u8c03\u8282\u6765\u7ba1\u7406\u56f0\u96be\u7684\u60c5\u7eea\u3002\u8fd9\u610f\u5473\u7740\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u4ed6\u4eec\u80fd\u591f\u907f\u514d\u8fdb\u5165\u5c3e\u65cb--\u800c\u4e14\u4e00\u65e6\u5c3e\u65cb\u5f00\u59cb\uff0c\u4ed6\u4eec\u4e5f\u80fd\u591f\u9003\u8131\u5c3e\u65cb\u3002\n\u8fd9\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u4eba\u4ece\u4e0d\u4e0d\u5b88\u89c4\u77e9\uff0c\u4e5f\u4e0d\u662f\u8bf4\u88ab\u5ffd\u89c6\u7684\u5b69\u5b50\u6210\u5e74\u540e\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u7a33\u5b9a\u3002\u5b83\u66f4\u591a\u7684\u662f\u4e00\u4e2a\u5e7f\u6cdb\u5206\u7c7b\u7684\u7279\u5f81\u96c6\u5408\uff0c\u53cd\u6620\u4e86\u4e00\u4e2a\u5e73\u5747\u7684\u53cd\u5e94\u3002\u6211\u4eec\u6bcf\u4e2a\u4eba\u90fd\u6709\u7279\u5b9a\u7684\u89e6\u53d1\u56e0\u7d20\uff0c\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u5c0f\u7684\u5e72\u6270\u6eda\u96ea\u7403\u822c\u53d8\u6210\u66f4\u5927\u7684\u4e1c\u897f\u3002\u6700\u6709\u6548\u7684\u8c08\u8bdd\u6cbb\u7597\u8ba1\u5212\u57fa\u672c\u4e0a\u662f\u9ad8\u5f3a\u5ea6\u7684\u60c5\u611f\u6280\u80fd\u57f9\u8bad\u8ba1\u5212\uff0c\u8fd9\u4e9b\u8ba1\u5212\u6559\u4f1a\u4e2a\u4eba\u5982\u4f55\u5728\u5faa\u73af\u5f00\u59cb\u65f6\u8bc6\u522b\u5b83\uff0c\u4ee5\u53ca\u5728\u5faa\u73af\u63a5\u8fd1\u65f6\u5e2e\u52a9\u505c\u6b62\u5faa\u73af\u7684\u7b56\u7565\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u9762\u5bf9\u8270\u96be\u7684\u4efb\u52a1\u672c\u8eab\u5c31\u80fd\u8bf1\u53d1\u60c5\u7eea\u53cd\u5e94--\u4efb\u52a1\u8d8a\u590d\u6742\uff0c\u60c5\u7eea\u53cd\u5e94\u8d8a\u5f3a\u70c8\uff0c\u800c\u9762\u5bf9\u56f0\u96be\u4efb\u52a1\u65f6\u7684\u60c5\u7eea\u8c03\u8282\u80fd\u529b\u662f\u80fd\u591f\u9996\u5148\u5b8c\u6210\u4efb\u52a1\u7684\u6700\u5927\u9884\u6d4b\u56e0\u7d20\u3002\u5c3d\u7ba1\u6218\u4e89\u548c\u66b4\u529b\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u5c11\uff0c\u8fd9\u8868\u660e\u73b0\u5728\u7684\u80b2\u513f\u65b9\u5f0f\u4e5f\u6bd4\u9965\u8352\u548c\u5168\u7403\u51b2\u7a81\u65f6\u671f\u66f4\u597d\uff0c\u4f46\u73b0\u4ee3\u4eba\u88ab\u56f0\u5728\u4e00\u4e2a\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u8981\u590d\u6742\u5f97\u591a\u7684\u4e16\u754c\u91cc\u3002\u6211\u4eec\u7684\u65f6\u4ee3\u662f\u5168\u7403\u7f51\u7edc\u7684\u65f6\u4ee3\uff0c\u800c\u4e0d\u662f\u5c0f\u89c4\u6a21\u7684\u4e92\u52a8\u65f6\u4ee3\u3002\n\u5728\u4e00\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\uff0c\u56e0\u679c\u5f00\u59cb\u53d8\u5f97\u6a21\u7cca\uff0c\u5e76\u9000\u56de\u5230\u590d\u6742\u7684\u76f8\u4e92\u4f5c\u7528\u7684\u6d77\u6d0b\u4e2d\u3002\u4e0e\u4f60\u7684\u884c\u52a8\u53ea\u80fd\u5f71\u54cd\u5c11\u6570\u4eba\u7684\u5c0f\u89c4\u6a21\u793e\u4ea4\u7f51\u7edc\u4e0d\u540c\uff0c\u73b0\u5728\u7684\u6bcf\u4e2a\u51b3\u5b9a\u4f3c\u4e4e\u90fd\u6709\u5168\u7403\u5f71\u54cd\u3002\u6570\u5341\u4ebf\u7f8e\u5143\u7684\u547d\u8fd0\u4f3c\u4e4e\u60ac\u800c\u672a\u51b3\uff0c\u4eba\u4eec\u51b3\u5b9a\u5f00\u4e00\u8f86MPG\u4f4e\u7684\u6c7d\u8f66\uff0c\u81ea\u7531\u6d88\u8d39\u4e00\u6b21\u6027\u5851\u6599\uff0c\u8d2d\u4e70\u8840\u6c57\u5de5\u5382\u52b3\u52a8\u529b\u5236\u9020\u7684\u5546\u54c1\u3002\u5982\u679c\u6709\u8db3\u591f\u7684\u8fdc\u89c1\uff0c\u8fd9\u4e9b\u62c5\u5fe7\u53ef\u4ee5\u5ef6\u4f38\u5230\u672a\u6765\uff0c\u5ef6\u4f38\u5230\u90a3\u4e9b\u5c1a\u672a\u51fa\u751f\u7684\u4eba\uff0c\u4ed6\u4eec\u5c06\u5728\u6ca1\u6709\u8981\u6c42\u51fa\u751f\u7684\u60c5\u51b5\u4e0b\u906d\u53d7\u51b3\u5b9a\u7684\u5f71\u54cd\u3002\n\u8bad\u7ec3\u6709\u7d20\u7684\u5173\u7cfb\u601d\u7ef4\u80fd\u529b\uff0c\u5373\u8003\u8651\u5bf9\u8c61\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u800c\u4e0d\u662f\u5b64\u7acb\u7684\u5bf9\u8c61\uff0c\u6709\u52a9\u4e8e\u7406\u89e3\u8fd9\u4e9b\u590d\u6742\u7684\u5f71\u54cd\u3002\u4f46\u5f88\u96be\u60f3\u8c61\u4efb\u4f55\u4eba\u90fd\u6709\u80fd\u529b\u6293\u4f4f\u4efb\u4f55\u51b3\u7b56\u4e2d\u7684\u6240\u6709\u6d3b\u52a8\u90e8\u4ef6-\u66f4\u4e0d\u7528\u8bf4\u68d5\u6988\u6cb9\u751f\u4ea7\u3001\u70ed\u5e26\u96e8\u6797\u780d\u4f10\u3001\u5916\u5305\u5236\u9020\u6216\u4fee\u590d\u533b\u7597\u4f53\u7cfb\u7b49\u5de8\u5927\u7684\u51b3\u7b56\u4e86\u3002\n\u4e00\u4e2a\u590d\u6742\u7cfb\u7edf\u5185\u7684\u6240\u6709\u884c\u52a8\u90fd\u5c06\u5728\u5176\u4ed6\u5730\u65b9\u5f15\u8d77\u4e0d\u53ef\u9884\u6d4b\u7684\u53cd\u5e94\u3002\u505c\u6b62\u8fdb\u53e3\u68d5\u6988\u6cb9\u548c\u68ee\u6797\u780d\u4f10\uff0c\u5e76\u4f7f\u76f8\u5173\u56fd\u5bb6\u7684\u7ecf\u6d4e\u9677\u5165\u56f0\u5883\u3002\u76d1\u7ba1\u5916\u5305\uff0c\u9632\u6b62\u5e02\u573a\u4f53\u7cfb\u8fbe\u5230\u5e73\u8861-\u5bfc\u81f4\u5546\u54c1\u4ef7\u683c\u4e0a\u6da8\uff0c\u4ee5\u53ca\u88ab\u5916\u5305\u56fd\u5bb6\u7684\u7ecf\u6d4e\u53d1\u5c55\u4e4f\u529b\u3002\u589e\u52a0\u83b7\u5f97\u533b\u7597\u4fdd\u5065\u7684\u673a\u4f1a\uff0c\u540c\u65f6\u786e\u4fdd\u5bf9\u8bb8\u591a\u4eba\u8fdb\u884c\u6025\u6027\u5e72\u9884-\u4f60\u53ef\u80fd\u4f1a\u964d\u4f4e\u751f\u6d3b\u65b9\u5f0f\u5e72\u9884\u7684\u53ef\u80fd\u6027\u3002\n\u60f3\u60f3\u70e7\u5fc3\u5427\u3002\u5f53\u6211\u8fd8\u662f\u4e2a\u5b69\u5b50\u7684\u65f6\u5019\uff0c\u6211\u7684\u80c3\u4e0d\u597d\u3002\u6211\u73b0\u5728\u4e5f\u662f\uff0c\u4f46\u662f\u6211\u4eec\u5df2\u7ecf\u5b66\u4f1a\u76f8\u5904\u4e86\u3002\u6211\u7684\u7236\u6bcd\u5e26\u6211\u53bb\u770b\u4e13\u5bb6\uff0c\u4ed6\u4eec\u4e0d\u6e05\u695a\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u533b\u751f\u4eec\u4ec0\u4e48\u4e1c\u897f\u6233\u4e86\u4e00\u4e0b\uff0c\u8fd8\u770b\u4e86\u770b\u5927\u4fbf\u6837\u672c\uff0c\u4f46\u6ca1\u6709\u660e\u786e\u7684\u5efa\u8bae\u8868\u660e\u53ef\u80fd\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u8fd9\u4e9b\u5f71\u54cd\u3002\u5728\u6211\u5341\u51e0\u5c81\u7684\u65f6\u5019\uff0c\u6211\u5988\u5988\u5e26\u6211\u53bb\u770b\u7684\u4e00\u4f4d\u533b\u751f-\u4e00\u4f4d\u5973\u58eb\u7684\u540d\u5b57\u5df2\u7ecf\u88ab\u65f6\u95f4\u7684\u8ff7\u96fe\u6240\u8ff7\u5931\uff0c\u4f46\u6211\u8bb0\u5f97\u5979\u770b\u8d77\u6765\u5c31\u50cf\u4e54\u8fea\u00b7\u798f\u65af\u7279(Jodi Foster)\u548c\u6211\u7684\u9ad8\u4e2d\u82f1\u8bed\u8001\u5e08\u7684\u6df7\u5408\u4f53-\u5efa\u8bae\u4e86\u4e00\u79cd\u7597\u6cd5\u3002\u5979\u8bf4\uff0c\u4e5f\u8bb8Nexium\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\n\u6211\u603b\u662f\u5174\u594b\u5730\u70ab\u8000\u6211\u77e5\u9053\u7684\u4e8b\u60c5\uff0c\u8003\u8651\u5230\u6211\u6709\u53cd\u53db\u7684\u503e\u5411\uff0c\u6211\u5947\u602a\u5730\u53cd\u5bf9\u670d\u7528\u907f\u5b55\u836f\uff0c\u6211\u95ee\u526f\u4f5c\u7528\u662f\u4ec0\u4e48\u3002\u5979\u5411\u6211\u4fdd\u8bc1\uff0c\u53ea\u8981\u6211\u4e0d\u8fde\u7eed\u670d\u7528\u8d85\u8fc7\u4e24\u5468\u7684\u836f\u7247\uff0c\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\u5728\u88ab\u8ffd\u95ee\u5230\u66f4\u591a\u7ec6\u8282\u65f6\uff0c\u5979\u627f\u8ba4\u6301\u7eed\u4f7f\u7528\u8fd9\u4e9b\u836f\u7247\u4f1a\u5168\u9762\u589e\u52a0\u6b7b\u4ea1\u98ce\u9669\u3002\u6211\u662f\u4e00\u4e2a\u76f8\u5f53\u865a\u65e0\u4e3b\u4e49\u7684\u9752\u5c11\u5e74\uff0c\u4f46\u5373\u4f7f\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u6211\u4e0d\u611f\u5174\u8da3\u7684\u4fbf\u5b9c\u8d27\u3002\u6211\u7ee7\u7eed\u751f\u6d3b\u5728\u6bcf\u5929\u7684\u75bc\u75db\u4e2d\uff0c\u76f4\u5230\u621130\u5c81\u65f6\uff0c\u6211\u7684\u80c3\u624d\u4f1a\u914d\u5408-\u5f53\u6211\u6700\u7ec8\u610f\u8bc6\u5230\uff0c\u6bcf\u5929\u953b\u70bc\u3001\u4e25\u683c\u7684\u996e\u98df\u548c\u51a5\u60f3\u662f\u552f\u4e00\u53ef\u4ee5\u89e3\u51b3\u6211\u7684\u4e2d\u5fc3\u95ee\u9898\u7684\u4e8b\u60c5\u3002\n\u89e3\u51b3\u529e\u6cd5\u4e0d\u662f\u5403\u4e00\u7c92\u7b80\u5355\u7684\u836f\u7247\u5c31\u80fd\u89e3\u51b3\u7684\uff0c\u4e5f\u89e3\u51b3\u4e0d\u4e86\u533b\u751f\u4e0d\u77e5\u9053\u6211\u5f97\u4e86\u4ec0\u4e48\u75c5\uff0c\u4e5f\u6ca1\u6709\u65f6\u95f4\u5f04\u6e05\u695a\u7684\u4e8b\u5b9e\u3002\u771f\u7684\uff0c\u6211\u8fd8\u662f\u4e0d\u77e5\u9053\u6211\u5f97\u4e86\u4ec0\u4e48\u75c5-\u5fae\u751f\u7269\u7fa4\u8fd8\u662f\u4ec0\u4e48\uff0c\u4f46\u89e3\u51b3\u65b9\u6848\u6765\u81ea\u4e00\u7cfb\u5217\u7684\u6280\u672f\u53d8\u9769\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u8f6c\u53d8\u3002\u63d0\u51fa\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u4e00\u79cd\u5f3a\u6709\u529b\u7684\u5316\u5b66\u5904\u7406\uff0c\u4ea7\u751f\u4e86\u540c\u6837\u548c\u76f8\u53cd\u7684\u53cd\u5e94-\u6211\u7684\u70e7\u5fc3\u4f1a\u505c\u6b62\uff0c\u4f46\u4f1a\u6709\u5730\u72f1\u822c\u7684\u4ee3\u4ef7\uff0c\u56e0\u4e3a\u76d0\u9178\u6c34\u5e73\u7684\u53d8\u5316\u5bfc\u81f4\u9499\u4ece\u6211\u7684\u9aa8\u9abc\u548c\u808c\u8089\u4e2d\u6e17\u51fa\uff0c\u76f4\u5230\u6709\u4e00\u5929\u5929\u6c14\u6674\u6717\uff0c\u6574\u4e2a\u4e8b\u60c5\u5c31\u4f1a\u505c\u6b62\u5de5\u4f5c\u3002\n\u6211\u4eec\u751f\u6d3b\u5728\u8fd9\u6837\u4e00\u4e2a\u65f6\u4ee3\uff0c\u4e8b\u60c5\u53d8\u5f97\u6781\u5176\u590d\u6742\u3002\u8fd9\u610f\u5473\u7740\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8bc4\u4f30\u91c7\u53d6\u5c3d\u53ef\u80fd\u597d\u7684\u884c\u52a8\u610f\u5473\u7740\u4ec0\u4e48\u3002\u6211\u4eec\u751a\u81f3\u4e0d\u77e5\u9053\u201c\u6700\u597d\u201d\u7684\u52a8\u4f5c\u662f\u4ec0\u4e48\u610f\u601d\u3002\u6211\u4eec\u5fc5\u987b\u4fe1\u4efb\u80fd\u591f\u96c6\u6210\u6bd4\u4eba\u8111\u591a\u5f97\u591a\u7684\u4fe1\u606f\u7684\u7b97\u6cd5-\u4eba\u5de5\u667a\u80fd\u3002\u8fd9\u4e9b\u7b97\u6cd5\u7ba1\u7406\u7740\u4ece\u533b\u7597\u4fdd\u5065\u5230\u91cf\u5211\u7684\u4e00\u5207\u51b3\u7b56\u3002\u4ece\u5f88\u591a\u65b9\u9762\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u5f53\u6211\u5728\u5927\u5b66\u7684\u65f6\u5019\uff0c\u6211\u7684\u4e00\u95e8\u901a\u8bc6\u8bfe\u7a0b\u4e13\u6ce8\u4e8e\u524d\u5217\u817a\u764c\u7684\u6cbb\u7597\u5dee\u5f02-\u5728\u4e00\u4e2a\u5730\u65b9\u8bca\u65ad\u8fc7\u5ea6\uff0c\u5728\u53e6\u4e00\u4e2a\u5730\u65b9\u8bca\u65ad\u4e0d\u8db3\uff0c\u76f8\u5173\u533b\u7597\u6210\u672c\u7684\u5de8\u5927\u5dee\u5f02\u3002\u8fd9\u5728\u4eca\u5929\u4ecd\u7136\u662f\u4e00\u4e2a\u95ee\u9898\u3002\n\u4eca\u5929\uff0c\u4eba\u4eec\u8bd5\u56fe\u901a\u8fc7\u7b97\u6cd5\u7684\u5e94\u7528\u6765\u6807\u51c6\u5316\u764c\u75c7\u6cbb\u7597\uff0c\u8bb8\u591a\u4eba\u5e0c\u671b\u8fd9\u5c06\u5bfc\u81f4\u66f4\u591a\u7684\u6807\u51c6\u5316\u65b9\u6cd5\u3002\u5173\u4e8e\u6cd5\u5ead\u6848\u4ef6\u3001\u5e7f\u544a\u3001\u80a1\u5e02\u51b3\u5b9a\u7684\u8ba1\u7b97\u673a\u5316\u51b3\u5b9a\uff0c\u751a\u81f3\u4f60\u65e9\u4e0a(\u6216\u4ee5\u524d)\u4e0a\u73ed\u7684\u8def\u7ebf\uff0c\u65e0\u5904\u4e0d\u5728\u3002\u4ed6\u4eec\u4e3a\u6211\u4eec\u505a\u4e86\u5f88\u5927\u7684\u4e8b\u60c5\uff0c\u51cf\u8f7b\u4e86\u6211\u4eec\u80a9\u4e0a\u7684\u8d1f\u62c5\u3002\n\u4f46\u5373\u4fbf\u5982\u6b64\uff0c\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u8981\u610f\u8bc6\u5230\uff0c\u5c3d\u7ba1\u6211\u4eec\u5728\u590d\u6742\u7684\u73af\u5883\u4e0b\u64cd\u4f5c\u53ef\u80fd\u9700\u8981\u6bd4\u4efb\u4f55\u4e2a\u4eba\u80fd\u529b\u66f4\u5f3a\u7684\u5904\u7406\u80fd\u529b\uff0c\u4f46\u91cd\u8981\u7684\u662f\u4e0d\u8981\u628a\u624b\u4ece\u65b9\u5411\u76d8\u4e0a\u79fb\u5f00\u3002\u800c\u4e14\u4e0d\u4ec5\u4ec5\u662f\u5728\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u91cc\uff0c\u66f4\u591a\u7684\u662f\u6253\u4e2a\u6bd4\u65b9\u3002\u6211\u4eec\u7528\u6765\u7f13\u89e3\u51b3\u7b56\u75b2\u52b3\u7684\u7cfb\u7edf\uff0c\u5728\u9762\u5bf9\u7cae\u98df\u77ed\u7f3a\u3001\u4e0d\u65ad\u53d8\u5316\u7684\u5730\u7403\u3001\u5728\u6709\u7ec4\u7ec7\u7684\u5b97\u6559\u8870\u843d\u7559\u4e0b\u7684\u771f\u7a7a\u4e2d\u7f3a\u4e4f\u96c6\u4e2d\u7684\u4ef7\u503c\u7ed3\u6784\u7b49\u96be\u4ee5\u514b\u670d\u7684\u6311\u6218\u65f6\uff0c\u5e2e\u52a9\u6211\u4eec\u5728\u60c5\u611f\u4e0a\u81ea\u6211\u8c03\u8282\u7684\u7cfb\u7edf-\u53ea\u662f\u548c\u6211\u4eec\u8bad\u7ec3\u4ed6\u4eec\u8003\u8651\u7684\u56e0\u7d20\u4e00\u6837\u597d\u3002", "note_en": "Actions have an equal and opposite reaction. It\u2019s worked into our brains at an early age, even before we have the language to be able to speak it. At  less than a year of age, infants are already capable of understanding the cause-and-effect framework that rules the world. By about six months, infants have also begun to construct their own emotions, and react to the feelings of others. At first, it\u2019s a process of mimicry - they react to the emotional state of their parents - but soon after they are producing de novo emotional reactions to the world around them.\n The conceptualization of how the world works - wether it\u2019s comforting or alienating, full of fear vs full of joy, if there is safety or danger - are the foundation on which the rest of experience is built. Children that fail to form a stable emotional bond with their caretakers generally suffer from something called  Reactive Attachment Disorder, a condition where they are unable to accurately parse their emotional landscape. In the worst cases, children that are raised in neglectful, violent environments cannot parse the facial expressions that have to do with joy, sadness, and fear - but are  perfectly capable of interpreting anger.\n As adults, there individuals continue to have a hard time regulating their emotions, forming strong connections with others, holding down jobs, and they are much more likely to pass these sorts of problems down to the next generation if they do manage to have children. It\u2019s a curse that cannot be lifted, passing from generation to generation through a poorly managed infant experience.\n The rest of the population, those that have experienced a relatively peaceful childhood, with parents that were able to meet their socio-emotional needs, the world is a relatively stable place. They have the ability to navigate complex social interactions. They can mange difficult emotions by  self-regulating. This means that they\u2019re able to avoid entering a tailspin when something goes wrong - and are also able to escape a tail-spin once it\u2019s initiated.\n This isn\u2019t to say that these individuals never disregulate, or that neglected children can never be stable as adults. It\u2019s more a broadly-binned collection of traits, reflective of an average response. All of us have specific triggers than can allow a small disturbance to snowball into something much larger. The most effective talk therapy programs are basically intense emotional skills training programs, which teach individuals how to recognize the cycle when it begins, and strategies that can help stop the cycle as it approaches.\n  The interesting thing is that being faced with a difficult task can induce an emotional response all by itself - and the more complex the task, the more emotional the response.\u00a0The ability to regulate emotions in the face of a difficult task is the  greatest predictor of being able to complete the task in the first place. And though there is less war and violence than ever before, which suggests there is also better parenting than during times of famine and global strife, modern humans are stuck with a world that is far more complex than it\u2019s ever been before. Ours is an era of global networks, rather than small-scale interactions.\n In a complex system, cause and effect start to blur, and to recede into a complex sea of interactions. Instead of small-scale social networks, where your actions can only affect a handful of people, each decision now seems to have global implications. The fates of billions seeming to hang in the balance of one\u2019s decision to drive a car with low MPG, to freely consume single use plastics, to purchase goods made from sweatshop labor. With enough foresight these concerns can extend into the future, to the yet-unborn that will suffer the fallout of a decision without ever having asked to be born.\n A well-trained capacity for relational thinking, the kind that considers the interplay between objects rather than objects in isolation, can help with understanding these sorts of complex effects. But it is hard to imagine that any individual is capable of holding onto all of the moving parts that go into any decision - let alone enormous ones like the production of palm oil, clearing of rainforests, or outsourcing manufacturing, or fixing the healthcare system.\n All actions within a complex system are going to cause unpredictable reactions elsewhere. Stop importing palm oil and forest clearing, and crater the economy of the countries in question. Regulate outsourcing, and prevent market systems from coming into balance - leading to higher prices for goods and a lack of economic development in countries that are being outsourced to. Increase access to health care, and while ensuring acute intervention for many - you may decrease the likelihood for lifestyle interventions.\n Consider heartburn. When I was a kid, I had a bad stomach. I still do, but we\u2019ve managed to learn to get along. My parents took me to specialists who didn\u2019t have a clear understanding of what was happening, doctors what poked and prodded and looked at stool samples, but there was no clear suggestion of what could be causing the effects. When I was a teenager, one of the doctors my mom took me to - a lady whose name has been lost to the fog of time but I remember as looking like a mixture between Jodi Foster and my high school English teacher - suggested a remedy. Perhaps, she said, Nexium would help.\n Always excited to show off I knew things, and weirdly anti-pill given my proclivities towards rebelry, I asked what the side effects were. She assured me that there wouldn\u2019t be any - as long as I didn\u2019t take the pills continuously for more than two weeks. Pressed for more details, she confessed that continuous use of the pills would increase the risk of death across the board. I was a pretty nihilistic teenager, but even for me, that was a bargain I wasn\u2019t interested in. I continued to live in daily pain with a stomach that wouldn\u2019t cooperate until I turned 30 - when I finally figured out that daily exercise, a strict diet, and meditation were the only things that could fix my central issue.\n  The solution couldn\u2019t be enacted by taking a simple pill - nor would it solve the fact that the doctor didn\u2019t know what was wrong with me, and didn\u2019t have the time to figure it out. Really, I still don\u2019t know what\u2019s wrong with me - microbiome or what, but the solution came from a set of technological changes, rather than a single shift. The alternative that was presented,\u00a0 a potent chemical treatment, had an equal and opposite reaction - my heartburn would stop, but there would be hell to pay as the change in hydrochloric acid levels caused the calcium to leach from my bones and muscles until, one fine day, the whole thing would just stop working.\n We live in a time where things are just irreducibly complex. What that means is that it\u2019s almost impossible to evaluate what it means to take the best action possible. We don\u2019t even know what the \u201cbest\u201d action means. We have to place our trust in algorithms - artificial intelligence - that are capable of integrating far more information than the human brain. These algorithms govern decision making in everything from healthcare to sentencing. In many ways, this can be a blessing. When I was in college, one of my general studies courses focused on disparity of treatment for prostate cancer - over-diagnosis in one place, under-diagnosis in another, a huge disparity in the associated healthcare costs.  It\u2019s still an issue today.\n Today, there are attempts to standardize cancer treatment through the application of  algorithms, which many hope will lead to more standardized approaches. Computerized decisions about court cases, advertisements, stock market decisions, even the route you take to work in the mornings (or did, in the before times) are everywhere. And they do great things for us, by taking some of the burden off of our shoulders.\n But even so, it\u2019s important that we realize that while the complexity we operate under might require more processing power than any individual is capable of, it\u2019s important not to take the hand off the wheel. And not just in a self-driving car, but more metaphorically. The systems that we use to relieve decision fatigue, to help us self-regulate emotionally when faced with insurmountable challenges of food shortages, a changing planet, a lack of centralized value structures in the vacuum left by the decline of organized religion - are only as good as the factors we train them to consider.", "posttime": "2020-05-12 15:35:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u590d\u6742\u6027,making,\u80fd\u591f", "title": "\u590d\u6742\u6027\u8ba9\u4f60\u53d8\u5f97\u75af\u72c2\u548c\u611a\u8822", "title_en": "Complexity is making you mad and stupid", "transed": 1, "url": "https://demystifyingscience.com/blog/complexity", "via": "", "real_tags": ["\u590d\u6742\u6027", "making", "\u80fd\u591f"]}, {"category": "", "categoryclass": "", "imagename": "a2a20366b780c453eef028a767c65bd0.jpg", "infoid": 1001779, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6728\u661f\u4e0a\u603b\u662f\u4e00\u7247\u9ed1\u6697\u548c\u66b4\u98ce\u96e8--\u73b0\u5728\uff0c\u79d1\u5b66\u5bb6\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4ed6\u4eec\u5bf9\u5728\u8fd9\u4e2a\u6c14\u4f53\u5de8\u661f\u7684\u5927\u6c14\u5c42\u4e2d\u76d8\u65cb\u7684\u72c2\u66b4\u7684\u6700\u8be6\u7ec6\u7684\u89c2\u5bdf\u3002\n\u8fd9\u4e9b\u89c2\u6d4b\u5f52\u529f\u4e8e\u4ece\u5730\u7403\u8868\u9762\u5ef6\u4f38\u5230\u6728\u661f\u672c\u8eab\u7684\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u4f19\u4f34\u5173\u7cfb\u3002\u4eceNASA\u7684\u6731\u8bfa\u63a2\u6d4b\u5668\u5f00\u59cb\uff0c\u5b83\u81ea2016\u5e74\u4ee5\u6765\u4e00\u76f4\u5728\u6728\u661f\u8f68\u9053\u4e0a\u8fd0\u884c\uff0c\u7136\u540e\u62db\u52dfNASA\u7684\u54c8\u52c3\u592a\u7a7a\u671b\u8fdc\u955c\uff0c\u8be5\u671b\u8fdc\u955c\u5728\u592a\u9633\u7cfb\u6700\u5927\u7684\u884c\u661f\u8fd0\u884c\u768430\u5e74\u4e2d\u4e00\u76f4\u5728\u8fdb\u884c\u68c0\u67e5\u3002\u6700\u540e\uff0c\u589e\u52a0\u4f4d\u4e8e\u590f\u5a01\u5937\u7684\u53cc\u5b50\u5ea7\u5929\u6587\u53f0\uff0c\u4ee5\u652f\u6301\u6765\u81ea\u5730\u7403\u7684\u89c2\u6d4b\u3002\n\u7f8e\u56fd\u5b87\u822a\u5c40\u9a6c\u91cc\u5170\u5dde\u6208\u8fbe\u5fb7\u592a\u7a7a\u98de\u884c\u4e2d\u5fc3\u7684\u5929\u6587\u5b66\u5bb6\u827e\u7c73\u00b7\u897f\u8499\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u7ecf\u5e38\u4ece\u51e0\u4e2a\u4e0d\u540c\u7684\u5929\u6587\u53f0\u548c\u6ce2\u957f\u83b7\u5f97\u8fd9\u4e9b\u9ad8\u5206\u8fa8\u7387\u7684\u56fe\u50cf\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u6728\u661f\u7684\u5929\u6c14\u6709\u4e86\u66f4\u591a\u7684\u4e86\u89e3\u3002\u827e\u7c73\u00b7\u897f\u8499\u662f\u7f8e\u56fd\u5b87\u822a\u5c40\u6208\u8fbe\u5fb7\u592a\u7a7a\u98de\u884c\u4e2d\u5fc3\u7684\u5929\u6587\u5b66\u5bb6\uff0c\u5979\u4e3b\u8981\u7814\u7a76\u884c\u661f\u5927\u6c14\uff0c\u5e76\u53c2\u4e0e\u4e86\u8fd9\u9879\u65b0\u7684\u7814\u7a76\u3002\u8fd9\u76f8\u5f53\u4e8e\u6211\u4eec\u7684\u6c14\u8c61\u536b\u661f\u3002\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u5f00\u59cb\u89c2\u5bdf\u5929\u6c14\u5468\u671f\u4e86\u3002\n\u6728\u661f\u4e0a\u6709\u5145\u8db3\u7684\u5929\u6c14\u53ef\u4f9b\u89c2\u8d4f\u3002\u867d\u7136\u5927\u7ea2\u6591\u662f\u8fd9\u4e2a\u5de8\u5927\u4e16\u754c\u4e0a\u6700\u8457\u540d\u7684\u98ce\u66b4\uff0c\u4f46\u8fd9\u4e2a\u6c14\u4f53\u5de8\u4eba\u7684\u6240\u6709\u98ce\u66b4\u90fd\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4e91\u5c42\u5ef6\u4f38\u5230\u76f8\u5f53\u4e8e\u5730\u7403\u9ad8\u5ea6\u7684\u4e94\u500d\uff0c\u95ea\u7535\u7684\u5a01\u529b\u662f\u5730\u7403\u4e0a\u6700\u5f3a\u5927\u7684\u95ea\u7535\u7684\u4e09\u500d\u3002\n\u6bcf\u969453\u5929\uff0c\u201c\u6731\u8bfa\u53f7\u201d\u90fd\u4f1a\u8fd1\u8ddd\u79bb\u63a0\u8fc7\u6728\u661f\u7684\u4e91\u9876\uff0c\u8fd9\u79cd\u65b9\u5f0f\u88ab\u79f0\u4e3a\u201c\u5468\u6e38\u201d(Perijove)\uff0c\u4e00\u76f4\u5728\u6536\u96c6\u6570\u636e\u3002\u5728\u822a\u5929\u5668\u7684\u4eea\u5668\u4e2d\u6709\u4e00\u53f0\u5fae\u6ce2\u8f90\u5c04\u8ba1\uff0c\u5b83\u53ef\u4ee5\u8bc6\u522b\u95ea\u7535\uff0c\u5e76\u7814\u7a76\u6c28\u548c\u6c34\u84b8\u6c14\u5728\u8fd9\u4e2a\u6c14\u4f53\u5de8\u4eba\u7684\u5927\u6c14\u4e2d\u505a\u4e86\u4ec0\u4e48\u3002\n\u8fd9\u9879\u65b0\u7814\u7a76\u80cc\u540e\u7684\u79d1\u5b66\u5bb6\u5b89\u6392\u4ee5\u54c8\u52c3\u548c\u53cc\u5b50\u5ea7\u4e3a\u76ee\u6807\uff0c\u914d\u5408\u6731\u8bfa\u7684\u65f6\u95f4\u8868\u7814\u7a76\u6728\u661f\u3002\u56e0\u6b64\uff0c\u5f53\u201c\u6731\u8bfa\u201d\u7814\u7a76\u8fd9\u9897\u6c14\u4f53\u5de8\u661f\u7ecf\u8fc7\u5934\u9876\u65f6\u7684\u4e00\u7247\u72ed\u957f\u5730\u5e26\u65f6\uff0c\u54c8\u52c3\u548c\u53cc\u5b50\u5ea7\u7814\u7a76\u7684\u662f\u6728\u661f\u4e0a\u5927\u6c14\u6d3b\u52a8\u7684\u66f4\u5927\u56fe\u666f\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u54c8\u52c3\u671b\u8fdc\u955c\u5728\u53ef\u89c1\u5149\u4e0b\u62cd\u6444\u4e86\u8fd9\u9897\u884c\u661f\u7684\u56fe\u50cf\uff0c\u8ba9\u79d1\u5b66\u5bb6\u4eec\u53ef\u4ee5\u6d4b\u91cf\u5bf9\u6d41\u5854\u7684\u9ad8\u5ea6\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u53cc\u5b50\u5ea7\u5728\u7ea2\u5916\u5149\u4e2d\u89c2\u5bdf\uff0c\u901a\u8fc7\u9ad8\u5c42\u4e91\u7684\u7f1d\u9699\u7aa5\u89c6\uff0c\u79d1\u5b66\u5bb6\u4eec\u6000\u7591\u90a3\u91cc\u7684\u5e72\u71e5\u7a7a\u6c14\u6b63\u5728\u4e0b\u6c89\uff0c\u770b\u5230\u9690\u85cf\u5728\u6df1\u5904\u7684\u6c34\u4e91\u3002\n\u5982\u679c\u8fd9\u542c\u8d77\u6765\u8fd8\u4e0d\u591f\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u8003\u8651\u4e00\u4e0b\u53cc\u5b50\u5ea7\u5728\u7ea2\u5916\u89c2\u6d4b\u4e2d\u80fd\u591f\u8bc6\u522b\u51fa\u7684\u7ec6\u8282\uff0c\u5373\u5728\u76f4\u5f84300\u82f1\u91cc(500\u516c\u91cc)\u7684\u6728\u661f\u4e0a\u53d1\u73b0\u7279\u5f81\u3002\u9886\u5bfc\u6b64\u6b21\u89c2\u6d4b\u7684\u53cc\u5b50\u5ea7\u5929\u6587\u53f0\u5929\u6587\u5b66\u5bb6\u5b89\u5fb7\u9c81\u00b7\u65af\u8482\u82ac\u65af(Andrew Stephens)\u5728\u4e00\u4efd\u5929\u6587\u53f0\u58f0\u660e\u4e2d\u8bf4\uff0c\u5728\u8fd9\u79cd\u5206\u8fa8\u7387\u4e0b\uff0c\u671b\u8fdc\u955c\u53ef\u4ee5\u5206\u8fa8\u51fa\u8fc8\u963f\u5bc6\u4e00\u8f86\u6c7d\u8f66\u7684\u4e24\u4e2a\u524d\u706f\uff0c\u4ece\u7ebd\u7ea6\u5e02\u53ef\u4ee5\u770b\u5230\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6731\u8bfa\u5df2\u7ecf\u5bf9\u8fd9\u9897\u6c14\u4f53\u5de8\u661f\u8fdb\u884c\u4e8626\u6b21\u98de\u8d8a\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e09\u4e2a\u5929\u6587\u53f0\u5df2\u7ecf\u5efa\u7acb\u4e86\u76f8\u5f53\u591a\u7684\u5173\u4e8e\u6728\u661f\u5927\u6c14\u5c42\u7684\u6570\u636e\u96c6\uff0c\u79d1\u5b66\u5bb6\u4eec\u53ea\u516c\u5e03\u4e86\u8fc4\u4eca\u4e3a\u6b62\u6700\u521d\u6b65\u7684\u53d1\u73b0\u3002\n\u4f46\u8fd9\u4e9b\u53d1\u73b0\u5df2\u7ecf\u8868\u660e\uff0c\u95ea\u7535\u5728\u79d1\u5b66\u5bb6\u79f0\u4e4b\u4e3a\u4e1d\u72b6\u6c14\u65cb\u7684\u7279\u5f81\u4e2d\u6700\u5e38\u89c1\u3002\u8fd9\u9879\u65b0\u7814\u7a76\u7684\u4e3b\u8981\u4f5c\u8005\u3001\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821(University of California\uff0cBerkeley)\u5929\u6587\u5b66\u5bb6\u8fc8\u514b\u5c14\u00b7\u738b(Michael Wong)\u5728\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u7684\u58f0\u660e\u4e2d\u8868\u793a\uff0c\u8fd9\u4e9b\u6c14\u65cb\u6da1\u6d41\u53ef\u80fd\u662f\u5185\u90e8\u80fd\u91cf\u70df\u56f1\uff0c\u6709\u52a9\u4e8e\u901a\u8fc7\u5bf9\u6d41\u91ca\u653e\u5185\u90e8\u80fd\u91cf\u3002\n\u8fd9\u79cd\u5bf9\u6d41\u6839\u636e\u6e29\u5ea6\u548c\u6e7f\u5ea6\u7b49\u56e0\u7d20\u5c06\u6728\u661f\u7684\u5927\u6c14\u5c42\u5c42\u5c42\u62c9\u52a8\u3002\u5730\u7403\u7684\u5927\u6c14\u5c42\u4e5f\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u4e0d\u662f\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u3002\n\u9ec4\u5728\u53cc\u5b50\u5ea7\u7684\u58f0\u660e\u4e2d\u8bf4\uff0c\u79d1\u5b66\u5bb6\u8ffd\u8e2a\u95ea\u7535\u662f\u56e0\u4e3a\u5b83\u662f\u5bf9\u6d41\u7684\u6807\u5fd7\uff0c\u5bf9\u6d41\u662f\u5c06\u6728\u661f\u5185\u90e8\u7684\u70ed\u91cf\u8f93\u9001\u5230\u53ef\u89c1\u4e91\u9876\u7684\u6e4d\u6d41\u6df7\u5408\u8fc7\u7a0b\u3002\u6b63\u5728\u8fdb\u884c\u7684\u5bf9\u95ea\u7535\u6765\u6e90\u7684\u7814\u7a76\u5c06\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u6728\u661f\u4e0a\u7684\u5bf9\u6d41\u4e0e\u5730\u7403\u5927\u6c14\u4e2d\u7684\u5bf9\u6d41\u6709\u4f55\u4e0d\u540c\u6216\u76f8\u4f3c\u4e4b\u5904\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u5929\u6587\u53f0\u5408\u4f5c\u80cc\u540e\u7684\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u56de\u7b54\u4e86\u4e00\u4e2a\u5173\u4e8e\u6728\u661f\u5927\u6c14\u5c42\u7684\u957f\u671f\u95ee\u9898\uff0c\u7279\u522b\u662f\u6405\u52a8\u4e86\u51e0\u4e2a\u4e16\u7eaa\u7684\u5927\u7ea2\u6591\u98ce\u66b4\u3002\u5929\u6587\u5b66\u5bb6\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u60f3\u77e5\u9053\u98ce\u66b4\u4e2d\u77ed\u6682\u7684\u770b\u4f3c\u9ed1\u6697\u7684\u6591\u70b9\u662f\u7531\u5927\u6c14\u4e2d\u7684\u53e6\u4e00\u79cd\u5316\u5408\u7269\u9020\u6210\u7684\uff0c\u8fd8\u662f\u7531\u4e91\u5c42\u4e2d\u7684\u7f1d\u9699\u9020\u6210\u7684\u3002\n\u7ed3\u5408\u54c8\u52c3\u548c\u53cc\u5b50\u5ea7\u76f8\u7ee7\u6536\u96c6\u7684\u6570\u636e\uff0c\u79d1\u5b66\u5bb6\u4eec\u53ef\u4ee5\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff1a\u56e0\u4e3a\u6697\u70b9\u5728\u7ea2\u5916\u7ebf\u4e2d\u95ea\u8000\u7740\u660e\u4eae\u7684\u5149\u8292\uff0c\u5c31\u50cf\u6df1\u6c34\u4e91\u4e00\u6837\uff0c\u5b83\u4eec\u4f3c\u4e4e\u4ee3\u8868\u4e86\u4e0a\u5c42\u4e91\u4e2d\u7684\u7f1d\u9699\u3002\n\u5b83\u6709\u70b9\u50cf\u5357\u74dc\u706f\uff0c\u738b\u8bf4\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u660e\u4eae\u7684\u7ea2\u5916\u5149\u6765\u81ea\u65e0\u4e91\u5730\u533a\uff0c\u4f46\u5728\u6709\u4e91\u7684\u5730\u65b9\uff0c\u7ea2\u5916\u7ebf\u771f\u7684\u5f88\u6697\u3002\n\u79d1\u5b66\u5bb6\u4eec\u8fd8\u5728\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u96c6\u5206\u6790\u7eac\u5411\u98ce\u3001\u5927\u6c14\u6ce2\u3001\u5bf9\u6d41\u98ce\u66b4\u3001\u6c14\u65cb\u6da1\u65cb\u548c\u96fe\u973e\u7b49\u6781\u5730\u5927\u6c14\u73b0\u8c61-\u5f53\u7136\uff0c\u4ed6\u4eec\u9884\u8ba1\u5927\u91cf\u5176\u4ed6\u79d1\u5b66\u96be\u9898\u4e5f\u5c06\u4ece\u89c2\u6d4b\u4e2d\u53d7\u76ca\u3002\n\u6731\u8bfa\u7684\u4e0b\u4e00\u6b21\u4efb\u52a1\u5c06\u57286\u6708\u521d\u8fdb\u884c\uff1b\u8fd9\u9879\u4efb\u52a1\u8ba1\u5212\u81f3\u5c11\u6301\u7eed\u5230\u660e\u5e74\u590f\u5929\u3002\n\u8fd9\u9879\u7814\u7a76\u53d1\u8868\u57284\u67081\u65e5\u51fa\u7248\u7684\u201c\u5929\u4f53\u7269\u7406\u6742\u5fd7\u589e\u520a\u7cfb\u5217\u201d\u4e0a\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u3002\n\u5411Meghan Bartels\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3mbartels@space.com\u6216\u5173\u6ce8\u5979@meganbartels\u3002\u5728Twitter@spacedotcom\u548cFacebook\u4e0a\u5173\u6ce8\u6211\u4eec\u3002\n\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\uff0c\u60a8\u53ef\u4ee5\u8ba2\u9605\u6211\u4eec\u4efb\u4f55\u7545\u9500\u7684\u79d1\u5b66\u6742\u5fd7\uff0c\u6bcf\u6708\u53ea\u97002.38\u7f8e\u5143\uff0c\u5373\u524d\u4e09\u4e2a\u6708\u7684\u6807\u51c6\u4ef7\u683c\u670945%\u7684\u6298\u6263\u3002\u89c6\u56fe\u4ea4\u6613\u3002\n\u52a0\u5165\u6211\u4eec\u7684\u7a7a\u95f4\u8bba\u575b\uff0c\u7ee7\u7eed\u8c08\u8bba\u7a7a\u95f4\u7684\u6700\u65b0\u4efb\u52a1\uff0c\u591c\u7a7a\u548c\u66f4\u591a\uff01\u5982\u679c\u60a8\u6709\u4efb\u4f55\u65b0\u95fb\u63d0\u793a\u3001\u66f4\u6b63\u6216\u8bc4\u8bba\uff0c\u8bf7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3\uff1aCommunity@space.com\u3002\n\u6e05\u6668\u5929\u7a7a\u4e2d\u7684\u6728\u661f\u6b63\u5728\u4e3a\u671b\u8fdc\u955c\u89c2\u4f17\u4e0a\u6f14\u4e00\u573a\u76f8\u5f53\u7cbe\u5f69\u7684\u8868\u6f14\u3002\u73b0\u5728\u5b83\u7684\u89d2\u5ea6\u5927\u5c0f\u8d85\u8fc742&34\uff1b\uff0c\u5728\u66f4\u9ad8\u7684\u89c6\u89d2\u4e0b(&gt\uff1b70x)\u53ef\u4ee5\u770b\u5230\u8bb8\u591a\u4e91\u5e26\uff0c\u800c\u4e14\u6709\u5f88\u597d\u7684\u884c\u661f\u6ee4\u5149\u7247\u53ef\u4ee5\u975e\u5e38\u4ee4\u4eba\u6109\u5feb\u5730\u89c2\u5bdf\u3002\n\u56de\u8986", "note_en": "It&#39;s always dark and stormy on   Jupiter \u2014 and now, scientists have gotten their most detailed view of the wild storms that swirl through the gas giant&#39;s atmosphere.\n Those observations are thanks to a very powerful partnership that stretches from Earth&#39;s surface to Jupiter itself. Start with   NASA&#39;s Juno probe, which has been orbiting Jupiter since 2016, then recruit   NASA&#39;s Hubble Space Telescope, which has checked in on the solar system&#39;s largest planet throughout its three decades of operation. Finally, add in the Gemini Observatory in Hawaii to support the observations from Earth.\n  &#34;Because we now routinely have these high-resolution views from a couple of different observatories and wavelengths, we are learning so much more about Jupiter&#39;s weather,&#34; Amy Simon, an astronomer at NASA&#39;s Goddard Space Flight Center in Maryland who focuses on planetary atmospheres and took part in the new research,   said in a NASA statement. &#34;This is our equivalent of a weather satellite. We can finally start looking at weather cycles.&#34;\n   And there&#39;s plenty of weather on Jupiter to look at. Although the   Great Red Spot is the most famous storm on the giant world, all of the gas giant&#39;s storms are impressive, with clouds stretching five times higher than Earth&#39;s equivalent and lightning three times more powerful than the strongest bolts on Earth.\n Every 53 days, Juno skims over Jupiter&#39;s cloud tops in a close approach called a perijove, gathering data all the while. Among the spacecraft&#39;s instruments is a microwave radiometer, which is tuned to identify   lightning strikes and study what ammonia and water vapor are doing in the gas giant&#39;s atmosphere.\n The scientists behind the new research arranged to target Hubble and Gemini to study Jupiter in coordination with Juno&#39;s schedule. So while Juno studies a swath of the gas giant as it passes overhead, Hubble and Gemini study the bigger picture of atmospheric activity on Jupiter.\n Specifically,   Hubble images the planet in visible light and lets scientists measure the height of convective towers. Meanwhile, Gemini looks in infrared light to peer through gaps in high-level clouds, where scientists suspect drier air is sinking, to the water clouds hidden deep below.\n   If that doesn&#39;t sound sufficiently impressive, consider the detail that Gemini was able to identify in its infrared observations, spotting features on Jupiter 300 miles (500 kilometers) across. &#34;At this resolution, the telescope could resolve the two headlights of a car in Miami, seen from New York City,&#34; Andrew Stephens, a Gemini Observatory astronomer who led the observations,   said in an observatory statement.\n Juno has made 26 flybys of the gas giant to date, which means the trio of observatories have built up quite a data set about Jupiter&#39;s atmosphere, and scientists have only released the most preliminary findings to date.\n But those findings already suggested that lightning was most common in a feature that scientists call a filamentary cyclone. &#34;These cyclonic vortices could be internal energy smokestacks, helping release internal energy through convection,&#34; Michael Wong, an astronomer at the University of California, Berkeley, and lead author on the new research, said in the NASA statement.\n That convection pulls layers of Jupiter&#39;s atmosphere up and down depending on factors like temperature and humidity.   Earth&#39;s atmosphere does this as well, but not in exactly the same way.\n  &#34;Scientists track lightning because it is a marker of convection, the turbulent mixing process that transports Jupiter&#39;s internal heat up to the visible cloud tops,&#34; Wong said in the Gemini statement. &#34;Ongoing studies of lightning sources will help us understand how convection on Jupiter is different from or similar to convection in the Earth&#39;s atmosphere.&#34;\n In the meantime, the researchers behind the observatory collaboration have already answered one longstanding question about Jupiter&#39;s atmosphere, specifically the   Great Red Spot storm that has roiled for centuries. Astronomers had long wondered whether transient seemingly dark spots in the storm are caused by a different compound in the atmosphere or by gaps in the cloud cover.\n And combining the data gathered in close succession by Hubble and Gemini allowed scientists to answer that question: because the dark spots shine brightly in infrared, as deep water clouds do, they seem to represent gaps in upper clouds.\n &#34;It&#39;s kind of like a   jack-o-lantern,&#34; Wong said. &#34;You see bright infrared light coming from cloud-free areas, but where there are clouds, it&#39;s really dark in the infrared.&#34;\n  The scientists are also using the data set to analyze zonal winds, atmospheric waves, convective storms, cyclonic vortices and polar atmospheric phenomena like hazes \u2014 and, of course, they anticipate that plenty of other scientific puzzles will benefit from the observations as well.\n Juno&#39;s next perijove takes place in early June; the mission is scheduled to continue at least   through next summer.\n The research is described in   a paper published April 1 in The Astrophysical Journal Supplement Series.\n  Email Meghan Bartels at mbartels@space.com or follow her    @meghanbartels . Follow us  on Twitter    @Spacedotcom  and on    Facebook .\n For a limited time, you can take out a digital subscription to any of  our best-selling science magazines for just $2.38 per month, or 45% off the standard price for the first three months. View Deal\n Join our Space Forums to keep talking space on the latest missions, night sky and more! And if you have a news tip, correction or comment, let us know at:  community@space.com.\n     Jupiter in the early morning sky is putting on quite a show for telescope viewers. It is now larger than 42&#34; angular size with many cloud bands visible at higher power views (&gt; 70x) and with good planet filters can be very pleasing to observe.\n   Reply", "posttime": "2020-05-12 15:07:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u79d1\u5b66\u5bb6,\u6728\u661f,jupiter", "title": "\u79d1\u5b66\u5bb6\u4eec\u5bf9\u6728\u661f\u7684\u5927\u6c14\u5c42\u548c\u98ce\u66b4\u8fdb\u884c\u4e86\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684\u89c2\u5bdf", "title_en": "Scientists Get Their Best-Ever Look At Jupiter's Atmosphere and Storms", "transed": 1, "url": "https://www.space.com/jupiter-storm-observations-hubble-and-juno.html", "via": "", "real_tags": ["\u79d1\u5b66\u5bb6", "\u6728\u661f", "jupiter"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001778, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4e94\u4e2a\u65b0\u5b8f\u53ef\u4ee5\u5e2e\u52a9\u751f\u6210\u76ee\u5f55\u3002\u6240\u6709\u7528\u4e8e\u76ee\u5f55\u7684\u6761\u76ee\u5fc5\u987b\u7528.XSand.XE\u5bf9\u62ec\u8d77\u6765\uff0c\u53ef\u9009\u7684.XAmacros\u7528\u4e8e\u9644\u52a0\u6761\u76ee\u3002.XS\u6216.XA\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u8981\u6253\u5370\u5728\u4e00\u884c\u70b9\u4e4b\u540e\u7684\u9875\u7801\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aNO\uff0c\u5219\u4e0d\u4f1a\u6253\u5370\u9875\u7801\uff0c\u5c31\u50cf\u7ae0\u8282\u53ca\u5176\u7b2c\u4e00\u4e2a\u5b50\u8282\u5728\u540c\u4e00\u9875\u4e0a\u5f00\u59cb\u65f6\u4e00\u6837\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u7f29\u8fdb\u7ea7\u522b\uff1b\u5982\u679c\u7f3a\u5c11\u6b64\u53c2\u6570\uff0c\u5219\u5f53\u524d\u7f29\u8fdb\u4fdd\u6301\u6709\u6548\u3002\u6700\u540e\uff0c.PX\u5b8f\u6253\u5370\u51fa\u76ee\u5f55\u3002\u5982\u679c\u60a8\u5fd8\u8bb0\u4e86\uff0c\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u4e8b\u60c5\u3002\u4ee5\u4e0b\u662f\u5178\u578b\u8f93\u5165\u548c\u8f93\u51fa\u6587\u672c\u7684\u793a\u4f8b\uff1a.XS II(\u5f00\u59cb)\u4ecb\u7ecd\u3002XA 1\u7b2c\u4e00\u7ae0\uff1a\u5386\u53f2\u3002XA no\u7b2c\u4e8c\u7ae0\uff1a\u8bc1\u636e.XA 24 5(\u7f29\u8fdb5\u4e2a\u5b57\u7b26)\u542f\u53d1\u5f0f\u5047\u8bbe.XA 35\u5b9e\u9a8c\u6570\u636e.XA 56 0(\u8fd4\u56de\u539f\u59cb\u7f29\u8fdb)\u7ed3\u8bba.XE(\u7ed3\u675f).PX(\u6253\u5370\u8f93\u51fa)CONTENTS\u7b80\u4ecb\u8868\u683c.\u3002\u7b2c\u4e09\u7ae0\u7b2c\u4e00\u7ae0\uff1a\u5386\u53f2.\u30021\u7b2c2\u7ae0\uff1a\u8bc1\u636e\u542f\u53d1\u5f0f\u5047\u8bbe.\u300224\u5b9e\u9a8c\u6570\u636e.\u300235\u7ed3\u8bba.\u3002\u4e94\u5341\u516d\u3002\n\u8fd8\u53ef\u4ee5\u5728\u6574\u4e2a\u6587\u672c\u6b63\u6587\u4e2d\u4f7f\u7528.XS\u548c.XE\u5bf9\u81ea\u52a8\u6536\u96c6\u76ee\u5f55\uff0c\u5305\u62ec\u81ea\u52a8\u751f\u6210\u7684\u9875\u7801\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u4e3a\u6bcf\u4e2a\u90e8\u5206\u6807\u9898\u7f16\u5236\u7d22\u5f15\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f.NH\u5b8f\u751f\u6210\u7684\u7f16\u53f7\u6807\u9898\uff0c\u5e76\u4e14\u5e0c\u671b\u76ee\u5f55\u4e2d\u5305\u542b\u6807\u9898\u7f16\u53f7\uff0c\u8bf7\u4f7f\u7528\u6b64\u683c\u5f0f\uff1a\\*(\u8f93\u51fa\u76ee\u5f55\u65f6\uff0cSN\u5b57\u7b26\u4e32\u5c06\u66ff\u6362\u4e3a\u6807\u9898\u7f16\u53f7\uff0c\u4f8b\u5982\uff1aTableOf Contents1\u3002\u539f\u751f\u52a8\u7269\u95e8.\u300212.Porifera\u95e8.\u300263.\u3002\u8154\u80a0\u52a8\u7269\u95e8.\u300210\u4e2a\u3002\n\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728\u7eb8\u5f20\u672b\u5c3e\u4f7f\u7528.TC\u5b8f(\u800c\u4e0d\u662f.PX)\u6253\u5370\u51fa\u76ee\u5f55\u3002\u5982\u679c\u60a8\u5fd8\u8bb0\u4e86\u5b83\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u4e8b\u60c5\u3002\u8fd9\u4e24\u4e2a\u5b8f\u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\uff0c\u4f46.TC\u4f1a\u5bfc\u81f4\u5206\u9875\u7b26\uff0c\u5e76\u5c06\u9875\u7801\u91cd\u7f6e\u4e3aI(\u5c0f\u5199\u7f57\u9a6c\u6570\u5b571)\u3002(\u56e0\u6b64\uff0c\u7b2cI\u9875\u5c06\u663e\u793a\u5728\u6587\u6863\u7684\u6700\u540e\u4e00\u9875\u4e4b\u540e\uff0c\u4f46\u4e0d\u4f1a\u963b\u6b62\u60a8\u5c06\u5176\u79fb\u5230\u6700\u524d\u9762\u3002)\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u79cd\u81ea\u52a8\u7d22\u5f15\u65b9\u6cd5\u53ea\u80fd\u5728\u4e00\u6b21\u8fd0\u884c\u4e2d\u6b63\u786e\u5de5\u4f5c\u3002\u5728\u6392\u5b57\u673a\u4e0a\uff0c\u4e00\u6b21\u8fd0\u884c\u88ab\u9650\u5236\u572835\u9875\u4ee5\u5185\u3002\n\u5982\u679c\u60a8\u6ca1\u6709\u53e6\u5916\u8bf7\u6c42\uff0cnroff\u5c06\u751f\u6210\u5355\u5217\u683c\u5f0f\u7684\u8f93\u51fa\u3002\u901a\u8fc7\u5728\u8f93\u5165\u6587\u4ef6\u4e2d\u653e\u7f6e\u547d\u4ee4.2C\uff0c\u8f93\u51fa\u5c06\u4ee5\u53cc\u5217\u683c\u5f0f\u5f00\u59cb\u6253\u5370\u3002\u6bcf\u5217\u7684\u5bbd\u5ea6\u5c06\u662f\u5355\u5217\u683c\u5f0f\u4e0b\u4e00\u884c\u957f\u5ea6\u76847/15\uff0c\u800c\u680f\u95f4\u8ddd\u6216\u5217\u4e4b\u95f4\u7684\u95f4\u8ddd\u5c06\u662f\u6574\u4e2a\u884c\u957f\u76841/15\u3002\u8981\u8fd4\u56de\u5355\u5217\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4\u30021C\u3002\u4ece\u53cc\u5217\u5207\u6362\u65f6\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4.1C\u4ece\u53cc\u5217\u683c\u5f0f\u5207\u6362\u5230\u5355\u5217\u683c\u5f0f\u3002\u8981\u8fd4\u56de\u5230\u5355\u5217\u683c\u5f0f\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4.1C\u3002\u4ece\u53cc\u5217\u683c\u5f0f\u7684\u884c\u957f\u76847/15\u7684\u5bbd\u5ea6\uff0c\u4ee5\u53ca\u5217\u4e4b\u95f4\u7684\u95f4\u8ddd\u5c06\u662f\u6574\u4e2a\u884c\u957f\u76841/15\u3002\u8981\u8fd4\u56de\u5355\u5217\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4.1C\u3002\u4ece\u53cc\u5217\u683c\u5f0f\u5207\u6362\u5230\u5355\u5217\u683c\u5f0f\u65f6\uff0c\u6bcf\u5217\u7684\u5bbd\u5ea6\u5c06\u662f\u4e0b\u4e00\u884c\u957f\u5ea6\u76847/15\u3002\n\u8fd9\u5c06\u5bfc\u81f4\u8f93\u51fa\u7684\u683c\u5f0f\u8bbe\u7f6e\u4e3a\u9875\u9762\u4e0a\u53ef\u4ee5\u5bb9\u7eb3\u7684\u6307\u5b9a\u5bbd\u5ea6\u7684\u5217\u6570\u3002\u5217\u5bbd\u53ef\u4ee5\u7528\u4efb\u4f55\u523b\u5ea6\u5355\u4f4d\u6307\u5b9a\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u6807\u660e\u5355\u4f4d\uff0c\u5219\u8be5\u8bbe\u7f6e\u5c06\u88ab\u7406\u89e3\u4e3a\u82e5\u5e72\u4e2aEN\u3002(\u523b\u5ea6\u5355\u4f4d\u5728\u7b2c2.15\u8282\u4e2d\u8ba8\u8bba\u3002)\u4e0d\u6307\u5b9a\u4efb\u4f55\u5217\u5bbd\u7684.MC\u8868\u793a\u4e0e.2C\u76f8\u540c\u7684\u542b\u4e49\u3002\u5217\u6570\u7684\u4efb\u4f55\u66f4\u6539(\u4ece1\u5230\u66f4\u5927\u7684\u5217\u6570\u9664\u5916)\u90fd\u4f1a\u5bfc\u81f4\u8df3\u5230\u65b0\u9875\u3002\n-ms\u8f6f\u4ef6\u5305\u63d0\u4f9b\u4e86\u7528\u4e8e\u5c06\u6587\u672c\u5757\u5168\u90e8\u4fdd\u7559\u5728\u4e00\u9875\u4e0a\u7684\u5b8f\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6807\u51c6\u4fdd\u6301\u4ee5\u5b8f.KS\u5f00\u59cb\uff0c\u4ee5.KE\u7ed3\u675f\u3002\u5982\u679c\u5f53\u524d\u9875\u9762\u4e0a\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u5bb9\u7eb3\u8fd9\u4e24\u4e2a\u5b8f\u4e4b\u95f4\u5305\u542b\u7684\u6750\u6599\uff0cnroff\u4f1a\u5728\u90a3\u91cc\u6253\u5370\u5b83\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u5b83\u4f1a\u8df3\u5230\u4e0b\u4e00\u9875\u5e76\u5728\u90a3\u91cc\u6253\u5370\u3002\u53e6\u4e00\u79cd\u7c7b\u578b\u79f0\u4e3a\u6d6e\u52a8\u4fdd\u6301\uff0c&#34\uff1b\u4ee5.KF\u5f00\u5934\uff0c\u4ee5.KE\u7ed3\u675f\u3002\u5982\u679c\u6709\u5fc5\u8981\u8df3\u5230\u65b0\u9875\u9762\u6253\u5370\u6b64\u6750\u6599\uff0cnroff\u9996\u5148\u7528\u8f93\u5165\u6587\u4ef6\u4e2dKeep\u4e4b\u540e\u7684\u666e\u901a\u6587\u672c\u586b\u5145\u5f53\u524d\u9875\u9762\u3002\u8fd9\u53ef\u907f\u514d\u5728\u9875\u9762\u5e95\u90e8\u4fdd\u7559\u4fdd\u7559\u6750\u6599\u4e4b\u524d\u7684\u7a7a\u767d\u3002\u6d6e\u52a8Keep\u6700\u5e38\u7528\u4e8e\u5b9a\u4f4d\u8868\u683c\u6216\u4e0d\u5c5e\u4e8e\u4e25\u683c\u6587\u672c\u903b\u8f91\u987a\u5e8f\u7684\u67d0\u4e9b\u5176\u4ed6\u7c7b\u578b\u7684\u6750\u6599\u3002\u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u6837\u5f0f\u7684Keep\uff0c\u90fd\u5fc5\u987b\u4ee5.KE\u7ed3\u5c3e\u3002\u5b8f/\u8f6c\u79fb\u6ea2\u51fa\u3002&#34\uff1b\n\u5728\u53cc\u680f\u6216\u591a\u680f\u683c\u5f0f\u4e2d\uff0cKEEP\u5b8f\u4f1a\u5c1d\u8bd5\u5c06\u6240\u6709\u4fdd\u7559\u7684\u7d20\u6750\u653e\u5728\u540c\u4e00\u680f\u4e2d\u3002\u5982\u679c\u5305\u542b\u5728KEEP\u9053\u5c94\u4e2d\u7684\u7d20\u6750\u9700\u8981\u8d85\u8fc7\u4e00\u9875\u7a7a\u95f4\u6216\u591a\u680f\u683c\u5f0f\u7684\u4e00\u680f\uff0c\u5219\u5b83\u5c06\u4ece\u65b0\u7684\u9875\u9762\u6216\u680f\u5f00\u59cb\uff0c\u7136\u540e\u76f4\u63a5\u8f6c\u5230\u4e0b\u4e00\u9875\u6216\u680f\u3002\n\u6709\u65f6\u9700\u8981\u8bbe\u7f6e\u67d0\u4e9b\u6587\u672c\u7684\u683c\u5f0f\u800c\u4e0d\u586b\u5145\u548c\u8c03\u6574\u5b83-\u4f8b\u5982\uff0c\u9879\u76ee\u5217\u8868\u6216\u8bd7\u8282\u3002\u8981\u5173\u95ed\u586b\u5145\u4ee5\u4f7f\u6bcf\u4e00\u4e2a\u8f93\u51fa\u884c\u7cbe\u786e\u5bf9\u5e94\u4e8e\u4e00\u884c\u8f93\u5165\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4.DS\u5f00\u59cb\u6750\u6599\uff0c\u4f7f\u7528.de\u7ed3\u675f\u6750\u6599\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6b64\u6750\u6599\u4ece\u5de6\u8fb9\u8ddd\u7f29\u8fdbPI\u503c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u8f93\u5165\u793a\u4f8b\uff1a\n\u8bf7\u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6bcf\u884c\u90fd\u662f\u5355\u72ec\u5c45\u4e2d\u7684\u3002\u8981\u751f\u6210\u4f5c\u4e3a\u9875\u9762\u4e0a\u7684\u4e00\u90e8\u5206\u5c45\u4e2d\u7684\u5de6\u8c03\u6574\u5757\uff0c\u8bf7\u4f7f\u7528.DS B\u5f00\u59cb\uff1a\n\u53e6\u4e00\u79cd\u53ef\u80fd\u662f.DS I\uff0c\u5176\u542b\u4e49\u4e0e\u666e\u901a.DS\u76f8\u540c\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u8fd9\u4e24\u4e2a\u6784\u9020\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u540e\u9762\u5305\u62ec\u53e6\u4e00\u4e2a\u53c2\u6570\u6765\u6307\u5b9a\u7f29\u8fdb\u91cf\uff1b.DS I 3\u6216.DS 3\u5f00\u59cb\u663e\u793a\u65f6\u4ece\u9875\u8fb9\u8ddd\u7f29\u8fdb3 ns\u3002\n\u4e0a\u8ff0\u4efb\u4f55\u663e\u793a\u90fd\u4f1a\u81ea\u52a8\u653e\u5165\u6807\u51c6\u4fdd\u7559\u4e2d\u3002\u4e0e\u666e\u901a\u4fdd\u7559\u6587\u672c\u5757\u4e00\u6837\uff0c\u5982\u679c\u5f53\u524d\u9875\u9762\u4e0a\u6ca1\u6709\u8db3\u591f\u7684\u663e\u793a\u7a7a\u95f4\uff0c\u5219\u4f1a\u4fdd\u5b58\u6574\u4e2a\u663e\u793a\u5e76\u653e\u5230\u4e0b\u4e00\u9875\u4e0a\u3002\u5982\u679c\u60a8\u4e0d\u60f3\u5c06\u663e\u793a\u4fdd\u7559\u5728\u5355\u4e2a\u9875\u9762\u4e0a\uff0c\u5e76\u4e14\u5e0c\u671b\u907f\u514d\u6587\u672c\u4e2d\u51fa\u73b0\u96be\u770b\u7684\u95f4\u9699\uff0c\u6216\u8005\u5982\u679c\u60a8\u7684\u663e\u793a\u6bd4\u4e00\u9875\u957f\uff0c\u8bf7\u4f7f\u7528\u663e\u793a\u547d\u4ee4.BD\u3001.CD\u3001.ID\u6216.LD\uff0c\u800c\u4e0d\u662f.DS B\u3001.DS C\u3001.DS I\uff0c\u8bf7\u4f7f\u7528\u663e\u793a\u547d\u4ee4.BD\u3001.CD\u3001.ID\u6216.LD\uff0c\u800c\u4e0d\u662f\u4f7f\u7528.DS B\u3001.DS C\u3001.DS I\u3002\u8fd9\u4e24\u4e2a\u547d\u4ee4\u4e5f\u5fc5\u987b\u7528.de\u5173\u95ed\u624d\u80fd\u7ed3\u675f\u4efb\u4f55\u7c7b\u578b\u7684\u663e\u793a\u3002\u672a\u80fd\u5305\u62ec\u7ed3\u675f\u547d\u4ee4\u4f1a\u5bfc\u81f4\u7c7b\u4f3c\u4e8e\u65e0\u6cd5\u5173\u95ed\u811a\u6ce8\u6216\u4fdd\u7559\u800c\u5bfc\u81f4\u7684\u95ee\u9898\u3002(=\u3002\nMS\u4e3a\u52a0\u5feb\u6587\u6863\u683c\u5f0f\u5316\u6240\u505a\u7684\u4e00\u4ef6\u4e8b\u5c31\u662f\u5efa\u7acb\u6807\u51c6\u7684\u9875\u9762\u5e03\u5c40\u6837\u5f0f\u3002\u5728\u7528-ms\u5236\u4f5c\u7684\u8bba\u6587\u4e2d\uff0c\u6587\u672c\u884c\u7684\u9ed8\u8ba4\u957f\u5ea6\u4e3a6\u82f1\u5bf8\uff1b\u6bb5\u843d\u7b2c\u4e00\u884c\u7684\u7f29\u8fdb\u4e3a5\u82f1\u5bf8\uff1b\u9875\u7801\u6253\u5370\u5728\u6bcf\u9875\u540e\u6bcf\u9875\u7684\u9876\u90e8\u4e2d\u5fc3\uff1b\u9875\u7709\u548c\u9875\u811a\u8fb9\u8ddd\u4e3a1\u82f1\u5bf8\u5bbd\u3002\u8fd9\u4e9b\u529f\u80fd\u4e2d\u7684\u8bb8\u591a\u529f\u80fd\u90fd\u7531-ms\u4f5c\u4e3a\u53d8\u91cf\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u7684\u503c\u63a7\u5236\u3002\u8fd9\u4f7f\u5f97\u8fd9\u6210\u4e3a\u53ef\u80fd\u3002\n\u5b58\u50a8\u8fd9\u4e9b\u503c\u7684\u5b58\u50a8\u4f4d\u7f6e\u79f0\u4e3a\u6570\u5b57\u5bc4\u5b58\u5668\u548c\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u3002\u524d\u8005\u4fdd\u5b58\u6570\u5b57\u503c\uff0c\u540e\u8005\u4fdd\u5b58\u5b57\u7b26\u4e32\u3002\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u7684\u540d\u79f0\uff0c\u957f\u5ea6\u4e3a\u4e00\u6216\u4e24\u4e2a\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u884c\u957f\u7684\u503c\u5b58\u50a8\u5728\u540d\u4e3aLL\u7684\u6570\u5b57\u5bc4\u5b58\u5668\u4e2d\u3002\u9664\u975e\u60a8\u53d1\u51fa\u547d\u4ee4\u66f4\u6539\u5bc4\u5b58\u5668LL\u4e2d\u5b58\u50a8\u7684\u503c\uff0c\u5426\u5219\u5b83\u5c06\u5305\u542b\u7531-ms\u5206\u914d\u7ed9\u5b83\u7684\u6807\u51c6\u503c\u6216\u7f3a\u7701\u503c(6\u82f1\u5bf8)\u3002\u5728\u5bc4\u5b58\u5668LL\u4e2d\u5b58\u50a8\u8fd9\u4e9b\u503c\u7684\u5b58\u50a8\u4f4d\u7f6e\u79f0\u4e3a\u6570\u5b57\u5bc4\u5b58\u5668\u548c\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u3002\u524d\u8005\u4fdd\u5b58\u6570\u5b57\u503c\uff0c\u540e\u8005\u4fdd\u5b58\u5b57\u7b26\u4e32\u3002\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u7684\u540d\u79f0\uff0c\u957f\u5ea6\u4e3a\u4e00\u4e24\u4e2a\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u884c\u957f\u7684\u503c\u5b58\u50a8\u5728\u4e00\u4e2a\u540d\u4e3aLL\u7684\u6570\u5b57\u5bc4\u5b58\u5668\u4e2d\u3002\n\u8981\u66f4\u6539\u5c3a\u5bf8(\u5982\u7ebf\u957f\u5ea6)\u7684\u7f3a\u7701\u503c\uff0c\u53ef\u91cd\u7f6e\u76f8\u5173\u7684\u7f16\u53f7\u5bc4\u5b58\u5668\u3002\u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528nroff\u547d\u4ee4.nr\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6570\u5b57\u5bc4\u5b58\u5668\u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5206\u914d\u7ed9\u5b83\u7684\u503c\u3002\u503c\u53ef\u4ee5\u8868\u793a\u4e3a\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u5305\u542b\u5c0f\u6570\u3002\u8bbe\u7f6e\u6570\u5b57\u5bc4\u5b58\u5668\u7684\u503c\u65f6\uff0c\u51e0\u4e4e\u603b\u662f\u9700\u8981\u5728\u503c\u4e4b\u540e\u7d27\u8ddf\u4e00\u4e2a\u7f29\u653e\u5355\u4f4d\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c&#34\uff1bi&#34\uff1b\u7531\u4e8e\u523b\u5ea6\u5355\u4f4d\u4f1a\u8ba9nroff\u77e5\u9053\u60a8\u7684\u610f\u601d\u662f5\u82f1\u5bf8\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u8ddd\u79bb\u5355\u4f4d\u76845\u82f1\u5bf8\u3002\u4f46\u662f\u70b9\u5927\u5c0f(PS)\u548c\u5782\u76f4\u95f4\u8ddd(VS)\u5bc4\u5b58\u5668\u662f\u6b64\u89c4\u5219\u7684\u4f8b\u5916\uff1a\u901a\u5e38\u5e94\u5c06\u4e00\u4e2a\u503c\u6307\u5b9a\u4e3a\u70b9\u6570\uff0c\u800c\u4e0d\u5e94\u6307\u660e\u523b\u5ea6\u5355\u4f4d\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u5782\u76f4\u95f4\u8ddd\u4ece12\u70b9(\u5355\u500d\u95f4\u8ddd)\u66f4\u6539\u4e3a24\u70b9(\u53cc\u500d\u95f4\u8ddd)\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\u5728\u8981\u5c06\u5782\u76f4\u95f4\u8ddd\u8bbe\u7f6e\u4e3a\u5927\u4e8e\u534a\u82f1\u5bf8(\u5927\u4e8e36\u78c5)\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8bf7\u5728\u8bbe\u7f6eVS\u5bc4\u5b58\u5668\u65f6\u5305\u62ec\u4e00\u4e2a\u523b\u5ea6\u5355\u4f4d\u3002\u88681\u89e3\u91ca\u4e86nroff\u548ctroff\u53ef\u7528\u7684\u6d4b\u91cf\u5355\u4f4d\u3002\n+--+|\u88681||\u8bfa\u6d1b\u592b\u548c\u7279\u6d1b\u592b\u8ba1\u91cf\u5355\u4f4d|+\u3002-+|__\u8868\u793a__||\u5355\u4f4dabbr Nroff Troff||point p 1/72\u82f1\u5bf81/72\u82f1\u5bf8||pica P 1/6\u82f1\u5bf81/6\u82f1\u5bf8||em m\u5bbd\u5ea6\u7b49\u4e8e||\u5f53\u524d\u5b57\u4f53\u5927\u5c0f||\u4e2d\u7684||\u4e2a|\u70b9\u6570||en n\u534a\u4e2aem|\u5b57\u7b26||\u5782\u76f4v\u95f4\u8ddd\uff0c\u5df2\u6d4b\u91cf||\u57fa\u7ebf||\u82f1\u5bf8i\u82f1\u5bf8||\u5398\u7c73c\u5398\u7c73||\u673a\u5668u 1/240\u82f1\u5bf81/432\u82f1\u5bf8||\u5355\u4f4d|+--+\u3002\n\u5355\u4f4dpoint\u3001pica\u3001em\u548cen\u662f\u4f20\u7edf\u6392\u7248\u4e2d\u4f7f\u7528\u7684\u5ea6\u91cf\u5355\u4f4d\u3002\u5782\u76f4\u7a7a\u95f4\u5355\u4f4d\u4e5f\u5bf9\u5e94\u4e8e\u6392\u7248\u672f\u8bed&#34\uff1bLEADING\uff0c&#34\uff1b\u6307\u7684\u662f\u4ece\u4e00\u884c\u6587\u5b57\u7684\u57fa\u7ebf\u5230\u4e0b\u4e00\u884c\u57fa\u7ebf\u7684\u8ddd\u79bb\u3002Em\u548cen\u7279\u522b\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e\u5f53\u524d\u4f7f\u7528\u7684\u5b57\u4f53\u5927\u5c0f\u6210\u6bd4\u4f8b(\u901a\u5e38\u8868\u793a\u4e3a\u51e0\u4e2a\u70b9)\u3002Aem\u662f\u7b49\u4e8e\u5b57\u4f53\u5927\u5c0f\u4e2d\u7684\u70b9\u6570\u7684\u8ddd\u79bb(\u5927\u81f4\u7b49\u4e8e\u3002\u8fd9\u4e9b\u5355\u4f4d\u4fbf\u4e8e\u6307\u5b9a\u5c3a\u5bf8\uff0c\u5982\u7f29\u8fdb\u3002\u5728troff\u4e2d\uff0cem\u548cen\u6709\u5176\u4f20\u7edf\u542b\u4e49--\u8ddd\u79bb\u7684\u4e00\u4e2aem\u7b49\u4e8e\u4e24\u4e2aen\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8enroff\uff0cem\u548cen\u90fd\u8868\u793a\u76f8\u540c\u7684\u8ddd\u79bb\u91cf\uff0c\u5373\u4e00\u4e2a\u6253\u5b57\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002\u5728troff\u4e2d\uff0cem\u548cen\u6709\u5176\u4f20\u7edf\u542b\u4e49--\u4e00\u4e2aem\u8ddd\u79bb\u7b49\u4e8e\u4e24\u4e2aen\u3002\u53e6\u4e00\u65b9\u9762\uff0cem\u548cen\u90fd\u8868\u793a\u76f8\u540c\u7684\u8ddd\u79bb\u91cf\uff0c\u5373\u4e00\u4e2a\u6253\u5b57\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002\u5728nroff\u4e2d\uff0cem\u548cen\u90fd\u8868\u793a\u76f8\u540c\u7684\u8ddd\u79bb\u91cf\uff0c\u5373\u4e00\u4e2a\u6253\u5b57\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002\u5728troff\u4e2d\uff0cem\u548cen\u6709\u5176\u4f20\u7edf\u542b\u4e49-\u8ddd\u79bb\u7684\u4e00\u4e2aem\u7b49\u4e8e\u4e24\u4e2aen\u3002\n\u673a\u5668\u5355\u4f4d\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5355\u4f4d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u5c3a\u5bf8\u5728\u5b58\u5165\u5b58\u50a8\u5668\u65f6\u90fd\u4f1a\u901a\u8fc7nroff\u548ctroff\u5728\u5185\u90e8\u8f6c\u6362\u4e3a\u8be5\u5355\u4f4d\u3002\u5c3d\u7ba1\u5b58\u5728\u8fd9\u6837\u7684\u6d4b\u91cf\u5355\u4f4d\uff0c\u4f46\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u7528\u6765\u4fee\u6539\u9ed8\u8ba4\u5c3a\u5bf8\u3002\n\u6570\u5b57\u5bc4\u5b58\u5668\u9700\u8981\u8bb0\u4f4f\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\u662f\uff0c\u5bf9\u4e00\u4e2a\u5bc4\u5b58\u5668(\u5982LL)\u7684\u66f4\u6539\u4e0d\u4f1a\u7acb\u5373\u6539\u53d8\u8f93\u51fa\u4e2d\u8be5\u70b9\u7684\u76f8\u5173\u7ef4\u5ea6\u3002\u76f8\u53cd\uff0c\u5728\u884c\u957f\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u6539\u53d1\u751f\u5728\u4e0b\u4e00\u6bb5\u7684\u5f00\u5934\uff0c\u5176\u4e2d-ms\u5c06\u5404\u79cd\u7ef4\u5ea6\u91cd\u7f6e\u4e3a\u76f8\u5173\u7684\u6570\u5b57\u5bc4\u5b58\u5668\u7684\u5f53\u524d\u503c\u3002\u88682\u4e3a\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5217\u51fa\u4e86\u5bf9\u5bc4\u5b58\u5668\u7684\u66f4\u6539\u5b9e\u9645\u751f\u6548\u7684\u4f4d\u7f6e\u3002\n\u5982\u679c\u7acb\u5373\u9700\u8981\u6548\u679c(\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u9700\u8981\u66f4\u6539\u6bb5\u843d\u4e2d\u95f4\u7684\u5782\u76f4\u95f4\u8ddd)\uff0c\u5219\u5fc5\u987b\u4f7f\u7528nroff\u547d\u4ee4.vs\uff0c\u8be5\u547d\u4ee4\u76f4\u63a5\u63a7\u5236\u5782\u76f4\u95f4\u8ddd\u3002\u8be5\u547d\u4ee4\u5728\u8f93\u5165\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u751f\u6548\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u5b83\u4e0d\u4f1a\u66f4\u6539VSregister\uff0c\u56e0\u6b64\u5176\u6548\u679c\u4ec5\u6301\u7eed\u5230\u4e0b\u4e00\u6bb5\u843d\u7684\u5f00\u5934\u3002\u4e00\u822c\u89c4\u5219\u662f\uff1a\u8981\u8fdb\u884c\u6c38\u4e45\u6027\u66f4\u6539\uff0c\u6216\u8005\u66f4\u6539\u5c06\u6301\u7eed\u591a\u4e2a\u6bb5\u843d\u76f4\u5230\u60a8\u518d\u6b21\u66f4\u6539\u5b83\u7684\u503c\uff0c\u8bf7\u66f4\u6539\u3002\u4f7f\u7528nroff\u547d\u4ee4\u3002(\u8bf7\u53c2\u9605&#34\uff1b\u6b32\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u7b2c7\u8282\u3002)\u5982\u679c\u4f60\u5e0c\u671b\u6539\u53d8\u65e2\u7acb\u7aff\u89c1\u5f71\u53c8\u6301\u4e45\uff0c\u90a3\u5c31\u4e24\u8005\u517c\u800c\u6709\u4e4b\u3002\n+--+|\u88682||-ms\u7f16\u53f7\u5bc4\u5b58\u5668\u6458\u8981|+\u3002-+|\u6ce8\u518c\u8868\u3002\u91c7\u7528||\u540d\u79f0\u63a7\u5236\u751f\u6548\u9ed8\u8ba4\u503c||PS\u70b9\u5927\u5c0f\u4e0b\u4e00\u6bb5\u300210||\u4e0e\u4e0b\u4e00\u6bb5\u5782\u76f4\u95f4\u8ddd\u76f8\u6bd4\u300212||\u6240\u6709\u884c\u957f\u4e0b\u4e00\u6bb5\u30026i||\u6587\u672c||LT\u4e0b\u4e00\u9875\u884c\u957f\u4e0e\u9875\u6807\u9898LL||\u76f8\u540c||FL\u4e0b\u4e00FS 5.5i\u884c\u957f||\u811a\u6ce8||PD\u5782\u76f4\u8ddd\u79bb\u4e0b\u4e00\u6bb5\u3002.3v(\u7279\u7f57\u592b)||1v(\u7279\u7f57\u592b)||\u4e0b\u4e00\u4e2aDS\u7684DD\u5782\u76f4\u8ddd\u79bb\u30025v(\u7279\u7f57\u592b)||\u663e\u793a\u5668\u5468\u56f4\u76841v(\u7279\u7f57\u592b)||PI\u6bb5\u3002\u7f29\u8fdb\u4e0b\u4e00\u6bb5\u30025N||QI\u5de6\u3001\u53f3\u4e0b\u4e00QP 5N||QP\u7f29\u8fdb||FI\u811a\u6ce8\u7f29\u8fdb\u4e0b\u4e00FS 5N||PO\u4e0b\u4e00\u9875\u504f\u79fb\u91cf~1i(Troff)||0(Nroff)||HM\u9875\u7709\u8fb9\u8ddd\u4e0b\u4e00\u98751i||FM\u4e0b\u4e00\u9875\u9875\u811a\u8fb9\u8ddd1i||\u4e0b\u4e00\u9875\u524dM1\u95f4\u8dddHM/2||\u6807\u9898||\u4e0b\u4e00\u9875\u540eM4\u7a7a\u95f4FM/2||\u6807\u9898|+\u3002-+\u3002\n\u5728\u8bbe\u7f6e\u7f3a\u7701\u9875\u9762\u5e03\u5c40\u65f6\uff0c-ms\u63d0\u4f9b\u4e86\u516d\u4e2a\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u6765\u5b58\u50a8\u8981\u6253\u5370\u5728\u9875\u9762\u9876\u90e8\u548c\u5e95\u90e8\u7684\u8fde\u7eed\u6807\u9898\u3002\u4e0e\u6570\u5b57\u5bc4\u5b58\u5668\u4e00\u6837\uff0c\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u4e5f\u662f\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u4f4d\u7f6e\uff1b\u5b83\u4eec\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u7684\u5185\u5bb9\u662f\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u6570\u5b57\u503c\u3002\u9664\u7b2c\u4e00\u9875(\u5927\u6982\u6709\u6807\u9898)\u4e4b\u5916\uff0c\u6bcf\u9875\u9876\u90e8\u7684\u4e09\u6beb\u79d2\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u540d\u79f0\u662fLH\u3001CH\u548cRH\u3002\u5b83\u4eec\u8868\u793a\u6253\u5370\u4f4d\u7f6e\u7684\u5de6\u4fa7\u3001\u4e2d\u90e8\u548c\u53f3\u4fa7\n\u5bf9\u4e8enroff\u8f93\u51fa\uff0c\u9ed8\u8ba4\u503cch\u662f\u7531\u8fde\u5b57\u7b26\u62ec\u8d77\u6765\u7684\u5f53\u524d\u9875\u7801\uff1bcf\u5305\u542b\u8ba1\u7b97\u673a\u63d0\u4f9b\u7684\u5f53\u524d\u65e5\u671f\u3002\u5bf9\u4e8etroff\uff0cch\u503c\u4e5f\u5305\u542b\u9875\u7801\uff0c\u4f46cfis\u4e3a\u7a7a\u3002\u5bf9\u4e8enroff\u548ctroff\uff0c\u5176\u4ed6\u56db\u4e2a\u5bc4\u5b58\u5668\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u90fd\u662f\u7a7a\u7684\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4.ds(&#34\uff1b\u5b9a\u4e49\u5b57\u7b26\u4e32&#34\uff1b)\u4e3a\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u8d4b\u503c\u3002\u4f8b\u5982\uff1a\n\u8fd9\u4f1a\u5bfc\u81f4\u5b57\u7b26\u4e32&#34\uff1bNOT FOR PUBLICATION&#34\uff1b\u6253\u5370\u5728\u6bcf\u9875\u7684\u53f3\u4e0b\u89d2\u3002\u4e0d\u9700\u8981\u7528\u53cc\u5f15\u53f7\u5c06\u53c2\u6570\u62ec\u8d77\u6765\uff1b\u8fd9\u662f\u53c2\u6570\u5185\u7a7a\u683c\u89c4\u5219\u7684\u53e6\u4e00\u4e2a\u4f8b\u5916\u3002\u8981\u5220\u9664\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\uff0c\u53ea\u9700\u4f7f\u7528.rm\u547d\u4ee4\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u8981\u6e05\u9664\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668CH\uff0c\u4f7f\u540e\u7eed\u9875\u9762\u7684\u4e2d\u5fc3\u6807\u9898\u4e3a\u7a7a\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\u5728\u9875\u7709\u548c\u9875\u811a\u4e2d\uff0c\u9875\u7709\u548c\u9875\u811a\u90fd\u662f\u6307nroff\u7684\u81ea\u52a8\u9875\u9762\u8ba1\u6570\u5668\u7684\u7279\u6b8a\u7b26\u53f7\u3002\u5982\u679c\u8981\u5728\u9875\u7801\u7684\u4e24\u4fa7\u4f7f\u7528\u8fde\u5b57\u7b26\uff0c\u8bf7\u5c06\u5b83\u4eec\u653e\u5728\u547d\u4ee4\u4e2d%\u7684\u4efb\u610f\u4e00\u4fa7\u3002\n\u8fd8\u53ef\u4ee5\u751f\u6210\u5728\u5076\u6570\u9875\u548c\u5947\u6570\u9875\u4e0a\u4e0d\u540c\u7684\u81ea\u5b9a\u4e49\u9875\u7709\u548c\u9875\u811a\u3002.OH\u548c.EH\u5b8f\u5b9a\u4e49\u5947\u6570\u548c\u5076\u6570\u9875\u7709\uff0c\u800c.OF\u548c.EF\u5b9a\u4e49\u5947\u6570\u548c\u5076\u6570\u9875\u811a\u3002\u8fd9\u56db\u4e2a\u5b8f\u7684\u53c2\u6570\u5fc5\u987b\u5305\u542b\u5728\u4e00\u7ec4\u56db\u4e2a\u6487\u53f7\u4e2d\u3002\u4f8b\u5982\uff1a\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6807\u9898(\u6b64\u5904\u7684\u659c\u4f53\uff0c\u8bf7\u53c2\u9605\u7b2c2.4\u8282)\u901a\u8fc7\u62ec\u5728\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u6487\u53f7\u4e4b\u95f4\u7684\u65b9\u5f0f\u6253\u5370\u5728\u5947\u6570\u9875\u7684\u5de6\u4fa7\u3002\u4e2d\u95f4\u533a\u57df\u7559\u7a7a\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5728\u4e2d\u592e\u9875\u7709\u533a\u57df\u6253\u5370\u4efb\u4f55\u5185\u5bb9\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e24\u4e2a\u6807\u8bb0\u662f\u5355\u6487\u53f7\uff0c\u800c\u4e0d\u662f\u53cc\u5f15\u53f7\u3002\u9875\u7801\u6307\u5b9a(\u659c\u4f53\uff0c\u56e0\u4e3a\u5b83\u5728\u5b57\u4f53\u66f4\u6539\u8303\u56f4\u5185)\u51fa\u73b0\u5728\u7b2c\u4e09\u548c\u7b2c\u56db\u4e2a\u6487\u53f7\u4e4b\u95f4\u7684\u53f3\u4fa7\u3002\u5de6\u4fa7\u7684\u4efb\u4f55\u53d8\u4f53\u3002\u901a\u8fc7\u8c03\u6574\u7531\u56db\u4e2a\u6487\u53f7\u5206\u9694\u7684\u533a\u57df\u5185\u7684\u6807\u9898\u90e8\u5206\uff0c\u53ef\u4ee5\u521b\u5efa\u53f3\u4fa7\u4f4d\u7f6e\u3002\u91cd\u8981\u7684\u662f\uff0c\u4e0d\u8981\u5728\u6807\u9898\u6587\u672c\u4e2d\u4f7f\u7528\u6487\u53f7\uff0c\u9664\u975e\u60a8\u5728\u6807\u9898\u7684\u5de6\u3001\u4e2d\u548c\u53f3\u90e8\u5206\u5468\u56f4\u4f7f\u7528\u4e0d\u540c\u7684\u5206\u9694\u7b26\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u5b57\u7b26\u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u53ea\u8981\u5b83\u4e0d\u4f7f\u7528&#39\uff1b\u5728.OH\u3001.EH\u3001.OF\u6216.EF\u7684\u53c2\u6570\u4e2d\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5728\u5176\u4ed6\u4f4d\u7f6e\u3002\u6807\u9898\u957f\u5ea6\u7684\u9ed8\u8ba4\u9650\u5236\u662f9\u4e2a\u5355\u8bcd\u3002\u5982\u679c\u9700\u8981\u66f4\u591a\u5185\u5bb9\uff0c\u8bf7\u5c06\u6574\u4e2a\u6807\u9898\u53c2\u6570\u62ec\u5728\u53cc\u5f15\u53f7\u4e2d\uff0c\u4e5f\u5305\u62ec\u56db\u4e2a\u6487\u53f7\u3002\n\u53e6\u4e00\u4e2a\u6d89\u53ca\u9875\u7709\u548c\u9875\u811a\u7684\u65b0\u529f\u80fd\u662f.TM\u5b8f\uff0c\u7528\u4e8e\u6839\u636e\u4f2f\u514b\u5229\u6807\u51c6\u6253\u5370\u8bba\u6587\u3002(\u6b64\u8bba\u6587\u6a21\u5f0f\u975e\u5e38\u7c7b\u4f3c\u4e8e-me\u4e2d\u7684.th\u5b8f)\u3002\u5b83\u4f1a\u81ea\u52a8\u5c06\u9875\u7801\u653e\u5728\u6bcf\u9875\u7684\u53f3\u4e0a\u89d2\uff0c\u5e76\u5bf9\u7b2c\u4e00\u9875\u8fdb\u884c\u7f16\u53f7\u3002\u6b64\u5916\uff0c\u5b83\u4f1a\u53d6\u6d88\u4e2d\u95f4\u9875\u811a\u4e2d\u7684\u65e5\u671f\uff0c\u5e76\u5c06\u9664\u5f15\u53f7\u3001\u663e\u793a\u548c\u4fdd\u7559\u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\u52a0\u500d\u3002\u5b83\u5e94\u8be5\u7528\u5728\u7ec4\u6210\u8bba\u6587\u7684\u6bcf\u4e2a\u6587\u4ef6\u7684\u9876\u90e8\u3002\u4f5c\u4e3a\u526f\u4ea7\u54c1\uff0c.TM\u7684\u8c03\u7528\u5b9a\u4e49\u4e86\u7ae0\u8282\u6807\u9898\u7684.CT\u5b8f\u3002\u6bcf\u5f53\u65b0\u7ae0\u8282\u5f00\u59cb\u65f6\uff0c\u4f7f\u7528\u6b64\u5b8f\u4f1a\u5c06\u9875\u7801\u4ece\u53f3\u9875\u7709\u79fb\u52a8\u5230\u4e2d\u5fc3\u9875\u811a\u3002\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u5373\u4f7f\u6ca1\u6709\u8bba\u6587\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u4f7f\u7528.P1(P ONE)\u5b8f\uff0c\u6253\u5370\u7b2c1\u9875\u7684\u9875\u7709(\u5305\u62ec\u9875\u7801)\u3002\u5982\u679c\u8981\u4f7f\u7528\u7f57\u9a6c\u6570\u5b57\u9875\u7801\uff0c\u8bf7\u5c06\u8be5\u884c\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\uff1a\n\u5728\u5f15\u7528\u9875\u7801\u7684\u4efb\u4f55\u884c\u4e2d-\u5176\u4e2d\uff0c\u4f8b\u5982\u8981\u653e\u7f6e\u9875\u7709\u6216\u9875\u811a-\u4f7f\u7528\\\\n(PN\u800c\u4e0d\u662f%)\u3002\u8981\u8fd4\u56de\u5230\u963f\u62c9\u4f2f\u6570\u5b57\u5e76\u4ece\u7b2c1\u9875\u5f00\u59cb\u65b0\u7684\u4e00\u8282\uff0c\u8bf7\u63d2\u5165\u4ee5\u4e0b\u884c\uff1a\n\u5982\u679c\u8bbe\u7f6e\u5b57\u7b26\u4e32\u548c\u6570\u5b57\u5bc4\u5b58\u5668\u7684\u503c\u7684\u547d\u4ee4\u8981\u4ece\u8f93\u51fa\u7684\u7b2c\u4e00\u9875\u8d77\u751f\u6548\uff0c\u5219\u5b83\u4eec\u5e94\u8be5\u653e\u5728\u8f93\u5165\u6587\u4ef6\u7684\u5f00\u5934\u6216\u9644\u8fd1\uff0c\u5728\u5f00\u59cb\u5b8f\u4e4b\u524d(\u800c\u5f00\u59cb\u5b8f\u5fc5\u987b\u5728\u7b2c\u4e00\u884c\u6587\u672c\u4e4b\u524d)\u3002(\u521d\u59cb\u5316\u6216\u5f00\u59cb\u5b8f\u53ef\u4ee5\u662f\u6807\u9898\u5b8f\uff0c\u4e5f\u53ef\u4ee5\u662f\u6bb5\u843d\u6216\u5c0f\u8282\u6807\u9898\u5b8f\u4e4b\u4e00\u3002\u8fd9\u4e00\u70b9\u5728\u7b2c1.3\u8282\u4e2d\u8ba8\u8bba\u3002\u8f93\u5165\u6587\u4ef6\u7684\u793a\u4f8b\u5f00\u59cb\u5728\u7b2c6\u8282\u4e2d\u663e\u793a\u3002)\u56e0\u4e3a\u5f00\u59cb\u5b8f\u4f1a\u5bfc\u81f4\u6240\u8c13\u7684\u4f2a\u3002\u5bf9\u4e8e\u7eb8\u5f20\u7684\u7b2c\u4e00\u9875(\u5305\u62ec\u8be5\u9875\u7684\u9875\u9996\u5904\u7406)\uff0c\u5c24\u5176\u91cd\u8981\u7684\u662f\uff0c\u5728\u8fc7\u6e21\u5230\u8981\u751f\u6548\u7684\u9875\u9762\u4e4b\u524d\uff0c\u5e94\u653e\u7f6e\u66f4\u6539\u9875\u9762\u504f\u79fb\u91cf\u3001\u4e0a\u4e0b\u8fb9\u8ddd\u3001PO\u3001HM\u548cFM\u7f16\u53f7\u5bc4\u5b58\u5668\u4ee5\u53ca\u9875\u7709\u5b57\u7b26\u4e32\u5bc4\u5b58\u5668\u7684\u503c\u7684\u547d\u4ee4\u3002\u9644\u5f55B\u5217\u51fa\u4e86\u53ef\u4ee5\u8bbe\u7f6euPA\u6587\u4ef6\u7684\u53ef\u80fd\u547d\u4ee4\u548c\u53ef\u4ee5\u542f\u52a8\u6587\u4ef6\u7684\u547d\u4ee4\u3002\n\u67d0\u4e9b\u5916\u8bed\u91cd\u97f3\u7b26\u53f7\u5df2\u9884\u5b9a\u4e49\u4e3a-ms\u5305\u4e2d\u7684\u5b57\u7b26\u4e32\u3002\u8981\u4f7f\u7528\u5b83\u4eec\uff0c\u8bf7\u5728\u8981\u5f3a\u8c03\u7684\u5b57\u6bcd\u4e4b\u524d\u653e\u7f6e\u5bf9\u91cd\u97f3\u5b57\u7b26\u4e32\u7684\u5f15\u7528\u3002\u5728\u8f93\u5165\u6587\u672c\u4e2d\uff0c\u5b57\u7b26\u4e32\u5f15\u7528\u4f4d\u4e8e\u5b57\u6bcd&#34\uff1be&#34\uff1b\u4e4b\u524d\uff0c\u4f8b\u5982\uff1a\n\u4ee5\u4e0b\u662fDEFAULT\u63d0\u4f9b\u7684\u4e03\u4e2a\u91cd\u97f3\u5b57\u7b26\u4e32\u7684\u5217\u8868\u53ca\u5176\u6253\u5370\u5f62\u5f0f\u7684\u793a\u4f8b\uff1a\n\u8f93\u5165\u8f93\u51fa\u8f93\u5165\u8f93\u51fa\u8f93\u51fa\\*&#39\uff1be\u00e9\\*~a\u00e3\\*`e\u00e8\\*\uff1au\u00fc\\*\uff0cc\u00e7\\*ce[\u5bf9\u4e0d\u8d77\uff0c\u65e0\u6cd5\u5728HTML\u4e2d\u505a--JRP]\\*.E\u00ea.\u3002\n\u73b0\u5728\u6709\u5927\u91cf\u989d\u5916\u7684\u5916\u56fd\u91cd\u97f3\u7b26\u53f7\u4ee5\u53ca\u4e0a\u9762\u4e03\u4e2a\u53d8\u97f3\u7b26\u53f7\u7684\u66f4\u597d\u5b9a\u4e49\u53ef\u4f9b\u4f7f\u7528\u3002\u8981\u4f7f\u7528\u5b83\u4eec\uff0c\u547d\u4ee4.AM\u5fc5\u987b\u5305\u542b\u5728\u6587\u6863\u7684\u5f00\u5934\u3002\u4e0e\u9ed8\u8ba4\u7684-ms\u91cd\u97f3\u7b26\u53f7\u4e0d\u540c\uff0c\u65b0\u7684\u91cd\u97f3\u5b57\u7b26\u4e32\u5e94\u8be5\u653e\u5728\u8981\u5f3a\u8c03\u7684\u5b57\u6bcd\u4e4b\u540e\u3002\u4f46\u662f\uff0c\u67d0\u4e9b\u5916\u8bed\u7ed3\u6784\u5b8c\u5168\u7531\u91cd\u97f3\u5b57\u7b26\u4e32\u7ec4\u6210\u3002\u8bf7\u5c0f\u5fc3\u533a\u5206\u4e0b\u8868\u4e2d\u7684\u54ea\u4e2a\u662f\u54ea\u4e2a\uff1a[\u5bf9\u4e0d\u8d77\uff0c\u5176\u4e2d\u4e00\u4e9b\u662f&#39\uff1b\n\u91cd\u97f3\u7b26\u53f7\u8f93\u5165output--\u6025\u6027\u91cd\u97f3e*&#39\uff1b\u00e9Grave accent e\\*`\u00e8spirflex o\\*\u00f4cedilla c\\*\uff0c\u00e7tilde n\\*~\u00f1problem\\*\uff1f\u611f\u53f9\\*\uff01\u5143\u97f3u*\uff1a\u00fcdigraph s 8\uff1fhacek c*v\u9a6c\u514b\u9f99a*_\u4e0b\u70b9s\\*\u3002o-\u659c\u6760o*/\u00f8angstrom a*o\u00adyogh KNI\\*(Th\uff1fthorn\\*(TH Eth\\*(D-Ig-Eth\\*(d-Ika Hooko\\*Q ae Ligature\\*(ae\u00e6AE Ligature\\*(Ae\uff1fOE Ligature\\*(OE OLigature\\*(Oe\uff1fOe Ligature\\*(Oe\u3002\n\u5982\u679c.am\u4e0d\u5728\u6587\u4ef6\u9876\u90e8\uff0c\u8fd9\u4e9b\u65b0\u7684\u53d8\u97f3\u7b26\u53f7\u5c06\u4e0d\u4f1a\u51fa\u73b0\u6216\u653e\u7f6e\u5728\u9519\u8bef\u7684\u5b57\u6bcd\u4e0a\u3002\u5982\u679c.am\u4f4d\u4e8e\u6587\u4ef6\u7684\u9876\u90e8\uff0c\u5219\u9ed8\u8ba4\u7684-ms\u91cd\u97f3\u7b26\u53f7\u5c06\u653e\u7f6e\u5728\u9519\u8bef\u7684\u5b57\u6bcd\u4e0a\u3002\u9009\u62e9\u4e00\u7ec4\u6216\u53e6\u4e00\u7ec4\u5e76\u4e00\u81f4\u4f7f\u7528\u3002\n\u4e3a\u4e86\u5e2e\u52a9\u751f\u6210\u53ef\u4ee5\u4f7f\u7528nroff\u548ctroff\u6b63\u786e\u683c\u5f0f\u5316\u7684\u6587\u672c\uff0c\u6709\u4e00\u4e9b\u65b0\u7684\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u8fd9\u4e24\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u5b9a\u4e49\u4e86\u7834\u6298\u53f7\u548c\u5f15\u53f7\u3002\\(*-\u5b57\u7b26\u4e32\u5c06\u5728nroff\u4e2d\u751f\u6210\u4e24\u4e2a\u8fde\u5b57\u7b26\uff0c\u4f46\u5728troff\u4e2d\u5b83\u5c06\u751f\u6210\u4e00\u4e2aem\u7834\u6298\u53f7--\u5c31\u50cf\u8fd9\u6837\u3002\\*q\u548c\\(*U\u5b57\u7b26\u4e32\u5c06\u5728troff\u4e2d\u751f\u6210\u5f00\u59cb\u5f15\u53f7\u548c\u7ed3\u675f\u5f15\u53f7\uff0c\u4f46\u5728nroff\u4e2d\u751f\u6210\u76f4\u63a5\u7684\u53cc\u5f15\u53f7\u3002(\u5728\u6392\u7248\u4e2d\uff0c\u53cc\u5f15\u53f7\u3002\nms\u5b8f\u7ec4\u6210\u4e86\u4e00\u4e2a\u8f6f\u4ef6\u5305\uff0c\u56e0\u4e3a\u5b83\u4eec\u65e8\u5728\u6ee1\u8db3\u5927\u591a\u6570\u683c\u5f0f\u5316\u9700\u6c42\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u5b66\u4e60\u5173\u4e8e\u66f4\u591a\u7ec4\u4ef6\u7684\u5927\u91cf\u8be6\u7ec6\u4fe1\u606f\u3002\n..", "note_en": "There are five new macros to help produce a table of contents.All entries intended for the table of contentsmust be enclosed in  .XSand  .XEpairs, with optional  .XAmacros for additional entries.The first argument to  .XS or .XA specifies the page number,to be printed after a line of dots.If this first argument is  no, no pagenumber will be printed, as when a chapter and itsfirst subsection begin on the same page.The second argument specifies the indentation level;if this argument is missing,the current indentation stays in effect.Finally, the  .PXmacro prints out the table of contents.If you forget it, nothing will happen.Here is a sample of typical input and output text: .XS ii  (Start)Introduction.XA 1Chapter 1: History.XA noChapter 2: Evidence.XA 24 5  (indent 5 ens)Heuristic Assumptions.XA 35Experimental Data.XA 56 0  (go back to original indentation)Conclusions.XE  (End).PX  (Print out)  Table of ContentsIntroduction ..................... iiChapter 1: History ............... 1Chapter 2: Evidence Heuristic Assumptions ........ 24 Experimental Data ............ 35Conclusions ...................... 56\nThe  .XS and  .XEpairs may also be used throughout the body of a textto collect a table of contents automatically,including automatically generated page numbers.For example, you might want to index each section header,in which case you would do this: If you are using numbered headings produced with the .NH macro, and you want the headingnumbers included in thetable of contents, use this format: The \\*(SN string will be replaced withthe number of the heading when the table of contents is output,for example: Table of Contents1. Phylum Protozoa ................... 12. Phylum Porifera ................... 63. Phylum Coelenterata ............... 10\n Or you can use the  .TCmacro (rather than  .PX)at the end of the paper to print out the table of contents.If you forget it, nothing will happen.The two macros are almost identical, but .TC causes a page break and resets thepage number to i (lower case Roman numeral one).(Page i will thus appear after the last page of thedocument, but nothing prevents you from shuffling itup to the front.)\n Note that this automatic indexing method will onlywork correctly within a single run.On the typesetter, a single run is limited to 35 pages.\n  If you do not request otherwise, nroff produces output in single-column format.By placing the command  .2Cin your input file, the outputis printed in double-column format beginningat that point.Each column will have a width 7/15 that of thetext line length in single-columnformat, and the &#34;gutter,&#34; or gap between columns,will be 1/15 of the full line length.To return to single-column, use the command .1C.Switching from double to single-column always causesa skip to a new page.\n   This will cause output to be formatted in as many columnsof the specified width as will fit on the page.The column-width may be specified in any unitof scale, but if no unit is indicatedthe setting will be understood as a number of ens.(Units of scale are discussed in  section 2.15.)An  .MCwithout any column-width specification means the same thing as .2C. Any change in the number of columns,except from one to a larger number,causes a skip to a new page.\n  The  -ms package provides macros for keepinga block of text all together on one page.There are two ways of doing this.The standard &#34;keep&#34; is begun with the macro .KS and ended with .KE.If there is enough room on the current page for thematerial contained between these two macros, nroff prints it there; if not,it skips to the next page and prints it there instead.The other type, called a &#34;floating keep,&#34;is begun with  .KFand ended with  .KE.If it is necessary to skip to a new page toprint this material, nroff first fills the current page with theordinary text that follows the keep in the input file.This avoids leaving blank space at the bottom of the pagepreceding the kept material.A floating keep is most often used for positioninga table or some other type of material not partof the strict logical sequence of text.Whichever style of keep you use,it is essential to end each one with .KE to complete the pair.Otherwise, the remainder of your text will be processed as a keep,and you will get a &#34;macro/diversion overflow.&#34;\n In double- or multi-column formats, the keep macrosattempt to place all the kept material in the same column.If the material enclosed within a keep turnsout to require more than a page of space,or more than a column in multi-column format,it will start on a new page or column and simplyrun over onto the following page or column.\n  Occasionally it is desirable to format some text withoutfilling and adjusting it-for example,a list of items or a stanza of poetry.To turn off filling so that each output linewill correspond exactly to one line of input,use the command .DS to start the material and .DE to end it.By default, this material is indented from the left marginby the value of PI.Here is some sample input:\n        Note that in the example above,each line is centered individually.To produce a left-adjusted block that iscentered as a piece on the page,use  .DS B to start:\n  Another possibility is  .DS I,which means the same thing as plain  .DS.You can specify the amount of indentation by includinganother argument after either of these constructions; .DS I 3 or  .DS 3begins a display to be indented 3 ens from the margin.\n Any of the displays described aboveis automatically put into a standard keep.As with ordinary blocks of kept text, if there is notenough room for the display on the current page,the entire display will be saved and put onto the next page.If you do not want to keep displays on a single page,and want to avoid unsightly gaps in the text,or if you have displays that are longer than a page,use the display commands  .BD, .CD,  .ID, or .LD, instead of .DS B,  .DS C, .DS I, or  .DS L,respectively.These commands also have to be turned off with  .DE to end any type of display.Failure to include the ending command causes problemssimilar to those caused by failure to close a footnote or a keep.\n  One of the things  -ms does to expeditedocument formatting is to establish a standardpage layout style.In papers produced with  -ms,the text line has a default length of six inches;the indentation of the first line of a paragraph isfive ens; the page number is printed at the top centerof every page after page one;and the header and footer margins are an inch wide.Many of these features are controlled by valuesstored by  -ms as variables in the computer&#39;s memory.This makes it possible to alter the default formatcharacteristics by changing the values that control them.\n The memory locations where these values are storedare called  number registersand  string registers.The former hold numeric values; the latter hold strings of characters.Number and string registers have names like those of commands,one or two characters long.For instance, the value of the line length isstored in a number register named  LL.Unless you give a command to change the value storedin register  LL,it will contain the standard or defaultvalue (6 inches) assigned to it by  -ms.\n  In order to change a dimension such as the line lengthfrom its default value,you can reset the associated number register.To do this, use the  nroff command .nr as follows:\n  The first argument is the name of a numberregister, and the second is the value being assigned to it.The value may be expressed as an integeror may contain a decimal fraction.When setting the value of a number register,it is almost always necessary to include a unit of scaleimmediately after the value.In the example above,the &#34;i&#34; as the unit of scale lets  nroffknow you mean five  inchesand not five of some other unit of distance.But the point size (PS) and vertical spacing (VS)registers are exceptions to this rule:ordinarily they should be assigned a value as a number of points without indicating the unit of scale.For example, to change the vertical spacing from 12 points(single spacing) to 24 points (double spacing),use the command:\n  In the unusual case where you want to set the verticalspacing to more than half an inch (more than 36 points),include a unit of scale in setting the  VS register.Table 1 explains the units ofmeasurement available with  nroff and  troff.\n +-----------------------------------------------------------+ | Table 1 | | Units of Measurement in Nroff and Troff | +-----------------------------------------------------------+ | __Meaning For__ | | Unit Abbr Nroff Troff | | point p 1/72 inch 1/72 inch | | pica P 1/6 inch 1/6 inch | | em m width of one distance equal | | character to number of | | points in the | | current typesize | | en n width of one half an em | | character | | vertical v amount of space in which each | | space line of text is set, measured | | baseline to baseline | | inch i inch inch | | centimeter c centimeter centimeter | | machine u 1/240 inch 1/432 inch | | unit | +-----------------------------------------------------------+\n The units  point,  pica,  em,and  en are units of measurement used traditionally in typesetting.The  vertical spaceunit also corresponds to the typesetting term &#34;leading,&#34;referring to the distance from the baselineof one line of type to the baseline of the next.Em and en are particularly interestingin that they are proportional to the type size currently in use(normally expressed as a number of points).An em is the distance equal tothe number of points in the type size(roughly the width of the letter &#34;m&#34; in that point size),while an en is half that (about the width of the letter &#34;n&#34;).These units are convenient for specifying dimensionssuch as indentation.In  troff, em and en have their traditional meanings--one em of distance is equal to two ens.For  nroff, on the other hand,em and en both mean the same quantity of distance,the width of one typewritten character.\n The  machine unitis a special unit to which almost all dimensions are converted by nroff and  troff internallywhen storing them in memory.Although such a unit of measurement exists, it would never be usedto modify default dimensions.\n One important aspect of number registers to remember is thata change to a register such as  LLdoes not immediately change the related dimensionat that point in the output.Instead, in the case of the line length,the change takes place at the beginning ofthe next paragraph, where  -ms resetsvarious dimensions to the current values of therelated number registers.Table 2 lists, for each register, the placeat which a change to the register actually takes effect.\n If the effect is needed immediately--if, for instance,you need to change the vertical spacing in the middle of a paragraph--you must use the  nroff command .vs,which controls the vertical spacing directly.It takes effect at the place where it occursin your input file.Since it does not change the  VSregister, however,its effect lasts only until the beginning of thenext paragraph.As a general rule:to make a permanent change, or one that will lastfor several paragraphs until you want to change it again,alter the value of the  -ms register.If the change must happen immediately, somewhereother than the point shown in Table 2,use the  nroff command.(See &#34;For More Information,&#34;  section 7.)If you want the change to be both immediate and lasting,do both.\n +-----------------------------------------------------------+ | Table 2 | | Summary of -ms Number Registers | +-----------------------------------------------------------+ | Reg. Takes | | Name Controls Effect Default | | PS point size next para. 10 | | VS vertical spacing next para. 12 | | LL line length next para. 6i | | of text | | LT line length next page same as LL | | of page titles | | FL line length next FS 5.5i | | of footnotes | | PD vertical distance next para. .3v (troff) | | 1v (nroff) | | DD vertical distance next DS .5v (troff) | | around displays 1v (nroff) | | PI para. indent next para. 5n | | QI left and right next QP 5n | | indent for QP | | FI footnote indent next FS 5n | | PO page offset next page ~1i (troff) | | 0 (nroff) | | HM header margin next page 1i | | FM footer margin next page 1i | | M1 space before page next page HM/2 | | titles | | M4 space after bottom next page FM/2 | | titles | +-----------------------------------------------------------+\n  In setting up the default page layout, -ms provides for six string registersto store the running titles to be printed at tops andbottoms of pages.Like number registers, string registers arestorage locations in the computer&#39;s memory;they differ in that their contentsare strings of characters rather than numeric values.The three  -ms string register namesfor the top of every page other than the first,which presumably has a title, are LH,  CH,and  RH.They indicate the printed positions of left, center, andright.The string registers for the bottom of the page, including the first, are LF,  CF,and  RF,\n For  nroff output, the default value of CHis the current page numbersurrounded on either side by hyphens; CFcontains the current date as supplied by the computer.For  troff,  CHalso contains the page number but  CFis empty.The other four registers are empty by defaultfor both  nroff and  troff.You can use the command .ds(&#34;define string&#34;) to assign a value to a string register.For example:\n  This causes the character string &#34;Not for publication&#34;to be printed at the bottom right of every page.No double-quote marks are needed to enclose the argument;this is another exception to the rule about spaces within arguments.In order to remove a string register,simply use the  .rm command.For instance, to clear string register CH,making the center header blank on following pages,use the command:\n    In page titles, both headers and footers, &#34;%&#34; isa special symbol referring to  nroff&#39;s automatic page counter.If you want hyphens on either side of the page number,place them on either side of the % in the command.\n It is also possible to produce custom headers and footersthat are different on even and odd pages.The  .OH and .EH macros define odd and even headers, while .OF and  .EFdefine odd and even footers.Arguments to these four macros must be enclosedwithin a set of four apostrophes.For example:\n  In this example the title (for the italicizing here, see section 2.4)is printed on the left side of odd pages by being enclosed betweenthe first and second apostrophe.The center area is left blank because nothingis to be printed in the center header area.Note that these two marks are single apostrophe marks,not double quotation marks.The page number designation(italicized because it is within the font changes)appears on the right side between the third and fourth apostrophes.Any variations of the left, center, and right positions can bemade by adjusting the parts of a title within areasdelimited by the four apostrophes.It is important not to use an apostrophe in the header text,unless you use a different delimiteraround the left, center, and right portions of the title.You can use any character as a delimiter,provided it doesn&#39;t appear elsewhere in the argument to .OH,  .EH,  .OF,or  .EF.The default limit to title length is nine words.If you need more, enclose the entire title argumentin double quotation marks, also including the four apostrophes.\n Another new feature that involves page headers and footersis the  .TMmacro for printing theses according to Berkeley standards.(This thesis mode is much like the  .thmacro in -me).It will automatically put page numbersin the upper right-hand corner of every page,and number the first page.In addition it suppresses the date in the center footer,and doublespaces everything except quotes, displays, and keeps.It should be used at the top of each file making up your thesis.As a by-product, the invocation of  .TMdefines the  .CTmacro for chapter titles.Using this macro whenever a new chapter begins willmove the page number from the right header to the center footer.In a similar way the  .P1(P one) macro,which can be used even without thesis mode,prints the header (including page number) on page 1.If youwant roman numeral page numbering,put this line at the beginning of the file:\n  And in any line referring to the page number-wherein the header or footer to put it, for example-use\\\\n(PN rather than %.To go back to arabic numeralsand start a new section with page 1, insert the lines:\n   If commands that set the values of string and number registersare meant to take effect as of the first page of output,they should be placed at or near the beginning of the input file,before the beginning macro(which, in turn, must precede the first line of text).(The initializing or beginning macro can be thetitle macroor one of the paragraph or section heading macros.This point is discussed in  section 1.3.Sample beginnings of input files are shown in  section 6.)Since the beginning macro causes what is calleda &#34;pseudo page break&#34; onto page one of the paper,including the top-of-page processing for that page,it is particularly important that commandschanging the value of the page offset, top and bottom margins, the PO,  HM,and  FMnumber registers, and the page header string registers,be placed before the transition onto the pagewhere they are intended to take effect. Appendix B gives a list ofpossible commands that can set upa file and those that can start a file.\n  Certain foreign-language accent markshave been predefined as strings in the  -ms package.Use them by placing a reference to the accent stringbefore the letter being accented.The string reference \\*&#39;placed immediately before the letter &#34;e&#34; in input text,as in:\n    Here is a list of the seven accent strings provided by defaultwith examples of their printed form:\n Input Output Input Output \\*&#39;e \u00e9 \\*~a \u00e3 \\*`e \u00e8 \\*:u \u00fc \\*,c \u00e7 \\*Ce [sorry, can&#39;t do in HTML--jrp] \\*.e \u00ea\n There are now a large number of additional foreign accent marksas well as better definitions of the seven diacritical marksabove available for use.To use them, the command  .AMmust be included at the beginning of your document.Unlike the default  -ms accent marks,the new accent strings should be placed after the letter being accented.Certain foreign-language constructs, however,are entirely made up of the accent string.Be careful to distinguish which is which in the following list:[Sorry, some of these aren&#39;t available in HTML--jrp.]\n accent mark input output----------------------------------------------------------------- acute accent e\\*&#39; \u00e9 grave accent e\\*` \u00e8 circumflex o\\*^ \u00f4 cedilla c\\*, \u00e7 tilde n\\*~ \u00f1 question \\*? exclamation \\*! umlaut u\\*: \u00fc digraph s \\*8 \u00df hacek c\\*v macron a\\*_ underdot s\\*. o-slash o\\*/ \u00f8 angstrom a\\*o \u00e5 yogh kni\\*3t Thorn \\*(Th \u00de thorn \\*(th \u00fe Eth \\*(D- \u00d0 eth \\*(d- \u00f0 hooked o \\*q ae ligature \\*(ae \u00e6 AE ligature \\*(Ae \u00c6 oe ligature \\*(oe OE ligature \\*(Oe\n These new diacritical marks will not appear or will beplaced on the wrong letter if .AMis not at the top of your file.If .AM is at the top of your file,the default  -ms accent marks will be placedon the wrong letter.Choose one set or the other and use it consistently.\n As an aid in producing text that will format correctlywith both  nroff and  troff,there are some new string definitions that define dashesand quotation marks for each of these two formatting programs.The \\(*- string will yield two hyphens in  nroff,but in  troff it will produce an em dash--like this one.The \\*Q and \\(*U stringswill produce open and close quotes in  troff,but straight double quotes in  nroff.(In typesetting, the double quote characteris traditionally considered bad form.)\n  The  -ms macros make up a package in the sense thatthey are designed to meet most formatting needs,and to make it unnecessary to learn a large amount of detailabout the more comp\n......", "posttime": "2020-05-12 15:06:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ms,text,\u6253\u5370", "title": "\u4f7f\u7528-ms\u5b8f\u8bbe\u7f6eUNIX\u6587\u672c\u683c\u5f0f(1984)", "title_en": "UNIX Text Formatting Using the -ms Macros (1984)", "transed": 1, "url": "https://www.hactrn.net/ietf/rfcgen/textms.html", "via": "", "real_tags": ["ms", "text", "\u6253\u5370"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1001777, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u535a\u5ba2\u8ba8\u8bba\u4e86\u4e00\u4e2a\u8001\u95ee\u9898\uff0c\u56fe\u50cf\u683c\u5f0f\u89e3\u6790\u5668\u4e2d\u7684\u6f0f\u6d1e\uff0c\u5728\u4e00\u4e2a\u65b0\u7684(\u5443)\u4e0a\u4e0b\u6587\u4e2d\uff1a\u5728\u6d41\u884c\u7684Messenger\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u65e0\u4ea4\u4e92\u4ee3\u7801\u8def\u5f84\u4e0a\u3002\u672c\u7814\u7a76\u7684\u91cd\u70b9\u662fApple\u751f\u6001\u7cfb\u7edf\u53ca\u5176\u63d0\u4f9b\u7684\u56fe\u50cf\u89e3\u6790API\uff1aImageIO\u6846\u67b6\u3002\u5728\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u4e2d\u53d1\u73b0\u4e86\u591a\u4e2a\u6f0f\u6d1e\uff0c\u62a5\u544a\u7ed9\u4e86Apple\u6216\u5404\u81ea\u7684\u5f00\u6e90\u56fe\u50cf\u5e93\u7ef4\u62a4\u4eba\u5458\uff0c\u5e76\u968f\u540e\u8fdb\u884c\u4e86\u4fee\u590d\u3002\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c\u4e3a\u5c01\u95ed\u6e90\u7801\u4e8c\u8fdb\u5236\u6587\u4ef6\u5b9e\u73b0\u4e86\u4e00\u79cd\u8f7b\u91cf\u7ea7\u3001\u4f4e\u5f00\u9500\u7684\u5f15\u5bfc\u6a21\u7cca\u65b9\u6cd5\uff0c\u5e76\u4e0e\u672c\u6587\u4e00\u8d77\u53d1\u5e03\u3002\n\u91cd\u7533\u4e00\u70b9\u91cd\u8981\u7684\u662f\uff0c\u672c\u535a\u5ba2\u4e2d\u63cf\u8ff0\u7684\u6f0f\u6d1e\u53ef\u4ee5\u901a\u8fc7\u6d41\u884c\u7684\u4fe1\u4f7f\u8bbf\u95ee\uff0c\u4f46\u4e0d\u662f\u5176\u4ee3\u7801\u5e93\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u4fee\u590d\u5b83\u4eec\u4e0d\u662f\u4fe1\u4f7f\u4f9b\u5e94\u5546\u7684\u8d23\u4efb\u3002\n\u5728\u5bf9\u6d41\u884c\u7684Messenger\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\u65f6\uff0c\u6211\u5728\u65e0\u9700\u7528\u6237\u4ea4\u4e92\u5373\u53ef\u8bbf\u95ee\u7684\u4ee3\u7801\u8def\u5f84\u4e0a\u9047\u5230\u4e86\u4ee5\u4e0b\u4ee3\u7801(\u624b\u52a8\u53cd\u7f16\u8bd1\u4e3aobjc\u5e76\u7565\u5fae\u7b80\u5316)\uff1a\n\u6b64\u4ee3\u7801\u5bf9\u4f5c\u4e3a\u6765\u81ea\u53d1\u9001\u65b9\u7684\u4f20\u5165\u6d88\u606f\u7684\u4e00\u90e8\u5206\u63a5\u6536\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4ece\u8be5\u6570\u636e\u5b9e\u4f8b\u5316\u4e00\u4e2aUIImage\u5b9e\u4f8b\u3002\u7136\u540e\uff0cUIImage\u6784\u9020\u51fd\u6570\u5c06\u5c1d\u8bd5\u81ea\u52a8\u786e\u5b9a\u56fe\u50cf\u683c\u5f0f\u3002\u7136\u540e\uff0c\u5c06\u63a5\u6536\u5230\u7684\u56fe\u50cf\u4f20\u9012\u7ed9\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\u6b64\u4ee3\u7801\u7684\u76ee\u7684\u662f\u5448\u73b0\u8f93\u5165\u56fe\u50cf\u7684\u8f83\u5c0f\u5c3a\u5bf8\u7248\u672c\uff0c\u4ee5\u7528\u4f5c\u7528\u6237\u901a\u77e5\u4e2d\u7684\u7f29\u7565\u56fe\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u7c7b\u4f3c\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6Messenger\u5e94\u7528\u7a0b\u5e8f\u4e2d\u627e\u5230\u3002\u672c\u8d28\u4e0a\uff0c\u4e0a\u9762\u6240\u793a\u7684\u4ee3\u7801\u4f1a\u5c06Apple\u7684UIImage\u56fe\u50cf\u89e3\u6790\u548cCoreGraphics\u56fe\u50cf\u6e32\u67d3\u4ee3\u7801\u53d8\u62100click\u653b\u51fb\u9762\u3002\n\u4ece\u5f00\u53d1\u9488\u5bf9iMessage\u6f0f\u6d1e\u7684\u653b\u51fb\u4e2d\u83b7\u5f97\u7684\u4e00\u4e2a\u89c1\u89e3\u662f\uff0c\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u524d\u63d0\u6761\u4ef6\uff0c\u5219\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528\u6240\u63cf\u8ff0\u7684\u6280\u672f\u5229\u7528\u5185\u5b58\u635f\u574f\u6f0f\u6d1e\u8fdb\u884c\u653b\u51fb\uff1a\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\uff0c\u8be5\u6f0f\u6d1e\u53ef\u4ee5\u7528\u6765\u7834\u574f\u6307\u5411objc\u5bf9\u8c61(\u6216\u7c7b\u4f3c\u5bf9\u8c61)\u7684\u6307\u9488\uff0c\u7136\u540e\u6784\u9020\u4e00\u4e2a\u5d29\u6e83\u7684\u9884\u8a00\u6765\u7ed5\u8fc7ASLR\uff0c\u7136\u540e\u83b7\u5f97\u4ee3\u7801\u6267\u884c\u3002\n\u5728\u5f53\u524d\u7684\u653b\u51fb\u573a\u666f\u4e2d\uff0c\u6240\u6709\u7684\u524d\u63d0\u6761\u4ef6\u90fd\u5f97\u5230\u4e86\u6ee1\u8db3\uff0c\u4ece\u800c\u4fc3\u4f7f\u4eba\u4eec\u5bf9\u66b4\u9732\u7684\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u7684\u5065\u58ee\u6027\u8fdb\u884c\u4e86\u4e00\u4e9b\u7814\u7a76\u3002\u67e5\u770bUImage\u7684\u6587\u6863\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a\u201c\u60a8\u4f7f\u7528\u56fe\u50cf\u5bf9\u8c61\u6765\u8868\u793a\u5404\u79cd\u7c7b\u578b\u7684\u56fe\u50cf\u6570\u636e\uff0cUIImage\u7c7b\u80fd\u591f\u7ba1\u7406\u5e95\u5c42\u5e73\u53f0\u652f\u6301\u7684\u6240\u6709\u56fe\u50cf\u683c\u5f0f\u7684\u6570\u636e\u201d\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u6b65\u662f\u51c6\u786e\u786e\u5b9a\u5e95\u5c42\u5e73\u53f0\u652f\u6301\u54ea\u4e9b\u56fe\u50cf\u683c\u5f0f\u3002\n\u4f20\u9012\u7ed9UIImage\u7684\u56fe\u50cf\u6570\u636e\u7684\u89e3\u6790\u662f\u5728ImageIO\u6846\u67b6\u4e2d\u5b9e\u73b0\u7684\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9MacOS\u4e0a\u7684ImageIO\u5e93(/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\u6216iOS\u4e0a\u7684DYLDSHARED_CACHE\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\u6765\u679a\u4e3e\u652f\u6301\u7684\u6620\u50cf\u683c\u5f0f)\u3002\n\u5728ImageIO\u6846\u67b6\u4e2d\uff0c\u6bcf\u79cd\u53d7\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u90fd\u6709\u4e00\u4e2a\u4e13\u7528\u7684IIO_Reader\u5b50\u7c7b\u3002\u6bcf\u4e2aIIO_Reader\u5b50\u7c7b\u90fd\u5e94\u8be5\u5b9e\u73b0\u4e00\u4e2atestHeader\u51fd\u6570\uff0c\u5f53\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u8282\u5757\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u51b3\u5b9a\u8fd9\u4e9b\u5b57\u8282\u662f\u5426\u8868\u793a\u8bfb\u53d6\u5668\u652f\u6301\u7684\u683c\u5f0f\u7684\u56fe\u50cf\u3002\u4e0b\u9762\u663e\u793a\u4e86LibJPEG\u9605\u8bfb\u5668\u7684testHeader\u5b9e\u73b0\u7684\u793a\u4f8b\u5b9e\u73b0\u3002\u5b83\u53ea\u662f\u6d4b\u8bd5\u8f93\u5165\u7684\u51e0\u4e2a\u5b57\u8282\uff0c\u4ee5\u68c0\u6d4bJPEG\u62a5\u5934\u7684\u9b54\u529b\u3002\n\u56e0\u6b64\uff0c\u901a\u8fc7\u5217\u51fa\u4e0d\u540c\u7684testHeader\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7f16\u8bd1ImageIO\u5e93\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f\u5217\u8868\u3002\u540d\u5355\u5982\u4e0b\uff1a\n\u867d\u7136\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u8bb8\u591a\u719f\u6089\u7684\u683c\u5f0f(jpeg\u3001png\u3001gif\u3001\u2026)\u3002\u8fd8\u6709\u8bb8\u591a\u76f8\u5f53\u5f02\u56fd\u60c5\u8c03\u7684\u6e38\u620f(KTX\u548cASTC\uff0c\u663e\u7136\u7528\u4e8e\u7eb9\u7406\u6216AI\uff1aAdobe Illustrator Artwork)\uff0c\u8fd8\u6709\u4e00\u4e9b\u4f3c\u4e4e\u7279\u5b9a\u4e8e\u82f9\u679c\u751f\u6001\u7cfb\u7edf(ICNS\u7528\u4e8e\u56fe\u6807\uff0cATX\u53ef\u80fd\u7528\u4e8eAnimojis)\u3002\n\u5bf9\u4e0d\u540c\u683c\u5f0f\u7684\u652f\u6301\u4e5f\u5404\u4e0d\u76f8\u540c\u3002\u6709\u4e9b\u683c\u5f0f\u4f3c\u4e4e\u5b8c\u5168\u53d7\u652f\u6301\uff0c\u5e76\u4e14\u901a\u5e38\u4f7f\u7528\u5f00\u6e90\u89e3\u6790\u5e93\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e9b\u89e3\u6790\u5e93\u53ef\u4ee5\u5728MacOS\u4e0a\u7684/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources\u4e2d\u627e\u5230\uff1alibGIF.dylib\u3001libJP2.dylib\u3001libJPEG.dylib\u3001libOpenEXR.dylib\u3001libPng.dylib\u3001libRadiance.dylib\u548clibTIFF.dylib\u3002\u5bf9\u4e8e\u5904\u7406\u6700\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u5176\u4ed6\u683c\u5f0f\u4f3c\u4e4e\u53ea\u6709\u57fa\u672c\u7684\u652f\u6301\u3002\n\u6700\u540e\uff0c\u4e00\u4e9b\u683c\u5f0f(\u5982psd)\u4f3c\u4e4e\u4e5f\u652f\u6301\u8fdb\u7a0b\u5916\u89e3\u7801(\u5728MacOS\u4e0a\uff0c\u8fd9\u662f\u7531/System/Library/Frameworks/ImageIO.framework/Versions/A/XPCServices/ImageIOXPCService.xpc)\u5904\u7406\u7684\uff0c\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u89e3\u6790\u5668\u4e2d\u7684\u6c99\u76d2\u6f0f\u6d1e\u3002\u7136\u800c\uff0c\u4f3c\u4e4e\u4e0d\u53ef\u80fd\u5728\u516c\u5171API\u4e2d\u6307\u5b9a\u5e94\u8be5\u5728\u8fdb\u7a0b\u5185\u8fd8\u662f\u8fdb\u7a0b\u5916\u6267\u884c\u89e3\u6790\uff0c\u5e76\u4e14\u6ca1\u6709\u5c1d\u8bd5\u66f4\u6539\u9ed8\u8ba4\u884c\u4e3a\u3002\n\u8003\u8651\u5230\u53ef\u7528\u7684\u56fe\u50cf\u683c\u5f0f\u8303\u56f4\u5f88\u5e7f\uff0c\u800c\u4e14\u5927\u591a\u6570\u4ee3\u7801\u90fd\u6ca1\u6709\u6e90\u4ee3\u7801\u53ef\u7528\uff0c\u6a21\u7cca\u5904\u7406\u4f3c\u4e4e\u662f\u663e\u800c\u6613\u89c1\u7684\u9009\u62e9\u3002\n\u9009\u62e9\u4f7f\u7528\u54ea\u79cd\u6a21\u7cca\u548c\u6a21\u7cca\u65b9\u6cd5\u5e76\u4e0d\u662f\u90a3\u4e48\u660e\u663e\u3002\u56e0\u4e3a\u5927\u591a\u6570\u76ee\u6807\u4ee3\u7801\u4e0d\u662f\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u8bb8\u591a\u6807\u51c6\u5de5\u5177\u4e0d\u80fd\u76f4\u63a5\u9002\u7528\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u51b3\u5b9a\u5c06\u6a21\u7cca\u529f\u80fd\u9650\u5236\u5728\u4e00\u53f0Mac Mini\u4e0a\u3002\u56e0\u6b64\uff0c\u7ed2\u6bdb\u5668\u5e94\u8be5\uff1a\n\u4ee5\u5c3d\u53ef\u80fd\u5c11\u7684\u5f00\u9500\u8fd0\u884c\uff0c\u4ee5\u5145\u5206\u5229\u7528\u53ef\u7528\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u5e76\u4e14\u3002\n\u6700\u540e\uff0c\u6211\u51b3\u5b9a\u5728\u6d2a\u798f\u5179\u7684\u57fa\u7840\u4e0a\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e9b\u4e1c\u897f\u3002\u6a21\u7cca\u65b9\u6cd5\u7684\u601d\u60f3\u5927\u81f4\u57fa\u4e8e\u8fd9\u7bc7\u8bba\u6587\uff1a\u5168\u901f\u6a21\u7cca\uff1a\u901a\u8fc7\u8986\u76d6\u7387\u5f15\u5bfc\u7684\u8ddf\u8e2a\u51cf\u5c11\u6a21\u7cca\u5f00\u9500\u3002\n\u679a\u4e3e\u7a0b\u5e8f/\u5e93\u4e2d\u6bcf\u4e2a\u57fa\u672c\u5757\u7684\u8d77\u59cb\u504f\u79fb\u91cf\u3002\u8fd9\u662f\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684IDAPython\u811a\u672c\u5b8c\u6210\u7684\u3002\n\u5728\u8fd0\u884c\u65f6\uff0c\u5728\u6a21\u7cca\u5316\u8fc7\u7a0b\u4e2d\uff0c\u7528\u65ad\u70b9\u6307\u4ee4(Intel\u4e0a\u7684int3)\u66ff\u6362\u6bcf\u4e2a\u672a\u53d1\u73b0\u7684\u57fa\u672c\u5757\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u3002\u8986\u76d6\u4f4d\u56fe\u4e2d\u7684\u539f\u59cb\u5b57\u8282\u548c\u5bf9\u5e94\u7684\u504f\u79fb\u88ab\u5b58\u50a8\u5728\u4e13\u7528\u5f71\u5b50\u5b58\u50a8\u5668\u6620\u5c04\u4e2d\uff0c\u8be5\u6620\u5c04\u7684\u5730\u5740\u53ef\u4ee5\u6839\u636e\u4fee\u6539\u7684\u5e93\u7684\u5730\u5740\u6765\u8ba1\u7b97\uff0c\u5e76\u4e14\u3002\n\u68c0\u7d22\u51fa\u9519\u5730\u5740\u5e76\u8ba1\u7b97\u5e93\u4e2d\u7684\u504f\u79fb\u91cf\u4ee5\u53ca\u5f71\u5b50\u5b58\u50a8\u5668\u4e2d\u76f8\u5e94\u6761\u76ee\u7684\u5730\u5740\u3002\n\u7531\u4e8e\u53ea\u68c0\u6d4b\u672a\u53d1\u73b0\u7684\u57fa\u672c\u5757\uff0c\u5e76\u4e14\u6bcf\u4e2a\u65ad\u70b9\u53ea\u89e6\u53d1\u4e00\u6b21\uff0c\u56e0\u6b64\u8fd0\u884c\u65f6\u5f00\u9500\u5f88\u5feb\u63a5\u8fd1\u4e8e\u96f6\u3002\u7136\u800c\uff0c\u5e94\u8be5\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u65b9\u6cd5\u4ec5\u5b9e\u73b0\u4e86\u57fa\u672c\u5757\u8986\u76d6\uff0c\u800c\u4e0d\u662f\u4f8b\u5982\u7531AFL\u4f7f\u7528\u7684\u8fb9\u7f18\u8986\u76d6\uff0c\u5e76\u4e14\u5bf9\u4e8e\u5c01\u95ed\u6e90\u76ee\u6807\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u4e8c\u8fdb\u5236\u63d2\u88c5\u6765\u5b9e\u73b0\uff0c\u5c3d\u7ba1\u5177\u6709\u4e00\u4e9b\u6027\u80fd\u5f00\u9500\u3002\u56e0\u6b64\uff0c\u5b83\u5c06\u66f4\u52a0\u201c\u7c97\u7c92\u5ea6\u201d\uff0c\u4f8b\u5982\uff0c\u5c06\u5230\u540c\u4e00\u57fa\u672c\u5757\u7684\u4e0d\u540c\u8fc7\u6e21\u89c6\u4e3a\u76f8\u7b49\uff0c\u800cAFL\u5219\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u5728\u8fed\u4ee3\u6b21\u6570\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6b64\u65b9\u6cd5\u53ef\u80fd\u4f1a\u53d1\u73b0\u8f83\u5c11\u7684\u6f0f\u6d1e\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u672c\u7814\u7a76\u7684\u76ee\u6807\u4e0d\u662f\u5f7b\u5e95\u53d1\u73b0\u6240\u6709\u6f0f\u6d1e\uff0c\u800c\u662f\u5feb\u901f\u6d4b\u8bd5\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u7684\u5065\u58ee\u6027\u5e76\u7a81\u51fa\u653b\u51fb\u5411\u91cf\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u5f7b\u5e95\u7684\u6a21\u7cca\u603b\u662f\u7531\u5177\u6709\u6e90\u4ee3\u7801\u8bbf\u95ee\u6743\u9650\u7684\u7ef4\u62a4\u4eba\u5458\u6267\u884c\u5f97\u6700\u597d\u3002\n\u901a\u8fc7\u4fee\u8865honggfuzz\u7684\u5ba2\u6237\u7aef\u5de5\u5177\u4ee3\u7801\u5e76\u7f16\u5199\u4e00\u4e2aIDAPython\u811a\u672c\u6765\u679a\u4e3e\u57fa\u672c\u5757\u504f\u79fb\u91cf\uff0c\u6240\u63cf\u8ff0\u7684\u65b9\u6cd5\u975e\u5e38\u5bb9\u6613\u5b9e\u73b0\u3002\u8865\u4e01\u548cIDAPython\u811a\u672c\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\n\u7136\u540e\uff0cFuzzer\u4ece\u4e00\u4e2a\u7531\u5927\u7ea6700\u4e2a\u79cd\u5b50\u56fe\u50cf\u7ec4\u6210\u7684\u5c0f\u8bed\u6599\u5e93\u5f00\u59cb\uff0c\u6db5\u76d6\u4e86\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5e76\u8fd0\u884c\u4e86\u51e0\u4e2a\u661f\u671f\u3002\u6700\u540e\uff0c\u53d1\u73b0\u4e86\u4ee5\u4e0b\u6f0f\u6d1e\uff1a\nImageIO\u5bf9libTiff\u7684\u4f7f\u7528\u4e2d\u5b58\u5728\u9519\u8bef\uff0c\u5bfc\u81f4\u63a7\u5236\u6570\u636e\u5199\u5165\u8d85\u8fc7\u5185\u5b58\u7f13\u51b2\u533a\u672b\u5c3e\u3002\u6ca1\u6709\u4e3a\u8fd9\u4e2a\u95ee\u9898\u5206\u914dCVE\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5728\u6211\u4eec\u62a5\u544a\u4e4b\u524d\uff0c\u82f9\u679c\u5185\u90e8\u5df2\u7ecf\u53d1\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\u53ef\u80fd\u662fPVR\u89e3\u7801\u903b\u8f91\u4e2d\u7684\u504f\u5dee-1\u9519\u8bef\uff0c\u5bfc\u81f4\u989d\u5916\u7684\u50cf\u7d20\u6570\u636e\u884c\u88ab\u5199\u5165\u8d85\u51fa\u8f93\u51fa\u7f13\u51b2\u5668\u672b\u7aef\u7684\u8fb9\u754c\u3002\nPVR\u89e3\u7801\u5668\u4e2d\u7684\u76f8\u5173\u9519\u8bef\u5bfc\u81f4\u8d8a\u754c\u8bfb\u53d6\uff0c\u53ef\u80fd\u4e0e1974\u5e74P0\u95ee\u9898\u5177\u6709\u76f8\u540c\u7684\u6839\u672c\u539f\u56e0\uff0c\u56e0\u6b64\u5206\u914d\u4e86\u76f8\u540c\u7684CVE\u7f16\u53f7\u3002\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u6709\u4e9b\u7279\u6b8a\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728\u4e0eImageIO\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u7b2c\u4e09\u65b9\u4ee3\u7801\u4e2d\uff0c\u5373OpenEXR\u5e93\u3002\u7531\u4e8e\u8be5\u5e93\u662f\u5f00\u653e\u6e90\u7801\u7684\uff0c\u6211\u51b3\u5b9a\u5c06\u5176\u5355\u72ec\u6a21\u7cca\u5316\u3002\nOpenEXR\u662f\u201c\u4e00\u79cd\u9ad8\u52a8\u6001\u8303\u56f4(HDR)\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f[.]\u3002\u7528\u4e8e\u8ba1\u7b97\u673a\u6210\u50cf\u5e94\u7528\u201c\u3002\u89e3\u6790\u5668\u662f\u7528C\u548cC++\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0cOpenEXR\u5e93\u901a\u8fc7Apple\u7684ImageIO\u6846\u67b6\u516c\u5f00\uff0c\u56e0\u6b64\u901a\u8fc7\u82f9\u679c\u8bbe\u5907\u4e0a\u5404\u79cd\u6d41\u884c\u7684\u4fe1\u4f7f\u5e94\u7528\u7a0b\u5e8f\u66b4\u9732\u4e3a0click\u653b\u51fb\u9762\u3002\u867d\u7136\u6211\u8fd8\u6ca1\u6709\u8fdb\u884c\u66f4\u591a\u7684\u7814\u7a76\u6765\u652f\u6301\u8fd9\u4e00\u8bf4\u6cd5\uff0c\u4f46\u653b\u51fb\u8868\u9762\u5f88\u53ef\u80fd\u5e76\u4e0d\u5c40\u9650\u4e8e\u5373\u65f6\u901a\u8baf\u5e94\u7528\u7a0b\u5e8f\u3002\n\u7531\u4e8e\u8be5\u5e93\u662f\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u201c\u4f20\u7edf\u7684\u201d\u5f15\u5bfc\u6a21\u7cca\u66f4\u5bb9\u6613\u6267\u884c\u3002\u6211\u4f7f\u7528\u4e86\u4e00\u6b3e\u8c37\u6b4c\u5185\u90e8\u7684\u3001\u8986\u76d6\u5bfc\u5411\u7684\u6a21\u7cca\u5668\uff0c\u5728\u5927\u7ea6500\u4e2a\u5185\u6838\u4e0a\u8fd0\u884c\u4e86\u5927\u7ea6\u4e24\u5468\u3002\u6a21\u7cca\u5668\u4ee5\u4f7f\u7528llvm\u7684SanitizerCoverage\u7684\u8fb9\u7f18\u8986\u76d6\u4e3a\u5bfc\u5411\uff0c\u901a\u8fc7\u4f7f\u7528\u5e38\u89c1\u7684\u4e8c\u8fdb\u5236\u7a81\u53d8\u7b56\u7565\u5bf9\u73b0\u6709\u7684\u56fe\u50cf\u8fdb\u884c\u7a81\u53d8\uff0c\u5e76\u4ece\u4e00\u7ec4\u5927\u7ea680\u5f20\u73b0\u6709\u7684openexr\u56fe\u50cf\u4f5c\u4e3a\u79cd\u5b50\u5f00\u59cb\u751f\u6210\u65b0\u7684\u8f93\u5165\u3002\n\u53d1\u73b0\u4e868\u4e2a\u53ef\u80fd\u7684\u72ec\u7279\u6f0f\u6d1e\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3aP0\u95ee\u98981987\u62a5\u544a\u7ed9OpenEXR\u7ef4\u62a4\u4eba\u5458\uff0c\u7136\u540e\u57282.4.1\u7248\u672c\u4e2d\u8fdb\u884c\u4e86\u4fee\u590d\u3002\u4e0b\u9762\u5bf9\u5b83\u4eec\u8fdb\u884c\u7b80\u8981\u603b\u7ed3\uff1a\n\u5bfc\u81f4std\uff1a\uff1aVector\u88ab\u8bfb\u51fa\u8fb9\u754c\u7684\u9519\u8bef\u3002\u4e4b\u540e\uff0c\u8c03\u7528\u4ee3\u7801\u5c06\u5199\u5165\u6b64\u5411\u91cf\u7684\u5143\u7d20\u69fd\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u635f\u574f\u5185\u5b58\u3002\n\u4e00\u79cd\u8d8a\u754cmemcpy\uff0c\u8be5memcpy\u6b63\u5728\u8bfb\u53d6\u8d8a\u754c\u6570\u636e\uff0c\u7136\u540e\u53ef\u80fd\u4e5f\u4f1a\u5c06\u5176\u5199\u5165\u8d8a\u754c\u3002\n\u5806\u6808\u4e0a\u7684\u8d8a\u754c\u8bfb\u53d6\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u4ee5\u524d\u8986\u76d6\u5806\u6808\u4e0a\u7684\u5b57\u7b26\u4e32\u7a7a\u7ec8\u6b62\u7b26\u65f6\u51fa\u73b0\u6309\u4e00\u53d6\u4e00\u7684\u9519\u8bef\u3002\n\u6709\u8da3\u7684\u662f\uff0cImageIO Fuzzer\u6700\u521d\u53d1\u73b0\u7684\u5d29\u6e83(1988\u5e74\u7248)\u4f3c\u4e4e\u65e0\u6cd5\u5728\u4e0a\u6e38OpenEXR\u5e93\u4e2d\u91cd\u73b0\uff0c\u56e0\u6b64\u76f4\u63a5\u62a5\u544a\u7ed9\u4e86Apple\u3002\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u91ca\u662f\uff0c\u82f9\u679c\u53d1\u5e03\u4e86\u4e00\u4e2a\u8fc7\u65f6\u7248\u672c\u7684OpenEXR\u5e93\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u8be5\u6f0f\u6d1e\u5df2\u88ab\u4e0a\u6e38\u4fee\u590d\u3002\n\u5a92\u4f53\u683c\u5f0f\u89e3\u6790\u4ecd\u7136\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u3002\u5176\u4ed6\u7814\u7a76\u4eba\u5458\u548c\u4f9b\u5e94\u5546\u5efa\u8bae\u4e5f\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u4ee5\u4e0b\u4e24\u70b9\u7acb\u5373\u6d6e\u73b0\u5728\u8111\u6d77\u4e2d\uff1a\n\u5f53\u7136\uff0c\u8fd9\u8868\u660e\u8f93\u5165\u89e3\u6790\u5668\u7684\u6301\u7eed\u6a21\u7cca\u6d4b\u8bd5\u5e94\u8be5\u5728\u4f9b\u5e94\u5546/\u4ee3\u7801\u7ef4\u62a4\u4eba\u5458\u7aef\u8fdb\u884c\u3002\u6b64\u5916\uff0c\u5141\u8bb8\u50cfImageIO\u8fd9\u6837\u7684\u5e93\u7684\u5ba2\u6237\u7aef\u9650\u5236\u5141\u8bb8\u7684\u8f93\u5165\u683c\u5f0f\uff0c\u5e76\u6709\u53ef\u80fd\u9009\u62e9\u8fdb\u7a0b\u5916\u89e3\u7801\uff0c\u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u5229\u7528\u6f0f\u6d1e\u3002\n\u5728\u4fe1\u4f7f\u7aef\uff0c\u4e00\u79cd\u5efa\u8bae\u662f\u901a\u8fc7\u5c06\u63a5\u6536\u5668\u9650\u5236\u4e3a\u5c11\u91cf\u53d7\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f(\u81f3\u5c11\u5bf9\u4e8e\u4e0d\u9700\u8981\u4ea4\u4e92\u7684\u6d88\u606f\u9884\u89c8)\u6765\u51cf\u5c11\u653b\u51fb\u9762\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u65b9\u968f\u540e\u4f1a\u5728\u5c06\u4efb\u4f55\u4e0d\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u53d1\u9001\u7ed9\u63a5\u6536\u65b9\u4e4b\u524d\u5bf9\u5176\u8fdb\u884c\u91cd\u65b0\u7f16\u7801\u3002\u5728ImageIO\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c06\u628a\u653b\u51fb\u9762\u4ece\u5927\u7ea625\u79cd\u56fe\u50cf\u683c\u5f0f\u51cf\u5c11\u5230\u51e0\u79cd\u6216\u66f4\u5c11\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u63cf\u8ff0\u4e86\u56fe\u50cf\u89e3\u6790\u4ee3\u7801\u4f5c\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u6216\u7b2c\u4e09\u65b9\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u6700\u7ec8\u5982\u4f55\u901a\u8fc7\u6d41\u884c\u7684\u4fe1\u4f7f\u66b4\u9732\u4e8e0click\u653b\u51fb\u9762\u3002\u5bf9\u66b4\u9732\u7684\u4ee3\u7801\u8fdb\u884c\u6a21\u7cca\u5904\u7406\u53d1\u73b0\u4e86\u8bb8\u591a\u65b0\u7684\u6f0f\u6d1e\uff0c\u8fd9\u4e9b\u6f0f\u6d1e\u5df2\u88ab\u4fee\u590d\u3002\u5f88\u53ef\u80fd\uff0c\u53ea\u8981\u4ed8\u51fa\u8db3\u591f\u7684\u52aa\u529b(\u4ee5\u53ca\u7531\u4e8e\u81ea\u52a8\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u800c\u5141\u8bb8\u7684\u653b\u51fb\u5c1d\u8bd5)\uff0c\u67d0\u4e9b\u5df2\u53d1\u73b0\u7684\u6f0f\u6d1e\u5c31\u53ef\u4ee5\u57280click\u653b\u51fb\u65b9\u6848\u4e2d\u7528\u4e8eRCE\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5176\u4ed6\u9519\u8bef\u4e5f\u5f88\u53ef\u80fd\u4ecd\u7136\u5b58\u5728\u6216\u5c06\u5728\u672a\u6765\u5f15\u5165\u3002\u56e0\u6b64\uff0c\u5efa\u8bae\u5728\u64cd\u4f5c\u7cfb\u7edf\u5e93(\u5728\u672c\u4f8b\u4e2d\u4e3aImageIO)\u548cMessenger\u5e94\u7528\u7a0b\u5e8f(\u901a\u8fc7\u9650\u5236\u63a5\u6536\u5668\u4e0a\u53ef\u63a5\u53d7\u7684\u56fe\u50cf\u683c\u5f0f\u7684\u6570\u91cf)\u4e2d\u5bf9\u8be5\u4ee3\u7801\u548c\u7c7b\u4f3c\u7684\u5a92\u4f53\u683c\u5f0f\u89e3\u6790\u4ee3\u7801\u8fdb\u884c\u6301\u7eed\u6a21\u7cca\u6d4b\u8bd5\uff0c\u5e76\u79ef\u6781\u51cf\u5c11\u653b\u51fb\u9762\u3002", "note_en": "This blog post discusses an old type of issue, vulnerabilities in image format parsers, in a new(er) context: on interactionless code paths in popular messenger apps. This research was focused on the Apple ecosystem and the image parsing API provided by it: the ImageIO framework. Multiple vulnerabilities in image parsing code were found, reported to Apple or the respective open source image library maintainers, and subsequently fixed. During this research, a lightweight and low-overhead guided fuzzing approach for closed source binaries was implemented and is released alongside this blogpost.\n   To reiterate an important point, the vulnerabilities described throughout this blog are reachable through popular messengers but are not part of their codebase. It is thus not the responsibility of the messenger vendors to fix them.\n    While reverse engineering popular messenger apps, I came across the following code (manually decompiled into ObjC and slightly simplified) on a code path reachable without user interaction:\n          This code decrypts binary data received as part of an incoming message from the sender and instantiates a   UIImage  instance from it. The UIImage constructor will then try to determine the image format automatically. Afterwards, the received image is passed to the following code:\n            The purpose of this code is to render a smaller sized version of the input image for use as a thumbnail in a notification for the user. Unsurprisingly, similar code can be found in other messenger apps as well. In essence, code like the one shown above turns Apple\u2019s UIImage image parsing and CoreGraphics image rendering code into 0click attack surface.\n   One of the insights gained from   developing an exploit for an iMessage vulnerability  was that a memory corruption vulnerability could likely be exploited using the described techniques if the following preconditions are met:\n      In that case, the vulnerability could for example be used to corrupt a pointer to an ObjC object (or something similar), then construct a crash oracle to bypass ASLR, then gain code execution afterwards.\n   All preconditions are satisfied in the current attack scenario, thus prompting some research into the robustness of the exposed image parsing code. Looking into the   documentation of UImage , the following sentence can be found: \u201cYou use image objects to represent image data of all kinds, and the UIImage class is capable of managing data for all image formats supported by the underlying platform\u201d. As such, the next step was determining exactly what image formats were supported by the underlying platform.\n      Parsing of image data passed to UIImage is implemented in the ImageIO framework. As such, the supported image formats can be enumerated by reverse engineering the ImageIO library (/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO on macOS or part of the dyld_shared_cache on iOS).\n   In the ImageIO framework, every supported image format has a dedicated IIO_Reader subclass for it. Each IIO_Reader subclass is expected to implement a testHeader function which, when given a chunk of bytes, should decide whether these bytes represent an image in the format supported by the reader. An example implementation of the testHeader implementation for the LibJPEG reader is shown below. It simply tests a few bytes of the input to detect the JPEG header magic.\n         By listing the different testHeader implementations, it thus becomes possible to compile a list of file formats supported by the ImageIO library. The list is as follows:\n                                While this list contains many familiar formats (JPEG, PNG, GIF, \u2026) there are numerous rather exotic ones as well (KTX and ASTC, apparently used for textures or AI: Adobe Illustrator Artwork) and some that appear to be specific to the Apple ecosystem (ICNS for icons, ATX likely for Animojis)\n   Support for the different formats also varies. Some formats appear fully supported and are often implemented using what appear to be the open source parsing library which can be found in /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources on macOS: libGIF.dylib, libJP2.dylib, libJPEG.dylib, libOpenEXR.dylib, libPng.dylib, libRadiance.dylib, and libTIFF.dylib. Other formats seem to have only rudimentary support for handling the most common cases.\n   Finally, some formats (e.g. PSD), also appear to support out-of-process decoding (on macOS this is handled by /System/Library/Frameworks/ImageIO.framework/Versions/A/XPCServices/ImageIOXPCService.xpc) which can help sandbox vulnerabilities in the parsers. It does not, however, seem to be possible to specify whether parsing should be performed in-process or out-of-process in the public APIs, and no attempt was made to change the default behaviour.\n      Given the wide range of available image formats and the fact that no source code is available for the majority of the code, fuzzing seemed like the obvious choice.\n   The choice of which fuzzer and fuzzing approach to use was not so obvious. Since the majority of the target code was not open source, many standard tools were not directly applicable. Further, I had decided to limit fuzzing to a single Mac Mini for simplicity. Thus, the fuzzer should:\n Run with as little overhead as possible to fully utilize the available compute resources, and\n In the end I decided to implement something myself on top of   Honggfuzz . The idea for the fuzzing approach is loosely based on the paper:   Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing\n    Enumerating the start offset of every basic block in the program/library. This is done with a simple IDAPython script\n At runtime, in the fuzzed process, replacing the first byte of every undiscovered basic block with a breakpoint instruction (int3 on Intel). The original byte and the corresponding offset in the coverage bitmap are stored in a dedicated shadow memory mapping whose address can be computed from the address of the modified library, and\n  Retrieve the faulting address and compute the offset in the library as well as the address of the corresponding entry in the shadow memory\n   As only undiscovered basic blocks are instrumented and since every breakpoint is only triggered once, the runtime overhead quickly approaches zero. It should, however, be noted that this approach only achieves basic block coverage and not edge coverage as used for example by   AFL  and which, for closed source targets, can be achieved through   dynamic    binary    instrumentation  albeit with some performance overhead. It will thus be more \u201ccoarse grained\u201d and for example treat different transitions to the same basic block as equal whereas AFL would not. As such, this approach will likely find fewer vulnerabilities given the same number of iterations. I deemed this acceptable as the goal of this research was not to perform thorough discovery of all vulnerabilities but rather to quickly test the robustness of the image parsing code and highlight the attack vector. Thorough fuzzing, in any case, is always best performed by the maintainers with source code access.\n   The described approach was fairly easy to implement by patching honggfuzz\u2019s client instrumentation code and writing an IDAPython script to enumerate the basic block offsets. Both patch and IDAPython script can be found   here .\n   The fuzzer then started from a small corpus of around 700 seed images covering the supported image formats and ran for multiple weeks. In the end, the following vulnerabilities were identified:\n    A bug in the usage of libTiff by ImageIO which caused controlled data to be written past the end of a memory buffer. No CVE was assigned for this issue likely because it had already been discovered internally by Apple before we reported it.\n            Possibly an off-by-one error in the PVR decoding logic leading to an additional row of pixel data being written out-of-bounds past the end of the output buffer.\n    A related bug in the PVR decoder leading to an out-of-bounds read which likely had the same root cause as P0 Issue 1974 and thus was assigned the same CVE number.\n       The last issue was somewhat special as it occurred in 3rd party code bundled with ImageIO, namely that of the   OpenEXR library . As that library is open source, I decided to fuzz it separately as well.\n      OpenEXR  is \u201ca high dynamic-range (HDR) image file format [...] for use in computer imaging applications\u201d. The parser is implemented in C and C++ and can be found on   github .\n As described above, the OpenEXR library is exposed through Apple\u2019s ImageIO framework and therefore is exposed as a 0click attack surface through various popular messenger apps on Apple devices. It is likely that the attack surface is not limited to messaging apps, though I haven&#39;t conducted additional research to support that claim.\n   As the library is open source, \u201cconventional\u201d guided fuzzing is much easier to perform. I used a Google internal, coverage-guided fuzzer running on roughly 500 cores for around two weeks. The fuzzer was guided by edge coverage using llvm\u2019s   SanitizerCoverage  and generated new inputs by mutating existing ones using common binary mutation strategies and starting from a set of roughly 80 existing OpenEXR images as seeds.\n   Eight likely unique vulnerabilities were identified and reported as   P0 issue 1987  to the OpenEXR maintainers, then fixed in the   2.4.1 release . They are briefly summarized next:\n        A bug that caused a std::vector to be read out-ouf-bounds. Afterwards, the calling code would write into an element slot of this vector, thus likely corrupting memory.\n    An out-of-bounds memcpy that was reading data out-of-bounds and afterwards potentially writing it out-of-bounds as well.\n        An out-of-bounds read on the stack, likely due to an off-by-one error previously overwriting a string null terminator on the stack.\n       Interestingly, the crash initially found by the ImageIO fuzzer (  issue 1988 ) did not appear to be reproducible in the upstream OpenEXR library and was thus reported directly to Apple. A possible explanation is that Apple was shipping an outdated version of the OpenEXR library and the bug had been fixed upstream in the meantime.\n      Media format parsing remains an important issue. This was also demonstrated by other researchers and vendor advisories, with the two following coming immediately to mind:\n    This of course suggests that continuous fuzz-testing of input parsers should occur on the vendor/code maintainer side. Further, allowing clients of a library like ImageIO to restrict the allowed input formats and potentially to opt-in to out-of-process decoding can help prevent exploitation.\n   On the messenger side, one recommendation is to reduce the attack surface by restricting the receiver to a small number of supported image formats (at least for message previews that don\u2019t require interaction). In that case, the sender would then re-encode any unsupported image format prior to sending it to the receiver. In the case of ImageIO, that would reduce the attack surface from around 25 image formats down to just a handful or less.\n    This blog post described how image parsing code, as part of the operating system or third party libraries, end up being exposed to 0click attack surface through popular messengers. Fuzzing of the exposed code turned up numerous new vulnerabilities which have since been fixed. It is likely that, given enough effort (and exploit attempts granted due to automatically restarting services), some of the found vulnerabilities can be exploited for RCE in a 0click attack scenario. Unfortunately it is also likely that other bugs remain or will be introduced in the future. As such, continuous fuzz-testing of this and similar media format parsing code as well as aggressive attack-surface reduction, both in operating system libraries (in this case ImageIO) as well as messenger apps (by restricting the number of accepted image formats on the receiver) are recommended.", "posttime": "2020-05-12 15:05:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6a21\u7cca\u5316,fuzzing,\u4ee3\u7801", "title": "\u6a21\u7cca\u5316ImageIO", "title_en": "Fuzzing ImageIO", "transed": 1, "url": "https://googleprojectzero.blogspot.com/2020/04/fuzzing-imageio.html?m=1", "via": "", "real_tags": ["\u6a21\u7cca\u5316", "fuzzing", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "3249ecd0b3e8d60d2ca092c2e97b89c6.png", "infoid": 1001776, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Windows\u4e0a\u7684Chromium\u6c99\u76d2\u7ecf\u53d7\u4f4f\u4e86\u65f6\u95f4\u7684\u8003\u9a8c\u3002\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e0d\u9700\u8981\u63d0\u5347\u7279\u6743\u5c31\u53ef\u4ee5\u5927\u89c4\u6a21\u90e8\u7f72\u7684\u66f4\u597d\u7684\u6c99\u7bb1\u673a\u5236\u4e4b\u4e00\u3002\u4ece\u597d\u7684\u65b9\u9762\u6765\u8bf4\uff0c\u5b83\u786e\u5b9e\u6709\u5b83\u7684\u5f31\u70b9\u3002\u4e3b\u8981\u7684\u95ee\u9898\u662f\u6c99\u7bb1\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8eWindows\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3002\u66f4\u6539Windows\u7684\u884c\u4e3a\u4e0d\u5728Chromium\u5f00\u53d1\u56e2\u961f\u7684\u63a7\u5236\u8303\u56f4\u4e4b\u5185\u3002\u5982\u679c\u5728Windows\u7684\u5b89\u5168\u5b9e\u65bd\u673a\u5236\u4e2d\u53d1\u73b0\u9519\u8bef\uff0c\u5219\u6c99\u7bb1\u53ef\u80fd\u4f1a\u88ab\u7834\u574f\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u662f\u5173\u4e8eWindows101903\u4e2d\u5f15\u5165\u7684\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u8be5\u6f0f\u6d1e\u6253\u7834\u4e86Chromium\u7528\u6765\u4fdd\u8bc1\u6c99\u7bb1\u5b89\u5168\u7684\u4e00\u4e9b\u5b89\u5168\u5047\u8bbe\u3002\u6211\u5c06\u4ecb\u7ecd\u5982\u4f55\u5229\u7528\u8be5bug\u5f00\u53d1\u4e00\u7cfb\u5217\u6267\u884c\u94fe\uff0c\u4ee5\u907f\u5f00Chrome/Edge\u4e0a\u7684GPU\u8fdb\u7a0b\u6216Firefox\u4e2d\u7684\u9ed8\u8ba4\u5185\u5bb9\u6c99\u7bb1\u6240\u4f7f\u7528\u7684\u6c99\u7bb1\u3002\u5229\u7528\u8fc7\u7a0b\u4e5f\u662f\u5bf9Windows\u4e2d\u7684\u5c0f\u5f31\u70b9\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u6d1e\u5bdf\uff0c\u8fd9\u4e9b\u5c0f\u5f31\u70b9\u672c\u8eab\u5e76\u6ca1\u6709\u8d8a\u8fc7\u5b89\u5168\u8fb9\u754c\uff0c\u4f46\u5374\u5bfc\u81f4\u4e86\u6210\u529f\u7684\u6c99\u76d2\u9003\u8131\u3002\u6b64\u6f0f\u6d1e\u5df2\u57282020\u5e744\u6708\u4fee\u590d\uff0c\u540d\u79f0\u4e3aCVE-2020-0981\u3002\n\u5728\u63cf\u8ff0\u9519\u8bef\u672c\u8eab\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u4e86\u89e3\u4e00\u4e0bChromium\u6c99\u7bb1\u5728Windows\u4e0a\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u6c99\u7bb1\u901a\u8fc7\u4f7f\u7528\u53d7\u9650\u4ee4\u724c\u6765\u5904\u7406\u6700\u5c0f\u7279\u6743\u7684\u6982\u5ff5\u3002\u53d7\u9650\u4ee4\u724c\u662fWindows 2000\u4e2d\u6dfb\u52a0\u7684\u4e00\u9879\u529f\u80fd\uff0c\u5b83\u901a\u8fc7\u4ee5\u4e0b\u64cd\u4f5c\u4fee\u6539\u8fdb\u7a0b\u7684\u8bbf\u95ee\u4ee4\u724c\uff0c\u4ece\u800c\u51cf\u5c11\u6388\u4e88\u8fdb\u7a0b\u7684\u8bbf\u95ee\u6743\u9650\uff1a\n\u7981\u7528\u7ec4\u4f1a\u5220\u9664\u8bbf\u95ee\u4ee4\u724c\u7684\u6210\u5458\u8eab\u4efd\uff0c\u4ece\u800c\u5bfc\u81f4\u7981\u7528\u5bf9\u8fd9\u4e9b\u7ec4\u4fdd\u62a4\u7684\u8d44\u6e90\u7684\u8bbf\u95ee\u3002\u5220\u9664\u6743\u9650\u53ef\u9632\u6b62\u8fdb\u7a0b\u6267\u884c\u4efb\u4f55\u4e0d\u5fc5\u8981\u7684\u7279\u6743\u64cd\u4f5c\u3002\u6700\u540e\uff0c\u6dfb\u52a0\u53d7\u9650SID\u4f1a\u66f4\u6539\u5b89\u5168\u8bbf\u95ee\u68c0\u67e5\u6d41\u7a0b\u3002\u8981\u83b7\u5f97\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u6211\u4eec\u9700\u8981\u5339\u914d\u4e3b\u5217\u8868\u548c\u53d7\u9650SID\u5217\u8868\u4e2d\u7684\u7ec4\u7684\u5b89\u5168\u63cf\u8ff0\u7b26\u6761\u76ee\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2aSID\u5217\u8868\u672a\u6388\u4e88\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5219\u8bbf\u95ee\u5c06\u88ab\u62d2\u7edd\u3002\nChrome\u8fd8\u4f7f\u7528Vista\u4e2d\u6dfb\u52a0\u7684\u5b8c\u6574\u6027\u7ea7\u522b(IL)\u529f\u80fd\u8fdb\u4e00\u6b65\u9650\u5236\u8d44\u6e90\u8bbf\u95ee\u3002\u901a\u8fc7\u8bbe\u7f6e\u8f83\u4f4e\u7684IL\uff0c\u6211\u4eec\u53ef\u4ee5\u963b\u6b62\u5bf9\u66f4\u9ad8\u5b8c\u6574\u6027\u8d44\u6e90\u7684\u5199\u8bbf\u95ee\uff0c\u800c\u4e0d\u7ba1\u8bbf\u95ee\u68c0\u67e5\u7684\u7ed3\u679c\u5982\u4f55\u3002\n\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5c06\u53d7\u9650\u4ee4\u724c\u4e0eIL\u4e00\u8d77\u4f7f\u7528\u5141\u8bb8\u6c99\u7bb1\u9650\u5236\u53d7\u5371\u5bb3\u7684\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c\u4ece\u800c\u9650\u5236RCE\u53ef\u80fd\u4ea7\u751f\u7684\u5f71\u54cd\u3002\u963b\u6b62\u5199\u8bbf\u95ee\u5c24\u5176\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u4f1a\u5141\u8bb8\u653b\u51fb\u8005\u901a\u8fc7\u5199\u5165\u6587\u4ef6\u6216\u6ce8\u518c\u8868\u9879\u6765\u5371\u5bb3\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u3002\nWindows\u4e0a\u7684\u4efb\u4f55\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u4ee4\u724c\u521b\u5efa\u65b0\u8fdb\u7a0b\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u8c03\u7528CreateProcessAsUser\u3002\u662f\u4ec0\u4e48\u963b\u6b62\u6c99\u7bb1\u8fdb\u7a0b\u4f7f\u7528\u65e0\u9650\u5236\u4ee4\u724c\u521b\u5efa\u65b0\u8fdb\u7a0b\uff1fWindows\u548cChromium\u5b9e\u65bd\u4e86\u4e00\u4e9b\u5b89\u5168\u7f13\u89e3\u63aa\u65bd\uff0c\u4f7f\u5f97\u5728\u6c99\u7bb1\u4e4b\u5916\u521b\u5efa\u65b0\u8fdb\u7a0b\u53d8\u5f97\u56f0\u96be\uff1a\n\u5185\u6838\u9650\u5236\u975e\u7279\u6743\u7528\u6237\u53ef\u4ee5\u5c06\u54ea\u4e9b\u4ee4\u724c\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u3002\n\u6c99\u7bb1\u9650\u5236\u9650\u5236\u4e86\u7528\u4e8e\u65b0\u8fdb\u7a0b\u7684\u9002\u5f53\u8bbf\u95ee\u4ee4\u724c\u7684\u53ef\u7528\u6027\u3002\nCr\u5728Job\u5bf9\u8c61\u5185\u8fd0\u884c\u6c99\u7bb1\u8fdb\u7a0b\uff0c\u8be5\u5bf9\u8c61\u7531\u4efb\u4f55\u786c\u8fdb\u7a0b\u914d\u989d\u9650\u5236\u4e3a1\u7684\u5b50\u8fdb\u7a0b\u7ee7\u627f\u3002\n\u5728Windows 10\u4e2d\uff0cChromium\u4f7f\u7528\u5b50\u8fdb\u7a0b\u7f13\u89e3\u7b56\u7565\u6765\u963b\u6b62\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002\u8fd9\u662f\u57283\u4e2d\u7684Job\u5bf9\u8c61\u4e4b\u5916\u5e94\u7528\u7684\u3002\n\u6240\u6709\u8fd9\u4e9b\u7f13\u89e3\u63aa\u65bd\u6700\u7ec8\u90fd\u4f9d\u8d56\u4e8eWindows\u7684\u5b89\u5168\u6027\u3002\u4f46\u662f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6700\u5173\u952e\u7684\u662f1\u3002\u5373\u4f7f2\u52304\u5931\u8d25\uff0c\u7406\u8bba\u4e0a\u6211\u4eec\u4e5f\u4e0d\u80fd\u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u66f4\u6709\u7279\u6743\u7684\u8bbf\u95ee\u4ee4\u724c\u3002\u5f53\u6d89\u53ca\u5230\u5206\u914d\u65b0\u4ee4\u724c\u65f6\uff0c\u5185\u6838\u68c0\u67e5\u662f\u4ec0\u4e48\uff1f\n\u5047\u8bbe\u8c03\u7528\u8fdb\u7a0b\u6ca1\u6709SeAssignPrimaryTokenPrivilege(\u6211\u4eec\u6ca1\u6709)\uff0c\u90a3\u4e48\u65b0\u4ee4\u724c\u5fc5\u987b\u6ee1\u8db3\u5185\u6838\u51fd\u6570SeIsTokenAssignableToProcess\u4e2d\u68c0\u67e5\u7684\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\u3002\u8fd9\u4e9b\u6761\u4ef6\u57fa\u4e8e\u5185\u6838\u7684\u6807\u8bb0\u5bf9\u8c61\u7ed3\u6784\u4e2d\u7684\u6307\u5b9a\u503c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\u5f53\u524d\u8fdb\u7a0b\u4ee4\u724c\u7684\u5b50\u7ea7\u3002\u57fa\u4e8e\u65b0\u4ee4\u724c\u7684\u7236\u4ee4\u724cID\u7b49\u4e8e\u8fdb\u7a0b\u4ee4\u724c\u7684ID\u3002\n\u5f53\u524d\u8fdb\u7a0b\u4ee4\u724c\u7684\u540c\u7ea7\u3002\u57fa\u4e8e\u7236\u4ee4\u724cID\u548c\u8eab\u4efd\u9a8c\u8bc1ID\u5b57\u6bb5\u90fd\u76f8\u7b49\u3002\n\u8fd8\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u65b0\u7684\u4ee4\u724c\u4e0d\u662f\u6807\u8bc6\u7ea7\u522b\u7684\u6a21\u62df\u4ee4\u724c(\u7531\u4e8e\u6211\u62a5\u544a\u7684\u8fd9\u4e2a\u9519\u8bef)\uff0c\u5e76\u4e14\u65b0\u4ee4\u724c\u7684IL\u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u7684\u8fdb\u7a0b\u4ee4\u724c\u3002\u8fd9\u4e9b\u90fd\u540c\u6837\u91cd\u8981\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u5728\u5b9e\u8df5\u4e2d\u7528\u5904\u8f83\u5c0f\u3002\n\u4ee4\u724c\u5206\u914d\u4e0d\u4f1a\u660e\u663e\u68c0\u67e5\u7236\u4ee4\u724c\u6216\u5b50\u4ee4\u724c\u662f\u5426\u53d7\u5230\u9650\u5236\u3002\u5982\u679c\u60a8\u5728\u53d7\u9650\u4ee4\u724c\u6c99\u7bb1\u4e2d\uff0c\u662f\u5426\u53ef\u4ee5\u83b7\u5f97\u901a\u8fc7\u6240\u6709\u68c0\u67e5\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u6709\u6548\u9003\u79bb\u6c99\u7bb1\u7684\u5b50\u4ee3\u7684\u65e0\u9650\u5236\u4ee4\u724c\uff1f\u4e0d\uff0c\u60a8\u4e0d\u80fd\uff0c\u7cfb\u7edf\u786e\u4fdd\u5728\u5206\u914d\u53d7\u9650\u4ee4\u724c\u65f6\u5144\u5f1f\u4ee4\u724c\u68c0\u67e5\u5931\u8d25\uff0c\u800c\u662f\u786e\u4fdd\u7236/\u5b50\u68c0\u67e5\u662f\u5c06\u5f3a\u5236\u6267\u884c\u7684\u68c0\u67e5\u3002\u5982\u679c\u60a8\u67e5\u770b\u5185\u6838\u51fd\u6570SepFilterToken\uff0c\u5c31\u4f1a\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u5c06\u73b0\u6709\u5c5e\u6027\u4ece\u7236\u4ee4\u724c\u590d\u5236\u5230\u65b0\u7684\u53d7\u9650\u4ee4\u724c\u65f6\uff0c\u5c06\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u3002\n\u901a\u8fc7\u8bbe\u7f6e\u65b0\u7684\u53d7\u9650\u4ee4\u724c\u7684\u7236\u4ee4\u724cID\uff0c\u5b83\u786e\u4fdd\u53ea\u6709\u521b\u5efa\u53d7\u9650\u4ee4\u724c\u7684\u8fdb\u7a0b\u624d\u80fd\u4e3a\u5b50\u8fdb\u7a0b\u4f7f\u7528\u5b83\uff0c\u56e0\u4e3a\u4ee4\u724cID\u5bf9\u4e8e\u4ee4\u724c\u5bf9\u8c61\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u552f\u4e00\u7684\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u66f4\u6539\u7236\u4ee4\u724cID\uff0c\u5144\u5f1f\u68c0\u67e5\u88ab\u7834\u574f\u3002\n\u7136\u800c\uff0c\u5f53\u6211\u5728\u505a\u4e00\u4e9b\u6d4b\u8bd5\u6765\u9a8c\u8bc1Windows101909\u4e0a\u7684\u4ee4\u724c\u5206\u914d\u884c\u4e3a\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\u3002\u65e0\u8bba\u6211\u521b\u5efa\u4e86\u4ec0\u4e48\u53d7\u9650\u4ee4\u724c\uff0c\u6211\u90fd\u65e0\u6cd5\u4f7f\u8d4b\u503c\u5931\u8d25\u3002\u518d\u6b21\u67e5\u770bSepFilterToken\uff0c\u6211\u53d1\u73b0\u4ee3\u7801\u5df2\u7ecf\u66f4\u6539\u3002\n\u5185\u6838\u4ee3\u7801\u73b0\u5728\u53ea\u662f\u4ece\u65e7\u4ee4\u724c\u76f4\u63a5\u590d\u5236\u7236\u4ee4\u724cID\u3002\u8fd9\u5b8c\u5168\u6253\u7834\u4e86\u68c0\u67e5\uff0c\u56e0\u4e3a\u65b0\u7684\u6c99\u7bb1\u8fdb\u7a0b\u6709\u4e00\u4e2a\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u88ab\u8ba4\u4e3a\u662f\u684c\u9762\u4e0a\u4efb\u4f55\u5176\u4ed6\u4ee4\u724c\u7684\u5144\u5f1f\u3002\n\u5047\u8bbe\u6211\u53ef\u4ee5\u7ed5\u8fc7\u5df2\u7ecf\u5230\u4f4d\u7684\u5176\u4ed63\u4e2a\u5b50\u8fdb\u7a0b\u7f13\u89e3\uff0c\u90a3\u4e48\u8fd9\u4e00\u884c\u66f4\u6539\u5c31\u8db3\u4ee5\u7a81\u7834\u53d7\u9650\u4ee4\u724c\u6c99\u7bb1\u3002\u8ba9\u6211\u4eec\u6765\u7ecf\u5386\u4e00\u4e0b\u4e3a\u505a\u5230\u8fd9\u4e00\u70b9\u800c\u627f\u62c5\u7684\u8003\u9a8c\u548c\u78e8\u96be\u3002\n\u6211\u60f3\u51fa\u7684\u6700\u7ec8\u6c99\u76d2\u9003\u9038\u662f\u76f8\u5f53\u590d\u6742\u7684\uff0c\u8fd9\u4e5f\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u65b9\u6cd5\u3002\u7136\u800c\uff0cWindows\u7684\u590d\u6742\u6027\u610f\u5473\u7740\u5728\u6211\u4eec\u7684\u94fe\u4e2d\u5f88\u96be\u627e\u5230\u53ef\u4f9b\u5229\u7528\u7684\u66ff\u4ee3\u539f\u8bed\u3002\n\u8ba9\u6211\u4eec\u4ece\u5c1d\u8bd5\u83b7\u53d6\u5408\u9002\u7684\u8bbf\u95ee\u4ee4\u724c\u6765\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u5f00\u59cb\u3002\u4ee4\u724c\u9700\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\uff1a\n\u4ee4\u724c\u5177\u6709\u7b49\u4e8e\u6c99\u7bb1IL\u7684IL\uff0c\u6216\u8005\u662f\u53ef\u5199\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u964d\u4f4eIL\u7ea7\u522b\u3002\n\u8bbf\u95ee\u4ee4\u724c\u662f\u53ef\u4fdd\u62a4\u7684\u5bf9\u8c61\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u6709\u8db3\u591f\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5219\u53ef\u4ee5\u6253\u5f00\u4ee4\u724c\u7684\u53e5\u67c4\u3002\u4f46\u662f\uff0c\u8bbf\u95ee\u4ee4\u724c\u4e0d\u662f\u7531\u540d\u79f0\u5f15\u7528\u7684\uff0c\u76f8\u53cd\uff0c\u8981\u6253\u5f00\u4ee4\u724c\uff0c\u60a8\u9700\u8981\u62e5\u6709\u5bf9\u8fdb\u7a0b\u6216\u6a21\u62df\u7ebf\u7a0b\u7684\u8bbf\u95ee\u6743\u9650\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528NtObjectManager PowerShell\u6a21\u5757\u901a\u8fc7Get-AccessibleToken\u547d\u4ee4\u67e5\u627e\u53ef\u8bbf\u95ee\u7684\u4ee4\u724c\u3002\n\u8be5\u811a\u672c\u83b7\u5f97\u5728\u6211\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u6bcf\u4e2a\u6c99\u7bb1Chrome\u8fdb\u7a0b\u7684\u53e5\u67c4(\u663e\u7136\u662f\u9996\u5148\u542f\u52a8Chrome)\uff0c\u7136\u540e\u4f7f\u7528\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u8bbf\u95ee\u4ee4\u724c\u6765\u786e\u5b9a\u6211\u4eec\u53ef\u4ee5\u6253\u5f00\u54ea\u4e9b\u5176\u4ed6\u4ee4\u724c\u8fdb\u884cToken_Duplicate\u8bbf\u95ee\u3002\u68c0\u67e5TOKEN_DUPLICATE\u4ee5\u7528\u4f5c\u65b0\u8fdb\u7a0b\u4e2d\u7684\u4ee4\u724c\u7684\u539f\u56e0\u662f\uff0c\u6211\u4eec\u9700\u8981\u5236\u4f5c\u4ee4\u724c\u7684\u526f\u672c\uff0c\u56e0\u4e3a\u4e24\u4e2a\u8fdb\u7a0b\u4e0d\u80fd\u4f7f\u7528\u76f8\u540c\u7684\u8bbf\u95ee\u4ee4\u724c\u5bf9\u8c61\u3002\u8bbf\u95ee\u68c0\u67e5\u4f1a\u8003\u8651\u8c03\u7528\u8fdb\u7a0b\u662f\u5426\u5177\u6709\u5bf9\u76ee\u6807\u8fdb\u7a0b\u7684PROCESS_QUERY_LIMITED_INFORMATION\u8bbf\u95ee\u6743\u9650\uff0c\u8fd9\u662f\u6253\u5f00\u4ee4\u724c\u7684\u5148\u51b3\u6761\u4ef6\u3002\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u76f8\u5f53\u6570\u91cf\u7684\u7ed3\u679c\uff0c\u8d85\u8fc7100\u4e2a\u6761\u76ee\u3002\n\u7136\u800c\uff0c\u8fd9\u4e2a\u6570\u5b57\u5177\u6709\u6b3a\u9a97\u6027\uff0c\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u7684\u4e00\u4e9b\u4ee4\u724c\u51e0\u4e4e\u80af\u5b9a\u4f1a\u6bd4\u5f53\u524d\u4ee4\u724c\u88ab\u6c99\u7bb1\u66f4\u591a\u5730\u88ab\u6c99\u7bb1\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u65e0\u6c99\u7bb1\u7684\u53ef\u8bbf\u95ee\u4ee4\u724c\u3002\u5176\u6b21\uff0c\u867d\u7136\u6709\u5f88\u591a\u53ef\u8bbf\u95ee\u7684\u4ee4\u724c\uff0c\u4f46\u8fd9\u5f88\u53ef\u80fd\u662f\u5c11\u6570\u8fdb\u7a0b\u80fd\u591f\u8bbf\u95ee\u5927\u91cf\u4ee4\u724c\u7684\u4ea7\u7269\u3002\u6211\u4eec\u5c06\u628a\u5b83\u8fc7\u6ee4\u5230\u53ea\u6709Chrome\u8fdb\u7a0b\u7684\u547d\u4ee4\u884c\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u975e\u6c99\u7bb1\u4ee4\u724c\u3002\n\u5728\u6240\u6709\u53ef\u80fd\u7684Chrome\u8fdb\u7a0b\u4e2d\uff0c\u53ea\u6709GPU\u8fdb\u7a0b\u548cAudio\u5b9e\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u975e\u6c99\u7bb1\u4ee4\u724c\u3002\u8fd9\u5e94\u8be5\u4e0d\u4f1a\u8ba9\u4eba\u5927\u5403\u4e00\u60ca\u3002\u7531\u4e8e\u8c03\u7528\u7cfb\u7edf\u670d\u52a1\u4ee5\u4f7f\u8fd9\u4e9b\u8fdb\u7a0b\u6b63\u5e38\u5de5\u4f5c\u7684\u9650\u5236\uff0c\u6e32\u67d3\u5668\u8fdb\u7a0b\u6bd4GPU\u6216\u97f3\u9891\u6c99\u7bb1\u7684\u9501\u5b9a\u7a0b\u5ea6\u8981\u9ad8\u5f97\u591a\u3002\u8fd9\u786e\u5b9e\u610f\u5473\u7740\u4eceRCE\u5230\u6c99\u7bb1\u8f6c\u4e49\u7684\u53ef\u80fd\u6027\u5927\u5927\u964d\u4f4e\uff0c\u56e0\u4e3a\u5927\u591a\u6570RCE\u53d1\u751f\u5728\u5448\u73b0HTML/JS\u5185\u5bb9\u65f6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cGPU\u9519\u8bef\u786e\u5b9e\u5b58\u5728\uff0c\u4f8b\u5982\uff0c\u8fd9\u4e2a\u9519\u8bef\u5c31\u662f\u6d1b\u57fa\u54c8\u7279\u57282016\u5e74Pwn2Own\u5927\u4f1a\u4e0a\u4f7f\u7528\u7684\u4e00\u4e2a\u9519\u8bef\u3002\n\u8ba9\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u5982\u4f55\u6446\u8131GPU\u8fdb\u7a0b\u6c99\u7bb1\u3002\u56e0\u4e3a\u6211\u6ca1\u6709GPU RCE\u53ef\u7528\uff0c\u6240\u4ee5\u6211\u5c06\u53ea\u5411\u8fdb\u7a0b\u4e2d\u6ce8\u5165\u4e00\u4e2aDLL\u6765\u8fd0\u884c\u8f6c\u4e49\u3002\u8fd9\u5e76\u4e0d\u50cf\u542c\u8d77\u6765\u90a3\u4e48\u7b80\u5355\uff0c\u4e00\u65e6GPU\u8fdb\u7a0b\u542f\u52a8\uff0c\u8be5\u8fdb\u7a0b\u5c31\u88ab\u9501\u5b9a\u4e3a\u53ea\u52a0\u8f7dMicrosoft\u7b7e\u540d\u7684DLL\u3002\u6211\u5bf9KnownDlls\u4f7f\u7528\u4e86\u4e00\u4e2a\u6280\u5de7\uff0c\u5c06DLL\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d(\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0)\u3002\n\u4e22\u5f03\u4ee4\u724c\u7684IL\u4ee5\u5339\u914d\u5f53\u524d\u4ee4\u724c(\u5bf9\u4e8eGPU\uff0c\u8fd9\u662f\u4f4eIL)\u3002\n\u5373\u4f7f\u662f\u5728\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u4e5f\u6709\u95ee\u9898\u3002\u83b7\u53d6\u65e0\u9650\u5236\u4ee4\u724c\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u6253\u5f00\u7236\u8fdb\u7a0b\u7684\u4ee4\u724c\uff0c\u7236\u8fdb\u7a0b\u662fChrome\u6d4f\u89c8\u5668\u7684\u4e3b\u8fdb\u7a0b\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u67e5\u770bGPU\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7684\u4ee4\u724c\u5217\u8868\uff0c\u60a8\u4f1a\u53d1\u73b0\u4e0d\u5305\u62ec\u4e3bChrome\u6d4f\u89c8\u5668\u8fdb\u7a0b\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u8fd9\u662f\u6545\u610f\u7684\uff0c\u56e0\u4e3a\u5728\u62a5\u544a\u5185\u6838\u4e2d\u7684\u8fd9\u4e2a\u9519\u8bef\u540e\uff0c\u6211\u610f\u8bc6\u5230GPU\u8fdb\u7a0b\u6c99\u7bb1\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\u8fdb\u7a0b\u7684\u4ee4\u724c\u3002\u6709\u4e86\u8fd9\u4e2a\u4ee4\u724c\uff0c\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53d7\u9650\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u5c06\u901a\u8fc7\u540c\u7ea7\u68c0\u67e5\u6765\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u66f4\u591a\u8bbf\u95ee\u6743\u9650\u7684\u65b0\u8fdb\u7a0b\uff0c\u5e76\u9000\u51fa\u6c99\u7bb1\u3002\u4e3a\u4e86\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4fee\u6539\u4e86\u8fdb\u7a0b\u4ee4\u724c\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4ee5\u963b\u6b62\u8f83\u4f4e\u7684IL\u8fdb\u7a0b\u4e3aTOKEN_DUPLICATE\u8bbf\u95ee\u6253\u5f00\u4ee4\u724c\u3002\u8bf7\u53c2\u9605HardenTokenIntegerityLevelPolicy\u3002\u5728\u6b64\u4fee\u590d\u4e4b\u524d\uff0c\u60a8\u4e0d\u9700\u8981\u5185\u6838\u4e2d\u7684bug\u5c31\u53ef\u4ee5\u9003\u79bbChrome GPU\u6c99\u7bb1\uff0c\u81f3\u5c11\u53ef\u4ee5\u8fbe\u5230\u6b63\u5e38\u7684\u4f4eIL\u4ee4\u724c\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u6ca1\u6709\u7b80\u5355\u7684\u8def\u5f84\u53ef\u7528\uff0c\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u7b80\u5355\u5730\u679a\u4e3e\u8fdb\u7a0b\uff0c\u5e76\u627e\u5230\u7b26\u5408\u6211\u4eec\u6807\u51c6\u7684\u8fdb\u7a0b\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528NtGetNextProcess\u7cfb\u7edf\u8c03\u7528\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6b63\u5982\u6211\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0(\u5173\u4e8e\u7a0d\u540e\u6211\u4eec\u5c06\u8ba8\u8bba\u7684\u4e3b\u9898)\u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u3002\u6211\u4eec\u4e3aPROCESS_QUERY_LIMITED_INFORMATION\u8bbf\u95ee\u6253\u5f00\u6240\u6709\u8fdb\u7a0b\uff0c\u7136\u540e\u4e3aTOKEN_DUPLICATE\u548cTOKEN_QUERY\u3002\u7136\u540e\uff0c\u5728\u7ee7\u7eed\u6267\u884c\u6b65\u9aa42\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4ee4\u724c\u4ee5\u786e\u4fdd\u5176\u4e0d\u53d7\u9650\u5236\u3002\n\u4e3a\u4e86\u590d\u5236\u4ee4\u724c\uff0c\u6211\u4eec\u8c03\u7528DuplicateTokenEx\u5e76\u8bf7\u6c42\u4e00\u4e2a\u4e3b\u4ee4\u724c\uff0c\u5c06TOKEN_ALL_ACCESS\u4f5c\u4e3a\u6240\u9700\u7684\u8bbf\u95ee\u6743\u9650\u8fdb\u884c\u4f20\u9012\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u964d\u4f4eIL\u65f6\uff0c\u4eceSetTokenInformation\u5f97\u5230ERROR_ACCESS_DENIED\u3002\u8fd9\u662f\u56e0\u4e3a\u5fae\u8f6f\u5728Windows10\u4e2d\u6dfb\u52a0\u4e86\u6c99\u7bb1\uff0c\u5e76\u91cd\u65b0\u79fb\u690d\u5230\u6240\u6709\u652f\u6301\u7684\u64cd\u4f5c\u7cfb\u7edf(\u5305\u62ecWindows7)\u3002\u4ee5\u4e0b\u4ee3\u7801\u662f\u5f15\u5165\u7f13\u89e3\u7684NtDuplicateToken\u4e2d\u7684\u4e00\u6bb5\u4ee3\u7801\u3002\n\u5f53\u60a8\u590d\u5236\u4ee4\u724c\u65f6\uff0c\u5185\u6838\u4f1a\u68c0\u67e5\u8c03\u7528\u65b9\u662f\u5426\u88ab\u6c99\u7bb1\u4fdd\u62a4\u3002\u5982\u679c\u5185\u6838\u88ab\u6c99\u7bb1\u4fdd\u62a4\uff0c\u5219\u68c0\u67e5\u8981\u590d\u5236\u7684\u4ee4\u724c\u662f\u5426\u6bd4\u8c03\u7528\u65b9\u53d7\u5230\u7684\u9650\u5236\u66f4\u5c11\u3002\u5982\u679c\u9650\u5236\u8f83\u5c11\uff0c\u5219\u4ee3\u7801\u5c06\u6240\u9700\u7684\u8bbf\u95ee\u9650\u5236\u4e3aTOKEN_READ\u548cTOKEN_EXECUTE\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u8bf7\u6c42\u8bf8\u5982TOKEN_ADJUST_DEFAULT\u8fd9\u6837\u7684\u5199\u8bbf\u95ee\uff0c\u5b83\u5c06\u5728\u4ece\u590d\u5236\u8c03\u7528\u8fd4\u56de\u7ed9\u6211\u4eec\u7684\u53e5\u67c4\u4e0a\u88ab\u5220\u9664\u3002\u53cd\u8fc7\u6765\uff0c\u8fd9\u5c06\u963b\u6b62\u6211\u4eec\u51cf\u5c11IL\uff0c\u4ee5\u4fbf\u5c06\u5176\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u3002\n\u8fd9\u4f3c\u4e4e\u7ed3\u675f\u4e86\u6211\u4eec\u7684\u5229\u7528\u94fe\u3002\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u5199\u5165\u4ee4\u724c\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u51cf\u5c11\u4ee4\u724c\u7684IL\uff0c\u8fd9\u4f1a\u963b\u6b62\u6211\u4eec\u5206\u914d\u5b83\u3002\u4f46\u662f\u5b9e\u73b0\u6709\u4e00\u4e2a\u5f88\u5c0f\u7684\u7f3a\u9677\uff0c\u590d\u5236\u64cd\u4f5c\u4f1a\u7ee7\u7eed\u5b8c\u6210\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8bbf\u95ee\u6743\u9650\u6709\u9650\u7684\u53e5\u67c4\u3002\u521b\u5efa\u65b0\u7684\u4ee4\u724c\u5bf9\u8c61\u65f6\uff0c\u9ed8\u8ba4\u5b89\u5168\u6027\u6388\u4e88\u8c03\u7528\u65b9\u5bf9\u4ee4\u724c\u5bf9\u8c61\u7684\u5b8c\u5168\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u83b7\u5f97\u65b0\u4ee4\u724c\u7684\u53e5\u67c4\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u666e\u901a\u7684DuplicateHandle API\u5c06\u5176\u8f6c\u6362\u4e3a\u5b8c\u5168\u53ef\u5199\u7684\u53e5\u67c4\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u8fd9\u662f\u5426\u662f\u6545\u610f\u7684\uff0c\u4e0d\u8fc7\u5e94\u8be5\u6ce8\u610f\uff0c\u5982\u679c\u65b0\u4ee4\u724c\u4e0d\u53d7\u9650\u5236\uff0cCreateRestrictedToken\u4e2d\u7684\u7c7b\u4f3c\u68c0\u67e5\u5c06\u8fd4\u56de\u9519\u8bef\u3002\u65e0\u8bba\u5728\u54ea\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6ee5\u7528\u8fd9\u4e00\u9519\u8bef\u7279\u6027\u6765\u83b7\u5f97\u4e00\u4e2a\u53ef\u5199\u7684\u65e0\u9650\u5236\u4ee4\u724c\uff0c\u4ee5\u4f7f\u7528\u6b63\u786e\u7684IL\u5c06\u5176\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u4e0d\u53d7\u9650\u5236\u7684\u4ee4\u724c\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528CreateProcessAsUser\u6765\u521b\u5efa\u6211\u4eec\u7684\u65b0\u6d41\u7a0b\u3002\u4f46\u4e0d\u4f1a\u90a3\u4e48\u5feb\uff0c\u56e0\u4e3aGPU\u8fdb\u7a0b\u4ecd\u5728\u4e00\u4e2a\u53d7\u9650\u7684Job\u5bf9\u8c61\u4e2d\u8fd0\u884c\uff0c\u8be5\u5bf9\u8c61\u4f1a\u963b\u6b62\u521b\u5efa\u65b0\u8fdb\u7a0b\u3002\u5927\u7ea65\u5e74\u524d\uff0c\u6211\u5728\u6211\u7684\u201cIn-Console-able\u201d\u535a\u5ba2\u6587\u7ae0\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86Job\u5bf9\u8c61\u5982\u4f55\u963b\u6b62\u65b0\u8fdb\u7a0b\u7684\u521b\u5efa\u3002\u6211\u4eec\u53ef\u4ee5\u4e0d\u4f7f\u7528\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u7684\u76f8\u540c\u9519\u8bef\u6765\u8f6c\u4e49\u4f5c\u4e1a\u5bf9\u8c61\u5417\uff1f\u5728Windows8.1\u4e0a\uff0c\u60a8\u53ef\u80fd\u53ef\u4ee5(\u5c3d\u7ba1\u6211\u627f\u8ba4\u6211\u6ca1\u6709\u6d4b\u8bd5\u8fc7)\uff0c\u4f46\u662f\u5728Windows10\u4e0a\uff0c\u6709\u4e24\u4ef6\u4e8b\u963b\u788d\u4e86\u6211\u4eec\u4f7f\u7528\u5b83\uff1a\nMicrosoft\u66f4\u6539\u4e86\u4f5c\u4e1a\u5bf9\u8c61\u4ee5\u652f\u6301\u8f85\u52a9\u8fdb\u7a0b\u8ba1\u6570\u5668\u3002\u5982\u679c\u60a8\u62e5\u6709SeTcbPrivilege\uff0c\u60a8\u53ef\u4ee5\u5411NtCreateUserProcess\u4f20\u9012\u4e00\u4e2a\u6807\u5fd7\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u4ecd\u5728Job\u5185\u7684\u65b0\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u4e0d\u8ba1\u5165\u8fdb\u7a0b\u8ba1\u6570\u3002\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u4f7f\u7528\u5b83\u6765\u6d88\u9664\u8f6c\u4e49\u4f5c\u4e1a\u7684\u8981\u6c42\u3002\u56e0\u4e3a\u6211\u4eec\u5728\u6c99\u7bb1\u4e2d\u6ca1\u6709SeTcbPrivilege\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6b64\u529f\u80fd\u3002\nMicrosoft\u5411\u4ee4\u724c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u6807\u5fd7\uff0c\u4ee5\u9632\u6b62\u5b83\u4eec\u88ab\u7528\u4e8e\u65b0\u8fdb\u7a0b\u3002\u6b64\u6807\u5fd7\u7531Chrome\u5728\u6240\u6709\u6c99\u7bb1\u8fdb\u7a0b\u4e0a\u8bbe\u7f6e\uff0c\u4ee5\u9650\u5236\u65b0\u7684\u5b50\u8fdb\u7a0b\u3002\u5373\u4f7f\u6ca1\u6709\u20181\u2019\uff0c\u8be5\u6807\u5fd7\u4e5f\u4f1a\u963b\u6b62\u6ee5\u7528\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u6765\u751f\u6210\u65b0\u8fdb\u7a0b\u3002\n\u8fd9\u4e24\u4e2a\u529f\u80fd\u7684\u7ec4\u5408\u4f1a\u963b\u6b62\u901a\u8fc7\u6ee5\u7528\u63a7\u5236\u53f0\u9a71\u52a8\u7a0b\u5e8f\u5728\u5f53\u524d\u4f5c\u4e1a\u4e4b\u5916\u751f\u6210\u65b0\u8fdb\u7a0b\u3002\u6211\u4eec\u9700\u8981\u60f3\u51fa\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u907f\u5f00Job\u5bf9\u8c61\u9650\u5236\uff0c\u540c\u65f6\u7ed5\u8fc7\u5b50\u8fdb\u7a0b\u9650\u5236\u6807\u5fd7\u3002\nJob\u5bf9\u8c61\u662f\u4ece\u7236\u5bf9\u8c61\u7ee7\u627f\u5230\u5b50\u5bf9\u8c61\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u627e\u5230GPU\u8fdb\u7a0b\u53ef\u4ee5\u63a7\u5236\u7684Job\u5bf9\u8c61\u4e4b\u5916\u7684\u8fdb\u7a0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8be5\u8fdb\u7a0b\u7528\u4f5c\u65b0\u7684\u7236\u8fdb\u7a0b\u5e76\u9000\u51faJob\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u81f3\u5c11\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u68c0\u67e5GPU\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9b\u8fdb\u7a0b\uff0c\u5b83\u53ea\u80fd\u6253\u5f00\u81ea\u5df1\u3002\n\u5f00\u653e\u672c\u8eab\u4e0d\u4f1a\u6709\u591a\u5927\u7528\u5904\uff0c\u6211\u4eec\u4e0d\u80fd\u6307\u671b\u5e78\u8fd0\u5730\u5904\u7406\u4e00\u4e2a\u6070\u597d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u800c\u8fd9\u4e2a\u8fdb\u7a0b\u65e2\u53ef\u4ee5\u8bbf\u95ee\uff0c\u53c8\u4e0d\u80fd\u8fd0\u884c\u4f5c\u4e1a\u3002\u6211\u4eec\u9700\u8981\u81ea\u5df1\u521b\u9020\u8fd0\u6c14\u3002\n\u6211\u6ce8\u610f\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u6709\u4e00\u4e2a\u5c0f\u7684\u7ade\u4e89\u6761\u4ef6\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u65b0\u7684Chrome\u6c99\u7bb1\u8fdb\u7a0b\u3002\u9996\u5148\u521b\u5efa\u8fdb\u7a0b\uff0c\u7136\u540e\u5e94\u7528\u4f5c\u4e1a\u5bf9\u8c61\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba9Chrome\u6d4f\u89c8\u5668\u751f\u6210\u4e00\u4e2a\u65b0\u7684GPU\u8fdb\u7a0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5e94\u7528Job\u5bf9\u8c61\u4e4b\u524d\u5c06\u5176\u7528\u4f5c\u7236\u8fdb\u7a0b\u3002GPU\u8fdb\u7a0b\u7684\u5904\u7406\u751a\u81f3\u652f\u6301\u5728\u8fdb\u7a0b\u5d29\u6e83\u65f6\u91cd\u65b0\u751f\u6210\u8fdb\u7a0b\u3002\u7136\u800c\uff0c\u6211\u65e0\u6cd5\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff0c\u8ba9\u4e00\u4e2a\u65b0\u7684GPU\u8fdb\u7a0b\u5728\u4e0d\u7ec8\u6b62\u5f53\u524d\u8fdb\u7a0b\u7684\u60c5\u51b5\u4e0b\u4ea7\u751f\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u8ba9\u4ee3\u7801\u8fd0\u884c\u8db3\u591f\u957f\u7684\u65f6\u95f4\u6765\u5229\u7528\u7ade\u4e89\u3002\n\u76f8\u53cd\uff0c\u6211\u51b3\u5b9a\u96c6\u4e2d\u7cbe\u529b\u5bfb\u627e\u4e00\u4e2aRPC\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5c06\u5728Job\u4e4b\u5916\u521b\u5efa\u4e00\u4e2a\u65b0\u6d41\u7a0b\u3002\u6709\u76f8\u5f53\u591a\u7684RPC\u670d\u52a1\u4ee5\u521b\u5efa\u8fdb\u7a0b\u4e3a\u4e3b\u8981\u76ee\u6807\uff0c\u800c\u5176\u4ed6\u670d\u52a1\u5219\u4ee5\u521b\u5efa\u8fdb\u7a0b\u4e3a\u526f\u4f5c\u7528\u3002\u4f8b\u5982\uff0c\u6211\u5df2\u7ecf\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8bb0\u5f55\u4e86\u4e8c\u7ea7\u767b\u5f55\u670d\u52a1\uff0c\u5176\u4e2dRPC\u670d\u52a1\u7684\u5168\u90e8\u76ee\u7684\u662f\u751f\u6210\u65b0\u8fdb\u7a0b\u3002\n\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u6709\u4e00\u70b9\u5c0f\u7f3a\u9677\uff0c\u7279\u522b\u662f\u4ee4\u724c\u4e2d\u7684\u5b50\u8fdb\u7a0b\u7f13\u89e3\u6807\u5fd7\u662f\u8de8\u6a21\u62df\u8fb9\u754c\u7ee7\u627f\u7684\u3002\u7531\u4e8e\u4f7f\u7528\u6a21\u62df\u4ee4\u724c\u4f5c\u4e3a\u65b0\u8fdb\u7a0b\u7684\u57fa\u7840\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u56e0\u6b64\u4efb\u4f55\u65b0\u8fdb\u7a0b\u90fd\u5c06\u88ab\u963b\u585e\u3002\u4f46\u662f\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u672a\u8bbe\u7f6e\u6807\u5fd7\u7684\u65e0\u9650\u5236\u4ee4\u724c\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u65e0\u9650\u5236\u4ee4\u724c\u6765\u521b\u5efa\u53ef\u4ee5\u5728RPC\u8c03\u7528\u671f\u95f4\u6a21\u62df\u7684\u53d7\u9650\u4ee4\u724c\uff0c\u5e76\u4e14\u53ef\u4ee5\u7ed5\u8fc7\u5b50\u8fdb\u7a0b\u7f13\u89e3\u6807\u5fd7\u3002\n\u6211\u5c1d\u8bd5\u5217\u51fa\u4e86\u54ea\u4e9b\u5df2\u77e5\u7684\u670d\u52a1\u53ef\u4ee5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\uff0c\u6211\u5c06\u8fd9\u4e9b\u670d\u52a1\u6c47\u603b\u5728\u4e0b\u8868\u4e2d\uff1a\n\u8be5\u8868\u5e76\u4e0d\u8be6\u5c3d\uff0c\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u5141\u8bb8\u521b\u5efa\u8fdb\u7a0b\u7684RPC\u670d\u52a1\u3002\u6b63\u5982\u6211\u4eec\u5728\u8868\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u4ea7\u751f\u4e8c\u7ea7\u767b\u5f55\u3001WMI\u548cBITS\u7b49\u8fdb\u7a0b\u7684\u4f17\u6240\u5468\u77e5\u7684RPC\u670d\u52a1\u4e0d\u80fd\u4ece\u6211\u4eec\u7684\u6c99\u7bb1\u7ea7\u522b\u8bbf\u95ee\u3002UAC\u670d\u52a1\u662f\u53ef\u8bbf\u95ee\u7684\uff0c\u6b63\u5982\u6211\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u4e2d\u6240\u63cf\u8ff0\u7684\uff0c\u5b58\u5728\u4e00\u79cd\u901a\u8fc7\u6ee5\u7528\u8c03\u8bd5\u5bf9\u8c61\u6765\u6ee5\u7528\u8be5\u670d\u52a1\u6765\u8fd0\u884c\u4efb\u610f\u7279\u6743\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u521b\u5efa\u65b0\u7684UAC\u8fdb\u7a0b\u65f6\uff0c\u8be5\u670d\u52a1\u5c06\u7236\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u8c03\u7528\u8005\u8fdb\u7a0b\u3002\u7531\u4e8e\u7ee7\u627f\u4e86Job\u5bf9\u8c61\uff0c\u56e0\u6b64\u65b0\u8fdb\u7a0b\u5c06\u88ab\u963b\u6b62\u3002\n\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u670d\u52a1\u662fDCOM\u6fc0\u6d3b\u5668\u3002\u8fd9\u662f\u8d1f\u8d23\u542f\u52a8\u8fdb\u7a0b\u5916COM\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u53ef\u4ee5\u4ece\u6211\u4eec\u7684\u6c99\u7bb1\u7ea7\u522b\u8fdb\u884c\u8bbf\u95ee\u3002\u5b83\u8fd8\u5c06\u6240\u6709COM\u670d\u52a1\u5668\u4f5c\u4e3a\u670d\u52a1\u8fdb\u7a0b\u7684\u5b50\u7ea7\u542f\u52a8\uff0c\u8fd9\u610f\u5473\u7740\u4f5c\u4e1a\u5bf9\u8c61\u4e0d\u4f1a\u88ab\u7ee7\u627f\u3002\u770b\u8d77\u6765\u5f88\u7406\u60f3\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u4e3a\u4e86\u4f7fDCOM Activator\u6709\u7528\uff0c\u6211\u4eec\u9700\u8981\u6c99\u7bb1\u53ef\u4ee5\u521b\u5efa\u7684\u8fdb\u7a0b\u5916COM\u670d\u52a1\u5668\u3002\u6b64\u5bf9\u8c61\u5fc5\u987b\u6ee1\u8db3\u4e00\u7ec4\u6761\u4ef6\uff1a\n\u670d\u52a1\u5668\u4e0d\u80fd\u4f5c\u4e3a\u4ea4\u4e92\u5f0f\u7528\u6237(\u5c06\u4ece\u6c99\u7bb1\u4e2d\u6d3e\u751f\u51fa\u6765)\u6216\u5728\u670d\u52a1\u8fdb\u7a0b\u5185\u90e8\u8fd0\u884c\u3002\n\u6211\u4eec\u4e0d\u5fc5\u62c5\u5fc3\u6807\u51c63\uff0cGPU\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7cfb\u7edf\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u575a\u6301\u4f7f\u7528\u9884\u5148\u5b89\u88c5\u7684COM\u670d\u52a1\u5668\u3002\u5982\u679c\u6211\u4eec\u5728\u521b\u5efa\u540e\u4e0d\u80fd\u8bbf\u95eeCOM\u670d\u52a1\u5668\uff0c\u4e5f\u4e0d\u8981\u7d27\uff0c\u6211\u4eec\u6240\u9700\u8981\u7684\u5c31\u662f\u5728\u4f5c\u4e1a\u4e4b\u5916\u542f\u52a8COM\u670d\u52a1\u5668\u8fdb\u7a0b\u7684\u6743\u9650\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u52ab\u6301\u5b83\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528OleViewDotNet\u548cSelect-ComAccess\u547d\u4ee4\u67e5\u627e\u53ef\u8bbf\u95ee\u7684COM\u670d\u52a1\u5668\u3002\n\u5728\u9ed8\u8ba4\u5b89\u88c5\u7684Windows 10\u4e0a\uff0c\u6211\u4eec\u67096\u4e2a\u5019\u9009\u8005\u3002\u8bf7\u6ce8\u610f\uff0c\u6700\u540e4\u4e2a\u90fd\u5728DLL\u4e2d\uff0c\u4f46\u662f\u8fd9\u4e9b\u7c7b\u88ab\u6ce8\u518c\u4e3a\u5728DLL\u4ee3\u7406\u7a0b\u5e8f\u5185\u8fd0\u884c\uff0c\u56e0\u6b64\u4ecd\u7136\u53ef\u4ee5\u5728\u8fdb\u7a0b\u5916\u4f7f\u7528\u3002\u6211\u51b3\u5b9a\u4f7f\u7528COREDPUSSVR\u4e2d\u7684\u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u5b83\u662f\u552f\u4e00\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u901a\u7528\u7684DLLHOST\uff0c\u56e0\u6b64\u66f4\u5bb9\u6613\u627e\u5230\u3002\u6b64COM\u670d\u52a1\u5668\u7684\u542f\u52a8\u5b89\u5168\u6027\u6388\u4e88Everyone\u548c\u6240\u6709AppContainer\u5305\u672c\u5730\u6fc0\u6d3b\u6743\u9650\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u53e6\u5916\uff0c\u5c3d\u7ba1\u6709\u4e24\u4e2a\u7c7b\u6ce8\u518c\u4e86COREDPUSSVR\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u6709\u4e00\u4e2a\u4ee5417976b7\u5f00\u5934\u7684\u7c7b\u662f\u7531\u53ef\u6267\u884c\u6587\u4ef6\u6ce8\u518c\u7684\u3002\u521b\u5efa\u53e6\u4e00\u4e2a\u7c7b\u5c06\u542f\u52a8\u670d\u52a1\u5668\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4f46\u662f\u7c7b\u521b\u5efa\u5c06\u6302\u8d77\uff0c\u7b49\u5f85\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u7684\u7c7b\u3002\n\u8981\u542f\u52a8\u670d\u52a1\u5668\uff0c\u60a8\u53ef\u4ee5\u5728\u6a21\u62df\u5b50\u8fdb\u7a0b\u7f13\u89e3\u65e0\u6807\u5fd7\u53d7\u9650\u4ee4\u724c\u65f6\u8c03\u7528CoCreateInstance\u3002\u60a8\u8fd8\u9700\u8981\u4f20\u9012CLSCTX_ENABLE_COWAKING\u4ee5\u4f7f\u7528\u6a21\u62df\u4ee4\u724c\u6fc0\u6d3b\u670d\u52a1\u5668\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u4f7f\u7528\u8fdb\u7a0b\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u8bbe\u7f6e\u5b50\u8fdb\u7a0b\u7f13\u89e3\u6807\u5fd7\uff0c\u56e0\u6b64\u4f1a\u963b\u6b62\u8fdb\u7a0b\u521b\u5efa\u3002\u8fd9\u6837\u505a\uff0c\u60a8\u4f1a\u53d1\u73b0COREDPUSSVR\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5728\u76f8\u540c\u7684\u6c99\u7bb1\u7ea7\u522b\u4e0a\u8fd0\u884c\uff0c\u4f46\u662f\u5728Job\u5bf9\u8c61\u4e4b\u5916\uff0c\u5e76\u4e14\u6ca1\u6709\u5b50\u8fdb\u7a0b\u7f13\u89e3\u3002\u6210\u529f\uff1f\n\u8fd8\u6ca1\u90a3\u4e48\u5feb\u3002\u901a\u5e38\uff0c\u65b0\u8fdb\u7a0b\u7684\u7f3a\u7701\u5b89\u5168\u6027\u57fa\u4e8e\u7528\u4e8e\u521b\u5efa\u5b83\u7684\u8bbf\u95ee\u4ee4\u724c\u5185\u7684\u7f3a\u7701DACL\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u7531\u4e8e\u67d0\u4e9b\u4e0d\u6e05\u695a\u7684\u539f\u56e0\uff0cDCOM\u6fc0\u6d3b\u5668\u5728\u8fdb\u7a0b\u4e0a\u8bbe\u7f6e\u4e86\u663e\u5f0fDACL\uff0c\u8be5DACL\u4ec5\u6388\u4e88\u7528\u6237\u3001\u7cfb\u7edf\u548c\u5f53\u524d\u767b\u5f55SID\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u4e0d\u5141\u8bb8GPU\u8fdb\u7a0b\u6253\u5f00\u65b0\u7684COM\u670d\u52a1\u5668\u8fdb\u7a0b\uff0c\u5373\u4f7f\u5b83\u5b9e\u9645\u4e0a\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5b89\u5168\u7ea7\u522b\u3002\u5982\u6b64\u63a5\u8fd1\uff0c\u5374\u53c8\u5982\u6b64\u9065\u8fdc\u3002\u6211\u5c1d\u8bd5\u4e86\u51e0\u79cd\u65b9\u6cd5\u6765\u8ba9\u4ee3\u7801\u5728COM\u670d\u52a1\u5668\u5185\u6267\u884c\uff0c\u6bd4\u5982Windows Hooks\uff0c\u4f46\u662f\u90fd\u6ca1\u6709\u660e\u663e\u7684\u6548\u679c\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u9ed8\u8ba4\u7684DACL\u4ecd\u7136\u7528\u4e8e\u8fdb\u7a0b\u542f\u52a8\u540e\u521b\u5efa\u7684\u4efb\u4f55\u7ebf\u7a0b\u3002\u6211\u4eec\u53ef\u4ee5\u6253\u5f00\u5176\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5b8c\u5168\u8bbf\u95ee\uff0c\u5e76\u4f7f\u7528S\u5c06\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u66f4\u6539\u4e3a\u91cd\u5b9a\u5411\u6267\u884c\u3002\n..", "note_en": "The Chromium sandbox on Windows has stood the test of time. It\u2019s considered one of the better sandboxing mechanisms deployed at scale without requiring elevated privileges to function. For all the good, it does have its weaknesses. The main one being the sandbox\u2019s implementation is reliant on the security of the Windows OS. Changing the behavior of Windows is out of the control of the Chromium development team. If a bug is found in the security enforcement mechanisms of Windows then the sandbox can break.\n   This blog is about a   vulnerability  introduced in Windows 10 1903 which broke some of the security assumptions that Chromium relied on to make the sandbox secure. I\u2019ll present how I used the bug to develop a chain of execution to escape the sandbox as used for the GPU Process on Chrome/Edge or the default content sandbox in Firefox. The exploitation process is also an interesting insight into the little weaknesses in Windows which in themselves do not cross a security boundary but led to a successful sandbox escape. This vulnerability was fixed in April 2020 as   CVE-2020-0981 .\n  Let\u2019s have a quick look at how the   Chromium sandbox works on Windows  before describing the bug itself. The sandbox works on the concept of least privilege by using Restricted Tokens. A Restricted Token is a feature added in Windows 2000 to reduce the access granted to a process through the modification of the Process\u2019s Access Token through the following operations:\n    Disabling groups removes the Access Token\u2019s membership, resulting in disabling access to resources secured by those groups. Removing privileges prevents the process from performing any unnecessary privileged operations. Finally, adding restricted SIDs changes the security access check process. To be granted access to a resource we need to match a security descriptor entry for both a group in our main list as well as the list of Restricted SIDs. If one of the lists of SIDs does not grant access to the resource then access will be denied.\n   Chromium also uses the Integrity Level (IL) feature added in Vista to further restrict resource access. By setting a low IL we can block write access to higher integrity resources regardless of the result of the access check.\n   Using Restricted Tokens with IL in this way allows the sandbox to limit what resources a compromised process can access and therefore the impact an RCE can have. It\u2019s especially important to block write access as that would typically grant an attacker leverage to compromise other parts of the system by writing files or registry keys.\n   Any process on Windows can create a new process with a different Token, for example by calling   CreateProcessAsUser . What stops a sandboxed process creating a new process using an unrestricted token? Windows and Chromium implement a few security mitigations to make creating a new process outside of the sandbox difficult:\n The Kernel restricts what Tokens can be assigned by an unprivileged user to a new process.\n The sandbox restrictions limit the availability of suitable access tokens to use for the new process.\n Chromium runs a sandboxed process inside a Job object which is inherited by any child processes which has a hard process quota limit of 1.\n From Windows 10, Chromium uses the Child Process Mitigation Policy to block child process creation. This is applied in addition to the Job object from 3.\n   All of these mitigations are ultimately relying on Windows to be secure. However by far the most critical is 1. Even if 2 through 4 fail, in theory we shouldn\u2019t be able to assign a more privileged access token to the new process. What is the kernel checking when it comes to assigning a new token?\n   Assuming the calling process doesn\u2019t have  SeAssignPrimaryTokenPrivilege  (which we don\u2019t) then the new token must meet one of two criteria which are checked in the kernel function  SeIsTokenAssignableToProcess . The criteria are based on specified values in the kernel\u2019s TOKEN object structure as shown in the following diagram\n       A child of the current process token. Based on the new token\u2019s Parent Token ID being equal to the Process Token\u2019s ID.\n A sibling of the current process token. Based on both the Parent Token ID and Authentication ID fields being equal.\n   There\u2019s also additional checks to ensure that the new Token is not an identification level impersonation token (due to this   bug  I reported) and the IL of the new token must be less than or equal to the current process token. These are equally important, but as we\u2019ll see, less useful in practice.\n   One thing the token assignment does not obviously check is whether the Parent or Child tokens are restricted. If you were in a restricted token sandbox could you get an Unrestricted Token which passes all of the checks and assign it to a child effectively escaping the sandbox? No you can\u2019t, the system ensures the Sibling Token check fails when assigning Restricted Tokens and instead ensures the Parent/Child check is the one which will be enforced. If you inspect the kernel function  SepFilterToken , you\u2019ll understand how this is implemented. The following code is executed when copying the existing properties from the parent token to the new restricted token.\n      By setting the new Restricted Token\u2019s Parent Token ID it ensures that only the process which created the Restricted Token can use it for a child as the Token ID is unique for every instance of a TOKEN object. At the same time by changing the Parent Token ID the sibling check is broken.\n   However, when I was doing some testing to verify the token assignment behavior on Windows 10 1909 I noticed something odd. No matter what Restricted Token I created I couldn\u2019t get the assignment to fail. Looking at  SepFilterToken  again I found the code had changed.\n      The kernel code was now just copying the Parent Token ID directly across from the old token. This completely breaks the check, as the new sandboxed process has a token which is considered a sibling of any other token on the desktop.\n   This one line change could just be sufficient to break out of the Restricted Token sandbox, assuming I could bypass the other 3 child process mitigations already in place. Let\u2019s go through the trials and tribulations undertaken to do just that.\n  The final sandbox escape I came up with is quite complicated, it\u2019s also not necessarily the optimal approach. However, the complexity of Windows means it can be difficult to find alternative primitives to exploit in our chain.\n   Let\u2019s start with trying to get a suitable access token to assign to a new process. The token needs to meet some criteria:\n The Token has an IL equal to the sandbox IL, or is writable so that the IL level can be reduced.\n   Access Tokens are securable objects therefore if you have sufficient access you can open a handle to a Token. However, Access Tokens are not referred to by a name, instead to open a Token you need to have access to either a Process or an Impersonating Thread. We can use my   NtObjectManager  PowerShell module to find accessible tokens using the  Get-AccessibleToken  command.\n      This script gets a handle to every sandboxed Chrome process running on my machine (obviously start Chrome first), then uses the access token from each process to determine what other tokens we can open for  TOKEN_DUPLICATE  access. The reason for checking for  TOKEN_DUPLICATE  to use as the token in a new process is that we need to make a copy of the token as two processes can\u2019t use the same access token object. The access check takes into account whether the calling process would have  PROCESS_QUERY_LIMITED_INFORMATION  access to the target process which is a prerequisite for opening the Token. We\u2019ve got a fair number of results, over 100 entries.\n   However this number is deceiving, for a start, some of the Tokens we can access will almost certainly be sandboxed more than the current token is sandboxed. Really we want only accessible tokens which are unsandboxed. Secondly, while there\u2019s a lot of accessible tokens, that&#39;s likely an artifact of a small number of processes being able to access a large number of tokens. We\u2019ll filter it down to just the command lines of the Chrome processes which can access non-sandboxed tokens.\n      Out of all the potential Chrome processes only the GPU process and the Audio utility process have access to non-sandbox tokens. This shouldn\u2019t come as a massive surprise. The renderer processes are significantly more locked down than either the GPU or Audio sandboxes due to the limitations of calling into system services for those processes to function. This does mean that the likelihood of an RCE to sandbox escape is much reduced, as most RCE occur in rendering HTML/JS content. That said GPU bugs do exist, for example   this bug  is one used by Lokihardt at Pwn2Own 2016.\n   Let\u2019s focus on escaping the GPU process sandbox. As I don\u2019t have a GPU RCE to hand I\u2019ll just inject a DLL into the process to run the escape. That\u2019s not as simple as it sounds, once the GPU process has started the process is locked down to only loading Microsoft signed DLLs. I use a trick with  KnownDlls  to load the DLL into memory (see   this blog post  for full details).\n    Drop the IL of the token to match the current token (for GPU this is Low IL)\n   Even for step 1 we\u2019ve got a problem. The simplest way of getting an unrestricted token would be to open the token for the parent process which is the main Chrome browser process. However, if you look through the list of tokens the GPU process can access you\u2019ll find that the main Chrome browser process is not included. Why is that? This is intentional, as I realized after reporting   this bug  in the kernel that a GPU process sandbox could open the browser process\u2019 token. With this token it\u2019s possible to create a new restricted token which would pass the sibling check to create a new process with much more access and escape the sandbox. To mitigate this I modified the access for the process token to block lower IL processes from opening the token for  TOKEN_DUPLICATE  access. See   HardenTokenIntegerityLevelPolicy . Prior to this fix you didn\u2019t need a bug in the kernel to escape the Chrome GPU sandbox, at least to a normal Low IL token.\n   Therefore the easy route is not available to us, however we should be able to trivially enumerate processes and find one which meets our criteria. We can do this by using the  NtGetNextProcess  system call as I described in a   previous blog post  (on a topic we\u2019ll come back to later). We open all processes for  PROCESS_QUERY_LIMITED_INFORMATION  access, then open the token for  TOKEN_DUPLICATE  and  TOKEN_QUERY  access. We can then inspect the token to ensure it\u2019s unrestricted before proceeding to step 2.\n   To duplicate the token we call   DuplicateTokenEx  and request a primary token passing  TOKEN_ALL_ACCESS  as the desired access. But there\u2019s a new problem, when we try and lower the IL we get  ERROR_ACCESS_DENIED  from   SetTokenInformation . This is due to a sandbox mitigation Microsoft added to Windows 10 and back ported to all supported OS\u2019s (including Windows 7). The following code is a snippet from  NtDuplicateToken  where the mitigation has been introduced.\n      When you duplicate a token the kernel checks if the caller is sandboxed. If sandboxed the kernel then checks if the token to be duplicated is less restricted than the caller. If it\u2019s less restricted then the code limits the desired access to  TOKEN_READ  and  TOKEN_EXECUTE . This means that if we request a write access such as  TOKEN_ADJUST_DEFAULT  it\u2019ll be removed on the handle returned to us from the duplication call. In turn this will prevent us reducing the IL so that it can be assigned to a new process.\n   This would seem to end our exploit chain. If we can\u2019t write to the token, we can\u2019t reduce the token\u2019s IL, which prevents us from assigning it. But the implementation has a tiny flaw, the duplicate operation continues to complete and returns a handle just with limited access rights. When you create a new token object the default security grants the caller full access to the Token object. This means once you get back a handle to the new Token you can call the normal   DuplicateHandle  API to convert it to a fully writable handle. It\u2019s unclear if this was intentional or not, although it should be noted that the similar check in  CreateRestrictedToken  returns an error if the new token isn\u2019t as restricted. Whatever the case we can abuse this misfeature to get an writable unrestricted token to assign to the new process with the correct IL.\n   Now that we can get an unrestricted token we can call  CreateProcessAsUser  to create our new process. But not so fast, as the GPU process is still running in a restrictive Job object which prevents creating new processes. I detailed how Job objects prevent new process creation in my \u201c  In-Console-Able \u201d blog post almost 5 years ago. Can we not use the same bug in the Console Driver to escape the Job object? On Windows 8.1 you probably can (although I\u2019ll admit I\u2019ve not tested), however on Windows 10 there\u2019s two things which prevent us from using it:\n Microsoft changed Job objects to support an auxiliary process counter. If you have  SeTcbPrivilege  you can pass a flag to  NtCreateUserProcess  to create a new process still inside the Job which doesn\u2019t count towards the process count. This is used by the Console Driver to remove the requirement to escape the Job. As we don\u2019t have  SeTcbPrivilege  in the sandbox we can\u2019t use this feature.\n Microsoft added a new flag to Tokens which prevent them being used for a new process. This flag is set by Chrome on all sandboxed processes to restrict new child processes. Even without \u20181\u2019 the flag would block abusing the Console Driver to spawn a new process.\n   The combination of these two features blocks spawning a new process outside of the current Job by abusing the Console Driver. We need to come up with another way of escaping both the Job object restriction and to also circumvent the child process restriction flag.\n   The Job object is inherited from parent to child, therefore if we could find a process outside of a Job object which the GPU process can control we can use that process as a new parent and escape the Job. Unfortunately, at least by default, if you check what processes the GPU process can access it can only open itself.\n      Opening itself isn\u2019t going to be very useful, and we can\u2019t rely on getting lucky with a process which just happens to be running at the time which is both accessible and not running a Job. We need to make our own luck.\n   One thing I noticed is that there\u2019s a small race condition setting up a new Chrome sandbox process. The process is first created, then the   Job object is applied . If we could get the Chrome browser to spawn a new GPU process we could use it as a parent before the Job object is applied. The handling of the GPU process even supports respawning the process if it crashes. However I couldn\u2019t find a way of getting a new GPU process to spawn without also causing the current one to terminate so it wasn\u2019t possible to have code running long enough to exploit the race.\n   Instead I decided to concentrate on finding a RPC service which would create a new process outside of the Job. There\u2019s quite a few RPC services where process creation is the main goal, and others where process creation is a side effect. For example I already documented the Secondary Logon service in a   previous blog post  where the entire purpose of the RPC service is to spawn new processes.\n   There is a slight flaw in this idea though, specifically the child process mitigation flag in the token is inherited across impersonation boundaries. As it\u2019s common to use the impersonated token as the basis for the new process any new process will be blocked. However, we have an unrestricted token that does not have the flag set. We can use the unrestricted token to create a restricted token we can impersonate during a RPC call and we can bypass the child process mitigation flag.\n   I tried to list what known services could be used in this way, which I\u2019ve put together in the following table:\n      The table is not exhaustive and there\u2019s likely to be other RPC services which would allow processes to be created. As we can see in the table, well known RPC services which spawn processes such as Secondary Logon, WMI and BITS are not accessible from our sandbox level. The UAC service is accessible and as I described in a   previous blog post  there exists a way of abusing the service to run arbitrary privileged code by abusing debug objects. Unfortunately when a new UAC process is created the service sets the parent process to the caller process. As the Job object is inherited the new process will be blocked.\n   The last service in the list is the DCOM Activator. This is the system service which is responsible for starting out-of-process COM servers and is accessible from our sandbox level. It also starts all COM servers as children of the service process which means the Job object is not inherited. Seems ideal, however there is a slight issue, in order for the DCOM Activator to be useful we need an out-of-process COM server that the sandbox can create. This object must meet a set of criteria:\n   The server must not run as Interactive User (which would spawn out of the sandbox) or inside a service process.\n   We don\u2019t have to worry about criteria 3, the GPU process can access system executables so we\u2019ll stick to pre-installed COM servers. It also doesn\u2019t matter if we can\u2019t access the COM server after creation, all we need is the rights to start the COM server process outside of the Job and then we can hijack it. We can find accessible COM servers using   OleViewDotNet  and the  Select-ComAccess  command.\n      On a default installation of Windows 10 we have 6 candidates. Note that the last 4 are all in DLLs, however these classes are registered to run inside a   DLL Surrogate  so can still be used out-of-process. I decided to go for the servers in COREDPUSSVR because it\u2019s a unique executable rather than the generic DLLHOST so makes it easier to find. The Launch Security for this COM server grants  Everyone  and all AppContainer packages local activation permission as shown below:\n    As an aside, even though there are two classes registered for COREDPUSSVR, only the one starting with  417976b7  is actually registered by the executable. Creating the other class will start the server executable, however the class creation will hang waiting for a class which will never come.\n   To start the server you call   CoCreateInstance  while impersonating the child process mitigation flag-free restricted token. You need to pass the  CLSCTX_ENABLE_CLOAKING  as well to activate the server using the impersonation token, the default would use the process token which has the child process mitigation flag set and so would block process creation. Doing this, you\u2019ll find an instance of COREDPUSSVR running at the same sandbox level however outside of the Job object and without the child process mitigation. Success?\n   Not so fast. Normally the default security of a new process is based on the default DACL inside the access token used to create it. Unfortunately for some unclear reason the DCOM activator sets an explicit DACL on the process which only grants access to the user, SYSTEM and the current logon SID. This doesn\u2019t allow the GPU process to open the new COM server process, even though it\u2019s running at effectively the same security level. So close and yet so far. I tried a few approaches to get code executed inside the COM server such as   Windows Hooks  however nothing obvious worked.\n   Fortunately, the default DACL is still used for any threads created after process startup. We can open one of those threads for full access and change the thread context to redirect execution using   S\n......", "posttime": "2020-05-12 15:04:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "chrom,chrome,line,\u8fdb\u7a0b", "title": "\u4f60\u4e0d\u4f1a\u76f8\u4fe1\u8fd9\u4e00\u884c\u7684\u6539\u53d8\u5bf9Chrome\u6c99\u76d2\u9020\u6210\u4e86\u4ec0\u4e48\u5f71\u54cd", "title_en": "You Won't Believe What This One Line Change Did to the Chrome Sandbox", "transed": 1, "url": "https://googleprojectzero.blogspot.com/2020/04/you-wont-believe-what-this-one-line.html?m=1", "via": "", "real_tags": ["chrom", "chrome", "line", "\u8fdb\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "cd7f90b3b7167c9468e810dae283b838.jpg", "infoid": 1001775, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u53ef\u4ee5\u4e0e\u4e07\u7ef4\u7f51\u6253\u4ea4\u9053\uff0c\u800c\u4f01\u4e1a\u7684\u56de\u5e94\u8303\u56f4\u8981\u5c0f\u5f97\u591a\u3002\u4eba\u4eec\u5f88\u5bb9\u6613\u8ba4\u4e3a\uff0c\u8fd9\u5e94\u8be5\u4f1a\u8ba9\u6211\u4eec\u66f4\u5bb9\u6613\u627e\u5230\u7406\u60f3\u7684\u56de\u5e94\uff0c\u4f46\u4e8b\u5b9e\u6070\u6070\u76f8\u53cd\u3002\u60a8\u62e5\u6709\u7684\u6570\u636e\u8d8a\u591a\uff0c\u627e\u5230\u6b63\u786e\u6587\u6863\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5927\u3002\n\u4e9a\u9a6c\u900a\u6b63\u8bd5\u56fe\u6539\u53d8\u4f01\u4e1a\u641c\u7d22\u6e38\u620f\uff0c\u5c06\u5176\u7f6e\u4e8e\u66f4\u73b0\u4ee3\u7684\u673a\u5668\u5b66\u4e60\u9a71\u52a8\u7684\u73af\u5883\u4e2d\uff0c\u4f7f\u7528\u5f53\u4eca\u7684\u6280\u672f\u6765\u5e2e\u52a9\u4f60\u627e\u5230\u5b8c\u7f8e\u7684\u7b54\u6848\uff0c\u5c31\u50cf\u4f60\u901a\u5e38\u5728\u7f51\u7edc\u4e0a\u6240\u505a\u7684\u90a3\u6837\u3002\n\u4eca\u5929\uff0c\u8be5\u516c\u53f8\u5ba3\u5e03\u4e9a\u9a6c\u900aKendra\u5168\u9762\u4e0a\u5e02\uff0c\u8fd9\u662f\u8be5\u516c\u53f8\u53bb\u5e74\u5728AWS Re\uff1aInventt\u4e0a\u5ba3\u5e03\u7684\u4e91\u4f01\u4e1a\u641c\u7d22\u4ea7\u54c1\u3002\u5b83\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff0c\u5141\u8bb8\u7528\u6237\u7b80\u5355\u5730\u63d0\u51fa\u95ee\u9898\uff0c\u7136\u540e\u5728\u8fde\u63a5\u5230\u641c\u7d22\u5f15\u64ce\u7684\u5b58\u50a8\u5e93\u4e2d\u641c\u7d22\uff0c\u4ee5\u627e\u5230\u51c6\u786e\u7684\u7b54\u6848\u3002\n\u201c\u4e9a\u9a6c\u900a\u80af\u5fb7\u62c9\u901a\u8fc7\u5141\u8bb8\u7ec8\u7aef\u7528\u6237\u4f7f\u7528\u771f\u5b9e\u95ee\u9898(\u800c\u4e0d\u4ec5\u4ec5\u662f\u5173\u952e\u5b57)\u5728\u591a\u4e2a\u6570\u636e\u5b64\u5c9b\u4e0a\u8fdb\u884c\u641c\u7d22\uff0c\u4ece\u800c\u91cd\u5851\u4e86\u4f01\u4e1a\u641c\u7d22\uff0c\u5e76\u5728\u5e55\u540e\u5229\u7528\u673a\u5668\u5b66\u4e60\u6a21\u578b\u6765\u7406\u89e3\u6587\u6863\u7684\u5185\u5bb9\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4ece\u800c\u63d0\u4f9b\u4ed6\u4eec\u5bfb\u6c42\u7684\u51c6\u786e\u7b54\u6848(\u800c\u4e0d\u662f\u968f\u673a\u7684\u94fe\u63a5\u5217\u8868)\uff0c\u201d\u8be5\u516c\u53f8\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u63cf\u8ff0\u4e86\u8fd9\u9879\u65b0\u670d\u52a1\u3002\nAWS\u5df2\u7ecf\u9488\u5bf9\u5305\u62ecIT\u3001\u533b\u7597\u4fdd\u5065\u548c\u4fdd\u9669\u5728\u5185\u7684\u7279\u5b9a\u884c\u4e1a\u8c03\u6574\u4e86\u641c\u7d22\u5f15\u64ce\u3002\u5b83\u627f\u8bfa\uff0c\u80fd\u6e90\u3001\u5de5\u4e1a\u3001\u91d1\u878d\u670d\u52a1\u3001\u6cd5\u5f8b\u3001\u5a92\u4f53\u548c\u5a31\u4e50\u3001\u65c5\u884c\u548c\u63a5\u5f85\u3001\u4eba\u529b\u8d44\u6e90\u3001\u65b0\u95fb\u3001\u7535\u4fe1\u3001\u91c7\u77ff\u3001\u98df\u54c1\u548c\u996e\u6599\u4ee5\u53ca\u6c7d\u8f66\u5c06\u5728\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u5230\u6765\u3002\n\u8fd9\u610f\u5473\u7740\u8fd9\u4e9b\u884c\u4e1a\u4e2d\u7684\u4efb\u4f55\u4e00\u5bb6\u516c\u53f8\u5728\u641c\u7d22\u65b9\u9762\u90fd\u5e94\u8be5\u9886\u5148\u4e00\u6b65\uff0c\u56e0\u4e3a\u7cfb\u7edf\u5c06\u7406\u89e3\u7279\u5b9a\u4e8e\u8fd9\u4e9b\u5782\u76f4\u884c\u4e1a\u7684\u8bed\u8a00\u3002\u60a8\u53ef\u4ee5\u5c06Kendra\u641c\u7d22\u6846\u62d6\u653e\u5230\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u7ad9\u4e2d\uff0c\u5b83\u5177\u6709\u7c7b\u4f3c\u4e8e\u60a8\u5728\u8fd9\u6837\u7684\u5de5\u5177\u4e2d\u6240\u671f\u671b\u7684\u63d0\u524d\u952e\u5165\u7684\u529f\u80fd\u3002\n\u4f01\u4e1a\u641c\u7d22\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\uff0c\u4f46\u6216\u8bb8\u901a\u8fc7\u8ba9AI\u548c\u673a\u5668\u5b66\u4e60\u6765\u627f\u62c5\uff0c\u6211\u4eec\u6700\u7ec8\u53ef\u4ee5\u4e00\u52b3\u6c38\u9038\u5730\u89e3\u51b3\u5b83\u3002", "note_en": "While Google has the universe of the World Wide Web to work with, enterprises have a much narrower set of responses. It would be easy to think that should make it easier to find the ideal response, but the fact is that it\u2019s the opposite. The more data you have, the more likely you\u2019ll find the correct document.\n Amazon   is trying to change the enterprise search game by putting it into a more modern machine learning-driven context to use today\u2019s technology to help you find that perfect response just as you typically do on the web.\n  Today the company announced the general availability of Amazon Kendra, its cloud enterprise search product that the company  announced last year at AWS re:Invent. It uses natural language processing to allow the user to simply ask a question, then searches across the repositories connected to the search engine to find a precise answer.\n \u201cAmazon Kendra reinvents enterprise search by allowing end-users to search across multiple silos of data using real questions (not just keywords) and leverages machine learning models under the hood to understand the content of documents and the relationships between them to deliver the precise answers they seek (instead of a random list of links),\u201d the company described the new service in a statement.\n AWS has tuned the search engine for specific industries including IT, healthcare and insurance. It promises energy, industrial, financial services, legal, media and entertainment, travel and hospitality, human resources, news, telecommunications, mining, food and beverage and automotive will be coming later this year.\n This means any company in one of those industries should have a head start when it comes to searching because the system will understand the language specific to those verticals. You can drop your Kendra search box into an application or a website, and it has features like type ahead you would expect in a tool like this.\n Enterprise search has been around for a long time, but perhaps by bringing AI and machine learning to bear on it, we can finally solve it once and for all.", "posttime": "2020-05-12 15:03:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,amazon,\u4f01\u4e1a,kendra,\u641c\u7d22", "title": "Amazon Kendra\u662f\u4e00\u6b3e\u9762\u5411\u4f01\u4e1a\u7684\u4eba\u5de5\u667a\u80fd\u641c\u7d22\u670d\u52a1\uff0c\u73b0\u5df2\u516c\u5f00\u63d0\u4f9b", "title_en": "Amazon Kendra, an AI powered search service for enterprises, is openly available", "transed": 1, "url": "https://techcrunch.com/2020/05/11/amazon-releases-kendra-to-solve-enterprise-search-with-ai-and-machine-learning/", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "amazon", "\u4f01\u4e1a", "kendra", "\u641c\u7d22"]}, {"category": "", "categoryclass": "", "imagename": "daa1279051c5c47a3e6a496361f86f9e.jpg", "infoid": 1001774, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "LIDL\u7684\u6bcd\u516c\u53f8\u65bd\u74e6\u8328\u96c6\u56e2(Schwarz Group)\u6b63\u5728\u4e0e\u4e9a\u9a6c\u900a\u5c55\u5f00\u7ade\u4e89\uff0c\u63a8\u51fa\u4e86\u81ea\u5df1\u7684\u4e91\u8ba1\u7b97\u670d\u52a1\uff0c\u9762\u5411\u7b2c\u4e09\u65b9\u96f6\u552e\u5546\u3002\n\u636eLebensmittel Zeitun\u62a5\u9053\uff0c\u540c\u65f6\u62e5\u6709Lidl\u548cKaufland\u7684\u65bd\u74e6\u8328\u96c6\u56e2(Schwarz Group)\u5728\u6700\u8fd1\u6536\u8d2d\u4e86\u8f6f\u4ef6\u4e13\u4e1a\u516c\u53f8Camao IDC\u540e\uff0c\u5c06\u63a8\u51fa\u81ea\u5df1\u7684\u7ade\u4e89\u5bf9\u624b\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1(Amazon Web Services\uff0cAWS)\u3002\n\u6b64\u6b21\u6536\u8d2d\u4e8e5\u67081\u65e5\u5b8c\u6210\uff0c\u5c0670\u540d\u4e91\u4e13\u5bb6\u7eb3\u5165\u66f4\u5e7f\u6cdb\u7684\u96c6\u56e2\uff0c\u4ee3\u8868\u201c\u4e00\u4e2a\u91cd\u8981\u6570\u5b57\u5316\u9886\u57df\u7684\u5173\u952e\u8d44\u6e90\u201d\u3002\n\u5176\u6218\u7565\u548c\u4e1a\u52a1\u7ba1\u7406\u4e3b\u7ba1\u65af\u7279\u51e1\u00b7\u8d6b\u7f57\u5fb7(Stefan Herold)\u5c06\u4e8e3\u6708\u4efd\u4e0a\u4efb\uff0c\u4ed6\u5c06\u8d1f\u8d23\u65b0\u7684\u4e91\u670d\u52a1\uff0c\u636e\u6089\uff0c\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u5371\u673a\uff0c\u8fd9\u9879\u670d\u52a1\u5df2\u7ecf\u52a0\u901f\u3002\n\u867d\u7136\u65bd\u74e6\u8328IT\u6253\u7b97\u5229\u7528\u6b27\u6d32\u589e\u5f3a\u7684\u6570\u636e\u4fdd\u62a4\u6cd5\u4f5c\u4e3a\u4e9a\u9a6c\u900a\u4e3b\u5bfc\u670d\u52a1\u7684\u5173\u952e\u5dee\u5f02\u5316\u56e0\u7d20\uff0c\u4f46\u8bb8\u591a\u4eba\u8868\u793a\u62c5\u5fc3\uff0cAWS\u73b0\u91d1\u50a8\u5907\u548c\u4f4e\u4ef7\u53ef\u80fd\u662f\u786e\u4fdd\u5ba2\u6237\u5b89\u5168\u7684\u4e3b\u8981\u969c\u788d\u3002\n\u4eca\u5e741\u6708\uff0c\u6709\u62a5\u9053\u79f0\uff0cLIDL\u53ef\u80fd\u4f1a\u5728\u4eca\u5e74\u5e74\u4e2d\u4e4b\u524d\u5728\u82f1\u56fd\u63a8\u51fa\u5728\u7ebf\u9001\u8d27\u670d\u52a1\u3002\n10\u6708\u4efd\uff0cLIDL\u6b63\u5728\u4e3a\u201c\u4ee4\u4eba\u5174\u594b\u7684\u65b0\u7535\u5b50\u5546\u52a1\u9879\u76ee\u201d\u62db\u8058\u6570\u5b57\u7ecf\u7406\uff0c\u800c\u5176\u82f1\u56fd\u6570\u5b57\u603b\u76d1\u4e9a\u5386\u514b\u65af\u00b7\u9ed8\u91cc(Alex Murray)\u57282018\u5e743\u6708\u7684\u4e00\u6b21\u884c\u4e1a\u4f1a\u8bae\u4e0a\u6697\u793a\u4e86\u5728\u7ebf\u8ba1\u5212\u3002\n\u540c\u5e74\uff0cLidl\u63a8\u51fa\u4e86Lidl Digital\u7269\u6d41\u82f1\u56fd\u6709\u9650\u516c\u53f8\uff0c\u8fdb\u4e00\u6b65\u52a0\u5267\u4e86\u4eba\u4eec\u5bf9\u82f1\u56fd\u53ef\u80fd\u5373\u5c06\u63a8\u51fa\u7684\u731c\u6d4b\u3002", "note_en": "Lidl\u2019s parent company Schwarz Group is taking on Amazon by launching its own cloud computing service for third party retailers.\n Schwarz Group, which owns both Lidl and Kaufland, is launching its own rival to Amazon Web Services (AWS) following the recent acquisition of software specialist Camao IDC, according to  Lebensmittel Zeitun.\n The acquisition, which completed on May 1, brings 70 cloud specialists into the wider group representing key \u201cresources in an important area of digitalisation\u201d.\n Its head of strategy and business management Stefan Herold, who took on the role in March, will head up the new cloud service, which is understood to have been accelerated due to the coronavirus crisis.\n  While Schwarz IT intends to use Europe\u2019s enhanced data protection laws as a key differentiator to Amazon\u2019s dominant service, many have expressed concerns that AWS cash reserves and low prices could be major obstacles in securing clients.\n In January, reports emerged that Lidl could launch an online delivery service here in the UK by the middle of the year.\n In October that Lidl was advertising for digital managers for \u201cexciting new ecommerce projects\u201d, while its UK digital director Alex Murray alluded to online plans at an industry conference in March 2018.\n That same year Lidl launched Lidl Digital Logistics Great Britain Ltd, adding further weight to speculation a UK launch could be close by.", "posttime": "2020-05-12 14:49:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63a8\u51fa,launch,lidl", "title": "LIDL\u5c06\u63a8\u51faAWS\u7684\u7ade\u4e89\u5bf9\u624b", "title_en": "Lidl to Launch Rival to AWS", "transed": 1, "url": "https://www.chargedretail.co.uk/2020/05/11/lidl-owner-launching-its-own-rival-to-amazon-web-services/", "via": "", "real_tags": ["\u63a8\u51fa", "launch", "lidl"]}, {"category": "", "categoryclass": "", "imagename": "971d69a3066b3dadcfb3e27c558a3981.jpg", "infoid": 1001773, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u5f00\u653e\u5f0f\u8bfe\u7a0b\u8f6f\u4ef6\u662f\u4e00\u4e2a\u514d\u8d39\u5f00\u653e\u7684\u51fa\u7248\u7269\uff0c\u5185\u5bb9\u6765\u81ea\u6570\u5343\u95e8\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u8bfe\u7a0b\uff0c\u6db5\u76d6\u6574\u4e2a\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u8bfe\u7a0b\u3002\n\u6ca1\u6709\u6ce8\u518c\u6216\u6ce8\u518c\u3002\u81ea\u7531\u6d4f\u89c8\u548c\u4f7f\u7528\u5f00\u653e\u5f0f\u8bfe\u7a0b\u7684\u6750\u6599\uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u81ea\u5df1\u7684\u8282\u594f\u3002\u6ca1\u6709\u6ce8\u518c\uff0c\u4e5f\u6ca1\u6709\u5f00\u59cb\u6216\u7ed3\u675f\u65e5\u671f\u3002\n\u77e5\u8bc6\u662f\u4f60\u7684\u56de\u62a5\u3002\u7528\u5f00\u653e\u5f0f\u8bfe\u7a0b\u6307\u5bfc\u81ea\u5df1\u7684\u7ec8\u8eab\u5b66\u4e60\uff0c\u6216\u8005\u6559\u7ed9\u522b\u4eba\u3002\u6211\u4eec\u4e0d\u63d0\u4f9b\u4f7f\u7528\u5f00\u653e\u5f0f\u8bfe\u7a0b\u7684\u5b66\u5206\u6216\u8ba4\u8bc1\u3002\n\u4e3a\u5206\u4eab\u800c\u751f\u3002\u4e0b\u8f7d\u6587\u4ef6\u4ee5\u5907\u4ee5\u540e\u4f7f\u7528\u3002\u53d1\u9001\u7ed9\u670b\u53cb\u548c\u540c\u4e8b\u3002\u4fee\u6539\u3001\u6df7\u5408\u548c\u91cd\u7528(\u53ea\u9700\u8bb0\u4f4f\u5f15\u7528OCW\u4f5c\u4e3a\u6e90\u4ee3\u7801)\u3002\n\u8fd9\u516d\u4e2a\u7b80\u77ed\u7684\u89c6\u9891\u5f55\u5236\u4e8e2020\u5e74\uff0c\u5305\u542b\u65af\u7279\u6717\u6559\u6388\u5173\u4e8e\u7ebf\u6027\u4ee3\u6570\u6559\u4e0e\u5b66\u7684\u4e3b\u9898\u63a8\u8350\u987a\u5e8f\u7684\u60f3\u6cd5\u548c\u5efa\u8bae\u3002\u7b2c\u4e00\u4e2a\u9898\u76ee\u53eb\u201c\u7ebf\u6027\u4ee3\u6570\u7684\u65b0\u5165\u95e8\u65b9\u6cd5\u201d\u3002\u5173\u952e\u70b9\u662f\u4ece\u77e9\u9635A\u7684\u5217\u548c\u7ec4\u5408\u8fd9\u4e9b\u5217\u7684\u4e58\u6cd5Ax\u5f00\u59cb\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u77e9\u9635\u7684\u5217\u7a7a\u95f4\u548c\u72ec\u7acb\u5217\u7684\u6982\u5ff5\uff0c\u4ee5\u53caA=CR\u7684\u56e0\u5f0f\u5206\u89e3\uff0c\u5b83\u544a\u8bc9\u4e86\u6211\u4eec\u5f88\u591a\u5173\u4e8eA\u7684\u4fe1\u606f\u3002\u6709\u4e86\u597d\u7684\u6570\u5b57\uff0c\u6bcf\u4e2a\u5b66\u751f\u90fd\u80fd\u770b\u5230\u76f8\u5173\u7684\u5217\u3002\n\u5269\u4e0b\u7684\u89c6\u9891\u975e\u5e38\u7b80\u8981\u5730\u6982\u8ff0\u4e86\u6574\u4e2a\u8bfe\u7a0b\uff1a\u7ebf\u6027\u4ee3\u6570\u5927\u56fe\u666f\uff1b\u6b63\u4ea4\u5411\u91cf\uff1b\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\uff1b\u4ee5\u53ca\u5947\u5f02\u503c\u548c\u5947\u5f02\u5411\u91cf\u3002\u5947\u5f02\u503c\u53d8\u5f97\u5982\u6b64\u91cd\u8981\uff0c\u5b83\u4eec\u76f4\u63a5\u6765\u81eaA&A\u7684\u7279\u5f81\u503c\u3002\n\u4f60\u53ef\u4ee5\u5728\u65af\u7279\u6717\u6559\u63882019\u5e74\u8bfe\u7a0b18.065\u6570\u636e\u5206\u6790\u3001\u4fe1\u53f7\u5904\u7406\u548c\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u77e9\u9635\u65b9\u6cd5\u7684\u7b2c\u4e00\u8282\u89c6\u9891\u8bb2\u5ea7\u4e2d\u770b\u5230\u8fd9\u4e00\u65b0\u60f3\u6cd5\u7684\u53d1\u5c55\u3002", "note_en": "MIT OpenCourseWare is a free &amp; open publication of material from thousands of MIT courses, covering the entire MIT curriculum.\n  No enrollment or registration. Freely browse and use OCW materials at your own pace. There&#39;s no signup, and no start or end dates.\n  Knowledge is your reward. Use OCW to guide your own life-long learning, or to teach others. We don&#39;t offer credit or certification for using OCW.\n  Made for sharing. Download files for later. Send to friends and colleagues. Modify, remix, and reuse (just remember to cite OCW as the source.)\n   These six brief videos, recorded in 2020, contain ideas and suggestions from Professor Strang about the recommended order of topics in teaching and learning linear algebra. The first topic is called  A New Way to Start Linear Algebra. The key point is to start right in with the columns of a matrix  A and the multiplication  Ax that combines those columns.\n That leads to  The Column Space of a Matrix and the idea of independent columns and the factorization  A = CR that tells so much about  A. With good numbers, every student can see dependent columns.\n The remaining videos outline very briefly the full course:  The Big Picture of Linear Algebra;  Orthogonal Vectors;  Eigenvalues &amp; Eigenvectors; and  Singular Values &amp; Singular Vectors. Singular values have become so important and they come directly from the eigenvalues of  A&#39;A.\n You can see this new idea developing in the  first video lecture of Professor Strang\u2019s 2019 course   18.065 Matrix Methods in Data Analysis, Signal Processing, and Machine Learning.", "posttime": "2020-05-12 14:21:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u7ebf\u6027\u4ee3\u6570,linear,\u8bfe\u7a0b", "title": "\u5409\u5c14\u4f2f\u7279\u00b7\u65af\u7279\u6717\u7684\u201c2020\u5e74\u7ebf\u6027\u4ee3\u6570\u8fdc\u666f\u201d", "title_en": "Gilbert Strang's a 2020 Vision of Linear Algebra", "transed": 1, "url": "https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/index.htm", "via": "", "real_tags": ["2020", "\u7ebf\u6027\u4ee3\u6570", "linear", "\u8bfe\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "3729759b5ef2fbfbe98b7b23e20598f8.jpeg", "infoid": 1001772, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5bf9\u4eba\u5de5\u667a\u80fd\u8d8b\u52bf\u611f\u5174\u8da3\uff0c\u8fd9\u4e9b\u8d8b\u52bf\u5851\u9020\u4e86\u4eba\u4e0e\u6280\u672f\u7684\u4ea4\u53c9\u548c\u4e92\u52a8\u65b9\u5f0f\u3002\n\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b(ASR)\u662f\u5c06\u53e3\u8bed\u8f6c\u6362\u4e3a\u6587\u672c\u3002\u5982\u679c\u4f60\u66fe\u7ecf\u4f7f\u7528\u8fc7\u50cfSiri\u6216Alexa\u8fd9\u6837\u7684\u865a\u62df\u52a9\u624b\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u6709\u8fc7\u4f7f\u7528\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u7684\u7ecf\u9a8c\u3002\u8fd9\u9879\u6280\u672f\u6b63\u5728\u77ed\u4fe1\u5e94\u7528\u3001\u641c\u7d22\u5f15\u64ce\u3001\u8f66\u8f7d\u7cfb\u7edf\u548c\u5bb6\u5ead\u81ea\u52a8\u5316\u4e2d\u5b9e\u65bd\u3002\n\u5c3d\u7ba1\u6240\u6709\u8fd9\u4e9b\u7cfb\u7edf\u4f9d\u8d56\u7684\u6280\u672f\u6d41\u7a0b\u7565\u6709\u4e0d\u540c\uff0c\u4f46\u5b83\u4eec\u7684\u7b2c\u4e00\u6b65\u90fd\u662f\u76f8\u540c\u7684\uff1a\u6355\u83b7\u8bed\u97f3\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u673a\u5668\u53ef\u8bfb\u7684\u6587\u672c\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u7b80\u8981\u4ecb\u7ecd\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u3002\u6211\u4eec\u5c06\u7814\u7a76\u8bed\u97f3\u5230\u6587\u672c\u7684\u8f6c\u6362\u8fc7\u7a0b\uff0c\u5982\u4f55\u6784\u5efaASR\u7cfb\u7edf\uff0c\u5e76\u89e6\u53ca\u672a\u6765ASR\u6280\u672f\u7684\u524d\u666f\u3002\n\u4f46\u662f\u8981\u4ece\u8f93\u5165\u5230\u8f93\u51fa\uff0c\u97f3\u9891\u6570\u636e\u9700\u8981\u662f\u673a\u5668\u53ef\u8bfb\u7684\u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u58f0\u5b66\u6a21\u578b\u548c\u8bed\u8a00\u6a21\u578b\u53d1\u9001\u5b83\u3002\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u7684\u5de5\u4f5c\u65b9\u5f0f\u5982\u4e0b\uff1a\n\u58f0\u5b66\u6a21\u578b\u786e\u5b9a\u4e00\u79cd\u8bed\u8a00\u4e2d\u7684\u97f3\u9891\u4fe1\u53f7\u548c\u8bed\u97f3\u5355\u5143\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u800c\u8bed\u8a00\u6a21\u578b\u5c06\u58f0\u97f3\u4e0e\u5355\u8bcd\u548c\u5355\u8bcd\u5e8f\u5217\u76f8\u5339\u914d\u3002\n\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u5141\u8bb8ASR\u7cfb\u7edf\u5bf9\u97f3\u9891\u8f93\u5165\u8fdb\u884c\u6982\u7387\u68c0\u67e5\uff0c\u4ee5\u9884\u6d4b\u97f3\u9891\u8f93\u5165\u4e2d\u6709\u54ea\u4e9b\u5355\u8bcd\u548c\u53e5\u5b50\u3002\u7136\u540e\uff0c\u7cfb\u7edf\u4ece\u8fd9\u4e9b\u9884\u6d4b\u4e2d\u9009\u62e9\u7f6e\u4fe1\u5ea6\u6700\u9ad8\u7684\u9884\u6d4b\u3002*\u3002\n*\u6709\u65f6\u8bed\u8a00\u6a21\u578b\u53ef\u4ee5\u4f18\u5148\u8003\u8651\u7531\u4e8e\u5176\u4ed6\u56e0\u7d20\u800c\u88ab\u8ba4\u4e3a\u66f4\u6709\u53ef\u80fd\u7684\u67d0\u4e9b\u9884\u6d4b\n\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u901a\u8fc7ASR\u7cfb\u7edf\u8fd0\u884ca\u77ed\u8bed\uff0c\u5b83\u5c06\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5982\u679c\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u662f\u8bed\u97f3\u7528\u6237\u754c\u9762\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u4e48ASR\u6a21\u578b\u5c06\u4e0d\u662f\u552f\u4e00\u8d77\u4f5c\u7528\u7684\u673a\u5668\u5b66\u4e60\u6a21\u578b\u3002\u8bb8\u591a\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u4e0e\u81ea\u7136\u8bed\u8a00\u5904\u7406(NLP)\u548c\u6587\u672c\u5230\u8bed\u97f3(TTS)\u7cfb\u7edf\u914d\u5bf9\u4ee5\u6267\u884c\u5176\u7ed9\u5b9a\u7684\u89d2\u8272\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6df1\u5165\u7814\u7a76\u8bed\u97f3\u7528\u6237\u754c\u9762\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u8bdd\u9898\u3002\u8981\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u8fd9\u7bc7\u6587\u7ae0\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86ASR\u7cfb\u7edf\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4f46\u662f\u60a8\u9700\u8981\u505a\u4e9b\u4ec0\u4e48\u6765\u6784\u5efa\u4e00\u4e2aASR\u7cfb\u7edf\u5462\uff1f\n\u4e00\u4e2a\u597d\u7684ASR\u7cfb\u7edf\u5e94\u8be5\u662f\u7075\u6d3b\u7684\u3002\u5b83\u9700\u8981\u7406\u89e3\u5404\u79cd\u97f3\u9891\u8f93\u5165(\u8bed\u97f3\u6837\u672c)\uff0c\u5e76\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u521b\u5efa\u51c6\u786e\u7684\u6587\u672c\u8f93\u51fa\uff0c\u4ee5\u4fbf\u505a\u51fa\u76f8\u5e94\u7684\u53cd\u5e94\u3002\n\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0cASR\u7cfb\u7edf\u9700\u8981\u6807\u8bb0\u8bed\u97f3\u6837\u672c\u548c\u8f6c\u5f55\u7684\u5f62\u5f0f\u7684\u6570\u636e\u3002\u8fd9\u6bd4\u8fd9\u8981\u590d\u6742\u4e00\u4e9b(\u4f8b\u5982\uff0c\u6570\u636e\u6807\u8bb0\u8fc7\u7a0b\u975e\u5e38\u91cd\u8981\uff0c\u4f46\u7ecf\u5e38\u88ab\u5ffd\u89c6)\uff0c\u4f46\u51fa\u4e8e\u672c\u6587\u7684\u76ee\u7684\uff0c\u8ba9\u6211\u4eec\u8ba9\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\u3002\nASR\u7cfb\u7edf\u9700\u8981\u5927\u91cf\u7684\u97f3\u9891\u6570\u636e\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u8bf4\u8bdd\u5f88\u590d\u6742\u3002\u8bf4\u540c\u4e00\u4ef6\u4e8b\u6709\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u53e5\u5b50\u7684\u610f\u601d\u4f1a\u968f\u7740\u5355\u8bcd\u7684\u4f4d\u7f6e\u548c\u5f3a\u8c03\u800c\u6539\u53d8\u3002\u8fd8\u8981\u8003\u8651\u5230\u4e16\u754c\u4e0a\u5145\u6ee1\u4e86\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u6839\u636e\u4f4d\u7f6e\u548c\u53e3\u97f3\u7b49\u56e0\u7d20\uff0c\u53d1\u97f3\u548c\u9009\u8bcd\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u60a8\u4e3aASR\u7cfb\u7edf\u63d0\u4f9b\u7684\u8bed\u97f3\u6837\u672c\u8d8a\u591a\uff0c\u5b83\u5728\u8bc6\u522b\u548c\u5206\u7c7b\u65b0\u8bed\u97f3\u8f93\u5165\u65b9\u9762\u7684\u8868\u73b0\u5c31\u8d8a\u597d\u3002\u4ece\u5e7f\u6cdb\u7684\u58f0\u97f3\u548c\u73af\u5883\u4e2d\u83b7\u5f97\u7684\u6837\u672c\u8d8a\u591a\uff0c\u7cfb\u7edf\u5728\u8bc6\u522b\u8fd9\u4e9b\u73af\u5883\u4e2d\u7684\u58f0\u97f3\u65f6\u5c31\u8d8a\u597d\u3002\u901a\u8fc7\u4e13\u95e8\u7684\u5fae\u8c03\u548c\u7ef4\u62a4\uff0c\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u5c06\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u5f97\u5230\u6539\u8fdb\u3002\n\u6240\u4ee5\u5728\u6700\u57fa\u672c\u7684\u5c42\u9762\u4e0a\uff0c\u6570\u636e\u8d8a\u591a\u8d8a\u597d\u3002\u786e\u5b9e\uff0c\u76ee\u524d\u6b63\u5728\u8fdb\u884c\u4f18\u5316\u8f83\u5c0f\u6570\u636e\u96c6\u7684\u7814\u7a76\uff0c\u4f46\u76ee\u524d\u5927\u591a\u6570\u6a21\u578b\u4ecd\u9700\u8981\u5927\u91cf\u6570\u636e\u624d\u80fd\u5f88\u597d\u5730\u6267\u884c\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u591a\u4e8f\u4e86\u6570\u636e\u96c6\u5e93\u548c\u4e13\u7528\u7684\u6570\u636e\u6536\u96c6\u670d\u52a1\uff0c\u97f3\u9891\u6570\u636e\u6536\u96c6\u53d8\u5f97\u8d8a\u6765\u8d8a\u7b80\u5355\u3002\u8fd9\u53cd\u8fc7\u6765\u53c8\u52a0\u5feb\u4e86\u6280\u672f\u53d1\u5c55\u7684\u901f\u5ea6\uff0c\u6240\u4ee5\u4e3a\u4e86\u5b8c\u6210\u8fd9\u4ef6\u4e8b\uff0c\u8ba9\u6211\u4eec\u7b80\u8981\u5730\u770b\u770b\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u5728\u672a\u6765\u53ef\u4ee5\u53d1\u6325\u4ec0\u4e48\u4f5c\u7528\u3002\nASR\u6280\u672f\u5df2\u7ecf\u5c06\u81ea\u5df1\u5d4c\u5165\u5230\u6211\u4eec\u7684\u793e\u4f1a\u4e2d\u3002\u865a\u62df\u52a9\u7406\u3001\u8f66\u8f7d\u7cfb\u7edf\u548c\u5bb6\u5ead\u81ea\u52a8\u5316\u90fd\u5728\u4e3a\u65e5\u5e38\u751f\u6d3b\u521b\u9020\u4fbf\u5229\u3002\u4ed6\u4eec\u7684\u80fd\u529b\u8303\u56f4\u5f88\u53ef\u80fd\u4e5f\u4f1a\u6269\u5927\uff1b\u968f\u7740\u66f4\u591a\u7684\u4eba\u91c7\u7528\u8fd9\u4e9b\u670d\u52a1\uff0c\u8fd9\u9879\u6280\u672f\u5c06\u8fdb\u4e00\u6b65\u53d1\u5c55\u3002\n\u9664\u4e86\u4e0a\u8ff0\u793a\u4f8b\u4e4b\u5916\uff0c\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u8fd8\u5728\u5404\u79cd\u6709\u8da3\u7684\u9886\u57df\u548c\u884c\u4e1a\u53d1\u6325\u4f5c\u7528\uff1a\n\u4ea4\u6d41\uff1a\u968f\u7740\u5168\u7403\u624b\u673a\u7684\u666e\u53ca\uff0cASR\u7cfb\u7edf\u5373\u4f7f\u5bf9\u8bfb\u5199\u80fd\u529b\u8f83\u4f4e\u7684\u793e\u533a\u4e5f\u80fd\u63d0\u4f9b\u6d88\u606f\u4f20\u9012\u3001\u5728\u7ebf\u641c\u7d22\u548c\u57fa\u4e8e\u6587\u672c\u7684\u670d\u52a1\u3002\n\u63d0\u9ad8\u53ef\u8bbf\u95ee\u6027\uff1a\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u8fd8\u53ef\u4ee5\u901a\u8fc7\u514d\u63d0\u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u4e3a\u7535\u89c6\u3001\u7535\u5f71\u548c\u5546\u52a1\u4f1a\u8bae\u63d0\u4f9b\u81ea\u52a8\u5b57\u5e55\u6765\u5e2e\u52a9\u6b8b\u75be\u6216\u53d7\u4f24\u4eba\u58eb\u3002\n\u519b\u4e8b\u6280\u672f\uff1a\u5728\u7f8e\u56fd\u3001\u6cd5\u56fd\u548c\u82f1\u56fd\uff0c\u519b\u4e8b\u9879\u76ee\u4e00\u76f4\u5728\u6d4b\u8bd5\u548c\u8bc4\u4f30\u6218\u6597\u673a\u7684ASR\u7cfb\u7edf\u3002\u8fd9\u5305\u62ec\u8bbe\u7f6e\u65e0\u7ebf\u7535\u9891\u7387\u3001\u6307\u6325\u81ea\u52a8\u9a7e\u9a76\u7cfb\u7edf\u548c\u63a7\u5236\u98de\u884c\u663e\u793a\u7b49\u4efb\u52a1\u3002\n\u8fd9\u4e9b\u53ea\u662fASR\u5982\u4f55\u652f\u6301\u548c\u6539\u5584\u751f\u6d3b\u7684\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5f88\u53ef\u80fd\u5728\u65b0\u7684\u6539\u7f16\u7684\u540c\u65f6\uff0c\u672a\u6765\u5341\u5e74\u8fd8\u4f1a\u6709\u66f4\u591a\u7684\u6539\u8fdb\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u5f88\u597d\u5730\u4ecb\u7ecd\u4e86ASR\u7cfb\u7edf\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5982\u4f55\u6784\u5efa\u5b83\u4eec\uff0c\u4ee5\u53ca\u5bf9\u672a\u6765\u7684\u5c55\u671b\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u610f\u89c1\u6216\u60f3\u6cd5\uff0c\u8bf7\u968f\u65f6\u5728\u4e0b\u9762\u7559\u8a00\uff0c\u6211\u4f1a\u5c3d\u5feb\u627e\u5230\u5b83\u3002\n\u975e\u5e38\u611f\u8c22\u60a8\u7684\u9605\u8bfb\u3002\u6709\u5173\u4eba\u5de5\u667a\u80fd\u65b0\u95fb\u548c\u673a\u5668\u5b66\u4e60\u53d1\u5c55\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u5728Twitter\u4e0a\u5173\u6ce8\u6211\u3002", "note_en": "I&#39;m interested in the AI trends that shape how people and technology intersect and interact.\n Automatic speech recognition (ASR) is the transformation of spoken language into text. If you\u2019ve ever used a virtual assistant like Siri or Alexa, you\u2019ve experienced using an automatic speech recognition system. The technology is being implemented in messaging apps, search engines, in-car systems, and home automation.\n And though all these systems rely on slightly different technical processes, the first step for all of them is the same: capturing speech data and transforming it into machine-readable text.\n  In this article, I\u2019ll give a brief introduction to automatic speech recognition. We&#39;ll look at the speech-to-text transformation process, how to build an  ASR system, and touch on where to expect ASR tech in the future.\n     But to get from the input to the output, the audio data needs to be made machine-readable. This means sending it through an  acoustic model and a  language model. The two processes work like this:\n An acoustic model determines the relationship between audio signals and phonetic units in a language, while a language model matches sounds to words and word sequences.\n These two systems allow ASR systems to run probability checks on audio input to develop predictions of what words and sentences are in it. From these predictions, the systems then selects the prediction with the highest confidence rating.*\n *Sometimes the language model can give priority to certain predictions that are deemed more likely due to other factors\n So if we run the a phrase through an ASR system, it will do the following:\n  It&#39;s worth mentioning here that if an automatic speech recognition system is part of a voice user interface, the ASR model won\u2019t be the only machine learning model at work. Many automatic speech recognition systems are paired with natural language processing (NLP) and Text-to-speech (TTS) systems to perform their given roles.\n That said, digging into voice user interfaces is a whole topic of its own. To learn more about it, check out  this article.\n So now we know how ASR systems work, but what do you need to build one?\n   A good ASR system is expected to be flexible. It needs to understand a wide variety of audio input (speech samples) and create accurate text output from that data so it can react accordingly.\n To achieve this, ASR systems require data in the form of labeled speech samples and transcriptions. It&#39;s a little more complicated than that (the  data labeling process is hugely important and often overlooked, for example), but for the purposes of this article let&#39;s keep things simple.\n ASR systems require huge amounts of  audio data. Why? Because speech is complicated. There are lots of different ways to say the same thing, and the meaning of a sentence can change with word placement and emphasis. Also consider that the world is filled with different languages, and within these languages pronunciation and word choice can differ depending on factors such as location and accent.\n  With this in mind, the more speech samples you feed an ASR system, the better it gets at identifying and classifying new speech input. The more samples you have from a broad range of voices and environments, the better the system gets at identifying voices within those environments. With dedicated fine-tuning and maintenance, automatic speech recognition systems will improve as they are used.\n So at the most basic level, the more data, the better. It&#39;s true that there is ongoing research into optimizing smaller datasets, but at present most models still require large amounts of data to perform well.\n Fortunately, audio data collection is getting simpler thanks to dataset repositories and dedicated data collection services. This in turn is increasing the rate of technological development, so to finish things off, let&#39;s take a brief look at where automatic speech recognition can play a role in the future.\n  ASR Technology is already embedding itself into our society. Virtual assistants, in-car systems, and home automation are all creating convenience in everyday life. It&#39;s likely that the scope of their abilities will expand too; as more people adopt these services the technology will develop further.\n Outside of the above examples, automatic speech recognition is playing a role in a variety of interesting fields and industries:\n Communication: With the adoption of cell phones worldwide, ASR systems can make messaging, online searches, and  text-based services available even to communities with low levels of reading and writing literacy.\n Improving Accessibility: Automatic speech recognition systems can also help  people with disabilities or injuries by providing hands-free access to applications, and auto-captioning for television, movies, and business meetings.\n Military Technology: In the US, France, and the UK, military programs have been testing and evaluating ASR systems for  fighter jets. This includes tasks such as setting radio frequencies, commanding autopilot systems, and controlling flight displays.\n These are just a few examples of how ASR can support and improve lives, and it&#39;s likely that the next decade will see even more improvements alongside novel adaptations.\n In any case, I hope this article has been a good introduction to how ASR systems work, how to build them, and what to look forward to in the future. If you have any comments or thoughts, feel free to leave a comment below and I\u2019ll get to it as soon as I can.\n  Thanks so much for reading. For more about AI news and machine learning developments, follow me   on twitter .", "posttime": "2020-05-12 14:20:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u81ea\u52a8,automatic,\u7cfb\u7edf", "title": "WTF\u662f\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u5417\uff1f", "title_en": "WTF Is Automatic Speech Recognition?", "transed": 1, "url": "https://hackernoon.com/wtf-is-automatic-speech-recognition-sd593bhv", "via": "", "real_tags": ["\u81ea\u52a8", "automatic", "\u7cfb\u7edf"]}, {"category": "", "categoryclass": "", "imagename": "e7117e2db671fcdebcea09e106639103.png", "infoid": 1001771, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SWIFT 5.3\u662f\u4e00\u4e2a\u65e8\u5728\u5305\u542b\u91cd\u5927\u8d28\u91cf\u548c\u6027\u80fd\u589e\u5f3a\u529f\u80fd\u7684\u7248\u672c\u3002\u6b64\u5916\uff0c\u6b64\u7248\u672c\u8fd8\u5c06\u6269\u5927SWIFT\u53ef\u7528\u548c\u652f\u6301\u7684\u5e73\u53f0\u6570\u91cf\uff0c\u7279\u522b\u662f\u589e\u52a0\u4e86\u5bf9Windows\u548c\u5176\u4ed6Linux\u7248\u672c\u7684\u652f\u6301\u3002\nSWIFT 5.3\u7248\u672c\u5206\u652f\u7684\u53ef\u4e0b\u8f7d\u5feb\u7167\u5c06\u4f5c\u4e3a\u6301\u7eed\u96c6\u6210\u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\u5b9a\u671f\u53d1\u5e03\u3002\u7531\u4e8e\u652f\u6301\u53ef\u7528\uff0c\u5c06\u4e3a\u65b0\u652f\u6301\u7684\u5e73\u53f0\u6dfb\u52a0\u5feb\u7167\u4e0b\u8f7d\u3002\n\u4e00\u65e6SWIFT 5.3\u53d1\u5e03\uff0c\u9664\u4e86\u5feb\u7167\u4e4b\u5916\uff0c\u8fd8\u5c06\u53d1\u5e03\u6b63\u5f0f\u7684\u6700\u7ec8\u7248\u672c\u3002\n2020\u5e744\u670820\u65e5\uff0c\u5c06\u5728\u5feb\u901f\u5b58\u50a8\u5e93\u548c\u6700\u76f8\u5173\u7684\u9879\u76ee\u5b58\u50a8\u5e93\u4e2d\u524a\u51cfRelease/5.3\u5206\u652f\u3002\u8bf7\u6ce8\u610f\u65b0\u7684\u5206\u652f\u673a\u6784\u547d\u540d\u65b9\u6848\u3002\u5176\u4e2d\u5c06\u5305\u542b\u5c06\u5728SWIFT 5.3\u4e2d\u53d1\u5e03\u7684\u66f4\u6539\u3002\u5206\u652f\u88ab\u5207\u65ad\u540e\uff0c\u5982\u679c\u66f4\u6539\u6ee1\u8db3\u53d1\u5e03\u6807\u51c6\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7Pull\u8bf7\u6c42\u5c06\u66f4\u6539\u843d\u5730\u5230\u5206\u652f\u4e0a\u3002\n\u540c\u6837\u7684\u653f\u7b56\u5c06\u9002\u7528\u4e8e\u8fd9\u4e9b\u9879\u76ee\uff1a\u4e00\u65e6\u5206\u652f\u88ab\u5207\u65ad\uff0c\u5982\u679c\u66f4\u6539\u6ee1\u8db3\u53d1\u5e03\u6807\u51c6\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u62c9\u5165\u8bf7\u6c42\u5c06\u66f4\u6539\u843d\u5730\u5230\u5206\u652f\u4e0a\u3002\nSWIFT 5.3\u7684\u6240\u6709\u8bed\u8a00\u548cAPI\u66f4\u6539\u90fd\u5c06\u7ecf\u8fc7SWIFT\u6f14\u8fdb\u6d41\u7a0b\u3002\u6f14\u8fdb\u5efa\u8bae\u4e66\u7684\u76ee\u6807\u5e94\u8be5\u662f\u5728\u5206\u652f\u673a\u6784\u65e5\u671f\u4e4b\u524d\u5b8c\u6210\uff0c\u4ee5\u589e\u52a0\u5176\u5f71\u54cdSWIFT 5.3\u7248\u672c\u7684\u673a\u4f1a\u3002\u4f8b\u5916\u60c5\u51b5\u5c06\u5728\u4e2a\u6848\u7684\u57fa\u7840\u4e0a\u52a0\u4ee5\u8003\u8651\uff0c\u7279\u522b\u662f\u5982\u679c\u5b83\u4eec\u4e0e\u7248\u672c\u7684\u6838\u5fc3\u76ee\u6807\u4e00\u81f4\u7684\u8bdd\u3002\n\u5176\u4ed6\u66f4\u6539(\u4f8b\u5982\uff0c\u9519\u8bef\u4fee\u590d\u3001\u8bca\u65ad\u6539\u8fdb\u3001SourceKit\u754c\u9762\u6539\u8fdb)\u5c06\u6839\u636e\u5176\u98ce\u9669\u548c\u5f71\u54cd\u63a5\u53d7\u3002\n\u4f4e\u98ce\u9669\u7684\u6d4b\u8bd5\u8c03\u6574\u4e5f\u5c06\u5728\u53d1\u5e03\u5206\u652f\u540e\u671f\u63a5\u53d7\uff0c\u5982\u679c\u5b83\u6709\u52a9\u4e8e\u9a8c\u8bc1\u53d1\u5e03\u7684\u8bdd\u3002\n\u4f5c\u4e3aSWIFT 5.3\u7248\u672c\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u4e0b\u5b58\u50a8\u5e93\u5c06\u6709\u4e00\u4e2aTracksource/5.3\u7248\u672c\u5206\u652f\uff1a\n\u7248\u672c\u7684\u6574\u4f53\u7ba1\u7406\u5c06\u7531\u4ee5\u4e0b\u4e2a\u4eba\u76d1\u7763\uff0c\u4ed6\u4eec\u5c06\u5728\u7248\u672c\u6536\u655b\u65f6\u5ba3\u5e03SWIFT 5.3\u7248\u672c\u4f55\u65f6\u5f00\u59cb\u5b9e\u65bd\u66f4\u4e25\u683c\u7684\u66f4\u6539\u63a7\u5236\u3002\n\u5bf9\u4e8eSWIFT 5.3\u7248\u672c\uff0c\u6211\u4eec\u6b63\u5728\u4e3a\u6211\u4eec\u652f\u6301\u7684\u6bcf\u4e2a\u5e73\u53f0\u6dfb\u52a0\u7248\u672c\u7ba1\u7406\u5668\u3002\u4ed6\u4eec\u5c06\u76d1\u7763\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u95ee\u9898\u4ee5\u53ca\u8be5\u5e73\u53f0\u53d1\u5e03\u7684\u8d44\u683c\u3002\n\u8bf7\u968f\u65f6\u5728\u5f00\u53d1\u8bba\u575b\u4e0a\u53d1\u5e16\uff0c\u6216\u76f4\u63a5\u8054\u7cfbTed Kremenek\uff0c\u8be2\u95ee\u6709\u5173\u53d1\u5e03\u7ba1\u7406\u8fc7\u7a0b\u7684\u4efb\u4f55\u95ee\u9898\u3002\n\u4e3a\u4e86\u5728\u526a\u5207\u62c9\u53d6\u8bf7\u6c42\u540e\u8003\u8651\u5c06\u5176\u5305\u62ec\u5728Release\u5206\u652f(Release/5.3)\u4e2d\uff0c\u5b83\u5fc5\u987b\u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\u8bf4\u660e\uff1a\u5bf9\u6b63\u5728\u4fee\u590d\u7684\u95ee\u9898\u6216\u6b63\u5728\u8fdb\u884c\u7684\u589e\u5f3a\u7684\u63cf\u8ff0\u3002\u8fd9\u53ef\u80fd\u5f88\u7b80\u77ed\uff0c\u4f46\u5e94\u8be5\u5f88\u6e05\u695a\u3002\n\u8303\u56f4\uff1a\u5bf9\u53d8\u66f4\u7684\u5f71\u54cd/\u91cd\u8981\u6027\u7684\u8bc4\u4f30\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u53d8\u5316\u662f\u4e0d\u662f\u4e00\u4e2a\u7a81\u7834\u6027\u7684\u8bed\u8a00\u53d8\u5316\uff0c\u7b49\u7b49\u3002\n\u6d4b\u8bd5\uff1a\u5df2\u7ecf\u6216\u9700\u8981\u8fdb\u884c\u54ea\u4e9b\u5177\u4f53\u7684\u6d4b\u8bd5\u6765\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u6b64\u66f4\u6539\u7684\u4efb\u4f55\u5f71\u54cd\uff1f\n\u5ba1\u67e5\u8005\uff1a\u53d7\u5f71\u54cd\u7ec4\u4ef6\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u4ee3\u7801\u6240\u6709\u8005\u5e94\u8be5\u5ba1\u67e5\u66f4\u6539\u3002\u6280\u672f\u5ba1\u67e5\u53ef\u4ee5\u7531\u4ee3\u7801\u6240\u6709\u8005\u59d4\u6258\uff0c\u6216\u5728\u8ba4\u4e3a\u9002\u5f53\u6216\u6709\u7528\u7684\u60c5\u51b5\u4e0b\u8981\u6c42\u8fdb\u884c\u6280\u672f\u5ba1\u67e5\u3002\nRelease/5.3\u5206\u652f\u4e0a\u7684\u6240\u6709\u66f4\u6539\u90fd\u5fc5\u987b\u901a\u8fc7\u76f8\u5e94\u7684\u7248\u672c\u7ecf\u7406\u63a5\u53d7\u7684Pull\u8bf7\u6c42\u3002", "note_en": "Swift 5.3 is a release meant to include significant quality and performance enhancements. In addition, this release will expand the number of platforms where Swift is available and supported, notably adding support for Windows and additional Linux distributions.\n  Downloadable snapshots of the Swift 5.3 release branch will be postedregularly as part of  continuous integration testing. As support is available, snapshot downloads will be added for newly supported platforms.\n Once Swift 5.3 is released, the official final builds will also be posted in addition to the snapshots.\n  On  April 20, 2020 the  release/5.3 branch will be cut in the swift repository and most related project repositories. Please note the new branch naming scheme. This will contain the changes that will be released in Swift 5.3. After the branch is cut, changes can be landed on the branch via pull request if they meet the criteria for the release.\n   The same policies will apply to these projects: once the branch is cut, changes can be landed on the branch via pull request if they meet the criteria for the release.\n  All language and API changes for Swift 5.3 will go through the  SwiftEvolution process. Evolutionproposals should aim to be completed by the branch date in order toincrease their chances of impacting the Swift 5.3 release. Exceptionswill be considered on a case-by-case basis, particularly if they tiein with the core goal of the release.\n  Other changes (e.g., bug fixes, diagnostic improvements, SourceKit interfaceimprovements) will be accepted based on their risk and impact.\n  Low-risk test tweaks will also be accepted late into the release branch ifit aids in the qualification of the release.\n  The following repositories will have a  release/5.3 branch to tracksources as part of Swift 5.3 release:\n    The overall management of the release will be overseen by the followingindividuals, who will announce when stricter control of change goes intoeffect for the Swift 5.3 release as the release converges.\n For the Swift 5.3 release, we are adding release managers for each of our supported platforms. They will oversee platform specific issues as well as qualification of that platform for the release.\n    Please feel free to post on the  development forumor contact  Ted Kremenek directly concerning any questions about the release managementprocess.\n  In order for a pull request to be considered for inclusion in the releasebranch ( release/5.3) after it has been cut, it must include the followinginformation:\n Explanation: A description of the issue being fixed or enhancement beingmade. This can be brief, but it should be clear.\n  Scope: An assessment of the impact/importance of the change. Forexample, is the change a source-breaking language change, etc.\n      Testing: What specific testing has been done or needs to be done tofurther validate any impact of this change?\n  Reviewer: One or more  code ownersfor the impacted components should review the change. Technical review canbe delegated by a code owner or otherwise requested as deemed appropriate oruseful.\n All changes going on the  release/5.3 branch  must go through pull requests that areaccepted by the corresponding release manager.", "posttime": "2020-05-12 14:05:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,\u5b98\u65b9,official,\u7248\u672c", "title": "SWIFT 5.3\u5c06\u5e26\u6765\u5b98\u65b9Windows\u652f\u6301", "title_en": "Swift 5.3 will bring official Windows support", "transed": 1, "url": "https://swift.org/blog/5-3-release-process/?hn", "via": "", "real_tags": ["windows", "\u5b98\u65b9", "official", "\u7248\u672c"]}]