[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1005836, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Erlang\u662f\u4e00\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u6211\u4e0d\u80fd\u5728\u4e00\u7bc7\u7b80\u77ed\u7684\u6587\u7ae0\u4e2d\u516c\u6b63\u5730\u63cf\u8ff0\u5b83\u7684\u5185\u90e8\u5de5\u4f5c\u65b9\u5f0f\uff0c\u4f46\u6211\u60f3\u6df1\u5165\u4e86\u89e3\u7f16\u8bd1\u548c\u52a0\u8f7d\u6a21\u5757\u65f6\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u4e0e\u5927\u591a\u6570\u7f16\u8bd1\u5668\u4e00\u6837\uff0c\u7b2c\u4e00\u6b65\u662f\u5c06\u6587\u672c\u6e90\u4ee3\u7801\u8f6c\u6362\u4e3a\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4f46\u8fd9\u5e76\u4e0d\u91cd\u8981\u3002\u6709\u8da3\u7684\u662f\uff0c\u4ee3\u7801\u7ecf\u5386\u4e86\u4e09\u4e2a\u4e3b\u8981\u8868\u793a\u5f62\u5f0f\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u6bcf\u4e00\u4e2a\u8868\u793a\u5f62\u5f0f\u3002\nErlang\u7684\u968f\u610f\u4f5c\u7528\u57df\u89c4\u5219\u5728\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u968f\u5730\u5f15\u5165\u53d8\u91cf\uff0c\u4e0d\u9700\u8981\u5927\u5f20\u65d7\u9f13\uff0c\u800c\u4e14\u6ca1\u6709\u663e\u5f0f\u4f5c\u7528\u57df\u9020\u6210\u7684\u7f13\u6162\u7f29\u8fdb\u3002\u5728\u5e55\u540e\uff0c\u8fd9\u592a\u79bb\u5947\u4e86\uff0c\u6240\u4ee5\u8bed\u6cd5\u6811\u88ab\u8f6c\u6362\u4e3aCore Erlang\u3002\u6838\u5fc3Erlang\u770b\u8d77\u6765\u5f88\u50cfHaskell\u6216ML\uff0c\u5728&#34\uff1blet&#34\uff1b\u8bed\u53e5\u4e2d\u4ed4\u7ec6\u5f15\u7528\u4e86\u6240\u6709\u53d8\u91cf\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528shell\u4e2d\u7684\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u6a21\u5757\u7684Core Erlang\u8868\u793a\uff1a\n\u4e0b\u4e00\u4e2a\u91cd\u5927\u8f6c\u53d8\u662f\u4eceCore Erlang\u5230\u57fa\u4e8e\u5bc4\u5b58\u5668\u7684BEAM\u865a\u62df\u673a\u7684\u4ee3\u7801\u3002BEAM\u7684\u6587\u6863\u5f88\u5c11\uff0c\u4f46\u5b83\u5f88\u50cf\u4e3aProlog\u5f00\u53d1\u7684Warren Abstract Machine(\u4f46\u4e0d\u9700\u8981\u56de\u6eaf)\u3002\u5982\u679c\u60a8\u7f16\u5199\u7b80\u77ed\u7684\u6a21\u5757\u5e76\u7528\u4ee5\u4e0b\u65b9\u5f0f\u68c0\u67e5\u5b83\u4eec\uff0cBEAM\u5e76\u4e0d\u662f\u5f88\u96be\u5f04\u6e05\u695a\uff1a\n\u793a\u4f8b\u6a21\u5757\u7684\u53cd\u6c47\u7f16BEAM\u4ee3\u7801\u7f16\u5199\u4e3aexample.S.\u3002\u7406\u89e3BEAM\u7684\u5173\u952e\u5728\u4e8e\u6709\u4e24\u7ec4\u5bc4\u5b58\u5668\uff1a\u4e00\u7ec4\u7528\u4e8e\u4f20\u9012\u53c2\u6570(&#34\uff1bx&34\uff1b\u5bc4\u5b58\u5668)\uff0c\u53e6\u4e00\u7ec4\u7528\u4f5c\u51fd\u6570\u5185\u7684\u5c40\u90e8\u53d8\u91cf(&#34\uff1by&#34\uff1b\u5bc4\u5b58\u5668)\u3002\n\u865a\u62df\u6ce2\u675f\u4ee3\u7801\u662f\u7f16\u8bd1\u5668\u7684\u6700\u7ec8\u8f93\u51fa\uff0c\u4f46\u5b83\u4ecd\u7136\u4e0d\u662f\u7cfb\u7edf\u6267\u884c\u7684\u4ee3\u7801\u3002\u5982\u679c\u60a8\u67e5\u770bErlang\u8fd0\u884c\u65f6\u7684\u6e90\u4ee3\u7801\uff0c\u60a8\u4f1a\u53d1\u73b0Beam_load.c\u67096000\u591a\u884c\u4ee3\u7801\u3002\u516d\u5343\u884c\u6765\u52a0\u8f7d\u4e00\u4e2a\u6a21\u5757\uff1f\u8fd9\u662f\u56e0\u4e3a\u5149\u675f\u52a0\u8f7d\u5668\u505a\u7684\u4e8b\u60c5\u6bd4\u5b83\u7684\u540d\u5b57\u900f\u9732\u7684\u66f4\u591a\u3002\n\u6709\u4e00\u4e2a\u865a\u62df\u673a\u6307\u4ee4\u7684\u4f18\u5316\u4f20\u9012\uff0c\u4e00\u4e9b\u4e13\u95e8\u7528\u4e8e\u67d0\u4e9b\u60c5\u51b5\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u7ec4\u5408\u6210\u8d85\u7ea7\u6307\u4ee4\u3002\u68c0\u67e5\u503c\u662f\u5426\u7531\u4e09\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5143\u7ec4\u662f\u901a\u8fc7\u4e00\u5bf9\u6881\u64cd\u4f5c\u6765\u5b8c\u6210\u7684\uff1ais_tuple\u548cis_ality\u3002\u6ce2\u675f\u52a0\u8f7d\u5668\u5c06\u8fd9\u4e9b\u8f6c\u6362\u6210\u4e00\u6761\u8d85\u7ea7\u6307\u4ee4\uff1ais_tuple_of_ality\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u6881\u4ee3\u7801\u7684\u7b80\u5316\u8868\u793a\uff1a\n\u53cd\u6c47\u7f16\u4ee3\u7801\u5199\u5165example.dis\u3002(\u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u52a0\u8f7d\u8be5\u6a21\u5757\uff0c\u56e0\u6b64\u5728\u53d1\u51fa\u4e0a\u8ff0\u547d\u4ee4\u4e4b\u524d\u5bf9\u5176\u8fdb\u884c\u7f16\u8bd1\u3002)\u3002\n\u52a0\u8f7d\u5668\u8fd8\u5c06BEAM\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u7ebf\u7a0b\u4ee3\u7801\uff1a\u6309\u987a\u5e8f\u8df3\u8f6c\u5230\u7684\u5730\u5740\u5217\u8868\u3002\u73b0\u5728\u6211\u8be5\u600e\u4e48\u5904\u7406\u8fd9\u4e2a\u64cd\u4f5c\u7801\u5462\uff1f\u53ea\u9700\u6293\u53d6\u5e76\u8df3\u8f6c\uff0c\u6293\u53d6\u5e76\u8df3\u8f6c\u5373\u53ef\u3002\u5982\u679c\u60a8\u60f3\u66f4\u591a\u5730\u4e86\u89e3\u7ebf\u7a0b\u5316\u4ee3\u7801\uff0c\u8bf7\u53c2\u8003Forth\u4e16\u754c\u3002\n\u7ebf\u7a0b\u5316\u4ee3\u7801\u5229\u7528\u6807\u7b7e\u4f5c\u4e3aGCC\u7684\u503c\u6269\u5c55\u3002\u5982\u679c\u60a8\u4f7f\u7528\u53e6\u4e00\u4e2a\u7f16\u8bd1\u5668(\u5982Visual C++)\u6784\u5efa\u675f\u6d41\u4eff\u771f\u5668\uff0c\u5b83\u5c06\u4f9d\u8d56\u4e8e\u4f7f\u7528\u5de8\u5927\u7684SWITCH\u8bed\u53e5\u8fdb\u884c\u6307\u4ee4\u5206\u6d3e\uff0c\u5e76\u4e14\u4f1a\u5bf9\u6027\u80fd\u9020\u6210\u91cd\u5927\u5f71\u54cd\u3002", "note_en": "Erlang is a complex system, and I can&#39;t do its inner workings justice in a short article, but I wanted to give some insight into what goes on when a module is compiled and loaded. As with most compilers, the first step is to convert the textual source to an abstract syntax tree, but that&#39;s unremarkable. What is interesting is that the code goes through three major representations, and you can look at each of them.\n Erlang is unique among functional languages in its casual scope rules. You introduce variables as you go, without fanfare, and there&#39;s no creeping indentation caused by explicit scopes. Behind the scenes that&#39;s too quirky, so the syntax tree is converted into Core Erlang. Core Erlang looks a lot like Haskell or ML with all variables carefully referenced in &#34;let&#34; statements. You can see the Core Erlang representation of a module with this command from the shell:\n   The next big transformation is from Core Erlang to code for the register-based BEAM virtual machine. BEAM is poorly documented, but it&#39;s a lot like the  Warren Abstract Machine developed for Prolog (but without the need for backtracking). BEAM isn&#39;t terribly hard to figure out if you write short modules and examine them with:\n  The disassembled BEAM code for the  example module is written to  example.S. The key to understanding BEAM is that there are two sets of registers: one for passing parameters (&#34;x&#34; registers) and one for use as locals within functions (&#34;y&#34; registers).\n Virtual BEAM code is the final output of the compiler, but it&#39;s still not what gets executed by the system. If you look at the source for the Erlang runtime, you&#39;ll see that  beam_load.c is over six thousand lines of code. Six thousand lines to load a module? That&#39;s because the beam loader is doing more than its name lets on.\n There&#39;s an optimization pass on the virtual machine instructions, specializing some for certain situations and combining others into superinstructions. To check if a value is a tuple of three elements is accomplished with a pair of BEAM operations:  is_tuple and  is_arity. The BEAM loader turns these into one superinstruction:  is_tuple_of_arity. You can see this condensed representation of BEAM code with:\n  The disassembled code is written to  example.dis. (Note that the module must be loaded, so compile it before giving the above command.)\n The loader also turns the BEAM bytecode into  threaded code: a list of addresses that get jumped to in sequence. There&#39;s no &#34;Now what do I do with this opcode?&#34; step, just fetch and jump, fetch and jump. If you want to to know more about threaded code, look to the  Forth world.\n Threaded code takes advantage of the  labels as values extension of gcc. If you build the BEAM emulator with another compiler like Visual C++, it falls back on using a giant  switch statement for instruction dispatch and there&#39;s a significant performance hit.", "posttime": "2020-06-09 19:24:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8bd1,\u4e86\u89e3,erlang,\u4ee3\u7801", "title": "\u6df1\u5165\u4e86\u89e3Erlang\u7f16\u8bd1\u5668(2012)", "title_en": "A Peek Inside the Erlang Compiler (2012)", "transed": 1, "url": "https://prog21.dadgum.com/127.html", "via": "", "real_tags": ["\u7f16\u8bd1", "\u4e86\u89e3", "erlang", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "484a2fb5fa82515791ee462c6ba8d818.png", "infoid": 1005835, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728Coinbase\uff0c\u6211\u4eec\u5173\u5fc3\u5f00\u53d1\u4eba\u5458\u7684\u751f\u4ea7\u529b\u3002\u968f\u7740\u6211\u4eec\u4ece\u4e00\u9879\u670d\u52a1\u6269\u5c55\u5230\u591a\u9879\u670d\u52a1\uff0c\u6211\u4eec\u5bf9\u5de5\u5177\u8fdb\u884c\u4e86\u6295\u8d44\uff0c\u8fd9\u4e9b\u5de5\u5177\u4f7f\u6211\u4eec\u6709\u4fe1\u5fc3\u5feb\u901f\u5c06\u65b0\u670d\u52a1\u4ea4\u4ed8\u751f\u4ea7\u3002\u50cf\u5176\u4ed6\u6210\u957f\u4e2d\u7684\u79d1\u6280\u516c\u53f8\u4e00\u6837\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u901a\u8fc7\u65b0\u7684\u5fae\u670d\u52a1\u6765\u6269\u5c55\u6211\u4eec\u66fe\u7ecf\u5355\u4e00\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u8fd9\u4e9b\u670d\u52a1\u5c01\u88c5\u4e86\u5b9a\u4e49\u660e\u786e\u7684\u4efb\u52a1\uff0c\u964d\u4f4e\u4e86\u6280\u672f\u503a\u52a1\uff0c\u5e76\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u884c\u52a8\u3002\u5f53\u6211\u4eec\u6cbf\u7740\u8fd9\u6761\u8def\u8d70\u4e0b\u53bb\u65f6\uff0c\u6211\u4eec\u7684DevOps\u56e2\u961f\u4e00\u76f4\u5728\u52aa\u529b\u4fdd\u6301\u8f83\u9ad8\u7684\u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b\u3002\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u6570\u636e\u6765\u6307\u5bfc\u6211\u4eec\u7684\u5de5\u4f5c\uff0c\u73b0\u5728\u6211\u4eec\u5728\u8fd9\u91cc\u5206\u4eab\uff0c\u5e76\u5e0c\u671b\u66f4\u591a\u7684\u4eba\u4e5f\u4f1a\u8fd9\u6837\u505a\u3002\u8fd9\u7bc7\u6587\u7ae0\u8ba9\u6211\u4eec\u4e00\u7aa5Coinbase\u90e8\u7f72\u80cc\u540e\u7684\u6570\u636e\uff0c\u4e5f\u662f\u6211\u4eec\u770b\u5f85\u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\n\u5728\u65e9\u671f\uff0cCoinbase\u5f88\u7b80\u5355\u3002\u5f53\u6211\u4eec\u57282015\u5e74\u521d\u9996\u6b21\u80fd\u591f\u6d4b\u91cf\u90e8\u7f72\u6570\u636e\u65f6\uff0c\u6211\u4eec\u53ea\u8fd0\u884c\u4e00\u9879\u751f\u4ea7\u670d\u52a1\uff1aCoinbase.com\u3002Coinbase\u662f\u4e00\u6b3eRails\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u5728Heroku\u4e0a\u8fd0\u884c\u3002\u751f\u6d3b\u5f88\u7f8e\u597d\u3002\u90e8\u7f72\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u6211\u4eec\u884c\u52a8\u8fc5\u901f\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u9879\u670d\u52a1\uff0c\u4e3a\u6211\u4eec\u4eca\u5929\u7684\u53d1\u5c55\u5960\u5b9a\u4e86\u57fa\u7840\u3002\n2015\u5e742\u6708\u5728Heroku\u4e0a\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u90e8\u7f72\u4e86120\u6b21\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u5c0f\u56e2\u961f\u4e2d\u90e8\u7f72\u9891\u7387\u6700\u9ad8\u7684\u524d3\u540d\u4eba\u5458\u5360\u6240\u6709\u751f\u4ea7\u90e8\u7f72\u768458%\u3002\u5f53\u65f6\u5de5\u7a0b\u5e08\u6bcf\u6708\u7684\u90e8\u7f72\u4e2d\u503c\u662f8\u6b21\u3002\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\u6211\u4eec\u56e2\u961f\u7684\u4e00\u4e9b\u90e8\u7f72\u8d8b\u52bf\uff0c\u5bd2\u5047\u8fc7\u540e\u53c8\u56de\u6765\u4e86\uff0c\u4e00\u76f4\u6301\u7eed\u52302015\u5e74\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u6211\u4eec\u53ea\u8861\u91cf\u6211\u4eec\u5728Heroku\u7684\u90e8\u7f72\u60c5\u51b5\u3002(\u867d\u7136\u6211\u4eec\u57282015\u5e742\u6708\u63a8\u51fa\u4e86\u540e\u6765\u6210\u4e3aGDAX\u7684\u670d\u52a1\uff0c\u4f46\u5b83\u7684\u65e9\u671f\u90e8\u7f72\u6ca1\u6709\u5728\u8fd9\u4e2a\u6570\u636e\u96c6\u4e2d\u8861\u91cf)\u3002\n\u968f\u77402015\u5e74\u7684\u5230\u6765\uff0c\u6211\u4eec\u7684\u57fa\u7840\u8bbe\u65bd\u53d1\u751f\u4e86\u4e24\u5927\u53d8\u5316\u3002\u6211\u4eec\u7684\u5b89\u5168\u548c\u5408\u89c4\u6027\u9700\u6c42\u4e0d\u65ad\u589e\u957f\uff0c\u4ee5\u52a0\u901f\u6211\u4eec\u8fc1\u79fb\u5230\u66f4\u5b89\u5168\u7684\u73af\u5883(\u6211\u4eec\u9009\u62e9\u4e86AWS)\uff0c\u6211\u4eec\u5f00\u59cb\u4e3a\u652f\u6301GDAX\u7684\u5206\u5e03\u5f0f\u67b6\u6784\u521b\u5efa\u65b0\u670d\u52a1\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u8bbe\u8ba1\u5e76\u5f00\u59cb\u90e8\u7f72\u5230\u65b0\u7684\u4e91\u57fa\u7840\u8bbe\u65bd\u4e2d\uff0c\u4ee5\u5b89\u5168\u5730\u63d0\u4f9b\u591a\u79cd\u670d\u52a1\u3002\u6211\u4eec\u9996\u5148\u90e8\u7f72\u4e86GDAX\u548cCoinbase\uff0c\u968f\u540e\u5f88\u5feb\u4e5f\u90e8\u7f72\u4e86GDAX\u548cCoinbase\u3002\n\u6211\u4eec\u9700\u8981\u8d4b\u4e88\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u884c\u52a8\u7684\u80fd\u529b\uff0c\u540c\u65f6\u63d0\u4f9b\u7cfb\u7edf\u5b89\u5168\u53ef\u9760\u7684\u4fe1\u5fc3\u3002\n\u5f53\u6211\u4eec\u8bbe\u8ba1\u65b0\u7684\u57fa\u7840\u8bbe\u65bd\u548c\u4f7f\u5176\u53ef\u8bbf\u95ee\u7684\u90e8\u7f72\u7ba1\u9053\u65f6\uff0c\u6211\u4eec\u52aa\u529b\u6539\u8fdb\u7684\u5173\u952e\u6307\u6807\u4e4b\u4e00\u662f\u90e8\u7f72\u901f\u5ea6\uff0c\u5373\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u5b89\u5168\u5730\u4ea4\u4ed8\u751f\u4ea7\u7684\u9891\u7387\u3002\u968f\u7740\u8f6f\u4ef6\u7ee7\u7eed\u541e\u566c\u4e16\u754c\uff0c\u50cfdocker\u8fd9\u6837\u7684\u516c\u53f8\u6b63\u5728\u52aa\u529b\u4f7f\u4e92\u8054\u7f51\u53d8\u5f97\u53ef\u7f16\u7a0b\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u6709\u80fd\u529b-\u9664\u975e\u6709\u4ec0\u4e48\u4e1c\u897f\u963b\u788d\u4e86\u4ed6\u4eec\u3002\u5f53\u57fa\u7840\u8bbe\u65bd\u89c4\u6a21\u6269\u5927\u548c\u5f00\u53d1\u56e2\u961f\u901f\u5ea6\u51cf\u6162\u65f6\uff0c\u516c\u53f8\u4f1a\u51fa\u73b0\u51e0\u79cd\u6545\u969c\u60c5\u51b5\u3002\u9ad8\u7d20\u8d28\u7684\u5de5\u7a0b\u5e08\u53ef\u80fd\u4f1a\u53bb\u4e00\u4e2a\u66f4\u6709\u80fd\u529b\u7684\u73af\u5883\uff0c\u4f4e\u603b\u7ebf\u56e0\u7d20\u53ef\u80fd\u4f1a\u7ed9\u60a8\u7559\u4e0b\u96be\u4ee5\u7406\u89e3\u7684\u670d\u52a1\uff0c\u6216\u8005\u4e00\u4e2a\u8003\u8651\u4e0d\u5468\u7684\u4f53\u7cfb\u7ed3\u6784\u53ef\u80fd\u4f1a\u4f7f\u9519\u8bef\u66f4\u96be\u8ffd\u8e2a\u3002\u6309\u7167\u6211\u4eec\u884c\u4e1a\u7684\u53d1\u5c55\u901f\u5ea6\uff0c\u62d6\u6162\u516c\u53f8\u7684\u53d1\u5c55\u901f\u5ea6\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\u6211\u4eec\u9700\u8981\u8d4b\u4e88\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u884c\u52a8\u7684\u80fd\u529b\uff0c\u540c\u65f6\u63d0\u4f9b\u7cfb\u7edf\u5b89\u5168\u53ef\u9760\u7684\u4fe1\u5fc3\u3002\n\u6211\u4eec\u52aa\u529b\u6539\u8fdb\u7684\u5173\u952e\u6307\u6807\u4e4b\u4e00\u662f\u90e8\u7f72\u901f\u5ea6\uff0c\u5373\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u5b89\u5168\u5730\u4ea4\u4ed8\u751f\u4ea7\u7684\u9891\u7387\u3002\n\u4e3a\u4e86\u5728\u8d4b\u4e88\u5de5\u7a0b\u5e08\u6743\u529b\u548c\u7ba1\u7406\u5b89\u5168\u6027\u7684\u540c\u65f6\u4fdd\u6301\u8f83\u9ad8\u7684\u90e8\u7f72\u901f\u5ea6\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u65b0\u7684\u90e8\u7f72\u7cfb\u7edf\uff1aCodeflow\u3002\n\u4ece2015\u5e746\u6708\u52307\u6708\uff0c\u6211\u4eec\u5f00\u59cb\u4f7f\u7528Codeflow\u81ea\u884c\u90e8\u7f72Codeflow\uff0c\u5e76\u5c06GDAX\u548cCoinbase\u8fc1\u79fb\u5230\u6211\u4eec\u5728AWS\u4e2d\u7684\u65b0\u90e8\u7f72\u6e20\u9053\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5f00\u59cb\u8ba9\u66f4\u591a\u7684\u5de5\u7a0b\u56e2\u961f\u6210\u5458\u767b\u4e0aCodeflow\u3002\u5728\u7ed9\u4e88\u6211\u4eec\u7684\u5de5\u7a0b\u5e08\u5feb\u901f\u884c\u52a8\u6240\u9700\u7684\u4fe1\u5fc3\u7684\u540c\u65f6\uff0c\u6211\u4eec\u52aa\u529b\u9f13\u52b1\u66f4\u591a\u7684\u4eba\u66f4\u9891\u7e41\u5730\u5b89\u5168\u90e8\u7f72\u3002\u6211\u4eec\u4e3a\u4fdd\u6301\u9ad8\u90e8\u7f72\u901f\u5ea6\u6240\u505a\u7684\u4e00\u4e9b\u4e8b\u60c5\u5305\u62ec\uff1a\n\u5171\u8bc6\uff1a\u6ca1\u6709\u4e00\u4e2a\u4eba(\u6216\u6545\u969c\u70b9)\u53ef\u4ee5\u5bf9\u6211\u4eec\u7684\u751f\u4ea7\u73af\u5883\u505a\u51fa\u4efb\u4f55\u6539\u53d8\uff0c\u4f46\u4e0e\u4e0d\u540c\u7a0b\u5ea6\u7684\u5171\u8bc6\u4e00\u8d77\uff0c\u5de5\u7a0b\u5e08\u4eec\u88ab\u8d4b\u4e88\u4e86\u5feb\u901f\u884c\u52a8\u7684\u80fd\u529b\u3002\n\u5b89\u5168\u90e8\u7f72\uff1a\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u603b\u662f\u5b89\u5168\u7684\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u968f\u65f6\u91cd\u65b0\u90e8\u7f72\u4efb\u4f55\u670d\u52a1\u3002\u6211\u4eec\u4f9d\u9760\u670d\u52a1\u7ea7\u522b\u8fd0\u884c\u72b6\u51b5\u68c0\u67e5\u6765\u786e\u4fdd\u7cfb\u7edf\u5728\u84dd/\u7eff\u90e8\u7f72\u5b8c\u6210\u4e4b\u524d\u6b63\u5e38\u8fd0\u884c\u3002\u5176\u4ed6\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u5982\u9632\u6b62\u90e8\u7f72\u65e7\u7684\u6216\u4e0d\u5b89\u5168\u7684\u63d0\u4ea4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u4e86\u90e8\u7f72\u59cb\u7ec8\u5b89\u5168\u7684\u53ef\u80fd\u6027\u3002\u5982\u679cDeploy\u6309\u94ae\u4e3a\u7eff\u8272\uff0c\u5219\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5355\u51fb\u5b83\u3002\n\u5165\u804c\uff1a\u5bf9\u4e8e\u4efb\u4f55\u6709\u81ea\u6211\u610f\u8bc6\u7684\u65b0\u5458\u5de5\u6765\u8bf4\uff0c\u90e8\u7f72\u5230\u751f\u4ea7\u4e2d\u542c\u8d77\u6765\u90fd\u5f88\u53ef\u6015\uff0c\u6240\u4ee5\u6211\u4eec\u9f13\u52b1\u65b0\u5de5\u7a0b\u5e08\u5728\u7b2c\u4e00\u5929\u5c31\u90e8\u7f72coinbase.com\u3002\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u8fd9\u6837\u505a\u662f\u5b89\u5168\u7684\u3002\n\u5b89\u5168\u7ba1\u9053\uff1a\u5728\u63d0\u4ea4\u53ef\u90e8\u7f72\u6216\u90e8\u7f72\u5b8c\u6210\u4e4b\u524d\uff0c\u591a\u5c42\u5185\u8054\u5b89\u5168\u626b\u63cf\u4e3a\u5df2\u77e5\u6216\u53ef\u80fd\u7684\u5b89\u5168\u95ee\u9898\u63d0\u4f9b\u5c3d\u53ef\u80fd\u5feb\u7684\u53cd\u9988\u3002\n\u5931\u8d25\uff1a\u90e8\u7f72\u603b\u662f\u5931\u8d25\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u5f3a\u8c03\u8fd9\u6c38\u8fdc\u4e0d\u662f\u90e8\u7f72\u8005\u7684\u9519\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u770b\u770b\u5982\u4f55\u4ece\u4e8b\u540e\u603b\u7ed3\u4e2d\u5438\u53d6\u6559\u8bad\uff0c\u5e76\u901a\u8fc7\u66f4\u597d\u7684\u81ea\u52a8\u5316\u6765\u9632\u6b62\u8fd9\u79cd\u5931\u8d25\u518d\u6b21\u53d1\u751f\u3002\n\u6709\u4e86\u5171\u8bc6\uff0c\u6ca1\u6709\u4eba\u80fd\u5bf9\u6211\u4eec\u7684\u751f\u4ea7\u73af\u5883\u505a\u51fa\u4efb\u4f55\u6539\u53d8\uff0c\u4f46\u5de5\u7a0b\u5e08\u4eec\u53ef\u4ee5\u4e00\u8d77\u5feb\u901f\u884c\u52a8\u3002\nCodeflow\u5bf9\u6211\u4eec\u90e8\u7f72\u901f\u5ea6\u7684\u5f71\u54cd\u7acb\u7aff\u89c1\u5f71\uff1a\u5c3d\u7ba1\u6211\u4eec\u63d0\u9ad8\u4e86\u8fdb\u5165\u66f4\u5b89\u5168\u4e91\u7684\u6e20\u9053\u7684\u5b89\u5168\u6027\u548c\u63a7\u5236\u529b\uff0c\u4f46\u4ece6\u52307\u6708\uff0c\u6211\u4eec\u7684\u90e8\u7f72\u6570\u91cf\u589e\u52a0\u4e86450%\uff0c\u4ece128\u6b21\u589e\u52a0\u5230580\u6b21\u3002\u8fd9\u8fdc\u8fdc\u76d6\u8fc7\u4e86\u6211\u4eec\u5de5\u7a0b\u56e2\u961f\u5728\u90a3\u51e0\u4e2a\u6708\u91cc\u5927\u7ea630%\u7684\u89c4\u6a21\u589e\u957f\uff0c\u662f\u6211\u4eec\u5de5\u4f5c\u6b63\u5728\u52a0\u5feb\u516c\u53f8\u901f\u5ea6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6307\u6807\u3002\n\u968f\u7740\u6211\u4eec\u670d\u52a1\u590d\u6742\u6027\u7684\u589e\u52a0\uff0c\u6211\u4eec\u7684\u5931\u8d25\u7387\u4e5f\u5728\u589e\u52a0\u3002\u90e8\u7f72\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u591a\u79cd\uff0c\u65e2\u6709\u597d\u7684\uff0c\u4e5f\u6709\u574f\u7684\u3002\u597d\u7684\u5931\u8d25\u53ef\u80fd\u4f1a\u4fdd\u62a4\u6211\u4eec\u514d\u53d7\u91cd\u5927\u66f4\u6539\u6216\u6027\u80fd\u5f71\u54cd\uff0c\u4f7f\u5176\u65e0\u6cd5\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u5176\u4ed6\u9519\u8bef\u6216\u9519\u8bef\u914d\u7f6e\u53ef\u80fd\u4f1a\u964d\u4f4e\u90e8\u7f72\u901f\u5ea6\u3002\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u6539\u8fdb\u81ea\u52a8\u5316\u6765\u51cf\u5c11\u6545\u969c\u3002\u5f53\u6211\u4eec\u57287\u6708\u4efd\u5f00\u59cb\u901a\u8fc7Codeflow\u90e8\u7f72\u6211\u4eec\u6240\u6709\u7684\u670d\u52a1\u65f6\uff0c\u6211\u4eec\u8fbe\u5230\u4e8627%\u7684\u90e8\u7f72\u5931\u8d25\u7684\u5cf0\u503c\u3002\u968f\u7740\u6211\u4eec\u63d0\u9ad8\u4e86\u90e8\u7f72\u5f39\u6027\uff0c\u5e76\u589e\u52a0\u4e86\u5bf9\u5de5\u7a0b\u5e08\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u7684\u65e9\u671f\u53cd\u9988\uff0c\u6211\u4eec\u5df2\u5c06\u6545\u969c\u7387\u964d\u81f3\u7ea615%\uff0c\u5e76\u4e14\u4ecd\u5728\u6539\u8fdb\u3002\n\u968f\u7740\u56e2\u961f\u5f00\u59cb\u4fe1\u4efb\u8fd9\u4e2a\u65b0\u7684\u6e20\u9053\uff0c\u6211\u4eec\u5f00\u59cb\u901a\u8fc7\u5f15\u5165\u65b0\u670d\u52a1\u6765\u8fdb\u4e00\u6b65\u63d0\u9ad8\u5f00\u53d1\u901f\u5ea6\u3002\u968f\u7740\u6211\u4eec\u7684\u53cd\u6b3a\u8bc8\u3001\u5b89\u5168\u3001\u5f00\u53d1\u8fd0\u8425\u3001\u4ea7\u54c1\u56e2\u961f\u4e0d\u65ad\u6269\u5927\uff0c\u8fd9\u4e9b\u670d\u52a1\u5305\u62ec\u66f4\u597d\u5730\u5c01\u88c5\u73b0\u6709\u529f\u80fd\u548c\u5168\u65b0\u7684\u5185\u90e8\u548c\u5916\u90e8\u4ea7\u54c1\u3002\u60a8\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\u6211\u4eec\u7684\u670d\u52a1\u7684\u5168\u9762\u589e\u957f\uff0c\u76ee\u524d\u5df2\u8fbe\u523082\u9879\u3002\u5305\u62ec\u5728\u8fd9\u4e9b\u65b0\u670d\u52a1\u4e2d\u7684\u662f\u5168\u65b0\u7684\u652f\u4ed8\u548c\u94b1\u5305\u670d\u52a1\uff0c\u8fd9\u4e9b\u670d\u52a1\u73b0\u5728\u53ef\u4ee5\u6545\u610f\u4ee5\u6bd4\u9762\u5411\u672a\u6765\u7684\u4ea7\u54c1\u66f4\u4e25\u683c\u7684\u65b9\u5f0f\u53d1\u5c55\u3002\n\u81ea\u4ece\u8fc1\u79fb\u5230\u6211\u4eec\u7684\u65b0\u90e8\u7f72\u6e20\u9053\u4ee5\u6765\uff0c\u6211\u4eec\u73b0\u5728\u6709\u66f4\u591a\u7684\u4eba\u81ea\u4fe1\u5730\u90e8\u7f72\u66f4\u591a\u7684\u670d\u52a1\uff0c\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u9891\u7e41\u3002\u5728\u6211\u4eec\u8fd0\u884c\u81ea\u5df1\u7684\u57fa\u7840\u8bbe\u65bd\u4e4b\u524d\uff0c\u6bcf\u4e2a\u5de5\u7a0b\u5e08\u6bcf\u6708\u90e8\u7f72\u7684\u4e2d\u4f4d\u6570\u662f8\u6b21\u3002\u5728\u8fc1\u79fb\u5230Codeflow\u4e4b\u540e\uff0c\u8fd9\u4e00\u6570\u5b57\u589e\u957f\u523011\u6b21\uff0c\u73b0\u5728\u6bcf\u4e2a\u5f00\u53d1\u4eba\u5458\u6bcf\u6708\u90e8\u7f72\u7684\u4e2d\u4f4d\u6570\u662f16\u6b21\u3002\u60a8\u53ef\u4ee5\u770b\u5230\u4e0b\u9762\u7684\u56fe\u8868\uff0c\u5176\u4e2d\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u90e8\u7f72\u6700\u9891\u7e41\u7684\u524d5\u540d\u5de5\u7a0b\u5e08\u7684\u90e8\u7f72\u60c5\u51b5\u3002\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u9ad8\u6548\u6269\u5c55\u7684\u57fa\u7840\uff0c\u6211\u4eec\u9762\u4e34\u7740\u65b0\u7684\u6311\u6218\u3002\u4f7f\u7528\u91cf\u7684\u663e\u8457\u589e\u957f\u6b63\u5728\u5bf9\u6211\u4eec\u7684\u7cfb\u7edf\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\uff0c\u4ee5\u524d\u7684\u5c0f\u89c4\u6a21\u7cfb\u7edf\u73b0\u5728\u9700\u8981\u65b0\u7684\u4f18\u5316\u6765\u652f\u6301\u6211\u4eec\u7684\u8d1f\u8f7d\u3002\u5c55\u671b\u4e0b\u4e2a\u5b63\u5ea6\uff0c\u6211\u4eec\u6b63\u81f4\u529b\u4e8e\u63d0\u9ad8\u6211\u4eec\u57fa\u7840\u8bbe\u65bd\u7684\u53ef\u9760\u6027\u3001\u5de5\u4f5c\u6d41\u7a0b\u548c\u5f39\u6027\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u5f00\u53d1\u4eba\u5458\u7684\u5de5\u4f5c\u6548\u7387\u3002\n\u60f3\u8981\u5206\u4eab\u66f4\u591a\u5173\u4e8e\u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b\u548c\u901f\u5ea6\u7684\u4fe1\u606f\u5417\uff1f\u6211\u4eec\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u7075\u611f\u6765\u81ea\u4e8eDevOps\u7684\u5e74\u5ea6\u72b6\u51b5\u62a5\u544a\uff0c\u6211\u4eec\u5f88\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u60a8\u7684\u56e2\u961f\u5982\u4f55\u4fdd\u6301\u9ad8\u6548\u7684\u4fe1\u606f\u3002\n\u5982\u679c\u60a8\u6709\u5174\u8da3\u8ba9\u5f00\u53d1\u4eba\u5458\u5728\u4e00\u4e2a\u5f88\u597d\u7684\u73af\u5883\u4e2d\u5feb\u901f\u884c\u52a8\uff0c\u6211\u4eec\u5f88\u4e50\u610f\u4e0e\u60a8\u5408\u4f5c\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u62db\u8058\u5404\u79cd\u5de5\u7a0b\u5e08\u804c\u4f4d\u3002\n\u611f\u8c22\u683c\u96f7\u5384\u59c6\u3001\u6770\u514b\u3001\u5362\u514b\u3001\u8428\u7d22\u3001\u6770\u91cc\u7c73\u548c\u5e03\u83b1\u6069\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\uff01", "note_en": "At Coinbase we care about developer productivity. As we\u2019ve scaled from a single service to many, we\u2019ve invested in tools that give us the confidence to rapidly ship new services to production. Like other growing technology companies we\u2019ve been scaling our once monolithic infrastructure through new microservices that encapsulate well defined tasks, buy-down technical debt and help us move fast. As we\u2019ve gone down this path our DevOps team has worked to maintain high developer productivity. We\u2019ve used data to guide our work that we\u2019re now sharing here and hope more people will too. This post takes a glimpse into the data behind deployments at Coinbase and one way we think about developer productivity.\n In the early days, Coinbase was simple. When we were first able to measure deployment data in early 2015 we ran one production service:  coinbase.com. Coinbase is a rails app and we ran on Heroku. Life was good. Deployments were one command, we moved fast and we built a service that laid the foundation for where we are today.\n  While running on Heroku in February 2015, we deployed 120 times and our top 3 most frequent deployers on a small team accounted for 58% of all deploys to production. At the time the median deployments per month for an engineer was 8. You can see some of our team\u2019s deployment trends below coming back after winter holidays and ramping up into 2015. Throughout this period, we are only measuring our deployments to Heroku. (Though we launched the service that would become GDAX in February 2015, its early deploys aren\u2019t measured in this dataset).\n  With 2015 came two big changes to our infrastructure. Our security and compliance needs grew to accelerate our migration into a more secure environment (we  chose AWS) and we started creating new services for the distributed architecture that would power  GDAX. To meet both of these goals we designed and started deploying into new cloud infrastructure to securely many services. We started by deploying GDAX and Coinbase soon followed suit.\n We need to empower developers to move fast yet provide confidence that systems are safe and secure.\n As we designed our new infrastructure and the deployment pipeline that made it accessible, one of the key metrics that we worked to improve was  deployment velocity or how often developers were able to safely ship to production. As software continues to  eat the world and companies like docker work towards  making the internet programmable, developers  can be more empowered than ever \u2014 unless something is standing in their way. There are several failure scenarios for the company when infrastructures scale and development teams slow down. High quality engineers might leave for a more empowering environment, low bus factors can leave you with poorly understood services or a poorly thought out architecture might make bugs exponentially more difficult to track down. At the pace our industry evolves, slowing the company down wasn\u2019t acceptable. We need to empower developers to move fast yet provide confidence that systems are safe and secure.\n One of the key metrics that we worked to improve was  deployment velocity or how often developers were able to safely ship to production.\n To maintain a high rate of deployment while both empowering engineers and managing security, we designed our new deployment system: Codeflow.\n  From June to July of 2015, we started self-deploying Codeflow with Codeflow and migrated both GDAX and then Coinbase into our new deployment pipeline in AWS. At the same time, we started to onboard more of the engineering team onto Codeflow. In giving our engineers the confidence they needed to move fast, we worked to encourage more people to safely deploy more often. Some of the things we do that allow us to maintain high deployment velocity include:\n Consensus: no single person (or point of failure) can make any changes to our production environment, but together with varying degrees of consensus, engineers are empowered to move fast.\n Safe Deploys: deploying to production is always safe. Anyone can redeploy any service at any time. We rely on service level health checks to make sure systems are acting normally before a blue/green deploy completes. Other heuristics like preventing the deploy of old or unsafe commits maximize the probability the deploys are always safe. If the deploy button is green, anyone can click it.\n Onboarding: Deploying to production sounds scary to any self-aware new hire, so we encourage new engineers to deploy coinbase.com on their first day. We want everyone to know this is a safe thing to do.\n Security Pipeline : Several layers of inline security scanning provide the fastest possible feedback for known or likely security issues,  before a commit is made deployable or a deploy completes.\n Failures: Deployment will always fail. When that happens, we\u2019re quick to reinforce that it\u2019s never the fault of the deployer. Instead, we look at how we can learn from our post-mortems and prevent that failure from occurring again with better automation.\n With consensus, no single person can make any changes to our production environment, but together, engineers are empowered to move fast.\n The impact Codeflow had on our deployment velocity was immediately obvious: despite increasing the security and controls of our pipeline into a more secure cloud, we increased our number of deployments 450% from 128 to 580 from June to July. This far out shadowed the ~30% increase in the size of our engineering team in those months and was a good indicator that our work was increasing the company\u2019s velocity.\n  As our complexity of services grew, so too did our rate of failure. Deploys can fail for a variety of reasons that can be both good and bad. Good failures might protect us from a breaking change or performance hit from going out into production but others stemming from bugs or poor configuration can hurt deployment velocity. Over the last year we\u2019ve invested in reducing failures through improved automation. As we started to deploy all of our services through Codeflow in July we peaked at 27% of all deployments failing. As we\u2019ve improved our deployment resilience and increased early feedback on possible issues to engineers, we\u2019ve since brought our failure rate down to ~15% and are still improving.\n  As the team came to trust this new pipeline we began to further increase developer velocity through the introduction of new services. These services included better encapsulation of existing functionality and completely new products, both internal and external, as our anti-fraud, security, devops, product teams continued to scale. You can see the full growth of our services below, now up to 82 today. Included in these new services are brand new payment and wallet services that can now intentionally evolve with much more rigor than forward facing products.\n  Since migrating into our new deployment pipeline we now have more people confidently deploying more services more frequently than ever. Before we ran our own Infrastructure our median monthly deployments per engineer was 8. After our migration to Codeflow that grew to 11 and we\u2019re now up to a median of 16 deploys per developer per month. You can see a chart of that below, where you can see the deployment of our top-5 most frequently deploying engineers highlighted.\n  Now that we have the foundation to scale productively, we\u2019re facing new challenges. Significant growth in usage is stress testing our systems and previously small-scale systems now need new optimizations to support our load. Looking ahead to the next quarter we\u2019re working on improving our reliability, workflow and resilience of our infrastructure without compromising developer productivity.\n Want to share more on developer productivity and velocity? We were inspired to write this by the annual  State Of DevOps Report and would love to hear more about how your team is staying productive.\n If you\u2019re interested in empowering developers to move fast in a great environment, we\u2019d love to work with you. We\u2019re hiring for a variety of engineering roles  here.\n Thanks to  Graham,  Jack,  Luke,  Saso,  Jeremy, and  Brian for helping to make this possible!", "posttime": "2020-06-09 19:24:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,\u53ef\u4f38\u7f29\u6027,developer,\u90e8\u7f72", "title": "Coinbase\u7684\u53ef\u4f38\u7f29\u6027\u548c\u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b", "title_en": "Scaling and Developer Productivity at Coinbase", "transed": 1, "url": "https://blog.coinbase.com/scaling-developer-productivity-d23ce491f869", "via": "", "real_tags": ["\u5f00\u53d1", "\u53ef\u4f38\u7f29\u6027", "developer", "\u90e8\u7f72"]}, {"category": "", "categoryclass": "", "imagename": "0058383b157d7c4f7e1da37985b1b679.png", "infoid": 1005833, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u53f0\u72ec\u7279\u7684\u53d1\u52a8\u673a\u6b63\u5728\u4e3a\u4e00\u4e2a\u504f\u8fdc\u7684\u83f2\u5f8b\u5bbe\u5c9b\u5c7f\u63d0\u4f9b\u52a8\u529b", "note_en": "A Unique Engine Is Bringing Power to a Remote Philippine Island", "posttime": "2020-06-09 18:51:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63d0\u4f9b,startups,\u5c9b\u5c7f", "title": "\u4ee5\u8272\u5217\u542f\u52a8\u72ec\u7279\u7684\u53d1\u52a8\u673a\u4e3a\u83f2\u5f8b\u5bbe\u504f\u8fdc\u5c9b\u5c7f\u63d0\u4f9b\u52a8\u529b", "title_en": "Israeli Startups Unique Engine Bringing Power to a Remote Philippine Island", "transed": 1, "url": "https://www.bloombergquint.com/markets/a-unique-engine-is-bringing-power-to-a-remote-philippine-island", "via": "", "real_tags": ["\u63d0\u4f9b", "startups", "\u5c9b\u5c7f"]}, {"category": "", "categoryclass": "", "imagename": "e7e49567d75cd8d266643cdfb3f9839c.png", "infoid": 1005832, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CapRover\u662f\u4e00\u4e2a\u6781\u5176\u6613\u4e8e\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f/\u6570\u636e\u5e93\u90e8\u7f72&amp\uff1bWeb\u670d\u52a1\u5668\u7ba1\u7406\u5668\uff0c\u9002\u7528\u4e8eNodeJS\u3001Python\u3001PHP\u3001ASP.NET\u3001Ruby\u3001MySQL\u3001MongoDB\u3001Postgres\u3001WordPress(\u7b49\u7b49)\u3002\u7533\u8bf7\uff01\n\u5b83\u7684\u8fd0\u884c\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u800c\u4e14\u975e\u5e38\u5065\u58ee\uff0c\u5728\u5176\u7b80\u5355\u6613\u7528\u7684\u754c\u9762\u80cc\u540e\u4f7f\u7528\u4e86Docker\u3001nginx\u3001LetsEncrypt\u548cNetData\u3002\u7528\u4e8e\u81ea\u52a8\u5316\u548c\u7f16\u5199\u811a\u672c\u7684\u2714\u547d\u4ee4\u884c\u754c\u9762\u2714\u7f51\u7edc\u56fe\u5f62\u7528\u6237\u754c\u9762\uff0c\u53ef\u8f7b\u677e\u8bbf\u95ee\u548c\u65b9\u4fbf\u2714\uff0c\u65e0\u9700\u9501\u5b9a\uff01\u79fb\u9664CapRover\uff0c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u8fd0\u884c\uff01\u5e55\u540e\u7684\u2714\u6587\u6863\u7fa4\u7ec4\u53ef\u5b9e\u73b0\u5bb9\u5668\u5316\u548c\u7fa4\u96c6\u2714nginx(\u5b8c\u5168\u53ef\u5b9a\u5236\u7684\u6a21\u677f)\uff0c\u5e76\u53ef\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u2714\u8ba9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5e55\u540e\u52a0\u5bc6\u4ee5\u83b7\u5f97\u514d\u8d39\u7684ssl(HTTPS)\u3002\n\u6211\u4e0d\u559c\u6b22\u82b1\u8d39\u6570\u5c0f\u65f6\u548c\u6570\u5929\u7684\u65f6\u95f4\u6765\u8bbe\u7f6e\u670d\u52a1\u5668\u3001\u6784\u5efa\u5de5\u5177\u3001\u5411\u670d\u52a1\u5668\u53d1\u9001\u4ee3\u7801\u3001\u6784\u5efa\u5b83\u3001\u83b7\u53d6SSL\u8bc1\u4e66\u3001\u5b89\u88c5\u5b83\u3001\u53cd\u590d\u66f4\u65b0nginx\u3002\n\u4f7f\u7528\u6602\u8d35\u7684\u670d\u52a1\uff0c\u5982Heroku\u3001Microsoft Azure\u7b49\uff0c\u5e76\u5e0c\u671b\u5c06\u5176\u6210\u672c\u964d\u4f4e\u5230\u539f\u6765\u76841/4(Heroku\u76841 GB\u5b9e\u4f8b\u6bcf\u6708\u6536\u8d3925\u7f8e\u5143\uff0c\u5728DigitalOcean\u4e0a\u540c\u6837\u7684\u670d\u52a1\u5668\u6536\u8d395\u7f8e\u5143\uff01)\u3002\n\u66f4\u559c\u6b22\u7f16\u5199\u66f4\u591a\u7684showResults(getUserList())\uff0c\u800c\u4e0d\u662f\u592a\u591a\u7684apt-get install libstdc++6&&gt;\uff1b/dev/null\u3002\n\u4eab\u53d7\u4e00\u4e2a\u5728\u5176\u670d\u52a1\u5668\u4e0a\u5b89\u88c5MySQL\u3001MongoDB\u7b49\u7684\u5e73\u53f0\uff0c\u65b9\u6cd5\u662f\u4ece\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9\u5e76\u5355\u51fbInstall\uff01\n\u559c\u6b22\u4eab\u53d7Docker\u548cnginx\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u800c\u4e0d\u5fc5\u5b66\u4e60\u5b83\u4eec\u6216\u5904\u7406\u5b83\u4eec\u7684\u8bbe\u7f6e\u811a\u672c\u6765\u4f7f\u4e8b\u60c5\u6b63\u5e38\u5de5\u4f5c\uff01\uff01\n\u5bf9Docker\u548cnginx\u4e86\u5982\u6307\u638c\uff0c\u5e76\u4e14\u559c\u6b22\u5728\u5176\u4e2d\u6267\u884c\u57fa\u672c\u64cd\u4f5c\u7684\u5e73\u53f0\uff0c\u5e76\u4e14\u5141\u8bb8\u4ed6\u4eec\u5728\u9700\u8981\u65f6\u81ea\u5b9a\u4e49\u4efb\u4f55\u7279\u5b9a\u8bbe\u7f6e\u3002\n\u80fd\u591f\u901a\u8fc7HTTPS\u514d\u8d39\u4fdd\u62a4\u60a8\u7684\u670d\u52a1\uff0c\u80fd\u591f\u81ea\u52a8\u5c06HTTP\u91cd\u5b9a\u5411\u5230HTTPS\u3002\n\u90e8\u7f72\u4e00\u952e\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ea\u9700\u51e0\u79d2\u949f\uff01MongoDB\u3001Parse\u3001MySQL\u3001WordPress\u3001Postgres\u7b49\u7b49\u3002\n\u6709\u591a\u79cd\u90e8\u7f72\u65b9\u5f0f\uff1a\u4ece\u4eea\u8868\u677f\u4e0a\u4f20\u6e90\u6587\u4ef6\u3001\u4f7f\u7528\u547d\u4ee4\u884ccaprover\u90e8\u7f72\u3001\u4f7f\u7528webhooks\u548c\u57fa\u4e8egit\u63a8\u9001\u6784\u5efa\u3002\n\u754c\u9762\u7b80\u5355\uff0c\u53ef\u8fdb\u884c\u591a\u79cd\u7801\u5934\u64cd\u4f5c\uff1a\u5411\u4e3b\u673a\u516c\u5f00\u5bb9\u5668\u7aef\u53e3\u3001\u8bbe\u7f6e\u6301\u4e45\u76ee\u5f55\u3001\u5b9e\u4f8b\u8ba1\u6570\u7b49\u3002\n\u53ef\u9009\u62e9\u5b8c\u5168\u81ea\u5b9a\u4e49\u7684nginx\u914d\u7f6e\uff0c\u5141\u8bb8\u60a8\u542f\u7528HTTP2\u3001\u7279\u5b9a\u7684\u7f13\u5b58\u903b\u8f91\u3001\u81ea\u5b9a\u4e49SSL\u8bc1\u4e66\u7b49\u3002\n\u8fde\u63a5\u66f4\u591a\u8282\u70b9\uff0c\u5e76\u5728\u51e0\u79d2\u949f\u5185\u521b\u5efa\u4e00\u4e2a\u7fa4\u96c6\uff01CapRover\u81ea\u52a8\u914d\u7f6enginx\u4ee5\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u3002", "note_en": "CapRover is an extremely easy to use app/database deployment &amp; web server manager for your  NodeJS,  Python,  PHP,  ASP.NET,  Ruby,  MySQL,  MongoDB,  Postgres,  WordPress (and etc...) applications!\n It&#39;s blazingly fast and veryrobust asit uses Docker, nginx, LetsEncrypt and NetData under the hood behind its simple-to-use interface.   \u2714  CLI for automation and scripting  \u2714  Web GUI for ease of access and convenience  \u2714  No lock-in! Remove CapRover and your apps keep working!  \u2714  Docker Swarm under the hood for containerization and clustering  \u2714  Nginx (fully customizable template) under the hood for load-balancing  \u2714  Let&#39;s Encrypt under the hood for free SSL (HTTPS)\n    does not like spending hours and days setting up a server, build tools, sending code to server, build it, get an SSL certificate, install it, update nginx over and over again.\n uses expensive services like Heroku, Microsoft Azure and etc. And is interested in reducing their cost by 4x (Heroku charges 25$/month for their 1gb instance, the same server is 5$ on DigitalOcean!!)\n prefers to write more of  showResults(getUserList()) and not much of  apt-get install libstdc++6 &gt; /dev/null\n enjoys a platform where installing MySQL, MongoDB and etc on their server is done by selecting from a dropdown and clicking on install!\n likes to enjoy the power of Docker and nginx without having to learn them or deal with their settings scripts to make things work!!\n knows Docker and nginx inside out, and enjoys a platform where basic operations are done, yet allowing them to customize any specific settings if they need to\n  Ability to secure your services over HTTPS for FREE, ability to automatically redirect HTTP to HTTPS.\n Deploying one-click apps is a matter of seconds! MongoDB, Parse, MySQL, WordPress, Postgres and many more.\n Many ways to deploy: upload your source from dashboard, use command line  caprover deploy, use webhooks and build upon  git push\n Simple interface for many docker operations: exposing container ports to host, setting up persistent directories, instance count and etc.\n Optionally fully customizable nginx config allowing you to enable HTTP2, specific caching logic, custom SSL certs and etc.\n Attach more nodes and create a cluster in seconds! CapRover automatically configures nginx to load balance.", "posttime": "2020-06-09 18:50:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6784\u5efa,paas", "title": "\u5728\u51e0\u5206\u949f\u5185\u6784\u5efa\u60a8\u81ea\u5df1\u7684PaaS", "title_en": "Build your own PaaS in minutes", "transed": 1, "url": "https://caprover.com/", "via": "", "real_tags": ["\u6784\u5efa", "paas"]}, {"category": "", "categoryclass": "", "imagename": "876312673ce5a4490986e2600f825379.jpg", "infoid": 1005831, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd8\u53ef\u4ee5\u770b\u770b\u6211\u4eec2011\u5e74\u30012012\u5e74\u30012013\u5e74\u30012014\u5e74\u30012015\u5e74\u30012016\u5e74\u548c2017\u5e74\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7684\u699c\u5355\u3002\u597d\u597d\u4eab\u53d7\u5427\u3002", "note_en": "Check out our  2011,  2012,  2013,  2014,  2015,  2016, and  2017 Florida lists as well. Enjoy.", "posttime": "2020-06-09 18:49:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "hope,\u4f5b\u7f57\u91cc\u8fbe\u5dde", "title": "\u4eba\u7c7b\u6ca1\u6709\u5e0c\u671b", "title_en": "No Hope for Humanity", "transed": 1, "url": "https://www.buzzfeed.com/mjs538/crazy-florida-headlines-2018", "via": "", "real_tags": ["hope", "\u4f5b\u7f57\u91cc\u8fbe\u5dde"]}, {"category": "", "categoryclass": "", "imagename": "e343f2ca5ac0b2ff53dfeb1e79b9bb04.png", "infoid": 1005830, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Pycopy\u7684\u76ee\u6807\u662f\u5f00\u53d1\u548c\u7ef4\u62a4Python(\u517c\u5bb9)\u8bed\u8a00\u7684\u6700\u4f4e\u9650\u5ea6\u3001\u8f7b\u91cf\u7ea7\u548c\u53ef\u6269\u5c55\u7684\u5b9e\u73b0\u3002Pycopy to CPython\u7c7b\u4f3c\u4e8eSchemeto Common Lisp\u3002Pycopy\u5728\u4e91\u3001\u684c\u9762\u7cfb\u7edf\u548c\u5c0f\u578b\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0a\u90fd\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e00\u76f4\u6269\u5c55\u5230\u5fae\u63a7\u5236\u5668\u3002\u8be5\u9879\u76ee\u7531Paul Sokolovsky\u5f00\u53d1\u548c\u7ef4\u62a4\uff0c\u6700\u521d\u57fa\u4e8e\u7531Damien George\u3001Paul Sokolovsky\u548c\u8d21\u732e\u8005\u5f00\u53d1\u7684MicroPython\u3002\u540d\u79f0&#34\uff1bPycopy&34\uff1b\u548c&#34\uff1bMicroPython&34\uff1b\u5728\u9879\u76ee\u6587\u6863\u548c\u6e90\u4ee3\u7801\u4e2d\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\u3002\n\u8b66\u544a\uff1a\u6b64\u9879\u76ee\u5904\u4e8e\u6d4b\u8bd5\u9636\u6bb5\uff0c\u53ef\u80fd\u4f1a\u66f4\u6539\u4ee3\u7801\u5e93\uff0c\u5305\u62ec\u9879\u76ee\u8303\u56f4\u7684\u540d\u79f0\u66f4\u6539\u548cAPI\u66f4\u6539\u3002\nPycopy\u5b9e\u73b0\u4e86\u6574\u4e2aPython3.4\u8bed\u6cd5(\u5305\u62ecEXCEPTIONS\u3001WITH\u3001YILE FROM\u7b49\uff0c\u53e6\u5916\u8fd8\u6709\u6765\u81eaPython3.5\u7684\u5f02\u6b65/\u7b49\u5f85\u5173\u952e\u5b57)\u3002\u63d0\u4f9b\u4ee5\u4e0b\u6838\u5fc3\u6570\u636e\u7c7b\u578b\uff1astr(\u5305\u62ec\u57fa\u672cUnicode\u652f\u6301)\u3001bytes\u3001bytearray\u3001tuple\u3001list\u3001dict\u3001set\u3001frozenset\u3001array.array\u3001Collection tions.namedtuple\u3001\u7c7b\u548c\u5b9e\u4f8b\uff0c\u5185\u7f6e\u6a21\u5757\u5305\u62ecsys\u3001time\u3001struct\u7b49\uff0c\u9009\u62e9\u7aef\u53e3\u652f\u6301for_thread\u6a21\u5757(\u591a\u7ebf\u7a0b)\u3002\u6ce8\u610f\uff0c\u5bf9\u4e8e\u6570\u636e\u7c7b\u578b\u548c\u6a21\u5757\uff0c\u53ea\u5b9e\u73b0\u4e86Python3\u529f\u80fd\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\nPycopy\u53ef\u4ee5\u6267\u884c\u6587\u672c\u6e90\u4ee3\u7801\u5f62\u5f0f\u7684\u811a\u672c\uff0c\u4e5f\u53ef\u4ee5\u4ece\u9884\u7f16\u8bd1\u5b57\u8282\u7801\u6267\u884c\u811a\u672c\uff0c\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u90fd\u53ef\u4ee5\u4ece\u8bbe\u5907\u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf\u6267\u884c\u811a\u672c\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u51bb\u7ed3\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u3002\nPycopy\u662f\u9ad8\u5ea6\u53ef\u79fb\u690d\u7684\uff0c\u4e3b\u5b58\u50a8\u5e93\u5305\u62ec\u5bf9POSIX\u64cd\u4f5c\u7cfb\u7edf(Linux\u3001MacOSX\u3001FreeBSD\u7b49)\u3001Windows\u3001Android\u548c\u8bb8\u591a\u88f8\u673a\u5fae\u63a7\u5236\u5668\u7cfb\u7edf(\u89c1\u4e0b\u6587)\u7684\u652f\u6301\u3002\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5b9e\u73b0\u5230\u5176\u4ed6\u7cfb\u7edf\u7684\u79fb\u690d\u3002POSIX\u7aef\u53e3(\u6635\u79f0\u4e3aUnix\u7aef\u53e3)\u662fPycopy\u7684\u53c2\u8003\u7aef\u53e3\u3002\n\u5c31\u50cf\u5de8\u87d2\u4e00\u6837\uff0cPycopy\u4e5f\u6709\u5b83\u7684\u7985\u5b97\u3002Pycopy\u7684\u4e3b\u8981\u539f\u5219\u662f\u7b80\u5355\u3001\u7b80\u7ea6\u548c\u8f7b\u4fbf\u3002\n\u540c\u65f6\uff0cPycopy\u52aa\u529b\u6210\u4e3a\u4e00\u79cd\u5168\u6808\u8bed\u8a00\uff0c\u5e76\u4e0e\u66f4\u5e7f\u6cdb\u7684Python\u751f\u6001\u7cfb\u7edf\u517c\u5bb9\u3002Pycopy\u9879\u76ee\u4ee5\u4e00\u79cd\u5e7f\u4e3a\u4eba\u77e5\u7684\u4f18\u96c5\u65b9\u5f0f\u89e3\u51b3\u4e86\u8fd9\u4e9b\u770b\u4f3c\u51b2\u7a81\u7684\u76ee\u6807\uff1a\u5b83\u662f\u4e00\u4e2a\u591a\u7ea7\u9879\u76ee\uff0c\u5e76\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u914d\u7f6e\u9009\u9879\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6709\u4e00\u4e2a\u7528C\u7f16\u5199\u7684\u5b9a\u4e49\u826f\u597d\u7684\u8f7b\u91cf\u7ea7\u6838\u5fc3\uff0c\u5b9a\u4e49\u4e86\u539f\u751fPycopy\u8bed\u8a00\u3002\u5728\u5b83\u4e4b\u4e0a\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a\u9009\u9879\uff0c\u5b9e\u73b0\u4e86\u989d\u5916\u7684\u529f\u80fd(\u901a\u5e38\u4f1a\u63d0\u4f9b\u66f4\u591a\u7684CPython\u517c\u5bb9\u6027)\u3002\u4f8b\u5982\uff0c\u5728\u6838\u5fc3\u4e4b\u4e0a\uff0c\u63d0\u4f9b\u4e86\u539f\u751fPycopy\u5185\u7f6e\u6a21\u5757\uff0c\u5b9a\u4e49\u4e86\u539f\u751fPycopy API\uff0c\u5b83\u63d0\u4f9b\u4e86CPython\u6a21\u5757\u529f\u80fd\u7684\u5b50\u96c6\uff0c\u540c\u65f6\u8fd8\u5bf9\u5176\u8fdb\u884c\u4e86\u4e00\u4e9b\u6269\u5c55(\u7531Pycopy\u7684\u9ad8\u6548\u76ee\u6807\u9a71\u52a8)\u3002\u8fd9\u4e9b\u539f\u751fPycopy\u6a21\u5757\u6709\u660e\u786e\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5141\u8bb8\u5b9e\u73b0\u4e0eCPython API\u5b8c\u5168\u517c\u5bb9\u7684\u6a21\u5757\uff0c\u800c\u65e0\u9700\u5bf9\u4e3b\u9879\u76ee\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\u3002\n\u5728\u8fd9\u4e2a\u4e3b\u8981\u9879\u76ee\u4e4b\u4e0a\uff0c\u8fd8\u6709\u4e00\u4e9b\u5355\u72ec\u7684\u9879\u76ee\u6765\u8fdb\u4e00\u6b65\u6269\u5c55Pycopy\u529f\u80fd\u5e76\u5b9e\u73b0\u5168\u6808\u751f\u6001\u7cfb\u7edf\u3002\u4f8b\u5982\uff0c\u6709\u4e00\u4e2a\u4e3aPycopy\u5b9e\u73b0\u5b8c\u5168\u517c\u5bb9\u7684CPython\u6807\u51c6\u5e93\u7684sa pycopy-lib\u9879\u76ee(\u89c1\u4e0b\u6587)\u3002\n\u6700\u540e\uff0c\u5728\u8be5\u57fa\u7840\u8bbe\u65bd\u4e4b\u4e0a\uff0c\u6709\u4e00\u4e2a\u7531\u7b2c\u4e09\u65b9\u5305\u7ec4\u6210\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u5305\u7531Pycopy\u7528\u6237\u81ea\u5df1\u7ba1\u7406\u3002\n\u4f7f\u7528Pycopy\u7684\u827a\u672f\u5728\u4e8e\u4e86\u89e3\u67d0\u4e2a\u7279\u5b9a\u529f\u80fd\u7684\u5f52\u5c5e\u3002\u5c31\u50cfCPython\u4e00\u6837\uff0c\u5b83\u51e0\u4e4e\u4ece\u6765\u4e0d\u662f\u6838\u5fc3\u9879\u76ee\uff0c\u800c\u4e14\u51e0\u4e4e\u603b\u662f\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u7684\u7528\u6237\u3002\nports/STM32/-\u5728PyBoard\u548c\u7c7b\u4f3c\u7684STM32\u677f\u4e0a\u8fd0\u884c\u7684Pycopy\u7248\u672c(\u4f7f\u7528ST\u7684Cube HAL\u9a71\u52a8\u7a0b\u5e8f)\u3002\n\u7aef\u53e3/\u6700\u5c0f/-\u6700\u5c0f\u7aef\u53e3\u3002\u5982\u679c\u60a8\u60f3\u8981\u5c06\u9879\u76ee\u79fb\u690d\u5230\u53e6\u4e00\u4e2a\u5fae\u63a7\u5236\u5668\uff0c\u8bf7\u4ece\u8fd9\u4e2a\u5f00\u59cb\u3002\ndocs/--Sphinx reStrucureText\u683c\u5f0f\u7684\u7528\u6237\u6587\u6863\u3002\u5448\u73b0\u7684HTML\u6587\u6863\u53ef\u4ee5\u5728http://pycopy.readthedocs.io/\u4e0a\u627e\u5230\u3002\n&#34\uff1bmake&#34\uff1b\u7528\u4e8e\u6784\u5efa\u7ec4\u4ef6\uff0c\u6216\u5728\u57fa\u4e8ebsd\u7684\u7cfb\u7edf\u4e0a\u6784\u5efa\u7ec4\u4ef6\u3002\u60a8\u8fd8\u9700\u8981bash\u3001GCC\u548cPython3.3+\u4f5c\u4e3a\u547d\u4ee4python3\u63d0\u4f9b(\u5982\u679c\u60a8\u7684\u7cfb\u7edf\u53ea\u6709Python2.7\uff0c\u5219\u4f7f\u7528\u9644\u52a0\u9009\u9879python=python2\u8c03\u7528make)\u3002\n\u5927\u591a\u6570\u7aef\u53e3\u90fd\u9700\u8981\u9996\u5148\u6784\u5efaPycopy\u4ea4\u53c9\u7f16\u8bd1\u5668\u3002\u8be5\u7a0b\u5e8f\u540d\u4e3ampy-Cross\uff0c\u7528\u4e8e\u5c06Python\u811a\u672c\u9884\u7f16\u8bd1\u4e3a.mpyfile\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u5305\u542b(\u51bb\u7ed3)\u5230\u7aef\u53e3\u7684\u56fa\u4ef6/\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8981\u6784\u5efampy\u4ea4\u53c9\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a\nunix\u7aef\u53e3\u9700\u8981\u5177\u6709GCC\u548cGNU make\u7684\u6807\u51c6unix\u73af\u5883\u3002\u652f\u6301x86\u548cx64\u67b6\u6784(\u5373x86 32\u4f4d\u548c64\u4f4d)\uff0c\u4ee5\u53caARM\u548cMIPS\u3002\u8981\u5c06\u529f\u80fd\u9f50\u5168\u7684\u7aef\u53e3\u79fb\u690d\u5230\u53e6\u4e00\u4e2a\u67b6\u6784\uff0c\u9700\u8981\u7f16\u5199\u4e00\u4e9b\u6c47\u7f16\u4ee3\u7801\u6765\u8fdb\u884c\u5f02\u5e38\u5904\u7406\u548c\u5783\u573e\u56de\u6536\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8esetjmp/long jmp\u7684\u540e\u5907\u5b9e\u73b0\u3002\n$./pycopy&gt\uff1b&gt\uff1b&gt\uff1b\u5217\u8868(\u5bf9\u4e8e\u8303\u56f4(10)\u4e2d\u7684x\uff0c\u5bf9\u4e8e[4\uff0c2\uff0c1]\u4e2d\u7684y\uff0c\u5bf9\u4e8ex\uff0c\u4e3a5*x+y)\u3002\n\u4f7f\u7528CTRL-D(\u5373EOF)\u9000\u51fashell\u3002\u4e86\u89e3\u6709\u5173\u547d\u4ee4\u884c\u9009\u9879\u7684\u4fe1\u606f(\u7279\u522b\u662f\u5982\u4f55\u589e\u52a0\u8f83\u5927\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u7684\u5806\u5927\u5c0f)\uff1a\n\u6309\u7167\u4e0a\u8ff0\u8bf4\u660e\u6784\u5efa\u7684Pycopy\u53ef\u6267\u884c\u6587\u4ef6\u662f\u672c\u673aPycopy\u8f6f\u4ef6\u7684\u751f\u4ea7\u53ef\u6267\u884c\u6587\u4ef6\u3002\u8fd8\u53ef\u4ee5\u6784\u5efapycopdev\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u63d0\u4f9b\u989d\u5916\u7684\u53cd\u5c04\u3001\u8bca\u65ad\u548c\u53ef\u6269\u5c55\u6027\u529f\u80fd\uff0c\u4f46\u4ee3\u4ef7\u662f\u4ee3\u7801\u5927\u5c0f\u548c\u5185\u5b58\u4f7f\u7528\u6548\u7387\u3002\u7279\u522b\u662f\uff0cpycopy-dev\u4e0e\u4e3aCPython\u7f16\u5199\u7684\u8f6f\u4ef6\u66f4\u52a0\u517c\u5bb9\u3002\u8981\u6784\u5efapycopy-devariant\uff0c\u8fd0\u884cmake dev\u3002\nUnix\u7aef\u53e3\u9700\u8981libffi\u5e93\u548cpkg-config\u5de5\u5177\u3002\u5728Debian/Ubuntu/Mint\u6d3e\u751fLinux\u53d1\u884c\u7248\u4e0a\uff0c\u5b89\u88c5build-Essential(\u5305\u62ec\u5de5\u5177\u94fe\u548cmake)\u3001libffi-dev\u548cpkg-config\u5305\u3002\n\u5176\u4ed6\u4f9d\u8d56\u9879\u53ef\u4ee5\u4e0ePycopy\u4e00\u8d77\u6784\u5efa\u3002\u8fd9\u53ef\u80fd\u662f\u542f\u7528\u989d\u5916\u7279\u6027\u6216\u529f\u80fd\u6240\u5fc5\u9700\u7684\uff0c\u5728\u6700\u8fd1\u7684\u7248\u672c\u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u542f\u7528\u8fd9\u4e9b\u7279\u6027\u6216\u529f\u80fd\u3002\u8981\u6784\u5efa\u8fd9\u4e9b\u9644\u52a0\u4f9d\u8d56\u9879\uff0c\u8bf7\u9996\u5148\u83b7\u53d6\u5b83\u4eec\u7684git\u5b50\u6a21\u5757\uff1a\n\u8fd9\u5c06\u83b7\u53d6\u7aef\u53e3\u9700\u8981\u7684\u6240\u6709\u76f8\u5173\u7684git\u5b50\u6a21\u5757(\u5b50\u5b58\u50a8\u5e93)\u3002\u4f7f\u7528\u76f8\u540c\u7684\u547d\u4ee4\u83b7\u53d6\u5b50\u6a21\u5757\u7684\u6700\u65b0\u7248\u672c\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u4e0d\u65f6\u66f4\u65b0\u3002\u5728\u6267\u884c\u4e4b\u540e\uff1a\n\u8fd9\u5c06\u6784\u5efa\u6240\u6709\u53ef\u7528\u7684\u4f9d\u8d56\u9879(\u65e0\u8bba\u662f\u5426\u4f7f\u7528\u5b83\u4eec)\u3002\u5982\u679c\u60a8\u6253\u7b97\u4f7f\u7528\u989d\u5916\u7684\u9009\u9879(\u5982\u4ea4\u53c9\u7f16\u8bd1)\u6784\u5efaPycopy\uff0c\u5219\u5e94\u8be5\u4f20\u9012\u76f8\u540c\u7684\u9009\u9879\u96c6\u6765\u751f\u6210dedeib\u3002\u8981\u5b9e\u9645\u542f\u7528/\u7981\u7528\u4f9d\u8d56\u9879\u7684\u4f7f\u7528\uff0c\u8bf7\u7f16\u8f91port/unix/mpconfigport.mk\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5305\u542b\u9009\u9879\u7684\u5185\u8054\u8bf4\u660e\u3002\u4f8b\u5982\uff0c\u8981\u6784\u5efaSSL\u6a21\u5757(\u4e0a\u8ff0upip\u5de5\u5177\u9700\u8981\uff0c\u56e0\u6b64\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5904\u4e8e\u542f\u7528\u72b6\u6001)\uff0cMICROPY_PY_USSL\u5e94\u8bbe\u7f6e\u4e3a1\u3002\n\u5bf9\u4e8e\u67d0\u4e9b\u7aef\u53e3\uff0c\u6784\u5efa\u6240\u9700\u7684\u4f9d\u8d56\u9879\u662f\u900f\u660e\u7684\uff0c\u5e76\u4e14\u662f\u81ea\u52a8\u8fdb\u884c\u7684\u3002\u4f46\u662f\u5b83\u4eec\u4ecd\u7136\u9700\u8981\u4f7f\u7528make submodule\u547d\u4ee4\u6765\u83b7\u53d6\u3002", "note_en": "Pycopy aims to develop and maintain a  minimalist, lightweight,and extensible implementation of Python(-compatible) language.Pycopy to CPython is a similar thing as Schemeto  Common Lisp.Pycopy works similarly well in the cloud, on desktop systems, on smallembedded systems, and scales all the way down to microcontrollers. Theproject is developed and maintained by Paul Sokolovsky and is originallybased on  MicroPython, developed by Damien George,Paul Sokolovsky and contributors. Names &#34;Pycopy&#34; and &#34;MicroPython&#34; areused interchangeably in the project documentation and source code.\n WARNING: this project is in beta stage and is subject to changes of thecode-base, including project-wide name changes and API changes.\n Pycopy implements the entire Python 3.4 syntax (including exceptions, with,  yield from, etc., and additionally  async/ await keywords fromPython 3.5). The following core datatypes are provided:  str (includingbasic Unicode support),  bytes,  bytearray,  tuple,  list,  dict,  set, frozenset,  array.array,  collections.namedtuple, classes and instances.Builtin modules include  sys,  time, and  struct, etc. Select ports havesupport for  _thread module (multithreading). Note that only a subset ofPython 3 functionality is implemented for the data types and modules.\n Pycopy can execute scripts in textual source form or from precompiledbytecode, in both cases either from an on-device filesystem or &#34;frozen&#34; intothe executable.\n Pycopy is highly portable, and the main repository includes support forPOSIX operating systems (Linux, MacOSX, FreeBSD, etc.), Windows, Android,and a number of bare-metal microcontroller systems (see below). Ports toother systems can be implemented easily. POSIX port (nicknamed &#34;Unix port&#34;)is the reference port of Pycopy.\n  Just as &#34;big Python&#34;, Pycopy hasits &#34;Zen&#34;. The main principles of Pycopy are  simplicity,  minimalism,and  light-weightedness.\n At the same time, Pycopy strives to be a full-stack language andbe compatible with wider Python ecosystem. The Pycopy project resolvesthese seemingly conflicting goals in a well-known and elegant way: bybeing a multi-level project, and by providing flexible configuration options.Specifically, there&#39;s a well-defined lightweight core written in C,defining the &#34;native Pycopy language&#34;. Above it, a number of options areprovided, implementing additional functionality (oftentimes offering moreCPython compatibility). For example, on top of the core, &#34;native Pycopybuiltin modules&#34; are provided, defining the native Pycopy API, whichprovides a subset of CPython&#39;s modules functionality, and at the same time,some extensions to it (driven by Pycopy&#39;s goal to be efficient). These nativePycopy modules are clearly namespaced, to allow to implement modules fullycompatible with CPython API without any changes to the main project.\n On top of this primary project, there are separate projects to further extendPycopy functionality and achieve full-stack ecosystem. For example, there&#39;sa  pycopy-lib project (see below) toimplement a fully compatible CPython standard library for Pycopy.\n Finally, on top of that infrastructure, there is an ecosystem of third-partypackages, which are managed by the Pycopy users themselves.\n The art of working with Pycopy is to understand where a particular featurebelongs. Just as with CPython, it&#39;s almost never the core project, and almostalways users&#39; third party packages.\n    ports/stm32/ -- a version of Pycopy that runs on the PyBoard and similarSTM32 boards (using ST&#39;s Cube HAL drivers).\n ports/minimal/ -- a minimal port. Start with this if you wantto port the project to another microcontroller.\n  docs/ -- user documentation in Sphinx reStructuredText format. RenderedHTML documentation is available at  http://pycopy.readthedocs.io/ .\n    &#34;make&#34; is used to build the components, or &#34;gmake&#34; on BSD-based systems.You will also need bash, gcc, and Python 3.3+ available as the command  python3(if your system only has Python 2.7 then invoke make with the additional option PYTHON=python2).\n  Most ports require the Pycopy cross-compiler to be built first. Thisprogram, called mpy-cross, is used to pre-compile Python scripts to .mpyfiles which can then be included (frozen) into the firmware/executable fora port. To build mpy-cross use:\n   The &#34;unix&#34; port requires a standard Unix environment with gcc and GNU make.x86 and x64 architectures are supported (i.e. x86 32- and 64-bit), as wellas ARM and MIPS. Making full-featured port to another architecture requireswriting some assembly code for the exception handling and garbage collection.Alternatively, fallback implementation based on setjmp/longjmp can be used.\n    $ ./pycopy&gt;&gt;&gt; list(5 * x + y for x in range(10) for y in [4, 2, 1])\n Use  CTRL-D (i.e. EOF) to exit the shell.Learn about command-line options (in particular, how to increase heap sizewhich may be needed for larger applications):\n       pycopy executable built following the instructions above is a&#34;production&#34; executable for native Pycopy software. It&#39;s also possibleto build  pycop-dev executable which provides additional reflection,diagnostics, and extensibility capabilities, at the expense of codesize and memory usage efficiency. In particular,  pycopy-dev is morecompatible with software written for CPython. To build the  pycopy-devvariant, run  make dev.\n   For Unix port,  libffi library and  pkg-config tool are required. OnDebian/Ubuntu/Mint derivative Linux distros, install  build-essential(includes toolchain and make),  libffi-dev, and  pkg-config packages.\n Other dependencies can be built together with Pycopy. This maybe required to enable extra features or capabilities, and in recentversions, these may be enabled by default. To buildthese additional dependencies, first fetch git submodules for them:\n  This will fetch all the relevant git submodules (sub repositories) thatthe port needs. Use the same command to get the latest versions ofsubmodules as they are updated from time to time. After that execute:\n  This will build all available dependencies (regardless whether theyare used or not). If you intend to build Pycopy with additionaloptions (like cross-compiling), the same set of options should be passedto  make deplibs. To actually enable/disable use of dependencies, edit ports/unix/mpconfigport.mk file, which has inline descriptions of the options.For example, to build SSL module (required for  upip tool described above,and so enabled by default),  MICROPY_PY_USSL should be set to 1.\n For some ports, building required dependences is transparent, and happensautomatically. But they still need to be fetched with the  make submodulescommand.\n  Pycopy is an open-source project and welcomes contributions which are alignedwith its paradigm and work process. To be productive, please be sure to follow the Contributors&#39; Guidelinesand the  Code Conventions.Note that Pycopy is licenced under the MIT license, and all contributionsshould follow this license.\n   A: I was a co-maintainer of MicroPython from 2013-12-29 till 2017-12-27,and authored 2779 commits during that time, that&#39;s more than 30% of commitsat that timeframe( prooflink).Many MicroPython&#39;s modules and subsystems were designed and implemented byme. After I lost commit access to the main repository, I continue my workhere.\n  A: I rebase on the upstream regularly. However, I revert/skip commits whichare going in wrong direction with respect to Pycopy&#39;s goals (see &#34;Zen&#34; above),or not implemented thoroughly enough. I no longer contribute to upstreamdirectly, due to upstream&#39;s failure to recognize me as a major contributorand uphold my copyright accordingly.", "posttime": "2020-06-09 18:33:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5b58,python,\u8282\u7701,minimalist,pycopy", "title": "Pycopy-\u6700\u4f4e\u9650\u5ea6\u4e14\u8282\u7701\u5185\u5b58\u7684Python\u5b9e\u73b0", "title_en": "Pycopy \u2013 a minimalist and memory-efficient Python implementation", "transed": 1, "url": "https://github.com/pfalcon/pycopy", "via": "", "real_tags": ["\u5185\u5b58", "python", "\u8282\u7701", "pycopy"]}, {"category": "", "categoryclass": "", "imagename": "878801d03bc84368d6c63a3928ba77c5.jpg", "infoid": 1005829, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6309\u7167\u5730\u7403\u7684\u6807\u51c6\uff0c\u571f\u661f\u7684\u536b\u661f\u571f\u536b\u516d\u662f\u4e00\u4e2a\u5947\u602a\u7684\u5730\u65b9\u3002\u571f\u536b\u516d\u6bd4\u6c34\u661f\u8fd8\u5927\uff0c\u5b83\u5305\u88f9\u5728\u539a\u539a\u7684\u5927\u6c14\u5c42\u4e2d(\u5b83\u662f\u592a\u9633\u7cfb\u4e2d\u552f\u4e00\u6709\u539a\u539a\u5927\u6c14\u5c42\u7684\u536b\u661f)\uff0c\u8986\u76d6\u7740\u7532\u70f7\u548c\u4e59\u70f7\u7b49\u6db2\u6001\u78b3\u6c22\u5316\u5408\u7269\u7684\u6cb3\u6d41\u548c\u6d77\u6d0b\u3002\u4e0b\u9762\u662f\u539a\u539a\u7684\u6c34\u51b0\u5916\u58f3\uff0c\u4e0b\u9762\u53ef\u80fd\u662f\u6db2\u6001\u6c34\u6d77\u6d0b\uff0c\u53ef\u80fd\u8574\u85cf\u7740\u751f\u547d\u3002\u73b0\u5728\uff0c\u6570\u5341\u5e74\u7684\u6d4b\u91cf\u548c\u8ba1\u7b97\u663e\u793a\uff0c\u6cf0\u5766\u56f4\u7ed5\u571f\u661f\u7684\u8f68\u9053\u6b63\u5728\u81a8\u80c0--\u4e5f\u5c31\u662f\u8bf4\uff0c\u6708\u7403\u79bb\u571f\u661f\u8d8a\u6765\u8d8a\u8fdc--\u901f\u5ea6\u5927\u7ea6\u662f\u9884\u671f\u7684100\u500d\u3002\u7814\u7a76\u8868\u660e\uff0c\u571f\u536b\u516d\u8bde\u751f\u4e8e\u8ddd\u79bb\u571f\u661f\u66f4\u8fd1\u7684\u5730\u65b9\uff0c\u5e76\u572845\u4ebf\u5e74\u7684\u65f6\u95f4\u91cc\u8fc1\u79fb\u5230\u76ee\u524d120\u4e07\u516c\u91cc(\u7ea674.6\u4e07\u82f1\u91cc)\u7684\u8ddd\u79bb\u3002\n\u8fd9\u4e00\u53d1\u73b0\u53d1\u8868\u57286\u67088\u65e5\u51fa\u7248\u7684\u201c\u81ea\u7136\u00b7\u5929\u6587\u5b66\u201d\u6742\u5fd7\u4e0a\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u3002\n\u52a0\u5dde\u7406\u5de5\u5b66\u9662\u7406\u8bba\u5929\u4f53\u7269\u7406\u5b66\u52a9\u7406\u6559\u6388\u3001\u8fd9\u7bc7\u65b0\u8bba\u6587\u7684\u5408\u8457\u8005\u3001\u52a0\u5dde\u7406\u5de5\u5b66\u9662\u7684\u5409\u59c6\u00b7\u5bcc\u52d2(Jim Fuller)\u8868\u793a\uff0c\u5927\u591a\u6570\u5148\u524d\u7684\u5de5\u4f5c\u90fd\u9884\u6d4b\uff0c\u50cf\u571f\u536b\u516d\u6216\u6728\u661f\u7684\u536b\u661f\u5361\u5229\u65af\u6258(Callisto)\u8fd9\u6837\u7684\u536b\u661f\u662f\u5728\u4e0e\u6211\u4eec\u73b0\u5728\u770b\u5230\u7684\u8f68\u9053\u8ddd\u79bb\u76f8\u4f3c\u7684\u8f68\u9053\u8ddd\u79bb\u5f62\u6210\u7684\u3002\u8fd9\u610f\u5473\u7740\u571f\u661f\u536b\u661f\u7cfb\u7edf\uff0c\u53ef\u80fd\u8fd8\u6709\u5b83\u7684\u5149\u73af\uff0c\u5df2\u7ecf\u5f62\u6210\u548c\u6f14\u5316\u5f97\u6bd4\u4ee5\u524d\u8ba4\u4e3a\u7684\u66f4\u6709\u6d3b\u529b\u3002\n\u8981\u4e86\u89e3\u8f68\u9053\u8fc1\u79fb\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u770b\u6211\u4eec\u81ea\u5df1\u7684\u536b\u661f\u3002\u5730\u7403\u7684\u536b\u661f\u5728\u7ed5\u5730\u7403\u8fd0\u884c\u65f6\u5bf9\u5b83\u65bd\u52a0\u4e86\u4e00\u4e2a\u5c0f\u7684\u5f15\u529b\u3002\u8fd9\u5c31\u662f\u5f15\u8d77\u6f6e\u6c50\u7684\u539f\u56e0\uff1a\u6708\u7403\u6709\u8282\u594f\u7684\u62d6\u66f3\u5bfc\u81f4\u5730\u7403\u7684\u6d77\u6d0b\u4ece\u4e00\u8fb9\u5411\u53e6\u4e00\u8fb9\u9686\u8d77\u3002\u5730\u7403\u5185\u90e8\u7684\u6469\u64e6\u8fc7\u7a0b\u5c06\u5176\u4e2d\u7684\u4e00\u4e9b\u80fd\u91cf\u8f6c\u5316\u4e3a\u70ed\u91cf\uff0c\u626d\u66f2\u4e86\u5730\u7403\u7684\u5f15\u529b\u573a\uff0c\u4f7f\u6708\u7403\u5728\u5176\u8f68\u9053\u4e0a\u5411\u524d\u79fb\u52a8\u3002\u8fd9\u5bfc\u81f4\u6708\u7403\u83b7\u5f97\u80fd\u91cf\uff0c\u5e76\u4ee5\u6bcf\u5e74\u7ea63.8\u5398\u7c73\u7684\u901f\u5ea6\u9010\u6e10\u8fdc\u79bb\u5730\u7403\u3002\u7136\u800c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u786e\u5b9e\u662f\u6e10\u8fdb\u7684\uff1b\u5927\u7ea660\u4ebf\u5e74\u540e\uff0c\u5730\u7403\u4e0d\u4f1a\u5931\u53bb\u6708\u7403\uff0c\u76f4\u5230\u5730\u7403\u548c\u592a\u9633\u90fd\u88ab\u541e\u6ca1\u3002\n\u571f\u536b\u516d\u5bf9\u571f\u661f\u65bd\u52a0\u4e86\u7c7b\u4f3c\u7684\u62c9\u529b\uff0c\u4f46\u7531\u4e8e\u571f\u661f\u7684\u6c14\u4f53\u7ec4\u6210\uff0c\u901a\u5e38\u8ba4\u4e3a\u571f\u661f\u5185\u90e8\u7684\u6469\u64e6\u8fc7\u7a0b\u6bd4\u5730\u7403\u5185\u90e8\u7684\u6469\u64e6\u8fc7\u7a0b\u5f31\u3002\u6807\u51c6\u7406\u8bba\u9884\u6d4b\uff0c\u7531\u4e8e\u8ddd\u79bb\u571f\u661f\u7684\u8ddd\u79bb\uff0c\u571f\u536b\u516d\u6bcf\u5e74\u6700\u591a\u4f1a\u4ee50.1\u5398\u7c73\u7684\u7f13\u6162\u901f\u5ea6\u8fc1\u79bb\u3002\u4f46\u65b0\u7684\u7ed3\u679c\u4e0e\u8fd9\u4e00\u9884\u6d4b\u76f8\u77db\u76fe\u3002\n\u5728\u201c\u81ea\u7136\u00b7\u5929\u6587\u5b66\u201d\u7684\u8bba\u6587\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u8fd9\u9879\u5de5\u4f5c\uff0c\u4e24\u7ec4\u7814\u7a76\u4eba\u5458\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\u572810\u5e74\u7684\u65f6\u95f4\u91cc\u6d4b\u91cf\u4e86\u571f\u536b\u516d\u7684\u8f68\u9053\u3002\u4e00\u79cd\u540d\u4e3a\u5929\u4f53\u6d4b\u91cf\u5b66\u7684\u6280\u672f\u7cbe\u786e\u6d4b\u91cf\u4e86\u5361\u897f\u5c3c\u53f7\u822a\u5929\u5668\u62cd\u6444\u7684\u56fe\u50cf\u4e2d\u6cf0\u5766\u76f8\u5bf9\u4e8e\u80cc\u666f\u6052\u661f\u7684\u4f4d\u7f6e\u3002\u53e6\u4e00\u79cd\u6280\u672f\uff0c\u8f90\u5c04\u6d4b\u91cf\u6cd5\uff0c\u6d4b\u91cf\u4e86\u5361\u897f\u5c3c\u53f7\u7684\u901f\u5ea6\uff0c\u56e0\u4e3a\u5b83\u53d7\u5230\u6cf0\u5766\u5f15\u529b\u7684\u5f71\u54cd\u3002\n\u8fd9\u9879\u7814\u7a76\u7684\u7b2c\u4e00\u4f5c\u8005\u3001\u66fe\u4f9b\u804c\u4e8e\u55b7\u6c14\u63a8\u8fdb\u5b9e\u9a8c\u5ba4(\u52a0\u5dde\u7406\u5de5\u5b66\u9662\u4e3aNASA\u7ba1\u7406)\u7684\u74e6\u83b1\u91cc\u00b7\u83b1\u5c3c(Val\u00e9ry Lainey)\u8bf4\uff0c\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u6570\u636e\u96c6--\u5929\u4f53\u6d4b\u91cf\u5b66\u548c\u8f90\u5c04\u5b66--\u4ee5\u53ca\u4e24\u79cd\u4e0d\u540c\u7684\u5206\u6790\u65b9\u6cd5\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u5b8c\u5168\u4e00\u81f4\u7684\u7ed3\u679c\u3002\u83b1\u5c3c\u73b0\u5728\u4f9b\u804c\u4e8e\u5df4\u9ece\u5929\u6587\u53f0(PSL University)\u3002\u5170\u5c3c\u5728\u5929\u4f53\u6d4b\u91cf\u961f\u5de5\u4f5c\u3002\n\u8fd9\u4e00\u7ed3\u679c\u4e5f\u4e0e\u5bcc\u52d2\u57282016\u5e74\u63d0\u51fa\u7684\u7406\u8bba\u4e00\u81f4\uff0c\u5bcc\u52d2\u9884\u6d4b\u6cf0\u5766\u7684\u8fc1\u5f99\u901f\u5ea6\u5c06\u6bd4\u6807\u51c6\u6f6e\u6c50\u7406\u8bba\u4f30\u8ba1\u7684\u8981\u5feb\u5f97\u591a\u3002\u4ed6\u7684\u7406\u8bba\u6307\u51fa\uff0c\u571f\u536b\u516d\u9884\u8ba1\u4f1a\u4ee5\u7279\u5b9a\u7684\u9891\u7387\u5bf9\u571f\u661f\u8fdb\u884c\u5f15\u529b\u6324\u538b\uff0c\u4f7f\u5730\u7403\u5f3a\u70c8\u632f\u8361\uff0c\u7c7b\u4f3c\u4e8e\u5728\u6b63\u786e\u7684\u65f6\u673a\u6446\u52a8\u53cc\u817f\u53ef\u4ee5\u628a\u4f60\u63a8\u5f97\u8d8a\u6765\u8d8a\u9ad8\u3002\u8fd9\u79cd\u6f6e\u6c50\u5f3a\u8feb\u7684\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u5171\u632f\u9501\u5b9a\u3002\u5bcc\u52d2\u63d0\u51fa\uff0c\u571f\u661f\u632f\u8361\u7684\u9ad8\u632f\u5e45\u5c06\u8017\u6563\u5927\u91cf\u80fd\u91cf\uff0c\u8fd9\u53cd\u8fc7\u6765\u4f1a\u5bfc\u81f4\u571f\u536b\u516d\u4ee5\u6bd4\u4e4b\u524d\u60f3\u8c61\u7684\u66f4\u5feb\u7684\u901f\u5ea6\u5411\u5916\u8fc1\u79fb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e24\u9879\u89c2\u6d4b\u90fd\u53d1\u73b0\uff0c\u571f\u536b\u516d\u6b63\u4ee5\u6bcf\u5e7411\u5398\u7c73\u7684\u901f\u5ea6\u8fc1\u79bb\u571f\u661f\uff0c\u6bd4\u4e4b\u524d\u7406\u8bba\u9884\u6d4b\u7684\u901f\u5ea6\u5feb100\u591a\u500d\u3002\n\u5171\u632f\u9501\u5b9a\u7406\u8bba\u53ef\u4ee5\u5e94\u7528\u4e8e\u8bb8\u591a\u5929\u4f53\u7269\u7406\u7cfb\u7edf\u3002\u5bcc\u52d2\u8bf4\uff0c\u6211\u73b0\u5728\u6b63\u5728\u505a\u4e00\u4e9b\u7406\u8bba\u5de5\u4f5c\uff0c\u770b\u770b\u53cc\u661f\u7cfb\u7edf\u6216\u7cfb\u5916\u884c\u661f\u7cfb\u7edf\u662f\u5426\u4f1a\u53d1\u751f\u540c\u6837\u7684\u7269\u7406\u73b0\u8c61\u3002\n\u8fd9\u7bc7\u8bba\u6587\u7684\u6807\u9898\u662f\u201c\u6cf0\u5766\u8f68\u9053\u7684\u5feb\u901f\u81a8\u80c0\u8868\u660e\u5de8\u578b\u884c\u661f\u7684\u5171\u632f\u9501\u5b9a\u201d\u3002\u66f4\u591a\u4fe1\u606f\uff1aVal\u00e9ry Lainey\u7b49\u4eba\u3002\u5de8\u578b\u884c\u661f\u7684\u5171\u632f\u9501\u5b9a\uff1a\u6cf0\u5766\u8f68\u9053\u7684\u5feb\u901f\u81a8\u80c0\uff0c\u201c\u81ea\u7136\u5929\u6587\u5b66\u201d(2020)\u3002\u7535\u8bdd\uff1a10.1038/s415500201120-5", "note_en": "By Earthly standards, Saturn&#39;s moon Titan is a strange place. Larger than the planet Mercury, Titan is swaddled in a thick atmosphere (it is the only moon in the solar system to have one) and covered in rivers and seas of liquid hydrocarbons like methane and ethane. Beneath these is a thick crust of water ice, and beneath that may be a liquid water ocean that could potentially harbor life.    Now, decades of measurements and calculations have revealed that Titan&#39;s orbit around Saturn is expanding\u2014meaning, the moon is getting farther and farther away from the planet\u2014at a rate about 100 times faster than expected. The research suggests that Titan was born much closer to Saturn and migrated out to its current distance of 1.2 million kilometers (about 746,000 miles) over 4.5 billion years.\n  The findings are described in a paper that appears in the journal  Nature Astronomy on June 8.\n  &#34;Most prior work had predicted that moons like Titan or Jupiter&#39;s moon Callisto were formed at an orbital distance similar to where we see them now,&#34; says Caltech&#39;s Jim Fuller, assistant professor of theoretical astrophysics and co-author on the new paper. &#34;This implies that the Saturnian moon system, and potentially its rings, have formed and evolved more dynamically than previously believed.&#34;\n  To understand the basics of orbital migration, we can look to our own moon. Earth&#39;s moon exerts a small gravitational pull on the planet as it orbits. This is what causes tides: the moon&#39;s rhythmic tugs cause Earth&#39;s oceans to bulge from side to side. Frictional processes inside the earth convert some of this energy into heat, distorting the earth&#39;s gravitational field so that it pulls the moon forward in its orbit. This causes the moon to gain energy and gradually move farther away from the earth, at a rate of about 3.8 centimeters per year. This process truly is gradual, though; Earth will not &#34;lose&#34; the moon until both the earth and   are engulfed by the sun in roughly six billion years.\n  Titan exerts a similar pull on Saturn, but the frictional processes inside Saturn are usually thought to be weaker than those within Earth because of Saturn&#39;s gaseous composition. Standard theories predict that, because of its distance from Saturn, Titan should be migrating away at a sluggish rate of at most 0.1 centimeters per year. But the new results contradict this prediction.\n  In the work detailed in the Nature Astronomy paper, two teams of researchers each used a different technique to measure Titan&#39;s orbit over a period of 10 years. One technique, called astrometry, produced precise measurements of Titan&#39;s position relative to background stars in images taken by the Cassini spacecraft. The other technique, radiometry, measured Cassini&#39;s velocity as it was affected by the gravitational influence of Titan.\n  &#34;By using two completely independent data sets\u2014astrometric and radiometric\u2014and two different methods of analysis, we obtained results that are in full agreement,&#34; says the study&#39;s first author, Val\u00e9ry Lainey formerly of JPL (which Caltech manages for NASA), now of Paris Observatory, PSL University. Lainey worked with the astrometry team.\n  The results are also in agreement with a theory proposed in 2016 by Fuller, who predicted that Titan&#39;s migration rate would be much faster than standard tidal theories estimated. His theory notes that Titan is expected to gravitationally squeeze Saturn with a particular frequency that makes the planet oscillate strongly, similarly to how swinging your legs on a swing with the right timing can drive you higher and higher. This process of tidal forcing is called resonance locking. Fuller proposed that the high amplitude of Saturn&#39;s oscillation would dissipate a lot of energy, which in turn would cause Titan to migrate outward away from the planet at a faster rate than previously thought. Indeed, the observations both found that Titan is migrating away from Saturn at a rate of 11 centimeters per year, more than 100 times faster than previous theories predicted.\n  &#34;The resonance locking theory can apply to many astrophysical systems. I&#39;m now doing some theoretical work to see if the same physics can happen in binary star systems, or exoplanet systems,&#34; says Fuller.\n  The paper is titled &#34;Resonance locking in giant planets indicated by the rapid orbital expansion of Titan.&#34;        More information:\t\t\t\t\t\t\t\t\t\t\t\tVal\u00e9ry Lainey et al. Resonance locking in giant planets indicated by the rapid orbital expansion of Titan,  Nature Astronomy (2020).  DOI: 10.1038/s41550-020-1120-5", "posttime": "2020-06-09 17:13:00", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8fc1\u79bb,migrating,\u571f\u661f", "title": "\u571f\u536b\u516d\u6b63\u5728\u4ee5\u6bd4\u5148\u524d\u9884\u6d4b\u5feb100\u500d\u7684\u901f\u5ea6\u8fc1\u79bb\u571f\u661f", "title_en": "Titan Is Migrating Away From Saturn 100 Times Faster Than Previously Predicted", "transed": 1, "url": "https://phys.org/news/2020-06-titan-migrating-saturn-faster-previously.html", "via": "", "real_tags": ["\u8fc1\u79bb", "migrating", "\u571f\u661f"]}, {"category": "", "categoryclass": "", "imagename": "f9f56deba5490e50333342928cf53a98.jpg", "infoid": 1005828, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u603b\u7edf\u7ee7\u7eed\u5931\u53bb\u5bf9\u7f8e\u56fd\u7684\u6cd5\u897f\u65af\u4e3b\u4e49\u63a7\u5236\uff0c\u4ed6\u5bf9Netflix\u70ed\u95e8\u540c\u540d\u559c\u5267\u7684\u5b9d\u8d35\u7684\u592a\u7a7a\u529b\u91cf(Space Force)\u4e5f\u5728\u5931\u53bb\u63a7\u5236\u3002\u636e\u201c\u597d\u83b1\u575e\u62a5\u9053\u201d\u62a5\u9053\uff0c\u8fd9\u5bb6\u6d41\u5a92\u4f53\u5de8\u5934\u5728\u6b27\u6d32\u3001\u6fb3\u5927\u5229\u4e9a\u3001\u58a8\u897f\u54e5\u548c\u5176\u4ed6\u5730\u65b9\u83b7\u5f97\u4e86Space Force\u7684\u5546\u6807\u6743\uff0c\u51fb\u8d25\u4e86\u7f8e\u56fd\u653f\u5e9c\u3002\n\u90a3\u7f8e\u56fd\u5462\uff1f\u95ee\u5f97\u597d\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u7a7a\u519b\u6709\u4e00\u4efd\u57fa\u4e8e\u4f7f\u7528\u610f\u56fe\u7684\u60ac\u800c\u672a\u51b3\u7684\u7533\u8bf7\uff0c\u5c3d\u7ba1\u8fd8\u6ca1\u6709\u6b63\u5f0f\u516c\u5e03\u3002\u7f8e\u56fd\u5b9e\u884c\u7684\u662f\u201c\u5148\u7528\u5148\u7528\u201d\u7684\u5546\u6807\u6ce8\u518c\u5236\u5ea6\uff0c\u8fd9\u79cd\u5236\u5ea6\u662f\u57fa\u4e8e\u5546\u4e1a\u7684\u5b9e\u9645\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u50cf\u4e16\u754c\u4e0a\u5176\u4ed6\u4efb\u4f55\u56fd\u5bb6\u4e00\u6837\uff0c\u53cd\u5bf9\u5148\u5230\u5148\u670d\u52a1\u3002\u5c31Netflix\u800c\u8a00\uff0c\u65e9\u57282019\u5e741\u6708\uff0c\u4ed6\u4eec\u5c31\u5f00\u59cb\u63d0\u4ea4Space Force\u7684\u5546\u6807\u7533\u8bf7\u3002\n\u6240\u6709\u8fd9\u4e9b\u90fd\u8868\u660e\uff0c\u5c3d\u7ba1\u6076\u641e\u53d7\u5230\u5546\u6807\u6cd5\u7684\u4fdd\u62a4\uff0c\u4f46\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f8e\u56fd\u548cNetflix\u4e4b\u95f4\u51fa\u73b0\u4e00\u4e9b\u6cd5\u5f8b\u4e0a\u7684\u80e1\u8a00\u4e71\u8bed\u3002\u201c\u597d\u83b1\u575e\u62a5\u9053\u201d\u4ee5\u96f6\u552e\u5e97\u51fa\u552e\u7684\u201c\u592a\u7a7a\u539f\u529b\u201d\u5957\u5934\u886b\u4e3a\u4f8b\uff1a\u201c\u8c01\u5728\u5356\uff1f\u7f8e\u56fd\u519b\u65b9\u8fd8\u662fNetflix\uff1f\u5546\u6807\u6709\u52a9\u4e8e\u6f84\u6e05\u5546\u54c1\u548c\u670d\u52a1\u7684\u6765\u6e90\u3002\u201c\u3002\n\u9274\u4e8e\u7279\u6717\u666e\u53d8\u5e7b\u83ab\u6d4b\u7684\u5929\u6027\uff0c\u4efb\u4f55\u4eba\u90fd\u4e0d\u77e5\u9053\u4ed6\u5728\u5f97\u77e5Netflix\u6b63\u5728\u5bfb\u6c42\u8d85\u8d8a\u4ed6\u5fc3\u7231\u7684\u592a\u7a7a\u90e8\u961f\u65f6\u4f1a\u4f5c\u4f55\u53cd\u5e94\u3002\u6b63\u5982\u5f8b\u5e08\u57c3\u5fb7\u00b7\u6c40\u5e03\u83b1\u514b\u544a\u8bc9\u597d\u83b1\u575e\u62a5\u9053\u8005\u6240\u8bf4\uff0c\u201c\u5728\u8fd9\u91cc\uff0c\u5206\u652f\u673a\u6784\u662f\u5982\u6b64\u65b0\uff0c\u884c\u653f\u90e8\u95e8\u5982\u6b64\u5546\u4e1a\u5316\uff0c\u603b\u53f8\u4ee4\u5982\u6b64\u5bfb\u6c42\u5173\u6ce8\uff0c\u6211\u4e0d\u786e\u5b9a\u6211\u4eec\u662f\u5426\u80fd\u5b8c\u5168\u77e5\u9053\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u201d\n\u4e0d\u8fc7\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u4e00\u5207\u987a\u5229\uff0c\u6b63\u5982\u4e00\u4f4d\u7a7a\u519b\u53d1\u8a00\u4eba\u544a\u8bc9\u8be5\u520a\u7269\u7684\u90a3\u6837\uff1a\u201c\u76ee\u524d\uff0c\u6211\u4eec\u6ca1\u6709\u610f\u8bc6\u5230\u4e0eNetflix\u5236\u4f5c\u7684\u865a\u6784\u8282\u76ee\u201d\u592a\u7a7a\u529b\u91cf\u201c(Space Force)\u6709\u4efb\u4f55\u5546\u6807\u51b2\u7a81\u3002\u6211\u4eec\u795d\u613fNetflix\u548c\u8be5\u8282\u76ee\u7684\u5236\u7247\u4eba\u5728\u521b\u9020\u6027\u5730\u63cf\u7ed8\u6211\u4eec\u56fd\u5bb6\u6700\u65b0\u7684\u519b\u4e8b\u90e8\u95e8\u65f6\u53d6\u5f97\u6700\u597d\u7684\u6210\u7ee9\u3002\u201c\u3002\n\u4e0d\u7528\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u53d1\u5c55\u4e2d\u7684\u6545\u4e8b\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u53f2\u8482\u592b\u00b7\u5361\u96f7\u5c14(Steve Carell)\u4e3b\u6f14\u7684\u8fd9\u90e8\u7535\u89c6\u5267\u76ee\u524d\u6b63\u5728Netflix\u4e0a\u6d41\u5a92\u4f53\u64ad\u653e\uff0c\u867d\u7136\u8fd9\u51e0\u4e4e\u4e0d\u503c\u5f97\u4f60\u82b1\u65f6\u95f4\uff0c\u4f46\u5f88\u9ad8\u5174\u77e5\u9053\u5b83\u7684\u5b58\u5728\u53ef\u80fd\u4f1a\u8ba9\u6211\u4eec\u7684\u7b28\u86cb\u6307\u6325\u5b98\u611f\u5230\u5934\u75bc\u3002\n\u7f16\u8005\u6309\uff1a\u6b64\u524d\uff0c\u6807\u9898\u9519\u8bef\u5730\u5c06\u5176\u79f0\u4e3a\u201c\u7248\u6743\u4e89\u593a\u6218\u201d\u3002\u81ea\u90a3\u4ee5\u540e\uff0c\u8fd9\u4e2a\u6807\u9898\u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u3002", "note_en": "As President Donald Trump continues to lose his fascist grip over America, so too does his precious Space Force over Netflix\u2019s  hit comedy-of-the-same-name. According to   The Hollywood Reporter, the streaming giant has beat the US government at securing trademark rights for  Space Force in Europe, Australia, Mexico, and elsewhere.\n What about America? Good question. So far, the Air Force has a pending application based on an intent to use, though nothing has been made official. The US operates on a \u201cfirst-to-use\u201d trademark registration system, which is based on actual use of commerce opposed to first come, first served like every other country around the world. For their part, Netflix began submitting trademark applications for  Space Force as early as January 2019.\n   All of which is to suggest that this  could lead to some legal mumbo jumbo between the US and Netflix, even despite parodies being protected under trademark law.  The Hollywood Reporter uses the example of a \u201cSpace Force\u201d jumper being sold in retail stores: \u201cWho\u2019s selling? The US military or Netflix? Trademarks help clarify the source of goods and services.\u201d\n Given Trump\u2019s unpredictable nature, it\u2019s anyone\u2019s guess how he\u2019ll react upon learning that Netflix is seeking to one up his beloved Space Force.\u00a0As attorney Ed Timberlake told  The Hollywood Reporter, \u201cHere, the branch is so new, and the executive branch so commercialized, and the commander in chief so attention-seeking, that I\u2019m not sure we can know quite what to expect.\u201d\n   So far, so good, though, as an Air Force spokesperson told the publication: \u201cAt this time, we are not aware of any trademark conflicts with the fictional program  Space Force produced by Netflix. We wish Netflix and the show\u2019s producers the best in their creative depiction of our nation\u2019s newest branch of the military.\u201d\n Needless to say, this is a developing story. Meanwhile, the Steve Carell-led series is currently streaming on Netflix, and while it\u2019s hardly worth your time, it\u2019s nice to know its mere existence may prove to be a headache for our schmucko commander.\n Editor\u2019s Note: Previously, the title erroneously called it a \u201ccopyright battle.\u201d The title has since been amended.", "posttime": "2020-06-09 17:12:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u7a7a,space,netflix", "title": "\u7279\u6717\u666e\u7684\u592a\u7a7a\u90e8\u961f\u5728\u65e9\u671f\u7684\u5546\u6807\u6218\u4e2d\u8f93\u7ed9\u4e86Netflix\u7684\u592a\u7a7a\u90e8\u961f", "title_en": "Trump\u2019s Space Force Loses Early Trademark Battle to Netflix\u2019s Space Force", "transed": 1, "url": "https://consequenceofsound.net/2020/06/trump-netflix-space-force-copyright/", "via": "", "real_tags": ["\u592a\u7a7a", "space", "netflix"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005827, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "=0\uff1bNORM_RAND\uff1a=x\uff1bEND\uff1b@*\\[9]\u538b\u7f29\u6570\u636e\u3002\u4e3a\u4e86\u6709\u6548\u5229\u7528\u5b58\u50a8\u7a7a\u95f4\uff0c\\MF\\\u5c06\u5176\u4e3b\u8981\u6570\u636e\u7ed3\u6784\u57fa\u4e8e|MEMORY_WORD|\uff0c\u8be5|MEMORY_WORD|\u5305\u542b\u4e00\u4e2a\u53ef\u80fd\u7f29\u653e\u7684(\u5e26\u7b26\u53f7)\u6574\u6570\uff0c\u6216\u8005\u5305\u542b\u5c11\u91cf\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u7684\u5927\u5c0f\u662f\u7528\u4e8e\u5b58\u50a8\u6574\u6570\u7684\u4e00\u534a\u6216\u56db\u5206\u4e4b\u4e00\u3002\u5982\u679c|x|\u662f|MEMORY_WORD|\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5219\u5b83\u6700\u591a\u5305\u542b\u56db\u4e2a\u53ef\u79f0\u4e3afollows\uff1a$$\\vbox{\\halign{\\hfil#&amp\uff1b#\\hfil&amp\uff1b#\\hfil\\cr|x|&amp\uff1b.|int|&amp\uff1b\u7684\u5b57\u6bb5\u3002(an|\u6574\u6570|)\\cr|x|&amp\uff1b.|sc|\\qquad&amp\uff1b(a|\u7f29\u653e|\u6574\u6570)\\cr|x.hh.lh|\uff0c|x.hh|&amp\uff1b.|rh|&amp\uff1b(\u4e24\u4e2a\u534a\u5b57\u6bb5)\\cr|x.h.b0|\uff0c|x.h.b1|\uff0c|x.hh|&amp\uff1b(\u4e24\u4e2a\u56db\u5b57\u6bb5\uff0c\u4e00\u4e2a\u3002\\qquad\\qquad\\qquad(\u56db\u4e2a\u56db\u5206\u5b57\u5b57\u6bb5)\\cr}}$$\u7f16\u5199\u8d77\u6765\u6709\u4e9b\u9ebb\u70e6\uff0c\u53ef\u8bfb\u6027\u4e5f\u4e0d\u662f\u5f88\u597d\uff0c\u4f46\u5c06\u4f7f\u7528\u5b8f\u6765\u4f7f\u7b26\u53f7\u66f4\u77ed\u3001\u66f4\u900f\u660e\u3002\u4e0b\u9762\u7684\\Pascal\\\u4ee3\u7801\u4f7f\u7528\u538b\u7f29\u53d8\u4f53\u8bb0\u5f55\u7ed9\u51fa\u4e86|MEMORY_WORD|\u53ca\u5176\u9644\u5c5e\u7c7b\u578b\u7684\u6b63\u5f0f\u5b9a\u4e49\u3002\\mf\\\u4e0d\u5047\u8bbe\u5b57\u4e2d\u5b57\u6bb5\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002\u7531\u4e8e\u6211\u4eec\u5047\u8bbe\u7684\u662f32\u4f4d\u6574\u6570\uff0c\u534a\u5b57\u5fc5\u987b\u81f3\u5c11\u5305\u542b16\u4f4d\uff0c\u56db\u5206\u5b57\u5fc5\u987b\u81f3\u5c11\u5305\u542b8\u4f4d\u3002@^\u7cfb\u7edf\u4f9d\u8d56\u9879@&gt\uff1b\u4f46\u662f\u6709\u66f4\u591a\u4f4d\u5e76\u4e0d\u4f1a\u6709\u4ec0\u4e48\u574f\u5904\uff1b\u4f8b\u5982\uff0c\u5982\u679c\u6709\u8db3\u591f\u768436\u4f4d\u5b57\uff0c|mem_max|\u53ef\u80fd\u4f1a\u50cf262142.nb\u4e00\u6837\u5927\u3002\u6ce8\uff1a\u9664\u975e\\mf\uff0c\u5426\u5219\u4f1a\u4e25\u91cd\u6d6a\u8d39\u5b9d\u8d35\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u4e00\u4e9b\\Pascal\\\u7f16\u8bd1\u5668\u4f1a\u5c06\u5b50\u8303\u56f4\u4e3a`|0..255|&#39\uff1b\u7684\u6574\u6570\u6253\u5305\u5230\u4e00\u4e2a\u516b\u4f4d\u5b57\u6bb5\u4e2d\uff0c\u800c\u53e6\u4e00\u4e9b\\Pascal\\\u7f16\u8bd1\u5668\u5219\u575a\u6301\u4e3a\u989d\u5916\u7684\u7b26\u53f7\u4f4d\u5206\u914d\u7a7a\u95f4\uff1b\u5728\u8fd9\u6837\u7684\u7cfb\u7edf\u4e0a\uff0c\u53ea\u6709\u5f53\u5b50\u8303\u56f4\u4e3a`|-128..127|&#39\uff1b\u65f6\uff0c\u60a8\u624d\u80fd\u5c06256\u4e2a\u503c\u6253\u5305\u5230\u4e00\u4e2a\u56db\u5b57\u4e2d\u3002\u76ee\u524d\u7684\u5b9e\u73b0\u8bd5\u56fe\u5bb9\u7eb3\u5c3d\u53ef\u80fd\u591a\u7684\u53d8\u4f53\uff0c\u56e0\u6b64\u5b83\u505a\u7684\u5047\u8bbe\u5f88\u5c11\u3002\u5982\u679c\u5177\u6709subrange`|min_quarterword..max_quarterword|&#39\uff1b\u7684\u6574\u6570\u53ef\u4ee5\u88ab\u6253\u5305\u6210\u56db\u5206\u5b57\uff0c\u5e76\u4e14\u5982\u679c\u5177\u6709\u5b50\u8303\u56f4`|MIN_HalfWord..max_Halfword|&#39\uff1b\u53ef\u4ee5\u6253\u5305\u5230\u534a\u5b57\u4e2d\uff0c\u5219\u4e00\u5207\u5de5\u4f5c\u90fd\u5e94\u8be5\u4ee4\u4eba\u6ee1\u610f\u3002\u901a\u5e38\u6700\u6709\u6548\u7684\u65b9\u6cd5\u662f|min_Quarterword=min_halfword=0|\uff0c\u6240\u4ee5\u9664\u975e\u51fa\u73b0\u4e25\u91cd\u95ee\u9898\uff0c\u5426\u5219\u5e94\u8be5\u5c1d\u8bd5\u8fd9\u6837\u505a\u3002\u5efa\u8bae\u5927\u591a\u657032\u4f4d\u8ba1\u7b97\u673a\u4f7f\u7528\u6b64\u5904\u5b9a\u4e49\u7684\u503c\u3002@d min_Quarterword=0{|Quarterword|}\u4e2d\u7684\u6700\u5c0f\u5141\u8bb8\u503c|}@d max_Quarterword=255{|Quarterword|}\u4e2d\u7684\u6700\u5927\u5141\u8bb8\u503c|}@d min_Halfword==0\u3002t\u6ee1\u8db3)\uff1a@&lt\uff1b\u68c0\u67e5``\u5e38\u91cf.@&gt\uff1b=init if mem_max&lt\uff1b&gt\uff1bmem_top Then Bad\uff1a=10\uff1b@+tini@\uff1b@/If mem_max&lt\uff1bmem_top Then Bad\uff1a=10\uff1bIf(min_quarterword&gt\uff1b0)or(max_quarterword&lt\uff1b127)Then Bad\uff1a=11\uff1bIf(Min_Halfword&&gt;0)\u6216(max_Halfword&lt\uff1b32767)\u5219BAD\uff1a=12\u3002\u6700\u5c0f\u534a\u5b57)\u6216@|(\u6700\u5927\u56db\u5206\u4e4b\u4e00\u5b57\uff1b&gt;\u6700\u5927\u534a\u5b57)\u5219\u574f\u5b57\uff1a=13\uff1b\u5982\u679c(mem_min&lt\uff1bmin_halfword)or(mem_max&gt\uff1b=max_halfword)\uff0c\u5219\u574f\u5b57\uff1a=14\uff1b\u5982\u679c\u6700\u5927\u5b57\u7b26\u4e32\uff1b&gt;\u6700\u5927\u534a\u5b57\uff0c\u5219\u574f\u5b57\uff1a=15\uff1b\u5982\u679cbuf_size&&gt;\uff1b\u6700\u5927\u534a\u5b57\uff0c\u5219\u574f\u5b57\uff1a=16\uff1b\u5982\u679c(\u6700\u5927\u56db\u5206\u4e4b\u4e00\u5b57-\u6700\u5c0f\u56db\u5206\u4e4b\u4e00\u5b57&lt\uff1b255)\u6216@|(\u6700\u5927\u534a\u5b57-\u6700\u5c0f\u534a\u5b57&lt\uff1b65535)\uff0c\u5219\u3002@\u5728\\mf\u4e2d\u51cf\u53bb|min_Halfword|\u7684\u64cd\u4f5c\u76f8\u5f53\u9891\u7e41\uff0c\u6240\u4ee5\u4f7f\u7528\u8fd9\u91cc\u5b9a\u4e49\u7684\u5b8f|ho|\u53ef\u4ee5\u65b9\u4fbf\u5730\u7f29\u5199\u8be5\u64cd\u4f5c\u3002\u5728|min_Halfword=0|\u65f6\uff0c\u5982\u679c\u6b64\u5b8f\u4ee5\u660e\u663e\u7684\u65b9\u5f0f\u7b80\u5316\uff0c\u5219\u76f8\u5bf9\u4e8e\u4e0d\u4f18\u5316\u8868\u8fbe\u5f0f`|x-0|&#39\uff1b\u7684\u7f16\u8bd1\u5668\uff0c\\mf\\\u7684\u8fd0\u884c\u901f\u5ea6\u4f1a\u66f4\u5feb\u3002\u7c7b\u4f3c\u5730\uff0c|qi|\u548c|qo|\u7528\u4e8e\u56db\u5206\u5b57\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002@^\u7cfb\u7edf\u4f9d\u8d56\u9879@&gt\uff1b@d ho(#)==#-min_Halfword{\u4ece\u534a\u5b57\u4e2d\u63d0\u53d616\u4f4d\u9879\u76ee}@d qo(#)==#-min_Quarterword{\u4ece\u56db\u5206\u5b57\u4e2d\u8bfb\u53d6\u516b\u4f4d}@d qi(#)==#+min_Quarterword{\u5728\u56db\u5206\u5b57\u4e2d\u5b58\u50a8\u516b\u4f4d}@\u8bfb\u8005\u5e94\u8be5\u5b66\u4e60\u3002=@\uff01Quarterword=min_Quarterword..max_Quarterword\uff1b{1/4 of a word}@\uff01Halfword=min_Halfword.max_Halfword\uff1b{1/2 of a word}@\uff01Two_Choices=1..2\uff1b{\u5728\u8bb0\u5f55\u4e2d\u6709\u4e24\u79cd\u53d8\u4f53\u65f6\u4f7f\u7528}@\uff01Three_Choices=1..3\uff1b{\u5728\u8bb0\u5f55\u4e2d\u6709\u4e09\u79cd\u53d8\u4f53\u65f6\u4f7f\u7528}@\uff01Two_Halves=Pack Record@\uff1b@/@\uff01rh\uff1aHalfword\uff1bcase\u30022\uff1a(@\uff01B0\uff1a\u56db\u5206\u5b57\uff1b@\uff01B1\uff1a\u56db\u5206\u5b57)\uff1bEND\uff1b@\uff01Four_Quarters=\u538b\u7f29\u8bb0\u5f55@\uff1b@/@\uff01B0\uff1a\u56db\u5206\u5b57\uff1b@\uff01B1\uff1a\u56db\u5206\u5b57\uff1b@\uff01B2\uff1a\u56db\u5206\u5b57\uff1b@\uff01B3\uff1a\u56db\u5206\u5b57\uff1bEnd\uff1b@\uff01Memory_Word=Record@\uff1b@/case Three_Chotions of 1\uff1a(@\uff01int\uff1a\u6574\u6570)\uff1b2\uff1a(@\uff01hh\uff1aTwo_Halves)\uff1b3\uff1a(@\uff01qqq\u3002@\u8c03\u8bd5\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6253\u5370|MEMORY_WORD|\uff0c\u800c\u4e0d\u77e5\u9053\u5b83\u662f\u4ec0\u4e48\u7c7b\u578b\uff1b\u56e0\u6b64\u6211\u4eec\u5728\u6240\u6709\u6a21\u5f0f\u4e0b\u6253\u5370\u5b83", "note_en": "=0;norm_rand:=x;end;@* \\[9] Packed data.In order to make efficient use of storage space, \\MF\\ bases its major datastructures on a |memory_word|, which contains either a (signed) integer,possibly scaled, or a small number of fields that are one half or onequarter of the size used for storing integers.If |x| is a variable of type |memory_word|, it contains up to fourfields that can be referred to as follows:$$\\vbox{\\halign{\\hfil#&amp;#\\hfil&amp;#\\hfil\\cr|x|&amp;.|int|&amp;(an |integer|)\\cr|x|&amp;.|sc|\\qquad&amp;(a |scaled| integer)\\cr|x.hh.lh|, |x.hh|&amp;.|rh|&amp;(two halfword fields)\\cr|x.hh.b0|, |x.hh.b1|, |x.hh|&amp;.|rh|&amp;(two quarterword fields, one halfword field)\\cr|x.qqqq.b0|, |x.qqqq.b1|, |x.qqqq|&amp;.|b2|, |x.qqqq.b3|\\hskip-100pt &amp;\\qquad\\qquad\\qquad(four quarterword fields)\\cr}}$$This is somewhat cumbersome to write, and not very readable either, butmacros will be used to make the notation shorter and more transparent.The \\PASCAL\\ code below gives a formal definition of |memory_word| andits subsidiary types, using packed variant records. \\MF\\ makes noassumptions about the relative positions of the fields within a word.Since we are assuming 32-bit integers, a halfword must contain at least16 bits, and a quarterword must contain at least 8 bits.@^system dependencies@&gt;But it doesn&#39;t hurt to have more bits; for example, with enough 36-bitwords you might be able to have |mem_max| as large as 262142.N.B.: Valuable memory space will be dreadfully wasted unless \\MF\\ is compiledby a \\PASCAL\\ that packs all of the |memory_word| variants intothe space of a single integer. Some \\PASCAL\\ compilers will pack aninteger whose subrange is `|0..255|&#39; into an eight-bit field, but othersinsist on allocating space for an additional sign bit; on such systems youcan get 256 values into a quarterword only if the subrange is `|-128..127|&#39;.The present implementation tries to accommodate as many variations as possible,so it makes few assumptions. If integers having the subrange`|min_quarterword..max_quarterword|&#39; can be packed into a quarterword,and if integers having the subrange `|min_halfword..max_halfword|&#39;can be packed into a halfword, everything should work satisfactorily.It is usually most efficient to have |min_quarterword=min_halfword=0|,so one should try to achieve this unless it causes a severe problem.The values defined here are recommended for most 32-bit computers.@d min_quarterword=0 {smallest allowable value in a |quarterword|}@d max_quarterword=255 {largest allowable value in a |quarterword|}@d min_halfword==0 {smallest allowable value in a |halfword|}@d max_halfword==65535 {largest allowable value in a |halfword|}@ Here are the inequalities that the quarterword and halfword valuesmust satisfy (or rather, the inequalities that they mustn&#39;t satisfy):@&lt;Check the ``constant&#39;&#39;...@&gt;=init if mem_max&lt;&gt;mem_top then bad:=10;@+tini@;@/if mem_max&lt;mem_top then bad:=10;if (min_quarterword&gt;0)or(max_quarterword&lt;127) then bad:=11;if (min_halfword&gt;0)or(max_halfword&lt;32767) then bad:=12;if (min_quarterword&lt;min_halfword)or@| (max_quarterword&gt;max_halfword) then bad:=13;if (mem_min&lt;min_halfword)or(mem_max&gt;=max_halfword) then bad:=14;if max_strings&gt;max_halfword then bad:=15;if buf_size&gt;max_halfword then bad:=16;if (max_quarterword-min_quarterword&lt;255)or@| (max_halfword-min_halfword&lt;65535) then bad:=17;@ The operation of subtracting |min_halfword| occurs rather frequently in\\MF, so it is convenient to abbreviate this operation by using the macro|ho| defined here. \\MF\\ will run faster with respect to compilers thatdon&#39;t optimize the expression `|x-0|&#39;, if this macro is simplified in theobvious way when |min_halfword=0|. Similarly, |qi| and |qo| are used forinput to and output from quarterwords.@^system dependencies@&gt;@d ho(#)==#-min_halfword {to take a sixteen-bit item from a halfword}@d qo(#)==#-min_quarterword {to read eight bits from a quarterword}@d qi(#)==#+min_quarterword {to store eight bits in a quarterword}@ The reader should study the following definitions closely:@^system dependencies@&gt;@d sc==int {|scaled| data is equivalent to |integer|}@&lt;Types...@&gt;=@!quarterword = min_quarterword..max_quarterword; {1/4 of a word}@!halfword=min_halfword..max_halfword; {1/2 of a word}@!two_choices = 1..2; {used when there are two variants in a record}@!three_choices = 1..3; {used when there are three variants in a record}@!two_halves = packed record@;@/ @!rh:halfword; case two_choices of 1: (@!lh:halfword); 2: (@!b0:quarterword; @!b1:quarterword); end;@!four_quarters = packed record@;@/ @!b0:quarterword; @!b1:quarterword; @!b2:quarterword; @!b3:quarterword; end;@!memory_word = record@;@/ case three_choices of 1: (@!int:integer); 2: (@!hh:two_halves); 3: (@!qqqq:four_quarters); end;@!word_file = file of memory_word;@ When debugging, we may want to print a |memory_word| without knowingwhat type it is; so we print it in all modes.@^dirty \\PASCAL@&gt;@^debugging@&gt;@p @!debug procedure print_word(@!w:memory_word); {prints |w| in all ways}begin print_int(w.int); print_char(&#34; &#34;);@/print_scaled(w.sc); print_char(&#34; &#34;); print_scaled(w.sc div @&#39;10000); print_ln;@/print_int(w.hh.lh); print_char(&#34;=&#34;); print_int(w.hh.b0); print_char(&#34;:&#34;);print_int(w.hh.b1); print_char(&#34;;&#34;); print_int(w.hh.rh); print_char(&#34; &#34;);@/print_int(w.qqqq.b0); print_char(&#34;:&#34;); print_int(w.qqqq.b1); print_char(&#34;:&#34;);print_int(w.qqqq.b2); print_char(&#34;:&#34;); print_int(w.qqqq.b3);end;gubed@* \\[10] Dynamic memory allocation.The \\MF\\ system does nearly all of its own memory allocation, so that itcan readily be transported into environments that do not have automaticfacilities for strings, garbage collection, etc., and so that it can be incontrol of what error messages the user receives. The dynamic storagerequirements of \\MF\\ are handled by providing a large array |mem| inwhich consecutive blocks of words are used as nodes by the \\MF\\ routines.Pointer variables are indices into this array, or into another arraycalled |eqtb| that will be explained later. A pointer variable mightalso be a special flag that lies outside the bounds of |mem|, so weallow pointers to assume any |halfword| value. The minimum memoryindex represents a null pointer.@d pointer==halfword {a flag or a location in |mem| or |eqtb|}@d null==mem_min {the null pointer}@ The |mem| array is divided into two regions that are allocated separately,but the dividing line between these two regions is not fixed; they growtogether until finding their ``natural&#39;&#39; size in a particular job.Locations less than or equal to |lo_mem_max| are used for storingvariable-length records consisting of two or more words each. This regionis maintained using an algorithm similar to the one described in exercise2.5--19 of {\\sl The Art of Computer Programming}. However, no size fieldappears in the allocated nodes; the program is responsible for knowing therelevant size when a node is freed. Locations greater than or equal to|hi_mem_min| are used for storing one-word records; a conventional\\.{AVAIL} stack is used for allocation in this region.Locations of |mem| between |mem_min| and |mem_top| may be dumped as partof preloaded base files, by the \\.{INIMF} preprocessor.@.INIMF@&gt;Production versions of \\MF\\ may extend the memory at the top end in order toprovide more space; these locations, between |mem_top| and |mem_max|,are always used for single-word nodes.The key pointers that govern |mem| allocation have a prescribed order:$$\\hbox{|null=mem_min&lt;lo_mem_max&lt;hi_mem_min&lt;mem_top&lt;=mem_end&lt;=mem_max|.}$$@&lt;Glob...@&gt;=@!mem : array[mem_min..mem_max] of memory_word; {the big dynamic storage area}@!lo_mem_max : pointer; {the largest location of variable-size memory in use}@!hi_mem_min : pointer; {the smallest location of one-word memory in use}@ Users who wish to study the memory requirements of specific applications canuse optional special features that keep track of current andmaximum memory usage. When code between the delimiters |@!stat| $\\ldots$|tats| is not ``commented out,&#39;&#39; \\MF\\ will run a bit slower but it willreport these statistics when |tracing_stats| is positive.@&lt;Glob...@&gt;=@!var_used, @!dyn_used : integer; {how much memory is in use}@ Let&#39;s consider the one-word memory region first, since it&#39;s thesimplest. The pointer variable |mem_end| holds the highest-numbered locationof |mem| that has ever been used. The free locations of |mem| thatoccur between |hi_mem_min| and |mem_end|, inclusive, are of type|two_halves|, and we write |info(p)| and |link(p)| for the |lh|and |rh| fields of |mem[p]| when it is of this type. The single-wordfree locations form a linked list$$|avail|,\\;\\hbox{|link(avail)|},\\;\\hbox{|link(link(avail))|},\\;\\ldots$$terminated by |null|.@d link(#) == mem[#].hh.rh {the |link| field of a memory word}@d info(#) == mem[#].hh.lh {the |info| field of a memory word}@&lt;Glob...@&gt;=@!avail : pointer; {head of the list of available one-word nodes}@!mem_end : pointer; {the last one-word node used in |mem|}@ If one-word memory is exhausted, it might mean that the user has forgottena token like `\\&amp;{enddef}&#39; or `\\&amp;{endfor}&#39;. We will define some procedureslater that try to help pinpoint the trouble.@p @t\\4@&gt;@&lt;Declare the procedure called |show_token_list|@&gt;@;@t\\4@&gt;@&lt;Declare the procedure called |runaway|@&gt;@ The function |get_avail| returns a pointer to a new one-word node whose|link| field is null. However, \\MF\\ will halt if there is no more room left.@^inner loop@&gt;@p function get_avail : pointer; {single-word node allocation}var @!p:pointer; {the new node being got}begin p:=avail; {get top location in the |avail| stack}if p&lt;&gt;null then avail:=link(avail) {and pop it off}else if mem_end&lt;mem_max then {or go into virgin territory} begin incr(mem_end); p:=mem_end; endelse begin decr(hi_mem_min); p:=hi_mem_min; if hi_mem_min&lt;=lo_mem_max then begin runaway; {if memory is exhausted, display possible runaway text} overflow(&#34;main memory size&#34;,mem_max+1-mem_min); {quit; all one-word nodes are busy}@:METAFONT capacity exceeded main memory size}{\\quad main memory size@&gt; end; end;link(p):=null; {provide an oft-desired initialization of the new node}@!stat incr(dyn_used);@+tats@;{maintain statistics}get_avail:=p;end;@ Conversely, a one-word node is recycled by calling |free_avail|.@d free_avail(#)== {single-word node liberation} begin link(#):=avail; avail:=#; @!stat decr(dyn_used);@+tats@/ end@ There&#39;s also a |fast_get_avail| routine, which saves the procedure-calloverhead at the expense of extra programming. This macro is used inthe places that would otherwise account for the most calls of |get_avail|.@^inner loop@&gt;@d fast_get_avail(#)==@t@&gt;@;@/ begin #:=avail; {avoid |get_avail| if possible, to save time} if #=null then #:=get_avail else begin avail:=link(#); link(#):=null; @!stat incr(dyn_used);@+tats@/ end; end@ The available-space list that keeps track of the variable-size portionof |mem| is a nonempty, doubly-linked circular list of empty nodes,pointed to by the roving pointer |rover|.Each empty node has size 2 or more; the first word contains the specialvalue |max_halfword| in its |link| field and the size in its |info| field;the second word contains the two pointers for double linking.Each nonempty node also has size 2 or more. Its first word is of type|two_halves|\\kern-1pt, and its |link| field is never equal to |max_halfword|.Otherwise there is complete flexibility with respect to the contentsof its other fields and its other words.(We require |mem_max&lt;max_halfword| because terrible things can happenwhen |max_halfword| appears in the |link| field of a nonempty node.)@d empty_flag == max_halfword {the |link| of an empty variable-size node}@d is_empty(#) == (link(#)=empty_flag) {tests for empty node}@d node_size == info {the size field in empty variable-size nodes}@d llink(#) == info(#+1) {left link in doubly-linked list of empty nodes}@d rlink(#) == link(#+1) {right link in doubly-linked list of empty nodes}@&lt;Glob...@&gt;=@!rover : pointer; {points to some node in the list of empties}@ A call to |get_node| with argument |s| returns a pointer to a new nodeof size~|s|, which must be 2~or more. The |link| field of the first wordof this new node is set to null. An overflow stop occurs if no suitablespace exists.If |get_node| is called with $s=2^{30}$, it simply merges adjacent freeareas and returns the value |max_halfword|.@p function get_node(@!s:integer):pointer; {variable-size node allocation}label found,exit,restart;var @!p:pointer; {the node currently under inspection}@!q:pointer; {the node physically after node |p|}@!r:integer; {the newly allocated node, or a candidate for this honor}@!t,@!tt:integer; {temporary registers}@^inner loop@&gt;begin restart: p:=rover; {start at some free node in the ring}repeat @&lt;Try to allocate within node |p| and its physical successors, and |goto found| if allocation was possible@&gt;;p:=rlink(p); {move to the next node in the ring}until p=rover; {repeat until the whole list has been traversed}if s=@&#39;10000000000 then begin get_node:=max_halfword; return; end;if lo_mem_max+2&lt;hi_mem_min then if lo_mem_max+2&lt;=mem_min+max_halfword then @&lt;Grow more variable-size memory and |goto restart|@&gt;;overflow(&#34;main memory size&#34;,mem_max+1-mem_min); {sorry, nothing satisfactory is left}@:METAFONT capacity exceeded main memory size}{\\quad main memory size@&gt;found: link(r):=null; {this node is now nonempty}@!stat var_used:=var_used+s; {maintain usage statistics}tats@;@/get_node:=r;exit:end;@ The lower part of |mem| grows by 1000 words at a time, unlesswe are very close to going under. When it grows, we simply linka new node into the available-space list. This method of controlledgrowth helps to keep the |mem| usage consecutive when \\MF\\ isimplemented on ``virtual memory&#39;&#39; systems.@^virtual memory@&gt;@&lt;Grow more variable-size memory and |goto restart|@&gt;=begin if hi_mem_min-lo_mem_max&gt;=1998 then t:=lo_mem_max+1000else t:=lo_mem_max+1+(hi_mem_min-lo_mem_max) div 2; {|lo_mem_max+2&lt;=t&lt;hi_mem_min|}if t&gt;mem_min+max_halfword then t:=mem_min+max_halfword;p:=llink(rover); q:=lo_mem_max; rlink(p):=q; llink(rover):=q;@/rlink(q):=rover; llink(q):=p; link(q):=empty_flag; node_size(q):=t-lo_mem_max;@/lo_mem_max:=t; link(lo_mem_max):=null; info(lo_mem_max):=null;rover:=q; goto restart;end@ @&lt;Try to allocate...@&gt;=q:=p+node_size(p); {find the physical successor}while is_empty(q) do {merge node |p| with node |q|} begin t:=rlink(q); tt:=llink(q);@^inner loop@&gt; if q=rover then rover:=t; llink(t):=tt; rlink(tt):=t;@/ q:=q+node_size(q); end;r:=q-s;if r&gt;p+1 then @&lt;Allocate from the top of node |p| and |goto found|@&gt;;if r=p then if rlink(p)&lt;&gt;p then @&lt;Allocate entire node |p| and |goto found|@&gt;;node_size(p):=q-p {reset the size in case it grew}@ @&lt;Allocate from the top...@&gt;=begin node_size(p):=r-p; {store the remaining size}rover:=p; {start searching here next time}goto found;end@ Here we delete node |p| from the ring, and let |rover| rove around.@&lt;Allocate entire...@&gt;=begin rover:=rlink(p); t:=llink(p);llink(rover):=t; rlink(t):=rover;goto found;end@ Conversely, when some variable-size node |p| of size |s| is no longer needed,the operation |free_node(p,s)| will make its words available, by inserting|p| as a new empty node just before where |rover| now points.@p procedure free_node(@!p:pointer; @!s:halfword); {variable-size node liberation}var @!q:pointer; {|llink(rover)|}begin node_size(p):=s; link(p):=empty_flag;@^inner loop@&gt;q:=llink(rover); llink(p):=q; rlink(p):=rover; {set both links}llink(rover):=p; rlink(q):=p; {insert |p| into the ring}@!stat var_used:=var_used-s;@+tats@;{maintain statistics}end;@ Just before \\.{INIMF} writes out the memory, it sorts the doubly linkedavailable space list. The list is probably very short at such times, so asimple insertion sort is used. The smallest available location will bepointed to by |rover|, the next-smallest by |rlink(rover)|, etc.@p @!init procedure sort_avail; {sorts the available variable-size nodes by location}var @!p,@!q,@!r: pointer; {indices into |mem|}@!old_rover:pointer; {initial |rover| setting}begin p:=get_node(@&#39;10000000000); {merge adjacent free areas}p:=rlink(rover); rlink(rover):=max_halfword; old_rover:=rover;while p&lt;&gt;old_rover do @&lt;Sort |p| into the list starting at |rover| and advance |p| to |rlink(p)|@&gt;;p:=rover;while rlink(p)&lt;&gt;max_halfword do begin llink(rlink(p)):=p; p:=rlink(p); end;rlink(p):=rover; llink(rover):=p;end;tini@ The following |while| loop is guaranteed toterminate, since the list that starts at|rover| ends with |max_halfword| during the sorting procedure.@&lt;Sort |p|...@&gt;=if p&lt;rover then begin q:=p; p:=rlink(q); rlink(q):=rover; rover:=q; endelse begin q:=rover; while rlink(q)&lt;p do q:=rlink(q); r:=rlink(p); rlink(p):=rlink(q); rlink(q):=p; p:=r; end@* \\[11] Memory layout.Some areas of |mem| are dedicated to fixed usage, since static allocation ismore efficient than dynamic allocation when we can get away with it. Forexample, locations |mem_min| to |mem_min+2| are always used to store thespecification for null pen coordinates that are `$(0,0)$&#39;. Thefollowing macro definitions accomplish the static allocation by givingsymbolic names to the fixed positions. Static variable-size nodes appearin locations |mem_min| through |lo_mem_stat_max|, and static single-word nodesappear in locations |hi_mem_stat_min| through |mem_top|, inclusive.@d null_coords==mem_min {specification for pen offsets of $(0,0)$}@d null_pen==null_coords+3 {we will define |coord_node_size=3|}@d dep_head==null_pen+10 {and |pen_node_size=10|}@d zero_val==dep_head+2 {two words for a permanently zero value}@d temp_val==zero_val+2 {two words for a temporary value node}@d end_attr==temp_val {we use |end_attr+2| only}@d inf_val==end_attr+2 {and |inf_val+1| only}@d bad_vardef==inf_val+2 {two words for \\&amp;{vardef} error recovery}@d lo_mem_stat_max==bad_vardef+1 {largest statically allocated word in the variable-size |mem|}@#@d sentinel==mem_top {end of sorted lists}@d temp_head==mem_top-1 {head of a temporary list of some kind}@d hold_head==mem_top-2 {head of a temporary list of another kind}@d hi_mem_stat_min==mem_top-2 {smallest statically allocated word in the one-word |mem|}@ The following code gets the dynamic part of |mem| off to a good start,when \\MF\\ is initializing itself the slow way.@&lt;Initialize table entries (done by \\.{INIMF} only)@&gt;=rover:=lo_mem_stat_max+1; {initialize the dynamic memory}link(rover):=empty_flag;node_size(rover):=1000; {which is a 1000-word available node}llink(rover):=rover; rlink(rover):=rover;@/lo_mem_max:=rover+1000; link(lo_mem_max):=null; info(lo_mem_max):=null;@/for k:=hi_mem_stat_min to mem_top do mem[k]:=mem[lo_mem_max]; {clear list heads}avail:=null; mem_end:=mem_top;hi_mem_min:=hi_mem_stat_min; {initialize the one-word memory}var_used:=lo_mem_stat_max+1-mem_min; dyn_used:=mem_top+1-hi_mem_min; {initialize statistics}@ The procedure |flush_list(p)| frees an entire linked list of one-wordnodes that starts at a given position, until coming to |sentinel| or apointer that is not in the one-word region. Another procedure,|flush_node_list|, frees an entire linked list of one-word and two-wordnodes, until coming to a |null| pointer.@^inner loop@&gt;@p procedure flush_list(@!p:pointer); {makes list of single-word nodes available}label done;var @!q,@!r:pointer; {list traversers}begin if p&gt;=hi_mem_min then if p&lt;&gt;sentinel then begin r:=p; repeat q:=r; r:=link(r); @!stat decr(dyn_used);@+tats@/ if r&lt;hi_mem_min then goto done; until r=sentinel; done: {now |q| is the last node on the list} link(q):=avail; avail:=p; end;end;@#procedure \n......", "posttime": "2020-06-09 16:38:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6885\u5854\u65b9\u7279,metafont,min", "title": "\u6885\u5854\u65b9\u7279(1984)", "title_en": "Metafont (1984)", "transed": 1, "url": "http://tug.ctan.org/systems/knuth/dist/mf/mf.web", "via": "", "real_tags": ["\u6885\u5854\u65b9\u7279", "metafont", "min"]}, {"category": "", "categoryclass": "", "imagename": "11dcd75298949c677456ea07b2362c77.png", "infoid": 1005826, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e94\u7528\u6b63\u5f0f\u7cfb\u7edf\u5bf9\u751f\u7269\u8fc7\u7a0b\u5efa\u6a21\u7684\u8d44\u6e90\u96c6\u5408\u3002\u8981\u4e86\u89e3\u8be5\u9886\u57df\u7684\u4e00\u822c\u65b9\u6cd5\uff0c\u4e00\u4e9b\u5bb9\u6613\u9605\u8bfb\u7684\u4e66\u7c4d\u53ef\u80fd\u662f\uff1a\n\u9ea6\u5361\u9c81\u5947\u548c\u76ae\u8328\u5bf9\u751f\u7269\u5b66\u4e2d\u795e\u7ecf\u5143\u7684\u7814\u7a76\u8bde\u751f\u4e86\u542f\u52a8\u4eba\u5de5\u667a\u80fd\u3001\u5e38\u89c4\u8bed\u8a00\u548c\u6570\u5b57\u8ba1\u7b97\u673a\u7684\u5173\u952e\u8bba\u6587\u3002\u8fd9\u662f\u7ea6\u7ff0\u00b7\u51af\u00b7\u8bfa\u4f0a\u66fc(John Von Neumann)\u5728EDVAC\u62a5\u544a\u4e2d\u552f\u4e00\u5305\u62ec\u7684\u8bba\u6587\u3002", "note_en": "A collection of resources that apply formal systems to model biological processes. Some easily accessible books to understand the general approach to this field might be:\n    McCullouch and Pitts study of neurons in biology birthed the pivotal paper that kickstarted A.I.,  regular languages, and digital computers. It was the only paper included in  the EDVAC report by John Von Neumann.", "posttime": "2020-06-09 16:38:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u751f\u7269\u5b66,systems,\u9886\u57df", "title": "\u751f\u7269\u5b66\u4e2d\u7684\u5f62\u5f0f\u7cfb\u7edf", "title_en": "Formal Systems in Biology", "transed": 1, "url": "https://github.com/prathyvsh/formal-systems-in-biology", "via": "", "real_tags": ["\u751f\u7269\u5b66", "systems", "\u9886\u57df"]}, {"category": "", "categoryclass": "", "imagename": "fccf902dc5dcd5d37539b962a2ea371d.jpeg", "infoid": 1005825, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "RecallGraph\u662f\u4e00\u4e2a\u7248\u672c\u5316\u56fe\u5f62\u6570\u636e\u5b58\u50a8-\u5b83\u4fdd\u7559\u5176\u6570\u636e(\u9876\u70b9\u548c\u8fb9)\u4e3a\u8fbe\u5230\u5176\u5f53\u524d\u72b6\u6001\u800c\u8fdb\u884c\u7684\u6240\u6709\u66f4\u6539\u3002\u5b83\u652f\u6301\u65f6\u95f4\u70b9\u56fe\u5f62\u904d\u5386\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u50cf\u67e5\u8be2\u5f53\u524d\u72b6\u6001\u4e00\u6837\u65b9\u4fbf\u5730\u67e5\u8be2\u56fe\u5f62\u7684\u4efb\u4f55\u8fc7\u53bb\u72b6\u6001\u3002\n\u5b83\u662fArangoDB\u7684Foxx\u5fae\u670d\u52a1\uff0c\u5728\u5176\u63a5\u53e3\u7684\u8bb8\u591a\u90e8\u5206\u90fd\u5177\u6709\u7c7b\u4f3cVCS\u7684\u8bed\u4e49\uff0c\u5e76\u7531\u4e8b\u52a1\u4e8b\u4ef6\u8ddf\u8e2a\u5668\u63d0\u4f9b\u652f\u6301\u3002\u5b83\u76ee\u524d\u6b63\u5728ArangoDBv3.5\u548cv3.6\u4e0a\u8fdb\u884c\u5f00\u53d1\u548c\u6d4b\u8bd5\uff0c\u5e76\u6b63\u5728\u7b79\u5907\u5bf9V3.7\u7684\u652f\u6301\u3002\nTL\uff1bDR\uff1aRecallGraph\u53ef\u80fd\u9002\u5408\u5c06\u6570\u636e\u6700\u597d\u5730\u8868\u793a\u4e3a\u5177\u6709\u4ee5\u4e0b\u7279\u5f81\u7684\u9876\u70b9\u548c\u8fb9\u7f51\u7edc(\u5373\uff0c\u56fe)\u7684\u573a\u666f\uff1a\n\u9876\u70b9\u548c\u8fb9\u90fd\u53ef\u4ee5\u4ee5\u5c5e\u6027/\u503c\u5bf9\u7684\u5f62\u5f0f\u4fdd\u5b58\u5c5e\u6027(\u76f8\u5f53\u4e8eJSON\u5bf9\u8c61)\u3002\n\u6587\u6863(\u9876\u70b9/\u8fb9)\u5728\u5176\u751f\u547d\u5468\u671f\u5185\u53d1\u751f\u53d8\u5f02(\u65e0\u8bba\u662f\u5728\u5b83\u4eec\u5404\u81ea\u7684\u5c5e\u6027/\u503c\u4e0a\uff0c\u8fd8\u662f\u5728\u5b83\u4eec\u5f7c\u6b64\u4e4b\u95f4\u7684\u5173\u7cfb\u4e0a)\u3002\n\u6587\u6863\u8fc7\u53bb\u7684\u72b6\u6001\u4e0e\u5b83\u4eec\u73b0\u5728\u7684\u72b6\u6001\u4e00\u6837\u91cd\u8981\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u7559\u548c\u67e5\u8be2\u5b83\u4eec\u7684\u66f4\u6539\u5386\u53f2\u8bb0\u5f55\u3002\n\u65e5\u5fd7-\u83b7\u53d6\u7ed9\u5b9a\u8def\u5f84\u6a21\u5f0f\u7684\u4e8b\u4ef6(\u63d0\u4ea4)\u65e5\u5fd7(\u8def\u5f84\u51b3\u5b9a\u8981\u9009\u62e9\u7684\u6587\u6863\u8303\u56f4)\u3002\u53ef\u4ee5\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u5185\u9009\u62e9\u6027\u5730\u5bf9\u65e5\u5fd7\u8fdb\u884c\u5206\u7ec4/\u6392\u5e8f/\u5207\u7247\u3002\ndiff-\u83b7\u53d6\u6307\u5b9a\u6587\u6863\u7684\u4e24\u6b21\u63d0\u4ea4\u4e4b\u95f4\u7684\u6b63\u5411\u6216\u53cd\u5411\u547d\u4ee4(Diffs)\u5217\u8868\u3002\n\u663e\u5f0f\u63d0\u4ea4-\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f(AQL/Core rest API/Client)\u5c06\u6587\u6863\u5199\u5165\u6570\u636e\u5e93\u540e\uff0c\u5355\u72ec\u63d0\u4ea4\u6587\u6863\u7684\u66f4\u6539\u3002\n(\u8ba1\u5212\u7684)\u5206\u652f/\u6807\u8bb0-\u521b\u5efa\u5386\u53f2\u7684\u5e76\u884c\u7248\u672c\uff0c\u4ece\u4e3b\u65f6\u95f4\u7ebf\u7684\u7279\u5b9a\u4e8b\u4ef6\u70b9\u5206\u652f\u3002\u53e6\u5916\uff0c\u5728\u5206\u652f+\u65f6\u95f4\u4e2d\u6807\u8bb0\u7279\u5b9a\u7684\u70b9\uff0c\u4ee5\u4fbf\u5c06\u6765\u53c2\u8003\u3002\n\u663e\u793a-\u5728\u7ed9\u5b9a\u65f6\u95f4\u70b9\u83b7\u53d6\u4e0e\u7ed9\u5b9a\u8def\u5f84\u6a21\u5f0f\u5339\u914d\u7684\u53ef\u9009\u5206\u7ec4/\u6392\u5e8f/\u5207\u7247\u7684\u4e00\u7ec4\u6587\u6863\u3002\n\u8fc7\u6ee4\u5668-\u9664\u4e86\u50cfShow&#39\uff1b\u4e2d\u90a3\u6837\u7684\u8def\u5f84\u6a21\u5f0f\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u5728\u68c0\u7d22\u5230\u7684\u6587\u6863\u4e0a\u5e94\u7528\u57fa\u4e8e\u8868\u8fbe\u5f0f\u7684\u7b80\u5355/\u590d\u5408\u540e\u671f\u8fc7\u6ee4\u5668\u3002\n\u904d\u5386(Traverse)-\u5bf9\u56fe\u5f62\u7684\u8fc7\u53bb\u7248\u672c\u8fdb\u884c\u65f6\u95f4\u70b9\u904d\u5386(\u6f2b\u6e38)\uff0c\u53ef\u4ee5\u9009\u62e9\u5bf9\u7ed3\u679c\u5e94\u7528\u9644\u52a0\u7684\u540e\u671f\u7b5b\u9009\u3002\n\u6309\u7167Foxx\u90e8\u7f72\u624b\u518c\u4e2d\u7684\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002Web\u754c\u9762\u662f\u6700\u7b80\u5355\u7684\uff0c\u800cFoxx-cli\u66f4\u9002\u5408\u9ad8\u7ea7\u7528\u6237\u3002\n\u4e00\u65e6\u5b89\u88c5\u4e86\u670d\u52a1(\u901a\u8fc7ArangoDB\u7684Web\u7528\u6237\u754c\u9762\u8bbf\u95ee)\uff0c\u8fd8\u53ef\u4ee5\u5728Swagger\u63a7\u5236\u53f0\u4e2d\u76f4\u63a5\u83b7\u5f97API\u6587\u6863\u3002\n\u5c3d\u7ba1\u6d4b\u8bd5\u7528\u4f8b\u76f8\u5f53\u5e7f\u6cdb\u4e14\u8986\u76d6\u8303\u56f4\u5f88\u597d\uff0c\u4f46\u8be5\u670d\u52a1\u4ec5\u5728\u5355\u5b9e\u4f8b\u6570\u636e\u5e93\u90e8\u7f72\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u800c\u6ca1\u6709\u5728\u96c6\u7fa4\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u3002\n\u4ece3.6\u7248\u5f00\u59cb\uff0cArangoDB\u4e0d\u652f\u6301\u7fa4\u96c6\u6a21\u5f0f\u4e0b\u7684\u591a\u6587\u6863/\u96c6\u5408\u5199\u5165\u7684ACID\u4e8b\u52a1\u3002\u6b64\u7c7b\u90e8\u7f72\u4e0d\u80fd\u4fdd\u8bc1\u4e8b\u52a1\u6027\u9178\u6027\u3002\n\u652f\u6301\u5bf9\u5355\u4e2a\u6587\u6863\u7684\u57fa\u4e8e\u7edd\u5bf9/\u76f8\u5bf9\u4fee\u8ba2\u7684\u67e5\u8be2(\u9664\u4e86\u5f53\u524d\u652f\u6301\u7684\u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u67e5\u8be2\u4e4b\u5916)\uff0c\n\u9664\u4e86\u5f53\u524d\u5b9e\u73b0\u7684\u4e8b\u52a1\u65f6\u95f4\u7ef4\u5ea6(https://www.researchgate.net/publication/221212735_A_Taxonomy_of_Time_in_Databases)\uff0c)\u4e4b\u5916\uff0c\u8fd8\u652f\u6301\u6709\u6548\u7684\u65f6\u95f4\u7ef4\u5ea6\u3002\n\u6570\u636e\u5e93\u7684\u53ef\u9009\u90e8\u5206(\u6574\u4e2aDB\u3001\u547d\u540d\u56fe\u5f62\u3001\u547d\u540d\u96c6\u5408\u3001\u6587\u6863\u5217\u8868\u3001\u6587\u6863\u6a21\u5f0f)\u7684\u591a\u4e2a\u540c\u65f6\u7269\u5316\u7b7e\u51fa(A La Git)\uff0c\u5177\u6709\u6700\u7ec8\u7684\u5206\u652f\u7ea7\u4e13\u7528\u6027\uff0c\n\u5bf9ArangoDB\u96c6\u7fa4\u7684\u652f\u6301(\u76ee\u524d\u7531\u4e8e\u7f3a\u4e4f\u5bf9\u96c6\u7fa4\u4e2d\u591a\u6587\u6863ACID\u4e8b\u52a1\u7684\u652f\u6301\u800c\u53d7\u5230\u9650\u5236)\u3002\nRecallGraph\u7684\u4f5c\u8005\u548c\u7ef4\u62a4\u8005\u4e0d\u5bf9\u56e0\u4f7f\u7528\u672c\u8f6f\u4ef6\u800c\u76f4\u63a5\u6216\u95f4\u63a5\u9020\u6210\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u635f\u5931(\u660e\u793a\u6216\u9ed8\u793a)\u627f\u62c5\u4efb\u4f55\u8d23\u4efb\u3002", "note_en": "RecallGraph is a  versioned-graph data store - it retains all changes that its data (vertices and edges) have gone through to reach their current state. It supports  point-in-time graph traversals, letting the user query any past state of the graph just as easily as the present.\n It is a  Foxx Microservice for  ArangoDB that features  VCS-like semantics in many parts of its interface, and is backed by a transactional event tracker. It is currently being developed and tested on ArangoDB v3.5 and v3.6, with support for v3.7 in the pipeline.\n         TL;DR: RecallGraph is a potential fit for scenarios where data is best represented as a network of vertices and edges (i.e., a graph) having the following characteristics:\n Both vertices and edges can hold properties in the form of attribute/value pairs (equivalent to JSON objects).\n Documents (vertices/edges) mutate within their lifespan (both in their individual attributes/values and in their relations with each other).\n Past states of documents are as important as their present, necessitating retention and queryability of their change history.\n       Log - Fetch a log of events (commits) for a given path pattern (path determines scope of documents to pick). The log can be optionally grouped/sorted/sliced within a specified time interval.\n Diff - Fetch a list of forward or reverse commands (diffs) between commits for specified documents.\n Explicit Commits - Commit a document&#39;s changes separately, after it has been written to DB via other means (AQL / Core REST API / Client).\n (Planned) Branch/Tag - Create parallel versions of history, branching off from a specific event point of the main timeline. Also, tag specific points in branch+time for convenient future reference.\n  Show - Fetch a set of documents, optionally grouped/sorted/sliced, that match a given path pattern, at a given point in time.\n Filter - In addition to a path pattern like in  &#39;Show&#39;, apply an expression-based, simple/compound post-filter on the retrieved documents.\n Traverse - A point-in-time traversal (walk) of a past version of the graph, with the option to apply additional post-filters to the result.\n   Follow the instructions in the  Foxx Deployment Manual. The web interface is the easiest, while the  foxx-cli is more suitable for power users.\n     API documentation is also available directly in the Swagger console once the service is installed (accessed through ArangoDB&#39;s web UI).\n    Although the test cases are quite extensive and have good coverage, this service has only been tested on single-instance DB deployments, and  not on clusters.\n As of version 3.6, ArangoDB does not support ACID transactions for multi-document/collection writes in  cluster mode. Transactional ACIDity is not guaranteed for such deployments.\n  Support for absolute/relative revision-based queries on individual documents (in addition to the timestamp-based queries supported currently),\n  Support for the  valid time dimension in addition to the currently implemented  transaction time dimension ( https://www.researchgate.net/publication/221212735_A_Taxonomy_of_Time_in_Databases),\n  Multiple, simultaneous materialized checkouts (a la  git) of selectable sections of the database (entire DB, named graph, named collection, document list, document pattern), with eventual branch-level specificity,\n  Support for ArangoDB clusters (limited at present by lack of support for multi-document ACID transactions in clusters).\n    The authors and maintainers of RecallGraph are not liable for damages or indemnity (express or implied) for loss of any kind incurred directly or indirectly as a result of using this software.", "posttime": "2020-06-09 16:37:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u636e\u5e93,database,\u56fe\u5f62,graph,\u6587\u6863", "title": "RecallGraph-\u4e00\u4e2a\u5f00\u653e\u6e90\u7801\u7684\u56fe\u5f62\u6570\u636e\u5e93\uff0c\u7528\u4e8e\u7248\u672c\u63a7\u5236\u7684\u56fe\u5f62\u6570\u636e", "title_en": "RecallGraph \u2013 an open source graph database, for version controlled graph data", "transed": 1, "url": "https://github.com/RecallGraph/RecallGraph", "via": "", "real_tags": ["\u6570\u636e\u5e93", "database", "\u56fe\u5f62", "graph", "\u6587\u6863"]}, {"category": "", "categoryclass": "", "imagename": "6477ed7f66318b6c727a54468936da91.png", "infoid": 1005824, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81f4\u7f16\u8f91\uff1a", "note_en": "To the Editor:", "posttime": "2020-06-09 16:20:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u76d7\u7a83\u6848,thefts,\u7f16\u8f91", "title": "\u770b\u6765\u76d7\u7a83\u6848\u5728\u589e\u52a0\u3002", "title_en": "It seems that thefts are increasing", "transed": 1, "url": "https://www.hpherald.com/opinion/letters_to_editor/it-seems-that-thefts-are-increasing/article_427d3702-a5c5-11ea-b94e-7ba9191144e0.html", "via": "", "real_tags": ["\u76d7\u7a83\u6848", "thefts", "\u7f16\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005823, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u4e24\u5468\u91cc\uff0c\u6211\u5f00\u53d1\u4e86\u4e00\u6b3e\u5c0f\u578b\u7687\u5bb6\u6218\u6597\u6e38\u620f&amp\uff1b\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u73a9\u3002\n\u5982\u679c\u4f60\u95ee\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u4e3a\u4ec0\u4e48\u4f1a\u8fdb\u5165\u8ba1\u7b97\u673a\u79d1\u5b66\uff0c\u6211\u6562\u4fdd\u8bc1\u5927\u591a\u6570\u4eba\u4f1a\u8bf4\u89c6\u9891\u6e38\u620f\u3002\n\u6211\u7edd\u5bf9\u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u3002\u5f53\u6211\u62a5\u540d\u653b\u8bfbCS\u5b66\u4f4d\u65f6\uff0c\u6211\u5fc3\u91cc\u53ea\u6709\u4e00\u4ef6\u4e8b\uff1a\u505a\u4e00\u4e9b\u6e38\u620f\uff0c\u6210\u4e3a\u4e00\u540d\u6e38\u620f\u5f00\u53d1\u4eba\u5458\uff0c\u7136\u540e\u5728\u5236\u4f5c\u201c\u98de\u9e1f2\u201d\u65f6\u4f5c\u4e3a\u767e\u4e07\u5bcc\u7fc1\u9000\u4f11\u3002\n\u7136\u800c\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u6211\u5bf9\u8fd9\u4e2a\u60f3\u6cd5\u5931\u53bb\u4e86\u5174\u8da3\u3002\u6211\u542c\u8bf4\u4e86\u65e0\u6570\u5173\u4e8e\u6e38\u620f\u884c\u4e1a\u52a0\u73ed\u548c\u4f4e\u5de5\u8d44\u7684\u6545\u4e8b\uff0c\u63a8\u51fa\u4e86\u81ea\u5df1\u7684\u6e38\u620fTrig\uff0c\u53d6\u5f97\u4e86\u5c0f\u5c0f\u7684\u6210\u529f\uff0c\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u957f\u5927\u4e86\u4e00\u70b9\uff0c\u5bf9\u6e38\u620f\u4e0d\u90a3\u4e48\u611f\u5174\u8da3\u4e86\u3002\n\u505a\u6e38\u620f\u662f\u6211\u771f\u6b63\u559c\u6b22\u7684\u4e8b\u60c5\uff0c\u5373\u4f7f\u6211\u505a\u7684\u6e38\u620f\u5e76\u4e0d\u662f\u90a3\u4e48\u68d2\u3002\u4e00\u4e2a\u4eba\u73a9\u4f60\u521b\u9020\u7684\u6e38\u620f\u5e76\u771f\u6b63\u4eab\u53d7\u5b83\u7684\u611f\u89c9\u662f\u4e00\u79cd\u65e0\u4e0e\u4f26\u6bd4\u7684\u611f\u89c9\u3002\u4f60\u5bf9\u5e78\u798f\u8fdb\u884c\u4e86\u5b57\u9762\u4e0a\u7684\u7f16\u7801\u3002\n\u6709\u4eba\u66fe\u7ecf\u544a\u8bc9\u6211\uff0c\u6709\u4e00\u5929\u4e0b\u5348\uff0c\u4ed6\u4eec\u7684\u5988\u5988\u82b1\u4e863\u4e2a\u5c0f\u65f6\u73a9\u4e86\u4e00\u6b3e\u6211\u5728iPad\u4e0a\u521b\u5efa\u7684\u6e38\u620f\u3002\u5149\u662f\u542c\u5230\u8fd9\u53e5\u8bdd\uff0c\u5c31\u611f\u89c9\u6bd4\u5728\u6e38\u620f\u4e2d\u901a\u8fc7\u5e7f\u544a\u8d5a\u53d6\u7684\u5fae\u4e0d\u8db3\u9053\u768442\u7f8e\u5143\u8981\u591a10\u500d\u3002\n\u6211\u7740\u624b\u8fd9\u4e2a\u9879\u76ee\uff0c\u60f3\u505a\u4e00\u4e2a\u8ff7\u4f60\u7684\u5927\u578b\u591a\u4eba\u5728\u7ebf\u89d2\u8272\u626e\u6f14\u6e38\u620f(MMORPG)\uff1a\u60f3\u8c61\u4e00\u4e0b\u8ff7\u4f60\u7248\u7684\u9b54\u517d\u4e16\u754c\u3002\u6211\u751a\u81f3\u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u6807\u8bed\uff1b\u6211\u628a\u5b83\u547d\u540d\u4e3aMicro-MORPG\u3002\u5929\u624d\u3002\n\u7136\u800c\uff0cMMO\u53ea\u6709\u5728\u521b\u9020\u4e30\u5bcc\u7684\u4e16\u754c\u3001\u6545\u4e8b\u548c\u4eba\u7269\u4e0a\u6295\u5165\u4e86\u6570\u5343\u5c0f\u65f6\u624d\u80fd\u771f\u6b63\u53d1\u6325\u4f5c\u7528\u3002\u6211\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5c0f\u533a\u57df\uff0c\u89d2\u8272\u53ef\u4ee5\u5728\u90a3\u91cc\u6740\u6b7b\u4e00\u4e9b\u9e21\uff0c\u83b7\u5f97\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u7136\u540e\u5347\u7ea7\uff1b\u4f46\u4ec5\u6b64\u800c\u5df2\u3002\u8fd9\u5c06\u6c38\u8fdc\u662f\u4e00\u4e2a\u4e00\u6b21\u6027\u7684\u3001\u4e0d\u6210\u719f\u7684\u9879\u76ee\uff0c\u6211\u6c38\u8fdc\u4e0d\u4f1a\u518d\u78b0\u5b83\u3002\n\u4e0d\u8fc7\uff0c\u201c\u7687\u5bb6\u6218\u6597\u201d\u6e38\u620f\u76ee\u524d\u786e\u5b9e\u5f88\u53d7\u6b22\u8fce\u3002\u5982\u679c\u4f60\u5bf9\u4ed6\u4eec\u4e0d\u719f\u6089\uff0c\u8fd9\u4e2a\u6982\u5ff5\u5f88\u7b80\u5355\uff1a\u628a\u5f88\u591a\u73a9\u5bb6\u6254\u8fdb\u7ade\u6280\u573a\uff0c\u8ba9\u4ed6\u4eec\u6218\u6597\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u4eba\u4f5c\u4e3a\u8d62\u5bb6\u3002\u60f3\u8981\u5f04\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u4e1c\u897f\u6709\u591a\u96be\u5462\uff1f\n\u8981\u5236\u4f5c\u6e38\u620f\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u9700\u8981\u4e00\u4e2a\u6e38\u620f\u5f15\u64ce\u6765\u9a71\u52a8\u5b83\u3002\u6211\u9009\u62e9\u4e86\u56e2\u7ed3\u3002\n\u6211\u6ca1\u6709\u592a\u591a\u4f7f\u7528Unity\u6216C#\u7684\u7ecf\u9a8c\uff0c\u6240\u4ee5\u5728\u6700\u521d\u7684\u51e0\u5929\u91cc\uff0c\u6211\u63a8\u51fa\u4e86\u4e00\u4e2a\u753115\u90e8\u5206\u7ec4\u6210\u7684Unity\u6559\u7a0b\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u7c7b\u4f3c2D\u7684\u6d41\u6c13\u6e38\u620f\u3002\u5b83\u770b\u8d77\u6765\u548c\u6211\u60f3\u8981\u6784\u5efa\u7684\u6e38\u620f\u6709\u76f8\u4f3c\u7684\u673a\u5236\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u5b83\u4eec\u3002\n\u6d41\u6c13\u822c\u7684\u6559\u7a0b\u5e76\u6ca1\u6709\u6559\u4f1a\u6211\u592a\u591a\uff0c\u4f46\u6211\u786e\u5b9e\u5b66\u4f1a\u4e86\u5982\u4f55\u5236\u4f5c\u52a8\u753b\u7cbe\u7075\u3002\u6211\u7684\u738b\u5ba4\u6218\u6597\u5c06\u8bbe\u5b9a\u5728\u4e00\u4e2a\u6709\u5251\u3001\u5492\u8bed\u548c\u5f13\u7684\u5e7b\u60f3\u4e16\u754c\u4e2d\uff1b\u57fa\u672c\u4e0a\u5c31\u662f\u60f3\u7740\u6307\u73af\u738b\u3002\n\u6211\u77e5\u9053\u6211\u60f3\u8ba9\u8fd9\u4e2a\u6e38\u620f\u6709\u4e00\u79cd\u590d\u53e4\u76848\u4f4d\u7684\u611f\u89c9\u3002\u827a\u672f\u7edd\u5bf9\u4e0d\u662f\u6211\u7684\u5f3a\u9879(\u867d\u7136\u4f60\u5728netflix.soy\u4e0a\u770b\u8fc7\u6211\u6f02\u4eae\u7684\u7f51\u7edc\u52a8\u753b\u4e86\u5417\uff1f)\u3002\u56e0\u6b64\uff0c\u6211\u6700\u7ec8\u8d2d\u4e70\u4e86\u8fd9\u4e2a\u6f02\u4eae\u76848\u4f4d\u7cbe\u7075\u5305\uff0c\u7528\u4e8e\u6211\u6240\u6709\u7684\u89d2\u8272\uff0c\u5e76\u4f7f\u7528\u6211\u65b0\u53d1\u73b0\u7684\u6280\u80fd\u5c06\u5b83\u4eec\u4e0e\u6e38\u620f\u4e2d\u7684\u89e6\u53d1\u5668\u6302\u94a9\u3002\u4f60\u5f97\u627f\u8ba4\uff0c\u5b83\u4eec\u771f\u7684\u5f88\u53ef\u7231\u3002\n\u4e0b\u4e00\u6b65\u662f\u8ba9\u6838\u5fc3\u673a\u5236\u5230\u4f4d\uff1a\u5728\u7ebf\u6e38\u620f\u3002\u8fd9\u90e8\u5206\u5de5\u7a0b\u8017\u65f6\u6700\u957f\u3002\u6211\u51b3\u5b9a\u4f7f\u7528Firebase\u7684\u5b9e\u65f6\u6570\u636e\u5e93\u4f5c\u4e3a\u6e38\u620f\u7684\u65e0\u670d\u52a1\u5668\u540e\u7aef\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u8fd9\u662f\u6211\u5728\u5236\u4f5c\u7f51\u7ad9\u4e4b\u524d\u4f7f\u7528\u7684\u4e1c\u897f\u3002\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u5728\u7ebf\u8fd0\u52a8\uff1a\n\u8fd9\u4e00\u6b65\u53d8\u5f97\u975e\u5e38\u8270\u96be\u3002\u867d\u7136\u4ece\u6280\u672f\u4e0a\u8bb2\u6211\u6709\u5728\u7ebf\u6d3b\u52a8\uff0c\u4f46\u5b83\u771f\u7684\u5f88\u4e0d\u6b63\u5e38\u3002\n\u661f\u671f\u5929\u8fc7\u53bb\u4e86\uff0c\u7b2c\u4e8c\u5929\uff0c\u6211\u5c06\u63a8\u51fa\u8fd9\u6b3e\u5fae\u6218\u7687\u5ba4\u6e38\u620f\uff0c\u4f5c\u4e3a\u6211\u6bcf\u5468\u4e00\u6b21\u7684\u5c0f\u9879\u76ee\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\u6295\u5165\u4e86\u5927\u7ea630\u4e2a\u5c0f\u65f6\uff0c\u4f46\u51e0\u4e4e\u6ca1\u6709\u594f\u6548\u3002\u5230\u5904\u90fd\u662f\u7ea2\u8272\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u7528\u6237\u5728\u5c4f\u5e55\u5468\u56f4\u51fa\u73b0\u6545\u969c\uff1a\u4e00\u56e2\u7cdf\u3002\n\u6211\u4eec\u7684\u9009\u62e9\u662f\u653e\u5f03\u5e76\u627f\u8ba4\u5931\u8d25\uff0c\u628a\u4e00\u4e2a\u5931\u8d25\u7684\u5e16\u5b50\u63a8\u51fa\u53bb\uff0c\u7136\u540e\u8f6c\u5230\u4e0b\u4e00\u4e2a\u9879\u76ee\u4e0a\uff0c\u6216\u8005\u7ee7\u7eed\u770b\u770b\u6211\u662f\u5426\u80fd\u5b8c\u6210\u8fd9\u4e2a\u9879\u76ee\u3002\n\u7b2c\u4e8c\u5468\u7684\u5468\u4e00\u5230\u5468\u4e09\u90fd\u662f\u4e3a\u4e86\u8ba9\u5728\u7ebf\u6e38\u620f\u66f4\u6d41\u7545\u3002\u5728\u4e09\u5929\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u5c06\u6211\u5728\u7f51\u4e0a\u8bfb\u5230\u7684\u5927\u7ea610\u4ef6\u4e0d\u540c\u7684\u4e1c\u897f\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4ee5\u6539\u5584\u8fd9\u4e00\u70b9\u3002\n\u4e0d\u77e5\u4f55\u6545\uff0c\u6211\u7684\u5f17\u5170\u514b\u5f0f\u7684\u65b9\u6cd5\u4ea7\u751f\u4e86\u51e0\u4e4e\u8db3\u591f\u597d\u7684\u5728\u7ebf\u6e38\u620f\u3002\u6211\u5728\u624b\u673a\u548c\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u6253\u5f00\u4e86\u6e38\u620f\uff0c\u5f53\u6211\u63a7\u5236\u4e00\u4e2a\u89d2\u8272\u5e76\u770b\u7740\u5b83\u5728\u53e6\u4e00\u4e2a\u5c4f\u5e55\u4e0a\u79fb\u52a8\u65f6\uff0c\u6211\u9ad8\u5174\u5730\u5fae\u7b11\u7740\u3002\n\u73b0\u5728\u6838\u5fc3\u529f\u80fd\u5df2\u7ecf\u5c31\u4f4d\uff0c\u6211\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8ba9\u8fd9\u4e2a\u6e38\u620f\u53d8\u5f97\u6709\u8da3\u4e86\u3002\u9996\u5148\u8981\u505a\u7684\u662f\u6218\u6597\u7cfb\u7edf\uff0c\u6211\u9700\u8981\u6211\u7684\u7cbe\u7075\u5c0f\u5175\u6765\u9020\u6210\u4f24\u5bb3\uff0c\u5e76\u63a5\u53d7\u4f24\u5bb3\u3002\u5609\u5b9d\u3002\n\u5468\u56db\u8fd8\u82b1\u5728\u4e86\u91cd\u8981\u7684\u529f\u80fd\u4e0a\uff0c\u5b9e\u9645\u4e0a\u8ba9\u6e38\u620f\u53d8\u5f97\u53ef\u4ee5\u73a9\u4e86\u3002\u8fd9\u5305\u62ec\u67e5\u627e\u53ef\u7528\u7684\u670d\u52a1\u5668\u3001\u52a0\u5165\u6e38\u620f\uff0c\u4ee5\u53ca\u5728\u53ea\u5269\u4e0b\u4e00\u540d\u73a9\u5bb6\u65f6\u7ed3\u675f\u6e38\u620f\u3002\u8fd9\u57fa\u672c\u4e0a\u662f\u6838\u5fc3\u6e38\u620f\u5faa\u73af\u3002\n\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4e00\u76f4\u5728\u4e00\u4e2a\u5c0f\u5c0f\u7684\u957f\u65b9\u5f62\u6218\u573a\u4e0a\u6d4b\u8bd5\u6211\u7684\u6e38\u620f\uff0c\u6211\u5f88\u5feb\u5c31\u53d1\u52a8\u4e86\u8d77\u6765\u3002\u9700\u8981\u4e00\u4e2a\u5408\u9002\u7684\u6218\u573a\u6765\u5bb9\u7eb310-20\u540d\u73a9\u5bb6\u3002\u8fd9\u662f\u6700\u7ec8\u7684\u5730\u56fe\uff1a\n\u63a5\u4e0b\u6765\u662f\u8c03\u5e73\u7cfb\u7edf\u3002\u73a9\u5bb6\u56e0\u6740\u6b7b\u5176\u4ed6\u89d2\u8272\u5e76\u8d62\u5f97\u6e38\u620f\u800c\u83b7\u5f97XP\u3002\n\u6700\u540e\uff0c\u5982\u679c\u6ca1\u6709\u4e00\u4e9b\u4f60\u53ef\u4ee5\u89e3\u9501\u7684\u6e38\u620f\u4e2d\u7684\u76ae\u80a4\uff0c\u4ec0\u4e48\u6837\u7684\u6218\u6597\u7687\u5ba4\u6e38\u620f\u624d\u7b97\u5b8c\u6574\u5462\uff1f\u6211\u589e\u52a0\u4e86\u4e24\u79cd\u76ae\u80a4\uff1a\u4e00\u79cd\u662f\u5347\u7ea7\u540e\u53ef\u4ee5\u8d5a\u5230\u7684\uff0c\u53e6\u4e00\u79cd\u662f\u53ef\u4ee5\u4e70\u5230\u7684\u3002\u6709\u4eba\u8981\u9e21\u76ae\u5417\uff1f\u6211\u73b0\u5728\u53ea\u9700\u8981\u4e00\u4e9b\u6218\u5229\u54c1\u677f\u6761\u7bb1\u3002\n\u6211\u7ec8\u4e8e\u8d70\u5230\u4e86\u7ec8\u70b9\u3002\u867d\u7136\u8fd9\u6b3e\u6e38\u620f\u4ecd\u7136\u6709\u6545\u969c\uff0c\u4f46\u6211\u8fc5\u901f\u5f39\u51fa\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u56fe\u6807\uff0c\u5e76\u7ed9\u6211\u7684\u6e38\u620f\u8d77\u4e86\u4e00\u4e2a\u540d\u5b57\uff1aWee Royale&#34\uff1b\u3002\u6211\u5f88\u81ea\u8c6a\u5730\u628a\u5b83\u4e0a\u4f20\u5230\u4e86Google Play\u5546\u5e97\u3002\n\u6574\u6574\u4e24\u4e2a\u661f\u671f\uff0c\u6211\u4e00\u76f4\u5728\u5236\u4f5c\u8fd9\u6b3e\u6e38\u620f\uff0c\u6211\u4e0d\u5f97\u4e0d\u72ec\u81ea\u5728\u4e24\u53f0\u8bbe\u5907\u4e0a\u73a9\u3002\u6211\u4f1a\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u73a9\u6e38\u620f\uff0c\u7136\u540e\u6211\u4f1a\u5728\u624b\u673a\u4e0a\u73a9\u6e38\u620f\u3002\u4e0d\u662f\u4f60\u80fd\u60f3\u8c61\u5230\u7684\u6700\u6709\u8da3\u7684\u73a9\u6cd5\u3002\n\u5f53\u6e38\u620f\u5728Google Play\u5546\u5e97\u8fdb\u884c\u5904\u7406\u65f6\uff0c\u6211\u60f3\u6d4b\u8bd5\u4e00\u4e9b\u4e1c\u897f\u3002\u6211\u5728\u6211\u7684\u7b2c\u4e00\u53f0\u8bbe\u5907\u4e0a\u52a0\u5165\u4e86\u4e00\u4e2a\u6e38\u620f\uff0c\u7acb\u523b\u5c31\u88ab\u6254\u8fdb\u4e86\u4e00\u4e2a\u6e38\u620f\u4e2d\u3002\u80af\u5b9a\u662f\u6545\u969c\u5427\uff1f\n\u4f46\u662f\u4e0d\u662f\u7684\uff01\u6211\u548cGoogle Play\u7684\u67d0\u4e2a\u4eba\u5728\u73a9\u4e00\u4e2a\u6e38\u620f\uff0c\u8bc4\u8bba\u8fd9\u4e2a\u6e38\u620f\u3002\u4ed6\u770b\u5230\u4e86\u6211\uff0c\u6211\u4e5f\u770b\u5230\u4e86\u4ed6\uff0c\u6211\u4eec\u5c31\u4e00\u51b3\u96cc\u96c4\u4e86\u3002\u8fd9\u662f\u53f2\u8bd7\u822c\u7684\u8868\u6f14\u3002\n\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u548c\u522b\u4eba\u73a9\u6211\u7684\u6e38\u620f\u3002\u8fd9\u4e00\u5b9a\u662f\u6211\u7ecf\u5386\u8fc7\u7684\u6700\u9177\u7684\u7f16\u7a0b\u4f53\u9a8c\u4e4b\u4e00\uff0c\u56e0\u4e3a\u5b83\u592a\u51fa\u4e4e\u610f\u6599\u4e86\u3002\u4e16\u754c\u4e0a\u67d0\u4e2a\u5730\u65b9\u7684\u67d0\u4e2a\u968f\u673a\u7684\u4eba\u5728\u73a9\u8fd9\u4e2a\u6211\u7d27\u5f20\u4e86\u4e24\u4e2a\u661f\u671f\u7684\u73a9\u610f\u513f\uff0c\u5b83\u771f\u7684\u8d77\u4f5c\u7528\u4e86\u3002\u4ed6\u4eec\u4e0d\u77e5\u9053\u8fd9\u573a\u6218\u6597\u6709\u591a\u6709\u610f\u4e49(\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u6211\u8d62\u4e86)\u3002\n\u6700\u540e\uff0c\u6211\u628a\u6e38\u620f\u5bc4\u7ed9\u4e86\u6211\u7684\u5144\u5f1f\u548c\u4e00\u4f4d\u670b\u53cb\uff0c\u8ba9\u4ed6\u4eec\u548c\u6211\u4e00\u8d77\u73a9\u3002\u8fd9\u662f\u6211\u4eec\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u4e2a4\u4eba\u6e38\u620f\uff1a\n\u6211\u73b0\u5728\u5bf9\u8fd9\u573a\u6bd4\u8d5b\u771f\u7684\u5f88\u6ee1\u610f\uff0c\u4f46\u662f\u8fd8\u8fdc\u8fdc\u6ca1\u6709\u7ed3\u675f\u3002\u6e38\u620f\u7684\u90e8\u5206\u90e8\u5206\u88ab\u7834\u574f\uff0c\u529f\u80fd\u7f3a\u5931\uff0c\u4f46\u662f\u6838\u5fc3\u7684\u6e38\u620f\u5faa\u73af\u5df2\u7ecf\u5230\u4f4d\uff0c\u8fd9\u624d\u662f\u6700\u91cd\u8981\u7684\u3002\u5b83\u5df2\u7ecf\u51c6\u5907\u597d\u901a\u8fc7\u5065\u5eb7\u5242\u91cf\u7684\u53cd\u9988\u6765\u6539\u8fdb\u3002\n\u6211\u8feb\u4e0d\u53ca\u5f85\u5730\u60f3\u65f6\u4e0d\u65f6\u5730\u51fa\u73b0\u6765\u5b9e\u73b0\u4e00\u9879\u65b0\u529f\u80fd\u3002\u6211\u559c\u6b22\u5728\u4e00\u4e2a\u661f\u671f\u5929\u7684\u4e0b\u5348\u82b1\u51e0\u4e2a\u5c0f\u65f6\u624b\u91cc\u62ff\u7740\u5496\u5561\uff0c\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u89d2\u8272\u6216\u65b0\u7684\u5492\u8bed\uff0c\u7136\u540e\u63a8\u51fa\u5b83\u4f9b\u51e0\u4e2a\u4eba\u73a9\u3002\n\u8fd9\u5468\u6211\u5f00\u59cb\u4e5e\u8ba8\uff0c\u4e0d\u77e5\u9053\u5982\u4f55\u5728Unity\u4e2d\u5236\u4f5c\u6e38\u620f\uff0c\u73b0\u5728\u6211\u6709\u4e86\u4e00\u4e2a\u6210\u54c1\uff0c\u6211\u53ef\u4ee5\u5728\u5b83\u7684\u57fa\u7840\u4e0a\u8fdb\u4e00\u6b65\u6539\u8fdb\u3002\n\u8fd9\u5468\u6211\u6ca1\u80fd\u9009\u62e9\u4e00\u4e2a\u53ef\u7ba1\u7406\u7684\u9879\u76ee\u5728\u4e00\u5468\u5185\u5b8c\u6210\u3002\u6211\u6bcf\u5929\u65e9\u4e0a\u90fd\u5728\u5fd9\u4e8e\u5c0f\u9879\u76ee\u7684\u5de5\u4f5c\uff0c\u7136\u540e\u662f\u767d\u5929\u7684\u65e5\u5e38\u5de5\u4f5c\u3002\n\u6211\u8fd8\u5728\u60f3\u6574\u4e2a\u5c0f\u9879\u76ee\u7684\u4e8b\u60c5\uff0c\u4f46\u53ea\u8981\u6211\u5728\u505a\u4e8b\u60c5\uff0c\u5e76\u5b9a\u671f\u5b8c\u6210\u5b83\u4eec\uff0c\u6211\u5c31\u4e0d\u4f1a\u4ecb\u610f\u3002\u73b0\u5728\uff0c\u53bb\u4e0b\u8f7dWee Royale\uff0c\u8ba9\u6211\u77e5\u9053\u4f60\u7684\u60f3\u6cd5\uff0c\u6211\u4f1a\u5728\u7f51\u4e0a\u770b\u5230\u4f60\u7684\uff01", "note_en": "The past two weeks I built &amp; launched a tiny battle royale game. You can play it  here.\n    If you ask most programmers about why they got into computer science, I guarantee the majority will say &#34;video games&#34;.\n  I definitely fall into this category. When I enrolled into my CS degree I had one thing in mind: make some games, become a game dev, then retire as a millionaire when I made Flappy Bird 2.\n  However, somewhere along the way I fell out of love with the idea. I&#39;d heard endless stories about overtime &amp; low wages in the gaming industry, launched my own game  Trig with minor success, and generally grown up a bit and was less interested in games.\n  Making games was something I really enjoyed though, even if the games I made weren&#39;t that great. The feeling of someone playing a game you&#39;ve created and actually enjoying it is an unrivalled feeling. You&#39;ve literally coded happiness.\n  Someone once told me their mum had spent 3 hours playing a game I&#39;d created on her iPad one afternoon. Just hearing that felt 10 times more rewarding than the measely $42 I&#39;d generated through ads within the game.\n        I set out on this project wanting to make a tiny massively multiplayer online role playing game (MMORPG): think tiny version of World of Warcraft. I even had a great tag-line; I&#39;d christen it a Micro-MORPG. Genius.\n  However, MMO&#39;s only really work because thousands of hours have been put into creating rich worlds, stories and characters. I could create a small zone where a character could kill some chickens, get some xp and level up; but that would be it. It would forever be a throwaway, half-baked project that I&#39;d never touch again.\n  Battle Royale games are really popular at the moment though. If you&#39;re unfamiliar with them, the concept is simple: throw lots of players into an arena and let them battle it out until only one remains as the winner. How hard could it be to whip up one of those?\n        To make a game, you ideally need a game engine to power it. I chose Unity.\n  I didn&#39;t have much experience with Unity, or C# for that matter, so for the first few days I powered out a 15-part Unity tutorial creating a 2D roguelike game. It looked like it had similar mechanics to the game I wanted to build, so I thought I could just copy them over.\n    The roguelike tutorial didn&#39;t teach me too much, but I did learn how to make animated sprites. My battle royale was going to be set in a fantasy world with swords, spells and bows; basically think Lord of the Rings.\n  I knew that I wanted the game to have a retro 8-bit feel to it. Art is definitely not my strong suit (although did you see my beautiful net animation on  netflix.soy?) I therefore ended up purchasing this beautiful  8-bit sprite pack to use for all my characters, and hooked them up to triggers within my game using my newly found skills. They&#39;re pretty cute you&#39;ve got to admit.\n      The next step was to get the core mechanic in place: online gameplay. This part of the project took the longest. I decided to use Firebase&#39;s realtime database as a serverless backend solution to the game, as it was something I&#39;d used beforehand when making websites. This was my first ever &#34;online&#34; movement:\n    This step became really hard. Although I technically had online movement, it was really glitchy.\n  Sunday rolled around and I was due to launch this micro battle royale as my weekly Tiny Project the following day. I&#39;d sunk about 30 hours into this project so far and it barely worked. Red error messages were flying everywhere, users were glitching around the screen: it was a mess.\n  The choice was give up and admit defeat, push out an &#34;I failed&#34; post and move onto the next project, or keep going to see if I could pull this off.\n      Monday-Wednesday of Week 2 was all about making online gameplay smoother. Over three days I combined about 10 different things together that I&#39;d read online to improve this.\n  Somehow, my frankenstine approach had produced online gameplay that was just about good enough. I opened the game on my phone and my laptop, and smiled with glee as I controlled a character and watched it move on another screen.\n      Now the core feature was in place, I could actually make this game fun. First things first was a combat system, I needed my little sprite guys to deal damage, and take damage. Ka-pow.\n    Thursday was also spent on important features to actually make the game playable. This included finding an available server, joining a game, and ending a game when there&#39;s only one player left. This was essentially the core game loop.\n    Up until this point I&#39;d been testing my game in a tiny rectangular battlefield that I quickly whipped up. A proper battlefield to hold 10-20 players was needed. Here&#39;s the final map:\n    Next up was a leveling system. Players get XP for killing other characters and winning games.\n  Finally, what Battle Royale would be complete without some in-game skins that you could unlock? I added two types of skins: some you could earn when you level up, and some that you could buy. Chicken skin anyone? I just need some loot crates now...\n      I&#39;d finally reached the end. Although the game was still glitchy, I whipped up an app icon and gave my game a title: &#34;Wee Royale&#34;. I proudly uploaded it to the Google Play store.\n    The whole two weeks I&#39;d been making this game, I&#39;d had to play it with myself on two devices. I&#39;d join a game on my laptop, then I&#39;d join a game on my phone. Not the funnest way to play as you can probably imagine.\n  I wanted to test a few things out whilst the game was processing in the Google Play store. I joined a game on my first device and was instantly thrown into a game. Surely a glitch?\n  But no! I was in a game with somebody from Google Play reviewing the game. He saw me, I saw him, and we just battled it out. It was epic.\n  This was the first time I&#39;d ever played my game with someone else. It&#39;s got to be one of the coolest programming experiences I&#39;ve had because it was so unexpected. Some random person, somewhere in the world was playing this thing I&#39;d stressed over for two weeks and it was actually working. They had no idea how meaningful that battle was (I won by the way).\n  In the end I did send the game out to my brothers and a friend to playtest with me. Here&#39;s our first ever 4-person game in action:\n      I am really happy with this game at the moment, but its nowhere near done. Parts of the game are broken and features are missing, however the core game loop is in place and that&#39;s all that matters. It&#39;s ready to be improved with a healthy dose of feedback.\n  I can&#39;t wait to just pop in every now and again to implement a new feature. I like the idea of spending a couple of hours one Sunday afternoon with a coffee in hand, adding in a new character or a new spell, then launching it for a few people to play.\n      I set out at the beggining of this week not knowing how to make a game in Unity, and now have a finished product that I can build on and improve further.\n  I failed this week in choosing a manageable project to complete within a week. I was pulling some very long days working on Tiny Projects in the morning, then my regular job in the day.\n  I&#39;m still figuring out this whole Tiny Projects thing, but as long as I&#39;m working on things and completing them regularly I&#39;m okay with that. For now, go and download  Wee Royale, let me know what you think, and I&#39;ll see you online!", "posttime": "2020-06-09 16:03:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u6218\u6597,battle", "title": "\u6253\u9020\u4e00\u6b3e\u7687\u5bb6\u6218\u6597\u6e38\u620f", "title_en": "Building a Battle Royale Game", "transed": 1, "url": "https://tinyprojects.dev/projects/battle_royale", "via": "", "real_tags": ["\u6e38\u620f", "\u6218\u6597", "battle"]}, {"category": "", "categoryclass": "", "imagename": "b42f8944a13e60f8022c4cc07344ad0a.jpg", "infoid": 1005822, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e86\u89e3\u66f4\u591a\u6545\u4e8b\u4e00\u5bb6\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u5236\u9020\u516c\u53f8\u51b3\u5b9a\u79bb\u5f00\u8fd9\u5ea7\u57ce\u5e02\uff0c\u8be5\u516c\u53f8\u7684\u6240\u6709\u8005\u8868\u793a\uff0c\u4ed6\u4e0d\u80fd\u4fe1\u4efb\u5728\u6700\u8fd1\u7684\u9a9a\u4e71\u4e2d\u4efb\u7531\u4ed6\u7684\u5de5\u5382\u70e7\u6bc1\u7684\u516c\u804c\u4eba\u5458\u3002\u8fd9\u4e00\u4e3e\u63aa\u5c06\u4f7f\u8be5\u5e02\u5931\u53bb\u7ea650\u4e2a\u5de5\u4f5c\u5c97\u4f4d\u3002\n\u4ed6\u4eec\u4e0d\u5728\u4e4e\u6211\u7684\u751f\u610f\uff0c\u514b\u91cc\u65af\u00b7\u6000\u7f57\u8d1d\u514b(Kris Wyrobek)\u8bf4\uff0c\u4ed6\u662f7-Sigma Inc.\u7684\u603b\u88c1\u517c\u6240\u6709\u8005\uff0c\u8be5\u516c\u53f8\u81ea1987\u5e74\u4ee5\u6765\u4e00\u76f4\u5728\u7b2c26\u5927\u90532843\u53f7\u8fd0\u8425\u3002\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u5357\u90e8\u3002\u4ed6\u4eec\u6ca1\u6709\u4fdd\u62a4\u6211\u4eec\u7684\u4eba\u6c11\u3002\u6211\u4eec\u90fd\u662f\u9760\u81ea\u5df1\u3002\nWyrobek\u8bf4\uff0c\u5de5\u5382\u901a\u5e38\u8fd0\u8425\u5230\u665a\u4e0a11\u70b9\uff0c\u5728\u9a9a\u4e71\u7684\u7b2c\u4e00\u4e2a\u665a\u4e0a\u63d0\u524d\u56db\u4e2a\u5c0f\u65f6\u5173\u95ed\uff0c\u56e0\u4e3a\u4ed6\u60f3\u8ba9\u4ed6\u7684\u5de5\u4eba\u4e0d\u53d7\u4f24\u5bb3\u3002\u4ed6\u8bf4\uff0c\u5f53\u9694\u58c1\u6b63\u5728\u5efa\u8bbe\u7684\u8017\u8d443000\u4e07\u7f8e\u5143\u7684\u4e2d\u57ce\u89d2\u4fdd\u969c\u6027\u4f4f\u623f\u516c\u5bd3\u697c\u53d1\u751f\u706b\u707e\u65f6\uff0c\u4f4f\u5728\u9644\u8fd1\u7684\u4e00\u540d\u751f\u4ea7\u4e3b\u7ba1\u548c\u4e00\u540d\u7ef4\u62a4\u5de5\u4eba\u611f\u5230\u9707\u60ca\u3002\n\u9a9a\u4e71\u5f00\u59cb\u4e24\u5929\u540e\uff0c\u5dde\u957f\u8482\u59c6\u00b7\u6c83\u5c14\u5179(Tim Walz)\u5c06\u8be5\u5e02\u7684\u53cd\u5e94\u63cf\u8ff0\u4e3a\u53ef\u60b2\u7684\u5931\u8d25\u3002\u6c83\u5c14\u5179\u547d\u4ee4\u8fdb\u5165\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u7684\u56fd\u6c11\u8b66\u536b\u961f\u5e94\u5e02\u957f\u96c5\u5404\u5e03\u00b7\u5f17\u96f7(Jacob Frey)\u7684\u8981\u6c42\u6062\u590d\u79e9\u5e8f\u3002\u66b4\u529b\u4e8b\u4ef6\u6709\u65f6\u4f1a\u8ba9\u4e0a\u4e2a\u6708\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7(George Floyd)\u6b7b\u4e8e\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u8b66\u5bdf\u4e4b\u624b\u7684\u548c\u5e73\u6297\u8bae\u6d3b\u52a8\u9eef\u7136\u5931\u8272\u3002\n\u5f17\u96f7\u5468\u4e00\u8868\u793a\uff0c\u4ed6\u4e0d\u77e5\u90537-Sigma\u51b3\u5b9a\u642c\u8fc1\uff0c\u4f46\u4ed6\u62d2\u7edd\u900f\u9732\u8be5\u516c\u53f8\u7684\u51b3\u5b9a\u662f\u5426\u53cd\u6620\u4e86\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u5e02\u653f\u5e9c\u9886\u5bfc\u4eba\u8bd5\u56fe\u8bf4\u670d\u4f01\u4e1a\u4e3b\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u91cd\u5efa\u65f6\u9762\u4e34\u7684\u6311\u6218\u3002\u8bb8\u591a\u4f01\u4e1a\u4e3b\u6279\u8bc4\u4e86\u8fd9\u5ea7\u57ce\u5e02\uff0c\u79f0\u4ed6\u4eec\u7684\u6c42\u52a9\u6ca1\u6709\u5f97\u5230\u56de\u5e94\u3002\n\u5f17\u96f7\u8bf4\uff0c\u8fd9\u5ea7\u57ce\u5e02\u88ab\u9a9a\u4e71\u6df9\u6ca1\u4e86\u3002\u4ed6\u8bf4\uff0c\u5728\u6297\u8bae\u671f\u95f4\uff0c\u6bcf\u8f86\u6d88\u9632\u8f66\u90fd\u5728\u8fd0\u8425\u3002\n\u5f17\u96f7\u8bf4\uff0c\u8fd9\u662f\u4e00\u573a\u536b\u5175\u89c4\u6a21\u7684\u5371\u673a\uff0c\u9700\u8981\u536b\u5175\u89c4\u6a21\u7684\u53cd\u5e94\u3002\u800c\u4e14\uff0c\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u56fd\u6c11\u8b66\u536b\u961f\u7684\u5168\u5458\u5b58\u5728--\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u81ea\u4ece\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u4ee5\u6765\u5c31\u6ca1\u6709\u90e8\u7f72\u8fc7\u56fd\u6c11\u8b66\u536b\u961f--\u7ed3\u679c\u5c31\u5927\u4e0d\u76f8\u540c\u4e86\u3002\n\u8be5\u5e02\u9996\u6b21\u8d22\u4ea7\u635f\u5931\u8c03\u67e5\u663e\u793a\uff0c\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u8fd11000\u5904\u5546\u4e1a\u5730\u4ea7\u5728\u9a9a\u4e71\u4e2d\u53d7\u635f\uff0c\u5176\u4e2d52\u5bb6\u5546\u94fa\u5b8c\u5168\u88ab\u6bc1\uff0c\u5176\u4ed630\u5904\u5730\u70b9\u53d7\u635f\u4e25\u91cd\u3002\n\u4e1a\u4e3b\u548c\u4fdd\u9669\u4e13\u5bb6\u4f30\u8ba1\uff0c\u635f\u5931\u53ef\u80fd\u8d85\u8fc75\u4ebf\u7f8e\u5143\u3002\u8fd9\u5c06\u4f7f\u53cc\u5b50\u57ce\u9a9a\u4e71\u6210\u4e3a\u7f8e\u56fd\u5386\u53f2\u4e0a\u4ee3\u4ef7\u7b2c\u4e8c\u9ad8\u7684\u5185\u4e71\uff0c\u4ec5\u6b21\u4e8e1992\u5e74\u6d1b\u6749\u77f6\u7684\u9a9a\u4e71\uff0c\u90a3\u6b21\u9a9a\u4e71\u4e5f\u662f\u7531\u4e0e\u8b66\u65b9\u7684\u79cd\u65cf\u7d27\u5f20\u5f15\u53d1\u7684\uff0c\u4ee5\u4eca\u5929\u7684\u7f8e\u5143\u8ba1\u7b97\uff0c\u9020\u6210\u4e8614\u4ebf\u7f8e\u5143\u7684\u635f\u5931\u3002\n\u4e3a\u4e86\u52a0\u901f\u590d\u82cf\uff0c\u5f17\u96f7\u5468\u4e00\u5ba3\u5e03\u6210\u7acb\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u524d\u8fdb\uff1a\u73b0\u5728\u793e\u533a\u8054\u76df\uff0c\u5176\u4e2d\u5305\u62ec\u5f53\u5730\u5546\u4e1a\u548c\u793e\u533a\u56e2\u4f53\u7684\u4ee3\u8868\u3002\u5f17\u96f7\u8bf4\uff0c\u8be5\u7ec4\u7ec7\u5c06\u5bfb\u6c42\u9ed1\u4eba\u5c45\u6c11\u548c\u4f01\u4e1a\u4e3b\u7684\u610f\u89c1\uff0c\u4ee5\u786e\u4fdd\u91cd\u5efa\u5de5\u4f5c\u7b26\u5408\u4ed6\u4eec\u7684\u9700\u6c42\u3002\n\u5f17\u96f7\u8bf4\uff0c\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7\u642c\u5230\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u662f\u4e3a\u4e86\u91cd\u65b0\u5f00\u59cb\u3002\u4e3a\u4e86\u7eaa\u5ff5\u4ed6\u548c\u5728\u4ed6\u4e4b\u524d\u53d7\u5bb3\u7684\u51e0\u4ee3\u9ed1\u4eba\uff0c\u6211\u4eec\u5c06\u91cd\u5efa\u4e00\u4e2a\u66f4\u5f3a\u5927\u3001\u66f4\u516c\u5e73\u3001\u66f4\u5305\u5bb9\u7684\u57ce\u5e02\u3002\n\u5f17\u96f7\u8bf4\uff0c\u8054\u76df\u5c06\u4ece\u5e7f\u6cdb\u7684\u79c1\u4eba\u548c\u516c\u5171\u5408\u4f5c\u4f19\u4f34\u90a3\u91cc\u5bfb\u6c42\u8d22\u653f\u5e2e\u52a9\uff0c\u4f46\u4ed6\u62d2\u7edd\u900f\u9732\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u5e02\u613f\u610f\u4e3a\u91cd\u5efa\u5de5\u4f5c\u627f\u8bfa\u591a\u5c11\u8d44\u91d1\uff0c\u79f0\u8fd9\u8fd8\u4e3a\u65f6\u8fc7\u65e9\u3002\u4ed6\u8bf4\uff0c\u8be5\u7ec4\u7ec7\u8fd8\u6ca1\u6709\u7b79\u8d44\u76ee\u6807\u3002\n\u5f17\u96f7\u8bf4\uff0c\u8fd9\u5ea7\u57ce\u5e02\u4e5f\u9700\u8981\u5c3d\u81ea\u5df1\u7684\u4e00\u4efd\u529b\u91cf\uff0c\u5e76\u6307\u51fa\u4ed6\u5c06\u8981\u6c42\u5c3d\u53ef\u80fd\u5feb\u5730\u53d1\u653e\u4efb\u4f55\u65b0\u7684\u8bb8\u53ef\u8bc1\u6216\u6267\u7167\u3002\nWyrobek\u8bf4\uff0c\u73b0\u5728\u628a\u4ed6\u7684\u516c\u53f8\u7559\u5728\u8fd9\u5ea7\u57ce\u5e02\u5df2\u7ecf\u592a\u665a\u4e86\u30027-Sigma\u662f\u751f\u4ea7\u9ad8\u901f\u6253\u5370\u7cfb\u7edf\u4e2d\u7528\u4e8e\u751f\u6210\u94f6\u884c\u5bf9\u8d26\u5355\u548c\u793e\u4fdd\u652f\u7968\u7684\u7cbe\u5bc6\u6eda\u7b52\u7684\u9886\u5148\u8005\u3002\n\u5f53\u88ab\u95ee\u53ca\u5728\u9a9a\u4e71\u53d1\u751f\u524d\u4ed6\u662f\u5426\u8003\u8651\u8fc7\u642c\u8fc1\u65f6\uff0c\u6000\u7f57\u8d1d\u514b\u8bf4\uff0c\u201c\u4e0d\u662f\u5728\u6211\u6700\u75af\u72c2\u7684\u5669\u68a6\u91cc\u3002\u5468\u4e00\uff0c\u4ed6\u6b63\u5728\u6574\u7406\u5269\u4f59\u7684\u751f\u610f\uff0c\u60f3\u529e\u6cd5\u91cd\u65b0\u5f00\u59cb\u8fd0\u8425\u3002\u201d\n\u4ed6\u8bf4\uff1a\u6211\u4eec\u5bf9\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u6301\u8c28\u614e\u4e50\u89c2\u6001\u5ea6\u3002\u4f46\u6211\u4eec\u5728\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u80af\u5b9a\u505a\u4e0d\u5230\u3002", "note_en": "See more of the story  A Minneapolis manufacturing company has decided to leave the city, with the company&#39;s owner saying he can&#39;t trust public officials who allowed his plant to burn during the recent riots. The move will cost the city about 50 jobs.\n  &#34;They don&#39;t care about my business,&#34; said Kris Wyrobek, president and owner of 7-Sigma Inc., which has operated since 1987 at 2843 26th Av. in south Minneapolis. &#34;They didn&#39;t protect our people. We were all on our own.&#34;\n    Wyrobek said the plant, which usually operates until 11 p.m., shut down about four hours early on the first night of the riots because he wanted to keep his workers out of harm&#39;s way. He said a production supervisor and a maintenance worker who live in the neighborhood became alarmed when fire broke out at the $30 million Midtown Corner affordable housing apartment complex that was under construction next door.\n    Two days after the riots began, Gov. Tim Walz described the city&#39;s response as an &#34;abject failure.&#34; Walz ordered the National Guard into Minneapolis to restore order at the request of Mayor Jacob Frey. The violence sometimes overshadowed peaceful protests over the death last month of George Floyd at the hands of Minneapolis police officers.\n    Frey said Monday that he was unaware of 7-Sigma&#39;s decision to move, and he declined to say whether the company&#39;s decision reflects the challenges facing city leaders as they try to convince business owners to rebuild in Minneapolis. Many business owners have criticized the city, saying their pleas for help went unanswered.\n  Frey said the city was overwhelmed by the riots. He said every fire truck was operating during the protests.\n  &#34;This was a Guard-sized crisis and demanded a Guard-sized response,&#34; Frey said. &#34;And once we had the full presence of the National Guard \u2014 which by the way hasn&#39;t been deployed since World War II \u2014 there was a significantly different result.&#34;\n  The city&#39;s first survey of property damage shows that nearly 1,000 commercial properties in Minneapolis were damaged during the riots, including 52 businesses that were completely destroyed and 30 other locations that sustained severe damage.\n  Owners and insurance experts estimate the costs of the damage could exceed  $500 million. That would make the Twin Cities riots the second-costliest civil disturbance in U.S. history, trailing only those in Los Angeles in 1992, which were also sparked by racial tensions with police and had $1.4 billion in damages in today&#39;s dollars.\n  To accelerate the recovery, Frey announced Monday the creation of Minneapolis Forward: Community Now Coalition, which includes representatives of local business and community groups. Frey said the group will seek input from black residents and business owners to make sure rebuilding efforts accommodate their needs.\n  &#34;George Floyd moved to Minneapolis for a fresh start,&#34; Frey said. &#34;In honoring his memory and generations of black people who have been victimized before him, we will rebuild as a stronger, more equitable and more inclusive city.&#34;\n  Frey said the coalition will seek financial help from a broad range of private and public partners, but he refused to say how much money the city of Minneapolis is willing to commit to the rebuilding effort, saying that would be &#34;premature.&#34; He said the group does not yet have a fundraising goal.\n  &#34;The city will need to do its part, as well,&#34; said Frey, noting that he will request that any new permits or license be &#34;expedited as much as possible.&#34;\n  Wyrobek said it is too late to keep his company in the city. 7-Sigma is a leader in the production of precision rollers used in high-speed printing systems used to produce bank statements and social security checks.\n  When asked if he thought of relocating before the riots, Wyrobek said, &#34;not in my wildest nightmare.&#34; On Monday, he was sorting through the remnants of his business, figuring out how to get up and running again.\n  &#34;We are cautiously optimistic we can do that,&#34; he said. &#34;But we are certainly not able to do that in Minneapolis.&#34;", "posttime": "2020-06-09 15:47:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d3b\u52a8,burned,\u9a9a\u4e71", "title": "\u660e\u5c3c\u963f\u6ce2\u5229\u65af\u6297\u8bae\u6d3b\u52a8\u6f14\u53d8\u4e3a\u66b4\u529b\u642c\u8fc1\u65f6\u70e7\u6bc1\u7684\u5236\u9020\u5546", "title_en": "Manufacturer that burned as Minneapolis protests turned violent to relocate", "transed": 1, "url": "https://m.startribune.com/manufacturer-that-burned-during-mpls-riots-plans-to-move-out-of-the-city/571104922/", "via": "", "real_tags": ["\u6d3b\u52a8", "burned", "\u9a9a\u4e71"]}, {"category": "", "categoryclass": "", "imagename": "fd7481f3ceb9cabd3e2ba0b67a260fc2.jpeg", "infoid": 1005821, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u901a\u5e38\u662f\u7167\u7247\u4e2d\u552f\u4e00\u7684\u9ed1\u4eba\u5b69\u5b50\u3002\u6211\u5df2\u7ecf\u638c\u63e1\u4e86\u4e00\u4e2a\u6070\u5230\u597d\u5904\u7684\u9ed1\u4eba\u7b11\u8bdd\uff0c\u9002\u5408\u8bf1\u5bfc\u4e00\u79cd\u8d1f\u7f6a\u611f\uff0c\u201c\u4f60\u60f3\u4e86\u4f46\u8bf4\u4e0d\u51fa\u6765\u201d\uff0c\u6211\u7684\u767d\u4eba\u540c\u9f84\u4eba\u7b11\u4e86\u3002\u6211\u77e5\u9053\u6740\u624b\u5bf9\u5e03\u83b1\u585e\u5fb7\u5148\u751f\u8bf4\u7684\u6240\u6709\u8bdd\u3002\u6211\u662f\u4e00\u4e2a\u8c61\u5f81\u6027\u7684\u9ed1\u4eba\u670b\u53cb\u3002\u767d\u4eba\u7fa4\u4f53\u4e2d\u7684\u9ed1\u4eba\u3002\u8fd9\u4e2a\u6807\u9898\u6839\u672c\u4e0d\u662f\u5bf9\u6211\u4eba\u9645\u5173\u7cfb\u6df1\u5ea6\u7684\u8bc4\u8bba\u3002\u6211\u5f53\u7136\u5f88\u5e78\u8fd0\u80fd\u6709\u6211\u8fd9\u6837\u7684\u670b\u53cb\u3002\u4f46\u4ece\u8fd9\u4e2a\u8bcd\u7684\u6240\u6709\u5b9a\u4e49\u6765\u770b\uff0c\u6211\u5728\u5f88\u591a\u65b9\u9762\u90fd\u662f\u5b83\u7684\u5178\u8303\u3002\u8003\u8651\u5230\u73b0\u5728\u6b63\u5728\u8fdb\u884c\u7684\u8bb8\u591a\u5173\u4e8e\u7cfb\u7edf\u6027\u79cd\u65cf\u4e3b\u4e49\u7684\u5bf9\u8bdd\uff0c\u5982\u679c\u4e0d\u5229\u7528\u6211\u4f5c\u4e3a\u4e0d\u540c\u767d\u4eba\u793e\u533a\u4e2d\u53d7\u4eba\u5c0a\u656c\u7684\u670b\u53cb\u7684\u5730\u4f4d\u6765\u4e3a\u76ee\u524d\u7684\u5bf9\u8bdd\u505a\u51fa\u8d21\u732e\uff0c\u90a3\u5c06\u662f\u9519\u8bef\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u76f8\u4fe1\u6211\u7684\u6545\u4e8b\u5728\u5f88\u591a\u65b9\u9762\u90fd\u76f4\u63a5\u8bf4\u660e\u4e86\u65b0\u4e00\u4ee3\u79cd\u65cf\u4e3b\u4e49\u7684\u9690\u853d\u6027\u8d28-\u5b83\u7684\u7ed3\u6784\u6027\u548c\u9690\u542b\u7684\u504f\u89c1-\u6240\u4ee5\u5b83\u53ef\u80fd\u4f1a\u8bc1\u660e\u5bf9\u6211\u8ba4\u8bc6\u7684\u8bb8\u591a\u5bfb\u6c42\u66f4\u597d\u7406\u89e3\u7684\u4eba\u6709\u5e2e\u52a9\u3002\n\u4ece\u5c0f\u5230\u5927\uff0c\u6211\u4f4f\u5728\u6ce2\u58eb\u987f\u5e02\u4e2d\u5fc3\u7684\u7f57\u514b\u65af\u4f2f\u91cc\u3002\u6211\u5728\u57ce\u5916\u7684\u90ca\u533a\u901a\u8fc7\u4e00\u4e2a\u540d\u4e3aMetco\u7684\u9879\u76ee\u5ea6\u8fc7\u4e86\u6211\u7684\u6240\u6709\u4e0a\u5b66\u5c81\u6708\u3002Metco\u9879\u76ee\u662f\u7f8e\u56fd\u6301\u7eed\u65f6\u95f4\u6700\u957f\u7684\u5fd7\u613f\u5b66\u6821\u5e9f\u9664\u79cd\u65cf\u9694\u79bb\u9879\u76ee\uff0c\u59cb\u4e8e60\u5e74\u4ee3\u672b\u3002\u6211\u548c\u4e24\u4e2a\u5144\u5f1f\u59d0\u59b9\u5728\u9a6c\u8428\u8bf8\u585e\u5dde\u97e6\u65af\u987f\u4e0a\u5b66\uff0c\u90a3\u91cc\u662f\u7f8e\u56fd\u6700\u5bcc\u6709\u7684\u57ce\u9547\u4e4b\u4e00\u3002\u8fd9\u4e2a\u5730\u65b9\u5f88\u5feb\u5c31\u6210\u4e86\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u5bb6\uff0c\u6211\u4f1a\u628a\u5b83\u7b49\u540c\u4e8e\u6211\u548c\u6ce2\u58eb\u987f\u4e00\u8d77\u957f\u5927\u7684\u5730\u65b9\u3002\u6211\u4eec\u4e09\u4e2a\u9ad8\u4e2d\u6bd5\u4e1a\u540e\u90fd\u505a\u5f97\u5f88\u597d\u3002\u6211\u4eec\u90fd\u66fe\u662f\u8fd9\u6240\u5b66\u6821\u7684\u8054\u5408\u6821\u957f\uff0c\u6211\u548c\u54e5\u54e5\u90fd\u662f\u8db3\u7403\u961f\u961f\u957f\uff0c\u6211\u4eec\u4e09\u4e2a\u90fd\u8fdb\u5165\u4e86\u4e00\u6d41\u5927\u5b66\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u5bf9\u7cfb\u7edf\u6027\u79cd\u65cf\u4e3b\u4e49\u7684\u7ed3\u6784\u6027\u65b9\u9762\u611f\u5230\u7591\u60d1\u7684\u4eba\uff0c\u6211\u60f3\u8bf7\u4f60\u4eec\u8003\u8651\u51e0\u4e2a\u95ee\u9898\u3002\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48Metco\u8fd8\u5b58\u5728\uff1f\u79cd\u65cf\u9694\u79bb\u572860\u591a\u5e74\u524d\u5c31\u7ed3\u675f\u4e86\uff0c\u4f46\u6211\u4eec\u5dde\u4ecd\u7136\u6709\u4e00\u4e2a\u5168\u9762\u8fd0\u4f5c\u7684\u878d\u5408\u8ba1\u5212\u3002\u6211\u4eec\u4e00\u70b9\u4e5f\u6ca1\u8d70\u591a\u8fdc\u3002\u6211\u4eec\u7684\u8bb8\u591a\u5b66\u6821\u4ecd\u7136\u51e0\u4e4e\u548c\u5f53\u65f6\u4e00\u6837\u5b9e\u884c\u79cd\u65cf\u9694\u79bb\u3002\u7b2c\u4e8c\uff0c\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u97e6\u65af\u987f\u63d0\u9ad8\u4e86\u5b83\u7684\u591a\u6837\u6027\u3002\u5426\u5219\uff0c\u5b83\u7684\u5927\u591a\u6570\u5b66\u751f\u53ef\u80fd\u90fd\u7ecf\u5386\u4e86\u8fd9\u4e48\u591a\u5e74\uff0c\u53ef\u80fd\u5728\u5b66\u6821\u91cc\u6709\u4e09\u5230\u56db\u5f20\u5f53\u5730\u7684\u9ed1\u4eba\u9762\u5b54(\u60f3\u60f3\u770b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u56fd\u5bb6\u7684\u8bb8\u591a\u767d\u4eba\u6765\u8bf4\uff0c\u8fd9\u5c31\u662f\u73b0\u5b9e)\u3002\u5bf9\u4e8e\u6ce2\u58eb\u987f\u7684\u5b66\u751f\u6765\u8bf4\uff0c\u4ed6\u4eec\u4e2d\u7684\u5927\u591a\u6570\u662f\u9ed1\u4eba\uff0c\u4ed6\u4eec\u5f97\u5230\u4e86\u63a5\u53d7\u66f4\u9ad8\u8d28\u91cf\u6559\u80b2\u7684\u673a\u4f1a\u3002\u8d22\u4ea7\u7a0e\u662f\u79cd\u65cf\u4e3b\u4e49\u7684\u4e00\u79cd\u7ed3\u6784\u6027\u5f62\u5f0f\uff0c\u65e8\u5728\u5141\u8bb8\u79cd\u65cf\u9694\u79bb\u6301\u7eed\u4e0b\u53bb\uff0c\u5b83\u786e\u4fdd\u4e86\u5c3d\u7ba1\u6211\u4eec\u90ca\u533a\u7684\u5b66\u6821\u8d8a\u6765\u8d8a\u597d\uff0c\u4f46\u5e02\u4e2d\u5fc3\u7684\u5b66\u6821\u4ecd\u7136\u5728\u8d44\u6e90\u3001\u51fa\u52e4\u7387\u548c\u6bd5\u4e1a\u7387\u65b9\u9762\u82e6\u82e6\u6323\u624e\u3002\u6700\u540e\uff0c\u4e3a\u4ec0\u4e48\u6211\u80fd\u53d6\u5f97\u5982\u6b64\u7684\u6210\u529f\u5462\uff1f\u5bf9Metco\u9879\u76ee\u7684\u4e00\u4e2a\u4e3b\u8981\u6279\u8bc4\u662f\uff0c\u5b83\u5e76\u6ca1\u6709\u7ed9\u5b66\u751f\u5e26\u6765\u6bd4\u57ce\u5e02\u5b66\u6821\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u5b83\u5728\u5176\u4ed6\u65b9\u9762\u53ea\u662f\u4ece\u57ce\u5e02\u4e2d\u6d41\u5931\u4eba\u624d\u3002\u6211\u662f\u4e2a\u4f8b\u5916\u3002\u6211\u5728\u5b66\u6821\u62c5\u4efb\u9886\u5bfc\uff0c\u662f\u4e00\u540d\u6709\u6210\u5c31\u7684\u8fd0\u52a8\u5458\u548c\u5b66\u751f\uff0c\u540e\u6765\u8fdb\u5165\u4e86\u5f53\u65f6\u5168\u56fd\u6700\u597d\u7684\u516c\u7acb\u5927\u5b66\u3002\u7136\u800c\uff0c\u88ab\u5ffd\u89c6\u7684\u662f\uff0c\u6211\u7684\u73af\u5883\u4e0e\u6765\u81ea\u57ce\u5e02\u7684\u666e\u901a\u989c\u8272\u5b66\u751f\u6709\u591a\u4e48\u5927\u7684\u4e0d\u540c\u3002\u6211\u7684\u53cc\u4eb2\u90fd\u5728\u5bb6\u91cc\u3002\u6211\u7684\u6bcd\u4eb2\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6574\u4e2a\u751f\u6d3b\u4e2d\u5728\u5bb6\u5de5\u4f5c\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u9700\u8981\u7684\u65f6\u5019\uff0c\u5979\u53ef\u4ee5\u5e26\u6211\u4eec\u53bb\u5176\u4ed6\u5730\u65b9\u3002\u4e0e\u5176\u4ed6\u9ed1\u4eba\u5bb6\u5ead\u76f8\u6bd4\uff0c\u6211\u4eec\u7684\u7ecf\u6d4e\u72b6\u51b5\u76f8\u5bf9\u8f83\u597d\uff0c\u8fd9\u4e9b\u5bb6\u5ead\u8ba9\u6211\u5728\u9ad8\u4e2d\u65f6\u6709\u4e86\u4e00\u8f86\u8f66\uff0c\u56e0\u6b64\u6211\u53ef\u4ee5\u9ad8\u5ea6\u53c2\u4e0e\u5176\u4e2d\u3002\u6211\u6709\u4e00\u4e2a\u7a33\u5b9a\u7684\u6559\u5802\u548c\u5bb6\u5ead\u751f\u6d3b\uff0c\u8fd8\u6709\u98df\u7269\u5b89\u5168\u3002\u5728\u7f8e\u56fd\uff0c\u8fd9\u79cd\u7ec4\u5408\u5728\u5e74\u8f7b\u7684\u9ed1\u4eba\u5b69\u5b50\u4e2d\u5e76\u4e0d\u5e38\u89c1\u3002\n\u5728\u6211\u54e5\u54e5\u5199\u7684\u4e00\u7bc7\u53cd\u601d\u5f53\u524d\u5f62\u52bf\u7684\u6587\u7ae0\u4e2d\uff0c\u4ed6\u601d\u8003\u4e86\u9ed1\u4eba\u7279\u6743\u662f\u5426\u771f\u7684\u5b58\u5728\u3002\u4ed6\u548c\u6211\u90fd\u8003\u8651\u8fc7\uff0c\u6211\u4eec\u4e0e\u9ed1\u4eba\u7684\u5171\u540c\u6545\u4e8b\u7684\u4e0d\u540c\u662f\u5982\u4f55\u8ba9\u6211\u4eec\u53d8\u5f97\u201c\u7279\u6743\u201d\u7684\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u6c89\u6d78\u5728\u767d\u4eba\u793e\u533a\u4e2d\uff0c\u6211\u4eec\u5728\u5b66\u6821\u548c\u73b0\u5728\u7684\u52b3\u52a8\u529b\u4e2d\u53d6\u5f97\u4e86\u6210\u529f\uff0c\u6216\u8005\u6211\u4eec\u5728\u4e2d\u4ea7\u9636\u7ea7\u9ed1\u4eba\u5bb6\u5ead\u957f\u5927(\u5728\u6ce2\u58eb\u987f\u975e\u5e38\u7f55\u89c1)\uff0c\u8fd9\u8ba9\u6211\u4eec\u76f8\u4fe1\uff0c\u6211\u4eec\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8d85\u8d8a\u4e86\u9ed1\u4eba\u7684\u56f0\u5883\u3002\u7136\u800c\uff0c\u770b\u7740\u827e\u54c8\u8302\u5fb7\u00b7\u963f\u8d1d\u91cc\u548c\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7\u7684\u89c6\u9891\u8ba9\u6211\u4eec\u4e24\u4e2a\u90fd\u611f\u5230\u5bb3\u6015\u7684\u662f\uff0c\u6211\u4eec\u663e\u7136\u6ca1\u6709\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u90fd\u6709\u53ef\u80fd\u662f\u6211\u4eec\u3002\u6ca1\u6709\u9003\u8131\u7684\u4f59\u5730\u3002\u4efb\u4f55\u7a0b\u5ea6\u7684\u6210\u529f\u90fd\u4e0d\u4f1a\u8ba9\u4f60\u5e78\u514d\u3002\u6211\u4eec\u662f\u9ed1\u4eba\uff0c\u8fd9\u5bf9\u4e00\u4e9b\u4eba\u6765\u8bf4\u662f\u6700\u91cd\u8981\u7684\u3002\n\u5728\u8fc7\u53bb\uff0c\u6211\u901a\u5e38\u5bf9\u8fd9\u4e9b\u95ee\u9898\u4fdd\u6301\u6c89\u9ed8\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6f5c\u5165\u5b83\u4eec\u6df1\u5904\u7684\u75db\u82e6\u592a\u5927\u4e86\uff0c\u65e0\u6cd5\u7ecf\u5e38\u9762\u5bf9\u3002\u5927\u5b66\u6539\u53d8\u4e86\u6211\u7684\u8bb8\u591a\u6001\u5ea6\uff0c\u4f46\u6700\u91cd\u8981\u7684\u662f\u6211\u5b8c\u5168\u63a5\u53d7\u4e86\u79cd\u65cf\u4e3b\u4e49\u5b58\u5728\u4e8e\u6211\u5468\u56f4\u3002\u6211\u5bfb\u627e\u4e86\u66f4\u591a\u7684\u9ed1\u4eba\u670b\u53cb\uff0c\u9009\u62e9\u548c\u53e6\u5916\u4e09\u4e2a\u6709\u8272\u4eba\u79cd\u4f4f\u5728\u4e00\u8d77\uff0c\u56e0\u4e3a\u6211\u60f3\u4e0e\u6211\u8eab\u4efd\u7684\u90a3\u4e00\u8fb9\u5efa\u7acb\u66f4\u591a\u7684\u8054\u7cfb\u3002\u8fd9\u4e2a\u623f\u95f4\u4e3a\u6211\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6b23\u8d4f\u9ed1\u4eba\u6587\u5316\u65b9\u9762\u7684\u7a7a\u95f4\uff0c\u5e76\u4e0e\u770b\u8d77\u6765\u50cf\u6211\u7684\u4eba\u5206\u4eab\u6124\u6012\u7684\u6545\u4e8b\u3002\u6211\u4e0e\u79cd\u65cf\u4e3b\u4e49\u7684\u8bb8\u591a\u6700\u660e\u663e\u7684\u4e92\u52a8\u90fd\u53d1\u751f\u5728\u5927\u5b66\u91cc\u3002\u548c\n\u5728\u8fc7\u53bb\u4e00\u5468\u7684\u4e8b\u4ef6\u4e4b\u540e\uff0c\u6211\u53cd\u601d\u4e86\u4e0e\u8b66\u65b9\u7684\u4e92\u52a8\uff0c\u6211\u8ba4\u4e3a\u90a3\u91cc\u5b58\u5728\u90e8\u5206\u9ed1\u8272\u7279\u6743\u7684\u9762\u7eb1\uff0c\u4f46\u5f88\u53ef\u80fd\u53ea\u662f\u56e0\u4e3a\u6211\u7684\u519b\u4e8b\u80cc\u666f\u3002\u6211\u5728\u53c2\u89c2\u5b8c\u4e00\u4f4d\u670b\u53cb\u7684\u575f\u5893\u540e\u56de\u5230\u8f66\u91cc\u4e0d\u5230\u4e00\u5206\u949f\uff0c\u5c31\u88ab\u62e6\u5728\u4e00\u4e2a\u5893\u5730\u91cc\uff0c\u7ed3\u679c\u88ab\u95ee\u5230\u201c\u4f60\u5728\u8fd9\u91cc\u505a\u4ec0\u4e48\uff1f\u201d\u90a3\u4e2a\u8b66\u5bdf\u4e00\u76f4\u505c\u5728\u6211\u65c1\u8fb9\uff0c\u6240\u4ee5\u4ed6\u663e\u7136\u53ea\u662f\u770b\u5230\u6211\u4e00\u4e2a\u4eba\u5728\u5893\u7891\u524d\u3002\u201c\u5148\u751f\uff0c\u660e\u5929\u56de\u5b66\u6821\u4e4b\u524d\u5148\u53bb\u62dc\u8bbf\u6211\u670b\u53cb\u7684\u575f\u5893\u3002\u201d\u76f4\u5230\u6211\u544a\u8bc9\u4ed6\u6211\u4e0a\u8fc7\u6d77\u519b\u5b66\u9662\u540e\uff0c\u8fd9\u4f4d\u519b\u5b98\u5484\u5484\u903c\u4eba\u7684\u4e3e\u6b62\u624d\u6709\u6240\u6539\u53d8\u3002\u5728\u90a3\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u4ed6\u5728\u8bfa\u91cc\u5947\u7684\u65e5\u5b50\u8fdb\u884c\u4e86\u53cb\u597d\u7684\u4ea4\u8c08\u3002\u8ba9\u6211\u5370\u8c61\u6df1\u523b\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u770b\u5230\u53e6\u4e00\u4e2a\u6d3b\u4eba\uff0c\u4ed6\u53ef\u80fd\u4f1a\u5728\u5893\u5730\u7684\u90a3\u4e9b\u504f\u50fb\u5c0f\u8def\u4e0a\u505a\u4e9b\u4ec0\u4e48-\u6ca1\u6709\u76ee\u51fb\u8005\uff0c\u6ca1\u6709\u6444\u50cf\u673a\u3002\u6216\u8005\u8fd8\u6709\u4e00\u6b21\uff0c\u6211\u5728\u805a\u4f1a\u7ed3\u675f\u540e\u8d70\u56de\u6211\u6700\u597d\u670b\u53cb\u7684\u7a7a\u623f\u5b50\uff0c\u4e0d\u5c0f\u5fc3\u62c9\u54cd\u4e86\u95f9\u949f\uff0c\u628a\u55e1\u55e1\u4f5c\u54cd\u7684\u8b66\u5bdf\u5e26\u5230\u4e86\u4ed6\u7684\u95e8\u53e3\u3002\u6211\u60f3\u77e5\u9053\uff0c\u4e8b\u60c5\u8fdb\u884c\u5f97\u5982\u6b64\u987a\u5229\u7684\u552f\u4e00\u539f\u56e0\u662f\u4e0d\u662f\u56e0\u4e3a\u6211\u5f88\u5feb\u5c31\u8868\u660e\u81ea\u5df1\u662f\u4e00\u540d\u519b\u4eba\uff0c\u6253\u5f00\u4e86\u4ed6\u4eec\u7684\u8033\u6735\uff0c\u542c\u5230\u4e86\u53d1\u751f\u4e86\u4ec0\u4e48\u7684\u5168\u90e8\u6545\u4e8b\u3002\u6211\u5728\u60f3\uff0c\u5982\u679c\u4ed6\u4eec\u628a\u6211\u51fa\u95e8\u65f6\u624b\u91cc\u62ff\u7740\u519b\u5b98\u8bc1\u8bef\u8ba4\u4e3a\u662f\u522b\u7684\u4e1c\u897f\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b\u3002\n\u5ba1\u89c6\u8fd9\u4e00\u5207\u7684\u53e6\u4e00\u4e2a\u8270\u96be\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u610f\u8bc6\u5230\uff0c\u5728\u6211\u5e74\u8f7b\u7684\u65f6\u5019\uff0c\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u6d3b\u8dc3\u7684\u60f3\u6cd5\u51fa\u73b0\u5728\u6211\u7684\u8111\u6d77\u4e2d\u3002\u5f53\u6211\u65e0\u6570\u6b21(\u901a\u5e38\u662f\u65e0\u7f18\u65e0\u6545\u5730)\u88ab\u62e6\u4e0b\uff0c\u5f00\u8f66\u53bb\u97e6\u65af\u987f\u770b\u66f2\u68cd\u7403\u6bd4\u8d5b\uff0c\u6216\u8005\u505c\u5728\u8def\u8fb9\u548c\u6211\u7684\u767d\u4eba\u5973\u670b\u53cb\u804a\u5929\u65f6\uff0c\u6211\u6ca1\u6709\u60f3\u5230\u8b66\u5bdf\u53ef\u80fd\u4f1a\u9488\u5bf9\u6211\u3002\u6216\u8005\u5f53\u8fd9\u4e9b\u504f\u89c1\u771f\u7684\u51fa\u73b0\u5728\u6211\u7684\u8111\u6d77\u4e2d\u65f6\uff0c\u6211\u5f88\u5feb\u5c31\u628a\u5b83\u4eec\u5f53\u4f5c\u65e0\u5173\u7d27\u8981\u7684\u4e1c\u897f\u800c\u4e0d\u5c51\u4e00\u987e\u3002\n\u6211\u8bb0\u5f97\u5728\u4e0a\u4e2d\u5b66\u7684\u65f6\u5019\uff0c\u6211\u548c\u4e00\u7fa4\u767d\u4eba\u670b\u53cb\u4e00\u8d77\u6765\u5230\u6211\u4eec\u9ad8\u4e2d\u7684\u8db3\u7403\u8d5b\u73b0\u573a\uff0c\u53d1\u73b0\u6709\u4e09\u56db\u4e2a\u8b66\u5bdf\u7ad9\u5728\u5165\u53e3\u5904\u3002\u6211\u8ddf\u4ed6\u4eec\u6253\u4e86\u58f0\u201c\u665a\u4e0a\u597d\uff0c\u8b66\u5b98\u201d\u7684\u62db\u547c\uff0c\u7136\u540e\u6084\u6084\u5730\u5bf9\u6211\u7684\u670b\u53cb\u4eec\u8bf4\uff0c\u201c\u4f60\u5f97\u548c\u4ed6\u4eec\u4ea4\u670b\u53cb\uff0c\u8fd9\u6837\u4ed6\u4eec\u4ee5\u540e\u624d\u4f1a\u7ad9\u5728\u4f60\u8fd9\u8fb9\u3002\u201d\u6211\u7684\u670b\u53cb\u4eec\u8ba4\u4e3a\u8fd9\u5f88\u597d\u7b11\uff0c\u6211\u6210\u529f\u5730\u9017\u5f97\u5b69\u5b50\u4eec\u5927\u7b11\u8d77\u6765\u3002\u56de\u8fc7\u5934\u6765\u770b\uff0c\u6211\u610f\u8bc6\u5230\u4ed6\u4eec\u771f\u7684\u4e0d\u660e\u767d\u6211\u8bf4\u7684\u662f\u5408\u6cd5\u7684\u3002\u6211\u4e0d\u8d85\u8fc7\u5341\u4e8c\u4e09\u5c81\uff0c\u6211\u5df2\u7ecf\u77e5\u9053\u8b66\u5bdf\u4f1a\u503e\u5411\u4e8e\u53cd\u5bf9\u6211\u3002\u5bf9\u6211\u7684\u670b\u53cb\u4eec\u6765\u8bf4\uff0c\u8fd9\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4ece\u6765\u6ca1\u6709\u8fdb\u884c\u8fc7\u8fd9\u6837\u7684\u5bf9\u8bdd\u3002\n\u6211\u56de\u60f3\u8d77\u5f53\u6211\u8fd8\u662f\u4e2a\u5b69\u5b50\u7684\u65f6\u5019\uff0c\u6211\u7684\u670b\u53cb\u4eec\u4ece\u6765\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48\u6211\u4e0d\u80fd\u73a9\u6c34\u67aa\u6216\u4efb\u4f55\u73a9\u5177\u67aa\u3002\u5982\u679c\u80fd\u5230\u670b\u53cb\u5bb6\u505a\u5ba2\uff0c\u5e76\u80fd\u5728\u4ed6\u4eec\u7684\u540e\u9662\u4f7f\u7528\u4ed6\u4eec\u7684\u6c14\u67aa\uff0c\u6211\u4f1a\u975e\u5e38\u5174\u594b\u7684\u3002\u5f53\u6211\u5988\u5988\u4e0d\u8ba9\u6211\u4eec\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u66fe\u7ecf\u975e\u5e38\u6cae\u4e27\uff0c\u56e0\u4e3a\u5bf9\u9ed1\u4eba\u7537\u5b69\u6765\u8bf4\uff0c\u8fd9\u6837\u505a\u201c\u592a\u5371\u9669\u201d\u4e86\uff0c\u6709\u4eba\u4f1a\u628a\u5b83\u8bef\u8ba4\u4e3a\u662f\u771f\u67aa\u3002\u5f53\u621116\u5c81\u7684\u65f6\u5019\uff0c\u5854\u7c73\u5c14\u00b7\u8d56\u65af(Tamir Rice)\uff0c\u4e00\u4e2a12\u5c81\u7684\u7537\u5b69\u5728\u73a9\u4eff\u5236\u73a9\u5177\u6c14\u67aa\u65f6\u88ab\u67aa\u6740\u3002\u6211\u610f\u8bc6\u5230\u6211\u5988\u5988\u662f\u5bf9\u7684\u3002\n\u6211\u60f3\u8d77\u4e86\u9ed1\u4eba\u5973\u5b69\u5728\u9ad8\u4e2d\u65f6\u88ab\u5f53\u4f5c\u4e8c\u7b49\u5b66\u751f\u5bf9\u5f85\u7684\u65b9\u5f0f\u3002\u7537\u4eba\u4eec\u5f88\u5c11\u8bd5\u56fe\u4e0e\u4ed6\u4eec\u6d6a\u6f2b\u5730\u4ea4\u8c08\uff0c\u5982\u679c\u4ed6\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u5176\u4ed6\u4eba\u4e5f\u4f1a\u7528\u4e00\u79cd\u559c\u5267\u7684\u8bed\u6c14\u6765\u8ba8\u8bba\u8fd9\u4ef6\u4e8b\u3002\u6211\u4e2a\u4eba\u4ece\u672a\u6709\u8fc7\u8fd9\u79cd\u611f\u89c9\uff0c\u4f46\u76f4\u5230\u4e0a\u4e86\u5927\u5b66\u624d\u610f\u8bc6\u5230\uff0c\u5728\u8fd9\u65b9\u9762\uff0c\u6211\u7684\u201c\u6c89\u9ed8\u5c31\u662f\u987a\u4ece\u201d\u3002\u6211\u53c2\u4e0e\u4e86\u5265\u593a\u6211\u5468\u56f4\u9ed1\u4eba\u5973\u6027\u5c0a\u4e25\u7684\u6d3b\u52a8\u3002\u6211\u7684\u767d\u4eba\u670b\u53cb\u4eec\u7684\u8fd9\u79cd\u6001\u5ea6\u4e5f\u4e0d\u662f\u5728\u9ad8\u4e2d\u5c31\u7ed3\u675f\u4e86\u3002\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u6211\u5728\u56fd\u9645\u6276\u8f6e\u7eb3\u62c9\u7518\u897f\u7279\u7684\u4e00\u5bb6\u9152\u5427\uff0c\u5728\u90a3\u91cc\u6211\u5f88\u5feb\u5c31\u548c\u6211\u670b\u53cb\u5e26\u6765\u7684\u4e00\u4e2a\u7537\u4eba\u6210\u4e3a\u4e86\u670b\u53cb\u7684\u670b\u53cb\uff0c\u5e76\u4e00\u5ea6\u8868\u8fbe\u4e86\u6211\u5bf9\u4e00\u4e2a\u521a\u521a\u8fdb\u5165\u9152\u5427\u7684\u5973\u5b69\u7684\u5174\u8da3\u3002\u4ed6\u8ba9\u6211\u6307\u51fa\u5979\uff0c\u6211\u7167\u505a\u4e86\uff0c\u8fd8\u6307\u51fa\u5979\u662f\u9ed1\u4eba\u3002\u4ed6\u56de\u7b54\u8bf4\uff0c\u201c\u662f\u554a\uff0c\u5144\u5f1f\uff0c\u5979\u5f88\u53ef\u7231\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u4e00\u4e2a\u767d\u4eba\u5973\u5b69\uff01\u201d\u6211\u8d28\u7591\u4ed6\u7684\u8bf4\u6cd5\uff0c\u4ed6\u610f\u8bc6\u5230\u6211\u4e0d\u540c\u610f\u4ed6\u7684\u8bf4\u6cd5\u3002\u6211\u4eec\u6700\u7ec8\u7ee7\u7eed\u524d\u884c\uff0c\u7ee7\u7eed\u8fc7\u591c\uff0c\u4f46\u6211\u65e0\u6cd5\u5fd8\u5374\u8fd9\u4e2a\u5ff5\u5934\u3002\u4ed6\u8bf4\u7684\u65f6\u5019\u771f\u7684\u6ca1\u6709\u591a\u60f3\u3002\u4ed6\u4ee5\u4e3a\u6211\u4f1a\u540c\u610f\u4ed6\u7684\u89c2\u70b9\u3002\u5bf9\u4ed6\u6765\u8bf4\uff0c\u5bf9\u767d\u4eba\u5973\u6027\u7684\u504f\u7231\u662f\u65e0\u53ef\u4e89\u8fa9\u7684\uff0c\u6240\u4ee5\u4ed6\u6beb\u65e0\u6b49\u610f\u5730\u5efa\u8bae\u8fd9\u6837\u505a\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u5c24\u5176\u56f0\u96be\uff0c\u56e0\u4e3a\u9664\u4e86\u8fd9\u53e5\u8bdd\u4e4b\u5916\uff0c\u6ca1\u6709\u4efb\u4f55\u8ff9\u8c61\u8868\u660e\u4ed6\u662f\u79cd\u65cf\u4e3b\u4e49\u8005\u3002\u4ed6\u5bf9\u6211\u6ee1\u6000\u7231\u610f\u548c\u94a6\u4f69\uff0c\u5e76\u63a5\u7eb3\u6211\u52a0\u5165\u4ed6\u7684\u56e2\u961f\u3002\u8fd9\u4ec5\u4ec5\u662f\u65e0\u77e5\uff0c\u8fd9\u79cd\u65e0\u77e5\u53ef\u80fd\u5df2\u7ecf\u88ab\u5f3a\u5316\u4e86\u65e0\u6570\u6b21\uff0c\u8fd9\u662f\u5f88\u96be\u4e0e\u4e4b\u640f\u6597\u7684\u3002\n\u8fd9\u4e9b\u663e\u9732\u51fa\u7684\u9690\u542b\u504f\u89c1\u7684\u6545\u4e8b\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6001\u5ea6\u76f4\u63a5\u4fc3\u6210\u5e76\u7ef4\u6301\u4e86\u6211\u4eec\u793e\u4f1a\u4e2d\u7684\u7cfb\u7edf\u6027\u79cd\u65cf\u4e3b\u4e49\u3002\u6211\u4eec\u5bf9\u6211\u4eec\u4e0e\u8b66\u65b9\u5173\u7cfb\u7684\u7406\u89e3\u4e0d\u540c\uff0c\u6b63\u597d\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u73b0\u5728\u6709\u8fd9\u4e48\u591a\u4e89\u8bae\u3002\u5f53\u9ed1\u4eba\u7537\u6027\u8bf4\u8bdd\u5f97\u4f53\uff0c\u6216\u8005\u9ed1\u4eba\u5973\u5b69\u5173\u4e8e\u4ed6\u4eec\u7684\u52a3\u52bf(\u53e3\u5934\u6216\u975e\u53e3\u5934)\u65f6\uff0c\u53d1\u9001\u7ed9\u4ed6\u4eec\u7684\u4fe1\u606f\u6709\u52a9\u4e8e\u5efa\u7acb\u4e00\u4e2a\u4e0d\u51c6\u786e\u7684\u9ed1\u4eba\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u56fe\u666f\u3002\u8fd9\u4e9b\u6001\u5ea6\u662f\n\u6211\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u5927\u591a\u6570\u767d\u4eba\u4e0d\u4e86\u89e3\u4ed6\u4eec\u7684\u65e0\u77e5\u7a0b\u5ea6-\u7279\u522b\u662f\u90a3\u4e9b\u597d\u5fc3\u7684\u4eba\uff0c\u800c\u758f\u5ffd\u662f\u95ee\u9898\u7684\u4e00\u90e8\u5206\u3002\u6211\u8ba4\u8bc6\u7684\u8bb8\u591a\u767d\u4eba\u5bf9\u4ed6\u4eec\u5728\u7ef4\u6301\u8fd9\u4e9b\u72b6\u51b5\u4e2d\u6240\u626e\u6f14\u7684\u88ab\u52a8\u6216\u79ef\u6781\u7684\u89d2\u8272\u4e00\u65e0\u6240\u77e5\u3002\u4ed6\u4eec\u4e0d\u77e5\u9053\u6211\u4eec\u591a\u4e48\u6e34\u671b\u542c\u5230\u4ed6\u4eec\u4e3a\u6211\u4eec\u8bf4\u8bdd\uff0c\u5e76\u4e0e\u6211\u4eec\u4e00\u8d77\u62e5\u62b1\u56f4\u7ed5\u8fd9\u4e9b\u95ee\u9898\u7684\u4e00\u4e9b\u4e0d\u9002\u3002\u6b64\u5916\uff0c\u597d\u7684\u4eba\u5bf9\u4ecd\u7136\u5b58\u5728\u7684\u516c\u5f00\u7684\u79cd\u65cf\u4e3b\u4e49\u7a0b\u5ea6\u89c6\u800c\u4e0d\u89c1\u3002\u5728\u6211\u88ab\u964c\u751f\u4eba\u79f0\u4e3a\u9ed1\u9b3c\u7684\u90a3\u6bb5\u65f6\u95f4\u91cc\uff0c\u6211\u4e00\u76f4\u548c\u6211\u7684\u767d\u4eba\u670b\u53cb\u5728\u4e00\u8d77\u3002\u5728\u6240\u6709\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u7684\u767d\u4eba\u670b\u53cb\u4f3c\u4e4e\u90fd\u5f88\u9707\u60ca\u3002\u4ed6\u4eec\u88ab\u8bef\u5bfc\uff0c\u8ba4\u4e3a\u8fd9\u79cd\u60c5\u51b5\u53ea\u53d1\u751f\u5728\u8fc7\u53bb\uff0c\u5f53\u4ed6\u4eec\u5728\u8bfb\u201c\u6740\u6b7b\u4e00\u53ea\u77e5\u66f4\u9e1f\u201d\u65f6\u3002\u4ee4\u4eba\u6b23\u6170\u7684\u662f\uff0c\u4ed6\u4eec\u603b\u662f\u5728\u53e3\u5934\u4e0a\u4e3a\u6211\u8fa9\u62a4\uff0c\u4ed6\u4eec\u5185\u5fc3\u7684\u6551\u4e16\u4e3b\u60c5\u7ed3\u9f13\u52b1\u4ed6\u4eec\u5bfb\u6c42\u62a5\u590d\u3002\u5728\u4e00\u4e2a\u751f\u52a8\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728\u79d1\u5fb7\u89d2\u7684\u4e00\u5bb6\u9152\u5427\u91cc\uff0c\u4e00\u4e2a\u5bb6\u4f19\u521a\u521a\u548c\u4e00\u4f4d\u670b\u53cb\u804a\u5b8c\uff0c\u4ed6\u6ca1\u6709\u610f\u8bc6\u5230\u6211\u8fd8\u5728\u542c\u5f97\u89c1\uff0c\u4e5f\u6ca1\u6709\u610f\u8bc6\u5230\u6211\u548c\u8fd9\u4f4d\u670b\u53cb\u7684\u5173\u7cfb\uff0c\u4ed6\u8d70\u8fc7\u6765\u95ee\u9053\uff1a\u201c\u4f60\u771f\u7684\u5728\u548c\u90a3\u4e2a\u9ed1\u9b3c\u8bf4\u8bdd\u5417\uff1f\u201d\u6211\u7684\u670b\u53cb\u5927\u5403\u4e00\u60ca\uff0c\u4f46\u4ed6\u7acb\u5373\u56de\u51fb\u4e86\u90a3\u4e2a\u5bb6\u4f19\uff0c\u4ed6\u5bf9\u6211\u7684\u6124\u6012\u53ef\u89c1\u4e00\u6591\u3002\u7136\u540e\u4ed6\u6765\u627e\u6211\uff0c\u5439\u5618\u8bf4\u4ed6\u6709\u9ed1\u4eba\u670b\u53cb\uff0c\u597d\u50cf\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u4ed6\u901a\u8fc7\u3002\u5c3d\u7ba1\u6bcf\u4e00\u79cd\u60c5\u51b5\u90fd\u6bc1\u4e86\u6211\u7684\u591c\u665a\uff0c\u4f46\u4e4b\u540e\u7684\u4e00\u5207\u90fd\u5f88\u987a\u5229\uff0c\u5f53\u4e00\u7fa4\u76df\u53cb\u542c\u5230\u8fd9\u4e2a\u8bcd\u65f6\uff0c\u4ed6\u4eec\u62e5\u62b1\u4e86\u6211\uff0c\u4ed6\u4eec\u60f3\u8981\u4e3a\u6211\u800c\u6218\u3002\u6211\u6ca1\u6709\u66f4\u591a\u7684\u7406\u7531\u5fc3\u70e6\u610f\u4e71\u4e86\u3002\u7136\u800c\uff0c\u53ef\u80fd\u53ea\u6709\u8ddf\u6211\u4e00\u8d77\u8d70\u5728\u4eba\u7fa4\u524d\u9762\u7684\u670b\u53cb\u624d\u77e5\u9053\uff0c\u5728\u56de\u5bb6\u7684\u8def\u4e0a\uff0c\u6211\u54ed\u5f97\u76ee\u77aa\u53e3\u5446\uff1b\u65e0\u6cd5\u89e3\u91ca\u8fd9\u4e2a\u8bcd\u662f\u5982\u4f55\u8ba9\u6211\u83b7\u5f97\u5982\u6b64\u5927\u7684\u63a7\u5236\u6743\u7684\u3002\n\u4f46\u662f\uff0c\u8fd9\u4e9b\u516c\u5f00\u7684\u79cd\u65cf\u4e3b\u4e49\u60c5\u51b5\u7684\u95ee\u9898\u7ed3\u679c\u662f\uff0c\u5b83\u8ba9\u5584\u826f\u7684\u767d\u4eba\u611f\u5230\u4ece\u4efb\u4f55\u7c7b\u578b\u7684\u79cd\u65cf\u4e3b\u4e49\u7684\u4efb\u4f55\u8d23\u4efb\u4e2d\u89e3\u653e\u51fa\u6765\u3002\u8fd9\u8ba9\u4eba\u5f88\u96be\u63a5\u53d7\u7279\u6743\u3001\u7ed3\u6784\u6027\u79cd\u65cf\u4e3b\u4e49\u548c\u4ed6\u4eec\u6301\u6709\u7684\u9690\u6027\u504f\u89c1\u7684\u73b0\u5b9e\uff0c\u8fd9\u4e9b\u504f\u89c1\u867d\u7136\u4e0d\u4f1a\u8ba9\u4ed6\u4eec\u81ea\u5df1\u6210\u4e3a\u79cd\u65cf\u4e3b\u4e49\u8005\uff0c\u4f46\u4ed6\u4eec\u786e\u5b9e\u4ece\u4e2d\u53d7\u76ca\u3002\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u89c9\u5f97\u5206\u4eab\u8fd9\u4e9b\u4e1c\u897f\u4e0d\u4ec5\u662f\u53ef\u4ee5\u7684\uff0c\u800c\u4e14\u662f\u88ab\u63d0\u5347\u7684\u3002\u5982\u679c\u8bf4\u6bcf\u4e2a\u8c61\u5f81\u6027\u7684\u9ed1\u4eba\u670b\u53cb\u90fd\u77e5\u9053\u4e00\u4ef6\u4e8b\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u4e0d\u80fd\u5728\u6211\u4eec\u7684\u767d\u4eba\u7fa4\u4f53\u4e2d\u5f15\u53d1\u5173\u4e8e\u79cd\u65cf\u95ee\u9898\u7684\u4e25\u8083\u8ba8\u8bba\u3002\u53ea\u6709\u5f53\u6211\u4eec\u7684\u767d\u4eba\u540c\u9f84\u4eba\u9080\u8bf7\u6211\u4eec\u5bf9\u8fd9\u4e9b\u95ee\u9898\u53d1\u8868\u610f\u89c1\u65f6\uff0c\u6211\u4eec\u624d\u5e94\u8be5\u8fd9\u6837\u505a\u3002\u4f46\u6211\u4eec\u5e94\u8be5\u786e\u4fdd\u8fd9\u4e2a\u89c2\u70b9\u4e0e\u6211\u4eec\u767d\u4eba\u670b\u53cb\u7684\u5171\u540c\u89c2\u70b9\u8db3\u591f\u4e00\u81f4\uff0c\u4e0d\u8981\u8ba9\u5b83\u53d8\u5f97\u8fc7\u4e8e\u5c34\u5c2c\u6216\u88ab\u6392\u65a5\u3002\u5b83\u4e0d\u9700\u8981\uff0c\u4e5f\u4e0d\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002\u6211\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u90fd\u6e34\u671b\u5206\u4eab\u6211\u4eec\u7684\u6545\u4e8b\uff0c\u6211\u4eec\u53ea\u662f\u5728\u7b49\u5f85\u9080\u8bf7\u8fd9\u6837\u505a\u3002\n\u5f53\u6211\u770b\u5230\u767d\u4eba\u76f4\u8a00\u4e0d\u8bb3\u65f6\uff0c\u6211\u611f\u5230\u5b89\u6170\u3002\u5f53\u6211\u548c\u6211\u7684\u670b\u53cb\u79df\u4e86\u4e00\u8f8616\u4e2a\u4eba\u7684\u9762\u5305\u8f66\u53bb\u8499\u7279\u5229\u5c14\u9664\u5915\u591c\u65c5\u884c\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u81ea\u5df1\u5728\u56de\u6765\u7684\u65f6\u5019\u5728\u8fb9\u5883\u88ab\u803d\u6401\u4e86\u3002\u5e74\u957f\u7684\u4ee3\u7406\u5546\u5728\u8c03\u67e5\u4e58\u5ba2\u65f6\uff0c\u95ee\u6211\u4eec\u662f\u600e\u4e48\u8ba4\u8bc6\u7684\uff0c\u6211\u4eec\u56de\u7b54\u8bf4\uff0c\u201c\u6211\u4eec\u90fd\u662f\u4e00\u8d77\u4e0a\u9ad8\u4e2d\u7684\u201d\uff0c\u7136\u540e\u53c8\u628a\u6211\u6311\u51fa\u6765\uff0c\u201c\u4f60\u4eec\u662f\u600e\u4e48\u9002\u5e94\u8fd9\u91cc\u7684\uff1f\u201d\u4ed6\u63d0\u51fa\u7684\u5173\u4e8e\u6211\u5728\u6240\u6709\u767d\u4eba\u7537\u6027\u4e2d\u7684\u5730\u4f4d\u7684\u5efa\u8bae\u5df2\u7ecf\u8db3\u591f\u8bf4\u660e\u95ee\u9898\u4e86\uff0c\u548c\u6211\u5728\u4e00\u8d77\u7684\u90a3\u4e9b\u5bb6\u4f19\u5f88\u5feb\u5c31\u652f\u6301\u6211\uff0c\u5e76\u5728\u6211\u4eec\u56de\u5bb6\u540e\u5411\u4ed6\u4eec\u7684\u7236\u6bcd\u6c47\u62a5\u65c5\u884c\u60c5\u51b5\u65f6\u6307\u51fa\u4e86\u8fd9\u4e00\u70b9\u3002\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u6211\u6709\u591a\u5c11\u6b21\u7ecf\u5386\u8fc7\u8fd9\u6837\u7684\u60c5\u51b5\u5c31\u597d\u4e86\u3002\u4ed6\u4eec\u5e94\u8be5\u77e5\u9053\uff0c\u50cf\u8fd9\u6837\u7684\u5c0f\u4e8b\u60c5\u624d\u662f\u6211\u4eec\u66f4\u9700\u8981\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u8ba9\u4e8b\u60c5\u5f00\u59cb\u4e86\u3002\u8fd9\u4e0d\u662f\u6211\u4eec\u7684\u5de5\u4f5c\u3002\n..", "note_en": "I am regularly the only black kid in the photo. I have mastered the well-timed black joke, fit to induce a guilty, \u201cyou thought it but couldn\u2019t say it\u201d, laugh from my white peers. I know all the words to Mr. Brightside by the Killers. I am a token black friend. The black one in the group of white people. This title is not at all a comment on the depth of my relationships. I certainly am blessed to have the friends that I do. But by all definitions of the term, I am in many ways its poster child. And given the many conversations occurring right now considering systemic racism, it would feel wrong to not use my position as a respected friend within a multitude of different white communities to contribute to the current dialogue. In fact, I believe my story in many ways speaks directly to the covert nature of the new breed of racism \u2014 its structural side and in consideration of implicit bias \u2014 so it may prove helpful to the many I know seeking a better understanding.\n Growing up, I lived in the inner city of Boston, in Roxbury. I went through all of my schooling years in the suburbs outside the city through a program called METCO \u2014 the longest continuously running voluntary school desegregation program in the country, which began in the late 60\u2019s. My two siblings and I attended school in Weston, MA, one of the nation\u2019s wealthiest towns. The place quickly became our second home, and I would count it equally as the place I was raised alongside Boston. All three of us did very well by all standards upon graduation from high school. We had all been co-presidents of the school, my brother and I were both football captains, and all three of us went on to top-end universities.\n For those wondering about the structural side of systemic racism, I\u2019d ask you to consider a few questions. First, why does METCO still exist? Segregation ended more than 60 years ago, yet there is a still an integration program fully functioning in our state. We haven\u2019t come very far at all. And many of our schools remain nearly as segregated as they were back then. Second, what is the point? Weston improves its diversity. Most of its students otherwise may have gone through all those years with possibly three or four local black faces in the school (and think about that for many white people in this country, that is the reality). And for the Boston students, most of whom are black, they receive an opportunity for a much higher quality education. Property taxes, a  structural form of racism meant to allow segregation to endure, has ensured that while schools have grown increasingly better in our suburbs, the inner city schools continue to struggle with resources, attendance, and graduation rates. Lastly, why was I able to be so successful? A major criticism of the METCO program is that it doesn\u2019t produce better outcomes for its students than the city schools, so it otherwise just acts as a brain drain from the city. I am an exception. I led in the school, was an accomplished athlete and student, and went on to what was at the time, the best public university in the country. What is overlooked though is how my circumstances differed so greatly from the average student of color coming from the city. I had both parents in the household. My mother was able to work from home our entire life, so she could take us places when we needed. We were relatively well-off financially compared to other black families, which afforded me a car in high school and thus allowed me to be highly involved. I had a stable church and home life, and food security. This combination is uncommon for a young black kid in America.\n In a piece my brother wrote reflecting on the current situation, he considered whether black privilege was real. He and I both have considered how our differences from the common story of black people made us \u201cprivileged\u201d. For instance, our immersion into the white community, our success in school and now in the workforce, or that we grew up in middle class black household (highly uncommon in Boston), led us to believe that we had somehow transcended the plight of the black man. Yet, what scared us both so much watching the videos of Ahmaud Arbery and George Floyd, is that we clearly had not. In both cases, it could have been us. There is no escape. There is no level of success that will spare you. We are black men, and that is all that matters to some.\n In the past, I usually stayed quiet on these issues. Often, the pain of diving deep into them was too much to regularly confront. College changed many attitudes for me, but none more so than me fully accepting that racism is alive and well around me. I sought out more black friends, choosing to room with three other people of color because I wanted to grow more connected with that side of my identity. The room afforded me a space to appreciate aspects of black culture, and share stories of anger with people who looked like me. Many of my most clear interactions with racism occurred in college. And it was there that I began to confront knowledge that roused more frustration within me, such as the War on Drugs and its history as a weapon against black communities, although on every visit to a different college I watched more drugs ingested and smoked with impunity than I ever saw in the hood. The length of my journey makes me inclined to be more patient with others in this process, as it took me this much time to wake up. We should all be reasonably patient with one another, but I would encourage individuals to not be patient with themselves, and to treat these issues with the urgency they deserve. The anger on display the past week should exhibit the need for change.\n There are so many experiences I can point to while growing up that speak to the implicit biases against black people that exist around us. I think of how quickly other\u2019s in my school community assumed that I had a single mother, simply because my father, much like many of theirs, didn\u2019t visit the school often. Or the number of times I have been \u201cyou are so articulate\u201d in a conversation where all I have shared is my name and other small personal details. Standing alone, each instance may seem insignificant, or merely a compliment to my upbringing and education, however, the frequency with which I have had that same response tells otherwise. It reveals how a black kid speaking properly is surprising, and further, now makes me worthy to share the person\u2019s company.\n Another important realization is that the token black friend is not spared from the realities facing a black kid from the hood. One morning, while getting ready for school, and I heard a scream from my mother outside, following by my brother sprinting down our stairs. In our 150 year old home, every quick step down the stairs resembled a drum beating. I followed my brother to find my mom standing at her car, visibly shaken up, telling us \u201che\u2019s running up the street, he took my phone\u201d. My brother and I, both barefoot, sprinted up our street and two others until we had caught the culprit. I jumped on his back to stop him until my brother caught up, upon which Raj chewed him out and we took our stuff back \u2014 both too young and inexperienced in the ways of the streets to know we probably should have beat him up. The point is though, we still had to go to school that day. And I remember being too embarrassed to tell any of my friends about what occurred that morning, thinking it would change the way they thought about me or where I came from every day for the worse.\n I had started carrying a knife my junior year of high school. It quickly became a running joke among my core group of friends that whenever someone would say something out of pocket or stupid, we\u2019d say \u201cget the knife\u201d and I\u2019d lay it on the table comedically. What those friends definitely didn\u2019t know is that I carried the knife because I was afraid I might get jumped making my daily walk from the train station to my house late most evenings. How could my white friends from suburbia ever understand that?\n In the wake of the past week\u2019s events, I\u2019ve reflected on interactions with the police where part of that veil of black privilege I thought existed, but likely was only afforded to me because of my military affiliation. I was pulled over in a cemetery, less than one minute after getting back in my car after visiting a friend\u2019s grave, only to be asked \u201cwhat are you doing here?\u201d The cop had been parked right by me the entire time, so he obviously had just seen me out at a gravestone alone. \u201cVisiting my friend\u2019s grave before heading back to school tomorrow, sir.\u201d The officer\u2019s aggressive demeanor only changed after I told him I went to the Naval Academy, upon which we entered a friendly conversation about his days at Norwich. What stuck with me is what he could\u2019ve done in those backroads of cemetery without another living person in sight \u2014 no witnesses, no cameras. Or another time when I had walked back to my best friend\u2019s empty house after a party, and accidentally set off the alarm, bringing the cops buzzing to his door. I wonder if the only reason it went so smoothly is because I quickly identified myself as a member of the military, opening their ears to hear the full story of what was happening. Thinking of what might\u2019ve happened if they mistook me holding my military ID in my hand as I walked out the door, for something else.\n Another tough thing about looking at all of this is realizing how little of it actively occurred to me when I was younger. When I was pulled over numerous times, often without cause, driving to a hockey game in Weston, or parked talking to my white girlfriend, I didn\u2019t consider that the cops might have had it against me. Or when these biases did occur to me, how quickly I brushed them off as insignificant.\n I can remember being in early middle school arriving to our high school\u2019s football game with a group of friends, all white, to find three or four policemen standing by the entrance. I greeted them with a \u201cgood evening officers\u201d, then quietly said to my friends, \u201cyou gotta befriend them so they are on your side later.\u201d My buddies thought it was hilarious, and I had succeeded in making the boys laugh. Looking back, I realize that they really didn\u2019t understand that I was speaking to something legitimate. I was no older than twelve or thirteen, and I already understood that the police would be inclined to be against me. It was funny to my friends because they had never had those sort of conversations.\n I think back to when my friends never understood why I wasn\u2019t allowed to play with water guns or any toy guns for that matter when I was a boy. I would be so excited to be visiting a friend\u2019s house and getting to use their airsoft gun in their backyard. I used to be so frustrated when my mom wouldn\u2019t let us because it was \u201ctoo dangerous\u201d for black boys to do that, and someone would mistake it for a real gun. When I was sixteen Tamir Rice, a twelve-year old boy was shot and killed while playing with a replica toy airsoft gun. I realized my mom was right.\n I think of the way the black girls were treated as second-rate in high school. Guys rarely tried to talk to them romantically, and if they did it was discussed by others with an undertone of comedy. I never felt this way personally, but didn\u2019t realize until college that in this area my \u201csilence was compliance\u201d. I was participating in denying dignity to the black women around me. This attitude from my white friends didn\u2019t end in high school either. This past year, I was at a bar in Narragansett, RI, where I had quickly befriended one the guys my friend had brought with him, and at one point expressed my interest in a girl who had just entered the bar. He asked me to point her out, so I did, also noting that she was black. He responded, \u201cyeah bro she\u2019s cute, but you could have one of the white girls here!\u201d I questioned his statement and he realized it didn\u2019t fly with me. We eventually moved on and continued the night, but I couldn\u2019t get it out of my head. He truly didn\u2019t think anything of it when he said it. And he assumed that I would agree with him. To him, the preference for white women was undisputed, so he suggested it unapologetically. It was especially hard for me because outside of that statement, there was nothing to suggest he was racist. He had treated me with nothing but love and admiration, and accepted me into his crew. It was simply ignorance, which had probably been reinforced countless times, and that was difficult to wrestle with.\n These stories of implicit bias on display matter because these attitudes directly contribute and maintain systemic racism within our society. The differences in our understandings of our relationship with the police speak exactly to why there is so much controversy right now. The messages sent to the black males when they speak properly, or black girls about their inferiority (spoken or unspoken), help to build an inaccurate picture of what a black person is supposed to be. These attitudes are what foster the ignorance and apathy that is so rightly being called out right now. Their existence in any form ensures the survival of this corrupt system.\n I think of times where my own ignorance let me I buy into the insensitivity shown towards the black struggle, often just to induce laughs. Most notably, during a visit to a Louisiana plantation during my sophomore year of high school, I shamefully recall posing for a picture with a noose around my neck. I remember walking around downtown New Orleans later that evening with it around my friend\u2019s neck, me jokingly walking him like a dog. Two black guys on the street, a bit older than us, said to me \u201cthat\u2019s not fucking funny bro\u201d. I immediately filled with guilt upon recognizing my stupidity, and struggle even today to understand what made me think either were permissible at the time. Sharing that story relieves some of that guilt, yes, but I think it speaks perfectly to how being wrapped up in white teen culture led me to buy into, and even spearhead, the insensitivity that is often exhibited towards issues of the black struggle that have been incorrectly categorized as \u201cin the past\u201d. If you don\u2019t agree, why did none of my white friends call me out for it? We were young at the time, but I\u2019d ask why didn\u2019t we know any better? To us, we assumed the pain of that type of racism was dead, but we all just witnessed a modern day lynching on camera.\n Then there are the instances that most white people have experienced, and probably never knew how damaging their words were. As every token black friend can recall, there are the times a white friend chooses to dub you \u201cthe whitest black kid I know.\u201d It is based on the way I speak or dress, or the things I\u2019m into, but it is only a comment on me not fitting the image they have of a black person. But when I exhibit resistance to accept such a title, the white person exclaims it as a compliment \u2014 as if the inherent superiority of whiteness should leave me honored to be counted among their ranks. And more impactfully, it suggests that my blackness is something that can be taken from me. That my identity as a black man fades because I am into John Mayer or I\u2019ve visited the Hamptons. And further, that that identity is not something I am proud of, disconnecting from my choice to keep white company. It ignores that the acculturation and assimilation that occurs with growing up with all white friends was not voluntary. It suggests that my blackness is a burden, when in fact, minimizing my blackness was most often my burden. Or when I am criticized by my white friends for code-switching when I am with my black friends, just because they don\u2019t understand the slang and how it connects black people to a common culture. The biases are evident, you just need to pay attention. Believe me, because I wasn\u2019t spared from buying into them myself. It wasn\u2019t until I got to college that I began to realize how much of my subconscious effort had gone into being as un-stereotypically black as possible. Whether in the choices concerning the way I dress, speak, or even dance, I noticed that, without realizing it, I habitually quelled aspects of my black identity and based on that ability, consistently inflated my self-worth as superior to my fellow black brothers. I had unknowingly bought into advancing the very biases set out against me.\n I\u2018d emphasize that most white people do not understand their level of ignorance \u2014 especially the good ones, who mean well, and that negligence is part of the problem. Many of the white people I know have no concept of the role they have, passively or actively, played in perpetuating these conditions. They have no idea how much we long to hear them speak up for us, and to embrace some of the discomfort around these issues with us. Furthermore, the good ones are oblivious to the level of overt racism that is still out there. I have been among my white friends in all the times I\u2019ve been called nigger by a stranger. In all these situations, my white friends seemed shocked. They had been misled to believe that that situation only occurred in the past, and when reading  To Kill a Mockingbird. Comfortingly, they always leaped to me defense verbally, and the savior complex within them encouraged them to seek retribution. In one vivid case, at a bar in Cape Cod having just finished a conversation with a friend, one guy, not realizing I was still in earshot nor aware of my relationship with the friend, came over and asked \u201cyou really talking to that nigger?\u201d My friend was stunned, but immediately came back at the guy, his anger for me visible. He then came to me boasting that he has black friends as if that should warrant him a pass. As much as each situation ruined my night, everything after went well, and I was embraced by a group of allies who wanted to fight for me when they heard that word. I had no further reason to be upset. Yet, probably only the friend who walked ahead of the group with me knows that I cried my eyes out the entire walk home; unable to explain how that word garnered so much control over me.\n But the problematic result of these situations of overt racism is that it leaves the good white people to feel liberated from any responsibility concerning any type of racism. It makes it difficult to accept the reality of privilege, structural racism, and implicit biases they hold that do not make them racist themselves, but they do benefit from. This is one of the first times I have felt it was not only okay, but promoted to share these things. If there is one thing every token black friend knows, it is that we are not to provoke serious discussions of racial issues among our white crowd. We should only offer an opinion on such matters when invited to do so by our white peers. But we should ensure that the opinion is in line enough with the shared opinion of our white friends, as to not make it too awkward or ostracizing. It doesn\u2019t need to be, and shouldn\u2019t be this way. Many of us are eager to share our stories and we have only been waiting for the invitation to do so.\n I am comforted when I see white people call things out for what they are. When my friends and I rented a 16 passenger van for a New Year\u2019s Eve trip to Montreal, we found ourselves held up at the border coming back. The older agent, surveying the passengers, asked how we all knew each other, to which we answered, \u201cwe all went to high school together\u201d then followed up by singling me out, \u201cand how do you fit in here?\u201d What he was suggesting about my place in the group of all white guys was telling enough, and the guys I was with were quick to support me, and point it out to their parents when debriefing the trip once we arrived home. If only they knew how often I\u2019d experienced situations like that one. They should know that conversations about little things like this instance are what we need more of because they get the ball rolling. It is not our job to h\n......", "posttime": "2020-06-09 15:46:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed1\u4eba,token", "title": "\u4e00\u4f4d\u8c61\u5f81\u6027\u7684\u9ed1\u4eba\u670b\u53cb\u7684\u611f\u60f3", "title_en": "Reflections from a Token Black Friend", "transed": 1, "url": "https://medium.com/@rnagarajah2/reflections-from-a-token-black-friend-2f1ea522d42d", "via": "", "real_tags": ["\u9ed1\u4eba", "token"]}]