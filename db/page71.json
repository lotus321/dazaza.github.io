[{"category": "", "categoryclass": "", "imagename": "6abe98fc4fb5b6b504f0f91926c603e5.png", "infoid": 1006561, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u4eec\u4f17\u7b79\u4e86\u4e00\u7b1410000\u7f8e\u5143\u7684\u8d4f\u91d1\uff0c\u4ee5\u6bd4\u7279\u5e01\u652f\u4ed8\uff0c\u8d2d\u4e70\u4e00\u4e2a\u5f00\u6e90\u5de5\u5177\uff0c\u5e2e\u52a9\u4eba\u4eec\u5c06\u4ed6\u4eec\u7684\u8ffd\u968f\u8005\u4ece\u63a8\u7279\u8f93\u51fa\u5230Substack\u3001Ghost\u3001\u5f53\u5730\u4eba\u6216\u5176\u4ed6\u7528\u6237\u63a7\u5236\u7684\u5e73\u53f0\u4e0a\u3002\n\u56e0\u4e3a\u8fd9\u662f\u8bb8\u591a\u4eba\u60f3\u8981\u7684\uff0c\u6240\u4ee5\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u597d\u65b9\u6848\u53ef\u4ee5\u6210\u4e3a\u4e00\u79cd\u4ea7\u54c1\uff0c\u751a\u81f3\u662f\u4e00\u5bb6\u521d\u521b\u516c\u53f8\u3002\u4f60\u9996\u5148\u8981\u8ba9\u5b83\u5bf9Twitter\u6709\u5f71\u54cd\u529b\u7684\u4eba\u8d77\u5230\u5f88\u597d\u7684\u4f5c\u7528\uff0c\u53ef\u80fd\u662f\u901a\u8fc7\u767d\u624b\u5957\u670d\u52a1\uff0c\u4e3a\u524d100\u4e2a\u5de6\u53f3\u7684\u8d26\u6237\u63d0\u4f9b\u670d\u52a1\u3002\u7136\u540e\u8ba9\u5b83\u5728\u5176\u4ed6\u793e\u4ea4\u5e73\u53f0\u4e0a\u8fd0\u884c\u3002\u50cfBuffer\u8fd9\u6837\u7684\u516c\u53f8\u505a\u5f97\u975e\u5e38\u597d(2000\u4e07\u7f8e\u5143+ARR\uff01)\u3002\u7c7b\u4f3c\u7684\u770b\u4f3c\u7b80\u5355\u7684\u4ea7\u54c1\u586b\u8865\u4e86\u793e\u4ea4\u7f51\u7edc\u9886\u57df\u7684\u4e00\u4e2a\u6f0f\u6d1e\u3002\nTwitter\u662f\u4e00\u4e2a\u5b66\u4e60\u548c\u5bfb\u627e\u5fd7\u540c\u9053\u5408\u7684\u4eba\u7684\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5e73\u53f0\u3002\u6211\u5f88\u94a6\u4f69\u6770\u514b\u00b7\u591a\u5c14\u897f\u548c\u4ed6\u7684\u56e2\u961f\u6240\u53d6\u5f97\u7684\u6210\u5c31\u3002\n\u7136\u800c\uff0c\u5bf9\u4e8e\u62e5\u6709\u5927\u91cf\u8ffd\u968f\u8005\u7684\u7528\u6237\u6765\u8bf4\uff0c\u5b83\u6709\u51e0\u4e2a\u7f3a\u70b9\uff0c\u56e0\u4e3a\u5b83\u7f3a\u4e4f\u7528\u4e8e\u4ee5\u4e0b\u65b9\u9762\u7684\u5de5\u5177\uff1a\n\u8d27\u5e01\u5316\uff1a\u4f60\u4e0d\u4f1a\u4f5c\u4e3a\u63a8\u7279\u6709\u5f71\u54cd\u529b\u7684\u4eba\u8d5a\u94b1\uff0c\u4e5f\u4e0d\u4f1a\u53bb\u5e97\u9762\u5356\u4e1c\u897f\u3002\n\u4f18\u5148\u987a\u5e8f\uff1a\u60a8\u4e0d\u80fd\u5bf9\u60a8\u7684\u8ba2\u9605\u6e90\u6216\u60a8\u7684\u5173\u6ce8\u8005\u7684\u63d0\u8981\u4e2d\u51fa\u73b0\u7684\u5185\u5bb9\u8fdb\u884c\u4e0a\u8c03\u6216\u4e0b\u8c03\u3002\n\u54c1\u724c\u7ba1\u7406\uff1a\u60a8\u4e0d\u80fd\u63a7\u5236\u81ea\u5df1\u7684\u54c1\u724c\u6216\u57df\u540d\uff0c\u56e0\u4e3a\u5b83\u662ftwitter.com/instance\u800c\u4e0d\u662fexample.com\u3002\n\u7531\u4e8e\u8fd9\u4e9b\u548c\u66f4\u591a\u7684\u539f\u56e0\uff0c\u8bb8\u591a\u4eba\u6b63\u5728\u8f6c\u5411Substack\u3001Ghost\u3001Locals\u7b49\u5e73\u53f0\u3002\u5728\u8fd9\u4e9b\u5e73\u53f0\u4e2d\uff0c\u6709\u5f71\u54cd\u529b\u7684\u4eba\u5bf9\u4ed6\u4eec\u7684\u793e\u533a\u62e5\u6709\u5b8c\u5168\u7684\u6839\u6743\u9650\uff0c\u53ef\u4ee5\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u4f53\u9a8c\u3002\u4f60\u4e0d\u9700\u8981\u4ed8\u94b1\u7ed9Twitter\u5e7f\u544a\u6765\u63a5\u89e6\u4f60\u7684\u8ffd\u968f\u8005\uff0c\u4e5f\u4e0d\u9700\u8981\u76f8\u4fe1\u4ed6\u4eec\u4f1a\u628a\u4f60\u7684\u5185\u5bb9\u9001\u5230\u4ed6\u4eec\u7684feed\u4e0a\u3002\n\u7136\u800c\uff0c\u95ee\u9898\u662f\uff0c\u4eceTwitter\u4e0a\u8f93\u51fa\u4e00\u4e2a\u5e9e\u5927\u7684\u8ffd\u968f\u8005\u57fa\u7840\u5e76\u4e0d\u662f\u4e00\u4ef6\u5fae\u4e0d\u8db3\u9053\u7684\u4e8b\uff01\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u95ee\u9898\u4e0d\u662f\u5bfc\u51fa\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u6570\u636e\u3002\u8fd9\u76f8\u5bf9\u5bb9\u6613\uff0cTwitter\u5df2\u7ecf\u652f\u6301\u8fd9\u4e00\u70b9\u3002\u95ee\u9898\u4e0d\u662f\u8bbf\u95ee\u4f60\u81ea\u5df1\u7684\u6570\u636e\uff0c\u800c\u662f\u5728\u6ca1\u6709Twitter\u989d\u5916\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u8054\u7cfb\u4f60\u7684\u8ffd\u968f\u8005(\u4f8b\u5982\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u6216\u7535\u8bdd)\u7684\u80fd\u529b\u3002\n\u7406\u60f3\u7684\u60c5\u51b5\u662f\u8fd9\u6837\u7684\uff1a\u5982\u679c\u4f60\u6709N\u4e2a\u7c89\u4e1d\uff0c\u4f60\u4f1a\u5f97\u5230\u8fd9\u4e9b\u7c89\u4e1d\u7684N\u4e2a\u7535\u5b50\u90ae\u4ef6(\u6216\u7535\u8bdd\u53f7\u7801)\u5217\u8868\uff0c\u4ed6\u4eec\u660e\u786e\u540c\u610f\u5728\u53e6\u4e00\u4e2a\u5e73\u53f0\u4e0a\u4e0e\u4ed6\u4eec\u8054\u7cfb\uff0c\u800c\u4e14\u4e0d\u4f1a\u7ed9\u4ed6\u4eec\u5e26\u6765\u592a\u591a\u751a\u81f3\u6839\u672c\u5c31\u662f\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\u3002\u6b64\u5916\uff0c\u89e3\u51b3\u65b9\u6848\u4e0d\u5e94\u8be5\u5360\u7528\u5f71\u54cd\u8005\u8fd0\u884c\u548c\u7ef4\u62a4\u811a\u672c\u7684\u592a\u591a\u65f6\u95f4\u3002\n\u7406\u8bba\u4e0a\uff0cTwitter\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u52a0\u5165\uff0c\u5141\u8bb8\u4ed6\u4eec\u5173\u6ce8\u7684\u51e0\u4e2a\u3001\u90e8\u5206\u6216\u6240\u6709\u8d26\u6237\u67e5\u770b\u4ed6\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u6216\u8bb8\u53ef\u4ee5\u6362\u53d6\u67d0\u79cd\u5f62\u5f0f\u7684\u5c0f\u989d\u652f\u4ed8\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8d26\u6237\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u8d26\u9f84\u8d85\u8fc73\u4e2a\u6708\u7684\u5173\u6ce8\u8005\u548c&gt\uff1b100\u4e2a\u73b0\u5b9e\u5173\u6ce8\u8005\u7684\u9a8c\u8bc1\u7535\u5b50\u90ae\u4ef6\u652f\u4ed8X\u7f8e\u5143\u3002\n\u4f46\u662f\u5728\u6ca1\u6709\u8fd9\u6837\u7684\u5185\u7f6e\u529f\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u51e0\u79cd\u91cd\u53e0\u7684\u65b9\u5f0f\u53ef\u4ee5\u5c06\u7528\u6237\u57fa\u5bfc\u51fa\u5230example.com/SUBSCRIBE\u3002\n\u5efa\u7acb\u4e00\u4e2a\u5355\u72ec\u7684\u65b0\u5e10\u6237\uff0c\u505a#1-4\uff0c\u4ee5\u907f\u514d\u5728\u60a8\u7684\u65f6\u95f4\u7ebf\u4e0a\u516c\u5f00\u63d0\u53ca\u3002\n\u89e3\u6790\u6bcf\u4e2a\u5173\u6ce8\u8005\u5e10\u6237\u7684\u4e2a\u4eba\u7b80\u5386\u4ee5\u83b7\u53d6\u516c\u5171\u8054\u7cfb\u4fe1\u606f(\u4f8b\u5982\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u7b80\u5386\u4e2d\u6709\u4ed6\u4eec\u7684\u7535\u5b50\u90ae\u4ef6)\uff0c\u7136\u540e\u901a\u8fc7example.com/scribe\u5411\u4ed6\u4eec\u53d1\u9001\u5e26\u5916\u7535\u5b50\u90ae\u4ef6\u3002\n\u8fd9\u4e9b\u90fd\u4e0d\u662f\u5341\u5168\u5341\u7f8e\u7684\u3002\u4f46\u662f\u6700\u540e\u4e00\u4e2a\u770b\u8d77\u6765\u662f\u5408\u7406\u7684(\u5bf9\u4e8e\u9009\u62e9\u8ddf\u968f\u4f60\u7684\u4eba\u6765\u8bf4\uff0c\u5355\u4e2aDM\u5e94\u8be5\u662f\u53ef\u4ee5\u7684)\uff0c\u5e76\u4e14\u5728\u7406\u8bba\u4e0a\u76f8\u5bf9\u5bb9\u6613\u81ea\u52a8\u5316\u3002\u6211\u4eec\u79f0\u8fd9\u4e3a\u5927\u4f17DM\u65b9\u6cd5\u3002\u7279\u522b\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cTwitter\u4e3a\u4f01\u4e1a\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5de5\u5177\uff0c\u7528\u4e8e\u901a\u8fc7DM\u5bf9\u5ba2\u6237\u670d\u52a1\u8fdb\u884c\u6587\u6863\u7f16\u5236\uff0c\u8fd9\u4e9b\u5de5\u5177\u53ef\u80fd\u4f1a\u88ab\u91cd\u65b0\u7528\u4e8e\u6b64\u7528\u4f8b\u3002\n\u5927\u89c4\u6a21DM\u65b9\u6cd5\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u662f\u547d\u4ee4\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2aTwitter API\u5bc6\u94a5\u548c\u53d1\u9001\u7ed9\u6bcf\u4e2a\u7528\u6237\u7684\u6d88\u606f\u4f5c\u4e3a\u8f93\u5165\u3002\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u6240\u6709\u5173\u6ce8\u8005\u7684\u9884\u89c8\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9009\u9879\u6765\u6839\u636e\u91cd\u8981\u6027\u5bf9\u4ed6\u4eec\u8fdb\u884c\u6392\u540d\uff0c\u5e76\u5141\u8bb8\u4f60\u5728\u6bcf\u5929\u5f00\u653e\u52301000\u4e2a\u8d26\u6237\u4e4b\u524d\uff0c\u901a\u8fc7\u5411\u51e0\u4e2a\u8d26\u6237\u53d1\u9001\u6d4b\u8bd5\u90ae\u4ef6\u6765\u8fdb\u884c\u5c1d\u8bd5\u3002\u5b83\u5b58\u50a8\u72b6\u6001\uff0c\u8fd9\u6837\u60a8\u5c31\u77e5\u9053\u60a8\u8fc7\u53bb\u7ed9\u8c01\u53d1\u4e86\u6d88\u606f\uff0c\u8fd9\u6837\u60a8\u5c31\u4e0d\u4f1a\u65e0\u610f\u4e2d\u91cd\u65b0\u8054\u7cfb\u4ed6\u4eec\u3002\n\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u66f4\u534e\u4e3d\u7684\u672c\u5730Mac App\uff0c\u5b83\u5728\u4e0a\u9762\u63cf\u8ff0\u7684\u547d\u4ee4\u884c\u5f15\u64ce\u4e4b\u4e0a\u653e\u4e86\u4e00\u4e2a\u6f02\u4eae\u7684GUI\u3002\u6216\u8005\u4e00\u4e2a\u66f4\u534e\u4e3d\u7684\u6258\u7ba1\u7248\u672c\uff0c\u5e26\u6709\u5355\u72ec\u7684\u8f6c\u6362\u94fe\u63a5\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u7528\u6237\u540d\u8f6c\u6362\u6210\u4e86\u54ea\u4e9b\u7535\u5b50\u90ae\u4ef6\u3002\u6258\u7ba1\u7248\u672c\u8fd8\u5141\u8bb8\u60a8\u6bcf\u5929\u5728\u540e\u53f0\u8fd0\u884c1000\u4e2aDM\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u662f\u4e00\u9879SaaS\u670d\u52a1\u3002\n\u6709\u8db3\u591f\u591a\u7684\u5176\u4ed6\u4eba\u5bf9\u6b64\u611f\u5174\u8da3\uff0c\u622a\u81f32020\u5e746\u670814\u53f7\u661f\u671f\u65e5\uff0c\u8d4f\u91d1\u603b\u989d\u5df2\u8fbe&gt\uff1b10000\u7f8e\u5143\uff01\n\u5982\u679c\u6709\u66f4\u591a\u7684\u94b1\u8d85\u8fc710,000\u7f8e\u5143\uff0c\u6211\u4eec\u5c06\u5206\u914d\u7b2c\u4e00\u4e2a10,000\u7f8e\u5143\u7ed9\u83b7\u80dc\u8005\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u628a\u5269\u4f59\u7684\u94b1\u5206\u914d\u7ed9\u90a3\u4e9b\u6d4b\u8bd5\u8fc7\u8fd9\u6b3e\u5e94\u7528\u7684\u4eba\uff0c\u548c/\u6216\u53ef\u80fd\u5206\u914d\u7ed9\u7b2c\u4e8c\u540d\u548c\u7b2c\u4e09\u540d\u7684\u7528\u6237\u3002\n\u5728\u673a\u5236\u65b9\u9762\uff0c\u6211(@balajis)\u5c06\u57282020\u5e746\u670821\u65e5\u4e4b\u524d\u51b3\u5b9a\u83b7\u80dc\u8005\uff0c\u7136\u540e\u5c06\u83b7\u80dc\u8005\u7684BTC\u5730\u5740\u63d0\u4f9b\u7ed9\u516c\u5f00\u652f\u6301\u8d4f\u91d1\u7684\u5404\u4e2a\u4eba\u3002\n\u8fd9\u4e9b\u4eba\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e49\u52a1\u652f\u4ed8\u4ed6\u4eec\u63d0\u4ea4\u7ed9\u83b7\u80dc\u8005\u7684\u91d1\u989d\u3002\u4ed6\u4eec\u53ef\u4ee5\u9009\u62e9\u516c\u5f00\u53d1\u5e03\u5728\u7ebf\u786e\u8ba4\u3002\n\u8bf7\u8f6c\u5230\u672c\u671f\u5e76\u53d1\u8868\u8bc4\u8bba\uff0c\u5e76\u63d0\u4f9b\u6307\u5411\u60a8\u7684\u9879\u76ee\u7684\u94fe\u63a5\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5b83\u5e94\u8be5\u6709\u4e00\u4e2agif\u6216\u4ec0\u4e48\u4e1c\u897f\u6765\u8bc1\u660e\u5b83\u662f\u6709\u6548\u7684\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u7406\u60f3\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u6709N\u4e2a\u8ffd\u968f\u8005\uff0c\u5728\u4ed6\u4eec\u660e\u786e\u540c\u610f\u5728\u53e6\u4e00\u4e2a\u5e73\u53f0\u4e0a\u4e0e\u4ed6\u4eec\u8054\u7cfb\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u5f97\u5230\u8fd9\u4e9b\u8ffd\u968f\u8005\u7684n\u5c01\u7535\u5b50\u90ae\u4ef6(\u6216\u7535\u8bdd\u53f7\u7801)\u5217\u8868\uff0c\u800c\u4e0d\u4f1a\u7ed9\u4ed6\u4eec\u5e26\u6765\u592a\u591a\u6216\u6839\u672c\u7684\u9ebb\u70e6\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u5f71\u54cd\u8005\u9020\u6210\u592a\u591a\u65f6\u95f4\u6216\u91d1\u94b1\u7684\u8981\u6c42\u3002\n\u8fd9\u4e9b\u90fd\u662f\u4e00\u4e2a\u5173\u952e\u7684\u7ea6\u675f\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u5728\u7406\u8bba\u4e0a\u662f\u6709\u6548\u7684\uff0c\u4f46\u5b83\u7834\u574f\u4e86\u62e5\u6709\u5f88\u591a\u8ffd\u968f\u8005\u7684\u8d26\u6237\uff0c\u6216\u8005\u56e0\u4e3a\u5783\u573e\u90ae\u4ef6\u800c\u5bfc\u81f4\u8d26\u6237\u88ab\u7981\u6b62\u6216\u5f71\u5b50\u88ab\u7981\u6b62\uff0c\u6216\u8005\u6709\u5176\u4ed6\u4e00\u4e9b\u4e25\u91cd\u7684\u8d1f\u9762\u526f\u4f5c\u7528\uff0c\u90a3\u4e48\u4f60\u5c31\u6ca1\u6709\u89e3\u51b3\u65b9\u6848\u3002\n\u56e0\u4e3a\u60a8\u6bcf\u5929\u53ea\u80fd\u53d1\u90011000\u4e2aDM\uff0c\u6240\u4ee5\u60a8\u9700\u8981\u786e\u5b9a\u5173\u6ce8\u8005\u7684\u4f18\u5148\u987a\u5e8f\uff0c\u4ee5\u4fbf\u9996\u5148\u5bfc\u51fa\u6700\u91cd\u8981\u7684\u5173\u6ce8\u8005\u3002\u8fd9\u4e9b\u4eba\u53ef\u80fd\u81ea\u5df1\u62e5\u6709\u6700\u591a\u7684\u8ffd\u968f\u8005\uff0c\u6216\u8005\u5728\u4ed6\u4eec\u7684\u4e2a\u4eba\u7b80\u5386\u4e2d\u6709\u4e00\u4e9b\u5c5e\u6027(\u6bd4\u5982#\u6bd4\u7279\u5e01\u6807\u7b7e)\uff0c\u6216\u8005\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u6807\u51c6\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u5173\u6ce8\u8005\u8868\uff0c\u5176\u4e2d\u7b2c\u4e00\u5217\u662fTwitter\u7528\u6237\u540d\uff0c\u540e\u7eed\u5217\u662f\u8be5\u7528\u6237\u540d\u7684\u5143\u6570\u636e(\u4ee5\u53ca\u4e0a\u6b21\u6536\u96c6\u8be5\u5143\u6570\u636e\u7684\u65f6\u95f4\u6233\uff0c\u56e0\u4e3a\u968f\u7740\u4eba\u4eec\u66f4\u65b0\u4ed6\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5b83\u53ef\u80fd\u4f1a\u53d8\u5f97\u9648\u65e7)\u3002\n\u662f\u7684\uff0cTwitter\u7684\u9ed8\u8ba4API\u6709\u6bcf\u59291000 DM\u7684\u9650\u5236\u3002\u56e0\u6b64\uff0c\u60a8\u7684\u5de5\u5177\u53ef\u80fd\u9700\u8981\u8fd0\u884c\u6570\u5929\u3002\n\u5f00\u653e\u6e90\u7801\u7248\u672c\u5c06\u5728\u672c\u5730\u8fd0\u884c\uff0c\u5e76\u5177\u6709\u67d0\u79cd\u72b6\u6001\uff0c\u5982SQLite\u6570\u636e\u5e93\u6216\u5e73\u9762\u6587\u4ef6\u3002\u5b83\u5c06\u4f7f\u7528\u8be5\u72b6\u6001\u6765\u8bb0\u5f55DM\u7684\u4eba\u5458\u3001\u65f6\u95f4\uff0c\u4ee5\u53ca\u4ed6\u4eec\u8bf4\u4e86\u4ec0\u4e48\u4ee5\u53ca\u4ed6\u4eec\u662f\u5426\u505a\u51fa\u4e86\u56de\u5e94\u3002\u60a8\u8fd8\u5e94\u8be5\u5141\u8bb8\u5728\u65b0\u7684\u5173\u6ce8\u8005\u51fa\u73b0\u65f6\u5b9a\u671f\u91cd\u65b0\u8fd0\u884c\u8be5\u5de5\u5177\uff0c\u800c\u4e0d\u9700\u8981\u5f71\u54cd\u8005\u8003\u8651\u4ed6\u4eec\u662f\u5426\u5728\u4e0d\u7ecf\u610f\u95f4\u7ed9\u4ed6\u4eec\u5df2\u7ecf\u53d1\u8fc7\u6d88\u606f\u7684\u4eba\u53d1\u6d88\u606f\u3002\n\u4e5f\u8bb8\u5427\uff0c\u53ea\u8981API\u8bbf\u95ee\u5bf9\u4e8e\u62e5\u6709(\u6bd4\u65b9\u8bf4)10000\u540d\u8ffd\u968f\u8005\u7684\u5178\u578bTwitter\u5f71\u54cd\u8005\u6765\u8bf4\u4e0d\u662f\u592a\u6602\u8d35\u6216\u592a\u8017\u65f6\u3002\n\u8fd9\u662f\u6700\u7b80\u5355\u7684\u7248\u672c\uff0c\u4f46\u7406\u60f3\u60c5\u51b5\u4e0b\u5e94\u8be5\u6709\u4e00\u4e2a\u7b80\u5355\u7684Macapp\u548c\u4e00\u4e2a\u6258\u7ba1\u7248\u672c\u3002\n\u8fd9\u6b3eMac\u5e94\u7528\u7a0b\u5e8f\u5c06\u9762\u5411\u90a3\u4e9b\u4e0d\u662f\u5f00\u53d1\u4eba\u5458\uff0c\u4f46\u53c8\u4e0d\u60f3\u628a\u4ed6\u4eec\u7684Twitter\u8bc1\u4e66\u5206\u53d1\u7ed9\u4e00\u4e2a\u65b0\u7f51\u7ad9\u7684\u4eba\u3002\u4ed6\u4eec\u66f4\u559c\u6b22\u5728\u672c\u5730\u7c98\u8d34API\u5bc6\u94a5\u3002\n\u6258\u7ba1\u7248\u672c\u53ef\u80fd\u662f\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\uff0c\u5728\u8fd9\u91cc\u6709\u4eba\u767b\u5f55Twitter OAuth\u5e76\u5728\u540e\u53f0\u8bbe\u7f6e\u8fd9\u4e2a\u5927\u89c4\u6a21\u7684DM Torun\uff0c\u5206\u6790\u8c01\u88ab\u8054\u7cfb\u4e86\uff0c\u8c01\u6ce8\u518c\u4e86\uff0c\u7b49\u7b49\u3002\n\u7136\u800c\uff0c\u7531\u4e8eTwitter\u4e0a\u6709\u5f88\u591a\u53d8\u5e7b\u83ab\u6d4b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e14\u8003\u8651\u5230\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6240\u505a\u7684\u4e8b\u60c5\u7684\u6027\u8d28(\u5927\u91cf\u8ffd\u968f\u8005)\uff0c\u6709\u5f71\u54cd\u529b\u7684\u4eba\u4f1a\u60f3\u8981\u5c0f\u5fc3\u5730\u7167\u770b\u5b83\uff0c\u800c\u5f00\u6e90\u7248\u672c\u7684\u51fa\u73b0\u5c06\u589e\u52a0\u4eba\u4eec\u5bf9\u6258\u7ba1\u7248\u672c\u7684\u4fe1\u4efb\u3002\n\u5728GitHub\u548c\u66f4\u5e7f\u6cdb\u7684\u4e92\u8054\u7f51\u4e0a\uff0c\u6709\u5927\u91cf\u7684\u5f00\u6e90\u5de5\u5177\u53ef\u4ee5\u4e0eTwitter\u534f\u540c\u5de5\u4f5c\u3002\u4f60\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u5b83\u4eec\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\u3002\n\u8f93\u51fa\u4f60\u7684\u8ffd\u968f\u8005\u7684\u95ee\u9898\u9002\u7528\u4e8e\u6240\u6709\u7684\u793e\u4ea4\u5a92\u4f53\uff0c\u4eba\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u5341\u5e74\u7684\u5927\u90e8\u5206\u65f6\u95f4\uff0c\u4f46\u73b0\u5728\u611f\u89c9\u5b83\u5df2\u7ecf\u6cb8\u817e\u4e86\u3002\u6709\u4e00\u5927\u6279\u4eba\u6b63\u5728\u8f6c\u79fb\u5230Substack\u3001Ghost\u548c\u5f53\u5730\u4eba\u8fd9\u6837\u7684\u5e73\u53f0\u4e0a\uff0c\u8fd9\u4e9b\u5e73\u53f0\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u4f60\u7684\u89c2\u4f17(\u968f\u4e4b\u800c\u6765\u7684\u662f\uff0c\u4e3a\u5f71\u54cd\u8005\u8d5a\u94b1\uff0c\u4e3a\u89c2\u4f17\u5e26\u6765\u597d\u5904)\u3002\n\u5982\u679c\u6211\u4eec\u80fd\u4e3a\u63a8\u7279\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4e5f\u8bb8\u53ef\u4ee5\u5c06\u5176\u63a8\u5e7f\u5230Facebook\u548cInstagram\u7b49\u5176\u4ed6\u5e73\u53f0\u4e0a\u7684\u90e8\u5206\u6709\u5f71\u54cd\u529b\u7684\u4eba\u79bb\u5f00\u3002\n\u8bf7\u6ce8\u610f\uff0cTwitter\u548c\u516c\u53f8\u5f88\u5feb\u5c31\u4f1a\u597d\u8d77\u6765\u7684\uff0c\u800c\u4e14\u4e0d\u4f1a\u5f88\u5feb\u6d88\u5931\u3002\u8fd9\u662f\u4e00\u79cd\u5c71\u6d1e\u4e0e\u516c\u5730\u7684\u65b9\u6cd5\u3002\u5927\u578b\u7684\u5168\u7403\u793e\u4ea4\u7f51\u7edc\u53ef\u80fd\u8fd8\u4f1a\u6301\u7eed\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u5728\u90a3\u91cc\u62db\u52df\u6210\u5458\uff0c\u4f46\u8fd9\u4e9b\u7531\u4e2a\u4eba\u5f71\u54cd\u529b\u4eba\u58eb\u9886\u5bfc\u7684\u793e\u533a\u5c06\u4f1a\u84ec\u52c3\u53d1\u5c55\u3002\n\u6700\u540e\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u50cfBuffer\u8fd9\u6837\u89e3\u51b3\u8fd9\u7c7b\u770b\u4f3c\u7b80\u5355\u95ee\u9898\u7684\u516c\u53f8\u5df2\u7ecf\u83b7\u5f97\u4e862000\u4e07\u7f8e\u5143\u4ee5\u4e0a\u7684ARR\u3002\u5982\u679c\u4f60\u80fd\u6784\u5efa\u548c\u7ef4\u62a4\u4e00\u4e2a\u5de5\u5177\uff0c\u5728\u5f97\u5230\u7528\u6237\u540c\u610f\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u5408\u7406\u7684\u4ef7\u683c\u53ef\u9760\u5730\u4eceTwitter\u548c\u5176\u4ed6\u793e\u4ea4\u7f51\u7edc\u5bfc\u51fa\u5927\u91cf\u8ffd\u968f\u8005\u7535\u5b50\u90ae\u4ef6\uff0c\u90a3\u4e48\u4f60\u5c31\u62e5\u6709\u4e86\u53ef\u80fd\u4f1a\u8ba9\u5927\u91cf\u6709\u5f71\u54cd\u529b\u7684\u4eba\u4ed8\u94b1\u7684\u4e1c\u897f\u3002", "note_en": "People have crowdfunded a  $10000 bounty, payable in BTC, for an open sourcetool that helps people export their followers from Twitter to Substack,  Ghost,  Locals, or other user-controlledplatforms.\n  Because this is desired by many people, a good solution to this bountycould become a product or even a startup. You&#39;d want to first get itto work robustly for Twitter influencers, probably via white gloveservice for the first 100 or so accounts. And then make it work forother social platforms. Companies like  Buffer have donesurprisingly well ($20M+ ARR!) with similar seemingly simpleproducts that fill a hole in the social networking landscape.\n  Twitter is an incredible platform for learning and finding people oflike mind. I admire much of what Jack Dorsey and his team haveaccomplished.\n However, it has several downsides for users with large follower bases,as it lacks tools for:\n monetization: you don&#39;t make money as a Twitter influencer, and don&#39;t get a storefront to sell things\n   prioritization: you can&#39;t up- or down-regulate what appears in your feed or that of your followers\n brand management: you don&#39;t control your own brand or domain name, as it&#39;s twitter.com/example rather than example.com\n For these reasons and more, many people are moving to platforms like Substack,  Ghost,  Locals, or the like. In these platforms,an influencer has full root privileges over their community and cangive a richer experience. You don&#39;t need to pay Twitter ads to reachyour followers, or trust that they will deliver your content to theirfeed.\n The issue, however, is that it&#39;s not trivial to export a largefollower base from Twitter!\n Note that the problem here is  not the export of one&#39;s own profiledata. That is relatively easy and  Twitter alreadysupports that. The issue is not the  access to your own data, theissue is the ability to  contact your followers (eg via email orphone) without Twitter&#39;s additional consent.\n  Here&#39;s the ideal: if you have N followers, you get a list of N emails(or phone numbers) for those followers  with their explicit consentto contact them on another platform, and without bothering them verymuch or at all. Also, the solution shouldn&#39;t take too much time on thepart of the influencer to run and maintain a script.\n In theory, Twitter could add a feature where users could opt in toallowing their emails to be viewed by a few, some, or all of theaccounts they followed, perhaps in return for a micropayment of somekind. For example, an account could pay $X for the verified email ofeach follower with an account age over 3 months and &gt;100 realfollowers themselves.\n But in the absence of a built-in feature like this, there are severaloverlapping ways to export your userbase to example.com/subscribe.\n Set up a separate new account that does #1-4, to keep the public mentions out of your timeline\n Parse the bios of each follower account for public contact info (eg if they have their email in their bio), and email them out-of-band with example.com/subscribe\n None of these are perfect. But the last one seems like it has theright balance of being reasonable (a single DM to someone who haschosen to follow you should be OK) and in theory relatively easy toautomate. Call this the mass DM approach. In particular, Twitter has a bunch of tools for corporations to docustomer service  via DM that might be repurposed for this use case.\n  The simplest solution for the mass DM approach might be a command line app that takes as input a Twitter API key and a message to send each user. It gives you a preview of all of your followers, gives you some options to rank them by importance, and lets you try it out by sending test messages to a few accounts before opening it up to message 1000 accounts per day. It stores state so you know who you messaged in the past, such that you don&#39;t inadvertently recontact them.\n You can imagine a fancier local Mac App that puts a nice GUI on top of the command line engine described above. Or an even fancier hosted version with individually attributable conversion links, so you know which usernames converted to which emails. The hosted version would also allow you to keep running the 1000 DMs per day in the background, so it could be a SaaS service.\n     Enough other people were interested in this that the total bounty funds are now &gt;$10000 as of Sunday June 14, 2020!\n If more money comes in beyond $10,000, we will allocate the first $10,000 to the winner. We&#39;ll then allocate remaining monies to folks who test out the app and/or possibly to second and third place submissions.\n   In terms of mechanics, I (@balajis) will decide on the winner by June21, 2020, and then the BTC address of the winner will be provided tothe various people who have publicly supported the bounty.\n It will be incumbent upon each of these people to pay what they havecommitted to the winner. They can optionally publicly post an on-chainconfirmation.\n   Go to this  issue and make a comment with a link toyour project. Ideally it should have a gif or something that showsthat it works.\n  As noted above, the ideal is that if you have N followers, you get a list ofN emails (or phone numbers) for those followers  with their explicitconsent to contact them on another platform, and without botheringthem very much or at all, or requiring too much time or money on the partof the influencer.\n   These are a critical constraint. If you have a solution that works in theory, but thatbreaks on accounts with many followers, or gets an account banned or shadowbanned for spam,or has some other serious negative side effect, then you don&#39;t have a solution.\n  Because you can only send 1000 DMs per day, you will want to prioritize your followers such that you export the most important ones first. These might be the ones who have the most followers themselves, or who have some attribute in their bio (like a #Bitcoin hashtag), or that have some other criteria. In practice this means that you&#39;ll likely want a  follower table, where the first column is the Twitter username and subsequent columns are metadata on that username (along with a timestamp for when that metadata was last collected, as it can become stale as people update their profiles).\n  Yes, Twitter&#39;s default API has a  1000-daily-DM limit. So your tool might need to runfor multiple days.\n The open source version would run locally and have some state, like aSQLite database or a flatfile. It would use that state to record whatpeople it had DM\u2019d and when, along with what was said and whether theyresponded. You should also allow re-running of the tool periodicallyas new followers arise, without requiring the influencer to thinkabout whether they are inadvertently messaging people they alreadymessaged.\n  Maybe, so long as that API access isn&#39;t too expensive or timeconsuming to get for the typical Twitter influencer with (say) 10,000followers.\n   That&#39;s the simplest version, but ideally there should be a simple Macapp and a hosted version as well.\n The Mac app would be for folks who aren&#39;t developers, but don&#39;twant to give their Twitter credentials out to a new website. They&#39;dprefer to paste in an API key locally.\n The hosted version will probably be the most widely used, wheresomeone logs in with Twitter OAuth and sets up this mass DM torun in the background, with analytics on who has been contacted,who signed up, and so on.\n However, because there are many fly-by-night Twitter apps, and becauseof the nature of what this app is doing (mass DM of followers), theinfluencer will want to carefully babysit it and the presence of theopen source versions will increase trust in the hosted version.\n    There are tons of open source tools for working with Twitter out thereon GitHub and the broader internet. Feel free to use them rather thanreinventing the wheel.\n  The problem of exporting your following applies to all social media,and has been discussed for the better part of a decade, but it nowfeels like it&#39;s gotten to a boil. There is a critical mass of peoplewho are moving to platforms like Substack, Ghost, and Locals thatoffer greater control over your audience (and, with it, monetizationfor the influencer and benefits for the audience).\n If we can solve it for Twitter, we can probably generalize this towork for  partial exodus of influencers from other platforms likeFacebook and Instagram.\n Please note that Twitter and company will be fine and won&#39;t go away any time soon.This is a  cave-and-commons approach. The large global social networkswill likely persist for some time as &#34;commons&#34; where you recruitmembers, but these &#34;caves&#34; off to the side with individual influencer-led communitieswill thrive.\n Finally, as noted above, companies like Buffer that solve seemingly simple problemslike this have gotten to $20M+ in ARR. If you can build and maintain a tool that reliably exportsa large percentage of follower emails from Twitter and other social networks, with the consent of the users and at a reasonable price, you have something that a large number of influencers will likely pay for.", "posttime": "2020-06-15 03:27:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63a8\u7279,\u5f00\u6e90,\u8d4f\u91d1,bounty,twitter", "title": "10000\u7f8e\u5143\u7684\u6bd4\u7279\u5e01\u8d4f\u91d1\uff0c\u8d2d\u4e70\u4e00\u4e2a\u5f00\u6e90\u5de5\u5177\u6765\u5bfc\u51fa\u4f60\u7684\u63a8\u7279\u8ffd\u968f\u8005", "title_en": "$10000 BTC Bounty for an open source tool to export your Twitter followers", "transed": 1, "url": "https://github.com/balajis/twitter-export", "via": "", "real_tags": ["\u63a8\u7279", "\u5f00\u6e90", "\u8d4f\u91d1", "bounty", "twitter"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006560, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TL\uff1bDR\uff1a\u6211\u4eec\u6765\u770b\u770b\u5f53Unix\u7f16\u7a0b\u6a21\u578b\u6392\u9664\u68c0\u67e5\u8f93\u51fa\u672c\u8eab\u65f6\uff0cZsh\u548cFish\u5982\u4f55\u80fd\u591f\u5728\u7a0b\u5e8f\u8f93\u51fa\u4e2d\u6307\u51fa\u7f3a\u5c11\u7684\u7ec8\u6b62\u6362\u884c\u7b26\u3002\n\u5927\u591a\u6570shell\uff0c\u5305\u62ecbash\u3001ksh\u3001dash\u548cash\uff0c\u90fd\u4f1a\u5728\u524d\u4e00\u4e2a\u547d\u4ee4\u9000\u51fa\u5149\u6807\u65f6\u79bb\u5f00\u5149\u6807\u7684\u4f4d\u7f6e\u663e\u793a\u63d0\u793a\u7b26\u3002\n\u63d0\u793a\u7b26(\u51e0\u4e4e)\u603b\u662f\u51fa\u73b0\u5728\u4e0b\u4e00\u884c\u719f\u6089\u7684\u6700\u5de6\u8fb9\u4e00\u5217\uff0c\u8fd9\u662f\u56e0\u4e3aUnix\u7a0b\u5e8f\u5728\u9000\u51fa\u65f6\u666e\u904d\u5408\u4f5c\u5c06\u5149\u6807\u505c\u5728\u90a3\u91cc\u3002\n\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u8bf7\u59cb\u7ec8\u786e\u4fdd\u8f93\u51fa\u7ec8\u6b62\u6362\u884c\u7b26\\n(\u4e5f\u79f0\u4e3a\u6362\u884c\u7b26)\uff1a\nvidar@vidarholen-vm2~$whamividarvidar@vidarholen-vm2~$whomami|HEXDUMP-c0000000 v i d a r\\n\u3002\n\u5982\u679c\u7a0b\u5e8f\u672a\u80fd\u9075\u5faa\u6b64\u7ea6\u5b9a\uff0c\u63d0\u793a\u5c06\u5728\u9519\u8bef\u7684\u4f4d\u7f6e\u7ed3\u675f\uff1a\n\u4f46\u662f\uff0c\u6211\u6700\u8fd1\u6ce8\u610f\u5230\uff0czsh\u548cfish\u5c06\u6539\u4e3a\u663e\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u6307\u793a\u7f3a\u5c11\u6362\u884c\u7b26\uff0c\u5e76\u4e14\u4ecd\u7136\u5728\u60a8\u671f\u671b\u627e\u5230\u5b83\u7684\u4f4d\u7f6e\u5f00\u59cb\u63d0\u793a\uff1a\nvidarholen-vm2%ECHO-n34\uff1bhello zsh&#34\uff1bhello zsh%vidarholen-vm2%vidar@vidarholen-vm2~&gt\uff1bECHO-n34\uff1bhello fish\u23cevidar@vidarholen-vm2~&gt\uff1b\n\u5982\u679c\u60a8\u5bf9\u6709\u4e00\u6574\u7bc7\u535a\u5ba2\u6587\u7ae0\u90fd\u662f\u5173\u4e8e\u8fd9\u4e00\u70b9\u611f\u5230\u5931\u671b\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u8fd8\u6ca1\u6709\u5c1d\u8bd5\u7f16\u5199\u4e00\u4e2ashell\u3002\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u4f60\u77e5\u9053\u7684\u8d8a\u591a\uff0c\u770b\u8d77\u6765\u5c31\u8d8a\u96be(\u5f3a\u5236\u6027\u7684XKCD)\u3002\n\u5982\u679c\u60a8\u5fc3\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1aif(\uff01output.ends_with(&#34\uff1b\\n&#34\uff1b))printf(&#34\uff1b%\\n&#34\uff1b)\uff1b\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u9650\u5236*\uff1a\n\u4e0e\u666e\u904d\u8ba4\u4e3a\u7684\u76f8\u53cd\uff0cshell\u5e76\u4e0d\u4f4d\u4e8e\u7a0b\u5e8f\u548c\u7ec8\u7aef\u4e4b\u95f4\u3002\u5916\u58f3\u4e0d\u80fd\u62e6\u622a\u6216\u68c0\u67e5\u7a0b\u5e8f\u7684\u7ec8\u7aef\u8f93\u51fa\u3002\n\u7ec8\u7aef\u7f16\u7a0b\u6a21\u578b\u57fa\u4e8e\u7535\u4f20\u6253\u5b57\u673a(\u53c8\u540dTTY)\uff0c\u537320\u4e16\u7eaa\u521d\u7684\u673a\u7535\u6253\u5b57\u673a\u3002\u4ed6\u4eec\u9010\u4e2a\u5b57\u6bcd\u5730\u6253\u5370\u5230\u7eb8\u4e0a\uff0c\u56e0\u6b64\u6ca1\u6709\u5185\u5b58\u6216\u5c4f\u5e55\u7f13\u51b2\u533a\u53ef\u4ee5\u7f16\u7a0b\u56de\u8bfb\u3002\n\u5916\u58f3\u53ef\u4ee5\u4f7f\u7528\u7ba1\u9053\u62e6\u622a\u6240\u6709\u8f93\u51fa\uff0c\u5e76\u5c06\u5176\u4e2d\u7ee7\u5230\u7ec8\u7aef\u3002\u867d\u7136\u5b83\u5728woami\u8fd9\u6837\u7684\u666e\u901a\u60c5\u51b5\u4e0b\u6709\u6548\uff0c\u4f46\u6709\u4e9b\u7a0b\u5e8f\u4f1a\u68c0\u67e5stdout\u662f\u5426\u662f\u7ec8\u7aef\u5e76\u6539\u53d8\u5b83\u4eec\u7684\u884c\u4e3a\uff0c\u6709\u4e9b\u7a0b\u5e8f\u4f1a\u8d8a\u8fc7\u60a8\u7684\u6743\u9650\u76f4\u63a5\u4e0eTTY\u5bf9\u8bdd(\u4f8b\u5982\uff0cssh\u7684\u5bc6\u7801\u63d0\u793a\u7b26)\uff0c\u6709\u4e9b\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u7279\u5b9a\u4e8eTTY\u7684ioctls\uff0c\u5982\u679c\u8f93\u51fa\u4e0d\u662fTTY\uff0c\u6bd4\u5982\u67e5\u8be2\u7a97\u53e3\u5927\u5c0f\u6216\u7981\u7528\u5bc6\u7801\u8f93\u5165\u7684\u672c\u5730\u56de\u663e\uff0c\u8fd9\u4e9bioctls\u5c31\u4f1a\u5931\u8d25\u3002\n\u5916\u58f3\u7a0b\u5e8f\u53ef\u4ee5ptrace\u8be5\u8fdb\u7a0b\uff0c\u4ee5\u67e5\u770b\u5b83\u5728\u54ea\u91cc\u5199\u5165\u4e86\u4ec0\u4e48\u5185\u5bb9\u3002\u8fd9\u4f1a\u5e26\u6765\u5de8\u5927\u7684\u5f00\u9500\uff0c\u5e76\u7834\u574fsudo\u3001ping\u548c\u5176\u4ed6\u4f9d\u8d56suid\u7684\u547d\u4ee4\u3002\nshell\u53ef\u4ee5\u521b\u5efa\u4f2atty(Pty)\uff0c\u5728\u5176\u4e2d\u8fd0\u884c\u547d\u4ee4\uff0c\u5e76\u50cfssh\u6216\u811a\u672c\u4e00\u6837\u6765\u56de\u8f6c\u53d1\u4fe1\u606f\u3002\u8fd9\u662f\u4e00\u79cd\u70e6\u4eba\u4e14\u7b28\u91cd\u7684\u65b9\u6cd5\uff0c\u5176\u6700\u7ec8\u5f62\u5f0f\u9700\u8981\u91cd\u65b0\u5b9e\u73b0\u6574\u4e2a\u7ec8\u7aef\u4eff\u771f\u5668\u3002\n\u5916\u58f3\u53ef\u4ee5\u4f7f\u7528ECMA-48\u5149\u6807\u4f4d\u7f6e\u62a5\u544a\u529f\u80fd\uff1aprintf&#39\uff1b\\e[6n&39\uff1b]\u5728\u652f\u6301\u7684\u7ec8\u7aef\u4e0a\uff0c\u5c06\u5bfc\u81f4\u7ec8\u7aef\u6a21\u62df\u8868\u5355^[[y\uff1bxr]\u4e0a\u7684\u7528\u6237\u8f93\u5165\uff0c\u5176\u4e2dy\u548cx\u662f\u884c\u548c\u5217\u3002\u7136\u540e\uff0c\u5916\u58f3\u53ef\u4ee5\u8bfb\u53d6\u5b83\u6765\u786e\u5b9a\u5149\u6807\u7684\u4f4d\u7f6e\u3002\u8fd9\u4e9b\u7c7b\u578b\u7684\u5f80\u8fd4\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5982\u6b64\u7b80\u5355\u7684\u529f\u80fd\uff0c\u5b9e\u73b0\u8d77\u6765\u6709\u4e9b\u7f13\u6162\u548c\u70e6\u4eba\u3002\n\u76f8\u53cd\uff0cZsh\u548cFish\u6709\u4e00\u79cd\u7b80\u5355\u5f97\u591a\u3001\u806a\u660e\u5f97\u591a\u7684\u65b9\u6cd5\u6765\u505a\u8fd9\u4ef6\u4e8b\uff1a\n\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u63d0\u793a\u4e4b\u524d\u6253\u5370\u4e00\u4e2a\u56fa\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u5b83\u5728\u6240\u6709\u7ec8\u7aef\u4e0a\u90fd\u975e\u5e38\u6709\u6548\u3002\n\u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u7684\u7ec8\u7aef\u670910\u5217\u5bbd\uff0c3\u884c\u9ad8\uff0c\u4e00\u4e2a\u89c4\u8303\u7684\u7a0b\u5e8f\u521a\u521a\u7f16\u5199\u4e86\u4e00\u4e2a\u5e26\u6709\u5c3e\u968f\u6362\u884c\u7b26\u7684\u77ed\u5b57\u7b26\u4e32\uff1a\n\u5149\u6807(\u7531|\u8868\u793a)\u4f4d\u4e8e\u8be5\u884c\u7684\u5f00\u5934\u3002\u8fd9\u662f\u5728\u6b65\u9aa41\u548c2\u4e2d\u5c06\u53d1\u751f\u7684\u60c5\u51b5\uff1a\n\u6b64\u65f6\u5c06\u663e\u793a\u6307\u793a\u7b26\uff0c\u7531\u4e8e\u6211\u4eec\u6b63\u597d\u5199\u5165\u4e86$Column\u5b57\u7b26\uff0c\u56e0\u6b64\u5149\u6807\u4f4d\u4e8e\u6700\u540e\u4e00\u5217\u4e4b\u540e\u3002\u6b65\u9aa43(\u56de\u8f66\u7b26)\u73b0\u5728\u5c06\u5176\u79fb\u56de\u8d77\u70b9\uff1a\n\u6700\u7ec8\u7ed3\u679c\u4e0e\u6211\u4eec\u7b80\u5355\u5730\u5199\u51fa\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u63d0\u793a\u7b26\u5b8c\u5168\u76f8\u540c\u3002\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5f53\u7a0b\u5e8f\u6ca1\u6709\u8f93\u51fa\u7ec8\u6b62\u6362\u884c\u7b26\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a\n\u5c06\u663e\u793a\u6307\u793a\u7b26\uff0c\u4f46\u8fd9\u4e00\u6b21\u6b65\u9aa42\u4e2d\u7684\u7a7a\u683c\u4f1a\u5bfc\u81f4\u8be5\u884c\u4e00\u76f4\u6362\u884c\u5230\u4e0b\u4e00\u884c\uff1a\n\u63d0\u793a\u73b0\u5728\u663e\u793a\u5728\u8be5\u884c\u4e0a\uff0c\u56e0\u6b64\u4e0d\u4f1a\u8986\u76d6\u6307\u793a\u5668\uff1a\n\u73b0\u5728\u4f60\u5c31\u77e5\u9053\u4e86\u3002\u4e00\u4e2a\u770b\u4f3c\u7b80\u5355\u7684\u95ee\u9898\u88ab\u8bc1\u660e\u6bd4\u9884\u671f\u7684\u8981\u96be\uff0c\u4f46\u5de7\u5999\u5730\u4f7f\u7528\u6362\u884c\u4f7f\u5b83\u518d\u6b21\u53d8\u5f97\u5bb9\u6613\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u79d8\u8bc0\uff0c\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u5728Bash\u4e2d\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff1a\n\u867d\u7136\u5f88\u6709\u7528\u5e76\u4e14\u7ecf\u5e38\u88ab\u8bf7\u6c42\uff0c\u4f46\u662f\u6ca1\u6709\u53ef\u9760\u7684\u65b9\u6cd5\u6765\u83b7\u53d6\u5148\u524d\u6267\u884c\u7684\u547d\u4ee4\u7684\u8f93\u51fa\u3002\n\u622a\u53d6\u7ec8\u7aef\u7684\u5c4f\u5e55\u622a\u56fe/\u8f6c\u50a8\u4ee4\u4eba\u60ca\u8bb6\u5730\u68d8\u624b\uff0c\u800c\u4e14\u5b83\u53ea\u5728\u7279\u5b9a\u7684\u7ec8\u7aef\u4e0a\u5de5\u4f5c\u3002\n\u80cc\u666f\u8fdb\u7a0b\u8f93\u51fa\u88c5\u9970\u6027\u5730\u7834\u574f\u524d\u666f\u8fdb\u7a0b\u7684\u73b0\u8c61\u662f\u4f17\u6240\u5468\u77e5\u7684\uff0c\u4f46\u662f\u6ca1\u6709\u89e3\u51b3\u65b9\u6848", "note_en": "tl;dr: We look at how Zsh and Fish is able to indicate a missing terminating linefeed in program output when the Unix programming model precludes examining the output itself.\n Most shells, including bash, ksh, dash, and ash, will show a prompt wherever the previous command left the cursor when it exited.\n The fact that the prompt (almost) always shows up on the familiar left-most column of the next line is because Unix programs universally cooperate to park the cursor there when they exit.\n This is done by always making sure to output a terminating linefeed  \\n (aka newline):\n vidar@vidarholen-vm2 ~ $ whoamividarvidar@vidarholen-vm2 ~ $ whoami | hexdump -c0000000 v i d a r \\n\n If a program fails to follow this convention, the prompt will end up in the wrong place:\n  However, I recently noticed that  zsh and  fish will instead show a character indicating a missing linefeed, and still start the prompt where you\u2019d expect to find it:\n vidarholen-vm2% echo -n &#34;hello zsh&#34;hello zsh% vidarholen-vm2%vidar@vidarholen-vm2 ~&gt; echo -n &#34;hello fish&#34;hello fish\u23cevidar@vidarholen-vm2 ~&gt;\n If you\u2019re disappointed that  this is what there\u2019s an entire blog post about, you probably haven\u2019t tried to write a shell. This is one of those problems where the more you know, the harder it seems ( obligatory XKCD).\n If you have a trivial solution in mind, maybe along the lines of  if (!output.ends_with(&#34;\\n&#34;)) printf(&#34;%\\n&#34;);, consider the following restrictions*:\n Contrary to popular belief, the shell does  not sit between programs and the terminal. The shell has no ability to intercept or examine the terminal output of programs.\n The terminal programming model is based on teletypes (aka TTYs), electromechanical typewriters from the early 1900s. They printed letter by letter onto paper, so there is no memory or screen buffer that can be programmatically read back.\n  The shell could use pipes to intercept all output, and relay it onto the terminal. While it works in trivial cases like  whoami, some programs  check whether stdout is a terminal and change their behavior, others go over your head and talk to the TTY directly (e.g.  ssh\u2018s password prompt), and some use TTY specific  ioctls that fail if the output is not a TTY, such as querying window size or disabling local echo for password input.\n The shell can  ptrace the process to see what it writes where. This has a huge overhead and breaks  sudo,  ping, and other commands that rely on suid.\n The shell can create a pseudo-tty (pty), run commands in that, and relay information back and forth much like  ssh or  script does. This is an annoying and heavy-handed approach, which in its ultimate form would require re-implementing an entire terminal emulator.\n The shell can use ECMA-48 cursor position reporting features:  printf &#39;\\e[6n&#39; on a supported terminal will cause the terminal to simulate user input on the form  ^[[y;xR where  y and  x is the row and column. The shell could then read this to figure out where the cursor is. These kinds of round trips are feasible, but somewhat slow and annoying to implement for such a simple feature.\n Zsh and Fish instead have a much simpler and far more clever way of doing it:\n  This solution is very simple because it only requires printing a fixed string before every prompt, but it\u2019s highly effective on all terminals.\n  Let\u2019s pretend our terminal is 10 columns wide and 3 rows tall, and a canonical program just wrote a short string with a trailing linefeed:\n  The cursor, indicated by  |, is at the start of the line. This is what would happen in step 1 and 2:\n  The indicator is shown, and since we have written exactly  $COLUMN characters, the cursor is after the last column. Step 3, a carriage return, now moves it back to the start:\n    The final result is exactly the same as if we had simply written out the prompt wherever the cursor was.\n Now, let\u2019s look at what happens when a program does  not output a terminating linefeed:\n  The indicator is shown, but this time the spaces in step 2 causes the line to wrap all the way around to the next line:\n    The prompt is now shown on that line, and therefore doesn\u2019t overwrite the indicator:\n  And there you have it. A seemingly simple problem turned out harder than expected, but a clever use of line wrapping made it easy again.\n Now that we know the secret sauce, we can of course do the same thing in Bash:\n    While useful and often requested, there is no robust way to get the output of the previously executed command.\n It\u2019s surprisingly tricky to take screenshots/dumps of terminals, and it only works on specific terminals.\n The phenomenon of background process output cosmetically trashing foreground processes is well known, and yet there\u2019s no solution", "posttime": "2020-06-15 03:27:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f3a\u5c11,fish,\u7ec8\u7aef", "title": "Zsh\u548cFish\u00e2uro\u2122\u9ad8\u4eae\u663e\u793a\u7f3a\u5c11\u7684\u6362\u884c\u7b26\u7684\u7b80\u5355\u800c\u806a\u660e\u7684\u6280\u5de7", "title_en": "Zsh and Fish\u00e2\u20ac\u2122s simple but clever trick for highlighting missing linefeeds", "transed": 1, "url": "https://www.vidarholen.net/contents/blog/?p=878", "via": "", "real_tags": ["\u7f3a\u5c11", "fish", "\u7ec8\u7aef"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006559, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u57282020\u5e745\u6708\u548c6\u6708\uff0cCure53\u5b8c\u6210\u4e86\u5bf9ring\u3001webpki\u548crustls\u7684\u5ba1\u8ba1\u3002\u4ed6\u4eec\u7684\u62a5\u544a(PDF)\u5168\u9762\u63cf\u8ff0\u4e86\u5ba1\u8ba1\u60c5\u51b5\uff0c\u8bfb\u8d77\u6765\u5f88\u6709\u8da3\u3002\n\u4e0d\u8fc7\uff0c\u9996\u5148\uff0c(\u594e\u6069\u9879\u76ee\u7684)Dirkjan Ochtman\u6700\u7ec8\u5b9e\u73b0\u4e86\u8fd9\u4e00\u76ee\u6807\uff0c\u503c\u5f97\u975e\u5e38\u611f\u8c22\u3002\u6211\u4eec\u57282018\u5e74\u5df4\u9eceRustFest\u4e0a\u9996\u6b21\u8ba8\u8bba\u4e86\u8fdb\u884c\u8fd9\u6837\u7684\u5ba1\u8ba1\u7684\u53ef\u80fd\u6027\u3002\u4e3a\u4e86\u83b7\u5f97\u8d5e\u52a9\u5546\uff0c\u4ed6\u82b1\u4e86\u5c06\u8fd1\u4e24\u5e74\u7684\u65f6\u95f4\u575a\u5b9a\u4e0d\u79fb\u5730\u5de5\u4f5c\u3002\u8c22\u8c22\u5fb7\u5c14\u574e\uff01\n\u4e91\u672c\u5730\u8ba1\u7b97\u57fa\u91d1\u4f1a(Linux\u57fa\u91d1\u4f1a\u7684\u4e00\u90e8\u5206)\u5e94\u5728\u94fe\u63a5\u5668\u6570\u636e\u5e73\u9762\u4e2d\u4f7f\u7528\u6c99\u6c99\u7684\u6d6e\u6807\u516c\u53f8\u7684\u8981\u6c42\u8d44\u52a9\u4e86\u8fd9\u6b21\u5ba1\u8ba1\u3002\u56e0\u6b64\uff0c\u8fdb\u4e00\u6b65\u611f\u8c22Linux\u57fa\u91d1\u4f1a\u7684Chris Aniszczyk\u548c\u6d6e\u6807\u516c\u53f8\u7684Oliver Gould\u5bf9\u8fd9\u4e9b\u9879\u76ee\u7684\u652f\u6301\u3002(\u6ce8\uff1a\u539f\u751f\u4e91\u8ba1\u7b97\u57fa\u91d1\u4f1a\u662fLinux\u57fa\u91d1\u4f1a\u7684\u4e00\u90e8\u5206)\u5e94\u6d6e\u6807\u57fa\u91d1\u4f1a\u7684\u8981\u6c42\u8d44\u52a9\u8fd9\u6b21\u5ba1\u8ba1\uff0c\u6d6e\u6807\u57fa\u91d1\u4f1a\u7684Chris Aniszczyk\u548c\u6d6e\u6807\u57fa\u91d1\u4f1a\u7684\u5965\u5229\u5f17\u00b7\u53e4\u5c14\u5fb7\u5bf9\u8fd9\u4e9b\u9879\u76ee\u7ed9\u4e88\u4e86\u652f\u6301\u3002\n\u201c[..]\u3002\u5ba1\u8ba1\u56e2\u961f\u8ba4\u4e3a\u603b\u4f53\u4ee3\u7801\u8d28\u91cf\u975e\u5e38\u597d\uff0c\u53ef\u4ee5\u8bc1\u660e\u6240\u6709\u8303\u56f4\u7684\u9879\u76ee\u90fd\u4e00\u81f4\u5730\u7559\u4e0b\u4e86\u575a\u5b9e\u7684\u5370\u8c61\u3002\u201c\u3002\n\u201c\u65e0\u8bba\u662f\u4ece\u8bbe\u8ba1\u7684\u89d2\u5ea6\u8fd8\u662f\u4ece\u5b9e\u73b0\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6574\u4e2a\u8303\u56f4\u90fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5f02\u5e38\u9ad8\u6807\u51c6\u7684\u3002\u201d\n\u5f00\u53d1\u5546\u63d0\u4f9b\u9ad8\u8d28\u91cfTLS\u5b9e\u65bd\u7684\u610f\u56fe\u975e\u5e38\u660e\u786e\uff0c\u8fd9\u4e00\u76ee\u6807\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u5b9e\u73b0\u7684\u3002\u201c\u3002\n\u201c\u8fd9\u91cc\u548c\u90a3\u91cc\u7684\u5c0f\u5efa\u8bae\u5bf9\u4efb\u4f55\u9879\u76ee\u6765\u8bf4\u90fd\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u8fd9\u5e76\u4e0d\u80fd\u6539\u53d8\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5728\u6c99\u6c99\u4e2d\u771f\u7684\u6ca1\u6709\u592a\u591a\u9700\u8981\u6539\u8fdb\u7684\u5730\u65b9\u3002Cure53\u975e\u5e38\u9ad8\u5174\u80fd\u5bf9\u5c55\u793a\u7684\u8f6f\u4ef6\u7559\u4e0b\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5370\u8c61\u3002\n\u6709\u4e24\u4e2a\u4fe1\u606f\u6027\u7684\u53d1\u73b0\u548c\u4e24\u4e2a\u8f7b\u5fae\u7684\u4e25\u91cd\u7a0b\u5ea6\u7684\u53d1\u73b0\u3002\u8be6\u7ec6\u5185\u5bb9\u89c1\u62a5\u544a\uff0c\u4e0b\u9762\u7684\u8ba8\u8bba\u53cd\u6620\u4e86\u6211\u5bf9\u8fd9\u4e9b\u95ee\u9898\u7684\u770b\u6cd5\u3002\n\u8fd9\u4e00\u53d1\u73b0\u8868\u660eRING\u4f7f\u7528\u6765\u81eaEverCrypt\u9879\u76ee\u7684\u6b63\u5f0f\u9a8c\u8bc1\u7684\u5bc6\u7801\u5b66\u5b9e\u73b0\uff0c\u5f88\u96be\u53cd\u5bf9\u57fa\u7840\u5bc6\u7801\u5b66\u4ee3\u7801\u7684\u5f62\u5f0f\u9a8c\u8bc1\u3002\u8fd9\u91cc\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cRING\u786e\u5b9e\u5df2\u7ecf\u4f7f\u7528\u4e86\u6b63\u5f0f\u9a8c\u8bc1\u7684curve25519\u5b9e\u73b0(\u6765\u81eaFiat-Crypto\u9879\u76ee)\u3002\n\u8fd9\u4e00\u53d1\u73b0\u4e0eunwork()\u7684\u5b9e\u4f8b\u76f8\u5173\uff0c\u8fd9\u4e9b\u5b9e\u4f8b\u6ca1\u6709\u51fa\u73b0\u6050\u614c\uff0c\u4f46\u662f\u5f88\u96be\u63a8\u65ad\u662f\u8fd9\u6837\u7684\u60c5\u51b5\u3002\u63a8\u7406\u8de8\u8d8a\u4e86\u51e0\u4e2a\u4e0d\u540c\u7684\u6a21\u5757\uff0c\u8fd9\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u53ef\u8bfb\u6027\u548c\u7ef4\u62a4\u98ce\u9669\u3002\u56e0\u6b64\uff0c\u6b63\u5728\u8ba8\u8bba\u7684\u4ee3\u7801\u5df2\u7ecf\u5f97\u5230\u4e86\u6539\u8fdb\u3002\n\u6b64\u53d1\u73b0\u6d89\u53ca\u8868\u793a\u4e3aRFC5280\u4e2d\u6307\u5b9a\u7684IP\u5730\u5740\u7a7a\u95f4\u7684\u8bc1\u4e66\u540d\u79f0\u7ea6\u675f\u3002RFC\u6ca1\u6709\u6307\u5b9a\u5bf9\u7f51\u7edc\u63a9\u7801\u7684\u4efb\u4f55\u9650\u5236\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u7a00\u758f\u63a9\u7801\u4f3c\u4e4e\u662f\u660e\u667a\u7684\u3002\n\u8fd9\u4e00\u53d1\u73b0\u6b63\u786e\u5730\u6307\u51fa\u4e86Rustls\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5728\u5e94\u7528\u4e8e\u5927\u4e8e64KB\u7684X.501\u540d\u79f0\u65f6\u4ea7\u751f\u4e0d\u6b63\u786e\u7684\u8f93\u51fa\u3002\u867d\u7136\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u9519\u8bef\u4e0d\u4f1a\u5bfc\u81f4\u4e0d\u5b89\u5168\u7684\u64cd\u4f5c(\u4f46\u53ef\u80fd\u662f\u8fde\u63a5\u6545\u969c)\uff0c\u4f46\u8be5\u51fd\u6570\u5df2\u7ecf\u66f4\u6b63\uff0c\u53ef\u4ee5\u4e3a\u6240\u6709\u8f93\u5165\u751f\u6210\u6709\u6548\u7684\u8f93\u51fa\u3002\n\u4e0e\u5176\u4ed6\u5f62\u5f0f\u7684\u8f6f\u4ef6\u6d4b\u8bd5\u4e00\u6837\uff0c\u5f52\u6839\u7ed3\u5e95\uff0c\u7b2c\u4e09\u65b9\u5ba1\u6838\u53ea\u80fd\u663e\u793a\u7f3a\u9677\u7684\u5b58\u5728\uff0c\u800c\u4e0d\u80fd\u663e\u793a\u7f3a\u9677\u7684\u7f3a\u5931\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u62a5\u544a\u4e2d\u7684\u79ef\u6781\u53cd\u9988\u548c\u8fd9\u4e9b\u53d1\u73b0\u7684\u4f4e\u4e25\u91cd\u6027\u80af\u5b9a\u662f\u4ee4\u4eba\u9f13\u821e\u7684\u3002", "note_en": "In May and June 2020, Cure53 completed an audit of   ring,  webpki, and  rustls. Their report ( PDF) fully describes the audit, and makes for interesting reading.\n First off, though, Dirkjan Ochtman (of the  Quinn project) deserves a great deal of thanksfor ultimately making this happen. We first discussed the possibility of an audit like this atRustFest Paris 2018. He worked with great determination for almost two years to secure a sponsor.Thanks Dirkjan!\n The  Cloud Native Computing Foundation (a part of the Linux Foundation) fundedthis audit, at the request of  Buoyant who use rustls in the data plane of  linkerd.So further thanks are due to Chris Aniszczyk of the Linux Foundation, and Oliver Gould of Buoyantfor their support of these projects.\n    \u201c[..] the team of auditors considered the  general code quality really good and can attestto a solid impression left consistently by all scope items\u201d\n \u201cBoth from a design point of view as from an implementationperspective the entire scope can be  considered of exceptionally high standard.\u201d\n \u201cThe developer\u2019s intent to provide a high-quality TLS implementation isvery clear and  this goal can be considered as achieved successfully.\u201d\n \u201cMinor recommendations here and there are always possible for any project, but this doesnot change the fact that there is really not much to improve at rustls. Cure53 had therare pleasure of being  incredibly impressed with the presented software.\u201d\n  There were two informational and two minor-severity findings. See  the report for the full details.The discussion below reflects my opinion on these issues.\n  This finding suggests  ring uses formally verified cryptography implementations from the EverCrypt project.It\u2019s hard to argue against formal verification of foundational cryptography code.It\u2019s worth noting here that  ring does already use a formally verified curve25519 implementation(from the  fiat-crypto project).\n  This finding relates to instances of  unwrap() that were free of panics, but where it was too hardto reason that this was the case. The reasoning spanned several different modules, which itself isa readability and maintenance hazard. The code in question has been improved as a result.\n  This finding relates to certificate name constraints expressed as a space of IP addresses asspecified in  RFC5280. The RFC doesn\u2019t specify any constraints on network masks, but itdoes seem sensible to disallow sparse masks.\n  This finding rightly points out a function in rustls that produces incorrect output when appliedto an X.501 Name that is larger than 64KB. While that\u2019s an exceedingly unlikely case, and thebug does not cause unsafe operation (but perhaps connection failure), the function has beencorrected to produce valid output for all inputs.\n  As with other forms of software testing, ultimately a third-party audit can only show thepresence of defects but not their absence. With that said, the positive feedback in thereport and the low severity of these findings are certainly encouraging.", "posttime": "2020-06-15 03:10:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,rustls,audit,\u9879\u76ee", "title": "Rustls\u7684\u7b2c\u4e09\u65b9\u5ba1\u8ba1", "title_en": "Third-Party Audit of Rustls", "transed": 1, "url": "http://jbp.io/2020/06/14/rustls-audit.html", "via": "", "real_tags": ["rust", "rustls", "audit", "\u9879\u76ee"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006558, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5e2e\u52a9\u652f\u6301\u6211\u4eec\u7684\u793e\u533a\u5728\u65b0\u51a0\u80ba\u708e\u671f\u95f4\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u6211\u4eec\u5c06\u57282020\u5e746\u670830\u65e5\u4e4b\u524d\u514d\u8d39\u63d0\u4f9bACM\u5728\u6211\u4eec\u6570\u5b57\u56fe\u4e66\u9986\u4e2d\u53d1\u5e03\u7684\u6240\u6709\u4f5c\u54c1\u3002\u4e86\u89e3\u66f4\u591a\u3002\n\u6211\u4eec\u4f7f\u7528\u997c\u5e72\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u7ed9\u4f60\u6700\u597d\u7684\u7ecf\u9a8c\uff0c\u5728\u6211\u4eec\u7684\u7f51\u7ad9\u3002\n\u60a8\u7684\u6d4f\u89c8\u5668\u4f3c\u4e4e\u4e0d\u652f\u6301\u5b83\u4eec\uff0c\u8fd9\u4f1a\u5f71\u54cd\u7f51\u7ad9\u529f\u80fd\u3002", "note_en": "To help support our community working remotely during COVID-19, we are making all work published by ACM in our Digital Library freely accessible through June 30, 2020.  Learn more\n   We use cookies to ensure that we give you the best experience on our website.\n  It seems your browser doesn&#39;t support them and this affects the site functionality.", "posttime": "2020-06-15 03:10:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "apl,\u7f51\u7ad9", "title": "APL\u81ea1978\u5e74\u4ee5\u6765[pdf]", "title_en": "APL Since 1978 [pdf]", "transed": 1, "url": "https://dl.acm.org/doi/pdf/10.1145/3386319", "via": "", "real_tags": ["apl", "\u7f51\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006557, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bf7\u6c42\u592a\u591a", "note_en": "Too Many Requests", "posttime": "2020-06-15 02:54:11", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4ea4\u4ed8,deliveries,\u8bf7\u6c42", "title": "\u66f4\u591a\u65e0\u4eba\u673a\u4ea4\u4ed8\u5728\u7f8e\u56fd\u8fdb\u884c\u6d4b\u8bd5", "title_en": "More Drone Deliveries Being Tested in America", "transed": 1, "url": "https://www.roanoke.com/news/education/google-backed-drones-will-drop-library-books-so-kids-in-christiansburg-can-do-their-summer/article_d39a226c-edc1-5cd2-9af3-868ea26f5432.html", "via": "", "real_tags": ["\u4ea4\u4ed8", "\u8bf7\u6c42"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006556, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u65ad\u65ad\u7eed\u7eed\u5730\u7814\u7a76\u4e00\u79cd\u65b9\u6cd5\uff0c\u5e2e\u52a9\u4eba\u4eec\u8bc4\u4f30\u81ea\u5df1\u7684\u5b66\u4e60\u60c5\u51b5\uff0c\u5e76\u627e\u51fa\u4e0b\u4e00\u6b65\u8981\u5b66\u4e60\u4ec0\u4e48\u3002\n\u5728\u8fc7\u53bb\u7684\u4e00\u5468\u91cc\uff0c\u6211\u6784\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff1ahttps://questions.wizardzines.com\uff0c\uff0c\u5b83\u73b0\u5728\u6709\u4e24\u7ec4\u95ee\u9898\uff1a\n\u8fd9\u4ecd\u7136\u662f\u4e00\u9879\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\uff0c\u4f46\u6211\u5df2\u7ecf\u4e3a\u6b64\u5de5\u4f5c\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u60f3\u5199\u4e0b\u6211\u662f\u5982\u4f55\u6765\u5230\u8fd9\u91cc\u7684\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u8c08\u8c08\u6211\u7684\u76ee\u6807\u3002\u6211\u5bf9\u5e2e\u52a9\u90a3\u4e9b\u8bd5\u56fe\u81ea\u5b66\u7684\u4eba\u5f88\u611f\u5174\u8da3\u3002\u6211\u6ca1\u6709\u4efb\u4f55\u5177\u4f53\u7684\u6750\u6599\u8981\u6559--\u6211\u60f3\u5e2e\u52a9\u4eba\u4eec\u5b66\u4e60\u4ed6\u4eec\u60f3\u5b66\u7684\u4e1c\u897f\u3002\n\u6211\u901a\u8fc7\u5199\u535a\u5ba2\u5e16\u5b50\u548c\u6742\u5fd7\u505a\u4e86\u5f88\u591a\u8fd9\u4ef6\u4e8b\uff0c\u4f46\u6211\u89c9\u5f97\u6211\u9519\u8fc7\u4e86\u4e00\u4e9b\u4e1c\u897f--\u4eba\u4eec\u771f\u7684\u5b66\u5230\u4e86\u4ed6\u4eec\u60f3\u5b66\u7684\u4e1c\u897f\u5417\uff1f\u4ed6\u4eec\u600e\u4e48\u77e5\u9053\u4ed6\u4eec\u662f\u5426\u5b66\u4f1a\u4e86\u5462\uff1f\n\u6211\u89c9\u5f97\u6211\u60f3\u8981\u67d0\u79cd\u201c\u6d4b\u9a8c\u201d\u6216\u201c\u6d4b\u8bd5\u201d\uff0c\u4f46\u6211\u4e0d\u786e\u5b9a\u5b83\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u3002\n\u8ba9\u6211\u4eec\u975e\u5e38\u5feb\u901f\u5730\u7ed5\u9053\u8fdb\u5165\u672f\u8bed\u3002\u6559\u5e08\u5728\u5b66\u6821\u4e2d\u4f7f\u7528\u7684\u8bc4\u4f30\u65b9\u5f0f\u6709\u4e24\u79cd\u3002\n\u5f62\u6210\u6027\u8bc4\u4ef7\uff1a\u201c\u7528\u4e8e\u8c03\u6574\u6559\u4e0e\u5b66\u6d3b\u52a8\u4ee5\u63d0\u9ad8\u5b66\u751f\u6210\u5c31\u7684\u8bc4\u4ef7\u3002\u201d\n\u5982\u679c\u4f60\u662f\u5728\u81ea\u5b66\uff0c\u90a3\u4e48\u5206\u6570\u662f\u6ca1\u6709\u610f\u4e49\u7684(\u8c01\u4f1a\u5728\u4e4e\u4f60\u662f\u5426\u5728\u63d2\u5ea7\u8003\u8bd5\u4e2d\u5f97A\u5462\uff1f)\u3002\u4f46\u662f\u5f62\u6210\u6027\u8bc4\u4f30\uff01\u5982\u679c\u4f60\u80fd\u505a\u4e00\u4e9b\u8bc4\u4f30\u6765\u5e2e\u52a9\u4f60\u51b3\u5b9a\u4e0b\u4e00\u6b65\u4f60\u5230\u5e95\u5e94\u8be5\u81ea\u5b66\u4ec0\u4e48\uff01\u8fd9\u770b\u8d77\u6765\u66f4\u6709\u7528\u3002\u6240\u4ee5\u6211\u5f00\u59cb\u5bf9\u6784\u5efa\u67d0\u79cd\u201c\u5f62\u6210\u6027\u8bc4\u4f30\u201d\u5de5\u5177\u611f\u5174\u8da3\u3002\n\u60a8\u662f\u5426\u53c2\u52a0\u8fc7\u8bfe\u7a0b(\u5728\u7ebf\u6216\u79bb\u7ebf\uff01)\u3002\u9996\u5148\u7ed9\u4f60\u4e00\u4e2a\u6d4b\u9a8c\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u68c0\u67e5\u4f60\u5728\u4e00\u5f00\u59cb\u5bf9\u8fd9\u4e2a\u4e3b\u9898\u7684\u7406\u89e3\u60c5\u51b5\uff1f\u5b83\u5bf9\u4f60\u6709\u5e2e\u52a9\u5417\uff1f\n\u6211\u6536\u5230\u4e86\u5927\u7ea690\u4e2a\u56de\u590d\u3002\u4ee5\u4e0b\u662f\u6211\u4ece\u56de\u590d\u4e2d\u62ff\u8d70\u7684\u4e00\u4e9b\u4e3b\u9898\uff1a\n\u4eba\u4eec\u559c\u6b22\u4f7f\u7528\u6d4b\u9a8c\uff0c\u5982\u679c\u4ed6\u4eec\u53ef\u4ee5\u6307\u5bfc\u81ea\u5df1\u7684\u5b66\u4e60(\u201c\u5982\u679c\u6211\u5df2\u7ecf\u77e5\u9053\u4e86\u5c31\u8df3\u8fc7X\u90e8\u5206\u201d)\u3002\n\u4e00\u4e2a\u4eba\u8bf4\uff0c\u4ed6\u4eec\u53c2\u52a0\u4e86\u4e00\u6b21\u6d4b\u9a8c\uff0c\u4e00\u5f00\u59cb\u5f97\u5206\u5f88\u4f4e\uff0c\u8fd9\u5e2e\u52a9\u4ed6\u4eec\u610f\u8bc6\u5230\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u5e76\u4e0d\u50cf\u4ed6\u4eec\u60f3\u8c61\u7684\u90a3\u6837\u4e86\u89e3\u8bfe\u7a0b\u5185\u5bb9\u3002\n\u6211\u4ece\u4e2d\u5b66\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u5bf9\u5f88\u591a\u4eba\u6765\u8bf4\uff0c\u88ab\u544a\u77e5\u4e0d\u77e5\u9053\u67d0\u4ef6\u4e8b\u662f\u4e00\u79cd\u7cdf\u7cd5\u7684\u7ecf\u5386\u3002\n\u6211\u7684\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\u91cd\u65b0\u8bbe\u8ba1\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u628a\u5b83\u4f5c\u4e3a\u4e00\u79cd\u5b66\u4e60\u65b9\u5f0f\u3002\u6240\u4ee5\uff0c\u5b83\u4e0d\u662f\u544a\u8bc9\u4f60\u4f60\u4e0d\u77e5\u9053\u7684\u4e1c\u897f(\u54ea\u79cd\uff0c\u90a3\u53c8\u600e\u4e48\u6837\uff1f)\uff0c\u800c\u662f\u5e2e\u52a9\u4f60\u5b66\u5230\u4e00\u4e9b\u65b0\u7684\u4e1c\u897f\uff01\n\u6240\u4ee5\u6211\u9488\u5bf9\u4e0d\u540c\u7684\u4e3b\u9898\u5236\u4f5c\u4e86\u51e0\u5957\u62bd\u8ba4\u5361\u3002\u8fd9\u662f\u6211\u5236\u4f5c\u7684\u7b2c\u4e00\u5957\u62bd\u8ba4\u5361\uff0c\u5982\u679c\u4f60\u60f3\u8bd5\u4e00\u8bd5\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u5bb9\u5668\u4e0a\u7684\u62bd\u8ba4\u5361\u3002\n\u57fa\u672c\u4e0a-\u67091400\u4e2a\u95ee\u9898\uff0c\u4f60\u70b9\u51fb\u5361\u7247\u5c31\u80fd\u770b\u5230\u7b54\u6848\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5f20\u5361\u7247\uff0c\u4f60\u90fd\u5c06\u5176\u5f52\u7c7b\u4e3a\u201c\u6211\u77e5\u9053\u201d\u3001\u201c\u6211\u5b66\u5230\u4e86\u4e00\u4e9b\u4e1c\u897f\u201d\u6216\u201c\u90a3\u4ee4\u4eba\u56f0\u60d1\u201d(\u8fd9\u610f\u5473\u7740\u662f\u4e00\u79cd\u201c\u5176\u4ed6\u201d\u7c7b\u522b\uff0c\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e9b\uff0c\u4f60\u4ec0\u4e48\u4e5f\u6ca1\u5b66\u5230)\u3002\n\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u7b54\u6848\u5305\u542b\u4e86\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4ece\u4ed6\u4eec\u90a3\u91cc\u5b66\u5230\u4e00\u4e9b\u4e1c\u897f\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u5e0c\u671b\u80fd\u53d7\u5230\u542f\u53d1\uff0c\u53bb\u81ea\u5df1\u5b66\u66f4\u591a\u7684\u4e1c\u897f\u3002\n\u201c\u62bd\u8ba4\u5361\u201d\u8fd9\u4e2a\u8bcd\u6709\u5f88\u591a\u6211\u4e0d\u60f3\u8981\u7684\u5305\u88b1--\u5b83\u4e0e\u8bed\u8a00\u5b66\u4e60/\u8bb0\u5fc6\u7d27\u5bc6\u76f8\u5173\u3002\u6211\u81ea\u5df1\u6839\u672c\u4e0d\u7528\u95ea\u5b58\u5361\uff0c\u6240\u4ee5\u6ca1\u6709\u5f15\u8d77\u6211\u7684\u5171\u9e23\u3002\n\u683c\u5f0f\u662f\u6709\u9650\u5236\u7684\uff0c\u6709\u65f6\u6211\u60f3\u5728\u7b54\u6848\u4e2d\u5305\u542b\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u7a7a\u95f4\u6240\u80fd\u5bb9\u7eb3\u7684\u4fe1\u606f\u3002\n\u7528\u6237\u754c\u9762\u6709\u70b9\u6df7\u4e71\uff0c\u6709\u4e9b\u4eba\u60f3\u4e0d\u51fa\u4f60\u5e94\u8be5\u70b9\u51fb\u5361\u7247\u6765\u7ffb\u8f6c\u5b83\u3002\n\u4e5f\u8bb8\u6211\u4ece\u5236\u4f5c\u8fd9\u4e9b\u62bd\u8ba4\u5361\u4e2d\u5b66\u5230\u7684\u6700\u91cd\u8981\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u95ee\u9898\u4e0e\u8bfb\u8005\u7684\u5fc3\u7406\u6a21\u578b\u662f\u5426\u5339\u914d\u771f\u7684\u5f88\u91cd\u8981\u3002\n\u6211\u4ece\u5199\u95ee\u9898\u5f00\u59cb\uff0c\u8bb0\u4e0b\u6211\u901a\u5e38\u5bf9\u7279\u5e94\u6027\u75be\u75c5\u6240\u505a\u7684\u9648\u8ff0\uff0c\u7136\u540e\u628a\u5b83\u4eec\u53d8\u6210\u95ee\u9898\u3002\u6709\u65f6\u5019\u8fd9\u771f\u7684\u4e0d\u7ba1\u7528\u3002\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u4e0d\u8d77\u4f5c\u7528\u7684\u4f8b\u5b50\uff1a\u6211\u8ba4\u4e3a\u201cHTTP\u8bf7\u6c42\u67094\u4e2a\u90e8\u5206\uff1a\u4e3b\u4f53\u3001\u5934\u3001\u8bf7\u6c42\u65b9\u6cd5\u548c\u88ab\u8bf7\u6c42\u7684\u8def\u5f84\u201d\u8fd9\u53e5\u8bdd\u76f8\u5bf9\u6765\u8bf4\u5e76\u4e0d\u4ee4\u4eba\u53cd\u611f\u3002\u8fd9\u5c31\u662f\u6211\u5bf9\u4ec0\u4e48\u662fHTTP\u8bf7\u6c42\u7684\u770b\u6cd5\u3002\n\u4f46\u662f\u5982\u679c\u6211\u95ee\u60a8\u201cHTTP\u8bf7\u6c42\u76844\u4e2a\u90e8\u5206\u662f\u4ec0\u4e48\uff1f\u201d\u7b54\u6848\u662f\u201c\u4e3b\u4f53\u3001\u6807\u5934\u3001\u8bf7\u6c42\u65b9\u6cd5\u548c\u88ab\u8bf7\u6c42\u7684URL\u201d\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u90a3\u662f\u5b8c\u5168\u4e0d\u540c\u7684\uff01\uff01\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u8ba4\u4e3aHTTP\u8bf7\u6c42\u67094\u4e2a\u90e8\u5206-\u4ed6\u4eec\u53ef\u80fd\u8ba4\u4e3a\u5b83\u67093\u4e2a\u90e8\u5206(\u7b2c\u4e00\u884c\u3001\u5934\u548c\u6b63\u6587)\u3002\u6216\u80052\u4e2a\u90e8\u5206\u548c1\u4e2a\u53ef\u9009\u90e8\u5206(\u7b2c\u4e00\u884c\u548c\u6807\u9898\uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u6b63\u6587)\u3002\u6216\u8005\u5176\u4ed6\u65b9\u5f0f\uff01\u6240\u4ee5\u88ab\u95ee\u5230\u201cHTTP\u8bf7\u6c42\u76844\u4e2a\u90e8\u5206\u662f\u4ec0\u4e48\u201d\u662f\u5f88\u5947\u602a\u7684\u3002\n\u8fd8\u6709\u5f88\u591a\u7c7b\u4f3c\u7684\u4f8b\u5b50\uff0c\u4eba\u4eec\u5bf9\u6211\u63d0\u51fa\u7684\u4e00\u4e9b\u4e0e\u4ed6\u4eec\u5bf9\u4e3b\u9898\u7684\u770b\u6cd5\u4e0d\u7b26\u7684\u95ee\u9898\u53cd\u5e94\u4e0d\u597d\u3002\u6240\u4ee5\u6211\u4e86\u89e3\u5230\uff0c\u5982\u679c\u6211\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c\u5b83\u4e0e\u8bfb\u8005\u7684\u5fc3\u7406\u6a21\u578b\u7684\u5339\u914d\u7a0b\u5ea6\u4f1a\u6bd4\u53d1\u8868\u540c\u6837\u7684\u9648\u8ff0\u65f6\u7684\u6807\u51c6\u66f4\u9ad8\uff0c\u6240\u4ee5\u6211\u4e86\u89e3\u5230\uff0c\u5982\u679c\u6211\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c\u5b83\u4f1a\u88ab\u8981\u6c42\u66f4\u9ad8\u7684\u6807\u51c6\uff0c\u56e0\u4e3a\u5b83\u4e0e\u8bfb\u8005\u7684\u5fc3\u7406\u6a21\u578b\u5339\u914d\u7684\u7a0b\u5ea6\u6bd4\u53d1\u8868\u540c\u6837\u7684\u9648\u8ff0\u65f6\u8981\u9ad8\u3002\n\u6211\u8ba4\u4e3a\u8fd9\u91cc\u7684\u4e00\u4e2a\u66f4\u597d\u7684\u95ee\u9898\u662f\u201c\u6bcf\u4e2aHttpRequest\u90fd\u6709\u5934\u5417\uff1f\u201d(\u662f\u7684\uff01HTTP/1.1RFC\u8981\u6c42\u4e3b\u673a\u62a5\u5934\u5fc5\u987b\u8bbe\u7f6e\uff01)\u3002\u4f46\u5373\u4fbf\u5982\u6b64\uff0c\u8fd9\u4e5f\u53ef\u80fd\u6709\u70b9\u68d8\u624b--\u5c3d\u7ba199.99%\u7684HTTP\u8bf7\u6c42\u90fd\u6709\u5934\uff0c\u4f46\u4e16\u754c\u4e0a\u53ef\u80fd\u81f3\u5c11\u6709\u4e00\u4e2aHTTP/1.0\u5ba2\u6237\u7aef\u5b9e\u73b0\u5728\u53d1\u9001\u8bf7\u6c42\u65f6\u6ca1\u6709\u6807\u5934\u3002\n\u5f53\u7136\uff0c\u5982\u679c\u95ee\u9898/\u7b54\u6848\u4e0e\u8bfb\u8005\u7684\u5fc3\u7406\u6a21\u578b\u4e0d\u5339\u914d\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u5fc3\u7406\u6a21\u578b\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u90a3\u4e5f\u6ca1\u5173\u7cfb\uff0c\u4f46\u5982\u679c\u4ed6\u4eec\u7684\u6a21\u578b\u662f\u6b63\u786e\u7684\uff0c\u90a3\u4e48\u6211\u8ba4\u4e3a\u5b83\u5e94\u8be5\u662f\u5339\u914d\u7684\u3002\n\u6211\u4ece\u8fd9\u4e9b\u62bd\u8ba4\u5361\u4e0a\u5b66\u5230\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u5f88\u591a\u4eba\u4e0d\u559c\u6b22\u591a\u9879\u9009\u62e9\u3002\u6211\u8fd8\u6ca1\u6709\u60f3\u592a\u591a\uff0c\u4f46\u8001\u5b9e\u8bf4\uff0c\u6211\u4e5f\u4e0d\u592a\u559c\u6b22\u591a\u9879\u9009\u62e9\u9898\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u6446\u8131\u5b83\u3002\n\u6211\u4e0d\u8bb0\u5f97\u4e3a\u4ec0\u4e48\uff0c\u4f46\u6211\u5df2\u7ecf\u8ba9\u90a3\u4e2a\u5c0f\u9634\u8c0b\u5bb6\u5728\u6211\u8111\u6d77\u91cc\u6643\u4e86\u4e00\u9635\u5b50\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u81ea\u5df1\u5e76\u6ca1\u6709\u8bfb\u8fc7\u6574\u672c\u4e66\uff0c\u4f46\u6211\u4e00\u76f4\u542c\u5230\u4eba\u4eec\u5728\u8c08\u8bba\u5b83\u3002\u8fd9\u662f\u201c\u5c0f\u9634\u8c0b\u5bb6\u201d\u7684\u7b2c\u4e00\u9875\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u542c\u8bf4\u8fc7\u7684\u8bdd\uff1a\n\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e86\u5f88\u591a\u6211\u60f3\u8981\u505a\u7684\u4e8b\u60c5--\u6709\u95ee\u9898\u4e5f\u6709\u7b54\u6848\uff0c\u4f46\u76ee\u6807\u4e0d\u662f\u8ba9\u4f60\u628a\u6240\u6709\u7684\u95ee\u9898\u90fd\u201c\u7b54\u5bf9\u201d\u3002\u76f8\u53cd\uff0c\u6211\u8ba4\u4e3a\u76ee\u6807\u662f\u8ba9\u4f60\u601d\u8003\u4f60\u662f\u5426\u77e5\u9053\u7b54\u6848\uff0c\u5e76\u8fb9\u8d70\u8fb9\u5b66\u3002\n\u6240\u4ee5\uff0c\u6211\u4fdd\u7559\u4e86\u7c7b\u4f3c\u7684\u95ee\u7b54\u683c\u5f0f\uff0c\u4f46\u6362\u6210\u4e86\u5e76\u6392\u7684\u683c\u5f0f\uff0c\u6bd4\u5982\u201c\u5c0f\u9634\u8c0b\u5bb6\u201d(The Little Schemer)\u3002\n\u4f60\u53ef\u4ee5\u540c\u65f6\u770b\u5230\u8fd9\u4e24\u4e2a\uff0c\u6240\u4ee5\u4f60\u4e0d\u4f1a\u5fd8\u8bb0\u95ee\u9898\u662f\u4ec0\u4e48\u3002\n\u7136\u540e\uff0c\u66f4\u6709\u610f\u4e49\u7684\u505a\u6cd5\u662f\u5c06\u6240\u6709\u95ee\u9898\u548c\u7b54\u6848\u90fd\u653e\u5728\u76f8\u540c\u7684\u9875\u9762\u4e0a\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8f7b\u677e\u5730\u8fd4\u56de\u67e5\u770b\u4e0a\u4e00\u4e2a\u95ee\u9898\u3002\n\u57fa\u672c\u4e0a\u6211\u559c\u6b22\u5b83\u7ed9\u8bfb\u8005\u66f4\u591a\u7684\u63a7\u5236\u6743\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5f88\u91cd\u8981\u3002\n\u6211\u8fd8\u628a\u8fd9\u4e2a\u9879\u76ee\u91cd\u547d\u540d\u4e3a\u201c\u95ee\u9898\u201d\uff0c\u56e0\u4e3a\u8fd9\u771f\u7684\u662f\u6211\u601d\u8003\u81ea\u5df1\u5b66\u4e60\u7684\u65b9\u5f0f-\u6211\u4e0d\u505a\u201c\u62bd\u8ba4\u5361\u201d\uff0c\u4f46\u6211\u786e\u5b9e\u7ecf\u5e38\u95ee\u81ea\u5df1\u5173\u4e8e\u6211\u4e0d\u7406\u89e3\u7684\u4e3b\u9898\u7684\u95ee\u9898\uff0c\u627e\u51fa\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\uff0c\u7136\u540e\u91cd\u590d\u8fd9\u4e9b\u95ee\u9898\uff0c\u76f4\u5230\u6211\u50cf\u6211\u60f3\u7684\u90a3\u6837\u7406\u89e3\u8fd9\u4e2a\u4e3b\u9898\u3002\n\u4f46\u662f\uff0c\u5f53\u4f60\u4e0d\u662f\u5f88\u591a\u7684\u65f6\u5019\uff0c\u81ea\u5df1\u60f3\u51fa\u6b63\u786e\u7684\u95ee\u9898\u662f\u5f88\u56f0\u96be\u7684\uff0c\u6240\u4ee5\u6211\u5e0c\u671b\u7ed9\u4eba\u4eec\u63d0\u4f9b\u4e00\u7cfb\u5217\u95ee\u9898(\u548c\u7b54\u6848)\u6765\u601d\u8003\uff0c\u8fd9\u5c06\u5e2e\u52a9\u4f60\u51b3\u5b9a\u4e0b\u4e00\u6b65\u60f3\u8981\u5b66\u4e60\u4ec0\u4e48\u3002\n\u5f53\u6211\u5728udp\u4e0a\u53d1\u5e03\u7b2c\u4e00\u7ec4\u95ee\u9898\u65f6\uff0c\u6211\u6ca1\u6709\u5305\u62ec\u4e00\u4e2a\u201c\u6211\u5b66\u5230\u4e86\u4e00\u4e9b\u4e1c\u897f\u201d\u7684\u6309\u94ae\uff0c\u6211\u6ce8\u610f\u5230\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5-\u5f88\u591a\u4eba\u5728\u63a8\u7279\u4e0a\u5199\u7740\u201c\u6211\u5f97\u5230\u4e868\u4e2a\u204410\u201d\uff0c\u201c\u6211\u5f97\u5230\u4e8610\u4e2a\u204410\u201d\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\n\u6211\u6709\u70b9\u62c5\u5fc3\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u6574\u4e2a\u60f3\u6cd5\u662f\u4e3a\u4e86\u5e2e\u52a9\u4eba\u4eec\u786e\u5b9a\u4ed6\u4eec\u53ef\u4ee5\u5b66\u5230\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u8bf4\u201c\u6211\u5f97\u5230\u4e868\u4e2a\u204410\u201d\u611f\u89c9\u5c31\u50cf\u662f\u4e13\u6ce8\u4e8e\u4f60\u5df2\u7ecf\u77e5\u9053\u7684\u4e1c\u897f\uff0c\u800c\u5ffd\u7565\u4e86\u6700\u91cd\u8981\u7684\u4e8b\u60c5-\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u5b66\u5230\u65b0\u4e1c\u897f\u7684\u4e24\u4e2a\u95ee\u9898\uff01\n\u6240\u4ee5\u6211\u52a0\u4e86\u4e00\u53e5\u201c\u6211\u5b66\u5230\u4e86\u4e00\u4e9b\u4e1c\u897f\uff01\u201d\u6309\u94ae\u8fd4\u56de\u5230\u6bcf\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u82b1\u8d39\u4e86\u592a\u591a\u65f6\u95f4\u6784\u5efa\u6709\u8da3\u7684SVG+CSS\u52a8\u753b\uff0c\u5f53\u60a8\u6309\u4e0b\u6309\u94ae\u65f6\u64ad\u653e\u8be5\u52a8\u753b\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u4f3c\u4e4e\u8d77\u5230\u4e86\u4f5c\u7528-\u6211\u770b\u5230\u66f4\u591a\u7684\u4eba\u8bc4\u8bba\u201c\u6211\u5b66\u5230\u4e86\u4e00\u4e9b\u4e1c\u897f\u201d\uff0c\u800c\u66f4\u5c11\u7684\u4eba\u8bc4\u8bba\u201c\u6211\u5f97\u5230\u4e869\u4e2a\u204410\u201d\u3002\n\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u5efa\u9020\u7b80\u5355\u7684\u5c0f\u4e1c\u897f\u9700\u8981\u6bd4\u6211\u9884\u671f\u7684\u66f4\u591a\u7684\u65f6\u95f4\uff01\u201c\u4e00\u4e9b\u95ee\u9898\u548c\u7b54\u6848\u201d\u7684\u6982\u5ff5\u770b\u8d77\u6765\u771f\u7684\u5f88\u7b80\u5355\uff0c\u4f46\u6211\u5df2\u7ecf\u901a\u8fc7\u6784\u5efa\u8fd9\u4e2a\u683c\u5f0f\u5b66\u5230\u4e86\u5f88\u591a\uff0c\u6211\u60f3\u6211\u5bf9\u8fd9\u79cd\u683c\u5f0f\u8fd8\u6709\u5f88\u591a\u9700\u8981\u5b66\u4e60\u7684\u5730\u65b9\u3002\n\u4f46\u6211\u5f88\u9ad8\u5174\u80fd\u5b66\u5230\u66f4\u591a\uff0c\u6211\u5f88\u60f3\u77e5\u9053\u4f60\u7684\u60f3\u6cd5\u3002\u5982\u679c\u4f60\u60f3\u8bd5\u8bd5\uff0c\u8fd9\u91cc\u53c8\u6765\u4e86\uff1ahttps://questions.wizardzines.com.", "note_en": "For the last few months, I\u2019ve been working on and off on a way to help peopleevaluate their own learning &amp; figure out what to learn next.\n This past week I built a new iteration of this:  https://questions.wizardzines.com, which today has 2sets of questions:\n  It\u2019s still a work in progress, but I\u2019ve been working on this for quite a whileso I wanted to write down how I got here.\n  First, let\u2019s talk about my goal. I\u2019m interested in helping people who aretrying to learn on their own. I don\u2019t have any specific materials I\u2019m trying toteach \u2013 I want to help people learn what  they want to learn.\n I\u2019ve done a lot of this by writing blog posts &amp; zines, but I felt like I was missing something \u2013were people really learning what they wanted to learn? How could they tell ifthey\u2019d learned it?\n I felt like I wanted some kind of \u201cquiz\u201d or \u201ctest\u201d, but I wasn\u2019t sure what itshould look like.\n  Let\u2019s take a very quick detour into terminology. There are two kinds ofassessment teachers use in school.\n formative assessment: \u201cevaluations used to modify teaching and learning activities to improve student attainment.\u201d\n  Grades are pretty pointless if you\u2019re teaching yourself (who cares if you gotan A in sockets?). But formative assessments! If you could take some kind ofevaluation to help you decide what exactly you should teach yourself next! Thatseems more useful. So I got interested in building some kind of \u201cformativeassessment\u201d tool.\n    have you ever taken a class (online or offline!) where you were given a quizfirst that you could use to check your understanding of the topic at the start?did it help you?\n I got about 90 replies. Here are some themes I took away from the replies:\n people like using quizzes if they can direct their own learning (\u201cskip Xsection if I already know the thing\u201d)\n one person said they took a quiz where they got a low score at the beginningand it helped them realize that they didn\u2019t actually know the course contentas well as they thought\n One thing I learned from this is that being told you  don\u2019t know something isa bad experience for a lot of people.\n  My first idea was to reframe a test as a way to  learn. So instead of itbeing something that tells you what you  don\u2019t know (which, so what?), ithelps you learn something new!\n So I built a few sets of flashcards about various topics.Here\u2019s the first set I built,  flashcards on containers, if you want to try it out.\n   Basically \u2013 there are 14ish questions, you click the card to see the answer,and for each card you categorize it as \u201cI knew that!\u201d, \u201cI learned something\u201d,or \u201cthat\u2019s confusing\u201d (which is meant to be a kind of \u201cother\u201d category, whereyou didn\u2019t know that and you didn\u2019t learn anything).\n The idea is that the answers contain enough information that you could actuallylearn a little bit from them, and hopefully be inspired to go learn more onyour own if you\u2019re interested.\n      the word \u201cflashcards\u201d has a lot baggage I didn\u2019t want \u2013 it\u2019s stronglyassociated with language learning / memorization. I don\u2019t use flashcardsmyself at all myself so it didn\u2019t really resonate with me.\n the format was constrained, and sometimes I wanted to include moreinformation in the answer than there was space for\n the UI was a bit confusing, some people couldn\u2019t figure out that you weresupposed to click on the card to flip it.\n  Probably the most important thing I learned from making these flashcards isthat it really matters how well the question matches the reader\u2019s mental model.\n I started out by writing questions by taking statements I\u2019d normally make about atopic, and turning them into questions. Sometimes this really didn\u2019t work.\n Here\u2019s an example of it not working: I think the statement \u201ca HTTP request has4 parts: a body, the headers, the request method, and the path being requested\u201dis relatively unobjectionable. That how I think about what a HTTP request is.\n But what if I ask you \u201cwhat are the 4 parts of a HTTP request?\u201d and the answeris \u201ca body, the headers, the request method, and the URL being requested\u201d? Itturns out, that\u2019s totally different!! Not everyone thinks about HTTP requestsas having 4 parts \u2013 they might think of it has having 3 parts (the first line,the headers, and the body). Or 2 parts and 1 optional part (the first line, andthe headers, and maybe an optional body). Or some other way! So it\u2019s weird tobe asked \u201cwhat are the 4 parts of a HTTP request\u201d.\n There were a lot of other examples like this, where people reacted badly tosome question I asked that didn\u2019t match up with how they think about a topic.So I learned that if I\u2019m asking a question, it gets held to a higher standardfor how well it matches with the reader\u2019s mental model than when making thesame statement.\n An example of what I think would be a better question here is \u201cDoes every HTTPrequest have headers?\u201d (yes! the HTTP/1.1 RFC requires that the Host header beset!). But even that is maybe a little tricky \u2013 probably at least one HTTP/1.0client implementation is out there in the world sending requests withoutheaders, even though 99.99% of HTTP requests have headers.\n Of course, it\u2019s ok if the question/answer doesn\u2019t match the reader\u2019s mentalmodel if their mental model is incorrect, but if their model is correct then Ithink it should match.\n  The other thing I learned from these flashcards is that a lot of people dislikemultiple choice. I haven\u2019t thought about this that much, but honestly I don\u2019treally like multiple choice either so I decided to get rid of it.\n  I don\u2019t remember why, but I\u2019ve had The Little Schemer kicking around in my headfor a while. I haven\u2019t actually read the whole thing myself, but I kept hearingpeople talking about it. Here\u2019s the first page of The Little Schemer, if youhaven\u2019t heard of it:\n  This reminded me a lot of what I was trying to do \u2013 there are questions andanswers, but the goal isn\u2019t for you to get all the questions \u201cright\u201d. Instead,I think the goal is for you to think about whether you know the answer yet ornot and learn as you go.\n  So, I kept a similar question/answer format, but switched to a side-by-side format, like the Little Schemer.\n   you can see both at the same time, so you don\u2019t forget what the question was\n it then makes more sense to just put all the questions &amp; answers on the samepage, so you can easily go back and look at the previous question if you want\n Basically I like that it gives the reader more control, which I think is important.\n  I also renamed the project to \u201cquestions\u201d because that\u2019s really how I thinkabout learning for myself \u2013 I don\u2019t do \u201cflashcards\u201d, but I do constantly askmyself questions about topics I don\u2019t understand, figure out the answers tothose questions, and then repeat until I understand the topic as well as I wantto.\n But coming up with the right questions on your own is hard when you don\u2019t alot, so I\u2019m hopeful that providing folks with a bunch of questions (andanswers) to think about will help you decide what you want to learn next.\n  When I released the first set of questions on UDP, I didn\u2019t include an \u201cIlearned something\u201d button, and I noticed something weird \u2013 a lot of peoplewere tweeting things like \u201cI got  8\u2044 10\u201d, \u201cI got  10\u2044 10\u201d.\n I was a bit worried about this because the whole idea was to help peopleidentify things they could learn, so saying \u201cI got  8\u2044 10\u201d felt like it wasfocusing on the things you already knew and ignoring the most important thing\u2013 the 2 questions where maybe you could learn something new!\n So I added an \u201cI learned something!\u201d button back to each question and spent waytoo much time building a fun SVG+CSS animation that played when you pressed thebutton. And so far it seems to have worked \u2013 I see more people commenting \u201cIlearned something\u201d and less \u201cI got  9\u2044 10\u201d.\n  As usual, building small simple things takes more time than I\u2019d expect! Theconcept of \u201csome questions and answers\u201d seems really simple, but I\u2019ve alreadylearned a lot by building this and I think I still have a lot more to learnabout this format.\n But I\u2019m excited to learn more, and I\u2019d love to know your thoughts. Here it isagain if you\u2019d like to try it:  https://questions.wizardzines.com.", "posttime": "2020-06-15 02:53:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u4eec,people,\u95ee\u9898", "title": "\u5e2e\u52a9\u4eba\u4eec\u51b3\u5b9a\u5b66\u4e60\u4ec0\u4e48\u7684\u95ee\u9898", "title_en": "Questions to help people decide what to learn", "transed": 1, "url": "https://jvns.ca/blog/2020/06/14/questions-to-help-you-learn/", "via": "", "real_tags": ["\u4eba\u4eec", "people", "\u95ee\u9898"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006555, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u90a3\u65f6\u7985\u5b97\u662f\u514b\u91cc\u65af\u6c40\u00b7\u591a\u5fb7\u96f7\u5c14\u7684\u4e00\u4e2a\u65b0\u9879\u76ee\uff0c\u65e8\u5728\u63d0\u4f9b\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u5f0f\u6765\u6559\u6388\u51a5\u60f3\u3002\u5728\u897f\u65b9\u89c2\u4f17\u4e2d\uff0c\u51a5\u60f3\u56e0\u4e3a\u8fc7\u4e8e\u590d\u6742\u3001\u6df1\u5965\u548c\u5df4\u6d1b\u514b\u98ce\u683c\u800c\u58f0\u540d\u72fc\u85c9\uff1b\u7136\u800c\uff0c\u8fd9\u4e9b\u90fd\u4e0e\u4e8b\u5b9e\u76f8\u5dee\u4e0d\u8fdc\u3002\u5b83\u53ef\u4ee5\u50cf\u89c2\u5bdf\u547c\u5438\u53d1\u751f\u4e00\u6837\u7b80\u5355\uff0c\u4e5f\u53ef\u4ee5\u4ece\u90a3\u91cc\u5f00\u59cb\u547c\u5438\u3002\n\u5982\u679c\u60a8\u5bf9\u6b64\u611f\u5174\u8da3\uff0c\u8bf7\u67e5\u770b\u4ecb\u7ecd\uff0c\u5e76\u968f\u65f6\u67e5\u770b\u51a5\u60f3\u6216\u6280\u80fd\u6307\u5357\u3002", "note_en": "When Then Zen is a new project by  Christine Dodrill to offer a better way to teach meditation. Meditation has gotten a really bad reputation in Western audiences as overcomplicated, esoteric and baroque; however those couldn&#39;t be farther from the truth. It can be as simple as watching breathing happen or build off of there.\n If this interests you, please check out the  introduction and feel free to look at the  meditation or  skill guides.", "posttime": "2020-06-15 02:53:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51a5\u60f3,teach", "title": "\u6559\u51a5\u60f3\u7684\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5", "title_en": "A better way to teach meditation", "transed": 1, "url": "https://when-then-zen.christine.website/", "via": "", "real_tags": ["\u51a5\u60f3", "teach"]}, {"category": "", "categoryclass": "", "imagename": "78554a7a00fe56dbde833674de540c00.jpg", "infoid": 1006553, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2020\u5e746\u670810\u65e5\uff0c\u4e16\u754c\u5404\u5730\u6570\u4ee5\u5343\u8ba1\u7684STEM\u79d1\u5b66\u5bb6\u548c\u7ec4\u7ec7\u4e3e\u884c\u7f62\u5de5\uff0c\u6297\u8bae\u5b66\u672f\u754c\u7684\u7cfb\u7edf\u6027\u79cd\u65cf\u4e3b\u4e49\u3002\u4ed6\u4eec\u8054\u5408\u5728#ShutDownSTEM\u548c#Strike4BlackLives\u7b49\u6807\u7b7e\u4e0b\uff0c\u5e0c\u671b\u4ed6\u4eec\u7684\u52aa\u529b\u5c06\u5bfc\u81f4\u5b66\u672f\u673a\u6784\u548c\u7ec4\u7ec7\u5185\u90e8\u91c7\u53d6\u76f4\u63a5\u884c\u52a8\uff0c\u6c38\u8fdc\u6d88\u9664\u79cd\u65cf\u4e3b\u4e49\u3002\n\u5728\u5b66\u672f\u754c\uff0c\u6211\u4eec\u7684\u601d\u60f3\u548c\u8bed\u8a00\u53d8\u6210\u4e86\u65b0\u7684\u8ba4\u8bc6\u65b9\u5f0f\u3002\u6211\u4eec\u7684\u7814\u7a76\u8bba\u6587\u53d8\u6210\u4e86\u52a0\u5f3a\u53cd\u9ed1\u4eba\u53d9\u4e8b\u7684\u5a92\u4f53\u53d1\u5e03\u3001\u4e66\u7c4d\u548c\u7acb\u6cd5\u3002\u5728STEM\uff0c\u6211\u4eec\u521b\u9020\u7684\u6280\u672f\u5f71\u54cd\u5230\u6211\u4eec\u793e\u4f1a\u7684\u6bcf\u4e00\u4e2a\u90e8\u5206\uff0c\u5e76\u4e14\u7ecf\u5e38\u88ab\u6b66\u5668\u5316\u6765\u5bf9\u4ed8\u9ed1\u4eba\u3002\u201c\u3002\u5728#ShutDownSTEM\u7684\u7f51\u7ad9\u4e0a\u5199\u4e0b#ShutDownSTEM\u7684\u7ec4\u7ec7\u8005\u3002\n\u201c\u6211\u4e0d\u60f3\u8981\u66f4\u591a\u7684\u591a\u6837\u6027\u548c\u5305\u5bb9\u6027\u7814\u8ba8\u4f1a\u3002\u8fd9\u4e9b\u6d3b\u52a8\u88ab\u7528\u6765\u4e3a\u673a\u6784\u63d0\u4f9b\u4e00\u4e2a\u76fe\u724c\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u53ef\u4ee5\u505a\u6700\u5c11\u7684\u4e8b\u60c5\u3002\u201c\u3002\u8d39\u7c73\u5b9e\u9a8c\u5ba4\u7684\u5929\u4f53\u7269\u7406\u5b66\u5bb6\u3001\u201c\u4e3a\u9ed1\u4eba\u751f\u6d3b\u7f62\u5de5\u201d\u548c#ShutDownStem\u7684\u7ec4\u7ec7\u8005\u5e03\u83b1\u6069\u00b7\u8bfa\u5fb7(Brian Nord)\u8bf4\u3002\n\u867d\u7136\u9ed1\u4eba\u548c\u975e\u88d4\u7f8e\u56fd\u4eba\u7ea6\u5360\u7f8e\u56fd\u4eba\u53e3\u768413%\uff0c\u4f46\u4ed6\u4eec\u6bd5\u4e1a\u4e8e9%\u7684\u7406\u79d1\u5b66\u58eb\u5b66\u4f4d\u548c3.9%\u7684\u672c\u79d1\u5de5\u7a0b\u5b66\u4f4d\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5c3d\u7ba1\u767d\u4eba\u7ea6\u5360\u7f8e\u56fd\u4eba\u53e3\u768472%\uff0c\u4f46\u767d\u4eba\u5360\u7406\u79d1\u5b66\u4f4d\u768455.7%\uff0c\u5360\u5de5\u79d1\u5b66\u4f4d\u768459.3%\u3002\u867d\u7136\u4e9a\u88d4\u53ea\u5360\u7f8e\u56fd\u4eba\u53e3\u76846%\uff0c\u4f46\u4ed6\u4eec\u62e5\u67099%\u7684\u672c\u79d1\u751f\u7406\u79d1\u5b66\u4f4d\u548c10.8%\u7684\u672c\u79d1\u751f\u5de5\u79d1\u5b66\u4f4d\u3002\n\u5f53\u89c2\u5bdf\u535a\u58eb\u6bd5\u4e1a\u751f\u548c\u5b66\u672f\u6559\u804c\u5458\u5de5\u7684\u4eba\u53e3\u7edf\u8ba1\u6570\u636e\u65f6\uff0c\u7f8e\u56fd\u9ed1\u4eba\u548c\u975e\u88d4\u7f8e\u56fd\u516c\u6c11\u7684\u5dee\u8ddd\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u30022017\u5e74\uff0c\u6388\u4e88\u7f8e\u56fd\u516c\u6c11\u548c\u6c38\u4e45\u5c45\u6c11\u7684\u535a\u58eb\u5b66\u4f4d\u4e2d\uff0c\u53ea\u67096.7%\u6388\u4e88\u4e86\u9ed1\u4eba\u5b66\u751f\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u767d\u4eba\u83b7\u5f97\u4e8670%\u7684\u535a\u58eb\u5b66\u4f4d\uff0c\u4e9a\u88d4\u83b7\u5f97\u4e8610%\u7684\u535a\u58eb\u5b66\u4f4d\u3002\n\u540c\u5e74\uff0c\u867d\u7136\u9ed1\u4eba\u548c\u975e\u88d4\u7f8e\u56fd\u5b66\u751f\u5360\u672c\u79d1\u751f\u603b\u6570\u768414%\uff0c\u4f46\u53ea\u67096%\u7684\u6559\u804c\u5458\u5de5\u662f\u9ed1\u4eba\u3002\u4e0e\u6b64\u540c\u65f6\uff0c81%\u7684\u6559\u6388\u548c80%\u7684\u8bb2\u5e08\u662f\u767d\u4eba\u3002\n\u6559\u80b2\u673a\u6784\u7684\u4ee3\u8868\u6743\u53ef\u80fd\u662f\u95ee\u9898\u7684\u4e00\u90e8\u5206\u3002\u7814\u7a76\u6307\u51fa\uff0c\u5b66\u751f\u66f4\u6709\u53ef\u80fd\u5c06\u540c\u79cd\u65cf\u548c\u6c11\u65cf\u7684\u6559\u5e08\u89c6\u4e3a\u699c\u6837\uff0c\u800c\u4e14\u7531\u4e8e\u8ddd\u79bb\u4ed6\u4eec\u8f83\u8fd1\uff0c\u4ed6\u4eec\u4f1a\u5728\u6559\u80b2\u4e0a\u6295\u5165\u66f4\u591a\u7cbe\u529b\uff0c\u5e76\u6709\u66f4\u9ad8\u7684\u5927\u5b66\u62b1\u8d1f\u3002\u6765\u81ea\u793e\u533a\u5b66\u9662\u7684\u5176\u4ed6\u7814\u7a76\u8868\u660e\uff0c\u5982\u679c\u6559\u5e08\u548c\u6559\u6388\u4e0e\u4ed6\u4eec\u7684\u5b66\u751f\u6709\u66f4\u76f8\u4f3c\u7684\u79cd\u65cf\u80cc\u666f\uff0c\u5c11\u6570\u65cf\u88d4\u5b66\u751f\u4e4b\u95f4\u7684\u8868\u73b0\u5dee\u8ddd\u53ef\u4ee5\u7f29\u5c0f20%\u523050%\u3002\n\u793e\u4f1a\u7ecf\u6d4e\u56e0\u7d20\u4e5f\u53ef\u80fd\u8d77\u4f5c\u7528\u3002\u5c3d\u7ba1\u5728\u8fc7\u53bb20\u5e74\u91cc\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u9ed1\u4eba\u5b66\u751f\u5b8c\u6210\u4e86\u9ad8\u4e2d\u5b66\u4e1a\uff0c\u8fdb\u5165\u4e86\u5927\u5b66\u8bfe\u7a0b\uff0c\u4f46\u4ed6\u4eec\u7684\u8f8d\u5b66\u7387\u4e5f\u662f\u6240\u6709\u79cd\u65cf\u4e2d\u6700\u9ad8\u7684\uff0c\u503a\u52a1\u8d1f\u62c5\u4e5f\u662f\u6700\u5927\u7684\u30022015\u5e74\u81f32016\u5e74\u95f4\uff0c\u7f8e\u56fd\u516c\u7acb\u5b66\u6821\u56db\u5e74\u5236\u535a\u58eb\u751f\u7684\u8d37\u6b3e\u4e2d\u503c\u4e3a57968\u7f8e\u5143\uff0c\u800c\u9ed1\u4eba\u5b66\u751f\u7684\u8d37\u6b3e\u4e2d\u503c\u4e3a107602\u7f8e\u5143\u3002\n\u9274\u4e8e\u9ed1\u4eba\u548c\u975e\u88d4\u7f8e\u56fd\u4eba\u7684\u5bb6\u5ead\u6536\u5165\u4e2d\u4f4d\u6570\u5728\u7f8e\u56fd\u6240\u6709\u79cd\u65cf\u4e2d\u6700\u4f4e(2018\u5e74\u4ec5\u4e3a41361\u7f8e\u5143\uff0c\u800c\u6240\u6709\u79cd\u65cf\u7684\u5e73\u5747\u6536\u5165\u4e3a63179\u7f8e\u5143)\uff0c\u8ffd\u6c42\u6559\u80b2\u7684\u9ad8\u6210\u672c\u58c1\u5792\u53ef\u80fd\u4f1a\u5bf9\u5927\u5b66\u6210\u7ee9\u548c\u62b1\u8d1f\u4ea7\u751f\u5f71\u54cd\u3002\n\u5728STEM\u9886\u57df\u4ee5\u53ca\u66f4\u666e\u901a\u7684\u5b66\u672f\u754c\u5bf9\u9ed1\u4eba\u548c\u975e\u88d4\u7f8e\u56fd\u5927\u5b66\u751f\u7684\u5f85\u9047\uff0c\u4e5f\u53ef\u80fd\u4f1a\u963b\u788d\u8bb8\u591a\u4eba\u4ece\u4e8b\u5b66\u672f\u548c\u7814\u7a76\u4e8b\u4e1a\u3002\u9ed1\u4eba\u79d1\u5b66\u5bb6\u548c\u6559\u804c\u5458\u5de5\u4e0d\u4ec5\u7ecf\u5e38\u56de\u5fc6\u8d77\u81ea\u5df1\u662f\u623f\u95f4\u91cc\u552f\u4e00\u7684\u9ed1\u4eba\uff0c\u4ed6\u4eec\u8fd8\u56de\u5fc6\u8d77\u65e0\u6570\u79cd\u65cf\u6b67\u89c6\u7684\u65f6\u523b\u3002\u4ed6\u4eec\u7684\u6210\u5c31\u88ab\u8d2c\u4f4e\u5e76\u5f52\u56e0\u4e8e\u79ef\u6781\u7684\u6b67\u89c6\uff0c\u5728\u5de5\u4f5c\u4e2d\u65e0\u7f18\u65e0\u6545\u5730\u53d7\u5230\u5927\u5b66\u8b66\u536b\u548c\u8b66\u5bdf\u7684\u9a9a\u6270\uff0c\u636e\u62a5\u9053\u5728\u7533\u8bf7\u7814\u7a76\u62e8\u6b3e\u65f6\u906d\u9047\u4e86\u8d1f\u9762\u504f\u89c1\uff0c\u8fd9\u4e9b\u60c5\u51b5\u4e0d\u4e00\u800c\u8db3\u3002\n\u8457\u540d\u7684\u79d1\u5b66\u6742\u5fd7\u201c\u81ea\u7136\u201d\u8bf4\uff1a\u201c\u6211\u4eec\u8ba4\u8bc6\u5230\uff0c\u201d\u81ea\u7136\u201c\u662f\u9020\u6210\u7814\u7a76\u548c\u5b66\u672f\u504f\u89c1\u7684\u767d\u4eba\u673a\u6784\u4e4b\u4e00\u3002\u79d1\u5b66\u4e8b\u4e1a\u4e00\u76f4\u662f--\u800c\u4e14\u4ecd\u7136\u662f--\u7cfb\u7edf\u6027\u79cd\u65cf\u4e3b\u4e49\u7684\u540c\u8c0b\uff0c\u5b83\u5fc5\u987b\u66f4\u52a0\u52aa\u529b\u5730\u7ea0\u6b63\u8fd9\u4e9b\u4e0d\u516c\u6b63\u3002\n\u5bf9\u6280\u672f\u548c\u884c\u4e3a\u751f\u7269\u5b66\u6709\u6d53\u539a\u5174\u8da3\u7684\u79d1\u5b66\u4f5c\u5bb6\u3002\u5979\u76ee\u524d\u7684\u91cd\u70b9\u662f\u8fd9\u4e9b\u9886\u57df\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u4ee5\u521b\u5efa\u6709\u610f\u4e49\u7684\u4ea4\u4e92\u3001\u5e94\u7528\u7a0b\u5e8f\u548c\u73af\u5883\u3002\n\u5916\u5c42\u7a7a\u95f4\u6324\u6ee1\u4e86\u6052\u661f\u548c\u56f4\u7ed5\u5b83\u4eec\u8fd0\u884c\u7684\u884c\u661f\uff0c\u4f46\u8ba9\u6052\u661f\u6210\u4e3a\u2026\u2026\u7684\u4e1c\u897f\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u7ec6\u5fae\u7684\u754c\u9650\u3002\n\u6700\u8fd1\u53d1\u8868\u5728\u201c\u79d1\u5b66\u8fdb\u5c55\u201d\u4e0a\u7684\u4e00\u9879\u7814\u7a76\u7ed3\u679c\u62a5\u544a\u4e86\u5bf9\u4e00\u79cd\u666e\u904d\u4eab\u53d7\u7684\u516c\u5171\u751f\u6d3b\u65b9\u5f0f\u7684\u6f14\u53d8\u7684\u65b0\u89c1\u89e3\u3002\n\u592a\u9633\u53ea\u662f\u6211\u4eec\u5b87\u5b99\u4e2d\u5b58\u5728\u7684\u65e0\u6570\u6052\u661f\u4e2d\u7684\u4e00\u9897\u3002\u4f46\u5b83\u662f\u6700\u7a81\u51fa\u7684\u4e4b\u4e00\uff0c\u56e0\u4e3a\u5b83&amp\uff1br\uff1b\n\u4e00\u9879\u5173\u4e8e\u5173\u8282\u5185\u6d41\u4f53\u548c\u9897\u7c92\u4f20\u8f93\u7684\u65b0\u7814\u7a76\u62a5\u544a\u79f0\uff0c\u76f8\u8ddd6\u82f1\u5c3a\u7684\u751f\u547d\u53ef\u80fd\u8fd8\u4e0d\u591f\u8fdc\u3002\n\u6211\u4eec\u4eba\u7c7b\u5df2\u7ecf\u5b8c\u5584\u4e86\u5f88\u591a\u4e1c\u897f\uff0c\u4f46\u8fd8\u6ca1\u6709\u5b8c\u5168\u7406\u89e3\u3002\u4ee5\u73bb\u7483\u4e3a\u4f8b\uff0c\u79d1\u5b66\u5bb6\u4eec\u2026\u2026\u3002\n\u53d1\u8868\u5728\u201c\u5148\u8fdb\u5149\u5b66\u6750\u6599\u201d\u6742\u5fd7\u4e0a\u7684\u4e00\u9879\u65b0\u7814\u7a76\u7a81\u51fa\u4e86\u4e00\u9879\u521b\u65b0\u6280\u672f\uff0c\u8be5\u6280\u672f\u4e3a\u65e0\u7ebf\u901a\u4fe1\u63d0\u4f9b\u4e86\u4fe1\u53f7\u3002", "note_en": "On June 10th 2020, thousands of STEM scientists and organziations around the world went on strike to protest systemic racism in academia. Uniting under hashtags including \u2018#ShutDownSTEM\u2019 and \u2018#Strike4BlackLives\u2019, they hope their efforts will lead to direct action within academic institutions and organizations to eliminate racism for good.\n  &#34;In academia, our thoughts and words turn into new ways of knowing. Our research papers turn into media releases, books and legislation that reinforce anti-Black narratives. In STEM, we create technologies that affect every part of our society and are routinely weaponized against Black people.\u201d write the organizers of #ShutDownSTEM on their          website      .\n  \u201cI don\u2019t want more diversity and inclusion seminars. Those activities are used to provide a shield to institutions so that they can do the bare minimum.\u201d says Brian Nord, an astrophysist at Fermilab and organizer for \u2018Strike For Black Lives\u2019 and #ShutDownStem.\n    While black and African American people make up around 13% of the US population, they          graduate       from 9% of bachelor degrees in science and 3.9% of undergraduate engineering degrees.\n  By comparison, white people make up 55.7% of science degrees and 59.3% of engineering degrees, despite making up around 72% of the US population. Although those of Asian descent account for just 6% of the US population, they hold 9% of undergraduate science degrees and 10.8% of undergraduate engineering degrees.\n  The disparity for black and African American citizens in the US becomes more pronounced when looking at the demographics of Ph.D. graduates and academic faculty members. In          2017      , just 6.7% of PhDs awarded to US citizens and permanent residents were given to black students. Meanwhile, white people received 70% of PhDs, and Asians: 10%.\n  The same year, while black and African American students          accounted       for 14% of the undergraduate population, just 6% of faculty members were black. In the meantime, 81% of professors and 80% of lecturers were white.\n      Representation in institutions of education may be part of the problem.          Research       has pointed out that students are more likely to regard teachers of the same race and ethnicity as role models, and due to proximity to them, put more effort into education and have higher college ambitions. Other          research       from community colleges has suggested that performance gaps between minority students can close between 20% and 50% should teachers and professors have more similar ethnic backgrounds to their students.\n  Socio-economic factors may also play a role. Although increasing numbers of black students have completed high school and enrolled in college programs over the last two decades, they also have some of the highest dropout rates and the largest debt burdens among all ethnicities. Between 2015 and 2016, while the median loan per doctoral student in the US for a four-year program in a public school was $57,968, the same amount for black students was $107, 602.\n    Given that black and African American people have the          lowest       median household income among all ethnicities in the country (at just $41,361 in 2018 compared to an average $63,179 among all ethnicities), high-cost barriers towards pursuing education may make a difference in both college achievement and aspiration.\n  The treatment of black and African American college students in STEM fields, and more general academia, could also discourage many from pursuing academic and research careers. Not only do black scientists and faculty members often recall being the          only       black person in the room, they also recall          numerous       moments of racial discrimination. These range from having their achievements belittled and attributed to &#39;positive discrimination&#39;, to being hassled by university guards and police for no reason while at work, and reportedly experiencing negative bias when applying for research grants.\n  Renowned science journal, Nature,          said      , &#34;We recognize that Nature is one of the white institutions that is responsible for bias in research and scholarship. The enterprise of science has been \u2014 and remains \u2014 complicit in systemic racism, and it must strive harder to correct those injustices.&#34;\n      Science writer with keen interests in technology and behavioral biology. Her current focus is on the interplay between these fields to create meaningful interactions, applications and environments.\n    Outer space is chock-full of stars and planets orbiting them, but there\u2019s a fine line between what makes a star a ...\n  Findings from a recent study published in Science Advances report new insights on the evolution of a commonly enjoyed pl ...\n  The Sun is just one of countless stars that exist in our universe. But it\u2019s one of the most prominent because it&amp;r ...\n  Life from six feet apart might not be far enough, reports a new study on the transport of fluids and particles in the jo ...\n  There are many things we humans have come to perfect, but don&#39;t yet fully understand. Take glass for example, scientists ...\n  New research published in the journal Advanced Optical Materials highlights an innovative technology that signals for wi ...", "posttime": "2020-06-15 02:35:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed1\u4eba,people,\u7814\u7a76", "title": "\u4e3a\u4ec0\u4e48\u65af\u7279\u59c6\u7684\u9ed1\u4eba\u8fd9\u4e48\u5c11\uff1f", "title_en": "Why Are There So Few Black People in Stem?", "transed": 1, "url": "https://www.labroots.com/trending/chemistry-and-physics/17877/black-people-stem", "via": "", "real_tags": ["\u9ed1\u4eba", "people", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "e3475b67baadb631e1cb013a37bf088c.jpg", "infoid": 1006552, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u94bb\u77f3\u77ff\u5546\u88ab\u4ef7\u503c\u6570\u5341\u4ebf\u7f8e\u5143\u7684\u5b9d\u77f3\u56f0\u4f4f\u4e86\uff0c\u56e0\u4e3a\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u8ba9\u4e16\u754c\u4e0a\u51e0\u4e4e\u6ca1\u6709\u4eba\u60f3\u8981.", "note_en": "  Diamond miners are stuck with billions of dollars worth of gems as the coronavirus pandemic has left very few people around the world wanting to...", "posttime": "2020-06-15 02:35:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u94bb\u77f3,dollars,\u5546\u88ab", "title": "\u6570\u5341\u4ebf\u7f8e\u5143\u7684\u672a\u552e\u51fa\u94bb\u77f3\u6b63\u5728\u4e16\u754c\u5404\u5730\u5806\u79ef\u3002", "title_en": "Billions of dollars of unsold diamonds are piling up around the world", "transed": 1, "url": "https://markets.businessinsider.com/news/stocks/diamond-sales-miners-stuck-gems-worth-billions-dollars-coronavirus-2020-6-1029300342", "via": "", "real_tags": ["\u94bb\u77f3", "dollars", "\u5546\u88ab"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006551, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea\u52a8\u533a\u5206\u662f\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7684\u57fa\u7840\u3002\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u901a\u5e38\u4f7f\u7528\u57fa\u4e8e\u68af\u5ea6\u7684\u6280\u672f\u8fdb\u884c\u8bad\u7ec3\uff0cAutodiff\u4f7f\u5f97\u5373\u4f7f\u662f\u4ece\u5de8\u5927\u7684\u3001\u590d\u6742\u7684\u6a21\u578b\u4e2d\u4e5f\u5f88\u5bb9\u6613\u83b7\u5f97\u68af\u5ea6\u3002\u201c\u53cd\u5411\u6a21\u5f0f\u81ea\u52a8\u6bd4\u8f83\u201d\u662f\u5927\u591a\u6570\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4f7f\u7528\u7684\u81ea\u52a8\u6bd4\u8f83\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u7684\u6548\u7387\u548c\u51c6\u786e\u6027\u3002\n\u5c0f\u578bautodiff\u6846\u67b6\u5c06\u5904\u7406\u6807\u91cf\u3002\u6211\u4eec\u53ef\u4ee5(\u7a0d\u540e)\u4f7f\u7528NumPy\u5c06\u5176\u77e2\u91cf\u5316\u3002\n\u672f\u8bed\u8bf4\u660e\uff1a\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u201cautodiff\u201d\u5c06\u6307\u201c\u53cd\u5411\u6a21\u5f0fautodiff\u201d\u3002\u201cGradient\u201d\u7528\u6cd5\u677e\u6563\uff0c\u4f46\u5728\u672c\u6587\u4e2d\u901a\u5e38\u6307\u201c\u4e00\u9636\u504f\u5bfc\u6570\u201d\u3002\na=4 b=3 c=a+b#=4+3=7 d=a*c#=4*7=28\u3002\n\u95ee\u98981\uff1a$d$\u76f8\u5bf9\u4e8e$a$\u7684\u68af\u5ea6\u662f\u591a\u5c11\uff0c\u5373$\\frac{\\Partial{d}}{\\Partial{a}}$\uff1f(\u6765\u8bd5\u8bd5\u8fd9\u4e2a\u5427\uff01)\u3002\n\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u6c42\u89e3Q1\uff0c\u4f46\u6211\u4eec\u4f7f\u7528\u4e58\u79ef\u89c4\u5219\uff0c\u5373\u5982\u679c$y=x_1x_2$\uff0c\u5219$y\u2018=x_1\u2019x_2+x_1x_2\u2018$\u3002\nphew\u2026\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053$\\frac{\\Partial{d}}{\\Partial{b}}$\uff0c\u4f60\u5fc5\u987b\u91cd\u65b0\u6267\u884c\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u89e3\u51b3Q1\u95ee\u9898\u7684\u81ea\u52a8\u6c42\u5dee\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6570\u5b57\uff1a\n\u5728\u5de6\u8fb9\uff0c\u6211\u4eec\u770b\u5230\u7cfb\u7edf\u7528\u56fe\u5f62\u8868\u793a\u3002\u6bcf\u4e2a\u53d8\u91cf\u90fd\u662f\u4e00\u4e2a\u8282\u70b9\uff1b\u4f8b\u5982\uff0c$d$\u662f\u6700\u4e0a\u9762\u7684\u8282\u70b9\uff0c$a$\u548c$b$\u662f\u6700\u4e0b\u9762\u7684\u53f6\u8282\u70b9\u3002\n\u5728\u53f3\u8fb9\uff0c\u6211\u4eec\u4eceautodiff\u7684\u89d2\u5ea6\u770b\u7cfb\u7edf\u3002\u8ba9\u6211\u4eec\u5c06\u56fe\u8fb9\u4e0a\u7684\u503c\u79f0\u4e3a\u5c40\u90e8\u5bfc\u6570\u3002\u901a\u8fc7\u4f7f\u7528\u5c40\u90e8\u5bfc\u6570\u548c\u7b80\u5355\u7684\u89c4\u5219\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u8ba1\u7b97\u51fa\u6211\u4eec\u60f3\u8981\u7684\u5bfc\u6570\u3002\n\u8fd9\u662fQ1\u7684\u7b54\u6848\uff0c\u7528\u81ea\u52a8\u5dee\u5206\u6cd5\u8ba1\u7b97\u3002\u4f60\u80fd\u770b\u51fa\u5b83\u4e0e\u8fd9\u4e2a\u6570\u5b57\u6709\u4ec0\u4e48\u5173\u7cfb\u5417\uff1f\n\u6211\u4eec\u901a\u8fc7\u67e5\u627e\u4ece$d$\u5230$a$(\u4e0d\u4e0e\u865a\u7ebf\u7bad\u5934\u76f8\u53cd)\u7684\u8def\u7531\uff0c\u7136\u540e\u5e94\u7528\u4ee5\u4e0b\u89c4\u5219\uff0c\u4ece\u56fe\u4e2d\u83b7\u5f97\u6b64\u7b54\u6848\uff1a\n\u7b2c\u4e00\u6761\u8def\u7ebf\u662f\u76f4\u63a5\u4ece$d$\u5230$a$\uff0c\u8fd9\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86$\\frac{\\Partial{\\bar{d}{\\Partial{a}}$Term\u3002\u7b2c\u4e8c\u6761\u8def\u7ebf\u662f\u4ece$d$\u5230$c$\u518d\u5230$a$\uff0c\u8fd9\u7ed9\u51fa\u4e86\u672f\u8bed$\\frac{\\Partial{\\bar{d}{\\Partial{c}}*\\frac{\\Partial{\\bar{c}{\\Partial{a}}$\u3002\n\u6211\u4eec\u7684autodiff\u5b9e\u73b0\u5c06\u6cbf\u7740\u56fe\u5411\u4e0b\uff0c\u8ba1\u7b97$d$\u76f8\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u5bfc\u6570\uff0c\u800c\u4e0d\u662f\u50cf\u6211\u4eec\u521a\u624d\u5bf9$d$\u6240\u505a\u7684\u90a3\u6837\uff0c\u53ea\u8ba1\u7b97\u7279\u5b9a\u8282\u70b9\u7684\u5bfc\u6570\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97$d$\u76f8\u5bf9\u4e8e$c$\u548c$b$\u7684\u68af\u5ea6\uff0c\u800c\u4e0d\u9700\u8981\u592a\u591a\u7684\u5de5\u4f5c\u3002\n\u6211\u4eec\u5728\u4e0a\u9762\u7684\u56fe\u5f62\u8fb9\u4e0a\u770b\u5230\u4e86\u201c\u672c\u5730\u5bfc\u6570\u201d\uff0c\u5176\u5f62\u5f0f\u4e3a\uff1a$\\frac{\\Partial\\bar{y}}{\\Partial x}$\u3002\n\u4e00\u822c\u800c\u8a00\uff1a\u8981\u83b7\u5f97\u5c40\u90e8\u5bfc\u6570\uff0c\u8bf7\u5c06\u8fdb\u5165\u8282\u70b9\u7684\u53d8\u91cf\u89c6\u4e3a\u4e0d\u662f\u5176\u4ed6\u53d8\u91cf\u7684\u51fd\u6570\u3002\n\u4f8b\u5982\uff0c\u56de\u60f3\u4e00\u4e0b$d=a*c$\u3002\u7136\u540e\u5c06$\\frac{\\Partial{d}}{\\Partial{a}}=2a+b$\u4e0e$\\frac{\\Partial\\bar{d}}{\\Partial a}=c$\u8fdb\u884c\u6bd4\u8f83\u3002\u5c40\u90e8\u5bfc\u6570$\\frac{\\PARTIAL\\BAR{d}}{\\PARTIAL a}=c$\uff0c\u662f\u5728\u5bf9$d$\u7684\u8868\u8fbe\u5f0f\u8fdb\u884c\u5fae\u5206\u4e4b\u524d\u5c06$c$\u89c6\u4e3a\u5e38\u91cf\u800c\u83b7\u5f97\u7684\u3002\n\u5b9a\u4e49\u7b80\u5355\u51fd\u6570\u7684\u5c40\u90e8\u5bfc\u6570\u901a\u5e38\u5f88\u5bb9\u6613\uff0c\u5982\u679c\u60a8\u77e5\u9053\u5c40\u90e8\u5bfc\u6570\uff0c\u90a3\u4e48\u5c06\u51fd\u6570\u6dfb\u52a0\u5230autodiff\u6846\u67b6\u4e2d\u4e5f\u5f88\u5bb9\u6613\u3002\u4f8b\u5982\uff1a\n\u52a0\u6cd5\uff1a$n=a+b$\uff0c\u672c\u5730\u5bfc\u6570\u4e3a\uff1a$\\frac{\\Partial\\bar{n}}{\\Partial a}=1$\u548c$\\frac{\\Partial\\bar{n}}{\\Partial b}=1$\u3002\n\u4e58\u6cd5\uff1a$n=a*b$\uff0c\u672c\u5730\u5bfc\u6570\u4e3a\uff1a$\\frac{\\Partial\\bar{n}}{\\Partial a}=b$\u548c$\\frac{\\Partial\\bar{n}}{\\Partial b}=a$\u3002\n\u51fd\u6570get_gradients\u4f7f\u7528\u8282\u70b9\u7684\u6e10\u53d8\u6570\u636e\u9012\u5f52\u5730\u904d\u5386\u56fe\u5f62\uff0c\u8ba1\u7b97\u6e10\u53d8\u3002\u5b83\u4f7f\u7528\u6211\u4eec\u5728\u4e0a\u9762\u770b\u5230\u7684\u89c4\u5219\uff1a\n\u5806\u6808\u4e2d\u7684\u5143\u7ec4(\u5728get_gradients\u4e2d)\u7c7b\u4f3c\u4e8egrad\u4e2d\u7684\u5143\u7ec4\uff0c\u4f46\u662f\u5b83\u4eec\u5305\u542b\u5f53\u524d\u8def\u7531\u503c\uff0c\u800c\u4e0d\u662f\u5c40\u90e8\u5bfc\u6570\u503c\u3002\n\u4ece\u96c6\u5408\u5bfc\u5165defaultdict\u7c7bVar\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u4e00\u4e2a\u53f6\u8282\u70b9(\u6ca1\u6709\u5b50\u8282\u70b9)\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(self\uff0cvalue)\uff1aself\u3002value=value#\u8282\u70b9\u7684\u6807\u91cf\u503c\u3002\u7c7badd\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(self\uff0ca\uff0cb)\uff1aself\u3002\u503c=a\u3002\u503c+b\u3002\u91cd\u89c6\u81ea\u6211\u3002grad=[(a\uff0c1)\uff0c(b\uff0c1)]#\u5b50\u8282\u70b9&amp\uff1b\u5bf9\u5e94&#39\uff1b\u672c\u5730\u5bfc\u6570&39\uff1bclass mul\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(self\uff0ca\uff0cb)\uff1aself\u3002\u503c=a\u3002\u503c*b\u3002\u91cd\u89c6\u81ea\u6211\u3002\u68af\u5ea6=[(a\uff0cb.\u3002\u503c)\u3001(b\uff0ca\u3002value)]def get_gradients(Parent_Node)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u5f80\u4e0b\u8d70\uff0c\u8ba1\u7b97`parent_node`\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7684\u5bfc\u6570\u3002&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bgradients=defaultdict(lambda\uff1a0)stack=parent_node\u3002\u683c\u62c9\u5fb7\u3002copy()#(\u8282\u70b9\uff0cROUTE_VALUE)\u5143\u7ec4\u5217\u8868\u3002\u800cSTACK\uff1aNODE\uff0cROUTE_VALUE=STACK\u3002POP()\u68af\u5ea6[node]+=route_value#&#34\uff1b\u5c06\u4e0d\u540c\u7684\u8def\u7531\u76f8\u52a0\u3002&#34\uff1b\u5982\u679c\u6ca1\u6709isinstance(node\uff0cVar)\uff1a#\u5982\u679c\u8282\u70b9\u6709\u5b50\u8282\u70b9\uff0c\u5219\u5c06\u5b83\u4eec\u653e\u5230\u5806\u6808\u4e2d\u3002\u5bf9\u4e8eCHILD_NODE\uff0c\u8282\u70b9\u4e2d\u7684CHILD_ROUTE_VALUE\u3002\u845b\u5170\u5fb7\uff1a\u5806\u53e0\u3002APPEND((CHILD_NODE\uff0cCHILD_ROUTE_VALUE*ROUTE_VALUE))#&#34\uff1b\u5c06\u8def\u5f84\u7684\u8fb9\u76f8\u4e58\u3002&#34\uff1bRETURN DICT(\u6e10\u53d8)\u3002\na=Var(4)b=Var(3)c=add(a\uff0cb)#=4+3=7 d=mul(a\uff0cc)#=4*7=28\u6e10\u53d8=get_gradients(D)print(&#39\uff1bd.value=&#39\uff1b\uff0cd..\u3002\u503c)\u6253\u5370(&#34\uff1bd\u5173\u4e8ea\u7684\u504f\u5bfc\u6570=&#34\uff1b\uff0c\u68af\u5ea6[a])\n\u7c7b\u64cd\u4f5c\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u5141\u8bb8\u4f7f\u7528+\u3001*\u3001-\u7b49\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__add__(self\uff0cther)\uff1areturn add(self\uff0cOther)def__mul__(self\uff0cther)\uff1areturn MUL(self\uff0cOther)def__sub__(self\uff0cOther)\uff1areturn add(self\uff0cNeg(Other))def__truediv__(self\uff0cOther)\uff1areturn Mul(self\uff0cInv(Other))class Var(Ops)\uff1adef__init_(self\uff0cvalue)\uff1aself\u3002value=\u503c\u7c7b\u6dfb\u52a0(\u64cd\u4f5c)\uff1adef__init__(self\uff0ca\uff0cb)\uff1aself\u3002\u503c=a\u3002\u503c+b\u3002\u91cd\u89c6\u81ea\u6211\u3002grad=[(a\uff0c1)\uff0c(b\uff0c1)]class mul(Ops)\uff1adef__init__(self\uff0ca\uff0cb)\uff1aself\u3002\u503c=a\u3002\u503c*b\u3002\u91cd\u89c6\u81ea\u6211\u3002\u68af\u5ea6=[(a\uff0cb.\u3002\u503c)\u3001(b\uff0ca\u3002value)]class neg(\u8fd0\u7b97)\uff1adef__init__(self\uff0cvar)\uff1aself\u3002\u503c=-1*var\u3002\u91cd\u89c6\u81ea\u6211\u3002grad=[(var\uff0c-1)]\u7c7b\u5b58\u8d27(\u64cd\u4f5c)\uff1adef__init__(self\uff0cvar)\uff1aself\u3002\u503c=1/var\u3002\u91cd\u89c6\u81ea\u6211\u3002grad=[(var\uff0c-var.\u3002\u503c**-2)]\u3002\n\u6211\u4eec\u53ef\u4ee5\u4ece\u6211\u4eec\u6dfb\u52a0\u5230\u6846\u67b6\u4e2d\u7684\u51fd\u6570\u4e2d\u83b7\u5f97\u4efb\u610f\u51fd\u6570\u7684\u68af\u5ea6\u3002\u4f8b\u5982\uff1a\na=Var(230.3)b=Var(33.2)def(a\uff0cb)\uff1areturn(a/b-a)*(b/a+a+b)*(a-b)y=f(a\uff0cb)\u68af\u5ea6=\u83b7\u53d6\u68af\u5ea6(Y)print(&#34\uff1by\u5173\u4e8ea\u7684\u504f\u5bfc\u6570=&#34\uff1b\uff0c\u68af\u5ea6[a])print(&#34\uff1by\u5173\u4e8eb\u7684\u504f\u5bfc\u6570=&#34\uff1b\uff0c\u6e10\u53d8[b])\u3002\ny\u5bf9a\u7684\u504f\u5bfc\u6570=-153284.83150602411 y\u5bf9b\u7684\u504f\u5bfc\u6570=3815.0389441500993\u3002\n\u0394=Var(1e-8)Numerical_grad_a=(f(a+\u03b4\uff0cb)-f(a\uff0cb))/Delta Numerical_grad_b=(f(a\uff0cb+Delta)-f(a\uff0cb))/Delta Print(&#34\uff1ba=#34\uff1b\uff0cNumerical_grad_a\u7684\u6570\u503c\u4f30\u8ba1\u3002value)\u6253\u5370(&#34\uff1bb=&#34\uff1b\uff0cNumerical_grad_b.\u3002\u503c)\u3002\n\u5c06numpy\u5bfc\u5165\u4e3aNP\u7c7bSin(Ops)\uff1adef__init__(self\uff0cvar)\uff1aself\u3002\u503c=NP\u3002Sin(var.\u3002\u503c)\u81ea\u6211\u3002\u68af\u5ea6=[(var\uff0cnp\u3002Cos(var.\u3002value))]class Exp(Ops)\uff1adef__init__(self\uff0cvar)\uff1aself\u3002\u503c=NP\u3002EXP(\u53d8\u91cf\u3002\u503c)\u81ea\u6211\u3002grad=[(var\uff0csel.\u3002value)]\u7c7b\u65e5\u5fd7(Ops)\uff1adef__init__(self\uff0cvar)\uff1aself\u3002\u503c=NP\u3002LOG(\u53d8\u91cf\u3002\u503c)\u81ea\u6211\u3002grad=[(var\uff0c1./var.\u3002\u503c)]\u3002\nA=Var(43.\u3002)\u3002B=Var(3.)\u3002C=Var(2.)\u3002def(a\uff0cb\uff0cc)\uff1aF=Sin(a*b)+Exp(c-(a/b))\u8fd4\u56deLog(f*f)*Cy=f(a\uff0cb\uff0cc)\u68af\u5ea6=get_gradients(Y)print(&#34\uff1by\u5173\u4e8ea\u7684\u504f\u5bfc\u6570=&#34\uff1b\uff0c\u68af\u5ea6[a])print(&#34\uff1by\u5173\u4e8eb\u7684\u504f\u5bfc\u6570=&#34\uff1b\uff0c\u6e10\u53d8[b])\u6253\u5370(&#34\uff1by\u5173\u4e8ec\u7684\u504f\u5bfc\u6570=&#34\uff1b\uff0c\u6e10\u53d8[c])\u3002\ny\u5bf9a\u7684\u504f\u5bfc\u6570=60.85353612046653 y\u5bf9b\u7684\u504f\u5bfc\u6570=872.2331479536114 y\u5bf9c\u7684\u504f\u5bfc\u6570=-3.2853671032530305\nDelta=Var(1e-8)Numerical_grad_a=(f(a+Delta\uff0cb\uff0cc)-f(a\uff0cb\uff0cc))/Delta Numerical_grad_b=(f(a\uff0cb+Delta\uff0cc)-f(a\uff0cb\uff0cc))/Delta Numerical_grad_c=(f(a\uff0cb\uff0cc+Delta)-f(a\uff0cb\uff0cc))/Delta print(&#34\uff1ba=#34\uff1b\uff0cNumerical_grad_a\u7684\u6570\u503c\u4f30\u8ba1\u3002value)\u6253\u5370(&#34\uff1bb=&#34\uff1b\uff0cNumerical_grad_b.\u3002value)\u6253\u5370(&#34\uff1bc=&#34\uff1b\uff0cNumerical_grad_c\u7684\u6570\u503c\u4f30\u8ba1\u3002\u503c)\u3002\na=60.85352186602222\u7684\u6570\u503c\u4f30\u8ba1b=872.232160009645 c=-3.285367089489455\u7684\u6570\u503c\u4f30\u8ba1\u3002\n\u5bf9\u6211\u4eec\u7684\u6700\u5c0f\u6846\u67b6\u6700\u6709\u6548\u7684\u8865\u5145\u5c06\u662f\u5411\u91cf\u5316(\u4f46\u4e0d\u662f\u4ee5\u4e0b\u9762\u7684\u65b9\u5f0f\u6267\u884c)\u3002\n\u6211\u4eec\u5c06\u7814\u7a76\u4e00\u79cd\u8ba1\u7b97\u6548\u7387\u6781\u4f4e\u7684\u65b9\u6cd5\u6765\u5411\u91cf\u5316\u6211\u4eec\u7684autodiff\u6846\u67b6\u3002(\u4e0d\u63a8\u8350\u5c06\u5176\u7528\u4e8e\u4efb\u4f55\u4e8b\u60c5\uff0c\u56e0\u4e3a\u5b83\u592a\u6162\u4e86\u3002)\u3002\n\u5c06numpy\u5bfc\u5165\u4e3anp to_var=np\u3002Vector torize(lambda x\uff1avar(X))#\u5c06NumPy\u6570\u7ec4\u8f6c\u6362\u4e3aVar\u5bf9\u8c61\u6570\u7ec4TO_VERVIES=NP\u3002\u77e2\u91cf\u5316(\u03bb\u53d8\u91cf\uff1a\u53d8\u91cf\u3002value)#\u4eceVar\u5bf9\u8c61\u6570\u7ec4\u4e2d\u83b7\u53d6\u503c\u3002\n\u5c06matplotlib.pylot\u5bfc\u5165\u4e3aPLT def update_weights(\u6743\u91cd\u3001\u6e10\u53d8\u3001\u901f\u7387)\uff1a\u5bf9\u4e8e\u8303\u56f4\u5185\u7684i(\u6743\u91cd\u3002Shape[0])\uff1a\u5bf9\u4e8e\u8303\u56f4\u5185\u7684j(\u6743\u91cd\u3002Shape[1])\uff1a\u6743\u91cd[i\uff0cj]\u3002value-=lrate*\u68af\u5ea6[\u6743\u91cd[i\uff0cj]]np\u3002\u968f\u673a\u7684\u3002SEED(0)INPUT_SIZE=50 OUTPUT_SIZE=10 LARATE=0.001 x=TO_VAR(NP\u3002\u968f\u673a\u7684\u3002RANDOM(INPUT_SIZE))y_TRUE=to_var(np.\u3002\u968f\u673a\u7684\u3002\u968f\u673a(Output_Size))\u6743\u91cd=to_var(np.\u3002\u968f\u673a\u7684\u3002\u968f\u673a((INPUT_SIZE\uff0cOUTPUT_SIZE))\uff0c\u5bf9\u4e8e\u8303\u56f4(100)\u5185\u7684i\uff0cLASS_VALUES=[]\uff1aY_PRED=Np\u3002\u70b9(x\uff0c\u91cd\u91cf)\u635f\u5931=Np\u3002SUM((y_true-y_pred)*(y_true-y_pred))LOSS_VALUES\u3002\u8ffd\u52a0(\u635f\u5931\u3002\u503c)\u6e10\u53d8=get_gradients(\u635f\u8017)update_weights(\u6743\u91cd\u3001\u6e10\u53d8\u3001\u901f\u7387)PLT\u3002\u7ed8\u5236(\u4e8f\u635f)PLT\u3002xlabel(&#34\uff1b\u65f6\u95f4\u70b9&#34\uff1b)\uff1bPLT\u3002ylabel(&#34\uff1b\u4e8f\u635f&34\uff1b)\uff1bPLT\u3002\u6807\u9898(#34\uff1b\u5355\u7ebf\u6027\u5c42\u5b66\u4e60)PLT\u3002show()\u3002\n\u9a6c\u4e0a\u5c31\u8981\u6765\u4e86\uff1a\u7b2c\u4e8c\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u5982\u4f55\u66f4\u9ad8\u6548\u5730\u5411\u91cf\u5316\u6211\u4eec\u7684\u6700\u5c0f\u6846\u67b6\u3002\n\u4efd\u989d\uff1a", "note_en": "Automatic differentiation is the foundation upon which deep learning frameworks lie. Deep learning models are typically trained using gradient based techniques, and autodiff makes it easy to get gradients, even from enormous, complex models. \u2018Reverse-mode autodiff\u2019 is the autodiff method used by most deep learning frameworks, due to its efficiency and accuracy.\n   The small autodiff framework will deal with scalars. We can (and will later) use NumPy to vectorise it.\n Note on terminology: from now on \u2018autodiff\u2019 will refer to \u2018reverse-mode autodiff\u2019. \u2018Gradient\u2019 is used loosely, but in this context generally means \u2018first order partial derivative\u2019.\n   a  =  4 b  =  3 c  =  a  +  b  # = 4 + 3 = 7 d  =  a  *  c  # = 4 * 7 = 28\n Q1: What is the gradient of $d$ with respect to $a$, i.e. $\\frac{\\partial{d}}{\\partial{a}}$? (Go ahead and try this!)\n  There\u2019s many ways to solve  Q1, but let\u2019s use the product rule, i.e. if $ y = x_1x_2 $ then $y\u2019 = x_1\u2019x_2 + x_1x_2\u2019$.\n Phew\u2026 and if you wanted to know $\\frac{\\partial{d}}{\\partial{b}}$ you\u2019d have to carry out the process again.\n  We\u2019ll now look at the autodiff way to solve  Q1. Here is a figure:\n  On the left we see the system represented as a graph. Each variable is a node; e.g. $d$ is the topmost node, and $a$ and $b$ are leaf nodes at the bottom.\n On the right we see the system from autodiff\u2019s point of view. Let\u2019s call the values on the graph edges  local derivatives. By using local derivatives and simple rules, we will be able to compute the derivatives that we want.\n Here is the answer to  Q1, calculated the autodiff way. Can you see how it relates to the figure?\n We get this answer from the graph by finding the routes from $d$ to $a$ (not going against the dotted arrows), and then applying the following rules:\n  The first route is straight from $d$ to $a$, which gives us the $\\frac{\\partial{\\bar{d}}}{\\partial{a}}$ term. The second route is from $d$ to $c$ to $a$, which gives us the term $\\frac{\\partial{\\bar{d}}}{\\partial{c}} * \\frac{\\partial{\\bar{c}}}{\\partial{a}}$.\n Our autodiff implementation will go down the graph and compute the derivative of $d$ with respect to every sub-node, rather than just computing it for a particular node, as we have just done with $d$. Notice that we could compute the gradient of $d$ with respect to $c$, and $b$, without much more work.\n  We saw \u2018local derivatives\u2019 on the graph edges above, written in the form: $ \\frac{\\partial \\bar{y} }{\\partial x}$.\n  In general: to get a local derivative, treat the variables going into a node as not being functions of other variables.\n For example, recall that $d = a * c$. Then compare $ \\frac{\\partial{d}}{\\partial{a}} = 2a + b $, to $ \\frac{\\partial \\bar{d} }{\\partial a} = c $. The local derivative $\\frac{\\partial \\bar{d} }{\\partial a} = c$, is obtained by treating $c$ as a constant before differentiating the expression for $d$.\n  It is often easy to define the local derivatives of simple functions, and adding functions to the autodiff framework is easy if you know the local derivatives. E.g.\n Addition: $n = a + b$.The local derivatives are: $\\frac{\\partial \\bar{n} }{\\partial a} = 1$ and $\\frac{\\partial \\bar{n} }{\\partial b} = 1$.\n Multiplication: $n = a * b$.The local derivatives are: $\\frac{\\partial \\bar{n} }{\\partial a} = b$ and $\\frac{\\partial \\bar{n} }{\\partial b} = a$.\n     The function  get_gradients uses the nodes\u2019  grad data to go through the graph recursively, computing the gradients. It uses the rules we saw above:\n  The tuples in  stack (in  get_gradients) are similar to the tuples in  grad, but they contain the current route value, instead of the local derivative value.\n  from  collections  import  defaultdict class  Var :  &#34;&#34;&#34;A leaf node (a node with no children).&#34;&#34;&#34;  def  __init__ ( self ,  value ):  self . value  =  value  # the scalar value of the node. class  Add :  &#34;&#34;&#34;The node that results from adding two nodes.&#34;&#34;&#34;  def  __init__ ( self ,  a ,  b ):  self . value  =  a . value  +  b . value  self . grad  =  [( a ,  1 ),  ( b ,  1 )]  # child nodes &amp; corresponding &#39;local derivatives&#39; class  Mul :  &#34;&#34;&#34;The node that results from multiplying two nodes.&#34;&#34;&#34;  def  __init__ ( self ,  a ,  b ):  self . value  =  a . value  *  b . value  self . grad  =  [( a ,  b . value ),  ( b ,  a . value )] def  get_gradients ( parent_node ):  &#34;&#34;&#34;Go down the graph, and compute derivative of `parent_node` with respect to each node.&#34;&#34;&#34;  gradients  =  defaultdict ( lambda  :  0 )  stack  =  parent_node . grad . copy ()  # list of (node, route_value) tuples.  while  stack :  node ,  route_value  =  stack . pop ()  gradients [ node ]  +=  route_value  # &#34;Add together the different routes.&#34;  if  not  isinstance ( node ,  Var ):  # if the node has children, put them onto the stack.  for  child_node ,  child_route_value  in  node . grad :  stack . append (( child_node ,  child_route_value  *  route_value ))  # &#34;Multiply the edges of a route.&#34;  return  dict ( gradients )\n  a  =  Var ( 4 ) b  =  Var ( 3 ) c  =  Add ( a ,  b )  # = 4 + 3 = 7 d  =  Mul ( a ,  c )  # = 4 * 7 = 28 gradients  =  get_gradients ( d ) print ( &#39;d.value =&#39; ,  d . value ) print ( &#34;The partial derivative of d with respect to a =&#34; ,  gradients [ a ])\n                  class  Ops :  &#34;&#34;&#34;Enables use of +, *, -, etc.&#34;&#34;&#34;  def  __add__ ( self ,  other ):  return  Add ( self ,  other )  def  __mul__ ( self ,  other ):  return  Mul ( self ,  other )  def  __sub__ ( self ,  other ):  return  Add ( self ,  Neg ( other ))  def  __truediv__ ( self ,  other ):  return  Mul ( self ,  Inv ( other )) class  Var ( Ops ):  def  __init__ ( self ,  value ):  self . value  =  value  class  Add ( Ops ):  def  __init__ ( self ,  a ,  b ):  self . value  =  a . value  +  b . value  self . grad  =  [( a ,  1 ),  ( b ,  1 )] class  Mul ( Ops ):  def  __init__ ( self ,  a ,  b ):  self . value  =  a . value  *  b . value  self . grad  =  [( a ,  b . value ),  ( b ,  a . value )]  class  Neg ( Ops ):  def  __init__ ( self ,  var ):  self . value  =  - 1  *  var . value  self . grad  =  [( var ,  - 1 )] class  Inv ( Ops ):  def  __init__ ( self ,  var ):  self . value  =  1  /  var . value  self . grad  =  [( var ,  - var . value  **  - 2  )]\n  We can get the gradients of arbitrary functions made from the functions we\u2019ve added to the framework. E.g.\n a  =  Var ( 230.3 ) b  =  Var ( 33.2 ) def  f ( a ,  b ):  return  ( a  /  b  -  a )  *  ( b  /  a  +  a  +  b )  *  ( a  -  b ) y  =  f ( a ,  b ) gradients  =  get_gradients ( y ) print ( &#34;The partial derivative of y with respect to a =&#34; ,  gradients [ a ]) print ( &#34;The partial derivative of y with respect to b =&#34; ,  gradients [ b ])\n The partial derivative of y with respect to a = -153284.83150602411The partial derivative of y with respect to b = 3815.0389441500993\n  delta  =  Var ( 1e-8 ) numerical_grad_a  =  ( f ( a  +  delta ,  b )  -  f ( a ,  b ))  /  delta numerical_grad_b  =  ( f ( a ,  b  +  delta )  -  f ( a ,  b ))  /  delta print ( &#34;The numerical estimate for a =&#34; ,  numerical_grad_a . value ) print ( &#34;The numerical estimate for b =&#34; ,  numerical_grad_b . value )\n    import  numpy  as  np class  Sin ( Ops ):  def  __init__ ( self ,  var ):  self . value  =  np . sin ( var . value )  self . grad  =  [( var ,  np . cos ( var . value ))] class  Exp ( Ops ):  def  __init__ ( self ,  var ):  self . value  =  np . exp ( var . value )  self . grad  =  [( var ,  self . value )]  class  Log ( Ops ):  def  __init__ ( self ,  var ):  self . value  =  np . log ( var . value )  self . grad  =  [( var ,  1.  /  var . value )]\n  a  =  Var ( 43. ) b  =  Var ( 3. ) c  =  Var ( 2. ) def  f ( a ,  b ,  c ):  f  =  Sin ( a  *  b )  +  Exp ( c  -  ( a  /  b ))  return  Log ( f  *  f )  *  c y  =  f ( a ,  b ,  c ) gradients  =  get_gradients ( y ) print ( &#34;The partial derivative of y with respect to a =&#34; ,  gradients [ a ]) print ( &#34;The partial derivative of y with respect to b =&#34; ,  gradients [ b ]) print ( &#34;The partial derivative of y with respect to c =&#34; ,  gradients [ c ])\n The partial derivative of y with respect to a = 60.85353612046653The partial derivative of y with respect to b = 872.2331479536114The partial derivative of y with respect to c = -3.2853671032530305\n delta  =  Var ( 1e-8 ) numerical_grad_a  =  ( f ( a  +  delta ,  b ,  c )  -  f ( a ,  b ,  c ))  /  delta numerical_grad_b  =  ( f ( a ,  b  +  delta ,  c )  -  f ( a ,  b ,  c ))  /  delta numerical_grad_c  =  ( f ( a ,  b ,  c  +  delta )  -  f ( a ,  b ,  c ))  /  delta print ( &#34;The numerical estimate for a =&#34; ,  numerical_grad_a . value ) print ( &#34;The numerical estimate for b =&#34; ,  numerical_grad_b . value ) print ( &#34;The numerical estimate for c =&#34; ,  numerical_grad_c . value )\n The numerical estimate for a = 60.85352186602222The numerical estimate for b = 872.232160009645The numerical estimate for c = -3.285367089489455\n    The most fruitful addition to our minimal framework would be vectorisation (but  not carried out in the manner that follows).\n   We will look at an incredibly computationally inefficient way to vectorise our autodiff framework.(It is not recommended to use this for anything, because of how slow it is.)\n   import  numpy  as  np to_var  =  np . vectorize ( lambda  x  :  Var ( x ))  # convert NumPy array into array of Var objects to_vals  =  np . vectorize ( lambda  var  :  var . value )  # get values from array of Var objects\n  import  matplotlib.pyplot  as  plt def  update_weights ( weights ,  gradients ,  lrate ):  for  i  in  range ( weights . shape [ 0 ]):  for  j  in  range ( weights . shape [ 1 ]):  weights [ i ,  j ]. value  -=  lrate  *  gradients [ weights [ i ,  j ]] np . random . seed ( 0 ) input_size  =  50 output_size  =  10 lrate  =  0.001 x  =  to_var ( np . random . random ( input_size )) y_true  =  to_var ( np . random . random ( output_size )) weights  =  to_var ( np . random . random (( input_size ,  output_size ))) loss_vals  =  [] for  i  in  range ( 100 ):  y_pred  =  np . dot ( x ,  weights )  loss  =  np . sum (( y_true  -  y_pred )  *  ( y_true  -  y_pred ))  loss_vals . append ( loss . value )  gradients  =  get_gradients ( loss )  update_weights ( weights ,  gradients ,  lrate )  plt . plot ( loss_vals ) plt . xlabel ( &#34;Time step&#34; );  plt . ylabel ( &#34;Loss&#34; );  plt . title ( &#34;Single linear layer learning&#34; ) plt . show ()\n  Coming soon: a part two, where we look at how to vectorize our minimal framework more efficiency.\nShare:", "posttime": "2020-06-15 02:35:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u53cd\u5411,reverse,var", "title": "\u4ece\u5934\u5f00\u59cb\uff1a\u53cd\u5411\u6a21\u5f0f\u81ea\u52a8\u533a\u5206(Python\u4e2d)", "title_en": "From scratch: reverse-mode automatic differentiation (in Python)", "transed": 1, "url": "https://sidsite.com/posts/autodiff/", "via": "", "real_tags": ["python", "\u53cd\u5411", "reverse", "var"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006550, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u9605\u8bfb\u4e86\u5927\u536b\u00b7M\u00b7\u5e03\u5c14\u66fc\u7684\u201c\u5806\u53e0\u8ba1\u7b97\u673a\u5165\u95e8\u201d(Introduction To Stack Computers)\u4e00\u4e66\u540e\uff0c\u6211\u89c9\u5f97\u6709\u5fc5\u8981\u5bf9\u90a3\u4e9b\u5bf9\u8be5\u7cfb\u7edf\u7684\u8bbe\u8ba1\u548c\u67b6\u6784\u505a\u51fa\u8d21\u732e\u7684\u4eba\u8fdb\u884c\u6f84\u6e05\uff0c\u8fd9\u672c\u4e66\u5bf9Burroughs B5000\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u4ecb\u7ecd\u3002\u4ece1959\u5e741\u6708\u52301961\u5e744\u6708\uff0c\u6211\u662fBurroughs Product Planning Group\u7684\u7ecf\u7406-\u7531\u5927\u7ea620\u540d\u4e13\u4e1a\u4eba\u5458\u7ec4\u6210\uff0c\u4f4d\u4e8e\u5e15\u8428\u8fea\u7eb3-\u8d1f\u8d23B200\u548cB5000\u7cfb\u7edf\u7684\u4f53\u7cfb\u7ed3\u6784\u8bbe\u8ba1\u548c\u6307\u5b9a\u3002\u5c3d\u7ba1\u8fd9\u4e2a\u56e2\u961f\u89c4\u6a21\u4e0d\u5927\uff0c\u4f46\u5b83\u62e5\u6709\u4e00\u6279\u975e\u51e1\u7684\u4eba\u624d\uff0c\u7279\u522b\u662f\u4fdd\u7f57\u00b7\u91d1(Paul King)(\u4e0e\u4e1a\u5185\u7684\u8ba1\u7b97\u673a\u4e13\u4e1a\u4eba\u58eb\u4e00\u6837\u624d\u534e\u6a2a\u6ea2)\u548c\u6770\u514b\u00b7\u9ed8\u7eb3(Jack Merner)(\u4e00\u4e2a\u6709\u70b9\u53e4\u602a\u4f46\u6781\u5177\u5929\u8d4b\u7684\u7a0b\u5e8f\u5458)\uff0c\u4ed6\u4eec\u90fd\u662f\u6211\u7684\u5458\u5de5\u3002\u6b64\u5916\uff0c\u5f53\u5510\u7eb3\u5fb7\u00b7\u52aa\u65af(Donald Knuth)\u9009\u62e9\u4ece\u52a0\u5dde\u7406\u5de5\u5927\u5b66(Cal Tech)\u83b7\u5f97\u535a\u58eb\u5b66\u4f4d\uff0c\u6234\u592b\u00b7\u8fbe\u59c6(Dave Dahm)\u4f5c\u4e3a\u517c\u804c\u5458\u5de5\u6216\u987e\u95ee\u65f6\uff0c\u6211\u4eec\u8058\u8bf7\u4e86\u4ed6\u4f5c\u4e3a\u987e\u95ee\u3002\u9c8d\u52c3\u00b7\u4f2f\u987f(Bob Burton)\u5df2\u7ecf\u5728\u4e3aBurroughs\u5de5\u4f5c\uff0c\u62c5\u4efb\u4e00\u9879\u8f6f\u4ef6\u6d3b\u52a8\u7684\u7ecf\u7406\u3002\u5927\u7ea6\u662f\u5728\u6211\u63a5\u624b\u4ea7\u54c1\u8ba1\u5212\u7ec4\u7684\u65f6\u5019\u3002\u9c8d\u52c3\u4ece\u4e00\u540d\u5458\u5de5\u53d8\u6210\u4e86\u4e00\u540d\u987e\u95ee-\u6211\u8ba4\u4e3a\u8fd9\u79cd\u5173\u7cfb\u66f4\u9002\u5408\u4ed6\u7684\u6027\u683c\u548c\u5de5\u4f5c\u98ce\u683c-\u5e76\u6210\u4e3a\u6211\u4eec\u96c6\u56e2\u7684\u4e00\u540d\u987e\u95ee\u3002\u4fdd\u7f57\u00b7\u91d1\u662f\u4ea7\u54c1\u89c4\u5212\u90e8\u95e8B5000\u9879\u76ee\u7684\u7ecf\u7406\uff0c\u5982\u679c\u8be5\u7cfb\u7edf\u7684\u67b6\u6784\u53ef\u4ee5\u8bf4\u5728\u4efb\u4f55\u4e00\u4e2a\u5730\u65b9\u90fd\u5f97\u5230\u4e86\u53d1\u5c55\u548c\u6210\u719f\uff0c\u90a3\u5b83\u4e00\u5b9a\u662f\u4fdd\u7f57\u00b7\u91d1\u7684\u9ed1\u677f\u3002\u9664\u4e86\u5bf9\u7cfb\u7edf\u505a\u51fa\u91cd\u5927\u8d21\u732e-\u5176\u4e2d\u4e00\u4e9b\u5c06\u5728\u4e0b\u9762\u63cf\u8ff0-\u4fdd\u7f57\u8fd8\u5bf9\u9c8d\u52c3\u00b7\u5df4\u987f\u7684\u60f3\u6cd5\u63d0\u4f9b\u4e86\u5fc5\u8981\u7684\u3001\u4f46\u4e0d\u53d7\u6b22\u8fce\u7684\u8fc7\u6ee4\u529f\u80fd\u3002\u5c31\u50cf\u8bb8\u591a\u6781\u5177\u521b\u9020\u529b\u7684\u4eba\u4e00\u6837\u3002\u9c8d\u52c3\u6709\u4e00\u4e9b\u975e\u5e38\u597d\u7684\u60f3\u6cd5\uff0c\u4e5f\u6709\u4e00\u4e9b\u4e0d\u592a\u597d\u7684\u60f3\u6cd5\u3002\u8bc0\u7a8d\u662f\u4f7f\u7528\u524d\u8005\uff0c\u62d2\u7edd\u540e\u8005\u3002\u5728B5000\u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\uff0c\u9c8d\u52c3\u7684\u4e00\u4e9b\u60f3\u6cd5\u51fa\u73b0\u5728\u4fdd\u7f57\u7684\u9ed1\u677f\u4e0a\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u6ca1\u6709\u3002\u4ee5\u4e0b\u662fB5000\u4e2d\u7684\u4e00\u4e9b\u4e3b\u8981\u521b\u65b0(\u81f3\u5c11\u662f\u7f8e\u56fd\u7684\u521b\u65b0)\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u6765\u6e90\u548c\u4e3b\u8981\u8d1f\u8d23\u4eba\uff1a\u865a\u62df\u5185\u5b58\uff1a1960\u5e745\u6708\uff0c\u52a0\u5dde\u5927\u5b66\u6d1b\u6749\u77f6\u5206\u6821(UCLA)\u4e3e\u529e\u4e86\u4e00\u573a\u4e3a\u671f\u4e24\u5468\u7684\u7814\u8ba8\u4f1a\uff0c\u9898\u4e3a\u4f7f\u7528\u548c\u5229\u7528\u5de8\u578b\u8ba1\u7b97\u673a\u3002\u8be5\u8ba1\u5212\u6db5\u76d6\u4e86IBM Stretch\u8ba1\u7b97\u673a\u3001Univac LARC\u3001Ferranti ATLAS 1\u548cOrion\u8ba1\u7b97\u673a\u3001\u672c\u8fea\u514b\u65afG-20\u8ba1\u7b97\u673a\u548c\u5176\u4ed6\u51e0\u53f0\u8ba1\u7b97\u673a\u3002\u4e0e\u4f1a\u8005\u540d\u5355\u663e\u793a\uff0c\u670914\u4eba\u6765\u81eaIBM\uff0c7\u4eba\u6765\u81eaUnivac\u3002\u6211\u4eec\u6d3e\u6765\u4e86\u4fdd\u7f57\u00b7\u91d1\u548c\u4e24\u540d\u6765\u81ea\u4f2f\u7f57\u65af\u7684\u8bbe\u8ba1\u5de5\u7a0b\u5e08\u3002\u4fdd\u7f57\u548c\u6211\u7ecf\u5e38\u82e5\u6709\u6240\u601d\u5730\u8bf4\uff0cIBM\u768414\u4e2a\u4eba\u663e\u7136\u662f\u5982\u6b64\u6c89\u8ff7\u4e8e\u4f38\u5c55\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u6ca1\u6709\u9886\u4f1a\u5df2\u6545\u7684\u65af\u5766\u00b7\u5409\u5c14(Stan Gill)\u5173\u4e8eATLAS I\u865a\u62df\u5185\u5b58\u7ec4\u7ec7\u7684\u8a00\u8bba\u7684\u610f\u4e49\u3002\u4fdd\u7f57\u00b7\u91d1\u786e\u5b9e\u7406\u89e3\u5b83\u7684\u91cd\u8981\u6027\uff0c\u5e76\u5bf9\u8fd9\u4e2a\u6982\u5ff5\u975e\u5e38\u5174\u594b\u5730\u56de\u5230\u4e86\u5e15\u8428\u8fea\u7eb3\u3002\u5728\u7ecf\u8fc7\u76f8\u5bf9\u77ed\u6682\u7684\u56de\u987e\u548c\u8ba8\u8bba\u4e4b\u540e\uff0c\u5982\u4f55\u624d\u662f\u6700\u597d\u7684\u3002\u4e3a\u4e86\u5408\u5e76\u5b83\uff0c\u5728B5000\u7cfb\u7edf\u4e2d\u5b9a\u4e49\u4e86\u5206\u6bb5\u865a\u62df\u5185\u5b58(\u5728\u4ea7\u54c1\u8ba1\u5212\u4e2d\uff0c\u5b83\u5f53\u65f6\u7684\u9879\u76ee\u540d\u79f0\u662f4000\u7cfb\u7edf)\u3002\u5728\u7f8e\u56fd\u673a\u5668\u4e0a\u9996\u6b21\u4f7f\u7528\u865a\u62df\u5185\u5b58\u663e\u7136\u8981\u5f52\u529f\u4e8e\u4fdd\u7f57\u00b7\u91d1\uff0c\u800c\u4e0d\u662f\u9c8d\u52c3\u00b7\u5df4\u987f\u3002(\u5728\u8fd9\u4e00\u70b9\u4e0a\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u865a\u62df\u673a\u7684\u6982\u5ff5\u5df2\u7ecf\u6210\u4e3aBurroughs Pasadena\u8bbe\u65bd\u7684\u4e00\u4e2a\u70ed\u95e8\u8bdd\u9898\u3002\u6211\u76f8\u4fe1\u8fd9\u4e2a\u6982\u5ff5\u8d77\u6e90\u4e8e\u6cf0\u5fb7\u00b7\u683c\u62c9\u6cfd\uff0c\u65e9\u57281950\u5e74\u4ee3\uff0c\u6cf0\u5fb7\u5c31\u5728\u5e15\u8428\u8fea\u7eb3\u5de5\u7a0b\u5c0f\u7ec4\u5de5\u4f5c\uff0c\u4ece1956\u5e74\u52301959\u5e74\u4e2d\u671f\u3002)B5000\u7684\u5176\u4ed6\u51e0\u4e2a\u8bbe\u8ba1\u7279\u70b9\u53ef\u4ee5\u8ffd\u6eaf\u52301960\u5e745\u6708\u52a0\u5dde\u5927\u5b66\u6d1b\u6749\u77f6\u5206\u6821\u7684\u7814\u8ba8\u4f1a\u3002\u72ec\u7acb\u7684\u3001\u6a21\u5757\u5316\u7684\u8f93\u5165\u8f93\u51fa\u63a7\u5236\u5668\u7684\u60f3\u6cd5\u53ef\u4ee5\u8ffd\u6eaf\u5230LARC\uff0c\u800c\u5355\u4e00\u6570\u5b57\u5f62\u5f0f\u53ef\u4ee5\u8ffd\u6eaf\u5230G-20\u3002\u6ce2\u5170\u8bed\u8868\u793a\u6cd5\uff1a\u6beb\u65e0\u7591\u95ee\uff0c\u751f\u4ea7\u4e00\u53f0\u76f4\u63a5\u5728\u6ce2\u5170\u8bed\u5b57\u7b26\u4e32\u4e0a\u64cd\u4f5c\u5e76\u4f7f\u7528\u4e0b\u63a8\u64cd\u4f5c\u7b26/\u64cd\u4f5c\u6570\u5806\u6808\u7684\u673a\u5668\u7684\u6982\u5ff5\u662f\u7531Bob Barton\u63d0\u51fa\u7684\uff0c\u4e0a\u4e0b\u6587\u5bfb\u5740\u7684\u6982\u5ff5\u4e5f\u662f\u5982\u6b64\u3002\u57fa\u4e8eALGOL\u7684\u8bbe\u8ba1\uff1a\u8bbe\u8ba1\u7cfb\u7edf\u4ee5\u9ad8\u6548\u5904\u7406\u7ed9\u5b9a\u8bed\u8a00ALGOL\u7684\u6982\u5ff5\u662fBob Burton\u63d0\u51fa\u7684\u3002\u7136\u800c\uff0cJack Merner\u662f\u6211\u4eec\u7684\u5e38\u9a7b\u8bed\u8a00\u4e13\u5bb6\uff0c\u4ed6\u8d21\u732e\u4e86\u5b9e\u73b0\u8fd9\u4e00\u6982\u5ff5\u7684\u5927\u90e8\u5206\u8bbe\u8ba1\u60f3\u6cd5\u3002\u5f53\u7136\uff0cDonald Knuth\u5728\u8fd9\u4e00\u9886\u57df\u8fdb\u884c\u4e86\u54a8\u8be2\u3002\u7a0b\u5e8f\u63a7\u5236\uff1a\u4fdd\u7f57\u00b7\u91d1\u770b\u5230\u4e86\u6155\u5c3c\u9ed1\u5927\u5b66\u5236\u9020\u7684\u5371\u9669\u8ba1\u7b97\u673a\u7684\u63cf\u8ff0\u3002\u5b83\u6709\u4e00\u79cd\u9ad8\u5ea6\u590d\u6742\u7684\u5b50\u4f8b\u7a0b\u63a7\u5236\u65b9\u6cd5\uff0c\u5305\u62ec\u5141\u8bb8\u9012\u5f52\u4f7f\u7528\u5b83\u4eec\u3002Paul\u5728B5000\u4e2d\u52a0\u5165\u4e86\u8be5\u601d\u60f3\u7684\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u7248\u672c\uff0c\u5b83\u6210\u4e3a\u4e86\u8fc7\u7a0b\u63a7\u5236\u6808(Procedure Control Stack)\u3002\u968f\u540e\uff0cJack Merrier\u5efa\u8bae\u5c06\u4e0a\u8ff0\u4e24\u4e2a\u5806\u6808\u5408\u5e76\u4e3a\u4e00\u4e2a\u5806\u6808\u6982\u5ff5\uff0c\u5e76\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002\u4eba\u7269\u64cd\u7eb5\uff1a\u5728B5000\u9879\u76ee(1959\u5e74)\u4e4b\u524d\uff0c\u5e15\u8428\u8fea\u7eb3\u6709\u4e00\u4e2a2111\u4e2a\u8ba1\u7b97\u673a\u8bbe\u8ba1\u9879\u76ee\u3002\u5728\u6cf0\u5fb7\u00b7\u683c\u62c9\u6cfd\u7684\u67b6\u6784\u5e08\u9886\u5bfc\u4e0b\uff0c211", "note_en": "After reading David M. Bulman&#39;s introduction to stack computers, \rwhich dwelt heavily on the Burroughs B5000, I feel compelled to write to set \rthe record straight concerning those who contributed to the design and \rarchitecture of that system.\r From January I959 to April 1961 I was the manager of the Burroughs \rProduct Planning Group - consisting of approximately 20 professionals \rand located in Pasadena - that did the architecture of and specified the \rB200 and B5000 systems. Although the group was small in size, it had \ran extraordinary array of talent, including especially Paul King (as \rbroadly talented a computer professional as there is in the business) \rand Jack Merner (a somewhat eccentric but exceptionally gifted \rprogrammer), both of whom were on my staff. \r In addition, we had Donald Knuth as a consultant when he elected \rto get his PhD from Cal Tech and Dave Dahm as a part-time employee \ror consultant. Bob Burton had already been working for Burroughs as the\t\rmanager of a software activity. About the time I took over responsibility \rfor the Product Planning Group. Bob converted from an employee to a \rconsultant-a relationship which I believe is better suited to his \rtemperament and working style - and became a consultant to our group.\r Paul King was the manager of the B5000 project within Product Planning and if the architecture of that \rsystem can be said to have evolved\t- and matured in any single place, it \rwould have to be Paul King&#39;s black-board. In addition to making major \rcontributions to the system - some of which are delineated below - Paul also\rprovided the necessary, but unpopular filter function on Bob Barton&#39;s \rideas. Like many highly creative people. Bob has some very good ideas \rand some not very good ideas. The trick is to use the former and reject the latter. During the design of the \rB5000 some of Bob&#39;s ideas made it across Paul&#39;s blackboard and some did not.\r Following are some of the major innovations (at least U.S. innovations) \rincorporated in the B5000, along with their source and the person or persons \rprimarily responsible for them:\r\r Virtual memory: In May 1960 UCLA conducted a two-week seminar \rentitled, &#34;Using and Exploiting Giant Computers.&#34; The program covered \rthe IBM STRETCH computer, the Univac LARC, the Ferranti ATLAS 1 \rand Orion computers, the Bendix G-20, and a few other machines. The \rlist of attendees shows that 14 people attended from IBM and seven from \rUnivac. We sent Paul King and two design engineers from Burroughs. \r Paul and I have often mused that the 14 people from IBM were apparently \rso wrapped up in STRETCH that they failed to rasp the significance \rof what the late Stan Gill was saying about the virtual memory organizations \rof the ATLAS I. Paul King did understand its significance and\rreturned to Pasadena greatly excited about the concept. After a relatively \rbrief period of review and discussion about how best. to incorporate it, a \rsegmented virtual memory was defined into the B5000 system \r(its project name in Product Planning at the time was the 4000 system). The credit \rfor this first use of a virtual memory in a U.S. machine clearly lies with \rPaul King, not Bob Barton.\r (It is worth noting at this point that the conceptual notion of a virtual \rmachine had by this time already been a topic of much discussion around \rthe Burroughs Pasadena facility. I believe the notion originated with Ted \rGlaser earlier in the I950&#39;s. Ted was in the Pasadena engineering group \rfrom I956 to mid-1959.)\r Several other B5000 design features can be traced to the May 1960 UCLA \rseminar. The idea of separate, modular input-output controllers can be \rtraced to the LARC and the single number form can be traced to the \rG-20.\r Polish notation: There is no question that the notion of producing a machine \rthat directly operated on Polish strings and that used push down\roperator/operand stacks was contributed by Bob Barton, as was the \rnotion of contextual addressing. \r Algol based design: The notion of designing the system to be efficient \rat handling a given language- Algol - was Bob Burton&#39;s. Jack Merner, \rhowever, was our resident expert on the language and contributed most of the \rdesign ideas that made possible the execution of the concept. Donald \rKnuth, of course, consulted in this area.\r\r Procedure control: Paul King came across a description of the PERIL \rcomputer built by the University of Munich. It had a highly sophisticated \rmethod of subroutine control, including allowing them to be used recursively. \rPaul incorporated a more generalized version of the idea in the \rB5000, and it became the procedure control stack. Subsequently, Jack \rMerrier suggested combining the two aforementioned stacks into a single \rstack concept, and this was done.\r Character manipulation: Prior to the B5000 project (1959) there had been\ra 2111 computer design project in Pasadena. Under Ted Glaser&#39;s architectoral leadership \rthe 211I was probably the most. sophisticated magnetostrictive delay line machine ever \rcontemplated. (The project was abandoned hate in 1959, primarily as \ra result of the I401 announcement in October of that year.) Paul King \rhad contributed the character string-manipulation capabilities to the 2111, \rand these were brought forward into the B5000. Several other B5000 innovators \rcan be traced to the 2111. Among these are the notion of organizing the system around an exchange\r(we borrowed the idea from the telephone system), the notion of floating \rinput-output channels, and the notion of ILO descriptors- (Contrary to David \rBulman&#39;s note, no mention of descriptors was made with the Atlas \rmachine.) It is difficult to attribute some of these ideas to any particular \rperson since they developed in a design discussion group that met weekly. \rThe group included Ted Glaser, Paul King, Don Stevens. myself, and a \rnumber of others.\r Multiprocessor systems: My own awareness of multiprocessor architecture\rcame from reading an article on another German machine, the E??56. \rWhether this led to the B5000 being a multiprocecessor system or whether \rthe idea came from work done on military computers at Burroughs in \rPaolii is hard to say. Certainly the Paoli group contributed the notion of \ra conflict-resolving, switching-interlock system.\r As can be seen from the above, the B5000 had a rich and varied \rancestry. It certainly affirms the notion that good system architecture \rincludes a lot of intelligent plagiarizing. The design of the B5000 system -\rlike the design of any computer system - involves a number of major \rarchitectural contributions and hundreds of less major, but nonetheless significant, design contributions, \rsometimes involving the use of a single bit. Unfortunately, space does \rnot permit mentioning all those who contributed or what they contributed. \r(I hereby ask some of my old friends to understand.)\r The purpose of this letter is not to minimize the contribution of Bob \rBarton to the B5000 or to computer architecture in general. Rather. it is to \rplace those contributions in perspective and to acknowledge that a number \rof other people - some not even mentioned in this letter - made significant \rcontributions to the B5000. The total contribution of Paul King, \rin particular, was probably at least equal to that of Bob Barton.\r\r Although the writer participated in many architectural and design sessions, \rhe makes no direct claim to any of the major innovations in the B5000.\rI do, however, claim that I played the primary role in persuading the \rthen pre-Ray MacDonald top management of Burroughs to proceed with \rand announce the system. Those were heady days in the computer field.\rIt&#39;s doubtful we will see their like again. I wonder if the top management \rof any computer company today, including Burroughs, could be \rpersuaded to proceed with a system which included as many radical \rdepartures from current design philosophy. The reward for Burroughs\rgamble was a system. in the form of the B5000;5500;5700, which stayed in \rmanufacturing for 10 years (probably the longest of any computer in the \rhistory of the field) and gave Burroughs a unique architectural-based \rposition in the industry.\r As a final point, it is worth noting that since my memory is no better \rthan most, I refreshed it by rereading a fair array of detailed design notes \rand\tmaterial that exists from the period under discussion.\r W. R. Lonergan \r Principal, Xerox\r Bulman replies   Editor,\r I am grateful for the additional information about the B5000 project \rcontributed by Mr. Lonergan. Before writing the survey. I talked with \r(among others) most of the people mentioned in his letter. When anyone \rwas mentioned as having contributed significantly to the B5000 architecture, \rI attempted to locate and telephone them. Quite a chain was followed in \rthis way. A significant fact which I should have thought to mention was \rthat W. R. Lonergan was the individual who originally &#34;sold&#34; the idea \rof building a stack machine to Burroughs corporate management.\r As a result, there is little substantial disagreement between my outline of \rthe project and Mr. Lonergan&#39;s letter. Much of the apparent disagreement \rlies in the distinction which should be made between computer architecture \rand product definition. There is little doubt that many people contributed \rheavily to the definition of the B5000 as a product, including many in the \rProduct Planning Group under Mr. Lonergan.\r It is interesting to note that, as early as the summer of 1958. while working \rat Shell Research, Barton brought forward the idea that main storage \rshould be allocated automatically by the hardware, rather than have the \rprogrammer concern himself with overlays from secondary memory. \rThis certainly adds plausibility to the statements of essentially everyone \relse on the project that Barton was responsible for its virtual memory.\r Another important idea of computer architecture is the use of the hardware \rstack for computational history (called procedure control in the letter). All\rthe people from the project I talked with attribute most of this to Barton, \rwith very significant contributions from Jack Merner. In addition to \rcombining the two stacks, the much more important method of handling \rparameters called by name was invented by Merner.\r I fervently agree with Mr. Lonergan that many other people contributed \rsignificantly to the success of the B5000 project. I only wish that I had \rbeen involved, so that I could share more deeply the amusement felt by \rthose on the project. as they watch the features of their circa 1961 \rcomputer gradually being introduced by the major computer vendors of 1977. \r David M. Bulman \r President, Pragmetics, Inc.\r\r Reprinted from the Communications OF THE Association FOR COMPUTING MACHINERY \rVolume 4, Number 9, September 1961\rMade in U.S.A.\r \tA Syntactical Chart of ALGOL 60\rWARREN TAYLOR, LLOYD TURNER, AND RICHARD WAYCHOFF \rBurroughs Corporation, Pasadena, California .\n  I don&#39;t know the copyright status of this document,", "posttime": "2020-06-15 02:34:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "b5000,\u8bbe\u8ba1", "title": "\u5173\u4e8eB5000\u548c\u5728\u90a3\u91cc\u7684\u4eba\u7684\u6545\u4e8b(1979)", "title_en": "Stories about the B5000 and people who were there (1979)", "transed": 1, "url": "http://ed-thelen.org/comp-hist/B5000-AlgolRWaychoff.html", "via": "", "real_tags": ["b5000", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "6333a5a0f6041334322200d5af28c5fd.png", "infoid": 1006549, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SIX\u9519\u8bef\uff1a1)\u9057\u6f0f\u4e86\u53e3\u7f69\u7684\u590d\u5408\u6548\u5e94\uff0c2)\u9057\u6f0f\u4e86\u611f\u67d3\u75c5\u6bd2\u7684\u6982\u7387\u7684\u975e\u7ebf\u6027\uff0c3)\u9057\u6f0f\u4e86\u7f3a\u5c11(\u6234\u53e3\u7f69\u7684\u76ca\u5904)\u8bc1\u636e\u7684\u8bc1\u636e(\u6234\u53e3\u7f69\u7684\u76ca\u5904)\uff0c4)\u9057\u6f0f\u4e86\u4eba\u4eec\u4e0d\u9700\u8981\u653f\u5e9c\u63d0\u4f9b\u9762\u90e8\u906e\u76d6\u7684\u89c2\u70b9\uff1a\u4ed6\u4eec\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c\uff0c5)\u9057\u6f0f\u4e86\u7edf\u8ba1\u4fe1\u53f7\u7684\u590d\u5408\u6548\u5e94\uff0c6)\u4f2a\u81ea\u7531\u4e3b\u4e49\u8005\u5ffd\u89c6\u4e86\u4e92\u4e0d\u4fb5\u72af\u539f\u5219(\u53e3\u7f69\u4e5f\u662f\u4e3a\u4e86\u4fdd\u62a4\u4ed6\u4eba\u514d\u53d7\u4f60\u7684\u4f24\u5bb3\uff1b\u8fd9\u662f\u4e00\u4e2a\u500d\u589e\u7684\u95ee\u9898\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u53e3\u7f69(\u548c\u9762\u7f69)\u52a0\u4e0a\u8d85\u7ea7\u4f20\u64ad\u8005\u4e8b\u4ef6\u7684\u7ea6\u675f\uff0c\u53ef\u4ee5\u5728\u672a\u6765\u7684\u5c01\u9501(\u548c\u8bc9\u8bbc)\u4e2d\u4e3a\u6211\u4eec\u8282\u7701\u6570\u4e07\u4ebf\u7f8e\u5143\uff0c\u5e76\u6709\u53ef\u80fd\u8db3\u4ee5(\u5728\u5145\u5206\u9075\u5b88\u7684\u60c5\u51b5\u4e0b)\u904f\u5236\u5927\u6d41\u884c\u3002\u5b98\u50da\u4eec\u4e0d\u559c\u6b22\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u64c5\u957f\u8003\u8bd5(\u6210\u4e3a\u5b98\u50da\u3001\u7ecf\u6d4e\u5b66\u5bb6\u6216\u9ed1\u5ba2)\u7684\u4eba\u4e0d\u5584\u4e8e\u7406\u89e3\u975e\u7ebf\u6027\u548c\u52a8\u529b\u5b66\u3002\n\u4e16\u536b\u7ec4\u7ec7\u3001\u75be\u63a7\u4e2d\u5fc3\u548c\u5176\u4ed6\u5b98\u50da\u673a\u6784\u6700\u521d\u672a\u80fd\u8fc5\u901f\u610f\u8bc6\u5230\u53e3\u7f69\u7684\u597d\u5904\uff0c\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u4eba\u6234\u7740\u53e3\u7f69\uff0c\u4f60\u5fc5\u987b\u89c2\u5bdf\u4e92\u52a8\u60c5\u51b5\u3002\n\u8ba9\u6211\u4eec\u5047\u8bbe(\u4e3a\u4e86\u7b80\u5316)\uff0c\u53e3\u7f69\u5c06\u4f20\u8f93\u548c\u63a5\u6536\u90fd\u51cf\u5c11\u5230p\u3002\u5bf9R0(\u5373\uff0c\u611f\u67d3\u7684\u4f20\u64ad\u7387)\u6709\u4ec0\u4e48\u5f71\u54cd\uff1f\n\u7b80\u5355\u5730\u8bf4\uff0c(\u75be\u63a7\u4e2d\u5fc3/\u4e16\u536b\u7ec4\u7ec7\u5b98\u50da\u548c\u5176\u4ed6\u7b28\u86cb\u4f7f\u7528\u7684)\u5929\u771f\u7684\u65b9\u6cd5\u662f\u8bf4\uff0c\u5982\u679c\u53e3\u7f69\u5c06\u4f20\u64ad\u6982\u7387\u964d\u4f4e\u52301/4\uff0c\u4eba\u4eec\u4f1a\u8ba4\u4e3a\u5b83\u4f1a\u4ece\u6bd4\u5982R0=5\u4e0b\u964d\u5230R0=1/4\u3002\u7389\u9601\uff0c\u4f46\u662f\u6709\u66f4\u597d\u7684\u3002\n\u56e0\u4e3a\u4e00\u4e2a\u4eba\u5e94\u8be5\u4e24\u8fb9\u90fd\u7b97\u3002\u5728\u6211\u4eec\u7684\u7b80\u5316\u4e0b\uff0c\u5f53p=1/4\u65f6\uff0c\u6211\u4eec\u5f97\u5230R0&=p\u00b2R0\u3002R\u4e0b\u964d\u4e8693.75%\uff01\u4f60\u628aR\u9664\u4ee516\uff01\u5373\u4f7f\u9762\u7f69\u5de5\u4f5c\u572850%\uff0c\u6211\u4eec\u7684R0\u4e5f\u4f1a\u4e0b\u964d75%\u3002\n\u9519\u8bef\u662f\u8ba4\u4e3a\uff0c\u5982\u679c\u6211\u5c06\u63a5\u89e6\u75c5\u6bd2\u7684\u673a\u4f1a\u51cf\u5c11\uff0c\u6bd4\u5982\u8bf4\uff0c1/2\uff0c\u90a3\u4e48\u6211\u5c31\u4f1a\u628a\u4ee5\u611f\u67d3\u6982\u7387\u8868\u793a\u7684\u98ce\u9669\u4e5f\u51cf\u5c111/2\u3002\u4e0d\u5b8c\u5168\u662f\u3002\n\u73b0\u5728\u8003\u8651(\u56fe1)\u6982\u7387\u5fc5\u987b\u9075\u5faa\u975e\u7ebf\u6027\u5242\u91cf\u54cd\u5e94\uff0c\u5373\u201cS\u66f2\u7ebf\u201d\u3002\u5728\u66f2\u7ebf\u7684\u51f8\u8d77\u90e8\u5206\uff0c\u589e\u76ca\u662f\u4e0d\u6210\u6bd4\u4f8b\u7684\uff1a\u51cf\u5c11x%\u7684\u75c5\u6bd2\u66b4\u9732\u4f1a\u5bfc\u81f4\u611f\u67d3\u98ce\u9669\u7684\u4e0b\u964d\u8fdc\u8fdc\u8d85\u8fc7x\u3002\u5f88\u660e\u663e\uff0c\u6211\u4eec\u5904\u5728\u66f2\u7ebf\u7684\u51f8\u8d77\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u77ed\u671f\u63a5\u89e6\u75c5\u6bd2\u8f7d\u91cf\u51cf\u5c1175%\u53ef\u4ee5\u964d\u4f4e95%\u6216\u66f4\u591a\u7684\u611f\u67d3\u51e0\u7387\uff01\n\u201c\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u53e3\u7f69\u6709\u6548\u201d\uff0c\u6211\u4e0d\u65ad\u542c\u5230\u90a3\u4e9b\u81ea\u79f0\u201c\u5faa\u8bc1\u201d\u79d1\u5b66\u5bb6\u7684\u767d\u75f4\u53cd\u590d\u5bf9\u6211\u8bf4\u3002\u95ee\u9898\u662f\uff0c\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u4eca\u665a\u9501\u95e8\u80fd\u9632\u6b62\u6211\u5165\u5ba4\u884c\u7a83\u3002\u4f46\u4e00\u5207\u53ef\u80fd\u963b\u788d\u4f20\u64ad\u7684\u4e1c\u897f\u90fd\u53ef\u80fd\u6709\u6240\u5e2e\u52a9\u3002\u4e0e\u5b66\u6821\u4e0d\u540c\uff0c\u73b0\u5b9e\u751f\u6d3b\u4e0d\u662f\u5173\u4e8e\u786e\u5b9a\u6027\u7684\u3002\u5f53\u6709\u7591\u95ee\u65f6\uff0c\u5c3d\u91cf\u4f7f\u7528\u4fdd\u62a4\u63aa\u65bd\u3002\u4e00\u4e9b\u4eba\u5f15\u7528\u4e86\u6709\u7f3a\u9677\u7684\u5408\u7406\u89e3\u91ca\uff0c\u5373\u6234\u9762\u5177\u4f1a\u5bfc\u81f4\u865a\u5047\u7684\u81ea\u4fe1\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4e00\u4e2a\u5f3a\u6709\u529b\u7684\u8bba\u70b9\u662f\uff0c\u6234\u9762\u5177\u4f1a\u8ba9\u4eba\u5bf9\u98ce\u9669\u66f4\u52a0\u8b66\u60d5\uff0c\u5728\u884c\u4e3a\u4e0a\u66f4\u52a0\u4fdd\u5b88\u3002\n\u5bb6\u957f\u5f0f\u7684\u5b98\u50da\u62d2\u7edd\u9080\u8bf7\u666e\u901a\u516c\u4f17\u4f7f\u7528\u53e3\u7f69\uff0c\u7406\u7531\u662f\u4f9b\u5e94\u6709\u9650\uff0c\u800c\u4e14\u5c06\u7531\u536b\u751f\u4e13\u4e1a\u4eba\u5458\u4f7f\u7528-\u56e0\u6b64\u4ed6\u4eec\u5bf9\u6211\u4eec\u6492\u8c0e\u8bf4\u201c\u53e3\u7f69\u65e0\u6548\u201d\u3002\u4ed6\u4eec\u6ca1\u6709\u90a3\u4e9b\u4e0d\u9700\u8981\u653f\u5e9c\u4e3a\u4ed6\u4eec\u751f\u4ea7\u53e3\u7f69\u7684\u4eba\u7684\u521b\u9020\u529b\u548c\u52e4\u594b\uff1a\u4ed6\u4eec\u53ef\u4ee5\u8fc5\u901f\u5c06\u4efb\u4f55\u4e1c\u897f\u8f6c\u5316\u4e3a\u529f\u80fd\u826f\u597d\u7684\u9762\u7f69\u9644\u4ef6\uff0c\u6bd4\u5982\u53ef\u4ee5\u7f1d\u5408\u5496\u5561\u6ee4\u6e05\u5668\u2026\u7684\u7834\u5e03\u3002\u5173\u4e8e\u4efb\u4f55\u4e8b\u3002\u5b98\u50da\u4eec\u4e5f\u6ca1\u6709\u6ce8\u610f\u5230\u5e02\u573a\u7684\u6982\u5ff5\u548c\u673a\u4f1a\u4e3b\u4e49\u8005\u7684\u5b58\u5728\uff0c\u8fd9\u4e9b\u673a\u4f1a\u4e3b\u4e49\u8005\u53ef\u4ee5\u4e3a\u4eba\u4eec\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u7684\u4e1c\u897f\u3002\n\u8bb8\u591a\u7814\u7a76\u7edf\u8ba1\u5b66\u7684\u4eba\u4e0d\u662f\u4ece\u4ed6\u4eec\u4e0d\u592a\u7406\u89e3\u7684\u673a\u68b0\u6982\u5ff5(\u6bd4\u5982\u76f8\u5173\u6027)\uff0c\u5c31\u662f\u4ece\u5c40\u90e8\u7ed3\u679c\u6765\u601d\u8003\uff1b\u4ed6\u4eec\u5bb3\u6015\u5448\u73b0\u201c\u8f76\u4e8b\u201d\uff0c\u4e5f\u4e0d\u80fd\u7406\u89e3\u7edf\u8ba1\u4fe1\u53f7\u7684\u66f4\u5e7f\u6cdb\u7684\u6982\u5ff5\uff0c\u5373\u4f60\u53ea\u770b\u6574\u4e2a\u6545\u4e8b\uff0c\u800c\u4e0d\u662f\u770b\u8eab\u4f53\u7684\u5404\u4e2a\u90e8\u4f4d\u3002\u5728\u8fd9\u91cc\uff0c\u518d\u4e00\u6b21\uff0c\u8bc1\u636e\u5316\u5408\u7269\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u6c99\u9f99\u7684\u6545\u4e8b\uff0c\u5176\u4e2d\u4e24\u4e2a\u53d7\u611f\u67d3\u7684\u9020\u578b\u5e08\u672a\u80fd\u611f\u67d3\u4ed6\u4eec\u6240\u6709\u7684140\u540d\u5ba2\u6237(\u5bf9\u4e8e\u6c99\u9f99\u5f0f\u7684\u66b4\u9732\uff0c\u53cc\u8fb9\u53e3\u7f69\u4f69\u6234\u7684\u611f\u67d3\u6982\u7387\u5b89\u5168\u5730\u4f4e\u4e8e1%)-\u6211\u4eec\u4ece\u6570\u4e07\u4e2a\u6570\u636e\u70b9\u548c\u5404\u79cdR0\u4f30\u8ba1\u77e5\u9053\u4e0d\u6234\u53e3\u7f69\u7684\u4eba\u611f\u67d3\u7684\u53ef\u80fd\u6027)\u52a0\u4e0ab)\u5f3a\u5236\u4f7f\u7528\u53e3\u7f69\u7684\u56fd\u5bb6\u7684\u611f\u67d3\u7387\uff0c\u52a0\u4e0ac)\u5927\u91cf\u65b9\u6cd5\u6216\u591a\u6216\u5c11\u6709\u7f3a\u9677\u7684\u8bba\u6587\uff0c\u7b49\u7b49\u3002\n\u201c\u81ea\u7531\u4e3b\u4e49\u8005\u201d(\u5728\u62ec\u53f7\u4e2d)\u62b5\u5236\u6234\u53e3\u7f69\uff0c\u7406\u7531\u662f\u5b83\u9650\u5236\u4e86\u4ed6\u4eec\u7684\u81ea\u7531\u3002\u7136\u800c\uff0c\u81ea\u7531\u7684\u6574\u4e2a\u6982\u5ff5\u5728\u4e8e\u4e92\u4e0d\u4fb5\u72af\u539f\u5219\uff0c\u76f8\u5f53\u4e8e\u94f6\u8272\u89c4\u5219\uff1a\u4e0d\u8981\u4f24\u5bb3\u522b\u4eba\uff1b\u53cd\u8fc7\u6765\uff0c\u4ed6\u4eec\u4e5f\u4e0d\u5e94\u8be5\u4f24\u5bb3\u4f60\u3002\u66f4\u4fae\u8fb1\u4eba\u7684\u662f\u4f2a\u81ea\u7531\u4e3b\u4e49\u8005\u7684\u8981\u6c42\uff0c\u5373Costco\u5e94\u8be5\u7981\u6b62\u5f3a\u8feb\u987e\u5ba2\u6234\u53e3\u7f69-\u4f46\u81ea\u7531\u4e3b\u4e49\u5141\u8bb8\u4f60\u4e3a\u81ea\u5df1\u7684\u8d22\u4ea7\u8bbe\u5b9a\u89c4\u5219\u3002\u5982\u679c\u6e38\u5ba2\u613f\u610f\uff0cCostco\u5e94\u8be5\u53ef\u4ee5\u5f3a\u8feb\u4ed6\u4eec\u7a7f\u7c89\u8272\u886c\u886b\u548c\u6234\u7d2b\u8272\u773c\u955c\u3002\n\u8bf7\u6ce8\u610f\uff0c\u901a\u8fc7\u611f\u67d3\u53e6\u4e00\u4e2a\u4eba\uff0c\u4f60\u4e0d\u53ea\u662f\u611f\u67d3\u4e86\u53e6\u4e00\u4e2a\u4eba\u3002\u4f60\u6b63\u5728\u611f\u67d3\u66f4\u591a\u7684\u4eba\uff0c\u5e76\u9020\u6210\u7cfb\u7edf\u6027\u98ce\u9669\u3002\n1-\u6211\u8d5e\u626c\u6781\u5c11\u6570\u50cfZeynep Tufekci\u8fd9\u6837\u5728\u5a92\u4f53\u4e0a\u4e3a\u6597\u4e89\u800c\u6218\u7684\u4f5c\u5bb6\u3002\n2-\u6211\u771f\u7684\u76f8\u4fe1\u4f2a\u81ea\u7531\u4e3b\u4e49\u8005\u662f\u53cd\u793e\u4f1a\u8005\u548c\u538c\u4e16\u8005\uff0c\u4ed6\u4eec\u5728\u5bfb\u627e\u4e00\u4e2a\u4ed6\u4eec\u8ba4\u4e3a\u9002\u5408\u4ed6\u4eec\u538c\u6076\u7684\u653f\u515a\u3002", "note_en": "S IX ERRORS: 1) missing the compounding effects of masks, 2) missing the nonlinearity of the probability of infection to viral exposures, 3) missing absence of evidence (of benefits of mask wearing) for evidence of absence (of benefits of mask wearing), 4) missing the point that people do not need governments to produce facial covering: they can make their own, 5) missing the compounding effects of statistical signals, 6) ignoring the Non-Aggression Principle by pseudolibertarians (masks are also to protect  others from you; it\u2019s a multiplicative process: every person you infect will infect others).\n In fact masks (and faceshields) supplemented with constraints of superspreader events can save us trillions of dollars in future lockdowns (and lawsuits) and be potentially sufficient (under adequate compliance) to stem the pandemic. Bureaucrats do not like simple solutions.\n   People who are good at exams (and become bureaucrats, economists, or hacks), my experience has been, are not good at understanding nonlinearities and dynamics.\n The WHO, CDC and other bureaucracies initially failed to quickly realize that the benefits of masks compound, simply because  two people are wearing them and you have to look at the interaction.\n Let us say (to simplify) that masks reduce both transmission and reception to  p. What effect on the  R0(that is, the rate of spreading of the infection)?\n Simply the naive approach (used by the CDC/WHO bureaucrats and other imbeciles) is to say if masks reduce the transmission probability to \u00bc, one would think it would then drop from, say  R0= 5, to  R0=1 \u00bc. Yuuge, but there is better.\n For one should count both sides. Under our simplification, with  p=1/4 we get  R0&#39;=  p\u00b2 R0 . The drop in  R becomes 93.75%! You divide  R by 16! Even with masks working at 50% we get a 75% drop in  R0.\n   The error is to think that if I reduce the exposure to the virus by, say, \u00bd, I would then reduce the risk, expressed as probability of infection, by \u00bd as well. Not quite.\n Now consider (Fig 1) that probability   must follow a nonlinear dose-response, an \u201cS curve\u201d. In the convex part of the curve, gains are disproportionately large: a reduction of  x% of viral exposure leads to a drop of much more than  x in risk of infection. And, patently we are in the convex part of the curve. For example, to use the case above, a reduction of viral load by 75% for a short exposure could reduce the probability of infection by 95% or more!\n  \u201cThere is no evidence that masks work\u201d, I kept hearing repeated to me by the usual idiots calling themselves \u201cevidence based\u201d scientists. The point is that there is no evidence that locking the door tonight will prevent me from being burglarized. But everything that  may block transmission   could help.   Unlike school, real life is not about certainties . When in doubt, use what protection you can. Some invoked the flawed rationalization that masks induce false confidence: in fact there is a strong argument that masks makes one more alert to the risks and more conservative in behavior.\n  Paternalistic bureaucrats resisted inviting the general public to use masks on grounds that the supply was limited and would be needed by health professionals \u2014 hence they lied to us saying \u201cmasks are not effective\u201d. They did not get the inventiveness and industriousness of people who do not need a government to produce masks for them: they can rapidly convert about anything into well-functioning protective face covering appendages, say rags into which one can stitch coffee filters\u2026 about anything. Nor did bureaucrats heed the notion of markets and the existence of opportunists who can supply people with what they want.\n  Many people who deal with statistics think in terms of either mechanistic concepts (say correlation) they don\u2019t quite understand, or local results; they fear to be presenting \u201canecdotes\u201d, and fail to grasp the broader notion of statistical signals where you look at the whole story, not the body parts. For here, again, evidence compounds. We have a) the salon story where two infected stylists failed to infect  all their 140 clients (making the probability of infection for bilateral mask wearing safely below 1% for a salon-style exposure) \u2014 we know the probability of infection for non mask wearers from tens of thousands of data points and the various  R0 estimations) plus b) the rate of infection of countries where masks were mandatory, plus c) tons of papers with more or less flawed methodologies, etc.\n  \u201cLibertarians\u201d (in brackets) are resisting mask wearing on grounds that it constrains their freedom. Yet the entire concept of liberty lies in the Non-Aggression Principle, the equivalent of the   Silver Rule: do not harm others; they in turn should not harm you. Even more insulting is the demand by pseudolibertarians that Costco should banned from forcing customers to wear mask \u2014 but libertarianism allows you to set the rules on your own property. Costco should be able to force visitors to wear pink shirts and purple glasses if they wished.\n Note that by infecting another person you are not infecting just another person. You are infecting many many more and causing   systemic risk.\n   1- I commend the very very very few writers such as Zeynep Tufekci who have been fighting the fight in the media.\n 2- I truly believe that the pseudolibertarians are sociopaths and misanthropes looking for a political party that they think fits their misanthropy.", "posttime": "2020-06-15 02:34:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9762\u5177,masks,\u53e3\u7f69", "title": "\u9762\u5177\u5316\u5986\u821e\u4f1a", "title_en": "The Masks Masquerade", "transed": 1, "url": "https://medium.com/incerto/the-masks-masquerade-7de897b517b7", "via": "", "real_tags": ["\u9762\u5177", "masks", "\u53e3\u7f69"]}, {"category": "", "categoryclass": "", "imagename": "aeca4726444958b2ed5a38d61f1b31c3.png", "infoid": 1006548, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u7c7b\u559c\u6b22\u6545\u4e8b\u3002\u6211\u4eec\u559c\u6b22\u544a\u8bc9\u4ed6\u4eec\uff0c\u6211\u4eec\u559c\u6b22\u8bfb\u3001\u542c\u548c\u770b\u4ed6\u4eec\u3002\u9664\u4e86\u5a31\u4e50\uff0c\u6545\u4e8b\u8ba9\u6211\u4eec\u80fd\u591f\u5408\u4f5c\uff0c\u5efa\u8bbe\u6211\u4eec\u4eca\u5929\u751f\u6d3b\u7684\u4e16\u754c\u3002\u5c24\u74e6\u5c14\u00b7\u8bfa\u4e9a\u00b7\u54c8\u62c9\u91cc(Yuval Noah Harari)\u7684\u201c\u667a\u4eba\u201d\u5bf9\u6b64\u8fdb\u884c\u4e86\u6df1\u5165\u7684\u8ba8\u8bba\u3002\n\u9274\u4e8e\u6545\u4e8b\u5bf9\u4eba\u7c7b\u601d\u7ef4\u7684\u91cd\u8981\u6027\uff0c\u4f3c\u4e4e\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u5f0f\u6765\u63a2\u7d22\u5b83\u3002\u6211\u60f3\u5206\u4eab\u6211\u7684\u9762\u8bd5\u65b9\u6cd5\uff0c\u5e76\u5f3a\u8c03\u5728\u9762\u8bd5\u6280\u672f\u804c\u4f4d\u7684\u5019\u9009\u4eba\u65f6\u8bb2\u6545\u4e8b\u7684\u91cd\u8981\u6027\u3002\u867d\u7136\u6211\u8ba4\u4e3a\u8fd9\u4e9b\u5c0f\u8d34\u58eb\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u4ea7\u54c1\u7ecf\u7406\u3001\u8bbe\u8ba1\u5e08\u7b49\u7684\u9762\u8bd5\u3002\n\u4f60\u5fc5\u987b\u5047\u8bbe\u5e94\u8058\u8005\u4f1a\u544a\u8bc9\u4f60\u4f60\u60f3\u542c\u7684\u6545\u4e8b\uff1b\u5c3d\u7ba1\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u3002\u9664\u975e\u4ed6\u4eec\u505a\u4e86\u5927\u91cf\u7684\u8c03\u67e5\uff0c\u5426\u5219\u5e94\u8058\u8005\u4e0d\u77e5\u9053\u542c\u4f17\u7684\u54c1\u5473\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u3002\u4ed6\u4eec\u9700\u8981\u6307\u5bfc\uff0c\u7b2c\u4e00\u6b65\u662f\u8ba9\u4ed6\u4eec\u77e5\u9053\u8c01\u662f\u4ed6\u4eec\u7684\u89c2\u4f17\u3002\n\u5c55\u793a\u81ea\u5df1\u8bc1\u660e\u4e86\u4f60\u8db3\u591f\u5173\u5fc3\u5e94\u8058\u8005\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u4ed6\u4eec\u4e0b\u4e00\u4e2a\u5c0f\u65f6\u5c06\u548c\u8c01\u4e00\u8d77\u5ea6\u8fc7\u3002\u77e5\u9053\u89c2\u4f17\u5173\u5fc3\u4ec0\u4e48\u5c06\u4e3a\u6545\u4e8b\u5b9a\u4e0b\u57fa\u8c03\u3002\n\u6211\u662f\u5927\u536b\u3002\u6211\u662f\u4e00\u540d\u4ea7\u54c1\u5de5\u7a0b\u5e08\u3002\u5728\u9a6c\u5fb7\u91cc\u7ecf\u5386\u4e86\u8bb8\u591a\u521d\u521b\u4f01\u4e1a\u4e4b\u540e\uff0c\u6211\u642c\u5230\u4e86\u5df4\u4f26\u897f\u4e9a\u3002\u9633\u5149\u3001\u6d77\u6ee9\u3001\u8fd9\u5ea7\u57ce\u5e02\u3001\u8fd9\u91cc\u7684\u4eba\u4eec\u4ee5\u53ca\u6b63\u5728\u5174\u8d77\u7684\u79d1\u6280\u548c\u521b\u4e1a\u793e\u533a\u628a\u6211\u5e26\u5230\u4e86\u8fd9\u91cc\u3002\u51e0\u4e2a\u6708\u524d\uff0cCreditas\u6536\u517b\u4e86\u6211\uff0c\u76ee\u7684\u662f\u6539\u5584\u6211\u5e94\u8be5\u64c5\u957f\u7684\u4e8b\u60c5\uff1aAndroid\u3001\u540e\u7aef\u3001\u9886\u5bfc\u56e2\u961f\u548c\u8be2\u95ee\u4ea7\u54c1\u7ecf\u7406\u3002\n\u8fd9\u4e0d\u662f\u4f60\u7684\u7b80\u5386\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u5728\u4e00\u5206\u949f\u5185\u5b8c\u6210\u3002\u8bf7\u4e8b\u5148\u505a\u597d\u51c6\u5907\u3002\u4e0d\u8981\u5373\u5174\u53d1\u6325\u3002\u575a\u6301\u505a\u91cd\u8981\u7684\u4e8b\uff0c\u505a\u4e00\u4e2a\u4eba\uff1b\u505a\u4e00\u4e2a\u771f\u5b9e\u7684\u4eba\u3002\u5f88\u5c11\u6709\u8bb2\u6545\u4e8b\u7684\u4eba\u4e0d\u8bf4\u771f\u8bdd\u5c31\u6210\u529f\u7684\u3002\u63d0\u5230\u4f60\u559c\u6b22\u4ec0\u4e48\uff0c\u4ec0\u4e48\u5bf9\u4f60\u5f88\u91cd\u8981\uff0c\u662f\u4ec0\u4e48\u9a71\u4f7f\u4f60\uff0c\u662f\u4ec0\u4e48\u9a71\u4f7f\u4f60\u8d70\u5230\u73b0\u5728\u7684\u4f4d\u7f6e\u3002\u7ed9\u51fa\u5f88\u591a\u5173\u4e8e\u4f60\u7684\u6280\u672f\u7ecf\u9a8c\u7684\u7ec6\u8282\u53ef\u80fd\u4e0e\u5e94\u8058\u8005\u7684\u7ecf\u5386\u65e0\u5173\u3002\n\u5728\u4efb\u4f55\u654f\u6377\u4ea7\u54c1\u5de5\u7a0b\u56e2\u961f\u4e2d\uff0c\u60a8\u6700\u7ec8\u90fd\u4f1a\u6709\u4e00\u4e9b\u5f85\u5b8c\u6210\u7684\u4efb\u52a1\u3002\u6709\u65f6\u5b83\u662fJIRA\u677f\u4e0a\u7684\u4e00\u5f20\u7968\uff1b\u6216\u8005\u53ea\u662f\u5899\u4e0a\u7684\u4e00\u5f20\u4fbf\u5229\u8d34\uff1b\u6216\u8005\u751a\u81f3\u662f\u60a8\u7684\u4ea7\u54c1\u7ecf\u7406\u7528SLACK\u53d1\u6765\u7684\u4e00\u6761\u6d88\u606f\uff0c\u8bf4\u6709\u7d27\u6025\u4e8b\u60c5\u3002\u5e0c\u671b\u4e0d\u662f\u2026\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u2026\u3002\u8fd9\u662f\u4e00\u6bb5\u975e\u5e38\u6f2b\u957f\u7684\u65c5\u7a0b\uff0c\u76f4\u5230\u4e00\u9879\u529f\u80fd\u5728\u4e92\u8054\u7f51\u7684\u5de8\u5927\u5947\u8ff9\u4e2d\u51fa\u73b0\u5728\u673a\u5668\u4e0a\uff0c\u5e76\u6709\u4eba\u5728\u4f7f\u7528\u5b83\u3002\u6211\u5e0c\u671b\u4f60\u80fd\u5e26\u6211\u8e0f\u4e0a\u4e00\u6bb5\u65c5\u7a0b\uff0c\u628a\u8fd9\u4e2a\u529f\u80fd\u4ece\u5f85\u529e\u4e8b\u9879\u5e26\u5230\u751f\u4ea7\u9636\u6bb5\u3002\n\u4ece\u4f60\u8ba4\u4e3a\u6709\u5fc5\u8981\u7684\u5730\u65b9\u5f00\u59cb\u8bb2\u6545\u4e8b\uff0c\u56de\u987e\u4e00\u4e0b\u5728\u6545\u4e8b\u53d1\u751f\u4e4b\u524d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u4f60\u5728\u5019\u9009\u4eba\u9762\u524d\u5efa\u7acb\u7684\u4e16\u754c\u6709\u9700\u8981\u5c0a\u91cd\u7684\u89c4\u5219\u3002\u5982\u679c\u5b83\u4eec\u5f88\u91cd\u8981\uff0c\u5c31\u63d0\u51fa\u6765\u3002\u5b83\u6709\u4e00\u4e9b\u6709\u80fd\u529b\u548c\u8d23\u4efb\u7684\u4eba\u7269\u3002\u5982\u679c\u5b83\u4eec\u5f88\u91cd\u8981\uff0c\u5c31\u63d0\u51fa\u6765\u3002\u5b83\u6709\u4e00\u6bb5\u9700\u8981\u8003\u8651\u7684\u5386\u53f2\uff0c\u5b83\u6709\u52a8\u529b\uff1a\u4e00\u79cd\u671d\u7740\u6545\u4e8b\u524d\u8fdb\u65b9\u5411\u7684\u529b\u91cf\u3002\n\u4f60\u6709\u4e00\u9879\u4efb\u52a1\u7b49\u7740\u4f60\u53bb\u5b8c\u6210\u3002\u4e5f\u8bb8\u4f60\u548c\u540c\u4e8b\u4e00\u8d77\u53bb\u770b\u767d\u677f\u3002\u4f60\u662f\u600e\u4e48\u5f00\u59cb\u7684\uff1f\n\u6545\u4e8b\u7684\u8282\u594f\u6781\u5927\u5730\u5f71\u54cd\u7740\u5bf9\u4e8b\u4ef6\u7684\u89e3\u8bfb\u3002\u4f60\u5e94\u8be5\u5173\u5fc3\u6545\u4e8b\u7684\u8282\u594f\uff0c\u4e00\u76f4\u5230\u8282\u62cd\u3002\u6bcf\u4e00\u6b65\u90fd\u662f\u4e00\u4e2a\u673a\u4f1a\uff0c\u53ef\u4ee5\u6839\u636e\u5e94\u8058\u8005\u7684\u9700\u8981\u6df1\u5165\u5230\u4e00\u4e2a\u4e3b\u9898\u4e2d\u53bb\u3002\u8282\u594f\u63ed\u793a\u4e86\u5bf9\u4ed6\u4eec\u6765\u8bf4\u4ec0\u4e48\u662f\u91cd\u8981\u7684\u3002\n\u60a8\u5df2\u7ecf\u5728\u767d\u677f\u4e0a\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u6765\u63a2\u7d22\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u3002\u7136\u540e\uff0c\u4f60\u5750\u5728\u952e\u76d8\u548c\u663e\u793a\u5668\u524d\uff0c\u51c6\u5907\u597d\u7ed3\u5bf9\u7f16\u7a0b\uff0c\u628a\u5b83\u5f04\u5f97\u5929\u7ffb\u5730\u8986\u3002\u4f60\u600e\u4e48\u505a\u5230\u7684\uff1f\n\u4f5c\u4e3a\u5bfc\u6e38\uff0c\u4f60\u5e94\u8be5\u5c3d\u91cf\u4fdd\u6301\u6052\u5b9a\u7684\u8282\u594f\u3002\u52a0\u901f\u6216\u51cf\u901f\u8981\u8db3\u591f\u6162\uff0c\u8fd9\u6837\u5019\u9009\u4eba\u624d\u6709\u65f6\u95f4\u9002\u5e94\u3002\n\u4efb\u52a1\u5b8c\u6210\u4e86\u3002\u6216\u8005\u8bf4\u662f\uff1f\u55ef\uff0c\u6211\u4eec\u77e5\u9053\u81f3\u5c11\u8fd9\u4e2a\u529f\u80fd\u662f\u7f16\u7a0b\u7684\u3002\u8fd9\u662f\u52a0\u5bc6\u7684\u3002\u4f46\u4ee3\u7801\u4e0d\u53ef\u80fd\u6c38\u8fdc\u7559\u5728\u6211\u4eec\u7684\u673a\u5668\u4e0a\u3002\u5b83\u5728\u90a3\u91cc\u6beb\u65e0\u7528\u5904\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u7ed9\u7528\u6237\u5e26\u6765\u4efb\u4f55\u4ef7\u503c\u3002\n\u628a\u4efb\u4f55\u6545\u4e8b\u60f3\u8c61\u6210\u4e00\u68f5\u6811\u3002\u60a8\u53ef\u4ee5\u4ece\u6839\u5f00\u59cb\uff0c\u7136\u540e\u5411\u4e0a\u5bfc\u822a\u5230\u9876\u90e8\u3002\u5f53\u5019\u9009\u4eba\u5b8c\u6210\u8fd9\u4e2a\u6545\u4e8b\u65f6\uff0c\u5728\u4e0a\u5343\u6761\u53ef\u80fd\u7684\u9053\u8def\u4e2d\uff0c\u53ea\u6709\u4e00\u6761\u5c06\u7ee7\u7eed\u63a2\u7d22\u3002\u6545\u4e8b\u603b\u662f\u628a\u65f6\u95f4\u7ebf\u5f80\u524d\u63a8\u3002\u5012\u53d9\u6216\u5728\u6811\u679d\u4e4b\u95f4\u8df3\u8dc3\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3a\u8fd9\u53ea\u4f1a\u589e\u52a0\u56f0\u60d1\u548c\u7cbe\u795e\u75b2\u52b3\u3002\u8fd9\u610f\u5473\u7740\u4f60\u4eec\u4e0d\u4f1a\u95ee\u5f7c\u6b64\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\u95ee\u9898\u3002\u6240\u4ee5\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u8fc7\u6e21\u671f\uff0c\u8ba9\u5e94\u8058\u8005\u63a2\u7d22\u4ed6\u4eec\u8ba4\u4e3a\u6700\u597d\u7684\u9053\u8def\u3002\n\u6709\u65f6\u5019\u4f60\u60f3\u542c\u4e00\u4e9b\u5177\u4f53\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u6d4b\u8bd5\u7b56\u7565\uff0c\u6bd4\u5982\u201c\u4ece\u5916\u5230\u5185\u6216\u4ece\u91cc\u5230\u5916\u201d\u3002\u6240\u4ee5\u4f60\u8981\u5f3a\u8feb\u5e94\u8058\u8005\u53bb\u4ed6\u4eec\u60f3\u53bb\u6216\u4e0d\u60f3\u53bb\u7684\u5730\u65b9\u3002\u90a3\u662f\u4e00\u6839\u5f3a\u8feb\u7684\u6811\u679d\u3002\u5982\u679c\u5b83\u6cbf\u7740\u6545\u4e8b\u7684\u65b9\u5411\u53d1\u5c55\uff0c\u90a3\u5c31\u5f88\u597d\u3002\u4f60\u5e94\u8be5\u4fdd\u6301\u6545\u4e8b\u5df2\u7ecf\u6709\u7684\u52bf\u5934\uff0c\u5e76\u5229\u7528\u5b83\u3002\u89c2\u5bdf\u5e94\u8058\u8005\u662f\u5982\u4f55\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\uff0c\u4ed6\u4eec\u662f\u5982\u4f55\u6446\u8131\u8fd9\u79cd\u60c5\u51b5\u7684\uff0c\u4ee5\u53ca\u4ed6\u4eec\u662f\u5982\u4f55\u5373\u5174\u53d1\u6325\u7684\u3002\n\u4f60\u5c31\u5feb\u5230\u4e86\u3002\u68c0\u67e5\u4ee3\u7801\uff0c\u5e76\u5728\u8bd5\u8fd0\u884c\u73af\u5883\u4e2d\u6d4b\u8bd5\u8be5\u529f\u80fd\u3002\u73b0\u5728\u662f\u90e8\u7f72\u5230\u751f\u4ea7\u4e2d\u7684\u65f6\u5019\u4e86\u3002\u6211\u4eec\u60f3\u8981\u5e73\u7a33\u5730\u3001\u65e0\u6469\u64e6\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53ef\u9760\u7684CI/CD\u7ba1\u9053\uff0c\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u901a\u8fc7\u4e0d\u540c\u7684\u6b65\u9aa4\uff0c\u8fd9\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u6211\u5f88\u597d\u5947\u8fd9\u4e9b\u4e1c\u897f\u662f\u600e\u4e48\u5de5\u4f5c\u7684\u3002\n\u8fc7\u6e21\u6709\u52a9\u4e8e\u6545\u4e8b\u671d\u7740\u4e00\u5b9a\u7684\u65b9\u5411\u524d\u8fdb\u3002\u5927\u591a\u6570\u5019\u9009\u4eba\u4e0d\u77e5\u9053\u6545\u4e8b\u5e94\u8be5\u5982\u4f55\u53d1\u5c55\uff0c\u4ee5\u53ca\u4ed6\u4eec\u9700\u8981\u63a2\u7d22\u54ea\u4e9b\u5730\u65b9\u3002\u8f6c\u53d8\u4e0d\u5e94\u8be5\u662f\u5267\u70c8\u7684\u3002\u4ed6\u4eec\u4e00\u6b65\u4e00\u4e2a\u811a\u5370\u5730\u63a8\u8fdb\u6545\u4e8b\u3002\u8fd9\u7ed9\u4e86\u5019\u9009\u4eba\u9002\u5e94\u7684\u65f6\u95f4\uff0c\u5e76\u4e3a\u8fdb\u4e00\u6b65\u6784\u5efa\u6545\u4e8b\u505a\u597d\u51c6\u5907\u3002\n\u5f53\u6211\u4eec\u90e8\u7f72\u5230\u751f\u4ea7\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u4e00\u5207\u90fd\u4f1a\u987a\u5229\u8fdb\u884c\u3002\u8fd9\u4e00\u6b21\u4f3c\u4e4e\u4e00\u5207\u90fd\u5f88\u987a\u5229\u3002\u4f46\u662f\uff0c\u7b2c\u4e8c\u5929\u4ea7\u54c1\u7ecf\u7406\u62a5\u544a\u60a8\u90e8\u7f72\u7684\u7279\u6027\u4e2d\u5b58\u5728\u4e00\u4e2abug\u3002\u8fd9\u4ee4\u4eba\u60ca\u8bb6\uff0c\u4f46\u5e76\u4e0d\u51fa\u4eba\u610f\u6599\u3002\u6211\u4eec\u600e\u4e48\u624d\u80fd\u8ffd\u6355\u5230\u90a3\u53ea\u866b\u5b50\u5462\uff1f\u6211\u4eec\u9700\u8981\u4ec0\u4e48\u5de5\u5177\uff1f\n\u53e6\u4e00\u65b9\u9762\uff0c\u60c5\u8282\u7684\u66f2\u6298\u628a\u5019\u9009\u4eba\u5e26\u5230\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u5883\u5730\u3002\u60c5\u8282\u7684\u66f2\u6298\u5e76\u4e0d\u4f1a\u5b8c\u5168\u6539\u53d8\u80cc\u666f\u3002\u4ed6\u4eec\u5efa\u7acb\u5728\u5019\u9009\u4eba\u5df2\u7ecf\u62e5\u6709\u7684\u80cc\u666f\u4e4b\u4e0a\uff0c\u4f46\u6ca1\u6709\u5145\u5206\u5229\u7528\u6545\u4e8b\u7684\u52bf\u5934\u3002\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u4f46\u719f\u6089\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\u3002\u60c5\u8282\u66f2\u6298\u7684\u5b58\u5728\u662f\u56e0\u4e3a\u4f60\u60f3\u5236\u9020\u51b2\u7a81\u3002\u6ca1\u6709\u51b2\u7a81\uff0c\u6545\u4e8b\u5c31\u4e0d\u6709\u8da3\u3002\u8ba9\u5019\u9009\u4eba\u6765\u63a2\u7d22\u8fd9\u4e00\u70b9\u5427\u3002\n\u6211\u4eec\u77e5\u9053\u4ea7\u54c1\u4e0d\u662f\u9759\u6001\u7684\uff0c\u5b83\u4eec\u53d1\u5c55\u4e86\u2026\u3002\u8f6f\u4ef6\u5e94\u8be5\u4f1a\u6539\u53d8\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u5c31\u5e94\u8be5\u662f\u786c\u4ef6\u3002\u6211\u4eec\u9700\u8981\u5c3d\u53ef\u80fd\u5730\u7cbe\u7b80\uff0c\u5728\u5c0f\u7684\u53cd\u9988\u5faa\u73af\u4e2d\u5de5\u4f5c\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u6240\u505a\u7684\u4e8b\u60c5\u771f\u7684\u4e3a\u7528\u6237\u589e\u52a0\u4e86\u4ef7\u503c\u3002\u4ece\u5de5\u7a0b\u89d2\u5ea6\u6765\u770b\uff0c\u6570\u5b57\u4ea7\u54c1\u6700\u7b80\u5355\u7684\u8bbe\u7f6e\u662f\u62e5\u6709\u4e00\u4e2a\u524d\u7aef\u5ba2\u6237\u7aef\u548c\u4e00\u4e2a\u670d\u52a1\u4e8erest API\u7684\u540e\u7aef\u3002\u968f\u7740\u6211\u4eec\u4ea7\u54c1\u7684\u53d1\u5c55\uff0c\u6211\u4eec\u7684API\u4e5f\u5c06\u53d1\u5c55\u3002\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u5728\u4ee5\u8fd9\u79cd\u8fed\u4ee3\u65b9\u5f0f\u53d1\u5c55API\u65f6\u5fc5\u987b\u8003\u8651\u54ea\u4e9b\u56e0\u7d20\u3002\n\u6545\u4e8b\u662f\u8fde\u7eed\u4e0d\u65ad\u7684\u3002\u4e8b\u4ef6\u4e0d\u4f1a\u65e0\u7f18\u65e0\u6545\u5730\u53d1\u751f\u3002\u4efb\u4f55\u4e8b\u4ef6\u90fd\u6709\u8d77\u56e0\u3002\u6211\u4eec\u77e5\u9053\u5e76\u7406\u89e3\u80cc\u540e\u7684\u539f\u56e0\uff0c\u6211\u4eec\u80fd\u591f\u4ee5\u9002\u5f53\u548c\u76f8\u79f0\u7684\u65b9\u5f0f\u4f5c\u51fa\u56de\u5e94\u3002\u8fc7\u6e21\u9700\u8981\u63d0\u4f9b\u8db3\u591f\u7684\u4e0a\u4e0b\u6587\u6765\u7406\u89e3\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u67d0\u4e9b\u4e8b\u60c5\u3002\u53ea\u6709\u8fd9\u6837\uff0c\u5019\u9009\u4eba\u624d\u80fd\u4ee5\u9002\u5f53\u7684\u65b9\u5f0f\u4f5c\u51fa\u56de\u5e94\u3002\u4f60\u60f3\u8ba9\u5e94\u8058\u8005\u7406\u89e3\u4f60\u7684\u8981\u6c42\u3002\u5982\u679c\u4f60\u60f3\u8981\u63a2\u7d22\u7684\u5206\u652f\u6253\u5f00\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u4e16\u754c\uff0c\u8fc7\u6e21\u9700\u8981\u66f4\u52a0\u4e30\u5bcc\u3002\n\u7ecf\u8fc7\u591a\u6b21\u8fed\u4ee3\uff0c\u6211\u4eec\u7684\u4ea7\u54c1\u6bd4\u6211\u4eec\u60f3\u8c61\u7684\u66f4\u6210\u529f\u3002\u6211\u4eec\u670d\u52a1\u7684\u8d1f\u62c5\u4e0e\u65e5\u4ff1\u589e\u3002\u6211\u4eec\u5f00\u59cb\u770b\u5230\u4ea4\u901a\u9ad8\u5cf0\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u505a\u4ec0\u4e48\uff1f\n\u6545\u4e8b\u5f00\u59cb\u4e8e\u4e00\u4e2a\u975e\u5e38\u4f4e\u7684\u5c42\u6b21\u3002\u975e\u5e38\u5177\u4f53\u3002\u968f\u7740\u91c7\u8bbf\u7684\u8fdb\u884c\u548c\u6545\u4e8b\u7684\u5efa\u7acb\uff0c\u7cbe\u795e\u4e0a\u7684\u75b2\u52b3\u611f\u589e\u52a0\u4e86\u3002\u4ece\u5177\u4f53\u5230\u66f4\u62bd\u8c61\u7684\u4e3b\u9898\u662f\u4e2a\u597d\u4e3b\u610f\u3002\u5230\u6700\u540e\uff0c\u5b83\u5e94\u8be5\u53ea\u662f\u5173\u4e8e\u62bd\u8c61\u7684\u6982\u5ff5\u3001\u60f3\u6cd5\u6216\u7ed3\u8bba\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u53ea\u662f\u6709\u65f6\u95f4\u53bb\u63a2\u7d22\u8fd9\u4e48\u591a\u3002\u4f46\u5f53\u6545\u4e8b\u7ed3\u675f\u65f6\uff0c\u4f60\u4e0d\u4ec5\u5e94\u8be5\u4e86\u89e3\u5e94\u8058\u8005\u6240\u77e5\u9053\u7684\u4e00\u4e9b\u5185\u5bb9\uff0c\u800c\u4e14\u8fd8\u5e94\u8be5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4e0e\u4ed6\u4eec\u5efa\u7acb\u8054\u7cfb\u3002\u6545\u4e8b\uff0c\u597d\u6545\u4e8b\uff0c\u8ba9\u6211\u4eec\u6e34\u671b\u66f4\u591a\u3002\u5982\u679c\u8fd9\u79cd\u6e34\u671b\u771f\u7684\u5b58\u5728\uff0c\u90a3\u4e48\u4f60\u5c31\u6709\u4e86\u6574\u6574\u4e00\u4e2a\u5c0f\u65f6\u4ee5\u6765\u4e00\u76f4\u5728\u5bfb\u627e\u7684\u7b54\u6848\u3002\n\u975e\u5e38\u611f\u8c22undra.com\u7684\u63d2\u56fe\u3002\u4f60\u53ef\u4ee5\u5bf9\u6211\u7684\u65f6\u4e8b\u901a\u8baf\u6301\u4fdd\u7559\u6001\u5ea6\uff0c\u6bcf\u6b21\u6709\u65b0\u5e16\u5b50\u90fd\u4f1a\u901a\u77e5\u4f60\u3002", "note_en": "Humans love stories. We love telling them and we love reading, listening and watching them. Beyond entertainment, stories have allowed us to collaborate and build the world we live in today.  Sapiens by Yuval Noah Harari talks in-depth about this.\n Given the  importance of stories to the human mind, it seems there is no better way to explore it. I would like to share my approach to interviews and to emphasize the importance of storytelling when interviewing candidates for technical positions. Although I assume these tips can also be applied to interviews for product managers, designers, etc.\n You must assume the candidate will tell you the story you wish to hear; although most of the time, they won\u2019t. Unless they have done a lot of research, the candidate doesn\u2019t know the taste of their audience. In this case, you. They will need guidance and the first step is to let them know who is their audience.\n   Presenting yourself proves that you care enough about the candidate to let them know with whom they are going to spend the next hour. Knowing what the audience cares about will set the tone of the story.\n I\u2019m  David. I\u2019m a Product Engineer. After surviving many startups in Madrid I moved to Valencia. The sun, the beach, the city, the people and the raising tech and startup community brought me here. A few months ago, Creditas adopted me in order to improve the things that I\u2019m supposedly good at: android, backend, leading teams and question Product Managers.\n This is not your  CV so you must do it under one minute. Prepare it beforehand. Don\u2019t improvise. Stick to what matters and be human; be real. Few storytellers succeed without speaking the truth. Mention what you like, what is important to you, what drives you and what motivated you to be where you are. Giving a lot of details about your technical experience maybe is irrelevant to the candidate\u2019s story.\n  In any agile Product Engineering team, you end up with some tasks that are pending to be done. Sometimes it is a ticket on a JIRA board; or just a post-it on the wall; or even a message in Slack from your Product Manager saying it is something urgent. Hopefully not\u2026 Anyway\u2026 It is a really long journey until a feature is in a machine in the vast wonders of the internet and somebody is using it. I would like you to take me into a journey that takes that feature from to-do to production.\n  Start the story at the point you think necessary, giving a recap on what happened until that point in which the story is taking place. The  world that you are building in front of the candidate has rules that need to be respected. Mention them if they are important. It has  characters that have some abilities and responsibilities. Mention them if they are important. It has a history that needs to be taken into account and it has momentum: a force in the direction the story is led.\n  You have a task waiting to be done. Maybe you go to a whiteboard with a colleague. How do you start?\n The tempo of a story hugely affects how events are interpreted. You should care about the rhythm of the story  down to the beat. Every step is an opportunity to go as deep into a topic as the candidate wants. The rhythm reveals what is important to them.\n You have spent some time at the whiteboard exploring different solutions. Then you sit down in front of a keyboard and a monitor ready to pair program the hell out of it. How do you do that?\n As a guide you should try to keep a constant tempo. Accelerate or decelerate slowly enough so the candidate has time to adapt.\n  The task is done. Or is it? Well, we know that at least the feature is programmed. It is coded. But that code can\u2019t stay on our machine forever. It\u2019s useless there since it doesn\u2019t bring any value to the user.\n Think of any story as a tree. You start from the root and go up navigating it to the top. By the time the candidate completes the story, from thousand possible paths, only one is going to remain explored. The story always pushes the  timeline forward. Flashbacks or jumping between branches is not a good idea because it will only add confusion and mental fatigue. That means you won\u2019t ask questions that don\u2019t have any relation between each other. So give them a transition and let the candidate explore the path they think is best.\n   Sometimes there is something specific you want to hear about like testing strategies as \u201coutside in or inside out\u201d. So you will force the candidate to go into places that they were or were not intending to go. That\u2019s a forced branch. That\u2019s fine if it builds in the direction the story is leading to. You should keep the  momentum the story already has and take advantage of it. Observe how the candidates handle the situation, how they get out of it and how they improvise.\n  You are almost there. The code is reviewed and the feature is tested in a staging environment. Now is time to deploy to production. And we want to do that smoothly and without friction. It\u2019s a good thing that we already have a solid CI/CD pipeline set in place that takes our code through different steps. I\u2019m curious about haw all that works.\n Transitions help the story advance in a certain direction. Most candidates don\u2019t know how the story is supposed to advance and what places they need to explore. Transitions shouldn\u2019t be drastic. They advance the story one tiny bit at a time. This gives the candidate time to adapt and be prepared to build the story further.\n When we deploy to production, we hope everything will go well. And this time it seems everything has gone well. However the next day the Product Manager reports that there is a bug in the feature that you deployed. That is surprising but not unexpected. How do we hunt that bug down? What tools do we need?\n Plot twists, on the other hand, take the candidate and put them in a completely new situation. Plot twists don\u2019t change context completely. They build upon the context that the candidate already has but it doesn\u2019t take full advantage of the momentum of the story. Something unexpected but familiar has happened.  Plot twists exist because you want to create conflict. A story is not interesting without conflict. Let the candidate explore that.\n We know that products are not static, they evolve\u2026 Software is supposed to change. If it wasn\u2019t, it should be hardware. We need to be as lean as possible working in small feedback loops to be sure that what we do really adds value to the user. From an engineering perspective, the simplest setup for a digital product is to have a frontend client and a backend that serves a REST API. As our product evolves, our API will also evolve. Let\u2019s talk about what things must be taken into account when we evolve our API in such iterative ways.\n  Stories are continuous. Events don\u2019t just happen without any reason. Any event has a cause. We know and understand the reasons behind them and we are able to respond in a proper and proportional way. Transitions need to give enough context to understand why something is happening. Only then, the candidate will be able to respond in an appropriate way. You want the candidate to understand what you are asking. If the branch you want to explore opens a whole new world, the transition needs to be richer.\n  After many iterations, our product is more successful than we ever imagined. The load on our services is increasing day by day. We are starting to see traffic spikes. What do we need to take into account and what do we need to do at this point?\n The story starts at a very low level. Very specific. As the interview goes on and the story gets built, the mental fatigue increases. It is a good idea to go from  specifics to more abstract topics. By the end it should only be about abstract concepts, ideas or conclusions.\n  Unfortunately you just have time to explore so much. But by the time the story is wrapping up, you should understand not only some of what the candidate knows, but you should also have  connected with them at some level. Stories, good stories, make us crave for more. If that craving is present, then you have the answer you\u2019ve been searhing for this whole hour.\n  Huge thanks to  undraw.com for the illustrations. You can subscribe to my newsletter  With a grain of salt and get notified every time there is a new post.", "posttime": "2020-06-15 01:49:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91c7\u8bbf,tips,\u6545\u4e8b", "title": "\u6280\u672f\u91c7\u8bbf\u7684\u8bb2\u6545\u4e8b\u5c0f\u8d34\u58eb", "title_en": "Storytelling Tips for Technical Interviews", "transed": 1, "url": "https://stanete.com/storytelling-tips-technical-interviews", "via": "", "real_tags": ["\u91c7\u8bbf", "tips", "\u6545\u4e8b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006547, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Actual\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u540c\u6b65\u5f15\u64ce\u3002\u6700\u8fd1\uff0c\u6211\u5b9e\u73b0\u4e86\u5b8c\u5168\u7684\u7aef\u5230\u7aef\u52a0\u5bc6(\u8fd8\u6ca1\u6709\u53d1\u5e03)\uff0c\u5b83\u6fc0\u52b1\u6211\u5ba1\u8ba1\u6574\u4e2a\u8fc7\u7a0b\u7684\u6027\u80fd\u3002\u5c06\u6765\u6211\u4f1a\u5199\u66f4\u591a\u5173\u4e8e\u4f7f\u7528CRDT\u8fdb\u884c\u540c\u6b65\u7684\u535a\u5ba2\uff0c\u4f46\u73b0\u5728\u6211\u60f3\u8c08\u8c08PostgreSQL\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u5b83\u4f7f\u6027\u80fd\u63d0\u9ad8\u4e869-10\u500d\u3002\nActual\u5b8c\u5168\u662f\u4e00\u4e2a\u672c\u5730\u5e94\u7528\uff0c\u540c\u6b65\u5728\u540e\u53f0\u8fdb\u884c(\u4f7f\u7528CRDT)\u3002\u8fd9\u610f\u5473\u7740\u670d\u52a1\u5668\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u6240\u8981\u505a\u7684\u5c31\u662f\u4e3a\u5ba2\u6237\u7aef\u5b58\u50a8\u548c\u83b7\u53d6\u6d88\u606f\u3002\u5904\u7406\u540c\u6b65\u7684\u6574\u4e2a\u4ee3\u7801\u53ea\u6709200\u884c\u5de6\u53f3\u7684JavaScript\u4ee3\u7801\u3002\n\u6211\u4eec\u9700\u8981\u5904\u7406\u5927\u91cf\u6d88\u606f\u624d\u80fd\u4fdd\u6301\u5feb\u901f\u540c\u6b65\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u8fdb\u884c\u8fd9\u9879\u5de5\u4f5c\u65f6\uff0c\u53d1\u751f\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\uff1a\u4e00\u4e2a\u65b0\u7528\u6237\u5728\u4e00\u5929\u5185\u4ea7\u751f\u4e86169,000\u6761\u6d88\u606f\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u5e45\u5ea6\u7684\u5f02\u5e38\u503c\u3002\u4f8b\u5982\uff0c\u5c061000\u4e2a\u4e8b\u52a1\u5bfc\u5165\u7cfb\u7edf\u5c06\u751f\u6210\u7ea66000\u6761\u6d88\u606f\uff0c\u867d\u7136\u8fd9\u662f\u5408\u7406\u7684\uff0c\u4f46\u4ecd\u9ad8\u4e8e\u6bcf\u4e2a\u7528\u6237\u6bcf\u5929\u7684\u5e73\u5747\u6d88\u606f\u6570\u3002\u6211\u76f8\u4fe1\u4ed6\u4eec\u662f\u901a\u8fc7\u4f7f\u7528API\u5c1d\u8bd5\u6279\u91cf\u5bfc\u5165\u5927\u91cf\u6570\u636e\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u7684\uff0c\u6211\u4eec\u5bf9\u6b64\u6709\u4e0d\u540c\u7684API\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u60f3\uff0c\u5982\u679c\u6211\u4ee5169,000\u4e3a\u57fa\u51c6\u4f1a\u600e\u4e48\u6837\uff1f\n\u6211\u8bd5\u56fe\u901a\u8fc7\u7cfb\u7edf\u53d1\u9001169,000\u6761\u6d88\u606f\uff0c\u4f46\u670d\u52a1\u5668\u5d29\u6e83\u4e86\u3002\u8bf7\u6c42\u8d85\u65f6\uff0c\u670d\u52a1\u5668\u4ecd\u5728\u5904\u7406\u6d88\u606f\uff0c\u5bfc\u81f4\u5176\u4ed6\u4e00\u5207\u53d8\u6162\u3002\u6211\u7acb\u523b\u5c31\u77e5\u9053\u95ee\u9898\u51fa\u5728\u54ea\u91cc\u3002\n\u5b83\u5b58\u50a8\u6807\u8bb0\u6709\u65f6\u95f4\u6233\u7684\u5c0f\u4e8c\u8fdb\u5236BLOB\u548c\u5b83\u4eec\u6240\u5c5e\u7684\u540c\u6b65\u7ec4\u3002\n\u670d\u52a1\u5668\u8bd5\u56fe\u63d2\u5165\u8fd9\u4e48\u591a\u884c\u65f6\u4f1a\u5361\u4f4f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u6dfb\u52a0\u6d88\u606f\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u4f7f\u7528\u4e00\u7ec4INSERT\u8bed\u53e5\u6267\u884c\u4e00\u4e2a\u67e5\u8be2\u3002\u6211\u4eec\u7684CRDT\u6709\u51e0\u4e2a\u9650\u5236\uff1a\n\u6211\u4eec\u9700\u8981\u6839\u636e\u662f\u5426\u6dfb\u52a0\u4e86\u6d88\u606f\u6765\u66f4\u65b0Merkle Trie\u3002\n\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\u3002\u56e0\u4e3a\u6211\u4eec\u5c06\u65f6\u95f4\u6233\u4f5c\u4e3a\u4e3b\u952e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63d2\u5165\u5230MESSAGES_BINARY(.)\u3002\u503c(.)\u3002\u5728\u51b2\u7a81\u4e2d\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002ON CONFLICT\u5b50\u53e5\u544a\u8bc9\u5b83\u5728\u5b58\u5728\u51b2\u7a81\u65f6\u4e0d\u8981\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5e76\u590d\u5236\u4e3b\u952e\u4e0a\u7684\u51b2\u7a81\u3002\n\u66f4\u5927\u7684\u95ee\u9898\u662f#2\u3002\u6211\u4eec\u9700\u8981\u63d2\u5165\u7684\u7ed3\u679c\u624d\u80fd\u77e5\u9053\u662f\u5426\u63d2\u5165\u4e86\u884c\u3002\u5982\u679c\u5b83\u5df2\u63d2\u5165\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0Merkle trie\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u65f6\u95f4\u6233\u53ea\u63d2\u5165Merkle Trie\u4e00\u6b21\u3002TRIE\u8d1f\u8d23\u4fdd\u8bc1\u7cfb\u7edf\u4e2d\u7684\u4e00\u81f4\u6027\uff0c\u5e76\u7ef4\u62a4\u5185\u5bb9\u7684\u6563\u5217\u3002\u5982\u679c\u60a8\u6ca1\u6709\u4e3a\u6bcf\u4e2a\u65f6\u95f4\u6233\u6dfb\u52a0\u4e00\u6b21\u4e14\u4ec5\u6dfb\u52a0\u4e00\u6b21\uff0c\u5219\u6563\u5217(\u56e0\u6b64\u9a8c\u8bc1)\u662f\u9519\u8bef\u7684\u3002\n\u66f4\u65b0\u6570\u636e\u5e93\u7684\u6574\u4e2a\u4ee3\u7801\u5982\u4e0b\u6240\u793a(\u4f7f\u7528node-postgres\u4e0a\u7684\u4e00\u4e9b\u62bd\u8c61)\uff1a\n\u8fd9\u5927\u90e8\u5206\u662f\u771f\u6b63\u7684\u4ee3\u7801\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u6211\u4eec\u8fd8\u4f1a\u5728\u5931\u8d25\u65f6\u56de\u6eda\u4e8b\u52a1\u3002\u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u8fd9\u53d1\u751f\u5728\u4e8b\u52a1\u4e2d\uff0c\u5e76\u4e14\u6d88\u606f\u548cMerkle Trie\u90fd\u662f\u539f\u5b50\u66f4\u65b0\u7684\u3002\u540c\u6837\uff0cMerkle trie\u9a8c\u8bc1\u6d88\u606f\u5185\u5bb9\uff0c\u5e76\u4e14\u5b83\u4eec\u5fc5\u987b\u59cb\u7ec8\u540c\u6b65\u3002\u5982\u679c\u6ca1\u6709\u540c\u6b65\u9519\u8bef\uff0c\u7528\u6237\u5c06\u770b\u5230\u8fd9\u4e9b\u9519\u8bef\u3002\n\u95ee\u9898\u4e00\u76ee\u4e86\u7136\uff1a\u6211\u4eec\u5206\u522b\u4e3a\u6bcf\u6761\u6d88\u606f\u6267\u884cINSERT\u67e5\u8be2\u3002\u5728\u6211\u4eec\u7684\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8bd5\u56fe\u6267\u884c169,000\u6761\u8bed\u53e5\u3002PostgreSQL\u4f4d\u4e8e\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4e0a(\u4f46\u5f88\u63a5\u8fd1)\uff0c\u4ec5\u8fdb\u884c\u5982\u6b64\u591a\u7684\u7f51\u7edc\u8c03\u7528\u5c31\u4f1a\u964d\u4f4e\u6027\u80fd\uff0c\u66f4\u4e0d\u7528\u8bf4PG\u5f00\u9500\u4e86\u3002\n\u6211\u77e5\u9053\u8fd9\u5f88\u6162\uff0c\u4f46\u6211\u6ca1\u6709\u610f\u8bc6\u5230\u901f\u5ea6\u6709\u591a\u6162\u3002\u8ba9\u6211\u4eec\u6d4b\u8bd5\u4e00\u4e2a\u66f4\u5408\u7406\u6570\u91cf\u7684\u5b9e\u9645\u7ed3\u675f\u7684\u6d88\u606f\u30024000\u6761\u6d88\u606f\u9700\u89816.9\u79d2\u624d\u80fd\u5b8c\u6210\u3002\u8fd9\u53ea\u662f\u5206\u6790\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6ca1\u6709\u8003\u8651\u7f51\u7edc\u4f20\u8f93\u3002\n\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u7528\u6237\u4f53\u9a8c\u95ee\u9898\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u5750\u5728\u90a3\u91cc\u89c2\u770b\u540c\u6b65\u56fe\u6807\u65cb\u8f6c\u548c\u65cb\u8f6c\u548c\u65cb\u8f6c\u2026\u3002\n\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u54ea\u4e9b\u6d88\u606f\u5df2\u7ecf\u5b58\u5728\u5e76\u5c06\u5176\u8fc7\u6ee4\u6389\uff0c\u4f46\u8fd9\u5c06\u9700\u8981\u4ee3\u4ef7\u9ad8\u6602\u7684SELECT\u67e5\u8be2(\u53ef\u80fd\u9700\u8981\u5206\u89e3\u67e5\u8be2\uff0c\u56e0\u4e3a\u60a8\u4e0d\u60f3\u4f20\u9012169,000\u4e2a\u53c2\u6570)\u3002\u6211\u7684\u53e6\u4e00\u4e2a\u60f3\u6cd5\u662f\u63d2\u5165\u5177\u6709\u552f\u4e00\u7f16\u53f7\u7684\u6d88\u606f\uff0c\u7136\u540e\u6211\u53ef\u4ee5\u67e5\u8be2\u54ea\u4e9b\u6d88\u606f\u5177\u6709\u8be5\u552f\u4e00\u7f16\u53f7\uff0c\u56e0\u4e3a\u53ea\u6709\u65b0\u7684\u6d88\u606f\u624d\u4f1a\u5177\u6709\u8be5\u552f\u4e00\u7f16\u53f7\u3002\n\u5173\u7cfb\u6570\u636e\u5e93(\u4e0e\u952e-\u503c\u76f8\u6bd4)\u7684\u4f18\u70b9\u5728\u4e8e\uff0c\u5b83\u4eec\u5f80\u5f80\u5bf9\u8fd9\u7c7b\u95ee\u9898\u6709\u5065\u58ee\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5fc5\u987b\u6709\u529e\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u8fd9\u79cd\u6a21\u5f0f\u5e76\u4e0d\u6df1\u5965\u3002\u6211\u5b66\u5230\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u5982\u4f55\u7528\u4e00\u6761INSERT\u8bed\u53e5\u63d2\u5165\u591a\u884c\uff1a\n\u8fd9\u6bd4\u5c06\u591a\u4e2aINSERT\u8bed\u53e5\u8fde\u63a5\u5230\u4e00\u4e2a\u67e5\u8be2\u4e2d\u8981\u597d\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u66f4\u5feb\uff0c\u800c\u4e14\u6700\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u5f97\u5230\u5173\u4e8e\u53d1\u751f\u4e86\u4ec0\u4e48\u7684\u4fe1\u606f\u3002\n\u5728\u641c\u7d22\u6587\u6863\u65f6\uff0c\u6211\u53d1\u73b0\u4e86INSERT\u8bed\u53e5\u7684RETURNING\u5b50\u53e5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPostgreSQL\u5728\u6267\u884cINSERT\u65f6\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u9664\u4e86\u66f4\u6539\u7684\u884c\u6570\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u786e\u5b9e\u63d2\u5165\u5230\u8868(\u503c)\u503c(1)\u4e2d\uff0c\u8fd4\u56deid\uff0c\u5b83\u5c06\u8fd4\u56de\u65b0\u884c\u7684id\u3002\n\u6700\u5927\u7684\u95ee\u9898\u662f\u8fd9\u662f\u5426\u5982\u6211\u6240\u613f\uff1a\u5f53\u4f7f\u7528\u5177\u6709\u591a\u4e2a\u9879\u7684INSERT\u8bed\u53e5\u5e76\u4e14\u51b2\u7a81\u65f6\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u65f6\uff0c\u5b83\u662f\u5426\u53ea\u8fd4\u56de\u5b9e\u9645\u63d2\u5165\u7684\u9879\u7684ID\u6570\u7ec4\uff1f\u6211\u6000\u7591\u5b83\u53ef\u80fd\u4f1a\u8fd4\u56de\u6240\u6709\u9879\u76ee\u7684ID\uff0c\u5373\u4f7f\u5b83\u4eec\u51b2\u7a81(\u5e76\u4e14\u6ca1\u6709\u63d2\u5165)\u3002\n\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u5feb\u901f\u811a\u672c\u6765\u6d4b\u8bd5\u8be5\u884c\u4e3a\uff0c\u5e76\u4e14\uff1a\u7b54\u5bf9\u4e86\u3002\u5f52\u6765\u5c31\u662f\u6211\u60f3\u8981\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6d4b\u8bd5\uff1a\n\u6267\u884c\u6b64\u67e5\u8be2\u65f6\uff0c\u5982\u679c\u65f6\u95f4\u6233\u4e3a1\u7684\u6d88\u606f\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u53ea\u4f1a\u63d2\u51652\u548c3\uff0c\u5e76\u8fd4\u56de\u6570\u7ec4[{id\uff1a&#39\uff1b2&#39\uff1b}\uff0c{id\uff1a&#39\uff1b3&#39\uff1b}]\u3002\u5bbe\u679c\uff0c\u90a6\u6208\uff0c\u90a6\u6208\u3002\n\u8fd4\u56de\u5141\u8bb8\u6211\u5c06\u6240\u6709\u8fd9\u4e9b\u5de5\u4f5c\u51cf\u5c11\u5230\u5355\u4e2a\u67e5\u8be2\u4e2d\u3002\u6211\u53ef\u4ee5\u4f7f\u7528\u7ed3\u679c\u786e\u5207\u5730\u77e5\u9053\u6dfb\u52a0\u4e86\u54ea\u4e9b\u6d88\u606f\uff0c\u5e76\u9002\u5f53\u5730\u66f4\u65b0Merkle trie\u3002\n\u65b0\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002\u6211\u4ecd\u5728\u5ba1\u6838PG-Promise\u52a9\u624b\u7684\u5b89\u5168\u6027\uff1a\n\u60a8\u6ca1\u770b\u9519\uff1a\u4ee5\u524d\u5904\u740640000\u6761\u6d88\u606f\u9700\u898159\u79d2\uff0c\u73b0\u5728\u53ea\u9700\u89817.2\u79d2\u3002\u6211\u4eec\u80fd\u591f\u5904\u740610\u500d\u6570\u91cf\u7684\u6d88\u606f\uff01\nUPDATE\uff1aSQL\u751f\u6210\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u9519\u8bef\uff0c\u5bfc\u81f4\u6bcf\u6761\u6570\u636e\u90fd\u6bd4\u9700\u8981\u7684\u5927(\u4e8c\u8fdb\u5236BLOB\u7f16\u7801\u9519\u8bef)\uff0c\u56e0\u6b64\u751f\u6210\u7684INSERT\u8bed\u53e5\u5927\u7ea6\u5c0f\u4e8625%\uff0c\u73b0\u5728\u5904\u740640000\u6761\u6d88\u606f\u53ea\u9700\u8981\u5927\u7ea65\u79d2\u3002\n\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u6211\u4eec\u7684\u57fa\u51c6169,000\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u55ef\uff0c\u7ed3\u679c\u8fd8\u662f\u6709\u4e0a\u9650\u7684\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u8fbe\u5230\u4e86PostgreSQL\u7684\u9650\u5236\uff0c\u6ca1\u6709\u5feb\u901f\u89e3\u51b3\u7684\u529e\u6cd5\u3002\n\u5728\u5904\u7406169,000\u4e2a\u6570\u636e\u65f6\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\u8282\u70b9\u5d29\u6e83\u3002pg-Promise\u4e2d\u7684pgp.helpers.insert\u5e2e\u52a9\u5668\u5728\u4f20\u9012\u8be5\u6570\u91cf\u7684\u9879\u76ee\u65f6\u4f1a\u5bfc\u81f4\u5d29\u6e83\u3002\u4e0d\u77e5\u9053\u786e\u5207\u7684\u539f\u56e0\uff0c\u4f46\u8fd9\u4e0d\u503c\u5f97\u8c03\u67e5\uff0c\u56e0\u4e3a\u8fd8\u6709\u5176\u4ed6\u95ee\u9898\u3002\n\u9996\u5148\uff0c169,000\u4e2a\u9879\u76ee\u9700\u898121Mb\u7684\u4e0a\u4f20\u6709\u6548\u8d1f\u8f7d\u3002\u8fd9\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u5931\u8d25\u7684\u53ef\u80fd\u6027\u592a\u5927\u4e86\u3002\n\u5982\u679c\u6211\u4eec\u5c06\u57fa\u51c6\u964d\u4f4e\u5230100,000\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u66f4\u8fdc\u7684\u7ed3\u679c\u3002\u751f\u6210\u7684\u591a\u503cINSERT\u8bed\u53e5\u662f\u4e00\u4e2a72MB\u7684\u5b57\u7b26\u4e32\u3002\u5c1d\u8bd5\u6267\u884c\u8fd9\u4e2a\u5e9e\u5927\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u7b80\u5355\u5730\u4f7f\u7528\u2026\u3002\u6302\u8d77\u6574\u4e2a\u670d\u52a1\u5668\u3002\u6211\u4e0d\u786e\u5b9a\u95ee\u9898\u51fa\u5728\u54ea\u91cc\uff0c\u6216\u8005PostgreSQL\u8bbe\u7f6e\u662f\u5426\u53ef\u4ee5\u8c03\u6574\u6765\u5904\u7406\u5b83\uff0c\u4f46\u540c\u6837\uff0c\u6211\u4eec\u6839\u672c\u65e0\u6cd5\u5904\u7406\u8fd9\u79cd\u5927\u5c0f\u7684\u4e1c\u897f\u3002\n\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5bfb\u547c\u6d88\u606f\u540c\u6b65\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u8bf7\u6c42\u8bbe\u7f6e\u4e0a\u9650\u3002\u5408\u7406\u7684\u9650\u5236\u4f3c\u4e4e\u662f40,000\u6761\u6d88\u606f\u3002\u5728\u8fd9\u4e2a\u5927\u5c0f\u4e0b\uff0c\u4e0a\u4f20\u7684\u6709\u6548\u8d1f\u8f7d\u662f5MB\uff0c\u5904\u7406\u9700\u89817\u79d2(\u5b83\u4ecd\u7136\u4f1a\u751f\u6210\u4e00\u4e2a30MB\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\uff0cPostgreSQL\u4f1a\u5f88\u9ad8\u5174\u5730\u5904\u7406\u5b83\uff01)\u3002\u8981\u5904\u7406169,000\u6761\u6d88\u606f\uff0c\u6211\u4eec\u5c06\u53d1\u90015\u4e2a\u8bf7\u6c42\uff0c\u6bcf\u4e2a\u8bf7\u6c4240,000\u6761\u6d88\u606f(\u6216\u4efb\u4f55\u5269\u4f59\u7684\u6d88\u606f)\u3002\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u8bf7\u6c42\u7684\u603b\u65f6\u95f4\u5c06\u662f169000/40000*7\u621629.6\u79d2\u3002\u53ea\u8981\u6211\u4eec\u5411\u7528\u6237\u663e\u793a\u8fdb\u5ea6\uff0c\u5bf9\u4e8e\u5982\u6b64\u5de8\u5927\u7684\u53d8\u66f4\u96c6\u6765\u8bf4\u8fd8\u4e0d\u9519\u3002\n\u8fd9\u662f\u6700\u574f\u7684\u60c5\u51b5\u3002\u6211\u4eec\u901a\u5e38\u4e0d\u5904\u7406\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u8303\u56f4\u3002\u6700\u5e38\u89c1\u7684\u540c\u6b65\u64cd\u4f5c\u5904\u740610-200\u6761\u6d88\u606f\uff0c\u8fd9\u4e9b\u6d88\u606f\u572820ms\u5185\u540c\u6b65\u3002\u8fd9\u7edd\u5bf9\u662f\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u6709\u4eba\u6bcf\u79d2\u8fdb\u884c\u6570\u5343\u6b21\u66f4\u6539\uff0c\u7136\u540e\u8bd5\u56fe\u7a0d\u540e\u540c\u6b65\uff0c\u8fd9\u79cd\u60c5\u51b5\u51e0\u4e4e\u4ece\u6765\u6ca1\u6709\u53d1\u751f\u8fc7\u3002\u4f46\u662f\u5982\u679c\u7528\u6237\u6ee5\u7528API\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5904\u7406\u5b83\u3002\n\u4e0e\u4e0a\u8ff0\u95ee\u9898\u65e0\u5173\u7684\u662f\uff0c\u6211\u60f3\u505a\u6700\u540e\u4e00\u4e2a\u6539\u8fdb\u3002\u7531\u4e8eMerkle trie\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u56e0\u6b64\u670d\u52a1\u5668\u9700\u8981\u83b7\u53d6\u5b83\u3001\u66f4\u6539\u5b83\uff0c\u7136\u540e\u5c06\u5176\u5b58\u50a8\u56de\u53bb\u3002\u8fd9\u610f\u5473\u7740\u5f53\u6211\u4eec\u6b63\u5728\u5904\u7406Trie\u65f6\uff0c\u6ca1\u6709\u5176\u4ed6\u8fde\u63a5\u53ef\u4ee5\u540c\u65f6\u66f4\u6539Trie\u3002\n\u5f53\u524d\u7684\u89e3\u51b3\u65b9\u6848\u4f7f\u7528\u949d\u9524\u6765\u89e3\u51b3\u5b83\uff1a\u4e92\u65a5\u3002\u4e92\u65a5\u9501\u56f4\u7ed5\u540c\u6b65\u903b\u8f91\u9501\u5b9a\u6bcf\u4e2a\u7528\u6237\uff0c\u56e0\u6b64\u7528\u6237\u53ef\u4ee5\u5e76\u53d1\u540c\u6b65\uff0c\u4f46\u5982\u679c\u540c\u4e00\u7528\u6237\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u540c\u6b65\uff0c\u5219\u5b83\u4eec\u5c06\u88ab\u5e8f\u5217\u5316\u3002\u8fd9\u662f\u5fc5\u8981\u7684\uff0c\u4ee5\u907f\u514d\u7ade\u8d5b\u6761\u4ef6\uff0c\u540c\u65f6\u66f4\u65b0Merkle Trie(\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5b83\u4fdd\u6301\u673a\u667a)\u3002\n\u770b\u8d77\u6765\u4e8b\u52a1\u7684\u53ef\u5e8f\u5217\u5316\u9694\u79bb\u7ea7\u522b\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u60a8\u4f7f\u7528BEGIN TRANSACTION ISOLATION\u7ea7\u522bSERIALIZABLE\u542f\u52a8\u4e8b\u52a1\uff0c\u5982\u679cPostgreSQL\u68c0\u6d4b\u5230\u5b83\u4eec\u4e4b\u95f4\u53ef\u80fd\u51fa\u73b0\u4e89\u7528\u6761\u4ef6\uff0c\u5b83\u5c06\u4e2d\u6b62\u4e8b\u52a1\u3002\u6211\u4e0d\u80fd100%\u786e\u5b9a\u5b83\u662f\u5426\u9002\u7528\u4e8e\u6211\u5728\u540c\u4e00\u4e8b\u52a1\u4e2d\u8bfb\u53d6\u67d0\u4e9b\u5185\u5bb9\u5e76\u7a0d\u540e\u5c06\u5176\u5199\u56de\u7684\u7528\u4f8b\uff0c\u4f46\u5982\u679c\u53ef\u4ee5\uff0c\u5982\u679c\u4e8b\u52a1\u5931\u8d25\uff0c\u6211\u4f1a\u91cd\u65b0\u542f\u52a8\u5b83\u3002\u56e0\u6b64\uff0c\u6bcf\u4e2a\u540c\u6b65\u8fc7\u7a0b\u90fd\u4f1a\u88ab\u5e8f\u5217\u5316\u3002\u5982\u679c\u4f60\u77e5\u9053\u8fd9\u4ef6\u4e8b\uff0c\u6211\u5f88\u4e50\u610f\u542c\u5230\u4f60\u7684\u6d88\u606f\u3002\n\u6211\u8fd8\u6ca1\u6709\u628a169,000\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u653e\u5728\u540c\u6b65\u7684\u5ba2\u6237\u7aef\u90e8\u5206\u3002\u5ba2\u6237\u7aef\u5728\u540c\u6b65\u65f6\u4f1a\u505a\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u64a4\u9500\u6302\u94a9\u5230\u7cfb\u7edf\u4e2d\uff0c\u6240\u4ee5\u4ecd\u7136\u6709\u5f88\u591a\u9700\u8981\u4f18\u5316\u7684\u5730\u65b9\u3002\u6211\u6000\u7591\u5b83\u73b0\u5728\u662f\u5426\u80fd\u5904\u7406169,000\u6761\u6d88\u606f\uff0c\u4f46\u6211\u786e\u4fe1\u5b83\u80fd\u5904\u740640,000\u6761\u6d88\u606f\u3002\u6211\u8ba4\u4e3a\u5c06\u540c\u6b65\u5206\u621040,000\u4e2a\u5757\u7684\u60f3\u6cd5\u4f1a\u5f88\u6709\u6548\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u5411\u7528\u6237\u663e\u793a\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u7ecf\u5904\u7406\u4e86\u591a\u5c11\u6761\u6d88\u606f\u7684\u53cd\u9988\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u9488\u5bf9\u6781\u7aef\u60c5\u51b5\u8fdb\u884c\u4f18\u5316\u662f\u5f88\u68d2\u7684\u3002\u8fd9\u91cc9-10\u500d\u7684\u6539\u8fdb\u53ef\u4ee5\u6e17\u900f\u5230\u5360\u8bf7\u6c4295%\u7684\u5c0f\u5f97\u591a\u7684\u6848\u4f8b\u4e2d\u3002\u73b0\u5728\uff0c\u4ee5\u524d\u9700\u8981100\u6beb\u79d2\u7684\u8bf7\u6c42\u5c06\u9700\u8981\u5927\u7ea610\u6beb\u79d2\u3002\u592a\u68d2\u4e86\uff01\n\u81f4\u529b\u4e8e\u5b9e\u9645\u5de5\u4f5c\u5e76\u5f15\u5bfc\u5b83\u3002\u6211\u5199\u7684\u662f\u6211\u4e00\u8def\u8d70\u6765\u6240\u5b66\u5230\u7684\u4e1c\u897f\u3002", "note_en": "At the very heart of  Actual is a custom syncing engine. Recently I implemented full end-to-end encryption (not released yet) and it inspired me to audit the performance of the whole process. In the future I&#39;ll blog more about using CRDTs for syncing, but for now I&#39;d like to talk about a PostgreSQL feature that enabled a 9-10x performance improvement.\n Actual is completely a local app and syncing happens in the background (using  CRDTs). This means the server is very simple and all it has to do is store and fetch &#34;messages&#34; for clients. The entire code for handling syncing is only ~200 lines of JavaScript.\n We need to handle  a lot of messages to keep syncing fast. In fact, while working on this something strange happened: a new user generated 169,000 messages on one day. This is an outlier by a  huge margin. For example, importing 1000 transactions into the system would generate about 6000 messages and, while reasonable, is still more than the average number of message per day per user. I believe they did this by using the API trying to bulk import a lot of data and we have  different APIs for that. Still, I thought, what if I made  169,000 my benchmark?\n I tried pumping 169,000 messages through the system and broke the server. The request timed out and the server was still crunching through messages making everything else slow. I knew what the problem was instantly.\n   It stores small binary blobs marked with a timestamp and a &#34;sync group&#34; they belong to.\n The server was choking trying to insert so many rows. Unfortunately, we can&#39;t simply execute one query with a bunch of  INSERT statements when adding messages. Our CRDTs have a few constraints:\n We need to update a  merkle trie depending on whether or not the message was added\n Solving  #1 is easy. Because we made  timestamp the primary key, we can do  INSERT INTO messages_binary (...) VALUES (...) ON CONFLICT DO NOTHING. The  ON CONFLICT clause tells it to do nothing when there&#39;s a conflict, and duplicates conflict on primary key.\n A much bigger problem is  #2. We need the  result of the insert to know if a row was inserted or not. If it was inserted, we need to also update our merkle trie like this:\n  It&#39;s extremely important that each timestamp in the system only ever get inserted to the merkle trie once. The trie is responsible for guaranteeing consistency in the system and maintains hashes for the content. If you haven&#39;t added each timestamp once and only once, the hashes (and thus verification) are wrong.\n The whole code for updating the database looks like this (using some abstractions over  node-postgres):\n  This is mostly the real code, the only difference is we also rollback the transaction on failure. It&#39;s  extremely important that this happens in a transaction and both the messages and merkle trie are updated  atomically. Again, the merkle trie verifies the messages content and they must always be in sync. The user will see sync errors if they are not.\n The problem is immediately clear: we are executing an  INSERT query for each message individually. In our extreme case we are trying to execute 169,000 statements. PostgreSQL lives on a different server (but close) and making that many network calls alone is going to kill performance, not to mention PG overhead.\n I knew this was slow, but I didn&#39;t realize how slow. Let&#39;s test a more reasonable number of messages that actually finishes.  4000 messages takes 6.9s to complete. This is just profiling the above code, and not taking into account network transfer.\n This is a  huge UX issue. While this is processing the user is sitting there watching the &#34;sync&#34; icon spin and spin and spin\u2026\n   We could check which messages already exist and filter them out, but that would require an expensive  SELECT query (that would probably need to be broken up because you wouldn&#39;t want to pass 169,000 parameters). Another idea I had was to insert messages with a unique number, and then afterwards I can query which messages have that unique number since only the new ones would have it.\n The beauty of relational databases (compared to key-value) is they tend to have robust solutions for these kinds of problems. There  had to be a way to do this because this pattern is not esoteric. The first thing I learned was how to insert multiple rows with a single  INSERT statement:\n  This is better than concatenating multiple  INSERT statements into one query because it&#39;s probably faster, and most importantly we have hope of getting back information about what happened.\n Scouring the docs I discovered the   RETURNING clause of an  INSERT statement. By default PostgreSQL doesn&#39;t return anything when doing  INSERT except the number of rows that changed. But if you do  INSERT INTO table (value) VALUES (1) RETURNING id it will return the id of the new row.\n The big question was if this did what I wanted: when using an  INSERT statement with multiple items and  ON CONFLICT DO NOTHING, will it return an array of ids of  only the items that were actually inserted? I was suspicious it might return the ids of all the items even if they conflicted (and weren&#39;t inserted).\n I wrote a quick script to test the behavior and:  bingo.  RETURNING does exactly what I want. Here&#39;s a test:\n  When executing this query, if a message with timestamp of  1 already exists, this will only insert  2 and  3 and return an array  [{ id: &#39;2&#39; }, { id: &#39;3&#39; }]. Bingo bango bongo.\n RETURNING allows me to reduce all of this work down into a single query. I can use the results to know exactly which messages were added and update the merkle trie appropriately.\n The new code looks something like this. I&#39;m still  auditing the safety of the  pg-promise helper:\n    You read that right: previously it took  59 seconds to process 40000 messages and now it only takes 7.2 seconds. We&#39;re able to process 10 times the amount of messages!\n Update: There was an error in the SQL generation causing each piece of data to be larger than needed (the binary blob encoding was wrong) so the generated INSERT statement is about 25% smaller, and 40000 messages is now processed in ~5 seconds.\n  You might be wondering what happened to 169,000, our benchmark? Well, turns out there&#39;s still an upper limit. This time we&#39;re hitting a PostgreSQL limit and there isn&#39;t a quick fix.\n When processing 169,000, the first problem is that, well, node crashes. The  pgp.helpers.insert helper from  pg-promise causes the crash when passed that number of items. Not exactly sure why, but it&#39;s not worth investigating because there are other problems.\n First, 169,000 items requires an upload payload of 21MB. That&#39;s unacceptable because the chances of that failing is too large.\n If we scale the benchmark down to 100,000, we get something that gets further. The multi-value  INSERT statement that is generated is a  72MB string. Trying to execute this massive query string simply\u2026 hangs the whole server. I&#39;m not sure where the problem is, or if PostgreSQL settings could be tuned to handle it, but again we simply can&#39;t handle something of this size.\n The better solution is to page message syncing and have an upper limit per request. A good limit seems to be 40,000 messages. At the size, the upload payload is 5MB and it takes 7 seconds to process (it still generates a 30MB query string which PostgreSQL happily processes!). To process 169,000 messages, we&#39;d send 5 requests each which 40,000 messages (or whatever is leftover). The total time to process all of them would be  169000 / 40000 * 7 or 29.6 seconds. As long as we display the progress to the user, not bad for such a gigantic changeset.\n This is the worst case scenario. We&#39;re not normally dealing with timeframes in seconds. The most common syncing operations deal with 10-200 messages which syncs within 20ms. This is absolutely the worst case, like somebody is hitting the API with thousands of changes per second and trying to sync later, which almost never happens. But we should be able to handle it if a user abuses the API.\n  Unrelated to the above problem, there is one last improvement I&#39;d like to make. Since the merkle trie is stored in the database, the server needs to fetch it, change it, then store it back. That means no other connections can concurrently change the trie while we&#39;re working on it.\n The current solution uses a blunt hammer to solve it: a mutex. The mutex locks per user around the syncing logic, so users can concurrently sync, but if the same user syncs on multiple devices, they will be serialized. This is necessary to avoid race conditions while updating the merkle trie (remember, it&#39;s extremely important that it stays in tact).\n It looks like the  Serializable Isolation Level for transactions might solve this. You start the transaction with  BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE, and PostgreSQL will abort a transaction if it detects that race conditions might occur between them. I&#39;m not 100% sure if it will work with my use case where I read something and write it back later in the same transaction, but if it does, if a transaction fails I&#39;d just restart it. So each syncing process would get serialized. I&#39;d love to hear from you if you know anything about this.\n  I haven&#39;t thrown the 169,000 benchmark at the client part of syncing yet. The client does more work when syncing because a lot of other things like undo hooks into the system, so there is still a lot to optimize there. I doubt it would handle a case of 169,000 messages right now anyway, but I&#39;m sure it could handle 40,000 messages. I think the idea of paging the syncing into 40,000 blocks would work well though, and would be easy to show feedback to the user of how many messages have been processed so far.\n No matter what, it&#39;s great to optimize for the extreme cases. The 9-10x improvement here trickles down to the far smaller cases that make up 95% of the requests. Now a request that took 100ms before will take ~10ms. Snappy!\n    Working on  Actual and bootstrapping it. I write about what I&#39;m learning along the way.", "posttime": "2020-06-15 00:58:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgresql,\u6027\u80fd,\u5f00\u542f,\u6d88\u606f", "title": "PostgreSQL\u4e2d\u7684\u4e00\u4e2a\u5b57\u5f00\u542f\u4e869\u500d\u7684\u6027\u80fd\u63d0\u5347", "title_en": "One word in PostgreSQL unlocked a 9x performance improvement", "transed": 1, "url": "https://jlongster.com/how-one-word-postgresql-performance", "via": "", "real_tags": ["\u6027\u80fd", "\u5f00\u542f", "\u6d88\u606f"]}, {"category": "", "categoryclass": "", "imagename": "59f86cf74ccf11b3ad386227d5bad277.png", "infoid": 1006546, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u9762\u5411PHP\u5f00\u53d1\u4eba\u5458\u7684\u7cfb\u5217\u5e16\u5b50\u4e2d\u7684\u7b2c\u4e00\u7bc7\u3002\u672c\u7cfb\u5217\u5c06\u89e3\u91ca\u5982\u4f55\u5728PHP\u4e2d\u4f7f\u7528\u65e0\u670d\u52a1\u5668\u6280\u672f\u3002\u5b83\u6db5\u76d6\u4e86\u6784\u5efa\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u7528\u5de5\u5177\u3001\u6846\u67b6\u548c\u7b56\u7565\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u73b0\u5728\u662f\u5f00\u59cb\u7684\u5408\u9002\u65f6\u673a\u3002\n\u5728\u4ee5\u540e\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u6f14\u793a\u5982\u4f55\u5c06AWS Lambda\u7528\u4e8e\u4f7f\u7528Laravel\u548cSymfony\u7b49PHP\u6846\u67b6\u6784\u5efa\u7684Web\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u5c55\u793a\u4e86\u5982\u4f55\u4ece\u4f7f\u7528Lambda\u4f5c\u4e3aweb\u6258\u7ba1\u529f\u80fd\u7684\u66ff\u4ee3\u54c1\u8f6c\u5411\u89e3\u8026\u7684\u3001\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u6cd5\u3002\u6211\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u8303\u56f4\u6700\u5c0f\u7684\u591a\u4e2aLambda\u51fd\u6570\u4e0e\u5176\u4ed6\u65e0\u670d\u52a1\u5668\u670d\u52a1\u76f8\u7ed3\u5408\uff0c\u4ee5\u521b\u5efa\u9ad8\u6027\u80fd\u3001\u53ef\u4f38\u7f29\u7684\u5fae\u670d\u52a1\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u5728Lambda\u4e2d\u4f7f\u7528PHP\u3002\u8bf7\u8bbf\u95ee\u6b64GitHub\u5b58\u50a8\u5e93\u83b7\u53d6\u793a\u4f8b\u4ee3\u7801\u3002\n\u53ef\u4f38\u7f29\u6027\u662f\u4f20\u7edfLAMP\u5806\u6808\u56fa\u6709\u7684\u6311\u6218\u3002\u53ef\u4f38\u7f29\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u53ef\u4ee5\u5904\u7406\u9ad8\u5ea6\u53ef\u53d8\u7684\u6d41\u91cf\u7ea7\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u3002PHP\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u901a\u8fc7\u6839\u636e\u9700\u8981\u6dfb\u52a0\u66f4\u591aWeb\u670d\u52a1\u5668\u6765\u6c34\u5e73\u6269\u5c55\u3002\u8fd9\u662f\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u8fdb\u884c\u7ba1\u7406\u7684\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u8bf7\u6c42\u5b9a\u5411\u5230\u5404\u79cdWeb\u670d\u52a1\u5668\u3002\u6bcf\u589e\u52a0\u4e00\u53f0\u670d\u52a1\u5668\u90fd\u4f1a\u5e26\u6765\u989d\u5916\u7684\u7f51\u7edc\u3001\u7ba1\u7406\u3001\u5b58\u50a8\u5bb9\u91cf\u3001\u5907\u4efd\u548c\u6062\u590d\u7cfb\u7edf\u4ee5\u53ca\u8d44\u4ea7\u7ba1\u7406\u5e93\u5b58\u66f4\u65b0\u65b9\u9762\u7684\u5f00\u9500\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u6c34\u5e73\u6269\u5c55\u7684\u670d\u52a1\u5668\u90fd\u72ec\u7acb\u8fd0\u884c\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u914d\u7f6e\u540c\u6b65\u6311\u6218\u3002\n\u65b0\u7684\u5b58\u50a8\u6311\u6218\u51fa\u73b0\u4e86\uff0c\u56e0\u4e3a\u6bcf\u53f0\u670d\u52a1\u5668\u90fd\u6709\u81ea\u5df1\u7684\u78c1\u76d8\u548c\u6587\u4ef6\u7cfb\u7edf\uff0c\u901a\u5e38\u9700\u8981\u5f00\u53d1\u4eba\u5458\u6dfb\u52a0\u4e00\u79cd\u673a\u5236\u6765\u5904\u7406\u7528\u6237\u4f1a\u8bdd\u3002\u4f7f\u7528\u65e0\u670d\u52a1\u5668\u6280\u672f\uff0c\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u7ba1\u7406\u53ef\u4f38\u7f29\u6027\u3002\n\u5982\u679c\u6d41\u91cf\u6fc0\u589e\uff0c\u670d\u52a1\u53ef\u4ee5\u6269\u5c55\u4ee5\u6ee1\u8db3\u9700\u6c42\uff0c\u800c\u65e0\u9700\u90e8\u7f72\u989d\u5916\u7684\u670d\u52a1\u5668\u3002\u8fd9\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5feb\u901f\u4ece\u539f\u578b\u8fc7\u6e21\u5230\u751f\u4ea7\u3002\n\u5bf9\u52a8\u6001\u5185\u5bb9\u7684\u6240\u6709\u8bf7\u6c42(\u9664/Assets/*\u4ee5\u5916\u7684\u4efb\u4f55\u5185\u5bb9)\u90fd\u4f1a\u8f6c\u53d1\u5230Amazon API Gateway\u3002\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u6258\u7ba1\u7684\u670d\u52a1\uff0c\u7528\u4e8e\u521b\u5efa\u3001\u53d1\u5e03\u548c\u4fdd\u62a4\u4efb\u4f55\u89c4\u6a21\u7684API\u3002\u5b83\u5145\u5f53PHP\u5e94\u7528\u7a0b\u5e8f\u7684\u201c\u524d\u95e8\u201d\uff0c\u5c06\u8bf7\u6c42\u5411\u4e0b\u8def\u7531\u5230Lambda\u51fd\u6570\u3002Lambda\u51fd\u6570\u5305\u542b\u4e1a\u52a1\u903b\u8f91\u4ee5\u53ca\u4e0eMySQL\u6570\u636e\u5e93\u7684\u4ea4\u4e92\u3002\u60a8\u53ef\u4ee5\u5c06\u8f93\u5165\u4f5c\u4e3a\u8bf7\u6c42\u5934\u3001\u8def\u5f84\u53d8\u91cf\u3001\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u548c\u6b63\u6587\u7684\u4efb\u610f\u7ec4\u5408\u4f20\u9012\u7ed9Lambda\u51fd\u6570\u3002\n\u5728Re\uff1aInvent2017\u671f\u95f4\uff0cAWS\u53d1\u5e03\u4e86Aurora Serverless\uff0c\u8fd9\u662f\u4e00\u79cd\u6309\u9700\u65e0\u670d\u52a1\u5668\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u91c7\u7528\u6309\u4f7f\u7528\u4ed8\u8d39\u6a21\u5f0f\u3002\u8fd9\u4e3a\u5f00\u53d1\u4eba\u5458\u7ba1\u7406\u63d0\u4f9b\u548c\u6269\u5c55\u5173\u7cfb\u6570\u636e\u5e93\u7684\u8d23\u4efb\u3002\n\u5728Re\uff1aInvent2018\u4e0a\uff0cAWS\u5ba3\u5e03\u4e86\u4e24\u9879\u65b0\u7684Lambda\u529f\u80fd\u3002\u8fd9\u4e9b\u4f7f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u6784\u5efa\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\uff0c\u5e76\u5728\u51fd\u6570\u4e4b\u95f4\u5171\u4eab\u548c\u7ba1\u7406\u516c\u5171\u4ee3\u7801\u3002\n2019\u5e749\u6708\uff0cAWS\u5ba3\u5e03\u5bf9\u79c1\u6709\u7f51\u7edc\u5185Lambda\u529f\u80fd\u7684\u51b7\u542f\u52a8\u8fdb\u884c\u4e86\u91cd\u5927\u6539\u8fdb\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u529f\u80fd\u542f\u52a8\u6027\u80fd\uff0c\u63d0\u9ad8\u4e86\u5f39\u6027\u7f51\u7edc\u63a5\u53e3\u7684\u4f7f\u7528\u6548\u7387\uff0c\u51cf\u5c11\u4e86VPC\u51b7\u542f\u52a8\u3002\n\u5728Re\uff1aInvent2019\u5e74\uff0cAWS\u5ba3\u5e03\u63a8\u51fa\u4e00\u9879\u540d\u4e3aAmazon RDS Proxy\u7684\u65b0\u670d\u52a1\u3002\u4f4d\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u5173\u7cfb\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u5b8c\u5168\u6258\u7ba1\u6570\u636e\u5e93\u4ee3\u7406\u3002\u5b83\u9ad8\u6548\u5730\u6c47\u96c6\u548c\u5171\u4eab\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4ee5\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u4f38\u7f29\u6027\u3002\n\u5c06\u8fd9\u4e9b\u670d\u52a1\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u4f7f\u7528PHP\u548c\u5173\u7cfb\u6570\u636e\u5e93\u6784\u5efa\u5b89\u5168\u3001\u9ad8\u6548\u3001\u53ef\u4f38\u7f29\u7684\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002\n\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u652f\u6301\u4ee5\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u6216\u7279\u5b9a\u8bed\u8a00\u7248\u672c\u6267\u884cLambda\u51fd\u6570\u3002\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u9700\u8981\u4e00\u4e2a\u79f0\u4e3a\u5f15\u5bfc\u7684\u53ef\u6267\u884c\u6587\u672c\u6587\u4ef6\u3002\u5f15\u5bfc\u6587\u4ef6\u8d1f\u8d23\u4ee3\u7801\u548cLambda\u73af\u5883\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\n\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\uff0c\u60a8\u5fc5\u987b\u9996\u5148\u5728\u4e0eLambda\u6267\u884c\u73af\u5883\u517c\u5bb9\u7684Amazon Linux\u73af\u5883\u4e2d\u7f16\u8bd1\u6240\u9700\u7248\u672c\u7684PHP\u3002\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u5206\u6b65\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002\n\u4e0b\u9762\u7684\u6587\u4ef6\u662f\u4e00\u4e2a\u57fa\u672cPHP\u5f15\u5bfc\u6587\u4ef6\u7684\u793a\u4f8b\u3002\u6b64\u793a\u4f8b\u7528\u4e8e\u8bf4\u660e\u76ee\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u53d1\u751f\u9519\u8bef\u5904\u7406\u6216\u62bd\u8c61\u3002\u8981\u786e\u4fdd\u6b63\u786e\u5904\u7406\u5f02\u5e38\uff0c\u8bf7\u5728\u6784\u5efa\u751f\u4ea7\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\u53c2\u8003\u8fd0\u884c\u65f6API\u6587\u6863\u3002\n#\uff01/opt/bin/php&lt\uff1b\uff1fPHP//\u8fd9\u5c06\u8c03\u7528Composer\u7684\u81ea\u52a8\u52a0\u8f7d\u5668\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528GUZZE\u548c\u4efb\u4f55\u5176\u4ed6\u6211\u4eec\u9700\u8981\u7684\u7b2c\u4e09\u65b9\u5e93\u3002\u9700\u8981__DIR__\u3002&#39\uff1b/vendor/autoload.php\uff1b//\u8fd9\u662f\u8bf7\u6c42\u5904\u7406\u5faa\u73af\u3002\u9664\u975e\u51fa\u73b0\u4e0d\u53ef\u6062\u590d\u7684\u6545\u969c\uff0c\u5426\u5219\u6b64\u5faa\u73af\u5c06\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u73af\u5883\u5173\u95ed\u3002do{//\u5411\u8fd0\u884c\u65f6API\u8bf7\u6c42\u8981\u5904\u7406\u7684\u8bf7\u6c42\u3002$request=getNextRequest()\uff1b//\u4ece_HANDLER\u73af\u5883\u53d8\u91cf\u83b7\u53d6\u51fd\u6570\u540d\u79f0\uff0c\u5e76\u786e\u4fdd\u51fd\u6570\u7684\u4ee3\u7801\u53ef\u7528\u3002$handlerFunction=ARRAY_SLICE(EXPLODE(&#39\uff1b.&#39\uff1b\uff0c$_ENV[&#39\uff1b_HANDLER&#39\uff1b])\uff0c-1)[0]\uff1bREQUIRED_ONCE$_ENV[&#39\uff1bLAMBDA_TASK_ROOT&#39\uff1b]\u3002&#39\uff1b/src/&#39\uff1b\u3002$handlerFunction\u3002&#39\uff1b.php\uff1b//\u6267\u884c\u6240\u9700\u51fd\u6570\u5e76\u83b7\u53d6\u54cd\u5e94\u3002$Response=$handlerFunction($request[&#39\uff1bpayload&#39\uff1b])\uff1b//\u5c06\u54cd\u5e94\u63d0\u4ea4\u56de\u8fd0\u884c\u65f6\u63a5\u53e3\u3002sendResponse($request[&#39\uff1binvocationId&#39\uff1b]\uff0c$Response)\uff1b}While(TRUE)\uff1b\u51fd\u6570getNextRequest(){$Client=NEW\\GuzzleHttp\\Client()\uff1b$Response=$Client-&gt\uff1bGET(&#39\uff1bhttp://&#39\uff1b\u3002$_ENV[&#39\uff1bAWS_Lambda_Runtime_API&#39\uff1b]\u3002&#39\uff1b/2018-06-01/runtime/invocation/next&#39\uff1b)\uff1b\u8fd4\u56de[&#39\uff1binvocationId&#39\uff1b=&gt\uff1b$response-&gt\uff1bgetHeader(&#39\uff1bLambda-Runtime-Aws-Request-Id&#39\uff1b)[0]\uff0c&#39\uff1b\u6709\u6548\u8d1f\u8f7d&#39\uff1b=&gt\uff1bjson_decode((String)$Response-&gt\uff1bgetBody()\uff0ctrue)]\uff1b}\u51fd\u6570sendResponse($invocationId\uff0c$Response){$Client=NEW\\GuzzleHttp\\Client()\uff1b$Client-&gt\uff1b\u53d1\u5e03(&#39\uff1bhttp://&#39\uff1b\u3002$_ENV[&#39\uff1bAWS_Lambda_Runtime_API&#39\uff1b]\u3002&#39\uff1b/2018-06-01/\u8fd0\u884c\u65f6/\u8c03\u7528/&#39\uff1b\u3002$invocationId\u3002&#39\uff1b/Response&#39\uff1b\uff0c[&#39\uff1bBody&#39\uff1b=&gt\uff1b$Response])\uff1b}\n#\uff01/opt/bin/php\u58f0\u660e\u6307\u793a\u7a0b\u5e8f\u52a0\u8f7d\u5668\u4f7f\u7528\u4e3aAmazon Linux\u7f16\u8bd1\u7684PHP\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5c06\u5f15\u5bfc\u5305\u548c\u7f16\u8bd1\u540e\u7684PHP\u4e8c\u8fdb\u5236\u6587\u4ef6\u6253\u5305\u6210`runtime.zip`\u3002\n\u8fd0\u884c\u65f6\u5f15\u5bfc\u4f7f\u7528\u57fa\u4e8eHTTP\u7684\u672c\u5730\u63a5\u53e3\u3002\u8fd9\u5c06\u68c0\u7d22\u6bcf\u4e2aLambda\u51fd\u6570\u8c03\u7528\u7684\u4e8b\u4ef6\u6709\u6548\u8d1f\u8f7d\uff0c\u5e76\u8fd4\u56de\u51fd\u6570\u7684\u54cd\u5e94\u3002\u6b64\u5f15\u5bfc\u6587\u4ef6\u4f7f\u7528\u975e\u5e38\u6d41\u884c\u7684PHP HTTP\u5ba2\u6237\u7aefGUZLE\u5411\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u53d1\u51fa\u8bf7\u6c42\u3002GUZLE\u8f6f\u4ef6\u5305\u662f\u4f7f\u7528Composer\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5b89\u88c5\u7684\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b89\u88c5\u5305\u521b\u5efa\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u7528\u4e8e\u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u53d1\u5c55\u5408\u5e76\u5176\u4ed6\u5e93\u548c\u4f9d\u8d56\u9879\u3002\nLambda\u5c42\u63d0\u4f9b\u4e86\u4e00\u79cd\u96c6\u4e2d\u7ba1\u7406\u8de8\u591a\u4e2a\u529f\u80fd\u5171\u4eab\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\u673a\u5236\u3002\u5f53Lambda\u51fd\u6570\u914d\u7f6e\u4e86\u5c42\u65f6\uff0c\u5c42\u7684\u5185\u5bb9\u4f1a\u653e\u5165\u6267\u884c\u73af\u5883\u7684/opt\u76ee\u5f55\u4e2d\u3002\u60a8\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u90e8\u7f72\u5305\u4e2d\u5305\u542b\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u5c42\u5305\u542b\u3002Lambda\u6267\u884c\u90e8\u7f72\u5305\u4e2d\u7684\u5f15\u5bfc\u6587\u4ef6(\u5982\u679c\u53ef\u7528)\u3002\u5982\u679c\u6ca1\u6709\uff0cLambda\u5c06\u5728\u51fd\u6570\u5c42\u4e2d\u67e5\u627e\u8fd0\u884c\u65f6\u3002\u76ee\u524d\u6709\u51e0\u4e2a\u5f00\u653e\u6e90\u7801PHP\u8fd0\u884c\u65f6\u5c42\u53ef\u7528\uff0c\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\n\u4ee5\u4e0b\u6b65\u9aa4\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e4b\u524d\u521b\u5efa\u7684`runtime.zip`\u548c`vendor.zip`\u4e8c\u8fdb\u5236\u6587\u4ef6\u53d1\u5e03\u5230Lambda\u5c42\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u901a\u8fc7PHP\u8fd0\u884c\u65f6\u6784\u5efaLambda\u51fd\u6570\uff1a\n\u4f7f\u7528AWS\u547d\u4ee4\u884c\u754c\u9762(CLI)\u53d1\u5e03\u5148\u524d\u521b\u5efa\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u56fe\u5c42\u3002\n\u8bb0\u4e0b\u6bcf\u4e2a\u547d\u4ee4\u7684LayerVersionArn\u8f93\u51fa\u503c(\u4f8b\u5982\uff0c\u4e0b\u4e00\u6b65\u9700\u8981\u4f7f\u7528\u7684arn:aws:lambda:eu-west-1:XXXXXXXXXXXX:layer:PHP-example-runtime:1)\uff0c)\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7AWS CLI\u3001AWS\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u6a21\u578b(SAM)\u6216\u76f4\u63a5\u5728AWS\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\u521b\u5efaLambda\u51fd\u6570\u3002\u8981\u4f7f\u7528\u63a7\u5236\u53f0\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u5728Function Name\u5b57\u6bb5\u4e2d\u8f93\u5165\u201cPHPHello\u201d\uff0c\u7136\u540e\u5728Runtime\u5b57\u6bb5\u4e2d\u9009\u62e9Provide Your Our Bootstrap\u3002\u7136\u540e\u9009\u62e9\u521b\u5efa\u51fd\u6570\u3002\n\u9009\u62e9\u63d0\u4f9b\u5c42\u7248\u672cARN\uff0c\u7136\u540e\u5c06\u6b65\u9aa41\u4e2d\u7684\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\u5c42\u7684ARN\u590d\u5236\u5e76\u7c98\u8d34\u5230\u5c42\u7248\u672cARN\u5b57\u6bb5\u4e2d\u3002\n\u5728function Code\u90e8\u5206\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3asrc\u7684\u65b0\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aindex.php\u7684\u65b0\u6587\u4ef6\u3002\n\u5728\u5904\u7406\u7a0b\u5e8f\u8f93\u5165\u5b57\u6bb5\u4e2d\u63d2\u5165\u201cindex\u201d\u3002\u8fd9\u5c06\u6307\u793aLambda\u5728\u8c03\u7528\u65f6\u8fd0\u884c\u7d22\u5f15\u51fd\u6570\u3002\n\u9009\u62e9\u9875\u9762\u53f3\u4e0a\u89d2\u7684Test\uff0c\u5728Event Name\u5b57\u6bb5\u4e2d\u8f93\u5165\u201cPHPTest\u201d\u3002\u5728\u4e8b\u4ef6\u6709\u6548\u8d1f\u8f7d\u5b57\u6bb5\u4e2d\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff0c\u7136\u540e\u9009\u62e9\u521b\u5efa\uff1a{&#34\uff1bname&#34\uff1b\uff1a&#34\uff1bworld&#34\uff1b}\u3002\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u4e8b\u4ef6\u8d1f\u8f7d\u201cname\u201d\u503c\u7528\u4e8e\u8fd4\u56de\u201chello world\u201d\u3002\u5b83\u53d6\u81ea\u63d0\u4f9b\u7ed9lambda\u51fd\u6570\u7684$data[&#39\uff1bname&#39\uff1b]\u53c2\u6570\u3002\u65e5\u5fd7\u8f93\u51fa\u63d0\u4f9b\u6709\u5173\u7528\u4e8e\u6267\u884c\u4ee3\u7801\u7684\u5b9e\u9645\u6301\u7eed\u65f6\u95f4\u3001\u8ba1\u8d39\u6301\u7eed\u65f6\u95f4\u548c\u5185\u5b58\u91cf\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u89e3\u91ca\u4e86\u5982\u4f55\u4f7f\u7528Lambda\u5c42\u548c\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u5728PHP\u8fd0\u884c\u65f6\u521b\u5efaLambda\u51fd\u6570\u3002\u5b83\u4ecb\u7ecd\u4e86\u53ef\u968f\u5e94\u7528\u6d41\u91cf\u6269\u5c55\u7684\u65e0\u670d\u52a1\u5668LAMP\u5806\u6808\u7684\u67b6\u6784\u3002\nLambda\u5141\u8bb8\u5177\u6709\u6df7\u5408\u8fd0\u884c\u65f6\u7684\u51fd\u6570\u76f8\u4e92\u4ea4\u4e92\u3002\u73b0\u5728\uff0cPHP\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u52a0\u5165\u5176\u4ed6\u4e13\u6ce8\u4e8e\u4ea4\u4ed8\u4ee3\u7801\u7684\u65e0\u670d\u52a1\u5668\u5f00\u53d1\u56e2\u961f\u3002\u6709\u4e86\u65e0\u670d\u52a1\u5668\u6280\u672f\uff0c\u60a8\u4e0d\u518d\u9700\u8981\u8003\u8651\u91cd\u542f\u7f51\u7edc\u4e3b\u673a\u3001\u6269\u5c55\u6216\u6258\u7ba1\u3002", "note_en": "This is the first in a series of posts for PHP developers. The series will explain how to use serverless technologies with PHP. It covers the available tools, frameworks and strategies to build serverless applications, and why now is the right time to start.\n  In future posts, I demonstrate how to use  AWS Lambda for web applications built with PHP frameworks such as  Laravel and  Symfony. I show how to move from using Lambda as a replacement for web hosting functionality to a decoupled, event-driven approach. I cover how to combine multiple Lambda functions of minimal scope with other serverless services to create performant scalable microservices.\n  In this post, you learn how to use PHP with Lambda via the custom runtime API. Visit this  GitHub repository for the sample code.\n      Scalability is an inherent challenge with the traditional LAMP stack. A scalable application is one that can handle highly variable levels of traffic. PHP applications are often scaled horizontally, by adding more web servers as needed. This is managed via a load balancer, which directs requests to various web servers. Each additional server brings additional overhead with networking, administration, storage capacity, backup and restore systems, and an update to asset management inventories. Additionally, each horizontally scaled server runs independently. This can result in configuration synchronization challenges.\n    New storage challenges arise as each server has its own disks and filesystem, often requiring developers to add a mechanism to handle user sessions. Using serverless technologies, scalability is managed for the developer.\n  If traffic surges, the services scale to meet the demand without having to deploy additional servers. This allows applications to quickly transition from prototype to production.\n            All requests for dynamic content (anything excluding /assets/*) are forwarded to Amazon API Gateway. This is a fully managed service for creating, publishing, and securing APIs at any scale. It acts as the \u201cfront door\u201d to the PHP application, routing requests downstream to Lambda functions. The Lambda functions contain the business logic and interaction with the MySQL database. You can pass the input to the Lambda function as any combination of request headers, path variables, query string parameters, and body.\n      During re:Invent 2017, AWS announced Aurora Serverless, an on-demand serverless relational database with a pay-per-use cost model. This manages the responsibility of relational database provisioning and scaling for the developer.\n    At re:Invent 2018, AWS announced two new Lambda features. These enable developers to build custom runtimes, and share and manage common code between functions.\n    In September 2019, AWS announced significant\u00a0 improvements in cold starts for Lambda functions inside a VPC.\u00a0This results in faster function startup performance and more efficient usage of elastic network interfaces, reducing VPC cold starts.\n    At re:Invent 2019, AWS announced the launch of a new service called Amazon RDS Proxy. A fully managed database proxy that sits between your application and your relational database. It efficiently pools and shares database connections to improve the scalability of your application.\n      Combining these services, it is possible to build secure and performant scalable serverless applications with PHP and relational databases.\n    The custom runtime API is a simple interface to enable Lambda function execution in any programming language or a specific language version. The custom runtime API requires an executable text file called a bootstrap. The bootstrap file is responsible for the communication between your code and the Lambda environment.\n  To create a custom runtime, you must first compile the required version of PHP in an Amazon Linux environment compatible with the  Lambda execution environment. To do this, follow  these step-by-step instructions.\n    The file below is an example of a basic PHP bootstrap file. This example is for explanation purposes as there is no error handling or abstractions taking place. To ensure that you handle exceptions appropriately, consult the\u00a0 runtime API documentation\u00a0as you build production custom runtimes.\n  #!/opt/bin/php\r&lt;?PHP\r\r// This invokes Composer&#39;s autoloader so that we&#39;ll be able to use Guzzle and any other 3rd party libraries we need.\rrequire __DIR__ . &#39;/vendor/autoload.php;\r\r// This is the request processing loop. Barring unrecoverable failure, this loop runs until the environment shuts down.\rdo {\r // Ask the runtime API for a request to handle.\r $request = getNextRequest();\r\r // Obtain the function name from the _HANDLER environment variable and ensure the function&#39;s code is available.\r $handlerFunction = array_slice(explode(&#39;.&#39;, $_ENV[&#39;_HANDLER&#39;]), -1)[0];\r require_once $_ENV[&#39;LAMBDA_TASK_ROOT&#39;] . &#39;/src/&#39; . $handlerFunction . &#39;.php;\r\r // Execute the desired function and obtain the response.\r $response = $handlerFunction($request[&#39;payload&#39;]);\r\r // Submit the response back to the runtime API.\r sendResponse($request[&#39;invocationId&#39;], $response);\r} while (true);\r\rfunction getNextRequest()\r{\r $client = new \\GuzzleHttp\\Client();\r $response = $client-&gt;get(&#39;http://&#39; . $_ENV[&#39;AWS_LAMBDA_RUNTIME_API&#39;] . &#39;/2018-06-01/runtime/invocation/next&#39;);\r\r return [\r &#39;invocationId&#39; =&gt; $response-&gt;getHeader(&#39;Lambda-Runtime-Aws-Request-Id&#39;)[0],\r &#39;payload&#39; =&gt; json_decode((string) $response-&gt;getBody(), true)\r ];\r}\r\rfunction sendResponse($invocationId, $response)\r{\r $client = new \\GuzzleHttp\\Client();\r $client-&gt;post(\r &#39;http://&#39; . $_ENV[&#39;AWS_LAMBDA_RUNTIME_API&#39;] . &#39;/2018-06-01/runtime/invocation/&#39; . $invocationId . &#39;/response&#39;,\r [&#39;body&#39; =&gt; $response]\r );\r}\n  The  #!/opt/bin/php declaration instructs the program loader to use the PHP binary compiled for Amazon Linux.\n      Follow these steps to package the bootstrap and compiled PHP binary together into a `runtime.zip`.\n    The runtime bootstrap uses an HTTP-based local interface. This retrieves the event payload for each Lambda function invocation and returns back the response from the function. This bootstrap file uses  Guzzle, a\u00a0popular PHP HTTP client, to make requests to the custom runtime API. The Guzzle package is installed using  Composer\u00a0package manager. Installing packages in this way creates a mechanism for incorporating additional libraries and dependencies as the application evolves.\n    Lambda Layers provides a mechanism to centrally manage code and data that is shared across multiple functions. When a Lambda function is configured with a layer, the layer\u2019s contents are put into the /opt directory of the execution environment. You can include a custom runtime in your function\u2019s deployment package, or as a layer. Lambda executes the bootstrap file in your deployment package, if available. If not, Lambda looks for a runtime in the function\u2019s layers. There are several open source PHP runtime layers available today, most notably:\n    The following steps show how to publish the `runtime.zip` and `vendor.zip` binaries created earlier into Lambda layers and use them to build a Lambda function with a PHP runtime:\n  Use the  AWS Command Line Interface (CLI) to publish layers from the binaries created earlier\n  Make note of each command\u2019s LayerVersionArn output value (for example  arn:aws:lambda:eu-west-1:XXXXXXXXXXXX:layer:PHP-example-runtime:1), which you\u2019ll need for the next steps.\n    You can create a Lambda function via the AWS CLI, the  AWS Serverless Application Model (SAM), or directly in the  AWS Management Console. To do this using the console:\n  Enter \u201c PHPHello\u201d into the  Function name field, and choose  Provide your own bootstrap in the  Runtime field. Then choose  Create function.\n      Choose  Provide a layer version ARN, then copy and paste the ARN of the custom runtime layer from in step 1 into the  Layer version ARN field.\n    In the  Function Code section, create a new folder called  src and inside it create a new file called  index.php.\n    Insert \u201c index\u201d into the  Handler input field. This instructs Lambda to run the index function when invoked.\n    Choose  Test at the top right of the page, and \u00a0enter \u201c PHPTest\u201d into the  Event name field. Enter the following into the event payload field and then choose  Create: {\u00a0&#34;name&#34;: &#34;world&#34;}\n    You can see that the event payload \u201c name\u201d value is used to return \u201c hello world\u201d. This is taken from the  $data[&#39;name&#39;] parameter provided to the Lambda function. The log output provides details about the actual duration, billed duration, and amount of memory used to execute the code.\n    This post explains how to create a Lambda function with a PHP runtime using Lambda Layers and the custom runtime API. It introduces the architecture for a serverless LAMP stack that scales with application traffic.\n  Lambda allows for functions with mixed runtimes to interact with each other. Now, PHP developers can join other serverless development teams focusing on shipping code. With serverless technologies, you no longer have to think about restarting webhosts, scaling or hosting.", "posttime": "2020-06-15 00:58:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u670d\u52a1\u5668,lamp,php", "title": "\u65e0\u670d\u52a1\u5668\u706f\u5806", "title_en": "Serverless LAMP stack", "transed": 1, "url": "https://aws.amazon.com/blogs/compute/introducing-the-new-serverless-lamp-stack/", "via": "", "real_tags": ["\u670d\u52a1\u5668", "lamp", "php"]}]