[{"category": "", "categoryclass": "", "imagename": "e9663d00c30c5868fdf0ea43aac3064c.jpg", "infoid": 1005464, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "15\u5e74\u524d\uff0c\u6211\u4e0e\u4eba\u5171\u540c\u521b\u7acb\u4e86Reddit\uff0c\u5e2e\u52a9\u4eba\u4eec\u627e\u5230\u793e\u533a\u548c\u5f52\u5c5e\u611f\u3002\n\u65e9\u8be5\u505a\u6b63\u786e\u7684\u4e8b\u60c5\u4e86\u3002\u6211\u8fd9\u4e48\u505a\u662f\u4e3a\u4e86\u6211\u81ea\u5df1\uff0c\u4e3a\u4e86\u6211\u7684\u5bb6\u5ead\uff0c\u4e3a\u4e86\u6211\u7684\u56fd\u5bb6\u3002\n\u6211\u662f\u4ee5\u4e00\u4e2a\u7236\u4eb2\u7684\u8eab\u4efd\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\uff0c\u5f53\u4ed6\u7684\u9ed1\u4eba\u5973\u513f\u95ee\u6211\uff1a\u201c\u4f60\u505a\u4e86\u4ec0\u4e48\uff1f\u201d\n\u6211\u5df2\u7ecf\u8f9e\u53bb\u4e86Reddit\u8463\u4e8b\u4f1a\u6210\u5458\u7684\u804c\u52a1\uff0c\u6211\u6566\u4fc3\u4ed6\u4eec\u7528\u4e00\u4f4d\u9ed1\u4eba\u5019\u9009\u4eba\u586b\u8865\u6211\u7684\u5e2d\u4f4d\uff0c\u6211\u5c06\u5229\u7528\u6211\u6301\u6709\u7684Reddit\u80a1\u7968\u672a\u6765\u7684\u6536\u76ca\u6765\u670d\u52a1\u9ed1\u4eba\u793e\u533a\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u904f\u5236\u79cd\u65cf\u4ec7\u6068\uff0c\u6211\u5c06\u4ece\u627f\u8bfa\u5411\u79d1\u6797\u00b7\u51ef\u73c0\u5c3c\u514b(Colin Kaepernick)\u7684Know Your Rights Camp\u6350\u8d60100\u4e07\u7f8e\u5143\u5f00\u59cb\u3002\n\u6211\u76f8\u4fe1\u8f9e\u804c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u5f53\u6743\u8005\u7684\u4e00\u79cd\u9886\u5bfc\u884c\u4e3a\u3002\u5bf9\u6bcf\u4e2a\u4e3a\u4fee\u590d\u6211\u4eec\u652f\u79bb\u7834\u788e\u7684\u56fd\u5bb6\u800c\u6218\u7684\u4eba\u8bf4\uff1a\u4e0d\u8981\u505c\u6b62\u3002", "note_en": "I co-founded Reddit 15 years ago to help people find community and a sense of belonging.\n It is long overdue to do the right thing. I\u2019m doing this for me, for my family, and for my country.\n I\u2019m writing this as a father who needs to be able to answer his black daughter when she asks: \u201cWhat did you do?\u201d\n I have resigned as a member of the reddit board, I have urged them to fill my seat with a black\u00a0candidate, and I will use future gains on my Reddit stock to serve the black community, chiefly to curb racial hate, and I\u2019m starting with a pledge of $1M to Colin Kaepernick\u2019s   Know Your Rights Camp.\n I believe resignation can actually be an act of leadership from people in power right now.\u00a0To everyone fighting to fix our broken nation: do not stop.", "posttime": "2020-06-07 00:15:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "reddit", "title": "\u201c\u4f60\u505a\u4e86\u4ec0\u4e48\uff1f\u201d", "title_en": "\u201cWhat Did You Do?\u201d", "transed": 1, "url": "https://alexisohanian.com/home/2020/6/5/what-did-you-do", "via": "", "real_tags": ["reddit"]}, {"category": "", "categoryclass": "", "imagename": "f507c213a83924f09393f83428419b20.jpg", "infoid": 1005463, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u72ec\u7acb\u62a5\u201d\u5728\u4e16\u754c\u5404\u5730\u96c7\u4f63\u4e86100\u591a\u540d\u8bb0\u8005\uff0c\u4e3a\u60a8\u5e26\u6765\u503c\u5f97\u4fe1\u8d56\u7684\u65b0\u95fb\u3002\u8bf7\u8003\u8651\u6350\u6b3e\u6216\u8ba4\u8d2d\u3002\n\u4f5c\u4e3a\u4e0e\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u8ba1\u5212\u8fbe\u6210\u7684\u8d38\u6613\u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0c\u82f1\u56fd\u653f\u5e9c\u5c06\u5411\u4e3a\u964d\u4f4e\u7f8e\u56fd\u798f\u5229\u6807\u51c6\u800c\u751f\u4ea7\u7684\u98df\u54c1\u5f00\u653e\u82f1\u56fd\u5e02\u573a\u3002\n\u5510\u5b81\u8857(Downing Street)\u5468\u56db\u62d2\u7edd\u4fe1\u5b88\u65e9\u5148\u505a\u51fa\u7684\u5c06\u6240\u8c13\u7684\u201c\u6c2f\u5316\u9e21\u8089\u201d\u4ece\u82f1\u56fd\u8d27\u67b6\u4e0a\u64a4\u4e0b\u7684\u627f\u8bfa\uff0c\u8fd9\u662f\u82f1\u56fd\u653f\u5e9c\u5728\u7f8e\u56fd\u8d38\u6613\u8c08\u5224\u4ee3\u8868\u7684\u538b\u529b\u4e0b\u5012\u53f0\u7684\u7b2c\u4e00\u4e2a\u8ff9\u8c61\u3002\n\u636e\u62a5\u9053\uff0c\u5927\u81e3\u4eec\u6b63\u5728\u8003\u8651\u8ba9\u6c2f\u5316\u9e21\u8089\u548c\u6fc0\u7d20\u5582\u517b\u7684\u725b\u8089\u7b49\u4ea7\u54c1\u8fdb\u5165\u82f1\u56fd\u8d85\u5e02\uff0c\u4f46\u5bf9\u5b83\u4eec\u5f81\u6536\u5173\u7a0e\uff0c\u4ee5\u4fdd\u62a4\u82f1\u56fd\u519c\u6c11\u514d\u53d7\u7ade\u4e89\u3002\n\u6b64\u4e3e\u5c06\u4ee3\u8868\u7740\u5bf9\u76ee\u524d\u5f62\u52bf\u7684\u663e\u8457\u653e\u677e\uff0c\u5728\u76ee\u524d\u7684\u60c5\u51b5\u4e0b\uff0c\u9075\u5b88\u6b27\u6d32\u98df\u54c1\u7684\u9ad8\u798f\u5229\u548c\u536b\u751f\u6807\u51c6\u5f80\u5f80\u662f\u4e00\u9879\u8981\u6c42\u3002\n\u4f46\u5728\u76ee\u524d\u6b63\u5728\u7814\u7a76\u7684\u6240\u8c13\u201c\u53cc\u5173\u7a0e\u201d\u5236\u5ea6\u4e0b\uff0c\u7f8e\u56fd\u519c\u4e1a\u7efc\u5408\u4f01\u4e1a\u5c06\u88ab\u5141\u8bb8\u5728\u82f1\u56fd\u9500\u552e\u5546\u54c1\uff0c\u5373\u4f7f\u4ed6\u4eec\u6ca1\u6709\u9075\u5b88\u4e0e\u82f1\u56fd\u519c\u6c11\u76f8\u540c\u7684\u751f\u4ea7\u6807\u51c6-\u53ea\u8981\u4ed6\u4eec\u652f\u4ed8\u5173\u7a0e\u3002\n\u636e\u82f1\u56fd\u201c\u6bcf\u65e5\u7535\u8baf\u62a5\u201d\u62a5\u9053\uff0c\u53f3\u7ffc\u4eba\u58eb\u5229\u5179\u00b7\u7279\u62c9\u65af(Liz Truss)\u7b49\u4e00\u4e9b\u90e8\u957f\u5e0c\u671b\u8d70\u5f97\u66f4\u8fdc\uff0c\u572810\u5e74\u5185\u9010\u6b65\u5c06\u8fd9\u4e9b\u5173\u7a0e\u964d\u81f3\u96f6\uff0c\u8ba9\u519c\u6c11\u6709\u65f6\u95f4\u9002\u5e94\u65b0\u5e38\u6001\u3002\n\u4f46\u636e\u6089\uff0c\u53cc\u5173\u7a0e\u5236\u5ea6\u76ee\u524d\u6b63\u53d7\u5230\u90e8\u957f\u4eec\u7684\u9752\u7750\uff0c\u5168\u56fd\u519c\u6c11\u8054\u76df\u79f0\uff0c\u4e0e\u66f4\u6fc0\u8fdb\u7684\u63d0\u8bae\u76f8\u6bd4\uff0c\u6b64\u4e3e\u662f\u201c\u5411\u524d\u8fc8\u51fa\u7684\u4e00\u6b65\u201d\u3002\n\u4e00\u540d\u653f\u5e9c\u6d88\u606f\u4eba\u58eb\u5bf9\u8be5\u62a5\u8868\u793a\uff0c\u53cc\u5173\u7a0e\u65b9\u5f0f\u5c06\u4f7f\u82f1\u56fd\u751f\u4ea7\u5546\u76f8\u5bf9\u4e8e\u7f8e\u56fd\u62e5\u6709\u201c\u7ade\u4e89\u4f18\u52bf\u201d\u3002\n\u65e9\u57282017\u5e74\uff0c\u8fc8\u514b\u5c14\u00b7\u6208\u592b(Michael Gove)\u5c31\u8868\u793a\uff0c\u82f1\u56fd\u8d85\u5e02\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u79cd\u4ea7\u54c1\u8fdb\u5165\u3002\u5c31\u5728\u6700\u8fd1\u76841\u6708\u4efd\uff0c\u82f1\u56fd\u73af\u5883\u5927\u81e3\u7279\u857e\u838e\u00b7\u7ef4\u5229\u5c14\u65af(Theresa Villiers)\u544a\u8bc9\u519c\u6c11\uff1a\u201c\u6211\u4eec\u4e0d\u4f1a\u8fdb\u53e3\u6c2f\u5316\u9e21\u8089\u3002\u201d\n\u4f46\u81ea\u521d\u6b65\u4f1a\u8c08\u5f00\u59cb\u4ee5\u6765\uff0c\u968f\u7740\u8fd9\u4e00\u95ee\u9898\u5bf9\u7f8e\u56fd\u8c08\u5224\u7684\u91cd\u8981\u6027\u53d8\u5f97\u66f4\u52a0\u660e\u663e\uff0c\u90e8\u957f\u4eec\u7684\u7acb\u573a\u5df2\u7ecf\u660e\u663e\u8f6f\u5316\u3002\n\u8f93\u5165\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u8bf7\u8f93\u5165\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u65e0\u6548\u586b\u5199\u6b64\u5b57\u6bb5\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u65e0\u6548\u7535\u5b50\u90ae\u4ef6\u5df2\u5b58\u5728\u3002\u767b\u5f55\u4ee5\u66f4\u65b0\u60a8\u7684\u65f6\u4e8b\u901a\u8baf\u9996\u9009\u9879\u3002\n1\u6708\u5e95\uff0c\u7f8e\u56fd\u56fd\u52a1\u537f\u8fc8\u514b\u00b7\u5e9e\u76ae\u6b27(Mike Pompeo)\u8868\u793a\uff0c\u8fd9\u4e2a\u95ee\u9898\u5bf9\u7f8e\u56fd\u5229\u76ca\u5f88\u91cd\u8981\u3002\n\u201c\u6211\u4eec\u9700\u8981\u5f00\u8bda\u5e03\u516c\u5730\u5bf9\u5f85\u7ade\u4e89\u529b\u3002\u6211\u4eec\u9700\u8981\u786e\u4fdd\u6211\u4eec\u4e0d\u4f1a\u628a\u98df\u54c1\u5b89\u5168\u4f5c\u4e3a\u4e00\u4e2a\u8be1\u8ba1\u6765\u8bd5\u56fe\u4fdd\u62a4\u4e00\u4e2a\u7279\u5b9a\u7684\u884c\u4e1a\uff0c\u201c\u4ed6\u8bf4\u3002\n\u4eca\u5e742\u6708\uff0c\u65b0\u4efb\u73af\u5883\u5927\u81e3\u4e54\u6cbb\u00b7\u5c24\u65af\u8482\u65af(George Eust)\u53d1\u8868\u8bb2\u8bdd\u65f6\u53ea\u8868\u793a\uff0c\u82f1\u56fd\u201c\u6ca1\u6709\u8ba1\u5212\u201d\u6539\u53d8\u7981\u4ee4\uff0c\u4f46\u4e0d\u4f1a\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u505a\u51fa\u8fdb\u4e00\u6b65\u7684\u627f\u8bfa\u3002\n\u5176\u4ed6\u90e8\u957f\u58f0\u79f0\uff0c\u6c2f\u5316\u9e21\u8089\u4e0d\u662f\u95ee\u9898\uff0c\u4ed6\u4eec\u751a\u81f3\u4f1a\u5403\u6389\u5b83\u3002\n\u56fd\u4f1a\u8bae\u5458\u5bf9\u4e00\u9879\u53ef\u80fd\u7684\u8d38\u6613\u534f\u8bae\u8fdb\u884c\u7684\u8c03\u67e5\u88ab\u4e13\u5bb6\u544a\u77e5\uff0c\u5728\u536b\u751f\u548c\u98df\u54c1\u65b9\u9762\uff0c\u7f8e\u56fd\u201c\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u76d1\u7ba1\u201d\uff0c\u5141\u8bb8\u6765\u81ea\u7f8e\u56fd\u98df\u54c1\u7684\u7ade\u4e89\u5c06\u4f7f\u201c\u82f1\u56fd\u51e0\u4e4e\u4e0d\u53ef\u80fd\u6709\u597d\u7684\u65b0\u798f\u5229\u6cd5\u5f8b\u201d\u3002\n\u975e\u653f\u5e9c\u7ec4\u7ec7\u6307\u51fa\uff0c\u7f8e\u56fd\u519c\u6c11\u5bf9\u9e21\u8089\u8fdb\u884c\u6c2f\u6d17\u662f\u4fdd\u6301\u8bbe\u65bd\u6e05\u6d01\u7684\u53e6\u4e00\u79cd\u9009\u62e9\uff0c\u5728\u52a8\u7269\u9972\u6599\u4e2d\u4f7f\u7528\u751f\u957f\u6fc0\u7d20\uff0c\u4ee5\u53ca\u4f7f\u7528\u6b27\u76df\u548c\u82f1\u56fd\u7981\u6b62\u768482\u79cd\u4e0d\u540c\u7684\u6740\u866b\u5242\u3002\n\n\u5168\u56fd\u519c\u6c11\u8054\u76df(National Farmers\u2018Union)\u5728\u540c\u4e00\u9879\u8c03\u67e5\u4e2d\u8868\u793a\uff0c\u201c\u82f1\u56fd\u751f\u4ea7\u5546\u5f88\u9ad8\u5174\u6309\u7167\u76ee\u524d\u7684\u9ad8\u6807\u51c6\u751f\u4ea7\uff0c\u5e76\u613f\u610f\u7ee7\u7eed\u8fd9\u6837\u505a\u201d\u3002\n\u8be5\u7ec4\u7ec7\u8868\u793a\uff0c\u8d38\u6613\u534f\u5b9a\u4e0d\u5e94\u8be5\u5141\u8bb8\u8fdb\u53e3\u5728\u82f1\u56fd\u751f\u4ea7\u662f\u975e\u6cd5\u7684\u98df\u54c1\uff0c\u5b83\u5e0c\u671b\u6210\u7acb\u4e00\u4e2a\u72ec\u7acb\u7684\u59d4\u5458\u4f1a\u6765\u5ba1\u67e5\u8d38\u6613\u534f\u5b9a\u3002\n\u5f53\u88ab\u95ee\u53ca\u662f\u5426\u4fdd\u7559\u4e86\u5c06\u6c2f\u5316\u9e21\u8089\u4ece\u82f1\u56fd\u76d8\u5b50\u4e2d\u5254\u9664\u7684\u627f\u8bfa\u65f6\uff0c\u9996\u76f8\u7684\u5b98\u65b9\u53d1\u8a00\u4eba\u53ea\u8868\u793a\uff1a\u201c\u76ee\u524d\u7684\u7acb\u573a\u662f\uff0c\u82f1\u56fd\u5c06\u51b3\u5b9a\u5982\u4f55\u5236\u5b9a\u548c\u7ef4\u6301\u6211\u4eec\u81ea\u5df1\u7684\u6807\u51c6\u548c\u6cd5\u89c4\uff0c\u6211\u4eec\u5df2\u7ecf\u660e\u786e\u8868\u793a\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728\u98df\u54c1\u5b89\u5168\u548c\u52a8\u7269\u798f\u5229\u7684\u9ad8\u6807\u51c6\u4e0a\u59a5\u534f\u3002\u201d\n\u201c\u82f1\u56fd\u98df\u54c1\u76d1\u7ba1\u673a\u6784\u5c06\u7ee7\u7eed\u63d0\u4f9b\u72ec\u7acb\u5efa\u8bae\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u8fdb\u53e3\u98df\u54c1\u90fd\u7b26\u5408\u90a3\u4e9b\u9ad8\u5b89\u5168\u6807\u51c6.\u201d\n\u4e00\u4f4d\u653f\u5e9c\u53d1\u8a00\u4eba\u8bf4\uff1a\u201c\u82f1\u56fd\u4ee5\u5176\u9ad8\u7684\u73af\u5883\u3001\u98df\u54c1\u5b89\u5168\u548c\u52a8\u7269\u798f\u5229\u6807\u51c6\u800c\u95fb\u540d\u3002\u5728\u6211\u4eec\u7684\u6240\u6709\u8d38\u6613\u8c08\u5224\u4e2d-\u5305\u62ec\u6211\u4eec\u4e0e\u7f8e\u56fd\u5728\u7b2c\u4e00\u8f6e\u8c08\u5224\u4e2d\u7684\u8c08\u5224-\u6211\u4eec\u90fd\u660e\u786e\u8868\u793a\uff0c\u6211\u4eec\u4e0d\u4f1a\u901a\u8fc7\u5728\u4efb\u4f55\u534f\u8bae\u4e2d\u786e\u4fdd\u82f1\u56fd\u519c\u6c11\u59cb\u7ec8\u80fd\u591f\u7ade\u4e89\uff0c\u6765\u7834\u574f\u6211\u4eec\u9ad8\u7684\u56fd\u5185\u73af\u5883\u4fdd\u62a4\u3001\u52a8\u7269\u798f\u5229\u548c\u98df\u54c1\u5b89\u5168\u6807\u51c6\u3002\u201c\n\u60a8\u53ef\u80fd\u4e0d\u540c\u610f\u6211\u4eec\u7684\u89c2\u70b9\uff0c\u4e5f\u53ef\u80fd\u4e0d\u540c\u610f\u5176\u4ed6\u7528\u6237\u7684\u89c2\u70b9\uff0c\u4f46\u8bf7\u606d\u656c\u5730\u56de\u5e94\u3002\n\u5492\u9a82\u3001\u4eba\u8eab\u8fb1\u9a82\u3001\u79cd\u65cf\u4e3b\u4e49\u3001\u6027\u522b\u6b67\u89c6\u3001\u4ec7\u89c6\u540c\u6027\u604b\u548c\u5176\u4ed6\u6b67\u89c6\u6027\u6216\u717d\u52a8\u6027\u7684\u8bed\u8a00\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002\n\u60a8\u53ef\u80fd\u4e0d\u540c\u610f\u6211\u4eec\u7684\u89c2\u70b9\uff0c\u4e5f\u53ef\u80fd\u4e0d\u540c\u610f\u5176\u4ed6\u7528\u6237\u7684\u89c2\u70b9\uff0c\u4f46\u8bf7\u606d\u656c\u5730\u56de\u5e94\u3002\n\u5492\u9a82\u3001\u4eba\u8eab\u8fb1\u9a82\u3001\u79cd\u65cf\u4e3b\u4e49\u3001\u6027\u522b\u6b67\u89c6\u3001\u4ec7\u89c6\u540c\u6027\u604b\u548c\u5176\u4ed6\u6b67\u89c6\u6027\u6216\u717d\u52a8\u6027\u7684\u8bed\u8a00\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002\n\u60f3\u8981\u8ba8\u8bba\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\uff0c\u53c2\u4e0e\u6700\u5f15\u4eba\u5165\u80dc\u7684\u8ba8\u8bba\uff0c\u542c\u53d6\u8bb0\u8005\u7684\u610f\u89c1\u5417\uff1f\u7acb\u5373\u5f00\u59cb\u60a8\u7684\u72ec\u7acb\u9ad8\u7ea7\u8ba2\u9605\u3002\n\u5df2\u7ecf\u6ce8\u518c\u4e86\uff1f\u767b\u5165\u3002\n\u72ec\u7acb\u9ad8\u7ea7\u8bc4\u8bba\u53ef\u4ee5\u7531\u6211\u4eec\u4f1a\u5458\u8ba1\u5212\u7684\u6210\u5458\u53d1\u5e03\uff0c\u72ec\u7acb\u9ad8\u7ea7\u3002\u5b83\u5141\u8bb8\u6211\u4eec\u53c2\u4e0e\u5ea6\u6700\u9ad8\u7684\u8bfb\u8005\u8fa9\u8bba\u91cd\u5927\u95ee\u9898\uff0c\u5206\u4eab\u4ed6\u4eec\u81ea\u5df1\u7684\u7ecf\u9a8c\uff0c\u8ba8\u8bba\u73b0\u5b9e\u4e16\u754c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7b49\u7b49\u3002\u6211\u4eec\u7684\u8bb0\u8005\u5c06\u5c1d\u8bd5\u56de\u5e94\uff0c\u5728\u4ed6\u4eec\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u52a0\u5165\u8fd9\u4e9b\u5e16\u5b50\uff0c\u4ee5\u521b\u9020\u4e00\u6b21\u771f\u6b63\u7684\u72ec\u7acb\u6ea2\u4ef7\u4f1a\u8bae\u3002\u5173\u4e8e\u6240\u6709\u4e3b\u9898\u7684\u6700\u6709\u6d1e\u5bdf\u529b\u7684\u8bc4\u8bba\u5c06\u6bcf\u5929\u53d1\u8868\u5728\u4e13\u95e8\u7684\u6587\u7ae0\u4e2d\u3002\u60a8\u4e5f\u53ef\u4ee5\u9009\u62e9\u5728\u6709\u4eba\u56de\u590d\u60a8\u7684\u8bc4\u8bba\u65f6\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u6ca1\u6709\u8ba2\u9605\u72ec\u7acb\u9ad8\u7ea7\u7684\u4eba\uff0c\u73b0\u6709\u7684\u5f00\u653e\u8bc4\u8bba\u7ebf\u7a0b\u5c06\u7ee7\u7eed\u5b58\u5728\u3002\u7531\u4e8e\u8fd9\u4e2a\u8bc4\u8bba\u793e\u533a\u7684\u5de8\u5927\u89c4\u6a21\uff0c\u6211\u4eec\u4e0d\u80fd\u5bf9\u6bcf\u4e2a\u5e16\u5b50\u7ed9\u4e88\u540c\u7b49\u7a0b\u5ea6\u7684\u5173\u6ce8\uff0c\u4f46\u51fa\u4e8e\u516c\u5f00\u8fa9\u8bba\u7684\u5229\u76ca\uff0c\u6211\u4eec\u4fdd\u7559\u4e86\u8fd9\u4e00\u533a\u57df\u3002\u8bf7\u7ee7\u7eed\u5c0a\u91cd\u6240\u6709\u8bc4\u8bba\u8005\uff0c\u5e76\u8fdb\u884c\u5efa\u8bbe\u6027\u7684\u8fa9\u8bba\u3002", "note_en": "The Independent employs over 100 journalists around the world to bring you news you can trust. Please consider a  contribution or  subscription.\n  The government is set to open British markets to food produced to lower US welfare standards as part of its planned trade deal with  Donald Trump.\n  Downing Street on Thursday refused to stand by an earlier pledge to keep so-called \u201cchlorinated chicken\u201d off UK shelves, in the first sign of the government folding under pressure from American trade negotiators.\n    Ministers are reportedly considering letting in products like chlorinated chicken and hormone-fed beef into British supermarkets, but applying tariffs to them to protect UK-based farmers from competition.\n            The move would represent a significant loosening of the current situation, where complying with high European welfare and sanitary standards for food is often a requirement.\n    But under the so-called \u201cdual tariff\u201d system being looked at, American agribusiness would be allowed to sell goods in the UK even if they were not complying with the same production standards as British farmers \u2013 as long as they pay a tariff.\n  Some ministers, such as right-winger Liz Truss, want to go further, the  Daily Telegraph  reports \u2013 and gradually reduce these tariffs to zero over 10 years, giving farmers time to adjust to the new normal.\n      But it is understood that the dual-tariff system is now being favoured by ministers, a move the National Farmers\u2019 Union described as a \u201cstep forward\u201d compared to the more radical proposals.\n  A government source told the newspaper that a dual-tariff approach would give UK producers a \u201ccompetitive advantage\u201d over the US.\n    Back in 2017 Michael Gove said there would be no such products allowed into British supermarkets, and as recently as January Theresa Villiers, the environment secretary, told farmers: \u201cWe will not be importing chlorinated chicken\u201d.\n  But since the opening of preliminary talks, ministers have significantly softened their line as the importance of the issue for US negotiations has become more clear.\n         Enter your email address      Please enter an email address  Email address is invalid  Fill out this field  Email address is invalid  Email already exists. Log in to update your newsletter preferences\n  At the end of January, Mike Pompeo, the US secretary of state, said the issue was important to US interests.\n  \u201cWe need to be open and honest about competitiveness. We need to make sure we don\u2019t use food safety as a ruse to try and protect a particular industry,\u201d he said.\n  Speaking in February this year, the new environment secretary George Eustice would say only that the UK had \u201cno plans\u201d to change a ban but would not make further commitments on the issue.\n     Other ministers have claimed that chlorinated chicken is not a problem and that they would go as far as eating it.\n  An inquiry by MPs into a possible trade deal was told by experts that the US \u201chas almost no regulations\u201d when it comes to sanitation and food and that allowing competition from US foods would make it \u201calmost impossible for the UK to ever have good new welfare laws\u201d.\n  NGOs pointed to the chlorine washing of chicken by US farmers as an alternative to keeping facilities clean, the use of growth hormone in animal feed, and the use of 82 different pesticides that are banned in the EU and UK.\n     \n  The National Farmers\u2019 Union told the same inquiry that \u201cUK producers are happy producing to the high standards they currently produce to and would like to continue to do that\u201d.\n  The organisation says trade agreements shouldn\u2019t allow the import of food that would be illegal to produce in the UK and that it wants an independent commission set up to review trade agreements.\n  Asked whether the promise to keep chlorinated chicken off UK plates remained, the prime minister\u2019s official spokesperson would only say: \u201cThe position is that the UK will decide how we set and maintain our own standards and regulations and we have been clear that we will not compromise on our high standards of food safety and animal welfare.\n  \u201cThe UK\u2019s food regulators will continue to provide independent advice to ensure that all food imports comply with those high safety standards.\u201d\n  A government spokesperson said: \u201cThe UK is renowned for its high environmental, food safety and animal welfare standards. We have been clear that in all of our trade negotiations \u2013 including with the US in our first round of negotiations \u2013 that we will not undermine our high domestic environmental protection, animal welfare and food safety standards by ensuring in any agreement British farmers are always able to compete.\u201d\n              You may not agree with our views, or other users\u2019, but please respond to them respectfully\n  Swearing, personal abuse, racism, sexism, homophobia and other discriminatory or inciteful language is not acceptable\n    You may not agree with our views, or other users\u2019, but please respond to them respectfully\n  Swearing, personal abuse, racism, sexism, homophobia and other discriminatory or inciteful language is not acceptable\n                 Want to discuss real-world problems, be involved in the most engaging discussions and hear from the journalists? Start your Independent Premium subscription today.\n       Already registered?  Log in\n          Independent Premium Comments can be posted by members of our membership scheme, Independent Premium. It allows our most engaged readers to debate the big issues, share their own experiences, discuss real-world solutions, and more. Our journalists will try to respond by joining the threads when they can to create a true meeting of independent Premium. The most insightful comments on all subjects will be published daily in dedicated articles. You can also choose to be emailed when someone replies to your comment.\n  The existing Open Comments threads will continue to exist for those who do not subscribe to Independent Premium. Due to the sheer scale of this comment community, we are not able to give each post the same level of attention, but we have preserved this area in the interests of open debate. Please continue to respect all commenters and create constructive debates.", "posttime": "2020-06-07 00:14:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ea4\u6613,\u51c6\u5907,ready,\u82f1\u56fd", "title": "\u653f\u5e9c\u51c6\u5907\u5411\u7f8e\u56fd\u8d38\u6613\u4ea4\u6613\u7684\u6c2f\u5316\u9e21\u8089\u5f00\u653e\u82f1\u56fd\u5e02\u573a", "title_en": "Government ready to open British markets to chlorinated chicken for US tradedeal", "transed": 1, "url": "https://www.independent.co.uk/news/uk/politics/chlorinated-chicken-british-markets-us-trade-deal-trump-a9548431.html", "via": "", "real_tags": ["\u4ea4\u6613", "\u51c6\u5907", "ready", "\u82f1\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005462, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u65af\u9686&&gt;LearningEdge&&gt;\u4eff\u771f&&gt;\u5e73\u53f0\u6218\u4e89\uff1a\u6a21\u62df\u89c6\u9891\u6e38\u620f\u9738\u4e3b\u5730\u4f4d\u4e4b\u6218\u3002\n\u6458\u8981\u5728\u8fd9\u4e2a\u57fa\u4e8e\u7f51\u7edc\u7684\u73b0\u573a\u6a21\u62df\u4e2d\uff0c\u53c2\u4e0e\u8005\u626e\u6f14\u89c6\u9891\u6e38\u620f\u786c\u4ef6\u5e73\u53f0\u751f\u4ea7\u5546(\u5982\u7d22\u5c3c\u3001\u4efb\u5929\u5802\u6216\u5fae\u8f6f)\u7684\u9ad8\u7ea7\u7ba1\u7406\u4eba\u5458\u7684\u89d2\u8272\u3002\u8be5\u6a21\u62df\u4ee5\u63cf\u8ff0\u7d22\u5c3cPlayStation3\u53d1\u5e03\u7684\u914d\u5957\u6848\u4f8b\u7814\u7a76\u4e3a\u57fa\u7840\uff0c\u63a2\u7d22\u4e86\u591a\u8fb9\u5e02\u573a\u7684\u7ade\u4e89\u52a8\u6001\u3002\u5728\u8fd9\u6837\u7684\u5e02\u573a\u4e2d\uff0c\u6210\u529f\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u4ea7\u54c1\u7684\u4ef7\u683c\u548c\u529f\u80fd\uff0c\u8fd8\u53d6\u51b3\u4e8e\u6709\u591a\u5c11\u4eba\u62e5\u6709\u5b83(\u76f4\u63a5\u7684\u7f51\u7edc\u5916\u90e8\u6027)\uff0c\u4ee5\u53ca\u53ef\u7528\u7684\u6e38\u620f\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u91cf-\u5373\u8865\u5145\u4ea7\u54c1\u7684\u5b89\u88c5\u57fa\u6570\u7684\u5927\u5c0f(\u95f4\u63a5\u7684\u7f51\u7edc\u5916\u90e8\u6027)\u3002\u5e73\u53f0\u5e02\u573a\u5728\u89c6\u9891\u6e38\u620f\u4ee5\u5916\u7684\u73af\u5883\u4e2d\u8d8a\u6765\u8d8a\u666e\u904d\uff0c\u5305\u62ec\u8ba1\u7b97\u673a\u3001\u4e92\u8054\u7f51\u548c\u7535\u5b50\u5546\u52a1\u4ee5\u53ca\u79fb\u52a8\u7535\u4fe1\u3002\n\u5b66\u4e60\u76ee\u6807\u662f\u8ba9\u5b66\u751f\u5728\u5177\u6709\u663e\u8457\u7f51\u7edc\u5916\u90e8\u6027\u548c\u91cd\u8981\u4e92\u8865\u6027\u8d44\u4ea7\u7684\u591a\u8fb9\u5e02\u573a\u4e92\u52a8\u4f53\u9a8c\u6218\u7565\u7ade\u4e89\u7684\u6311\u6218\u3002\n\u53ef\u5728\u4ee5\u4e0b\u8bfe\u7a0b\u4e2d\u6559\u6388\uff1a\u6218\u7565\u3001\u7ecf\u6d4e\u5b66\u3001\u6280\u672f\u6218\u7565\u3001\u7cfb\u7edf\u52a8\u529b\u5b66\uff0c\u4ee5\u53ca\u4e0e\u6218\u7565\u5b9a\u4ef7\u884c\u4e3a\u7684\u52a8\u6001\u76f8\u5173\u7684\u4efb\u4f55\u8bfe\u7a0b\u3002\n\u200b\u73b0\u5df2\u4e0a\u5e02\uff01\u200b\uff01\u200b\uff01\u4f01\u4e1a\u57f9\u8bad\u5e08\u3001\u54a8\u8be2\u5e08\uff01\u4f01\u4e1a\u57f9\u8bad\u5e08\uff0c\u54a8\u8be2\u5e08\uff01\u6765\u81ea\u975e\u5b66\u672f\u673a\u6784\u7684\u6559\u80b2\u5de5\u4f5c\u8005\u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u4ece\u6211\u4eec\u7684\u6a21\u62df\u5408\u4f5c\u4f19\u4f34Forio\u8fd9\u91cc\u8bbf\u95ee\u6211\u4eec\u7684\u6a21\u62df\u3002\n\u53ea\u6709\u6765\u81ea\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u548c\u5176\u4ed6\u5b66\u672f\u673a\u6784\u7684\u6ce8\u518c\u6559\u80b2\u5de5\u4f5c\u8005\u624d\u80fd\u8bbf\u95ee\u8fd9\u4e9b\u5185\u5bb9\u3002\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u65af\u9686\u7ba1\u7406\u5b66\u9662\u7684\u6559\u804c\u5458\u5de5\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u201c\u6559\u5b66\u7b14\u8bb0\u201d\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u65af\u9686\u7528\u6237\u540d\u548c\u5bc6\u7801\u6765\u8bbf\u95ee\u6559\u5b66\u6750\u6599\u3002\u5982\u679c\u60a8\u5c1a\u672a\u8bbe\u7f6e\u65af\u9686\u5e10\u6237\u5bc6\u7801\uff0c\u5219\u9700\u8981\u5728https://mitsloan.mit.edu/SloanAccount.\u8bbe\u7f6e\u5bc6\u7801", "note_en": "MIT Sloan  &gt;   LearningEdge  &gt;   Simulations  &gt;  Platform Wars: Simulating the Battle for Video Game Supremacy\n    Abstract In this live web-based simulation, participants play the role of senior management at a video game hardware platform producer, such as Sony, Nintendo, or Microsoft. Built around a companion case study describing the launch of Sony\u2019s PlayStation 3, the simulation explores the dynamics of competition in multi-sided markets. In such markets, success depends not only on a product\u2019s price and features, but also on how many people own it (a direct network externality) and on the number of games and applications available\u2014that is, the size of the installed base of complementary products (an indirect network externality). Platform markets are increasingly common in settings other than video games, including computers, the Internet and e-commerce, and mobile telecommunications.\n  Learning Objective To allow students to experience interactively the challenges of strategic competition in multi-sided markets with significant network externalities and important complementary assets.\n  Could be taught in the following course(s) strategy, economics, technology strategy, system dynamics, and any course where the dynamics of strategic pricing behavior are relevant\n   \u200bNow Available! \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Corporate trainers, consultants, and educators from non-academic institutions can now access our simulations directly from our simulation partner, Forio,  here.\n  Access to this content is restricted to registered educators from around MIT and other academic institutions only.\r\t      MIT Sloan faculty can access teaching material by clicking on Teaching \r\t\tNote and entering their Sloan username and password. If you have not set \r\t\tyour Sloan Account password, you will need to do so at\r\t\t \r\t\thttps://mitsloan.mit.edu/SloanAccount.", "posttime": "2020-06-06 23:57:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u7535\u5b50\u6e38\u620f,\u5927\u6218,wars,\u6218\u7565", "title": "\u5e73\u53f0\u5927\u6218\uff1a\u6a21\u62df\u7535\u5b50\u6e38\u620f\u9738\u4e3b\u5730\u4f4d\u4e4b\u6218", "title_en": "Platform Wars: Simulating the Battle for Video Game Supremacy", "transed": 1, "url": "https://mitsloan.mit.edu/LearningEdge/simulations/platform-wars/Pages/default.aspx", "via": "", "real_tags": ["\u6e38\u620f", "\u7535\u5b50\u6e38\u620f", "\u5927\u6218", "wars", "\u6218\u7565"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005461, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u60a8\u5728\u7f51\u7ad9\u4e2d\u5bfc\u822a\u65f6\uff0c\u6b64\u7f51\u7ad9\u4f7f\u7528Cookie\u6765\u6539\u5584\u60a8\u7684\u4f53\u9a8c\u3002\u5728\u8fd9\u4e9bcookie\u4e2d\uff0c\u88ab\u5f52\u7c7b\u4e3a\u5fc5\u8981\u7684cookie\u5b58\u50a8\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u4e0a\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u4e8e\u7f51\u7ad9\u7684\u57fa\u672c\u529f\u80fd\u7684\u5de5\u4f5c\u81f3\u5173\u91cd\u8981\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u7b2c\u4e09\u65b9cookie\u6765\u5e2e\u52a9\u6211\u4eec\u5206\u6790\u548c\u4e86\u89e3\u60a8\u5982\u4f55\u4f7f\u7528\u672c\u7f51\u7ad9\u3002\u53ea\u6709\u7ecf\u8fc7\u60a8\u7684\u540c\u610f\uff0c\u8fd9\u4e9bCookie\u624d\u4f1a\u5b58\u50a8\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u4e2d\u3002\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u9000\u51fa\u8fd9\u4e9bcookie\u3002\u4f46\u662f\u9009\u62e9\u4e0d\u4f7f\u7528\u8fd9\u4e9bcookie\u53ef\u80fd\u4f1a\u5bf9\u60a8\u7684\u6d4f\u89c8\u4f53\u9a8c\u4ea7\u751f\u5f71\u54cd\u3002", "note_en": "This website uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.", "posttime": "2020-06-06 23:56:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u624b\u673a,vivo,smartphones,cookie", "title": "\u53d1\u73b013\uff0c500\u90e8Vivo\u667a\u80fd\u624b\u673a\u5728\u540c\u4e00IMEI\u53f7\u4e0a\u8fd0\u884c", "title_en": "13,500 Vivo Smartphones found running on same IMEI number", "transed": 1, "url": "https://androidrookies.com/a-whopping-13500-vivo-smartphones-found-running-on-same-imei-number/", "via": "", "real_tags": ["\u624b\u673a", "vivo", "cookie"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005460, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ce8\u518c\u4ee5\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u63a5\u6536\u4e2a\u6027\u5316\u7814\u7a76\u548c\u8d44\u6e90", "note_en": "Register to receive personalised research and resources by email", "posttime": "2020-06-06 23:56:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5de5\u5382,factories,\u7535\u5b50\u90ae\u4ef6", "title": "\u5e7d\u7075\u5de5\u5382\uff1a\u81ea\u52a8\u673a\u548c\u4eba\u5de5\u751f\u547d\u7684\u5386\u53f2", "title_en": "The ghost factories: histories of automata and artificial life", "transed": 1, "url": "https://www.tandfonline.com/doi/full/10.1080/07341512.2020.1757972", "via": "", "real_tags": ["\u5de5\u5382", "factories", "\u7535\u5b50\u90ae\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "893f3f60b780b7362c380e5486b49e78.jpg", "infoid": 1005459, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u8d70\u51fa\u5927\u95e8\uff0c\u6211\u5c31\u627f\u8ba4\uff1a\u8054\u60f3\u8fd9\u4e00\u65e0\u4e0e\u4f26\u6bd4\u7684\u58f0\u660e\u8ba9\u6211\u65e0\u6cd5\u6291\u5236\u81ea\u5df1\u7684\u5174\u594b\u3002\u5e7f\u53d7\u6b22\u8fce\u7684OEM\u8d85\u8d8a\u4e86\u5176Fedora 32\u7684\u8bd5\u70b9\u8ba1\u5212\uff0c\u5728\u5176\u6574\u4e2a\u5de5\u4f5c\u7ad9PC\u7cfb\u5217\u4e2d\u63d0\u4f9b\u5bf9Red Hat Enterprise Linux\u548cUbuntu LTS\u7684\u5168\u9762\u8ba4\u8bc1\u548c\u652f\u6301\u3002\n\u4ece\u672c\u6708\u5f00\u59cb\uff0c\u8054\u60f3\u5c06\u5bf9\u5176ThinkStation\u4e2a\u4eba\u7535\u8111\u548cThinkPad P\u7cfb\u5217\u7b14\u8bb0\u672c\u7535\u8111\u8fdb\u884cUbuntu LTS\u548cRed Hat Enterprise Linux\u7684\u8ba4\u8bc1\u3002\u6574\u4e2a\u5de5\u4f5c\u7ad9\u4ea7\u54c1\u7ec4\u5408\u4e2d\u7684\u6bcf\u79cd\u578b\u53f7\u3001\u6bcf\u79cd\u914d\u7f6e\u3002\n\u8054\u60f3(Lenovo)\u5de5\u4f5c\u7ad9\u548c\u5ba2\u6237\u7aef\u4eba\u5de5\u667a\u80fd\u96c6\u56e2\u6267\u884c\u8463\u4e8b\u7f57\u5e03\u00b7\u8d6b\u5c14\u66fc(Rob Herman)\u8868\u793a\uff1a\u201c\u9664\u4e86\u5f00\u7bb1\u5373\u7528\uff0c\u8fd9\u8fd8\u5305\u62ec\u5168\u9762\u7684\u7f51\u7edc\u652f\u6301\u3001\u4e13\u95e8\u7684Linux\u8bba\u575b\u3001\u914d\u7f6e\u6307\u5bfc\u7b49\u3002\u201d\n\u6211\u4eec\u8c08\u8bba\u7684\u4e5f\u4e0d\u4ec5\u4ec5\u662f\u786c\u4ef6\u8ba4\u8bc1\u3002\u8054\u60f3\u5c06\u63d0\u4f9b\u9884\u88c5\u7684RHEL\u548cUbuntu LTS\u53d1\u884c\u7248\u3002\n\u8fd8\u4e0d\u591f\u8ba9\u4f60\u9ad8\u5174\u5f97\u8df3\u8d77\u6765\u5417\uff1f\u5728\u6211\u6700\u8fd1\u7684\u91c7\u8bbf\u4e2d\uff0c\u8054\u60f3\u63d0\u5230\u4e86\u5b83\u5e0c\u671b\u8ba9\u6574\u4e2aLinux\u751f\u6001\u7cfb\u7edf\u53d7\u76ca\u7684\u613f\u671b\uff0c\u4ed6\u4eec\u73b0\u5728\u6b63\u5728\u52a0\u500d\u52aa\u529b\uff1a\n\u201c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8054\u60f3\u8fd8\u5c06\u76f4\u63a5\u5c06\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4e0a\u6e38\u5230Linux\u5185\u6838\uff0c\u4ee5\u5e2e\u52a9\u5728\u5de5\u4f5c\u7ad9\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u4fdd\u6301\u7a33\u5b9a\u6027\u548c\u517c\u5bb9\u6027\uff0c\u201d\u8d6b\u5c14\u66fc\u8bf4\u3002\n\u8054\u60f3\u548cFedora\u5df2\u7ecf\u5728\u5408\u4f5c\uff0c\u5728\u7cbe\u9009\u7684ThinkPad\u4e0a\u542f\u7528\u6307\u7eb9\u4f20\u611f\u5668\u652f\u6301\uff0c\u5e76\u5c06\u652f\u6301\u53d1\u9001\u5230\u4e0a\u6e38\uff0c\u4ee5\u4f7f\u6240\u6709Linux\u53d1\u884c\u7248\u53d7\u76ca(\u5305\u62ec\u901a\u8fc7LVFS\u63d0\u4f9b\u7684\u56fa\u4ef6)\u3002\u5f53\u6211\u4e0eMark Pearson(\u4e0a\u56fe\u53f3)\u4ea4\u8c08\u65f6\uff0c\u8fd9\u4f4dLinux\u9ad8\u7ea7\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u751a\u81f3\u63d0\u5230\u5c06\u67d0\u4e9b\u4ec5\u9002\u7528\u4e8eWindows\u7684PC\u7ba1\u7406\u5de5\u5177\u79fb\u690d\u5230Linux\uff0c\u4ee5\u5e2e\u52a9\u6574\u4e2a\u5de5\u4f5c\u3002\n\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u5f88\u68d2\uff0c\u4f46\u6b63\u662f\u8054\u60f3\u5ba3\u5e03\u8fd9\u4e00\u6d88\u606f\u7684\u57fa\u8c03\u8ba9\u6211\u5145\u6ee1\u4e86\u70ed\u60c5\u3002\u8fd9\u53ef\u80fd\u542c\u8d77\u6765\u6709\u70b9\u4f24\u611f\uff0c\u4f46\u6211\u4ece\u6765\u6ca1\u6709\u5728\u9605\u8bfb\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u65b0\u95fb\u7a3f\u65f6\u4f53\u9a8c\u5230\u5982\u6b64\u591a\u7684\u559c\u60a6\u3002\n\u201c\u6bcf\u5e74\u552e\u51fa\u7684\u7535\u8111\u8d85\u8fc72.5\u4ebf\u53f0\uff0c\u636eNetMarketShare\u62a5\u9053\uff0c2.87%--\u5927\u7ea6720\u4e07\u7528\u6237--\u6b63\u5728\u4f7f\u7528\u8fd9\u4e9b\u7535\u8111\u6765\u8fd0\u884cLinux\u3002\u8fd9\u4e2a\u7531\u6570\u636e\u79d1\u5b66\u5bb6\u3001\u5f00\u53d1\u4eba\u5458\u3001\u5e94\u7528\u5de5\u7a0b\u5e08\u3001\u79d1\u5b66\u5bb6\u7b49\u7ec4\u6210\u7684\u7528\u6237\u7fa4\u66fe\u7ecf\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5229\u57faIT\u7fa4\u4f53\uff0c\u4f46\u73b0\u5728\u6b63\u5728\u589e\u957f--\u8fdb\u5165\u591a\u4e2a\u884c\u4e1a\u7684\u70ed\u95e8\u804c\u4f4d\uff0c\u5e76\u6210\u4e3a\u516c\u53f8\u5185\u7684\u5173\u952e\u4eba\u7269\u3002\u201c\u3002\n\u4ece\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u3001\u5a92\u4f53\u548c\u5a31\u4e50\u4e13\u4e1a\u4eba\u5458\u3001\u7cfb\u7edf\u7ba1\u7406\u5458\u3001\u4eba\u5de5\u667a\u80fd\u4e13\u4e1a\u4eba\u5458\u3001IT\u5de5\u7a0b\u5e08\u548c\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5c06\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4e1a\u5185\u6700\u5e7f\u6cdb\u7684\u8f6f\u4ef6\u3001\u4eba\u5de5\u667a\u80fd\u6846\u67b6\u548c\u5de5\u4f5c\u6d41\u7a0b\u589e\u5f3a\u5de5\u5177\u3002\u201c\u3002\n\u901a\u8fc7\u8ba4\u8bc1\u6211\u4eec\u7684\u6574\u4e2aThinkStation\u548cThinkPad P\u7cfb\u5217\u5de5\u4f5c\u7ad9\u4ea7\u54c1\u7ec4\u5408\uff0c\u6211\u4eec\u4f18\u5148\u8003\u8651\u4e13\u4e1a\u7ec8\u7aef\u7528\u6237\u7684\u9700\u6c42\uff0c\u5e76\u5e2e\u52a9\u786e\u4fdd\u6211\u4eec\u7684\u5de5\u4f5c\u7ad9\u5c06\u63d0\u4f9b\u5c3d\u53ef\u80fd\u597d\u7684\u5f00\u7bb1\u5373\u7528Linux\u4f53\u9a8c--\u63d0\u9ad8\u6240\u6709\u884c\u4e1a\u7528\u6237\u7684\u7075\u6d3b\u6027\u3002\u201c\u3002\n\u6216\u8005\u662f\u6211\u7684\u5b8c\u5168\u975e\u5b98\u65b9\u7684tl\uff1bdr\u7248\u672c\uff1a\u201c\u4f60\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u6b63\u5728\u5173\u6ce8\u3002\u201d\n\u6211\u975e\u5e38\u5174\u594b\u5730\u770b\u5230\u8054\u60f3\u63d0\u5347\u4e86Linux\u7684\u77e5\u540d\u5ea6\uff0c\u4e0d\u4ec5\u8ba4\u53ef\u4e86\u5b83\u7684\u529b\u91cf\u548c\u91cd\u8981\u6027\uff0c\u800c\u4e14\u628a\u4ed6\u4eec\u4f17\u6240\u5468\u77e5\u7684\u94b1\u653e\u5728\u4e86\u5634\u8fb9\u3002", "note_en": "Right out of the gate I\u2019ll confess: it\u2019s impossible for me to contain my excitement about this unparalleled announcement from Lenovo. The popular OEM is going beyond its  pilot program with Fedora 32 and offering full certification and support for Red Hat Enterprise Linux and Ubuntu LTS across its  entire lineup of workstation PCs.\n    Beginning this month, Lenovo will certify its ThinkStation PCs and ThinkPad P Series laptops for both Ubuntu LTS and Red Hat Enterprise Linux. Every single model, every single configuration across the entire workstation portfolio.\n    \u201cGoing beyond the box, this also includes full  web support, dedicated  Linux forums, configuration guidance and more,\u201d  says Rob Herman, General Manager, Executive Director Workstation &amp; Client AI Group at Lenovo.\n    We\u2019re not talking about just hardware certification, either. Lenovo will offer both RHEL and Ubuntu LTS distributions pre-installed.\n           Not quite enough to make you jump for joy? Lenovo touched on its desire to benefit the entire Linux ecosystem in  my recent interview, and they\u2019re doubling down on it now:\n  \u201cWhat\u2019s more, Lenovo will also upstream device drivers directly to the Linux kernel, to help maintain stability and compatibility throughout the life of the workstation,\u201d says Herman.\n  Lenovo and Fedora are already working together to enable fingerprint sensor support on select ThinkPads, and send that support upstream to benefit all Linux distributions (including firmware being available through LVFS). When I spoke to Mark Pearson (above right), the Senior Linux Software Engineer even mentioned porting certain Windows-only PC management tools to Linux to aid in the overall effort.\n  All of this is terrific, but it\u2019s the  tone of Lenovo\u2019s announcement that overwhelmed me with enthusiasm. This may sound sappy, but I\u2019ve never experienced so much joy reading what is technically a press release.\n        \u201cMore than 250 million computers are sold each year and  NetMarketShare reports that 2.87 percent \u2013 roughly 7.2 million users \u2013 are using those computers to run Linux. Once thought of as a niche IT crowd, this user base of data scientists, developers, application engineers, scientists and more is growing \u2013 stepping into sought-after roles across multiple industries and becoming essential within their companies.\u201d\n  \u201cEveryone from software developers, media and entertainment professionals, system administrators, AI professionals, IT engineers and data scientists will have access to some of the industry\u2019s broadest selection of software, AI frameworks, and workflow enhancement tools.\u201d\n  \u201cBy certifying our entire portfolio of ThinkStation and ThinkPad P Series workstations, we are prioritizing the needs of specialized end-users and helping to ensure our workstations will deliver the best possible out-of-the-box Linux experience \u2013 increasing the flexibility of users across all industries.\u201d\n    Or my totally unofficial  tl;dr version which is \u201cyou matter and we\u2019re paying attention.\u201d\n  I\u2019m ridiculously excited to see Lenovo raising the profile of Linux by not only endorsing its power and importance, but putting their proverbial money where their mouth is.", "posttime": "2020-06-06 23:40:45", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "ubuntu,pre,linux", "title": "\u8054\u60f3\u5c06\u5728\u5176\u6240\u6709\u5de5\u4f5c\u7ad9\u4e0a\u9884\u88c5Ubuntu\u548cRed Hat", "title_en": "Lenovo Will Pre-load Ubuntu and Red Hat on All Its Workstations", "transed": 1, "url": "https://www.forbes.com/sites/jasonevangelho/2020/06/03/lenovos-massive-ubuntu-and-red-hat-announcement-levels-up-linux-in-2020/", "via": "", "real_tags": ["ubuntu", "pre", "linux"]}, {"category": "", "categoryclass": "", "imagename": "fd7760e006979604627455893c3efe96.jpg", "infoid": 1005458, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u5728\u4e0e\u8f6f\u4ef6\u9519\u8bef\u4f5c\u6597\u4e89\u540e\u5199\u4e8e\u5348\u591c\u7684\u5486\u54ee\u3002\u76f8\u5e94\u5730\u8bbe\u7f6e\u60a8\u7684\u810f\u8bdd\u8fc7\u6ee4\u5668\u3002\n\u6211\u5bf9\u8f6f\u4ef6\u5de5\u7a0b\u7684\u72b6\u6001--\u5177\u4f53\u5730\u8bf4\uff0c\u5c31\u662f\u7a33\u5b9a\u6027--\u611f\u5230\u7edd\u671b\u3002\u6211\u4eec\u4f3c\u4e4e\u5df2\u7ecf\u5931\u53bb\u4e86\u8fd9\u6837\u4e00\u79cd\u8ba4\u8bc6\uff0c\u5373\u8ba1\u7b97\u673a\u5728\u90a3\u91cc\u4e3a\u6211\u4eec\u505a\u7e41\u91cd\u7684\u5de5\u4f5c\u3002\u800c\u4e14\u6211\u8ba4\u4e3a\u6211\u4eec\u4ece\u6765\u6ca1\u6709\u76f8\u4fe1\u8fc7\u4ee5\u7528\u6237\u4e3a\u4e2d\u5fc3\u7684\u5f00\u53d1\u5de5\u5177\u65b9\u6cd5\u3002\n\u4e0a\u4e00\u6b21\u6211\u81ea\u5df1\u5f00\u53d1\u5b89\u5353\u5e94\u7528\u662f\u2026\u3002\u64cd\u2026\u3002\u751c\u751c\u5708?\u3002\u5c0f\u732b\u54aa\uff1f\u592a\u4e45\u4ee5\u524d\u4e86\u3002\u4e0a\u5468\uff0c\u6211\u53d1\u73b0\u4e86\u4e00\u4e2a\u6211\u60f3\u4fee\u6539\u7684\u5c0f\u578b\u5f00\u6e90Android\u5e94\u7528\u7a0b\u5e8f\u3002\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u53ea\u662f\u6362\u4e86\u51e0\u6839\u5f26\u548c\u51e0\u5f20\u56fe\u7247\u3002\n\u56de\u8d2d\u662f3\u5e74\u524d\u7684\u4e8b\u3002\u91cd\u65b0\u5f00\u59cb\u8dd1\u6b65\u80af\u5b9a\u4e0d\u4f1a\u90a3\u4e48\u96be\u5427\uff1f\u54c8\uff01\n\u6b63\u5728\u5b89\u88c5Android Studio\u3002\u6211\u8bb0\u5f97\u8fd9\u662f\u4e00\u4ef6\u82e6\u5dee\u4e8b\uff0c\u4f46\u6211\u53ea\u662f\u5b89\u88c5\u4e86Flatpak\uff0c\u6253\u5f00\u5b83\uff0c\u7136\u540e\u8ba9\u5b83\u66f4\u65b0\u3002\n\u8fd9\u592a\u70e6\u4eba\u4e86\u3002\u5e94\u7528\u7a0b\u5e8f\u8981\u5bfc\u5165\u7684\u4e00\u4e2a\u5e93\u4e22\u5931\u3002\u5b83\u5728\u54ea\u91cc\uff1f\n\u4e1c\u897f\u662f\u4f1a\u79fb\u52a8\u7684\u3002\u6211\u660e\u767d\u4f60\u7684\u610f\u601d\u3002\u4f46\u662f\u4e3a\u4ec0\u4e48\u6ca1\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u81ea\u52a8\u8f6c\u53d1\u5462\uff1f\n\u4f46\u662f\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u6211\u5982\u4f55\u7406\u89e3\u5e94\u7528\u7a0b\u5e8f\u3001\u5de5\u5177\u3001\u5b58\u50a8\u5e93\u548c\u5b83\u4eec\u6240\u6709\u7684\u602a\u5f02\u4e4b\u5904\u4e4b\u95f4\u7684\u590d\u6742\u5173\u7cfb\u5462\uff1f\u5728\u8fd9\u4e00\u5207\u4e2d\uff0c\u4ee5\u7528\u6237\u4e3a\u4e2d\u5fc3\u7684\u8bbe\u8ba1\u5728\u54ea\u91cc\uff1f\n\u8c37\u6b4c\u7684Android Studio\u5f88\u590d\u6742\u3002\u5b83\u628a\u6240\u6709\u7684\u52aa\u529b\u90fd\u653e\u5728\u7528\u6237\u8eab\u4e0a\u3002\u5b83\u4e00\u76f4\u62b1\u6028\u76ee\u6807\u592a\u4f4e\uff0c\u9700\u8981\u66f4\u65b0\u3002\u5b83\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u4e3b\u52a8\u63d0\u51fa\u81ea\u5df1\u66f4\u65b0\u4efb\u4f55\u4e1c\u897f\u3002\u5b83\u6ca1\u6709\u544a\u8bc9\u6211\u9519\u8bef\u5728\u54ea\u91cc\u3002\u5b83\u6ca1\u6709\u8bf4\u201c\u563f\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u52a8\u66f4\u65b0\u4e00\u4e9b\u4e1c\u897f\u3002\u4ee5\u4e0b\u662f\u98ce\u9669\u6240\u5728\u3002\u60f3\u8981\u7ee7\u7eed\u5417\uff1f\u201c\u3002\u8fd9\u53ea\u4f1a\u8ba9\u6211\u5904\u4e8e\u4e0d\u786e\u5b9a\u7684\u5883\u5730\u3002\n\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u5de5\u5177\u4e0d\u4e3a\u6211\u4eec\u505a\u7e41\u91cd\u7684\u5de5\u4f5c\u5462\uff1fIDE\u4e0d\u662f\u87ba\u4e1d\u5200-\u5b83\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u4ee5\u53ca\u9047\u5230\u4e86\u4ec0\u4e48\u95ee\u9898\u3002\u5b83\u4e0d\u9700\u8981\u5355\u65b9\u9762\u505a\u51fa\u6539\u53d8\uff0c\u4f46\u81f3\u5c11\u53ef\u4ee5\u63d0\u51fa\u6709\u76ca\u7684\u5efa\u8bae\u3002\n\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e86\u6211\u572820\u4e16\u7eaa90\u5e74\u4ee3\u7b2c\u4e00\u6b21\u5f00\u59cb\u5b66\u4e60C++\u65f6\u6700\u65e9\u7684\u632b\u6298\u4e4b\u4e00\u3002\u7f16\u8bd1\u5668\u4f1a\u8bf4\u201c\u7b2c427\u884c\u7f3a\u5c11\u5206\u53f7\u201d\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4f1a\u56de\u7b54\u201c\u5982\u679c\u4f60\u77e5\u9053\u4e22\u5931\u4e86\u4ec0\u4e48\uff0c\u4e5f\u77e5\u9053\u5b83\u4e22\u5931\u5728\u54ea\u91cc\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u81ea\u5df1\u8865\u56de\u6765\u5462\uff1f\u201d\u4f60\u8fd9\u4e2a\u6ca1\u7528\u7684\u5e9f\u7269\uff01\u201c\u3002\n\u7ee7\u7eed\u524d\u8fdb\u3002\u6df1\u547c\u5438\u3002Gradle\u5f00\u59cb\u62b1\u6028\u6211\u4e0d\u80fd\u518d\u7528\u201c\u7f16\u8bd1\u201d\u4e86\u3002\u663e\u7136\u5b83\u5df2\u7ecf\u88ab\u5f03\u7528\u4e86\u3002\u597d\u7684\u3002\u90a3\u4e48\u89e3\u51b3\u529e\u6cd5\u662f\u4ec0\u4e48\u5462\uff1f\u518d\u8bf4\u4e00\u6b21\uff0cGradle\u548cAndroid Studio\u90fd\u4e0d\u613f\u544a\u8bc9\u6211\u3002\u4ed6\u4eec\u77e5\u9053\u6709\u95ee\u9898\uff0c\u4ed6\u4eec\u53ef\u80fd\u77e5\u9053\u4ec0\u4e48\u80fd\u8ba9\u5b83\u5de5\u4f5c\u3002\u4f46\u4ed6\u4eec\u4fdd\u6301\u6c89\u9ed8\u3002\u56e0\u4e3a\u53bb\u4ed6\u5988\u7684\u7528\u6237\uff0c\u963f\u7c73\u5229\u7279\uff01\uff1f\n\u89e3\u51b3\u529e\u6cd5\u5f88\u7b80\u5355\u3002\u6211\u624b\u52a8\u5c06\u201c\u7f16\u8bd1\u201d\u4e00\u8bcd\u66ff\u6362\u4e3a\u201c\u5b9e\u73b0\u201d\u4e00\u8bcd\u3002\n\u6211\u8fd9\u6837\u505a\u4e86\u5341\u51e0\u6b21\uff0c\u90fd\u594f\u6548\u4e86\u3002\u8fd9\u4e24\u8005\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f\u6211\u4e0d\u77e5\u9053\u3002\u6211\u5e76\u4e0d\u7279\u522b\u5728\u610f\u3002\u6211\u76f8\u4fe1\u7528\u4e00\u4e2a\u8bcd\u4ee3\u66ff\u53e6\u4e00\u4e2a\u8bcd\u662f\u6709\u5f88\u597d\u7684\u7406\u7531\u7684\u3002\u6211\u76f8\u4fe1\u8fd9\u4f1a\u5bf9\u67d0\u4e9b\u4eba\u4ea7\u751f\u6df1\u8fdc\u7684\u5f71\u54cd\u3002\u4f46\u5bf9\u6211\u6765\u8bf4\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002\u8fd9\u6b3e\u5e94\u7528\u73b0\u5728\u5df2\u7ecf\u7f16\u8bd1\u5b8c\u6bd5\u3002\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u7528\u6237\u754c\u9762\u7a81\u7136\u663e\u793a\u201c\u4ece\u73b0\u5728\u5f00\u59cb\u5fc5\u987b\u987a\u65f6\u9488\u8f6c\uff01\u201d\u4f60\u4eec\u90fd\u4f1a\u8bf4\u201c\u53bb\u4ed6\u5988\u7684\uff1f\u9006\u65f6\u9488\u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f\u8fd9\u662f\u6211\u591a\u5e74\u6765\u7684\u505a\u6cd5\u3002\u201c\u3002\u4ed6\u4eec\u90fd\u4f1a\u8bf4\u201c\u4f19\u8ba1\uff01\u987a\u65f6\u9488\u65b9\u5411\u662f\u8981\u8d70\u7684\u8def\u3002\u8fd9\u4e00\u5207\u90fd\u5fc5\u987b\u6539\u53d8\u3002\u201c\u3002\u4f60\u4f1a\u8bf4\uff0c\u201c\u4f19\u8ba1\uff0c\u4f60\u5c31\u4e0d\u80fd\u628a\u5b83\u4eec\u5012\u7740\u88c5\u5417\uff1f\u8fd9\u6837\u6211\u5c31\u4e0d\u7528\u6539\u53d8\u6211\u7684\u884c\u4e3a\u6765\u6ee1\u8db3\u4f60\u7684\u9700\u8981\u4e86\u3002\u201d\u7136\u540e\u4ed6\u4eec\u4f1a\u671d\u4f60\u5410\u53e3\u6c34\u3002\n\u4e3a\u4ec0\u4e48Android Studio/Gradle/\u968f\u4fbf\u4ec0\u4e48\u90fd\u4e0d\u80fd\u7528\u201cMate-\u60a8\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86\u7f16\u8bd1-\u90a3\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\u8981\u6211\u81ea\u52a8\u66f4\u65b0\u8bed\u6cd5\u5417\uff1f\u53ef\u80fd\u4f1a\u6ca1\u4e8b\u7684\u3002\u201c\n\u522b\u8ba9\u6211\u60f3\u3002\u522b\u8ba9\u6211\u6d6a\u8d39\u65f6\u95f4\u89e3\u51b3\u4f60\u9020\u6210\u7684\u95ee\u9898\u3002\n\u5f53\u7136\uff0c\u6211\u5728\u63a8\u7279\u4e0a\u5486\u54ee\uff0c\u5e76\u4e0e\u6765\u81eaGradle\u7684\u4eba\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u4ee4\u4eba\u6cae\u4e27\u7684\u5bf9\u8bdd\u3002\u63a8\u7279\u662f\u4e00\u4e2a\u62d9\u52a3\u7684\u7406\u6027\u8ba8\u8bba\u673a\u5236\u3002\u6240\u4ee5\u6211\u4f1a\u8bd5\u7740\u5728\u8fd9\u91cc\u8bf4\u5f97\u66f4\u6e05\u695a\u4e00\u4e9b\u3002\n\u8bba\u575b\u4e0a\u5230\u5904\u90fd\u662f\u8fd9\u6837\u7684\u4eba\uff1a\u201c\u6211\u4e0d\u80fd\u8ba9\u8fd9\u4e2a\u9879\u76ee\u5de5\u4f5c--Gradle\u629b\u51fa\u4e86\u5947\u602a\u7684\u9519\u8bef\u4fe1\u606f\u3002\u5e2e\u5e2e\u6211\u3002\u6211\u4e0d\u660e\u767d\u3002\u6c42\u6c42\u4f60--\u6551\u547d\uff01\u201c\u3002\nGradle\u4e0d\u505a\u4efb\u4f55\u7528\u6237\u7814\u7a76\u3002\u5b83\u4ece\u4e0d\u4e0e\u72ec\u7acb\u5f00\u53d1\u4eba\u5458\u3001\u65b0\u624b\u6216\u7ecf\u9a8c\u4e30\u5bcc\u7684\u4e13\u4e1a\u4eba\u5458\u5750\u5728\u4e00\u8d77\u3002\u5b83\u4ece\u4e0d\u6d4b\u8bd5\u5176\u9519\u8bef\u6d88\u606f\u3002\u5b83\u4e0d\u5904\u7406\u5f00\u53d1\u8005\u5173\u7cfb\u3002\u5b83\u4e0d\u4f1a\u5728\u91ce\u5916\u53d1\u73b0\u7cdf\u7cd5\u7684\u5b9e\u73b0\uff0c\u5e76\u63d0\u4f9b\u6709\u7528\u7684\u5efa\u8bae\u3002\u5b83\u5e76\u6ca1\u6709\u6beb\u4e0d\u7559\u60c5\u5730\u4e13\u6ce8\u4e8e\u8ba9\u7528\u6237\u7684\u4e8b\u60c5\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\nGradle\u4e13\u6ce8\u4e8e\u5927\u578b\u7ec4\u7ec7\uff0c\u51e0\u4e4e\u5b8c\u5168\u8fce\u5408\u4ed6\u4eec\u7684\u9700\u6c42\u3002\u90a3\u5c31\u591f\u516c\u5e73\u7684\u4e86\u3002\u8fd9\u662f\u4ed6\u4eec\u7684\u751f\u610f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u7ecf\u8425\u3002\n\u5b89\u5353\u7cfb\u7edf\u4e5f\u5927\u4f53\u4e0a\u4e5f\u662f\u5982\u6b64\u3002\u5b83\u7684\u5f00\u53d1\u5de5\u5177\u4e13\u6ce8\u4e8e\u7531\u8bad\u7ec3\u6709\u7d20\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u7ec4\u6210\u7684\u5927\u578b\u56e2\u961f\uff0c\u4ed6\u4eec\u90fd\u975e\u5e38\u4e86\u89e3App\u5f00\u53d1\u7684\u6bcf\u4e00\u4e2a\u6df1\u5965\u65b9\u9762\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u540d\u6709\u5f88\u5927\u652f\u6301\u7ed3\u6784\u7684\u53d7\u85aa\u5458\u5de5\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\u4f46\u5bf9\u4e8e\u5c0f\u578b\u548c\u4e1a\u4f59\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u573a\u5669\u68a6\u3002\n\u6211\u5df2\u7ecf\u8bb0\u4e0d\u6e05\u6709\u591a\u5c11\u9879\u76ee\u4e00\u5f00\u59cb\u5c31\u8bf4\u201c\u53ea\u9700\u4ee5\u6b63\u5e38\u7684\u65b9\u5f0f\u5b89\u88c5Flargnle\u2026\u201d\u54e6\uff0c\u592a\u68d2\u4e86\uff0c\u4e3a\u4e86\u5236\u4f5c\u4e00\u4e2a\u5f88\u9177\u7684\u5c0f\u5de5\u5177\uff0c\u6211\u8fd8\u9700\u8981\u5b66\u4e60\u53e6\u4e00\u9879\u6280\u672f\u3002\n\u6211\u4ee5\u8fd9\u4e2a\u9879\u76ee\u4e3a\u4f8b\u3002\u6211\u5bf9Gradle\u3001Maven\u3001Android\u548c\u5176\u4ed6\u6240\u6709\u4eba\u90fd\u975e\u5e38\u4e0d\u516c\u5e73\u3002\u6211\u53c8\u7d2f\u53c8\u6cae\u4e27\u3002\n\u4f46\u6211\u76f8\u4fe1\u60a8\u5728\u5176\u4ed6\u90e8\u5206\u7684\u8f6f\u4ef6\u4e2d\u4e5f\u53d1\u73b0\u4e86\u540c\u6837\u7684\u60c5\u51b5\u3002\u4f60\u5fc5\u987b\u4e0b\u8f7d\u65e0\u7a77\u65e0\u5c3d\u7684\u5e93-\u7136\u540e\u9677\u5165\u4f9d\u8d56\u5730\u72f1\uff0c\u56e0\u4e3av1.1\u4e0ev1.2\u4e0d\u517c\u5bb9\uff0c\u6700\u521d\u7684Google Code\u94fe\u63a5\u5df2\u7ecf\u5931\u6548\uff0c\u90ae\u4ef6\u5217\u8868\u81ea2015\u5e74\u4ee5\u6765\u5c31\u6ca1\u6709\u6536\u5230\u8fc7\u6d88\u606f\uff0c\u4f5c\u8005\u7684GitHub\u8868\u660e\u4ed6\u4eec\u5bf9\u6700\u65b0\u7684JavaScript\u6846\u67b6\u66f4\u611f\u5174\u8da3\uff0c\u9519\u8bef\u6d88\u606f\u5c06\u4f60\u6307\u5411Usenet\u6d88\u606f\uff0c\u6700\u540eStackOverflow\u7684\u7b54\u6848\u662f\u201c\u6ca1\u5173\u7cfb\uff0c\u5f04\u660e\u767d\u4e86\u201d\u3002\n\u8ba1\u7b97\u673a\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u6211\u4eec\u505a\u90a3\u4e9b\u53c8\u7d2f\u53c8\u65e0\u804a\u7684\u5de5\u4f5c\u3002", "note_en": "This a rant, written at midnight, after battling software errors. Set your profanity filters accordingly.\n I despair over the state of software engineering \u2013 specifically, stability. We seem to have lost the understanding that computers are there to do the hard work for us. And I don\u2019t think we  ever believed in a user-centred approach to developer tools.\n The last time I developed an Android app all by myself was\u2026 fuck\u2026 Doughnut? Kitkat? Too long ago. Last week, I found a small open source Android app that I wanted to alter. Nothing drastic, just changing a few strings and a couple of images.\n The repo was 3 years old. Surely it wouldn\u2019t be that hard to get running again? Ha!\n  Installing Android Studio. I remember when this was a chore \u2013 but I just installed the Flatpak, opened it, and let it update.\n    That\u2019s annoying. One of the libraries the app wanted to import was lost. Where was it?\n   Things move. I get that. But why isn\u2019t there some form of automatic forwarding in place?\n  But, as a new(ish) developer \u2013 how do I understand the complicated relationship between an app, the tools, the repositories, and all their weirdness? Where\u2019s the user-centred design in all this?\n  Google\u2019s Android Studio is complicated. And it puts all the effort on the user. It kept complaining that targets were too low, and needed to be updated. It didn\u2019t actually  offer to update anything itself. It didn\u2019t tell me where the error was. It didn\u2019t say \u201chey, we can automatically update some things. Here are the risks. Want to proceed?\u201d It just left me in limbo.\n  Why don\u2019t our tools do the hard work for us? An IDE isn\u2019t a screwdriver \u2013 it has knowledge about what it is doing and what problems it is encountering. It doesn\u2019t need to make changes unilaterally, but it could at least make helpful suggestions.\n It reminds me of one of my earliest frustrations when I first started to learn C++ back in the 1990s. The compiler would say \u201cMissing semicolon on line 427.\u201d To which I\u2019d reply \u201cIf you know  what is missing, and you know  where it is missing, why not add it back yourself? You useless piece of crap!\u201d\n  Moving on. Deep breaths. Gradle started complaining that I couldn\u2019t use \u201ccompile\u201d any more. Apparently it was deprecated. OK. So what\u2019s the fix? Again, neither Gradle nor Android Studio would tell me. They knew there was a problem, they  probably knew what would get it working. But they stayed silent. Because fuck the users, amirite!?\n The fix was simple. I manually replaced the word \u201ccompile\u201d with the word \u201cimplementation\u201d.\n  I did that a dozen times and it worked. What\u2019s the difference between the two? I don\u2019t know. I don\u2019t particularly care. I\u2019m sure there was a very good reason for replacing one word with another. I\u2019m sure it makes a profound difference to someone. But for me, the end result was the same. The app now compiled.\n Imagine a user interface which suddenly said \u201cyou must turn things clockwise from now on!\u201d You\u2019d be all like \u201cWTF? What\u2019s wrong with anticlockwise? That\u2019s the way I\u2019ve done it for years.\u201d And they\u2019d be all like \u201cDude! Clockwise is the way to go. It all has to change.\u201d And you\u2019d go \u201cMate, can\u2019t you just install them backwards or something so I don\u2019t have to change my behaviour to accommodate your needs?\u201d And then they\u2019d spit at you.\n Why doesn\u2019t Android Studio / Gradle / Whatever just go \u201cMate \u2013 you\u2019ve used  compile here \u2013 that won\u2019t work. Want me to automatically update the syntax? It\u2019ll probably be fine.\u201d\n Don\u2019t make me think. And don\u2019t make me waste my time fixing problems that you have caused.\n  I ranted on Twitter, of course, and had a  series of  frustrating conversations with someone from Gradle. Twitter is a crappy mechanism for reasoned discourse. So I\u2019ll try to be more lucid here.\n Forums are full of people going \u201cI can\u2019t get this project to work \u2013 Gradle is throwing weird error messages. Help me. I don\u2019t understand. Please \u2013 help!\u201d\n Gradle does not do any user research. It never sits down with independent developers, newbies, or seasoned pros. It never tests its error messages. It doesn\u2019t do developer relations. It doesn\u2019t spot bad implementations in the wild and offer helpful suggestion. It doesn\u2019t relentlessly focus on making things easier for users.\n Gradle focusses on large organisations and caters almost exclusively to their needs. That\u2019s fair enough. It\u2019s their business and they can run it how they like.\n The same is broadly true of Android. Its development tools are focussed on large teams of highly trained software engineers, who all intimately understand every esoteric aspect of App development.\n It\u2019s great if you\u2019re a salaried employee with a large support structure. But for small and amateur developers, it\u2019s a nightmare.\n I\u2019ve lost count of the number of projects I\u2019ve seen which start by saying \u201cSimply install Flargnle in the normal way\u2026\u201d Oh, great, another technology that I need to learn in order to make a cool widget.\n  I\u2019ve used this project as an example. And I am being  deeply unfair to Gradle, Maven, Android, and everyone else. I\u2019m tired and frustrated.\n But I\u2019m sure you\u2019ve found the same thing with other bits of software. You have to download endless libraries \u2013 and then get stuck in dependency hell because v1.1 isn\u2019t compatible with v1.2 and the original Google Code link has died and the mailing list hasn\u2019t received a message since 2015 and the author\u2019s GitHub shows they\u2019re more interested in the latest JavaScript framework and the error message points you to a USENET message and the last StackOverflow answer is \u201c nevermind, figured it out\u201c.\n The job of a computer is to do the hard and boring work for us.", "posttime": "2020-06-06 23:39:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ad8\u8038,built,gradle", "title": "\u6211\u4eec\u5efa\u9020\u4e86\u4e00\u5806\u9ad8\u8038\u7684\u7caa\u4fbf", "title_en": "We\u2019ve built a towering pile of shite", "transed": 1, "url": "http://shkspr.mobi/blog/2020/06/weve-built-a-towering-pile-of-shite/", "via": "", "real_tags": ["\u9ad8\u8038", "built", "gradle"]}, {"category": "", "categoryclass": "", "imagename": "98d4f3097fc60ec58df2443c8103fabc.png", "infoid": 1005457, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5e26\u60a8\u4e86\u89e3\u5728\u5168\u7403200\u591a\u4e2a\u8fb9\u7f18\u57ce\u5e02\u8fd0\u884c\u7684\u670d\u52a1\u7684\u53ef\u9760\u6027\u6a21\u578b\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u90e8\u7f72\u65b0\u7684\u52a8\u6001\u4efb\u52a1\u8c03\u5ea6\u7cfb\u7edfHashiCorp Nomad\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u63d0\u9ad8\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u670d\u52a1\u53ef\u7528\u6027\uff0c\u5305\u62ec\u6211\u4eec\u5982\u4f55\u90e8\u7f72Nomad\u4ee5\u53ca\u6211\u4eec\u5728\u6b64\u8fc7\u7a0b\u4e2d\u514b\u670d\u7684\u6311\u6218\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u6211\u4eec\u76ee\u524d\u5982\u4f55\u4f7f\u7528Nomad\uff0c\u4ee5\u53ca\u6211\u4eec\u8ba1\u5212\u5982\u4f55\u5728\u672a\u6765\u4f7f\u7528\u5b83\u3002\n\u5bf9\u4e8e\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u6211\u4eec\u5c06\u533a\u5206\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u4e2d\u8fd0\u884c\u7684\u4e24\u79cd\u4e0d\u540c\u7c7b\u522b\u7684\u670d\u52a1\uff1a\n\u9762\u5411\u5ba2\u6237\u7684\u670d\u52a1\uff1a\u6211\u4eec\u5ba2\u6237\u4f7f\u7528\u7684\u6240\u6709\u5806\u6808\u4ea7\u54c1\uff0c\u5982\u7f13\u5b58\u3001\u7f51\u7ad9\u7ba1\u5bb6\u3001DDoS\u9632\u62a4\u3001\u9650\u901f\u3001\u8d1f\u8f7d\u5747\u8861\u7b49\u3002\n\u7ba1\u7406\u670d\u52a1\uff1a\u8fd0\u884c\u6570\u636e\u4e2d\u5fc3\u6240\u9700\u7684\u8f6f\u4ef6\uff0c\u4e0d\u5728\u5ba2\u6237\u6d41\u91cf\u7684\u76f4\u63a5\u8bf7\u6c42\u8def\u5f84\u4e2d\u3002\n\u6211\u4eec\u9762\u5411\u5ba2\u6237\u7684\u670d\u52a1\u7684\u53ef\u9760\u6027\u6a21\u578b\u662f\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u6240\u6709\u673a\u5668\u4e0a\u8fd0\u884c\u5b83\u4eec\u3002\u8fd9\u5f88\u6709\u6548\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u901a\u8fc7\u6dfb\u52a0\u66f4\u591a\u673a\u5668\u6765\u52a8\u6001\u6269\u5c55\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u5bb9\u91cf\u3002\n\u7531\u4e8e\u6211\u4eec\u5728\u6bcf\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u52a8\u6001\u8d1f\u8f7d\u5e73\u8861\u7cfb\u7edfUnimog\uff0c\u6269\u5c55\u53d8\u5f97\u7279\u522b\u5bb9\u6613\u3002\u5b83\u7684\u4f5c\u7528\u662f\u6839\u636e\u5f53\u524d\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u4e0d\u65ad\u91cd\u65b0\u5e73\u8861\u6d41\u91cf\uff0c\u5e76\u68c0\u67e5\u670d\u52a1\u7684\u8fd0\u884c\u72b6\u51b5\u3002\u8fd9\u6709\u52a9\u4e8e\u63d0\u4f9b\u5bf9\u5355\u4e2a\u673a\u5668\u6545\u969c\u7684\u6062\u590d\u80fd\u529b\uff0c\u5e76\u786e\u4fdd\u6240\u6709\u673a\u5668\u4e0a\u7684\u8d44\u6e90\u4f7f\u7528\u7387\u51e0\u4e4e\u76f8\u540c\u3002\n\u4f8b\u5982\uff0c\u8fd9\u91cc\u662f\u6211\u4eec\u7684\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3\u4e00\u5929\u7684CPU\u4f7f\u7528\u7387\uff0c\u5176\u4e2d\u6bcf\u4e2a\u65f6\u95f4\u5e8f\u5217\u4ee3\u8868\u4e00\u53f0\u673a\u5668\uff0c\u4e0d\u540c\u7684\u989c\u8272\u4ee3\u8868\u4e0d\u540c\u4ee3\u7684\u786c\u4ef6\u3002Unimog\u4f7f\u6240\u6709\u5904\u7406\u6d41\u91cf\u7684\u673a\u5668\u4fdd\u6301\u5927\u81f4\u76f8\u540c\u7684CPU\u5229\u7528\u7387\u3002\n\u6211\u4eec\u7684\u4e00\u4e9b\u5927\u578b\u6570\u636e\u4e2d\u5fc3\u62e5\u6709\u5927\u91cf\u673a\u5668\uff0c\u4f46\u6709\u65f6\u6211\u4eec\u9700\u8981\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u9760\u5730\u8fd0\u884c\u7ba1\u7406\u670d\u52a1\u7684\u5355\u4e2a\u6216\u51e0\u4e2a\u5b9e\u4f8b\u3002\n\u76ee\u524d\u6709\u51e0\u4e2a\u9009\u9879\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6bcf\u4e2a\u9009\u9879\u90fd\u6709\u81ea\u5df1\u7684\u4f18\u7f3a\u70b9\uff1a\n\u5c06\u670d\u52a1\u90e8\u7f72\u5230\u6570\u636e\u4e2d\u5fc3\u7684\u6240\u6709\u8ba1\u7b97\u673a\uff1a\u7f3a\u70b9\uff1a\u5b83\u4e0d\u5fc5\u8981\u5730\u4f7f\u7528\u4e86\u672c\u53ef\u4ee5\u7528\u4e8e\u670d\u52a1\u5ba2\u6237\u6d41\u91cf\u7684\u8d44\u6e90\uff0c\u800c\u4e14\u4e0d\u5212\u7b97\u3002\n\u5c06\u670d\u52a1\u90e8\u7f72\u5230\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u51e0\u53f0\u9759\u6001\u8ba1\u7b97\u673a\u4e0a\uff1a\u7f3a\u70b9\uff1a\u5f53\u8fd9\u4e9b\u51e0\u53f0\u8ba1\u7b97\u673a\u610f\u5916\u6545\u969c\u65f6\uff0c\u5b83\u4f1a\u9762\u4e34\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u98ce\u9669\u3002\n\u7b2c\u4e09\u4e2a\u66f4\u53ef\u884c\u7684\u9009\u62e9\u662f\u4f7f\u7528\u52a8\u6001\u4efb\u52a1\u8c03\u5ea6\uff0c\u4ee5\u4fbf\u5728\u786e\u4fdd\u53ef\u9760\u6027\u7684\u540c\u65f6\u53ea\u4f7f\u7528\u9002\u91cf\u7684\u8d44\u6e90\u3002\n\u5bf9\u4e8e\u6211\u4eec\u5e0c\u671b\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u8fd0\u884c\u7684\u7ba1\u7406\u670d\u52a1\uff0c\u5fc5\u987b\u5728\u4e24\u4e2a\u4e0d\u592a\u7406\u60f3\u7684\u53ef\u9760\u6027\u6a21\u578b\u9009\u9879\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\uff0c\u8fd9\u5e76\u4e0d\u7406\u60f3\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u5176\u4e2d\u4e00\u4e9b\u670d\u52a1\uff0c\u5373\u4f7f\u5b83\u4eec\u4e0d\u5728\u8bf7\u6c42\u8def\u5f84\u4e2d\uff0c\u4e5f\u9700\u8981\u7ee7\u7eed\u8fd0\u884c\u6570\u636e\u4e2d\u5fc3\u3002\u5982\u679c\u8fd0\u884c\u8fd9\u4e9b\u670d\u52a1\u7684\u8ba1\u7b97\u673a\u53d8\u5f97\u4e0d\u53ef\u7528\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u6062\u590d\u5b83\u4eec\u65f6\u4e34\u65f6\u7981\u7528\u6570\u636e\u4e2d\u5fc3\u3002\u8fd9\u6837\u505a\u4f1a\u81ea\u52a8\u5c06\u7528\u6237\u91cd\u65b0\u8def\u7531\u5230\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u6570\u636e\u4e2d\u5fc3\uff0c\u5e76\u4e14\u4e0d\u4f1a\u9020\u6210\u4e2d\u65ad\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6574\u4e2aCloudflare\u7f51\u7edc\u8bbe\u8ba1\u4e3a\u5728\u6570\u636e\u4e2d\u5fc3\u88ab\u7981\u7528\u548c\u81ea\u52a8\u6062\u590d\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002\u4f46\u662f\uff0c\u6700\u597d\u5c06\u6700\u7ec8\u7528\u6237\u8def\u7531\u5230\u4ed6\u4eec\u9644\u8fd1\u7684\u6570\u636e\u4e2d\u5fc3\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4efb\u4f55\u6570\u636e\u4e2d\u5fc3\u7ea7\u522b\u7684\u505c\u673a\u65f6\u95f4\u3002\n\u8fd9\u8ba9\u6211\u4eec\u610f\u8bc6\u5230\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7cfb\u7edf\u6765\u786e\u4fdd\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u4e2d\u8fd0\u884c\u4e00\u5b9a\u6570\u91cf\u7684\u670d\u52a1\u5b9e\u4f8b\uff0c\u800c\u4e0d\u7ba1\u6700\u7ec8\u8fd0\u884c\u8be5\u670d\u52a1\u7684\u662f\u54ea\u53f0\u7269\u7406\u673a\u3002\n\u9762\u5411\u5ba2\u6237\u7684\u670d\u52a1\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u6240\u6709\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u4e0d\u9700\u8981\u767b\u5f55\u5230\u8be5\u65b0\u7cfb\u7edf\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5f53\u524d\u5728\u5177\u6709\u6b21\u4f18\u53ef\u9760\u6027\u4fdd\u8bc1\u7684\u56fa\u5b9a\u673a\u5668\u5b50\u96c6\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u548c\u4e0d\u9700\u8981\u5728\u6240\u6709\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u90fd\u662f\u5f88\u597d\u7684\u5165\u804c\u5019\u9009\u3002\n\u867d\u7136Kubernetes\u662f\u53e6\u4e00\u4e2a\u9009\u62e9\uff0c\u4f46\u6211\u4eec\u51b3\u5b9a\u4f7f\u7528HashiCorp\u7684Nomad\uff0c\u539f\u56e0\u5982\u4e0b\uff1a\n\u6ee1\u8db3\u4e86\u6211\u4eec\u6700\u521d\u7684\u8981\u6c42\uff0c\u5373\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u53ef\u9760\u5730\u8fd0\u884c\u8d44\u6e90\u9694\u79bb\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5355\u4e2a\u5b9e\u4f8b\u3002\n\u51e0\u4e4e\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u4e14\u4e0e\u9886\u4e8b\u76f4\u63a5\u96c6\u6210\u3002Consul\u662f\u6211\u4eec\u5df2\u7ecf\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u90e8\u7f72\u7684\u53e6\u4e00\u6b3eHashiCorp\u8f6f\u4ef6\u3002\u5b83\u63d0\u4f9b\u5206\u5e03\u5f0f\u952e\u503c\u5b58\u50a8\u548c\u670d\u52a1\u53d1\u73b0\u529f\u80fd\u3002\n\u8f7b\u91cf\u7ea7(\u4e00\u7ad9\u5f0f\u4e8c\u8fdb\u5236)\uff0c\u6613\u4e8e\u90e8\u7f72\u548c\u8c03\u914d\u65b0\u7fa4\u96c6\uff0c\u8fd9\u5728\u90e8\u7f72\u4e0e\u6211\u4eec\u62e5\u6709\u7684\u6570\u636e\u4e2d\u5fc3\u4e00\u6837\u591a\u7684\u7fa4\u96c6\u65f6\u662f\u4e00\u4e2a\u4f18\u52bf\u3002\n\u5177\u6709\u6a21\u5757\u5316\u4efb\u52a1\u9a71\u52a8\u7a0b\u5e8f(\u90e8\u5206\u8d1f\u8d23\u6267\u884c\u4efb\u52a1\u548c\u63d0\u4f9b\u8d44\u6e90\u9694\u79bb)\u67b6\u6784\uff0c\u4e0d\u4ec5\u652f\u6301\u5bb9\u5668\uff0c\u8fd8\u652f\u6301\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u4efb\u4f55\u81ea\u5b9a\u4e49\u4efb\u52a1\u9a71\u52a8\u7a0b\u5e8f\u3002\n\u662f\u5f00\u6e90\u7684\uff0c\u5e76\u4e14\u662f\u7528Go\u7f16\u5199\u7684\u3002\u6211\u4eec\u5728\u56e2\u961f\u4e2d\u6709\u56f4\u68cb\u8bed\u8a00\u7684\u7ecf\u9a8c\uff0c\u800c\u4e14Nomad\u5728GitHub\u4e0a\u6709\u4e00\u4e2a\u54cd\u5e94\u8fc5\u901f\u7684\u7ef4\u62a4\u4eba\u5458\u793e\u533a\u3002\nNomad Server\uff1a\u7ec4\u6210\u96c6\u7fa4\u7684\u5b9e\u4f8b\u8d1f\u8d23\u8c03\u5ea6\uff0c\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc35\u4e2a\uff0c\u4ee5\u63d0\u4f9b\u8db3\u591f\u7684\u5bb9\u9519\u80fd\u529b\u3002\nNomad Client\uff1a\u6267\u884c\u5b9e\u9645\u4efb\u52a1\u7684\u5b9e\u4f8b\uff0c\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u6240\u6709\u673a\u5668\u4e0a\u8fd0\u884c\n\u4e3a\u4e86\u4fdd\u8bc1Nomad Server\u96c6\u7fa4\u7684\u53ef\u9760\u6027\uff0c\u6211\u4eec\u5728\u5c5e\u4e8e\u4e0d\u540c\u6545\u969c\u57df\u7684\u8ba1\u7b97\u673a\u4e0a\u90e8\u7f72\u4e86\u5b9e\u4f8b\uff1a\n\u5728\u4e0d\u540c\u7684\u591a\u8282\u70b9\u673a\u7bb1\u4e2d(\u6211\u4eec\u7684\u5927\u591a\u6570\u8fb9\u7f18\u786c\u4ef6\u90fd\u4ee5\u591a\u8282\u70b9\u673a\u7bb1\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u4e00\u4e2a\u673a\u7bb1\u5305\u542b\u56db\u4e2a\u5355\u72ec\u7684\u670d\u52a1\u5668)\u3002\n\u6211\u4eec\u8fd8\u5411\u6211\u4eec\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\u6dfb\u52a0\u4e86\u903b\u8f91\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u6570\u91cf\u7684Nomad Server\u5b9e\u4f8b\uff0c\u800c\u4e0d\u7ba1\u670d\u52a1\u5668\u51e0\u4e4e\u6bcf\u5929\u90fd\u5728\u8fdb\u884c\u6269\u5c55\u548c\u9000\u5f79\u3002\n\u903b\u8f91\u76f8\u5f53\u7b80\u5355\uff0c\u968f\u7740\u670d\u52a1\u5668\u6269\u5c55\u548c\u9000\u5f79\u7684\u53d1\u751f\uff0cNomad Server\u89d2\u8272\u88ab\u91cd\u65b0\u5206\u914d\u5230\u65b0\u7684\u673a\u5668\u5217\u8868\u3002\u7136\u540e\uff0c\u6211\u4eec\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\u786e\u4fddNomad Server\u5728\u65e7\u673a\u5668\u4e0a\u5173\u95ed\u4e4b\u524d\u5728\u65b0\u673a\u5668\u4e0a\u8fd0\u884c\u3002\n\u6b64\u5916\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u6269\u5c55\u548c\u9000\u5f79\u4e00\u6b21\u5f71\u54cd\u673a\u67b6\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5e76\u4e14Nomad Server\u89d2\u8272\u5206\u914d\u903b\u8f91\u63d0\u4f9b\u673a\u67b6\u591a\u6837\u6027\u4fdd\u8bc1\uff0c\u56e0\u6b64\u7fa4\u96c6\u59cb\u7ec8\u4fdd\u6301\u6b63\u5e38\u8fd0\u884c\u3002\nNomad\u4f5c\u4e1a\u6587\u4ef6\u88ab\u6a21\u677f\u5316\u5e76\u7b7e\u5165\u5230git\u5b58\u50a8\u5e93\u4e2d\u3002\u7136\u540e\uff0c\u6211\u4eec\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\u53ef\u786e\u4fdd\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u5b89\u6392\u4f5c\u4e1a\u3002\u4ece\u90a3\u65f6\u8d77\uff0cNomad\u5c06\u63a5\u7ba1\u5e76\u786e\u4fdd\u4f5c\u4e1a\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u6240\u6709\u65f6\u95f4\u90fd\u5728\u8fd0\u884c\u3002\n\u901a\u8fc7\u5411\u6bcf\u4e2aNomad\u5ba2\u6237\u7aef\u516c\u5f00\u673a\u67b6\u5143\u6570\u636e\uff0c\u6211\u4eec\u80fd\u591f\u786e\u4fdd\u7279\u5b9a\u670d\u52a1\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u5728\u4e0d\u540c\u7684\u673a\u67b6\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u7ed1\u5b9a\u5230\u4e0d\u540c\u7684\u6545\u969c\u57df\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u4e00\u4e2a\u670d\u52a1\u5668\u673a\u67b6\u7684\u6545\u969c\u4e0d\u4f1a\u5f71\u54cd\u670d\u52a1\u8fd0\u884c\u72b6\u51b5\uff0c\u56e0\u4e3a\u670d\u52a1\u4e5f\u5728\u4e0d\u540c\u7684\u673a\u67b6\u4e0a\u8fd0\u884c\uff0c\u4e0d\u53d7\u6545\u969c\u7684\u5f71\u54cd\u3002\n\u6211\u4eec\u5229\u7528Nomad\u4e0eConsul\u7684\u96c6\u6210\u5c06Nomad\u4f5c\u4e1a\u52a8\u6001\u6dfb\u52a0\u5230Consul Service Catalog\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u67e5\u8be2Consul\u6765\u53d1\u73b0\u7279\u5b9a\u670d\u52a1\u5f53\u524d\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u4f55\u5904\u8fd0\u884c\u3002\u6b64\u5916\uff0c\u542f\u7528Consul DNS\u63a5\u53e3\u540e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8eDNS\u7684\u67e5\u627e\u6765\u5b9a\u4f4d\u5728Nomad\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u3002\n\u4e3a\u4e86\u80fd\u591f\u6b63\u786e\u8fd0\u884c\u4e0e\u6211\u4eec\u62e5\u6709\u7684\u6570\u636e\u4e2d\u5fc3\u4e00\u6837\u591a\u7684Nomad\u96c6\u7fa4\uff0c\u5728\u8fd9\u4e9b\u96c6\u7fa4\u4e0a\u8fd0\u884c\u7684Nomad\u96c6\u7fa4\u548c\u670d\u52a1\u4e0a\u5177\u6709\u826f\u597d\u7684\u53ef\u89c2\u5bdf\u6027\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\n\u6211\u4eec\u4f7f\u7528\u666e\u7f57\u7c73\u4fee\u65af\u6293\u53d6\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u4e2d\u8fd0\u884c\u7684Nomad Server\u548c\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u5e76\u4f7f\u7528AlertManager\u5bf9\u5173\u952e\u6307\u6807\u53d1\u51fa\u8b66\u62a5\u3002\u4f7f\u7528\u666e\u7f57\u7c73\u4fee\u65af\u6307\u6807\uff0c\u6211\u4eec\u6784\u5efa\u4e86Grafana\u4eea\u8868\u677f\u6765\u63d0\u4f9b\u6bcf\u4e2a\u96c6\u7fa4\u7684\u53ef\u89c1\u6027\u3002\n\u6211\u4eec\u8bbe\u7f6ePrometheus\u5b9e\u4f8b\u4ee5\u53d1\u73b0\u5728Nomad\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\uff0c\u65b9\u6cd5\u662f\u4f7f\u7528\u4ee5\u4e0bPrometheus\u914d\u7f6e\u67e5\u8be2Consul Service Directory\u5e76\u5b9a\u671f\u6293\u53d6\u5b83\u4eec\u7684\u6307\u6807\uff1a\n-consul_sd_configs\uff1a-server\uff1alocalhost\uff1a8500\u4f5c\u4e1a\u540d\u79f0\uff1amanagement_service_via_consul reabel_configs\uff1a-action\uff1aKeep regex\uff1amanagement-service source_labels\uff1a-__META_CONSUL_SERVICE\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u4e9b\u6307\u6807\u6765\u521b\u5efaGrafana\u4eea\u8868\u677f\uff0c\u5e76\u4e3a\u5728Nomad\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u8bbe\u7f6e\u8b66\u62a5\u3002\n\u4e3a\u4e86\u9650\u5236\u5bf9Nomad API\u7aef\u70b9\u7684\u8bbf\u95ee\uff0c\u6211\u4eec\u542f\u7528\u4e86\u76f8\u4e92TLS\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e3a\u4e0eNomad\u4ea4\u4e92\u7684\u6bcf\u4e2a\u5b9e\u4f53\u751f\u6210\u5ba2\u6237\u7aef\u8bc1\u4e66\u3002\u8fd9\u6837\uff0c\u53ea\u6709\u62e5\u6709\u6709\u6548\u5ba2\u6237\u7aef\u8bc1\u4e66\u7684\u5b9e\u4f53\u624d\u80fd\u4e0eNomad API\u7aef\u70b9\u4ea4\u4e92\uff0c\u4ee5\u4fbf\u5b89\u6392\u4f5c\u4e1a\u6216\u6267\u884c\u4efb\u4f55CLI\u64cd\u4f5c\u3002\n\u90e8\u7f72\u65b0\u7ec4\u4ef6\u603b\u662f\u4f34\u968f\u7740\u4e00\u7cfb\u5217\u6311\u6218\uff1b\u4e0b\u9762\u5217\u51fa\u4e86\u6211\u4eec\u5728\u6b64\u8fc7\u7a0b\u4e2d\u5fc5\u987b\u514b\u670d\u7684\u51e0\u4e2a\u969c\u788d\u3002\n\u5f53\u5f00\u59cb\u4f7f\u7528exec\u9a71\u52a8\u7a0b\u5e8f\u8fd0\u884cchroot\u73af\u5883\u4e2d\u9694\u79bb\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5728initramfs\u4e0a\u8fd0\u884c\u7684\u65e0\u72b6\u6001\u6839\u5206\u533a\u4e0d\u53d7\u652f\u6301\uff0c\u56e0\u4e3a\u4efb\u52a1\u4e0d\u4f1a\u542f\u52a8\uff0c\u5e76\u4e14\u6211\u4eec\u5728\u65e5\u5fd7\u4e2d\u6536\u5230\u4ee5\u4e0b\u9519\u8bef\u6d88\u606f\uff1a\n2\u670812\u65e519\uff1a49\uff1a03\u673a\u5668\u6e38\u7267-\u5ba2\u6237\u7aef[258433]\uff1a2020-02-12T19\uff1a49\uff1a03.332Z[\u9519\u8bef]client.alloc_runner.task_runner\uff1a\u8fd0\u884c\u9a71\u52a8\u7a0b\u5e8f\u5931\u8d25\uff1aalloc_id=fa202-63b-33f-924-42cbd5 task=server error=&#34\uff1b\u65e0\u6cd5\u4f7f\u7528Executor\u542f\u52a8\u547d\u4ee4\uff1arpc\u9519\u8bef\uff1acode=\u672a\u77e5desc=CONTAINER_linux.go\uff1a346\uff1a\u542f\u52a8\u5bb9\u5668\u8fdb\u7a0b\u5bfc\u81f4&\u3002PIVOT_ROOT\u65e0\u6548\u53c2\u6570\\&#34\uff1b\\&#34\uff1b&#34\uff1b&#34\uff1b\n\u6211\u4eec\u63d0\u4ea4\u4e86GitHub\u95ee\u9898\u5e76\u63d0\u4ea4\u4e86\u53d8\u901a\u62c9\u53d6\u8bf7\u6c42\uff0c\u8be5\u8bf7\u6c42\u88ab\u53ca\u65f6\u5ba1\u67e5\u5e76\u5408\u5e76\u5230\u4e0a\u6e38\u3002\n\u540c\u65f6\uff0c\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u9694\u79bb\u5b89\u5168\u6027\uff0c\u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5f15\u5bfc\u8fc7\u7a0b\u5728\u6211\u4eec\u7684\u8bbe\u7f6e\u4e2d\u542f\u7528\u4e86PIVOT_ROOT\uff0c\u5176\u4ed6\u56e2\u961f\u6210\u5458\u5f00\u53d1\u5e76\u63d0\u51fa\u4e86\u5185\u6838\u90ae\u4ef6\u5217\u8868\u7684\u8865\u4e01\uff0c\u4ee5\u4f7f\u5176\u5728\u5c06\u6765\u66f4\u5bb9\u6613\u5b9e\u73b0\u3002\n\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u65b9\u9762\u662f\u786e\u4fdd\u5728Nomad\u4e0a\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u8d44\u6e90\u4f7f\u7528\u4e0d\u4f1a\u4e2d\u65ad\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u6258\u7ba1\u7684\u5176\u4ed6\u670d\u52a1\u3002\n\u78c1\u76d8\u7a7a\u95f4\u662f\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u5171\u4eab\u8d44\u6e90\uff0c\u5fc5\u987b\u80fd\u591f\u4e3aNomad\u8bbe\u7f6e\u914d\u989d\u3002\u6211\u4eec\u901a\u8fc7\u5c06Nomad\u6570\u636e\u76ee\u5f55\u9694\u79bb\u5230\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u4e13\u7528\u56fa\u5b9a\u5927\u5c0f\u6302\u8f7d\u70b9\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u4f46\u662f\uff0cNomad\u76ee\u524d\u4e0d\u652f\u6301\u5f00\u7bb1\u5373\u7528\u7684\u78c1\u76d8\u5e26\u5bbd\u548cIOPS\u9650\u5236\u3002\nNomad\u4f5c\u4e1a\u6587\u4ef6\u6709\u4e00\u4e2a\u53ef\u4ee5\u9650\u5236\u5185\u5b58\u548cCPU\u4f7f\u7528\u7684\u8d44\u6e90\u90e8\u5206(\u5185\u5b58\u4ee5MB\u4e3a\u5355\u4f4d\uff0cCPU\u4ee5MHz\u4e3a\u5355\u4f4d)\uff1a\n\u8fd9\u5728\u5e55\u540e\u4f7f\u7528cgroup\uff0c\u6211\u4eec\u7684\u6d4b\u8bd5\u8868\u660e\uff0c\u867d\u7136\u5185\u5b58\u9650\u5236\u662f\u6309\u7167\u9884\u671f\u5b9e\u65bd\u7684\uff0c\u4f46CPU\u9650\u5236\u662f\u8f6f\u9650\u5236\uff0c\u53ea\u8981\u4e3b\u673a\u4e0a\u6709\u53ef\u7528\u7684CPU\uff0c\u5c31\u4e0d\u4f1a\u5f3a\u5236\u5b9e\u65bd\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u6240\u6709\u673a\u5668\u5f53\u524d\u90fd\u8fd0\u884c\u76f8\u540c\u7684\u9762\u5411\u5ba2\u6237\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u4f7f\u7528Nomad\u52a8\u6001\u8c03\u5ea6\u5355\u4e2a\u4f5c\u4e1a\u4ee5\u5728\u5355\u673a\u4e0a\u8fd0\u884c\uff0c\u6311\u6218\u4e86\u8fd9\u4e00\u5047\u8bbe\u3002\n\u867d\u7136\u6211\u4eec\u7684\u52a8\u6001\u8d1f\u8f7d\u5e73\u8861\u7cfb\u7edfUnimog\u4f1a\u6839\u636e\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u5e73\u8861\u8bf7\u6c42\uff0c\u4ee5\u786e\u4fdd\u5b83\u5728\u6240\u6709\u673a\u5668\u4e0a\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u662f\u8d44\u6e90\u4f7f\u7528\u9ad8\u5cf0\u7684\u6279\u5904\u7406\u7c7b\u578b\u4f5c\u4e1a\u53ef\u80fd\u4f1a\u5e26\u6765\u6311\u6218\u3002\n\u786e\u4fddUnimog\u8c03\u6574\u4ee5\u9002\u5e94\u6b64\u6279\u5904\u7406\u7c7b\u578b\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6700\u7ec8\u9677\u5165\u6b63\u53cd\u9988\u5faa\u73af\u3002\n\u73b0\u5728\uff0c\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u90fd\u90e8\u7f72\u4e86Nomad\uff0c\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u9010\u6b65\u81ea\u6ce8\u518c\u6765\u63d0\u9ad8\u8fd0\u8425\u6240\u5fc5\u9700\u7684\u7ba1\u7406\u670d\u52a1\u7684\u53ef\u9760\u6027\u3002\u6211\u4eec\u8fc8\u51fa\u4e86\u7b2c\u4e00\u6b65\uff0c\u52a0\u5165\u4e86\u6211\u4eec\u7684\u91cd\u542f\u548c\u7ef4\u62a4\u7ba1\u7406\u670d\u52a1\u3002\n\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\uff0c\u6211\u4eec\u90fd\u8fd0\u884c\u4e00\u9879\u670d\u52a1\uff0c\u4fc3\u8fdb\u673a\u5668\u7684\u5728\u7ebf\u65e0\u4eba\u503c\u5b88\u6eda\u52a8\u91cd\u542f\u548c\u7ef4\u62a4\u3002\u6b64\u670d\u52a1\u8fc7\u53bb\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u4e00\u53f0\u77e5\u540d\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u3002\u8fd9\u4f7f\u5f97\u5b83\u5bb9\u6613\u53d7\u5230\u5355\u673a\u6545\u969c\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u5728\u505c\u673a\u65f6\u4f1a\u963b\u6b62\u8ba1\u7b97\u673a\u5728\u91cd\u65b0\u542f\u52a8\u540e\u81ea\u52a8\u542f\u7528\u3002\u56e0\u6b64\uff0c\u767b\u4e0aNomad\u4ee5\u63d0\u9ad8\u5176\u53ef\u9760\u6027\u662f\u4e00\u9879\u4f1f\u5927\u7684\u7b2c\u4e00\u9879\u670d\u52a1\u3002\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4fdd\u8bc1\u6b64\u670d\u52a1\u5728\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u59cb\u7ec8\u8fd0\u884c\uff0c\u800c\u4e0d\u53d7\u5355\u4e2a\u673a\u5668\u6545\u969c\u7684\u5f71\u54cd\u3002\u73b0\u5728\uff0c\u5176\u4ed6\u673a\u5668\u4e0d\u518d\u4f9d\u8d56\u4e8e\u4f17\u6240\u5468\u77e5\u7684\u5730\u5740\u6765\u5b9a\u4f4d\u6b64\u670d\u52a1\uff0c\u800c\u662f\u67e5\u8be2Consul DNS\u5e76\u52a8\u6001\u8ba1\u7b97\u51fa\u670d\u52a1\u6b63\u5728\u8fd0\u884c\u7684\u4f4d\u7f6e\u4ee5\u4e0e\u5176\u4ea4\u4e92\u3002\n\u5c31\u8fd9\u9879\u670d\u52a1\u7684\u53ef\u9760\u6027\u800c\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6539\u8fdb\uff0c\u56e0\u6b64\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u9884\u8ba1\u4f1a\u6709\u66f4\u591a\u7684\u7ba1\u7406\u670d\u52a1\u76f8\u7ee7\u51fa\u73b0\uff0c\u6211\u4eec\u5bf9\u6b64\u611f\u5230\u975e\u5e38\u5174\u594b\u3002\n\u8fb9\u7f18\u53ef\u9760\u6027\u53ef\u7528\u6027\u6e38\u7267\u8c03\u5ea6", "note_en": "In this blog post, we will walk you through the reliability model of services running in our more than 200 edge cities worldwide. Then, we will go over how deploying a new dynamic task scheduling system, HashiCorp Nomad, helped us improve the availability of services in each of those data centers, covering how we deployed Nomad and the challenges we overcame along the way. Finally, we will show you both how we currently use Nomad and how we are planning on using it in the future.\n  For this blog post, we will distinguish between two different categories of services running in each data center:\n Customer-facing services: all of our stack of products that our customers use, such as caching, WAF, DDoS protection, rate-limiting, load-balancing, etc.\n Management services: software required to operate the data center, that is not in the direct request path of customer traffic.\n  The reliability model of our customer-facing services is to run them on all machines in each data center. This works well as it allows each data center\u2019s capacity to scale dynamically by adding more machines.\n Scaling is especially made easy thanks to our dynamic load balancing system, Unimog, which runs on each machine. Its role is to continuously re-balance traffic based on current resource usage and to check the health of services. This helps provide resiliency to individual machine failures and ensures resource usage is close to identical on all machines.\n As an example, here is the CPU usage over a day in one of our data centers where each time series represents one machine and the different colors represent different generations of hardware. Unimog keeps all machines processing traffic and at roughly the same CPU utilization.\n   Some of our larger data centers have a substantial number of machines, but sometimes we need to reliably run just a single or a few instances of a management service in each location.\n There are currently a couple of options to do this, each have their own pros and cons:\n Deploying the service to all machines in the data center: Con: it unnecessarily uses resources which could have been used to serve customer traffic and is not cost-effective\n Deploying the service to a static handful of machines in each data center: Con: it runs the risk of service unavailability when those handful of machines unexpectedly fail\n A third, more viable option, is to use dynamic task scheduling so that only the right amount of resources are used while ensuring reliability.\n  Having to pick between two suboptimal reliability model options for management services we want running in each data center was not ideal.\n Indeed, some of those services, even though they are not in the request path, are required to continue operating the data center. If the machines running those services become unavailable, in some cases we have to temporarily disable the data center while recovering them. Doing so automatically re-routes users to the next available data center and doesn\u2019t cause disruption. In fact, the entire Cloudflare network is designed to operate with data centers being disabled and brought back automatically. But it\u2019s optimal to route end users to a data center near them so we want to minimize any data center level downtime.\n This led us to realize we needed a system to ensure a certain number of instances of a service were running in each data center, regardless of which physical machine ends up running it.\n Customer-facing services run on all machines in each data center and do not need to be onboarded to that new system. On the other hand, services currently running on a fixed subset of machines with sub-optimal reliability guarantees and services which don\u2019t need to run on all machines are good candidates for onboarding.\n   While Kubernetes was another option, we decided to use HashiCorp\u2019s  Nomad for the following reasons:\n Satisfies our initial requirement, which was reliably running a single instance of a binary with resource isolation in each data center.\n Has few dependencies and a straightforward integration with Consul. Consul is another piece of HashiCorp software we had already deployed in each datacenter. It provides distributed key-value storage and service discovery capabilities.\n Is lightweight (single Go binary), easy to deploy and provision new clusters which is a plus when deploying as many clusters as we have data centers.\n Has a modular task driver (part responsible for executing tasks and providing resource isolation) architecture to support not only containers but also binaries and any custom task driver.\n Is open source and written in Go. We have Go language experience within the team, and Nomad has a responsive community of maintainers on GitHub.\n    Nomad Server: instances forming the cluster responsible for scheduling, five per data center to provide sufficient failure tolerance\n Nomad Client: instances executing the actual tasks, running on all machines in every data center\n To guarantee Nomad Server cluster reliability, we deployed instances on machines which are part of different failure domains:\n In different multi-node chassis (most of our edge hardware comes in the form of multi-node chassis, one chassis contains four individual servers)\n We also added logic to our configuration management tool to ensure we always keep a consistent number of Nomad Server instances regardless of the expansions and decommissions of servers happening on a close to daily basis.\n The logic is rather simple, as server expansions and decommissions happen, the Nomad Server role gets redistributed to a new list of machines. Our configuration management tool then ensures that Nomad Server runs on the new machines before turning it off on the old ones.\n Additionally, because server expansions and decommissions affect a subset of racks at a time and the Nomad Server role assignment logic provides rack-diversity guarantees, the cluster stays healthy as quorum is kept at all times.\n  Nomad job files are templated and checked into a git repository. Our configuration management tool then ensures the jobs are scheduled in every data center. From there, Nomad takes over and ensures the jobs are running at all times in each data center.\n By exposing rack  metadata to each Nomad Client, we are able to make sure each instance of a particular service runs in a different rack and is tied to a different failure domain. This way we make sure that the failure of one rack of servers won\u2019t impact the service health as the service is also running in a different rack, unaffected by the failure.\n    We leveraged Nomad integration with Consul to get Nomad jobs dynamically added to the Consul Service Catalog. This allows us to discover where a particular service is currently running in each data center by querying Consul. Additionally, with the Consul DNS Interface enabled, we can also use DNS-based lookups to target services running on Nomad.\n  To be able to properly operate as many Nomad clusters as we have data centers, good observability on Nomad clusters and services running on those clusters was essential.\n We use Prometheus to scrape Nomad Server and Client instances running in each data center and Alertmanager to alert on key metrics. Using Prometheus metrics, we built a Grafana dashboard to provide visibility on each cluster.\n  We  set up our Prometheus instances to discover services running on Nomad by querying the Consul Service Directory and scraping their metrics periodically using the following Prometheus configuration:\n - consul_sd_configs: - server: localhost:8500 job_name: management_service_via_consul relabel_configs: - action: keep regex: management-service source_labels: - __meta_consul_service\n We then use those metrics to create Grafana dashboards and set up alerts for services running on Nomad.\n To restrict access to Nomad API endpoints, we enabled mutual TLS authentication and are generating client certificates for each entity interacting with Nomad. This way, only entities with a valid client certificate can interact with Nomad API endpoints in order to schedule jobs or perform any CLI operation.\n  Deploying a new component always comes with its set of challenges; here is a list of a few hurdles we have had to overcome along the way.\n  When starting to use the  exec driver to run binaries isolated in a  chroot environment, we noticed our stateless root partition running on  initramfs was not supported as the task would not start and we got this error message in our logs:\n Feb 12 19:49:03 machine nomad-client[258433]: 2020-02-12T19:49:03.332Z [ERROR] client.alloc_runner.task_runner: running driver failed: alloc_id=fa202-63b-33f-924-42cbd5 task=server error=&#34;failed to launch command with executor: rpc error: code = Unknown desc = container_linux.go:346: starting container process caused &#34;process_linux.go:449: container init caused \\&#34;rootfs_linux.go:109: jailing process inside rootfs caused \\\\\\&#34;pivot_root invalid argument\\\\\\&#34;\\&#34;&#34;&#34;\n We filed a GitHub  issue and submitted a workaround  pull request which was promptly reviewed and merged upstream.\n In parallel, for maximum isolation security, we worked on enabling  pivot_root in our setup by modifying our boot process and other team members developed and proposed a patch to the  kernel mailing list to make it easier in the future.\n  One very important aspect was to make sure the resource usage of tasks running on Nomad would not disrupt other services colocated on the same machine.\n Disk space is a shared resource on every machine and being able to set a quota for Nomad was a must. We achieved this by isolating the Nomad data directory to a dedicated fixed-size mount point on each machine. Limiting disk bandwidth and IOPS, however, is not currently supported out of the box by Nomad.\n Nomad job files have a  resources section where memory and CPU usage can be limited (memory is in MB, cpu is in MHz):\n  This uses cgroups under the hood and our testing showed that while memory limits are enforced as one would expect, the CPU limits are soft limits and not enforced as long as there is available CPU on the host machine.\n  As mentioned above, all machines currently run the same customer-facing workload. Scheduling individual jobs dynamically with Nomad to run on single machines challenges that assumption.\n While our dynamic load balancing system, Unimog, balances requests based on resource usage to ensure it is close to identical on all machines, batch type jobs with spiky resource usage can pose a challenge.\n  ensure Unimog adjusts to this batch type workload and does not end up in a positive feedback loop\n  Now Nomad has been deployed in every data center, we are able to improve the reliability of management services essential to operations by gradually onboarding them. We took a first step by onboarding our reboot and maintenance management service.\n  In each data center, we run a service which facilitates online unattended rolling reboots and maintenance of machines. This service used to run on a single well-known machine in each data center. This made it vulnerable to single machine failures and when down prevented machines from enabling automatically after a reboot. Therefore, it was a great first service to be onboarded to Nomad to improve its reliability.\n We now have a guarantee this service is always running in each data center regardless of individual machine failures. Instead of other machines relying on a well-known address to target this service, they now query Consul DNS and dynamically figure out where the service is running to interact with it.\n This is a big improvement in terms of reliability for this service, therefore many more management services are expected to follow in the upcoming months and we are very excited for this to happen.\n  Edge  Reliability  Availability  Nomad  Scheduling", "posttime": "2020-06-06 23:39:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "hashicorp,nomad", "title": "\u6211\u4eec\u4f7f\u7528HashiCorp Nomad", "title_en": "We Use HashiCorp Nomad", "transed": 1, "url": "https://blog.cloudflare.com/how-we-use-hashicorp-nomad", "via": "", "real_tags": ["hashicorp", "nomad"]}, {"category": "", "categoryclass": "", "imagename": "9c71e4cd8a8fa62bde8f0ff11012096a.jpeg", "infoid": 1005456, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1\u6708\u4e0b\u65ec\uff0c\u82f9\u679c\u516c\u53f8\u53d1\u5e03\u4e86\u4e00\u4efd\u540d\u4e3a\u201c\u82f9\u679c\u53d1\u660e\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u672a\u6765\u5934\u76d4\u663e\u793a\u8bbe\u5907\u7684\u5904\u65b9\u955c\u7247\u7cfb\u7edf\u201d\u7684\u62a5\u544a\u3002\u6211\u4eec\u5728\u62a5\u544a\u4e2d\u6307\u51fa\uff0c\u8fd9\u9879\u4e13\u5229\u4e0e\u672a\u6765\u7684\u6df7\u5408\u73b0\u5b9e\u8033\u673a\u6709\u5173\uff0c\u5b83\u5c06\u5141\u8bb8\u6234\u5904\u65b9\u773c\u955c\u7684\u4eba\u5c06\u4ed6\u4eec\u72ec\u7279\u7684\u955c\u7247\u653e\u5165\u8033\u673a\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5728\u8033\u673a\u4e0a\u4f69\u6234\u5916\u90e8\u773c\u955c\uff0c\u4ece\u800c\u4f7f\u8033\u673a\u66f4\u7b28\u91cd\u3001\u66f4\u4e0d\u8212\u670d\u3002\u4eca\u5929\uff0c\u82f9\u679c\u516c\u53f8\u7684\u4e00\u9879\u4e13\u5229\u5c06\u4ed6\u4eec\u7684\u89c6\u89c9\u5e26\u5230\u4e86\u4e00\u4e2a\u66f4\u8be6\u7ec6\u7684\u6c34\u5e73\u3002\n\u4eca\u5929\uff0c\u7f8e\u56fd\u4e13\u5229\u5546\u6807\u5c40\u516c\u5e03\u4e86\u82f9\u679c\u7684\u4e24\u9879\u4e13\u5229\u7533\u8bf7\uff0c\u8fd9\u4e24\u9879\u7533\u8bf7\u7684\u91cd\u70b9\u662f\u82f9\u679c\u672a\u6765\u5728\u5934\u76d4\u8bbe\u5907(HMD)\u548c\u773c\u955c\u4e0a\u7684\u773c\u955c\u3002\u4e3b\u8981\u4e13\u5229\u5305\u62ec\u4e00\u79cd\u529f\u80fd\u5f3a\u5927\u7684\u65b0\u89c6\u529b\u77eb\u6b63\u5149\u5b66\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u80fd\u591f\u5c06\u7528\u6237\u7684\u773c\u955c\u5904\u65b9\u5408\u5e76\u5230\u8be5\u7cfb\u7edf\u4e2d\u3002\u7136\u540e\uff0c\u8be5\u7cfb\u7edf\u5c06\u6539\u53d8\u5149\u5b66\u7cfb\u7edf\uff0c\u4ee5\u89e3\u51b3\u6563\u5149\u3001\u8fdc\u89c6\u548c\u8fd1\u89c6\u7b49\u89c6\u529b\u95ee\u9898\uff0c\u8fd9\u6837\u6234\u773c\u955c\u7684\u4eba\u5728\u4f7f\u7528\u82f9\u679cHMD\u65f6\u5c31\u4e0d\u9700\u8981\u6234\u773c\u955c\u4e86\u3002\n\u8fd9\u5bf9\u82f9\u679c\u6765\u8bf4\u53ef\u80fd\u662f\u4e00\u4e2a\u81f4\u547d\u7684\u5e94\u7528\uff0c\u56e0\u4e3a\u6839\u636eGlassesCrafter(\u4e00\u4efd\u672a\u6ce8\u660e\u65e5\u671f\u7684\u62a5\u544a)\uff0c\u7f8e\u56fd\u89c6\u529b\u59d4\u5458\u4f1a(Vision Council Of America)\u58f0\u79f0\uff0c\u5927\u7ea675%\u7684\u6210\u5e74\u4eba\u4f7f\u7528\u67d0\u79cd\u89c6\u529b\u77eb\u6b63\u3002\n\u76f4\u63a5\u8df3\u5230\u4e0b\u9762\uff0c\u82f9\u679c\u7684\u4e13\u5229\u56fe1\u662f\u8bf4\u660e\u6027\u5934\u76d4\u8bbe\u5907(HMD)\u7684\u57fa\u672c\u6982\u56fe\uff1b\u56fe2\u662f\u5177\u6709\u53ef\u8c03\u8282\u663e\u793a\u5668\u548c\u955c\u5934\u7684\u8bf4\u660e\u6027\u5934\u76d4\u8bbe\u5907\u7684\u57fa\u672c\u6982\u56fe\u3002\n\u82f9\u679c\u516c\u53f8\u6307\u51fa\uff0c\u8f93\u5165\u8f93\u51fa\u8bbe\u5907(\u5982\u56fe1\u4e2d\u7684#44\u6240\u793a)\u53ef\u80fd\u5305\u62ec\u4e00\u4e2a\u611f\u6d4b\u7cfb\u7edf\uff0c\u7528\u4e8e\u6d4b\u91cf\u7528\u6237\u773c\u775b\u7684\u773c\u775b\u7279\u5f81(\u4e0a\u6587\u4e2d\u7684#46)\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982Shack-Hartmann\u6ce2\u524d\u4f20\u611f\u5668\u3001Tscherning\u4f20\u611f\u5668\u6216\u5149\u7ebf\u8ddf\u8e2a\u4f20\u611f\u5668\u4e4b\u7c7b\u7684\u6ce2\u524d\u4f20\u611f\u5668\u6765\u6d4b\u91cf\u7528\u6237\u773c\u775b\u4e2d\u7684\u5c48\u5149\u8bef\u5dee\uff0c\u4f8b\u5982\u6563\u5149\u3001\u8fdc\u89c6\u548c\u8fd1\u89c6\u3002\n\u8f93\u5165\u8bbe\u5907\u8fd8\u53ef\u4ee5\u5305\u62ec\u7528\u4e8e\u6355\u6349\u7528\u6237\u73af\u5883\u7684\u56fe\u50cf\u7684\u76f8\u673a(\u6570\u5b57\u56fe\u50cf\u4f20\u611f\u5668)\u3001\u7528\u4e8e\u7531\u89c2\u5bdf\u773c\u6267\u884c\u51dd\u89c6\u68c0\u6d4b\u64cd\u4f5c\u7684\u76f8\u673a\u548c/\u6216\u5176\u4ed6\u76f8\u673a\u3002\n\u6839\u636e\u56fe2\u7684\u4e13\u5229\uff0c\u8be5\u88c5\u7f6e(#10)\u53ef\u4ee5\u91c7\u7528\u7528\u4e8e\u4e00\u526f\u773c\u955c\u7684\u6846\u67b6\u7684\u5f62\u72b6(\u4f8b\u5982\uff0c\u5934\u6234\u5f0f\u88c5\u7f6e10\u53ef\u4ee5\u7c7b\u4f3c\u4e8e\u773c\u955c)\u548c/\u6216\u91c7\u53d6\u5178\u578b\u7684\u89c6\u9891\u8033\u673a\u6216\u62a4\u76ee\u955c\u7684\u5f62\u72b6\u3002\n\u82f9\u679c\u77eb\u6b63\u89c6\u89c9\u7cfb\u7edf\u7684\u6838\u5fc3\u5f00\u59cb\u4e8e\u4e0b\u9762\u7684\u4e13\u5229\u56fe4\uff0c\u5b83\u5c55\u793a\u4e86\u5982\u4f55\u8c03\u6574\u53ef\u8c03\u8c10\u67f1\u9762\u900f\u955c\u7684\u7126\u8ddd\u7684\u56fe\u8868\u3002\n\u9664\u4e86\u57fa\u672c\u539f\u7406\u4e4b\u5916\uff0c\u82f9\u679c\u516c\u53f8\u6ce8\u610f\u5230\uff0c\u4e3a\u4e86\u8c03\u8c10\u955c\u5934\uff0c\u53ef\u4ee5\u5c06\u53e6\u4e00\u5e73\u6ed1\u53d8\u5316\u7684\u7535\u538b\u5206\u5e03(\u4f8b\u5982\uff0c\u5177\u6709\u66f4\u5927\u5e45\u5ea6)\u5e94\u7528\u4e8e\u6db2\u6676\u6750\u6599\uff0c\u4ece\u800c\u521b\u5efa\u6298\u5c04\u7387\u5206\u5e03#68\u3002\n\u8be5\u955c\u5934\u7cfb\u7edf\u65e8\u5728\u5e2e\u52a9\u5177\u6709\u6563\u5149\u7684\u7528\u6237\u77eb\u6b63\u89c6\u529b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e13\u5229\u7533\u8bf7\u4e2d\u89c4\u5b9a\u7684\u7279\u5b9a\u955c\u5934\u6280\u672f\u63a7\u5236\u6cbfX\u548c/\u6216Y\u7ef4\u5ea6\u7684\u67f1\u9762\u955c\u5934\u5ea6\u6570\u3002\n\u5728\u64cd\u4f5c\u671f\u95f4\uff0c\u63a7\u5236\u7535\u8def\u53ef\u4ee5\u8c03\u6574\u663e\u793a\u5668\u7684\u4f4d\u7f6e(\u4e0a\u9762\u56fe1\u7684#40)\uff0c\u4f8b\u5982\uff0c\u5de6\u663e\u793a\u5668\u4e0e\u7528\u6237\u7684\u5de6\u773c\u5728\u5c3a\u5bf8Z\u4e0a\u7684\u5206\u79bb\uff0c\u4ee5\u53ca\u53f3\u663e\u793a\u5668\u4e0e\u7528\u6237\u7684\u53f3\u773c\u5728\u5c3a\u5bf8Z\u4e0a\u7684\u5206\u79bb)\u548c/\u6216\u53ef\u4ee5\u8c03\u6574\u5149\u5b66\u7cfb\u7edf\u4e2d\u7684\u53ef\u8c03\u900f\u955c\uff0c\u4ee5\u4f7f\u663e\u793a\u5668\u4e0a\u7684\u5185\u5bb9\u6210\u4e3a\u7528\u6237\u7684\u7126\u70b9\uff0c\u540c\u65f6\u6821\u6b63\u7528\u6237\u7684\u6563\u5149\u3001\u8fdc\u89c6\u3001\u8fd1\u89c6\u548c\u5176\u4ed6\u5c48\u5149\u4e0d\u6b63\u8bef\u5dee\u3002\u5728\u6821\u6b63\u7528\u6237\u7684\u6563\u5149\u3001\u8fdc\u89c6\u3001\u8fd1\u89c6\u548c\u5176\u4ed6\u5c48\u5149\u8bef\u5dee\u7684\u540c\u65f6\uff0c\u63a7\u5236\u7535\u8def\u53ef\u4ee5\u8c03\u6574\u663e\u793a\u5668\u7684\u4f4d\u7f6e(\u4e0a\u9762\u56fe1\u7684#40)\uff0c\u4f8b\u5982\uff0c\u5de6\u663e\u793a\u5668\u4e0e\u7528\u6237\u7684\u5de6\u773c\u5728\u5c3a\u5bf8Z\u4e0a\u7684\u5206\u79bb\u4ee5\u53ca\u53f3\u663e\u793a\u5668\u4e0e\u7528\u6237\u7684\u53f3\u773c\u5728\u5c3a\u5bf8Z\u4e0a\u7684\u5206\u79bb)\u548c/\u6216\u53ef\u4ee5\u8c03\u6574\u5149\u5b66\u7cfb\u7edf\u4e2d\u7684\u53ef\u8c03\u8c10\u900f\u955c\u4ee5\u4f7f\u663e\u793a\u5668\u4e0a\u7684\u5185\u5bb9\u6210\u4e3a\u7528\u6237\u7684\u7126\u70b9\u3002\n\u53ef\u4ee5\u57fa\u4e8e\u6b63\u5728\u663e\u793a\u7684\u5185\u5bb9\u7684\u6027\u8d28(\u4f8b\u5982\uff0c\u57fa\u4e8e\u5185\u5bb9\u662f\u8bf8\u5982\u98ce\u666f\u4e2d\u7684\u5c71\u7684\u8fdc\u5904\u5185\u5bb9\u8fd8\u662f\u8bf8\u5982\u9644\u8fd1\u4eba\u7684\u8fd1\u8ddd\u79bb\u5185\u5bb9)\u6765\u8c03\u6574\u7126\u70b9\uff0c\u4ee5\u6700\u5c0f\u5316\u4f4f\u5bbf-\u6536\u655b\u5931\u914d\uff0c\u540c\u65f6\u8003\u8651\u7528\u6237\u504f\u597d\u548c\u7528\u6237\u5c48\u5149\u8bef\u5dee\u3002\n\u82f9\u679c\u8fdb\u4e00\u6b65\u6307\u51fa\uff0c\u5934\u6234\u5f0f\u8033\u673a\u7684\u7528\u6237\u53ef\u80fd\u6ca1\u6709\u5b8c\u7f8e\u7684\u89c6\u529b\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u80fd\u8fd1\u89c6\u3001\u53ef\u80fd\u8fdc\u89c6\u548c/\u6216\u53ef\u80fd\u6709\u6563\u5149\u3002\n\u4e3a\u4e86\u77eb\u6b63\u4e0d\u5b8c\u7f8e\u7684\u89c6\u529b\uff0c\u53ef\u4ee5\u5c06\u89c6\u529b\u77eb\u6b63\u955c\u7247\u8026\u5408\u5230\u8bbe\u5907\u4e0a\u3002\u4f8b\u5982\uff0c\u67d0\u4e9b\u955c\u7247\u53ef\u4ee5\u5177\u6709\u56fa\u5b9a\u90e8\u5206\u548c\u53ef\u62c6\u5378\u7684\u89c6\u529b\u77eb\u6b63\u90e8\u5206\u3002\n\u5728\u82f9\u679c\u7684\u4e13\u5229\u7533\u8bf7\u4e2d\uff0c\u4ed6\u4eec\u8fdb\u4e00\u6b65\u6307\u51fa\uff1a\u4f8b\u5982\uff0c\u73a9\u7535\u5b50\u6e38\u620f\u7684\u7528\u6237\u53ef\u80fd\u5446\u5728\u4e00\u4e2a\u72ed\u5c0f\u7684\u7a7a\u95f4\u91cc\uff0c\u800c\u4e14\u79bb\u5468\u56f4\u7684\u7269\u4f53\u5f88\u8fd1\u3002\u4e3a\u4e86\u5141\u8bb8\u7528\u6237\u7684\u773c\u775b\u5728\u64cd\u4f5c\u671f\u95f4\u653e\u677e(\u65b9\u6846116\u672a\u793a\u51fa)\uff0c\u53ef\u4ee5\u5c06\u8fdc\u5904\u7684\u5c71\u666f\u63d2\u5165\u5230\u89c6\u9891\u6e38\u620f\u4e2d\uff0c\u4ece\u800c\u907f\u514d\u9700\u8981\u7528\u6587\u672c\u6d88\u606f(\u653e\u677e\u773c\u775b)\u6216\u5176\u4ed6\u53ef\u80fd\u6270\u4e71\u7528\u6237\u4eab\u53d7\u89c6\u9891\u6e38\u620f\u7684\u5185\u5bb9\u6765\u6253\u65ad\u7528\u6237\u3002\n\u5feb\u8fdb\u5230\u4e0a\u9762\u7684\u82f9\u679c\u4e13\u5229\u56fe9\uff0c\u6211\u4eec\u80fd\u591f\u770b\u5230\u64cd\u4f5c\u5934\u6234\u5f0f\u8bbe\u5907\u6240\u6d89\u53ca\u7684\u8bf4\u660e\u6027\u64cd\u4f5c\u7684\u6d41\u7a0b\u56fe\uff1b\u56fe10\u662f\u8bf4\u660e\u6027\u900f\u955c\u548c\u76f8\u5173\u89c6\u529b\u77eb\u6b63\u900f\u955c\u7684\u4fa7\u89c6\u56fe\uff1b\u56fe11\u662f\u8026\u5408\u5230\u955c\u67b6\u7684\u8bf4\u660e\u6027\u89c6\u89c9\u77eb\u6b63\u900f\u955c\u7684\u524d\u89c6\u56fe\u3002\n\u5728\u4e13\u5229\u65e0\u82b1\u679c\u4e2d\u3002\u6211\u4eec\u80fd\u591f\u5c06\u78c1\u94c1\u4f5c\u4e3a\u89c6\u89c9\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002\u90e8\u5206\u5730\uff0c\u82f9\u679c\u516c\u53f8\u6ce8\u610f\u5230\uff0c\u4e3a\u4e86\u5c06\u89c6\u529b\u77eb\u6b63\u900f\u955c#130(\u56fe10\u4e2d\u6240\u793a)\u76f8\u5bf9\u4e8e\u7ed3\u6784#134\u548cHMD\u7684\u5176\u4f59\u90e8\u5206\u653e\u7f6e\u6210\u671f\u671b\u7684\u65cb\u8f6c\u5bf9\u51c6\uff0c\u73af#132\u53ef\u4ee5\u8bbe\u7f6e\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u78c1\u94c1\uff0c\u8bf8\u5982\u78c1\u94c1#138\u548c#140\uff0c\u5e76\u4e14\u7ed3\u6784#134\u53ef\u4ee5\u8bbe\u7f6e\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5bf9\u5e94\u7684\u78c1\u94c1#136\u548c#142\u3002\n\u5f53\u89c6\u529b\u77eb\u6b63\u955c\u5934\u5b89\u88c5\u5230\u5934\u76d4\u663e\u793a\u5668\u4e0a\u65f6\uff0c\u78c1\u94c1#138\u548c\u78c1\u94c1#136\u4e4b\u95f4\u7684\u78c1\u5f15\u529b\u4ee5\u53ca\u78c1\u94c1#140\u548c#142\u4e4b\u95f4\u7684\u78c1\u5f15\u529b\u5c06\u6709\u52a9\u4e8e\u5c06\u955c\u5934#130\u5bf9\u51c6\u5e76\u4fdd\u6301\u5728\u5934\u76d4\u663e\u793a\u5668\u5185\u6240\u9700\u7684\u89d2\u5ea6\u65b9\u5411\uff0c\u4ece\u800c\u786e\u4fdd\u89c6\u529b\u77eb\u6b63\u955c\u5934\u4ee4\u4eba\u6ee1\u610f\u5730\u77eb\u6b63\u4f7f\u7528\u8005\u7684\u6563\u5149\u3002\n\u6700\u540e\uff0c\u82f9\u679c\u6ce8\u610f\u5230\uff0c\u7528\u6237\u8f93\u5165\u5305\u62ec\u773c\u955c\u5904\u65b9\uff0c\u5e76\u4e14\u63a7\u5236\u7535\u8def\u88ab\u914d\u7f6e\u4e3a\u57fa\u4e8e\u773c\u955c\u5904\u65b9\u5229\u7528\u5b9a\u4f4d\u5668\u8c03\u6574\u663e\u793a\u5668\u7684\u4f4d\u7f6e\u3002\n\u4eca\u5929\u7531\u7f8e\u56fd\u4e13\u5229\u5c40\u516c\u5e03\u7684\u82f9\u679c\u4e13\u5229\u7533\u8bf7\u662f\u57282019\u5e74\u7b2c\u56db\u5b63\u5ea6\u63d0\u4ea4\u7684\uff0c\u8003\u8651\u5230\u8fd9\u662f\u4e00\u9879\u4e13\u5229\u7533\u8bf7\uff0c\u4e00\u4e9b\u53ef\u4ee5\u8ffd\u6eaf\u52302017\u5e745\u6708\u7684\u5de5\u4f5c\u4e5f\u5305\u62ec\u5728\u8fd9\u4efd\u7533\u8bf7\u4e2d\uff0c\u8fd9\u6837\u7684\u4ea7\u54c1\u4e0a\u5e02\u7684\u65f6\u95f4\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u3002\nGraham Myhre\u535a\u58eb\uff1b\u663e\u793a\u63a2\u7d22\u9ad8\u7ea7\u5de5\u7a0b\u7ecf\u7406\uff1bMyhre\u4e4b\u524d\u66fe\u5728Lytro Inc\u5de5\u4f5c\uff0c\u5f00\u53d1\u4e0b\u4e00\u4ee3\u5149\u573a\u5149\u5b66\u548c\u5fae\u5149\u5b66\u3002\nJonny(Hyungryul)Choi\uff1a\u5de5\u7a0b\u7ecf\u7406\uff0c\u4e3a\u672a\u6765\u7684\u82f9\u679c\u4ea7\u54c1\u7814\u7a76\u65b0\u7684\u663e\u793a\u548c\u5149\u5b66\u6280\u672f\u3002\n\u5e03\u5170\u767b\u00b7\u514b\u62c9\u514b(Brandon Clarke)\uff1a\u9762\u677f\u5de5\u827a\u548c\u5149\u5b66(PPO)\u5de5\u7a0b\u96c6\u56e2\u9ad8\u7ea7\u663e\u793a\u5de5\u7a0b\u5e08\u3002\n\u7b2c\u4e8c\u4e2a\u4e13\u5229\u7533\u8bf7\u4e0e\u82f9\u679c\u672a\u6765\u7684\u5934\u76d4\u663e\u793a\u5668\u548c\u73bb\u7483\u8bbe\u5907\u6709\u5173\uff0c\u4eca\u5929\u516c\u5e03\u4e86\u7f16\u53f7\u4e3a20200174255\u7684\u4e13\u5229\u7533\u8bf7\u3002\u5982\u679c\u4f60\u78b0\u5de7\u662f\u4e00\u4f4d\u719f\u6089\u5168\u606f\u56fe\u7ed3\u6784\u3001\u53cd\u5c04\u5168\u606f\u56fe\u3001\u900f\u5c04\u5168\u606f\u56fe\u548c\u8ba1\u7b97\u5168\u606f(CGH)\u663e\u793a\u5668\u7684\u5149\u5b66\u5de5\u7a0b\u5e08\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u6709\u673a\u4f1a\u7406\u89e3\u82f9\u679c\u516c\u53f8\u540d\u4e3a\u201c\u5177\u6709\u591a\u5c42\u5168\u606f\u7ec4\u5408\u5668\u7684\u5149\u5b66\u7cfb\u7edf\u201d\u53d1\u660e\u7684\u6df1\u5ea6\u3002\u8fd9\u91cc\u53ef\u4ee5\u56de\u987e\u4e00\u4e0b\u63d0\u5230\u5168\u606f\u56fe146\u6b21\u7684\u4e13\u5229\u3002", "note_en": "In late January Patently Apple posted a report titled &#34;Apple Invention Details  a Prescription Lens System for a Future Head-Mounted Display Device.&#34; We noted in the report that &#34;The patent relates to a future mixed reality headset that will allow those with prescription glasses to put their unique lenses into a headset to eliminate the need to wear exterior glasses in the headset making it bulkier and less comfortable.&#34; Today an Apple patent takes their vision to the next level in much greater detail.\n    Today the US Patent &amp; Trademark Office published two patent application from Apple that are focused on Apple&#39;s future eyeware in both Head Mounted Devices (HMD) and glasses. The main patent covers a powerful new vision correction optical system that&#39;s able to incorporate a user&#39;s glasses prescription into the system. The system will then alter the optics to address vision issues such astigmatism, farsightedness, and nearsightedness so that those who wear glasses won&#39;t have to them when using Apple&#39;s HMD.\n    That could be a killer application for Apple because according to (an undated report by)  GlassesCrafter,  The Vision Council of America claims that approximately 75% of adults use some sort of vision correction.\n    Jumping right in, Apple&#39;s patent FIG. 1 below is a diagram of a basic overview of an illustrative head-mounted device (HMD); FIG. 2 is a basic overview diagram of an illustrative  head mounted device with adjustable displays and lenses.\n        Apple notes that input-output devices (shown as #44 of FIG. 1) may include a sensing system that measures the eye characteristics of the user&#39;s eyes (#46 above). For example, a wavefront sensor such as a Shack-Hartmann wavefront sensor, Tscherning sensor, or a ray tracing sensor may be used to measure refractive errors in a user&#39;s eyes such as astigmatism, farsightedness, and nearsightedness.\n    Input Devices can also include cameras (digital image sensors) for capturing images of the user&#39;s surroundings, cameras for performing gaze detection operations by the viewing eyes and/or other cameras.\n    Further to patent FIG. 2, the device (#10)  may take on the shape of a frame for a pair of glasses (e.g., head-mounted device 10 may resemble eyeglasses) and or take on the shape of a typical video Headset or a pair of goggles.\n    The heart of Apple&#39;s corrective vision system begins with patent FIG. 4 below which presents a graph showing how the focal length of a tunable cylindrical lens can be adjusted.\n    Beyond the basics, Apple notes that to tune the lens, another smoothly varying voltage profile (e.g., with a larger magnitude) may be applied to the liquid crystal material, thereby creating refractive index profile #68.\n    The lens system is designed to help correct the vision of a user with astigmatism, cylindrical lens power along the X and/or Y dimensions can be controlled using specific lens techniques as laid out in the patent filing.\n        During operations, control circuitry may adjust the position of the display (#40 of FIG. 1 above), e.g., the separation in dimension Z of the left display from the user&#39;s left eye and the separation in dimension Z of the right display from the user&#39;s right eye) and/or may adjust tunable lenses in the optical system to bring content on the display into focus for the user   while correcting for astigmatism, farsightedness, nearsightedness, and other refractive errors in the user&#39;s vision.\n    The focus may be adjusted based on the nature of the content being displayed (e.g., based on the whether the content is distant content such as mountains in a landscape or is close-up content such as a nearby person) to minimize accommodation-vergence mismatch while taking into account user preferences and user refractive error.\n    Apple further notes that a user of the headset may not have perfect vision. For example, a user may be nearsighted, may be farsighted, and/or may have astigmatism.\n    To correct for imperfect vision,   vision correction lenses may be coupled to device.  Certain Lenses may, for example, have a fixed portion and a removable vision correction portion.\n    Further in to Apple&#39;s patent filing they note: &#34;For example,  a user playing a video game may be in a confined space and close to surrounding objects. To allow the user&#39;s eyes to relax during the operations of (block 116 not shown), a distant mountain scene may be inserted into the video game, thereby avoiding the need to interrupt the user with a text message (&#34;relax eyes&#34;) or other content that might disrupt the user&#39;s enjoyment of the video game.&#34;\n    Fast forwarding to Apple&#39;s patent FIG. 9 above, we&#39;re able to see a flow chart of illustrative operations involved in operating a head-mounted device; FIG. 10 is a  side view of illustrative lens  and an associated vision correction lens; and FIG. 11 is a  front view of an illustrative vision correction lens coupled to a lens mount.\n    In patent fig. 11 we&#39;re able to magnets as part of the vision system. In part Apple notes that &#34;to place vision correction lens #130 (shown in FIG. 10) into a desired rotational alignment with respect to structure #134 and the rest of THE HMD, ring #132 may be provided with one or more magnets such as magnets #138 and #140 and structure #134 may be provided with one or more corresponding magnets #136 and #142.\n    When the vision correction lens is mounted to the HMD, magnetic attraction between magnet #138 and magnet #136 and magnetic attraction between magnet #140 and #142 will help align and hold lens #130 in a desired angular orientation within the HMD thereby ensuring that the vision correction lens satisfactorily corrects a user&#39;s astigmatism.\n    Finally, Apple notes that the user input includes an eyeglasses prescription and the control circuitry is configured to adjust a position of the display with the positioner based on the eyeglasses prescription.\n    Apple&#39;s patent application that was published today by the U.S. Patent Office was filed back in Q4 2019 with some work dating back to May 2017 being included in this application Considering that this is a patent application, the timing of such a product to market is unknown at this time.\n        Graham Myhre, PhD; Senior Engineering Manager of Display Exploration; Myhre previously worked at Lytro Inc that developed next-gen Light Field optics and micro-optics.\n      Jonny (Hyungryul) Choi: Engineering Manager; Investigates new display and optical technologies for future Apple products.\n    Brandon Clarke: Senior Display Engineer, part of the Panel Process and Optics (PPO) Engineering Group\n                  A second Patent Application relating to Apple&#39;s future HMD and glass devices was published today under number 20200174255. If you happen to be an optical engineer familiar with hologram structures, reflection holograms, transmission holograms and computer-generated holography (CGH) displays, then you may stand a chance at understanding the depth of Apple&#39;s invention titled &#34;Optical Systems with Multi-Layer Holographic Combiners.&#34; The patent that mentions Hologram 146 times could be reviewed  here.", "posttime": "2020-06-06 23:38:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82f9\u679c,app,apple,\u82f9\u679c\u516c\u53f8,replace", "title": "\u6839\u636e\u8fd9\u9879\u4e13\u5229\uff0c\u82f9\u679c\u516c\u53f8\u5c06\u7528\u6c29\u6c14\u62a4\u5957\u4ee3\u66ff\u4f60\u7684\u773c\u955c\u3002", "title_en": "Apple is going to replace your glasses with ar heasets, according to this patent", "transed": 1, "url": "https://www.patentlyapple.com/patently-apple/2020/06/apple-invents-a-vision-correction-system-for-headsets-that-eliminates-the-need-for-a-user-to-wear-prescription-glasses-to-enj.html", "via": "", "real_tags": ["\u82f9\u679c", "app", "apple", "\u82f9\u679c\u516c\u53f8", "replace"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005455, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u5185\u6838\u56fe\u5f62\u4e16\u754c\u4e2d\uff0c\u6709\u4e00\u6761\u7531\u6765\u5df2\u4e45\u7684\u201c\u6c99\u7ebf\u201d\uff0c\u5b83\u4e0d\u5141\u8bb8\u5728\u6ca1\u6709\u76f8\u5e94\u7684\u81ea\u7531\u8f6f\u4ef6\u7528\u6237\u7a7a\u95f4\u9a71\u52a8\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u5408\u5e76\u5185\u6838\u9a71\u52a8\u7a0b\u5e8f\u3002\u5176\u60f3\u6cd5\u662f\uff0c\u65e0\u6cd5\u6d4b\u8bd5\u5168\u90e8\u529f\u80fd\u610f\u5473\u7740\u5185\u6838\u5f00\u53d1\u4eba\u5458\u65e0\u6cd5\u9a8c\u8bc1\u9a71\u52a8\u7a0b\u5e8f\u7684\u6b63\u5e38\u529f\u80fd\u548c\u5b89\u5168\u6027\uff1b\u5bf9\u5185\u6838\u9a71\u52a8\u7a0b\u5e8f\u7684\u66f4\u6539\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7528\u6237\u7a7a\u95f4\u7aef\u51fa\u73b0\u4e0d\u53ef\u9884\u89c1(\u4e14\u65e0\u6cd5\u6d4b\u8bd5)\u7684\u95ee\u9898\u3002\u7136\u800c\uff0c\u6700\u8fd1\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5176\u4ed6\u7c7b\u578b\u7684\u8bbe\u5907\uff0c\u5b83\u4eec\u7684\u9a71\u52a8\u7a0b\u5e8f\u5f88\u590d\u6742\uff0c\u4f46\u6ca1\u6709\u6709\u7528\u7684\u81ea\u7531\u7528\u6237\u7a7a\u95f4\u90e8\u5206\uff0c\u5b83\u4eec\u88ab\u63d0\u8bae\u5305\u542b\u5728\u5185\u6838\u4e2d\uff1b\u81f3\u5c11\u6709\u4e00\u4e2a\u88ab\u5408\u5e76\u4e86\uff0c\u4f46\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6f6e\u6d41\u53ef\u80fd\u5df2\u7ecf\u8f6c\u5411\u4e0d\u5229\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u7684\u9a71\u52a8\u7a0b\u5e8f-\u6216\u8005\u65e0\u8bba\u5982\u4f55\uff0c\u5176\u4e2d\u4e00\u4e9b\u9a71\u52a8\u7a0b\u5e8f\u3002", "note_en": "In the kernel graphics world, there has been a longstanding \"line in the sand\" that disallows mergingkernel drivers without a corresponding free-software user-space driver.  The idea is thatnot having a way to test  the full functionality means that the kerneldevelopers cannot verify the proper functioning and security of thedriver; changes to the kernel driver may lead to unforeseen (anduntestable) problems on the user-space side.   More recently, though, wehave seen other types of devices with complex drivers, but no useful freeuser-space piece, that have been proposed for inclusion into the kernel;at least one was merged, but the tide has perhaps turned against those typesof drivers at this point\u2014or some of them, anyway.", "posttime": "2020-06-06 23:22:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u9a71\u52a8\u7a0b\u5e8f,user", "title": "\u91ca\u653e\u975e\u56fe\u5f62\u9a71\u52a8\u7a0b\u5e8f\u7684\u7528\u6237\u7a7a\u95f4", "title_en": "Free user space for non-graphics drivers", "transed": 1, "url": "https://lwn.net/SubscriberLink/821817/d2e8e5c253b68ce6/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u9a71\u52a8\u7a0b\u5e8f", "user"]}, {"category": "", "categoryclass": "", "imagename": "0bd1a460e003cf14a173203010cbd6f8.jpg", "infoid": 1005454, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u73b0\u5728\u5728\u91d1\u95e8\u5927\u6865\u9644\u8fd1\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u4f60\u53ef\u80fd\u4f1a\u95ee\u81ea\u5df1\uff1a\u90a3\u5230\u5e95\u662f\u4ec0\u4e48\u58f0\u97f3\uff1f\u6df1\u6d77\u751f\u7269\u53d1\u51fa\u53c8\u957f\u53c8\u54cd\u7684\u55e1\u55e1\u58f0\uff1f\u6765\u81ea\u5916\u592a\u7a7a\u7684\u5916\u661f\u9891\u7387\uff1f\u65e7\u91d1\u5c71\u6700\u4f1f\u5927\u7684\u5730\u6807\u53d1\u51fa\u5de8\u5927\u7684\u53f9\u606f\uff0c\u7ec8\u4e8e\u8bb0\u5f55\u4e0b\u5b83\u5bf9\u4e16\u754c\u73b0\u72b6\u7684\u60ca\u6115\uff1f\n\u4e0d--\u4f60\u4ece\u91d1\u95e8\u5927\u6865\u542c\u5230\u7684\u602a\u5f02\u7684\u58f0\u97f3\u5b9e\u9645\u4e0a\u662f\u521a\u521a\u5b89\u88c5\u7684\u65b0\u7684\u4eba\u884c\u9053\u680f\u6746\u7684\u7ed3\u679c\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u6291\u5236\u98ce\u3002\u98ce\u7684\u6709\u8da3\u4e4b\u5904\u5728\u4e8e\uff1a\u5f53\u5b83\u7a7f\u8fc7\u67d0\u4e9b\u7a7a\u5730\u65f6\uff0c\u4f1a\u53d1\u51fa\u55e1\u55e1\u58f0\u3002\u6240\u6709\u7684\u82a6\u82c7\u4eea\u5668\u90fd\u662f\u8fd9\u6837\u5de5\u4f5c\u7684\uff0c\u800c\u4eba\u884c\u9053\u9762\u677f\u7684\u5de5\u7a0b\u5e08\u663e\u7136\u5fd8\u8bb0\u4e86\u8fd9\u4e00\u70b9\u3002\n\u800c\u4e14\uff0c\u56e0\u4e3a\u5b83\u6a2a\u8de8\u6d77\u6e7e\u7684\u4e00\u4e2a\u975e\u5e38\u591a\u98ce\u7684\u7f3a\u53e3\uff0c\u91d1\u95e8\u5927\u6865\u73b0\u5728\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6a59\u8272\u5598\u606f\u7684\u5361\u7956\u5c14\u3002", "note_en": "If you are anywhere in the vicinity of the Golden Gate Bridge right now, you are probably asking yourself: What in the world is that sound? A long, loud hum from a deep sea creature? Alien frequencies from outer space? An enormous sigh from San Francisco&#39;s greatest landmark, finally registering its dismay at the state of the world?\n Nope\u2014the eerie sound you&#39;re hearing from the Golden Gate Bridge is in fact the result of  new sidewalk railing slats, just installed, meant to curb the wind. Funny thing about wind: when it passes through certain open spaces, it creates a hum. This is how all reed instruments work, and it&#39;s something that the engineers of said sidewalk panels  apparently forgot to take into consideration.\n And, because it spans a very windy gap across the Bay, the Golden Gate Bridge is now effectively a giant orange wheezing kazoo.", "posttime": "2020-06-06 23:22:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u5f71,\u73b0\u5728,gate,\u91d1\u95e8\u5927\u6865", "title": "\u201c\u91d1\u95e8\u5927\u6865\u201d\u73b0\u5728\u542c\u8d77\u6765\u50cf\u5927\u536b\u00b7\u6797\u5947\u7684\u7535\u5f71", "title_en": "The Golden Gate Bridge Sounds Like a David Lynch Movie Now", "transed": 1, "url": "https://www.kqed.org/arts/13881451/the-golden-gate-bridge-sounds-like-a-david-lynch-movie-now", "via": "", "real_tags": ["\u7535\u5f71", "\u73b0\u5728", "gate", "\u91d1\u95e8\u5927\u6865"]}, {"category": "", "categoryclass": "", "imagename": "f31fc88ab8832c04b122cbe62adb9f7f.jpg", "infoid": 1005453, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u957f\u671f\u4ee5\u6765\uff0c\u6d77\u6d0b\u4e2d\u90e8\u5947\u7279\u7684\u751f\u6d3b\u4e00\u76f4\u662f\u4e00\u4e2a\u96be\u4ee5\u89c2\u5bdf\u3001\u7814\u7a76\u548c\u6df1\u5165\u7684\u6311\u6218\u3002\u90a3\u4e2a\u9886\u57df\u7684\u751f\u7269\u751f\u6d3b\u5728\u538b\u69a8\u7684\u538b\u529b\u4e0b\uff0c\u5728\u51b0\u51b7\u7684\u6e29\u5ea6\u4e0b\uff0c\u5728\u6f06\u9ed1\u7684\u9ed1\u6697\u4e2d\u3002\u6d41\u4f53\u73af\u5883\u4e0d\u53d7\u91cd\u529b\u548c\u575a\u786c\u8868\u9762\u7684\u7ea6\u675f\uff0c\u56e0\u6b64\u81ea\u7136\u9009\u62e9\u5141\u8bb8\u4e00\u7cfb\u5217\u4e0d\u719f\u6089\u7684\u8eab\u4f53\u90e8\u4f4d\u548c\u5efa\u7b51\u7684\u72c2\u6b22\u3002\u6309\u7167\u4eba\u7c7b\u7684\u6807\u51c6\uff0c\u8fd9\u4e9b\u751f\u7269\u662f\u5916\u661f\u4eba\u3002\n\u73b0\u5728\uff0c\u4e00\u79cd\u65b0\u7684\u6fc0\u5149\u6b63\u5728\u7167\u4eae\u4e00\u4e9b\u6700\u8d85\u51e1\u8131\u4fd7\u7684\u751f\u547d\u5f62\u5f0f\u3002\u6df1\u6d77\u7c7b\u7684\u8f6f\u4f53\u662f\u7531\u7c98\u6db2\u548c\u80f6\u72b6\u7269\u8d28\u7ec4\u6210\u7684-\u6709\u70b9\u50cf\u6c34\u6bcd\uff0c\u53ea\u662f\u6709\u70b9\u5947\u602a\u3002\u5b83\u4eec\u7684\u7279\u70b9\u662f\u534a\u900f\u660e\u90e8\u5206\u548c\u7c98\u6027\u7ed3\u6784\u7684\u8ff7\u5bab\uff0c\u5305\u62ec\u957f\u4e1d\u3001\u7c98\u6db2\u5916\u58f3\u548c\u7528\u4e8e\u6536\u96c6\u98df\u7269\u7684\u7ec6\u7f51\u8fc7\u6ee4\u5668\u3002\u6700\u8fd1\uff0c\u5728\u897f\u6fb3\u5927\u5229\u4e9a\u7684\u6df1\u6d77\uff0c\u79d1\u5b66\u5bb6\u4eec\u62cd\u6444\u5230\u4e86\u4e00\u79cd\u88ab\u79f0\u4e3a\u7ba1\u6c34\u6bcd\u7684\u80f6\u72b6\u751f\u7269\uff0c\u5176\u957f\u5ea6\u4f30\u8ba1\u4e3a150\u82f1\u5c3a-\u8fd9\u53ef\u80fd\u662f\u4e16\u754c\u4e0a\u6700\u957f\u7684\u6d77\u6d0b\u751f\u7269\u6837\u672c\u3002\n6\u67083\u65e5\uff0c\u6765\u81ea\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u8499\u7279\u5229\u6e7e\u6c34\u65cf\u9986\u7814\u7a76\u6240\u548c\u5723\u5730\u4e9a\u54e5\u667a\u5229\u6559\u7687\u5929\u4e3b\u6559\u5927\u5b66\u76847\u540d\u79d1\u5b66\u5bb6\u7ec4\u6210\u7684\u56e2\u961f\u5728\u300a\u81ea\u7136\u300b\u6742\u5fd7\u4e0a\u63cf\u8ff0\u4e86\u4e00\u79cd\u7528\u4e8e\u7814\u7a76\u8fd9\u4e9b\u534a\u900f\u660e\u751f\u7269\u7684\u6210\u50cf\u8bbe\u5907\u3002\u5b83\u53d1\u5c04\u4e00\u79cd\u8584\u8584\u7684\u6fc0\u5149\u98ce\u6247\uff0c\u626b\u63cf\u52a8\u7269\uff0c\u6536\u96c6\u6765\u81ea\u5185\u90e8\u6d41\u52a8\u548c\u7ec4\u7ec7\u7684\u53cd\u5411\u6563\u5c04\u5c04\u7ebf\uff0c\u5e76\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u9001\u5165\u8ba1\u7b97\u673a\uff0c\u8ba1\u7b97\u673a\u5c06\u4ee5\u5fae\u5999\u7684\u7ec6\u8282\u53ef\u89c6\u5316\u5730\u91cd\u5efa\u6d3b\u7740\u7684\u6709\u673a\u4f53\u3002\u8fd9\u79cd\u540d\u4e3aDeepPIV\u6210\u50cf\u7cfb\u7edf\u7684\u8bbe\u5907\uff0c\u5c31\u50cfCT\u626b\u63cf\u5bf9\u4eba\u4f53\u6240\u505a\u7684\u90a3\u6837\uff0c\u53ef\u4ee5\u63ed\u793a\u4eba\u4f53\u7684\u5185\u90e8\u3002\n\u53c2\u4e0e\u8fd9\u9879\u7814\u7a76\u7684MBARI\u6d77\u6d0b\u751f\u7269\u5b66\u5bb6\u5e03\u9c81\u65af\u00b7H\u00b7\u7f57\u5bbe\u900a(Bruce H.Robison)\u5728\u4e00\u6b21\u91c7\u8bbf\u4e2d\u8c08\u5230\u8fd9\u9879\u65b0\u6280\u672f\u65f6\u8bf4\uff0c\u201c\u8fd9\u4ee4\u4eba\u9707\u60ca\u3002\u201d\u201c\u8fd9\u5c06\u4ee5\u4e00\u79cd\u975e\u5e38\u597d\u7684\u65b9\u5f0f\u6253\u5f00\u5c40\u9762\u3002\u201d\n\u8be5\u56e2\u961f\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u6d77\u5cb8\u5916\u7684\u8499\u7279\u5229\u6e7e\u8fdb\u884c\u4e86\u63a2\u7d22\uff0c\u8499\u7279\u5229\u6e7e\u7684\u7279\u70b9\u662f\u6709\u4e00\u4e2a\u5f88\u6df1\u7684\u5ce1\u8c37\u3002\u4e00\u4e2a\u62ff\u7740\u6210\u50cf\u4eea\u7684\u673a\u5668\u4eba\u88ab\u7cfb\u5728\u4e00\u6761\u957f\u7ef3\u4e0a\uff0c\u5bfc\u81f4\u4eba\u4eec\u5728\u957f\u8fbe\u56db\u5206\u4e4b\u4e00\u82f1\u91cc\u7684\u6df1\u5904\u4ed4\u7ec6\u68c0\u67e5\u4e86\u6570\u5341\u79cd\u751f\u7269\u3002\n\u8fd9\u7bc7\u8bba\u6587\u7684\u4e3b\u8981\u4f5c\u8005\u3001\u6d77\u6d0b\u7814\u7a76\u6240\u7684\u5de5\u7a0b\u5e08\u5361\u5361\u5c3c\u00b7\u5361\u8482\u8d3e(Kakani Katija)\u8bf4\uff0c\u8fd9\u9879\u65b0\u6280\u672f\u5c06\u6709\u52a9\u4e8e\u63ed\u793a\u8fd9\u4e9b\u9ecf\u7cca\u7cca\u7684\u52a8\u7269\u662f\u5982\u4f55\u884c\u52a8\u3001\u8fdb\u98df\u3001\u7e41\u6b96\u548c\u4fdd\u62a4\u81ea\u5df1\u7684\u3002\u201c\u73b0\u5728\u6211\u4eec\u6709\u4e86\u53ef\u89c6\u5316\u8fd9\u4e9b\u7ed3\u6784\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u7406\u89e3\u5b83\u4eec\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff0c\u201d\u5979\u8bf4\u3002\n\u5728\u201c\u81ea\u7136\u201d\u6742\u5fd7\u7684\u6587\u7ae0\u4e2d\uff0c\u7814\u7a76\u5c0f\u7ec4\u8bb2\u8ff0\u4e86\u5982\u4f55\u5c06\u8fd9\u4e2a\u65b0\u9896\u7684\u88c5\u7f6e\u5bf9\u51c6\u4e00\u79cd\u88ab\u79f0\u4e3a\u5de8\u578b\u5e7c\u866b\u7684\u6df1\u6d77\u751f\u7269\uff0c\u8fd9\u662f\u4e00\u79cd\u5927\u81ea\u7136\u7684\u5947\u8ff9\uff0c\u53ef\u4ee5\u5206\u6ccc\u51fa\u5bbd\u8fbe3\u82f1\u5c3a\u7684\u6c14\u7403\u72b6\u7c98\u6db2\u5582\u517b\u7ed3\u6784\u3002\u5728\u4e00\u4e2a\u5927\u7684\u7ed3\u6784\u4e2d\uff0c\u6709\u66f4\u5c0f\u7684\u3001\u62f3\u5934\u5927\u5c0f\u7684\u8fc7\u6ee4\u5668\uff0c\u52a8\u7269\u4eec\u7528\u6765\u6536\u96c6\u730e\u7269\u548c\u5fae\u5c0f\u7684\u9897\u7c92\u3002\n\u4f7f\u7528\u8fd9\u9879\u65b0\u6280\u672f\uff0c\u5361\u8482\u8d3e\u535a\u58eb\u548c\u5979\u7684\u5408\u4f5c\u8005\u7b2c\u4e00\u6b21\u80fd\u591f\u7ed8\u5236\u51fa\u8fd9\u79cd\u5e7c\u866b\u5185\u90e8\u8fc7\u6ee4\u5668\u7684\u7ed3\u6784\u56fe\uff0c\u8bc6\u522b\u51fa\u5b83\u7684\u7cbe\u786e\u5f62\u72b6\u548c\u5404\u90e8\u5206\u7684\u786e\u5207\u529f\u80fd\u3002\u6dfb\u52a0\u7684\u8ba1\u7b97\u673a\u529f\u80fd\u4f7f\u56e2\u961f\u6210\u5458\u53ef\u4ee5\u5c06\u53ef\u89c6\u5316\u6548\u679c\u8f6c\u6362\u4e3a\u7535\u5f71\uff0c\u4ece\u800c\u4f7f\u4ed6\u4eec\u80fd\u591f\u6709\u6548\u5730\u98de\u8fc7\u8fc7\u6ee4\u5668\u5e76\u4ed4\u7ec6\u68c0\u67e5\u5176\u6d41\u7a0b\u3002\n\u5361\u8482\u8d3e\u535a\u58eb\u8bf4\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u79d1\u5b66\u5bb6\u6709\u673a\u4f1a\u7814\u7a76\u6df1\u6d77\u751f\u7269\u4e2d\u5982\u6b64\u590d\u6742\u7684\u7ed3\u6784\u3002\u5979\u548c\u5979\u7684\u56e2\u961f\u5728\u4ed6\u4eec\u7684\u8bba\u6587\u4e2d\u5199\u9053\uff0c\u8fd9\u79cd\u53ef\u89c6\u5316\u201c\u53ef\u4ee5\u63ed\u793a\u81ea\u7136\u754c\u4e2d\u4e00\u4e9b\u6700\u590d\u6742\u7684\u5f62\u5f0f\u3002\u201d\n\u8fd9\u7bc7\u8bba\u6587\u7684\u5176\u4ed6\u4f5c\u8005\u662f\u8a79\u5361\u6d1b\u00b7\u7279\u7f57\u5c3c\u3001\u4e54\u65af\u7279\u00b7\u4e39\u5c3c\u5c14\u65af\u3001\u51ef\u5229\u00b7\u5170\u65af\u3001\u7f57\u5e03\u00b7E\u00b7\u590f\u6d1b\u514b\u3001\u963f\u62c9\u5a1c\u00b7D\u00b7\u8c22\u5c14\u66fc\u548c\u7f57\u5bbe\u900a\u535a\u58eb\u3002\u9664\u4e86\u5723\u5730\u4e9a\u54e5\u5929\u4e3b\u6559\u5927\u5b66\u7684\u5de5\u7a0b\u5e08\u7279\u7f57\u5c3c\u535a\u58eb\uff0c\u7814\u7a76\u4eba\u5458\u90fd\u5728\u52a0\u5dde\u6d77\u6d0b\u7814\u7a76\u6240\u5de5\u4f5c\u3002\n\u8fd9\u9879\u65b0\u6280\u672f\u53ef\u80fd--\u81f3\u5c11\u662f\u6f5c\u5728\u7684--\u5bf9\u6d77\u6d0b\u79d1\u5b66\u4ea7\u751f\u5de8\u5927\u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u4e16\u754c\u4e0a\u7684\u6d77\u6d0b\u662f\u5982\u6b64\u5e7f\u9614\uff0c\u800c\u5176\u58a8\u8272\u6df1\u5904\u7684\u5c45\u6c11\u53c8\u662f\u5982\u6b64\u795e\u79d8\u3002\u79d1\u5b66\u5bb6\u4f30\u8ba1\uff0c\u5730\u7403\u4e0a99%\u4ee5\u4e0a\u7684\u751f\u7269\u5708\u5c45\u4f4f\u5728\u6d77\u6d0b\u4e2d\u3002\u6e14\u6c11\u77e5\u9053\u5b83\u7684\u8868\u5c42\u6c34\u57df\uff0c\u4f46\u603b\u7684\u6765\u8bf4\uff0c\u4e0e\u9646\u5730\u76f8\u6bd4\uff0c\u5168\u7403\u6d77\u6d0b\u662f\u672a\u77e5\u7684\u3002\n\u7f57\u5bbe\u900a\u535a\u58eb\u4f30\u8ba1\uff0c\u591a\u8fbe\u4e00\u534a\u7684\u6d77\u6d0b\u751f\u7269\u4ecd\u672a\u88ab\u53d1\u73b0-\u4e3b\u8981\u662f\u4e2d\u6df1\u6d77\u7684\u8d85\u51e1\u8131\u4fd7\u7684\u751f\u7269\u3002\n\u4ed6\u57281994\u5e74\u8bf4\uff1a\u201c\u5982\u679c\u4e00\u4e2a\u5916\u661f\u6587\u660e\u6765\u89c2\u5bdf\u8fd9\u4e2a\u661f\u7403\u4e0a\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u751f\u547d\u5f62\u5f0f\uff0c\u4ed6\u4eec\u5c31\u4f1a\u51fa\u53bb\u89c2\u5bdf\u4e2d\u6c34\u751f\u7269\u3002\u201d\u201c\u5c31\u751f\u7269\u91cf\u3001\u4e2a\u4f53\u6570\u91cf\u3001\u5730\u7406\u8303\u56f4\u800c\u8a00--\u65e0\u8bba\u4f60\u60f3\u600e\u4e48\u5206\u5272--\u8fd9\u4e9b\u90fd\u662f\u5730\u7403\u4e0a\u6700\u5927\u7684\u751f\u6001\u5b9e\u4f53\u3002\u4f46\u6211\u4eec\u5bf9\u4ed6\u4eec\u51e0\u4e4e\u4e00\u65e0\u6240\u77e5\u3002\u201c", "note_en": "The bizarre life of the sea\u2019s middle depths has long been a challenge to see, study and fathom. The creatures of that realm live under crushing pressures at icy temperatures in pitch darkness. The fluid environment is unbound by gravity and hard surfaces, so natural selection allows for a riotous array of unfamiliar body parts and architectures. By human standards, these organisms are aliens.\n Now, a new kind of laser is illuminating some of the most otherworldly life-forms. The soft bodies of the abyssal class are made of mucoid and gelatinous materials \u2014 somewhat like jellyfish, only stranger. They feature mazes of translucent parts and gooey structures, including long filaments, mucus housings and fine-mesh filters for gathering food. Recently, in the depths off Western Australia,  scientists filmed a gelatinous type known as a siphonophore whose length was estimated at 150 feet \u2014 potentially the world\u2019s longest example of oceanic life.\n On June 3 in Nature magazine, a team of seven scientists from the  Monterey Bay Aquarium Research Institute in California and the  Pontifical Catholic University of Chile in Santiago  described an imaging device for studying these translucent creatures. It emits a thin fan of laser light that scans through the animals, gathers backscattered rays from the inner flows and tissues, and feeds those gleanings into a computer that visually reconstructs the living organisms in subtle detail. The device, called the DeepPIV imaging system, reveals the insides much as CT scans do for human bodies.\n  \u201cIt\u2019s staggering,\u201d  Bruce H. Robison, a marine biologist at MBARI who participated in the research, said of the new technique in an interview. \u201cIt\u2019s going to open things up in a really good way.\u201d\n The team conducted its explorations off the California coast in Monterey Bay,  which features a deep canyon. A robot holding the imager was lowered on a long tether, resulting in the scrutiny of scores of creatures at depths of up to a quarter mile.\n Kakani Katija, an engineer at the marine institute and the paper\u2019s lead author, said the new technique would help unveil how the gooey animals do such things as move, feed, procreate and protect themselves. \u201cNow that we have a way to visualize these structures, we can finally understand how they function,\u201d  she said.\n In the Nature article, the team told of directing the novel device at an abyssal creature known as a giant larvacean, a marvel of nature that can secrete balloon-like mucus feeding structures as wide as three feet. Within a large structure are smaller, fist-size filters that the animals use to gather prey and tiny particles.\n  Using the new technique, Dr. Katija and her collaborators were able, for the first time, to map the structure of the larvacean\u2019s inner filter, identifying its precise shape and the exact function of its parts. Added computer power let team members turn the visualization into a movie that enabled them to effectively fly through the filter and scrutinize its flows.\n Until now, no scientist has had the chance to examine such complicated structures in the deep creatures, Dr. Katija said. Such visualizations, she and her team wrote in their paper, \u201ccan shed light on some of nature\u2019s most complex forms.\u201d\n The paper\u2019s other authors are Giancarlo Troni, Joost Daniels, Kelly Lance, Rob E. Sherlock, Alana D. Sherman and Dr. Robison. Except for Dr. Troni, an engineer at the Catholic university in Santiago, the researchers work at the California marine institute.\n The new technique could \u2014 at least potentially \u2014 have an enormous impact on marine science, because the world\u2019s oceans are so vast and the denizens of their inky depths so mysterious. Scientists estimate that more than 99 percent of the planet\u2019s biosphere resides  in the oceans. Fishermen know its surface waters, but in general, compared to land, the global ocean is unknown.\n Dr. Robison has estimated that up to half the creatures of the sea remain undiscovered \u2014 mainly the otherworldly ones of the middle depths.\n \u201cIf an alien civilization came to look at the dominant life form on the planet, they\u2019d be out looking at midwater creatures,\u201d he said in 1994. \u201cIn terms of biomass, numbers of individuals, geographical extent \u2014 any way you want to slice it \u2014 these are the biggest ecological entities on earth. But we know virtually nothing about them.\u201d", "posttime": "2020-06-06 23:21:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee4\u4eba\u9707\u60ca,weirdest,\u6d77\u6d0b", "title": "\u6d77\u6d0b\u4e2d\u6700\u602a\u5f02\u7684\u751f\u7269\uff0c\u73b0\u5728\u6b63\u5904\u4e8e\u201c\u4ee4\u4eba\u9707\u60ca\u7684\u201d\u7ec6\u8282\u4e2d", "title_en": "The Sea\u2019s Weirdest Creatures, Now in \u2018Staggering\u2019 Detail", "transed": 1, "url": "https://www.nytimes.com/2020/06/05/science/ocean-biology-larvaceans-lasers.html", "via": "", "real_tags": ["\u4ee4\u4eba\u9707\u60ca", "weirdest", "\u6d77\u6d0b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005452, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u90fd\u88ab\u7535\u5b50\u90ae\u4ef6\u6df9\u6ca1\u4e86\u3002\u95ee\u9898\u4e0d\u5728\u4e8e\u660e\u76ee\u5f20\u80c6\u7684\u5783\u573e\u90ae\u4ef6--\u8ba2\u9605\u5927\u90e8\u5206\u5783\u573e\u90ae\u4ef6\u5e76\u5c4f\u853d\u5176\u4f59\u5185\u5bb9\u5f88\u5bb9\u6613\u3002\u771f\u6b63\u7684\u6740\u624b\u662f\u4e00\u5c01\u6709\u70b9\u6709\u8da3\u7684\u7535\u5b50\u90ae\u4ef6\uff1a\u5173\u4e8e\u4f60\u5916\u56f4\u53c2\u4e0e\u7684\u9879\u76ee\u7684\u8ba8\u8bba\uff0c\u6bcf\u5468\u7684\u65f6\u4e8b\u901a\u8baf\uff0c\u51e0\u4e2a\u6708\u524d\u4f60\u63d0\u4ea4\u7684\u5173\u4e8eGitHub\u95ee\u9898\u7684\u95f2\u804a\uff0c\u4ee5\u53ca\u6240\u6709\u5176\u4ed6\u4f60\u6709\u65f6\u95f4\u5c31\u7565\u8fc7\u7684\u90ae\u4ef6\uff0c\u5982\u679c\u4f60\u5fd9\u7684\u8bdd\u5c31\u8df3\u8fc7\u3002\u624b\u52a8\u5206\u7c7b\u8fd9\u4e9b\u7535\u5b50\u90ae\u4ef6\u53ef\u80fd\u662f\u4e00\u573a\u4ee4\u4eba\u7cbe\u75b2\u529b\u7aed\u7684\u6253\u5730\u9f20\u6e38\u620f\u3002\u4f46\u5982\u679c\u4f60\u662fGmail\u7528\u6237\uff0c\u8fd8\u662f\u6709\u5e0c\u671b\u7684--\u4f60\u53ef\u4ee5\u4f7f\u7528AppsScript\u5c06\u5927\u90e8\u5206\u5de5\u4f5c\u81ea\u52a8\u5316\u3002\u6700\u68d2\u7684\u662f\uff0c\u5b83\u662f\u514d\u8d39\u7684\uff01\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u5e26\u9886\u60a8\u521b\u5efa\u60a8\u7684\u7b2c\u4e00\u4e2aAppsScript\u9879\u76ee\uff0c\u5e76\u8ba9\u60a8\u4f53\u9a8c\u4e00\u4e0b\u60a8\u53ef\u4ee5\u5b9e\u73b0\u4ec0\u4e48\u3002(\u5411Prashant Varanasi\u81f4\u656c\uff0c\u4ed6\u9996\u5148\u5411\u6211\u4ecb\u7ecd\u4e86AppsScript\u3002)\u3002\u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppsScript\u9879\u76ee\uff0c\u7136\u540e\u6dfb\u52a0\u4e00\u4e2a\u5c0f\u51fd\u6570\u5e76\u4fdd\u5b58\u8be5\u9879\u76ee\u3002\u8fd9\u6bb5\u4ee3\u7801\u8fd8\u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4f46\u662f\u6211\u4eec\u7a0d\u540e\u4f1a\u6dfb\u52a0\u5b83\u3002AppsScript\u5305\u542b\u7c7b\u4f3ccron\u7684\u89e6\u53d1\u5668\u670d\u52a1\uff0c\u4f46\u60a8\u5fc5\u987b\u5c0f\u5fc3\uff1aGoogle\u9650\u5236\u4e86\u811a\u672c\u8fd0\u884c\u7684\u65f6\u95f4\uff0c\u4e5f\u9650\u5236\u4e86\u60a8\u53ef\u4ee5\u6267\u884c\u7684Gmail\u64cd\u4f5c\u7684\u6570\u91cf\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u6bcf15\u5206\u949f\u8fd0\u884c\u4e00\u6b21\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u7ba1\u7406\u811a\u672c\uff0c\u53ef\u4ee5\u8ba9\u6211\u7684\u6536\u4ef6\u7bb1\u4fdd\u6301\u6574\u6d01\uff0c\u800c\u4e0d\u4f1a\u8017\u5c3d\u6211\u7684\u914d\u989d\u3002\u76f4\u63a5\u4ece\u7f16\u8f91\u5668\u4e2d\u4e3aprocessMail\u51fd\u6570\u8bbe\u7f6e\u57fa\u4e8e\u65f6\u95f4\u7684\u89e6\u53d1\u5668\uff0c\u65b9\u6cd5\u662f\u8f6c\u5230\u201c\u7f16\u8f91\u201d\uff0c\u7136\u540e\u8f6c\u5230\u201c\u5f53\u524d\u9879\u76ee\u7684\u89e6\u53d1\u5668\u201d\uff0c\u6700\u540e\u8f6c\u5230\u53f3\u4e0b\u89d2\u7684\u201c\u6dfb\u52a0\u89e6\u53d1\u5668\u201d\u3002\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u81ea\u52a8\u5316\u7684\u6700\u7b80\u5355\u90e8\u5206\u4e00\u6b21\u53ea\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u5de5\u4f5c\uff0c\u4e0d\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u4e0a\u4e0b\u6587\uff1a\u4f8b\u5982\uff0c\u6211\u4f7f\u7528\u4e00\u4e2a\u5c0f\u51fd\u6570\u6765\u786e\u4fdd\u6211\u6240\u6709\u5b58\u6863\u7684\u7535\u5b50\u90ae\u4ef6\u90fd\u6807\u8bb0\u4e3a\u5df2\u8bfb\u3002(\u4ee4\u6211\u56f0\u60d1\u7684\u662f\uff0c\u8fd9\u5e76\u4e0d\u662f\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u56e0\u4e3a\u8fd9\u662f\u8ba9\u5fbd\u7ae0\u5728Gmail\u7684\u79fb\u52a8\u5e94\u7528\u4e2d\u53d1\u6325\u4f5c\u7528\u7684\u552f\u4e00\u65b9\u6cd5\u3002)\u3002\u51fd\u6570processMail(){Const Rules=[markArchivedRead]\uff1bfor(Let Rule Of Rules){Rule()\uff1b}}\u51fd\u6570markArchivedRead(){return eachThread(&#34\uff1bGmail\uff1a\u6807\u8bb0\u5df2\u8bfb\u53d6\u7684\u5b58\u6863\u7ebf\u7a0b&#34\uff1b\uff0c&#34\uff1b-in\uff1a\u6536\u4ef6\u7bb1\u4e3a\uff1a\u672a\u8bfb&#34\uff1b\uff0c\u51fd\u6570(\u7ebf\u7a0b){thread.markRead()\uff1b})\uff1b}\u51fd\u6570eachThread(operation\uff0cquery\uff0cf){const thread=GInbox is\uff1aunread&#34\uff1b\uff0cfunction(Thread){thread.markRead()\uff1b}\u3002=0){Logger.log(&#34\uff1b%s\uff1a\u6ca1\u6709\u4e0e\u67e5\u8be2%s&#34\uff1b\uff0coperation\uff0cquery)\u5339\u914d\u7684\u7ebf\u7a0b\uff1breturn\uff1b}const n=threads.length\uff1bLogger.log(&#34\uff1b%s\uff1a\u627e\u5230\u4e0e\u67e5\u8be2%s&#34\uff1b\uff0coperation\uff0cn\uff0cquery)\u5339\u914d\u7684%s\u4e2a\u7ebf\u7a0b\uff1b\u5bf9\u4e8e(\u8ba9\u7ebf\u7a0b\u7ebf\u7a0b){f(\u7ebf\u7a0b)\uff1b}Logger.log(&#34\uff1b%s\uff1a\u5df2\u5904\u7406%s\u4e2a\u7ebf\u7a0b\uff0c\u5b8c\u6210\uff01&#34\uff1b\uff0cn\uff0coperation)\uff1b}\u3002\n\u6211\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u67095-10\u4e2a\u8fd9\u6837\u7684\u5c0f\u4efb\u52a1\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5e2e\u52a9\u5668\u90fd\u4f1a\u8ba9\u5b83\u4eec\u4fdd\u6301\u7b80\u6d01\u3002\u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2aThread\u5c06\u81ea\u5df1\u9650\u5236\u4e3a\u6bcf\u6b21\u8c03\u7528\u6700\u591a\u5904\u7406100\u4e2a\u7ebf\u7a0b\uff0c\u4ee5\u4fdd\u6301\u8f83\u77ed\u7684\u6267\u884c\u65f6\u95f4\uff0c\u5e76\u9650\u5236\u6d88\u8017\u7684Gmail\u64cd\u4f5c\u7684\u6570\u91cf\u3002\u6211\u4f7f\u7528\u7c7b\u4f3c\u7684\u6bcf\u7ebf\u7a0b\u51fd\u6570\u6765\u5b8c\u6210\u5404\u79cd\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5176\u4e2d\u5927\u591a\u6570\u4efb\u52a1\u90fd\u662f\u5728\u6211\u5f00\u59cb\u843d\u540e\u65f6\u6574\u7406\u6211\u7684\u5b58\u6863\u90ae\u4ef6\u6216\u6e05\u7406\u6211\u7684\u6536\u4ef6\u7bb1\uff0c\u4f8b\u5982\uff1a\u53d6\u6d88\u5b58\u6863\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u3002\u6211\u4f7f\u7528\u661f\u53f7\u6765\u4fdd\u62a4\u6536\u4ef6\u7bb1\u7ebf\u7a0b\uff0c\u4f7f\u5176\u4e0d\u4f1a\u8fdb\u4e00\u6b65\u81ea\u52a8\u5316\uff1b\u5bf9\u4e8e\u53c2\u8003\u6750\u6599\uff0c\u6211\u4f7f\u7528\u6807\u7b7e\u3002\u8ffd\u6eaf\u6027\u5730\u5c06\u6807\u7b7e\u5e94\u7528\u5230\u6211\u7684\u5b58\u6863\u4e2d\uff0c\u56e0\u4e3aGmail UI\u5728\u4fee\u6539\u8d85\u8fc7\u51e0\u5343\u4e2a\u7ebf\u7a0b\u65f6\u6302\u8d77\u3002\u5c06\u4fc3\u9500\u6d3b\u52a8\u5b58\u6863(\u4f7f\u7528\u8c37\u6b4c\u7684\u81ea\u52a8\u5206\u7c7b)\u8d85\u8fc7\u4e09\u5929\uff0c\u9664\u975e\u5b83\u4eec\u662f\u660e\u661f\u3002\u5728\u5f52\u6863\u4e00\u5e74\u540e\u5220\u9664\u5927\u91cf\u901a\u77e5\u3002\u6765\u81eaSentry\u7b49\u5f02\u5e38\u8ddf\u8e2a\u7cfb\u7edf\u7684\u7535\u5b50\u90ae\u4ef6\u662f\u57fa\u4e8e\u65f6\u95f4\u5220\u9664\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5019\u9009\u8005\uff1a\u5f53\u5b83\u662f\u6700\u65b0\u7684\u65f6\u5019\uff0c\u5b83\u662f\u6709\u4ef7\u503c\u7684\u4fe1\u606f\uff0c\u4f46\u4e0d\u503c\u5f97\u6c38\u8fdc\u4fdd\u7559\u51e0\u5341\u4ebf\u5b57\u8282\u3002\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u81ea\u52a8\u5f52\u6863\u4e86\u6709\u5f88\u591a\u53c2\u4e0e\u8005\u7684\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u7ebf\u7a0b\uff0c\u6ca1\u6709\u6765\u81ea\u6211\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u4e5f\u6ca1\u6709\u63d0\u5230\u6211\u8d1f\u8d23\u7684\u56e2\u961f\u6216\u9879\u76ee\u3002\u8fd9\u9700\u8981\u5927\u91cf\u7684\u7ef4\u62a4\u5de5\u4f5c\uff0c\u800c\u4e14\u6709\u76f8\u5f53\u591a\u7684\u6b63\u9762\u5f71\u54cd\uff0c\u4f46\u5f53\u6211\u5728\u4e00\u4e9b\u6781\u7aef\u5b98\u50da\u7684\u5de5\u7a0b\u59d4\u5458\u4f1a\u4efb\u804c\u65f6\uff0c\u6211\u7684\u5934\u8111\u4ecd\u7136\u4fdd\u6301\u6e05\u9192\u3002\n\u5c3d\u7ba1\u6211\u7684\u521d\u8877\u662f\u597d\u7684\uff0c\u4f46\u65f6\u4e8b\u901a\u8baf\u548c\u5176\u4ed6\u4e0d\u5fc5\u8981\u7684\u5e16\u5b50\u7ecf\u5e38\u5806\u79ef\u5728\u6211\u7684\u6536\u4ef6\u7bb1\u91cc\u3002\u624b\u5de5\u6e05\u7406\u8fd9\u4e9b\u79ef\u538b\u7684\u4e1c\u897f\u662f\u5f88\u75db\u82e6\u7684\uff0c\u56e0\u4e3a\u6211\u5b9e\u9645\u4e0a\u60f3\u8bfb\u5176\u4e2d\u7684\u5927\u90e8\u5206\uff1a\u6211\u6700\u7ec8\u4f1a\u82e6\u607c\u4e8e\u662f\u5426\u8fd8\u6709\u65f6\u95f4\u518d\u8bfb\u4e00\u7bc7\u6709\u8da3\u7684\u6587\u7ae0\u6216\u5e16\u5b50\uff0c\u6253\u5f00\u4e00\u767e\u4e07\u4e2a\u6d4f\u89c8\u5668\u6807\u7b7e\uff0c\u71c3\u70e7\u51e0\u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\uff0c\u6700\u597d\u5728\u5176\u4ed6\u5730\u65b9\u5ea6\u8fc7\u3002\u76f8\u53cd\uff0c\u6211\u4f7f\u7528\u8fc7\u6ee4\u5668\u5728\u90ae\u4ef6\u5230\u8fbe\u65f6\u6807\u8bb0\u6709\u8da3\u4f46\u53ef\u9009\u7684\u90ae\u4ef6\u3002(\u6211\u6709\u5f88\u591a\u8fc7\u6ee4\u5668\uff0c\u6211\u6700\u8fd1\u5f00\u59cb\u4f7f\u7528gmailctl\u7ba1\u7406\u8fd9\u4e9b\u8fc7\u6ee4\u5668\u3002)\u3002\u5982\u679c\u6211\u7684\u6536\u4ef6\u7bb1\u91cc\u5806\u79ef\u4e86\u8d85\u8fc7100\u5c01\u8fd9\u6837\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4f1a\u5c06\u8f83\u65e7\u7684\u90ae\u4ef6\u5b58\u6863\uff0c\u76f4\u5230\u53ea\u5269\u4e0b50\u5c01\u3002\u6211\u8fd8\u7ed9\u81ea\u52a8\u5b58\u6863\u7684\u90ae\u4ef6\u52a0\u4e86\u6807\u7b7e\uff0c\u6240\u4ee5\u5982\u679c\u5b83\u4eec\u7a0d\u540e\u51fa\u73b0\u5728\u641c\u7d22\u4e2d\uff0c\u6211\u77e5\u9053\u6211\u8fd8\u6ca1\u6709\u8bfb\u8fc7\u5b83\u4eec\u3002\u51fd\u6570limitInbox(){const max=100\uff1bconst op=&#34\uff1bgmail\uff1aLimit\u6536\u4ef6\u7bb1&#34\uff1b\uff1bconst\u6e05\u9664=GmailApp.getUserLabelByName(&#34\uff1boptional/purged&#34\uff1b)\uff1b\u5e38\u91cf\u7ebf\u7a0b=GmailApp.search(&#34\uff1bin\uff1a\u6536\u4ef6\u7bb1\u6807\u7b7e\uff1a\u53ef\u9009&#34\uff1b)\uff1bLogger.log(&#34\uff1b%s\uff1a%s\u53ef\u9009\u7ebf\u7a0b&#34\uff1b\uff0cop\uff0cthreads.length)\uff1bIF(threads.length&lt\uff1b=max){Logger.log(&#34\uff1b%s\u3002\u8fd4\u56de\uff1b}\u8ba9n=0\uff1bfor(\u8ba9", "note_en": "We\u2019re all drowning in email. The problem isn\u2019t the blatant spam\u2014it\u2019s easy tounsubscribe from most of that and block the rest. The real killer is the emailthat\u2019s  sort of interesting: discussion on projects you\u2019re peripherallyinvolved in, weekly newsletters, chatter on GitHub issues you filed months ago,and all the other mail you skim when you have the time and skip if you\u2019re busy. Triaging these emails manually can be an exhausting game of whack-a-mole. Butif you\u2019re a Gmail user, there\u2019s hope\u2014you can use AppsScript to automate big parts of thejob. Best of all, it\u2019s free! In this post, I\u2019ll walk you through creating yourfirst AppsScript project and give you a taste of what you can accomplish. (Hattip to  Prashant Varanasi, who first introducedme to AppsScript.)  Create a new AppsScript project, thenadd a small function and save the project. This code doesn\u2019t do anything yet,but we\u2019ll add to it later on.  AppsScript includes a cron-like triggers service, but you have to be careful:Google limits theamount of time your script spends running, and it also limits the number ofGmail operations you can perform. For me, running my email management scriptevery 15 minutes keeps my inbox nicely groomed without blowing through myquotas. Set up a time-based trigger for the  processMail function right fromthe editor by going to \u201cEdit,\u201d then \u201cCurrent project\u2019s triggers,\u201d and finally\u201cAdd Trigger\u201d in the bottom right.  The simplest bits of my email automation work on one thread at a time, with nofurther context required: for example, I use a small function to make sure thatall my archived email is marked read. (It\u2019s puzzling to me that this isn\u2019t thedefault, since it\u2019s the only way to make the badge count on Gmail\u2019s mobile appsuseful.) function processMail() { const rules = [ markArchivedRead ]; for (let rule of rules) { rule(); }}function markArchivedRead() { return eachThread(&#34;gmail: mark archived threads read&#34;, &#34;-in:inbox is:unread&#34;, function(thread) { thread.markRead(); });}function eachThread(operation, query, f) { const threads = GmailApp.search(query).slice(0, 100); if (threads.length &lt;= 0) { Logger.log(&#34;%s: no threads matching query %s&#34;, operation, query); return; } const n = threads.length; Logger.log(&#34;%s: found %s threads matching query %s&#34;, operation, n, query); for (let thread of threads) { f(thread); } Logger.log(&#34;%s: processed %s threads, done!&#34;, n, operation);}\n I have 5\u201310 small tasks like this active most of the time, and the  eachThreadhelper keeps each of them nice and short. Note that  eachThread limits itselfto processing 100 threads per invocation, keeping execution time short andcapping the number of Gmail operations consumed. I use similar per-thread functions for a variety of simple tasks, most of whicheither groom my archived mail or trim my inbox when I start falling behind.Examples include: Un-starring everything in my archive. I use stars to protect inbox threadsfrom further automation; for reference material, I use a label. Retroactively applying labels to my archive, since the Gmail UI hangs whentrying to modify more than a few thousand threads. Archiving promotions (using Google\u2019s automatic categorization) more thanthree days old, unless they\u2019re starred. Deleting high-volume notifications after they\u2019ve been archived for a year.Email from exception-tracking systems like Sentry is a good candidate fortime-based deletion: it\u2019s valuable information when it\u2019s fresh, but it\u2019s notworth keeping gigabytes of it around forever. For a while, I automatically archived long-running threads with lots ofparticipants, no emails from me, and no mention of teams or projects I wasresponsible for. This took a lot of maintenance and had a fair number offalse positives, but kept my sanity intact while I sat on some  extremelybureaucratic engineering committees.\n  Despite my best intentions, newsletters and other non-essential threads oftenaccumulate in my inbox. It\u2019s painful to clear this backlog out by hand, becauseI actually want to read most of it: I end up agonizing over whether I\u2019ve gottime to read  just one more interesting article or thread, opening a millionbrowser tabs, and burning hours of time better spent elsewhere. Instead, I use filters to label interesting-but-optional mail as it arrives. (Ihave a  lot of filters, which I recently started managing with  gmailctl.) If more than a hundred ofthese emails pile up in my inbox, I archive the older messages until only 50remain. I also tag the auto-archived messages, so I know that I haven\u2019t readthem if they show up in search later on. function limitInbox() { const max = 100; const op = &#34;gmail: limit inbox&#34;; const purged = GmailApp.getUserLabelByName(&#34;optional/purged&#34;); const threads = GmailApp.search(&#34;in:inbox label:optional&#34;); Logger.log(&#34;%s: %s optional threads&#34;, op, threads.length); if (threads.length &lt;= max) { Logger.log(&#34;%s: done!&#34;, op); return; } let n = 0; for (let thread of threads.slice(Math.floor(max/2))) { if (!thread.hasStarredMessages()) { thread.addLabel(purged); thread.moveToArchive(); n++; } } if (!onVacation()) { pushSMS(`auto-archived ${n} non-essential emails!`); } Logger.log(&#34;%s: archived %s threads, done!&#34;, n);}function onVacation() { const email = Session.getEffectiveUser().getEmail(); const cal = CalendarApp.getCalendarById(email); for (let event of cal.getEventsForDay(new Date())) { let t = event.getTitle(); if (t.includes(&#34;OOO&#34;) || t.includes(&#34;PTO&#34;) || t.includes(&#34;Vacation&#34;) || t.includes(&#34;vacation&#34;)) { return true; } } return false;}function pushSMS(msg) { // T-Mobile, Sprint, Verizon, and AT&amp;T all support email-to-SMS GmailApp.sendEmail(&#39;1234567890@vtext.com&#39;, &#39;AppsScript&#39;, msg);}\n With this de-bulking script active, going on vacation or getting busy for aweek doesn\u2019t leave me with an hour-long inbox cleanup chore. It\u2019s surprisinglyliberating. I use the  onVacation and  pushSMS functions regularly: the first lets metoggle vacation-only behavior with minimal effort, and the second notifies meif my scripts are running amok.  The most complex portions of my AppsScript project selectively archivenotifications. Code review systems like Phabricator and GitHub, exceptiontrackers like Sentry, and many RSS-like subscriptions send tons ofnotifications. Often, I\u2019m only interested in the oldest or newest unreadnotification for each item. For example, I love reading trashy, RPG-inspired web novels on  RoyalRoad. They send me an email each time a newchapter gets published in a book I\u2019m following, but I only catch up on mytrashy reading a few times a week. Rather than letting all the notificationssit in my inbox, I\u2019d rather keep only the oldest email for each book. function queueLitRPG() { const op = &#34;gmail: queue litRPG&#34;; const threads = GmailApp.search(&#39;in:inbox from:royalroad.com subject:&#34;New Chapter of&#34;&#39;); let unread = {}; for (let thread of threads) { const book = thread.getFirstMessageSubject().replace(/New Chapter of/, &#39;&#39;).trim(); const chapter = { date: thread.getLastMessageDate(), thread: thread }; if (unread[book] == undefined) { unread[book] = [chapter]; } else { unread[book].push(chapter); } } for (const [book, chapters] of Object.entries(unread)) { // sort most recent first const sorted = chapters.slice().sort((a, b) =&gt; b.date - a.date); // keep the oldest, since that&#39;s where I left off reading for (let chapter of sorted.slice(0, -1)) { chapter.thread.moveToArchive(); } Logger.log(&#34;%s: done with %s&#34;, op, book); }}\n I use a similar approach to: Keep only the latest Sentry notification for each exception. Keep only the latest GitHub and Phabricator notifications that new commitshave been pushed to a pull request that I\u2019m reviewing. Archive Phabricator diff notifications (like GitHub pull requests) sent to agroup if someone else has already started a review. Phab makes this very easyby  stamping lots ofinformationinto email headers. I wish GitHub supported something similar.\n  I haven\u2019t worked much with the calendar support in AppsScript yet, but there\u2019sso much low-hanging fruit. I\u2019d love to try: Declining meetings if they don\u2019t leave me time to eat. Scheduling travel time around meetings when necessary. Emailing me a weekly summary of where my time went and who I met with.", "posttime": "2020-06-06 23:04:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,appsscript,gmail,\u7ebf\u7a0b", "title": "\u4f7f\u7528AppsScript\u5b9e\u73b0Gmail\u81ea\u52a8\u5316", "title_en": "Automating Gmail with AppsScript", "transed": 1, "url": "https://akshayshah.org/automating-gmail-with-appsscript/", "via": "", "real_tags": ["app", "gmail", "\u7ebf\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005451, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "XS\u662f\u4e00\u79cd\u53d7kdb+/q\u542f\u53d1\u5e76\u53d1\u5e03\u5230\u516c\u5171\u9886\u57df\u7684\u52a8\u6001\u7c7b\u578b\u3001\u52a8\u6001\u4f5c\u7528\u57df\u7684\u4e32\u8054\u9635\u5217\u8bed\u8a00\u3002\u89e3\u91ca\u5668\u548c\u5185\u7f6e\u51fd\u6570\u662f\u7528OCaml\u7f16\u5199\u7684\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u6d4f\u89c8GitHub\u4e0a\u7684\u8d44\u6e90\u3001\u6253\u5f00\u95ee\u9898\u6216\u62c9\u56de\u8bf7\u6c42\uff0c\u8bf7\u67e5\u770bGitHub\u4e0a\u7684\u9879\u76ee\u9875\u9762\u3002XS\u7684\u76ee\u6807\u662f\u6210\u4e3a\u4e00\u79cd\u5173\u6ce8\u7d27\u51d1\u6027\u548c\u8868\u73b0\u529b\u7684\u5c0f\u578b\u8bed\u8a00\u3002\u6216\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3meatsturm@cryptm.org", "note_en": "xs is a dynamically typed, dynamically scoped, concatenative arraylanguage inspired by kdb+/q and released into the public domain. Theinterpreter and builtin functions are written in OCaml.\n   Check out the  project page on github if you wish to browse thesource, open an issue or pull request.  xs aims to be a smalllanguage with a focus on compactness and expressiveness. Or email meat  sturm @cryptm .org", "posttime": "2020-06-06 23:04:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "kdb,public,\u52a8\u6001", "title": "XS\uff1a\u4e00\u79cd\u53d7kdb+\u548cforth\u542f\u53d1\u7684\u516c\u5171\u57df\u7ea7\u8054\u6570\u7ec4\u8bed\u8a00", "title_en": "xs: a public-domain concatenative array language inspired by kdb+ and FORTH", "transed": 1, "url": "https://cryptm.org/xs/", "via": "", "real_tags": ["kdb", "public", "\u52a8\u6001"]}, {"category": "", "categoryclass": "", "imagename": "f0c761be94894f8726b9c597ed78d6a6.png", "infoid": 1005450, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Elena\u662f\u4e00\u79cd\u5177\u6709\u540e\u671f\u7ed1\u5b9a\u7684\u901a\u7528\u8bed\u8a00\u3002\u5b83\u662f\u591a\u8303\u4f8b\u7684\uff0c\u7ed3\u5408\u4e86\u51fd\u6570\u5f0f\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u7279\u70b9\u3002\u5b83\u540c\u65f6\u652f\u6301\u5f3a\u7c7b\u578b\u548c\u5f31\u7c7b\u578b\u3001\u8fd0\u884c\u65f6\u8f6c\u6362\u3001\u88c5\u7bb1\u548c\u53d6\u6d88\u88c5\u7bb1\u57fa\u5143\u7c7b\u578b\u3001\u76f4\u63a5\u4f7f\u7528\u5916\u90e8\u5e93\u3002\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e30\u5bcc\u7684\u5de5\u5177\u6765\u5904\u7406\u6d88\u606f\u5206\u6d3e\uff1a\u591a\u65b9\u6cd5\u3001\u6d88\u606f\u9650\u5b9a\u3001\u901a\u7528\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u3002\n\u5f00\u53d1\u548c\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\u56e0\u6b64\uff0c\u9047\u5230\u4e00\u79cd\u65b0\u8bed\u8a00\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u95ee\uff1a\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u53e6\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff1f\u7b80\u77ed\u7684\u7b54\u6848\u662f\u5c1d\u8bd5\u4e00\u4e0b\u4e0d\u540c\u7684\u65b9\u5f0f\u3002\u4e3a\u4ec0\u4e48\u4e0d\u628a\u6d88\u606f\u5f53\u4f5c\u53ef\u4ee5\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c\u7684\u666e\u901a\u8bed\u8a00\u5143\u7d20\u6765\u5904\u7406\uff1a\u52a0\u8f7d\u3001\u4f20\u9012\u3001\u4fee\u6539\u3001\u5206\u6d3e\uff1f\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u53cd\u5c04\u7684\u60c5\u51b5\u4e0b\u505a\u5230\u8fd9\u4e00\u70b9\u5417\uff1f\u8fd9\u5c31\u662f\u6211\u7684\u52a8\u673a\u3002Elena\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u65b9\u4fbf\u7f16\u5199\u52a8\u6001\u3001\u591a\u6001\u7684\u4ee3\u7801\uff0c\u5c06\u52a8\u6001\u548c\u9759\u6001\u8bed\u8a00\u7684\u5143\u7d20\u7ed3\u5408\u8d77\u6765\u3002\nElena\u662f\u4e00\u79cd\u5177\u6709\u540e\u671f\u7ed1\u5b9a\u7684\u901a\u7528\u8bed\u8a00\u3002\u5b83\u662f\u591a\u8303\u4f8b\u7684\uff0c\u7ed3\u5408\u4e86\u51fd\u6570\u5f0f\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u7279\u70b9\u3002\u5b83\u540c\u65f6\u652f\u6301\u5f3a\u7c7b\u578b\u548c\u5f31\u7c7b\u578b\u3001\u8fd0\u884c\u65f6\u8f6c\u6362\u3001\u88c5\u7bb1\u548c\u53d6\u6d88\u88c5\u7bb1\u57fa\u5143\u7c7b\u578b\u3001\u76f4\u63a5\u4f7f\u7528\u5916\u90e8\u5e93\u3002\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e30\u5bcc\u7684\u5de5\u5177\u6765\u5904\u7406\u6d88\u606f\u5206\u6d3e\uff1a\u591a\u65b9\u6cd5\u3001\u6d88\u606f\u9650\u5b9a\u3001\u901a\u7528\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u3002\u591a\u91cd\u7ee7\u627f\u53ef\u4ee5\u4f7f\u7528\u6df7\u5408\u548c\u7c7b\u578b\u63a5\u53e3\u6765\u6a21\u62df\u3002\u5185\u7f6e\u811a\u672c\u5f15\u64ce\u5141\u8bb8\u5c06\u81ea\u5b9a\u4e49\u811a\u672c\u5408\u5e76\u5230\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u540c\u65f6\u652f\u6301\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u548c\u865a\u62df\u673a\u5ba2\u6237\u7aef\u3002\nElena\u7f16\u8bd1\u5668\u662f\u7528C++\u5b8c\u5168\u5b9e\u73b0\u7684\u3002\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u5916\u90e8\u4f9d\u8d56\u9879\uff0c\u5982Flex\u3001Bison.\u3002\u60a8\u53ea\u9700\u8981Visual Studio 2017\u7248\u6216\u66f4\u9ad8\u7248\u672c\u3002\n\u8981\u6784\u5efa\u7f16\u8bd1\u5668\uff0c\u60a8\u53ef\u4ee5\u6253\u5f00CMD\uff0c\u8f6c\u5230\u6839Elena\u6587\u4ef6\u5939\u5e76\u952e\u5165\uff1a\n\u5728\u5f00\u59cb100%\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684\u7a0b\u5e8f\u4e4b\u524d\uff0c\u4e86\u89e3\u771f\u6b63\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684\u57fa\u672c\u6982\u5ff5\u662f\u6781\u5176\u91cd\u8981\u7684\u3002\n\u5728OOP\u4e2d\uff0c\u7c7b\u5b9a\u4e49\u4e86\u6b64\u7c7b\u578b\u7684\u6240\u6709\u5bf9\u8c61\u901a\u7528\u7684\u4e00\u7ec4\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5b83\u53ef\u80fd\u5305\u542b\u7528\u4e8e\u521b\u5efa\u5176\u5b9e\u4f8b\u7684\u7279\u6b8a\u65b9\u6cd5\uff0c\u79f0\u4e3a-\u6784\u9020\u51fd\u6570\u3002\n\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002\u901a\u5e38\uff0c\u5bf9\u8c61\u5b58\u50a8\u5728\u52a8\u6001\u5185\u5b58\u4e2d\u3002\u5bf9\u8c61\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5-Singleton\uff0c\u5b83\u53ea\u4f5c\u4e3a\u5355\u4e2a\u5b9e\u4f8b\u5b58\u5728\u3002\u8bf7\u6ce8\u610f\uff0c\u5728Elena\u4e2d\uff0c\u7c7b\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u50cf\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u4f7f\u7528\u5b83\u3002\n\u5b57\u6bb5\uff0c\u4e5f\u79f0\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u662f\u5728\u7c7b\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u3002\u53ea\u6709\u4f7f\u7528\u8d4b\u503c\u6216\u8bfb\u53d6\u5b57\u6bb5\u5185\u5bb9\u7684\u65b9\u6cd5\u624d\u80fd\u8bfb\u53d6\u8fd9\u4e9b\u53d8\u91cf\u3002\u8fd8\u652f\u6301\u9759\u6001\u5b57\u6bb5\u3002\n\u5728C++\u4e2d\uff0c\u6211\u4eec\u8c08\u8bba\u7684\u662f\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u800c\u5728C#\u4e2d\uff0c\u6211\u4eec\u8c08\u8bba\u7684\u662f\u6307\u5411\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u8fd9\u4e24\u4e2a\u6982\u5ff5\u57fa\u672c\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u5f15\u7528\u662f\u7531\u76f4\u63a5\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u800c\u76f4\u63a5\u6307\u9488\u53ea\u662f\u5185\u5b58\u5730\u5740\u3002\u5728Elena\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5f15\u7528\u3002\n\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u51fd\u6570\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u5e94\u7528\u4e8e\u7279\u5b9a\u5bf9\u8c61\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bf4\uff0c\u8be5\u65b9\u6cd5\u662f\u5728\u5bf9\u8c61\u4e0a\u8c03\u7528\u7684\uff0c\u6216\u8005\u662f\u53d1\u9001\u7ed9&#34\uff1b\u5bf9\u8c61\u7684\u3002\u6240\u8ba8\u8bba\u7684\u5bf9\u8c61\u88ab\u79f0\u4e3a\u63a5\u6536\u8005\u3002\u5728\u63a5\u6536\u5bf9\u8c61\u4e0a\u8c03\u7528\u6bcf\u4e2a\u65b9\u6cd5\u3002\u5728C++\u6216C#\u4e2d\uff0c\u63a5\u6536\u5668\u5728Elena-&#34\uff1bself&#34\uff1b\u4e2d\u79f0\u4e3a&#34\uff1bthis&#34\uff1b\u3002\nElena\u4e2d\u7684\u65b9\u6cd5\u7c7b\u4f3c\u4e8eC#\u548cC++\u4e2d\u7684\u65b9\u6cd5\uff0c\u5728C#\u548cC++\u4e2d\uff0c\u5b83\u4eec\u88ab\u8c03\u7528&#34\uff1b\u6210\u5458\u51fd\u6570&#34\uff1b\u3002\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\u5e76\u59cb\u7ec8\u8fd4\u56de\u7ed3\u679c(\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u7ed3\u679c\uff0c\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528)\u3002\u65b9\u6cd5\u4f53\u662f\u4e00\u7cfb\u5217\u53ef\u6267\u884c\u8bed\u53e5\u3002\u65b9\u6cd5\u4ece\u8868\u8fbe\u5f0f\u4e2d\u8c03\u7528\uff0c\u5c31\u50cf\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e00\u6837\u3002\n&#34\uff1b\u65b9\u6cd5&34\uff1b\u548c&#34\uff1b\u6d88\u606f&#34\uff1b\u4e4b\u95f4\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u533a\u522b\u3002\u65b9\u6cd5\u662f\u4ee3\u7801\u4f53\uff0c\u800c\u6d88\u606f\u662f\u53d1\u9001\u7684\u5185\u5bb9\u3002\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u51fd\u6570\u3002\u5728\u6b64\u7c7b\u6bd4\u4e2d\uff0c\u53d1\u9001\u6d88\u606f\u7c7b\u4f3c\u4e8e\u8c03\u7528\u51fd\u6570\u3002\u8c03\u7528\u65b9\u6cd5\u7684\u8868\u8fbe\u5f0f\u79f0\u4e3a\u6d88\u606f\u53d1\u9001\u8868\u8fbe\u5f0f\u3002\nElena\u672f\u8bed\u660e\u786e\u533a\u5206\u4e86&#34\uff1b\u6d88\u606f&#34\uff1b\u548c&#34\uff1b\u65b9\u6cd5&#34\uff1b\u3002\u6d88\u606f\u53d1\u9001\u8868\u8fbe\u5f0f\u5c06\u5411\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u3002\u5bf9\u8c61\u5982\u4f55\u54cd\u5e94\u6d88\u606f\u53d6\u51b3\u4e8e\u5bf9\u8c61\u7684\u7c7b\u3002\u4e0d\u540c\u7c7b\u7684\u5bf9\u8c61\u5c06\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u54cd\u5e94\u540c\u4e00\u6d88\u606f\uff0c\u56e0\u4e3a\u5b83\u4eec\u5c06\u8c03\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u6cdb\u578b\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u5177\u6709\u6307\u5b9a\u7b7e\u540d(\u53c2\u6570\u7c7b\u578b)\u7684\u4efb\u4f55\u6d88\u606f\u3002\n\u5f53\u6211\u4eec\u5b66\u4e60\u6216\u4ec5\u4ec5\u662f\u4e86\u89e3\u4efb\u4f55\u4e00\u79cd\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\u65f6\uff0c\u4e00\u4e2a\u5f88\u597d\u7684\u5f00\u59cb\u603b\u662f\u8457\u540d\u7684\u7a0b\u5e8fHello world\uff01&#34\uff1b\u3002\n\u4e3a\u4e86\u521b\u5efa\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6211\u4eec\u5fc5\u987b\u83b7\u5f97Elena\u7f16\u8bd1\u5668\uff0c\u4e3a\u6b64\uff0c\u60a8\u53ea\u9700\u5728\u6b64\u94fe\u63a5\u4e2d\u4e0b\u8f7d\u7f16\u8bd1\u5668\u3002\n\u7531\u4e8ebin\u6587\u4ef6\u5939\u4f4d\u4e8ePATH\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u5bf9\u4e8e\u80fd\u591f\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u8bbf\u95ee\u6240\u4f7f\u7528\u7684Elena\u8fd0\u884c\u65f6\u662f\u5fc5\u8981\u7684\uff0c\u4f8b\u5982\uff0c\u5f53\u5f02\u5e38\u629b\u51fa\u4ee5\u663e\u793a\u5f02\u5e38\u53d1\u751f\u5728\u54ea\u4e2a\u7c7b&amp\uff1b\u65b9\u6cd5\u4e2d\u65f6\u3002\n\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff0c\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u6253\u5f00Elena IDE\uff0c\u4e3a\u6b64\uff0c\u60a8\u53ef\u4ee5\u952e\u5165cmd&34\uff1belide&34\uff1b\u6216\u8005\uff0c\u53ea\u9700\u6253\u5f00\u540d\u4e3a#34\uff1belide&34\uff1b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\n\u6253\u5f00elide IDE\u540e\uff0c\u6211\u4eec\u5c06\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee\uff0c\u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8fdb\u5165\u83dc\u5355&#34\uff1bFile-&gt\uff1bNew-&gt\uff1bProject&#34\uff1b\uff0c\u5f53\u60a8\u5728\u9879\u76ee\u83dc\u5355\u4e2d\u5355\u51fb\u65f6\uff0c\u4f1a\u6253\u5f00\u5982\u4e0b\u5bf9\u8bdd\u6846\uff1a\n\u7c7b\u578b\uff1a\u662f\u60a8\u5c06\u521b\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7c7b\u578b\uff0c\u5982GUI\u3001\u63a7\u5236\u53f0\u3001\u5728\u865a\u62df\u673a\u4e0a\u8fd0\u884c\u7684\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f.\u3002\n\u5355\u51fb&#34\uff1b\u786e\u5b9a&34\uff1b\u540e\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6e90\u6587\u4ef6\uff0c\u4e3a\u6b64\uff0c\u53ea\u9700\u8f6c\u5230\u83dc\u5355&#34\uff1b\u6587\u4ef6-&&gt;\u6e90\u6587\u4ef6&#34\uff1b\u6216\u4f7f\u7528\u5feb\u6377\u65b9\u5f0f&#34\uff1bCtrl+N&#34\uff1b\u3002\n\u7f16\u5199\u5b8c\u8fd9\u6bb5\u4ee3\u7801\u540e\uff0c\u60a8\u9700\u8981\u5c06\u9879\u76ee\u548c\u6e90\u4ee3\u7801\u4fdd\u5b58\u5728\u67d0\u4e2a\u76ee\u5f55\u4e2d\uff0c\u60a8\u53ea\u9700\u8981\u6784\u5efa\u5b83\u3002\n\u8fd9\u91cc\uff0c\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u516c\u5171\u51fd\u6570(\u5305\u542b\u51fd\u6570\u548c\u6d88\u606f\u7684\u9759\u6001\u7c7b)\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff0c\u4f46\u662f\u53ef\u4ee5\u66f4\u6539\u8fd9\u4e00\u70b9\u3002\n&#34\uff1bsystem&#34\uff1b\uff1a\u5b83\u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u547d\u540d\u7a7a\u95f4\u672c\u8eab\u53ef\u4ee5\u5305\u542b\u7528\u6487\u53f7\u5206\u9694\u7684\u5b50\u5143\u7d20\n\u8fd9\u5bf9\u6211\u4eec\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4f7f\u7528\u53c2\u6570&#34\uff1bHello World\uff01&#34\uff1b\u5411\u547d\u540d\u7a7a\u95f4System\u4e2d\u7684\u7c7bConsole\u7684\u65b9\u6cd5writeLine\u53d1\u9001\u4e00\u6761\u6d88\u606f\u3002\n\u5c31\u50cf\u5728C#\u3001C++\u3001Python\u7b49\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u5bfc\u5165\u67d0\u4e9b\u547d\u540d\u7a7a\u95f4\u6dfb\u52a0\u7279\u6b8a\u5173\u952e\u5b57\uff0c\u4f7f\u7528\u6b64\u5173\u952e\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u3002\n\u8fd9\u4e2a\u7a0b\u5e8f\u552f\u4e00\u7684\u95ee\u9898\u662f\u6211\u4eec\u4e0d\u80fd\u8bfb\u53d6\u8f93\u51fa\u2026\u2026\u6240\u4ee5\uff0c\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u4f7f\u7528\u4e00\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\u6700\u540e\u4e00\u4e2a\u5206\u53f7\u53ef\u4ee5\u7701\u7565\u3002\u7f16\u5199\u76f8\u540c\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u6548\u679c\u5f88\u597d\uff0c\u56e0\u4e3a\u5728Elena\u4e2d\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u3002\n\u5c31\u50cf\u5728Smalltalk\u4e2d\u4e00\u6837\uff0c\u5728Elena\u4e2d\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u662f\u5bf9\u8c61\uff0c\u56e0\u6b64\uff0c\u8981\u521b\u5efa\u53d8\u91cf\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528\u5c5e\u6027var\u3002\n\u56e0\u6b64\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u4ece\u952e\u76d8\u4e0a\u8bfb\u53d6\u4e00\u4e9b\u4e1c\u897f\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){var number\uff1a=console.print(&#34\uff1b\u952e\u5165\u7f16\u53f7\uff1a&#34\uff1b).readLine().toInt()\uff1b*console.printLine(&#34\uff1b\u60a8\u952e\u5165&#34\uff1b\uff0cnumber)\uff1b*console.readChar()}\u3002\n\u5f88\u7b80\u5355\uff0c\u5bf9\u5427\uff1f\u56e0\u6b64\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u518d\u5bfc\u5165\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4\uff0c\u540d\u79f0\u7a7a\u95f4\u6269\u5c55\u5305\u542b\u6269\u5c55\u65b9\u6cd5#&#34\uff1bloadLineTo[2]&#34\uff1b\u7684\u5b9a\u4e49\u3002\nvar x\uff1a=new IntNumber()\uff1bvar y\uff1a=0\uff1bvar k\uff1a=new system&#39\uff1bCalendar&#39\uff1bdate()\uff1bvar n\uff1a=k.Year\uff1bvar s\uff1a=&#34\uff1bHello World&#34\uff1b\uff1bvar u\uff1a=0fffffh\uff1bvar l\uff1a=3.1415r\uff1bvar m\uff1a=new RealNumber(3.14r)\uff1bvar j\uff1a=true\uff1bvar h\uff1a=false\uff1b\n\u5bfc\u5165\u6269\u5c55\uff1bSingleton Tester{printMe(S){console.printLine(S)}}\u516c\u5171\u7a0b\u5e8f(){var a\uff1bvar b\uff1a=a\uff1a=2\uff1bTester.printMe(A)\uff1bTester.printMe(B)\uff1bTester.printMe(b\uff1a=3)\uff1b}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1b\u5355\u4f8b\u6d4b\u8bd5\u5668{printMe(S){console.printLine(S)}assignMe(ref retVal\uff0cval){retVal\uff1a=val}}public program(){Tester.assignMe(ref var I\uff0c2)\uff1bTester.printMe(I)\uff1b}\u3002\n\u53ef\u4ee5\u4f7f\u7528\u4ee3\u7801\u6a21\u677f-if\u58f0\u660eElena\u4e2d\u7684\u5206\u652f\u8bed\u53e5\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\uff1a\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){console.writeLine\uff1a&#34\uff1bHi\uff01\uff01\uff1a)&#34\uff1b\uff1bvar you name\uff1a=console.writeLine(&#34\uff1b\u60a8\u7684\u540d\u5b57\uff1f&#34\uff1b).readLine()\uff1bconsole.writeLine\uff1a&#34\uff1b\uff1bvar your Age\uff1a=console.loadLineTo(new Integer())\uff1bvar number of fChildrens\uff1a=0\uff1bif(your Age&Get\u3002\u4f60\u8fd8\u5f88\u5e74\u8f7b\uff01\uff01&34\uff1b}\u5426\u5219(your Age&gt\uff1b=11&amp\uff1b&amp\uff1byour Age&lt\uff1b=20){console.writeLine\uff1a&#34\uff1b\u9752\u6625\u671f\uff0c\u4f1a\u6709\u5f88\u591a\u4eba\u751f\u6c14\u5417\uff1f&#34\uff1b}\u5982\u679c(your Age&&gt;\uff1b=21&amp\uff1b&amp\uff1byour Age&lt\uff1b=30){console.writeLine\uff1a&34\uff1b\u60a8\u5df2\u7ecf\u6709\u5b69\u5b50\u4e86\u5417\uff1f(\u662f/\u5426)&34\uff1b\uff1bString\u6709\u5b69\u5b50\u5417\uff1f\u5982\u679c(haveChildren.lowerCase()==&#34\uff1byes&#34\uff1b){number OfChildrens\uff1a=console.writeLine(&#34\uff1bCool\uff01\uff01\u60a8\u6709\u51e0\u4e2a\u5b69\u5b50\uff1f&#34\uff1b).loadLineTo(new Integer())}}\u5982\u679c(your Age&gt\uff1b=31&amp\uff1b&amp\uff1byour Age&lt\uff1b=40){console.writeLine\uff1a&#34\uff1b\u7ae5\u5e74\u7684\u524d40\u5e74\u662f\u6700\u56f0\u96be\u7684\uff01&34\uff1b}\u5982\u679c(your Age&&gt;\uff1b=41&amp\uff1b&amp\uff1byour Age&lt\uff1b=50){console.writeLine\uff1a&#34\uff1bLife\u3002=51&amp\uff1b&amp\uff1b\u60a8\u7684\u5e74\u9f84&lt\uff1b=60){console.writeLine\uff1a&#34\uff1b\u4eab\u53d7\u60a8\u7684\u751f\u6d3b\uff01&#34\uff1b}\u5982\u679c(your Age&gt\uff1b=61){console.writeLine\uff1a&#34\uff1b\u60a8\u5230\u4e86\u4eab\u53d7\u548c\u653e\u677e\u7684\u5e74\u9f84\uff01\uff01&#34\uff1b}\uff1bconsole.readChar()}\u3002\n\u50cf\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e00\u6837\uff0cElena\u652f\u6301\u5faa\u73af\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770bWhile\u5faa\u73af\uff0c\u8fd9\u4e2a\u5faa\u73af\u662f\u4f7f\u7528WHILE\u548cFOR\u6a21\u677f\u5b9e\u73b0\u7684\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){var array\uff1a=Array.Allocation\uff1a200\uff1bvar i\uff1a=0\uff1bWhile(i&lt\uff1barray.Length){array[i]\uff1a=i*10\uff1bi+=1}\uff1bfor(int i\uff1a=0\uff0ci&lt\uff1barray.Length\uff0ci+=1){console.printLine(&#34\uff1bat index&#34\uff1b\uff0ci\uff0c&#34\uff1b\u5177\u6709\u503c\uff1a&#34\uff1b\uff0carray[i])\uff1b\nElena\u652f\u6301\u4ee5\u4e0b\u6a21\u677f\u8fd0\u7b97\u7b26\uff1adoIfNotNil(.\uff1f\uff0c\u7c7b\u4f3c\u4e8eC#)\u548ctryOrReturn(.\\)\u3002\ntryOrReturn\u5c1d\u8bd5\u5411\u5de6\u64cd\u4f5c\u6570\u53d1\u9001\u6d88\u606f\u5e76\u8fd4\u56de\u64cd\u4f5c\u7ed3\u679c\u3002\u5982\u679c\u5bf9\u8c61\u4e0d\u5904\u7406\u5b83\uff0c\u5219\u8fd4\u56de\u7a7a\u3002\n\u5bfc\u5165\u7cfb\u7edf\uff1b\u5bfc\u5165\u6269\u5c55\uff1bB{test(String Command){console.printLine(Command)\uff1b}}C\uff1bpublic program(){var a\uff1a=nil\uff1bvar b\uff1a=new B()\uff1bvar c\uff1a=new C()\uff1ba.\uff1ftest(&#34\uff1bfired a.\uff1ftest&34\uff1b)\uff1bb.\uff1ftest(&#34\uff1bfired b.\uff1ftest&34\uff1b)\uff1ba.\\test(&#34\uff1bfired a.\\test&34\uff1b)\uff1b\u5df2\u89e3\u96c7b.\\test&#34\uff1b)\uff1bc.\\test(&#34\uff1bfired c.\\test&#34\uff1b)\uff1bconsole.readLine()\uff1b}\u3002\npublic program(){1//\u58f0\u660e\u5d4c\u5957\u51fd\u6570Func f1\uff1a={console.writeLine(&#34\uff1bfired&#39\uff1bf1&#39\uff1b&#34\uff1b)}\uff1bFunc f2\uff1a=nil\uff1bf1.\uff1f()\uff1bf2.\uff1f()\uff1bconsole.readLine()\uff1b}\u3002\nElena\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u3002\u8981\u521b\u5efa\u7a0b\u5e8f\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u65b0\u7c7b\u3002\n\u7c7b\u7528\u4ee3\u7801(\u65b9\u6cd5)\u5c01\u88c5\u6570\u636e(\u5b57\u6bb5)\u4ee5\u8bbf\u95ee\u5b83\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u8bfe\u7a0b\u5185\u5bb9\u3002\u901a\u5e38\uff0c\u8be5\u5b57\u6bb5\u5f15\u7528\u53e6\u4e00\u4e2a\u7c7b\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6211\u4eec\u5230\u8fbe\u5185\u5bb9\u88ab\u89c6\u4e3a\u539f\u59cb\u6570\u636e(\u4f8b\u5982\uff0c\u6570\u5b57\u503c\u6216\u6587\u5b57\u503c)\u7684\u539f\u59cb\u7c7b\u3002\n\u7c7b\u5f62\u6210\u7ee7\u627f\u6811\u3002\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u8d85\u7ea7\u7c7b\u7cfb\u7edf\u5bf9\u8c61\u3002\u5c3d\u7ba1\u53ef\u4ee5\u4f7f\u7528\u5206\u6d3e\u5904\u7406\u7a0b\u5e8f(\u6df7\u5408/\u7ec4\u5bf9\u8c61)\u6216\u63a5\u53e3\u7ee7\u627f\u4ee3\u7801\uff0c\u4f46Elena\u4e0d\u652f\u6301\u591a\u91cd\u7ee7\u627f\u3002\u5f53\u6ca1\u6709\u63d0\u4f9b\u7236\u7c7b\u65f6\uff0c\u8be5\u7c7b\u76f4\u63a5\u7ee7\u627f\u7cfb\u7edf\u5bf9\u8c61(\u8d85\u7c7b)\u3002\n\u7c7b\u5b9e\u4f8b\u53ef\u4ee5\u5728\u7279\u6b8a\u65b9\u6cd5-\u6784\u9020\u51fd\u6570\u7684\u5e2e\u52a9\u4e0b\u521b\u5efa\u3002\u6784\u9020\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u521d\u59cb\u5316\u7c7b\u5b57\u6bb5\u3002\u6709\u4e00\u4e9b\u7279\u6b8a\u7c7b\u578b\u7684\u7c7b\u6ca1\u6709\u6784\u9020\u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528(\u5d4c\u5957\u7c7b\u3001\u6269\u5c55\u3001\u95ed\u5305)\u3002\u7c7b\u672c\u8eab\u88ab\u89c6\u4e3a\u65e0\u72b6\u6001\u5bf9\u8c61\u3002\n\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u5c06\u7f16\u5199\u4e00\u4e9b\u7c7b\uff0c\u4ee5\u4f7f\u5176\u5b9e\u73b0\u548c\u4f7f\u7528\u66f4\u52a0\u6e05\u6670\u3002\n\u5bfc\u5165\u7cfb\u7edf\uff1b\u5bfc\u5165\u6269\u5c55\uff1b\u7c7bMyFirstClass{\u6784\u9020\u51fd\u6570(){console.printLine(&#34\uff1bMyFirstClass\u5b9e\u4f8b\u5316\uff01ehhhhhh\uff01\uff01&#34\uff1b)}}public program(){var myFirstClass\uff1a=new MyFirstClass()\uff1bconsole.readChar()}\u3002\n\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u57fa\u672c\u539f\u5219\u4e4b\u4e00\u662f\u7c7b\u4e4b\u95f4\u7684\u7ee7\u627f\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u5b9e\u73b0\u4e24\u4e2a\u7c7b\uff0c\u4e00\u4e2a\u57fa\u7c7b\u548c\u4e00\u4e2a\u6d3e\u751f\u7c7b\u3002\n\u5bfc\u5165\u7cfb\u7edf\uff1b\u5bfc\u5165\u6269\u5c55\uff1b\u7c7bMyFirstBaseClass{string theField1\uff1bstring theField2\uff1b\u6784\u9020\u51fd\u6570new(){theField1\uff1a=&#34\uff1b&#34\uff1b\uff1btheField2\uff1a=&#34\uff1b&#34\uff1b}\u6784\u9020\u51fd\u6570new(String Field1){console.printLine(&#34\uff1bfieldBaseClass1=&#34\uff1b\uff0cfield1)\uff1btheField1\uff1a=field1\uff1bconsole.printLine(&#34\uff1bfieldBaseClass2=&#34\uff1b\uff0cfield2)\uff1btheField1\uff1a=field1\uff1btheField2\uff1a=field2}printFields(){console.printLine(self.Field1)\uff1bconsole.printLine(self.Field2)}Field1=theField1\uff1b//property Field1 Field2=theField2\uff1b--\u4eceDerivedClass&#34\uff1b){console.printLine(&#34\uff1b\u4f7f\u75281\u4e2a\u53c2\u6570\u8c03\u7528MyFirstDerivedClass\u7684\u6784\u9020\u51fd\u6570&#34\uff1b)\uff1bconsole.printLine(&#34\uff1bfield1=&#34\uff1b\uff0cfield1)}\u6784\u9020\u51fd\u6570(String field1\uff0cstring field2)&lt\uff1b=new(field1+&34\uff1b\uff1b--\u4eceDerivedClass&#34\uff1b\uff0cfield2\u8c03\u7528\u3002console.printLine(&#34\uff1bfield1=&#34\uff1b\uff0cfield1)\uff1bconsole.printLine(&#34\uff1bfield2=&#34\uff1b\uff0cfield2)}}public Program(){var myFirstDerivedClassInstance\uff1a=nil\uff1bvar number OfArgsToInitInstance\uff1a=0\uff1bvar ContinueLoop\uff1a=true\uff1b\u800c(ContineLoop){number OfArgsToInitInstance\u3002&amp\uff1bnumber OfArgsToInitInstance&lt\uff1b=2){ContineLoop\uff1a=false}}\uff1b//\u8fd9\u662f&#39\uff1b\u5f00\u5173&#39\uff1b.\u3002number OfArgsToInitInstance=&gt\uff1b0{myFirstDerivedClassInstance\uff1a=new MyFirstDerivedClass()}1{myFirstDerivedClassInstance\uff1a=new MyFirstDerivedClass(&#34\uff1b\u6765\u81ea\u7a0b\u5e8f&#34\uff1b)}}2{myFirstDerivedClassInstance\uff1a=new MyFirstDerivedClass(&#34\uff1bArgument1\u3002\n\u53ef\u4ee5\u58f0\u660e\u4e0d\u80fd\u5728\u7c7b\u5916\u90e8\u8c03\u7528\u7684\u79c1\u6709\u65b9\u6cd5\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bclass MyClass{private printPrivate(){console.printLine(&#34\uff1bprivate prin.&#34\uff1b)}printPublic(){console.print(&#34\uff1bcall from public print-&#34\uff1b)\uff1b//self\u662f\u5bf9\u5f53\u524d\u5bf9\u8c61self.printPrivate()}}public program(){//\u6ce8\u610f\uff0c\u5982\u679c\u6784\u9020\u51fd\u6570\u672a\u663e\u5f0f\u58f0\u660e//\u7cfb\u7edf\u5bf9\u8c611(\u6ca1\u6709\u8f93\u5165\u53c2\u6570)\u5c06\u7ee7\u627fvar myClass\uff1a=new MyClass\uff1a=new MyClass\uff1a=new MyMyClass\uff1a=new MyClass\uff1a=new MyClass\u3002myClass.printPrivate()}\u3002\n\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u7c7b\u5b57\u6bb5\u4e0d\u80fd\u5728\u7c7b\u4e4b\u5916\u8bbf\u95ee\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u53ef\u4ee5\u58f0\u660e\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u5b83\uff1a\n\u5bfc\u5165\u6269\u5c55\uff1b\u7c7bMyClass{int_x\uff1bget int x()=_x\uff1b//\u83b7\u53d6\u8bbf\u95ee\u5668\u96c6x(Int O)//\u8bbe\u7f6e\u8bbf\u95ee\u5668{_x\uff1a=o}}public program(){var myClass\uff1a=new MyClass()\uff1bmyClass.x\uff1a=2\uff1bconsole.printLine(&#34\uff1bMyClass.x=&#34\uff1b\uff0cmyClass.x)}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1b\u7c7bMyClass{prop int x\uff1b}public program(){var myClass\uff1a=new MyClass()\uff1bmyClass.x\uff1a=2\uff1bconsole.printLine(&#34\uff1bMyClass.x=&#34\uff1b\uff0cmyClass.x)}\n\u8ba9\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u5728\u57fa\u672c\u6570\u636e\u7c7b\u578b(int\u3001long\u3001real\u3001string)\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u6269\u5c55\u6a21\u5757\u4e2d\u58f0\u660e\u7684\u6269\u5c55\u65b9\u6cd5\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){int n\uff1a=20\uff1breal r\uff1a=3.4r\uff1blong l\uff1a=5000000000000l\uff1bconsole.writeLine(&#34\uff1bn=&#34\uff1b+n.toString())\uff1bconsole.writeLine(&#34\uff1br=&#34\uff1b+r.toString())\uff1bconsole.writeLine(&#34\uff1bl=&#34\uff1b+l.toString()\uff1b}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){int n\uff1a=20\uff1blong l\uff1a=50000000000l\uff1bconsole.writeLine(&#34\uff1bn=0o&#34\uff1b+n.toString(8))\uff1bconsole.writeLine(&#34\uff1bl=0x&#34\uff1b+l.toString(16))\uff1b}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1b\u516c\u5171\u7a0b\u5e8f(){int n\uff1a=&#34\uff1b20&#34\uff1b.toInt()\uff1b//=20 long l\uff1a=&#34\uff1b5000000000000&#34\uff1b.toLong()\uff1b//=50000000000l\u5b9e\u9645r\uff1a=&#34\uff1b2.3&#34\uff1b.toReal()\uff1b//=2.3r}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1b\u516c\u5171\u7a0b\u5e8f(){int n\uff1a=&#34\uff1b24&#34\uff1b.toInt(8)\uff1b//=20 long l\uff1a=&#34\uff1b48C27395000&#34\uff1b.toLong(16)\uff1b//=50000000000001}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){int n\uff1a=200\uff1blong l\uff1a=n.toLong()\uff1b//=200l real r1\uff1a=n.toReal()\uff1b//=200.0r real R2\uff1a=l.toReal()\uff1b//=200.0r}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1b\uff1apublic program(){int n\uff1a=200\uff1blong l\uff1a=n\uff1b//=200l real r1\uff1a=n\uff1b//=200.0r real r2\uff1a=l\uff1b//=200.0r}\u3002\n\u5982\u679c\u5b9e\u6570\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\uff0c\u5219\u53ef\u4ee5\u5c06\u5b9e\u6570\u8f6c\u6362\u4e3a\u6574\u6570\uff1a\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){real r\uff1a=200.0r\uff1blong l\uff1a=r.toLong()\uff1b//=200l int n\uff1a=r.toInt()\uff1b//=200}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){real r\uff1a=200.2r\uff1breal r2\uff1a=r.Integer\uff1b//=200.0r long l\uff1a=r.Integer.toLong()\uff1b//=200l int n\uff1a=r.Integer.toInt()\uff1b//=200}\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bPUBLIC PROGRAM(){try{new object().nonExistingMethod()\uff1b}catch\uff1a\uff1a{\u51fd\u6570(MethodNotFoundException E)*{}\uff1aconsole.console.printLine(&#34\uff1b\u65b9\u6cd5\u672a\u627e\u5230&#34\uff1b)*}**\u51fd\u6570(\u5f02\u5e38e)*{}*console.printLine(&#34\uff1b\u672a\u77e5\u9519\u8bef&#34\uff1b)(&#34\uff1bUNKNOWN ERROR&#34\uff1b)(&#34\uff1b\u672a\u77e5\u9519\u8bef&#34\uff1b)(&#34\uff1bUNKNOWN ERROR&#34\uff1b)(&#34\uff1b\u672a\u77e5\u9519\u8bef&#34\uff1b)(&#34\uff1b\u672a\u77e5\u9519\u8bef&#34\uff1b)\u3002\n\u5bfc\u5165\u6269\u5c55\uff1bpublic program(){console.printLine(&#34\uff1btry&#34\uff1b)\uff1btry{var o\uff1a=new object()\uff1bo.ail()\uff1b}Finally{console.printLine(&#34\uff1bFinally&#34\uff1b)\uff1b}catch(Exception E){console.printLine(&#34\uff1berror\uff01&#34\uff1b)\uff1b}}\u3002\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u4fdd\u8bc1\u5bf9\u8c61\u59cb\u7ec8\u6b63\u786e\u5173\u95ed\uff0c\u53ef\u4ee5\u4f7f\u7528Using Pattern\uff1a\n\u5bfc\u5165\u6269\u5c55\uff1b\u7c7bA{\u6784\u9020\u51fd\u6570(){console.printLine(&#34\uff1b\u6253\u5f00&#34\uff1b)\uff1b}do(){console.printLine(&#34\uff1b\u505a&#34\uff1b)\uff1b}\u5173\u95ed(){console.printLine(&#34\uff1b\u5173\u95ed&#34\uff1b)\uff1b}}\u516c\u5171\u7a0b\u5e8f(){\u6b63\u5728\u4f7f\u7528(var a\uff1a=new A(){a.do()\uff1b}}\u3002\nimport system&#39\uff1bio\uff1bimport tensions\uff1bpublic program(){//\u4ece\u547d\u4ee4\u884c\u53c2\u6570var filename\uff1a=program_arguments[1]\u4e2d\u83b7\u53d6\u6587\u4ef6\u540d\uff1b//\u4f7f\u7528(auto read\uff1a=File.Assign(Filename).textreader())\u6253\u5f00\u6587\u672c\u6587\u4ef6\u8bfb\u53d6\u5668{//\u91cd\u590d\u76f4\u5230\u8bfb\u53d6\u5b8c\u6240\u6709\u884c\uff0c\u540c\u65f6(reader.Available){//\u8bfb\u53d6\u884c\u5b57\u7b26\u4e32line\uff1a=reader.readLine()\uff1b//\u6253\u5370\u884cconsole.printLine(line\u3002\nimport system&#39\uff1bio\uff1bimport tensions\uff1bpublic program(){//\u4ece\u547d\u4ee4\u884c\u53c2\u6570var filename\uff1a=program_arguments[1]\u4e2d\u83b7\u53d6\u6587\u4ef6\u540d\uff1b//\u4f7f\u7528(auto Writer\uff1a=File.Assign(Filename).textwriter()){//\u91cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u8f93\u5165\u7a7a\u884c\u4e3a\u6b62(string line\uff1a=console.readLine()\uff0cline\uff01=emptyString\uff0cline\uff1a=console.readLine()){//\u4fdd\u5b58\u5230\u6587\u4ef6\u5199\u5165\u5668\n\u5982\u679c\u8981\u8ffd\u52a0\u5230\u73b0\u6709\u6587\u4ef6\uff0c\u5219\u5e94\u4f7f\u7528logger()\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a\nimport system&39\uff1bio\uff1bimport Extensions\uff1bimport system&#39\uff1bCollection\uff1bpublic program(){//\u4ece\u547d\u4ee4\u884c\u53c2\u6570var filename\uff1a=PROGRAM_ARGUMENTS[1]\uff1b//\u521b\u5efa\u5217\u8868\u4ee5\u4fdd\u5b58\u8bfb\u53d6\u7684\u6570\u636e\u5217\u8868&lt\uff1bbyte&gt\uff1bdump\uff1a=new list&lt\uff1bbyte&gt\uff1b()\uff1b//\u4f7f\u7528(AUTO READER\uff1a=BinaryFileReader)\u6253\u5f00\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bfb\u53d6\u5668\u3002new(Filename)){//\u91cd\u590d\u76f4\u5230\u8bfb\u53d6\u5b8c\u6240\u6709\u6587\u4ef6\uff0c\u540c\u65f6(reader.Available){//\u5c06\u5f53\u524d\u5b57\u8282\u8bfb\u5165\u53d8\u91cfb//\u6ce8\u610f\u53d8\u91cf\u58f0\u660e\u4e3aJust-in-place reader.read(Ref Byte B)\uff1b//\u5c06\u8bfb\u53d6\u7684\u5b57\u8282\u6dfb\u52a0\u5230\u8f6c\u50a8\u6587\u4ef6\u3002append(B)\uff1b}\uff1b}\uff1b//\u5c06\u6587\u4ef6\u5185\u5bb9\u6253\u5370\u4e3a\u5b57\u8282\u5217\u8868console.printLine(dump.asEnumerable())\uff1b}\u3002\n\u5bfc\u5165\u7cfb\u7edf\uff1b\u5bfc\u5165\u6269\u5c55\uff1b\u516c\u5171\u7a0b\u5e8f(){//\u6307\u5b9a\u3002\n..", "note_en": "ELENA is a general-purpose language with late binding. It is multi-paradigm, combining features of functional and object-oriented programming. It supports both strong and weak types, run-time conversions, boxing and unboxing primitive types, direct usage of external libraries. Rich set of tools are provided to deal with message dispatching : multi-methods, message qualifying, generic message handlers.\n  A programming language is a formidable\u00a0task to develop and to learn. So encountering a new language you may ask: why another programming language? The short answer is to try it a little differently. Why not to treat the message like a normal language element with which different operations are possible : loading, passing, modifying, dispatching? Could we do it without using reflection all the way? This was my motivation. ELENA is designed to facilitate writing dynamic, polymorphic code, combing elements of dynamic and static languages.\n ELENA is a general-purpose language with late binding. It is multi-paradigm, combining features of functional and object-oriented programming. It supports both strong and weak types, run-time conversions, boxing and unboxing primitive types, direct usage of external libraries. Rich set of tools are provided to deal with message dispatching : multi-methods, message qualifying, generic message handlers. Multiple-inheritance can be simulated using mixins and type interfaces. Built-in script engine allows to incorporate custom defined scripts into your applications. Both stand-alone applications and Virtual machine clients are supported\n        The ELENA compiler was fully implemented in C++. To compile, the compiler does not require external dependencies, such as Flex, Bison... you just need Visual Studio 2017\u00a0or higher.\n  To build the compiler, you can open the CMD, go to root elena folder and type:\n     It is extremely important before beginning the program in a 100% object-oriented language, to know the basic concepts of a truly object-oriented language.\n     In OOP, a class defines a set of properties and methods that are common to all objects of this type. It may contain special methods to create its instances, called - constructors.\n  An object is an instance of a class. In general, objects are stored in dynamic memory. There is a special case of the object - singleton, which exists only as a single instance.  Note that in ELENA, a class is an object itself and can be used like any other object.\n  Fields, also known as the instance variables, are the variables declared within a class. These variables can only be read with the use of methods to assign or read the contents of the field.  Static fields are supported as well.\n  In C++, we talk about &#34;pointers&#34; to objects while in C#, we talk about &#34;references&#34; to objects. Both concepts are basically the same and references are implemented by straight pointers, which are just memory addresses. In ELENA, we use references.\n  Method is like a function, except that it is applied to a specific object. We also say that the method is &#34;invoked&#34; on an object or &#34;sent to&#34; an object. The object in question is called the &#34;receiver&#34;. Every method is invoked on receiving object. In C++ or C#, the receiver is called &#34;this&#34;, in ELENA - &#34;self&#34;.\n Methods in ELENA are similar to methods in C# and C++, where they are called &#34;member functions&#34;. Methods may take arguments and always return a result (if no result provided &#34;self&#34; reference is returned). The method body is a sequence of executable statements. Methods are invoked from expression, just as in other languages.\n  There is an important distinction between &#34;methods&#34; and &#34;messages&#34;. A method is a body of code while a message is something that is sent. A method is similar to a function. in this analogy, sending a message is similar to calling a function. An expression which invokes a method is called a &#34;message sending expression&#34;.\n ELENA terminology makes a clear distinction between &#34;message&#34; and &#34;method&#34;. A message-sending expression will send a message to the object. How the object responds to the message depends on the class of the object. Objects of differents classes will respond to the same message differently, since they will invoke different methods. Generic methods may accept any message with the specified signature (parameter types).\n  A great start for when we are studying or just knowing any new programming language, is always the famous program &#34; Hello world!&#34;.\n In order to create our first program, we have to get the ELENA compiler, for this, you just need to download the compiler in  this link.\n   With the  bin folder is in your path system, this is necessary to be able to generate the executable to access the elena runtime that is used for example, when a exception throws to show in what class &amp; method the exception happens.\n Let&#39;s start, first of all, we need to open the ELENA IDE, for this, you can type in CMD &#34;elide&#34; or, just open the executable called &#34;elide&#34;.\n After opening the elide IDE, we will create a new project, for this, we just need to go to menu &#34; File-&gt;New-&gt;Project&#34;, when you click in the project menu, it will open a dialog like this:\n   Type: Is the type of application than you will create, like GUI, Console, Console App running over VM ....\n   After you click in &#34; ok&#34;, we need to create a new source file, for this, just go to menu &#34; File-&gt;Source file&#34; or use the shortcut &#34; Ctrl+N&#34;.\n   After you write this code, you need to save the project and the source code in some directory and you just need to build it.\n   Here, we declare a  public function (a  static class containging  function\u00a0message). By default, the &#34; program&#34; is the entry point of the program, but, it&#39;s possible to change this.\n   &#34; system&#34;: It is a namespace, the namespace itself may contain sub elements separated by apostrophes\n What does this mean for us? That means that we send a message to method  writeLine of class console in namespace system with parameter &#34; Hello World!&#34;.\n Like in other languages, like C#, C++, Python, we can add a special keyword to &#34; import&#34; some namespace, with this, we can &#39;reduce&#39; code.\n   The unique problem that we have with this program is that we can&#39;t read the output..., so, to fix this, we just need to use one more method, and, we can use this method in two ways.\n     The last semicolon can be omitted.  This second way to write the same program works well because in ELENA, every method returns an object.\n  Like in Smalltalk, in ELENA, everything is a object, so, to create variables, we just need to use an attribute  var.\n   So, as an example, let&#39;s write a simple program to read something from the keybord.\n  import extensions;public program(){\u00a0 \u00a0 var number := console.print(&#34;Type a number: &#34;).readLine().toInt();\u00a0 \u00a0 console.printLine(&#34;You typed &#34;, number);\u00a0 \u00a0 console.readChar() }\n Really simple, right? So, in this example, we need to import one more namespace, the namespace extensions contain the definition for the extension method\u00a0&#34; loadLineTo[2]&#34;.\n  var x := new IntNumber();var y := 0;var k := new system&#39;calendar&#39;Date();var n := k.Year;var s := &#34;Hello World&#34;;var u := 0fffffh;var l := 3.1415r;var m := new RealNumber(3.14r);var j := true;var h := false;\n  import extensions; singleton Tester{ printMe(s) { console.printLine(s) }} public program(){ var a; var b := a :=  2; Tester.printMe(a); Tester.printMe(b); Tester.printMe(b :=  3);}\n    import extensions;singleton Tester{ printMe(s) { console.printLine(s) } assignMe( ref retVal, val) { retVal := val }} public program(){ Tester.assignMe( ref var i,  2); Tester.printMe(i);}\n    Branching statements in ELENA can be declared using a code template -  if. Let&#39;s take a look:\n   import extensions; public program(){ console.writeLine: &#34; Hi!! :)&#34;; var yourName := console.writeLine( &#34; Whats your name ?&#34;).readLine(); console.writeLine: &#34; How old are you ?&#34;; var yourAge := console.loadLineTo( new Integer()); var numberOfChildrens :=  0;  if(yourAge &gt;=  0 &amp;&amp; yourAge &lt;=  10) { console.writeLine: &#34; You&#39;re still very young!!&#34; }  else  if(yourAge &gt;=  11 &amp;&amp; yourAge &lt;=  20) { console.writeLine: &#34; Adolescence, come a lot of people angry?&#34; }  else  if(yourAge &gt;=  21 &amp;&amp; yourAge &lt;=  30) { console.writeLine: &#34; Do you already have children ? ( yes/no )&#34;; string haveChildren := console.readLine();  if(haveChildren.lowerCase() ==  &#34; yes&#34;) { numberOfChildrens := console.writeLine( &#34; Cool!! how many kids do you have ?&#34;) .loadLineTo( new Integer()) } }  else  if(yourAge &gt;=  31 &amp;&amp; yourAge &lt;=  40) { console.writeLine: &#34; The first 40 years of childhood are the most difficult !!!&#34; }  else  if(yourAge &gt;=  41 &amp;&amp; yourAge &lt;=  50) { console.writeLine: &#34; Life begins at 40!&#34; }  else  if(yourAge &gt;=  51 &amp;&amp; yourAge &lt;=  60) { console.writeLine: &#34; Enjoy your LIFE !!!&#34; }  else  if(yourAge &gt;=  61) { console.writeLine: &#34; You are at the age to enjoy and relax !!&#34; }; console.readChar()}\n  Like in other programming languages, ELENA has a support for loops, let&#39;s take a look at the  while loop, this loop is implemented using templates  while  and   for.\n    import extensions;  public program(){ var  array := Array.allocate: 200; var i :=  0;  while(i &lt;  array.Length) {  array[i] := i *  10; i +=  1 };  for( int i :=  0, i &lt;  array.Length, i +=  1) { console.printLine( &#34; At index &#34;, i,  &#34;  has the value:&#34;,  array[i]); }; console.readChar()}\n   ELENA supports the following template operators:  doIfNotNil ( .?, similar to C# ) and  tryOrReturn ( .\\ ).\n  tryOrReturn tries to send a message to  left-operand and returns the result of the operation. If the object does not handle it -  nil is returned.\n import system;import extensions;B{ test(string command) { console.printLine(command); }}C; public program(){ var a := nil; var b :=  new B(); var c :=  new C(); a.?test( &#34; Fired a.?test&#34;); b.?test( &#34; Fired b.?test&#34;); a.\\test( &#34; Fired a.\\test&#34;); b.\\test( &#34; Fired b.\\test&#34;); c.\\test( &#34; Fired c.\\test&#34;); console.readLine();}\n    public program(){\u00a0 // declaring a nested function Func f1 := { console.writeLine(&#34;Fired &#39;f1&#39;&#34;) }; Func f2 := nil; f1.?(); f2.?(); console.readLine();}\n    ELENA is an object-oriented language. To create a program, we have to declare new classes.\n A class encapsulates data (fields) with code (methods) to access it. In most cases, it is not possible to get a direct access to the class content. Usually, the field refers to another class and so on until we reach &#34;primitive&#34; ones which content are considered as raw data (e.g., numeric or literal values).\n Classes form the inheritance tree. There is the common super class -  system&#39;Object. ELENA does not support multiple inheritance, though it is possible to inherit the code using a dispatch handler (mixins / group objects) or interfaces. When the parent is not provided, the class inherits directly  system&#39;Object (the super class).\n A class instance can be created with the help of the special methods - constructors. A constructor is used mostly to initialize the class fields. There are special types of classes which do not have constructors and can be used directly (nested classes, extensions, closures). A class itself is considered as a stateless object.\n To understand this information, we will write some classes, to make clearer its implementation and use.\n  import system;import extensions;class MyFirstClass{ constructor() { console.printLine(&#34;MyFirstClass instancied!!! ehhhhhhh!!&#34;) }}public program(){ var myFirstClass := new MyFirstClass(); console.readChar()}\n    One of the basic principles of object-oriented programming is inheritance between classes, so let&#39;s implement two classes, a base class and a derived class.\n import system;import extensions; class MyFirstBaseClass{ string theField1; string theField2; constructor  new() { theField1 :=  &#34; &#34;; theField2 :=  &#34; &#34; } constructor  new(string field1) { console.printLine( &#34; fieldBaseClass1 = &#34;, field1); theField1 := field1; theField2 :=  &#34; &#34;; } constructor  new(string field1, string field2) { console.printLine( &#34; fieldBaseClass1 = &#34;, field1); console.printLine( &#34; fieldBaseClass2 = &#34;, field2); theField1 := field1; theField2 := field2 } printFields() { console.printLine(self.Field1); console.printLine(self.Field2) } Field1 = theField1;  //  property Field1 Field2 = theField2;  //  property Field2} class MyFirstDerivedClass : MyFirstBaseClass{ constructor  new() { console.writeLine: &#34; Constructor of MyFirstDerivedClass called with no parameters&#34; } constructor  new(string field1) &lt;=  new(field1 +  &#34;  -- Called from DerivedClass&#34;) { console.printLine( &#34; Constructor of MyFirstDerivedClass called with 1 parameters&#34;); console.printLine( &#34; field1 = &#34;, field1) } constructor(string field1, string field2) &lt;=  new(field1 +  &#34;  -- Called from DerivedClass&#34;, field2 +  &#34;  -- Called from DerivedClass&#34;) { console.printLine( &#34; Constructor of MyFirstDerivedClass called with 2 parameters&#34;); console.printLine( &#34; field1 = &#34;, field1); console.printLine( &#34; field2 = &#34;, field2) }} public program(){ var myFirstDerivedClassInstance := nil; var numberOfArgsToInitInInstance :=  0; var continueLoop :=  true;  while(continueLoop) { numberOfArgsToInitInInstance := console.printLine( &#34; Enter with how much variables you want to use in instance init ? (0/1/2)&#34;) .readLine().toInt();  if(numberOfArgsToInitInInstance &gt;=  0 &amp;&amp; numberOfArgsToInitInInstance &lt;=  2) { continueLoop :=  false } };  //  This is a &#39;switch&#39;... numberOfArgsToInitInInstance =&gt;  0 { myFirstDerivedClassInstance :=  new MyFirstDerivedClass() }  1 { myFirstDerivedClassInstance :=  new MyFirstDerivedClass( &#34; Argument1 from program&#34;) }  2 { myFirstDerivedClassInstance :=  new MyFirstDerivedClass( &#34; Argument1 from program&#34;,  &#34; Argument2 from program&#34;) } : { console.writeLine: &#34; invalid option...&#34; }; myFirstDerivedClassInstance.printFields(); console.readChar()}\n It is possible to declare the  private methods which cannot be called outside the class.\n import extensions; class MyClass{  private printPrivate() { console.printLine( &#34; private print.&#34;) } printPublic() { console.print( &#34; Calling from public print - &#34;);  //  self is a reference to the current object self.printPrivate() }} public program(){  //  Note that if the constructor explicitly is not declared   //  the system&#39;Object one (without input parameters) is inherited var myClass :=  new MyClass(); myClass.printPublic(); myClass.printPrivate()}\n In normal case, the class fields cannot be accessed outside the class. That&#39;s why we may declare a special method to access it:\n import extensions; class MyClass{  int _x; get  int x() = _x;  //  get accessor set x( int o)  //  set accessor  { _x := o }} public program(){ var myClass :=  new MyClass(); myClass.x :=  2; console.printLine( &#34; MyClass.x=&#34;, myClass.x)}\n  import extensions; class MyClass{ prop  int x;} public program(){ var myClass :=  new MyClass(); myClass.x :=  2; console.printLine( &#34; MyClass.x=&#34;, myClass.x)}\n  Let&#39;s learn how-to convert basic data types ( int,  long,  real,  string) between one other. We will use the extension methods declared in extensions module.\n  import extensions; public program(){  int n :=  20; real r :=  3.4r;  long l := 5000000000000l; console.writeLine( &#34; n=&#34; + n.toString()); console.writeLine( &#34; r=&#34; + r.toString()); console.writeLine( &#34; l=&#34; + l.toString());}\n    import extensions;  public program(){  int n :=  20;  long l := 5000000000000l; console.writeLine( &#34; n=0o&#34; + n.toString( 8)); console.writeLine( &#34; l=0x&#34; + l.toString( 16));}\n    import extensions; public program(){  int n :=  &#34; 20&#34;.toInt();  //  = 20  long l :=  &#34; 5000000000000&#34;.toLong();  //  = 5000000000000l real r :=  &#34; 2.3&#34;.toReal();  //  = 2.3r}\n  import extensions; public program(){  int n :=  &#34; 24&#34;.toInt( 8);  //  = 20  long l :=  &#34; 48C27395000&#34;.toLong( 16);  //  = 5000000000000l}\n  import extensions; public program(){  int n :=  200;  long l := n.toLong();  //  = 200l real r1 := n.toReal();  //  = 200.0r real r2 := l.toReal();  //  = 200.0r}\n  import extensions; : public program(){  int n :=  200;  long l := n;  //  = 200l real r1 := n;  //  = 200.0r real r2 := l;  //  = 200.0r}\n Conversions from the real number to the integer are possible provided the real number has no fraction part:\n import extensions; public program(){ real r :=  200.0r;  long l := r.toLong();  //  = 200l  int n := r.toInt();  //  = 200}\n  import extensions; public program(){ real r :=  200.2r; real r2 := r.Integer;  //  = 200.0r  long l := r.Integer.toLong();  //  = 200l  int n := r.Integer.toInt();  //  = 200}\n   import extensions; public program(){  try {  new  Object().nonExistingMethod(); }\u00a0 \u00a0  catch::\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 function(MethodNotFoundException e)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0console.printLine( &#34; Method not found&#34;)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 function(Exception e)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0console.printLine( &#34; Unknown error&#34;)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }}\n  import extensions; public program(){ console.printLine( &#34; Try&#34;);  try { var o :=  new  Object(); o.fail(); }  finally { console.printLine( &#34; Finally&#34;); }  catch(Exception e) { console.printLine( &#34; Error!&#34;); }}\n    Using pattern can be used if we want to garantee that the object will always be correctly closed:\n import extensions; class A{ constructor() { console.printLine( &#34; opening&#34;); }  do() { console.printLine( &#34; doing&#34;); } close() { console.printLine( &#34; closing&#34;); }} public program(){  using(var a :=  new A()) { a. do(); }}\n     import system &#39; io;import extensions;public program() { // getting a file name from the command line argument var fileName := program_arguments[1]; // opening a text file reader using(auto reader := File.assign(fileName).textreader()) { // repeating until all the lines are read while (reader.Available) { // read the line string line := reader.readLine(); // print the line console.printLine(line); }; } }\n  import system &#39; io;import extensions;public program() { // getting a file name from the command line argument var fileName := program_arguments[1]; // opening a text file writer using(auto writer := File.assign(fileName).textwriter()) { // repeating until the empty line is entered for(string line := console.readLine(), line != emptyString, line := console.readLine()) { // save to the file writer.writeLine(line) } } }\n  If we want to append to the existing file, then we should use  logger() method, e.g.:\n   import system &#39; io;import extensions;import system&#39;collections; public program() {  //  getting a file name from the command line argument var fileName := program_arguments[ 1];  //  creating a list to hold the read data List&lt;byte&gt; dump :=  new List&lt;byte&gt;();  //  opening a binary file reader  using( auto reader := BinaryFileReader. new(fileName)) {  //  repeating until all the file is read   while (reader.Available) {  //  read the current byte into a variable b  //  note the variable is declared just-in-place reader.read( ref byte b);  //  add the read byte to the dump  dump.append(b); }; };  //  print the file content as a list of bytes console.printLine(dump.asEnumerable());}\n  import system &#39; io;import extensions; public program(){ // specifyin\n......", "posttime": "2020-06-06 23:03:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,programming,\u7f16\u7a0b\u8bed\u8a00,elena", "title": "Elena\u7f16\u7a0b\u8bed\u8a00\u7b80\u4ecb", "title_en": "Introduction to Elena Programming Language", "transed": 1, "url": "https://www.codeproject.com/Articles/1127103/Introduction-to-ELENA-Programming-Language", "via": "", "real_tags": ["\u7f16\u7a0b", "\u7f16\u7a0b\u8bed\u8a00", "elena"]}]