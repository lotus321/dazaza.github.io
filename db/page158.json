[{"category": "", "categoryclass": "", "imagename": "8bbb56ec774b6248a7f8a50d38945992.png", "infoid": 1004501, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u5141\u8bb8\u60a8\u7684\u7528\u6237\u53c2\u4e0e\u5e7f\u6cdb\u7684\u5b9e\u7528\u7a0b\u5e8f\u4ee5\u53ca\u5a31\u4e50\u673a\u5668\u4eba\uff0c\u4ece\u800c\u63d0\u9ad8\u7559\u5b58\u7387\u548c\u5b83\u4eec\u7684\u7ec8\u751f\u4ef7\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u89e3\u51b3\u4e86BOT\u5f00\u53d1\u4eba\u5458\u7684\u53ef\u53d1\u73b0\u6027\u95ee\u9898\uff0c\u800c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6536\u5165\u662f\u5171\u4eab\u7684-\u8fd9\u5bf9\u6240\u6709\u4eba\u6765\u8bf4\u90fd\u662f\u53cc\u8d62\u7684\uff01\n\u8fd9\u5141\u8bb8\u60a8\u7684\u7528\u6237\u53c2\u4e0e\u5e7f\u6cdb\u7684\u5b9e\u7528\u7a0b\u5e8f\u4ee5\u53ca\u5a31\u4e50\u673a\u5668\u4eba\uff0c\u4ece\u800c\u63d0\u9ad8\u7559\u5b58\u7387\u548c\u5b83\u4eec\u7684\u7ec8\u751f\u4ef7\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u89e3\u51b3\u4e86BOT\u5f00\u53d1\u4eba\u5458\u7684\u53ef\u53d1\u73b0\u6027\u95ee\u9898\uff0c\u800c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6536\u5165\u662f\u5171\u4eab\u7684-\u8fd9\u5bf9\u6240\u6709\u4eba\u6765\u8bf4\u90fd\u662f\u53cc\u8d62\u7684\uff01\n\u8fd9\u5141\u8bb8\u60a8\u7684\u7528\u6237\u53c2\u4e0e\u5e7f\u6cdb\u7684\u5b9e\u7528\u7a0b\u5e8f\u4ee5\u53ca\u5a31\u4e50\u673a\u5668\u4eba\uff0c\u4ece\u800c\u63d0\u9ad8\u7559\u5b58\u7387\u548c\u5b83\u4eec\u7684\u7ec8\u751f\u4ef7\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u89e3\u51b3\u4e86BOT\u5f00\u53d1\u4eba\u5458\u7684\u53ef\u53d1\u73b0\u6027\u95ee\u9898\uff0c\u800c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6536\u5165\u662f\u5171\u4eab\u7684-\u8fd9\u5bf9\u6240\u6709\u4eba\u6765\u8bf4\u90fd\u662f\u53cc\u8d62\u7684\uff01", "note_en": "This allows your users to engage with a wide range of utility as well as entertaining bots, thus boosting retention rates and their life-time value. On the other hand it solves the discoverability problem for bot developers, while revenues generated in the process are shared - a win-win for all!\n  This allows your users to engage with a wide range of utility as well as entertaining bots, thus boosting retention rates and their life-time value. On the other hand it solves the discoverability problem for bot developers, while revenues generated in the process are shared - a win-win for all!\n  This allows your users to engage with a wide range of utility as well as entertaining bots, thus boosting retention rates and their life-time value. On the other hand it solves the discoverability problem for bot developers, while revenues generated in the process are shared - a win-win for all!", "posttime": "2020-05-31 16:06:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u673a\u5668\u4eba,marketplace", "title": "\u804a\u5929\u673a\u5668\u4eba\u7684\u5e02\u573a", "title_en": "A Marketplace for Chatbots", "transed": 1, "url": "https://messengerx.io", "via": "", "real_tags": ["\u673a\u5668\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "f8236ee0b13d7509206e9af25698d954.jpeg", "infoid": 1004500, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u52b3\u52a8\u529b\u81ea\u52a8\u5316\u5373\u5c06\u8ba9\u6570\u5341\u540d\u65b0\u95fb\u627f\u5305\u5546\u4e22\u6389\u5de5\u4f5c\u3002\u300a\u897f\u96c5\u56fe\u65f6\u62a5\u300b\u548c\u300a\u536b\u62a5\u300b\u62a5\u9053\u79f0\uff0c\u7531\u4e8eMSN\u8f6c\u5411\u4eba\u5de5\u667a\u80fd\u65b0\u95fb\u5236\u4f5c\uff0c\u5fae\u8f6f\u5c06\u57286\u670830\u65e5\u4e4b\u540e\u89e3\u96c7\u6570\u5341\u5bb6\u65b0\u95fb\u627f\u5305\u5546(\u7f8e\u56fd\u7ea650\u5bb6\uff0c\u82f1\u56fd\u7ea627\u5bb6)\u3002\u5de5\u4eba\u4eec\u8d1f\u8d23\u9009\u62e9\u3001\u7f16\u8f91\u548c\u7b56\u5212\u6545\u4e8b\u3002\u5fae\u8f6f\u5168\u804c\u5458\u5de5\u5c06\u7559\u5728\u516c\u53f8\u3002\n\u5728\u7ed9\u201c\u6cf0\u6664\u58eb\u62a5\u201d\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\uff0c\u5fae\u8f6f\u8868\u793a\uff0c\u5b83\u548c\u5927\u591a\u6570\u516c\u53f8\u4e00\u6837\uff0c\u201c\u5b9a\u671f\u8bc4\u4f30\u6211\u4eec\u7684\u4e1a\u52a1\u201d\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u201c\u91cd\u65b0\u90e8\u7f72\u201d\u3002\u5b83\u5f3a\u8c03\uff0c\u627f\u5305\u5546\u88c1\u5458\u201c\u4e0d\u662f\u5f53\u524d\u5927\u6d41\u884c\u7684\u7ed3\u679c\u201d\u3002\n\u4eba\u5de5\u667a\u80fd\u9009\u62e9\u751a\u81f3\u64b0\u5199\u65b0\u95fb\u7684\u6982\u5ff5\u5e76\u4e0d\u65b0\u9c9c\u3002\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u73b0\u5b9e\u4e16\u754c\u7684\u6848\u4f8b\uff0c\u4e00\u4e2a\u4e3b\u8981\u5730\u70b9\u7684\u5c31\u4e1a\u673a\u4f1a\u53d7\u5230\u4e86\u5f71\u54cd\u3002\u95ee\u9898\u662f\uff0c\u66f4\u91cd\u7684\u81ea\u52a8\u5316\u662f\u5426\u4f1a\u6709\u6548\u3002\u4e00\u4f4d\u63a5\u53d7\u201c\u536b\u62a5\u201d\u91c7\u8bbf\u7684\u53d7\u5f71\u54cd\u4eba\u58eb\u62c5\u5fc3\uff0c\u4eba\u5de5\u667a\u80fd\u53ef\u80fd\u4f1a\u65e0\u610f\u4e2d\u8fdd\u53cd\u201c\u4e25\u683c\u7684\u7f16\u8f91\u51c6\u5219\u201d\uff0c\u6bd4\u5982\u8ba9\u66b4\u529b\u6750\u6599\u770b\u4e0d\u89c1\u3002\u8fd9\u65e2\u662f\u5bf9\u4eba\u5de5\u667a\u80fd\u7684\u6269\u5927\u8003\u9a8c\uff0c\u4e5f\u662f\u524a\u51cf\u6210\u672c\u7684\u5b9e\u9645\u63aa\u65bd\u3002", "note_en": "Workforce automation is about to cost dozens of news contractors their jobs.   The Seattle Times and   The Guardian report that Microsoft is letting go of dozens of news contractors (about 50 in the US, 27 in the UK) after June 30th due to a shift to AI news production on MSN. The workers were responsible for choosing, editing and curating stories. People employed full-time by Microsoft will stay at the company.\n In a statement to the  Times, Microsoft said it \u201cevaluate[s] our business on a regular basis\u201d like most companies and that this could involve \u201cre-deployment.\u201d It stressed that the contractor job cuts were \u201cnot the result of the current pandemic.\u201d\n  The concept of AI choosing and even  writing news isn\u2019t new. However, this is a real-world case where jobs at a major site have been affected. The question is whether or not the heavier automation will be effective. One affected person talking to  The Guardian was concerned the AI might inadvertently violate \u201cstrict editorial guidelines,\u201d such as keeping violent material out of immediate view. This is as much an expanded test of AI as it is a practical measure to cut costs.", "posttime": "2020-05-31 15:35:55", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4eba\u5de5\u667a\u80fd,\u5fae\u8f6f,microsoft,\u6545\u4e8b,replaces", "title": "\u5fae\u8f6f\u4e3aMSN\u4e0a\u7684\u65b0\u95fb\u6545\u4e8b\u7528\u4eba\u5de5\u667a\u80fd\u53d6\u4ee3\u4e86\u6570\u5341\u540d\u5458\u5de5", "title_en": "Microsoft Replaces Dozens of Staff With AI for News Stories on MSN", "transed": 1, "url": "https://www.engadget.com/microsoft-msn-news-jobs-cuts-due-to-ai-230620807.html", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u5fae\u8f6f", "microsoft", "\u6545\u4e8b", "replaces"]}, {"category": "", "categoryclass": "", "imagename": "4b820d7f6d249eebab0daca4ed967b5d.png", "infoid": 1004499, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u6ca1\u6709\u60f3\u8fc7\u73a9\u626b\u96f7\u8230\uff0c\u4f46\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5b83\uff1f\u6ca1\u6709\u5417\uff1f\u771f\u7684\u4e0d\u662f\u5417\uff1f\uff1f\nBootmine\u662f\u4e00\u6b3e\u5b8c\u6574\u7684\u626b\u96f7\u8230\u6e38\u620f\uff0c\u88ab\u585e\u8fdb512\u5b57\u8282\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2aBIOS\u5f15\u5bfc\u6247\u533a\u7684\u5927\u5c0f\u3002\u5b83\u53ef\u4ee5\u5728\u4efb\u4f55\u652f\u6301BIOS\u5f15\u5bfc\u7684PC\u4e0a\u5f15\u5bfc\uff0c\u800c\u65e0\u9700\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u8fd0\u884c\u3002\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0cBootmine\u662f\u5b83\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u9664\u4e86\u8fd0\u884c\u626b\u96f7\u8230\u4ec0\u4e48\u4e5f\u505a\u4e0d\u4e86\u3002\n\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4dd if=bootmine.img of=/dev/sdb\u5c06512\u5b57\u8282\u7684\u6587\u4ef6bootmine.img\u5199\u5165\u8f6f\u76d8(\u6216USB\u9a71\u52a8\u5668)\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u5b9e\u9645\u4e0a\u4f1a\u9500\u6bc1\u9a71\u52a8\u5668\u4e0a\u7684\u6240\u6709\u6570\u636e\u3002\n\u6ce8\u610f\uff1a\u4f5c\u4e3a\u71b5\u6e90\uff0cBochs\u5b9e\u73b0rdtsc\u6307\u4ee4\u7684\u65b9\u5f0f\u4f3c\u4e4e\u4e0d\u592a\u597d\uff0c\u56e0\u6b64\u70b8\u5f39\u4f4d\u7f6e\u662f\u53ef\u4ee5\u9884\u6d4b\u7684\u3002\nBootmine\u4e5f\u652f\u6301DOS\uff01\u8fd0\u884cmake\u8fd8\u4f1a\u751f\u6210\u53ef\u4ee5\u5728DOS\u4e2d\u8fd0\u884c\u7684bootmine.com\u3002\u5728DOSBox\u548cDOSEMU\u4e2d\u6709\u4e00\u4e9bMakefile\u76ee\u6807\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fd0\u884c\u3002", "note_en": "Ever wanted to play minesweeper but didn&#39;t have an OS to run it in? No? Really no??\n BootMine is an entire minesweeper game crammed into 512 bytes, the size of a BIOS boot sector. It can boot on any PC that supports BIOS booting, without running inside an OS. In a sense, BootMine is its own OS that can do nothing but run minesweeper.\n        The 512-byte file  bootmine.img can be written to the first sector of a floppy disk (or USB drive), with a command like  dd if=bootmine.img of=/dev/sdb. Keep in mind that this will effectively destroy all data on the drive.\n     NOTE: The way Bochs implements the  rdtsc instruction appears to be bad as a source of entropy, so the bomb locations are predictable.\n  BootMine has DOS support too! Running  make also produces  bootmine.com that can be run in DOS. There are Makefile targets for easily running in DOSBox and DOSEMU.", "posttime": "2020-05-31 15:09:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u5f15\u5bfc,minesweeper,bootmine", "title": "512\u5b57\u8282\u5f15\u5bfc\u6247\u533a\u4e2d\u7684\u53ef\u5f15\u5bfc\u626b\u96f7\u6e38\u620f", "title_en": "Bootable minesweeper game in a 512-byte boot sector", "transed": 1, "url": "https://github.com/io12/bootmine", "via": "", "real_tags": ["\u6e38\u620f", "\u5f15\u5bfc", "bootmine"]}, {"category": "", "categoryclass": "", "imagename": "39f4898f4ca278b022a686fc35f70c47.jpg", "infoid": 1004498, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u8f6f\u5728\u5176\u5fae\u8f6f\u65b0\u95fb\u548cMSN\u7ec4\u7ec7\u4e2d\u89e3\u96c7\u4e86\u6570\u5341\u540d\u8bb0\u8005\u548c\u7f16\u8f91\u4eba\u5458\u3002\u6b64\u6b21\u88c1\u5458\u662f\u5fae\u8f6f\u4f9d\u9760\u4eba\u5de5\u667a\u80fd\u6311\u9009\u65b0\u95fb\u548c\u5185\u5bb9\u7684\u66f4\u5927\u52aa\u529b\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u4e9b\u65b0\u95fb\u548c\u5185\u5bb9\u51fa\u73b0\u5728MSN.com\u3001\u5fae\u8f6f\u7684Edge\u6d4f\u89c8\u5668\u5185\uff0c\u4ee5\u53ca\u8be5\u516c\u53f8\u7684\u5404\u79cdMicrosoft News\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u8bb8\u591a\u53d7\u5f71\u54cd\u7684\u5458\u5de5\u662f\u5fae\u8f6fSANE(\u641c\u7d22\u3001\u5e7f\u544a\u3001\u65b0\u95fb\u3001\u8fb9\u7f18)\u90e8\u95e8\u7684\u4e00\u90e8\u5206\uff0c\u4ed6\u4eec\u7b7e\u7ea6\u62c5\u4efb\u4eba\u7c7b\u7f16\u8f91\uff0c\u5e2e\u52a9\u6311\u9009\u6545\u4e8b\u3002\n\u201c\u50cf\u6240\u6709\u516c\u53f8\u4e00\u6837\uff0c\u6211\u4eec\u5b9a\u671f\u8bc4\u4f30\u6211\u4eec\u7684\u4e1a\u52a1\uff0c\u201d\u5fae\u8f6f\u53d1\u8a00\u4eba\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\u3002\u201c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5728\u4e00\u4e9b\u5730\u65b9\u589e\u52a0\u6295\u8d44\uff0c\u5e76\u4e0d\u65f6\u5728\u5176\u4ed6\u5730\u65b9\u91cd\u65b0\u90e8\u7f72\u3002\u8fd9\u4e9b\u51b3\u5b9a\u4e0d\u662f\u5f53\u524d\u5927\u6d41\u884c\u7684\u7ed3\u679c\u3002\u201c\u3002\n\u867d\u7136\u5fae\u8f6f\u8868\u793a\u88c1\u5458\u4e0e\u6b63\u5728\u8fdb\u884c\u7684\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u4f46\u4e16\u754c\u5404\u5730\u7684\u5a92\u4f53\u4e1a\u52a1\u90fd\u53d7\u5230\u4e86\u7535\u89c6\u3001\u62a5\u7eb8\u3001\u5728\u7ebf\u7b49\u9886\u57df\u5e7f\u544a\u6536\u5165\u66b4\u8dcc\u7684\u6c89\u91cd\u6253\u51fb\u3002\nBusiness Insider\u5728\u5468\u4e94\u6700\u5148\u62a5\u9053\u4e86\u88c1\u5458\uff0c\u5e76\u8868\u793a\u7f8e\u56fd\u7ea6\u670950\u4e2a\u5de5\u4f5c\u5c97\u4f4d\u53d7\u5230\u5f71\u54cd\u3002\u5fae\u8f6f\u65b0\u95fb\u7684\u88c1\u5458\u4e5f\u5f71\u54cd\u5230\u4e86\u56fd\u9645\u56e2\u961f\uff0c\u636e\u201c\u536b\u62a5\u201d\u62a5\u9053\uff0c\u5728\u5fae\u8f6f\u51b3\u5b9a\u505c\u6b62\u96c7\u4f63\u4eba\u7c7b\u6765\u7b56\u5212\u5176\u4e3b\u9875\u4e0a\u7684\u6587\u7ae0\u540e\uff0c\u82f1\u56fd\u7ea6\u670927\u4e2a\u56e2\u961f\u88ab\u89e3\u96c7\u3002\n\u81ea1995\u5e74\u63a8\u51faMSN\u4ee5\u6765\uff0c\u5fae\u8f6f\u5728\u65b0\u95fb\u884c\u4e1a\u5df2\u7ecf\u670925\u5e74\u4ee5\u4e0a\u7684\u5386\u53f2\u4e86\u3002\u5728\u8fd1\u4e24\u5e74\u524d\u63a8\u51fa\u7684\u201c\u5fae\u8f6f\u65b0\u95fb\u201d(Microsoft News)\u4e0a\uff0c\u5fae\u8f6f\u900f\u9732\uff0c\u5b83\u201c\u62e5\u6709800\u591a\u540d\u7f16\u8f91\uff0c\u5206\u5e03\u5728\u5168\u740350\u4e2a\u5730\u70b9\u3002\u201d\n\u8fd1\u51e0\u4e2a\u6708\u6765\uff0c\u5fae\u8f6f\u5728\u5176Microsoft News\u5de5\u4f5c\u4e2d\u9010\u6e10\u8d70\u5411\u4eba\u5de5\u667a\u80fd\uff0c\u5e76\u4e00\u76f4\u5728\u9f13\u52b1\u51fa\u7248\u5546\u548c\u8bb0\u8005\u4e5f\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u3002\u5fae\u8f6f\u4e00\u76f4\u5728\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u626b\u63cf\u5185\u5bb9\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u548c\u8fc7\u6ee4\uff0c\u751a\u81f3\u5411\u4eba\u7c7b\u7f16\u8f91\u63a8\u8350\u7167\u7247\u4ee5\u4f9b\u914d\u5bf9\u3002\u5fae\u8f6f\u4e00\u76f4\u5728\u4f7f\u7528\u4eba\u5de5\u7f16\u8f91\u4ece\u5404\u79cd\u6765\u6e90\u6311\u9009\u5934\u6761\u65b0\u95fb\uff0c\u5e76\u5c06\u5176\u663e\u793a\u5728Microsoft News\u3001MSN\u548cMicrosoft Edge\u4e0a\u3002", "note_en": "Microsoft is laying off dozens of journalists and editorial workers at its Microsoft News and MSN organizations. The layoffs are part of a bigger push by Microsoft to rely on artificial intelligence to pick news and content that\u2019s presented on MSN.com, inside Microsoft\u2019s Edge browser, and in the company\u2019s various Microsoft News apps. Many of the affected workers are part of Microsoft\u2019s SANE (search, ads, News, Edge) division, and are contracted as human editors to help pick stories.\n \u201cLike all companies, we evaluate our business on a regular basis,\u201d says a Microsoft spokesperson in a statement. \u201cThis can result in increased investment in some places and, from time to time, re-deployment in others. These decisions are not the result of the current pandemic.\u201d\n While Microsoft says the layoffs aren\u2019t directly related to the ongoing coronavirus pandemic, media businesses across the world have been hit hard by advertising revenues plummeting across TV, newspapers, online, and more.\n  Business Insider first reported the layoffs on Friday, and says that around 50 jobs are affected in the US. The Microsoft News job losses are also affecting international teams, and   The Guardian reports that around 27 are being let go in the UK after Microsoft decided to stop employing humans to curate articles on its homepages.\n Microsoft has been in the news business for more than 25 years, after launching MSN all the way back in 1995. At the launch of Microsoft News nearly  two years ago, Microsoft revealed it had \u201cmore than 800 editors working from 50 locations around the world.\u201d\n Microsoft has gradually been moving towards AI for its Microsoft News work in recent months, and has been encouraging publishers and journalists to make use of AI, too. Microsoft has been using AI to scan for content and then process and filter it and even suggest photos for human editors to pair it with. Microsoft had been using human editors to curate top stories from a variety of sources to display on Microsoft News, MSN, and Microsoft Edge.", "posttime": "2020-05-31 15:08:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,\u5fae\u8f6f,microsoft,\u8bb0\u8005,lays", "title": "\u5fae\u8f6f\u89e3\u96c7\u8bb0\u8005\uff0c\u7528\u4eba\u5de5\u667a\u80fd\u53d6\u800c\u4ee3\u4e4b", "title_en": "Microsoft lays off journalists to replace them with AI", "transed": 1, "url": "https://www.theverge.com/2020/5/30/21275524/microsoft-news-msn-layoffs-artificial-intelligence-ai-replacements", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u5fae\u8f6f", "microsoft", "\u8bb0\u8005", "lays"]}, {"category": "", "categoryclass": "", "imagename": "10f3028ecb310b7bacf897ddcc2062b5.jpg", "infoid": 1004495, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c31\u5728\u4e00\u5e74\u591a\u524d\uff0c\u6211\u4eec\u5728\u72b9\u4ed6\u5dde\u5e15\u514b\u57ce\u7684\u53e6\u4e00\u4e2a\u5de5\u4f5c\u65e5\u9192\u6765\uff0c\u5c31\u50cf\u5927\u591a\u6570\u65e5\u5b50\u4e00\u6837\uff0c\u6211\u4eec\u5f00\u59cb\u6d4f\u89c8\u6211\u4eec\u7684\u8c37\u6b4c\u5206\u6790(Google Analytics)\u3002\u5927\u591a\u6570\u65e5\u5b50\u91cc\u6211\u4eec\u7684\u6570\u5b57\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u770b\u5230\u76f8\u5f53\u660e\u663e\u7684\u4e0b\u964d\u65f6\uff0c\u6211\u4eec\u7684\u5fc3\u5c31\u4f1a\u6709\u70b9\u4e0b\u964d\u3002\u5c31\u50cf\u4efb\u4f55\u5173\u6ce8SEO\u4e16\u754c\u7684\u4eba\u4e00\u6837\uff0c\u6211\u4eec\u8fc5\u901f\u8d76\u6765\u67e5\u770b\u641c\u7d22\u5f15\u64ce\u9884\u6d4b\u5de5\u5177\uff0c\u5982MozCast\u548cAlgoroo\uff0c\u770b\u770b\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\n\u6211\u4eec\u5728\u8fd9\u4e2a\u884c\u4e1a\u5df2\u7ecf\u505a\u4e86\u5f88\u957f\u65f6\u95f4\u4e86\uff0c\u6211\u4eec\u77e5\u9053\u4f60\u7684\u8c37\u6b4c\u6d41\u91cf\u968f\u65f6\u90fd\u53ef\u80fd\u53d7\u5230\u5f71\u54cd\uff0c\u4f46\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u6211\u4eec\u6bcf\u4e2a\u5b63\u5ea6\u90fd\u5728\u6301\u7eed\u589e\u957f\u3002\u6ca1\u6709\u5728\u65b0\u95fb\u4e2d\u770b\u5230\u4efb\u4f55\u91cd\u5927\u66f4\u65b0\uff0c\u4e5f\u6ca1\u6709\u5728\u8c37\u6b4c\u641c\u7d22\u63a7\u5236\u53f0\u4e2d\u770b\u5230\u4efb\u4f55\u5904\u7f5a\u6216\u5947\u602a\u7684\u6a21\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u624d\u5f04\u6e05\u695a\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u540d\u5355\u4e0a\u7684\u4e0b\u4e00\u4e2a\u662f\u5728\u8c37\u6b4c\u4e0a\u641c\u7d22\u6211\u4eec\u81ea\u5df1\u7684\u7f51\u7ad9\u540d\u79f0\uff0c\u5f53\u6211\u4eec\u81ea\u7136\u5730\u51fa\u73b0\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u7684\u4e1a\u52a1\u5217\u8868\u5728\u53f3\u8fb9\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5730\u65b9\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u7684\u5217\u8868\u6839\u672c\u4e0d\u5728\u90a3\u91cc\uff0c\u5c3d\u7ba1\u5f53\u6211\u4eec\u767b\u5f55\u5230\u6211\u4eec\u7684\u8c37\u6b4c\u5546\u52a1\u8d26\u6237\u65f6\uff0c\u6211\u770b\u5230\u7684\u662f\u6211\u7684\u5217\u8868\u73b0\u5728\u672a\u7ecf\u6838\u5b9e\uff0c\u5e76\u88ab\u6807\u8bb0\u4e3a\u91cd\u590d\u7684\u5217\u8868\u3002\u7531\u4e8e\u6211\u4eec\u7684\u8d26\u6237\u6ca1\u6709\u6536\u5230\u5904\u7f5a\u901a\u77e5\uff0c\u6211\u4eec\u771f\u7684\u88ab\u6240\u53d1\u751f\u7684\u4e8b\u60c5\u96be\u4f4f\u4e86\u4e00\u5468\u591a\u3002\u6211\u4eec\u7acb\u5373\u4e0e\u5962\u4f88\u54c1\u54c1\u724c\u7684\u745e\u5b89\u00b7\u514b\u62c9\u514b\u901a\u4e86\u7535\u8bdd\uff0c\u4ed6\u4e0d\u65f6\u5730\u5e2e\u52a9\u6211\u4eec\u8fdb\u884c\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u548c\u516c\u5173\uff0c\u770b\u770b\u4ed6\u7684\u60f3\u6cd5\u3002\n\u7531\u4e8e\u4ed6\u5728\u524d\u51e0\u5e74\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86\u8fd1\u5341\u5e74\u6765\u505a\u751f\u610f\u7684\u8bc4\u8bba\uff0c\u4ed6\u767b\u5f55\u4e86\u81ea\u5df1\u7684\u8d26\u6237\uff0c\u53bb\u522b\u4eba\u7684\u8c37\u6b4c\u5546\u4e1a\u5217\u8868\u4e0b\u4e3a\u6211\u4eec\u627e\u5230\u4e86\u4ed6\u7684\u8bc4\u8bba\u3002\u7136\u540e\u6211\u4eec\u770b\u4e86\u770b\uff0c\u4f4e\u5934\u770b\u4e86\u770b\uff0c\u5176\u4ed6\u63d0\u5230\u6211(\u672c)\u7684\u623f\u6e90\u90fd\u5728\u72b9\u4ed6\u5dde\u9876\u5cf0\u82cf\u5bcc\u6bd4\u62cd\u5356\u884c(Summit-Sotheby\u2018s)\u7684\u53e6\u4e00\u4f4d\u7ecf\u7eaa\u4eba\u7684\u4ecb\u7ecd\u4e0b\u3002\n\u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u76f8\u5f53\u4e0d\u5e78\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5de5\u4f5c\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\uff0c\u5f97\u5230\u4e86\u8bda\u5b9e\u7684\u8bc4\u4ef7\uff0c\u5e76\u5728\u5e15\u514b\u57ce\u767b\u4e0a\u4e86\u9876\u5cf0\u3002\u6211\u4eec\u5fc5\u987b100%\u6e05\u695a\u5730\u8868\u660e\uff0c\u53e6\u4e00\u540d\u7279\u5de5\u4e0e\u6240\u53d1\u751f\u7684\u4e8b\u60c5\u65e0\u5173\uff0c\u4f3c\u4e4e\u5728\u5979\u7b7e\u7ea6\u65f6\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5c06\u6211\u4eec\u7684\u8d26\u6237\u4e0e\u5979\u7684\u8d26\u6237\u5408\u5e76\u4e86\u3002\u5979\u4e5f\u662f\u9876\u5cf0\u82cf\u5bcc\u6bd4\u62cd\u5356\u884c(Summit Sotheby\u2018s)\u7684\u4ee3\u7406\u4eba\uff0c\u5728\u6211\u4eec\u7ede\u5c3d\u8111\u6c41\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u6211\u4eec\u60f3\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u90fd\u5728\u540c\u4e00\u4e2a\u529e\u516c\u5ba4\u91cc\u3002\n\u8fd9\u5e76\u4e0d\u662f\u4e00\u4ef6\u4e0d\u5bfb\u5e38\u7684\u4e8b\u60c5\uff0c\u8c37\u6b4c\u751a\u81f3\u6709\u5173\u4e8e\u5982\u4f55\u7ba1\u7406\u5171\u4eab\u540c\u4e00\u529e\u516c\u5ba4\u7684\u4e2a\u4eba\u8d44\u6599\u7684\u6307\u5bfc\u65b9\u9488\u3002\u6709\u5f88\u591a\u5176\u4ed6\u7ecf\u7eaa\u4eba\u5728\u4f7f\u7528\u8fd9\u4e2a\u5730\u65b9\uff0c\u76f4\u5230\u73b0\u5728\u8fd8\u6ca1\u6709\u4eba\u9047\u5230\u8fc7\u8fd9\u6837\u7684\u95ee\u9898\u3002\u7531\u4e8e\u8c37\u6b4c\u6ca1\u6709\u63d0\u4f9b\u5b98\u65b9\u652f\u6301\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f9d\u8d56\u4ed6\u4eec\u7684\u7ad9\u957f\u652f\u6301\u8bba\u575b\uff0c\u8be5\u8bba\u575b\u5b8c\u5168\u7531\u5fd7\u613f\u8005\u7ec4\u6210\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u7684\u8c37\u6b4c\u5458\u5de5\u3002\n\u6211\u4eec\u5728\u8fd9\u91cc\u5236\u4f5c\u4e86\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u7ad9\u957f\u5e2e\u52a9\u4e2d\u5fc3\u5e16\u5b50\uff0c\u5e0c\u671b\u6709\u4eba\u80fd\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u4e00\u4e2a\u76f8\u5f53\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u4f46\u9057\u61be\u7684\u662f\uff0c\u6ca1\u6709\u4e00\u4e2a\u771f\u6b63\u4e86\u89e3\u60c5\u51b5\u7684\u4eba\u63d0\u4f9b\u4e86\u6709\u4ef7\u503c\u7684\u56de\u5e94\u3002\u5728\u7b49\u5f85\u4e86\u51e0\u5468\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u56de\u590d\u6ca1\u6709\u53d6\u5f97\u4efb\u4f55\u8fdb\u5c55\uff0c\u6240\u4ee5\u4f5c\u4e3aGoogle Adword\u7684\u7528\u6237\uff0c\u6211\u4eec\u6253\u7535\u8bdd\u7ed9\u90a3\u91cc\u7684\u8c37\u6b4c\u4ee3\u8868\uff0c\u5e0c\u671b\u4ed6\u4eec\u80fd\u628a\u8fd9\u4e2a\u95ee\u9898\u63a8\u7ed9\u771f\u6b63\u5728\u516c\u53f8\u5de5\u4f5c\u7684\u4eba\u3002\n\u8fd9\u5c31\u662f\u6211\u4eec\u4e00\u5e74\u591a\u7684\u65c5\u7a0b\u5e26\u6211\u4eec\u8d70\u4e0a\u4e86\u4e00\u6761\u5e0c\u671b\u6e3a\u832b\u7684\u9053\u8def\uff0c\u6ca1\u6709\u771f\u6b63\u7684\u56de\u5e94\uff0c\u66f4\u591a\u5931\u8d25\u7684\u5c1d\u8bd5\uff0c\u901a\u8fc7\u4ed6\u4eec\u7684\u7ad9\u957f\u8bba\u575b\uff0c\u6253\u7535\u8bdd\u5bfb\u6c42\u652f\u6301\uff0c\u7b49\u7b49\u3002\n\u6211\u4eec\u5df2\u7ecf\u63a5\u5230\u4e867\u4e2a\u7535\u8bdd\u54a8\u8be2\uff0c\u6700\u7ec8\u90fd\u88ab\u8f6c\u7ed9\u4e86\u4e00\u5bb6\u5916\u90e8\u652f\u6301\u516c\u53f8\u3002\u6bcf\u6b21\u8c08\u8bdd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6280\u672f\u652f\u6301\u4e0d\u7406\u89e3\u5408\u5e76\u8d26\u6237\u7684\u5b9e\u9645\u95ee\u9898\u3002\u4ed6\u4eec\u60f3\u8981\u8ffd\u6c42\u7684\u552f\u4e00\u89e3\u51b3\u65b9\u6848\u662f\u8ba9\u6211\u6838\u5b9e\u6211\u521b\u5efa\u7684\u65b0\u4e1a\u52a1\uff0c\u800c\u4e0d\u662f\u9000\u8fd8\u6211\u7684\u4e1a\u52a1\uff0c\u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u591a\u5e74\u7684\u5ba1\u67e5\uff0c\u5e76\u4e14\u5728\u5730\u56fe\u5305\u4e2d\u603b\u662f\u6392\u540d\u5f88\u9ad8\u3002\n\u5982\u679c\u4f60\u5728\u77e5\u9053\u8fd9\u662f\u4e00\u573a\u591a\u4e48\u8270\u96be\u7684\u6597\u4e89\u4e4b\u524d\uff0c\u5c31\u5df2\u7ecf\u52aa\u529b\u4ee5\u6b63\u786e\u7684\u65b9\u5f0f\u83b7\u5f97\u8bc4\u8bba\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u8981\u6c42\u8001\u5ba2\u6237\u505a\u65b0\u7684\u8bc4\u8bba\u3002\u8981\u548c\u8d85\u9ad8\u51c0\u503c\u5ba2\u6237\u8c08\u4e0a\u4e00\u5206\u949f\u5df2\u7ecf\u591f\u96be\u7684\u4e86\uff0c\u6240\u4ee5\u8fd9\u53ea\u4f1a\u589e\u52a0\u6211\u4eec\u7684\u632b\u6298\u611f\u3002\n\u56e0\u6b64\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u51b3\u5b9a\u66f4\u516c\u5f00\u5730\u5199\u4e0b\u8fd9\u4ef6\u4e8b\uff0c\u5e0c\u671b\u80fd\u5f15\u8d77\u8c37\u6b4c\u67d0\u4e2a\u4eba\u7684\u6ce8\u610f\uff0c\u4ed6\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u72ec\u7279\u800c\u4ee4\u4eba\u607c\u706b\u7684\u60c5\u51b5\u3002\u6211\u4eec\u8fd8\u4f1a\u770b\u770bSEO\u793e\u533a\u7684\u60f3\u6cd5\uff0c\u5982\u679c\u4ed6\u4eec\u4ee5\u524d\u6709\u8fc7\u8fd9\u6837\u7684\u7ecf\u5386\uff0c\u6211\u4eec\u80af\u5b9a\u627e\u4e0d\u5230\u5176\u4ed6\u4eba\u5728Reddit\u3001Facebook\u7fa4\u548c\u5176\u4ed6SEO\u8bba\u575b\u4e0a\u641c\u7d22\u8fd9\u4e2a\u95ee\u9898\u3002\n\u867d\u7136\u6211\u4eec\u4e3a\u5931\u53bb\u4e00\u4e9b\u4e1a\u52a1\u800c\u611f\u5230\u96be\u8fc7\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u5c06\u6765\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u5728\u5176\u4ed6\u4efb\u4f55\u4eba\u8eab\u4e0a\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u8fd9\u4e9b\u8bc4\u8bba\u5bf9\u5404\u79cd\u89c4\u6a21\u7684\u4f01\u4e1a\u90fd\u662f\u591a\u4e48\u5b9d\u8d35\u3002\u6211\u4eec\u5f88\u4e50\u610f\u542c\u53d6\u5176\u4ed6\u4f01\u4e1a\u4e3b\u548c\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u793e\u533a\u7684\u610f\u89c1\uff0c\u6240\u4ee5\u8bf7\u5728\u4e0b\u9762\u53d1\u8868\u8bc4\u8bba\uff0c\u5728Instagram\u4e0a\u7ed9\u6211\u4eec\u53d1\u9001DM\uff0c\u6216\u8005\u5728LinkedIn\u4e0a\u4e0e\u6211\u8054\u7cfb\uff0c\u7ed9\u6211\u4eec\u63d0\u4f9b\u60a8\u7684\u60f3\u6cd5\u3002\n\u5982\u679c\u6211\u4eec\u5236\u9020\u8db3\u591f\u7684\u566a\u97f3\uff0c\u8c37\u6b4c\u7684\u67d0\u4e2a\u4eba\u53ef\u80fd\u4f1a\u987a\u4fbf\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002", "note_en": "Just over a year ago we\u00a0woke up to another business day here in  Park City, Utah, and\u00a0like most days that starts with us going over our\u00a0Google Analytics. Most days are almost identical in our numbers, so when we saw a pretty significant dip our hearts dropped a bit. Like anyone tuned into the SEO world, we quickly rushed to check the search engine forecast tools like  MozCast and  Algoroo to see what was going on.\n  We&#39;ve been in this business a long time to know that your Google traffic can be impacted at any time, but for the most part we have been consistently growing quarter after quarter. Not seeing any major updates in the news, nor any penalties or odd patterns in Google Search Console so it took us a bit to figure out what was going on. Next on the list was to do a Google search for our own website name and while we came up organically, we noticed something odd with our &#34;business listing&#34; on the righthand side.\n        For starters, our listing wasn&#39;t there at all even though when we were logged into our  Google Business account I was being shown my listing was now unverified and was marked as a &#34;Duplicate&#34;. With not penalties being alerted in our accounts, we were truly stumped for over a week as to what happened. We immediately got on the phone with  Ryan Clark over at  Luxury Branded who helps with our SEO and PR from time to time to see what he thought.\n  Since he had in previous years left us a review for doing business for\u00a0nearly a decade, he logged into his account and went off to find his review for us under someone else&#39;s Google Business listing. Then we took a look and low and behold, other listings mentioning me (Ben) were under the profile of another agent within  Summit\u00a0Sotheby&#39;s \u00a0here in Utah.\n      This was rather unfortunate for us as we&#39;ve worked for so long getting honest reviews and climbing to the top here in Park City. We have to make it 100% clear that the other agent\u00a0had no part in what happened and seemed to somehow get our accounts merged with hers when she signed up. She is also an agent with Summit Sotheby&#39;s and after some time scratching our heads, we figured it was because we&#39;re all in the same office location.\n  This is not an unusual thing, and Google even has guidelines on how to manage profiles who share the same office. There are plenty of other brokers using this place and up until this point no one has had an issue like this. Since Google offers no official support, we have to rely on their webmaster support forum which is comprised entirely of volunteers and not actual Google employees.\n        We made our first  Webmaster Help Central post here in hopes someone could help is with a pretty serious issue, but sadly nobody who actual knows anything offered a response of value. Responses did not lead us anywhere after waiting a couple weeks, so being Google Adwords users we called a Google Rep there in hopes they could push the issue to someone who actually worked in the company.\n  This is where our journey over over a year now has taken us a down a path of little hope, no real responses and many more failed attempts to get help through their webmaster forum, phone calls to support, etc.\n  We&#39;ve had\u00a0seven phone inquiries which end up being routed to an external support company. Every conversation went the same way with the tech support not understanding the actual issue of the merged accounts. The only solution they wanted to pursue was for me to verify my new business that was created and not give mine back, and that is not acceptable for us as we had years of reviews and always ranked very high in the Map Pack.\n  If you&#39;ve worked to get reviews the right way before you know what a struggle that is and we cannot ask old clients to do a new one. It&#39;s hard enough to get a minute in with a UHNW client, so this just added to the flurry of frustration we felt.\n    So at this point we&#39;ve decided to write about it more publicly in hopes of getting the attention of someone at Google who can help us out with this unique and annoying situation. We&#39;ll be also seeing what the SEO community thinks and if they&#39;ve had this experience before, we certainly couldn&#39;t find anyone else with this issue searching around on Reddit, Facebook groups and other SEO forums.\n  While we&#39;re sad we&#39;re losing out on some business, we would like to see that this doesn&#39;t happen to anyone else in the future because we know how precious those reviews can be to businesses of all sizes. We would love to hear from other business owners and the SEO community at large so please drop a comment below, send us a  DM on Instagram or connect with me  on LinkedIn to give us your thoughts.\n  Even better if someone at Google might see this in passing if we make enough noise.", "posttime": "2020-05-31 14:04:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5546\u4e1a,\u8c37\u6b4c,google,gave", "title": "\u8c37\u6b4c\u628a\u6211\u4eec\u7684\u5546\u4e1a\u540d\u5355\u62f1\u624b\u8ba9\u7ed9\u4e86\u7ade\u4e89\u5bf9\u624b\uff0c\u6211\u4eec\u4e3a\u593a\u56de\u5b83\u6240\u505a\u7684\u52aa\u529b", "title_en": "Google Gave Away Our Business Listing to a Competitor, Our Fight to Get It Back", "transed": 1, "url": "https://www.parkcityluxuryrealestate.com/blog/google-gave-our-our-business-listing-to-a-competitor-and-our-fight-to-get-it-back.html", "via": "", "real_tags": ["\u5546\u4e1a", "\u8c37\u6b4c", "google", "gave"]}, {"category": "", "categoryclass": "", "imagename": "866776a613a0544be483fa69e1f5f1ed.png", "infoid": 1004494, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u7ecf\u5e38\u9605\u8bfb\u8fd9\u4e2a\u7a7a\u95f4\uff0c\u5c31\u4f1a\u77e5\u9053\u6211\u7684\u89c2\u70b9\u9887\u6709\u4e89\u8bae\uff0c\u5373JavaScript\u5bf9\u4e8e\u5b66\u4e60\u7f16\u7a0b\u7684\u5b69\u5b50\u6765\u8bf4\u662f\u4e00\u95e8\u5f88\u68d2\u7684\u7b2c\u4e00\u8bed\u8a00\u3002\u8fd9\u5e76\u4e0d\u662f\u56e0\u4e3aJavaScript\u662f\u4e00\u95e8\u4f1f\u5927\u7684\u6559\u5b66\u8bed\u8a00(\u5b83\u80af\u5b9a\u4e0d\u662f)\u3002\u8fd9\u662f\u56e0\u4e3a\u8be5\u5e73\u53f0\u65e0\u5904\u4e0d\u5728-\u5728\u6bcf\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u3001\u6bcf\u4e2a\u6d4f\u89c8\u5668\u548c\u51e0\u4e4e\u6bcf\u4e2a\u6bd4\u70e4\u9762\u5305\u673a\u66f4\u590d\u6742\u7684\u7535\u5b50\u8bbe\u5907\u4e0a\u3002\n\u5982\u6b64\u5e7f\u6cdb\u7684\u8986\u76d6\u9762\u4f7f\u5f97\u521d\u5b66\u8005\u53ef\u4ee5\u6beb\u4e0d\u8d39\u529b\u5730\u7528JavaScript\u6784\u5efa\u7a0b\u5e8f\u5e76\u4e0e\u670b\u53cb\u5206\u4eab\u3002\u4e0e\u8bb0\u5f55\u7684\u5176\u4f59\u8ba1\u7b97\u5386\u53f2\u4e0d\u540c\uff0c\u4e0d\u9700\u8981\u4e0b\u8f7d\u3001\u5b89\u88c5\u6216\u914d\u7f6e\u3002JavaScript\u4f7f\u7528\u4e0e\u8bb8\u591a\u5176\u4ed6\u4e13\u4e1a\u8bed\u8a00(\u5982Java\u548cC#)\u76f8\u4f3c\u7684\u82b1\u62ec\u53f7\u8bed\u6cd5\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u574f\u5904\u3002\u8fd9\u610f\u5473\u7740\u60a8\u82b1\u5728\u5b66\u4e60JavaScript\u8bed\u6cd5\u4e0a\u7684\u52aa\u529b\u6c38\u8fdc\u4e0d\u4f1a\u767d\u8d39\u3002\n\u4f46\u4e5f\u6709\u4e00\u4e9b\u7eca\u811a\u77f3\u3002\u5176\u4e2d\u4e00\u4e2a\u969c\u788d\u662f\u7f16\u7a0b\u73af\u5883\u3002\u5982\u679c\u60a8\u662f\u5b66\u4e60\u7f16\u7a0b\u7684\u521d\u5b66\u8005\uff0c\u6700\u597d\u7684\u8d77\u70b9\u662f\u5c06\u8bed\u8a00\u548c\u7f16\u8f91\u5de5\u5177\u878d\u5408\u5728\u4e00\u8d77\u7684IDE\u3002\u60f3\u4e00\u60f3\u50cfVisual Basic\u6216Scratch\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u4ece\u7f16\u5199\u7b2c\u4e00\u884c\u4ee3\u7801\u5230\u8c03\u8bd5\u6700\u540e\u4e00\u884c\u4ee3\u7801\u90fd\u6709\u65e0\u7f1d\u4f53\u9a8c\u3002\u4e00\u4e2a\u597d\u7684IDE\u53ef\u4ee5\u5efa\u8bae\u5173\u952e\u5b57\u3001\u6355\u6349\u9519\u8bef\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u770b\u5230\u60a8\u6240\u505a\u7684\u4e8b\u60c5\u3002\u5b83\u5141\u8bb8\u60a8\u5728\u4ee3\u7801\u8fd0\u884c\u65f6\u9010\u6b65\u6267\u884c\u4ee3\u7801\uff0c\u4e00\u6b21\u4e00\u6761\u8bed\u53e5-\u4e0d\u4ec5\u662f\u4e3a\u4e86\u6355\u83b7\u9519\u8bef\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u4e86\u89e3\u4ee3\u7801\u662f\u5982\u4f55\u6267\u884c\u7684\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u8fd9\u4e9b\u7ec6\u8282\u51b3\u5b9a\u4e86\u795e\u79d8\u548c\u56f0\u60d1\u7684\u4f53\u9a8c\u548c\u6d41\u7545\u7684\u4f53\u9a8c\u4e4b\u95f4\u7684\u4e0d\u540c\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u7f16\u5199JavaScript\u4ee3\u7801\u65f6\u4f1a\u6709\u5f88\u591a\u6469\u64e6\u3002\u662f\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6211\u6700\u559c\u6b22\u7684\u4ee3\u7801\u7f16\u8f91\u5668VS Code\uff0c\u5e76\u4e14(\u53ea\u9700\u8981\u4e00\u70b9\u5c0f\u9ebb\u70e6)\u8bbe\u7f6e\u5b83\u4e0d\u9519\u7684Chrome\u8c03\u8bd5\u5668\u3002\u4f46\u662f\u7f16\u7801\u4f53\u9a8c\u5e76\u4e0d\u592a\u9002\u5408\u521d\u5b66\u8005\u3002\u7f16\u8f91\u5668\u529f\u80fd\u4e30\u5bcc\uff0c\u914d\u7f6e\u6a21\u578b\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5b66\u4e60\u9879\u76ee\uff0c\u51fa\u9519\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u3002\nJavaScript IDE\u7684\u590d\u6742\u6027\u7531\u4e8eJavaScript\u7684\u7b2c\u4e00\u6b65\u662f\u9661\u5ced\u7684\u8fd9\u4e00\u4e8b\u5b9e\u800c\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002\u5373\u4f7f\u662f\u7eafJavaScript\u5e94\u7528\u7a0b\u5e8f\u4e5f\u9700\u8981\u591a\u4e2a\u90e8\u5206\u534f\u540c\u5de5\u4f5c\uff1aHTML\u6587\u4ef6\u3001CSS\u6837\u5f0f\u8868\u548c\u5e26\u6709\u4ee3\u7801\u7684JavaScript\u6587\u4ef6\u3002\u521b\u5efa\u8fd9\u4e9b\u5185\u5bb9\u5e76\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\u5e76\u4e0d\u662f\u521d\u5b66\u8005\u7684\u80fd\u529b\u6240\u80fd\u53ca\uff0c\u4f46\u8fd9\u4e5f\u4e0d\u662f\u4e00\u4e2a\u6e29\u548c\u7684\u5f00\u59cb-\u800c\u4e14\u50cfVS Code\u8fd9\u6837\u7684JavaScript\u7f16\u8f91\u5668\u5e76\u4e0d\u80fd\u63d0\u4f9b\u592a\u591a\u5e2e\u52a9\u3002\n\u8fd9\u5c31\u662fCodePen\u7684\u7528\u6b66\u4e4b\u5730\u3002\u6211\u9996\u5148\u5f00\u59cb\u4f7f\u7528CodePen\u5236\u4f5c\u51c6\u5907\u597d\u7684\u793a\u4f8b--\u521d\u5b66\u8005\u53ef\u4ee5\u4f7f\u7528\u7684\u9884\u5148\u914d\u7f6e\u597d\u7684\u9875\u9762\u3002\u6709\u65f6\uff0c\u51c6\u5907\u597d\u7684\u793a\u4f8b\u7684\u76ee\u6807\u662f\u66f4\u6539\u4ee3\u7801\u3001\u6dfb\u52a0\u529f\u80fd\u6216\u67e5\u627e\u95ee\u9898\u3002\u5176\u4ed6\u65f6\u5019\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u4fee\u8865\u5de5\u4f5c\u9875\u9762\u7684\u673a\u4f1a\u3002\n\u51c6\u5907\u597d\u7684\u793a\u4f8b\u63d0\u4f9b\u4e86\u4e24\u5168\u5176\u7f8e\u7684\u6548\u679c\u3002\u5b83\u4eec\u8ba9\u521d\u5b66\u8005\u5f00\u59cb\u5b66\u4e60\u771f\u6b63\u7684\u4ee3\u7801(\u800c\u4e0d\u662f\u73a9\u6a21\u62df\u7684\u79fb\u52a8\u4e4c\u9f9f\u6e38\u620f)\u3002\u4f46\u4ed6\u4eec\u4e0d\u4f1a\u8981\u6c42\u4ed6\u4eec\u81ea\u5df1\u642d\u5efa\u6240\u6709\u7684\u811a\u624b\u67b6\u3002\u4efb\u4f55\u5728\u524d\u4e00\u4e2a\u5343\u5e74\u957f\u5927\u7684\u4eba\uff0c\u4ece\u6742\u5fd7\u4e0a\u6284\u88ad\u5c0f\u7684Basic\u7a0b\u5e8f\uff0c\u90fd\u77e5\u9053\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u522b\u4eba\u7a0b\u5e8f\u7684\u6bcf\u4e00\u4e2a\u90e8\u5206\u5c31\u80fd\u4ece\u4e2d\u5b66\u5230\u4e00\u4e9b\u4e1c\u897f\u3002\n\u5982\u679c\u60a8\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7CodePen\uff0c\u5b83\u662f\u4f17\u591a\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684JavaScript\u6c99\u7bb1\u4e4b\u4e00\u3002\u4ed6\u4eec\u90fd\u5f88\u68d2\u3002\u4f46\u662fCodePen\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u7279\u522b\u53cb\u597d\u548c\u6613\u4e8e\u4f7f\u7528\u3002\n\u5728CodePen\u4e2d\uff0c\u6bcf\u4e2a\u7528\u6237\u90fd\u6709\u4e00\u4e2a\u4eea\u8868\u677f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5728\u5176\u4e2d\u4fdd\u5b58\u81ea\u5df1\u7684\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u6d3e\u751f\u5176\u4ed6\u4eba\u7684\u9879\u76ee\u6765\u5f00\u59cb\u6dfb\u52a0\u60a8\u81ea\u5df1\u7684\u5b9a\u5236\u3002\u8fd9\u4e2a\u793e\u533a\u5f88\u5927\uff0c\u800c\u4e14\u5f88\u652f\u6301\u3002\u4f46\u4e5f\u8bb8\u6700\u597d\u7684\u90e8\u5206\u662f\u754c\u9762\u3002\u7f16\u8f91\u5e72\u51c0\u6574\u6d01\u3002\u6ca1\u6709\u7f16\u8f91-\u4fdd\u5b58-\u5237\u65b0\u5468\u671f\uff0c\u56e0\u4e3a\u53ea\u8981\u60a8\u8fdb\u884c\u66f4\u6539\uff0c\u7f51\u9875\u9884\u89c8\u5c31\u4f1a\u66f4\u65b0\u3002\u800c\u4e14\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\uff0c\u4ee5\u4fbf\u53ea\u5173\u6ce8\u4e00\u4ef6\u4e8b(\u6bd4\u5982JavaScript\u4ee3\u7801)\uff0c\u6216\u8005\u540c\u65f6\u770b\u5230HTML\u3001CSS\u548cJavaScript\u3002\nCodePen\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u81ea\u52a8\u8fde\u63a5\u3002\u60a8\u7f16\u5199\u7684JavaScript\u51fd\u6570\u5c06\u7acb\u5373\u53ef\u7528\u4e8e\u60a8\u7684\u9875\u9762\uff0cCSS\u4f1a\u81ea\u52a8\u5e94\u7528\uff0c\u5e76\u4e14HTML\u53ea\u4fdd\u5b58\u9875\u9762\u5185\u5bb9(\u901a\u5e38\u4f4d\u4e8e&lt\uff1bbody&gt\uff1b\u90e8\u5206)\u3002\u5b83\u662f\u6b63\u5b97\u7684\uff0c\u4f46\u4ecd\u7136\u5f88\u8f7b\u3002\u9ad8\u7ea7\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u9644\u52a0\u9884\u8bbe\u7684JavaScript\u5e93\u548c\u6846\u67b6\uff0c\u5982Reaction\u3002\u521d\u5b66\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u7b80\u5355\u7684HTML\u6216CSS\u7ec3\u4e60\uff0c\u6216\u8005\u4e00\u6b21\u5b66\u4e60\u4e00\u4e2aJavaScript\u6982\u5ff5(\u5c31\u50cf\u5728\u8fd9\u4e9b\u6559\u7a0b\u4e2d\u4e00\u6837)\u3002\n\u4e3e\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u6837\u677f\u793a\u4f8b\uff0c\u6bd4\u5982\u5305\u542b\u4e00\u4e9b\u6587\u672c\u6846\u548c\u4e00\u4e2a\u7a7a\u7684\u9884\u8fde\u7ebfJavaScript\u51fd\u6570\u7684\u9875\u9762\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u7b80\u5355\u4f46\u4e4f\u5473\u7684\u8d22\u5bcc\u67dc\u5458\u542f\u52a8\u5668\u3002\n\u7f16\u5199\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u7528CSS\u683c\u5f0f\u5316\u5b83\uff0c\u7136\u540e\u8ba9\u5b83\u6210\u4e3a\u5979\u81ea\u5df1\u7684\u3002\u901a\u5e38\uff0c\u6211\u4f1a\u7ed9\u5979\u4e00\u4e9b\u5173\u4e8e\u7279\u5b9aJavaScript\u6982\u5ff5(\u5982\u6761\u4ef6\u903b\u8f91)\u7684\u80cc\u666f\u8bfb\u7269\uff0c\u5e76\u5c31\u4e0b\u4e00\u6b65\u8981\u5b9e\u73b0\u4ec0\u4e48\u63d0\u4f9b\u4e00\u4e9b\u5efa\u8bae\u3002\u5979\u5c06\u6700\u7ec8\u4ea7\u54c1\u5b58\u5165\u81ea\u5df1\u7684CodePen\u8d26\u6237\u3002\n\u4ee5\u4e0b\u662f\u6700\u597d\u7684\uff1a\u5b66\u4e60\u8005\u6709\u673a\u4f1a\u5236\u4f5c(\u6709\u65f6\u8fd8\u4f1a\u4fee\u590d)\u4e00\u4e2a\u771f\u6b63\u7684\u7a0b\u5e8f\u3002\u8fd9\u79cd\u521b\u9020\u6027\u7684\u673a\u4f1a\u662f\u6fc0\u52b1\u4eba\u7684\u3002\u901a\u5e38\uff0c\u5b83\u80dc\u8fc7\u8be6\u7ec6\u7684\u6559\u7a0b\uff0c\u6bd4\u5982\u5173\u4e8e\u53ef\u6c57\u5b66\u9662\u7684\u5176\u4ed6\u5f88\u597d\u7684\u89c6\u9891\u3002\n\u663e\u7136\uff0cCodePen\u7f16\u8f91\u5668\u6ca1\u6709\u63a5\u8fd1VS\u4ee3\u7801\u7f16\u8f91\u4f53\u9a8c\uff0c\u4f46\u5b83\u4ecd\u7136\u51fa\u4eba\u610f\u6599\u5730\u597d\u3002\u8d77\u521d\uff0c\u6211\u4e3a\u727a\u7272VS Code\u7684\u667a\u80fd\u611f\u77e5\u800c\u96be\u8fc7\uff0c\u4f46\u540e\u6765\u6211\u53d1\u73b0CodePen\u62e5\u6709\u4e0d\u9519\u7684\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\uff0c\u4f5c\u4e3a\u4e00\u79cd\u9009\u62e9\u52a0\u5165\u529f\u80fd\uff0c\u9690\u85cf\u5728\u5b83\u7684\u8bbe\u7f6e\u9875\u9762\u4e2d\uff1a\n\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6b21\u8981\u7684\u7ec6\u8282\uff0c\u4f46\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u81ea\u52a8\u5b8c\u6210\u786e\u5b9e\u505a\u4e86\u5927\u91cf\u7684\u5de5\u4f5c\u6765\u51cf\u5c11\u6469\u64e6\u3002\u4ed6\u4eec\u5f88\u5bb9\u6613\u82b1\u4e0a\u51e0\u4e2a\u5c0f\u65f6\u9057\u6f0f\u4e00\u4e9b\u5c0f\u9519\u8bef\uff0c\u6bd4\u5982JavaScript\u5173\u952e\u5b57\u5927\u5199\u4e0d\u6b63\u786e-\u4f8b\u5982\uff0c\u7f16\u5199Document.getElementById()\u800c\u4e0d\u662fDocent.getElementById()\u3002\nCodePen\u73af\u5883\u4e2d\u6700\u5927\u7684\u727a\u7272\u662f\u7f3a\u5c11\u8c03\u8bd5\u5668\u3002\u5355\u6b65\u6267\u884c\u5faa\u73af\u548c\u6761\u4ef6\u903b\u8f91\u4f1a\u5728\u521d\u5b66\u8005\u4e2d\u89e6\u53d1\u6d1e\u5bdf\u529b\u7684\u95ea\u73b0\uff0c\u5982\u679c\u60a8\u4e0d\u80fd\u770b\u5230\u4ee3\u7801\u5728CodePen\u4e2d\u6267\u884c\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u8111\u529b\u5de5\u4f5c\u8981\u505a\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u503e\u5411\u4e8e\u4f7f\u7528\u8f83\u5c0f\u7684CodePen\u793a\u4f8b\u3002\u5f53\u5b66\u4e60\u8005\u51c6\u5907\u597d\u8fc7\u6e21\u5230\u66f4\u6df1\u5165\u7684\u7f16\u7801\u65f6\uff0c\u76f8\u5bf9\u5e73\u7a33\u5730\u8fc7\u6e21\u5230VS\u4ee3\u7801\u6216\u53e6\u4e00\u4e2aIDE\u7684\u6b22\u8fce\u6000\u62b1\u4e2d\u3002\n\u6709\u4e86\u4e09\u4e2a\u5973\u513f\uff0c\u6211\u6709\u673a\u4f1a\u5c1d\u8bd5\u4e86\u5f88\u591a\u5b66\u4f1a\u7f16\u7a0b\u7684\u5b9e\u9a8c\uff0c\u800cCodePen\u662f\u6211\u76ee\u524d\u6700\u559c\u6b22\u7684\u3002\u6211\u8ba1\u5212\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u53d1\u5e03\u4e00\u4e9b\u6211\u4eec\u4f7f\u7528\u7684\u6a21\u5757\u7ec3\u4e60\u3002\u540c\u65f6\uff0c\u5982\u679c\u60a8\u627e\u5230\u4e86\u9002\u5408\u5b69\u5b50\u548c\u5b8c\u5168\u521d\u5b66\u8005\u7684\u5b8c\u7f8e\u7f16\u7801\u7a7a\u95f4\uff0c\u8bf7\u7559\u4e0b\u8bc4\u8bba\uff01\n\u4f60\u53ef\u4ee5\u5728https://codepen.io\u4e0a\u8bd5\u7528codePen\u3002\u5982\u679c\u60a8\u6709\u5174\u8da3\u4e86\u89e3\u66f4\u591a\u6559\u5b69\u5b50\u7f16\u7a0b\u7684\u9009\u62e9\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6d41\u7a0b\u56fe\u3002\u8ba2\u9605Young Coder\u65f6\u4e8b\u901a\u8baf\uff0c\u6bcf\u6708\u53d1\u9001\u4e00\u6b21\u7535\u5b50\u90ae\u4ef6\uff0c\u4e86\u89e3\u6211\u4eec\u6700\u597d\u7684\u6280\u672f\u62a5\u9053\u3002", "note_en": "If you\u2019re a regular reader of this space, you know about my somewhat controversial opinion that JavaScript is a  great first language for kids learning to code. It\u2019s not because JavaScript is a great teaching language (it most certainly isn\u2019t). It\u2019s because the platform is ubiquitous \u2014 on every operating system, every browser, and almost every electronic device that\u2019s more complicated than a toaster.\n This wide reach makes it effortless for a beginner to build a program with JavaScript and share it with friends. Unlike the rest of recorded computing history, there\u2019s no downloading, installing, or configuring required. And it doesn\u2019t hurt that JavaScript uses a curly-braced similar syntax to many other professional languages, like Java and C#. That means the effort you spend learning JavaScript syntax is never wasted.\n  But there are some stumbling blocks. One obstacle is the programming environment. If you\u2019re a beginner learning to code, the best starting point is an IDE that fuses together the language and the editing tool. Think of something like Visual Basic or Scratch, where there\u2019s a seamless experience that stretches from from writing your first line of code to debugging your last. A good IDE suggests keywords, catches mistakes, and makes it easy to see what you\u2019ve done. It lets you step through your code while it runs, one statement at a time \u2014 not just to catch errors, but also so you can learn how code executes. For a beginner, these details make the difference between an experience that\u2019s cryptic and confusing and one that just  flows.\n Unfortunately, there\u2019s plenty of friction when you\u2019re writing JavaScript code. Yes, you can use my favorite code editor,  VS Code, and (with only a little trouble), set up its decent  Chrome debugger. But the coding experience isn\u2019t quite beginner friendly. The editor is packed with features, the configuration model is a learning project all on its own, and there are plenty of ways to go wrong.\n The complexity of JavaScript IDEs is compounded by the fact that the first step in JavaScript is steep. Even a pure JavaScript application involves a combination of parts working together: an HTML file, a CSS style sheet, and a JavaScript file with code. Creating these and wiring them up together isn\u2019t beyond the abilities of a beginner, but it isn\u2019t a gentle start either \u2014 and JavaScript editors like VS Code don\u2019t offer much to help you out.\n That\u2019s where  CodePen comes into the picture. I first started using CodePen to make  prepared examples \u2014 pre-configured pages that beginners can play with. Sometimes the goal of a prepared example is to change the code, add a feature, or find a problem. Other times, it\u2019s just a chance to tinker with a working page.\n  Prepared examples offer the best of both worlds. They let beginners start learning  real code (not play a simulated move-the-turtle game). But they don\u2019t ask them to set up all the scaffolding themselves. Anyone who grew up in the previous millennium, copying small BASIC programs out of magazines, knows that you don\u2019t need to understand every part of someone else\u2019s program to learn something from it.\n  If you haven\u2019t used CodePen before, it\u2019s one of many browser-based JavaScript sandboxes. They\u2019re all good. But CodePen is particularly friendly and easy to use for beginners.\n In CodePen, every user gets a dashboard where they can save their own examples, and you can easily fork someone else\u2019s project to start adding your own customizations. The community is huge and supportive. But perhaps the nicest part is the interface. The editor is clean and uncluttered. There\u2019s no edit-save-refresh cycle, because the web page preview updates whenever you make a change. And you can easily resize your windows to focus on just one thing (like the JavaScript code) or to see HTML, CSS, and JavaScript all at once.\n  Everything in CodePen is automatically connected. The JavaScript functions you write are immediately available to your page, the CSS is applied automatically, and the HTML holds the page content only (what normally goes in the  &lt;body&gt; section). It\u2019s authentic, but still lightweight. Advanced users can easily attach preset JavaScript libraries and frameworks, like React. Beginners can focus on easy HTML or CSS exercises, or learn one JavaScript concept at a time (like in  these  tutorials).\n  Take a very simple boilerplate example, like a page with some text boxes and an empty, pre-wired JavaScript function. For example, this simple but boring  Fortune Teller starter.\n Write more code, format it with CSS, and make it her own. Usually, I give her a bit of background reading about a particular JavaScript concept (like conditional logic) and offer some suggestions about what to implement next. She saves the final product it in her own CodePen account.\n Here\u2019s what\u2019s best: learners get the chance to make (and sometimes fix) a real program. That chance to be creative is motivating. Often, it beats stepping through a detailed tutorial, like the otherwise excellent videos on Khan Academy.\n  Obviously, the CodePen editor doesn\u2019t come close to the VS Code editing experience, but it\u2019s still surprisingly good. At first, I was sad to sacrifice VS Code\u2019s IntelliSense, but then I found that CodePen has decent autocomplete as an opt-in ability, buried in its settings page:\n  It seems like a minor detail, but autocomplete does serious work reducing friction for new learners. They can easily spend hours missing minor mistakes like incorrectly capitalized JavaScript keywords \u2014 for example, writing  document.getElementByID() instead of  document.getElementById().\n The biggest sacrifice in the CodePen environment is the lack of a debugger. Stepping through loops and conditional logic triggers flashes of insight in new learners, and there\u2019s a lot more mental work to do if you can\u2019t watch your code execute in CodePen. For this reason, I tend to keep CodePen examples small. When a learner is ready to graduate to more in-depth coding, it\u2019s a relatively smooth transition into the welcoming arms of VS Code or another IDE.\n With three daughters, I\u2019ve had a chance to try plenty of learn-to-code experiments, and CodePen is my current favorite. I\u2019m planning to release some of the modular exercises we use in the near future. In the meantime, drop a comment if you\u2019ve found your own perfect coding space for kids and complete beginners!\n  You can try out CodePen at   https://codepen.io . If you\u2019re interested in seeing more options for teaching kids to code, check out our   flowchart . And for a once-a-month email with our best tech stories, subscribe to the   Young Coder newsletter .", "posttime": "2020-05-31 13:48:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,\u5b69\u5b50,perfect,javascript", "title": "CodePen\u662f\u5b69\u5b50\u4eec\u5b66\u4e60\u7f16\u7a0b\u7684\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u5730\u65b9", "title_en": "CodePen Is a Nearly Perfect Place for Kids to Learn to Code", "transed": 1, "url": "https://medium.com/young-coder/codepen-is-a-nearly-perfect-place-for-kids-to-learn-to-code-ed0a855d6fdd", "via": "", "real_tags": ["\u7f16\u7a0b", "\u5b69\u5b50", "perfect"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004493, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u6587\u65e8\u5728\u9610\u660eAmstrad CP\u4eff\u771f\u5668\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u8ba9\u60a8\u4e86\u89e3\u5b83\u4eec\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u5b83\u4e3b\u8981\u96c6\u4e2d\u5728CPE\uff0c\u8fd9\u662f\u6211\u6700\u4e86\u89e3\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u6211\u5199\u7684\u3002(\u8fd9\u662fCPE.doc\u6587\u4ef6\u4e2d\u7f3a\u5c11\u7684\u6280\u672f\u4fe1\u606f\u90e8\u5206.)\u3002\u4f46\u4f60\u4e5f\u4f1a\u53d1\u73b0\u4e00\u4e9b\u5173\u4e8eCPCEMU\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u662f\u6211\u4ece\u4e0e\u5176\u4f5c\u8005\u9a6c\u5c14\u79d1\u00b7\u7ef4\u601d(Marco Vieth)\u7684\u4fe1\u4ef6\u4ea4\u6d41\u4e2d\u4e86\u89e3\u5230\u7684\u3002\u76ee\u524d\u6709(\u5e94\u8be5\u662f\uff1f)\u3002\u53e6\u5916\u4e24\u4e2aCPC\u6a21\u62df\u5668\u662f\u53ef\u7528\u7684\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u6b63\u5728\u5f00\u53d1\u4e2d(\u5b9e\u9645\u4e0a\uff0c\u76f8\u5f53\u591a\uff01)\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u5173\u4e8e\u8fd9\u4e9b\u7684\u4fe1\u606f\u3002\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8be6\u7ec6\u63cf\u8ff0CPC\u89c4\u8303\uff0c\u56e0\u4e3a\u6709\u5176\u4ed6\u66f4\u597d\u7684\u6587\u6863\u53ef\u4ee5\u505a\u8fd9\u4ef6\u4e8b\u3002(\u53c2\u89c1\u672c\u7f51\u7ad9\u7684CPC\u6307\u5357)\uff0c\u4f46\u6211\u5c06\u4ecb\u7ecd\u786c\u4ef6\u7684\u57fa\u672c\u529f\u80fd\uff0c\u5076\u5c14\uff0c\u672c\u6587\u4e5f\u4f1a\u6d89\u53caCPC\u4ee5\u5916\u7684\u5176\u4ed6\u7cfb\u7edf\u3002\u5728\u5199\u8fd9\u7bc7\u6587\u7ae0\u65f6\uff0c\u6211\u53ea\u6709\u4e00\u4e9b\u6211\u89c9\u5f97\u6709\u8da3\u7684\u4e1c\u897f\u4f5c\u4e3a\u6307\u5bfc\u3002\u6211\u5e0c\u671b\u4f60\u4e5f\u4f1a\u89c9\u5f97\u6709\u8da3\u3002\u672c\u6587\u6863\u53ef\u80fd\u53ef\u4ee5\u589e\u5f3a\u3002\u5982\u679c\u60a8\u77e5\u9053\u600e\u4e48\u505a\uff0c\u8bf7\u5c06mare&lt\uff1bcrx@pool.information atik.rwth-aachen.de&gt\uff1b\u90ae\u5bc4\u7ed9\u6211\u3002\u8fd9\u7bc7\u8bfe\u6587\u53ef\u80fd\u5305\u542b\u62fc\u5199\u548c\u8bed\u6cd5\u9519\u8bef\uff1b\u82f1\u8bed\u662f\u6211\u7684\u7b2c\u4e8c\u8bed\u8a00\u3002\u8bf7\u4e0d\u8981\u7406\u776c\u5b83\u4eec\uff0c\u8981\u4e0d\u5c31\u5bc4\u7ed9\u6211\uff0c\u5b83\u4eec\u4f1a\u88ab\u6539\u6b63\u7684\u3002\u8981\u5728\u5b8c\u5168\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf(\u8fd9\u91cc\u6211\u79f0\u4e4b\u4e3a\u4e3b\u673a\u7cfb\u7edf)\u4e0a\u4eff\u771f\u8ba1\u7b97\u673a\u7cfb\u7edf\u9700\u8981\u505a\u4e9b\u4ec0\u4e48\uff1f\u7b54\u6848\u76f8\u5f53\u7b80\u5355\uff1a\u53ea\u9700\u5411\u60a8\u6253\u7b97\u8fd0\u884c\u7684\u8f6f\u4ef6\u5047\u88c5\u8981\u4eff\u771f\u7684\u7cfb\u7edf\u7684\u6240\u6709\u786c\u4ef6\u90fd\u5b58\u5728\u5e76\u4e14\u6b63\u5e38\u5de5\u4f5c\u5373\u53ef\u3002\u6240\u6709\u786c\u4ef6\u90fd\u5305\u62ecCPU\u53ef\u80fd\u4f1a\u4e2d\u65ad\u7684\u4e00\u4e9b\u5b9a\u65f6\u5668\u4e2d\u65ad\u7684\u5185\u5b58\u7cfb\u7edf(\u8fd9\u4e9b\u5c5e\u4e8eCPU\uff0c\u4f46\u5728\u7f16\u5199\u4eff\u771f\u5668\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u5b83\u4eec\u6216\u591a\u6216\u5c11\u662f\u72ec\u7acb\u7684)\u3002\n\u5982\u679c\u8fd9\u4e9b\u8f6f\u4ef6\u7684\u884c\u4e3a\u4e0e\u539f\u59cb\u7cfb\u7edf\u4e00\u6837\uff0c\u90a3\u4e48\u5927\u591a\u6570\u8f6f\u4ef6\u90fd\u5e94\u8be5\u91cd\u65b0\u8fd0\u884c\u3002\u5982\u679c\u60a8\u613f\u610f\uff0c\u60a8\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u4e0d\u592a\u91cd\u8981\u7684\u529f\u80fd\uff0c\u5982\u58f0\u97f3\u652f\u6301\u3002\u5f53\u786c\u4ef6\u4eff\u771f\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u589e\u5f3a\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u4eff\u771f\u5668\u53d8\u5f97\u6bd4\u4eff\u771f\u7cfb\u7edf\u66f4\u597d\u3002(\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd9\u79cd\u4e8b\u4ece\u6765\u6ca1\u6709\u53d1\u751f\u8fc7\u3002\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u6240\u6709\u7684\u4eff\u771f\u5668\u90fd\u4e0d\u5982\u771f\u6b63\u7684\u4eff\u771f\u5668\u3002\u4e00\u4e9b\u91cd\u8981\u7684\u4e1c\u897f\uff0c\u7279\u522b\u662f\u56fe\u5f62\uff0c\u786e\u5b9e\u5f88\u96be\u6b63\u786e\u6a21\u62df\u3002)\u3002\u7a0d\u540e\u53ef\u80fd\u6dfb\u52a0\u7684\u5185\u5bb9\u5305\u62ec\uff1a\u91cd\u5199\u7cfb\u7edf\u8f6f\u4ef6(\u539f\u751f\u8f6f\u4ef6)\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u4eff\u771f\u3002\u8fd9\u5c31\u662f\u50cfWine\u8fd9\u6837\u7684WABI\u7684\u5168\u90e8\u5185\u5bb9\uff1a\u5b83\u4eec\u5b9e\u9645\u4e0a\u4e0d\u4eff\u771f\u786c\u4ef6\uff0c\u4f46\u63d0\u4f9b\u76f8\u540c\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u8ba9\u7a0b\u5e8f\u5728\u4eff\u771f\u5668\u4e0b\u8fd0\u884c\u3002\u9664\u4e86\u66ff\u6362\u78c1\u5e26\u6216\u78c1\u76d8I/O\u4f8b\u7a0b\u5916\uff0c\u6b64\u6280\u672f\u5c1a\u672a\u5728CPC\u4eff\u771f\u5668\u4e2d\u4f7f\u7528\u3002\u63d0\u4f9b&#34\uff1b\u5feb\u7167&#34\uff1b\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u968f\u65f6\u51bb\u7ed3\u7cfb\u7edf\u72b6\u6001\uff0c\u5e76\u5728\u4ee5\u540e\u7684\u67d0\u4e2a\u65f6\u95f4\u518d\u6b21\u52a0\u8f7d\u5b83\u3002\u8fd9\u53ef\u4ee5\u5728CPC\u6216C64\u8fd9\u6837\u7684\u7cfb\u7edf\u4e0a\u4f7f\u7528\u989d\u5916\u7684\u786c\u4ef6\u6765\u5b8c\u6210\uff0c\u4f46\u662f\u4f7f\u7528\u4eff\u771f\u5668\u5b9e\u9645\u4e0a\u8981\u5bb9\u6613\u5f97\u591a\u3002\u80fd\u591f\u540c\u65f6\u8fd0\u884c\u591a\u53f0\u8ba1\u7b97\u673a\u3002\u6709\u4e00\u4e2aC64\u4eff\u771f\u5668\u53ef\u4ee5\u540c\u65f6\u5177\u6709\u591a\u4e2aC64\u4eff\u771f\uff0c\u4f46\u8fd9\u4e9b\u4eff\u771f\u4e0d\u662f\u5e76\u884c\u6267\u884c\u7684\u3002\u5982\u679c\u60a8\u6b63\u5728\u4e3a\u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf\u7f16\u5199\u4ee3\u7801\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u4f46\u662fDOS\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u540c\u65f6\u5904\u7406\u591a\u4e2a\u4efb\u52a1\u3002\u6e29\u591a\u5179\u4e5f\u4e0d\u662f\u3002\n\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u5c06\u63cf\u8ff0\u6a21\u62df\u4e0a\u8ff0\u786c\u4ef6\u7684\u53ef\u80fd\u6027\u3002\u6211\u5047\u8bbe\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u90fd\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u3002\u5728\u5f53\u524d\u7cfb\u7edf\u4e0a\uff0c\u8fd9\u662f\u5b9e\u73b0\u6700\u5927\u901f\u5ea6\u6240\u5fc5\u9700\u7684\u3002\u5c06\u6765\uff0c\u5982\u679c\u6709\u4eba\u7528C\u8bed\u8a00\u7f16\u5199\u4e86\u4e00\u4e2a\u53ef\u79fb\u690d\u7684CPC\u4eff\u771f\u5668\uff0c\u5e76\u5728un*x(Linux\uff1f)\u4e0a\u7684X\u7a97\u53e3\u4e2d\u8fd0\u884c\uff0c\u90a3\u5c06\u662f\u4e00\u4ef6\u5f88\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u6709\u4e00\u4e2a\u540d\u4e3aX64\u7684X Window C64\u6a21\u62df\u5668\uff0c\u8fd0\u884c\u5f97\u76f8\u5f53\u597d\uff0c\u5c3d\u7ba1\u76ee\u524d\u5b83\u4e0d\u80fd\u7528\u4e8e\u5927\u591a\u6570\u6e38\u620f\u3002\u53e6\u5916\uff0c\u6211\u5047\u8bbe\u662f\u6807\u51c6\u7684PC\u786c\u4ef6\uff0c\u56e0\u4e3aCPE\u662f\u4e3a\u8fd0\u884cDOS\u7684PC\u7f16\u5199\u7684\u3002\u4e3a\u4ec0\u4e48\u8981\u4ece\u5185\u5b58\u7cfb\u7edf\u5f00\u59cb\u5462\uff1f\u56e0\u4e3a\u5b83\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u57fa\u672c\u7684\u3002\u5185\u5b58\u5e03\u5c40\u4e5f\u4f1a\u5f3a\u70c8\u5f71\u54cd\u4eff\u771f\u7684\u5176\u4ed6\u90e8\u5206\uff0c\u4f8b\u5982CPU\u548c\u89c6\u9891\u4eff\u771f\u3002\u8981\u4eff\u771f\u5177\u6709\u5185\u5b58\u6620\u5c04I/O(\u5916\u56f4\u82af\u7247\u54cd\u5e94\u67d0\u4e9b\u53d7\u9650\u533a\u57df\u4e2d\u7684\u5185\u5b58\u8bbf\u95ee)\u7684\u8ba1\u7b97\u673a(\u5982C64\u6216AMIGA)\uff0c\u60a8\u5fc5\u987b\u8003\u8651\u5982\u4f55\u5728\u6bcf\u6b21\u8bbf\u95ee\u65f6\u533a\u5206\u4e0d\u540c\u7684\u5185\u5b58\u533a\u57df\u3002\u57fa\u672c\u4e0a\uff0cCPC\u53ef\u4ee5\u8bbf\u95ee64K\u7684RAM\u3002\u8fd9\u662f\u7531\u5177\u670916\u4f4d\u5730\u5740\u603b\u7ebf\u7684Z80CPU\u65bd\u52a0\u7684\u9650\u5236\u3002\u4e0d\u5e78\u7684\u662f(\u5bf9\u4e8eCPC\u4eff\u771f\u5668\u7f16\u5199\u5668)\uff0c\u7279\u6b8a\u786c\u4ef6(\u5373\u95e8\u9635\u5217)\u5df2\u7ecf\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u514b\u670d\u4e86\u8fd9\u4e00\u9650\u5236\u3002\u5728\u4e5f\u6709Z80\u7684Spectrum\u4e0a\uff0c\u5b9e\u9645\u4e0a\u53ea\u80fd\u5bfb\u574064K(16K ROM\uff0c48K RAM)\uff0c\u8fd9\u4f7f\u5f97\u8fd9\u90e8\u5206\u4eff\u771f\u76f8\u5f53\u5bb9\u6613\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48Spectrum\u4eff\u771f\u5668\u5e94\u8be5\u6bd4CPC\u4eff\u771f\u5668\u66f4\u5feb\u7684\u539f\u56e0\uff0c\u5373\u4f7f\u4eff\u771f\u7684CPU\u662f\u76f8\u540c\u7684\u3002CPC\u4e2d\u53ef\u7528\u768464K\u5206\u4e3a4\u4e2a\u94f6\u884c\uff0c\u6bcf\u4e2a\u94f6\u884c16K\u3002\u5728\u6bcf\u4e2aCPC\u4e0a\uff0c\u4e0a\u90e8\u5b58\u50a8\u4f53\u548c\u4e0b\u90e8\u5b58\u50a8\u4f53\u53ef\u4ee5\u6620\u5c04\u4e3a\u5305\u542bROM\u800c\u4e0d\u662fRAM(\u5199\u5165\u9664\u5916\uff0c\u5199\u5165\u603b\u662f\u6307\u5411RAM)\u3002\u56e0\u6b64\uff0c\u4e00\u4e2aCP\u5177\u670964K\u7684RAM\u548c32K\u7684ROM\uff0c\u53ef\u4ee5\u4f7f\u8fdb\u7a0b\u53ef\u89c1", "note_en": "This text is intended to shed some light on the internals of Amstrad CPCemulators, giving you an idea about how they work. It focuses mostly on CPE,which I know best, since I wrote it. (This is the missing section &#34;Technicalinformation&#34; from the CPE .doc file...) But you will also find some informationabout CPCEMU that I have learned from exchanging letters with its author,Marco Vieth. There are currently (supposedly?) two other CPC emulatorsavailable, and more are being developed (quite a lot, actually!), but I haveless information about these.  I will not describe the CPC specs here in detail, since there are other,better documents available to do this. (See the CPC Guide at this WEB site).But I will describe the basic functionality of the hardware.Occasionally, this text will also deal with other systems than the CPC. Forwriting this, I only have as a guideline what seems interesting to me. Ihope you will find it interesting, too.  This document can probably be enhanced. If you have an idea how, please mail meat &lt; crux@pool.informatik.rwth-aachen.de&gt;.  This text may contain speeling and grammatical mistakes; English is mysecond language. Please, either ignore them or mail me and they&#39;ll becorrected.   What needs to be done to emulate a computer system on a completely differentone (which I will call the host system from here)?The answer is rather simple: Just pretend to the software you intend to runthat all the hardware of the system to be emulated is present and works asit should. &#34;All the hardware&#34; includes    the memory system the CPU possibly some timers interrupts (these belong to the CPU, but when writing an emulator, you will probably come to think of them as something more or less separate)\nIf these are behaving like on the original system, most software ought torun. If you like, you can add less important features like sound support. Whenthe hardware emulation is complete, you may want to enhance the program, sothat the emulator becomes even better than the emulated system. (As a matter offact, this has never happened. All emulators are in some respect inferior to&#34;the real thing&#34;. Some important things, especially graphics, are really hardto emulate correctly.) What might be added at a later stage includes:     rewrite the system software &#34;native&#34;, so that it can need not be emulated. This is what WABIs like Wine are all about: They do not in fact emulate hardware, but provide the same system calls for programs to run under the emulator. This technique has not been used in CPC emulators except for replacing the tape or disk I/O routines.  provide &#34;snapshots&#34;. Thus, you can freeze the system state at any point you like and load it again at some later time. This could be done with additional hardware on systems like the CPC or the C64, but with an emulator it is actually a lot easier.  be able to run multiple computers at the same time. There is a C64 emulator that can have more than one C64 emulation at the same time, but these are not executed in parallel. If you are writing for a multi-tasking OS, this issue is rather pointless. But DOS isn&#39;t multi-tasking very well. Neither is Windoze.\nThe following chapters will describe possibilities for emulating the hardwarementioned above. I assume throughout that assembly language is used. This isnecessary on current systems to achieve maximum speed. For the future, itwould be interesting if someone wrote a portable CPC emulator in C that runsin an X Window on Un*x (Linux?) There is an X Window C64 emulator calledX64, which runs reasonably well, although it can&#39;t be used for most gamescurrently. Also, I assume standard PC hardware, because CPE is written forPCs running DOS.   Why start with the memory system? Because it is fundamental in a certain way.The memory layout can strongly affect other parts of the emulation as well,for example the CPU and the video emulation. For emulating computers thathave memory-mapped I/O (the peripheral chips respond to memory accesses incertain restricted areas) like the C64 or the Amiga, you would have to thinkabout how to distinguish different areas of memory on each access.  Basically, a CPC can access 64K RAM. This is a restriction imposed by theZ80 CPU, which has a 16 bit address bus. Unfortunately (for CPC emulatorwriters) this restriction has been overcome to a certain degree by specialhardware (i.e. the Gate Array). On a Spectrum, which has a Z80 as well, only64K can in fact be addressed (16K ROM, 48K RAM) which makes that part of theemulation fairly easy. This is a good reason why Spectrum emulators ought tobe faster than CPC emulators, even though the emulated CPU is the same.  The 64K available in the CPC are split in 4 banks with 16K each. On everyCPC, the upper and the lower bank can be mapped to contain ROM instead ofRAM (except on writes, which are ALWAYS directed to the RAM). Thus, a CPChas 64K RAM and 32K ROM that can be made visible to the processor. On a CPC6128, the situation is made even more complicated by RAM-banking. There are 8RAM banks of which only four are visible at any time to the processor. Thesecan be exchanged, so that an invisible page becomes visible within the 64Kaddress range and another previously visible page becomes hidden. To makematters worse, the video chip ALWAYS accesses memory in the first fourbanks, even though they may be invisible to the processor.  ROM banking has to be done in any CPC emulator. If you don&#39;t need to emulatea 6128, you may forget about RAM banking for the moment. You can alwaysimplement it in a kludgy way by copying loads of memory whenever pages areexchanged, although this is highly inefficient.  In CPE, I first left out RAM banking and only implemented ROM banking. A 64Ksized area is reserved for RAM. (Luckily, an Intel CPU can access at leastTHAT much of memory in one block, or I would have shot myself at thispoint.) On a write access, data is stored there at the appropriate location. Nothing could be easier. On a read access, the upper two bits of the address are masked out and taken as an index to a table of segments. This table contains four entries, one for each 16K bank of memory. The data is then readfrom the appropriate offset in this segment.  With this, switching a ROM bank only involves rethinking this four wordarray and is therefore rather efficient. There is a penalty, though, foreach read access, because the emulator must first look up the correct segment.  The reverse applies to CPCEMU. Here, the whole system memory is stored in acontiguous 96K area. For reading and writing, two segment registers are setaside. These usually have different values, because different memory areasmay be visible for read and write accesses. Also, two 16 bit offsets are keptthat are added to any address before the memory access occurs. Take, forexample, the following diagram:   type base addresshighest address ROM 0x0000 lower ROM RAM 0xC000 RAM page 3 RAM 0x8000 RAM page 2 RAM 0x4000 RAM page 1 RAM 0x0000 RAM page 0 &lt;-write segmentlowest address ROM 0xC000 upper ROM &lt;-read segment\nWrite offset: 0x0000, read offset: 0x4000All writes are directed to the central block containing the RAM banks. Whenthe CPC is trying to read, say, from address 0xC000, first the read offsetis added to the address, giving a result of 0x0000. This means that the byteat the address 0x0000 in the read segment is read. Look it up in the diagramand you will see that this is the beginning of the upper ROM. The describedmemory map therefore corresponds to the state &#34;lower ROM disabled, upper ROMenabled&#34;: The CPU can still read the lower 48K RAM, but when reading from0xC000-0xFFFF, it accesses ROM.  If the banking were switched to the state &#34;only RAM enabled&#34;, write and readsegments/offsets would be set to the same values. All this requires verylittle overhead.  Unfortunately, it is sometimes necessary to exchange two 16K pages in the96K area. If you look at the above diagram, you will notice that you can&#39;tachieve that both ROMs are active at the same time. You will have toexchange the lowest RAM page with the lower ROM page to do this. In oldversions of CPCEMU, this was a problem, because memory had to be physicallycopied, and the BASIC emulation became quite slow. Now, the 96K area can bestored in EMS memory and the capabilities of EMM386 to modify the 386&#39;s RAMmappings quickly is used. Thus, RAM access needs hardly any overhead inCPCEMU, but bank switches are slower than in CPE (calling EMS functionstakes some time).  The last two updates to CPCEMU include a version that uses a different methodfor banking. I&#39;m not quite sure about how it&#39;s done, but here&#39;s my guess:Two 64K EMS frames are allocated (possible with EMS version 4.0, which isprovided by programs like EMM386). One is used as a segment for reading, andthe other one for writing. The emulator does not have to worry that amodification of RAM in the write page is not reflected in the read page: Ituses &#34;aliasing&#34;, which means that the same EMS page is present at twodifferent memory locations, so that the CPU sees the same block memory at twodifferent addresses. This can be done without a problem using the MMU of 386CPUs.   Currently, another CPC emulator for the PC is being developed by HermanDullink. This is still in beta stage, but it looks very promising. It alsoutilizes the advanced memory management features of a 386 CPU to achievebanking. It has its own DOS extender! Unfortunately, it therefore can&#39;tcoexist with EMM386 (or anything else that switches to V86 mode). Of course, ifyou can program the 386 MMU directly, you get an enormous speed (the authorsays it runs at full CPC speed on a 386SX-16). Unfortunately, I currently don&#39;thave more information about this.  A short note about RAM banking. In CPE, this is done by having two RAM areas.One is accessible by the Z80 CPU, the other one is a &#34;backup&#34; area where allthe invisible RAM is stored. RAM banking is then done by exchanging pagesbetween these two areas, either by copying which is as slow as one wouldimagine, or by using EMS, which is a little better. In CPCEMU, this is doneusing EMS as well and fits neatly with the system explained above.   The CPU used in all the CPCs (as well is in numerous other home computers atthat time, like the Spectrum) is a Zilog Z80.  How does a CPU work? It contains a little region of memory where variousimportant data is stored. These are the CPU&#39;s registers. When it runs, itreads machine instructions (&#34;opcodes&#34;) from a location in memory which is defined by the value of a special register called the program counter (PC). The instruction is decoded and an appropriate action is taken. (More complex CPUs have a special form of software called microcode within them that decodes the instruction. The Z80 does not have a microcode, all its functionality ishardwired. This leads to an interesting effect: Some opcodes that are notofficially documented produce interesting and potentially useful resultsnevertheless, just the results that &#34;should&#34; be there if these opcodes wereofficially documented. Some people say the Z80 was the most complexprocessor ever to be made without a microcode. But the M68k FAQ says thatthe latest 680x0 CPU, the 68060, has no microcode as well! Interesting, but back to the topic...) Some instructions that can occur involve     arithmetic instructions: additions, subtractions, on more complex CPUs multiplication and division as well. Not on the Z80. movement: transferring data from one place to another. logical instructions: logical AND, OR, NOT instructions which affect all bits in a register. Register contents can also be shifted or rotated bitwise in various ways. control instructions: branching from one point in a program to another by modifying the value of the PC input/output instructions: The Z80 does not do memory-mapped I/O as described in the previous section. Instead, it can transfer data from and to so-called ports with the IN and OUT instructions. This is used for communicating with all the peripheral chips.\nMany instructions affect the value of a special register called the flagregister. For example, load the value 255 in the A register and then add thevalue 42 to it. Since the A register is only 8 bit wide, it can only holdvalues between 0 and 255. So, you will get a result of 41 (it wraps around).The flag register will represent this by setting the &#34;carry&#34; flag which is(roughly speaking) the 9th bit of the result. There are also other flagslike the zero flag and the sign flag (all values with a set 8th bit arethought to be negative, and the sign flag is set accordingly).  Most CPUs (including the Z80) have a special register called the stackpointer. This register contains a memory address where certain data can bestored. When data is stored there, the stack pointer is decreased and pointsto another location to store data. When data is fetched from the stack, thestack pointer is increased again. This is (for example) used to executesubroutines: Before you jump to another point in a program, store theaddress where the subroutine should return on the stack. When the subroutineends, it executes the RET instruction that fetches this address from thestack and puts it in the PC.  The Z80 is an extension of the Intel 8080, and therefore can run all 8080software. For example, many CP/M programs available for the CPC are written for 8080 CPUs. The Z80 has a 16 bit address bus (as mentioned above) and an 8 bit data bus. It&#39;s a true 8 bit processor, although some of the 8 bit registers are grouped to 16 bit registers which can be used for arithmetics oraddressing memory. The PC and SP are 16 bit wide. The Z80 runs at 4 MHz.  It is amazing to see how similar the Z80 (or in fact the 8080) architectureis to the &#34;modern&#34; design found in a Pentium. For example, most registers are&#34;special purpose&#34; registers, whereas in almost any reasonable newer CPU youhave a large set of general purpose registers. The way a DOS program writtena couple of years ago uses a Pentium just the way it would use a Z80: it hasa privileged register called the accumulator that more operations can beperformed with than with the other registers, there is a &#34;loop counter&#34;register, the 16 bit registers are made of two 8 bit half registers whichcan be accessed independently, and both access only 64K at a time, which isa shame. Even the flag register has the same format! (This is in fact quitefortunate, since converting flag register contents is no fun thing, as youcan see if you look at the source code for the Amiga version of CPE).  How can you simulate all this in software? First, set aside some memory forthe registers. It is usually most efficient to use the processor registersof the emulating CPU to store the contents of the emulated CPUs registers.If you don&#39;t have enough (on the PC you don&#39;t) you&#39;ll have to store some ofthe less used registers in RAM. CPE stores the Z80 registers SP, IX, IY, Rand I in memory. I think this is true for CPCEMU also. Basically, you haveno choice on a PC. You probably want to have all the registers that are heavily used to be stored in registers as well, and then you have no spaceleft.  You can then write a central loop that fetches the next instruction,increments the PC, decodes the instruction and determines what to do. Itthen calls the appropriate handling routine for the opcode. When it hasexecuted the opcode, it returns to the central loop. This is astraightforward approach, and it is used in CPE. Decoding an instruction isdone by looking it up in a large table. Actually, it is not that large.Opcodes are 8 bit wide on the Z80, so you have 256 of them. Four of theseare only prefixes and need to read a sub-opcode which determines the type ofaction to be done. So, you have a table that contains pointers to about 700simulation routines (one for each opcode).  You then have to write all these simulation routines. The amount of work forthis can vary. It can be hard, if the emulated CPU is very different fromthe emulating CPU. Look at the Amiga CPE source code to see what I mean. Theflags are handled differently, some Z80 flags don&#39;t even exist on the 68000and you can&#39;t access the upper half of a 16 bit register on a 68000 withoutsome shifting, whereas you can do this on the Z80 without a problem. Emulatinga Z80 on an Intel based PC is much easier. You usually find the sameinstructions which affect the flags in the same way. You still make a lot ofsilly errors, though, if you have to write 700 such routines. You&#39;ll knowthere&#39;s a bug somewhere in the Z80 part if the 3D graphics in your favourite game look strangely &#34;melted&#34; :-)  The simple approach described above can be optimized in some ways. Firstoff, you probably don&#39;t want to jump back to a central loop after eachinstruction. You can simply append the code that fetches and decodesinstructions to each opcode simulation routine, since it is short. This isdone in both CPE and CPCEMU. CPCEMU does one more, rather clever optimization:All the instruction simulation routines (at least the first 256 which arethe most common) are aligned at 64 byte boundaries. So CPCEMU does not needa lookup table to determine the address to jump to, it can just multiply theopcode with 64 and jump there. I think this is the main reason for the 25%speed advantage that CPCEMU has over CPE. Unfortunately, my opcodesimulation routines are somewhat longer than those in CPCEMU, and a 128 bytealignment would cause a HUGE code segment, and since I hate segments, Idon&#39;t want to have too many of them...  A Z80 has only a limited number of opcodes, so you can hand-code all ofthese, and you probably want to if you need maximum speed. Other 8 bit CPUshave even less meaningful instructions (like the 6510 used in the C64), sothe same method can be used here. But what if you want to try to emulate aMC68000 which has thousands of instructions? The best thing is probably toimprove the opcode decoding part. The MC68000 has only about 56 differentinstructions. The enormous variety is produced by different addressing modesthat can be used with these instructions. You can move data from an addressto a data register, or to a place in memory, etc. There are a lot ofcombinations. So, you would probably want to have simulation routines forthe 56 instructions and special code that handles all the differentaddressing modes. Thus, a MC68000 emulator might even be about as short as a Z80 emulator (and much more easily debugged), although the CPU has morecapabilities.  A very interesting possibility to speed up the CPU emulation is to &#34;compile&#34;the Z80 instructions into native code that the Intel CPU can directlyexecute. I know one C64 emulator for the Amiga that comes with a specialtool that can do exactly this and achieves a very good speed by doing so,even on an Amiga 500. The difficulty is to distinguish code from data, andself-modifying code is pretty lethal.   This chapter is strongly related to the previous one. An interrupt moves theCPU into a state where it executes a special interrupt code that is storedat a well-defined location. Interrupts occur when external hardware signalsto the processor that it needs to be serviced. Unless the running programhas temporarily disabled the interrupts, the CPU reacts immediately.  In all computer systems, interrupts can occur for various reasons. In theCPC, the only source of an interrupt is a timer that runs at approximately300Hz (actually, it&#39;s not really a timer, but we&#39;ll forget about this fornow). Other computer systems raise interrupts when a key has been pressed ora character arrived at the serial port, or the sound card has finishedplaying a sample.  When the Z80 executes an interrupt, it usually pushes the current PC to thestack and starts execut\n......", "posttime": "2020-05-31 13:17:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amstrad,cpc", "title": "\u5982\u4f55\u7f16\u5199Amstrad CPC\u4eff\u771f\u5668", "title_en": "How to write an Amstrad CPC emulator", "transed": 1, "url": "http://www.irespa.eu/daan/lib/howtoCPCemu.htm", "via": "", "real_tags": ["amstrad", "cpc"]}, {"category": "", "categoryclass": "", "imagename": "99e858151989b8672c26909b52cbb308.png", "infoid": 1004492, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u6a21\u677f\u7684\u76ee\u7684\u662f\u8ba9Unity\u4e2d\u7684\u591a\u4eba\u6e38\u620f\u53d8\u5f97\u5c0f\u83dc\u4e00\u789f\uff0c\u7279\u522b\u662f\u9488\u5bf9MMORPG\u3002\u8be5\u6a21\u677f\u7531\u542f\u52a8\u5668\u3001Web\u670d\u52a1\u5668\u3001\u6e38\u620f\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u7ec4\u6210\u3002\u5176\u60f3\u6cd5\u662f\u7528\u6237\u52a0\u8f7d\u542f\u52a8\u5668\uff0c\u66f4\u65b0\u5ba2\u6237\u7aef\uff0c\u542f\u52a8\u5ba2\u6237\u7aef\uff0c\u901a\u8fc7Web\u670d\u52a1\u5668\u767b\u5f55\u5e10\u6237\uff0c\u7136\u540e\u8fde\u63a5\u5230\u6e38\u620f\u670d\u52a1\u5668\u3002\u8bf7\u4e0e\u6211\u8ba8\u8bba\u4e0d\u548c\u8c10(Valk#3277)\uff0c\u4ee5\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u60a8\u5982\u4f55\u4e3a\u8be5\u9879\u76ee\u505a\u51fa\u8d21\u732e\u7684\u4fe1\u606f\u3002\u5982\u679c\u60a8\u4e0d\u60f3\u7b49\u6211\u63a5\u53d7\u60a8\u7684\u597d\u53cb\u8bf7\u6c42\uff0c\u60a8\u53ef\u4ee5\u52a0\u5165\u6211\u7684\u5f02\u8bae\uff0c\u7136\u540e\u60a8\u5c31\u53ef\u4ee5\u5728\u6ca1\u6709\u597d\u53cb\u8bf7\u6c42\u7684\u60c5\u51b5\u4e0b\u5411\u6211\u53d1\u9001\u6d88\u606f\u3002", "note_en": "The purpose of this boilerplate is to make multiplayer in Unity a piece of cake, specifically for MMORPGs. The boilerplate consists of a launcher, a web server, a game server and a client. The idea is the user loads up the launcher, updates the client, launches the client, logs in to an account through the web server and then connects to the game server.               Please talk to me over Discord ( valk#3277) to learn more on how you can contribute to the project. If you don&#39;t want to wait for me to accept your friend request, you can join  my discord and then you&#39;ll be able to send me messages without a friend request.", "posttime": "2020-05-31 13:17:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,unity", "title": "Unity MMORPG\u6837\u677f-Unity\u4e2d\u7684\u591a\u4eba\u6e38\u620f\u53d8\u5f97\u8f7b\u677e", "title_en": "Unity MMORPG Boilerplate - Multiplayer in Unity Made Easy", "transed": 1, "url": "https://github.com/valkyrienyanko/Unity-MMORPG-Boilerplate", "via": "", "real_tags": ["\u6e38\u620f", "unity"]}, {"category": "", "categoryclass": "", "imagename": "ac5f9f642e22ec6aa5b2517f780059bf.png", "infoid": 1004491, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "BeeKeeper Studio\u662f\u4e00\u4e2a\u514d\u8d39\u7684\u5f00\u6e90SQL\u7f16\u8f91\u5668\u548c\u6570\u636e\u5e93\u7ba1\u7406\u5668\u3002BeeKeeper Studio\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u53ef\u7528\u4e8eLinux\u3001Mac\u548cWindows\u3002\n\u67e5\u8be2\u8fd0\u884c\u5386\u53f2\u8bb0\u5f55\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u627e\u52303\u5929\u524d\u5de5\u4f5c\u7684\u90a3\u4e2a\u67e5\u8be2\u3002\n\u6211\u4eec\u5bf9\u5176\u4ed6\u5f00\u6e90SQL\u7f16\u8f91\u5668\u548c\u6570\u636e\u5e93\u7ba1\u7406\u5458\u7684\u4e0d\u6ee1\u4e4b\u4e00\u662f\uff0c\u4ed6\u4eec\u5bf9\u529f\u80fd\u91c7\u53d6\u4e86\u53a8\u623f\u6d17\u624b\u6c60\u7684\u65b9\u5f0f\uff0c\u6dfb\u52a0\u4e86\u592a\u591a\u529f\u80fd\uff0c\u4ee5\u81f3\u4e8eUI\u53d8\u5f97\u6742\u4e71\u65e0\u7ae0\uff0c\u5f88\u96be\u5bfc\u822a\u3002\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u7f8e\u89c2\u7684\u3001\u5f00\u6e90\u7684SQL\u5de5\u4f5c\u53f0\uff0c\u65e2\u529f\u80fd\u5f3a\u5927\uff0c\u53c8\u6613\u4e8e\u4f7f\u7528\u3002\u6211\u4eec\u627e\u4e0d\u5230\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u521b\u5efa\u4e86\u5b83\uff01\n\u8bf7\u968f\u65f6\u63d0\u4ea4\u95ee\u9898\u3001\u6253\u5f00\u62c9\u5f0f\u8bf7\u6c42\u6216\u5bf9\u73b0\u6709\u95ee\u9898\u8fdb\u884c\u8bc4\u8bba\u5e76\u63d0\u4f9b\u53cd\u9988\u3002\n\u5efa\u7acb\u4e00\u4e2a\u5305\u5bb9\u548c\u6b22\u8fce\u7684\u793e\u533a\u5bf9\u6211\u4eec\u5f88\u91cd\u8981\uff0c\u6240\u4ee5\u8bf7\u60a8\u5728\u53c2\u4e0e\u9879\u76ee\u65f6\u9075\u5b88\u6211\u4eec\u7684\u884c\u4e3a\u51c6\u5219\u3002\n\u5982\u679c\u6ca1\u6709Sqlectron-core\uff0c\u517b\u8702\u4eba\u5de5\u4f5c\u5ba4\u5c31\u4e0d\u4f1a\u5b58\u5728\uff0cSqlectron\u9879\u76ee\u7684\u6838\u5fc3\u6570\u636e\u5e93(\u73b0\u5728\u6ca1\u6709\u7ef4\u62a4)\u3002BeeKeeper Studio\u6700\u521d\u662f\u8be5\u5b58\u50a8\u5e93\u7684\u4e00\u4e2a\u5b9e\u9a8c\u6027\u5206\u652f\u3002\u975e\u5e38\u611f\u8c22@maxcnunes\u548cSqlectron\u793e\u533a\u7684\u5176\u4ed6\u6210\u5458\u3002", "note_en": "Beekeeper Studio is a free and open source SQL editor and database manager. Beekeeper Studio is cross-platform, and available for Linux, Mac, and Windows.\n  Query run-history, so you can find that one query you got working 3 days ago\n One of our frustrations with other open-source SQL editors and database managers is that they take a &#39;kitchen sink&#39; approach to features, adding so many features that the UI becomes cluttered and hard to navigate. We wanted a good looking, open source SQL workbench that powerful, but also easy to use. We couldn&#39;t find one, so we created it!\n       Please feel free to file issues, open pull requests, or comment on existing issues with feedback.\n Building an inclusive and welcoming community is important to us, so please follow our code of conduct as you engage with the project.\n  Beekeeper Studio wouldn&#39;t exist without  Sqlectron-core, the core database libraries from the (now unmaintained) Sqlectron project. Beekeeper Studio started as an experimental fork of that repository. A big thanks to @maxcnunes and the rest of the Sqlectron community.", "posttime": "2020-05-31 13:16:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u636e\u5e93,\u514d\u8d39,\u5f00\u6e90,database,studio", "title": "BeeKeeper Studio\u662f\u4e00\u4e2a\u514d\u8d39\u7684\u5f00\u6e90SQL\u7f16\u8f91\u5668\u548c\u6570\u636e\u5e93\u7ba1\u7406\u5668", "title_en": "Beekeeper Studio is a free and open source SQL editor and database manager", "transed": 1, "url": "https://github.com/beekeeper-studio/beekeeper-studio", "via": "", "real_tags": ["\u6570\u636e\u5e93", "\u514d\u8d39", "\u5f00\u6e90", "database", "studio"]}, {"category": "", "categoryclass": "", "imagename": "9e8620325c069693721f557423639b55.jpg", "infoid": 1004490, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u534e\u76db\u987f-\u6bd5\u683c\u7f57\u822a\u7a7a\u822a\u5929\u516c\u53f8(Bigelow AerSpace)\u6210\u7acb\u4e8e20\u591a\u5e74\u524d\uff0c\u76ee\u7684\u662f\u5f00\u53d1\u5546\u4e1a\u592a\u7a7a\u6816\u606f\u5730\u3002\u8be5\u516c\u53f8\u4e8e3\u670823\u65e5\u89e3\u96c7\u4e86\u6240\u6709\u5458\u5de5\uff0c\u6b64\u4e3e\u81f3\u5c11\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u7531\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u9020\u6210\u7684\u3002\n\u636e\u719f\u6089\u516c\u53f8\u6d3b\u52a8\u7684\u6d88\u606f\u4eba\u58eb\u79f0\uff0c\u6bd5\u683c\u7f57\u822a\u7a7a\u822a\u5929\u516c\u53f8\u768468\u540d\u5458\u5de5\u88ab\u544a\u77e5\u5c06\u88ab\u88c1\u5458\uff0c\u7acb\u5373\u751f\u6548\u3002\u524d\u4e00\u5468\u53c8\u670920\u540d\u5458\u5de5\u88ab\u89e3\u96c7\u3002\n\u8fd9\u4e9b\u6d88\u606f\u4eba\u58eb\u79f0\uff0c\u603b\u90e8\u4f4d\u4e8e\u5185\u534e\u8fbe\u5dde\u5317\u62c9\u65af\u7ef4\u52a0\u65af\u7684\u8be5\u516c\u53f8\u6b63\u5728\u6682\u505c\u8fd0\u8425\uff0c\u56e0\u4e3a\u4e00\u4f4d\u4eba\u58eb\u79f0\u8fd9\u662f\u4e00\u573a\u5305\u62ec\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u5728\u5185\u7684\u201c\u5b8c\u7f8e\u98ce\u66b4\u201d\u30023\u670820\u65e5\uff0c\u5185\u534e\u8fbe\u5dde\u5dde\u957f\u53f2\u8482\u592b\u00b7\u897f\u7d22\u62c9\u514b(Steve Ssolak)\u7b7e\u7f72\u4e86\u4e00\u9879\u7d27\u6025\u6307\u4ee4\uff0c\u4e0b\u4ee4\u5173\u95ed\u6240\u6709\u201c\u4e0d\u5fc5\u8981\u7684\u201d\u4f01\u4e1a\u3002\n\u516c\u53f8\u53d1\u8a00\u4eba3\u670823\u65e5\u8bc1\u5b9e\uff0c\u7531\u4e8e\u5dde\u957f\u7684\u547d\u4ee4\uff0c\u516c\u53f8\u89e3\u96c7\u4e86\u6240\u6709\u5458\u5de5\uff0c\u5982\u679c\u7ee7\u7eed\u8425\u4e1a\uff0c\u516c\u53f8\u5c06\u9762\u4e34\u201c\u7f5a\u6b3e\u3001\u5904\u7f5a\u548c\u540a\u9500\u8425\u4e1a\u6267\u7167\u7684\u5a01\u80c1\u201d\u3002\u8fd9\u4f4d\u53d1\u8a00\u4eba\u8865\u5145\u8bf4\uff0c\u516c\u53f8\u8ba1\u5212\u5728\u7d27\u6025\u6307\u4ee4\u89e3\u9664\u540e\u91cd\u65b0\u62db\u8058\u5de5\u4eba\uff0c\u5c3d\u7ba1\u5176\u4ed6\u6d88\u606f\u6765\u6e90\u5c06\u88c1\u5458\u89e3\u8bfb\u4e3a\u6c38\u4e45\u6027\u63aa\u65bd\u3002\n\u5176\u4ed6\u5dde\u7684\u822a\u5929\u516c\u53f8\u4e00\u76f4\u80fd\u591f\u7ee7\u7eed\u8425\u4e1a\uff0c\u5c3d\u7ba1\u5bf9\u975e\u5fc5\u8981\u7684\u4e1a\u52a1\u4e5f\u6709\u7c7b\u4f3c\u7684\u9650\u5236\u3002\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\uff0c\u822a\u7a7a\u822a\u5929\u516c\u53f8\u5373\u4f7f\u5728\u201c\u5446\u5728\u5bb6\u91cc\u201d\u7684\u6307\u4ee4\u4e4b\u540e\u4e5f\u4f1a\u7ee7\u7eed\u8fd0\u8425\uff0c\u56e0\u4e3a\u8054\u90a6\u653f\u5e9c\u8ba4\u4e3a\u822a\u7a7a\u822a\u5929\u5236\u9020\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u884c\u4e1a\u3002\n\u6bd5\u683c\u7f57\u822a\u7a7a\u822a\u5929\u516c\u53f8\u7531\u7f57\u4f2f\u7279\u00b7\u6bd5\u683c\u7f57\u4e8e1999\u5e74\u521b\u7acb\uff0c\u4ed6\u8ba1\u5212\u5229\u7528\u81ea\u5df1\u5728\u623f\u5730\u4ea7\u884c\u4e1a\u8d5a\u5230\u7684\u8d22\u5bcc\u6765\u5f00\u53d1\u5546\u4e1a\u7a7a\u95f4\u7ad9\u3002\u5728NASA\u53d6\u6d88\u4e86\u4e00\u4e2a\u540d\u4e3aTransHab\u7684\u5f00\u53d1\u9879\u76ee\u540e\uff0c\u4ed6\u4eceNASA\u83b7\u5f97\u4e86\u4e00\u9879\u53ef\u6269\u5c55\u6a21\u5757\u6280\u672f\u7684\u8bb8\u53ef\u3002\n\u8be5\u516c\u53f8\u53d1\u5c04\u4e86\u4e24\u4e2a\u822a\u5929\u5668\u6765\u5c55\u793a\u53ef\u6269\u5c55\u6a21\u5757\u6280\u672f\uff1a2006\u5e74\u7684\u521b\u4e16\u7eaa1\u53f7\u548c2007\u5e74\u7684\u521b\u4e16\u7eaa2\u53f7\uff0c\u8fd9\u4e24\u4e2a\u822a\u5929\u5668\u90fd\u662f\u7528\u4fc4\u7f57\u65af\u7684\u7b2c\u8042\u4f2f\u706b\u7bad\u53d1\u5c04\u7684\u3002\u822a\u5929\u5668\u8bc1\u660e\u4e86\u6a21\u5757\u662f\u7a33\u5b9a\u7684\uff0c\u5e76\u4fdd\u6301\u4e86\u5927\u6c14\u538b\u3002\n2013\u5e74\uff0c\u8be5\u516c\u53f8\u83b7\u5f97\u4e86\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u7684\u5408\u540c\uff0c\u5efa\u9020\u4e00\u4e2a\u7c7b\u4f3c\u7684\u53ef\u6269\u5c55\u6a21\u5757\uff0c\u540d\u4e3a\u6bd5\u683c\u7f57\u53ef\u6269\u5c55\u6d3b\u52a8\u6a21\u5757(BEAM)\uff0c\u5e76\u5c06\u5176\u5b89\u88c5\u5728\u56fd\u9645\u7a7a\u95f4\u7ad9\u4e0a\u30022016\u5e744\u6708\uff0cBEAM\u6267\u884cSpaceX Dragon\u8d27\u8fd0\u4efb\u52a1\u98de\u5f80\u7a7a\u95f4\u7ad9\uff0c\u5e76\u4e8e\u6b21\u6708\u88ab\u5b89\u88c5\u5728\u7a7a\u95f4\u7ad9\u4e0a\u3002\u76f4\u5230\u4eca\u5929\uff0cBEAM\u4ecd\u7136\u4e0e\u56fd\u9645\u7a7a\u95f4\u7ad9\u76f8\u8fde\uff0c\u7528\u4e8e\u50a8\u5b58\u548c\u4e00\u4e9b\u989d\u5916\u7684\u6d4b\u8bd5\u3002\n\u6bd5\u683c\u7f57\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u8868\u793a\u6709\u5174\u8da3\u4f7f\u7528\u540d\u4e3aB330\u7684\u6a21\u5757\u5f00\u53d1\u5546\u4e1a\u7a7a\u95f4\u7ad9\uff0c\u4e4b\u6240\u4ee5\u8fd9\u6837\u547d\u540d\uff0c\u662f\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86330\u7acb\u65b9\u7c73\u7684\u5185\u90e8\u4f53\u79ef\u3002\u8be5\u516c\u53f8\u5c06\u56fd\u9645\u7a7a\u95f4\u7ad9\u89c6\u4e3a\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u8e0f\u811a\u77f3\uff0c\u5e76\u4e8e2016\u5e744\u6708\u5ba3\u5e03\u4e0e\u8054\u5408\u53d1\u5c04\u8054\u76df(United Launch Alliance)\u5408\u4f5c\uff0c\u4f7f\u7528ULA\u7684Atlas 5\u6700\u5feb\u4e8e2020\u5e74\u5411\u56fd\u9645\u7a7a\u95f4\u7ad9\u53d1\u5c04B330\u6a21\u5757\u3002\n\u65e9\u57282016\u5e74\uff0c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5c31\u8ba1\u5212\u5728\u56fd\u9645\u7a7a\u95f4\u7ad9\u4e0a\u4e3aB330\u8fd9\u6837\u7684\u6a21\u5757\u63d0\u4f9b\u4e00\u4e2a\u6e2f\u53e3\uff0c\u4f46\u76f4\u5230\u53bb\u5e746\u6708\uff0cNASA\u624d\u5ba3\u5e03\u5c06\u62db\u6807\u8fdb\u5165\u8be5\u6e2f\u53e3\u3002\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)1\u670827\u65e5\u5ba3\u5e03\uff0c\u5df2\u9009\u62e9Axiom Space\u5c06\u8be5\u7aef\u53e3\u7528\u4e8e\u4e00\u7cfb\u5217\u5546\u4e1a\u6a21\u5757\uff0c\u8be5\u516c\u53f8\u9884\u8ba1\u5c06\u4e8e2024\u5e74\u5e95\u5f00\u59cb\u5b89\u88c5\u8fd9\u4e9b\u6a21\u5757\u3002\n\u7f57\u4f2f\u7279\u00b7\u6bd5\u683c\u7f57(Robert Bigelow)\u57281\u670828\u65e5\u7684\u4e00\u6b21\u91c7\u8bbf\u4e2d\u8bf4\uff0c\u4ed6\u7684\u516c\u53f8\u51fa\u4e8e\u8d44\u91d1\u65b9\u9762\u7684\u8003\u8651\uff0c\u62d2\u7edd\u5411NASA\u63d0\u4ea4\u63d0\u6848\u3002\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u5728\u6bd4\u8d5b\u65f6\u8868\u793a\uff0c\u9884\u8ba1\u5c06\u63d0\u4f9b\u9ad8\u8fbe5.61\u4ebf\u7f8e\u5143\u7684\u8d44\u91d1\uff0c\u4ee5\u652f\u6301\u4e00\u4e2a\u5546\u4e1a\u56fd\u9645\u7a7a\u95f4\u7ad9\u6a21\u5757\uff0c\u4ee5\u53ca\u4e00\u4e2a\u81ea\u7531\u98de\u884c\u8bbe\u65bd\u7684\u5355\u72ec\u5f81\u96c6\u3002\u6bd5\u683c\u7f57\u8bf4\uff0c\u201c\u8fd9\u5bf9\u516c\u53f8\u7684\u8981\u6c42\u592a\u9ad8\u4e86\u201d\u3002\u201c\u6240\u4ee5\u6211\u4eec\u544a\u8bc9NASA\u6211\u4eec\u5fc5\u987b\u9000\u51fa\u3002\u201d\n\u867d\u7136Bigelow\u8868\u793a\uff0c\u4ed6\u7684\u516c\u53f8\u4ecd\u6709\u5174\u8da3\u7ee7\u7eed\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u7684\u5f81\u96c6\u6d3b\u52a8\uff0c\u4ee5\u652f\u6301\u4e00\u4e2a\u81ea\u7531\u98de\u884c\u7ad9\uff0c\u4f46\u4ed6\u8ba4\u4e3a\uff0cNASA\u9700\u8981\u63d0\u4f9b\u66f4\u591a\u7684\u8d22\u653f\u652f\u6301\uff0c\u624d\u80fd\u4f7f\u5176\u53ef\u884c\u3002\u4ed6\u8bf4\uff1a\u201c\u5728\u5404\u884c\u5404\u4e1a\u80fd\u591f\u81ea\u529b\u66f4\u751f\u4e4b\u524d\uff0c\u5fc5\u987b\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u63d0\u4f9b\u5927\u91cf\u7684\u653f\u5e9c\u8865\u8d34\u3002\u201d", "note_en": "WASHINGTON \u2014 Bigelow Aerospace, the company founded more than two decades ago to develop commercial space habitats, laid off all its employees March 23 in a move caused at least in part by the coronavirus pandemic.\n According to sources familiar with the company\u2019s activities, Bigelow Aerospace\u2019s 68 employees were informed that they were being laid off, effective immediately. An additional 20 employees were laid off the previous week.\n Those sources said that the company, based in North Las Vegas, Nevada, was halting operations because of what one person described as a \u201cperfect storm of problems\u201d that included the coronavirus pandemic. On March 20, Nevada Gov. Steve Sisolak signed an emergency directive ordering all \u201cnonessential\u201d businesses to close.\n  A company spokesperson confirmed March 23 that the company laid off all its employees because of the governor\u2019s order, and that it faced \u201cfines, penalties and threats of having our business license revoked\u201d if it remained open. The spokesperson added that the company planned to hire workers back once the emergency directive was lifted, although other sources interpreted the layoffs as a permanent measure.\n Space companies in other states have been able to stay open despite similar restrictions on nonessential businesses. In California, aerospace companies have continued operations even after \u201cstay at home\u201d directives because aerospace manufacturing is considered an essential industry by the federal government.\n Bigelow Aerospace was founded in 1999 by Robert Bigelow, who planned to use wealth he made in the real estate business to develop commercial space stations. He licensed an expandable module technology from NASA after the agency canceled a project called TransHab that had developed it.\n The company launched two spacecraft to demonstrate that expandable module technology: Genesis 1 in 2006 and Genesis 2 in 2007, both on Dnepr rockets from Russia. The spacecraft proved that the modules were stable and maintained air pressure.\n In 2013, the company secured a NASA contract to build a similar expandable module, called the Bigelow Expandable Activity Module (BEAM), and install it on the ISS. BEAM flew to the station on a SpaceX Dragon cargo mission in April 2016 and was installed on the station the following month.  BEAM remains attached to the ISS to this day, used for storage and some additional testing.\n Bigelow had long expressed an interest in developing commercial space stations using a module called the B330, so named because it offered 330 cubic meters of internal volume. The company saw the ISS as a steppingstone to that goal, and announced in April 2016  a partnership with United Launch Alliance to use ULA\u2019s Atlas 5 to launch a B330 module to the ISS as soon as 2020.\n While NASA was planning to offer a port on the ISS for a module like the B330 as far back as 2016, it was only last June that NASA announced it would solicit bids for access to that port. NASA announced Jan. 27  it had selected Axiom Space to use that port for a series of commercial modules that company expects to install starting in late 2024.\n Robert Bigelow said in a Jan. 28 interview that  his company declined to submit a proposal to NASA because of financing concerns. NASA, at the time of the competition, said it projected providing up to $561 million to support both a commercial ISS module as well as a separate solicitation for a free-flying facility. \u201cThat was asking just too much\u201d of the company, Bigelow said. \u201cSo we told NASA we had to bow out.\u201d\n While Bigelow said his company was still interested in pursuing the NASA solicitation for supporting a free-flying station, which the agency has yet to release, he argued NASA needed to offer more financial support to make it feasible. \u201cThere has to be substantial government subsidies for a period of time until industries can stand on their own feet,\u201d he said.", "posttime": "2020-05-31 13:16:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "aerospace", "title": "\u6bd5\u683c\u7f57\u822a\u7a7a\u822a\u5929\u516c\u53f8\u88c1\u5458", "title_en": "Bigelow Aerospace lays off entire workforce", "transed": 1, "url": "https://spacenews.com/bigelow-aerospace-lays-off-entire-workforce/", "via": "", "real_tags": ["aerospace"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004489, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\uff0c\u6211\u4eec\u5ba3\u5e03\u4e86Windows\u7248\u7684\u5305\u7ba1\u7406\u5668\u9884\u89c8\u7248\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u4e3a\u6211\u4eec\u7684\u5ba2\u6237\u548c\u793e\u533a\u63d0\u4f9b\u4e00\u4e2a\u4f1f\u5927\u7684\u4ea7\u54c1\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u80fd\u505a\u51fa\u8d21\u732e\u5e76\u83b7\u5f97\u8ba4\u53ef\u3002\u6211\u4eec\u6700\u4e0d\u60f3\u505a\u7684\u4e8b\u5c31\u662f\u758f\u8fdc\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u7684\u4efb\u4f55\u4eba\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u628a\u5b83\u6784\u5efa\u5728\u5f00\u653e\u7684GitHub\u4e0a\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u8d21\u732e\u81ea\u5df1\u7684\u529b\u91cf\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5929\u91cc\uff0c\u6211\u4eec\u4ece\u6211\u4eec\u7684\u793e\u533a\u4e2d\u503e\u542c\u548c\u5b66\u4e60\uff0c\u663e\u7136\u6211\u4eec\u6ca1\u6709\u8fbe\u5230\u8fd9\u4e2a\u76ee\u6807\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u5728Keivan\u548cAppGet\u4e0a\u6ca1\u6709\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u662f\u6211\u4eec\u6700\u4e0d\u60f3\u8981\u7684\u3002\n\u4f7f\u7528GitHub\u4f5c\u4e3a\u6211\u4eec\u5305\u7ba1\u7406\u5668\u7684\u57fa\u7840\u7684\u613f\u671b\u840c\u82bd\u4e86\uff0c\u6210\u4e3a\u4e86\u89e3\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u6784\u5efa\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u79cd\u65b9\u5f0f\u3002GitHub\u5141\u8bb8\u6211\u4eec\u62e5\u6709\u4e00\u4e2a\u5f00\u653e\u7684\u5b58\u50a8\u5e93\uff0c\u5e76\u63d0\u4f9b\u4e0eDevOps\u3001\u5e94\u7528\u7a0b\u5e8f\u53d1\u5e03\u7b49\u7ba1\u9053\u96c6\u6210\u7684\u65b9\u5f0f\u3002\n\u8fd9\u79cd\u57fa\u4e8eGitHub\u7684\u65b9\u6cd5\u5c06\u6211\u4eec\u5e26\u5230\u4e86AppGet\u548cKeivan\u3002\u53bb\u5e74\u590f\u5929\uff0c\u6211\u4eec\u4e0eKeivan\u8ba8\u8bba\u4e86\u5408\u4f5c\u4ea4\u4ed8Windows\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u7684\u6f5c\u5728\u673a\u4f1a\u3002\u5728\u8fd9\u4e9b\u5bf9\u8bdd\u4e2d\uff0cKeivan\u5bf9Windows\u8f6f\u4ef6\u5305\u7ba1\u7406\u4e16\u754c\u7684\u6d1e\u5bdf\u529b\u548c\u4ed6\u5e0c\u671b\u5728Windows\u4e0a\u83b7\u5f97\u51fa\u8272\u7684\u8f6f\u4ef6\u5305\u7ba1\u7406\u4f53\u9a8c\u7684\u613f\u671b\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86\u6df1\u523b\u7684\u5370\u8c61\u3002\nAppGet\u4e2d\u7684\u8bb8\u591a\u7279\u6027\u786e\u5b9e\u5e2e\u52a9\u6211\u4eec\u4e3aWinget\u627e\u5230\u4e86\u66f4\u597d\u7684\u4ea7\u54c1\u65b9\u5411\uff1a\n\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u811a\u672c-\u8fd9\u662f\u6211\u4eec\u5b8c\u5168\u540c\u610f\u7684\uff0c\u5e76\u4e14\u5728MSIX\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002\nGitHub\u5185\u4e30\u5bcc\u7684\u6e05\u5355\u5b9a\u4e49-\u5f00\u653e\u7684\u529b\u91cf\u4e0e\u5173\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u4e30\u5bcc\u58f0\u660e\u6027\u5143\u6570\u636e\u76f8\u7ed3\u5408\uff0c\u5bf9\u4e8e\u5b9e\u73b0\u76ee\u6807#1\u975e\u5e38\u91cd\u8981\u3002\n\u6211\u60f3\u501f\u6b64\u673a\u4f1a\u611f\u8c22\u51ef\u6587\u5bf9AppGet\u7684\u6df1\u601d\u719f\u8651\uff0c\u5e76\u4e0e\u6211\u4eec\u5408\u4f5c\u3002\u6211\u4eec\u5c06\u628a\u6211\u4eec\u7684\u670d\u52a1\u4ee3\u7801\u5f00\u6e90\u5230\u6211\u4eec\u5728GitHub\u4e0a\u7684Winget\u5b58\u50a8\u5e93\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0eKeivan\u548c\u5176\u4ed6\u4eba\u5408\u4f5c\uff0c\u5b9e\u73b0\u66f4\u597d\u7684Winget\u5b58\u50a8\u5e93\u5217\u8868\u670d\u52a1\u3002\n\u53bb\u5e74\u5728Build 2019\u4e0a\uff0c\u6211\u4eec\u9996\u6b21\u53d1\u5e03\u4e86Windows\u7ec8\u7aef\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4e0e\u793e\u533a\u5408\u4f5c\uff0c\u5728\u9759\u6b62\u7684\u540c\u65f6\u521b\u9020\u7f8e\u597d\u7684\u7ec8\u7aef\u4f53\u9a8c", "note_en": "Last week we  announced a package manager preview for Windows. Our goal is to provide a great product to our customers and community where everyone can contribute and receive recognition. The last thing that we want to do is alienate anyone in the process. That is why we are building it on GitHub in the open where everyone can contribute. Over the past couple of days we\u2019ve listened and learned from our community and clearly we did not live up to this goal. More specifically, we failed to live up to this with Keivan and AppGet. This was the last thing that we wanted.\n The desire to use GitHub as the basis for our package manager germinated as a way to lean into how developers are building their apps. GitHub allows us to have an open repository and a way to integrate with DevOps pipelines for app publishing etc.\n This GitHub based approach led us to AppGet and Keivan. We talked with Keivan last summer about potential opportunities to work together to deliver the Windows Package Manager. During those conversations we were impressed with Keivan\u2019s insights into the package management world on Windows and with his desire for there to be a great package management experience on Windows.\n There are a number of qualities in AppGet that really helped us get to a better product direction for WinGet:\n No scripts during install \u2013 something that we completely agreed with and don\u2019t allow with MSIX\n Rich manifest definition within GitHub \u2013 the power of being open combined with rich declarative meta data about the app is so important to meet goal #1\n I want to take this opportunity to thank Keivan for his thoughtful approach to AppGet and working with us. We will be open sourcing our service code into our our WinGet repository on GitHub so that we can work together with Keivan and others to enable a better WinGet repository listing service.\n Last year at Build 2019, we first announced the Windows Terminal. Since then, we have been working with the community to create a wonderful terminal experience while stil", "posttime": "2020-05-31 13:01:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b89\u88c5,install,windows", "title": "Winget\u5b89\u88c5\u5b66\u4e60", "title_en": "Winget Install Learning", "transed": 1, "url": "https://devblogs.microsoft.com/commandline/winget-install-learning/", "via": "", "real_tags": ["\u5b89\u88c5", "install", "windows"]}, {"category": "", "categoryclass": "", "imagename": "ccb2b6f6f12bd4b43a88a13ddb9ed4ff.jpg", "infoid": 1004488, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53e4\u7f57\u9a6c\u5230\u5e95\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff1f\u89c2\u770b\u8fd9\u90e8\u4ee5\u903c\u771f3D\u52a8\u753b\u4e3a\u7279\u8272\u7684\u53e4\u7f57\u9a6c\u91cd\u5efa\u4f5c\u54c1\uff0c\u53ef\u4ee5\u627e\u5230\u7b54\u6848\u3002\u8ba2\u9605\uff1ahttps://www.youtube.c.", "note_en": "What Did Ancient Rome Really Look Like? Watch this Ancient Rome reconstruction featuring realistic 3D animation to find out. Subscribe: https://www.youtube.c...", "posttime": "2020-05-31 12:44:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u5f71,\u53e4\u7f57\u9a6c,ancient,\u7279\u8272", "title": "\u53e4\u7f57\u9a6c\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff1f(\u7535\u5f71\u52a8\u753b)", "title_en": "What Did Ancient Rome Look Like? (Cinematic Animation)", "transed": 1, "url": "https://www.youtube.com/watch?v=5XxA4CX_Ip8&feature=share", "via": "", "real_tags": ["\u7535\u5f71", "\u53e4\u7f57\u9a6c", "ancient", "\u7279\u8272"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004487, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5b9e\u9a8c\u7684\u7ed3\u679c\uff0c\u5b83\u5c55\u793a\u4e86HTTPS Everywhere\u89c4\u5219\u5339\u914d\u7684\u5185\u5b58\u6548\u7387\u5982\u4f55\u63d0\u9ad84\u523010\u500d\uff0c\u5339\u914d\u5f15\u64ce\u7684\u521d\u59cb\u5316\u51cf\u5c11\u5230\u4e0d\u523025\u6beb\u79d2\uff0cHTTPS\u5347\u7ea7\u7684\u6267\u884c\u65f6\u95f4\u4e3a0.0029\u52300.0073\u6beb\u79d2\uff0c\u4f7f\u7528\u53d7\u73b0\u4ee3\u5e7f\u544a\u62e6\u622a\u5668\u542f\u53d1\u7684\u4e0d\u540c\u8bbe\u8ba1\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8eRust/WebAssembly\u7ec4\u5408(\u5373\u7eafJavaScript)\u3002\n\u514d\u8d23\u58f0\u660e\uff1a\u8fd9\u9879\u5de5\u4f5c\u4e0d\u662f\u4f5c\u4e3aHTTPS Everywhere\u9879\u76ee\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u7684\u3002\u5728\u8bd5\u9a8c\u89c4\u5219\u96c6\u5339\u914d\u65f6\uff0c\u6211\u7684\u76ee\u7684\u662f\u63a2\u7d22\u5b9e\u73b0\u9ad8\u6548\u5f15\u64ce\u5e76\u8bb0\u5f55\u6211\u7684\u53d1\u73b0\u7684\u65b0\u65b9\u6cd5\u3002\u5982\u679c\u8fd9\u4e9b\u60f3\u6cd5\u4e2d\u7684\u4e00\u4e9b\u88ab\u4e0a\u6e38\u4f7f\u7528\uff0c\u6211\u5f53\u7136\u4f1a\u5f88\u9ad8\u5174\u3002\n\u8fc7\u53bb\u51e0\u5e74\uff0cHTTPS\u7684\u91c7\u7528\u7387\u4e0d\u65ad\u63d0\u5347\uff0c2017\u5e74\u9996\u6b21\u8fbe\u523050%\u7684Web\u6d41\u91cf\uff0c2019\u5e74\u66f4\u662f\u9ad8\u8fbe80%\u3002\u7136\u800c\uff0c\u6839\u636eEFF\u7684\u8bf4\u6cd5\uff1a\u201c\u8bb8\u591a\u7f51\u7ad9(\u4ecd\u7136)\u5bf9HTTPS\u4e0a\u7684\u52a0\u5bc6\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u9650\u7684\u652f\u6301\uff0c\u4f46\u8fd9\u4f7f\u5f97\u5b83\u5f88\u96be\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ef\u80fd\u9ed8\u8ba4\u4f7f\u7528\u672a\u52a0\u5bc6\u7684HTTP\uff0c\u6216\u8005\u4f7f\u7528\u8fd4\u56de\u5230\u672a\u52a0\u5bc6\u7ad9\u70b9\u7684\u94fe\u63a5\u586b\u5145\u52a0\u5bc6\u7684\u9875\u9762\u3002\u201c\u3002\n\u4e3a\u6b64\uff0cEFF\u57282014\u5e74\u542f\u52a8\u4e86HTTPS Everywhere\u9879\u76ee\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d4f\u89c8\u5668\u6269\u5c55\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u81ea\u52a8\u5347\u7ea7\u5230HTTPS\u7684\u8fde\u63a5\u3002\n\u4e3a\u4e86\u786e\u5b9a\u4f55\u65f6\u5347\u7ea7\u662f\u53ef\u884c\u7684\uff0c\u6269\u5c55\u4f9d\u8d56\u4e8e\u89c4\u5219\u96c6\u6570\u636e\u5e93\uff0c\u8be5\u6570\u636e\u5e93\u5141\u8bb8\u5b83\u77e5\u9053\u7ed9\u5b9aURL\u662f\u5426\u652f\u6301HTTPS\u3002\u8fd9\u4e9b\u89c4\u5219\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u4ee5\u9650\u5236\u7834\u574f\u5e76\u6700\u5927\u9650\u5ea6\u5730\u6269\u5927\u8986\u76d6\u8303\u56f4\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u82b1\u4e86\u76f8\u5f53\u591a\u7684\u65f6\u95f4\u5728\u5185\u5bb9\u963b\u6b62\u7a0b\u5e8f\u4e0a-\u7279\u522b\u662f\u5728\u6027\u80fd\u65b9\u9762-\u6211\u4e00\u76f4\u5f88\u597d\u5947\u89c4\u5219\u5339\u914d\u903b\u8f91\u662f\u5982\u4f55\u5728\u4efb\u4f55\u5730\u65b9\u7684HTTPS\u4e2d\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u8fd9\u9879\u4efb\u52a1\u4e0e\u5e7f\u544a\u963b\u6b62\u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\u3002\u6700\u8fd1\uff0c\u6211\u65e0\u610f\u4e2d\u53d1\u73b0\u4e86\u4e24\u5f20\u7f5a\u5355\uff0c\u4e0a\u9762\u63d0\u5230\u4e86\u5185\u5b58\u4f7f\u7528\u7387\u9ad8\u548c\u6269\u5c55\u521d\u59cb\u5316\u6162\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u6211\u51b3\u5b9a\u4ed4\u7ec6\u770b\u770b\u3002\n\u9ad8\u5185\u5b58\u548c\u9ad8CPU\u4f7f\u7528\u7387\u662f\u6709\u95ee\u9898\u7684\uff0c\u539f\u56e0\u6709\u5f88\u591a\u3002\u7531\u4e8eHTTPS Everywhere\u8fd0\u884c\u5728\u5404\u79cd\u73af\u5883\u4e2d--\u5305\u62ec\u6f5c\u5728\u7684\u4f4e\u7aef\u624b\u673a--\u5373\u4f7f\u5728IO\u6027\u80fd\u6709\u9650\u3001CPU\u901f\u5ea6\u6162\u548c\u5185\u5b58\u5bb9\u91cf\u4f4e\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e5f\u5fc5\u987b\u8868\u73b0\u826f\u597d\u3002\u6b64\u5916\uff0cHTTPS\u5305\u542b\u5728ToR\u4e2d(\u5728\u53f0\u5f0f\u673a\u548c\u79fb\u52a8\u8bbe\u5907\u4e0a)\uff0c\u5f53\u5b89\u5168\u8bbe\u7f6e\u8fbe\u5230\u6700\u5927\u503c\u65f6\uff0c\u53ef\u4ee5\u7981\u7528JIT\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u964d\u4f4e\u6027\u80fd\u3002\u8fd8\u8981\u8003\u8651\u5230\uff0c\u5728\u52a0\u8f7d\u9875\u9762\u7684\u540c\u65f6\uff0c\u6d4f\u89c8\u5668\u7684\u8bb8\u591a\u7ec4\u4ef6\u90fd\u5728\u4e89\u593a\u8d44\u6e90\uff1a\u89e3\u6790HTML\u3001\u8bc4\u4f30JavaScript\u3001\u5448\u73b0\u9875\u9762\uff0c\u4f46\u4e5f\u4f1a\u4fdd\u62a4\u9690\u79c1\uff0c\u4f8b\u5982\u5e7f\u544a\u62e6\u622a\u5668\uff0c\u5f53\u7136\u8fd8\u6709\u65e0\u5904\u4e0d\u5728\u7684HTTPS\u3002\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u80fd\u8017(\u5c24\u5176\u662f\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a)\u4e0d\u5bb9\u5ffd\u89c6\uff1aCPU\u4f7f\u7528\u7387\u8d8a\u9ad8\uff0c\u610f\u5473\u7740\u7535\u6c60\u5bff\u547d\u8d8a\u77ed\u3002\n\u5728\u8fdb\u884c\u5b9e\u9a8c\u65f6\uff0c\u6211\u60f3\u77e5\u9053\u4f5c\u4e3a\u73b0\u4ee3\u5185\u5bb9\u62e6\u622a\u5668\u7684\u4e00\u90e8\u5206\u5b9e\u73b0\u7684\u4e00\u4e9b\u4f18\u5316\u5728\u4efb\u4f55\u5730\u65b9\u7684HTTPS\u4e2d\u662f\u5426\u90fd\u6709\u610f\u4e49\uff0c\u4ee5\u53ca\u5b83\u4eec\u662f\u5426\u4f1a\u63d0\u9ad8\u6574\u4f53\u6548\u7387\u3002\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4ecb\u7ecd\u4e86\u8fd9\u6b21\u8c03\u67e5\u7684\u4e00\u4e9b\u7ed3\u679c\u3002\u63d0\u51fa\u4e86\u4ee5\u4e0b\u8d21\u732e\u548c\u6539\u8fdb\uff1a\n\u4e00\u79cd\u65b0\u7684\u8bbe\u8ba1\u7075\u611f\u6765\u81ea\u4e8e\u5728\u6700\u5feb\u7684\u5185\u5bb9\u62e6\u622a\u5668\u4e2d\u5b9e\u73b0\u7684\u4e00\u4e9b\u76f8\u540c\u7684\u4f18\u5316\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u6548\u7387\uff1a\u5927\u7ea64.7MB\u7684\u5185\u5b58\u4f7f\u7528(\u6bd4\u5f53\u524dHTTPS Everywhere Rust/WebAssembly\u5b9e\u73b0\u51cf\u5c11\u4e864\u500d)\uff0c\u5728\u4f7f\u7528\u5b9e\u9a8c\u6027\u7684\u7edf\u8ba1\u6570\u636e\u7ed3\u6784\u65f6\u8fdb\u4e00\u6b65\u51cf\u5c11\u5230\u5927\u7ea62.1MB(\u6709\u60f3\u6cd5\u53ef\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c11)\u3002\n\u67e5\u8be2\u5177\u6709\u8981\u5347\u7ea7\u5230HTTPS\u7684URL\u7684\u89c4\u5219\u96c6\u65f6\u7684\u51b3\u7b56\u65f6\u95f4\u4ecb\u4e8e0.0029\u52300.0073\u6beb\u79d2\u4e4b\u95f4\u3002\n\u5e8f\u5217\u5316\u5230\u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u548c\u4ece\u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u53cd\u5e8f\u5217\u5316\u53ea\u9700\u4e0d\u523025\u6beb\u79d2\uff0c\u5e76\u4e14\u6ca1\u6709\u5185\u5b58\u526f\u672c\u3002\n\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7d27\u51d1\u7684\u7d22\u5f15\u6570\u636e\u7ed3\u6784\uff0c\u5141\u8bb8\u9ad8\u6548\u5730\u68c0\u7d22\u53ef\u80fd\u5e94\u7528\u4e8e\u7ed9\u5b9a\u8f93\u5165URL\u7684\u4e00\u5c0f\u90e8\u5206\u89c4\u5219\u3002\n\u53d7SMAZ\u542f\u53d1\u7684\u5185\u7f6e\u5c0f\u5b57\u7b26\u4e32\u538b\u7f29\u5b9e\u73b0\uff0c\u53ef\u51cf\u5c11\u9ad8\u8fbe60%\u7684\u5185\u5b58\u4f7f\u7528\u91cf\u3002\n\u4e00\u79cd\u5b9e\u9a8c\u6027\u7684\u7edf\u8ba1\u6570\u636e\u7ed3\u6784\uff0c\u5141\u8bb8\u5728\u4e0d\u592a\u53ef\u80fd\u53d1\u751f\u51b2\u7a81\u7684\u98ce\u9669\u4e0b\u4f7f\u7528\u66f4\u4f4e\u7684\u5185\u5b58\u3002\n\u5728\u6df1\u5165\u7814\u7a76\u5339\u914d\u5f15\u64ce\u7684\u8bbe\u8ba1\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u7b80\u8981\u63cf\u8ff0\u4e00\u4e0bHTTPS Everwhere\u89c4\u5219\u96c6\u3002\n\u89c4\u5219\u6570\u636e\u5e93\u7531\u6570\u5343\u4e2a\u89c4\u5219\u96c6(\u76ee\u524d\u7ea6\u4e3a25k)\u7ec4\u6210\u3002\u6bcf\u4e2a\u89c4\u5219\u96c6\u90fd\u662f\u4e00\u4e2aXML\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u5c06\u4e00\u4e2a\u57df\u6216\u4e00\u7ec4\u57df\u5347\u7ea7\u5230HTTPS\u7684\u8bf7\u6c42\u7684\u4fe1\u606f(\u4f8b\u5982\uff0c\u5bf9\u4e8e\u50cfBitly\u8fd9\u6837\u7684\u7ec4\u7ec7)\u3002\u8be5\u6587\u4ef6\u53ef\u4ee5\u5305\u542b\u4ee5\u4e0b\u5b9e\u4f53\uff1a\n\u76ee\u6807-\u5b9a\u4e49\u6b64\u89c4\u5219\u96c6\u7684\u76ee\u6807\u57df(\u4f8b\u5982example.com)\u3002\u5b83\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\uff0c\u65e2\u53ef\u4ee5\u9488\u5bf9\u6240\u6709\u5b50\u57df\uff0c\u4e5f\u53ef\u4ee5\u9488\u5bf9\u591a\u4e2a\u9876\u7ea7\u57df\u3002\n\u6392\u9664-\u662f\u5141\u8bb8\u963b\u6b62\u67d0\u4e9b\u7279\u5b9a\u57df\u6216URL\u5347\u7ea7\u5230HTTPS\u7684\u6b63\u5219\u8868\u8fbe\u5f0f(\u4f8b\u5982\uff0c\u4e3a\u4e86\u9632\u6b62\u7834\u574f)\u3002\n\u89c4\u5219-\u5b9a\u4e49\u5982\u4f55\u5c06\u4e0d\u5b89\u5168\u8bf7\u6c42\u4ece\u4e0d\u5b89\u5168\u5347\u7ea7\u5230\u5b89\u5168(\u5373\uff0c\u5b83\u4eec\u5bf9URL\u91cd\u5199\u903b\u8f91\u8fdb\u884c\u7f16\u7801)\u3002\u5b83\u4eec\u5b9a\u4e49\u4e86\u8f93\u5165URL\u5e94\u8be5\u5339\u914d\u7684From\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u4e0e\u63cf\u8ff0\u5347\u7ea7\u540e\u7684URL\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u7684to\u5c5e\u6027\u76f8\u5173\u8054\u3002\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7b80\u5355\u5730\u5c06^http\uff1a\u8f6c\u6362\u4e3ahttps\uff1a\u3002\n\u5b89\u5168Cookie-\u53ef\u9009\u5730\u5b9a\u4e49\u662f\u5426\u4e5f\u5e94\u4f7f\u7528\u5f3a\u5316\u6807\u5fd7\u4fdd\u62a4\u6765\u81ea\u67d0\u4e2a\u76ee\u6807\u57df\u7684Cookie\u3002\n\u5728\u7ed9\u5b9a\u4e00\u7ec4\u89c4\u5219\u96c6\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4e0d\u5b89\u5168\u8bf7\u6c42\u5347\u7ea7\u4e3a\u5b89\u5168\u8bf7\u6c42\u53d6\u51b3\u4e8e\u4ee5\u4e0b\u6b65\u9aa4\uff1a\n\u5982\u679c\u6309\u7167\u524d\u9762\u7684\u6b65\u9aa4\u627e\u5230\u5339\u914d\u89c4\u5219\uff0c\u5219\u4f7f\u7528\u6b64\u89c4\u5219\u5b9a\u4e49\u7684\u91cd\u5199\u903b\u8f91\u5c06URL\u91cd\u5199\u4e3a\u5b89\u5168\u7248\u672c\u3002\u6709\u5173\u5339\u914d\u89c4\u5219\u96c6\u7684\u786e\u5207\u8bed\u4e49\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u5b98\u65b9\u6587\u6863\u7684\u6b64\u9875\u3002\n\u7f16\u5199\u5339\u914d\u7b97\u6cd5\u7684\u7b80\u5355\u65b9\u6cd5\u662f\u8fed\u4ee3\u68c0\u67e5\u6bcf\u4e2a\u8f93\u5165URL\u7684\u6240\u6709\u89c4\u5219\u96c6\uff0c\u68c0\u67e5\u5b83\u4eec\u7684\u76ee\u6807\u3001\u6392\u9664\u548c\u89c4\u5219\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u4e3a\u6b62\u3002\u8fd9\u4e0d\u4f1a\u975e\u5e38\u6709\u6548\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d(\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u8fd9\u4e0d\u662fHTTPS\u65e0\u5904\u4e0d\u5728\u7684\u65b9\u6cd5\uff0c\u6211\u63cf\u8ff0\u5b83\u53ea\u662f\u4e3a\u4e86\u83b7\u5f97\u6700\u5e7c\u7a1a\u7684\u89e3\u51b3\u65b9\u6848\u7684\u611f\u89c9)\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5bf9\u65b0\u5339\u914d\u5f15\u64ce\u7684\u901f\u5ea6\u548c\u5185\u5b58\u6548\u7387\u505a\u51fa\u8d21\u732e\u7684\u4e00\u4e9b\u6700\u91cd\u8981\u7684\u60f3\u6cd5\u3002\u9996\u5148\uff0c\u6211\u5c06\u4ecb\u7ecd\u4e2d\u592e\u7d22\u5f15\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5141\u8bb8\u5927\u5e45\u51cf\u5c11\u67e5\u627e\u76f8\u5173\u89c4\u5219\u96c6\u6240\u9700\u7684\u5de5\u4f5c\u91cf\u3002\u5176\u6b21\uff0c\u6211\u5c06\u5e26\u60a8\u4e86\u89e3\u5982\u4f55\u4ee5\u975e\u5e38\u7d27\u51d1\u7684\u65b9\u5f0f\u5c06\u6b64\u7d22\u5f15\u8868\u793a\u4e3a\u5355\u7c7b\u578b\u6570\u7ec4\u3002\u7b2c\u4e09\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u901a\u8fc7\u5b9e\u73b0\u6b64\u7d27\u51d1\u7d22\u5f15\u7684\u5185\u7f6e\u5b57\u7b26\u4e32\u538b\u7f29\u529f\u80fd\u6765\u8fdb\u4e00\u6b65\u51cf\u5c11\u5185\u5b58\u4f7f\u7528\u3002\u6700\u540e\uff0c\u6211\u5c06\u7b80\u8981\u63cf\u8ff0\u4f7f\u7528TRIE\u6570\u636e\u7ed3\u6784\u548c\u57fa\u4e8e\u6563\u5217\u7684\u5b9e\u9a8c\u6027\u6982\u7387\u6570\u636e\u7ed3\u6784\u6765\u51cf\u5c0f\u7d22\u5f15\u5927\u5c0f\u7684\u53e6\u5916\u4e24\u79cd\u5c1d\u8bd5\u3002\n\u6211\u4eec\u4e0d\u662f\u8fed\u4ee3\u6bcf\u4e2a\u8f93\u5165URL\u7684\u6240\u6709\u89c4\u5219\u96c6\uff0c\u800c\u662f\u5e0c\u671b\u5feb\u901f\u8bc6\u522b\u5c06\u6839\u636e\u8f93\u5165URL\u8fdb\u884c\u8bc4\u4f30\u7684\u4e00\u5c0f\u90e8\u5206\u5019\u9009\u8005\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u6211\u4eec\u4f9d\u8d56\u53cd\u5411\u7d22\u5f15\uff0c\u8be5\u7d22\u5f15\u5c06\u76ee\u6807\u3001\u6392\u9664\u548c\u89c4\u5219\u5206\u7ec4\u5230\u7531\u5b83\u4eec\u5305\u542b\u7684\u516c\u5171\u5b50\u5b57\u7b26\u4e32(\u6216\u4ee4\u724c)\u7d22\u5f15\u7684\u6876\u4e2d\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u5728URL\u4e2d\u627e\u5230\u7684\u4ee4\u724c\u67e5\u8be2\u7d22\u5f15\u6765\u6536\u96c6\u7ed9\u5b9aURL\u7684\u5019\u9009\u8005\u3002\u56e0\u6b64\uff0c\u4fdd\u8bc1\u68c0\u7d22\u5230\u7684\u6bcf\u4e2a\u5019\u9009\u4e0e\u8be5URL\u81f3\u5c11\u5171\u4eab\u4e00\u4e2a\u516c\u5171\u5b50\u5b57\u7b26\u4e32\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u6781\u5927\u5730\u51cf\u5c11\u4e86\u505a\u51fa\u51b3\u5b9a\u6240\u9700\u7684\u5de5\u4f5c\u91cf\u3002\u6b64\u6280\u672f\u7528\u4f5c\u5185\u5bb9\u62e6\u622a\u5668\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u6807\u8bc6\u6307\u793a\u5e94\u8be5\u53d6\u6d88\u7f51\u7edc\u8bf7\u6c42\u7684\u8fc7\u6ee4\u5668\u5217\u8868\u3002\n\u6211\u4eec\u4e3a\u76ee\u6807\u3001\u6392\u9664\u3001\u89c4\u5219\u548c\u5b89\u5168cookie\u521b\u5efa\u5355\u72ec\u7684\u7d22\u5f15\u3002\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e3a\u6bcf\u4e2aURL\u68c0\u7d22\u7684\u5019\u9009\u8005\u7684\u6570\u91cf\uff0c\u6211\u4eec\u786e\u4fdd\u6bcf\u4e2a\u76ee\u6807\u548c\u5b89\u5168Cookie\u90fd\u4f7f\u7528\u5176\u6700\u7a00\u6709\u7684\u4ee4\u724c\u8fdb\u884c\u7d22\u5f15\uff0c\u800c\u6392\u9664\u9879\u548c\u89c4\u5219\u4ec5\u4f7f\u7528\u5b83\u4eec\u6240\u5c5e\u7684\u89c4\u5219\u96c6\u7684ID\u8fdb\u884c\u7d22\u5f15\u3002\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u7d22\u5f15\u90fd\u662f\u4f7f\u7528\u4ee5\u4e0b\u7b97\u6cd5\u521b\u5efa\u7684\uff1a\n\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\\w+(\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26)\u8fdb\u884c\u6807\u8bb0\uff0c\u6216\u8005\u5c06\u89c4\u5219\u96c6ID\u7528\u4f5c\u6807\u8bb0\u3002\u4f8b\u5982\uff0c\u76ee\u6807example.com\u5c06\u88ab\u6807\u8bb0\u4e3a[&#39\uff1bexample&39\uff1b\uff0c&#39\uff1bcom&#39\uff1b]\u3002\n\u6211\u4eec\u4f7f\u7528\u5168\u5c40\u8ba1\u6570\u5668\u8ddf\u8e2a\u6bcf\u4e2a\u4ee4\u724c\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u5143\u7d20\u9009\u62e9\u6700\u597d\u7684(\u5373\u6700\u5c11\u770b\u5230\u7684)\u4ee4\u724c\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u53cd\u5411\u7d22\u5f15\u4e2d\u7684\u5173\u952e\u5b57\u3002\n\u56e0\u6b64\uff0c\u7d22\u5f15\u7684\u5927\u591a\u6570\u5b58\u50a8\u6876\u5c06\u5305\u542b\u5355\u4e2a\u5143\u7d20(\u8fd9\u610f\u5473\u7740\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u4ee4\u724c\u6765\u7d22\u5f15\u8be5\u5143\u7d20)\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u6b64\u6280\u672f\u5e26\u6765\u7684\u8c03\u5ea6\u529f\u80fd\uff0c\u8bf7\u8003\u8651\u901a\u8fc7\u5c06\u5305\u542b\u6765\u81ea\u6700\u6d41\u884c\u7684\u57df\u768424\u4e07\u4e2aURL\u7684\u6570\u636e\u96c6\u4e0eHTTPS Everywhere\u89c4\u5219\u96c6\u8fdb\u884c\u5339\u914d\u800c\u6536\u96c6\u7684\u4ee5\u4e0b\u7edf\u8ba1\u6570\u636e\uff1a\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f51\u5740\uff0c\u5019\u9009\u76ee\u6807\u8bc4\u4f30\u7684\u4e2d\u4f4d\u6570\u662f\uff1a7\u4e2a--\u603b\u5171163k\uff1b\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5e73\u5747\u53ea\u9700\u8981\u67e5\u770b\u6240\u6709\u76ee\u6807\u76840.004%\u3002\u5728\u8fd9\u4e9b\u76ee\u6807\u4e2d\uff0c\u5927\u591a\u6570\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u67e5\u627e\u4e00\u6b21\uff0c\u56e0\u4e3a\u6211\u4eec\u7ecf\u5e38\u4ece\u540c\u4e00\u4e2a\u89c4\u5219\u96c6\u4e2d\u83b7\u5f97\u591a\u4e2a\u5019\u9009\u8005\u3002\u901a\u8fc7\u8ddf\u8e2a\u6211\u4eec\u5df2\u7ecf\u5728\u8003\u8651\u7684\u89c4\u5219\u96c6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bc4\u4f30\u7ed9\u5b9a\u89c4\u5219\u96c6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u76ee\u6807\u3002\u9700\u8981\u8fdb\u884c\u5b57\u7b26\u4e32\u6bd4\u8f83\u7684\u5019\u9009\u76ee\u6807\u7684\u4e2d\u4f4d\u6570\u662f\uff1a5\u3002\n\u8003\u8651\u7684\u89c4\u5219\u96c6\u7684\u4e2d\u4f4d\u6570\u4e3a\uff1a1\uff0c\u5728\u7ed9\u5b9a\u57df\u88ab\u591a\u4e2a\u89c4\u5219\u96c6\u4f5c\u4e3a\u76ee\u6807\u7684\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u503c\u4e3a\uff1a2(\u603b\u517125k)\u3002\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u89c4\u5219\u96c6\uff0c\u6211\u4eec\u68c0\u7d22\u4e00\u4e2a\u7ec4\u5408\u6392\u9664(\u6240\u6709\u6b63\u5219\u8868\u8fbe\u5f0f\u805a\u5408\u4e3a\u4e00\u4e2a\uff0c\u5e76\u4f7f\u7528|\u5b57\u7b26\u8fde\u63a5)\uff0c\u4ece\u800c\u4ea7\u751f\u4e00\u4e2a\u6216\u4e24\u4e2aRegExp\u8ba1\u7b97(\u6765\u81ea\u6240\u8003\u8651\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u89c4\u5219\u96c6)\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u68c0\u67e5\u5c1a\u672a\u6392\u9664\u7684\u6bcf\u4e2a\u89c4\u5219\u96c6\u4e2d\u7684\u89c4\u5219\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\u3002\u8003\u8651\u7684\u89c4\u5219\u7684\u4e2d\u4f4d\u6570\u662f2\u3002\n\u6b64\u56fe\u63cf\u8ff0\u4e86\u6839\u636e\u89c4\u5219\u96c6\u7684\u6700\u65b0\u5feb\u7167\u5c06\u8bf7\u6c42\u91cd\u5199\u5230HTTPS\u6240\u9700\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u8be5\u5feb\u7167\u662f\u6839\u636e\u4e0a\u8ff024\u4e07\u4e2aURL\u7684\u6570\u636e\u96c6\u8fdb\u884c\u8bc4\u4f30\u7684\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u6d4b\u91cf\u7981\u7528\u4e86HTTPS Everywhere\u7684\u5185\u90e8\u7f13\u5b58\uff0c\u4ee5\u4fbf\u4ec5\u8003\u8651\u5f15\u64ce\u7684\u539f\u59cb\u901f\u5ea6\u3002\n\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0cRust/WebAssembly\u7248\u672c\u6bd4JavaScript\u5b9e\u73b0\u6162\u3002\u867d\u7136\u4e24\u8005\u90fd\u5f88\u5feb\uff0c\u56e0\u4e3a\u5373\u4f7f\u662f\u201c\u6700\u6162\u201d\u7684\u7ed3\u679c\u5e73\u5747\u4e5f\u53ea\u67090.028\u6beb\u79d2\u3002\u5f88\u53ef\u80fd\u662f\u5c06\u6570\u636e\u4eceJavaScript\u4f20\u8f93\u5230WebAssembly\u7684\u5f00\u9500\u5bfc\u81f4\u4e86\u8fd9\u4e2a\u7ed3\u679c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u770b\u5230\u6211\u4eec\u7684\u53cd\u5411\u7d22\u5f15\u5b9e\u73b0\u6bd4\u4e24\u8005\u90fd\u5feb\uff0c\u5e73\u5747\u65f6\u95f4\u57280.0046\u52300.0073\u6beb\u79d2\u4e4b\u95f4\u3002\u6ce8\u610f\uff0c\u5728Node.js\u4e2d\u8fd0\u884c\u76f8\u540c\u7684\u57fa\u51c6\u6d4b\u8bd5\u4f1a\u5bfc\u81f4\u66f4\u5feb\u7684\u51b3\u7b56\u65f6\u95f4\uff0c\u4e3a0.0029\u6beb\u79d2-\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u6d4f\u89c8\u5668\u5bf9\u57fa\u51c6\u6d4b\u8bd5\u4e0d\u592a\u53cb\u597d\uff0c\u56e0\u4e3a\u8bb8\u591a\u7ec4\u4ef6\u53ef\u80fd\u4f1a\u7ade\u4e89cpu\u8d44\u6e90\uff0c\u4f46\u8fd9\u53ea\u662f\u6211\u7684\u731c\u6d4b\u3002\n\u867d\u7136\u4e0a\u4e00\u8282\u4e2d\u63cf\u8ff0\u7684\u7d22\u5f15\u6280\u672f\u5927\u5927\u52a0\u5feb\u4e86\u5339\u914d\u901f\u5ea6\uff0c\u4f46\u5b83\u5728\u5185\u5b58\u4f7f\u7528\u548c\u521d\u59cb\u5316\u65f6\u95f4\u65b9\u9762\u5e76\u4e0d\u662f\u6700\u4f18\u7684\u3002\u5982\u679c\u7d22\u5f15\u8868\u793a\u4e3aMap\uff0c\u8fd9\u610f\u5473\u7740\u5728\u6bcf\u6b21\u521d\u59cb\u5316\u65f6(\u5f53\u6269\u5c55\u542f\u52a8\u65f6)\uff0c\u6211\u4eec\u9700\u8981\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u521b\u5efa\u7d22\u5f15(\u4f7f\u7528\u539f\u59cbXML\u89c4\u5219\u96c6\u6216\u5176JSON\u7248\u672c)\uff0c\u6216\u8005\u4eceMap\u7684\u6587\u672c\u8868\u793a(\u5373\u4ece\u7f13\u5b58)\u52a0\u8f7d\u5b83\uff0c\u5c31\u50cf\u952e\u3001\u503c\u5bf9\u6570\u7ec4\u4e00\u6837\u3002\n\u76f8\u53cd\uff0c\u4e0a\u9762\u63cf\u8ff0\u7684\u53cd\u5411\u7d22\u5f15\u88ab\u5b9e\u73b0\u4e3a\u5b58\u50a8\u5728\u5355\u4e2aUint8Array(\u7c7b\u578b\u5316\u6570\u7ec4)\u4e2d\u7684\u7d27\u51d1\u4e8c\u8fdb\u5236\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u6570\u636e\u4ee5\u5141\u8bb8\u9ad8\u6548\u67e5\u627e\u7684\u65b9\u5f0f\u7ec4\u7ec7\u3002\u5185\u5b58\u4e2d\u7684\u76ee\u6807\u3001\u6392\u9664\u3001\u89c4\u5219\u548c\u5b89\u5168cookie\u5b9e\u4f8b\uff0c\u4ee5\u53ca\u5339\u914d\u8f93\u5165URL\u548c\u57df\u6240\u9700\u7684RegExp\u5b9e\u4f8b\uff0c\u53ea\u6709\u5728\u5b83\u4eec\u6709\u673a\u4f1a\u5339\u914d\u65f6\u624d\u4f1a\u5ef6\u8fdf\u52a0\u8f7d\uff0c\u5e76\u4ece\u5b58\u50a8\u5728\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u53cd\u5411\u7d22\u5f15\u3002\u8fd9\u4e9b\u5b9e\u4f8b\u8fd8\u53ef\u4ee5(\u53ef\u9009\u5730)\u7f13\u5b58\u5230Map\u4e2d\uff0c\u4ee5\u4fbf\u540e\u7eed\u67e5\u627e\u4e0d\u9700\u8981\u547d\u4e2d\u4e8c\u8fdb\u5236\u7d22\u5f15(\u6bd4Map.get\u7a0d\u5fae\u6162\u4e00\u70b9)\u3002\n\u7531\u4e8e\u5b9e\u9645\u8003\u8651\u7684\u89c4\u5219\u96c6\u7684\u6570\u91cf\u6216\u591a\u6216\u5c11\u4e0e\u7528\u6237\u5728\u6d4f\u89c8\u4f1a\u8bdd\u671f\u95f4\u8bbf\u95ee\u7684\u552f\u4e00\u57df\u7684\u6570\u91cf\u6210\u6b63\u6bd4\uff0c\u56e0\u6b64\u7f13\u5b58\u673a\u5236\u6240\u9700\u7684\u989d\u5916\u5b58\u50a8\u5668\u4f7f\u7528\u91cf\u76f8\u5f53\u5c0f\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u201c\u4f7f\u7528\u7c7b\u578b\u5316\u6570\u7ec4\u8fdb\u884c\u4f4e\u7ea7\u64cd\u4f5c\u201d\u4e00\u8282\u4e2d\u7ed9\u51fa\u4e86\u66f4\u591a\u5b9e\u73b0\u7ec6\u8282\u3002\u8981\u603b\u7ed3\u6b64\u6570\u636e\u7ed3\u6784\u7684\u4f18\u52bf\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u5b83\u5141\u8bb8\u5c06\u6240\u6709\u89c4\u5219\u96c6\u7f16\u7801\u6210\u975e\u5e38\u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u5b58\u50a8\u5728\u5355\u4e2aUint8Array\u4e2d\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u8fd9\u79cd\u5f15\u64ce\u7684\u6269\u5c55\u7684\u603b\u5185\u5b58\u4f7f\u7528\u91cf\u662f\u76f8\u5f53\u53ef\u9884\u6d4b\u7684\uff0c\u5e76\u4e14\u63a5\u8fd1\u6b64\u7c7b\u578b\u5316\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u975e\u5e38\u9ad8\u6548\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5728\u6b64Uint8Array\u5b9e\u4f8b\u4e0a\u76f4\u63a5\u6267\u884c\u67e5\u627e\uff0c\u800c\u65e0\u9700\u9996\u5148\u5c06\u6570\u636e\u590d\u5236\u5230\u66f4\u65b9\u4fbf\u7684\u6570\u636e\u7ed3\u6784(\u5982Map)\u4e2d\u3002\u56e0\u6b64\uff0c\u5e8f\u5217\u5316\u5728\u4e8e\u672c\u5730\u5b58\u50a8\u76f8\u540c\u7c7b\u578b\u7684\u6570\u7ec4(\u4f8b\u5982\uff0c\u5728IndexedDB\u4e2d)\uff0c\u800c\u53cd\u5e8f\u5217\u5316\u5728\u4e8e\u8bfb\u56de\u5b83\u3002\n\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u521b\u5efa\u4e00\u6b21\uff0c\u7136\u540e\u6258\u7ba1\u5728CDN\u4e0a\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5b83\uff0c\u8fdb\u4e00\u6b65\u52a0\u5feb\u521d\u59cb\u5316\u901f\u5ea6(\u4ee5\u4e0b\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f7f\u7528cron\u89e6\u53d1\u7684GitHub\u5de5\u4f5c\u6d41\u81ea\u52a8\u66f4\u65b0)\u3002\n\u7531\u4e8e\u53cd\u5411\u7d22\u5f15\uff0c\u76ee\u6807\u3001\u6392\u9664\u3001\u89c4\u5219\u548c\u5b89\u5168cookie\u7684\u5185\u5b58\u4e2d\u5b9e\u4f8b\u4ee5\u53ca\u4e0e\u8f93\u5165URL\u548c\u57df\u5339\u914d\u6240\u9700\u7684RegExp\u5b9e\u4f8b\u4ec5\u5728\u6709\u673a\u4f1a\u5339\u914d\u65f6\u624d\u4ece\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u5ef6\u8fdf\u52a0\u8f7d\u548c\u7f16\u8bd1\u3002\n\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\uff0c\u66f4\u65b0(\u6dfb\u52a0\u6216\u5220\u9664\u7d22\u5f15\u4e2d\u7684\u5143\u7d20)\u76ee\u524d\u9700\u8981\u5b8c\u5168\u91cd\u65b0\u521b\u5efa\u7d22\u5f15\uff0c\u8fd9\u76f8\u5bf9\u6602\u8d35(\u5927\u7ea6\u9700\u8981500\u6beb\u79d2)\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u66f4\u65b0\u53ef\u4ee5\u5728\u540e\u7aef\u6267\u884c\uff0c\u800c\u4e14\u76f8\u5bf9\u8f83\u5c11\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u4e00\u4e2a\u62e6\u8def\u864e\u3002\n\u8fd9\u4e9b\u6d4b\u91cf\u63d0\u4f9b\u4e86\u4e00\u4e9b\u76f8\u5f53\u4ee4\u4eba\u60ca\u8bb6\u7684\u7ed3\u679c\u3002\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u770b\u5230\u4e0eFirefox\u76f8\u6bd4\uff0cChrome\u4f3c\u4e4e\u5728WebAssembly\u7248\u672c\u4e0a\u4e3e\u6b65\u7ef4\u8270\u3002\u4e0d\u8fc7\uff0cJavaScript\u5b9e\u73b0\u7684\u6027\u80fd\u518d\u4e00\u6b21\u8d85\u8fc7\u4e86Rust/WebAssembly\u7ec4\u5408\u3002\u540c\u6837\uff0c\u6211\u6700\u597d\u7684\u731c\u6d4b\u662f\uff0c\u4f20\u8f93\u5230WebAssembly\u4e0a\u4e0b\u6587\u7684\u6570\u636e\u91cf\u53ef\u80fd\u662f\u9020\u6210\u8fd9\u79cd\u60c5\u51b5\u7684\u90e8\u5206\u539f\u56e0\uff0c\u4f46\u6211\u5e0c\u671b\u4ece\u6838\u5fc3\u5f00\u53d1\u4eba\u5458\u90a3\u91cc\u83b7\u5f97\u66f4\u591a\u5173\u4e8e\u8fd9\u65b9\u9762\u7684\u89c1\u89e3\u3002\u6211\u4eec\u8fd8\u770b\u5230\uff0c\u6211\u4eec\u7684\u4e8c\u8fdb\u5236\u7d22\u5f15\u521d\u59cb\u5316\u975e\u5e38\u5feb\uff0c\u572812\u523045\u6beb\u79d2\u4e4b\u95f4\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7981\u7528\u5185\u7f6e\u7684CRC-32\u6821\u9a8c\u548c\u673a\u5236\u6765\u8fdb\u4e00\u6b65\u51cf\u5c11\u5b83\uff0c\u8be5\u673a\u5236\u53ef\u786e\u4fdd\u7f13\u51b2\u533a\u5728\u53cd\u5e8f\u5217\u5316\u4e4b\u524d\u4e0d\u4f1a\u635f\u574f\uff0c\u4f46\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u5fc5\u8981\u7684\u3002\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u9ad8\u6548\u5730\u67e5\u8be2\u89c4\u5219\u96c6\uff0c\u4ee5\u53ca\u5982\u4f55\u4ee5\u7d27\u51d1\u7684\u65b9\u5f0f\u8868\u793a\u7d22\u5f15\u6570\u636e\u7ed3\u6784\uff0c\u4fbf\u4e8e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4ee5\u5b9e\u73b0\u66f4\u5feb\u7684\u521d\u59cb\u5316\u3002\u6700\u7ec8\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u7684\u5927\u5c0f\u5927\u7ea6\u4e3a7Mb\u3002\u4ed4\u7ec6\u89c2\u5bdf\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e9b\u6570\u636e\u4e2d\u6709\u5f88\u5927\u4e00\u90e8\u5206\u7531\u6765\u81ea\u76ee\u6807\u7684\u539f\u59cb\u5b57\u7b26\u4e32(\u4e3b\u673a)\u3001\u6392\u9664\u9879(\u6a21\u5f0f)\u3001\u89c4\u5219(\u4ece\u548c\u5230)\u4ee5\u53ca\u5b89\u5168cookie(\u4e3b\u673a\u548c\u540d\u79f0)\u7ec4\u6210\uff1a\u5927\u7ea63MB\uff0c\u5360\u603b\u5927\u5c0f\u768440%\u591a\u4e00\u70b9\u3002\n\u67e5\u770b\u8fd9\u4e9b\u5b57\u7b26\u4e32\uff0c\u5f88\u5feb\u5c31\u4f1a\u6ce8\u610f\u5230\u4e00\u4e9b\u503c\u975e\u5e38\u9891\u7e41\uff0c\u6bd4\u5982\u5b89\u5168Cookie\u4e2d\u7684.+\uff0c\u6216\u8005\u89c4\u5219\u4e2d\u7684^http\uff1a\u548chttps\uff1a\u3002\u5229\u7528\u8fd9\u4e9b\u6a21\u5f0f\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u5bf9\u4e00\u4e9b\u516c\u5171\u5b57\u7b26\u4e32\u7684\u68c0\u6d4b\u8fdb\u884c\u786c\u7f16\u7801\uff0c\u5e76\u7528\u64cd\u4f5c\u7801\u66ff\u6362\u5b83\u4eec\uff0c\u6216\u8005\u6267\u884c\u67d0\u79cd\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u63d2\u5165\uff0c\u4ee5\u907f\u514d\u5728\u5185\u5b58\u4e2d(\u6216\u5728\u7d27\u51d1\u7684\u53cd\u5411\u7d22\u5f15\u4e2d)\u5177\u6709\u591a\u6b21\u76f8\u540c\u7684\u6570\u636e\u3002\n\u770b\u5f85\u8fd9\u4e2a\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f(\u4e5f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5b57\u7b26\u4e32\u63d2\u5165\u673a\u5236)\u662f\u4f9d\u8d56\u57fa\u4e8e\u7801\u672c\u7684\u538b\u7f29\u7b97\u6cd5\u6765\u51cf\u5c0f\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u3002\u78b0\u5de7\u6211\u5728\u8fc7\u53bb\u5df2\u7ecf\u5c1d\u8bd5\u8fc7\u8fd9\u6837\u7684\u6280\u672f(\u4f8b\u5982\u4f7f\u7528SMAZ\u6216SHECHO)\u3002\u6700\u540e\uff0c\u6211\u7528\u7eafJavaScript\u5b9e\u73b0\u4e86SMAZ\u7684\u4e00\u4e2a\u81ea\u5b9a\u4e49\u53d8\u4f53\uff0c\u4ee5\u96c6\u6210\u5230\u6211\u6b63\u5728\u5de5\u4f5c\u7684\u5e7f\u544a\u62e6\u622a\u5668\u4e2d\u3002\u8be5\u5e93\u63d0\u4f9b\u4e86\u81ea\u52a8\u751f\u6210\u7801\u672c\u7684\u529f\u80fd\uff0c\u8be5\u529f\u80fd\u8bd5\u56fe\u6839\u636e\u8f93\u5165\u5b57\u7b26\u4e32\u5217\u8868\u67e5\u627e\u6700\u4f73\u7801\u672c\u3002\n\u5c06\u8fd9\u79cd\u7801\u672c\u538b\u7f29\u601d\u60f3\u5e94\u7528\u4e8e\u89c4\u5219\u96c6\uff0c\u6211\u4eec\u80fd\u591f\u5c06\u5b57\u7b26\u4e32\u538b\u7f2940%\u523060%\uff0c\u4ece\u800c\u5c06\u5e8f\u5217\u5316\u5f15\u64ce\u7684\u603b\u5927\u5c0f\u8fdb\u4e00\u6b65\u51cf\u5c11\u52305MB(\u5373\u51cf\u5c112MB\u621630%)\u3002\u5e94\u7528\u6b64\u4f18\u5316\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u7684\u7c7b\u4f3cDataView\u7684\u62bd\u8c61\u4e2d\u900f\u660e\u5730\u5b8c\u6210\uff0c\u8be5\u62bd\u8c61\u7528\u4e8e\u5c06\u6570\u636e\u5e8f\u5217\u5316\u4e3a\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u5e76\u8fd4\u56de\u3002\n\u4f9d\u8d56\u4ee3\u7801\u7c3f\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\uff0c\u5728\u66f4\u65b0\u89c4\u5219\u96c6\u65f6\u9700\u8981\u91cd\u65b0\u751f\u6210\u4ee3\u7801\u7c3f\uff0c\u4ee5\u4fbf\u5b83\u4eec\u4fdd\u6301\u76f8\u5173\u6027\u3002\u6258\u7ba1\u5728GitHub\u4e0a\u7684\u539f\u578b\u4f9d\u9760GitHub\u5de5\u4f5c\u6d41\u57fa\u4e8e\u89c4\u5219\u7684\u6700\u65b0\u5feb\u7167\u66f4\u65b0\u4ee3\u7801\u7c3f\uff0c\u5e76\u4f7f\u7528\u66f4\u65b0\u540e\u7684\u8d44\u4ea7\u6253\u5f00PR\u3002\u7801\u672c\u4e5f\u4f5c\u4e3a\u5339\u914d\u5f15\u64ce\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\uff0c\u8fd9\u610f\u5473\u7740\u4eceCDN(\u5373GitHub)\u4e0b\u8f7d\u65b0\u7248\u672c\u7684\u5ba2\u6237\u7aef\u59cb\u7ec8\u83b7\u5f97\u6700\u4f73\u538b\u7f29\uff0c\u800c\u65e0\u9700\u66f4\u65b0\u6e90\u4ee3\u7801\u3002\n\u6b64\u56fe\u663e\u793a\u4e86Chrome Memory Dev\u5de5\u5177\u4f7f\u7528\u5feb\u7167\u62a5\u544a\u7684\u89c4\u5219\u96c6\u5360\u7528\u7684\u5927\u5c0f\u3002\u6211\u4eec\u770b\u5230\uff0c\u4e0eHTTPS Everywhere\u7684\u521d\u59cbJavaScript\u5b9e\u73b0\u76f8\u6bd4\uff0cWebAssembly\u964d\u4f4e\u4e86\u5185\u5b58\u4f7f\u7528\u91cf\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u7684\u4e8c\u8fdb\u5236\u7d22\u5f15\u4f7f\u7528\u7684\u5185\u5b58\u66f4\u5c11\uff0c\u5f53\u4f7f\u7528\u5b57\u7b26\u4e32\u538b\u7f29\u65f6\uff0c\u5dee\u522b\u751a\u81f3\u66f4\u5927\u3002\n\u867d\u7136\u57fa\u4e8e\u7801\u672c\u7684\u538b\u7f29\u5728\u51cf\u5c11\u5339\u914d\u89c4\u5219\u96c6\u6240\u9700\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u5185\u5b58\u4f7f\u7528\u91cf\u65b9\u9762\u975e\u5e38\u6709\u6548\uff0c\u4f46\u6839\u636e\u6570\u636e\u7684\u6027\u8d28\uff0c\u53ef\u80fd\u4f1a\u6709\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u76ee\u6807\u662f\u57df\u540d\uff0c\u5176\u4e2d\u5927\u591a\u6570\u6839\u672c\u4e0d\u4f7f\u7528\u901a\u914d\u7b26\uff1b\u5b83\u4eec\u8fd8\u4ee3\u8868\u5927\u90e8\u5206\u5b57\u7b26\u4e32\u3002Trie\u901a\u5e38\u7528\u4e8e\u8868\u793a\u8fd9\u7c7b\u6570\u636e\u3002\u6211\u4eec\u5e0c\u671b\u57df\u7684\u540e\u7f00\u5728\u591a\u4e2a\u76ee\u6807\u4e4b\u95f4\u91cd\u590d(\u4e00\u4e9b\u9876\u7ea7\u57df\u975e\u5e38\u5e38\u89c1)\u3002\n\u6211\u5df2\u7ecf\u77e5\u9053\u53ef\u4ee5\u7528\u975e\u5e38\u7d27\u51d1\u7684\u65b9\u5f0f\u5bf9trie\u8fdb\u884c\u7f16\u7801-\u5728\u5b58\u50a8ASCII\u5b57\u7b26\u4e32\u65f6\uff0c\u53ea\u4f7f\u7528\u4e00\u4e2a32\u4f4d\u6570\u5b57\u6765\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u3002\u5728\u5b9e\u73b0\u8fd9\u4e2a\u65b0\u7684\u6570\u636e\u7ed3\u6784\u4e4b\u524d\uff0c\u6211\u9996\u5148\u4f30\u8ba1\u4e86\u9884\u671f\u7684\u6700\u7ec8\u5927\u5c0f\uff0c\u4ee5\u786e\u4fdd\u5b83\u662f\u503c\u5f97\u7684\u3002\n\u6211\u5728\u5185\u5b58\u4e2d\u4f7f\u7528\u4e86\u57fa\u4e8eJavaScript\u5bf9\u8c61\u7684\u66f4\u6734\u7d20\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u5e76\u5728\u6bcf\u4e2a\u8282\u70b9\u4e2d\u4f7f\u7528Map\u5b9e\u4f8b\u5c06\u7236\u8282\u70b9\u94fe\u63a5\u5230\u5176\u5b50\u8282\u70b9\uff0c\u4ece\u800c\u6784\u5efa\u4e86\u5185\u5b58\u4e2d\u7684trie\u3002\u5b58\u50a8\u6240\u6709\u76ee\u6807\u4f1a\u4ea7\u751f1,654,430\u4e2a\u8282\u70b9\u7684trie\uff0c\u5728\u6211\u4eec\u7684\u7d27\u51d1\u8868\u793a\u4e2d\uff0c\u8fd9\u5c06\u4ea7\u751f\u5927\u7ea66.6MB\u7684\u5185\u5b58\u3002\u4e0d\u592a\u4ee4\u4eba\u632f\u594b\u7684\u2026\u3002\n\u7136\u540e\u6211\u610f\u8bc6\u5230\uff0c\u4e3a\u4e86\u4ece\u9876\u7ea7\u57df\u7684\u538b\u7f29\u4e2d\u83b7\u76ca\uff0c\u53cd\u5411\u5b58\u50a8\u57df\u53ef\u80fd\u66f4\u6709\u610f\u4e49\u3002\u5728\u98a0\u5012\u63d2\u5165\u76ee\u6807\u7684\u987a\u5e8f\u540e\uff0c\u8282\u70b9\u6570\u91cf\u964d\u81f3878,251\uff0c\u8fd9\u5c06\u4ea7\u751f3.5MB\u7684\u5185\u5b58\u3002\u8fd9\u770b\u8d77\u6765\u5df2\u7ecf\u66f4\u5408\u7406\u4e86\u3002\u4f46\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u6709\u5173\u6bcf\u4e2a\u76ee\u6807\u5c5e\u4e8e\u54ea\u4e2a\u89c4\u5219\u96c6\u7684\u989d\u5916\u4fe1\u606f(\u5339\u914d\u65f6\u9700\u8981\u7684\u4fe1\u606f)\u3002\u5047\u8bbe\u6211\u4eec\u6709163,486\u4e2a\u76ee\u6807\uff0c\u5e76\u4e14\u5047\u8bbe\u6211\u4eec\u627e\u5230\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u4e3a\u6bcf\u4e2a\u76ee\u6807\u4f7f\u7528\u989d\u5916\u768432\u4f4d\u6570\u5b57\u6765\u7f16\u7801\u89c4\u5219\u96c6\u6210\u5458\u8d44\u683c\uff0c\u7c97\u7565\u7684\u8ba1\u7b97\u544a\u8bc9\u6211\u4eec\u9700\u8981\u989d\u5916\u7684650KB\uff0c\u4ece\u800c\u5bfc\u81f4\u603b\u51714.1MB\u7684\u5185\u5b58\u4f7f\u7528\u3002\u5373\u4f7f\u5047\u8bbe\u6bcf\u4e2a\u76ee\u6807\u6709\u975e\u5e38\u4e50\u89c2\u768416\u4f4d\u5f00\u9500\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u6bd4\u4e0a\u9762\u63cf\u8ff0\u7684\u7801\u672c\u538b\u7f29\u65b9\u6cd5\u66f4\u591a\u7684\u5185\u5b58\u6765\u5b58\u50a8\u76ee\u6807\u3002\n\u8fd9\u5c31\u4ee5\u5c1d\u8bd5\u7ed3\u675f\u4e86\u5b9e\u9a8c\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4e0e\u5df2\u7ecf\u5b9e\u73b0\u7684\u5b57\u7b26\u4e32\u538b\u7f29\u65b9\u6cd5\u76f8\u6bd4\uff0c\u4f7f\u7528trie\u4f3c\u4e4e\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u663e\u8457\u7684\u8282\u7701\u3002\u5982\u679c\u6839\u672c\u4e0d\u5b9e\u73b0\u5b57\u7b26\u4e32\u538b\u7f29\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u9009\u62e9\u3002\u800c\u4e14\uff0c\u4f7f\u7528\u8bf8\u5982Patricia\u6216\u81ea\u9002\u5e94(ART)Trie\u4e4b\u7c7b\u7684\u66f4\u9ad8\u7ea7\u7684Trie\u7ed3\u6784\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u8fd9\u5c06\u5141\u8bb8\u5c06\u591a\u4e2a\u5b57\u7b26\u5b58\u50a8\u5230\u5355\u4e2a\u8282\u70b9\u4e2d\u3002\n\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u3002\n..", "note_en": "TL;DR:  In this post I describe the results of an experiment showing how matching of HTTPS Everywhere rules can be made  between 4x and 10x more memory-efficient, initialization of the matching engine reduced to less than  25 milliseconds, and HTTPS upgrades performed in  0.0029 to  0.0073 milliseconds, using a different design inspired by modern adblockers, without relying on the Rust/WebAssembly combo (i.e. pure JavaScript).\n Disclaimer:  This work was  not conducted as part of the HTTPS Everywhere project. My intent when experimenting with rulesets matching was to explore new ways to implement an efficient engine and document my findings. I would of course love it if some of these ideas are used upstream.\n Over the last few years, the adoption of HTTPS has continuously increased, reaching 50% of the Web traffic for the  first time in 2017 and up to  80% in 2019. Yet,  according to the EFF:  \u201cMany sites on the web [still] offer some limited support for encryption over HTTPS, but make it difficult to use. For instance, they may default to unencrypted HTTP, or fill encrypted pages with links that go back to the unencrypted site.\u201d\n For this reason, the EFF started the HTTPS Everywhere project in 2014, providing users with a browser extension able to automatically upgrade connections to HTTPS whenever possible.\n To decide when an upgrade is feasible, the extension relies on a database of  rulesets allowing it to know for a given URL if HTTPS is supported. These rules are  continuously updated to limit breakage and maximize coverage.\n Having spent a fair amount of my time working on  content blockers in the last few years\u2014especially on the  performance aspect\u2014, I have always been curious about how the rule-matching logic was implemented in HTTPS Everywhere, since the task shares many similarities with adblocking. More recently, I stumbled upon two tickets mentioning  high memory usage and  slow initialization of the extension and decided to have a closer look.\n High memory and CPU usage are problematic for multiple reasons. As HTTPS Everywhere is running in various environments\u2014including potentially low-end mobile phones\u2014it has to perform decently even under limited IO performance, slow CPUs and low amount of memory. Moreover, HTTPS is included in Tor (on both desktop and mobile) where the JIT can be disabled when security settings are maxed out, further degrading performance. Also consider that while loading a page, many components of the browser are competing for resources: parsing HTML, evaluating JavaScript, rendering the page, but also privacy protections such as adblockers, and of course, HTTPS Everywhere. Last but not the least, energy consumption (especially on mobile devices), is not to be ignored: A higher CPU usage means reduced battery life.\n While experimenting, I was wondering if some of the optimizations implemented as part of modern content blockers would make sense in HTTPS Everywhere and if they would improve the overall efficiency. This blog post presents some of the results of this investigation. The following contributions and improvements are presented:\n A new design, inspired by some of the same optimizations implemented in the fastest content blockers, leading to an increased efficiency: ~4.7MB of memory usage ( 4x less than the current HTTPS Everywhere Rust/WebAssembly implementation), further reduced to  ~2.1MB when using an experimental statistical data structure (with ideas to reduce it even more).\n Decision time between  0.0029 and  0.0073 milliseconds when querying the rulesets with a URL to be upgraded to HTTPS.\n Serialization to and deserialization from a compact binary representation in under  25 milliseconds and no memory copy.\n Design and implementation of a compact index data structure allowing to efficiently retrieve a small subset of rules likely to apply to a given input URL.\n A built-in small string compression implementation inspired by SMAZ which allows to reduce memory usage by up to 60%.\n An experimental statistical data structure allowing an even lower memory usage, at the risk of unlikely collisions.\n  Before digging deeper into the design of the matching engine, let\u2019s briefly describe  HTTPS Everwhere rulesets.\n The database of rules is made of  thousands of rulesets (currently about 25k). Each  ruleset is an XML file containing information about upgrading requests to HTTPS for a domain or group of domains (e.g. for an organization like Bitly). The file can contain the following entities:\n Targets\u2014define which domains are targeted by this ruleset (e.g.  example.com). They can also make use of wildcards, either to target all subdomains, or multiple top-level domains.\n Exclusions\u2014are regular expressions allowing to prevent some specific domains or URLs from being upgraded to HTTPS (e.g. to prevent breakage).\n Rules\u2014define how insecure requests should be upgraded  from insecure  to secure (i.e. they encode the URL rewriting logic). They define a  from regular expression which the input URL should match, associated with a  to attribute describing how the upgraded URL should look like. The most common case being to simply transform  ^http: into  https:.\n Secure Cookies\u2014Optionally defined if cookies from one of the targeted domains should be secured as well using hardened flags.\n    Given a collection of rulesets, the decision of upgrading an insecure request to a secure one relies on the following steps:\n  If a matching  rule is found following the previous steps, then the URL is rewritten to a secure version using the rewriting logic defined by this  rule. For more information about the exact semantic of matching rulesets, check  this page of the official documentation.\n  The naive approach to writing a matching algorithm would be to iteratively inspect all rulesets for each input URL, checking their  targets,  exclusions and  rules until a match is found. This would not be very efficient and we can do better (to be clear, this is  not the approach taken by HTTPS Everywhere and I only describe it to get a sense of the most naive solution).\n In the following few sections we are going to explore some of the biggest ideas contributing to the speed and memory efficiency of the new matching engine. Firstly, I will present the central  indexing data structure which allows to drastically reduce the amount of work required to find relevant rulesets. Secondly, I will walk you through  how this index can be represented in a very compact way, as a single typed array. Thirdly, we will see how we can further reduce the memory usage by implementing a built-in string compression capability to this compact index. Lastly I will briefly describe two other attempts at reducing the size of the index using a trie data structure and an experimental probabilistic data structure based on hashing.\n  Instead of iterating through all rulesets for each input URL, we want to quickly identify a small subset of candidates which will be evaluated against the input URL. To achieve this goal, we rely on a  reverse index which groups  targets,  exclusions and  rules into buckets indexed by a common substring (or  token) that they contain. This allows us to collect candidates for a given URL by querying the index with tokens found in the URL. Each candidate retrieved is thus guaranteed to share at least a common substring with the URL. In practice, this drastically reduces the amount of work required to take a decision. This technique is  used as part of content blockers to identify lists of filters indicating that a network request should be canceled.\n We create a separate index for  targets,  exclusions,  rules and  secure cookies. To minimize the number of candidates retrieved for each URL, we make sure that each  target and  secure cookie is indexed using  its rarest token, whereas  exclusions and  rules are indexed only using the ID of the ruleset they belong to. In practice, each index is created using the following algorithm:\n Each element is tokenized using  \\w+ (alpha-numeric characters) or the ruleset ID is used as a token. For example  target  example.com would be tokenized into  [&#39;example&#39;, &#39;com&#39;].\n We keep track of the number of occurrences of each token with a global counter.\n We then select the  best (i.e. least seen) token for each element, and use it as a key in the reverse index.\n As a result, most  buckets of the index will contain a single element (meaning that we found a token which is unique globally to index the element). To get a better idea of the dispatching capabilities brought by this technique, consider the following statistics collected by matching  a datasets containing 240k URLs from the most popular domains against the HTTPS Everywhere rulesets:\n The median number of  targets candidates evaluated for a given URL is:  7\u2014from a total of 163k; which means we only need to look at 0.004% of all  targets on average. And out of these targets, most only cost a look-up in a  Set since we often get multiple candidates from the same ruleset. By keeping track of which rulesets we are already considering, we only need to evaluate the first target from a given ruleset. The median number of  targets candidates requiring a string comparison is:  5.\n The median number of  rulesets considered is:  1, with a maximum of:  2 in the rare case where a given domain is targeted by more than one ruleset (from a total of 25k).\n For each ruleset, we then retrieve a combined exclusion (all regular expressions aggregated into one, joined with  | characters), resulting in one or two  RegExp evaluations (from the one or two rulesets considered).\n Finally, we inspect the  rules from each ruleset not already excluded, until we find a match. The median number of  rules considered is  2.\n  This graph depicts the average time it takes to rewrite a request to HTTPS, based on the latest snapshots of rulesets, evaluated against the dataset of 240k URLs mentioned above. Please note that internal caching of HTTPS Everywhere  was disabled for these measurements, to only take into account the raw speed of the engine.\n It is surprising to observe that the Rust/WebAssembly version is slower than the JavaScript implementation. Although both are really fast since even the \u201cslowest\u201d result is of  0.028 milliseconds on average. It could very well be that the overhead of transferring data from JavaScript to WebAssembly is responsible for this result. On the other hand, we see that our reverse index implementation is faster than both, with an average time between  0.0046 and  0.0073 milliseconds. Note that running the same benchmark in Node.js results in an even faster decision time of  0.0029 milliseconds\u2014this might be explained by the fact that browsers are less friendly to benchmarking due to the many components potentially competing for CPU resources, but this is just speculation on my part.\n  While the indexing technique described in the previous section speeds-up matching drastically, it is not optimal in terms of memory usage and initialization time. If the index is represented as a  Map, it means that on each initialization (when the extension starts) we need to either re-create the index from scratch (using the raw XML rulesets or a JSON version of it), or load it from a textual representation of the  Map (i.e. from cache), like an array of  key,  value pairs.\n Instead, the reverse index described above is implemented as a compact binary data structure stored in a single  Uint8Array (typed array), where the data is organized in a way that allows for efficient look-ups. In-memory instances of  targets,  exclusions,  rules and  secure cookies along with the instances of  RegExp required to match against input URLs and domains are only lazily loaded and compiled from their binary representation stored in the typed array, when there is a chance they will match, thanks to the reverse index. These instances can also be (optionally) cached into a  Map so that subsequent look-ups do not need to hit the binary index (which is a bit slower than  Map.get).\n Since the number of rulesets really considered in practice is more or less proportional to the number of unique domains visited by a user during a browsing session, the additional memory usage required for the caching mechanism is fairly small.\n More implementation details are given in the section \u201cGoing low-level with typed arrays\u201d from  this other article. To summarize the benefits of this data structure:\n It allows to encode all rulesets into a very compact, binary format, stored in a single  Uint8Array. The total memory usage of the extension using such an engine is therefore fairly predictable, and close to the size of this typed array.\n Serialization and deserialization are extremely efficient since the look-ups can be performed directly on this  Uint8Array instance without the need to first copy the data into a more convenient data structure such as a  Map. Serialization thus consists in storing the same typed array locally (e.g. in IndexedDB), and deserialization consists in reading it back.\n This binary data structure can be created once on the server-side and hosted on a CDN, so that clients can fetch it directly, speeding-up initialization further (The following  binary file is updated automatically using a GitHub Workflow triggered using  cron).\n In-memory instances of  targets,  exclusions,  rules and  secure cookies along with the instances of  RegExp required to match against input URLs and domains are only lazily loaded and compiled from the binary representation, when there is a chance they will match, thanks to the reverse index.\n The drawback of this approach, though, is that updating (adding or deleting elements from the index), currently requires to recreate the index completely, which is relatively costly (it takes around  500 milliseconds). But since updates can be performed backend-side, and are relatively infrequent, this is not a road-blocker.\n  These measurements offer some fairly surprising results. On the one hand we see that Chrome seems to struggle with the WebAssembly version compared to Firefox. Once again the JavaScript implementation outperforms the Rust/WebAssembly combo, though. Again, my best guess is that the amount of data transfered to WebAssembly context might be partly responsible for that, but I would love to get more insights from core developers on this. We also see that our binary index is extremely fast to initialize, between  12 and  45 milliseconds. We could reduce it further by disabling the built-in  CRC-32 checksum mechanism which ensures that the buffer is not corruption before deserializing it, but this does not seem necessary.\n  Up to this point, we have shown how we can efficiently query rulesets and how the indexing data structures can be represented in a compact way, friendly to serialization and deserialization to allow faster initializations. The size of the final typed array is roughly of  7MB. When looking closer, it appears that a big proportion of this data consists of the raw strings from  targets ( host),  exclusions ( pattern),  rules ( from and  to), as well as  secure cookies ( host and  name): about  3MB, or a bit more than 40% of the total size.\n Looking at these strings, it does not take long to notice that some values are very frequent, like  .+ in  secure cookies, or  ^http: and  https: in  rules. One way to take advantage of these patterns would be to hard-code the detection of some of the common strings and replace them by opcodes, or perform some kind of  string interning, to avoid having many times the same data in memory (or in the compact reverse index).\n Another way to look at the problem, which could also be seen as a string interning mechanism, is to rely on a codebook-based compression algorithm to reduce the size of strings. It so happens that I had already experimented with such techniques in the past (e.g. using  SMAZ or  shoco). I ended up implementing a custom variant of SMAZ in pure-JavaScript to integrate into the  adblocker I was working on. The library offers an  automatic codebook-generation function that tries to find optimal codebooks based on a list of input strings.\n Applying this codebook compression idea to rulesets, we are able to compress strings by 40 to 60%, further reducing the total size of the serialized engine to  5MB (i.e. a  2MB, or  30%, reduction). Applying this optimization can be done transparently in the custom DataView-like  abstraction used to serialize data to the binary representation and back.\n A drawback of relying on codebooks is that they need to be re-generated when the rulesets are updated so that they remain relevant. The  prototype hosted on GitHub is relying on a GitHub Workflow to update the codebooks based on the latest snapshot of the rules and open a PR with the updated assets. The codebooks are also shipped as part of the binary representation of the matching engine, which means that clients downloading a new version from the CDN (i.e. GitHub) always get the best compression, without needing to update the source code.\n  This plot shows the size occupied by rulesets as reported by the Chrome Memory Dev Tool with a snapshot. We see that the memory usage went down with WebAssembly compared to the initial JavaScript implementation of HTTPS Everywhere. On the other hand, our binary index uses less memory, and the difference is even bigger when using string compression as well.\n  Although the codebook-based compression is very effective at reducing the memory usage of raw strings needed for matching rulesets, there might be more efficient approaches depending on the nature of the data. In particular,  targets are domain names, most of which are not using wildcards at all; they also represent the bulk of the strings. A  trie is commonly used to represent this kind of data. We expect suffixes of domains to be repeated among many targets (some top-level domains are very common).\n I already knew it was possible to encode a trie in a very compact way\u2014using only one 32-bit number to represent each node when storing ASCII strings. Before putting the work to implement this new data structure, I started by estimating the expected final size to make sure it was worth it.\n I constructed the trie in-memory using a more naive representation based on JavaScript objects and an instance of  Map in each node to link a parent to its children. Storing all  targets resulted in a trie of  1,654,430 nodes, which would result in about  6.6MB of memory with our compact representation. Not very encouraging\u2026\n I then realized that it would probably make more sense to store the domains in reverse, to benefit from compression of top-level domains. After reversing the order of  targets on insertion, the number of nodes went down to  878,251, which would result in  3.5MB of memory. This already seemed more reasonable. But we also need to factor-in the extra information about which ruleset each  target belongs to (information needed when matching). Given that we have  163,486  targets, and assuming we find a way to encode the ruleset membership with an extra 32-bit number for each target, a back-of-the-envelope calculation tells us that we would need an extra  650KB, resulting in a total of  4.1MB memory usage. Even assuming a very optimistic 16-bit overhead per target, we would still need more memory to store  targets than with the codebook-compression approach described above.\n This concluded the experimentation with tries. Unfortunately, it does not seem like using a trie would yield any significant savings compared to the string compression method already implemented. It might be a viable option if string compression is not to be implemented at all. Also, it could be that better results can be obtained using a more advanced trie structure such as a  patricia or  adaptive (ART) trie, which would allow to store multiple characters into a single node.\n  At this poin\n......", "posttime": "2020-05-31 12:29:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5339\u914d,matching", "title": "\u66f4\u9ad8\u6548\u7684HTTPS Everywhere\u5339\u914d\u5f15\u64ce", "title_en": "A more efficient matching engine for HTTPS Everywhere", "transed": 1, "url": "https://remusao.github.io/posts/efficient-https-everywhere-engine.html", "via": "", "real_tags": ["\u5339\u914d", "matching"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004486, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5e2e\u52a9\u652f\u6301\u6211\u4eec\u7684\u793e\u533a\u5728\u65b0\u51a0\u80ba\u708e\u671f\u95f4\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u6211\u4eec\u5c06\u57282020\u5e746\u670830\u65e5\u4e4b\u524d\u514d\u8d39\u63d0\u4f9bACM\u5728\u6211\u4eec\u6570\u5b57\u56fe\u4e66\u9986\u4e2d\u53d1\u5e03\u7684\u6240\u6709\u4f5c\u54c1\u3002\u4e86\u89e3\u66f4\u591a\u3002\n\u6211\u4eec\u4f7f\u7528\u997c\u5e72\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u7ed9\u4f60\u6700\u597d\u7684\u7ecf\u9a8c\uff0c\u5728\u6211\u4eec\u7684\u7f51\u7ad9\u3002\n\u60a8\u7684\u6d4f\u89c8\u5668\u4f3c\u4e4e\u4e0d\u652f\u6301\u5b83\u4eec\uff0c\u8fd9\u4f1a\u5f71\u54cd\u7f51\u7ad9\u529f\u80fd\u3002", "note_en": "To help support our community working remotely during COVID-19, we are making all work published by ACM in our Digital Library freely accessible through June 30, 2020.  Learn more\n   We use cookies to ensure that we give you the best experience on our website.\n  It seems your browser doesn&#39;t support them and this affects the site functionality.", "posttime": "2020-05-31 12:14:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,high,\u7f51\u7ad9", "title": "Stonecuter\uff1a\u4e00\u79cd\u8d85\u9ad8\u7ea7\u6307\u4ee4\u96c6\u8bbe\u8ba1\u8bed\u8a00", "title_en": "StoneCutter: A Very High Level Instruction Set Design Language", "transed": 1, "url": "https://doi.org/10.1145/3387902.3394029", "via": "", "real_tags": ["\u8bbe\u8ba1", "high", "\u7f51\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1004485, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6709\u6307\u5bfc\u7684\u7814\u8ba8\u4f1a\u4e2d\u5b66\u4e60WebTorrent\u548cWebRTC\uff01", "note_en": "Learn WebTorrent and WebRTC in a guided workshop!", "posttime": "2020-05-31 12:13:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "webrtc,webtorrent", "title": "\u4e86\u89e3WebTorrent\u548cWebRTC", "title_en": "Learn WebTorrent and WebRTC", "transed": 1, "url": "https://webtorrent.github.io/workshop/", "via": "", "real_tags": ["webrtc"]}]