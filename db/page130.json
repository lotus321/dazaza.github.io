[{"category": "", "categoryclass": "", "imagename": "feaca2047d9147330dab31a736b53e81.png", "infoid": 1005431, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PANDAcap\u662f\u4e00\u4e2a\u7528\u4e8e\u7b80\u5316\u6355\u83b7PANDA\u6267\u884c\u8ddf\u8e2a\u7684\u6846\u67b6\u3002PANDAcap\u7684\u4e3b\u8981\u76ee\u6807\u662f\u4f7f\u521b\u5efa\u718a\u732b\u8ddf\u8e2a\u7684\u6570\u636e\u96c6\u53d8\u5f97\u66f4\u5bb9\u6613\u3002PANDAcap\u63d0\u4f9b\u5bf9Docker\u7684\u652f\u6301\u4ee5\u53ca\u5bf9Docker\u5bb9\u5668\u548c\u7528\u4e8e\u6355\u83b7\u8ddf\u8e2a\u7684VM\u7684\u8fd0\u884c\u65f6\u81ea\u5b9a\u4e49\u7684\u652f\u6301\u3002\u5b83\u4f9d\u8d56\u4e8erecctrl Panda\u63d2\u4ef6\u6765\u81ea\u52a8\u542f\u52a8\u548c\u505c\u6b62\u8bb0\u5f55\u3002\u8be5\u63d2\u4ef6\u662f\u4e3a\u4e0ePANDAcap\u4e00\u8d77\u4f7f\u7528\u800c\u5f00\u53d1\u7684\uff0c\u540e\u6765\u4e0e\u718a\u732b\u4e3b\u7ebf\u5408\u5e76\u3002\nManolis Stamatogiannakis\uff0cHerbert Bos\u548cPaul Groth\u3002PANDAcap\uff1a\u4e00\u4e2a\u7b80\u5316\u5168\u7cfb\u7edf\u8ddf\u8e2a\u6536\u96c6\u7684\u6846\u67b6\u3002\u6458\u81ea\u201c\u7b2c13\u5c4a\u6b27\u6d32\u7cfb\u7edf\u5b89\u5168\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6\u201d\uff0c\u6b27\u6d32\u5b89\u5168\u59d4\u5458\u4f1a\uff0c20\uff0c\u5e0c\u814a\uff0c\u4f0a\u62c9\u514b\u5229\u5b89\uff0c2020\u5e744\u6708\u3002doi\uff1a10.1145/3380786.3391396\uff0c\u9884\u5370\u672c\uff1avusec.net\u3002\n@inProcestions{anda acap-eurosec20\uff0c\u4f5c\u8005={Stamatogiannakis\uff0cManolis and Bos\uff0cHerbert and Groth\uff0cPaul}\uff0ctitle={{PANDAcap\uff1aA Framework for Streaming Collection of Full-System Traces}}\uff0cbooktitle={\u7b2c13\u5c4a\u6b27\u6d32\u7cfb\u7edf\u5b89\u5168\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6}\uff0cSeries={EuroSec&#39\uff1b3380786.3391396}\uff0c\u5e74\u4efd={2020}\uff0c\u6708\u4efd={4\u6708}\uff0c\u5730\u5740={\u5e0c\u814a\u8d6b\u62c9\u514b\u5229\u5b89}\uff0curl={https://doi.org/10.1145/3380786.3391396}\uff0cdoi={10.1145/20}\uff0c\u5173\u952e\u8bcd={\u6846\u67b6\uff0c\u718a\u732b\uff0c\u8bb0\u5f55\u548c\u56de\u653e\uff0c\u7801\u5934\uff0c\u871c\u7f50\uff0c\u6570\u636e\u96c6}\uff0c}\u3002\n@DataSet{Pandacap-Eurosec20-DataSet\uff0cAuthor={Stamatogiannakis\uff0cManolis and Bos\uff0cHerbert and Groth\uff0cPaul}\uff0cTitle={PANDAcap SSH Honeypot DataSet}\uff0c\u5e74\u4efd={2020\u5e74}\uff0c\u6708\u4efd={4\u6708}\uff0c\u51fa\u7248\u5546={Zenodo}\uff0c\u7248\u672c={1}\uff0cURL={https://doi.org/10.5281/zenodo.3759652}doi={10.5281/zenod.3759652}\uff0c}\u3002\n\u60a8\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u94fe\u63a5\u4e4b\u4e00\u4e0b\u8f7dEuroSec\u8bba\u6587\u4e2d\u63cf\u8ff0\u7684\u718a\u732b\u8e2a\u8ff9\u7684SSH\u871c\u7f50\u6570\u636e\u96c6\uff1a\n\u6ce8\u610f\uff1a\u597d\u7684\u6587\u6863\u662f\u5f88\u96be\u505a\u7684\u3002\u5982\u679c\u4e00\u6761\u4fe1\u606f\u4f3c\u4e4e\u4e22\u5931\u6216\u4e0d\u591f\u6e05\u695a\uff0c\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528\u95ee\u9898\u8ddf\u8e2a\u5668\u6216\u8d21\u732e\u62c9\u53d6\u8bf7\u6c42\u3002\n\u50cf\u5f80\u5e38\u4e00\u6837\u5efa\u9020\u718a\u732b\u5e76\u5b89\u88c5\u5b83\u3002\u60a8\u5728\u914d\u7f6e\u8fc7\u7a0b\u4e2d\u6307\u5b9a\u7684\u5b89\u88c5\u8def\u5f84\u4e0d\u80fd\u4e0e\u60a8\u8981\u5728docker\u6620\u50cf\u4e2d\u5b89\u88c5Panda\u7684\u4f4d\u7f6e\u4e0d\u540c\u3002\u8bf7\u786e\u4fdd\u5728\u5185\u90e8\u7248\u672c\u4e2d\u5305\u542brecctrl\u63d2\u4ef6\u3002\n\u68c0\u67e5\u6b64\u56de\u8d2d\u4e2d\u7684Makefile.vars\u3002\u6ce8\u91ca\u4e2d\u63d0\u4f9b\u4e86\u6bcf\u4e2a\u53d8\u91cf\u7684\u7528\u6cd5\u6587\u6863\u3002\n\u5982\u679c\u9700\u8981\u8986\u76d6\u6587\u4ef6\u4e2d\u7684\u4efb\u4f55\u53d8\u91cf\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aMakefile.local.vars\u7684\u65b0\u6587\u4ef6\uff0c\u5e76\u5728\u5176\u4e2d\u6307\u5b9a\u5b83\u4eec\u6240\u9700\u7684\u503c\u3002\n\u8fd0\u884cmake\u3002\u8fd9\u5c06\u6784\u5efa\u4e00\u4e2a\u5305\u542b\u6307\u5b9a\u7684\u718a\u732b\u6784\u5efa\u7684Docker\u6620\u50cf\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528make lsimg\u68c0\u67e5\u8fd9\u4e00\u70b9\u3002\n\u8fd0\u884cMake Help\u5c06\u63d0\u4f9b\u901a\u8fc7Makefile\u53ef\u4ee5\u6267\u884c\u54ea\u4e9b\u64cd\u4f5c\u7684\u6982\u8ff0\u3002\nPANDAcap\u5728baseimage-docker\u7684\u57fa\u7840\u4e0a\u6784\u5efa\u4e86\u4e00\u4e2adocker\u955c\u50cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u6700\u5c0f\u7684\u57fa\u4e8eUbuntu\u7684\u955c\u50cf\uff0c\u5177\u6709\u4e00\u4e9b\u4e0edocker\u76f8\u5173\u7684\u589e\u5f3a\u529f\u80fd\uff0c\u5176\u76ee\u7684\u662f\u4e3a\u8bb0\u5f55\u718a\u732b\u8e2a\u8ff9\u63d0\u4f9b\u4e00\u4e2a\u72ec\u7acb\u7684\u73af\u5883\u3002\n\u6211\u4eec\u6ca1\u6709\u5728Dockerfile\u4e2d\u5305\u542b\u7ec6\u7c92\u5ea6\u7684\u547d\u4ee4\uff0c\u800c\u662f\u9009\u62e9\u5c06\u5b83\u4eec\u538b\u7f29\u5230shell\u811a\u672c\u4e2d\uff0c\u5728\u5355\u4e2a\u5f15\u5bfc\u6b65\u9aa4\u4e2d\u8c03\u7528\u8fd9\u4e9b\u811a\u672c\u3002\u8fd9\u907f\u514d\u4e86\u5728\u6784\u5efa\u65f6\u521b\u5efa\u5197\u4f59\u7684\u6620\u50cf\u68c0\u67e5\u70b9\uff0c\u800c\u4e14\u4e5f\u6bd4\u5728Dockerfile\u4e2d\u6ee5\u7528&amp\uff1b&amp\uff1b\u64cd\u4f5c\u7b26\u66f4\u4f18\u96c5\u3002\nPanda\u6e90\u4ee3\u7801\u9644\u5e26\u4e86\u51e0\u4e2aDockerfile\uff0c\u53ef\u7528\u4e8e\u521b\u5efaDockerImage\u3002\u4f46\u662f\uff0c\u8fd9\u4e9bdocker\u6587\u4ef6\u4e3b\u8981\u7528\u4e8e\u5728\u53ef\u91cd\u73b0\u7684\u73af\u5883\u4e2d\u6784\u5efaPANDA\u3002\u8fd9\u610f\u5473\u7740\u5728\u751f\u6210\u7684\u6620\u50cf\u4e2d\u62d6\u5165\u4e86\u8bb8\u591a\u6784\u5efa\u65f6\u4f9d\u8d56\u9879\uff0c\u5bfc\u81f4\u4e0d\u5fc5\u8981\u7684\u81a8\u80c0\u3002\u6211\u4eec\u8ba4\u4e3a\uff0c\u8981\u521b\u5efa\u5305\u542bPanda\u7684\u6570\u636e\u96c6\uff0c\u6700\u597d\u662f\u53ea\u5305\u542b\u8fd0\u884cPanda\u6240\u9700\u7684\u5185\u5bb9\u7684\u66f4\u7b80\u5355\u7684\u6620\u50cf\u3002\n\u867d\u7136\u6211\u4eec\u611f\u8c22Docker\u63d0\u4f9b\u7684\u4fbf\u5229\uff0c\u4f46\u6211\u4eec\u4e5f\u8ba4\u8bc6\u5230\uff0c\u5728\u6211\u4eec\u7684\u7814\u7a76\u9886\u57df\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u662f\u5076\u5c14\u9700\u8981\u5b83\u3002\u4e3a\u6b64\uff0c\u9664\u4e86\u5305\u88c5\u5728anda acap.py\u811a\u672c\u4e2d\u7684\u529f\u80fd\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u5728\u4e3bPANDAcap Makefile\u4e2d\u6253\u5305\u4e86\u51e0\u4e2a\u4e0eDocker\u76f8\u5173\u7684\u6709\u7528\u547d\u4ee4\u3002\u4e0b\u9762\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53ef\u7528\u7684\u547d\u4ee4\u3002\u8fd0\u884cMake Help\u63d0\u4f9b\u4e86\u6240\u6709\u53ef\u7528\u547d\u4ee4\u7684\u6982\u8ff0\u3002\n\u6620\u50cf\u521b\u5efa\u548c\u6e05\u7406\u6e05\u7406\u6587\u4ef6\uff1a\u5220\u9664\u4e2d\u95f4\u6587\u4ef6\uff0c\u5f3a\u5236\u5b83\u4eec\u5728\u60a8\u9009\u62e9\u6784\u5efa\u76ee\u6807\u7684\u4e0b\u4e00\u4e2a\u6587\u4ef6\u4e2d\u91cd\u65b0\u521b\u5efa\u3002\nshell\u5b9e\u7528\u7a0b\u5e8fzsh-%\uff1a\u4f7f\u7528docker exec\u5728%\u6307\u5b9a\u7684\u5bb9\u5668\u4e0a\u542f\u52a8\u767b\u5f55zsh\u3002\u89c4\u8303\u53ef\u4ee5\u662f\u5bb9\u5668ID\u6216\u5bb9\u5668\u540d\u79f0\u3002\nssh-%\uff1a\u4f7f\u7528ssh\u4ee5root\u8eab\u4efd\u8fde\u63a5\u5230%\u6307\u5b9a\u7684\u5bb9\u5668\u3002\u89c4\u8303\u5e94\u4e3a\u5bb9\u5668\u540d\u79f0\u3002\nlean-ssh\uff1a\u4ecessh Authorized_keysfile\u4e2d\u5220\u9664\u5177\u6709\u6d3b\u52a8\u7f51\u7edc\u914d\u7f6e\u7684\u6240\u6709\u5bb9\u5668\u7684\u4e3b\u673a\u5bc6\u94a5\u3002\u8fd9\u5728\u60a8\u4fee\u6539\u5f15\u5bfc\u811a\u672c\u7136\u540e\u91cd\u65b0\u6784\u5efa\u6620\u50cf\u65f6\u975e\u5e38\u6709\u7528\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4f1a\u5f71\u54cd\u5177\u6709\u6d3b\u52a8\u7f51\u7edc\u914d\u7f6e\u7684\u4efb\u4f55\u548c\u6240\u6709\u5bb9\u5668\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0cMakefile.vars\u548cMakefile.local.vars\u662f\u914d\u7f6ePANDAcap\u7684\u5165\u53e3\u70b9\u3002\u901a\u8fc7\u4f7f\u7528j2cli\u89e3\u6790Makefilevariables\u5e76\u5c06\u5176\u5448\u73b0\u4e3aJJA2\u6a21\u677f\uff0c\u53ef\u4ee5\u5c06\u5728\u90a3\u91cc\u5b9a\u4e49\u7684\u53d8\u91cf\u5411\u4e0b\u4f20\u9012\uff0c\u5e76\u7531PANDAcapp\u7684\u5176\u4ed6\u90e8\u5206\u4f7f\u7528\uff0c\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528j2cli\u6765\u89e3\u6790Makefilevariables\u5e76\u5c06\u5b83\u4eec\u5448\u73b0\u5230JJIA2\u6a21\u677f\u4e2d\u6765\u5b9e\u73b0\u7684\u3002", "note_en": "PANDAcap is a framework for streamlining the capture of  PANDAexecution traces. The main goal of PANDAcap is to make it easier to create datasets of PANDA traces.PANDAcap offers support for  Docker as well as support forruntime customization of both Docker containers and the VMs used tocapture the traces.It relies on the  recctrl PANDA plugin to automate startingand stopping of recording. The plugin has been developed for use withPANDAcap and later merged with the PANDA mainline.\n  Manolis Stamatogiannakis, Herbert Bos, and Paul Groth.PANDAcap: A Framework for Streamlining Collection of Full-System Traces.In  Proceedings of the 13th European Workshop on Systems Security, EuroSec &#39;20, Heraklion, Greece, April 2020.doi:  10.1145/3380786.3391396,preprint:  vusec.net\n   @inproceedings{ pandacap-eurosec20, author =   {Stamatogiannakis, Manolis and Bos, Herbert and Groth, Paul }, title =   {{PANDAcap: A Framework for Streamlining Collection of Full-System Traces} }, booktitle =   {Proceedings of the 13th European Workshop on Systems Security }, series =   {EuroSec &#39;20 }, year =   {2020 }, month =   {April }, address =   {Heraklion, Greece }, url =   {https://doi.org/10.1145/3380786.3391396 }, doi =   {10.1145/3380786.3391396 }, keywords =   {framework, PANDA, record and replay, docker, honeypot, dataset },}\n   @dataset{ pandacap-eurosec20-dataset, author =   {Stamatogiannakis, Manolis and Bos, Herbert and Groth, Paul }, title =   {PANDAcap SSH Honeypot Dataset }, year =   {2020 }, month =   {April }, publisher =   {Zenodo }, version =   {1.0 }, url =   {https://doi.org/10.5281/zenodo.3759652 }doi =   {10.5281/zenodo.3759652 },}\n You can download the  SSH Honeypot Dataset of PANDA traces describedin the EuroSec paper from one of the following links:\n  Note: Good documentation is hard to do. If a piece of informationseems to be missing or is not clear enough, feel free to use the issue tracker or contributea  pull request.\n   Build PANDA as usually and install it. The install path that youspecify during configuration must not be different than thelocation you want to install PANDA inside the docker image.Make sure to include the  recctrl plugin in the build.\n Inspect  Makefile.vars in this repo. Documentationfor the use of each variable is provided in the comments.\n If you need to override any of the variables in the file, createa new file called  Makefile.local.vars and specify their desiredvalues there.\n Run  make. This will build a Docker image that includes thespecified PANDA build. You can check this using  make lsimg.\n Running  make help will you provide an overview of what actionscan be performed via the Makefile.\n   PANDAcap builds a docker image based on  baseimage-docker,a minimal Ubuntu-based image with some Docker-realated enhancements.The purpose of the image is to provide a self-contained environment forrecording PANDA traces.\n  Instead of including fine-grained commands inside our Dockerfile, wehave opted for squashing them into shell scripts which are invoked ina single  bootstrapping step.This avoids creating redundant image checkpoints while building, andis also more elegant than abusing the  &amp;&amp; operator in the Dockerfile.\n    PANDA source code ships with a couple of Dockerfiles that can be used to create a Dockerimage. However these docker files are mostly intended for  buildingPANDA in a reproducible environment. This means that a lot ofbuild-time dependencies are dragged in the resulting image, causingunecessary bloat. We felt that for creating a dataset with PANDA, aleaner image that includes only what is required to run PANDA would bepreferrable.\n    While we appreciate the convenience offered by Docker, we recognizethat we are probably only going to need it occasionally in ourresearch field. For this, in addition to the functionality wrapped inthe  pandacap.py script, we have packed several useful Docker-relatedcommands in the main PANDAcap Makefile. Some of the available commandsare presented below. Running  make help provides an overview of allthe available commands.\n Image creation and cleanup clean-files: Removes intermediate files, forcing them to becreated again the next file you select the  build target.\n  Shell utilities zsh-%: Starts a login zsh on the container specified by  %using  docker exec. The specification may be either thecontainer id or the container name.\n ssh-%: Connects as root to the container specified by  %using ssh. The specification should be a container name.\n clean-ssh: Removes the host keys of all container with anactive network configuration from your ssh  authorized_keysfile.This is useful when you modify the bootstrapping scripts andthen rebuild the image. Note that this affects  any and  allcontainers with an active network configuration.\n  As we have mentioned above,  Makefile.vars and  Makefile.local.varsare the entry points for configuring PANDAcap. Variables definedthere can be passed down and used by other parts of PANDAcap.This happens through the use of  j2cli to parse the Makefilevariables and render them into  Jinja2 templates templates.", "posttime": "2020-06-06 19:59:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b80\u5316,framework,docker", "title": "PANDAcap\uff1a\u7b80\u5316\u718a\u732b\u6267\u884c\u75d5\u8ff9\u6355\u83b7\u7684\u6846\u67b6", "title_en": "PANDAcap: A framework for streamlining the capture of PANDA execution traces", "transed": 1, "url": "https://github.com/vusec/pandacap", "via": "", "real_tags": ["\u7b80\u5316", "framework", "docker"]}, {"category": "", "categoryclass": "", "imagename": "40365c42f01220cd483ce2bddbf97064.jpg", "infoid": 1005430, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fb7\u56fd\u91d1\u878d\u76d1\u7ba1\u673a\u6784\u5bf9\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u5e93\u65af\u00b7\u5e03\u52b3\u6069\u548c\u5176\u4ed6\u4e09\u540d\u9ad8\u7ba1\u63d0\u8d77\u5211\u4e8b\u8bc9\u8bbc\u3002\n\u5468\u4e94\uff0c\u5728\u6155\u5c3c\u9ed1\u68c0\u65b9\u5bf9Wirecard\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u5e93\u65af\u00b7\u5e03\u52b3\u6069(Markus Braun)\u548c\u652f\u4ed8\u96c6\u56e2\u5176\u4ed6\u4e09\u540d\u6267\u884c\u8463\u4e8b\u4f1a\u6210\u5458\u5c55\u5f00\u5211\u4e8b\u8c03\u67e5\u540e\uff0cWirecard\u7684\u603b\u90e8\u88ab\u8b66\u65b9\u641c\u67e5\u3002\n\u5728\u5468\u4e94\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\uff0c\u6155\u5c3c\u9ed1\u68c0\u5bdf\u5b98\u8868\u793a\uff0c\u641c\u67e5\u884c\u52a8\u662f\u5728\u5fb7\u56fd\u91d1\u878d\u76d1\u7ba1\u673a\u6784BaFin\u51e0\u5929\u524d\u63d0\u4ea4\u5211\u4e8b\u7533\u8bc9\u4e4b\u540e\u8fdb\u884c\u7684\u3002\u6295\u8bc9\u6d89\u53caWirecard\u5728\u6bd5\u9a6c\u5a01(KPMG)4\u6708\u4e0b\u65ec\u516c\u5e03\u7279\u522b\u5ba1\u8ba1\u4e4b\u524d\u5411\u6295\u8d44\u8005\u53d1\u8868\u7684\u6f5c\u5728\u8bef\u5bfc\u6027\u9648\u8ff0\u3002\n\u5728\u6bd5\u9a6c\u5a01(KPMG)\u7684\u5ba1\u8ba1\u8868\u793a\uff0c\u65e0\u6cd5\u6838\u5b9e2016\u5e74\u81f32018\u5e74\u671f\u95f4\u7b2c\u4e09\u65b9\u9500\u552e\u548c\u5229\u6da6\u7684\u771f\u5b9e\u6027\u540e\uff0cWirecard\u7684\u80a1\u4ef7\u66b4\u8dcc\uff0c\u800c\u8fd9\u4e9b\u9500\u552e\u548c\u5229\u6da6\u662f\u4e3e\u62a5\u4eba\u6307\u63a7\u7684\u6838\u5fc3\u3002\u81ea\u82f1\u56fd\u201c\u91d1\u878d\u65f6\u62a5\u201d\u62a5\u9053\u7684\u9488\u5bf9\u8fd9\u4e9b\u6307\u63a7\u7684\u7279\u522b\u5ba1\u8ba1\u516c\u5e03\u4ee5\u6765\uff0c\u8be5\u96c6\u56e2\u80a1\u4ef7\u5df2\u4e0b\u8dcc27%\u3002\n\u6155\u5c3c\u9ed1\u68c0\u5bdf\u5b98\u8868\u793a\uff0c\u8c03\u67e5\u7684\u6838\u5fc3\u662fWirecard\u5728\u4eca\u5e743\u670812\u65e5\u548c4\u670822\u65e5\u53d1\u5e03\u7684\u4e24\u4efd\u58f0\u660e\uff0c\u8fd9\u4e24\u4efd\u58f0\u660e\u53ef\u80fd\u8bef\u5bfc\u4e86\u6295\u8d44\u8005\u3002\u5728\u6bcf\u4e00\u4efd\u58f0\u660e\u4e2d\uff0cWirecard\u90fd\u544a\u8bc9\u6295\u8d44\u8005\uff0c\u6bd5\u9a6c\u5a01\u7684\u7279\u522b\u5ba1\u8ba1\u8fc4\u4eca\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u4e0d\u59a5\u4e4b\u5904\u3002\nWirecard\u57284\u670822\u65e5\u7684\u58f0\u660e\u4e2d\u5ba3\u5e03\u7b2c\u4e8c\u6b21\u63a8\u8fdf\u516c\u5e03\u6bd5\u9a6c\u5a01\u5ba1\u8ba1\u62a5\u544a\uff0c\u79f0\u201c\u8fc4\u4eca\u6ca1\u6709\u91cd\u5927\u53d1\u73b0\u201d\u9700\u8981\u66f4\u6b63\u524d\u4e09\u5e74\u7684\u8d22\u52a1\u62a5\u8868\uff0c\u800c\u4e14\u201c\u6ca1\u6709\u53d1\u73b0\u516c\u5f00\u63d0\u51fa\u7684\u64cd\u7eb5\u8d44\u4ea7\u8d1f\u503a\u8868\u6307\u63a7\u7684\u8bc1\u636e\u201d\u3002\nWirecard\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u88ab\u89c6\u4e3a\u5fb7\u56fd\u6700\u6210\u529f\u7684\u79d1\u6280\u516c\u53f8\u4e4b\u4e00\uff0c\u5e76\u4e8e2018\u5e74\u53d6\u4ee3\u5fb7\u56fd\u5546\u4e1a\u94f6\u884c\u6210\u4e3a\u8be5\u56fd\u4eab\u6709\u76db\u8a89\u7684DAX\u6307\u6570\u7684\u6210\u5458\u3002Wirecard\u8bc1\u5b9e\u5176\u529e\u516c\u5ba4\u906d\u5230\u641c\u67e5\u3002\nWirecard\u5728\u5fb7\u56fd\u80a1\u5e02\u5468\u4e94\u6536\u76d8\u540e\u53d1\u5e03\u7684\u58f0\u660e\u4e2d\u79f0\uff0c\u201c\u8c03\u67e5\u9488\u5bf9\u7684\u4e0d\u662f\u8be5\u516c\u53f8\uff0c\u800c\u662f\u5176\u7ba1\u7406\u8463\u4e8b\u4f1a\u6210\u5458.\u201d\u8be5\u7ec4\u7ec7\u8865\u5145\u8bf4\uff0c\u5b83\u6b63\u5728\u4e0e\u5f53\u5c40\u5145\u5206\u5408\u4f5c\u3002\n\u6155\u5c3c\u9ed1\u68c0\u5bdf\u5b98\u5bf9Wirecard\u7ba1\u7406\u59d4\u5458\u4f1a\u7684\u8c03\u67e5\u589e\u52a0\u4e86\u5b83\u7684\u6cd5\u5f8b\u9ebb\u70e6\u6e05\u5355\u3002\u5fb7\u56fd\u5ba1\u8ba1\u76d1\u7763\u673a\u6784\u8d22\u52a1\u62a5\u544a\u6267\u884c\u59d4\u5458\u4f1a(Financial Reporting Execution Panel)\u6b63\u5728\u8c03\u67e5\u8be5\u96c6\u56e2\u7684\u4f1a\u8ba1\u60c5\u51b5\u3002\u6700\u8fd1\u51e0\u5468\uff0c\u80a1\u4e1c\u548c\u5356\u7a7a\u8005\u4e5f\u63d0\u8d77\u4e86\u6c11\u4e8b\u8bc9\u8bbc\u548c\u5211\u4e8b\u8bc9\u8bbc\u3002\n\u8054\u90a6\u91d1\u878d\u76d1\u7ba1\u5c40\u8fd8\u5728\u8c03\u67e5\uff0c\u5e03\u52b3\u6069\u6700\u8fd1\u8d2d\u4e70\u4e86\u20ac250\u4e07\u80a1Wirecard\u80a1\u7968\uff0c\u662f\u5426\u8fdd\u53cd\u4e86\u5728\u5168\u5e74\u4e1a\u7ee9\u516c\u5e03\u524d30\u5929\u5185\u7981\u6b62\u4ea4\u6613\u7684\u89c4\u5b9a\u3002\nWirecard\u9519\u8fc7\u4e86\u53d1\u5e032019\u5e74\u5e74\u62a5\u76844\u670830\u65e5\u6700\u540e\u671f\u9650\uff0c\u5e76\u5c06\u5b89\u6c38(EY)\u5ba1\u8ba1\u7684\u6570\u636e\u53d1\u5e03\u63a8\u8fdf\u52306\u670818\u65e5\uff0c\u539f\u56e0\u662f\u51a0\u72b6\u75c5\u6bd2\u3002\n\u8fd9\u5bb6\u603b\u90e8\u4f4d\u4e8e\u6ce2\u6069\u7684\u76d1\u7ba1\u673a\u6784\u8868\u793a\uff0c\u5bf9Wirecard\u6f5c\u5728\u5e02\u573a\u64cd\u7eb5\u884c\u4e3a\u7684\u7b2c\u4e8c\u6b21\u5185\u90e8\u8c03\u67e5\u4ecd\u5728\u8fdb\u884c\u4e2d\u3002\u4e00\u5e74\u591a\u6765\uff0c\u8be5\u76d1\u7ba1\u673a\u6784\u4e00\u76f4\u5728\u8bc4\u4f30\u8be5\u516c\u53f82019\u5e74\u56de\u5e94\u4e3e\u62a5\u4eba\u4f1a\u8ba1\u6b3a\u8bc8\u6307\u63a7\u7684\u6c9f\u901a\u662f\u5426\u5b58\u5728\u6f5c\u5728\u8bef\u5bfc\u6027\u3002", "note_en": "German financial watchdog filed criminal complaint against CEO Markus Braun and three other top executives\n Wirecard\u2019s headquarters were searched by police on Friday after Munich prosecutors launched a criminal investigation against chief executive Markus Braun and the payment group\u2019s three other executive board members.\n In a statement on Friday, Munich prosecutors said that the search followed a criminal complaint submitted a few days earlier by BaFin, Germany\u2019s financial watchdog. The complaint relates to potentially misleading statements made by Wirecard to investors ahead of the publication of  a special audit by KPMG in late April.\n Shares in Wirecard tumbled after the KPMG audit said it was  unable to verify the genuineness of sales and profits from third parties between 2016 and 2018 that are central to the whistleblower allegations. The group\u2019s stock has fallen 27 per cent since the publication of the special audit into the allegations, which were reported by the Financial Times.\n  At the core of the investigation are two statements issued by Wirecard on  March 12 and  April 22 this year that might have been misleading to investors, the Munich prosecutors said. In each of the statements, Wirecard told investors that KPMG\u2019s special audit had so far not found anything untoward.\n In its April 22 statement, when Wirecard announced a second delay to the publication of the KPMG audit, it said that \u201cto date no substantial findings have been made\u201d that required a correction of the financial statements for the previous three years, and that \u201cno evidence was found for the publicly raised allegations of balance sheet manipulation\u201d.\n    Wirecard, which has long been seen as one of Germany\u2019s most successful technology companies and in 2018 replaced Commerzbank as a member of the country\u2019s prestigious Dax index, confirmed that its offices had been searched.\n \u201cThe investigations are not targeting the company, but the members of its management board,\u201d Wirecard said in a statement released after the German stock market closed on Friday. The group added that it was fully co-operating with the authorities.\n The investigation by Munich prosecutors against Wirecard\u2019s management board adds to its list of legal troubles. Germany\u2019s audit watchdog, the Financial Reporting Enforcement Panel,  is investigating the group\u2019s accounting. Shareholders and short sellers have in recent weeks also filed  civil lawsuits and  criminal complaints.\n BaFin is also  examining whether a recent \u20ac2.5m purchase of Wirecard shares by Mr Braun violated prohibitions against trading within 30 days prior to publication of full-year results.\n  Wirecard missed the April 30 deadline for the publication of its 2019 annual report, and has delayed the release of figures audited by EY to June 18, blaming coronavirus.\n  The Bonn-based watchdog said a second internal investigation into potential market manipulation by Wirecard is still ongoing. The watchdog for more than a year has been evaluating if the company\u2019s communication in 2019 in response to whistleblower allegations over accounting fraud were potentially misleading.", "posttime": "2020-06-06 19:59:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c03\u67e5,offices,wirecard", "title": "\u68c0\u5bdf\u5b98\u8c03\u67e5\u7ba1\u7406\u59d4\u5458\u4f1a\uff0c\u641c\u67e5Wirecard\u529e\u516c\u5ba4", "title_en": "Wirecard offices searched as prosecutors probe management board", "transed": 1, "url": "https://www-ft-com.ezproxy.babson.edu/content/049d7f17-a99c-465d-8062-5e07fd9315b1", "via": "", "real_tags": ["\u8c03\u67e5", "offices", "wirecard"]}, {"category": "", "categoryclass": "", "imagename": "a44cdfd3e2c4e4158d30cfdb0bb8375d.png", "infoid": 1005429, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7248\u6743\u6240\u67092020 Google LLCL\u6839\u636e\u963f\u5e15\u5947\u8bb8\u53ef\u8bc12.0\u7248(\u8be5\u8bb8\u53ef\u8bc1)\uff1b\u9664\u975e\u9075\u5b88\u8be5\u8bb8\u53ef\u8bc1\uff0c\u5426\u5219\u60a8\u4e0d\u80fd\u4f7f\u7528\u672c\u6587\u4ef6\u3002\u60a8\u53ef\u4ee5\u4ecehttps://www.apache.org/licenses/LICENSE-2.0Unless\u83b7\u53d6\u9002\u7528\u6cd5\u5f8b\u8981\u6c42\u6216\u4e66\u9762\u540c\u610f\u7684\u8bb8\u53ef\u8bc1\u526f\u672c\uff0c\u6839\u636e\u8be5\u8bb8\u53ef\u8bc1\u5206\u53d1\u7684\u8f6f\u4ef6\u6309\u539f\u6837\u5206\u53d1\uff0c\u6ca1\u6709\u4efb\u4f55\u5f62\u5f0f\u7684\u62c5\u4fdd\u6216\u6761\u4ef6\uff0c\u65e0\u8bba\u662f\u660e\u793a\u7684\u8fd8\u662f\u9ed8\u793a\u7684\u3002\u8bf7\u53c2\u9605\u8bb8\u53ef\u8bc1\u4e2d\u7ba1\u8f96\u6743\u9650\u548c\u9650\u5236\u7684\u7279\u5b9a\u8bed\u8a00\u7684\u8bb8\u53ef\u8bc1\u3002\nTinyInst\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u52a8\u6001\u63d2\u88c5\u5e93\uff0c\u53ef\u7528\u4e8e\u4ec5\u68c0\u6d4b\u6d41\u7a0b\u4e2d\u9009\u5b9a\u7684\u6a21\u5757\uff0c\u800c\u8ba9\u6d41\u7a0b\u7684\u5176\u4f59\u90e8\u5206\u672c\u673a\u8fd0\u884c\u3002\u5b83\u5e94\u8be5\u662f\u6613\u4e8e\u7406\u89e3\u3001\u6613\u4e8e\u7834\u89e3\u548c\u6613\u4e8e\u7834\u89e3\u7684\u3002\u5b83\u5e76\u4e0d\u662f\u8bbe\u8ba1\u6210\u4e0e\u6240\u6709\u76ee\u6807\u517c\u5bb9\u7684(\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd)\u3002\nTinyInst\u5e76\u4e0d\u662f\u4f5c\u4e3aDynamoRIO\u548cPIN\u7b49\u590d\u6742\u68c0\u6d4b\u6846\u67b6\u7684\u66ff\u4ee3\u54c1\uff0c\u800c\u662f\u4f5c\u4e3a\u66f4\u8f7b\u91cf\u7ea7\u89e3\u51b3\u65b9\u6848\u7684\u66ff\u4ee3\u65b9\u6848\u3002TinyInst\u5047\u8bbe\u76ee\u6807\u884c\u4e3a\u826f\u597d(\u5728\u4e0b\u9762\u89e3\u91ca\u7684\u610f\u4e49\u4e0a)\uff0c\u800c\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6846\u67b6\u5219\u4e0d\u662f\u8fd9\u6837\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u80fd\u65e0\u6cd5\u50cf\u4ee5\u524d\u4f7f\u7528DynamoRIO\u90a3\u6837\u9488\u5bf9\u6076\u610f\u8f6f\u4ef6\u6210\u529f\u8fd0\u884cTinyInst\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u76ee\u6807\u7531\u4e8e\u4e0d\u9700\u8981\u68c0\u6d4b\u7684\u6a21\u5757\u800c\u4e0d\u80fd\u4e0e\u5176\u4ed6\u6846\u67b6\u4e00\u8d77\u5de5\u4f5c\uff0c\u5e76\u4e14\u68c0\u6d4b\u5230\u7684\u6a21\u5757\u884c\u4e3a\u826f\u597d\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4f1a\u4e0eTinyInst\u4e00\u8d77\u5de5\u4f5c\u3002\u56e0\u4e3a\u4f7f\u7528TinyInst\uff0c\u5927\u591a\u6570\u8fdb\u7a0b\u5c06\u5728\u672c\u5730\u8fd0\u884c\uff0c\u56e0\u6b64\u5b83\u7684\u8fdb\u7a0b\u542f\u52a8\u65f6\u95f4\u66f4\u77ed\uff0c\u5e76\u4e14\u5728\u76ee\u6807\u8fdb\u7a0b\u5728\u4e0d\u9700\u8981\u68c0\u6d4b\u7684\u6a21\u5757\u4e2d\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u6027\u80fd\u53ef\u80fd\u4f18\u4e8e\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u3002\nTinyInst\u662f\u4e00\u4e2a\u5b8c\u5168\u7684\u4e8c\u8fdb\u5236\u91cd\u5199\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u76ee\u6807\u6a21\u5757\u4e2d\u66f4\u6539\u4efb\u610f\u884c\u4e3a\u3002\u4f8b\u5982\uff0c\u8fd9\u4f7f\u5f97\u5b83\u80fd\u591f\u63d0\u53d6\u8fb9\u7f18\u8986\u76d6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u57fa\u672c\u5757\u3002\u6b64\u5916\uff0cTinyInst\u4e0d\u4f9d\u8d56\u5176\u4ed6\u8f6f\u4ef6(\u5982IDA Pro)\u6765\u8bc6\u522b\u57fa\u672c\u5757\u3002\n\u76ee\u524d\u4ec5\u9650Windows(32\u4f4d\u548c64\u4f4d)\u3002\u5c06\u6765\u53ef\u80fd\u4f1a\u8003\u8651\u652f\u6301Mac OS\u3002\n\u7a0b\u5e8f\u6c38\u8fdc\u4e0d\u4f1a\u76f4\u63a5\u8bbf\u95ee\u5806\u6808\u4e0a\u7684\u8fd4\u56de\u5730\u5740OR/AND(\u53d6\u51b3\u4e8e\u8bbe\u7f6e)\u3002\n\u5728\u5806\u6808\u9876\u90e8\u4e4b\u524d\u4e0d\u4f1a\u5b58\u50a8\u4efb\u4f55\u6570\u636e(\u5728\u4f4e\u4e8eESP/RSP\u6307\u5411\u7684\u5730\u5740\u4e0a)\u3002\u53ef\u4ee5\u4f7f\u7528-STACK_OFFSET\u6807\u5fd7\u5c06\u6b64\u6761\u4ef6\u653e\u5bbd\u4e3a\u5728(ESP/RSP-ARBitrary_OFFSET)&#34\uff1b\u4e4b\u524d\u6ca1\u6709\u6570\u636e\u3002\n\u6839\u636e\u5bf9\u56fe\u50cf\u89e3\u7801\u7684\u65e9\u671f\u6d4b\u91cf\uff0c\u5728\u5177\u6709\u9ed8\u8ba4TinyInst\u8bbe\u7f6e\u7684\u884c\u4e3a\u826f\u597d\u768464\u4f4d\u76ee\u6807\u4e0a\uff0c\u6ca1\u6709\u5ba2\u6237\u7aef\u7684\u6027\u80fd\u5f00\u9500\u7ea6\u4e3a15%\uff0c\u4f7f\u7528\u793a\u4f8b\u8986\u76d6\u6536\u96c6\u5ba2\u6237\u7aef\u7684\u6027\u80fd\u5f00\u9500\u7ea6\u4e3a20%\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0d\u5305\u62ec\u6700\u521d\u63d2\u5165\u6307\u4ee4\u7684\u6a21\u5757\u5f15\u5165\u7684\u8d85\u65f6\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u6027\u80fd\u63d0\u793a\u3002\n\u6253\u5f00\u547d\u4ee4\u63d0\u793a\u7b26\u5e76\u8bbe\u7f6e\u6784\u5efa\u73af\u5883\uff0c\u4f8b\u5982\u8fd0\u884cvcvars64.bat/vcvars32.bat\u3002\n\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4(\u6839\u636e\u8981\u751f\u6210\u7684Visual Studio\u548c\u5e73\u53f0\u7684\u7248\u672c\u66f4\u6539\u751f\u6210\u5668)\uff1a\n\u6ce82\uff1a\u7531\u4e8e\u73af\u5883\u8bbe\u7f6e\u4e0d\u6b63\u786e\u548c\u5e93\u4e22\u5931\uff0c\u572864\u4f4dWindows\u4e0a\u521b\u5efa32\u4f4d\u7248\u672c\u65f6\u9047\u5230\u95ee\u9898\uff1f\u5728Visual Studio\u4e2d\u6253\u5f00\u751f\u6210\u7684.sln\u6587\u4ef6\u5e76\u4ece\u90a3\u91cc\u8fdb\u884c\u6784\u5efa\uff0c\u800c\u4e0d\u662f\u8fd0\u884ccmake--build\u3002\u8fd8\u8981\u6ce8\u610f\uff0c64\u4f4d\u6784\u5efa\u5c06\u572832\u4f4d\u76ee\u6807\u4e0a\u5de5\u4f5c\uff0c\u56e0\u6b64\u53ef\u80fd\u6ca1\u6709\u5fc5\u8981\u521b\u5efa32\u4f4d\u6784\u5efa\u3002\nTinyInst\u5ba2\u6237\u7aef\u88ab\u7f16\u5199\u4e3aTinyInst\u7c7b\u7684\u5b50\u7c7b\u3002\u7136\u540e\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u8986\u76d6\u5b83\u9700\u8981\u7684API\u65b9\u6cd5\u3002API\u65b9\u6cd5\u5b9a\u4e49\u5982\u4e0b\u3002\n\u521b\u5efa\u5ba2\u6237\u7aef\u540e\uff0c\u5fc5\u987b\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879\u901a\u8fc7\u8c03\u7528\u3002\n\u4e0b\u9762\u5b9a\u4e49\u4e86\u547d\u4ee4\u884c\u9009\u9879\uff0c\u5ba2\u6237\u7aef\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5b83\u4eec\u81ea\u5df1\u7684\u9009\u9879\u3002\u4e4b\u540e\uff0c\u8981\u8fd0\u884c\u548c\u63a7\u5236\u63d2\u5165\u6307\u4ee4\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u3002\n\u8fd9\u4e9b\u51fd\u6570\u6216\u8005\u8fd0\u884c\u7a0b\u5e8f(\u4f7f\u7528\u6307\u5b9a\u7684\u547d\u4ee4\u884c)\uff0c\u6216\u8005\u9644\u52a0\u5230\u5df2\u7ecf\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u672a\u6307\u5b9a\u76ee\u6807\u65b9\u6cd5\uff0c\u5219\u76ee\u6807\u5c06\u7ee7\u7eed\u8fd0\u884c\uff0c\u76f4\u5230\u7a0b\u5e8f\u9000\u51fa\u3001\u7a0b\u5e8f\u5d29\u6e83\u6216\u8d85\u65f6(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u5230\u671f\u3002\u5982\u679c\u5b9a\u4e49\u4e86\u76ee\u6807\u65b9\u6cd5\uff0c\u5219\u6bcf\u5f53\u8f93\u5165\u76ee\u6807\u65b9\u6cd5\u548c\u8fd4\u56de\u76ee\u6807\u65b9\u6cd5\u65f6\uff0cTinyInst\u90fd\u5c06\u8fd4\u56de\uff0c\u4ece\u800c\u5141\u8bb8\u8c03\u7528\u8005\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u3002\n\u5f53\u76ee\u6807\u8fdb\u7a0b\u4ecd\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u65f6\u8fd0\u884c\u5e76\u9644\u52a0\u8fd4\u56de\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u6765\u7ec8\u6b62\u8fdb\u7a0b\u6216\u7ee7\u7eed\u6267\u884c\u3002\n\u8fd9\u4e9b\u56de\u8c03\u4ec5\u4f9b\u53c2\u8003\uff0c\u5ba2\u6237\u7aef\u5728\u56de\u8c03\u671f\u95f4\u4e0d\u5e94\u53d1\u51fa\u4efb\u4f55\u68c0\u6d4b\u4ee3\u7801\u3002\u5728\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u672c\u8eab\u4e4b\u524d\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u8c03\u7528\u8d85\u7c7b\u4e2d\u5b9a\u4e49\u7684\u76f8\u540c\u5904\u7406\u7a0b\u5e8f\u3002\nOnTargetMethodReached\u5982\u679c\u5b9a\u4e49\u4e86\u76ee\u6807\u65b9\u6cd5\uff0c\u5219\u5728\u7b2c\u4e00\u6b21\u5230\u8fbe\u76ee\u6807\u65b9\u6cd5\u65f6\u8c03\u7528\u3002\n\u9047\u5230\u5f02\u5e38\u65f6\u8c03\u7528OnExceptionCalled\u3002\u5ba2\u6237\u7aef\u5fc5\u987b\u8fd4\u56deTRUE(\u5982\u679c\u5f02\u5e38\u5df2\u5904\u7406)\u6216\u7236\u7c7b\u4e0a\u76f8\u540c\u65b9\u6cd5\u7684\u7ed3\u679c\u3002\nOnBasicBlock\u53ef\u7528\u4e8e\u63d2\u5165\u5c06\u5728\u7279\u5b9a\u57fa\u672c\u5757\u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u3002\nOnEdge\u53ef\u7528\u4e8e\u63d2\u5165\u5c06\u5728\u7279\u5b9a\u8fb9\u7f18\u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u3002\u6ce8\u610f\uff1a\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u6b64\u56de\u8c03\u4ec5\u5728\u4e0d\u786e\u5b9a\u7684\u8fb9\u7f18(\u5373\u6761\u4ef6\u8df3\u8f6c)\u548c\u95f4\u63a5\u8df3\u8f6c/\u8c03\u7528(\u4f8b\u5982\u8c03\u7528rax)\u4e0a\u53d1\u51fa\u3002\u5bf9\u4e8e\u5728\u7ed9\u5b9a\u524d\u4e00\u4e2a\u57fa\u672c\u5757\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0b\u4e00\u4e2a\u57fa\u672c\u5757\u603b\u662f\u5df2\u77e5\u7684\u8fb9(\u4f8b\u5982\uff0cJMP\u504f\u79fb\u3001\u8c03\u7528\u504f\u79fb)\uff0c\u4e0d\u4f1a\u53d1\u51fa\u56de\u8c03\u3002\nOnInstructionOn\u53ef\u7528\u4e8e\u4fee\u6539\u6307\u4ee4\u6216\u5728\u5176\u4e4b\u524d\u63d2\u5165\u4ee3\u7801\u3002\u6839\u636e\u8fd4\u56de\u4ee3\u7801\u7684\u4e0d\u540c\uff0c\u539f\u59cb\u6307\u4ee4\u8981\u4e48\u5728\u56de\u8c03\u540e\u53d1\u51fa\uff0c\u8981\u4e48\u4e0d\u53d1\u51fa\u3002\n\u68c0\u6d4b\u6a21\u5757\u65f6\u8c03\u7528OnModuleInstrumented.\u3002\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u5230\u8fbe\u8fdb\u7a0b\u5165\u53e3\u70b9\u65f6(\u5982\u679c\u672a\u5b9a\u4e49\u76ee\u6807\u65b9\u6cd5)\u6216\u5230\u8fbe\u76ee\u6807\u65b9\u6cd5\u65f6(\u5982\u679c\u5b9a\u4e49\u4e86\u76ee\u6807\u65b9\u6cd5)\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u6b64\u5904\u521d\u59cb\u5316\u4e0e\u68c0\u6d4b\u76f8\u5173\u7684\u6570\u636e\u3002\n\u5728\u68c0\u6d4b\u6570\u636e\u4e0d\u518d\u6709\u6548\u4e14\u9700\u8981\u6e05\u9664\u65f6\u8c03\u7528OnModuleUnInstrumentedCalled\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0e\u5378\u8f7d\u6a21\u5757\u4e0d\u540c\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6307\u4ee4\u63d2\u5165\u4f1a\u5728\u6a21\u5757\u5378\u8f7d/\u91cd\u65b0\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u6301\u7eed\u5b58\u5728\u3002\u6b64\u56de\u8c03\u53ef\u7528\u4e8e\u6e05\u9664\u5ba2\u6237\u7aef\u4e2d\u4e0e\u68c0\u6d4b\u76f8\u5173\u7684\u4efb\u4f55\u6570\u636e\u3002\n-Instrument_MODULE[\u6a21\u5757\u540d\u79f0]\u6307\u5b9a\u8981\u68c0\u6d4b\u7684\u6a21\u5757\uff0c\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2aInstrument_MODULE\u9009\u9879\u6765\u68c0\u6d4b\u591a\u4e2a\u6a21\u5757\u3002\n-PATCH_RETURN_ADDRESS-\u5c06\u8fd4\u56de\u5730\u5740\u66ff\u6362\u4e3a\u539f\u59cb\u503c\uff0c\u5bfc\u81f4\u4f7f\u7528\u6307\u5b9a\u7684\u4efb\u4f55-INDIRECT_INTERFORMENT\u65b9\u6cd5\u68c0\u6d4b\u8fd4\u56de\u3002\n-Persistent_Instrumentation_Data(\u9ed8\u8ba4\u503c=TRUE)\u4e0d\u4f1a\u5728\u6a21\u5757\u5378\u8f7d/\u91cd\u65b0\u52a0\u8f7d\u65f6\u91cd\u65b0\u68c0\u6d4b\u6a21\u5757\u3002\u4ec5\u5f53\u6a21\u5757\u52a0\u8f7d\u5230\u4e0e\u4e4b\u524d\u52a0\u8f7d\u7684\u5730\u5740\u76f8\u540c\u7684\u5730\u5740\u65f6\u624d\u8d77\u4f5c\u7528\u3002\n-Instrument_Cross_MODULE_CALLES(\u9ed8\u8ba4\u503c=TRUE)\u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2aInstrument_MODULE\u6a21\u5757\uff0c\u5e76\u4e14\u4e00\u4e2a\u8c03\u7528\u8fdb\u5165\u53e6\u4e00\u4e2a\u6a21\u5757\uff0c\u5219\u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u6307\u4ee4\u63d2\u5165\u4ee3\u7801\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u5f02\u5e38(\u8fd9\u4f1a\u5bfc\u81f4\u901f\u5ea6\u51cf\u6162)\u3002\n-STACK_OFFSET(\u9ed8\u8ba4\u503c=0)\u5728\u5806\u6808\u4e0a\u4fdd\u5b58\u4e0a\u4e0b\u6587\u65f6\uff0c\u4fdd\u6301\u5806\u6808\u9876\u90e8(\u5806\u6808\u6307\u9488\u4e4b\u524d)\u7684\u5b57\u8282\u6570\u4e0d\u53d8\u3002\nTinyInst\u5141\u8bb8\u7528\u6237\u5b9a\u4e49\u76ee\u6807\u65b9\u6cd5\u3002\u5982\u679c\u5b9a\u4e49\u4e86\u76ee\u6807\u65b9\u6cd5\uff0c\u5219\u5728\u7b2c\u4e00\u6b21\u5230\u8fbe\u76ee\u6807\u65b9\u6cd5\u4e4b\u524d\uff0c\u4e0d\u4f1a\u68c0\u6d4b\u4efb\u4f55\u4ee3\u7801(\u6240\u6709\u4ee3\u7801\u90fd\u5c06\u5728\u672c\u5730\u8fd0\u884c)\u3002\u6b64\u5916\uff0cTinyInst\u5c06\u4e2d\u65ad\u76ee\u6807\u65b9\u6cd5\u5165\u53e3\u548c\u51fa\u53e3\u7684\u6267\u884c\u3002\n-target_method-\u76ee\u6807\u65b9\u6cd5\u7684\u540d\u79f0\u3002\u8fd9\u4ec5\u5728\u5bfc\u51fa\u76ee\u6807\u65b9\u6cd5\u6216\u60a8\u5177\u6709\u76ee\u6807\u6a21\u5757\u7684\u7b26\u53f7\u65f6\u624d\u6709\u6548\u3002\n-target_offset-\u5f53\u65e0\u6cd5\u6309\u540d\u79f0\u6307\u5b9a\u76ee\u6807\u65b9\u6cd5\u65f6\u4f7f\u7528\u3002\u76ee\u6807\u65b9\u6cd5\u5728\u6a21\u5757\u5e93\u4e2d\u7684\u76f8\u5bf9\u5730\u5740\n-loop-\u5982\u679c\u6307\u5b9a\u4e86\u6b64\u6807\u5fd7\uff0cTinyInst\u5c06\u5728\u65e0\u9650\u5faa\u73af\u4e2d\u8fd0\u884c\u76ee\u6807\u65b9\u6cd5(\u6216\u76f4\u5230\u8c03\u7528Kill()\u6216\u8fdb\u7a0b\u56e0\u5176\u4ed6\u539f\u56e0\u7ec8\u6b62)\u3002\u51fd\u6570\u53c2\u6570\u5c06\u5728\u8fed\u4ee3\u4e4b\u95f4\u4fdd\u5b58\u548c\u6062\u590d\u3002\u8fd9\u4e3b\u8981\u7528\u4e8e\u5f3a\u5236\u6a21\u7cca\u7684\u6301\u4e45\u6027\u3002\n-nargs-\u8981\u5728\u8fed\u4ee3\u4e4b\u95f4\u4fdd\u5b58\u7684\u76ee\u6807\u65b9\u6cd5\u53c2\u6570\u7684\u6570\u91cf\u3002\u4e0e-loop\u4e00\u8d77\u4f7f\u7528\u3002\nTinyInst\u9644\u5e26\u4e86\u4e00\u4e2a(\u793a\u4f8b)\u8986\u76d6\u6a21\u5757LiteCov\u3002\u8986\u76d6\u6a21\u5757\u53ef\u4ee5\u6536\u96c6\u57fa\u672c\u7684\u5757\u6216\u8fb9\u7f18\u8986\u76d6(\u4f7f\u7528-covtype\u6807\u5fd7\u8fdb\u884c\u63a7\u5236)\u3002\nCoverage\u6a21\u5757\u7684\u7279\u6b8a\u529f\u80fd\u662f\uff0c\u76ee\u6807\u8fdb\u7a0b\u4e2d\u7684Coverage\u7f13\u51b2\u533a\u6700\u521d\u88ab\u5206\u914d\u4e3a\u53ea\u8bfb\uff0c\u5728\u7b2c\u4e00\u6b21\u9047\u5230\u65b0\u7684Coverage\u65f6\u4f1a\u5bfc\u81f4\u5f02\u5e38\u3002\u4e0e\u5ffd\u7565\u67d0\u4e2a\u8986\u76d6\u7387\u5b50\u96c6\u7684\u9009\u9879\u76f8\u7ed3\u5408\uff0c\u53ef\u4ee5\u5feb\u901f\u67e5\u8be2\u4f7f\u7528\u7ed9\u5b9a\u8f93\u5165\u8fd0\u884c\u76ee\u6807\u662f\u5426\u4f1a\u4ea7\u751f\u65b0\u7684\u8986\u76d6\u7387\u3002\nTinyInst\u6784\u5efa\u5728\u81ea\u5b9a\u4e49\u8c03\u8bd5\u5668\u4e4b\u4e0a\u3002\u8c03\u8bd5\u5668\u76d1\u89c6\u76ee\u6807\u8fdb\u7a0b\u4e2d\u7684\u4e8b\u4ef6\uff0c\u5982\u52a0\u8f7d\u6a21\u5757\u3001\u547d\u4e2d\u65ad\u70b9\u3001\u6fc0\u53d1\u5f02\u5e38\u7b49\u3002\u5982\u679c\u6307\u5b9a\u4e86\u76ee\u6807\u65b9\u6cd5\uff0c\u8c03\u8bd5\u5668\u8fd8\u5b9e\u73b0\u65ad\u70b9\u548c\u6301\u4e45\u6027\u3002\n\u5f53\u52a0\u8f7d\u8981\u68c0\u6d4b\u7684\u6a21\u5757\u65f6\uff0c\u6700\u521d\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u68c0\u6d4b\u8be5\u6a21\u5757\u3002\n\u6a21\u5757\u4e2d\u7684\u6240\u6709\u53ef\u6267\u884c\u533a\u57df\u90fd\u6807\u8bb0\u4e3a\u4e0d\u53ef\u6267\u884c\uff0c\u540c\u65f6\u4fdd\u7559\u539f\u6765\u7684\u5176\u4ed6\u6743\u9650(\u8bfb/\u5199)\u3002\u6bcf\u5f53\u63a7\u5236\u6d41\u5230\u8fbe\u68c0\u6d4b\u5230\u7684\u6a21\u5757\u65f6\uff0c\u8fd9\u90fd\u4f1a\u5bfc\u81f4\u5f02\u5e38\uff0c\u8be5\u6a21\u5757\u7531\u8c03\u8bd5\u5668\u6355\u83b7\u548c\u5904\u7406\u3002\n\u5728\u539f\u59cb\u6a21\u5757\u5730\u5740\u8303\u56f4\u76842 GB\u5185\u5206\u914d\u53ef\u6267\u884c\u5185\u5b58\u533a\u57df\u3002\u8fd9\u91cc\u5c06\u653e\u7f6e\u6a21\u5757\u7684\u63d2\u5165\u6307\u4ee4/\u91cd\u5199\u7684\u4ee3\u7801\u30022 GB\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4f7f\u7528[RIP+OFFSET]\u5f62\u5f0f\u7684\u6240\u6709\u5bfb\u5740\u6307\u4ee4\u66ff\u6362\u4e3a[RIP+FIXED_OFFSET]\u3002\n\u65e0\u8bba\u4f55\u65f6\u8fdb\u5165\u63d2\u5165\u6307\u4ee4\u7684\u6a21\u5757(\u65e0\u8bba\u662f\u7b2c\u4e00\u6b21\u8fd8\u662f\u4efb\u4f55\u5176\u4ed6\u65f6\u95f4)\uff0c\u90fd\u4f1a\u68c0\u6d4b\u547d\u4e2d\u7684\u57fa\u672c\u5757\uff0c\u4ee5\u53ca\u901a\u8fc7\u9012\u5f52\u8ddf\u968f\u6761\u4ef6\u5206\u652f\u4ee5\u53ca\u76f4\u63a5\u8c03\u7528\u548c\u8df3\u8f6c(\u4f8b\u5982\uff0cJMP\u504f\u79fb\u91cf\u3001\u8c03\u7528\u504f\u79fb\u91cf)\u53ef\u4ee5\u53ef\u9760\u5730\u53d1\u73b0\u7684\u6240\u6709\u57fa\u672c\u5757\u3002\n\u6240\u6709\u95f4\u63a5\u8df3\u8f6c/\u8c03\u7528(\u4f8b\u5982\u8c03\u7528rax)\u90fd\u5c06\u843d\u5728\u5b83\u4eec\u7684\u539f\u59cb\u4ee3\u7801\u4f4d\u7f6e\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5f02\u5e38\uff0c\u8c03\u8bd5\u5668\u901a\u8fc7\u5c06\u6307\u4ee4\u6307\u9488\u66ff\u6362\u4e3a\u63d2\u5165\u6307\u4ee4\u7684\u4ee3\u7801\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\u6765\u89e3\u51b3\u8be5\u5f02\u5e38\u3002\n\u4f46\u662f\uff0c\u5c3d\u7ba1\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5b83\u5c06\u5728\u76ee\u6807\u4f4d\u4e8e\u63d2\u5165\u6307\u4ee4\u7684\u6a21\u5757\u4e2d\u7684\u6bcf\u4e2a\u95f4\u63a5\u8c03\u7528/\u8df3\u8f6c\u4e0a\u5bfc\u81f4\u5f02\u5e38\u3002\u7531\u4e8e\u5f02\u5e38\u5904\u7406\u5f88\u6162\uff0c\u5982\u679c\u6ca1\u6709\u989d\u5916\u7684\u68c0\u6d4b\uff0c\u68c0\u6d4b\u5177\u6709\u5927\u91cf\u95f4\u63a5\u6027(\u4f8b\u5982\uff0cC++\u4e2d\u7684\u865a\u65b9\u6cd5\u3001\u51fd\u6570\u6307\u9488)\u7684\u76ee\u6807\u5c06\u4f1a\u5f88\u6162\u3002\nTinyInst\u53ef\u4ee5\u68c0\u6d4b\u95f4\u63a5\u8c03\u7528\u548c\u8df3\u8f6c\uff0c\u4ee5\u907f\u514d\u5728(\u5df2\u7ecf\u770b\u5230\u7684)\u95f4\u63a5\u76ee\u6807\u4e0a\u51fa\u73b0\u5f02\u5e38\u3002\u63d2\u5165\u6307\u4ee4\u7684\u8c03\u7528/\u8df3\u8f6c\u4e0d\u662f\u8df3\u5230\u539f\u59cb\u76ee\u6807\uff0c\u800c\u662f\u8df3\u5230\u5b58\u6839\u94fe\u63a5\u5217\u8868\u7684\u5934\u90e8\u3002\u6bcf\u4e2a\u5b58\u6839\u5305\u542b\u4e00\u5bf9(Original_target\uff0cTranslated_target)\u3002\u5b83\u6d4b\u8bd5\u8df3\u8f6c/\u8c03\u7528\u76ee\u6807\u662f\u5426\u4e0eOriginal_TARGET\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\uff0c\u5219\u5c06\u63a7\u5236\u6d41\u5b9a\u5411\u5230TRANSPECTED_TARGET\u3002\u5426\u5219\uff0c\u5b83\u5c06\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5b58\u6839\u3002\u5982\u679c\u5230\u8fbe\u5217\u8868\u7684\u672b\u5c3e\uff0c\u8fd9\u610f\u5473\u7740\u4ee5\u524d\u6ca1\u6709\u770b\u5230\u8fc7\u8df3\u8f6c/\u8c03\u7528\u76ee\u6807\u3002\u8fd9\u5c06\u5bfc\u81f4\u8c03\u8bd5\u5668\u6355\u83b7\u65ad\u70b9\uff0c\u5e76\u901a\u8fc7\u521b\u5efa\u53e6\u4e00\u4e2a\u5b58\u6839\u5e76\u5c06\u5176\u63d2\u5165\u5217\u8868\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002\n\u5168\u5c40\u54c8\u5e0c\u8868\u5e26\u6765\u66f4\u597d\u7684\u6027\u80fd\u3002\u672c\u5730(\u6bcf\u4e2a\u8c03\u7528\u70b9\u5217\u8868)\u5141\u8bb8\u5728\u95f4\u63a5\u8c03\u7528/\u8df3\u8f6c\u65f6\u83b7\u5f97\u6b63\u786e\u7684\u8fb9\u7f18(\u5177\u6709\u6b63\u786e\u7684\u6e90\u5730\u5740)\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5728\u73b0\u4ee3Windows\u4e0a\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86CFG\uff0c\u6240\u6709\u95f4\u63a5\u8df3\u8f6c/\u8c03\u7528\u90fd\u53d1\u751f\u5728\u540c\u4e00\u4f4d\u7f6e\uff0c\u56e0\u6b64\uff0c\u4f7f\u7528CFG\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u53ef\u80fd(\u5982\u679c\u6ca1\u6709\u67d0\u79cd\u7279\u6b8a\u5904\u7406)\u83b7\u5f97\u51c6\u786e\u7684\u8fb9\u7f18\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5168\u5c40\u54c8\u5e0c\u5217\u8868\u662fTinyInst\u4e2d\u5904\u7406\u95f4\u63a5\u8c03\u7528/\u8df3\u8f6c\u7684\u9ed8\u8ba4\u65b9\u6cd5\u7684\u539f\u56e0\uff0c\u8fd8\u6709\u6027\u80fd\u4f18\u52bf\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u8c03\u7528\u53d1\u751f\u5728\u63d2\u5165\u6307\u4ee4\u7684\u4ee3\u7801\u4e2d\u65f6\uff0c\u6b63\u5728\u5199\u5165\u7684\u8fd4\u56de\u5730\u5740\u5c06\u662f\u63d2\u5165\u6307\u4ee4\u7684\u4ee3\u7801\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u8fd9\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u662f\uff0c\u5982\u679c\u76ee\u6807\u8fdb\u7a0b\u51fa\u4e8e\u8fd4\u56de\u4ee5\u5916\u7684\u76ee\u7684\u8bbf\u95ee\u8fd4\u56de\u5730\u5740\uff0c\u5219\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u4f8b\u5b50\u662f64\u4f4dWindows\u4e0a\u5f02\u5e38\u5904\u7406(SEH)\u4e2d\u7684\u5806\u6808\u5c55\u5f00\u3002\u56e0\u6b64\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u6355\u83b7\u5f02\u5e38\u7684\u76ee\u6807\u4e0d\u80fd\u4e0eTinyInst\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u3002\n\u6b64\u65f6\uff0cTinyInst\u8fd8\u6709\u4e00\u4e2a\u9009\u9879(\u901a\u8fc7-patchReturnAddresses\u6807\u5fd7\u516c\u5f00)\uff0c\u53ef\u4ee5\u5728\u53d1\u751f\u8c03\u7528\u65f6\u5c06\u8fd4\u56de\u5730\u5740\u91cd\u5199\u4e3a\u5b83\u4eec\u5728\u672a\u68c0\u6d4b\u4ee3\u7801\u4e2d\u7684\u76f8\u5e94\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u6ca1\u6709\u9644\u52a0\u68c0\u6d4b\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4f1a\u5728\u6bcf\u6b21\u8fd4\u56de\u65f6\u5bfc\u81f4\u5f02\u5e38(\u5bfc\u81f4\u5927\u91cf\u51cf\u6162)\u3002\u4f46\u662f\uff0c\u4f7f\u7528-patchReturnAddresses\u65f6\uff0c\u8fd4\u56de\u6307\u4ee4\u4e5f\u4f1a\u4ee5\u7c7b\u4f3c\u4e8e\u95f4\u63a5\u8df3\u8f6c/\u8c03\u7528\u7684\u65b9\u5f0f\u8fdb\u884c\u68c0\u6d4b\u3002\u867d\u7136\u8fd9\u89e3\u51b3\u4e86\u6a21\u5757\u5185\u53d1\u751f\u7684\u8fd4\u56de\u95ee\u9898\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u4ece\u672a\u68c0\u6d4b\u5230\u7684\u6a21\u5757\u5230\u68c0\u6d4b\u6a21\u5757\u7684\u6240\u6709\u8fd4\u56de\u4ecd\u5c06\u5bfc\u81f4\u5f02\u5e38\u3002\n\u7531\u4e8e\u8fd9\u662f\u4e00\u79cd\u76f8\u5f53\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u5c06\u6765\u5c06\u7814\u7a76\u66f4\u591a\u7528\u4e8e\u652f\u6301Windows\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u7684\u6027\u80fd\u9009\u9879\u3002\u8fd9\u53ef\u4ee5\u4f7f\u7528RtlAddFunctionTable/RtlAddGrowableFunctionTable/RtlInstallFunctionTableCallback\u63a5\u53e3\u6765\u5b9e\u73b0\u3002\nTinyInst\u4e2d\u6700\u5927\u7684\u5f00\u9500\u6765\u81ea\u6bcf\u5f53\u4ece\u975e\u68c0\u6d4b\u6a21\u5757\u8fdb\u5165\u68c0\u6d4b\u6a21\u5757\u65f6\u5f15\u53d1\u7684\u5f02\u5e38\u3002\u60a8\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u5f02\u5e38\u662f\u4f7f\u7528-TRACE_MODULE_ENTRIES\u6807\u5fd7\u89e6\u53d1\u7684\u3002\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u5c31\u5e94\u8be5\u4f7f\u7528\u95f4\u63a5\u8df3\u8f6c/\u8c03\u7528\u6307\u4ee4\u63d2\u5165\uff0c\u800c\u5728\u4efb\u4f55\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u90fd\u4e0d\u5e94\u8be5\u4f7f\u7528\u8fd4\u56de\u6307\u4ee4\u63d2\u5165\u3002TinyInst\u5728\u5408\u7406\u81ea\u5305\u542b\u7684\u6a21\u5757(\u6216\u6a21\u5757\u7ec4)\u4e0a\u6267\u884c\u5f97\u6700\u597d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u4e24\u4e2a\u6a21\u5757\uff0cA\u548cB\uff0c\u5176\u4e2dA\u7ecf\u5e38\u8c03\u7528B\uff0c\u4f46\u53ea\u6709B\u88ab\u68c0\u6d4b\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5f88\u5927\u7684\u51cf\u6162\u3002\u901a\u8fc7\u68c0\u6d4bA\u548cB\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\n\u4f7f\u7528-TRACE_BASIC_BLOCKS\u67e5\u770b\u6b63\u5728\u6267\u884c\u7684\u57fa\u672c\u5757\u3002\u60a8\u5c06\u5728\u63d2\u5165\u6307\u4ee4\u7684\u4ee3\u7801\u4e2d\u770b\u5230\u5730\u5740\uff0c\u5728\u672a\u63d2\u5165\u6307\u4ee4\u7684\u4ee3\u7801\u4e2d\u770b\u5230\u76f8\u5e94\u7684\u5730\u5740\u3002", "note_en": "Copyright 2020 Google LLCLicensed under the Apache License, Version 2.0 (the &#34;License&#34;);you may not use this file except in compliance with the License.You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &#34;AS IS&#34; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.\n  TinyInst is a lightweight dynamic instrumentation library that can be used to instrument only selected module(s) in the process, while leaving the rest of the process to run natively. It is meant to be easy to understand, easy to hack on and easy to hack with. It is not designed to be compatible with all targets (more on that later).\n  TinyInst is not meant as a replacement for complex instrumentation frameworks such as DynamoRIO and PIN, but rather an alternative for scenarios where a more lightweight solution would do. TinyInst assumes that the target is well-behaved (in the sense explained below) which is not the case for more complex frameworks. Thus, you probably won\u2019t be able to successfully run TinyInst against malware as  was done with DynamoRIO previously. On the other hand, if a target does not work with other frameworks due to the module that does not need to be instrumented, and the instrumented module is well-behaved, it might work with TinyInst. Because with TinyInst, most of the process will run natively, it will have shorter process startup time, and might outperform other solutions in cases where the target process spends a lot of time in the modules where instrumentation is not needed.\n  TinyInst is a full binary rewriting solution, so arbitrary behavior can be changed in the target module. This allows it, for example, to be able to extract edge coverage instead of only basic blocks. Additionally, TinyInst does not depend on other software, such as IDA Pro, to identify basic blocks.\n  Currently Windows only (32- and 64-bit). Mac OS support might be considered in the future.\n   Return address on the stack is never accessed by the program directlyOR/AND (depending on the settings)\n No data is ever stored before the top of the stack (on addresses lower than pointed to by ESP/RSP). This condition can be relaxed into &#34;no data before (ESP/RSP - arbitrary_offset)&#34; using the  -stack_offset flag.\n  According to early measurements on image decoding, on a well-behaving 64-bit target with default TinyInst settings, the performance overhead was around 15% without a client and about 20% with the example coverage-collecting client. Note that this does not include the timeout introduced by initially instrumented the modules. See performance tips below for more details.\n  Open a command prompt and set up your build environment, e.g. run vcvars64.bat / vcvars32.bat\n  Run the following commands (change the generator according to the version of Visual Studio and platform you want to build for):\n   Note #2: Encountering problems creating a 32-bit build on 64-bit windows due to the environment not being properly set up and libraries missing? Open the generated .sln file in Visual Studio and build from there instead of running cmake --build. Also note that 64-bit build is going to work on 32-bit targets, so creating a 32-bit build might not be necessary.\n   A TinyInst client is written as a subclass of the TinyInst class. The client can then override the API methods it needs. The API methods are defined below.\n After the client is created, it must be initialized with command line options by calling\n  The command line options are defined below and a client can also define their own. After that, to run and control an instrumented program, the following functions can be used.\n  These functions either run a program (using the specified command line) or attach to an already running program. If no target method is specified, the target will continue running until either the program exits, the program crashes, or the timeout (given in milliseconds) expires. If a target method is defined, TinyInst is going to return whenever the target method is entered and whenever target method returns, allowing the caller to perform additional tasks.\n When  Run and  Attach return while the target process is still alive, the following functions can be used to either terminate the process or continue execution.\n       These callbacks are for information only and the client should not emit any instrumented code during them. Clients must call the same handler defined in the superclass before handling these events themselves.\n    OnTargetMethodReachedIf the target method is defined, called when the target method is reached for the first time.\n   OnExceptionCalled when an exception is encountered. The client must either return true (if the exception was handled) or the result of the same method on the parent class.\n   OnBasicBlockCan be used to insert code that&#39;s going to run on a particular basic block\n OnEdgeCan be used to insert code that&#39;s going to run on a particular edge. Note: For performance reasons, this callback is only emitted on non-deterministic edges (i.e. conditional jumps) and indirect jumps/calls (e.g.  call rax). For edges where the next basic block is always known given the previous basic block (e.g.  jmp offset,  call offset), no callback will be emitted.\n OnInstructionCan be used to modify the instruction or insert code before it. Depending on the return code the original instruction is either going to be emitted or not after the callback.\n   OnModuleInstrumentedCalled when a module gets instrumented. This happens generally when the process entrypoint is reached (if the target method is not defined) or when the target method is reached (if it is defined). The client can initialize its instrumentation-related data here\n OnModuleUninstrumentedCalled when instrumentation data is no longer valid and needs to be cleared. Note that this is not the same as module being unloaded as, by default, instrumentation persists across module unloads / reloads. This callback can be used to clear any instrumentation-related data in the client.\n   -instrument_module [module name] specifies which module to instrument, multiple  -instrument_module options can be specified to instrument multiple modules.\n  -patch_return_addresses - replaces return address with the original value, causes returns to be instrumented using whatever  -indirect_instrumentation method is specified\n -persist_instrumentation_data (default = true) Does not reinstrument module on module unloads / reloads. Only works if the module is loaded on the same address it was loaded before.\n -instrument_cross_module_calls (default=true) If multiple  -instrument_module modules are specified and one calls into another, jump to instrumented code of the other module without causing an exception (which would cause slowdowns).\n -stack_offset (default=0) When saving context on the stack, leave this many bytes on top of the stack (before stack pointer) unchanged.\n      TinyInst allows user to define a target method. If a target method is defined, no code will be instrumented (everything will run natively) until the target method is reached for the first time. Additionally, TinyInst will break execution on the target method entry and exit.\n  -target_method - name of the target method. This only works if the target method is exported or you have symbols for the target module.\n -target_offset - use when target method can&#39;t be specified by name. Relative address of the target method from the module base\n -loop - if this flag is specified, TinyInst will run the target method in an infinite loop (or until Kill() is called or process terminates for another reason). Function arguments will be saved and restored between iterations. This is mainly used to force persistence for fuzzing.\n -nargs - number of target method arguments to save between iterations. To be used together with  -loop\n   TinyInst comes with an (example) coverage module,  LiteCov. The coverage module can collect basic block or edge coverage (controlled using  -covtype flag).\n Special feature of the coverage module is that the coverage buffer in the target process is initially allocated as read-only, causing an exception the first time new coverage is encountered. Combined with an option to ignore a certain subset of coverage, this enables quickly querying if running the target with a given input resulted in new coverage or not.\n  TinyInst is built on top of a custom debugger. The debugger watches the target process for events such as modules being loaded, breakpoint being hit, exceptions being fired etc. The debugger also implements breakpoints and persistence if the target method is specified.\n When a module to be instrumented is loaded, it is initially &#34;instrumented&#34; in the following way\n All executable regions in the module are marked as non-executable, while retaining other permissions (read/write) as they were originally. This causes an exception whenever control flow reaches an instrumented module, which is caught and handled by the debugger.\n An executable region of memory is allocated within 2GB of the original module address range. This is where the instrumented/rewritten code of the module will be placed. 2GB is important as it allows all instructions that use addressing in the form of [rip+offset] to be replaced with [rip+fixed_offset].\n Whenever an instrumented module is entered (whether for the first time or any other time), the basic block that was hit is instrumented, together with all basic blocks that can be reliably discovered by recursively following conditional branches as well as direct calls and jumps (e.g. jmp offset, call offset).\n  all indirect jump/calls (e.g. call rax) will land in their original code location, which causes an exception, which the debugger resolves by replacing the instruction pointer with the corresponding location in the instrumented code.\n However, while this works, note that it will cause an exception on every indirect call/jump whose target is in an instrumented module. Since exception handling is slow, instrumenting targets with a lot of indirection (e.g. virtual methods in C++, function pointers) will be slow without additional instrumentation.\n  TinyInst can instrument indirect calls and jumps to avoid exceptions on (already-seen) indirect targets. An instrumented call/jump, instead of jumping to the original target, will instead jump to the head of the linked list of stubs. Each stub contains a pair of (original_target, translated_target). It tests if the jump/call target matches original_target, and if so, control flow is directed to translated_target. Otherwise, it jumps to the next stub. If the end of the list is reached, that means the jump/call target hasn\u2019t been seen before. This will cause a breakpoint that is caught by the debugger, which will be resolved by creating another stub and inserting it into the list.\n   Global hashtable results in better performance. Local (per-callsite list) allows getting correct edges (with correct source address) on indirect calls/jumps.\n Note that on modern Windows, due to CFG, all indirect jump/calls happen from the same location, therefore with CFG-compiled binaries, it is impossible (without some kind of special handling) to get accurate edges anyway. This, along with the performance benefit, is the reason why global hashlist is the default method for handling indirect calls/jumps in TinyInst.\n  By default, when a call happens in instrumented code, the return address being written is going to be the next instruction in the  instrumented code. This works correctly in most cases, however it will cause problems if the target process ever accesses return addresses for purposes other than return. A notable example of this is stack unwinding in the exception handling (SEH) on 64-bit Windows. Therefore, targets that need to catch exceptions won\u2019t work correctly with TinyInst by default.\n At this time, TinyInst also has an option (exposed through  -patch_return_addresses flag) to rewrite return addresses into their corresponding values in the non-instrumented code whenever a call occurs. Note that, without additional instrumentation, this causes an exception on every return (causing a massive slowdown). However, with  -patch_return_addresses, return instructions also get instrumented similarly to indirect jumps/calls. While this resolves returns happening within a module, note that all returns from a non-instrumented into an instrumented module will still cause exceptions.\n Since this is a fairly common case, more performant options for supporting exception handling in Windows will be investigated in the future. This can be accomplished using RtlAddFunctionTable / RtlAddGrowableFunctionTable / RtlInstallFunctionTableCallback APIs.\n  The biggest overhead in TinyInst comes from an exception being thrown whenever an instrumented module is entered from a non-instrumented module. You can see these exceptions being triggered using the  -trace_module_entries flag. Indirect jump/call instrumentation should be used whenever possible and return instrumentation should not be used whenever possible. TinyInst performs best on modules (or module groups) that are reasonably self-contained. For example if you have two modules, A and B, where A calls B often but only B is instrumented, this will cause a lot of slowdown. Better performance could be achieved by instrumenting both A and B.\n  Use  -trace_basic_blocks to see basic blocks as they are being executed. You\u2019ll see both the addresses in the instrumented code and the corresponding addresses in the non-instrumented code.", "posttime": "2020-06-06 19:42:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63d2\u88c5,dynamic,\u76ee\u6807", "title": "\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u52a8\u6001\u63d2\u88c5\u5e93", "title_en": "A lightweight dynamic instrumentation library", "transed": 1, "url": "https://github.com/googleprojectzero/TinyInst", "via": "", "real_tags": ["\u63d2\u88c5", "dynamic", "\u76ee\u6807"]}, {"category": "", "categoryclass": "", "imagename": "e8ab8bd6f4e67f197ebb88fcd1650d07.png", "infoid": 1005427, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u5c31\u662f\u5173\u952e\u6240\u5728\u3002\u4f60\u4e0d\u77e5\u9053\uff0c\u4f60\u53ea\u77e5\u9053\u5b83\u53ef\u80fd\u662f\u52a0\u5bc6\u7684\u3002\u897f\u83f2\u4f1a\u5e2e\u4f60\u60f3\u529e\u6cd5\u7684\u3002\nCiphey\u4f7f\u7528\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u6765\u731c\u6d4b\u52a0\u5bc6\u7684\u5185\u5bb9\uff0c\u7136\u540e\u4f7f\u7528\u5b9a\u5236\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u5757\u6765\u786e\u5b9a\u8f93\u51fa\u3002\n\u652f\u630120+\u52a0\u5bc6\uff0c\u5982\u6563\u5217\u3001\u7f16\u7801(\u4e8c\u8fdb\u5236\u3001Base64)\u548c\u6b63\u5e38\u52a0\u5bc6\uff0c\u5982Caesar\u5bc6\u7801\u3001\u8f6c\u7f6e\u7b49\u3002\n\u9488\u5bf9\u6b63\u786e\u89e3\u5bc6\u7684\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc\uff0c\u89e3\u5bc6\u65f6\u95f4\u4e0d\u52303\u79d2\u3002\u5982\u679cCiphey\u65e0\u6cd5\u89e3\u5bc6\u6587\u672c\uff0cCiphey\u5c06\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u5206\u6790\u4e3a\u60a8\u63d0\u4f9b\u5982\u4f55\u81ea\u5df1\u89e3\u5bc6\u7684\u4fe1\u606f\u3002\n\u5b9a\u5236\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u5757Ciphey\u53ef\u4ee5\u5224\u65ad\u67d0\u4e8b\u7269\u662f\u5426\u4e3a\u660e\u6587\u3002\u5b83\u5177\u6709\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u9ad8\u7cbe\u786e\u5ea6\uff0c\u540c\u65f6\u901f\u5ea6\u4e5f\u5f88\u5feb\u3002\n\u8981\u6d88\u9664\u8fdb\u5ea6\u6761\u3001\u6982\u7387\u8868\u548c\u6240\u6709\u566a\u97f3\uff0c\u8bf7\u4f7f\u7528grep\u6a21\u5f0f\u3002ciphey-t&#34\uff1b\u52a0\u5bc6\u6587\u672c\u6b64\u5904&#34\uff1b-g\u8981\u67e5\u770b\u5b8c\u6574\u7684\u53c2\u6570\u5217\u8868\uff0c\u8bf7\u8fd0\u884cciphey-h\u3002\n\u4e5f\u53ef\u4ee5\u5c06\u6570\u636e\u8f93\u9001\u5230Ciphey\u4e2d\uff0c\u6216\u8005\u4f7f\u7528Ciphey\uff0c\u5c31\u50cf\u8fd9\u91cc\u7684\u52a0\u5bc6\u6587\u672c\u4e00\u6837\u3002\n\u60a8\u53ef\u4ee5\u5bfc\u5165Ciphey\u7684Main\u5e76\u5728\u60a8\u81ea\u5df1\u7684\u7a0b\u5e8f\u548c\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002\u6b64\u529f\u80fd\u9884\u8ba1\u5c06\u5728\u4e0b\u4e00\u4e2a\u7248\u672c\u4e2d\u6269\u5c55\u3002\n\u5728\u7a0b\u5e8f\u4e2d\u4f20\u9012\u7684\u662f{&#34\uff1blc&#34\uff1b\uff1aself.lc\uff0c&#34\uff1bIsPlaintext\uff1f&#34\uff1b\uff1atrue\uff0c&#34\uff1b\u7eaf\u6587\u672c&#34\uff1b\uff1a\u5df2\u7ffb\u8bd1\uff0c&#34\uff1b\u5bc6\u7801&#34\uff1b\uff1a&#34\uff1b\u51ef\u6492&#34\uff1b\uff0c&#34\uff1b\u989d\u5916\u4fe1\u606f&#34\uff1b\uff1a&#34\uff1b\u4f7f\u7528\u7684\u8f6e\u6362\u662f{Counter}&#34\uff1b}", "note_en": "That&#39;s the point. You don&#39;t know, you just know it&#39;s possibly encrypted. Ciphey will figure it out for you.\n Ciphey uses a deep neural network to guess what something is encrypted with, and then a custom built natural language processing module to determine the output.\n    20+ encryptions supported such as hashes, encodings (binary, base64) and normal encryptions like Caesar cipher, Transposition and more.\n Deep neural network for targetting the right decryption resulting in decryptions taking less than 3 seconds. If Ciphey cannot decrypt the text, Ciphey will use the neural network analysis to give you information on how to decrypt it yourself.\n Custom built natural language processing module Ciphey can determine whether something is plaintext or not. It has an incredibly high accuracy, along with being fast.\n         To get rid of the progress bars, probability table, and all the noise use the grep mode. ciphey -t &#34;encrypted text here&#34; -gFor a full list of arguments, run  ciphey -h.\n It is also possible to pipe data into Ciphey, or to use Ciphey like  ciphey &#39;encrypted text here&#39;\n  You can import Ciphey&#39;s  main and use it in your own programs and code.This is feature is expected to expand in the next version.\n        Passed around in the program, it is  {&#34;lc&#34;: self.lc, &#34;IsPlaintext?&#34;: True, &#34;Plaintext&#34;: translated, &#34;Cipher&#34;: &#34;Caesar&#34;, &#34;Extra Information&#34;: &#34;The rotation used is {counter}&#34;}", "posttime": "2020-06-06 19:24:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u81ea\u52a8,automated,ciphey", "title": "Ciphey\uff1a\u81ea\u52a8\u89e3\u5bc6\u5de5\u5177", "title_en": "Ciphey: Automated Decryption Tool", "transed": 1, "url": "https://github.com/Ciphey/Ciphey", "via": "", "real_tags": ["\u81ea\u52a8", "automated", "ciphey"]}, {"category": "", "categoryclass": "", "imagename": "b5d15fc149363a8ce1189b56f95d365d.jpg", "infoid": 1005426, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u7a0b\u5e8f\u5458\u7f16\u5199\u8f6f\u4ef6\u65f6\uff0c\u4ed6\u4eec\u7684\u8111\u6d77\u4e2d\u4f1a\u60f3\u4e9b\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u7531\u5f00\u59c6\u5c3c\u8328\u7406\u5de5\u5927\u5b66\u8f6f\u4ef6\u5de5\u7a0b\u6559\u6388Janet Siegmund\u6559\u6388\u3001\u8428\u5c14\u5170\u5927\u5b66\u8f6f\u4ef6\u5de5\u7a0b\u6559\u6388Sven Apel\u6559\u6388\u548c\u9a6c\u683c\u5fb7\u5821\u83b1\u5e03\u5c3c\u5179\u795e\u7ecf\u751f\u7269\u5b66\u7814\u7a76\u6240\u975e\u4fb5\u5165\u6027\u6210\u50cf\u7279\u6b8a\u5b9e\u9a8c\u5ba4\u8d1f\u8d23\u4ebaAndr\u00e9Brechmann\u535a\u58eb\u63d0\u51fa\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u627e\u51fa\u7b54\u6848\uff0c\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u4e86\u795e\u7ecf\u79d1\u5b66\u7684\u6210\u50cf\u6280\u672f\uff0c\u5e76\u8c03\u67e5\u4e86\u5f53\u9605\u8bfb\u548c\u7406\u89e3\u8ba1\u7b97\u673a\u7a0b\u5e8f\u65f6\uff0c\u54ea\u4e9b\u5927\u8111\u533a\u57df\u88ab\u6fc0\u6d3b\u3002\u4ed6\u4eec\u4ee4\u4eba\u60ca\u53f9\u7684\u7ed3\u679c\u662f\uff1a\u7f16\u7a0b\u5c31\u50cf\u8bf4\u8bdd\u3002\u4ed6\u4eec\u53d1\u73b0\uff0c\u5927\u8111\u4e2d\u6700\u6d3b\u8dc3\u7684\u533a\u57df\u4e5f\u662f\u90a3\u4e9b\u4e0e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u76f8\u5173\u7684\u533a\u57df\u3002\u4ed6\u4eec\u73b0\u5728\u5df2\u7ecf\u5728\u8457\u540d\u7684ACM\u901a\u8baf\u6742\u5fd7\u4e0a\u53d1\u8868\u4e86\u4ed6\u4eec\u7684\u57fa\u7840\u7814\u7a76\u6210\u679c\uff0c\u8be5\u6742\u5fd7\u7531\u4e16\u754c\u4e0a\u6700\u5927\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u534f\u4f1a\u51fa\u7248\u3002\u4e3b\u8981\u4f5c\u8005\u662f\u5f00\u59c6\u5c3c\u8328\u7406\u5de5\u5927\u5b66\u7684\u73cd\u59ae\u7279\u00b7\u897f\u683c\u8499\u5fb7(Janet Siegmund)\u3002\u8fd9\u4e9b\u53d1\u73b0\u53ef\u80fd\u4f1a\u5bf9\u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u3001\u7f16\u7a0b\u6559\u80b2\u6216\u56de\u7b54\u57fa\u672c\u95ee\u9898(\u5982\u4ec0\u4e48\u6784\u6210\u590d\u6742\u6216\u7b80\u5355\u7684\u7a0b\u5e8f\u4ee3\u7801)\u4ea7\u751f\u6df1\u8fdc\u7684\u5f71\u54cd\u3002\n\u73cd\u59ae\u7279\u00b7\u897f\u683c\u8499\u5fb7(Janet Siegmund)\u8bf4\uff0c\u6211\u4eec\u7814\u7a76\u95ee\u9898\u7684\u60f3\u6cd5\u662f\u5728\u9a6c\u683c\u5fb7\u5821\u83b1\u5e03\u5c3c\u8328\u795e\u7ecf\u751f\u7269\u5b66\u7814\u7a76\u6240\u548c\u9a6c\u683c\u5fb7\u5821\u4fe1\u606f\u5b66\u5b66\u9662\u7684\u7814\u7a76\u4eba\u5458\u8054\u5408\u4f1a\u8bae\u4e0a\u4ea7\u751f\u7684\u3002\u5728\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66(Carnegie Mellon University)\u51ef\u65af\u7279\u7eb3\u6559\u6388\u548c\u5317\u5361\u7f57\u6765\u7eb3\u5dde\u7acb\u5927\u5b66(North Carolina State University)\u5e15\u5b81\u6559\u6388\u7684\u652f\u6301\u4e0b\uff0c\u5728\u51e0\u9879\u5927\u5927\u5c0f\u5c0f\u7684\u5148\u5bfc\u7814\u7a76\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u5f00\u53d1\u4e86\u4e00\u5957\u901a\u7528\u7684\u65b9\u6cd5\u5b66\u57fa\u7840\u3002\u8fd9\u4e00\u52aa\u529b\u662f\u503c\u5f97\u7684\uff0c\u56e0\u4e3a\u4e0e\u6b64\u540c\u65f6\uff0cSiegmund\u548c\u5979\u7684\u540c\u4e8b\u5f00\u53d1\u7684\u65b9\u6cd5\u6b63\u5728\u6210\u4e3a\u4e00\u79cd\u6807\u51c6\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u56fd\u9645\u7814\u7a76\u4e2d\u8bc1\u660e\u4e86\u81ea\u5df1\u3002\n\u6211\u4eec\u7684\u76ee\u6807\u662f\u5f00\u53d1\u4e00\u79cd\u5168\u65b0\u7684\u65b9\u6cd5\u6765\u66f4\u597d\u5730\u7406\u89e3\u53c2\u4e0e\u7f16\u7a0b\u7684\u4eba\uff0c\u6765\u81ea\u8428\u5c14\u5e03\u5415\u80af\u7684\u65af\u6587\u00b7\u963f\u4f69\u5c14(Sven Apel)\u8bf4\u3002Siegmund\u3001Apel\u548cBrechmann\u5728\u5206\u6790\u51e0\u884c\u4ee3\u7801\u65f6\uff0c\u9996\u6b21\u4f7f\u7a0b\u5e8f\u5458\u7684\u5927\u8111\u6d3b\u52a8\u53ef\u89c1\u3002\u5728\u8fd9\u6837\u505a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u79d1\u5b66\u5bb6\u4eec\u50cf\u4e00\u4e2a\u76f8\u4e92\u8865\u5145\u7684\u56e2\u961f\u4e00\u6837\u5171\u540c\u52aa\u529b\u3002\u4f5c\u4e3a\u4e00\u540d\u7ecf\u9a8c\u4e30\u5bcc\u7684\u795e\u7ecf\u79d1\u5b66\u5bb6\uff0c\u5e03\u96f7\u8d6b\u66fc\u8d21\u732e\u4e86\u4ed6\u5728\u529f\u80fd\u78c1\u5171\u632f\u6210\u50cf(FMRI)\u5b9e\u9a8c\u65b9\u9762\u7684\u7ecf\u9a8c\uff0c\u800c\u963f\u4f69\u5c14\u4f5c\u4e3a\u4e00\u540d\u7ecf\u9a8c\u4e30\u5bcc\u7684\u7814\u7a76\u5458\uff0c\u8d21\u732e\u4e86\u4ed6\u5728\u8f6f\u4ef6\u5f00\u53d1\u65b9\u9762\u7684\u4e13\u4e1a\u77e5\u8bc6\uff0c\u800c\u897f\u683c\u8499\u5fb7(Siegmund)\u51ed\u501f\u5979\u5728\u5fc3\u7406\u5b66\u548c\u8ba1\u7b97\u673a\u79d1\u5b66\u65b9\u9762\u7684\u8de8\u5b66\u79d1\u4e13\u4e1a\u77e5\u8bc6\uff0c\u8d77\u5230\u4e86\u7ebd\u5e26\u4f5c\u7528\u3002\n\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c\u7814\u7a76\u5c0f\u7ec4\u4f7f\u7528\u4e86\u51cf\u6cd5\uff0c\u8fd9\u5728\u795e\u7ecf\u79d1\u5b66\u4e2d\u5df2\u7ecf\u8bc1\u660e\u4e86\u81ea\u5df1\uff1a\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u53d7\u8bd5\u8005\u9996\u5148\u5728\u78c1\u5171\u632f\u65ad\u5c42\u626b\u63cf\u4eea\u4e2d\u7684\u4e00\u4e2a\u4efb\u52a1\u4e0a\u5de5\u4f5c\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ed6\u4eec\u5fc5\u987b\u7406\u89e3\u7a0b\u5e8f\u4ee3\u7801\u7684\u6458\u5f55\u3002\u5728\u77ed\u6682\u7684\u4f11\u606f\u671f\u4e4b\u540e\uff0c\u4ed6\u4eec\u88ab\u8981\u6c42\u68c0\u67e5\u4ee3\u7801\u7247\u6bb5\u4e2d\u662f\u5426\u6709\u7b80\u5355\u7684\u8bed\u6cd5\u9519\u8bef\uff0c\u8fd9\u662f\u7a0b\u5e8f\u5458\u7684\u4f8b\u884c\u4efb\u52a1\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e0d\u662f\u7406\u89e3\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u968f\u540e\uff0c\u4ece\u7406\u89e3\u6d4b\u8bd5\u7684\u56fe\u50cf\u4e2d\u51cf\u53bb\u4f8b\u884c\u4efb\u52a1\u5904\u7406\u8fc7\u7a0b\u4e2d\u7684\u5927\u8111\u6d3b\u52a8\u56fe\u50cf-\u5269\u4e0b\u7684\u662f\u5bf9\u7a0b\u5e8f\u7406\u89e3\u8fc7\u7a0b\u7279\u522b\u91cd\u8981\u7684\u56fe\u50cf\u3002\n\u4e3a\u4e86\u89c2\u5bdf\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u7814\u7a76\u5c0f\u7ec4\u4f7f\u7528\u4e86\u65ad\u5c42\u6444\u5f71\u4eea\u3002\u56fe\u50cf\u6570\u636e\u6e05\u695a\u5730\u663e\u793a\u4e86\u6d4b\u8bd5\u5bf9\u8c61\u5de6\u4fa7\u7684\u6fc0\u6d3b\uff0c\u8fd9\u4e3b\u8981\u4e0e\u8bed\u97f3\u7406\u89e3\u6709\u5173\u3002\u4ee4\u6211\u4eec\u60ca\u8bb6\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u89c2\u5bdf\u5230\u4efb\u4f55\u5728\u6570\u5b66\u6216\u903b\u8f91\u601d\u7ef4\u65b9\u9762\u7684\u6d3b\u52a8\uff0c\u8fd9\u4f4d\u7814\u7a76\u4eba\u5458\u5728\u603b\u7ed3\u7ed3\u679c\u65f6\u8bf4\u3002\u6211\u4eec\u7684\u7814\u7a76\u8868\u660e\uff0c\u8bed\u97f3\u7406\u89e3\u5728\u7f16\u7a0b\u4e2d\u8d77\u7740\u6838\u5fc3\u4f5c\u7528\u3002\u8457\u540d\u7684\u8377\u5170\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6Edsger W.Dijkstra\u572820\u4e16\u7eaa80\u5e74\u4ee3\u5c31\u5df2\u7ecf\u8868\u8fbe\u4e86\u8fd9\u4e00\u5047\u8bbe\uff0c\u963f\u4f69\u5c14\u8865\u5145\u9053\u3002\n\u81ea\u90a3\u4ee5\u540e\uff0c\u4e16\u754c\u5404\u5730\u7684\u7814\u7a76\u5c0f\u7ec4\u90fd\u91c7\u7528\u4e86\u8fd9\u4e00\u65b9\u6cd5\uff0c\u5e76\u5c06\u5176\u6269\u5c55\u5230\u5305\u62ec\u5176\u4ed6\u65b9\u9762\u3002\u7814\u7a76\u5c0f\u7ec4\u5047\u8bbe\uff0c\u901a\u8fc7\u53d1\u73b0\u4e0d\u540c\u4e8e\u9605\u8bfb\u7406\u89e3\u548c\u903b\u8f91\u63a8\u7406\u7684\u65b0\u8ba4\u77e5\u8fc7\u7a0b\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4e5f\u53ef\u4ee5\u53cd\u9988\u7ed9\u795e\u7ecf\u79d1\u5b66\u3002\n\u7531Siegmund\u3001Apel\u548cBrechmann\u9886\u5bfc\u7684\u56e2\u961f\u73b0\u5728\u5e0c\u671b\u627e\u51fa\u4e13\u5bb6\u548c\u521d\u5b66\u8005\u5bf9\u7a0b\u5e8f\u7684\u7406\u89e3\u6709\u4f55\u4e0d\u540c--\u4ed6\u4eec\u662f\u5426\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u9605\u8bfb\u548c\u89e3\u91ca\u7a0b\u5e8f\u4ee3\u7801\u3002\u66f4\u591a\u4fe1\u606f\uff1aJanet Siegmund\u7b49\u4eba\u3002\u201c\u7f8e\u56fd\u533b\u5b66\u4f1a\u795e\u7ecf\u75c5\u5b66\u4e0e\u4f20\u64ad\u5b66\u7814\u7a76\u201d(2020)\u3002DOI\uff1a10.1145/3347093", "note_en": "What goes on in the minds of programmers when they write software? This was the question posed by Prof. Dr. Janet Siegmund, Chair of Software Engineering at Chemnitz University of Technology, Prof. Dr. Sven Apel, Chair of Software Engineering at Saarland University and Dr. Andr\u00e9 Brechmann, head of the special laboratory for non-invasive imaging at the Leibniz Institute of Neurobiology in Magdeburg. To find out, the researchers used imaging techniques from the neurosciences and investigated which brain areas are activated when reading and understanding computer programs. Their amazing result: Programming is like talking. They found out that the brain regions that are most active are those that are also relevant in the processing of natural language.    They have now published the results of their basic research in the renowned journal  Communications of the ACM, which is published by the world&#39;s largest professional association for computer science. Lead author was Janet Siegmund from Chemnitz University of Technology. The findings could have far-reaching consequences in the design of programming languages, programming education, or answering fundamental questions\u2014such as what constitutes complicated or simple program code.\n    &#34;The idea for our research question arose in Magdeburg during a joint meeting of researchers from the Leibniz Institute of Neurobiology and the Faculty of Informatics in Magdeburg,&#34; said Janet Siegmund. In several small and large pilot studies, supported by Prof K\u00e4stner (Carnegie Mellon University) and Prof Parnin (North Carolina State University), the researchers developed a versatile methodological basis. This effort was worthwhile, because in the meantime, the methodology developed by Siegmund and her colleagues is on its way to becoming a standard and has already proven itself in international studies.\n  &#34;Our goal was to develop a completely new approach to better understand the   involved in programming,&#34; says Sven Apel from Saarbr\u00fccken. Siegmund, Apel, and Brechmann made the brain activity of programmers visible for the first time while they analyzed several lines of code. In doing so, the scientists worked together like a unit that complemented each other. While Brechmann, as an experienced neuroscientist, contributed his experience with experiments in functional magnetic resonance imaging (fMRI) and Apel, as an experienced researcher, contributed his expertise in software development, Siegmund, with her interdisciplinary expertise in psychology and computer science, acted as a link.\n     For the study, the team used the subtraction method, which has proven itself in neuroscience: In this method, the the subjects first work on a task in the magnetic resonance tomograph, for the solution of which they have to understand an extract of the program code. After a short rest period, they were asked to check a code snippet for simple syntax errors, which is a routine task for programmers, meaning it was not a question of understanding. This procedure was repeated several times. Subsequently, the images of brain activity during the processing of the routine task were subtracted from the images of the comprehension test\u2014what remained were the   that are of particular importance for the process of program comprehension.\n     To see what happens in the   during this process, the team used a   tomograph. The image data clearly showed activation in the test subjects&#39; left  , which are mainly associated with speech comprehension. &#34;To our surprise, we could not observe any activity in the direction of mathematical or logical thinking,&#34; said the researcher summarizing the results. &#34;Our research suggests that speech understanding plays a central role in programming. The renowned Dutch computer scientist Edsger W. Dijkstra already expressed this assumption in the 1980s,&#34; Apel adds.\n  The   has since been taken up by research groups around the world and expanded to include additional aspects. The research team assumes that the results could also feed back into neuroscience by discovering new cognitive processes that differ, for example, from reading comprehension and logical reasoning.\n  The team led by Siegmund, Apel and Brechmann is now hoping to find out how the understanding of programs differs between experts and beginners\u2014whether they read and interpret program code in different ways.        More information:\t\t\t\t\t\t\t\t\t\t\t\tJanet Siegmund et al. Studying programming in the neuroage,  Communications of the ACM (2020).  DOI: 10.1145/3347093", "posttime": "2020-06-06 19:08:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u626b\u63cf,scans,\u7814\u7a76", "title": "\u5927\u8111\u626b\u63cf\u663e\u793a\u7f16\u7801\u4f7f\u7528\u4e0e\u8bed\u97f3\u76f8\u540c\u7684\u533a\u57df", "title_en": "Brain scans reveal coding uses same regions as speech", "transed": 1, "url": "https://medicalxpress.com/news/2020-06-language-brain-scans-reveal-coding.html", "via": "", "real_tags": ["\u626b\u63cf", "scans", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "64e0ed1761f2cdad41842faba5373db3.jpeg", "infoid": 1005425, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u5178\u578b\u7684\u60c5\u8282\uff0c\u800c\u4e0d\u9700\u8981\u592a\u591a\u7684\u5197\u957f\u3002\u4ee5\u4e0b\u662f\u5e38\u89c1\u573a\u666f\u7684\u4e3b\u8981\u9ad8\u7ea7\u51fd\u6570\u5217\u8868\uff1a\n\u4f7f\u7528UnicodePlotplt=linelot([-1\uff0c2\uff0c3\uff0c7]\uff0c[-1\uff0c2\uff0c9\uff0c4]\uff0cTitle=&#34\uff1bExample Plot&#34\uff1b\uff0cName=&#34\uff1bmy line&#34\uff1b\uff0cxLabel=&#34\uff1bx&#34\uff1b\uff0cyLabel=&#34\uff1by&#34\uff1b)\u3002\n\u8fd8\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u753b\u5e03\u53ef\u7528(\u8bf7\u53c2\u9605\u7b2c&#34\uff1b\u4f4e\u7ea7\u754c\u9762\u4e00\u8282)\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u6253\u5370\u5230\u6587\u4ef6\uff0c\u4f7f\u7528AsciiCanvas\u3001DotCanvas\u6216BlockCanvas\u53ef\u80fd\u4f1a\u4ea7\u751f\u66f4\u597d\u7684\u7ed3\u679c\u3002\nLinePlot([-1\uff0c2\uff0c3\uff0c7]\uff0c[-1\uff0c2\uff0c9\uff0c4]\uff0cTitle=&#34\uff1bExample Plot&#34\uff1b\uff0cName=&#34\uff1bmy line&#34\uff1b\uff0cxLabel=&#34\uff1bx&#34\uff1b\uff0cyLabel=&#34\uff1by&#34\uff1b\uff0cCanvas=DotCanvas\uff0cBorde=\uff1aASCII)\u3002\n#\u652f\u6301\u7684\u6837\u5f0f\u6709\uff1aPre\u548c\uff1aPost\u697c\u68af([1\uff0c2\uff0c4\uff0c7\uff0c8]\uff0c[1\uff0c3\uff0c4\uff0c2\uff0c7]\uff0ccolor=\uff1ared\uff0cstyle=\uff1aPost\uff0ctitle=&#34\uff1bMy Staircase Plot&#34\uff1b)\u3002\n\u5907\u6ce8\uff1a\u60a8\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570symb\u6307\u5b9a\u7ed8\u5236\u6761\u5f62\u56fe\u65f6\u5e94\u4f7f\u7528\u7684\u5b57\u7b26\u3002\u4f8b\u5982symb=&#34\uff1b#&#34\uff1b\n\u70ed\u56fe\u529f\u80fd\u8fd8\u652f\u6301\u4f7f\u7528\u53c2\u6570xScale\u3001yscale\u548c\u8f74\u504f\u79fb\u91cf\u7f29\u653e\u8f74\uff0c\u5728\u4f7f\u7528xOffset\u548cyOffset\u7f29\u653e\u4e4b\u540e\u3002\nColormap\u53c2\u6570\u53ef\u7528\u4e8e\u6307\u5b9a\u547d\u540d\u6216\u81ea\u5b9a\u4e49\u8272\u5f69\u6620\u5c04\u8868\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u70ed\u56fe\u51fd\u6570\u6587\u6863\u3002\n\u6b64\u5916\uff0cCOLOR BAR\u548cCOLOR BAR_BORDER\u9009\u9879\u53ef\u7528\u4e8e\u542f\u7528/\u7981\u7528COLOR BAR\u5e76\u914d\u7f6e\u5176\u8fb9\u6846\u3002zlabel\u9009\u9879\u548czlabel\uff01\u65b9\u6cd5\u53ef\u7528\u4e8e\u8bbe\u7f6ez\u8f74(\u8272\u6761)\u6807\u7b7e\u3002\n\u6253\u5370\u7684\u8fb9\u6846\u7684\u6837\u5f0f\u3002\u652f\u6301\uff1a\u5b9e\u5fc3\u3001\uff1a\u7c97\u4f53\u3001\uff1a\u865a\u7ebf\u3001\uff1a\u865a\u7ebf\u3001\uff1aASCII\u3001\uff1a\u89d2\u70b9\u548c\uff1a\u65e0\u3002\nLinePlot([-1.\uff0c2\uff0c3\uff0c7]\uff0c[1.\uff0c2\uff0c9\uff0c4]\uff0cBORDER=\uff1a\u7c97\u4f53)LINEPORT([-1.\uff0c2\uff0c3\uff0c7]\uff0c[1.\uff0c2\uff0c9\uff0c4]\uff0cBORDER=\uff1a\u865a\u7ebf)LINEPORT([-1.\uff0c2\uff0c3\uff0c7]\uff0c[1.\uff0c2\uff0c9\uff0c4]\uff0cBORDER=\uff1a\u865a\u7ebf)LINEPORT([-1.\uff0c2\uff0c3\uff0c7]\uff0c[1.\uff0c2\uff0c2\uff0c2\uff0c4]\uff0c[1.\uff0c2\uff0c3\uff0c7]\uff0c[1.\uff0c2\uff0c3\uff0c7]\uff0c[1.\uff0c2\uff0c2\uff0c2\uff0c9\uff0c4]\uff0c\u8fb9\u6846=\uff1a\u65e0)\u3002\n\u6807\u7b7e\u548c\u753b\u5e03\u4e4b\u95f4\u6253\u5370\u7684\u5de6\u53f3\u7a7a\u95f4\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u8981\u5c06\u7ed8\u56fe\u6253\u5370\u5230\u6587\u4ef6\u4e2d\uff0c\u4f46\u5b57\u4f53\u5b58\u5728\u7b49\u5bbd\u95ee\u9898\uff0c\u60a8\u53ef\u80fd\u5e94\u8be5\u5c1d\u8bd5BORDER=\uff1aASCII\u548cCanvas=AsciiCanvas(\u6216\u8005\u5bf9\u4e8e\u6563\u70b9\u56fe\uff0c\u5c1d\u8bd5Canvas=DotCanvas)\u3002\n\u4e3a\u8981\u5199\u5165\u7ed8\u56fe\u7a97\u53e3\u9876\u90e8\u4e2d\u5fc3\u7684\u5b57\u7b26\u4e32\u6dfb\u52a0\u6807\u9898\u3002\u5982\u679c\u6807\u9898\u4e3a\u7a7a\uff0c\u5219\u4e0d\u4f1a\u7ed8\u5236\u6574\u884c\u6807\u9898\u3002\n\u4ea4\u53c9\u6807\u8bb0\u8981\u663e\u793a\u5728\u7ed8\u56fe\u7a97\u53e3\u5e95\u90e8\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u6807\u9898\u4e3a\u7a7a\uff0c\u5219\u4e0d\u4f1a\u7ed8\u5236\u6574\u4e2a\u6807\u6ce8\u884c\u3002\n\u65b9\u6cd5\u6ce8\u91ca\uff01\u8d1f\u8d23\u4e00\u4e2a\u60c5\u8282\u7684\u6240\u6709\u6587\u5b57\u88c5\u9970\u7684\u8bbe\u7f6e\u3002\u5b83\u6709\u4e24\u4e2a\u529f\u80fd\uff1a\n\u5176\u4e2d\u53ef\u4ee5\u662f\uff1a\uff1atl(\u5de6\u4e0a\u89d2)\u3001\uff1at(\u4e2d\u4e0a\u89d2)\u3001\uff1atr(\u53f3\u4e0a\u89d2)\u3001\uff1abl(\u5de6\u4e0b\u89d2)\u3001\uff1ab(\u4e2d\u4e0b\u89d2)\u3001\uff1abr(\u53f3\u4e0b\u89d2)\u3001\uff1al(\u5de6\u4e0a\u89d2)\u3001\uff1ar(\u53f3\u4e0b\u89d2)\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\n\u5728\u5e55\u540e\u5b8c\u6210\u6240\u6709\u7e41\u91cd\u5de5\u4f5c\u7684\u4e3b\u8981\u7ed3\u6784\u662f\u753b\u5e03\u7684\u5b50\u7c7b\u578b\u3002\u753b\u5e03\u662f\u7528\u4e8e\u6805\u683c\u5316\u6253\u5370\u7684\u56fe\u5f62\u5bf9\u8c61\u3002\u57fa\u672c\u4e0a\uff0c\u5b83\u4f7f\u7528Unicode\u5b57\u7b26\u6765\u8868\u793a\u50cf\u7d20\u3002\nCanvas=BrailleCanvas(40\uff0c10\uff0c#\u5217\u6570\u548c\u884c\u6570(\u5b57\u7b26)Origin_x=0\uff0cOrigin_y=0\uff0c#\u5728\u865a\u62df\u7a7a\u95f4\u4e2d\u7684\u4f4d\u7f6e\u5bbd\u5ea6=1\uff0c\u9ad8\u5ea6=1)#\u865a\u62df\u7a7a\u95f4\u7ebf\u7684\u5927\u5c0f\uff01(canvas\uff0c0.\uff0c0.\uff0c1.\uff0c1.\uff0c\uff1aBlue)#\u865a\u62df\u7a7a\u95f4\u70b9\uff01(canvas\uff0crand(50)\uff0crand(50)\uff0c\uff1ared)#\u865a\u62df\u7a7a\u95f4\u7ebf\uff01(canvas\uff0c0.\uff0c1.\uff0c.5\uff0c0.\uff0c\uff1a\u9ec4\u8272)#\u865a\u62df\u7a7a\u95f4\u50cf\u7d20\uff01(\u753b\u5e03\uff0c5\uff0c8\uff0c\uff1a\u7ea2\u8272)#\u50cf\u7d20\u7a7a\u95f4\u3002\n\u60a8\u53ef\u4ee5\u5206\u522b\u4f7f\u7528nrow(Canvas)\u548cncols(Canvas)\u8bbf\u95ee\u753b\u5e03\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6(\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d)\u3002\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u51fd\u6570\u4e0eprintrow\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u4fbf\u5c06\u753b\u5e03\u5d4c\u5165\u5230\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0cprintrow(STDOUT\uff0cCanvas\uff0c3)\u5c06\u753b\u5e03\u7684\u7b2c\u4e09\u5b57\u7b26\u884c\u5199\u5165\u6807\u51c6\u8f93\u51fa\u3002\n\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u5f53\u591a\u4e2a\u50cf\u7d20\u7531\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u65f6\uff0c\u51fa\u73b0\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u5f88\u96be\u5206\u914d\u989c\u8272\u3002\u8fd9\u662f\u56e0\u4e3a\u5b57\u7b26\u7684\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u5c5e\u4e8e\u4e0d\u540c\u7684\u989c\u8272\u7ec4(\u6bcf\u4e2a\u5b57\u7b26\u53ea\u80fd\u6709\u4e00\u79cd\u989c\u8272)\u3002\u6b64\u5305\u4f7f\u7528\u9488\u5bf9\u6574\u4e2a\u7ec4\u7684\u989c\u8272\u6df7\u5408\u6765\u5904\u7406\u6b64\u95ee\u9898\u3002\nBrailleCanvas\uff1a\u8fd9\u79cd\u7c7b\u578b\u7684\u753b\u5e03\u53ef\u80fd\u662fUnicode\u6253\u5370\u5206\u8fa8\u7387\u6700\u9ad8\u7684\u753b\u5e03\u3002\u5b83\u672c\u8d28\u4e0a\u4f7f\u7528\u76f2\u6587\u7b26\u53f7\u7684Unicode\u5b57\u7b26\u4f5c\u4e3a\u50cf\u7d20\u3002\u8fd9\u53ef\u4ee5\u6709\u6548\u5730\u5c06\u6bcf\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a8\u4e2a\u50cf\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u64cd\u4f5c\u5206\u522b\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002\nBlockCanvas\uff1a\u8be5\u753b\u5e03\u4e5f\u662f\u57fa\u4e8eUnicode\u7684\u3002\u5b83\u7684\u5206\u8fa8\u7387\u662fBrailleCanvas\u7684\u4e00\u534a\u3002\u4e0eBrailleCanvas\u4e0d\u540c\uff0c\u50cf\u7d20\u4e4b\u95f4\u6ca1\u6709\u660e\u663e\u7684\u95f4\u8ddd\u3002\u6b64\u753b\u5e03\u6709\u6548\u5730\u5c06\u6bcf\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a4\u4e2a\u50cf\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u64cd\u4f5c\u5206\u522b\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002\nHeatmapCanvas\uff1a\u8be5\u753b\u5e03\u4e5f\u662f\u57fa\u4e8eUnicode\u7684\u3002\u5b83\u7684\u5206\u8fa8\u7387\u662fBlockCanvas\u7684\u4e00\u534a\u3002\u6b64\u753b\u5e03\u4f7f\u7528\u524d\u666f\u548c\u80cc\u666f\u7ec8\u7aef\u989c\u8272\uff0c\u6709\u6548\u5730\u5c06\u6bcf\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a2\u8272\u50cf\u7d20\u3002\u56e0\u6b64\uff0c\u753b\u5e03\u7684\u884c\u6570\u662f\u6b63\u5728\u663e\u793a\u7684y\u5750\u6807\u6570\u7684\u4e00\u534a\u3002\nAsciiCanvas\u548cDotCanvas\uff1a\u8fd9\u4e24\u4e2a\u753b\u5e03\u4ec5\u4f7f\u7528\u6807\u51c6ASCII\u5b57\u7b26\u8fdb\u884c\u7ed8\u5236\u3002\u5f53\u7136\uff0c\u5b83\u770b\u8d77\u6765\u6ca1\u6709\u57fa\u4e8eUnicode\u7684\u597d\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u80fd\u4f1a\u4ea7\u751f\u66f4\u597d\u7684\u7ed3\u679c\u3002\u5c06\u6253\u5370\u6253\u5370\u5230\u6587\u4ef6\u5c31\u662f\u5176\u4e2d\u4e00\u79cd\u60c5\u51b5\u3002\n\u5bc6\u5ea6\u753b\u5e03\uff1a\u4e0eBrailleCanvas\u4e0d\u540c\uff0c\u5bc6\u5ea6\u753b\u5e03\u4e0d\u4f1a\u7b80\u5355\u5730\u5c06\u50cf\u7d20\u6807\u8bb0\u4e3a\u5df2\u8bbe\u7f6e\u3002\u76f8\u53cd\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u9012\u589e\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u4ee5\u8ddf\u8e2a\u8be5\u5b57\u7b26\u4e2d\u7ed8\u5236\u7684\u50cf\u7d20\u7684\u9891\u7387\u3002\u518d\u52a0\u4e0a\u8ddf\u8e2a\u6700\u5927\u9891\u7387\u7684\u53d8\u91cf\uff0c\u753b\u5e03\u56e0\u6b64\u53ef\u4ee5\u7ed8\u5236\u6570\u636e\u70b9\u7684\u5bc6\u5ea6\u3002\nBarplotGraphics\uff1a\u8fd9\u4e2a\u56fe\u5f62\u533a\u57df\u5f88\u7279\u6b8a\uff0c\u56e0\u4e3a\u5b83\u4e0d\u652f\u6301\u4efb\u4f55\u50cf\u7d20\u64cd\u4f5c\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u6ca1\u6709\u88c5\u9970\u800c\u662f\u6570\u5b57\u7684\u6761\u5f62\u56fe\u3002\u5b83\u53ea\u652f\u6301\u4e00\u4e2a\u65b9\u6cd5addrow\uff01\u8fd9\u5141\u8bb8\u7528\u6237\u5411\u56fe\u5f62\u5bf9\u8c61\u6dfb\u52a0\u9644\u52a0\u6761\u3002\n\u8981\u5b89\u88c5UnicodePlot\uff0c\u8bf7\u542f\u52a8Julia\u5e76\u952e\u5165\u4ee5\u4e0b\u4ee3\u7801-\u622a\u53d6\u5230REPL\u4e2d\u7684\u4ee3\u7801\u3002\u5b83\u5229\u7528\u4e86\u5f53\u5730\u7684Juliapackage\u9a6c\u69fd\u3002", "note_en": "There are a couple of ways to generate typical plots without muchverbosity. Here is a list of the main high-level functions forcommon scenarios:\n   using UnicodePlotsplt  =  lineplot([ - 1,  2,  3,  7], [ - 1,  2,  9,  4], title  =   &#34;Example Plot &#34;, name  =   &#34;my line &#34;, xlabel  =   &#34;x &#34;, ylabel  =   &#34;y &#34;)\n  There are other types of  Canvas available (see section&#34;Low-level Interface&#34;). In some situations, such as printing toa file, using  AsciiCanvas,  DotCanvas or  BlockCanvas mightlead to better results.\n lineplot([ - 1,  2,  3,  7], [ - 1,  2,  9,  4], title  =   &#34;Example Plot &#34;, name  =   &#34;my line &#34;, xlabel  =   &#34;x &#34;, ylabel  =   &#34;y &#34;, canvas  = DotCanvas, border  =  :ascii)\n                  # supported style are :pre and :post stairs([ 1,  2,  4,  7,  8], [ 1,  3,  4,  2,  7], color  =  :red, style  =  :post, title  =   &#34;My Staircase Plot &#34;)\n      Note: You can use the keyword argument  symb to specify the character that shouldbe used to plot the bars. For example  symb = &#34;#&#34;\n                     The  heatmap function also supports axis scaling using theparameters  xscale,  yscale and axis offsets after scaling using  xoffset and  yoffset.\n The  colormap parameter may be used to specify a named or custom colormap. See the  heatmap function documentation for more details.\n In addition, the  colorbar and  colorbar_border options may be used to enable/disablethe colorbar and configure its border. The  zlabel option and  zlabel! methodmay be used to set the z axis (colorbar) label.\n     The style of the bounding box of the plot. Supports  :solid,  :bold,  :dashed,  :dotted,  :ascii,  :corners, and  :none.\n lineplot([ - 1., 2,  3,  7], [ 1., 2,  9,  4], border = :bold) lineplot([ - 1., 2,  3,  7], [ 1., 2,  9,  4], border = :dashed) lineplot([ - 1., 2,  3,  7], [ 1., 2,  9,  4], border = :dotted) lineplot([ - 1., 2,  3,  7], [ 1., 2,  9,  4], border = :none)\n Space of the left and right of the plot between the labels and the canvas.\n Note: If you want to print the plot into a file but have monospace issues with your font, you should probably try  border = :ascii and  canvas = AsciiCanvas (or  canvas = DotCanvas for scatterplots).\n  title the string to write in the top center of the plot window. If the title is empty the whole line of the title will not be drawn\n xlabel the string to display on the bottom of the plot window. If the title is empty the whole line of the label will not be drawn\n The method  annotate! is responsible for the setting all the textual decorations of a plot. It has two functions:\n where can be any of:  :tl (top-left),  :t (top-center),  :tr (top-right),  :bl (bottom-left),  :b (bottom-center),  :br (bottom-right),  :l (left),  :r (right)\n   The primary structures that do all the heavy lifting behind the curtain are subtypes of  Canvas. A canvas is a graphics object for rasterized plotting. Basically it uses Unicode characters to represent pixel.\n  canvas  =  BrailleCanvas( 40,  10,   # number of columns and rows (characters) origin_x  =  0., origin_y  =  0.,   # position in virtual space width  =  1., height  =  1.)   # size of the virtual space lines!(canvas,  0.,  0.,  1.,  1.,  :blue)   # virtual space points!(canvas,  rand( 50),  rand( 50),  :red)   # virtual space lines!(canvas,  0.,  1.,  .5,  0.,  :yellow)   # virtual space pixel!(canvas,  5,  8,  :red)   # pixel space\n  You can access the height and width of the canvas (in characters) with  nrows(canvas) and  ncols(canvas) respectively. You can use those functions in combination with  printrow to embed the canvas anywhere you wish. For example,  printrow(STDOUT, canvas, 3) writes the third character row of the canvas to the standard output.\n As you can see, one issue that arises when multiple pixel are represented by one character is that it is hard to assign color. That is because each of the &#34;pixel&#34; of a character could belong to a different color group (each character can only have a single color). This package deals with this using a color-blend for the whole group.\n   BrailleCanvas:This type of canvas is probably the one with the highest resolution for Unicode plotting. It essentially uses the Unicode characters of the  Braille symbols as pixel. This effectively turns every character into 8 pixels that can individually be manipulated using binary operations.\n BlockCanvas:This canvas is also Unicode-based. It has half the resolution of the BrailleCanvas. In contrast to BrailleCanvas, the pixels don&#39;t have visible spacing between them. This canvas effectively turns every character into 4 pixels that can individually be manipulated using binary operations.\n HeatmapCanvas:This canvas is also Unicode-based. It has half the resolution of the BlockCanvas. This canvas effectively turns every character into 2 color pixels, using the foreground and background terminal colors. As such, the number of rows of the canvas is half the number of y coordinates being displayed.\n AsciiCanvas and  DotCanvas:These two canvas utilizes only standard ASCII character for drawing. Naturally, it doesn&#39;t look quite as nice as the Unicode-based ones. However, in some situations it might yield better results. Printing plots to a file is one of those situations.\n DensityCanvas:Unlike the BrailleCanvas, the density canvas does not simply mark a &#34;pixel&#34; as set. Instead it increments a counter per character that keeps track of the frequency of pixels drawn in that character. Together with a variable that keeps track of the maximum frequency, the canvas can thus draw the density of datapoints.\n BarplotGraphics:This graphics area is special in that it does not support any pixel manipulation. It is essentially the barplot without decorations but the numbers. It does only support one method  addrow! which allows the user to add additional bars to the graphics object\n  To install UnicodePlots, start up Julia and type the followingcode-snipped into the REPL. It makes use of the native Juliapackage manger.", "posttime": "2020-06-06 18:51:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ec8\u7aef,based", "title": "\u57fa\u4e8eUnicode\u7684\u7ec8\u7aef\u4f5c\u4e1a\u79d1\u5b66\u6807\u7ed8", "title_en": "Unicode-based scientific plotting for working in the terminal", "transed": 1, "url": "https://github.com/Evizero/UnicodePlots.jl", "via": "", "real_tags": ["\u7ec8\u7aef", "based"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005424, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u53ea\u60f3\u7528\u81ea\u7531\u8f6f\u4ef6\u6839\u636e\u6211\u7684\u7b14\u8ff9\u5236\u4f5c\u4e00\u79cd\u5b57\u4f53\u3002\u539f\u6765FontForge\u53ef\u4ee5\u7528Python\u7f16\u5199\u811a\u672c\u3002\u6211\u5bf9Python\u77e5\u4e4b\u751a\u5c11\uff0c\u5bf9\u6392\u7248\u66f4\u662f\u77e5\u4e4b\u751a\u5c11\uff0c\u4f46\u6211\u8bbe\u6cd5\u62fc\u51d1\u51fa\u4e86\u4e00\u4e9b\u5bf9\u6211\u6709\u7528\u7684\u4e1c\u897f\u3002\u5982\u679c\u4f60\u5728\u6211\u7684\u535a\u5ba2https://sachachua.com/blog/\u4e0a\u8bfb\u5230\u8fd9\u7bc7\u6587\u7ae0\uff0c\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u535a\u5ba2\u6587\u7ae0\u6807\u9898\u4f7f\u7528\u4e86\u65b0\u7684\u5b57\u4f53\u3002\u54c7\uff01\n\u6211\u7684\u7c97\u7565\u7b14\u8bb0\u5728https://github.com/sachac/sachac-hand/\u3002\u6211\u60f3\u7528Org Babel\u5757\u628a\u5b83\u5199\u6210\u8bc6\u5b57\u7a0b\u5e8f\u3002\u5b83\u8fd8\u4e0d\u80fd\u5b8c\u5168\u91cd\u73b0\uff0c\u4f46\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u8d77\u70b9\u3002\u57fa\u672c\u5de5\u4f5c\u6d41\u7a0b\u662f\uff1a\n\u5c06\u6a21\u677f\u5bfc\u5165\u5230\u624b\u673a\u4e0a\u7684Medibang Paint\u4e2d\uff0c\u7136\u540e\u5728\u4e0d\u540c\u7684\u56fe\u5c42\u4e0a\u7ed8\u5236\u5b57\u6bcd\u3002(\u6211\u51e0\u4e4e\u5fd8\u4e86\u5b57\u6bcdQ\uff0c\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u5728\u6700\u540e\u4e00\u523b\u52a0\u4e0a\u5b83\u3002)\u3002\n\u8bbe\u7f6e\u5de6\u4fa7\u548c\u53f3\u4fa7\u65b9\u5411\u89d2\uff0c\u6839\u636e\u9700\u8981\u57fa\u4e8e\u8868\u683c\u8986\u76d6\u3002\n\u4f7f\u7528sfnt2woff\u5bfc\u51fa\u8981\u5728\u6211\u7684\u535a\u5ba2\u4e0a\u4f7f\u7528\u7684web\u5b57\u4f53\u6587\u4ef6\uff0c\u5e76\u4fee\u6539\u6837\u5f0f\u8868\u4ee5\u5305\u62ec\u5b83\u3002\n\u6211\u975e\u5e38\u559c\u6b22\u80fd\u591f\u901a\u8fc7\u7ec4\u7ec7\u6a21\u5f0f\u8868\u6307\u5b9a\u7d27\u6392\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u6211\u5f88\u96be\u4f7f\u7528FontForge\u63a5\u53e3\u5b9a\u4e49\u7c7b\uff0c\u56e0\u4e3a\u6211\u5076\u5c14\u4f1a\u6e05\u9664\u5b57\u5f62\u9009\u62e9\uff0c\u6240\u4ee5\u80fd\u591f\u53ea\u7f16\u8f91\u6211\u7684\u5217\u548c\u884c\u662f\u5f88\u68d2\u7684\u3002\n\u663e\u7136\uff0c\u6211\u7684\u5b57\u8ddd\u8c03\u6574\u4ecd\u7136\u975e\u5e38\u7c97\u7cd9-\u4f8b\u5982\uff0c\u6ca1\u6709j\u503c\u7684\u5b9e\u9645\u503c-\u4f46\u8fd9\u662f\u4e00\u4e2a\u5f00\u59cb\u3002\u53e6\u5916\uff0c\u6211\u53ef\u80fd\u4f1a\u60f3\u51fa\u5982\u4f55\u5c06\u5176\u4e0e\u5b57\u7b26\u5bf9\u5b57\u8ddd\u8c03\u6574\u7ed3\u5408\u8d77\u6765\uff0c\u5e76\u6709\u4e24\u4e2a\u8868\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u8fdb\u884c\u8c03\u6574\u3002\nA-\u575a\u6301\u8ddf\u8e2a\u6211\u7684\u7b14\u8ff9\u6a21\u677f\u51e0\u6b21\uff0c\u6240\u4ee5\u6211\u53ef\u80fd\u771f\u7684\u53ef\u4ee5\u901a\u8fc7\u540c\u6837\u7684\u8fc7\u7a0b\u5c06\u5979\u7684\u7b14\u8ff9\u8f6c\u6362\u6210\u5b57\u4f53\u3002\u54c7\uff01", "note_en": "I wanted to make a font based on my handwriting using only free software. It turns out that FontForge can be scripted with Python. I know just a little about Python and even less about typography, but I managed to hack together something that worked for me. If you\u2019re reading this on my blog at  https://sachachua.com/blog/ , you\u2019ll probably see the new font being used on the blog post titles. Whee!\n  My rough notes are at  https://github.com/sachac/sachac-hand/\u00a0. I wanted to write it as a literate program using Org Babel blocks. It\u2019s not really fully reproducible yet, but it might be a handy starting point. The basic workflow was:\n Import the template into Medibang Paint on my phone and draw letters on a different layer. (I almost forgot the letter  q, so I had to add it at the last minute.)\n    Set the left side and right side bearing, overriding as needed based on a table.\n   Use  sfnt2woff to export the web font file for use on my blog, and modify the stylesheet to include it.\n I really liked being able to specify kerning classes through an Org Mode table like this:\n  I had a hard time defining classes using the FontForge interface because I occasionally ended up clearing my glyph selection, so it was great being able to just edit my columns and rows.\n Clearly my kerning is still very rough\u2013no actual values for j, for example\u2013but it\u2019s a start. Also, I can probably figure out how to combine this with character pair kerning and have two tables for easier tweaking.\n A- insisted on tracing my handwriting template a few times, so I might actually be able to go through the same process to convert her handwriting into a font. Whee!", "posttime": "2020-06-06 18:50:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b57\u4f53,python,fontforge,\u7b14\u8ff9", "title": "Python+FontForge+Org\uff1a\u6211\u6839\u636e\u624b\u5199\u505a\u4e86\u4e00\u4e2a\u5b57\u4f53", "title_en": "Python+FontForge+Org: I made a font based on my handwriting", "transed": 1, "url": "https://sachachua.com/blog/2020/06/pythonfontforgeorg-i-made-a-font-based-on-my-handwriting/", "via": "", "real_tags": ["\u5b57\u4f53", "python", "fontforge", "\u7b14\u8ff9"]}, {"category": "", "categoryclass": "", "imagename": "35cf687efbe7eeb2592c3e54f78c36b8.jpg", "infoid": 1005423, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5b\u5170\u5fb7\u65af\u4e00\u540d65\u5c81\u7684\u8001\u4eba\u8bf4\uff0c\u4ed6\u201c\u5931\u7720\u201d\uff0c\u56e0\u4e3a\u4ed6\u5df2\u7ecf\u6536\u5230\u8fd1\u5341\u5e74\u6765\u4ece\u672a\u8ba2\u8fc7\u7684\u62ab\u8428\uff0c\u6709\u65f6\u4e00\u5929\u8981\u5403\u597d\u51e0\u6b21\u3002\n\u5728\u8fc7\u53bb\u7684\u4e5d\u5e74\u91cc\uff0c\u4ed6\u4ece\u672a\u8981\u6c42\u8fc7\u7684\u62ab\u8428\u5df2\u7ecf\u9001\u5230\u4e86\u8ba9\u00b7\u8303\u5170\u5fb7\u4ea8\u5728\u5b89\u7279\u536b\u666e\u7701\u7279\u6069\u80e1\u7279\u7684\u5bb6\u4e2d\u3002\u201c\u8fd9\u4e00\u5207\u59cb\u4e8e\u4e5d\u5e74\u524d\uff0c\u201d\u8303\u5170\u5fb7\u4ea8\u544a\u8bc9Het Laatste Nieuws\u3002\u201c\u7a81\u7136\uff0c\u4e00\u4f4d\u62ab\u8428\u9001\u8d27\u5458\u9012\u7ed9\u6211\u4e00\u5927\u5806\u62ab\u8428\u3002\u4f46\u6211\u4ec0\u4e48\u90fd\u6ca1\u70b9\uff0c\u201c\u4ed6\u8865\u5145\u8bf4\u3002\n\u8d77\u521d\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u53ea\u662f\u9001\u8d27\u5730\u5740\u4e0a\u7684\u4e00\u4e2a\u7b80\u5355\u9519\u8bef\uff0c\u4f46\u4ed6\u4ece\u672a\u70b9\u8fc7\u7684\u62ab\u8428\u3001\u70e4\u8089\u4e32\u3001\u76ae\u5854\u997c\u548c\u5176\u4ed6\u98df\u7269\u7684\u8ba2\u5355\u6e90\u6e90\u4e0d\u65ad\u5730\u6d8c\u5165\u3002\n\u201c\u5b83\u53ef\u4ee5\u5728\u5de5\u4f5c\u65e5\uff0c\u4e5f\u53ef\u4ee5\u5728\u5468\u672b\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e00\u5929\u4e2d\u7684\u4efb\u4f55\u65f6\u5019\u3002[\u8ba2\u5355\u6765\u81ea]\u7279\u6069\u80e1\u7279\u7684\u9001\u8d27\u670d\u52a1\uff0c\u4f46\u4e5f\u6765\u81ea\u5468\u8fb9\u5730\u533a\u3002\u6211\u751a\u81f3\u5728\u51cc\u66682\u70b9\u63a5\u5230\u4e86\u8ba2\u5355\u3002\u201c\u8303\u00b7\u5170\u5fb7\u4ea8\u8bf4\u3002\n\u201c\u6211\u518d\u4e5f\u7761\u4e0d\u7740\u4e86\u3002\u6bcf\u5f53\u6211\u5728\u8857\u4e0a\u542c\u5230\u6ed1\u677f\u8f66\u7684\u58f0\u97f3\u65f6\uff0c\u6211\u5c31\u5f00\u59cb\u53d1\u6296\u3002\u6211\u62c5\u5fc3\u4e0b\u6b21\u8fd8\u4f1a\u6709\u4eba\u6765\u9001\u70ed\u62ab\u8428\u3002\u201c\u3002\n\u8303\u5170\u5fb7\u4ea8\u8bf4\uff0c2019\u5e741\u6708\u7684\u4e00\u5929\uff0c\u5341\u540d\u4e0d\u540c\u7684\u9001\u8d27\u5458\u51fa\u73b0\u5728\u4ed6\u7684\u623f\u5b50\u91cc\uff0c\u5176\u4e2d\u4e00\u4eba\u5e26\u774014\u4e2a\u62ab\u8428\u3002\n\u201c\u6211\u4e00\u76f4\u62d2\u7edd\u9001\u8d27\uff0c\u6240\u4ee5\u6211\u4ece\u6765\u6ca1\u6709\u4ed8\u8fc7\u94b1\uff0c\u201d\u4ed6\u8bf4\uff0c\u5e76\u8865\u5145\u8bf4\uff0c\u9a9a\u6270\u4e0d\u4ec5\u8ba9\u4ed6\u607c\u706b\uff0c\u5bf9\u9910\u9986\u4e5f\u662f\u5982\u6b64\u3002\n\u201c\u8fd9\u82b1\u4e86\u4ed6\u4eec\u7684\u94b1\uff0c\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u628a\u98df\u7269\u6254\u6389\u3002\u572810\u4e2a\u5feb\u9012\u51fa\u73b0\u7684\u90a3\u5929\uff0c\u6211\u8ba1\u7b97\u4e86\u4e00\u4e0b\uff1a\u5b83\u82b1\u8d39\u4e86\u20ac450\u82f1\u9551\uff0c\u201c\u8303\u00b7\u5170\u5fb7\u8d6b\u59c6\u8bf4\u3002\n\u201c\u6211\u53ea\u4ece\u79d1\u9c81\u4f0a\u7279\u6216\u963f\u5c14\u8fea\u4e70\u51b7\u51bb\u62ab\u8428\u3002\u6211\u4ece\u6765\u6ca1\u6709\u8981\u6c42\u628a\u5b83\u4eec\u9001\u5230\u6211\u5bb6\uff0c\u201c\u4ed6\u8865\u5145\u8bf4\u3002\n\u201c\u6211\u7684\u4e00\u4f4d\u4f4f\u5728\u8d6b\u4f26\u56fe\u7279\u7684\u670b\u53cb\u6b63\u7ecf\u5386\u7740\u548c\u6211\u5b8c\u5168\u4e00\u6837\u7684\u4e8b\u60c5\u3002\u5979\u4e5f\u6536\u5230\u4e869\u5e74\u6ca1\u8ba2\u8fc7\u7684\u62ab\u8428\u4e86\u3002\u201c\u8303\u00b7\u5170\u5fb7\u4ea8\u8bf4\u3002\n\u201c\u6709\u65f6\u5019\u6211\u4eec\u4e24\u4e2a\u90fd\u662f\u5728\u540c\u4e00\u5929\u6536\u5230\u7684\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u6211\u4eec\u76f8\u4e92\u8b66\u544a\u5bf9\u65b9\u8981\u671f\u5f85\u9001\u8d27\uff0c\u201c\u4ed6\u8bf4\uff0c\u5e76\u8865\u5145\u8bf4\u5f88\u53ef\u80fd\u662f\u4ed6\u4eec\u90fd\u8ba4\u8bc6\u7684\u4eba\u3002\n\u4ed6\u8bf4\uff0c\u4ed6\u591a\u6b21\u5411\u8b66\u65b9\u62a5\u544a\u4e86\u865a\u5047\u9001\u8d27\u7684\u60c5\u51b5\uff0c\u4f46\u4ed6\u4ecd\u7136\u4e0d\u77e5\u9053\u9a9a\u6270\u4ed6\u7684\u4eba\u662f\u8c01\u3002\u201c\u6211\u518d\u4e5f\u53d7\u4e0d\u4e86\u4e86\u3002\u5f53\u6211\u53d1\u73b0\u662f\u8c01\u5728\u8fc7\u53bb\u4e5d\u5e74\u91cc\u4e00\u76f4\u56f0\u6270\u7740\u6211\u65f6\uff0c\u8fd9\u4e0d\u4f1a\u662f\u4ed6\u4eec\u6700\u597d\u7684\u4e00\u5929\uff0c\u201c\u4ed6\u8bf4\u3002", "note_en": "A 65-year-old man in Flanders says he is \u201closing sleep\u201d because he has been receiving pizzas he never ordered for nearly a decade, sometimes several times a day.\n Over the past nine years, pizzas he never asked for have been delivered to Jean Van Landeghem\u2019s home in Turnhout, in the Antwerp province. \u201cIt started nine years ago,\u201d Van Landeghem told  Het Laatste Nieuws. \u201cSuddenly, a pizza delivery man handed me a whole load of pizzas. But I hadn\u2019t ordered anything,\u201d he added.\n   At first, he thought it was a simple mistake in the delivery address, but orders of pizzas, kebabs, pittas and other food that he never ordered kept flowing in.\n \u201cIt can be on a weekday or during weekends, and at any time of day. [The orders come from] delivery services in Turnhout, but also from the surrounding area. I have even had orders delivered to me at 2:00 AM,\u201d Van Landeghem said.\n \u201cI cannot sleep anymore. I start shaking every time I hear a scooter on the street. I dread that someone will come to drop off hot pizzas yet another time,\u201d he added.\n One day in January 2019, Van Landeghem said, ten different delivery men showed up at his house, one of which had 14 pizzas with him.\n   \u201cI have always refused the deliveries, so I have never paid for anything,\u201d he said, adding that the harassment is not only annoying for him, but also for restaurants.\n \u201cIt costs them money and they have to throw the food away. On the day that ten deliveries showed up, I did the math: it cost \u20ac450,\u201d Van Landeghem said.\n \u201cI only buy frozen pizzas from Colruyt or Aldi. I have never asked for them to be delivered to my house,\u201d he added.\n \u201cA friend of mine who lives in Herenthout is going through exactly the same thing as I am. She has been receiving pizza she has not ordered for nine years, too,\u201d Van Landeghem said.\n   \u201cSometimes we both get them on the same day. When that happens, we warn each other to expect a delivery,\u201d he said, adding that it is likely someone they both know.\n He reported the false deliveries to the police several times, he said, but he still has no idea who the person harassing him is. \u201cI cannot take it anymore. When I find out whoever has been bothering me for the past nine years, it will not be their best day,\u201d he said.", "posttime": "2020-06-06 18:17:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6bd4\u5229\u65f6,man,\u9001\u8d27", "title": "\u4e00\u540d\u6bd4\u5229\u65f6\u7537\u5b50\u591a\u5e74\u6765\u4e00\u76f4\u6536\u5230\u4ed6\u4ece\u672a\u8ba2\u8d2d\u8fc7\u7684\u62ab\u8428", "title_en": "Belgian man has been receiving pizzas he never ordered for years", "transed": 1, "url": "https://www.brusselstimes.com/all-news/belgium-all-news/114806/belgian-man-has-been-receiving-pizzas-he-never-ordered-for-years/", "via": "", "real_tags": ["\u6bd4\u5229\u65f6", "man", "\u9001\u8d27"]}, {"category": "", "categoryclass": "", "imagename": "c33efa1719f6fe3b3c05c1ecc94254fc.jpeg", "infoid": 1005422, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\ncingulata(\u53d1\u97f3\u4e3atchingulata&34\uff1b)\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u5de5\u5177\u94fe\u548cRTE\uff0c\u7528\u4e8e\u901a\u8fc7\u5b8c\u5168\u540c\u6001\u52a0\u5bc6\u6280\u672f\u5728\u52a0\u5bc6\u6570\u636e\u4e0a\u8fd0\u884cC++\u7a0b\u5e8f\u3002\ncingulata(\u53d1\u97f3\u4e3atchingulata&34\uff1b)\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u5de5\u5177\u94fe\u548cRTE\uff0c\u7528\u4e8e\u901a\u8fc7\u5b8c\u5168\u540c\u6001\u52a0\u5bc6\u6280\u672f\u5728\u52a0\u5bc6\u6570\u636e\u4e0a\u8fd0\u884cC++\u7a0b\u5e8f\u3002", "note_en": "GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n   Cingulata (pronounced &#34;tchingulata&#34;) is a compiler toolchain and RTE for running C++ programs over encrypted data by means of fully homomorphic encryption techniques.\n               Cingulata (pronounced &#34;tchingulata&#34;) is a compiler toolchain and RTE for running C++ programs over encrypted data by means of fully homomorphic encryption techniques.", "posttime": "2020-06-06 18:16:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,c++,\u52a0\u5bc6,run,\u53d1\u97f3", "title": "cingulata\uff1a\u5728\u5177\u6709\u5b8c\u5168\u540c\u6001\u52a0\u5bc6\u7684\u52a0\u5bc6\u6570\u636e\u4e0a\u8fd0\u884cC++\u4ee3\u7801", "title_en": "Cingulata: Run C++ code over encrypted data with fully homomorphic encryption", "transed": 1, "url": "https://github.com/CEA-LIST/Cingulata", "via": "", "real_tags": ["\u4ee3\u7801", "c++", "\u52a0\u5bc6", "run", "\u53d1\u97f3"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1005421, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u670b\u53cb\u5e15\u7279\u6628\u5929\u5199\u4e86\u4e00\u7bc7\u9898\u4e3a\u201c\u5f88\u591a\u5173\u4e8e\u4e00\u70b9\u201d\u7684\u6587\u7ae0\uff0c\u5728\u6587\u7ae0\u4e2d\u4ed6\u8c08\u5230\u4e86\u4ed6\u76ee\u524d\u662f\u5982\u4f55\u52aa\u529b\u907f\u514d\u5f00\u59cb\u65b0\u4e8b\u7269\u7684\u3002\u4ed6\u8bf4\uff0c\u5982\u679c\u4ed6\u4e13\u6ce8\u4e8e\u638c\u63e1\u51e0\u4ef6\u4e8b\uff0c\u4ed6\u4f1a\u66f4\u5feb\u4e50\uff0c\u4f1a\u6709\u66f4\u591a\u7684\u6210\u529f\u3002\n\u4ed6\u8fd8\u8c08\u5230\u5927\u591a\u6570\u4eba\u6709\u4e00\u4ef6\u4e8b\u662f\u51fa\u540d\u7684\uff0c\u4ee5\u53ca\u4ed6\u662f\u5982\u4f55\u62c5\u5fc3\u88ab\u56f0\u5728\u7279\u5b9a\u7684\u804c\u4e1a\u6216\u52aa\u529b\u4e2d\u7684\u3002\u4ed6\u4e3e\u4e86\u4ee5\u9ad8\u5c14\u592b\u95fb\u540d\u7684\u8001\u864e\u4f0d\u5179\u4e3a\u4f8b\u3002\u8001\u864e\u4f0d\u5179\u6240\u505a\u7684\u4e00\u5207\u90fd\u662f\u5173\u4e8e\u9ad8\u5c14\u592b\u7684\u3002\u4ed6\u6253\u9ad8\u5c14\u592b\u7403\uff0c\u8bbe\u8ba1\u9ad8\u5c14\u592b\u7403\u573a\uff0c\u5199\u5173\u4e8e\u9ad8\u5c14\u592b\u7684\u6587\u7ae0\u3002\n\u6211\u8ba4\u4e3a\u672a\u8a00\u660e\u7684\u95ee\u9898\u662f\uff1a\u201c\u5982\u679c\u6cf0\u683c\u00b7\u4f0d\u5179\u5931\u53bb\u4e86\u5bf9\u9ad8\u5c14\u592b\u7403\u7684\u70ed\u7231\u600e\u4e48\u529e\uff1f\u4ed6\u8fd8\u80fd\u7ee7\u7eed\u56e0\u5176\u4ed6\u4e8b\u60c5\u800c\u51fa\u540d\u5417\uff1f\u201c\u3002\n\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\u6211\u4eec\u4e0d\u5fc5\u5c40\u9650\u4e8e\u4e00\u6b21\u52aa\u529b\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u6700\u6709\u8da3\u7684\u4eba\u662f\u90a3\u4e9b\u505a\u4e00\u4e9b\u65b0\u7684\u3001\u201c\u51fa\u683c\u7684\u201d\u7684\u4eba\uff0c\u5b8c\u5168\u4e0e\u4ed6\u4eec\u4ee5\u524d\u505a\u7684\u4e8b\u60c5\u65e0\u5173\u3002\u6211\u559c\u6b22\u8bfb\u4e00\u4e9b\u5b8c\u5168\u6253\u7834\u4f20\u7edf\u7684\u4eba\u7684\u6545\u4e8b\u3002\u6211\u559c\u6b22\u60f3\u201c\u54c7\uff0c\u6211\u6ca1\u60f3\u5230\u4f60\u4f1a\u8fd9\u4e48\u505a\u201d\uff0c\u8fd9\u7ed9\u4ed6\u4eec\u589e\u6dfb\u4e86\u66f4\u591a\u7684\u6df1\u5ea6\u3002\u8fd9\u8ba9\u6211\u4e0d\u7981\u8981\u95ee\uff1a\u201c\u4ed6\u4eec\u4e0b\u4e00\u6b65\u4f1a\u505a\u4ec0\u4e48\uff1f\u201d\n\u5c31\u50cf\u7687\u540e\u4e50\u961f\u7684\u9996\u5e2d\u5409\u4ed6\u624b\u5e03\u83b1\u6069\u00b7\u6885(Brian May)\u662f\u5982\u4f55\u6210\u4e3a\u4e00\u540d\u5929\u4f53\u7269\u7406\u5b66\u5bb6\u7684\u3002\u8fd9\u4e0e\u4ed6\u6210\u540d\u7684\u539f\u56e0\u5b8c\u5168\u4e0d\u540c\uff0c\u8fd9\u8ba9\u4ed6\u53d8\u5f97\u72ec\u7279\u800c\u6709\u8da3\u3002\u4ed6\u4e0d\u518d\u662f\u201c\u53e6\u4e00\u4e2a\u97f3\u4e50\u5bb6\u201d\u4e86\u3002\n\u8fd8\u6709\u66f4\u591a\u7684\u4f8b\u5b50\u3002\u5982\u679c\u6211\u56de\u5230\u672c\u4e16\u7eaa\u5934\u5341\u5e74\uff0c\u544a\u8bc9\u67d0\u4eba\u4e54\u00b7\u7f57\u6839\u6bcf\u5929\u90fd\u4f1a\u6709\u6570\u767e\u4e07\u4eba\u6536\u542c\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u8bf4\u201c\u4ec0\u4e48\uff0cUFC\u8bc4\u8bba\u5458\uff1f\u201d\uff0c\u6216\u8005\u201c\u4ec0\u4e48\uff0c\u5355\u53e3\u76f8\u58f0\u6f14\u5458\uff1f\u201d\uff0c\u751a\u81f3\u201c\u4ec0\u4e48\uff0c\u6050\u60e7\u56e0\u7d20\u7684\u5bb6\u4f19\uff1f\u201d\u5982\u679c\u4ed6\u505c\u7559\u5728\u8fd9\u4e9b\u4e8b\u60c5\u4e2d\u7684\u4efb\u4f55\u4e00\u4ef6\uff0c\u4ed6\u53ef\u80fd\u6c38\u8fdc\u4e5f\u627e\u4e0d\u5230\u64ad\u5ba2\u3002\u4f46\u4ed6\u6ca1\u6709\uff0c\u73b0\u5728\u4ed6\u6709\u4e86\u8fd9\u4e2a\u661f\u7403\u4e0a\u6700\u6210\u529f\u7684\u64ad\u5ba2\u4e4b\u4e00\u3002\u4ed6\u4e0d\u613f\u610f\u6ee1\u8db3\u4e8e\u53ea\u505a\u4e00\u4ef6\u4e8b\u3002\n\u5f53\u5927\u591a\u6570\u4eba\u60f3\u5230Pieter Level\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u60f3\u5230\u4e16\u754c\u65c5\u884c\u8005\u81ea\u529b\u66f4\u751f\u7684\u521d\u521b\u516c\u53f8\u3002\u5982\u679c\u4f60\u5bf9\u4ed6\u6709\u66f4\u591a\u7684\u4e86\u89e3\uff0c\u4f60\u4f1a\u53d1\u73b0\u4ed6\u4ee5\u524d\u7684\u804c\u4e1a\u751f\u6daf\u975e\u5e38\u6210\u529f\uff0c\u521b\u4f5c\u7535\u5b50\u97f3\u4e50\uff0c\u5bfc\u6f14\u97f3\u4e50\u5f55\u50cf\u5e26\uff0c\u5e76\u7ecf\u8425\u81ea\u5df1\u7684\u54c1\u724c\u3002\u5373\u4f7f\u5728\u4ed6\u6709\u4e86\u81ea\u5df1\u7684\u521b\u4e1a\u9879\u76ee\u540e\uff0c\u4ed6\u4ecd\u7136\u5c1d\u8bd5\u5b66\u4e603D\u5efa\u6a21\uff0c\u5e76\u5c1d\u8bd5\u865a\u62df\u73b0\u5b9e\u7684\u5f00\u53d1\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u6562\u80af\u5b9a\u4ed6\u4e5f\u7ecf\u8425\u8fc7\u4e00\u4e9b\u6280\u672f\u8bc4\u8bba\u7f51\u7ad9\u3002\n\u6709\u4e9b\u4eba\u53ef\u80fd\u53ea\u77e5\u9053\u76ae\u7279\u7684DJ\u540d\u5b57(\u2018\u718a\u732b\u2019)\u3002\u90a3\u4e9b\u4eba\u5bf9\u4ed6\u73b0\u5728\u7684\u6240\u4f5c\u6240\u4e3a\u4e00\u65e0\u6240\u77e5\u3002\u5bf9\u4ed6\u4eec\u6765\u8bf4\uff0c\u4ed6\u7684\u201c\u4e8b\u60c5\u201d\u662f\u4ed6\u662f\u4e00\u540dDJ\u3002\u6240\u4ee5\uff0c\u5f53\u90a3\u4e9b\u4eba\u4eca\u5929\u53bb\u627e\u4ed6\uff0c\u770b\u770b\u4ed6\u4ece\u90a3\u4ee5\u540e\u90fd\u505a\u4e86\u4e9b\u4ec0\u4e48\uff0c\u4ed6\u4eec\u4f1a\u611f\u5230\u9707\u60ca\uff0c\u60f3\u8981\u66f4\u591a\u5730\u4e86\u89e3\u4ed6\u3002\n\u5c31\u4e2a\u4eba\u800c\u8a00\uff0c\u5c3d\u7ba1\u4ed6\u53d6\u5f97\u4e86\u6240\u6709\u6210\u5c31\uff0c\u4f46\u6211\u6700\u559c\u6b22\u7684\u662f\u4ed6\u7684\u5199\u4f5c\uff1b\u6211\u7edd\u5bf9\u559c\u6b22\u4ed6\u7684\u535a\u5ba2\u5e16\u5b50\uff0c\u5e76\u5b9a\u671f\u91cd\u8bfb\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u6211\u6700\u559c\u6b22\u7684\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u4ed6\u662f\u4e00\u4e2a\u201c\u601d\u60f3\u5bb6\u201d\u548c\u4e00\u4e2a\u9f13\u821e\u4eba\u5fc3\u7684\u4eba\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u6d89\u8db3\u4e86\u8fd9\u4e48\u591a\u4e8b\u60c5\uff0c\u8fd9\u4f7f\u4ed6\u6bd4\u53ea\u505a\u8fc7\u5176\u4e2d\u4e00\u4ef6\u4e8b\u60c5\u6709\u8da3\u5f97\u591a\uff0c\u800c\u4e14\u4ed6\u63a2\u7d22\u8fd9\u4e9b\u4e8b\u60c5\u7684\u4e8b\u5b9e\u8ba9\u4ed6\u627e\u5230\u4e86\u81ea\u5df1\u64c5\u957f\u7684\u4e1c\u897f\u3002\n\u5f53\u6211\u5728\u6211\u7684\u5927\u5b66\u5b66\u4e60\u667a\u80fd\u4ee3\u7406\u6a21\u5757\u65f6\uff0c\u6211\u88ab\u4ecb\u7ecd\u7ed9\u4e86\u63a2\u7d22\u548c\u5f00\u53d1\u7684\u6982\u5ff5\u3002\u63a2\u7d22\u662f\u5f53\u4f60\u6709\u76ee\u7684\u5730\u9009\u62e9\u4e0d\u91c7\u53d6\u4f60\u8ba4\u4e3a\u6700\u6709\u56de\u62a5\u7684\u884c\u52a8\uff0c\u800c\u662f\u5c1d\u8bd5\u4e00\u4e9b\u65b0\u7684\u4e1c\u897f\u6765\u83b7\u5f97\u65b0\u7684\u4fe1\u606f\u3002\u5229\u7528\u5c31\u662f\u5229\u7528\u4f60\u5728\u63a2\u7d22\u4e2d\u53d1\u73b0\u7684\u6700\u597d\u7684\u7b56\u7565\u3002\n\u5728\u5f3a\u5316\u5b66\u4e60\u4e2d\uff0c\u4ee3\u7406(\u5373\u667a\u80fd\u7a0b\u5e8f)\u5728\u505a\u6b63\u786e\u7684\u4e8b\u60c5\u65f6\u4f1a\u5f97\u5230\u5956\u52b1(\u7ed9\u5206)\uff0c\u800c\u5728\u505a\u5bf9\u7684\u4e8b\u60c5\u65f6\u4f1a\u53d7\u5230\u60e9\u7f5a(\u5f97\u5230\u70b9\u6570\u60e9\u7f5a)\u3002\u5176\u60f3\u6cd5\u662f\uff0c\u4ee3\u7406\u4eba\u5c06\u5b66\u4e60\u8981\u505a\u7684\u90a3\u79cd\u884c\u52a8\uff0c\u4ee5\u6700\u5927\u5316\u56de\u62a5\u3002\n\u5982\u679c\u4ee3\u7406\u627e\u5230\u7b2c\u4e00\u4e2a\u6709\u6548\u7684\u7b56\u7565\uff0c\u7136\u540e\u4e00\u904d\u53c8\u4e00\u904d\u5730\u505a\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u9519\u8fc7\u66f4\u4f18\u7684\u7b56\u7565\uff0c\u5e76\u5f97\u5230\u66f4\u7cdf\u7cd5\u7684\u603b\u4f53\u7ed3\u679c\u3002\u6240\u4ee5\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4ee3\u7406\u9075\u5faa\u4e00\u6bb5\u65f6\u95f4\u7684\u63a2\u7d22\uff0c\u5728\u90a3\u91cc\u5b83\u8bd5\u56fe\u786e\u5b9a\u6700\u4f18\u7b56\u7565\uff0c\u7136\u540e\u4e00\u65e6\u786e\u5b9a\u4e86\u6700\u4f18\u7b56\u7565\uff0c\u5b83\u5c31\u4f1a\u901a\u8fc7\u91cd\u590d\u9075\u5faa\u6700\u4f18\u7b56\u7565\u6765\u5229\u7528\u5b83\u3002\u5982\u679c\u73af\u5883\u53ef\u4ee5\u6539\u53d8\uff0c\u4ee3\u7406\u53ef\u80fd\u4f1a\u5076\u5c14\u5c1d\u8bd5\u4e00\u4e9b\u65b0\u7684\u4e1c\u897f\uff0c\u770b\u770b\u662f\u5426\u6709\u66f4\u597d\u7684\u9009\u62e9\u3002\n\u4f5c\u4e3a\u4eba\u7c7b\uff0c\u5c1d\u8bd5\u65b0\u4e8b\u7269\u662f\u6211\u4eec\u63a2\u7d22\u4e16\u754c\u7684\u65b9\u5f0f\u3002\u4f5c\u4e3a\u6210\u5e74\u4eba\uff0c\u8fd9\u901a\u5e38\u610f\u5473\u7740\u4ece\u4e8b\u4e00\u9879\u65b0\u7684\u7231\u597d\u6216\u5b66\u4e60\u4e00\u9879\u65b0\u7684\u6280\u80fd\u3002\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u53bb\u5f53\u5730\u793e\u533a\u4e2d\u5fc3\u7684\u54c1\u5c1d\u73ed\uff0c\u4e0d\u7ba1\u600e\u6837\u3002\u4e00\u65e6\u6211\u4eec\u8fdb\u884c\u4e86\u8db3\u591f\u7684\u63a2\u7d22\uff0c\u627e\u5230\u4e86\u6211\u4eec\u559c\u6b22\u548c/\u6216\u8ba4\u4e3a\u53ef\u4ee5\u8d5a\u94b1\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u5c31\u4f1a\u8f6c\u5411\u5f00\u53d1\u6218\u7565\uff0c\u5e76\u8bd5\u56fe\u5229\u7528\u6211\u4eec\u7684\u77e5\u8bc6\u548c\u6280\u80fd\u6765\u8d5a\u94b1/\u6210\u540d/\u63d0\u9ad8\u6211\u4eec\u7684\u58f0\u8a89/\u6539\u5584\u6211\u4eec\u7684\u5065\u5eb7\u3002\n\u5e15\u7279\u8fd8\u662f\u4e2a\u5e74\u8f7b\u4eba\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u4ed6\u4e0d\u592a\u53ef\u80fd\u5df2\u7ecf\u63a2\u7d22\u4e86\u8db3\u591f\u591a\u7684\u4e1c\u897f\u6765\u771f\u6b63\u77e5\u9053\u4ed6\u559c\u6b22\u4ec0\u4e48\u548c\u4e0d\u559c\u6b22\u4ec0\u4e48\uff0c\u4e5f\u4e0d\u592a\u53ef\u80fd\u5b8c\u5168\u77e5\u9053\u4ed6\u64c5\u957f\u4ec0\u4e48\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4e0d\u786e\u5b9a\u4efb\u4f55\u4eba\u7684\u5bff\u547d\u662f\u5426\u8db3\u591f\u957f\u3002\u4e16\u754c\u4e0a\u6709\u592a\u591a\u7684\u4e8b\u60c5\u9700\u8981\u6211\u4eec\u53bb\u5c1d\u8bd5\uff0c\u5373\u4f7f\u6211\u4eec\u5c1d\u8bd5\u4e86\uff0c\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\u6211\u4eec\u5728\u8fd9\u4e9b\u4e8b\u60c5\u4e0a\u7684\u6700\u7ec8\u6f5c\u529b\u3002\n\u5728\u5e15\u7279\u63d0\u5230\u4ed6\u60f3\u5f00\u59cb\u5b66\u4e60\u97f3\u4e50\u5236\u4f5c\u3002\u5f88\u591a\u4e13\u4e1a\u4eba\u58eb\u4e5f\u628a\u521b\u4f5c\u97f3\u4e50\u4f5c\u4e3a\u4e1a\u4f59\u7231\u597d\u3002\u827e\u767b\u662f\u4e00\u540d\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u5236\u4f5c\u81ea\u5df1\u7684\u97f3\u4e50\u3002Cam\u662f\u4e00\u540d\u6f14\u8bb2\u8005\u548c\u5021\u5bfc\u8005\uff0c\u4f46\u5728Twitch\u4e0a\u626e\u6f14DJ\u7684\u89d2\u8272\u3002\n\u5982\u679c\u4f60\u88ab\u5438\u5f15\u53bb\u505a\u67d0\u4e8b\uff0c\u6211\u8ba4\u4e3a\u8003\u8651\u53bb\u505a\u662f\u4e2a\u597d\u4e3b\u610f\u3002\u5982\u679c\u4f60\u4e00\u904d\u53c8\u4e00\u904d\u5730\u91cd\u590d\u5f00\u59cb\u4e00\u4ef6\u65b0\u7684\u4e8b\u60c5\uff0c\u800c\u6ca1\u6709\u770b\u900f\u4e4b\u524d\u7684\u9879\u76ee(\u751a\u81f3\u653e\u5f03\u73b0\u6709\u7684\u9879\u76ee\uff01)\uff0c\u8fd9\u662f\u6709\u5f88\u5927\u533a\u522b\u7684\uff0c\u4f46\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u91cc\u662f\u8fd9\u6837\u7684\u3002\u6211\u8ba4\u4e3a\u8ffd\u6c42\u4f60\u611f\u5174\u8da3\u7684\u4e1c\u897f\u662f\u907f\u514d\u56e0\u4e00\u4ef6\u201c\u4e8b\u201d\u800c\u51fa\u540d\u7684\u597d\u65b9\u6cd5\u3002\n\u6bd4\u5982\u5927\u536b\u00b7\u6d77\u5185\u6885\u5c14\u00b7\u6c49\u68ee\u3002\u5728\u804c\u4e1a\u4e0a\uff0c\u4ed6\u662f\u4e00\u540d\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u4e5f\u5199\u4e0b\u4e86\u4ed6\u4ece\u804c\u4e1a\u751f\u6daf\u4e2d\u5b66\u5230\u7684\u4e1c\u897f\u3002\u4f46\u4ed6\u4e5f\u6839\u636e\u81ea\u5df1\u7684\u7231\u597d\u548c\u4e2a\u4eba\u751f\u6d3b\u6765\u5b9a\u4e49\u81ea\u5df1\u3002\n\u5e15\u7279\u4eca\u5e74\u4e00\u76f4\u5728\u505a\u7684\u4e00\u4ef6\u6211\u6700\u559c\u6b22\u7684\u4e8b\u60c5\u5c31\u662f\u5c1d\u8bd5\u5b66\u4e60\u4e00\u9879\u65b0\u6280\u80fd\uff0c\u6216\u8005\u5728\u4e00\u5e74\u4e2d\u7684\u6bcf\u4e2a\u6708\u505a\u4e00\u4e9b\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\u8fd9\u662f\u5f53\u6211\u8fbe\u5230\u91d1\u878d\u7a33\u5b9a\u7684\u6c34\u5e73\u65f6\uff0c\u6211\u80af\u5b9a\u4f1a\u8003\u8651\u505a\u7684\u4e8b\u60c5\uff0c\u4ee5\u5141\u8bb8\u8fd9\u6837\u505a\u3002\n\u4e00\u6708\u4efd\uff0c\u5e15\u7279\u5b66\u4f1a\u4e86\u70f9\u996a\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6210\u529f\u3002\u7136\u540e\uff0c\u4ed6\u51b3\u5b9a\u60f3\u8bfb\u66f4\u591a\u7684\u5c0f\u8bf4\uff0c\u867d\u7136\u4ed6\u627f\u8ba4\u81ea\u5df1\u81f3\u5c11\u5931\u8d25\u4e86\uff0c\u4f46\u81f3\u5c11\u4ed6\u73b0\u5728\u77e5\u9053\u8fd9\u4e0d\u9002\u5408\u4ed6\u30023\u6708\u4efd\uff0c\u4ed6\u5b66\u4e60\u4e86\u8bbe\u8ba1\u548cUI/UX\uff0c4\u6708\u4efd\uff0c\u4ed6\u60f3\u53d1\u8d77\u4e00\u4e2a\u75c5\u6bd2\u5f0f\u7684\u9879\u76ee\u3002\u636e\u6211\u6240\u77e5\uff0c\u5e15\u7279\u53ea\u63a8\u51fa\u4e86How to Say No\uff0c\u4f46\u4ed6\u6210\u529f\u5730\u8ba9\u5b83\u50cf\u75c5\u6bd2\u4e00\u6837\u4f20\u64ad\u5f00\u6765\uff0c\u6211\u770b\u5230\u4e86\u65e0\u6570\u5173\u4e8e\u5b83\u7684\u63a8\u6587\u3002\u505a\u5f97\u597d!\u3002\n\u5e15\u7279\u57285\u6708\u4efd\u4f3c\u4e4e\u6ca1\u6709\u5b66\u5230\u4e00\u9879\u65b0\u6280\u80fd\uff0c\u76f8\u53cd\uff0c\u4ed6\u5728\u8fd9\u4e2a\u6708\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\u4f11\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u201c\u601d\u8003\u5468\u201d\uff0c\u56e0\u4e3a\u4ed6\u5904\u4e8e\u6050\u60e7\u4e4b\u4e2d\u3002\u5728\u4ed6\u7684\u601d\u8003\u5468\u7ed3\u675f\u540e\uff0c\u5e15\u7279\u73b0\u5728\u8bf4\u4ed6\u6b63\u5728\u52aa\u529b\u907f\u514d\u505a\u65b0\u7684\u4e8b\u60c5\uff0c\u8fd9\u4f3c\u4e4e\u4e0e\u4ed6\u5728\u5e74\u521d\u8bbe\u5b9a\u7684\u76ee\u6807\u80cc\u9053\u800c\u9a70\u3002\n\u6211\u8ba4\u4e3a\uff0c\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u538b\u6291\u4ed6\u4ece\u4e8b\u65b0\u9879\u76ee\u7684\u613f\u671b\u5b9e\u9645\u4e0a\u53ef\u80fd\u4f1a\u4f24\u5bb3\u5230\u4ed6\u3002\u5728\u201c12\u4e2a\u6708\uff0c12\u9879\u65b0\u6280\u80fd\u201d\u4e00\u4e66\u4e2d\uff0c\u4ed6\u8bf4\u201c\u8fd9\u5c31\u662f\u6211\u7684\u4e2a\u6027--\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u65b0\u7684\u4e1c\u897f\uff0c\u5e76\u5bf9\u5b83\u7740\u8ff7\u3002\u201d\u6211\u771f\u7684\u5f88\u559c\u6b22\u5b66\u4e60\u65b0\u4e8b\u7269\u3002\u201c\u3002\u5728\u6211\u770b\u6765\uff0c\u901a\u8fc7\u8bd5\u56fe\u538b\u5236\u8fd9\u79cd\u503e\u5411\uff0c\u4ed6\u5e76\u6ca1\u6709\u771f\u5b9e\u5730\u9762\u5bf9\u81ea\u5df1\uff0c\u8fd9\u5f88\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e0d\u6ee1\u3002\n\u5728\u5e15\u7279\u7684\u5e16\u5b50\u91cc\u6709\u5f88\u591a\u95ee\u9898\uff1b\u5bf9\u751f\u6d3b\u5267\u672c\u3001\u4ed6\u7684\u8eab\u4efd\u548c\u4ed6\u7684\u672a\u6765\u7684\u6050\u60e7\u3002\u4ed6\u4e0d\u60f3\u628a\u751f\u547d\u6d6a\u8d39\u5728\u80a4\u6d45\u7684\u63a2\u7d22\u4e0a\uff0c\u4f46\u4ed6\u4f3c\u4e4e\u4e5f\u5bb3\u6015\u81f4\u529b\u4e8e\u4e00\u4ef6\u5177\u4f53\u7684\u4e8b\u60c5\u3002\u5982\u679c\u6211\u4eec\u8001\u5b9e\u8bf4\uff0c\u6211\u53ef\u80fd\u4f1a\u8bf4\u5e15\u7279\u4f3c\u4e4e\u6b63\u5728\u7ecf\u5386\u56db\u5206\u4e4b\u4e00\u4eba\u751f\u5371\u673a\uff0c\u7279\u522b\u662f\u8003\u8651\u5230\u4e00\u4e2a\u6708\u524d\u4ed6\u8fd8\u611f\u89c9\u4e0d\u6e05\u695a\u548c\u4e0d\u786e\u5b9a\u3002\n\u505a\u771f\u5b9e\u7684\u81ea\u5df1\u3002\u4e0d\u8981\u4ec5\u4ec5\u56e0\u4e3a\u4f60\u60f3\u8ba9\u522b\u4eba\u4ee5\u67d0\u79cd\u65b9\u5f0f\u770b\u4f60\uff0c\u6216\u8005\u56e0\u4e3a\u4f60\u770b\u5230\u522b\u4eba\u4ee5\u67d0\u79cd\u65b9\u5f0f\u505a\u67d0\u4e8b\uff0c\u5c31\u53bb\u505a\u67d0\u4e8b\u3002\u4e0d\u8981\u56e0\u4e3a\u4f60\u7684\u751f\u6d3b\u548c\u4f60\u7684\u540c\u9f84\u4eba\u4e0d\u4e00\u6837\u800c\u611f\u5230\u56f0\u60d1\u3002\n\u4e00\u5b9a\u8981\u627e\u5230\u4f60\u53ef\u4ee5\u5949\u732e\u4e00\u751f\u7684\u4e1c\u897f\uff0c\u4f46\u8981\u786e\u4fdd\u4f60\u4e0d\u662f\u4e00\u89c1\u949f\u60c5\u3002\u786e\u4fdd\u4f60\u5df2\u7ecf\u63a2\u7d22\u4e86\u6240\u6709\u7684\u9009\u62e9\uff0c\u5e76\u4e14\u5bf9\u4f60\u6240\u8d70\u7684\u9053\u8def\u611f\u5230\u6ee1\u610f\u3002\n\u5e76\u4e0d\u662f\u6bcf\u4ef6\u4e8b\u90fd\u5fc5\u987b\u4ee5\u76c8\u5229\u4e3a\u76ee\u7684\u3002\u5e76\u4e0d\u662f\u6bcf\u4ef6\u4e8b\u90fd\u8981\u59cb\u7ec8\u5982\u4e00\u5730\u53bb\u505a\u3002\u628a\u51e0\u5929\u65f6\u95f4\u6d6a\u8d39\u5728\u6c38\u8fdc\u89c1\u4e0d\u5230\u5149\u7684\u4e8b\u60c5\u4e0a\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u4ece\u4f60\u7684\u7cfb\u7edf\u4e2d\u91ca\u653e\u51fa\u4e00\u79cd\u51b2\u52a8\uff0c\u8fd9\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5b66\u5230\u4e00\u4e9b\u4e1c\u897f\uff0c\u53ef\u4ee5\u5e94\u7528\u5230\u4f60\u7684\u4e3b\u8981\u4e8b\u4e1a\u4e2d\u3002\n\u53e6\u5916\uff0c\u6211\u53c2\u52a0\u805a\u4f1a\u8fdf\u5230\u4e86\uff0c\u4e0d\u8fc7\u6211\u6700\u8fd1\u6709\u4e00\u4e2a\u63a8\u7279\u8d26\u53f7\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u5173\u6ce8\u3002", "note_en": "My friend  Pat wrote an article yesterday titled \u2018A lot about a little\u2019, in which he talks about how he is currently trying to  avoid starting new things. He says that if he focuses on mastering just a few things, he would be happier, and have more success.\n He also talks about how most people have one thing that they are known for, and how he has apprehensions about being locked into a specific career or endeavour. He gives the example of Tiger Woods, who is known for golf. Everything Tiger Woods does is about Golf. He plays golf, designs golf courses, and writes about golf.\n I think the unstated question there is this: \u201cWhat if Tiger Woods lost the love for golfing? Could he go on to be known for something else?\u201d\n  Personally, I don\u2019t think that we have to be constrained to just one endeavour. To me, the most interesting people are those who do something new and \u2018out of left field\u2019, completely unrelated to what they had been doing before. I love reading about someone who completely breaks the mould. I love thinking \u201cWow, I didn\u2019t expect this from you\u201d, and it adds a lot more depth to them. It makes me ask \u201cWhat will they do next?\u201d\n Like how Brian May, lead guitarist for Queen,  became an astrophysicist. That\u2019s completely different from what he became famous for, and it makes him unique and interesting to talk about. He isn\u2019t \u201cjust another musician\u201d any more.\n There are more examples. If I time travelled back to the 2000s and told someone that Joe Rogan would be listened to by millions of people every day, they might say \u201cWhat, the UFC Commentator?\u201d, or \u201cWhat, the stand-up comedian?\u201d, or even \u201cWhat, the fear factor guy?\u201d. If he stopped at any one of those things, he might never have found podcasting. But he didn\u2019t, and now he has one of the most successful podcasts on the planet. He wasn\u2019t happy to settle for just one thing.\n When most people think about  Pieter Levels, they probably think about the world traveller bootstrapped startup guy. If you learn more about him, you will see that he previously had a very successful career  creating electronic music,  directing music videos, and  running his own label. Even after he had his start-up thing, he still tried out learning  3D modelling, and  experimenting with VR development. Before all that, I\u2019m pretty sure he ran some tech review websites, too.\n Some people might only know Pieter by his DJ name (\u2018Panda\u2019). Those people know nothing about what he\u2019s doing now. For them, his \u201cthing\u201d was that he was a DJ. So when those people look him up today, and go to see what he has done since, they will be shocked and want to learn more about him.\n Personally, despite all of his achievements, my favourite thing that he has done is his writing; I absolutely love his  blog posts and regularly re-read them.  Here  are  a  few  of  my  favourites. For me, he\u2019s a \u201cthinker\u201d and an inspiration. The fact that he has dabbled in so many things make him much more interesting than if he had done just one of those things, and the fact that he explored them allowed him to find things that he was good at.\n  Whilst studying the Intelligent Agents module at my university, I was introduced to the concepts of Exploration and Exploitation. Exploration is when you purposefully choose not to take the action that you think will be most rewarding, but to try something new to gain new information. Exploitation is when you take advantage of the best strategies that you have discovered through exploration.\n In Reinforcement Learning, agents (ie intelligent programs) are rewarded (given points) when they do something right, and punished (receive a point penalty) when they do something right. The idea is that the agent will learn the kind of action to do to maximize reward.\n If the agent finds the first strategy that works and then does it over and over again, they risk missing out on a more optimal strategy and get a worse outcome overall. So instead, the agent follows a period of exploration, where it tries to determine the optimal strategy, and then once the optimal strategy is identified, it exploits it by following the optimal strategy repeatedly. If the environment can change, the agent might occasionally try something new to see if a better option has come into existence.\n As humans, trying new things is our way of exploration of the world. As adults, that usually means taking up a new hobby or learning a new skill. Maybe we go to a taster class at the local community center, whatever. Once we\u2019ve explored enough and found something that we enjoy and/or think we can make money from, we switch to an exploitation strategy and try to use our knowledge and skills to make money / become famous / improve our reputation / improve our health.\n Pat is still a young guy, so I\u2019d argue that it is very unlikely that he has explored everything enough to really know for sure what he likes and dislikes, nor fully know what he\u2019s good at. I\u2019m not sure that any human life span is long enough for that, actually. There are just too many things in the world for us to try all of them, and even if we did, we don\u2019t know our final potential at any of those things.\n  In Pat\u2019s mentioned that he had wanted to start learning music production. A lot of professionals also create music as a hobby.  Aiden, is a developer and  makes his own music.  Cam is a speaker and advocate, but is playing with being a  DJ on Twitch.\n If you\u2019re drawn to do something, I think it\u2019s a good idea to consider doing it. There\u2019s a big difference if you\u2019re repeatedly starting a new thing over and over without seeing through the previous ones (or even abandoning established projects!), but I don\u2019t think that\u2019s the case here. I think that pursuing something you\u2019re interested in is a good way to avoid being known for just one \u201cthing\u201d.\n Like with  David Heinemeier Hansson. Professionally, he\u2019s a developer, and he writes about the things he learned from his career, too. But he also defines himself based on his hobbies and his personal life.\n One of my favourite things that Pat had been doing this year was  trying to learn a new skill or do something different for each month of the year. It\u2019s something that I would certainly consider doing when I reach a level of financial stability to allow for it.\n In January, Pat learned  to cook, which was a great success. Then, he decided that he wanted to read more fiction books, and whilst  he admits he failed at, at least he now knows that it isn\u2019t for him. In March he  learned about design and UI/UX, and in April he wanted to  launch a viral project(s). As far as I know, Pat only launched  How To Say No, but he succeeded in getting it to become viral and I saw endless tweets about it. Good job!\n  Pat didn\u2019t seem to learn a new skill in May, but instead took a good chunk of the month off for a \u2018 think week\u2019 because he was in a funk. After his think week, Pat now says that he is trying to avoid doing new things, which seems counter to the goal he set at the start of the year.\n I think that suppressing his desire to work on new projects might actually hurt him in the long run. In \u201c 12 months, 12 new skills\u201d, he says that \u201cThis is my personality - I find something new and get obsessed with it. I really enjoy learning about new things\u201d. It seems to me that by trying to suppress this inclination, he isn\u2019t being true to himself, which is likely to cause dissatisfaction.\n  There are a lot of issues wrapped up in Pat\u2019s post; fears about the script of life, his identity, and his future. He doesn\u2019t want to waste his life on shallowly exploring many things, but he\u2019s also seems afraid of committing to a specific thing. If were being honest, I might say that Pat seems like he is going through a Quarter Life Crisis, especially given that he had been feeling  unclear and uncertain just a month earlier.\n  Be true to who you are inside. Don\u2019t do something just because you want other people to see you in a certain way, or because you see others doing something a certain way. Don\u2019t feel confused just because your life doesn\u2019t look like your peers.\n By all means, find something that you can dedicate your life to, but make sure that you\u2019re not just  falling into place. Make sure you\u2019ve explored all of your options and that you\u2019re happy with the path you\u2019re taking.\n Not everything has to be for profit. Not everything has to be worked on consistently. It\u2019s okay to waste a few days on something that will never see the light of day just to get an urge out of your system. You might even learn something from the process that you can apply to your main endeavour.\n P.S. I&#39;m late to the party, but I recently got  a twitter account that you can follow  here.", "posttime": "2020-06-06 17:43:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e8b\u60c5,starting", "title": "\u5f00\u59cb\u505a\u5f88\u591a\u4e8b\u60c5", "title_en": "Starting Many Things", "transed": 1, "url": "https://jetholt.com/micro/starting-many-things/", "via": "", "real_tags": ["\u4e8b\u60c5", "starting"]}, {"category": "", "categoryclass": "", "imagename": "6ada99c343773d74345a012ccd388a5e.jpg", "infoid": 1005419, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u4e2a\u5468\u672b\u548c\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u7684\u51e0\u4e2a\u665a\u4e0a\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u865a\u62df\u673a\uff0c\u547d\u540d\u4e3a\u201cSol\u201d\uff0c\u53d6\u81ea\u745e\u5178\u8bed\u4e2d\u201c\u592a\u9633\u201d\u7684\u610f\u601d\u3002\u6211\u8bfb\u4e86\u5f88\u591a\u5173\u4e8eVM\u8bbe\u8ba1\u7684\u4e66\uff0c\u6211\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u3001\u7f16\u7a0b\u8bed\u8a00\u548c\u5176\u4ed6\u56f4\u7ed5\u8ba1\u7b97\u673a\u4f5c\u4e3a\u901a\u7528\u5de5\u5177\u7684\u6982\u5ff5\u7684\u96be\u61c2\u548c\u4e66\u5446\u5b50\u7684\u4e1c\u897f\u5f88\u611f\u5174\u8da3\u3002\n\u865a\u62df\u673a(VM)\u662f\u50cf\u7269\u7406\u673a\u4e00\u6837\u6267\u884c\u7a0b\u5e8f\u7684\u673a\u5668(\u5373\u8ba1\u7b97\u673a)\u7684\u8f6f\u4ef6\u5b9e\u73b0\u3002-\u7ef4\u57fa\u767e\u79d1\u3002\nSOL\u662f\u5728\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u5185\u90e8\u8fd0\u884c\u7684\u8fdb\u7a0b\u865a\u62df\u673a\u3002\u4f46\u662f\uff0cSOL\u5185\u90e8\u6709\u591a\u4e2a\u4efb\u52a1(\u5c31\u50cf\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u90fd\u6709\u8fdb\u7a0b\u4e00\u6837)\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5728SOL\u4e2d\u8fd0\u884c\u7684\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5916\u90e8\u4e16\u754c\u662f\u4ec0\u4e48\u6837\u5b50\u5e76\u4e0d\u91cd\u8981\u3002\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u8ba9Sol\u76f4\u63a5\u4ece\u786c\u4ef6\u542f\u52a8\uff0c\u4f46\u90a3\u5c06\u662f\u75af\u72c2\u7684\u3002\u8bf7\u76f8\u4fe1\u6211\u3002\u6211\u4ee5\u524d\u4e5f\u8d70\u8fc7\u90a3\u6761\u8def\u3002\n\u7d22\u5c14\u7684\u76ee\u7684\u662f\u5b66\u4e60\u3002\u5f53\u6211\u4eec\u5b9a\u4e49\u6211\u4eec\u7684\u4e16\u754c\u65f6\uff0c\u6211\u4eec\u62e5\u6709\u6781\u9ad8\u7684\u81ea\u7531\u5ea6\u3002\u865a\u62df\u673a\u7684\u4e00\u4e2a\u4e3b\u8981\u7ec4\u4ef6\u662f\u63d0\u4f9b\u7684\u6307\u4ee4\u96c6\u3002\u6307\u4ee4\u662f\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u7684\u6700\u7b80\u5355\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u56e0\u6b64\u865a\u62df\u673a\u63d0\u4f9b\u7ed9\u5728\u5176\u4e2d\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u6307\u4ee4\u96c6\u9700\u8981\u662f\u901a\u7528\u7684\u548c\u9ad8\u6548\u7684\u3002\n\u5728SOLVM\u4e2d\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u8c03\u5ea6\u5668\uff0c\u6bcf\u4e2a\u8c03\u5ea6\u5668\u5728\u4e00\u4e2aCPU\u6838\u5fc3\u4e0a\u8fd0\u884c(\u5728\u64b0\u5199\u672c\u6587\u65f6\u5c1a\u672a\u5b9e\u73b0)\u3002\n\u6bcf\u4e2a\u8c03\u5ea6\u5668\u7ef4\u62a4\u8981\u8fd0\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u8be5\u5217\u8868\u79f0\u4e3a\u8fd0\u884c\u961f\u5217\u3002\u8c03\u5ea6\u5668\u8fd8\u7ef4\u62a4I/O\u76d1\u89c6\u5668\u3001\u8ba1\u65f6\u5668\u3001\u5904\u7406\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u65ad\u7b49\u3002\u8c03\u5ea6\u5668\u5728SOL\u4e2d\u5b8c\u6210\u5927\u90e8\u5206\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u6267\u884c\u6211\u521a\u624d\u63cf\u8ff0\u7684\u6240\u6709\u90a3\u4e9b\u5947\u5999\u7684\u4e8b\u60c5\uff0c\u800c\u4e14\u8fd8\u6267\u884c\u7a0b\u5e8f\u4ee3\u7801\u3002\n\u8fd0\u884c\u961f\u5217\u662f\u6309\u4efb\u52a1\u8c03\u5ea6\u65b9\u5f0f\u6392\u5e8f\u7684\u4efb\u52a1\u5217\u8868\u3002\n\u5982\u679c\u4efb\u52a1\u4ee5\u201cEnd\u201d\u6216\u201cError\u201d\u72b6\u6001\u7ed3\u675f\uff0c\u5219\u4efb\u52a1\u5c06\u4ece\u8fd0\u884c\u961f\u5217\u2026\u4e2d\u5220\u9664\n\u5982\u679c\u6709\u4efb\u4f55I/O\u76d1\u89c6\u5668\u6216\u8ba1\u65f6\u5668\uff0c\u8bf7\u68c0\u67e5\u8ba1\u65f6\u5668\u662f\u5426\u8d85\u65f6\uff0c\u5e76\u53ef\u80fd\u8c03\u7528\u4e3b\u673a\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u6765\u68c0\u67e5\u6302\u8d77\u7684\u201c\u5f02\u6b65\u201dI/O\u4e8b\u4ef6\u3002\u5982\u679c\u53d1\u751f\u4e86\u4e8b\u4ef6(\u5982\u8ba1\u65f6\u5668\u8d85\u65f6\u6216\u89e6\u53d1)\uff0c\u5219\u76f8\u5173\u4efb\u52a1\u5c06\u6dfb\u52a0\u5230\u8fd0\u884c\u961f\u5217\u4e2d\uff0c\u4ee5\u4fbf\u8be5\u4efb\u52a1\u53ef\u4ee5\u8bfb\u53d6\u5b83\u6b63\u5728\u7b49\u5f85\u7684\u4e8b\u4ef6\u3002\n\u8c03\u5ea6\u5668\u91cd\u590d\u8be5\u8fc7\u7a0b(\u4f8b\u5982\uff0c\u4ece\u70b91\u5f00\u59cb)\u3002\u53ea\u8981\u8fd0\u884c\u961f\u5217\u4e2d\u6709\u4efb\u4f55\u4efb\u52a1\u3002\n\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u4efb\u52a1\u4e3b\u8981\u662f\u62bd\u8c61\u7684\uff0c\u5e76\u4e14\u53ea\u5305\u542b\u4e00\u4e2a\u91cd\u8981\u7684\u7ec4\u4ef6\uff1a\u6fc0\u6d3b\u8bb0\u5f55\u3002\u5b83\u4eec\u5305\u62ec\u4efb\u52a1\u7684\u8c03\u7528\u5806\u6808\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6fc0\u6d3b\u8bb0\u5f55\u5bf9\u5e94\u4e8e\u4e00\u4e2a(\u6d3b\u52a8\u7684)\u51fd\u6570\u8c03\u7528\u3002\u6fc0\u6d3b\u8bb0\u5f55\u5305\u542b\u5bf9\u5b83\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570\u539f\u578b\u7684\u5f15\u7528(\u7a0d\u540e\u8be6\u7ec6\u4ecb\u7ecd)\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668(\u901a\u5e38\u79f0\u4e3aPC)\uff0c\u5b83\u662f\u5f53\u524d\u6267\u884c\u7684\u7a0b\u5e8f\u6307\u4ee4\u7684\u6e38\u6807\uff0c\u6700\u540e\u662f\u503c\u7684\u6ce8\u518c\u8868\u3002\n\u51fd\u6570\u539f\u578b\u662f\u51fd\u6570\u7684\u5e38\u91cf\u548c\u6307\u4ee4\uff0c\u4f46\u6ca1\u6709\u4e0a\u4e0b\u6587(\u6216\u201c\u51fd\u6570\u95ed\u5305\u201d)\u548c\u5c40\u90e8\u53d8\u91cf\u7b49\u3002\u51fd\u6570\u539f\u578b\u6709\u70b9\u50cf\u6ca1\u6709\u4efb\u4f55\u4eba\u6216\u5bb6\u5177\u7684\u5efa\u7b51\u3002\u5c3d\u7ba1\u540d\u79f0\u5982\u6b64\uff0c\u4f46\u5b83\u5e76\u4e0d\u80fd\u771f\u6b63\u4e0e\u84dd\u56fe\u76f8\u63d0\u5e76\u8bba\uff0c\u56e0\u4e3a\u529f\u80fd\u539f\u578b\u4e0d\u662f\u590d\u5236\u6216\u5b9e\u73b0\u7684\uff0c\u800c\u662f\u5b9e\u9645\u6309\u539f\u6837\u4f7f\u7528\u7684\u3002\n\u7a0b\u5e8f\u8ba1\u6570\u5668\u53ea\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u5bf9\u5e94\u4e8e\u51fd\u6570\u539f\u578b\u7a0b\u5e8f\u4e2d\u7684\u504f\u79fb\u91cf(\u6307\u4ee4\u7684\u6709\u5e8f\u5217\u8868)\u3002\u5f53\u6267\u884c\u6fc0\u6d3b\u8bb0\u5f55(\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u6bb5\u8fd0\u884c\u4ee3\u7801)\u65f6\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668(PC)\u968f\u7740\u6bcf\u6761\u6307\u4ee4\u7684\u6267\u884c\u800c\u9012\u589e\u3002\u6709\u65f6\uff0c\u5f53\u7a0b\u5e8f\u5411\u540e\u8df3\u8f6c(\u4f8b\u5982\uff0c\u6267\u884c\u5faa\u73af\u65f6)\u65f6\uff0cPC\u4f1a\u9012\u51cf\u3002PC\u5728\u57fa\u4e8e\u6307\u4ee4\u7684\u7a0b\u5e8f\u4e2d\u626e\u6f14\u7740\u4e2d\u5fc3\u89d2\u8272(\u5c31\u50cf\u60a8\u7684\u8ba1\u7b97\u673a\u6216\u624b\u673a\u7684\u786c\u4ef6\uff0c\u5b83\u73b0\u5728\u5f88\u53ef\u80fd\u6b63\u5728\u9012\u589ePC)\u3002\n\u6ce8\u518c\u8868\u672c\u8d28\u4e0a\u662f\u6267\u884c\u7a0b\u5e8f\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u53d8\u91cf\u6570\u636e\u7684\u4e34\u65f6\u5b58\u50a8\u5668\u533a\u57df\u3002\u60f3\u8c61\u4e00\u4e0b\u8fd9\u4e2a\u7b80\u5355\u7684\u51fd\u6570\uff1a\ndef foo(x\uff0cy)\uff1ax=x*5 x=x*y\u8fd4\u56dex\u3002\n\u5728\u8fd9\u91cc\uff0c\u7a0b\u5e8f\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u5b58\u50a8\u7531x*5\u521b\u5efa\u7684\u503c\uff0c\u7136\u540e\u5b83\u53ef\u4ee5\u5c06\u8be5\u503c\u4f20\u9012\u7ed9x*y\uff0cx*y\u4e5f\u9700\u8981\u5728\u4f7f\u7528\u8fd4\u56de\u4e4b\u524d\u5c06\u5176\u7ed3\u679c\u503c\u5b58\u50a8\u5728\u67d0\u4e2a\u5730\u65b9\u3002\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u90fd\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u56e0\u6b64\u8bbf\u95ee\u975e\u5e38\u9ad8\u6548\u3002\u6267\u884c\u201cfoo\u201d\u51fd\u6570(\u201cR(X)\u201d\u8868\u793a\u201c\u5bc4\u5b58\u5668x\u201d)\u65f6\u4f1a\u53d1\u751f\u5982\u4e0b\u60c5\u51b5\uff1a\n\u81ea\u53d8\u91cf0\u548c1\u5df2\u7ecf\u5728R(0)\u4e2d\uff0cR(1)\u5c06\u5e38\u91cf&#34\uff1b5&34\uff1b\u52a0\u8f7d\u5230R(2)\u4e2d\uff0c\u5c06\u7ed3\u679c\u653e\u5165R(0)\u4e58\u4ee5R(0)\u7684\u503c-\u4e0eR(2)\u7684\u503c-\uff0c\u5c06\u7ed3\u679c\u653e\u5165R(0)\u4e58\u4ee5R(0)\u7684\u503c-\uff0c\u5c06\u7ed3\u679c\u653e\u5165R(0)\u8fd4\u56deR(0)\u3002\nSOL\u662f\u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u865a\u62df\u673a\u3002\u64cd\u4f5c\u6570\u548c\u7ed3\u679c\u662f\u4ece\u7f16\u53f7\u5bc4\u5b58\u5668\u8bfb\u53d6\u548c\u5b58\u50a8\u5230\u7f16\u53f7\u5bc4\u5b58\u5668\u7684\uff0c\u800c\u4e0d\u662f\u4ece\u5806\u6808\u201c\u63a8\u5165\u201d\u548c\u201c\u5f39\u51fa\u201d\u7684(\u4e0e\u57fa\u4e8e\u5806\u6808\u7684\u865a\u62df\u673a\u4e00\u6837)\u3002\u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u865a\u62df\u673a\u907f\u514d\u4e86\u901a\u5e38\u56f4\u7ed5\u5176\u4ed6\u6307\u4ee4\u7684\u63a8\u5165\u548c\u5f39\u51fa\u64cd\u4f5c\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u4ee3\u7801\u5927\u5c0f\uff0c\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4e5f\u63d0\u9ad8\u4e86\u6267\u884c\u901f\u5ea6(\u4e0e\u57fa\u4e8e\u5806\u6808\u7684\u865a\u62df\u673a\u76f8\u6bd4)\u3002\n\u5728\u6700\u4f18\u79c0\u7684\u8bba\u6587\u201cLua 5.0\u7684\u5b9e\u73b0\u201dRoberto\u4e2d\uff0cLuiz\u548cWaldemar\u63cf\u8ff0\u4e86\u4ee3\u7801\u5927\u5c0f\u548c\u89e3\u7801\u5f00\u9500\u7684\u95ee\u9898(\u4e0d\u662f\u771f\u6b63\u7684\u95ee\u9898)\uff1a\n\u901a\u5e38\u4e0e\u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u673a\u5668\u76f8\u5173\u7684\u95ee\u9898\u6709\u4e24\u4e2a\uff1a\u4ee3\u7801\u5927\u5c0f\u548c\u89e3\u7801\u5f00\u9500\u3002\u5bc4\u5b58\u5668\u673a\u5668\u4e2d\u7684\u6307\u4ee4\u9700\u8981\u6307\u5b9a\u5176\u64cd\u4f5c\u6570\uff0c\u56e0\u6b64\u5b83\u901a\u5e38\u6bd4\u5806\u6808\u673a\u5668\u4e2d\u7684\u76f8\u5e94\u6307\u4ee4\u5927\u3002(\u4f8b\u5982\uff0cLua\u7684\u865a\u62df\u673a\u4e2d\u7684\u6307\u4ee4\u5927\u5c0f\u4e3a4\u5b57\u8282\uff0c\u800c\u51e0\u4e2a\u5178\u578b\u7684\u5806\u6808\u673a\u5668(\u5305\u62ecLua\u4ee5\u524d\u4f7f\u7528\u7684\u673a\u5668)\u4e2d\u7684\u6307\u4ee4\u5927\u5c0f\u4e3a1\u62162\u5b57\u8282\u3002)\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5bc4\u5b58\u5668\u673a\u5668\u751f\u6210\u7684\u64cd\u4f5c\u7801\u6bd4\u5806\u6808\u673a\u5668\u5c11\uff0c\u56e0\u6b64\u603b\u4ee3\u7801\u5927\u5c0f\u4e0d\u4f1a\u592a\u5927\u3002\n0-3\u4e2a\u64cd\u4f5c\u6570(\u4f8b\u5982\u201c\u5bc4\u5b58\u5668a\u548c\u5bc4\u5b58\u5668b\uff0c\u7ed3\u679c\u4e3a\u5bc4\u5b58\u5668c\u201d)\u3002\n\u56e0\u4e3a\u865a\u62df\u673a\u6709\u2026\u7684\u7f3a\u70b9\u3002\u865a\u62df\uff0c\u6211\u4eec\u5fc5\u987b\u5c3d\u6211\u4eec\u6240\u80fd\u786e\u4fdd\u826f\u597d\u7684\u6027\u80fd\uff0c\u8fd9\u6837\u8fd9\u4e9b\u6307\u4ee4\u4e2d\u7684\u4e00\u6761\u5c31\u53ef\u4ee5\u653e\u5728\u4e00\u4e2a\u673a\u5668\u5b57\u4e2d\u3002\u4eca\u5929\u7684\u5927\u591a\u6570\u786c\u4ef6\u90fd\u80fd\u591f\u975e\u5e38\u9ad8\u6548\u5730\u5904\u740632\u4f4d\u957f\u7684\u6570\u636e\u5757\uff0c\u56e0\u6b64\u53d7Lua5\u7684\u542f\u53d1\uff0c\u6211\u9009\u62e9\u4e8632\u4f4d\u8868\u793a\u6cd5\u6765\u8868\u793aSOL\u7684\u6307\u4ee4\u3002\n\u6bcf\u6761\u6307\u4ee4\u53ca\u5176\u64cd\u4f5c\u6570\u90fd\u4ee5\u4e09\u79cd\u5e03\u5c40\u4e2d\u7684\u4e00\u79cd\u8fdb\u884c\u7f16\u7801(\u770b\uff0c\u68d2\u6781\u4e86\u7684ASCII\u827a\u672f\uff01)\u3002\n0 5|6 13|14 22|23 31 Bit-|-OP|A|B|C\u5b57\u6bb5-|\u3002-6 8 9 9\u4f4d[0..63][0..255][0..511][0..511]\u8303\u56f4\n\u6709\u4e9b\u64cd\u4f5c\u53ea\u9700\u8981\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u6570\u8db3\u591f\u5927\uff0c\u5219\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387\u3002\u4e3a\u6ee1\u8db3\u6b64\u9700\u8981\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u6307\u4ee4\u7684\u5907\u7528\u5e03\u5c40\uff1a\n0 5|6 13|14 31 Bit-|-|-OP|A|Bs/Bu\u5b57\u6bb5-|\u3002-6 8 18\u4f4d[0..63][0..255]Bu\uff1a[0..255]\u8303\u56f4Bu\uff1a[-131071..131072]\u3002\n\u7b2c\u4e09\u7c7b\u64cd\u4f5c\u4ec5\u4f7f\u7528\u4e00\u4e2a\u5927\u5c0f\u4e0e\u6548\u7387\u76f8\u5173\u7684\u64cd\u4f5c\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49\u4e86\u6307\u4ee4\u7684\u7b2c\u4e09\u4e2a\u66ff\u6362\u5e03\u5c40\uff0c\u5176\u4e2d\u4e09\u4e2a\u64cd\u4f5c\u6570\u6709\u6548\u5730\u6298\u53e0\u6210\u4e00\u4e2a26\u4f4d\u6574\u6570\u503c\uff1a\n0 5|6 31 Bit-|-OP|bss/buu Field-|\u3002-6 26\u4f4d[0..63]BUU\uff1a[0..67108863]\u8303\u56f4bss\uff1a[-33554431..33554432]\u3002\nA\u3001B\u3001C\u3001Bu\u548cBuu\u8868\u793a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u800cB\u548cBss\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u8fd9\u79cd\u914d\u7f6e\u670964\u4e2a\u64cd\u4f5c\u548c256\u4e2a\u5bc4\u5b58\u5668(OP=6\u4f4d\uff0cA=8\u4f4d)\u7684\u7a7a\u95f4\u3002\u8d85\u51fa\u6211\u4eec\u7684\u9700\u8981\uff1a)\u3002\n\u5728SOL\u4e2d\uff0c\u66f4\u6539\u548c\u7ef4\u62a4\u6307\u4ee4(\u64cd\u4f5c+\u64cd\u4f5c\u6570)\u975e\u5e38\u7b80\u5355\u3002\u6211\u6545\u610f\u4f7f\u51fa\u6d51\u8eab\u89e3\u6570\uff0c\u4ee5\u4f7f\u64cd\u4f5c\u6307\u5bfc\u7ec4\u53d8\u5f97\u5bb9\u6613\u3002\u6587\u4ef6instr.h\u5305\u542b\u6307\u4ee4\u5217\u8868\uff1a\n/*\u63a7\u5236\u6d41*/\\_(Year\uff0cABC)/*\u6682\u505c\u5e76\u91cd\u65b0\u8ba1\u5212*/\\_(JUMP\uff0cBSS)/*PC+=BSS*/\\_(Call\uff0cABC)/*R(A)\uff0c.\uff0cR(A+C-1)\uff1a=R(A)(R(A+1)\uff0c.\uff0cR(A+B))*/\\_(RETURN\uff0cAB_)/*RETURN R(A)\uff0c.\uff0cR(A+B-1)*/\\/*DATA*/\\_(LOADK\uff0cABU)/*R(A)=K(Bu)*/\\_(MOVE\uff0cAB_)/*R(A)=R(B)*/\\_(DBGREG\uff0cABC)/*\u7279\u6b8a\uff1a\u8c03\u8bd5\u8f6c\u50a8\u5bc4\u5b58\u5668\u503c*/\\/*\u7b97\u672f*/\\_(ADD\uff0cABC)/*R(A)=RK(B)+RK(C)*/\\_(SUB\uff0cABC)/*R(A)=RK(B)-RK(C)*/\\_(MUL\uff0cABC)/*R(A)=RK(B)*RK(C)*/\\.\u3002\nSOL\u7684\u6e90\u4ee3\u7801\u8bbe\u7f6e\u65b9\u5f0f\u662f\uff0c\u9664\u4e86\u6bcf\u6761\u6307\u4ee4\u7684\u5b9e\u9645\u5b9e\u73b0\u4e4b\u5916\uff0c\u53ea\u9700\u66f4\u6539\u6b64\u5217\u8868\u5373\u53ef\u3002\u6dfb\u52a0\u6216\u91cd\u547d\u540d\u6307\u4ee4\u4f1a\u81ea\u52a8\u4f7f\u65b9\u4fbf\u7b26\u53f7\u548c\u529f\u80fd\u53ef\u7528\u3002\u5047\u8bbe\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u6761Ding\u6307\u4ee4\uff0c\u5b83\u5728\u6bcf\u6b21\u6267\u884c\u65f6\u90fd\u4f1a\u64ad\u653e\u4e00\u70b9\u58f0\u97f3\uff1a\n_(MUL\uff0cABC)/*R(A)=RK(B)*RK(C)*/\\_(DING\uff0cBUU)/*A=\u8981\u64ad\u653e\u7684\u58f0\u97f3\u53f7\u7801*/\\.\u3002\n\u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u540d\u4e3aS_OP_Ding\u7684\u65b0\u64cd\u4f5c\u6807\u8bc6\u7b26\uff0c\u4ee5\u53ca\u7528\u4e8e\u7f16\u7801Ding\u6307\u4ee4\u7684\u6784\u9020\u51fd\u6570\uff1a\n\u73b0\u5728\u8fd0\u884c\u5305\u542bDing\u64cd\u4f5c\u7684\u7a0b\u5e8f\u5c06\u5728VM\u4e2d\u5bfc\u81f4\u9519\u8bef\uff1a\u201c\u610f\u5916\u64cd\u4f5c\u201d\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u5b9e\u73b0\u4e01\u884c\u4e3a\uff01\u64cd\u4f5c(\u5728\u7f16\u5199\u672c\u6587\u65f6)\u5728sched_exec.h\u4e2d\u5b9e\u73b0\uff0c\u5b83\u662f\u865a\u62df\u673a\u7684\u6838\u5fc3\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u548c\u6267\u884cSOL\u7a0b\u5e8f\u7684\u6307\u4ee4\u3002\u53ef\u4ee5\u8fd9\u6837\u6982\u62ec\uff1a\nvoid Execute(Instr*Instructions){Instr*PC=\u6307\u4ee4\uff1b\u800c(1){Switch(*++PC){CASE S_OP_LOADK\uff1a//\u4ece\u6307\u4ee4*PC\u8bfb\u53d6\u64cd\u4f5c\u6570A\u548cB\u3002//\u5c06B\u5904\u7684\u5e38\u91cf\u653e\u5165\u5bc4\u5b58\u5668A\u3002Break\uff1b\u6848\u4f8bS_OP_MOVE\uff1a//\u4ece\u6307\u4ee4*PC\u8bfb\u53d6\u64cd\u4f5c\u6570A\u548cB\u3002//\u5c06\u5bc4\u5b58\u5668B\u7684\u503c\u653e\u5165\u5bc4\u5b58\u5668A\u3002Break\uff1b.}//Switch}//While}\u3002\n\u5dee\u4e0d\u591a\u662f\u4e2a\u4e0d\u9519\u7684\u65e7\u5f00\u5173\u73af\u8def\u3002\u5f53\u7528CLANG\u6216GCC\u8fd9\u6837\u7684\u73b0\u4ee3\u7f16\u8bd1\u5668\u7f16\u8bd1\u8fd9\u6bb5C\u4ee3\u7801\u65f6\uff0c\u5b83\u5c06\u76f8\u5f53\u9ad8\u6548\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u6bcf\u4e2a\u865a\u62df\u64cd\u4f5c\u5b9e\u9645\u4e0a\u53ea\u5bf9\u5e94\u4e8e\u51e0\u6761\u673a\u5668\u6307\u4ee4\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e01\u4e01\u7684\u5730\u65b9\u3002\n..\u3002\u6848\u4f8bS_OP_DING\uff1a//\u4ece\u6307\u4ee4*PC\u8bfb\u53d6\u64cd\u4f5c\u6570BUU\u3002uint32_t SOUND_INDEX=SInstrGetBuu(*PC)\uff1b//\u627e\u5230SOUND_INDEX\u7684\u5907\u6ce8\u5e76\u64ad\u653eSoundNote*NOTE=SoundGetNote(SOUND_INDEX)\uff1bSoundPlay(\u5907\u6ce8)\uff1bBreak\uff1b.\u3002\n\u8fd9\u91cc\u7684Sound\u7c7b\u578b\u4ee5\u53caSoundGet\u548cSoundPlay\u8868\u793a\u60a8\u63d0\u4f9b\u7684\u67d0\u79cd\u58f0\u97f3\u64ad\u653e\u51fd\u6570\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u64ad\u653e\u97f3\u4e50\u7684SOL\u7a0b\u5e8f\uff1a\n\u5b9a\u4e49\u65cb\u5f8b0\u6761\u76ee\uff1a\u4e010#\u64ad\u653e\u97f3\u7b260\u4e011#\u64ad\u653e\u97f3\u7b261\u4e011#\u64ad\u653e\u97f3\u7b261\u4e012#\u64ad\u653e\u97f3\u7b262\u4e010#\u64ad\u653e\u97f3\u7b260 RETURN 0 0#RETURN\n\u9664\u975e\u80fd\u591f\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1\u3001\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u81f3\u5c11\u7ed9\u7a0b\u5e8f\u5458\u4e00\u79cd\u5e76\u53d1\u7684\u9519\u89c9\uff0c\u5426\u5219\u4efb\u4f55\u73a9\u5177VM\u90fd\u4e0d\u53ef\u80fd\u6beb\u65e0\u7f9e\u803b\u5730\u5448\u73b0\u51fa\u6765\u3002\nSOL\u6709\u4e00\u4e2a\u540d\u4e3a\u201cYear\u201d\u7684\u64cd\u4f5c\uff0c\u5b83\u80fd\u591f\u6682\u505c\u5904\u4e8e\u4efb\u4f55\u72b6\u6001\u7684\u4efb\u52a1\uff0c\u5e76\u5728\u7a0d\u540e\u4f7f\u8be5\u4efb\u52a1\u5728\u5b8c\u5168\u76f8\u540c\u7684\u72b6\u6001\u4e0b\u6062\u590d\u3002\n\u4ece\u4efb\u52a1\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u4ece\u4e0d\u77e5\u9053\u5b83\u88ab\u6682\u505c\u548c\u6062\u590d\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u539f\u8bed\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u5b9e\u73b0\u8bb8\u591a\u529f\u80fd\u3002\u5728\u7f16\u5199\u672c\u6587\u65f6\uff0cSOL\u5df2\u7ecf\u6709\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8ba9\u6b65\uff1a\u8ba9\u6b65\u4e8e\u5176\u4ed6\u4efb\u52a1(\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u4eceI/O\u7b49\u4e8b\u4ef6\u8fd0\u884c\u6216\u8c03\u5ea6)\uff0c\u4ee5\u53ca\u8ba9\u6b65\u4e8e\u8ba1\u65f6\u5668\u8d85\u65f6\u3002\u5728\u672c\u6587\u7684\u672b\u5c3e\u6709\u51e0\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e86Year\u3002\n\u4ea7\u51fa\u91cf\u7528\u4e8e\u5b9e\u73b0\u534f\u4f5c\u591a\u4efb\u52a1\uff0c\u5176\u4e2d\u6240\u6709\u4efb\u52a1\u534f\u4f5c\u4f7f\u7528\u5904\u7406\u8d44\u6e90\u3002\u5f53\u4e00\u4e2a\u4efb\u52a1\u6267\u884c\u4e86\u4e00\u7cfb\u5217\u8ba1\u7b97\u5e76\u89e3\u9664\u5bf9\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684\u63a7\u5236\u65f6\uff0c\u4f1a\u53d1\u751f\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u4e4b\u4e00\uff1a\n\u8be5\u4efb\u52a1\u53d1\u8d77\u5916\u90e8(\u201c\u963b\u585e\u201d)\u64cd\u4f5c\uff0c\u5982\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6216\u7b49\u5f85\u7279\u5b9a\u65f6\u95f4\u53d1\u751f\uff0c\n\u5927\u591a\u6570\u4e0e\u5176\u73af\u5883\u548c\u56fd\u5916\u901a\u4fe1\u7684\u7cfb\u7edf\uff0c\u5982\u7f51\u7edc\u670d\u52a1\u5668\u6216\u6587\u672c\u7f16\u8f91\u5668\uff0c\u82b1\u8d39\u5176\u5927\u90e8\u5206\u65f6\u95f4(\u76f8\u5bf9\u4e8e\u5b9e\u65f6\u7684CPU\u65f6\u95f4)\u7b49\u5f85\u73af\u5883\u54cd\u5e94\uff1b\u4f8b\u5982\uff0c\u5728\u7f51\u7edc\u63d2\u5ea7\u4e0a\u4ea7\u751f\u6570\u636e\u3001\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u6216\u8fd4\u56de\u6b65\u8fdb\u7535\u673a\u4f4d\u7f6e\u3002\u8fd9\u4e9b\u7cfb\u7edf\u901a\u5e38\u53d7\u76ca\u4e8e\u534f\u4f5c\u591a\u4efb\u52a1\u5904\u7406\uff0c\u7279\u522b\u662f\u8fde\u8d2f\u7684\u4e13\u7528\u7cfb\u7edf(\u4e0e\u672c\u8d28\u4e0a\u901a\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u540c)\u3002\nSOL\u63d0\u4f9b\u7684\u672c\u8d28\u4e0a\u662f\u7528\u4e8e\u5e76\u53d1\u7684\u534f\u7a0b\u3002\u534f\u7a0b\u7a0b\u5e8f(\u53c8\u540d\u201c\u7eff\u8272\u7ebf\u7a0b\u201d\uff0c\u53c8\u540d\u201c\u7528\u6237\u7ebf\u7a0b\u201d)\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7279\u6027\u662f\u5b83\u4eec\u80fd\u591f\u5728\u5e76\u53d1\u7cfb\u7edf\u4e2d\u8fd0\u884c\u987a\u5e8f\u4ee3\u7801\u3002\u50cf\u8fd9\u6837\u7684\u4efb\u52a1\uff1a\n\u6d89\u53ca\u5bf9\u73af\u5883\u7684\u4e09\u4e2a\u201c\u963b\u585e\u201d\u8c03\u7528\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4efb\u52a1\u4ea7\u751f\uff1a\n\u6253\u5f00\u8981\u6c42\u64cd\u4f5c\u7cfb\u7edf\u6309\u540d\u79f0\u6253\u5f00\u6587\u4ef6\u3002\u8be5\u6587\u4ef6\u53ef\u80fd\u4f1a\u5728\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u5019\u6253\u5f00\u3002\u8c03\u5ea6\u7a0b\u5e8f\u6ce8\u610f\u5230\u4efb\u52a1\u6b63\u5728\u7b49\u5f85\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u6682\u65f6\u5c06\u5176\u4ece\u8fd0\u884c\u961f\u5217\u4e2d\u5220\u9664\u3002\n\u64cd\u4f5c\u7cfb\u7edf\u544a\u8bc9\u8c03\u5ea6\u5668\u201c\u60a8\u60f3\u8ba9\u6211\u6253\u5f00\u7684\u90a3\u4e2a\u6587\u4ef6\uff0c\u8fd9\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26\u201d\uff0c\u56e0\u6b64\u8c03\u5ea6\u5668\u518d\u6b21\u5c06\u4efb\u52a1\u653e\u5230\u8fd0\u884c\u961f\u5217\u4e2d\u3002\n\u4efb\u52a1\u518d\u6b21\u8c03\u7528\u73af\u5883\uff0c\u8fd9\u4e00\u6b21\u8bf7\u6c42\u8bfb\u53d6f\u7684\u5185\u5bb9\u3002\n\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u8c03\u5ea6\u5668\u544a\u8bc9\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8bb0\u4e0b\u7b14\u8bb0\uff0c\u53d6\u6d88\u5bf9\u4efb\u52a1\u7684\u8c03\u5ea6\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u3002\n\u64cd\u4f5c\u7cfb\u7edf\u544a\u8bc9\u8c03\u5ea6\u5668\u201c\u6211\u5df2\u7ecf\u8bfb\u4e86\u60a8\u8981\u6211\u8bfb\u7684\u90a3\u4e2a\u6587\u4ef6\uff0c\u8fd9\u662f\u6570\u636e\u201d(\u5b9e\u9645\u4e0a\u8fd9\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u4f46\u539f\u7406\u662f\u4e00\u6837\u7684)\u3002\ndef read_file(name\uff0ccallback)\uff1aopen(name\uff0cdef(error\uff0cf)\uff1aif(Error)\uff1acallback(Error)\uff1afalse\uff1aread(f\uff0cdef(read_error\uff0cdata)\uff1aclose(f\uff0cdef(Error)\uff1acallback(error\uff0cdata)#\u5728\u6253\u5f00\u6587\u4ef6\u4e4b\u524d\u8fd4\u56de\u6b64\u5904\u3002\n\u663e\u7136\u5f88\u96be\u8ddf\u4e0a\u3002SOL\u4e2d\u7684\u4efb\u52a1\u53ef\u4ee5\u6d3e\u751f\u65b0\u4efb\u52a1\uff0c\u4ee5\u4fbf\u540c\u65f6\u6267\u884c\u51e0\u9879\u4efb\u52a1\uff0c\u4f8b\u5982\u5728\u901a\u8fc7\u7f51\u7edc\u56de\u590d\u65f6\u5199\u5165\u6587\u4ef6\u3002\n\u5b9a\u4e49WRITE_AND_REPLY(Destination_id\uff0cmessage)\uff1aWriter=write_file(Destination_id+&#34\uff1b.msg&#34\uff1b\uff0cmessage)send_message(Destination_id\uff0cmessage)while(recv(Writer)\uff01=TaskEnd)noop#\u7b49\u5f85WRITE_FILE\u7ed3\u675f\n\u56e0\u4e3a\u534f\u4f5c\u5f0f\u591a\u4efb\u52a1\u7cfb\u7edf\u4f9d\u8d56\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u89c4\u5f8b\u5730\u5c06\u65f6\u95f4\u8ba9\u7ed9\u7cfb\u7edf\u4e0a\u7684\u5176\u4ed6\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4e00\u4e2a\u8bbe\u8ba1\u4e0d\u4f73\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u72ec\u5360\u6240\u6709\u7684CPU\u65f6\u95f4\uff0c\u6216\u8005\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u6302\u8d77\u3002\n\u5f53\u7a0b\u5e8f\u6267\u884c\u4e00\u7ec4\u975e\u5e38\u957f\u7684\u8ba1\u7b97\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u5404\u79cd\u95ee\u9898\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u5176\u4ed6\u4f9d\u8d56\u8ba1\u65f6\u5668\u7684\u4efb\u52a1\u3002\u7531\u4e8eSOL\u8c03\u5ea6\u7a0b\u5e8f\u4ec5\u5728\u4efb\u52a1\u6267\u884c\u4e4b\u95f4\u68c0\u67e5\u8ba1\u65f6\u5668\u8fc7\u671f\uff0c\u56e0\u6b64\u8ba1\u65f6\u5668\u53ef\u80fd\u4f1a\u5728\u5176\u5e94\u8be5\u89e6\u53d1\u5f88\u957f\u65f6\u95f4\u4e4b\u540e\u624d\u6709\u6548\u5730\u89e6\u53d1\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u63a7\u5236\u4e00\u4e2a\u73a9\u5177\u56db\u65cb\u7ffc\u98de\u673a\uff0c\u5176\u4e2d\u4e00\u4e2a\u4efb\u52a1\u9700\u8981\u6bcf50\u6beb\u79d2\u66f4\u65b0\u4e00\u4e2a\u8f6c\u5b50\u7684\u89d2\u5ea6\uff0c\u800c\u53e6\u4e00\u4e2a\u4efb\u52a1\u9700\u8981\u6574\u6574200\u6beb\u79d2\uff0c\u90a3\u4e48\u4f60\u7684\u56db\u65cb\u7ffc\u98de\u673a\u53ef\u80fd\u4f1a\u5d29\u6e83\u548c\u71c3\u70e7\u3002\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cSOL\u91c7\u7528\u4e86\u64cd\u4f5c\u6210\u672c\u8ba1\u6570\u5668\u3002\u6bcf\u6b21\u6267\u884c\u8fed\u4ee3(\u5f53\u8c03\u5ea6\u5668\u8fd0\u884c\u4efb\u52a1\u7684\u7a0b\u5e8f\u65f6)\uff0c\u6bcf\u4e2a\u4efb\u52a1\u90fd\u88ab\u8d4b\u4e88\u9884\u5b9a\u6570\u91cf\u7684\u201c\u64cd\u4f5c\u503c\u201d\u3002\u5f53\u64cd\u4f5c\u6210\u672c\u8ba1\u6570\u5668\u8fbe\u5230\u5176\u6781\u9650\u65f6\uff0c\u8be5\u4efb\u52a1\u5c06\u88ab\u7b80\u5355\u5730\u5f3a\u5236\u8ba9\u7ed9\u5176\u4ed6\u4efb\u52a1\u3002\u5728\u6e90\u4ee3\u7801\u4e2d\uff0c\u67e5\u627eS_VM_EXEC_LIMIT\u3002\n\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u7528\u7b80\u5316\u7684\u6c47\u7f16\u8bed\u8a00\u8868\u793a\u7684\uff0c\u5b83\u4e0eC API\u51e0\u4e4e\u662f1\uff1a1\uff0c\u7528\u4e8e\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u5b9a\u4e49\u8fd9\u4e9b\u7a0b\u5e8f\uff0c\u56e0\u6b64\u9664\u4e86\u89e3\u91ca\u6267\u884c\u7684\u6307\u4ee4\u4e4b\u5916\uff0c\u6c47\u7f16\u8bed\u8a00\u672c\u8eab\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002\n\u5728\u8f93\u51fa\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\u7684\u884c\uff1a[VM]_.\u3002\u8868\u793a\u8ba1\u5212\u7a0b\u5e8f\u5728\u8fd0\u884c\u4efb\u52a1\u4e14\u4efb\u52a1\u8fd4\u56de\u6216\u653e\u5f03\u540e\u91cd\u65b0\u83b7\u5f97\u63a7\u5236\u7684\u65f6\u95f4\u3002\u8fd9\u662f\u4e00\u4e2a\u201c\u6267\u884c\u8fed\u4ee3\u201d\u3002\u5f53\u8fd0\u884c\u591a\u4e2a\u4efb\u52a1\u65f6\uff0c\u60a8\u901a\u5e38\u4f1a\u770b\u5230\u8fd9\u4e9b\u201c\u6267\u884c\u8fed\u4ee3\u201d\u6807\u8bb0\u884c\u4e4b\u95f4\u7684\u4efb\u52a1\u4ee5\u5faa\u73af\u987a\u5e8f\u4ea4\u7ec7\u5728\u4e00\u8d77\u3002\n\u5728\u8f93\u51fa\u4e2d\uff0c\u4ee5\u201c\u2026\u201d\u5f00\u5934\u7684\u884c\u3002\u662f\u6ce8\u91ca\u548c/\u6216\u7b80\u5316\uff0c\u4e0d\u662f\u5b9e\u9645\u8f93\u51fa\u7684\u4e00\u90e8\u5206\u3002\n\u5728\u6c47\u7f16\u6ce8\u91ca\u4e2d\uff0cR(X)\u8868\u793a\u201c\u5bc4\u5b58\u5668x\u201d\uff0cRk(X)\u8868\u793a\u201c\u5982\u679cx\u5c0f\u4e8ek\uff0c\u5219\u5bc4\u5b58\u5668x\u4e3a\u5e38\u91cf(x-k)\u201d\uff0c\u5176\u4e2dk\u662f\u7279\u5b9a\u503c\uff0cK(X)\u8868\u793a\u201c\u5e38\u91cfx\u201d\u3002\n\u5728\u6c47\u7f16\u6ce8\u91ca\u4e2d\uff0cPC\u8868\u793a\u201c\u7a0b\u5e8f\u8ba1\u6570\u5668\u201d\uff0c\u5b83\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u6307\u5411\u7a0b\u5e8f\u6307\u4ee4\u7684\u5149\u6807\u3002\u6bcf\u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u5b83\u5c31\u52a01\u3002\u4e00\u4e9b\u6307\u4ee4\u5c06\u8fdb\u4e00\u6b65\u4fee\u6539\u8be5\u8ba1\u6570\u5668\uff0c\u4f8b\u5982\u8df3\u8f6c\u6307\u4ee4\u3002\n\u5f53\u53d8\u91cfx\u5927\u4e8e0\u65f6\uff0c\u5c06x\u51cf1\uff0c\u5e76\u8ba9\u4f4d\u7ed9\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u8ba9\u5176\u4ed6\u4efb\u52a1\u8fd0\u884c\u3002\u6700\u7ec8\u4f1a\u56de\u6765\u3002\ndef main()\uff1ax=5\uff0c\u800c(x&gt\uff1b0)\uff1ax=x-1\u6536\u76ca\u7387\u3002\n\u662f\u5426\u5b9a\u4e49\u4e3b0\u5e38\u91cf5#K(0)=5\u5e38\u91cf0#K(1)=0\u5e38\u91cf1#K(2)=1\u6761\u76ee\uff1aLOADK 0 0#R(0)=K(0)LE 0 0 256#(0==RK(k+1)&lt\uff1bRK(0))\uff1f\u7ee7\u7eed\uff0c\u5426\u5219PC++JUMP 3#PC+=3\u8fd4\u56deSUB 0 0 257#R(0)=R(0)-RK(k+1)\u6536\u76ca\u73870 0 0#\u6536\u76ca\u7387A=TYPE=\u9884\u5b9a\u8df3\u8f6c-5#PC-=5\u5230LE\u8fd4\u56de0 0#RETURN\u3002\n$build/debug/bin/solSol 0.1.0 x64[VM]_[VM]\u4efb\u52a1\u51fd\u6570PC\u64cd\u4f5c\u503c[VM]0x7fdf28c03c00 0x7fdf28c000e0 LOADK\u30020,257[VM]0x7fdf28c03c00 0x7fdf28c000e0 4\u4ea7\u91cfabc\uff1a0\uff0c0\uff0c0[VM]_[VM]\u4efb\u52a1\u51fd\u6570PC\u64cd\u4f5c\u503c[VM]0x7\u3002256[VM]0x7fdf28c03c00 0x7fdf28c000e0 3\u5b50abc\uff1a0\uff0c0,257[VM]0x7fdf28c03c00 0x7fdf28c000e0 4\u4ea7\u91cfabc\uff1a0\uff0c0\uff0c0[VM]_.\u4e0e\u4e0a\u8ff0\u5757\u76f8\u540c\u7684\u53e6\u5916\u4e09\u4e2a\u6267\u884c\u8fed\u4ee3.[VM]_\u3002_[VM]\u4efb\u52a1\u51fd\u6570PC\u64cd\u4f5c\u503c[VM]0x7fdf28c03c00 0x7fdf28c000e0 5 Jump bss\uff1a-5[VM]0x7fdf28c03c00 0x7fdf28c000e0 1 le abc\uff1a0\uff0c0\uff0c256[VM]0x7fdf28c03c00 0x7fdf28c000e0 2\u8df3\u8f6cbss\uff1a3[VM]0x7fdf28c03c00 0x7fdf28c000e0 6 Return AB\uff1a0\uff0c0\u8ba1\u5212\u7a0b\u5e8f\u8fd0\u884c\u5faa\u73af\u9000\u51fa\u3002\n\u8be5\u7a0b\u5e8f\u4f7f\u7528\u4e24\u4e2a\u51fd\u6570\u3002\u5165\u53e3\u70b9\u662f\u4e3b\u51fd\u6570\uff0c\u5b83\u53ea\u4f7f\u7528\u4e00\u4e2a\u53c2\u6570\u2018500\u2019\u8c03\u7528kitten\u51fd\u6570\u3002kitten\u51fd\u6570\u5728\u4f20\u9012\u7ed9\u5b83\u7684\u6beb\u79d2\u6570\u5185\u201c\u4f11\u7720\u201d(\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570)\u3002\u7136\u540e\uff0ckitten\u51fd\u6570\u5c06\u6570\u5b57\u201c123\u201d\u8fd4\u56de\u7ed9\u8c03\u7528\u8005(\u4e3b\u51fd\u6570)\uff0c\u8c03\u7528\u8005\u8f6c\u50a8\u5bc4\u5b58\u5668\u503c\u5e76\u6700\u7ec8\u8fd4\u56de\uff0c\u5bfc\u81f4\u4efb\u52a1\u9000\u51fa\uff0c\u968f\u540e\u8c03\u5ea6\u7a0b\u5e8f\u548cVM\u4e5f\u9000\u51fa\u3002\n\u5b9a\u4e49Kitten 1#\u53c2\u6570\uff1a(r(0)=\u7761\u7720_ms)const 123#K(0)=123 Entry\uff1aYear 1 0#Year A=type=Timer\uff0cRK(B)=R(0)=arg0 LOADK 0 0#R(0)=K(0)=123 return 0 1#return R(0)..R(0)=R(0)=123\u5b9a\u4e49\u4e3b\u89810#\u53c2\u6570\uff1a()const@kitten#K(0)=&lt\uff1b\u51fd\u6570\u3002const 500#K(1)=500\u6761\u76ee\uff1aLOADK 0 0#R(0)=K(0)=\u5c0f\u732b\u51fd\u6570LOADK 1 1#R(1)=K(1)=500 CALL 0 1 1#R(0)..R(0)=R(0)(R(1)..R(1))=a(R(1))DBGREG 0 1 0#\u8f6c\u50a8\u5bc4\u5b58\u5668\u503c\u7684VM\u8c03\u8bd5\u51fd\u6570RETURN 0 0#RETURN\u3002\n$time\u751f\u6210/\u8c03\u8bd5/bin/solSol 0.1.0 x64[VM]_[VM]\u4efb\u52a1\u51fd\u6570PC\u64cd\u4f5c\u503c[VM]0x7f8c9bc03bf0 0x7f8c9bc03910\u30021[VM]0x7f8c9bc03bf0 0x7f8c9bc000e0 1\u4ea7\u91cfabc\uff1a1\uff0c0\uff0c\u8ba1\u5212\u5728500.000000\u6beb\u79d2\u4e4b\u540e\u89e6\u53d1\u76840D\u8ba1\u65f6\u5668(\u8c03\u5ea6.c\uff1a81)#.\u65f6\u95f4\u5df2\u8fc7\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8c03\u5ea6\u7a0b\u5e8f\u6b63\u5728\u7a7a\u95f2.D\u8ba1\u65f6\u5668\u5df2\u89e6\u53d1--\u8c03\u5ea6\u4efb\u52a1(\u8c03\u5ea6.c\uff1a57)[VM]_\u3002_[VM]\u4efb\u52a1\u51fd\u6570PC\u64cd\u4f5c\u503c[VM]0x7f8c9bc03bf0 0x7f8c9bc000e0 2 LOADK AB\uff1a0\uff0c0[VM]0x7f8c9bc03bf0 0x7f8c9bc000e0 3\u8fd4\u56deAB\uff1a0\uff0c1[VM]0x7f8c9bc03bf0 0x7f8c9bc03910 3 DBGREG[VM]R(0)=123.000000(sched_exec.h\uff1a214)D[VM]R(1)=500.000000(sched_exec.h\uff1a215)D[VM]R(0\u3002\n$build/debug/bin/solSol 0.1.0 x64[sched 0x7fc219403930]\u8fd0\u884c\u961f\u5217\uff1a[\u4efb\u52a10x7fc219403c00]-&gt\uff1b[\u4efb\u52a10x7fc219403cd0]-&gt\uff1b[\u4efb\u52a10x7fc219403da0][VM]_[VM]\u4efb\u52a1\u51fd\u6570PC\u64cd\u4f5c\u503c[VM]0x7fc219403c00 0x7fc2194000e0 LOADK AB\uff1a0\u3002257[VM]0x7fc219403c00 0x7fc2194000e0 4\u4ea7\u91cfabc\uff1a0\uff0c0\uff0c0[VM]_\n..", "note_en": "During this weekend, together with a few evenings earlier this week, I created a rather simple  virtual machine dubbed  \u201cSol\u201d, after the Swedish word for \u201csun\u201d. I\u2019ve read a lot about VM design and I\u2019m into stuff like OS design, programming languages and other seeminlgy obscure and nerdy stuff surrounding the concept of a computer as a generic tool.\n A virtual machine (VM) is a software implementation of a machine (i.e. a computer) that executes programs like a physical machine. \u2014  Wikipedia\n Sol is a process virtual machine that runs inside an operating system process. However, inside Sol there are multiple tasks (just like most operating systems have processes) and so for a program running in Sol it does not matter what the world looks like on the outside. We could even make Sol boot directly from hardware, but that would just be crazytown. Trust me. I\u2019ve been down that road before.\n The purpose of Sol is learning. As we are defining our world, we have an extremely high degree of freedom. One major component of a virtual machine is the provided  instruction set. An  instruction is the simplest type of operation that a program can perform, and so the set of instructions provided by the virtual machine to programs running in it need to be universal and efficient.\n   In the Sol VM there are one or more  schedulers, each running on one CPU core (not yet implemented at the time of writing this).\n  Each  scheduler maintains a list of  tasks to be run. This list is called the  run queue. A scheduler also maintains I/O watchers, timers, handles OS interrupts, etc. The scheduler does most of the work in Sol as it not only does all those fancy things I just described, but it also executes program code.\n The  run queue is a list of tasks ordered in the way they are scheduled.\n If the task ended with an \u201cend\u201d or \u201cerror\u201d status, the task is removed from the run queue\u2026\n    If there are any I/O watchers or timers, check timers for expiry and possibly call the host OS kernel to check on pending \u201casynchronous\u201d I/O events.  If an event has happened, like a timer expired or fired, the correlating task is added to the run queue so that the task can read the event it is waiting for.\n  The scheduler repeats this process (e.g. starting from point 1.) as long as there are any tasks in the run queue.\n   As we can see, a  task is mostly an abstraction and contains only one significant component:   Activation records. These comprise a task\u2019s call stack and each  activation record corresponds to one (active) function call. An activation record contains a reference to the function prototype (more on this in just a second) it\u2019s executing, a  program counter (usually called  PC) which is a cursor for the currently executing program instruction and finally a registry for values.\n A  function prototype is the constants and the instruction of a function, but without a context (or \u201cfunction closure\u201d) with local variables etc. A  function prototype is kind of like a building without any people or furniture. Albeit the name, it\u2019s not really comparable to a blueprint as a  function prototype is not copied or implemented, but is actually used as-is.\n The  program counter is simply a number that corresponds to an offset into the function prototype\u2019s program (ordered list of instructions). As an activation record (we can think about this as a piece of running code) is executed, the  program counter (PC) is incremented as each instruction is executed. Sometimes the PC is decremented, when a program jumps backwards (e.g. when performing a loop). The PC plays a central role in an instruction-based program (like your computer or phone\u2019s hardware which is most likely incrementing a PC right now).\n The  registry is essentially a region of temporary memory that the executing program can use to store variable data. Imagine this simple function:\n def foo(x, y): x = x * 5 x = x * y return x\n Here the program needs a way to store the value created by  x * 5 that it can then pass to  x * y which also needs to store its resulting value somewhere before using it with  return. All local variables are stored in registers and thus access is very efficient. Something like this happens when executing the \u201cfoo\u201d function (\u201cR(x)\u201d means \u201cregister x\u201d):\n argument 0 and 1 are already in R(0) and R(1)load constant &#34;5&#34; into R(2)multiply value-of R(0) with value-of R(2), put the result in R(0)multiply value-of R(0) with value-of R(1), put the result in R(0)return R(0)\n Sol is a register-based virtual machine. Operands and results are read and stored from and to numbered registers, rather than \u201cpushed\u201d and \u201cpopped\u201d to and from a stack (as with  stack-based virtual machines). Register-based virtual machines avoid the push and pop operations usually surrounding other instructions, reducing code size, but in several cases also increases speed of execution (compared to stack-based virtual machines).\n In the most excellent paper  \u201cThe Implementation of Lua 5.0\u201d Roberto, Luiz and Waldemar describes the (not really a) problem with code size and decoding overhead:\n There are two problems usually associated with register-based machines: code size and decoding overhead. An instruction in a register machine needs to specify its operands, and so it is typically larger than a corresponding instruction in a stack machine. (For instance, the size of an instruction in Lua\u2019s virtual machine is four bytes, while the size of an instruction in several typical stack machines, including the ones previously used by Lua, is one or two bytes.) On the other hand, register machines generate less opcodes than stack machines, so the total code size is not much larger.\n    0-3 operands (e.g. \u201cregister a and register b, results in register c\u201d)\n As a virtual machine has the disadvantage of being \u2026virtual, we must do whatever we can in terms of assuring good performance, so one of these instructions fit into one  machine word. Most hardware today is able to deal with 32-bit long chunks of data very efficiently, so inspired by  Lua 5 I chose a 32-bit representation for Sol\u2019s instructions.\n Each instruction and its operands is encoded in one of three layouts (Behold, awesome ASCII art!.)\n  0 5 | 6 13 | 14 22 | 23 31 Bit------------|---------------|-----------------|----------------- OP | A | B | C Field------------|---------------|----------------------------------- 6 8 9 9 Bits [0..63] [0..255] [0..511] [0..511] Range\n Some operations only need two operands and can be made more efficient if one of those operands is large enough for common values. For this need we define an alternate layout of an instruction:\n  0 5 | 6 13 | 14 31 Bit------------|---------------|----------------------------------- OP | A | Bs/Bu Field------------|---------------|----------------------------------- 6 8 18 Bits [0..63] [0..255] Bu: [0..262143] Range Bu: [-131071..131072]\n A third class of operations only use one operand which size has a correlation with efficiency, so we define a third alternate layout of an instruction where the three operands are effectively collapsed into one 26-bit integer value:\n  0 5 | 6 31 Bit------------|--------------------------------------------------- OP | Bss/Buu Field------------|--------------------------------------------------- 6 26 Bits [0..63] Buu: [0..67108863] Range Bss: [-33554431..33554432]\n A, B, C, Bu and Buu signify unsigned integers whilst Bs and Bss signify signed integers. As we can read above, there\u2019s room for 64 operations and 256 registers (OP=6 bits, A=8 bits) with this configuration. More than we need :)\n Changing and maintaining instructions (operations + operands) is simple in Sol. I\u2019ve intentionally gone to great lengths in order to make playing around with the instuction set easy. The file  instr.h contains a list of instructions:\n /* Control flow */ \\ _(YIELD, ABC) /* suspend and reschedule */\\ _(JUMP, Bss) /* PC += Bss */\\ _(CALL, ABC) /* R(A), ... ,R(A+C-1) := R(A)(R(A+1), ... ,R(A+B)) */\\ _(RETURN, AB_) /* return R(A), ... ,R(A+B-1) */\\ /* Data */ \\ _(LOADK, ABu) /* R(A) = K(Bu) */\\ _(MOVE, AB_) /* R(A) = R(B) */\\ _(DBGREG, ABC) /* special: Debug dump register values */\\ /* Arithmetic */ \\ _(ADD, ABC) /* R(A) = RK(B) + RK(C) */\\ _(SUB, ABC) /* R(A) = RK(B) - RK(C) */\\ _(MUL, ABC) /* R(A) = RK(B) * RK(C) */\\ ...\n Sol\u2019s source code is setup in such a way that changing this list is all that is required, apart from the actual implementation of each instruction. Adding or renaming an instruction automatically makes convenience symbols and functions available. Say that we add a  DING instruction which plays a little sound every time it\u2019s executed:\n _(MUL, ABC) /* R(A) = RK(B) * RK(C) */\\ _(DING, Buu) /* A = sound number to play */\\ ...\n There\u2019s now a new operation identifier available called  S_OP_DING as well as constructor function for encoding DING instructions:\n  Running a program now that includes a DING operation will cause an error in the VM: \u201cunexpected operation\u201d. We haven\u2019t implemented the DING behavior yet! Operations are (at the time of writing this) implemented in  sched_exec.h which is the core of the virtual machine as this is what reads and performs the instructions of a Sol program. It can be summed up like this:\n void Execute(Instr* instructions) { Instr* pc = instructions; while (1) { switch (*++pc) { case S_OP_LOADK: // Read operands A and B from instruction *pc. // Put constant at B into register A. break; case S_OP_MOVE: // Read operands A and B from instruction *pc. // Put value of register B in register A. break; ... } // switch } // while}\n Pretty much a good old switch loop. When this C code is compiled with a modern compiler like Clang or GCC, it will be rather efficient as each of our virtual operations effectively corresponds to only a few machine instructions. This is where we need to add DING.\n ... case S_OP_DING: // Read operand Buu from instruction *pc. uint32_t sound_index = SInstrGetBuu(*pc); // Find note for sound_index and play it SoundNote* note = SoundGetNote(sound_index); SoundPlay(note); break; ...\n Here the type  Sound as well as  SoundGet and  SoundPlay represents some kind of sound playing function that you provide. Now we can write Sol programs that play music:\n define melody 0 entry: DING 0 # play note 0 DING 1 # play note 1 DING 1 # play note 1 DING 2 # play note 2 DING 0 # play note 0 RETURN 0 0 # return\n   No toy VM can be presented without shame unless it\u2019s able to  multitask; perform multiple things at once, or at least give the programmer the illusion of concurrency.\n Sol has an operation called \u201cyield\u201d which is able to pause a task in any state and later have that task resume at the exact same state.\n  From the task\u2019s perspective it never knew it was paused and resumed. This is a powerful primitive as we can implement many features on top of this. At the time of writing, Sol already has two different types of  yield: Yielding for other tasks (so they can run or be scheduled from I/O etc events), and yielding for a timer to expire. At the end of this article there are a few example programs, all of them making use of yield.\n Yield is used to implement   cooperative multitasking where all tasks cooperate for the use of processing resources. When a task has performed a series of computations and relieves control to another task, one of three things has happened:\n The task initiated an external (\u201cblocking\u201d) operation, like reading from a file or waiting for a certain time to occur,\n Most systems that communicate with its environment and abroad, like a web server or a text editor, spend most of its time (CPU time relative to real time) waiting for the environment to respond; e.g. producing data on a network socket, writing contents to a file or returning a stepper motors position. These systems often benefit from cooperative multitasking, in particular coherent, specialized systems (unlike operating systems which are general by nature).\n What Sol provides is essentially  coroutines for concurrency. A nice feature with coroutines (aka \u201cgreen threads\u201d aka \u201cuser threads\u201d) is their ability to run sequential code in a concurrent system. A task like this:\n  Involves three \u201cblocking\u201d calls to the environment which causes the task to yield:\n open asks the operating system to open a file by  name. The file might get opened sometime in the future. The scheduler takes a note that the task is waiting for this to happen, removes it from the  run queue for the time being.\n  The OS tells the scheduler that \u201cthat file you wanted me to open, well here\u2019s the file descriptor\u201d and thus the scheduler places the task on the  run queue again.\n    The task again calls to the environment, this time asking to  read the contents of  f.\n  Same thing as before, the scheduler tells the OS, takes a note, unschedules the task and continue with executing other tasks.\n  The OS tells the scheulder \u201cI\u2019ve read that file you asked me to read, here\u2019s the data\u201d (in reality this is slightly more complicated, but the principles are the same)\n   def read_file(name, callback): open(name, def (error, f): if (error): callback(error) else: read(f, def (read_error, data): close(f, def (error): callback(error, data) ) ) ) # returns here before the file has been opened\n Clearly harder to follow. A task in Sol can spawn new tasks in order to perform several things at the same time, like writing a file while replying over the network.\n def write_and_reply(destination_id, message): writer = write_file(destination_id + &#34;.msg&#34;, message) send_message(destination_id, message) while (recv(writer) != TaskEnd) noop # wait for write_file to end\n  Because a cooperatively multitasked system relies on each process regularly giving up time to other processes on the system, one poorly designed program can consume all of the CPU time for itself or cause the whole system to hang.\n This can happen when a program performs a very lengthy set of computations and can cause all kinds of problems, especially for other tasks relying on timers. As the Sol scheduler checks for timer expiration only between execution of tasks, a timer might effectively fire long after it was supposed to. Imagine controlling a toy  quadrotor where one task needs to update one rotor\u2019s angle each 50 milliseconds, and another task consumes a wholesome 200 milliseconds, then your quadrotor might just crash and burn.\n To address this Sol employs an  operation cost counter. Each task is given a predefined amount of \u201coperation value\u201d per execution iteration (when the scheduler runs a task\u2019s program). When the  operation cost counter reaches its limit, the task is simply forced to yield to other tasks. In the source code, look for  S_VM_EXEC_LIMIT.\n  The code below is expressed in a simplified assembly language that is almost 1:1 with the C API for defining these programs programatically, and so the assembly language itself should be considered irrelevant beyond explaining the instructions executed.\n In the output, lines like these:  [vm] ______________ ... denote when the scheduler regains control after running a task and the task either returned or yielded. This is one \u201cexecution iteration\u201d. When running multiple tasks, you will usually see tasks interleved in round-robin order between these \u201cexecution iteration\u201d marker lines.\n  In the output, lines starting with \u201c\u2026\u201d are comments and/or simplifications and not part of the actual output.\n  In assembly comments,  R(x) means \u201cRegister x\u201d,  RK(x) means \u201cRegister x if x is less than k else Constant (x-k)\u201d where k is a special value,  K(x) means \u201cConstant x\u201d.\n  In assembly comments,  PC signifies the \u201cprogram counter\u201d which is sort of a cursor to the instructions of a program. It is incremented by one for each instruction executed. Some instructions will further modify this counter, like for instance the  JUMP instruction.\n  While the variable x is greater than zero, decrement  x by one and yield to thescheduler, letting other tasks run. Eventually return.\n def main(): x = 5 while (x &gt; 0): x = x - 1 yield return\n  define main 0 CONST 5 # K(0) = 5 CONST 0 # K(1) = 0 CONST 1 # K(2) = 1 entry: LOADK 0 0 # R(0) = K(0) LE 0 0 256 # (0 == RK(k+1) &lt; RK(0)) ? continue else PC++ JUMP 3 # PC += 3 to RETURN SUB 0 0 257 # R(0) = R(0) - RK(k+1) YIELD 0 0 0 # yield A=type=sched JUMP -5 # PC -= 5 to LE RETURN 0 0 # return\n  $ build/debug/bin/solSol 0.1.0 x64[vm] ______________ ______________ __________ _______ ____ ______________[vm] Task Function PC Op Values[vm] 0x7fdf28c03c00 0x7fdf28c000e0 0 LOADK AB: 0, 0[vm] 0x7fdf28c03c00 0x7fdf28c000e0 1 LE ABC: 0, 0, 256[vm] 0x7fdf28c03c00 0x7fdf28c000e0 3 SUB ABC: 0, 0, 257[vm] 0x7fdf28c03c00 0x7fdf28c000e0 4 YIELD ABC: 0, 0, 0[vm] ______________ ______________ __________ _______ ____ ______________[vm] Task Function PC Op Values[vm] 0x7fdf28c03c00 0x7fdf28c000e0 5 JUMP Bss: -5[vm] 0x7fdf28c03c00 0x7fdf28c000e0 1 LE ABC: 0, 0, 256[vm] 0x7fdf28c03c00 0x7fdf28c000e0 3 SUB ABC: 0, 0, 257[vm] 0x7fdf28c03c00 0x7fdf28c000e0 4 YIELD ABC: 0, 0, 0[vm] ______________ ______________ __________ _______ ____ ______________...three more execution iterations identical to the above block...[vm] ______________ ______________ __________ _______ ____ ______________[vm] Task Function PC Op Values[vm] 0x7fdf28c03c00 0x7fdf28c000e0 5 JUMP Bss: -5[vm] 0x7fdf28c03c00 0x7fdf28c000e0 1 LE ABC: 0, 0, 256[vm] 0x7fdf28c03c00 0x7fdf28c000e0 2 JUMP Bss: 3[vm] 0x7fdf28c03c00 0x7fdf28c000e0 6 RETURN AB: 0, 0Scheduler runloop exited.\n  This program uses two functions. The entry point is the  main function which simplycalls the  kitten function with one argument \u2018500\u2019. The  kitten function \u201csleeps\u201d forthe number of milliseconds passed to it (as the first argument.) The  kitten functionthen returns the number \u201c123\u201d to the caller\u2014the  main function\u2014which dumps register values andfinally returns, causing the task to exit and subsequently the scheduler and the VM too to exit.\n  define kitten 1 # Arguments: (R(0)=sleep_ms) CONST 123 # K(0) = 123 entry: YIELD 1 0 0 # yield A=type=timer, RK(B)=R(0)=arg0 LOADK 0 0 # R(0) = K(0) = 123 RETURN 0 1 # return R(0)..R(0) = R(0) = 123define main 0 # Arguments: () CONST @kitten # K(0) = &lt;func kitten&gt; CONST 500 # K(1) = 500 entry: LOADK 0 0 # R(0) = K(0) = the kitten function LOADK 1 1 # R(1) = K(1) = 500 CALL 0 1 1 # R(0)..R(0) = R(0)(R(1)..R(1)) = a(R(1)) DBGREG 0 1 0 # VM debug function that dumps register values RETURN 0 0 # return\n  $ time build/debug/bin/solSol 0.1.0 x64[vm] ______________ ______________ __________ _______ ____ ______________[vm] Task Function PC Op Values[vm] 0x7f8c9bc03bf0 0x7f8c9bc03910 0 LOADK AB: 0, 0[vm] 0x7f8c9bc03bf0 0x7f8c9bc03910 1 LOADK AB: 1, 1[vm] 0x7f8c9bc03bf0 0x7f8c9bc03910 2 CALL ABC: 0, 1, 1[vm] 0x7f8c9bc03bf0 0x7f8c9bc000e0 1 YIELD ABC: 1, 0, 0D Timer scheduled to trigger after 500.000000 ms (sched.c:81)# ...time passes and in this case the scheduler is idling...D Timer triggered -- scheduling task (sched.c:57)[vm] ______________ ______________ __________ _______ ____ ______________[vm] Task Function PC Op Values[vm] 0x7f8c9bc03bf0 0x7f8c9bc000e0 2 LOADK AB: 0, 0[vm] 0x7f8c9bc03bf0 0x7f8c9bc000e0 3 RETURN AB: 0, 1[vm] 0x7f8c9bc03bf0 0x7f8c9bc03910 3 DBGREG D [vm] R(0) = 123.000000 (sched_exec.h:214)D [vm] R(1) = 500.000000 (sched_exec.h:215)D [vm] R(0) = 123.000000 (sched_exec.h:216)[vm] 0x7f8c9bc03bf0 0x7f8c9bc03910 4 RETURN AB: 0, 0Scheduler runloop exited.real 0m0.504suser 0m0.001ssys 0m0.001s\n   $ build/debug/bin/solSol 0.1.0 x64[sched 0x7fc219403930] run queue: [task 0x7fc219403c00] -&gt; [task 0x7fc219403cd0] -&gt; [task 0x7fc219403da0][vm] ______________ ______________ __________ _______ ____ ______________[vm] Task Function PC Op Values[vm] 0x7fc219403c00 0x7fc2194000e0 0 LOADK AB: 0, 0[vm] 0x7fc219403c00 0x7fc2194000e0 1 LE ABC: 0, 0, 256[vm] 0x7fc219403c00 0x7fc2194000e0 3 SUB ABC: 0, 0, 257[vm] 0x7fc219403c00 0x7fc2194000e0 4 YIELD ABC: 0, 0, 0[vm] ______________ ______________ _________\n......", "posttime": "2020-06-06 17:42:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u865a\u62df\u673a,\u9633\u5149\u707f\u70c2,sunny,\u4efb\u52a1", "title": "Sol\u00e2\u20ac\u201c\u4e00\u4e2a\u9633\u5149\u707f\u70c2\u7684\u5c0f\u865a\u62df\u673a", "title_en": "Sol \u00e2\u20ac\u201c a sunny little virtual machine", "transed": 1, "url": "https://rsms.me/sol-a-sunny-little-virtual-machine", "via": "", "real_tags": ["\u865a\u62df\u673a", "\u9633\u5149\u707f\u70c2", "sunny", "\u4efb\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "8122e745ceae3935cb742a74c1b8bac6.png", "infoid": 1005417, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Ward\u662f\u4e00\u4e2a\u7b80\u5355\u800c\u7b80\u7ea6\u7684\u670d\u52a1\u5668\u76d1\u63a7\u5de5\u5177\uff0c\u5b83\u53ea\u663e\u793a\u4e3b\u8981\u4fe1\u606f\uff0c\u5982\u679c\u4f60\u60f3\u770b\u5230\u597d\u770b\u7684\u4eea\u8868\u677f\u800c\u4e0d\u662f\u4e00\u5806\u6570\u5b57\u548c\u56fe\u5f62\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b83\u3002Ward\u5728\u6240\u6709\u6d41\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u90fd\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528OSHI\u3002\n\u6b64\u5757\u5305\u542b\u6b63\u5e38\u8fd0\u884c\u65f6\u95f4\u548c\u56fe\u8868\u6a21\u5757\u3002\u6b63\u5e38\u8fd0\u884c\u65f6\u95f4\u8868\u793a\u81eaLinux\u4e0a\u6b21\u542f\u52a8\u4ee5\u6765\u7684\u65f6\u95f4\uff0c\u4ee5\u53caWindows\u4e0a\u4e24\u6b21\u786c\u91cd\u7f6e\u4e4b\u95f4\u7684\u65f6\u95f4\u3002\u56fe\u8868\u663e\u793a\u6700\u8fd115\u79d2\u7684\u670d\u52a1\u5668\u5229\u7528\u7387\u3002(\u5904\u7406\u5668\u3001RAM\u3001\u5b58\u50a8\u5668)\u60a8\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u56fe\u8868\u6a21\u5757\u53f3\u4e0a\u89d2\u7684\u77e9\u5f62\u6765\u9690\u85cf\u72ec\u7acb\u7684\u6570\u636e\u96c6\u3002", "note_en": "Ward is a simple and and minimalistic server monitoring tool.It shows only principal information and can be used, if you want to see nice looking dashboard instead bunch of numbers and graphs.Ward works nice on all popular operating systems, because it uses  OSHI.\n           This block contain uptime and chart modules. Uptime represent time since last boot on Linux, and time between hard resets on Windows. Chart display last fifteen seconds of server utilization. (Proccesor, ram, storage) You can hide separated datasets by clicking on rectangles on re top right corner of chart module.", "posttime": "2020-06-06 17:08:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u670d\u52a1\u5668,minimalistic,\u65f6\u95f4", "title": "\u7b80\u5355\u3001\u7b80\u7ea6\u7684\u670d\u52a1\u5668\u4eea\u8868\u677f", "title_en": "Simple and Minimalistic Server Dashboard", "transed": 1, "url": "https://github.com/B-Software/Ward", "via": "", "real_tags": ["\u670d\u52a1\u5668", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "a67109b06c9dd112877ffbc0c9c3d916.jpg", "infoid": 1005416, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "EPFL\u7684\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u5bf9\u8be5\u56fd\u91c7\u53d6\u7684\u51cf\u7f13\u51a0\u72b6\u75c5\u6bd2\u4f20\u64ad\u7684\u63aa\u65bd\u7684\u5f71\u54cd\u8fdb\u884c\u4e86\u5efa\u6a21\u3002\u6839\u636e\u4ed6\u4eec\u7684\u4f30\u8ba1\uff0c\u6c61\u67d3\u7387\u4e0b\u964d\u4e8653%\u81f392%\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5404\u5dde\uff0c\u4eba\u5458\u6d41\u52a8\u51cf\u5c11\u4e8630%\u81f380%\u3002\n\u745e\u58eb\u653f\u5e9c\u7684\u5c01\u9501\u63aa\u65bd\u5728\u963b\u6b62\u5927\u6d41\u884c\u65b9\u9762\u662f\u5426\u6709\u6548\uff1f\u8fd9\u662f\u4e00\u4e2aEPFL\u7814\u7a76\u5c0f\u7ec4\u5f00\u59cb\u901a\u8fc7\u5206\u67902\u670828\u65e5\u7684\u6570\u636e\u6765\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c2\u670828\u65e5\u662f\u745e\u58eb\u653f\u5e9c\u7981\u6b621000\u4eba\u4ee5\u4e0a\u7684\u56e2\u4f53\u7684\u90a3\u4e00\u5929\u3002\u8fd9\u4e00\u6700\u521d\u7684\u9650\u5236\u4e4b\u540e\u662f\u4e00\u7cfb\u5217\u5176\u4ed6\u7684\u9650\u5236\uff0c\u6700\u7ec8\u57283\u670820\u65e5\u5f00\u59cb\u5b9e\u65bd\uff0c\u7981\u6b625\u4eba\u4ee5\u4e0a\u7684\u56e2\u4f53\u3002\u8be5\u7814\u7a76\u7684\u5408\u8457\u8005\u96c5\u514b\u00b7\u8d39\u83b1(Jacques Fellay)\u8868\u793a\uff1a\u201c\u653f\u7b56\u5236\u5b9a\u8005\u5fc5\u987b\u80fd\u591f\u91cf\u5316\u8fd9\u4e9b\u63aa\u65bd\u5728\u51cf\u7f13SARS-CoV-2\u4f20\u64ad\u65b9\u9762\u7684\u6548\u679c\uff0c\u8fd9\u6837\u4ed6\u4eec\u624d\u80fd\u4e3a\u8fd9\u6b21\u5927\u6d41\u884c\u548c\u672a\u6765\u7684\u5927\u6d41\u884c\u505a\u51fa\u6b63\u786e\u7684\u51b3\u5b9a\u3002\u201d\u8d39\u83b1\u662f\u6b27\u6d32\u8db3\u7403\u8054\u5408\u4f1a\u751f\u547d\u79d1\u5b66\u5b66\u9662\u7684\u4e00\u540d\u533b\u5b66\u7814\u7a76\u5458\uff0c\u4e5f\u662f\u745e\u58eb\u8054\u90a6\u653f\u5e9c\u65b0\u51a0\u80ba\u708e\u79d1\u5b66\u987e\u95ee\u59d4\u5458\u4f1a\u7684\u6210\u5458\u3002\u8be5\u7814\u7a76\u5c0f\u7ec4\u7684\u53d1\u73b0\u521a\u521a\u53d1\u8868\u5728\u201c\u745e\u58eb\u533b\u5b66\u5468\u520a\u201d\u4e0a\u3002\n\u4ed6\u4eec\u7684\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528\u6d41\u884c\u75c5\u5b66\u6a21\u578b\u6765\u8ba1\u7b97\u75c5\u6bd2\u5728\u5168\u56fd\u548c\u5dde\u4e00\u7ea7\u5927\u6d41\u884c\u8fc7\u7a0b\u4e2d\u7684\u201c\u57fa\u672c\u590d\u5236\u6570\u201d\uff0c\u5373R0\u3002\u8be5\u6a21\u578b\u4f7f\u7528\u4e86\u6c83\u5fb71,000\u591a\u540d\u65b0\u51a0\u80ba\u708e\u4f4f\u9662\u60a3\u8005\u7684\u8be6\u7ec6\u6570\u636e\uff0c\u4ee5\u53ca\u6709\u5173\u65b0\u51a0\u80ba\u708e\u5728\u745e\u58eb\u4f4f\u9662\u548c\u6b7b\u4ea1\u7684\u516c\u5f00\u4fe1\u606f\u3002\u201c\u6211\u4eec\u5f88\u5e78\u8fd0\u5730\u83b7\u5f97\u4e86\u5173\u952e\u6570\u636e\uff0c\u5982\u4f4f\u9662\u65f6\u95f4-\u5305\u62ec\u5728\u91cd\u75c7\u76d1\u62a4\u75c5\u623f-\u8fd9\u5728\u8fd9\u79cd\u7c7b\u578b\u7684\u7814\u7a76\u4e2d\u5e76\u4e0d\u603b\u662f\u5982\u6b64\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u745e\u58eb\u7684\u5177\u4f53\u4e34\u5e8a\u6761\u4ef6\u5b9a\u5236\u6211\u4eec\u7684\u6a21\u578b\uff0c\u201cEPFL\u751f\u6001\u6c34\u6587\u5b66\u5b9e\u9a8c\u5ba4\u7684\u535a\u58eb\u751f\u3001\u8be5\u7814\u7a76\u7684\u4e3b\u8981\u4f5c\u8005Joseph Lemaitre\u8bf4\u3002\n\u7814\u7a76\u5c0f\u7ec4\u53d1\u73b0\uff0c\u5728\u56fd\u5bb6\u5c42\u9762\u4e0a\uff0cR0\u4ece\u5927\u6d41\u884c\u5f00\u59cb\u65f6\u76842.8%\u4e0b\u964d\u52304\u6708\u521d\u76840.4%-\u4e0b\u964d\u4e8686%\u3002\u4ece\u5404\u4e2a\u5dde\u6765\u770b\uff0cR0\u4e0b\u964d\u4e8653%(\u5728\u6c5d\u62c9)\u523092%(\u5728\u5df4\u585e\u5c14-\u65af\u5854\u7279)\u3002\u4eba\u4eec\u884c\u52a8\u7684\u51cf\u5c11\u662f\u901a\u8fc7\u667a\u80fd\u624b\u673a\u7684\u6570\u636e\u6765\u8861\u91cf\u7684\uff1a\u5168\u56fd\u8303\u56f4\u5185\u5de5\u4f5c\u3001\u8d2d\u7269\u548c\u5a31\u4e50\u6d3b\u52a8\u7684\u51fa\u884c\u51cf\u5c11\u4e8650%\u523075%\uff0c\u5dde\u4e00\u7ea7\u51cf\u5c11\u4e8630%\u523080%\u3002\u7814\u7a76\u4eba\u5458\u8fd8\u53d1\u73b0\uff0c\u4eba\u4eec\u6d3b\u52a8\u7684\u51cf\u5c11\u548cR0\u7684\u4e0b\u964d\u4e4b\u95f4\u5b58\u5728\u5f88\u5f3a\u7684\u76f8\u5173\u6027\uff0c\u5c3d\u7ba1\u8fd9\u4e00\u6bd4\u7387\u5b9e\u9645\u4e0a\u5728\u4eba\u4eec\u5f00\u59cb\u6539\u53d8\u4e60\u60ef\u7684\u51e0\u5929\u524d\u5c31\u5f00\u59cb\u4e0b\u964d\u4e86\u3002\n\u63cf\u8ff0\uff1a\u7531\u7814\u7a76\u4eba\u5458\u6a21\u578b\u8ba1\u7b97\u7684R0\u65f6\u95f4\u5e8f\u5217\u3002\u4e2d\u4f4d\u6570=\u865a\u7ebf\uff1b\u56db\u5206\u4f4d\u6570\u8303\u56f4=\u6df1\u7070\u8272\uff1b95%\u7f6e\u4fe1\u533a\u95f4=\u6d45\u7070\u8272\u30021=\u7981\u6b621000\u4eba\u4ee5\u4e0a\u7684\u56e2\u4f53\uff1b2=\u5173\u95ed\u5b66\u6821\uff1b3=\u5173\u95ed\u6240\u6709\u975e\u5fc5\u8981\u7684\u4f01\u4e1a\uff1b4=\u7981\u6b625\u4eba\u4ee5\u4e0a\u7684\u56e2\u4f53\u3002/J.Lemaitre\u7b49\u4eba\uff0cSMW\uff0c2020\u3002\n\u6839\u636e\u8fd9\u9879\u7814\u7a76\uff0cR0\u4ece3\u67086\u65e5\u5f00\u59cb\u4e0b\u964d\uff0c\u81f3\u5c11\u5728\u745e\u58eb\u5b66\u6821\u6b63\u5f0f\u505c\u8bfe\u524d\u4e00\u5468\u3002\u745e\u58eb\u8054\u90a6\u516c\u5171\u536b\u751f\u5c40\u4e8e2\u670828\u65e5\u5f00\u5c55\u4e86\u65b0\u51a0\u80ba\u708e\u5ba3\u4f20\u6d3b\u52a8\uff0c\u5e76\u4e8e3\u67082\u65e5\u66f4\u65b0\uff0c\u66f4\u52a0\u6ce8\u91cd\u4e2a\u4eba\u536b\u751f\u63aa\u65bd\u3002\u8fd9\u573a\u8fd0\u52a8\u63d0\u9ad8\u4e86\u4eba\u4eec\u5bf9\u5f62\u52bf\u4e25\u91cd\u6027\u7684\u8ba4\u8bc6\uff0c\u5e76\u4fc3\u4f7f\u4eba\u4eec\u9075\u5faa\u653f\u5e9c\u7684\u4e2a\u4eba\u536b\u751f\u548c\u793e\u4f1a\u8ddd\u79bb\u5efa\u8bae\u3002\u56e0\u6b64\uff0cR0\u5728\u5efa\u8bae\u53d8\u5f97\u5f3a\u5236\u6027\u4e4b\u524d\u5c31\u5f00\u59cb\u4e0b\u964d\u3002\u201c\u5f53\u653f\u5e9c\u7981\u6b625\u4eba\u4ee5\u4e0a\u7684\u56e2\u4f53\uff0c\u5e76\u8981\u6c42\u6240\u6709\u4eba\u90fd\u5446\u5728\u5bb6\u91cc\u65f6\uff0cR0\u5df2\u7ecf\u63a5\u8fd11\u3002\u5f53\u7136\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u80fd\u662f\u56e0\u4e3a\u4eba\u4eec\u770b\u5230\u4e86\u8fd9\u4e9b\u8981\u6c42\u7684\u5230\u6765\uff0c\u5e76\u76f8\u5e94\u5730\u6539\u53d8\u4e86\u81ea\u5df1\u7684\u884c\u4e3a-\u4f8b\u5982\uff0c\u91c7\u53d6\u4e86\u793e\u4ea4\u758f\u8fdc\u63aa\u65bd-\u751a\u81f3\u5728\u5b98\u65b9\u5ba3\u5e03\u4e4b\u524d\uff0c\u5c31\u50cf\u4e92\u8054\u7f51\u641c\u7d22\u6570\u636e\u6240\u663e\u793a\u7684\u90a3\u6837\uff0cLemaitre\u8bf4\u3002\n\u7814\u7a76\u4eba\u5458\u7684\u6a21\u578b\u8868\u660e\uff0c3.9%\u7684\u745e\u58eb\u4eba\u53e3\u5df2\u7ecf\u611f\u67d3\u4e86\u8fd9\u79cd\u65b0\u7684\u51a0\u72b6\u75c5\u6bd2(\u622a\u81f34\u670824\u65e5)\uff0c\u8be5\u5dde\u7684\u611f\u67d3\u7387\u4ece\u4f2f\u5c14\u5c3c\u76841.9%\u5230\u63d0\u5951\u8bfa\u768416%\u4e0d\u7b49\u3002\n\u63cf\u8ff0\uff1a\u622a\u81f34\u670824\u65e5\uff0c\u745e\u58eb\u611f\u67d3SARS-CoV-2\u75c5\u6bd2\u7684\u4eba\u6570\u767e\u5206\u6bd4\u3002\u5bf9\u6709\u8db3\u591f\u6570\u636e\u768412\u4e2a\u5dde\u8fdb\u884c\u4e86\u4f30\u8ba1\u3002\u672a\u5efa\u6a21\u7684\u5dde\u4ee5\u7070\u8272\u663e\u793a\uff0c\u70b9\u8868\u793a\u56fd\u5bb6\u7ea7\u4f30\u8ba1\u53d1\u75c5\u7387\u6bd4\u4f8b\u4e3a3%\u3002/J.Lemaitre\u7b49\u4eba\uff0cSMW\uff0c2020\n\u73b0\u5728\uff0c\u5c01\u9501\u63aa\u65bd\u6b63\u5728\u9010\u6b65\u89e3\u9664\uff0c\u7814\u7a76\u5c0f\u7ec4\u8ba1\u5212\u6bcf\u5929\u516c\u5e03\u4ed6\u4eec\u7684R0\u4f30\u8ba1\u3002\u5bc6\u5207\u8ddf\u8e2a\u8fd9\u4e00\u6307\u6807\u5c06\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u75c5\u6bd2\u7684\u4f20\u64ad\u53ea\u80fd\u901a\u8fc7\u4eba\u7684\u884c\u4e3a\u6765\u51cf\u7f13\uff0c\u800c\u4e0d\u662f\u7b49\u5230\u6211\u4eec\u5b9e\u73b0\u7fa4\u4f53\u514d\u75ab-\u8fd9\u8fd8\u5f88\u9065\u8fdc\u3002\u201c\u65e2\u7136\u9910\u9986\u548c\u5546\u5e97\u91cd\u65b0\u5f00\u5f20\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u611f\u67d3\u4eba\u6570\u4e0a\u5347\u5417\uff1f\u80fd\u5426\u901a\u8fc7\u66f4\u79ef\u6781\u7684\u6d4b\u8bd5\u548c\u8ffd\u8e2a\u6218\u7565\u6765\u904f\u5236\u8fd9\u79cd\u4e0a\u5347\uff1f\u800c\u53e3\u7f69\u53c8\u6709\u591a\u5927\u5e2e\u52a9\u5462\uff1f\u201c\u3002\u8d39\u5229\u8bf4\u3002\u201c\u6211\u4eec\u4ecd\u7136\u6ca1\u6709\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848--\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5fc5\u987b\u5bc6\u5207\u8ddf\u8e2a\u6d41\u884c\u75c5\u5b66\u6307\u6807\u7684\u539f\u56e0\u3002\u6bcf\u65e5R0\u6570\u5b57\u5c06\u662f\u672a\u6765\u51e0\u4e2a\u6708\u516c\u5171\u536b\u751f\u653f\u7b56\u5236\u5b9a\u8005\u7684\u6709\u7528\u6307\u5357\u3002\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u7528\u65b0\u7684\u6570\u636e\u4e0d\u65ad\u589e\u5f3a\u4ed6\u4eec\u7684\u6a21\u578b\u6765\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f8b\u5982\u6b63\u5728\u8fdb\u884c\u7684\u8840\u6e05\u5b66\u6d4b\u8bd5\u7684\u7ed3\u679c\uff0c\u6216\u8005\u6211\u4eec\u73b0\u5728\u638c\u63e1\u7684\u6709\u5173COVID-19\u5728\u4e34\u5e8a\u60a3\u8005\u4e2d\u5982\u4f55\u53d1\u5c55\u7684\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u3002\u201c\u3002\n\u53c2\u8003\u6587\u732e\u201c\u8bc4\u4f30\u975e\u836f\u7269\u5e72\u9884\u5bf9\u745e\u58ebSARS-CoV-2\u4f20\u64ad\u7684\u5f71\u54cd\u201d\u3002\u7ea6\u745f\u592b\u3002Lemaitre\uff0cJavier Perez-Saez\uff0cAndrew S.Azman\uff0cAndrea Rinaldo\u548cJacques Fellay\u3002\u300a\u745e\u58eb\u533b\u5b66\u5468\u520a\u300b\uff0c2020\u5e74\u7248\u3002--https://smw.ch/article/doi/smw.2020.20295", "note_en": "EPFL researchers have modeled the effects of measures taken in the country to slow the spread of coronavirus. According to their estimates, the contamination rate has fallen by between 53% and 92%, depending on the canton, and people\u2019s movements have been reduced by 30% to 80%.\n Have the Swiss government\u2019s lockdown measures been effective in stemming the pandemic? That\u2019s the question a team of EPFL researchers set out to answer by analyzing data dating back to 28 February, the day the Swiss government banned groupings of over 1,000 people. This initial restriction was followed by a series of others that culminated in a ban on groupings of over five people, introduced on 20 March. \u201cIt\u2019s essential for policymakers to be able to quantify how effective these measures are in slowing the spread of SARS-CoV-2, so that they can make the right decisions for both this pandemic and future ones,\u201d says Jacques Fellay, the study\u2019s coauthor. Fellay, a medical researcher at EPFL\u2019s School of Life Sciences, also sits on the Swiss federal government\u2019s COVID-19 scientific advisory board. The team\u2019s findings  have just been published in  Swiss Medical Weekly.\n Their method involves using an epidemiological model to calculate the virus\u2019s \u201cbasic reproduction number,\u201d or R 0, over the course of the pandemic on both a national and cantonal level. The model uses detailed data on over 1,000 hospitalized COVID-19 patients in Vaud as well as publicly available information on COVID-19 hospitalizations and deaths in Switzerland. \u201cWe were fortunate to have access to key data such as the length of hospital stays \u2013 including in intensive care units \u2013 which isn\u2019t always the case in this type of study. That allowed us to tailor our model to the specific clinical conditions in Switzerland,\u201d says Joseph Lemaitre, a PhD student at EPFL\u2019s Laboratory of Ecohydrology and the study\u2019s lead author.\n The research team found that on a national level, R 0 fell from 2.8\u00a0at the start of the pandemic to 0.4\u00a0in early April \u2013 a decrease of 86%. Looking at individual cantons, R 0 dropped between 53% (in Jura) and 92% (in Basel-Stadt). The reduction in people\u2019s movements was measured using smartphone data: trips for work, shopping and recreational activities fell between 50% and 75% on a national level and between 30% and 80% on a cantonal level. The researchers also found a strong correlation between a reduction in people\u2019s movements and a decrease in R 0, even though this rate actually started declining a few days before people began changing their habits.\n  Caption: R 0 time series calculated by the researchers\u2019 model. Median = dashed line; interquartile range = dark grey; 95% confidence interval = light grey. 1 = ban on groupings of more than 1,000 people; 2 = closure of schools; 3 = closure of all non-essential businesses; 4 = ban on groupings of more than 5 people. / J. Lemaitre et al., SMW, 2020\n According to the study, R 0 began falling on 6 March \u2013 at least one week before Swiss schools were officially closed. The Swiss Federal Office of Public Health rolled out its COVID-19 information campaign on 28 February and updated it on 2 March with a heightened focus on personal hygiene measures. This campaign raised awareness about the gravity of the situation and prompted people to follow the government\u2019s personal hygiene and social distancing recommendations. As a result, R 0 started falling before the recommendations became mandatory. \u201cR 0 was already close to 1 when the government banned groupings of more than five people and asked that everyone stay at home. Of course, that may be partly due to the fact that people saw those requirements coming and changed their behavior accordingly \u2013 by adopting social distancing measures, for example \u2013 even before the official announcement, as suggested by data on internet searches,\u201d says Lemaitre.\n The researchers\u2019 model indicates that 3.9% of the Swiss population has been infected by the new coronavirus (as of 24 April), with cantonal rates ranging from 1.9% in Bern to 16% in Ticino.\n  Caption: Percentage of people infected with SARS-CoV-2 in Switzerland up to 24 April. Estimates were produced for the 12 cantons for which enough data were available. Unmodeled cantons are shown in grey with points indicating the national-level estimated incidence proportion of 3%. / J. Lemaitre et al., SMW, 2020\n Now that the lockdown measures are gradually being lifted, the research team plans to publish their R 0 estimate daily. Tracking this metric closely will be essential since the spread of the virus can only be slowed through people\u2019s behaviors, and not by waiting until we achieve herd immunity \u2013 which is still far off. \u201cWill we see a rise in infections now that restaurants and shops are opening back up? Could that rise be contained through a more aggressive testing and tracing strategy? And how helpful are masks?\u201d says Fellay. \u201cWe still don\u2019t have the answers to those questions \u2013 which is why we must track epidemiological indicators closely. Daily R 0 figures will be a useful guide for public-health policymakers in the coming months. Researchers can help by continually enhancing their models with new data, such as the results of the serological tests that are being carried out or the more detailed information we now have on how COVID-19 develops in clinical patients.\u201d\n References \u201cAssessing the impact of non-pharmaceutical interventions on SARS-CoV-2 transmission in Switzerland.\u201d Joseph. C. Lemaitre, Javier Perez-Saez, Andrew S. Azman, Andrea Rinaldo and Jacques Fellay. Swiss Medical Weekly,\u00a02020.\u00a0 https://smw.ch/article/doi/smw.2020.20295", "posttime": "2020-06-06 16:51:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c01\u9501,lockdown,r0", "title": "\u745e\u58eb\u7684\u5c01\u9501\u4f7f\u65b0\u51a0\u80ba\u708e\u7684\u6848\u4ef6\u5927\u5e45\u51cf\u5c11", "title_en": "Switzerland's lockdown has sharply reduced the cases of Covid-19", "transed": 1, "url": "https://actu.epfl.ch/news/switzerland-s-lockdown-has-sharply-reduced-the-cas/", "via": "", "real_tags": ["\u5c01\u9501", "lockdown", "r0"]}, {"category": "", "categoryclass": "", "imagename": "e44a0c6ec182018aface067a38d88035.png", "infoid": 1005414, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u89e3\u51b3\u4e00\u4e2a\u56f0\u96be\u7684\u7269\u7406\u95ee\u9898\u53ef\u80fd\u4f1a\u51fa\u4eba\u610f\u6599\u5730\u7c7b\u4f3c\u4e8e\u7ec4\u88c5\u4e00\u4e2a\u8fde\u9501\u5f0f\u7684\u673a\u68b0\u62fc\u56fe\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u9897\u7c92\u6216\u788e\u7247\u770b\u8d77\u6765\u90fd\u5f88\u76f8\u4f3c\uff0c\u4f46\u53ef\u4ee5\u6392\u5217\u6210\u4e00\u4e2a\u6f02\u4eae\u7684\u7ed3\u6784\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u7cbe\u786e\u4f4d\u7f6e(\u56fe1)\u30021983\u5e74\uff0c\u7269\u7406\u5b66\u5bb6\u7f57\u4f2f\u7279\u00b7\u52b3\u514b\u6797(Robert Laughlin)\u5728\u4e00\u79cd\u540d\u4e3a\u970d\u5c14\u68d21(Hall Bar 1)\u7684\u8bbe\u5907\u4e2d\u89e3\u91ca\u4e86\u7535\u5b50\u76f8\u4e92\u4f5c\u7528\u5f62\u6210\u7684\u7ed3\u6784\uff0c\u4ece\u800c\u89e3\u5f00\u4e86\u8c1c\u56e2\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u7535\u5b50\u7684\u5947\u602a\u884c\u4e3a\u4ecd\u7136\u8ba9\u7269\u7406\u5b66\u5bb6\u4eec\u7740\u8ff7\uff0c\u4f46\u6a21\u62df\u8fd9\u6837\u7684\u7cfb\u7edf\u6216\u7cbe\u786e\u6d4b\u91cf\u7c92\u5b50\u7684\u8d85\u77ed\u65f6\u95f4\u548c\u957f\u5ea6\u5c3a\u5ea6\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u514b\u62c9\u514b\u7b49\u4eba\u5728\u201c\u81ea\u7136\u201d\u6742\u5fd7\u4e0a\u64b0\u6587\u30022\u62a5\u9053\u4e86\u4e00\u79cd\u7531\u590d\u5408\u7269\u8d28-\u8f7b\u7c92\u5b50\u7ec4\u6210\u7684\u975e\u7535\u5b50Laughlin\u6001\u7684\u4ea7\u751f\uff0c\u8fd9\u79cd\u7c92\u5b50\u88ab\u79f0\u4e3a\u6781\u5316\u5b50\uff0c\u6bd4\u7535\u5b50\u66f4\u5bb9\u6613\u8ffd\u8e2a\u548c\u64cd\u7eb5\u3002\n\u4e3a\u4e86\u63cf\u7ed8\u62c9\u592b\u6797\u72b6\u6001\uff0c\u8bf7\u8003\u8651\u970d\u5c14\u68d2\uff0c\u5728\u5176\u4e2d\u901a\u5e38\u53ef\u4ee5\u89c2\u5bdf\u5230\u8fd9\u6837\u7684\u72b6\u6001(\u56fe2A)\u3002\u5728\u8fd9\u4e9b\u5668\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\u81ea\u7531\u8fd0\u52a8\u7684\u7535\u5b50\u53d7\u5230\u5782\u76f4\u4e8e\u5e73\u9762\u7684\u5f3a\u78c1\u573a\u7684\u5f71\u54cd\u3002\u5728\u7ecf\u5178\u7269\u7406\u4e2d\uff0c\u4efb\u4f55\u4f4d\u7f6e\u7684\u7535\u5b50\u90fd\u4f1a\u5f00\u59cb\u6cbf\u7740\u88ab\u79f0\u4e3a\u56de\u65cb\u8f68\u9053\u7684\u5706\u5f62\u8f68\u9053\u8fd0\u52a8\uff0c\u56de\u65cb\u8f68\u9053\u7684\u534a\u5f84\u53d6\u51b3\u4e8e\u7c92\u5b50\u7684\u52a8\u80fd\u3002\u5728\u91cf\u5b50\u529b\u5b66\u4e2d\uff0c\u7535\u5b50\u7684\u4f4d\u7f6e\u4ecd\u7136\u662f\u81ea\u7531\u7684\uff0c\u4f46\u5b83\u7684\u8f68\u9053\u534a\u5f84--\u56e0\u6b64\uff0c\u5b83\u7684\u52a8\u80fd--\u53ea\u80fd\u4ee5\u79bb\u6563\u7684\u6b65\u9aa4\u589e\u52a0\u6216\u51cf\u5c11\u3002\u8fd9\u4e00\u7279\u5f81\u5bfc\u81f4\u5927\u91cf\u7b49\u80fd\u91cf(\u80fd\u91cf\u7b80\u5e76)\u7684\u72b6\u6001\u88ab\u79f0\u4e3a\u6717\u9053\u80fd\u7ea7\u3002\u6dfb\u52a0\u5230\u6700\u4f4e\u80fd\u7ea7\u7684\u975e\u76f8\u4e92\u4f5c\u7528\u7535\u5b50\u53ef\u4ee5\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u5206\u5e03\u5728\u80fd\u7ea7\u7684\u80fd\u91cf\u7b80\u5e76\u6001\u4e4b\u95f4\u3002\n\u589e\u52a0\u7535\u5b50\u4e4b\u95f4\u7684\u6392\u65a5\u76f8\u4e92\u4f5c\u7528\u9650\u5236\u4e86\u7c92\u5b50\u5728\u6700\u4f4e\u6717\u9053\u80fd\u7ea7\u4e0a\u7684\u5206\u5e03\uff0c\u6709\u5229\u4e8e\u4efb\u4f55\u4e24\u4e2a\u7535\u5b50\u5728\u540c\u4e00\u5730\u70b9\u7684\u51e0\u7387\u4e3a\u96f6\u7684\u6784\u578b\u3002Laughlin\u63cf\u8ff0\u7684\u72b6\u6001\u6b63\u662f\u5177\u6709\u8fd9\u4e00\u6027\u8d28\uff0c\u5e76\u89e3\u91ca\u4e86\u5206\u6570\u91cf\u5b50\u970d\u5c14\u6548\u5e94\u7684\u4e3b\u8981\u7279\u5f81\uff0c\u5373\u5f3a\u78c1\u573a\u4e2d\u7684\u7535\u5b50\u5171\u540c\u4f5c\u7528\uff0c\u8868\u73b0\u4e3a\u5177\u6709\u5206\u6570\u7535\u8377\u7684\u7c92\u5b50\u3002\u8fd9\u9879\u5de5\u4f5c\u4e3a\u52b3\u514b\u6797\u8d62\u5f97\u4e861998\u5e74\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u7684\u4e00\u90e8\u5206\u3002Laughlin\u6001\u662f\u771f\u6b63\u7684\u591a\u4f53\u72b6\u6001\uff0c\u4e0d\u80fd\u7528\u5178\u578b\u7684\u8fd1\u4f3c\u6765\u63cf\u8ff0\uff0c\u4f8b\u5982\u5e73\u5747\u573a\u8fd1\u4f3c\u3002\u76f8\u53cd\uff0c\u6bcf\u4e2a\u7c92\u5b50\u7684\u72b6\u6001\u53d6\u51b3\u4e8e\u6240\u6709\u5176\u4ed6\u7c92\u5b50\u7684\u7cbe\u786e\u72b6\u6001\uff0c\u5c31\u50cf\u5728\u8fde\u9501\u62fc\u56fe\u4e2d\u4e00\u6837\u3002\n\u4e3a\u4e86\u83b7\u5f97\u7531\u504f\u632f\u5b50\u7ec4\u6210\u7684Laughlin\u6001\uff0c\u514b\u62c9\u514b\u548c\u4ed6\u7684\u540c\u4e8b\u9700\u8981\u5728\u5149\u5b50\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u4e24\u4e2a\u5143\u7d20\u3002\u7b2c\u4e00\u79cd\u662f\u76f8\u5f53\u4e8e\u4f1a\u5bfc\u81f4\u5149\u5b50\u6001\u80fd\u91cf\u7b80\u5e76\u7684\u78c1\u573a\u3002\u7b2c\u4e8c\u79cd\u662f\u5149\u5b50\u76f8\u4e92\u4f5c\u7528\u7684\u65b9\u5f0f\uff0c\u8fd9\u5c06\u8feb\u4f7f\u7cfb\u7edf\u5f62\u6210\u62c9\u592b\u6797\u72b6\u6001\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u5176\u4ed6\u7b80\u5e76\u7684\u6700\u4f4e\u80fd\u91cf\u72b6\u6001\u7684\u7ec4\u5408\u3002\u5728\u4e00\u7ec4\u5f00\u521b\u6027\u7684\u5b9e\u9a8c\u4e2d\uff0c\u4f5c\u8005\u7684\u7814\u7a76\u5c0f\u7ec4\u5148\u524d\u5df2\u7ecf\u72ec\u7acb\u5730\u6f14\u793a\u4e86\u6bcf\u79cd\u5143\u7d203\u30014\u3002\u5728\u76ee\u524d\u7684\u5de5\u4f5c\u4e2d\uff0c\u8fd9\u4e9b\u5143\u7d20\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u3002\n\u514b\u62c9\u514b\u548c\u4ed6\u7684\u540c\u4e8b\u4f7f\u7528\u4e86\u4e00\u79cd\u79f0\u4e3a\u5149\u5b66\u8154\u7684\u5149\u5b50\u7cfb\u7edf\uff0c\u5b83\u7531\u56db\u9762\u955c\u5b50\u7ec4\u6210(\u56fe2B)\u3002\u8fd9\u79cd\u8bbe\u7f6e\u5bfc\u81f4\u4e0d\u540c\u7684\u62c9\u76d6\u5c14-\u9ad8\u65af\u6a21\u5f0f(\u5177\u6709\u751c\u751c\u5708\u5f62\u72b6\u7684\u5149\u6a21\u5f0f)\u5f7c\u6b64\u5177\u6709\u76f8\u540c\u7684\u80fd\u91cf\uff0c\u5f62\u6210\u7c7b\u4f3c\u6717\u9053\u80fd\u7ea7\u3002\u5728\u8154\u4e2d\u4f20\u64ad\u7684\u5149\u4e0e\u94f7\u539f\u5b50\u4e91\u76f8\u4e92\u4f5c\u7528\uff0c\u5c06\u8fd9\u4e9b\u539f\u5b50\u63d0\u5347\u5230\u9ad8\u5ea6\u6fc0\u53d1(\u91cc\u5fb7\u5821)\u6001\uff0c\u8fd9\u4e9b\u6001\u76f8\u5bf9\u8f83\u5927\uff0c\u76f8\u4e92\u4f5c\u7528\u5f88\u5f3a\u3002\u76f8\u4e92\u4f5c\u7528\u7684\u8154\u4f53\u5149\u5b50\u548c\u539f\u5b50\u5f62\u6210\u4e86\u7814\u7a76\u4eba\u5458\u7814\u7a76\u7684\u6781\u5316\u5b50\u3002\u8fd9\u4e9b\u6781\u5316\u5b50\u65e2\u7ee7\u627f\u4e86\u5176\u5149\u5b50\u90e8\u5206\u7684\u80fd\u91cf\u7b80\u5e76\uff0c\u53c8\u7ee7\u627f\u4e86\u5176\u539f\u5b50\u90e8\u5206\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fdb\u5165Laughlin\u6001\u3002\n\u4f5c\u8005\u4eec\u89c2\u5bdf\u5230\u4e86\u53ef\u80fd\u6700\u5c0f\u7684Laughlin\u6001--\u4e00\u4e2a\u7531\u4e24\u4e2a\u6781\u5316\u5b50\u7ec4\u6210\u7684\u6001\u3002\u4ed6\u4eec\u901a\u8fc7\u4ed4\u7ec6\u7814\u7a76\u8154\u4f53\u53d1\u51fa\u7684\u5149\uff0c\u5c55\u793a\u4e86\u8fd9\u79cd\u91cf\u5b50\u6001\u7684\u7279\u6027\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7cfb\u7edf\u4e2d\u7684\u65f6\u6807\u6bd4\u7535\u5b50\u7cfb\u7edf\u4e2d\u7684\u65f6\u6807\u8981\u957f\u5f97\u591a\uff0cClark\u7b49\u4eba\u8bf4\u3002\u53ef\u4ee5\u6d4b\u91cf\u6bcf\u79cd\u5149\u6a21\u5f0f\u4e0b\u7684\u5149\u5b50\u6570\u91cf\uff0c\u4ee5\u53ca\u5149\u5b50\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u76f8\u5173\u6027\uff0c\u8bc1\u660e\u4e86\u8fd9\u79cd\u957f\u671f\u5bfb\u627e\u7684\u72b6\u6001\u7684\u5f62\u6210\u3002\n\u8fd9\u9879\u5de5\u4f5c\u662f\u91cf\u5b50\u6a21\u62df\u9886\u57df\u7684\u91cc\u7a0b\u78915\uff0c6\u3002\u8be5\u9886\u57df\u7684\u7269\u7406\u5b66\u5bb6\u5efa\u7acb\u5b9e\u9a8c\u6765\u6a21\u62df\u53d1\u751f\u5728\u96be\u4ee5\u64cd\u7eb5\u548c\u4e0d\u53ef\u80fd\u7528\u8ba1\u7b97\u5efa\u6a21\u7684\u7cfb\u7edf\u4e2d\u7684\u73b0\u8c61\u3002\u4eff\u771f\u7cfb\u7edf\u4e0e\u539f\u59cb\u73b0\u8c61\u5b8c\u5168\u4e0d\u540c\uff0c\u4f46\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u63a7\u5236\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u5c1d\u8bd5\u518d\u73b0\u548c\u7406\u89e3\u73b0\u8c61\u7684\u57fa\u672c\u539f\u7406\u3002\n\u514b\u62c9\u514b\u548c\u4ed6\u7684\u540c\u4e8b\u7684\u7ed3\u679c\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u4e86\u7814\u7a76\u5f3a\u5173\u8054\u7cfb\u7edf\u7684\u91cf\u5b50\u6a21\u62df\u65b9\u6cd5\u3002\u6b64\u65b9\u6cd5\u662f\u67e5\u627e\u5177\u6709\u51fa\u5904\u7684\u6750\u6599\u7684\u5173\u952e\n\u8fd9\u9879\u5de5\u4f5c\u7684\u4e3b\u8981\u6210\u5c31\u662f\u89c2\u5bdf\u5230\u4e86\u7531\u6781\u5316\u5b50\u7ec4\u6210\u7684\u5c3d\u53ef\u80fd\u6700\u5c0f\u7684Laughlin\u6001\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u4e86\u4ed4\u7ec6\u7684\u8868\u5f81\u3002\u672a\u6765\u7684\u7814\u7a76\u53ef\u80fd\u4f1a\u4ea7\u751f\u66f4\u5927\u7684\u72b6\u6001\uff0c\u8fd9\u4e9b\u72b6\u6001\u5728\u8ba1\u7b97\u4e0a\u662f\u96be\u4ee5\u5904\u7406\u7684\uff0c\u5e76\u53ef\u4ee5\u63a2\u7d22\u8fd9\u4e2a\u7cfb\u7edf\u7684\u6fc0\u53d1\u3002\u8fd9\u6837\u7684\u8fdb\u6b65\u5c06\u6d4b\u8bd5\u8be5\u5e73\u53f0\u5bb9\u7eb3\u4e24\u4e2a\u4ee5\u4e0a\u6781\u5316\u5b50\u7684\u80fd\u529b\uff0c\u5e76\u6784\u5efa\u66f4\u5927\u7684\u7269\u8d28\u548c\u5149\u7684\u8c1c\u9898\u3002", "note_en": "Solving a difficult physics problem can be surprisingly similar to assembling an interlocking mechanical puzzle. In both cases, the particles or pieces look alike, but can be arranged into a beautiful structure that relies on the precise position of each component (Fig. 1). In 1983, the physicist Robert Laughlin made a puzzle-solving breakthrough by explaining the structure formed by interacting electrons in a device known as a Hall bar  1. Although the strange behaviour of these electrons still fascinates physicists, it is not possible to simulate such a system or accurately measure the particles\u2019 ultrashort time and length scales.  Writing in  Nature, Clark  et al.  2 report the creation of a non-electronic Laughlin state made of composite matter\u2013light particles called polaritons, which are easier to track and manipulate than are electrons.\n To picture a Laughlin state, consider a Hall bar, in which such states are usually observed (Fig. 2a). In these devices, electrons that are free to move in a two-dimensional plane are subjected to a strong magnetic field perpendicular to the plane. In classical physics, an electron at any position will start moving along a circular trajectory known as a cyclotron orbit, the radius of which depends on the particle\u2019s kinetic energy. In quantum mechanics, the electron\u2019s position will still be free, but its orbital radius \u2014 and, therefore, its kinetic energy \u2014 can be increased or decreased only in discrete steps. This feature leads to large sets of equal-energy (energy-degenerate) states called Landau levels. Non-interacting electrons added to the lowest-energy Landau level can be distributed between the level\u2019s energy-degenerate states in many different ways.\n  Adding repulsive interactions between the electrons constrains the particles\u2019 distribution over the states of the lowest Landau level, favouring configurations in which any two electrons have zero probability of being at the same spot. The states described by Laughlin have exactly this property and explain the main features of the fractional quantum Hall effect, whereby electrons in a strong magnetic field act together to behave like particles that have fractional electric charge. This work earned Laughlin a share of the 1998 Nobel Prize in Physics. Laughlin states are truly many-body states that cannot be described by typical approximations, such as the mean-field approximation. Instead, the state of each particle depends on the precise state of all the others, just as in an interlocking puzzle.\n To obtain a Laughlin state composed of polaritons, Clark and co-workers needed to add two elements to a photonic system. The first was an equivalent of the magnetic field that would cause photonic states to become energy degenerate. The second was a way for photons to interact with one other, which would force the system to form a Laughlin state, rather than any other combination of degenerate lowest-energy states. In a pioneering set of experiments, the authors\u2019 research group had previously demonstrated each element independently  3 ,  4. In the current work, these elements were combined.\n  Clark and colleagues used a photonic system called an optical cavity that consisted of four mirrors (Fig. 2b). This set-up caused different Laguerre\u2013Gauss modes (modes of light that have doughnut-shaped intensity profiles) to have the same energy as each other, forming analogues of Landau levels. Light propagating in the cavity interacted with a cloud of rubidium atoms to promote these atoms to highly excited (Rydberg) states, which are relatively large and interact strongly with one another. The interacting cavity photons and atoms formed the polaritons that the researchers investigated. These polaritons inherited both the energy degeneracy of their photonic part and the interaction of their atomic part, and could, therefore, enter a Laughlin state.\n The authors observed the smallest possible Laughlin state \u2014 one made of two polaritons. They demonstrated the properties of this quantum state by carefully studying the light emitted from the cavity. Because the timescales in this system are much longer than those in electronic systems, Clark  et al. could measure the number of photons in each light mode, as well as the photons\u2019 temporal and spatial correlations, proving the formation of this long-sought state.\n  This work is a milestone for the field of quantum simulation  5 ,  6. Physicists in this field build experiments to simulate phenomena occurring in systems that are difficult to manipulate and impossible to model computationally. The simulation system is completely different from that of the original phenomenon, but has the same number of control parameters, and can be used to try to reproduce and understand the underlying principles of the phenomenon.\n Clark and colleagues\u2019 results further validate the quantum-simulation approach to studying strongly correlated systems. This approach is key to finding materials that have exotic properties and excitations that could revolutionize electronics or quantum computing. The work was implemented on a platform pioneered by the authors\u2019 research group, clearing hurdles at which others had stumbled. For instance, the experiment subtly managed to enforce energy degeneracy, which is difficult to attain when the system is not intrinsically symmetric  7, as was the case here.\n The main achievement of this work was to observe the smallest possible Laughlin state made of polaritons, and to carefully characterize it. Future studies could produce larger states that are computationally intractable and probe the excitations of this system. Such advances would test the ability of the platform to accommodate more than two polaritons and to build bigger puzzles of matter and light.", "posttime": "2020-06-06 16:34:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d8\u6210,turned,\u72b6\u6001", "title": "\u5149\u53d8\u6210\u4e86\u5947\u5f02\u7684\u62c9\u592b\u6797\u7269\u8d28", "title_en": "Light turned into exotic Laughlin matter", "transed": 1, "url": "https://www.nature.com/articles/d41586-020-01567-3", "via": "", "real_tags": ["\u53d8\u6210", "turned", "\u72b6\u6001"]}, {"category": "", "categoryclass": "", "imagename": "534a4237d4050b0c6c176582f297c9f3.jpg", "infoid": 1005413, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ea7\u522b1\u662f\u7684\uff0c\u5f53\u6211\u767b\u5f55\u8c37\u6b4c\u505a\u4efb\u4f55\u4e8b\u60c5\u65f6\uff0c\u6211\u90fd\u4f1a\u5f97\u5230\u8fd9\u4e2a\u4fe1\u606f\u3002\u5982\u679c\u80fd\u6709\u4e2a\u53d8\u901a\u7684\u529e\u6cd5\u5c31\u597d\u4e86\u3002\n\u7ea7\u522b2\u6211\u542f\u7528\u4e86\u4e24\u6b65\u9a8c\u8bc1\u5e76\u5728\u4f1a\u8bdd\u4e4b\u95f4\u5220\u9664cookie\uff0c\u56e0\u6b64\u6211\u51e0\u4e4e\u6bcf\u5929\u90fd\u4f1a\u6536\u5230\u6b64\u6d88\u606f\u3002\u5982\u679c\u60a8\u4fdd\u7559\u8fd9\u4e9bcookie\uff0c\u60a8\u5c06\u4e0d\u9700\u8981\u518d\u6b21\u767b\u5f55\u5e76\u5b8c\u5168\u907f\u514d\u770b\u5230\u8fd9\u4e9b\u5185\u5bb9\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u60a8\u53ea\u662f\u5728\u8c08\u8bbaChrome\u5e7f\u544a\uff0c\u552f\u4e00\u53ef\u80fd\u7684\u65b9\u6cd5\u53ef\u80fd\u662f\u66f4\u6539\u6d4f\u89c8\u5668\u7684\u7528\u6237\u4ee3\u7406\uff0c\u4f7f\u5176\u770b\u8d77\u6765\u50cf\u60a8\u6b63\u5728\u4f7f\u7528Chrome xD\u3002\n\u5f53\u60a8\u5728Bing\u4e2d\u952e\u5165Chrome\u65f6\uff0c\u7ea7\u522b1 Microsoft\u4e5f\u5728\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c.\u3002\u4ed6\u4eec\u90fd\u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u4e0d\u8981\u504f\u8892\u4efb\u4f55\u4eba\u3002", "note_en": "level 1  Yeah I&#39;m getting that when I log into google for anything. It would be nice to get a workaround.\n level 2  i have 2-step verification enabled and delete cookies between sessions, so i&#39;m used to getting this message practically every day. if you keep the cookies, you won&#39;t need to log in again and avoid seeing this entirely.\n now, if you&#39;re talking just about the chrome ad, the only possible way is probably changing the browser&#39;s user agent to look like you&#39;re using chrome xD\n  level 1  Microsoft is doing the same when you type chrome in bing... They are all the same guys, don&#39;t take anyone&#39;s side.", "posttime": "2020-06-06 16:17:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e7f\u544a,google,chrome,\u767b\u5f55,login", "title": "Gmail\u767b\u5f55\u5b89\u5168\u8b66\u62a5\u6d88\u606f\u73b0\u5728\u5d4c\u5165\u4e86Google Chrome\u7684\u5e7f\u544a", "title_en": "Gmail login security alert messages now embed an ad for Google Chrome", "transed": 1, "url": "https://www.reddit.com/r/MicrosoftEdge/comments/gvfhj8/gmail_login_security_alert_messages_now_embed_an/", "via": "", "real_tags": ["\u5e7f\u544a", "google", "chrome", "\u767b\u5f55", "login"]}]